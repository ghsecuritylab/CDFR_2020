
CDFR_2020.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009b50  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000138  08009d00  08009d00  00019d00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009e38  08009e38  000201e0  2**0
                  CONTENTS
  4 .ARM          00000008  08009e38  08009e38  00019e38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009e40  08009e40  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009e40  08009e40  00019e40  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009e44  08009e44  00019e44  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  08009e48  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00005964  200001e0  0800a028  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20005b44  0800a028  00025b44  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00027dab  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00005632  00000000  00000000  00047fbb  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001ae8  00000000  00000000  0004d5f0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001870  00000000  00000000  0004f0d8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0000a355  00000000  00000000  00050948  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001be48  00000000  00000000  0005ac9d  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000fea20  00000000  00000000  00076ae5  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00175505  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006ef4  00000000  00000000  00175580  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	200001e0 	.word	0x200001e0
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08009ce8 	.word	0x08009ce8

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	200001e4 	.word	0x200001e4
 80001ec:	08009ce8 	.word	0x08009ce8

080001f0 <__aeabi_uldivmod>:
 80001f0:	b953      	cbnz	r3, 8000208 <__aeabi_uldivmod+0x18>
 80001f2:	b94a      	cbnz	r2, 8000208 <__aeabi_uldivmod+0x18>
 80001f4:	2900      	cmp	r1, #0
 80001f6:	bf08      	it	eq
 80001f8:	2800      	cmpeq	r0, #0
 80001fa:	bf1c      	itt	ne
 80001fc:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000200:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000204:	f000 b972 	b.w	80004ec <__aeabi_idiv0>
 8000208:	f1ad 0c08 	sub.w	ip, sp, #8
 800020c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000210:	f000 f806 	bl	8000220 <__udivmoddi4>
 8000214:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000218:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800021c:	b004      	add	sp, #16
 800021e:	4770      	bx	lr

08000220 <__udivmoddi4>:
 8000220:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000224:	9e08      	ldr	r6, [sp, #32]
 8000226:	4604      	mov	r4, r0
 8000228:	4688      	mov	r8, r1
 800022a:	2b00      	cmp	r3, #0
 800022c:	d14b      	bne.n	80002c6 <__udivmoddi4+0xa6>
 800022e:	428a      	cmp	r2, r1
 8000230:	4615      	mov	r5, r2
 8000232:	d967      	bls.n	8000304 <__udivmoddi4+0xe4>
 8000234:	fab2 f282 	clz	r2, r2
 8000238:	b14a      	cbz	r2, 800024e <__udivmoddi4+0x2e>
 800023a:	f1c2 0720 	rsb	r7, r2, #32
 800023e:	fa01 f302 	lsl.w	r3, r1, r2
 8000242:	fa20 f707 	lsr.w	r7, r0, r7
 8000246:	4095      	lsls	r5, r2
 8000248:	ea47 0803 	orr.w	r8, r7, r3
 800024c:	4094      	lsls	r4, r2
 800024e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000252:	0c23      	lsrs	r3, r4, #16
 8000254:	fbb8 f7fe 	udiv	r7, r8, lr
 8000258:	fa1f fc85 	uxth.w	ip, r5
 800025c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000260:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000264:	fb07 f10c 	mul.w	r1, r7, ip
 8000268:	4299      	cmp	r1, r3
 800026a:	d909      	bls.n	8000280 <__udivmoddi4+0x60>
 800026c:	18eb      	adds	r3, r5, r3
 800026e:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 8000272:	f080 811b 	bcs.w	80004ac <__udivmoddi4+0x28c>
 8000276:	4299      	cmp	r1, r3
 8000278:	f240 8118 	bls.w	80004ac <__udivmoddi4+0x28c>
 800027c:	3f02      	subs	r7, #2
 800027e:	442b      	add	r3, r5
 8000280:	1a5b      	subs	r3, r3, r1
 8000282:	b2a4      	uxth	r4, r4
 8000284:	fbb3 f0fe 	udiv	r0, r3, lr
 8000288:	fb0e 3310 	mls	r3, lr, r0, r3
 800028c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000290:	fb00 fc0c 	mul.w	ip, r0, ip
 8000294:	45a4      	cmp	ip, r4
 8000296:	d909      	bls.n	80002ac <__udivmoddi4+0x8c>
 8000298:	192c      	adds	r4, r5, r4
 800029a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800029e:	f080 8107 	bcs.w	80004b0 <__udivmoddi4+0x290>
 80002a2:	45a4      	cmp	ip, r4
 80002a4:	f240 8104 	bls.w	80004b0 <__udivmoddi4+0x290>
 80002a8:	3802      	subs	r0, #2
 80002aa:	442c      	add	r4, r5
 80002ac:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002b0:	eba4 040c 	sub.w	r4, r4, ip
 80002b4:	2700      	movs	r7, #0
 80002b6:	b11e      	cbz	r6, 80002c0 <__udivmoddi4+0xa0>
 80002b8:	40d4      	lsrs	r4, r2
 80002ba:	2300      	movs	r3, #0
 80002bc:	e9c6 4300 	strd	r4, r3, [r6]
 80002c0:	4639      	mov	r1, r7
 80002c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d909      	bls.n	80002de <__udivmoddi4+0xbe>
 80002ca:	2e00      	cmp	r6, #0
 80002cc:	f000 80eb 	beq.w	80004a6 <__udivmoddi4+0x286>
 80002d0:	2700      	movs	r7, #0
 80002d2:	e9c6 0100 	strd	r0, r1, [r6]
 80002d6:	4638      	mov	r0, r7
 80002d8:	4639      	mov	r1, r7
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	fab3 f783 	clz	r7, r3
 80002e2:	2f00      	cmp	r7, #0
 80002e4:	d147      	bne.n	8000376 <__udivmoddi4+0x156>
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d302      	bcc.n	80002f0 <__udivmoddi4+0xd0>
 80002ea:	4282      	cmp	r2, r0
 80002ec:	f200 80fa 	bhi.w	80004e4 <__udivmoddi4+0x2c4>
 80002f0:	1a84      	subs	r4, r0, r2
 80002f2:	eb61 0303 	sbc.w	r3, r1, r3
 80002f6:	2001      	movs	r0, #1
 80002f8:	4698      	mov	r8, r3
 80002fa:	2e00      	cmp	r6, #0
 80002fc:	d0e0      	beq.n	80002c0 <__udivmoddi4+0xa0>
 80002fe:	e9c6 4800 	strd	r4, r8, [r6]
 8000302:	e7dd      	b.n	80002c0 <__udivmoddi4+0xa0>
 8000304:	b902      	cbnz	r2, 8000308 <__udivmoddi4+0xe8>
 8000306:	deff      	udf	#255	; 0xff
 8000308:	fab2 f282 	clz	r2, r2
 800030c:	2a00      	cmp	r2, #0
 800030e:	f040 808f 	bne.w	8000430 <__udivmoddi4+0x210>
 8000312:	1b49      	subs	r1, r1, r5
 8000314:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000318:	fa1f f885 	uxth.w	r8, r5
 800031c:	2701      	movs	r7, #1
 800031e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000322:	0c23      	lsrs	r3, r4, #16
 8000324:	fb0e 111c 	mls	r1, lr, ip, r1
 8000328:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800032c:	fb08 f10c 	mul.w	r1, r8, ip
 8000330:	4299      	cmp	r1, r3
 8000332:	d907      	bls.n	8000344 <__udivmoddi4+0x124>
 8000334:	18eb      	adds	r3, r5, r3
 8000336:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 800033a:	d202      	bcs.n	8000342 <__udivmoddi4+0x122>
 800033c:	4299      	cmp	r1, r3
 800033e:	f200 80cd 	bhi.w	80004dc <__udivmoddi4+0x2bc>
 8000342:	4684      	mov	ip, r0
 8000344:	1a59      	subs	r1, r3, r1
 8000346:	b2a3      	uxth	r3, r4
 8000348:	fbb1 f0fe 	udiv	r0, r1, lr
 800034c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000350:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000354:	fb08 f800 	mul.w	r8, r8, r0
 8000358:	45a0      	cmp	r8, r4
 800035a:	d907      	bls.n	800036c <__udivmoddi4+0x14c>
 800035c:	192c      	adds	r4, r5, r4
 800035e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000362:	d202      	bcs.n	800036a <__udivmoddi4+0x14a>
 8000364:	45a0      	cmp	r8, r4
 8000366:	f200 80b6 	bhi.w	80004d6 <__udivmoddi4+0x2b6>
 800036a:	4618      	mov	r0, r3
 800036c:	eba4 0408 	sub.w	r4, r4, r8
 8000370:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000374:	e79f      	b.n	80002b6 <__udivmoddi4+0x96>
 8000376:	f1c7 0c20 	rsb	ip, r7, #32
 800037a:	40bb      	lsls	r3, r7
 800037c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000380:	ea4e 0e03 	orr.w	lr, lr, r3
 8000384:	fa01 f407 	lsl.w	r4, r1, r7
 8000388:	fa20 f50c 	lsr.w	r5, r0, ip
 800038c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000390:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000394:	4325      	orrs	r5, r4
 8000396:	fbb3 f9f8 	udiv	r9, r3, r8
 800039a:	0c2c      	lsrs	r4, r5, #16
 800039c:	fb08 3319 	mls	r3, r8, r9, r3
 80003a0:	fa1f fa8e 	uxth.w	sl, lr
 80003a4:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80003a8:	fb09 f40a 	mul.w	r4, r9, sl
 80003ac:	429c      	cmp	r4, r3
 80003ae:	fa02 f207 	lsl.w	r2, r2, r7
 80003b2:	fa00 f107 	lsl.w	r1, r0, r7
 80003b6:	d90b      	bls.n	80003d0 <__udivmoddi4+0x1b0>
 80003b8:	eb1e 0303 	adds.w	r3, lr, r3
 80003bc:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 80003c0:	f080 8087 	bcs.w	80004d2 <__udivmoddi4+0x2b2>
 80003c4:	429c      	cmp	r4, r3
 80003c6:	f240 8084 	bls.w	80004d2 <__udivmoddi4+0x2b2>
 80003ca:	f1a9 0902 	sub.w	r9, r9, #2
 80003ce:	4473      	add	r3, lr
 80003d0:	1b1b      	subs	r3, r3, r4
 80003d2:	b2ad      	uxth	r5, r5
 80003d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80003d8:	fb08 3310 	mls	r3, r8, r0, r3
 80003dc:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003e0:	fb00 fa0a 	mul.w	sl, r0, sl
 80003e4:	45a2      	cmp	sl, r4
 80003e6:	d908      	bls.n	80003fa <__udivmoddi4+0x1da>
 80003e8:	eb1e 0404 	adds.w	r4, lr, r4
 80003ec:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003f0:	d26b      	bcs.n	80004ca <__udivmoddi4+0x2aa>
 80003f2:	45a2      	cmp	sl, r4
 80003f4:	d969      	bls.n	80004ca <__udivmoddi4+0x2aa>
 80003f6:	3802      	subs	r0, #2
 80003f8:	4474      	add	r4, lr
 80003fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003fe:	fba0 8902 	umull	r8, r9, r0, r2
 8000402:	eba4 040a 	sub.w	r4, r4, sl
 8000406:	454c      	cmp	r4, r9
 8000408:	46c2      	mov	sl, r8
 800040a:	464b      	mov	r3, r9
 800040c:	d354      	bcc.n	80004b8 <__udivmoddi4+0x298>
 800040e:	d051      	beq.n	80004b4 <__udivmoddi4+0x294>
 8000410:	2e00      	cmp	r6, #0
 8000412:	d069      	beq.n	80004e8 <__udivmoddi4+0x2c8>
 8000414:	ebb1 050a 	subs.w	r5, r1, sl
 8000418:	eb64 0403 	sbc.w	r4, r4, r3
 800041c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000420:	40fd      	lsrs	r5, r7
 8000422:	40fc      	lsrs	r4, r7
 8000424:	ea4c 0505 	orr.w	r5, ip, r5
 8000428:	e9c6 5400 	strd	r5, r4, [r6]
 800042c:	2700      	movs	r7, #0
 800042e:	e747      	b.n	80002c0 <__udivmoddi4+0xa0>
 8000430:	f1c2 0320 	rsb	r3, r2, #32
 8000434:	fa20 f703 	lsr.w	r7, r0, r3
 8000438:	4095      	lsls	r5, r2
 800043a:	fa01 f002 	lsl.w	r0, r1, r2
 800043e:	fa21 f303 	lsr.w	r3, r1, r3
 8000442:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000446:	4338      	orrs	r0, r7
 8000448:	0c01      	lsrs	r1, r0, #16
 800044a:	fbb3 f7fe 	udiv	r7, r3, lr
 800044e:	fa1f f885 	uxth.w	r8, r5
 8000452:	fb0e 3317 	mls	r3, lr, r7, r3
 8000456:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045a:	fb07 f308 	mul.w	r3, r7, r8
 800045e:	428b      	cmp	r3, r1
 8000460:	fa04 f402 	lsl.w	r4, r4, r2
 8000464:	d907      	bls.n	8000476 <__udivmoddi4+0x256>
 8000466:	1869      	adds	r1, r5, r1
 8000468:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 800046c:	d22f      	bcs.n	80004ce <__udivmoddi4+0x2ae>
 800046e:	428b      	cmp	r3, r1
 8000470:	d92d      	bls.n	80004ce <__udivmoddi4+0x2ae>
 8000472:	3f02      	subs	r7, #2
 8000474:	4429      	add	r1, r5
 8000476:	1acb      	subs	r3, r1, r3
 8000478:	b281      	uxth	r1, r0
 800047a:	fbb3 f0fe 	udiv	r0, r3, lr
 800047e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000482:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000486:	fb00 f308 	mul.w	r3, r0, r8
 800048a:	428b      	cmp	r3, r1
 800048c:	d907      	bls.n	800049e <__udivmoddi4+0x27e>
 800048e:	1869      	adds	r1, r5, r1
 8000490:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000494:	d217      	bcs.n	80004c6 <__udivmoddi4+0x2a6>
 8000496:	428b      	cmp	r3, r1
 8000498:	d915      	bls.n	80004c6 <__udivmoddi4+0x2a6>
 800049a:	3802      	subs	r0, #2
 800049c:	4429      	add	r1, r5
 800049e:	1ac9      	subs	r1, r1, r3
 80004a0:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004a4:	e73b      	b.n	800031e <__udivmoddi4+0xfe>
 80004a6:	4637      	mov	r7, r6
 80004a8:	4630      	mov	r0, r6
 80004aa:	e709      	b.n	80002c0 <__udivmoddi4+0xa0>
 80004ac:	4607      	mov	r7, r0
 80004ae:	e6e7      	b.n	8000280 <__udivmoddi4+0x60>
 80004b0:	4618      	mov	r0, r3
 80004b2:	e6fb      	b.n	80002ac <__udivmoddi4+0x8c>
 80004b4:	4541      	cmp	r1, r8
 80004b6:	d2ab      	bcs.n	8000410 <__udivmoddi4+0x1f0>
 80004b8:	ebb8 0a02 	subs.w	sl, r8, r2
 80004bc:	eb69 020e 	sbc.w	r2, r9, lr
 80004c0:	3801      	subs	r0, #1
 80004c2:	4613      	mov	r3, r2
 80004c4:	e7a4      	b.n	8000410 <__udivmoddi4+0x1f0>
 80004c6:	4660      	mov	r0, ip
 80004c8:	e7e9      	b.n	800049e <__udivmoddi4+0x27e>
 80004ca:	4618      	mov	r0, r3
 80004cc:	e795      	b.n	80003fa <__udivmoddi4+0x1da>
 80004ce:	4667      	mov	r7, ip
 80004d0:	e7d1      	b.n	8000476 <__udivmoddi4+0x256>
 80004d2:	4681      	mov	r9, r0
 80004d4:	e77c      	b.n	80003d0 <__udivmoddi4+0x1b0>
 80004d6:	3802      	subs	r0, #2
 80004d8:	442c      	add	r4, r5
 80004da:	e747      	b.n	800036c <__udivmoddi4+0x14c>
 80004dc:	f1ac 0c02 	sub.w	ip, ip, #2
 80004e0:	442b      	add	r3, r5
 80004e2:	e72f      	b.n	8000344 <__udivmoddi4+0x124>
 80004e4:	4638      	mov	r0, r7
 80004e6:	e708      	b.n	80002fa <__udivmoddi4+0xda>
 80004e8:	4637      	mov	r7, r6
 80004ea:	e6e9      	b.n	80002c0 <__udivmoddi4+0xa0>

080004ec <__aeabi_idiv0>:
 80004ec:	4770      	bx	lr
 80004ee:	bf00      	nop

080004f0 <MX_ETH_Init>:

ETH_HandleTypeDef heth;

/* ETH init function */
void MX_ETH_Init(void)
{
 80004f0:	b580      	push	{r7, lr}
 80004f2:	af00      	add	r7, sp, #0

  heth.Instance = ETH;
 80004f4:	4b1c      	ldr	r3, [pc, #112]	; (8000568 <MX_ETH_Init+0x78>)
 80004f6:	4a1d      	ldr	r2, [pc, #116]	; (800056c <MX_ETH_Init+0x7c>)
 80004f8:	601a      	str	r2, [r3, #0]
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 80004fa:	4b1b      	ldr	r3, [pc, #108]	; (8000568 <MX_ETH_Init+0x78>)
 80004fc:	2201      	movs	r2, #1
 80004fe:	605a      	str	r2, [r3, #4]
  heth.Init.PhyAddress = LAN8742A_PHY_ADDRESS;
 8000500:	4b19      	ldr	r3, [pc, #100]	; (8000568 <MX_ETH_Init+0x78>)
 8000502:	2200      	movs	r2, #0
 8000504:	821a      	strh	r2, [r3, #16]
  heth.Init.MACAddr[0] =   0x00;
 8000506:	4b18      	ldr	r3, [pc, #96]	; (8000568 <MX_ETH_Init+0x78>)
 8000508:	695b      	ldr	r3, [r3, #20]
 800050a:	2200      	movs	r2, #0
 800050c:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[1] =   0x80;
 800050e:	4b16      	ldr	r3, [pc, #88]	; (8000568 <MX_ETH_Init+0x78>)
 8000510:	695b      	ldr	r3, [r3, #20]
 8000512:	3301      	adds	r3, #1
 8000514:	2280      	movs	r2, #128	; 0x80
 8000516:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[2] =   0xE1;
 8000518:	4b13      	ldr	r3, [pc, #76]	; (8000568 <MX_ETH_Init+0x78>)
 800051a:	695b      	ldr	r3, [r3, #20]
 800051c:	3302      	adds	r3, #2
 800051e:	22e1      	movs	r2, #225	; 0xe1
 8000520:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[3] =   0x00;
 8000522:	4b11      	ldr	r3, [pc, #68]	; (8000568 <MX_ETH_Init+0x78>)
 8000524:	695b      	ldr	r3, [r3, #20]
 8000526:	3303      	adds	r3, #3
 8000528:	2200      	movs	r2, #0
 800052a:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[4] =   0x00;
 800052c:	4b0e      	ldr	r3, [pc, #56]	; (8000568 <MX_ETH_Init+0x78>)
 800052e:	695b      	ldr	r3, [r3, #20]
 8000530:	3304      	adds	r3, #4
 8000532:	2200      	movs	r2, #0
 8000534:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[5] =   0x00;
 8000536:	4b0c      	ldr	r3, [pc, #48]	; (8000568 <MX_ETH_Init+0x78>)
 8000538:	695b      	ldr	r3, [r3, #20]
 800053a:	3305      	adds	r3, #5
 800053c:	2200      	movs	r2, #0
 800053e:	701a      	strb	r2, [r3, #0]
  heth.Init.RxMode = ETH_RXPOLLING_MODE;
 8000540:	4b09      	ldr	r3, [pc, #36]	; (8000568 <MX_ETH_Init+0x78>)
 8000542:	2200      	movs	r2, #0
 8000544:	619a      	str	r2, [r3, #24]
  heth.Init.ChecksumMode = ETH_CHECKSUM_BY_HARDWARE;
 8000546:	4b08      	ldr	r3, [pc, #32]	; (8000568 <MX_ETH_Init+0x78>)
 8000548:	2200      	movs	r2, #0
 800054a:	61da      	str	r2, [r3, #28]
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 800054c:	4b06      	ldr	r3, [pc, #24]	; (8000568 <MX_ETH_Init+0x78>)
 800054e:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8000552:	621a      	str	r2, [r3, #32]

  /* USER CODE BEGIN MACADDRESS */
    
  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8000554:	4804      	ldr	r0, [pc, #16]	; (8000568 <MX_ETH_Init+0x78>)
 8000556:	f001 f8f1 	bl	800173c <HAL_ETH_Init>
 800055a:	4603      	mov	r3, r0
 800055c:	2b00      	cmp	r3, #0
 800055e:	d001      	beq.n	8000564 <MX_ETH_Init+0x74>
  {
    Error_Handler();
 8000560:	f000 fd50 	bl	8001004 <Error_Handler>
  }

}
 8000564:	bf00      	nop
 8000566:	bd80      	pop	{r7, pc}
 8000568:	200041fc 	.word	0x200041fc
 800056c:	40028000 	.word	0x40028000

08000570 <HAL_ETH_MspInit>:

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8000570:	b580      	push	{r7, lr}
 8000572:	b08e      	sub	sp, #56	; 0x38
 8000574:	af00      	add	r7, sp, #0
 8000576:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000578:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800057c:	2200      	movs	r2, #0
 800057e:	601a      	str	r2, [r3, #0]
 8000580:	605a      	str	r2, [r3, #4]
 8000582:	609a      	str	r2, [r3, #8]
 8000584:	60da      	str	r2, [r3, #12]
 8000586:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 8000588:	687b      	ldr	r3, [r7, #4]
 800058a:	681b      	ldr	r3, [r3, #0]
 800058c:	4a59      	ldr	r2, [pc, #356]	; (80006f4 <HAL_ETH_MspInit+0x184>)
 800058e:	4293      	cmp	r3, r2
 8000590:	f040 80ac 	bne.w	80006ec <HAL_ETH_MspInit+0x17c>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* ETH clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8000594:	2300      	movs	r3, #0
 8000596:	623b      	str	r3, [r7, #32]
 8000598:	4b57      	ldr	r3, [pc, #348]	; (80006f8 <HAL_ETH_MspInit+0x188>)
 800059a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800059c:	4a56      	ldr	r2, [pc, #344]	; (80006f8 <HAL_ETH_MspInit+0x188>)
 800059e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80005a2:	6313      	str	r3, [r2, #48]	; 0x30
 80005a4:	4b54      	ldr	r3, [pc, #336]	; (80006f8 <HAL_ETH_MspInit+0x188>)
 80005a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80005ac:	623b      	str	r3, [r7, #32]
 80005ae:	6a3b      	ldr	r3, [r7, #32]
 80005b0:	2300      	movs	r3, #0
 80005b2:	61fb      	str	r3, [r7, #28]
 80005b4:	4b50      	ldr	r3, [pc, #320]	; (80006f8 <HAL_ETH_MspInit+0x188>)
 80005b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005b8:	4a4f      	ldr	r2, [pc, #316]	; (80006f8 <HAL_ETH_MspInit+0x188>)
 80005ba:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80005be:	6313      	str	r3, [r2, #48]	; 0x30
 80005c0:	4b4d      	ldr	r3, [pc, #308]	; (80006f8 <HAL_ETH_MspInit+0x188>)
 80005c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005c4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80005c8:	61fb      	str	r3, [r7, #28]
 80005ca:	69fb      	ldr	r3, [r7, #28]
 80005cc:	2300      	movs	r3, #0
 80005ce:	61bb      	str	r3, [r7, #24]
 80005d0:	4b49      	ldr	r3, [pc, #292]	; (80006f8 <HAL_ETH_MspInit+0x188>)
 80005d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005d4:	4a48      	ldr	r2, [pc, #288]	; (80006f8 <HAL_ETH_MspInit+0x188>)
 80005d6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80005da:	6313      	str	r3, [r2, #48]	; 0x30
 80005dc:	4b46      	ldr	r3, [pc, #280]	; (80006f8 <HAL_ETH_MspInit+0x188>)
 80005de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005e0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80005e4:	61bb      	str	r3, [r7, #24]
 80005e6:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80005e8:	2300      	movs	r3, #0
 80005ea:	617b      	str	r3, [r7, #20]
 80005ec:	4b42      	ldr	r3, [pc, #264]	; (80006f8 <HAL_ETH_MspInit+0x188>)
 80005ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005f0:	4a41      	ldr	r2, [pc, #260]	; (80006f8 <HAL_ETH_MspInit+0x188>)
 80005f2:	f043 0304 	orr.w	r3, r3, #4
 80005f6:	6313      	str	r3, [r2, #48]	; 0x30
 80005f8:	4b3f      	ldr	r3, [pc, #252]	; (80006f8 <HAL_ETH_MspInit+0x188>)
 80005fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005fc:	f003 0304 	and.w	r3, r3, #4
 8000600:	617b      	str	r3, [r7, #20]
 8000602:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000604:	2300      	movs	r3, #0
 8000606:	613b      	str	r3, [r7, #16]
 8000608:	4b3b      	ldr	r3, [pc, #236]	; (80006f8 <HAL_ETH_MspInit+0x188>)
 800060a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800060c:	4a3a      	ldr	r2, [pc, #232]	; (80006f8 <HAL_ETH_MspInit+0x188>)
 800060e:	f043 0301 	orr.w	r3, r3, #1
 8000612:	6313      	str	r3, [r2, #48]	; 0x30
 8000614:	4b38      	ldr	r3, [pc, #224]	; (80006f8 <HAL_ETH_MspInit+0x188>)
 8000616:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000618:	f003 0301 	and.w	r3, r3, #1
 800061c:	613b      	str	r3, [r7, #16]
 800061e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000620:	2300      	movs	r3, #0
 8000622:	60fb      	str	r3, [r7, #12]
 8000624:	4b34      	ldr	r3, [pc, #208]	; (80006f8 <HAL_ETH_MspInit+0x188>)
 8000626:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000628:	4a33      	ldr	r2, [pc, #204]	; (80006f8 <HAL_ETH_MspInit+0x188>)
 800062a:	f043 0302 	orr.w	r3, r3, #2
 800062e:	6313      	str	r3, [r2, #48]	; 0x30
 8000630:	4b31      	ldr	r3, [pc, #196]	; (80006f8 <HAL_ETH_MspInit+0x188>)
 8000632:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000634:	f003 0302 	and.w	r3, r3, #2
 8000638:	60fb      	str	r3, [r7, #12]
 800063a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800063c:	2300      	movs	r3, #0
 800063e:	60bb      	str	r3, [r7, #8]
 8000640:	4b2d      	ldr	r3, [pc, #180]	; (80006f8 <HAL_ETH_MspInit+0x188>)
 8000642:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000644:	4a2c      	ldr	r2, [pc, #176]	; (80006f8 <HAL_ETH_MspInit+0x188>)
 8000646:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800064a:	6313      	str	r3, [r2, #48]	; 0x30
 800064c:	4b2a      	ldr	r3, [pc, #168]	; (80006f8 <HAL_ETH_MspInit+0x188>)
 800064e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000650:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000654:	60bb      	str	r3, [r7, #8]
 8000656:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0 
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000658:	2332      	movs	r3, #50	; 0x32
 800065a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800065c:	2302      	movs	r3, #2
 800065e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000660:	2300      	movs	r3, #0
 8000662:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000664:	2303      	movs	r3, #3
 8000666:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000668:	230b      	movs	r3, #11
 800066a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800066c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000670:	4619      	mov	r1, r3
 8000672:	4822      	ldr	r0, [pc, #136]	; (80006fc <HAL_ETH_MspInit+0x18c>)
 8000674:	f001 fd42 	bl	80020fc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000678:	2386      	movs	r3, #134	; 0x86
 800067a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800067c:	2302      	movs	r3, #2
 800067e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000680:	2300      	movs	r3, #0
 8000682:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000684:	2303      	movs	r3, #3
 8000686:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000688:	230b      	movs	r3, #11
 800068a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800068c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000690:	4619      	mov	r1, r3
 8000692:	481b      	ldr	r0, [pc, #108]	; (8000700 <HAL_ETH_MspInit+0x190>)
 8000694:	f001 fd32 	bl	80020fc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000698:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800069c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800069e:	2302      	movs	r3, #2
 80006a0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006a2:	2300      	movs	r3, #0
 80006a4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80006a6:	2303      	movs	r3, #3
 80006a8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80006aa:	230b      	movs	r3, #11
 80006ac:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 80006ae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80006b2:	4619      	mov	r1, r3
 80006b4:	4813      	ldr	r0, [pc, #76]	; (8000704 <HAL_ETH_MspInit+0x194>)
 80006b6:	f001 fd21 	bl	80020fc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 80006ba:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80006be:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006c0:	2302      	movs	r3, #2
 80006c2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006c4:	2300      	movs	r3, #0
 80006c6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80006c8:	2303      	movs	r3, #3
 80006ca:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80006cc:	230b      	movs	r3, #11
 80006ce:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80006d0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80006d4:	4619      	mov	r1, r3
 80006d6:	480c      	ldr	r0, [pc, #48]	; (8000708 <HAL_ETH_MspInit+0x198>)
 80006d8:	f001 fd10 	bl	80020fc <HAL_GPIO_Init>

    /* ETH interrupt Init */
    HAL_NVIC_SetPriority(ETH_IRQn, 5, 0);
 80006dc:	2200      	movs	r2, #0
 80006de:	2105      	movs	r1, #5
 80006e0:	203d      	movs	r0, #61	; 0x3d
 80006e2:	f001 f801 	bl	80016e8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 80006e6:	203d      	movs	r0, #61	; 0x3d
 80006e8:	f001 f81a 	bl	8001720 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 80006ec:	bf00      	nop
 80006ee:	3738      	adds	r7, #56	; 0x38
 80006f0:	46bd      	mov	sp, r7
 80006f2:	bd80      	pop	{r7, pc}
 80006f4:	40028000 	.word	0x40028000
 80006f8:	40023800 	.word	0x40023800
 80006fc:	40020800 	.word	0x40020800
 8000700:	40020000 	.word	0x40020000
 8000704:	40020400 	.word	0x40020400
 8000708:	40021800 	.word	0x40021800

0800070c <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];
  
void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 800070c:	b480      	push	{r7}
 800070e:	b085      	sub	sp, #20
 8000710:	af00      	add	r7, sp, #0
 8000712:	60f8      	str	r0, [r7, #12]
 8000714:	60b9      	str	r1, [r7, #8]
 8000716:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000718:	68fb      	ldr	r3, [r7, #12]
 800071a:	4a07      	ldr	r2, [pc, #28]	; (8000738 <vApplicationGetIdleTaskMemory+0x2c>)
 800071c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800071e:	68bb      	ldr	r3, [r7, #8]
 8000720:	4a06      	ldr	r2, [pc, #24]	; (800073c <vApplicationGetIdleTaskMemory+0x30>)
 8000722:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000724:	687b      	ldr	r3, [r7, #4]
 8000726:	2280      	movs	r2, #128	; 0x80
 8000728:	601a      	str	r2, [r3, #0]
  /* place for user code */
}                   
 800072a:	bf00      	nop
 800072c:	3714      	adds	r7, #20
 800072e:	46bd      	mov	sp, r7
 8000730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000734:	4770      	bx	lr
 8000736:	bf00      	nop
 8000738:	200001fc 	.word	0x200001fc
 800073c:	20000250 	.word	0x20000250

08000740 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000740:	b5b0      	push	{r4, r5, r7, lr}
 8000742:	b0a4      	sub	sp, #144	; 0x90
 8000744:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 256);
 8000746:	4b30      	ldr	r3, [pc, #192]	; (8000808 <MX_FREERTOS_Init+0xc8>)
 8000748:	f107 0474 	add.w	r4, r7, #116	; 0x74
 800074c:	461d      	mov	r5, r3
 800074e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000750:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000752:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000756:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 800075a:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800075e:	2100      	movs	r1, #0
 8000760:	4618      	mov	r0, r3
 8000762:	f007 fa1c 	bl	8007b9e <osThreadCreate>
 8000766:	4602      	mov	r2, r0
 8000768:	4b28      	ldr	r3, [pc, #160]	; (800080c <MX_FREERTOS_Init+0xcc>)
 800076a:	601a      	str	r2, [r3, #0]

  /* definition and creation of MotionRegTask */
  osThreadDef(MotionRegTask, StartMotionRegTask, osPriorityHigh, 0, 256);
 800076c:	4b28      	ldr	r3, [pc, #160]	; (8000810 <MX_FREERTOS_Init+0xd0>)
 800076e:	f107 0458 	add.w	r4, r7, #88	; 0x58
 8000772:	461d      	mov	r5, r3
 8000774:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000776:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000778:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800077c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  MotionRegTaskHandle = osThreadCreate(osThread(MotionRegTask), NULL);
 8000780:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000784:	2100      	movs	r1, #0
 8000786:	4618      	mov	r0, r3
 8000788:	f007 fa09 	bl	8007b9e <osThreadCreate>
 800078c:	4602      	mov	r2, r0
 800078e:	4b21      	ldr	r3, [pc, #132]	; (8000814 <MX_FREERTOS_Init+0xd4>)
 8000790:	601a      	str	r2, [r3, #0]

  /* definition and creation of OdometryRegTask */
  osThreadDef(OdometryRegTask, StartOdometryRegTask, osPriorityRealtime, 0, 256);
 8000792:	4b21      	ldr	r3, [pc, #132]	; (8000818 <MX_FREERTOS_Init+0xd8>)
 8000794:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 8000798:	461d      	mov	r5, r3
 800079a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800079c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800079e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80007a2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  OdometryRegTaskHandle = osThreadCreate(osThread(OdometryRegTask), NULL);
 80007a6:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80007aa:	2100      	movs	r1, #0
 80007ac:	4618      	mov	r0, r3
 80007ae:	f007 f9f6 	bl	8007b9e <osThreadCreate>
 80007b2:	4602      	mov	r2, r0
 80007b4:	4b19      	ldr	r3, [pc, #100]	; (800081c <MX_FREERTOS_Init+0xdc>)
 80007b6:	601a      	str	r2, [r3, #0]

  /* definition and creation of SensorsTask */
  osThreadDef(SensorsTask, StartSensorsTask, osPriorityNormal, 0, 256);
 80007b8:	4b19      	ldr	r3, [pc, #100]	; (8000820 <MX_FREERTOS_Init+0xe0>)
 80007ba:	f107 0420 	add.w	r4, r7, #32
 80007be:	461d      	mov	r5, r3
 80007c0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80007c2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80007c4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80007c8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  SensorsTaskHandle = osThreadCreate(osThread(SensorsTask), NULL);
 80007cc:	f107 0320 	add.w	r3, r7, #32
 80007d0:	2100      	movs	r1, #0
 80007d2:	4618      	mov	r0, r3
 80007d4:	f007 f9e3 	bl	8007b9e <osThreadCreate>
 80007d8:	4602      	mov	r2, r0
 80007da:	4b12      	ldr	r3, [pc, #72]	; (8000824 <MX_FREERTOS_Init+0xe4>)
 80007dc:	601a      	str	r2, [r3, #0]

  /* definition and creation of DebugTask */
  osThreadDef(DebugTask, StartDebugTask, osPriorityNormal, 0, 256);
 80007de:	4b12      	ldr	r3, [pc, #72]	; (8000828 <MX_FREERTOS_Init+0xe8>)
 80007e0:	1d3c      	adds	r4, r7, #4
 80007e2:	461d      	mov	r5, r3
 80007e4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80007e6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80007e8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80007ec:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  DebugTaskHandle = osThreadCreate(osThread(DebugTask), NULL);
 80007f0:	1d3b      	adds	r3, r7, #4
 80007f2:	2100      	movs	r1, #0
 80007f4:	4618      	mov	r0, r3
 80007f6:	f007 f9d2 	bl	8007b9e <osThreadCreate>
 80007fa:	4602      	mov	r2, r0
 80007fc:	4b0b      	ldr	r3, [pc, #44]	; (800082c <MX_FREERTOS_Init+0xec>)
 80007fe:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 8000800:	bf00      	nop
 8000802:	3790      	adds	r7, #144	; 0x90
 8000804:	46bd      	mov	sp, r7
 8000806:	bdb0      	pop	{r4, r5, r7, pc}
 8000808:	08009d0c 	.word	0x08009d0c
 800080c:	20004244 	.word	0x20004244
 8000810:	08009d38 	.word	0x08009d38
 8000814:	20004254 	.word	0x20004254
 8000818:	08009d64 	.word	0x08009d64
 800081c:	2000424c 	.word	0x2000424c
 8000820:	08009d8c 	.word	0x08009d8c
 8000824:	20004250 	.word	0x20004250
 8000828:	08009db4 	.word	0x08009db4
 800082c:	20004248 	.word	0x20004248

08000830 <StartDefaultTask>:
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000830:	b580      	push	{r7, lr}
 8000832:	b082      	sub	sp, #8
 8000834:	af00      	add	r7, sp, #0
 8000836:	6078      	str	r0, [r7, #4]
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 8000838:	f008 fc80 	bl	800913c <MX_USB_DEVICE_Init>


  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 800083c:	2001      	movs	r0, #1
 800083e:	f007 f9fa 	bl	8007c36 <osDelay>
 8000842:	e7fb      	b.n	800083c <StartDefaultTask+0xc>

08000844 <StartMotionRegTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartMotionRegTask */
void StartMotionRegTask(void const * argument)
{
 8000844:	b580      	push	{r7, lr}
 8000846:	b082      	sub	sp, #8
 8000848:	af00      	add	r7, sp, #0
 800084a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartMotionRegTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 800084c:	2001      	movs	r0, #1
 800084e:	f007 f9f2 	bl	8007c36 <osDelay>
 8000852:	e7fb      	b.n	800084c <StartMotionRegTask+0x8>

08000854 <StartOdometryRegTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartOdometryRegTask */
void StartOdometryRegTask(void const * argument)
{
 8000854:	b580      	push	{r7, lr}
 8000856:	b082      	sub	sp, #8
 8000858:	af00      	add	r7, sp, #0
 800085a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartOdometryRegTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 800085c:	2001      	movs	r0, #1
 800085e:	f007 f9ea 	bl	8007c36 <osDelay>
 8000862:	e7fb      	b.n	800085c <StartOdometryRegTask+0x8>

08000864 <StartSensorsTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartSensorsTask */
void StartSensorsTask(void const * argument)
{
 8000864:	b580      	push	{r7, lr}
 8000866:	b082      	sub	sp, #8
 8000868:	af00      	add	r7, sp, #0
 800086a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartSensorsTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 800086c:	2001      	movs	r0, #1
 800086e:	f007 f9e2 	bl	8007c36 <osDelay>
 8000872:	e7fb      	b.n	800086c <StartSensorsTask+0x8>

08000874 <StartDebugTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartDebugTask */
void StartDebugTask(void const * argument)
{
 8000874:	b580      	push	{r7, lr}
 8000876:	b082      	sub	sp, #8
 8000878:	af00      	add	r7, sp, #0
 800087a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDebugTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 800087c:	2001      	movs	r0, #1
 800087e:	f007 f9da 	bl	8007c36 <osDelay>
 8000882:	e7fb      	b.n	800087c <StartDebugTask+0x8>

08000884 <MX_GPIO_Init>:
     PB3   ------> S_TIM2_CH2
     PB4   ------> S_TIM3_CH1
     PB5   ------> S_TIM3_CH2
*/
void MX_GPIO_Init(void)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	b08e      	sub	sp, #56	; 0x38
 8000888:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800088a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800088e:	2200      	movs	r2, #0
 8000890:	601a      	str	r2, [r3, #0]
 8000892:	605a      	str	r2, [r3, #4]
 8000894:	609a      	str	r2, [r3, #8]
 8000896:	60da      	str	r2, [r3, #12]
 8000898:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800089a:	2300      	movs	r3, #0
 800089c:	623b      	str	r3, [r7, #32]
 800089e:	4bb2      	ldr	r3, [pc, #712]	; (8000b68 <MX_GPIO_Init+0x2e4>)
 80008a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008a2:	4ab1      	ldr	r2, [pc, #708]	; (8000b68 <MX_GPIO_Init+0x2e4>)
 80008a4:	f043 0310 	orr.w	r3, r3, #16
 80008a8:	6313      	str	r3, [r2, #48]	; 0x30
 80008aa:	4baf      	ldr	r3, [pc, #700]	; (8000b68 <MX_GPIO_Init+0x2e4>)
 80008ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ae:	f003 0310 	and.w	r3, r3, #16
 80008b2:	623b      	str	r3, [r7, #32]
 80008b4:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008b6:	2300      	movs	r3, #0
 80008b8:	61fb      	str	r3, [r7, #28]
 80008ba:	4bab      	ldr	r3, [pc, #684]	; (8000b68 <MX_GPIO_Init+0x2e4>)
 80008bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008be:	4aaa      	ldr	r2, [pc, #680]	; (8000b68 <MX_GPIO_Init+0x2e4>)
 80008c0:	f043 0304 	orr.w	r3, r3, #4
 80008c4:	6313      	str	r3, [r2, #48]	; 0x30
 80008c6:	4ba8      	ldr	r3, [pc, #672]	; (8000b68 <MX_GPIO_Init+0x2e4>)
 80008c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ca:	f003 0304 	and.w	r3, r3, #4
 80008ce:	61fb      	str	r3, [r7, #28]
 80008d0:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80008d2:	2300      	movs	r3, #0
 80008d4:	61bb      	str	r3, [r7, #24]
 80008d6:	4ba4      	ldr	r3, [pc, #656]	; (8000b68 <MX_GPIO_Init+0x2e4>)
 80008d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008da:	4aa3      	ldr	r2, [pc, #652]	; (8000b68 <MX_GPIO_Init+0x2e4>)
 80008dc:	f043 0320 	orr.w	r3, r3, #32
 80008e0:	6313      	str	r3, [r2, #48]	; 0x30
 80008e2:	4ba1      	ldr	r3, [pc, #644]	; (8000b68 <MX_GPIO_Init+0x2e4>)
 80008e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008e6:	f003 0320 	and.w	r3, r3, #32
 80008ea:	61bb      	str	r3, [r7, #24]
 80008ec:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80008ee:	2300      	movs	r3, #0
 80008f0:	617b      	str	r3, [r7, #20]
 80008f2:	4b9d      	ldr	r3, [pc, #628]	; (8000b68 <MX_GPIO_Init+0x2e4>)
 80008f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008f6:	4a9c      	ldr	r2, [pc, #624]	; (8000b68 <MX_GPIO_Init+0x2e4>)
 80008f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80008fc:	6313      	str	r3, [r2, #48]	; 0x30
 80008fe:	4b9a      	ldr	r3, [pc, #616]	; (8000b68 <MX_GPIO_Init+0x2e4>)
 8000900:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000902:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000906:	617b      	str	r3, [r7, #20]
 8000908:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800090a:	2300      	movs	r3, #0
 800090c:	613b      	str	r3, [r7, #16]
 800090e:	4b96      	ldr	r3, [pc, #600]	; (8000b68 <MX_GPIO_Init+0x2e4>)
 8000910:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000912:	4a95      	ldr	r2, [pc, #596]	; (8000b68 <MX_GPIO_Init+0x2e4>)
 8000914:	f043 0301 	orr.w	r3, r3, #1
 8000918:	6313      	str	r3, [r2, #48]	; 0x30
 800091a:	4b93      	ldr	r3, [pc, #588]	; (8000b68 <MX_GPIO_Init+0x2e4>)
 800091c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800091e:	f003 0301 	and.w	r3, r3, #1
 8000922:	613b      	str	r3, [r7, #16]
 8000924:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000926:	2300      	movs	r3, #0
 8000928:	60fb      	str	r3, [r7, #12]
 800092a:	4b8f      	ldr	r3, [pc, #572]	; (8000b68 <MX_GPIO_Init+0x2e4>)
 800092c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800092e:	4a8e      	ldr	r2, [pc, #568]	; (8000b68 <MX_GPIO_Init+0x2e4>)
 8000930:	f043 0302 	orr.w	r3, r3, #2
 8000934:	6313      	str	r3, [r2, #48]	; 0x30
 8000936:	4b8c      	ldr	r3, [pc, #560]	; (8000b68 <MX_GPIO_Init+0x2e4>)
 8000938:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800093a:	f003 0302 	and.w	r3, r3, #2
 800093e:	60fb      	str	r3, [r7, #12]
 8000940:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000942:	2300      	movs	r3, #0
 8000944:	60bb      	str	r3, [r7, #8]
 8000946:	4b88      	ldr	r3, [pc, #544]	; (8000b68 <MX_GPIO_Init+0x2e4>)
 8000948:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800094a:	4a87      	ldr	r2, [pc, #540]	; (8000b68 <MX_GPIO_Init+0x2e4>)
 800094c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000950:	6313      	str	r3, [r2, #48]	; 0x30
 8000952:	4b85      	ldr	r3, [pc, #532]	; (8000b68 <MX_GPIO_Init+0x2e4>)
 8000954:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000956:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800095a:	60bb      	str	r3, [r7, #8]
 800095c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800095e:	2300      	movs	r3, #0
 8000960:	607b      	str	r3, [r7, #4]
 8000962:	4b81      	ldr	r3, [pc, #516]	; (8000b68 <MX_GPIO_Init+0x2e4>)
 8000964:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000966:	4a80      	ldr	r2, [pc, #512]	; (8000b68 <MX_GPIO_Init+0x2e4>)
 8000968:	f043 0308 	orr.w	r3, r3, #8
 800096c:	6313      	str	r3, [r2, #48]	; 0x30
 800096e:	4b7e      	ldr	r3, [pc, #504]	; (8000b68 <MX_GPIO_Init+0x2e4>)
 8000970:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000972:	f003 0308 	and.w	r3, r3, #8
 8000976:	607b      	str	r3, [r7, #4]
 8000978:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, XSHUNT_5_Pin|XSHUNT_4_Pin|XSHUNT_1_Pin|M2_DIR_Pin 
 800097a:	2200      	movs	r2, #0
 800097c:	f247 4130 	movw	r1, #29744	; 0x7430
 8000980:	487a      	ldr	r0, [pc, #488]	; (8000b6c <MX_GPIO_Init+0x2e8>)
 8000982:	f001 fd65 	bl	8002450 <HAL_GPIO_WritePin>
                          |M1_DIR_Pin|ENABLE_MOTORS_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_3_GPIO_Port, LED_3_Pin, GPIO_PIN_RESET);
 8000986:	2200      	movs	r2, #0
 8000988:	2108      	movs	r1, #8
 800098a:	4879      	ldr	r0, [pc, #484]	; (8000b70 <MX_GPIO_Init+0x2ec>)
 800098c:	f001 fd60 	bl	8002450 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LED_4_Pin|LD3_Pin|LED_1_Pin 
 8000990:	2200      	movs	r2, #0
 8000992:	f244 41c1 	movw	r1, #17601	; 0x44c1
 8000996:	4877      	ldr	r0, [pc, #476]	; (8000b74 <MX_GPIO_Init+0x2f0>)
 8000998:	f001 fd5a 	bl	8002450 <HAL_GPIO_WritePin>
                          |LD2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, XSHUNT_2_Pin|XSHUNT_6_Pin|LED_2_Pin, GPIO_PIN_RESET);
 800099c:	2200      	movs	r2, #0
 800099e:	f44f 61b0 	mov.w	r1, #1408	; 0x580
 80009a2:	4875      	ldr	r0, [pc, #468]	; (8000b78 <MX_GPIO_Init+0x2f4>)
 80009a4:	f001 fd54 	bl	8002450 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_5_GPIO_Port, LED_5_Pin, GPIO_PIN_RESET);
 80009a8:	2200      	movs	r2, #0
 80009aa:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80009ae:	4873      	ldr	r0, [pc, #460]	; (8000b7c <MX_GPIO_Init+0x2f8>)
 80009b0:	f001 fd4e 	bl	8002450 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, USB_PowerSwitchOn_Pin|XSHUNT_3_Pin, GPIO_PIN_RESET);
 80009b4:	2200      	movs	r2, #0
 80009b6:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80009ba:	4871      	ldr	r0, [pc, #452]	; (8000b80 <MX_GPIO_Init+0x2fc>)
 80009bc:	f001 fd48 	bl	8002450 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE2 PE4 PE5 PE6 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 80009c0:	2374      	movs	r3, #116	; 0x74
 80009c2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009c4:	2302      	movs	r3, #2
 80009c6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009c8:	2300      	movs	r3, #0
 80009ca:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009cc:	2303      	movs	r3, #3
 80009ce:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 80009d0:	2305      	movs	r3, #5
 80009d2:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80009d4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009d8:	4619      	mov	r1, r3
 80009da:	4867      	ldr	r0, [pc, #412]	; (8000b78 <MX_GPIO_Init+0x2f4>)
 80009dc:	f001 fb8e 	bl	80020fc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 80009e0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80009e4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80009e6:	4b67      	ldr	r3, [pc, #412]	; (8000b84 <MX_GPIO_Init+0x300>)
 80009e8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ea:	2300      	movs	r3, #0
 80009ec:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80009ee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009f2:	4619      	mov	r1, r3
 80009f4:	4864      	ldr	r0, [pc, #400]	; (8000b88 <MX_GPIO_Init+0x304>)
 80009f6:	f001 fb81 	bl	80020fc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = M1_FB_Pin;
 80009fa:	2308      	movs	r3, #8
 80009fc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80009fe:	2303      	movs	r3, #3
 8000a00:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a02:	2300      	movs	r3, #0
 8000a04:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(M1_FB_GPIO_Port, &GPIO_InitStruct);
 8000a06:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a0a:	4619      	mov	r1, r3
 8000a0c:	4857      	ldr	r0, [pc, #348]	; (8000b6c <MX_GPIO_Init+0x2e8>)
 8000a0e:	f001 fb75 	bl	80020fc <HAL_GPIO_Init>

  /*Configure GPIO pins : PFPin PFPin PFPin PFPin 
                           PFPin PFPin */
  GPIO_InitStruct.Pin = XSHUNT_5_Pin|XSHUNT_4_Pin|XSHUNT_1_Pin|M2_DIR_Pin 
 8000a12:	f247 4330 	movw	r3, #29744	; 0x7430
 8000a16:	627b      	str	r3, [r7, #36]	; 0x24
                          |M1_DIR_Pin|ENABLE_MOTORS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a18:	2301      	movs	r3, #1
 8000a1a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a1c:	2300      	movs	r3, #0
 8000a1e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a20:	2300      	movs	r3, #0
 8000a22:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000a24:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a28:	4619      	mov	r1, r3
 8000a2a:	4850      	ldr	r0, [pc, #320]	; (8000b6c <MX_GPIO_Init+0x2e8>)
 8000a2c:	f001 fb66 	bl	80020fc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_3_Pin;
 8000a30:	2308      	movs	r3, #8
 8000a32:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a34:	2301      	movs	r3, #1
 8000a36:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a38:	2300      	movs	r3, #0
 8000a3a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a3c:	2300      	movs	r3, #0
 8000a3e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LED_3_GPIO_Port, &GPIO_InitStruct);
 8000a40:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a44:	4619      	mov	r1, r3
 8000a46:	484a      	ldr	r0, [pc, #296]	; (8000b70 <MX_GPIO_Init+0x2ec>)
 8000a48:	f001 fb58 	bl	80020fc <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = TIRETTE_Pin|M_SF_Pin;
 8000a4c:	2360      	movs	r3, #96	; 0x60
 8000a4e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a50:	2300      	movs	r3, #0
 8000a52:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a54:	2300      	movs	r3, #0
 8000a56:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a58:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a5c:	4619      	mov	r1, r3
 8000a5e:	4844      	ldr	r0, [pc, #272]	; (8000b70 <MX_GPIO_Init+0x2ec>)
 8000a60:	f001 fb4c 	bl	80020fc <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin 
                           PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LED_4_Pin|LD3_Pin|LED_1_Pin 
 8000a64:	f244 43c1 	movw	r3, #17601	; 0x44c1
 8000a68:	627b      	str	r3, [r7, #36]	; 0x24
                          |LD2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a6a:	2301      	movs	r3, #1
 8000a6c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a6e:	2300      	movs	r3, #0
 8000a70:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a72:	2300      	movs	r3, #0
 8000a74:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a76:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a7a:	4619      	mov	r1, r3
 8000a7c:	483d      	ldr	r0, [pc, #244]	; (8000b74 <MX_GPIO_Init+0x2f0>)
 8000a7e:	f001 fb3d 	bl	80020fc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = M2_FB_Pin;
 8000a82:	2302      	movs	r3, #2
 8000a84:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000a86:	2303      	movs	r3, #3
 8000a88:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a8a:	2300      	movs	r3, #0
 8000a8c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(M2_FB_GPIO_Port, &GPIO_InitStruct);
 8000a8e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a92:	4619      	mov	r1, r3
 8000a94:	4837      	ldr	r0, [pc, #220]	; (8000b74 <MX_GPIO_Init+0x2f0>)
 8000a96:	f001 fb31 	bl	80020fc <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = CONTACT_4_Pin|USB_OverCurrent_Pin;
 8000a9a:	2381      	movs	r3, #129	; 0x81
 8000a9c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000aa6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000aaa:	4619      	mov	r1, r3
 8000aac:	4834      	ldr	r0, [pc, #208]	; (8000b80 <MX_GPIO_Init+0x2fc>)
 8000aae:	f001 fb25 	bl	80020fc <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = XSHUNT_2_Pin|XSHUNT_6_Pin|LED_2_Pin;
 8000ab2:	f44f 63b0 	mov.w	r3, #1408	; 0x580
 8000ab6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ab8:	2301      	movs	r3, #1
 8000aba:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000abc:	2300      	movs	r3, #0
 8000abe:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ac0:	2300      	movs	r3, #0
 8000ac2:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000ac4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ac8:	4619      	mov	r1, r3
 8000aca:	482b      	ldr	r0, [pc, #172]	; (8000b78 <MX_GPIO_Init+0x2f4>)
 8000acc:	f001 fb16 	bl	80020fc <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = PWM_SERVO_5_Pin|PWM_SERVO_6_Pin|PWM_SERVO_7_Pin|PWM_SERVO_8_Pin;
 8000ad0:	f44f 43d4 	mov.w	r3, #27136	; 0x6a00
 8000ad4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ad6:	2302      	movs	r3, #2
 8000ad8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ada:	2300      	movs	r3, #0
 8000adc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ade:	2300      	movs	r3, #0
 8000ae0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000ae2:	2301      	movs	r3, #1
 8000ae4:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000ae6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000aea:	4619      	mov	r1, r3
 8000aec:	4822      	ldr	r0, [pc, #136]	; (8000b78 <MX_GPIO_Init+0x2f4>)
 8000aee:	f001 fb05 	bl	80020fc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_5_Pin;
 8000af2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000af6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000af8:	2301      	movs	r3, #1
 8000afa:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000afc:	2300      	movs	r3, #0
 8000afe:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b00:	2300      	movs	r3, #0
 8000b02:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LED_5_GPIO_Port, &GPIO_InitStruct);
 8000b04:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b08:	4619      	mov	r1, r3
 8000b0a:	481c      	ldr	r0, [pc, #112]	; (8000b7c <MX_GPIO_Init+0x2f8>)
 8000b0c:	f001 faf6 	bl	80020fc <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = CMD_MOTEUR_DROIT_Pin|CMD_MOTEUR_GAUCHE_Pin;
 8000b10:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8000b14:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b16:	2302      	movs	r3, #2
 8000b18:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b1e:	2300      	movs	r3, #0
 8000b20:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8000b22:	2302      	movs	r3, #2
 8000b24:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b26:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b2a:	4619      	mov	r1, r3
 8000b2c:	4813      	ldr	r0, [pc, #76]	; (8000b7c <MX_GPIO_Init+0x2f8>)
 8000b2e:	f001 fae5 	bl	80020fc <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin|XSHUNT_3_Pin;
 8000b32:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8000b36:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b38:	2301      	movs	r3, #1
 8000b3a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b3c:	2300      	movs	r3, #0
 8000b3e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b40:	2300      	movs	r3, #0
 8000b42:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000b44:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b48:	4619      	mov	r1, r3
 8000b4a:	480d      	ldr	r0, [pc, #52]	; (8000b80 <MX_GPIO_Init+0x2fc>)
 8000b4c:	f001 fad6 	bl	80020fc <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = PWM_SERVO_1_Pin|PWM_SERVO_2_Pin|PWM_SERVO_3_Pin|PWM_SERVO_4_Pin;
 8000b50:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8000b54:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b56:	2302      	movs	r3, #2
 8000b58:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b5e:	2300      	movs	r3, #0
 8000b60:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8000b62:	2303      	movs	r3, #3
 8000b64:	637b      	str	r3, [r7, #52]	; 0x34
 8000b66:	e011      	b.n	8000b8c <MX_GPIO_Init+0x308>
 8000b68:	40023800 	.word	0x40023800
 8000b6c:	40021400 	.word	0x40021400
 8000b70:	40020000 	.word	0x40020000
 8000b74:	40020400 	.word	0x40020400
 8000b78:	40021000 	.word	0x40021000
 8000b7c:	40020c00 	.word	0x40020c00
 8000b80:	40021800 	.word	0x40021800
 8000b84:	10110000 	.word	0x10110000
 8000b88:	40020800 	.word	0x40020800
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b8c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b90:	4619      	mov	r1, r3
 8000b92:	4839      	ldr	r0, [pc, #228]	; (8000c78 <MX_GPIO_Init+0x3f4>)
 8000b94:	f001 fab2 	bl	80020fc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = QEI_M1_CH1_Pin;
 8000b98:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000b9c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b9e:	2302      	movs	r3, #2
 8000ba0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000baa:	2301      	movs	r3, #1
 8000bac:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(QEI_M1_CH1_GPIO_Port, &GPIO_InitStruct);
 8000bae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bb2:	4619      	mov	r1, r3
 8000bb4:	4831      	ldr	r0, [pc, #196]	; (8000c7c <MX_GPIO_Init+0x3f8>)
 8000bb6:	f001 faa1 	bl	80020fc <HAL_GPIO_Init>

  /*Configure GPIO pins : PC10 PC11 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000bba:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000bbe:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bc0:	2302      	movs	r3, #2
 8000bc2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bc4:	2300      	movs	r3, #0
 8000bc6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bc8:	2303      	movs	r3, #3
 8000bca:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8000bcc:	2308      	movs	r3, #8
 8000bce:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000bd0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bd4:	4619      	mov	r1, r3
 8000bd6:	4828      	ldr	r0, [pc, #160]	; (8000c78 <MX_GPIO_Init+0x3f4>)
 8000bd8:	f001 fa90 	bl	80020fc <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = CONTACT_5_Pin|CONTACT_1_Pin|CONTACT_2_Pin|CONTACT_3_Pin;
 8000bdc:	23b1      	movs	r3, #177	; 0xb1
 8000bde:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000be0:	2300      	movs	r3, #0
 8000be2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000be4:	2300      	movs	r3, #0
 8000be6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000be8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bec:	4619      	mov	r1, r3
 8000bee:	4824      	ldr	r0, [pc, #144]	; (8000c80 <MX_GPIO_Init+0x3fc>)
 8000bf0:	f001 fa84 	bl	80020fc <HAL_GPIO_Init>

  /*Configure GPIO pins : PG9 PG14 */
  GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_14;
 8000bf4:	f44f 4384 	mov.w	r3, #16896	; 0x4200
 8000bf8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bfa:	2302      	movs	r3, #2
 8000bfc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bfe:	2300      	movs	r3, #0
 8000c00:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c02:	2303      	movs	r3, #3
 8000c04:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8000c06:	2308      	movs	r3, #8
 8000c08:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000c0a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c0e:	4619      	mov	r1, r3
 8000c10:	481c      	ldr	r0, [pc, #112]	; (8000c84 <MX_GPIO_Init+0x400>)
 8000c12:	f001 fa73 	bl	80020fc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = QEI_M1_CH2_Pin;
 8000c16:	2308      	movs	r3, #8
 8000c18:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c1a:	2302      	movs	r3, #2
 8000c1c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c1e:	2300      	movs	r3, #0
 8000c20:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c22:	2300      	movs	r3, #0
 8000c24:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000c26:	2301      	movs	r3, #1
 8000c28:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(QEI_M1_CH2_GPIO_Port, &GPIO_InitStruct);
 8000c2a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c2e:	4619      	mov	r1, r3
 8000c30:	4815      	ldr	r0, [pc, #84]	; (8000c88 <MX_GPIO_Init+0x404>)
 8000c32:	f001 fa63 	bl	80020fc <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = QEI_M2_CH1_Pin|QEI_M2_CH2_Pin;
 8000c36:	2330      	movs	r3, #48	; 0x30
 8000c38:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c3a:	2302      	movs	r3, #2
 8000c3c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c3e:	2300      	movs	r3, #0
 8000c40:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c42:	2300      	movs	r3, #0
 8000c44:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000c46:	2302      	movs	r3, #2
 8000c48:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c4a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c4e:	4619      	mov	r1, r3
 8000c50:	480d      	ldr	r0, [pc, #52]	; (8000c88 <MX_GPIO_Init+0x404>)
 8000c52:	f001 fa53 	bl	80020fc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CONTACT_6_Pin;
 8000c56:	2302      	movs	r3, #2
 8000c58:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c5e:	2300      	movs	r3, #0
 8000c60:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CONTACT_6_GPIO_Port, &GPIO_InitStruct);
 8000c62:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c66:	4619      	mov	r1, r3
 8000c68:	4808      	ldr	r0, [pc, #32]	; (8000c8c <MX_GPIO_Init+0x408>)
 8000c6a:	f001 fa47 	bl	80020fc <HAL_GPIO_Init>

}
 8000c6e:	bf00      	nop
 8000c70:	3738      	adds	r7, #56	; 0x38
 8000c72:	46bd      	mov	sp, r7
 8000c74:	bd80      	pop	{r7, pc}
 8000c76:	bf00      	nop
 8000c78:	40020800 	.word	0x40020800
 8000c7c:	40020000 	.word	0x40020000
 8000c80:	40020c00 	.word	0x40020c00
 8000c84:	40021800 	.word	0x40021800
 8000c88:	40020400 	.word	0x40020400
 8000c8c:	40021000 	.word	0x40021000

08000c90 <LL_I2C_EnableClockStretching>:
  * @rmtoll CR1          NOSTRETCH     LL_I2C_EnableClockStretching
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_EnableClockStretching(I2C_TypeDef *I2Cx)
{
 8000c90:	b480      	push	{r7}
 8000c92:	b083      	sub	sp, #12
 8000c94:	af00      	add	r7, sp, #0
 8000c96:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_NOSTRETCH);
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	601a      	str	r2, [r3, #0]
}
 8000ca4:	bf00      	nop
 8000ca6:	370c      	adds	r7, #12
 8000ca8:	46bd      	mov	sp, r7
 8000caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cae:	4770      	bx	lr

08000cb0 <LL_I2C_DisableGeneralCall>:
  * @rmtoll CR1          ENGC          LL_I2C_DisableGeneralCall
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_DisableGeneralCall(I2C_TypeDef *I2Cx)
{
 8000cb0:	b480      	push	{r7}
 8000cb2:	b083      	sub	sp, #12
 8000cb4:	af00      	add	r7, sp, #0
 8000cb6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_ENGC);
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	601a      	str	r2, [r3, #0]
}
 8000cc4:	bf00      	nop
 8000cc6:	370c      	adds	r7, #12
 8000cc8:	46bd      	mov	sp, r7
 8000cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cce:	4770      	bx	lr

08000cd0 <LL_I2C_SetOwnAddress2>:
  * @param  I2Cx I2C Instance.
  * @param  OwnAddress2 This parameter must be a value between Min_Data=0 and Max_Data=0x7F.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_SetOwnAddress2(I2C_TypeDef *I2Cx, uint32_t OwnAddress2)
{
 8000cd0:	b480      	push	{r7}
 8000cd2:	b083      	sub	sp, #12
 8000cd4:	af00      	add	r7, sp, #0
 8000cd6:	6078      	str	r0, [r7, #4]
 8000cd8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->OAR2, I2C_OAR2_ADD2, OwnAddress2);
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	68db      	ldr	r3, [r3, #12]
 8000cde:	f023 02fe 	bic.w	r2, r3, #254	; 0xfe
 8000ce2:	683b      	ldr	r3, [r7, #0]
 8000ce4:	431a      	orrs	r2, r3
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	60da      	str	r2, [r3, #12]
}
 8000cea:	bf00      	nop
 8000cec:	370c      	adds	r7, #12
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf4:	4770      	bx	lr

08000cf6 <LL_I2C_DisableOwnAddress2>:
  * @rmtoll OAR2         ENDUAL        LL_I2C_DisableOwnAddress2
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_DisableOwnAddress2(I2C_TypeDef *I2Cx)
{
 8000cf6:	b480      	push	{r7}
 8000cf8:	b083      	sub	sp, #12
 8000cfa:	af00      	add	r7, sp, #0
 8000cfc:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->OAR2, I2C_OAR2_ENDUAL);
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	68db      	ldr	r3, [r3, #12]
 8000d02:	f023 0201 	bic.w	r2, r3, #1
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	60da      	str	r2, [r3, #12]
}
 8000d0a:	bf00      	nop
 8000d0c:	370c      	adds	r7, #12
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d14:	4770      	bx	lr
	...

08000d18 <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000d18:	b480      	push	{r7}
 8000d1a:	b085      	sub	sp, #20
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 8000d20:	4b08      	ldr	r3, [pc, #32]	; (8000d44 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000d22:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000d24:	4907      	ldr	r1, [pc, #28]	; (8000d44 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	4313      	orrs	r3, r2
 8000d2a:	630b      	str	r3, [r1, #48]	; 0x30
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8000d2c:	4b05      	ldr	r3, [pc, #20]	; (8000d44 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000d2e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	4013      	ands	r3, r2
 8000d34:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000d36:	68fb      	ldr	r3, [r7, #12]
}
 8000d38:	bf00      	nop
 8000d3a:	3714      	adds	r7, #20
 8000d3c:	46bd      	mov	sp, r7
 8000d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d42:	4770      	bx	lr
 8000d44:	40023800 	.word	0x40023800

08000d48 <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000d48:	b480      	push	{r7}
 8000d4a:	b085      	sub	sp, #20
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 8000d50:	4b08      	ldr	r3, [pc, #32]	; (8000d74 <LL_APB1_GRP1_EnableClock+0x2c>)
 8000d52:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000d54:	4907      	ldr	r1, [pc, #28]	; (8000d74 <LL_APB1_GRP1_EnableClock+0x2c>)
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	4313      	orrs	r3, r2
 8000d5a:	640b      	str	r3, [r1, #64]	; 0x40
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8000d5c:	4b05      	ldr	r3, [pc, #20]	; (8000d74 <LL_APB1_GRP1_EnableClock+0x2c>)
 8000d5e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	4013      	ands	r3, r2
 8000d64:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000d66:	68fb      	ldr	r3, [r7, #12]
}
 8000d68:	bf00      	nop
 8000d6a:	3714      	adds	r7, #20
 8000d6c:	46bd      	mov	sp, r7
 8000d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d72:	4770      	bx	lr
 8000d74:	40023800 	.word	0x40023800

08000d78 <MX_I2C1_Init>:

/* USER CODE END 0 */

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	b08e      	sub	sp, #56	; 0x38
 8000d7c:	af00      	add	r7, sp, #0
  LL_I2C_InitTypeDef I2C_InitStruct = {0};
 8000d7e:	f107 0318 	add.w	r3, r7, #24
 8000d82:	2220      	movs	r2, #32
 8000d84:	2100      	movs	r1, #0
 8000d86:	4618      	mov	r0, r3
 8000d88:	f008 feec 	bl	8009b64 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d8c:	463b      	mov	r3, r7
 8000d8e:	2200      	movs	r2, #0
 8000d90:	601a      	str	r2, [r3, #0]
 8000d92:	605a      	str	r2, [r3, #4]
 8000d94:	609a      	str	r2, [r3, #8]
 8000d96:	60da      	str	r2, [r3, #12]
 8000d98:	611a      	str	r2, [r3, #16]
 8000d9a:	615a      	str	r2, [r3, #20]

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 8000d9c:	2002      	movs	r0, #2
 8000d9e:	f7ff ffbb 	bl	8000d18 <LL_AHB1_GRP1_EnableClock>
  /**I2C1 GPIO Configuration  
  PB8   ------> I2C1_SCL
  PB9   ------> I2C1_SDA 
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_8|LL_GPIO_PIN_9;
 8000da2:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000da6:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8000da8:	2302      	movs	r3, #2
 8000daa:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8000dac:	2303      	movs	r3, #3
 8000dae:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_OPENDRAIN;
 8000db0:	2301      	movs	r3, #1
 8000db2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8000db4:	2301      	movs	r3, #1
 8000db6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_4;
 8000db8:	2304      	movs	r3, #4
 8000dba:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000dbc:	463b      	mov	r3, r7
 8000dbe:	4619      	mov	r1, r3
 8000dc0:	4817      	ldr	r0, [pc, #92]	; (8000e20 <MX_I2C1_Init+0xa8>)
 8000dc2:	f003 fc7a 	bl	80046ba <LL_GPIO_Init>

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_I2C1);
 8000dc6:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8000dca:	f7ff ffbd 	bl	8000d48 <LL_APB1_GRP1_EnableClock>

  /** I2C Initialization 
  */
  LL_I2C_DisableOwnAddress2(I2C1);
 8000dce:	4815      	ldr	r0, [pc, #84]	; (8000e24 <MX_I2C1_Init+0xac>)
 8000dd0:	f7ff ff91 	bl	8000cf6 <LL_I2C_DisableOwnAddress2>
  LL_I2C_DisableGeneralCall(I2C1);
 8000dd4:	4813      	ldr	r0, [pc, #76]	; (8000e24 <MX_I2C1_Init+0xac>)
 8000dd6:	f7ff ff6b 	bl	8000cb0 <LL_I2C_DisableGeneralCall>
  LL_I2C_EnableClockStretching(I2C1);
 8000dda:	4812      	ldr	r0, [pc, #72]	; (8000e24 <MX_I2C1_Init+0xac>)
 8000ddc:	f7ff ff58 	bl	8000c90 <LL_I2C_EnableClockStretching>
  I2C_InitStruct.PeripheralMode = LL_I2C_MODE_I2C;
 8000de0:	2300      	movs	r3, #0
 8000de2:	61bb      	str	r3, [r7, #24]
  I2C_InitStruct.ClockSpeed = 100000;
 8000de4:	4b10      	ldr	r3, [pc, #64]	; (8000e28 <MX_I2C1_Init+0xb0>)
 8000de6:	61fb      	str	r3, [r7, #28]
  I2C_InitStruct.DutyCycle = LL_I2C_DUTYCYCLE_2;
 8000de8:	2300      	movs	r3, #0
 8000dea:	623b      	str	r3, [r7, #32]
  I2C_InitStruct.AnalogFilter = LL_I2C_ANALOGFILTER_ENABLE;
 8000dec:	2300      	movs	r3, #0
 8000dee:	627b      	str	r3, [r7, #36]	; 0x24
  I2C_InitStruct.DigitalFilter = 0;
 8000df0:	2300      	movs	r3, #0
 8000df2:	62bb      	str	r3, [r7, #40]	; 0x28
  I2C_InitStruct.OwnAddress1 = 0;
 8000df4:	2300      	movs	r3, #0
 8000df6:	62fb      	str	r3, [r7, #44]	; 0x2c
  I2C_InitStruct.TypeAcknowledge = LL_I2C_ACK;
 8000df8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000dfc:	633b      	str	r3, [r7, #48]	; 0x30
  I2C_InitStruct.OwnAddrSize = LL_I2C_OWNADDRESS1_7BIT;
 8000dfe:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000e02:	637b      	str	r3, [r7, #52]	; 0x34
  LL_I2C_Init(I2C1, &I2C_InitStruct);
 8000e04:	f107 0318 	add.w	r3, r7, #24
 8000e08:	4619      	mov	r1, r3
 8000e0a:	4806      	ldr	r0, [pc, #24]	; (8000e24 <MX_I2C1_Init+0xac>)
 8000e0c:	f003 fdd6 	bl	80049bc <LL_I2C_Init>
  LL_I2C_SetOwnAddress2(I2C1, 0);
 8000e10:	2100      	movs	r1, #0
 8000e12:	4804      	ldr	r0, [pc, #16]	; (8000e24 <MX_I2C1_Init+0xac>)
 8000e14:	f7ff ff5c 	bl	8000cd0 <LL_I2C_SetOwnAddress2>

}
 8000e18:	bf00      	nop
 8000e1a:	3738      	adds	r7, #56	; 0x38
 8000e1c:	46bd      	mov	sp, r7
 8000e1e:	bd80      	pop	{r7, pc}
 8000e20:	40020400 	.word	0x40020400
 8000e24:	40005400 	.word	0x40005400
 8000e28:	000186a0 	.word	0x000186a0

08000e2c <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	b08e      	sub	sp, #56	; 0x38
 8000e30:	af00      	add	r7, sp, #0
  LL_I2C_InitTypeDef I2C_InitStruct = {0};
 8000e32:	f107 0318 	add.w	r3, r7, #24
 8000e36:	2220      	movs	r2, #32
 8000e38:	2100      	movs	r1, #0
 8000e3a:	4618      	mov	r0, r3
 8000e3c:	f008 fe92 	bl	8009b64 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e40:	463b      	mov	r3, r7
 8000e42:	2200      	movs	r2, #0
 8000e44:	601a      	str	r2, [r3, #0]
 8000e46:	605a      	str	r2, [r3, #4]
 8000e48:	609a      	str	r2, [r3, #8]
 8000e4a:	60da      	str	r2, [r3, #12]
 8000e4c:	611a      	str	r2, [r3, #16]
 8000e4e:	615a      	str	r2, [r3, #20]

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOF);
 8000e50:	2020      	movs	r0, #32
 8000e52:	f7ff ff61 	bl	8000d18 <LL_AHB1_GRP1_EnableClock>
  /**I2C2 GPIO Configuration  
  PF0   ------> I2C2_SDA
  PF1   ------> I2C2_SCL 
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_0|LL_GPIO_PIN_1;
 8000e56:	2303      	movs	r3, #3
 8000e58:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8000e5a:	2302      	movs	r3, #2
 8000e5c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8000e5e:	2303      	movs	r3, #3
 8000e60:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_OPENDRAIN;
 8000e62:	2301      	movs	r3, #1
 8000e64:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8000e66:	2301      	movs	r3, #1
 8000e68:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_4;
 8000e6a:	2304      	movs	r3, #4
 8000e6c:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000e6e:	463b      	mov	r3, r7
 8000e70:	4619      	mov	r1, r3
 8000e72:	4818      	ldr	r0, [pc, #96]	; (8000ed4 <MX_I2C2_Init+0xa8>)
 8000e74:	f003 fc21 	bl	80046ba <LL_GPIO_Init>

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_I2C2);
 8000e78:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 8000e7c:	f7ff ff64 	bl	8000d48 <LL_APB1_GRP1_EnableClock>

  /** I2C Initialization 
  */
  LL_I2C_DisableOwnAddress2(I2C2);
 8000e80:	4815      	ldr	r0, [pc, #84]	; (8000ed8 <MX_I2C2_Init+0xac>)
 8000e82:	f7ff ff38 	bl	8000cf6 <LL_I2C_DisableOwnAddress2>
  LL_I2C_DisableGeneralCall(I2C2);
 8000e86:	4814      	ldr	r0, [pc, #80]	; (8000ed8 <MX_I2C2_Init+0xac>)
 8000e88:	f7ff ff12 	bl	8000cb0 <LL_I2C_DisableGeneralCall>
  LL_I2C_EnableClockStretching(I2C2);
 8000e8c:	4812      	ldr	r0, [pc, #72]	; (8000ed8 <MX_I2C2_Init+0xac>)
 8000e8e:	f7ff feff 	bl	8000c90 <LL_I2C_EnableClockStretching>
  I2C_InitStruct.PeripheralMode = LL_I2C_MODE_I2C;
 8000e92:	2300      	movs	r3, #0
 8000e94:	61bb      	str	r3, [r7, #24]
  I2C_InitStruct.ClockSpeed = 100000;
 8000e96:	4b11      	ldr	r3, [pc, #68]	; (8000edc <MX_I2C2_Init+0xb0>)
 8000e98:	61fb      	str	r3, [r7, #28]
  I2C_InitStruct.DutyCycle = LL_I2C_DUTYCYCLE_2;
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	623b      	str	r3, [r7, #32]
  I2C_InitStruct.AnalogFilter = LL_I2C_ANALOGFILTER_ENABLE;
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	627b      	str	r3, [r7, #36]	; 0x24
  I2C_InitStruct.DigitalFilter = 0;
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	62bb      	str	r3, [r7, #40]	; 0x28
  I2C_InitStruct.OwnAddress1 = 0;
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	62fb      	str	r3, [r7, #44]	; 0x2c
  I2C_InitStruct.TypeAcknowledge = LL_I2C_ACK;
 8000eaa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000eae:	633b      	str	r3, [r7, #48]	; 0x30
  I2C_InitStruct.OwnAddrSize = LL_I2C_OWNADDRESS1_7BIT;
 8000eb0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000eb4:	637b      	str	r3, [r7, #52]	; 0x34
  LL_I2C_Init(I2C2, &I2C_InitStruct);
 8000eb6:	f107 0318 	add.w	r3, r7, #24
 8000eba:	4619      	mov	r1, r3
 8000ebc:	4806      	ldr	r0, [pc, #24]	; (8000ed8 <MX_I2C2_Init+0xac>)
 8000ebe:	f003 fd7d 	bl	80049bc <LL_I2C_Init>
  LL_I2C_SetOwnAddress2(I2C2, 0);
 8000ec2:	2100      	movs	r1, #0
 8000ec4:	4804      	ldr	r0, [pc, #16]	; (8000ed8 <MX_I2C2_Init+0xac>)
 8000ec6:	f7ff ff03 	bl	8000cd0 <LL_I2C_SetOwnAddress2>

}
 8000eca:	bf00      	nop
 8000ecc:	3738      	adds	r7, #56	; 0x38
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	bd80      	pop	{r7, pc}
 8000ed2:	bf00      	nop
 8000ed4:	40021400 	.word	0x40021400
 8000ed8:	40005800 	.word	0x40005800
 8000edc:	000186a0 	.word	0x000186a0

08000ee0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ee4:	f000 fae4 	bl	80014b0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ee8:	f000 f810 	bl	8000f0c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000eec:	f7ff fcca 	bl	8000884 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000ef0:	f000 f9fc 	bl	80012ec <MX_USART3_UART_Init>
  MX_I2C1_Init();
 8000ef4:	f7ff ff40 	bl	8000d78 <MX_I2C1_Init>
  MX_I2C2_Init();
 8000ef8:	f7ff ff98 	bl	8000e2c <MX_I2C2_Init>
  MX_ETH_Init();
 8000efc:	f7ff faf8 	bl	80004f0 <MX_ETH_Init>
  /* USER CODE BEGIN 2 */
  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init(); 
 8000f00:	f7ff fc1e 	bl	8000740 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8000f04:	f006 fe44 	bl	8007b90 <osKernelStart>
  
  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000f08:	e7fe      	b.n	8000f08 <main+0x28>
	...

08000f0c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	b094      	sub	sp, #80	; 0x50
 8000f10:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f12:	f107 0320 	add.w	r3, r7, #32
 8000f16:	2230      	movs	r2, #48	; 0x30
 8000f18:	2100      	movs	r1, #0
 8000f1a:	4618      	mov	r0, r3
 8000f1c:	f008 fe22 	bl	8009b64 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f20:	f107 030c 	add.w	r3, r7, #12
 8000f24:	2200      	movs	r2, #0
 8000f26:	601a      	str	r2, [r3, #0]
 8000f28:	605a      	str	r2, [r3, #4]
 8000f2a:	609a      	str	r2, [r3, #8]
 8000f2c:	60da      	str	r2, [r3, #12]
 8000f2e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f30:	2300      	movs	r3, #0
 8000f32:	60bb      	str	r3, [r7, #8]
 8000f34:	4b28      	ldr	r3, [pc, #160]	; (8000fd8 <SystemClock_Config+0xcc>)
 8000f36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f38:	4a27      	ldr	r2, [pc, #156]	; (8000fd8 <SystemClock_Config+0xcc>)
 8000f3a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f3e:	6413      	str	r3, [r2, #64]	; 0x40
 8000f40:	4b25      	ldr	r3, [pc, #148]	; (8000fd8 <SystemClock_Config+0xcc>)
 8000f42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f44:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f48:	60bb      	str	r3, [r7, #8]
 8000f4a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000f4c:	2300      	movs	r3, #0
 8000f4e:	607b      	str	r3, [r7, #4]
 8000f50:	4b22      	ldr	r3, [pc, #136]	; (8000fdc <SystemClock_Config+0xd0>)
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	4a21      	ldr	r2, [pc, #132]	; (8000fdc <SystemClock_Config+0xd0>)
 8000f56:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000f5a:	6013      	str	r3, [r2, #0]
 8000f5c:	4b1f      	ldr	r3, [pc, #124]	; (8000fdc <SystemClock_Config+0xd0>)
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000f64:	607b      	str	r3, [r7, #4]
 8000f66:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000f68:	2301      	movs	r3, #1
 8000f6a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000f6c:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000f70:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f72:	2302      	movs	r3, #2
 8000f74:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000f76:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000f7a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000f7c:	2304      	movs	r3, #4
 8000f7e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000f80:	23a8      	movs	r3, #168	; 0xa8
 8000f82:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000f84:	2302      	movs	r3, #2
 8000f86:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000f88:	2307      	movs	r3, #7
 8000f8a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f8c:	f107 0320 	add.w	r3, r7, #32
 8000f90:	4618      	mov	r0, r3
 8000f92:	f002 fc01 	bl	8003798 <HAL_RCC_OscConfig>
 8000f96:	4603      	mov	r3, r0
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	d001      	beq.n	8000fa0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000f9c:	f000 f832 	bl	8001004 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000fa0:	230f      	movs	r3, #15
 8000fa2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000fa4:	2302      	movs	r3, #2
 8000fa6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000fa8:	2300      	movs	r3, #0
 8000faa:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000fac:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000fb0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000fb2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000fb6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000fb8:	f107 030c 	add.w	r3, r7, #12
 8000fbc:	2105      	movs	r1, #5
 8000fbe:	4618      	mov	r0, r3
 8000fc0:	f002 fe2c 	bl	8003c1c <HAL_RCC_ClockConfig>
 8000fc4:	4603      	mov	r3, r0
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d001      	beq.n	8000fce <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000fca:	f000 f81b 	bl	8001004 <Error_Handler>
  }
}
 8000fce:	bf00      	nop
 8000fd0:	3750      	adds	r7, #80	; 0x50
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	bd80      	pop	{r7, pc}
 8000fd6:	bf00      	nop
 8000fd8:	40023800 	.word	0x40023800
 8000fdc:	40007000 	.word	0x40007000

08000fe0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b082      	sub	sp, #8
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM10) {
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	4a04      	ldr	r2, [pc, #16]	; (8001000 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000fee:	4293      	cmp	r3, r2
 8000ff0:	d101      	bne.n	8000ff6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000ff2:	f000 fa7f 	bl	80014f4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000ff6:	bf00      	nop
 8000ff8:	3708      	adds	r7, #8
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	bd80      	pop	{r7, pc}
 8000ffe:	bf00      	nop
 8001000:	40014400 	.word	0x40014400

08001004 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001004:	b480      	push	{r7}
 8001006:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001008:	bf00      	nop
 800100a:	46bd      	mov	sp, r7
 800100c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001010:	4770      	bx	lr
	...

08001014 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	b082      	sub	sp, #8
 8001018:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800101a:	2300      	movs	r3, #0
 800101c:	607b      	str	r3, [r7, #4]
 800101e:	4b12      	ldr	r3, [pc, #72]	; (8001068 <HAL_MspInit+0x54>)
 8001020:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001022:	4a11      	ldr	r2, [pc, #68]	; (8001068 <HAL_MspInit+0x54>)
 8001024:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001028:	6453      	str	r3, [r2, #68]	; 0x44
 800102a:	4b0f      	ldr	r3, [pc, #60]	; (8001068 <HAL_MspInit+0x54>)
 800102c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800102e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001032:	607b      	str	r3, [r7, #4]
 8001034:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001036:	2300      	movs	r3, #0
 8001038:	603b      	str	r3, [r7, #0]
 800103a:	4b0b      	ldr	r3, [pc, #44]	; (8001068 <HAL_MspInit+0x54>)
 800103c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800103e:	4a0a      	ldr	r2, [pc, #40]	; (8001068 <HAL_MspInit+0x54>)
 8001040:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001044:	6413      	str	r3, [r2, #64]	; 0x40
 8001046:	4b08      	ldr	r3, [pc, #32]	; (8001068 <HAL_MspInit+0x54>)
 8001048:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800104a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800104e:	603b      	str	r3, [r7, #0]
 8001050:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001052:	2200      	movs	r2, #0
 8001054:	210f      	movs	r1, #15
 8001056:	f06f 0001 	mvn.w	r0, #1
 800105a:	f000 fb45 	bl	80016e8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800105e:	bf00      	nop
 8001060:	3708      	adds	r7, #8
 8001062:	46bd      	mov	sp, r7
 8001064:	bd80      	pop	{r7, pc}
 8001066:	bf00      	nop
 8001068:	40023800 	.word	0x40023800

0800106c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	b08c      	sub	sp, #48	; 0x30
 8001070:	af00      	add	r7, sp, #0
 8001072:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001074:	2300      	movs	r3, #0
 8001076:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8001078:	2300      	movs	r3, #0
 800107a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM10 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0); 
 800107c:	2200      	movs	r2, #0
 800107e:	6879      	ldr	r1, [r7, #4]
 8001080:	2019      	movs	r0, #25
 8001082:	f000 fb31 	bl	80016e8 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM10 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn); 
 8001086:	2019      	movs	r0, #25
 8001088:	f000 fb4a 	bl	8001720 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM10 clock */
  __HAL_RCC_TIM10_CLK_ENABLE();
 800108c:	2300      	movs	r3, #0
 800108e:	60fb      	str	r3, [r7, #12]
 8001090:	4b1f      	ldr	r3, [pc, #124]	; (8001110 <HAL_InitTick+0xa4>)
 8001092:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001094:	4a1e      	ldr	r2, [pc, #120]	; (8001110 <HAL_InitTick+0xa4>)
 8001096:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800109a:	6453      	str	r3, [r2, #68]	; 0x44
 800109c:	4b1c      	ldr	r3, [pc, #112]	; (8001110 <HAL_InitTick+0xa4>)
 800109e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010a4:	60fb      	str	r3, [r7, #12]
 80010a6:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80010a8:	f107 0210 	add.w	r2, r7, #16
 80010ac:	f107 0314 	add.w	r3, r7, #20
 80010b0:	4611      	mov	r1, r2
 80010b2:	4618      	mov	r0, r3
 80010b4:	f002 ff8c 	bl	8003fd0 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM10 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 80010b8:	f002 ff76 	bl	8003fa8 <HAL_RCC_GetPCLK2Freq>
 80010bc:	4603      	mov	r3, r0
 80010be:	005b      	lsls	r3, r3, #1
 80010c0:	62fb      	str	r3, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM10 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 80010c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80010c4:	4a13      	ldr	r2, [pc, #76]	; (8001114 <HAL_InitTick+0xa8>)
 80010c6:	fba2 2303 	umull	r2, r3, r2, r3
 80010ca:	0c9b      	lsrs	r3, r3, #18
 80010cc:	3b01      	subs	r3, #1
 80010ce:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM10 */
  htim10.Instance = TIM10;
 80010d0:	4b11      	ldr	r3, [pc, #68]	; (8001118 <HAL_InitTick+0xac>)
 80010d2:	4a12      	ldr	r2, [pc, #72]	; (800111c <HAL_InitTick+0xb0>)
 80010d4:	601a      	str	r2, [r3, #0]
  + Period = [(TIM10CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim10.Init.Period = (1000000 / 1000) - 1;
 80010d6:	4b10      	ldr	r3, [pc, #64]	; (8001118 <HAL_InitTick+0xac>)
 80010d8:	f240 32e7 	movw	r2, #999	; 0x3e7
 80010dc:	60da      	str	r2, [r3, #12]
  htim10.Init.Prescaler = uwPrescalerValue;
 80010de:	4a0e      	ldr	r2, [pc, #56]	; (8001118 <HAL_InitTick+0xac>)
 80010e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80010e2:	6053      	str	r3, [r2, #4]
  htim10.Init.ClockDivision = 0;
 80010e4:	4b0c      	ldr	r3, [pc, #48]	; (8001118 <HAL_InitTick+0xac>)
 80010e6:	2200      	movs	r2, #0
 80010e8:	611a      	str	r2, [r3, #16]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010ea:	4b0b      	ldr	r3, [pc, #44]	; (8001118 <HAL_InitTick+0xac>)
 80010ec:	2200      	movs	r2, #0
 80010ee:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim10) == HAL_OK)
 80010f0:	4809      	ldr	r0, [pc, #36]	; (8001118 <HAL_InitTick+0xac>)
 80010f2:	f002 ff9f 	bl	8004034 <HAL_TIM_Base_Init>
 80010f6:	4603      	mov	r3, r0
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d104      	bne.n	8001106 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim10);
 80010fc:	4806      	ldr	r0, [pc, #24]	; (8001118 <HAL_InitTick+0xac>)
 80010fe:	f002 ffce 	bl	800409e <HAL_TIM_Base_Start_IT>
 8001102:	4603      	mov	r3, r0
 8001104:	e000      	b.n	8001108 <HAL_InitTick+0x9c>
  }
  
  /* Return function status */
  return HAL_ERROR;
 8001106:	2301      	movs	r3, #1
}
 8001108:	4618      	mov	r0, r3
 800110a:	3730      	adds	r7, #48	; 0x30
 800110c:	46bd      	mov	sp, r7
 800110e:	bd80      	pop	{r7, pc}
 8001110:	40023800 	.word	0x40023800
 8001114:	431bde83 	.word	0x431bde83
 8001118:	20004258 	.word	0x20004258
 800111c:	40014400 	.word	0x40014400

08001120 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001120:	b480      	push	{r7}
 8001122:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001124:	bf00      	nop
 8001126:	46bd      	mov	sp, r7
 8001128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112c:	4770      	bx	lr

0800112e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800112e:	b480      	push	{r7}
 8001130:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001132:	e7fe      	b.n	8001132 <HardFault_Handler+0x4>

08001134 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001134:	b480      	push	{r7}
 8001136:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001138:	e7fe      	b.n	8001138 <MemManage_Handler+0x4>

0800113a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800113a:	b480      	push	{r7}
 800113c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800113e:	e7fe      	b.n	800113e <BusFault_Handler+0x4>

08001140 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001140:	b480      	push	{r7}
 8001142:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001144:	e7fe      	b.n	8001144 <UsageFault_Handler+0x4>

08001146 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001146:	b480      	push	{r7}
 8001148:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800114a:	bf00      	nop
 800114c:	46bd      	mov	sp, r7
 800114e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001152:	4770      	bx	lr

08001154 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 8001158:	4802      	ldr	r0, [pc, #8]	; (8001164 <TIM1_UP_TIM10_IRQHandler+0x10>)
 800115a:	f002 ffc4 	bl	80040e6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 800115e:	bf00      	nop
 8001160:	bd80      	pop	{r7, pc}
 8001162:	bf00      	nop
 8001164:	20004258 	.word	0x20004258

08001168 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001168:	b580      	push	{r7, lr}
 800116a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 800116c:	4802      	ldr	r0, [pc, #8]	; (8001178 <OTG_FS_IRQHandler+0x10>)
 800116e:	f001 fad8 	bl	8002722 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001172:	bf00      	nop
 8001174:	bd80      	pop	{r7, pc}
 8001176:	bf00      	nop
 8001178:	20005738 	.word	0x20005738

0800117c <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 800117c:	b580      	push	{r7, lr}
 800117e:	b084      	sub	sp, #16
 8001180:	af00      	add	r7, sp, #0
 8001182:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8001184:	4b11      	ldr	r3, [pc, #68]	; (80011cc <_sbrk+0x50>)
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	2b00      	cmp	r3, #0
 800118a:	d102      	bne.n	8001192 <_sbrk+0x16>
		heap_end = &end;
 800118c:	4b0f      	ldr	r3, [pc, #60]	; (80011cc <_sbrk+0x50>)
 800118e:	4a10      	ldr	r2, [pc, #64]	; (80011d0 <_sbrk+0x54>)
 8001190:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8001192:	4b0e      	ldr	r3, [pc, #56]	; (80011cc <_sbrk+0x50>)
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8001198:	4b0c      	ldr	r3, [pc, #48]	; (80011cc <_sbrk+0x50>)
 800119a:	681a      	ldr	r2, [r3, #0]
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	4413      	add	r3, r2
 80011a0:	466a      	mov	r2, sp
 80011a2:	4293      	cmp	r3, r2
 80011a4:	d907      	bls.n	80011b6 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 80011a6:	f008 fca3 	bl	8009af0 <__errno>
 80011aa:	4602      	mov	r2, r0
 80011ac:	230c      	movs	r3, #12
 80011ae:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 80011b0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80011b4:	e006      	b.n	80011c4 <_sbrk+0x48>
	}

	heap_end += incr;
 80011b6:	4b05      	ldr	r3, [pc, #20]	; (80011cc <_sbrk+0x50>)
 80011b8:	681a      	ldr	r2, [r3, #0]
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	4413      	add	r3, r2
 80011be:	4a03      	ldr	r2, [pc, #12]	; (80011cc <_sbrk+0x50>)
 80011c0:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 80011c2:	68fb      	ldr	r3, [r7, #12]
}
 80011c4:	4618      	mov	r0, r3
 80011c6:	3710      	adds	r7, #16
 80011c8:	46bd      	mov	sp, r7
 80011ca:	bd80      	pop	{r7, pc}
 80011cc:	20000450 	.word	0x20000450
 80011d0:	20005b48 	.word	0x20005b48

080011d4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80011d4:	b480      	push	{r7}
 80011d6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80011d8:	4b16      	ldr	r3, [pc, #88]	; (8001234 <SystemInit+0x60>)
 80011da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80011de:	4a15      	ldr	r2, [pc, #84]	; (8001234 <SystemInit+0x60>)
 80011e0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80011e4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80011e8:	4b13      	ldr	r3, [pc, #76]	; (8001238 <SystemInit+0x64>)
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	4a12      	ldr	r2, [pc, #72]	; (8001238 <SystemInit+0x64>)
 80011ee:	f043 0301 	orr.w	r3, r3, #1
 80011f2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80011f4:	4b10      	ldr	r3, [pc, #64]	; (8001238 <SystemInit+0x64>)
 80011f6:	2200      	movs	r2, #0
 80011f8:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80011fa:	4b0f      	ldr	r3, [pc, #60]	; (8001238 <SystemInit+0x64>)
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	4a0e      	ldr	r2, [pc, #56]	; (8001238 <SystemInit+0x64>)
 8001200:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8001204:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001208:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 800120a:	4b0b      	ldr	r3, [pc, #44]	; (8001238 <SystemInit+0x64>)
 800120c:	4a0b      	ldr	r2, [pc, #44]	; (800123c <SystemInit+0x68>)
 800120e:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8001210:	4b09      	ldr	r3, [pc, #36]	; (8001238 <SystemInit+0x64>)
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	4a08      	ldr	r2, [pc, #32]	; (8001238 <SystemInit+0x64>)
 8001216:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800121a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 800121c:	4b06      	ldr	r3, [pc, #24]	; (8001238 <SystemInit+0x64>)
 800121e:	2200      	movs	r2, #0
 8001220:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001222:	4b04      	ldr	r3, [pc, #16]	; (8001234 <SystemInit+0x60>)
 8001224:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001228:	609a      	str	r2, [r3, #8]
#endif
}
 800122a:	bf00      	nop
 800122c:	46bd      	mov	sp, r7
 800122e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001232:	4770      	bx	lr
 8001234:	e000ed00 	.word	0xe000ed00
 8001238:	40023800 	.word	0x40023800
 800123c:	24003010 	.word	0x24003010

08001240 <LL_USART_Enable>:
  * @rmtoll CR1          UE            LL_USART_Enable
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_Enable(USART_TypeDef *USARTx)
{
 8001240:	b480      	push	{r7}
 8001242:	b083      	sub	sp, #12
 8001244:	af00      	add	r7, sp, #0
 8001246:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	68db      	ldr	r3, [r3, #12]
 800124c:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	60da      	str	r2, [r3, #12]
}
 8001254:	bf00      	nop
 8001256:	370c      	adds	r7, #12
 8001258:	46bd      	mov	sp, r7
 800125a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800125e:	4770      	bx	lr

08001260 <LL_USART_ConfigAsyncMode>:
  *         CR3          HDSEL         LL_USART_ConfigAsyncMode
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ConfigAsyncMode(USART_TypeDef *USARTx)
{
 8001260:	b480      	push	{r7}
 8001262:	b083      	sub	sp, #12
 8001264:	af00      	add	r7, sp, #0
 8001266:	6078      	str	r0, [r7, #4]
  /* In Asynchronous mode, the following bits must be kept cleared:
  - LINEN, CLKEN bits in the USART_CR2 register,
  - SCEN, IREN and HDSEL bits in the USART_CR3 register.*/
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	691b      	ldr	r3, [r3, #16]
 800126c:	f423 4290 	bic.w	r2, r3, #18432	; 0x4800
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	695b      	ldr	r3, [r3, #20]
 8001278:	f023 022a 	bic.w	r2, r3, #42	; 0x2a
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	615a      	str	r2, [r3, #20]
}
 8001280:	bf00      	nop
 8001282:	370c      	adds	r7, #12
 8001284:	46bd      	mov	sp, r7
 8001286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800128a:	4770      	bx	lr

0800128c <LL_AHB1_GRP1_EnableClock>:
{
 800128c:	b480      	push	{r7}
 800128e:	b085      	sub	sp, #20
 8001290:	af00      	add	r7, sp, #0
 8001292:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8001294:	4b08      	ldr	r3, [pc, #32]	; (80012b8 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001296:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001298:	4907      	ldr	r1, [pc, #28]	; (80012b8 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	4313      	orrs	r3, r2
 800129e:	630b      	str	r3, [r1, #48]	; 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 80012a0:	4b05      	ldr	r3, [pc, #20]	; (80012b8 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80012a2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	4013      	ands	r3, r2
 80012a8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80012aa:	68fb      	ldr	r3, [r7, #12]
}
 80012ac:	bf00      	nop
 80012ae:	3714      	adds	r7, #20
 80012b0:	46bd      	mov	sp, r7
 80012b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b6:	4770      	bx	lr
 80012b8:	40023800 	.word	0x40023800

080012bc <LL_APB1_GRP1_EnableClock>:
{
 80012bc:	b480      	push	{r7}
 80012be:	b085      	sub	sp, #20
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 80012c4:	4b08      	ldr	r3, [pc, #32]	; (80012e8 <LL_APB1_GRP1_EnableClock+0x2c>)
 80012c6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80012c8:	4907      	ldr	r1, [pc, #28]	; (80012e8 <LL_APB1_GRP1_EnableClock+0x2c>)
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	4313      	orrs	r3, r2
 80012ce:	640b      	str	r3, [r1, #64]	; 0x40
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 80012d0:	4b05      	ldr	r3, [pc, #20]	; (80012e8 <LL_APB1_GRP1_EnableClock+0x2c>)
 80012d2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	4013      	ands	r3, r2
 80012d8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80012da:	68fb      	ldr	r3, [r7, #12]
}
 80012dc:	bf00      	nop
 80012de:	3714      	adds	r7, #20
 80012e0:	46bd      	mov	sp, r7
 80012e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e6:	4770      	bx	lr
 80012e8:	40023800 	.word	0x40023800

080012ec <MX_USART3_UART_Init>:
/* USER CODE END 0 */

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80012ec:	b580      	push	{r7, lr}
 80012ee:	b08e      	sub	sp, #56	; 0x38
 80012f0:	af00      	add	r7, sp, #0
  LL_USART_InitTypeDef USART_InitStruct = {0};
 80012f2:	f107 031c 	add.w	r3, r7, #28
 80012f6:	2200      	movs	r2, #0
 80012f8:	601a      	str	r2, [r3, #0]
 80012fa:	605a      	str	r2, [r3, #4]
 80012fc:	609a      	str	r2, [r3, #8]
 80012fe:	60da      	str	r2, [r3, #12]
 8001300:	611a      	str	r2, [r3, #16]
 8001302:	615a      	str	r2, [r3, #20]
 8001304:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001306:	1d3b      	adds	r3, r7, #4
 8001308:	2200      	movs	r2, #0
 800130a:	601a      	str	r2, [r3, #0]
 800130c:	605a      	str	r2, [r3, #4]
 800130e:	609a      	str	r2, [r3, #8]
 8001310:	60da      	str	r2, [r3, #12]
 8001312:	611a      	str	r2, [r3, #16]
 8001314:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_USART3);
 8001316:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 800131a:	f7ff ffcf 	bl	80012bc <LL_APB1_GRP1_EnableClock>
  
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOD);
 800131e:	2008      	movs	r0, #8
 8001320:	f7ff ffb4 	bl	800128c <LL_AHB1_GRP1_EnableClock>
  /**USART3 GPIO Configuration  
  PD8   ------> USART3_TX
  PD9   ------> USART3_RX 
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_8|LL_GPIO_PIN_9;
 8001324:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001328:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800132a:	2302      	movs	r3, #2
 800132c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 800132e:	2303      	movs	r3, #3
 8001330:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001332:	2300      	movs	r3, #0
 8001334:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8001336:	2301      	movs	r3, #1
 8001338:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 800133a:	2307      	movs	r3, #7
 800133c:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800133e:	1d3b      	adds	r3, r7, #4
 8001340:	4619      	mov	r1, r3
 8001342:	4811      	ldr	r0, [pc, #68]	; (8001388 <MX_USART3_UART_Init+0x9c>)
 8001344:	f003 f9b9 	bl	80046ba <LL_GPIO_Init>

  USART_InitStruct.BaudRate = 115200;
 8001348:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 800134c:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 800134e:	2300      	movs	r3, #0
 8001350:	623b      	str	r3, [r7, #32]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8001352:	2300      	movs	r3, #0
 8001354:	627b      	str	r3, [r7, #36]	; 0x24
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8001356:	2300      	movs	r3, #0
 8001358:	62bb      	str	r3, [r7, #40]	; 0x28
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 800135a:	230c      	movs	r3, #12
 800135c:	62fb      	str	r3, [r7, #44]	; 0x2c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 800135e:	2300      	movs	r3, #0
 8001360:	633b      	str	r3, [r7, #48]	; 0x30
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8001362:	2300      	movs	r3, #0
 8001364:	637b      	str	r3, [r7, #52]	; 0x34
  LL_USART_Init(USART3, &USART_InitStruct);
 8001366:	f107 031c 	add.w	r3, r7, #28
 800136a:	4619      	mov	r1, r3
 800136c:	4807      	ldr	r0, [pc, #28]	; (800138c <MX_USART3_UART_Init+0xa0>)
 800136e:	f003 fd87 	bl	8004e80 <LL_USART_Init>
  LL_USART_ConfigAsyncMode(USART3);
 8001372:	4806      	ldr	r0, [pc, #24]	; (800138c <MX_USART3_UART_Init+0xa0>)
 8001374:	f7ff ff74 	bl	8001260 <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART3);
 8001378:	4804      	ldr	r0, [pc, #16]	; (800138c <MX_USART3_UART_Init+0xa0>)
 800137a:	f7ff ff61 	bl	8001240 <LL_USART_Enable>

}
 800137e:	bf00      	nop
 8001380:	3738      	adds	r7, #56	; 0x38
 8001382:	46bd      	mov	sp, r7
 8001384:	bd80      	pop	{r7, pc}
 8001386:	bf00      	nop
 8001388:	40020c00 	.word	0x40020c00
 800138c:	40004800 	.word	0x40004800

08001390 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8001390:	f8df d034 	ldr.w	sp, [pc, #52]	; 80013c8 <LoopFillZerobss+0x14>
 
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001394:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001396:	e003      	b.n	80013a0 <LoopCopyDataInit>

08001398 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001398:	4b0c      	ldr	r3, [pc, #48]	; (80013cc <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800139a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800139c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800139e:	3104      	adds	r1, #4

080013a0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80013a0:	480b      	ldr	r0, [pc, #44]	; (80013d0 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80013a2:	4b0c      	ldr	r3, [pc, #48]	; (80013d4 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80013a4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80013a6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80013a8:	d3f6      	bcc.n	8001398 <CopyDataInit>
  ldr  r2, =_sbss
 80013aa:	4a0b      	ldr	r2, [pc, #44]	; (80013d8 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80013ac:	e002      	b.n	80013b4 <LoopFillZerobss>

080013ae <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80013ae:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80013b0:	f842 3b04 	str.w	r3, [r2], #4

080013b4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80013b4:	4b09      	ldr	r3, [pc, #36]	; (80013dc <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80013b6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80013b8:	d3f9      	bcc.n	80013ae <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80013ba:	f7ff ff0b 	bl	80011d4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80013be:	f008 fb9d 	bl	8009afc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80013c2:	f7ff fd8d 	bl	8000ee0 <main>
  bx  lr    
 80013c6:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 80013c8:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 80013cc:	08009e48 	.word	0x08009e48
  ldr  r0, =_sdata
 80013d0:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80013d4:	200001e0 	.word	0x200001e0
  ldr  r2, =_sbss
 80013d8:	200001e0 	.word	0x200001e0
  ldr  r3, = _ebss
 80013dc:	20005b44 	.word	0x20005b44

080013e0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80013e0:	e7fe      	b.n	80013e0 <ADC_IRQHandler>
	...

080013e4 <HAL_ETH_RxCpltCallback>:
};

/*-----------------------------------------------------------*/

void HAL_ETH_RxCpltCallback( ETH_HandleTypeDef *heth )
{
 80013e4:	b580      	push	{r7, lr}
 80013e6:	b084      	sub	sp, #16
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	6078      	str	r0, [r7, #4]
BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 80013ec:	2300      	movs	r3, #0
 80013ee:	60fb      	str	r3, [r7, #12]

	/* Ethernet RX-Complete callback function, elsewhere declared as weak. */
    ulISREvents |= EMAC_IF_RX_EVENT;
 80013f0:	4b10      	ldr	r3, [pc, #64]	; (8001434 <HAL_ETH_RxCpltCallback+0x50>)
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	f043 0301 	orr.w	r3, r3, #1
 80013f8:	4a0e      	ldr	r2, [pc, #56]	; (8001434 <HAL_ETH_RxCpltCallback+0x50>)
 80013fa:	6013      	str	r3, [r2, #0]
	/* Wakeup the prvEMACHandlerTask. */
	if( xEMACTaskHandle != NULL )
 80013fc:	4b0e      	ldr	r3, [pc, #56]	; (8001438 <HAL_ETH_RxCpltCallback+0x54>)
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	2b00      	cmp	r3, #0
 8001402:	d012      	beq.n	800142a <HAL_ETH_RxCpltCallback+0x46>
	{
		vTaskNotifyGiveFromISR( xEMACTaskHandle, &xHigherPriorityTaskWoken );
 8001404:	4b0c      	ldr	r3, [pc, #48]	; (8001438 <HAL_ETH_RxCpltCallback+0x54>)
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	f107 020c 	add.w	r2, r7, #12
 800140c:	4611      	mov	r1, r2
 800140e:	4618      	mov	r0, r3
 8001410:	f007 f98a 	bl	8008728 <vTaskNotifyGiveFromISR>
		portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
 8001414:	68fb      	ldr	r3, [r7, #12]
 8001416:	2b00      	cmp	r3, #0
 8001418:	d007      	beq.n	800142a <HAL_ETH_RxCpltCallback+0x46>
 800141a:	4b08      	ldr	r3, [pc, #32]	; (800143c <HAL_ETH_RxCpltCallback+0x58>)
 800141c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001420:	601a      	str	r2, [r3, #0]
 8001422:	f3bf 8f4f 	dsb	sy
 8001426:	f3bf 8f6f 	isb	sy
	}
}
 800142a:	bf00      	nop
 800142c:	3710      	adds	r7, #16
 800142e:	46bd      	mov	sp, r7
 8001430:	bd80      	pop	{r7, pc}
 8001432:	bf00      	nop
 8001434:	20000454 	.word	0x20000454
 8001438:	200004a0 	.word	0x200004a0
 800143c:	e000ed04 	.word	0xe000ed04

08001440 <HAL_ETH_TxCpltCallback>:
/*-----------------------------------------------------------*/

	void HAL_ETH_TxCpltCallback( ETH_HandleTypeDef *heth )
	{
 8001440:	b580      	push	{r7, lr}
 8001442:	b084      	sub	sp, #16
 8001444:	af00      	add	r7, sp, #0
 8001446:	6078      	str	r0, [r7, #4]
	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8001448:	2300      	movs	r3, #0
 800144a:	60fb      	str	r3, [r7, #12]

		/* This call-back is only useful in case packets are being sent
		zero-copy.  Once they're sent, the buffers will be released
		by the function vClearTXBuffers(). */
		ulISREvents |= EMAC_IF_TX_EVENT;
 800144c:	4b10      	ldr	r3, [pc, #64]	; (8001490 <HAL_ETH_TxCpltCallback+0x50>)
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	f043 0302 	orr.w	r3, r3, #2
 8001454:	4a0e      	ldr	r2, [pc, #56]	; (8001490 <HAL_ETH_TxCpltCallback+0x50>)
 8001456:	6013      	str	r3, [r2, #0]
		/* Wakeup the prvEMACHandlerTask. */
		if( xEMACTaskHandle != NULL )
 8001458:	4b0e      	ldr	r3, [pc, #56]	; (8001494 <HAL_ETH_TxCpltCallback+0x54>)
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	2b00      	cmp	r3, #0
 800145e:	d012      	beq.n	8001486 <HAL_ETH_TxCpltCallback+0x46>
		{
			vTaskNotifyGiveFromISR( xEMACTaskHandle, &xHigherPriorityTaskWoken );
 8001460:	4b0c      	ldr	r3, [pc, #48]	; (8001494 <HAL_ETH_TxCpltCallback+0x54>)
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	f107 020c 	add.w	r2, r7, #12
 8001468:	4611      	mov	r1, r2
 800146a:	4618      	mov	r0, r3
 800146c:	f007 f95c 	bl	8008728 <vTaskNotifyGiveFromISR>
			portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
 8001470:	68fb      	ldr	r3, [r7, #12]
 8001472:	2b00      	cmp	r3, #0
 8001474:	d007      	beq.n	8001486 <HAL_ETH_TxCpltCallback+0x46>
 8001476:	4b08      	ldr	r3, [pc, #32]	; (8001498 <HAL_ETH_TxCpltCallback+0x58>)
 8001478:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800147c:	601a      	str	r2, [r3, #0]
 800147e:	f3bf 8f4f 	dsb	sy
 8001482:	f3bf 8f6f 	isb	sy
		}

	}
 8001486:	bf00      	nop
 8001488:	3710      	adds	r7, #16
 800148a:	46bd      	mov	sp, r7
 800148c:	bd80      	pop	{r7, pc}
 800148e:	bf00      	nop
 8001490:	20000454 	.word	0x20000454
 8001494:	200004a0 	.word	0x200004a0
 8001498:	e000ed04 	.word	0xe000ed04

0800149c <ETH_IRQHandler>:
	}
}
/*-----------------------------------------------------------*/

void ETH_IRQHandler( void )
{
 800149c:	b580      	push	{r7, lr}
 800149e:	af00      	add	r7, sp, #0
	HAL_ETH_IRQHandler( &xETH );
 80014a0:	4802      	ldr	r0, [pc, #8]	; (80014ac <ETH_IRQHandler+0x10>)
 80014a2:	f000 fae9 	bl	8001a78 <HAL_ETH_IRQHandler>
}
 80014a6:	bf00      	nop
 80014a8:	bd80      	pop	{r7, pc}
 80014aa:	bf00      	nop
 80014ac:	20000458 	.word	0x20000458

080014b0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80014b4:	4b0e      	ldr	r3, [pc, #56]	; (80014f0 <HAL_Init+0x40>)
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	4a0d      	ldr	r2, [pc, #52]	; (80014f0 <HAL_Init+0x40>)
 80014ba:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80014be:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80014c0:	4b0b      	ldr	r3, [pc, #44]	; (80014f0 <HAL_Init+0x40>)
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	4a0a      	ldr	r2, [pc, #40]	; (80014f0 <HAL_Init+0x40>)
 80014c6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80014ca:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80014cc:	4b08      	ldr	r3, [pc, #32]	; (80014f0 <HAL_Init+0x40>)
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	4a07      	ldr	r2, [pc, #28]	; (80014f0 <HAL_Init+0x40>)
 80014d2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80014d6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80014d8:	2003      	movs	r0, #3
 80014da:	f000 f8fa 	bl	80016d2 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80014de:	2000      	movs	r0, #0
 80014e0:	f7ff fdc4 	bl	800106c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80014e4:	f7ff fd96 	bl	8001014 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80014e8:	2300      	movs	r3, #0
}
 80014ea:	4618      	mov	r0, r3
 80014ec:	bd80      	pop	{r7, pc}
 80014ee:	bf00      	nop
 80014f0:	40023c00 	.word	0x40023c00

080014f4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80014f4:	b480      	push	{r7}
 80014f6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80014f8:	4b06      	ldr	r3, [pc, #24]	; (8001514 <HAL_IncTick+0x20>)
 80014fa:	781b      	ldrb	r3, [r3, #0]
 80014fc:	461a      	mov	r2, r3
 80014fe:	4b06      	ldr	r3, [pc, #24]	; (8001518 <HAL_IncTick+0x24>)
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	4413      	add	r3, r2
 8001504:	4a04      	ldr	r2, [pc, #16]	; (8001518 <HAL_IncTick+0x24>)
 8001506:	6013      	str	r3, [r2, #0]
}
 8001508:	bf00      	nop
 800150a:	46bd      	mov	sp, r7
 800150c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001510:	4770      	bx	lr
 8001512:	bf00      	nop
 8001514:	20000004 	.word	0x20000004
 8001518:	20004298 	.word	0x20004298

0800151c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800151c:	b480      	push	{r7}
 800151e:	af00      	add	r7, sp, #0
  return uwTick;
 8001520:	4b03      	ldr	r3, [pc, #12]	; (8001530 <HAL_GetTick+0x14>)
 8001522:	681b      	ldr	r3, [r3, #0]
}
 8001524:	4618      	mov	r0, r3
 8001526:	46bd      	mov	sp, r7
 8001528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800152c:	4770      	bx	lr
 800152e:	bf00      	nop
 8001530:	20004298 	.word	0x20004298

08001534 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001534:	b580      	push	{r7, lr}
 8001536:	b084      	sub	sp, #16
 8001538:	af00      	add	r7, sp, #0
 800153a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800153c:	f7ff ffee 	bl	800151c <HAL_GetTick>
 8001540:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001546:	68fb      	ldr	r3, [r7, #12]
 8001548:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800154c:	d005      	beq.n	800155a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800154e:	4b09      	ldr	r3, [pc, #36]	; (8001574 <HAL_Delay+0x40>)
 8001550:	781b      	ldrb	r3, [r3, #0]
 8001552:	461a      	mov	r2, r3
 8001554:	68fb      	ldr	r3, [r7, #12]
 8001556:	4413      	add	r3, r2
 8001558:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800155a:	bf00      	nop
 800155c:	f7ff ffde 	bl	800151c <HAL_GetTick>
 8001560:	4602      	mov	r2, r0
 8001562:	68bb      	ldr	r3, [r7, #8]
 8001564:	1ad3      	subs	r3, r2, r3
 8001566:	68fa      	ldr	r2, [r7, #12]
 8001568:	429a      	cmp	r2, r3
 800156a:	d8f7      	bhi.n	800155c <HAL_Delay+0x28>
  {
  }
}
 800156c:	bf00      	nop
 800156e:	3710      	adds	r7, #16
 8001570:	46bd      	mov	sp, r7
 8001572:	bd80      	pop	{r7, pc}
 8001574:	20000004 	.word	0x20000004

08001578 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001578:	b480      	push	{r7}
 800157a:	b085      	sub	sp, #20
 800157c:	af00      	add	r7, sp, #0
 800157e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	f003 0307 	and.w	r3, r3, #7
 8001586:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001588:	4b0c      	ldr	r3, [pc, #48]	; (80015bc <__NVIC_SetPriorityGrouping+0x44>)
 800158a:	68db      	ldr	r3, [r3, #12]
 800158c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800158e:	68ba      	ldr	r2, [r7, #8]
 8001590:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001594:	4013      	ands	r3, r2
 8001596:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001598:	68fb      	ldr	r3, [r7, #12]
 800159a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800159c:	68bb      	ldr	r3, [r7, #8]
 800159e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80015a0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80015a4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80015a8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80015aa:	4a04      	ldr	r2, [pc, #16]	; (80015bc <__NVIC_SetPriorityGrouping+0x44>)
 80015ac:	68bb      	ldr	r3, [r7, #8]
 80015ae:	60d3      	str	r3, [r2, #12]
}
 80015b0:	bf00      	nop
 80015b2:	3714      	adds	r7, #20
 80015b4:	46bd      	mov	sp, r7
 80015b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ba:	4770      	bx	lr
 80015bc:	e000ed00 	.word	0xe000ed00

080015c0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80015c0:	b480      	push	{r7}
 80015c2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80015c4:	4b04      	ldr	r3, [pc, #16]	; (80015d8 <__NVIC_GetPriorityGrouping+0x18>)
 80015c6:	68db      	ldr	r3, [r3, #12]
 80015c8:	0a1b      	lsrs	r3, r3, #8
 80015ca:	f003 0307 	and.w	r3, r3, #7
}
 80015ce:	4618      	mov	r0, r3
 80015d0:	46bd      	mov	sp, r7
 80015d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d6:	4770      	bx	lr
 80015d8:	e000ed00 	.word	0xe000ed00

080015dc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015dc:	b480      	push	{r7}
 80015de:	b083      	sub	sp, #12
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	4603      	mov	r3, r0
 80015e4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	db0b      	blt.n	8001606 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80015ee:	79fb      	ldrb	r3, [r7, #7]
 80015f0:	f003 021f 	and.w	r2, r3, #31
 80015f4:	4907      	ldr	r1, [pc, #28]	; (8001614 <__NVIC_EnableIRQ+0x38>)
 80015f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015fa:	095b      	lsrs	r3, r3, #5
 80015fc:	2001      	movs	r0, #1
 80015fe:	fa00 f202 	lsl.w	r2, r0, r2
 8001602:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001606:	bf00      	nop
 8001608:	370c      	adds	r7, #12
 800160a:	46bd      	mov	sp, r7
 800160c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001610:	4770      	bx	lr
 8001612:	bf00      	nop
 8001614:	e000e100 	.word	0xe000e100

08001618 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001618:	b480      	push	{r7}
 800161a:	b083      	sub	sp, #12
 800161c:	af00      	add	r7, sp, #0
 800161e:	4603      	mov	r3, r0
 8001620:	6039      	str	r1, [r7, #0]
 8001622:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001624:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001628:	2b00      	cmp	r3, #0
 800162a:	db0a      	blt.n	8001642 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800162c:	683b      	ldr	r3, [r7, #0]
 800162e:	b2da      	uxtb	r2, r3
 8001630:	490c      	ldr	r1, [pc, #48]	; (8001664 <__NVIC_SetPriority+0x4c>)
 8001632:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001636:	0112      	lsls	r2, r2, #4
 8001638:	b2d2      	uxtb	r2, r2
 800163a:	440b      	add	r3, r1
 800163c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001640:	e00a      	b.n	8001658 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001642:	683b      	ldr	r3, [r7, #0]
 8001644:	b2da      	uxtb	r2, r3
 8001646:	4908      	ldr	r1, [pc, #32]	; (8001668 <__NVIC_SetPriority+0x50>)
 8001648:	79fb      	ldrb	r3, [r7, #7]
 800164a:	f003 030f 	and.w	r3, r3, #15
 800164e:	3b04      	subs	r3, #4
 8001650:	0112      	lsls	r2, r2, #4
 8001652:	b2d2      	uxtb	r2, r2
 8001654:	440b      	add	r3, r1
 8001656:	761a      	strb	r2, [r3, #24]
}
 8001658:	bf00      	nop
 800165a:	370c      	adds	r7, #12
 800165c:	46bd      	mov	sp, r7
 800165e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001662:	4770      	bx	lr
 8001664:	e000e100 	.word	0xe000e100
 8001668:	e000ed00 	.word	0xe000ed00

0800166c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800166c:	b480      	push	{r7}
 800166e:	b089      	sub	sp, #36	; 0x24
 8001670:	af00      	add	r7, sp, #0
 8001672:	60f8      	str	r0, [r7, #12]
 8001674:	60b9      	str	r1, [r7, #8]
 8001676:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001678:	68fb      	ldr	r3, [r7, #12]
 800167a:	f003 0307 	and.w	r3, r3, #7
 800167e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001680:	69fb      	ldr	r3, [r7, #28]
 8001682:	f1c3 0307 	rsb	r3, r3, #7
 8001686:	2b04      	cmp	r3, #4
 8001688:	bf28      	it	cs
 800168a:	2304      	movcs	r3, #4
 800168c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800168e:	69fb      	ldr	r3, [r7, #28]
 8001690:	3304      	adds	r3, #4
 8001692:	2b06      	cmp	r3, #6
 8001694:	d902      	bls.n	800169c <NVIC_EncodePriority+0x30>
 8001696:	69fb      	ldr	r3, [r7, #28]
 8001698:	3b03      	subs	r3, #3
 800169a:	e000      	b.n	800169e <NVIC_EncodePriority+0x32>
 800169c:	2300      	movs	r3, #0
 800169e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016a0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80016a4:	69bb      	ldr	r3, [r7, #24]
 80016a6:	fa02 f303 	lsl.w	r3, r2, r3
 80016aa:	43da      	mvns	r2, r3
 80016ac:	68bb      	ldr	r3, [r7, #8]
 80016ae:	401a      	ands	r2, r3
 80016b0:	697b      	ldr	r3, [r7, #20]
 80016b2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80016b4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80016b8:	697b      	ldr	r3, [r7, #20]
 80016ba:	fa01 f303 	lsl.w	r3, r1, r3
 80016be:	43d9      	mvns	r1, r3
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016c4:	4313      	orrs	r3, r2
         );
}
 80016c6:	4618      	mov	r0, r3
 80016c8:	3724      	adds	r7, #36	; 0x24
 80016ca:	46bd      	mov	sp, r7
 80016cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d0:	4770      	bx	lr

080016d2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016d2:	b580      	push	{r7, lr}
 80016d4:	b082      	sub	sp, #8
 80016d6:	af00      	add	r7, sp, #0
 80016d8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80016da:	6878      	ldr	r0, [r7, #4]
 80016dc:	f7ff ff4c 	bl	8001578 <__NVIC_SetPriorityGrouping>
}
 80016e0:	bf00      	nop
 80016e2:	3708      	adds	r7, #8
 80016e4:	46bd      	mov	sp, r7
 80016e6:	bd80      	pop	{r7, pc}

080016e8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80016e8:	b580      	push	{r7, lr}
 80016ea:	b086      	sub	sp, #24
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	4603      	mov	r3, r0
 80016f0:	60b9      	str	r1, [r7, #8]
 80016f2:	607a      	str	r2, [r7, #4]
 80016f4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80016f6:	2300      	movs	r3, #0
 80016f8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80016fa:	f7ff ff61 	bl	80015c0 <__NVIC_GetPriorityGrouping>
 80016fe:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001700:	687a      	ldr	r2, [r7, #4]
 8001702:	68b9      	ldr	r1, [r7, #8]
 8001704:	6978      	ldr	r0, [r7, #20]
 8001706:	f7ff ffb1 	bl	800166c <NVIC_EncodePriority>
 800170a:	4602      	mov	r2, r0
 800170c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001710:	4611      	mov	r1, r2
 8001712:	4618      	mov	r0, r3
 8001714:	f7ff ff80 	bl	8001618 <__NVIC_SetPriority>
}
 8001718:	bf00      	nop
 800171a:	3718      	adds	r7, #24
 800171c:	46bd      	mov	sp, r7
 800171e:	bd80      	pop	{r7, pc}

08001720 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001720:	b580      	push	{r7, lr}
 8001722:	b082      	sub	sp, #8
 8001724:	af00      	add	r7, sp, #0
 8001726:	4603      	mov	r3, r0
 8001728:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800172a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800172e:	4618      	mov	r0, r3
 8001730:	f7ff ff54 	bl	80015dc <__NVIC_EnableIRQ>
}
 8001734:	bf00      	nop
 8001736:	3708      	adds	r7, #8
 8001738:	46bd      	mov	sp, r7
 800173a:	bd80      	pop	{r7, pc}

0800173c <HAL_ETH_Init>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 800173c:	b580      	push	{r7, lr}
 800173e:	b088      	sub	sp, #32
 8001740:	af00      	add	r7, sp, #0
 8001742:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1 = 0U, phyreg = 0U;
 8001744:	2300      	movs	r3, #0
 8001746:	61fb      	str	r3, [r7, #28]
 8001748:	2300      	movs	r3, #0
 800174a:	60fb      	str	r3, [r7, #12]
  uint32_t hclk = 60000000U;
 800174c:	4baa      	ldr	r3, [pc, #680]	; (80019f8 <HAL_ETH_Init+0x2bc>)
 800174e:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart = 0U;
 8001750:	2300      	movs	r3, #0
 8001752:	617b      	str	r3, [r7, #20]
  uint32_t err = ETH_SUCCESS;
 8001754:	2300      	movs	r3, #0
 8001756:	613b      	str	r3, [r7, #16]
  
  /* Check the ETH peripheral state */
  if(heth == NULL)
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	2b00      	cmp	r3, #0
 800175c:	d101      	bne.n	8001762 <HAL_ETH_Init+0x26>
  {
    return HAL_ERROR;
 800175e:	2301      	movs	r3, #1
 8001760:	e185      	b.n	8001a6e <HAL_ETH_Init+0x332>
  assert_param(IS_ETH_AUTONEGOTIATION(heth->Init.AutoNegotiation));
  assert_param(IS_ETH_RX_MODE(heth->Init.RxMode));
  assert_param(IS_ETH_CHECKSUM_MODE(heth->Init.ChecksumMode));
  assert_param(IS_ETH_MEDIA_INTERFACE(heth->Init.MediaInterface));  
  
  if(heth->State == HAL_ETH_STATE_RESET)
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001768:	b2db      	uxtb	r3, r3
 800176a:	2b00      	cmp	r3, #0
 800176c:	d106      	bne.n	800177c <HAL_ETH_Init+0x40>
  {
    /* Allocate lock resource and initialize it */
    heth->Lock = HAL_UNLOCKED;
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	2200      	movs	r2, #0
 8001772:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    heth->MspInitCallback(heth);

#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8001776:	6878      	ldr	r0, [r7, #4]
 8001778:	f7fe fefa 	bl	8000570 <HAL_ETH_MspInit>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
  
  /* Enable SYSCFG Clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800177c:	2300      	movs	r3, #0
 800177e:	60bb      	str	r3, [r7, #8]
 8001780:	4b9e      	ldr	r3, [pc, #632]	; (80019fc <HAL_ETH_Init+0x2c0>)
 8001782:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001784:	4a9d      	ldr	r2, [pc, #628]	; (80019fc <HAL_ETH_Init+0x2c0>)
 8001786:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800178a:	6453      	str	r3, [r2, #68]	; 0x44
 800178c:	4b9b      	ldr	r3, [pc, #620]	; (80019fc <HAL_ETH_Init+0x2c0>)
 800178e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001790:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001794:	60bb      	str	r3, [r7, #8]
 8001796:	68bb      	ldr	r3, [r7, #8]
  
  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8001798:	4b99      	ldr	r3, [pc, #612]	; (8001a00 <HAL_ETH_Init+0x2c4>)
 800179a:	685b      	ldr	r3, [r3, #4]
 800179c:	4a98      	ldr	r2, [pc, #608]	; (8001a00 <HAL_ETH_Init+0x2c4>)
 800179e:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80017a2:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 80017a4:	4b96      	ldr	r3, [pc, #600]	; (8001a00 <HAL_ETH_Init+0x2c4>)
 80017a6:	685a      	ldr	r2, [r3, #4]
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	6a1b      	ldr	r3, [r3, #32]
 80017ac:	4994      	ldr	r1, [pc, #592]	; (8001a00 <HAL_ETH_Init+0x2c4>)
 80017ae:	4313      	orrs	r3, r2
 80017b0:	604b      	str	r3, [r1, #4]
  
  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80017ba:	681a      	ldr	r2, [r3, #0]
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	f042 0201 	orr.w	r2, r2, #1
 80017c4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80017c8:	601a      	str	r2, [r3, #0]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 80017ca:	f7ff fea7 	bl	800151c <HAL_GetTick>
 80017ce:	6178      	str	r0, [r7, #20]
  
  /* Wait for software reset */
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 80017d0:	e011      	b.n	80017f6 <HAL_ETH_Init+0xba>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_SWRESET)
 80017d2:	f7ff fea3 	bl	800151c <HAL_GetTick>
 80017d6:	4602      	mov	r2, r0
 80017d8:	697b      	ldr	r3, [r7, #20]
 80017da:	1ad3      	subs	r3, r2, r3
 80017dc:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80017e0:	d909      	bls.n	80017f6 <HAL_ETH_Init+0xba>
    {     
      heth->State= HAL_ETH_STATE_TIMEOUT;
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	2203      	movs	r2, #3
 80017e6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	2200      	movs	r2, #0
 80017ee:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      /* Note: The SWR is not performed if the ETH_RX_CLK or the ETH_TX_CLK are  
         not available, please check your external PHY or the IO configuration */
      return HAL_TIMEOUT;
 80017f2:	2303      	movs	r3, #3
 80017f4:	e13b      	b.n	8001a6e <HAL_ETH_Init+0x332>
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	f003 0301 	and.w	r3, r3, #1
 8001804:	2b00      	cmp	r3, #0
 8001806:	d1e4      	bne.n	80017d2 <HAL_ETH_Init+0x96>
    }
  }
  
  /*-------------------------------- MAC Initialization ----------------------*/
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = (heth->Instance)->MACMIIAR;
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	691b      	ldr	r3, [r3, #16]
 800180e:	61fb      	str	r3, [r7, #28]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg1 &= ETH_MACMIIAR_CR_MASK;
 8001810:	69fb      	ldr	r3, [r7, #28]
 8001812:	f023 031c 	bic.w	r3, r3, #28
 8001816:	61fb      	str	r3, [r7, #28]
  
  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8001818:	f002 fbba 	bl	8003f90 <HAL_RCC_GetHCLKFreq>
 800181c:	61b8      	str	r0, [r7, #24]
  
  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 800181e:	69bb      	ldr	r3, [r7, #24]
 8001820:	4a78      	ldr	r2, [pc, #480]	; (8001a04 <HAL_ETH_Init+0x2c8>)
 8001822:	4293      	cmp	r3, r2
 8001824:	d908      	bls.n	8001838 <HAL_ETH_Init+0xfc>
 8001826:	69bb      	ldr	r3, [r7, #24]
 8001828:	4a77      	ldr	r2, [pc, #476]	; (8001a08 <HAL_ETH_Init+0x2cc>)
 800182a:	4293      	cmp	r3, r2
 800182c:	d804      	bhi.n	8001838 <HAL_ETH_Init+0xfc>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 800182e:	69fb      	ldr	r3, [r7, #28]
 8001830:	f043 0308 	orr.w	r3, r3, #8
 8001834:	61fb      	str	r3, [r7, #28]
 8001836:	e027      	b.n	8001888 <HAL_ETH_Init+0x14c>
  }
  else if((hclk >= 35000000U)&&(hclk < 60000000U))
 8001838:	69bb      	ldr	r3, [r7, #24]
 800183a:	4a73      	ldr	r2, [pc, #460]	; (8001a08 <HAL_ETH_Init+0x2cc>)
 800183c:	4293      	cmp	r3, r2
 800183e:	d908      	bls.n	8001852 <HAL_ETH_Init+0x116>
 8001840:	69bb      	ldr	r3, [r7, #24]
 8001842:	4a72      	ldr	r2, [pc, #456]	; (8001a0c <HAL_ETH_Init+0x2d0>)
 8001844:	4293      	cmp	r3, r2
 8001846:	d804      	bhi.n	8001852 <HAL_ETH_Init+0x116>
  {
    /* CSR Clock Range between 35-60 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 8001848:	69fb      	ldr	r3, [r7, #28]
 800184a:	f043 030c 	orr.w	r3, r3, #12
 800184e:	61fb      	str	r3, [r7, #28]
 8001850:	e01a      	b.n	8001888 <HAL_ETH_Init+0x14c>
  }  
  else if((hclk >= 60000000U)&&(hclk < 100000000U))
 8001852:	69bb      	ldr	r3, [r7, #24]
 8001854:	4a6d      	ldr	r2, [pc, #436]	; (8001a0c <HAL_ETH_Init+0x2d0>)
 8001856:	4293      	cmp	r3, r2
 8001858:	d903      	bls.n	8001862 <HAL_ETH_Init+0x126>
 800185a:	69bb      	ldr	r3, [r7, #24]
 800185c:	4a6c      	ldr	r2, [pc, #432]	; (8001a10 <HAL_ETH_Init+0x2d4>)
 800185e:	4293      	cmp	r3, r2
 8001860:	d911      	bls.n	8001886 <HAL_ETH_Init+0x14a>
  {
    /* CSR Clock Range between 60-100 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }  
  else if((hclk >= 100000000U)&&(hclk < 150000000U))
 8001862:	69bb      	ldr	r3, [r7, #24]
 8001864:	4a6a      	ldr	r2, [pc, #424]	; (8001a10 <HAL_ETH_Init+0x2d4>)
 8001866:	4293      	cmp	r3, r2
 8001868:	d908      	bls.n	800187c <HAL_ETH_Init+0x140>
 800186a:	69bb      	ldr	r3, [r7, #24]
 800186c:	4a69      	ldr	r2, [pc, #420]	; (8001a14 <HAL_ETH_Init+0x2d8>)
 800186e:	4293      	cmp	r3, r2
 8001870:	d804      	bhi.n	800187c <HAL_ETH_Init+0x140>
  {
    /* CSR Clock Range between 100-150 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 8001872:	69fb      	ldr	r3, [r7, #28]
 8001874:	f043 0304 	orr.w	r3, r3, #4
 8001878:	61fb      	str	r3, [r7, #28]
 800187a:	e005      	b.n	8001888 <HAL_ETH_Init+0x14c>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 183000000)) */
  {
    /* CSR Clock Range between 150-183 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div102;    
 800187c:	69fb      	ldr	r3, [r7, #28]
 800187e:	f043 0310 	orr.w	r3, r3, #16
 8001882:	61fb      	str	r3, [r7, #28]
 8001884:	e000      	b.n	8001888 <HAL_ETH_Init+0x14c>
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 8001886:	bf00      	nop
  }
  
  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg1;
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	69fa      	ldr	r2, [r7, #28]
 800188e:	611a      	str	r2, [r3, #16]
  
  /*-------------------- PHY initialization and configuration ----------------*/
  /* Put the PHY in reset mode */
  if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 8001890:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001894:	2100      	movs	r1, #0
 8001896:	6878      	ldr	r0, [r7, #4]
 8001898:	f000 f9c7 	bl	8001c2a <HAL_ETH_WritePHYRegister>
 800189c:	4603      	mov	r3, r0
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d00b      	beq.n	80018ba <HAL_ETH_Init+0x17e>
  {
    /* In case of write timeout */
    err = ETH_ERROR;
 80018a2:	2301      	movs	r3, #1
 80018a4:	613b      	str	r3, [r7, #16]
    
    /* Config MAC and DMA */
    ETH_MACDMAConfig(heth, err);
 80018a6:	6939      	ldr	r1, [r7, #16]
 80018a8:	6878      	ldr	r0, [r7, #4]
 80018aa:	f000 fa25 	bl	8001cf8 <ETH_MACDMAConfig>
    
    /* Set the ETH peripheral state to READY */
    heth->State = HAL_ETH_STATE_READY;
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	2201      	movs	r2, #1
 80018b2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Return HAL_ERROR */
    return HAL_ERROR;
 80018b6:	2301      	movs	r3, #1
 80018b8:	e0d9      	b.n	8001a6e <HAL_ETH_Init+0x332>
  }
  
  /* Delay to assure PHY reset */
  HAL_Delay(PHY_RESET_DELAY);
 80018ba:	20ff      	movs	r0, #255	; 0xff
 80018bc:	f7ff fe3a 	bl	8001534 <HAL_Delay>
  
  if((heth->Init).AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	685b      	ldr	r3, [r3, #4]
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	f000 80a7 	beq.w	8001a18 <HAL_ETH_Init+0x2dc>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 80018ca:	f7ff fe27 	bl	800151c <HAL_GetTick>
 80018ce:	6178      	str	r0, [r7, #20]
    
    /* We wait for linked status */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 80018d0:	f107 030c 	add.w	r3, r7, #12
 80018d4:	461a      	mov	r2, r3
 80018d6:	2101      	movs	r1, #1
 80018d8:	6878      	ldr	r0, [r7, #4]
 80018da:	f000 f93e 	bl	8001b5a <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
 80018de:	f7ff fe1d 	bl	800151c <HAL_GetTick>
 80018e2:	4602      	mov	r2, r0
 80018e4:	697b      	ldr	r3, [r7, #20]
 80018e6:	1ad3      	subs	r3, r2, r3
 80018e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80018ec:	4293      	cmp	r3, r2
 80018ee:	d90f      	bls.n	8001910 <HAL_ETH_Init+0x1d4>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 80018f0:	2301      	movs	r3, #1
 80018f2:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 80018f4:	6939      	ldr	r1, [r7, #16]
 80018f6:	6878      	ldr	r0, [r7, #4]
 80018f8:	f000 f9fe 	bl	8001cf8 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	2201      	movs	r2, #1
 8001900:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	2200      	movs	r2, #0
 8001908:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 800190c:	2303      	movs	r3, #3
 800190e:	e0ae      	b.n	8001a6e <HAL_ETH_Init+0x332>
      }
    } while (((phyreg & PHY_LINKED_STATUS) != PHY_LINKED_STATUS));
 8001910:	68fb      	ldr	r3, [r7, #12]
 8001912:	f003 0304 	and.w	r3, r3, #4
 8001916:	2b00      	cmp	r3, #0
 8001918:	d0da      	beq.n	80018d0 <HAL_ETH_Init+0x194>

    
    /* Enable Auto-Negotiation */
    if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_AUTONEGOTIATION)) != HAL_OK)
 800191a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800191e:	2100      	movs	r1, #0
 8001920:	6878      	ldr	r0, [r7, #4]
 8001922:	f000 f982 	bl	8001c2a <HAL_ETH_WritePHYRegister>
 8001926:	4603      	mov	r3, r0
 8001928:	2b00      	cmp	r3, #0
 800192a:	d00b      	beq.n	8001944 <HAL_ETH_Init+0x208>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 800192c:	2301      	movs	r3, #1
 800192e:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8001930:	6939      	ldr	r1, [r7, #16]
 8001932:	6878      	ldr	r0, [r7, #4]
 8001934:	f000 f9e0 	bl	8001cf8 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	2201      	movs	r2, #1
 800193c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 8001940:	2301      	movs	r3, #1
 8001942:	e094      	b.n	8001a6e <HAL_ETH_Init+0x332>
    }
    
    /* Get tick */
    tickstart = HAL_GetTick();
 8001944:	f7ff fdea 	bl	800151c <HAL_GetTick>
 8001948:	6178      	str	r0, [r7, #20]
    
    /* Wait until the auto-negotiation will be completed */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 800194a:	f107 030c 	add.w	r3, r7, #12
 800194e:	461a      	mov	r2, r3
 8001950:	2101      	movs	r1, #1
 8001952:	6878      	ldr	r0, [r7, #4]
 8001954:	f000 f901 	bl	8001b5a <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 8001958:	f7ff fde0 	bl	800151c <HAL_GetTick>
 800195c:	4602      	mov	r2, r0
 800195e:	697b      	ldr	r3, [r7, #20]
 8001960:	1ad3      	subs	r3, r2, r3
 8001962:	f241 3288 	movw	r2, #5000	; 0x1388
 8001966:	4293      	cmp	r3, r2
 8001968:	d90f      	bls.n	800198a <HAL_ETH_Init+0x24e>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 800196a:	2301      	movs	r3, #1
 800196c:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 800196e:	6939      	ldr	r1, [r7, #16]
 8001970:	6878      	ldr	r0, [r7, #4]
 8001972:	f000 f9c1 	bl	8001cf8 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	2201      	movs	r2, #1
 800197a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	2200      	movs	r2, #0
 8001982:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 8001986:	2303      	movs	r3, #3
 8001988:	e071      	b.n	8001a6e <HAL_ETH_Init+0x332>
      }
      
    } while (((phyreg & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 800198a:	68fb      	ldr	r3, [r7, #12]
 800198c:	f003 0320 	and.w	r3, r3, #32
 8001990:	2b00      	cmp	r3, #0
 8001992:	d0da      	beq.n	800194a <HAL_ETH_Init+0x20e>
    
    /* Read the result of the auto-negotiation */
    if((HAL_ETH_ReadPHYRegister(heth, PHY_SR, &phyreg)) != HAL_OK)
 8001994:	f107 030c 	add.w	r3, r7, #12
 8001998:	461a      	mov	r2, r3
 800199a:	211f      	movs	r1, #31
 800199c:	6878      	ldr	r0, [r7, #4]
 800199e:	f000 f8dc 	bl	8001b5a <HAL_ETH_ReadPHYRegister>
 80019a2:	4603      	mov	r3, r0
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d00b      	beq.n	80019c0 <HAL_ETH_Init+0x284>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 80019a8:	2301      	movs	r3, #1
 80019aa:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 80019ac:	6939      	ldr	r1, [r7, #16]
 80019ae:	6878      	ldr	r0, [r7, #4]
 80019b0:	f000 f9a2 	bl	8001cf8 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	2201      	movs	r2, #1
 80019b8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 80019bc:	2301      	movs	r3, #1
 80019be:	e056      	b.n	8001a6e <HAL_ETH_Init+0x332>
    }
    
    /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
    if((phyreg & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	f003 0310 	and.w	r3, r3, #16
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d004      	beq.n	80019d4 <HAL_ETH_Init+0x298>
    {
      /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;  
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80019d0:	60da      	str	r2, [r3, #12]
 80019d2:	e002      	b.n	80019da <HAL_ETH_Init+0x29e>
    }
    else
    {
      /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_HALFDUPLEX;           
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	2200      	movs	r2, #0
 80019d8:	60da      	str	r2, [r3, #12]
    }
    /* Configure the MAC with the speed fixed by the auto-negotiation process */
    if((phyreg & PHY_SPEED_STATUS) == PHY_SPEED_STATUS)
 80019da:	68fb      	ldr	r3, [r7, #12]
 80019dc:	f003 0304 	and.w	r3, r3, #4
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d003      	beq.n	80019ec <HAL_ETH_Init+0x2b0>
    {  
      /* Set Ethernet speed to 10M following the auto-negotiation */
      (heth->Init).Speed = ETH_SPEED_10M; 
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	2200      	movs	r2, #0
 80019e8:	609a      	str	r2, [r3, #8]
 80019ea:	e037      	b.n	8001a5c <HAL_ETH_Init+0x320>
    }
    else
    {   
      /* Set Ethernet speed to 100M following the auto-negotiation */ 
      (heth->Init).Speed = ETH_SPEED_100M;
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80019f2:	609a      	str	r2, [r3, #8]
 80019f4:	e032      	b.n	8001a5c <HAL_ETH_Init+0x320>
 80019f6:	bf00      	nop
 80019f8:	03938700 	.word	0x03938700
 80019fc:	40023800 	.word	0x40023800
 8001a00:	40013800 	.word	0x40013800
 8001a04:	01312cff 	.word	0x01312cff
 8001a08:	02160ebf 	.word	0x02160ebf
 8001a0c:	039386ff 	.word	0x039386ff
 8001a10:	05f5e0ff 	.word	0x05f5e0ff
 8001a14:	08f0d17f 	.word	0x08f0d17f
    /* Check parameters */
    assert_param(IS_ETH_SPEED(heth->Init.Speed));
    assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode));
    
    /* Set MAC Speed and Duplex Mode */
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3U) |
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	68db      	ldr	r3, [r3, #12]
 8001a1c:	08db      	lsrs	r3, r3, #3
 8001a1e:	b29a      	uxth	r2, r3
                                                (uint16_t)((heth->Init).Speed >> 1U))) != HAL_OK)
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	689b      	ldr	r3, [r3, #8]
 8001a24:	085b      	lsrs	r3, r3, #1
 8001a26:	b29b      	uxth	r3, r3
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3U) |
 8001a28:	4313      	orrs	r3, r2
 8001a2a:	b29b      	uxth	r3, r3
 8001a2c:	461a      	mov	r2, r3
 8001a2e:	2100      	movs	r1, #0
 8001a30:	6878      	ldr	r0, [r7, #4]
 8001a32:	f000 f8fa 	bl	8001c2a <HAL_ETH_WritePHYRegister>
 8001a36:	4603      	mov	r3, r0
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d00b      	beq.n	8001a54 <HAL_ETH_Init+0x318>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8001a3c:	2301      	movs	r3, #1
 8001a3e:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8001a40:	6939      	ldr	r1, [r7, #16]
 8001a42:	6878      	ldr	r0, [r7, #4]
 8001a44:	f000 f958 	bl	8001cf8 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	2201      	movs	r2, #1
 8001a4c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;
 8001a50:	2301      	movs	r3, #1
 8001a52:	e00c      	b.n	8001a6e <HAL_ETH_Init+0x332>
    }  
    
    /* Delay to assure PHY configuration */
    HAL_Delay(PHY_CONFIG_DELAY);
 8001a54:	f640 70ff 	movw	r0, #4095	; 0xfff
 8001a58:	f7ff fd6c 	bl	8001534 <HAL_Delay>
  }
  
  /* Config MAC and DMA */
  ETH_MACDMAConfig(heth, err);
 8001a5c:	6939      	ldr	r1, [r7, #16]
 8001a5e:	6878      	ldr	r0, [r7, #4]
 8001a60:	f000 f94a 	bl	8001cf8 <ETH_MACDMAConfig>
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	2201      	movs	r2, #1
 8001a68:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 8001a6c:	2300      	movs	r3, #0
}
 8001a6e:	4618      	mov	r0, r3
 8001a70:	3720      	adds	r7, #32
 8001a72:	46bd      	mov	sp, r7
 8001a74:	bd80      	pop	{r7, pc}
 8001a76:	bf00      	nop

08001a78 <HAL_ETH_IRQHandler>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	b082      	sub	sp, #8
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	6078      	str	r0, [r7, #4]
  /* Frame received */
  if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_R)) 
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001a88:	3314      	adds	r3, #20
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001a90:	2b40      	cmp	r3, #64	; 0x40
 8001a92:	d112      	bne.n	8001aba <HAL_ETH_IRQHandler+0x42>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*Call registered Receive complete callback*/
    heth->RxCpltCallback(heth);
#else
    /* Receive complete callback */
    HAL_ETH_RxCpltCallback(heth);
 8001a94:	6878      	ldr	r0, [r7, #4]
 8001a96:	f7ff fca5 	bl	80013e4 <HAL_ETH_RxCpltCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */

     /* Clear the Eth DMA Rx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_R);
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001aa2:	3314      	adds	r3, #20
 8001aa4:	2240      	movs	r2, #64	; 0x40
 8001aa6:	601a      	str	r2, [r3, #0]

    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	2201      	movs	r2, #1
 8001aac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	2200      	movs	r2, #0
 8001ab4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8001ab8:	e01b      	b.n	8001af2 <HAL_ETH_IRQHandler+0x7a>

  }
  /* Frame transmitted */
  else if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_T)) 
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001ac2:	3314      	adds	r3, #20
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	f003 0301 	and.w	r3, r3, #1
 8001aca:	2b01      	cmp	r3, #1
 8001acc:	d111      	bne.n	8001af2 <HAL_ETH_IRQHandler+0x7a>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*  Call resgistered Transfer complete callback*/
    heth->TxCpltCallback(heth);
#else
    /* Transfer complete callback */
    HAL_ETH_TxCpltCallback(heth);
 8001ace:	6878      	ldr	r0, [r7, #4]
 8001ad0:	f7ff fcb6 	bl	8001440 <HAL_ETH_TxCpltCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */

    /* Clear the Eth DMA Tx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_T);
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001adc:	3314      	adds	r3, #20
 8001ade:	2201      	movs	r2, #1
 8001ae0:	601a      	str	r2, [r3, #0]

    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	2201      	movs	r2, #1
 8001ae6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	2200      	movs	r2, #0
 8001aee:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }
  
  /* Clear the interrupt flags */
  __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_NIS);
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001afa:	3314      	adds	r3, #20
 8001afc:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001b00:	601a      	str	r2, [r3, #0]
  
  /* ETH DMA Error */
  if(__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_AIS))
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001b0a:	3314      	adds	r3, #20
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001b12:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001b16:	d112      	bne.n	8001b3e <HAL_ETH_IRQHandler+0xc6>
  {
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    heth->DMAErrorCallback(heth);
#else
    /* Ethernet Error callback */
    HAL_ETH_ErrorCallback(heth);
 8001b18:	6878      	ldr	r0, [r7, #4]
 8001b1a:	f000 f814 	bl	8001b46 <HAL_ETH_ErrorCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */

    /* Clear the interrupt flags */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_FLAG_AIS);
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001b26:	3314      	adds	r3, #20
 8001b28:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001b2c:	601a      	str	r2, [r3, #0]
  
    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	2201      	movs	r2, #1
 8001b32:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	2200      	movs	r2, #0
 8001b3a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }
}
 8001b3e:	bf00      	nop
 8001b40:	3708      	adds	r7, #8
 8001b42:	46bd      	mov	sp, r7
 8001b44:	bd80      	pop	{r7, pc}

08001b46 <HAL_ETH_ErrorCallback>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *heth)
{
 8001b46:	b480      	push	{r7}
 8001b48:	b083      	sub	sp, #12
 8001b4a:	af00      	add	r7, sp, #0
 8001b4c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_TxCpltCallback could be implemented in the user file
  */ 
}
 8001b4e:	bf00      	nop
 8001b50:	370c      	adds	r7, #12
 8001b52:	46bd      	mov	sp, r7
 8001b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b58:	4770      	bx	lr

08001b5a <HAL_ETH_ReadPHYRegister>:
  *                   More PHY register could be read depending on the used PHY
  * @param RegValue PHY register value                  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t *RegValue)
{
 8001b5a:	b580      	push	{r7, lr}
 8001b5c:	b086      	sub	sp, #24
 8001b5e:	af00      	add	r7, sp, #0
 8001b60:	60f8      	str	r0, [r7, #12]
 8001b62:	460b      	mov	r3, r1
 8001b64:	607a      	str	r2, [r7, #4]
 8001b66:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg1 = 0U;     
 8001b68:	2300      	movs	r3, #0
 8001b6a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 8001b6c:	2300      	movs	r3, #0
 8001b6e:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001b76:	b2db      	uxtb	r3, r3
 8001b78:	2b82      	cmp	r3, #130	; 0x82
 8001b7a:	d101      	bne.n	8001b80 <HAL_ETH_ReadPHYRegister+0x26>
  {
    return HAL_BUSY;
 8001b7c:	2302      	movs	r3, #2
 8001b7e:	e050      	b.n	8001c22 <HAL_ETH_ReadPHYRegister+0xc8>
  }
  /* Set ETH HAL State to BUSY_RD */
  heth->State = HAL_ETH_STATE_BUSY_RD;
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	2282      	movs	r2, #130	; 0x82
 8001b84:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	691b      	ldr	r3, [r3, #16]
 8001b8e:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8001b90:	697b      	ldr	r3, [r7, #20]
 8001b92:	f003 031c 	and.w	r3, r3, #28
 8001b96:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII address register value */
  tmpreg1 |=(((uint32_t)heth->Init.PhyAddress << 11U) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	8a1b      	ldrh	r3, [r3, #16]
 8001b9c:	02db      	lsls	r3, r3, #11
 8001b9e:	b29b      	uxth	r3, r3
 8001ba0:	697a      	ldr	r2, [r7, #20]
 8001ba2:	4313      	orrs	r3, r2
 8001ba4:	617b      	str	r3, [r7, #20]
  tmpreg1 |=(((uint32_t)PHYReg<<6U) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
 8001ba6:	897b      	ldrh	r3, [r7, #10]
 8001ba8:	019b      	lsls	r3, r3, #6
 8001baa:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8001bae:	697a      	ldr	r2, [r7, #20]
 8001bb0:	4313      	orrs	r3, r2
 8001bb2:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 8001bb4:	697b      	ldr	r3, [r7, #20]
 8001bb6:	f023 0302 	bic.w	r3, r3, #2
 8001bba:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 8001bbc:	697b      	ldr	r3, [r7, #20]
 8001bbe:	f043 0301 	orr.w	r3, r3, #1
 8001bc2:	617b      	str	r3, [r7, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	697a      	ldr	r2, [r7, #20]
 8001bca:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8001bcc:	f7ff fca6 	bl	800151c <HAL_GetTick>
 8001bd0:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001bd2:	e015      	b.n	8001c00 <HAL_ETH_ReadPHYRegister+0xa6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_READ_TO)
 8001bd4:	f7ff fca2 	bl	800151c <HAL_GetTick>
 8001bd8:	4602      	mov	r2, r0
 8001bda:	693b      	ldr	r3, [r7, #16]
 8001bdc:	1ad3      	subs	r3, r2, r3
 8001bde:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001be2:	d309      	bcc.n	8001bf8 <HAL_ETH_ReadPHYRegister+0x9e>
    {
      heth->State= HAL_ETH_STATE_READY;
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	2201      	movs	r2, #1
 8001be8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	2200      	movs	r2, #0
 8001bf0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 8001bf4:	2303      	movs	r3, #3
 8001bf6:	e014      	b.n	8001c22 <HAL_ETH_ReadPHYRegister+0xc8>
    }
    
    tmpreg1 = heth->Instance->MACMIIAR;
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	691b      	ldr	r3, [r3, #16]
 8001bfe:	617b      	str	r3, [r7, #20]
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001c00:	697b      	ldr	r3, [r7, #20]
 8001c02:	f003 0301 	and.w	r3, r3, #1
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d1e4      	bne.n	8001bd4 <HAL_ETH_ReadPHYRegister+0x7a>
  }
  
  /* Get MACMIIDR value */
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	695b      	ldr	r3, [r3, #20]
 8001c10:	b29b      	uxth	r3, r3
 8001c12:	461a      	mov	r2, r3
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	2201      	movs	r2, #1
 8001c1c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 8001c20:	2300      	movs	r3, #0
}
 8001c22:	4618      	mov	r0, r3
 8001c24:	3718      	adds	r7, #24
 8001c26:	46bd      	mov	sp, r7
 8001c28:	bd80      	pop	{r7, pc}

08001c2a <HAL_ETH_WritePHYRegister>:
  *             More PHY register could be written depending on the used PHY
  * @param  RegValue the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t RegValue)
{
 8001c2a:	b580      	push	{r7, lr}
 8001c2c:	b086      	sub	sp, #24
 8001c2e:	af00      	add	r7, sp, #0
 8001c30:	60f8      	str	r0, [r7, #12]
 8001c32:	460b      	mov	r3, r1
 8001c34:	607a      	str	r2, [r7, #4]
 8001c36:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg1 = 0U;
 8001c38:	2300      	movs	r3, #0
 8001c3a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 8001c3c:	2300      	movs	r3, #0
 8001c3e:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001c46:	b2db      	uxtb	r3, r3
 8001c48:	2b42      	cmp	r3, #66	; 0x42
 8001c4a:	d101      	bne.n	8001c50 <HAL_ETH_WritePHYRegister+0x26>
  {
    return HAL_BUSY;
 8001c4c:	2302      	movs	r3, #2
 8001c4e:	e04e      	b.n	8001cee <HAL_ETH_WritePHYRegister+0xc4>
  }
  /* Set ETH HAL State to BUSY_WR */
  heth->State = HAL_ETH_STATE_BUSY_WR;
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	2242      	movs	r2, #66	; 0x42
 8001c54:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	691b      	ldr	r3, [r3, #16]
 8001c5e:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8001c60:	697b      	ldr	r3, [r7, #20]
 8001c62:	f003 031c 	and.w	r3, r3, #28
 8001c66:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII register address value */
  tmpreg1 |=(((uint32_t)heth->Init.PhyAddress<<11U) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	8a1b      	ldrh	r3, [r3, #16]
 8001c6c:	02db      	lsls	r3, r3, #11
 8001c6e:	b29b      	uxth	r3, r3
 8001c70:	697a      	ldr	r2, [r7, #20]
 8001c72:	4313      	orrs	r3, r2
 8001c74:	617b      	str	r3, [r7, #20]
  tmpreg1 |=(((uint32_t)PHYReg<<6U) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 8001c76:	897b      	ldrh	r3, [r7, #10]
 8001c78:	019b      	lsls	r3, r3, #6
 8001c7a:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8001c7e:	697a      	ldr	r2, [r7, #20]
 8001c80:	4313      	orrs	r3, r2
 8001c82:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 8001c84:	697b      	ldr	r3, [r7, #20]
 8001c86:	f043 0302 	orr.w	r3, r3, #2
 8001c8a:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 8001c8c:	697b      	ldr	r3, [r7, #20]
 8001c8e:	f043 0301 	orr.w	r3, r3, #1
 8001c92:	617b      	str	r3, [r7, #20]
  
  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	b29a      	uxth	r2, r3
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	615a      	str	r2, [r3, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	697a      	ldr	r2, [r7, #20]
 8001ca4:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8001ca6:	f7ff fc39 	bl	800151c <HAL_GetTick>
 8001caa:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001cac:	e015      	b.n	8001cda <HAL_ETH_WritePHYRegister+0xb0>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_WRITE_TO)
 8001cae:	f7ff fc35 	bl	800151c <HAL_GetTick>
 8001cb2:	4602      	mov	r2, r0
 8001cb4:	693b      	ldr	r3, [r7, #16]
 8001cb6:	1ad3      	subs	r3, r2, r3
 8001cb8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001cbc:	d309      	bcc.n	8001cd2 <HAL_ETH_WritePHYRegister+0xa8>
    {
      heth->State= HAL_ETH_STATE_READY;
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	2201      	movs	r2, #1
 8001cc2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	2200      	movs	r2, #0
 8001cca:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 8001cce:	2303      	movs	r3, #3
 8001cd0:	e00d      	b.n	8001cee <HAL_ETH_WritePHYRegister+0xc4>
    }
    
    tmpreg1 = heth->Instance->MACMIIAR;
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	691b      	ldr	r3, [r3, #16]
 8001cd8:	617b      	str	r3, [r7, #20]
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001cda:	697b      	ldr	r3, [r7, #20]
 8001cdc:	f003 0301 	and.w	r3, r3, #1
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d1e4      	bne.n	8001cae <HAL_ETH_WritePHYRegister+0x84>
  }
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	2201      	movs	r2, #1
 8001ce8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK; 
 8001cec:	2300      	movs	r3, #0
}
 8001cee:	4618      	mov	r0, r3
 8001cf0:	3718      	adds	r7, #24
 8001cf2:	46bd      	mov	sp, r7
 8001cf4:	bd80      	pop	{r7, pc}
	...

08001cf8 <ETH_MACDMAConfig>:
  *         the configuration information for ETHERNET module
  * @param  err Ethernet Init error
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth, uint32_t err)
{
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	b0b0      	sub	sp, #192	; 0xc0
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	6078      	str	r0, [r7, #4]
 8001d00:	6039      	str	r1, [r7, #0]
  ETH_MACInitTypeDef macinit;
  ETH_DMAInitTypeDef dmainit;
  uint32_t tmpreg1 = 0U;
 8001d02:	2300      	movs	r3, #0
 8001d04:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  if (err != ETH_SUCCESS) /* Auto-negotiation failed */
 8001d08:	683b      	ldr	r3, [r7, #0]
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d007      	beq.n	8001d1e <ETH_MACDMAConfig+0x26>
  {
    /* Set Ethernet duplex mode to Full-duplex */
    (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001d14:	60da      	str	r2, [r3, #12]
    
    /* Set Ethernet speed to 100M */
    (heth->Init).Speed = ETH_SPEED_100M;
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001d1c:	609a      	str	r2, [r3, #8]
  }
  
  /* Ethernet MAC default initialization **************************************/
  macinit.Watchdog = ETH_WATCHDOG_ENABLE;
 8001d1e:	2300      	movs	r3, #0
 8001d20:	64bb      	str	r3, [r7, #72]	; 0x48
  macinit.Jabber = ETH_JABBER_ENABLE;
 8001d22:	2300      	movs	r3, #0
 8001d24:	64fb      	str	r3, [r7, #76]	; 0x4c
  macinit.InterFrameGap = ETH_INTERFRAMEGAP_96BIT;
 8001d26:	2300      	movs	r3, #0
 8001d28:	653b      	str	r3, [r7, #80]	; 0x50
  macinit.CarrierSense = ETH_CARRIERSENCE_ENABLE;
 8001d2a:	2300      	movs	r3, #0
 8001d2c:	657b      	str	r3, [r7, #84]	; 0x54
  macinit.ReceiveOwn = ETH_RECEIVEOWN_ENABLE;
 8001d2e:	2300      	movs	r3, #0
 8001d30:	65bb      	str	r3, [r7, #88]	; 0x58
  macinit.LoopbackMode = ETH_LOOPBACKMODE_DISABLE;
 8001d32:	2300      	movs	r3, #0
 8001d34:	65fb      	str	r3, [r7, #92]	; 0x5c
  if(heth->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	69db      	ldr	r3, [r3, #28]
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d103      	bne.n	8001d46 <ETH_MACDMAConfig+0x4e>
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_ENABLE;
 8001d3e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001d42:	663b      	str	r3, [r7, #96]	; 0x60
 8001d44:	e001      	b.n	8001d4a <ETH_MACDMAConfig+0x52>
  }
  else
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 8001d46:	2300      	movs	r3, #0
 8001d48:	663b      	str	r3, [r7, #96]	; 0x60
  }
  macinit.RetryTransmission = ETH_RETRYTRANSMISSION_DISABLE;
 8001d4a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001d4e:	667b      	str	r3, [r7, #100]	; 0x64
  macinit.AutomaticPadCRCStrip = ETH_AUTOMATICPADCRCSTRIP_DISABLE;
 8001d50:	2300      	movs	r3, #0
 8001d52:	66bb      	str	r3, [r7, #104]	; 0x68
  macinit.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8001d54:	2300      	movs	r3, #0
 8001d56:	66fb      	str	r3, [r7, #108]	; 0x6c
  macinit.DeferralCheck = ETH_DEFFERRALCHECK_DISABLE;
 8001d58:	2300      	movs	r3, #0
 8001d5a:	673b      	str	r3, [r7, #112]	; 0x70
  macinit.ReceiveAll = ETH_RECEIVEAll_DISABLE;
 8001d5c:	2300      	movs	r3, #0
 8001d5e:	677b      	str	r3, [r7, #116]	; 0x74
  macinit.SourceAddrFilter = ETH_SOURCEADDRFILTER_DISABLE;
 8001d60:	2300      	movs	r3, #0
 8001d62:	67bb      	str	r3, [r7, #120]	; 0x78
  macinit.PassControlFrames = ETH_PASSCONTROLFRAMES_BLOCKALL;
 8001d64:	2340      	movs	r3, #64	; 0x40
 8001d66:	67fb      	str	r3, [r7, #124]	; 0x7c
  macinit.BroadcastFramesReception = ETH_BROADCASTFRAMESRECEPTION_ENABLE;
 8001d68:	2300      	movs	r3, #0
 8001d6a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  macinit.DestinationAddrFilter = ETH_DESTINATIONADDRFILTER_NORMAL;
 8001d6e:	2300      	movs	r3, #0
 8001d70:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macinit.PromiscuousMode = ETH_PROMISCUOUS_MODE_DISABLE;
 8001d74:	2300      	movs	r3, #0
 8001d76:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macinit.MulticastFramesFilter = ETH_MULTICASTFRAMESFILTER_PERFECT;
 8001d7a:	2300      	movs	r3, #0
 8001d7c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  macinit.UnicastFramesFilter = ETH_UNICASTFRAMESFILTER_PERFECT;
 8001d80:	2300      	movs	r3, #0
 8001d82:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  macinit.HashTableHigh = 0x0U;
 8001d86:	2300      	movs	r3, #0
 8001d88:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  macinit.HashTableLow = 0x0U;
 8001d8c:	2300      	movs	r3, #0
 8001d8e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  macinit.PauseTime = 0x0U;
 8001d92:	2300      	movs	r3, #0
 8001d94:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  macinit.ZeroQuantaPause = ETH_ZEROQUANTAPAUSE_DISABLE;
 8001d98:	2380      	movs	r3, #128	; 0x80
 8001d9a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  macinit.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8001d9e:	2300      	movs	r3, #0
 8001da0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  macinit.UnicastPauseFrameDetect = ETH_UNICASTPAUSEFRAMEDETECT_DISABLE;
 8001da4:	2300      	movs	r3, #0
 8001da6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  macinit.ReceiveFlowControl = ETH_RECEIVEFLOWCONTROL_DISABLE;
 8001daa:	2300      	movs	r3, #0
 8001dac:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  macinit.TransmitFlowControl = ETH_TRANSMITFLOWCONTROL_DISABLE;
 8001db0:	2300      	movs	r3, #0
 8001db2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  macinit.VLANTagComparison = ETH_VLANTAGCOMPARISON_16BIT;
 8001db6:	2300      	movs	r3, #0
 8001db8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  macinit.VLANTagIdentifier = 0x0U;
 8001dbc:	2300      	movs	r3, #0
 8001dbe:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  
  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8001dcc:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001dd0:	4bac      	ldr	r3, [pc, #688]	; (8002084 <ETH_MACDMAConfig+0x38c>)
 8001dd2:	4013      	ands	r3, r2
 8001dd4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Set the IPCO bit according to ETH ChecksumOffload value */
  /* Set the DR bit according to ETH RetryTransmission value */
  /* Set the ACS bit according to ETH AutomaticPadCRCStrip value */
  /* Set the BL bit according to ETH BackOffLimit value */
  /* Set the DC bit according to ETH DeferralCheck value */
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 8001dd8:	6cba      	ldr	r2, [r7, #72]	; 0x48
                       macinit.Jabber | 
 8001dda:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 8001ddc:	431a      	orrs	r2, r3
                       macinit.InterFrameGap |
 8001dde:	6d3b      	ldr	r3, [r7, #80]	; 0x50
                       macinit.Jabber | 
 8001de0:	431a      	orrs	r2, r3
                       macinit.CarrierSense |
 8001de2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
                       macinit.InterFrameGap |
 8001de4:	431a      	orrs	r2, r3
                       (heth->Init).Speed | 
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	689b      	ldr	r3, [r3, #8]
                       macinit.CarrierSense |
 8001dea:	431a      	orrs	r2, r3
                       macinit.ReceiveOwn |
 8001dec:	6dbb      	ldr	r3, [r7, #88]	; 0x58
                       (heth->Init).Speed | 
 8001dee:	431a      	orrs	r2, r3
                       macinit.LoopbackMode |
 8001df0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
                       macinit.ReceiveOwn |
 8001df2:	431a      	orrs	r2, r3
                       (heth->Init).DuplexMode | 
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	68db      	ldr	r3, [r3, #12]
                       macinit.LoopbackMode |
 8001df8:	431a      	orrs	r2, r3
                       macinit.ChecksumOffload |    
 8001dfa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
                       (heth->Init).DuplexMode | 
 8001dfc:	431a      	orrs	r2, r3
                       macinit.RetryTransmission | 
 8001dfe:	6e7b      	ldr	r3, [r7, #100]	; 0x64
                       macinit.ChecksumOffload |    
 8001e00:	431a      	orrs	r2, r3
                       macinit.AutomaticPadCRCStrip | 
 8001e02:	6ebb      	ldr	r3, [r7, #104]	; 0x68
                       macinit.RetryTransmission | 
 8001e04:	431a      	orrs	r2, r3
                       macinit.BackOffLimit | 
 8001e06:	6efb      	ldr	r3, [r7, #108]	; 0x6c
                       macinit.AutomaticPadCRCStrip | 
 8001e08:	431a      	orrs	r2, r3
                       macinit.DeferralCheck);
 8001e0a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
                       macinit.BackOffLimit | 
 8001e0c:	4313      	orrs	r3, r2
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 8001e0e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001e12:	4313      	orrs	r3, r2
 8001e14:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001e20:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001e2c:	2001      	movs	r0, #1
 8001e2e:	f7ff fb81 	bl	8001534 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1; 
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001e3a:	601a      	str	r2, [r3, #0]
  /* Set the DAIF bit according to ETH DestinationAddrFilter value */
  /* Set the PR bit according to ETH PromiscuousMode value */
  /* Set the PM, HMC and HPF bits according to ETH MulticastFramesFilter value */
  /* Set the HUC and HPF bits according to ETH UnicastFramesFilter value */
  /* Write to ETHERNET MACFFR */  
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8001e3c:	6f7a      	ldr	r2, [r7, #116]	; 0x74
                                        macinit.SourceAddrFilter |
 8001e3e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8001e40:	431a      	orrs	r2, r3
                                        macinit.PassControlFrames |
 8001e42:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
                                        macinit.SourceAddrFilter |
 8001e44:	431a      	orrs	r2, r3
                                        macinit.BroadcastFramesReception | 
 8001e46:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
                                        macinit.PassControlFrames |
 8001e4a:	431a      	orrs	r2, r3
                                        macinit.DestinationAddrFilter |
 8001e4c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
                                        macinit.BroadcastFramesReception | 
 8001e50:	431a      	orrs	r2, r3
                                        macinit.PromiscuousMode |
 8001e52:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
                                        macinit.DestinationAddrFilter |
 8001e56:	431a      	orrs	r2, r3
                                        macinit.MulticastFramesFilter |
 8001e58:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
                                        macinit.PromiscuousMode |
 8001e5c:	ea42 0103 	orr.w	r1, r2, r3
                                        macinit.UnicastFramesFilter);
 8001e60:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
                                        macinit.MulticastFramesFilter |
 8001e68:	430a      	orrs	r2, r1
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8001e6a:	605a      	str	r2, [r3, #4]
   
   /* Wait until the write operation will be taken into account:
      at least four TX_CLK/RX_CLK clock cycles */
   tmpreg1 = (heth->Instance)->MACFFR;
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	685b      	ldr	r3, [r3, #4]
 8001e72:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8001e76:	2001      	movs	r0, #1
 8001e78:	f7ff fb5c 	bl	8001534 <HAL_Delay>
   (heth->Instance)->MACFFR = tmpreg1;
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001e84:	605a      	str	r2, [r3, #4]
   
   /*--------------- ETHERNET MACHTHR and MACHTLR Configuration --------------*/
   /* Write to ETHERNET MACHTHR */
   (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8001e8e:	609a      	str	r2, [r3, #8]
   
   /* Write to ETHERNET MACHTLR */
   (heth->Instance)->MACHTLR = (uint32_t)macinit.HashTableLow;
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8001e98:	60da      	str	r2, [r3, #12]
   /*----------------------- ETHERNET MACFCR Configuration -------------------*/
   
   /* Get the ETHERNET MACFCR value */  
   tmpreg1 = (heth->Instance)->MACFCR;
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	699b      	ldr	r3, [r3, #24]
 8001ea0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Clear xx bits */
   tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8001ea4:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001ea8:	f64f 7341 	movw	r3, #65345	; 0xff41
 8001eac:	4013      	ands	r3, r2
 8001eae:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Set the DZPQ bit according to ETH ZeroQuantaPause value */
   /* Set the PLT bit according to ETH PauseLowThreshold value */
   /* Set the UP bit according to ETH UnicastPauseFrameDetect value */
   /* Set the RFE bit according to ETH ReceiveFlowControl value */
   /* Set the TFE bit according to ETH TransmitFlowControl value */ 
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 8001eb2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001eb6:	041a      	lsls	r2, r3, #16
                        macinit.ZeroQuantaPause |
 8001eb8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 8001ebc:	431a      	orrs	r2, r3
                        macinit.PauseLowThreshold |
 8001ebe:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
                        macinit.ZeroQuantaPause |
 8001ec2:	431a      	orrs	r2, r3
                        macinit.UnicastPauseFrameDetect | 
 8001ec4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
                        macinit.PauseLowThreshold |
 8001ec8:	431a      	orrs	r2, r3
                        macinit.ReceiveFlowControl |
 8001eca:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
                        macinit.UnicastPauseFrameDetect | 
 8001ece:	431a      	orrs	r2, r3
                        macinit.TransmitFlowControl); 
 8001ed0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
                        macinit.ReceiveFlowControl |
 8001ed4:	4313      	orrs	r3, r2
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 8001ed6:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001eda:	4313      	orrs	r3, r2
 8001edc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   
   /* Write to ETHERNET MACFCR */
   (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001ee8:	619a      	str	r2, [r3, #24]
   
   /* Wait until the write operation will be taken into account:
   at least four TX_CLK/RX_CLK clock cycles */
   tmpreg1 = (heth->Instance)->MACFCR;
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	699b      	ldr	r3, [r3, #24]
 8001ef0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8001ef4:	2001      	movs	r0, #1
 8001ef6:	f7ff fb1d 	bl	8001534 <HAL_Delay>
   (heth->Instance)->MACFCR = tmpreg1;
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001f02:	619a      	str	r2, [r3, #24]
   
   /*----------------------- ETHERNET MACVLANTR Configuration ----------------*/
   /* Set the ETV bit according to ETH VLANTagComparison value */
   /* Set the VL bit according to ETH VLANTagIdentifier value */  
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8001f04:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
                                            macinit.VLANTagIdentifier);
 8001f08:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	430a      	orrs	r2, r1
 8001f12:	61da      	str	r2, [r3, #28]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACVLANTR;
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	69db      	ldr	r3, [r3, #28]
 8001f1a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001f1e:	2001      	movs	r0, #1
 8001f20:	f7ff fb08 	bl	8001534 <HAL_Delay>
    (heth->Instance)->MACVLANTR = tmpreg1;
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001f2c:	61da      	str	r2, [r3, #28]
    
    /* Ethernet DMA default initialization ************************************/
    dmainit.DropTCPIPChecksumErrorFrame = ETH_DROPTCPIPCHECKSUMERRORFRAME_ENABLE;
 8001f2e:	2300      	movs	r3, #0
 8001f30:	60bb      	str	r3, [r7, #8]
    dmainit.ReceiveStoreForward = ETH_RECEIVESTOREFORWARD_ENABLE;
 8001f32:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001f36:	60fb      	str	r3, [r7, #12]
    dmainit.FlushReceivedFrame = ETH_FLUSHRECEIVEDFRAME_ENABLE;
 8001f38:	2300      	movs	r3, #0
 8001f3a:	613b      	str	r3, [r7, #16]
    dmainit.TransmitStoreForward = ETH_TRANSMITSTOREFORWARD_ENABLE;  
 8001f3c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001f40:	617b      	str	r3, [r7, #20]
    dmainit.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8001f42:	2300      	movs	r3, #0
 8001f44:	61bb      	str	r3, [r7, #24]
    dmainit.ForwardErrorFrames = ETH_FORWARDERRORFRAMES_DISABLE;
 8001f46:	2300      	movs	r3, #0
 8001f48:	61fb      	str	r3, [r7, #28]
    dmainit.ForwardUndersizedGoodFrames = ETH_FORWARDUNDERSIZEDGOODFRAMES_DISABLE;
 8001f4a:	2300      	movs	r3, #0
 8001f4c:	623b      	str	r3, [r7, #32]
    dmainit.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8001f4e:	2300      	movs	r3, #0
 8001f50:	627b      	str	r3, [r7, #36]	; 0x24
    dmainit.SecondFrameOperate = ETH_SECONDFRAMEOPERARTE_ENABLE;
 8001f52:	2304      	movs	r3, #4
 8001f54:	62bb      	str	r3, [r7, #40]	; 0x28
    dmainit.AddressAlignedBeats = ETH_ADDRESSALIGNEDBEATS_ENABLE;
 8001f56:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001f5a:	62fb      	str	r3, [r7, #44]	; 0x2c
    dmainit.FixedBurst = ETH_FIXEDBURST_ENABLE;
 8001f5c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001f60:	633b      	str	r3, [r7, #48]	; 0x30
    dmainit.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8001f62:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001f66:	637b      	str	r3, [r7, #52]	; 0x34
    dmainit.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8001f68:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001f6c:	63bb      	str	r3, [r7, #56]	; 0x38
    dmainit.EnhancedDescriptorFormat = ETH_DMAENHANCEDDESCRIPTOR_ENABLE;
 8001f6e:	2380      	movs	r3, #128	; 0x80
 8001f70:	63fb      	str	r3, [r7, #60]	; 0x3c
    dmainit.DescriptorSkipLength = 0x0U;
 8001f72:	2300      	movs	r3, #0
 8001f74:	643b      	str	r3, [r7, #64]	; 0x40
    dmainit.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8001f76:	2300      	movs	r3, #0
 8001f78:	647b      	str	r3, [r7, #68]	; 0x44
    
    /* Get the ETHERNET DMAOMR value */
    tmpreg1 = (heth->Instance)->DMAOMR;
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001f82:	3318      	adds	r3, #24
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Clear xx bits */
    tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8001f8a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001f8e:	4b3e      	ldr	r3, [pc, #248]	; (8002088 <ETH_MACDMAConfig+0x390>)
 8001f90:	4013      	ands	r3, r2
 8001f92:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Set the TTC bit according to ETH TransmitThresholdControl value */
    /* Set the FEF bit according to ETH ForwardErrorFrames value */
    /* Set the FUF bit according to ETH ForwardUndersizedGoodFrames value */
    /* Set the RTC bit according to ETH ReceiveThresholdControl value */
    /* Set the OSF bit according to ETH SecondFrameOperate value */
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8001f96:	68ba      	ldr	r2, [r7, #8]
                         dmainit.ReceiveStoreForward |
 8001f98:	68fb      	ldr	r3, [r7, #12]
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8001f9a:	431a      	orrs	r2, r3
                         dmainit.FlushReceivedFrame |
 8001f9c:	693b      	ldr	r3, [r7, #16]
                         dmainit.ReceiveStoreForward |
 8001f9e:	431a      	orrs	r2, r3
                         dmainit.TransmitStoreForward | 
 8001fa0:	697b      	ldr	r3, [r7, #20]
                         dmainit.FlushReceivedFrame |
 8001fa2:	431a      	orrs	r2, r3
                         dmainit.TransmitThresholdControl |
 8001fa4:	69bb      	ldr	r3, [r7, #24]
                         dmainit.TransmitStoreForward | 
 8001fa6:	431a      	orrs	r2, r3
                         dmainit.ForwardErrorFrames |
 8001fa8:	69fb      	ldr	r3, [r7, #28]
                         dmainit.TransmitThresholdControl |
 8001faa:	431a      	orrs	r2, r3
                         dmainit.ForwardUndersizedGoodFrames |
 8001fac:	6a3b      	ldr	r3, [r7, #32]
                         dmainit.ForwardErrorFrames |
 8001fae:	431a      	orrs	r2, r3
                         dmainit.ReceiveThresholdControl |
 8001fb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
                         dmainit.ForwardUndersizedGoodFrames |
 8001fb2:	431a      	orrs	r2, r3
                         dmainit.SecondFrameOperate);
 8001fb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
                         dmainit.ReceiveThresholdControl |
 8001fb6:	4313      	orrs	r3, r2
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8001fb8:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001fbc:	4313      	orrs	r3, r2
 8001fbe:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    
    /* Write to ETHERNET DMAOMR */
    (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001fca:	3318      	adds	r3, #24
 8001fcc:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001fd0:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->DMAOMR;
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001fda:	3318      	adds	r3, #24
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001fe2:	2001      	movs	r0, #1
 8001fe4:	f7ff faa6 	bl	8001534 <HAL_Delay>
    (heth->Instance)->DMAOMR = tmpreg1;
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001ff0:	3318      	adds	r3, #24
 8001ff2:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001ff6:	601a      	str	r2, [r3, #0]
    /* Set the RPBL and 4*PBL bits according to ETH RxDMABurstLength value */
    /* Set the PBL and 4*PBL bits according to ETH TxDMABurstLength value */
    /* Set the Enhanced DMA descriptors bit according to ETH EnhancedDescriptorFormat value*/
    /* Set the DSL bit according to ETH DesciptorSkipLength value */
    /* Set the PR and DA bits according to ETH DMAArbitration value */
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8001ff8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
                                          dmainit.FixedBurst |
 8001ffa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8001ffc:	431a      	orrs	r2, r3
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 8001ffe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                          dmainit.FixedBurst |
 8002000:	431a      	orrs	r2, r3
                                          dmainit.TxDMABurstLength |
 8002002:	6bbb      	ldr	r3, [r7, #56]	; 0x38
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 8002004:	431a      	orrs	r2, r3
                                          dmainit.EnhancedDescriptorFormat |
 8002006:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
                                          dmainit.TxDMABurstLength |
 8002008:	431a      	orrs	r2, r3
                                          (dmainit.DescriptorSkipLength << 2U) |
 800200a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800200c:	009b      	lsls	r3, r3, #2
                                          dmainit.EnhancedDescriptorFormat |
 800200e:	431a      	orrs	r2, r3
                                          dmainit.DMAArbitration |
 8002010:	6c7b      	ldr	r3, [r7, #68]	; 0x44
                                          (dmainit.DescriptorSkipLength << 2U) |
 8002012:	431a      	orrs	r2, r3
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 800201c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002020:	601a      	str	r2, [r3, #0]
                                          ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */
     
     /* Wait until the write operation will be taken into account:
        at least four TX_CLK/RX_CLK clock cycles */
     tmpreg1 = (heth->Instance)->DMABMR;
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8002030:	2001      	movs	r0, #1
 8002032:	f7ff fa7f 	bl	8001534 <HAL_Delay>
     (heth->Instance)->DMABMR = tmpreg1;
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800203e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002042:	601a      	str	r2, [r3, #0]

     if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	699b      	ldr	r3, [r3, #24]
 8002048:	2b01      	cmp	r3, #1
 800204a:	d10f      	bne.n	800206c <ETH_MACDMAConfig+0x374>
     {
       /* Enable the Ethernet Rx Interrupt */
       __HAL_ETH_DMA_ENABLE_IT((heth), ETH_DMA_IT_NIS | ETH_DMA_IT_R);
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002054:	331c      	adds	r3, #28
 8002056:	681a      	ldr	r2, [r3, #0]
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8002060:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002064:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002068:	331c      	adds	r3, #28
 800206a:	601a      	str	r2, [r3, #0]
     }

     /* Initialize MAC address in ethernet MAC */ 
     ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	695b      	ldr	r3, [r3, #20]
 8002070:	461a      	mov	r2, r3
 8002072:	2100      	movs	r1, #0
 8002074:	6878      	ldr	r0, [r7, #4]
 8002076:	f000 f809 	bl	800208c <ETH_MACAddressConfig>
}
 800207a:	bf00      	nop
 800207c:	37c0      	adds	r7, #192	; 0xc0
 800207e:	46bd      	mov	sp, r7
 8002080:	bd80      	pop	{r7, pc}
 8002082:	bf00      	nop
 8002084:	ff20810f 	.word	0xff20810f
 8002088:	f8de3f23 	.word	0xf8de3f23

0800208c <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 800208c:	b480      	push	{r7}
 800208e:	b087      	sub	sp, #28
 8002090:	af00      	add	r7, sp, #0
 8002092:	60f8      	str	r0, [r7, #12]
 8002094:	60b9      	str	r1, [r7, #8]
 8002096:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ETH_MAC_ADDRESS0123(MacAddr));
  
  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	3305      	adds	r3, #5
 800209c:	781b      	ldrb	r3, [r3, #0]
 800209e:	021b      	lsls	r3, r3, #8
 80020a0:	687a      	ldr	r2, [r7, #4]
 80020a2:	3204      	adds	r2, #4
 80020a4:	7812      	ldrb	r2, [r2, #0]
 80020a6:	4313      	orrs	r3, r2
 80020a8:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 80020aa:	68ba      	ldr	r2, [r7, #8]
 80020ac:	4b11      	ldr	r3, [pc, #68]	; (80020f4 <ETH_MACAddressConfig+0x68>)
 80020ae:	4413      	add	r3, r2
 80020b0:	461a      	mov	r2, r3
 80020b2:	697b      	ldr	r3, [r7, #20]
 80020b4:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	3303      	adds	r3, #3
 80020ba:	781b      	ldrb	r3, [r3, #0]
 80020bc:	061a      	lsls	r2, r3, #24
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	3302      	adds	r3, #2
 80020c2:	781b      	ldrb	r3, [r3, #0]
 80020c4:	041b      	lsls	r3, r3, #16
 80020c6:	431a      	orrs	r2, r3
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	3301      	adds	r3, #1
 80020cc:	781b      	ldrb	r3, [r3, #0]
 80020ce:	021b      	lsls	r3, r3, #8
 80020d0:	4313      	orrs	r3, r2
 80020d2:	687a      	ldr	r2, [r7, #4]
 80020d4:	7812      	ldrb	r2, [r2, #0]
 80020d6:	4313      	orrs	r3, r2
 80020d8:	617b      	str	r3, [r7, #20]
  
  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 80020da:	68ba      	ldr	r2, [r7, #8]
 80020dc:	4b06      	ldr	r3, [pc, #24]	; (80020f8 <ETH_MACAddressConfig+0x6c>)
 80020de:	4413      	add	r3, r2
 80020e0:	461a      	mov	r2, r3
 80020e2:	697b      	ldr	r3, [r7, #20]
 80020e4:	6013      	str	r3, [r2, #0]
}
 80020e6:	bf00      	nop
 80020e8:	371c      	adds	r7, #28
 80020ea:	46bd      	mov	sp, r7
 80020ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f0:	4770      	bx	lr
 80020f2:	bf00      	nop
 80020f4:	40028040 	.word	0x40028040
 80020f8:	40028044 	.word	0x40028044

080020fc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80020fc:	b480      	push	{r7}
 80020fe:	b089      	sub	sp, #36	; 0x24
 8002100:	af00      	add	r7, sp, #0
 8002102:	6078      	str	r0, [r7, #4]
 8002104:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002106:	2300      	movs	r3, #0
 8002108:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800210a:	2300      	movs	r3, #0
 800210c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800210e:	2300      	movs	r3, #0
 8002110:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002112:	2300      	movs	r3, #0
 8002114:	61fb      	str	r3, [r7, #28]
 8002116:	e177      	b.n	8002408 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002118:	2201      	movs	r2, #1
 800211a:	69fb      	ldr	r3, [r7, #28]
 800211c:	fa02 f303 	lsl.w	r3, r2, r3
 8002120:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002122:	683b      	ldr	r3, [r7, #0]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	697a      	ldr	r2, [r7, #20]
 8002128:	4013      	ands	r3, r2
 800212a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800212c:	693a      	ldr	r2, [r7, #16]
 800212e:	697b      	ldr	r3, [r7, #20]
 8002130:	429a      	cmp	r2, r3
 8002132:	f040 8166 	bne.w	8002402 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002136:	683b      	ldr	r3, [r7, #0]
 8002138:	685b      	ldr	r3, [r3, #4]
 800213a:	2b02      	cmp	r3, #2
 800213c:	d003      	beq.n	8002146 <HAL_GPIO_Init+0x4a>
 800213e:	683b      	ldr	r3, [r7, #0]
 8002140:	685b      	ldr	r3, [r3, #4]
 8002142:	2b12      	cmp	r3, #18
 8002144:	d123      	bne.n	800218e <HAL_GPIO_Init+0x92>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002146:	69fb      	ldr	r3, [r7, #28]
 8002148:	08da      	lsrs	r2, r3, #3
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	3208      	adds	r2, #8
 800214e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002152:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002154:	69fb      	ldr	r3, [r7, #28]
 8002156:	f003 0307 	and.w	r3, r3, #7
 800215a:	009b      	lsls	r3, r3, #2
 800215c:	220f      	movs	r2, #15
 800215e:	fa02 f303 	lsl.w	r3, r2, r3
 8002162:	43db      	mvns	r3, r3
 8002164:	69ba      	ldr	r2, [r7, #24]
 8002166:	4013      	ands	r3, r2
 8002168:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800216a:	683b      	ldr	r3, [r7, #0]
 800216c:	691a      	ldr	r2, [r3, #16]
 800216e:	69fb      	ldr	r3, [r7, #28]
 8002170:	f003 0307 	and.w	r3, r3, #7
 8002174:	009b      	lsls	r3, r3, #2
 8002176:	fa02 f303 	lsl.w	r3, r2, r3
 800217a:	69ba      	ldr	r2, [r7, #24]
 800217c:	4313      	orrs	r3, r2
 800217e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002180:	69fb      	ldr	r3, [r7, #28]
 8002182:	08da      	lsrs	r2, r3, #3
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	3208      	adds	r2, #8
 8002188:	69b9      	ldr	r1, [r7, #24]
 800218a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002194:	69fb      	ldr	r3, [r7, #28]
 8002196:	005b      	lsls	r3, r3, #1
 8002198:	2203      	movs	r2, #3
 800219a:	fa02 f303 	lsl.w	r3, r2, r3
 800219e:	43db      	mvns	r3, r3
 80021a0:	69ba      	ldr	r2, [r7, #24]
 80021a2:	4013      	ands	r3, r2
 80021a4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80021a6:	683b      	ldr	r3, [r7, #0]
 80021a8:	685b      	ldr	r3, [r3, #4]
 80021aa:	f003 0203 	and.w	r2, r3, #3
 80021ae:	69fb      	ldr	r3, [r7, #28]
 80021b0:	005b      	lsls	r3, r3, #1
 80021b2:	fa02 f303 	lsl.w	r3, r2, r3
 80021b6:	69ba      	ldr	r2, [r7, #24]
 80021b8:	4313      	orrs	r3, r2
 80021ba:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	69ba      	ldr	r2, [r7, #24]
 80021c0:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80021c2:	683b      	ldr	r3, [r7, #0]
 80021c4:	685b      	ldr	r3, [r3, #4]
 80021c6:	2b01      	cmp	r3, #1
 80021c8:	d00b      	beq.n	80021e2 <HAL_GPIO_Init+0xe6>
 80021ca:	683b      	ldr	r3, [r7, #0]
 80021cc:	685b      	ldr	r3, [r3, #4]
 80021ce:	2b02      	cmp	r3, #2
 80021d0:	d007      	beq.n	80021e2 <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80021d2:	683b      	ldr	r3, [r7, #0]
 80021d4:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80021d6:	2b11      	cmp	r3, #17
 80021d8:	d003      	beq.n	80021e2 <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80021da:	683b      	ldr	r3, [r7, #0]
 80021dc:	685b      	ldr	r3, [r3, #4]
 80021de:	2b12      	cmp	r3, #18
 80021e0:	d130      	bne.n	8002244 <HAL_GPIO_Init+0x148>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	689b      	ldr	r3, [r3, #8]
 80021e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80021e8:	69fb      	ldr	r3, [r7, #28]
 80021ea:	005b      	lsls	r3, r3, #1
 80021ec:	2203      	movs	r2, #3
 80021ee:	fa02 f303 	lsl.w	r3, r2, r3
 80021f2:	43db      	mvns	r3, r3
 80021f4:	69ba      	ldr	r2, [r7, #24]
 80021f6:	4013      	ands	r3, r2
 80021f8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80021fa:	683b      	ldr	r3, [r7, #0]
 80021fc:	68da      	ldr	r2, [r3, #12]
 80021fe:	69fb      	ldr	r3, [r7, #28]
 8002200:	005b      	lsls	r3, r3, #1
 8002202:	fa02 f303 	lsl.w	r3, r2, r3
 8002206:	69ba      	ldr	r2, [r7, #24]
 8002208:	4313      	orrs	r3, r2
 800220a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	69ba      	ldr	r2, [r7, #24]
 8002210:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	685b      	ldr	r3, [r3, #4]
 8002216:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002218:	2201      	movs	r2, #1
 800221a:	69fb      	ldr	r3, [r7, #28]
 800221c:	fa02 f303 	lsl.w	r3, r2, r3
 8002220:	43db      	mvns	r3, r3
 8002222:	69ba      	ldr	r2, [r7, #24]
 8002224:	4013      	ands	r3, r2
 8002226:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002228:	683b      	ldr	r3, [r7, #0]
 800222a:	685b      	ldr	r3, [r3, #4]
 800222c:	091b      	lsrs	r3, r3, #4
 800222e:	f003 0201 	and.w	r2, r3, #1
 8002232:	69fb      	ldr	r3, [r7, #28]
 8002234:	fa02 f303 	lsl.w	r3, r2, r3
 8002238:	69ba      	ldr	r2, [r7, #24]
 800223a:	4313      	orrs	r3, r2
 800223c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	69ba      	ldr	r2, [r7, #24]
 8002242:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	68db      	ldr	r3, [r3, #12]
 8002248:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800224a:	69fb      	ldr	r3, [r7, #28]
 800224c:	005b      	lsls	r3, r3, #1
 800224e:	2203      	movs	r2, #3
 8002250:	fa02 f303 	lsl.w	r3, r2, r3
 8002254:	43db      	mvns	r3, r3
 8002256:	69ba      	ldr	r2, [r7, #24]
 8002258:	4013      	ands	r3, r2
 800225a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800225c:	683b      	ldr	r3, [r7, #0]
 800225e:	689a      	ldr	r2, [r3, #8]
 8002260:	69fb      	ldr	r3, [r7, #28]
 8002262:	005b      	lsls	r3, r3, #1
 8002264:	fa02 f303 	lsl.w	r3, r2, r3
 8002268:	69ba      	ldr	r2, [r7, #24]
 800226a:	4313      	orrs	r3, r2
 800226c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	69ba      	ldr	r2, [r7, #24]
 8002272:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002274:	683b      	ldr	r3, [r7, #0]
 8002276:	685b      	ldr	r3, [r3, #4]
 8002278:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800227c:	2b00      	cmp	r3, #0
 800227e:	f000 80c0 	beq.w	8002402 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002282:	2300      	movs	r3, #0
 8002284:	60fb      	str	r3, [r7, #12]
 8002286:	4b65      	ldr	r3, [pc, #404]	; (800241c <HAL_GPIO_Init+0x320>)
 8002288:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800228a:	4a64      	ldr	r2, [pc, #400]	; (800241c <HAL_GPIO_Init+0x320>)
 800228c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002290:	6453      	str	r3, [r2, #68]	; 0x44
 8002292:	4b62      	ldr	r3, [pc, #392]	; (800241c <HAL_GPIO_Init+0x320>)
 8002294:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002296:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800229a:	60fb      	str	r3, [r7, #12]
 800229c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800229e:	4a60      	ldr	r2, [pc, #384]	; (8002420 <HAL_GPIO_Init+0x324>)
 80022a0:	69fb      	ldr	r3, [r7, #28]
 80022a2:	089b      	lsrs	r3, r3, #2
 80022a4:	3302      	adds	r3, #2
 80022a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80022aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80022ac:	69fb      	ldr	r3, [r7, #28]
 80022ae:	f003 0303 	and.w	r3, r3, #3
 80022b2:	009b      	lsls	r3, r3, #2
 80022b4:	220f      	movs	r2, #15
 80022b6:	fa02 f303 	lsl.w	r3, r2, r3
 80022ba:	43db      	mvns	r3, r3
 80022bc:	69ba      	ldr	r2, [r7, #24]
 80022be:	4013      	ands	r3, r2
 80022c0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	4a57      	ldr	r2, [pc, #348]	; (8002424 <HAL_GPIO_Init+0x328>)
 80022c6:	4293      	cmp	r3, r2
 80022c8:	d037      	beq.n	800233a <HAL_GPIO_Init+0x23e>
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	4a56      	ldr	r2, [pc, #344]	; (8002428 <HAL_GPIO_Init+0x32c>)
 80022ce:	4293      	cmp	r3, r2
 80022d0:	d031      	beq.n	8002336 <HAL_GPIO_Init+0x23a>
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	4a55      	ldr	r2, [pc, #340]	; (800242c <HAL_GPIO_Init+0x330>)
 80022d6:	4293      	cmp	r3, r2
 80022d8:	d02b      	beq.n	8002332 <HAL_GPIO_Init+0x236>
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	4a54      	ldr	r2, [pc, #336]	; (8002430 <HAL_GPIO_Init+0x334>)
 80022de:	4293      	cmp	r3, r2
 80022e0:	d025      	beq.n	800232e <HAL_GPIO_Init+0x232>
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	4a53      	ldr	r2, [pc, #332]	; (8002434 <HAL_GPIO_Init+0x338>)
 80022e6:	4293      	cmp	r3, r2
 80022e8:	d01f      	beq.n	800232a <HAL_GPIO_Init+0x22e>
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	4a52      	ldr	r2, [pc, #328]	; (8002438 <HAL_GPIO_Init+0x33c>)
 80022ee:	4293      	cmp	r3, r2
 80022f0:	d019      	beq.n	8002326 <HAL_GPIO_Init+0x22a>
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	4a51      	ldr	r2, [pc, #324]	; (800243c <HAL_GPIO_Init+0x340>)
 80022f6:	4293      	cmp	r3, r2
 80022f8:	d013      	beq.n	8002322 <HAL_GPIO_Init+0x226>
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	4a50      	ldr	r2, [pc, #320]	; (8002440 <HAL_GPIO_Init+0x344>)
 80022fe:	4293      	cmp	r3, r2
 8002300:	d00d      	beq.n	800231e <HAL_GPIO_Init+0x222>
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	4a4f      	ldr	r2, [pc, #316]	; (8002444 <HAL_GPIO_Init+0x348>)
 8002306:	4293      	cmp	r3, r2
 8002308:	d007      	beq.n	800231a <HAL_GPIO_Init+0x21e>
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	4a4e      	ldr	r2, [pc, #312]	; (8002448 <HAL_GPIO_Init+0x34c>)
 800230e:	4293      	cmp	r3, r2
 8002310:	d101      	bne.n	8002316 <HAL_GPIO_Init+0x21a>
 8002312:	2309      	movs	r3, #9
 8002314:	e012      	b.n	800233c <HAL_GPIO_Init+0x240>
 8002316:	230a      	movs	r3, #10
 8002318:	e010      	b.n	800233c <HAL_GPIO_Init+0x240>
 800231a:	2308      	movs	r3, #8
 800231c:	e00e      	b.n	800233c <HAL_GPIO_Init+0x240>
 800231e:	2307      	movs	r3, #7
 8002320:	e00c      	b.n	800233c <HAL_GPIO_Init+0x240>
 8002322:	2306      	movs	r3, #6
 8002324:	e00a      	b.n	800233c <HAL_GPIO_Init+0x240>
 8002326:	2305      	movs	r3, #5
 8002328:	e008      	b.n	800233c <HAL_GPIO_Init+0x240>
 800232a:	2304      	movs	r3, #4
 800232c:	e006      	b.n	800233c <HAL_GPIO_Init+0x240>
 800232e:	2303      	movs	r3, #3
 8002330:	e004      	b.n	800233c <HAL_GPIO_Init+0x240>
 8002332:	2302      	movs	r3, #2
 8002334:	e002      	b.n	800233c <HAL_GPIO_Init+0x240>
 8002336:	2301      	movs	r3, #1
 8002338:	e000      	b.n	800233c <HAL_GPIO_Init+0x240>
 800233a:	2300      	movs	r3, #0
 800233c:	69fa      	ldr	r2, [r7, #28]
 800233e:	f002 0203 	and.w	r2, r2, #3
 8002342:	0092      	lsls	r2, r2, #2
 8002344:	4093      	lsls	r3, r2
 8002346:	69ba      	ldr	r2, [r7, #24]
 8002348:	4313      	orrs	r3, r2
 800234a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800234c:	4934      	ldr	r1, [pc, #208]	; (8002420 <HAL_GPIO_Init+0x324>)
 800234e:	69fb      	ldr	r3, [r7, #28]
 8002350:	089b      	lsrs	r3, r3, #2
 8002352:	3302      	adds	r3, #2
 8002354:	69ba      	ldr	r2, [r7, #24]
 8002356:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800235a:	4b3c      	ldr	r3, [pc, #240]	; (800244c <HAL_GPIO_Init+0x350>)
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002360:	693b      	ldr	r3, [r7, #16]
 8002362:	43db      	mvns	r3, r3
 8002364:	69ba      	ldr	r2, [r7, #24]
 8002366:	4013      	ands	r3, r2
 8002368:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800236a:	683b      	ldr	r3, [r7, #0]
 800236c:	685b      	ldr	r3, [r3, #4]
 800236e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002372:	2b00      	cmp	r3, #0
 8002374:	d003      	beq.n	800237e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002376:	69ba      	ldr	r2, [r7, #24]
 8002378:	693b      	ldr	r3, [r7, #16]
 800237a:	4313      	orrs	r3, r2
 800237c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800237e:	4a33      	ldr	r2, [pc, #204]	; (800244c <HAL_GPIO_Init+0x350>)
 8002380:	69bb      	ldr	r3, [r7, #24]
 8002382:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002384:	4b31      	ldr	r3, [pc, #196]	; (800244c <HAL_GPIO_Init+0x350>)
 8002386:	685b      	ldr	r3, [r3, #4]
 8002388:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800238a:	693b      	ldr	r3, [r7, #16]
 800238c:	43db      	mvns	r3, r3
 800238e:	69ba      	ldr	r2, [r7, #24]
 8002390:	4013      	ands	r3, r2
 8002392:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002394:	683b      	ldr	r3, [r7, #0]
 8002396:	685b      	ldr	r3, [r3, #4]
 8002398:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800239c:	2b00      	cmp	r3, #0
 800239e:	d003      	beq.n	80023a8 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80023a0:	69ba      	ldr	r2, [r7, #24]
 80023a2:	693b      	ldr	r3, [r7, #16]
 80023a4:	4313      	orrs	r3, r2
 80023a6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80023a8:	4a28      	ldr	r2, [pc, #160]	; (800244c <HAL_GPIO_Init+0x350>)
 80023aa:	69bb      	ldr	r3, [r7, #24]
 80023ac:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80023ae:	4b27      	ldr	r3, [pc, #156]	; (800244c <HAL_GPIO_Init+0x350>)
 80023b0:	689b      	ldr	r3, [r3, #8]
 80023b2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80023b4:	693b      	ldr	r3, [r7, #16]
 80023b6:	43db      	mvns	r3, r3
 80023b8:	69ba      	ldr	r2, [r7, #24]
 80023ba:	4013      	ands	r3, r2
 80023bc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80023be:	683b      	ldr	r3, [r7, #0]
 80023c0:	685b      	ldr	r3, [r3, #4]
 80023c2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d003      	beq.n	80023d2 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80023ca:	69ba      	ldr	r2, [r7, #24]
 80023cc:	693b      	ldr	r3, [r7, #16]
 80023ce:	4313      	orrs	r3, r2
 80023d0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80023d2:	4a1e      	ldr	r2, [pc, #120]	; (800244c <HAL_GPIO_Init+0x350>)
 80023d4:	69bb      	ldr	r3, [r7, #24]
 80023d6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80023d8:	4b1c      	ldr	r3, [pc, #112]	; (800244c <HAL_GPIO_Init+0x350>)
 80023da:	68db      	ldr	r3, [r3, #12]
 80023dc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80023de:	693b      	ldr	r3, [r7, #16]
 80023e0:	43db      	mvns	r3, r3
 80023e2:	69ba      	ldr	r2, [r7, #24]
 80023e4:	4013      	ands	r3, r2
 80023e6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80023e8:	683b      	ldr	r3, [r7, #0]
 80023ea:	685b      	ldr	r3, [r3, #4]
 80023ec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d003      	beq.n	80023fc <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80023f4:	69ba      	ldr	r2, [r7, #24]
 80023f6:	693b      	ldr	r3, [r7, #16]
 80023f8:	4313      	orrs	r3, r2
 80023fa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80023fc:	4a13      	ldr	r2, [pc, #76]	; (800244c <HAL_GPIO_Init+0x350>)
 80023fe:	69bb      	ldr	r3, [r7, #24]
 8002400:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002402:	69fb      	ldr	r3, [r7, #28]
 8002404:	3301      	adds	r3, #1
 8002406:	61fb      	str	r3, [r7, #28]
 8002408:	69fb      	ldr	r3, [r7, #28]
 800240a:	2b0f      	cmp	r3, #15
 800240c:	f67f ae84 	bls.w	8002118 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002410:	bf00      	nop
 8002412:	3724      	adds	r7, #36	; 0x24
 8002414:	46bd      	mov	sp, r7
 8002416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800241a:	4770      	bx	lr
 800241c:	40023800 	.word	0x40023800
 8002420:	40013800 	.word	0x40013800
 8002424:	40020000 	.word	0x40020000
 8002428:	40020400 	.word	0x40020400
 800242c:	40020800 	.word	0x40020800
 8002430:	40020c00 	.word	0x40020c00
 8002434:	40021000 	.word	0x40021000
 8002438:	40021400 	.word	0x40021400
 800243c:	40021800 	.word	0x40021800
 8002440:	40021c00 	.word	0x40021c00
 8002444:	40022000 	.word	0x40022000
 8002448:	40022400 	.word	0x40022400
 800244c:	40013c00 	.word	0x40013c00

08002450 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002450:	b480      	push	{r7}
 8002452:	b083      	sub	sp, #12
 8002454:	af00      	add	r7, sp, #0
 8002456:	6078      	str	r0, [r7, #4]
 8002458:	460b      	mov	r3, r1
 800245a:	807b      	strh	r3, [r7, #2]
 800245c:	4613      	mov	r3, r2
 800245e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002460:	787b      	ldrb	r3, [r7, #1]
 8002462:	2b00      	cmp	r3, #0
 8002464:	d003      	beq.n	800246e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002466:	887a      	ldrh	r2, [r7, #2]
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800246c:	e003      	b.n	8002476 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800246e:	887b      	ldrh	r3, [r7, #2]
 8002470:	041a      	lsls	r2, r3, #16
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	619a      	str	r2, [r3, #24]
}
 8002476:	bf00      	nop
 8002478:	370c      	adds	r7, #12
 800247a:	46bd      	mov	sp, r7
 800247c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002480:	4770      	bx	lr

08002482 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002482:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002484:	b08f      	sub	sp, #60	; 0x3c
 8002486:	af0a      	add	r7, sp, #40	; 0x28
 8002488:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	2b00      	cmp	r3, #0
 800248e:	d101      	bne.n	8002494 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002490:	2301      	movs	r3, #1
 8002492:	e10f      	b.n	80026b4 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 80024a0:	b2db      	uxtb	r3, r3
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d106      	bne.n	80024b4 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	2200      	movs	r2, #0
 80024aa:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80024ae:	6878      	ldr	r0, [r7, #4]
 80024b0:	f007 f810 	bl	80094d4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	2203      	movs	r2, #3
 80024b8:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80024bc:	68bb      	ldr	r3, [r7, #8]
 80024be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80024c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d102      	bne.n	80024ce <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	2200      	movs	r2, #0
 80024cc:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	4618      	mov	r0, r3
 80024d4:	f002 fe7b 	bl	80051ce <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	603b      	str	r3, [r7, #0]
 80024de:	687e      	ldr	r6, [r7, #4]
 80024e0:	466d      	mov	r5, sp
 80024e2:	f106 0410 	add.w	r4, r6, #16
 80024e6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80024e8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80024ea:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80024ec:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80024ee:	e894 0003 	ldmia.w	r4, {r0, r1}
 80024f2:	e885 0003 	stmia.w	r5, {r0, r1}
 80024f6:	1d33      	adds	r3, r6, #4
 80024f8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80024fa:	6838      	ldr	r0, [r7, #0]
 80024fc:	f002 fd52 	bl	8004fa4 <USB_CoreInit>
 8002500:	4603      	mov	r3, r0
 8002502:	2b00      	cmp	r3, #0
 8002504:	d005      	beq.n	8002512 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	2202      	movs	r2, #2
 800250a:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800250e:	2301      	movs	r3, #1
 8002510:	e0d0      	b.n	80026b4 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	2100      	movs	r1, #0
 8002518:	4618      	mov	r0, r3
 800251a:	f002 fe69 	bl	80051f0 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800251e:	2300      	movs	r3, #0
 8002520:	73fb      	strb	r3, [r7, #15]
 8002522:	e04a      	b.n	80025ba <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002524:	7bfa      	ldrb	r2, [r7, #15]
 8002526:	6879      	ldr	r1, [r7, #4]
 8002528:	4613      	mov	r3, r2
 800252a:	00db      	lsls	r3, r3, #3
 800252c:	1a9b      	subs	r3, r3, r2
 800252e:	009b      	lsls	r3, r3, #2
 8002530:	440b      	add	r3, r1
 8002532:	333d      	adds	r3, #61	; 0x3d
 8002534:	2201      	movs	r2, #1
 8002536:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002538:	7bfa      	ldrb	r2, [r7, #15]
 800253a:	6879      	ldr	r1, [r7, #4]
 800253c:	4613      	mov	r3, r2
 800253e:	00db      	lsls	r3, r3, #3
 8002540:	1a9b      	subs	r3, r3, r2
 8002542:	009b      	lsls	r3, r3, #2
 8002544:	440b      	add	r3, r1
 8002546:	333c      	adds	r3, #60	; 0x3c
 8002548:	7bfa      	ldrb	r2, [r7, #15]
 800254a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800254c:	7bfa      	ldrb	r2, [r7, #15]
 800254e:	7bfb      	ldrb	r3, [r7, #15]
 8002550:	b298      	uxth	r0, r3
 8002552:	6879      	ldr	r1, [r7, #4]
 8002554:	4613      	mov	r3, r2
 8002556:	00db      	lsls	r3, r3, #3
 8002558:	1a9b      	subs	r3, r3, r2
 800255a:	009b      	lsls	r3, r3, #2
 800255c:	440b      	add	r3, r1
 800255e:	3342      	adds	r3, #66	; 0x42
 8002560:	4602      	mov	r2, r0
 8002562:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002564:	7bfa      	ldrb	r2, [r7, #15]
 8002566:	6879      	ldr	r1, [r7, #4]
 8002568:	4613      	mov	r3, r2
 800256a:	00db      	lsls	r3, r3, #3
 800256c:	1a9b      	subs	r3, r3, r2
 800256e:	009b      	lsls	r3, r3, #2
 8002570:	440b      	add	r3, r1
 8002572:	333f      	adds	r3, #63	; 0x3f
 8002574:	2200      	movs	r2, #0
 8002576:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002578:	7bfa      	ldrb	r2, [r7, #15]
 800257a:	6879      	ldr	r1, [r7, #4]
 800257c:	4613      	mov	r3, r2
 800257e:	00db      	lsls	r3, r3, #3
 8002580:	1a9b      	subs	r3, r3, r2
 8002582:	009b      	lsls	r3, r3, #2
 8002584:	440b      	add	r3, r1
 8002586:	3344      	adds	r3, #68	; 0x44
 8002588:	2200      	movs	r2, #0
 800258a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800258c:	7bfa      	ldrb	r2, [r7, #15]
 800258e:	6879      	ldr	r1, [r7, #4]
 8002590:	4613      	mov	r3, r2
 8002592:	00db      	lsls	r3, r3, #3
 8002594:	1a9b      	subs	r3, r3, r2
 8002596:	009b      	lsls	r3, r3, #2
 8002598:	440b      	add	r3, r1
 800259a:	3348      	adds	r3, #72	; 0x48
 800259c:	2200      	movs	r2, #0
 800259e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80025a0:	7bfa      	ldrb	r2, [r7, #15]
 80025a2:	6879      	ldr	r1, [r7, #4]
 80025a4:	4613      	mov	r3, r2
 80025a6:	00db      	lsls	r3, r3, #3
 80025a8:	1a9b      	subs	r3, r3, r2
 80025aa:	009b      	lsls	r3, r3, #2
 80025ac:	440b      	add	r3, r1
 80025ae:	3350      	adds	r3, #80	; 0x50
 80025b0:	2200      	movs	r2, #0
 80025b2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80025b4:	7bfb      	ldrb	r3, [r7, #15]
 80025b6:	3301      	adds	r3, #1
 80025b8:	73fb      	strb	r3, [r7, #15]
 80025ba:	7bfa      	ldrb	r2, [r7, #15]
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	685b      	ldr	r3, [r3, #4]
 80025c0:	429a      	cmp	r2, r3
 80025c2:	d3af      	bcc.n	8002524 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80025c4:	2300      	movs	r3, #0
 80025c6:	73fb      	strb	r3, [r7, #15]
 80025c8:	e044      	b.n	8002654 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80025ca:	7bfa      	ldrb	r2, [r7, #15]
 80025cc:	6879      	ldr	r1, [r7, #4]
 80025ce:	4613      	mov	r3, r2
 80025d0:	00db      	lsls	r3, r3, #3
 80025d2:	1a9b      	subs	r3, r3, r2
 80025d4:	009b      	lsls	r3, r3, #2
 80025d6:	440b      	add	r3, r1
 80025d8:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 80025dc:	2200      	movs	r2, #0
 80025de:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80025e0:	7bfa      	ldrb	r2, [r7, #15]
 80025e2:	6879      	ldr	r1, [r7, #4]
 80025e4:	4613      	mov	r3, r2
 80025e6:	00db      	lsls	r3, r3, #3
 80025e8:	1a9b      	subs	r3, r3, r2
 80025ea:	009b      	lsls	r3, r3, #2
 80025ec:	440b      	add	r3, r1
 80025ee:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 80025f2:	7bfa      	ldrb	r2, [r7, #15]
 80025f4:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80025f6:	7bfa      	ldrb	r2, [r7, #15]
 80025f8:	6879      	ldr	r1, [r7, #4]
 80025fa:	4613      	mov	r3, r2
 80025fc:	00db      	lsls	r3, r3, #3
 80025fe:	1a9b      	subs	r3, r3, r2
 8002600:	009b      	lsls	r3, r3, #2
 8002602:	440b      	add	r3, r1
 8002604:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8002608:	2200      	movs	r2, #0
 800260a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800260c:	7bfa      	ldrb	r2, [r7, #15]
 800260e:	6879      	ldr	r1, [r7, #4]
 8002610:	4613      	mov	r3, r2
 8002612:	00db      	lsls	r3, r3, #3
 8002614:	1a9b      	subs	r3, r3, r2
 8002616:	009b      	lsls	r3, r3, #2
 8002618:	440b      	add	r3, r1
 800261a:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800261e:	2200      	movs	r2, #0
 8002620:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002622:	7bfa      	ldrb	r2, [r7, #15]
 8002624:	6879      	ldr	r1, [r7, #4]
 8002626:	4613      	mov	r3, r2
 8002628:	00db      	lsls	r3, r3, #3
 800262a:	1a9b      	subs	r3, r3, r2
 800262c:	009b      	lsls	r3, r3, #2
 800262e:	440b      	add	r3, r1
 8002630:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002634:	2200      	movs	r2, #0
 8002636:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002638:	7bfa      	ldrb	r2, [r7, #15]
 800263a:	6879      	ldr	r1, [r7, #4]
 800263c:	4613      	mov	r3, r2
 800263e:	00db      	lsls	r3, r3, #3
 8002640:	1a9b      	subs	r3, r3, r2
 8002642:	009b      	lsls	r3, r3, #2
 8002644:	440b      	add	r3, r1
 8002646:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800264a:	2200      	movs	r2, #0
 800264c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800264e:	7bfb      	ldrb	r3, [r7, #15]
 8002650:	3301      	adds	r3, #1
 8002652:	73fb      	strb	r3, [r7, #15]
 8002654:	7bfa      	ldrb	r2, [r7, #15]
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	685b      	ldr	r3, [r3, #4]
 800265a:	429a      	cmp	r2, r3
 800265c:	d3b5      	bcc.n	80025ca <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	603b      	str	r3, [r7, #0]
 8002664:	687e      	ldr	r6, [r7, #4]
 8002666:	466d      	mov	r5, sp
 8002668:	f106 0410 	add.w	r4, r6, #16
 800266c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800266e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002670:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002672:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002674:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002678:	e885 0003 	stmia.w	r5, {r0, r1}
 800267c:	1d33      	adds	r3, r6, #4
 800267e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002680:	6838      	ldr	r0, [r7, #0]
 8002682:	f002 fddf 	bl	8005244 <USB_DevInit>
 8002686:	4603      	mov	r3, r0
 8002688:	2b00      	cmp	r3, #0
 800268a:	d005      	beq.n	8002698 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	2202      	movs	r2, #2
 8002690:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8002694:	2301      	movs	r3, #1
 8002696:	e00d      	b.n	80026b4 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	2200      	movs	r2, #0
 800269c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	2201      	movs	r2, #1
 80026a4:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
  #endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	4618      	mov	r0, r3
 80026ae:	f003 fdd4 	bl	800625a <USB_DevDisconnect>

  return HAL_OK;
 80026b2:	2300      	movs	r3, #0
}
 80026b4:	4618      	mov	r0, r3
 80026b6:	3714      	adds	r7, #20
 80026b8:	46bd      	mov	sp, r7
 80026ba:	bdf0      	pop	{r4, r5, r6, r7, pc}

080026bc <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80026bc:	b580      	push	{r7, lr}
 80026be:	b084      	sub	sp, #16
 80026c0:	af00      	add	r7, sp, #0
 80026c2:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */

  __HAL_LOCK(hpcd);
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80026d0:	2b01      	cmp	r3, #1
 80026d2:	d101      	bne.n	80026d8 <HAL_PCD_Start+0x1c>
 80026d4:	2302      	movs	r3, #2
 80026d6:	e020      	b.n	800271a <HAL_PCD_Start+0x5e>
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	2201      	movs	r2, #1
 80026dc:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026e4:	2b01      	cmp	r3, #1
 80026e6:	d109      	bne.n	80026fc <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80026ec:	2b01      	cmp	r3, #1
 80026ee:	d005      	beq.n	80026fc <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026f4:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */
  (void)USB_DevConnect(hpcd->Instance);
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	4618      	mov	r0, r3
 8002702:	f003 fd92 	bl	800622a <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	4618      	mov	r0, r3
 800270c:	f002 fd4e 	bl	80051ac <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	2200      	movs	r2, #0
 8002714:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8002718:	2300      	movs	r3, #0
}
 800271a:	4618      	mov	r0, r3
 800271c:	3710      	adds	r7, #16
 800271e:	46bd      	mov	sp, r7
 8002720:	bd80      	pop	{r7, pc}

08002722 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002722:	b590      	push	{r4, r7, lr}
 8002724:	b08d      	sub	sp, #52	; 0x34
 8002726:	af00      	add	r7, sp, #0
 8002728:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002730:	6a3b      	ldr	r3, [r7, #32]
 8002732:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	4618      	mov	r0, r3
 800273a:	f003 fe39 	bl	80063b0 <USB_GetMode>
 800273e:	4603      	mov	r3, r0
 8002740:	2b00      	cmp	r3, #0
 8002742:	f040 838e 	bne.w	8002e62 <HAL_PCD_IRQHandler+0x740>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	4618      	mov	r0, r3
 800274c:	f003 fd9d 	bl	800628a <USB_ReadInterrupts>
 8002750:	4603      	mov	r3, r0
 8002752:	2b00      	cmp	r3, #0
 8002754:	f000 8384 	beq.w	8002e60 <HAL_PCD_IRQHandler+0x73e>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	4618      	mov	r0, r3
 800275e:	f003 fd94 	bl	800628a <USB_ReadInterrupts>
 8002762:	4603      	mov	r3, r0
 8002764:	f003 0302 	and.w	r3, r3, #2
 8002768:	2b02      	cmp	r3, #2
 800276a:	d107      	bne.n	800277c <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	695a      	ldr	r2, [r3, #20]
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	f002 0202 	and.w	r2, r2, #2
 800277a:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	4618      	mov	r0, r3
 8002782:	f003 fd82 	bl	800628a <USB_ReadInterrupts>
 8002786:	4603      	mov	r3, r0
 8002788:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800278c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002790:	d17b      	bne.n	800288a <HAL_PCD_IRQHandler+0x168>
    {
      epnum = 0U;
 8002792:	2300      	movs	r3, #0
 8002794:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	4618      	mov	r0, r3
 800279c:	f003 fd88 	bl	80062b0 <USB_ReadDevAllOutEpInterrupt>
 80027a0:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 80027a2:	e06f      	b.n	8002884 <HAL_PCD_IRQHandler+0x162>
      {
        if ((ep_intr & 0x1U) != 0U)
 80027a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027a6:	f003 0301 	and.w	r3, r3, #1
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d064      	beq.n	8002878 <HAL_PCD_IRQHandler+0x156>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80027b4:	b2d2      	uxtb	r2, r2
 80027b6:	4611      	mov	r1, r2
 80027b8:	4618      	mov	r0, r3
 80027ba:	f003 fdad 	bl	8006318 <USB_ReadDevOutEPInterrupt>
 80027be:	61b8      	str	r0, [r7, #24]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80027c0:	69bb      	ldr	r3, [r7, #24]
 80027c2:	f003 0301 	and.w	r3, r3, #1
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d00c      	beq.n	80027e4 <HAL_PCD_IRQHandler+0xc2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80027ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027cc:	015a      	lsls	r2, r3, #5
 80027ce:	69fb      	ldr	r3, [r7, #28]
 80027d0:	4413      	add	r3, r2
 80027d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80027d6:	461a      	mov	r2, r3
 80027d8:	2301      	movs	r3, #1
 80027da:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80027dc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80027de:	6878      	ldr	r0, [r7, #4]
 80027e0:	f000 fe0e 	bl	8003400 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80027e4:	69bb      	ldr	r3, [r7, #24]
 80027e6:	f003 0308 	and.w	r3, r3, #8
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d00c      	beq.n	8002808 <HAL_PCD_IRQHandler+0xe6>
          {
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80027ee:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80027f0:	6878      	ldr	r0, [r7, #4]
 80027f2:	f000 ff0d 	bl	8003610 <PCD_EP_OutSetupPacket_int>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80027f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027f8:	015a      	lsls	r2, r3, #5
 80027fa:	69fb      	ldr	r3, [r7, #28]
 80027fc:	4413      	add	r3, r2
 80027fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002802:	461a      	mov	r2, r3
 8002804:	2308      	movs	r3, #8
 8002806:	6093      	str	r3, [r2, #8]
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8002808:	69bb      	ldr	r3, [r7, #24]
 800280a:	f003 0310 	and.w	r3, r3, #16
 800280e:	2b00      	cmp	r3, #0
 8002810:	d008      	beq.n	8002824 <HAL_PCD_IRQHandler+0x102>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8002812:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002814:	015a      	lsls	r2, r3, #5
 8002816:	69fb      	ldr	r3, [r7, #28]
 8002818:	4413      	add	r3, r2
 800281a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800281e:	461a      	mov	r2, r3
 8002820:	2310      	movs	r3, #16
 8002822:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002824:	69bb      	ldr	r3, [r7, #24]
 8002826:	f003 0320 	and.w	r3, r3, #32
 800282a:	2b00      	cmp	r3, #0
 800282c:	d015      	beq.n	800285a <HAL_PCD_IRQHandler+0x138>
          {
            if (hpcd->Init.dma_enable == 1U)
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	691b      	ldr	r3, [r3, #16]
 8002832:	2b01      	cmp	r3, #1
 8002834:	d108      	bne.n	8002848 <HAL_PCD_IRQHandler+0x126>
            {
              (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	6818      	ldr	r0, [r3, #0]
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002840:	461a      	mov	r2, r3
 8002842:	2101      	movs	r1, #1
 8002844:	f003 fdf8 	bl	8006438 <USB_EP0_OutStart>
            }
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002848:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800284a:	015a      	lsls	r2, r3, #5
 800284c:	69fb      	ldr	r3, [r7, #28]
 800284e:	4413      	add	r3, r2
 8002850:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002854:	461a      	mov	r2, r3
 8002856:	2320      	movs	r3, #32
 8002858:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800285a:	69bb      	ldr	r3, [r7, #24]
 800285c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002860:	2b00      	cmp	r3, #0
 8002862:	d009      	beq.n	8002878 <HAL_PCD_IRQHandler+0x156>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8002864:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002866:	015a      	lsls	r2, r3, #5
 8002868:	69fb      	ldr	r3, [r7, #28]
 800286a:	4413      	add	r3, r2
 800286c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002870:	461a      	mov	r2, r3
 8002872:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002876:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8002878:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800287a:	3301      	adds	r3, #1
 800287c:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800287e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002880:	085b      	lsrs	r3, r3, #1
 8002882:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002884:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002886:	2b00      	cmp	r3, #0
 8002888:	d18c      	bne.n	80027a4 <HAL_PCD_IRQHandler+0x82>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	4618      	mov	r0, r3
 8002890:	f003 fcfb 	bl	800628a <USB_ReadInterrupts>
 8002894:	4603      	mov	r3, r0
 8002896:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800289a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800289e:	f040 80c4 	bne.w	8002a2a <HAL_PCD_IRQHandler+0x308>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	4618      	mov	r0, r3
 80028a8:	f003 fd1c 	bl	80062e4 <USB_ReadDevAllInEpInterrupt>
 80028ac:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 80028ae:	2300      	movs	r3, #0
 80028b0:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 80028b2:	e0b6      	b.n	8002a22 <HAL_PCD_IRQHandler+0x300>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80028b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028b6:	f003 0301 	and.w	r3, r3, #1
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	f000 80ab 	beq.w	8002a16 <HAL_PCD_IRQHandler+0x2f4>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80028c6:	b2d2      	uxtb	r2, r2
 80028c8:	4611      	mov	r1, r2
 80028ca:	4618      	mov	r0, r3
 80028cc:	f003 fd42 	bl	8006354 <USB_ReadDevInEPInterrupt>
 80028d0:	61b8      	str	r0, [r7, #24]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80028d2:	69bb      	ldr	r3, [r7, #24]
 80028d4:	f003 0301 	and.w	r3, r3, #1
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d05b      	beq.n	8002994 <HAL_PCD_IRQHandler+0x272>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80028dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028de:	f003 030f 	and.w	r3, r3, #15
 80028e2:	2201      	movs	r2, #1
 80028e4:	fa02 f303 	lsl.w	r3, r2, r3
 80028e8:	617b      	str	r3, [r7, #20]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80028ea:	69fb      	ldr	r3, [r7, #28]
 80028ec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80028f0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80028f2:	697b      	ldr	r3, [r7, #20]
 80028f4:	43db      	mvns	r3, r3
 80028f6:	69f9      	ldr	r1, [r7, #28]
 80028f8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80028fc:	4013      	ands	r3, r2
 80028fe:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8002900:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002902:	015a      	lsls	r2, r3, #5
 8002904:	69fb      	ldr	r3, [r7, #28]
 8002906:	4413      	add	r3, r2
 8002908:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800290c:	461a      	mov	r2, r3
 800290e:	2301      	movs	r3, #1
 8002910:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	691b      	ldr	r3, [r3, #16]
 8002916:	2b01      	cmp	r3, #1
 8002918:	d11b      	bne.n	8002952 <HAL_PCD_IRQHandler+0x230>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800291a:	6879      	ldr	r1, [r7, #4]
 800291c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800291e:	4613      	mov	r3, r2
 8002920:	00db      	lsls	r3, r3, #3
 8002922:	1a9b      	subs	r3, r3, r2
 8002924:	009b      	lsls	r3, r3, #2
 8002926:	440b      	add	r3, r1
 8002928:	3348      	adds	r3, #72	; 0x48
 800292a:	6819      	ldr	r1, [r3, #0]
 800292c:	6878      	ldr	r0, [r7, #4]
 800292e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002930:	4613      	mov	r3, r2
 8002932:	00db      	lsls	r3, r3, #3
 8002934:	1a9b      	subs	r3, r3, r2
 8002936:	009b      	lsls	r3, r3, #2
 8002938:	4403      	add	r3, r0
 800293a:	3344      	adds	r3, #68	; 0x44
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	4419      	add	r1, r3
 8002940:	6878      	ldr	r0, [r7, #4]
 8002942:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002944:	4613      	mov	r3, r2
 8002946:	00db      	lsls	r3, r3, #3
 8002948:	1a9b      	subs	r3, r3, r2
 800294a:	009b      	lsls	r3, r3, #2
 800294c:	4403      	add	r3, r0
 800294e:	3348      	adds	r3, #72	; 0x48
 8002950:	6019      	str	r1, [r3, #0]
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8002952:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002954:	b2db      	uxtb	r3, r3
 8002956:	4619      	mov	r1, r3
 8002958:	6878      	ldr	r0, [r7, #4]
 800295a:	f006 fe4a 	bl	80095f2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

            if (hpcd->Init.dma_enable == 1U)
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	691b      	ldr	r3, [r3, #16]
 8002962:	2b01      	cmp	r3, #1
 8002964:	d116      	bne.n	8002994 <HAL_PCD_IRQHandler+0x272>
            {
              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8002966:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002968:	2b00      	cmp	r3, #0
 800296a:	d113      	bne.n	8002994 <HAL_PCD_IRQHandler+0x272>
 800296c:	6879      	ldr	r1, [r7, #4]
 800296e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002970:	4613      	mov	r3, r2
 8002972:	00db      	lsls	r3, r3, #3
 8002974:	1a9b      	subs	r3, r3, r2
 8002976:	009b      	lsls	r3, r3, #2
 8002978:	440b      	add	r3, r1
 800297a:	3350      	adds	r3, #80	; 0x50
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	2b00      	cmp	r3, #0
 8002980:	d108      	bne.n	8002994 <HAL_PCD_IRQHandler+0x272>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	6818      	ldr	r0, [r3, #0]
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800298c:	461a      	mov	r2, r3
 800298e:	2101      	movs	r1, #1
 8002990:	f003 fd52 	bl	8006438 <USB_EP0_OutStart>
              }
            }
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8002994:	69bb      	ldr	r3, [r7, #24]
 8002996:	f003 0308 	and.w	r3, r3, #8
 800299a:	2b00      	cmp	r3, #0
 800299c:	d008      	beq.n	80029b0 <HAL_PCD_IRQHandler+0x28e>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800299e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029a0:	015a      	lsls	r2, r3, #5
 80029a2:	69fb      	ldr	r3, [r7, #28]
 80029a4:	4413      	add	r3, r2
 80029a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80029aa:	461a      	mov	r2, r3
 80029ac:	2308      	movs	r3, #8
 80029ae:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80029b0:	69bb      	ldr	r3, [r7, #24]
 80029b2:	f003 0310 	and.w	r3, r3, #16
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d008      	beq.n	80029cc <HAL_PCD_IRQHandler+0x2aa>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80029ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029bc:	015a      	lsls	r2, r3, #5
 80029be:	69fb      	ldr	r3, [r7, #28]
 80029c0:	4413      	add	r3, r2
 80029c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80029c6:	461a      	mov	r2, r3
 80029c8:	2310      	movs	r3, #16
 80029ca:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80029cc:	69bb      	ldr	r3, [r7, #24]
 80029ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d008      	beq.n	80029e8 <HAL_PCD_IRQHandler+0x2c6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80029d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029d8:	015a      	lsls	r2, r3, #5
 80029da:	69fb      	ldr	r3, [r7, #28]
 80029dc:	4413      	add	r3, r2
 80029de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80029e2:	461a      	mov	r2, r3
 80029e4:	2340      	movs	r3, #64	; 0x40
 80029e6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80029e8:	69bb      	ldr	r3, [r7, #24]
 80029ea:	f003 0302 	and.w	r3, r3, #2
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d008      	beq.n	8002a04 <HAL_PCD_IRQHandler+0x2e2>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80029f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029f4:	015a      	lsls	r2, r3, #5
 80029f6:	69fb      	ldr	r3, [r7, #28]
 80029f8:	4413      	add	r3, r2
 80029fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80029fe:	461a      	mov	r2, r3
 8002a00:	2302      	movs	r3, #2
 8002a02:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8002a04:	69bb      	ldr	r3, [r7, #24]
 8002a06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d003      	beq.n	8002a16 <HAL_PCD_IRQHandler+0x2f4>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8002a0e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002a10:	6878      	ldr	r0, [r7, #4]
 8002a12:	f000 fc67 	bl	80032e4 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8002a16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a18:	3301      	adds	r3, #1
 8002a1a:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002a1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a1e:	085b      	lsrs	r3, r3, #1
 8002a20:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002a22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	f47f af45 	bne.w	80028b4 <HAL_PCD_IRQHandler+0x192>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	4618      	mov	r0, r3
 8002a30:	f003 fc2b 	bl	800628a <USB_ReadInterrupts>
 8002a34:	4603      	mov	r3, r0
 8002a36:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002a3a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002a3e:	d122      	bne.n	8002a86 <HAL_PCD_IRQHandler+0x364>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002a40:	69fb      	ldr	r3, [r7, #28]
 8002a42:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002a46:	685b      	ldr	r3, [r3, #4]
 8002a48:	69fa      	ldr	r2, [r7, #28]
 8002a4a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002a4e:	f023 0301 	bic.w	r3, r3, #1
 8002a52:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8002a5a:	2b01      	cmp	r3, #1
 8002a5c:	d108      	bne.n	8002a70 <HAL_PCD_IRQHandler+0x34e>
      {
        hpcd->LPM_State = LPM_L0;
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	2200      	movs	r2, #0
 8002a62:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8002a66:	2100      	movs	r1, #0
 8002a68:	6878      	ldr	r0, [r7, #4]
 8002a6a:	f000 fe89 	bl	8003780 <HAL_PCDEx_LPM_Callback>
 8002a6e:	e002      	b.n	8002a76 <HAL_PCD_IRQHandler+0x354>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8002a70:	6878      	ldr	r0, [r7, #4]
 8002a72:	f006 fe35 	bl	80096e0 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	695a      	ldr	r2, [r3, #20]
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8002a84:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	4618      	mov	r0, r3
 8002a8c:	f003 fbfd 	bl	800628a <USB_ReadInterrupts>
 8002a90:	4603      	mov	r3, r0
 8002a92:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002a96:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002a9a:	d112      	bne.n	8002ac2 <HAL_PCD_IRQHandler+0x3a0>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8002a9c:	69fb      	ldr	r3, [r7, #28]
 8002a9e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002aa2:	689b      	ldr	r3, [r3, #8]
 8002aa4:	f003 0301 	and.w	r3, r3, #1
 8002aa8:	2b01      	cmp	r3, #1
 8002aaa:	d102      	bne.n	8002ab2 <HAL_PCD_IRQHandler+0x390>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002aac:	6878      	ldr	r0, [r7, #4]
 8002aae:	f006 fdf1 	bl	8009694 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	695a      	ldr	r2, [r3, #20]
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8002ac0:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    #endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	4618      	mov	r0, r3
 8002ac8:	f003 fbdf 	bl	800628a <USB_ReadInterrupts>
 8002acc:	4603      	mov	r3, r0
 8002ace:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002ad2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002ad6:	f040 80a7 	bne.w	8002c28 <HAL_PCD_IRQHandler+0x506>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002ada:	69fb      	ldr	r3, [r7, #28]
 8002adc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002ae0:	685b      	ldr	r3, [r3, #4]
 8002ae2:	69fa      	ldr	r2, [r7, #28]
 8002ae4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002ae8:	f023 0301 	bic.w	r3, r3, #1
 8002aec:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	2110      	movs	r1, #16
 8002af4:	4618      	mov	r0, r3
 8002af6:	f002 fd17 	bl	8005528 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002afa:	2300      	movs	r3, #0
 8002afc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002afe:	e036      	b.n	8002b6e <HAL_PCD_IRQHandler+0x44c>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8002b00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b02:	015a      	lsls	r2, r3, #5
 8002b04:	69fb      	ldr	r3, [r7, #28]
 8002b06:	4413      	add	r3, r2
 8002b08:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002b0c:	461a      	mov	r2, r3
 8002b0e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002b12:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8002b14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b16:	015a      	lsls	r2, r3, #5
 8002b18:	69fb      	ldr	r3, [r7, #28]
 8002b1a:	4413      	add	r3, r2
 8002b1c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002b24:	0151      	lsls	r1, r2, #5
 8002b26:	69fa      	ldr	r2, [r7, #28]
 8002b28:	440a      	add	r2, r1
 8002b2a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8002b2e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002b32:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8002b34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b36:	015a      	lsls	r2, r3, #5
 8002b38:	69fb      	ldr	r3, [r7, #28]
 8002b3a:	4413      	add	r3, r2
 8002b3c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002b40:	461a      	mov	r2, r3
 8002b42:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002b46:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8002b48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b4a:	015a      	lsls	r2, r3, #5
 8002b4c:	69fb      	ldr	r3, [r7, #28]
 8002b4e:	4413      	add	r3, r2
 8002b50:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002b58:	0151      	lsls	r1, r2, #5
 8002b5a:	69fa      	ldr	r2, [r7, #28]
 8002b5c:	440a      	add	r2, r1
 8002b5e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002b62:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002b66:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002b68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b6a:	3301      	adds	r3, #1
 8002b6c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	685b      	ldr	r3, [r3, #4]
 8002b72:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002b74:	429a      	cmp	r2, r3
 8002b76:	d3c3      	bcc.n	8002b00 <HAL_PCD_IRQHandler+0x3de>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8002b78:	69fb      	ldr	r3, [r7, #28]
 8002b7a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002b7e:	69db      	ldr	r3, [r3, #28]
 8002b80:	69fa      	ldr	r2, [r7, #28]
 8002b82:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002b86:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8002b8a:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d016      	beq.n	8002bc2 <HAL_PCD_IRQHandler+0x4a0>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8002b94:	69fb      	ldr	r3, [r7, #28]
 8002b96:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002b9a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002b9e:	69fa      	ldr	r2, [r7, #28]
 8002ba0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002ba4:	f043 030b 	orr.w	r3, r3, #11
 8002ba8:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8002bac:	69fb      	ldr	r3, [r7, #28]
 8002bae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002bb2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bb4:	69fa      	ldr	r2, [r7, #28]
 8002bb6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002bba:	f043 030b 	orr.w	r3, r3, #11
 8002bbe:	6453      	str	r3, [r2, #68]	; 0x44
 8002bc0:	e015      	b.n	8002bee <HAL_PCD_IRQHandler+0x4cc>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8002bc2:	69fb      	ldr	r3, [r7, #28]
 8002bc4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002bc8:	695b      	ldr	r3, [r3, #20]
 8002bca:	69fa      	ldr	r2, [r7, #28]
 8002bcc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002bd0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002bd4:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8002bd8:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8002bda:	69fb      	ldr	r3, [r7, #28]
 8002bdc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002be0:	691b      	ldr	r3, [r3, #16]
 8002be2:	69fa      	ldr	r2, [r7, #28]
 8002be4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002be8:	f043 030b 	orr.w	r3, r3, #11
 8002bec:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8002bee:	69fb      	ldr	r3, [r7, #28]
 8002bf0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	69fa      	ldr	r2, [r7, #28]
 8002bf8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002bfc:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8002c00:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	6818      	ldr	r0, [r3, #0]
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	691b      	ldr	r3, [r3, #16]
 8002c0a:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002c12:	461a      	mov	r2, r3
 8002c14:	f003 fc10 	bl	8006438 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	695a      	ldr	r2, [r3, #20]
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8002c26:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	4618      	mov	r0, r3
 8002c2e:	f003 fb2c 	bl	800628a <USB_ReadInterrupts>
 8002c32:	4603      	mov	r3, r0
 8002c34:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002c38:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002c3c:	d124      	bne.n	8002c88 <HAL_PCD_IRQHandler+0x566>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	4618      	mov	r0, r3
 8002c44:	f003 fbc2 	bl	80063cc <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	4618      	mov	r0, r3
 8002c4e:	f002 fccc 	bl	80055ea <USB_GetDevSpeed>
 8002c52:	4603      	mov	r3, r0
 8002c54:	461a      	mov	r2, r3
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681c      	ldr	r4, [r3, #0]
 8002c5e:	f001 f997 	bl	8003f90 <HAL_RCC_GetHCLKFreq>
 8002c62:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002c68:	b2db      	uxtb	r3, r3
 8002c6a:	461a      	mov	r2, r3
 8002c6c:	4620      	mov	r0, r4
 8002c6e:	f002 f9fb 	bl	8005068 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8002c72:	6878      	ldr	r0, [r7, #4]
 8002c74:	f006 fce5 	bl	8009642 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	695a      	ldr	r2, [r3, #20]
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8002c86:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	4618      	mov	r0, r3
 8002c8e:	f003 fafc 	bl	800628a <USB_ReadInterrupts>
 8002c92:	4603      	mov	r3, r0
 8002c94:	f003 0310 	and.w	r3, r3, #16
 8002c98:	2b10      	cmp	r3, #16
 8002c9a:	d161      	bne.n	8002d60 <HAL_PCD_IRQHandler+0x63e>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	699a      	ldr	r2, [r3, #24]
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	f022 0210 	bic.w	r2, r2, #16
 8002caa:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8002cac:	6a3b      	ldr	r3, [r7, #32]
 8002cae:	6a1b      	ldr	r3, [r3, #32]
 8002cb0:	613b      	str	r3, [r7, #16]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8002cb2:	693b      	ldr	r3, [r7, #16]
 8002cb4:	f003 020f 	and.w	r2, r3, #15
 8002cb8:	4613      	mov	r3, r2
 8002cba:	00db      	lsls	r3, r3, #3
 8002cbc:	1a9b      	subs	r3, r3, r2
 8002cbe:	009b      	lsls	r3, r3, #2
 8002cc0:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002cc4:	687a      	ldr	r2, [r7, #4]
 8002cc6:	4413      	add	r3, r2
 8002cc8:	3304      	adds	r3, #4
 8002cca:	60fb      	str	r3, [r7, #12]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8002ccc:	693b      	ldr	r3, [r7, #16]
 8002cce:	0c5b      	lsrs	r3, r3, #17
 8002cd0:	f003 030f 	and.w	r3, r3, #15
 8002cd4:	2b02      	cmp	r3, #2
 8002cd6:	d124      	bne.n	8002d22 <HAL_PCD_IRQHandler+0x600>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8002cd8:	693a      	ldr	r2, [r7, #16]
 8002cda:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8002cde:	4013      	ands	r3, r2
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d035      	beq.n	8002d50 <HAL_PCD_IRQHandler+0x62e>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8002ce8:	693b      	ldr	r3, [r7, #16]
 8002cea:	091b      	lsrs	r3, r3, #4
 8002cec:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002cee:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002cf2:	b29b      	uxth	r3, r3
 8002cf4:	461a      	mov	r2, r3
 8002cf6:	6a38      	ldr	r0, [r7, #32]
 8002cf8:	f003 f974 	bl	8005fe4 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	68da      	ldr	r2, [r3, #12]
 8002d00:	693b      	ldr	r3, [r7, #16]
 8002d02:	091b      	lsrs	r3, r3, #4
 8002d04:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002d08:	441a      	add	r2, r3
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	699a      	ldr	r2, [r3, #24]
 8002d12:	693b      	ldr	r3, [r7, #16]
 8002d14:	091b      	lsrs	r3, r3, #4
 8002d16:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002d1a:	441a      	add	r2, r3
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	619a      	str	r2, [r3, #24]
 8002d20:	e016      	b.n	8002d50 <HAL_PCD_IRQHandler+0x62e>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8002d22:	693b      	ldr	r3, [r7, #16]
 8002d24:	0c5b      	lsrs	r3, r3, #17
 8002d26:	f003 030f 	and.w	r3, r3, #15
 8002d2a:	2b06      	cmp	r3, #6
 8002d2c:	d110      	bne.n	8002d50 <HAL_PCD_IRQHandler+0x62e>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002d34:	2208      	movs	r2, #8
 8002d36:	4619      	mov	r1, r3
 8002d38:	6a38      	ldr	r0, [r7, #32]
 8002d3a:	f003 f953 	bl	8005fe4 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	699a      	ldr	r2, [r3, #24]
 8002d42:	693b      	ldr	r3, [r7, #16]
 8002d44:	091b      	lsrs	r3, r3, #4
 8002d46:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002d4a:	441a      	add	r2, r3
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	699a      	ldr	r2, [r3, #24]
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	f042 0210 	orr.w	r2, r2, #16
 8002d5e:	619a      	str	r2, [r3, #24]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	4618      	mov	r0, r3
 8002d66:	f003 fa90 	bl	800628a <USB_ReadInterrupts>
 8002d6a:	4603      	mov	r3, r0
 8002d6c:	f003 0308 	and.w	r3, r3, #8
 8002d70:	2b08      	cmp	r3, #8
 8002d72:	d10a      	bne.n	8002d8a <HAL_PCD_IRQHandler+0x668>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8002d74:	6878      	ldr	r0, [r7, #4]
 8002d76:	f006 fc56 	bl	8009626 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	695a      	ldr	r2, [r3, #20]
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	f002 0208 	and.w	r2, r2, #8
 8002d88:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	4618      	mov	r0, r3
 8002d90:	f003 fa7b 	bl	800628a <USB_ReadInterrupts>
 8002d94:	4603      	mov	r3, r0
 8002d96:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002d9a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002d9e:	d10f      	bne.n	8002dc0 <HAL_PCD_IRQHandler+0x69e>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8002da0:	2300      	movs	r3, #0
 8002da2:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8002da4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002da6:	b2db      	uxtb	r3, r3
 8002da8:	4619      	mov	r1, r3
 8002daa:	6878      	ldr	r0, [r7, #4]
 8002dac:	f006 fcb8 	bl	8009720 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	695a      	ldr	r2, [r3, #20]
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8002dbe:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	4618      	mov	r0, r3
 8002dc6:	f003 fa60 	bl	800628a <USB_ReadInterrupts>
 8002dca:	4603      	mov	r3, r0
 8002dcc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002dd0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002dd4:	d10f      	bne.n	8002df6 <HAL_PCD_IRQHandler+0x6d4>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8002dd6:	2300      	movs	r3, #0
 8002dd8:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8002dda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ddc:	b2db      	uxtb	r3, r3
 8002dde:	4619      	mov	r1, r3
 8002de0:	6878      	ldr	r0, [r7, #4]
 8002de2:	f006 fc8b 	bl	80096fc <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	695a      	ldr	r2, [r3, #20]
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8002df4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	4618      	mov	r0, r3
 8002dfc:	f003 fa45 	bl	800628a <USB_ReadInterrupts>
 8002e00:	4603      	mov	r3, r0
 8002e02:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002e06:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e0a:	d10a      	bne.n	8002e22 <HAL_PCD_IRQHandler+0x700>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8002e0c:	6878      	ldr	r0, [r7, #4]
 8002e0e:	f006 fc99 	bl	8009744 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	695a      	ldr	r2, [r3, #20]
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8002e20:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	4618      	mov	r0, r3
 8002e28:	f003 fa2f 	bl	800628a <USB_ReadInterrupts>
 8002e2c:	4603      	mov	r3, r0
 8002e2e:	f003 0304 	and.w	r3, r3, #4
 8002e32:	2b04      	cmp	r3, #4
 8002e34:	d115      	bne.n	8002e62 <HAL_PCD_IRQHandler+0x740>
    {
      temp = hpcd->Instance->GOTGINT;
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	685b      	ldr	r3, [r3, #4]
 8002e3c:	613b      	str	r3, [r7, #16]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8002e3e:	693b      	ldr	r3, [r7, #16]
 8002e40:	f003 0304 	and.w	r3, r3, #4
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d002      	beq.n	8002e4e <HAL_PCD_IRQHandler+0x72c>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8002e48:	6878      	ldr	r0, [r7, #4]
 8002e4a:	f006 fc89 	bl	8009760 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	6859      	ldr	r1, [r3, #4]
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	693a      	ldr	r2, [r7, #16]
 8002e5a:	430a      	orrs	r2, r1
 8002e5c:	605a      	str	r2, [r3, #4]
 8002e5e:	e000      	b.n	8002e62 <HAL_PCD_IRQHandler+0x740>
      return;
 8002e60:	bf00      	nop
    }
  }
}
 8002e62:	3734      	adds	r7, #52	; 0x34
 8002e64:	46bd      	mov	sp, r7
 8002e66:	bd90      	pop	{r4, r7, pc}

08002e68 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002e68:	b580      	push	{r7, lr}
 8002e6a:	b082      	sub	sp, #8
 8002e6c:	af00      	add	r7, sp, #0
 8002e6e:	6078      	str	r0, [r7, #4]
 8002e70:	460b      	mov	r3, r1
 8002e72:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002e7a:	2b01      	cmp	r3, #1
 8002e7c:	d101      	bne.n	8002e82 <HAL_PCD_SetAddress+0x1a>
 8002e7e:	2302      	movs	r3, #2
 8002e80:	e013      	b.n	8002eaa <HAL_PCD_SetAddress+0x42>
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	2201      	movs	r2, #1
 8002e86:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	78fa      	ldrb	r2, [r7, #3]
 8002e8e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	78fa      	ldrb	r2, [r7, #3]
 8002e98:	4611      	mov	r1, r2
 8002e9a:	4618      	mov	r0, r3
 8002e9c:	f003 f99f 	bl	80061de <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	2200      	movs	r2, #0
 8002ea4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8002ea8:	2300      	movs	r3, #0
}
 8002eaa:	4618      	mov	r0, r3
 8002eac:	3708      	adds	r7, #8
 8002eae:	46bd      	mov	sp, r7
 8002eb0:	bd80      	pop	{r7, pc}

08002eb2 <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 8002eb2:	b580      	push	{r7, lr}
 8002eb4:	b084      	sub	sp, #16
 8002eb6:	af00      	add	r7, sp, #0
 8002eb8:	6078      	str	r0, [r7, #4]
 8002eba:	4608      	mov	r0, r1
 8002ebc:	4611      	mov	r1, r2
 8002ebe:	461a      	mov	r2, r3
 8002ec0:	4603      	mov	r3, r0
 8002ec2:	70fb      	strb	r3, [r7, #3]
 8002ec4:	460b      	mov	r3, r1
 8002ec6:	803b      	strh	r3, [r7, #0]
 8002ec8:	4613      	mov	r3, r2
 8002eca:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002ecc:	2300      	movs	r3, #0
 8002ece:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002ed0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	da0f      	bge.n	8002ef8 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002ed8:	78fb      	ldrb	r3, [r7, #3]
 8002eda:	f003 020f 	and.w	r2, r3, #15
 8002ede:	4613      	mov	r3, r2
 8002ee0:	00db      	lsls	r3, r3, #3
 8002ee2:	1a9b      	subs	r3, r3, r2
 8002ee4:	009b      	lsls	r3, r3, #2
 8002ee6:	3338      	adds	r3, #56	; 0x38
 8002ee8:	687a      	ldr	r2, [r7, #4]
 8002eea:	4413      	add	r3, r2
 8002eec:	3304      	adds	r3, #4
 8002eee:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	2201      	movs	r2, #1
 8002ef4:	705a      	strb	r2, [r3, #1]
 8002ef6:	e00f      	b.n	8002f18 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002ef8:	78fb      	ldrb	r3, [r7, #3]
 8002efa:	f003 020f 	and.w	r2, r3, #15
 8002efe:	4613      	mov	r3, r2
 8002f00:	00db      	lsls	r3, r3, #3
 8002f02:	1a9b      	subs	r3, r3, r2
 8002f04:	009b      	lsls	r3, r3, #2
 8002f06:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002f0a:	687a      	ldr	r2, [r7, #4]
 8002f0c:	4413      	add	r3, r2
 8002f0e:	3304      	adds	r3, #4
 8002f10:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	2200      	movs	r2, #0
 8002f16:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002f18:	78fb      	ldrb	r3, [r7, #3]
 8002f1a:	f003 030f 	and.w	r3, r3, #15
 8002f1e:	b2da      	uxtb	r2, r3
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002f24:	883a      	ldrh	r2, [r7, #0]
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	78ba      	ldrb	r2, [r7, #2]
 8002f2e:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	785b      	ldrb	r3, [r3, #1]
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d004      	beq.n	8002f42 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	781b      	ldrb	r3, [r3, #0]
 8002f3c:	b29a      	uxth	r2, r3
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002f42:	78bb      	ldrb	r3, [r7, #2]
 8002f44:	2b02      	cmp	r3, #2
 8002f46:	d102      	bne.n	8002f4e <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	2200      	movs	r2, #0
 8002f4c:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002f54:	2b01      	cmp	r3, #1
 8002f56:	d101      	bne.n	8002f5c <HAL_PCD_EP_Open+0xaa>
 8002f58:	2302      	movs	r3, #2
 8002f5a:	e00e      	b.n	8002f7a <HAL_PCD_EP_Open+0xc8>
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	2201      	movs	r2, #1
 8002f60:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	68f9      	ldr	r1, [r7, #12]
 8002f6a:	4618      	mov	r0, r3
 8002f6c:	f002 fb62 	bl	8005634 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	2200      	movs	r2, #0
 8002f74:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8002f78:	7afb      	ldrb	r3, [r7, #11]
}
 8002f7a:	4618      	mov	r0, r3
 8002f7c:	3710      	adds	r7, #16
 8002f7e:	46bd      	mov	sp, r7
 8002f80:	bd80      	pop	{r7, pc}

08002f82 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002f82:	b580      	push	{r7, lr}
 8002f84:	b084      	sub	sp, #16
 8002f86:	af00      	add	r7, sp, #0
 8002f88:	6078      	str	r0, [r7, #4]
 8002f8a:	460b      	mov	r3, r1
 8002f8c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002f8e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	da0f      	bge.n	8002fb6 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002f96:	78fb      	ldrb	r3, [r7, #3]
 8002f98:	f003 020f 	and.w	r2, r3, #15
 8002f9c:	4613      	mov	r3, r2
 8002f9e:	00db      	lsls	r3, r3, #3
 8002fa0:	1a9b      	subs	r3, r3, r2
 8002fa2:	009b      	lsls	r3, r3, #2
 8002fa4:	3338      	adds	r3, #56	; 0x38
 8002fa6:	687a      	ldr	r2, [r7, #4]
 8002fa8:	4413      	add	r3, r2
 8002faa:	3304      	adds	r3, #4
 8002fac:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	2201      	movs	r2, #1
 8002fb2:	705a      	strb	r2, [r3, #1]
 8002fb4:	e00f      	b.n	8002fd6 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002fb6:	78fb      	ldrb	r3, [r7, #3]
 8002fb8:	f003 020f 	and.w	r2, r3, #15
 8002fbc:	4613      	mov	r3, r2
 8002fbe:	00db      	lsls	r3, r3, #3
 8002fc0:	1a9b      	subs	r3, r3, r2
 8002fc2:	009b      	lsls	r3, r3, #2
 8002fc4:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002fc8:	687a      	ldr	r2, [r7, #4]
 8002fca:	4413      	add	r3, r2
 8002fcc:	3304      	adds	r3, #4
 8002fce:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	2200      	movs	r2, #0
 8002fd4:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8002fd6:	78fb      	ldrb	r3, [r7, #3]
 8002fd8:	f003 030f 	and.w	r3, r3, #15
 8002fdc:	b2da      	uxtb	r2, r3
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002fe8:	2b01      	cmp	r3, #1
 8002fea:	d101      	bne.n	8002ff0 <HAL_PCD_EP_Close+0x6e>
 8002fec:	2302      	movs	r3, #2
 8002fee:	e00e      	b.n	800300e <HAL_PCD_EP_Close+0x8c>
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	2201      	movs	r2, #1
 8002ff4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	68f9      	ldr	r1, [r7, #12]
 8002ffe:	4618      	mov	r0, r3
 8003000:	f002 fba0 	bl	8005744 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	2200      	movs	r2, #0
 8003008:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 800300c:	2300      	movs	r3, #0
}
 800300e:	4618      	mov	r0, r3
 8003010:	3710      	adds	r7, #16
 8003012:	46bd      	mov	sp, r7
 8003014:	bd80      	pop	{r7, pc}

08003016 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003016:	b580      	push	{r7, lr}
 8003018:	b086      	sub	sp, #24
 800301a:	af00      	add	r7, sp, #0
 800301c:	60f8      	str	r0, [r7, #12]
 800301e:	607a      	str	r2, [r7, #4]
 8003020:	603b      	str	r3, [r7, #0]
 8003022:	460b      	mov	r3, r1
 8003024:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003026:	7afb      	ldrb	r3, [r7, #11]
 8003028:	f003 020f 	and.w	r2, r3, #15
 800302c:	4613      	mov	r3, r2
 800302e:	00db      	lsls	r3, r3, #3
 8003030:	1a9b      	subs	r3, r3, r2
 8003032:	009b      	lsls	r3, r3, #2
 8003034:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003038:	68fa      	ldr	r2, [r7, #12]
 800303a:	4413      	add	r3, r2
 800303c:	3304      	adds	r3, #4
 800303e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003040:	697b      	ldr	r3, [r7, #20]
 8003042:	687a      	ldr	r2, [r7, #4]
 8003044:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8003046:	697b      	ldr	r3, [r7, #20]
 8003048:	683a      	ldr	r2, [r7, #0]
 800304a:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 800304c:	697b      	ldr	r3, [r7, #20]
 800304e:	2200      	movs	r2, #0
 8003050:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8003052:	697b      	ldr	r3, [r7, #20]
 8003054:	2200      	movs	r2, #0
 8003056:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003058:	7afb      	ldrb	r3, [r7, #11]
 800305a:	f003 030f 	and.w	r3, r3, #15
 800305e:	b2da      	uxtb	r2, r3
 8003060:	697b      	ldr	r3, [r7, #20]
 8003062:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	691b      	ldr	r3, [r3, #16]
 8003068:	2b01      	cmp	r3, #1
 800306a:	d102      	bne.n	8003072 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800306c:	687a      	ldr	r2, [r7, #4]
 800306e:	697b      	ldr	r3, [r7, #20]
 8003070:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003072:	7afb      	ldrb	r3, [r7, #11]
 8003074:	f003 030f 	and.w	r3, r3, #15
 8003078:	2b00      	cmp	r3, #0
 800307a:	d109      	bne.n	8003090 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	6818      	ldr	r0, [r3, #0]
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	691b      	ldr	r3, [r3, #16]
 8003084:	b2db      	uxtb	r3, r3
 8003086:	461a      	mov	r2, r3
 8003088:	6979      	ldr	r1, [r7, #20]
 800308a:	f002 fe23 	bl	8005cd4 <USB_EP0StartXfer>
 800308e:	e008      	b.n	80030a2 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	6818      	ldr	r0, [r3, #0]
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	691b      	ldr	r3, [r3, #16]
 8003098:	b2db      	uxtb	r3, r3
 800309a:	461a      	mov	r2, r3
 800309c:	6979      	ldr	r1, [r7, #20]
 800309e:	f002 fbd5 	bl	800584c <USB_EPStartXfer>
  }

  return HAL_OK;
 80030a2:	2300      	movs	r3, #0
}
 80030a4:	4618      	mov	r0, r3
 80030a6:	3718      	adds	r7, #24
 80030a8:	46bd      	mov	sp, r7
 80030aa:	bd80      	pop	{r7, pc}

080030ac <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80030ac:	b480      	push	{r7}
 80030ae:	b083      	sub	sp, #12
 80030b0:	af00      	add	r7, sp, #0
 80030b2:	6078      	str	r0, [r7, #4]
 80030b4:	460b      	mov	r3, r1
 80030b6:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80030b8:	78fb      	ldrb	r3, [r7, #3]
 80030ba:	f003 020f 	and.w	r2, r3, #15
 80030be:	6879      	ldr	r1, [r7, #4]
 80030c0:	4613      	mov	r3, r2
 80030c2:	00db      	lsls	r3, r3, #3
 80030c4:	1a9b      	subs	r3, r3, r2
 80030c6:	009b      	lsls	r3, r3, #2
 80030c8:	440b      	add	r3, r1
 80030ca:	f503 7305 	add.w	r3, r3, #532	; 0x214
 80030ce:	681b      	ldr	r3, [r3, #0]
}
 80030d0:	4618      	mov	r0, r3
 80030d2:	370c      	adds	r7, #12
 80030d4:	46bd      	mov	sp, r7
 80030d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030da:	4770      	bx	lr

080030dc <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80030dc:	b580      	push	{r7, lr}
 80030de:	b086      	sub	sp, #24
 80030e0:	af00      	add	r7, sp, #0
 80030e2:	60f8      	str	r0, [r7, #12]
 80030e4:	607a      	str	r2, [r7, #4]
 80030e6:	603b      	str	r3, [r7, #0]
 80030e8:	460b      	mov	r3, r1
 80030ea:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80030ec:	7afb      	ldrb	r3, [r7, #11]
 80030ee:	f003 020f 	and.w	r2, r3, #15
 80030f2:	4613      	mov	r3, r2
 80030f4:	00db      	lsls	r3, r3, #3
 80030f6:	1a9b      	subs	r3, r3, r2
 80030f8:	009b      	lsls	r3, r3, #2
 80030fa:	3338      	adds	r3, #56	; 0x38
 80030fc:	68fa      	ldr	r2, [r7, #12]
 80030fe:	4413      	add	r3, r2
 8003100:	3304      	adds	r3, #4
 8003102:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003104:	697b      	ldr	r3, [r7, #20]
 8003106:	687a      	ldr	r2, [r7, #4]
 8003108:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800310a:	697b      	ldr	r3, [r7, #20]
 800310c:	683a      	ldr	r2, [r7, #0]
 800310e:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8003110:	697b      	ldr	r3, [r7, #20]
 8003112:	2200      	movs	r2, #0
 8003114:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8003116:	697b      	ldr	r3, [r7, #20]
 8003118:	2201      	movs	r2, #1
 800311a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800311c:	7afb      	ldrb	r3, [r7, #11]
 800311e:	f003 030f 	and.w	r3, r3, #15
 8003122:	b2da      	uxtb	r2, r3
 8003124:	697b      	ldr	r3, [r7, #20]
 8003126:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	691b      	ldr	r3, [r3, #16]
 800312c:	2b01      	cmp	r3, #1
 800312e:	d102      	bne.n	8003136 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003130:	687a      	ldr	r2, [r7, #4]
 8003132:	697b      	ldr	r3, [r7, #20]
 8003134:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003136:	7afb      	ldrb	r3, [r7, #11]
 8003138:	f003 030f 	and.w	r3, r3, #15
 800313c:	2b00      	cmp	r3, #0
 800313e:	d109      	bne.n	8003154 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	6818      	ldr	r0, [r3, #0]
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	691b      	ldr	r3, [r3, #16]
 8003148:	b2db      	uxtb	r3, r3
 800314a:	461a      	mov	r2, r3
 800314c:	6979      	ldr	r1, [r7, #20]
 800314e:	f002 fdc1 	bl	8005cd4 <USB_EP0StartXfer>
 8003152:	e008      	b.n	8003166 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	6818      	ldr	r0, [r3, #0]
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	691b      	ldr	r3, [r3, #16]
 800315c:	b2db      	uxtb	r3, r3
 800315e:	461a      	mov	r2, r3
 8003160:	6979      	ldr	r1, [r7, #20]
 8003162:	f002 fb73 	bl	800584c <USB_EPStartXfer>
  }

  return HAL_OK;
 8003166:	2300      	movs	r3, #0
}
 8003168:	4618      	mov	r0, r3
 800316a:	3718      	adds	r7, #24
 800316c:	46bd      	mov	sp, r7
 800316e:	bd80      	pop	{r7, pc}

08003170 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003170:	b580      	push	{r7, lr}
 8003172:	b084      	sub	sp, #16
 8003174:	af00      	add	r7, sp, #0
 8003176:	6078      	str	r0, [r7, #4]
 8003178:	460b      	mov	r3, r1
 800317a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800317c:	78fb      	ldrb	r3, [r7, #3]
 800317e:	f003 020f 	and.w	r2, r3, #15
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	685b      	ldr	r3, [r3, #4]
 8003186:	429a      	cmp	r2, r3
 8003188:	d901      	bls.n	800318e <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800318a:	2301      	movs	r3, #1
 800318c:	e050      	b.n	8003230 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800318e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003192:	2b00      	cmp	r3, #0
 8003194:	da0f      	bge.n	80031b6 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003196:	78fb      	ldrb	r3, [r7, #3]
 8003198:	f003 020f 	and.w	r2, r3, #15
 800319c:	4613      	mov	r3, r2
 800319e:	00db      	lsls	r3, r3, #3
 80031a0:	1a9b      	subs	r3, r3, r2
 80031a2:	009b      	lsls	r3, r3, #2
 80031a4:	3338      	adds	r3, #56	; 0x38
 80031a6:	687a      	ldr	r2, [r7, #4]
 80031a8:	4413      	add	r3, r2
 80031aa:	3304      	adds	r3, #4
 80031ac:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	2201      	movs	r2, #1
 80031b2:	705a      	strb	r2, [r3, #1]
 80031b4:	e00d      	b.n	80031d2 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80031b6:	78fa      	ldrb	r2, [r7, #3]
 80031b8:	4613      	mov	r3, r2
 80031ba:	00db      	lsls	r3, r3, #3
 80031bc:	1a9b      	subs	r3, r3, r2
 80031be:	009b      	lsls	r3, r3, #2
 80031c0:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80031c4:	687a      	ldr	r2, [r7, #4]
 80031c6:	4413      	add	r3, r2
 80031c8:	3304      	adds	r3, #4
 80031ca:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	2200      	movs	r2, #0
 80031d0:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	2201      	movs	r2, #1
 80031d6:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80031d8:	78fb      	ldrb	r3, [r7, #3]
 80031da:	f003 030f 	and.w	r3, r3, #15
 80031de:	b2da      	uxtb	r2, r3
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80031ea:	2b01      	cmp	r3, #1
 80031ec:	d101      	bne.n	80031f2 <HAL_PCD_EP_SetStall+0x82>
 80031ee:	2302      	movs	r3, #2
 80031f0:	e01e      	b.n	8003230 <HAL_PCD_EP_SetStall+0xc0>
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	2201      	movs	r2, #1
 80031f6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	68f9      	ldr	r1, [r7, #12]
 8003200:	4618      	mov	r0, r3
 8003202:	f002 ff18 	bl	8006036 <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003206:	78fb      	ldrb	r3, [r7, #3]
 8003208:	f003 030f 	and.w	r3, r3, #15
 800320c:	2b00      	cmp	r3, #0
 800320e:	d10a      	bne.n	8003226 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	6818      	ldr	r0, [r3, #0]
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	691b      	ldr	r3, [r3, #16]
 8003218:	b2d9      	uxtb	r1, r3
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003220:	461a      	mov	r2, r3
 8003222:	f003 f909 	bl	8006438 <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd);
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	2200      	movs	r2, #0
 800322a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800322e:	2300      	movs	r3, #0
}
 8003230:	4618      	mov	r0, r3
 8003232:	3710      	adds	r7, #16
 8003234:	46bd      	mov	sp, r7
 8003236:	bd80      	pop	{r7, pc}

08003238 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003238:	b580      	push	{r7, lr}
 800323a:	b084      	sub	sp, #16
 800323c:	af00      	add	r7, sp, #0
 800323e:	6078      	str	r0, [r7, #4]
 8003240:	460b      	mov	r3, r1
 8003242:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003244:	78fb      	ldrb	r3, [r7, #3]
 8003246:	f003 020f 	and.w	r2, r3, #15
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	685b      	ldr	r3, [r3, #4]
 800324e:	429a      	cmp	r2, r3
 8003250:	d901      	bls.n	8003256 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003252:	2301      	movs	r3, #1
 8003254:	e042      	b.n	80032dc <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003256:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800325a:	2b00      	cmp	r3, #0
 800325c:	da0f      	bge.n	800327e <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800325e:	78fb      	ldrb	r3, [r7, #3]
 8003260:	f003 020f 	and.w	r2, r3, #15
 8003264:	4613      	mov	r3, r2
 8003266:	00db      	lsls	r3, r3, #3
 8003268:	1a9b      	subs	r3, r3, r2
 800326a:	009b      	lsls	r3, r3, #2
 800326c:	3338      	adds	r3, #56	; 0x38
 800326e:	687a      	ldr	r2, [r7, #4]
 8003270:	4413      	add	r3, r2
 8003272:	3304      	adds	r3, #4
 8003274:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	2201      	movs	r2, #1
 800327a:	705a      	strb	r2, [r3, #1]
 800327c:	e00f      	b.n	800329e <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800327e:	78fb      	ldrb	r3, [r7, #3]
 8003280:	f003 020f 	and.w	r2, r3, #15
 8003284:	4613      	mov	r3, r2
 8003286:	00db      	lsls	r3, r3, #3
 8003288:	1a9b      	subs	r3, r3, r2
 800328a:	009b      	lsls	r3, r3, #2
 800328c:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003290:	687a      	ldr	r2, [r7, #4]
 8003292:	4413      	add	r3, r2
 8003294:	3304      	adds	r3, #4
 8003296:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	2200      	movs	r2, #0
 800329c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	2200      	movs	r2, #0
 80032a2:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80032a4:	78fb      	ldrb	r3, [r7, #3]
 80032a6:	f003 030f 	and.w	r3, r3, #15
 80032aa:	b2da      	uxtb	r2, r3
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80032b6:	2b01      	cmp	r3, #1
 80032b8:	d101      	bne.n	80032be <HAL_PCD_EP_ClrStall+0x86>
 80032ba:	2302      	movs	r3, #2
 80032bc:	e00e      	b.n	80032dc <HAL_PCD_EP_ClrStall+0xa4>
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	2201      	movs	r2, #1
 80032c2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	68f9      	ldr	r1, [r7, #12]
 80032cc:	4618      	mov	r0, r3
 80032ce:	f002 ff20 	bl	8006112 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	2200      	movs	r2, #0
 80032d6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80032da:	2300      	movs	r3, #0
}
 80032dc:	4618      	mov	r0, r3
 80032de:	3710      	adds	r7, #16
 80032e0:	46bd      	mov	sp, r7
 80032e2:	bd80      	pop	{r7, pc}

080032e4 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80032e4:	b580      	push	{r7, lr}
 80032e6:	b08a      	sub	sp, #40	; 0x28
 80032e8:	af02      	add	r7, sp, #8
 80032ea:	6078      	str	r0, [r7, #4]
 80032ec:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80032f4:	697b      	ldr	r3, [r7, #20]
 80032f6:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80032f8:	683a      	ldr	r2, [r7, #0]
 80032fa:	4613      	mov	r3, r2
 80032fc:	00db      	lsls	r3, r3, #3
 80032fe:	1a9b      	subs	r3, r3, r2
 8003300:	009b      	lsls	r3, r3, #2
 8003302:	3338      	adds	r3, #56	; 0x38
 8003304:	687a      	ldr	r2, [r7, #4]
 8003306:	4413      	add	r3, r2
 8003308:	3304      	adds	r3, #4
 800330a:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	699a      	ldr	r2, [r3, #24]
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	695b      	ldr	r3, [r3, #20]
 8003314:	429a      	cmp	r2, r3
 8003316:	d901      	bls.n	800331c <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8003318:	2301      	movs	r3, #1
 800331a:	e06c      	b.n	80033f6 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	695a      	ldr	r2, [r3, #20]
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	699b      	ldr	r3, [r3, #24]
 8003324:	1ad3      	subs	r3, r2, r3
 8003326:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	689b      	ldr	r3, [r3, #8]
 800332c:	69fa      	ldr	r2, [r7, #28]
 800332e:	429a      	cmp	r2, r3
 8003330:	d902      	bls.n	8003338 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	689b      	ldr	r3, [r3, #8]
 8003336:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8003338:	69fb      	ldr	r3, [r7, #28]
 800333a:	3303      	adds	r3, #3
 800333c:	089b      	lsrs	r3, r3, #2
 800333e:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003340:	e02b      	b.n	800339a <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	695a      	ldr	r2, [r3, #20]
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	699b      	ldr	r3, [r3, #24]
 800334a:	1ad3      	subs	r3, r2, r3
 800334c:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	689b      	ldr	r3, [r3, #8]
 8003352:	69fa      	ldr	r2, [r7, #28]
 8003354:	429a      	cmp	r2, r3
 8003356:	d902      	bls.n	800335e <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	689b      	ldr	r3, [r3, #8]
 800335c:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800335e:	69fb      	ldr	r3, [r7, #28]
 8003360:	3303      	adds	r3, #3
 8003362:	089b      	lsrs	r3, r3, #2
 8003364:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	68d9      	ldr	r1, [r3, #12]
 800336a:	683b      	ldr	r3, [r7, #0]
 800336c:	b2da      	uxtb	r2, r3
 800336e:	69fb      	ldr	r3, [r7, #28]
 8003370:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003376:	b2db      	uxtb	r3, r3
 8003378:	9300      	str	r3, [sp, #0]
 800337a:	4603      	mov	r3, r0
 800337c:	6978      	ldr	r0, [r7, #20]
 800337e:	f002 fdfc 	bl	8005f7a <USB_WritePacket>

    ep->xfer_buff  += len;
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	68da      	ldr	r2, [r3, #12]
 8003386:	69fb      	ldr	r3, [r7, #28]
 8003388:	441a      	add	r2, r3
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	699a      	ldr	r2, [r3, #24]
 8003392:	69fb      	ldr	r3, [r7, #28]
 8003394:	441a      	add	r2, r3
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800339a:	683b      	ldr	r3, [r7, #0]
 800339c:	015a      	lsls	r2, r3, #5
 800339e:	693b      	ldr	r3, [r7, #16]
 80033a0:	4413      	add	r3, r2
 80033a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80033a6:	699b      	ldr	r3, [r3, #24]
 80033a8:	b29b      	uxth	r3, r3
 80033aa:	69ba      	ldr	r2, [r7, #24]
 80033ac:	429a      	cmp	r2, r3
 80033ae:	d809      	bhi.n	80033c4 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	699a      	ldr	r2, [r3, #24]
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80033b8:	429a      	cmp	r2, r3
 80033ba:	d203      	bcs.n	80033c4 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	695b      	ldr	r3, [r3, #20]
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d1be      	bne.n	8003342 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	695a      	ldr	r2, [r3, #20]
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	699b      	ldr	r3, [r3, #24]
 80033cc:	429a      	cmp	r2, r3
 80033ce:	d811      	bhi.n	80033f4 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80033d0:	683b      	ldr	r3, [r7, #0]
 80033d2:	f003 030f 	and.w	r3, r3, #15
 80033d6:	2201      	movs	r2, #1
 80033d8:	fa02 f303 	lsl.w	r3, r2, r3
 80033dc:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80033de:	693b      	ldr	r3, [r7, #16]
 80033e0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80033e4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80033e6:	68bb      	ldr	r3, [r7, #8]
 80033e8:	43db      	mvns	r3, r3
 80033ea:	6939      	ldr	r1, [r7, #16]
 80033ec:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80033f0:	4013      	ands	r3, r2
 80033f2:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 80033f4:	2300      	movs	r3, #0
}
 80033f6:	4618      	mov	r0, r3
 80033f8:	3720      	adds	r7, #32
 80033fa:	46bd      	mov	sp, r7
 80033fc:	bd80      	pop	{r7, pc}
	...

08003400 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003400:	b580      	push	{r7, lr}
 8003402:	b086      	sub	sp, #24
 8003404:	af00      	add	r7, sp, #0
 8003406:	6078      	str	r0, [r7, #4]
 8003408:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003410:	697b      	ldr	r3, [r7, #20]
 8003412:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003414:	697b      	ldr	r3, [r7, #20]
 8003416:	333c      	adds	r3, #60	; 0x3c
 8003418:	3304      	adds	r3, #4
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800341e:	683b      	ldr	r3, [r7, #0]
 8003420:	015a      	lsls	r2, r3, #5
 8003422:	693b      	ldr	r3, [r7, #16]
 8003424:	4413      	add	r3, r2
 8003426:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800342a:	689b      	ldr	r3, [r3, #8]
 800342c:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	691b      	ldr	r3, [r3, #16]
 8003432:	2b01      	cmp	r3, #1
 8003434:	f040 80b3 	bne.w	800359e <PCD_EP_OutXfrComplete_int+0x19e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8003438:	68bb      	ldr	r3, [r7, #8]
 800343a:	f003 0308 	and.w	r3, r3, #8
 800343e:	2b00      	cmp	r3, #0
 8003440:	d028      	beq.n	8003494 <PCD_EP_OutXfrComplete_int+0x94>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	4a70      	ldr	r2, [pc, #448]	; (8003608 <PCD_EP_OutXfrComplete_int+0x208>)
 8003446:	4293      	cmp	r3, r2
 8003448:	d90e      	bls.n	8003468 <PCD_EP_OutXfrComplete_int+0x68>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800344a:	68bb      	ldr	r3, [r7, #8]
 800344c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003450:	2b00      	cmp	r3, #0
 8003452:	d009      	beq.n	8003468 <PCD_EP_OutXfrComplete_int+0x68>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003454:	683b      	ldr	r3, [r7, #0]
 8003456:	015a      	lsls	r2, r3, #5
 8003458:	693b      	ldr	r3, [r7, #16]
 800345a:	4413      	add	r3, r2
 800345c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003460:	461a      	mov	r2, r3
 8003462:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003466:	6093      	str	r3, [r2, #8]

      /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SetupStageCallback(hpcd);
#else
      HAL_PCD_SetupStageCallback(hpcd);
 8003468:	6878      	ldr	r0, [r7, #4]
 800346a:	f006 f895 	bl	8009598 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	6818      	ldr	r0, [r3, #0]
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003478:	461a      	mov	r2, r3
 800347a:	2101      	movs	r1, #1
 800347c:	f002 ffdc 	bl	8006438 <USB_EP0_OutStart>
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8003480:	683b      	ldr	r3, [r7, #0]
 8003482:	015a      	lsls	r2, r3, #5
 8003484:	693b      	ldr	r3, [r7, #16]
 8003486:	4413      	add	r3, r2
 8003488:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800348c:	461a      	mov	r2, r3
 800348e:	2308      	movs	r3, #8
 8003490:	6093      	str	r3, [r2, #8]
 8003492:	e0b3      	b.n	80035fc <PCD_EP_OutXfrComplete_int+0x1fc>
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8003494:	68bb      	ldr	r3, [r7, #8]
 8003496:	f003 0320 	and.w	r3, r3, #32
 800349a:	2b00      	cmp	r3, #0
 800349c:	d009      	beq.n	80034b2 <PCD_EP_OutXfrComplete_int+0xb2>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800349e:	683b      	ldr	r3, [r7, #0]
 80034a0:	015a      	lsls	r2, r3, #5
 80034a2:	693b      	ldr	r3, [r7, #16]
 80034a4:	4413      	add	r3, r2
 80034a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80034aa:	461a      	mov	r2, r3
 80034ac:	2320      	movs	r3, #32
 80034ae:	6093      	str	r3, [r2, #8]
 80034b0:	e0a4      	b.n	80035fc <PCD_EP_OutXfrComplete_int+0x1fc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80034b2:	68bb      	ldr	r3, [r7, #8]
 80034b4:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	f040 809f 	bne.w	80035fc <PCD_EP_OutXfrComplete_int+0x1fc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	4a51      	ldr	r2, [pc, #324]	; (8003608 <PCD_EP_OutXfrComplete_int+0x208>)
 80034c2:	4293      	cmp	r3, r2
 80034c4:	d90f      	bls.n	80034e6 <PCD_EP_OutXfrComplete_int+0xe6>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80034c6:	68bb      	ldr	r3, [r7, #8]
 80034c8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d00a      	beq.n	80034e6 <PCD_EP_OutXfrComplete_int+0xe6>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80034d0:	683b      	ldr	r3, [r7, #0]
 80034d2:	015a      	lsls	r2, r3, #5
 80034d4:	693b      	ldr	r3, [r7, #16]
 80034d6:	4413      	add	r3, r2
 80034d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80034dc:	461a      	mov	r2, r3
 80034de:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80034e2:	6093      	str	r3, [r2, #8]
 80034e4:	e08a      	b.n	80035fc <PCD_EP_OutXfrComplete_int+0x1fc>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 80034e6:	6879      	ldr	r1, [r7, #4]
 80034e8:	683a      	ldr	r2, [r7, #0]
 80034ea:	4613      	mov	r3, r2
 80034ec:	00db      	lsls	r3, r3, #3
 80034ee:	1a9b      	subs	r3, r3, r2
 80034f0:	009b      	lsls	r3, r3, #2
 80034f2:	440b      	add	r3, r1
 80034f4:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80034f8:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80034fa:	683b      	ldr	r3, [r7, #0]
 80034fc:	0159      	lsls	r1, r3, #5
 80034fe:	693b      	ldr	r3, [r7, #16]
 8003500:	440b      	add	r3, r1
 8003502:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003506:	691b      	ldr	r3, [r3, #16]
 8003508:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 800350c:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 800350e:	6878      	ldr	r0, [r7, #4]
 8003510:	683a      	ldr	r2, [r7, #0]
 8003512:	4613      	mov	r3, r2
 8003514:	00db      	lsls	r3, r3, #3
 8003516:	1a9b      	subs	r3, r3, r2
 8003518:	009b      	lsls	r3, r3, #2
 800351a:	4403      	add	r3, r0
 800351c:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8003520:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8003522:	6879      	ldr	r1, [r7, #4]
 8003524:	683a      	ldr	r2, [r7, #0]
 8003526:	4613      	mov	r3, r2
 8003528:	00db      	lsls	r3, r3, #3
 800352a:	1a9b      	subs	r3, r3, r2
 800352c:	009b      	lsls	r3, r3, #2
 800352e:	440b      	add	r3, r1
 8003530:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003534:	6819      	ldr	r1, [r3, #0]
 8003536:	6878      	ldr	r0, [r7, #4]
 8003538:	683a      	ldr	r2, [r7, #0]
 800353a:	4613      	mov	r3, r2
 800353c:	00db      	lsls	r3, r3, #3
 800353e:	1a9b      	subs	r3, r3, r2
 8003540:	009b      	lsls	r3, r3, #2
 8003542:	4403      	add	r3, r0
 8003544:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	4419      	add	r1, r3
 800354c:	6878      	ldr	r0, [r7, #4]
 800354e:	683a      	ldr	r2, [r7, #0]
 8003550:	4613      	mov	r3, r2
 8003552:	00db      	lsls	r3, r3, #3
 8003554:	1a9b      	subs	r3, r3, r2
 8003556:	009b      	lsls	r3, r3, #2
 8003558:	4403      	add	r3, r0
 800355a:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800355e:	6019      	str	r1, [r3, #0]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003560:	683b      	ldr	r3, [r7, #0]
 8003562:	b2db      	uxtb	r3, r3
 8003564:	4619      	mov	r1, r3
 8003566:	6878      	ldr	r0, [r7, #4]
 8003568:	f006 f828 	bl	80095bc <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800356c:	683b      	ldr	r3, [r7, #0]
 800356e:	2b00      	cmp	r3, #0
 8003570:	d144      	bne.n	80035fc <PCD_EP_OutXfrComplete_int+0x1fc>
 8003572:	6879      	ldr	r1, [r7, #4]
 8003574:	683a      	ldr	r2, [r7, #0]
 8003576:	4613      	mov	r3, r2
 8003578:	00db      	lsls	r3, r3, #3
 800357a:	1a9b      	subs	r3, r3, r2
 800357c:	009b      	lsls	r3, r3, #2
 800357e:	440b      	add	r3, r1
 8003580:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	2b00      	cmp	r3, #0
 8003588:	d138      	bne.n	80035fc <PCD_EP_OutXfrComplete_int+0x1fc>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	6818      	ldr	r0, [r3, #0]
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003594:	461a      	mov	r2, r3
 8003596:	2101      	movs	r1, #1
 8003598:	f002 ff4e 	bl	8006438 <USB_EP0_OutStart>
 800359c:	e02e      	b.n	80035fc <PCD_EP_OutXfrComplete_int+0x1fc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	4a1a      	ldr	r2, [pc, #104]	; (800360c <PCD_EP_OutXfrComplete_int+0x20c>)
 80035a2:	4293      	cmp	r3, r2
 80035a4:	d124      	bne.n	80035f0 <PCD_EP_OutXfrComplete_int+0x1f0>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80035a6:	68bb      	ldr	r3, [r7, #8]
 80035a8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d00a      	beq.n	80035c6 <PCD_EP_OutXfrComplete_int+0x1c6>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80035b0:	683b      	ldr	r3, [r7, #0]
 80035b2:	015a      	lsls	r2, r3, #5
 80035b4:	693b      	ldr	r3, [r7, #16]
 80035b6:	4413      	add	r3, r2
 80035b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80035bc:	461a      	mov	r2, r3
 80035be:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80035c2:	6093      	str	r3, [r2, #8]
 80035c4:	e01a      	b.n	80035fc <PCD_EP_OutXfrComplete_int+0x1fc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80035c6:	68bb      	ldr	r3, [r7, #8]
 80035c8:	f003 0320 	and.w	r3, r3, #32
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d008      	beq.n	80035e2 <PCD_EP_OutXfrComplete_int+0x1e2>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80035d0:	683b      	ldr	r3, [r7, #0]
 80035d2:	015a      	lsls	r2, r3, #5
 80035d4:	693b      	ldr	r3, [r7, #16]
 80035d6:	4413      	add	r3, r2
 80035d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80035dc:	461a      	mov	r2, r3
 80035de:	2320      	movs	r3, #32
 80035e0:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80035e2:	683b      	ldr	r3, [r7, #0]
 80035e4:	b2db      	uxtb	r3, r3
 80035e6:	4619      	mov	r1, r3
 80035e8:	6878      	ldr	r0, [r7, #4]
 80035ea:	f005 ffe7 	bl	80095bc <HAL_PCD_DataOutStageCallback>
 80035ee:	e005      	b.n	80035fc <PCD_EP_OutXfrComplete_int+0x1fc>
    else
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80035f0:	683b      	ldr	r3, [r7, #0]
 80035f2:	b2db      	uxtb	r3, r3
 80035f4:	4619      	mov	r1, r3
 80035f6:	6878      	ldr	r0, [r7, #4]
 80035f8:	f005 ffe0 	bl	80095bc <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80035fc:	2300      	movs	r3, #0
}
 80035fe:	4618      	mov	r0, r3
 8003600:	3718      	adds	r7, #24
 8003602:	46bd      	mov	sp, r7
 8003604:	bd80      	pop	{r7, pc}
 8003606:	bf00      	nop
 8003608:	4f54300a 	.word	0x4f54300a
 800360c:	4f54310a 	.word	0x4f54310a

08003610 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003610:	b580      	push	{r7, lr}
 8003612:	b086      	sub	sp, #24
 8003614:	af00      	add	r7, sp, #0
 8003616:	6078      	str	r0, [r7, #4]
 8003618:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003620:	697b      	ldr	r3, [r7, #20]
 8003622:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003624:	697b      	ldr	r3, [r7, #20]
 8003626:	333c      	adds	r3, #60	; 0x3c
 8003628:	3304      	adds	r3, #4
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800362e:	683b      	ldr	r3, [r7, #0]
 8003630:	015a      	lsls	r2, r3, #5
 8003632:	693b      	ldr	r3, [r7, #16]
 8003634:	4413      	add	r3, r2
 8003636:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800363a:	689b      	ldr	r3, [r3, #8]
 800363c:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	691b      	ldr	r3, [r3, #16]
 8003642:	2b01      	cmp	r3, #1
 8003644:	d113      	bne.n	800366e <PCD_EP_OutSetupPacket_int+0x5e>
  {
    /* StupPktRcvd = 1 pending setup packet int */
    if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	4a1f      	ldr	r2, [pc, #124]	; (80036c8 <PCD_EP_OutSetupPacket_int+0xb8>)
 800364a:	4293      	cmp	r3, r2
 800364c:	d922      	bls.n	8003694 <PCD_EP_OutSetupPacket_int+0x84>
        ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800364e:	68bb      	ldr	r3, [r7, #8]
 8003650:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
    if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003654:	2b00      	cmp	r3, #0
 8003656:	d01d      	beq.n	8003694 <PCD_EP_OutSetupPacket_int+0x84>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003658:	683b      	ldr	r3, [r7, #0]
 800365a:	015a      	lsls	r2, r3, #5
 800365c:	693b      	ldr	r3, [r7, #16]
 800365e:	4413      	add	r3, r2
 8003660:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003664:	461a      	mov	r2, r3
 8003666:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800366a:	6093      	str	r3, [r2, #8]
 800366c:	e012      	b.n	8003694 <PCD_EP_OutSetupPacket_int+0x84>
    }
  }
  else
  {
    if ((gSNPSiD == USB_OTG_CORE_ID_310A) &&
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	4a16      	ldr	r2, [pc, #88]	; (80036cc <PCD_EP_OutSetupPacket_int+0xbc>)
 8003672:	4293      	cmp	r3, r2
 8003674:	d10e      	bne.n	8003694 <PCD_EP_OutSetupPacket_int+0x84>
        ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003676:	68bb      	ldr	r3, [r7, #8]
 8003678:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
    if ((gSNPSiD == USB_OTG_CORE_ID_310A) &&
 800367c:	2b00      	cmp	r3, #0
 800367e:	d009      	beq.n	8003694 <PCD_EP_OutSetupPacket_int+0x84>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003680:	683b      	ldr	r3, [r7, #0]
 8003682:	015a      	lsls	r2, r3, #5
 8003684:	693b      	ldr	r3, [r7, #16]
 8003686:	4413      	add	r3, r2
 8003688:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800368c:	461a      	mov	r2, r3
 800368e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003692:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8003694:	6878      	ldr	r0, [r7, #4]
 8003696:	f005 ff7f 	bl	8009598 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	4a0a      	ldr	r2, [pc, #40]	; (80036c8 <PCD_EP_OutSetupPacket_int+0xb8>)
 800369e:	4293      	cmp	r3, r2
 80036a0:	d90c      	bls.n	80036bc <PCD_EP_OutSetupPacket_int+0xac>
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	691b      	ldr	r3, [r3, #16]
 80036a6:	2b01      	cmp	r3, #1
 80036a8:	d108      	bne.n	80036bc <PCD_EP_OutSetupPacket_int+0xac>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	6818      	ldr	r0, [r3, #0]
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80036b4:	461a      	mov	r2, r3
 80036b6:	2101      	movs	r1, #1
 80036b8:	f002 febe 	bl	8006438 <USB_EP0_OutStart>
  }

  return HAL_OK;
 80036bc:	2300      	movs	r3, #0
}
 80036be:	4618      	mov	r0, r3
 80036c0:	3718      	adds	r7, #24
 80036c2:	46bd      	mov	sp, r7
 80036c4:	bd80      	pop	{r7, pc}
 80036c6:	bf00      	nop
 80036c8:	4f54300a 	.word	0x4f54300a
 80036cc:	4f54310a 	.word	0x4f54310a

080036d0 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80036d0:	b480      	push	{r7}
 80036d2:	b085      	sub	sp, #20
 80036d4:	af00      	add	r7, sp, #0
 80036d6:	6078      	str	r0, [r7, #4]
 80036d8:	460b      	mov	r3, r1
 80036da:	70fb      	strb	r3, [r7, #3]
 80036dc:	4613      	mov	r3, r2
 80036de:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036e6:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80036e8:	78fb      	ldrb	r3, [r7, #3]
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d107      	bne.n	80036fe <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80036ee:	883b      	ldrh	r3, [r7, #0]
 80036f0:	0419      	lsls	r1, r3, #16
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	68ba      	ldr	r2, [r7, #8]
 80036f8:	430a      	orrs	r2, r1
 80036fa:	629a      	str	r2, [r3, #40]	; 0x28
 80036fc:	e028      	b.n	8003750 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003704:	0c1b      	lsrs	r3, r3, #16
 8003706:	68ba      	ldr	r2, [r7, #8]
 8003708:	4413      	add	r3, r2
 800370a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800370c:	2300      	movs	r3, #0
 800370e:	73fb      	strb	r3, [r7, #15]
 8003710:	e00d      	b.n	800372e <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681a      	ldr	r2, [r3, #0]
 8003716:	7bfb      	ldrb	r3, [r7, #15]
 8003718:	3340      	adds	r3, #64	; 0x40
 800371a:	009b      	lsls	r3, r3, #2
 800371c:	4413      	add	r3, r2
 800371e:	685b      	ldr	r3, [r3, #4]
 8003720:	0c1b      	lsrs	r3, r3, #16
 8003722:	68ba      	ldr	r2, [r7, #8]
 8003724:	4413      	add	r3, r2
 8003726:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003728:	7bfb      	ldrb	r3, [r7, #15]
 800372a:	3301      	adds	r3, #1
 800372c:	73fb      	strb	r3, [r7, #15]
 800372e:	7bfa      	ldrb	r2, [r7, #15]
 8003730:	78fb      	ldrb	r3, [r7, #3]
 8003732:	3b01      	subs	r3, #1
 8003734:	429a      	cmp	r2, r3
 8003736:	d3ec      	bcc.n	8003712 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8003738:	883b      	ldrh	r3, [r7, #0]
 800373a:	0418      	lsls	r0, r3, #16
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	6819      	ldr	r1, [r3, #0]
 8003740:	78fb      	ldrb	r3, [r7, #3]
 8003742:	3b01      	subs	r3, #1
 8003744:	68ba      	ldr	r2, [r7, #8]
 8003746:	4302      	orrs	r2, r0
 8003748:	3340      	adds	r3, #64	; 0x40
 800374a:	009b      	lsls	r3, r3, #2
 800374c:	440b      	add	r3, r1
 800374e:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8003750:	2300      	movs	r3, #0
}
 8003752:	4618      	mov	r0, r3
 8003754:	3714      	adds	r7, #20
 8003756:	46bd      	mov	sp, r7
 8003758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800375c:	4770      	bx	lr

0800375e <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800375e:	b480      	push	{r7}
 8003760:	b083      	sub	sp, #12
 8003762:	af00      	add	r7, sp, #0
 8003764:	6078      	str	r0, [r7, #4]
 8003766:	460b      	mov	r3, r1
 8003768:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	887a      	ldrh	r2, [r7, #2]
 8003770:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8003772:	2300      	movs	r3, #0
}
 8003774:	4618      	mov	r0, r3
 8003776:	370c      	adds	r7, #12
 8003778:	46bd      	mov	sp, r7
 800377a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800377e:	4770      	bx	lr

08003780 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8003780:	b480      	push	{r7}
 8003782:	b083      	sub	sp, #12
 8003784:	af00      	add	r7, sp, #0
 8003786:	6078      	str	r0, [r7, #4]
 8003788:	460b      	mov	r3, r1
 800378a:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 800378c:	bf00      	nop
 800378e:	370c      	adds	r7, #12
 8003790:	46bd      	mov	sp, r7
 8003792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003796:	4770      	bx	lr

08003798 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003798:	b580      	push	{r7, lr}
 800379a:	b086      	sub	sp, #24
 800379c:	af00      	add	r7, sp, #0
 800379e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d101      	bne.n	80037aa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80037a6:	2301      	movs	r3, #1
 80037a8:	e22d      	b.n	8003c06 <HAL_RCC_OscConfig+0x46e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	f003 0301 	and.w	r3, r3, #1
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d075      	beq.n	80038a2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80037b6:	4ba3      	ldr	r3, [pc, #652]	; (8003a44 <HAL_RCC_OscConfig+0x2ac>)
 80037b8:	689b      	ldr	r3, [r3, #8]
 80037ba:	f003 030c 	and.w	r3, r3, #12
 80037be:	2b04      	cmp	r3, #4
 80037c0:	d00c      	beq.n	80037dc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80037c2:	4ba0      	ldr	r3, [pc, #640]	; (8003a44 <HAL_RCC_OscConfig+0x2ac>)
 80037c4:	689b      	ldr	r3, [r3, #8]
 80037c6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80037ca:	2b08      	cmp	r3, #8
 80037cc:	d112      	bne.n	80037f4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80037ce:	4b9d      	ldr	r3, [pc, #628]	; (8003a44 <HAL_RCC_OscConfig+0x2ac>)
 80037d0:	685b      	ldr	r3, [r3, #4]
 80037d2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80037d6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80037da:	d10b      	bne.n	80037f4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80037dc:	4b99      	ldr	r3, [pc, #612]	; (8003a44 <HAL_RCC_OscConfig+0x2ac>)
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d05b      	beq.n	80038a0 <HAL_RCC_OscConfig+0x108>
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	685b      	ldr	r3, [r3, #4]
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d157      	bne.n	80038a0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80037f0:	2301      	movs	r3, #1
 80037f2:	e208      	b.n	8003c06 <HAL_RCC_OscConfig+0x46e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	685b      	ldr	r3, [r3, #4]
 80037f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80037fc:	d106      	bne.n	800380c <HAL_RCC_OscConfig+0x74>
 80037fe:	4b91      	ldr	r3, [pc, #580]	; (8003a44 <HAL_RCC_OscConfig+0x2ac>)
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	4a90      	ldr	r2, [pc, #576]	; (8003a44 <HAL_RCC_OscConfig+0x2ac>)
 8003804:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003808:	6013      	str	r3, [r2, #0]
 800380a:	e01d      	b.n	8003848 <HAL_RCC_OscConfig+0xb0>
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	685b      	ldr	r3, [r3, #4]
 8003810:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003814:	d10c      	bne.n	8003830 <HAL_RCC_OscConfig+0x98>
 8003816:	4b8b      	ldr	r3, [pc, #556]	; (8003a44 <HAL_RCC_OscConfig+0x2ac>)
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	4a8a      	ldr	r2, [pc, #552]	; (8003a44 <HAL_RCC_OscConfig+0x2ac>)
 800381c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003820:	6013      	str	r3, [r2, #0]
 8003822:	4b88      	ldr	r3, [pc, #544]	; (8003a44 <HAL_RCC_OscConfig+0x2ac>)
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	4a87      	ldr	r2, [pc, #540]	; (8003a44 <HAL_RCC_OscConfig+0x2ac>)
 8003828:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800382c:	6013      	str	r3, [r2, #0]
 800382e:	e00b      	b.n	8003848 <HAL_RCC_OscConfig+0xb0>
 8003830:	4b84      	ldr	r3, [pc, #528]	; (8003a44 <HAL_RCC_OscConfig+0x2ac>)
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	4a83      	ldr	r2, [pc, #524]	; (8003a44 <HAL_RCC_OscConfig+0x2ac>)
 8003836:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800383a:	6013      	str	r3, [r2, #0]
 800383c:	4b81      	ldr	r3, [pc, #516]	; (8003a44 <HAL_RCC_OscConfig+0x2ac>)
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	4a80      	ldr	r2, [pc, #512]	; (8003a44 <HAL_RCC_OscConfig+0x2ac>)
 8003842:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003846:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	685b      	ldr	r3, [r3, #4]
 800384c:	2b00      	cmp	r3, #0
 800384e:	d013      	beq.n	8003878 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003850:	f7fd fe64 	bl	800151c <HAL_GetTick>
 8003854:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003856:	e008      	b.n	800386a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003858:	f7fd fe60 	bl	800151c <HAL_GetTick>
 800385c:	4602      	mov	r2, r0
 800385e:	693b      	ldr	r3, [r7, #16]
 8003860:	1ad3      	subs	r3, r2, r3
 8003862:	2b64      	cmp	r3, #100	; 0x64
 8003864:	d901      	bls.n	800386a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003866:	2303      	movs	r3, #3
 8003868:	e1cd      	b.n	8003c06 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800386a:	4b76      	ldr	r3, [pc, #472]	; (8003a44 <HAL_RCC_OscConfig+0x2ac>)
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003872:	2b00      	cmp	r3, #0
 8003874:	d0f0      	beq.n	8003858 <HAL_RCC_OscConfig+0xc0>
 8003876:	e014      	b.n	80038a2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003878:	f7fd fe50 	bl	800151c <HAL_GetTick>
 800387c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800387e:	e008      	b.n	8003892 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003880:	f7fd fe4c 	bl	800151c <HAL_GetTick>
 8003884:	4602      	mov	r2, r0
 8003886:	693b      	ldr	r3, [r7, #16]
 8003888:	1ad3      	subs	r3, r2, r3
 800388a:	2b64      	cmp	r3, #100	; 0x64
 800388c:	d901      	bls.n	8003892 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800388e:	2303      	movs	r3, #3
 8003890:	e1b9      	b.n	8003c06 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003892:	4b6c      	ldr	r3, [pc, #432]	; (8003a44 <HAL_RCC_OscConfig+0x2ac>)
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800389a:	2b00      	cmp	r3, #0
 800389c:	d1f0      	bne.n	8003880 <HAL_RCC_OscConfig+0xe8>
 800389e:	e000      	b.n	80038a2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80038a0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	f003 0302 	and.w	r3, r3, #2
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d063      	beq.n	8003976 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80038ae:	4b65      	ldr	r3, [pc, #404]	; (8003a44 <HAL_RCC_OscConfig+0x2ac>)
 80038b0:	689b      	ldr	r3, [r3, #8]
 80038b2:	f003 030c 	and.w	r3, r3, #12
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d00b      	beq.n	80038d2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80038ba:	4b62      	ldr	r3, [pc, #392]	; (8003a44 <HAL_RCC_OscConfig+0x2ac>)
 80038bc:	689b      	ldr	r3, [r3, #8]
 80038be:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80038c2:	2b08      	cmp	r3, #8
 80038c4:	d11c      	bne.n	8003900 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80038c6:	4b5f      	ldr	r3, [pc, #380]	; (8003a44 <HAL_RCC_OscConfig+0x2ac>)
 80038c8:	685b      	ldr	r3, [r3, #4]
 80038ca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d116      	bne.n	8003900 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80038d2:	4b5c      	ldr	r3, [pc, #368]	; (8003a44 <HAL_RCC_OscConfig+0x2ac>)
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	f003 0302 	and.w	r3, r3, #2
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d005      	beq.n	80038ea <HAL_RCC_OscConfig+0x152>
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	68db      	ldr	r3, [r3, #12]
 80038e2:	2b01      	cmp	r3, #1
 80038e4:	d001      	beq.n	80038ea <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80038e6:	2301      	movs	r3, #1
 80038e8:	e18d      	b.n	8003c06 <HAL_RCC_OscConfig+0x46e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80038ea:	4b56      	ldr	r3, [pc, #344]	; (8003a44 <HAL_RCC_OscConfig+0x2ac>)
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	691b      	ldr	r3, [r3, #16]
 80038f6:	00db      	lsls	r3, r3, #3
 80038f8:	4952      	ldr	r1, [pc, #328]	; (8003a44 <HAL_RCC_OscConfig+0x2ac>)
 80038fa:	4313      	orrs	r3, r2
 80038fc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80038fe:	e03a      	b.n	8003976 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	68db      	ldr	r3, [r3, #12]
 8003904:	2b00      	cmp	r3, #0
 8003906:	d020      	beq.n	800394a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003908:	4b4f      	ldr	r3, [pc, #316]	; (8003a48 <HAL_RCC_OscConfig+0x2b0>)
 800390a:	2201      	movs	r2, #1
 800390c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800390e:	f7fd fe05 	bl	800151c <HAL_GetTick>
 8003912:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003914:	e008      	b.n	8003928 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003916:	f7fd fe01 	bl	800151c <HAL_GetTick>
 800391a:	4602      	mov	r2, r0
 800391c:	693b      	ldr	r3, [r7, #16]
 800391e:	1ad3      	subs	r3, r2, r3
 8003920:	2b02      	cmp	r3, #2
 8003922:	d901      	bls.n	8003928 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003924:	2303      	movs	r3, #3
 8003926:	e16e      	b.n	8003c06 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003928:	4b46      	ldr	r3, [pc, #280]	; (8003a44 <HAL_RCC_OscConfig+0x2ac>)
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	f003 0302 	and.w	r3, r3, #2
 8003930:	2b00      	cmp	r3, #0
 8003932:	d0f0      	beq.n	8003916 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003934:	4b43      	ldr	r3, [pc, #268]	; (8003a44 <HAL_RCC_OscConfig+0x2ac>)
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	691b      	ldr	r3, [r3, #16]
 8003940:	00db      	lsls	r3, r3, #3
 8003942:	4940      	ldr	r1, [pc, #256]	; (8003a44 <HAL_RCC_OscConfig+0x2ac>)
 8003944:	4313      	orrs	r3, r2
 8003946:	600b      	str	r3, [r1, #0]
 8003948:	e015      	b.n	8003976 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800394a:	4b3f      	ldr	r3, [pc, #252]	; (8003a48 <HAL_RCC_OscConfig+0x2b0>)
 800394c:	2200      	movs	r2, #0
 800394e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003950:	f7fd fde4 	bl	800151c <HAL_GetTick>
 8003954:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003956:	e008      	b.n	800396a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003958:	f7fd fde0 	bl	800151c <HAL_GetTick>
 800395c:	4602      	mov	r2, r0
 800395e:	693b      	ldr	r3, [r7, #16]
 8003960:	1ad3      	subs	r3, r2, r3
 8003962:	2b02      	cmp	r3, #2
 8003964:	d901      	bls.n	800396a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003966:	2303      	movs	r3, #3
 8003968:	e14d      	b.n	8003c06 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800396a:	4b36      	ldr	r3, [pc, #216]	; (8003a44 <HAL_RCC_OscConfig+0x2ac>)
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	f003 0302 	and.w	r3, r3, #2
 8003972:	2b00      	cmp	r3, #0
 8003974:	d1f0      	bne.n	8003958 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	f003 0308 	and.w	r3, r3, #8
 800397e:	2b00      	cmp	r3, #0
 8003980:	d030      	beq.n	80039e4 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	695b      	ldr	r3, [r3, #20]
 8003986:	2b00      	cmp	r3, #0
 8003988:	d016      	beq.n	80039b8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800398a:	4b30      	ldr	r3, [pc, #192]	; (8003a4c <HAL_RCC_OscConfig+0x2b4>)
 800398c:	2201      	movs	r2, #1
 800398e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003990:	f7fd fdc4 	bl	800151c <HAL_GetTick>
 8003994:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003996:	e008      	b.n	80039aa <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003998:	f7fd fdc0 	bl	800151c <HAL_GetTick>
 800399c:	4602      	mov	r2, r0
 800399e:	693b      	ldr	r3, [r7, #16]
 80039a0:	1ad3      	subs	r3, r2, r3
 80039a2:	2b02      	cmp	r3, #2
 80039a4:	d901      	bls.n	80039aa <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80039a6:	2303      	movs	r3, #3
 80039a8:	e12d      	b.n	8003c06 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80039aa:	4b26      	ldr	r3, [pc, #152]	; (8003a44 <HAL_RCC_OscConfig+0x2ac>)
 80039ac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80039ae:	f003 0302 	and.w	r3, r3, #2
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d0f0      	beq.n	8003998 <HAL_RCC_OscConfig+0x200>
 80039b6:	e015      	b.n	80039e4 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80039b8:	4b24      	ldr	r3, [pc, #144]	; (8003a4c <HAL_RCC_OscConfig+0x2b4>)
 80039ba:	2200      	movs	r2, #0
 80039bc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80039be:	f7fd fdad 	bl	800151c <HAL_GetTick>
 80039c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80039c4:	e008      	b.n	80039d8 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80039c6:	f7fd fda9 	bl	800151c <HAL_GetTick>
 80039ca:	4602      	mov	r2, r0
 80039cc:	693b      	ldr	r3, [r7, #16]
 80039ce:	1ad3      	subs	r3, r2, r3
 80039d0:	2b02      	cmp	r3, #2
 80039d2:	d901      	bls.n	80039d8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80039d4:	2303      	movs	r3, #3
 80039d6:	e116      	b.n	8003c06 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80039d8:	4b1a      	ldr	r3, [pc, #104]	; (8003a44 <HAL_RCC_OscConfig+0x2ac>)
 80039da:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80039dc:	f003 0302 	and.w	r3, r3, #2
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d1f0      	bne.n	80039c6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	f003 0304 	and.w	r3, r3, #4
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	f000 80a0 	beq.w	8003b32 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80039f2:	2300      	movs	r3, #0
 80039f4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80039f6:	4b13      	ldr	r3, [pc, #76]	; (8003a44 <HAL_RCC_OscConfig+0x2ac>)
 80039f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d10f      	bne.n	8003a22 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003a02:	2300      	movs	r3, #0
 8003a04:	60fb      	str	r3, [r7, #12]
 8003a06:	4b0f      	ldr	r3, [pc, #60]	; (8003a44 <HAL_RCC_OscConfig+0x2ac>)
 8003a08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a0a:	4a0e      	ldr	r2, [pc, #56]	; (8003a44 <HAL_RCC_OscConfig+0x2ac>)
 8003a0c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a10:	6413      	str	r3, [r2, #64]	; 0x40
 8003a12:	4b0c      	ldr	r3, [pc, #48]	; (8003a44 <HAL_RCC_OscConfig+0x2ac>)
 8003a14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a1a:	60fb      	str	r3, [r7, #12]
 8003a1c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8003a1e:	2301      	movs	r3, #1
 8003a20:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a22:	4b0b      	ldr	r3, [pc, #44]	; (8003a50 <HAL_RCC_OscConfig+0x2b8>)
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d121      	bne.n	8003a72 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003a2e:	4b08      	ldr	r3, [pc, #32]	; (8003a50 <HAL_RCC_OscConfig+0x2b8>)
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	4a07      	ldr	r2, [pc, #28]	; (8003a50 <HAL_RCC_OscConfig+0x2b8>)
 8003a34:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a38:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003a3a:	f7fd fd6f 	bl	800151c <HAL_GetTick>
 8003a3e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a40:	e011      	b.n	8003a66 <HAL_RCC_OscConfig+0x2ce>
 8003a42:	bf00      	nop
 8003a44:	40023800 	.word	0x40023800
 8003a48:	42470000 	.word	0x42470000
 8003a4c:	42470e80 	.word	0x42470e80
 8003a50:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003a54:	f7fd fd62 	bl	800151c <HAL_GetTick>
 8003a58:	4602      	mov	r2, r0
 8003a5a:	693b      	ldr	r3, [r7, #16]
 8003a5c:	1ad3      	subs	r3, r2, r3
 8003a5e:	2b02      	cmp	r3, #2
 8003a60:	d901      	bls.n	8003a66 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8003a62:	2303      	movs	r3, #3
 8003a64:	e0cf      	b.n	8003c06 <HAL_RCC_OscConfig+0x46e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a66:	4b6a      	ldr	r3, [pc, #424]	; (8003c10 <HAL_RCC_OscConfig+0x478>)
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d0f0      	beq.n	8003a54 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	689b      	ldr	r3, [r3, #8]
 8003a76:	2b01      	cmp	r3, #1
 8003a78:	d106      	bne.n	8003a88 <HAL_RCC_OscConfig+0x2f0>
 8003a7a:	4b66      	ldr	r3, [pc, #408]	; (8003c14 <HAL_RCC_OscConfig+0x47c>)
 8003a7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a7e:	4a65      	ldr	r2, [pc, #404]	; (8003c14 <HAL_RCC_OscConfig+0x47c>)
 8003a80:	f043 0301 	orr.w	r3, r3, #1
 8003a84:	6713      	str	r3, [r2, #112]	; 0x70
 8003a86:	e01c      	b.n	8003ac2 <HAL_RCC_OscConfig+0x32a>
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	689b      	ldr	r3, [r3, #8]
 8003a8c:	2b05      	cmp	r3, #5
 8003a8e:	d10c      	bne.n	8003aaa <HAL_RCC_OscConfig+0x312>
 8003a90:	4b60      	ldr	r3, [pc, #384]	; (8003c14 <HAL_RCC_OscConfig+0x47c>)
 8003a92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a94:	4a5f      	ldr	r2, [pc, #380]	; (8003c14 <HAL_RCC_OscConfig+0x47c>)
 8003a96:	f043 0304 	orr.w	r3, r3, #4
 8003a9a:	6713      	str	r3, [r2, #112]	; 0x70
 8003a9c:	4b5d      	ldr	r3, [pc, #372]	; (8003c14 <HAL_RCC_OscConfig+0x47c>)
 8003a9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003aa0:	4a5c      	ldr	r2, [pc, #368]	; (8003c14 <HAL_RCC_OscConfig+0x47c>)
 8003aa2:	f043 0301 	orr.w	r3, r3, #1
 8003aa6:	6713      	str	r3, [r2, #112]	; 0x70
 8003aa8:	e00b      	b.n	8003ac2 <HAL_RCC_OscConfig+0x32a>
 8003aaa:	4b5a      	ldr	r3, [pc, #360]	; (8003c14 <HAL_RCC_OscConfig+0x47c>)
 8003aac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003aae:	4a59      	ldr	r2, [pc, #356]	; (8003c14 <HAL_RCC_OscConfig+0x47c>)
 8003ab0:	f023 0301 	bic.w	r3, r3, #1
 8003ab4:	6713      	str	r3, [r2, #112]	; 0x70
 8003ab6:	4b57      	ldr	r3, [pc, #348]	; (8003c14 <HAL_RCC_OscConfig+0x47c>)
 8003ab8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003aba:	4a56      	ldr	r2, [pc, #344]	; (8003c14 <HAL_RCC_OscConfig+0x47c>)
 8003abc:	f023 0304 	bic.w	r3, r3, #4
 8003ac0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	689b      	ldr	r3, [r3, #8]
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d015      	beq.n	8003af6 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003aca:	f7fd fd27 	bl	800151c <HAL_GetTick>
 8003ace:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ad0:	e00a      	b.n	8003ae8 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003ad2:	f7fd fd23 	bl	800151c <HAL_GetTick>
 8003ad6:	4602      	mov	r2, r0
 8003ad8:	693b      	ldr	r3, [r7, #16]
 8003ada:	1ad3      	subs	r3, r2, r3
 8003adc:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ae0:	4293      	cmp	r3, r2
 8003ae2:	d901      	bls.n	8003ae8 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8003ae4:	2303      	movs	r3, #3
 8003ae6:	e08e      	b.n	8003c06 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ae8:	4b4a      	ldr	r3, [pc, #296]	; (8003c14 <HAL_RCC_OscConfig+0x47c>)
 8003aea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003aec:	f003 0302 	and.w	r3, r3, #2
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d0ee      	beq.n	8003ad2 <HAL_RCC_OscConfig+0x33a>
 8003af4:	e014      	b.n	8003b20 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003af6:	f7fd fd11 	bl	800151c <HAL_GetTick>
 8003afa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003afc:	e00a      	b.n	8003b14 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003afe:	f7fd fd0d 	bl	800151c <HAL_GetTick>
 8003b02:	4602      	mov	r2, r0
 8003b04:	693b      	ldr	r3, [r7, #16]
 8003b06:	1ad3      	subs	r3, r2, r3
 8003b08:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b0c:	4293      	cmp	r3, r2
 8003b0e:	d901      	bls.n	8003b14 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8003b10:	2303      	movs	r3, #3
 8003b12:	e078      	b.n	8003c06 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003b14:	4b3f      	ldr	r3, [pc, #252]	; (8003c14 <HAL_RCC_OscConfig+0x47c>)
 8003b16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b18:	f003 0302 	and.w	r3, r3, #2
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d1ee      	bne.n	8003afe <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003b20:	7dfb      	ldrb	r3, [r7, #23]
 8003b22:	2b01      	cmp	r3, #1
 8003b24:	d105      	bne.n	8003b32 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003b26:	4b3b      	ldr	r3, [pc, #236]	; (8003c14 <HAL_RCC_OscConfig+0x47c>)
 8003b28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b2a:	4a3a      	ldr	r2, [pc, #232]	; (8003c14 <HAL_RCC_OscConfig+0x47c>)
 8003b2c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003b30:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	699b      	ldr	r3, [r3, #24]
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d064      	beq.n	8003c04 <HAL_RCC_OscConfig+0x46c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003b3a:	4b36      	ldr	r3, [pc, #216]	; (8003c14 <HAL_RCC_OscConfig+0x47c>)
 8003b3c:	689b      	ldr	r3, [r3, #8]
 8003b3e:	f003 030c 	and.w	r3, r3, #12
 8003b42:	2b08      	cmp	r3, #8
 8003b44:	d05c      	beq.n	8003c00 <HAL_RCC_OscConfig+0x468>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	699b      	ldr	r3, [r3, #24]
 8003b4a:	2b02      	cmp	r3, #2
 8003b4c:	d141      	bne.n	8003bd2 <HAL_RCC_OscConfig+0x43a>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003b4e:	4b32      	ldr	r3, [pc, #200]	; (8003c18 <HAL_RCC_OscConfig+0x480>)
 8003b50:	2200      	movs	r2, #0
 8003b52:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b54:	f7fd fce2 	bl	800151c <HAL_GetTick>
 8003b58:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b5a:	e008      	b.n	8003b6e <HAL_RCC_OscConfig+0x3d6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003b5c:	f7fd fcde 	bl	800151c <HAL_GetTick>
 8003b60:	4602      	mov	r2, r0
 8003b62:	693b      	ldr	r3, [r7, #16]
 8003b64:	1ad3      	subs	r3, r2, r3
 8003b66:	2b02      	cmp	r3, #2
 8003b68:	d901      	bls.n	8003b6e <HAL_RCC_OscConfig+0x3d6>
          {
            return HAL_TIMEOUT;
 8003b6a:	2303      	movs	r3, #3
 8003b6c:	e04b      	b.n	8003c06 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b6e:	4b29      	ldr	r3, [pc, #164]	; (8003c14 <HAL_RCC_OscConfig+0x47c>)
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d1f0      	bne.n	8003b5c <HAL_RCC_OscConfig+0x3c4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	69da      	ldr	r2, [r3, #28]
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	6a1b      	ldr	r3, [r3, #32]
 8003b82:	431a      	orrs	r2, r3
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b88:	019b      	lsls	r3, r3, #6
 8003b8a:	431a      	orrs	r2, r3
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b90:	085b      	lsrs	r3, r3, #1
 8003b92:	3b01      	subs	r3, #1
 8003b94:	041b      	lsls	r3, r3, #16
 8003b96:	431a      	orrs	r2, r3
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b9c:	061b      	lsls	r3, r3, #24
 8003b9e:	491d      	ldr	r1, [pc, #116]	; (8003c14 <HAL_RCC_OscConfig+0x47c>)
 8003ba0:	4313      	orrs	r3, r2
 8003ba2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003ba4:	4b1c      	ldr	r3, [pc, #112]	; (8003c18 <HAL_RCC_OscConfig+0x480>)
 8003ba6:	2201      	movs	r2, #1
 8003ba8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003baa:	f7fd fcb7 	bl	800151c <HAL_GetTick>
 8003bae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003bb0:	e008      	b.n	8003bc4 <HAL_RCC_OscConfig+0x42c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003bb2:	f7fd fcb3 	bl	800151c <HAL_GetTick>
 8003bb6:	4602      	mov	r2, r0
 8003bb8:	693b      	ldr	r3, [r7, #16]
 8003bba:	1ad3      	subs	r3, r2, r3
 8003bbc:	2b02      	cmp	r3, #2
 8003bbe:	d901      	bls.n	8003bc4 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 8003bc0:	2303      	movs	r3, #3
 8003bc2:	e020      	b.n	8003c06 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003bc4:	4b13      	ldr	r3, [pc, #76]	; (8003c14 <HAL_RCC_OscConfig+0x47c>)
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d0f0      	beq.n	8003bb2 <HAL_RCC_OscConfig+0x41a>
 8003bd0:	e018      	b.n	8003c04 <HAL_RCC_OscConfig+0x46c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003bd2:	4b11      	ldr	r3, [pc, #68]	; (8003c18 <HAL_RCC_OscConfig+0x480>)
 8003bd4:	2200      	movs	r2, #0
 8003bd6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003bd8:	f7fd fca0 	bl	800151c <HAL_GetTick>
 8003bdc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003bde:	e008      	b.n	8003bf2 <HAL_RCC_OscConfig+0x45a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003be0:	f7fd fc9c 	bl	800151c <HAL_GetTick>
 8003be4:	4602      	mov	r2, r0
 8003be6:	693b      	ldr	r3, [r7, #16]
 8003be8:	1ad3      	subs	r3, r2, r3
 8003bea:	2b02      	cmp	r3, #2
 8003bec:	d901      	bls.n	8003bf2 <HAL_RCC_OscConfig+0x45a>
          {
            return HAL_TIMEOUT;
 8003bee:	2303      	movs	r3, #3
 8003bf0:	e009      	b.n	8003c06 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003bf2:	4b08      	ldr	r3, [pc, #32]	; (8003c14 <HAL_RCC_OscConfig+0x47c>)
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d1f0      	bne.n	8003be0 <HAL_RCC_OscConfig+0x448>
 8003bfe:	e001      	b.n	8003c04 <HAL_RCC_OscConfig+0x46c>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8003c00:	2301      	movs	r3, #1
 8003c02:	e000      	b.n	8003c06 <HAL_RCC_OscConfig+0x46e>
    }
  }
  return HAL_OK;
 8003c04:	2300      	movs	r3, #0
}
 8003c06:	4618      	mov	r0, r3
 8003c08:	3718      	adds	r7, #24
 8003c0a:	46bd      	mov	sp, r7
 8003c0c:	bd80      	pop	{r7, pc}
 8003c0e:	bf00      	nop
 8003c10:	40007000 	.word	0x40007000
 8003c14:	40023800 	.word	0x40023800
 8003c18:	42470060 	.word	0x42470060

08003c1c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003c1c:	b580      	push	{r7, lr}
 8003c1e:	b084      	sub	sp, #16
 8003c20:	af00      	add	r7, sp, #0
 8003c22:	6078      	str	r0, [r7, #4]
 8003c24:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d101      	bne.n	8003c30 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003c2c:	2301      	movs	r3, #1
 8003c2e:	e0ca      	b.n	8003dc6 <HAL_RCC_ClockConfig+0x1aa>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003c30:	4b67      	ldr	r3, [pc, #412]	; (8003dd0 <HAL_RCC_ClockConfig+0x1b4>)
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	f003 030f 	and.w	r3, r3, #15
 8003c38:	683a      	ldr	r2, [r7, #0]
 8003c3a:	429a      	cmp	r2, r3
 8003c3c:	d90c      	bls.n	8003c58 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c3e:	4b64      	ldr	r3, [pc, #400]	; (8003dd0 <HAL_RCC_ClockConfig+0x1b4>)
 8003c40:	683a      	ldr	r2, [r7, #0]
 8003c42:	b2d2      	uxtb	r2, r2
 8003c44:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c46:	4b62      	ldr	r3, [pc, #392]	; (8003dd0 <HAL_RCC_ClockConfig+0x1b4>)
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	f003 030f 	and.w	r3, r3, #15
 8003c4e:	683a      	ldr	r2, [r7, #0]
 8003c50:	429a      	cmp	r2, r3
 8003c52:	d001      	beq.n	8003c58 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003c54:	2301      	movs	r3, #1
 8003c56:	e0b6      	b.n	8003dc6 <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	f003 0302 	and.w	r3, r3, #2
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d020      	beq.n	8003ca6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	f003 0304 	and.w	r3, r3, #4
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d005      	beq.n	8003c7c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003c70:	4b58      	ldr	r3, [pc, #352]	; (8003dd4 <HAL_RCC_ClockConfig+0x1b8>)
 8003c72:	689b      	ldr	r3, [r3, #8]
 8003c74:	4a57      	ldr	r2, [pc, #348]	; (8003dd4 <HAL_RCC_ClockConfig+0x1b8>)
 8003c76:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003c7a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	f003 0308 	and.w	r3, r3, #8
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d005      	beq.n	8003c94 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003c88:	4b52      	ldr	r3, [pc, #328]	; (8003dd4 <HAL_RCC_ClockConfig+0x1b8>)
 8003c8a:	689b      	ldr	r3, [r3, #8]
 8003c8c:	4a51      	ldr	r2, [pc, #324]	; (8003dd4 <HAL_RCC_ClockConfig+0x1b8>)
 8003c8e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003c92:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003c94:	4b4f      	ldr	r3, [pc, #316]	; (8003dd4 <HAL_RCC_ClockConfig+0x1b8>)
 8003c96:	689b      	ldr	r3, [r3, #8]
 8003c98:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	689b      	ldr	r3, [r3, #8]
 8003ca0:	494c      	ldr	r1, [pc, #304]	; (8003dd4 <HAL_RCC_ClockConfig+0x1b8>)
 8003ca2:	4313      	orrs	r3, r2
 8003ca4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	f003 0301 	and.w	r3, r3, #1
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d044      	beq.n	8003d3c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	685b      	ldr	r3, [r3, #4]
 8003cb6:	2b01      	cmp	r3, #1
 8003cb8:	d107      	bne.n	8003cca <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003cba:	4b46      	ldr	r3, [pc, #280]	; (8003dd4 <HAL_RCC_ClockConfig+0x1b8>)
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d119      	bne.n	8003cfa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003cc6:	2301      	movs	r3, #1
 8003cc8:	e07d      	b.n	8003dc6 <HAL_RCC_ClockConfig+0x1aa>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	685b      	ldr	r3, [r3, #4]
 8003cce:	2b02      	cmp	r3, #2
 8003cd0:	d003      	beq.n	8003cda <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003cd6:	2b03      	cmp	r3, #3
 8003cd8:	d107      	bne.n	8003cea <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003cda:	4b3e      	ldr	r3, [pc, #248]	; (8003dd4 <HAL_RCC_ClockConfig+0x1b8>)
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d109      	bne.n	8003cfa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003ce6:	2301      	movs	r3, #1
 8003ce8:	e06d      	b.n	8003dc6 <HAL_RCC_ClockConfig+0x1aa>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003cea:	4b3a      	ldr	r3, [pc, #232]	; (8003dd4 <HAL_RCC_ClockConfig+0x1b8>)
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	f003 0302 	and.w	r3, r3, #2
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d101      	bne.n	8003cfa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003cf6:	2301      	movs	r3, #1
 8003cf8:	e065      	b.n	8003dc6 <HAL_RCC_ClockConfig+0x1aa>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003cfa:	4b36      	ldr	r3, [pc, #216]	; (8003dd4 <HAL_RCC_ClockConfig+0x1b8>)
 8003cfc:	689b      	ldr	r3, [r3, #8]
 8003cfe:	f023 0203 	bic.w	r2, r3, #3
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	685b      	ldr	r3, [r3, #4]
 8003d06:	4933      	ldr	r1, [pc, #204]	; (8003dd4 <HAL_RCC_ClockConfig+0x1b8>)
 8003d08:	4313      	orrs	r3, r2
 8003d0a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003d0c:	f7fd fc06 	bl	800151c <HAL_GetTick>
 8003d10:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d12:	e00a      	b.n	8003d2a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003d14:	f7fd fc02 	bl	800151c <HAL_GetTick>
 8003d18:	4602      	mov	r2, r0
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	1ad3      	subs	r3, r2, r3
 8003d1e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d22:	4293      	cmp	r3, r2
 8003d24:	d901      	bls.n	8003d2a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003d26:	2303      	movs	r3, #3
 8003d28:	e04d      	b.n	8003dc6 <HAL_RCC_ClockConfig+0x1aa>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d2a:	4b2a      	ldr	r3, [pc, #168]	; (8003dd4 <HAL_RCC_ClockConfig+0x1b8>)
 8003d2c:	689b      	ldr	r3, [r3, #8]
 8003d2e:	f003 020c 	and.w	r2, r3, #12
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	685b      	ldr	r3, [r3, #4]
 8003d36:	009b      	lsls	r3, r3, #2
 8003d38:	429a      	cmp	r2, r3
 8003d3a:	d1eb      	bne.n	8003d14 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003d3c:	4b24      	ldr	r3, [pc, #144]	; (8003dd0 <HAL_RCC_ClockConfig+0x1b4>)
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	f003 030f 	and.w	r3, r3, #15
 8003d44:	683a      	ldr	r2, [r7, #0]
 8003d46:	429a      	cmp	r2, r3
 8003d48:	d20c      	bcs.n	8003d64 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d4a:	4b21      	ldr	r3, [pc, #132]	; (8003dd0 <HAL_RCC_ClockConfig+0x1b4>)
 8003d4c:	683a      	ldr	r2, [r7, #0]
 8003d4e:	b2d2      	uxtb	r2, r2
 8003d50:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d52:	4b1f      	ldr	r3, [pc, #124]	; (8003dd0 <HAL_RCC_ClockConfig+0x1b4>)
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	f003 030f 	and.w	r3, r3, #15
 8003d5a:	683a      	ldr	r2, [r7, #0]
 8003d5c:	429a      	cmp	r2, r3
 8003d5e:	d001      	beq.n	8003d64 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003d60:	2301      	movs	r3, #1
 8003d62:	e030      	b.n	8003dc6 <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	f003 0304 	and.w	r3, r3, #4
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d008      	beq.n	8003d82 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003d70:	4b18      	ldr	r3, [pc, #96]	; (8003dd4 <HAL_RCC_ClockConfig+0x1b8>)
 8003d72:	689b      	ldr	r3, [r3, #8]
 8003d74:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	68db      	ldr	r3, [r3, #12]
 8003d7c:	4915      	ldr	r1, [pc, #84]	; (8003dd4 <HAL_RCC_ClockConfig+0x1b8>)
 8003d7e:	4313      	orrs	r3, r2
 8003d80:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	f003 0308 	and.w	r3, r3, #8
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d009      	beq.n	8003da2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003d8e:	4b11      	ldr	r3, [pc, #68]	; (8003dd4 <HAL_RCC_ClockConfig+0x1b8>)
 8003d90:	689b      	ldr	r3, [r3, #8]
 8003d92:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	691b      	ldr	r3, [r3, #16]
 8003d9a:	00db      	lsls	r3, r3, #3
 8003d9c:	490d      	ldr	r1, [pc, #52]	; (8003dd4 <HAL_RCC_ClockConfig+0x1b8>)
 8003d9e:	4313      	orrs	r3, r2
 8003da0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003da2:	f000 f81d 	bl	8003de0 <HAL_RCC_GetSysClockFreq>
 8003da6:	4601      	mov	r1, r0
 8003da8:	4b0a      	ldr	r3, [pc, #40]	; (8003dd4 <HAL_RCC_ClockConfig+0x1b8>)
 8003daa:	689b      	ldr	r3, [r3, #8]
 8003dac:	091b      	lsrs	r3, r3, #4
 8003dae:	f003 030f 	and.w	r3, r3, #15
 8003db2:	4a09      	ldr	r2, [pc, #36]	; (8003dd8 <HAL_RCC_ClockConfig+0x1bc>)
 8003db4:	5cd3      	ldrb	r3, [r2, r3]
 8003db6:	fa21 f303 	lsr.w	r3, r1, r3
 8003dba:	4a08      	ldr	r2, [pc, #32]	; (8003ddc <HAL_RCC_ClockConfig+0x1c0>)
 8003dbc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (TICK_INT_PRIORITY);
 8003dbe:	2000      	movs	r0, #0
 8003dc0:	f7fd f954 	bl	800106c <HAL_InitTick>

  return HAL_OK;
 8003dc4:	2300      	movs	r3, #0
}
 8003dc6:	4618      	mov	r0, r3
 8003dc8:	3710      	adds	r7, #16
 8003dca:	46bd      	mov	sp, r7
 8003dcc:	bd80      	pop	{r7, pc}
 8003dce:	bf00      	nop
 8003dd0:	40023c00 	.word	0x40023c00
 8003dd4:	40023800 	.word	0x40023800
 8003dd8:	08009e20 	.word	0x08009e20
 8003ddc:	20000000 	.word	0x20000000

08003de0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003de0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003de2:	b085      	sub	sp, #20
 8003de4:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003de6:	2300      	movs	r3, #0
 8003de8:	607b      	str	r3, [r7, #4]
 8003dea:	2300      	movs	r3, #0
 8003dec:	60fb      	str	r3, [r7, #12]
 8003dee:	2300      	movs	r3, #0
 8003df0:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8003df2:	2300      	movs	r3, #0
 8003df4:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003df6:	4b63      	ldr	r3, [pc, #396]	; (8003f84 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003df8:	689b      	ldr	r3, [r3, #8]
 8003dfa:	f003 030c 	and.w	r3, r3, #12
 8003dfe:	2b04      	cmp	r3, #4
 8003e00:	d007      	beq.n	8003e12 <HAL_RCC_GetSysClockFreq+0x32>
 8003e02:	2b08      	cmp	r3, #8
 8003e04:	d008      	beq.n	8003e18 <HAL_RCC_GetSysClockFreq+0x38>
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	f040 80b4 	bne.w	8003f74 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003e0c:	4b5e      	ldr	r3, [pc, #376]	; (8003f88 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8003e0e:	60bb      	str	r3, [r7, #8]
       break;
 8003e10:	e0b3      	b.n	8003f7a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003e12:	4b5e      	ldr	r3, [pc, #376]	; (8003f8c <HAL_RCC_GetSysClockFreq+0x1ac>)
 8003e14:	60bb      	str	r3, [r7, #8]
      break;
 8003e16:	e0b0      	b.n	8003f7a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003e18:	4b5a      	ldr	r3, [pc, #360]	; (8003f84 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003e1a:	685b      	ldr	r3, [r3, #4]
 8003e1c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003e20:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003e22:	4b58      	ldr	r3, [pc, #352]	; (8003f84 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003e24:	685b      	ldr	r3, [r3, #4]
 8003e26:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d04a      	beq.n	8003ec4 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003e2e:	4b55      	ldr	r3, [pc, #340]	; (8003f84 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003e30:	685b      	ldr	r3, [r3, #4]
 8003e32:	099b      	lsrs	r3, r3, #6
 8003e34:	f04f 0400 	mov.w	r4, #0
 8003e38:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003e3c:	f04f 0200 	mov.w	r2, #0
 8003e40:	ea03 0501 	and.w	r5, r3, r1
 8003e44:	ea04 0602 	and.w	r6, r4, r2
 8003e48:	4629      	mov	r1, r5
 8003e4a:	4632      	mov	r2, r6
 8003e4c:	f04f 0300 	mov.w	r3, #0
 8003e50:	f04f 0400 	mov.w	r4, #0
 8003e54:	0154      	lsls	r4, r2, #5
 8003e56:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003e5a:	014b      	lsls	r3, r1, #5
 8003e5c:	4619      	mov	r1, r3
 8003e5e:	4622      	mov	r2, r4
 8003e60:	1b49      	subs	r1, r1, r5
 8003e62:	eb62 0206 	sbc.w	r2, r2, r6
 8003e66:	f04f 0300 	mov.w	r3, #0
 8003e6a:	f04f 0400 	mov.w	r4, #0
 8003e6e:	0194      	lsls	r4, r2, #6
 8003e70:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8003e74:	018b      	lsls	r3, r1, #6
 8003e76:	1a5b      	subs	r3, r3, r1
 8003e78:	eb64 0402 	sbc.w	r4, r4, r2
 8003e7c:	f04f 0100 	mov.w	r1, #0
 8003e80:	f04f 0200 	mov.w	r2, #0
 8003e84:	00e2      	lsls	r2, r4, #3
 8003e86:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003e8a:	00d9      	lsls	r1, r3, #3
 8003e8c:	460b      	mov	r3, r1
 8003e8e:	4614      	mov	r4, r2
 8003e90:	195b      	adds	r3, r3, r5
 8003e92:	eb44 0406 	adc.w	r4, r4, r6
 8003e96:	f04f 0100 	mov.w	r1, #0
 8003e9a:	f04f 0200 	mov.w	r2, #0
 8003e9e:	0262      	lsls	r2, r4, #9
 8003ea0:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8003ea4:	0259      	lsls	r1, r3, #9
 8003ea6:	460b      	mov	r3, r1
 8003ea8:	4614      	mov	r4, r2
 8003eaa:	4618      	mov	r0, r3
 8003eac:	4621      	mov	r1, r4
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	f04f 0400 	mov.w	r4, #0
 8003eb4:	461a      	mov	r2, r3
 8003eb6:	4623      	mov	r3, r4
 8003eb8:	f7fc f99a 	bl	80001f0 <__aeabi_uldivmod>
 8003ebc:	4603      	mov	r3, r0
 8003ebe:	460c      	mov	r4, r1
 8003ec0:	60fb      	str	r3, [r7, #12]
 8003ec2:	e049      	b.n	8003f58 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003ec4:	4b2f      	ldr	r3, [pc, #188]	; (8003f84 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003ec6:	685b      	ldr	r3, [r3, #4]
 8003ec8:	099b      	lsrs	r3, r3, #6
 8003eca:	f04f 0400 	mov.w	r4, #0
 8003ece:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003ed2:	f04f 0200 	mov.w	r2, #0
 8003ed6:	ea03 0501 	and.w	r5, r3, r1
 8003eda:	ea04 0602 	and.w	r6, r4, r2
 8003ede:	4629      	mov	r1, r5
 8003ee0:	4632      	mov	r2, r6
 8003ee2:	f04f 0300 	mov.w	r3, #0
 8003ee6:	f04f 0400 	mov.w	r4, #0
 8003eea:	0154      	lsls	r4, r2, #5
 8003eec:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003ef0:	014b      	lsls	r3, r1, #5
 8003ef2:	4619      	mov	r1, r3
 8003ef4:	4622      	mov	r2, r4
 8003ef6:	1b49      	subs	r1, r1, r5
 8003ef8:	eb62 0206 	sbc.w	r2, r2, r6
 8003efc:	f04f 0300 	mov.w	r3, #0
 8003f00:	f04f 0400 	mov.w	r4, #0
 8003f04:	0194      	lsls	r4, r2, #6
 8003f06:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8003f0a:	018b      	lsls	r3, r1, #6
 8003f0c:	1a5b      	subs	r3, r3, r1
 8003f0e:	eb64 0402 	sbc.w	r4, r4, r2
 8003f12:	f04f 0100 	mov.w	r1, #0
 8003f16:	f04f 0200 	mov.w	r2, #0
 8003f1a:	00e2      	lsls	r2, r4, #3
 8003f1c:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003f20:	00d9      	lsls	r1, r3, #3
 8003f22:	460b      	mov	r3, r1
 8003f24:	4614      	mov	r4, r2
 8003f26:	195b      	adds	r3, r3, r5
 8003f28:	eb44 0406 	adc.w	r4, r4, r6
 8003f2c:	f04f 0100 	mov.w	r1, #0
 8003f30:	f04f 0200 	mov.w	r2, #0
 8003f34:	02a2      	lsls	r2, r4, #10
 8003f36:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8003f3a:	0299      	lsls	r1, r3, #10
 8003f3c:	460b      	mov	r3, r1
 8003f3e:	4614      	mov	r4, r2
 8003f40:	4618      	mov	r0, r3
 8003f42:	4621      	mov	r1, r4
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	f04f 0400 	mov.w	r4, #0
 8003f4a:	461a      	mov	r2, r3
 8003f4c:	4623      	mov	r3, r4
 8003f4e:	f7fc f94f 	bl	80001f0 <__aeabi_uldivmod>
 8003f52:	4603      	mov	r3, r0
 8003f54:	460c      	mov	r4, r1
 8003f56:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003f58:	4b0a      	ldr	r3, [pc, #40]	; (8003f84 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003f5a:	685b      	ldr	r3, [r3, #4]
 8003f5c:	0c1b      	lsrs	r3, r3, #16
 8003f5e:	f003 0303 	and.w	r3, r3, #3
 8003f62:	3301      	adds	r3, #1
 8003f64:	005b      	lsls	r3, r3, #1
 8003f66:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8003f68:	68fa      	ldr	r2, [r7, #12]
 8003f6a:	683b      	ldr	r3, [r7, #0]
 8003f6c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f70:	60bb      	str	r3, [r7, #8]
      break;
 8003f72:	e002      	b.n	8003f7a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003f74:	4b04      	ldr	r3, [pc, #16]	; (8003f88 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8003f76:	60bb      	str	r3, [r7, #8]
      break;
 8003f78:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003f7a:	68bb      	ldr	r3, [r7, #8]
}
 8003f7c:	4618      	mov	r0, r3
 8003f7e:	3714      	adds	r7, #20
 8003f80:	46bd      	mov	sp, r7
 8003f82:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003f84:	40023800 	.word	0x40023800
 8003f88:	00f42400 	.word	0x00f42400
 8003f8c:	007a1200 	.word	0x007a1200

08003f90 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003f90:	b480      	push	{r7}
 8003f92:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003f94:	4b03      	ldr	r3, [pc, #12]	; (8003fa4 <HAL_RCC_GetHCLKFreq+0x14>)
 8003f96:	681b      	ldr	r3, [r3, #0]
}
 8003f98:	4618      	mov	r0, r3
 8003f9a:	46bd      	mov	sp, r7
 8003f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa0:	4770      	bx	lr
 8003fa2:	bf00      	nop
 8003fa4:	20000000 	.word	0x20000000

08003fa8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003fa8:	b580      	push	{r7, lr}
 8003faa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003fac:	f7ff fff0 	bl	8003f90 <HAL_RCC_GetHCLKFreq>
 8003fb0:	4601      	mov	r1, r0
 8003fb2:	4b05      	ldr	r3, [pc, #20]	; (8003fc8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003fb4:	689b      	ldr	r3, [r3, #8]
 8003fb6:	0b5b      	lsrs	r3, r3, #13
 8003fb8:	f003 0307 	and.w	r3, r3, #7
 8003fbc:	4a03      	ldr	r2, [pc, #12]	; (8003fcc <HAL_RCC_GetPCLK2Freq+0x24>)
 8003fbe:	5cd3      	ldrb	r3, [r2, r3]
 8003fc0:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003fc4:	4618      	mov	r0, r3
 8003fc6:	bd80      	pop	{r7, pc}
 8003fc8:	40023800 	.word	0x40023800
 8003fcc:	08009e30 	.word	0x08009e30

08003fd0 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003fd0:	b480      	push	{r7}
 8003fd2:	b083      	sub	sp, #12
 8003fd4:	af00      	add	r7, sp, #0
 8003fd6:	6078      	str	r0, [r7, #4]
 8003fd8:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	220f      	movs	r2, #15
 8003fde:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003fe0:	4b12      	ldr	r3, [pc, #72]	; (800402c <HAL_RCC_GetClockConfig+0x5c>)
 8003fe2:	689b      	ldr	r3, [r3, #8]
 8003fe4:	f003 0203 	and.w	r2, r3, #3
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003fec:	4b0f      	ldr	r3, [pc, #60]	; (800402c <HAL_RCC_GetClockConfig+0x5c>)
 8003fee:	689b      	ldr	r3, [r3, #8]
 8003ff0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003ff8:	4b0c      	ldr	r3, [pc, #48]	; (800402c <HAL_RCC_GetClockConfig+0x5c>)
 8003ffa:	689b      	ldr	r3, [r3, #8]
 8003ffc:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8004004:	4b09      	ldr	r3, [pc, #36]	; (800402c <HAL_RCC_GetClockConfig+0x5c>)
 8004006:	689b      	ldr	r3, [r3, #8]
 8004008:	08db      	lsrs	r3, r3, #3
 800400a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8004012:	4b07      	ldr	r3, [pc, #28]	; (8004030 <HAL_RCC_GetClockConfig+0x60>)
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	f003 020f 	and.w	r2, r3, #15
 800401a:	683b      	ldr	r3, [r7, #0]
 800401c:	601a      	str	r2, [r3, #0]
}
 800401e:	bf00      	nop
 8004020:	370c      	adds	r7, #12
 8004022:	46bd      	mov	sp, r7
 8004024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004028:	4770      	bx	lr
 800402a:	bf00      	nop
 800402c:	40023800 	.word	0x40023800
 8004030:	40023c00 	.word	0x40023c00

08004034 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004034:	b580      	push	{r7, lr}
 8004036:	b082      	sub	sp, #8
 8004038:	af00      	add	r7, sp, #0
 800403a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	2b00      	cmp	r3, #0
 8004040:	d101      	bne.n	8004046 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004042:	2301      	movs	r3, #1
 8004044:	e01d      	b.n	8004082 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800404c:	b2db      	uxtb	r3, r3
 800404e:	2b00      	cmp	r3, #0
 8004050:	d106      	bne.n	8004060 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	2200      	movs	r2, #0
 8004056:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800405a:	6878      	ldr	r0, [r7, #4]
 800405c:	f000 f815 	bl	800408a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	2202      	movs	r2, #2
 8004064:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681a      	ldr	r2, [r3, #0]
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	3304      	adds	r3, #4
 8004070:	4619      	mov	r1, r3
 8004072:	4610      	mov	r0, r2
 8004074:	f000 f968 	bl	8004348 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	2201      	movs	r2, #1
 800407c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004080:	2300      	movs	r3, #0
}
 8004082:	4618      	mov	r0, r3
 8004084:	3708      	adds	r7, #8
 8004086:	46bd      	mov	sp, r7
 8004088:	bd80      	pop	{r7, pc}

0800408a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800408a:	b480      	push	{r7}
 800408c:	b083      	sub	sp, #12
 800408e:	af00      	add	r7, sp, #0
 8004090:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8004092:	bf00      	nop
 8004094:	370c      	adds	r7, #12
 8004096:	46bd      	mov	sp, r7
 8004098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800409c:	4770      	bx	lr

0800409e <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800409e:	b480      	push	{r7}
 80040a0:	b085      	sub	sp, #20
 80040a2:	af00      	add	r7, sp, #0
 80040a4:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	68da      	ldr	r2, [r3, #12]
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	f042 0201 	orr.w	r2, r2, #1
 80040b4:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	689b      	ldr	r3, [r3, #8]
 80040bc:	f003 0307 	and.w	r3, r3, #7
 80040c0:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	2b06      	cmp	r3, #6
 80040c6:	d007      	beq.n	80040d8 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	681a      	ldr	r2, [r3, #0]
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	f042 0201 	orr.w	r2, r2, #1
 80040d6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80040d8:	2300      	movs	r3, #0
}
 80040da:	4618      	mov	r0, r3
 80040dc:	3714      	adds	r7, #20
 80040de:	46bd      	mov	sp, r7
 80040e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e4:	4770      	bx	lr

080040e6 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80040e6:	b580      	push	{r7, lr}
 80040e8:	b082      	sub	sp, #8
 80040ea:	af00      	add	r7, sp, #0
 80040ec:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	691b      	ldr	r3, [r3, #16]
 80040f4:	f003 0302 	and.w	r3, r3, #2
 80040f8:	2b02      	cmp	r3, #2
 80040fa:	d122      	bne.n	8004142 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	68db      	ldr	r3, [r3, #12]
 8004102:	f003 0302 	and.w	r3, r3, #2
 8004106:	2b02      	cmp	r3, #2
 8004108:	d11b      	bne.n	8004142 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	f06f 0202 	mvn.w	r2, #2
 8004112:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	2201      	movs	r2, #1
 8004118:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	699b      	ldr	r3, [r3, #24]
 8004120:	f003 0303 	and.w	r3, r3, #3
 8004124:	2b00      	cmp	r3, #0
 8004126:	d003      	beq.n	8004130 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004128:	6878      	ldr	r0, [r7, #4]
 800412a:	f000 f8ee 	bl	800430a <HAL_TIM_IC_CaptureCallback>
 800412e:	e005      	b.n	800413c <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004130:	6878      	ldr	r0, [r7, #4]
 8004132:	f000 f8e0 	bl	80042f6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004136:	6878      	ldr	r0, [r7, #4]
 8004138:	f000 f8f1 	bl	800431e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	2200      	movs	r2, #0
 8004140:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	691b      	ldr	r3, [r3, #16]
 8004148:	f003 0304 	and.w	r3, r3, #4
 800414c:	2b04      	cmp	r3, #4
 800414e:	d122      	bne.n	8004196 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	68db      	ldr	r3, [r3, #12]
 8004156:	f003 0304 	and.w	r3, r3, #4
 800415a:	2b04      	cmp	r3, #4
 800415c:	d11b      	bne.n	8004196 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	f06f 0204 	mvn.w	r2, #4
 8004166:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	2202      	movs	r2, #2
 800416c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	699b      	ldr	r3, [r3, #24]
 8004174:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004178:	2b00      	cmp	r3, #0
 800417a:	d003      	beq.n	8004184 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800417c:	6878      	ldr	r0, [r7, #4]
 800417e:	f000 f8c4 	bl	800430a <HAL_TIM_IC_CaptureCallback>
 8004182:	e005      	b.n	8004190 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004184:	6878      	ldr	r0, [r7, #4]
 8004186:	f000 f8b6 	bl	80042f6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800418a:	6878      	ldr	r0, [r7, #4]
 800418c:	f000 f8c7 	bl	800431e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	2200      	movs	r2, #0
 8004194:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	691b      	ldr	r3, [r3, #16]
 800419c:	f003 0308 	and.w	r3, r3, #8
 80041a0:	2b08      	cmp	r3, #8
 80041a2:	d122      	bne.n	80041ea <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	68db      	ldr	r3, [r3, #12]
 80041aa:	f003 0308 	and.w	r3, r3, #8
 80041ae:	2b08      	cmp	r3, #8
 80041b0:	d11b      	bne.n	80041ea <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	f06f 0208 	mvn.w	r2, #8
 80041ba:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	2204      	movs	r2, #4
 80041c0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	69db      	ldr	r3, [r3, #28]
 80041c8:	f003 0303 	and.w	r3, r3, #3
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d003      	beq.n	80041d8 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80041d0:	6878      	ldr	r0, [r7, #4]
 80041d2:	f000 f89a 	bl	800430a <HAL_TIM_IC_CaptureCallback>
 80041d6:	e005      	b.n	80041e4 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80041d8:	6878      	ldr	r0, [r7, #4]
 80041da:	f000 f88c 	bl	80042f6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80041de:	6878      	ldr	r0, [r7, #4]
 80041e0:	f000 f89d 	bl	800431e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	2200      	movs	r2, #0
 80041e8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	691b      	ldr	r3, [r3, #16]
 80041f0:	f003 0310 	and.w	r3, r3, #16
 80041f4:	2b10      	cmp	r3, #16
 80041f6:	d122      	bne.n	800423e <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	68db      	ldr	r3, [r3, #12]
 80041fe:	f003 0310 	and.w	r3, r3, #16
 8004202:	2b10      	cmp	r3, #16
 8004204:	d11b      	bne.n	800423e <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	f06f 0210 	mvn.w	r2, #16
 800420e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	2208      	movs	r2, #8
 8004214:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	69db      	ldr	r3, [r3, #28]
 800421c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004220:	2b00      	cmp	r3, #0
 8004222:	d003      	beq.n	800422c <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004224:	6878      	ldr	r0, [r7, #4]
 8004226:	f000 f870 	bl	800430a <HAL_TIM_IC_CaptureCallback>
 800422a:	e005      	b.n	8004238 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800422c:	6878      	ldr	r0, [r7, #4]
 800422e:	f000 f862 	bl	80042f6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004232:	6878      	ldr	r0, [r7, #4]
 8004234:	f000 f873 	bl	800431e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	2200      	movs	r2, #0
 800423c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	691b      	ldr	r3, [r3, #16]
 8004244:	f003 0301 	and.w	r3, r3, #1
 8004248:	2b01      	cmp	r3, #1
 800424a:	d10e      	bne.n	800426a <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	68db      	ldr	r3, [r3, #12]
 8004252:	f003 0301 	and.w	r3, r3, #1
 8004256:	2b01      	cmp	r3, #1
 8004258:	d107      	bne.n	800426a <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	f06f 0201 	mvn.w	r2, #1
 8004262:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004264:	6878      	ldr	r0, [r7, #4]
 8004266:	f7fc febb 	bl	8000fe0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	691b      	ldr	r3, [r3, #16]
 8004270:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004274:	2b80      	cmp	r3, #128	; 0x80
 8004276:	d10e      	bne.n	8004296 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	68db      	ldr	r3, [r3, #12]
 800427e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004282:	2b80      	cmp	r3, #128	; 0x80
 8004284:	d107      	bne.n	8004296 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800428e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004290:	6878      	ldr	r0, [r7, #4]
 8004292:	f000 f903 	bl	800449c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	691b      	ldr	r3, [r3, #16]
 800429c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042a0:	2b40      	cmp	r3, #64	; 0x40
 80042a2:	d10e      	bne.n	80042c2 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	68db      	ldr	r3, [r3, #12]
 80042aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042ae:	2b40      	cmp	r3, #64	; 0x40
 80042b0:	d107      	bne.n	80042c2 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80042ba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80042bc:	6878      	ldr	r0, [r7, #4]
 80042be:	f000 f838 	bl	8004332 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	691b      	ldr	r3, [r3, #16]
 80042c8:	f003 0320 	and.w	r3, r3, #32
 80042cc:	2b20      	cmp	r3, #32
 80042ce:	d10e      	bne.n	80042ee <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	68db      	ldr	r3, [r3, #12]
 80042d6:	f003 0320 	and.w	r3, r3, #32
 80042da:	2b20      	cmp	r3, #32
 80042dc:	d107      	bne.n	80042ee <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	f06f 0220 	mvn.w	r2, #32
 80042e6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80042e8:	6878      	ldr	r0, [r7, #4]
 80042ea:	f000 f8cd 	bl	8004488 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80042ee:	bf00      	nop
 80042f0:	3708      	adds	r7, #8
 80042f2:	46bd      	mov	sp, r7
 80042f4:	bd80      	pop	{r7, pc}

080042f6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80042f6:	b480      	push	{r7}
 80042f8:	b083      	sub	sp, #12
 80042fa:	af00      	add	r7, sp, #0
 80042fc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80042fe:	bf00      	nop
 8004300:	370c      	adds	r7, #12
 8004302:	46bd      	mov	sp, r7
 8004304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004308:	4770      	bx	lr

0800430a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800430a:	b480      	push	{r7}
 800430c:	b083      	sub	sp, #12
 800430e:	af00      	add	r7, sp, #0
 8004310:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004312:	bf00      	nop
 8004314:	370c      	adds	r7, #12
 8004316:	46bd      	mov	sp, r7
 8004318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800431c:	4770      	bx	lr

0800431e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800431e:	b480      	push	{r7}
 8004320:	b083      	sub	sp, #12
 8004322:	af00      	add	r7, sp, #0
 8004324:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004326:	bf00      	nop
 8004328:	370c      	adds	r7, #12
 800432a:	46bd      	mov	sp, r7
 800432c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004330:	4770      	bx	lr

08004332 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004332:	b480      	push	{r7}
 8004334:	b083      	sub	sp, #12
 8004336:	af00      	add	r7, sp, #0
 8004338:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800433a:	bf00      	nop
 800433c:	370c      	adds	r7, #12
 800433e:	46bd      	mov	sp, r7
 8004340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004344:	4770      	bx	lr
	...

08004348 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004348:	b480      	push	{r7}
 800434a:	b085      	sub	sp, #20
 800434c:	af00      	add	r7, sp, #0
 800434e:	6078      	str	r0, [r7, #4]
 8004350:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	4a40      	ldr	r2, [pc, #256]	; (800445c <TIM_Base_SetConfig+0x114>)
 800435c:	4293      	cmp	r3, r2
 800435e:	d013      	beq.n	8004388 <TIM_Base_SetConfig+0x40>
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004366:	d00f      	beq.n	8004388 <TIM_Base_SetConfig+0x40>
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	4a3d      	ldr	r2, [pc, #244]	; (8004460 <TIM_Base_SetConfig+0x118>)
 800436c:	4293      	cmp	r3, r2
 800436e:	d00b      	beq.n	8004388 <TIM_Base_SetConfig+0x40>
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	4a3c      	ldr	r2, [pc, #240]	; (8004464 <TIM_Base_SetConfig+0x11c>)
 8004374:	4293      	cmp	r3, r2
 8004376:	d007      	beq.n	8004388 <TIM_Base_SetConfig+0x40>
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	4a3b      	ldr	r2, [pc, #236]	; (8004468 <TIM_Base_SetConfig+0x120>)
 800437c:	4293      	cmp	r3, r2
 800437e:	d003      	beq.n	8004388 <TIM_Base_SetConfig+0x40>
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	4a3a      	ldr	r2, [pc, #232]	; (800446c <TIM_Base_SetConfig+0x124>)
 8004384:	4293      	cmp	r3, r2
 8004386:	d108      	bne.n	800439a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800438e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004390:	683b      	ldr	r3, [r7, #0]
 8004392:	685b      	ldr	r3, [r3, #4]
 8004394:	68fa      	ldr	r2, [r7, #12]
 8004396:	4313      	orrs	r3, r2
 8004398:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	4a2f      	ldr	r2, [pc, #188]	; (800445c <TIM_Base_SetConfig+0x114>)
 800439e:	4293      	cmp	r3, r2
 80043a0:	d02b      	beq.n	80043fa <TIM_Base_SetConfig+0xb2>
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80043a8:	d027      	beq.n	80043fa <TIM_Base_SetConfig+0xb2>
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	4a2c      	ldr	r2, [pc, #176]	; (8004460 <TIM_Base_SetConfig+0x118>)
 80043ae:	4293      	cmp	r3, r2
 80043b0:	d023      	beq.n	80043fa <TIM_Base_SetConfig+0xb2>
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	4a2b      	ldr	r2, [pc, #172]	; (8004464 <TIM_Base_SetConfig+0x11c>)
 80043b6:	4293      	cmp	r3, r2
 80043b8:	d01f      	beq.n	80043fa <TIM_Base_SetConfig+0xb2>
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	4a2a      	ldr	r2, [pc, #168]	; (8004468 <TIM_Base_SetConfig+0x120>)
 80043be:	4293      	cmp	r3, r2
 80043c0:	d01b      	beq.n	80043fa <TIM_Base_SetConfig+0xb2>
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	4a29      	ldr	r2, [pc, #164]	; (800446c <TIM_Base_SetConfig+0x124>)
 80043c6:	4293      	cmp	r3, r2
 80043c8:	d017      	beq.n	80043fa <TIM_Base_SetConfig+0xb2>
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	4a28      	ldr	r2, [pc, #160]	; (8004470 <TIM_Base_SetConfig+0x128>)
 80043ce:	4293      	cmp	r3, r2
 80043d0:	d013      	beq.n	80043fa <TIM_Base_SetConfig+0xb2>
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	4a27      	ldr	r2, [pc, #156]	; (8004474 <TIM_Base_SetConfig+0x12c>)
 80043d6:	4293      	cmp	r3, r2
 80043d8:	d00f      	beq.n	80043fa <TIM_Base_SetConfig+0xb2>
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	4a26      	ldr	r2, [pc, #152]	; (8004478 <TIM_Base_SetConfig+0x130>)
 80043de:	4293      	cmp	r3, r2
 80043e0:	d00b      	beq.n	80043fa <TIM_Base_SetConfig+0xb2>
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	4a25      	ldr	r2, [pc, #148]	; (800447c <TIM_Base_SetConfig+0x134>)
 80043e6:	4293      	cmp	r3, r2
 80043e8:	d007      	beq.n	80043fa <TIM_Base_SetConfig+0xb2>
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	4a24      	ldr	r2, [pc, #144]	; (8004480 <TIM_Base_SetConfig+0x138>)
 80043ee:	4293      	cmp	r3, r2
 80043f0:	d003      	beq.n	80043fa <TIM_Base_SetConfig+0xb2>
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	4a23      	ldr	r2, [pc, #140]	; (8004484 <TIM_Base_SetConfig+0x13c>)
 80043f6:	4293      	cmp	r3, r2
 80043f8:	d108      	bne.n	800440c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004400:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004402:	683b      	ldr	r3, [r7, #0]
 8004404:	68db      	ldr	r3, [r3, #12]
 8004406:	68fa      	ldr	r2, [r7, #12]
 8004408:	4313      	orrs	r3, r2
 800440a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004412:	683b      	ldr	r3, [r7, #0]
 8004414:	695b      	ldr	r3, [r3, #20]
 8004416:	4313      	orrs	r3, r2
 8004418:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	68fa      	ldr	r2, [r7, #12]
 800441e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004420:	683b      	ldr	r3, [r7, #0]
 8004422:	689a      	ldr	r2, [r3, #8]
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004428:	683b      	ldr	r3, [r7, #0]
 800442a:	681a      	ldr	r2, [r3, #0]
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	4a0a      	ldr	r2, [pc, #40]	; (800445c <TIM_Base_SetConfig+0x114>)
 8004434:	4293      	cmp	r3, r2
 8004436:	d003      	beq.n	8004440 <TIM_Base_SetConfig+0xf8>
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	4a0c      	ldr	r2, [pc, #48]	; (800446c <TIM_Base_SetConfig+0x124>)
 800443c:	4293      	cmp	r3, r2
 800443e:	d103      	bne.n	8004448 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004440:	683b      	ldr	r3, [r7, #0]
 8004442:	691a      	ldr	r2, [r3, #16]
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	2201      	movs	r2, #1
 800444c:	615a      	str	r2, [r3, #20]
}
 800444e:	bf00      	nop
 8004450:	3714      	adds	r7, #20
 8004452:	46bd      	mov	sp, r7
 8004454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004458:	4770      	bx	lr
 800445a:	bf00      	nop
 800445c:	40010000 	.word	0x40010000
 8004460:	40000400 	.word	0x40000400
 8004464:	40000800 	.word	0x40000800
 8004468:	40000c00 	.word	0x40000c00
 800446c:	40010400 	.word	0x40010400
 8004470:	40014000 	.word	0x40014000
 8004474:	40014400 	.word	0x40014400
 8004478:	40014800 	.word	0x40014800
 800447c:	40001800 	.word	0x40001800
 8004480:	40001c00 	.word	0x40001c00
 8004484:	40002000 	.word	0x40002000

08004488 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004488:	b480      	push	{r7}
 800448a:	b083      	sub	sp, #12
 800448c:	af00      	add	r7, sp, #0
 800448e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004490:	bf00      	nop
 8004492:	370c      	adds	r7, #12
 8004494:	46bd      	mov	sp, r7
 8004496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800449a:	4770      	bx	lr

0800449c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800449c:	b480      	push	{r7}
 800449e:	b083      	sub	sp, #12
 80044a0:	af00      	add	r7, sp, #0
 80044a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80044a4:	bf00      	nop
 80044a6:	370c      	adds	r7, #12
 80044a8:	46bd      	mov	sp, r7
 80044aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ae:	4770      	bx	lr

080044b0 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 80044b0:	b480      	push	{r7}
 80044b2:	b089      	sub	sp, #36	; 0x24
 80044b4:	af00      	add	r7, sp, #0
 80044b6:	60f8      	str	r0, [r7, #12]
 80044b8:	60b9      	str	r1, [r7, #8]
 80044ba:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	681a      	ldr	r2, [r3, #0]
 80044c0:	68bb      	ldr	r3, [r7, #8]
 80044c2:	617b      	str	r3, [r7, #20]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80044c4:	697b      	ldr	r3, [r7, #20]
 80044c6:	fa93 f3a3 	rbit	r3, r3
 80044ca:	613b      	str	r3, [r7, #16]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80044cc:	693b      	ldr	r3, [r7, #16]
 80044ce:	fab3 f383 	clz	r3, r3
 80044d2:	b2db      	uxtb	r3, r3
 80044d4:	005b      	lsls	r3, r3, #1
 80044d6:	2103      	movs	r1, #3
 80044d8:	fa01 f303 	lsl.w	r3, r1, r3
 80044dc:	43db      	mvns	r3, r3
 80044de:	401a      	ands	r2, r3
 80044e0:	68bb      	ldr	r3, [r7, #8]
 80044e2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80044e4:	69fb      	ldr	r3, [r7, #28]
 80044e6:	fa93 f3a3 	rbit	r3, r3
 80044ea:	61bb      	str	r3, [r7, #24]
  return result;
 80044ec:	69bb      	ldr	r3, [r7, #24]
 80044ee:	fab3 f383 	clz	r3, r3
 80044f2:	b2db      	uxtb	r3, r3
 80044f4:	005b      	lsls	r3, r3, #1
 80044f6:	6879      	ldr	r1, [r7, #4]
 80044f8:	fa01 f303 	lsl.w	r3, r1, r3
 80044fc:	431a      	orrs	r2, r3
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	601a      	str	r2, [r3, #0]
}
 8004502:	bf00      	nop
 8004504:	3724      	adds	r7, #36	; 0x24
 8004506:	46bd      	mov	sp, r7
 8004508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800450c:	4770      	bx	lr

0800450e <LL_GPIO_SetPinOutputType>:
  *         @arg @ref LL_GPIO_OUTPUT_PUSHPULL
  *         @arg @ref LL_GPIO_OUTPUT_OPENDRAIN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinOutputType(GPIO_TypeDef *GPIOx, uint32_t PinMask, uint32_t OutputType)
{
 800450e:	b480      	push	{r7}
 8004510:	b085      	sub	sp, #20
 8004512:	af00      	add	r7, sp, #0
 8004514:	60f8      	str	r0, [r7, #12]
 8004516:	60b9      	str	r1, [r7, #8]
 8004518:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	685a      	ldr	r2, [r3, #4]
 800451e:	68bb      	ldr	r3, [r7, #8]
 8004520:	43db      	mvns	r3, r3
 8004522:	401a      	ands	r2, r3
 8004524:	68bb      	ldr	r3, [r7, #8]
 8004526:	6879      	ldr	r1, [r7, #4]
 8004528:	fb01 f303 	mul.w	r3, r1, r3
 800452c:	431a      	orrs	r2, r3
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	605a      	str	r2, [r3, #4]
}
 8004532:	bf00      	nop
 8004534:	3714      	adds	r7, #20
 8004536:	46bd      	mov	sp, r7
 8004538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800453c:	4770      	bx	lr

0800453e <LL_GPIO_SetPinSpeed>:
  *         @arg @ref LL_GPIO_SPEED_FREQ_HIGH
  *         @arg @ref LL_GPIO_SPEED_FREQ_VERY_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
{
 800453e:	b480      	push	{r7}
 8004540:	b089      	sub	sp, #36	; 0x24
 8004542:	af00      	add	r7, sp, #0
 8004544:	60f8      	str	r0, [r7, #12]
 8004546:	60b9      	str	r1, [r7, #8]
 8004548:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	689a      	ldr	r2, [r3, #8]
 800454e:	68bb      	ldr	r3, [r7, #8]
 8004550:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004552:	697b      	ldr	r3, [r7, #20]
 8004554:	fa93 f3a3 	rbit	r3, r3
 8004558:	613b      	str	r3, [r7, #16]
  return result;
 800455a:	693b      	ldr	r3, [r7, #16]
 800455c:	fab3 f383 	clz	r3, r3
 8004560:	b2db      	uxtb	r3, r3
 8004562:	005b      	lsls	r3, r3, #1
 8004564:	2103      	movs	r1, #3
 8004566:	fa01 f303 	lsl.w	r3, r1, r3
 800456a:	43db      	mvns	r3, r3
 800456c:	401a      	ands	r2, r3
 800456e:	68bb      	ldr	r3, [r7, #8]
 8004570:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004572:	69fb      	ldr	r3, [r7, #28]
 8004574:	fa93 f3a3 	rbit	r3, r3
 8004578:	61bb      	str	r3, [r7, #24]
  return result;
 800457a:	69bb      	ldr	r3, [r7, #24]
 800457c:	fab3 f383 	clz	r3, r3
 8004580:	b2db      	uxtb	r3, r3
 8004582:	005b      	lsls	r3, r3, #1
 8004584:	6879      	ldr	r1, [r7, #4]
 8004586:	fa01 f303 	lsl.w	r3, r1, r3
 800458a:	431a      	orrs	r2, r3
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	609a      	str	r2, [r3, #8]
             (Speed << (POSITION_VAL(Pin) * 2U)));
}
 8004590:	bf00      	nop
 8004592:	3724      	adds	r7, #36	; 0x24
 8004594:	46bd      	mov	sp, r7
 8004596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800459a:	4770      	bx	lr

0800459c <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 800459c:	b480      	push	{r7}
 800459e:	b089      	sub	sp, #36	; 0x24
 80045a0:	af00      	add	r7, sp, #0
 80045a2:	60f8      	str	r0, [r7, #12]
 80045a4:	60b9      	str	r1, [r7, #8]
 80045a6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	68da      	ldr	r2, [r3, #12]
 80045ac:	68bb      	ldr	r3, [r7, #8]
 80045ae:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80045b0:	697b      	ldr	r3, [r7, #20]
 80045b2:	fa93 f3a3 	rbit	r3, r3
 80045b6:	613b      	str	r3, [r7, #16]
  return result;
 80045b8:	693b      	ldr	r3, [r7, #16]
 80045ba:	fab3 f383 	clz	r3, r3
 80045be:	b2db      	uxtb	r3, r3
 80045c0:	005b      	lsls	r3, r3, #1
 80045c2:	2103      	movs	r1, #3
 80045c4:	fa01 f303 	lsl.w	r3, r1, r3
 80045c8:	43db      	mvns	r3, r3
 80045ca:	401a      	ands	r2, r3
 80045cc:	68bb      	ldr	r3, [r7, #8]
 80045ce:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80045d0:	69fb      	ldr	r3, [r7, #28]
 80045d2:	fa93 f3a3 	rbit	r3, r3
 80045d6:	61bb      	str	r3, [r7, #24]
  return result;
 80045d8:	69bb      	ldr	r3, [r7, #24]
 80045da:	fab3 f383 	clz	r3, r3
 80045de:	b2db      	uxtb	r3, r3
 80045e0:	005b      	lsls	r3, r3, #1
 80045e2:	6879      	ldr	r1, [r7, #4]
 80045e4:	fa01 f303 	lsl.w	r3, r1, r3
 80045e8:	431a      	orrs	r2, r3
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	60da      	str	r2, [r3, #12]
}
 80045ee:	bf00      	nop
 80045f0:	3724      	adds	r7, #36	; 0x24
 80045f2:	46bd      	mov	sp, r7
 80045f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045f8:	4770      	bx	lr

080045fa <LL_GPIO_SetAFPin_0_7>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_0_7(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 80045fa:	b480      	push	{r7}
 80045fc:	b089      	sub	sp, #36	; 0x24
 80045fe:	af00      	add	r7, sp, #0
 8004600:	60f8      	str	r0, [r7, #12]
 8004602:	60b9      	str	r1, [r7, #8]
 8004604:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	6a1a      	ldr	r2, [r3, #32]
 800460a:	68bb      	ldr	r3, [r7, #8]
 800460c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800460e:	697b      	ldr	r3, [r7, #20]
 8004610:	fa93 f3a3 	rbit	r3, r3
 8004614:	613b      	str	r3, [r7, #16]
  return result;
 8004616:	693b      	ldr	r3, [r7, #16]
 8004618:	fab3 f383 	clz	r3, r3
 800461c:	b2db      	uxtb	r3, r3
 800461e:	009b      	lsls	r3, r3, #2
 8004620:	210f      	movs	r1, #15
 8004622:	fa01 f303 	lsl.w	r3, r1, r3
 8004626:	43db      	mvns	r3, r3
 8004628:	401a      	ands	r2, r3
 800462a:	68bb      	ldr	r3, [r7, #8]
 800462c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800462e:	69fb      	ldr	r3, [r7, #28]
 8004630:	fa93 f3a3 	rbit	r3, r3
 8004634:	61bb      	str	r3, [r7, #24]
  return result;
 8004636:	69bb      	ldr	r3, [r7, #24]
 8004638:	fab3 f383 	clz	r3, r3
 800463c:	b2db      	uxtb	r3, r3
 800463e:	009b      	lsls	r3, r3, #2
 8004640:	6879      	ldr	r1, [r7, #4]
 8004642:	fa01 f303 	lsl.w	r3, r1, r3
 8004646:	431a      	orrs	r2, r3
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	621a      	str	r2, [r3, #32]
             (Alternate << (POSITION_VAL(Pin) * 4U)));
}
 800464c:	bf00      	nop
 800464e:	3724      	adds	r7, #36	; 0x24
 8004650:	46bd      	mov	sp, r7
 8004652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004656:	4770      	bx	lr

08004658 <LL_GPIO_SetAFPin_8_15>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_8_15(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 8004658:	b480      	push	{r7}
 800465a:	b089      	sub	sp, #36	; 0x24
 800465c:	af00      	add	r7, sp, #0
 800465e:	60f8      	str	r0, [r7, #12]
 8004660:	60b9      	str	r1, [r7, #8]
 8004662:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004668:	68bb      	ldr	r3, [r7, #8]
 800466a:	0a1b      	lsrs	r3, r3, #8
 800466c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800466e:	697b      	ldr	r3, [r7, #20]
 8004670:	fa93 f3a3 	rbit	r3, r3
 8004674:	613b      	str	r3, [r7, #16]
  return result;
 8004676:	693b      	ldr	r3, [r7, #16]
 8004678:	fab3 f383 	clz	r3, r3
 800467c:	b2db      	uxtb	r3, r3
 800467e:	009b      	lsls	r3, r3, #2
 8004680:	210f      	movs	r1, #15
 8004682:	fa01 f303 	lsl.w	r3, r1, r3
 8004686:	43db      	mvns	r3, r3
 8004688:	401a      	ands	r2, r3
 800468a:	68bb      	ldr	r3, [r7, #8]
 800468c:	0a1b      	lsrs	r3, r3, #8
 800468e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004690:	69fb      	ldr	r3, [r7, #28]
 8004692:	fa93 f3a3 	rbit	r3, r3
 8004696:	61bb      	str	r3, [r7, #24]
  return result;
 8004698:	69bb      	ldr	r3, [r7, #24]
 800469a:	fab3 f383 	clz	r3, r3
 800469e:	b2db      	uxtb	r3, r3
 80046a0:	009b      	lsls	r3, r3, #2
 80046a2:	6879      	ldr	r1, [r7, #4]
 80046a4:	fa01 f303 	lsl.w	r3, r1, r3
 80046a8:	431a      	orrs	r2, r3
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	625a      	str	r2, [r3, #36]	; 0x24
             (Alternate << (POSITION_VAL(Pin >> 8U) * 4U)));
}
 80046ae:	bf00      	nop
 80046b0:	3724      	adds	r7, #36	; 0x24
 80046b2:	46bd      	mov	sp, r7
 80046b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046b8:	4770      	bx	lr

080046ba <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 80046ba:	b580      	push	{r7, lr}
 80046bc:	b088      	sub	sp, #32
 80046be:	af00      	add	r7, sp, #0
 80046c0:	6078      	str	r0, [r7, #4]
 80046c2:	6039      	str	r1, [r7, #0]
  uint32_t pinpos     = 0x00000000U;
 80046c4:	2300      	movs	r3, #0
 80046c6:	61fb      	str	r3, [r7, #28]
  uint32_t currentpin = 0x00000000U;
 80046c8:	2300      	movs	r3, #0
 80046ca:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 80046cc:	683b      	ldr	r3, [r7, #0]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80046d2:	697b      	ldr	r3, [r7, #20]
 80046d4:	fa93 f3a3 	rbit	r3, r3
 80046d8:	613b      	str	r3, [r7, #16]
  return result;
 80046da:	693b      	ldr	r3, [r7, #16]
 80046dc:	fab3 f383 	clz	r3, r3
 80046e0:	b2db      	uxtb	r3, r3
 80046e2:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 80046e4:	e049      	b.n	800477a <LL_GPIO_Init+0xc0>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001U << pinpos);
 80046e6:	683b      	ldr	r3, [r7, #0]
 80046e8:	681a      	ldr	r2, [r3, #0]
 80046ea:	2101      	movs	r1, #1
 80046ec:	69fb      	ldr	r3, [r7, #28]
 80046ee:	fa01 f303 	lsl.w	r3, r1, r3
 80046f2:	4013      	ands	r3, r2
 80046f4:	61bb      	str	r3, [r7, #24]

    if (currentpin)
 80046f6:	69bb      	ldr	r3, [r7, #24]
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d03b      	beq.n	8004774 <LL_GPIO_Init+0xba>
    {
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 80046fc:	683b      	ldr	r3, [r7, #0]
 80046fe:	685b      	ldr	r3, [r3, #4]
 8004700:	461a      	mov	r2, r3
 8004702:	69b9      	ldr	r1, [r7, #24]
 8004704:	6878      	ldr	r0, [r7, #4]
 8004706:	f7ff fed3 	bl	80044b0 <LL_GPIO_SetPinMode>

      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 800470a:	683b      	ldr	r3, [r7, #0]
 800470c:	685b      	ldr	r3, [r3, #4]
 800470e:	2b01      	cmp	r3, #1
 8004710:	d003      	beq.n	800471a <LL_GPIO_Init+0x60>
 8004712:	683b      	ldr	r3, [r7, #0]
 8004714:	685b      	ldr	r3, [r3, #4]
 8004716:	2b02      	cmp	r3, #2
 8004718:	d106      	bne.n	8004728 <LL_GPIO_Init+0x6e>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 800471a:	683b      	ldr	r3, [r7, #0]
 800471c:	689b      	ldr	r3, [r3, #8]
 800471e:	461a      	mov	r2, r3
 8004720:	69b9      	ldr	r1, [r7, #24]
 8004722:	6878      	ldr	r0, [r7, #4]
 8004724:	f7ff ff0b 	bl	800453e <LL_GPIO_SetPinSpeed>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8004728:	683b      	ldr	r3, [r7, #0]
 800472a:	691b      	ldr	r3, [r3, #16]
 800472c:	461a      	mov	r2, r3
 800472e:	69b9      	ldr	r1, [r7, #24]
 8004730:	6878      	ldr	r0, [r7, #4]
 8004732:	f7ff ff33 	bl	800459c <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8004736:	683b      	ldr	r3, [r7, #0]
 8004738:	685b      	ldr	r3, [r3, #4]
 800473a:	2b02      	cmp	r3, #2
 800473c:	d11a      	bne.n	8004774 <LL_GPIO_Init+0xba>
 800473e:	69bb      	ldr	r3, [r7, #24]
 8004740:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	fa93 f3a3 	rbit	r3, r3
 8004748:	60bb      	str	r3, [r7, #8]
  return result;
 800474a:	68bb      	ldr	r3, [r7, #8]
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 0x00000008U)
 800474c:	fab3 f383 	clz	r3, r3
 8004750:	b2db      	uxtb	r3, r3
 8004752:	2b07      	cmp	r3, #7
 8004754:	d807      	bhi.n	8004766 <LL_GPIO_Init+0xac>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8004756:	683b      	ldr	r3, [r7, #0]
 8004758:	695b      	ldr	r3, [r3, #20]
 800475a:	461a      	mov	r2, r3
 800475c:	69b9      	ldr	r1, [r7, #24]
 800475e:	6878      	ldr	r0, [r7, #4]
 8004760:	f7ff ff4b 	bl	80045fa <LL_GPIO_SetAFPin_0_7>
 8004764:	e006      	b.n	8004774 <LL_GPIO_Init+0xba>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8004766:	683b      	ldr	r3, [r7, #0]
 8004768:	695b      	ldr	r3, [r3, #20]
 800476a:	461a      	mov	r2, r3
 800476c:	69b9      	ldr	r1, [r7, #24]
 800476e:	6878      	ldr	r0, [r7, #4]
 8004770:	f7ff ff72 	bl	8004658 <LL_GPIO_SetAFPin_8_15>
        }
      }
    }
    pinpos++;
 8004774:	69fb      	ldr	r3, [r7, #28]
 8004776:	3301      	adds	r3, #1
 8004778:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 800477a:	683b      	ldr	r3, [r7, #0]
 800477c:	681a      	ldr	r2, [r3, #0]
 800477e:	69fb      	ldr	r3, [r7, #28]
 8004780:	fa22 f303 	lsr.w	r3, r2, r3
 8004784:	2b00      	cmp	r3, #0
 8004786:	d1ae      	bne.n	80046e6 <LL_GPIO_Init+0x2c>
  }

  if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8004788:	683b      	ldr	r3, [r7, #0]
 800478a:	685b      	ldr	r3, [r3, #4]
 800478c:	2b01      	cmp	r3, #1
 800478e:	d003      	beq.n	8004798 <LL_GPIO_Init+0xde>
 8004790:	683b      	ldr	r3, [r7, #0]
 8004792:	685b      	ldr	r3, [r3, #4]
 8004794:	2b02      	cmp	r3, #2
 8004796:	d107      	bne.n	80047a8 <LL_GPIO_Init+0xee>
  {
    /* Check Output mode parameters */
    assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

    /* Output mode configuration*/
    LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 8004798:	683b      	ldr	r3, [r7, #0]
 800479a:	6819      	ldr	r1, [r3, #0]
 800479c:	683b      	ldr	r3, [r7, #0]
 800479e:	68db      	ldr	r3, [r3, #12]
 80047a0:	461a      	mov	r2, r3
 80047a2:	6878      	ldr	r0, [r7, #4]
 80047a4:	f7ff feb3 	bl	800450e <LL_GPIO_SetPinOutputType>

  }
  return (SUCCESS);
 80047a8:	2300      	movs	r3, #0
}
 80047aa:	4618      	mov	r0, r3
 80047ac:	3720      	adds	r7, #32
 80047ae:	46bd      	mov	sp, r7
 80047b0:	bd80      	pop	{r7, pc}

080047b2 <LL_I2C_Enable>:
{
 80047b2:	b480      	push	{r7}
 80047b4:	b083      	sub	sp, #12
 80047b6:	af00      	add	r7, sp, #0
 80047b8:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR1, I2C_CR1_PE);
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	f043 0201 	orr.w	r2, r3, #1
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	601a      	str	r2, [r3, #0]
}
 80047c6:	bf00      	nop
 80047c8:	370c      	adds	r7, #12
 80047ca:	46bd      	mov	sp, r7
 80047cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047d0:	4770      	bx	lr

080047d2 <LL_I2C_Disable>:
{
 80047d2:	b480      	push	{r7}
 80047d4:	b083      	sub	sp, #12
 80047d6:	af00      	add	r7, sp, #0
 80047d8:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_PE);
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	f023 0201 	bic.w	r2, r3, #1
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	601a      	str	r2, [r3, #0]
}
 80047e6:	bf00      	nop
 80047e8:	370c      	adds	r7, #12
 80047ea:	46bd      	mov	sp, r7
 80047ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f0:	4770      	bx	lr

080047f2 <LL_I2C_ConfigFilters>:
{
 80047f2:	b480      	push	{r7}
 80047f4:	b085      	sub	sp, #20
 80047f6:	af00      	add	r7, sp, #0
 80047f8:	60f8      	str	r0, [r7, #12]
 80047fa:	60b9      	str	r1, [r7, #8]
 80047fc:	607a      	str	r2, [r7, #4]
  MODIFY_REG(I2Cx->FLTR, I2C_FLTR_ANOFF | I2C_FLTR_DNF, AnalogFilter | DigitalFilter);
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004802:	f023 021f 	bic.w	r2, r3, #31
 8004806:	68b9      	ldr	r1, [r7, #8]
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	430b      	orrs	r3, r1
 800480c:	431a      	orrs	r2, r3
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	625a      	str	r2, [r3, #36]	; 0x24
}
 8004812:	bf00      	nop
 8004814:	3714      	adds	r7, #20
 8004816:	46bd      	mov	sp, r7
 8004818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800481c:	4770      	bx	lr

0800481e <LL_I2C_SetOwnAddress1>:
{
 800481e:	b480      	push	{r7}
 8004820:	b085      	sub	sp, #20
 8004822:	af00      	add	r7, sp, #0
 8004824:	60f8      	str	r0, [r7, #12]
 8004826:	60b9      	str	r1, [r7, #8]
 8004828:	607a      	str	r2, [r7, #4]
  MODIFY_REG(I2Cx->OAR1, I2C_OAR1_ADD0 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD8_9 | I2C_OAR1_ADDMODE, OwnAddress1 | OwnAddrSize);
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	689b      	ldr	r3, [r3, #8]
 800482e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8004832:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004836:	68b9      	ldr	r1, [r7, #8]
 8004838:	687a      	ldr	r2, [r7, #4]
 800483a:	430a      	orrs	r2, r1
 800483c:	431a      	orrs	r2, r3
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	609a      	str	r2, [r3, #8]
}
 8004842:	bf00      	nop
 8004844:	3714      	adds	r7, #20
 8004846:	46bd      	mov	sp, r7
 8004848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800484c:	4770      	bx	lr
	...

08004850 <LL_I2C_ConfigSpeed>:
  *         @arg @ref LL_I2C_DUTYCYCLE_16_9
  * @retval None
  */
__STATIC_INLINE void LL_I2C_ConfigSpeed(I2C_TypeDef *I2Cx, uint32_t PeriphClock, uint32_t ClockSpeed,
                                        uint32_t DutyCycle)
{
 8004850:	b490      	push	{r4, r7}
 8004852:	b084      	sub	sp, #16
 8004854:	af00      	add	r7, sp, #0
 8004856:	60f8      	str	r0, [r7, #12]
 8004858:	60b9      	str	r1, [r7, #8]
 800485a:	607a      	str	r2, [r7, #4]
 800485c:	603b      	str	r3, [r7, #0]
  register uint32_t freqrange = 0x0U;
 800485e:	2400      	movs	r4, #0
  register uint32_t clockconfig = 0x0U;
 8004860:	2400      	movs	r4, #0

  /* Compute frequency range */
  freqrange = __LL_I2C_FREQ_HZ_TO_MHZ(PeriphClock);
 8004862:	68bb      	ldr	r3, [r7, #8]
 8004864:	4a3f      	ldr	r2, [pc, #252]	; (8004964 <LL_I2C_ConfigSpeed+0x114>)
 8004866:	fba2 2303 	umull	r2, r3, r2, r3
 800486a:	0c9c      	lsrs	r4, r3, #18

  /* Configure I2Cx: Frequency range register */
  MODIFY_REG(I2Cx->CR2, I2C_CR2_FREQ, freqrange);
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	685b      	ldr	r3, [r3, #4]
 8004870:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8004874:	ea44 0203 	orr.w	r2, r4, r3
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	605a      	str	r2, [r3, #4]

  /* Configure I2Cx: Rise Time register */
  MODIFY_REG(I2Cx->TRISE, I2C_TRISE_TRISE, __LL_I2C_RISE_TIME(freqrange, ClockSpeed));
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	6a1b      	ldr	r3, [r3, #32]
 8004880:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	4938      	ldr	r1, [pc, #224]	; (8004968 <LL_I2C_ConfigSpeed+0x118>)
 8004888:	428b      	cmp	r3, r1
 800488a:	d801      	bhi.n	8004890 <LL_I2C_ConfigSpeed+0x40>
 800488c:	1c63      	adds	r3, r4, #1
 800488e:	e008      	b.n	80048a2 <LL_I2C_ConfigSpeed+0x52>
 8004890:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8004894:	fb03 f304 	mul.w	r3, r3, r4
 8004898:	4934      	ldr	r1, [pc, #208]	; (800496c <LL_I2C_ConfigSpeed+0x11c>)
 800489a:	fba1 1303 	umull	r1, r3, r1, r3
 800489e:	099b      	lsrs	r3, r3, #6
 80048a0:	3301      	adds	r3, #1
 80048a2:	431a      	orrs	r2, r3
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	621a      	str	r2, [r3, #32]

  /* Configure Speed mode, Duty Cycle and Clock control register value */
  if (ClockSpeed > LL_I2C_MAX_SPEED_STANDARD)
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	4a2f      	ldr	r2, [pc, #188]	; (8004968 <LL_I2C_ConfigSpeed+0x118>)
 80048ac:	4293      	cmp	r3, r2
 80048ae:	d939      	bls.n	8004924 <LL_I2C_ConfigSpeed+0xd4>
  {
    /* Set Speed mode at fast and duty cycle for Clock Speed request in fast clock range */
    clockconfig = LL_I2C_CLOCK_SPEED_FAST_MODE                                          | \
 80048b0:	683b      	ldr	r3, [r7, #0]
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d117      	bne.n	80048e6 <LL_I2C_ConfigSpeed+0x96>
                  __LL_I2C_SPEED_FAST_TO_CCR(PeriphClock, ClockSpeed, DutyCycle)        | \
 80048b6:	687a      	ldr	r2, [r7, #4]
 80048b8:	4613      	mov	r3, r2
 80048ba:	005b      	lsls	r3, r3, #1
 80048bc:	4413      	add	r3, r2
 80048be:	68ba      	ldr	r2, [r7, #8]
 80048c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80048c4:	f3c3 030b 	ubfx	r3, r3, #0, #12
    clockconfig = LL_I2C_CLOCK_SPEED_FAST_MODE                                          | \
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d009      	beq.n	80048e0 <LL_I2C_ConfigSpeed+0x90>
                  __LL_I2C_SPEED_FAST_TO_CCR(PeriphClock, ClockSpeed, DutyCycle)        | \
 80048cc:	687a      	ldr	r2, [r7, #4]
 80048ce:	4613      	mov	r3, r2
 80048d0:	005b      	lsls	r3, r3, #1
 80048d2:	4413      	add	r3, r2
 80048d4:	68ba      	ldr	r2, [r7, #8]
 80048d6:	fbb2 f3f3 	udiv	r3, r2, r3
    clockconfig = LL_I2C_CLOCK_SPEED_FAST_MODE                                          | \
 80048da:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80048de:	e01d      	b.n	800491c <LL_I2C_ConfigSpeed+0xcc>
 80048e0:	f248 0301 	movw	r3, #32769	; 0x8001
 80048e4:	e01a      	b.n	800491c <LL_I2C_ConfigSpeed+0xcc>
                  __LL_I2C_SPEED_FAST_TO_CCR(PeriphClock, ClockSpeed, DutyCycle)        | \
 80048e6:	687a      	ldr	r2, [r7, #4]
 80048e8:	4613      	mov	r3, r2
 80048ea:	009b      	lsls	r3, r3, #2
 80048ec:	4413      	add	r3, r2
 80048ee:	009a      	lsls	r2, r3, #2
 80048f0:	4413      	add	r3, r2
 80048f2:	68ba      	ldr	r2, [r7, #8]
 80048f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80048f8:	f3c3 030b 	ubfx	r3, r3, #0, #12
    clockconfig = LL_I2C_CLOCK_SPEED_FAST_MODE                                          | \
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d00b      	beq.n	8004918 <LL_I2C_ConfigSpeed+0xc8>
                  __LL_I2C_SPEED_FAST_TO_CCR(PeriphClock, ClockSpeed, DutyCycle)        | \
 8004900:	687a      	ldr	r2, [r7, #4]
 8004902:	4613      	mov	r3, r2
 8004904:	009b      	lsls	r3, r3, #2
 8004906:	4413      	add	r3, r2
 8004908:	009a      	lsls	r2, r3, #2
 800490a:	4413      	add	r3, r2
 800490c:	68ba      	ldr	r2, [r7, #8]
 800490e:	fbb2 f3f3 	udiv	r3, r2, r3
    clockconfig = LL_I2C_CLOCK_SPEED_FAST_MODE                                          | \
 8004912:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004916:	e001      	b.n	800491c <LL_I2C_ConfigSpeed+0xcc>
 8004918:	f248 0301 	movw	r3, #32769	; 0x8001
 800491c:	683a      	ldr	r2, [r7, #0]
 800491e:	ea43 0402 	orr.w	r4, r3, r2
 8004922:	e010      	b.n	8004946 <LL_I2C_ConfigSpeed+0xf6>
  }
  else
  {
    /* Set Speed mode at standard for Clock Speed request in standard clock range */
    clockconfig = LL_I2C_CLOCK_SPEED_STANDARD_MODE                                      | \
                  __LL_I2C_SPEED_STANDARD_TO_CCR(PeriphClock, ClockSpeed);
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	005b      	lsls	r3, r3, #1
 8004928:	68ba      	ldr	r2, [r7, #8]
 800492a:	fbb2 f3f3 	udiv	r3, r2, r3
 800492e:	f3c3 030b 	ubfx	r3, r3, #0, #12
    clockconfig = LL_I2C_CLOCK_SPEED_STANDARD_MODE                                      | \
 8004932:	2b03      	cmp	r3, #3
 8004934:	d905      	bls.n	8004942 <LL_I2C_ConfigSpeed+0xf2>
                  __LL_I2C_SPEED_STANDARD_TO_CCR(PeriphClock, ClockSpeed);
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	005b      	lsls	r3, r3, #1
    clockconfig = LL_I2C_CLOCK_SPEED_STANDARD_MODE                                      | \
 800493a:	68ba      	ldr	r2, [r7, #8]
 800493c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004940:	e000      	b.n	8004944 <LL_I2C_ConfigSpeed+0xf4>
 8004942:	2304      	movs	r3, #4
 8004944:	461c      	mov	r4, r3
  }

  /* Configure I2Cx: Clock control register */
  MODIFY_REG(I2Cx->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), clockconfig);
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	69db      	ldr	r3, [r3, #28]
 800494a:	f423 434f 	bic.w	r3, r3, #52992	; 0xcf00
 800494e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004952:	ea44 0203 	orr.w	r2, r4, r3
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	61da      	str	r2, [r3, #28]
}
 800495a:	bf00      	nop
 800495c:	3710      	adds	r7, #16
 800495e:	46bd      	mov	sp, r7
 8004960:	bc90      	pop	{r4, r7}
 8004962:	4770      	bx	lr
 8004964:	431bde83 	.word	0x431bde83
 8004968:	000186a0 	.word	0x000186a0
 800496c:	10624dd3 	.word	0x10624dd3

08004970 <LL_I2C_SetMode>:
  *         @arg @ref LL_I2C_MODE_SMBUS_DEVICE
  *         @arg @ref LL_I2C_MODE_SMBUS_DEVICE_ARP
  * @retval None
  */
__STATIC_INLINE void LL_I2C_SetMode(I2C_TypeDef *I2Cx, uint32_t PeripheralMode)
{
 8004970:	b480      	push	{r7}
 8004972:	b083      	sub	sp, #12
 8004974:	af00      	add	r7, sp, #0
 8004976:	6078      	str	r0, [r7, #4]
 8004978:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->CR1, I2C_CR1_SMBUS | I2C_CR1_SMBTYPE | I2C_CR1_ENARP, PeripheralMode);
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	f023 021a 	bic.w	r2, r3, #26
 8004982:	683b      	ldr	r3, [r7, #0]
 8004984:	431a      	orrs	r2, r3
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	601a      	str	r2, [r3, #0]
}
 800498a:	bf00      	nop
 800498c:	370c      	adds	r7, #12
 800498e:	46bd      	mov	sp, r7
 8004990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004994:	4770      	bx	lr

08004996 <LL_I2C_AcknowledgeNextData>:
  *         @arg @ref LL_I2C_ACK
  *         @arg @ref LL_I2C_NACK
  * @retval None
  */
__STATIC_INLINE void LL_I2C_AcknowledgeNextData(I2C_TypeDef *I2Cx, uint32_t TypeAcknowledge)
{
 8004996:	b480      	push	{r7}
 8004998:	b083      	sub	sp, #12
 800499a:	af00      	add	r7, sp, #0
 800499c:	6078      	str	r0, [r7, #4]
 800499e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->CR1, I2C_CR1_ACK, TypeAcknowledge);
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80049a8:	683b      	ldr	r3, [r7, #0]
 80049aa:	431a      	orrs	r2, r3
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	601a      	str	r2, [r3, #0]
}
 80049b0:	bf00      	nop
 80049b2:	370c      	adds	r7, #12
 80049b4:	46bd      	mov	sp, r7
 80049b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ba:	4770      	bx	lr

080049bc <LL_I2C_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS  I2C registers are initialized
  *          - ERROR  Not applicable
  */
uint32_t LL_I2C_Init(I2C_TypeDef *I2Cx, LL_I2C_InitTypeDef *I2C_InitStruct)
{
 80049bc:	b580      	push	{r7, lr}
 80049be:	b086      	sub	sp, #24
 80049c0:	af00      	add	r7, sp, #0
 80049c2:	6078      	str	r0, [r7, #4]
 80049c4:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_I2C_OWN_ADDRESS1(I2C_InitStruct->OwnAddress1));
  assert_param(IS_LL_I2C_TYPE_ACKNOWLEDGE(I2C_InitStruct->TypeAcknowledge));
  assert_param(IS_LL_I2C_OWN_ADDRSIZE(I2C_InitStruct->OwnAddrSize));

  /* Disable the selected I2Cx Peripheral */
  LL_I2C_Disable(I2Cx);
 80049c6:	6878      	ldr	r0, [r7, #4]
 80049c8:	f7ff ff03 	bl	80047d2 <LL_I2C_Disable>

  /* Retrieve Clock frequencies */
  LL_RCC_GetSystemClocksFreq(&rcc_clocks);
 80049cc:	f107 0308 	add.w	r3, r7, #8
 80049d0:	4618      	mov	r0, r3
 80049d2:	f000 f89d 	bl	8004b10 <LL_RCC_GetSystemClocksFreq>
  /*---------------------------- I2Cx FLTR Configuration -----------------------
   * Configure the analog and digital noise filters with parameters :
   * - AnalogFilter: I2C_FLTR_ANFOFF bit
   * - DigitalFilter: I2C_FLTR_DNF[3:0] bits
   */
  LL_I2C_ConfigFilters(I2Cx, I2C_InitStruct->AnalogFilter, I2C_InitStruct->DigitalFilter);
 80049d6:	683b      	ldr	r3, [r7, #0]
 80049d8:	68d9      	ldr	r1, [r3, #12]
 80049da:	683b      	ldr	r3, [r7, #0]
 80049dc:	691b      	ldr	r3, [r3, #16]
 80049de:	461a      	mov	r2, r3
 80049e0:	6878      	ldr	r0, [r7, #4]
 80049e2:	f7ff ff06 	bl	80047f2 <LL_I2C_ConfigFilters>
   * Configure the SCL speed :
   * - ClockSpeed: I2C_CR2_FREQ[5:0], I2C_TRISE_TRISE[5:0], I2C_CCR_FS,
   *           and I2C_CCR_CCR[11:0] bits
   * - DutyCycle: I2C_CCR_DUTY[7:0] bits
   */
  LL_I2C_ConfigSpeed(I2Cx, rcc_clocks.PCLK1_Frequency, I2C_InitStruct->ClockSpeed, I2C_InitStruct->DutyCycle);
 80049e6:	6939      	ldr	r1, [r7, #16]
 80049e8:	683b      	ldr	r3, [r7, #0]
 80049ea:	685a      	ldr	r2, [r3, #4]
 80049ec:	683b      	ldr	r3, [r7, #0]
 80049ee:	689b      	ldr	r3, [r3, #8]
 80049f0:	6878      	ldr	r0, [r7, #4]
 80049f2:	f7ff ff2d 	bl	8004850 <LL_I2C_ConfigSpeed>
  /*---------------------------- I2Cx OAR1 Configuration -----------------------
   * Disable, Configure and Enable I2Cx device own address 1 with parameters :
   * - OwnAddress1:  I2C_OAR1_ADD[9:8], I2C_OAR1_ADD[7:1] and I2C_OAR1_ADD0 bits
   * - OwnAddrSize:  I2C_OAR1_ADDMODE bit
   */
  LL_I2C_SetOwnAddress1(I2Cx, I2C_InitStruct->OwnAddress1, I2C_InitStruct->OwnAddrSize);
 80049f6:	683b      	ldr	r3, [r7, #0]
 80049f8:	6959      	ldr	r1, [r3, #20]
 80049fa:	683b      	ldr	r3, [r7, #0]
 80049fc:	69db      	ldr	r3, [r3, #28]
 80049fe:	461a      	mov	r2, r3
 8004a00:	6878      	ldr	r0, [r7, #4]
 8004a02:	f7ff ff0c 	bl	800481e <LL_I2C_SetOwnAddress1>

  /*---------------------------- I2Cx MODE Configuration -----------------------
  * Configure I2Cx peripheral mode with parameter :
   * - PeripheralMode: I2C_CR1_SMBUS, I2C_CR1_SMBTYPE and I2C_CR1_ENARP bits
   */
  LL_I2C_SetMode(I2Cx, I2C_InitStruct->PeripheralMode);
 8004a06:	683b      	ldr	r3, [r7, #0]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	4619      	mov	r1, r3
 8004a0c:	6878      	ldr	r0, [r7, #4]
 8004a0e:	f7ff ffaf 	bl	8004970 <LL_I2C_SetMode>

  /* Enable the selected I2Cx Peripheral */
  LL_I2C_Enable(I2Cx);
 8004a12:	6878      	ldr	r0, [r7, #4]
 8004a14:	f7ff fecd 	bl	80047b2 <LL_I2C_Enable>
  /*---------------------------- I2Cx CR2 Configuration ------------------------
   * Configure the ACKnowledge or Non ACKnowledge condition
   * after the address receive match code or next received byte with parameter :
   * - TypeAcknowledge: I2C_CR2_NACK bit
   */
  LL_I2C_AcknowledgeNextData(I2Cx, I2C_InitStruct->TypeAcknowledge);
 8004a18:	683b      	ldr	r3, [r7, #0]
 8004a1a:	699b      	ldr	r3, [r3, #24]
 8004a1c:	4619      	mov	r1, r3
 8004a1e:	6878      	ldr	r0, [r7, #4]
 8004a20:	f7ff ffb9 	bl	8004996 <LL_I2C_AcknowledgeNextData>

  return SUCCESS;
 8004a24:	2300      	movs	r3, #0
}
 8004a26:	4618      	mov	r0, r3
 8004a28:	3718      	adds	r7, #24
 8004a2a:	46bd      	mov	sp, r7
 8004a2c:	bd80      	pop	{r7, pc}
	...

08004a30 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLLR (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8004a30:	b480      	push	{r7}
 8004a32:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8004a34:	4b04      	ldr	r3, [pc, #16]	; (8004a48 <LL_RCC_GetSysClkSource+0x18>)
 8004a36:	689b      	ldr	r3, [r3, #8]
 8004a38:	f003 030c 	and.w	r3, r3, #12
}
 8004a3c:	4618      	mov	r0, r3
 8004a3e:	46bd      	mov	sp, r7
 8004a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a44:	4770      	bx	lr
 8004a46:	bf00      	nop
 8004a48:	40023800 	.word	0x40023800

08004a4c <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 8004a4c:	b480      	push	{r7}
 8004a4e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8004a50:	4b04      	ldr	r3, [pc, #16]	; (8004a64 <LL_RCC_GetAHBPrescaler+0x18>)
 8004a52:	689b      	ldr	r3, [r3, #8]
 8004a54:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8004a58:	4618      	mov	r0, r3
 8004a5a:	46bd      	mov	sp, r7
 8004a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a60:	4770      	bx	lr
 8004a62:	bf00      	nop
 8004a64:	40023800 	.word	0x40023800

08004a68 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8004a68:	b480      	push	{r7}
 8004a6a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8004a6c:	4b04      	ldr	r3, [pc, #16]	; (8004a80 <LL_RCC_GetAPB1Prescaler+0x18>)
 8004a6e:	689b      	ldr	r3, [r3, #8]
 8004a70:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
}
 8004a74:	4618      	mov	r0, r3
 8004a76:	46bd      	mov	sp, r7
 8004a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a7c:	4770      	bx	lr
 8004a7e:	bf00      	nop
 8004a80:	40023800 	.word	0x40023800

08004a84 <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 8004a84:	b480      	push	{r7}
 8004a86:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8004a88:	4b04      	ldr	r3, [pc, #16]	; (8004a9c <LL_RCC_GetAPB2Prescaler+0x18>)
 8004a8a:	689b      	ldr	r3, [r3, #8]
 8004a8c:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 8004a90:	4618      	mov	r0, r3
 8004a92:	46bd      	mov	sp, r7
 8004a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a98:	4770      	bx	lr
 8004a9a:	bf00      	nop
 8004a9c:	40023800 	.word	0x40023800

08004aa0 <LL_RCC_PLL_GetMainSource>:
  * @retval Returned value can be one of the following values:
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8004aa0:	b480      	push	{r7}
 8004aa2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8004aa4:	4b04      	ldr	r3, [pc, #16]	; (8004ab8 <LL_RCC_PLL_GetMainSource+0x18>)
 8004aa6:	685b      	ldr	r3, [r3, #4]
 8004aa8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
}
 8004aac:	4618      	mov	r0, r3
 8004aae:	46bd      	mov	sp, r7
 8004ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ab4:	4770      	bx	lr
 8004ab6:	bf00      	nop
 8004ab8:	40023800 	.word	0x40023800

08004abc <LL_RCC_PLL_GetN>:
  * @retval Between 50/192(*) and 432
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8004abc:	b480      	push	{r7}
 8004abe:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8004ac0:	4b04      	ldr	r3, [pc, #16]	; (8004ad4 <LL_RCC_PLL_GetN+0x18>)
 8004ac2:	685b      	ldr	r3, [r3, #4]
 8004ac4:	099b      	lsrs	r3, r3, #6
 8004ac6:	f3c3 0308 	ubfx	r3, r3, #0, #9
}
 8004aca:	4618      	mov	r0, r3
 8004acc:	46bd      	mov	sp, r7
 8004ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad2:	4770      	bx	lr
 8004ad4:	40023800 	.word	0x40023800

08004ad8 <LL_RCC_PLL_GetP>:
  *         @arg @ref LL_RCC_PLLP_DIV_4
  *         @arg @ref LL_RCC_PLLP_DIV_6
  *         @arg @ref LL_RCC_PLLP_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetP(void)
{
 8004ad8:	b480      	push	{r7}
 8004ada:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP));
 8004adc:	4b04      	ldr	r3, [pc, #16]	; (8004af0 <LL_RCC_PLL_GetP+0x18>)
 8004ade:	685b      	ldr	r3, [r3, #4]
 8004ae0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
}
 8004ae4:	4618      	mov	r0, r3
 8004ae6:	46bd      	mov	sp, r7
 8004ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aec:	4770      	bx	lr
 8004aee:	bf00      	nop
 8004af0:	40023800 	.word	0x40023800

08004af4 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_61
  *         @arg @ref LL_RCC_PLLM_DIV_62
  *         @arg @ref LL_RCC_PLLM_DIV_63
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8004af4:	b480      	push	{r7}
 8004af6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8004af8:	4b04      	ldr	r3, [pc, #16]	; (8004b0c <LL_RCC_PLL_GetDivider+0x18>)
 8004afa:	685b      	ldr	r3, [r3, #4]
 8004afc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
}
 8004b00:	4618      	mov	r0, r3
 8004b02:	46bd      	mov	sp, r7
 8004b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b08:	4770      	bx	lr
 8004b0a:	bf00      	nop
 8004b0c:	40023800 	.word	0x40023800

08004b10 <LL_RCC_GetSystemClocksFreq>:
  *         configuration based on this function will be incorrect.
  * @param  RCC_Clocks pointer to a @ref LL_RCC_ClocksTypeDef structure which will hold the clocks frequencies
  * @retval None
  */
void LL_RCC_GetSystemClocksFreq(LL_RCC_ClocksTypeDef *RCC_Clocks)
{
 8004b10:	b580      	push	{r7, lr}
 8004b12:	b082      	sub	sp, #8
 8004b14:	af00      	add	r7, sp, #0
 8004b16:	6078      	str	r0, [r7, #4]
  /* Get SYSCLK frequency */
  RCC_Clocks->SYSCLK_Frequency = RCC_GetSystemClockFreq();
 8004b18:	f000 f820 	bl	8004b5c <RCC_GetSystemClockFreq>
 8004b1c:	4602      	mov	r2, r0
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	601a      	str	r2, [r3, #0]

  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency   = RCC_GetHCLKClockFreq(RCC_Clocks->SYSCLK_Frequency);
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	4618      	mov	r0, r3
 8004b28:	f000 f83e 	bl	8004ba8 <RCC_GetHCLKClockFreq>
 8004b2c:	4602      	mov	r2, r0
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	605a      	str	r2, [r3, #4]

  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency  = RCC_GetPCLK1ClockFreq(RCC_Clocks->HCLK_Frequency);
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	685b      	ldr	r3, [r3, #4]
 8004b36:	4618      	mov	r0, r3
 8004b38:	f000 f84c 	bl	8004bd4 <RCC_GetPCLK1ClockFreq>
 8004b3c:	4602      	mov	r2, r0
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	609a      	str	r2, [r3, #8]

  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency  = RCC_GetPCLK2ClockFreq(RCC_Clocks->HCLK_Frequency);
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	685b      	ldr	r3, [r3, #4]
 8004b46:	4618      	mov	r0, r3
 8004b48:	f000 f858 	bl	8004bfc <RCC_GetPCLK2ClockFreq>
 8004b4c:	4602      	mov	r2, r0
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	60da      	str	r2, [r3, #12]
}
 8004b52:	bf00      	nop
 8004b54:	3708      	adds	r7, #8
 8004b56:	46bd      	mov	sp, r7
 8004b58:	bd80      	pop	{r7, pc}
	...

08004b5c <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
uint32_t RCC_GetSystemClockFreq(void)
{
 8004b5c:	b580      	push	{r7, lr}
 8004b5e:	b082      	sub	sp, #8
 8004b60:	af00      	add	r7, sp, #0
  uint32_t frequency = 0U;
 8004b62:	2300      	movs	r3, #0
 8004b64:	607b      	str	r3, [r7, #4]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 8004b66:	f7ff ff63 	bl	8004a30 <LL_RCC_GetSysClkSource>
 8004b6a:	4603      	mov	r3, r0
 8004b6c:	2b04      	cmp	r3, #4
 8004b6e:	d006      	beq.n	8004b7e <RCC_GetSystemClockFreq+0x22>
 8004b70:	2b08      	cmp	r3, #8
 8004b72:	d007      	beq.n	8004b84 <RCC_GetSystemClockFreq+0x28>
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d10a      	bne.n	8004b8e <RCC_GetSystemClockFreq+0x32>
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 8004b78:	4b09      	ldr	r3, [pc, #36]	; (8004ba0 <RCC_GetSystemClockFreq+0x44>)
 8004b7a:	607b      	str	r3, [r7, #4]
      break;
 8004b7c:	e00a      	b.n	8004b94 <RCC_GetSystemClockFreq+0x38>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 8004b7e:	4b09      	ldr	r3, [pc, #36]	; (8004ba4 <RCC_GetSystemClockFreq+0x48>)
 8004b80:	607b      	str	r3, [r7, #4]
      break;
 8004b82:	e007      	b.n	8004b94 <RCC_GetSystemClockFreq+0x38>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS(LL_RCC_SYS_CLKSOURCE_STATUS_PLL);
 8004b84:	2008      	movs	r0, #8
 8004b86:	f000 f84d 	bl	8004c24 <RCC_PLL_GetFreqDomain_SYS>
 8004b8a:	6078      	str	r0, [r7, #4]
      break;
 8004b8c:	e002      	b.n	8004b94 <RCC_GetSystemClockFreq+0x38>
      frequency = RCC_PLL_GetFreqDomain_SYS(LL_RCC_SYS_CLKSOURCE_STATUS_PLLR);
      break;
#endif /* RCC_PLLR_SYSCLK_SUPPORT */

    default:
      frequency = HSI_VALUE;
 8004b8e:	4b04      	ldr	r3, [pc, #16]	; (8004ba0 <RCC_GetSystemClockFreq+0x44>)
 8004b90:	607b      	str	r3, [r7, #4]
      break;
 8004b92:	bf00      	nop
  }

  return frequency;
 8004b94:	687b      	ldr	r3, [r7, #4]
}
 8004b96:	4618      	mov	r0, r3
 8004b98:	3708      	adds	r7, #8
 8004b9a:	46bd      	mov	sp, r7
 8004b9c:	bd80      	pop	{r7, pc}
 8004b9e:	bf00      	nop
 8004ba0:	00f42400 	.word	0x00f42400
 8004ba4:	007a1200 	.word	0x007a1200

08004ba8 <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 8004ba8:	b580      	push	{r7, lr}
 8004baa:	b082      	sub	sp, #8
 8004bac:	af00      	add	r7, sp, #0
 8004bae:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 8004bb0:	f7ff ff4c 	bl	8004a4c <LL_RCC_GetAHBPrescaler>
 8004bb4:	4603      	mov	r3, r0
 8004bb6:	091b      	lsrs	r3, r3, #4
 8004bb8:	f003 030f 	and.w	r3, r3, #15
 8004bbc:	4a04      	ldr	r2, [pc, #16]	; (8004bd0 <RCC_GetHCLKClockFreq+0x28>)
 8004bbe:	5cd3      	ldrb	r3, [r2, r3]
 8004bc0:	461a      	mov	r2, r3
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	40d3      	lsrs	r3, r2
}
 8004bc6:	4618      	mov	r0, r3
 8004bc8:	3708      	adds	r7, #8
 8004bca:	46bd      	mov	sp, r7
 8004bcc:	bd80      	pop	{r7, pc}
 8004bce:	bf00      	nop
 8004bd0:	08009e20 	.word	0x08009e20

08004bd4 <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 8004bd4:	b580      	push	{r7, lr}
 8004bd6:	b082      	sub	sp, #8
 8004bd8:	af00      	add	r7, sp, #0
 8004bda:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 8004bdc:	f7ff ff44 	bl	8004a68 <LL_RCC_GetAPB1Prescaler>
 8004be0:	4603      	mov	r3, r0
 8004be2:	0a9b      	lsrs	r3, r3, #10
 8004be4:	4a04      	ldr	r2, [pc, #16]	; (8004bf8 <RCC_GetPCLK1ClockFreq+0x24>)
 8004be6:	5cd3      	ldrb	r3, [r2, r3]
 8004be8:	461a      	mov	r2, r3
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	40d3      	lsrs	r3, r2
}
 8004bee:	4618      	mov	r0, r3
 8004bf0:	3708      	adds	r7, #8
 8004bf2:	46bd      	mov	sp, r7
 8004bf4:	bd80      	pop	{r7, pc}
 8004bf6:	bf00      	nop
 8004bf8:	08009e30 	.word	0x08009e30

08004bfc <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 8004bfc:	b580      	push	{r7, lr}
 8004bfe:	b082      	sub	sp, #8
 8004c00:	af00      	add	r7, sp, #0
 8004c02:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 8004c04:	f7ff ff3e 	bl	8004a84 <LL_RCC_GetAPB2Prescaler>
 8004c08:	4603      	mov	r3, r0
 8004c0a:	0b5b      	lsrs	r3, r3, #13
 8004c0c:	4a04      	ldr	r2, [pc, #16]	; (8004c20 <RCC_GetPCLK2ClockFreq+0x24>)
 8004c0e:	5cd3      	ldrb	r3, [r2, r3]
 8004c10:	461a      	mov	r2, r3
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	40d3      	lsrs	r3, r2
}
 8004c16:	4618      	mov	r0, r3
 8004c18:	3708      	adds	r7, #8
 8004c1a:	46bd      	mov	sp, r7
 8004c1c:	bd80      	pop	{r7, pc}
 8004c1e:	bf00      	nop
 8004c20:	08009e30 	.word	0x08009e30

08004c24 <RCC_PLL_GetFreqDomain_SYS>:
  * @brief  Return PLL clock frequency used for system domain
  * @param  SYSCLK_Source System clock source
  * @retval PLL clock frequency (in Hz)
  */
uint32_t RCC_PLL_GetFreqDomain_SYS(uint32_t SYSCLK_Source)
{
 8004c24:	b590      	push	{r4, r7, lr}
 8004c26:	b087      	sub	sp, #28
 8004c28:	af00      	add	r7, sp, #0
 8004c2a:	6078      	str	r0, [r7, #4]
  uint32_t pllinputfreq = 0U, pllsource = 0U, plloutputfreq = 0U;
 8004c2c:	2300      	movs	r3, #0
 8004c2e:	617b      	str	r3, [r7, #20]
 8004c30:	2300      	movs	r3, #0
 8004c32:	60fb      	str	r3, [r7, #12]
 8004c34:	2300      	movs	r3, #0
 8004c36:	613b      	str	r3, [r7, #16]

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
     SYSCLK = PLL_VCO / (PLLP or PLLR)
  */
  pllsource = LL_RCC_PLL_GetMainSource();
 8004c38:	f7ff ff32 	bl	8004aa0 <LL_RCC_PLL_GetMainSource>
 8004c3c:	60f8      	str	r0, [r7, #12]

  switch (pllsource)
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d003      	beq.n	8004c4c <RCC_PLL_GetFreqDomain_SYS+0x28>
 8004c44:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004c48:	d003      	beq.n	8004c52 <RCC_PLL_GetFreqDomain_SYS+0x2e>
 8004c4a:	e005      	b.n	8004c58 <RCC_PLL_GetFreqDomain_SYS+0x34>
  {
    case LL_RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
 8004c4c:	4b12      	ldr	r3, [pc, #72]	; (8004c98 <RCC_PLL_GetFreqDomain_SYS+0x74>)
 8004c4e:	617b      	str	r3, [r7, #20]
      break;
 8004c50:	e005      	b.n	8004c5e <RCC_PLL_GetFreqDomain_SYS+0x3a>

    case LL_RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 8004c52:	4b12      	ldr	r3, [pc, #72]	; (8004c9c <RCC_PLL_GetFreqDomain_SYS+0x78>)
 8004c54:	617b      	str	r3, [r7, #20]
      break;
 8004c56:	e002      	b.n	8004c5e <RCC_PLL_GetFreqDomain_SYS+0x3a>

    default:
      pllinputfreq = HSI_VALUE;
 8004c58:	4b0f      	ldr	r3, [pc, #60]	; (8004c98 <RCC_PLL_GetFreqDomain_SYS+0x74>)
 8004c5a:	617b      	str	r3, [r7, #20]
      break;
 8004c5c:	bf00      	nop
  }

  if (SYSCLK_Source == LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	2b08      	cmp	r3, #8
 8004c62:	d113      	bne.n	8004c8c <RCC_PLL_GetFreqDomain_SYS+0x68>
  {
    plloutputfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8004c64:	f7ff ff46 	bl	8004af4 <LL_RCC_PLL_GetDivider>
 8004c68:	4602      	mov	r2, r0
 8004c6a:	697b      	ldr	r3, [r7, #20]
 8004c6c:	fbb3 f4f2 	udiv	r4, r3, r2
 8004c70:	f7ff ff24 	bl	8004abc <LL_RCC_PLL_GetN>
 8004c74:	4603      	mov	r3, r0
 8004c76:	fb03 f404 	mul.w	r4, r3, r4
 8004c7a:	f7ff ff2d 	bl	8004ad8 <LL_RCC_PLL_GetP>
 8004c7e:	4603      	mov	r3, r0
 8004c80:	0c1b      	lsrs	r3, r3, #16
 8004c82:	3301      	adds	r3, #1
 8004c84:	005b      	lsls	r3, r3, #1
 8004c86:	fbb4 f3f3 	udiv	r3, r4, r3
 8004c8a:	613b      	str	r3, [r7, #16]
    plloutputfreq = __LL_RCC_CALC_PLLRCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
                                        LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }
#endif /* RCC_PLLR_SYSCLK_SUPPORT */

  return plloutputfreq;
 8004c8c:	693b      	ldr	r3, [r7, #16]
}
 8004c8e:	4618      	mov	r0, r3
 8004c90:	371c      	adds	r7, #28
 8004c92:	46bd      	mov	sp, r7
 8004c94:	bd90      	pop	{r4, r7, pc}
 8004c96:	bf00      	nop
 8004c98:	00f42400 	.word	0x00f42400
 8004c9c:	007a1200 	.word	0x007a1200

08004ca0 <LL_USART_IsEnabled>:
{
 8004ca0:	b480      	push	{r7}
 8004ca2:	b083      	sub	sp, #12
 8004ca4:	af00      	add	r7, sp, #0
 8004ca6:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE));
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	68db      	ldr	r3, [r3, #12]
 8004cac:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004cb0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004cb4:	bf0c      	ite	eq
 8004cb6:	2301      	moveq	r3, #1
 8004cb8:	2300      	movne	r3, #0
 8004cba:	b2db      	uxtb	r3, r3
}
 8004cbc:	4618      	mov	r0, r3
 8004cbe:	370c      	adds	r7, #12
 8004cc0:	46bd      	mov	sp, r7
 8004cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cc6:	4770      	bx	lr

08004cc8 <LL_USART_SetStopBitsLength>:
{
 8004cc8:	b480      	push	{r7}
 8004cca:	b083      	sub	sp, #12
 8004ccc:	af00      	add	r7, sp, #0
 8004cce:	6078      	str	r0, [r7, #4]
 8004cd0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	691b      	ldr	r3, [r3, #16]
 8004cd6:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004cda:	683b      	ldr	r3, [r7, #0]
 8004cdc:	431a      	orrs	r2, r3
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	611a      	str	r2, [r3, #16]
}
 8004ce2:	bf00      	nop
 8004ce4:	370c      	adds	r7, #12
 8004ce6:	46bd      	mov	sp, r7
 8004ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cec:	4770      	bx	lr

08004cee <LL_USART_SetHWFlowCtrl>:
{
 8004cee:	b480      	push	{r7}
 8004cf0:	b083      	sub	sp, #12
 8004cf2:	af00      	add	r7, sp, #0
 8004cf4:	6078      	str	r0, [r7, #4]
 8004cf6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	695b      	ldr	r3, [r3, #20]
 8004cfc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004d00:	683b      	ldr	r3, [r7, #0]
 8004d02:	431a      	orrs	r2, r3
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	615a      	str	r2, [r3, #20]
}
 8004d08:	bf00      	nop
 8004d0a:	370c      	adds	r7, #12
 8004d0c:	46bd      	mov	sp, r7
 8004d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d12:	4770      	bx	lr

08004d14 <LL_USART_SetBaudRate>:
{
 8004d14:	b480      	push	{r7}
 8004d16:	b085      	sub	sp, #20
 8004d18:	af00      	add	r7, sp, #0
 8004d1a:	60f8      	str	r0, [r7, #12]
 8004d1c:	60b9      	str	r1, [r7, #8]
 8004d1e:	607a      	str	r2, [r7, #4]
 8004d20:	603b      	str	r3, [r7, #0]
  if (OverSampling == LL_USART_OVERSAMPLING_8)
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004d28:	d152      	bne.n	8004dd0 <LL_USART_SetBaudRate+0xbc>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
 8004d2a:	68ba      	ldr	r2, [r7, #8]
 8004d2c:	4613      	mov	r3, r2
 8004d2e:	009b      	lsls	r3, r3, #2
 8004d30:	4413      	add	r3, r2
 8004d32:	009a      	lsls	r2, r3, #2
 8004d34:	441a      	add	r2, r3
 8004d36:	683b      	ldr	r3, [r7, #0]
 8004d38:	005b      	lsls	r3, r3, #1
 8004d3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d3e:	4a4f      	ldr	r2, [pc, #316]	; (8004e7c <LL_USART_SetBaudRate+0x168>)
 8004d40:	fba2 2303 	umull	r2, r3, r2, r3
 8004d44:	095b      	lsrs	r3, r3, #5
 8004d46:	b29b      	uxth	r3, r3
 8004d48:	011b      	lsls	r3, r3, #4
 8004d4a:	b299      	uxth	r1, r3
 8004d4c:	68ba      	ldr	r2, [r7, #8]
 8004d4e:	4613      	mov	r3, r2
 8004d50:	009b      	lsls	r3, r3, #2
 8004d52:	4413      	add	r3, r2
 8004d54:	009a      	lsls	r2, r3, #2
 8004d56:	441a      	add	r2, r3
 8004d58:	683b      	ldr	r3, [r7, #0]
 8004d5a:	005b      	lsls	r3, r3, #1
 8004d5c:	fbb2 f2f3 	udiv	r2, r2, r3
 8004d60:	4b46      	ldr	r3, [pc, #280]	; (8004e7c <LL_USART_SetBaudRate+0x168>)
 8004d62:	fba3 0302 	umull	r0, r3, r3, r2
 8004d66:	095b      	lsrs	r3, r3, #5
 8004d68:	2064      	movs	r0, #100	; 0x64
 8004d6a:	fb00 f303 	mul.w	r3, r0, r3
 8004d6e:	1ad3      	subs	r3, r2, r3
 8004d70:	00db      	lsls	r3, r3, #3
 8004d72:	3332      	adds	r3, #50	; 0x32
 8004d74:	4a41      	ldr	r2, [pc, #260]	; (8004e7c <LL_USART_SetBaudRate+0x168>)
 8004d76:	fba2 2303 	umull	r2, r3, r2, r3
 8004d7a:	095b      	lsrs	r3, r3, #5
 8004d7c:	b29b      	uxth	r3, r3
 8004d7e:	005b      	lsls	r3, r3, #1
 8004d80:	b29b      	uxth	r3, r3
 8004d82:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004d86:	b29b      	uxth	r3, r3
 8004d88:	440b      	add	r3, r1
 8004d8a:	b299      	uxth	r1, r3
 8004d8c:	68ba      	ldr	r2, [r7, #8]
 8004d8e:	4613      	mov	r3, r2
 8004d90:	009b      	lsls	r3, r3, #2
 8004d92:	4413      	add	r3, r2
 8004d94:	009a      	lsls	r2, r3, #2
 8004d96:	441a      	add	r2, r3
 8004d98:	683b      	ldr	r3, [r7, #0]
 8004d9a:	005b      	lsls	r3, r3, #1
 8004d9c:	fbb2 f2f3 	udiv	r2, r2, r3
 8004da0:	4b36      	ldr	r3, [pc, #216]	; (8004e7c <LL_USART_SetBaudRate+0x168>)
 8004da2:	fba3 0302 	umull	r0, r3, r3, r2
 8004da6:	095b      	lsrs	r3, r3, #5
 8004da8:	2064      	movs	r0, #100	; 0x64
 8004daa:	fb00 f303 	mul.w	r3, r0, r3
 8004dae:	1ad3      	subs	r3, r2, r3
 8004db0:	00db      	lsls	r3, r3, #3
 8004db2:	3332      	adds	r3, #50	; 0x32
 8004db4:	4a31      	ldr	r2, [pc, #196]	; (8004e7c <LL_USART_SetBaudRate+0x168>)
 8004db6:	fba2 2303 	umull	r2, r3, r2, r3
 8004dba:	095b      	lsrs	r3, r3, #5
 8004dbc:	b29b      	uxth	r3, r3
 8004dbe:	f003 0307 	and.w	r3, r3, #7
 8004dc2:	b29b      	uxth	r3, r3
 8004dc4:	440b      	add	r3, r1
 8004dc6:	b29b      	uxth	r3, r3
 8004dc8:	461a      	mov	r2, r3
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	609a      	str	r2, [r3, #8]
}
 8004dce:	e04f      	b.n	8004e70 <LL_USART_SetBaudRate+0x15c>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 8004dd0:	68ba      	ldr	r2, [r7, #8]
 8004dd2:	4613      	mov	r3, r2
 8004dd4:	009b      	lsls	r3, r3, #2
 8004dd6:	4413      	add	r3, r2
 8004dd8:	009a      	lsls	r2, r3, #2
 8004dda:	441a      	add	r2, r3
 8004ddc:	683b      	ldr	r3, [r7, #0]
 8004dde:	009b      	lsls	r3, r3, #2
 8004de0:	fbb2 f3f3 	udiv	r3, r2, r3
 8004de4:	4a25      	ldr	r2, [pc, #148]	; (8004e7c <LL_USART_SetBaudRate+0x168>)
 8004de6:	fba2 2303 	umull	r2, r3, r2, r3
 8004dea:	095b      	lsrs	r3, r3, #5
 8004dec:	b29b      	uxth	r3, r3
 8004dee:	011b      	lsls	r3, r3, #4
 8004df0:	b299      	uxth	r1, r3
 8004df2:	68ba      	ldr	r2, [r7, #8]
 8004df4:	4613      	mov	r3, r2
 8004df6:	009b      	lsls	r3, r3, #2
 8004df8:	4413      	add	r3, r2
 8004dfa:	009a      	lsls	r2, r3, #2
 8004dfc:	441a      	add	r2, r3
 8004dfe:	683b      	ldr	r3, [r7, #0]
 8004e00:	009b      	lsls	r3, r3, #2
 8004e02:	fbb2 f2f3 	udiv	r2, r2, r3
 8004e06:	4b1d      	ldr	r3, [pc, #116]	; (8004e7c <LL_USART_SetBaudRate+0x168>)
 8004e08:	fba3 0302 	umull	r0, r3, r3, r2
 8004e0c:	095b      	lsrs	r3, r3, #5
 8004e0e:	2064      	movs	r0, #100	; 0x64
 8004e10:	fb00 f303 	mul.w	r3, r0, r3
 8004e14:	1ad3      	subs	r3, r2, r3
 8004e16:	011b      	lsls	r3, r3, #4
 8004e18:	3332      	adds	r3, #50	; 0x32
 8004e1a:	4a18      	ldr	r2, [pc, #96]	; (8004e7c <LL_USART_SetBaudRate+0x168>)
 8004e1c:	fba2 2303 	umull	r2, r3, r2, r3
 8004e20:	095b      	lsrs	r3, r3, #5
 8004e22:	b29b      	uxth	r3, r3
 8004e24:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004e28:	b29b      	uxth	r3, r3
 8004e2a:	440b      	add	r3, r1
 8004e2c:	b299      	uxth	r1, r3
 8004e2e:	68ba      	ldr	r2, [r7, #8]
 8004e30:	4613      	mov	r3, r2
 8004e32:	009b      	lsls	r3, r3, #2
 8004e34:	4413      	add	r3, r2
 8004e36:	009a      	lsls	r2, r3, #2
 8004e38:	441a      	add	r2, r3
 8004e3a:	683b      	ldr	r3, [r7, #0]
 8004e3c:	009b      	lsls	r3, r3, #2
 8004e3e:	fbb2 f2f3 	udiv	r2, r2, r3
 8004e42:	4b0e      	ldr	r3, [pc, #56]	; (8004e7c <LL_USART_SetBaudRate+0x168>)
 8004e44:	fba3 0302 	umull	r0, r3, r3, r2
 8004e48:	095b      	lsrs	r3, r3, #5
 8004e4a:	2064      	movs	r0, #100	; 0x64
 8004e4c:	fb00 f303 	mul.w	r3, r0, r3
 8004e50:	1ad3      	subs	r3, r2, r3
 8004e52:	011b      	lsls	r3, r3, #4
 8004e54:	3332      	adds	r3, #50	; 0x32
 8004e56:	4a09      	ldr	r2, [pc, #36]	; (8004e7c <LL_USART_SetBaudRate+0x168>)
 8004e58:	fba2 2303 	umull	r2, r3, r2, r3
 8004e5c:	095b      	lsrs	r3, r3, #5
 8004e5e:	b29b      	uxth	r3, r3
 8004e60:	f003 030f 	and.w	r3, r3, #15
 8004e64:	b29b      	uxth	r3, r3
 8004e66:	440b      	add	r3, r1
 8004e68:	b29b      	uxth	r3, r3
 8004e6a:	461a      	mov	r2, r3
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	609a      	str	r2, [r3, #8]
}
 8004e70:	bf00      	nop
 8004e72:	3714      	adds	r7, #20
 8004e74:	46bd      	mov	sp, r7
 8004e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e7a:	4770      	bx	lr
 8004e7c:	51eb851f 	.word	0x51eb851f

08004e80 <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, LL_USART_InitTypeDef *USART_InitStruct)
{
 8004e80:	b580      	push	{r7, lr}
 8004e82:	b088      	sub	sp, #32
 8004e84:	af00      	add	r7, sp, #0
 8004e86:	6078      	str	r0, [r7, #4]
 8004e88:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 8004e8a:	2301      	movs	r3, #1
 8004e8c:	77fb      	strb	r3, [r7, #31]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 8004e8e:	2300      	movs	r3, #0
 8004e90:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 8004e92:	6878      	ldr	r0, [r7, #4]
 8004e94:	f7ff ff04 	bl	8004ca0 <LL_USART_IsEnabled>
 8004e98:	4603      	mov	r3, r0
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d16c      	bne.n	8004f78 <LL_USART_Init+0xf8>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	68db      	ldr	r3, [r3, #12]
 8004ea2:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8004ea6:	f023 030c 	bic.w	r3, r3, #12
 8004eaa:	683a      	ldr	r2, [r7, #0]
 8004eac:	6851      	ldr	r1, [r2, #4]
 8004eae:	683a      	ldr	r2, [r7, #0]
 8004eb0:	68d2      	ldr	r2, [r2, #12]
 8004eb2:	4311      	orrs	r1, r2
 8004eb4:	683a      	ldr	r2, [r7, #0]
 8004eb6:	6912      	ldr	r2, [r2, #16]
 8004eb8:	4311      	orrs	r1, r2
 8004eba:	683a      	ldr	r2, [r7, #0]
 8004ebc:	6992      	ldr	r2, [r2, #24]
 8004ebe:	430a      	orrs	r2, r1
 8004ec0:	431a      	orrs	r2, r3
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	60da      	str	r2, [r3, #12]
    /*---------------------------- USART CR2 Configuration -----------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 8004ec6:	683b      	ldr	r3, [r7, #0]
 8004ec8:	689b      	ldr	r3, [r3, #8]
 8004eca:	4619      	mov	r1, r3
 8004ecc:	6878      	ldr	r0, [r7, #4]
 8004ece:	f7ff fefb 	bl	8004cc8 <LL_USART_SetStopBitsLength>

    /*---------------------------- USART CR3 Configuration -----------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 8004ed2:	683b      	ldr	r3, [r7, #0]
 8004ed4:	695b      	ldr	r3, [r3, #20]
 8004ed6:	4619      	mov	r1, r3
 8004ed8:	6878      	ldr	r0, [r7, #4]
 8004eda:	f7ff ff08 	bl	8004cee <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration -----------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    LL_RCC_GetSystemClocksFreq(&rcc_clocks);
 8004ede:	f107 0308 	add.w	r3, r7, #8
 8004ee2:	4618      	mov	r0, r3
 8004ee4:	f7ff fe14 	bl	8004b10 <LL_RCC_GetSystemClocksFreq>
    if (USARTx == USART1)
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	4a26      	ldr	r2, [pc, #152]	; (8004f84 <LL_USART_Init+0x104>)
 8004eec:	4293      	cmp	r3, r2
 8004eee:	d102      	bne.n	8004ef6 <LL_USART_Init+0x76>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 8004ef0:	697b      	ldr	r3, [r7, #20]
 8004ef2:	61bb      	str	r3, [r7, #24]
 8004ef4:	e02f      	b.n	8004f56 <LL_USART_Init+0xd6>
    }
    else if (USARTx == USART2)
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	4a23      	ldr	r2, [pc, #140]	; (8004f88 <LL_USART_Init+0x108>)
 8004efa:	4293      	cmp	r3, r2
 8004efc:	d102      	bne.n	8004f04 <LL_USART_Init+0x84>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8004efe:	693b      	ldr	r3, [r7, #16]
 8004f00:	61bb      	str	r3, [r7, #24]
 8004f02:	e028      	b.n	8004f56 <LL_USART_Init+0xd6>
    }
#if defined(USART3)
    else if (USARTx == USART3)
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	4a21      	ldr	r2, [pc, #132]	; (8004f8c <LL_USART_Init+0x10c>)
 8004f08:	4293      	cmp	r3, r2
 8004f0a:	d102      	bne.n	8004f12 <LL_USART_Init+0x92>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8004f0c:	693b      	ldr	r3, [r7, #16]
 8004f0e:	61bb      	str	r3, [r7, #24]
 8004f10:	e021      	b.n	8004f56 <LL_USART_Init+0xd6>
    }
#endif /* USART3 */
#if defined(USART6)
    else if (USARTx == USART6)
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	4a1e      	ldr	r2, [pc, #120]	; (8004f90 <LL_USART_Init+0x110>)
 8004f16:	4293      	cmp	r3, r2
 8004f18:	d102      	bne.n	8004f20 <LL_USART_Init+0xa0>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 8004f1a:	697b      	ldr	r3, [r7, #20]
 8004f1c:	61bb      	str	r3, [r7, #24]
 8004f1e:	e01a      	b.n	8004f56 <LL_USART_Init+0xd6>
    }
#endif /* USART6 */
#if defined(UART4)
    else if (USARTx == UART4)
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	4a1c      	ldr	r2, [pc, #112]	; (8004f94 <LL_USART_Init+0x114>)
 8004f24:	4293      	cmp	r3, r2
 8004f26:	d102      	bne.n	8004f2e <LL_USART_Init+0xae>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8004f28:	693b      	ldr	r3, [r7, #16]
 8004f2a:	61bb      	str	r3, [r7, #24]
 8004f2c:	e013      	b.n	8004f56 <LL_USART_Init+0xd6>
    }
#endif /* UART4 */
#if defined(UART5)
    else if (USARTx == UART5)
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	4a19      	ldr	r2, [pc, #100]	; (8004f98 <LL_USART_Init+0x118>)
 8004f32:	4293      	cmp	r3, r2
 8004f34:	d102      	bne.n	8004f3c <LL_USART_Init+0xbc>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8004f36:	693b      	ldr	r3, [r7, #16]
 8004f38:	61bb      	str	r3, [r7, #24]
 8004f3a:	e00c      	b.n	8004f56 <LL_USART_Init+0xd6>
    }
#endif /* UART5 */
#if defined(UART7)
    else if (USARTx == UART7)
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	4a17      	ldr	r2, [pc, #92]	; (8004f9c <LL_USART_Init+0x11c>)
 8004f40:	4293      	cmp	r3, r2
 8004f42:	d102      	bne.n	8004f4a <LL_USART_Init+0xca>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8004f44:	693b      	ldr	r3, [r7, #16]
 8004f46:	61bb      	str	r3, [r7, #24]
 8004f48:	e005      	b.n	8004f56 <LL_USART_Init+0xd6>
    }
#endif /* UART7 */
#if defined(UART8)
    else if (USARTx == UART8)
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	4a14      	ldr	r2, [pc, #80]	; (8004fa0 <LL_USART_Init+0x120>)
 8004f4e:	4293      	cmp	r3, r2
 8004f50:	d101      	bne.n	8004f56 <LL_USART_Init+0xd6>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8004f52:	693b      	ldr	r3, [r7, #16]
 8004f54:	61bb      	str	r3, [r7, #24]

    /* Configure the USART Baud Rate :
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 8004f56:	69bb      	ldr	r3, [r7, #24]
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d00d      	beq.n	8004f78 <LL_USART_Init+0xf8>
        && (USART_InitStruct->BaudRate != 0U))
 8004f5c:	683b      	ldr	r3, [r7, #0]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d009      	beq.n	8004f78 <LL_USART_Init+0xf8>
    {
      status = SUCCESS;
 8004f64:	2300      	movs	r3, #0
 8004f66:	77fb      	strb	r3, [r7, #31]
      LL_USART_SetBaudRate(USARTx,
 8004f68:	683b      	ldr	r3, [r7, #0]
 8004f6a:	699a      	ldr	r2, [r3, #24]
 8004f6c:	683b      	ldr	r3, [r7, #0]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	69b9      	ldr	r1, [r7, #24]
 8004f72:	6878      	ldr	r0, [r7, #4]
 8004f74:	f7ff fece 	bl	8004d14 <LL_USART_SetBaudRate>
      assert_param(IS_LL_USART_BRR_MAX(USARTx->BRR));
    }
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 8004f78:	7ffb      	ldrb	r3, [r7, #31]
}
 8004f7a:	4618      	mov	r0, r3
 8004f7c:	3720      	adds	r7, #32
 8004f7e:	46bd      	mov	sp, r7
 8004f80:	bd80      	pop	{r7, pc}
 8004f82:	bf00      	nop
 8004f84:	40011000 	.word	0x40011000
 8004f88:	40004400 	.word	0x40004400
 8004f8c:	40004800 	.word	0x40004800
 8004f90:	40011400 	.word	0x40011400
 8004f94:	40004c00 	.word	0x40004c00
 8004f98:	40005000 	.word	0x40005000
 8004f9c:	40007800 	.word	0x40007800
 8004fa0:	40007c00 	.word	0x40007c00

08004fa4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004fa4:	b084      	sub	sp, #16
 8004fa6:	b580      	push	{r7, lr}
 8004fa8:	b084      	sub	sp, #16
 8004faa:	af00      	add	r7, sp, #0
 8004fac:	6078      	str	r0, [r7, #4]
 8004fae:	f107 001c 	add.w	r0, r7, #28
 8004fb2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004fb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fb8:	2b01      	cmp	r3, #1
 8004fba:	d122      	bne.n	8005002 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fc0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	68db      	ldr	r3, [r3, #12]
 8004fcc:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8004fd0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004fd4:	687a      	ldr	r2, [r7, #4]
 8004fd6:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	68db      	ldr	r3, [r3, #12]
 8004fdc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004fe4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004fe6:	2b01      	cmp	r3, #1
 8004fe8:	d105      	bne.n	8004ff6 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	68db      	ldr	r3, [r3, #12]
 8004fee:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8004ff6:	6878      	ldr	r0, [r7, #4]
 8004ff8:	f001 fa7c 	bl	80064f4 <USB_CoreReset>
 8004ffc:	4603      	mov	r3, r0
 8004ffe:	73fb      	strb	r3, [r7, #15]
 8005000:	e01a      	b.n	8005038 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	68db      	ldr	r3, [r3, #12]
 8005006:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 800500e:	6878      	ldr	r0, [r7, #4]
 8005010:	f001 fa70 	bl	80064f4 <USB_CoreReset>
 8005014:	4603      	mov	r3, r0
 8005016:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8005018:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800501a:	2b00      	cmp	r3, #0
 800501c:	d106      	bne.n	800502c <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005022:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	639a      	str	r2, [r3, #56]	; 0x38
 800502a:	e005      	b.n	8005038 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005030:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8005038:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800503a:	2b01      	cmp	r3, #1
 800503c:	d10b      	bne.n	8005056 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	689b      	ldr	r3, [r3, #8]
 8005042:	f043 0206 	orr.w	r2, r3, #6
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	689b      	ldr	r3, [r3, #8]
 800504e:	f043 0220 	orr.w	r2, r3, #32
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8005056:	7bfb      	ldrb	r3, [r7, #15]
}
 8005058:	4618      	mov	r0, r3
 800505a:	3710      	adds	r7, #16
 800505c:	46bd      	mov	sp, r7
 800505e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005062:	b004      	add	sp, #16
 8005064:	4770      	bx	lr
	...

08005068 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8005068:	b480      	push	{r7}
 800506a:	b087      	sub	sp, #28
 800506c:	af00      	add	r7, sp, #0
 800506e:	60f8      	str	r0, [r7, #12]
 8005070:	60b9      	str	r1, [r7, #8]
 8005072:	4613      	mov	r3, r2
 8005074:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8005076:	79fb      	ldrb	r3, [r7, #7]
 8005078:	2b02      	cmp	r3, #2
 800507a:	d165      	bne.n	8005148 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800507c:	68bb      	ldr	r3, [r7, #8]
 800507e:	4a41      	ldr	r2, [pc, #260]	; (8005184 <USB_SetTurnaroundTime+0x11c>)
 8005080:	4293      	cmp	r3, r2
 8005082:	d906      	bls.n	8005092 <USB_SetTurnaroundTime+0x2a>
 8005084:	68bb      	ldr	r3, [r7, #8]
 8005086:	4a40      	ldr	r2, [pc, #256]	; (8005188 <USB_SetTurnaroundTime+0x120>)
 8005088:	4293      	cmp	r3, r2
 800508a:	d802      	bhi.n	8005092 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800508c:	230f      	movs	r3, #15
 800508e:	617b      	str	r3, [r7, #20]
 8005090:	e062      	b.n	8005158 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8005092:	68bb      	ldr	r3, [r7, #8]
 8005094:	4a3c      	ldr	r2, [pc, #240]	; (8005188 <USB_SetTurnaroundTime+0x120>)
 8005096:	4293      	cmp	r3, r2
 8005098:	d906      	bls.n	80050a8 <USB_SetTurnaroundTime+0x40>
 800509a:	68bb      	ldr	r3, [r7, #8]
 800509c:	4a3b      	ldr	r2, [pc, #236]	; (800518c <USB_SetTurnaroundTime+0x124>)
 800509e:	4293      	cmp	r3, r2
 80050a0:	d802      	bhi.n	80050a8 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80050a2:	230e      	movs	r3, #14
 80050a4:	617b      	str	r3, [r7, #20]
 80050a6:	e057      	b.n	8005158 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80050a8:	68bb      	ldr	r3, [r7, #8]
 80050aa:	4a38      	ldr	r2, [pc, #224]	; (800518c <USB_SetTurnaroundTime+0x124>)
 80050ac:	4293      	cmp	r3, r2
 80050ae:	d906      	bls.n	80050be <USB_SetTurnaroundTime+0x56>
 80050b0:	68bb      	ldr	r3, [r7, #8]
 80050b2:	4a37      	ldr	r2, [pc, #220]	; (8005190 <USB_SetTurnaroundTime+0x128>)
 80050b4:	4293      	cmp	r3, r2
 80050b6:	d802      	bhi.n	80050be <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80050b8:	230d      	movs	r3, #13
 80050ba:	617b      	str	r3, [r7, #20]
 80050bc:	e04c      	b.n	8005158 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80050be:	68bb      	ldr	r3, [r7, #8]
 80050c0:	4a33      	ldr	r2, [pc, #204]	; (8005190 <USB_SetTurnaroundTime+0x128>)
 80050c2:	4293      	cmp	r3, r2
 80050c4:	d906      	bls.n	80050d4 <USB_SetTurnaroundTime+0x6c>
 80050c6:	68bb      	ldr	r3, [r7, #8]
 80050c8:	4a32      	ldr	r2, [pc, #200]	; (8005194 <USB_SetTurnaroundTime+0x12c>)
 80050ca:	4293      	cmp	r3, r2
 80050cc:	d802      	bhi.n	80050d4 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80050ce:	230c      	movs	r3, #12
 80050d0:	617b      	str	r3, [r7, #20]
 80050d2:	e041      	b.n	8005158 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80050d4:	68bb      	ldr	r3, [r7, #8]
 80050d6:	4a2f      	ldr	r2, [pc, #188]	; (8005194 <USB_SetTurnaroundTime+0x12c>)
 80050d8:	4293      	cmp	r3, r2
 80050da:	d906      	bls.n	80050ea <USB_SetTurnaroundTime+0x82>
 80050dc:	68bb      	ldr	r3, [r7, #8]
 80050de:	4a2e      	ldr	r2, [pc, #184]	; (8005198 <USB_SetTurnaroundTime+0x130>)
 80050e0:	4293      	cmp	r3, r2
 80050e2:	d802      	bhi.n	80050ea <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80050e4:	230b      	movs	r3, #11
 80050e6:	617b      	str	r3, [r7, #20]
 80050e8:	e036      	b.n	8005158 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80050ea:	68bb      	ldr	r3, [r7, #8]
 80050ec:	4a2a      	ldr	r2, [pc, #168]	; (8005198 <USB_SetTurnaroundTime+0x130>)
 80050ee:	4293      	cmp	r3, r2
 80050f0:	d906      	bls.n	8005100 <USB_SetTurnaroundTime+0x98>
 80050f2:	68bb      	ldr	r3, [r7, #8]
 80050f4:	4a29      	ldr	r2, [pc, #164]	; (800519c <USB_SetTurnaroundTime+0x134>)
 80050f6:	4293      	cmp	r3, r2
 80050f8:	d802      	bhi.n	8005100 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80050fa:	230a      	movs	r3, #10
 80050fc:	617b      	str	r3, [r7, #20]
 80050fe:	e02b      	b.n	8005158 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8005100:	68bb      	ldr	r3, [r7, #8]
 8005102:	4a26      	ldr	r2, [pc, #152]	; (800519c <USB_SetTurnaroundTime+0x134>)
 8005104:	4293      	cmp	r3, r2
 8005106:	d906      	bls.n	8005116 <USB_SetTurnaroundTime+0xae>
 8005108:	68bb      	ldr	r3, [r7, #8]
 800510a:	4a25      	ldr	r2, [pc, #148]	; (80051a0 <USB_SetTurnaroundTime+0x138>)
 800510c:	4293      	cmp	r3, r2
 800510e:	d802      	bhi.n	8005116 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8005110:	2309      	movs	r3, #9
 8005112:	617b      	str	r3, [r7, #20]
 8005114:	e020      	b.n	8005158 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8005116:	68bb      	ldr	r3, [r7, #8]
 8005118:	4a21      	ldr	r2, [pc, #132]	; (80051a0 <USB_SetTurnaroundTime+0x138>)
 800511a:	4293      	cmp	r3, r2
 800511c:	d906      	bls.n	800512c <USB_SetTurnaroundTime+0xc4>
 800511e:	68bb      	ldr	r3, [r7, #8]
 8005120:	4a20      	ldr	r2, [pc, #128]	; (80051a4 <USB_SetTurnaroundTime+0x13c>)
 8005122:	4293      	cmp	r3, r2
 8005124:	d802      	bhi.n	800512c <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8005126:	2308      	movs	r3, #8
 8005128:	617b      	str	r3, [r7, #20]
 800512a:	e015      	b.n	8005158 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800512c:	68bb      	ldr	r3, [r7, #8]
 800512e:	4a1d      	ldr	r2, [pc, #116]	; (80051a4 <USB_SetTurnaroundTime+0x13c>)
 8005130:	4293      	cmp	r3, r2
 8005132:	d906      	bls.n	8005142 <USB_SetTurnaroundTime+0xda>
 8005134:	68bb      	ldr	r3, [r7, #8]
 8005136:	4a1c      	ldr	r2, [pc, #112]	; (80051a8 <USB_SetTurnaroundTime+0x140>)
 8005138:	4293      	cmp	r3, r2
 800513a:	d802      	bhi.n	8005142 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800513c:	2307      	movs	r3, #7
 800513e:	617b      	str	r3, [r7, #20]
 8005140:	e00a      	b.n	8005158 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8005142:	2306      	movs	r3, #6
 8005144:	617b      	str	r3, [r7, #20]
 8005146:	e007      	b.n	8005158 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8005148:	79fb      	ldrb	r3, [r7, #7]
 800514a:	2b00      	cmp	r3, #0
 800514c:	d102      	bne.n	8005154 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800514e:	2309      	movs	r3, #9
 8005150:	617b      	str	r3, [r7, #20]
 8005152:	e001      	b.n	8005158 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8005154:	2309      	movs	r3, #9
 8005156:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	68db      	ldr	r3, [r3, #12]
 800515c:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	68da      	ldr	r2, [r3, #12]
 8005168:	697b      	ldr	r3, [r7, #20]
 800516a:	029b      	lsls	r3, r3, #10
 800516c:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8005170:	431a      	orrs	r2, r3
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005176:	2300      	movs	r3, #0
}
 8005178:	4618      	mov	r0, r3
 800517a:	371c      	adds	r7, #28
 800517c:	46bd      	mov	sp, r7
 800517e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005182:	4770      	bx	lr
 8005184:	00d8acbf 	.word	0x00d8acbf
 8005188:	00e4e1bf 	.word	0x00e4e1bf
 800518c:	00f423ff 	.word	0x00f423ff
 8005190:	0106737f 	.word	0x0106737f
 8005194:	011a499f 	.word	0x011a499f
 8005198:	01312cff 	.word	0x01312cff
 800519c:	014ca43f 	.word	0x014ca43f
 80051a0:	016e35ff 	.word	0x016e35ff
 80051a4:	01a6ab1f 	.word	0x01a6ab1f
 80051a8:	01e847ff 	.word	0x01e847ff

080051ac <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80051ac:	b480      	push	{r7}
 80051ae:	b083      	sub	sp, #12
 80051b0:	af00      	add	r7, sp, #0
 80051b2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	689b      	ldr	r3, [r3, #8]
 80051b8:	f043 0201 	orr.w	r2, r3, #1
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80051c0:	2300      	movs	r3, #0
}
 80051c2:	4618      	mov	r0, r3
 80051c4:	370c      	adds	r7, #12
 80051c6:	46bd      	mov	sp, r7
 80051c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051cc:	4770      	bx	lr

080051ce <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80051ce:	b480      	push	{r7}
 80051d0:	b083      	sub	sp, #12
 80051d2:	af00      	add	r7, sp, #0
 80051d4:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	689b      	ldr	r3, [r3, #8]
 80051da:	f023 0201 	bic.w	r2, r3, #1
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80051e2:	2300      	movs	r3, #0
}
 80051e4:	4618      	mov	r0, r3
 80051e6:	370c      	adds	r7, #12
 80051e8:	46bd      	mov	sp, r7
 80051ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ee:	4770      	bx	lr

080051f0 <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80051f0:	b580      	push	{r7, lr}
 80051f2:	b082      	sub	sp, #8
 80051f4:	af00      	add	r7, sp, #0
 80051f6:	6078      	str	r0, [r7, #4]
 80051f8:	460b      	mov	r3, r1
 80051fa:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	68db      	ldr	r3, [r3, #12]
 8005200:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005208:	78fb      	ldrb	r3, [r7, #3]
 800520a:	2b01      	cmp	r3, #1
 800520c:	d106      	bne.n	800521c <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	68db      	ldr	r3, [r3, #12]
 8005212:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	60da      	str	r2, [r3, #12]
 800521a:	e00b      	b.n	8005234 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 800521c:	78fb      	ldrb	r3, [r7, #3]
 800521e:	2b00      	cmp	r3, #0
 8005220:	d106      	bne.n	8005230 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	68db      	ldr	r3, [r3, #12]
 8005226:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	60da      	str	r2, [r3, #12]
 800522e:	e001      	b.n	8005234 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8005230:	2301      	movs	r3, #1
 8005232:	e003      	b.n	800523c <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8005234:	2032      	movs	r0, #50	; 0x32
 8005236:	f7fc f97d 	bl	8001534 <HAL_Delay>

  return HAL_OK;
 800523a:	2300      	movs	r3, #0
}
 800523c:	4618      	mov	r0, r3
 800523e:	3708      	adds	r7, #8
 8005240:	46bd      	mov	sp, r7
 8005242:	bd80      	pop	{r7, pc}

08005244 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005244:	b084      	sub	sp, #16
 8005246:	b580      	push	{r7, lr}
 8005248:	b086      	sub	sp, #24
 800524a:	af00      	add	r7, sp, #0
 800524c:	6078      	str	r0, [r7, #4]
 800524e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8005252:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8005256:	2300      	movs	r3, #0
 8005258:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800525e:	2300      	movs	r3, #0
 8005260:	613b      	str	r3, [r7, #16]
 8005262:	e009      	b.n	8005278 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8005264:	687a      	ldr	r2, [r7, #4]
 8005266:	693b      	ldr	r3, [r7, #16]
 8005268:	3340      	adds	r3, #64	; 0x40
 800526a:	009b      	lsls	r3, r3, #2
 800526c:	4413      	add	r3, r2
 800526e:	2200      	movs	r2, #0
 8005270:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8005272:	693b      	ldr	r3, [r7, #16]
 8005274:	3301      	adds	r3, #1
 8005276:	613b      	str	r3, [r7, #16]
 8005278:	693b      	ldr	r3, [r7, #16]
 800527a:	2b0e      	cmp	r3, #14
 800527c:	d9f2      	bls.n	8005264 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800527e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005280:	2b00      	cmp	r3, #0
 8005282:	d112      	bne.n	80052aa <USB_DevInit+0x66>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005288:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005294:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052a0:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	639a      	str	r2, [r3, #56]	; 0x38
 80052a8:	e00b      	b.n	80052c2 <USB_DevInit+0x7e>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GOTGCTL &= ~USB_OTG_GCCFG_NOVBUSSENS;
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	601a      	str	r2, [r3, #0]
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052ba:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80052c8:	461a      	mov	r2, r3
 80052ca:	2300      	movs	r3, #0
 80052cc:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80052d4:	4619      	mov	r1, r3
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80052dc:	461a      	mov	r2, r3
 80052de:	680b      	ldr	r3, [r1, #0]
 80052e0:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80052e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052e4:	2b01      	cmp	r3, #1
 80052e6:	d10c      	bne.n	8005302 <USB_DevInit+0xbe>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80052e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d104      	bne.n	80052f8 <USB_DevInit+0xb4>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80052ee:	2100      	movs	r1, #0
 80052f0:	6878      	ldr	r0, [r7, #4]
 80052f2:	f000 f961 	bl	80055b8 <USB_SetDevSpeed>
 80052f6:	e008      	b.n	800530a <USB_DevInit+0xc6>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80052f8:	2101      	movs	r1, #1
 80052fa:	6878      	ldr	r0, [r7, #4]
 80052fc:	f000 f95c 	bl	80055b8 <USB_SetDevSpeed>
 8005300:	e003      	b.n	800530a <USB_DevInit+0xc6>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8005302:	2103      	movs	r1, #3
 8005304:	6878      	ldr	r0, [r7, #4]
 8005306:	f000 f957 	bl	80055b8 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800530a:	2110      	movs	r1, #16
 800530c:	6878      	ldr	r0, [r7, #4]
 800530e:	f000 f90b 	bl	8005528 <USB_FlushTxFifo>
 8005312:	4603      	mov	r3, r0
 8005314:	2b00      	cmp	r3, #0
 8005316:	d001      	beq.n	800531c <USB_DevInit+0xd8>
  {
    ret = HAL_ERROR;
 8005318:	2301      	movs	r3, #1
 800531a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800531c:	6878      	ldr	r0, [r7, #4]
 800531e:	f000 f929 	bl	8005574 <USB_FlushRxFifo>
 8005322:	4603      	mov	r3, r0
 8005324:	2b00      	cmp	r3, #0
 8005326:	d001      	beq.n	800532c <USB_DevInit+0xe8>
  {
    ret = HAL_ERROR;
 8005328:	2301      	movs	r3, #1
 800532a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005332:	461a      	mov	r2, r3
 8005334:	2300      	movs	r3, #0
 8005336:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800533e:	461a      	mov	r2, r3
 8005340:	2300      	movs	r3, #0
 8005342:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800534a:	461a      	mov	r2, r3
 800534c:	2300      	movs	r3, #0
 800534e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005350:	2300      	movs	r3, #0
 8005352:	613b      	str	r3, [r7, #16]
 8005354:	e043      	b.n	80053de <USB_DevInit+0x19a>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005356:	693b      	ldr	r3, [r7, #16]
 8005358:	015a      	lsls	r2, r3, #5
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	4413      	add	r3, r2
 800535e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005368:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800536c:	d118      	bne.n	80053a0 <USB_DevInit+0x15c>
    {
      if (i == 0U)
 800536e:	693b      	ldr	r3, [r7, #16]
 8005370:	2b00      	cmp	r3, #0
 8005372:	d10a      	bne.n	800538a <USB_DevInit+0x146>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8005374:	693b      	ldr	r3, [r7, #16]
 8005376:	015a      	lsls	r2, r3, #5
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	4413      	add	r3, r2
 800537c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005380:	461a      	mov	r2, r3
 8005382:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005386:	6013      	str	r3, [r2, #0]
 8005388:	e013      	b.n	80053b2 <USB_DevInit+0x16e>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800538a:	693b      	ldr	r3, [r7, #16]
 800538c:	015a      	lsls	r2, r3, #5
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	4413      	add	r3, r2
 8005392:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005396:	461a      	mov	r2, r3
 8005398:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800539c:	6013      	str	r3, [r2, #0]
 800539e:	e008      	b.n	80053b2 <USB_DevInit+0x16e>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80053a0:	693b      	ldr	r3, [r7, #16]
 80053a2:	015a      	lsls	r2, r3, #5
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	4413      	add	r3, r2
 80053a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80053ac:	461a      	mov	r2, r3
 80053ae:	2300      	movs	r3, #0
 80053b0:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80053b2:	693b      	ldr	r3, [r7, #16]
 80053b4:	015a      	lsls	r2, r3, #5
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	4413      	add	r3, r2
 80053ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80053be:	461a      	mov	r2, r3
 80053c0:	2300      	movs	r3, #0
 80053c2:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80053c4:	693b      	ldr	r3, [r7, #16]
 80053c6:	015a      	lsls	r2, r3, #5
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	4413      	add	r3, r2
 80053cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80053d0:	461a      	mov	r2, r3
 80053d2:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80053d6:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80053d8:	693b      	ldr	r3, [r7, #16]
 80053da:	3301      	adds	r3, #1
 80053dc:	613b      	str	r3, [r7, #16]
 80053de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053e0:	693a      	ldr	r2, [r7, #16]
 80053e2:	429a      	cmp	r2, r3
 80053e4:	d3b7      	bcc.n	8005356 <USB_DevInit+0x112>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80053e6:	2300      	movs	r3, #0
 80053e8:	613b      	str	r3, [r7, #16]
 80053ea:	e043      	b.n	8005474 <USB_DevInit+0x230>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80053ec:	693b      	ldr	r3, [r7, #16]
 80053ee:	015a      	lsls	r2, r3, #5
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	4413      	add	r3, r2
 80053f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80053fe:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005402:	d118      	bne.n	8005436 <USB_DevInit+0x1f2>
    {
      if (i == 0U)
 8005404:	693b      	ldr	r3, [r7, #16]
 8005406:	2b00      	cmp	r3, #0
 8005408:	d10a      	bne.n	8005420 <USB_DevInit+0x1dc>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800540a:	693b      	ldr	r3, [r7, #16]
 800540c:	015a      	lsls	r2, r3, #5
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	4413      	add	r3, r2
 8005412:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005416:	461a      	mov	r2, r3
 8005418:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800541c:	6013      	str	r3, [r2, #0]
 800541e:	e013      	b.n	8005448 <USB_DevInit+0x204>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8005420:	693b      	ldr	r3, [r7, #16]
 8005422:	015a      	lsls	r2, r3, #5
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	4413      	add	r3, r2
 8005428:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800542c:	461a      	mov	r2, r3
 800542e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005432:	6013      	str	r3, [r2, #0]
 8005434:	e008      	b.n	8005448 <USB_DevInit+0x204>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8005436:	693b      	ldr	r3, [r7, #16]
 8005438:	015a      	lsls	r2, r3, #5
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	4413      	add	r3, r2
 800543e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005442:	461a      	mov	r2, r3
 8005444:	2300      	movs	r3, #0
 8005446:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8005448:	693b      	ldr	r3, [r7, #16]
 800544a:	015a      	lsls	r2, r3, #5
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	4413      	add	r3, r2
 8005450:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005454:	461a      	mov	r2, r3
 8005456:	2300      	movs	r3, #0
 8005458:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800545a:	693b      	ldr	r3, [r7, #16]
 800545c:	015a      	lsls	r2, r3, #5
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	4413      	add	r3, r2
 8005462:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005466:	461a      	mov	r2, r3
 8005468:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800546c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800546e:	693b      	ldr	r3, [r7, #16]
 8005470:	3301      	adds	r3, #1
 8005472:	613b      	str	r3, [r7, #16]
 8005474:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005476:	693a      	ldr	r2, [r7, #16]
 8005478:	429a      	cmp	r2, r3
 800547a:	d3b7      	bcc.n	80053ec <USB_DevInit+0x1a8>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005482:	691b      	ldr	r3, [r3, #16]
 8005484:	68fa      	ldr	r2, [r7, #12]
 8005486:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800548a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800548e:	6113      	str	r3, [r2, #16]

  if (cfg.dma_enable == 1U)
 8005490:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005492:	2b01      	cmp	r3, #1
 8005494:	d111      	bne.n	80054ba <USB_DevInit+0x276>
  {
    /*Set threshold parameters */
    USBx_DEVICE->DTHRCTL = USB_OTG_DTHRCTL_TXTHRLEN_6 |
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800549c:	461a      	mov	r2, r3
 800549e:	4b20      	ldr	r3, [pc, #128]	; (8005520 <USB_DevInit+0x2dc>)
 80054a0:	6313      	str	r3, [r2, #48]	; 0x30
                           USB_OTG_DTHRCTL_RXTHRLEN_6;

    USBx_DEVICE->DTHRCTL |= USB_OTG_DTHRCTL_RXTHREN |
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80054a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054aa:	68fa      	ldr	r2, [r7, #12]
 80054ac:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80054b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80054b4:	f043 0303 	orr.w	r3, r3, #3
 80054b8:	6313      	str	r3, [r2, #48]	; 0x30
                            USB_OTG_DTHRCTL_ISOTHREN |
                            USB_OTG_DTHRCTL_NONISOTHREN;
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	2200      	movs	r2, #0
 80054be:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80054c6:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80054c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d105      	bne.n	80054da <USB_DevInit+0x296>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	699b      	ldr	r3, [r3, #24]
 80054d2:	f043 0210 	orr.w	r2, r3, #16
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	699a      	ldr	r2, [r3, #24]
 80054de:	4b11      	ldr	r3, [pc, #68]	; (8005524 <USB_DevInit+0x2e0>)
 80054e0:	4313      	orrs	r3, r2
 80054e2:	687a      	ldr	r2, [r7, #4]
 80054e4:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80054e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d005      	beq.n	80054f8 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	699b      	ldr	r3, [r3, #24]
 80054f0:	f043 0208 	orr.w	r2, r3, #8
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80054f8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80054fa:	2b01      	cmp	r3, #1
 80054fc:	d107      	bne.n	800550e <USB_DevInit+0x2ca>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	699b      	ldr	r3, [r3, #24]
 8005502:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005506:	f043 0304 	orr.w	r3, r3, #4
 800550a:	687a      	ldr	r2, [r7, #4]
 800550c:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800550e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005510:	4618      	mov	r0, r3
 8005512:	3718      	adds	r7, #24
 8005514:	46bd      	mov	sp, r7
 8005516:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800551a:	b004      	add	sp, #16
 800551c:	4770      	bx	lr
 800551e:	bf00      	nop
 8005520:	00800100 	.word	0x00800100
 8005524:	803c3800 	.word	0x803c3800

08005528 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005528:	b480      	push	{r7}
 800552a:	b085      	sub	sp, #20
 800552c:	af00      	add	r7, sp, #0
 800552e:	6078      	str	r0, [r7, #4]
 8005530:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8005532:	2300      	movs	r3, #0
 8005534:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005536:	683b      	ldr	r3, [r7, #0]
 8005538:	019b      	lsls	r3, r3, #6
 800553a:	f043 0220 	orr.w	r2, r3, #32
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	3301      	adds	r3, #1
 8005546:	60fb      	str	r3, [r7, #12]
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	4a09      	ldr	r2, [pc, #36]	; (8005570 <USB_FlushTxFifo+0x48>)
 800554c:	4293      	cmp	r3, r2
 800554e:	d901      	bls.n	8005554 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8005550:	2303      	movs	r3, #3
 8005552:	e006      	b.n	8005562 <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	691b      	ldr	r3, [r3, #16]
 8005558:	f003 0320 	and.w	r3, r3, #32
 800555c:	2b20      	cmp	r3, #32
 800555e:	d0f0      	beq.n	8005542 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8005560:	2300      	movs	r3, #0
}
 8005562:	4618      	mov	r0, r3
 8005564:	3714      	adds	r7, #20
 8005566:	46bd      	mov	sp, r7
 8005568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800556c:	4770      	bx	lr
 800556e:	bf00      	nop
 8005570:	00030d40 	.word	0x00030d40

08005574 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005574:	b480      	push	{r7}
 8005576:	b085      	sub	sp, #20
 8005578:	af00      	add	r7, sp, #0
 800557a:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 800557c:	2300      	movs	r3, #0
 800557e:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	2210      	movs	r2, #16
 8005584:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	3301      	adds	r3, #1
 800558a:	60fb      	str	r3, [r7, #12]
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	4a09      	ldr	r2, [pc, #36]	; (80055b4 <USB_FlushRxFifo+0x40>)
 8005590:	4293      	cmp	r3, r2
 8005592:	d901      	bls.n	8005598 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8005594:	2303      	movs	r3, #3
 8005596:	e006      	b.n	80055a6 <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	691b      	ldr	r3, [r3, #16]
 800559c:	f003 0310 	and.w	r3, r3, #16
 80055a0:	2b10      	cmp	r3, #16
 80055a2:	d0f0      	beq.n	8005586 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 80055a4:	2300      	movs	r3, #0
}
 80055a6:	4618      	mov	r0, r3
 80055a8:	3714      	adds	r7, #20
 80055aa:	46bd      	mov	sp, r7
 80055ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055b0:	4770      	bx	lr
 80055b2:	bf00      	nop
 80055b4:	00030d40 	.word	0x00030d40

080055b8 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80055b8:	b480      	push	{r7}
 80055ba:	b085      	sub	sp, #20
 80055bc:	af00      	add	r7, sp, #0
 80055be:	6078      	str	r0, [r7, #4]
 80055c0:	460b      	mov	r3, r1
 80055c2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80055ce:	681a      	ldr	r2, [r3, #0]
 80055d0:	78fb      	ldrb	r3, [r7, #3]
 80055d2:	68f9      	ldr	r1, [r7, #12]
 80055d4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80055d8:	4313      	orrs	r3, r2
 80055da:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80055dc:	2300      	movs	r3, #0
}
 80055de:	4618      	mov	r0, r3
 80055e0:	3714      	adds	r7, #20
 80055e2:	46bd      	mov	sp, r7
 80055e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055e8:	4770      	bx	lr

080055ea <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg PCD_SPEED_HIGH: High speed mode
  *            @arg PCD_SPEED_FULL: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80055ea:	b480      	push	{r7}
 80055ec:	b087      	sub	sp, #28
 80055ee:	af00      	add	r7, sp, #0
 80055f0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80055f6:	693b      	ldr	r3, [r7, #16]
 80055f8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80055fc:	689b      	ldr	r3, [r3, #8]
 80055fe:	f003 0306 	and.w	r3, r3, #6
 8005602:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	2b00      	cmp	r3, #0
 8005608:	d102      	bne.n	8005610 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800560a:	2300      	movs	r3, #0
 800560c:	75fb      	strb	r3, [r7, #23]
 800560e:	e00a      	b.n	8005626 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	2b02      	cmp	r3, #2
 8005614:	d002      	beq.n	800561c <USB_GetDevSpeed+0x32>
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	2b06      	cmp	r3, #6
 800561a:	d102      	bne.n	8005622 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800561c:	2302      	movs	r3, #2
 800561e:	75fb      	strb	r3, [r7, #23]
 8005620:	e001      	b.n	8005626 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8005622:	230f      	movs	r3, #15
 8005624:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8005626:	7dfb      	ldrb	r3, [r7, #23]
}
 8005628:	4618      	mov	r0, r3
 800562a:	371c      	adds	r7, #28
 800562c:	46bd      	mov	sp, r7
 800562e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005632:	4770      	bx	lr

08005634 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005634:	b480      	push	{r7}
 8005636:	b085      	sub	sp, #20
 8005638:	af00      	add	r7, sp, #0
 800563a:	6078      	str	r0, [r7, #4]
 800563c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005642:	683b      	ldr	r3, [r7, #0]
 8005644:	781b      	ldrb	r3, [r3, #0]
 8005646:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005648:	683b      	ldr	r3, [r7, #0]
 800564a:	785b      	ldrb	r3, [r3, #1]
 800564c:	2b01      	cmp	r3, #1
 800564e:	d13a      	bne.n	80056c6 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005656:	69da      	ldr	r2, [r3, #28]
 8005658:	683b      	ldr	r3, [r7, #0]
 800565a:	781b      	ldrb	r3, [r3, #0]
 800565c:	f003 030f 	and.w	r3, r3, #15
 8005660:	2101      	movs	r1, #1
 8005662:	fa01 f303 	lsl.w	r3, r1, r3
 8005666:	b29b      	uxth	r3, r3
 8005668:	68f9      	ldr	r1, [r7, #12]
 800566a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800566e:	4313      	orrs	r3, r2
 8005670:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8005672:	68bb      	ldr	r3, [r7, #8]
 8005674:	015a      	lsls	r2, r3, #5
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	4413      	add	r3, r2
 800567a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005684:	2b00      	cmp	r3, #0
 8005686:	d155      	bne.n	8005734 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005688:	68bb      	ldr	r3, [r7, #8]
 800568a:	015a      	lsls	r2, r3, #5
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	4413      	add	r3, r2
 8005690:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005694:	681a      	ldr	r2, [r3, #0]
 8005696:	683b      	ldr	r3, [r7, #0]
 8005698:	689b      	ldr	r3, [r3, #8]
 800569a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800569e:	683b      	ldr	r3, [r7, #0]
 80056a0:	78db      	ldrb	r3, [r3, #3]
 80056a2:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80056a4:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80056a6:	68bb      	ldr	r3, [r7, #8]
 80056a8:	059b      	lsls	r3, r3, #22
 80056aa:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80056ac:	4313      	orrs	r3, r2
 80056ae:	68ba      	ldr	r2, [r7, #8]
 80056b0:	0151      	lsls	r1, r2, #5
 80056b2:	68fa      	ldr	r2, [r7, #12]
 80056b4:	440a      	add	r2, r1
 80056b6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80056ba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80056be:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80056c2:	6013      	str	r3, [r2, #0]
 80056c4:	e036      	b.n	8005734 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80056cc:	69da      	ldr	r2, [r3, #28]
 80056ce:	683b      	ldr	r3, [r7, #0]
 80056d0:	781b      	ldrb	r3, [r3, #0]
 80056d2:	f003 030f 	and.w	r3, r3, #15
 80056d6:	2101      	movs	r1, #1
 80056d8:	fa01 f303 	lsl.w	r3, r1, r3
 80056dc:	041b      	lsls	r3, r3, #16
 80056de:	68f9      	ldr	r1, [r7, #12]
 80056e0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80056e4:	4313      	orrs	r3, r2
 80056e6:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80056e8:	68bb      	ldr	r3, [r7, #8]
 80056ea:	015a      	lsls	r2, r3, #5
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	4413      	add	r3, r2
 80056f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d11a      	bne.n	8005734 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80056fe:	68bb      	ldr	r3, [r7, #8]
 8005700:	015a      	lsls	r2, r3, #5
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	4413      	add	r3, r2
 8005706:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800570a:	681a      	ldr	r2, [r3, #0]
 800570c:	683b      	ldr	r3, [r7, #0]
 800570e:	689b      	ldr	r3, [r3, #8]
 8005710:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8005714:	683b      	ldr	r3, [r7, #0]
 8005716:	78db      	ldrb	r3, [r3, #3]
 8005718:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800571a:	430b      	orrs	r3, r1
 800571c:	4313      	orrs	r3, r2
 800571e:	68ba      	ldr	r2, [r7, #8]
 8005720:	0151      	lsls	r1, r2, #5
 8005722:	68fa      	ldr	r2, [r7, #12]
 8005724:	440a      	add	r2, r1
 8005726:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800572a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800572e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005732:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8005734:	2300      	movs	r3, #0
}
 8005736:	4618      	mov	r0, r3
 8005738:	3714      	adds	r7, #20
 800573a:	46bd      	mov	sp, r7
 800573c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005740:	4770      	bx	lr
	...

08005744 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005744:	b480      	push	{r7}
 8005746:	b085      	sub	sp, #20
 8005748:	af00      	add	r7, sp, #0
 800574a:	6078      	str	r0, [r7, #4]
 800574c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005752:	683b      	ldr	r3, [r7, #0]
 8005754:	781b      	ldrb	r3, [r3, #0]
 8005756:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8005758:	683b      	ldr	r3, [r7, #0]
 800575a:	785b      	ldrb	r3, [r3, #1]
 800575c:	2b01      	cmp	r3, #1
 800575e:	d135      	bne.n	80057cc <USB_DeactivateEndpoint+0x88>
  {
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005766:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005768:	683b      	ldr	r3, [r7, #0]
 800576a:	781b      	ldrb	r3, [r3, #0]
 800576c:	f003 030f 	and.w	r3, r3, #15
 8005770:	2101      	movs	r1, #1
 8005772:	fa01 f303 	lsl.w	r3, r1, r3
 8005776:	b29b      	uxth	r3, r3
 8005778:	43db      	mvns	r3, r3
 800577a:	68f9      	ldr	r1, [r7, #12]
 800577c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005780:	4013      	ands	r3, r2
 8005782:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800578a:	69da      	ldr	r2, [r3, #28]
 800578c:	683b      	ldr	r3, [r7, #0]
 800578e:	781b      	ldrb	r3, [r3, #0]
 8005790:	f003 030f 	and.w	r3, r3, #15
 8005794:	2101      	movs	r1, #1
 8005796:	fa01 f303 	lsl.w	r3, r1, r3
 800579a:	b29b      	uxth	r3, r3
 800579c:	43db      	mvns	r3, r3
 800579e:	68f9      	ldr	r1, [r7, #12]
 80057a0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80057a4:	4013      	ands	r3, r2
 80057a6:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80057a8:	68bb      	ldr	r3, [r7, #8]
 80057aa:	015a      	lsls	r2, r3, #5
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	4413      	add	r3, r2
 80057b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80057b4:	681a      	ldr	r2, [r3, #0]
 80057b6:	68bb      	ldr	r3, [r7, #8]
 80057b8:	0159      	lsls	r1, r3, #5
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	440b      	add	r3, r1
 80057be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80057c2:	4619      	mov	r1, r3
 80057c4:	4b1f      	ldr	r3, [pc, #124]	; (8005844 <USB_DeactivateEndpoint+0x100>)
 80057c6:	4013      	ands	r3, r2
 80057c8:	600b      	str	r3, [r1, #0]
 80057ca:	e034      	b.n	8005836 <USB_DeactivateEndpoint+0xf2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80057d2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80057d4:	683b      	ldr	r3, [r7, #0]
 80057d6:	781b      	ldrb	r3, [r3, #0]
 80057d8:	f003 030f 	and.w	r3, r3, #15
 80057dc:	2101      	movs	r1, #1
 80057de:	fa01 f303 	lsl.w	r3, r1, r3
 80057e2:	041b      	lsls	r3, r3, #16
 80057e4:	43db      	mvns	r3, r3
 80057e6:	68f9      	ldr	r1, [r7, #12]
 80057e8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80057ec:	4013      	ands	r3, r2
 80057ee:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80057f6:	69da      	ldr	r2, [r3, #28]
 80057f8:	683b      	ldr	r3, [r7, #0]
 80057fa:	781b      	ldrb	r3, [r3, #0]
 80057fc:	f003 030f 	and.w	r3, r3, #15
 8005800:	2101      	movs	r1, #1
 8005802:	fa01 f303 	lsl.w	r3, r1, r3
 8005806:	041b      	lsls	r3, r3, #16
 8005808:	43db      	mvns	r3, r3
 800580a:	68f9      	ldr	r1, [r7, #12]
 800580c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005810:	4013      	ands	r3, r2
 8005812:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8005814:	68bb      	ldr	r3, [r7, #8]
 8005816:	015a      	lsls	r2, r3, #5
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	4413      	add	r3, r2
 800581c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005820:	681a      	ldr	r2, [r3, #0]
 8005822:	68bb      	ldr	r3, [r7, #8]
 8005824:	0159      	lsls	r1, r3, #5
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	440b      	add	r3, r1
 800582a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800582e:	4619      	mov	r1, r3
 8005830:	4b05      	ldr	r3, [pc, #20]	; (8005848 <USB_DeactivateEndpoint+0x104>)
 8005832:	4013      	ands	r3, r2
 8005834:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8005836:	2300      	movs	r3, #0
}
 8005838:	4618      	mov	r0, r3
 800583a:	3714      	adds	r7, #20
 800583c:	46bd      	mov	sp, r7
 800583e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005842:	4770      	bx	lr
 8005844:	ec337800 	.word	0xec337800
 8005848:	eff37800 	.word	0xeff37800

0800584c <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800584c:	b580      	push	{r7, lr}
 800584e:	b08a      	sub	sp, #40	; 0x28
 8005850:	af02      	add	r7, sp, #8
 8005852:	60f8      	str	r0, [r7, #12]
 8005854:	60b9      	str	r1, [r7, #8]
 8005856:	4613      	mov	r3, r2
 8005858:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800585e:	68bb      	ldr	r3, [r7, #8]
 8005860:	781b      	ldrb	r3, [r3, #0]
 8005862:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005864:	68bb      	ldr	r3, [r7, #8]
 8005866:	785b      	ldrb	r3, [r3, #1]
 8005868:	2b01      	cmp	r3, #1
 800586a:	f040 815c 	bne.w	8005b26 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800586e:	68bb      	ldr	r3, [r7, #8]
 8005870:	695b      	ldr	r3, [r3, #20]
 8005872:	2b00      	cmp	r3, #0
 8005874:	d132      	bne.n	80058dc <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005876:	69bb      	ldr	r3, [r7, #24]
 8005878:	015a      	lsls	r2, r3, #5
 800587a:	69fb      	ldr	r3, [r7, #28]
 800587c:	4413      	add	r3, r2
 800587e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005882:	691b      	ldr	r3, [r3, #16]
 8005884:	69ba      	ldr	r2, [r7, #24]
 8005886:	0151      	lsls	r1, r2, #5
 8005888:	69fa      	ldr	r2, [r7, #28]
 800588a:	440a      	add	r2, r1
 800588c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005890:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005894:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005898:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800589a:	69bb      	ldr	r3, [r7, #24]
 800589c:	015a      	lsls	r2, r3, #5
 800589e:	69fb      	ldr	r3, [r7, #28]
 80058a0:	4413      	add	r3, r2
 80058a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80058a6:	691b      	ldr	r3, [r3, #16]
 80058a8:	69ba      	ldr	r2, [r7, #24]
 80058aa:	0151      	lsls	r1, r2, #5
 80058ac:	69fa      	ldr	r2, [r7, #28]
 80058ae:	440a      	add	r2, r1
 80058b0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80058b4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80058b8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80058ba:	69bb      	ldr	r3, [r7, #24]
 80058bc:	015a      	lsls	r2, r3, #5
 80058be:	69fb      	ldr	r3, [r7, #28]
 80058c0:	4413      	add	r3, r2
 80058c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80058c6:	691b      	ldr	r3, [r3, #16]
 80058c8:	69ba      	ldr	r2, [r7, #24]
 80058ca:	0151      	lsls	r1, r2, #5
 80058cc:	69fa      	ldr	r2, [r7, #28]
 80058ce:	440a      	add	r2, r1
 80058d0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80058d4:	0cdb      	lsrs	r3, r3, #19
 80058d6:	04db      	lsls	r3, r3, #19
 80058d8:	6113      	str	r3, [r2, #16]
 80058da:	e074      	b.n	80059c6 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80058dc:	69bb      	ldr	r3, [r7, #24]
 80058de:	015a      	lsls	r2, r3, #5
 80058e0:	69fb      	ldr	r3, [r7, #28]
 80058e2:	4413      	add	r3, r2
 80058e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80058e8:	691b      	ldr	r3, [r3, #16]
 80058ea:	69ba      	ldr	r2, [r7, #24]
 80058ec:	0151      	lsls	r1, r2, #5
 80058ee:	69fa      	ldr	r2, [r7, #28]
 80058f0:	440a      	add	r2, r1
 80058f2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80058f6:	0cdb      	lsrs	r3, r3, #19
 80058f8:	04db      	lsls	r3, r3, #19
 80058fa:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80058fc:	69bb      	ldr	r3, [r7, #24]
 80058fe:	015a      	lsls	r2, r3, #5
 8005900:	69fb      	ldr	r3, [r7, #28]
 8005902:	4413      	add	r3, r2
 8005904:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005908:	691b      	ldr	r3, [r3, #16]
 800590a:	69ba      	ldr	r2, [r7, #24]
 800590c:	0151      	lsls	r1, r2, #5
 800590e:	69fa      	ldr	r2, [r7, #28]
 8005910:	440a      	add	r2, r1
 8005912:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005916:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800591a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800591e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8005920:	69bb      	ldr	r3, [r7, #24]
 8005922:	015a      	lsls	r2, r3, #5
 8005924:	69fb      	ldr	r3, [r7, #28]
 8005926:	4413      	add	r3, r2
 8005928:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800592c:	691a      	ldr	r2, [r3, #16]
 800592e:	68bb      	ldr	r3, [r7, #8]
 8005930:	6959      	ldr	r1, [r3, #20]
 8005932:	68bb      	ldr	r3, [r7, #8]
 8005934:	689b      	ldr	r3, [r3, #8]
 8005936:	440b      	add	r3, r1
 8005938:	1e59      	subs	r1, r3, #1
 800593a:	68bb      	ldr	r3, [r7, #8]
 800593c:	689b      	ldr	r3, [r3, #8]
 800593e:	fbb1 f3f3 	udiv	r3, r1, r3
 8005942:	04d9      	lsls	r1, r3, #19
 8005944:	4b9d      	ldr	r3, [pc, #628]	; (8005bbc <USB_EPStartXfer+0x370>)
 8005946:	400b      	ands	r3, r1
 8005948:	69b9      	ldr	r1, [r7, #24]
 800594a:	0148      	lsls	r0, r1, #5
 800594c:	69f9      	ldr	r1, [r7, #28]
 800594e:	4401      	add	r1, r0
 8005950:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005954:	4313      	orrs	r3, r2
 8005956:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8005958:	69bb      	ldr	r3, [r7, #24]
 800595a:	015a      	lsls	r2, r3, #5
 800595c:	69fb      	ldr	r3, [r7, #28]
 800595e:	4413      	add	r3, r2
 8005960:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005964:	691a      	ldr	r2, [r3, #16]
 8005966:	68bb      	ldr	r3, [r7, #8]
 8005968:	695b      	ldr	r3, [r3, #20]
 800596a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800596e:	69b9      	ldr	r1, [r7, #24]
 8005970:	0148      	lsls	r0, r1, #5
 8005972:	69f9      	ldr	r1, [r7, #28]
 8005974:	4401      	add	r1, r0
 8005976:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800597a:	4313      	orrs	r3, r2
 800597c:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800597e:	68bb      	ldr	r3, [r7, #8]
 8005980:	78db      	ldrb	r3, [r3, #3]
 8005982:	2b01      	cmp	r3, #1
 8005984:	d11f      	bne.n	80059c6 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8005986:	69bb      	ldr	r3, [r7, #24]
 8005988:	015a      	lsls	r2, r3, #5
 800598a:	69fb      	ldr	r3, [r7, #28]
 800598c:	4413      	add	r3, r2
 800598e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005992:	691b      	ldr	r3, [r3, #16]
 8005994:	69ba      	ldr	r2, [r7, #24]
 8005996:	0151      	lsls	r1, r2, #5
 8005998:	69fa      	ldr	r2, [r7, #28]
 800599a:	440a      	add	r2, r1
 800599c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80059a0:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 80059a4:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 80059a6:	69bb      	ldr	r3, [r7, #24]
 80059a8:	015a      	lsls	r2, r3, #5
 80059aa:	69fb      	ldr	r3, [r7, #28]
 80059ac:	4413      	add	r3, r2
 80059ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80059b2:	691b      	ldr	r3, [r3, #16]
 80059b4:	69ba      	ldr	r2, [r7, #24]
 80059b6:	0151      	lsls	r1, r2, #5
 80059b8:	69fa      	ldr	r2, [r7, #28]
 80059ba:	440a      	add	r2, r1
 80059bc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80059c0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80059c4:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 80059c6:	79fb      	ldrb	r3, [r7, #7]
 80059c8:	2b01      	cmp	r3, #1
 80059ca:	d14b      	bne.n	8005a64 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80059cc:	68bb      	ldr	r3, [r7, #8]
 80059ce:	691b      	ldr	r3, [r3, #16]
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d009      	beq.n	80059e8 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80059d4:	69bb      	ldr	r3, [r7, #24]
 80059d6:	015a      	lsls	r2, r3, #5
 80059d8:	69fb      	ldr	r3, [r7, #28]
 80059da:	4413      	add	r3, r2
 80059dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80059e0:	461a      	mov	r2, r3
 80059e2:	68bb      	ldr	r3, [r7, #8]
 80059e4:	691b      	ldr	r3, [r3, #16]
 80059e6:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 80059e8:	68bb      	ldr	r3, [r7, #8]
 80059ea:	78db      	ldrb	r3, [r3, #3]
 80059ec:	2b01      	cmp	r3, #1
 80059ee:	d128      	bne.n	8005a42 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80059f0:	69fb      	ldr	r3, [r7, #28]
 80059f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80059f6:	689b      	ldr	r3, [r3, #8]
 80059f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d110      	bne.n	8005a22 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005a00:	69bb      	ldr	r3, [r7, #24]
 8005a02:	015a      	lsls	r2, r3, #5
 8005a04:	69fb      	ldr	r3, [r7, #28]
 8005a06:	4413      	add	r3, r2
 8005a08:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	69ba      	ldr	r2, [r7, #24]
 8005a10:	0151      	lsls	r1, r2, #5
 8005a12:	69fa      	ldr	r2, [r7, #28]
 8005a14:	440a      	add	r2, r1
 8005a16:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005a1a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005a1e:	6013      	str	r3, [r2, #0]
 8005a20:	e00f      	b.n	8005a42 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8005a22:	69bb      	ldr	r3, [r7, #24]
 8005a24:	015a      	lsls	r2, r3, #5
 8005a26:	69fb      	ldr	r3, [r7, #28]
 8005a28:	4413      	add	r3, r2
 8005a2a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	69ba      	ldr	r2, [r7, #24]
 8005a32:	0151      	lsls	r1, r2, #5
 8005a34:	69fa      	ldr	r2, [r7, #28]
 8005a36:	440a      	add	r2, r1
 8005a38:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005a3c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005a40:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005a42:	69bb      	ldr	r3, [r7, #24]
 8005a44:	015a      	lsls	r2, r3, #5
 8005a46:	69fb      	ldr	r3, [r7, #28]
 8005a48:	4413      	add	r3, r2
 8005a4a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	69ba      	ldr	r2, [r7, #24]
 8005a52:	0151      	lsls	r1, r2, #5
 8005a54:	69fa      	ldr	r2, [r7, #28]
 8005a56:	440a      	add	r2, r1
 8005a58:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005a5c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005a60:	6013      	str	r3, [r2, #0]
 8005a62:	e12f      	b.n	8005cc4 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005a64:	69bb      	ldr	r3, [r7, #24]
 8005a66:	015a      	lsls	r2, r3, #5
 8005a68:	69fb      	ldr	r3, [r7, #28]
 8005a6a:	4413      	add	r3, r2
 8005a6c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	69ba      	ldr	r2, [r7, #24]
 8005a74:	0151      	lsls	r1, r2, #5
 8005a76:	69fa      	ldr	r2, [r7, #28]
 8005a78:	440a      	add	r2, r1
 8005a7a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005a7e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005a82:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005a84:	68bb      	ldr	r3, [r7, #8]
 8005a86:	78db      	ldrb	r3, [r3, #3]
 8005a88:	2b01      	cmp	r3, #1
 8005a8a:	d015      	beq.n	8005ab8 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8005a8c:	68bb      	ldr	r3, [r7, #8]
 8005a8e:	695b      	ldr	r3, [r3, #20]
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	f000 8117 	beq.w	8005cc4 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8005a96:	69fb      	ldr	r3, [r7, #28]
 8005a98:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a9c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005a9e:	68bb      	ldr	r3, [r7, #8]
 8005aa0:	781b      	ldrb	r3, [r3, #0]
 8005aa2:	f003 030f 	and.w	r3, r3, #15
 8005aa6:	2101      	movs	r1, #1
 8005aa8:	fa01 f303 	lsl.w	r3, r1, r3
 8005aac:	69f9      	ldr	r1, [r7, #28]
 8005aae:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005ab2:	4313      	orrs	r3, r2
 8005ab4:	634b      	str	r3, [r1, #52]	; 0x34
 8005ab6:	e105      	b.n	8005cc4 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005ab8:	69fb      	ldr	r3, [r7, #28]
 8005aba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005abe:	689b      	ldr	r3, [r3, #8]
 8005ac0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d110      	bne.n	8005aea <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005ac8:	69bb      	ldr	r3, [r7, #24]
 8005aca:	015a      	lsls	r2, r3, #5
 8005acc:	69fb      	ldr	r3, [r7, #28]
 8005ace:	4413      	add	r3, r2
 8005ad0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	69ba      	ldr	r2, [r7, #24]
 8005ad8:	0151      	lsls	r1, r2, #5
 8005ada:	69fa      	ldr	r2, [r7, #28]
 8005adc:	440a      	add	r2, r1
 8005ade:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005ae2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005ae6:	6013      	str	r3, [r2, #0]
 8005ae8:	e00f      	b.n	8005b0a <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8005aea:	69bb      	ldr	r3, [r7, #24]
 8005aec:	015a      	lsls	r2, r3, #5
 8005aee:	69fb      	ldr	r3, [r7, #28]
 8005af0:	4413      	add	r3, r2
 8005af2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	69ba      	ldr	r2, [r7, #24]
 8005afa:	0151      	lsls	r1, r2, #5
 8005afc:	69fa      	ldr	r2, [r7, #28]
 8005afe:	440a      	add	r2, r1
 8005b00:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005b04:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005b08:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8005b0a:	68bb      	ldr	r3, [r7, #8]
 8005b0c:	68d9      	ldr	r1, [r3, #12]
 8005b0e:	68bb      	ldr	r3, [r7, #8]
 8005b10:	781a      	ldrb	r2, [r3, #0]
 8005b12:	68bb      	ldr	r3, [r7, #8]
 8005b14:	695b      	ldr	r3, [r3, #20]
 8005b16:	b298      	uxth	r0, r3
 8005b18:	79fb      	ldrb	r3, [r7, #7]
 8005b1a:	9300      	str	r3, [sp, #0]
 8005b1c:	4603      	mov	r3, r0
 8005b1e:	68f8      	ldr	r0, [r7, #12]
 8005b20:	f000 fa2b 	bl	8005f7a <USB_WritePacket>
 8005b24:	e0ce      	b.n	8005cc4 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8005b26:	69bb      	ldr	r3, [r7, #24]
 8005b28:	015a      	lsls	r2, r3, #5
 8005b2a:	69fb      	ldr	r3, [r7, #28]
 8005b2c:	4413      	add	r3, r2
 8005b2e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b32:	691b      	ldr	r3, [r3, #16]
 8005b34:	69ba      	ldr	r2, [r7, #24]
 8005b36:	0151      	lsls	r1, r2, #5
 8005b38:	69fa      	ldr	r2, [r7, #28]
 8005b3a:	440a      	add	r2, r1
 8005b3c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005b40:	0cdb      	lsrs	r3, r3, #19
 8005b42:	04db      	lsls	r3, r3, #19
 8005b44:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8005b46:	69bb      	ldr	r3, [r7, #24]
 8005b48:	015a      	lsls	r2, r3, #5
 8005b4a:	69fb      	ldr	r3, [r7, #28]
 8005b4c:	4413      	add	r3, r2
 8005b4e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b52:	691b      	ldr	r3, [r3, #16]
 8005b54:	69ba      	ldr	r2, [r7, #24]
 8005b56:	0151      	lsls	r1, r2, #5
 8005b58:	69fa      	ldr	r2, [r7, #28]
 8005b5a:	440a      	add	r2, r1
 8005b5c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005b60:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005b64:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005b68:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8005b6a:	68bb      	ldr	r3, [r7, #8]
 8005b6c:	695b      	ldr	r3, [r3, #20]
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d126      	bne.n	8005bc0 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8005b72:	69bb      	ldr	r3, [r7, #24]
 8005b74:	015a      	lsls	r2, r3, #5
 8005b76:	69fb      	ldr	r3, [r7, #28]
 8005b78:	4413      	add	r3, r2
 8005b7a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b7e:	691a      	ldr	r2, [r3, #16]
 8005b80:	68bb      	ldr	r3, [r7, #8]
 8005b82:	689b      	ldr	r3, [r3, #8]
 8005b84:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005b88:	69b9      	ldr	r1, [r7, #24]
 8005b8a:	0148      	lsls	r0, r1, #5
 8005b8c:	69f9      	ldr	r1, [r7, #28]
 8005b8e:	4401      	add	r1, r0
 8005b90:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005b94:	4313      	orrs	r3, r2
 8005b96:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005b98:	69bb      	ldr	r3, [r7, #24]
 8005b9a:	015a      	lsls	r2, r3, #5
 8005b9c:	69fb      	ldr	r3, [r7, #28]
 8005b9e:	4413      	add	r3, r2
 8005ba0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ba4:	691b      	ldr	r3, [r3, #16]
 8005ba6:	69ba      	ldr	r2, [r7, #24]
 8005ba8:	0151      	lsls	r1, r2, #5
 8005baa:	69fa      	ldr	r2, [r7, #28]
 8005bac:	440a      	add	r2, r1
 8005bae:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005bb2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005bb6:	6113      	str	r3, [r2, #16]
 8005bb8:	e036      	b.n	8005c28 <USB_EPStartXfer+0x3dc>
 8005bba:	bf00      	nop
 8005bbc:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8005bc0:	68bb      	ldr	r3, [r7, #8]
 8005bc2:	695a      	ldr	r2, [r3, #20]
 8005bc4:	68bb      	ldr	r3, [r7, #8]
 8005bc6:	689b      	ldr	r3, [r3, #8]
 8005bc8:	4413      	add	r3, r2
 8005bca:	1e5a      	subs	r2, r3, #1
 8005bcc:	68bb      	ldr	r3, [r7, #8]
 8005bce:	689b      	ldr	r3, [r3, #8]
 8005bd0:	fbb2 f3f3 	udiv	r3, r2, r3
 8005bd4:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8005bd6:	69bb      	ldr	r3, [r7, #24]
 8005bd8:	015a      	lsls	r2, r3, #5
 8005bda:	69fb      	ldr	r3, [r7, #28]
 8005bdc:	4413      	add	r3, r2
 8005bde:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005be2:	691a      	ldr	r2, [r3, #16]
 8005be4:	8afb      	ldrh	r3, [r7, #22]
 8005be6:	04d9      	lsls	r1, r3, #19
 8005be8:	4b39      	ldr	r3, [pc, #228]	; (8005cd0 <USB_EPStartXfer+0x484>)
 8005bea:	400b      	ands	r3, r1
 8005bec:	69b9      	ldr	r1, [r7, #24]
 8005bee:	0148      	lsls	r0, r1, #5
 8005bf0:	69f9      	ldr	r1, [r7, #28]
 8005bf2:	4401      	add	r1, r0
 8005bf4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005bf8:	4313      	orrs	r3, r2
 8005bfa:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8005bfc:	69bb      	ldr	r3, [r7, #24]
 8005bfe:	015a      	lsls	r2, r3, #5
 8005c00:	69fb      	ldr	r3, [r7, #28]
 8005c02:	4413      	add	r3, r2
 8005c04:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c08:	691a      	ldr	r2, [r3, #16]
 8005c0a:	68bb      	ldr	r3, [r7, #8]
 8005c0c:	689b      	ldr	r3, [r3, #8]
 8005c0e:	8af9      	ldrh	r1, [r7, #22]
 8005c10:	fb01 f303 	mul.w	r3, r1, r3
 8005c14:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005c18:	69b9      	ldr	r1, [r7, #24]
 8005c1a:	0148      	lsls	r0, r1, #5
 8005c1c:	69f9      	ldr	r1, [r7, #28]
 8005c1e:	4401      	add	r1, r0
 8005c20:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005c24:	4313      	orrs	r3, r2
 8005c26:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8005c28:	79fb      	ldrb	r3, [r7, #7]
 8005c2a:	2b01      	cmp	r3, #1
 8005c2c:	d10d      	bne.n	8005c4a <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8005c2e:	68bb      	ldr	r3, [r7, #8]
 8005c30:	68db      	ldr	r3, [r3, #12]
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d009      	beq.n	8005c4a <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8005c36:	68bb      	ldr	r3, [r7, #8]
 8005c38:	68d9      	ldr	r1, [r3, #12]
 8005c3a:	69bb      	ldr	r3, [r7, #24]
 8005c3c:	015a      	lsls	r2, r3, #5
 8005c3e:	69fb      	ldr	r3, [r7, #28]
 8005c40:	4413      	add	r3, r2
 8005c42:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c46:	460a      	mov	r2, r1
 8005c48:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8005c4a:	68bb      	ldr	r3, [r7, #8]
 8005c4c:	78db      	ldrb	r3, [r3, #3]
 8005c4e:	2b01      	cmp	r3, #1
 8005c50:	d128      	bne.n	8005ca4 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005c52:	69fb      	ldr	r3, [r7, #28]
 8005c54:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c58:	689b      	ldr	r3, [r3, #8]
 8005c5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	d110      	bne.n	8005c84 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8005c62:	69bb      	ldr	r3, [r7, #24]
 8005c64:	015a      	lsls	r2, r3, #5
 8005c66:	69fb      	ldr	r3, [r7, #28]
 8005c68:	4413      	add	r3, r2
 8005c6a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	69ba      	ldr	r2, [r7, #24]
 8005c72:	0151      	lsls	r1, r2, #5
 8005c74:	69fa      	ldr	r2, [r7, #28]
 8005c76:	440a      	add	r2, r1
 8005c78:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005c7c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005c80:	6013      	str	r3, [r2, #0]
 8005c82:	e00f      	b.n	8005ca4 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8005c84:	69bb      	ldr	r3, [r7, #24]
 8005c86:	015a      	lsls	r2, r3, #5
 8005c88:	69fb      	ldr	r3, [r7, #28]
 8005c8a:	4413      	add	r3, r2
 8005c8c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	69ba      	ldr	r2, [r7, #24]
 8005c94:	0151      	lsls	r1, r2, #5
 8005c96:	69fa      	ldr	r2, [r7, #28]
 8005c98:	440a      	add	r2, r1
 8005c9a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005c9e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005ca2:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8005ca4:	69bb      	ldr	r3, [r7, #24]
 8005ca6:	015a      	lsls	r2, r3, #5
 8005ca8:	69fb      	ldr	r3, [r7, #28]
 8005caa:	4413      	add	r3, r2
 8005cac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	69ba      	ldr	r2, [r7, #24]
 8005cb4:	0151      	lsls	r1, r2, #5
 8005cb6:	69fa      	ldr	r2, [r7, #28]
 8005cb8:	440a      	add	r2, r1
 8005cba:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005cbe:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005cc2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005cc4:	2300      	movs	r3, #0
}
 8005cc6:	4618      	mov	r0, r3
 8005cc8:	3720      	adds	r7, #32
 8005cca:	46bd      	mov	sp, r7
 8005ccc:	bd80      	pop	{r7, pc}
 8005cce:	bf00      	nop
 8005cd0:	1ff80000 	.word	0x1ff80000

08005cd4 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8005cd4:	b480      	push	{r7}
 8005cd6:	b087      	sub	sp, #28
 8005cd8:	af00      	add	r7, sp, #0
 8005cda:	60f8      	str	r0, [r7, #12]
 8005cdc:	60b9      	str	r1, [r7, #8]
 8005cde:	4613      	mov	r3, r2
 8005ce0:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8005ce6:	68bb      	ldr	r3, [r7, #8]
 8005ce8:	781b      	ldrb	r3, [r3, #0]
 8005cea:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005cec:	68bb      	ldr	r3, [r7, #8]
 8005cee:	785b      	ldrb	r3, [r3, #1]
 8005cf0:	2b01      	cmp	r3, #1
 8005cf2:	f040 80cd 	bne.w	8005e90 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8005cf6:	68bb      	ldr	r3, [r7, #8]
 8005cf8:	695b      	ldr	r3, [r3, #20]
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d132      	bne.n	8005d64 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005cfe:	693b      	ldr	r3, [r7, #16]
 8005d00:	015a      	lsls	r2, r3, #5
 8005d02:	697b      	ldr	r3, [r7, #20]
 8005d04:	4413      	add	r3, r2
 8005d06:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d0a:	691b      	ldr	r3, [r3, #16]
 8005d0c:	693a      	ldr	r2, [r7, #16]
 8005d0e:	0151      	lsls	r1, r2, #5
 8005d10:	697a      	ldr	r2, [r7, #20]
 8005d12:	440a      	add	r2, r1
 8005d14:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005d18:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005d1c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005d20:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005d22:	693b      	ldr	r3, [r7, #16]
 8005d24:	015a      	lsls	r2, r3, #5
 8005d26:	697b      	ldr	r3, [r7, #20]
 8005d28:	4413      	add	r3, r2
 8005d2a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d2e:	691b      	ldr	r3, [r3, #16]
 8005d30:	693a      	ldr	r2, [r7, #16]
 8005d32:	0151      	lsls	r1, r2, #5
 8005d34:	697a      	ldr	r2, [r7, #20]
 8005d36:	440a      	add	r2, r1
 8005d38:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005d3c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005d40:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005d42:	693b      	ldr	r3, [r7, #16]
 8005d44:	015a      	lsls	r2, r3, #5
 8005d46:	697b      	ldr	r3, [r7, #20]
 8005d48:	4413      	add	r3, r2
 8005d4a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d4e:	691b      	ldr	r3, [r3, #16]
 8005d50:	693a      	ldr	r2, [r7, #16]
 8005d52:	0151      	lsls	r1, r2, #5
 8005d54:	697a      	ldr	r2, [r7, #20]
 8005d56:	440a      	add	r2, r1
 8005d58:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005d5c:	0cdb      	lsrs	r3, r3, #19
 8005d5e:	04db      	lsls	r3, r3, #19
 8005d60:	6113      	str	r3, [r2, #16]
 8005d62:	e04e      	b.n	8005e02 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005d64:	693b      	ldr	r3, [r7, #16]
 8005d66:	015a      	lsls	r2, r3, #5
 8005d68:	697b      	ldr	r3, [r7, #20]
 8005d6a:	4413      	add	r3, r2
 8005d6c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d70:	691b      	ldr	r3, [r3, #16]
 8005d72:	693a      	ldr	r2, [r7, #16]
 8005d74:	0151      	lsls	r1, r2, #5
 8005d76:	697a      	ldr	r2, [r7, #20]
 8005d78:	440a      	add	r2, r1
 8005d7a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005d7e:	0cdb      	lsrs	r3, r3, #19
 8005d80:	04db      	lsls	r3, r3, #19
 8005d82:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005d84:	693b      	ldr	r3, [r7, #16]
 8005d86:	015a      	lsls	r2, r3, #5
 8005d88:	697b      	ldr	r3, [r7, #20]
 8005d8a:	4413      	add	r3, r2
 8005d8c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d90:	691b      	ldr	r3, [r3, #16]
 8005d92:	693a      	ldr	r2, [r7, #16]
 8005d94:	0151      	lsls	r1, r2, #5
 8005d96:	697a      	ldr	r2, [r7, #20]
 8005d98:	440a      	add	r2, r1
 8005d9a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005d9e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005da2:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005da6:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8005da8:	68bb      	ldr	r3, [r7, #8]
 8005daa:	695a      	ldr	r2, [r3, #20]
 8005dac:	68bb      	ldr	r3, [r7, #8]
 8005dae:	689b      	ldr	r3, [r3, #8]
 8005db0:	429a      	cmp	r2, r3
 8005db2:	d903      	bls.n	8005dbc <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8005db4:	68bb      	ldr	r3, [r7, #8]
 8005db6:	689a      	ldr	r2, [r3, #8]
 8005db8:	68bb      	ldr	r3, [r7, #8]
 8005dba:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005dbc:	693b      	ldr	r3, [r7, #16]
 8005dbe:	015a      	lsls	r2, r3, #5
 8005dc0:	697b      	ldr	r3, [r7, #20]
 8005dc2:	4413      	add	r3, r2
 8005dc4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005dc8:	691b      	ldr	r3, [r3, #16]
 8005dca:	693a      	ldr	r2, [r7, #16]
 8005dcc:	0151      	lsls	r1, r2, #5
 8005dce:	697a      	ldr	r2, [r7, #20]
 8005dd0:	440a      	add	r2, r1
 8005dd2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005dd6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005dda:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8005ddc:	693b      	ldr	r3, [r7, #16]
 8005dde:	015a      	lsls	r2, r3, #5
 8005de0:	697b      	ldr	r3, [r7, #20]
 8005de2:	4413      	add	r3, r2
 8005de4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005de8:	691a      	ldr	r2, [r3, #16]
 8005dea:	68bb      	ldr	r3, [r7, #8]
 8005dec:	695b      	ldr	r3, [r3, #20]
 8005dee:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005df2:	6939      	ldr	r1, [r7, #16]
 8005df4:	0148      	lsls	r0, r1, #5
 8005df6:	6979      	ldr	r1, [r7, #20]
 8005df8:	4401      	add	r1, r0
 8005dfa:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005dfe:	4313      	orrs	r3, r2
 8005e00:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8005e02:	79fb      	ldrb	r3, [r7, #7]
 8005e04:	2b01      	cmp	r3, #1
 8005e06:	d11e      	bne.n	8005e46 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8005e08:	68bb      	ldr	r3, [r7, #8]
 8005e0a:	691b      	ldr	r3, [r3, #16]
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	d009      	beq.n	8005e24 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8005e10:	693b      	ldr	r3, [r7, #16]
 8005e12:	015a      	lsls	r2, r3, #5
 8005e14:	697b      	ldr	r3, [r7, #20]
 8005e16:	4413      	add	r3, r2
 8005e18:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e1c:	461a      	mov	r2, r3
 8005e1e:	68bb      	ldr	r3, [r7, #8]
 8005e20:	691b      	ldr	r3, [r3, #16]
 8005e22:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005e24:	693b      	ldr	r3, [r7, #16]
 8005e26:	015a      	lsls	r2, r3, #5
 8005e28:	697b      	ldr	r3, [r7, #20]
 8005e2a:	4413      	add	r3, r2
 8005e2c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	693a      	ldr	r2, [r7, #16]
 8005e34:	0151      	lsls	r1, r2, #5
 8005e36:	697a      	ldr	r2, [r7, #20]
 8005e38:	440a      	add	r2, r1
 8005e3a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005e3e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005e42:	6013      	str	r3, [r2, #0]
 8005e44:	e092      	b.n	8005f6c <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005e46:	693b      	ldr	r3, [r7, #16]
 8005e48:	015a      	lsls	r2, r3, #5
 8005e4a:	697b      	ldr	r3, [r7, #20]
 8005e4c:	4413      	add	r3, r2
 8005e4e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	693a      	ldr	r2, [r7, #16]
 8005e56:	0151      	lsls	r1, r2, #5
 8005e58:	697a      	ldr	r2, [r7, #20]
 8005e5a:	440a      	add	r2, r1
 8005e5c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005e60:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005e64:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8005e66:	68bb      	ldr	r3, [r7, #8]
 8005e68:	695b      	ldr	r3, [r3, #20]
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d07e      	beq.n	8005f6c <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8005e6e:	697b      	ldr	r3, [r7, #20]
 8005e70:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e74:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005e76:	68bb      	ldr	r3, [r7, #8]
 8005e78:	781b      	ldrb	r3, [r3, #0]
 8005e7a:	f003 030f 	and.w	r3, r3, #15
 8005e7e:	2101      	movs	r1, #1
 8005e80:	fa01 f303 	lsl.w	r3, r1, r3
 8005e84:	6979      	ldr	r1, [r7, #20]
 8005e86:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005e8a:	4313      	orrs	r3, r2
 8005e8c:	634b      	str	r3, [r1, #52]	; 0x34
 8005e8e:	e06d      	b.n	8005f6c <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8005e90:	693b      	ldr	r3, [r7, #16]
 8005e92:	015a      	lsls	r2, r3, #5
 8005e94:	697b      	ldr	r3, [r7, #20]
 8005e96:	4413      	add	r3, r2
 8005e98:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e9c:	691b      	ldr	r3, [r3, #16]
 8005e9e:	693a      	ldr	r2, [r7, #16]
 8005ea0:	0151      	lsls	r1, r2, #5
 8005ea2:	697a      	ldr	r2, [r7, #20]
 8005ea4:	440a      	add	r2, r1
 8005ea6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005eaa:	0cdb      	lsrs	r3, r3, #19
 8005eac:	04db      	lsls	r3, r3, #19
 8005eae:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8005eb0:	693b      	ldr	r3, [r7, #16]
 8005eb2:	015a      	lsls	r2, r3, #5
 8005eb4:	697b      	ldr	r3, [r7, #20]
 8005eb6:	4413      	add	r3, r2
 8005eb8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ebc:	691b      	ldr	r3, [r3, #16]
 8005ebe:	693a      	ldr	r2, [r7, #16]
 8005ec0:	0151      	lsls	r1, r2, #5
 8005ec2:	697a      	ldr	r2, [r7, #20]
 8005ec4:	440a      	add	r2, r1
 8005ec6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005eca:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005ece:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005ed2:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8005ed4:	68bb      	ldr	r3, [r7, #8]
 8005ed6:	695b      	ldr	r3, [r3, #20]
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	d003      	beq.n	8005ee4 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 8005edc:	68bb      	ldr	r3, [r7, #8]
 8005ede:	689a      	ldr	r2, [r3, #8]
 8005ee0:	68bb      	ldr	r3, [r7, #8]
 8005ee2:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005ee4:	693b      	ldr	r3, [r7, #16]
 8005ee6:	015a      	lsls	r2, r3, #5
 8005ee8:	697b      	ldr	r3, [r7, #20]
 8005eea:	4413      	add	r3, r2
 8005eec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ef0:	691b      	ldr	r3, [r3, #16]
 8005ef2:	693a      	ldr	r2, [r7, #16]
 8005ef4:	0151      	lsls	r1, r2, #5
 8005ef6:	697a      	ldr	r2, [r7, #20]
 8005ef8:	440a      	add	r2, r1
 8005efa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005efe:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005f02:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8005f04:	693b      	ldr	r3, [r7, #16]
 8005f06:	015a      	lsls	r2, r3, #5
 8005f08:	697b      	ldr	r3, [r7, #20]
 8005f0a:	4413      	add	r3, r2
 8005f0c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f10:	691a      	ldr	r2, [r3, #16]
 8005f12:	68bb      	ldr	r3, [r7, #8]
 8005f14:	689b      	ldr	r3, [r3, #8]
 8005f16:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005f1a:	6939      	ldr	r1, [r7, #16]
 8005f1c:	0148      	lsls	r0, r1, #5
 8005f1e:	6979      	ldr	r1, [r7, #20]
 8005f20:	4401      	add	r1, r0
 8005f22:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005f26:	4313      	orrs	r3, r2
 8005f28:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8005f2a:	79fb      	ldrb	r3, [r7, #7]
 8005f2c:	2b01      	cmp	r3, #1
 8005f2e:	d10d      	bne.n	8005f4c <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8005f30:	68bb      	ldr	r3, [r7, #8]
 8005f32:	68db      	ldr	r3, [r3, #12]
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d009      	beq.n	8005f4c <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8005f38:	68bb      	ldr	r3, [r7, #8]
 8005f3a:	68d9      	ldr	r1, [r3, #12]
 8005f3c:	693b      	ldr	r3, [r7, #16]
 8005f3e:	015a      	lsls	r2, r3, #5
 8005f40:	697b      	ldr	r3, [r7, #20]
 8005f42:	4413      	add	r3, r2
 8005f44:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f48:	460a      	mov	r2, r1
 8005f4a:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8005f4c:	693b      	ldr	r3, [r7, #16]
 8005f4e:	015a      	lsls	r2, r3, #5
 8005f50:	697b      	ldr	r3, [r7, #20]
 8005f52:	4413      	add	r3, r2
 8005f54:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	693a      	ldr	r2, [r7, #16]
 8005f5c:	0151      	lsls	r1, r2, #5
 8005f5e:	697a      	ldr	r2, [r7, #20]
 8005f60:	440a      	add	r2, r1
 8005f62:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005f66:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005f6a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005f6c:	2300      	movs	r3, #0
}
 8005f6e:	4618      	mov	r0, r3
 8005f70:	371c      	adds	r7, #28
 8005f72:	46bd      	mov	sp, r7
 8005f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f78:	4770      	bx	lr

08005f7a <USB_WritePacket>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src, uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8005f7a:	b480      	push	{r7}
 8005f7c:	b089      	sub	sp, #36	; 0x24
 8005f7e:	af00      	add	r7, sp, #0
 8005f80:	60f8      	str	r0, [r7, #12]
 8005f82:	60b9      	str	r1, [r7, #8]
 8005f84:	4611      	mov	r1, r2
 8005f86:	461a      	mov	r2, r3
 8005f88:	460b      	mov	r3, r1
 8005f8a:	71fb      	strb	r3, [r7, #7]
 8005f8c:	4613      	mov	r3, r2
 8005f8e:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 8005f94:	68bb      	ldr	r3, [r7, #8]
 8005f96:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 8005f98:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	d11a      	bne.n	8005fd6 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8005fa0:	88bb      	ldrh	r3, [r7, #4]
 8005fa2:	3303      	adds	r3, #3
 8005fa4:	089b      	lsrs	r3, r3, #2
 8005fa6:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8005fa8:	2300      	movs	r3, #0
 8005faa:	61bb      	str	r3, [r7, #24]
 8005fac:	e00f      	b.n	8005fce <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8005fae:	79fb      	ldrb	r3, [r7, #7]
 8005fb0:	031a      	lsls	r2, r3, #12
 8005fb2:	697b      	ldr	r3, [r7, #20]
 8005fb4:	4413      	add	r3, r2
 8005fb6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005fba:	461a      	mov	r2, r3
 8005fbc:	69fb      	ldr	r3, [r7, #28]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	6013      	str	r3, [r2, #0]
      pSrc++;
 8005fc2:	69fb      	ldr	r3, [r7, #28]
 8005fc4:	3304      	adds	r3, #4
 8005fc6:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8005fc8:	69bb      	ldr	r3, [r7, #24]
 8005fca:	3301      	adds	r3, #1
 8005fcc:	61bb      	str	r3, [r7, #24]
 8005fce:	69ba      	ldr	r2, [r7, #24]
 8005fd0:	693b      	ldr	r3, [r7, #16]
 8005fd2:	429a      	cmp	r2, r3
 8005fd4:	d3eb      	bcc.n	8005fae <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8005fd6:	2300      	movs	r3, #0
}
 8005fd8:	4618      	mov	r0, r3
 8005fda:	3724      	adds	r7, #36	; 0x24
 8005fdc:	46bd      	mov	sp, r7
 8005fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fe2:	4770      	bx	lr

08005fe4 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8005fe4:	b480      	push	{r7}
 8005fe6:	b089      	sub	sp, #36	; 0x24
 8005fe8:	af00      	add	r7, sp, #0
 8005fea:	60f8      	str	r0, [r7, #12]
 8005fec:	60b9      	str	r1, [r7, #8]
 8005fee:	4613      	mov	r3, r2
 8005ff0:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 8005ff6:	68bb      	ldr	r3, [r7, #8]
 8005ff8:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8005ffa:	88fb      	ldrh	r3, [r7, #6]
 8005ffc:	3303      	adds	r3, #3
 8005ffe:	089b      	lsrs	r3, r3, #2
 8006000:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 8006002:	2300      	movs	r3, #0
 8006004:	61bb      	str	r3, [r7, #24]
 8006006:	e00b      	b.n	8006020 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8006008:	697b      	ldr	r3, [r7, #20]
 800600a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800600e:	681a      	ldr	r2, [r3, #0]
 8006010:	69fb      	ldr	r3, [r7, #28]
 8006012:	601a      	str	r2, [r3, #0]
    pDest++;
 8006014:	69fb      	ldr	r3, [r7, #28]
 8006016:	3304      	adds	r3, #4
 8006018:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 800601a:	69bb      	ldr	r3, [r7, #24]
 800601c:	3301      	adds	r3, #1
 800601e:	61bb      	str	r3, [r7, #24]
 8006020:	69ba      	ldr	r2, [r7, #24]
 8006022:	693b      	ldr	r3, [r7, #16]
 8006024:	429a      	cmp	r2, r3
 8006026:	d3ef      	bcc.n	8006008 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 8006028:	69fb      	ldr	r3, [r7, #28]
}
 800602a:	4618      	mov	r0, r3
 800602c:	3724      	adds	r7, #36	; 0x24
 800602e:	46bd      	mov	sp, r7
 8006030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006034:	4770      	bx	lr

08006036 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006036:	b480      	push	{r7}
 8006038:	b085      	sub	sp, #20
 800603a:	af00      	add	r7, sp, #0
 800603c:	6078      	str	r0, [r7, #4]
 800603e:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006044:	683b      	ldr	r3, [r7, #0]
 8006046:	781b      	ldrb	r3, [r3, #0]
 8006048:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800604a:	683b      	ldr	r3, [r7, #0]
 800604c:	785b      	ldrb	r3, [r3, #1]
 800604e:	2b01      	cmp	r3, #1
 8006050:	d12c      	bne.n	80060ac <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8006052:	68bb      	ldr	r3, [r7, #8]
 8006054:	015a      	lsls	r2, r3, #5
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	4413      	add	r3, r2
 800605a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	2b00      	cmp	r3, #0
 8006062:	db12      	blt.n	800608a <USB_EPSetStall+0x54>
 8006064:	68bb      	ldr	r3, [r7, #8]
 8006066:	2b00      	cmp	r3, #0
 8006068:	d00f      	beq.n	800608a <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800606a:	68bb      	ldr	r3, [r7, #8]
 800606c:	015a      	lsls	r2, r3, #5
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	4413      	add	r3, r2
 8006072:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	68ba      	ldr	r2, [r7, #8]
 800607a:	0151      	lsls	r1, r2, #5
 800607c:	68fa      	ldr	r2, [r7, #12]
 800607e:	440a      	add	r2, r1
 8006080:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006084:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006088:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800608a:	68bb      	ldr	r3, [r7, #8]
 800608c:	015a      	lsls	r2, r3, #5
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	4413      	add	r3, r2
 8006092:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	68ba      	ldr	r2, [r7, #8]
 800609a:	0151      	lsls	r1, r2, #5
 800609c:	68fa      	ldr	r2, [r7, #12]
 800609e:	440a      	add	r2, r1
 80060a0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80060a4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80060a8:	6013      	str	r3, [r2, #0]
 80060aa:	e02b      	b.n	8006104 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80060ac:	68bb      	ldr	r3, [r7, #8]
 80060ae:	015a      	lsls	r2, r3, #5
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	4413      	add	r3, r2
 80060b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	db12      	blt.n	80060e4 <USB_EPSetStall+0xae>
 80060be:	68bb      	ldr	r3, [r7, #8]
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	d00f      	beq.n	80060e4 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80060c4:	68bb      	ldr	r3, [r7, #8]
 80060c6:	015a      	lsls	r2, r3, #5
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	4413      	add	r3, r2
 80060cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	68ba      	ldr	r2, [r7, #8]
 80060d4:	0151      	lsls	r1, r2, #5
 80060d6:	68fa      	ldr	r2, [r7, #12]
 80060d8:	440a      	add	r2, r1
 80060da:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80060de:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80060e2:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80060e4:	68bb      	ldr	r3, [r7, #8]
 80060e6:	015a      	lsls	r2, r3, #5
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	4413      	add	r3, r2
 80060ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	68ba      	ldr	r2, [r7, #8]
 80060f4:	0151      	lsls	r1, r2, #5
 80060f6:	68fa      	ldr	r2, [r7, #12]
 80060f8:	440a      	add	r2, r1
 80060fa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80060fe:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006102:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006104:	2300      	movs	r3, #0
}
 8006106:	4618      	mov	r0, r3
 8006108:	3714      	adds	r7, #20
 800610a:	46bd      	mov	sp, r7
 800610c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006110:	4770      	bx	lr

08006112 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006112:	b480      	push	{r7}
 8006114:	b085      	sub	sp, #20
 8006116:	af00      	add	r7, sp, #0
 8006118:	6078      	str	r0, [r7, #4]
 800611a:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006120:	683b      	ldr	r3, [r7, #0]
 8006122:	781b      	ldrb	r3, [r3, #0]
 8006124:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006126:	683b      	ldr	r3, [r7, #0]
 8006128:	785b      	ldrb	r3, [r3, #1]
 800612a:	2b01      	cmp	r3, #1
 800612c:	d128      	bne.n	8006180 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800612e:	68bb      	ldr	r3, [r7, #8]
 8006130:	015a      	lsls	r2, r3, #5
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	4413      	add	r3, r2
 8006136:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	68ba      	ldr	r2, [r7, #8]
 800613e:	0151      	lsls	r1, r2, #5
 8006140:	68fa      	ldr	r2, [r7, #12]
 8006142:	440a      	add	r2, r1
 8006144:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006148:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800614c:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800614e:	683b      	ldr	r3, [r7, #0]
 8006150:	78db      	ldrb	r3, [r3, #3]
 8006152:	2b03      	cmp	r3, #3
 8006154:	d003      	beq.n	800615e <USB_EPClearStall+0x4c>
 8006156:	683b      	ldr	r3, [r7, #0]
 8006158:	78db      	ldrb	r3, [r3, #3]
 800615a:	2b02      	cmp	r3, #2
 800615c:	d138      	bne.n	80061d0 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800615e:	68bb      	ldr	r3, [r7, #8]
 8006160:	015a      	lsls	r2, r3, #5
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	4413      	add	r3, r2
 8006166:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	68ba      	ldr	r2, [r7, #8]
 800616e:	0151      	lsls	r1, r2, #5
 8006170:	68fa      	ldr	r2, [r7, #12]
 8006172:	440a      	add	r2, r1
 8006174:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006178:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800617c:	6013      	str	r3, [r2, #0]
 800617e:	e027      	b.n	80061d0 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8006180:	68bb      	ldr	r3, [r7, #8]
 8006182:	015a      	lsls	r2, r3, #5
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	4413      	add	r3, r2
 8006188:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	68ba      	ldr	r2, [r7, #8]
 8006190:	0151      	lsls	r1, r2, #5
 8006192:	68fa      	ldr	r2, [r7, #12]
 8006194:	440a      	add	r2, r1
 8006196:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800619a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800619e:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80061a0:	683b      	ldr	r3, [r7, #0]
 80061a2:	78db      	ldrb	r3, [r3, #3]
 80061a4:	2b03      	cmp	r3, #3
 80061a6:	d003      	beq.n	80061b0 <USB_EPClearStall+0x9e>
 80061a8:	683b      	ldr	r3, [r7, #0]
 80061aa:	78db      	ldrb	r3, [r3, #3]
 80061ac:	2b02      	cmp	r3, #2
 80061ae:	d10f      	bne.n	80061d0 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80061b0:	68bb      	ldr	r3, [r7, #8]
 80061b2:	015a      	lsls	r2, r3, #5
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	4413      	add	r3, r2
 80061b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	68ba      	ldr	r2, [r7, #8]
 80061c0:	0151      	lsls	r1, r2, #5
 80061c2:	68fa      	ldr	r2, [r7, #12]
 80061c4:	440a      	add	r2, r1
 80061c6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80061ca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80061ce:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80061d0:	2300      	movs	r3, #0
}
 80061d2:	4618      	mov	r0, r3
 80061d4:	3714      	adds	r7, #20
 80061d6:	46bd      	mov	sp, r7
 80061d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061dc:	4770      	bx	lr

080061de <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80061de:	b480      	push	{r7}
 80061e0:	b085      	sub	sp, #20
 80061e2:	af00      	add	r7, sp, #0
 80061e4:	6078      	str	r0, [r7, #4]
 80061e6:	460b      	mov	r3, r1
 80061e8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	68fa      	ldr	r2, [r7, #12]
 80061f8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80061fc:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8006200:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006208:	681a      	ldr	r2, [r3, #0]
 800620a:	78fb      	ldrb	r3, [r7, #3]
 800620c:	011b      	lsls	r3, r3, #4
 800620e:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8006212:	68f9      	ldr	r1, [r7, #12]
 8006214:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006218:	4313      	orrs	r3, r2
 800621a:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800621c:	2300      	movs	r3, #0
}
 800621e:	4618      	mov	r0, r3
 8006220:	3714      	adds	r7, #20
 8006222:	46bd      	mov	sp, r7
 8006224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006228:	4770      	bx	lr

0800622a <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800622a:	b580      	push	{r7, lr}
 800622c:	b084      	sub	sp, #16
 800622e:	af00      	add	r7, sp, #0
 8006230:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800623c:	685b      	ldr	r3, [r3, #4]
 800623e:	68fa      	ldr	r2, [r7, #12]
 8006240:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006244:	f023 0302 	bic.w	r3, r3, #2
 8006248:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 800624a:	2003      	movs	r0, #3
 800624c:	f7fb f972 	bl	8001534 <HAL_Delay>

  return HAL_OK;
 8006250:	2300      	movs	r3, #0
}
 8006252:	4618      	mov	r0, r3
 8006254:	3710      	adds	r7, #16
 8006256:	46bd      	mov	sp, r7
 8006258:	bd80      	pop	{r7, pc}

0800625a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800625a:	b580      	push	{r7, lr}
 800625c:	b084      	sub	sp, #16
 800625e:	af00      	add	r7, sp, #0
 8006260:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800626c:	685b      	ldr	r3, [r3, #4]
 800626e:	68fa      	ldr	r2, [r7, #12]
 8006270:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006274:	f043 0302 	orr.w	r3, r3, #2
 8006278:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 800627a:	2003      	movs	r0, #3
 800627c:	f7fb f95a 	bl	8001534 <HAL_Delay>

  return HAL_OK;
 8006280:	2300      	movs	r3, #0
}
 8006282:	4618      	mov	r0, r3
 8006284:	3710      	adds	r7, #16
 8006286:	46bd      	mov	sp, r7
 8006288:	bd80      	pop	{r7, pc}

0800628a <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800628a:	b480      	push	{r7}
 800628c:	b085      	sub	sp, #20
 800628e:	af00      	add	r7, sp, #0
 8006290:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	695b      	ldr	r3, [r3, #20]
 8006296:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	699b      	ldr	r3, [r3, #24]
 800629c:	68fa      	ldr	r2, [r7, #12]
 800629e:	4013      	ands	r3, r2
 80062a0:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80062a2:	68fb      	ldr	r3, [r7, #12]
}
 80062a4:	4618      	mov	r0, r3
 80062a6:	3714      	adds	r7, #20
 80062a8:	46bd      	mov	sp, r7
 80062aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ae:	4770      	bx	lr

080062b0 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80062b0:	b480      	push	{r7}
 80062b2:	b085      	sub	sp, #20
 80062b4:	af00      	add	r7, sp, #0
 80062b6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80062c2:	699b      	ldr	r3, [r3, #24]
 80062c4:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80062cc:	69db      	ldr	r3, [r3, #28]
 80062ce:	68ba      	ldr	r2, [r7, #8]
 80062d0:	4013      	ands	r3, r2
 80062d2:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80062d4:	68bb      	ldr	r3, [r7, #8]
 80062d6:	0c1b      	lsrs	r3, r3, #16
}
 80062d8:	4618      	mov	r0, r3
 80062da:	3714      	adds	r7, #20
 80062dc:	46bd      	mov	sp, r7
 80062de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062e2:	4770      	bx	lr

080062e4 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80062e4:	b480      	push	{r7}
 80062e6:	b085      	sub	sp, #20
 80062e8:	af00      	add	r7, sp, #0
 80062ea:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80062f6:	699b      	ldr	r3, [r3, #24]
 80062f8:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006300:	69db      	ldr	r3, [r3, #28]
 8006302:	68ba      	ldr	r2, [r7, #8]
 8006304:	4013      	ands	r3, r2
 8006306:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8006308:	68bb      	ldr	r3, [r7, #8]
 800630a:	b29b      	uxth	r3, r3
}
 800630c:	4618      	mov	r0, r3
 800630e:	3714      	adds	r7, #20
 8006310:	46bd      	mov	sp, r7
 8006312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006316:	4770      	bx	lr

08006318 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8006318:	b480      	push	{r7}
 800631a:	b085      	sub	sp, #20
 800631c:	af00      	add	r7, sp, #0
 800631e:	6078      	str	r0, [r7, #4]
 8006320:	460b      	mov	r3, r1
 8006322:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8006328:	78fb      	ldrb	r3, [r7, #3]
 800632a:	015a      	lsls	r2, r3, #5
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	4413      	add	r3, r2
 8006330:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006334:	689b      	ldr	r3, [r3, #8]
 8006336:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800633e:	695b      	ldr	r3, [r3, #20]
 8006340:	68ba      	ldr	r2, [r7, #8]
 8006342:	4013      	ands	r3, r2
 8006344:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006346:	68bb      	ldr	r3, [r7, #8]
}
 8006348:	4618      	mov	r0, r3
 800634a:	3714      	adds	r7, #20
 800634c:	46bd      	mov	sp, r7
 800634e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006352:	4770      	bx	lr

08006354 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8006354:	b480      	push	{r7}
 8006356:	b087      	sub	sp, #28
 8006358:	af00      	add	r7, sp, #0
 800635a:	6078      	str	r0, [r7, #4]
 800635c:	460b      	mov	r3, r1
 800635e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 8006364:	697b      	ldr	r3, [r7, #20]
 8006366:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800636a:	691b      	ldr	r3, [r3, #16]
 800636c:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800636e:	697b      	ldr	r3, [r7, #20]
 8006370:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006374:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006376:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8006378:	78fb      	ldrb	r3, [r7, #3]
 800637a:	f003 030f 	and.w	r3, r3, #15
 800637e:	68fa      	ldr	r2, [r7, #12]
 8006380:	fa22 f303 	lsr.w	r3, r2, r3
 8006384:	01db      	lsls	r3, r3, #7
 8006386:	b2db      	uxtb	r3, r3
 8006388:	693a      	ldr	r2, [r7, #16]
 800638a:	4313      	orrs	r3, r2
 800638c:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800638e:	78fb      	ldrb	r3, [r7, #3]
 8006390:	015a      	lsls	r2, r3, #5
 8006392:	697b      	ldr	r3, [r7, #20]
 8006394:	4413      	add	r3, r2
 8006396:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800639a:	689b      	ldr	r3, [r3, #8]
 800639c:	693a      	ldr	r2, [r7, #16]
 800639e:	4013      	ands	r3, r2
 80063a0:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80063a2:	68bb      	ldr	r3, [r7, #8]
}
 80063a4:	4618      	mov	r0, r3
 80063a6:	371c      	adds	r7, #28
 80063a8:	46bd      	mov	sp, r7
 80063aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ae:	4770      	bx	lr

080063b0 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80063b0:	b480      	push	{r7}
 80063b2:	b083      	sub	sp, #12
 80063b4:	af00      	add	r7, sp, #0
 80063b6:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	695b      	ldr	r3, [r3, #20]
 80063bc:	f003 0301 	and.w	r3, r3, #1
}
 80063c0:	4618      	mov	r0, r3
 80063c2:	370c      	adds	r7, #12
 80063c4:	46bd      	mov	sp, r7
 80063c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ca:	4770      	bx	lr

080063cc <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 80063cc:	b480      	push	{r7}
 80063ce:	b085      	sub	sp, #20
 80063d0:	af00      	add	r7, sp, #0
 80063d2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP based on the enumeration speed */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	68fa      	ldr	r2, [r7, #12]
 80063e2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80063e6:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80063ea:	f023 0307 	bic.w	r3, r3, #7
 80063ee:	6013      	str	r3, [r2, #0]

  if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD) == DSTS_ENUMSPD_LS_PHY_6MHZ)
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80063f6:	689b      	ldr	r3, [r3, #8]
 80063f8:	f003 0306 	and.w	r3, r3, #6
 80063fc:	2b04      	cmp	r3, #4
 80063fe:	d109      	bne.n	8006414 <USB_ActivateSetup+0x48>
  {
    USBx_INEP(0U)->DIEPCTL |= 3U;
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	68fa      	ldr	r2, [r7, #12]
 800640a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800640e:	f043 0303 	orr.w	r3, r3, #3
 8006412:	6013      	str	r3, [r2, #0]
  }
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800641a:	685b      	ldr	r3, [r3, #4]
 800641c:	68fa      	ldr	r2, [r7, #12]
 800641e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006422:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006426:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006428:	2300      	movs	r3, #0
}
 800642a:	4618      	mov	r0, r3
 800642c:	3714      	adds	r7, #20
 800642e:	46bd      	mov	sp, r7
 8006430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006434:	4770      	bx	lr
	...

08006438 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8006438:	b480      	push	{r7}
 800643a:	b087      	sub	sp, #28
 800643c:	af00      	add	r7, sp, #0
 800643e:	60f8      	str	r0, [r7, #12]
 8006440:	460b      	mov	r3, r1
 8006442:	607a      	str	r2, [r7, #4]
 8006444:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	333c      	adds	r3, #60	; 0x3c
 800644e:	3304      	adds	r3, #4
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8006454:	693b      	ldr	r3, [r7, #16]
 8006456:	4a26      	ldr	r2, [pc, #152]	; (80064f0 <USB_EP0_OutStart+0xb8>)
 8006458:	4293      	cmp	r3, r2
 800645a:	d90a      	bls.n	8006472 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800645c:	697b      	ldr	r3, [r7, #20]
 800645e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006468:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800646c:	d101      	bne.n	8006472 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800646e:	2300      	movs	r3, #0
 8006470:	e037      	b.n	80064e2 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8006472:	697b      	ldr	r3, [r7, #20]
 8006474:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006478:	461a      	mov	r2, r3
 800647a:	2300      	movs	r3, #0
 800647c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800647e:	697b      	ldr	r3, [r7, #20]
 8006480:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006484:	691b      	ldr	r3, [r3, #16]
 8006486:	697a      	ldr	r2, [r7, #20]
 8006488:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800648c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006490:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8006492:	697b      	ldr	r3, [r7, #20]
 8006494:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006498:	691b      	ldr	r3, [r3, #16]
 800649a:	697a      	ldr	r2, [r7, #20]
 800649c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80064a0:	f043 0318 	orr.w	r3, r3, #24
 80064a4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80064a6:	697b      	ldr	r3, [r7, #20]
 80064a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80064ac:	691b      	ldr	r3, [r3, #16]
 80064ae:	697a      	ldr	r2, [r7, #20]
 80064b0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80064b4:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 80064b8:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 80064ba:	7afb      	ldrb	r3, [r7, #11]
 80064bc:	2b01      	cmp	r3, #1
 80064be:	d10f      	bne.n	80064e0 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 80064c0:	697b      	ldr	r3, [r7, #20]
 80064c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80064c6:	461a      	mov	r2, r3
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 80064cc:	697b      	ldr	r3, [r7, #20]
 80064ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	697a      	ldr	r2, [r7, #20]
 80064d6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80064da:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 80064de:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80064e0:	2300      	movs	r3, #0
}
 80064e2:	4618      	mov	r0, r3
 80064e4:	371c      	adds	r7, #28
 80064e6:	46bd      	mov	sp, r7
 80064e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ec:	4770      	bx	lr
 80064ee:	bf00      	nop
 80064f0:	4f54300a 	.word	0x4f54300a

080064f4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80064f4:	b480      	push	{r7}
 80064f6:	b085      	sub	sp, #20
 80064f8:	af00      	add	r7, sp, #0
 80064fa:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 80064fc:	2300      	movs	r3, #0
 80064fe:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	3301      	adds	r3, #1
 8006504:	60fb      	str	r3, [r7, #12]
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	4a13      	ldr	r2, [pc, #76]	; (8006558 <USB_CoreReset+0x64>)
 800650a:	4293      	cmp	r3, r2
 800650c:	d901      	bls.n	8006512 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800650e:	2303      	movs	r3, #3
 8006510:	e01b      	b.n	800654a <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	691b      	ldr	r3, [r3, #16]
 8006516:	2b00      	cmp	r3, #0
 8006518:	daf2      	bge.n	8006500 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800651a:	2300      	movs	r3, #0
 800651c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	691b      	ldr	r3, [r3, #16]
 8006522:	f043 0201 	orr.w	r2, r3, #1
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	3301      	adds	r3, #1
 800652e:	60fb      	str	r3, [r7, #12]
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	4a09      	ldr	r2, [pc, #36]	; (8006558 <USB_CoreReset+0x64>)
 8006534:	4293      	cmp	r3, r2
 8006536:	d901      	bls.n	800653c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006538:	2303      	movs	r3, #3
 800653a:	e006      	b.n	800654a <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	691b      	ldr	r3, [r3, #16]
 8006540:	f003 0301 	and.w	r3, r3, #1
 8006544:	2b01      	cmp	r3, #1
 8006546:	d0f0      	beq.n	800652a <USB_CoreReset+0x36>

  return HAL_OK;
 8006548:	2300      	movs	r3, #0
}
 800654a:	4618      	mov	r0, r3
 800654c:	3714      	adds	r7, #20
 800654e:	46bd      	mov	sp, r7
 8006550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006554:	4770      	bx	lr
 8006556:	bf00      	nop
 8006558:	00030d40 	.word	0x00030d40

0800655c <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init (USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800655c:	b580      	push	{r7, lr}
 800655e:	b084      	sub	sp, #16
 8006560:	af00      	add	r7, sp, #0
 8006562:	6078      	str	r0, [r7, #4]
 8006564:	460b      	mov	r3, r1
 8006566:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8006568:	2300      	movs	r3, #0
 800656a:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if(pdev->dev_speed == USBD_SPEED_HIGH)
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	7c1b      	ldrb	r3, [r3, #16]
 8006570:	2b00      	cmp	r3, #0
 8006572:	d115      	bne.n	80065a0 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8006574:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006578:	2202      	movs	r2, #2
 800657a:	2181      	movs	r1, #129	; 0x81
 800657c:	6878      	ldr	r0, [r7, #4]
 800657e:	f003 f964 	bl	800984a <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	2201      	movs	r2, #1
 8006586:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8006588:	f44f 7300 	mov.w	r3, #512	; 0x200
 800658c:	2202      	movs	r2, #2
 800658e:	2101      	movs	r1, #1
 8006590:	6878      	ldr	r0, [r7, #4]
 8006592:	f003 f95a 	bl	800984a <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	2201      	movs	r2, #1
 800659a:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
 800659e:	e012      	b.n	80065c6 <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80065a0:	2340      	movs	r3, #64	; 0x40
 80065a2:	2202      	movs	r2, #2
 80065a4:	2181      	movs	r1, #129	; 0x81
 80065a6:	6878      	ldr	r0, [r7, #4]
 80065a8:	f003 f94f 	bl	800984a <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	2201      	movs	r2, #1
 80065b0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80065b2:	2340      	movs	r3, #64	; 0x40
 80065b4:	2202      	movs	r2, #2
 80065b6:	2101      	movs	r1, #1
 80065b8:	6878      	ldr	r0, [r7, #4]
 80065ba:	f003 f946 	bl	800984a <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	2201      	movs	r2, #1
 80065c2:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80065c6:	2308      	movs	r3, #8
 80065c8:	2203      	movs	r2, #3
 80065ca:	2182      	movs	r1, #130	; 0x82
 80065cc:	6878      	ldr	r0, [r7, #4]
 80065ce:	f003 f93c 	bl	800984a <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	2201      	movs	r2, #1
 80065d6:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof (USBD_CDC_HandleTypeDef));
 80065d8:	f44f 7007 	mov.w	r0, #540	; 0x21c
 80065dc:	f003 fab2 	bl	8009b44 <malloc>
 80065e0:	4603      	mov	r3, r0
 80065e2:	461a      	mov	r2, r3
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290

  if(pdev->pClassData == NULL)
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	d102      	bne.n	80065fa <USBD_CDC_Init+0x9e>
  {
    ret = 1U;
 80065f4:	2301      	movs	r3, #1
 80065f6:	73fb      	strb	r3, [r7, #15]
 80065f8:	e026      	b.n	8006648 <USBD_CDC_Init+0xec>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8006600:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 800660c:	68bb      	ldr	r3, [r7, #8]
 800660e:	2200      	movs	r2, #0
 8006610:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 8006614:	68bb      	ldr	r3, [r7, #8]
 8006616:	2200      	movs	r2, #0
 8006618:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if(pdev->dev_speed == USBD_SPEED_HIGH)
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	7c1b      	ldrb	r3, [r3, #16]
 8006620:	2b00      	cmp	r3, #0
 8006622:	d109      	bne.n	8006638 <USBD_CDC_Init+0xdc>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006624:	68bb      	ldr	r3, [r7, #8]
 8006626:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800662a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800662e:	2101      	movs	r1, #1
 8006630:	6878      	ldr	r0, [r7, #4]
 8006632:	f003 f9fb 	bl	8009a2c <USBD_LL_PrepareReceive>
 8006636:	e007      	b.n	8006648 <USBD_CDC_Init+0xec>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006638:	68bb      	ldr	r3, [r7, #8]
 800663a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800663e:	2340      	movs	r3, #64	; 0x40
 8006640:	2101      	movs	r1, #1
 8006642:	6878      	ldr	r0, [r7, #4]
 8006644:	f003 f9f2 	bl	8009a2c <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 8006648:	7bfb      	ldrb	r3, [r7, #15]
}
 800664a:	4618      	mov	r0, r3
 800664c:	3710      	adds	r7, #16
 800664e:	46bd      	mov	sp, r7
 8006650:	bd80      	pop	{r7, pc}

08006652 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit (USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006652:	b580      	push	{r7, lr}
 8006654:	b084      	sub	sp, #16
 8006656:	af00      	add	r7, sp, #0
 8006658:	6078      	str	r0, [r7, #4]
 800665a:	460b      	mov	r3, r1
 800665c:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 800665e:	2300      	movs	r3, #0
 8006660:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8006662:	2181      	movs	r1, #129	; 0x81
 8006664:	6878      	ldr	r0, [r7, #4]
 8006666:	f003 f916 	bl	8009896 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	2200      	movs	r2, #0
 800666e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8006670:	2101      	movs	r1, #1
 8006672:	6878      	ldr	r0, [r7, #4]
 8006674:	f003 f90f 	bl	8009896 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	2200      	movs	r2, #0
 800667c:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8006680:	2182      	movs	r1, #130	; 0x82
 8006682:	6878      	ldr	r0, [r7, #4]
 8006684:	f003 f907 	bl	8009896 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	2200      	movs	r2, #0
 800668c:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if(pdev->pClassData != NULL)
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8006694:	2b00      	cmp	r3, #0
 8006696:	d00e      	beq.n	80066b6 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800669e:	685b      	ldr	r3, [r3, #4]
 80066a0:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 80066a8:	4618      	mov	r0, r3
 80066aa:	f003 fa53 	bl	8009b54 <free>
    pdev->pClassData = NULL;
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	2200      	movs	r2, #0
 80066b2:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290
  }

  return ret;
 80066b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80066b8:	4618      	mov	r0, r3
 80066ba:	3710      	adds	r7, #16
 80066bc:	46bd      	mov	sp, r7
 80066be:	bd80      	pop	{r7, pc}

080066c0 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup (USBD_HandleTypeDef *pdev,
                                USBD_SetupReqTypedef *req)
{
 80066c0:	b580      	push	{r7, lr}
 80066c2:	b086      	sub	sp, #24
 80066c4:	af00      	add	r7, sp, #0
 80066c6:	6078      	str	r0, [r7, #4]
 80066c8:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 80066d0:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 80066d2:	2300      	movs	r3, #0
 80066d4:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 80066d6:	2300      	movs	r3, #0
 80066d8:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 80066da:	2300      	movs	r3, #0
 80066dc:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80066de:	683b      	ldr	r3, [r7, #0]
 80066e0:	781b      	ldrb	r3, [r3, #0]
 80066e2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d039      	beq.n	800675e <USBD_CDC_Setup+0x9e>
 80066ea:	2b20      	cmp	r3, #32
 80066ec:	d17c      	bne.n	80067e8 <USBD_CDC_Setup+0x128>
  {
  case USB_REQ_TYPE_CLASS :
    if (req->wLength)
 80066ee:	683b      	ldr	r3, [r7, #0]
 80066f0:	88db      	ldrh	r3, [r3, #6]
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	d029      	beq.n	800674a <USBD_CDC_Setup+0x8a>
    {
      if (req->bmRequest & 0x80U)
 80066f6:	683b      	ldr	r3, [r7, #0]
 80066f8:	781b      	ldrb	r3, [r3, #0]
 80066fa:	b25b      	sxtb	r3, r3
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	da11      	bge.n	8006724 <USBD_CDC_Setup+0x64>
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006706:	689b      	ldr	r3, [r3, #8]
 8006708:	683a      	ldr	r2, [r7, #0]
 800670a:	7850      	ldrb	r0, [r2, #1]
                                                          (uint8_t *)(void *)hcdc->data,
 800670c:	6939      	ldr	r1, [r7, #16]
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800670e:	683a      	ldr	r2, [r7, #0]
 8006710:	88d2      	ldrh	r2, [r2, #6]
 8006712:	4798      	blx	r3
                                                          req->wLength);

          USBD_CtlSendData (pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8006714:	6939      	ldr	r1, [r7, #16]
 8006716:	683b      	ldr	r3, [r7, #0]
 8006718:	88db      	ldrh	r3, [r3, #6]
 800671a:	461a      	mov	r2, r3
 800671c:	6878      	ldr	r0, [r7, #4]
 800671e:	f001 f99b 	bl	8007a58 <USBD_CtlSendData>
    else
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                        (uint8_t *)(void *)req, 0U);
    }
    break;
 8006722:	e068      	b.n	80067f6 <USBD_CDC_Setup+0x136>
        hcdc->CmdOpCode = req->bRequest;
 8006724:	683b      	ldr	r3, [r7, #0]
 8006726:	785a      	ldrb	r2, [r3, #1]
 8006728:	693b      	ldr	r3, [r7, #16]
 800672a:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
        hcdc->CmdLength = (uint8_t)req->wLength;
 800672e:	683b      	ldr	r3, [r7, #0]
 8006730:	88db      	ldrh	r3, [r3, #6]
 8006732:	b2da      	uxtb	r2, r3
 8006734:	693b      	ldr	r3, [r7, #16]
 8006736:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
        USBD_CtlPrepareRx (pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800673a:	6939      	ldr	r1, [r7, #16]
 800673c:	683b      	ldr	r3, [r7, #0]
 800673e:	88db      	ldrh	r3, [r3, #6]
 8006740:	461a      	mov	r2, r3
 8006742:	6878      	ldr	r0, [r7, #4]
 8006744:	f001 f9b6 	bl	8007ab4 <USBD_CtlPrepareRx>
    break;
 8006748:	e055      	b.n	80067f6 <USBD_CDC_Setup+0x136>
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006750:	689b      	ldr	r3, [r3, #8]
 8006752:	683a      	ldr	r2, [r7, #0]
 8006754:	7850      	ldrb	r0, [r2, #1]
 8006756:	2200      	movs	r2, #0
 8006758:	6839      	ldr	r1, [r7, #0]
 800675a:	4798      	blx	r3
    break;
 800675c:	e04b      	b.n	80067f6 <USBD_CDC_Setup+0x136>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 800675e:	683b      	ldr	r3, [r7, #0]
 8006760:	785b      	ldrb	r3, [r3, #1]
 8006762:	2b0a      	cmp	r3, #10
 8006764:	d017      	beq.n	8006796 <USBD_CDC_Setup+0xd6>
 8006766:	2b0b      	cmp	r3, #11
 8006768:	d029      	beq.n	80067be <USBD_CDC_Setup+0xfe>
 800676a:	2b00      	cmp	r3, #0
 800676c:	d133      	bne.n	80067d6 <USBD_CDC_Setup+0x116>
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8006774:	2b03      	cmp	r3, #3
 8006776:	d107      	bne.n	8006788 <USBD_CDC_Setup+0xc8>
      {
        USBD_CtlSendData (pdev, (uint8_t *)(void *)&status_info, 2U);
 8006778:	f107 030c 	add.w	r3, r7, #12
 800677c:	2202      	movs	r2, #2
 800677e:	4619      	mov	r1, r3
 8006780:	6878      	ldr	r0, [r7, #4]
 8006782:	f001 f969 	bl	8007a58 <USBD_CtlSendData>
      else
      {
        USBD_CtlError (pdev, req);
			  ret = USBD_FAIL;
      }
      break;
 8006786:	e02e      	b.n	80067e6 <USBD_CDC_Setup+0x126>
        USBD_CtlError (pdev, req);
 8006788:	6839      	ldr	r1, [r7, #0]
 800678a:	6878      	ldr	r0, [r7, #4]
 800678c:	f001 f8f9 	bl	8007982 <USBD_CtlError>
			  ret = USBD_FAIL;
 8006790:	2302      	movs	r3, #2
 8006792:	75fb      	strb	r3, [r7, #23]
      break;
 8006794:	e027      	b.n	80067e6 <USBD_CDC_Setup+0x126>

    case USB_REQ_GET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800679c:	2b03      	cmp	r3, #3
 800679e:	d107      	bne.n	80067b0 <USBD_CDC_Setup+0xf0>
      {
        USBD_CtlSendData (pdev, &ifalt, 1U);
 80067a0:	f107 030f 	add.w	r3, r7, #15
 80067a4:	2201      	movs	r2, #1
 80067a6:	4619      	mov	r1, r3
 80067a8:	6878      	ldr	r0, [r7, #4]
 80067aa:	f001 f955 	bl	8007a58 <USBD_CtlSendData>
      else
      {
        USBD_CtlError (pdev, req);
			  ret = USBD_FAIL;
      }
      break;
 80067ae:	e01a      	b.n	80067e6 <USBD_CDC_Setup+0x126>
        USBD_CtlError (pdev, req);
 80067b0:	6839      	ldr	r1, [r7, #0]
 80067b2:	6878      	ldr	r0, [r7, #4]
 80067b4:	f001 f8e5 	bl	8007982 <USBD_CtlError>
			  ret = USBD_FAIL;
 80067b8:	2302      	movs	r3, #2
 80067ba:	75fb      	strb	r3, [r7, #23]
      break;
 80067bc:	e013      	b.n	80067e6 <USBD_CDC_Setup+0x126>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 80067c4:	2b03      	cmp	r3, #3
 80067c6:	d00d      	beq.n	80067e4 <USBD_CDC_Setup+0x124>
      {
        USBD_CtlError (pdev, req);
 80067c8:	6839      	ldr	r1, [r7, #0]
 80067ca:	6878      	ldr	r0, [r7, #4]
 80067cc:	f001 f8d9 	bl	8007982 <USBD_CtlError>
			  ret = USBD_FAIL;
 80067d0:	2302      	movs	r3, #2
 80067d2:	75fb      	strb	r3, [r7, #23]
      }
      break;
 80067d4:	e006      	b.n	80067e4 <USBD_CDC_Setup+0x124>

    default:
      USBD_CtlError (pdev, req);
 80067d6:	6839      	ldr	r1, [r7, #0]
 80067d8:	6878      	ldr	r0, [r7, #4]
 80067da:	f001 f8d2 	bl	8007982 <USBD_CtlError>
      ret = USBD_FAIL;
 80067de:	2302      	movs	r3, #2
 80067e0:	75fb      	strb	r3, [r7, #23]
      break;
 80067e2:	e000      	b.n	80067e6 <USBD_CDC_Setup+0x126>
      break;
 80067e4:	bf00      	nop
    }
    break;
 80067e6:	e006      	b.n	80067f6 <USBD_CDC_Setup+0x136>

  default:
    USBD_CtlError (pdev, req);
 80067e8:	6839      	ldr	r1, [r7, #0]
 80067ea:	6878      	ldr	r0, [r7, #4]
 80067ec:	f001 f8c9 	bl	8007982 <USBD_CtlError>
    ret = USBD_FAIL;
 80067f0:	2302      	movs	r3, #2
 80067f2:	75fb      	strb	r3, [r7, #23]
    break;
 80067f4:	bf00      	nop
  }

  return ret;
 80067f6:	7dfb      	ldrb	r3, [r7, #23]
}
 80067f8:	4618      	mov	r0, r3
 80067fa:	3718      	adds	r7, #24
 80067fc:	46bd      	mov	sp, r7
 80067fe:	bd80      	pop	{r7, pc}

08006800 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn (USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006800:	b580      	push	{r7, lr}
 8006802:	b084      	sub	sp, #16
 8006804:	af00      	add	r7, sp, #0
 8006806:	6078      	str	r0, [r7, #4]
 8006808:	460b      	mov	r3, r1
 800680a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)pdev->pClassData;
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8006812:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800681a:	60bb      	str	r3, [r7, #8]

  if(pdev->pClassData != NULL)
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8006822:	2b00      	cmp	r3, #0
 8006824:	d03a      	beq.n	800689c <USBD_CDC_DataIn+0x9c>
  {
    if((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8006826:	78fa      	ldrb	r2, [r7, #3]
 8006828:	6879      	ldr	r1, [r7, #4]
 800682a:	4613      	mov	r3, r2
 800682c:	009b      	lsls	r3, r3, #2
 800682e:	4413      	add	r3, r2
 8006830:	009b      	lsls	r3, r3, #2
 8006832:	440b      	add	r3, r1
 8006834:	331c      	adds	r3, #28
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	2b00      	cmp	r3, #0
 800683a:	d029      	beq.n	8006890 <USBD_CDC_DataIn+0x90>
 800683c:	78fa      	ldrb	r2, [r7, #3]
 800683e:	6879      	ldr	r1, [r7, #4]
 8006840:	4613      	mov	r3, r2
 8006842:	009b      	lsls	r3, r3, #2
 8006844:	4413      	add	r3, r2
 8006846:	009b      	lsls	r3, r3, #2
 8006848:	440b      	add	r3, r1
 800684a:	331c      	adds	r3, #28
 800684c:	681a      	ldr	r2, [r3, #0]
 800684e:	78f9      	ldrb	r1, [r7, #3]
 8006850:	68b8      	ldr	r0, [r7, #8]
 8006852:	460b      	mov	r3, r1
 8006854:	00db      	lsls	r3, r3, #3
 8006856:	1a5b      	subs	r3, r3, r1
 8006858:	009b      	lsls	r3, r3, #2
 800685a:	4403      	add	r3, r0
 800685c:	3344      	adds	r3, #68	; 0x44
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	fbb2 f1f3 	udiv	r1, r2, r3
 8006864:	fb03 f301 	mul.w	r3, r3, r1
 8006868:	1ad3      	subs	r3, r2, r3
 800686a:	2b00      	cmp	r3, #0
 800686c:	d110      	bne.n	8006890 <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 800686e:	78fa      	ldrb	r2, [r7, #3]
 8006870:	6879      	ldr	r1, [r7, #4]
 8006872:	4613      	mov	r3, r2
 8006874:	009b      	lsls	r3, r3, #2
 8006876:	4413      	add	r3, r2
 8006878:	009b      	lsls	r3, r3, #2
 800687a:	440b      	add	r3, r1
 800687c:	331c      	adds	r3, #28
 800687e:	2200      	movs	r2, #0
 8006880:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit (pdev, epnum, NULL, 0U);
 8006882:	78f9      	ldrb	r1, [r7, #3]
 8006884:	2300      	movs	r3, #0
 8006886:	2200      	movs	r2, #0
 8006888:	6878      	ldr	r0, [r7, #4]
 800688a:	f003 f8ac 	bl	80099e6 <USBD_LL_Transmit>
 800688e:	e003      	b.n	8006898 <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	2200      	movs	r2, #0
 8006894:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 8006898:	2300      	movs	r3, #0
 800689a:	e000      	b.n	800689e <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 800689c:	2302      	movs	r3, #2
  }
}
 800689e:	4618      	mov	r0, r3
 80068a0:	3710      	adds	r7, #16
 80068a2:	46bd      	mov	sp, r7
 80068a4:	bd80      	pop	{r7, pc}

080068a6 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut (USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80068a6:	b580      	push	{r7, lr}
 80068a8:	b084      	sub	sp, #16
 80068aa:	af00      	add	r7, sp, #0
 80068ac:	6078      	str	r0, [r7, #4]
 80068ae:	460b      	mov	r3, r1
 80068b0:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 80068b8:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize (pdev, epnum);
 80068ba:	78fb      	ldrb	r3, [r7, #3]
 80068bc:	4619      	mov	r1, r3
 80068be:	6878      	ldr	r0, [r7, #4]
 80068c0:	f003 f8d7 	bl	8009a72 <USBD_LL_GetRxDataSize>
 80068c4:	4602      	mov	r2, r0
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if(pdev->pClassData != NULL)
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	d00d      	beq.n	80068f2 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80068dc:	68db      	ldr	r3, [r3, #12]
 80068de:	68fa      	ldr	r2, [r7, #12]
 80068e0:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 80068e4:	68fa      	ldr	r2, [r7, #12]
 80068e6:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 80068ea:	4611      	mov	r1, r2
 80068ec:	4798      	blx	r3

    return USBD_OK;
 80068ee:	2300      	movs	r3, #0
 80068f0:	e000      	b.n	80068f4 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 80068f2:	2302      	movs	r3, #2
  }
}
 80068f4:	4618      	mov	r0, r3
 80068f6:	3710      	adds	r7, #16
 80068f8:	46bd      	mov	sp, r7
 80068fa:	bd80      	pop	{r7, pc}

080068fc <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady (USBD_HandleTypeDef *pdev)
{
 80068fc:	b580      	push	{r7, lr}
 80068fe:	b084      	sub	sp, #16
 8006900:	af00      	add	r7, sp, #0
 8006902:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800690a:	60fb      	str	r3, [r7, #12]

  if((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006912:	2b00      	cmp	r3, #0
 8006914:	d015      	beq.n	8006942 <USBD_CDC_EP0_RxReady+0x46>
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800691c:	2bff      	cmp	r3, #255	; 0xff
 800691e:	d010      	beq.n	8006942 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006926:	689b      	ldr	r3, [r3, #8]
 8006928:	68fa      	ldr	r2, [r7, #12]
 800692a:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 800692e:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8006930:	68fa      	ldr	r2, [r7, #12]
 8006932:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8006936:	b292      	uxth	r2, r2
 8006938:	4798      	blx	r3
      hcdc->CmdOpCode = 0xFFU;
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	22ff      	movs	r2, #255	; 0xff
 800693e:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 8006942:	2300      	movs	r3, #0
}
 8006944:	4618      	mov	r0, r3
 8006946:	3710      	adds	r7, #16
 8006948:	46bd      	mov	sp, r7
 800694a:	bd80      	pop	{r7, pc}

0800694c <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc (uint16_t *length)
{
 800694c:	b480      	push	{r7}
 800694e:	b083      	sub	sp, #12
 8006950:	af00      	add	r7, sp, #0
 8006952:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_CfgFSDesc);
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	2243      	movs	r2, #67	; 0x43
 8006958:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 800695a:	4b03      	ldr	r3, [pc, #12]	; (8006968 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800695c:	4618      	mov	r0, r3
 800695e:	370c      	adds	r7, #12
 8006960:	46bd      	mov	sp, r7
 8006962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006966:	4770      	bx	lr
 8006968:	20000090 	.word	0x20000090

0800696c <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc (uint16_t *length)
{
 800696c:	b480      	push	{r7}
 800696e:	b083      	sub	sp, #12
 8006970:	af00      	add	r7, sp, #0
 8006972:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_CfgHSDesc);
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	2243      	movs	r2, #67	; 0x43
 8006978:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 800697a:	4b03      	ldr	r3, [pc, #12]	; (8006988 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800697c:	4618      	mov	r0, r3
 800697e:	370c      	adds	r7, #12
 8006980:	46bd      	mov	sp, r7
 8006982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006986:	4770      	bx	lr
 8006988:	2000004c 	.word	0x2000004c

0800698c <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc (uint16_t *length)
{
 800698c:	b480      	push	{r7}
 800698e:	b083      	sub	sp, #12
 8006990:	af00      	add	r7, sp, #0
 8006992:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_OtherSpeedCfgDesc);
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	2243      	movs	r2, #67	; 0x43
 8006998:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 800699a:	4b03      	ldr	r3, [pc, #12]	; (80069a8 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800699c:	4618      	mov	r0, r3
 800699e:	370c      	adds	r7, #12
 80069a0:	46bd      	mov	sp, r7
 80069a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069a6:	4770      	bx	lr
 80069a8:	200000d4 	.word	0x200000d4

080069ac <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor (uint16_t *length)
{
 80069ac:	b480      	push	{r7}
 80069ae:	b083      	sub	sp, #12
 80069b0:	af00      	add	r7, sp, #0
 80069b2:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_DeviceQualifierDesc);
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	220a      	movs	r2, #10
 80069b8:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 80069ba:	4b03      	ldr	r3, [pc, #12]	; (80069c8 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80069bc:	4618      	mov	r0, r3
 80069be:	370c      	adds	r7, #12
 80069c0:	46bd      	mov	sp, r7
 80069c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069c6:	4770      	bx	lr
 80069c8:	20000008 	.word	0x20000008

080069cc <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface  (USBD_HandleTypeDef   *pdev,
                                      USBD_CDC_ItfTypeDef *fops)
{
 80069cc:	b480      	push	{r7}
 80069ce:	b085      	sub	sp, #20
 80069d0:	af00      	add	r7, sp, #0
 80069d2:	6078      	str	r0, [r7, #4]
 80069d4:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 80069d6:	2302      	movs	r3, #2
 80069d8:	73fb      	strb	r3, [r7, #15]

  if(fops != NULL)
 80069da:	683b      	ldr	r3, [r7, #0]
 80069dc:	2b00      	cmp	r3, #0
 80069de:	d005      	beq.n	80069ec <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData= fops;
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	683a      	ldr	r2, [r7, #0]
 80069e4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
    ret = USBD_OK;
 80069e8:	2300      	movs	r3, #0
 80069ea:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 80069ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80069ee:	4618      	mov	r0, r3
 80069f0:	3714      	adds	r7, #20
 80069f2:	46bd      	mov	sp, r7
 80069f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069f8:	4770      	bx	lr

080069fa <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer  (USBD_HandleTypeDef   *pdev,
                                uint8_t  *pbuff,
                                uint16_t length)
{
 80069fa:	b480      	push	{r7}
 80069fc:	b087      	sub	sp, #28
 80069fe:	af00      	add	r7, sp, #0
 8006a00:	60f8      	str	r0, [r7, #12]
 8006a02:	60b9      	str	r1, [r7, #8]
 8006a04:	4613      	mov	r3, r2
 8006a06:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8006a0e:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8006a10:	697b      	ldr	r3, [r7, #20]
 8006a12:	68ba      	ldr	r2, [r7, #8]
 8006a14:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8006a18:	88fa      	ldrh	r2, [r7, #6]
 8006a1a:	697b      	ldr	r3, [r7, #20]
 8006a1c:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 8006a20:	2300      	movs	r3, #0
}
 8006a22:	4618      	mov	r0, r3
 8006a24:	371c      	adds	r7, #28
 8006a26:	46bd      	mov	sp, r7
 8006a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a2c:	4770      	bx	lr

08006a2e <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer  (USBD_HandleTypeDef   *pdev,
                                   uint8_t  *pbuff)
{
 8006a2e:	b480      	push	{r7}
 8006a30:	b085      	sub	sp, #20
 8006a32:	af00      	add	r7, sp, #0
 8006a34:	6078      	str	r0, [r7, #4]
 8006a36:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8006a3e:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	683a      	ldr	r2, [r7, #0]
 8006a44:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 8006a48:	2300      	movs	r3, #0
}
 8006a4a:	4618      	mov	r0, r3
 8006a4c:	3714      	adds	r7, #20
 8006a4e:	46bd      	mov	sp, r7
 8006a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a54:	4770      	bx	lr

08006a56 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8006a56:	b580      	push	{r7, lr}
 8006a58:	b084      	sub	sp, #16
 8006a5a:	af00      	add	r7, sp, #0
 8006a5c:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8006a64:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if(pdev->pClassData != NULL)
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8006a6c:	2b00      	cmp	r3, #0
 8006a6e:	d017      	beq.n	8006aa0 <USBD_CDC_ReceivePacket+0x4a>
  {
    if(pdev->dev_speed == USBD_SPEED_HIGH  )
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	7c1b      	ldrb	r3, [r3, #16]
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	d109      	bne.n	8006a8c <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006a7e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006a82:	2101      	movs	r1, #1
 8006a84:	6878      	ldr	r0, [r7, #4]
 8006a86:	f002 ffd1 	bl	8009a2c <USBD_LL_PrepareReceive>
 8006a8a:	e007      	b.n	8006a9c <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006a92:	2340      	movs	r3, #64	; 0x40
 8006a94:	2101      	movs	r1, #1
 8006a96:	6878      	ldr	r0, [r7, #4]
 8006a98:	f002 ffc8 	bl	8009a2c <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8006a9c:	2300      	movs	r3, #0
 8006a9e:	e000      	b.n	8006aa2 <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 8006aa0:	2302      	movs	r3, #2
  }
}
 8006aa2:	4618      	mov	r0, r3
 8006aa4:	3710      	adds	r7, #16
 8006aa6:	46bd      	mov	sp, r7
 8006aa8:	bd80      	pop	{r7, pc}

08006aaa <USBD_Init>:
* @param  pdesc: Descriptor structure address
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev, USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8006aaa:	b580      	push	{r7, lr}
 8006aac:	b084      	sub	sp, #16
 8006aae:	af00      	add	r7, sp, #0
 8006ab0:	60f8      	str	r0, [r7, #12]
 8006ab2:	60b9      	str	r1, [r7, #8]
 8006ab4:	4613      	mov	r3, r2
 8006ab6:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if(pdev == NULL)
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	d101      	bne.n	8006ac2 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8006abe:	2302      	movs	r3, #2
 8006ac0:	e01a      	b.n	8006af8 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if(pdev->pClass != NULL)
 8006ac2:	68fb      	ldr	r3, [r7, #12]
 8006ac4:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8006ac8:	2b00      	cmp	r3, #0
 8006aca:	d003      	beq.n	8006ad4 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	2200      	movs	r2, #0
 8006ad0:	f8c3 228c 	str.w	r2, [r3, #652]	; 0x28c
  }

  /* Assign USBD Descriptors */
  if(pdesc != NULL)
 8006ad4:	68bb      	ldr	r3, [r7, #8]
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	d003      	beq.n	8006ae2 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	68ba      	ldr	r2, [r7, #8]
 8006ade:	f8c3 2288 	str.w	r2, [r3, #648]	; 0x288
  }

  /* Set Device initial State */
  pdev->dev_state  = USBD_STATE_DEFAULT;
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	2201      	movs	r2, #1
 8006ae6:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  pdev->id = id;
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	79fa      	ldrb	r2, [r7, #7]
 8006aee:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8006af0:	68f8      	ldr	r0, [r7, #12]
 8006af2:	f002 fe43 	bl	800977c <USBD_LL_Init>

  return USBD_OK;
 8006af6:	2300      	movs	r3, #0
}
 8006af8:	4618      	mov	r0, r3
 8006afa:	3710      	adds	r7, #16
 8006afc:	46bd      	mov	sp, r7
 8006afe:	bd80      	pop	{r7, pc}

08006b00 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8006b00:	b480      	push	{r7}
 8006b02:	b085      	sub	sp, #20
 8006b04:	af00      	add	r7, sp, #0
 8006b06:	6078      	str	r0, [r7, #4]
 8006b08:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef   status = USBD_OK;
 8006b0a:	2300      	movs	r3, #0
 8006b0c:	73fb      	strb	r3, [r7, #15]
  if(pclass != 0)
 8006b0e:	683b      	ldr	r3, [r7, #0]
 8006b10:	2b00      	cmp	r3, #0
 8006b12:	d006      	beq.n	8006b22 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	683a      	ldr	r2, [r7, #0]
 8006b18:	f8c3 228c 	str.w	r2, [r3, #652]	; 0x28c
    status = USBD_OK;
 8006b1c:	2300      	movs	r3, #0
 8006b1e:	73fb      	strb	r3, [r7, #15]
 8006b20:	e001      	b.n	8006b26 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8006b22:	2302      	movs	r3, #2
 8006b24:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8006b26:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b28:	4618      	mov	r0, r3
 8006b2a:	3714      	adds	r7, #20
 8006b2c:	46bd      	mov	sp, r7
 8006b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b32:	4770      	bx	lr

08006b34 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start  (USBD_HandleTypeDef *pdev)
{
 8006b34:	b580      	push	{r7, lr}
 8006b36:	b082      	sub	sp, #8
 8006b38:	af00      	add	r7, sp, #0
 8006b3a:	6078      	str	r0, [r7, #4]

  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8006b3c:	6878      	ldr	r0, [r7, #4]
 8006b3e:	f002 fe69 	bl	8009814 <USBD_LL_Start>

  return USBD_OK;
 8006b42:	2300      	movs	r3, #0
}
 8006b44:	4618      	mov	r0, r3
 8006b46:	3708      	adds	r7, #8
 8006b48:	46bd      	mov	sp, r7
 8006b4a:	bd80      	pop	{r7, pc}

08006b4c <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode (USBD_HandleTypeDef  *pdev)
{
 8006b4c:	b480      	push	{r7}
 8006b4e:	b083      	sub	sp, #12
 8006b50:	af00      	add	r7, sp, #0
 8006b52:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006b54:	2300      	movs	r3, #0
}
 8006b56:	4618      	mov	r0, r3
 8006b58:	370c      	adds	r7, #12
 8006b5a:	46bd      	mov	sp, r7
 8006b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b60:	4770      	bx	lr

08006b62 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8006b62:	b580      	push	{r7, lr}
 8006b64:	b084      	sub	sp, #16
 8006b66:	af00      	add	r7, sp, #0
 8006b68:	6078      	str	r0, [r7, #4]
 8006b6a:	460b      	mov	r3, r1
 8006b6c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef   ret = USBD_FAIL;
 8006b6e:	2302      	movs	r3, #2
 8006b70:	73fb      	strb	r3, [r7, #15]

  if(pdev->pClass != NULL)
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8006b78:	2b00      	cmp	r3, #0
 8006b7a:	d00c      	beq.n	8006b96 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if(pdev->pClass->Init(pdev, cfgidx) == 0U)
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	78fa      	ldrb	r2, [r7, #3]
 8006b86:	4611      	mov	r1, r2
 8006b88:	6878      	ldr	r0, [r7, #4]
 8006b8a:	4798      	blx	r3
 8006b8c:	4603      	mov	r3, r0
 8006b8e:	2b00      	cmp	r3, #0
 8006b90:	d101      	bne.n	8006b96 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8006b92:	2300      	movs	r3, #0
 8006b94:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8006b96:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b98:	4618      	mov	r0, r3
 8006b9a:	3710      	adds	r7, #16
 8006b9c:	46bd      	mov	sp, r7
 8006b9e:	bd80      	pop	{r7, pc}

08006ba0 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8006ba0:	b580      	push	{r7, lr}
 8006ba2:	b082      	sub	sp, #8
 8006ba4:	af00      	add	r7, sp, #0
 8006ba6:	6078      	str	r0, [r7, #4]
 8006ba8:	460b      	mov	r3, r1
 8006baa:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8006bb2:	685b      	ldr	r3, [r3, #4]
 8006bb4:	78fa      	ldrb	r2, [r7, #3]
 8006bb6:	4611      	mov	r1, r2
 8006bb8:	6878      	ldr	r0, [r7, #4]
 8006bba:	4798      	blx	r3
  return USBD_OK;
 8006bbc:	2300      	movs	r3, #0
}
 8006bbe:	4618      	mov	r0, r3
 8006bc0:	3708      	adds	r7, #8
 8006bc2:	46bd      	mov	sp, r7
 8006bc4:	bd80      	pop	{r7, pc}

08006bc6 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8006bc6:	b580      	push	{r7, lr}
 8006bc8:	b082      	sub	sp, #8
 8006bca:	af00      	add	r7, sp, #0
 8006bcc:	6078      	str	r0, [r7, #4]
 8006bce:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8006bd6:	6839      	ldr	r1, [r7, #0]
 8006bd8:	4618      	mov	r0, r3
 8006bda:	f000 fe95 	bl	8007908 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	2201      	movs	r2, #1
 8006be2:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

  pdev->ep0_data_len = pdev->request.wLength;
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	f8b3 3286 	ldrh.w	r3, [r3, #646]	; 0x286
 8006bec:	461a      	mov	r2, r3
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

  switch (pdev->request.bmRequest & 0x1FU)
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	f893 3280 	ldrb.w	r3, [r3, #640]	; 0x280
 8006bfa:	f003 031f 	and.w	r3, r3, #31
 8006bfe:	2b01      	cmp	r3, #1
 8006c00:	d00c      	beq.n	8006c1c <USBD_LL_SetupStage+0x56>
 8006c02:	2b01      	cmp	r3, #1
 8006c04:	d302      	bcc.n	8006c0c <USBD_LL_SetupStage+0x46>
 8006c06:	2b02      	cmp	r3, #2
 8006c08:	d010      	beq.n	8006c2c <USBD_LL_SetupStage+0x66>
 8006c0a:	e017      	b.n	8006c3c <USBD_LL_SetupStage+0x76>
  {
  case USB_REQ_RECIPIENT_DEVICE:
    USBD_StdDevReq (pdev, &pdev->request);
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8006c12:	4619      	mov	r1, r3
 8006c14:	6878      	ldr	r0, [r7, #4]
 8006c16:	f000 fa05 	bl	8007024 <USBD_StdDevReq>
    break;
 8006c1a:	e01a      	b.n	8006c52 <USBD_LL_SetupStage+0x8c>

  case USB_REQ_RECIPIENT_INTERFACE:
    USBD_StdItfReq(pdev, &pdev->request);
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8006c22:	4619      	mov	r1, r3
 8006c24:	6878      	ldr	r0, [r7, #4]
 8006c26:	f000 fa67 	bl	80070f8 <USBD_StdItfReq>
    break;
 8006c2a:	e012      	b.n	8006c52 <USBD_LL_SetupStage+0x8c>

  case USB_REQ_RECIPIENT_ENDPOINT:
    USBD_StdEPReq(pdev, &pdev->request);
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8006c32:	4619      	mov	r1, r3
 8006c34:	6878      	ldr	r0, [r7, #4]
 8006c36:	f000 faa5 	bl	8007184 <USBD_StdEPReq>
    break;
 8006c3a:	e00a      	b.n	8006c52 <USBD_LL_SetupStage+0x8c>

  default:
    USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	f893 3280 	ldrb.w	r3, [r3, #640]	; 0x280
 8006c42:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006c46:	b2db      	uxtb	r3, r3
 8006c48:	4619      	mov	r1, r3
 8006c4a:	6878      	ldr	r0, [r7, #4]
 8006c4c:	f002 fe42 	bl	80098d4 <USBD_LL_StallEP>
    break;
 8006c50:	bf00      	nop
  }

  return USBD_OK;
 8006c52:	2300      	movs	r3, #0
}
 8006c54:	4618      	mov	r0, r3
 8006c56:	3708      	adds	r7, #8
 8006c58:	46bd      	mov	sp, r7
 8006c5a:	bd80      	pop	{r7, pc}

08006c5c <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8006c5c:	b580      	push	{r7, lr}
 8006c5e:	b086      	sub	sp, #24
 8006c60:	af00      	add	r7, sp, #0
 8006c62:	60f8      	str	r0, [r7, #12]
 8006c64:	460b      	mov	r3, r1
 8006c66:	607a      	str	r2, [r7, #4]
 8006c68:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef    *pep;

  if(epnum == 0U)
 8006c6a:	7afb      	ldrb	r3, [r7, #11]
 8006c6c:	2b00      	cmp	r3, #0
 8006c6e:	d14b      	bne.n	8006d08 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8006c76:	617b      	str	r3, [r7, #20]

    if ( pdev->ep0_state == USBD_EP0_DATA_OUT)
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 8006c7e:	2b03      	cmp	r3, #3
 8006c80:	d134      	bne.n	8006cec <USBD_LL_DataOutStage+0x90>
    {
      if(pep->rem_length > pep->maxpacket)
 8006c82:	697b      	ldr	r3, [r7, #20]
 8006c84:	68da      	ldr	r2, [r3, #12]
 8006c86:	697b      	ldr	r3, [r7, #20]
 8006c88:	691b      	ldr	r3, [r3, #16]
 8006c8a:	429a      	cmp	r2, r3
 8006c8c:	d919      	bls.n	8006cc2 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -=  pep->maxpacket;
 8006c8e:	697b      	ldr	r3, [r7, #20]
 8006c90:	68da      	ldr	r2, [r3, #12]
 8006c92:	697b      	ldr	r3, [r7, #20]
 8006c94:	691b      	ldr	r3, [r3, #16]
 8006c96:	1ad2      	subs	r2, r2, r3
 8006c98:	697b      	ldr	r3, [r7, #20]
 8006c9a:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx (pdev,
                            pdata,
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8006c9c:	697b      	ldr	r3, [r7, #20]
 8006c9e:	68da      	ldr	r2, [r3, #12]
 8006ca0:	697b      	ldr	r3, [r7, #20]
 8006ca2:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx (pdev,
 8006ca4:	429a      	cmp	r2, r3
 8006ca6:	d203      	bcs.n	8006cb0 <USBD_LL_DataOutStage+0x54>
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8006ca8:	697b      	ldr	r3, [r7, #20]
 8006caa:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx (pdev,
 8006cac:	b29b      	uxth	r3, r3
 8006cae:	e002      	b.n	8006cb6 <USBD_LL_DataOutStage+0x5a>
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8006cb0:	697b      	ldr	r3, [r7, #20]
 8006cb2:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx (pdev,
 8006cb4:	b29b      	uxth	r3, r3
 8006cb6:	461a      	mov	r2, r3
 8006cb8:	6879      	ldr	r1, [r7, #4]
 8006cba:	68f8      	ldr	r0, [r7, #12]
 8006cbc:	f000 ff18 	bl	8007af0 <USBD_CtlContinueRx>
 8006cc0:	e038      	b.n	8006d34 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if((pdev->pClass->EP0_RxReady != NULL)&&
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8006cc8:	691b      	ldr	r3, [r3, #16]
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	d00a      	beq.n	8006ce4 <USBD_LL_DataOutStage+0x88>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006cce:	68fb      	ldr	r3, [r7, #12]
 8006cd0:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
        if((pdev->pClass->EP0_RxReady != NULL)&&
 8006cd4:	2b03      	cmp	r3, #3
 8006cd6:	d105      	bne.n	8006ce4 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8006cde:	691b      	ldr	r3, [r3, #16]
 8006ce0:	68f8      	ldr	r0, [r7, #12]
 8006ce2:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8006ce4:	68f8      	ldr	r0, [r7, #12]
 8006ce6:	f000 ff15 	bl	8007b14 <USBD_CtlSendStatus>
 8006cea:	e023      	b.n	8006d34 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 8006cf2:	2b05      	cmp	r3, #5
 8006cf4:	d11e      	bne.n	8006d34 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8006cf6:	68fb      	ldr	r3, [r7, #12]
 8006cf8:	2200      	movs	r2, #0
 8006cfa:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
        USBD_LL_StallEP(pdev, 0U);
 8006cfe:	2100      	movs	r1, #0
 8006d00:	68f8      	ldr	r0, [r7, #12]
 8006d02:	f002 fde7 	bl	80098d4 <USBD_LL_StallEP>
 8006d06:	e015      	b.n	8006d34 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if((pdev->pClass->DataOut != NULL) &&
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8006d0e:	699b      	ldr	r3, [r3, #24]
 8006d10:	2b00      	cmp	r3, #0
 8006d12:	d00d      	beq.n	8006d30 <USBD_LL_DataOutStage+0xd4>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
  else if((pdev->pClass->DataOut != NULL) &&
 8006d1a:	2b03      	cmp	r3, #3
 8006d1c:	d108      	bne.n	8006d30 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8006d1e:	68fb      	ldr	r3, [r7, #12]
 8006d20:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8006d24:	699b      	ldr	r3, [r3, #24]
 8006d26:	7afa      	ldrb	r2, [r7, #11]
 8006d28:	4611      	mov	r1, r2
 8006d2a:	68f8      	ldr	r0, [r7, #12]
 8006d2c:	4798      	blx	r3
 8006d2e:	e001      	b.n	8006d34 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8006d30:	2302      	movs	r3, #2
 8006d32:	e000      	b.n	8006d36 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8006d34:	2300      	movs	r3, #0
}
 8006d36:	4618      	mov	r0, r3
 8006d38:	3718      	adds	r7, #24
 8006d3a:	46bd      	mov	sp, r7
 8006d3c:	bd80      	pop	{r7, pc}

08006d3e <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev, uint8_t epnum,
                                       uint8_t *pdata)
{
 8006d3e:	b580      	push	{r7, lr}
 8006d40:	b086      	sub	sp, #24
 8006d42:	af00      	add	r7, sp, #0
 8006d44:	60f8      	str	r0, [r7, #12]
 8006d46:	460b      	mov	r3, r1
 8006d48:	607a      	str	r2, [r7, #4]
 8006d4a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if(epnum == 0U)
 8006d4c:	7afb      	ldrb	r3, [r7, #11]
 8006d4e:	2b00      	cmp	r3, #0
 8006d50:	d17f      	bne.n	8006e52 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8006d52:	68fb      	ldr	r3, [r7, #12]
 8006d54:	3314      	adds	r3, #20
 8006d56:	617b      	str	r3, [r7, #20]

    if ( pdev->ep0_state == USBD_EP0_DATA_IN)
 8006d58:	68fb      	ldr	r3, [r7, #12]
 8006d5a:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 8006d5e:	2b02      	cmp	r3, #2
 8006d60:	d15c      	bne.n	8006e1c <USBD_LL_DataInStage+0xde>
    {
      if(pep->rem_length > pep->maxpacket)
 8006d62:	697b      	ldr	r3, [r7, #20]
 8006d64:	68da      	ldr	r2, [r3, #12]
 8006d66:	697b      	ldr	r3, [r7, #20]
 8006d68:	691b      	ldr	r3, [r3, #16]
 8006d6a:	429a      	cmp	r2, r3
 8006d6c:	d915      	bls.n	8006d9a <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8006d6e:	697b      	ldr	r3, [r7, #20]
 8006d70:	68da      	ldr	r2, [r3, #12]
 8006d72:	697b      	ldr	r3, [r7, #20]
 8006d74:	691b      	ldr	r3, [r3, #16]
 8006d76:	1ad2      	subs	r2, r2, r3
 8006d78:	697b      	ldr	r3, [r7, #20]
 8006d7a:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData (pdev, pdata, (uint16_t)pep->rem_length);
 8006d7c:	697b      	ldr	r3, [r7, #20]
 8006d7e:	68db      	ldr	r3, [r3, #12]
 8006d80:	b29b      	uxth	r3, r3
 8006d82:	461a      	mov	r2, r3
 8006d84:	6879      	ldr	r1, [r7, #4]
 8006d86:	68f8      	ldr	r0, [r7, #12]
 8006d88:	f000 fe82 	bl	8007a90 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 8006d8c:	2300      	movs	r3, #0
 8006d8e:	2200      	movs	r2, #0
 8006d90:	2100      	movs	r1, #0
 8006d92:	68f8      	ldr	r0, [r7, #12]
 8006d94:	f002 fe4a 	bl	8009a2c <USBD_LL_PrepareReceive>
 8006d98:	e04e      	b.n	8006e38 <USBD_LL_DataInStage+0xfa>
      }
      else
      { /* last packet is MPS multiple, so send ZLP packet */
        if((pep->total_length % pep->maxpacket == 0U) &&
 8006d9a:	697b      	ldr	r3, [r7, #20]
 8006d9c:	689b      	ldr	r3, [r3, #8]
 8006d9e:	697a      	ldr	r2, [r7, #20]
 8006da0:	6912      	ldr	r2, [r2, #16]
 8006da2:	fbb3 f1f2 	udiv	r1, r3, r2
 8006da6:	fb02 f201 	mul.w	r2, r2, r1
 8006daa:	1a9b      	subs	r3, r3, r2
 8006dac:	2b00      	cmp	r3, #0
 8006dae:	d11c      	bne.n	8006dea <USBD_LL_DataInStage+0xac>
           (pep->total_length >= pep->maxpacket) &&
 8006db0:	697b      	ldr	r3, [r7, #20]
 8006db2:	689a      	ldr	r2, [r3, #8]
 8006db4:	697b      	ldr	r3, [r7, #20]
 8006db6:	691b      	ldr	r3, [r3, #16]
        if((pep->total_length % pep->maxpacket == 0U) &&
 8006db8:	429a      	cmp	r2, r3
 8006dba:	d316      	bcc.n	8006dea <USBD_LL_DataInStage+0xac>
           (pep->total_length < pdev->ep0_data_len))
 8006dbc:	697b      	ldr	r3, [r7, #20]
 8006dbe:	689a      	ldr	r2, [r3, #8]
 8006dc0:	68fb      	ldr	r3, [r7, #12]
 8006dc2:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
           (pep->total_length >= pep->maxpacket) &&
 8006dc6:	429a      	cmp	r2, r3
 8006dc8:	d20f      	bcs.n	8006dea <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8006dca:	2200      	movs	r2, #0
 8006dcc:	2100      	movs	r1, #0
 8006dce:	68f8      	ldr	r0, [r7, #12]
 8006dd0:	f000 fe5e 	bl	8007a90 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8006dd4:	68fb      	ldr	r3, [r7, #12]
 8006dd6:	2200      	movs	r2, #0
 8006dd8:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 8006ddc:	2300      	movs	r3, #0
 8006dde:	2200      	movs	r2, #0
 8006de0:	2100      	movs	r1, #0
 8006de2:	68f8      	ldr	r0, [r7, #12]
 8006de4:	f002 fe22 	bl	8009a2c <USBD_LL_PrepareReceive>
 8006de8:	e026      	b.n	8006e38 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if((pdev->pClass->EP0_TxSent != NULL)&&
 8006dea:	68fb      	ldr	r3, [r7, #12]
 8006dec:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8006df0:	68db      	ldr	r3, [r3, #12]
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	d00a      	beq.n	8006e0c <USBD_LL_DataInStage+0xce>
             (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006df6:	68fb      	ldr	r3, [r7, #12]
 8006df8:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
          if((pdev->pClass->EP0_TxSent != NULL)&&
 8006dfc:	2b03      	cmp	r3, #3
 8006dfe:	d105      	bne.n	8006e0c <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8006e00:	68fb      	ldr	r3, [r7, #12]
 8006e02:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8006e06:	68db      	ldr	r3, [r3, #12]
 8006e08:	68f8      	ldr	r0, [r7, #12]
 8006e0a:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8006e0c:	2180      	movs	r1, #128	; 0x80
 8006e0e:	68f8      	ldr	r0, [r7, #12]
 8006e10:	f002 fd60 	bl	80098d4 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8006e14:	68f8      	ldr	r0, [r7, #12]
 8006e16:	f000 fe90 	bl	8007b3a <USBD_CtlReceiveStatus>
 8006e1a:	e00d      	b.n	8006e38 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 8006e22:	2b04      	cmp	r3, #4
 8006e24:	d004      	beq.n	8006e30 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8006e26:	68fb      	ldr	r3, [r7, #12]
 8006e28:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	d103      	bne.n	8006e38 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8006e30:	2180      	movs	r1, #128	; 0x80
 8006e32:	68f8      	ldr	r0, [r7, #12]
 8006e34:	f002 fd4e 	bl	80098d4 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	f893 3278 	ldrb.w	r3, [r3, #632]	; 0x278
 8006e3e:	2b01      	cmp	r3, #1
 8006e40:	d11d      	bne.n	8006e7e <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8006e42:	68f8      	ldr	r0, [r7, #12]
 8006e44:	f7ff fe82 	bl	8006b4c <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	2200      	movs	r2, #0
 8006e4c:	f883 2278 	strb.w	r2, [r3, #632]	; 0x278
 8006e50:	e015      	b.n	8006e7e <USBD_LL_DataInStage+0x140>
    }
  }
  else if((pdev->pClass->DataIn != NULL) &&
 8006e52:	68fb      	ldr	r3, [r7, #12]
 8006e54:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8006e58:	695b      	ldr	r3, [r3, #20]
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	d00d      	beq.n	8006e7a <USBD_LL_DataInStage+0x13c>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
  else if((pdev->pClass->DataIn != NULL) &&
 8006e64:	2b03      	cmp	r3, #3
 8006e66:	d108      	bne.n	8006e7a <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8006e68:	68fb      	ldr	r3, [r7, #12]
 8006e6a:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8006e6e:	695b      	ldr	r3, [r3, #20]
 8006e70:	7afa      	ldrb	r2, [r7, #11]
 8006e72:	4611      	mov	r1, r2
 8006e74:	68f8      	ldr	r0, [r7, #12]
 8006e76:	4798      	blx	r3
 8006e78:	e001      	b.n	8006e7e <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8006e7a:	2302      	movs	r3, #2
 8006e7c:	e000      	b.n	8006e80 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8006e7e:	2300      	movs	r3, #0
}
 8006e80:	4618      	mov	r0, r3
 8006e82:	3718      	adds	r7, #24
 8006e84:	46bd      	mov	sp, r7
 8006e86:	bd80      	pop	{r7, pc}

08006e88 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef  *pdev)
{
 8006e88:	b580      	push	{r7, lr}
 8006e8a:	b082      	sub	sp, #8
 8006e8c:	af00      	add	r7, sp, #0
 8006e8e:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006e90:	2340      	movs	r3, #64	; 0x40
 8006e92:	2200      	movs	r2, #0
 8006e94:	2100      	movs	r1, #0
 8006e96:	6878      	ldr	r0, [r7, #4]
 8006e98:	f002 fcd7 	bl	800984a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	2201      	movs	r2, #1
 8006ea0:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	2240      	movs	r2, #64	; 0x40
 8006ea8:	f8c3 2150 	str.w	r2, [r3, #336]	; 0x150

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006eac:	2340      	movs	r3, #64	; 0x40
 8006eae:	2200      	movs	r2, #0
 8006eb0:	2180      	movs	r1, #128	; 0x80
 8006eb2:	6878      	ldr	r0, [r7, #4]
 8006eb4:	f002 fcc9 	bl	800984a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	2201      	movs	r2, #1
 8006ebc:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	2240      	movs	r2, #64	; 0x40
 8006ec2:	625a      	str	r2, [r3, #36]	; 0x24
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	2201      	movs	r2, #1
 8006ec8:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  pdev->ep0_state = USBD_EP0_IDLE;
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	2200      	movs	r2, #0
 8006ed0:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  pdev->dev_config= 0U;
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	2200      	movs	r2, #0
 8006ed8:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	2200      	movs	r2, #0
 8006ede:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c

  if (pdev->pClassData)
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8006ee8:	2b00      	cmp	r3, #0
 8006eea:	d009      	beq.n	8006f00 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8006ef2:	685b      	ldr	r3, [r3, #4]
 8006ef4:	687a      	ldr	r2, [r7, #4]
 8006ef6:	6852      	ldr	r2, [r2, #4]
 8006ef8:	b2d2      	uxtb	r2, r2
 8006efa:	4611      	mov	r1, r2
 8006efc:	6878      	ldr	r0, [r7, #4]
 8006efe:	4798      	blx	r3
  }

  return USBD_OK;
 8006f00:	2300      	movs	r3, #0
}
 8006f02:	4618      	mov	r0, r3
 8006f04:	3708      	adds	r7, #8
 8006f06:	46bd      	mov	sp, r7
 8006f08:	bd80      	pop	{r7, pc}

08006f0a <USBD_LL_SetSpeed>:
*         Handle Reset event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef  *pdev, USBD_SpeedTypeDef speed)
{
 8006f0a:	b480      	push	{r7}
 8006f0c:	b083      	sub	sp, #12
 8006f0e:	af00      	add	r7, sp, #0
 8006f10:	6078      	str	r0, [r7, #4]
 8006f12:	460b      	mov	r3, r1
 8006f14:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	78fa      	ldrb	r2, [r7, #3]
 8006f1a:	741a      	strb	r2, [r3, #16]
  return USBD_OK;
 8006f1c:	2300      	movs	r3, #0
}
 8006f1e:	4618      	mov	r0, r3
 8006f20:	370c      	adds	r7, #12
 8006f22:	46bd      	mov	sp, r7
 8006f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f28:	4770      	bx	lr

08006f2a <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef  *pdev)
{
 8006f2a:	b480      	push	{r7}
 8006f2c:	b083      	sub	sp, #12
 8006f2e:	af00      	add	r7, sp, #0
 8006f30:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	f893 2274 	ldrb.w	r2, [r3, #628]	; 0x274
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	f883 2275 	strb.w	r2, [r3, #629]	; 0x275
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	2204      	movs	r2, #4
 8006f42:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  return USBD_OK;
 8006f46:	2300      	movs	r3, #0
}
 8006f48:	4618      	mov	r0, r3
 8006f4a:	370c      	adds	r7, #12
 8006f4c:	46bd      	mov	sp, r7
 8006f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f52:	4770      	bx	lr

08006f54 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef  *pdev)
{
 8006f54:	b480      	push	{r7}
 8006f56:	b083      	sub	sp, #12
 8006f58:	af00      	add	r7, sp, #0
 8006f5a:	6078      	str	r0, [r7, #4]
  pdev->dev_state = pdev->dev_old_state;
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	f893 2275 	ldrb.w	r2, [r3, #629]	; 0x275
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  return USBD_OK;
 8006f68:	2300      	movs	r3, #0
}
 8006f6a:	4618      	mov	r0, r3
 8006f6c:	370c      	adds	r7, #12
 8006f6e:	46bd      	mov	sp, r7
 8006f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f74:	4770      	bx	lr

08006f76 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef  *pdev)
{
 8006f76:	b580      	push	{r7, lr}
 8006f78:	b082      	sub	sp, #8
 8006f7a:	af00      	add	r7, sp, #0
 8006f7c:	6078      	str	r0, [r7, #4]
  if(pdev->dev_state == USBD_STATE_CONFIGURED)
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8006f84:	2b03      	cmp	r3, #3
 8006f86:	d10b      	bne.n	8006fa0 <USBD_LL_SOF+0x2a>
  {
    if(pdev->pClass->SOF != NULL)
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8006f8e:	69db      	ldr	r3, [r3, #28]
 8006f90:	2b00      	cmp	r3, #0
 8006f92:	d005      	beq.n	8006fa0 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8006f9a:	69db      	ldr	r3, [r3, #28]
 8006f9c:	6878      	ldr	r0, [r7, #4]
 8006f9e:	4798      	blx	r3
    }
  }
  return USBD_OK;
 8006fa0:	2300      	movs	r3, #0
}
 8006fa2:	4618      	mov	r0, r3
 8006fa4:	3708      	adds	r7, #8
 8006fa6:	46bd      	mov	sp, r7
 8006fa8:	bd80      	pop	{r7, pc}

08006faa <USBD_LL_IsoINIncomplete>:
*         Handle iso in incomplete event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef  *pdev, uint8_t epnum)
{
 8006faa:	b480      	push	{r7}
 8006fac:	b083      	sub	sp, #12
 8006fae:	af00      	add	r7, sp, #0
 8006fb0:	6078      	str	r0, [r7, #4]
 8006fb2:	460b      	mov	r3, r1
 8006fb4:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 8006fb6:	2300      	movs	r3, #0
}
 8006fb8:	4618      	mov	r0, r3
 8006fba:	370c      	adds	r7, #12
 8006fbc:	46bd      	mov	sp, r7
 8006fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fc2:	4770      	bx	lr

08006fc4 <USBD_LL_IsoOUTIncomplete>:
*         Handle iso out incomplete event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef  *pdev, uint8_t epnum)
{
 8006fc4:	b480      	push	{r7}
 8006fc6:	b083      	sub	sp, #12
 8006fc8:	af00      	add	r7, sp, #0
 8006fca:	6078      	str	r0, [r7, #4]
 8006fcc:	460b      	mov	r3, r1
 8006fce:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 8006fd0:	2300      	movs	r3, #0
}
 8006fd2:	4618      	mov	r0, r3
 8006fd4:	370c      	adds	r7, #12
 8006fd6:	46bd      	mov	sp, r7
 8006fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fdc:	4770      	bx	lr

08006fde <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef  *pdev)
{
 8006fde:	b480      	push	{r7}
 8006fe0:	b083      	sub	sp, #12
 8006fe2:	af00      	add	r7, sp, #0
 8006fe4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006fe6:	2300      	movs	r3, #0
}
 8006fe8:	4618      	mov	r0, r3
 8006fea:	370c      	adds	r7, #12
 8006fec:	46bd      	mov	sp, r7
 8006fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ff2:	4770      	bx	lr

08006ff4 <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef  *pdev)
{
 8006ff4:	b580      	push	{r7, lr}
 8006ff6:	b082      	sub	sp, #8
 8006ff8:	af00      	add	r7, sp, #0
 8006ffa:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	2201      	movs	r2, #1
 8007000:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800700a:	685b      	ldr	r3, [r3, #4]
 800700c:	687a      	ldr	r2, [r7, #4]
 800700e:	6852      	ldr	r2, [r2, #4]
 8007010:	b2d2      	uxtb	r2, r2
 8007012:	4611      	mov	r1, r2
 8007014:	6878      	ldr	r0, [r7, #4]
 8007016:	4798      	blx	r3

  return USBD_OK;
 8007018:	2300      	movs	r3, #0
}
 800701a:	4618      	mov	r0, r3
 800701c:	3708      	adds	r7, #8
 800701e:	46bd      	mov	sp, r7
 8007020:	bd80      	pop	{r7, pc}
	...

08007024 <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 8007024:	b580      	push	{r7, lr}
 8007026:	b084      	sub	sp, #16
 8007028:	af00      	add	r7, sp, #0
 800702a:	6078      	str	r0, [r7, #4]
 800702c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800702e:	2300      	movs	r3, #0
 8007030:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007032:	683b      	ldr	r3, [r7, #0]
 8007034:	781b      	ldrb	r3, [r3, #0]
 8007036:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800703a:	2b20      	cmp	r3, #32
 800703c:	d004      	beq.n	8007048 <USBD_StdDevReq+0x24>
 800703e:	2b40      	cmp	r3, #64	; 0x40
 8007040:	d002      	beq.n	8007048 <USBD_StdDevReq+0x24>
 8007042:	2b00      	cmp	r3, #0
 8007044:	d008      	beq.n	8007058 <USBD_StdDevReq+0x34>
 8007046:	e04c      	b.n	80070e2 <USBD_StdDevReq+0xbe>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    pdev->pClass->Setup(pdev, req);
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800704e:	689b      	ldr	r3, [r3, #8]
 8007050:	6839      	ldr	r1, [r7, #0]
 8007052:	6878      	ldr	r0, [r7, #4]
 8007054:	4798      	blx	r3
    break;
 8007056:	e049      	b.n	80070ec <USBD_StdDevReq+0xc8>

  case USB_REQ_TYPE_STANDARD:

    switch (req->bRequest)
 8007058:	683b      	ldr	r3, [r7, #0]
 800705a:	785b      	ldrb	r3, [r3, #1]
 800705c:	2b09      	cmp	r3, #9
 800705e:	d83a      	bhi.n	80070d6 <USBD_StdDevReq+0xb2>
 8007060:	a201      	add	r2, pc, #4	; (adr r2, 8007068 <USBD_StdDevReq+0x44>)
 8007062:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007066:	bf00      	nop
 8007068:	080070b9 	.word	0x080070b9
 800706c:	080070cd 	.word	0x080070cd
 8007070:	080070d7 	.word	0x080070d7
 8007074:	080070c3 	.word	0x080070c3
 8007078:	080070d7 	.word	0x080070d7
 800707c:	0800709b 	.word	0x0800709b
 8007080:	08007091 	.word	0x08007091
 8007084:	080070d7 	.word	0x080070d7
 8007088:	080070af 	.word	0x080070af
 800708c:	080070a5 	.word	0x080070a5
    {
    case USB_REQ_GET_DESCRIPTOR:

      USBD_GetDescriptor (pdev, req);
 8007090:	6839      	ldr	r1, [r7, #0]
 8007092:	6878      	ldr	r0, [r7, #4]
 8007094:	f000 f9d2 	bl	800743c <USBD_GetDescriptor>
      break;
 8007098:	e022      	b.n	80070e0 <USBD_StdDevReq+0xbc>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress (pdev, req);
 800709a:	6839      	ldr	r1, [r7, #0]
 800709c:	6878      	ldr	r0, [r7, #4]
 800709e:	f000 fac7 	bl	8007630 <USBD_SetAddress>
      break;
 80070a2:	e01d      	b.n	80070e0 <USBD_StdDevReq+0xbc>

    case USB_REQ_SET_CONFIGURATION:
      USBD_SetConfig (pdev, req);
 80070a4:	6839      	ldr	r1, [r7, #0]
 80070a6:	6878      	ldr	r0, [r7, #4]
 80070a8:	f000 fb04 	bl	80076b4 <USBD_SetConfig>
      break;
 80070ac:	e018      	b.n	80070e0 <USBD_StdDevReq+0xbc>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig (pdev, req);
 80070ae:	6839      	ldr	r1, [r7, #0]
 80070b0:	6878      	ldr	r0, [r7, #4]
 80070b2:	f000 fb8d 	bl	80077d0 <USBD_GetConfig>
      break;
 80070b6:	e013      	b.n	80070e0 <USBD_StdDevReq+0xbc>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus (pdev, req);
 80070b8:	6839      	ldr	r1, [r7, #0]
 80070ba:	6878      	ldr	r0, [r7, #4]
 80070bc:	f000 fbbc 	bl	8007838 <USBD_GetStatus>
      break;
 80070c0:	e00e      	b.n	80070e0 <USBD_StdDevReq+0xbc>


    case USB_REQ_SET_FEATURE:
      USBD_SetFeature (pdev, req);
 80070c2:	6839      	ldr	r1, [r7, #0]
 80070c4:	6878      	ldr	r0, [r7, #4]
 80070c6:	f000 fbea 	bl	800789e <USBD_SetFeature>
      break;
 80070ca:	e009      	b.n	80070e0 <USBD_StdDevReq+0xbc>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature (pdev, req);
 80070cc:	6839      	ldr	r1, [r7, #0]
 80070ce:	6878      	ldr	r0, [r7, #4]
 80070d0:	f000 fbf9 	bl	80078c6 <USBD_ClrFeature>
      break;
 80070d4:	e004      	b.n	80070e0 <USBD_StdDevReq+0xbc>

    default:
      USBD_CtlError(pdev, req);
 80070d6:	6839      	ldr	r1, [r7, #0]
 80070d8:	6878      	ldr	r0, [r7, #4]
 80070da:	f000 fc52 	bl	8007982 <USBD_CtlError>
      break;
 80070de:	bf00      	nop
    }
    break;
 80070e0:	e004      	b.n	80070ec <USBD_StdDevReq+0xc8>

  default:
    USBD_CtlError(pdev, req);
 80070e2:	6839      	ldr	r1, [r7, #0]
 80070e4:	6878      	ldr	r0, [r7, #4]
 80070e6:	f000 fc4c 	bl	8007982 <USBD_CtlError>
    break;
 80070ea:	bf00      	nop
  }

  return ret;
 80070ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80070ee:	4618      	mov	r0, r3
 80070f0:	3710      	adds	r7, #16
 80070f2:	46bd      	mov	sp, r7
 80070f4:	bd80      	pop	{r7, pc}
 80070f6:	bf00      	nop

080070f8 <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 80070f8:	b580      	push	{r7, lr}
 80070fa:	b084      	sub	sp, #16
 80070fc:	af00      	add	r7, sp, #0
 80070fe:	6078      	str	r0, [r7, #4]
 8007100:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007102:	2300      	movs	r3, #0
 8007104:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007106:	683b      	ldr	r3, [r7, #0]
 8007108:	781b      	ldrb	r3, [r3, #0]
 800710a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800710e:	2b20      	cmp	r3, #32
 8007110:	d003      	beq.n	800711a <USBD_StdItfReq+0x22>
 8007112:	2b40      	cmp	r3, #64	; 0x40
 8007114:	d001      	beq.n	800711a <USBD_StdItfReq+0x22>
 8007116:	2b00      	cmp	r3, #0
 8007118:	d12a      	bne.n	8007170 <USBD_StdItfReq+0x78>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8007120:	3b01      	subs	r3, #1
 8007122:	2b02      	cmp	r3, #2
 8007124:	d81d      	bhi.n	8007162 <USBD_StdItfReq+0x6a>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8007126:	683b      	ldr	r3, [r7, #0]
 8007128:	889b      	ldrh	r3, [r3, #4]
 800712a:	b2db      	uxtb	r3, r3
 800712c:	2b01      	cmp	r3, #1
 800712e:	d813      	bhi.n	8007158 <USBD_StdItfReq+0x60>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup (pdev, req);
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8007136:	689b      	ldr	r3, [r3, #8]
 8007138:	6839      	ldr	r1, [r7, #0]
 800713a:	6878      	ldr	r0, [r7, #4]
 800713c:	4798      	blx	r3
 800713e:	4603      	mov	r3, r0
 8007140:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 8007142:	683b      	ldr	r3, [r7, #0]
 8007144:	88db      	ldrh	r3, [r3, #6]
 8007146:	2b00      	cmp	r3, #0
 8007148:	d110      	bne.n	800716c <USBD_StdItfReq+0x74>
 800714a:	7bfb      	ldrb	r3, [r7, #15]
 800714c:	2b00      	cmp	r3, #0
 800714e:	d10d      	bne.n	800716c <USBD_StdItfReq+0x74>
        {
          USBD_CtlSendStatus(pdev);
 8007150:	6878      	ldr	r0, [r7, #4]
 8007152:	f000 fcdf 	bl	8007b14 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 8007156:	e009      	b.n	800716c <USBD_StdItfReq+0x74>
        USBD_CtlError(pdev, req);
 8007158:	6839      	ldr	r1, [r7, #0]
 800715a:	6878      	ldr	r0, [r7, #4]
 800715c:	f000 fc11 	bl	8007982 <USBD_CtlError>
      break;
 8007160:	e004      	b.n	800716c <USBD_StdItfReq+0x74>

    default:
      USBD_CtlError(pdev, req);
 8007162:	6839      	ldr	r1, [r7, #0]
 8007164:	6878      	ldr	r0, [r7, #4]
 8007166:	f000 fc0c 	bl	8007982 <USBD_CtlError>
      break;
 800716a:	e000      	b.n	800716e <USBD_StdItfReq+0x76>
      break;
 800716c:	bf00      	nop
    }
    break;
 800716e:	e004      	b.n	800717a <USBD_StdItfReq+0x82>

  default:
    USBD_CtlError(pdev, req);
 8007170:	6839      	ldr	r1, [r7, #0]
 8007172:	6878      	ldr	r0, [r7, #4]
 8007174:	f000 fc05 	bl	8007982 <USBD_CtlError>
    break;
 8007178:	bf00      	nop
  }

  return USBD_OK;
 800717a:	2300      	movs	r3, #0
}
 800717c:	4618      	mov	r0, r3
 800717e:	3710      	adds	r7, #16
 8007180:	46bd      	mov	sp, r7
 8007182:	bd80      	pop	{r7, pc}

08007184 <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 8007184:	b580      	push	{r7, lr}
 8007186:	b084      	sub	sp, #16
 8007188:	af00      	add	r7, sp, #0
 800718a:	6078      	str	r0, [r7, #4]
 800718c:	6039      	str	r1, [r7, #0]

  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800718e:	2300      	movs	r3, #0
 8007190:	73fb      	strb	r3, [r7, #15]
  USBD_EndpointTypeDef   *pep;
  ep_addr  = LOBYTE(req->wIndex);
 8007192:	683b      	ldr	r3, [r7, #0]
 8007194:	889b      	ldrh	r3, [r3, #4]
 8007196:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007198:	683b      	ldr	r3, [r7, #0]
 800719a:	781b      	ldrb	r3, [r3, #0]
 800719c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80071a0:	2b20      	cmp	r3, #32
 80071a2:	d004      	beq.n	80071ae <USBD_StdEPReq+0x2a>
 80071a4:	2b40      	cmp	r3, #64	; 0x40
 80071a6:	d002      	beq.n	80071ae <USBD_StdEPReq+0x2a>
 80071a8:	2b00      	cmp	r3, #0
 80071aa:	d008      	beq.n	80071be <USBD_StdEPReq+0x3a>
 80071ac:	e13b      	b.n	8007426 <USBD_StdEPReq+0x2a2>
  {

  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    pdev->pClass->Setup (pdev, req);
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80071b4:	689b      	ldr	r3, [r3, #8]
 80071b6:	6839      	ldr	r1, [r7, #0]
 80071b8:	6878      	ldr	r0, [r7, #4]
 80071ba:	4798      	blx	r3
    break;
 80071bc:	e138      	b.n	8007430 <USBD_StdEPReq+0x2ac>

  case USB_REQ_TYPE_STANDARD:
    /* Check if it is a class request */
    if ((req->bmRequest & 0x60U) == 0x20U)
 80071be:	683b      	ldr	r3, [r7, #0]
 80071c0:	781b      	ldrb	r3, [r3, #0]
 80071c2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80071c6:	2b20      	cmp	r3, #32
 80071c8:	d10a      	bne.n	80071e0 <USBD_StdEPReq+0x5c>
    {
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup (pdev, req);
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80071d0:	689b      	ldr	r3, [r3, #8]
 80071d2:	6839      	ldr	r1, [r7, #0]
 80071d4:	6878      	ldr	r0, [r7, #4]
 80071d6:	4798      	blx	r3
 80071d8:	4603      	mov	r3, r0
 80071da:	73fb      	strb	r3, [r7, #15]

      return ret;
 80071dc:	7bfb      	ldrb	r3, [r7, #15]
 80071de:	e128      	b.n	8007432 <USBD_StdEPReq+0x2ae>
    }

    switch (req->bRequest)
 80071e0:	683b      	ldr	r3, [r7, #0]
 80071e2:	785b      	ldrb	r3, [r3, #1]
 80071e4:	2b01      	cmp	r3, #1
 80071e6:	d03e      	beq.n	8007266 <USBD_StdEPReq+0xe2>
 80071e8:	2b03      	cmp	r3, #3
 80071ea:	d002      	beq.n	80071f2 <USBD_StdEPReq+0x6e>
 80071ec:	2b00      	cmp	r3, #0
 80071ee:	d070      	beq.n	80072d2 <USBD_StdEPReq+0x14e>
 80071f0:	e113      	b.n	800741a <USBD_StdEPReq+0x296>
    {

    case USB_REQ_SET_FEATURE :

      switch (pdev->dev_state)
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 80071f8:	2b02      	cmp	r3, #2
 80071fa:	d002      	beq.n	8007202 <USBD_StdEPReq+0x7e>
 80071fc:	2b03      	cmp	r3, #3
 80071fe:	d015      	beq.n	800722c <USBD_StdEPReq+0xa8>
 8007200:	e02b      	b.n	800725a <USBD_StdEPReq+0xd6>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007202:	7bbb      	ldrb	r3, [r7, #14]
 8007204:	2b00      	cmp	r3, #0
 8007206:	d00c      	beq.n	8007222 <USBD_StdEPReq+0x9e>
 8007208:	7bbb      	ldrb	r3, [r7, #14]
 800720a:	2b80      	cmp	r3, #128	; 0x80
 800720c:	d009      	beq.n	8007222 <USBD_StdEPReq+0x9e>
        {
          USBD_LL_StallEP(pdev, ep_addr);
 800720e:	7bbb      	ldrb	r3, [r7, #14]
 8007210:	4619      	mov	r1, r3
 8007212:	6878      	ldr	r0, [r7, #4]
 8007214:	f002 fb5e 	bl	80098d4 <USBD_LL_StallEP>
          USBD_LL_StallEP(pdev, 0x80U);
 8007218:	2180      	movs	r1, #128	; 0x80
 800721a:	6878      	ldr	r0, [r7, #4]
 800721c:	f002 fb5a 	bl	80098d4 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 8007220:	e020      	b.n	8007264 <USBD_StdEPReq+0xe0>
          USBD_CtlError(pdev, req);
 8007222:	6839      	ldr	r1, [r7, #0]
 8007224:	6878      	ldr	r0, [r7, #4]
 8007226:	f000 fbac 	bl	8007982 <USBD_CtlError>
        break;
 800722a:	e01b      	b.n	8007264 <USBD_StdEPReq+0xe0>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 800722c:	683b      	ldr	r3, [r7, #0]
 800722e:	885b      	ldrh	r3, [r3, #2]
 8007230:	2b00      	cmp	r3, #0
 8007232:	d10e      	bne.n	8007252 <USBD_StdEPReq+0xce>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8007234:	7bbb      	ldrb	r3, [r7, #14]
 8007236:	2b00      	cmp	r3, #0
 8007238:	d00b      	beq.n	8007252 <USBD_StdEPReq+0xce>
 800723a:	7bbb      	ldrb	r3, [r7, #14]
 800723c:	2b80      	cmp	r3, #128	; 0x80
 800723e:	d008      	beq.n	8007252 <USBD_StdEPReq+0xce>
 8007240:	683b      	ldr	r3, [r7, #0]
 8007242:	88db      	ldrh	r3, [r3, #6]
 8007244:	2b00      	cmp	r3, #0
 8007246:	d104      	bne.n	8007252 <USBD_StdEPReq+0xce>
          {
            USBD_LL_StallEP(pdev, ep_addr);
 8007248:	7bbb      	ldrb	r3, [r7, #14]
 800724a:	4619      	mov	r1, r3
 800724c:	6878      	ldr	r0, [r7, #4]
 800724e:	f002 fb41 	bl	80098d4 <USBD_LL_StallEP>
          }
        }
        USBD_CtlSendStatus(pdev);
 8007252:	6878      	ldr	r0, [r7, #4]
 8007254:	f000 fc5e 	bl	8007b14 <USBD_CtlSendStatus>

        break;
 8007258:	e004      	b.n	8007264 <USBD_StdEPReq+0xe0>

      default:
        USBD_CtlError(pdev, req);
 800725a:	6839      	ldr	r1, [r7, #0]
 800725c:	6878      	ldr	r0, [r7, #4]
 800725e:	f000 fb90 	bl	8007982 <USBD_CtlError>
        break;
 8007262:	bf00      	nop
      }
      break;
 8007264:	e0de      	b.n	8007424 <USBD_StdEPReq+0x2a0>

    case USB_REQ_CLEAR_FEATURE :

      switch (pdev->dev_state)
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800726c:	2b02      	cmp	r3, #2
 800726e:	d002      	beq.n	8007276 <USBD_StdEPReq+0xf2>
 8007270:	2b03      	cmp	r3, #3
 8007272:	d015      	beq.n	80072a0 <USBD_StdEPReq+0x11c>
 8007274:	e026      	b.n	80072c4 <USBD_StdEPReq+0x140>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007276:	7bbb      	ldrb	r3, [r7, #14]
 8007278:	2b00      	cmp	r3, #0
 800727a:	d00c      	beq.n	8007296 <USBD_StdEPReq+0x112>
 800727c:	7bbb      	ldrb	r3, [r7, #14]
 800727e:	2b80      	cmp	r3, #128	; 0x80
 8007280:	d009      	beq.n	8007296 <USBD_StdEPReq+0x112>
        {
          USBD_LL_StallEP(pdev, ep_addr);
 8007282:	7bbb      	ldrb	r3, [r7, #14]
 8007284:	4619      	mov	r1, r3
 8007286:	6878      	ldr	r0, [r7, #4]
 8007288:	f002 fb24 	bl	80098d4 <USBD_LL_StallEP>
          USBD_LL_StallEP(pdev, 0x80U);
 800728c:	2180      	movs	r1, #128	; 0x80
 800728e:	6878      	ldr	r0, [r7, #4]
 8007290:	f002 fb20 	bl	80098d4 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 8007294:	e01c      	b.n	80072d0 <USBD_StdEPReq+0x14c>
          USBD_CtlError(pdev, req);
 8007296:	6839      	ldr	r1, [r7, #0]
 8007298:	6878      	ldr	r0, [r7, #4]
 800729a:	f000 fb72 	bl	8007982 <USBD_CtlError>
        break;
 800729e:	e017      	b.n	80072d0 <USBD_StdEPReq+0x14c>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 80072a0:	683b      	ldr	r3, [r7, #0]
 80072a2:	885b      	ldrh	r3, [r3, #2]
 80072a4:	2b00      	cmp	r3, #0
 80072a6:	d112      	bne.n	80072ce <USBD_StdEPReq+0x14a>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 80072a8:	7bbb      	ldrb	r3, [r7, #14]
 80072aa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80072ae:	2b00      	cmp	r3, #0
 80072b0:	d004      	beq.n	80072bc <USBD_StdEPReq+0x138>
          {
            USBD_LL_ClearStallEP(pdev, ep_addr);
 80072b2:	7bbb      	ldrb	r3, [r7, #14]
 80072b4:	4619      	mov	r1, r3
 80072b6:	6878      	ldr	r0, [r7, #4]
 80072b8:	f002 fb2b 	bl	8009912 <USBD_LL_ClearStallEP>
          }
          USBD_CtlSendStatus(pdev);
 80072bc:	6878      	ldr	r0, [r7, #4]
 80072be:	f000 fc29 	bl	8007b14 <USBD_CtlSendStatus>
        }
        break;
 80072c2:	e004      	b.n	80072ce <USBD_StdEPReq+0x14a>

      default:
        USBD_CtlError(pdev, req);
 80072c4:	6839      	ldr	r1, [r7, #0]
 80072c6:	6878      	ldr	r0, [r7, #4]
 80072c8:	f000 fb5b 	bl	8007982 <USBD_CtlError>
        break;
 80072cc:	e000      	b.n	80072d0 <USBD_StdEPReq+0x14c>
        break;
 80072ce:	bf00      	nop
      }
      break;
 80072d0:	e0a8      	b.n	8007424 <USBD_StdEPReq+0x2a0>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 80072d8:	2b02      	cmp	r3, #2
 80072da:	d002      	beq.n	80072e2 <USBD_StdEPReq+0x15e>
 80072dc:	2b03      	cmp	r3, #3
 80072de:	d031      	beq.n	8007344 <USBD_StdEPReq+0x1c0>
 80072e0:	e095      	b.n	800740e <USBD_StdEPReq+0x28a>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80072e2:	7bbb      	ldrb	r3, [r7, #14]
 80072e4:	2b00      	cmp	r3, #0
 80072e6:	d007      	beq.n	80072f8 <USBD_StdEPReq+0x174>
 80072e8:	7bbb      	ldrb	r3, [r7, #14]
 80072ea:	2b80      	cmp	r3, #128	; 0x80
 80072ec:	d004      	beq.n	80072f8 <USBD_StdEPReq+0x174>
        {
          USBD_CtlError(pdev, req);
 80072ee:	6839      	ldr	r1, [r7, #0]
 80072f0:	6878      	ldr	r0, [r7, #4]
 80072f2:	f000 fb46 	bl	8007982 <USBD_CtlError>
          break;
 80072f6:	e08f      	b.n	8007418 <USBD_StdEPReq+0x294>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 80072f8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80072fc:	2b00      	cmp	r3, #0
 80072fe:	da0b      	bge.n	8007318 <USBD_StdEPReq+0x194>
 8007300:	7bbb      	ldrb	r3, [r7, #14]
 8007302:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007306:	4613      	mov	r3, r2
 8007308:	009b      	lsls	r3, r3, #2
 800730a:	4413      	add	r3, r2
 800730c:	009b      	lsls	r3, r3, #2
 800730e:	3310      	adds	r3, #16
 8007310:	687a      	ldr	r2, [r7, #4]
 8007312:	4413      	add	r3, r2
 8007314:	3304      	adds	r3, #4
 8007316:	e00a      	b.n	800732e <USBD_StdEPReq+0x1aa>
          &pdev->ep_out[ep_addr & 0x7FU];
 8007318:	7bbb      	ldrb	r3, [r7, #14]
 800731a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 800731e:	4613      	mov	r3, r2
 8007320:	009b      	lsls	r3, r3, #2
 8007322:	4413      	add	r3, r2
 8007324:	009b      	lsls	r3, r3, #2
 8007326:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 800732a:	687a      	ldr	r2, [r7, #4]
 800732c:	4413      	add	r3, r2
 800732e:	60bb      	str	r3, [r7, #8]

          pep->status = 0x0000U;
 8007330:	68bb      	ldr	r3, [r7, #8]
 8007332:	2200      	movs	r2, #0
 8007334:	601a      	str	r2, [r3, #0]

          USBD_CtlSendData (pdev, (uint8_t *)(void *)&pep->status, 2U);
 8007336:	68bb      	ldr	r3, [r7, #8]
 8007338:	2202      	movs	r2, #2
 800733a:	4619      	mov	r1, r3
 800733c:	6878      	ldr	r0, [r7, #4]
 800733e:	f000 fb8b 	bl	8007a58 <USBD_CtlSendData>
          break;
 8007342:	e069      	b.n	8007418 <USBD_StdEPReq+0x294>

      case USBD_STATE_CONFIGURED:
        if((ep_addr & 0x80U) == 0x80U)
 8007344:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007348:	2b00      	cmp	r3, #0
 800734a:	da11      	bge.n	8007370 <USBD_StdEPReq+0x1ec>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800734c:	7bbb      	ldrb	r3, [r7, #14]
 800734e:	f003 020f 	and.w	r2, r3, #15
 8007352:	6879      	ldr	r1, [r7, #4]
 8007354:	4613      	mov	r3, r2
 8007356:	009b      	lsls	r3, r3, #2
 8007358:	4413      	add	r3, r2
 800735a:	009b      	lsls	r3, r3, #2
 800735c:	440b      	add	r3, r1
 800735e:	3318      	adds	r3, #24
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	2b00      	cmp	r3, #0
 8007364:	d117      	bne.n	8007396 <USBD_StdEPReq+0x212>
          {
            USBD_CtlError(pdev, req);
 8007366:	6839      	ldr	r1, [r7, #0]
 8007368:	6878      	ldr	r0, [r7, #4]
 800736a:	f000 fb0a 	bl	8007982 <USBD_CtlError>
            break;
 800736e:	e053      	b.n	8007418 <USBD_StdEPReq+0x294>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8007370:	7bbb      	ldrb	r3, [r7, #14]
 8007372:	f003 020f 	and.w	r2, r3, #15
 8007376:	6879      	ldr	r1, [r7, #4]
 8007378:	4613      	mov	r3, r2
 800737a:	009b      	lsls	r3, r3, #2
 800737c:	4413      	add	r3, r2
 800737e:	009b      	lsls	r3, r3, #2
 8007380:	440b      	add	r3, r1
 8007382:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	2b00      	cmp	r3, #0
 800738a:	d104      	bne.n	8007396 <USBD_StdEPReq+0x212>
          {
            USBD_CtlError(pdev, req);
 800738c:	6839      	ldr	r1, [r7, #0]
 800738e:	6878      	ldr	r0, [r7, #4]
 8007390:	f000 faf7 	bl	8007982 <USBD_CtlError>
            break;
 8007394:	e040      	b.n	8007418 <USBD_StdEPReq+0x294>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 8007396:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800739a:	2b00      	cmp	r3, #0
 800739c:	da0b      	bge.n	80073b6 <USBD_StdEPReq+0x232>
 800739e:	7bbb      	ldrb	r3, [r7, #14]
 80073a0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80073a4:	4613      	mov	r3, r2
 80073a6:	009b      	lsls	r3, r3, #2
 80073a8:	4413      	add	r3, r2
 80073aa:	009b      	lsls	r3, r3, #2
 80073ac:	3310      	adds	r3, #16
 80073ae:	687a      	ldr	r2, [r7, #4]
 80073b0:	4413      	add	r3, r2
 80073b2:	3304      	adds	r3, #4
 80073b4:	e00a      	b.n	80073cc <USBD_StdEPReq+0x248>
          &pdev->ep_out[ep_addr & 0x7FU];
 80073b6:	7bbb      	ldrb	r3, [r7, #14]
 80073b8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 80073bc:	4613      	mov	r3, r2
 80073be:	009b      	lsls	r3, r3, #2
 80073c0:	4413      	add	r3, r2
 80073c2:	009b      	lsls	r3, r3, #2
 80073c4:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 80073c8:	687a      	ldr	r2, [r7, #4]
 80073ca:	4413      	add	r3, r2
 80073cc:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80073ce:	7bbb      	ldrb	r3, [r7, #14]
 80073d0:	2b00      	cmp	r3, #0
 80073d2:	d002      	beq.n	80073da <USBD_StdEPReq+0x256>
 80073d4:	7bbb      	ldrb	r3, [r7, #14]
 80073d6:	2b80      	cmp	r3, #128	; 0x80
 80073d8:	d103      	bne.n	80073e2 <USBD_StdEPReq+0x25e>
          {
            pep->status = 0x0000U;
 80073da:	68bb      	ldr	r3, [r7, #8]
 80073dc:	2200      	movs	r2, #0
 80073de:	601a      	str	r2, [r3, #0]
 80073e0:	e00e      	b.n	8007400 <USBD_StdEPReq+0x27c>
          }
          else if(USBD_LL_IsStallEP(pdev, ep_addr))
 80073e2:	7bbb      	ldrb	r3, [r7, #14]
 80073e4:	4619      	mov	r1, r3
 80073e6:	6878      	ldr	r0, [r7, #4]
 80073e8:	f002 fab2 	bl	8009950 <USBD_LL_IsStallEP>
 80073ec:	4603      	mov	r3, r0
 80073ee:	2b00      	cmp	r3, #0
 80073f0:	d003      	beq.n	80073fa <USBD_StdEPReq+0x276>
          {
            pep->status = 0x0001U;
 80073f2:	68bb      	ldr	r3, [r7, #8]
 80073f4:	2201      	movs	r2, #1
 80073f6:	601a      	str	r2, [r3, #0]
 80073f8:	e002      	b.n	8007400 <USBD_StdEPReq+0x27c>
          }
          else
          {
            pep->status = 0x0000U;
 80073fa:	68bb      	ldr	r3, [r7, #8]
 80073fc:	2200      	movs	r2, #0
 80073fe:	601a      	str	r2, [r3, #0]
          }

          USBD_CtlSendData (pdev, (uint8_t *)(void *)&pep->status, 2U);
 8007400:	68bb      	ldr	r3, [r7, #8]
 8007402:	2202      	movs	r2, #2
 8007404:	4619      	mov	r1, r3
 8007406:	6878      	ldr	r0, [r7, #4]
 8007408:	f000 fb26 	bl	8007a58 <USBD_CtlSendData>
          break;
 800740c:	e004      	b.n	8007418 <USBD_StdEPReq+0x294>

      default:
        USBD_CtlError(pdev, req);
 800740e:	6839      	ldr	r1, [r7, #0]
 8007410:	6878      	ldr	r0, [r7, #4]
 8007412:	f000 fab6 	bl	8007982 <USBD_CtlError>
        break;
 8007416:	bf00      	nop
      }
      break;
 8007418:	e004      	b.n	8007424 <USBD_StdEPReq+0x2a0>

    default:
      USBD_CtlError(pdev, req);
 800741a:	6839      	ldr	r1, [r7, #0]
 800741c:	6878      	ldr	r0, [r7, #4]
 800741e:	f000 fab0 	bl	8007982 <USBD_CtlError>
      break;
 8007422:	bf00      	nop
    }
    break;
 8007424:	e004      	b.n	8007430 <USBD_StdEPReq+0x2ac>

  default:
    USBD_CtlError(pdev, req);
 8007426:	6839      	ldr	r1, [r7, #0]
 8007428:	6878      	ldr	r0, [r7, #4]
 800742a:	f000 faaa 	bl	8007982 <USBD_CtlError>
    break;
 800742e:	bf00      	nop
  }

  return ret;
 8007430:	7bfb      	ldrb	r3, [r7, #15]
}
 8007432:	4618      	mov	r0, r3
 8007434:	3710      	adds	r7, #16
 8007436:	46bd      	mov	sp, r7
 8007438:	bd80      	pop	{r7, pc}
	...

0800743c <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev ,
                               USBD_SetupReqTypedef *req)
{
 800743c:	b580      	push	{r7, lr}
 800743e:	b084      	sub	sp, #16
 8007440:	af00      	add	r7, sp, #0
 8007442:	6078      	str	r0, [r7, #4]
 8007444:	6039      	str	r1, [r7, #0]
  uint16_t len;
  uint8_t *pbuf;


  switch (req->wValue >> 8)
 8007446:	683b      	ldr	r3, [r7, #0]
 8007448:	885b      	ldrh	r3, [r3, #2]
 800744a:	0a1b      	lsrs	r3, r3, #8
 800744c:	b29b      	uxth	r3, r3
 800744e:	3b01      	subs	r3, #1
 8007450:	2b06      	cmp	r3, #6
 8007452:	f200 80c9 	bhi.w	80075e8 <USBD_GetDescriptor+0x1ac>
 8007456:	a201      	add	r2, pc, #4	; (adr r2, 800745c <USBD_GetDescriptor+0x20>)
 8007458:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800745c:	08007479 	.word	0x08007479
 8007460:	08007491 	.word	0x08007491
 8007464:	080074d1 	.word	0x080074d1
 8007468:	080075e9 	.word	0x080075e9
 800746c:	080075e9 	.word	0x080075e9
 8007470:	08007595 	.word	0x08007595
 8007474:	080075bb 	.word	0x080075bb
  case USB_DESC_TYPE_BOS:
    pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
    break;
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	687a      	ldr	r2, [r7, #4]
 8007482:	7c12      	ldrb	r2, [r2, #16]
 8007484:	f107 010a 	add.w	r1, r7, #10
 8007488:	4610      	mov	r0, r2
 800748a:	4798      	blx	r3
 800748c:	60f8      	str	r0, [r7, #12]
    break;
 800748e:	e0b0      	b.n	80075f2 <USBD_GetDescriptor+0x1b6>

  case USB_DESC_TYPE_CONFIGURATION:
    if(pdev->dev_speed == USBD_SPEED_HIGH )
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	7c1b      	ldrb	r3, [r3, #16]
 8007494:	2b00      	cmp	r3, #0
 8007496:	d10d      	bne.n	80074b4 <USBD_GetDescriptor+0x78>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetHSConfigDescriptor(&len);
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800749e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80074a0:	f107 020a 	add.w	r2, r7, #10
 80074a4:	4610      	mov	r0, r2
 80074a6:	4798      	blx	r3
 80074a8:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80074aa:	68fb      	ldr	r3, [r7, #12]
 80074ac:	3301      	adds	r3, #1
 80074ae:	2202      	movs	r2, #2
 80074b0:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 80074b2:	e09e      	b.n	80075f2 <USBD_GetDescriptor+0x1b6>
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80074ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074bc:	f107 020a 	add.w	r2, r7, #10
 80074c0:	4610      	mov	r0, r2
 80074c2:	4798      	blx	r3
 80074c4:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80074c6:	68fb      	ldr	r3, [r7, #12]
 80074c8:	3301      	adds	r3, #1
 80074ca:	2202      	movs	r2, #2
 80074cc:	701a      	strb	r2, [r3, #0]
    break;
 80074ce:	e090      	b.n	80075f2 <USBD_GetDescriptor+0x1b6>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 80074d0:	683b      	ldr	r3, [r7, #0]
 80074d2:	885b      	ldrh	r3, [r3, #2]
 80074d4:	b2db      	uxtb	r3, r3
 80074d6:	2b05      	cmp	r3, #5
 80074d8:	d856      	bhi.n	8007588 <USBD_GetDescriptor+0x14c>
 80074da:	a201      	add	r2, pc, #4	; (adr r2, 80074e0 <USBD_GetDescriptor+0xa4>)
 80074dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074e0:	080074f9 	.word	0x080074f9
 80074e4:	08007511 	.word	0x08007511
 80074e8:	08007529 	.word	0x08007529
 80074ec:	08007541 	.word	0x08007541
 80074f0:	08007559 	.word	0x08007559
 80074f4:	08007571 	.word	0x08007571
    {
    case USBD_IDX_LANGID_STR:
     pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 80074fe:	685b      	ldr	r3, [r3, #4]
 8007500:	687a      	ldr	r2, [r7, #4]
 8007502:	7c12      	ldrb	r2, [r2, #16]
 8007504:	f107 010a 	add.w	r1, r7, #10
 8007508:	4610      	mov	r0, r2
 800750a:	4798      	blx	r3
 800750c:	60f8      	str	r0, [r7, #12]
      break;
 800750e:	e040      	b.n	8007592 <USBD_GetDescriptor+0x156>

    case USBD_IDX_MFC_STR:
      pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 8007516:	689b      	ldr	r3, [r3, #8]
 8007518:	687a      	ldr	r2, [r7, #4]
 800751a:	7c12      	ldrb	r2, [r2, #16]
 800751c:	f107 010a 	add.w	r1, r7, #10
 8007520:	4610      	mov	r0, r2
 8007522:	4798      	blx	r3
 8007524:	60f8      	str	r0, [r7, #12]
      break;
 8007526:	e034      	b.n	8007592 <USBD_GetDescriptor+0x156>

    case USBD_IDX_PRODUCT_STR:
      pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 800752e:	68db      	ldr	r3, [r3, #12]
 8007530:	687a      	ldr	r2, [r7, #4]
 8007532:	7c12      	ldrb	r2, [r2, #16]
 8007534:	f107 010a 	add.w	r1, r7, #10
 8007538:	4610      	mov	r0, r2
 800753a:	4798      	blx	r3
 800753c:	60f8      	str	r0, [r7, #12]
      break;
 800753e:	e028      	b.n	8007592 <USBD_GetDescriptor+0x156>

    case USBD_IDX_SERIAL_STR:
      pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 8007546:	691b      	ldr	r3, [r3, #16]
 8007548:	687a      	ldr	r2, [r7, #4]
 800754a:	7c12      	ldrb	r2, [r2, #16]
 800754c:	f107 010a 	add.w	r1, r7, #10
 8007550:	4610      	mov	r0, r2
 8007552:	4798      	blx	r3
 8007554:	60f8      	str	r0, [r7, #12]
      break;
 8007556:	e01c      	b.n	8007592 <USBD_GetDescriptor+0x156>

    case USBD_IDX_CONFIG_STR:
      pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 800755e:	695b      	ldr	r3, [r3, #20]
 8007560:	687a      	ldr	r2, [r7, #4]
 8007562:	7c12      	ldrb	r2, [r2, #16]
 8007564:	f107 010a 	add.w	r1, r7, #10
 8007568:	4610      	mov	r0, r2
 800756a:	4798      	blx	r3
 800756c:	60f8      	str	r0, [r7, #12]
      break;
 800756e:	e010      	b.n	8007592 <USBD_GetDescriptor+0x156>

    case USBD_IDX_INTERFACE_STR:
      pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 8007576:	699b      	ldr	r3, [r3, #24]
 8007578:	687a      	ldr	r2, [r7, #4]
 800757a:	7c12      	ldrb	r2, [r2, #16]
 800757c:	f107 010a 	add.w	r1, r7, #10
 8007580:	4610      	mov	r0, r2
 8007582:	4798      	blx	r3
 8007584:	60f8      	str	r0, [r7, #12]
      break;
 8007586:	e004      	b.n	8007592 <USBD_GetDescriptor+0x156>
    default:
#if (USBD_SUPPORT_USER_STRING == 1U)
      pbuf = pdev->pClass->GetUsrStrDescriptor(pdev, (req->wValue) , &len);
      break;
#else
       USBD_CtlError(pdev , req);
 8007588:	6839      	ldr	r1, [r7, #0]
 800758a:	6878      	ldr	r0, [r7, #4]
 800758c:	f000 f9f9 	bl	8007982 <USBD_CtlError>
      return;
 8007590:	e04b      	b.n	800762a <USBD_GetDescriptor+0x1ee>
#endif
    }
    break;
 8007592:	e02e      	b.n	80075f2 <USBD_GetDescriptor+0x1b6>
  case USB_DESC_TYPE_DEVICE_QUALIFIER:

    if(pdev->dev_speed == USBD_SPEED_HIGH)
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	7c1b      	ldrb	r3, [r3, #16]
 8007598:	2b00      	cmp	r3, #0
 800759a:	d109      	bne.n	80075b0 <USBD_GetDescriptor+0x174>
    {
      pbuf = (uint8_t *)pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80075a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80075a4:	f107 020a 	add.w	r2, r7, #10
 80075a8:	4610      	mov	r0, r2
 80075aa:	4798      	blx	r3
 80075ac:	60f8      	str	r0, [r7, #12]
      break;
 80075ae:	e020      	b.n	80075f2 <USBD_GetDescriptor+0x1b6>
    }
    else
    {
      USBD_CtlError(pdev , req);
 80075b0:	6839      	ldr	r1, [r7, #0]
 80075b2:	6878      	ldr	r0, [r7, #4]
 80075b4:	f000 f9e5 	bl	8007982 <USBD_CtlError>
      return;
 80075b8:	e037      	b.n	800762a <USBD_GetDescriptor+0x1ee>
    }

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if(pdev->dev_speed == USBD_SPEED_HIGH  )
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	7c1b      	ldrb	r3, [r3, #16]
 80075be:	2b00      	cmp	r3, #0
 80075c0:	d10d      	bne.n	80075de <USBD_GetDescriptor+0x1a2>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80075c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80075ca:	f107 020a 	add.w	r2, r7, #10
 80075ce:	4610      	mov	r0, r2
 80075d0:	4798      	blx	r3
 80075d2:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80075d4:	68fb      	ldr	r3, [r7, #12]
 80075d6:	3301      	adds	r3, #1
 80075d8:	2207      	movs	r2, #7
 80075da:	701a      	strb	r2, [r3, #0]
      break;
 80075dc:	e009      	b.n	80075f2 <USBD_GetDescriptor+0x1b6>
    }
    else
    {
      USBD_CtlError(pdev , req);
 80075de:	6839      	ldr	r1, [r7, #0]
 80075e0:	6878      	ldr	r0, [r7, #4]
 80075e2:	f000 f9ce 	bl	8007982 <USBD_CtlError>
      return;
 80075e6:	e020      	b.n	800762a <USBD_GetDescriptor+0x1ee>
    }

  default:
     USBD_CtlError(pdev , req);
 80075e8:	6839      	ldr	r1, [r7, #0]
 80075ea:	6878      	ldr	r0, [r7, #4]
 80075ec:	f000 f9c9 	bl	8007982 <USBD_CtlError>
    return;
 80075f0:	e01b      	b.n	800762a <USBD_GetDescriptor+0x1ee>
  }

  if((len != 0U) && (req->wLength != 0U))
 80075f2:	897b      	ldrh	r3, [r7, #10]
 80075f4:	2b00      	cmp	r3, #0
 80075f6:	d011      	beq.n	800761c <USBD_GetDescriptor+0x1e0>
 80075f8:	683b      	ldr	r3, [r7, #0]
 80075fa:	88db      	ldrh	r3, [r3, #6]
 80075fc:	2b00      	cmp	r3, #0
 80075fe:	d00d      	beq.n	800761c <USBD_GetDescriptor+0x1e0>
  {

    len = MIN(len, req->wLength);
 8007600:	683b      	ldr	r3, [r7, #0]
 8007602:	88da      	ldrh	r2, [r3, #6]
 8007604:	897b      	ldrh	r3, [r7, #10]
 8007606:	4293      	cmp	r3, r2
 8007608:	bf28      	it	cs
 800760a:	4613      	movcs	r3, r2
 800760c:	b29b      	uxth	r3, r3
 800760e:	817b      	strh	r3, [r7, #10]

    USBD_CtlSendData (pdev, pbuf, len);
 8007610:	897b      	ldrh	r3, [r7, #10]
 8007612:	461a      	mov	r2, r3
 8007614:	68f9      	ldr	r1, [r7, #12]
 8007616:	6878      	ldr	r0, [r7, #4]
 8007618:	f000 fa1e 	bl	8007a58 <USBD_CtlSendData>
  }

  if(req->wLength == 0U)
 800761c:	683b      	ldr	r3, [r7, #0]
 800761e:	88db      	ldrh	r3, [r3, #6]
 8007620:	2b00      	cmp	r3, #0
 8007622:	d102      	bne.n	800762a <USBD_GetDescriptor+0x1ee>
  {
   USBD_CtlSendStatus(pdev);
 8007624:	6878      	ldr	r0, [r7, #4]
 8007626:	f000 fa75 	bl	8007b14 <USBD_CtlSendStatus>
  }
}
 800762a:	3710      	adds	r7, #16
 800762c:	46bd      	mov	sp, r7
 800762e:	bd80      	pop	{r7, pc}

08007630 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 8007630:	b580      	push	{r7, lr}
 8007632:	b084      	sub	sp, #16
 8007634:	af00      	add	r7, sp, #0
 8007636:	6078      	str	r0, [r7, #4]
 8007638:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800763a:	683b      	ldr	r3, [r7, #0]
 800763c:	889b      	ldrh	r3, [r3, #4]
 800763e:	2b00      	cmp	r3, #0
 8007640:	d130      	bne.n	80076a4 <USBD_SetAddress+0x74>
 8007642:	683b      	ldr	r3, [r7, #0]
 8007644:	88db      	ldrh	r3, [r3, #6]
 8007646:	2b00      	cmp	r3, #0
 8007648:	d12c      	bne.n	80076a4 <USBD_SetAddress+0x74>
 800764a:	683b      	ldr	r3, [r7, #0]
 800764c:	885b      	ldrh	r3, [r3, #2]
 800764e:	2b7f      	cmp	r3, #127	; 0x7f
 8007650:	d828      	bhi.n	80076a4 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8007652:	683b      	ldr	r3, [r7, #0]
 8007654:	885b      	ldrh	r3, [r3, #2]
 8007656:	b2db      	uxtb	r3, r3
 8007658:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800765c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8007664:	2b03      	cmp	r3, #3
 8007666:	d104      	bne.n	8007672 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev , req);
 8007668:	6839      	ldr	r1, [r7, #0]
 800766a:	6878      	ldr	r0, [r7, #4]
 800766c:	f000 f989 	bl	8007982 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007670:	e01c      	b.n	80076ac <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	7bfa      	ldrb	r2, [r7, #15]
 8007676:	f883 2276 	strb.w	r2, [r3, #630]	; 0x276
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 800767a:	7bfb      	ldrb	r3, [r7, #15]
 800767c:	4619      	mov	r1, r3
 800767e:	6878      	ldr	r0, [r7, #4]
 8007680:	f002 f992 	bl	80099a8 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8007684:	6878      	ldr	r0, [r7, #4]
 8007686:	f000 fa45 	bl	8007b14 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800768a:	7bfb      	ldrb	r3, [r7, #15]
 800768c:	2b00      	cmp	r3, #0
 800768e:	d004      	beq.n	800769a <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	2202      	movs	r2, #2
 8007694:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007698:	e008      	b.n	80076ac <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	2201      	movs	r2, #1
 800769e:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80076a2:	e003      	b.n	80076ac <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80076a4:	6839      	ldr	r1, [r7, #0]
 80076a6:	6878      	ldr	r0, [r7, #4]
 80076a8:	f000 f96b 	bl	8007982 <USBD_CtlError>
  }
}
 80076ac:	bf00      	nop
 80076ae:	3710      	adds	r7, #16
 80076b0:	46bd      	mov	sp, r7
 80076b2:	bd80      	pop	{r7, pc}

080076b4 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80076b4:	b580      	push	{r7, lr}
 80076b6:	b082      	sub	sp, #8
 80076b8:	af00      	add	r7, sp, #0
 80076ba:	6078      	str	r0, [r7, #4]
 80076bc:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80076be:	683b      	ldr	r3, [r7, #0]
 80076c0:	885b      	ldrh	r3, [r3, #2]
 80076c2:	b2da      	uxtb	r2, r3
 80076c4:	4b41      	ldr	r3, [pc, #260]	; (80077cc <USBD_SetConfig+0x118>)
 80076c6:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80076c8:	4b40      	ldr	r3, [pc, #256]	; (80077cc <USBD_SetConfig+0x118>)
 80076ca:	781b      	ldrb	r3, [r3, #0]
 80076cc:	2b01      	cmp	r3, #1
 80076ce:	d904      	bls.n	80076da <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 80076d0:	6839      	ldr	r1, [r7, #0]
 80076d2:	6878      	ldr	r0, [r7, #4]
 80076d4:	f000 f955 	bl	8007982 <USBD_CtlError>
 80076d8:	e075      	b.n	80077c6 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 80076e0:	2b02      	cmp	r3, #2
 80076e2:	d002      	beq.n	80076ea <USBD_SetConfig+0x36>
 80076e4:	2b03      	cmp	r3, #3
 80076e6:	d023      	beq.n	8007730 <USBD_SetConfig+0x7c>
 80076e8:	e062      	b.n	80077b0 <USBD_SetConfig+0xfc>
    {
    case USBD_STATE_ADDRESSED:
      if (cfgidx)
 80076ea:	4b38      	ldr	r3, [pc, #224]	; (80077cc <USBD_SetConfig+0x118>)
 80076ec:	781b      	ldrb	r3, [r3, #0]
 80076ee:	2b00      	cmp	r3, #0
 80076f0:	d01a      	beq.n	8007728 <USBD_SetConfig+0x74>
      {
        pdev->dev_config = cfgidx;
 80076f2:	4b36      	ldr	r3, [pc, #216]	; (80077cc <USBD_SetConfig+0x118>)
 80076f4:	781b      	ldrb	r3, [r3, #0]
 80076f6:	461a      	mov	r2, r3
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	605a      	str	r2, [r3, #4]
        pdev->dev_state = USBD_STATE_CONFIGURED;
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	2203      	movs	r2, #3
 8007700:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
        if(USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8007704:	4b31      	ldr	r3, [pc, #196]	; (80077cc <USBD_SetConfig+0x118>)
 8007706:	781b      	ldrb	r3, [r3, #0]
 8007708:	4619      	mov	r1, r3
 800770a:	6878      	ldr	r0, [r7, #4]
 800770c:	f7ff fa29 	bl	8006b62 <USBD_SetClassConfig>
 8007710:	4603      	mov	r3, r0
 8007712:	2b02      	cmp	r3, #2
 8007714:	d104      	bne.n	8007720 <USBD_SetConfig+0x6c>
        {
          USBD_CtlError(pdev, req);
 8007716:	6839      	ldr	r1, [r7, #0]
 8007718:	6878      	ldr	r0, [r7, #4]
 800771a:	f000 f932 	bl	8007982 <USBD_CtlError>
          return;
 800771e:	e052      	b.n	80077c6 <USBD_SetConfig+0x112>
        }
        USBD_CtlSendStatus(pdev);
 8007720:	6878      	ldr	r0, [r7, #4]
 8007722:	f000 f9f7 	bl	8007b14 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlSendStatus(pdev);
      }
      break;
 8007726:	e04e      	b.n	80077c6 <USBD_SetConfig+0x112>
        USBD_CtlSendStatus(pdev);
 8007728:	6878      	ldr	r0, [r7, #4]
 800772a:	f000 f9f3 	bl	8007b14 <USBD_CtlSendStatus>
      break;
 800772e:	e04a      	b.n	80077c6 <USBD_SetConfig+0x112>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8007730:	4b26      	ldr	r3, [pc, #152]	; (80077cc <USBD_SetConfig+0x118>)
 8007732:	781b      	ldrb	r3, [r3, #0]
 8007734:	2b00      	cmp	r3, #0
 8007736:	d112      	bne.n	800775e <USBD_SetConfig+0xaa>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	2202      	movs	r2, #2
 800773c:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
        pdev->dev_config = cfgidx;
 8007740:	4b22      	ldr	r3, [pc, #136]	; (80077cc <USBD_SetConfig+0x118>)
 8007742:	781b      	ldrb	r3, [r3, #0]
 8007744:	461a      	mov	r2, r3
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	605a      	str	r2, [r3, #4]
        USBD_ClrClassConfig(pdev, cfgidx);
 800774a:	4b20      	ldr	r3, [pc, #128]	; (80077cc <USBD_SetConfig+0x118>)
 800774c:	781b      	ldrb	r3, [r3, #0]
 800774e:	4619      	mov	r1, r3
 8007750:	6878      	ldr	r0, [r7, #4]
 8007752:	f7ff fa25 	bl	8006ba0 <USBD_ClrClassConfig>
        USBD_CtlSendStatus(pdev);
 8007756:	6878      	ldr	r0, [r7, #4]
 8007758:	f000 f9dc 	bl	8007b14 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlSendStatus(pdev);
      }
      break;
 800775c:	e033      	b.n	80077c6 <USBD_SetConfig+0x112>
      else if (cfgidx != pdev->dev_config)
 800775e:	4b1b      	ldr	r3, [pc, #108]	; (80077cc <USBD_SetConfig+0x118>)
 8007760:	781b      	ldrb	r3, [r3, #0]
 8007762:	461a      	mov	r2, r3
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	685b      	ldr	r3, [r3, #4]
 8007768:	429a      	cmp	r2, r3
 800776a:	d01d      	beq.n	80077a8 <USBD_SetConfig+0xf4>
        USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	685b      	ldr	r3, [r3, #4]
 8007770:	b2db      	uxtb	r3, r3
 8007772:	4619      	mov	r1, r3
 8007774:	6878      	ldr	r0, [r7, #4]
 8007776:	f7ff fa13 	bl	8006ba0 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800777a:	4b14      	ldr	r3, [pc, #80]	; (80077cc <USBD_SetConfig+0x118>)
 800777c:	781b      	ldrb	r3, [r3, #0]
 800777e:	461a      	mov	r2, r3
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	605a      	str	r2, [r3, #4]
        if(USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8007784:	4b11      	ldr	r3, [pc, #68]	; (80077cc <USBD_SetConfig+0x118>)
 8007786:	781b      	ldrb	r3, [r3, #0]
 8007788:	4619      	mov	r1, r3
 800778a:	6878      	ldr	r0, [r7, #4]
 800778c:	f7ff f9e9 	bl	8006b62 <USBD_SetClassConfig>
 8007790:	4603      	mov	r3, r0
 8007792:	2b02      	cmp	r3, #2
 8007794:	d104      	bne.n	80077a0 <USBD_SetConfig+0xec>
          USBD_CtlError(pdev, req);
 8007796:	6839      	ldr	r1, [r7, #0]
 8007798:	6878      	ldr	r0, [r7, #4]
 800779a:	f000 f8f2 	bl	8007982 <USBD_CtlError>
          return;
 800779e:	e012      	b.n	80077c6 <USBD_SetConfig+0x112>
        USBD_CtlSendStatus(pdev);
 80077a0:	6878      	ldr	r0, [r7, #4]
 80077a2:	f000 f9b7 	bl	8007b14 <USBD_CtlSendStatus>
      break;
 80077a6:	e00e      	b.n	80077c6 <USBD_SetConfig+0x112>
        USBD_CtlSendStatus(pdev);
 80077a8:	6878      	ldr	r0, [r7, #4]
 80077aa:	f000 f9b3 	bl	8007b14 <USBD_CtlSendStatus>
      break;
 80077ae:	e00a      	b.n	80077c6 <USBD_SetConfig+0x112>

    default:
      USBD_CtlError(pdev, req);
 80077b0:	6839      	ldr	r1, [r7, #0]
 80077b2:	6878      	ldr	r0, [r7, #4]
 80077b4:	f000 f8e5 	bl	8007982 <USBD_CtlError>
      USBD_ClrClassConfig(pdev, cfgidx);
 80077b8:	4b04      	ldr	r3, [pc, #16]	; (80077cc <USBD_SetConfig+0x118>)
 80077ba:	781b      	ldrb	r3, [r3, #0]
 80077bc:	4619      	mov	r1, r3
 80077be:	6878      	ldr	r0, [r7, #4]
 80077c0:	f7ff f9ee 	bl	8006ba0 <USBD_ClrClassConfig>
      break;
 80077c4:	bf00      	nop
    }
  }
}
 80077c6:	3708      	adds	r7, #8
 80077c8:	46bd      	mov	sp, r7
 80077ca:	bd80      	pop	{r7, pc}
 80077cc:	200004a4 	.word	0x200004a4

080077d0 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80077d0:	b580      	push	{r7, lr}
 80077d2:	b082      	sub	sp, #8
 80077d4:	af00      	add	r7, sp, #0
 80077d6:	6078      	str	r0, [r7, #4]
 80077d8:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80077da:	683b      	ldr	r3, [r7, #0]
 80077dc:	88db      	ldrh	r3, [r3, #6]
 80077de:	2b01      	cmp	r3, #1
 80077e0:	d004      	beq.n	80077ec <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev , req);
 80077e2:	6839      	ldr	r1, [r7, #0]
 80077e4:	6878      	ldr	r0, [r7, #4]
 80077e6:	f000 f8cc 	bl	8007982 <USBD_CtlError>
    default:
      USBD_CtlError(pdev , req);
      break;
    }
  }
}
 80077ea:	e021      	b.n	8007830 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 80077f2:	2b01      	cmp	r3, #1
 80077f4:	db17      	blt.n	8007826 <USBD_GetConfig+0x56>
 80077f6:	2b02      	cmp	r3, #2
 80077f8:	dd02      	ble.n	8007800 <USBD_GetConfig+0x30>
 80077fa:	2b03      	cmp	r3, #3
 80077fc:	d00b      	beq.n	8007816 <USBD_GetConfig+0x46>
 80077fe:	e012      	b.n	8007826 <USBD_GetConfig+0x56>
      pdev->dev_default_config = 0U;
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	2200      	movs	r2, #0
 8007804:	609a      	str	r2, [r3, #8]
      USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	3308      	adds	r3, #8
 800780a:	2201      	movs	r2, #1
 800780c:	4619      	mov	r1, r3
 800780e:	6878      	ldr	r0, [r7, #4]
 8007810:	f000 f922 	bl	8007a58 <USBD_CtlSendData>
      break;
 8007814:	e00c      	b.n	8007830 <USBD_GetConfig+0x60>
      USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	3304      	adds	r3, #4
 800781a:	2201      	movs	r2, #1
 800781c:	4619      	mov	r1, r3
 800781e:	6878      	ldr	r0, [r7, #4]
 8007820:	f000 f91a 	bl	8007a58 <USBD_CtlSendData>
      break;
 8007824:	e004      	b.n	8007830 <USBD_GetConfig+0x60>
      USBD_CtlError(pdev , req);
 8007826:	6839      	ldr	r1, [r7, #0]
 8007828:	6878      	ldr	r0, [r7, #4]
 800782a:	f000 f8aa 	bl	8007982 <USBD_CtlError>
      break;
 800782e:	bf00      	nop
}
 8007830:	bf00      	nop
 8007832:	3708      	adds	r7, #8
 8007834:	46bd      	mov	sp, r7
 8007836:	bd80      	pop	{r7, pc}

08007838 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007838:	b580      	push	{r7, lr}
 800783a:	b082      	sub	sp, #8
 800783c:	af00      	add	r7, sp, #0
 800783e:	6078      	str	r0, [r7, #4]
 8007840:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8007848:	3b01      	subs	r3, #1
 800784a:	2b02      	cmp	r3, #2
 800784c:	d81e      	bhi.n	800788c <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if(req->wLength != 0x2U)
 800784e:	683b      	ldr	r3, [r7, #0]
 8007850:	88db      	ldrh	r3, [r3, #6]
 8007852:	2b02      	cmp	r3, #2
 8007854:	d004      	beq.n	8007860 <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 8007856:	6839      	ldr	r1, [r7, #0]
 8007858:	6878      	ldr	r0, [r7, #4]
 800785a:	f000 f892 	bl	8007982 <USBD_CtlError>
      break;
 800785e:	e01a      	b.n	8007896 <USBD_GetStatus+0x5e>
    }

#if ( USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	2201      	movs	r2, #1
 8007864:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup)
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	f8d3 327c 	ldr.w	r3, [r3, #636]	; 0x27c
 800786c:	2b00      	cmp	r3, #0
 800786e:	d005      	beq.n	800787c <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	68db      	ldr	r3, [r3, #12]
 8007874:	f043 0202 	orr.w	r2, r3, #2
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	60da      	str	r2, [r3, #12]
    }

    USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	330c      	adds	r3, #12
 8007880:	2202      	movs	r2, #2
 8007882:	4619      	mov	r1, r3
 8007884:	6878      	ldr	r0, [r7, #4]
 8007886:	f000 f8e7 	bl	8007a58 <USBD_CtlSendData>
    break;
 800788a:	e004      	b.n	8007896 <USBD_GetStatus+0x5e>

  default :
    USBD_CtlError(pdev , req);
 800788c:	6839      	ldr	r1, [r7, #0]
 800788e:	6878      	ldr	r0, [r7, #4]
 8007890:	f000 f877 	bl	8007982 <USBD_CtlError>
    break;
 8007894:	bf00      	nop
  }
}
 8007896:	bf00      	nop
 8007898:	3708      	adds	r7, #8
 800789a:	46bd      	mov	sp, r7
 800789c:	bd80      	pop	{r7, pc}

0800789e <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 800789e:	b580      	push	{r7, lr}
 80078a0:	b082      	sub	sp, #8
 80078a2:	af00      	add	r7, sp, #0
 80078a4:	6078      	str	r0, [r7, #4]
 80078a6:	6039      	str	r1, [r7, #0]

  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80078a8:	683b      	ldr	r3, [r7, #0]
 80078aa:	885b      	ldrh	r3, [r3, #2]
 80078ac:	2b01      	cmp	r3, #1
 80078ae:	d106      	bne.n	80078be <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	2201      	movs	r2, #1
 80078b4:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c
    USBD_CtlSendStatus(pdev);
 80078b8:	6878      	ldr	r0, [r7, #4]
 80078ba:	f000 f92b 	bl	8007b14 <USBD_CtlSendStatus>
  }

}
 80078be:	bf00      	nop
 80078c0:	3708      	adds	r7, #8
 80078c2:	46bd      	mov	sp, r7
 80078c4:	bd80      	pop	{r7, pc}

080078c6 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 80078c6:	b580      	push	{r7, lr}
 80078c8:	b082      	sub	sp, #8
 80078ca:	af00      	add	r7, sp, #0
 80078cc:	6078      	str	r0, [r7, #4]
 80078ce:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 80078d6:	3b01      	subs	r3, #1
 80078d8:	2b02      	cmp	r3, #2
 80078da:	d80b      	bhi.n	80078f4 <USBD_ClrFeature+0x2e>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80078dc:	683b      	ldr	r3, [r7, #0]
 80078de:	885b      	ldrh	r3, [r3, #2]
 80078e0:	2b01      	cmp	r3, #1
 80078e2:	d10c      	bne.n	80078fe <USBD_ClrFeature+0x38>
    {
      pdev->dev_remote_wakeup = 0U;
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	2200      	movs	r2, #0
 80078e8:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c
      USBD_CtlSendStatus(pdev);
 80078ec:	6878      	ldr	r0, [r7, #4]
 80078ee:	f000 f911 	bl	8007b14 <USBD_CtlSendStatus>
    }
    break;
 80078f2:	e004      	b.n	80078fe <USBD_ClrFeature+0x38>

  default :
     USBD_CtlError(pdev , req);
 80078f4:	6839      	ldr	r1, [r7, #0]
 80078f6:	6878      	ldr	r0, [r7, #4]
 80078f8:	f000 f843 	bl	8007982 <USBD_CtlError>
    break;
 80078fc:	e000      	b.n	8007900 <USBD_ClrFeature+0x3a>
    break;
 80078fe:	bf00      	nop
  }
}
 8007900:	bf00      	nop
 8007902:	3708      	adds	r7, #8
 8007904:	46bd      	mov	sp, r7
 8007906:	bd80      	pop	{r7, pc}

08007908 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8007908:	b480      	push	{r7}
 800790a:	b083      	sub	sp, #12
 800790c:	af00      	add	r7, sp, #0
 800790e:	6078      	str	r0, [r7, #4]
 8007910:	6039      	str	r1, [r7, #0]
  req->bmRequest     = *(uint8_t *)  (pdata);
 8007912:	683b      	ldr	r3, [r7, #0]
 8007914:	781a      	ldrb	r2, [r3, #0]
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	701a      	strb	r2, [r3, #0]
  req->bRequest      = *(uint8_t *)  (pdata +  1);
 800791a:	683b      	ldr	r3, [r7, #0]
 800791c:	785a      	ldrb	r2, [r3, #1]
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	705a      	strb	r2, [r3, #1]
  req->wValue        = SWAPBYTE      (pdata +  2);
 8007922:	683b      	ldr	r3, [r7, #0]
 8007924:	3302      	adds	r3, #2
 8007926:	781b      	ldrb	r3, [r3, #0]
 8007928:	b29a      	uxth	r2, r3
 800792a:	683b      	ldr	r3, [r7, #0]
 800792c:	3303      	adds	r3, #3
 800792e:	781b      	ldrb	r3, [r3, #0]
 8007930:	b29b      	uxth	r3, r3
 8007932:	021b      	lsls	r3, r3, #8
 8007934:	b29b      	uxth	r3, r3
 8007936:	4413      	add	r3, r2
 8007938:	b29a      	uxth	r2, r3
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	805a      	strh	r2, [r3, #2]
  req->wIndex        = SWAPBYTE      (pdata +  4);
 800793e:	683b      	ldr	r3, [r7, #0]
 8007940:	3304      	adds	r3, #4
 8007942:	781b      	ldrb	r3, [r3, #0]
 8007944:	b29a      	uxth	r2, r3
 8007946:	683b      	ldr	r3, [r7, #0]
 8007948:	3305      	adds	r3, #5
 800794a:	781b      	ldrb	r3, [r3, #0]
 800794c:	b29b      	uxth	r3, r3
 800794e:	021b      	lsls	r3, r3, #8
 8007950:	b29b      	uxth	r3, r3
 8007952:	4413      	add	r3, r2
 8007954:	b29a      	uxth	r2, r3
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	809a      	strh	r2, [r3, #4]
  req->wLength       = SWAPBYTE      (pdata +  6);
 800795a:	683b      	ldr	r3, [r7, #0]
 800795c:	3306      	adds	r3, #6
 800795e:	781b      	ldrb	r3, [r3, #0]
 8007960:	b29a      	uxth	r2, r3
 8007962:	683b      	ldr	r3, [r7, #0]
 8007964:	3307      	adds	r3, #7
 8007966:	781b      	ldrb	r3, [r3, #0]
 8007968:	b29b      	uxth	r3, r3
 800796a:	021b      	lsls	r3, r3, #8
 800796c:	b29b      	uxth	r3, r3
 800796e:	4413      	add	r3, r2
 8007970:	b29a      	uxth	r2, r3
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	80da      	strh	r2, [r3, #6]

}
 8007976:	bf00      	nop
 8007978:	370c      	adds	r7, #12
 800797a:	46bd      	mov	sp, r7
 800797c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007980:	4770      	bx	lr

08007982 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError( USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 8007982:	b580      	push	{r7, lr}
 8007984:	b082      	sub	sp, #8
 8007986:	af00      	add	r7, sp, #0
 8007988:	6078      	str	r0, [r7, #4]
 800798a:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev , 0x80U);
 800798c:	2180      	movs	r1, #128	; 0x80
 800798e:	6878      	ldr	r0, [r7, #4]
 8007990:	f001 ffa0 	bl	80098d4 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev , 0U);
 8007994:	2100      	movs	r1, #0
 8007996:	6878      	ldr	r0, [r7, #4]
 8007998:	f001 ff9c 	bl	80098d4 <USBD_LL_StallEP>
}
 800799c:	bf00      	nop
 800799e:	3708      	adds	r7, #8
 80079a0:	46bd      	mov	sp, r7
 80079a2:	bd80      	pop	{r7, pc}

080079a4 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80079a4:	b580      	push	{r7, lr}
 80079a6:	b086      	sub	sp, #24
 80079a8:	af00      	add	r7, sp, #0
 80079aa:	60f8      	str	r0, [r7, #12]
 80079ac:	60b9      	str	r1, [r7, #8]
 80079ae:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80079b0:	2300      	movs	r3, #0
 80079b2:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 80079b4:	68fb      	ldr	r3, [r7, #12]
 80079b6:	2b00      	cmp	r3, #0
 80079b8:	d032      	beq.n	8007a20 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 80079ba:	68f8      	ldr	r0, [r7, #12]
 80079bc:	f000 f834 	bl	8007a28 <USBD_GetLen>
 80079c0:	4603      	mov	r3, r0
 80079c2:	3301      	adds	r3, #1
 80079c4:	b29b      	uxth	r3, r3
 80079c6:	005b      	lsls	r3, r3, #1
 80079c8:	b29a      	uxth	r2, r3
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 80079ce:	7dfb      	ldrb	r3, [r7, #23]
 80079d0:	1c5a      	adds	r2, r3, #1
 80079d2:	75fa      	strb	r2, [r7, #23]
 80079d4:	461a      	mov	r2, r3
 80079d6:	68bb      	ldr	r3, [r7, #8]
 80079d8:	4413      	add	r3, r2
 80079da:	687a      	ldr	r2, [r7, #4]
 80079dc:	7812      	ldrb	r2, [r2, #0]
 80079de:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 80079e0:	7dfb      	ldrb	r3, [r7, #23]
 80079e2:	1c5a      	adds	r2, r3, #1
 80079e4:	75fa      	strb	r2, [r7, #23]
 80079e6:	461a      	mov	r2, r3
 80079e8:	68bb      	ldr	r3, [r7, #8]
 80079ea:	4413      	add	r3, r2
 80079ec:	2203      	movs	r2, #3
 80079ee:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 80079f0:	e012      	b.n	8007a18 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 80079f2:	68fb      	ldr	r3, [r7, #12]
 80079f4:	1c5a      	adds	r2, r3, #1
 80079f6:	60fa      	str	r2, [r7, #12]
 80079f8:	7dfa      	ldrb	r2, [r7, #23]
 80079fa:	1c51      	adds	r1, r2, #1
 80079fc:	75f9      	strb	r1, [r7, #23]
 80079fe:	4611      	mov	r1, r2
 8007a00:	68ba      	ldr	r2, [r7, #8]
 8007a02:	440a      	add	r2, r1
 8007a04:	781b      	ldrb	r3, [r3, #0]
 8007a06:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8007a08:	7dfb      	ldrb	r3, [r7, #23]
 8007a0a:	1c5a      	adds	r2, r3, #1
 8007a0c:	75fa      	strb	r2, [r7, #23]
 8007a0e:	461a      	mov	r2, r3
 8007a10:	68bb      	ldr	r3, [r7, #8]
 8007a12:	4413      	add	r3, r2
 8007a14:	2200      	movs	r2, #0
 8007a16:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8007a18:	68fb      	ldr	r3, [r7, #12]
 8007a1a:	781b      	ldrb	r3, [r3, #0]
 8007a1c:	2b00      	cmp	r3, #0
 8007a1e:	d1e8      	bne.n	80079f2 <USBD_GetString+0x4e>
    }
  }
}
 8007a20:	bf00      	nop
 8007a22:	3718      	adds	r7, #24
 8007a24:	46bd      	mov	sp, r7
 8007a26:	bd80      	pop	{r7, pc}

08007a28 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8007a28:	b480      	push	{r7}
 8007a2a:	b085      	sub	sp, #20
 8007a2c:	af00      	add	r7, sp, #0
 8007a2e:	6078      	str	r0, [r7, #4]
    uint8_t  len = 0U;
 8007a30:	2300      	movs	r3, #0
 8007a32:	73fb      	strb	r3, [r7, #15]

    while (*buf != '\0')
 8007a34:	e005      	b.n	8007a42 <USBD_GetLen+0x1a>
    {
        len++;
 8007a36:	7bfb      	ldrb	r3, [r7, #15]
 8007a38:	3301      	adds	r3, #1
 8007a3a:	73fb      	strb	r3, [r7, #15]
        buf++;
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	3301      	adds	r3, #1
 8007a40:	607b      	str	r3, [r7, #4]
    while (*buf != '\0')
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	781b      	ldrb	r3, [r3, #0]
 8007a46:	2b00      	cmp	r3, #0
 8007a48:	d1f5      	bne.n	8007a36 <USBD_GetLen+0xe>
    }

    return len;
 8007a4a:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a4c:	4618      	mov	r0, r3
 8007a4e:	3714      	adds	r7, #20
 8007a50:	46bd      	mov	sp, r7
 8007a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a56:	4770      	bx	lr

08007a58 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                     uint16_t len)
{
 8007a58:	b580      	push	{r7, lr}
 8007a5a:	b084      	sub	sp, #16
 8007a5c:	af00      	add	r7, sp, #0
 8007a5e:	60f8      	str	r0, [r7, #12]
 8007a60:	60b9      	str	r1, [r7, #8]
 8007a62:	4613      	mov	r3, r2
 8007a64:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8007a66:	68fb      	ldr	r3, [r7, #12]
 8007a68:	2202      	movs	r2, #2
 8007a6a:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  pdev->ep_in[0].total_length = len;
 8007a6e:	88fa      	ldrh	r2, [r7, #6]
 8007a70:	68fb      	ldr	r3, [r7, #12]
 8007a72:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8007a74:	88fa      	ldrh	r2, [r7, #6]
 8007a76:	68fb      	ldr	r3, [r7, #12]
 8007a78:	621a      	str	r2, [r3, #32]

 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00U, pbuf, len);
 8007a7a:	88fb      	ldrh	r3, [r7, #6]
 8007a7c:	68ba      	ldr	r2, [r7, #8]
 8007a7e:	2100      	movs	r1, #0
 8007a80:	68f8      	ldr	r0, [r7, #12]
 8007a82:	f001 ffb0 	bl	80099e6 <USBD_LL_Transmit>

  return USBD_OK;
 8007a86:	2300      	movs	r3, #0
}
 8007a88:	4618      	mov	r0, r3
 8007a8a:	3710      	adds	r7, #16
 8007a8c:	46bd      	mov	sp, r7
 8007a8e:	bd80      	pop	{r7, pc}

08007a90 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData (USBD_HandleTypeDef *pdev,
                                             uint8_t *pbuf, uint16_t len)
{
 8007a90:	b580      	push	{r7, lr}
 8007a92:	b084      	sub	sp, #16
 8007a94:	af00      	add	r7, sp, #0
 8007a96:	60f8      	str	r0, [r7, #12]
 8007a98:	60b9      	str	r1, [r7, #8]
 8007a9a:	4613      	mov	r3, r2
 8007a9c:	80fb      	strh	r3, [r7, #6]
 /* Start the next transfer */
  USBD_LL_Transmit (pdev, 0x00U, pbuf, len);
 8007a9e:	88fb      	ldrh	r3, [r7, #6]
 8007aa0:	68ba      	ldr	r2, [r7, #8]
 8007aa2:	2100      	movs	r1, #0
 8007aa4:	68f8      	ldr	r0, [r7, #12]
 8007aa6:	f001 ff9e 	bl	80099e6 <USBD_LL_Transmit>

  return USBD_OK;
 8007aaa:	2300      	movs	r3, #0
}
 8007aac:	4618      	mov	r0, r3
 8007aae:	3710      	adds	r7, #16
 8007ab0:	46bd      	mov	sp, r7
 8007ab2:	bd80      	pop	{r7, pc}

08007ab4 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                      uint16_t len)
{
 8007ab4:	b580      	push	{r7, lr}
 8007ab6:	b084      	sub	sp, #16
 8007ab8:	af00      	add	r7, sp, #0
 8007aba:	60f8      	str	r0, [r7, #12]
 8007abc:	60b9      	str	r1, [r7, #8]
 8007abe:	4613      	mov	r3, r2
 8007ac0:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8007ac2:	68fb      	ldr	r3, [r7, #12]
 8007ac4:	2203      	movs	r2, #3
 8007ac6:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  pdev->ep_out[0].total_length = len;
 8007aca:	88fa      	ldrh	r2, [r7, #6]
 8007acc:	68fb      	ldr	r3, [r7, #12]
 8007ace:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
  pdev->ep_out[0].rem_length   = len;
 8007ad2:	88fa      	ldrh	r2, [r7, #6]
 8007ad4:	68fb      	ldr	r3, [r7, #12]
 8007ad6:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c

  /* Start the transfer */
  USBD_LL_PrepareReceive (pdev, 0U, pbuf, len);
 8007ada:	88fb      	ldrh	r3, [r7, #6]
 8007adc:	68ba      	ldr	r2, [r7, #8]
 8007ade:	2100      	movs	r1, #0
 8007ae0:	68f8      	ldr	r0, [r7, #12]
 8007ae2:	f001 ffa3 	bl	8009a2c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007ae6:	2300      	movs	r3, #0
}
 8007ae8:	4618      	mov	r0, r3
 8007aea:	3710      	adds	r7, #16
 8007aec:	46bd      	mov	sp, r7
 8007aee:	bd80      	pop	{r7, pc}

08007af0 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                       uint16_t len)
{
 8007af0:	b580      	push	{r7, lr}
 8007af2:	b084      	sub	sp, #16
 8007af4:	af00      	add	r7, sp, #0
 8007af6:	60f8      	str	r0, [r7, #12]
 8007af8:	60b9      	str	r1, [r7, #8]
 8007afa:	4613      	mov	r3, r2
 8007afc:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007afe:	88fb      	ldrh	r3, [r7, #6]
 8007b00:	68ba      	ldr	r2, [r7, #8]
 8007b02:	2100      	movs	r1, #0
 8007b04:	68f8      	ldr	r0, [r7, #12]
 8007b06:	f001 ff91 	bl	8009a2c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007b0a:	2300      	movs	r3, #0
}
 8007b0c:	4618      	mov	r0, r3
 8007b0e:	3710      	adds	r7, #16
 8007b10:	46bd      	mov	sp, r7
 8007b12:	bd80      	pop	{r7, pc}

08007b14 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus (USBD_HandleTypeDef *pdev)
{
 8007b14:	b580      	push	{r7, lr}
 8007b16:	b082      	sub	sp, #8
 8007b18:	af00      	add	r7, sp, #0
 8007b1a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	2204      	movs	r2, #4
 8007b20:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8007b24:	2300      	movs	r3, #0
 8007b26:	2200      	movs	r2, #0
 8007b28:	2100      	movs	r1, #0
 8007b2a:	6878      	ldr	r0, [r7, #4]
 8007b2c:	f001 ff5b 	bl	80099e6 <USBD_LL_Transmit>

  return USBD_OK;
 8007b30:	2300      	movs	r3, #0
}
 8007b32:	4618      	mov	r0, r3
 8007b34:	3708      	adds	r7, #8
 8007b36:	46bd      	mov	sp, r7
 8007b38:	bd80      	pop	{r7, pc}

08007b3a <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus (USBD_HandleTypeDef *pdev)
{
 8007b3a:	b580      	push	{r7, lr}
 8007b3c:	b082      	sub	sp, #8
 8007b3e:	af00      	add	r7, sp, #0
 8007b40:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	2205      	movs	r2, #5
 8007b46:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

 /* Start the transfer */
  USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 8007b4a:	2300      	movs	r3, #0
 8007b4c:	2200      	movs	r2, #0
 8007b4e:	2100      	movs	r1, #0
 8007b50:	6878      	ldr	r0, [r7, #4]
 8007b52:	f001 ff6b 	bl	8009a2c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007b56:	2300      	movs	r3, #0
}
 8007b58:	4618      	mov	r0, r3
 8007b5a:	3708      	adds	r7, #8
 8007b5c:	46bd      	mov	sp, r7
 8007b5e:	bd80      	pop	{r7, pc}

08007b60 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8007b60:	b480      	push	{r7}
 8007b62:	b085      	sub	sp, #20
 8007b64:	af00      	add	r7, sp, #0
 8007b66:	4603      	mov	r3, r0
 8007b68:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8007b6a:	2300      	movs	r3, #0
 8007b6c:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8007b6e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007b72:	2b84      	cmp	r3, #132	; 0x84
 8007b74:	d005      	beq.n	8007b82 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8007b76:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8007b7a:	68fb      	ldr	r3, [r7, #12]
 8007b7c:	4413      	add	r3, r2
 8007b7e:	3303      	adds	r3, #3
 8007b80:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8007b82:	68fb      	ldr	r3, [r7, #12]
}
 8007b84:	4618      	mov	r0, r3
 8007b86:	3714      	adds	r7, #20
 8007b88:	46bd      	mov	sp, r7
 8007b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b8e:	4770      	bx	lr

08007b90 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8007b90:	b580      	push	{r7, lr}
 8007b92:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8007b94:	f000 fad2 	bl	800813c <vTaskStartScheduler>
  
  return osOK;
 8007b98:	2300      	movs	r3, #0
}
 8007b9a:	4618      	mov	r0, r3
 8007b9c:	bd80      	pop	{r7, pc}

08007b9e <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8007b9e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007ba0:	b089      	sub	sp, #36	; 0x24
 8007ba2:	af04      	add	r7, sp, #16
 8007ba4:	6078      	str	r0, [r7, #4]
 8007ba6:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	695b      	ldr	r3, [r3, #20]
 8007bac:	2b00      	cmp	r3, #0
 8007bae:	d020      	beq.n	8007bf2 <osThreadCreate+0x54>
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	699b      	ldr	r3, [r3, #24]
 8007bb4:	2b00      	cmp	r3, #0
 8007bb6:	d01c      	beq.n	8007bf2 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	685c      	ldr	r4, [r3, #4]
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	681d      	ldr	r5, [r3, #0]
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	691e      	ldr	r6, [r3, #16]
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8007bca:	4618      	mov	r0, r3
 8007bcc:	f7ff ffc8 	bl	8007b60 <makeFreeRtosPriority>
 8007bd0:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	695b      	ldr	r3, [r3, #20]
 8007bd6:	687a      	ldr	r2, [r7, #4]
 8007bd8:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007bda:	9202      	str	r2, [sp, #8]
 8007bdc:	9301      	str	r3, [sp, #4]
 8007bde:	9100      	str	r1, [sp, #0]
 8007be0:	683b      	ldr	r3, [r7, #0]
 8007be2:	4632      	mov	r2, r6
 8007be4:	4629      	mov	r1, r5
 8007be6:	4620      	mov	r0, r4
 8007be8:	f000 f8ed 	bl	8007dc6 <xTaskCreateStatic>
 8007bec:	4603      	mov	r3, r0
 8007bee:	60fb      	str	r3, [r7, #12]
 8007bf0:	e01c      	b.n	8007c2c <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	685c      	ldr	r4, [r3, #4]
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007bfe:	b29e      	uxth	r6, r3
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8007c06:	4618      	mov	r0, r3
 8007c08:	f7ff ffaa 	bl	8007b60 <makeFreeRtosPriority>
 8007c0c:	4602      	mov	r2, r0
 8007c0e:	f107 030c 	add.w	r3, r7, #12
 8007c12:	9301      	str	r3, [sp, #4]
 8007c14:	9200      	str	r2, [sp, #0]
 8007c16:	683b      	ldr	r3, [r7, #0]
 8007c18:	4632      	mov	r2, r6
 8007c1a:	4629      	mov	r1, r5
 8007c1c:	4620      	mov	r0, r4
 8007c1e:	f000 f92b 	bl	8007e78 <xTaskCreate>
 8007c22:	4603      	mov	r3, r0
 8007c24:	2b01      	cmp	r3, #1
 8007c26:	d001      	beq.n	8007c2c <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8007c28:	2300      	movs	r3, #0
 8007c2a:	e000      	b.n	8007c2e <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8007c2c:	68fb      	ldr	r3, [r7, #12]
}
 8007c2e:	4618      	mov	r0, r3
 8007c30:	3714      	adds	r7, #20
 8007c32:	46bd      	mov	sp, r7
 8007c34:	bdf0      	pop	{r4, r5, r6, r7, pc}

08007c36 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8007c36:	b580      	push	{r7, lr}
 8007c38:	b084      	sub	sp, #16
 8007c3a:	af00      	add	r7, sp, #0
 8007c3c:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8007c42:	68fb      	ldr	r3, [r7, #12]
 8007c44:	2b00      	cmp	r3, #0
 8007c46:	d001      	beq.n	8007c4c <osDelay+0x16>
 8007c48:	68fb      	ldr	r3, [r7, #12]
 8007c4a:	e000      	b.n	8007c4e <osDelay+0x18>
 8007c4c:	2301      	movs	r3, #1
 8007c4e:	4618      	mov	r0, r3
 8007c50:	f000 fa40 	bl	80080d4 <vTaskDelay>
  
  return osOK;
 8007c54:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8007c56:	4618      	mov	r0, r3
 8007c58:	3710      	adds	r7, #16
 8007c5a:	46bd      	mov	sp, r7
 8007c5c:	bd80      	pop	{r7, pc}

08007c5e <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8007c5e:	b480      	push	{r7}
 8007c60:	b083      	sub	sp, #12
 8007c62:	af00      	add	r7, sp, #0
 8007c64:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	f103 0208 	add.w	r2, r3, #8
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007c76:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	f103 0208 	add.w	r2, r3, #8
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	f103 0208 	add.w	r2, r3, #8
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	2200      	movs	r2, #0
 8007c90:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8007c92:	bf00      	nop
 8007c94:	370c      	adds	r7, #12
 8007c96:	46bd      	mov	sp, r7
 8007c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c9c:	4770      	bx	lr

08007c9e <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8007c9e:	b480      	push	{r7}
 8007ca0:	b083      	sub	sp, #12
 8007ca2:	af00      	add	r7, sp, #0
 8007ca4:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	2200      	movs	r2, #0
 8007caa:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8007cac:	bf00      	nop
 8007cae:	370c      	adds	r7, #12
 8007cb0:	46bd      	mov	sp, r7
 8007cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cb6:	4770      	bx	lr

08007cb8 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007cb8:	b480      	push	{r7}
 8007cba:	b085      	sub	sp, #20
 8007cbc:	af00      	add	r7, sp, #0
 8007cbe:	6078      	str	r0, [r7, #4]
 8007cc0:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	685b      	ldr	r3, [r3, #4]
 8007cc6:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8007cc8:	683b      	ldr	r3, [r7, #0]
 8007cca:	68fa      	ldr	r2, [r7, #12]
 8007ccc:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8007cce:	68fb      	ldr	r3, [r7, #12]
 8007cd0:	689a      	ldr	r2, [r3, #8]
 8007cd2:	683b      	ldr	r3, [r7, #0]
 8007cd4:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8007cd6:	68fb      	ldr	r3, [r7, #12]
 8007cd8:	689b      	ldr	r3, [r3, #8]
 8007cda:	683a      	ldr	r2, [r7, #0]
 8007cdc:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8007cde:	68fb      	ldr	r3, [r7, #12]
 8007ce0:	683a      	ldr	r2, [r7, #0]
 8007ce2:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8007ce4:	683b      	ldr	r3, [r7, #0]
 8007ce6:	687a      	ldr	r2, [r7, #4]
 8007ce8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	1c5a      	adds	r2, r3, #1
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	601a      	str	r2, [r3, #0]
}
 8007cf4:	bf00      	nop
 8007cf6:	3714      	adds	r7, #20
 8007cf8:	46bd      	mov	sp, r7
 8007cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cfe:	4770      	bx	lr

08007d00 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007d00:	b480      	push	{r7}
 8007d02:	b085      	sub	sp, #20
 8007d04:	af00      	add	r7, sp, #0
 8007d06:	6078      	str	r0, [r7, #4]
 8007d08:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8007d0a:	683b      	ldr	r3, [r7, #0]
 8007d0c:	681b      	ldr	r3, [r3, #0]
 8007d0e:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8007d10:	68bb      	ldr	r3, [r7, #8]
 8007d12:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007d16:	d103      	bne.n	8007d20 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	691b      	ldr	r3, [r3, #16]
 8007d1c:	60fb      	str	r3, [r7, #12]
 8007d1e:	e00c      	b.n	8007d3a <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	3308      	adds	r3, #8
 8007d24:	60fb      	str	r3, [r7, #12]
 8007d26:	e002      	b.n	8007d2e <vListInsert+0x2e>
 8007d28:	68fb      	ldr	r3, [r7, #12]
 8007d2a:	685b      	ldr	r3, [r3, #4]
 8007d2c:	60fb      	str	r3, [r7, #12]
 8007d2e:	68fb      	ldr	r3, [r7, #12]
 8007d30:	685b      	ldr	r3, [r3, #4]
 8007d32:	681b      	ldr	r3, [r3, #0]
 8007d34:	68ba      	ldr	r2, [r7, #8]
 8007d36:	429a      	cmp	r2, r3
 8007d38:	d2f6      	bcs.n	8007d28 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8007d3a:	68fb      	ldr	r3, [r7, #12]
 8007d3c:	685a      	ldr	r2, [r3, #4]
 8007d3e:	683b      	ldr	r3, [r7, #0]
 8007d40:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8007d42:	683b      	ldr	r3, [r7, #0]
 8007d44:	685b      	ldr	r3, [r3, #4]
 8007d46:	683a      	ldr	r2, [r7, #0]
 8007d48:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8007d4a:	683b      	ldr	r3, [r7, #0]
 8007d4c:	68fa      	ldr	r2, [r7, #12]
 8007d4e:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8007d50:	68fb      	ldr	r3, [r7, #12]
 8007d52:	683a      	ldr	r2, [r7, #0]
 8007d54:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8007d56:	683b      	ldr	r3, [r7, #0]
 8007d58:	687a      	ldr	r2, [r7, #4]
 8007d5a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	1c5a      	adds	r2, r3, #1
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	601a      	str	r2, [r3, #0]
}
 8007d66:	bf00      	nop
 8007d68:	3714      	adds	r7, #20
 8007d6a:	46bd      	mov	sp, r7
 8007d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d70:	4770      	bx	lr

08007d72 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8007d72:	b480      	push	{r7}
 8007d74:	b085      	sub	sp, #20
 8007d76:	af00      	add	r7, sp, #0
 8007d78:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	691b      	ldr	r3, [r3, #16]
 8007d7e:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	685b      	ldr	r3, [r3, #4]
 8007d84:	687a      	ldr	r2, [r7, #4]
 8007d86:	6892      	ldr	r2, [r2, #8]
 8007d88:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	689b      	ldr	r3, [r3, #8]
 8007d8e:	687a      	ldr	r2, [r7, #4]
 8007d90:	6852      	ldr	r2, [r2, #4]
 8007d92:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8007d94:	68fb      	ldr	r3, [r7, #12]
 8007d96:	685b      	ldr	r3, [r3, #4]
 8007d98:	687a      	ldr	r2, [r7, #4]
 8007d9a:	429a      	cmp	r2, r3
 8007d9c:	d103      	bne.n	8007da6 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	689a      	ldr	r2, [r3, #8]
 8007da2:	68fb      	ldr	r3, [r7, #12]
 8007da4:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	2200      	movs	r2, #0
 8007daa:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8007dac:	68fb      	ldr	r3, [r7, #12]
 8007dae:	681b      	ldr	r3, [r3, #0]
 8007db0:	1e5a      	subs	r2, r3, #1
 8007db2:	68fb      	ldr	r3, [r7, #12]
 8007db4:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8007db6:	68fb      	ldr	r3, [r7, #12]
 8007db8:	681b      	ldr	r3, [r3, #0]
}
 8007dba:	4618      	mov	r0, r3
 8007dbc:	3714      	adds	r7, #20
 8007dbe:	46bd      	mov	sp, r7
 8007dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dc4:	4770      	bx	lr

08007dc6 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8007dc6:	b580      	push	{r7, lr}
 8007dc8:	b08e      	sub	sp, #56	; 0x38
 8007dca:	af04      	add	r7, sp, #16
 8007dcc:	60f8      	str	r0, [r7, #12]
 8007dce:	60b9      	str	r1, [r7, #8]
 8007dd0:	607a      	str	r2, [r7, #4]
 8007dd2:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8007dd4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007dd6:	2b00      	cmp	r3, #0
 8007dd8:	d109      	bne.n	8007dee <xTaskCreateStatic+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8007dda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007dde:	f383 8811 	msr	BASEPRI, r3
 8007de2:	f3bf 8f6f 	isb	sy
 8007de6:	f3bf 8f4f 	dsb	sy
 8007dea:	623b      	str	r3, [r7, #32]
 8007dec:	e7fe      	b.n	8007dec <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 8007dee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007df0:	2b00      	cmp	r3, #0
 8007df2:	d109      	bne.n	8007e08 <xTaskCreateStatic+0x42>
 8007df4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007df8:	f383 8811 	msr	BASEPRI, r3
 8007dfc:	f3bf 8f6f 	isb	sy
 8007e00:	f3bf 8f4f 	dsb	sy
 8007e04:	61fb      	str	r3, [r7, #28]
 8007e06:	e7fe      	b.n	8007e06 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8007e08:	2354      	movs	r3, #84	; 0x54
 8007e0a:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8007e0c:	693b      	ldr	r3, [r7, #16]
 8007e0e:	2b54      	cmp	r3, #84	; 0x54
 8007e10:	d009      	beq.n	8007e26 <xTaskCreateStatic+0x60>
 8007e12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e16:	f383 8811 	msr	BASEPRI, r3
 8007e1a:	f3bf 8f6f 	isb	sy
 8007e1e:	f3bf 8f4f 	dsb	sy
 8007e22:	61bb      	str	r3, [r7, #24]
 8007e24:	e7fe      	b.n	8007e24 <xTaskCreateStatic+0x5e>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8007e26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e28:	2b00      	cmp	r3, #0
 8007e2a:	d01e      	beq.n	8007e6a <xTaskCreateStatic+0xa4>
 8007e2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007e2e:	2b00      	cmp	r3, #0
 8007e30:	d01b      	beq.n	8007e6a <xTaskCreateStatic+0xa4>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007e32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e34:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8007e36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e38:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007e3a:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8007e3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e3e:	2202      	movs	r2, #2
 8007e40:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8007e44:	2300      	movs	r3, #0
 8007e46:	9303      	str	r3, [sp, #12]
 8007e48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e4a:	9302      	str	r3, [sp, #8]
 8007e4c:	f107 0314 	add.w	r3, r7, #20
 8007e50:	9301      	str	r3, [sp, #4]
 8007e52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e54:	9300      	str	r3, [sp, #0]
 8007e56:	683b      	ldr	r3, [r7, #0]
 8007e58:	687a      	ldr	r2, [r7, #4]
 8007e5a:	68b9      	ldr	r1, [r7, #8]
 8007e5c:	68f8      	ldr	r0, [r7, #12]
 8007e5e:	f000 f850 	bl	8007f02 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007e62:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007e64:	f000 f8cc 	bl	8008000 <prvAddNewTaskToReadyList>
 8007e68:	e001      	b.n	8007e6e <xTaskCreateStatic+0xa8>
		}
		else
		{
			xReturn = NULL;
 8007e6a:	2300      	movs	r3, #0
 8007e6c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8007e6e:	697b      	ldr	r3, [r7, #20]
	}
 8007e70:	4618      	mov	r0, r3
 8007e72:	3728      	adds	r7, #40	; 0x28
 8007e74:	46bd      	mov	sp, r7
 8007e76:	bd80      	pop	{r7, pc}

08007e78 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8007e78:	b580      	push	{r7, lr}
 8007e7a:	b08c      	sub	sp, #48	; 0x30
 8007e7c:	af04      	add	r7, sp, #16
 8007e7e:	60f8      	str	r0, [r7, #12]
 8007e80:	60b9      	str	r1, [r7, #8]
 8007e82:	603b      	str	r3, [r7, #0]
 8007e84:	4613      	mov	r3, r2
 8007e86:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007e88:	88fb      	ldrh	r3, [r7, #6]
 8007e8a:	009b      	lsls	r3, r3, #2
 8007e8c:	4618      	mov	r0, r3
 8007e8e:	f000 ff7f 	bl	8008d90 <pvPortMalloc>
 8007e92:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8007e94:	697b      	ldr	r3, [r7, #20]
 8007e96:	2b00      	cmp	r3, #0
 8007e98:	d00e      	beq.n	8007eb8 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8007e9a:	2054      	movs	r0, #84	; 0x54
 8007e9c:	f000 ff78 	bl	8008d90 <pvPortMalloc>
 8007ea0:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8007ea2:	69fb      	ldr	r3, [r7, #28]
 8007ea4:	2b00      	cmp	r3, #0
 8007ea6:	d003      	beq.n	8007eb0 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8007ea8:	69fb      	ldr	r3, [r7, #28]
 8007eaa:	697a      	ldr	r2, [r7, #20]
 8007eac:	631a      	str	r2, [r3, #48]	; 0x30
 8007eae:	e005      	b.n	8007ebc <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8007eb0:	6978      	ldr	r0, [r7, #20]
 8007eb2:	f001 f82f 	bl	8008f14 <vPortFree>
 8007eb6:	e001      	b.n	8007ebc <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8007eb8:	2300      	movs	r3, #0
 8007eba:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8007ebc:	69fb      	ldr	r3, [r7, #28]
 8007ebe:	2b00      	cmp	r3, #0
 8007ec0:	d017      	beq.n	8007ef2 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8007ec2:	69fb      	ldr	r3, [r7, #28]
 8007ec4:	2200      	movs	r2, #0
 8007ec6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8007eca:	88fa      	ldrh	r2, [r7, #6]
 8007ecc:	2300      	movs	r3, #0
 8007ece:	9303      	str	r3, [sp, #12]
 8007ed0:	69fb      	ldr	r3, [r7, #28]
 8007ed2:	9302      	str	r3, [sp, #8]
 8007ed4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ed6:	9301      	str	r3, [sp, #4]
 8007ed8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007eda:	9300      	str	r3, [sp, #0]
 8007edc:	683b      	ldr	r3, [r7, #0]
 8007ede:	68b9      	ldr	r1, [r7, #8]
 8007ee0:	68f8      	ldr	r0, [r7, #12]
 8007ee2:	f000 f80e 	bl	8007f02 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007ee6:	69f8      	ldr	r0, [r7, #28]
 8007ee8:	f000 f88a 	bl	8008000 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8007eec:	2301      	movs	r3, #1
 8007eee:	61bb      	str	r3, [r7, #24]
 8007ef0:	e002      	b.n	8007ef8 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8007ef2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007ef6:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8007ef8:	69bb      	ldr	r3, [r7, #24]
	}
 8007efa:	4618      	mov	r0, r3
 8007efc:	3720      	adds	r7, #32
 8007efe:	46bd      	mov	sp, r7
 8007f00:	bd80      	pop	{r7, pc}

08007f02 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8007f02:	b580      	push	{r7, lr}
 8007f04:	b088      	sub	sp, #32
 8007f06:	af00      	add	r7, sp, #0
 8007f08:	60f8      	str	r0, [r7, #12]
 8007f0a:	60b9      	str	r1, [r7, #8]
 8007f0c:	607a      	str	r2, [r7, #4]
 8007f0e:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8007f10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f12:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8007f1a:	3b01      	subs	r3, #1
 8007f1c:	009b      	lsls	r3, r3, #2
 8007f1e:	4413      	add	r3, r2
 8007f20:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8007f22:	69bb      	ldr	r3, [r7, #24]
 8007f24:	f023 0307 	bic.w	r3, r3, #7
 8007f28:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8007f2a:	69bb      	ldr	r3, [r7, #24]
 8007f2c:	f003 0307 	and.w	r3, r3, #7
 8007f30:	2b00      	cmp	r3, #0
 8007f32:	d009      	beq.n	8007f48 <prvInitialiseNewTask+0x46>
 8007f34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f38:	f383 8811 	msr	BASEPRI, r3
 8007f3c:	f3bf 8f6f 	isb	sy
 8007f40:	f3bf 8f4f 	dsb	sy
 8007f44:	617b      	str	r3, [r7, #20]
 8007f46:	e7fe      	b.n	8007f46 <prvInitialiseNewTask+0x44>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007f48:	2300      	movs	r3, #0
 8007f4a:	61fb      	str	r3, [r7, #28]
 8007f4c:	e012      	b.n	8007f74 <prvInitialiseNewTask+0x72>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8007f4e:	68ba      	ldr	r2, [r7, #8]
 8007f50:	69fb      	ldr	r3, [r7, #28]
 8007f52:	4413      	add	r3, r2
 8007f54:	7819      	ldrb	r1, [r3, #0]
 8007f56:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007f58:	69fb      	ldr	r3, [r7, #28]
 8007f5a:	4413      	add	r3, r2
 8007f5c:	3334      	adds	r3, #52	; 0x34
 8007f5e:	460a      	mov	r2, r1
 8007f60:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8007f62:	68ba      	ldr	r2, [r7, #8]
 8007f64:	69fb      	ldr	r3, [r7, #28]
 8007f66:	4413      	add	r3, r2
 8007f68:	781b      	ldrb	r3, [r3, #0]
 8007f6a:	2b00      	cmp	r3, #0
 8007f6c:	d006      	beq.n	8007f7c <prvInitialiseNewTask+0x7a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007f6e:	69fb      	ldr	r3, [r7, #28]
 8007f70:	3301      	adds	r3, #1
 8007f72:	61fb      	str	r3, [r7, #28]
 8007f74:	69fb      	ldr	r3, [r7, #28]
 8007f76:	2b0f      	cmp	r3, #15
 8007f78:	d9e9      	bls.n	8007f4e <prvInitialiseNewTask+0x4c>
 8007f7a:	e000      	b.n	8007f7e <prvInitialiseNewTask+0x7c>
		{
			break;
 8007f7c:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8007f7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f80:	2200      	movs	r2, #0
 8007f82:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8007f86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f88:	2b06      	cmp	r3, #6
 8007f8a:	d901      	bls.n	8007f90 <prvInitialiseNewTask+0x8e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8007f8c:	2306      	movs	r3, #6
 8007f8e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8007f90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f92:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007f94:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8007f96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f98:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007f9a:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8007f9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f9e:	2200      	movs	r2, #0
 8007fa0:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8007fa2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fa4:	3304      	adds	r3, #4
 8007fa6:	4618      	mov	r0, r3
 8007fa8:	f7ff fe79 	bl	8007c9e <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8007fac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fae:	3318      	adds	r3, #24
 8007fb0:	4618      	mov	r0, r3
 8007fb2:	f7ff fe74 	bl	8007c9e <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8007fb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fb8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007fba:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007fbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007fbe:	f1c3 0207 	rsb	r2, r3, #7
 8007fc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fc4:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8007fc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fc8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007fca:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8007fcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fce:	2200      	movs	r2, #0
 8007fd0:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8007fd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fd4:	2200      	movs	r2, #0
 8007fd6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8007fda:	683a      	ldr	r2, [r7, #0]
 8007fdc:	68f9      	ldr	r1, [r7, #12]
 8007fde:	69b8      	ldr	r0, [r7, #24]
 8007fe0:	f000 fc98 	bl	8008914 <pxPortInitialiseStack>
 8007fe4:	4602      	mov	r2, r0
 8007fe6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fe8:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8007fea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007fec:	2b00      	cmp	r3, #0
 8007fee:	d002      	beq.n	8007ff6 <prvInitialiseNewTask+0xf4>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8007ff0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ff2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007ff4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007ff6:	bf00      	nop
 8007ff8:	3720      	adds	r7, #32
 8007ffa:	46bd      	mov	sp, r7
 8007ffc:	bd80      	pop	{r7, pc}
	...

08008000 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8008000:	b580      	push	{r7, lr}
 8008002:	b082      	sub	sp, #8
 8008004:	af00      	add	r7, sp, #0
 8008006:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8008008:	f000 fda8 	bl	8008b5c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800800c:	4b2a      	ldr	r3, [pc, #168]	; (80080b8 <prvAddNewTaskToReadyList+0xb8>)
 800800e:	681b      	ldr	r3, [r3, #0]
 8008010:	3301      	adds	r3, #1
 8008012:	4a29      	ldr	r2, [pc, #164]	; (80080b8 <prvAddNewTaskToReadyList+0xb8>)
 8008014:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8008016:	4b29      	ldr	r3, [pc, #164]	; (80080bc <prvAddNewTaskToReadyList+0xbc>)
 8008018:	681b      	ldr	r3, [r3, #0]
 800801a:	2b00      	cmp	r3, #0
 800801c:	d109      	bne.n	8008032 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800801e:	4a27      	ldr	r2, [pc, #156]	; (80080bc <prvAddNewTaskToReadyList+0xbc>)
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8008024:	4b24      	ldr	r3, [pc, #144]	; (80080b8 <prvAddNewTaskToReadyList+0xb8>)
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	2b01      	cmp	r3, #1
 800802a:	d110      	bne.n	800804e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800802c:	f000 fabc 	bl	80085a8 <prvInitialiseTaskLists>
 8008030:	e00d      	b.n	800804e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8008032:	4b23      	ldr	r3, [pc, #140]	; (80080c0 <prvAddNewTaskToReadyList+0xc0>)
 8008034:	681b      	ldr	r3, [r3, #0]
 8008036:	2b00      	cmp	r3, #0
 8008038:	d109      	bne.n	800804e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800803a:	4b20      	ldr	r3, [pc, #128]	; (80080bc <prvAddNewTaskToReadyList+0xbc>)
 800803c:	681b      	ldr	r3, [r3, #0]
 800803e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008044:	429a      	cmp	r2, r3
 8008046:	d802      	bhi.n	800804e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8008048:	4a1c      	ldr	r2, [pc, #112]	; (80080bc <prvAddNewTaskToReadyList+0xbc>)
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800804e:	4b1d      	ldr	r3, [pc, #116]	; (80080c4 <prvAddNewTaskToReadyList+0xc4>)
 8008050:	681b      	ldr	r3, [r3, #0]
 8008052:	3301      	adds	r3, #1
 8008054:	4a1b      	ldr	r2, [pc, #108]	; (80080c4 <prvAddNewTaskToReadyList+0xc4>)
 8008056:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800805c:	2201      	movs	r2, #1
 800805e:	409a      	lsls	r2, r3
 8008060:	4b19      	ldr	r3, [pc, #100]	; (80080c8 <prvAddNewTaskToReadyList+0xc8>)
 8008062:	681b      	ldr	r3, [r3, #0]
 8008064:	4313      	orrs	r3, r2
 8008066:	4a18      	ldr	r2, [pc, #96]	; (80080c8 <prvAddNewTaskToReadyList+0xc8>)
 8008068:	6013      	str	r3, [r2, #0]
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800806e:	4613      	mov	r3, r2
 8008070:	009b      	lsls	r3, r3, #2
 8008072:	4413      	add	r3, r2
 8008074:	009b      	lsls	r3, r3, #2
 8008076:	4a15      	ldr	r2, [pc, #84]	; (80080cc <prvAddNewTaskToReadyList+0xcc>)
 8008078:	441a      	add	r2, r3
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	3304      	adds	r3, #4
 800807e:	4619      	mov	r1, r3
 8008080:	4610      	mov	r0, r2
 8008082:	f7ff fe19 	bl	8007cb8 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8008086:	f000 fd97 	bl	8008bb8 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800808a:	4b0d      	ldr	r3, [pc, #52]	; (80080c0 <prvAddNewTaskToReadyList+0xc0>)
 800808c:	681b      	ldr	r3, [r3, #0]
 800808e:	2b00      	cmp	r3, #0
 8008090:	d00e      	beq.n	80080b0 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8008092:	4b0a      	ldr	r3, [pc, #40]	; (80080bc <prvAddNewTaskToReadyList+0xbc>)
 8008094:	681b      	ldr	r3, [r3, #0]
 8008096:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800809c:	429a      	cmp	r2, r3
 800809e:	d207      	bcs.n	80080b0 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80080a0:	4b0b      	ldr	r3, [pc, #44]	; (80080d0 <prvAddNewTaskToReadyList+0xd0>)
 80080a2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80080a6:	601a      	str	r2, [r3, #0]
 80080a8:	f3bf 8f4f 	dsb	sy
 80080ac:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80080b0:	bf00      	nop
 80080b2:	3708      	adds	r7, #8
 80080b4:	46bd      	mov	sp, r7
 80080b6:	bd80      	pop	{r7, pc}
 80080b8:	200005a8 	.word	0x200005a8
 80080bc:	200004a8 	.word	0x200004a8
 80080c0:	200005b4 	.word	0x200005b4
 80080c4:	200005c4 	.word	0x200005c4
 80080c8:	200005b0 	.word	0x200005b0
 80080cc:	200004ac 	.word	0x200004ac
 80080d0:	e000ed04 	.word	0xe000ed04

080080d4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80080d4:	b580      	push	{r7, lr}
 80080d6:	b084      	sub	sp, #16
 80080d8:	af00      	add	r7, sp, #0
 80080da:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80080dc:	2300      	movs	r3, #0
 80080de:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	2b00      	cmp	r3, #0
 80080e4:	d016      	beq.n	8008114 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80080e6:	4b13      	ldr	r3, [pc, #76]	; (8008134 <vTaskDelay+0x60>)
 80080e8:	681b      	ldr	r3, [r3, #0]
 80080ea:	2b00      	cmp	r3, #0
 80080ec:	d009      	beq.n	8008102 <vTaskDelay+0x2e>
 80080ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080f2:	f383 8811 	msr	BASEPRI, r3
 80080f6:	f3bf 8f6f 	isb	sy
 80080fa:	f3bf 8f4f 	dsb	sy
 80080fe:	60bb      	str	r3, [r7, #8]
 8008100:	e7fe      	b.n	8008100 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 8008102:	f000 f879 	bl	80081f8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8008106:	2100      	movs	r1, #0
 8008108:	6878      	ldr	r0, [r7, #4]
 800810a:	f000 fb9d 	bl	8008848 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800810e:	f000 f881 	bl	8008214 <xTaskResumeAll>
 8008112:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8008114:	68fb      	ldr	r3, [r7, #12]
 8008116:	2b00      	cmp	r3, #0
 8008118:	d107      	bne.n	800812a <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 800811a:	4b07      	ldr	r3, [pc, #28]	; (8008138 <vTaskDelay+0x64>)
 800811c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008120:	601a      	str	r2, [r3, #0]
 8008122:	f3bf 8f4f 	dsb	sy
 8008126:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800812a:	bf00      	nop
 800812c:	3710      	adds	r7, #16
 800812e:	46bd      	mov	sp, r7
 8008130:	bd80      	pop	{r7, pc}
 8008132:	bf00      	nop
 8008134:	200005d0 	.word	0x200005d0
 8008138:	e000ed04 	.word	0xe000ed04

0800813c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800813c:	b580      	push	{r7, lr}
 800813e:	b08a      	sub	sp, #40	; 0x28
 8008140:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8008142:	2300      	movs	r3, #0
 8008144:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8008146:	2300      	movs	r3, #0
 8008148:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800814a:	463a      	mov	r2, r7
 800814c:	1d39      	adds	r1, r7, #4
 800814e:	f107 0308 	add.w	r3, r7, #8
 8008152:	4618      	mov	r0, r3
 8008154:	f7f8 fada 	bl	800070c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8008158:	6839      	ldr	r1, [r7, #0]
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	68ba      	ldr	r2, [r7, #8]
 800815e:	9202      	str	r2, [sp, #8]
 8008160:	9301      	str	r3, [sp, #4]
 8008162:	2300      	movs	r3, #0
 8008164:	9300      	str	r3, [sp, #0]
 8008166:	2300      	movs	r3, #0
 8008168:	460a      	mov	r2, r1
 800816a:	491d      	ldr	r1, [pc, #116]	; (80081e0 <vTaskStartScheduler+0xa4>)
 800816c:	481d      	ldr	r0, [pc, #116]	; (80081e4 <vTaskStartScheduler+0xa8>)
 800816e:	f7ff fe2a 	bl	8007dc6 <xTaskCreateStatic>
 8008172:	4602      	mov	r2, r0
 8008174:	4b1c      	ldr	r3, [pc, #112]	; (80081e8 <vTaskStartScheduler+0xac>)
 8008176:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8008178:	4b1b      	ldr	r3, [pc, #108]	; (80081e8 <vTaskStartScheduler+0xac>)
 800817a:	681b      	ldr	r3, [r3, #0]
 800817c:	2b00      	cmp	r3, #0
 800817e:	d002      	beq.n	8008186 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8008180:	2301      	movs	r3, #1
 8008182:	617b      	str	r3, [r7, #20]
 8008184:	e001      	b.n	800818a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8008186:	2300      	movs	r3, #0
 8008188:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800818a:	697b      	ldr	r3, [r7, #20]
 800818c:	2b01      	cmp	r3, #1
 800818e:	d115      	bne.n	80081bc <vTaskStartScheduler+0x80>
 8008190:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008194:	f383 8811 	msr	BASEPRI, r3
 8008198:	f3bf 8f6f 	isb	sy
 800819c:	f3bf 8f4f 	dsb	sy
 80081a0:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80081a2:	4b12      	ldr	r3, [pc, #72]	; (80081ec <vTaskStartScheduler+0xb0>)
 80081a4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80081a8:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80081aa:	4b11      	ldr	r3, [pc, #68]	; (80081f0 <vTaskStartScheduler+0xb4>)
 80081ac:	2201      	movs	r2, #1
 80081ae:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 80081b0:	4b10      	ldr	r3, [pc, #64]	; (80081f4 <vTaskStartScheduler+0xb8>)
 80081b2:	2200      	movs	r2, #0
 80081b4:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80081b6:	f000 fc33 	bl	8008a20 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80081ba:	e00d      	b.n	80081d8 <vTaskStartScheduler+0x9c>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80081bc:	697b      	ldr	r3, [r7, #20]
 80081be:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80081c2:	d109      	bne.n	80081d8 <vTaskStartScheduler+0x9c>
 80081c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081c8:	f383 8811 	msr	BASEPRI, r3
 80081cc:	f3bf 8f6f 	isb	sy
 80081d0:	f3bf 8f4f 	dsb	sy
 80081d4:	60fb      	str	r3, [r7, #12]
 80081d6:	e7fe      	b.n	80081d6 <vTaskStartScheduler+0x9a>
}
 80081d8:	bf00      	nop
 80081da:	3718      	adds	r7, #24
 80081dc:	46bd      	mov	sp, r7
 80081de:	bd80      	pop	{r7, pc}
 80081e0:	08009dd0 	.word	0x08009dd0
 80081e4:	08008579 	.word	0x08008579
 80081e8:	200005cc 	.word	0x200005cc
 80081ec:	200005c8 	.word	0x200005c8
 80081f0:	200005b4 	.word	0x200005b4
 80081f4:	200005ac 	.word	0x200005ac

080081f8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80081f8:	b480      	push	{r7}
 80081fa:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80081fc:	4b04      	ldr	r3, [pc, #16]	; (8008210 <vTaskSuspendAll+0x18>)
 80081fe:	681b      	ldr	r3, [r3, #0]
 8008200:	3301      	adds	r3, #1
 8008202:	4a03      	ldr	r2, [pc, #12]	; (8008210 <vTaskSuspendAll+0x18>)
 8008204:	6013      	str	r3, [r2, #0]
}
 8008206:	bf00      	nop
 8008208:	46bd      	mov	sp, r7
 800820a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800820e:	4770      	bx	lr
 8008210:	200005d0 	.word	0x200005d0

08008214 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8008214:	b580      	push	{r7, lr}
 8008216:	b084      	sub	sp, #16
 8008218:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800821a:	2300      	movs	r3, #0
 800821c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800821e:	2300      	movs	r3, #0
 8008220:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8008222:	4b41      	ldr	r3, [pc, #260]	; (8008328 <xTaskResumeAll+0x114>)
 8008224:	681b      	ldr	r3, [r3, #0]
 8008226:	2b00      	cmp	r3, #0
 8008228:	d109      	bne.n	800823e <xTaskResumeAll+0x2a>
 800822a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800822e:	f383 8811 	msr	BASEPRI, r3
 8008232:	f3bf 8f6f 	isb	sy
 8008236:	f3bf 8f4f 	dsb	sy
 800823a:	603b      	str	r3, [r7, #0]
 800823c:	e7fe      	b.n	800823c <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800823e:	f000 fc8d 	bl	8008b5c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8008242:	4b39      	ldr	r3, [pc, #228]	; (8008328 <xTaskResumeAll+0x114>)
 8008244:	681b      	ldr	r3, [r3, #0]
 8008246:	3b01      	subs	r3, #1
 8008248:	4a37      	ldr	r2, [pc, #220]	; (8008328 <xTaskResumeAll+0x114>)
 800824a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800824c:	4b36      	ldr	r3, [pc, #216]	; (8008328 <xTaskResumeAll+0x114>)
 800824e:	681b      	ldr	r3, [r3, #0]
 8008250:	2b00      	cmp	r3, #0
 8008252:	d161      	bne.n	8008318 <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8008254:	4b35      	ldr	r3, [pc, #212]	; (800832c <xTaskResumeAll+0x118>)
 8008256:	681b      	ldr	r3, [r3, #0]
 8008258:	2b00      	cmp	r3, #0
 800825a:	d05d      	beq.n	8008318 <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800825c:	e02e      	b.n	80082bc <xTaskResumeAll+0xa8>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 800825e:	4b34      	ldr	r3, [pc, #208]	; (8008330 <xTaskResumeAll+0x11c>)
 8008260:	68db      	ldr	r3, [r3, #12]
 8008262:	68db      	ldr	r3, [r3, #12]
 8008264:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008266:	68fb      	ldr	r3, [r7, #12]
 8008268:	3318      	adds	r3, #24
 800826a:	4618      	mov	r0, r3
 800826c:	f7ff fd81 	bl	8007d72 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008270:	68fb      	ldr	r3, [r7, #12]
 8008272:	3304      	adds	r3, #4
 8008274:	4618      	mov	r0, r3
 8008276:	f7ff fd7c 	bl	8007d72 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800827a:	68fb      	ldr	r3, [r7, #12]
 800827c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800827e:	2201      	movs	r2, #1
 8008280:	409a      	lsls	r2, r3
 8008282:	4b2c      	ldr	r3, [pc, #176]	; (8008334 <xTaskResumeAll+0x120>)
 8008284:	681b      	ldr	r3, [r3, #0]
 8008286:	4313      	orrs	r3, r2
 8008288:	4a2a      	ldr	r2, [pc, #168]	; (8008334 <xTaskResumeAll+0x120>)
 800828a:	6013      	str	r3, [r2, #0]
 800828c:	68fb      	ldr	r3, [r7, #12]
 800828e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008290:	4613      	mov	r3, r2
 8008292:	009b      	lsls	r3, r3, #2
 8008294:	4413      	add	r3, r2
 8008296:	009b      	lsls	r3, r3, #2
 8008298:	4a27      	ldr	r2, [pc, #156]	; (8008338 <xTaskResumeAll+0x124>)
 800829a:	441a      	add	r2, r3
 800829c:	68fb      	ldr	r3, [r7, #12]
 800829e:	3304      	adds	r3, #4
 80082a0:	4619      	mov	r1, r3
 80082a2:	4610      	mov	r0, r2
 80082a4:	f7ff fd08 	bl	8007cb8 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80082a8:	68fb      	ldr	r3, [r7, #12]
 80082aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80082ac:	4b23      	ldr	r3, [pc, #140]	; (800833c <xTaskResumeAll+0x128>)
 80082ae:	681b      	ldr	r3, [r3, #0]
 80082b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80082b2:	429a      	cmp	r2, r3
 80082b4:	d302      	bcc.n	80082bc <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 80082b6:	4b22      	ldr	r3, [pc, #136]	; (8008340 <xTaskResumeAll+0x12c>)
 80082b8:	2201      	movs	r2, #1
 80082ba:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80082bc:	4b1c      	ldr	r3, [pc, #112]	; (8008330 <xTaskResumeAll+0x11c>)
 80082be:	681b      	ldr	r3, [r3, #0]
 80082c0:	2b00      	cmp	r3, #0
 80082c2:	d1cc      	bne.n	800825e <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80082c4:	68fb      	ldr	r3, [r7, #12]
 80082c6:	2b00      	cmp	r3, #0
 80082c8:	d001      	beq.n	80082ce <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80082ca:	f000 fa07 	bl	80086dc <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80082ce:	4b1d      	ldr	r3, [pc, #116]	; (8008344 <xTaskResumeAll+0x130>)
 80082d0:	681b      	ldr	r3, [r3, #0]
 80082d2:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	2b00      	cmp	r3, #0
 80082d8:	d010      	beq.n	80082fc <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80082da:	f000 f837 	bl	800834c <xTaskIncrementTick>
 80082de:	4603      	mov	r3, r0
 80082e0:	2b00      	cmp	r3, #0
 80082e2:	d002      	beq.n	80082ea <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 80082e4:	4b16      	ldr	r3, [pc, #88]	; (8008340 <xTaskResumeAll+0x12c>)
 80082e6:	2201      	movs	r2, #1
 80082e8:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	3b01      	subs	r3, #1
 80082ee:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	2b00      	cmp	r3, #0
 80082f4:	d1f1      	bne.n	80082da <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 80082f6:	4b13      	ldr	r3, [pc, #76]	; (8008344 <xTaskResumeAll+0x130>)
 80082f8:	2200      	movs	r2, #0
 80082fa:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80082fc:	4b10      	ldr	r3, [pc, #64]	; (8008340 <xTaskResumeAll+0x12c>)
 80082fe:	681b      	ldr	r3, [r3, #0]
 8008300:	2b00      	cmp	r3, #0
 8008302:	d009      	beq.n	8008318 <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8008304:	2301      	movs	r3, #1
 8008306:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8008308:	4b0f      	ldr	r3, [pc, #60]	; (8008348 <xTaskResumeAll+0x134>)
 800830a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800830e:	601a      	str	r2, [r3, #0]
 8008310:	f3bf 8f4f 	dsb	sy
 8008314:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008318:	f000 fc4e 	bl	8008bb8 <vPortExitCritical>

	return xAlreadyYielded;
 800831c:	68bb      	ldr	r3, [r7, #8]
}
 800831e:	4618      	mov	r0, r3
 8008320:	3710      	adds	r7, #16
 8008322:	46bd      	mov	sp, r7
 8008324:	bd80      	pop	{r7, pc}
 8008326:	bf00      	nop
 8008328:	200005d0 	.word	0x200005d0
 800832c:	200005a8 	.word	0x200005a8
 8008330:	20000568 	.word	0x20000568
 8008334:	200005b0 	.word	0x200005b0
 8008338:	200004ac 	.word	0x200004ac
 800833c:	200004a8 	.word	0x200004a8
 8008340:	200005bc 	.word	0x200005bc
 8008344:	200005b8 	.word	0x200005b8
 8008348:	e000ed04 	.word	0xe000ed04

0800834c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800834c:	b580      	push	{r7, lr}
 800834e:	b086      	sub	sp, #24
 8008350:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8008352:	2300      	movs	r3, #0
 8008354:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008356:	4b50      	ldr	r3, [pc, #320]	; (8008498 <xTaskIncrementTick+0x14c>)
 8008358:	681b      	ldr	r3, [r3, #0]
 800835a:	2b00      	cmp	r3, #0
 800835c:	f040 808c 	bne.w	8008478 <xTaskIncrementTick+0x12c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8008360:	4b4e      	ldr	r3, [pc, #312]	; (800849c <xTaskIncrementTick+0x150>)
 8008362:	681b      	ldr	r3, [r3, #0]
 8008364:	3301      	adds	r3, #1
 8008366:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8008368:	4a4c      	ldr	r2, [pc, #304]	; (800849c <xTaskIncrementTick+0x150>)
 800836a:	693b      	ldr	r3, [r7, #16]
 800836c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800836e:	693b      	ldr	r3, [r7, #16]
 8008370:	2b00      	cmp	r3, #0
 8008372:	d11f      	bne.n	80083b4 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8008374:	4b4a      	ldr	r3, [pc, #296]	; (80084a0 <xTaskIncrementTick+0x154>)
 8008376:	681b      	ldr	r3, [r3, #0]
 8008378:	681b      	ldr	r3, [r3, #0]
 800837a:	2b00      	cmp	r3, #0
 800837c:	d009      	beq.n	8008392 <xTaskIncrementTick+0x46>
 800837e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008382:	f383 8811 	msr	BASEPRI, r3
 8008386:	f3bf 8f6f 	isb	sy
 800838a:	f3bf 8f4f 	dsb	sy
 800838e:	603b      	str	r3, [r7, #0]
 8008390:	e7fe      	b.n	8008390 <xTaskIncrementTick+0x44>
 8008392:	4b43      	ldr	r3, [pc, #268]	; (80084a0 <xTaskIncrementTick+0x154>)
 8008394:	681b      	ldr	r3, [r3, #0]
 8008396:	60fb      	str	r3, [r7, #12]
 8008398:	4b42      	ldr	r3, [pc, #264]	; (80084a4 <xTaskIncrementTick+0x158>)
 800839a:	681b      	ldr	r3, [r3, #0]
 800839c:	4a40      	ldr	r2, [pc, #256]	; (80084a0 <xTaskIncrementTick+0x154>)
 800839e:	6013      	str	r3, [r2, #0]
 80083a0:	4a40      	ldr	r2, [pc, #256]	; (80084a4 <xTaskIncrementTick+0x158>)
 80083a2:	68fb      	ldr	r3, [r7, #12]
 80083a4:	6013      	str	r3, [r2, #0]
 80083a6:	4b40      	ldr	r3, [pc, #256]	; (80084a8 <xTaskIncrementTick+0x15c>)
 80083a8:	681b      	ldr	r3, [r3, #0]
 80083aa:	3301      	adds	r3, #1
 80083ac:	4a3e      	ldr	r2, [pc, #248]	; (80084a8 <xTaskIncrementTick+0x15c>)
 80083ae:	6013      	str	r3, [r2, #0]
 80083b0:	f000 f994 	bl	80086dc <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80083b4:	4b3d      	ldr	r3, [pc, #244]	; (80084ac <xTaskIncrementTick+0x160>)
 80083b6:	681b      	ldr	r3, [r3, #0]
 80083b8:	693a      	ldr	r2, [r7, #16]
 80083ba:	429a      	cmp	r2, r3
 80083bc:	d34d      	bcc.n	800845a <xTaskIncrementTick+0x10e>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80083be:	4b38      	ldr	r3, [pc, #224]	; (80084a0 <xTaskIncrementTick+0x154>)
 80083c0:	681b      	ldr	r3, [r3, #0]
 80083c2:	681b      	ldr	r3, [r3, #0]
 80083c4:	2b00      	cmp	r3, #0
 80083c6:	d101      	bne.n	80083cc <xTaskIncrementTick+0x80>
 80083c8:	2301      	movs	r3, #1
 80083ca:	e000      	b.n	80083ce <xTaskIncrementTick+0x82>
 80083cc:	2300      	movs	r3, #0
 80083ce:	2b00      	cmp	r3, #0
 80083d0:	d004      	beq.n	80083dc <xTaskIncrementTick+0x90>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80083d2:	4b36      	ldr	r3, [pc, #216]	; (80084ac <xTaskIncrementTick+0x160>)
 80083d4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80083d8:	601a      	str	r2, [r3, #0]
					break;
 80083da:	e03e      	b.n	800845a <xTaskIncrementTick+0x10e>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80083dc:	4b30      	ldr	r3, [pc, #192]	; (80084a0 <xTaskIncrementTick+0x154>)
 80083de:	681b      	ldr	r3, [r3, #0]
 80083e0:	68db      	ldr	r3, [r3, #12]
 80083e2:	68db      	ldr	r3, [r3, #12]
 80083e4:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80083e6:	68bb      	ldr	r3, [r7, #8]
 80083e8:	685b      	ldr	r3, [r3, #4]
 80083ea:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80083ec:	693a      	ldr	r2, [r7, #16]
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	429a      	cmp	r2, r3
 80083f2:	d203      	bcs.n	80083fc <xTaskIncrementTick+0xb0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80083f4:	4a2d      	ldr	r2, [pc, #180]	; (80084ac <xTaskIncrementTick+0x160>)
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	6013      	str	r3, [r2, #0]
						break;
 80083fa:	e02e      	b.n	800845a <xTaskIncrementTick+0x10e>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80083fc:	68bb      	ldr	r3, [r7, #8]
 80083fe:	3304      	adds	r3, #4
 8008400:	4618      	mov	r0, r3
 8008402:	f7ff fcb6 	bl	8007d72 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8008406:	68bb      	ldr	r3, [r7, #8]
 8008408:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800840a:	2b00      	cmp	r3, #0
 800840c:	d004      	beq.n	8008418 <xTaskIncrementTick+0xcc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800840e:	68bb      	ldr	r3, [r7, #8]
 8008410:	3318      	adds	r3, #24
 8008412:	4618      	mov	r0, r3
 8008414:	f7ff fcad 	bl	8007d72 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8008418:	68bb      	ldr	r3, [r7, #8]
 800841a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800841c:	2201      	movs	r2, #1
 800841e:	409a      	lsls	r2, r3
 8008420:	4b23      	ldr	r3, [pc, #140]	; (80084b0 <xTaskIncrementTick+0x164>)
 8008422:	681b      	ldr	r3, [r3, #0]
 8008424:	4313      	orrs	r3, r2
 8008426:	4a22      	ldr	r2, [pc, #136]	; (80084b0 <xTaskIncrementTick+0x164>)
 8008428:	6013      	str	r3, [r2, #0]
 800842a:	68bb      	ldr	r3, [r7, #8]
 800842c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800842e:	4613      	mov	r3, r2
 8008430:	009b      	lsls	r3, r3, #2
 8008432:	4413      	add	r3, r2
 8008434:	009b      	lsls	r3, r3, #2
 8008436:	4a1f      	ldr	r2, [pc, #124]	; (80084b4 <xTaskIncrementTick+0x168>)
 8008438:	441a      	add	r2, r3
 800843a:	68bb      	ldr	r3, [r7, #8]
 800843c:	3304      	adds	r3, #4
 800843e:	4619      	mov	r1, r3
 8008440:	4610      	mov	r0, r2
 8008442:	f7ff fc39 	bl	8007cb8 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008446:	68bb      	ldr	r3, [r7, #8]
 8008448:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800844a:	4b1b      	ldr	r3, [pc, #108]	; (80084b8 <xTaskIncrementTick+0x16c>)
 800844c:	681b      	ldr	r3, [r3, #0]
 800844e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008450:	429a      	cmp	r2, r3
 8008452:	d3b4      	bcc.n	80083be <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8008454:	2301      	movs	r3, #1
 8008456:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008458:	e7b1      	b.n	80083be <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800845a:	4b17      	ldr	r3, [pc, #92]	; (80084b8 <xTaskIncrementTick+0x16c>)
 800845c:	681b      	ldr	r3, [r3, #0]
 800845e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008460:	4914      	ldr	r1, [pc, #80]	; (80084b4 <xTaskIncrementTick+0x168>)
 8008462:	4613      	mov	r3, r2
 8008464:	009b      	lsls	r3, r3, #2
 8008466:	4413      	add	r3, r2
 8008468:	009b      	lsls	r3, r3, #2
 800846a:	440b      	add	r3, r1
 800846c:	681b      	ldr	r3, [r3, #0]
 800846e:	2b01      	cmp	r3, #1
 8008470:	d907      	bls.n	8008482 <xTaskIncrementTick+0x136>
			{
				xSwitchRequired = pdTRUE;
 8008472:	2301      	movs	r3, #1
 8008474:	617b      	str	r3, [r7, #20]
 8008476:	e004      	b.n	8008482 <xTaskIncrementTick+0x136>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8008478:	4b10      	ldr	r3, [pc, #64]	; (80084bc <xTaskIncrementTick+0x170>)
 800847a:	681b      	ldr	r3, [r3, #0]
 800847c:	3301      	adds	r3, #1
 800847e:	4a0f      	ldr	r2, [pc, #60]	; (80084bc <xTaskIncrementTick+0x170>)
 8008480:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8008482:	4b0f      	ldr	r3, [pc, #60]	; (80084c0 <xTaskIncrementTick+0x174>)
 8008484:	681b      	ldr	r3, [r3, #0]
 8008486:	2b00      	cmp	r3, #0
 8008488:	d001      	beq.n	800848e <xTaskIncrementTick+0x142>
		{
			xSwitchRequired = pdTRUE;
 800848a:	2301      	movs	r3, #1
 800848c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800848e:	697b      	ldr	r3, [r7, #20]
}
 8008490:	4618      	mov	r0, r3
 8008492:	3718      	adds	r7, #24
 8008494:	46bd      	mov	sp, r7
 8008496:	bd80      	pop	{r7, pc}
 8008498:	200005d0 	.word	0x200005d0
 800849c:	200005ac 	.word	0x200005ac
 80084a0:	20000560 	.word	0x20000560
 80084a4:	20000564 	.word	0x20000564
 80084a8:	200005c0 	.word	0x200005c0
 80084ac:	200005c8 	.word	0x200005c8
 80084b0:	200005b0 	.word	0x200005b0
 80084b4:	200004ac 	.word	0x200004ac
 80084b8:	200004a8 	.word	0x200004a8
 80084bc:	200005b8 	.word	0x200005b8
 80084c0:	200005bc 	.word	0x200005bc

080084c4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80084c4:	b480      	push	{r7}
 80084c6:	b087      	sub	sp, #28
 80084c8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80084ca:	4b26      	ldr	r3, [pc, #152]	; (8008564 <vTaskSwitchContext+0xa0>)
 80084cc:	681b      	ldr	r3, [r3, #0]
 80084ce:	2b00      	cmp	r3, #0
 80084d0:	d003      	beq.n	80084da <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80084d2:	4b25      	ldr	r3, [pc, #148]	; (8008568 <vTaskSwitchContext+0xa4>)
 80084d4:	2201      	movs	r2, #1
 80084d6:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80084d8:	e03e      	b.n	8008558 <vTaskSwitchContext+0x94>
		xYieldPending = pdFALSE;
 80084da:	4b23      	ldr	r3, [pc, #140]	; (8008568 <vTaskSwitchContext+0xa4>)
 80084dc:	2200      	movs	r2, #0
 80084de:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 80084e0:	4b22      	ldr	r3, [pc, #136]	; (800856c <vTaskSwitchContext+0xa8>)
 80084e2:	681b      	ldr	r3, [r3, #0]
 80084e4:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80084e6:	68fb      	ldr	r3, [r7, #12]
 80084e8:	fab3 f383 	clz	r3, r3
 80084ec:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80084ee:	7afb      	ldrb	r3, [r7, #11]
 80084f0:	f1c3 031f 	rsb	r3, r3, #31
 80084f4:	617b      	str	r3, [r7, #20]
 80084f6:	491e      	ldr	r1, [pc, #120]	; (8008570 <vTaskSwitchContext+0xac>)
 80084f8:	697a      	ldr	r2, [r7, #20]
 80084fa:	4613      	mov	r3, r2
 80084fc:	009b      	lsls	r3, r3, #2
 80084fe:	4413      	add	r3, r2
 8008500:	009b      	lsls	r3, r3, #2
 8008502:	440b      	add	r3, r1
 8008504:	681b      	ldr	r3, [r3, #0]
 8008506:	2b00      	cmp	r3, #0
 8008508:	d109      	bne.n	800851e <vTaskSwitchContext+0x5a>
	__asm volatile
 800850a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800850e:	f383 8811 	msr	BASEPRI, r3
 8008512:	f3bf 8f6f 	isb	sy
 8008516:	f3bf 8f4f 	dsb	sy
 800851a:	607b      	str	r3, [r7, #4]
 800851c:	e7fe      	b.n	800851c <vTaskSwitchContext+0x58>
 800851e:	697a      	ldr	r2, [r7, #20]
 8008520:	4613      	mov	r3, r2
 8008522:	009b      	lsls	r3, r3, #2
 8008524:	4413      	add	r3, r2
 8008526:	009b      	lsls	r3, r3, #2
 8008528:	4a11      	ldr	r2, [pc, #68]	; (8008570 <vTaskSwitchContext+0xac>)
 800852a:	4413      	add	r3, r2
 800852c:	613b      	str	r3, [r7, #16]
 800852e:	693b      	ldr	r3, [r7, #16]
 8008530:	685b      	ldr	r3, [r3, #4]
 8008532:	685a      	ldr	r2, [r3, #4]
 8008534:	693b      	ldr	r3, [r7, #16]
 8008536:	605a      	str	r2, [r3, #4]
 8008538:	693b      	ldr	r3, [r7, #16]
 800853a:	685a      	ldr	r2, [r3, #4]
 800853c:	693b      	ldr	r3, [r7, #16]
 800853e:	3308      	adds	r3, #8
 8008540:	429a      	cmp	r2, r3
 8008542:	d104      	bne.n	800854e <vTaskSwitchContext+0x8a>
 8008544:	693b      	ldr	r3, [r7, #16]
 8008546:	685b      	ldr	r3, [r3, #4]
 8008548:	685a      	ldr	r2, [r3, #4]
 800854a:	693b      	ldr	r3, [r7, #16]
 800854c:	605a      	str	r2, [r3, #4]
 800854e:	693b      	ldr	r3, [r7, #16]
 8008550:	685b      	ldr	r3, [r3, #4]
 8008552:	68db      	ldr	r3, [r3, #12]
 8008554:	4a07      	ldr	r2, [pc, #28]	; (8008574 <vTaskSwitchContext+0xb0>)
 8008556:	6013      	str	r3, [r2, #0]
}
 8008558:	bf00      	nop
 800855a:	371c      	adds	r7, #28
 800855c:	46bd      	mov	sp, r7
 800855e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008562:	4770      	bx	lr
 8008564:	200005d0 	.word	0x200005d0
 8008568:	200005bc 	.word	0x200005bc
 800856c:	200005b0 	.word	0x200005b0
 8008570:	200004ac 	.word	0x200004ac
 8008574:	200004a8 	.word	0x200004a8

08008578 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8008578:	b580      	push	{r7, lr}
 800857a:	b082      	sub	sp, #8
 800857c:	af00      	add	r7, sp, #0
 800857e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8008580:	f000 f852 	bl	8008628 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8008584:	4b06      	ldr	r3, [pc, #24]	; (80085a0 <prvIdleTask+0x28>)
 8008586:	681b      	ldr	r3, [r3, #0]
 8008588:	2b01      	cmp	r3, #1
 800858a:	d9f9      	bls.n	8008580 <prvIdleTask+0x8>
			{
				taskYIELD();
 800858c:	4b05      	ldr	r3, [pc, #20]	; (80085a4 <prvIdleTask+0x2c>)
 800858e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008592:	601a      	str	r2, [r3, #0]
 8008594:	f3bf 8f4f 	dsb	sy
 8008598:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800859c:	e7f0      	b.n	8008580 <prvIdleTask+0x8>
 800859e:	bf00      	nop
 80085a0:	200004ac 	.word	0x200004ac
 80085a4:	e000ed04 	.word	0xe000ed04

080085a8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80085a8:	b580      	push	{r7, lr}
 80085aa:	b082      	sub	sp, #8
 80085ac:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80085ae:	2300      	movs	r3, #0
 80085b0:	607b      	str	r3, [r7, #4]
 80085b2:	e00c      	b.n	80085ce <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80085b4:	687a      	ldr	r2, [r7, #4]
 80085b6:	4613      	mov	r3, r2
 80085b8:	009b      	lsls	r3, r3, #2
 80085ba:	4413      	add	r3, r2
 80085bc:	009b      	lsls	r3, r3, #2
 80085be:	4a12      	ldr	r2, [pc, #72]	; (8008608 <prvInitialiseTaskLists+0x60>)
 80085c0:	4413      	add	r3, r2
 80085c2:	4618      	mov	r0, r3
 80085c4:	f7ff fb4b 	bl	8007c5e <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	3301      	adds	r3, #1
 80085cc:	607b      	str	r3, [r7, #4]
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	2b06      	cmp	r3, #6
 80085d2:	d9ef      	bls.n	80085b4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80085d4:	480d      	ldr	r0, [pc, #52]	; (800860c <prvInitialiseTaskLists+0x64>)
 80085d6:	f7ff fb42 	bl	8007c5e <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80085da:	480d      	ldr	r0, [pc, #52]	; (8008610 <prvInitialiseTaskLists+0x68>)
 80085dc:	f7ff fb3f 	bl	8007c5e <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80085e0:	480c      	ldr	r0, [pc, #48]	; (8008614 <prvInitialiseTaskLists+0x6c>)
 80085e2:	f7ff fb3c 	bl	8007c5e <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80085e6:	480c      	ldr	r0, [pc, #48]	; (8008618 <prvInitialiseTaskLists+0x70>)
 80085e8:	f7ff fb39 	bl	8007c5e <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80085ec:	480b      	ldr	r0, [pc, #44]	; (800861c <prvInitialiseTaskLists+0x74>)
 80085ee:	f7ff fb36 	bl	8007c5e <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80085f2:	4b0b      	ldr	r3, [pc, #44]	; (8008620 <prvInitialiseTaskLists+0x78>)
 80085f4:	4a05      	ldr	r2, [pc, #20]	; (800860c <prvInitialiseTaskLists+0x64>)
 80085f6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80085f8:	4b0a      	ldr	r3, [pc, #40]	; (8008624 <prvInitialiseTaskLists+0x7c>)
 80085fa:	4a05      	ldr	r2, [pc, #20]	; (8008610 <prvInitialiseTaskLists+0x68>)
 80085fc:	601a      	str	r2, [r3, #0]
}
 80085fe:	bf00      	nop
 8008600:	3708      	adds	r7, #8
 8008602:	46bd      	mov	sp, r7
 8008604:	bd80      	pop	{r7, pc}
 8008606:	bf00      	nop
 8008608:	200004ac 	.word	0x200004ac
 800860c:	20000538 	.word	0x20000538
 8008610:	2000054c 	.word	0x2000054c
 8008614:	20000568 	.word	0x20000568
 8008618:	2000057c 	.word	0x2000057c
 800861c:	20000594 	.word	0x20000594
 8008620:	20000560 	.word	0x20000560
 8008624:	20000564 	.word	0x20000564

08008628 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8008628:	b580      	push	{r7, lr}
 800862a:	b082      	sub	sp, #8
 800862c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800862e:	e019      	b.n	8008664 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8008630:	f000 fa94 	bl	8008b5c <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8008634:	4b0f      	ldr	r3, [pc, #60]	; (8008674 <prvCheckTasksWaitingTermination+0x4c>)
 8008636:	68db      	ldr	r3, [r3, #12]
 8008638:	68db      	ldr	r3, [r3, #12]
 800863a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	3304      	adds	r3, #4
 8008640:	4618      	mov	r0, r3
 8008642:	f7ff fb96 	bl	8007d72 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8008646:	4b0c      	ldr	r3, [pc, #48]	; (8008678 <prvCheckTasksWaitingTermination+0x50>)
 8008648:	681b      	ldr	r3, [r3, #0]
 800864a:	3b01      	subs	r3, #1
 800864c:	4a0a      	ldr	r2, [pc, #40]	; (8008678 <prvCheckTasksWaitingTermination+0x50>)
 800864e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8008650:	4b0a      	ldr	r3, [pc, #40]	; (800867c <prvCheckTasksWaitingTermination+0x54>)
 8008652:	681b      	ldr	r3, [r3, #0]
 8008654:	3b01      	subs	r3, #1
 8008656:	4a09      	ldr	r2, [pc, #36]	; (800867c <prvCheckTasksWaitingTermination+0x54>)
 8008658:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800865a:	f000 faad 	bl	8008bb8 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800865e:	6878      	ldr	r0, [r7, #4]
 8008660:	f000 f80e 	bl	8008680 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008664:	4b05      	ldr	r3, [pc, #20]	; (800867c <prvCheckTasksWaitingTermination+0x54>)
 8008666:	681b      	ldr	r3, [r3, #0]
 8008668:	2b00      	cmp	r3, #0
 800866a:	d1e1      	bne.n	8008630 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800866c:	bf00      	nop
 800866e:	3708      	adds	r7, #8
 8008670:	46bd      	mov	sp, r7
 8008672:	bd80      	pop	{r7, pc}
 8008674:	2000057c 	.word	0x2000057c
 8008678:	200005a8 	.word	0x200005a8
 800867c:	20000590 	.word	0x20000590

08008680 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8008680:	b580      	push	{r7, lr}
 8008682:	b084      	sub	sp, #16
 8008684:	af00      	add	r7, sp, #0
 8008686:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800868e:	2b00      	cmp	r3, #0
 8008690:	d108      	bne.n	80086a4 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008696:	4618      	mov	r0, r3
 8008698:	f000 fc3c 	bl	8008f14 <vPortFree>
				vPortFree( pxTCB );
 800869c:	6878      	ldr	r0, [r7, #4]
 800869e:	f000 fc39 	bl	8008f14 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80086a2:	e017      	b.n	80086d4 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80086aa:	2b01      	cmp	r3, #1
 80086ac:	d103      	bne.n	80086b6 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80086ae:	6878      	ldr	r0, [r7, #4]
 80086b0:	f000 fc30 	bl	8008f14 <vPortFree>
	}
 80086b4:	e00e      	b.n	80086d4 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80086bc:	2b02      	cmp	r3, #2
 80086be:	d009      	beq.n	80086d4 <prvDeleteTCB+0x54>
 80086c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086c4:	f383 8811 	msr	BASEPRI, r3
 80086c8:	f3bf 8f6f 	isb	sy
 80086cc:	f3bf 8f4f 	dsb	sy
 80086d0:	60fb      	str	r3, [r7, #12]
 80086d2:	e7fe      	b.n	80086d2 <prvDeleteTCB+0x52>
	}
 80086d4:	bf00      	nop
 80086d6:	3710      	adds	r7, #16
 80086d8:	46bd      	mov	sp, r7
 80086da:	bd80      	pop	{r7, pc}

080086dc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80086dc:	b480      	push	{r7}
 80086de:	b083      	sub	sp, #12
 80086e0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80086e2:	4b0f      	ldr	r3, [pc, #60]	; (8008720 <prvResetNextTaskUnblockTime+0x44>)
 80086e4:	681b      	ldr	r3, [r3, #0]
 80086e6:	681b      	ldr	r3, [r3, #0]
 80086e8:	2b00      	cmp	r3, #0
 80086ea:	d101      	bne.n	80086f0 <prvResetNextTaskUnblockTime+0x14>
 80086ec:	2301      	movs	r3, #1
 80086ee:	e000      	b.n	80086f2 <prvResetNextTaskUnblockTime+0x16>
 80086f0:	2300      	movs	r3, #0
 80086f2:	2b00      	cmp	r3, #0
 80086f4:	d004      	beq.n	8008700 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80086f6:	4b0b      	ldr	r3, [pc, #44]	; (8008724 <prvResetNextTaskUnblockTime+0x48>)
 80086f8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80086fc:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80086fe:	e008      	b.n	8008712 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8008700:	4b07      	ldr	r3, [pc, #28]	; (8008720 <prvResetNextTaskUnblockTime+0x44>)
 8008702:	681b      	ldr	r3, [r3, #0]
 8008704:	68db      	ldr	r3, [r3, #12]
 8008706:	68db      	ldr	r3, [r3, #12]
 8008708:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	685b      	ldr	r3, [r3, #4]
 800870e:	4a05      	ldr	r2, [pc, #20]	; (8008724 <prvResetNextTaskUnblockTime+0x48>)
 8008710:	6013      	str	r3, [r2, #0]
}
 8008712:	bf00      	nop
 8008714:	370c      	adds	r7, #12
 8008716:	46bd      	mov	sp, r7
 8008718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800871c:	4770      	bx	lr
 800871e:	bf00      	nop
 8008720:	20000560 	.word	0x20000560
 8008724:	200005c8 	.word	0x200005c8

08008728 <vTaskNotifyGiveFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	void vTaskNotifyGiveFromISR( TaskHandle_t xTaskToNotify, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8008728:	b580      	push	{r7, lr}
 800872a:	b08a      	sub	sp, #40	; 0x28
 800872c:	af00      	add	r7, sp, #0
 800872e:	6078      	str	r0, [r7, #4]
 8008730:	6039      	str	r1, [r7, #0]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	2b00      	cmp	r3, #0
 8008736:	d109      	bne.n	800874c <vTaskNotifyGiveFromISR+0x24>
 8008738:	f04f 0350 	mov.w	r3, #80	; 0x50
 800873c:	f383 8811 	msr	BASEPRI, r3
 8008740:	f3bf 8f6f 	isb	sy
 8008744:	f3bf 8f4f 	dsb	sy
 8008748:	61bb      	str	r3, [r7, #24]
 800874a:	e7fe      	b.n	800874a <vTaskNotifyGiveFromISR+0x22>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800874c:	f000 fae2 	bl	8008d14 <vPortValidateInterruptPriority>

		pxTCB = ( TCB_t * ) xTaskToNotify;
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	627b      	str	r3, [r7, #36]	; 0x24

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8008754:	f3ef 8211 	mrs	r2, BASEPRI
 8008758:	f04f 0350 	mov.w	r3, #80	; 0x50
 800875c:	f383 8811 	msr	BASEPRI, r3
 8008760:	f3bf 8f6f 	isb	sy
 8008764:	f3bf 8f4f 	dsb	sy
 8008768:	617a      	str	r2, [r7, #20]
 800876a:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800876c:	697b      	ldr	r3, [r7, #20]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800876e:	623b      	str	r3, [r7, #32]
		{
			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8008770:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008772:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8008776:	77fb      	strb	r3, [r7, #31]
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8008778:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800877a:	2202      	movs	r2, #2
 800877c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

			/* 'Giving' is equivalent to incrementing a count in a counting
			semaphore. */
			( pxTCB->ulNotifiedValue )++;
 8008780:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008782:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008784:	1c5a      	adds	r2, r3, #1
 8008786:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008788:	64da      	str	r2, [r3, #76]	; 0x4c

			traceTASK_NOTIFY_GIVE_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800878a:	7ffb      	ldrb	r3, [r7, #31]
 800878c:	2b01      	cmp	r3, #1
 800878e:	d145      	bne.n	800881c <vTaskNotifyGiveFromISR+0xf4>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8008790:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008792:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008794:	2b00      	cmp	r3, #0
 8008796:	d009      	beq.n	80087ac <vTaskNotifyGiveFromISR+0x84>
	__asm volatile
 8008798:	f04f 0350 	mov.w	r3, #80	; 0x50
 800879c:	f383 8811 	msr	BASEPRI, r3
 80087a0:	f3bf 8f6f 	isb	sy
 80087a4:	f3bf 8f4f 	dsb	sy
 80087a8:	60fb      	str	r3, [r7, #12]
 80087aa:	e7fe      	b.n	80087aa <vTaskNotifyGiveFromISR+0x82>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80087ac:	4b20      	ldr	r3, [pc, #128]	; (8008830 <vTaskNotifyGiveFromISR+0x108>)
 80087ae:	681b      	ldr	r3, [r3, #0]
 80087b0:	2b00      	cmp	r3, #0
 80087b2:	d11c      	bne.n	80087ee <vTaskNotifyGiveFromISR+0xc6>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80087b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087b6:	3304      	adds	r3, #4
 80087b8:	4618      	mov	r0, r3
 80087ba:	f7ff fada 	bl	8007d72 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80087be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80087c2:	2201      	movs	r2, #1
 80087c4:	409a      	lsls	r2, r3
 80087c6:	4b1b      	ldr	r3, [pc, #108]	; (8008834 <vTaskNotifyGiveFromISR+0x10c>)
 80087c8:	681b      	ldr	r3, [r3, #0]
 80087ca:	4313      	orrs	r3, r2
 80087cc:	4a19      	ldr	r2, [pc, #100]	; (8008834 <vTaskNotifyGiveFromISR+0x10c>)
 80087ce:	6013      	str	r3, [r2, #0]
 80087d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80087d4:	4613      	mov	r3, r2
 80087d6:	009b      	lsls	r3, r3, #2
 80087d8:	4413      	add	r3, r2
 80087da:	009b      	lsls	r3, r3, #2
 80087dc:	4a16      	ldr	r2, [pc, #88]	; (8008838 <vTaskNotifyGiveFromISR+0x110>)
 80087de:	441a      	add	r2, r3
 80087e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087e2:	3304      	adds	r3, #4
 80087e4:	4619      	mov	r1, r3
 80087e6:	4610      	mov	r0, r2
 80087e8:	f7ff fa66 	bl	8007cb8 <vListInsertEnd>
 80087ec:	e005      	b.n	80087fa <vTaskNotifyGiveFromISR+0xd2>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 80087ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087f0:	3318      	adds	r3, #24
 80087f2:	4619      	mov	r1, r3
 80087f4:	4811      	ldr	r0, [pc, #68]	; (800883c <vTaskNotifyGiveFromISR+0x114>)
 80087f6:	f7ff fa5f 	bl	8007cb8 <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 80087fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80087fe:	4b10      	ldr	r3, [pc, #64]	; (8008840 <vTaskNotifyGiveFromISR+0x118>)
 8008800:	681b      	ldr	r3, [r3, #0]
 8008802:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008804:	429a      	cmp	r2, r3
 8008806:	d909      	bls.n	800881c <vTaskNotifyGiveFromISR+0xf4>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 8008808:	683b      	ldr	r3, [r7, #0]
 800880a:	2b00      	cmp	r3, #0
 800880c:	d003      	beq.n	8008816 <vTaskNotifyGiveFromISR+0xee>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 800880e:	683b      	ldr	r3, [r7, #0]
 8008810:	2201      	movs	r2, #1
 8008812:	601a      	str	r2, [r3, #0]
 8008814:	e002      	b.n	800881c <vTaskNotifyGiveFromISR+0xf4>
					else
					{
						/* Mark that a yield is pending in case the user is not
						using the "xHigherPriorityTaskWoken" parameter in an ISR
						safe FreeRTOS function. */
						xYieldPending = pdTRUE;
 8008816:	4b0b      	ldr	r3, [pc, #44]	; (8008844 <vTaskNotifyGiveFromISR+0x11c>)
 8008818:	2201      	movs	r2, #1
 800881a:	601a      	str	r2, [r3, #0]
 800881c:	6a3b      	ldr	r3, [r7, #32]
 800881e:	60bb      	str	r3, [r7, #8]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8008820:	68bb      	ldr	r3, [r7, #8]
 8008822:	f383 8811 	msr	BASEPRI, r3
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
	}
 8008826:	bf00      	nop
 8008828:	3728      	adds	r7, #40	; 0x28
 800882a:	46bd      	mov	sp, r7
 800882c:	bd80      	pop	{r7, pc}
 800882e:	bf00      	nop
 8008830:	200005d0 	.word	0x200005d0
 8008834:	200005b0 	.word	0x200005b0
 8008838:	200004ac 	.word	0x200004ac
 800883c:	20000568 	.word	0x20000568
 8008840:	200004a8 	.word	0x200004a8
 8008844:	200005bc 	.word	0x200005bc

08008848 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8008848:	b580      	push	{r7, lr}
 800884a:	b084      	sub	sp, #16
 800884c:	af00      	add	r7, sp, #0
 800884e:	6078      	str	r0, [r7, #4]
 8008850:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8008852:	4b29      	ldr	r3, [pc, #164]	; (80088f8 <prvAddCurrentTaskToDelayedList+0xb0>)
 8008854:	681b      	ldr	r3, [r3, #0]
 8008856:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008858:	4b28      	ldr	r3, [pc, #160]	; (80088fc <prvAddCurrentTaskToDelayedList+0xb4>)
 800885a:	681b      	ldr	r3, [r3, #0]
 800885c:	3304      	adds	r3, #4
 800885e:	4618      	mov	r0, r3
 8008860:	f7ff fa87 	bl	8007d72 <uxListRemove>
 8008864:	4603      	mov	r3, r0
 8008866:	2b00      	cmp	r3, #0
 8008868:	d10b      	bne.n	8008882 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 800886a:	4b24      	ldr	r3, [pc, #144]	; (80088fc <prvAddCurrentTaskToDelayedList+0xb4>)
 800886c:	681b      	ldr	r3, [r3, #0]
 800886e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008870:	2201      	movs	r2, #1
 8008872:	fa02 f303 	lsl.w	r3, r2, r3
 8008876:	43da      	mvns	r2, r3
 8008878:	4b21      	ldr	r3, [pc, #132]	; (8008900 <prvAddCurrentTaskToDelayedList+0xb8>)
 800887a:	681b      	ldr	r3, [r3, #0]
 800887c:	4013      	ands	r3, r2
 800887e:	4a20      	ldr	r2, [pc, #128]	; (8008900 <prvAddCurrentTaskToDelayedList+0xb8>)
 8008880:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008888:	d10a      	bne.n	80088a0 <prvAddCurrentTaskToDelayedList+0x58>
 800888a:	683b      	ldr	r3, [r7, #0]
 800888c:	2b00      	cmp	r3, #0
 800888e:	d007      	beq.n	80088a0 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008890:	4b1a      	ldr	r3, [pc, #104]	; (80088fc <prvAddCurrentTaskToDelayedList+0xb4>)
 8008892:	681b      	ldr	r3, [r3, #0]
 8008894:	3304      	adds	r3, #4
 8008896:	4619      	mov	r1, r3
 8008898:	481a      	ldr	r0, [pc, #104]	; (8008904 <prvAddCurrentTaskToDelayedList+0xbc>)
 800889a:	f7ff fa0d 	bl	8007cb8 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800889e:	e026      	b.n	80088ee <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80088a0:	68fa      	ldr	r2, [r7, #12]
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	4413      	add	r3, r2
 80088a6:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80088a8:	4b14      	ldr	r3, [pc, #80]	; (80088fc <prvAddCurrentTaskToDelayedList+0xb4>)
 80088aa:	681b      	ldr	r3, [r3, #0]
 80088ac:	68ba      	ldr	r2, [r7, #8]
 80088ae:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80088b0:	68ba      	ldr	r2, [r7, #8]
 80088b2:	68fb      	ldr	r3, [r7, #12]
 80088b4:	429a      	cmp	r2, r3
 80088b6:	d209      	bcs.n	80088cc <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80088b8:	4b13      	ldr	r3, [pc, #76]	; (8008908 <prvAddCurrentTaskToDelayedList+0xc0>)
 80088ba:	681a      	ldr	r2, [r3, #0]
 80088bc:	4b0f      	ldr	r3, [pc, #60]	; (80088fc <prvAddCurrentTaskToDelayedList+0xb4>)
 80088be:	681b      	ldr	r3, [r3, #0]
 80088c0:	3304      	adds	r3, #4
 80088c2:	4619      	mov	r1, r3
 80088c4:	4610      	mov	r0, r2
 80088c6:	f7ff fa1b 	bl	8007d00 <vListInsert>
}
 80088ca:	e010      	b.n	80088ee <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80088cc:	4b0f      	ldr	r3, [pc, #60]	; (800890c <prvAddCurrentTaskToDelayedList+0xc4>)
 80088ce:	681a      	ldr	r2, [r3, #0]
 80088d0:	4b0a      	ldr	r3, [pc, #40]	; (80088fc <prvAddCurrentTaskToDelayedList+0xb4>)
 80088d2:	681b      	ldr	r3, [r3, #0]
 80088d4:	3304      	adds	r3, #4
 80088d6:	4619      	mov	r1, r3
 80088d8:	4610      	mov	r0, r2
 80088da:	f7ff fa11 	bl	8007d00 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80088de:	4b0c      	ldr	r3, [pc, #48]	; (8008910 <prvAddCurrentTaskToDelayedList+0xc8>)
 80088e0:	681b      	ldr	r3, [r3, #0]
 80088e2:	68ba      	ldr	r2, [r7, #8]
 80088e4:	429a      	cmp	r2, r3
 80088e6:	d202      	bcs.n	80088ee <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80088e8:	4a09      	ldr	r2, [pc, #36]	; (8008910 <prvAddCurrentTaskToDelayedList+0xc8>)
 80088ea:	68bb      	ldr	r3, [r7, #8]
 80088ec:	6013      	str	r3, [r2, #0]
}
 80088ee:	bf00      	nop
 80088f0:	3710      	adds	r7, #16
 80088f2:	46bd      	mov	sp, r7
 80088f4:	bd80      	pop	{r7, pc}
 80088f6:	bf00      	nop
 80088f8:	200005ac 	.word	0x200005ac
 80088fc:	200004a8 	.word	0x200004a8
 8008900:	200005b0 	.word	0x200005b0
 8008904:	20000594 	.word	0x20000594
 8008908:	20000564 	.word	0x20000564
 800890c:	20000560 	.word	0x20000560
 8008910:	200005c8 	.word	0x200005c8

08008914 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8008914:	b480      	push	{r7}
 8008916:	b085      	sub	sp, #20
 8008918:	af00      	add	r7, sp, #0
 800891a:	60f8      	str	r0, [r7, #12]
 800891c:	60b9      	str	r1, [r7, #8]
 800891e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8008920:	68fb      	ldr	r3, [r7, #12]
 8008922:	3b04      	subs	r3, #4
 8008924:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8008926:	68fb      	ldr	r3, [r7, #12]
 8008928:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800892c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800892e:	68fb      	ldr	r3, [r7, #12]
 8008930:	3b04      	subs	r3, #4
 8008932:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8008934:	68bb      	ldr	r3, [r7, #8]
 8008936:	f023 0201 	bic.w	r2, r3, #1
 800893a:	68fb      	ldr	r3, [r7, #12]
 800893c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800893e:	68fb      	ldr	r3, [r7, #12]
 8008940:	3b04      	subs	r3, #4
 8008942:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8008944:	4a0c      	ldr	r2, [pc, #48]	; (8008978 <pxPortInitialiseStack+0x64>)
 8008946:	68fb      	ldr	r3, [r7, #12]
 8008948:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800894a:	68fb      	ldr	r3, [r7, #12]
 800894c:	3b14      	subs	r3, #20
 800894e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8008950:	687a      	ldr	r2, [r7, #4]
 8008952:	68fb      	ldr	r3, [r7, #12]
 8008954:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8008956:	68fb      	ldr	r3, [r7, #12]
 8008958:	3b04      	subs	r3, #4
 800895a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800895c:	68fb      	ldr	r3, [r7, #12]
 800895e:	f06f 0202 	mvn.w	r2, #2
 8008962:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8008964:	68fb      	ldr	r3, [r7, #12]
 8008966:	3b20      	subs	r3, #32
 8008968:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800896a:	68fb      	ldr	r3, [r7, #12]
}
 800896c:	4618      	mov	r0, r3
 800896e:	3714      	adds	r7, #20
 8008970:	46bd      	mov	sp, r7
 8008972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008976:	4770      	bx	lr
 8008978:	0800897d 	.word	0x0800897d

0800897c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800897c:	b480      	push	{r7}
 800897e:	b085      	sub	sp, #20
 8008980:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8008982:	2300      	movs	r3, #0
 8008984:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8008986:	4b11      	ldr	r3, [pc, #68]	; (80089cc <prvTaskExitError+0x50>)
 8008988:	681b      	ldr	r3, [r3, #0]
 800898a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800898e:	d009      	beq.n	80089a4 <prvTaskExitError+0x28>
	__asm volatile
 8008990:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008994:	f383 8811 	msr	BASEPRI, r3
 8008998:	f3bf 8f6f 	isb	sy
 800899c:	f3bf 8f4f 	dsb	sy
 80089a0:	60fb      	str	r3, [r7, #12]
 80089a2:	e7fe      	b.n	80089a2 <prvTaskExitError+0x26>
 80089a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089a8:	f383 8811 	msr	BASEPRI, r3
 80089ac:	f3bf 8f6f 	isb	sy
 80089b0:	f3bf 8f4f 	dsb	sy
 80089b4:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80089b6:	bf00      	nop
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	2b00      	cmp	r3, #0
 80089bc:	d0fc      	beq.n	80089b8 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80089be:	bf00      	nop
 80089c0:	3714      	adds	r7, #20
 80089c2:	46bd      	mov	sp, r7
 80089c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089c8:	4770      	bx	lr
 80089ca:	bf00      	nop
 80089cc:	20000118 	.word	0x20000118

080089d0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80089d0:	4b07      	ldr	r3, [pc, #28]	; (80089f0 <pxCurrentTCBConst2>)
 80089d2:	6819      	ldr	r1, [r3, #0]
 80089d4:	6808      	ldr	r0, [r1, #0]
 80089d6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80089da:	f380 8809 	msr	PSP, r0
 80089de:	f3bf 8f6f 	isb	sy
 80089e2:	f04f 0000 	mov.w	r0, #0
 80089e6:	f380 8811 	msr	BASEPRI, r0
 80089ea:	4770      	bx	lr
 80089ec:	f3af 8000 	nop.w

080089f0 <pxCurrentTCBConst2>:
 80089f0:	200004a8 	.word	0x200004a8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80089f4:	bf00      	nop
 80089f6:	bf00      	nop

080089f8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80089f8:	4808      	ldr	r0, [pc, #32]	; (8008a1c <prvPortStartFirstTask+0x24>)
 80089fa:	6800      	ldr	r0, [r0, #0]
 80089fc:	6800      	ldr	r0, [r0, #0]
 80089fe:	f380 8808 	msr	MSP, r0
 8008a02:	f04f 0000 	mov.w	r0, #0
 8008a06:	f380 8814 	msr	CONTROL, r0
 8008a0a:	b662      	cpsie	i
 8008a0c:	b661      	cpsie	f
 8008a0e:	f3bf 8f4f 	dsb	sy
 8008a12:	f3bf 8f6f 	isb	sy
 8008a16:	df00      	svc	0
 8008a18:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8008a1a:	bf00      	nop
 8008a1c:	e000ed08 	.word	0xe000ed08

08008a20 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008a20:	b580      	push	{r7, lr}
 8008a22:	b086      	sub	sp, #24
 8008a24:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8008a26:	4b44      	ldr	r3, [pc, #272]	; (8008b38 <xPortStartScheduler+0x118>)
 8008a28:	681b      	ldr	r3, [r3, #0]
 8008a2a:	4a44      	ldr	r2, [pc, #272]	; (8008b3c <xPortStartScheduler+0x11c>)
 8008a2c:	4293      	cmp	r3, r2
 8008a2e:	d109      	bne.n	8008a44 <xPortStartScheduler+0x24>
 8008a30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a34:	f383 8811 	msr	BASEPRI, r3
 8008a38:	f3bf 8f6f 	isb	sy
 8008a3c:	f3bf 8f4f 	dsb	sy
 8008a40:	613b      	str	r3, [r7, #16]
 8008a42:	e7fe      	b.n	8008a42 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8008a44:	4b3c      	ldr	r3, [pc, #240]	; (8008b38 <xPortStartScheduler+0x118>)
 8008a46:	681b      	ldr	r3, [r3, #0]
 8008a48:	4a3d      	ldr	r2, [pc, #244]	; (8008b40 <xPortStartScheduler+0x120>)
 8008a4a:	4293      	cmp	r3, r2
 8008a4c:	d109      	bne.n	8008a62 <xPortStartScheduler+0x42>
 8008a4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a52:	f383 8811 	msr	BASEPRI, r3
 8008a56:	f3bf 8f6f 	isb	sy
 8008a5a:	f3bf 8f4f 	dsb	sy
 8008a5e:	60fb      	str	r3, [r7, #12]
 8008a60:	e7fe      	b.n	8008a60 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8008a62:	4b38      	ldr	r3, [pc, #224]	; (8008b44 <xPortStartScheduler+0x124>)
 8008a64:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8008a66:	697b      	ldr	r3, [r7, #20]
 8008a68:	781b      	ldrb	r3, [r3, #0]
 8008a6a:	b2db      	uxtb	r3, r3
 8008a6c:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8008a6e:	697b      	ldr	r3, [r7, #20]
 8008a70:	22ff      	movs	r2, #255	; 0xff
 8008a72:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8008a74:	697b      	ldr	r3, [r7, #20]
 8008a76:	781b      	ldrb	r3, [r3, #0]
 8008a78:	b2db      	uxtb	r3, r3
 8008a7a:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008a7c:	78fb      	ldrb	r3, [r7, #3]
 8008a7e:	b2db      	uxtb	r3, r3
 8008a80:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8008a84:	b2da      	uxtb	r2, r3
 8008a86:	4b30      	ldr	r3, [pc, #192]	; (8008b48 <xPortStartScheduler+0x128>)
 8008a88:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8008a8a:	4b30      	ldr	r3, [pc, #192]	; (8008b4c <xPortStartScheduler+0x12c>)
 8008a8c:	2207      	movs	r2, #7
 8008a8e:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008a90:	e009      	b.n	8008aa6 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 8008a92:	4b2e      	ldr	r3, [pc, #184]	; (8008b4c <xPortStartScheduler+0x12c>)
 8008a94:	681b      	ldr	r3, [r3, #0]
 8008a96:	3b01      	subs	r3, #1
 8008a98:	4a2c      	ldr	r2, [pc, #176]	; (8008b4c <xPortStartScheduler+0x12c>)
 8008a9a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008a9c:	78fb      	ldrb	r3, [r7, #3]
 8008a9e:	b2db      	uxtb	r3, r3
 8008aa0:	005b      	lsls	r3, r3, #1
 8008aa2:	b2db      	uxtb	r3, r3
 8008aa4:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008aa6:	78fb      	ldrb	r3, [r7, #3]
 8008aa8:	b2db      	uxtb	r3, r3
 8008aaa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008aae:	2b80      	cmp	r3, #128	; 0x80
 8008ab0:	d0ef      	beq.n	8008a92 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8008ab2:	4b26      	ldr	r3, [pc, #152]	; (8008b4c <xPortStartScheduler+0x12c>)
 8008ab4:	681b      	ldr	r3, [r3, #0]
 8008ab6:	f1c3 0307 	rsb	r3, r3, #7
 8008aba:	2b04      	cmp	r3, #4
 8008abc:	d009      	beq.n	8008ad2 <xPortStartScheduler+0xb2>
 8008abe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ac2:	f383 8811 	msr	BASEPRI, r3
 8008ac6:	f3bf 8f6f 	isb	sy
 8008aca:	f3bf 8f4f 	dsb	sy
 8008ace:	60bb      	str	r3, [r7, #8]
 8008ad0:	e7fe      	b.n	8008ad0 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8008ad2:	4b1e      	ldr	r3, [pc, #120]	; (8008b4c <xPortStartScheduler+0x12c>)
 8008ad4:	681b      	ldr	r3, [r3, #0]
 8008ad6:	021b      	lsls	r3, r3, #8
 8008ad8:	4a1c      	ldr	r2, [pc, #112]	; (8008b4c <xPortStartScheduler+0x12c>)
 8008ada:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8008adc:	4b1b      	ldr	r3, [pc, #108]	; (8008b4c <xPortStartScheduler+0x12c>)
 8008ade:	681b      	ldr	r3, [r3, #0]
 8008ae0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008ae4:	4a19      	ldr	r2, [pc, #100]	; (8008b4c <xPortStartScheduler+0x12c>)
 8008ae6:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	b2da      	uxtb	r2, r3
 8008aec:	697b      	ldr	r3, [r7, #20]
 8008aee:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8008af0:	4b17      	ldr	r3, [pc, #92]	; (8008b50 <xPortStartScheduler+0x130>)
 8008af2:	681b      	ldr	r3, [r3, #0]
 8008af4:	4a16      	ldr	r2, [pc, #88]	; (8008b50 <xPortStartScheduler+0x130>)
 8008af6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8008afa:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8008afc:	4b14      	ldr	r3, [pc, #80]	; (8008b50 <xPortStartScheduler+0x130>)
 8008afe:	681b      	ldr	r3, [r3, #0]
 8008b00:	4a13      	ldr	r2, [pc, #76]	; (8008b50 <xPortStartScheduler+0x130>)
 8008b02:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8008b06:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8008b08:	f000 f8d6 	bl	8008cb8 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8008b0c:	4b11      	ldr	r3, [pc, #68]	; (8008b54 <xPortStartScheduler+0x134>)
 8008b0e:	2200      	movs	r2, #0
 8008b10:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8008b12:	f000 f8f5 	bl	8008d00 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8008b16:	4b10      	ldr	r3, [pc, #64]	; (8008b58 <xPortStartScheduler+0x138>)
 8008b18:	681b      	ldr	r3, [r3, #0]
 8008b1a:	4a0f      	ldr	r2, [pc, #60]	; (8008b58 <xPortStartScheduler+0x138>)
 8008b1c:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8008b20:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8008b22:	f7ff ff69 	bl	80089f8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8008b26:	f7ff fccd 	bl	80084c4 <vTaskSwitchContext>
	prvTaskExitError();
 8008b2a:	f7ff ff27 	bl	800897c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8008b2e:	2300      	movs	r3, #0
}
 8008b30:	4618      	mov	r0, r3
 8008b32:	3718      	adds	r7, #24
 8008b34:	46bd      	mov	sp, r7
 8008b36:	bd80      	pop	{r7, pc}
 8008b38:	e000ed00 	.word	0xe000ed00
 8008b3c:	410fc271 	.word	0x410fc271
 8008b40:	410fc270 	.word	0x410fc270
 8008b44:	e000e400 	.word	0xe000e400
 8008b48:	200005d4 	.word	0x200005d4
 8008b4c:	200005d8 	.word	0x200005d8
 8008b50:	e000ed20 	.word	0xe000ed20
 8008b54:	20000118 	.word	0x20000118
 8008b58:	e000ef34 	.word	0xe000ef34

08008b5c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8008b5c:	b480      	push	{r7}
 8008b5e:	b083      	sub	sp, #12
 8008b60:	af00      	add	r7, sp, #0
 8008b62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b66:	f383 8811 	msr	BASEPRI, r3
 8008b6a:	f3bf 8f6f 	isb	sy
 8008b6e:	f3bf 8f4f 	dsb	sy
 8008b72:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8008b74:	4b0e      	ldr	r3, [pc, #56]	; (8008bb0 <vPortEnterCritical+0x54>)
 8008b76:	681b      	ldr	r3, [r3, #0]
 8008b78:	3301      	adds	r3, #1
 8008b7a:	4a0d      	ldr	r2, [pc, #52]	; (8008bb0 <vPortEnterCritical+0x54>)
 8008b7c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8008b7e:	4b0c      	ldr	r3, [pc, #48]	; (8008bb0 <vPortEnterCritical+0x54>)
 8008b80:	681b      	ldr	r3, [r3, #0]
 8008b82:	2b01      	cmp	r3, #1
 8008b84:	d10e      	bne.n	8008ba4 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008b86:	4b0b      	ldr	r3, [pc, #44]	; (8008bb4 <vPortEnterCritical+0x58>)
 8008b88:	681b      	ldr	r3, [r3, #0]
 8008b8a:	b2db      	uxtb	r3, r3
 8008b8c:	2b00      	cmp	r3, #0
 8008b8e:	d009      	beq.n	8008ba4 <vPortEnterCritical+0x48>
 8008b90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b94:	f383 8811 	msr	BASEPRI, r3
 8008b98:	f3bf 8f6f 	isb	sy
 8008b9c:	f3bf 8f4f 	dsb	sy
 8008ba0:	603b      	str	r3, [r7, #0]
 8008ba2:	e7fe      	b.n	8008ba2 <vPortEnterCritical+0x46>
	}
}
 8008ba4:	bf00      	nop
 8008ba6:	370c      	adds	r7, #12
 8008ba8:	46bd      	mov	sp, r7
 8008baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bae:	4770      	bx	lr
 8008bb0:	20000118 	.word	0x20000118
 8008bb4:	e000ed04 	.word	0xe000ed04

08008bb8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8008bb8:	b480      	push	{r7}
 8008bba:	b083      	sub	sp, #12
 8008bbc:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8008bbe:	4b11      	ldr	r3, [pc, #68]	; (8008c04 <vPortExitCritical+0x4c>)
 8008bc0:	681b      	ldr	r3, [r3, #0]
 8008bc2:	2b00      	cmp	r3, #0
 8008bc4:	d109      	bne.n	8008bda <vPortExitCritical+0x22>
 8008bc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008bca:	f383 8811 	msr	BASEPRI, r3
 8008bce:	f3bf 8f6f 	isb	sy
 8008bd2:	f3bf 8f4f 	dsb	sy
 8008bd6:	607b      	str	r3, [r7, #4]
 8008bd8:	e7fe      	b.n	8008bd8 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 8008bda:	4b0a      	ldr	r3, [pc, #40]	; (8008c04 <vPortExitCritical+0x4c>)
 8008bdc:	681b      	ldr	r3, [r3, #0]
 8008bde:	3b01      	subs	r3, #1
 8008be0:	4a08      	ldr	r2, [pc, #32]	; (8008c04 <vPortExitCritical+0x4c>)
 8008be2:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8008be4:	4b07      	ldr	r3, [pc, #28]	; (8008c04 <vPortExitCritical+0x4c>)
 8008be6:	681b      	ldr	r3, [r3, #0]
 8008be8:	2b00      	cmp	r3, #0
 8008bea:	d104      	bne.n	8008bf6 <vPortExitCritical+0x3e>
 8008bec:	2300      	movs	r3, #0
 8008bee:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008bf0:	683b      	ldr	r3, [r7, #0]
 8008bf2:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8008bf6:	bf00      	nop
 8008bf8:	370c      	adds	r7, #12
 8008bfa:	46bd      	mov	sp, r7
 8008bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c00:	4770      	bx	lr
 8008c02:	bf00      	nop
 8008c04:	20000118 	.word	0x20000118
	...

08008c10 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008c10:	f3ef 8009 	mrs	r0, PSP
 8008c14:	f3bf 8f6f 	isb	sy
 8008c18:	4b15      	ldr	r3, [pc, #84]	; (8008c70 <pxCurrentTCBConst>)
 8008c1a:	681a      	ldr	r2, [r3, #0]
 8008c1c:	f01e 0f10 	tst.w	lr, #16
 8008c20:	bf08      	it	eq
 8008c22:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8008c26:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008c2a:	6010      	str	r0, [r2, #0]
 8008c2c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8008c30:	f04f 0050 	mov.w	r0, #80	; 0x50
 8008c34:	f380 8811 	msr	BASEPRI, r0
 8008c38:	f3bf 8f4f 	dsb	sy
 8008c3c:	f3bf 8f6f 	isb	sy
 8008c40:	f7ff fc40 	bl	80084c4 <vTaskSwitchContext>
 8008c44:	f04f 0000 	mov.w	r0, #0
 8008c48:	f380 8811 	msr	BASEPRI, r0
 8008c4c:	bc09      	pop	{r0, r3}
 8008c4e:	6819      	ldr	r1, [r3, #0]
 8008c50:	6808      	ldr	r0, [r1, #0]
 8008c52:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008c56:	f01e 0f10 	tst.w	lr, #16
 8008c5a:	bf08      	it	eq
 8008c5c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8008c60:	f380 8809 	msr	PSP, r0
 8008c64:	f3bf 8f6f 	isb	sy
 8008c68:	4770      	bx	lr
 8008c6a:	bf00      	nop
 8008c6c:	f3af 8000 	nop.w

08008c70 <pxCurrentTCBConst>:
 8008c70:	200004a8 	.word	0x200004a8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008c74:	bf00      	nop
 8008c76:	bf00      	nop

08008c78 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008c78:	b580      	push	{r7, lr}
 8008c7a:	b082      	sub	sp, #8
 8008c7c:	af00      	add	r7, sp, #0
	__asm volatile
 8008c7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c82:	f383 8811 	msr	BASEPRI, r3
 8008c86:	f3bf 8f6f 	isb	sy
 8008c8a:	f3bf 8f4f 	dsb	sy
 8008c8e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008c90:	f7ff fb5c 	bl	800834c <xTaskIncrementTick>
 8008c94:	4603      	mov	r3, r0
 8008c96:	2b00      	cmp	r3, #0
 8008c98:	d003      	beq.n	8008ca2 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8008c9a:	4b06      	ldr	r3, [pc, #24]	; (8008cb4 <SysTick_Handler+0x3c>)
 8008c9c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008ca0:	601a      	str	r2, [r3, #0]
 8008ca2:	2300      	movs	r3, #0
 8008ca4:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008ca6:	683b      	ldr	r3, [r7, #0]
 8008ca8:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 8008cac:	bf00      	nop
 8008cae:	3708      	adds	r7, #8
 8008cb0:	46bd      	mov	sp, r7
 8008cb2:	bd80      	pop	{r7, pc}
 8008cb4:	e000ed04 	.word	0xe000ed04

08008cb8 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8008cb8:	b480      	push	{r7}
 8008cba:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008cbc:	4b0b      	ldr	r3, [pc, #44]	; (8008cec <vPortSetupTimerInterrupt+0x34>)
 8008cbe:	2200      	movs	r2, #0
 8008cc0:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008cc2:	4b0b      	ldr	r3, [pc, #44]	; (8008cf0 <vPortSetupTimerInterrupt+0x38>)
 8008cc4:	2200      	movs	r2, #0
 8008cc6:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8008cc8:	4b0a      	ldr	r3, [pc, #40]	; (8008cf4 <vPortSetupTimerInterrupt+0x3c>)
 8008cca:	681b      	ldr	r3, [r3, #0]
 8008ccc:	4a0a      	ldr	r2, [pc, #40]	; (8008cf8 <vPortSetupTimerInterrupt+0x40>)
 8008cce:	fba2 2303 	umull	r2, r3, r2, r3
 8008cd2:	099b      	lsrs	r3, r3, #6
 8008cd4:	4a09      	ldr	r2, [pc, #36]	; (8008cfc <vPortSetupTimerInterrupt+0x44>)
 8008cd6:	3b01      	subs	r3, #1
 8008cd8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8008cda:	4b04      	ldr	r3, [pc, #16]	; (8008cec <vPortSetupTimerInterrupt+0x34>)
 8008cdc:	2207      	movs	r2, #7
 8008cde:	601a      	str	r2, [r3, #0]
}
 8008ce0:	bf00      	nop
 8008ce2:	46bd      	mov	sp, r7
 8008ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ce8:	4770      	bx	lr
 8008cea:	bf00      	nop
 8008cec:	e000e010 	.word	0xe000e010
 8008cf0:	e000e018 	.word	0xe000e018
 8008cf4:	20000000 	.word	0x20000000
 8008cf8:	10624dd3 	.word	0x10624dd3
 8008cfc:	e000e014 	.word	0xe000e014

08008d00 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8008d00:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8008d10 <vPortEnableVFP+0x10>
 8008d04:	6801      	ldr	r1, [r0, #0]
 8008d06:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8008d0a:	6001      	str	r1, [r0, #0]
 8008d0c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8008d0e:	bf00      	nop
 8008d10:	e000ed88 	.word	0xe000ed88

08008d14 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8008d14:	b480      	push	{r7}
 8008d16:	b085      	sub	sp, #20
 8008d18:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8008d1a:	f3ef 8305 	mrs	r3, IPSR
 8008d1e:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8008d20:	68fb      	ldr	r3, [r7, #12]
 8008d22:	2b0f      	cmp	r3, #15
 8008d24:	d913      	bls.n	8008d4e <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8008d26:	4a16      	ldr	r2, [pc, #88]	; (8008d80 <vPortValidateInterruptPriority+0x6c>)
 8008d28:	68fb      	ldr	r3, [r7, #12]
 8008d2a:	4413      	add	r3, r2
 8008d2c:	781b      	ldrb	r3, [r3, #0]
 8008d2e:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8008d30:	4b14      	ldr	r3, [pc, #80]	; (8008d84 <vPortValidateInterruptPriority+0x70>)
 8008d32:	781b      	ldrb	r3, [r3, #0]
 8008d34:	7afa      	ldrb	r2, [r7, #11]
 8008d36:	429a      	cmp	r2, r3
 8008d38:	d209      	bcs.n	8008d4e <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 8008d3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d3e:	f383 8811 	msr	BASEPRI, r3
 8008d42:	f3bf 8f6f 	isb	sy
 8008d46:	f3bf 8f4f 	dsb	sy
 8008d4a:	607b      	str	r3, [r7, #4]
 8008d4c:	e7fe      	b.n	8008d4c <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8008d4e:	4b0e      	ldr	r3, [pc, #56]	; (8008d88 <vPortValidateInterruptPriority+0x74>)
 8008d50:	681b      	ldr	r3, [r3, #0]
 8008d52:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8008d56:	4b0d      	ldr	r3, [pc, #52]	; (8008d8c <vPortValidateInterruptPriority+0x78>)
 8008d58:	681b      	ldr	r3, [r3, #0]
 8008d5a:	429a      	cmp	r2, r3
 8008d5c:	d909      	bls.n	8008d72 <vPortValidateInterruptPriority+0x5e>
 8008d5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d62:	f383 8811 	msr	BASEPRI, r3
 8008d66:	f3bf 8f6f 	isb	sy
 8008d6a:	f3bf 8f4f 	dsb	sy
 8008d6e:	603b      	str	r3, [r7, #0]
 8008d70:	e7fe      	b.n	8008d70 <vPortValidateInterruptPriority+0x5c>
	}
 8008d72:	bf00      	nop
 8008d74:	3714      	adds	r7, #20
 8008d76:	46bd      	mov	sp, r7
 8008d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d7c:	4770      	bx	lr
 8008d7e:	bf00      	nop
 8008d80:	e000e3f0 	.word	0xe000e3f0
 8008d84:	200005d4 	.word	0x200005d4
 8008d88:	e000ed0c 	.word	0xe000ed0c
 8008d8c:	200005d8 	.word	0x200005d8

08008d90 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8008d90:	b580      	push	{r7, lr}
 8008d92:	b08a      	sub	sp, #40	; 0x28
 8008d94:	af00      	add	r7, sp, #0
 8008d96:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8008d98:	2300      	movs	r3, #0
 8008d9a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8008d9c:	f7ff fa2c 	bl	80081f8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8008da0:	4b57      	ldr	r3, [pc, #348]	; (8008f00 <pvPortMalloc+0x170>)
 8008da2:	681b      	ldr	r3, [r3, #0]
 8008da4:	2b00      	cmp	r3, #0
 8008da6:	d101      	bne.n	8008dac <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8008da8:	f000 f90c 	bl	8008fc4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8008dac:	4b55      	ldr	r3, [pc, #340]	; (8008f04 <pvPortMalloc+0x174>)
 8008dae:	681a      	ldr	r2, [r3, #0]
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	4013      	ands	r3, r2
 8008db4:	2b00      	cmp	r3, #0
 8008db6:	f040 808c 	bne.w	8008ed2 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	2b00      	cmp	r3, #0
 8008dbe:	d01c      	beq.n	8008dfa <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8008dc0:	2208      	movs	r2, #8
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	4413      	add	r3, r2
 8008dc6:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	f003 0307 	and.w	r3, r3, #7
 8008dce:	2b00      	cmp	r3, #0
 8008dd0:	d013      	beq.n	8008dfa <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	f023 0307 	bic.w	r3, r3, #7
 8008dd8:	3308      	adds	r3, #8
 8008dda:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	f003 0307 	and.w	r3, r3, #7
 8008de2:	2b00      	cmp	r3, #0
 8008de4:	d009      	beq.n	8008dfa <pvPortMalloc+0x6a>
 8008de6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008dea:	f383 8811 	msr	BASEPRI, r3
 8008dee:	f3bf 8f6f 	isb	sy
 8008df2:	f3bf 8f4f 	dsb	sy
 8008df6:	617b      	str	r3, [r7, #20]
 8008df8:	e7fe      	b.n	8008df8 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	2b00      	cmp	r3, #0
 8008dfe:	d068      	beq.n	8008ed2 <pvPortMalloc+0x142>
 8008e00:	4b41      	ldr	r3, [pc, #260]	; (8008f08 <pvPortMalloc+0x178>)
 8008e02:	681b      	ldr	r3, [r3, #0]
 8008e04:	687a      	ldr	r2, [r7, #4]
 8008e06:	429a      	cmp	r2, r3
 8008e08:	d863      	bhi.n	8008ed2 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8008e0a:	4b40      	ldr	r3, [pc, #256]	; (8008f0c <pvPortMalloc+0x17c>)
 8008e0c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8008e0e:	4b3f      	ldr	r3, [pc, #252]	; (8008f0c <pvPortMalloc+0x17c>)
 8008e10:	681b      	ldr	r3, [r3, #0]
 8008e12:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008e14:	e004      	b.n	8008e20 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 8008e16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e18:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8008e1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e1c:	681b      	ldr	r3, [r3, #0]
 8008e1e:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008e20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e22:	685b      	ldr	r3, [r3, #4]
 8008e24:	687a      	ldr	r2, [r7, #4]
 8008e26:	429a      	cmp	r2, r3
 8008e28:	d903      	bls.n	8008e32 <pvPortMalloc+0xa2>
 8008e2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e2c:	681b      	ldr	r3, [r3, #0]
 8008e2e:	2b00      	cmp	r3, #0
 8008e30:	d1f1      	bne.n	8008e16 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8008e32:	4b33      	ldr	r3, [pc, #204]	; (8008f00 <pvPortMalloc+0x170>)
 8008e34:	681b      	ldr	r3, [r3, #0]
 8008e36:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008e38:	429a      	cmp	r2, r3
 8008e3a:	d04a      	beq.n	8008ed2 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8008e3c:	6a3b      	ldr	r3, [r7, #32]
 8008e3e:	681b      	ldr	r3, [r3, #0]
 8008e40:	2208      	movs	r2, #8
 8008e42:	4413      	add	r3, r2
 8008e44:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008e46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e48:	681a      	ldr	r2, [r3, #0]
 8008e4a:	6a3b      	ldr	r3, [r7, #32]
 8008e4c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8008e4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e50:	685a      	ldr	r2, [r3, #4]
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	1ad2      	subs	r2, r2, r3
 8008e56:	2308      	movs	r3, #8
 8008e58:	005b      	lsls	r3, r3, #1
 8008e5a:	429a      	cmp	r2, r3
 8008e5c:	d91e      	bls.n	8008e9c <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8008e5e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	4413      	add	r3, r2
 8008e64:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008e66:	69bb      	ldr	r3, [r7, #24]
 8008e68:	f003 0307 	and.w	r3, r3, #7
 8008e6c:	2b00      	cmp	r3, #0
 8008e6e:	d009      	beq.n	8008e84 <pvPortMalloc+0xf4>
 8008e70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e74:	f383 8811 	msr	BASEPRI, r3
 8008e78:	f3bf 8f6f 	isb	sy
 8008e7c:	f3bf 8f4f 	dsb	sy
 8008e80:	613b      	str	r3, [r7, #16]
 8008e82:	e7fe      	b.n	8008e82 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008e84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e86:	685a      	ldr	r2, [r3, #4]
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	1ad2      	subs	r2, r2, r3
 8008e8c:	69bb      	ldr	r3, [r7, #24]
 8008e8e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8008e90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e92:	687a      	ldr	r2, [r7, #4]
 8008e94:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8008e96:	69b8      	ldr	r0, [r7, #24]
 8008e98:	f000 f8f6 	bl	8009088 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008e9c:	4b1a      	ldr	r3, [pc, #104]	; (8008f08 <pvPortMalloc+0x178>)
 8008e9e:	681a      	ldr	r2, [r3, #0]
 8008ea0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ea2:	685b      	ldr	r3, [r3, #4]
 8008ea4:	1ad3      	subs	r3, r2, r3
 8008ea6:	4a18      	ldr	r2, [pc, #96]	; (8008f08 <pvPortMalloc+0x178>)
 8008ea8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8008eaa:	4b17      	ldr	r3, [pc, #92]	; (8008f08 <pvPortMalloc+0x178>)
 8008eac:	681a      	ldr	r2, [r3, #0]
 8008eae:	4b18      	ldr	r3, [pc, #96]	; (8008f10 <pvPortMalloc+0x180>)
 8008eb0:	681b      	ldr	r3, [r3, #0]
 8008eb2:	429a      	cmp	r2, r3
 8008eb4:	d203      	bcs.n	8008ebe <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8008eb6:	4b14      	ldr	r3, [pc, #80]	; (8008f08 <pvPortMalloc+0x178>)
 8008eb8:	681b      	ldr	r3, [r3, #0]
 8008eba:	4a15      	ldr	r2, [pc, #84]	; (8008f10 <pvPortMalloc+0x180>)
 8008ebc:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8008ebe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ec0:	685a      	ldr	r2, [r3, #4]
 8008ec2:	4b10      	ldr	r3, [pc, #64]	; (8008f04 <pvPortMalloc+0x174>)
 8008ec4:	681b      	ldr	r3, [r3, #0]
 8008ec6:	431a      	orrs	r2, r3
 8008ec8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008eca:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8008ecc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ece:	2200      	movs	r2, #0
 8008ed0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8008ed2:	f7ff f99f 	bl	8008214 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8008ed6:	69fb      	ldr	r3, [r7, #28]
 8008ed8:	f003 0307 	and.w	r3, r3, #7
 8008edc:	2b00      	cmp	r3, #0
 8008ede:	d009      	beq.n	8008ef4 <pvPortMalloc+0x164>
 8008ee0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ee4:	f383 8811 	msr	BASEPRI, r3
 8008ee8:	f3bf 8f6f 	isb	sy
 8008eec:	f3bf 8f4f 	dsb	sy
 8008ef0:	60fb      	str	r3, [r7, #12]
 8008ef2:	e7fe      	b.n	8008ef2 <pvPortMalloc+0x162>
	return pvReturn;
 8008ef4:	69fb      	ldr	r3, [r7, #28]
}
 8008ef6:	4618      	mov	r0, r3
 8008ef8:	3728      	adds	r7, #40	; 0x28
 8008efa:	46bd      	mov	sp, r7
 8008efc:	bd80      	pop	{r7, pc}
 8008efe:	bf00      	nop
 8008f00:	200041e4 	.word	0x200041e4
 8008f04:	200041f0 	.word	0x200041f0
 8008f08:	200041e8 	.word	0x200041e8
 8008f0c:	200041dc 	.word	0x200041dc
 8008f10:	200041ec 	.word	0x200041ec

08008f14 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008f14:	b580      	push	{r7, lr}
 8008f16:	b086      	sub	sp, #24
 8008f18:	af00      	add	r7, sp, #0
 8008f1a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	2b00      	cmp	r3, #0
 8008f24:	d046      	beq.n	8008fb4 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8008f26:	2308      	movs	r3, #8
 8008f28:	425b      	negs	r3, r3
 8008f2a:	697a      	ldr	r2, [r7, #20]
 8008f2c:	4413      	add	r3, r2
 8008f2e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8008f30:	697b      	ldr	r3, [r7, #20]
 8008f32:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008f34:	693b      	ldr	r3, [r7, #16]
 8008f36:	685a      	ldr	r2, [r3, #4]
 8008f38:	4b20      	ldr	r3, [pc, #128]	; (8008fbc <vPortFree+0xa8>)
 8008f3a:	681b      	ldr	r3, [r3, #0]
 8008f3c:	4013      	ands	r3, r2
 8008f3e:	2b00      	cmp	r3, #0
 8008f40:	d109      	bne.n	8008f56 <vPortFree+0x42>
 8008f42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f46:	f383 8811 	msr	BASEPRI, r3
 8008f4a:	f3bf 8f6f 	isb	sy
 8008f4e:	f3bf 8f4f 	dsb	sy
 8008f52:	60fb      	str	r3, [r7, #12]
 8008f54:	e7fe      	b.n	8008f54 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8008f56:	693b      	ldr	r3, [r7, #16]
 8008f58:	681b      	ldr	r3, [r3, #0]
 8008f5a:	2b00      	cmp	r3, #0
 8008f5c:	d009      	beq.n	8008f72 <vPortFree+0x5e>
 8008f5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f62:	f383 8811 	msr	BASEPRI, r3
 8008f66:	f3bf 8f6f 	isb	sy
 8008f6a:	f3bf 8f4f 	dsb	sy
 8008f6e:	60bb      	str	r3, [r7, #8]
 8008f70:	e7fe      	b.n	8008f70 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8008f72:	693b      	ldr	r3, [r7, #16]
 8008f74:	685a      	ldr	r2, [r3, #4]
 8008f76:	4b11      	ldr	r3, [pc, #68]	; (8008fbc <vPortFree+0xa8>)
 8008f78:	681b      	ldr	r3, [r3, #0]
 8008f7a:	4013      	ands	r3, r2
 8008f7c:	2b00      	cmp	r3, #0
 8008f7e:	d019      	beq.n	8008fb4 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8008f80:	693b      	ldr	r3, [r7, #16]
 8008f82:	681b      	ldr	r3, [r3, #0]
 8008f84:	2b00      	cmp	r3, #0
 8008f86:	d115      	bne.n	8008fb4 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008f88:	693b      	ldr	r3, [r7, #16]
 8008f8a:	685a      	ldr	r2, [r3, #4]
 8008f8c:	4b0b      	ldr	r3, [pc, #44]	; (8008fbc <vPortFree+0xa8>)
 8008f8e:	681b      	ldr	r3, [r3, #0]
 8008f90:	43db      	mvns	r3, r3
 8008f92:	401a      	ands	r2, r3
 8008f94:	693b      	ldr	r3, [r7, #16]
 8008f96:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8008f98:	f7ff f92e 	bl	80081f8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8008f9c:	693b      	ldr	r3, [r7, #16]
 8008f9e:	685a      	ldr	r2, [r3, #4]
 8008fa0:	4b07      	ldr	r3, [pc, #28]	; (8008fc0 <vPortFree+0xac>)
 8008fa2:	681b      	ldr	r3, [r3, #0]
 8008fa4:	4413      	add	r3, r2
 8008fa6:	4a06      	ldr	r2, [pc, #24]	; (8008fc0 <vPortFree+0xac>)
 8008fa8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8008faa:	6938      	ldr	r0, [r7, #16]
 8008fac:	f000 f86c 	bl	8009088 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8008fb0:	f7ff f930 	bl	8008214 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8008fb4:	bf00      	nop
 8008fb6:	3718      	adds	r7, #24
 8008fb8:	46bd      	mov	sp, r7
 8008fba:	bd80      	pop	{r7, pc}
 8008fbc:	200041f0 	.word	0x200041f0
 8008fc0:	200041e8 	.word	0x200041e8

08008fc4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8008fc4:	b480      	push	{r7}
 8008fc6:	b085      	sub	sp, #20
 8008fc8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8008fca:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8008fce:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8008fd0:	4b27      	ldr	r3, [pc, #156]	; (8009070 <prvHeapInit+0xac>)
 8008fd2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008fd4:	68fb      	ldr	r3, [r7, #12]
 8008fd6:	f003 0307 	and.w	r3, r3, #7
 8008fda:	2b00      	cmp	r3, #0
 8008fdc:	d00c      	beq.n	8008ff8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8008fde:	68fb      	ldr	r3, [r7, #12]
 8008fe0:	3307      	adds	r3, #7
 8008fe2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008fe4:	68fb      	ldr	r3, [r7, #12]
 8008fe6:	f023 0307 	bic.w	r3, r3, #7
 8008fea:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8008fec:	68ba      	ldr	r2, [r7, #8]
 8008fee:	68fb      	ldr	r3, [r7, #12]
 8008ff0:	1ad3      	subs	r3, r2, r3
 8008ff2:	4a1f      	ldr	r2, [pc, #124]	; (8009070 <prvHeapInit+0xac>)
 8008ff4:	4413      	add	r3, r2
 8008ff6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008ff8:	68fb      	ldr	r3, [r7, #12]
 8008ffa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8008ffc:	4a1d      	ldr	r2, [pc, #116]	; (8009074 <prvHeapInit+0xb0>)
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8009002:	4b1c      	ldr	r3, [pc, #112]	; (8009074 <prvHeapInit+0xb0>)
 8009004:	2200      	movs	r2, #0
 8009006:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	68ba      	ldr	r2, [r7, #8]
 800900c:	4413      	add	r3, r2
 800900e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8009010:	2208      	movs	r2, #8
 8009012:	68fb      	ldr	r3, [r7, #12]
 8009014:	1a9b      	subs	r3, r3, r2
 8009016:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009018:	68fb      	ldr	r3, [r7, #12]
 800901a:	f023 0307 	bic.w	r3, r3, #7
 800901e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8009020:	68fb      	ldr	r3, [r7, #12]
 8009022:	4a15      	ldr	r2, [pc, #84]	; (8009078 <prvHeapInit+0xb4>)
 8009024:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8009026:	4b14      	ldr	r3, [pc, #80]	; (8009078 <prvHeapInit+0xb4>)
 8009028:	681b      	ldr	r3, [r3, #0]
 800902a:	2200      	movs	r2, #0
 800902c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800902e:	4b12      	ldr	r3, [pc, #72]	; (8009078 <prvHeapInit+0xb4>)
 8009030:	681b      	ldr	r3, [r3, #0]
 8009032:	2200      	movs	r2, #0
 8009034:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800903a:	683b      	ldr	r3, [r7, #0]
 800903c:	68fa      	ldr	r2, [r7, #12]
 800903e:	1ad2      	subs	r2, r2, r3
 8009040:	683b      	ldr	r3, [r7, #0]
 8009042:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8009044:	4b0c      	ldr	r3, [pc, #48]	; (8009078 <prvHeapInit+0xb4>)
 8009046:	681a      	ldr	r2, [r3, #0]
 8009048:	683b      	ldr	r3, [r7, #0]
 800904a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800904c:	683b      	ldr	r3, [r7, #0]
 800904e:	685b      	ldr	r3, [r3, #4]
 8009050:	4a0a      	ldr	r2, [pc, #40]	; (800907c <prvHeapInit+0xb8>)
 8009052:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009054:	683b      	ldr	r3, [r7, #0]
 8009056:	685b      	ldr	r3, [r3, #4]
 8009058:	4a09      	ldr	r2, [pc, #36]	; (8009080 <prvHeapInit+0xbc>)
 800905a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800905c:	4b09      	ldr	r3, [pc, #36]	; (8009084 <prvHeapInit+0xc0>)
 800905e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8009062:	601a      	str	r2, [r3, #0]
}
 8009064:	bf00      	nop
 8009066:	3714      	adds	r7, #20
 8009068:	46bd      	mov	sp, r7
 800906a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800906e:	4770      	bx	lr
 8009070:	200005dc 	.word	0x200005dc
 8009074:	200041dc 	.word	0x200041dc
 8009078:	200041e4 	.word	0x200041e4
 800907c:	200041ec 	.word	0x200041ec
 8009080:	200041e8 	.word	0x200041e8
 8009084:	200041f0 	.word	0x200041f0

08009088 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8009088:	b480      	push	{r7}
 800908a:	b085      	sub	sp, #20
 800908c:	af00      	add	r7, sp, #0
 800908e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8009090:	4b28      	ldr	r3, [pc, #160]	; (8009134 <prvInsertBlockIntoFreeList+0xac>)
 8009092:	60fb      	str	r3, [r7, #12]
 8009094:	e002      	b.n	800909c <prvInsertBlockIntoFreeList+0x14>
 8009096:	68fb      	ldr	r3, [r7, #12]
 8009098:	681b      	ldr	r3, [r3, #0]
 800909a:	60fb      	str	r3, [r7, #12]
 800909c:	68fb      	ldr	r3, [r7, #12]
 800909e:	681b      	ldr	r3, [r3, #0]
 80090a0:	687a      	ldr	r2, [r7, #4]
 80090a2:	429a      	cmp	r2, r3
 80090a4:	d8f7      	bhi.n	8009096 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80090a6:	68fb      	ldr	r3, [r7, #12]
 80090a8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80090aa:	68fb      	ldr	r3, [r7, #12]
 80090ac:	685b      	ldr	r3, [r3, #4]
 80090ae:	68ba      	ldr	r2, [r7, #8]
 80090b0:	4413      	add	r3, r2
 80090b2:	687a      	ldr	r2, [r7, #4]
 80090b4:	429a      	cmp	r2, r3
 80090b6:	d108      	bne.n	80090ca <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80090b8:	68fb      	ldr	r3, [r7, #12]
 80090ba:	685a      	ldr	r2, [r3, #4]
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	685b      	ldr	r3, [r3, #4]
 80090c0:	441a      	add	r2, r3
 80090c2:	68fb      	ldr	r3, [r7, #12]
 80090c4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80090c6:	68fb      	ldr	r3, [r7, #12]
 80090c8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	685b      	ldr	r3, [r3, #4]
 80090d2:	68ba      	ldr	r2, [r7, #8]
 80090d4:	441a      	add	r2, r3
 80090d6:	68fb      	ldr	r3, [r7, #12]
 80090d8:	681b      	ldr	r3, [r3, #0]
 80090da:	429a      	cmp	r2, r3
 80090dc:	d118      	bne.n	8009110 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80090de:	68fb      	ldr	r3, [r7, #12]
 80090e0:	681a      	ldr	r2, [r3, #0]
 80090e2:	4b15      	ldr	r3, [pc, #84]	; (8009138 <prvInsertBlockIntoFreeList+0xb0>)
 80090e4:	681b      	ldr	r3, [r3, #0]
 80090e6:	429a      	cmp	r2, r3
 80090e8:	d00d      	beq.n	8009106 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	685a      	ldr	r2, [r3, #4]
 80090ee:	68fb      	ldr	r3, [r7, #12]
 80090f0:	681b      	ldr	r3, [r3, #0]
 80090f2:	685b      	ldr	r3, [r3, #4]
 80090f4:	441a      	add	r2, r3
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80090fa:	68fb      	ldr	r3, [r7, #12]
 80090fc:	681b      	ldr	r3, [r3, #0]
 80090fe:	681a      	ldr	r2, [r3, #0]
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	601a      	str	r2, [r3, #0]
 8009104:	e008      	b.n	8009118 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8009106:	4b0c      	ldr	r3, [pc, #48]	; (8009138 <prvInsertBlockIntoFreeList+0xb0>)
 8009108:	681a      	ldr	r2, [r3, #0]
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	601a      	str	r2, [r3, #0]
 800910e:	e003      	b.n	8009118 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8009110:	68fb      	ldr	r3, [r7, #12]
 8009112:	681a      	ldr	r2, [r3, #0]
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8009118:	68fa      	ldr	r2, [r7, #12]
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	429a      	cmp	r2, r3
 800911e:	d002      	beq.n	8009126 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8009120:	68fb      	ldr	r3, [r7, #12]
 8009122:	687a      	ldr	r2, [r7, #4]
 8009124:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009126:	bf00      	nop
 8009128:	3714      	adds	r7, #20
 800912a:	46bd      	mov	sp, r7
 800912c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009130:	4770      	bx	lr
 8009132:	bf00      	nop
 8009134:	200041dc 	.word	0x200041dc
 8009138:	200041e4 	.word	0x200041e4

0800913c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800913c:	b580      	push	{r7, lr}
 800913e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PreTreatment */
  
  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8009140:	2200      	movs	r2, #0
 8009142:	4912      	ldr	r1, [pc, #72]	; (800918c <MX_USB_DEVICE_Init+0x50>)
 8009144:	4812      	ldr	r0, [pc, #72]	; (8009190 <MX_USB_DEVICE_Init+0x54>)
 8009146:	f7fd fcb0 	bl	8006aaa <USBD_Init>
 800914a:	4603      	mov	r3, r0
 800914c:	2b00      	cmp	r3, #0
 800914e:	d001      	beq.n	8009154 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8009150:	f7f7 ff58 	bl	8001004 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8009154:	490f      	ldr	r1, [pc, #60]	; (8009194 <MX_USB_DEVICE_Init+0x58>)
 8009156:	480e      	ldr	r0, [pc, #56]	; (8009190 <MX_USB_DEVICE_Init+0x54>)
 8009158:	f7fd fcd2 	bl	8006b00 <USBD_RegisterClass>
 800915c:	4603      	mov	r3, r0
 800915e:	2b00      	cmp	r3, #0
 8009160:	d001      	beq.n	8009166 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8009162:	f7f7 ff4f 	bl	8001004 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8009166:	490c      	ldr	r1, [pc, #48]	; (8009198 <MX_USB_DEVICE_Init+0x5c>)
 8009168:	4809      	ldr	r0, [pc, #36]	; (8009190 <MX_USB_DEVICE_Init+0x54>)
 800916a:	f7fd fc2f 	bl	80069cc <USBD_CDC_RegisterInterface>
 800916e:	4603      	mov	r3, r0
 8009170:	2b00      	cmp	r3, #0
 8009172:	d001      	beq.n	8009178 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8009174:	f7f7 ff46 	bl	8001004 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8009178:	4805      	ldr	r0, [pc, #20]	; (8009190 <MX_USB_DEVICE_Init+0x54>)
 800917a:	f7fd fcdb 	bl	8006b34 <USBD_Start>
 800917e:	4603      	mov	r3, r0
 8009180:	2b00      	cmp	r3, #0
 8009182:	d001      	beq.n	8009188 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8009184:	f7f7 ff3e 	bl	8001004 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8009188:	bf00      	nop
 800918a:	bd80      	pop	{r7, pc}
 800918c:	2000012c 	.word	0x2000012c
 8009190:	2000429c 	.word	0x2000429c
 8009194:	20000014 	.word	0x20000014
 8009198:	2000011c 	.word	0x2000011c

0800919c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800919c:	b580      	push	{r7, lr}
 800919e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80091a0:	2200      	movs	r2, #0
 80091a2:	4905      	ldr	r1, [pc, #20]	; (80091b8 <CDC_Init_FS+0x1c>)
 80091a4:	4805      	ldr	r0, [pc, #20]	; (80091bc <CDC_Init_FS+0x20>)
 80091a6:	f7fd fc28 	bl	80069fa <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80091aa:	4905      	ldr	r1, [pc, #20]	; (80091c0 <CDC_Init_FS+0x24>)
 80091ac:	4803      	ldr	r0, [pc, #12]	; (80091bc <CDC_Init_FS+0x20>)
 80091ae:	f7fd fc3e 	bl	8006a2e <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 80091b2:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80091b4:	4618      	mov	r0, r3
 80091b6:	bd80      	pop	{r7, pc}
 80091b8:	20004d38 	.word	0x20004d38
 80091bc:	2000429c 	.word	0x2000429c
 80091c0:	20004538 	.word	0x20004538

080091c4 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 80091c4:	b480      	push	{r7}
 80091c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 80091c8:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80091ca:	4618      	mov	r0, r3
 80091cc:	46bd      	mov	sp, r7
 80091ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091d2:	4770      	bx	lr

080091d4 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 80091d4:	b480      	push	{r7}
 80091d6:	b083      	sub	sp, #12
 80091d8:	af00      	add	r7, sp, #0
 80091da:	4603      	mov	r3, r0
 80091dc:	6039      	str	r1, [r7, #0]
 80091de:	71fb      	strb	r3, [r7, #7]
 80091e0:	4613      	mov	r3, r2
 80091e2:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 80091e4:	79fb      	ldrb	r3, [r7, #7]
 80091e6:	2b23      	cmp	r3, #35	; 0x23
 80091e8:	d84a      	bhi.n	8009280 <CDC_Control_FS+0xac>
 80091ea:	a201      	add	r2, pc, #4	; (adr r2, 80091f0 <CDC_Control_FS+0x1c>)
 80091ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80091f0:	08009281 	.word	0x08009281
 80091f4:	08009281 	.word	0x08009281
 80091f8:	08009281 	.word	0x08009281
 80091fc:	08009281 	.word	0x08009281
 8009200:	08009281 	.word	0x08009281
 8009204:	08009281 	.word	0x08009281
 8009208:	08009281 	.word	0x08009281
 800920c:	08009281 	.word	0x08009281
 8009210:	08009281 	.word	0x08009281
 8009214:	08009281 	.word	0x08009281
 8009218:	08009281 	.word	0x08009281
 800921c:	08009281 	.word	0x08009281
 8009220:	08009281 	.word	0x08009281
 8009224:	08009281 	.word	0x08009281
 8009228:	08009281 	.word	0x08009281
 800922c:	08009281 	.word	0x08009281
 8009230:	08009281 	.word	0x08009281
 8009234:	08009281 	.word	0x08009281
 8009238:	08009281 	.word	0x08009281
 800923c:	08009281 	.word	0x08009281
 8009240:	08009281 	.word	0x08009281
 8009244:	08009281 	.word	0x08009281
 8009248:	08009281 	.word	0x08009281
 800924c:	08009281 	.word	0x08009281
 8009250:	08009281 	.word	0x08009281
 8009254:	08009281 	.word	0x08009281
 8009258:	08009281 	.word	0x08009281
 800925c:	08009281 	.word	0x08009281
 8009260:	08009281 	.word	0x08009281
 8009264:	08009281 	.word	0x08009281
 8009268:	08009281 	.word	0x08009281
 800926c:	08009281 	.word	0x08009281
 8009270:	08009281 	.word	0x08009281
 8009274:	08009281 	.word	0x08009281
 8009278:	08009281 	.word	0x08009281
 800927c:	08009281 	.word	0x08009281
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8009280:	bf00      	nop
  }

  return (USBD_OK);
 8009282:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8009284:	4618      	mov	r0, r3
 8009286:	370c      	adds	r7, #12
 8009288:	46bd      	mov	sp, r7
 800928a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800928e:	4770      	bx	lr

08009290 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8009290:	b580      	push	{r7, lr}
 8009292:	b082      	sub	sp, #8
 8009294:	af00      	add	r7, sp, #0
 8009296:	6078      	str	r0, [r7, #4]
 8009298:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800929a:	6879      	ldr	r1, [r7, #4]
 800929c:	4805      	ldr	r0, [pc, #20]	; (80092b4 <CDC_Receive_FS+0x24>)
 800929e:	f7fd fbc6 	bl	8006a2e <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80092a2:	4804      	ldr	r0, [pc, #16]	; (80092b4 <CDC_Receive_FS+0x24>)
 80092a4:	f7fd fbd7 	bl	8006a56 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 80092a8:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80092aa:	4618      	mov	r0, r3
 80092ac:	3708      	adds	r7, #8
 80092ae:	46bd      	mov	sp, r7
 80092b0:	bd80      	pop	{r7, pc}
 80092b2:	bf00      	nop
 80092b4:	2000429c 	.word	0x2000429c

080092b8 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80092b8:	b480      	push	{r7}
 80092ba:	b083      	sub	sp, #12
 80092bc:	af00      	add	r7, sp, #0
 80092be:	4603      	mov	r3, r0
 80092c0:	6039      	str	r1, [r7, #0]
 80092c2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80092c4:	683b      	ldr	r3, [r7, #0]
 80092c6:	2212      	movs	r2, #18
 80092c8:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80092ca:	4b03      	ldr	r3, [pc, #12]	; (80092d8 <USBD_FS_DeviceDescriptor+0x20>)
}
 80092cc:	4618      	mov	r0, r3
 80092ce:	370c      	adds	r7, #12
 80092d0:	46bd      	mov	sp, r7
 80092d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092d6:	4770      	bx	lr
 80092d8:	20000148 	.word	0x20000148

080092dc <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80092dc:	b480      	push	{r7}
 80092de:	b083      	sub	sp, #12
 80092e0:	af00      	add	r7, sp, #0
 80092e2:	4603      	mov	r3, r0
 80092e4:	6039      	str	r1, [r7, #0]
 80092e6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80092e8:	683b      	ldr	r3, [r7, #0]
 80092ea:	2204      	movs	r2, #4
 80092ec:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80092ee:	4b03      	ldr	r3, [pc, #12]	; (80092fc <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80092f0:	4618      	mov	r0, r3
 80092f2:	370c      	adds	r7, #12
 80092f4:	46bd      	mov	sp, r7
 80092f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092fa:	4770      	bx	lr
 80092fc:	2000015c 	.word	0x2000015c

08009300 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009300:	b580      	push	{r7, lr}
 8009302:	b082      	sub	sp, #8
 8009304:	af00      	add	r7, sp, #0
 8009306:	4603      	mov	r3, r0
 8009308:	6039      	str	r1, [r7, #0]
 800930a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800930c:	79fb      	ldrb	r3, [r7, #7]
 800930e:	2b00      	cmp	r3, #0
 8009310:	d105      	bne.n	800931e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8009312:	683a      	ldr	r2, [r7, #0]
 8009314:	4907      	ldr	r1, [pc, #28]	; (8009334 <USBD_FS_ProductStrDescriptor+0x34>)
 8009316:	4808      	ldr	r0, [pc, #32]	; (8009338 <USBD_FS_ProductStrDescriptor+0x38>)
 8009318:	f7fe fb44 	bl	80079a4 <USBD_GetString>
 800931c:	e004      	b.n	8009328 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800931e:	683a      	ldr	r2, [r7, #0]
 8009320:	4904      	ldr	r1, [pc, #16]	; (8009334 <USBD_FS_ProductStrDescriptor+0x34>)
 8009322:	4805      	ldr	r0, [pc, #20]	; (8009338 <USBD_FS_ProductStrDescriptor+0x38>)
 8009324:	f7fe fb3e 	bl	80079a4 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009328:	4b02      	ldr	r3, [pc, #8]	; (8009334 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800932a:	4618      	mov	r0, r3
 800932c:	3708      	adds	r7, #8
 800932e:	46bd      	mov	sp, r7
 8009330:	bd80      	pop	{r7, pc}
 8009332:	bf00      	nop
 8009334:	20005538 	.word	0x20005538
 8009338:	08009dd8 	.word	0x08009dd8

0800933c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800933c:	b580      	push	{r7, lr}
 800933e:	b082      	sub	sp, #8
 8009340:	af00      	add	r7, sp, #0
 8009342:	4603      	mov	r3, r0
 8009344:	6039      	str	r1, [r7, #0]
 8009346:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8009348:	683a      	ldr	r2, [r7, #0]
 800934a:	4904      	ldr	r1, [pc, #16]	; (800935c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800934c:	4804      	ldr	r0, [pc, #16]	; (8009360 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800934e:	f7fe fb29 	bl	80079a4 <USBD_GetString>
  return USBD_StrDesc;
 8009352:	4b02      	ldr	r3, [pc, #8]	; (800935c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8009354:	4618      	mov	r0, r3
 8009356:	3708      	adds	r7, #8
 8009358:	46bd      	mov	sp, r7
 800935a:	bd80      	pop	{r7, pc}
 800935c:	20005538 	.word	0x20005538
 8009360:	08009df0 	.word	0x08009df0

08009364 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009364:	b580      	push	{r7, lr}
 8009366:	b082      	sub	sp, #8
 8009368:	af00      	add	r7, sp, #0
 800936a:	4603      	mov	r3, r0
 800936c:	6039      	str	r1, [r7, #0]
 800936e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8009370:	683b      	ldr	r3, [r7, #0]
 8009372:	221a      	movs	r2, #26
 8009374:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8009376:	f000 f843 	bl	8009400 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */
  
  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800937a:	4b02      	ldr	r3, [pc, #8]	; (8009384 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800937c:	4618      	mov	r0, r3
 800937e:	3708      	adds	r7, #8
 8009380:	46bd      	mov	sp, r7
 8009382:	bd80      	pop	{r7, pc}
 8009384:	20000160 	.word	0x20000160

08009388 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009388:	b580      	push	{r7, lr}
 800938a:	b082      	sub	sp, #8
 800938c:	af00      	add	r7, sp, #0
 800938e:	4603      	mov	r3, r0
 8009390:	6039      	str	r1, [r7, #0]
 8009392:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8009394:	79fb      	ldrb	r3, [r7, #7]
 8009396:	2b00      	cmp	r3, #0
 8009398:	d105      	bne.n	80093a6 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800939a:	683a      	ldr	r2, [r7, #0]
 800939c:	4907      	ldr	r1, [pc, #28]	; (80093bc <USBD_FS_ConfigStrDescriptor+0x34>)
 800939e:	4808      	ldr	r0, [pc, #32]	; (80093c0 <USBD_FS_ConfigStrDescriptor+0x38>)
 80093a0:	f7fe fb00 	bl	80079a4 <USBD_GetString>
 80093a4:	e004      	b.n	80093b0 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80093a6:	683a      	ldr	r2, [r7, #0]
 80093a8:	4904      	ldr	r1, [pc, #16]	; (80093bc <USBD_FS_ConfigStrDescriptor+0x34>)
 80093aa:	4805      	ldr	r0, [pc, #20]	; (80093c0 <USBD_FS_ConfigStrDescriptor+0x38>)
 80093ac:	f7fe fafa 	bl	80079a4 <USBD_GetString>
  }
  return USBD_StrDesc;
 80093b0:	4b02      	ldr	r3, [pc, #8]	; (80093bc <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80093b2:	4618      	mov	r0, r3
 80093b4:	3708      	adds	r7, #8
 80093b6:	46bd      	mov	sp, r7
 80093b8:	bd80      	pop	{r7, pc}
 80093ba:	bf00      	nop
 80093bc:	20005538 	.word	0x20005538
 80093c0:	08009e04 	.word	0x08009e04

080093c4 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80093c4:	b580      	push	{r7, lr}
 80093c6:	b082      	sub	sp, #8
 80093c8:	af00      	add	r7, sp, #0
 80093ca:	4603      	mov	r3, r0
 80093cc:	6039      	str	r1, [r7, #0]
 80093ce:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80093d0:	79fb      	ldrb	r3, [r7, #7]
 80093d2:	2b00      	cmp	r3, #0
 80093d4:	d105      	bne.n	80093e2 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80093d6:	683a      	ldr	r2, [r7, #0]
 80093d8:	4907      	ldr	r1, [pc, #28]	; (80093f8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80093da:	4808      	ldr	r0, [pc, #32]	; (80093fc <USBD_FS_InterfaceStrDescriptor+0x38>)
 80093dc:	f7fe fae2 	bl	80079a4 <USBD_GetString>
 80093e0:	e004      	b.n	80093ec <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80093e2:	683a      	ldr	r2, [r7, #0]
 80093e4:	4904      	ldr	r1, [pc, #16]	; (80093f8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80093e6:	4805      	ldr	r0, [pc, #20]	; (80093fc <USBD_FS_InterfaceStrDescriptor+0x38>)
 80093e8:	f7fe fadc 	bl	80079a4 <USBD_GetString>
  }
  return USBD_StrDesc;
 80093ec:	4b02      	ldr	r3, [pc, #8]	; (80093f8 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80093ee:	4618      	mov	r0, r3
 80093f0:	3708      	adds	r7, #8
 80093f2:	46bd      	mov	sp, r7
 80093f4:	bd80      	pop	{r7, pc}
 80093f6:	bf00      	nop
 80093f8:	20005538 	.word	0x20005538
 80093fc:	08009e10 	.word	0x08009e10

08009400 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor 
  * @param  None 
  * @retval None
  */
static void Get_SerialNum(void)
{
 8009400:	b580      	push	{r7, lr}
 8009402:	b084      	sub	sp, #16
 8009404:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8009406:	4b0f      	ldr	r3, [pc, #60]	; (8009444 <Get_SerialNum+0x44>)
 8009408:	681b      	ldr	r3, [r3, #0]
 800940a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800940c:	4b0e      	ldr	r3, [pc, #56]	; (8009448 <Get_SerialNum+0x48>)
 800940e:	681b      	ldr	r3, [r3, #0]
 8009410:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8009412:	4b0e      	ldr	r3, [pc, #56]	; (800944c <Get_SerialNum+0x4c>)
 8009414:	681b      	ldr	r3, [r3, #0]
 8009416:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8009418:	68fa      	ldr	r2, [r7, #12]
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	4413      	add	r3, r2
 800941e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8009420:	68fb      	ldr	r3, [r7, #12]
 8009422:	2b00      	cmp	r3, #0
 8009424:	d009      	beq.n	800943a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8009426:	2208      	movs	r2, #8
 8009428:	4909      	ldr	r1, [pc, #36]	; (8009450 <Get_SerialNum+0x50>)
 800942a:	68f8      	ldr	r0, [r7, #12]
 800942c:	f000 f814 	bl	8009458 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8009430:	2204      	movs	r2, #4
 8009432:	4908      	ldr	r1, [pc, #32]	; (8009454 <Get_SerialNum+0x54>)
 8009434:	68b8      	ldr	r0, [r7, #8]
 8009436:	f000 f80f 	bl	8009458 <IntToUnicode>
  }
}
 800943a:	bf00      	nop
 800943c:	3710      	adds	r7, #16
 800943e:	46bd      	mov	sp, r7
 8009440:	bd80      	pop	{r7, pc}
 8009442:	bf00      	nop
 8009444:	1fff7a10 	.word	0x1fff7a10
 8009448:	1fff7a14 	.word	0x1fff7a14
 800944c:	1fff7a18 	.word	0x1fff7a18
 8009450:	20000162 	.word	0x20000162
 8009454:	20000172 	.word	0x20000172

08009458 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer 
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8009458:	b480      	push	{r7}
 800945a:	b087      	sub	sp, #28
 800945c:	af00      	add	r7, sp, #0
 800945e:	60f8      	str	r0, [r7, #12]
 8009460:	60b9      	str	r1, [r7, #8]
 8009462:	4613      	mov	r3, r2
 8009464:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8009466:	2300      	movs	r3, #0
 8009468:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800946a:	2300      	movs	r3, #0
 800946c:	75fb      	strb	r3, [r7, #23]
 800946e:	e027      	b.n	80094c0 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8009470:	68fb      	ldr	r3, [r7, #12]
 8009472:	0f1b      	lsrs	r3, r3, #28
 8009474:	2b09      	cmp	r3, #9
 8009476:	d80b      	bhi.n	8009490 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8009478:	68fb      	ldr	r3, [r7, #12]
 800947a:	0f1b      	lsrs	r3, r3, #28
 800947c:	b2da      	uxtb	r2, r3
 800947e:	7dfb      	ldrb	r3, [r7, #23]
 8009480:	005b      	lsls	r3, r3, #1
 8009482:	4619      	mov	r1, r3
 8009484:	68bb      	ldr	r3, [r7, #8]
 8009486:	440b      	add	r3, r1
 8009488:	3230      	adds	r2, #48	; 0x30
 800948a:	b2d2      	uxtb	r2, r2
 800948c:	701a      	strb	r2, [r3, #0]
 800948e:	e00a      	b.n	80094a6 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8009490:	68fb      	ldr	r3, [r7, #12]
 8009492:	0f1b      	lsrs	r3, r3, #28
 8009494:	b2da      	uxtb	r2, r3
 8009496:	7dfb      	ldrb	r3, [r7, #23]
 8009498:	005b      	lsls	r3, r3, #1
 800949a:	4619      	mov	r1, r3
 800949c:	68bb      	ldr	r3, [r7, #8]
 800949e:	440b      	add	r3, r1
 80094a0:	3237      	adds	r2, #55	; 0x37
 80094a2:	b2d2      	uxtb	r2, r2
 80094a4:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80094a6:	68fb      	ldr	r3, [r7, #12]
 80094a8:	011b      	lsls	r3, r3, #4
 80094aa:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80094ac:	7dfb      	ldrb	r3, [r7, #23]
 80094ae:	005b      	lsls	r3, r3, #1
 80094b0:	3301      	adds	r3, #1
 80094b2:	68ba      	ldr	r2, [r7, #8]
 80094b4:	4413      	add	r3, r2
 80094b6:	2200      	movs	r2, #0
 80094b8:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80094ba:	7dfb      	ldrb	r3, [r7, #23]
 80094bc:	3301      	adds	r3, #1
 80094be:	75fb      	strb	r3, [r7, #23]
 80094c0:	7dfa      	ldrb	r2, [r7, #23]
 80094c2:	79fb      	ldrb	r3, [r7, #7]
 80094c4:	429a      	cmp	r2, r3
 80094c6:	d3d3      	bcc.n	8009470 <IntToUnicode+0x18>
  }
}
 80094c8:	bf00      	nop
 80094ca:	371c      	adds	r7, #28
 80094cc:	46bd      	mov	sp, r7
 80094ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094d2:	4770      	bx	lr

080094d4 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80094d4:	b580      	push	{r7, lr}
 80094d6:	b08a      	sub	sp, #40	; 0x28
 80094d8:	af00      	add	r7, sp, #0
 80094da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80094dc:	f107 0314 	add.w	r3, r7, #20
 80094e0:	2200      	movs	r2, #0
 80094e2:	601a      	str	r2, [r3, #0]
 80094e4:	605a      	str	r2, [r3, #4]
 80094e6:	609a      	str	r2, [r3, #8]
 80094e8:	60da      	str	r2, [r3, #12]
 80094ea:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	681b      	ldr	r3, [r3, #0]
 80094f0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80094f4:	d147      	bne.n	8009586 <HAL_PCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80094f6:	2300      	movs	r3, #0
 80094f8:	613b      	str	r3, [r7, #16]
 80094fa:	4b25      	ldr	r3, [pc, #148]	; (8009590 <HAL_PCD_MspInit+0xbc>)
 80094fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80094fe:	4a24      	ldr	r2, [pc, #144]	; (8009590 <HAL_PCD_MspInit+0xbc>)
 8009500:	f043 0301 	orr.w	r3, r3, #1
 8009504:	6313      	str	r3, [r2, #48]	; 0x30
 8009506:	4b22      	ldr	r3, [pc, #136]	; (8009590 <HAL_PCD_MspInit+0xbc>)
 8009508:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800950a:	f003 0301 	and.w	r3, r3, #1
 800950e:	613b      	str	r3, [r7, #16]
 8009510:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8009512:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8009516:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009518:	2302      	movs	r3, #2
 800951a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800951c:	2300      	movs	r3, #0
 800951e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009520:	2303      	movs	r3, #3
 8009522:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8009524:	230a      	movs	r3, #10
 8009526:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009528:	f107 0314 	add.w	r3, r7, #20
 800952c:	4619      	mov	r1, r3
 800952e:	4819      	ldr	r0, [pc, #100]	; (8009594 <HAL_PCD_MspInit+0xc0>)
 8009530:	f7f8 fde4 	bl	80020fc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8009534:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009538:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800953a:	2300      	movs	r3, #0
 800953c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800953e:	2300      	movs	r3, #0
 8009540:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8009542:	f107 0314 	add.w	r3, r7, #20
 8009546:	4619      	mov	r1, r3
 8009548:	4812      	ldr	r0, [pc, #72]	; (8009594 <HAL_PCD_MspInit+0xc0>)
 800954a:	f7f8 fdd7 	bl	80020fc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800954e:	4b10      	ldr	r3, [pc, #64]	; (8009590 <HAL_PCD_MspInit+0xbc>)
 8009550:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009552:	4a0f      	ldr	r2, [pc, #60]	; (8009590 <HAL_PCD_MspInit+0xbc>)
 8009554:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009558:	6353      	str	r3, [r2, #52]	; 0x34
 800955a:	2300      	movs	r3, #0
 800955c:	60fb      	str	r3, [r7, #12]
 800955e:	4b0c      	ldr	r3, [pc, #48]	; (8009590 <HAL_PCD_MspInit+0xbc>)
 8009560:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009562:	4a0b      	ldr	r2, [pc, #44]	; (8009590 <HAL_PCD_MspInit+0xbc>)
 8009564:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8009568:	6453      	str	r3, [r2, #68]	; 0x44
 800956a:	4b09      	ldr	r3, [pc, #36]	; (8009590 <HAL_PCD_MspInit+0xbc>)
 800956c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800956e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009572:	60fb      	str	r3, [r7, #12]
 8009574:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 8009576:	2200      	movs	r2, #0
 8009578:	2105      	movs	r1, #5
 800957a:	2043      	movs	r0, #67	; 0x43
 800957c:	f7f8 f8b4 	bl	80016e8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8009580:	2043      	movs	r0, #67	; 0x43
 8009582:	f7f8 f8cd 	bl	8001720 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8009586:	bf00      	nop
 8009588:	3728      	adds	r7, #40	; 0x28
 800958a:	46bd      	mov	sp, r7
 800958c:	bd80      	pop	{r7, pc}
 800958e:	bf00      	nop
 8009590:	40023800 	.word	0x40023800
 8009594:	40020000 	.word	0x40020000

08009598 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009598:	b580      	push	{r7, lr}
 800959a:	b082      	sub	sp, #8
 800959c:	af00      	add	r7, sp, #0
 800959e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80095ac:	4619      	mov	r1, r3
 80095ae:	4610      	mov	r0, r2
 80095b0:	f7fd fb09 	bl	8006bc6 <USBD_LL_SetupStage>
}
 80095b4:	bf00      	nop
 80095b6:	3708      	adds	r7, #8
 80095b8:	46bd      	mov	sp, r7
 80095ba:	bd80      	pop	{r7, pc}

080095bc <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80095bc:	b580      	push	{r7, lr}
 80095be:	b082      	sub	sp, #8
 80095c0:	af00      	add	r7, sp, #0
 80095c2:	6078      	str	r0, [r7, #4]
 80095c4:	460b      	mov	r3, r1
 80095c6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 80095ce:	78fa      	ldrb	r2, [r7, #3]
 80095d0:	6879      	ldr	r1, [r7, #4]
 80095d2:	4613      	mov	r3, r2
 80095d4:	00db      	lsls	r3, r3, #3
 80095d6:	1a9b      	subs	r3, r3, r2
 80095d8:	009b      	lsls	r3, r3, #2
 80095da:	440b      	add	r3, r1
 80095dc:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80095e0:	681a      	ldr	r2, [r3, #0]
 80095e2:	78fb      	ldrb	r3, [r7, #3]
 80095e4:	4619      	mov	r1, r3
 80095e6:	f7fd fb39 	bl	8006c5c <USBD_LL_DataOutStage>
}
 80095ea:	bf00      	nop
 80095ec:	3708      	adds	r7, #8
 80095ee:	46bd      	mov	sp, r7
 80095f0:	bd80      	pop	{r7, pc}

080095f2 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80095f2:	b580      	push	{r7, lr}
 80095f4:	b082      	sub	sp, #8
 80095f6:	af00      	add	r7, sp, #0
 80095f8:	6078      	str	r0, [r7, #4]
 80095fa:	460b      	mov	r3, r1
 80095fc:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8009604:	78fa      	ldrb	r2, [r7, #3]
 8009606:	6879      	ldr	r1, [r7, #4]
 8009608:	4613      	mov	r3, r2
 800960a:	00db      	lsls	r3, r3, #3
 800960c:	1a9b      	subs	r3, r3, r2
 800960e:	009b      	lsls	r3, r3, #2
 8009610:	440b      	add	r3, r1
 8009612:	3348      	adds	r3, #72	; 0x48
 8009614:	681a      	ldr	r2, [r3, #0]
 8009616:	78fb      	ldrb	r3, [r7, #3]
 8009618:	4619      	mov	r1, r3
 800961a:	f7fd fb90 	bl	8006d3e <USBD_LL_DataInStage>
}
 800961e:	bf00      	nop
 8009620:	3708      	adds	r7, #8
 8009622:	46bd      	mov	sp, r7
 8009624:	bd80      	pop	{r7, pc}

08009626 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009626:	b580      	push	{r7, lr}
 8009628:	b082      	sub	sp, #8
 800962a:	af00      	add	r7, sp, #0
 800962c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8009634:	4618      	mov	r0, r3
 8009636:	f7fd fc9e 	bl	8006f76 <USBD_LL_SOF>
}
 800963a:	bf00      	nop
 800963c:	3708      	adds	r7, #8
 800963e:	46bd      	mov	sp, r7
 8009640:	bd80      	pop	{r7, pc}

08009642 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{ 
 8009642:	b580      	push	{r7, lr}
 8009644:	b084      	sub	sp, #16
 8009646:	af00      	add	r7, sp, #0
 8009648:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800964a:	2301      	movs	r3, #1
 800964c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	68db      	ldr	r3, [r3, #12]
 8009652:	2b00      	cmp	r3, #0
 8009654:	d102      	bne.n	800965c <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8009656:	2300      	movs	r3, #0
 8009658:	73fb      	strb	r3, [r7, #15]
 800965a:	e008      	b.n	800966e <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	68db      	ldr	r3, [r3, #12]
 8009660:	2b02      	cmp	r3, #2
 8009662:	d102      	bne.n	800966a <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8009664:	2301      	movs	r3, #1
 8009666:	73fb      	strb	r3, [r7, #15]
 8009668:	e001      	b.n	800966e <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800966a:	f7f7 fccb 	bl	8001004 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8009674:	7bfa      	ldrb	r2, [r7, #15]
 8009676:	4611      	mov	r1, r2
 8009678:	4618      	mov	r0, r3
 800967a:	f7fd fc46 	bl	8006f0a <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8009684:	4618      	mov	r0, r3
 8009686:	f7fd fbff 	bl	8006e88 <USBD_LL_Reset>
}
 800968a:	bf00      	nop
 800968c:	3710      	adds	r7, #16
 800968e:	46bd      	mov	sp, r7
 8009690:	bd80      	pop	{r7, pc}
	...

08009694 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009694:	b580      	push	{r7, lr}
 8009696:	b082      	sub	sp, #8
 8009698:	af00      	add	r7, sp, #0
 800969a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80096a2:	4618      	mov	r0, r3
 80096a4:	f7fd fc41 	bl	8006f2a <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	681b      	ldr	r3, [r3, #0]
 80096ac:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80096b0:	681b      	ldr	r3, [r3, #0]
 80096b2:	687a      	ldr	r2, [r7, #4]
 80096b4:	6812      	ldr	r2, [r2, #0]
 80096b6:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80096ba:	f043 0301 	orr.w	r3, r3, #1
 80096be:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	6a1b      	ldr	r3, [r3, #32]
 80096c4:	2b00      	cmp	r3, #0
 80096c6:	d005      	beq.n	80096d4 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80096c8:	4b04      	ldr	r3, [pc, #16]	; (80096dc <HAL_PCD_SuspendCallback+0x48>)
 80096ca:	691b      	ldr	r3, [r3, #16]
 80096cc:	4a03      	ldr	r2, [pc, #12]	; (80096dc <HAL_PCD_SuspendCallback+0x48>)
 80096ce:	f043 0306 	orr.w	r3, r3, #6
 80096d2:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80096d4:	bf00      	nop
 80096d6:	3708      	adds	r7, #8
 80096d8:	46bd      	mov	sp, r7
 80096da:	bd80      	pop	{r7, pc}
 80096dc:	e000ed00 	.word	0xe000ed00

080096e0 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80096e0:	b580      	push	{r7, lr}
 80096e2:	b082      	sub	sp, #8
 80096e4:	af00      	add	r7, sp, #0
 80096e6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80096ee:	4618      	mov	r0, r3
 80096f0:	f7fd fc30 	bl	8006f54 <USBD_LL_Resume>
}
 80096f4:	bf00      	nop
 80096f6:	3708      	adds	r7, #8
 80096f8:	46bd      	mov	sp, r7
 80096fa:	bd80      	pop	{r7, pc}

080096fc <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80096fc:	b580      	push	{r7, lr}
 80096fe:	b082      	sub	sp, #8
 8009700:	af00      	add	r7, sp, #0
 8009702:	6078      	str	r0, [r7, #4]
 8009704:	460b      	mov	r3, r1
 8009706:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800970e:	78fa      	ldrb	r2, [r7, #3]
 8009710:	4611      	mov	r1, r2
 8009712:	4618      	mov	r0, r3
 8009714:	f7fd fc56 	bl	8006fc4 <USBD_LL_IsoOUTIncomplete>
}
 8009718:	bf00      	nop
 800971a:	3708      	adds	r7, #8
 800971c:	46bd      	mov	sp, r7
 800971e:	bd80      	pop	{r7, pc}

08009720 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009720:	b580      	push	{r7, lr}
 8009722:	b082      	sub	sp, #8
 8009724:	af00      	add	r7, sp, #0
 8009726:	6078      	str	r0, [r7, #4]
 8009728:	460b      	mov	r3, r1
 800972a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8009732:	78fa      	ldrb	r2, [r7, #3]
 8009734:	4611      	mov	r1, r2
 8009736:	4618      	mov	r0, r3
 8009738:	f7fd fc37 	bl	8006faa <USBD_LL_IsoINIncomplete>
}
 800973c:	bf00      	nop
 800973e:	3708      	adds	r7, #8
 8009740:	46bd      	mov	sp, r7
 8009742:	bd80      	pop	{r7, pc}

08009744 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009744:	b580      	push	{r7, lr}
 8009746:	b082      	sub	sp, #8
 8009748:	af00      	add	r7, sp, #0
 800974a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8009752:	4618      	mov	r0, r3
 8009754:	f7fd fc43 	bl	8006fde <USBD_LL_DevConnected>
}
 8009758:	bf00      	nop
 800975a:	3708      	adds	r7, #8
 800975c:	46bd      	mov	sp, r7
 800975e:	bd80      	pop	{r7, pc}

08009760 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009760:	b580      	push	{r7, lr}
 8009762:	b082      	sub	sp, #8
 8009764:	af00      	add	r7, sp, #0
 8009766:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800976e:	4618      	mov	r0, r3
 8009770:	f7fd fc40 	bl	8006ff4 <USBD_LL_DevDisconnected>
}
 8009774:	bf00      	nop
 8009776:	3708      	adds	r7, #8
 8009778:	46bd      	mov	sp, r7
 800977a:	bd80      	pop	{r7, pc}

0800977c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800977c:	b580      	push	{r7, lr}
 800977e:	b082      	sub	sp, #8
 8009780:	af00      	add	r7, sp, #0
 8009782:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	781b      	ldrb	r3, [r3, #0]
 8009788:	2b00      	cmp	r3, #0
 800978a:	d13c      	bne.n	8009806 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800978c:	4a20      	ldr	r2, [pc, #128]	; (8009810 <USBD_LL_Init+0x94>)
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	4a1e      	ldr	r2, [pc, #120]	; (8009810 <USBD_LL_Init+0x94>)
 8009798:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298
  
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800979c:	4b1c      	ldr	r3, [pc, #112]	; (8009810 <USBD_LL_Init+0x94>)
 800979e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80097a2:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 80097a4:	4b1a      	ldr	r3, [pc, #104]	; (8009810 <USBD_LL_Init+0x94>)
 80097a6:	2204      	movs	r2, #4
 80097a8:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80097aa:	4b19      	ldr	r3, [pc, #100]	; (8009810 <USBD_LL_Init+0x94>)
 80097ac:	2202      	movs	r2, #2
 80097ae:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80097b0:	4b17      	ldr	r3, [pc, #92]	; (8009810 <USBD_LL_Init+0x94>)
 80097b2:	2200      	movs	r2, #0
 80097b4:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80097b6:	4b16      	ldr	r3, [pc, #88]	; (8009810 <USBD_LL_Init+0x94>)
 80097b8:	2202      	movs	r2, #2
 80097ba:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 80097bc:	4b14      	ldr	r3, [pc, #80]	; (8009810 <USBD_LL_Init+0x94>)
 80097be:	2201      	movs	r2, #1
 80097c0:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80097c2:	4b13      	ldr	r3, [pc, #76]	; (8009810 <USBD_LL_Init+0x94>)
 80097c4:	2200      	movs	r2, #0
 80097c6:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80097c8:	4b11      	ldr	r3, [pc, #68]	; (8009810 <USBD_LL_Init+0x94>)
 80097ca:	2200      	movs	r2, #0
 80097cc:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 80097ce:	4b10      	ldr	r3, [pc, #64]	; (8009810 <USBD_LL_Init+0x94>)
 80097d0:	2201      	movs	r2, #1
 80097d2:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80097d4:	4b0e      	ldr	r3, [pc, #56]	; (8009810 <USBD_LL_Init+0x94>)
 80097d6:	2200      	movs	r2, #0
 80097d8:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80097da:	480d      	ldr	r0, [pc, #52]	; (8009810 <USBD_LL_Init+0x94>)
 80097dc:	f7f8 fe51 	bl	8002482 <HAL_PCD_Init>
 80097e0:	4603      	mov	r3, r0
 80097e2:	2b00      	cmp	r3, #0
 80097e4:	d001      	beq.n	80097ea <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 80097e6:	f7f7 fc0d 	bl	8001004 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 80097ea:	2180      	movs	r1, #128	; 0x80
 80097ec:	4808      	ldr	r0, [pc, #32]	; (8009810 <USBD_LL_Init+0x94>)
 80097ee:	f7f9 ffb6 	bl	800375e <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 80097f2:	2240      	movs	r2, #64	; 0x40
 80097f4:	2100      	movs	r1, #0
 80097f6:	4806      	ldr	r0, [pc, #24]	; (8009810 <USBD_LL_Init+0x94>)
 80097f8:	f7f9 ff6a 	bl	80036d0 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 80097fc:	2280      	movs	r2, #128	; 0x80
 80097fe:	2101      	movs	r1, #1
 8009800:	4803      	ldr	r0, [pc, #12]	; (8009810 <USBD_LL_Init+0x94>)
 8009802:	f7f9 ff65 	bl	80036d0 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8009806:	2300      	movs	r3, #0
}
 8009808:	4618      	mov	r0, r3
 800980a:	3708      	adds	r7, #8
 800980c:	46bd      	mov	sp, r7
 800980e:	bd80      	pop	{r7, pc}
 8009810:	20005738 	.word	0x20005738

08009814 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver. 
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8009814:	b580      	push	{r7, lr}
 8009816:	b084      	sub	sp, #16
 8009818:	af00      	add	r7, sp, #0
 800981a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800981c:	2300      	movs	r3, #0
 800981e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009820:	2300      	movs	r3, #0
 8009822:	73bb      	strb	r3, [r7, #14]
 
  hal_status = HAL_PCD_Start(pdev->pData);
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800982a:	4618      	mov	r0, r3
 800982c:	f7f8 ff46 	bl	80026bc <HAL_PCD_Start>
 8009830:	4603      	mov	r3, r0
 8009832:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);     
 8009834:	7bfb      	ldrb	r3, [r7, #15]
 8009836:	4618      	mov	r0, r3
 8009838:	f000 f92e 	bl	8009a98 <USBD_Get_USB_Status>
 800983c:	4603      	mov	r3, r0
 800983e:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 8009840:	7bbb      	ldrb	r3, [r7, #14]
}
 8009842:	4618      	mov	r0, r3
 8009844:	3710      	adds	r7, #16
 8009846:	46bd      	mov	sp, r7
 8009848:	bd80      	pop	{r7, pc}

0800984a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800984a:	b580      	push	{r7, lr}
 800984c:	b084      	sub	sp, #16
 800984e:	af00      	add	r7, sp, #0
 8009850:	6078      	str	r0, [r7, #4]
 8009852:	4608      	mov	r0, r1
 8009854:	4611      	mov	r1, r2
 8009856:	461a      	mov	r2, r3
 8009858:	4603      	mov	r3, r0
 800985a:	70fb      	strb	r3, [r7, #3]
 800985c:	460b      	mov	r3, r1
 800985e:	70bb      	strb	r3, [r7, #2]
 8009860:	4613      	mov	r3, r2
 8009862:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009864:	2300      	movs	r3, #0
 8009866:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009868:	2300      	movs	r3, #0
 800986a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 8009872:	78bb      	ldrb	r3, [r7, #2]
 8009874:	883a      	ldrh	r2, [r7, #0]
 8009876:	78f9      	ldrb	r1, [r7, #3]
 8009878:	f7f9 fb1b 	bl	8002eb2 <HAL_PCD_EP_Open>
 800987c:	4603      	mov	r3, r0
 800987e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009880:	7bfb      	ldrb	r3, [r7, #15]
 8009882:	4618      	mov	r0, r3
 8009884:	f000 f908 	bl	8009a98 <USBD_Get_USB_Status>
 8009888:	4603      	mov	r3, r0
 800988a:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 800988c:	7bbb      	ldrb	r3, [r7, #14]
}
 800988e:	4618      	mov	r0, r3
 8009890:	3710      	adds	r7, #16
 8009892:	46bd      	mov	sp, r7
 8009894:	bd80      	pop	{r7, pc}

08009896 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009896:	b580      	push	{r7, lr}
 8009898:	b084      	sub	sp, #16
 800989a:	af00      	add	r7, sp, #0
 800989c:	6078      	str	r0, [r7, #4]
 800989e:	460b      	mov	r3, r1
 80098a0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80098a2:	2300      	movs	r3, #0
 80098a4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80098a6:	2300      	movs	r3, #0
 80098a8:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80098aa:	687b      	ldr	r3, [r7, #4]
 80098ac:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 80098b0:	78fa      	ldrb	r2, [r7, #3]
 80098b2:	4611      	mov	r1, r2
 80098b4:	4618      	mov	r0, r3
 80098b6:	f7f9 fb64 	bl	8002f82 <HAL_PCD_EP_Close>
 80098ba:	4603      	mov	r3, r0
 80098bc:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);    
 80098be:	7bfb      	ldrb	r3, [r7, #15]
 80098c0:	4618      	mov	r0, r3
 80098c2:	f000 f8e9 	bl	8009a98 <USBD_Get_USB_Status>
 80098c6:	4603      	mov	r3, r0
 80098c8:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;  
 80098ca:	7bbb      	ldrb	r3, [r7, #14]
}
 80098cc:	4618      	mov	r0, r3
 80098ce:	3710      	adds	r7, #16
 80098d0:	46bd      	mov	sp, r7
 80098d2:	bd80      	pop	{r7, pc}

080098d4 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80098d4:	b580      	push	{r7, lr}
 80098d6:	b084      	sub	sp, #16
 80098d8:	af00      	add	r7, sp, #0
 80098da:	6078      	str	r0, [r7, #4]
 80098dc:	460b      	mov	r3, r1
 80098de:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80098e0:	2300      	movs	r3, #0
 80098e2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80098e4:	2300      	movs	r3, #0
 80098e6:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 80098ee:	78fa      	ldrb	r2, [r7, #3]
 80098f0:	4611      	mov	r1, r2
 80098f2:	4618      	mov	r0, r3
 80098f4:	f7f9 fc3c 	bl	8003170 <HAL_PCD_EP_SetStall>
 80098f8:	4603      	mov	r3, r0
 80098fa:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80098fc:	7bfb      	ldrb	r3, [r7, #15]
 80098fe:	4618      	mov	r0, r3
 8009900:	f000 f8ca 	bl	8009a98 <USBD_Get_USB_Status>
 8009904:	4603      	mov	r3, r0
 8009906:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;  
 8009908:	7bbb      	ldrb	r3, [r7, #14]
}
 800990a:	4618      	mov	r0, r3
 800990c:	3710      	adds	r7, #16
 800990e:	46bd      	mov	sp, r7
 8009910:	bd80      	pop	{r7, pc}

08009912 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009912:	b580      	push	{r7, lr}
 8009914:	b084      	sub	sp, #16
 8009916:	af00      	add	r7, sp, #0
 8009918:	6078      	str	r0, [r7, #4]
 800991a:	460b      	mov	r3, r1
 800991c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800991e:	2300      	movs	r3, #0
 8009920:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009922:	2300      	movs	r3, #0
 8009924:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800992c:	78fa      	ldrb	r2, [r7, #3]
 800992e:	4611      	mov	r1, r2
 8009930:	4618      	mov	r0, r3
 8009932:	f7f9 fc81 	bl	8003238 <HAL_PCD_EP_ClrStall>
 8009936:	4603      	mov	r3, r0
 8009938:	73fb      	strb	r3, [r7, #15]
    
  usb_status =  USBD_Get_USB_Status(hal_status);  
 800993a:	7bfb      	ldrb	r3, [r7, #15]
 800993c:	4618      	mov	r0, r3
 800993e:	f000 f8ab 	bl	8009a98 <USBD_Get_USB_Status>
 8009942:	4603      	mov	r3, r0
 8009944:	73bb      	strb	r3, [r7, #14]
  
  return usb_status; 
 8009946:	7bbb      	ldrb	r3, [r7, #14]
}
 8009948:	4618      	mov	r0, r3
 800994a:	3710      	adds	r7, #16
 800994c:	46bd      	mov	sp, r7
 800994e:	bd80      	pop	{r7, pc}

08009950 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009950:	b480      	push	{r7}
 8009952:	b085      	sub	sp, #20
 8009954:	af00      	add	r7, sp, #0
 8009956:	6078      	str	r0, [r7, #4]
 8009958:	460b      	mov	r3, r1
 800995a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8009962:	60fb      	str	r3, [r7, #12]
  
  if((ep_addr & 0x80) == 0x80)
 8009964:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009968:	2b00      	cmp	r3, #0
 800996a:	da0b      	bge.n	8009984 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 800996c:	78fb      	ldrb	r3, [r7, #3]
 800996e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009972:	68f9      	ldr	r1, [r7, #12]
 8009974:	4613      	mov	r3, r2
 8009976:	00db      	lsls	r3, r3, #3
 8009978:	1a9b      	subs	r3, r3, r2
 800997a:	009b      	lsls	r3, r3, #2
 800997c:	440b      	add	r3, r1
 800997e:	333e      	adds	r3, #62	; 0x3e
 8009980:	781b      	ldrb	r3, [r3, #0]
 8009982:	e00b      	b.n	800999c <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 8009984:	78fb      	ldrb	r3, [r7, #3]
 8009986:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800998a:	68f9      	ldr	r1, [r7, #12]
 800998c:	4613      	mov	r3, r2
 800998e:	00db      	lsls	r3, r3, #3
 8009990:	1a9b      	subs	r3, r3, r2
 8009992:	009b      	lsls	r3, r3, #2
 8009994:	440b      	add	r3, r1
 8009996:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800999a:	781b      	ldrb	r3, [r3, #0]
  }
}
 800999c:	4618      	mov	r0, r3
 800999e:	3714      	adds	r7, #20
 80099a0:	46bd      	mov	sp, r7
 80099a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099a6:	4770      	bx	lr

080099a8 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80099a8:	b580      	push	{r7, lr}
 80099aa:	b084      	sub	sp, #16
 80099ac:	af00      	add	r7, sp, #0
 80099ae:	6078      	str	r0, [r7, #4]
 80099b0:	460b      	mov	r3, r1
 80099b2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80099b4:	2300      	movs	r3, #0
 80099b6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80099b8:	2300      	movs	r3, #0
 80099ba:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 80099c2:	78fa      	ldrb	r2, [r7, #3]
 80099c4:	4611      	mov	r1, r2
 80099c6:	4618      	mov	r0, r3
 80099c8:	f7f9 fa4e 	bl	8002e68 <HAL_PCD_SetAddress>
 80099cc:	4603      	mov	r3, r0
 80099ce:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);
 80099d0:	7bfb      	ldrb	r3, [r7, #15]
 80099d2:	4618      	mov	r0, r3
 80099d4:	f000 f860 	bl	8009a98 <USBD_Get_USB_Status>
 80099d8:	4603      	mov	r3, r0
 80099da:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;  
 80099dc:	7bbb      	ldrb	r3, [r7, #14]
}
 80099de:	4618      	mov	r0, r3
 80099e0:	3710      	adds	r7, #16
 80099e2:	46bd      	mov	sp, r7
 80099e4:	bd80      	pop	{r7, pc}

080099e6 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size    
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 80099e6:	b580      	push	{r7, lr}
 80099e8:	b086      	sub	sp, #24
 80099ea:	af00      	add	r7, sp, #0
 80099ec:	60f8      	str	r0, [r7, #12]
 80099ee:	607a      	str	r2, [r7, #4]
 80099f0:	461a      	mov	r2, r3
 80099f2:	460b      	mov	r3, r1
 80099f4:	72fb      	strb	r3, [r7, #11]
 80099f6:	4613      	mov	r3, r2
 80099f8:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80099fa:	2300      	movs	r3, #0
 80099fc:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80099fe:	2300      	movs	r3, #0
 8009a00:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8009a02:	68fb      	ldr	r3, [r7, #12]
 8009a04:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 8009a08:	893b      	ldrh	r3, [r7, #8]
 8009a0a:	7af9      	ldrb	r1, [r7, #11]
 8009a0c:	687a      	ldr	r2, [r7, #4]
 8009a0e:	f7f9 fb65 	bl	80030dc <HAL_PCD_EP_Transmit>
 8009a12:	4603      	mov	r3, r0
 8009a14:	75fb      	strb	r3, [r7, #23]
  
  usb_status =  USBD_Get_USB_Status(hal_status); 
 8009a16:	7dfb      	ldrb	r3, [r7, #23]
 8009a18:	4618      	mov	r0, r3
 8009a1a:	f000 f83d 	bl	8009a98 <USBD_Get_USB_Status>
 8009a1e:	4603      	mov	r3, r0
 8009a20:	75bb      	strb	r3, [r7, #22]
  
  return usb_status;    
 8009a22:	7dbb      	ldrb	r3, [r7, #22]
}
 8009a24:	4618      	mov	r0, r3
 8009a26:	3718      	adds	r7, #24
 8009a28:	46bd      	mov	sp, r7
 8009a2a:	bd80      	pop	{r7, pc}

08009a2c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8009a2c:	b580      	push	{r7, lr}
 8009a2e:	b086      	sub	sp, #24
 8009a30:	af00      	add	r7, sp, #0
 8009a32:	60f8      	str	r0, [r7, #12]
 8009a34:	607a      	str	r2, [r7, #4]
 8009a36:	461a      	mov	r2, r3
 8009a38:	460b      	mov	r3, r1
 8009a3a:	72fb      	strb	r3, [r7, #11]
 8009a3c:	4613      	mov	r3, r2
 8009a3e:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009a40:	2300      	movs	r3, #0
 8009a42:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009a44:	2300      	movs	r3, #0
 8009a46:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8009a48:	68fb      	ldr	r3, [r7, #12]
 8009a4a:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 8009a4e:	893b      	ldrh	r3, [r7, #8]
 8009a50:	7af9      	ldrb	r1, [r7, #11]
 8009a52:	687a      	ldr	r2, [r7, #4]
 8009a54:	f7f9 fadf 	bl	8003016 <HAL_PCD_EP_Receive>
 8009a58:	4603      	mov	r3, r0
 8009a5a:	75fb      	strb	r3, [r7, #23]
  
  usb_status =  USBD_Get_USB_Status(hal_status);   
 8009a5c:	7dfb      	ldrb	r3, [r7, #23]
 8009a5e:	4618      	mov	r0, r3
 8009a60:	f000 f81a 	bl	8009a98 <USBD_Get_USB_Status>
 8009a64:	4603      	mov	r3, r0
 8009a66:	75bb      	strb	r3, [r7, #22]
  
  return usb_status; 
 8009a68:	7dbb      	ldrb	r3, [r7, #22]
}
 8009a6a:	4618      	mov	r0, r3
 8009a6c:	3718      	adds	r7, #24
 8009a6e:	46bd      	mov	sp, r7
 8009a70:	bd80      	pop	{r7, pc}

08009a72 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009a72:	b580      	push	{r7, lr}
 8009a74:	b082      	sub	sp, #8
 8009a76:	af00      	add	r7, sp, #0
 8009a78:	6078      	str	r0, [r7, #4]
 8009a7a:	460b      	mov	r3, r1
 8009a7c:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8009a7e:	687b      	ldr	r3, [r7, #4]
 8009a80:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8009a84:	78fa      	ldrb	r2, [r7, #3]
 8009a86:	4611      	mov	r1, r2
 8009a88:	4618      	mov	r0, r3
 8009a8a:	f7f9 fb0f 	bl	80030ac <HAL_PCD_EP_GetRxCount>
 8009a8e:	4603      	mov	r3, r0
}
 8009a90:	4618      	mov	r0, r3
 8009a92:	3708      	adds	r7, #8
 8009a94:	46bd      	mov	sp, r7
 8009a96:	bd80      	pop	{r7, pc}

08009a98 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8009a98:	b480      	push	{r7}
 8009a9a:	b085      	sub	sp, #20
 8009a9c:	af00      	add	r7, sp, #0
 8009a9e:	4603      	mov	r3, r0
 8009aa0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009aa2:	2300      	movs	r3, #0
 8009aa4:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8009aa6:	79fb      	ldrb	r3, [r7, #7]
 8009aa8:	2b03      	cmp	r3, #3
 8009aaa:	d817      	bhi.n	8009adc <USBD_Get_USB_Status+0x44>
 8009aac:	a201      	add	r2, pc, #4	; (adr r2, 8009ab4 <USBD_Get_USB_Status+0x1c>)
 8009aae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ab2:	bf00      	nop
 8009ab4:	08009ac5 	.word	0x08009ac5
 8009ab8:	08009acb 	.word	0x08009acb
 8009abc:	08009ad1 	.word	0x08009ad1
 8009ac0:	08009ad7 	.word	0x08009ad7
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8009ac4:	2300      	movs	r3, #0
 8009ac6:	73fb      	strb	r3, [r7, #15]
    break;
 8009ac8:	e00b      	b.n	8009ae2 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8009aca:	2302      	movs	r3, #2
 8009acc:	73fb      	strb	r3, [r7, #15]
    break;
 8009ace:	e008      	b.n	8009ae2 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009ad0:	2301      	movs	r3, #1
 8009ad2:	73fb      	strb	r3, [r7, #15]
    break;
 8009ad4:	e005      	b.n	8009ae2 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8009ad6:	2302      	movs	r3, #2
 8009ad8:	73fb      	strb	r3, [r7, #15]
    break;
 8009ada:	e002      	b.n	8009ae2 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8009adc:	2302      	movs	r3, #2
 8009ade:	73fb      	strb	r3, [r7, #15]
    break;
 8009ae0:	bf00      	nop
  }
  return usb_status;
 8009ae2:	7bfb      	ldrb	r3, [r7, #15]
}
 8009ae4:	4618      	mov	r0, r3
 8009ae6:	3714      	adds	r7, #20
 8009ae8:	46bd      	mov	sp, r7
 8009aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aee:	4770      	bx	lr

08009af0 <__errno>:
 8009af0:	4b01      	ldr	r3, [pc, #4]	; (8009af8 <__errno+0x8>)
 8009af2:	6818      	ldr	r0, [r3, #0]
 8009af4:	4770      	bx	lr
 8009af6:	bf00      	nop
 8009af8:	2000017c 	.word	0x2000017c

08009afc <__libc_init_array>:
 8009afc:	b570      	push	{r4, r5, r6, lr}
 8009afe:	4e0d      	ldr	r6, [pc, #52]	; (8009b34 <__libc_init_array+0x38>)
 8009b00:	4c0d      	ldr	r4, [pc, #52]	; (8009b38 <__libc_init_array+0x3c>)
 8009b02:	1ba4      	subs	r4, r4, r6
 8009b04:	10a4      	asrs	r4, r4, #2
 8009b06:	2500      	movs	r5, #0
 8009b08:	42a5      	cmp	r5, r4
 8009b0a:	d109      	bne.n	8009b20 <__libc_init_array+0x24>
 8009b0c:	4e0b      	ldr	r6, [pc, #44]	; (8009b3c <__libc_init_array+0x40>)
 8009b0e:	4c0c      	ldr	r4, [pc, #48]	; (8009b40 <__libc_init_array+0x44>)
 8009b10:	f000 f8ea 	bl	8009ce8 <_init>
 8009b14:	1ba4      	subs	r4, r4, r6
 8009b16:	10a4      	asrs	r4, r4, #2
 8009b18:	2500      	movs	r5, #0
 8009b1a:	42a5      	cmp	r5, r4
 8009b1c:	d105      	bne.n	8009b2a <__libc_init_array+0x2e>
 8009b1e:	bd70      	pop	{r4, r5, r6, pc}
 8009b20:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8009b24:	4798      	blx	r3
 8009b26:	3501      	adds	r5, #1
 8009b28:	e7ee      	b.n	8009b08 <__libc_init_array+0xc>
 8009b2a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8009b2e:	4798      	blx	r3
 8009b30:	3501      	adds	r5, #1
 8009b32:	e7f2      	b.n	8009b1a <__libc_init_array+0x1e>
 8009b34:	08009e40 	.word	0x08009e40
 8009b38:	08009e40 	.word	0x08009e40
 8009b3c:	08009e40 	.word	0x08009e40
 8009b40:	08009e44 	.word	0x08009e44

08009b44 <malloc>:
 8009b44:	4b02      	ldr	r3, [pc, #8]	; (8009b50 <malloc+0xc>)
 8009b46:	4601      	mov	r1, r0
 8009b48:	6818      	ldr	r0, [r3, #0]
 8009b4a:	f000 b861 	b.w	8009c10 <_malloc_r>
 8009b4e:	bf00      	nop
 8009b50:	2000017c 	.word	0x2000017c

08009b54 <free>:
 8009b54:	4b02      	ldr	r3, [pc, #8]	; (8009b60 <free+0xc>)
 8009b56:	4601      	mov	r1, r0
 8009b58:	6818      	ldr	r0, [r3, #0]
 8009b5a:	f000 b80b 	b.w	8009b74 <_free_r>
 8009b5e:	bf00      	nop
 8009b60:	2000017c 	.word	0x2000017c

08009b64 <memset>:
 8009b64:	4402      	add	r2, r0
 8009b66:	4603      	mov	r3, r0
 8009b68:	4293      	cmp	r3, r2
 8009b6a:	d100      	bne.n	8009b6e <memset+0xa>
 8009b6c:	4770      	bx	lr
 8009b6e:	f803 1b01 	strb.w	r1, [r3], #1
 8009b72:	e7f9      	b.n	8009b68 <memset+0x4>

08009b74 <_free_r>:
 8009b74:	b538      	push	{r3, r4, r5, lr}
 8009b76:	4605      	mov	r5, r0
 8009b78:	2900      	cmp	r1, #0
 8009b7a:	d045      	beq.n	8009c08 <_free_r+0x94>
 8009b7c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009b80:	1f0c      	subs	r4, r1, #4
 8009b82:	2b00      	cmp	r3, #0
 8009b84:	bfb8      	it	lt
 8009b86:	18e4      	addlt	r4, r4, r3
 8009b88:	f000 f8ac 	bl	8009ce4 <__malloc_lock>
 8009b8c:	4a1f      	ldr	r2, [pc, #124]	; (8009c0c <_free_r+0x98>)
 8009b8e:	6813      	ldr	r3, [r2, #0]
 8009b90:	4610      	mov	r0, r2
 8009b92:	b933      	cbnz	r3, 8009ba2 <_free_r+0x2e>
 8009b94:	6063      	str	r3, [r4, #4]
 8009b96:	6014      	str	r4, [r2, #0]
 8009b98:	4628      	mov	r0, r5
 8009b9a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009b9e:	f000 b8a2 	b.w	8009ce6 <__malloc_unlock>
 8009ba2:	42a3      	cmp	r3, r4
 8009ba4:	d90c      	bls.n	8009bc0 <_free_r+0x4c>
 8009ba6:	6821      	ldr	r1, [r4, #0]
 8009ba8:	1862      	adds	r2, r4, r1
 8009baa:	4293      	cmp	r3, r2
 8009bac:	bf04      	itt	eq
 8009bae:	681a      	ldreq	r2, [r3, #0]
 8009bb0:	685b      	ldreq	r3, [r3, #4]
 8009bb2:	6063      	str	r3, [r4, #4]
 8009bb4:	bf04      	itt	eq
 8009bb6:	1852      	addeq	r2, r2, r1
 8009bb8:	6022      	streq	r2, [r4, #0]
 8009bba:	6004      	str	r4, [r0, #0]
 8009bbc:	e7ec      	b.n	8009b98 <_free_r+0x24>
 8009bbe:	4613      	mov	r3, r2
 8009bc0:	685a      	ldr	r2, [r3, #4]
 8009bc2:	b10a      	cbz	r2, 8009bc8 <_free_r+0x54>
 8009bc4:	42a2      	cmp	r2, r4
 8009bc6:	d9fa      	bls.n	8009bbe <_free_r+0x4a>
 8009bc8:	6819      	ldr	r1, [r3, #0]
 8009bca:	1858      	adds	r0, r3, r1
 8009bcc:	42a0      	cmp	r0, r4
 8009bce:	d10b      	bne.n	8009be8 <_free_r+0x74>
 8009bd0:	6820      	ldr	r0, [r4, #0]
 8009bd2:	4401      	add	r1, r0
 8009bd4:	1858      	adds	r0, r3, r1
 8009bd6:	4282      	cmp	r2, r0
 8009bd8:	6019      	str	r1, [r3, #0]
 8009bda:	d1dd      	bne.n	8009b98 <_free_r+0x24>
 8009bdc:	6810      	ldr	r0, [r2, #0]
 8009bde:	6852      	ldr	r2, [r2, #4]
 8009be0:	605a      	str	r2, [r3, #4]
 8009be2:	4401      	add	r1, r0
 8009be4:	6019      	str	r1, [r3, #0]
 8009be6:	e7d7      	b.n	8009b98 <_free_r+0x24>
 8009be8:	d902      	bls.n	8009bf0 <_free_r+0x7c>
 8009bea:	230c      	movs	r3, #12
 8009bec:	602b      	str	r3, [r5, #0]
 8009bee:	e7d3      	b.n	8009b98 <_free_r+0x24>
 8009bf0:	6820      	ldr	r0, [r4, #0]
 8009bf2:	1821      	adds	r1, r4, r0
 8009bf4:	428a      	cmp	r2, r1
 8009bf6:	bf04      	itt	eq
 8009bf8:	6811      	ldreq	r1, [r2, #0]
 8009bfa:	6852      	ldreq	r2, [r2, #4]
 8009bfc:	6062      	str	r2, [r4, #4]
 8009bfe:	bf04      	itt	eq
 8009c00:	1809      	addeq	r1, r1, r0
 8009c02:	6021      	streq	r1, [r4, #0]
 8009c04:	605c      	str	r4, [r3, #4]
 8009c06:	e7c7      	b.n	8009b98 <_free_r+0x24>
 8009c08:	bd38      	pop	{r3, r4, r5, pc}
 8009c0a:	bf00      	nop
 8009c0c:	200041f4 	.word	0x200041f4

08009c10 <_malloc_r>:
 8009c10:	b570      	push	{r4, r5, r6, lr}
 8009c12:	1ccd      	adds	r5, r1, #3
 8009c14:	f025 0503 	bic.w	r5, r5, #3
 8009c18:	3508      	adds	r5, #8
 8009c1a:	2d0c      	cmp	r5, #12
 8009c1c:	bf38      	it	cc
 8009c1e:	250c      	movcc	r5, #12
 8009c20:	2d00      	cmp	r5, #0
 8009c22:	4606      	mov	r6, r0
 8009c24:	db01      	blt.n	8009c2a <_malloc_r+0x1a>
 8009c26:	42a9      	cmp	r1, r5
 8009c28:	d903      	bls.n	8009c32 <_malloc_r+0x22>
 8009c2a:	230c      	movs	r3, #12
 8009c2c:	6033      	str	r3, [r6, #0]
 8009c2e:	2000      	movs	r0, #0
 8009c30:	bd70      	pop	{r4, r5, r6, pc}
 8009c32:	f000 f857 	bl	8009ce4 <__malloc_lock>
 8009c36:	4a21      	ldr	r2, [pc, #132]	; (8009cbc <_malloc_r+0xac>)
 8009c38:	6814      	ldr	r4, [r2, #0]
 8009c3a:	4621      	mov	r1, r4
 8009c3c:	b991      	cbnz	r1, 8009c64 <_malloc_r+0x54>
 8009c3e:	4c20      	ldr	r4, [pc, #128]	; (8009cc0 <_malloc_r+0xb0>)
 8009c40:	6823      	ldr	r3, [r4, #0]
 8009c42:	b91b      	cbnz	r3, 8009c4c <_malloc_r+0x3c>
 8009c44:	4630      	mov	r0, r6
 8009c46:	f000 f83d 	bl	8009cc4 <_sbrk_r>
 8009c4a:	6020      	str	r0, [r4, #0]
 8009c4c:	4629      	mov	r1, r5
 8009c4e:	4630      	mov	r0, r6
 8009c50:	f000 f838 	bl	8009cc4 <_sbrk_r>
 8009c54:	1c43      	adds	r3, r0, #1
 8009c56:	d124      	bne.n	8009ca2 <_malloc_r+0x92>
 8009c58:	230c      	movs	r3, #12
 8009c5a:	6033      	str	r3, [r6, #0]
 8009c5c:	4630      	mov	r0, r6
 8009c5e:	f000 f842 	bl	8009ce6 <__malloc_unlock>
 8009c62:	e7e4      	b.n	8009c2e <_malloc_r+0x1e>
 8009c64:	680b      	ldr	r3, [r1, #0]
 8009c66:	1b5b      	subs	r3, r3, r5
 8009c68:	d418      	bmi.n	8009c9c <_malloc_r+0x8c>
 8009c6a:	2b0b      	cmp	r3, #11
 8009c6c:	d90f      	bls.n	8009c8e <_malloc_r+0x7e>
 8009c6e:	600b      	str	r3, [r1, #0]
 8009c70:	50cd      	str	r5, [r1, r3]
 8009c72:	18cc      	adds	r4, r1, r3
 8009c74:	4630      	mov	r0, r6
 8009c76:	f000 f836 	bl	8009ce6 <__malloc_unlock>
 8009c7a:	f104 000b 	add.w	r0, r4, #11
 8009c7e:	1d23      	adds	r3, r4, #4
 8009c80:	f020 0007 	bic.w	r0, r0, #7
 8009c84:	1ac3      	subs	r3, r0, r3
 8009c86:	d0d3      	beq.n	8009c30 <_malloc_r+0x20>
 8009c88:	425a      	negs	r2, r3
 8009c8a:	50e2      	str	r2, [r4, r3]
 8009c8c:	e7d0      	b.n	8009c30 <_malloc_r+0x20>
 8009c8e:	428c      	cmp	r4, r1
 8009c90:	684b      	ldr	r3, [r1, #4]
 8009c92:	bf16      	itet	ne
 8009c94:	6063      	strne	r3, [r4, #4]
 8009c96:	6013      	streq	r3, [r2, #0]
 8009c98:	460c      	movne	r4, r1
 8009c9a:	e7eb      	b.n	8009c74 <_malloc_r+0x64>
 8009c9c:	460c      	mov	r4, r1
 8009c9e:	6849      	ldr	r1, [r1, #4]
 8009ca0:	e7cc      	b.n	8009c3c <_malloc_r+0x2c>
 8009ca2:	1cc4      	adds	r4, r0, #3
 8009ca4:	f024 0403 	bic.w	r4, r4, #3
 8009ca8:	42a0      	cmp	r0, r4
 8009caa:	d005      	beq.n	8009cb8 <_malloc_r+0xa8>
 8009cac:	1a21      	subs	r1, r4, r0
 8009cae:	4630      	mov	r0, r6
 8009cb0:	f000 f808 	bl	8009cc4 <_sbrk_r>
 8009cb4:	3001      	adds	r0, #1
 8009cb6:	d0cf      	beq.n	8009c58 <_malloc_r+0x48>
 8009cb8:	6025      	str	r5, [r4, #0]
 8009cba:	e7db      	b.n	8009c74 <_malloc_r+0x64>
 8009cbc:	200041f4 	.word	0x200041f4
 8009cc0:	200041f8 	.word	0x200041f8

08009cc4 <_sbrk_r>:
 8009cc4:	b538      	push	{r3, r4, r5, lr}
 8009cc6:	4c06      	ldr	r4, [pc, #24]	; (8009ce0 <_sbrk_r+0x1c>)
 8009cc8:	2300      	movs	r3, #0
 8009cca:	4605      	mov	r5, r0
 8009ccc:	4608      	mov	r0, r1
 8009cce:	6023      	str	r3, [r4, #0]
 8009cd0:	f7f7 fa54 	bl	800117c <_sbrk>
 8009cd4:	1c43      	adds	r3, r0, #1
 8009cd6:	d102      	bne.n	8009cde <_sbrk_r+0x1a>
 8009cd8:	6823      	ldr	r3, [r4, #0]
 8009cda:	b103      	cbz	r3, 8009cde <_sbrk_r+0x1a>
 8009cdc:	602b      	str	r3, [r5, #0]
 8009cde:	bd38      	pop	{r3, r4, r5, pc}
 8009ce0:	20005b40 	.word	0x20005b40

08009ce4 <__malloc_lock>:
 8009ce4:	4770      	bx	lr

08009ce6 <__malloc_unlock>:
 8009ce6:	4770      	bx	lr

08009ce8 <_init>:
 8009ce8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009cea:	bf00      	nop
 8009cec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009cee:	bc08      	pop	{r3}
 8009cf0:	469e      	mov	lr, r3
 8009cf2:	4770      	bx	lr

08009cf4 <_fini>:
 8009cf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009cf6:	bf00      	nop
 8009cf8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009cfa:	bc08      	pop	{r3}
 8009cfc:	469e      	mov	lr, r3
 8009cfe:	4770      	bx	lr
