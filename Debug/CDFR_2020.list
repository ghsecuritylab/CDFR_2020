
CDFR_2020.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00018854  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002540  08018a04  08018a04  00028a04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801af44  0801af44  000301ec  2**0
                  CONTENTS
  4 .ARM          00000008  0801af44  0801af44  0002af44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801af4c  0801af4c  000301ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801af4c  0801af4c  0002af4c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801af50  0801af50  0002af50  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001ec  20000000  0801af54  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000ccb4  200001ec  0801b140  000301ec  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  2000cea0  0801b140  0003cea0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000301ec  2**0
                  CONTENTS, READONLY
 12 .debug_info   0004a897  00000000  00000000  0003021c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00009208  00000000  00000000  0007aab3  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00002868  00000000  00000000  00083cc0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00002540  00000000  00000000  00086528  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00039c48  00000000  00000000  00088a68  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00034916  00000000  00000000  000c26b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0010c479  00000000  00000000  000f6fc6  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0020343f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000aa44  00000000  00000000  002034bc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	200001ec 	.word	0x200001ec
 80001cc:	00000000 	.word	0x00000000
 80001d0:	080189ec 	.word	0x080189ec

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	200001f0 	.word	0x200001f0
 80001ec:	080189ec 	.word	0x080189ec

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002a4:	f000 b972 	b.w	800058c <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9e08      	ldr	r6, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	4688      	mov	r8, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d14b      	bne.n	8000366 <__udivmoddi4+0xa6>
 80002ce:	428a      	cmp	r2, r1
 80002d0:	4615      	mov	r5, r2
 80002d2:	d967      	bls.n	80003a4 <__udivmoddi4+0xe4>
 80002d4:	fab2 f282 	clz	r2, r2
 80002d8:	b14a      	cbz	r2, 80002ee <__udivmoddi4+0x2e>
 80002da:	f1c2 0720 	rsb	r7, r2, #32
 80002de:	fa01 f302 	lsl.w	r3, r1, r2
 80002e2:	fa20 f707 	lsr.w	r7, r0, r7
 80002e6:	4095      	lsls	r5, r2
 80002e8:	ea47 0803 	orr.w	r8, r7, r3
 80002ec:	4094      	lsls	r4, r2
 80002ee:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002f2:	0c23      	lsrs	r3, r4, #16
 80002f4:	fbb8 f7fe 	udiv	r7, r8, lr
 80002f8:	fa1f fc85 	uxth.w	ip, r5
 80002fc:	fb0e 8817 	mls	r8, lr, r7, r8
 8000300:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000304:	fb07 f10c 	mul.w	r1, r7, ip
 8000308:	4299      	cmp	r1, r3
 800030a:	d909      	bls.n	8000320 <__udivmoddi4+0x60>
 800030c:	18eb      	adds	r3, r5, r3
 800030e:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 8000312:	f080 811b 	bcs.w	800054c <__udivmoddi4+0x28c>
 8000316:	4299      	cmp	r1, r3
 8000318:	f240 8118 	bls.w	800054c <__udivmoddi4+0x28c>
 800031c:	3f02      	subs	r7, #2
 800031e:	442b      	add	r3, r5
 8000320:	1a5b      	subs	r3, r3, r1
 8000322:	b2a4      	uxth	r4, r4
 8000324:	fbb3 f0fe 	udiv	r0, r3, lr
 8000328:	fb0e 3310 	mls	r3, lr, r0, r3
 800032c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000330:	fb00 fc0c 	mul.w	ip, r0, ip
 8000334:	45a4      	cmp	ip, r4
 8000336:	d909      	bls.n	800034c <__udivmoddi4+0x8c>
 8000338:	192c      	adds	r4, r5, r4
 800033a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800033e:	f080 8107 	bcs.w	8000550 <__udivmoddi4+0x290>
 8000342:	45a4      	cmp	ip, r4
 8000344:	f240 8104 	bls.w	8000550 <__udivmoddi4+0x290>
 8000348:	3802      	subs	r0, #2
 800034a:	442c      	add	r4, r5
 800034c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000350:	eba4 040c 	sub.w	r4, r4, ip
 8000354:	2700      	movs	r7, #0
 8000356:	b11e      	cbz	r6, 8000360 <__udivmoddi4+0xa0>
 8000358:	40d4      	lsrs	r4, r2
 800035a:	2300      	movs	r3, #0
 800035c:	e9c6 4300 	strd	r4, r3, [r6]
 8000360:	4639      	mov	r1, r7
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	428b      	cmp	r3, r1
 8000368:	d909      	bls.n	800037e <__udivmoddi4+0xbe>
 800036a:	2e00      	cmp	r6, #0
 800036c:	f000 80eb 	beq.w	8000546 <__udivmoddi4+0x286>
 8000370:	2700      	movs	r7, #0
 8000372:	e9c6 0100 	strd	r0, r1, [r6]
 8000376:	4638      	mov	r0, r7
 8000378:	4639      	mov	r1, r7
 800037a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037e:	fab3 f783 	clz	r7, r3
 8000382:	2f00      	cmp	r7, #0
 8000384:	d147      	bne.n	8000416 <__udivmoddi4+0x156>
 8000386:	428b      	cmp	r3, r1
 8000388:	d302      	bcc.n	8000390 <__udivmoddi4+0xd0>
 800038a:	4282      	cmp	r2, r0
 800038c:	f200 80fa 	bhi.w	8000584 <__udivmoddi4+0x2c4>
 8000390:	1a84      	subs	r4, r0, r2
 8000392:	eb61 0303 	sbc.w	r3, r1, r3
 8000396:	2001      	movs	r0, #1
 8000398:	4698      	mov	r8, r3
 800039a:	2e00      	cmp	r6, #0
 800039c:	d0e0      	beq.n	8000360 <__udivmoddi4+0xa0>
 800039e:	e9c6 4800 	strd	r4, r8, [r6]
 80003a2:	e7dd      	b.n	8000360 <__udivmoddi4+0xa0>
 80003a4:	b902      	cbnz	r2, 80003a8 <__udivmoddi4+0xe8>
 80003a6:	deff      	udf	#255	; 0xff
 80003a8:	fab2 f282 	clz	r2, r2
 80003ac:	2a00      	cmp	r2, #0
 80003ae:	f040 808f 	bne.w	80004d0 <__udivmoddi4+0x210>
 80003b2:	1b49      	subs	r1, r1, r5
 80003b4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003b8:	fa1f f885 	uxth.w	r8, r5
 80003bc:	2701      	movs	r7, #1
 80003be:	fbb1 fcfe 	udiv	ip, r1, lr
 80003c2:	0c23      	lsrs	r3, r4, #16
 80003c4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003c8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003cc:	fb08 f10c 	mul.w	r1, r8, ip
 80003d0:	4299      	cmp	r1, r3
 80003d2:	d907      	bls.n	80003e4 <__udivmoddi4+0x124>
 80003d4:	18eb      	adds	r3, r5, r3
 80003d6:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 80003da:	d202      	bcs.n	80003e2 <__udivmoddi4+0x122>
 80003dc:	4299      	cmp	r1, r3
 80003de:	f200 80cd 	bhi.w	800057c <__udivmoddi4+0x2bc>
 80003e2:	4684      	mov	ip, r0
 80003e4:	1a59      	subs	r1, r3, r1
 80003e6:	b2a3      	uxth	r3, r4
 80003e8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003ec:	fb0e 1410 	mls	r4, lr, r0, r1
 80003f0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003f4:	fb08 f800 	mul.w	r8, r8, r0
 80003f8:	45a0      	cmp	r8, r4
 80003fa:	d907      	bls.n	800040c <__udivmoddi4+0x14c>
 80003fc:	192c      	adds	r4, r5, r4
 80003fe:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x14a>
 8000404:	45a0      	cmp	r8, r4
 8000406:	f200 80b6 	bhi.w	8000576 <__udivmoddi4+0x2b6>
 800040a:	4618      	mov	r0, r3
 800040c:	eba4 0408 	sub.w	r4, r4, r8
 8000410:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000414:	e79f      	b.n	8000356 <__udivmoddi4+0x96>
 8000416:	f1c7 0c20 	rsb	ip, r7, #32
 800041a:	40bb      	lsls	r3, r7
 800041c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000420:	ea4e 0e03 	orr.w	lr, lr, r3
 8000424:	fa01 f407 	lsl.w	r4, r1, r7
 8000428:	fa20 f50c 	lsr.w	r5, r0, ip
 800042c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000430:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000434:	4325      	orrs	r5, r4
 8000436:	fbb3 f9f8 	udiv	r9, r3, r8
 800043a:	0c2c      	lsrs	r4, r5, #16
 800043c:	fb08 3319 	mls	r3, r8, r9, r3
 8000440:	fa1f fa8e 	uxth.w	sl, lr
 8000444:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000448:	fb09 f40a 	mul.w	r4, r9, sl
 800044c:	429c      	cmp	r4, r3
 800044e:	fa02 f207 	lsl.w	r2, r2, r7
 8000452:	fa00 f107 	lsl.w	r1, r0, r7
 8000456:	d90b      	bls.n	8000470 <__udivmoddi4+0x1b0>
 8000458:	eb1e 0303 	adds.w	r3, lr, r3
 800045c:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000460:	f080 8087 	bcs.w	8000572 <__udivmoddi4+0x2b2>
 8000464:	429c      	cmp	r4, r3
 8000466:	f240 8084 	bls.w	8000572 <__udivmoddi4+0x2b2>
 800046a:	f1a9 0902 	sub.w	r9, r9, #2
 800046e:	4473      	add	r3, lr
 8000470:	1b1b      	subs	r3, r3, r4
 8000472:	b2ad      	uxth	r5, r5
 8000474:	fbb3 f0f8 	udiv	r0, r3, r8
 8000478:	fb08 3310 	mls	r3, r8, r0, r3
 800047c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000480:	fb00 fa0a 	mul.w	sl, r0, sl
 8000484:	45a2      	cmp	sl, r4
 8000486:	d908      	bls.n	800049a <__udivmoddi4+0x1da>
 8000488:	eb1e 0404 	adds.w	r4, lr, r4
 800048c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000490:	d26b      	bcs.n	800056a <__udivmoddi4+0x2aa>
 8000492:	45a2      	cmp	sl, r4
 8000494:	d969      	bls.n	800056a <__udivmoddi4+0x2aa>
 8000496:	3802      	subs	r0, #2
 8000498:	4474      	add	r4, lr
 800049a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800049e:	fba0 8902 	umull	r8, r9, r0, r2
 80004a2:	eba4 040a 	sub.w	r4, r4, sl
 80004a6:	454c      	cmp	r4, r9
 80004a8:	46c2      	mov	sl, r8
 80004aa:	464b      	mov	r3, r9
 80004ac:	d354      	bcc.n	8000558 <__udivmoddi4+0x298>
 80004ae:	d051      	beq.n	8000554 <__udivmoddi4+0x294>
 80004b0:	2e00      	cmp	r6, #0
 80004b2:	d069      	beq.n	8000588 <__udivmoddi4+0x2c8>
 80004b4:	ebb1 050a 	subs.w	r5, r1, sl
 80004b8:	eb64 0403 	sbc.w	r4, r4, r3
 80004bc:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004c0:	40fd      	lsrs	r5, r7
 80004c2:	40fc      	lsrs	r4, r7
 80004c4:	ea4c 0505 	orr.w	r5, ip, r5
 80004c8:	e9c6 5400 	strd	r5, r4, [r6]
 80004cc:	2700      	movs	r7, #0
 80004ce:	e747      	b.n	8000360 <__udivmoddi4+0xa0>
 80004d0:	f1c2 0320 	rsb	r3, r2, #32
 80004d4:	fa20 f703 	lsr.w	r7, r0, r3
 80004d8:	4095      	lsls	r5, r2
 80004da:	fa01 f002 	lsl.w	r0, r1, r2
 80004de:	fa21 f303 	lsr.w	r3, r1, r3
 80004e2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004e6:	4338      	orrs	r0, r7
 80004e8:	0c01      	lsrs	r1, r0, #16
 80004ea:	fbb3 f7fe 	udiv	r7, r3, lr
 80004ee:	fa1f f885 	uxth.w	r8, r5
 80004f2:	fb0e 3317 	mls	r3, lr, r7, r3
 80004f6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004fa:	fb07 f308 	mul.w	r3, r7, r8
 80004fe:	428b      	cmp	r3, r1
 8000500:	fa04 f402 	lsl.w	r4, r4, r2
 8000504:	d907      	bls.n	8000516 <__udivmoddi4+0x256>
 8000506:	1869      	adds	r1, r5, r1
 8000508:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 800050c:	d22f      	bcs.n	800056e <__udivmoddi4+0x2ae>
 800050e:	428b      	cmp	r3, r1
 8000510:	d92d      	bls.n	800056e <__udivmoddi4+0x2ae>
 8000512:	3f02      	subs	r7, #2
 8000514:	4429      	add	r1, r5
 8000516:	1acb      	subs	r3, r1, r3
 8000518:	b281      	uxth	r1, r0
 800051a:	fbb3 f0fe 	udiv	r0, r3, lr
 800051e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000522:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000526:	fb00 f308 	mul.w	r3, r0, r8
 800052a:	428b      	cmp	r3, r1
 800052c:	d907      	bls.n	800053e <__udivmoddi4+0x27e>
 800052e:	1869      	adds	r1, r5, r1
 8000530:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000534:	d217      	bcs.n	8000566 <__udivmoddi4+0x2a6>
 8000536:	428b      	cmp	r3, r1
 8000538:	d915      	bls.n	8000566 <__udivmoddi4+0x2a6>
 800053a:	3802      	subs	r0, #2
 800053c:	4429      	add	r1, r5
 800053e:	1ac9      	subs	r1, r1, r3
 8000540:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000544:	e73b      	b.n	80003be <__udivmoddi4+0xfe>
 8000546:	4637      	mov	r7, r6
 8000548:	4630      	mov	r0, r6
 800054a:	e709      	b.n	8000360 <__udivmoddi4+0xa0>
 800054c:	4607      	mov	r7, r0
 800054e:	e6e7      	b.n	8000320 <__udivmoddi4+0x60>
 8000550:	4618      	mov	r0, r3
 8000552:	e6fb      	b.n	800034c <__udivmoddi4+0x8c>
 8000554:	4541      	cmp	r1, r8
 8000556:	d2ab      	bcs.n	80004b0 <__udivmoddi4+0x1f0>
 8000558:	ebb8 0a02 	subs.w	sl, r8, r2
 800055c:	eb69 020e 	sbc.w	r2, r9, lr
 8000560:	3801      	subs	r0, #1
 8000562:	4613      	mov	r3, r2
 8000564:	e7a4      	b.n	80004b0 <__udivmoddi4+0x1f0>
 8000566:	4660      	mov	r0, ip
 8000568:	e7e9      	b.n	800053e <__udivmoddi4+0x27e>
 800056a:	4618      	mov	r0, r3
 800056c:	e795      	b.n	800049a <__udivmoddi4+0x1da>
 800056e:	4667      	mov	r7, ip
 8000570:	e7d1      	b.n	8000516 <__udivmoddi4+0x256>
 8000572:	4681      	mov	r9, r0
 8000574:	e77c      	b.n	8000470 <__udivmoddi4+0x1b0>
 8000576:	3802      	subs	r0, #2
 8000578:	442c      	add	r4, r5
 800057a:	e747      	b.n	800040c <__udivmoddi4+0x14c>
 800057c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000580:	442b      	add	r3, r5
 8000582:	e72f      	b.n	80003e4 <__udivmoddi4+0x124>
 8000584:	4638      	mov	r0, r7
 8000586:	e708      	b.n	800039a <__udivmoddi4+0xda>
 8000588:	4637      	mov	r7, r6
 800058a:	e6e9      	b.n	8000360 <__udivmoddi4+0xa0>

0800058c <__aeabi_idiv0>:
 800058c:	4770      	bx	lr
 800058e:	bf00      	nop

08000590 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000590:	b580      	push	{r7, lr}
 8000592:	b0a4      	sub	sp, #144	; 0x90
 8000594:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Init */
       
  /* USER CODE END Init */
osKernelInitialize();
 8000596:	f007 ffb5 	bl	8008504 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  const osThreadAttr_t defaultTask_attributes = {
 800059a:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800059e:	2224      	movs	r2, #36	; 0x24
 80005a0:	2100      	movs	r1, #0
 80005a2:	4618      	mov	r0, r3
 80005a4:	f017 fb02 	bl	8017bac <memset>
 80005a8:	4b2c      	ldr	r3, [pc, #176]	; (800065c <MX_FREERTOS_Init+0xcc>)
 80005aa:	66fb      	str	r3, [r7, #108]	; 0x6c
 80005ac:	2380      	movs	r3, #128	; 0x80
 80005ae:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80005b2:	2318      	movs	r3, #24
 80005b4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    .name = "defaultTask",
    .priority = (osPriority_t) osPriorityNormal,
    .stack_size = 128
  };
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80005b8:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80005bc:	461a      	mov	r2, r3
 80005be:	2100      	movs	r1, #0
 80005c0:	4827      	ldr	r0, [pc, #156]	; (8000660 <MX_FREERTOS_Init+0xd0>)
 80005c2:	f008 f82f 	bl	8008624 <osThreadNew>
 80005c6:	4602      	mov	r2, r0
 80005c8:	4b26      	ldr	r3, [pc, #152]	; (8000664 <MX_FREERTOS_Init+0xd4>)
 80005ca:	601a      	str	r2, [r3, #0]

  /* definition and creation of SpeedRegTask */
  const osThreadAttr_t SpeedRegTask_attributes = {
 80005cc:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80005d0:	2224      	movs	r2, #36	; 0x24
 80005d2:	2100      	movs	r1, #0
 80005d4:	4618      	mov	r0, r3
 80005d6:	f017 fae9 	bl	8017bac <memset>
 80005da:	4b23      	ldr	r3, [pc, #140]	; (8000668 <MX_FREERTOS_Init+0xd8>)
 80005dc:	64bb      	str	r3, [r7, #72]	; 0x48
 80005de:	2380      	movs	r3, #128	; 0x80
 80005e0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80005e2:	2330      	movs	r3, #48	; 0x30
 80005e4:	663b      	str	r3, [r7, #96]	; 0x60
    .name = "SpeedRegTask",
    .priority = (osPriority_t) osPriorityRealtime,
    .stack_size = 128
  };
  SpeedRegTaskHandle = osThreadNew(StartSpeedRegTask, NULL, &SpeedRegTask_attributes);
 80005e6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80005ea:	461a      	mov	r2, r3
 80005ec:	2100      	movs	r1, #0
 80005ee:	481f      	ldr	r0, [pc, #124]	; (800066c <MX_FREERTOS_Init+0xdc>)
 80005f0:	f008 f818 	bl	8008624 <osThreadNew>
 80005f4:	4602      	mov	r2, r0
 80005f6:	4b1e      	ldr	r3, [pc, #120]	; (8000670 <MX_FREERTOS_Init+0xe0>)
 80005f8:	601a      	str	r2, [r3, #0]

  /* definition and creation of PositionRegTask */
  const osThreadAttr_t PositionRegTask_attributes = {
 80005fa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80005fe:	2224      	movs	r2, #36	; 0x24
 8000600:	2100      	movs	r1, #0
 8000602:	4618      	mov	r0, r3
 8000604:	f017 fad2 	bl	8017bac <memset>
 8000608:	4b1a      	ldr	r3, [pc, #104]	; (8000674 <MX_FREERTOS_Init+0xe4>)
 800060a:	627b      	str	r3, [r7, #36]	; 0x24
 800060c:	2380      	movs	r3, #128	; 0x80
 800060e:	63bb      	str	r3, [r7, #56]	; 0x38
 8000610:	2331      	movs	r3, #49	; 0x31
 8000612:	63fb      	str	r3, [r7, #60]	; 0x3c
    .name = "PositionRegTask",
    .priority = (osPriority_t) osPriorityRealtime1,
    .stack_size = 128
  };
  PositionRegTaskHandle = osThreadNew(StartPositionRegTask, NULL, &PositionRegTask_attributes);
 8000614:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000618:	461a      	mov	r2, r3
 800061a:	2100      	movs	r1, #0
 800061c:	4816      	ldr	r0, [pc, #88]	; (8000678 <MX_FREERTOS_Init+0xe8>)
 800061e:	f008 f801 	bl	8008624 <osThreadNew>
 8000622:	4602      	mov	r2, r0
 8000624:	4b15      	ldr	r3, [pc, #84]	; (800067c <MX_FREERTOS_Init+0xec>)
 8000626:	601a      	str	r2, [r3, #0]

  /* definition and creation of TimerGameTask */
  const osThreadAttr_t TimerGameTask_attributes = {
 8000628:	463b      	mov	r3, r7
 800062a:	2224      	movs	r2, #36	; 0x24
 800062c:	2100      	movs	r1, #0
 800062e:	4618      	mov	r0, r3
 8000630:	f017 fabc 	bl	8017bac <memset>
 8000634:	4b12      	ldr	r3, [pc, #72]	; (8000680 <MX_FREERTOS_Init+0xf0>)
 8000636:	603b      	str	r3, [r7, #0]
 8000638:	2380      	movs	r3, #128	; 0x80
 800063a:	617b      	str	r3, [r7, #20]
 800063c:	2318      	movs	r3, #24
 800063e:	61bb      	str	r3, [r7, #24]
    .name = "TimerGameTask",
    .priority = (osPriority_t) osPriorityNormal,
    .stack_size = 128
  };
  TimerGameTaskHandle = osThreadNew(StartTimerGameTask, NULL, &TimerGameTask_attributes);
 8000640:	463b      	mov	r3, r7
 8000642:	461a      	mov	r2, r3
 8000644:	2100      	movs	r1, #0
 8000646:	480f      	ldr	r0, [pc, #60]	; (8000684 <MX_FREERTOS_Init+0xf4>)
 8000648:	f007 ffec 	bl	8008624 <osThreadNew>
 800064c:	4602      	mov	r2, r0
 800064e:	4b0e      	ldr	r3, [pc, #56]	; (8000688 <MX_FREERTOS_Init+0xf8>)
 8000650:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 8000652:	bf00      	nop
 8000654:	3790      	adds	r7, #144	; 0x90
 8000656:	46bd      	mov	sp, r7
 8000658:	bd80      	pop	{r7, pc}
 800065a:	bf00      	nop
 800065c:	08018a04 	.word	0x08018a04
 8000660:	0800068d 	.word	0x0800068d
 8000664:	20004cc0 	.word	0x20004cc0
 8000668:	08018a10 	.word	0x08018a10
 800066c:	080006a5 	.word	0x080006a5
 8000670:	20004cc4 	.word	0x20004cc4
 8000674:	08018a20 	.word	0x08018a20
 8000678:	080006b5 	.word	0x080006b5
 800067c:	20004ccc 	.word	0x20004ccc
 8000680:	08018a30 	.word	0x08018a30
 8000684:	080006c5 	.word	0x080006c5
 8000688:	20004cc8 	.word	0x20004cc8

0800068c <StartDefaultTask>:
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 800068c:	b580      	push	{r7, lr}
 800068e:	b082      	sub	sp, #8
 8000690:	af00      	add	r7, sp, #0
 8000692:	6078      	str	r0, [r7, #4]
  /* init code for LWIP */
  MX_LWIP_Init();
 8000694:	f006 f89a 	bl	80067cc <MX_LWIP_Init>

  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 8000698:	f016 fd60 	bl	801715c <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 800069c:	2001      	movs	r0, #1
 800069e:	f008 f86b 	bl	8008778 <osDelay>
 80006a2:	e7fb      	b.n	800069c <StartDefaultTask+0x10>

080006a4 <StartSpeedRegTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartSpeedRegTask */
void StartSpeedRegTask(void *argument)
{
 80006a4:	b580      	push	{r7, lr}
 80006a6:	b082      	sub	sp, #8
 80006a8:	af00      	add	r7, sp, #0
 80006aa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartSpeedRegTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80006ac:	2001      	movs	r0, #1
 80006ae:	f008 f863 	bl	8008778 <osDelay>
 80006b2:	e7fb      	b.n	80006ac <StartSpeedRegTask+0x8>

080006b4 <StartPositionRegTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartPositionRegTask */
void StartPositionRegTask(void *argument)
{
 80006b4:	b580      	push	{r7, lr}
 80006b6:	b082      	sub	sp, #8
 80006b8:	af00      	add	r7, sp, #0
 80006ba:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartPositionRegTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80006bc:	2001      	movs	r0, #1
 80006be:	f008 f85b 	bl	8008778 <osDelay>
 80006c2:	e7fb      	b.n	80006bc <StartPositionRegTask+0x8>

080006c4 <StartTimerGameTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTimerGameTask */
void StartTimerGameTask(void *argument)
{
 80006c4:	b580      	push	{r7, lr}
 80006c6:	b082      	sub	sp, #8
 80006c8:	af00      	add	r7, sp, #0
 80006ca:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTimerGameTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80006cc:	2001      	movs	r0, #1
 80006ce:	f008 f853 	bl	8008778 <osDelay>
 80006d2:	e7fb      	b.n	80006cc <StartTimerGameTask+0x8>

080006d4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80006d4:	b580      	push	{r7, lr}
 80006d6:	b08c      	sub	sp, #48	; 0x30
 80006d8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006da:	f107 031c 	add.w	r3, r7, #28
 80006de:	2200      	movs	r2, #0
 80006e0:	601a      	str	r2, [r3, #0]
 80006e2:	605a      	str	r2, [r3, #4]
 80006e4:	609a      	str	r2, [r3, #8]
 80006e6:	60da      	str	r2, [r3, #12]
 80006e8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006ea:	2300      	movs	r3, #0
 80006ec:	61bb      	str	r3, [r7, #24]
 80006ee:	4b5c      	ldr	r3, [pc, #368]	; (8000860 <MX_GPIO_Init+0x18c>)
 80006f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006f2:	4a5b      	ldr	r2, [pc, #364]	; (8000860 <MX_GPIO_Init+0x18c>)
 80006f4:	f043 0304 	orr.w	r3, r3, #4
 80006f8:	6313      	str	r3, [r2, #48]	; 0x30
 80006fa:	4b59      	ldr	r3, [pc, #356]	; (8000860 <MX_GPIO_Init+0x18c>)
 80006fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006fe:	f003 0304 	and.w	r3, r3, #4
 8000702:	61bb      	str	r3, [r7, #24]
 8000704:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000706:	2300      	movs	r3, #0
 8000708:	617b      	str	r3, [r7, #20]
 800070a:	4b55      	ldr	r3, [pc, #340]	; (8000860 <MX_GPIO_Init+0x18c>)
 800070c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800070e:	4a54      	ldr	r2, [pc, #336]	; (8000860 <MX_GPIO_Init+0x18c>)
 8000710:	f043 0320 	orr.w	r3, r3, #32
 8000714:	6313      	str	r3, [r2, #48]	; 0x30
 8000716:	4b52      	ldr	r3, [pc, #328]	; (8000860 <MX_GPIO_Init+0x18c>)
 8000718:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800071a:	f003 0320 	and.w	r3, r3, #32
 800071e:	617b      	str	r3, [r7, #20]
 8000720:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000722:	2300      	movs	r3, #0
 8000724:	613b      	str	r3, [r7, #16]
 8000726:	4b4e      	ldr	r3, [pc, #312]	; (8000860 <MX_GPIO_Init+0x18c>)
 8000728:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800072a:	4a4d      	ldr	r2, [pc, #308]	; (8000860 <MX_GPIO_Init+0x18c>)
 800072c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000730:	6313      	str	r3, [r2, #48]	; 0x30
 8000732:	4b4b      	ldr	r3, [pc, #300]	; (8000860 <MX_GPIO_Init+0x18c>)
 8000734:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000736:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800073a:	613b      	str	r3, [r7, #16]
 800073c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800073e:	2300      	movs	r3, #0
 8000740:	60fb      	str	r3, [r7, #12]
 8000742:	4b47      	ldr	r3, [pc, #284]	; (8000860 <MX_GPIO_Init+0x18c>)
 8000744:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000746:	4a46      	ldr	r2, [pc, #280]	; (8000860 <MX_GPIO_Init+0x18c>)
 8000748:	f043 0301 	orr.w	r3, r3, #1
 800074c:	6313      	str	r3, [r2, #48]	; 0x30
 800074e:	4b44      	ldr	r3, [pc, #272]	; (8000860 <MX_GPIO_Init+0x18c>)
 8000750:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000752:	f003 0301 	and.w	r3, r3, #1
 8000756:	60fb      	str	r3, [r7, #12]
 8000758:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800075a:	2300      	movs	r3, #0
 800075c:	60bb      	str	r3, [r7, #8]
 800075e:	4b40      	ldr	r3, [pc, #256]	; (8000860 <MX_GPIO_Init+0x18c>)
 8000760:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000762:	4a3f      	ldr	r2, [pc, #252]	; (8000860 <MX_GPIO_Init+0x18c>)
 8000764:	f043 0302 	orr.w	r3, r3, #2
 8000768:	6313      	str	r3, [r2, #48]	; 0x30
 800076a:	4b3d      	ldr	r3, [pc, #244]	; (8000860 <MX_GPIO_Init+0x18c>)
 800076c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800076e:	f003 0302 	and.w	r3, r3, #2
 8000772:	60bb      	str	r3, [r7, #8]
 8000774:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000776:	2300      	movs	r3, #0
 8000778:	607b      	str	r3, [r7, #4]
 800077a:	4b39      	ldr	r3, [pc, #228]	; (8000860 <MX_GPIO_Init+0x18c>)
 800077c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800077e:	4a38      	ldr	r2, [pc, #224]	; (8000860 <MX_GPIO_Init+0x18c>)
 8000780:	f043 0308 	orr.w	r3, r3, #8
 8000784:	6313      	str	r3, [r2, #48]	; 0x30
 8000786:	4b36      	ldr	r3, [pc, #216]	; (8000860 <MX_GPIO_Init+0x18c>)
 8000788:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800078a:	f003 0308 	and.w	r3, r3, #8
 800078e:	607b      	str	r3, [r7, #4]
 8000790:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000792:	2300      	movs	r3, #0
 8000794:	603b      	str	r3, [r7, #0]
 8000796:	4b32      	ldr	r3, [pc, #200]	; (8000860 <MX_GPIO_Init+0x18c>)
 8000798:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800079a:	4a31      	ldr	r2, [pc, #196]	; (8000860 <MX_GPIO_Init+0x18c>)
 800079c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80007a0:	6313      	str	r3, [r2, #48]	; 0x30
 80007a2:	4b2f      	ldr	r3, [pc, #188]	; (8000860 <MX_GPIO_Init+0x18c>)
 80007a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80007aa:	603b      	str	r3, [r7, #0]
 80007ac:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, XSHUNT_DISTANCE_1_Pin|XSHUNT_DISTANCE_2_Pin|XSHUNT_DISTANCE_3_Pin|XSHUNT_DISTANCE_4_Pin, GPIO_PIN_RESET);
 80007ae:	2200      	movs	r2, #0
 80007b0:	213c      	movs	r1, #60	; 0x3c
 80007b2:	482c      	ldr	r0, [pc, #176]	; (8000864 <MX_GPIO_Init+0x190>)
 80007b4:	f001 ff84 	bl	80026c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80007b8:	2200      	movs	r2, #0
 80007ba:	f244 0181 	movw	r1, #16513	; 0x4081
 80007be:	482a      	ldr	r0, [pc, #168]	; (8000868 <MX_GPIO_Init+0x194>)
 80007c0:	f001 ff7e 	bl	80026c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80007c4:	2200      	movs	r2, #0
 80007c6:	2140      	movs	r1, #64	; 0x40
 80007c8:	4828      	ldr	r0, [pc, #160]	; (800086c <MX_GPIO_Init+0x198>)
 80007ca:	f001 ff79 	bl	80026c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 80007ce:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80007d2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80007d4:	4b26      	ldr	r3, [pc, #152]	; (8000870 <MX_GPIO_Init+0x19c>)
 80007d6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007d8:	2300      	movs	r3, #0
 80007da:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80007dc:	f107 031c 	add.w	r3, r7, #28
 80007e0:	4619      	mov	r1, r3
 80007e2:	4824      	ldr	r0, [pc, #144]	; (8000874 <MX_GPIO_Init+0x1a0>)
 80007e4:	f001 fdc2 	bl	800236c <HAL_GPIO_Init>

  /*Configure GPIO pins : PFPin PFPin PFPin PFPin */
  GPIO_InitStruct.Pin = XSHUNT_DISTANCE_1_Pin|XSHUNT_DISTANCE_2_Pin|XSHUNT_DISTANCE_3_Pin|XSHUNT_DISTANCE_4_Pin;
 80007e8:	233c      	movs	r3, #60	; 0x3c
 80007ea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007ec:	2301      	movs	r3, #1
 80007ee:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007f0:	2300      	movs	r3, #0
 80007f2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007f4:	2300      	movs	r3, #0
 80007f6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80007f8:	f107 031c 	add.w	r3, r7, #28
 80007fc:	4619      	mov	r1, r3
 80007fe:	4819      	ldr	r0, [pc, #100]	; (8000864 <MX_GPIO_Init+0x190>)
 8000800:	f001 fdb4 	bl	800236c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000804:	f244 0381 	movw	r3, #16513	; 0x4081
 8000808:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800080a:	2301      	movs	r3, #1
 800080c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800080e:	2300      	movs	r3, #0
 8000810:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000812:	2300      	movs	r3, #0
 8000814:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000816:	f107 031c 	add.w	r3, r7, #28
 800081a:	4619      	mov	r1, r3
 800081c:	4812      	ldr	r0, [pc, #72]	; (8000868 <MX_GPIO_Init+0x194>)
 800081e:	f001 fda5 	bl	800236c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000822:	2340      	movs	r3, #64	; 0x40
 8000824:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000826:	2301      	movs	r3, #1
 8000828:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800082a:	2300      	movs	r3, #0
 800082c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800082e:	2300      	movs	r3, #0
 8000830:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000832:	f107 031c 	add.w	r3, r7, #28
 8000836:	4619      	mov	r1, r3
 8000838:	480c      	ldr	r0, [pc, #48]	; (800086c <MX_GPIO_Init+0x198>)
 800083a:	f001 fd97 	bl	800236c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 800083e:	2380      	movs	r3, #128	; 0x80
 8000840:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000842:	2300      	movs	r3, #0
 8000844:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000846:	2300      	movs	r3, #0
 8000848:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800084a:	f107 031c 	add.w	r3, r7, #28
 800084e:	4619      	mov	r1, r3
 8000850:	4806      	ldr	r0, [pc, #24]	; (800086c <MX_GPIO_Init+0x198>)
 8000852:	f001 fd8b 	bl	800236c <HAL_GPIO_Init>

}
 8000856:	bf00      	nop
 8000858:	3730      	adds	r7, #48	; 0x30
 800085a:	46bd      	mov	sp, r7
 800085c:	bd80      	pop	{r7, pc}
 800085e:	bf00      	nop
 8000860:	40023800 	.word	0x40023800
 8000864:	40021400 	.word	0x40021400
 8000868:	40020400 	.word	0x40020400
 800086c:	40021800 	.word	0x40021800
 8000870:	10110000 	.word	0x10110000
 8000874:	40020800 	.word	0x40020800

08000878 <LL_I2C_EnableClockStretching>:
  * @rmtoll CR1          NOSTRETCH     LL_I2C_EnableClockStretching
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_EnableClockStretching(I2C_TypeDef *I2Cx)
{
 8000878:	b480      	push	{r7}
 800087a:	b083      	sub	sp, #12
 800087c:	af00      	add	r7, sp, #0
 800087e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_NOSTRETCH);
 8000880:	687b      	ldr	r3, [r7, #4]
 8000882:	681b      	ldr	r3, [r3, #0]
 8000884:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8000888:	687b      	ldr	r3, [r7, #4]
 800088a:	601a      	str	r2, [r3, #0]
}
 800088c:	bf00      	nop
 800088e:	370c      	adds	r7, #12
 8000890:	46bd      	mov	sp, r7
 8000892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000896:	4770      	bx	lr

08000898 <LL_I2C_DisableGeneralCall>:
  * @rmtoll CR1          ENGC          LL_I2C_DisableGeneralCall
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_DisableGeneralCall(I2C_TypeDef *I2Cx)
{
 8000898:	b480      	push	{r7}
 800089a:	b083      	sub	sp, #12
 800089c:	af00      	add	r7, sp, #0
 800089e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_ENGC);
 80008a0:	687b      	ldr	r3, [r7, #4]
 80008a2:	681b      	ldr	r3, [r3, #0]
 80008a4:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 80008a8:	687b      	ldr	r3, [r7, #4]
 80008aa:	601a      	str	r2, [r3, #0]
}
 80008ac:	bf00      	nop
 80008ae:	370c      	adds	r7, #12
 80008b0:	46bd      	mov	sp, r7
 80008b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b6:	4770      	bx	lr

080008b8 <LL_I2C_SetOwnAddress2>:
  * @param  I2Cx I2C Instance.
  * @param  OwnAddress2 This parameter must be a value between Min_Data=0 and Max_Data=0x7F.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_SetOwnAddress2(I2C_TypeDef *I2Cx, uint32_t OwnAddress2)
{
 80008b8:	b480      	push	{r7}
 80008ba:	b083      	sub	sp, #12
 80008bc:	af00      	add	r7, sp, #0
 80008be:	6078      	str	r0, [r7, #4]
 80008c0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->OAR2, I2C_OAR2_ADD2, OwnAddress2);
 80008c2:	687b      	ldr	r3, [r7, #4]
 80008c4:	68db      	ldr	r3, [r3, #12]
 80008c6:	f023 02fe 	bic.w	r2, r3, #254	; 0xfe
 80008ca:	683b      	ldr	r3, [r7, #0]
 80008cc:	431a      	orrs	r2, r3
 80008ce:	687b      	ldr	r3, [r7, #4]
 80008d0:	60da      	str	r2, [r3, #12]
}
 80008d2:	bf00      	nop
 80008d4:	370c      	adds	r7, #12
 80008d6:	46bd      	mov	sp, r7
 80008d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008dc:	4770      	bx	lr

080008de <LL_I2C_DisableOwnAddress2>:
  * @rmtoll OAR2         ENDUAL        LL_I2C_DisableOwnAddress2
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_DisableOwnAddress2(I2C_TypeDef *I2Cx)
{
 80008de:	b480      	push	{r7}
 80008e0:	b083      	sub	sp, #12
 80008e2:	af00      	add	r7, sp, #0
 80008e4:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->OAR2, I2C_OAR2_ENDUAL);
 80008e6:	687b      	ldr	r3, [r7, #4]
 80008e8:	68db      	ldr	r3, [r3, #12]
 80008ea:	f023 0201 	bic.w	r2, r3, #1
 80008ee:	687b      	ldr	r3, [r7, #4]
 80008f0:	60da      	str	r2, [r3, #12]
}
 80008f2:	bf00      	nop
 80008f4:	370c      	adds	r7, #12
 80008f6:	46bd      	mov	sp, r7
 80008f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008fc:	4770      	bx	lr
	...

08000900 <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000900:	b480      	push	{r7}
 8000902:	b085      	sub	sp, #20
 8000904:	af00      	add	r7, sp, #0
 8000906:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 8000908:	4b08      	ldr	r3, [pc, #32]	; (800092c <LL_AHB1_GRP1_EnableClock+0x2c>)
 800090a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800090c:	4907      	ldr	r1, [pc, #28]	; (800092c <LL_AHB1_GRP1_EnableClock+0x2c>)
 800090e:	687b      	ldr	r3, [r7, #4]
 8000910:	4313      	orrs	r3, r2
 8000912:	630b      	str	r3, [r1, #48]	; 0x30
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8000914:	4b05      	ldr	r3, [pc, #20]	; (800092c <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000916:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	4013      	ands	r3, r2
 800091c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800091e:	68fb      	ldr	r3, [r7, #12]
}
 8000920:	bf00      	nop
 8000922:	3714      	adds	r7, #20
 8000924:	46bd      	mov	sp, r7
 8000926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800092a:	4770      	bx	lr
 800092c:	40023800 	.word	0x40023800

08000930 <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000930:	b480      	push	{r7}
 8000932:	b085      	sub	sp, #20
 8000934:	af00      	add	r7, sp, #0
 8000936:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 8000938:	4b08      	ldr	r3, [pc, #32]	; (800095c <LL_APB1_GRP1_EnableClock+0x2c>)
 800093a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800093c:	4907      	ldr	r1, [pc, #28]	; (800095c <LL_APB1_GRP1_EnableClock+0x2c>)
 800093e:	687b      	ldr	r3, [r7, #4]
 8000940:	4313      	orrs	r3, r2
 8000942:	640b      	str	r3, [r1, #64]	; 0x40
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8000944:	4b05      	ldr	r3, [pc, #20]	; (800095c <LL_APB1_GRP1_EnableClock+0x2c>)
 8000946:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000948:	687b      	ldr	r3, [r7, #4]
 800094a:	4013      	ands	r3, r2
 800094c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800094e:	68fb      	ldr	r3, [r7, #12]
}
 8000950:	bf00      	nop
 8000952:	3714      	adds	r7, #20
 8000954:	46bd      	mov	sp, r7
 8000956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800095a:	4770      	bx	lr
 800095c:	40023800 	.word	0x40023800

08000960 <MX_I2C1_Init>:

/* USER CODE END 0 */

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000960:	b580      	push	{r7, lr}
 8000962:	b08e      	sub	sp, #56	; 0x38
 8000964:	af00      	add	r7, sp, #0
  LL_I2C_InitTypeDef I2C_InitStruct = {0};
 8000966:	f107 0318 	add.w	r3, r7, #24
 800096a:	2220      	movs	r2, #32
 800096c:	2100      	movs	r1, #0
 800096e:	4618      	mov	r0, r3
 8000970:	f017 f91c 	bl	8017bac <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000974:	463b      	mov	r3, r7
 8000976:	2200      	movs	r2, #0
 8000978:	601a      	str	r2, [r3, #0]
 800097a:	605a      	str	r2, [r3, #4]
 800097c:	609a      	str	r2, [r3, #8]
 800097e:	60da      	str	r2, [r3, #12]
 8000980:	611a      	str	r2, [r3, #16]
 8000982:	615a      	str	r2, [r3, #20]

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 8000984:	2002      	movs	r0, #2
 8000986:	f7ff ffbb 	bl	8000900 <LL_AHB1_GRP1_EnableClock>
  /**I2C1 GPIO Configuration  
  PB8   ------> I2C1_SCL
  PB9   ------> I2C1_SDA 
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_8|LL_GPIO_PIN_9;
 800098a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800098e:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8000990:	2302      	movs	r3, #2
 8000992:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8000994:	2303      	movs	r3, #3
 8000996:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_OPENDRAIN;
 8000998:	2301      	movs	r3, #1
 800099a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 800099c:	2301      	movs	r3, #1
 800099e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_4;
 80009a0:	2304      	movs	r3, #4
 80009a2:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009a4:	463b      	mov	r3, r7
 80009a6:	4619      	mov	r1, r3
 80009a8:	4817      	ldr	r0, [pc, #92]	; (8000a08 <MX_I2C1_Init+0xa8>)
 80009aa:	f003 ffbe 	bl	800492a <LL_GPIO_Init>

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_I2C1);
 80009ae:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 80009b2:	f7ff ffbd 	bl	8000930 <LL_APB1_GRP1_EnableClock>

  /** I2C Initialization 
  */
  LL_I2C_DisableOwnAddress2(I2C1);
 80009b6:	4815      	ldr	r0, [pc, #84]	; (8000a0c <MX_I2C1_Init+0xac>)
 80009b8:	f7ff ff91 	bl	80008de <LL_I2C_DisableOwnAddress2>
  LL_I2C_DisableGeneralCall(I2C1);
 80009bc:	4813      	ldr	r0, [pc, #76]	; (8000a0c <MX_I2C1_Init+0xac>)
 80009be:	f7ff ff6b 	bl	8000898 <LL_I2C_DisableGeneralCall>
  LL_I2C_EnableClockStretching(I2C1);
 80009c2:	4812      	ldr	r0, [pc, #72]	; (8000a0c <MX_I2C1_Init+0xac>)
 80009c4:	f7ff ff58 	bl	8000878 <LL_I2C_EnableClockStretching>
  I2C_InitStruct.PeripheralMode = LL_I2C_MODE_I2C;
 80009c8:	2300      	movs	r3, #0
 80009ca:	61bb      	str	r3, [r7, #24]
  I2C_InitStruct.ClockSpeed = 100000;
 80009cc:	4b10      	ldr	r3, [pc, #64]	; (8000a10 <MX_I2C1_Init+0xb0>)
 80009ce:	61fb      	str	r3, [r7, #28]
  I2C_InitStruct.DutyCycle = LL_I2C_DUTYCYCLE_2;
 80009d0:	2300      	movs	r3, #0
 80009d2:	623b      	str	r3, [r7, #32]
  I2C_InitStruct.AnalogFilter = LL_I2C_ANALOGFILTER_ENABLE;
 80009d4:	2300      	movs	r3, #0
 80009d6:	627b      	str	r3, [r7, #36]	; 0x24
  I2C_InitStruct.DigitalFilter = 0;
 80009d8:	2300      	movs	r3, #0
 80009da:	62bb      	str	r3, [r7, #40]	; 0x28
  I2C_InitStruct.OwnAddress1 = 0;
 80009dc:	2300      	movs	r3, #0
 80009de:	62fb      	str	r3, [r7, #44]	; 0x2c
  I2C_InitStruct.TypeAcknowledge = LL_I2C_ACK;
 80009e0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80009e4:	633b      	str	r3, [r7, #48]	; 0x30
  I2C_InitStruct.OwnAddrSize = LL_I2C_OWNADDRESS1_7BIT;
 80009e6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80009ea:	637b      	str	r3, [r7, #52]	; 0x34
  LL_I2C_Init(I2C1, &I2C_InitStruct);
 80009ec:	f107 0318 	add.w	r3, r7, #24
 80009f0:	4619      	mov	r1, r3
 80009f2:	4806      	ldr	r0, [pc, #24]	; (8000a0c <MX_I2C1_Init+0xac>)
 80009f4:	f004 f91a 	bl	8004c2c <LL_I2C_Init>
  LL_I2C_SetOwnAddress2(I2C1, 0);
 80009f8:	2100      	movs	r1, #0
 80009fa:	4804      	ldr	r0, [pc, #16]	; (8000a0c <MX_I2C1_Init+0xac>)
 80009fc:	f7ff ff5c 	bl	80008b8 <LL_I2C_SetOwnAddress2>

}
 8000a00:	bf00      	nop
 8000a02:	3738      	adds	r7, #56	; 0x38
 8000a04:	46bd      	mov	sp, r7
 8000a06:	bd80      	pop	{r7, pc}
 8000a08:	40020400 	.word	0x40020400
 8000a0c:	40005400 	.word	0x40005400
 8000a10:	000186a0 	.word	0x000186a0

08000a14 <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8000a14:	b580      	push	{r7, lr}
 8000a16:	b08e      	sub	sp, #56	; 0x38
 8000a18:	af00      	add	r7, sp, #0
  LL_I2C_InitTypeDef I2C_InitStruct = {0};
 8000a1a:	f107 0318 	add.w	r3, r7, #24
 8000a1e:	2220      	movs	r2, #32
 8000a20:	2100      	movs	r1, #0
 8000a22:	4618      	mov	r0, r3
 8000a24:	f017 f8c2 	bl	8017bac <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a28:	463b      	mov	r3, r7
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	601a      	str	r2, [r3, #0]
 8000a2e:	605a      	str	r2, [r3, #4]
 8000a30:	609a      	str	r2, [r3, #8]
 8000a32:	60da      	str	r2, [r3, #12]
 8000a34:	611a      	str	r2, [r3, #16]
 8000a36:	615a      	str	r2, [r3, #20]

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOF);
 8000a38:	2020      	movs	r0, #32
 8000a3a:	f7ff ff61 	bl	8000900 <LL_AHB1_GRP1_EnableClock>
  /**I2C2 GPIO Configuration  
  PF0   ------> I2C2_SDA
  PF1   ------> I2C2_SCL 
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_0|LL_GPIO_PIN_1;
 8000a3e:	2303      	movs	r3, #3
 8000a40:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8000a42:	2302      	movs	r3, #2
 8000a44:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8000a46:	2303      	movs	r3, #3
 8000a48:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_OPENDRAIN;
 8000a4a:	2301      	movs	r3, #1
 8000a4c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8000a4e:	2301      	movs	r3, #1
 8000a50:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_4;
 8000a52:	2304      	movs	r3, #4
 8000a54:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000a56:	463b      	mov	r3, r7
 8000a58:	4619      	mov	r1, r3
 8000a5a:	4818      	ldr	r0, [pc, #96]	; (8000abc <MX_I2C2_Init+0xa8>)
 8000a5c:	f003 ff65 	bl	800492a <LL_GPIO_Init>

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_I2C2);
 8000a60:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 8000a64:	f7ff ff64 	bl	8000930 <LL_APB1_GRP1_EnableClock>

  /** I2C Initialization 
  */
  LL_I2C_DisableOwnAddress2(I2C2);
 8000a68:	4815      	ldr	r0, [pc, #84]	; (8000ac0 <MX_I2C2_Init+0xac>)
 8000a6a:	f7ff ff38 	bl	80008de <LL_I2C_DisableOwnAddress2>
  LL_I2C_DisableGeneralCall(I2C2);
 8000a6e:	4814      	ldr	r0, [pc, #80]	; (8000ac0 <MX_I2C2_Init+0xac>)
 8000a70:	f7ff ff12 	bl	8000898 <LL_I2C_DisableGeneralCall>
  LL_I2C_EnableClockStretching(I2C2);
 8000a74:	4812      	ldr	r0, [pc, #72]	; (8000ac0 <MX_I2C2_Init+0xac>)
 8000a76:	f7ff feff 	bl	8000878 <LL_I2C_EnableClockStretching>
  I2C_InitStruct.PeripheralMode = LL_I2C_MODE_I2C;
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	61bb      	str	r3, [r7, #24]
  I2C_InitStruct.ClockSpeed = 100000;
 8000a7e:	4b11      	ldr	r3, [pc, #68]	; (8000ac4 <MX_I2C2_Init+0xb0>)
 8000a80:	61fb      	str	r3, [r7, #28]
  I2C_InitStruct.DutyCycle = LL_I2C_DUTYCYCLE_2;
 8000a82:	2300      	movs	r3, #0
 8000a84:	623b      	str	r3, [r7, #32]
  I2C_InitStruct.AnalogFilter = LL_I2C_ANALOGFILTER_ENABLE;
 8000a86:	2300      	movs	r3, #0
 8000a88:	627b      	str	r3, [r7, #36]	; 0x24
  I2C_InitStruct.DigitalFilter = 0;
 8000a8a:	2300      	movs	r3, #0
 8000a8c:	62bb      	str	r3, [r7, #40]	; 0x28
  I2C_InitStruct.OwnAddress1 = 0;
 8000a8e:	2300      	movs	r3, #0
 8000a90:	62fb      	str	r3, [r7, #44]	; 0x2c
  I2C_InitStruct.TypeAcknowledge = LL_I2C_ACK;
 8000a92:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000a96:	633b      	str	r3, [r7, #48]	; 0x30
  I2C_InitStruct.OwnAddrSize = LL_I2C_OWNADDRESS1_7BIT;
 8000a98:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000a9c:	637b      	str	r3, [r7, #52]	; 0x34
  LL_I2C_Init(I2C2, &I2C_InitStruct);
 8000a9e:	f107 0318 	add.w	r3, r7, #24
 8000aa2:	4619      	mov	r1, r3
 8000aa4:	4806      	ldr	r0, [pc, #24]	; (8000ac0 <MX_I2C2_Init+0xac>)
 8000aa6:	f004 f8c1 	bl	8004c2c <LL_I2C_Init>
  LL_I2C_SetOwnAddress2(I2C2, 0);
 8000aaa:	2100      	movs	r1, #0
 8000aac:	4804      	ldr	r0, [pc, #16]	; (8000ac0 <MX_I2C2_Init+0xac>)
 8000aae:	f7ff ff03 	bl	80008b8 <LL_I2C_SetOwnAddress2>

}
 8000ab2:	bf00      	nop
 8000ab4:	3738      	adds	r7, #56	; 0x38
 8000ab6:	46bd      	mov	sp, r7
 8000ab8:	bd80      	pop	{r7, pc}
 8000aba:	bf00      	nop
 8000abc:	40021400 	.word	0x40021400
 8000ac0:	40005800 	.word	0x40005800
 8000ac4:	000186a0 	.word	0x000186a0

08000ac8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000acc:	f000 faf6 	bl	80010bc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ad0:	f000 f80e 	bl	8000af0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ad4:	f7ff fdfe 	bl	80006d4 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000ad8:	f000 fa74 	bl	8000fc4 <MX_USART3_UART_Init>
  MX_I2C1_Init();
 8000adc:	f7ff ff40 	bl	8000960 <MX_I2C1_Init>
  MX_I2C2_Init();
 8000ae0:	f7ff ff98 	bl	8000a14 <MX_I2C2_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init(); 
 8000ae4:	f7ff fd54 	bl	8000590 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8000ae8:	f007 fd40 	bl	800856c <osKernelStart>
  
  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000aec:	e7fe      	b.n	8000aec <main+0x24>
	...

08000af0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	b094      	sub	sp, #80	; 0x50
 8000af4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000af6:	f107 0320 	add.w	r3, r7, #32
 8000afa:	2230      	movs	r2, #48	; 0x30
 8000afc:	2100      	movs	r1, #0
 8000afe:	4618      	mov	r0, r3
 8000b00:	f017 f854 	bl	8017bac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b04:	f107 030c 	add.w	r3, r7, #12
 8000b08:	2200      	movs	r2, #0
 8000b0a:	601a      	str	r2, [r3, #0]
 8000b0c:	605a      	str	r2, [r3, #4]
 8000b0e:	609a      	str	r2, [r3, #8]
 8000b10:	60da      	str	r2, [r3, #12]
 8000b12:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b14:	2300      	movs	r3, #0
 8000b16:	60bb      	str	r3, [r7, #8]
 8000b18:	4b28      	ldr	r3, [pc, #160]	; (8000bbc <SystemClock_Config+0xcc>)
 8000b1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b1c:	4a27      	ldr	r2, [pc, #156]	; (8000bbc <SystemClock_Config+0xcc>)
 8000b1e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b22:	6413      	str	r3, [r2, #64]	; 0x40
 8000b24:	4b25      	ldr	r3, [pc, #148]	; (8000bbc <SystemClock_Config+0xcc>)
 8000b26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b28:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b2c:	60bb      	str	r3, [r7, #8]
 8000b2e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000b30:	2300      	movs	r3, #0
 8000b32:	607b      	str	r3, [r7, #4]
 8000b34:	4b22      	ldr	r3, [pc, #136]	; (8000bc0 <SystemClock_Config+0xd0>)
 8000b36:	681b      	ldr	r3, [r3, #0]
 8000b38:	4a21      	ldr	r2, [pc, #132]	; (8000bc0 <SystemClock_Config+0xd0>)
 8000b3a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000b3e:	6013      	str	r3, [r2, #0]
 8000b40:	4b1f      	ldr	r3, [pc, #124]	; (8000bc0 <SystemClock_Config+0xd0>)
 8000b42:	681b      	ldr	r3, [r3, #0]
 8000b44:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000b48:	607b      	str	r3, [r7, #4]
 8000b4a:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000b4c:	2301      	movs	r3, #1
 8000b4e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000b50:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000b54:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b56:	2302      	movs	r3, #2
 8000b58:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000b5a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000b5e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000b60:	2304      	movs	r3, #4
 8000b62:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000b64:	23a8      	movs	r3, #168	; 0xa8
 8000b66:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000b68:	2302      	movs	r3, #2
 8000b6a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000b6c:	2307      	movs	r3, #7
 8000b6e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b70:	f107 0320 	add.w	r3, r7, #32
 8000b74:	4618      	mov	r0, r3
 8000b76:	f002 ff47 	bl	8003a08 <HAL_RCC_OscConfig>
 8000b7a:	4603      	mov	r3, r0
 8000b7c:	2b00      	cmp	r3, #0
 8000b7e:	d001      	beq.n	8000b84 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000b80:	f000 f832 	bl	8000be8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b84:	230f      	movs	r3, #15
 8000b86:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b88:	2302      	movs	r3, #2
 8000b8a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b8c:	2300      	movs	r3, #0
 8000b8e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000b90:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000b94:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000b96:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b9a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000b9c:	f107 030c 	add.w	r3, r7, #12
 8000ba0:	2105      	movs	r1, #5
 8000ba2:	4618      	mov	r0, r3
 8000ba4:	f003 f972 	bl	8003e8c <HAL_RCC_ClockConfig>
 8000ba8:	4603      	mov	r3, r0
 8000baa:	2b00      	cmp	r3, #0
 8000bac:	d001      	beq.n	8000bb2 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000bae:	f000 f81b 	bl	8000be8 <Error_Handler>
  }
}
 8000bb2:	bf00      	nop
 8000bb4:	3750      	adds	r7, #80	; 0x50
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	bd80      	pop	{r7, pc}
 8000bba:	bf00      	nop
 8000bbc:	40023800 	.word	0x40023800
 8000bc0:	40007000 	.word	0x40007000

08000bc4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	b082      	sub	sp, #8
 8000bc8:	af00      	add	r7, sp, #0
 8000bca:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM10) {
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	681b      	ldr	r3, [r3, #0]
 8000bd0:	4a04      	ldr	r2, [pc, #16]	; (8000be4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000bd2:	4293      	cmp	r3, r2
 8000bd4:	d101      	bne.n	8000bda <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000bd6:	f000 fa93 	bl	8001100 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000bda:	bf00      	nop
 8000bdc:	3708      	adds	r7, #8
 8000bde:	46bd      	mov	sp, r7
 8000be0:	bd80      	pop	{r7, pc}
 8000be2:	bf00      	nop
 8000be4:	40014400 	.word	0x40014400

08000be8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000be8:	b480      	push	{r7}
 8000bea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000bec:	bf00      	nop
 8000bee:	46bd      	mov	sp, r7
 8000bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf4:	4770      	bx	lr
	...

08000bf8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	b082      	sub	sp, #8
 8000bfc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bfe:	2300      	movs	r3, #0
 8000c00:	607b      	str	r3, [r7, #4]
 8000c02:	4b12      	ldr	r3, [pc, #72]	; (8000c4c <HAL_MspInit+0x54>)
 8000c04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c06:	4a11      	ldr	r2, [pc, #68]	; (8000c4c <HAL_MspInit+0x54>)
 8000c08:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c0c:	6453      	str	r3, [r2, #68]	; 0x44
 8000c0e:	4b0f      	ldr	r3, [pc, #60]	; (8000c4c <HAL_MspInit+0x54>)
 8000c10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c12:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c16:	607b      	str	r3, [r7, #4]
 8000c18:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	603b      	str	r3, [r7, #0]
 8000c1e:	4b0b      	ldr	r3, [pc, #44]	; (8000c4c <HAL_MspInit+0x54>)
 8000c20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c22:	4a0a      	ldr	r2, [pc, #40]	; (8000c4c <HAL_MspInit+0x54>)
 8000c24:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c28:	6413      	str	r3, [r2, #64]	; 0x40
 8000c2a:	4b08      	ldr	r3, [pc, #32]	; (8000c4c <HAL_MspInit+0x54>)
 8000c2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c32:	603b      	str	r3, [r7, #0]
 8000c34:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000c36:	2200      	movs	r2, #0
 8000c38:	210f      	movs	r1, #15
 8000c3a:	f06f 0001 	mvn.w	r0, #1
 8000c3e:	f000 fb59 	bl	80012f4 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c42:	bf00      	nop
 8000c44:	3708      	adds	r7, #8
 8000c46:	46bd      	mov	sp, r7
 8000c48:	bd80      	pop	{r7, pc}
 8000c4a:	bf00      	nop
 8000c4c:	40023800 	.word	0x40023800

08000c50 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	b08c      	sub	sp, #48	; 0x30
 8000c54:	af00      	add	r7, sp, #0
 8000c56:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000c58:	2300      	movs	r3, #0
 8000c5a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000c5c:	2300      	movs	r3, #0
 8000c5e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM10 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0); 
 8000c60:	2200      	movs	r2, #0
 8000c62:	6879      	ldr	r1, [r7, #4]
 8000c64:	2019      	movs	r0, #25
 8000c66:	f000 fb45 	bl	80012f4 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM10 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn); 
 8000c6a:	2019      	movs	r0, #25
 8000c6c:	f000 fb5e 	bl	800132c <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM10 clock */
  __HAL_RCC_TIM10_CLK_ENABLE();
 8000c70:	2300      	movs	r3, #0
 8000c72:	60fb      	str	r3, [r7, #12]
 8000c74:	4b1f      	ldr	r3, [pc, #124]	; (8000cf4 <HAL_InitTick+0xa4>)
 8000c76:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c78:	4a1e      	ldr	r2, [pc, #120]	; (8000cf4 <HAL_InitTick+0xa4>)
 8000c7a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c7e:	6453      	str	r3, [r2, #68]	; 0x44
 8000c80:	4b1c      	ldr	r3, [pc, #112]	; (8000cf4 <HAL_InitTick+0xa4>)
 8000c82:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c84:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c88:	60fb      	str	r3, [r7, #12]
 8000c8a:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000c8c:	f107 0210 	add.w	r2, r7, #16
 8000c90:	f107 0314 	add.w	r3, r7, #20
 8000c94:	4611      	mov	r1, r2
 8000c96:	4618      	mov	r0, r3
 8000c98:	f003 fad2 	bl	8004240 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM10 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8000c9c:	f003 fabc 	bl	8004218 <HAL_RCC_GetPCLK2Freq>
 8000ca0:	4603      	mov	r3, r0
 8000ca2:	005b      	lsls	r3, r3, #1
 8000ca4:	62fb      	str	r3, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM10 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8000ca6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000ca8:	4a13      	ldr	r2, [pc, #76]	; (8000cf8 <HAL_InitTick+0xa8>)
 8000caa:	fba2 2303 	umull	r2, r3, r2, r3
 8000cae:	0c9b      	lsrs	r3, r3, #18
 8000cb0:	3b01      	subs	r3, #1
 8000cb2:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM10 */
  htim10.Instance = TIM10;
 8000cb4:	4b11      	ldr	r3, [pc, #68]	; (8000cfc <HAL_InitTick+0xac>)
 8000cb6:	4a12      	ldr	r2, [pc, #72]	; (8000d00 <HAL_InitTick+0xb0>)
 8000cb8:	601a      	str	r2, [r3, #0]
  + Period = [(TIM10CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim10.Init.Period = (1000000 / 1000) - 1;
 8000cba:	4b10      	ldr	r3, [pc, #64]	; (8000cfc <HAL_InitTick+0xac>)
 8000cbc:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000cc0:	60da      	str	r2, [r3, #12]
  htim10.Init.Prescaler = uwPrescalerValue;
 8000cc2:	4a0e      	ldr	r2, [pc, #56]	; (8000cfc <HAL_InitTick+0xac>)
 8000cc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000cc6:	6053      	str	r3, [r2, #4]
  htim10.Init.ClockDivision = 0;
 8000cc8:	4b0c      	ldr	r3, [pc, #48]	; (8000cfc <HAL_InitTick+0xac>)
 8000cca:	2200      	movs	r2, #0
 8000ccc:	611a      	str	r2, [r3, #16]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000cce:	4b0b      	ldr	r3, [pc, #44]	; (8000cfc <HAL_InitTick+0xac>)
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim10) == HAL_OK)
 8000cd4:	4809      	ldr	r0, [pc, #36]	; (8000cfc <HAL_InitTick+0xac>)
 8000cd6:	f003 fae5 	bl	80042a4 <HAL_TIM_Base_Init>
 8000cda:	4603      	mov	r3, r0
 8000cdc:	2b00      	cmp	r3, #0
 8000cde:	d104      	bne.n	8000cea <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim10);
 8000ce0:	4806      	ldr	r0, [pc, #24]	; (8000cfc <HAL_InitTick+0xac>)
 8000ce2:	f003 fb14 	bl	800430e <HAL_TIM_Base_Start_IT>
 8000ce6:	4603      	mov	r3, r0
 8000ce8:	e000      	b.n	8000cec <HAL_InitTick+0x9c>
  }
  
  /* Return function status */
  return HAL_ERROR;
 8000cea:	2301      	movs	r3, #1
}
 8000cec:	4618      	mov	r0, r3
 8000cee:	3730      	adds	r7, #48	; 0x30
 8000cf0:	46bd      	mov	sp, r7
 8000cf2:	bd80      	pop	{r7, pc}
 8000cf4:	40023800 	.word	0x40023800
 8000cf8:	431bde83 	.word	0x431bde83
 8000cfc:	20004cd0 	.word	0x20004cd0
 8000d00:	40014400 	.word	0x40014400

08000d04 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d04:	b480      	push	{r7}
 8000d06:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000d08:	bf00      	nop
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d10:	4770      	bx	lr

08000d12 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d12:	b480      	push	{r7}
 8000d14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d16:	e7fe      	b.n	8000d16 <HardFault_Handler+0x4>

08000d18 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d18:	b480      	push	{r7}
 8000d1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d1c:	e7fe      	b.n	8000d1c <MemManage_Handler+0x4>

08000d1e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d1e:	b480      	push	{r7}
 8000d20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d22:	e7fe      	b.n	8000d22 <BusFault_Handler+0x4>

08000d24 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d24:	b480      	push	{r7}
 8000d26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d28:	e7fe      	b.n	8000d28 <UsageFault_Handler+0x4>

08000d2a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d2a:	b480      	push	{r7}
 8000d2c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d2e:	bf00      	nop
 8000d30:	46bd      	mov	sp, r7
 8000d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d36:	4770      	bx	lr

08000d38 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 8000d3c:	4802      	ldr	r0, [pc, #8]	; (8000d48 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8000d3e:	f003 fb0a 	bl	8004356 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8000d42:	bf00      	nop
 8000d44:	bd80      	pop	{r7, pc}
 8000d46:	bf00      	nop
 8000d48:	20004cd0 	.word	0x20004cd0

08000d4c <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 8000d50:	4802      	ldr	r0, [pc, #8]	; (8000d5c <ETH_IRQHandler+0x10>)
 8000d52:	f000 fedf 	bl	8001b14 <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 8000d56:	bf00      	nop
 8000d58:	bd80      	pop	{r7, pc}
 8000d5a:	bf00      	nop
 8000d5c:	20006624 	.word	0x20006624

08000d60 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000d60:	b580      	push	{r7, lr}
 8000d62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000d64:	4802      	ldr	r0, [pc, #8]	; (8000d70 <OTG_FS_IRQHandler+0x10>)
 8000d66:	f001 fe14 	bl	8002992 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000d6a:	bf00      	nop
 8000d6c:	bd80      	pop	{r7, pc}
 8000d6e:	bf00      	nop
 8000d70:	2000ca98 	.word	0x2000ca98

08000d74 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	b086      	sub	sp, #24
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	60f8      	str	r0, [r7, #12]
 8000d7c:	60b9      	str	r1, [r7, #8]
 8000d7e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d80:	2300      	movs	r3, #0
 8000d82:	617b      	str	r3, [r7, #20]
 8000d84:	e00a      	b.n	8000d9c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000d86:	f3af 8000 	nop.w
 8000d8a:	4601      	mov	r1, r0
 8000d8c:	68bb      	ldr	r3, [r7, #8]
 8000d8e:	1c5a      	adds	r2, r3, #1
 8000d90:	60ba      	str	r2, [r7, #8]
 8000d92:	b2ca      	uxtb	r2, r1
 8000d94:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d96:	697b      	ldr	r3, [r7, #20]
 8000d98:	3301      	adds	r3, #1
 8000d9a:	617b      	str	r3, [r7, #20]
 8000d9c:	697a      	ldr	r2, [r7, #20]
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	429a      	cmp	r2, r3
 8000da2:	dbf0      	blt.n	8000d86 <_read+0x12>
	}

return len;
 8000da4:	687b      	ldr	r3, [r7, #4]
}
 8000da6:	4618      	mov	r0, r3
 8000da8:	3718      	adds	r7, #24
 8000daa:	46bd      	mov	sp, r7
 8000dac:	bd80      	pop	{r7, pc}

08000dae <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000dae:	b580      	push	{r7, lr}
 8000db0:	b086      	sub	sp, #24
 8000db2:	af00      	add	r7, sp, #0
 8000db4:	60f8      	str	r0, [r7, #12]
 8000db6:	60b9      	str	r1, [r7, #8]
 8000db8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000dba:	2300      	movs	r3, #0
 8000dbc:	617b      	str	r3, [r7, #20]
 8000dbe:	e009      	b.n	8000dd4 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000dc0:	68bb      	ldr	r3, [r7, #8]
 8000dc2:	1c5a      	adds	r2, r3, #1
 8000dc4:	60ba      	str	r2, [r7, #8]
 8000dc6:	781b      	ldrb	r3, [r3, #0]
 8000dc8:	4618      	mov	r0, r3
 8000dca:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000dce:	697b      	ldr	r3, [r7, #20]
 8000dd0:	3301      	adds	r3, #1
 8000dd2:	617b      	str	r3, [r7, #20]
 8000dd4:	697a      	ldr	r2, [r7, #20]
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	429a      	cmp	r2, r3
 8000dda:	dbf1      	blt.n	8000dc0 <_write+0x12>
	}
	return len;
 8000ddc:	687b      	ldr	r3, [r7, #4]
}
 8000dde:	4618      	mov	r0, r3
 8000de0:	3718      	adds	r7, #24
 8000de2:	46bd      	mov	sp, r7
 8000de4:	bd80      	pop	{r7, pc}

08000de6 <_close>:

int _close(int file)
{
 8000de6:	b480      	push	{r7}
 8000de8:	b083      	sub	sp, #12
 8000dea:	af00      	add	r7, sp, #0
 8000dec:	6078      	str	r0, [r7, #4]
	return -1;
 8000dee:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000df2:	4618      	mov	r0, r3
 8000df4:	370c      	adds	r7, #12
 8000df6:	46bd      	mov	sp, r7
 8000df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dfc:	4770      	bx	lr

08000dfe <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000dfe:	b480      	push	{r7}
 8000e00:	b083      	sub	sp, #12
 8000e02:	af00      	add	r7, sp, #0
 8000e04:	6078      	str	r0, [r7, #4]
 8000e06:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000e08:	683b      	ldr	r3, [r7, #0]
 8000e0a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000e0e:	605a      	str	r2, [r3, #4]
	return 0;
 8000e10:	2300      	movs	r3, #0
}
 8000e12:	4618      	mov	r0, r3
 8000e14:	370c      	adds	r7, #12
 8000e16:	46bd      	mov	sp, r7
 8000e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e1c:	4770      	bx	lr

08000e1e <_isatty>:

int _isatty(int file)
{
 8000e1e:	b480      	push	{r7}
 8000e20:	b083      	sub	sp, #12
 8000e22:	af00      	add	r7, sp, #0
 8000e24:	6078      	str	r0, [r7, #4]
	return 1;
 8000e26:	2301      	movs	r3, #1
}
 8000e28:	4618      	mov	r0, r3
 8000e2a:	370c      	adds	r7, #12
 8000e2c:	46bd      	mov	sp, r7
 8000e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e32:	4770      	bx	lr

08000e34 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000e34:	b480      	push	{r7}
 8000e36:	b085      	sub	sp, #20
 8000e38:	af00      	add	r7, sp, #0
 8000e3a:	60f8      	str	r0, [r7, #12]
 8000e3c:	60b9      	str	r1, [r7, #8]
 8000e3e:	607a      	str	r2, [r7, #4]
	return 0;
 8000e40:	2300      	movs	r3, #0
}
 8000e42:	4618      	mov	r0, r3
 8000e44:	3714      	adds	r7, #20
 8000e46:	46bd      	mov	sp, r7
 8000e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e4c:	4770      	bx	lr
	...

08000e50 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8000e50:	b480      	push	{r7}
 8000e52:	b085      	sub	sp, #20
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8000e58:	4b11      	ldr	r3, [pc, #68]	; (8000ea0 <_sbrk+0x50>)
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	2b00      	cmp	r3, #0
 8000e5e:	d102      	bne.n	8000e66 <_sbrk+0x16>
		heap_end = &end;
 8000e60:	4b0f      	ldr	r3, [pc, #60]	; (8000ea0 <_sbrk+0x50>)
 8000e62:	4a10      	ldr	r2, [pc, #64]	; (8000ea4 <_sbrk+0x54>)
 8000e64:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8000e66:	4b0e      	ldr	r3, [pc, #56]	; (8000ea0 <_sbrk+0x50>)
 8000e68:	681b      	ldr	r3, [r3, #0]
 8000e6a:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8000e6c:	4b0c      	ldr	r3, [pc, #48]	; (8000ea0 <_sbrk+0x50>)
 8000e6e:	681a      	ldr	r2, [r3, #0]
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	4413      	add	r3, r2
 8000e74:	466a      	mov	r2, sp
 8000e76:	4293      	cmp	r3, r2
 8000e78:	d905      	bls.n	8000e86 <_sbrk+0x36>
	{
		errno = ENOMEM;
 8000e7a:	4b0b      	ldr	r3, [pc, #44]	; (8000ea8 <_sbrk+0x58>)
 8000e7c:	220c      	movs	r2, #12
 8000e7e:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 8000e80:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000e84:	e006      	b.n	8000e94 <_sbrk+0x44>
	}

	heap_end += incr;
 8000e86:	4b06      	ldr	r3, [pc, #24]	; (8000ea0 <_sbrk+0x50>)
 8000e88:	681a      	ldr	r2, [r3, #0]
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	4413      	add	r3, r2
 8000e8e:	4a04      	ldr	r2, [pc, #16]	; (8000ea0 <_sbrk+0x50>)
 8000e90:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8000e92:	68fb      	ldr	r3, [r7, #12]
}
 8000e94:	4618      	mov	r0, r3
 8000e96:	3714      	adds	r7, #20
 8000e98:	46bd      	mov	sp, r7
 8000e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e9e:	4770      	bx	lr
 8000ea0:	20000208 	.word	0x20000208
 8000ea4:	2000cea0 	.word	0x2000cea0
 8000ea8:	2000b5f4 	.word	0x2000b5f4

08000eac <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000eac:	b480      	push	{r7}
 8000eae:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000eb0:	4b16      	ldr	r3, [pc, #88]	; (8000f0c <SystemInit+0x60>)
 8000eb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000eb6:	4a15      	ldr	r2, [pc, #84]	; (8000f0c <SystemInit+0x60>)
 8000eb8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ebc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8000ec0:	4b13      	ldr	r3, [pc, #76]	; (8000f10 <SystemInit+0x64>)
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	4a12      	ldr	r2, [pc, #72]	; (8000f10 <SystemInit+0x64>)
 8000ec6:	f043 0301 	orr.w	r3, r3, #1
 8000eca:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000ecc:	4b10      	ldr	r3, [pc, #64]	; (8000f10 <SystemInit+0x64>)
 8000ece:	2200      	movs	r2, #0
 8000ed0:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8000ed2:	4b0f      	ldr	r3, [pc, #60]	; (8000f10 <SystemInit+0x64>)
 8000ed4:	681b      	ldr	r3, [r3, #0]
 8000ed6:	4a0e      	ldr	r2, [pc, #56]	; (8000f10 <SystemInit+0x64>)
 8000ed8:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8000edc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000ee0:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8000ee2:	4b0b      	ldr	r3, [pc, #44]	; (8000f10 <SystemInit+0x64>)
 8000ee4:	4a0b      	ldr	r2, [pc, #44]	; (8000f14 <SystemInit+0x68>)
 8000ee6:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8000ee8:	4b09      	ldr	r3, [pc, #36]	; (8000f10 <SystemInit+0x64>)
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	4a08      	ldr	r2, [pc, #32]	; (8000f10 <SystemInit+0x64>)
 8000eee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000ef2:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8000ef4:	4b06      	ldr	r3, [pc, #24]	; (8000f10 <SystemInit+0x64>)
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000efa:	4b04      	ldr	r3, [pc, #16]	; (8000f0c <SystemInit+0x60>)
 8000efc:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000f00:	609a      	str	r2, [r3, #8]
#endif
}
 8000f02:	bf00      	nop
 8000f04:	46bd      	mov	sp, r7
 8000f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0a:	4770      	bx	lr
 8000f0c:	e000ed00 	.word	0xe000ed00
 8000f10:	40023800 	.word	0x40023800
 8000f14:	24003010 	.word	0x24003010

08000f18 <LL_USART_Enable>:
  * @rmtoll CR1          UE            LL_USART_Enable
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_Enable(USART_TypeDef *USARTx)
{
 8000f18:	b480      	push	{r7}
 8000f1a:	b083      	sub	sp, #12
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	68db      	ldr	r3, [r3, #12]
 8000f24:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	60da      	str	r2, [r3, #12]
}
 8000f2c:	bf00      	nop
 8000f2e:	370c      	adds	r7, #12
 8000f30:	46bd      	mov	sp, r7
 8000f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f36:	4770      	bx	lr

08000f38 <LL_USART_ConfigAsyncMode>:
  *         CR3          HDSEL         LL_USART_ConfigAsyncMode
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ConfigAsyncMode(USART_TypeDef *USARTx)
{
 8000f38:	b480      	push	{r7}
 8000f3a:	b083      	sub	sp, #12
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	6078      	str	r0, [r7, #4]
  /* In Asynchronous mode, the following bits must be kept cleared:
  - LINEN, CLKEN bits in the USART_CR2 register,
  - SCEN, IREN and HDSEL bits in the USART_CR3 register.*/
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	691b      	ldr	r3, [r3, #16]
 8000f44:	f423 4290 	bic.w	r2, r3, #18432	; 0x4800
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	695b      	ldr	r3, [r3, #20]
 8000f50:	f023 022a 	bic.w	r2, r3, #42	; 0x2a
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	615a      	str	r2, [r3, #20]
}
 8000f58:	bf00      	nop
 8000f5a:	370c      	adds	r7, #12
 8000f5c:	46bd      	mov	sp, r7
 8000f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f62:	4770      	bx	lr

08000f64 <LL_AHB1_GRP1_EnableClock>:
{
 8000f64:	b480      	push	{r7}
 8000f66:	b085      	sub	sp, #20
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8000f6c:	4b08      	ldr	r3, [pc, #32]	; (8000f90 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000f6e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000f70:	4907      	ldr	r1, [pc, #28]	; (8000f90 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	4313      	orrs	r3, r2
 8000f76:	630b      	str	r3, [r1, #48]	; 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8000f78:	4b05      	ldr	r3, [pc, #20]	; (8000f90 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000f7a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	4013      	ands	r3, r2
 8000f80:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000f82:	68fb      	ldr	r3, [r7, #12]
}
 8000f84:	bf00      	nop
 8000f86:	3714      	adds	r7, #20
 8000f88:	46bd      	mov	sp, r7
 8000f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f8e:	4770      	bx	lr
 8000f90:	40023800 	.word	0x40023800

08000f94 <LL_APB1_GRP1_EnableClock>:
{
 8000f94:	b480      	push	{r7}
 8000f96:	b085      	sub	sp, #20
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 8000f9c:	4b08      	ldr	r3, [pc, #32]	; (8000fc0 <LL_APB1_GRP1_EnableClock+0x2c>)
 8000f9e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000fa0:	4907      	ldr	r1, [pc, #28]	; (8000fc0 <LL_APB1_GRP1_EnableClock+0x2c>)
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	4313      	orrs	r3, r2
 8000fa6:	640b      	str	r3, [r1, #64]	; 0x40
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8000fa8:	4b05      	ldr	r3, [pc, #20]	; (8000fc0 <LL_APB1_GRP1_EnableClock+0x2c>)
 8000faa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	4013      	ands	r3, r2
 8000fb0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000fb2:	68fb      	ldr	r3, [r7, #12]
}
 8000fb4:	bf00      	nop
 8000fb6:	3714      	adds	r7, #20
 8000fb8:	46bd      	mov	sp, r7
 8000fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fbe:	4770      	bx	lr
 8000fc0:	40023800 	.word	0x40023800

08000fc4 <MX_USART3_UART_Init>:
/* USER CODE END 0 */

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b08e      	sub	sp, #56	; 0x38
 8000fc8:	af00      	add	r7, sp, #0
  LL_USART_InitTypeDef USART_InitStruct = {0};
 8000fca:	f107 031c 	add.w	r3, r7, #28
 8000fce:	2200      	movs	r2, #0
 8000fd0:	601a      	str	r2, [r3, #0]
 8000fd2:	605a      	str	r2, [r3, #4]
 8000fd4:	609a      	str	r2, [r3, #8]
 8000fd6:	60da      	str	r2, [r3, #12]
 8000fd8:	611a      	str	r2, [r3, #16]
 8000fda:	615a      	str	r2, [r3, #20]
 8000fdc:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fde:	1d3b      	adds	r3, r7, #4
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	601a      	str	r2, [r3, #0]
 8000fe4:	605a      	str	r2, [r3, #4]
 8000fe6:	609a      	str	r2, [r3, #8]
 8000fe8:	60da      	str	r2, [r3, #12]
 8000fea:	611a      	str	r2, [r3, #16]
 8000fec:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_USART3);
 8000fee:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8000ff2:	f7ff ffcf 	bl	8000f94 <LL_APB1_GRP1_EnableClock>
  
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOD);
 8000ff6:	2008      	movs	r0, #8
 8000ff8:	f7ff ffb4 	bl	8000f64 <LL_AHB1_GRP1_EnableClock>
  /**USART3 GPIO Configuration  
  PD8   ------> USART3_TX
  PD9   ------> USART3_RX 
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_8|LL_GPIO_PIN_9;
 8000ffc:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001000:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001002:	2302      	movs	r3, #2
 8001004:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8001006:	2303      	movs	r3, #3
 8001008:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800100a:	2300      	movs	r3, #0
 800100c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 800100e:	2301      	movs	r3, #1
 8001010:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 8001012:	2307      	movs	r3, #7
 8001014:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001016:	1d3b      	adds	r3, r7, #4
 8001018:	4619      	mov	r1, r3
 800101a:	4811      	ldr	r0, [pc, #68]	; (8001060 <MX_USART3_UART_Init+0x9c>)
 800101c:	f003 fc85 	bl	800492a <LL_GPIO_Init>

  USART_InitStruct.BaudRate = 115200;
 8001020:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8001024:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8001026:	2300      	movs	r3, #0
 8001028:	623b      	str	r3, [r7, #32]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 800102a:	2300      	movs	r3, #0
 800102c:	627b      	str	r3, [r7, #36]	; 0x24
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 800102e:	2300      	movs	r3, #0
 8001030:	62bb      	str	r3, [r7, #40]	; 0x28
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8001032:	230c      	movs	r3, #12
 8001034:	62fb      	str	r3, [r7, #44]	; 0x2c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8001036:	2300      	movs	r3, #0
 8001038:	633b      	str	r3, [r7, #48]	; 0x30
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 800103a:	2300      	movs	r3, #0
 800103c:	637b      	str	r3, [r7, #52]	; 0x34
  LL_USART_Init(USART3, &USART_InitStruct);
 800103e:	f107 031c 	add.w	r3, r7, #28
 8001042:	4619      	mov	r1, r3
 8001044:	4807      	ldr	r0, [pc, #28]	; (8001064 <MX_USART3_UART_Init+0xa0>)
 8001046:	f004 f853 	bl	80050f0 <LL_USART_Init>
  LL_USART_ConfigAsyncMode(USART3);
 800104a:	4806      	ldr	r0, [pc, #24]	; (8001064 <MX_USART3_UART_Init+0xa0>)
 800104c:	f7ff ff74 	bl	8000f38 <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART3);
 8001050:	4804      	ldr	r0, [pc, #16]	; (8001064 <MX_USART3_UART_Init+0xa0>)
 8001052:	f7ff ff61 	bl	8000f18 <LL_USART_Enable>

}
 8001056:	bf00      	nop
 8001058:	3738      	adds	r7, #56	; 0x38
 800105a:	46bd      	mov	sp, r7
 800105c:	bd80      	pop	{r7, pc}
 800105e:	bf00      	nop
 8001060:	40020c00 	.word	0x40020c00
 8001064:	40004800 	.word	0x40004800

08001068 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8001068:	f8df d034 	ldr.w	sp, [pc, #52]	; 80010a0 <LoopFillZerobss+0x14>
 
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800106c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800106e:	e003      	b.n	8001078 <LoopCopyDataInit>

08001070 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001070:	4b0c      	ldr	r3, [pc, #48]	; (80010a4 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001072:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001074:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001076:	3104      	adds	r1, #4

08001078 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001078:	480b      	ldr	r0, [pc, #44]	; (80010a8 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800107a:	4b0c      	ldr	r3, [pc, #48]	; (80010ac <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800107c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800107e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001080:	d3f6      	bcc.n	8001070 <CopyDataInit>
  ldr  r2, =_sbss
 8001082:	4a0b      	ldr	r2, [pc, #44]	; (80010b0 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001084:	e002      	b.n	800108c <LoopFillZerobss>

08001086 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001086:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001088:	f842 3b04 	str.w	r3, [r2], #4

0800108c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800108c:	4b09      	ldr	r3, [pc, #36]	; (80010b4 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800108e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001090:	d3f9      	bcc.n	8001086 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001092:	f7ff ff0b 	bl	8000eac <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001096:	f016 fd3b 	bl	8017b10 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800109a:	f7ff fd15 	bl	8000ac8 <main>
  bx  lr    
 800109e:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 80010a0:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 80010a4:	0801af54 	.word	0x0801af54
  ldr  r0, =_sdata
 80010a8:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80010ac:	200001ec 	.word	0x200001ec
  ldr  r2, =_sbss
 80010b0:	200001ec 	.word	0x200001ec
  ldr  r3, = _ebss
 80010b4:	2000cea0 	.word	0x2000cea0

080010b8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80010b8:	e7fe      	b.n	80010b8 <ADC_IRQHandler>
	...

080010bc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80010c0:	4b0e      	ldr	r3, [pc, #56]	; (80010fc <HAL_Init+0x40>)
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	4a0d      	ldr	r2, [pc, #52]	; (80010fc <HAL_Init+0x40>)
 80010c6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80010ca:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80010cc:	4b0b      	ldr	r3, [pc, #44]	; (80010fc <HAL_Init+0x40>)
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	4a0a      	ldr	r2, [pc, #40]	; (80010fc <HAL_Init+0x40>)
 80010d2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80010d6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80010d8:	4b08      	ldr	r3, [pc, #32]	; (80010fc <HAL_Init+0x40>)
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	4a07      	ldr	r2, [pc, #28]	; (80010fc <HAL_Init+0x40>)
 80010de:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80010e2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80010e4:	2003      	movs	r0, #3
 80010e6:	f000 f8fa 	bl	80012de <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80010ea:	2000      	movs	r0, #0
 80010ec:	f7ff fdb0 	bl	8000c50 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80010f0:	f7ff fd82 	bl	8000bf8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80010f4:	2300      	movs	r3, #0
}
 80010f6:	4618      	mov	r0, r3
 80010f8:	bd80      	pop	{r7, pc}
 80010fa:	bf00      	nop
 80010fc:	40023c00 	.word	0x40023c00

08001100 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001100:	b480      	push	{r7}
 8001102:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001104:	4b06      	ldr	r3, [pc, #24]	; (8001120 <HAL_IncTick+0x20>)
 8001106:	781b      	ldrb	r3, [r3, #0]
 8001108:	461a      	mov	r2, r3
 800110a:	4b06      	ldr	r3, [pc, #24]	; (8001124 <HAL_IncTick+0x24>)
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	4413      	add	r3, r2
 8001110:	4a04      	ldr	r2, [pc, #16]	; (8001124 <HAL_IncTick+0x24>)
 8001112:	6013      	str	r3, [r2, #0]
}
 8001114:	bf00      	nop
 8001116:	46bd      	mov	sp, r7
 8001118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111c:	4770      	bx	lr
 800111e:	bf00      	nop
 8001120:	20000004 	.word	0x20000004
 8001124:	20004d10 	.word	0x20004d10

08001128 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001128:	b480      	push	{r7}
 800112a:	af00      	add	r7, sp, #0
  return uwTick;
 800112c:	4b03      	ldr	r3, [pc, #12]	; (800113c <HAL_GetTick+0x14>)
 800112e:	681b      	ldr	r3, [r3, #0]
}
 8001130:	4618      	mov	r0, r3
 8001132:	46bd      	mov	sp, r7
 8001134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001138:	4770      	bx	lr
 800113a:	bf00      	nop
 800113c:	20004d10 	.word	0x20004d10

08001140 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001140:	b580      	push	{r7, lr}
 8001142:	b084      	sub	sp, #16
 8001144:	af00      	add	r7, sp, #0
 8001146:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001148:	f7ff ffee 	bl	8001128 <HAL_GetTick>
 800114c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001152:	68fb      	ldr	r3, [r7, #12]
 8001154:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001158:	d005      	beq.n	8001166 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800115a:	4b09      	ldr	r3, [pc, #36]	; (8001180 <HAL_Delay+0x40>)
 800115c:	781b      	ldrb	r3, [r3, #0]
 800115e:	461a      	mov	r2, r3
 8001160:	68fb      	ldr	r3, [r7, #12]
 8001162:	4413      	add	r3, r2
 8001164:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001166:	bf00      	nop
 8001168:	f7ff ffde 	bl	8001128 <HAL_GetTick>
 800116c:	4602      	mov	r2, r0
 800116e:	68bb      	ldr	r3, [r7, #8]
 8001170:	1ad3      	subs	r3, r2, r3
 8001172:	68fa      	ldr	r2, [r7, #12]
 8001174:	429a      	cmp	r2, r3
 8001176:	d8f7      	bhi.n	8001168 <HAL_Delay+0x28>
  {
  }
}
 8001178:	bf00      	nop
 800117a:	3710      	adds	r7, #16
 800117c:	46bd      	mov	sp, r7
 800117e:	bd80      	pop	{r7, pc}
 8001180:	20000004 	.word	0x20000004

08001184 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001184:	b480      	push	{r7}
 8001186:	b085      	sub	sp, #20
 8001188:	af00      	add	r7, sp, #0
 800118a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	f003 0307 	and.w	r3, r3, #7
 8001192:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001194:	4b0c      	ldr	r3, [pc, #48]	; (80011c8 <__NVIC_SetPriorityGrouping+0x44>)
 8001196:	68db      	ldr	r3, [r3, #12]
 8001198:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800119a:	68ba      	ldr	r2, [r7, #8]
 800119c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80011a0:	4013      	ands	r3, r2
 80011a2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80011a4:	68fb      	ldr	r3, [r7, #12]
 80011a6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80011a8:	68bb      	ldr	r3, [r7, #8]
 80011aa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80011ac:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80011b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80011b4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80011b6:	4a04      	ldr	r2, [pc, #16]	; (80011c8 <__NVIC_SetPriorityGrouping+0x44>)
 80011b8:	68bb      	ldr	r3, [r7, #8]
 80011ba:	60d3      	str	r3, [r2, #12]
}
 80011bc:	bf00      	nop
 80011be:	3714      	adds	r7, #20
 80011c0:	46bd      	mov	sp, r7
 80011c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c6:	4770      	bx	lr
 80011c8:	e000ed00 	.word	0xe000ed00

080011cc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80011cc:	b480      	push	{r7}
 80011ce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80011d0:	4b04      	ldr	r3, [pc, #16]	; (80011e4 <__NVIC_GetPriorityGrouping+0x18>)
 80011d2:	68db      	ldr	r3, [r3, #12]
 80011d4:	0a1b      	lsrs	r3, r3, #8
 80011d6:	f003 0307 	and.w	r3, r3, #7
}
 80011da:	4618      	mov	r0, r3
 80011dc:	46bd      	mov	sp, r7
 80011de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e2:	4770      	bx	lr
 80011e4:	e000ed00 	.word	0xe000ed00

080011e8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011e8:	b480      	push	{r7}
 80011ea:	b083      	sub	sp, #12
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	4603      	mov	r3, r0
 80011f0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	db0b      	blt.n	8001212 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80011fa:	79fb      	ldrb	r3, [r7, #7]
 80011fc:	f003 021f 	and.w	r2, r3, #31
 8001200:	4907      	ldr	r1, [pc, #28]	; (8001220 <__NVIC_EnableIRQ+0x38>)
 8001202:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001206:	095b      	lsrs	r3, r3, #5
 8001208:	2001      	movs	r0, #1
 800120a:	fa00 f202 	lsl.w	r2, r0, r2
 800120e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001212:	bf00      	nop
 8001214:	370c      	adds	r7, #12
 8001216:	46bd      	mov	sp, r7
 8001218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800121c:	4770      	bx	lr
 800121e:	bf00      	nop
 8001220:	e000e100 	.word	0xe000e100

08001224 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001224:	b480      	push	{r7}
 8001226:	b083      	sub	sp, #12
 8001228:	af00      	add	r7, sp, #0
 800122a:	4603      	mov	r3, r0
 800122c:	6039      	str	r1, [r7, #0]
 800122e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001230:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001234:	2b00      	cmp	r3, #0
 8001236:	db0a      	blt.n	800124e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001238:	683b      	ldr	r3, [r7, #0]
 800123a:	b2da      	uxtb	r2, r3
 800123c:	490c      	ldr	r1, [pc, #48]	; (8001270 <__NVIC_SetPriority+0x4c>)
 800123e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001242:	0112      	lsls	r2, r2, #4
 8001244:	b2d2      	uxtb	r2, r2
 8001246:	440b      	add	r3, r1
 8001248:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800124c:	e00a      	b.n	8001264 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800124e:	683b      	ldr	r3, [r7, #0]
 8001250:	b2da      	uxtb	r2, r3
 8001252:	4908      	ldr	r1, [pc, #32]	; (8001274 <__NVIC_SetPriority+0x50>)
 8001254:	79fb      	ldrb	r3, [r7, #7]
 8001256:	f003 030f 	and.w	r3, r3, #15
 800125a:	3b04      	subs	r3, #4
 800125c:	0112      	lsls	r2, r2, #4
 800125e:	b2d2      	uxtb	r2, r2
 8001260:	440b      	add	r3, r1
 8001262:	761a      	strb	r2, [r3, #24]
}
 8001264:	bf00      	nop
 8001266:	370c      	adds	r7, #12
 8001268:	46bd      	mov	sp, r7
 800126a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800126e:	4770      	bx	lr
 8001270:	e000e100 	.word	0xe000e100
 8001274:	e000ed00 	.word	0xe000ed00

08001278 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001278:	b480      	push	{r7}
 800127a:	b089      	sub	sp, #36	; 0x24
 800127c:	af00      	add	r7, sp, #0
 800127e:	60f8      	str	r0, [r7, #12]
 8001280:	60b9      	str	r1, [r7, #8]
 8001282:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001284:	68fb      	ldr	r3, [r7, #12]
 8001286:	f003 0307 	and.w	r3, r3, #7
 800128a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800128c:	69fb      	ldr	r3, [r7, #28]
 800128e:	f1c3 0307 	rsb	r3, r3, #7
 8001292:	2b04      	cmp	r3, #4
 8001294:	bf28      	it	cs
 8001296:	2304      	movcs	r3, #4
 8001298:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800129a:	69fb      	ldr	r3, [r7, #28]
 800129c:	3304      	adds	r3, #4
 800129e:	2b06      	cmp	r3, #6
 80012a0:	d902      	bls.n	80012a8 <NVIC_EncodePriority+0x30>
 80012a2:	69fb      	ldr	r3, [r7, #28]
 80012a4:	3b03      	subs	r3, #3
 80012a6:	e000      	b.n	80012aa <NVIC_EncodePriority+0x32>
 80012a8:	2300      	movs	r3, #0
 80012aa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012ac:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80012b0:	69bb      	ldr	r3, [r7, #24]
 80012b2:	fa02 f303 	lsl.w	r3, r2, r3
 80012b6:	43da      	mvns	r2, r3
 80012b8:	68bb      	ldr	r3, [r7, #8]
 80012ba:	401a      	ands	r2, r3
 80012bc:	697b      	ldr	r3, [r7, #20]
 80012be:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80012c0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80012c4:	697b      	ldr	r3, [r7, #20]
 80012c6:	fa01 f303 	lsl.w	r3, r1, r3
 80012ca:	43d9      	mvns	r1, r3
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012d0:	4313      	orrs	r3, r2
         );
}
 80012d2:	4618      	mov	r0, r3
 80012d4:	3724      	adds	r7, #36	; 0x24
 80012d6:	46bd      	mov	sp, r7
 80012d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012dc:	4770      	bx	lr

080012de <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012de:	b580      	push	{r7, lr}
 80012e0:	b082      	sub	sp, #8
 80012e2:	af00      	add	r7, sp, #0
 80012e4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80012e6:	6878      	ldr	r0, [r7, #4]
 80012e8:	f7ff ff4c 	bl	8001184 <__NVIC_SetPriorityGrouping>
}
 80012ec:	bf00      	nop
 80012ee:	3708      	adds	r7, #8
 80012f0:	46bd      	mov	sp, r7
 80012f2:	bd80      	pop	{r7, pc}

080012f4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80012f4:	b580      	push	{r7, lr}
 80012f6:	b086      	sub	sp, #24
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	4603      	mov	r3, r0
 80012fc:	60b9      	str	r1, [r7, #8]
 80012fe:	607a      	str	r2, [r7, #4]
 8001300:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001302:	2300      	movs	r3, #0
 8001304:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001306:	f7ff ff61 	bl	80011cc <__NVIC_GetPriorityGrouping>
 800130a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800130c:	687a      	ldr	r2, [r7, #4]
 800130e:	68b9      	ldr	r1, [r7, #8]
 8001310:	6978      	ldr	r0, [r7, #20]
 8001312:	f7ff ffb1 	bl	8001278 <NVIC_EncodePriority>
 8001316:	4602      	mov	r2, r0
 8001318:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800131c:	4611      	mov	r1, r2
 800131e:	4618      	mov	r0, r3
 8001320:	f7ff ff80 	bl	8001224 <__NVIC_SetPriority>
}
 8001324:	bf00      	nop
 8001326:	3718      	adds	r7, #24
 8001328:	46bd      	mov	sp, r7
 800132a:	bd80      	pop	{r7, pc}

0800132c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800132c:	b580      	push	{r7, lr}
 800132e:	b082      	sub	sp, #8
 8001330:	af00      	add	r7, sp, #0
 8001332:	4603      	mov	r3, r0
 8001334:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001336:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800133a:	4618      	mov	r0, r3
 800133c:	f7ff ff54 	bl	80011e8 <__NVIC_EnableIRQ>
}
 8001340:	bf00      	nop
 8001342:	3708      	adds	r7, #8
 8001344:	46bd      	mov	sp, r7
 8001346:	bd80      	pop	{r7, pc}

08001348 <HAL_ETH_Init>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8001348:	b580      	push	{r7, lr}
 800134a:	b088      	sub	sp, #32
 800134c:	af00      	add	r7, sp, #0
 800134e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1 = 0U, phyreg = 0U;
 8001350:	2300      	movs	r3, #0
 8001352:	61fb      	str	r3, [r7, #28]
 8001354:	2300      	movs	r3, #0
 8001356:	60fb      	str	r3, [r7, #12]
  uint32_t hclk = 60000000U;
 8001358:	4baa      	ldr	r3, [pc, #680]	; (8001604 <HAL_ETH_Init+0x2bc>)
 800135a:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart = 0U;
 800135c:	2300      	movs	r3, #0
 800135e:	617b      	str	r3, [r7, #20]
  uint32_t err = ETH_SUCCESS;
 8001360:	2300      	movs	r3, #0
 8001362:	613b      	str	r3, [r7, #16]
  
  /* Check the ETH peripheral state */
  if(heth == NULL)
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	2b00      	cmp	r3, #0
 8001368:	d101      	bne.n	800136e <HAL_ETH_Init+0x26>
  {
    return HAL_ERROR;
 800136a:	2301      	movs	r3, #1
 800136c:	e185      	b.n	800167a <HAL_ETH_Init+0x332>
  assert_param(IS_ETH_AUTONEGOTIATION(heth->Init.AutoNegotiation));
  assert_param(IS_ETH_RX_MODE(heth->Init.RxMode));
  assert_param(IS_ETH_CHECKSUM_MODE(heth->Init.ChecksumMode));
  assert_param(IS_ETH_MEDIA_INTERFACE(heth->Init.MediaInterface));  
  
  if(heth->State == HAL_ETH_STATE_RESET)
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001374:	b2db      	uxtb	r3, r3
 8001376:	2b00      	cmp	r3, #0
 8001378:	d106      	bne.n	8001388 <HAL_ETH_Init+0x40>
  {
    /* Allocate lock resource and initialize it */
    heth->Lock = HAL_UNLOCKED;
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	2200      	movs	r2, #0
 800137e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    heth->MspInitCallback(heth);

#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8001382:	6878      	ldr	r0, [r7, #4]
 8001384:	f005 fa64 	bl	8006850 <HAL_ETH_MspInit>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
  
  /* Enable SYSCFG Clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001388:	2300      	movs	r3, #0
 800138a:	60bb      	str	r3, [r7, #8]
 800138c:	4b9e      	ldr	r3, [pc, #632]	; (8001608 <HAL_ETH_Init+0x2c0>)
 800138e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001390:	4a9d      	ldr	r2, [pc, #628]	; (8001608 <HAL_ETH_Init+0x2c0>)
 8001392:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001396:	6453      	str	r3, [r2, #68]	; 0x44
 8001398:	4b9b      	ldr	r3, [pc, #620]	; (8001608 <HAL_ETH_Init+0x2c0>)
 800139a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800139c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80013a0:	60bb      	str	r3, [r7, #8]
 80013a2:	68bb      	ldr	r3, [r7, #8]
  
  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 80013a4:	4b99      	ldr	r3, [pc, #612]	; (800160c <HAL_ETH_Init+0x2c4>)
 80013a6:	685b      	ldr	r3, [r3, #4]
 80013a8:	4a98      	ldr	r2, [pc, #608]	; (800160c <HAL_ETH_Init+0x2c4>)
 80013aa:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80013ae:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 80013b0:	4b96      	ldr	r3, [pc, #600]	; (800160c <HAL_ETH_Init+0x2c4>)
 80013b2:	685a      	ldr	r2, [r3, #4]
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	6a1b      	ldr	r3, [r3, #32]
 80013b8:	4994      	ldr	r1, [pc, #592]	; (800160c <HAL_ETH_Init+0x2c4>)
 80013ba:	4313      	orrs	r3, r2
 80013bc:	604b      	str	r3, [r1, #4]
  
  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80013c6:	681a      	ldr	r2, [r3, #0]
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	f042 0201 	orr.w	r2, r2, #1
 80013d0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80013d4:	601a      	str	r2, [r3, #0]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 80013d6:	f7ff fea7 	bl	8001128 <HAL_GetTick>
 80013da:	6178      	str	r0, [r7, #20]
  
  /* Wait for software reset */
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 80013dc:	e011      	b.n	8001402 <HAL_ETH_Init+0xba>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_SWRESET)
 80013de:	f7ff fea3 	bl	8001128 <HAL_GetTick>
 80013e2:	4602      	mov	r2, r0
 80013e4:	697b      	ldr	r3, [r7, #20]
 80013e6:	1ad3      	subs	r3, r2, r3
 80013e8:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80013ec:	d909      	bls.n	8001402 <HAL_ETH_Init+0xba>
    {     
      heth->State= HAL_ETH_STATE_TIMEOUT;
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	2203      	movs	r2, #3
 80013f2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	2200      	movs	r2, #0
 80013fa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      /* Note: The SWR is not performed if the ETH_RX_CLK or the ETH_TX_CLK are  
         not available, please check your external PHY or the IO configuration */
      return HAL_TIMEOUT;
 80013fe:	2303      	movs	r3, #3
 8001400:	e13b      	b.n	800167a <HAL_ETH_Init+0x332>
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	f003 0301 	and.w	r3, r3, #1
 8001410:	2b00      	cmp	r3, #0
 8001412:	d1e4      	bne.n	80013de <HAL_ETH_Init+0x96>
    }
  }
  
  /*-------------------------------- MAC Initialization ----------------------*/
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = (heth->Instance)->MACMIIAR;
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	691b      	ldr	r3, [r3, #16]
 800141a:	61fb      	str	r3, [r7, #28]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg1 &= ETH_MACMIIAR_CR_MASK;
 800141c:	69fb      	ldr	r3, [r7, #28]
 800141e:	f023 031c 	bic.w	r3, r3, #28
 8001422:	61fb      	str	r3, [r7, #28]
  
  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8001424:	f002 feec 	bl	8004200 <HAL_RCC_GetHCLKFreq>
 8001428:	61b8      	str	r0, [r7, #24]
  
  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 800142a:	69bb      	ldr	r3, [r7, #24]
 800142c:	4a78      	ldr	r2, [pc, #480]	; (8001610 <HAL_ETH_Init+0x2c8>)
 800142e:	4293      	cmp	r3, r2
 8001430:	d908      	bls.n	8001444 <HAL_ETH_Init+0xfc>
 8001432:	69bb      	ldr	r3, [r7, #24]
 8001434:	4a77      	ldr	r2, [pc, #476]	; (8001614 <HAL_ETH_Init+0x2cc>)
 8001436:	4293      	cmp	r3, r2
 8001438:	d804      	bhi.n	8001444 <HAL_ETH_Init+0xfc>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 800143a:	69fb      	ldr	r3, [r7, #28]
 800143c:	f043 0308 	orr.w	r3, r3, #8
 8001440:	61fb      	str	r3, [r7, #28]
 8001442:	e027      	b.n	8001494 <HAL_ETH_Init+0x14c>
  }
  else if((hclk >= 35000000U)&&(hclk < 60000000U))
 8001444:	69bb      	ldr	r3, [r7, #24]
 8001446:	4a73      	ldr	r2, [pc, #460]	; (8001614 <HAL_ETH_Init+0x2cc>)
 8001448:	4293      	cmp	r3, r2
 800144a:	d908      	bls.n	800145e <HAL_ETH_Init+0x116>
 800144c:	69bb      	ldr	r3, [r7, #24]
 800144e:	4a72      	ldr	r2, [pc, #456]	; (8001618 <HAL_ETH_Init+0x2d0>)
 8001450:	4293      	cmp	r3, r2
 8001452:	d804      	bhi.n	800145e <HAL_ETH_Init+0x116>
  {
    /* CSR Clock Range between 35-60 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 8001454:	69fb      	ldr	r3, [r7, #28]
 8001456:	f043 030c 	orr.w	r3, r3, #12
 800145a:	61fb      	str	r3, [r7, #28]
 800145c:	e01a      	b.n	8001494 <HAL_ETH_Init+0x14c>
  }  
  else if((hclk >= 60000000U)&&(hclk < 100000000U))
 800145e:	69bb      	ldr	r3, [r7, #24]
 8001460:	4a6d      	ldr	r2, [pc, #436]	; (8001618 <HAL_ETH_Init+0x2d0>)
 8001462:	4293      	cmp	r3, r2
 8001464:	d903      	bls.n	800146e <HAL_ETH_Init+0x126>
 8001466:	69bb      	ldr	r3, [r7, #24]
 8001468:	4a6c      	ldr	r2, [pc, #432]	; (800161c <HAL_ETH_Init+0x2d4>)
 800146a:	4293      	cmp	r3, r2
 800146c:	d911      	bls.n	8001492 <HAL_ETH_Init+0x14a>
  {
    /* CSR Clock Range between 60-100 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }  
  else if((hclk >= 100000000U)&&(hclk < 150000000U))
 800146e:	69bb      	ldr	r3, [r7, #24]
 8001470:	4a6a      	ldr	r2, [pc, #424]	; (800161c <HAL_ETH_Init+0x2d4>)
 8001472:	4293      	cmp	r3, r2
 8001474:	d908      	bls.n	8001488 <HAL_ETH_Init+0x140>
 8001476:	69bb      	ldr	r3, [r7, #24]
 8001478:	4a69      	ldr	r2, [pc, #420]	; (8001620 <HAL_ETH_Init+0x2d8>)
 800147a:	4293      	cmp	r3, r2
 800147c:	d804      	bhi.n	8001488 <HAL_ETH_Init+0x140>
  {
    /* CSR Clock Range between 100-150 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 800147e:	69fb      	ldr	r3, [r7, #28]
 8001480:	f043 0304 	orr.w	r3, r3, #4
 8001484:	61fb      	str	r3, [r7, #28]
 8001486:	e005      	b.n	8001494 <HAL_ETH_Init+0x14c>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 183000000)) */
  {
    /* CSR Clock Range between 150-183 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div102;    
 8001488:	69fb      	ldr	r3, [r7, #28]
 800148a:	f043 0310 	orr.w	r3, r3, #16
 800148e:	61fb      	str	r3, [r7, #28]
 8001490:	e000      	b.n	8001494 <HAL_ETH_Init+0x14c>
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 8001492:	bf00      	nop
  }
  
  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg1;
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	69fa      	ldr	r2, [r7, #28]
 800149a:	611a      	str	r2, [r3, #16]
  
  /*-------------------- PHY initialization and configuration ----------------*/
  /* Put the PHY in reset mode */
  if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 800149c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80014a0:	2100      	movs	r1, #0
 80014a2:	6878      	ldr	r0, [r7, #4]
 80014a4:	f000 fc19 	bl	8001cda <HAL_ETH_WritePHYRegister>
 80014a8:	4603      	mov	r3, r0
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d00b      	beq.n	80014c6 <HAL_ETH_Init+0x17e>
  {
    /* In case of write timeout */
    err = ETH_ERROR;
 80014ae:	2301      	movs	r3, #1
 80014b0:	613b      	str	r3, [r7, #16]
    
    /* Config MAC and DMA */
    ETH_MACDMAConfig(heth, err);
 80014b2:	6939      	ldr	r1, [r7, #16]
 80014b4:	6878      	ldr	r0, [r7, #4]
 80014b6:	f000 fca5 	bl	8001e04 <ETH_MACDMAConfig>
    
    /* Set the ETH peripheral state to READY */
    heth->State = HAL_ETH_STATE_READY;
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	2201      	movs	r2, #1
 80014be:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Return HAL_ERROR */
    return HAL_ERROR;
 80014c2:	2301      	movs	r3, #1
 80014c4:	e0d9      	b.n	800167a <HAL_ETH_Init+0x332>
  }
  
  /* Delay to assure PHY reset */
  HAL_Delay(PHY_RESET_DELAY);
 80014c6:	20ff      	movs	r0, #255	; 0xff
 80014c8:	f7ff fe3a 	bl	8001140 <HAL_Delay>
  
  if((heth->Init).AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	685b      	ldr	r3, [r3, #4]
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	f000 80a7 	beq.w	8001624 <HAL_ETH_Init+0x2dc>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 80014d6:	f7ff fe27 	bl	8001128 <HAL_GetTick>
 80014da:	6178      	str	r0, [r7, #20]
    
    /* We wait for linked status */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 80014dc:	f107 030c 	add.w	r3, r7, #12
 80014e0:	461a      	mov	r2, r3
 80014e2:	2101      	movs	r1, #1
 80014e4:	6878      	ldr	r0, [r7, #4]
 80014e6:	f000 fb90 	bl	8001c0a <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
 80014ea:	f7ff fe1d 	bl	8001128 <HAL_GetTick>
 80014ee:	4602      	mov	r2, r0
 80014f0:	697b      	ldr	r3, [r7, #20]
 80014f2:	1ad3      	subs	r3, r2, r3
 80014f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80014f8:	4293      	cmp	r3, r2
 80014fa:	d90f      	bls.n	800151c <HAL_ETH_Init+0x1d4>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 80014fc:	2301      	movs	r3, #1
 80014fe:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 8001500:	6939      	ldr	r1, [r7, #16]
 8001502:	6878      	ldr	r0, [r7, #4]
 8001504:	f000 fc7e 	bl	8001e04 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	2201      	movs	r2, #1
 800150c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	2200      	movs	r2, #0
 8001514:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 8001518:	2303      	movs	r3, #3
 800151a:	e0ae      	b.n	800167a <HAL_ETH_Init+0x332>
      }
    } while (((phyreg & PHY_LINKED_STATUS) != PHY_LINKED_STATUS));
 800151c:	68fb      	ldr	r3, [r7, #12]
 800151e:	f003 0304 	and.w	r3, r3, #4
 8001522:	2b00      	cmp	r3, #0
 8001524:	d0da      	beq.n	80014dc <HAL_ETH_Init+0x194>

    
    /* Enable Auto-Negotiation */
    if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_AUTONEGOTIATION)) != HAL_OK)
 8001526:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800152a:	2100      	movs	r1, #0
 800152c:	6878      	ldr	r0, [r7, #4]
 800152e:	f000 fbd4 	bl	8001cda <HAL_ETH_WritePHYRegister>
 8001532:	4603      	mov	r3, r0
 8001534:	2b00      	cmp	r3, #0
 8001536:	d00b      	beq.n	8001550 <HAL_ETH_Init+0x208>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8001538:	2301      	movs	r3, #1
 800153a:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 800153c:	6939      	ldr	r1, [r7, #16]
 800153e:	6878      	ldr	r0, [r7, #4]
 8001540:	f000 fc60 	bl	8001e04 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	2201      	movs	r2, #1
 8001548:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 800154c:	2301      	movs	r3, #1
 800154e:	e094      	b.n	800167a <HAL_ETH_Init+0x332>
    }
    
    /* Get tick */
    tickstart = HAL_GetTick();
 8001550:	f7ff fdea 	bl	8001128 <HAL_GetTick>
 8001554:	6178      	str	r0, [r7, #20]
    
    /* Wait until the auto-negotiation will be completed */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8001556:	f107 030c 	add.w	r3, r7, #12
 800155a:	461a      	mov	r2, r3
 800155c:	2101      	movs	r1, #1
 800155e:	6878      	ldr	r0, [r7, #4]
 8001560:	f000 fb53 	bl	8001c0a <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 8001564:	f7ff fde0 	bl	8001128 <HAL_GetTick>
 8001568:	4602      	mov	r2, r0
 800156a:	697b      	ldr	r3, [r7, #20]
 800156c:	1ad3      	subs	r3, r2, r3
 800156e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001572:	4293      	cmp	r3, r2
 8001574:	d90f      	bls.n	8001596 <HAL_ETH_Init+0x24e>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 8001576:	2301      	movs	r3, #1
 8001578:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 800157a:	6939      	ldr	r1, [r7, #16]
 800157c:	6878      	ldr	r0, [r7, #4]
 800157e:	f000 fc41 	bl	8001e04 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	2201      	movs	r2, #1
 8001586:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	2200      	movs	r2, #0
 800158e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 8001592:	2303      	movs	r3, #3
 8001594:	e071      	b.n	800167a <HAL_ETH_Init+0x332>
      }
      
    } while (((phyreg & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 8001596:	68fb      	ldr	r3, [r7, #12]
 8001598:	f003 0320 	and.w	r3, r3, #32
 800159c:	2b00      	cmp	r3, #0
 800159e:	d0da      	beq.n	8001556 <HAL_ETH_Init+0x20e>
    
    /* Read the result of the auto-negotiation */
    if((HAL_ETH_ReadPHYRegister(heth, PHY_SR, &phyreg)) != HAL_OK)
 80015a0:	f107 030c 	add.w	r3, r7, #12
 80015a4:	461a      	mov	r2, r3
 80015a6:	211f      	movs	r1, #31
 80015a8:	6878      	ldr	r0, [r7, #4]
 80015aa:	f000 fb2e 	bl	8001c0a <HAL_ETH_ReadPHYRegister>
 80015ae:	4603      	mov	r3, r0
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d00b      	beq.n	80015cc <HAL_ETH_Init+0x284>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 80015b4:	2301      	movs	r3, #1
 80015b6:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 80015b8:	6939      	ldr	r1, [r7, #16]
 80015ba:	6878      	ldr	r0, [r7, #4]
 80015bc:	f000 fc22 	bl	8001e04 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	2201      	movs	r2, #1
 80015c4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 80015c8:	2301      	movs	r3, #1
 80015ca:	e056      	b.n	800167a <HAL_ETH_Init+0x332>
    }
    
    /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
    if((phyreg & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 80015cc:	68fb      	ldr	r3, [r7, #12]
 80015ce:	f003 0310 	and.w	r3, r3, #16
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d004      	beq.n	80015e0 <HAL_ETH_Init+0x298>
    {
      /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;  
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80015dc:	60da      	str	r2, [r3, #12]
 80015de:	e002      	b.n	80015e6 <HAL_ETH_Init+0x29e>
    }
    else
    {
      /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_HALFDUPLEX;           
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	2200      	movs	r2, #0
 80015e4:	60da      	str	r2, [r3, #12]
    }
    /* Configure the MAC with the speed fixed by the auto-negotiation process */
    if((phyreg & PHY_SPEED_STATUS) == PHY_SPEED_STATUS)
 80015e6:	68fb      	ldr	r3, [r7, #12]
 80015e8:	f003 0304 	and.w	r3, r3, #4
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d003      	beq.n	80015f8 <HAL_ETH_Init+0x2b0>
    {  
      /* Set Ethernet speed to 10M following the auto-negotiation */
      (heth->Init).Speed = ETH_SPEED_10M; 
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	2200      	movs	r2, #0
 80015f4:	609a      	str	r2, [r3, #8]
 80015f6:	e037      	b.n	8001668 <HAL_ETH_Init+0x320>
    }
    else
    {   
      /* Set Ethernet speed to 100M following the auto-negotiation */ 
      (heth->Init).Speed = ETH_SPEED_100M;
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80015fe:	609a      	str	r2, [r3, #8]
 8001600:	e032      	b.n	8001668 <HAL_ETH_Init+0x320>
 8001602:	bf00      	nop
 8001604:	03938700 	.word	0x03938700
 8001608:	40023800 	.word	0x40023800
 800160c:	40013800 	.word	0x40013800
 8001610:	01312cff 	.word	0x01312cff
 8001614:	02160ebf 	.word	0x02160ebf
 8001618:	039386ff 	.word	0x039386ff
 800161c:	05f5e0ff 	.word	0x05f5e0ff
 8001620:	08f0d17f 	.word	0x08f0d17f
    /* Check parameters */
    assert_param(IS_ETH_SPEED(heth->Init.Speed));
    assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode));
    
    /* Set MAC Speed and Duplex Mode */
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3U) |
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	68db      	ldr	r3, [r3, #12]
 8001628:	08db      	lsrs	r3, r3, #3
 800162a:	b29a      	uxth	r2, r3
                                                (uint16_t)((heth->Init).Speed >> 1U))) != HAL_OK)
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	689b      	ldr	r3, [r3, #8]
 8001630:	085b      	lsrs	r3, r3, #1
 8001632:	b29b      	uxth	r3, r3
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3U) |
 8001634:	4313      	orrs	r3, r2
 8001636:	b29b      	uxth	r3, r3
 8001638:	461a      	mov	r2, r3
 800163a:	2100      	movs	r1, #0
 800163c:	6878      	ldr	r0, [r7, #4]
 800163e:	f000 fb4c 	bl	8001cda <HAL_ETH_WritePHYRegister>
 8001642:	4603      	mov	r3, r0
 8001644:	2b00      	cmp	r3, #0
 8001646:	d00b      	beq.n	8001660 <HAL_ETH_Init+0x318>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8001648:	2301      	movs	r3, #1
 800164a:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 800164c:	6939      	ldr	r1, [r7, #16]
 800164e:	6878      	ldr	r0, [r7, #4]
 8001650:	f000 fbd8 	bl	8001e04 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	2201      	movs	r2, #1
 8001658:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;
 800165c:	2301      	movs	r3, #1
 800165e:	e00c      	b.n	800167a <HAL_ETH_Init+0x332>
    }  
    
    /* Delay to assure PHY configuration */
    HAL_Delay(PHY_CONFIG_DELAY);
 8001660:	f640 70ff 	movw	r0, #4095	; 0xfff
 8001664:	f7ff fd6c 	bl	8001140 <HAL_Delay>
  }
  
  /* Config MAC and DMA */
  ETH_MACDMAConfig(heth, err);
 8001668:	6939      	ldr	r1, [r7, #16]
 800166a:	6878      	ldr	r0, [r7, #4]
 800166c:	f000 fbca 	bl	8001e04 <ETH_MACDMAConfig>
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	2201      	movs	r2, #1
 8001674:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 8001678:	2300      	movs	r3, #0
}
 800167a:	4618      	mov	r0, r3
 800167c:	3720      	adds	r7, #32
 800167e:	46bd      	mov	sp, r7
 8001680:	bd80      	pop	{r7, pc}
 8001682:	bf00      	nop

08001684 <HAL_ETH_DMATxDescListInit>:
  * @param  TxBuff Pointer to the first TxBuffer list
  * @param  TxBuffCount Number of the used Tx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMATxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMATxDescTab, uint8_t *TxBuff, uint32_t TxBuffCount)
{
 8001684:	b480      	push	{r7}
 8001686:	b087      	sub	sp, #28
 8001688:	af00      	add	r7, sp, #0
 800168a:	60f8      	str	r0, [r7, #12]
 800168c:	60b9      	str	r1, [r7, #8]
 800168e:	607a      	str	r2, [r7, #4]
 8001690:	603b      	str	r3, [r7, #0]
  uint32_t i = 0U;
 8001692:	2300      	movs	r3, #0
 8001694:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *dmatxdesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8001696:	68fb      	ldr	r3, [r7, #12]
 8001698:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800169c:	2b01      	cmp	r3, #1
 800169e:	d101      	bne.n	80016a4 <HAL_ETH_DMATxDescListInit+0x20>
 80016a0:	2302      	movs	r3, #2
 80016a2:	e052      	b.n	800174a <HAL_ETH_DMATxDescListInit+0xc6>
 80016a4:	68fb      	ldr	r3, [r7, #12]
 80016a6:	2201      	movs	r2, #1
 80016a8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 80016ac:	68fb      	ldr	r3, [r7, #12]
 80016ae:	2202      	movs	r2, #2
 80016b0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the DMATxDescToSet pointer with the first one of the DMATxDescTab list */
  heth->TxDesc = DMATxDescTab;
 80016b4:	68fb      	ldr	r3, [r7, #12]
 80016b6:	68ba      	ldr	r2, [r7, #8]
 80016b8:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Fill each DMATxDesc descriptor with the right values */   
  for(i=0U; i < TxBuffCount; i++)
 80016ba:	2300      	movs	r3, #0
 80016bc:	617b      	str	r3, [r7, #20]
 80016be:	e030      	b.n	8001722 <HAL_ETH_DMATxDescListInit+0x9e>
  {
    /* Get the pointer on the ith member of the Tx Desc list */
    dmatxdesc = DMATxDescTab + i;
 80016c0:	697b      	ldr	r3, [r7, #20]
 80016c2:	015b      	lsls	r3, r3, #5
 80016c4:	68ba      	ldr	r2, [r7, #8]
 80016c6:	4413      	add	r3, r2
 80016c8:	613b      	str	r3, [r7, #16]
    
    /* Set Second Address Chained bit */
    dmatxdesc->Status = ETH_DMATXDESC_TCH;  
 80016ca:	693b      	ldr	r3, [r7, #16]
 80016cc:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80016d0:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 address pointer */
    dmatxdesc->Buffer1Addr = (uint32_t)(&TxBuff[i*ETH_TX_BUF_SIZE]);
 80016d2:	697b      	ldr	r3, [r7, #20]
 80016d4:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80016d8:	fb02 f303 	mul.w	r3, r2, r3
 80016dc:	687a      	ldr	r2, [r7, #4]
 80016de:	4413      	add	r3, r2
 80016e0:	461a      	mov	r2, r3
 80016e2:	693b      	ldr	r3, [r7, #16]
 80016e4:	609a      	str	r2, [r3, #8]
    
    if ((heth->Init).ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 80016e6:	68fb      	ldr	r3, [r7, #12]
 80016e8:	69db      	ldr	r3, [r3, #28]
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d105      	bne.n	80016fa <HAL_ETH_DMATxDescListInit+0x76>
    {
      /* Set the DMA Tx descriptors checksum insertion */
      dmatxdesc->Status |= ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL;
 80016ee:	693b      	ldr	r3, [r7, #16]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 80016f6:	693b      	ldr	r3, [r7, #16]
 80016f8:	601a      	str	r2, [r3, #0]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (TxBuffCount-1U))
 80016fa:	683b      	ldr	r3, [r7, #0]
 80016fc:	3b01      	subs	r3, #1
 80016fe:	697a      	ldr	r2, [r7, #20]
 8001700:	429a      	cmp	r2, r3
 8001702:	d208      	bcs.n	8001716 <HAL_ETH_DMATxDescListInit+0x92>
    {
      /* Set next descriptor address register with next descriptor base address */
      dmatxdesc->Buffer2NextDescAddr = (uint32_t)(DMATxDescTab+i+1U);
 8001704:	697b      	ldr	r3, [r7, #20]
 8001706:	3301      	adds	r3, #1
 8001708:	015b      	lsls	r3, r3, #5
 800170a:	68ba      	ldr	r2, [r7, #8]
 800170c:	4413      	add	r3, r2
 800170e:	461a      	mov	r2, r3
 8001710:	693b      	ldr	r3, [r7, #16]
 8001712:	60da      	str	r2, [r3, #12]
 8001714:	e002      	b.n	800171c <HAL_ETH_DMATxDescListInit+0x98>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      dmatxdesc->Buffer2NextDescAddr = (uint32_t) DMATxDescTab;  
 8001716:	68ba      	ldr	r2, [r7, #8]
 8001718:	693b      	ldr	r3, [r7, #16]
 800171a:	60da      	str	r2, [r3, #12]
  for(i=0U; i < TxBuffCount; i++)
 800171c:	697b      	ldr	r3, [r7, #20]
 800171e:	3301      	adds	r3, #1
 8001720:	617b      	str	r3, [r7, #20]
 8001722:	697a      	ldr	r2, [r7, #20]
 8001724:	683b      	ldr	r3, [r7, #0]
 8001726:	429a      	cmp	r2, r3
 8001728:	d3ca      	bcc.n	80016c0 <HAL_ETH_DMATxDescListInit+0x3c>
    }
  }
  
  /* Set Transmit Descriptor List Address Register */
  (heth->Instance)->DMATDLAR = (uint32_t) DMATxDescTab;
 800172a:	68fb      	ldr	r3, [r7, #12]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	68ba      	ldr	r2, [r7, #8]
 8001730:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001734:	3310      	adds	r3, #16
 8001736:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8001738:	68fb      	ldr	r3, [r7, #12]
 800173a:	2201      	movs	r2, #1
 800173c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001740:	68fb      	ldr	r3, [r7, #12]
 8001742:	2200      	movs	r2, #0
 8001744:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8001748:	2300      	movs	r3, #0
}
 800174a:	4618      	mov	r0, r3
 800174c:	371c      	adds	r7, #28
 800174e:	46bd      	mov	sp, r7
 8001750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001754:	4770      	bx	lr

08001756 <HAL_ETH_DMARxDescListInit>:
  * @param  RxBuff Pointer to the first RxBuffer list
  * @param  RxBuffCount Number of the used Rx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMARxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMARxDescTab, uint8_t *RxBuff, uint32_t RxBuffCount)
{
 8001756:	b480      	push	{r7}
 8001758:	b087      	sub	sp, #28
 800175a:	af00      	add	r7, sp, #0
 800175c:	60f8      	str	r0, [r7, #12]
 800175e:	60b9      	str	r1, [r7, #8]
 8001760:	607a      	str	r2, [r7, #4]
 8001762:	603b      	str	r3, [r7, #0]
  uint32_t i = 0U;
 8001764:	2300      	movs	r3, #0
 8001766:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *DMARxDesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8001768:	68fb      	ldr	r3, [r7, #12]
 800176a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800176e:	2b01      	cmp	r3, #1
 8001770:	d101      	bne.n	8001776 <HAL_ETH_DMARxDescListInit+0x20>
 8001772:	2302      	movs	r3, #2
 8001774:	e056      	b.n	8001824 <HAL_ETH_DMARxDescListInit+0xce>
 8001776:	68fb      	ldr	r3, [r7, #12]
 8001778:	2201      	movs	r2, #1
 800177a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 800177e:	68fb      	ldr	r3, [r7, #12]
 8001780:	2202      	movs	r2, #2
 8001782:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the Ethernet RxDesc pointer with the first one of the DMARxDescTab list */
  heth->RxDesc = DMARxDescTab; 
 8001786:	68fb      	ldr	r3, [r7, #12]
 8001788:	68ba      	ldr	r2, [r7, #8]
 800178a:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Fill each DMARxDesc descriptor with the right values */
  for(i=0U; i < RxBuffCount; i++)
 800178c:	2300      	movs	r3, #0
 800178e:	617b      	str	r3, [r7, #20]
 8001790:	e034      	b.n	80017fc <HAL_ETH_DMARxDescListInit+0xa6>
  {
    /* Get the pointer on the ith member of the Rx Desc list */
    DMARxDesc = DMARxDescTab+i;
 8001792:	697b      	ldr	r3, [r7, #20]
 8001794:	015b      	lsls	r3, r3, #5
 8001796:	68ba      	ldr	r2, [r7, #8]
 8001798:	4413      	add	r3, r2
 800179a:	613b      	str	r3, [r7, #16]
    
    /* Set Own bit of the Rx descriptor Status */
    DMARxDesc->Status = ETH_DMARXDESC_OWN;
 800179c:	693b      	ldr	r3, [r7, #16]
 800179e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80017a2:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 size and Second Address Chained bit */
    DMARxDesc->ControlBufferSize = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;  
 80017a4:	693b      	ldr	r3, [r7, #16]
 80017a6:	f244 52f4 	movw	r2, #17908	; 0x45f4
 80017aa:	605a      	str	r2, [r3, #4]
    
    /* Set Buffer1 address pointer */
    DMARxDesc->Buffer1Addr = (uint32_t)(&RxBuff[i*ETH_RX_BUF_SIZE]);
 80017ac:	697b      	ldr	r3, [r7, #20]
 80017ae:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80017b2:	fb02 f303 	mul.w	r3, r2, r3
 80017b6:	687a      	ldr	r2, [r7, #4]
 80017b8:	4413      	add	r3, r2
 80017ba:	461a      	mov	r2, r3
 80017bc:	693b      	ldr	r3, [r7, #16]
 80017be:	609a      	str	r2, [r3, #8]
    
    if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 80017c0:	68fb      	ldr	r3, [r7, #12]
 80017c2:	699b      	ldr	r3, [r3, #24]
 80017c4:	2b01      	cmp	r3, #1
 80017c6:	d105      	bne.n	80017d4 <HAL_ETH_DMARxDescListInit+0x7e>
    {
      /* Enable Ethernet DMA Rx Descriptor interrupt */
      DMARxDesc->ControlBufferSize &= ~ETH_DMARXDESC_DIC;
 80017c8:	693b      	ldr	r3, [r7, #16]
 80017ca:	685b      	ldr	r3, [r3, #4]
 80017cc:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80017d0:	693b      	ldr	r3, [r7, #16]
 80017d2:	605a      	str	r2, [r3, #4]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (RxBuffCount-1U))
 80017d4:	683b      	ldr	r3, [r7, #0]
 80017d6:	3b01      	subs	r3, #1
 80017d8:	697a      	ldr	r2, [r7, #20]
 80017da:	429a      	cmp	r2, r3
 80017dc:	d208      	bcs.n	80017f0 <HAL_ETH_DMARxDescListInit+0x9a>
    {
      /* Set next descriptor address register with next descriptor base address */
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab+i+1U); 
 80017de:	697b      	ldr	r3, [r7, #20]
 80017e0:	3301      	adds	r3, #1
 80017e2:	015b      	lsls	r3, r3, #5
 80017e4:	68ba      	ldr	r2, [r7, #8]
 80017e6:	4413      	add	r3, r2
 80017e8:	461a      	mov	r2, r3
 80017ea:	693b      	ldr	r3, [r7, #16]
 80017ec:	60da      	str	r2, [r3, #12]
 80017ee:	e002      	b.n	80017f6 <HAL_ETH_DMARxDescListInit+0xa0>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab); 
 80017f0:	68ba      	ldr	r2, [r7, #8]
 80017f2:	693b      	ldr	r3, [r7, #16]
 80017f4:	60da      	str	r2, [r3, #12]
  for(i=0U; i < RxBuffCount; i++)
 80017f6:	697b      	ldr	r3, [r7, #20]
 80017f8:	3301      	adds	r3, #1
 80017fa:	617b      	str	r3, [r7, #20]
 80017fc:	697a      	ldr	r2, [r7, #20]
 80017fe:	683b      	ldr	r3, [r7, #0]
 8001800:	429a      	cmp	r2, r3
 8001802:	d3c6      	bcc.n	8001792 <HAL_ETH_DMARxDescListInit+0x3c>
    }
  }
  
  /* Set Receive Descriptor List Address Register */
  (heth->Instance)->DMARDLAR = (uint32_t) DMARxDescTab;
 8001804:	68fb      	ldr	r3, [r7, #12]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	68ba      	ldr	r2, [r7, #8]
 800180a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800180e:	330c      	adds	r3, #12
 8001810:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8001812:	68fb      	ldr	r3, [r7, #12]
 8001814:	2201      	movs	r2, #1
 8001816:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 800181a:	68fb      	ldr	r3, [r7, #12]
 800181c:	2200      	movs	r2, #0
 800181e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8001822:	2300      	movs	r3, #0
}
 8001824:	4618      	mov	r0, r3
 8001826:	371c      	adds	r7, #28
 8001828:	46bd      	mov	sp, r7
 800182a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800182e:	4770      	bx	lr

08001830 <HAL_ETH_TransmitFrame>:
  *         the configuration information for ETHERNET module
  * @param  FrameLength Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_TransmitFrame(ETH_HandleTypeDef *heth, uint32_t FrameLength)
{
 8001830:	b480      	push	{r7}
 8001832:	b087      	sub	sp, #28
 8001834:	af00      	add	r7, sp, #0
 8001836:	6078      	str	r0, [r7, #4]
 8001838:	6039      	str	r1, [r7, #0]
  uint32_t bufcount = 0U, size = 0U, i = 0U;
 800183a:	2300      	movs	r3, #0
 800183c:	617b      	str	r3, [r7, #20]
 800183e:	2300      	movs	r3, #0
 8001840:	60fb      	str	r3, [r7, #12]
 8001842:	2300      	movs	r3, #0
 8001844:	613b      	str	r3, [r7, #16]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800184c:	2b01      	cmp	r3, #1
 800184e:	d101      	bne.n	8001854 <HAL_ETH_TransmitFrame+0x24>
 8001850:	2302      	movs	r3, #2
 8001852:	e0cd      	b.n	80019f0 <HAL_ETH_TransmitFrame+0x1c0>
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	2201      	movs	r2, #1
 8001858:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	2202      	movs	r2, #2
 8001860:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  if (FrameLength == 0U) 
 8001864:	683b      	ldr	r3, [r7, #0]
 8001866:	2b00      	cmp	r3, #0
 8001868:	d109      	bne.n	800187e <HAL_ETH_TransmitFrame+0x4e>
  {
    /* Set ETH HAL state to READY */
    heth->State = HAL_ETH_STATE_READY;
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	2201      	movs	r2, #1
 800186e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	2200      	movs	r2, #0
 8001876:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return  HAL_ERROR;                                    
 800187a:	2301      	movs	r3, #1
 800187c:	e0b8      	b.n	80019f0 <HAL_ETH_TransmitFrame+0x1c0>
  }  
  
  /* Check if the descriptor is owned by the ETHERNET DMA (when set) or CPU (when reset) */
  if(((heth->TxDesc)->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	2b00      	cmp	r3, #0
 8001886:	da09      	bge.n	800189c <HAL_ETH_TransmitFrame+0x6c>
  {  
    /* OWN bit set */
    heth->State = HAL_ETH_STATE_BUSY_TX;
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	2212      	movs	r2, #18
 800188c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	2200      	movs	r2, #0
 8001894:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return HAL_ERROR;
 8001898:	2301      	movs	r3, #1
 800189a:	e0a9      	b.n	80019f0 <HAL_ETH_TransmitFrame+0x1c0>
  }
  
  /* Get the number of needed Tx buffers for the current frame */
  if (FrameLength > ETH_TX_BUF_SIZE)
 800189c:	683b      	ldr	r3, [r7, #0]
 800189e:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80018a2:	4293      	cmp	r3, r2
 80018a4:	d915      	bls.n	80018d2 <HAL_ETH_TransmitFrame+0xa2>
  {
    bufcount = FrameLength/ETH_TX_BUF_SIZE;
 80018a6:	683b      	ldr	r3, [r7, #0]
 80018a8:	4a54      	ldr	r2, [pc, #336]	; (80019fc <HAL_ETH_TransmitFrame+0x1cc>)
 80018aa:	fba2 2303 	umull	r2, r3, r2, r3
 80018ae:	0a9b      	lsrs	r3, r3, #10
 80018b0:	617b      	str	r3, [r7, #20]
    if (FrameLength % ETH_TX_BUF_SIZE) 
 80018b2:	683a      	ldr	r2, [r7, #0]
 80018b4:	4b51      	ldr	r3, [pc, #324]	; (80019fc <HAL_ETH_TransmitFrame+0x1cc>)
 80018b6:	fba3 1302 	umull	r1, r3, r3, r2
 80018ba:	0a9b      	lsrs	r3, r3, #10
 80018bc:	f240 51f4 	movw	r1, #1524	; 0x5f4
 80018c0:	fb01 f303 	mul.w	r3, r1, r3
 80018c4:	1ad3      	subs	r3, r2, r3
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d005      	beq.n	80018d6 <HAL_ETH_TransmitFrame+0xa6>
    {
      bufcount++;
 80018ca:	697b      	ldr	r3, [r7, #20]
 80018cc:	3301      	adds	r3, #1
 80018ce:	617b      	str	r3, [r7, #20]
 80018d0:	e001      	b.n	80018d6 <HAL_ETH_TransmitFrame+0xa6>
    }
  }
  else 
  {  
    bufcount = 1U;
 80018d2:	2301      	movs	r3, #1
 80018d4:	617b      	str	r3, [r7, #20]
  }
  if (bufcount == 1U)
 80018d6:	697b      	ldr	r3, [r7, #20]
 80018d8:	2b01      	cmp	r3, #1
 80018da:	d11c      	bne.n	8001916 <HAL_ETH_TransmitFrame+0xe6>
  {
    /* Set LAST and FIRST segment */
    heth->TxDesc->Status |=ETH_DMATXDESC_FS|ETH_DMATXDESC_LS;
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018e0:	681a      	ldr	r2, [r3, #0]
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018e6:	f042 5240 	orr.w	r2, r2, #805306368	; 0x30000000
 80018ea:	601a      	str	r2, [r3, #0]
    /* Set frame size */
    heth->TxDesc->ControlBufferSize = (FrameLength & ETH_DMATXDESC_TBS1);
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018f0:	683a      	ldr	r2, [r7, #0]
 80018f2:	f3c2 020c 	ubfx	r2, r2, #0, #13
 80018f6:	605a      	str	r2, [r3, #4]
    /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
    heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018fc:	681a      	ldr	r2, [r3, #0]
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001902:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001906:	601a      	str	r2, [r3, #0]
    /* Point to next descriptor */
    heth->TxDesc= (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800190c:	68db      	ldr	r3, [r3, #12]
 800190e:	461a      	mov	r2, r3
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	62da      	str	r2, [r3, #44]	; 0x2c
 8001914:	e04b      	b.n	80019ae <HAL_ETH_TransmitFrame+0x17e>
  }
  else
  {
    for (i=0U; i< bufcount; i++)
 8001916:	2300      	movs	r3, #0
 8001918:	613b      	str	r3, [r7, #16]
 800191a:	e044      	b.n	80019a6 <HAL_ETH_TransmitFrame+0x176>
    {
      /* Clear FIRST and LAST segment bits */
      heth->TxDesc->Status &= ~(ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001920:	681a      	ldr	r2, [r3, #0]
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001926:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800192a:	601a      	str	r2, [r3, #0]
      
      if (i == 0U) 
 800192c:	693b      	ldr	r3, [r7, #16]
 800192e:	2b00      	cmp	r3, #0
 8001930:	d107      	bne.n	8001942 <HAL_ETH_TransmitFrame+0x112>
      {
        /* Setting the first segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_FS;  
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001936:	681a      	ldr	r2, [r3, #0]
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800193c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001940:	601a      	str	r2, [r3, #0]
      }
      
      /* Program size */
      heth->TxDesc->ControlBufferSize = (ETH_TX_BUF_SIZE & ETH_DMATXDESC_TBS1);
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001946:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800194a:	605a      	str	r2, [r3, #4]
      
      if (i == (bufcount-1U))
 800194c:	697b      	ldr	r3, [r7, #20]
 800194e:	3b01      	subs	r3, #1
 8001950:	693a      	ldr	r2, [r7, #16]
 8001952:	429a      	cmp	r2, r3
 8001954:	d116      	bne.n	8001984 <HAL_ETH_TransmitFrame+0x154>
      {
        /* Setting the last segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_LS;
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800195a:	681a      	ldr	r2, [r3, #0]
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001960:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8001964:	601a      	str	r2, [r3, #0]
        size = FrameLength - (bufcount-1U)*ETH_TX_BUF_SIZE;
 8001966:	697b      	ldr	r3, [r7, #20]
 8001968:	4a25      	ldr	r2, [pc, #148]	; (8001a00 <HAL_ETH_TransmitFrame+0x1d0>)
 800196a:	fb02 f203 	mul.w	r2, r2, r3
 800196e:	683b      	ldr	r3, [r7, #0]
 8001970:	4413      	add	r3, r2
 8001972:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8001976:	60fb      	str	r3, [r7, #12]
        heth->TxDesc->ControlBufferSize = (size & ETH_DMATXDESC_TBS1);
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800197c:	68fa      	ldr	r2, [r7, #12]
 800197e:	f3c2 020c 	ubfx	r2, r2, #0, #13
 8001982:	605a      	str	r2, [r3, #4]
      }
      
      /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
      heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001988:	681a      	ldr	r2, [r3, #0]
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800198e:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001992:	601a      	str	r2, [r3, #0]
      /* point to next descriptor */
      heth->TxDesc = (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001998:	68db      	ldr	r3, [r3, #12]
 800199a:	461a      	mov	r2, r3
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	62da      	str	r2, [r3, #44]	; 0x2c
    for (i=0U; i< bufcount; i++)
 80019a0:	693b      	ldr	r3, [r7, #16]
 80019a2:	3301      	adds	r3, #1
 80019a4:	613b      	str	r3, [r7, #16]
 80019a6:	693a      	ldr	r2, [r7, #16]
 80019a8:	697b      	ldr	r3, [r7, #20]
 80019aa:	429a      	cmp	r2, r3
 80019ac:	d3b6      	bcc.n	800191c <HAL_ETH_TransmitFrame+0xec>
    }
  }
  
  /* When Tx Buffer unavailable flag is set: clear it and resume transmission */
  if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80019b6:	3314      	adds	r3, #20
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	f003 0304 	and.w	r3, r3, #4
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d00d      	beq.n	80019de <HAL_ETH_TransmitFrame+0x1ae>
  {
    /* Clear TBUS ETHERNET DMA flag */
    (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80019ca:	3314      	adds	r3, #20
 80019cc:	2204      	movs	r2, #4
 80019ce:	601a      	str	r2, [r3, #0]
    /* Resume DMA transmission*/
    (heth->Instance)->DMATPDR = 0U;
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80019d8:	3304      	adds	r3, #4
 80019da:	2200      	movs	r2, #0
 80019dc:	601a      	str	r2, [r3, #0]
  }
  
  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	2201      	movs	r2, #1
 80019e2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	2200      	movs	r2, #0
 80019ea:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 80019ee:	2300      	movs	r3, #0
}
 80019f0:	4618      	mov	r0, r3
 80019f2:	371c      	adds	r7, #28
 80019f4:	46bd      	mov	sp, r7
 80019f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019fa:	4770      	bx	lr
 80019fc:	ac02b00b 	.word	0xac02b00b
 8001a00:	fffffa0c 	.word	0xfffffa0c

08001a04 <HAL_ETH_GetReceivedFrame_IT>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_GetReceivedFrame_IT(ETH_HandleTypeDef *heth)
{
 8001a04:	b480      	push	{r7}
 8001a06:	b085      	sub	sp, #20
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	6078      	str	r0, [r7, #4]
  uint32_t descriptorscancounter = 0U;
 8001a0c:	2300      	movs	r3, #0
 8001a0e:	60fb      	str	r3, [r7, #12]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001a16:	2b01      	cmp	r3, #1
 8001a18:	d101      	bne.n	8001a1e <HAL_ETH_GetReceivedFrame_IT+0x1a>
 8001a1a:	2302      	movs	r3, #2
 8001a1c:	e074      	b.n	8001b08 <HAL_ETH_GetReceivedFrame_IT+0x104>
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	2201      	movs	r2, #1
 8001a22:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set ETH HAL State to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	2202      	movs	r2, #2
 8001a2a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Scan descriptors owned by CPU */
  while (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (descriptorscancounter < ETH_RXBUFNB))
 8001a2e:	e05a      	b.n	8001ae6 <HAL_ETH_GetReceivedFrame_IT+0xe2>
  {
    /* Just for security */
    descriptorscancounter++;
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	3301      	adds	r3, #1
 8001a34:	60fb      	str	r3, [r7, #12]
    
    /* Check if first segment in frame */
    /* ((heth->RxDesc->Status & ETH_DMARXDESC_FS) != (uint32_t)RESET) && ((heth->RxDesc->Status & ETH_DMARXDESC_LS) == (uint32_t)RESET)) */  
    if((heth->RxDesc->Status & (ETH_DMARXDESC_FS | ETH_DMARXDESC_LS)) == (uint32_t)ETH_DMARXDESC_FS)
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001a40:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001a44:	d10d      	bne.n	8001a62 <HAL_ETH_GetReceivedFrame_IT+0x5e>
    { 
      heth->RxFrameInfos.FSRxDesc = heth->RxDesc;
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	631a      	str	r2, [r3, #48]	; 0x30
      heth->RxFrameInfos.SegCount = 1U;   
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	2201      	movs	r2, #1
 8001a52:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a58:	68db      	ldr	r3, [r3, #12]
 8001a5a:	461a      	mov	r2, r3
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	629a      	str	r2, [r3, #40]	; 0x28
 8001a60:	e041      	b.n	8001ae6 <HAL_ETH_GetReceivedFrame_IT+0xe2>
    }
    /* Check if intermediate segment */
    /* ((heth->RxDesc->Status & ETH_DMARXDESC_LS) == (uint32_t)RESET)&& ((heth->RxDesc->Status & ETH_DMARXDESC_FS) == (uint32_t)RESET)) */
    else if ((heth->RxDesc->Status & (ETH_DMARXDESC_LS | ETH_DMARXDESC_FS)) == (uint32_t)RESET)
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d10b      	bne.n	8001a88 <HAL_ETH_GetReceivedFrame_IT+0x84>
    {
      /* Increment segment count */
      (heth->RxFrameInfos.SegCount)++;
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a74:	1c5a      	adds	r2, r3, #1
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*)(heth->RxDesc->Buffer2NextDescAddr);
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a7e:	68db      	ldr	r3, [r3, #12]
 8001a80:	461a      	mov	r2, r3
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	629a      	str	r2, [r3, #40]	; 0x28
 8001a86:	e02e      	b.n	8001ae6 <HAL_ETH_GetReceivedFrame_IT+0xe2>
    }
    /* Should be last segment */
    else
    { 
      /* Last segment */
      heth->RxFrameInfos.LSRxDesc = heth->RxDesc;
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	635a      	str	r2, [r3, #52]	; 0x34
      
      /* Increment segment count */
      (heth->RxFrameInfos.SegCount)++;
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a94:	1c5a      	adds	r2, r3, #1
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	639a      	str	r2, [r3, #56]	; 0x38
      
      /* Check if last segment is first segment: one segment contains the frame */
      if ((heth->RxFrameInfos.SegCount) == 1U)
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a9e:	2b01      	cmp	r3, #1
 8001aa0:	d103      	bne.n	8001aaa <HAL_ETH_GetReceivedFrame_IT+0xa6>
      {
        heth->RxFrameInfos.FSRxDesc = heth->RxDesc;
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	631a      	str	r2, [r3, #48]	; 0x30
      }
      
      /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
      heth->RxFrameInfos.length = (((heth->RxDesc)->Status & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4U;
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	0c1b      	lsrs	r3, r3, #16
 8001ab2:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8001ab6:	1f1a      	subs	r2, r3, #4
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Get the address of the buffer start address */ 
      heth->RxFrameInfos.buffer =((heth->RxFrameInfos).FSRxDesc)->Buffer1Addr;
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ac0:	689a      	ldr	r2, [r3, #8]
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Point to next descriptor */      
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001aca:	68db      	ldr	r3, [r3, #12]
 8001acc:	461a      	mov	r2, r3
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Set HAL State to Ready */
      heth->State = HAL_ETH_STATE_READY;
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	2201      	movs	r2, #1
 8001ad6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	2200      	movs	r2, #0
 8001ade:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
      /* Return function status */
      return HAL_OK;
 8001ae2:	2300      	movs	r3, #0
 8001ae4:	e010      	b.n	8001b08 <HAL_ETH_GetReceivedFrame_IT+0x104>
  while (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (descriptorscancounter < ETH_RXBUFNB))
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	db02      	blt.n	8001af6 <HAL_ETH_GetReceivedFrame_IT+0xf2>
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	2b03      	cmp	r3, #3
 8001af4:	d99c      	bls.n	8001a30 <HAL_ETH_GetReceivedFrame_IT+0x2c>
    }
  }

  /* Set HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	2201      	movs	r2, #1
 8001afa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	2200      	movs	r2, #0
 8001b02:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_ERROR;
 8001b06:	2301      	movs	r3, #1
}
 8001b08:	4618      	mov	r0, r3
 8001b0a:	3714      	adds	r7, #20
 8001b0c:	46bd      	mov	sp, r7
 8001b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b12:	4770      	bx	lr

08001b14 <HAL_ETH_IRQHandler>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 8001b14:	b580      	push	{r7, lr}
 8001b16:	b082      	sub	sp, #8
 8001b18:	af00      	add	r7, sp, #0
 8001b1a:	6078      	str	r0, [r7, #4]
  /* Frame received */
  if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_R)) 
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001b24:	3314      	adds	r3, #20
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001b2c:	2b40      	cmp	r3, #64	; 0x40
 8001b2e:	d112      	bne.n	8001b56 <HAL_ETH_IRQHandler+0x42>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*Call registered Receive complete callback*/
    heth->RxCpltCallback(heth);
#else
    /* Receive complete callback */
    HAL_ETH_RxCpltCallback(heth);
 8001b30:	6878      	ldr	r0, [r7, #4]
 8001b32:	f004 ff5b 	bl	80069ec <HAL_ETH_RxCpltCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */

     /* Clear the Eth DMA Rx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_R);
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001b3e:	3314      	adds	r3, #20
 8001b40:	2240      	movs	r2, #64	; 0x40
 8001b42:	601a      	str	r2, [r3, #0]

    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	2201      	movs	r2, #1
 8001b48:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	2200      	movs	r2, #0
 8001b50:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8001b54:	e01b      	b.n	8001b8e <HAL_ETH_IRQHandler+0x7a>

  }
  /* Frame transmitted */
  else if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_T)) 
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001b5e:	3314      	adds	r3, #20
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	f003 0301 	and.w	r3, r3, #1
 8001b66:	2b01      	cmp	r3, #1
 8001b68:	d111      	bne.n	8001b8e <HAL_ETH_IRQHandler+0x7a>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*  Call resgistered Transfer complete callback*/
    heth->TxCpltCallback(heth);
#else
    /* Transfer complete callback */
    HAL_ETH_TxCpltCallback(heth);
 8001b6a:	6878      	ldr	r0, [r7, #4]
 8001b6c:	f000 f839 	bl	8001be2 <HAL_ETH_TxCpltCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */

    /* Clear the Eth DMA Tx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_T);
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001b78:	3314      	adds	r3, #20
 8001b7a:	2201      	movs	r2, #1
 8001b7c:	601a      	str	r2, [r3, #0]

    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	2201      	movs	r2, #1
 8001b82:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	2200      	movs	r2, #0
 8001b8a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }
  
  /* Clear the interrupt flags */
  __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_NIS);
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001b96:	3314      	adds	r3, #20
 8001b98:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001b9c:	601a      	str	r2, [r3, #0]
  
  /* ETH DMA Error */
  if(__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_AIS))
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001ba6:	3314      	adds	r3, #20
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001bae:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001bb2:	d112      	bne.n	8001bda <HAL_ETH_IRQHandler+0xc6>
  {
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    heth->DMAErrorCallback(heth);
#else
    /* Ethernet Error callback */
    HAL_ETH_ErrorCallback(heth);
 8001bb4:	6878      	ldr	r0, [r7, #4]
 8001bb6:	f000 f81e 	bl	8001bf6 <HAL_ETH_ErrorCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */

    /* Clear the interrupt flags */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_FLAG_AIS);
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001bc2:	3314      	adds	r3, #20
 8001bc4:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001bc8:	601a      	str	r2, [r3, #0]
  
    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	2201      	movs	r2, #1
 8001bce:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	2200      	movs	r2, #0
 8001bd6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }
}
 8001bda:	bf00      	nop
 8001bdc:	3708      	adds	r7, #8
 8001bde:	46bd      	mov	sp, r7
 8001be0:	bd80      	pop	{r7, pc}

08001be2 <HAL_ETH_TxCpltCallback>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *heth)
{
 8001be2:	b480      	push	{r7}
 8001be4:	b083      	sub	sp, #12
 8001be6:	af00      	add	r7, sp, #0
 8001be8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_TxCpltCallback could be implemented in the user file
  */ 
}
 8001bea:	bf00      	nop
 8001bec:	370c      	adds	r7, #12
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf4:	4770      	bx	lr

08001bf6 <HAL_ETH_ErrorCallback>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *heth)
{
 8001bf6:	b480      	push	{r7}
 8001bf8:	b083      	sub	sp, #12
 8001bfa:	af00      	add	r7, sp, #0
 8001bfc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_TxCpltCallback could be implemented in the user file
  */ 
}
 8001bfe:	bf00      	nop
 8001c00:	370c      	adds	r7, #12
 8001c02:	46bd      	mov	sp, r7
 8001c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c08:	4770      	bx	lr

08001c0a <HAL_ETH_ReadPHYRegister>:
  *                   More PHY register could be read depending on the used PHY
  * @param RegValue PHY register value                  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t *RegValue)
{
 8001c0a:	b580      	push	{r7, lr}
 8001c0c:	b086      	sub	sp, #24
 8001c0e:	af00      	add	r7, sp, #0
 8001c10:	60f8      	str	r0, [r7, #12]
 8001c12:	460b      	mov	r3, r1
 8001c14:	607a      	str	r2, [r7, #4]
 8001c16:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg1 = 0U;     
 8001c18:	2300      	movs	r3, #0
 8001c1a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 8001c1c:	2300      	movs	r3, #0
 8001c1e:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001c26:	b2db      	uxtb	r3, r3
 8001c28:	2b82      	cmp	r3, #130	; 0x82
 8001c2a:	d101      	bne.n	8001c30 <HAL_ETH_ReadPHYRegister+0x26>
  {
    return HAL_BUSY;
 8001c2c:	2302      	movs	r3, #2
 8001c2e:	e050      	b.n	8001cd2 <HAL_ETH_ReadPHYRegister+0xc8>
  }
  /* Set ETH HAL State to BUSY_RD */
  heth->State = HAL_ETH_STATE_BUSY_RD;
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	2282      	movs	r2, #130	; 0x82
 8001c34:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	691b      	ldr	r3, [r3, #16]
 8001c3e:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8001c40:	697b      	ldr	r3, [r7, #20]
 8001c42:	f003 031c 	and.w	r3, r3, #28
 8001c46:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII address register value */
  tmpreg1 |=(((uint32_t)heth->Init.PhyAddress << 11U) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	8a1b      	ldrh	r3, [r3, #16]
 8001c4c:	02db      	lsls	r3, r3, #11
 8001c4e:	b29b      	uxth	r3, r3
 8001c50:	697a      	ldr	r2, [r7, #20]
 8001c52:	4313      	orrs	r3, r2
 8001c54:	617b      	str	r3, [r7, #20]
  tmpreg1 |=(((uint32_t)PHYReg<<6U) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
 8001c56:	897b      	ldrh	r3, [r7, #10]
 8001c58:	019b      	lsls	r3, r3, #6
 8001c5a:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8001c5e:	697a      	ldr	r2, [r7, #20]
 8001c60:	4313      	orrs	r3, r2
 8001c62:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 8001c64:	697b      	ldr	r3, [r7, #20]
 8001c66:	f023 0302 	bic.w	r3, r3, #2
 8001c6a:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 8001c6c:	697b      	ldr	r3, [r7, #20]
 8001c6e:	f043 0301 	orr.w	r3, r3, #1
 8001c72:	617b      	str	r3, [r7, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	697a      	ldr	r2, [r7, #20]
 8001c7a:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8001c7c:	f7ff fa54 	bl	8001128 <HAL_GetTick>
 8001c80:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001c82:	e015      	b.n	8001cb0 <HAL_ETH_ReadPHYRegister+0xa6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_READ_TO)
 8001c84:	f7ff fa50 	bl	8001128 <HAL_GetTick>
 8001c88:	4602      	mov	r2, r0
 8001c8a:	693b      	ldr	r3, [r7, #16]
 8001c8c:	1ad3      	subs	r3, r2, r3
 8001c8e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c92:	d309      	bcc.n	8001ca8 <HAL_ETH_ReadPHYRegister+0x9e>
    {
      heth->State= HAL_ETH_STATE_READY;
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	2201      	movs	r2, #1
 8001c98:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	2200      	movs	r2, #0
 8001ca0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 8001ca4:	2303      	movs	r3, #3
 8001ca6:	e014      	b.n	8001cd2 <HAL_ETH_ReadPHYRegister+0xc8>
    }
    
    tmpreg1 = heth->Instance->MACMIIAR;
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	691b      	ldr	r3, [r3, #16]
 8001cae:	617b      	str	r3, [r7, #20]
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001cb0:	697b      	ldr	r3, [r7, #20]
 8001cb2:	f003 0301 	and.w	r3, r3, #1
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d1e4      	bne.n	8001c84 <HAL_ETH_ReadPHYRegister+0x7a>
  }
  
  /* Get MACMIIDR value */
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	695b      	ldr	r3, [r3, #20]
 8001cc0:	b29b      	uxth	r3, r3
 8001cc2:	461a      	mov	r2, r3
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	2201      	movs	r2, #1
 8001ccc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 8001cd0:	2300      	movs	r3, #0
}
 8001cd2:	4618      	mov	r0, r3
 8001cd4:	3718      	adds	r7, #24
 8001cd6:	46bd      	mov	sp, r7
 8001cd8:	bd80      	pop	{r7, pc}

08001cda <HAL_ETH_WritePHYRegister>:
  *             More PHY register could be written depending on the used PHY
  * @param  RegValue the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t RegValue)
{
 8001cda:	b580      	push	{r7, lr}
 8001cdc:	b086      	sub	sp, #24
 8001cde:	af00      	add	r7, sp, #0
 8001ce0:	60f8      	str	r0, [r7, #12]
 8001ce2:	460b      	mov	r3, r1
 8001ce4:	607a      	str	r2, [r7, #4]
 8001ce6:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg1 = 0U;
 8001ce8:	2300      	movs	r3, #0
 8001cea:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 8001cec:	2300      	movs	r3, #0
 8001cee:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001cf6:	b2db      	uxtb	r3, r3
 8001cf8:	2b42      	cmp	r3, #66	; 0x42
 8001cfa:	d101      	bne.n	8001d00 <HAL_ETH_WritePHYRegister+0x26>
  {
    return HAL_BUSY;
 8001cfc:	2302      	movs	r3, #2
 8001cfe:	e04e      	b.n	8001d9e <HAL_ETH_WritePHYRegister+0xc4>
  }
  /* Set ETH HAL State to BUSY_WR */
  heth->State = HAL_ETH_STATE_BUSY_WR;
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	2242      	movs	r2, #66	; 0x42
 8001d04:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	691b      	ldr	r3, [r3, #16]
 8001d0e:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8001d10:	697b      	ldr	r3, [r7, #20]
 8001d12:	f003 031c 	and.w	r3, r3, #28
 8001d16:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII register address value */
  tmpreg1 |=(((uint32_t)heth->Init.PhyAddress<<11U) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	8a1b      	ldrh	r3, [r3, #16]
 8001d1c:	02db      	lsls	r3, r3, #11
 8001d1e:	b29b      	uxth	r3, r3
 8001d20:	697a      	ldr	r2, [r7, #20]
 8001d22:	4313      	orrs	r3, r2
 8001d24:	617b      	str	r3, [r7, #20]
  tmpreg1 |=(((uint32_t)PHYReg<<6U) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 8001d26:	897b      	ldrh	r3, [r7, #10]
 8001d28:	019b      	lsls	r3, r3, #6
 8001d2a:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8001d2e:	697a      	ldr	r2, [r7, #20]
 8001d30:	4313      	orrs	r3, r2
 8001d32:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 8001d34:	697b      	ldr	r3, [r7, #20]
 8001d36:	f043 0302 	orr.w	r3, r3, #2
 8001d3a:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 8001d3c:	697b      	ldr	r3, [r7, #20]
 8001d3e:	f043 0301 	orr.w	r3, r3, #1
 8001d42:	617b      	str	r3, [r7, #20]
  
  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	b29a      	uxth	r2, r3
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	615a      	str	r2, [r3, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	697a      	ldr	r2, [r7, #20]
 8001d54:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8001d56:	f7ff f9e7 	bl	8001128 <HAL_GetTick>
 8001d5a:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001d5c:	e015      	b.n	8001d8a <HAL_ETH_WritePHYRegister+0xb0>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_WRITE_TO)
 8001d5e:	f7ff f9e3 	bl	8001128 <HAL_GetTick>
 8001d62:	4602      	mov	r2, r0
 8001d64:	693b      	ldr	r3, [r7, #16]
 8001d66:	1ad3      	subs	r3, r2, r3
 8001d68:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d6c:	d309      	bcc.n	8001d82 <HAL_ETH_WritePHYRegister+0xa8>
    {
      heth->State= HAL_ETH_STATE_READY;
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	2201      	movs	r2, #1
 8001d72:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	2200      	movs	r2, #0
 8001d7a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 8001d7e:	2303      	movs	r3, #3
 8001d80:	e00d      	b.n	8001d9e <HAL_ETH_WritePHYRegister+0xc4>
    }
    
    tmpreg1 = heth->Instance->MACMIIAR;
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	691b      	ldr	r3, [r3, #16]
 8001d88:	617b      	str	r3, [r7, #20]
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001d8a:	697b      	ldr	r3, [r7, #20]
 8001d8c:	f003 0301 	and.w	r3, r3, #1
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d1e4      	bne.n	8001d5e <HAL_ETH_WritePHYRegister+0x84>
  }
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	2201      	movs	r2, #1
 8001d98:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK; 
 8001d9c:	2300      	movs	r3, #0
}
 8001d9e:	4618      	mov	r0, r3
 8001da0:	3718      	adds	r7, #24
 8001da2:	46bd      	mov	sp, r7
 8001da4:	bd80      	pop	{r7, pc}

08001da6 <HAL_ETH_Start>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{  
 8001da6:	b580      	push	{r7, lr}
 8001da8:	b082      	sub	sp, #8
 8001daa:	af00      	add	r7, sp, #0
 8001dac:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001db4:	2b01      	cmp	r3, #1
 8001db6:	d101      	bne.n	8001dbc <HAL_ETH_Start+0x16>
 8001db8:	2302      	movs	r3, #2
 8001dba:	e01f      	b.n	8001dfc <HAL_ETH_Start+0x56>
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	2201      	movs	r2, #1
 8001dc0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	2202      	movs	r2, #2
 8001dc8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Enable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionEnable(heth);
 8001dcc:	6878      	ldr	r0, [r7, #4]
 8001dce:	f000 fa1b 	bl	8002208 <ETH_MACTransmissionEnable>
  
  /* Enable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionEnable(heth);
 8001dd2:	6878      	ldr	r0, [r7, #4]
 8001dd4:	f000 fa35 	bl	8002242 <ETH_MACReceptionEnable>
  
  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 8001dd8:	6878      	ldr	r0, [r7, #4]
 8001dda:	f000 fa7f 	bl	80022dc <ETH_FlushTransmitFIFO>
  
  /* Start DMA transmission */
  ETH_DMATransmissionEnable(heth);
 8001dde:	6878      	ldr	r0, [r7, #4]
 8001de0:	f000 fa4c 	bl	800227c <ETH_DMATransmissionEnable>
  
  /* Start DMA reception */
  ETH_DMAReceptionEnable(heth);
 8001de4:	6878      	ldr	r0, [r7, #4]
 8001de6:	f000 fa61 	bl	80022ac <ETH_DMAReceptionEnable>
  
  /* Set the ETH state to READY*/
  heth->State= HAL_ETH_STATE_READY;
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	2201      	movs	r2, #1
 8001dee:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	2200      	movs	r2, #0
 8001df6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8001dfa:	2300      	movs	r3, #0
}
 8001dfc:	4618      	mov	r0, r3
 8001dfe:	3708      	adds	r7, #8
 8001e00:	46bd      	mov	sp, r7
 8001e02:	bd80      	pop	{r7, pc}

08001e04 <ETH_MACDMAConfig>:
  *         the configuration information for ETHERNET module
  * @param  err Ethernet Init error
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth, uint32_t err)
{
 8001e04:	b580      	push	{r7, lr}
 8001e06:	b0b0      	sub	sp, #192	; 0xc0
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	6078      	str	r0, [r7, #4]
 8001e0c:	6039      	str	r1, [r7, #0]
  ETH_MACInitTypeDef macinit;
  ETH_DMAInitTypeDef dmainit;
  uint32_t tmpreg1 = 0U;
 8001e0e:	2300      	movs	r3, #0
 8001e10:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  if (err != ETH_SUCCESS) /* Auto-negotiation failed */
 8001e14:	683b      	ldr	r3, [r7, #0]
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d007      	beq.n	8001e2a <ETH_MACDMAConfig+0x26>
  {
    /* Set Ethernet duplex mode to Full-duplex */
    (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001e20:	60da      	str	r2, [r3, #12]
    
    /* Set Ethernet speed to 100M */
    (heth->Init).Speed = ETH_SPEED_100M;
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001e28:	609a      	str	r2, [r3, #8]
  }
  
  /* Ethernet MAC default initialization **************************************/
  macinit.Watchdog = ETH_WATCHDOG_ENABLE;
 8001e2a:	2300      	movs	r3, #0
 8001e2c:	64bb      	str	r3, [r7, #72]	; 0x48
  macinit.Jabber = ETH_JABBER_ENABLE;
 8001e2e:	2300      	movs	r3, #0
 8001e30:	64fb      	str	r3, [r7, #76]	; 0x4c
  macinit.InterFrameGap = ETH_INTERFRAMEGAP_96BIT;
 8001e32:	2300      	movs	r3, #0
 8001e34:	653b      	str	r3, [r7, #80]	; 0x50
  macinit.CarrierSense = ETH_CARRIERSENCE_ENABLE;
 8001e36:	2300      	movs	r3, #0
 8001e38:	657b      	str	r3, [r7, #84]	; 0x54
  macinit.ReceiveOwn = ETH_RECEIVEOWN_ENABLE;
 8001e3a:	2300      	movs	r3, #0
 8001e3c:	65bb      	str	r3, [r7, #88]	; 0x58
  macinit.LoopbackMode = ETH_LOOPBACKMODE_DISABLE;
 8001e3e:	2300      	movs	r3, #0
 8001e40:	65fb      	str	r3, [r7, #92]	; 0x5c
  if(heth->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	69db      	ldr	r3, [r3, #28]
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d103      	bne.n	8001e52 <ETH_MACDMAConfig+0x4e>
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_ENABLE;
 8001e4a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001e4e:	663b      	str	r3, [r7, #96]	; 0x60
 8001e50:	e001      	b.n	8001e56 <ETH_MACDMAConfig+0x52>
  }
  else
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 8001e52:	2300      	movs	r3, #0
 8001e54:	663b      	str	r3, [r7, #96]	; 0x60
  }
  macinit.RetryTransmission = ETH_RETRYTRANSMISSION_DISABLE;
 8001e56:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001e5a:	667b      	str	r3, [r7, #100]	; 0x64
  macinit.AutomaticPadCRCStrip = ETH_AUTOMATICPADCRCSTRIP_DISABLE;
 8001e5c:	2300      	movs	r3, #0
 8001e5e:	66bb      	str	r3, [r7, #104]	; 0x68
  macinit.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8001e60:	2300      	movs	r3, #0
 8001e62:	66fb      	str	r3, [r7, #108]	; 0x6c
  macinit.DeferralCheck = ETH_DEFFERRALCHECK_DISABLE;
 8001e64:	2300      	movs	r3, #0
 8001e66:	673b      	str	r3, [r7, #112]	; 0x70
  macinit.ReceiveAll = ETH_RECEIVEAll_DISABLE;
 8001e68:	2300      	movs	r3, #0
 8001e6a:	677b      	str	r3, [r7, #116]	; 0x74
  macinit.SourceAddrFilter = ETH_SOURCEADDRFILTER_DISABLE;
 8001e6c:	2300      	movs	r3, #0
 8001e6e:	67bb      	str	r3, [r7, #120]	; 0x78
  macinit.PassControlFrames = ETH_PASSCONTROLFRAMES_BLOCKALL;
 8001e70:	2340      	movs	r3, #64	; 0x40
 8001e72:	67fb      	str	r3, [r7, #124]	; 0x7c
  macinit.BroadcastFramesReception = ETH_BROADCASTFRAMESRECEPTION_ENABLE;
 8001e74:	2300      	movs	r3, #0
 8001e76:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  macinit.DestinationAddrFilter = ETH_DESTINATIONADDRFILTER_NORMAL;
 8001e7a:	2300      	movs	r3, #0
 8001e7c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macinit.PromiscuousMode = ETH_PROMISCUOUS_MODE_DISABLE;
 8001e80:	2300      	movs	r3, #0
 8001e82:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macinit.MulticastFramesFilter = ETH_MULTICASTFRAMESFILTER_PERFECT;
 8001e86:	2300      	movs	r3, #0
 8001e88:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  macinit.UnicastFramesFilter = ETH_UNICASTFRAMESFILTER_PERFECT;
 8001e8c:	2300      	movs	r3, #0
 8001e8e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  macinit.HashTableHigh = 0x0U;
 8001e92:	2300      	movs	r3, #0
 8001e94:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  macinit.HashTableLow = 0x0U;
 8001e98:	2300      	movs	r3, #0
 8001e9a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  macinit.PauseTime = 0x0U;
 8001e9e:	2300      	movs	r3, #0
 8001ea0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  macinit.ZeroQuantaPause = ETH_ZEROQUANTAPAUSE_DISABLE;
 8001ea4:	2380      	movs	r3, #128	; 0x80
 8001ea6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  macinit.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8001eaa:	2300      	movs	r3, #0
 8001eac:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  macinit.UnicastPauseFrameDetect = ETH_UNICASTPAUSEFRAMEDETECT_DISABLE;
 8001eb0:	2300      	movs	r3, #0
 8001eb2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  macinit.ReceiveFlowControl = ETH_RECEIVEFLOWCONTROL_DISABLE;
 8001eb6:	2300      	movs	r3, #0
 8001eb8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  macinit.TransmitFlowControl = ETH_TRANSMITFLOWCONTROL_DISABLE;
 8001ebc:	2300      	movs	r3, #0
 8001ebe:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  macinit.VLANTagComparison = ETH_VLANTAGCOMPARISON_16BIT;
 8001ec2:	2300      	movs	r3, #0
 8001ec4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  macinit.VLANTagIdentifier = 0x0U;
 8001ec8:	2300      	movs	r3, #0
 8001eca:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  
  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8001ed8:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001edc:	4bac      	ldr	r3, [pc, #688]	; (8002190 <ETH_MACDMAConfig+0x38c>)
 8001ede:	4013      	ands	r3, r2
 8001ee0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Set the IPCO bit according to ETH ChecksumOffload value */
  /* Set the DR bit according to ETH RetryTransmission value */
  /* Set the ACS bit according to ETH AutomaticPadCRCStrip value */
  /* Set the BL bit according to ETH BackOffLimit value */
  /* Set the DC bit according to ETH DeferralCheck value */
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 8001ee4:	6cba      	ldr	r2, [r7, #72]	; 0x48
                       macinit.Jabber | 
 8001ee6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 8001ee8:	431a      	orrs	r2, r3
                       macinit.InterFrameGap |
 8001eea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
                       macinit.Jabber | 
 8001eec:	431a      	orrs	r2, r3
                       macinit.CarrierSense |
 8001eee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
                       macinit.InterFrameGap |
 8001ef0:	431a      	orrs	r2, r3
                       (heth->Init).Speed | 
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	689b      	ldr	r3, [r3, #8]
                       macinit.CarrierSense |
 8001ef6:	431a      	orrs	r2, r3
                       macinit.ReceiveOwn |
 8001ef8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
                       (heth->Init).Speed | 
 8001efa:	431a      	orrs	r2, r3
                       macinit.LoopbackMode |
 8001efc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
                       macinit.ReceiveOwn |
 8001efe:	431a      	orrs	r2, r3
                       (heth->Init).DuplexMode | 
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	68db      	ldr	r3, [r3, #12]
                       macinit.LoopbackMode |
 8001f04:	431a      	orrs	r2, r3
                       macinit.ChecksumOffload |    
 8001f06:	6e3b      	ldr	r3, [r7, #96]	; 0x60
                       (heth->Init).DuplexMode | 
 8001f08:	431a      	orrs	r2, r3
                       macinit.RetryTransmission | 
 8001f0a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
                       macinit.ChecksumOffload |    
 8001f0c:	431a      	orrs	r2, r3
                       macinit.AutomaticPadCRCStrip | 
 8001f0e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
                       macinit.RetryTransmission | 
 8001f10:	431a      	orrs	r2, r3
                       macinit.BackOffLimit | 
 8001f12:	6efb      	ldr	r3, [r7, #108]	; 0x6c
                       macinit.AutomaticPadCRCStrip | 
 8001f14:	431a      	orrs	r2, r3
                       macinit.DeferralCheck);
 8001f16:	6f3b      	ldr	r3, [r7, #112]	; 0x70
                       macinit.BackOffLimit | 
 8001f18:	4313      	orrs	r3, r2
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 8001f1a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001f1e:	4313      	orrs	r3, r2
 8001f20:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001f2c:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001f38:	2001      	movs	r0, #1
 8001f3a:	f7ff f901 	bl	8001140 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1; 
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001f46:	601a      	str	r2, [r3, #0]
  /* Set the DAIF bit according to ETH DestinationAddrFilter value */
  /* Set the PR bit according to ETH PromiscuousMode value */
  /* Set the PM, HMC and HPF bits according to ETH MulticastFramesFilter value */
  /* Set the HUC and HPF bits according to ETH UnicastFramesFilter value */
  /* Write to ETHERNET MACFFR */  
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8001f48:	6f7a      	ldr	r2, [r7, #116]	; 0x74
                                        macinit.SourceAddrFilter |
 8001f4a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8001f4c:	431a      	orrs	r2, r3
                                        macinit.PassControlFrames |
 8001f4e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
                                        macinit.SourceAddrFilter |
 8001f50:	431a      	orrs	r2, r3
                                        macinit.BroadcastFramesReception | 
 8001f52:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
                                        macinit.PassControlFrames |
 8001f56:	431a      	orrs	r2, r3
                                        macinit.DestinationAddrFilter |
 8001f58:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
                                        macinit.BroadcastFramesReception | 
 8001f5c:	431a      	orrs	r2, r3
                                        macinit.PromiscuousMode |
 8001f5e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
                                        macinit.DestinationAddrFilter |
 8001f62:	431a      	orrs	r2, r3
                                        macinit.MulticastFramesFilter |
 8001f64:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
                                        macinit.PromiscuousMode |
 8001f68:	ea42 0103 	orr.w	r1, r2, r3
                                        macinit.UnicastFramesFilter);
 8001f6c:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
                                        macinit.MulticastFramesFilter |
 8001f74:	430a      	orrs	r2, r1
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8001f76:	605a      	str	r2, [r3, #4]
   
   /* Wait until the write operation will be taken into account:
      at least four TX_CLK/RX_CLK clock cycles */
   tmpreg1 = (heth->Instance)->MACFFR;
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	685b      	ldr	r3, [r3, #4]
 8001f7e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8001f82:	2001      	movs	r0, #1
 8001f84:	f7ff f8dc 	bl	8001140 <HAL_Delay>
   (heth->Instance)->MACFFR = tmpreg1;
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001f90:	605a      	str	r2, [r3, #4]
   
   /*--------------- ETHERNET MACHTHR and MACHTLR Configuration --------------*/
   /* Write to ETHERNET MACHTHR */
   (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8001f9a:	609a      	str	r2, [r3, #8]
   
   /* Write to ETHERNET MACHTLR */
   (heth->Instance)->MACHTLR = (uint32_t)macinit.HashTableLow;
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8001fa4:	60da      	str	r2, [r3, #12]
   /*----------------------- ETHERNET MACFCR Configuration -------------------*/
   
   /* Get the ETHERNET MACFCR value */  
   tmpreg1 = (heth->Instance)->MACFCR;
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	699b      	ldr	r3, [r3, #24]
 8001fac:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Clear xx bits */
   tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8001fb0:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001fb4:	f64f 7341 	movw	r3, #65345	; 0xff41
 8001fb8:	4013      	ands	r3, r2
 8001fba:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Set the DZPQ bit according to ETH ZeroQuantaPause value */
   /* Set the PLT bit according to ETH PauseLowThreshold value */
   /* Set the UP bit according to ETH UnicastPauseFrameDetect value */
   /* Set the RFE bit according to ETH ReceiveFlowControl value */
   /* Set the TFE bit according to ETH TransmitFlowControl value */ 
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 8001fbe:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001fc2:	041a      	lsls	r2, r3, #16
                        macinit.ZeroQuantaPause |
 8001fc4:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 8001fc8:	431a      	orrs	r2, r3
                        macinit.PauseLowThreshold |
 8001fca:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
                        macinit.ZeroQuantaPause |
 8001fce:	431a      	orrs	r2, r3
                        macinit.UnicastPauseFrameDetect | 
 8001fd0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
                        macinit.PauseLowThreshold |
 8001fd4:	431a      	orrs	r2, r3
                        macinit.ReceiveFlowControl |
 8001fd6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
                        macinit.UnicastPauseFrameDetect | 
 8001fda:	431a      	orrs	r2, r3
                        macinit.TransmitFlowControl); 
 8001fdc:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
                        macinit.ReceiveFlowControl |
 8001fe0:	4313      	orrs	r3, r2
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 8001fe2:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001fe6:	4313      	orrs	r3, r2
 8001fe8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   
   /* Write to ETHERNET MACFCR */
   (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8001ff4:	619a      	str	r2, [r3, #24]
   
   /* Wait until the write operation will be taken into account:
   at least four TX_CLK/RX_CLK clock cycles */
   tmpreg1 = (heth->Instance)->MACFCR;
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	699b      	ldr	r3, [r3, #24]
 8001ffc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8002000:	2001      	movs	r0, #1
 8002002:	f7ff f89d 	bl	8001140 <HAL_Delay>
   (heth->Instance)->MACFCR = tmpreg1;
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800200e:	619a      	str	r2, [r3, #24]
   
   /*----------------------- ETHERNET MACVLANTR Configuration ----------------*/
   /* Set the ETV bit according to ETH VLANTagComparison value */
   /* Set the VL bit according to ETH VLANTagIdentifier value */  
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8002010:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
                                            macinit.VLANTagIdentifier);
 8002014:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	430a      	orrs	r2, r1
 800201e:	61da      	str	r2, [r3, #28]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACVLANTR;
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	69db      	ldr	r3, [r3, #28]
 8002026:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800202a:	2001      	movs	r0, #1
 800202c:	f7ff f888 	bl	8001140 <HAL_Delay>
    (heth->Instance)->MACVLANTR = tmpreg1;
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002038:	61da      	str	r2, [r3, #28]
    
    /* Ethernet DMA default initialization ************************************/
    dmainit.DropTCPIPChecksumErrorFrame = ETH_DROPTCPIPCHECKSUMERRORFRAME_ENABLE;
 800203a:	2300      	movs	r3, #0
 800203c:	60bb      	str	r3, [r7, #8]
    dmainit.ReceiveStoreForward = ETH_RECEIVESTOREFORWARD_ENABLE;
 800203e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002042:	60fb      	str	r3, [r7, #12]
    dmainit.FlushReceivedFrame = ETH_FLUSHRECEIVEDFRAME_ENABLE;
 8002044:	2300      	movs	r3, #0
 8002046:	613b      	str	r3, [r7, #16]
    dmainit.TransmitStoreForward = ETH_TRANSMITSTOREFORWARD_ENABLE;  
 8002048:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800204c:	617b      	str	r3, [r7, #20]
    dmainit.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 800204e:	2300      	movs	r3, #0
 8002050:	61bb      	str	r3, [r7, #24]
    dmainit.ForwardErrorFrames = ETH_FORWARDERRORFRAMES_DISABLE;
 8002052:	2300      	movs	r3, #0
 8002054:	61fb      	str	r3, [r7, #28]
    dmainit.ForwardUndersizedGoodFrames = ETH_FORWARDUNDERSIZEDGOODFRAMES_DISABLE;
 8002056:	2300      	movs	r3, #0
 8002058:	623b      	str	r3, [r7, #32]
    dmainit.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 800205a:	2300      	movs	r3, #0
 800205c:	627b      	str	r3, [r7, #36]	; 0x24
    dmainit.SecondFrameOperate = ETH_SECONDFRAMEOPERARTE_ENABLE;
 800205e:	2304      	movs	r3, #4
 8002060:	62bb      	str	r3, [r7, #40]	; 0x28
    dmainit.AddressAlignedBeats = ETH_ADDRESSALIGNEDBEATS_ENABLE;
 8002062:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002066:	62fb      	str	r3, [r7, #44]	; 0x2c
    dmainit.FixedBurst = ETH_FIXEDBURST_ENABLE;
 8002068:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800206c:	633b      	str	r3, [r7, #48]	; 0x30
    dmainit.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 800206e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002072:	637b      	str	r3, [r7, #52]	; 0x34
    dmainit.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8002074:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002078:	63bb      	str	r3, [r7, #56]	; 0x38
    dmainit.EnhancedDescriptorFormat = ETH_DMAENHANCEDDESCRIPTOR_ENABLE;
 800207a:	2380      	movs	r3, #128	; 0x80
 800207c:	63fb      	str	r3, [r7, #60]	; 0x3c
    dmainit.DescriptorSkipLength = 0x0U;
 800207e:	2300      	movs	r3, #0
 8002080:	643b      	str	r3, [r7, #64]	; 0x40
    dmainit.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8002082:	2300      	movs	r3, #0
 8002084:	647b      	str	r3, [r7, #68]	; 0x44
    
    /* Get the ETHERNET DMAOMR value */
    tmpreg1 = (heth->Instance)->DMAOMR;
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800208e:	3318      	adds	r3, #24
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Clear xx bits */
    tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8002096:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800209a:	4b3e      	ldr	r3, [pc, #248]	; (8002194 <ETH_MACDMAConfig+0x390>)
 800209c:	4013      	ands	r3, r2
 800209e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Set the TTC bit according to ETH TransmitThresholdControl value */
    /* Set the FEF bit according to ETH ForwardErrorFrames value */
    /* Set the FUF bit according to ETH ForwardUndersizedGoodFrames value */
    /* Set the RTC bit according to ETH ReceiveThresholdControl value */
    /* Set the OSF bit according to ETH SecondFrameOperate value */
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 80020a2:	68ba      	ldr	r2, [r7, #8]
                         dmainit.ReceiveStoreForward |
 80020a4:	68fb      	ldr	r3, [r7, #12]
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 80020a6:	431a      	orrs	r2, r3
                         dmainit.FlushReceivedFrame |
 80020a8:	693b      	ldr	r3, [r7, #16]
                         dmainit.ReceiveStoreForward |
 80020aa:	431a      	orrs	r2, r3
                         dmainit.TransmitStoreForward | 
 80020ac:	697b      	ldr	r3, [r7, #20]
                         dmainit.FlushReceivedFrame |
 80020ae:	431a      	orrs	r2, r3
                         dmainit.TransmitThresholdControl |
 80020b0:	69bb      	ldr	r3, [r7, #24]
                         dmainit.TransmitStoreForward | 
 80020b2:	431a      	orrs	r2, r3
                         dmainit.ForwardErrorFrames |
 80020b4:	69fb      	ldr	r3, [r7, #28]
                         dmainit.TransmitThresholdControl |
 80020b6:	431a      	orrs	r2, r3
                         dmainit.ForwardUndersizedGoodFrames |
 80020b8:	6a3b      	ldr	r3, [r7, #32]
                         dmainit.ForwardErrorFrames |
 80020ba:	431a      	orrs	r2, r3
                         dmainit.ReceiveThresholdControl |
 80020bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
                         dmainit.ForwardUndersizedGoodFrames |
 80020be:	431a      	orrs	r2, r3
                         dmainit.SecondFrameOperate);
 80020c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
                         dmainit.ReceiveThresholdControl |
 80020c2:	4313      	orrs	r3, r2
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 80020c4:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80020c8:	4313      	orrs	r3, r2
 80020ca:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    
    /* Write to ETHERNET DMAOMR */
    (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80020d6:	3318      	adds	r3, #24
 80020d8:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80020dc:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->DMAOMR;
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80020e6:	3318      	adds	r3, #24
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80020ee:	2001      	movs	r0, #1
 80020f0:	f7ff f826 	bl	8001140 <HAL_Delay>
    (heth->Instance)->DMAOMR = tmpreg1;
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80020fc:	3318      	adds	r3, #24
 80020fe:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002102:	601a      	str	r2, [r3, #0]
    /* Set the RPBL and 4*PBL bits according to ETH RxDMABurstLength value */
    /* Set the PBL and 4*PBL bits according to ETH TxDMABurstLength value */
    /* Set the Enhanced DMA descriptors bit according to ETH EnhancedDescriptorFormat value*/
    /* Set the DSL bit according to ETH DesciptorSkipLength value */
    /* Set the PR and DA bits according to ETH DMAArbitration value */
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8002104:	6afa      	ldr	r2, [r7, #44]	; 0x2c
                                          dmainit.FixedBurst |
 8002106:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8002108:	431a      	orrs	r2, r3
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 800210a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                          dmainit.FixedBurst |
 800210c:	431a      	orrs	r2, r3
                                          dmainit.TxDMABurstLength |
 800210e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 8002110:	431a      	orrs	r2, r3
                                          dmainit.EnhancedDescriptorFormat |
 8002112:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
                                          dmainit.TxDMABurstLength |
 8002114:	431a      	orrs	r2, r3
                                          (dmainit.DescriptorSkipLength << 2U) |
 8002116:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002118:	009b      	lsls	r3, r3, #2
                                          dmainit.EnhancedDescriptorFormat |
 800211a:	431a      	orrs	r2, r3
                                          dmainit.DMAArbitration |
 800211c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
                                          (dmainit.DescriptorSkipLength << 2U) |
 800211e:	431a      	orrs	r2, r3
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8002128:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800212c:	601a      	str	r2, [r3, #0]
                                          ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */
     
     /* Wait until the write operation will be taken into account:
        at least four TX_CLK/RX_CLK clock cycles */
     tmpreg1 = (heth->Instance)->DMABMR;
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     HAL_Delay(ETH_REG_WRITE_DELAY);
 800213c:	2001      	movs	r0, #1
 800213e:	f7fe ffff 	bl	8001140 <HAL_Delay>
     (heth->Instance)->DMABMR = tmpreg1;
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800214a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800214e:	601a      	str	r2, [r3, #0]

     if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	699b      	ldr	r3, [r3, #24]
 8002154:	2b01      	cmp	r3, #1
 8002156:	d10f      	bne.n	8002178 <ETH_MACDMAConfig+0x374>
     {
       /* Enable the Ethernet Rx Interrupt */
       __HAL_ETH_DMA_ENABLE_IT((heth), ETH_DMA_IT_NIS | ETH_DMA_IT_R);
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002160:	331c      	adds	r3, #28
 8002162:	681a      	ldr	r2, [r3, #0]
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800216c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002170:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002174:	331c      	adds	r3, #28
 8002176:	601a      	str	r2, [r3, #0]
     }

     /* Initialize MAC address in ethernet MAC */ 
     ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	695b      	ldr	r3, [r3, #20]
 800217c:	461a      	mov	r2, r3
 800217e:	2100      	movs	r1, #0
 8002180:	6878      	ldr	r0, [r7, #4]
 8002182:	f000 f809 	bl	8002198 <ETH_MACAddressConfig>
}
 8002186:	bf00      	nop
 8002188:	37c0      	adds	r7, #192	; 0xc0
 800218a:	46bd      	mov	sp, r7
 800218c:	bd80      	pop	{r7, pc}
 800218e:	bf00      	nop
 8002190:	ff20810f 	.word	0xff20810f
 8002194:	f8de3f23 	.word	0xf8de3f23

08002198 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8002198:	b480      	push	{r7}
 800219a:	b087      	sub	sp, #28
 800219c:	af00      	add	r7, sp, #0
 800219e:	60f8      	str	r0, [r7, #12]
 80021a0:	60b9      	str	r1, [r7, #8]
 80021a2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ETH_MAC_ADDRESS0123(MacAddr));
  
  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	3305      	adds	r3, #5
 80021a8:	781b      	ldrb	r3, [r3, #0]
 80021aa:	021b      	lsls	r3, r3, #8
 80021ac:	687a      	ldr	r2, [r7, #4]
 80021ae:	3204      	adds	r2, #4
 80021b0:	7812      	ldrb	r2, [r2, #0]
 80021b2:	4313      	orrs	r3, r2
 80021b4:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 80021b6:	68ba      	ldr	r2, [r7, #8]
 80021b8:	4b11      	ldr	r3, [pc, #68]	; (8002200 <ETH_MACAddressConfig+0x68>)
 80021ba:	4413      	add	r3, r2
 80021bc:	461a      	mov	r2, r3
 80021be:	697b      	ldr	r3, [r7, #20]
 80021c0:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	3303      	adds	r3, #3
 80021c6:	781b      	ldrb	r3, [r3, #0]
 80021c8:	061a      	lsls	r2, r3, #24
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	3302      	adds	r3, #2
 80021ce:	781b      	ldrb	r3, [r3, #0]
 80021d0:	041b      	lsls	r3, r3, #16
 80021d2:	431a      	orrs	r2, r3
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	3301      	adds	r3, #1
 80021d8:	781b      	ldrb	r3, [r3, #0]
 80021da:	021b      	lsls	r3, r3, #8
 80021dc:	4313      	orrs	r3, r2
 80021de:	687a      	ldr	r2, [r7, #4]
 80021e0:	7812      	ldrb	r2, [r2, #0]
 80021e2:	4313      	orrs	r3, r2
 80021e4:	617b      	str	r3, [r7, #20]
  
  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 80021e6:	68ba      	ldr	r2, [r7, #8]
 80021e8:	4b06      	ldr	r3, [pc, #24]	; (8002204 <ETH_MACAddressConfig+0x6c>)
 80021ea:	4413      	add	r3, r2
 80021ec:	461a      	mov	r2, r3
 80021ee:	697b      	ldr	r3, [r7, #20]
 80021f0:	6013      	str	r3, [r2, #0]
}
 80021f2:	bf00      	nop
 80021f4:	371c      	adds	r7, #28
 80021f6:	46bd      	mov	sp, r7
 80021f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021fc:	4770      	bx	lr
 80021fe:	bf00      	nop
 8002200:	40028040 	.word	0x40028040
 8002204:	40028044 	.word	0x40028044

08002208 <ETH_MACTransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module  
  * @retval None
  */
static void ETH_MACTransmissionEnable(ETH_HandleTypeDef *heth)
{ 
 8002208:	b580      	push	{r7, lr}
 800220a:	b084      	sub	sp, #16
 800220c:	af00      	add	r7, sp, #0
 800220e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8002210:	2300      	movs	r3, #0
 8002212:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC transmission */
  (heth->Instance)->MACCR |= ETH_MACCR_TE;
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	681a      	ldr	r2, [r3, #0]
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	f042 0208 	orr.w	r2, r2, #8
 8002222:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 800222c:	2001      	movs	r0, #1
 800222e:	f000 f87f 	bl	8002330 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	68fa      	ldr	r2, [r7, #12]
 8002238:	601a      	str	r2, [r3, #0]
}
 800223a:	bf00      	nop
 800223c:	3710      	adds	r7, #16
 800223e:	46bd      	mov	sp, r7
 8002240:	bd80      	pop	{r7, pc}

08002242 <ETH_MACReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_MACReceptionEnable(ETH_HandleTypeDef *heth)
{ 
 8002242:	b580      	push	{r7, lr}
 8002244:	b084      	sub	sp, #16
 8002246:	af00      	add	r7, sp, #0
 8002248:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 800224a:	2300      	movs	r3, #0
 800224c:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC reception */
  (heth->Instance)->MACCR |= ETH_MACCR_RE;
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	681a      	ldr	r2, [r3, #0]
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	f042 0204 	orr.w	r2, r2, #4
 800225c:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8002266:	2001      	movs	r0, #1
 8002268:	f000 f862 	bl	8002330 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	68fa      	ldr	r2, [r7, #12]
 8002272:	601a      	str	r2, [r3, #0]
}
 8002274:	bf00      	nop
 8002276:	3710      	adds	r7, #16
 8002278:	46bd      	mov	sp, r7
 800227a:	bd80      	pop	{r7, pc}

0800227c <ETH_DMATransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_DMATransmissionEnable(ETH_HandleTypeDef *heth)
{
 800227c:	b480      	push	{r7}
 800227e:	b083      	sub	sp, #12
 8002280:	af00      	add	r7, sp, #0
 8002282:	6078      	str	r0, [r7, #4]
  /* Enable the DMA transmission */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_ST;  
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800228c:	3318      	adds	r3, #24
 800228e:	681a      	ldr	r2, [r3, #0]
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002298:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800229c:	3318      	adds	r3, #24
 800229e:	601a      	str	r2, [r3, #0]
}
 80022a0:	bf00      	nop
 80022a2:	370c      	adds	r7, #12
 80022a4:	46bd      	mov	sp, r7
 80022a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022aa:	4770      	bx	lr

080022ac <ETH_DMAReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module 
  * @retval None
  */
static void ETH_DMAReceptionEnable(ETH_HandleTypeDef *heth)
{  
 80022ac:	b480      	push	{r7}
 80022ae:	b083      	sub	sp, #12
 80022b0:	af00      	add	r7, sp, #0
 80022b2:	6078      	str	r0, [r7, #4]
  /* Enable the DMA reception */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_SR;  
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80022bc:	3318      	adds	r3, #24
 80022be:	681a      	ldr	r2, [r3, #0]
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	f042 0202 	orr.w	r2, r2, #2
 80022c8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80022cc:	3318      	adds	r3, #24
 80022ce:	601a      	str	r2, [r3, #0]
}
 80022d0:	bf00      	nop
 80022d2:	370c      	adds	r7, #12
 80022d4:	46bd      	mov	sp, r7
 80022d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022da:	4770      	bx	lr

080022dc <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 80022dc:	b580      	push	{r7, lr}
 80022de:	b084      	sub	sp, #16
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 80022e4:	2300      	movs	r3, #0
 80022e6:	60fb      	str	r3, [r7, #12]
  
  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80022f0:	3318      	adds	r3, #24
 80022f2:	681a      	ldr	r2, [r3, #0]
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80022fc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002300:	3318      	adds	r3, #24
 8002302:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800230c:	3318      	adds	r3, #24
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8002312:	2001      	movs	r0, #1
 8002314:	f000 f80c 	bl	8002330 <ETH_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	68fa      	ldr	r2, [r7, #12]
 800231e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002322:	3318      	adds	r3, #24
 8002324:	601a      	str	r2, [r3, #0]
}
 8002326:	bf00      	nop
 8002328:	3710      	adds	r7, #16
 800232a:	46bd      	mov	sp, r7
 800232c:	bd80      	pop	{r7, pc}
	...

08002330 <ETH_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay specifies the delay time length, in milliseconds.
  * @retval None
  */
static void ETH_Delay(uint32_t mdelay)
{
 8002330:	b480      	push	{r7}
 8002332:	b085      	sub	sp, #20
 8002334:	af00      	add	r7, sp, #0
 8002336:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002338:	4b0a      	ldr	r3, [pc, #40]	; (8002364 <ETH_Delay+0x34>)
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	4a0a      	ldr	r2, [pc, #40]	; (8002368 <ETH_Delay+0x38>)
 800233e:	fba2 2303 	umull	r2, r3, r2, r3
 8002342:	0a5b      	lsrs	r3, r3, #9
 8002344:	687a      	ldr	r2, [r7, #4]
 8002346:	fb02 f303 	mul.w	r3, r2, r3
 800234a:	60fb      	str	r3, [r7, #12]
  do 
  {
    __NOP();
 800234c:	bf00      	nop
  } 
  while (Delay --);
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	1e5a      	subs	r2, r3, #1
 8002352:	60fa      	str	r2, [r7, #12]
 8002354:	2b00      	cmp	r3, #0
 8002356:	d1f9      	bne.n	800234c <ETH_Delay+0x1c>
}
 8002358:	bf00      	nop
 800235a:	3714      	adds	r7, #20
 800235c:	46bd      	mov	sp, r7
 800235e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002362:	4770      	bx	lr
 8002364:	20000000 	.word	0x20000000
 8002368:	10624dd3 	.word	0x10624dd3

0800236c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800236c:	b480      	push	{r7}
 800236e:	b089      	sub	sp, #36	; 0x24
 8002370:	af00      	add	r7, sp, #0
 8002372:	6078      	str	r0, [r7, #4]
 8002374:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002376:	2300      	movs	r3, #0
 8002378:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800237a:	2300      	movs	r3, #0
 800237c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800237e:	2300      	movs	r3, #0
 8002380:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002382:	2300      	movs	r3, #0
 8002384:	61fb      	str	r3, [r7, #28]
 8002386:	e177      	b.n	8002678 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002388:	2201      	movs	r2, #1
 800238a:	69fb      	ldr	r3, [r7, #28]
 800238c:	fa02 f303 	lsl.w	r3, r2, r3
 8002390:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002392:	683b      	ldr	r3, [r7, #0]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	697a      	ldr	r2, [r7, #20]
 8002398:	4013      	ands	r3, r2
 800239a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800239c:	693a      	ldr	r2, [r7, #16]
 800239e:	697b      	ldr	r3, [r7, #20]
 80023a0:	429a      	cmp	r2, r3
 80023a2:	f040 8166 	bne.w	8002672 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80023a6:	683b      	ldr	r3, [r7, #0]
 80023a8:	685b      	ldr	r3, [r3, #4]
 80023aa:	2b02      	cmp	r3, #2
 80023ac:	d003      	beq.n	80023b6 <HAL_GPIO_Init+0x4a>
 80023ae:	683b      	ldr	r3, [r7, #0]
 80023b0:	685b      	ldr	r3, [r3, #4]
 80023b2:	2b12      	cmp	r3, #18
 80023b4:	d123      	bne.n	80023fe <HAL_GPIO_Init+0x92>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80023b6:	69fb      	ldr	r3, [r7, #28]
 80023b8:	08da      	lsrs	r2, r3, #3
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	3208      	adds	r2, #8
 80023be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80023c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80023c4:	69fb      	ldr	r3, [r7, #28]
 80023c6:	f003 0307 	and.w	r3, r3, #7
 80023ca:	009b      	lsls	r3, r3, #2
 80023cc:	220f      	movs	r2, #15
 80023ce:	fa02 f303 	lsl.w	r3, r2, r3
 80023d2:	43db      	mvns	r3, r3
 80023d4:	69ba      	ldr	r2, [r7, #24]
 80023d6:	4013      	ands	r3, r2
 80023d8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80023da:	683b      	ldr	r3, [r7, #0]
 80023dc:	691a      	ldr	r2, [r3, #16]
 80023de:	69fb      	ldr	r3, [r7, #28]
 80023e0:	f003 0307 	and.w	r3, r3, #7
 80023e4:	009b      	lsls	r3, r3, #2
 80023e6:	fa02 f303 	lsl.w	r3, r2, r3
 80023ea:	69ba      	ldr	r2, [r7, #24]
 80023ec:	4313      	orrs	r3, r2
 80023ee:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80023f0:	69fb      	ldr	r3, [r7, #28]
 80023f2:	08da      	lsrs	r2, r3, #3
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	3208      	adds	r2, #8
 80023f8:	69b9      	ldr	r1, [r7, #24]
 80023fa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002404:	69fb      	ldr	r3, [r7, #28]
 8002406:	005b      	lsls	r3, r3, #1
 8002408:	2203      	movs	r2, #3
 800240a:	fa02 f303 	lsl.w	r3, r2, r3
 800240e:	43db      	mvns	r3, r3
 8002410:	69ba      	ldr	r2, [r7, #24]
 8002412:	4013      	ands	r3, r2
 8002414:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002416:	683b      	ldr	r3, [r7, #0]
 8002418:	685b      	ldr	r3, [r3, #4]
 800241a:	f003 0203 	and.w	r2, r3, #3
 800241e:	69fb      	ldr	r3, [r7, #28]
 8002420:	005b      	lsls	r3, r3, #1
 8002422:	fa02 f303 	lsl.w	r3, r2, r3
 8002426:	69ba      	ldr	r2, [r7, #24]
 8002428:	4313      	orrs	r3, r2
 800242a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	69ba      	ldr	r2, [r7, #24]
 8002430:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002432:	683b      	ldr	r3, [r7, #0]
 8002434:	685b      	ldr	r3, [r3, #4]
 8002436:	2b01      	cmp	r3, #1
 8002438:	d00b      	beq.n	8002452 <HAL_GPIO_Init+0xe6>
 800243a:	683b      	ldr	r3, [r7, #0]
 800243c:	685b      	ldr	r3, [r3, #4]
 800243e:	2b02      	cmp	r3, #2
 8002440:	d007      	beq.n	8002452 <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002442:	683b      	ldr	r3, [r7, #0]
 8002444:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002446:	2b11      	cmp	r3, #17
 8002448:	d003      	beq.n	8002452 <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800244a:	683b      	ldr	r3, [r7, #0]
 800244c:	685b      	ldr	r3, [r3, #4]
 800244e:	2b12      	cmp	r3, #18
 8002450:	d130      	bne.n	80024b4 <HAL_GPIO_Init+0x148>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	689b      	ldr	r3, [r3, #8]
 8002456:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002458:	69fb      	ldr	r3, [r7, #28]
 800245a:	005b      	lsls	r3, r3, #1
 800245c:	2203      	movs	r2, #3
 800245e:	fa02 f303 	lsl.w	r3, r2, r3
 8002462:	43db      	mvns	r3, r3
 8002464:	69ba      	ldr	r2, [r7, #24]
 8002466:	4013      	ands	r3, r2
 8002468:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800246a:	683b      	ldr	r3, [r7, #0]
 800246c:	68da      	ldr	r2, [r3, #12]
 800246e:	69fb      	ldr	r3, [r7, #28]
 8002470:	005b      	lsls	r3, r3, #1
 8002472:	fa02 f303 	lsl.w	r3, r2, r3
 8002476:	69ba      	ldr	r2, [r7, #24]
 8002478:	4313      	orrs	r3, r2
 800247a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	69ba      	ldr	r2, [r7, #24]
 8002480:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	685b      	ldr	r3, [r3, #4]
 8002486:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002488:	2201      	movs	r2, #1
 800248a:	69fb      	ldr	r3, [r7, #28]
 800248c:	fa02 f303 	lsl.w	r3, r2, r3
 8002490:	43db      	mvns	r3, r3
 8002492:	69ba      	ldr	r2, [r7, #24]
 8002494:	4013      	ands	r3, r2
 8002496:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002498:	683b      	ldr	r3, [r7, #0]
 800249a:	685b      	ldr	r3, [r3, #4]
 800249c:	091b      	lsrs	r3, r3, #4
 800249e:	f003 0201 	and.w	r2, r3, #1
 80024a2:	69fb      	ldr	r3, [r7, #28]
 80024a4:	fa02 f303 	lsl.w	r3, r2, r3
 80024a8:	69ba      	ldr	r2, [r7, #24]
 80024aa:	4313      	orrs	r3, r2
 80024ac:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	69ba      	ldr	r2, [r7, #24]
 80024b2:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	68db      	ldr	r3, [r3, #12]
 80024b8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80024ba:	69fb      	ldr	r3, [r7, #28]
 80024bc:	005b      	lsls	r3, r3, #1
 80024be:	2203      	movs	r2, #3
 80024c0:	fa02 f303 	lsl.w	r3, r2, r3
 80024c4:	43db      	mvns	r3, r3
 80024c6:	69ba      	ldr	r2, [r7, #24]
 80024c8:	4013      	ands	r3, r2
 80024ca:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80024cc:	683b      	ldr	r3, [r7, #0]
 80024ce:	689a      	ldr	r2, [r3, #8]
 80024d0:	69fb      	ldr	r3, [r7, #28]
 80024d2:	005b      	lsls	r3, r3, #1
 80024d4:	fa02 f303 	lsl.w	r3, r2, r3
 80024d8:	69ba      	ldr	r2, [r7, #24]
 80024da:	4313      	orrs	r3, r2
 80024dc:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	69ba      	ldr	r2, [r7, #24]
 80024e2:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80024e4:	683b      	ldr	r3, [r7, #0]
 80024e6:	685b      	ldr	r3, [r3, #4]
 80024e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	f000 80c0 	beq.w	8002672 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80024f2:	2300      	movs	r3, #0
 80024f4:	60fb      	str	r3, [r7, #12]
 80024f6:	4b65      	ldr	r3, [pc, #404]	; (800268c <HAL_GPIO_Init+0x320>)
 80024f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024fa:	4a64      	ldr	r2, [pc, #400]	; (800268c <HAL_GPIO_Init+0x320>)
 80024fc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002500:	6453      	str	r3, [r2, #68]	; 0x44
 8002502:	4b62      	ldr	r3, [pc, #392]	; (800268c <HAL_GPIO_Init+0x320>)
 8002504:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002506:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800250a:	60fb      	str	r3, [r7, #12]
 800250c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800250e:	4a60      	ldr	r2, [pc, #384]	; (8002690 <HAL_GPIO_Init+0x324>)
 8002510:	69fb      	ldr	r3, [r7, #28]
 8002512:	089b      	lsrs	r3, r3, #2
 8002514:	3302      	adds	r3, #2
 8002516:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800251a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800251c:	69fb      	ldr	r3, [r7, #28]
 800251e:	f003 0303 	and.w	r3, r3, #3
 8002522:	009b      	lsls	r3, r3, #2
 8002524:	220f      	movs	r2, #15
 8002526:	fa02 f303 	lsl.w	r3, r2, r3
 800252a:	43db      	mvns	r3, r3
 800252c:	69ba      	ldr	r2, [r7, #24]
 800252e:	4013      	ands	r3, r2
 8002530:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	4a57      	ldr	r2, [pc, #348]	; (8002694 <HAL_GPIO_Init+0x328>)
 8002536:	4293      	cmp	r3, r2
 8002538:	d037      	beq.n	80025aa <HAL_GPIO_Init+0x23e>
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	4a56      	ldr	r2, [pc, #344]	; (8002698 <HAL_GPIO_Init+0x32c>)
 800253e:	4293      	cmp	r3, r2
 8002540:	d031      	beq.n	80025a6 <HAL_GPIO_Init+0x23a>
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	4a55      	ldr	r2, [pc, #340]	; (800269c <HAL_GPIO_Init+0x330>)
 8002546:	4293      	cmp	r3, r2
 8002548:	d02b      	beq.n	80025a2 <HAL_GPIO_Init+0x236>
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	4a54      	ldr	r2, [pc, #336]	; (80026a0 <HAL_GPIO_Init+0x334>)
 800254e:	4293      	cmp	r3, r2
 8002550:	d025      	beq.n	800259e <HAL_GPIO_Init+0x232>
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	4a53      	ldr	r2, [pc, #332]	; (80026a4 <HAL_GPIO_Init+0x338>)
 8002556:	4293      	cmp	r3, r2
 8002558:	d01f      	beq.n	800259a <HAL_GPIO_Init+0x22e>
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	4a52      	ldr	r2, [pc, #328]	; (80026a8 <HAL_GPIO_Init+0x33c>)
 800255e:	4293      	cmp	r3, r2
 8002560:	d019      	beq.n	8002596 <HAL_GPIO_Init+0x22a>
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	4a51      	ldr	r2, [pc, #324]	; (80026ac <HAL_GPIO_Init+0x340>)
 8002566:	4293      	cmp	r3, r2
 8002568:	d013      	beq.n	8002592 <HAL_GPIO_Init+0x226>
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	4a50      	ldr	r2, [pc, #320]	; (80026b0 <HAL_GPIO_Init+0x344>)
 800256e:	4293      	cmp	r3, r2
 8002570:	d00d      	beq.n	800258e <HAL_GPIO_Init+0x222>
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	4a4f      	ldr	r2, [pc, #316]	; (80026b4 <HAL_GPIO_Init+0x348>)
 8002576:	4293      	cmp	r3, r2
 8002578:	d007      	beq.n	800258a <HAL_GPIO_Init+0x21e>
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	4a4e      	ldr	r2, [pc, #312]	; (80026b8 <HAL_GPIO_Init+0x34c>)
 800257e:	4293      	cmp	r3, r2
 8002580:	d101      	bne.n	8002586 <HAL_GPIO_Init+0x21a>
 8002582:	2309      	movs	r3, #9
 8002584:	e012      	b.n	80025ac <HAL_GPIO_Init+0x240>
 8002586:	230a      	movs	r3, #10
 8002588:	e010      	b.n	80025ac <HAL_GPIO_Init+0x240>
 800258a:	2308      	movs	r3, #8
 800258c:	e00e      	b.n	80025ac <HAL_GPIO_Init+0x240>
 800258e:	2307      	movs	r3, #7
 8002590:	e00c      	b.n	80025ac <HAL_GPIO_Init+0x240>
 8002592:	2306      	movs	r3, #6
 8002594:	e00a      	b.n	80025ac <HAL_GPIO_Init+0x240>
 8002596:	2305      	movs	r3, #5
 8002598:	e008      	b.n	80025ac <HAL_GPIO_Init+0x240>
 800259a:	2304      	movs	r3, #4
 800259c:	e006      	b.n	80025ac <HAL_GPIO_Init+0x240>
 800259e:	2303      	movs	r3, #3
 80025a0:	e004      	b.n	80025ac <HAL_GPIO_Init+0x240>
 80025a2:	2302      	movs	r3, #2
 80025a4:	e002      	b.n	80025ac <HAL_GPIO_Init+0x240>
 80025a6:	2301      	movs	r3, #1
 80025a8:	e000      	b.n	80025ac <HAL_GPIO_Init+0x240>
 80025aa:	2300      	movs	r3, #0
 80025ac:	69fa      	ldr	r2, [r7, #28]
 80025ae:	f002 0203 	and.w	r2, r2, #3
 80025b2:	0092      	lsls	r2, r2, #2
 80025b4:	4093      	lsls	r3, r2
 80025b6:	69ba      	ldr	r2, [r7, #24]
 80025b8:	4313      	orrs	r3, r2
 80025ba:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80025bc:	4934      	ldr	r1, [pc, #208]	; (8002690 <HAL_GPIO_Init+0x324>)
 80025be:	69fb      	ldr	r3, [r7, #28]
 80025c0:	089b      	lsrs	r3, r3, #2
 80025c2:	3302      	adds	r3, #2
 80025c4:	69ba      	ldr	r2, [r7, #24]
 80025c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80025ca:	4b3c      	ldr	r3, [pc, #240]	; (80026bc <HAL_GPIO_Init+0x350>)
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80025d0:	693b      	ldr	r3, [r7, #16]
 80025d2:	43db      	mvns	r3, r3
 80025d4:	69ba      	ldr	r2, [r7, #24]
 80025d6:	4013      	ands	r3, r2
 80025d8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80025da:	683b      	ldr	r3, [r7, #0]
 80025dc:	685b      	ldr	r3, [r3, #4]
 80025de:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d003      	beq.n	80025ee <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80025e6:	69ba      	ldr	r2, [r7, #24]
 80025e8:	693b      	ldr	r3, [r7, #16]
 80025ea:	4313      	orrs	r3, r2
 80025ec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80025ee:	4a33      	ldr	r2, [pc, #204]	; (80026bc <HAL_GPIO_Init+0x350>)
 80025f0:	69bb      	ldr	r3, [r7, #24]
 80025f2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80025f4:	4b31      	ldr	r3, [pc, #196]	; (80026bc <HAL_GPIO_Init+0x350>)
 80025f6:	685b      	ldr	r3, [r3, #4]
 80025f8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80025fa:	693b      	ldr	r3, [r7, #16]
 80025fc:	43db      	mvns	r3, r3
 80025fe:	69ba      	ldr	r2, [r7, #24]
 8002600:	4013      	ands	r3, r2
 8002602:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002604:	683b      	ldr	r3, [r7, #0]
 8002606:	685b      	ldr	r3, [r3, #4]
 8002608:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800260c:	2b00      	cmp	r3, #0
 800260e:	d003      	beq.n	8002618 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002610:	69ba      	ldr	r2, [r7, #24]
 8002612:	693b      	ldr	r3, [r7, #16]
 8002614:	4313      	orrs	r3, r2
 8002616:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002618:	4a28      	ldr	r2, [pc, #160]	; (80026bc <HAL_GPIO_Init+0x350>)
 800261a:	69bb      	ldr	r3, [r7, #24]
 800261c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800261e:	4b27      	ldr	r3, [pc, #156]	; (80026bc <HAL_GPIO_Init+0x350>)
 8002620:	689b      	ldr	r3, [r3, #8]
 8002622:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002624:	693b      	ldr	r3, [r7, #16]
 8002626:	43db      	mvns	r3, r3
 8002628:	69ba      	ldr	r2, [r7, #24]
 800262a:	4013      	ands	r3, r2
 800262c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800262e:	683b      	ldr	r3, [r7, #0]
 8002630:	685b      	ldr	r3, [r3, #4]
 8002632:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002636:	2b00      	cmp	r3, #0
 8002638:	d003      	beq.n	8002642 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800263a:	69ba      	ldr	r2, [r7, #24]
 800263c:	693b      	ldr	r3, [r7, #16]
 800263e:	4313      	orrs	r3, r2
 8002640:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002642:	4a1e      	ldr	r2, [pc, #120]	; (80026bc <HAL_GPIO_Init+0x350>)
 8002644:	69bb      	ldr	r3, [r7, #24]
 8002646:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002648:	4b1c      	ldr	r3, [pc, #112]	; (80026bc <HAL_GPIO_Init+0x350>)
 800264a:	68db      	ldr	r3, [r3, #12]
 800264c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800264e:	693b      	ldr	r3, [r7, #16]
 8002650:	43db      	mvns	r3, r3
 8002652:	69ba      	ldr	r2, [r7, #24]
 8002654:	4013      	ands	r3, r2
 8002656:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002658:	683b      	ldr	r3, [r7, #0]
 800265a:	685b      	ldr	r3, [r3, #4]
 800265c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002660:	2b00      	cmp	r3, #0
 8002662:	d003      	beq.n	800266c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002664:	69ba      	ldr	r2, [r7, #24]
 8002666:	693b      	ldr	r3, [r7, #16]
 8002668:	4313      	orrs	r3, r2
 800266a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800266c:	4a13      	ldr	r2, [pc, #76]	; (80026bc <HAL_GPIO_Init+0x350>)
 800266e:	69bb      	ldr	r3, [r7, #24]
 8002670:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002672:	69fb      	ldr	r3, [r7, #28]
 8002674:	3301      	adds	r3, #1
 8002676:	61fb      	str	r3, [r7, #28]
 8002678:	69fb      	ldr	r3, [r7, #28]
 800267a:	2b0f      	cmp	r3, #15
 800267c:	f67f ae84 	bls.w	8002388 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002680:	bf00      	nop
 8002682:	3724      	adds	r7, #36	; 0x24
 8002684:	46bd      	mov	sp, r7
 8002686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800268a:	4770      	bx	lr
 800268c:	40023800 	.word	0x40023800
 8002690:	40013800 	.word	0x40013800
 8002694:	40020000 	.word	0x40020000
 8002698:	40020400 	.word	0x40020400
 800269c:	40020800 	.word	0x40020800
 80026a0:	40020c00 	.word	0x40020c00
 80026a4:	40021000 	.word	0x40021000
 80026a8:	40021400 	.word	0x40021400
 80026ac:	40021800 	.word	0x40021800
 80026b0:	40021c00 	.word	0x40021c00
 80026b4:	40022000 	.word	0x40022000
 80026b8:	40022400 	.word	0x40022400
 80026bc:	40013c00 	.word	0x40013c00

080026c0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80026c0:	b480      	push	{r7}
 80026c2:	b083      	sub	sp, #12
 80026c4:	af00      	add	r7, sp, #0
 80026c6:	6078      	str	r0, [r7, #4]
 80026c8:	460b      	mov	r3, r1
 80026ca:	807b      	strh	r3, [r7, #2]
 80026cc:	4613      	mov	r3, r2
 80026ce:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80026d0:	787b      	ldrb	r3, [r7, #1]
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d003      	beq.n	80026de <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80026d6:	887a      	ldrh	r2, [r7, #2]
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80026dc:	e003      	b.n	80026e6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80026de:	887b      	ldrh	r3, [r7, #2]
 80026e0:	041a      	lsls	r2, r3, #16
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	619a      	str	r2, [r3, #24]
}
 80026e6:	bf00      	nop
 80026e8:	370c      	adds	r7, #12
 80026ea:	46bd      	mov	sp, r7
 80026ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f0:	4770      	bx	lr

080026f2 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80026f2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80026f4:	b08f      	sub	sp, #60	; 0x3c
 80026f6:	af0a      	add	r7, sp, #40	; 0x28
 80026f8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d101      	bne.n	8002704 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002700:	2301      	movs	r3, #1
 8002702:	e10f      	b.n	8002924 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8002710:	b2db      	uxtb	r3, r3
 8002712:	2b00      	cmp	r3, #0
 8002714:	d106      	bne.n	8002724 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	2200      	movs	r2, #0
 800271a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800271e:	6878      	ldr	r0, [r7, #4]
 8002720:	f014 fee8 	bl	80174f4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	2203      	movs	r2, #3
 8002728:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800272c:	68bb      	ldr	r3, [r7, #8]
 800272e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002730:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002734:	2b00      	cmp	r3, #0
 8002736:	d102      	bne.n	800273e <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	2200      	movs	r2, #0
 800273c:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	4618      	mov	r0, r3
 8002744:	f002 fe7b 	bl	800543e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	603b      	str	r3, [r7, #0]
 800274e:	687e      	ldr	r6, [r7, #4]
 8002750:	466d      	mov	r5, sp
 8002752:	f106 0410 	add.w	r4, r6, #16
 8002756:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002758:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800275a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800275c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800275e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002762:	e885 0003 	stmia.w	r5, {r0, r1}
 8002766:	1d33      	adds	r3, r6, #4
 8002768:	cb0e      	ldmia	r3, {r1, r2, r3}
 800276a:	6838      	ldr	r0, [r7, #0]
 800276c:	f002 fd52 	bl	8005214 <USB_CoreInit>
 8002770:	4603      	mov	r3, r0
 8002772:	2b00      	cmp	r3, #0
 8002774:	d005      	beq.n	8002782 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	2202      	movs	r2, #2
 800277a:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800277e:	2301      	movs	r3, #1
 8002780:	e0d0      	b.n	8002924 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	2100      	movs	r1, #0
 8002788:	4618      	mov	r0, r3
 800278a:	f002 fe69 	bl	8005460 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800278e:	2300      	movs	r3, #0
 8002790:	73fb      	strb	r3, [r7, #15]
 8002792:	e04a      	b.n	800282a <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002794:	7bfa      	ldrb	r2, [r7, #15]
 8002796:	6879      	ldr	r1, [r7, #4]
 8002798:	4613      	mov	r3, r2
 800279a:	00db      	lsls	r3, r3, #3
 800279c:	1a9b      	subs	r3, r3, r2
 800279e:	009b      	lsls	r3, r3, #2
 80027a0:	440b      	add	r3, r1
 80027a2:	333d      	adds	r3, #61	; 0x3d
 80027a4:	2201      	movs	r2, #1
 80027a6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80027a8:	7bfa      	ldrb	r2, [r7, #15]
 80027aa:	6879      	ldr	r1, [r7, #4]
 80027ac:	4613      	mov	r3, r2
 80027ae:	00db      	lsls	r3, r3, #3
 80027b0:	1a9b      	subs	r3, r3, r2
 80027b2:	009b      	lsls	r3, r3, #2
 80027b4:	440b      	add	r3, r1
 80027b6:	333c      	adds	r3, #60	; 0x3c
 80027b8:	7bfa      	ldrb	r2, [r7, #15]
 80027ba:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80027bc:	7bfa      	ldrb	r2, [r7, #15]
 80027be:	7bfb      	ldrb	r3, [r7, #15]
 80027c0:	b298      	uxth	r0, r3
 80027c2:	6879      	ldr	r1, [r7, #4]
 80027c4:	4613      	mov	r3, r2
 80027c6:	00db      	lsls	r3, r3, #3
 80027c8:	1a9b      	subs	r3, r3, r2
 80027ca:	009b      	lsls	r3, r3, #2
 80027cc:	440b      	add	r3, r1
 80027ce:	3342      	adds	r3, #66	; 0x42
 80027d0:	4602      	mov	r2, r0
 80027d2:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80027d4:	7bfa      	ldrb	r2, [r7, #15]
 80027d6:	6879      	ldr	r1, [r7, #4]
 80027d8:	4613      	mov	r3, r2
 80027da:	00db      	lsls	r3, r3, #3
 80027dc:	1a9b      	subs	r3, r3, r2
 80027de:	009b      	lsls	r3, r3, #2
 80027e0:	440b      	add	r3, r1
 80027e2:	333f      	adds	r3, #63	; 0x3f
 80027e4:	2200      	movs	r2, #0
 80027e6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80027e8:	7bfa      	ldrb	r2, [r7, #15]
 80027ea:	6879      	ldr	r1, [r7, #4]
 80027ec:	4613      	mov	r3, r2
 80027ee:	00db      	lsls	r3, r3, #3
 80027f0:	1a9b      	subs	r3, r3, r2
 80027f2:	009b      	lsls	r3, r3, #2
 80027f4:	440b      	add	r3, r1
 80027f6:	3344      	adds	r3, #68	; 0x44
 80027f8:	2200      	movs	r2, #0
 80027fa:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80027fc:	7bfa      	ldrb	r2, [r7, #15]
 80027fe:	6879      	ldr	r1, [r7, #4]
 8002800:	4613      	mov	r3, r2
 8002802:	00db      	lsls	r3, r3, #3
 8002804:	1a9b      	subs	r3, r3, r2
 8002806:	009b      	lsls	r3, r3, #2
 8002808:	440b      	add	r3, r1
 800280a:	3348      	adds	r3, #72	; 0x48
 800280c:	2200      	movs	r2, #0
 800280e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002810:	7bfa      	ldrb	r2, [r7, #15]
 8002812:	6879      	ldr	r1, [r7, #4]
 8002814:	4613      	mov	r3, r2
 8002816:	00db      	lsls	r3, r3, #3
 8002818:	1a9b      	subs	r3, r3, r2
 800281a:	009b      	lsls	r3, r3, #2
 800281c:	440b      	add	r3, r1
 800281e:	3350      	adds	r3, #80	; 0x50
 8002820:	2200      	movs	r2, #0
 8002822:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002824:	7bfb      	ldrb	r3, [r7, #15]
 8002826:	3301      	adds	r3, #1
 8002828:	73fb      	strb	r3, [r7, #15]
 800282a:	7bfa      	ldrb	r2, [r7, #15]
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	685b      	ldr	r3, [r3, #4]
 8002830:	429a      	cmp	r2, r3
 8002832:	d3af      	bcc.n	8002794 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002834:	2300      	movs	r3, #0
 8002836:	73fb      	strb	r3, [r7, #15]
 8002838:	e044      	b.n	80028c4 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800283a:	7bfa      	ldrb	r2, [r7, #15]
 800283c:	6879      	ldr	r1, [r7, #4]
 800283e:	4613      	mov	r3, r2
 8002840:	00db      	lsls	r3, r3, #3
 8002842:	1a9b      	subs	r3, r3, r2
 8002844:	009b      	lsls	r3, r3, #2
 8002846:	440b      	add	r3, r1
 8002848:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 800284c:	2200      	movs	r2, #0
 800284e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002850:	7bfa      	ldrb	r2, [r7, #15]
 8002852:	6879      	ldr	r1, [r7, #4]
 8002854:	4613      	mov	r3, r2
 8002856:	00db      	lsls	r3, r3, #3
 8002858:	1a9b      	subs	r3, r3, r2
 800285a:	009b      	lsls	r3, r3, #2
 800285c:	440b      	add	r3, r1
 800285e:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8002862:	7bfa      	ldrb	r2, [r7, #15]
 8002864:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002866:	7bfa      	ldrb	r2, [r7, #15]
 8002868:	6879      	ldr	r1, [r7, #4]
 800286a:	4613      	mov	r3, r2
 800286c:	00db      	lsls	r3, r3, #3
 800286e:	1a9b      	subs	r3, r3, r2
 8002870:	009b      	lsls	r3, r3, #2
 8002872:	440b      	add	r3, r1
 8002874:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8002878:	2200      	movs	r2, #0
 800287a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800287c:	7bfa      	ldrb	r2, [r7, #15]
 800287e:	6879      	ldr	r1, [r7, #4]
 8002880:	4613      	mov	r3, r2
 8002882:	00db      	lsls	r3, r3, #3
 8002884:	1a9b      	subs	r3, r3, r2
 8002886:	009b      	lsls	r3, r3, #2
 8002888:	440b      	add	r3, r1
 800288a:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800288e:	2200      	movs	r2, #0
 8002890:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002892:	7bfa      	ldrb	r2, [r7, #15]
 8002894:	6879      	ldr	r1, [r7, #4]
 8002896:	4613      	mov	r3, r2
 8002898:	00db      	lsls	r3, r3, #3
 800289a:	1a9b      	subs	r3, r3, r2
 800289c:	009b      	lsls	r3, r3, #2
 800289e:	440b      	add	r3, r1
 80028a0:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80028a4:	2200      	movs	r2, #0
 80028a6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80028a8:	7bfa      	ldrb	r2, [r7, #15]
 80028aa:	6879      	ldr	r1, [r7, #4]
 80028ac:	4613      	mov	r3, r2
 80028ae:	00db      	lsls	r3, r3, #3
 80028b0:	1a9b      	subs	r3, r3, r2
 80028b2:	009b      	lsls	r3, r3, #2
 80028b4:	440b      	add	r3, r1
 80028b6:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80028ba:	2200      	movs	r2, #0
 80028bc:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80028be:	7bfb      	ldrb	r3, [r7, #15]
 80028c0:	3301      	adds	r3, #1
 80028c2:	73fb      	strb	r3, [r7, #15]
 80028c4:	7bfa      	ldrb	r2, [r7, #15]
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	685b      	ldr	r3, [r3, #4]
 80028ca:	429a      	cmp	r2, r3
 80028cc:	d3b5      	bcc.n	800283a <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	603b      	str	r3, [r7, #0]
 80028d4:	687e      	ldr	r6, [r7, #4]
 80028d6:	466d      	mov	r5, sp
 80028d8:	f106 0410 	add.w	r4, r6, #16
 80028dc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80028de:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80028e0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80028e2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80028e4:	e894 0003 	ldmia.w	r4, {r0, r1}
 80028e8:	e885 0003 	stmia.w	r5, {r0, r1}
 80028ec:	1d33      	adds	r3, r6, #4
 80028ee:	cb0e      	ldmia	r3, {r1, r2, r3}
 80028f0:	6838      	ldr	r0, [r7, #0]
 80028f2:	f002 fddf 	bl	80054b4 <USB_DevInit>
 80028f6:	4603      	mov	r3, r0
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d005      	beq.n	8002908 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	2202      	movs	r2, #2
 8002900:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8002904:	2301      	movs	r3, #1
 8002906:	e00d      	b.n	8002924 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	2200      	movs	r2, #0
 800290c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	2201      	movs	r2, #1
 8002914:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
  #endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	4618      	mov	r0, r3
 800291e:	f003 fdd4 	bl	80064ca <USB_DevDisconnect>

  return HAL_OK;
 8002922:	2300      	movs	r3, #0
}
 8002924:	4618      	mov	r0, r3
 8002926:	3714      	adds	r7, #20
 8002928:	46bd      	mov	sp, r7
 800292a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800292c <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800292c:	b580      	push	{r7, lr}
 800292e:	b084      	sub	sp, #16
 8002930:	af00      	add	r7, sp, #0
 8002932:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */

  __HAL_LOCK(hpcd);
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002940:	2b01      	cmp	r3, #1
 8002942:	d101      	bne.n	8002948 <HAL_PCD_Start+0x1c>
 8002944:	2302      	movs	r3, #2
 8002946:	e020      	b.n	800298a <HAL_PCD_Start+0x5e>
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	2201      	movs	r2, #1
 800294c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002954:	2b01      	cmp	r3, #1
 8002956:	d109      	bne.n	800296c <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800295c:	2b01      	cmp	r3, #1
 800295e:	d005      	beq.n	800296c <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002964:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */
  (void)USB_DevConnect(hpcd->Instance);
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	4618      	mov	r0, r3
 8002972:	f003 fd92 	bl	800649a <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	4618      	mov	r0, r3
 800297c:	f002 fd4e 	bl	800541c <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	2200      	movs	r2, #0
 8002984:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8002988:	2300      	movs	r3, #0
}
 800298a:	4618      	mov	r0, r3
 800298c:	3710      	adds	r7, #16
 800298e:	46bd      	mov	sp, r7
 8002990:	bd80      	pop	{r7, pc}

08002992 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002992:	b590      	push	{r4, r7, lr}
 8002994:	b08d      	sub	sp, #52	; 0x34
 8002996:	af00      	add	r7, sp, #0
 8002998:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80029a0:	6a3b      	ldr	r3, [r7, #32]
 80029a2:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	4618      	mov	r0, r3
 80029aa:	f003 fe39 	bl	8006620 <USB_GetMode>
 80029ae:	4603      	mov	r3, r0
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	f040 838e 	bne.w	80030d2 <HAL_PCD_IRQHandler+0x740>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	4618      	mov	r0, r3
 80029bc:	f003 fd9d 	bl	80064fa <USB_ReadInterrupts>
 80029c0:	4603      	mov	r3, r0
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	f000 8384 	beq.w	80030d0 <HAL_PCD_IRQHandler+0x73e>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	4618      	mov	r0, r3
 80029ce:	f003 fd94 	bl	80064fa <USB_ReadInterrupts>
 80029d2:	4603      	mov	r3, r0
 80029d4:	f003 0302 	and.w	r3, r3, #2
 80029d8:	2b02      	cmp	r3, #2
 80029da:	d107      	bne.n	80029ec <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	695a      	ldr	r2, [r3, #20]
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	f002 0202 	and.w	r2, r2, #2
 80029ea:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	4618      	mov	r0, r3
 80029f2:	f003 fd82 	bl	80064fa <USB_ReadInterrupts>
 80029f6:	4603      	mov	r3, r0
 80029f8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80029fc:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002a00:	d17b      	bne.n	8002afa <HAL_PCD_IRQHandler+0x168>
    {
      epnum = 0U;
 8002a02:	2300      	movs	r3, #0
 8002a04:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	4618      	mov	r0, r3
 8002a0c:	f003 fd88 	bl	8006520 <USB_ReadDevAllOutEpInterrupt>
 8002a10:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8002a12:	e06f      	b.n	8002af4 <HAL_PCD_IRQHandler+0x162>
      {
        if ((ep_intr & 0x1U) != 0U)
 8002a14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a16:	f003 0301 	and.w	r3, r3, #1
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d064      	beq.n	8002ae8 <HAL_PCD_IRQHandler+0x156>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a24:	b2d2      	uxtb	r2, r2
 8002a26:	4611      	mov	r1, r2
 8002a28:	4618      	mov	r0, r3
 8002a2a:	f003 fdad 	bl	8006588 <USB_ReadDevOutEPInterrupt>
 8002a2e:	61b8      	str	r0, [r7, #24]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8002a30:	69bb      	ldr	r3, [r7, #24]
 8002a32:	f003 0301 	and.w	r3, r3, #1
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d00c      	beq.n	8002a54 <HAL_PCD_IRQHandler+0xc2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8002a3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a3c:	015a      	lsls	r2, r3, #5
 8002a3e:	69fb      	ldr	r3, [r7, #28]
 8002a40:	4413      	add	r3, r2
 8002a42:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002a46:	461a      	mov	r2, r3
 8002a48:	2301      	movs	r3, #1
 8002a4a:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8002a4c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002a4e:	6878      	ldr	r0, [r7, #4]
 8002a50:	f000 fe0e 	bl	8003670 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8002a54:	69bb      	ldr	r3, [r7, #24]
 8002a56:	f003 0308 	and.w	r3, r3, #8
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d00c      	beq.n	8002a78 <HAL_PCD_IRQHandler+0xe6>
          {
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8002a5e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002a60:	6878      	ldr	r0, [r7, #4]
 8002a62:	f000 ff0d 	bl	8003880 <PCD_EP_OutSetupPacket_int>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8002a66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a68:	015a      	lsls	r2, r3, #5
 8002a6a:	69fb      	ldr	r3, [r7, #28]
 8002a6c:	4413      	add	r3, r2
 8002a6e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002a72:	461a      	mov	r2, r3
 8002a74:	2308      	movs	r3, #8
 8002a76:	6093      	str	r3, [r2, #8]
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8002a78:	69bb      	ldr	r3, [r7, #24]
 8002a7a:	f003 0310 	and.w	r3, r3, #16
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d008      	beq.n	8002a94 <HAL_PCD_IRQHandler+0x102>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8002a82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a84:	015a      	lsls	r2, r3, #5
 8002a86:	69fb      	ldr	r3, [r7, #28]
 8002a88:	4413      	add	r3, r2
 8002a8a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002a8e:	461a      	mov	r2, r3
 8002a90:	2310      	movs	r3, #16
 8002a92:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002a94:	69bb      	ldr	r3, [r7, #24]
 8002a96:	f003 0320 	and.w	r3, r3, #32
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d015      	beq.n	8002aca <HAL_PCD_IRQHandler+0x138>
          {
            if (hpcd->Init.dma_enable == 1U)
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	691b      	ldr	r3, [r3, #16]
 8002aa2:	2b01      	cmp	r3, #1
 8002aa4:	d108      	bne.n	8002ab8 <HAL_PCD_IRQHandler+0x126>
            {
              (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	6818      	ldr	r0, [r3, #0]
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002ab0:	461a      	mov	r2, r3
 8002ab2:	2101      	movs	r1, #1
 8002ab4:	f003 fdf8 	bl	80066a8 <USB_EP0_OutStart>
            }
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002ab8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002aba:	015a      	lsls	r2, r3, #5
 8002abc:	69fb      	ldr	r3, [r7, #28]
 8002abe:	4413      	add	r3, r2
 8002ac0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002ac4:	461a      	mov	r2, r3
 8002ac6:	2320      	movs	r3, #32
 8002ac8:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8002aca:	69bb      	ldr	r3, [r7, #24]
 8002acc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d009      	beq.n	8002ae8 <HAL_PCD_IRQHandler+0x156>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8002ad4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ad6:	015a      	lsls	r2, r3, #5
 8002ad8:	69fb      	ldr	r3, [r7, #28]
 8002ada:	4413      	add	r3, r2
 8002adc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002ae0:	461a      	mov	r2, r3
 8002ae2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002ae6:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8002ae8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002aea:	3301      	adds	r3, #1
 8002aec:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002aee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002af0:	085b      	lsrs	r3, r3, #1
 8002af2:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002af4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d18c      	bne.n	8002a14 <HAL_PCD_IRQHandler+0x82>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	4618      	mov	r0, r3
 8002b00:	f003 fcfb 	bl	80064fa <USB_ReadInterrupts>
 8002b04:	4603      	mov	r3, r0
 8002b06:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002b0a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002b0e:	f040 80c4 	bne.w	8002c9a <HAL_PCD_IRQHandler+0x308>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	4618      	mov	r0, r3
 8002b18:	f003 fd1c 	bl	8006554 <USB_ReadDevAllInEpInterrupt>
 8002b1c:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8002b1e:	2300      	movs	r3, #0
 8002b20:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8002b22:	e0b6      	b.n	8002c92 <HAL_PCD_IRQHandler+0x300>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8002b24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b26:	f003 0301 	and.w	r3, r3, #1
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	f000 80ab 	beq.w	8002c86 <HAL_PCD_IRQHandler+0x2f4>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b36:	b2d2      	uxtb	r2, r2
 8002b38:	4611      	mov	r1, r2
 8002b3a:	4618      	mov	r0, r3
 8002b3c:	f003 fd42 	bl	80065c4 <USB_ReadDevInEPInterrupt>
 8002b40:	61b8      	str	r0, [r7, #24]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8002b42:	69bb      	ldr	r3, [r7, #24]
 8002b44:	f003 0301 	and.w	r3, r3, #1
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d05b      	beq.n	8002c04 <HAL_PCD_IRQHandler+0x272>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002b4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b4e:	f003 030f 	and.w	r3, r3, #15
 8002b52:	2201      	movs	r2, #1
 8002b54:	fa02 f303 	lsl.w	r3, r2, r3
 8002b58:	617b      	str	r3, [r7, #20]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002b5a:	69fb      	ldr	r3, [r7, #28]
 8002b5c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002b60:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002b62:	697b      	ldr	r3, [r7, #20]
 8002b64:	43db      	mvns	r3, r3
 8002b66:	69f9      	ldr	r1, [r7, #28]
 8002b68:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002b6c:	4013      	ands	r3, r2
 8002b6e:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8002b70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b72:	015a      	lsls	r2, r3, #5
 8002b74:	69fb      	ldr	r3, [r7, #28]
 8002b76:	4413      	add	r3, r2
 8002b78:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002b7c:	461a      	mov	r2, r3
 8002b7e:	2301      	movs	r3, #1
 8002b80:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	691b      	ldr	r3, [r3, #16]
 8002b86:	2b01      	cmp	r3, #1
 8002b88:	d11b      	bne.n	8002bc2 <HAL_PCD_IRQHandler+0x230>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8002b8a:	6879      	ldr	r1, [r7, #4]
 8002b8c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b8e:	4613      	mov	r3, r2
 8002b90:	00db      	lsls	r3, r3, #3
 8002b92:	1a9b      	subs	r3, r3, r2
 8002b94:	009b      	lsls	r3, r3, #2
 8002b96:	440b      	add	r3, r1
 8002b98:	3348      	adds	r3, #72	; 0x48
 8002b9a:	6819      	ldr	r1, [r3, #0]
 8002b9c:	6878      	ldr	r0, [r7, #4]
 8002b9e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ba0:	4613      	mov	r3, r2
 8002ba2:	00db      	lsls	r3, r3, #3
 8002ba4:	1a9b      	subs	r3, r3, r2
 8002ba6:	009b      	lsls	r3, r3, #2
 8002ba8:	4403      	add	r3, r0
 8002baa:	3344      	adds	r3, #68	; 0x44
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	4419      	add	r1, r3
 8002bb0:	6878      	ldr	r0, [r7, #4]
 8002bb2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002bb4:	4613      	mov	r3, r2
 8002bb6:	00db      	lsls	r3, r3, #3
 8002bb8:	1a9b      	subs	r3, r3, r2
 8002bba:	009b      	lsls	r3, r3, #2
 8002bbc:	4403      	add	r3, r0
 8002bbe:	3348      	adds	r3, #72	; 0x48
 8002bc0:	6019      	str	r1, [r3, #0]
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8002bc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bc4:	b2db      	uxtb	r3, r3
 8002bc6:	4619      	mov	r1, r3
 8002bc8:	6878      	ldr	r0, [r7, #4]
 8002bca:	f014 fd22 	bl	8017612 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

            if (hpcd->Init.dma_enable == 1U)
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	691b      	ldr	r3, [r3, #16]
 8002bd2:	2b01      	cmp	r3, #1
 8002bd4:	d116      	bne.n	8002c04 <HAL_PCD_IRQHandler+0x272>
            {
              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8002bd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d113      	bne.n	8002c04 <HAL_PCD_IRQHandler+0x272>
 8002bdc:	6879      	ldr	r1, [r7, #4]
 8002bde:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002be0:	4613      	mov	r3, r2
 8002be2:	00db      	lsls	r3, r3, #3
 8002be4:	1a9b      	subs	r3, r3, r2
 8002be6:	009b      	lsls	r3, r3, #2
 8002be8:	440b      	add	r3, r1
 8002bea:	3350      	adds	r3, #80	; 0x50
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d108      	bne.n	8002c04 <HAL_PCD_IRQHandler+0x272>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	6818      	ldr	r0, [r3, #0]
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002bfc:	461a      	mov	r2, r3
 8002bfe:	2101      	movs	r1, #1
 8002c00:	f003 fd52 	bl	80066a8 <USB_EP0_OutStart>
              }
            }
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8002c04:	69bb      	ldr	r3, [r7, #24]
 8002c06:	f003 0308 	and.w	r3, r3, #8
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d008      	beq.n	8002c20 <HAL_PCD_IRQHandler+0x28e>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8002c0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c10:	015a      	lsls	r2, r3, #5
 8002c12:	69fb      	ldr	r3, [r7, #28]
 8002c14:	4413      	add	r3, r2
 8002c16:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002c1a:	461a      	mov	r2, r3
 8002c1c:	2308      	movs	r3, #8
 8002c1e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8002c20:	69bb      	ldr	r3, [r7, #24]
 8002c22:	f003 0310 	and.w	r3, r3, #16
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d008      	beq.n	8002c3c <HAL_PCD_IRQHandler+0x2aa>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8002c2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c2c:	015a      	lsls	r2, r3, #5
 8002c2e:	69fb      	ldr	r3, [r7, #28]
 8002c30:	4413      	add	r3, r2
 8002c32:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002c36:	461a      	mov	r2, r3
 8002c38:	2310      	movs	r3, #16
 8002c3a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8002c3c:	69bb      	ldr	r3, [r7, #24]
 8002c3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d008      	beq.n	8002c58 <HAL_PCD_IRQHandler+0x2c6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8002c46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c48:	015a      	lsls	r2, r3, #5
 8002c4a:	69fb      	ldr	r3, [r7, #28]
 8002c4c:	4413      	add	r3, r2
 8002c4e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002c52:	461a      	mov	r2, r3
 8002c54:	2340      	movs	r3, #64	; 0x40
 8002c56:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8002c58:	69bb      	ldr	r3, [r7, #24]
 8002c5a:	f003 0302 	and.w	r3, r3, #2
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d008      	beq.n	8002c74 <HAL_PCD_IRQHandler+0x2e2>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8002c62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c64:	015a      	lsls	r2, r3, #5
 8002c66:	69fb      	ldr	r3, [r7, #28]
 8002c68:	4413      	add	r3, r2
 8002c6a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002c6e:	461a      	mov	r2, r3
 8002c70:	2302      	movs	r3, #2
 8002c72:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8002c74:	69bb      	ldr	r3, [r7, #24]
 8002c76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d003      	beq.n	8002c86 <HAL_PCD_IRQHandler+0x2f4>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8002c7e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002c80:	6878      	ldr	r0, [r7, #4]
 8002c82:	f000 fc67 	bl	8003554 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8002c86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c88:	3301      	adds	r3, #1
 8002c8a:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002c8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c8e:	085b      	lsrs	r3, r3, #1
 8002c90:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002c92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	f47f af45 	bne.w	8002b24 <HAL_PCD_IRQHandler+0x192>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	4618      	mov	r0, r3
 8002ca0:	f003 fc2b 	bl	80064fa <USB_ReadInterrupts>
 8002ca4:	4603      	mov	r3, r0
 8002ca6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002caa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002cae:	d122      	bne.n	8002cf6 <HAL_PCD_IRQHandler+0x364>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002cb0:	69fb      	ldr	r3, [r7, #28]
 8002cb2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002cb6:	685b      	ldr	r3, [r3, #4]
 8002cb8:	69fa      	ldr	r2, [r7, #28]
 8002cba:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002cbe:	f023 0301 	bic.w	r3, r3, #1
 8002cc2:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8002cca:	2b01      	cmp	r3, #1
 8002ccc:	d108      	bne.n	8002ce0 <HAL_PCD_IRQHandler+0x34e>
      {
        hpcd->LPM_State = LPM_L0;
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	2200      	movs	r2, #0
 8002cd2:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8002cd6:	2100      	movs	r1, #0
 8002cd8:	6878      	ldr	r0, [r7, #4]
 8002cda:	f000 fe89 	bl	80039f0 <HAL_PCDEx_LPM_Callback>
 8002cde:	e002      	b.n	8002ce6 <HAL_PCD_IRQHandler+0x354>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8002ce0:	6878      	ldr	r0, [r7, #4]
 8002ce2:	f014 fd0d 	bl	8017700 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	695a      	ldr	r2, [r3, #20]
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8002cf4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	4618      	mov	r0, r3
 8002cfc:	f003 fbfd 	bl	80064fa <USB_ReadInterrupts>
 8002d00:	4603      	mov	r3, r0
 8002d02:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002d06:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002d0a:	d112      	bne.n	8002d32 <HAL_PCD_IRQHandler+0x3a0>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8002d0c:	69fb      	ldr	r3, [r7, #28]
 8002d0e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002d12:	689b      	ldr	r3, [r3, #8]
 8002d14:	f003 0301 	and.w	r3, r3, #1
 8002d18:	2b01      	cmp	r3, #1
 8002d1a:	d102      	bne.n	8002d22 <HAL_PCD_IRQHandler+0x390>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002d1c:	6878      	ldr	r0, [r7, #4]
 8002d1e:	f014 fcc9 	bl	80176b4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	695a      	ldr	r2, [r3, #20]
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8002d30:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    #endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	4618      	mov	r0, r3
 8002d38:	f003 fbdf 	bl	80064fa <USB_ReadInterrupts>
 8002d3c:	4603      	mov	r3, r0
 8002d3e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002d42:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002d46:	f040 80a7 	bne.w	8002e98 <HAL_PCD_IRQHandler+0x506>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002d4a:	69fb      	ldr	r3, [r7, #28]
 8002d4c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002d50:	685b      	ldr	r3, [r3, #4]
 8002d52:	69fa      	ldr	r2, [r7, #28]
 8002d54:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002d58:	f023 0301 	bic.w	r3, r3, #1
 8002d5c:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	2110      	movs	r1, #16
 8002d64:	4618      	mov	r0, r3
 8002d66:	f002 fd17 	bl	8005798 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002d6a:	2300      	movs	r3, #0
 8002d6c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002d6e:	e036      	b.n	8002dde <HAL_PCD_IRQHandler+0x44c>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8002d70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d72:	015a      	lsls	r2, r3, #5
 8002d74:	69fb      	ldr	r3, [r7, #28]
 8002d76:	4413      	add	r3, r2
 8002d78:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002d7c:	461a      	mov	r2, r3
 8002d7e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002d82:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8002d84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d86:	015a      	lsls	r2, r3, #5
 8002d88:	69fb      	ldr	r3, [r7, #28]
 8002d8a:	4413      	add	r3, r2
 8002d8c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002d94:	0151      	lsls	r1, r2, #5
 8002d96:	69fa      	ldr	r2, [r7, #28]
 8002d98:	440a      	add	r2, r1
 8002d9a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8002d9e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002da2:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8002da4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002da6:	015a      	lsls	r2, r3, #5
 8002da8:	69fb      	ldr	r3, [r7, #28]
 8002daa:	4413      	add	r3, r2
 8002dac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002db0:	461a      	mov	r2, r3
 8002db2:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002db6:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8002db8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002dba:	015a      	lsls	r2, r3, #5
 8002dbc:	69fb      	ldr	r3, [r7, #28]
 8002dbe:	4413      	add	r3, r2
 8002dc0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002dc8:	0151      	lsls	r1, r2, #5
 8002dca:	69fa      	ldr	r2, [r7, #28]
 8002dcc:	440a      	add	r2, r1
 8002dce:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002dd2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002dd6:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002dd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002dda:	3301      	adds	r3, #1
 8002ddc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	685b      	ldr	r3, [r3, #4]
 8002de2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002de4:	429a      	cmp	r2, r3
 8002de6:	d3c3      	bcc.n	8002d70 <HAL_PCD_IRQHandler+0x3de>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8002de8:	69fb      	ldr	r3, [r7, #28]
 8002dea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002dee:	69db      	ldr	r3, [r3, #28]
 8002df0:	69fa      	ldr	r2, [r7, #28]
 8002df2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002df6:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8002dfa:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d016      	beq.n	8002e32 <HAL_PCD_IRQHandler+0x4a0>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8002e04:	69fb      	ldr	r3, [r7, #28]
 8002e06:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002e0a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002e0e:	69fa      	ldr	r2, [r7, #28]
 8002e10:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002e14:	f043 030b 	orr.w	r3, r3, #11
 8002e18:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8002e1c:	69fb      	ldr	r3, [r7, #28]
 8002e1e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002e22:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e24:	69fa      	ldr	r2, [r7, #28]
 8002e26:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002e2a:	f043 030b 	orr.w	r3, r3, #11
 8002e2e:	6453      	str	r3, [r2, #68]	; 0x44
 8002e30:	e015      	b.n	8002e5e <HAL_PCD_IRQHandler+0x4cc>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8002e32:	69fb      	ldr	r3, [r7, #28]
 8002e34:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002e38:	695b      	ldr	r3, [r3, #20]
 8002e3a:	69fa      	ldr	r2, [r7, #28]
 8002e3c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002e40:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002e44:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8002e48:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8002e4a:	69fb      	ldr	r3, [r7, #28]
 8002e4c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002e50:	691b      	ldr	r3, [r3, #16]
 8002e52:	69fa      	ldr	r2, [r7, #28]
 8002e54:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002e58:	f043 030b 	orr.w	r3, r3, #11
 8002e5c:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8002e5e:	69fb      	ldr	r3, [r7, #28]
 8002e60:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	69fa      	ldr	r2, [r7, #28]
 8002e68:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002e6c:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8002e70:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	6818      	ldr	r0, [r3, #0]
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	691b      	ldr	r3, [r3, #16]
 8002e7a:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002e82:	461a      	mov	r2, r3
 8002e84:	f003 fc10 	bl	80066a8 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	695a      	ldr	r2, [r3, #20]
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8002e96:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	4618      	mov	r0, r3
 8002e9e:	f003 fb2c 	bl	80064fa <USB_ReadInterrupts>
 8002ea2:	4603      	mov	r3, r0
 8002ea4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002ea8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002eac:	d124      	bne.n	8002ef8 <HAL_PCD_IRQHandler+0x566>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	4618      	mov	r0, r3
 8002eb4:	f003 fbc2 	bl	800663c <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	4618      	mov	r0, r3
 8002ebe:	f002 fccc 	bl	800585a <USB_GetDevSpeed>
 8002ec2:	4603      	mov	r3, r0
 8002ec4:	461a      	mov	r2, r3
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681c      	ldr	r4, [r3, #0]
 8002ece:	f001 f997 	bl	8004200 <HAL_RCC_GetHCLKFreq>
 8002ed2:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002ed8:	b2db      	uxtb	r3, r3
 8002eda:	461a      	mov	r2, r3
 8002edc:	4620      	mov	r0, r4
 8002ede:	f002 f9fb 	bl	80052d8 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8002ee2:	6878      	ldr	r0, [r7, #4]
 8002ee4:	f014 fbbd 	bl	8017662 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	695a      	ldr	r2, [r3, #20]
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8002ef6:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	4618      	mov	r0, r3
 8002efe:	f003 fafc 	bl	80064fa <USB_ReadInterrupts>
 8002f02:	4603      	mov	r3, r0
 8002f04:	f003 0310 	and.w	r3, r3, #16
 8002f08:	2b10      	cmp	r3, #16
 8002f0a:	d161      	bne.n	8002fd0 <HAL_PCD_IRQHandler+0x63e>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	699a      	ldr	r2, [r3, #24]
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	f022 0210 	bic.w	r2, r2, #16
 8002f1a:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8002f1c:	6a3b      	ldr	r3, [r7, #32]
 8002f1e:	6a1b      	ldr	r3, [r3, #32]
 8002f20:	613b      	str	r3, [r7, #16]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8002f22:	693b      	ldr	r3, [r7, #16]
 8002f24:	f003 020f 	and.w	r2, r3, #15
 8002f28:	4613      	mov	r3, r2
 8002f2a:	00db      	lsls	r3, r3, #3
 8002f2c:	1a9b      	subs	r3, r3, r2
 8002f2e:	009b      	lsls	r3, r3, #2
 8002f30:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002f34:	687a      	ldr	r2, [r7, #4]
 8002f36:	4413      	add	r3, r2
 8002f38:	3304      	adds	r3, #4
 8002f3a:	60fb      	str	r3, [r7, #12]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8002f3c:	693b      	ldr	r3, [r7, #16]
 8002f3e:	0c5b      	lsrs	r3, r3, #17
 8002f40:	f003 030f 	and.w	r3, r3, #15
 8002f44:	2b02      	cmp	r3, #2
 8002f46:	d124      	bne.n	8002f92 <HAL_PCD_IRQHandler+0x600>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8002f48:	693a      	ldr	r2, [r7, #16]
 8002f4a:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8002f4e:	4013      	ands	r3, r2
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d035      	beq.n	8002fc0 <HAL_PCD_IRQHandler+0x62e>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8002f58:	693b      	ldr	r3, [r7, #16]
 8002f5a:	091b      	lsrs	r3, r3, #4
 8002f5c:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002f5e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002f62:	b29b      	uxth	r3, r3
 8002f64:	461a      	mov	r2, r3
 8002f66:	6a38      	ldr	r0, [r7, #32]
 8002f68:	f003 f974 	bl	8006254 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	68da      	ldr	r2, [r3, #12]
 8002f70:	693b      	ldr	r3, [r7, #16]
 8002f72:	091b      	lsrs	r3, r3, #4
 8002f74:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002f78:	441a      	add	r2, r3
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	699a      	ldr	r2, [r3, #24]
 8002f82:	693b      	ldr	r3, [r7, #16]
 8002f84:	091b      	lsrs	r3, r3, #4
 8002f86:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002f8a:	441a      	add	r2, r3
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	619a      	str	r2, [r3, #24]
 8002f90:	e016      	b.n	8002fc0 <HAL_PCD_IRQHandler+0x62e>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8002f92:	693b      	ldr	r3, [r7, #16]
 8002f94:	0c5b      	lsrs	r3, r3, #17
 8002f96:	f003 030f 	and.w	r3, r3, #15
 8002f9a:	2b06      	cmp	r3, #6
 8002f9c:	d110      	bne.n	8002fc0 <HAL_PCD_IRQHandler+0x62e>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002fa4:	2208      	movs	r2, #8
 8002fa6:	4619      	mov	r1, r3
 8002fa8:	6a38      	ldr	r0, [r7, #32]
 8002faa:	f003 f953 	bl	8006254 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	699a      	ldr	r2, [r3, #24]
 8002fb2:	693b      	ldr	r3, [r7, #16]
 8002fb4:	091b      	lsrs	r3, r3, #4
 8002fb6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002fba:	441a      	add	r2, r3
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	699a      	ldr	r2, [r3, #24]
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	f042 0210 	orr.w	r2, r2, #16
 8002fce:	619a      	str	r2, [r3, #24]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	4618      	mov	r0, r3
 8002fd6:	f003 fa90 	bl	80064fa <USB_ReadInterrupts>
 8002fda:	4603      	mov	r3, r0
 8002fdc:	f003 0308 	and.w	r3, r3, #8
 8002fe0:	2b08      	cmp	r3, #8
 8002fe2:	d10a      	bne.n	8002ffa <HAL_PCD_IRQHandler+0x668>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8002fe4:	6878      	ldr	r0, [r7, #4]
 8002fe6:	f014 fb2e 	bl	8017646 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	695a      	ldr	r2, [r3, #20]
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	f002 0208 	and.w	r2, r2, #8
 8002ff8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	4618      	mov	r0, r3
 8003000:	f003 fa7b 	bl	80064fa <USB_ReadInterrupts>
 8003004:	4603      	mov	r3, r0
 8003006:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800300a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800300e:	d10f      	bne.n	8003030 <HAL_PCD_IRQHandler+0x69e>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8003010:	2300      	movs	r3, #0
 8003012:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8003014:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003016:	b2db      	uxtb	r3, r3
 8003018:	4619      	mov	r1, r3
 800301a:	6878      	ldr	r0, [r7, #4]
 800301c:	f014 fb90 	bl	8017740 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	695a      	ldr	r2, [r3, #20]
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 800302e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	4618      	mov	r0, r3
 8003036:	f003 fa60 	bl	80064fa <USB_ReadInterrupts>
 800303a:	4603      	mov	r3, r0
 800303c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003040:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003044:	d10f      	bne.n	8003066 <HAL_PCD_IRQHandler+0x6d4>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8003046:	2300      	movs	r3, #0
 8003048:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800304a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800304c:	b2db      	uxtb	r3, r3
 800304e:	4619      	mov	r1, r3
 8003050:	6878      	ldr	r0, [r7, #4]
 8003052:	f014 fb63 	bl	801771c <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	695a      	ldr	r2, [r3, #20]
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8003064:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	4618      	mov	r0, r3
 800306c:	f003 fa45 	bl	80064fa <USB_ReadInterrupts>
 8003070:	4603      	mov	r3, r0
 8003072:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003076:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800307a:	d10a      	bne.n	8003092 <HAL_PCD_IRQHandler+0x700>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800307c:	6878      	ldr	r0, [r7, #4]
 800307e:	f014 fb71 	bl	8017764 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	695a      	ldr	r2, [r3, #20]
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8003090:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	4618      	mov	r0, r3
 8003098:	f003 fa2f 	bl	80064fa <USB_ReadInterrupts>
 800309c:	4603      	mov	r3, r0
 800309e:	f003 0304 	and.w	r3, r3, #4
 80030a2:	2b04      	cmp	r3, #4
 80030a4:	d115      	bne.n	80030d2 <HAL_PCD_IRQHandler+0x740>
    {
      temp = hpcd->Instance->GOTGINT;
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	685b      	ldr	r3, [r3, #4]
 80030ac:	613b      	str	r3, [r7, #16]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80030ae:	693b      	ldr	r3, [r7, #16]
 80030b0:	f003 0304 	and.w	r3, r3, #4
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d002      	beq.n	80030be <HAL_PCD_IRQHandler+0x72c>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80030b8:	6878      	ldr	r0, [r7, #4]
 80030ba:	f014 fb61 	bl	8017780 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	6859      	ldr	r1, [r3, #4]
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	693a      	ldr	r2, [r7, #16]
 80030ca:	430a      	orrs	r2, r1
 80030cc:	605a      	str	r2, [r3, #4]
 80030ce:	e000      	b.n	80030d2 <HAL_PCD_IRQHandler+0x740>
      return;
 80030d0:	bf00      	nop
    }
  }
}
 80030d2:	3734      	adds	r7, #52	; 0x34
 80030d4:	46bd      	mov	sp, r7
 80030d6:	bd90      	pop	{r4, r7, pc}

080030d8 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80030d8:	b580      	push	{r7, lr}
 80030da:	b082      	sub	sp, #8
 80030dc:	af00      	add	r7, sp, #0
 80030de:	6078      	str	r0, [r7, #4]
 80030e0:	460b      	mov	r3, r1
 80030e2:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80030ea:	2b01      	cmp	r3, #1
 80030ec:	d101      	bne.n	80030f2 <HAL_PCD_SetAddress+0x1a>
 80030ee:	2302      	movs	r3, #2
 80030f0:	e013      	b.n	800311a <HAL_PCD_SetAddress+0x42>
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	2201      	movs	r2, #1
 80030f6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	78fa      	ldrb	r2, [r7, #3]
 80030fe:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	78fa      	ldrb	r2, [r7, #3]
 8003108:	4611      	mov	r1, r2
 800310a:	4618      	mov	r0, r3
 800310c:	f003 f99f 	bl	800644e <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	2200      	movs	r2, #0
 8003114:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8003118:	2300      	movs	r3, #0
}
 800311a:	4618      	mov	r0, r3
 800311c:	3708      	adds	r7, #8
 800311e:	46bd      	mov	sp, r7
 8003120:	bd80      	pop	{r7, pc}

08003122 <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 8003122:	b580      	push	{r7, lr}
 8003124:	b084      	sub	sp, #16
 8003126:	af00      	add	r7, sp, #0
 8003128:	6078      	str	r0, [r7, #4]
 800312a:	4608      	mov	r0, r1
 800312c:	4611      	mov	r1, r2
 800312e:	461a      	mov	r2, r3
 8003130:	4603      	mov	r3, r0
 8003132:	70fb      	strb	r3, [r7, #3]
 8003134:	460b      	mov	r3, r1
 8003136:	803b      	strh	r3, [r7, #0]
 8003138:	4613      	mov	r3, r2
 800313a:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800313c:	2300      	movs	r3, #0
 800313e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003140:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003144:	2b00      	cmp	r3, #0
 8003146:	da0f      	bge.n	8003168 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003148:	78fb      	ldrb	r3, [r7, #3]
 800314a:	f003 020f 	and.w	r2, r3, #15
 800314e:	4613      	mov	r3, r2
 8003150:	00db      	lsls	r3, r3, #3
 8003152:	1a9b      	subs	r3, r3, r2
 8003154:	009b      	lsls	r3, r3, #2
 8003156:	3338      	adds	r3, #56	; 0x38
 8003158:	687a      	ldr	r2, [r7, #4]
 800315a:	4413      	add	r3, r2
 800315c:	3304      	adds	r3, #4
 800315e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	2201      	movs	r2, #1
 8003164:	705a      	strb	r2, [r3, #1]
 8003166:	e00f      	b.n	8003188 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003168:	78fb      	ldrb	r3, [r7, #3]
 800316a:	f003 020f 	and.w	r2, r3, #15
 800316e:	4613      	mov	r3, r2
 8003170:	00db      	lsls	r3, r3, #3
 8003172:	1a9b      	subs	r3, r3, r2
 8003174:	009b      	lsls	r3, r3, #2
 8003176:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800317a:	687a      	ldr	r2, [r7, #4]
 800317c:	4413      	add	r3, r2
 800317e:	3304      	adds	r3, #4
 8003180:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	2200      	movs	r2, #0
 8003186:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003188:	78fb      	ldrb	r3, [r7, #3]
 800318a:	f003 030f 	and.w	r3, r3, #15
 800318e:	b2da      	uxtb	r2, r3
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8003194:	883a      	ldrh	r2, [r7, #0]
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	78ba      	ldrb	r2, [r7, #2]
 800319e:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	785b      	ldrb	r3, [r3, #1]
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d004      	beq.n	80031b2 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	781b      	ldrb	r3, [r3, #0]
 80031ac:	b29a      	uxth	r2, r3
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80031b2:	78bb      	ldrb	r3, [r7, #2]
 80031b4:	2b02      	cmp	r3, #2
 80031b6:	d102      	bne.n	80031be <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	2200      	movs	r2, #0
 80031bc:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80031c4:	2b01      	cmp	r3, #1
 80031c6:	d101      	bne.n	80031cc <HAL_PCD_EP_Open+0xaa>
 80031c8:	2302      	movs	r3, #2
 80031ca:	e00e      	b.n	80031ea <HAL_PCD_EP_Open+0xc8>
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	2201      	movs	r2, #1
 80031d0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	68f9      	ldr	r1, [r7, #12]
 80031da:	4618      	mov	r0, r3
 80031dc:	f002 fb62 	bl	80058a4 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	2200      	movs	r2, #0
 80031e4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 80031e8:	7afb      	ldrb	r3, [r7, #11]
}
 80031ea:	4618      	mov	r0, r3
 80031ec:	3710      	adds	r7, #16
 80031ee:	46bd      	mov	sp, r7
 80031f0:	bd80      	pop	{r7, pc}

080031f2 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80031f2:	b580      	push	{r7, lr}
 80031f4:	b084      	sub	sp, #16
 80031f6:	af00      	add	r7, sp, #0
 80031f8:	6078      	str	r0, [r7, #4]
 80031fa:	460b      	mov	r3, r1
 80031fc:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80031fe:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003202:	2b00      	cmp	r3, #0
 8003204:	da0f      	bge.n	8003226 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003206:	78fb      	ldrb	r3, [r7, #3]
 8003208:	f003 020f 	and.w	r2, r3, #15
 800320c:	4613      	mov	r3, r2
 800320e:	00db      	lsls	r3, r3, #3
 8003210:	1a9b      	subs	r3, r3, r2
 8003212:	009b      	lsls	r3, r3, #2
 8003214:	3338      	adds	r3, #56	; 0x38
 8003216:	687a      	ldr	r2, [r7, #4]
 8003218:	4413      	add	r3, r2
 800321a:	3304      	adds	r3, #4
 800321c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	2201      	movs	r2, #1
 8003222:	705a      	strb	r2, [r3, #1]
 8003224:	e00f      	b.n	8003246 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003226:	78fb      	ldrb	r3, [r7, #3]
 8003228:	f003 020f 	and.w	r2, r3, #15
 800322c:	4613      	mov	r3, r2
 800322e:	00db      	lsls	r3, r3, #3
 8003230:	1a9b      	subs	r3, r3, r2
 8003232:	009b      	lsls	r3, r3, #2
 8003234:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003238:	687a      	ldr	r2, [r7, #4]
 800323a:	4413      	add	r3, r2
 800323c:	3304      	adds	r3, #4
 800323e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	2200      	movs	r2, #0
 8003244:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8003246:	78fb      	ldrb	r3, [r7, #3]
 8003248:	f003 030f 	and.w	r3, r3, #15
 800324c:	b2da      	uxtb	r2, r3
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003258:	2b01      	cmp	r3, #1
 800325a:	d101      	bne.n	8003260 <HAL_PCD_EP_Close+0x6e>
 800325c:	2302      	movs	r3, #2
 800325e:	e00e      	b.n	800327e <HAL_PCD_EP_Close+0x8c>
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	2201      	movs	r2, #1
 8003264:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	68f9      	ldr	r1, [r7, #12]
 800326e:	4618      	mov	r0, r3
 8003270:	f002 fba0 	bl	80059b4 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	2200      	movs	r2, #0
 8003278:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 800327c:	2300      	movs	r3, #0
}
 800327e:	4618      	mov	r0, r3
 8003280:	3710      	adds	r7, #16
 8003282:	46bd      	mov	sp, r7
 8003284:	bd80      	pop	{r7, pc}

08003286 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003286:	b580      	push	{r7, lr}
 8003288:	b086      	sub	sp, #24
 800328a:	af00      	add	r7, sp, #0
 800328c:	60f8      	str	r0, [r7, #12]
 800328e:	607a      	str	r2, [r7, #4]
 8003290:	603b      	str	r3, [r7, #0]
 8003292:	460b      	mov	r3, r1
 8003294:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003296:	7afb      	ldrb	r3, [r7, #11]
 8003298:	f003 020f 	and.w	r2, r3, #15
 800329c:	4613      	mov	r3, r2
 800329e:	00db      	lsls	r3, r3, #3
 80032a0:	1a9b      	subs	r3, r3, r2
 80032a2:	009b      	lsls	r3, r3, #2
 80032a4:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80032a8:	68fa      	ldr	r2, [r7, #12]
 80032aa:	4413      	add	r3, r2
 80032ac:	3304      	adds	r3, #4
 80032ae:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80032b0:	697b      	ldr	r3, [r7, #20]
 80032b2:	687a      	ldr	r2, [r7, #4]
 80032b4:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80032b6:	697b      	ldr	r3, [r7, #20]
 80032b8:	683a      	ldr	r2, [r7, #0]
 80032ba:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 80032bc:	697b      	ldr	r3, [r7, #20]
 80032be:	2200      	movs	r2, #0
 80032c0:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 80032c2:	697b      	ldr	r3, [r7, #20]
 80032c4:	2200      	movs	r2, #0
 80032c6:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80032c8:	7afb      	ldrb	r3, [r7, #11]
 80032ca:	f003 030f 	and.w	r3, r3, #15
 80032ce:	b2da      	uxtb	r2, r3
 80032d0:	697b      	ldr	r3, [r7, #20]
 80032d2:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	691b      	ldr	r3, [r3, #16]
 80032d8:	2b01      	cmp	r3, #1
 80032da:	d102      	bne.n	80032e2 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80032dc:	687a      	ldr	r2, [r7, #4]
 80032de:	697b      	ldr	r3, [r7, #20]
 80032e0:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80032e2:	7afb      	ldrb	r3, [r7, #11]
 80032e4:	f003 030f 	and.w	r3, r3, #15
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d109      	bne.n	8003300 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	6818      	ldr	r0, [r3, #0]
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	691b      	ldr	r3, [r3, #16]
 80032f4:	b2db      	uxtb	r3, r3
 80032f6:	461a      	mov	r2, r3
 80032f8:	6979      	ldr	r1, [r7, #20]
 80032fa:	f002 fe23 	bl	8005f44 <USB_EP0StartXfer>
 80032fe:	e008      	b.n	8003312 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	6818      	ldr	r0, [r3, #0]
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	691b      	ldr	r3, [r3, #16]
 8003308:	b2db      	uxtb	r3, r3
 800330a:	461a      	mov	r2, r3
 800330c:	6979      	ldr	r1, [r7, #20]
 800330e:	f002 fbd5 	bl	8005abc <USB_EPStartXfer>
  }

  return HAL_OK;
 8003312:	2300      	movs	r3, #0
}
 8003314:	4618      	mov	r0, r3
 8003316:	3718      	adds	r7, #24
 8003318:	46bd      	mov	sp, r7
 800331a:	bd80      	pop	{r7, pc}

0800331c <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800331c:	b480      	push	{r7}
 800331e:	b083      	sub	sp, #12
 8003320:	af00      	add	r7, sp, #0
 8003322:	6078      	str	r0, [r7, #4]
 8003324:	460b      	mov	r3, r1
 8003326:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8003328:	78fb      	ldrb	r3, [r7, #3]
 800332a:	f003 020f 	and.w	r2, r3, #15
 800332e:	6879      	ldr	r1, [r7, #4]
 8003330:	4613      	mov	r3, r2
 8003332:	00db      	lsls	r3, r3, #3
 8003334:	1a9b      	subs	r3, r3, r2
 8003336:	009b      	lsls	r3, r3, #2
 8003338:	440b      	add	r3, r1
 800333a:	f503 7305 	add.w	r3, r3, #532	; 0x214
 800333e:	681b      	ldr	r3, [r3, #0]
}
 8003340:	4618      	mov	r0, r3
 8003342:	370c      	adds	r7, #12
 8003344:	46bd      	mov	sp, r7
 8003346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800334a:	4770      	bx	lr

0800334c <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800334c:	b580      	push	{r7, lr}
 800334e:	b086      	sub	sp, #24
 8003350:	af00      	add	r7, sp, #0
 8003352:	60f8      	str	r0, [r7, #12]
 8003354:	607a      	str	r2, [r7, #4]
 8003356:	603b      	str	r3, [r7, #0]
 8003358:	460b      	mov	r3, r1
 800335a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800335c:	7afb      	ldrb	r3, [r7, #11]
 800335e:	f003 020f 	and.w	r2, r3, #15
 8003362:	4613      	mov	r3, r2
 8003364:	00db      	lsls	r3, r3, #3
 8003366:	1a9b      	subs	r3, r3, r2
 8003368:	009b      	lsls	r3, r3, #2
 800336a:	3338      	adds	r3, #56	; 0x38
 800336c:	68fa      	ldr	r2, [r7, #12]
 800336e:	4413      	add	r3, r2
 8003370:	3304      	adds	r3, #4
 8003372:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003374:	697b      	ldr	r3, [r7, #20]
 8003376:	687a      	ldr	r2, [r7, #4]
 8003378:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800337a:	697b      	ldr	r3, [r7, #20]
 800337c:	683a      	ldr	r2, [r7, #0]
 800337e:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8003380:	697b      	ldr	r3, [r7, #20]
 8003382:	2200      	movs	r2, #0
 8003384:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8003386:	697b      	ldr	r3, [r7, #20]
 8003388:	2201      	movs	r2, #1
 800338a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800338c:	7afb      	ldrb	r3, [r7, #11]
 800338e:	f003 030f 	and.w	r3, r3, #15
 8003392:	b2da      	uxtb	r2, r3
 8003394:	697b      	ldr	r3, [r7, #20]
 8003396:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	691b      	ldr	r3, [r3, #16]
 800339c:	2b01      	cmp	r3, #1
 800339e:	d102      	bne.n	80033a6 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80033a0:	687a      	ldr	r2, [r7, #4]
 80033a2:	697b      	ldr	r3, [r7, #20]
 80033a4:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80033a6:	7afb      	ldrb	r3, [r7, #11]
 80033a8:	f003 030f 	and.w	r3, r3, #15
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d109      	bne.n	80033c4 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	6818      	ldr	r0, [r3, #0]
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	691b      	ldr	r3, [r3, #16]
 80033b8:	b2db      	uxtb	r3, r3
 80033ba:	461a      	mov	r2, r3
 80033bc:	6979      	ldr	r1, [r7, #20]
 80033be:	f002 fdc1 	bl	8005f44 <USB_EP0StartXfer>
 80033c2:	e008      	b.n	80033d6 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	6818      	ldr	r0, [r3, #0]
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	691b      	ldr	r3, [r3, #16]
 80033cc:	b2db      	uxtb	r3, r3
 80033ce:	461a      	mov	r2, r3
 80033d0:	6979      	ldr	r1, [r7, #20]
 80033d2:	f002 fb73 	bl	8005abc <USB_EPStartXfer>
  }

  return HAL_OK;
 80033d6:	2300      	movs	r3, #0
}
 80033d8:	4618      	mov	r0, r3
 80033da:	3718      	adds	r7, #24
 80033dc:	46bd      	mov	sp, r7
 80033de:	bd80      	pop	{r7, pc}

080033e0 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80033e0:	b580      	push	{r7, lr}
 80033e2:	b084      	sub	sp, #16
 80033e4:	af00      	add	r7, sp, #0
 80033e6:	6078      	str	r0, [r7, #4]
 80033e8:	460b      	mov	r3, r1
 80033ea:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80033ec:	78fb      	ldrb	r3, [r7, #3]
 80033ee:	f003 020f 	and.w	r2, r3, #15
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	685b      	ldr	r3, [r3, #4]
 80033f6:	429a      	cmp	r2, r3
 80033f8:	d901      	bls.n	80033fe <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80033fa:	2301      	movs	r3, #1
 80033fc:	e050      	b.n	80034a0 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80033fe:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003402:	2b00      	cmp	r3, #0
 8003404:	da0f      	bge.n	8003426 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003406:	78fb      	ldrb	r3, [r7, #3]
 8003408:	f003 020f 	and.w	r2, r3, #15
 800340c:	4613      	mov	r3, r2
 800340e:	00db      	lsls	r3, r3, #3
 8003410:	1a9b      	subs	r3, r3, r2
 8003412:	009b      	lsls	r3, r3, #2
 8003414:	3338      	adds	r3, #56	; 0x38
 8003416:	687a      	ldr	r2, [r7, #4]
 8003418:	4413      	add	r3, r2
 800341a:	3304      	adds	r3, #4
 800341c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	2201      	movs	r2, #1
 8003422:	705a      	strb	r2, [r3, #1]
 8003424:	e00d      	b.n	8003442 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003426:	78fa      	ldrb	r2, [r7, #3]
 8003428:	4613      	mov	r3, r2
 800342a:	00db      	lsls	r3, r3, #3
 800342c:	1a9b      	subs	r3, r3, r2
 800342e:	009b      	lsls	r3, r3, #2
 8003430:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003434:	687a      	ldr	r2, [r7, #4]
 8003436:	4413      	add	r3, r2
 8003438:	3304      	adds	r3, #4
 800343a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	2200      	movs	r2, #0
 8003440:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	2201      	movs	r2, #1
 8003446:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003448:	78fb      	ldrb	r3, [r7, #3]
 800344a:	f003 030f 	and.w	r3, r3, #15
 800344e:	b2da      	uxtb	r2, r3
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800345a:	2b01      	cmp	r3, #1
 800345c:	d101      	bne.n	8003462 <HAL_PCD_EP_SetStall+0x82>
 800345e:	2302      	movs	r3, #2
 8003460:	e01e      	b.n	80034a0 <HAL_PCD_EP_SetStall+0xc0>
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	2201      	movs	r2, #1
 8003466:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	68f9      	ldr	r1, [r7, #12]
 8003470:	4618      	mov	r0, r3
 8003472:	f002 ff18 	bl	80062a6 <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003476:	78fb      	ldrb	r3, [r7, #3]
 8003478:	f003 030f 	and.w	r3, r3, #15
 800347c:	2b00      	cmp	r3, #0
 800347e:	d10a      	bne.n	8003496 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	6818      	ldr	r0, [r3, #0]
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	691b      	ldr	r3, [r3, #16]
 8003488:	b2d9      	uxtb	r1, r3
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003490:	461a      	mov	r2, r3
 8003492:	f003 f909 	bl	80066a8 <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd);
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	2200      	movs	r2, #0
 800349a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800349e:	2300      	movs	r3, #0
}
 80034a0:	4618      	mov	r0, r3
 80034a2:	3710      	adds	r7, #16
 80034a4:	46bd      	mov	sp, r7
 80034a6:	bd80      	pop	{r7, pc}

080034a8 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80034a8:	b580      	push	{r7, lr}
 80034aa:	b084      	sub	sp, #16
 80034ac:	af00      	add	r7, sp, #0
 80034ae:	6078      	str	r0, [r7, #4]
 80034b0:	460b      	mov	r3, r1
 80034b2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80034b4:	78fb      	ldrb	r3, [r7, #3]
 80034b6:	f003 020f 	and.w	r2, r3, #15
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	685b      	ldr	r3, [r3, #4]
 80034be:	429a      	cmp	r2, r3
 80034c0:	d901      	bls.n	80034c6 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80034c2:	2301      	movs	r3, #1
 80034c4:	e042      	b.n	800354c <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80034c6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	da0f      	bge.n	80034ee <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80034ce:	78fb      	ldrb	r3, [r7, #3]
 80034d0:	f003 020f 	and.w	r2, r3, #15
 80034d4:	4613      	mov	r3, r2
 80034d6:	00db      	lsls	r3, r3, #3
 80034d8:	1a9b      	subs	r3, r3, r2
 80034da:	009b      	lsls	r3, r3, #2
 80034dc:	3338      	adds	r3, #56	; 0x38
 80034de:	687a      	ldr	r2, [r7, #4]
 80034e0:	4413      	add	r3, r2
 80034e2:	3304      	adds	r3, #4
 80034e4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	2201      	movs	r2, #1
 80034ea:	705a      	strb	r2, [r3, #1]
 80034ec:	e00f      	b.n	800350e <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80034ee:	78fb      	ldrb	r3, [r7, #3]
 80034f0:	f003 020f 	and.w	r2, r3, #15
 80034f4:	4613      	mov	r3, r2
 80034f6:	00db      	lsls	r3, r3, #3
 80034f8:	1a9b      	subs	r3, r3, r2
 80034fa:	009b      	lsls	r3, r3, #2
 80034fc:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003500:	687a      	ldr	r2, [r7, #4]
 8003502:	4413      	add	r3, r2
 8003504:	3304      	adds	r3, #4
 8003506:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	2200      	movs	r2, #0
 800350c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	2200      	movs	r2, #0
 8003512:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003514:	78fb      	ldrb	r3, [r7, #3]
 8003516:	f003 030f 	and.w	r3, r3, #15
 800351a:	b2da      	uxtb	r2, r3
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003526:	2b01      	cmp	r3, #1
 8003528:	d101      	bne.n	800352e <HAL_PCD_EP_ClrStall+0x86>
 800352a:	2302      	movs	r3, #2
 800352c:	e00e      	b.n	800354c <HAL_PCD_EP_ClrStall+0xa4>
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	2201      	movs	r2, #1
 8003532:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	68f9      	ldr	r1, [r7, #12]
 800353c:	4618      	mov	r0, r3
 800353e:	f002 ff20 	bl	8006382 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	2200      	movs	r2, #0
 8003546:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800354a:	2300      	movs	r3, #0
}
 800354c:	4618      	mov	r0, r3
 800354e:	3710      	adds	r7, #16
 8003550:	46bd      	mov	sp, r7
 8003552:	bd80      	pop	{r7, pc}

08003554 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003554:	b580      	push	{r7, lr}
 8003556:	b08a      	sub	sp, #40	; 0x28
 8003558:	af02      	add	r7, sp, #8
 800355a:	6078      	str	r0, [r7, #4]
 800355c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003564:	697b      	ldr	r3, [r7, #20]
 8003566:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8003568:	683a      	ldr	r2, [r7, #0]
 800356a:	4613      	mov	r3, r2
 800356c:	00db      	lsls	r3, r3, #3
 800356e:	1a9b      	subs	r3, r3, r2
 8003570:	009b      	lsls	r3, r3, #2
 8003572:	3338      	adds	r3, #56	; 0x38
 8003574:	687a      	ldr	r2, [r7, #4]
 8003576:	4413      	add	r3, r2
 8003578:	3304      	adds	r3, #4
 800357a:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	699a      	ldr	r2, [r3, #24]
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	695b      	ldr	r3, [r3, #20]
 8003584:	429a      	cmp	r2, r3
 8003586:	d901      	bls.n	800358c <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8003588:	2301      	movs	r3, #1
 800358a:	e06c      	b.n	8003666 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	695a      	ldr	r2, [r3, #20]
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	699b      	ldr	r3, [r3, #24]
 8003594:	1ad3      	subs	r3, r2, r3
 8003596:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	689b      	ldr	r3, [r3, #8]
 800359c:	69fa      	ldr	r2, [r7, #28]
 800359e:	429a      	cmp	r2, r3
 80035a0:	d902      	bls.n	80035a8 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	689b      	ldr	r3, [r3, #8]
 80035a6:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80035a8:	69fb      	ldr	r3, [r7, #28]
 80035aa:	3303      	adds	r3, #3
 80035ac:	089b      	lsrs	r3, r3, #2
 80035ae:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80035b0:	e02b      	b.n	800360a <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	695a      	ldr	r2, [r3, #20]
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	699b      	ldr	r3, [r3, #24]
 80035ba:	1ad3      	subs	r3, r2, r3
 80035bc:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	689b      	ldr	r3, [r3, #8]
 80035c2:	69fa      	ldr	r2, [r7, #28]
 80035c4:	429a      	cmp	r2, r3
 80035c6:	d902      	bls.n	80035ce <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	689b      	ldr	r3, [r3, #8]
 80035cc:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80035ce:	69fb      	ldr	r3, [r7, #28]
 80035d0:	3303      	adds	r3, #3
 80035d2:	089b      	lsrs	r3, r3, #2
 80035d4:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	68d9      	ldr	r1, [r3, #12]
 80035da:	683b      	ldr	r3, [r7, #0]
 80035dc:	b2da      	uxtb	r2, r3
 80035de:	69fb      	ldr	r3, [r7, #28]
 80035e0:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80035e6:	b2db      	uxtb	r3, r3
 80035e8:	9300      	str	r3, [sp, #0]
 80035ea:	4603      	mov	r3, r0
 80035ec:	6978      	ldr	r0, [r7, #20]
 80035ee:	f002 fdfc 	bl	80061ea <USB_WritePacket>

    ep->xfer_buff  += len;
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	68da      	ldr	r2, [r3, #12]
 80035f6:	69fb      	ldr	r3, [r7, #28]
 80035f8:	441a      	add	r2, r3
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	699a      	ldr	r2, [r3, #24]
 8003602:	69fb      	ldr	r3, [r7, #28]
 8003604:	441a      	add	r2, r3
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800360a:	683b      	ldr	r3, [r7, #0]
 800360c:	015a      	lsls	r2, r3, #5
 800360e:	693b      	ldr	r3, [r7, #16]
 8003610:	4413      	add	r3, r2
 8003612:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003616:	699b      	ldr	r3, [r3, #24]
 8003618:	b29b      	uxth	r3, r3
 800361a:	69ba      	ldr	r2, [r7, #24]
 800361c:	429a      	cmp	r2, r3
 800361e:	d809      	bhi.n	8003634 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	699a      	ldr	r2, [r3, #24]
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003628:	429a      	cmp	r2, r3
 800362a:	d203      	bcs.n	8003634 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	695b      	ldr	r3, [r3, #20]
 8003630:	2b00      	cmp	r3, #0
 8003632:	d1be      	bne.n	80035b2 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	695a      	ldr	r2, [r3, #20]
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	699b      	ldr	r3, [r3, #24]
 800363c:	429a      	cmp	r2, r3
 800363e:	d811      	bhi.n	8003664 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003640:	683b      	ldr	r3, [r7, #0]
 8003642:	f003 030f 	and.w	r3, r3, #15
 8003646:	2201      	movs	r2, #1
 8003648:	fa02 f303 	lsl.w	r3, r2, r3
 800364c:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800364e:	693b      	ldr	r3, [r7, #16]
 8003650:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003654:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003656:	68bb      	ldr	r3, [r7, #8]
 8003658:	43db      	mvns	r3, r3
 800365a:	6939      	ldr	r1, [r7, #16]
 800365c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003660:	4013      	ands	r3, r2
 8003662:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8003664:	2300      	movs	r3, #0
}
 8003666:	4618      	mov	r0, r3
 8003668:	3720      	adds	r7, #32
 800366a:	46bd      	mov	sp, r7
 800366c:	bd80      	pop	{r7, pc}
	...

08003670 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003670:	b580      	push	{r7, lr}
 8003672:	b086      	sub	sp, #24
 8003674:	af00      	add	r7, sp, #0
 8003676:	6078      	str	r0, [r7, #4]
 8003678:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003680:	697b      	ldr	r3, [r7, #20]
 8003682:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003684:	697b      	ldr	r3, [r7, #20]
 8003686:	333c      	adds	r3, #60	; 0x3c
 8003688:	3304      	adds	r3, #4
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800368e:	683b      	ldr	r3, [r7, #0]
 8003690:	015a      	lsls	r2, r3, #5
 8003692:	693b      	ldr	r3, [r7, #16]
 8003694:	4413      	add	r3, r2
 8003696:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800369a:	689b      	ldr	r3, [r3, #8]
 800369c:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	691b      	ldr	r3, [r3, #16]
 80036a2:	2b01      	cmp	r3, #1
 80036a4:	f040 80b3 	bne.w	800380e <PCD_EP_OutXfrComplete_int+0x19e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80036a8:	68bb      	ldr	r3, [r7, #8]
 80036aa:	f003 0308 	and.w	r3, r3, #8
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d028      	beq.n	8003704 <PCD_EP_OutXfrComplete_int+0x94>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	4a70      	ldr	r2, [pc, #448]	; (8003878 <PCD_EP_OutXfrComplete_int+0x208>)
 80036b6:	4293      	cmp	r3, r2
 80036b8:	d90e      	bls.n	80036d8 <PCD_EP_OutXfrComplete_int+0x68>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80036ba:	68bb      	ldr	r3, [r7, #8]
 80036bc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d009      	beq.n	80036d8 <PCD_EP_OutXfrComplete_int+0x68>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80036c4:	683b      	ldr	r3, [r7, #0]
 80036c6:	015a      	lsls	r2, r3, #5
 80036c8:	693b      	ldr	r3, [r7, #16]
 80036ca:	4413      	add	r3, r2
 80036cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80036d0:	461a      	mov	r2, r3
 80036d2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80036d6:	6093      	str	r3, [r2, #8]

      /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SetupStageCallback(hpcd);
#else
      HAL_PCD_SetupStageCallback(hpcd);
 80036d8:	6878      	ldr	r0, [r7, #4]
 80036da:	f013 ff6d 	bl	80175b8 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	6818      	ldr	r0, [r3, #0]
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80036e8:	461a      	mov	r2, r3
 80036ea:	2101      	movs	r1, #1
 80036ec:	f002 ffdc 	bl	80066a8 <USB_EP0_OutStart>
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80036f0:	683b      	ldr	r3, [r7, #0]
 80036f2:	015a      	lsls	r2, r3, #5
 80036f4:	693b      	ldr	r3, [r7, #16]
 80036f6:	4413      	add	r3, r2
 80036f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80036fc:	461a      	mov	r2, r3
 80036fe:	2308      	movs	r3, #8
 8003700:	6093      	str	r3, [r2, #8]
 8003702:	e0b3      	b.n	800386c <PCD_EP_OutXfrComplete_int+0x1fc>
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8003704:	68bb      	ldr	r3, [r7, #8]
 8003706:	f003 0320 	and.w	r3, r3, #32
 800370a:	2b00      	cmp	r3, #0
 800370c:	d009      	beq.n	8003722 <PCD_EP_OutXfrComplete_int+0xb2>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800370e:	683b      	ldr	r3, [r7, #0]
 8003710:	015a      	lsls	r2, r3, #5
 8003712:	693b      	ldr	r3, [r7, #16]
 8003714:	4413      	add	r3, r2
 8003716:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800371a:	461a      	mov	r2, r3
 800371c:	2320      	movs	r3, #32
 800371e:	6093      	str	r3, [r2, #8]
 8003720:	e0a4      	b.n	800386c <PCD_EP_OutXfrComplete_int+0x1fc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8003722:	68bb      	ldr	r3, [r7, #8]
 8003724:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003728:	2b00      	cmp	r3, #0
 800372a:	f040 809f 	bne.w	800386c <PCD_EP_OutXfrComplete_int+0x1fc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	4a51      	ldr	r2, [pc, #324]	; (8003878 <PCD_EP_OutXfrComplete_int+0x208>)
 8003732:	4293      	cmp	r3, r2
 8003734:	d90f      	bls.n	8003756 <PCD_EP_OutXfrComplete_int+0xe6>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003736:	68bb      	ldr	r3, [r7, #8]
 8003738:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800373c:	2b00      	cmp	r3, #0
 800373e:	d00a      	beq.n	8003756 <PCD_EP_OutXfrComplete_int+0xe6>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003740:	683b      	ldr	r3, [r7, #0]
 8003742:	015a      	lsls	r2, r3, #5
 8003744:	693b      	ldr	r3, [r7, #16]
 8003746:	4413      	add	r3, r2
 8003748:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800374c:	461a      	mov	r2, r3
 800374e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003752:	6093      	str	r3, [r2, #8]
 8003754:	e08a      	b.n	800386c <PCD_EP_OutXfrComplete_int+0x1fc>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8003756:	6879      	ldr	r1, [r7, #4]
 8003758:	683a      	ldr	r2, [r7, #0]
 800375a:	4613      	mov	r3, r2
 800375c:	00db      	lsls	r3, r3, #3
 800375e:	1a9b      	subs	r3, r3, r2
 8003760:	009b      	lsls	r3, r3, #2
 8003762:	440b      	add	r3, r1
 8003764:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8003768:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 800376a:	683b      	ldr	r3, [r7, #0]
 800376c:	0159      	lsls	r1, r3, #5
 800376e:	693b      	ldr	r3, [r7, #16]
 8003770:	440b      	add	r3, r1
 8003772:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003776:	691b      	ldr	r3, [r3, #16]
 8003778:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 800377c:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 800377e:	6878      	ldr	r0, [r7, #4]
 8003780:	683a      	ldr	r2, [r7, #0]
 8003782:	4613      	mov	r3, r2
 8003784:	00db      	lsls	r3, r3, #3
 8003786:	1a9b      	subs	r3, r3, r2
 8003788:	009b      	lsls	r3, r3, #2
 800378a:	4403      	add	r3, r0
 800378c:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8003790:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8003792:	6879      	ldr	r1, [r7, #4]
 8003794:	683a      	ldr	r2, [r7, #0]
 8003796:	4613      	mov	r3, r2
 8003798:	00db      	lsls	r3, r3, #3
 800379a:	1a9b      	subs	r3, r3, r2
 800379c:	009b      	lsls	r3, r3, #2
 800379e:	440b      	add	r3, r1
 80037a0:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80037a4:	6819      	ldr	r1, [r3, #0]
 80037a6:	6878      	ldr	r0, [r7, #4]
 80037a8:	683a      	ldr	r2, [r7, #0]
 80037aa:	4613      	mov	r3, r2
 80037ac:	00db      	lsls	r3, r3, #3
 80037ae:	1a9b      	subs	r3, r3, r2
 80037b0:	009b      	lsls	r3, r3, #2
 80037b2:	4403      	add	r3, r0
 80037b4:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	4419      	add	r1, r3
 80037bc:	6878      	ldr	r0, [r7, #4]
 80037be:	683a      	ldr	r2, [r7, #0]
 80037c0:	4613      	mov	r3, r2
 80037c2:	00db      	lsls	r3, r3, #3
 80037c4:	1a9b      	subs	r3, r3, r2
 80037c6:	009b      	lsls	r3, r3, #2
 80037c8:	4403      	add	r3, r0
 80037ca:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80037ce:	6019      	str	r1, [r3, #0]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80037d0:	683b      	ldr	r3, [r7, #0]
 80037d2:	b2db      	uxtb	r3, r3
 80037d4:	4619      	mov	r1, r3
 80037d6:	6878      	ldr	r0, [r7, #4]
 80037d8:	f013 ff00 	bl	80175dc <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80037dc:	683b      	ldr	r3, [r7, #0]
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d144      	bne.n	800386c <PCD_EP_OutXfrComplete_int+0x1fc>
 80037e2:	6879      	ldr	r1, [r7, #4]
 80037e4:	683a      	ldr	r2, [r7, #0]
 80037e6:	4613      	mov	r3, r2
 80037e8:	00db      	lsls	r3, r3, #3
 80037ea:	1a9b      	subs	r3, r3, r2
 80037ec:	009b      	lsls	r3, r3, #2
 80037ee:	440b      	add	r3, r1
 80037f0:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d138      	bne.n	800386c <PCD_EP_OutXfrComplete_int+0x1fc>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	6818      	ldr	r0, [r3, #0]
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003804:	461a      	mov	r2, r3
 8003806:	2101      	movs	r1, #1
 8003808:	f002 ff4e 	bl	80066a8 <USB_EP0_OutStart>
 800380c:	e02e      	b.n	800386c <PCD_EP_OutXfrComplete_int+0x1fc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	4a1a      	ldr	r2, [pc, #104]	; (800387c <PCD_EP_OutXfrComplete_int+0x20c>)
 8003812:	4293      	cmp	r3, r2
 8003814:	d124      	bne.n	8003860 <PCD_EP_OutXfrComplete_int+0x1f0>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8003816:	68bb      	ldr	r3, [r7, #8]
 8003818:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800381c:	2b00      	cmp	r3, #0
 800381e:	d00a      	beq.n	8003836 <PCD_EP_OutXfrComplete_int+0x1c6>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003820:	683b      	ldr	r3, [r7, #0]
 8003822:	015a      	lsls	r2, r3, #5
 8003824:	693b      	ldr	r3, [r7, #16]
 8003826:	4413      	add	r3, r2
 8003828:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800382c:	461a      	mov	r2, r3
 800382e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003832:	6093      	str	r3, [r2, #8]
 8003834:	e01a      	b.n	800386c <PCD_EP_OutXfrComplete_int+0x1fc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003836:	68bb      	ldr	r3, [r7, #8]
 8003838:	f003 0320 	and.w	r3, r3, #32
 800383c:	2b00      	cmp	r3, #0
 800383e:	d008      	beq.n	8003852 <PCD_EP_OutXfrComplete_int+0x1e2>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003840:	683b      	ldr	r3, [r7, #0]
 8003842:	015a      	lsls	r2, r3, #5
 8003844:	693b      	ldr	r3, [r7, #16]
 8003846:	4413      	add	r3, r2
 8003848:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800384c:	461a      	mov	r2, r3
 800384e:	2320      	movs	r3, #32
 8003850:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003852:	683b      	ldr	r3, [r7, #0]
 8003854:	b2db      	uxtb	r3, r3
 8003856:	4619      	mov	r1, r3
 8003858:	6878      	ldr	r0, [r7, #4]
 800385a:	f013 febf 	bl	80175dc <HAL_PCD_DataOutStageCallback>
 800385e:	e005      	b.n	800386c <PCD_EP_OutXfrComplete_int+0x1fc>
    else
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003860:	683b      	ldr	r3, [r7, #0]
 8003862:	b2db      	uxtb	r3, r3
 8003864:	4619      	mov	r1, r3
 8003866:	6878      	ldr	r0, [r7, #4]
 8003868:	f013 feb8 	bl	80175dc <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 800386c:	2300      	movs	r3, #0
}
 800386e:	4618      	mov	r0, r3
 8003870:	3718      	adds	r7, #24
 8003872:	46bd      	mov	sp, r7
 8003874:	bd80      	pop	{r7, pc}
 8003876:	bf00      	nop
 8003878:	4f54300a 	.word	0x4f54300a
 800387c:	4f54310a 	.word	0x4f54310a

08003880 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003880:	b580      	push	{r7, lr}
 8003882:	b086      	sub	sp, #24
 8003884:	af00      	add	r7, sp, #0
 8003886:	6078      	str	r0, [r7, #4]
 8003888:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003890:	697b      	ldr	r3, [r7, #20]
 8003892:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003894:	697b      	ldr	r3, [r7, #20]
 8003896:	333c      	adds	r3, #60	; 0x3c
 8003898:	3304      	adds	r3, #4
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800389e:	683b      	ldr	r3, [r7, #0]
 80038a0:	015a      	lsls	r2, r3, #5
 80038a2:	693b      	ldr	r3, [r7, #16]
 80038a4:	4413      	add	r3, r2
 80038a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80038aa:	689b      	ldr	r3, [r3, #8]
 80038ac:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	691b      	ldr	r3, [r3, #16]
 80038b2:	2b01      	cmp	r3, #1
 80038b4:	d113      	bne.n	80038de <PCD_EP_OutSetupPacket_int+0x5e>
  {
    /* StupPktRcvd = 1 pending setup packet int */
    if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	4a1f      	ldr	r2, [pc, #124]	; (8003938 <PCD_EP_OutSetupPacket_int+0xb8>)
 80038ba:	4293      	cmp	r3, r2
 80038bc:	d922      	bls.n	8003904 <PCD_EP_OutSetupPacket_int+0x84>
        ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80038be:	68bb      	ldr	r3, [r7, #8]
 80038c0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
    if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d01d      	beq.n	8003904 <PCD_EP_OutSetupPacket_int+0x84>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80038c8:	683b      	ldr	r3, [r7, #0]
 80038ca:	015a      	lsls	r2, r3, #5
 80038cc:	693b      	ldr	r3, [r7, #16]
 80038ce:	4413      	add	r3, r2
 80038d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80038d4:	461a      	mov	r2, r3
 80038d6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80038da:	6093      	str	r3, [r2, #8]
 80038dc:	e012      	b.n	8003904 <PCD_EP_OutSetupPacket_int+0x84>
    }
  }
  else
  {
    if ((gSNPSiD == USB_OTG_CORE_ID_310A) &&
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	4a16      	ldr	r2, [pc, #88]	; (800393c <PCD_EP_OutSetupPacket_int+0xbc>)
 80038e2:	4293      	cmp	r3, r2
 80038e4:	d10e      	bne.n	8003904 <PCD_EP_OutSetupPacket_int+0x84>
        ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80038e6:	68bb      	ldr	r3, [r7, #8]
 80038e8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
    if ((gSNPSiD == USB_OTG_CORE_ID_310A) &&
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d009      	beq.n	8003904 <PCD_EP_OutSetupPacket_int+0x84>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80038f0:	683b      	ldr	r3, [r7, #0]
 80038f2:	015a      	lsls	r2, r3, #5
 80038f4:	693b      	ldr	r3, [r7, #16]
 80038f6:	4413      	add	r3, r2
 80038f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80038fc:	461a      	mov	r2, r3
 80038fe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003902:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8003904:	6878      	ldr	r0, [r7, #4]
 8003906:	f013 fe57 	bl	80175b8 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	4a0a      	ldr	r2, [pc, #40]	; (8003938 <PCD_EP_OutSetupPacket_int+0xb8>)
 800390e:	4293      	cmp	r3, r2
 8003910:	d90c      	bls.n	800392c <PCD_EP_OutSetupPacket_int+0xac>
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	691b      	ldr	r3, [r3, #16]
 8003916:	2b01      	cmp	r3, #1
 8003918:	d108      	bne.n	800392c <PCD_EP_OutSetupPacket_int+0xac>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	6818      	ldr	r0, [r3, #0]
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003924:	461a      	mov	r2, r3
 8003926:	2101      	movs	r1, #1
 8003928:	f002 febe 	bl	80066a8 <USB_EP0_OutStart>
  }

  return HAL_OK;
 800392c:	2300      	movs	r3, #0
}
 800392e:	4618      	mov	r0, r3
 8003930:	3718      	adds	r7, #24
 8003932:	46bd      	mov	sp, r7
 8003934:	bd80      	pop	{r7, pc}
 8003936:	bf00      	nop
 8003938:	4f54300a 	.word	0x4f54300a
 800393c:	4f54310a 	.word	0x4f54310a

08003940 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8003940:	b480      	push	{r7}
 8003942:	b085      	sub	sp, #20
 8003944:	af00      	add	r7, sp, #0
 8003946:	6078      	str	r0, [r7, #4]
 8003948:	460b      	mov	r3, r1
 800394a:	70fb      	strb	r3, [r7, #3]
 800394c:	4613      	mov	r3, r2
 800394e:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003956:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8003958:	78fb      	ldrb	r3, [r7, #3]
 800395a:	2b00      	cmp	r3, #0
 800395c:	d107      	bne.n	800396e <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800395e:	883b      	ldrh	r3, [r7, #0]
 8003960:	0419      	lsls	r1, r3, #16
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	68ba      	ldr	r2, [r7, #8]
 8003968:	430a      	orrs	r2, r1
 800396a:	629a      	str	r2, [r3, #40]	; 0x28
 800396c:	e028      	b.n	80039c0 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003974:	0c1b      	lsrs	r3, r3, #16
 8003976:	68ba      	ldr	r2, [r7, #8]
 8003978:	4413      	add	r3, r2
 800397a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800397c:	2300      	movs	r3, #0
 800397e:	73fb      	strb	r3, [r7, #15]
 8003980:	e00d      	b.n	800399e <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681a      	ldr	r2, [r3, #0]
 8003986:	7bfb      	ldrb	r3, [r7, #15]
 8003988:	3340      	adds	r3, #64	; 0x40
 800398a:	009b      	lsls	r3, r3, #2
 800398c:	4413      	add	r3, r2
 800398e:	685b      	ldr	r3, [r3, #4]
 8003990:	0c1b      	lsrs	r3, r3, #16
 8003992:	68ba      	ldr	r2, [r7, #8]
 8003994:	4413      	add	r3, r2
 8003996:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003998:	7bfb      	ldrb	r3, [r7, #15]
 800399a:	3301      	adds	r3, #1
 800399c:	73fb      	strb	r3, [r7, #15]
 800399e:	7bfa      	ldrb	r2, [r7, #15]
 80039a0:	78fb      	ldrb	r3, [r7, #3]
 80039a2:	3b01      	subs	r3, #1
 80039a4:	429a      	cmp	r2, r3
 80039a6:	d3ec      	bcc.n	8003982 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80039a8:	883b      	ldrh	r3, [r7, #0]
 80039aa:	0418      	lsls	r0, r3, #16
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	6819      	ldr	r1, [r3, #0]
 80039b0:	78fb      	ldrb	r3, [r7, #3]
 80039b2:	3b01      	subs	r3, #1
 80039b4:	68ba      	ldr	r2, [r7, #8]
 80039b6:	4302      	orrs	r2, r0
 80039b8:	3340      	adds	r3, #64	; 0x40
 80039ba:	009b      	lsls	r3, r3, #2
 80039bc:	440b      	add	r3, r1
 80039be:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80039c0:	2300      	movs	r3, #0
}
 80039c2:	4618      	mov	r0, r3
 80039c4:	3714      	adds	r7, #20
 80039c6:	46bd      	mov	sp, r7
 80039c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039cc:	4770      	bx	lr

080039ce <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80039ce:	b480      	push	{r7}
 80039d0:	b083      	sub	sp, #12
 80039d2:	af00      	add	r7, sp, #0
 80039d4:	6078      	str	r0, [r7, #4]
 80039d6:	460b      	mov	r3, r1
 80039d8:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	887a      	ldrh	r2, [r7, #2]
 80039e0:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80039e2:	2300      	movs	r3, #0
}
 80039e4:	4618      	mov	r0, r3
 80039e6:	370c      	adds	r7, #12
 80039e8:	46bd      	mov	sp, r7
 80039ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ee:	4770      	bx	lr

080039f0 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80039f0:	b480      	push	{r7}
 80039f2:	b083      	sub	sp, #12
 80039f4:	af00      	add	r7, sp, #0
 80039f6:	6078      	str	r0, [r7, #4]
 80039f8:	460b      	mov	r3, r1
 80039fa:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80039fc:	bf00      	nop
 80039fe:	370c      	adds	r7, #12
 8003a00:	46bd      	mov	sp, r7
 8003a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a06:	4770      	bx	lr

08003a08 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003a08:	b580      	push	{r7, lr}
 8003a0a:	b086      	sub	sp, #24
 8003a0c:	af00      	add	r7, sp, #0
 8003a0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d101      	bne.n	8003a1a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003a16:	2301      	movs	r3, #1
 8003a18:	e22d      	b.n	8003e76 <HAL_RCC_OscConfig+0x46e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	f003 0301 	and.w	r3, r3, #1
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d075      	beq.n	8003b12 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003a26:	4ba3      	ldr	r3, [pc, #652]	; (8003cb4 <HAL_RCC_OscConfig+0x2ac>)
 8003a28:	689b      	ldr	r3, [r3, #8]
 8003a2a:	f003 030c 	and.w	r3, r3, #12
 8003a2e:	2b04      	cmp	r3, #4
 8003a30:	d00c      	beq.n	8003a4c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003a32:	4ba0      	ldr	r3, [pc, #640]	; (8003cb4 <HAL_RCC_OscConfig+0x2ac>)
 8003a34:	689b      	ldr	r3, [r3, #8]
 8003a36:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003a3a:	2b08      	cmp	r3, #8
 8003a3c:	d112      	bne.n	8003a64 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003a3e:	4b9d      	ldr	r3, [pc, #628]	; (8003cb4 <HAL_RCC_OscConfig+0x2ac>)
 8003a40:	685b      	ldr	r3, [r3, #4]
 8003a42:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003a46:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003a4a:	d10b      	bne.n	8003a64 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a4c:	4b99      	ldr	r3, [pc, #612]	; (8003cb4 <HAL_RCC_OscConfig+0x2ac>)
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d05b      	beq.n	8003b10 <HAL_RCC_OscConfig+0x108>
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	685b      	ldr	r3, [r3, #4]
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d157      	bne.n	8003b10 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003a60:	2301      	movs	r3, #1
 8003a62:	e208      	b.n	8003e76 <HAL_RCC_OscConfig+0x46e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	685b      	ldr	r3, [r3, #4]
 8003a68:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003a6c:	d106      	bne.n	8003a7c <HAL_RCC_OscConfig+0x74>
 8003a6e:	4b91      	ldr	r3, [pc, #580]	; (8003cb4 <HAL_RCC_OscConfig+0x2ac>)
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	4a90      	ldr	r2, [pc, #576]	; (8003cb4 <HAL_RCC_OscConfig+0x2ac>)
 8003a74:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a78:	6013      	str	r3, [r2, #0]
 8003a7a:	e01d      	b.n	8003ab8 <HAL_RCC_OscConfig+0xb0>
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	685b      	ldr	r3, [r3, #4]
 8003a80:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003a84:	d10c      	bne.n	8003aa0 <HAL_RCC_OscConfig+0x98>
 8003a86:	4b8b      	ldr	r3, [pc, #556]	; (8003cb4 <HAL_RCC_OscConfig+0x2ac>)
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	4a8a      	ldr	r2, [pc, #552]	; (8003cb4 <HAL_RCC_OscConfig+0x2ac>)
 8003a8c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003a90:	6013      	str	r3, [r2, #0]
 8003a92:	4b88      	ldr	r3, [pc, #544]	; (8003cb4 <HAL_RCC_OscConfig+0x2ac>)
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	4a87      	ldr	r2, [pc, #540]	; (8003cb4 <HAL_RCC_OscConfig+0x2ac>)
 8003a98:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a9c:	6013      	str	r3, [r2, #0]
 8003a9e:	e00b      	b.n	8003ab8 <HAL_RCC_OscConfig+0xb0>
 8003aa0:	4b84      	ldr	r3, [pc, #528]	; (8003cb4 <HAL_RCC_OscConfig+0x2ac>)
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	4a83      	ldr	r2, [pc, #524]	; (8003cb4 <HAL_RCC_OscConfig+0x2ac>)
 8003aa6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003aaa:	6013      	str	r3, [r2, #0]
 8003aac:	4b81      	ldr	r3, [pc, #516]	; (8003cb4 <HAL_RCC_OscConfig+0x2ac>)
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	4a80      	ldr	r2, [pc, #512]	; (8003cb4 <HAL_RCC_OscConfig+0x2ac>)
 8003ab2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003ab6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	685b      	ldr	r3, [r3, #4]
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d013      	beq.n	8003ae8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ac0:	f7fd fb32 	bl	8001128 <HAL_GetTick>
 8003ac4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003ac6:	e008      	b.n	8003ada <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003ac8:	f7fd fb2e 	bl	8001128 <HAL_GetTick>
 8003acc:	4602      	mov	r2, r0
 8003ace:	693b      	ldr	r3, [r7, #16]
 8003ad0:	1ad3      	subs	r3, r2, r3
 8003ad2:	2b64      	cmp	r3, #100	; 0x64
 8003ad4:	d901      	bls.n	8003ada <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003ad6:	2303      	movs	r3, #3
 8003ad8:	e1cd      	b.n	8003e76 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003ada:	4b76      	ldr	r3, [pc, #472]	; (8003cb4 <HAL_RCC_OscConfig+0x2ac>)
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d0f0      	beq.n	8003ac8 <HAL_RCC_OscConfig+0xc0>
 8003ae6:	e014      	b.n	8003b12 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ae8:	f7fd fb1e 	bl	8001128 <HAL_GetTick>
 8003aec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003aee:	e008      	b.n	8003b02 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003af0:	f7fd fb1a 	bl	8001128 <HAL_GetTick>
 8003af4:	4602      	mov	r2, r0
 8003af6:	693b      	ldr	r3, [r7, #16]
 8003af8:	1ad3      	subs	r3, r2, r3
 8003afa:	2b64      	cmp	r3, #100	; 0x64
 8003afc:	d901      	bls.n	8003b02 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003afe:	2303      	movs	r3, #3
 8003b00:	e1b9      	b.n	8003e76 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003b02:	4b6c      	ldr	r3, [pc, #432]	; (8003cb4 <HAL_RCC_OscConfig+0x2ac>)
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d1f0      	bne.n	8003af0 <HAL_RCC_OscConfig+0xe8>
 8003b0e:	e000      	b.n	8003b12 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b10:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	f003 0302 	and.w	r3, r3, #2
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d063      	beq.n	8003be6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003b1e:	4b65      	ldr	r3, [pc, #404]	; (8003cb4 <HAL_RCC_OscConfig+0x2ac>)
 8003b20:	689b      	ldr	r3, [r3, #8]
 8003b22:	f003 030c 	and.w	r3, r3, #12
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d00b      	beq.n	8003b42 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003b2a:	4b62      	ldr	r3, [pc, #392]	; (8003cb4 <HAL_RCC_OscConfig+0x2ac>)
 8003b2c:	689b      	ldr	r3, [r3, #8]
 8003b2e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003b32:	2b08      	cmp	r3, #8
 8003b34:	d11c      	bne.n	8003b70 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003b36:	4b5f      	ldr	r3, [pc, #380]	; (8003cb4 <HAL_RCC_OscConfig+0x2ac>)
 8003b38:	685b      	ldr	r3, [r3, #4]
 8003b3a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d116      	bne.n	8003b70 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003b42:	4b5c      	ldr	r3, [pc, #368]	; (8003cb4 <HAL_RCC_OscConfig+0x2ac>)
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	f003 0302 	and.w	r3, r3, #2
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d005      	beq.n	8003b5a <HAL_RCC_OscConfig+0x152>
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	68db      	ldr	r3, [r3, #12]
 8003b52:	2b01      	cmp	r3, #1
 8003b54:	d001      	beq.n	8003b5a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003b56:	2301      	movs	r3, #1
 8003b58:	e18d      	b.n	8003e76 <HAL_RCC_OscConfig+0x46e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b5a:	4b56      	ldr	r3, [pc, #344]	; (8003cb4 <HAL_RCC_OscConfig+0x2ac>)
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	691b      	ldr	r3, [r3, #16]
 8003b66:	00db      	lsls	r3, r3, #3
 8003b68:	4952      	ldr	r1, [pc, #328]	; (8003cb4 <HAL_RCC_OscConfig+0x2ac>)
 8003b6a:	4313      	orrs	r3, r2
 8003b6c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003b6e:	e03a      	b.n	8003be6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	68db      	ldr	r3, [r3, #12]
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d020      	beq.n	8003bba <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003b78:	4b4f      	ldr	r3, [pc, #316]	; (8003cb8 <HAL_RCC_OscConfig+0x2b0>)
 8003b7a:	2201      	movs	r2, #1
 8003b7c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b7e:	f7fd fad3 	bl	8001128 <HAL_GetTick>
 8003b82:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b84:	e008      	b.n	8003b98 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003b86:	f7fd facf 	bl	8001128 <HAL_GetTick>
 8003b8a:	4602      	mov	r2, r0
 8003b8c:	693b      	ldr	r3, [r7, #16]
 8003b8e:	1ad3      	subs	r3, r2, r3
 8003b90:	2b02      	cmp	r3, #2
 8003b92:	d901      	bls.n	8003b98 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003b94:	2303      	movs	r3, #3
 8003b96:	e16e      	b.n	8003e76 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b98:	4b46      	ldr	r3, [pc, #280]	; (8003cb4 <HAL_RCC_OscConfig+0x2ac>)
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	f003 0302 	and.w	r3, r3, #2
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d0f0      	beq.n	8003b86 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ba4:	4b43      	ldr	r3, [pc, #268]	; (8003cb4 <HAL_RCC_OscConfig+0x2ac>)
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	691b      	ldr	r3, [r3, #16]
 8003bb0:	00db      	lsls	r3, r3, #3
 8003bb2:	4940      	ldr	r1, [pc, #256]	; (8003cb4 <HAL_RCC_OscConfig+0x2ac>)
 8003bb4:	4313      	orrs	r3, r2
 8003bb6:	600b      	str	r3, [r1, #0]
 8003bb8:	e015      	b.n	8003be6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003bba:	4b3f      	ldr	r3, [pc, #252]	; (8003cb8 <HAL_RCC_OscConfig+0x2b0>)
 8003bbc:	2200      	movs	r2, #0
 8003bbe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bc0:	f7fd fab2 	bl	8001128 <HAL_GetTick>
 8003bc4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003bc6:	e008      	b.n	8003bda <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003bc8:	f7fd faae 	bl	8001128 <HAL_GetTick>
 8003bcc:	4602      	mov	r2, r0
 8003bce:	693b      	ldr	r3, [r7, #16]
 8003bd0:	1ad3      	subs	r3, r2, r3
 8003bd2:	2b02      	cmp	r3, #2
 8003bd4:	d901      	bls.n	8003bda <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003bd6:	2303      	movs	r3, #3
 8003bd8:	e14d      	b.n	8003e76 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003bda:	4b36      	ldr	r3, [pc, #216]	; (8003cb4 <HAL_RCC_OscConfig+0x2ac>)
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	f003 0302 	and.w	r3, r3, #2
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d1f0      	bne.n	8003bc8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	f003 0308 	and.w	r3, r3, #8
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d030      	beq.n	8003c54 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	695b      	ldr	r3, [r3, #20]
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d016      	beq.n	8003c28 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003bfa:	4b30      	ldr	r3, [pc, #192]	; (8003cbc <HAL_RCC_OscConfig+0x2b4>)
 8003bfc:	2201      	movs	r2, #1
 8003bfe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c00:	f7fd fa92 	bl	8001128 <HAL_GetTick>
 8003c04:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003c06:	e008      	b.n	8003c1a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003c08:	f7fd fa8e 	bl	8001128 <HAL_GetTick>
 8003c0c:	4602      	mov	r2, r0
 8003c0e:	693b      	ldr	r3, [r7, #16]
 8003c10:	1ad3      	subs	r3, r2, r3
 8003c12:	2b02      	cmp	r3, #2
 8003c14:	d901      	bls.n	8003c1a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003c16:	2303      	movs	r3, #3
 8003c18:	e12d      	b.n	8003e76 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003c1a:	4b26      	ldr	r3, [pc, #152]	; (8003cb4 <HAL_RCC_OscConfig+0x2ac>)
 8003c1c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003c1e:	f003 0302 	and.w	r3, r3, #2
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d0f0      	beq.n	8003c08 <HAL_RCC_OscConfig+0x200>
 8003c26:	e015      	b.n	8003c54 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003c28:	4b24      	ldr	r3, [pc, #144]	; (8003cbc <HAL_RCC_OscConfig+0x2b4>)
 8003c2a:	2200      	movs	r2, #0
 8003c2c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003c2e:	f7fd fa7b 	bl	8001128 <HAL_GetTick>
 8003c32:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003c34:	e008      	b.n	8003c48 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003c36:	f7fd fa77 	bl	8001128 <HAL_GetTick>
 8003c3a:	4602      	mov	r2, r0
 8003c3c:	693b      	ldr	r3, [r7, #16]
 8003c3e:	1ad3      	subs	r3, r2, r3
 8003c40:	2b02      	cmp	r3, #2
 8003c42:	d901      	bls.n	8003c48 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003c44:	2303      	movs	r3, #3
 8003c46:	e116      	b.n	8003e76 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003c48:	4b1a      	ldr	r3, [pc, #104]	; (8003cb4 <HAL_RCC_OscConfig+0x2ac>)
 8003c4a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003c4c:	f003 0302 	and.w	r3, r3, #2
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d1f0      	bne.n	8003c36 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	f003 0304 	and.w	r3, r3, #4
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	f000 80a0 	beq.w	8003da2 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003c62:	2300      	movs	r3, #0
 8003c64:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003c66:	4b13      	ldr	r3, [pc, #76]	; (8003cb4 <HAL_RCC_OscConfig+0x2ac>)
 8003c68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d10f      	bne.n	8003c92 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003c72:	2300      	movs	r3, #0
 8003c74:	60fb      	str	r3, [r7, #12]
 8003c76:	4b0f      	ldr	r3, [pc, #60]	; (8003cb4 <HAL_RCC_OscConfig+0x2ac>)
 8003c78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c7a:	4a0e      	ldr	r2, [pc, #56]	; (8003cb4 <HAL_RCC_OscConfig+0x2ac>)
 8003c7c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003c80:	6413      	str	r3, [r2, #64]	; 0x40
 8003c82:	4b0c      	ldr	r3, [pc, #48]	; (8003cb4 <HAL_RCC_OscConfig+0x2ac>)
 8003c84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c8a:	60fb      	str	r3, [r7, #12]
 8003c8c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8003c8e:	2301      	movs	r3, #1
 8003c90:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c92:	4b0b      	ldr	r3, [pc, #44]	; (8003cc0 <HAL_RCC_OscConfig+0x2b8>)
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d121      	bne.n	8003ce2 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003c9e:	4b08      	ldr	r3, [pc, #32]	; (8003cc0 <HAL_RCC_OscConfig+0x2b8>)
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	4a07      	ldr	r2, [pc, #28]	; (8003cc0 <HAL_RCC_OscConfig+0x2b8>)
 8003ca4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003ca8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003caa:	f7fd fa3d 	bl	8001128 <HAL_GetTick>
 8003cae:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003cb0:	e011      	b.n	8003cd6 <HAL_RCC_OscConfig+0x2ce>
 8003cb2:	bf00      	nop
 8003cb4:	40023800 	.word	0x40023800
 8003cb8:	42470000 	.word	0x42470000
 8003cbc:	42470e80 	.word	0x42470e80
 8003cc0:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003cc4:	f7fd fa30 	bl	8001128 <HAL_GetTick>
 8003cc8:	4602      	mov	r2, r0
 8003cca:	693b      	ldr	r3, [r7, #16]
 8003ccc:	1ad3      	subs	r3, r2, r3
 8003cce:	2b02      	cmp	r3, #2
 8003cd0:	d901      	bls.n	8003cd6 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8003cd2:	2303      	movs	r3, #3
 8003cd4:	e0cf      	b.n	8003e76 <HAL_RCC_OscConfig+0x46e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003cd6:	4b6a      	ldr	r3, [pc, #424]	; (8003e80 <HAL_RCC_OscConfig+0x478>)
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d0f0      	beq.n	8003cc4 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	689b      	ldr	r3, [r3, #8]
 8003ce6:	2b01      	cmp	r3, #1
 8003ce8:	d106      	bne.n	8003cf8 <HAL_RCC_OscConfig+0x2f0>
 8003cea:	4b66      	ldr	r3, [pc, #408]	; (8003e84 <HAL_RCC_OscConfig+0x47c>)
 8003cec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cee:	4a65      	ldr	r2, [pc, #404]	; (8003e84 <HAL_RCC_OscConfig+0x47c>)
 8003cf0:	f043 0301 	orr.w	r3, r3, #1
 8003cf4:	6713      	str	r3, [r2, #112]	; 0x70
 8003cf6:	e01c      	b.n	8003d32 <HAL_RCC_OscConfig+0x32a>
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	689b      	ldr	r3, [r3, #8]
 8003cfc:	2b05      	cmp	r3, #5
 8003cfe:	d10c      	bne.n	8003d1a <HAL_RCC_OscConfig+0x312>
 8003d00:	4b60      	ldr	r3, [pc, #384]	; (8003e84 <HAL_RCC_OscConfig+0x47c>)
 8003d02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d04:	4a5f      	ldr	r2, [pc, #380]	; (8003e84 <HAL_RCC_OscConfig+0x47c>)
 8003d06:	f043 0304 	orr.w	r3, r3, #4
 8003d0a:	6713      	str	r3, [r2, #112]	; 0x70
 8003d0c:	4b5d      	ldr	r3, [pc, #372]	; (8003e84 <HAL_RCC_OscConfig+0x47c>)
 8003d0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d10:	4a5c      	ldr	r2, [pc, #368]	; (8003e84 <HAL_RCC_OscConfig+0x47c>)
 8003d12:	f043 0301 	orr.w	r3, r3, #1
 8003d16:	6713      	str	r3, [r2, #112]	; 0x70
 8003d18:	e00b      	b.n	8003d32 <HAL_RCC_OscConfig+0x32a>
 8003d1a:	4b5a      	ldr	r3, [pc, #360]	; (8003e84 <HAL_RCC_OscConfig+0x47c>)
 8003d1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d1e:	4a59      	ldr	r2, [pc, #356]	; (8003e84 <HAL_RCC_OscConfig+0x47c>)
 8003d20:	f023 0301 	bic.w	r3, r3, #1
 8003d24:	6713      	str	r3, [r2, #112]	; 0x70
 8003d26:	4b57      	ldr	r3, [pc, #348]	; (8003e84 <HAL_RCC_OscConfig+0x47c>)
 8003d28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d2a:	4a56      	ldr	r2, [pc, #344]	; (8003e84 <HAL_RCC_OscConfig+0x47c>)
 8003d2c:	f023 0304 	bic.w	r3, r3, #4
 8003d30:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	689b      	ldr	r3, [r3, #8]
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d015      	beq.n	8003d66 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d3a:	f7fd f9f5 	bl	8001128 <HAL_GetTick>
 8003d3e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d40:	e00a      	b.n	8003d58 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003d42:	f7fd f9f1 	bl	8001128 <HAL_GetTick>
 8003d46:	4602      	mov	r2, r0
 8003d48:	693b      	ldr	r3, [r7, #16]
 8003d4a:	1ad3      	subs	r3, r2, r3
 8003d4c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d50:	4293      	cmp	r3, r2
 8003d52:	d901      	bls.n	8003d58 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8003d54:	2303      	movs	r3, #3
 8003d56:	e08e      	b.n	8003e76 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d58:	4b4a      	ldr	r3, [pc, #296]	; (8003e84 <HAL_RCC_OscConfig+0x47c>)
 8003d5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d5c:	f003 0302 	and.w	r3, r3, #2
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d0ee      	beq.n	8003d42 <HAL_RCC_OscConfig+0x33a>
 8003d64:	e014      	b.n	8003d90 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003d66:	f7fd f9df 	bl	8001128 <HAL_GetTick>
 8003d6a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003d6c:	e00a      	b.n	8003d84 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003d6e:	f7fd f9db 	bl	8001128 <HAL_GetTick>
 8003d72:	4602      	mov	r2, r0
 8003d74:	693b      	ldr	r3, [r7, #16]
 8003d76:	1ad3      	subs	r3, r2, r3
 8003d78:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d7c:	4293      	cmp	r3, r2
 8003d7e:	d901      	bls.n	8003d84 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8003d80:	2303      	movs	r3, #3
 8003d82:	e078      	b.n	8003e76 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003d84:	4b3f      	ldr	r3, [pc, #252]	; (8003e84 <HAL_RCC_OscConfig+0x47c>)
 8003d86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d88:	f003 0302 	and.w	r3, r3, #2
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d1ee      	bne.n	8003d6e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003d90:	7dfb      	ldrb	r3, [r7, #23]
 8003d92:	2b01      	cmp	r3, #1
 8003d94:	d105      	bne.n	8003da2 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003d96:	4b3b      	ldr	r3, [pc, #236]	; (8003e84 <HAL_RCC_OscConfig+0x47c>)
 8003d98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d9a:	4a3a      	ldr	r2, [pc, #232]	; (8003e84 <HAL_RCC_OscConfig+0x47c>)
 8003d9c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003da0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	699b      	ldr	r3, [r3, #24]
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d064      	beq.n	8003e74 <HAL_RCC_OscConfig+0x46c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003daa:	4b36      	ldr	r3, [pc, #216]	; (8003e84 <HAL_RCC_OscConfig+0x47c>)
 8003dac:	689b      	ldr	r3, [r3, #8]
 8003dae:	f003 030c 	and.w	r3, r3, #12
 8003db2:	2b08      	cmp	r3, #8
 8003db4:	d05c      	beq.n	8003e70 <HAL_RCC_OscConfig+0x468>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	699b      	ldr	r3, [r3, #24]
 8003dba:	2b02      	cmp	r3, #2
 8003dbc:	d141      	bne.n	8003e42 <HAL_RCC_OscConfig+0x43a>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003dbe:	4b32      	ldr	r3, [pc, #200]	; (8003e88 <HAL_RCC_OscConfig+0x480>)
 8003dc0:	2200      	movs	r2, #0
 8003dc2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003dc4:	f7fd f9b0 	bl	8001128 <HAL_GetTick>
 8003dc8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003dca:	e008      	b.n	8003dde <HAL_RCC_OscConfig+0x3d6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003dcc:	f7fd f9ac 	bl	8001128 <HAL_GetTick>
 8003dd0:	4602      	mov	r2, r0
 8003dd2:	693b      	ldr	r3, [r7, #16]
 8003dd4:	1ad3      	subs	r3, r2, r3
 8003dd6:	2b02      	cmp	r3, #2
 8003dd8:	d901      	bls.n	8003dde <HAL_RCC_OscConfig+0x3d6>
          {
            return HAL_TIMEOUT;
 8003dda:	2303      	movs	r3, #3
 8003ddc:	e04b      	b.n	8003e76 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003dde:	4b29      	ldr	r3, [pc, #164]	; (8003e84 <HAL_RCC_OscConfig+0x47c>)
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d1f0      	bne.n	8003dcc <HAL_RCC_OscConfig+0x3c4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	69da      	ldr	r2, [r3, #28]
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	6a1b      	ldr	r3, [r3, #32]
 8003df2:	431a      	orrs	r2, r3
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003df8:	019b      	lsls	r3, r3, #6
 8003dfa:	431a      	orrs	r2, r3
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e00:	085b      	lsrs	r3, r3, #1
 8003e02:	3b01      	subs	r3, #1
 8003e04:	041b      	lsls	r3, r3, #16
 8003e06:	431a      	orrs	r2, r3
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e0c:	061b      	lsls	r3, r3, #24
 8003e0e:	491d      	ldr	r1, [pc, #116]	; (8003e84 <HAL_RCC_OscConfig+0x47c>)
 8003e10:	4313      	orrs	r3, r2
 8003e12:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003e14:	4b1c      	ldr	r3, [pc, #112]	; (8003e88 <HAL_RCC_OscConfig+0x480>)
 8003e16:	2201      	movs	r2, #1
 8003e18:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e1a:	f7fd f985 	bl	8001128 <HAL_GetTick>
 8003e1e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003e20:	e008      	b.n	8003e34 <HAL_RCC_OscConfig+0x42c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003e22:	f7fd f981 	bl	8001128 <HAL_GetTick>
 8003e26:	4602      	mov	r2, r0
 8003e28:	693b      	ldr	r3, [r7, #16]
 8003e2a:	1ad3      	subs	r3, r2, r3
 8003e2c:	2b02      	cmp	r3, #2
 8003e2e:	d901      	bls.n	8003e34 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 8003e30:	2303      	movs	r3, #3
 8003e32:	e020      	b.n	8003e76 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003e34:	4b13      	ldr	r3, [pc, #76]	; (8003e84 <HAL_RCC_OscConfig+0x47c>)
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d0f0      	beq.n	8003e22 <HAL_RCC_OscConfig+0x41a>
 8003e40:	e018      	b.n	8003e74 <HAL_RCC_OscConfig+0x46c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003e42:	4b11      	ldr	r3, [pc, #68]	; (8003e88 <HAL_RCC_OscConfig+0x480>)
 8003e44:	2200      	movs	r2, #0
 8003e46:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e48:	f7fd f96e 	bl	8001128 <HAL_GetTick>
 8003e4c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e4e:	e008      	b.n	8003e62 <HAL_RCC_OscConfig+0x45a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003e50:	f7fd f96a 	bl	8001128 <HAL_GetTick>
 8003e54:	4602      	mov	r2, r0
 8003e56:	693b      	ldr	r3, [r7, #16]
 8003e58:	1ad3      	subs	r3, r2, r3
 8003e5a:	2b02      	cmp	r3, #2
 8003e5c:	d901      	bls.n	8003e62 <HAL_RCC_OscConfig+0x45a>
          {
            return HAL_TIMEOUT;
 8003e5e:	2303      	movs	r3, #3
 8003e60:	e009      	b.n	8003e76 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e62:	4b08      	ldr	r3, [pc, #32]	; (8003e84 <HAL_RCC_OscConfig+0x47c>)
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d1f0      	bne.n	8003e50 <HAL_RCC_OscConfig+0x448>
 8003e6e:	e001      	b.n	8003e74 <HAL_RCC_OscConfig+0x46c>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8003e70:	2301      	movs	r3, #1
 8003e72:	e000      	b.n	8003e76 <HAL_RCC_OscConfig+0x46e>
    }
  }
  return HAL_OK;
 8003e74:	2300      	movs	r3, #0
}
 8003e76:	4618      	mov	r0, r3
 8003e78:	3718      	adds	r7, #24
 8003e7a:	46bd      	mov	sp, r7
 8003e7c:	bd80      	pop	{r7, pc}
 8003e7e:	bf00      	nop
 8003e80:	40007000 	.word	0x40007000
 8003e84:	40023800 	.word	0x40023800
 8003e88:	42470060 	.word	0x42470060

08003e8c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003e8c:	b580      	push	{r7, lr}
 8003e8e:	b084      	sub	sp, #16
 8003e90:	af00      	add	r7, sp, #0
 8003e92:	6078      	str	r0, [r7, #4]
 8003e94:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d101      	bne.n	8003ea0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003e9c:	2301      	movs	r3, #1
 8003e9e:	e0ca      	b.n	8004036 <HAL_RCC_ClockConfig+0x1aa>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003ea0:	4b67      	ldr	r3, [pc, #412]	; (8004040 <HAL_RCC_ClockConfig+0x1b4>)
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	f003 030f 	and.w	r3, r3, #15
 8003ea8:	683a      	ldr	r2, [r7, #0]
 8003eaa:	429a      	cmp	r2, r3
 8003eac:	d90c      	bls.n	8003ec8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003eae:	4b64      	ldr	r3, [pc, #400]	; (8004040 <HAL_RCC_ClockConfig+0x1b4>)
 8003eb0:	683a      	ldr	r2, [r7, #0]
 8003eb2:	b2d2      	uxtb	r2, r2
 8003eb4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003eb6:	4b62      	ldr	r3, [pc, #392]	; (8004040 <HAL_RCC_ClockConfig+0x1b4>)
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	f003 030f 	and.w	r3, r3, #15
 8003ebe:	683a      	ldr	r2, [r7, #0]
 8003ec0:	429a      	cmp	r2, r3
 8003ec2:	d001      	beq.n	8003ec8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003ec4:	2301      	movs	r3, #1
 8003ec6:	e0b6      	b.n	8004036 <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	f003 0302 	and.w	r3, r3, #2
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d020      	beq.n	8003f16 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	f003 0304 	and.w	r3, r3, #4
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d005      	beq.n	8003eec <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003ee0:	4b58      	ldr	r3, [pc, #352]	; (8004044 <HAL_RCC_ClockConfig+0x1b8>)
 8003ee2:	689b      	ldr	r3, [r3, #8]
 8003ee4:	4a57      	ldr	r2, [pc, #348]	; (8004044 <HAL_RCC_ClockConfig+0x1b8>)
 8003ee6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003eea:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	f003 0308 	and.w	r3, r3, #8
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d005      	beq.n	8003f04 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003ef8:	4b52      	ldr	r3, [pc, #328]	; (8004044 <HAL_RCC_ClockConfig+0x1b8>)
 8003efa:	689b      	ldr	r3, [r3, #8]
 8003efc:	4a51      	ldr	r2, [pc, #324]	; (8004044 <HAL_RCC_ClockConfig+0x1b8>)
 8003efe:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003f02:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003f04:	4b4f      	ldr	r3, [pc, #316]	; (8004044 <HAL_RCC_ClockConfig+0x1b8>)
 8003f06:	689b      	ldr	r3, [r3, #8]
 8003f08:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	689b      	ldr	r3, [r3, #8]
 8003f10:	494c      	ldr	r1, [pc, #304]	; (8004044 <HAL_RCC_ClockConfig+0x1b8>)
 8003f12:	4313      	orrs	r3, r2
 8003f14:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	f003 0301 	and.w	r3, r3, #1
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d044      	beq.n	8003fac <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	685b      	ldr	r3, [r3, #4]
 8003f26:	2b01      	cmp	r3, #1
 8003f28:	d107      	bne.n	8003f3a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003f2a:	4b46      	ldr	r3, [pc, #280]	; (8004044 <HAL_RCC_ClockConfig+0x1b8>)
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d119      	bne.n	8003f6a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003f36:	2301      	movs	r3, #1
 8003f38:	e07d      	b.n	8004036 <HAL_RCC_ClockConfig+0x1aa>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	685b      	ldr	r3, [r3, #4]
 8003f3e:	2b02      	cmp	r3, #2
 8003f40:	d003      	beq.n	8003f4a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003f46:	2b03      	cmp	r3, #3
 8003f48:	d107      	bne.n	8003f5a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003f4a:	4b3e      	ldr	r3, [pc, #248]	; (8004044 <HAL_RCC_ClockConfig+0x1b8>)
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d109      	bne.n	8003f6a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003f56:	2301      	movs	r3, #1
 8003f58:	e06d      	b.n	8004036 <HAL_RCC_ClockConfig+0x1aa>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f5a:	4b3a      	ldr	r3, [pc, #232]	; (8004044 <HAL_RCC_ClockConfig+0x1b8>)
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	f003 0302 	and.w	r3, r3, #2
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d101      	bne.n	8003f6a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003f66:	2301      	movs	r3, #1
 8003f68:	e065      	b.n	8004036 <HAL_RCC_ClockConfig+0x1aa>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003f6a:	4b36      	ldr	r3, [pc, #216]	; (8004044 <HAL_RCC_ClockConfig+0x1b8>)
 8003f6c:	689b      	ldr	r3, [r3, #8]
 8003f6e:	f023 0203 	bic.w	r2, r3, #3
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	685b      	ldr	r3, [r3, #4]
 8003f76:	4933      	ldr	r1, [pc, #204]	; (8004044 <HAL_RCC_ClockConfig+0x1b8>)
 8003f78:	4313      	orrs	r3, r2
 8003f7a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003f7c:	f7fd f8d4 	bl	8001128 <HAL_GetTick>
 8003f80:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f82:	e00a      	b.n	8003f9a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003f84:	f7fd f8d0 	bl	8001128 <HAL_GetTick>
 8003f88:	4602      	mov	r2, r0
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	1ad3      	subs	r3, r2, r3
 8003f8e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f92:	4293      	cmp	r3, r2
 8003f94:	d901      	bls.n	8003f9a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003f96:	2303      	movs	r3, #3
 8003f98:	e04d      	b.n	8004036 <HAL_RCC_ClockConfig+0x1aa>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f9a:	4b2a      	ldr	r3, [pc, #168]	; (8004044 <HAL_RCC_ClockConfig+0x1b8>)
 8003f9c:	689b      	ldr	r3, [r3, #8]
 8003f9e:	f003 020c 	and.w	r2, r3, #12
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	685b      	ldr	r3, [r3, #4]
 8003fa6:	009b      	lsls	r3, r3, #2
 8003fa8:	429a      	cmp	r2, r3
 8003faa:	d1eb      	bne.n	8003f84 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003fac:	4b24      	ldr	r3, [pc, #144]	; (8004040 <HAL_RCC_ClockConfig+0x1b4>)
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	f003 030f 	and.w	r3, r3, #15
 8003fb4:	683a      	ldr	r2, [r7, #0]
 8003fb6:	429a      	cmp	r2, r3
 8003fb8:	d20c      	bcs.n	8003fd4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003fba:	4b21      	ldr	r3, [pc, #132]	; (8004040 <HAL_RCC_ClockConfig+0x1b4>)
 8003fbc:	683a      	ldr	r2, [r7, #0]
 8003fbe:	b2d2      	uxtb	r2, r2
 8003fc0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003fc2:	4b1f      	ldr	r3, [pc, #124]	; (8004040 <HAL_RCC_ClockConfig+0x1b4>)
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	f003 030f 	and.w	r3, r3, #15
 8003fca:	683a      	ldr	r2, [r7, #0]
 8003fcc:	429a      	cmp	r2, r3
 8003fce:	d001      	beq.n	8003fd4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003fd0:	2301      	movs	r3, #1
 8003fd2:	e030      	b.n	8004036 <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	f003 0304 	and.w	r3, r3, #4
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d008      	beq.n	8003ff2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003fe0:	4b18      	ldr	r3, [pc, #96]	; (8004044 <HAL_RCC_ClockConfig+0x1b8>)
 8003fe2:	689b      	ldr	r3, [r3, #8]
 8003fe4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	68db      	ldr	r3, [r3, #12]
 8003fec:	4915      	ldr	r1, [pc, #84]	; (8004044 <HAL_RCC_ClockConfig+0x1b8>)
 8003fee:	4313      	orrs	r3, r2
 8003ff0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	f003 0308 	and.w	r3, r3, #8
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d009      	beq.n	8004012 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003ffe:	4b11      	ldr	r3, [pc, #68]	; (8004044 <HAL_RCC_ClockConfig+0x1b8>)
 8004000:	689b      	ldr	r3, [r3, #8]
 8004002:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	691b      	ldr	r3, [r3, #16]
 800400a:	00db      	lsls	r3, r3, #3
 800400c:	490d      	ldr	r1, [pc, #52]	; (8004044 <HAL_RCC_ClockConfig+0x1b8>)
 800400e:	4313      	orrs	r3, r2
 8004010:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004012:	f000 f81d 	bl	8004050 <HAL_RCC_GetSysClockFreq>
 8004016:	4601      	mov	r1, r0
 8004018:	4b0a      	ldr	r3, [pc, #40]	; (8004044 <HAL_RCC_ClockConfig+0x1b8>)
 800401a:	689b      	ldr	r3, [r3, #8]
 800401c:	091b      	lsrs	r3, r3, #4
 800401e:	f003 030f 	and.w	r3, r3, #15
 8004022:	4a09      	ldr	r2, [pc, #36]	; (8004048 <HAL_RCC_ClockConfig+0x1bc>)
 8004024:	5cd3      	ldrb	r3, [r2, r3]
 8004026:	fa21 f303 	lsr.w	r3, r1, r3
 800402a:	4a08      	ldr	r2, [pc, #32]	; (800404c <HAL_RCC_ClockConfig+0x1c0>)
 800402c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (TICK_INT_PRIORITY);
 800402e:	2000      	movs	r0, #0
 8004030:	f7fc fe0e 	bl	8000c50 <HAL_InitTick>

  return HAL_OK;
 8004034:	2300      	movs	r3, #0
}
 8004036:	4618      	mov	r0, r3
 8004038:	3710      	adds	r7, #16
 800403a:	46bd      	mov	sp, r7
 800403c:	bd80      	pop	{r7, pc}
 800403e:	bf00      	nop
 8004040:	40023c00 	.word	0x40023c00
 8004044:	40023800 	.word	0x40023800
 8004048:	0801ad5c 	.word	0x0801ad5c
 800404c:	20000000 	.word	0x20000000

08004050 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004050:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004052:	b085      	sub	sp, #20
 8004054:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004056:	2300      	movs	r3, #0
 8004058:	607b      	str	r3, [r7, #4]
 800405a:	2300      	movs	r3, #0
 800405c:	60fb      	str	r3, [r7, #12]
 800405e:	2300      	movs	r3, #0
 8004060:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8004062:	2300      	movs	r3, #0
 8004064:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004066:	4b63      	ldr	r3, [pc, #396]	; (80041f4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004068:	689b      	ldr	r3, [r3, #8]
 800406a:	f003 030c 	and.w	r3, r3, #12
 800406e:	2b04      	cmp	r3, #4
 8004070:	d007      	beq.n	8004082 <HAL_RCC_GetSysClockFreq+0x32>
 8004072:	2b08      	cmp	r3, #8
 8004074:	d008      	beq.n	8004088 <HAL_RCC_GetSysClockFreq+0x38>
 8004076:	2b00      	cmp	r3, #0
 8004078:	f040 80b4 	bne.w	80041e4 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800407c:	4b5e      	ldr	r3, [pc, #376]	; (80041f8 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800407e:	60bb      	str	r3, [r7, #8]
       break;
 8004080:	e0b3      	b.n	80041ea <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004082:	4b5e      	ldr	r3, [pc, #376]	; (80041fc <HAL_RCC_GetSysClockFreq+0x1ac>)
 8004084:	60bb      	str	r3, [r7, #8]
      break;
 8004086:	e0b0      	b.n	80041ea <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004088:	4b5a      	ldr	r3, [pc, #360]	; (80041f4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800408a:	685b      	ldr	r3, [r3, #4]
 800408c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004090:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004092:	4b58      	ldr	r3, [pc, #352]	; (80041f4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004094:	685b      	ldr	r3, [r3, #4]
 8004096:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800409a:	2b00      	cmp	r3, #0
 800409c:	d04a      	beq.n	8004134 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800409e:	4b55      	ldr	r3, [pc, #340]	; (80041f4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80040a0:	685b      	ldr	r3, [r3, #4]
 80040a2:	099b      	lsrs	r3, r3, #6
 80040a4:	f04f 0400 	mov.w	r4, #0
 80040a8:	f240 11ff 	movw	r1, #511	; 0x1ff
 80040ac:	f04f 0200 	mov.w	r2, #0
 80040b0:	ea03 0501 	and.w	r5, r3, r1
 80040b4:	ea04 0602 	and.w	r6, r4, r2
 80040b8:	4629      	mov	r1, r5
 80040ba:	4632      	mov	r2, r6
 80040bc:	f04f 0300 	mov.w	r3, #0
 80040c0:	f04f 0400 	mov.w	r4, #0
 80040c4:	0154      	lsls	r4, r2, #5
 80040c6:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80040ca:	014b      	lsls	r3, r1, #5
 80040cc:	4619      	mov	r1, r3
 80040ce:	4622      	mov	r2, r4
 80040d0:	1b49      	subs	r1, r1, r5
 80040d2:	eb62 0206 	sbc.w	r2, r2, r6
 80040d6:	f04f 0300 	mov.w	r3, #0
 80040da:	f04f 0400 	mov.w	r4, #0
 80040de:	0194      	lsls	r4, r2, #6
 80040e0:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80040e4:	018b      	lsls	r3, r1, #6
 80040e6:	1a5b      	subs	r3, r3, r1
 80040e8:	eb64 0402 	sbc.w	r4, r4, r2
 80040ec:	f04f 0100 	mov.w	r1, #0
 80040f0:	f04f 0200 	mov.w	r2, #0
 80040f4:	00e2      	lsls	r2, r4, #3
 80040f6:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80040fa:	00d9      	lsls	r1, r3, #3
 80040fc:	460b      	mov	r3, r1
 80040fe:	4614      	mov	r4, r2
 8004100:	195b      	adds	r3, r3, r5
 8004102:	eb44 0406 	adc.w	r4, r4, r6
 8004106:	f04f 0100 	mov.w	r1, #0
 800410a:	f04f 0200 	mov.w	r2, #0
 800410e:	0262      	lsls	r2, r4, #9
 8004110:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8004114:	0259      	lsls	r1, r3, #9
 8004116:	460b      	mov	r3, r1
 8004118:	4614      	mov	r4, r2
 800411a:	4618      	mov	r0, r3
 800411c:	4621      	mov	r1, r4
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	f04f 0400 	mov.w	r4, #0
 8004124:	461a      	mov	r2, r3
 8004126:	4623      	mov	r3, r4
 8004128:	f7fc f8b2 	bl	8000290 <__aeabi_uldivmod>
 800412c:	4603      	mov	r3, r0
 800412e:	460c      	mov	r4, r1
 8004130:	60fb      	str	r3, [r7, #12]
 8004132:	e049      	b.n	80041c8 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004134:	4b2f      	ldr	r3, [pc, #188]	; (80041f4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004136:	685b      	ldr	r3, [r3, #4]
 8004138:	099b      	lsrs	r3, r3, #6
 800413a:	f04f 0400 	mov.w	r4, #0
 800413e:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004142:	f04f 0200 	mov.w	r2, #0
 8004146:	ea03 0501 	and.w	r5, r3, r1
 800414a:	ea04 0602 	and.w	r6, r4, r2
 800414e:	4629      	mov	r1, r5
 8004150:	4632      	mov	r2, r6
 8004152:	f04f 0300 	mov.w	r3, #0
 8004156:	f04f 0400 	mov.w	r4, #0
 800415a:	0154      	lsls	r4, r2, #5
 800415c:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8004160:	014b      	lsls	r3, r1, #5
 8004162:	4619      	mov	r1, r3
 8004164:	4622      	mov	r2, r4
 8004166:	1b49      	subs	r1, r1, r5
 8004168:	eb62 0206 	sbc.w	r2, r2, r6
 800416c:	f04f 0300 	mov.w	r3, #0
 8004170:	f04f 0400 	mov.w	r4, #0
 8004174:	0194      	lsls	r4, r2, #6
 8004176:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800417a:	018b      	lsls	r3, r1, #6
 800417c:	1a5b      	subs	r3, r3, r1
 800417e:	eb64 0402 	sbc.w	r4, r4, r2
 8004182:	f04f 0100 	mov.w	r1, #0
 8004186:	f04f 0200 	mov.w	r2, #0
 800418a:	00e2      	lsls	r2, r4, #3
 800418c:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8004190:	00d9      	lsls	r1, r3, #3
 8004192:	460b      	mov	r3, r1
 8004194:	4614      	mov	r4, r2
 8004196:	195b      	adds	r3, r3, r5
 8004198:	eb44 0406 	adc.w	r4, r4, r6
 800419c:	f04f 0100 	mov.w	r1, #0
 80041a0:	f04f 0200 	mov.w	r2, #0
 80041a4:	02a2      	lsls	r2, r4, #10
 80041a6:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80041aa:	0299      	lsls	r1, r3, #10
 80041ac:	460b      	mov	r3, r1
 80041ae:	4614      	mov	r4, r2
 80041b0:	4618      	mov	r0, r3
 80041b2:	4621      	mov	r1, r4
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	f04f 0400 	mov.w	r4, #0
 80041ba:	461a      	mov	r2, r3
 80041bc:	4623      	mov	r3, r4
 80041be:	f7fc f867 	bl	8000290 <__aeabi_uldivmod>
 80041c2:	4603      	mov	r3, r0
 80041c4:	460c      	mov	r4, r1
 80041c6:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80041c8:	4b0a      	ldr	r3, [pc, #40]	; (80041f4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80041ca:	685b      	ldr	r3, [r3, #4]
 80041cc:	0c1b      	lsrs	r3, r3, #16
 80041ce:	f003 0303 	and.w	r3, r3, #3
 80041d2:	3301      	adds	r3, #1
 80041d4:	005b      	lsls	r3, r3, #1
 80041d6:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80041d8:	68fa      	ldr	r2, [r7, #12]
 80041da:	683b      	ldr	r3, [r7, #0]
 80041dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80041e0:	60bb      	str	r3, [r7, #8]
      break;
 80041e2:	e002      	b.n	80041ea <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80041e4:	4b04      	ldr	r3, [pc, #16]	; (80041f8 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80041e6:	60bb      	str	r3, [r7, #8]
      break;
 80041e8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80041ea:	68bb      	ldr	r3, [r7, #8]
}
 80041ec:	4618      	mov	r0, r3
 80041ee:	3714      	adds	r7, #20
 80041f0:	46bd      	mov	sp, r7
 80041f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80041f4:	40023800 	.word	0x40023800
 80041f8:	00f42400 	.word	0x00f42400
 80041fc:	007a1200 	.word	0x007a1200

08004200 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004200:	b480      	push	{r7}
 8004202:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004204:	4b03      	ldr	r3, [pc, #12]	; (8004214 <HAL_RCC_GetHCLKFreq+0x14>)
 8004206:	681b      	ldr	r3, [r3, #0]
}
 8004208:	4618      	mov	r0, r3
 800420a:	46bd      	mov	sp, r7
 800420c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004210:	4770      	bx	lr
 8004212:	bf00      	nop
 8004214:	20000000 	.word	0x20000000

08004218 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004218:	b580      	push	{r7, lr}
 800421a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800421c:	f7ff fff0 	bl	8004200 <HAL_RCC_GetHCLKFreq>
 8004220:	4601      	mov	r1, r0
 8004222:	4b05      	ldr	r3, [pc, #20]	; (8004238 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004224:	689b      	ldr	r3, [r3, #8]
 8004226:	0b5b      	lsrs	r3, r3, #13
 8004228:	f003 0307 	and.w	r3, r3, #7
 800422c:	4a03      	ldr	r2, [pc, #12]	; (800423c <HAL_RCC_GetPCLK2Freq+0x24>)
 800422e:	5cd3      	ldrb	r3, [r2, r3]
 8004230:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004234:	4618      	mov	r0, r3
 8004236:	bd80      	pop	{r7, pc}
 8004238:	40023800 	.word	0x40023800
 800423c:	0801ad6c 	.word	0x0801ad6c

08004240 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004240:	b480      	push	{r7}
 8004242:	b083      	sub	sp, #12
 8004244:	af00      	add	r7, sp, #0
 8004246:	6078      	str	r0, [r7, #4]
 8004248:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	220f      	movs	r2, #15
 800424e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004250:	4b12      	ldr	r3, [pc, #72]	; (800429c <HAL_RCC_GetClockConfig+0x5c>)
 8004252:	689b      	ldr	r3, [r3, #8]
 8004254:	f003 0203 	and.w	r2, r3, #3
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800425c:	4b0f      	ldr	r3, [pc, #60]	; (800429c <HAL_RCC_GetClockConfig+0x5c>)
 800425e:	689b      	ldr	r3, [r3, #8]
 8004260:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8004268:	4b0c      	ldr	r3, [pc, #48]	; (800429c <HAL_RCC_GetClockConfig+0x5c>)
 800426a:	689b      	ldr	r3, [r3, #8]
 800426c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8004274:	4b09      	ldr	r3, [pc, #36]	; (800429c <HAL_RCC_GetClockConfig+0x5c>)
 8004276:	689b      	ldr	r3, [r3, #8]
 8004278:	08db      	lsrs	r3, r3, #3
 800427a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8004282:	4b07      	ldr	r3, [pc, #28]	; (80042a0 <HAL_RCC_GetClockConfig+0x60>)
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	f003 020f 	and.w	r2, r3, #15
 800428a:	683b      	ldr	r3, [r7, #0]
 800428c:	601a      	str	r2, [r3, #0]
}
 800428e:	bf00      	nop
 8004290:	370c      	adds	r7, #12
 8004292:	46bd      	mov	sp, r7
 8004294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004298:	4770      	bx	lr
 800429a:	bf00      	nop
 800429c:	40023800 	.word	0x40023800
 80042a0:	40023c00 	.word	0x40023c00

080042a4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80042a4:	b580      	push	{r7, lr}
 80042a6:	b082      	sub	sp, #8
 80042a8:	af00      	add	r7, sp, #0
 80042aa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d101      	bne.n	80042b6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80042b2:	2301      	movs	r3, #1
 80042b4:	e01d      	b.n	80042f2 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80042bc:	b2db      	uxtb	r3, r3
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d106      	bne.n	80042d0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	2200      	movs	r2, #0
 80042c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80042ca:	6878      	ldr	r0, [r7, #4]
 80042cc:	f000 f815 	bl	80042fa <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	2202      	movs	r2, #2
 80042d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681a      	ldr	r2, [r3, #0]
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	3304      	adds	r3, #4
 80042e0:	4619      	mov	r1, r3
 80042e2:	4610      	mov	r0, r2
 80042e4:	f000 f968 	bl	80045b8 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	2201      	movs	r2, #1
 80042ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80042f0:	2300      	movs	r3, #0
}
 80042f2:	4618      	mov	r0, r3
 80042f4:	3708      	adds	r7, #8
 80042f6:	46bd      	mov	sp, r7
 80042f8:	bd80      	pop	{r7, pc}

080042fa <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80042fa:	b480      	push	{r7}
 80042fc:	b083      	sub	sp, #12
 80042fe:	af00      	add	r7, sp, #0
 8004300:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8004302:	bf00      	nop
 8004304:	370c      	adds	r7, #12
 8004306:	46bd      	mov	sp, r7
 8004308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800430c:	4770      	bx	lr

0800430e <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800430e:	b480      	push	{r7}
 8004310:	b085      	sub	sp, #20
 8004312:	af00      	add	r7, sp, #0
 8004314:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	68da      	ldr	r2, [r3, #12]
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	f042 0201 	orr.w	r2, r2, #1
 8004324:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	689b      	ldr	r3, [r3, #8]
 800432c:	f003 0307 	and.w	r3, r3, #7
 8004330:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	2b06      	cmp	r3, #6
 8004336:	d007      	beq.n	8004348 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	681a      	ldr	r2, [r3, #0]
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	f042 0201 	orr.w	r2, r2, #1
 8004346:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004348:	2300      	movs	r3, #0
}
 800434a:	4618      	mov	r0, r3
 800434c:	3714      	adds	r7, #20
 800434e:	46bd      	mov	sp, r7
 8004350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004354:	4770      	bx	lr

08004356 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004356:	b580      	push	{r7, lr}
 8004358:	b082      	sub	sp, #8
 800435a:	af00      	add	r7, sp, #0
 800435c:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	691b      	ldr	r3, [r3, #16]
 8004364:	f003 0302 	and.w	r3, r3, #2
 8004368:	2b02      	cmp	r3, #2
 800436a:	d122      	bne.n	80043b2 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	68db      	ldr	r3, [r3, #12]
 8004372:	f003 0302 	and.w	r3, r3, #2
 8004376:	2b02      	cmp	r3, #2
 8004378:	d11b      	bne.n	80043b2 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	f06f 0202 	mvn.w	r2, #2
 8004382:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	2201      	movs	r2, #1
 8004388:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	699b      	ldr	r3, [r3, #24]
 8004390:	f003 0303 	and.w	r3, r3, #3
 8004394:	2b00      	cmp	r3, #0
 8004396:	d003      	beq.n	80043a0 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004398:	6878      	ldr	r0, [r7, #4]
 800439a:	f000 f8ee 	bl	800457a <HAL_TIM_IC_CaptureCallback>
 800439e:	e005      	b.n	80043ac <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80043a0:	6878      	ldr	r0, [r7, #4]
 80043a2:	f000 f8e0 	bl	8004566 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80043a6:	6878      	ldr	r0, [r7, #4]
 80043a8:	f000 f8f1 	bl	800458e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	2200      	movs	r2, #0
 80043b0:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	691b      	ldr	r3, [r3, #16]
 80043b8:	f003 0304 	and.w	r3, r3, #4
 80043bc:	2b04      	cmp	r3, #4
 80043be:	d122      	bne.n	8004406 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	68db      	ldr	r3, [r3, #12]
 80043c6:	f003 0304 	and.w	r3, r3, #4
 80043ca:	2b04      	cmp	r3, #4
 80043cc:	d11b      	bne.n	8004406 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	f06f 0204 	mvn.w	r2, #4
 80043d6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	2202      	movs	r2, #2
 80043dc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	699b      	ldr	r3, [r3, #24]
 80043e4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d003      	beq.n	80043f4 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80043ec:	6878      	ldr	r0, [r7, #4]
 80043ee:	f000 f8c4 	bl	800457a <HAL_TIM_IC_CaptureCallback>
 80043f2:	e005      	b.n	8004400 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80043f4:	6878      	ldr	r0, [r7, #4]
 80043f6:	f000 f8b6 	bl	8004566 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80043fa:	6878      	ldr	r0, [r7, #4]
 80043fc:	f000 f8c7 	bl	800458e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	2200      	movs	r2, #0
 8004404:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	691b      	ldr	r3, [r3, #16]
 800440c:	f003 0308 	and.w	r3, r3, #8
 8004410:	2b08      	cmp	r3, #8
 8004412:	d122      	bne.n	800445a <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	68db      	ldr	r3, [r3, #12]
 800441a:	f003 0308 	and.w	r3, r3, #8
 800441e:	2b08      	cmp	r3, #8
 8004420:	d11b      	bne.n	800445a <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	f06f 0208 	mvn.w	r2, #8
 800442a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	2204      	movs	r2, #4
 8004430:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	69db      	ldr	r3, [r3, #28]
 8004438:	f003 0303 	and.w	r3, r3, #3
 800443c:	2b00      	cmp	r3, #0
 800443e:	d003      	beq.n	8004448 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004440:	6878      	ldr	r0, [r7, #4]
 8004442:	f000 f89a 	bl	800457a <HAL_TIM_IC_CaptureCallback>
 8004446:	e005      	b.n	8004454 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004448:	6878      	ldr	r0, [r7, #4]
 800444a:	f000 f88c 	bl	8004566 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800444e:	6878      	ldr	r0, [r7, #4]
 8004450:	f000 f89d 	bl	800458e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	2200      	movs	r2, #0
 8004458:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	691b      	ldr	r3, [r3, #16]
 8004460:	f003 0310 	and.w	r3, r3, #16
 8004464:	2b10      	cmp	r3, #16
 8004466:	d122      	bne.n	80044ae <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	68db      	ldr	r3, [r3, #12]
 800446e:	f003 0310 	and.w	r3, r3, #16
 8004472:	2b10      	cmp	r3, #16
 8004474:	d11b      	bne.n	80044ae <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	f06f 0210 	mvn.w	r2, #16
 800447e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	2208      	movs	r2, #8
 8004484:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	69db      	ldr	r3, [r3, #28]
 800448c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004490:	2b00      	cmp	r3, #0
 8004492:	d003      	beq.n	800449c <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004494:	6878      	ldr	r0, [r7, #4]
 8004496:	f000 f870 	bl	800457a <HAL_TIM_IC_CaptureCallback>
 800449a:	e005      	b.n	80044a8 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800449c:	6878      	ldr	r0, [r7, #4]
 800449e:	f000 f862 	bl	8004566 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80044a2:	6878      	ldr	r0, [r7, #4]
 80044a4:	f000 f873 	bl	800458e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	2200      	movs	r2, #0
 80044ac:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	691b      	ldr	r3, [r3, #16]
 80044b4:	f003 0301 	and.w	r3, r3, #1
 80044b8:	2b01      	cmp	r3, #1
 80044ba:	d10e      	bne.n	80044da <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	68db      	ldr	r3, [r3, #12]
 80044c2:	f003 0301 	and.w	r3, r3, #1
 80044c6:	2b01      	cmp	r3, #1
 80044c8:	d107      	bne.n	80044da <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	f06f 0201 	mvn.w	r2, #1
 80044d2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80044d4:	6878      	ldr	r0, [r7, #4]
 80044d6:	f7fc fb75 	bl	8000bc4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	691b      	ldr	r3, [r3, #16]
 80044e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80044e4:	2b80      	cmp	r3, #128	; 0x80
 80044e6:	d10e      	bne.n	8004506 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	68db      	ldr	r3, [r3, #12]
 80044ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80044f2:	2b80      	cmp	r3, #128	; 0x80
 80044f4:	d107      	bne.n	8004506 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80044fe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004500:	6878      	ldr	r0, [r7, #4]
 8004502:	f000 f903 	bl	800470c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	691b      	ldr	r3, [r3, #16]
 800450c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004510:	2b40      	cmp	r3, #64	; 0x40
 8004512:	d10e      	bne.n	8004532 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	68db      	ldr	r3, [r3, #12]
 800451a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800451e:	2b40      	cmp	r3, #64	; 0x40
 8004520:	d107      	bne.n	8004532 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800452a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800452c:	6878      	ldr	r0, [r7, #4]
 800452e:	f000 f838 	bl	80045a2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	691b      	ldr	r3, [r3, #16]
 8004538:	f003 0320 	and.w	r3, r3, #32
 800453c:	2b20      	cmp	r3, #32
 800453e:	d10e      	bne.n	800455e <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	68db      	ldr	r3, [r3, #12]
 8004546:	f003 0320 	and.w	r3, r3, #32
 800454a:	2b20      	cmp	r3, #32
 800454c:	d107      	bne.n	800455e <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	f06f 0220 	mvn.w	r2, #32
 8004556:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004558:	6878      	ldr	r0, [r7, #4]
 800455a:	f000 f8cd 	bl	80046f8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800455e:	bf00      	nop
 8004560:	3708      	adds	r7, #8
 8004562:	46bd      	mov	sp, r7
 8004564:	bd80      	pop	{r7, pc}

08004566 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004566:	b480      	push	{r7}
 8004568:	b083      	sub	sp, #12
 800456a:	af00      	add	r7, sp, #0
 800456c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800456e:	bf00      	nop
 8004570:	370c      	adds	r7, #12
 8004572:	46bd      	mov	sp, r7
 8004574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004578:	4770      	bx	lr

0800457a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800457a:	b480      	push	{r7}
 800457c:	b083      	sub	sp, #12
 800457e:	af00      	add	r7, sp, #0
 8004580:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004582:	bf00      	nop
 8004584:	370c      	adds	r7, #12
 8004586:	46bd      	mov	sp, r7
 8004588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800458c:	4770      	bx	lr

0800458e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800458e:	b480      	push	{r7}
 8004590:	b083      	sub	sp, #12
 8004592:	af00      	add	r7, sp, #0
 8004594:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004596:	bf00      	nop
 8004598:	370c      	adds	r7, #12
 800459a:	46bd      	mov	sp, r7
 800459c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045a0:	4770      	bx	lr

080045a2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80045a2:	b480      	push	{r7}
 80045a4:	b083      	sub	sp, #12
 80045a6:	af00      	add	r7, sp, #0
 80045a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80045aa:	bf00      	nop
 80045ac:	370c      	adds	r7, #12
 80045ae:	46bd      	mov	sp, r7
 80045b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045b4:	4770      	bx	lr
	...

080045b8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80045b8:	b480      	push	{r7}
 80045ba:	b085      	sub	sp, #20
 80045bc:	af00      	add	r7, sp, #0
 80045be:	6078      	str	r0, [r7, #4]
 80045c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	4a40      	ldr	r2, [pc, #256]	; (80046cc <TIM_Base_SetConfig+0x114>)
 80045cc:	4293      	cmp	r3, r2
 80045ce:	d013      	beq.n	80045f8 <TIM_Base_SetConfig+0x40>
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80045d6:	d00f      	beq.n	80045f8 <TIM_Base_SetConfig+0x40>
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	4a3d      	ldr	r2, [pc, #244]	; (80046d0 <TIM_Base_SetConfig+0x118>)
 80045dc:	4293      	cmp	r3, r2
 80045de:	d00b      	beq.n	80045f8 <TIM_Base_SetConfig+0x40>
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	4a3c      	ldr	r2, [pc, #240]	; (80046d4 <TIM_Base_SetConfig+0x11c>)
 80045e4:	4293      	cmp	r3, r2
 80045e6:	d007      	beq.n	80045f8 <TIM_Base_SetConfig+0x40>
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	4a3b      	ldr	r2, [pc, #236]	; (80046d8 <TIM_Base_SetConfig+0x120>)
 80045ec:	4293      	cmp	r3, r2
 80045ee:	d003      	beq.n	80045f8 <TIM_Base_SetConfig+0x40>
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	4a3a      	ldr	r2, [pc, #232]	; (80046dc <TIM_Base_SetConfig+0x124>)
 80045f4:	4293      	cmp	r3, r2
 80045f6:	d108      	bne.n	800460a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80045fe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004600:	683b      	ldr	r3, [r7, #0]
 8004602:	685b      	ldr	r3, [r3, #4]
 8004604:	68fa      	ldr	r2, [r7, #12]
 8004606:	4313      	orrs	r3, r2
 8004608:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	4a2f      	ldr	r2, [pc, #188]	; (80046cc <TIM_Base_SetConfig+0x114>)
 800460e:	4293      	cmp	r3, r2
 8004610:	d02b      	beq.n	800466a <TIM_Base_SetConfig+0xb2>
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004618:	d027      	beq.n	800466a <TIM_Base_SetConfig+0xb2>
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	4a2c      	ldr	r2, [pc, #176]	; (80046d0 <TIM_Base_SetConfig+0x118>)
 800461e:	4293      	cmp	r3, r2
 8004620:	d023      	beq.n	800466a <TIM_Base_SetConfig+0xb2>
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	4a2b      	ldr	r2, [pc, #172]	; (80046d4 <TIM_Base_SetConfig+0x11c>)
 8004626:	4293      	cmp	r3, r2
 8004628:	d01f      	beq.n	800466a <TIM_Base_SetConfig+0xb2>
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	4a2a      	ldr	r2, [pc, #168]	; (80046d8 <TIM_Base_SetConfig+0x120>)
 800462e:	4293      	cmp	r3, r2
 8004630:	d01b      	beq.n	800466a <TIM_Base_SetConfig+0xb2>
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	4a29      	ldr	r2, [pc, #164]	; (80046dc <TIM_Base_SetConfig+0x124>)
 8004636:	4293      	cmp	r3, r2
 8004638:	d017      	beq.n	800466a <TIM_Base_SetConfig+0xb2>
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	4a28      	ldr	r2, [pc, #160]	; (80046e0 <TIM_Base_SetConfig+0x128>)
 800463e:	4293      	cmp	r3, r2
 8004640:	d013      	beq.n	800466a <TIM_Base_SetConfig+0xb2>
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	4a27      	ldr	r2, [pc, #156]	; (80046e4 <TIM_Base_SetConfig+0x12c>)
 8004646:	4293      	cmp	r3, r2
 8004648:	d00f      	beq.n	800466a <TIM_Base_SetConfig+0xb2>
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	4a26      	ldr	r2, [pc, #152]	; (80046e8 <TIM_Base_SetConfig+0x130>)
 800464e:	4293      	cmp	r3, r2
 8004650:	d00b      	beq.n	800466a <TIM_Base_SetConfig+0xb2>
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	4a25      	ldr	r2, [pc, #148]	; (80046ec <TIM_Base_SetConfig+0x134>)
 8004656:	4293      	cmp	r3, r2
 8004658:	d007      	beq.n	800466a <TIM_Base_SetConfig+0xb2>
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	4a24      	ldr	r2, [pc, #144]	; (80046f0 <TIM_Base_SetConfig+0x138>)
 800465e:	4293      	cmp	r3, r2
 8004660:	d003      	beq.n	800466a <TIM_Base_SetConfig+0xb2>
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	4a23      	ldr	r2, [pc, #140]	; (80046f4 <TIM_Base_SetConfig+0x13c>)
 8004666:	4293      	cmp	r3, r2
 8004668:	d108      	bne.n	800467c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004670:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004672:	683b      	ldr	r3, [r7, #0]
 8004674:	68db      	ldr	r3, [r3, #12]
 8004676:	68fa      	ldr	r2, [r7, #12]
 8004678:	4313      	orrs	r3, r2
 800467a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004682:	683b      	ldr	r3, [r7, #0]
 8004684:	695b      	ldr	r3, [r3, #20]
 8004686:	4313      	orrs	r3, r2
 8004688:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	68fa      	ldr	r2, [r7, #12]
 800468e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004690:	683b      	ldr	r3, [r7, #0]
 8004692:	689a      	ldr	r2, [r3, #8]
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004698:	683b      	ldr	r3, [r7, #0]
 800469a:	681a      	ldr	r2, [r3, #0]
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	4a0a      	ldr	r2, [pc, #40]	; (80046cc <TIM_Base_SetConfig+0x114>)
 80046a4:	4293      	cmp	r3, r2
 80046a6:	d003      	beq.n	80046b0 <TIM_Base_SetConfig+0xf8>
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	4a0c      	ldr	r2, [pc, #48]	; (80046dc <TIM_Base_SetConfig+0x124>)
 80046ac:	4293      	cmp	r3, r2
 80046ae:	d103      	bne.n	80046b8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80046b0:	683b      	ldr	r3, [r7, #0]
 80046b2:	691a      	ldr	r2, [r3, #16]
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	2201      	movs	r2, #1
 80046bc:	615a      	str	r2, [r3, #20]
}
 80046be:	bf00      	nop
 80046c0:	3714      	adds	r7, #20
 80046c2:	46bd      	mov	sp, r7
 80046c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c8:	4770      	bx	lr
 80046ca:	bf00      	nop
 80046cc:	40010000 	.word	0x40010000
 80046d0:	40000400 	.word	0x40000400
 80046d4:	40000800 	.word	0x40000800
 80046d8:	40000c00 	.word	0x40000c00
 80046dc:	40010400 	.word	0x40010400
 80046e0:	40014000 	.word	0x40014000
 80046e4:	40014400 	.word	0x40014400
 80046e8:	40014800 	.word	0x40014800
 80046ec:	40001800 	.word	0x40001800
 80046f0:	40001c00 	.word	0x40001c00
 80046f4:	40002000 	.word	0x40002000

080046f8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80046f8:	b480      	push	{r7}
 80046fa:	b083      	sub	sp, #12
 80046fc:	af00      	add	r7, sp, #0
 80046fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004700:	bf00      	nop
 8004702:	370c      	adds	r7, #12
 8004704:	46bd      	mov	sp, r7
 8004706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800470a:	4770      	bx	lr

0800470c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800470c:	b480      	push	{r7}
 800470e:	b083      	sub	sp, #12
 8004710:	af00      	add	r7, sp, #0
 8004712:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004714:	bf00      	nop
 8004716:	370c      	adds	r7, #12
 8004718:	46bd      	mov	sp, r7
 800471a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800471e:	4770      	bx	lr

08004720 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 8004720:	b480      	push	{r7}
 8004722:	b089      	sub	sp, #36	; 0x24
 8004724:	af00      	add	r7, sp, #0
 8004726:	60f8      	str	r0, [r7, #12]
 8004728:	60b9      	str	r1, [r7, #8]
 800472a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	681a      	ldr	r2, [r3, #0]
 8004730:	68bb      	ldr	r3, [r7, #8]
 8004732:	617b      	str	r3, [r7, #20]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004734:	697b      	ldr	r3, [r7, #20]
 8004736:	fa93 f3a3 	rbit	r3, r3
 800473a:	613b      	str	r3, [r7, #16]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800473c:	693b      	ldr	r3, [r7, #16]
 800473e:	fab3 f383 	clz	r3, r3
 8004742:	b2db      	uxtb	r3, r3
 8004744:	005b      	lsls	r3, r3, #1
 8004746:	2103      	movs	r1, #3
 8004748:	fa01 f303 	lsl.w	r3, r1, r3
 800474c:	43db      	mvns	r3, r3
 800474e:	401a      	ands	r2, r3
 8004750:	68bb      	ldr	r3, [r7, #8]
 8004752:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004754:	69fb      	ldr	r3, [r7, #28]
 8004756:	fa93 f3a3 	rbit	r3, r3
 800475a:	61bb      	str	r3, [r7, #24]
  return result;
 800475c:	69bb      	ldr	r3, [r7, #24]
 800475e:	fab3 f383 	clz	r3, r3
 8004762:	b2db      	uxtb	r3, r3
 8004764:	005b      	lsls	r3, r3, #1
 8004766:	6879      	ldr	r1, [r7, #4]
 8004768:	fa01 f303 	lsl.w	r3, r1, r3
 800476c:	431a      	orrs	r2, r3
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	601a      	str	r2, [r3, #0]
}
 8004772:	bf00      	nop
 8004774:	3724      	adds	r7, #36	; 0x24
 8004776:	46bd      	mov	sp, r7
 8004778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800477c:	4770      	bx	lr

0800477e <LL_GPIO_SetPinOutputType>:
  *         @arg @ref LL_GPIO_OUTPUT_PUSHPULL
  *         @arg @ref LL_GPIO_OUTPUT_OPENDRAIN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinOutputType(GPIO_TypeDef *GPIOx, uint32_t PinMask, uint32_t OutputType)
{
 800477e:	b480      	push	{r7}
 8004780:	b085      	sub	sp, #20
 8004782:	af00      	add	r7, sp, #0
 8004784:	60f8      	str	r0, [r7, #12]
 8004786:	60b9      	str	r1, [r7, #8]
 8004788:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	685a      	ldr	r2, [r3, #4]
 800478e:	68bb      	ldr	r3, [r7, #8]
 8004790:	43db      	mvns	r3, r3
 8004792:	401a      	ands	r2, r3
 8004794:	68bb      	ldr	r3, [r7, #8]
 8004796:	6879      	ldr	r1, [r7, #4]
 8004798:	fb01 f303 	mul.w	r3, r1, r3
 800479c:	431a      	orrs	r2, r3
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	605a      	str	r2, [r3, #4]
}
 80047a2:	bf00      	nop
 80047a4:	3714      	adds	r7, #20
 80047a6:	46bd      	mov	sp, r7
 80047a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ac:	4770      	bx	lr

080047ae <LL_GPIO_SetPinSpeed>:
  *         @arg @ref LL_GPIO_SPEED_FREQ_HIGH
  *         @arg @ref LL_GPIO_SPEED_FREQ_VERY_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
{
 80047ae:	b480      	push	{r7}
 80047b0:	b089      	sub	sp, #36	; 0x24
 80047b2:	af00      	add	r7, sp, #0
 80047b4:	60f8      	str	r0, [r7, #12]
 80047b6:	60b9      	str	r1, [r7, #8]
 80047b8:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	689a      	ldr	r2, [r3, #8]
 80047be:	68bb      	ldr	r3, [r7, #8]
 80047c0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80047c2:	697b      	ldr	r3, [r7, #20]
 80047c4:	fa93 f3a3 	rbit	r3, r3
 80047c8:	613b      	str	r3, [r7, #16]
  return result;
 80047ca:	693b      	ldr	r3, [r7, #16]
 80047cc:	fab3 f383 	clz	r3, r3
 80047d0:	b2db      	uxtb	r3, r3
 80047d2:	005b      	lsls	r3, r3, #1
 80047d4:	2103      	movs	r1, #3
 80047d6:	fa01 f303 	lsl.w	r3, r1, r3
 80047da:	43db      	mvns	r3, r3
 80047dc:	401a      	ands	r2, r3
 80047de:	68bb      	ldr	r3, [r7, #8]
 80047e0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80047e2:	69fb      	ldr	r3, [r7, #28]
 80047e4:	fa93 f3a3 	rbit	r3, r3
 80047e8:	61bb      	str	r3, [r7, #24]
  return result;
 80047ea:	69bb      	ldr	r3, [r7, #24]
 80047ec:	fab3 f383 	clz	r3, r3
 80047f0:	b2db      	uxtb	r3, r3
 80047f2:	005b      	lsls	r3, r3, #1
 80047f4:	6879      	ldr	r1, [r7, #4]
 80047f6:	fa01 f303 	lsl.w	r3, r1, r3
 80047fa:	431a      	orrs	r2, r3
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	609a      	str	r2, [r3, #8]
             (Speed << (POSITION_VAL(Pin) * 2U)));
}
 8004800:	bf00      	nop
 8004802:	3724      	adds	r7, #36	; 0x24
 8004804:	46bd      	mov	sp, r7
 8004806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800480a:	4770      	bx	lr

0800480c <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 800480c:	b480      	push	{r7}
 800480e:	b089      	sub	sp, #36	; 0x24
 8004810:	af00      	add	r7, sp, #0
 8004812:	60f8      	str	r0, [r7, #12]
 8004814:	60b9      	str	r1, [r7, #8]
 8004816:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	68da      	ldr	r2, [r3, #12]
 800481c:	68bb      	ldr	r3, [r7, #8]
 800481e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004820:	697b      	ldr	r3, [r7, #20]
 8004822:	fa93 f3a3 	rbit	r3, r3
 8004826:	613b      	str	r3, [r7, #16]
  return result;
 8004828:	693b      	ldr	r3, [r7, #16]
 800482a:	fab3 f383 	clz	r3, r3
 800482e:	b2db      	uxtb	r3, r3
 8004830:	005b      	lsls	r3, r3, #1
 8004832:	2103      	movs	r1, #3
 8004834:	fa01 f303 	lsl.w	r3, r1, r3
 8004838:	43db      	mvns	r3, r3
 800483a:	401a      	ands	r2, r3
 800483c:	68bb      	ldr	r3, [r7, #8]
 800483e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004840:	69fb      	ldr	r3, [r7, #28]
 8004842:	fa93 f3a3 	rbit	r3, r3
 8004846:	61bb      	str	r3, [r7, #24]
  return result;
 8004848:	69bb      	ldr	r3, [r7, #24]
 800484a:	fab3 f383 	clz	r3, r3
 800484e:	b2db      	uxtb	r3, r3
 8004850:	005b      	lsls	r3, r3, #1
 8004852:	6879      	ldr	r1, [r7, #4]
 8004854:	fa01 f303 	lsl.w	r3, r1, r3
 8004858:	431a      	orrs	r2, r3
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	60da      	str	r2, [r3, #12]
}
 800485e:	bf00      	nop
 8004860:	3724      	adds	r7, #36	; 0x24
 8004862:	46bd      	mov	sp, r7
 8004864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004868:	4770      	bx	lr

0800486a <LL_GPIO_SetAFPin_0_7>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_0_7(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 800486a:	b480      	push	{r7}
 800486c:	b089      	sub	sp, #36	; 0x24
 800486e:	af00      	add	r7, sp, #0
 8004870:	60f8      	str	r0, [r7, #12]
 8004872:	60b9      	str	r1, [r7, #8]
 8004874:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	6a1a      	ldr	r2, [r3, #32]
 800487a:	68bb      	ldr	r3, [r7, #8]
 800487c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800487e:	697b      	ldr	r3, [r7, #20]
 8004880:	fa93 f3a3 	rbit	r3, r3
 8004884:	613b      	str	r3, [r7, #16]
  return result;
 8004886:	693b      	ldr	r3, [r7, #16]
 8004888:	fab3 f383 	clz	r3, r3
 800488c:	b2db      	uxtb	r3, r3
 800488e:	009b      	lsls	r3, r3, #2
 8004890:	210f      	movs	r1, #15
 8004892:	fa01 f303 	lsl.w	r3, r1, r3
 8004896:	43db      	mvns	r3, r3
 8004898:	401a      	ands	r2, r3
 800489a:	68bb      	ldr	r3, [r7, #8]
 800489c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800489e:	69fb      	ldr	r3, [r7, #28]
 80048a0:	fa93 f3a3 	rbit	r3, r3
 80048a4:	61bb      	str	r3, [r7, #24]
  return result;
 80048a6:	69bb      	ldr	r3, [r7, #24]
 80048a8:	fab3 f383 	clz	r3, r3
 80048ac:	b2db      	uxtb	r3, r3
 80048ae:	009b      	lsls	r3, r3, #2
 80048b0:	6879      	ldr	r1, [r7, #4]
 80048b2:	fa01 f303 	lsl.w	r3, r1, r3
 80048b6:	431a      	orrs	r2, r3
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	621a      	str	r2, [r3, #32]
             (Alternate << (POSITION_VAL(Pin) * 4U)));
}
 80048bc:	bf00      	nop
 80048be:	3724      	adds	r7, #36	; 0x24
 80048c0:	46bd      	mov	sp, r7
 80048c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048c6:	4770      	bx	lr

080048c8 <LL_GPIO_SetAFPin_8_15>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_8_15(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 80048c8:	b480      	push	{r7}
 80048ca:	b089      	sub	sp, #36	; 0x24
 80048cc:	af00      	add	r7, sp, #0
 80048ce:	60f8      	str	r0, [r7, #12]
 80048d0:	60b9      	str	r1, [r7, #8]
 80048d2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80048d8:	68bb      	ldr	r3, [r7, #8]
 80048da:	0a1b      	lsrs	r3, r3, #8
 80048dc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80048de:	697b      	ldr	r3, [r7, #20]
 80048e0:	fa93 f3a3 	rbit	r3, r3
 80048e4:	613b      	str	r3, [r7, #16]
  return result;
 80048e6:	693b      	ldr	r3, [r7, #16]
 80048e8:	fab3 f383 	clz	r3, r3
 80048ec:	b2db      	uxtb	r3, r3
 80048ee:	009b      	lsls	r3, r3, #2
 80048f0:	210f      	movs	r1, #15
 80048f2:	fa01 f303 	lsl.w	r3, r1, r3
 80048f6:	43db      	mvns	r3, r3
 80048f8:	401a      	ands	r2, r3
 80048fa:	68bb      	ldr	r3, [r7, #8]
 80048fc:	0a1b      	lsrs	r3, r3, #8
 80048fe:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004900:	69fb      	ldr	r3, [r7, #28]
 8004902:	fa93 f3a3 	rbit	r3, r3
 8004906:	61bb      	str	r3, [r7, #24]
  return result;
 8004908:	69bb      	ldr	r3, [r7, #24]
 800490a:	fab3 f383 	clz	r3, r3
 800490e:	b2db      	uxtb	r3, r3
 8004910:	009b      	lsls	r3, r3, #2
 8004912:	6879      	ldr	r1, [r7, #4]
 8004914:	fa01 f303 	lsl.w	r3, r1, r3
 8004918:	431a      	orrs	r2, r3
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	625a      	str	r2, [r3, #36]	; 0x24
             (Alternate << (POSITION_VAL(Pin >> 8U) * 4U)));
}
 800491e:	bf00      	nop
 8004920:	3724      	adds	r7, #36	; 0x24
 8004922:	46bd      	mov	sp, r7
 8004924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004928:	4770      	bx	lr

0800492a <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 800492a:	b580      	push	{r7, lr}
 800492c:	b088      	sub	sp, #32
 800492e:	af00      	add	r7, sp, #0
 8004930:	6078      	str	r0, [r7, #4]
 8004932:	6039      	str	r1, [r7, #0]
  uint32_t pinpos     = 0x00000000U;
 8004934:	2300      	movs	r3, #0
 8004936:	61fb      	str	r3, [r7, #28]
  uint32_t currentpin = 0x00000000U;
 8004938:	2300      	movs	r3, #0
 800493a:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 800493c:	683b      	ldr	r3, [r7, #0]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004942:	697b      	ldr	r3, [r7, #20]
 8004944:	fa93 f3a3 	rbit	r3, r3
 8004948:	613b      	str	r3, [r7, #16]
  return result;
 800494a:	693b      	ldr	r3, [r7, #16]
 800494c:	fab3 f383 	clz	r3, r3
 8004950:	b2db      	uxtb	r3, r3
 8004952:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8004954:	e049      	b.n	80049ea <LL_GPIO_Init+0xc0>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001U << pinpos);
 8004956:	683b      	ldr	r3, [r7, #0]
 8004958:	681a      	ldr	r2, [r3, #0]
 800495a:	2101      	movs	r1, #1
 800495c:	69fb      	ldr	r3, [r7, #28]
 800495e:	fa01 f303 	lsl.w	r3, r1, r3
 8004962:	4013      	ands	r3, r2
 8004964:	61bb      	str	r3, [r7, #24]

    if (currentpin)
 8004966:	69bb      	ldr	r3, [r7, #24]
 8004968:	2b00      	cmp	r3, #0
 800496a:	d03b      	beq.n	80049e4 <LL_GPIO_Init+0xba>
    {
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 800496c:	683b      	ldr	r3, [r7, #0]
 800496e:	685b      	ldr	r3, [r3, #4]
 8004970:	461a      	mov	r2, r3
 8004972:	69b9      	ldr	r1, [r7, #24]
 8004974:	6878      	ldr	r0, [r7, #4]
 8004976:	f7ff fed3 	bl	8004720 <LL_GPIO_SetPinMode>

      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 800497a:	683b      	ldr	r3, [r7, #0]
 800497c:	685b      	ldr	r3, [r3, #4]
 800497e:	2b01      	cmp	r3, #1
 8004980:	d003      	beq.n	800498a <LL_GPIO_Init+0x60>
 8004982:	683b      	ldr	r3, [r7, #0]
 8004984:	685b      	ldr	r3, [r3, #4]
 8004986:	2b02      	cmp	r3, #2
 8004988:	d106      	bne.n	8004998 <LL_GPIO_Init+0x6e>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 800498a:	683b      	ldr	r3, [r7, #0]
 800498c:	689b      	ldr	r3, [r3, #8]
 800498e:	461a      	mov	r2, r3
 8004990:	69b9      	ldr	r1, [r7, #24]
 8004992:	6878      	ldr	r0, [r7, #4]
 8004994:	f7ff ff0b 	bl	80047ae <LL_GPIO_SetPinSpeed>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8004998:	683b      	ldr	r3, [r7, #0]
 800499a:	691b      	ldr	r3, [r3, #16]
 800499c:	461a      	mov	r2, r3
 800499e:	69b9      	ldr	r1, [r7, #24]
 80049a0:	6878      	ldr	r0, [r7, #4]
 80049a2:	f7ff ff33 	bl	800480c <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 80049a6:	683b      	ldr	r3, [r7, #0]
 80049a8:	685b      	ldr	r3, [r3, #4]
 80049aa:	2b02      	cmp	r3, #2
 80049ac:	d11a      	bne.n	80049e4 <LL_GPIO_Init+0xba>
 80049ae:	69bb      	ldr	r3, [r7, #24]
 80049b0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	fa93 f3a3 	rbit	r3, r3
 80049b8:	60bb      	str	r3, [r7, #8]
  return result;
 80049ba:	68bb      	ldr	r3, [r7, #8]
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 0x00000008U)
 80049bc:	fab3 f383 	clz	r3, r3
 80049c0:	b2db      	uxtb	r3, r3
 80049c2:	2b07      	cmp	r3, #7
 80049c4:	d807      	bhi.n	80049d6 <LL_GPIO_Init+0xac>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 80049c6:	683b      	ldr	r3, [r7, #0]
 80049c8:	695b      	ldr	r3, [r3, #20]
 80049ca:	461a      	mov	r2, r3
 80049cc:	69b9      	ldr	r1, [r7, #24]
 80049ce:	6878      	ldr	r0, [r7, #4]
 80049d0:	f7ff ff4b 	bl	800486a <LL_GPIO_SetAFPin_0_7>
 80049d4:	e006      	b.n	80049e4 <LL_GPIO_Init+0xba>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 80049d6:	683b      	ldr	r3, [r7, #0]
 80049d8:	695b      	ldr	r3, [r3, #20]
 80049da:	461a      	mov	r2, r3
 80049dc:	69b9      	ldr	r1, [r7, #24]
 80049de:	6878      	ldr	r0, [r7, #4]
 80049e0:	f7ff ff72 	bl	80048c8 <LL_GPIO_SetAFPin_8_15>
        }
      }
    }
    pinpos++;
 80049e4:	69fb      	ldr	r3, [r7, #28]
 80049e6:	3301      	adds	r3, #1
 80049e8:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 80049ea:	683b      	ldr	r3, [r7, #0]
 80049ec:	681a      	ldr	r2, [r3, #0]
 80049ee:	69fb      	ldr	r3, [r7, #28]
 80049f0:	fa22 f303 	lsr.w	r3, r2, r3
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d1ae      	bne.n	8004956 <LL_GPIO_Init+0x2c>
  }

  if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 80049f8:	683b      	ldr	r3, [r7, #0]
 80049fa:	685b      	ldr	r3, [r3, #4]
 80049fc:	2b01      	cmp	r3, #1
 80049fe:	d003      	beq.n	8004a08 <LL_GPIO_Init+0xde>
 8004a00:	683b      	ldr	r3, [r7, #0]
 8004a02:	685b      	ldr	r3, [r3, #4]
 8004a04:	2b02      	cmp	r3, #2
 8004a06:	d107      	bne.n	8004a18 <LL_GPIO_Init+0xee>
  {
    /* Check Output mode parameters */
    assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

    /* Output mode configuration*/
    LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 8004a08:	683b      	ldr	r3, [r7, #0]
 8004a0a:	6819      	ldr	r1, [r3, #0]
 8004a0c:	683b      	ldr	r3, [r7, #0]
 8004a0e:	68db      	ldr	r3, [r3, #12]
 8004a10:	461a      	mov	r2, r3
 8004a12:	6878      	ldr	r0, [r7, #4]
 8004a14:	f7ff feb3 	bl	800477e <LL_GPIO_SetPinOutputType>

  }
  return (SUCCESS);
 8004a18:	2300      	movs	r3, #0
}
 8004a1a:	4618      	mov	r0, r3
 8004a1c:	3720      	adds	r7, #32
 8004a1e:	46bd      	mov	sp, r7
 8004a20:	bd80      	pop	{r7, pc}

08004a22 <LL_I2C_Enable>:
{
 8004a22:	b480      	push	{r7}
 8004a24:	b083      	sub	sp, #12
 8004a26:	af00      	add	r7, sp, #0
 8004a28:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR1, I2C_CR1_PE);
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	f043 0201 	orr.w	r2, r3, #1
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	601a      	str	r2, [r3, #0]
}
 8004a36:	bf00      	nop
 8004a38:	370c      	adds	r7, #12
 8004a3a:	46bd      	mov	sp, r7
 8004a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a40:	4770      	bx	lr

08004a42 <LL_I2C_Disable>:
{
 8004a42:	b480      	push	{r7}
 8004a44:	b083      	sub	sp, #12
 8004a46:	af00      	add	r7, sp, #0
 8004a48:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_PE);
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	f023 0201 	bic.w	r2, r3, #1
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	601a      	str	r2, [r3, #0]
}
 8004a56:	bf00      	nop
 8004a58:	370c      	adds	r7, #12
 8004a5a:	46bd      	mov	sp, r7
 8004a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a60:	4770      	bx	lr

08004a62 <LL_I2C_ConfigFilters>:
{
 8004a62:	b480      	push	{r7}
 8004a64:	b085      	sub	sp, #20
 8004a66:	af00      	add	r7, sp, #0
 8004a68:	60f8      	str	r0, [r7, #12]
 8004a6a:	60b9      	str	r1, [r7, #8]
 8004a6c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(I2Cx->FLTR, I2C_FLTR_ANOFF | I2C_FLTR_DNF, AnalogFilter | DigitalFilter);
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a72:	f023 021f 	bic.w	r2, r3, #31
 8004a76:	68b9      	ldr	r1, [r7, #8]
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	430b      	orrs	r3, r1
 8004a7c:	431a      	orrs	r2, r3
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	625a      	str	r2, [r3, #36]	; 0x24
}
 8004a82:	bf00      	nop
 8004a84:	3714      	adds	r7, #20
 8004a86:	46bd      	mov	sp, r7
 8004a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a8c:	4770      	bx	lr

08004a8e <LL_I2C_SetOwnAddress1>:
{
 8004a8e:	b480      	push	{r7}
 8004a90:	b085      	sub	sp, #20
 8004a92:	af00      	add	r7, sp, #0
 8004a94:	60f8      	str	r0, [r7, #12]
 8004a96:	60b9      	str	r1, [r7, #8]
 8004a98:	607a      	str	r2, [r7, #4]
  MODIFY_REG(I2Cx->OAR1, I2C_OAR1_ADD0 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD8_9 | I2C_OAR1_ADDMODE, OwnAddress1 | OwnAddrSize);
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	689b      	ldr	r3, [r3, #8]
 8004a9e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8004aa2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004aa6:	68b9      	ldr	r1, [r7, #8]
 8004aa8:	687a      	ldr	r2, [r7, #4]
 8004aaa:	430a      	orrs	r2, r1
 8004aac:	431a      	orrs	r2, r3
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	609a      	str	r2, [r3, #8]
}
 8004ab2:	bf00      	nop
 8004ab4:	3714      	adds	r7, #20
 8004ab6:	46bd      	mov	sp, r7
 8004ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004abc:	4770      	bx	lr
	...

08004ac0 <LL_I2C_ConfigSpeed>:
  *         @arg @ref LL_I2C_DUTYCYCLE_16_9
  * @retval None
  */
__STATIC_INLINE void LL_I2C_ConfigSpeed(I2C_TypeDef *I2Cx, uint32_t PeriphClock, uint32_t ClockSpeed,
                                        uint32_t DutyCycle)
{
 8004ac0:	b490      	push	{r4, r7}
 8004ac2:	b084      	sub	sp, #16
 8004ac4:	af00      	add	r7, sp, #0
 8004ac6:	60f8      	str	r0, [r7, #12]
 8004ac8:	60b9      	str	r1, [r7, #8]
 8004aca:	607a      	str	r2, [r7, #4]
 8004acc:	603b      	str	r3, [r7, #0]
  register uint32_t freqrange = 0x0U;
 8004ace:	2400      	movs	r4, #0
  register uint32_t clockconfig = 0x0U;
 8004ad0:	2400      	movs	r4, #0

  /* Compute frequency range */
  freqrange = __LL_I2C_FREQ_HZ_TO_MHZ(PeriphClock);
 8004ad2:	68bb      	ldr	r3, [r7, #8]
 8004ad4:	4a3f      	ldr	r2, [pc, #252]	; (8004bd4 <LL_I2C_ConfigSpeed+0x114>)
 8004ad6:	fba2 2303 	umull	r2, r3, r2, r3
 8004ada:	0c9c      	lsrs	r4, r3, #18

  /* Configure I2Cx: Frequency range register */
  MODIFY_REG(I2Cx->CR2, I2C_CR2_FREQ, freqrange);
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	685b      	ldr	r3, [r3, #4]
 8004ae0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8004ae4:	ea44 0203 	orr.w	r2, r4, r3
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	605a      	str	r2, [r3, #4]

  /* Configure I2Cx: Rise Time register */
  MODIFY_REG(I2Cx->TRISE, I2C_TRISE_TRISE, __LL_I2C_RISE_TIME(freqrange, ClockSpeed));
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	6a1b      	ldr	r3, [r3, #32]
 8004af0:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	4938      	ldr	r1, [pc, #224]	; (8004bd8 <LL_I2C_ConfigSpeed+0x118>)
 8004af8:	428b      	cmp	r3, r1
 8004afa:	d801      	bhi.n	8004b00 <LL_I2C_ConfigSpeed+0x40>
 8004afc:	1c63      	adds	r3, r4, #1
 8004afe:	e008      	b.n	8004b12 <LL_I2C_ConfigSpeed+0x52>
 8004b00:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8004b04:	fb03 f304 	mul.w	r3, r3, r4
 8004b08:	4934      	ldr	r1, [pc, #208]	; (8004bdc <LL_I2C_ConfigSpeed+0x11c>)
 8004b0a:	fba1 1303 	umull	r1, r3, r1, r3
 8004b0e:	099b      	lsrs	r3, r3, #6
 8004b10:	3301      	adds	r3, #1
 8004b12:	431a      	orrs	r2, r3
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	621a      	str	r2, [r3, #32]

  /* Configure Speed mode, Duty Cycle and Clock control register value */
  if (ClockSpeed > LL_I2C_MAX_SPEED_STANDARD)
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	4a2f      	ldr	r2, [pc, #188]	; (8004bd8 <LL_I2C_ConfigSpeed+0x118>)
 8004b1c:	4293      	cmp	r3, r2
 8004b1e:	d939      	bls.n	8004b94 <LL_I2C_ConfigSpeed+0xd4>
  {
    /* Set Speed mode at fast and duty cycle for Clock Speed request in fast clock range */
    clockconfig = LL_I2C_CLOCK_SPEED_FAST_MODE                                          | \
 8004b20:	683b      	ldr	r3, [r7, #0]
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d117      	bne.n	8004b56 <LL_I2C_ConfigSpeed+0x96>
                  __LL_I2C_SPEED_FAST_TO_CCR(PeriphClock, ClockSpeed, DutyCycle)        | \
 8004b26:	687a      	ldr	r2, [r7, #4]
 8004b28:	4613      	mov	r3, r2
 8004b2a:	005b      	lsls	r3, r3, #1
 8004b2c:	4413      	add	r3, r2
 8004b2e:	68ba      	ldr	r2, [r7, #8]
 8004b30:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b34:	f3c3 030b 	ubfx	r3, r3, #0, #12
    clockconfig = LL_I2C_CLOCK_SPEED_FAST_MODE                                          | \
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d009      	beq.n	8004b50 <LL_I2C_ConfigSpeed+0x90>
                  __LL_I2C_SPEED_FAST_TO_CCR(PeriphClock, ClockSpeed, DutyCycle)        | \
 8004b3c:	687a      	ldr	r2, [r7, #4]
 8004b3e:	4613      	mov	r3, r2
 8004b40:	005b      	lsls	r3, r3, #1
 8004b42:	4413      	add	r3, r2
 8004b44:	68ba      	ldr	r2, [r7, #8]
 8004b46:	fbb2 f3f3 	udiv	r3, r2, r3
    clockconfig = LL_I2C_CLOCK_SPEED_FAST_MODE                                          | \
 8004b4a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004b4e:	e01d      	b.n	8004b8c <LL_I2C_ConfigSpeed+0xcc>
 8004b50:	f248 0301 	movw	r3, #32769	; 0x8001
 8004b54:	e01a      	b.n	8004b8c <LL_I2C_ConfigSpeed+0xcc>
                  __LL_I2C_SPEED_FAST_TO_CCR(PeriphClock, ClockSpeed, DutyCycle)        | \
 8004b56:	687a      	ldr	r2, [r7, #4]
 8004b58:	4613      	mov	r3, r2
 8004b5a:	009b      	lsls	r3, r3, #2
 8004b5c:	4413      	add	r3, r2
 8004b5e:	009a      	lsls	r2, r3, #2
 8004b60:	4413      	add	r3, r2
 8004b62:	68ba      	ldr	r2, [r7, #8]
 8004b64:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b68:	f3c3 030b 	ubfx	r3, r3, #0, #12
    clockconfig = LL_I2C_CLOCK_SPEED_FAST_MODE                                          | \
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d00b      	beq.n	8004b88 <LL_I2C_ConfigSpeed+0xc8>
                  __LL_I2C_SPEED_FAST_TO_CCR(PeriphClock, ClockSpeed, DutyCycle)        | \
 8004b70:	687a      	ldr	r2, [r7, #4]
 8004b72:	4613      	mov	r3, r2
 8004b74:	009b      	lsls	r3, r3, #2
 8004b76:	4413      	add	r3, r2
 8004b78:	009a      	lsls	r2, r3, #2
 8004b7a:	4413      	add	r3, r2
 8004b7c:	68ba      	ldr	r2, [r7, #8]
 8004b7e:	fbb2 f3f3 	udiv	r3, r2, r3
    clockconfig = LL_I2C_CLOCK_SPEED_FAST_MODE                                          | \
 8004b82:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004b86:	e001      	b.n	8004b8c <LL_I2C_ConfigSpeed+0xcc>
 8004b88:	f248 0301 	movw	r3, #32769	; 0x8001
 8004b8c:	683a      	ldr	r2, [r7, #0]
 8004b8e:	ea43 0402 	orr.w	r4, r3, r2
 8004b92:	e010      	b.n	8004bb6 <LL_I2C_ConfigSpeed+0xf6>
  }
  else
  {
    /* Set Speed mode at standard for Clock Speed request in standard clock range */
    clockconfig = LL_I2C_CLOCK_SPEED_STANDARD_MODE                                      | \
                  __LL_I2C_SPEED_STANDARD_TO_CCR(PeriphClock, ClockSpeed);
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	005b      	lsls	r3, r3, #1
 8004b98:	68ba      	ldr	r2, [r7, #8]
 8004b9a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b9e:	f3c3 030b 	ubfx	r3, r3, #0, #12
    clockconfig = LL_I2C_CLOCK_SPEED_STANDARD_MODE                                      | \
 8004ba2:	2b03      	cmp	r3, #3
 8004ba4:	d905      	bls.n	8004bb2 <LL_I2C_ConfigSpeed+0xf2>
                  __LL_I2C_SPEED_STANDARD_TO_CCR(PeriphClock, ClockSpeed);
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	005b      	lsls	r3, r3, #1
    clockconfig = LL_I2C_CLOCK_SPEED_STANDARD_MODE                                      | \
 8004baa:	68ba      	ldr	r2, [r7, #8]
 8004bac:	fbb2 f3f3 	udiv	r3, r2, r3
 8004bb0:	e000      	b.n	8004bb4 <LL_I2C_ConfigSpeed+0xf4>
 8004bb2:	2304      	movs	r3, #4
 8004bb4:	461c      	mov	r4, r3
  }

  /* Configure I2Cx: Clock control register */
  MODIFY_REG(I2Cx->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), clockconfig);
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	69db      	ldr	r3, [r3, #28]
 8004bba:	f423 434f 	bic.w	r3, r3, #52992	; 0xcf00
 8004bbe:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004bc2:	ea44 0203 	orr.w	r2, r4, r3
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	61da      	str	r2, [r3, #28]
}
 8004bca:	bf00      	nop
 8004bcc:	3710      	adds	r7, #16
 8004bce:	46bd      	mov	sp, r7
 8004bd0:	bc90      	pop	{r4, r7}
 8004bd2:	4770      	bx	lr
 8004bd4:	431bde83 	.word	0x431bde83
 8004bd8:	000186a0 	.word	0x000186a0
 8004bdc:	10624dd3 	.word	0x10624dd3

08004be0 <LL_I2C_SetMode>:
  *         @arg @ref LL_I2C_MODE_SMBUS_DEVICE
  *         @arg @ref LL_I2C_MODE_SMBUS_DEVICE_ARP
  * @retval None
  */
__STATIC_INLINE void LL_I2C_SetMode(I2C_TypeDef *I2Cx, uint32_t PeripheralMode)
{
 8004be0:	b480      	push	{r7}
 8004be2:	b083      	sub	sp, #12
 8004be4:	af00      	add	r7, sp, #0
 8004be6:	6078      	str	r0, [r7, #4]
 8004be8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->CR1, I2C_CR1_SMBUS | I2C_CR1_SMBTYPE | I2C_CR1_ENARP, PeripheralMode);
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	f023 021a 	bic.w	r2, r3, #26
 8004bf2:	683b      	ldr	r3, [r7, #0]
 8004bf4:	431a      	orrs	r2, r3
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	601a      	str	r2, [r3, #0]
}
 8004bfa:	bf00      	nop
 8004bfc:	370c      	adds	r7, #12
 8004bfe:	46bd      	mov	sp, r7
 8004c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c04:	4770      	bx	lr

08004c06 <LL_I2C_AcknowledgeNextData>:
  *         @arg @ref LL_I2C_ACK
  *         @arg @ref LL_I2C_NACK
  * @retval None
  */
__STATIC_INLINE void LL_I2C_AcknowledgeNextData(I2C_TypeDef *I2Cx, uint32_t TypeAcknowledge)
{
 8004c06:	b480      	push	{r7}
 8004c08:	b083      	sub	sp, #12
 8004c0a:	af00      	add	r7, sp, #0
 8004c0c:	6078      	str	r0, [r7, #4]
 8004c0e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->CR1, I2C_CR1_ACK, TypeAcknowledge);
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8004c18:	683b      	ldr	r3, [r7, #0]
 8004c1a:	431a      	orrs	r2, r3
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	601a      	str	r2, [r3, #0]
}
 8004c20:	bf00      	nop
 8004c22:	370c      	adds	r7, #12
 8004c24:	46bd      	mov	sp, r7
 8004c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c2a:	4770      	bx	lr

08004c2c <LL_I2C_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS  I2C registers are initialized
  *          - ERROR  Not applicable
  */
uint32_t LL_I2C_Init(I2C_TypeDef *I2Cx, LL_I2C_InitTypeDef *I2C_InitStruct)
{
 8004c2c:	b580      	push	{r7, lr}
 8004c2e:	b086      	sub	sp, #24
 8004c30:	af00      	add	r7, sp, #0
 8004c32:	6078      	str	r0, [r7, #4]
 8004c34:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_I2C_OWN_ADDRESS1(I2C_InitStruct->OwnAddress1));
  assert_param(IS_LL_I2C_TYPE_ACKNOWLEDGE(I2C_InitStruct->TypeAcknowledge));
  assert_param(IS_LL_I2C_OWN_ADDRSIZE(I2C_InitStruct->OwnAddrSize));

  /* Disable the selected I2Cx Peripheral */
  LL_I2C_Disable(I2Cx);
 8004c36:	6878      	ldr	r0, [r7, #4]
 8004c38:	f7ff ff03 	bl	8004a42 <LL_I2C_Disable>

  /* Retrieve Clock frequencies */
  LL_RCC_GetSystemClocksFreq(&rcc_clocks);
 8004c3c:	f107 0308 	add.w	r3, r7, #8
 8004c40:	4618      	mov	r0, r3
 8004c42:	f000 f89d 	bl	8004d80 <LL_RCC_GetSystemClocksFreq>
  /*---------------------------- I2Cx FLTR Configuration -----------------------
   * Configure the analog and digital noise filters with parameters :
   * - AnalogFilter: I2C_FLTR_ANFOFF bit
   * - DigitalFilter: I2C_FLTR_DNF[3:0] bits
   */
  LL_I2C_ConfigFilters(I2Cx, I2C_InitStruct->AnalogFilter, I2C_InitStruct->DigitalFilter);
 8004c46:	683b      	ldr	r3, [r7, #0]
 8004c48:	68d9      	ldr	r1, [r3, #12]
 8004c4a:	683b      	ldr	r3, [r7, #0]
 8004c4c:	691b      	ldr	r3, [r3, #16]
 8004c4e:	461a      	mov	r2, r3
 8004c50:	6878      	ldr	r0, [r7, #4]
 8004c52:	f7ff ff06 	bl	8004a62 <LL_I2C_ConfigFilters>
   * Configure the SCL speed :
   * - ClockSpeed: I2C_CR2_FREQ[5:0], I2C_TRISE_TRISE[5:0], I2C_CCR_FS,
   *           and I2C_CCR_CCR[11:0] bits
   * - DutyCycle: I2C_CCR_DUTY[7:0] bits
   */
  LL_I2C_ConfigSpeed(I2Cx, rcc_clocks.PCLK1_Frequency, I2C_InitStruct->ClockSpeed, I2C_InitStruct->DutyCycle);
 8004c56:	6939      	ldr	r1, [r7, #16]
 8004c58:	683b      	ldr	r3, [r7, #0]
 8004c5a:	685a      	ldr	r2, [r3, #4]
 8004c5c:	683b      	ldr	r3, [r7, #0]
 8004c5e:	689b      	ldr	r3, [r3, #8]
 8004c60:	6878      	ldr	r0, [r7, #4]
 8004c62:	f7ff ff2d 	bl	8004ac0 <LL_I2C_ConfigSpeed>
  /*---------------------------- I2Cx OAR1 Configuration -----------------------
   * Disable, Configure and Enable I2Cx device own address 1 with parameters :
   * - OwnAddress1:  I2C_OAR1_ADD[9:8], I2C_OAR1_ADD[7:1] and I2C_OAR1_ADD0 bits
   * - OwnAddrSize:  I2C_OAR1_ADDMODE bit
   */
  LL_I2C_SetOwnAddress1(I2Cx, I2C_InitStruct->OwnAddress1, I2C_InitStruct->OwnAddrSize);
 8004c66:	683b      	ldr	r3, [r7, #0]
 8004c68:	6959      	ldr	r1, [r3, #20]
 8004c6a:	683b      	ldr	r3, [r7, #0]
 8004c6c:	69db      	ldr	r3, [r3, #28]
 8004c6e:	461a      	mov	r2, r3
 8004c70:	6878      	ldr	r0, [r7, #4]
 8004c72:	f7ff ff0c 	bl	8004a8e <LL_I2C_SetOwnAddress1>

  /*---------------------------- I2Cx MODE Configuration -----------------------
  * Configure I2Cx peripheral mode with parameter :
   * - PeripheralMode: I2C_CR1_SMBUS, I2C_CR1_SMBTYPE and I2C_CR1_ENARP bits
   */
  LL_I2C_SetMode(I2Cx, I2C_InitStruct->PeripheralMode);
 8004c76:	683b      	ldr	r3, [r7, #0]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	4619      	mov	r1, r3
 8004c7c:	6878      	ldr	r0, [r7, #4]
 8004c7e:	f7ff ffaf 	bl	8004be0 <LL_I2C_SetMode>

  /* Enable the selected I2Cx Peripheral */
  LL_I2C_Enable(I2Cx);
 8004c82:	6878      	ldr	r0, [r7, #4]
 8004c84:	f7ff fecd 	bl	8004a22 <LL_I2C_Enable>
  /*---------------------------- I2Cx CR2 Configuration ------------------------
   * Configure the ACKnowledge or Non ACKnowledge condition
   * after the address receive match code or next received byte with parameter :
   * - TypeAcknowledge: I2C_CR2_NACK bit
   */
  LL_I2C_AcknowledgeNextData(I2Cx, I2C_InitStruct->TypeAcknowledge);
 8004c88:	683b      	ldr	r3, [r7, #0]
 8004c8a:	699b      	ldr	r3, [r3, #24]
 8004c8c:	4619      	mov	r1, r3
 8004c8e:	6878      	ldr	r0, [r7, #4]
 8004c90:	f7ff ffb9 	bl	8004c06 <LL_I2C_AcknowledgeNextData>

  return SUCCESS;
 8004c94:	2300      	movs	r3, #0
}
 8004c96:	4618      	mov	r0, r3
 8004c98:	3718      	adds	r7, #24
 8004c9a:	46bd      	mov	sp, r7
 8004c9c:	bd80      	pop	{r7, pc}
	...

08004ca0 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLLR (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8004ca0:	b480      	push	{r7}
 8004ca2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8004ca4:	4b04      	ldr	r3, [pc, #16]	; (8004cb8 <LL_RCC_GetSysClkSource+0x18>)
 8004ca6:	689b      	ldr	r3, [r3, #8]
 8004ca8:	f003 030c 	and.w	r3, r3, #12
}
 8004cac:	4618      	mov	r0, r3
 8004cae:	46bd      	mov	sp, r7
 8004cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cb4:	4770      	bx	lr
 8004cb6:	bf00      	nop
 8004cb8:	40023800 	.word	0x40023800

08004cbc <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 8004cbc:	b480      	push	{r7}
 8004cbe:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8004cc0:	4b04      	ldr	r3, [pc, #16]	; (8004cd4 <LL_RCC_GetAHBPrescaler+0x18>)
 8004cc2:	689b      	ldr	r3, [r3, #8]
 8004cc4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8004cc8:	4618      	mov	r0, r3
 8004cca:	46bd      	mov	sp, r7
 8004ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cd0:	4770      	bx	lr
 8004cd2:	bf00      	nop
 8004cd4:	40023800 	.word	0x40023800

08004cd8 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8004cd8:	b480      	push	{r7}
 8004cda:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8004cdc:	4b04      	ldr	r3, [pc, #16]	; (8004cf0 <LL_RCC_GetAPB1Prescaler+0x18>)
 8004cde:	689b      	ldr	r3, [r3, #8]
 8004ce0:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
}
 8004ce4:	4618      	mov	r0, r3
 8004ce6:	46bd      	mov	sp, r7
 8004ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cec:	4770      	bx	lr
 8004cee:	bf00      	nop
 8004cf0:	40023800 	.word	0x40023800

08004cf4 <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 8004cf4:	b480      	push	{r7}
 8004cf6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8004cf8:	4b04      	ldr	r3, [pc, #16]	; (8004d0c <LL_RCC_GetAPB2Prescaler+0x18>)
 8004cfa:	689b      	ldr	r3, [r3, #8]
 8004cfc:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 8004d00:	4618      	mov	r0, r3
 8004d02:	46bd      	mov	sp, r7
 8004d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d08:	4770      	bx	lr
 8004d0a:	bf00      	nop
 8004d0c:	40023800 	.word	0x40023800

08004d10 <LL_RCC_PLL_GetMainSource>:
  * @retval Returned value can be one of the following values:
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8004d10:	b480      	push	{r7}
 8004d12:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8004d14:	4b04      	ldr	r3, [pc, #16]	; (8004d28 <LL_RCC_PLL_GetMainSource+0x18>)
 8004d16:	685b      	ldr	r3, [r3, #4]
 8004d18:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
}
 8004d1c:	4618      	mov	r0, r3
 8004d1e:	46bd      	mov	sp, r7
 8004d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d24:	4770      	bx	lr
 8004d26:	bf00      	nop
 8004d28:	40023800 	.word	0x40023800

08004d2c <LL_RCC_PLL_GetN>:
  * @retval Between 50/192(*) and 432
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8004d2c:	b480      	push	{r7}
 8004d2e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8004d30:	4b04      	ldr	r3, [pc, #16]	; (8004d44 <LL_RCC_PLL_GetN+0x18>)
 8004d32:	685b      	ldr	r3, [r3, #4]
 8004d34:	099b      	lsrs	r3, r3, #6
 8004d36:	f3c3 0308 	ubfx	r3, r3, #0, #9
}
 8004d3a:	4618      	mov	r0, r3
 8004d3c:	46bd      	mov	sp, r7
 8004d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d42:	4770      	bx	lr
 8004d44:	40023800 	.word	0x40023800

08004d48 <LL_RCC_PLL_GetP>:
  *         @arg @ref LL_RCC_PLLP_DIV_4
  *         @arg @ref LL_RCC_PLLP_DIV_6
  *         @arg @ref LL_RCC_PLLP_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetP(void)
{
 8004d48:	b480      	push	{r7}
 8004d4a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP));
 8004d4c:	4b04      	ldr	r3, [pc, #16]	; (8004d60 <LL_RCC_PLL_GetP+0x18>)
 8004d4e:	685b      	ldr	r3, [r3, #4]
 8004d50:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
}
 8004d54:	4618      	mov	r0, r3
 8004d56:	46bd      	mov	sp, r7
 8004d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d5c:	4770      	bx	lr
 8004d5e:	bf00      	nop
 8004d60:	40023800 	.word	0x40023800

08004d64 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_61
  *         @arg @ref LL_RCC_PLLM_DIV_62
  *         @arg @ref LL_RCC_PLLM_DIV_63
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8004d64:	b480      	push	{r7}
 8004d66:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8004d68:	4b04      	ldr	r3, [pc, #16]	; (8004d7c <LL_RCC_PLL_GetDivider+0x18>)
 8004d6a:	685b      	ldr	r3, [r3, #4]
 8004d6c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
}
 8004d70:	4618      	mov	r0, r3
 8004d72:	46bd      	mov	sp, r7
 8004d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d78:	4770      	bx	lr
 8004d7a:	bf00      	nop
 8004d7c:	40023800 	.word	0x40023800

08004d80 <LL_RCC_GetSystemClocksFreq>:
  *         configuration based on this function will be incorrect.
  * @param  RCC_Clocks pointer to a @ref LL_RCC_ClocksTypeDef structure which will hold the clocks frequencies
  * @retval None
  */
void LL_RCC_GetSystemClocksFreq(LL_RCC_ClocksTypeDef *RCC_Clocks)
{
 8004d80:	b580      	push	{r7, lr}
 8004d82:	b082      	sub	sp, #8
 8004d84:	af00      	add	r7, sp, #0
 8004d86:	6078      	str	r0, [r7, #4]
  /* Get SYSCLK frequency */
  RCC_Clocks->SYSCLK_Frequency = RCC_GetSystemClockFreq();
 8004d88:	f000 f820 	bl	8004dcc <RCC_GetSystemClockFreq>
 8004d8c:	4602      	mov	r2, r0
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	601a      	str	r2, [r3, #0]

  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency   = RCC_GetHCLKClockFreq(RCC_Clocks->SYSCLK_Frequency);
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	4618      	mov	r0, r3
 8004d98:	f000 f83e 	bl	8004e18 <RCC_GetHCLKClockFreq>
 8004d9c:	4602      	mov	r2, r0
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	605a      	str	r2, [r3, #4]

  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency  = RCC_GetPCLK1ClockFreq(RCC_Clocks->HCLK_Frequency);
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	685b      	ldr	r3, [r3, #4]
 8004da6:	4618      	mov	r0, r3
 8004da8:	f000 f84c 	bl	8004e44 <RCC_GetPCLK1ClockFreq>
 8004dac:	4602      	mov	r2, r0
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	609a      	str	r2, [r3, #8]

  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency  = RCC_GetPCLK2ClockFreq(RCC_Clocks->HCLK_Frequency);
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	685b      	ldr	r3, [r3, #4]
 8004db6:	4618      	mov	r0, r3
 8004db8:	f000 f858 	bl	8004e6c <RCC_GetPCLK2ClockFreq>
 8004dbc:	4602      	mov	r2, r0
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	60da      	str	r2, [r3, #12]
}
 8004dc2:	bf00      	nop
 8004dc4:	3708      	adds	r7, #8
 8004dc6:	46bd      	mov	sp, r7
 8004dc8:	bd80      	pop	{r7, pc}
	...

08004dcc <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
uint32_t RCC_GetSystemClockFreq(void)
{
 8004dcc:	b580      	push	{r7, lr}
 8004dce:	b082      	sub	sp, #8
 8004dd0:	af00      	add	r7, sp, #0
  uint32_t frequency = 0U;
 8004dd2:	2300      	movs	r3, #0
 8004dd4:	607b      	str	r3, [r7, #4]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 8004dd6:	f7ff ff63 	bl	8004ca0 <LL_RCC_GetSysClkSource>
 8004dda:	4603      	mov	r3, r0
 8004ddc:	2b04      	cmp	r3, #4
 8004dde:	d006      	beq.n	8004dee <RCC_GetSystemClockFreq+0x22>
 8004de0:	2b08      	cmp	r3, #8
 8004de2:	d007      	beq.n	8004df4 <RCC_GetSystemClockFreq+0x28>
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d10a      	bne.n	8004dfe <RCC_GetSystemClockFreq+0x32>
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 8004de8:	4b09      	ldr	r3, [pc, #36]	; (8004e10 <RCC_GetSystemClockFreq+0x44>)
 8004dea:	607b      	str	r3, [r7, #4]
      break;
 8004dec:	e00a      	b.n	8004e04 <RCC_GetSystemClockFreq+0x38>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 8004dee:	4b09      	ldr	r3, [pc, #36]	; (8004e14 <RCC_GetSystemClockFreq+0x48>)
 8004df0:	607b      	str	r3, [r7, #4]
      break;
 8004df2:	e007      	b.n	8004e04 <RCC_GetSystemClockFreq+0x38>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS(LL_RCC_SYS_CLKSOURCE_STATUS_PLL);
 8004df4:	2008      	movs	r0, #8
 8004df6:	f000 f84d 	bl	8004e94 <RCC_PLL_GetFreqDomain_SYS>
 8004dfa:	6078      	str	r0, [r7, #4]
      break;
 8004dfc:	e002      	b.n	8004e04 <RCC_GetSystemClockFreq+0x38>
      frequency = RCC_PLL_GetFreqDomain_SYS(LL_RCC_SYS_CLKSOURCE_STATUS_PLLR);
      break;
#endif /* RCC_PLLR_SYSCLK_SUPPORT */

    default:
      frequency = HSI_VALUE;
 8004dfe:	4b04      	ldr	r3, [pc, #16]	; (8004e10 <RCC_GetSystemClockFreq+0x44>)
 8004e00:	607b      	str	r3, [r7, #4]
      break;
 8004e02:	bf00      	nop
  }

  return frequency;
 8004e04:	687b      	ldr	r3, [r7, #4]
}
 8004e06:	4618      	mov	r0, r3
 8004e08:	3708      	adds	r7, #8
 8004e0a:	46bd      	mov	sp, r7
 8004e0c:	bd80      	pop	{r7, pc}
 8004e0e:	bf00      	nop
 8004e10:	00f42400 	.word	0x00f42400
 8004e14:	007a1200 	.word	0x007a1200

08004e18 <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 8004e18:	b580      	push	{r7, lr}
 8004e1a:	b082      	sub	sp, #8
 8004e1c:	af00      	add	r7, sp, #0
 8004e1e:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 8004e20:	f7ff ff4c 	bl	8004cbc <LL_RCC_GetAHBPrescaler>
 8004e24:	4603      	mov	r3, r0
 8004e26:	091b      	lsrs	r3, r3, #4
 8004e28:	f003 030f 	and.w	r3, r3, #15
 8004e2c:	4a04      	ldr	r2, [pc, #16]	; (8004e40 <RCC_GetHCLKClockFreq+0x28>)
 8004e2e:	5cd3      	ldrb	r3, [r2, r3]
 8004e30:	461a      	mov	r2, r3
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	40d3      	lsrs	r3, r2
}
 8004e36:	4618      	mov	r0, r3
 8004e38:	3708      	adds	r7, #8
 8004e3a:	46bd      	mov	sp, r7
 8004e3c:	bd80      	pop	{r7, pc}
 8004e3e:	bf00      	nop
 8004e40:	0801ad5c 	.word	0x0801ad5c

08004e44 <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 8004e44:	b580      	push	{r7, lr}
 8004e46:	b082      	sub	sp, #8
 8004e48:	af00      	add	r7, sp, #0
 8004e4a:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 8004e4c:	f7ff ff44 	bl	8004cd8 <LL_RCC_GetAPB1Prescaler>
 8004e50:	4603      	mov	r3, r0
 8004e52:	0a9b      	lsrs	r3, r3, #10
 8004e54:	4a04      	ldr	r2, [pc, #16]	; (8004e68 <RCC_GetPCLK1ClockFreq+0x24>)
 8004e56:	5cd3      	ldrb	r3, [r2, r3]
 8004e58:	461a      	mov	r2, r3
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	40d3      	lsrs	r3, r2
}
 8004e5e:	4618      	mov	r0, r3
 8004e60:	3708      	adds	r7, #8
 8004e62:	46bd      	mov	sp, r7
 8004e64:	bd80      	pop	{r7, pc}
 8004e66:	bf00      	nop
 8004e68:	0801ad6c 	.word	0x0801ad6c

08004e6c <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 8004e6c:	b580      	push	{r7, lr}
 8004e6e:	b082      	sub	sp, #8
 8004e70:	af00      	add	r7, sp, #0
 8004e72:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 8004e74:	f7ff ff3e 	bl	8004cf4 <LL_RCC_GetAPB2Prescaler>
 8004e78:	4603      	mov	r3, r0
 8004e7a:	0b5b      	lsrs	r3, r3, #13
 8004e7c:	4a04      	ldr	r2, [pc, #16]	; (8004e90 <RCC_GetPCLK2ClockFreq+0x24>)
 8004e7e:	5cd3      	ldrb	r3, [r2, r3]
 8004e80:	461a      	mov	r2, r3
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	40d3      	lsrs	r3, r2
}
 8004e86:	4618      	mov	r0, r3
 8004e88:	3708      	adds	r7, #8
 8004e8a:	46bd      	mov	sp, r7
 8004e8c:	bd80      	pop	{r7, pc}
 8004e8e:	bf00      	nop
 8004e90:	0801ad6c 	.word	0x0801ad6c

08004e94 <RCC_PLL_GetFreqDomain_SYS>:
  * @brief  Return PLL clock frequency used for system domain
  * @param  SYSCLK_Source System clock source
  * @retval PLL clock frequency (in Hz)
  */
uint32_t RCC_PLL_GetFreqDomain_SYS(uint32_t SYSCLK_Source)
{
 8004e94:	b590      	push	{r4, r7, lr}
 8004e96:	b087      	sub	sp, #28
 8004e98:	af00      	add	r7, sp, #0
 8004e9a:	6078      	str	r0, [r7, #4]
  uint32_t pllinputfreq = 0U, pllsource = 0U, plloutputfreq = 0U;
 8004e9c:	2300      	movs	r3, #0
 8004e9e:	617b      	str	r3, [r7, #20]
 8004ea0:	2300      	movs	r3, #0
 8004ea2:	60fb      	str	r3, [r7, #12]
 8004ea4:	2300      	movs	r3, #0
 8004ea6:	613b      	str	r3, [r7, #16]

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
     SYSCLK = PLL_VCO / (PLLP or PLLR)
  */
  pllsource = LL_RCC_PLL_GetMainSource();
 8004ea8:	f7ff ff32 	bl	8004d10 <LL_RCC_PLL_GetMainSource>
 8004eac:	60f8      	str	r0, [r7, #12]

  switch (pllsource)
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d003      	beq.n	8004ebc <RCC_PLL_GetFreqDomain_SYS+0x28>
 8004eb4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004eb8:	d003      	beq.n	8004ec2 <RCC_PLL_GetFreqDomain_SYS+0x2e>
 8004eba:	e005      	b.n	8004ec8 <RCC_PLL_GetFreqDomain_SYS+0x34>
  {
    case LL_RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
 8004ebc:	4b12      	ldr	r3, [pc, #72]	; (8004f08 <RCC_PLL_GetFreqDomain_SYS+0x74>)
 8004ebe:	617b      	str	r3, [r7, #20]
      break;
 8004ec0:	e005      	b.n	8004ece <RCC_PLL_GetFreqDomain_SYS+0x3a>

    case LL_RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 8004ec2:	4b12      	ldr	r3, [pc, #72]	; (8004f0c <RCC_PLL_GetFreqDomain_SYS+0x78>)
 8004ec4:	617b      	str	r3, [r7, #20]
      break;
 8004ec6:	e002      	b.n	8004ece <RCC_PLL_GetFreqDomain_SYS+0x3a>

    default:
      pllinputfreq = HSI_VALUE;
 8004ec8:	4b0f      	ldr	r3, [pc, #60]	; (8004f08 <RCC_PLL_GetFreqDomain_SYS+0x74>)
 8004eca:	617b      	str	r3, [r7, #20]
      break;
 8004ecc:	bf00      	nop
  }

  if (SYSCLK_Source == LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	2b08      	cmp	r3, #8
 8004ed2:	d113      	bne.n	8004efc <RCC_PLL_GetFreqDomain_SYS+0x68>
  {
    plloutputfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8004ed4:	f7ff ff46 	bl	8004d64 <LL_RCC_PLL_GetDivider>
 8004ed8:	4602      	mov	r2, r0
 8004eda:	697b      	ldr	r3, [r7, #20]
 8004edc:	fbb3 f4f2 	udiv	r4, r3, r2
 8004ee0:	f7ff ff24 	bl	8004d2c <LL_RCC_PLL_GetN>
 8004ee4:	4603      	mov	r3, r0
 8004ee6:	fb03 f404 	mul.w	r4, r3, r4
 8004eea:	f7ff ff2d 	bl	8004d48 <LL_RCC_PLL_GetP>
 8004eee:	4603      	mov	r3, r0
 8004ef0:	0c1b      	lsrs	r3, r3, #16
 8004ef2:	3301      	adds	r3, #1
 8004ef4:	005b      	lsls	r3, r3, #1
 8004ef6:	fbb4 f3f3 	udiv	r3, r4, r3
 8004efa:	613b      	str	r3, [r7, #16]
    plloutputfreq = __LL_RCC_CALC_PLLRCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
                                        LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }
#endif /* RCC_PLLR_SYSCLK_SUPPORT */

  return plloutputfreq;
 8004efc:	693b      	ldr	r3, [r7, #16]
}
 8004efe:	4618      	mov	r0, r3
 8004f00:	371c      	adds	r7, #28
 8004f02:	46bd      	mov	sp, r7
 8004f04:	bd90      	pop	{r4, r7, pc}
 8004f06:	bf00      	nop
 8004f08:	00f42400 	.word	0x00f42400
 8004f0c:	007a1200 	.word	0x007a1200

08004f10 <LL_USART_IsEnabled>:
{
 8004f10:	b480      	push	{r7}
 8004f12:	b083      	sub	sp, #12
 8004f14:	af00      	add	r7, sp, #0
 8004f16:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE));
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	68db      	ldr	r3, [r3, #12]
 8004f1c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004f20:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004f24:	bf0c      	ite	eq
 8004f26:	2301      	moveq	r3, #1
 8004f28:	2300      	movne	r3, #0
 8004f2a:	b2db      	uxtb	r3, r3
}
 8004f2c:	4618      	mov	r0, r3
 8004f2e:	370c      	adds	r7, #12
 8004f30:	46bd      	mov	sp, r7
 8004f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f36:	4770      	bx	lr

08004f38 <LL_USART_SetStopBitsLength>:
{
 8004f38:	b480      	push	{r7}
 8004f3a:	b083      	sub	sp, #12
 8004f3c:	af00      	add	r7, sp, #0
 8004f3e:	6078      	str	r0, [r7, #4]
 8004f40:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	691b      	ldr	r3, [r3, #16]
 8004f46:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004f4a:	683b      	ldr	r3, [r7, #0]
 8004f4c:	431a      	orrs	r2, r3
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	611a      	str	r2, [r3, #16]
}
 8004f52:	bf00      	nop
 8004f54:	370c      	adds	r7, #12
 8004f56:	46bd      	mov	sp, r7
 8004f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f5c:	4770      	bx	lr

08004f5e <LL_USART_SetHWFlowCtrl>:
{
 8004f5e:	b480      	push	{r7}
 8004f60:	b083      	sub	sp, #12
 8004f62:	af00      	add	r7, sp, #0
 8004f64:	6078      	str	r0, [r7, #4]
 8004f66:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	695b      	ldr	r3, [r3, #20]
 8004f6c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004f70:	683b      	ldr	r3, [r7, #0]
 8004f72:	431a      	orrs	r2, r3
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	615a      	str	r2, [r3, #20]
}
 8004f78:	bf00      	nop
 8004f7a:	370c      	adds	r7, #12
 8004f7c:	46bd      	mov	sp, r7
 8004f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f82:	4770      	bx	lr

08004f84 <LL_USART_SetBaudRate>:
{
 8004f84:	b480      	push	{r7}
 8004f86:	b085      	sub	sp, #20
 8004f88:	af00      	add	r7, sp, #0
 8004f8a:	60f8      	str	r0, [r7, #12]
 8004f8c:	60b9      	str	r1, [r7, #8]
 8004f8e:	607a      	str	r2, [r7, #4]
 8004f90:	603b      	str	r3, [r7, #0]
  if (OverSampling == LL_USART_OVERSAMPLING_8)
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004f98:	d152      	bne.n	8005040 <LL_USART_SetBaudRate+0xbc>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
 8004f9a:	68ba      	ldr	r2, [r7, #8]
 8004f9c:	4613      	mov	r3, r2
 8004f9e:	009b      	lsls	r3, r3, #2
 8004fa0:	4413      	add	r3, r2
 8004fa2:	009a      	lsls	r2, r3, #2
 8004fa4:	441a      	add	r2, r3
 8004fa6:	683b      	ldr	r3, [r7, #0]
 8004fa8:	005b      	lsls	r3, r3, #1
 8004faa:	fbb2 f3f3 	udiv	r3, r2, r3
 8004fae:	4a4f      	ldr	r2, [pc, #316]	; (80050ec <LL_USART_SetBaudRate+0x168>)
 8004fb0:	fba2 2303 	umull	r2, r3, r2, r3
 8004fb4:	095b      	lsrs	r3, r3, #5
 8004fb6:	b29b      	uxth	r3, r3
 8004fb8:	011b      	lsls	r3, r3, #4
 8004fba:	b299      	uxth	r1, r3
 8004fbc:	68ba      	ldr	r2, [r7, #8]
 8004fbe:	4613      	mov	r3, r2
 8004fc0:	009b      	lsls	r3, r3, #2
 8004fc2:	4413      	add	r3, r2
 8004fc4:	009a      	lsls	r2, r3, #2
 8004fc6:	441a      	add	r2, r3
 8004fc8:	683b      	ldr	r3, [r7, #0]
 8004fca:	005b      	lsls	r3, r3, #1
 8004fcc:	fbb2 f2f3 	udiv	r2, r2, r3
 8004fd0:	4b46      	ldr	r3, [pc, #280]	; (80050ec <LL_USART_SetBaudRate+0x168>)
 8004fd2:	fba3 0302 	umull	r0, r3, r3, r2
 8004fd6:	095b      	lsrs	r3, r3, #5
 8004fd8:	2064      	movs	r0, #100	; 0x64
 8004fda:	fb00 f303 	mul.w	r3, r0, r3
 8004fde:	1ad3      	subs	r3, r2, r3
 8004fe0:	00db      	lsls	r3, r3, #3
 8004fe2:	3332      	adds	r3, #50	; 0x32
 8004fe4:	4a41      	ldr	r2, [pc, #260]	; (80050ec <LL_USART_SetBaudRate+0x168>)
 8004fe6:	fba2 2303 	umull	r2, r3, r2, r3
 8004fea:	095b      	lsrs	r3, r3, #5
 8004fec:	b29b      	uxth	r3, r3
 8004fee:	005b      	lsls	r3, r3, #1
 8004ff0:	b29b      	uxth	r3, r3
 8004ff2:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004ff6:	b29b      	uxth	r3, r3
 8004ff8:	440b      	add	r3, r1
 8004ffa:	b299      	uxth	r1, r3
 8004ffc:	68ba      	ldr	r2, [r7, #8]
 8004ffe:	4613      	mov	r3, r2
 8005000:	009b      	lsls	r3, r3, #2
 8005002:	4413      	add	r3, r2
 8005004:	009a      	lsls	r2, r3, #2
 8005006:	441a      	add	r2, r3
 8005008:	683b      	ldr	r3, [r7, #0]
 800500a:	005b      	lsls	r3, r3, #1
 800500c:	fbb2 f2f3 	udiv	r2, r2, r3
 8005010:	4b36      	ldr	r3, [pc, #216]	; (80050ec <LL_USART_SetBaudRate+0x168>)
 8005012:	fba3 0302 	umull	r0, r3, r3, r2
 8005016:	095b      	lsrs	r3, r3, #5
 8005018:	2064      	movs	r0, #100	; 0x64
 800501a:	fb00 f303 	mul.w	r3, r0, r3
 800501e:	1ad3      	subs	r3, r2, r3
 8005020:	00db      	lsls	r3, r3, #3
 8005022:	3332      	adds	r3, #50	; 0x32
 8005024:	4a31      	ldr	r2, [pc, #196]	; (80050ec <LL_USART_SetBaudRate+0x168>)
 8005026:	fba2 2303 	umull	r2, r3, r2, r3
 800502a:	095b      	lsrs	r3, r3, #5
 800502c:	b29b      	uxth	r3, r3
 800502e:	f003 0307 	and.w	r3, r3, #7
 8005032:	b29b      	uxth	r3, r3
 8005034:	440b      	add	r3, r1
 8005036:	b29b      	uxth	r3, r3
 8005038:	461a      	mov	r2, r3
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	609a      	str	r2, [r3, #8]
}
 800503e:	e04f      	b.n	80050e0 <LL_USART_SetBaudRate+0x15c>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 8005040:	68ba      	ldr	r2, [r7, #8]
 8005042:	4613      	mov	r3, r2
 8005044:	009b      	lsls	r3, r3, #2
 8005046:	4413      	add	r3, r2
 8005048:	009a      	lsls	r2, r3, #2
 800504a:	441a      	add	r2, r3
 800504c:	683b      	ldr	r3, [r7, #0]
 800504e:	009b      	lsls	r3, r3, #2
 8005050:	fbb2 f3f3 	udiv	r3, r2, r3
 8005054:	4a25      	ldr	r2, [pc, #148]	; (80050ec <LL_USART_SetBaudRate+0x168>)
 8005056:	fba2 2303 	umull	r2, r3, r2, r3
 800505a:	095b      	lsrs	r3, r3, #5
 800505c:	b29b      	uxth	r3, r3
 800505e:	011b      	lsls	r3, r3, #4
 8005060:	b299      	uxth	r1, r3
 8005062:	68ba      	ldr	r2, [r7, #8]
 8005064:	4613      	mov	r3, r2
 8005066:	009b      	lsls	r3, r3, #2
 8005068:	4413      	add	r3, r2
 800506a:	009a      	lsls	r2, r3, #2
 800506c:	441a      	add	r2, r3
 800506e:	683b      	ldr	r3, [r7, #0]
 8005070:	009b      	lsls	r3, r3, #2
 8005072:	fbb2 f2f3 	udiv	r2, r2, r3
 8005076:	4b1d      	ldr	r3, [pc, #116]	; (80050ec <LL_USART_SetBaudRate+0x168>)
 8005078:	fba3 0302 	umull	r0, r3, r3, r2
 800507c:	095b      	lsrs	r3, r3, #5
 800507e:	2064      	movs	r0, #100	; 0x64
 8005080:	fb00 f303 	mul.w	r3, r0, r3
 8005084:	1ad3      	subs	r3, r2, r3
 8005086:	011b      	lsls	r3, r3, #4
 8005088:	3332      	adds	r3, #50	; 0x32
 800508a:	4a18      	ldr	r2, [pc, #96]	; (80050ec <LL_USART_SetBaudRate+0x168>)
 800508c:	fba2 2303 	umull	r2, r3, r2, r3
 8005090:	095b      	lsrs	r3, r3, #5
 8005092:	b29b      	uxth	r3, r3
 8005094:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005098:	b29b      	uxth	r3, r3
 800509a:	440b      	add	r3, r1
 800509c:	b299      	uxth	r1, r3
 800509e:	68ba      	ldr	r2, [r7, #8]
 80050a0:	4613      	mov	r3, r2
 80050a2:	009b      	lsls	r3, r3, #2
 80050a4:	4413      	add	r3, r2
 80050a6:	009a      	lsls	r2, r3, #2
 80050a8:	441a      	add	r2, r3
 80050aa:	683b      	ldr	r3, [r7, #0]
 80050ac:	009b      	lsls	r3, r3, #2
 80050ae:	fbb2 f2f3 	udiv	r2, r2, r3
 80050b2:	4b0e      	ldr	r3, [pc, #56]	; (80050ec <LL_USART_SetBaudRate+0x168>)
 80050b4:	fba3 0302 	umull	r0, r3, r3, r2
 80050b8:	095b      	lsrs	r3, r3, #5
 80050ba:	2064      	movs	r0, #100	; 0x64
 80050bc:	fb00 f303 	mul.w	r3, r0, r3
 80050c0:	1ad3      	subs	r3, r2, r3
 80050c2:	011b      	lsls	r3, r3, #4
 80050c4:	3332      	adds	r3, #50	; 0x32
 80050c6:	4a09      	ldr	r2, [pc, #36]	; (80050ec <LL_USART_SetBaudRate+0x168>)
 80050c8:	fba2 2303 	umull	r2, r3, r2, r3
 80050cc:	095b      	lsrs	r3, r3, #5
 80050ce:	b29b      	uxth	r3, r3
 80050d0:	f003 030f 	and.w	r3, r3, #15
 80050d4:	b29b      	uxth	r3, r3
 80050d6:	440b      	add	r3, r1
 80050d8:	b29b      	uxth	r3, r3
 80050da:	461a      	mov	r2, r3
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	609a      	str	r2, [r3, #8]
}
 80050e0:	bf00      	nop
 80050e2:	3714      	adds	r7, #20
 80050e4:	46bd      	mov	sp, r7
 80050e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ea:	4770      	bx	lr
 80050ec:	51eb851f 	.word	0x51eb851f

080050f0 <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, LL_USART_InitTypeDef *USART_InitStruct)
{
 80050f0:	b580      	push	{r7, lr}
 80050f2:	b088      	sub	sp, #32
 80050f4:	af00      	add	r7, sp, #0
 80050f6:	6078      	str	r0, [r7, #4]
 80050f8:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 80050fa:	2301      	movs	r3, #1
 80050fc:	77fb      	strb	r3, [r7, #31]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 80050fe:	2300      	movs	r3, #0
 8005100:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 8005102:	6878      	ldr	r0, [r7, #4]
 8005104:	f7ff ff04 	bl	8004f10 <LL_USART_IsEnabled>
 8005108:	4603      	mov	r3, r0
 800510a:	2b00      	cmp	r3, #0
 800510c:	d16c      	bne.n	80051e8 <LL_USART_Init+0xf8>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	68db      	ldr	r3, [r3, #12]
 8005112:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8005116:	f023 030c 	bic.w	r3, r3, #12
 800511a:	683a      	ldr	r2, [r7, #0]
 800511c:	6851      	ldr	r1, [r2, #4]
 800511e:	683a      	ldr	r2, [r7, #0]
 8005120:	68d2      	ldr	r2, [r2, #12]
 8005122:	4311      	orrs	r1, r2
 8005124:	683a      	ldr	r2, [r7, #0]
 8005126:	6912      	ldr	r2, [r2, #16]
 8005128:	4311      	orrs	r1, r2
 800512a:	683a      	ldr	r2, [r7, #0]
 800512c:	6992      	ldr	r2, [r2, #24]
 800512e:	430a      	orrs	r2, r1
 8005130:	431a      	orrs	r2, r3
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	60da      	str	r2, [r3, #12]
    /*---------------------------- USART CR2 Configuration -----------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 8005136:	683b      	ldr	r3, [r7, #0]
 8005138:	689b      	ldr	r3, [r3, #8]
 800513a:	4619      	mov	r1, r3
 800513c:	6878      	ldr	r0, [r7, #4]
 800513e:	f7ff fefb 	bl	8004f38 <LL_USART_SetStopBitsLength>

    /*---------------------------- USART CR3 Configuration -----------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 8005142:	683b      	ldr	r3, [r7, #0]
 8005144:	695b      	ldr	r3, [r3, #20]
 8005146:	4619      	mov	r1, r3
 8005148:	6878      	ldr	r0, [r7, #4]
 800514a:	f7ff ff08 	bl	8004f5e <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration -----------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    LL_RCC_GetSystemClocksFreq(&rcc_clocks);
 800514e:	f107 0308 	add.w	r3, r7, #8
 8005152:	4618      	mov	r0, r3
 8005154:	f7ff fe14 	bl	8004d80 <LL_RCC_GetSystemClocksFreq>
    if (USARTx == USART1)
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	4a26      	ldr	r2, [pc, #152]	; (80051f4 <LL_USART_Init+0x104>)
 800515c:	4293      	cmp	r3, r2
 800515e:	d102      	bne.n	8005166 <LL_USART_Init+0x76>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 8005160:	697b      	ldr	r3, [r7, #20]
 8005162:	61bb      	str	r3, [r7, #24]
 8005164:	e02f      	b.n	80051c6 <LL_USART_Init+0xd6>
    }
    else if (USARTx == USART2)
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	4a23      	ldr	r2, [pc, #140]	; (80051f8 <LL_USART_Init+0x108>)
 800516a:	4293      	cmp	r3, r2
 800516c:	d102      	bne.n	8005174 <LL_USART_Init+0x84>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 800516e:	693b      	ldr	r3, [r7, #16]
 8005170:	61bb      	str	r3, [r7, #24]
 8005172:	e028      	b.n	80051c6 <LL_USART_Init+0xd6>
    }
#if defined(USART3)
    else if (USARTx == USART3)
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	4a21      	ldr	r2, [pc, #132]	; (80051fc <LL_USART_Init+0x10c>)
 8005178:	4293      	cmp	r3, r2
 800517a:	d102      	bne.n	8005182 <LL_USART_Init+0x92>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 800517c:	693b      	ldr	r3, [r7, #16]
 800517e:	61bb      	str	r3, [r7, #24]
 8005180:	e021      	b.n	80051c6 <LL_USART_Init+0xd6>
    }
#endif /* USART3 */
#if defined(USART6)
    else if (USARTx == USART6)
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	4a1e      	ldr	r2, [pc, #120]	; (8005200 <LL_USART_Init+0x110>)
 8005186:	4293      	cmp	r3, r2
 8005188:	d102      	bne.n	8005190 <LL_USART_Init+0xa0>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 800518a:	697b      	ldr	r3, [r7, #20]
 800518c:	61bb      	str	r3, [r7, #24]
 800518e:	e01a      	b.n	80051c6 <LL_USART_Init+0xd6>
    }
#endif /* USART6 */
#if defined(UART4)
    else if (USARTx == UART4)
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	4a1c      	ldr	r2, [pc, #112]	; (8005204 <LL_USART_Init+0x114>)
 8005194:	4293      	cmp	r3, r2
 8005196:	d102      	bne.n	800519e <LL_USART_Init+0xae>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8005198:	693b      	ldr	r3, [r7, #16]
 800519a:	61bb      	str	r3, [r7, #24]
 800519c:	e013      	b.n	80051c6 <LL_USART_Init+0xd6>
    }
#endif /* UART4 */
#if defined(UART5)
    else if (USARTx == UART5)
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	4a19      	ldr	r2, [pc, #100]	; (8005208 <LL_USART_Init+0x118>)
 80051a2:	4293      	cmp	r3, r2
 80051a4:	d102      	bne.n	80051ac <LL_USART_Init+0xbc>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 80051a6:	693b      	ldr	r3, [r7, #16]
 80051a8:	61bb      	str	r3, [r7, #24]
 80051aa:	e00c      	b.n	80051c6 <LL_USART_Init+0xd6>
    }
#endif /* UART5 */
#if defined(UART7)
    else if (USARTx == UART7)
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	4a17      	ldr	r2, [pc, #92]	; (800520c <LL_USART_Init+0x11c>)
 80051b0:	4293      	cmp	r3, r2
 80051b2:	d102      	bne.n	80051ba <LL_USART_Init+0xca>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 80051b4:	693b      	ldr	r3, [r7, #16]
 80051b6:	61bb      	str	r3, [r7, #24]
 80051b8:	e005      	b.n	80051c6 <LL_USART_Init+0xd6>
    }
#endif /* UART7 */
#if defined(UART8)
    else if (USARTx == UART8)
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	4a14      	ldr	r2, [pc, #80]	; (8005210 <LL_USART_Init+0x120>)
 80051be:	4293      	cmp	r3, r2
 80051c0:	d101      	bne.n	80051c6 <LL_USART_Init+0xd6>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 80051c2:	693b      	ldr	r3, [r7, #16]
 80051c4:	61bb      	str	r3, [r7, #24]

    /* Configure the USART Baud Rate :
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 80051c6:	69bb      	ldr	r3, [r7, #24]
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d00d      	beq.n	80051e8 <LL_USART_Init+0xf8>
        && (USART_InitStruct->BaudRate != 0U))
 80051cc:	683b      	ldr	r3, [r7, #0]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d009      	beq.n	80051e8 <LL_USART_Init+0xf8>
    {
      status = SUCCESS;
 80051d4:	2300      	movs	r3, #0
 80051d6:	77fb      	strb	r3, [r7, #31]
      LL_USART_SetBaudRate(USARTx,
 80051d8:	683b      	ldr	r3, [r7, #0]
 80051da:	699a      	ldr	r2, [r3, #24]
 80051dc:	683b      	ldr	r3, [r7, #0]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	69b9      	ldr	r1, [r7, #24]
 80051e2:	6878      	ldr	r0, [r7, #4]
 80051e4:	f7ff fece 	bl	8004f84 <LL_USART_SetBaudRate>
      assert_param(IS_LL_USART_BRR_MAX(USARTx->BRR));
    }
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 80051e8:	7ffb      	ldrb	r3, [r7, #31]
}
 80051ea:	4618      	mov	r0, r3
 80051ec:	3720      	adds	r7, #32
 80051ee:	46bd      	mov	sp, r7
 80051f0:	bd80      	pop	{r7, pc}
 80051f2:	bf00      	nop
 80051f4:	40011000 	.word	0x40011000
 80051f8:	40004400 	.word	0x40004400
 80051fc:	40004800 	.word	0x40004800
 8005200:	40011400 	.word	0x40011400
 8005204:	40004c00 	.word	0x40004c00
 8005208:	40005000 	.word	0x40005000
 800520c:	40007800 	.word	0x40007800
 8005210:	40007c00 	.word	0x40007c00

08005214 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005214:	b084      	sub	sp, #16
 8005216:	b580      	push	{r7, lr}
 8005218:	b084      	sub	sp, #16
 800521a:	af00      	add	r7, sp, #0
 800521c:	6078      	str	r0, [r7, #4]
 800521e:	f107 001c 	add.w	r0, r7, #28
 8005222:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005226:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005228:	2b01      	cmp	r3, #1
 800522a:	d122      	bne.n	8005272 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005230:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	68db      	ldr	r3, [r3, #12]
 800523c:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8005240:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005244:	687a      	ldr	r2, [r7, #4]
 8005246:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	68db      	ldr	r3, [r3, #12]
 800524c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005254:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005256:	2b01      	cmp	r3, #1
 8005258:	d105      	bne.n	8005266 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	68db      	ldr	r3, [r3, #12]
 800525e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8005266:	6878      	ldr	r0, [r7, #4]
 8005268:	f001 fa7c 	bl	8006764 <USB_CoreReset>
 800526c:	4603      	mov	r3, r0
 800526e:	73fb      	strb	r3, [r7, #15]
 8005270:	e01a      	b.n	80052a8 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	68db      	ldr	r3, [r3, #12]
 8005276:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 800527e:	6878      	ldr	r0, [r7, #4]
 8005280:	f001 fa70 	bl	8006764 <USB_CoreReset>
 8005284:	4603      	mov	r3, r0
 8005286:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8005288:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800528a:	2b00      	cmp	r3, #0
 800528c:	d106      	bne.n	800529c <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005292:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	639a      	str	r2, [r3, #56]	; 0x38
 800529a:	e005      	b.n	80052a8 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052a0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80052a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052aa:	2b01      	cmp	r3, #1
 80052ac:	d10b      	bne.n	80052c6 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	689b      	ldr	r3, [r3, #8]
 80052b2:	f043 0206 	orr.w	r2, r3, #6
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	689b      	ldr	r3, [r3, #8]
 80052be:	f043 0220 	orr.w	r2, r3, #32
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80052c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80052c8:	4618      	mov	r0, r3
 80052ca:	3710      	adds	r7, #16
 80052cc:	46bd      	mov	sp, r7
 80052ce:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80052d2:	b004      	add	sp, #16
 80052d4:	4770      	bx	lr
	...

080052d8 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80052d8:	b480      	push	{r7}
 80052da:	b087      	sub	sp, #28
 80052dc:	af00      	add	r7, sp, #0
 80052de:	60f8      	str	r0, [r7, #12]
 80052e0:	60b9      	str	r1, [r7, #8]
 80052e2:	4613      	mov	r3, r2
 80052e4:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80052e6:	79fb      	ldrb	r3, [r7, #7]
 80052e8:	2b02      	cmp	r3, #2
 80052ea:	d165      	bne.n	80053b8 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80052ec:	68bb      	ldr	r3, [r7, #8]
 80052ee:	4a41      	ldr	r2, [pc, #260]	; (80053f4 <USB_SetTurnaroundTime+0x11c>)
 80052f0:	4293      	cmp	r3, r2
 80052f2:	d906      	bls.n	8005302 <USB_SetTurnaroundTime+0x2a>
 80052f4:	68bb      	ldr	r3, [r7, #8]
 80052f6:	4a40      	ldr	r2, [pc, #256]	; (80053f8 <USB_SetTurnaroundTime+0x120>)
 80052f8:	4293      	cmp	r3, r2
 80052fa:	d802      	bhi.n	8005302 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80052fc:	230f      	movs	r3, #15
 80052fe:	617b      	str	r3, [r7, #20]
 8005300:	e062      	b.n	80053c8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8005302:	68bb      	ldr	r3, [r7, #8]
 8005304:	4a3c      	ldr	r2, [pc, #240]	; (80053f8 <USB_SetTurnaroundTime+0x120>)
 8005306:	4293      	cmp	r3, r2
 8005308:	d906      	bls.n	8005318 <USB_SetTurnaroundTime+0x40>
 800530a:	68bb      	ldr	r3, [r7, #8]
 800530c:	4a3b      	ldr	r2, [pc, #236]	; (80053fc <USB_SetTurnaroundTime+0x124>)
 800530e:	4293      	cmp	r3, r2
 8005310:	d802      	bhi.n	8005318 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8005312:	230e      	movs	r3, #14
 8005314:	617b      	str	r3, [r7, #20]
 8005316:	e057      	b.n	80053c8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8005318:	68bb      	ldr	r3, [r7, #8]
 800531a:	4a38      	ldr	r2, [pc, #224]	; (80053fc <USB_SetTurnaroundTime+0x124>)
 800531c:	4293      	cmp	r3, r2
 800531e:	d906      	bls.n	800532e <USB_SetTurnaroundTime+0x56>
 8005320:	68bb      	ldr	r3, [r7, #8]
 8005322:	4a37      	ldr	r2, [pc, #220]	; (8005400 <USB_SetTurnaroundTime+0x128>)
 8005324:	4293      	cmp	r3, r2
 8005326:	d802      	bhi.n	800532e <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8005328:	230d      	movs	r3, #13
 800532a:	617b      	str	r3, [r7, #20]
 800532c:	e04c      	b.n	80053c8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800532e:	68bb      	ldr	r3, [r7, #8]
 8005330:	4a33      	ldr	r2, [pc, #204]	; (8005400 <USB_SetTurnaroundTime+0x128>)
 8005332:	4293      	cmp	r3, r2
 8005334:	d906      	bls.n	8005344 <USB_SetTurnaroundTime+0x6c>
 8005336:	68bb      	ldr	r3, [r7, #8]
 8005338:	4a32      	ldr	r2, [pc, #200]	; (8005404 <USB_SetTurnaroundTime+0x12c>)
 800533a:	4293      	cmp	r3, r2
 800533c:	d802      	bhi.n	8005344 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800533e:	230c      	movs	r3, #12
 8005340:	617b      	str	r3, [r7, #20]
 8005342:	e041      	b.n	80053c8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8005344:	68bb      	ldr	r3, [r7, #8]
 8005346:	4a2f      	ldr	r2, [pc, #188]	; (8005404 <USB_SetTurnaroundTime+0x12c>)
 8005348:	4293      	cmp	r3, r2
 800534a:	d906      	bls.n	800535a <USB_SetTurnaroundTime+0x82>
 800534c:	68bb      	ldr	r3, [r7, #8]
 800534e:	4a2e      	ldr	r2, [pc, #184]	; (8005408 <USB_SetTurnaroundTime+0x130>)
 8005350:	4293      	cmp	r3, r2
 8005352:	d802      	bhi.n	800535a <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8005354:	230b      	movs	r3, #11
 8005356:	617b      	str	r3, [r7, #20]
 8005358:	e036      	b.n	80053c8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800535a:	68bb      	ldr	r3, [r7, #8]
 800535c:	4a2a      	ldr	r2, [pc, #168]	; (8005408 <USB_SetTurnaroundTime+0x130>)
 800535e:	4293      	cmp	r3, r2
 8005360:	d906      	bls.n	8005370 <USB_SetTurnaroundTime+0x98>
 8005362:	68bb      	ldr	r3, [r7, #8]
 8005364:	4a29      	ldr	r2, [pc, #164]	; (800540c <USB_SetTurnaroundTime+0x134>)
 8005366:	4293      	cmp	r3, r2
 8005368:	d802      	bhi.n	8005370 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800536a:	230a      	movs	r3, #10
 800536c:	617b      	str	r3, [r7, #20]
 800536e:	e02b      	b.n	80053c8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8005370:	68bb      	ldr	r3, [r7, #8]
 8005372:	4a26      	ldr	r2, [pc, #152]	; (800540c <USB_SetTurnaroundTime+0x134>)
 8005374:	4293      	cmp	r3, r2
 8005376:	d906      	bls.n	8005386 <USB_SetTurnaroundTime+0xae>
 8005378:	68bb      	ldr	r3, [r7, #8]
 800537a:	4a25      	ldr	r2, [pc, #148]	; (8005410 <USB_SetTurnaroundTime+0x138>)
 800537c:	4293      	cmp	r3, r2
 800537e:	d802      	bhi.n	8005386 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8005380:	2309      	movs	r3, #9
 8005382:	617b      	str	r3, [r7, #20]
 8005384:	e020      	b.n	80053c8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8005386:	68bb      	ldr	r3, [r7, #8]
 8005388:	4a21      	ldr	r2, [pc, #132]	; (8005410 <USB_SetTurnaroundTime+0x138>)
 800538a:	4293      	cmp	r3, r2
 800538c:	d906      	bls.n	800539c <USB_SetTurnaroundTime+0xc4>
 800538e:	68bb      	ldr	r3, [r7, #8]
 8005390:	4a20      	ldr	r2, [pc, #128]	; (8005414 <USB_SetTurnaroundTime+0x13c>)
 8005392:	4293      	cmp	r3, r2
 8005394:	d802      	bhi.n	800539c <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8005396:	2308      	movs	r3, #8
 8005398:	617b      	str	r3, [r7, #20]
 800539a:	e015      	b.n	80053c8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800539c:	68bb      	ldr	r3, [r7, #8]
 800539e:	4a1d      	ldr	r2, [pc, #116]	; (8005414 <USB_SetTurnaroundTime+0x13c>)
 80053a0:	4293      	cmp	r3, r2
 80053a2:	d906      	bls.n	80053b2 <USB_SetTurnaroundTime+0xda>
 80053a4:	68bb      	ldr	r3, [r7, #8]
 80053a6:	4a1c      	ldr	r2, [pc, #112]	; (8005418 <USB_SetTurnaroundTime+0x140>)
 80053a8:	4293      	cmp	r3, r2
 80053aa:	d802      	bhi.n	80053b2 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80053ac:	2307      	movs	r3, #7
 80053ae:	617b      	str	r3, [r7, #20]
 80053b0:	e00a      	b.n	80053c8 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 80053b2:	2306      	movs	r3, #6
 80053b4:	617b      	str	r3, [r7, #20]
 80053b6:	e007      	b.n	80053c8 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 80053b8:	79fb      	ldrb	r3, [r7, #7]
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d102      	bne.n	80053c4 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 80053be:	2309      	movs	r3, #9
 80053c0:	617b      	str	r3, [r7, #20]
 80053c2:	e001      	b.n	80053c8 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 80053c4:	2309      	movs	r3, #9
 80053c6:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	68db      	ldr	r3, [r3, #12]
 80053cc:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	68da      	ldr	r2, [r3, #12]
 80053d8:	697b      	ldr	r3, [r7, #20]
 80053da:	029b      	lsls	r3, r3, #10
 80053dc:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 80053e0:	431a      	orrs	r2, r3
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80053e6:	2300      	movs	r3, #0
}
 80053e8:	4618      	mov	r0, r3
 80053ea:	371c      	adds	r7, #28
 80053ec:	46bd      	mov	sp, r7
 80053ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053f2:	4770      	bx	lr
 80053f4:	00d8acbf 	.word	0x00d8acbf
 80053f8:	00e4e1bf 	.word	0x00e4e1bf
 80053fc:	00f423ff 	.word	0x00f423ff
 8005400:	0106737f 	.word	0x0106737f
 8005404:	011a499f 	.word	0x011a499f
 8005408:	01312cff 	.word	0x01312cff
 800540c:	014ca43f 	.word	0x014ca43f
 8005410:	016e35ff 	.word	0x016e35ff
 8005414:	01a6ab1f 	.word	0x01a6ab1f
 8005418:	01e847ff 	.word	0x01e847ff

0800541c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800541c:	b480      	push	{r7}
 800541e:	b083      	sub	sp, #12
 8005420:	af00      	add	r7, sp, #0
 8005422:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	689b      	ldr	r3, [r3, #8]
 8005428:	f043 0201 	orr.w	r2, r3, #1
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005430:	2300      	movs	r3, #0
}
 8005432:	4618      	mov	r0, r3
 8005434:	370c      	adds	r7, #12
 8005436:	46bd      	mov	sp, r7
 8005438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800543c:	4770      	bx	lr

0800543e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800543e:	b480      	push	{r7}
 8005440:	b083      	sub	sp, #12
 8005442:	af00      	add	r7, sp, #0
 8005444:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	689b      	ldr	r3, [r3, #8]
 800544a:	f023 0201 	bic.w	r2, r3, #1
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005452:	2300      	movs	r3, #0
}
 8005454:	4618      	mov	r0, r3
 8005456:	370c      	adds	r7, #12
 8005458:	46bd      	mov	sp, r7
 800545a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800545e:	4770      	bx	lr

08005460 <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005460:	b580      	push	{r7, lr}
 8005462:	b082      	sub	sp, #8
 8005464:	af00      	add	r7, sp, #0
 8005466:	6078      	str	r0, [r7, #4]
 8005468:	460b      	mov	r3, r1
 800546a:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	68db      	ldr	r3, [r3, #12]
 8005470:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005478:	78fb      	ldrb	r3, [r7, #3]
 800547a:	2b01      	cmp	r3, #1
 800547c:	d106      	bne.n	800548c <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	68db      	ldr	r3, [r3, #12]
 8005482:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	60da      	str	r2, [r3, #12]
 800548a:	e00b      	b.n	80054a4 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 800548c:	78fb      	ldrb	r3, [r7, #3]
 800548e:	2b00      	cmp	r3, #0
 8005490:	d106      	bne.n	80054a0 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	68db      	ldr	r3, [r3, #12]
 8005496:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	60da      	str	r2, [r3, #12]
 800549e:	e001      	b.n	80054a4 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 80054a0:	2301      	movs	r3, #1
 80054a2:	e003      	b.n	80054ac <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 80054a4:	2032      	movs	r0, #50	; 0x32
 80054a6:	f7fb fe4b 	bl	8001140 <HAL_Delay>

  return HAL_OK;
 80054aa:	2300      	movs	r3, #0
}
 80054ac:	4618      	mov	r0, r3
 80054ae:	3708      	adds	r7, #8
 80054b0:	46bd      	mov	sp, r7
 80054b2:	bd80      	pop	{r7, pc}

080054b4 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80054b4:	b084      	sub	sp, #16
 80054b6:	b580      	push	{r7, lr}
 80054b8:	b086      	sub	sp, #24
 80054ba:	af00      	add	r7, sp, #0
 80054bc:	6078      	str	r0, [r7, #4]
 80054be:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80054c2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80054c6:	2300      	movs	r3, #0
 80054c8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80054ce:	2300      	movs	r3, #0
 80054d0:	613b      	str	r3, [r7, #16]
 80054d2:	e009      	b.n	80054e8 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80054d4:	687a      	ldr	r2, [r7, #4]
 80054d6:	693b      	ldr	r3, [r7, #16]
 80054d8:	3340      	adds	r3, #64	; 0x40
 80054da:	009b      	lsls	r3, r3, #2
 80054dc:	4413      	add	r3, r2
 80054de:	2200      	movs	r2, #0
 80054e0:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80054e2:	693b      	ldr	r3, [r7, #16]
 80054e4:	3301      	adds	r3, #1
 80054e6:	613b      	str	r3, [r7, #16]
 80054e8:	693b      	ldr	r3, [r7, #16]
 80054ea:	2b0e      	cmp	r3, #14
 80054ec:	d9f2      	bls.n	80054d4 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80054ee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d112      	bne.n	800551a <USB_DevInit+0x66>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054f8:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005504:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005510:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	639a      	str	r2, [r3, #56]	; 0x38
 8005518:	e00b      	b.n	8005532 <USB_DevInit+0x7e>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GOTGCTL &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	601a      	str	r2, [r3, #0]
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800552a:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005538:	461a      	mov	r2, r3
 800553a:	2300      	movs	r3, #0
 800553c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005544:	4619      	mov	r1, r3
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800554c:	461a      	mov	r2, r3
 800554e:	680b      	ldr	r3, [r1, #0]
 8005550:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005552:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005554:	2b01      	cmp	r3, #1
 8005556:	d10c      	bne.n	8005572 <USB_DevInit+0xbe>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8005558:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800555a:	2b00      	cmp	r3, #0
 800555c:	d104      	bne.n	8005568 <USB_DevInit+0xb4>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800555e:	2100      	movs	r1, #0
 8005560:	6878      	ldr	r0, [r7, #4]
 8005562:	f000 f961 	bl	8005828 <USB_SetDevSpeed>
 8005566:	e008      	b.n	800557a <USB_DevInit+0xc6>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8005568:	2101      	movs	r1, #1
 800556a:	6878      	ldr	r0, [r7, #4]
 800556c:	f000 f95c 	bl	8005828 <USB_SetDevSpeed>
 8005570:	e003      	b.n	800557a <USB_DevInit+0xc6>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8005572:	2103      	movs	r1, #3
 8005574:	6878      	ldr	r0, [r7, #4]
 8005576:	f000 f957 	bl	8005828 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800557a:	2110      	movs	r1, #16
 800557c:	6878      	ldr	r0, [r7, #4]
 800557e:	f000 f90b 	bl	8005798 <USB_FlushTxFifo>
 8005582:	4603      	mov	r3, r0
 8005584:	2b00      	cmp	r3, #0
 8005586:	d001      	beq.n	800558c <USB_DevInit+0xd8>
  {
    ret = HAL_ERROR;
 8005588:	2301      	movs	r3, #1
 800558a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800558c:	6878      	ldr	r0, [r7, #4]
 800558e:	f000 f929 	bl	80057e4 <USB_FlushRxFifo>
 8005592:	4603      	mov	r3, r0
 8005594:	2b00      	cmp	r3, #0
 8005596:	d001      	beq.n	800559c <USB_DevInit+0xe8>
  {
    ret = HAL_ERROR;
 8005598:	2301      	movs	r3, #1
 800559a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80055a2:	461a      	mov	r2, r3
 80055a4:	2300      	movs	r3, #0
 80055a6:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80055ae:	461a      	mov	r2, r3
 80055b0:	2300      	movs	r3, #0
 80055b2:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80055ba:	461a      	mov	r2, r3
 80055bc:	2300      	movs	r3, #0
 80055be:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80055c0:	2300      	movs	r3, #0
 80055c2:	613b      	str	r3, [r7, #16]
 80055c4:	e043      	b.n	800564e <USB_DevInit+0x19a>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80055c6:	693b      	ldr	r3, [r7, #16]
 80055c8:	015a      	lsls	r2, r3, #5
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	4413      	add	r3, r2
 80055ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80055d8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80055dc:	d118      	bne.n	8005610 <USB_DevInit+0x15c>
    {
      if (i == 0U)
 80055de:	693b      	ldr	r3, [r7, #16]
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d10a      	bne.n	80055fa <USB_DevInit+0x146>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80055e4:	693b      	ldr	r3, [r7, #16]
 80055e6:	015a      	lsls	r2, r3, #5
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	4413      	add	r3, r2
 80055ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80055f0:	461a      	mov	r2, r3
 80055f2:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80055f6:	6013      	str	r3, [r2, #0]
 80055f8:	e013      	b.n	8005622 <USB_DevInit+0x16e>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80055fa:	693b      	ldr	r3, [r7, #16]
 80055fc:	015a      	lsls	r2, r3, #5
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	4413      	add	r3, r2
 8005602:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005606:	461a      	mov	r2, r3
 8005608:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800560c:	6013      	str	r3, [r2, #0]
 800560e:	e008      	b.n	8005622 <USB_DevInit+0x16e>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8005610:	693b      	ldr	r3, [r7, #16]
 8005612:	015a      	lsls	r2, r3, #5
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	4413      	add	r3, r2
 8005618:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800561c:	461a      	mov	r2, r3
 800561e:	2300      	movs	r3, #0
 8005620:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8005622:	693b      	ldr	r3, [r7, #16]
 8005624:	015a      	lsls	r2, r3, #5
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	4413      	add	r3, r2
 800562a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800562e:	461a      	mov	r2, r3
 8005630:	2300      	movs	r3, #0
 8005632:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8005634:	693b      	ldr	r3, [r7, #16]
 8005636:	015a      	lsls	r2, r3, #5
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	4413      	add	r3, r2
 800563c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005640:	461a      	mov	r2, r3
 8005642:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005646:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005648:	693b      	ldr	r3, [r7, #16]
 800564a:	3301      	adds	r3, #1
 800564c:	613b      	str	r3, [r7, #16]
 800564e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005650:	693a      	ldr	r2, [r7, #16]
 8005652:	429a      	cmp	r2, r3
 8005654:	d3b7      	bcc.n	80055c6 <USB_DevInit+0x112>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005656:	2300      	movs	r3, #0
 8005658:	613b      	str	r3, [r7, #16]
 800565a:	e043      	b.n	80056e4 <USB_DevInit+0x230>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800565c:	693b      	ldr	r3, [r7, #16]
 800565e:	015a      	lsls	r2, r3, #5
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	4413      	add	r3, r2
 8005664:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800566e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005672:	d118      	bne.n	80056a6 <USB_DevInit+0x1f2>
    {
      if (i == 0U)
 8005674:	693b      	ldr	r3, [r7, #16]
 8005676:	2b00      	cmp	r3, #0
 8005678:	d10a      	bne.n	8005690 <USB_DevInit+0x1dc>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800567a:	693b      	ldr	r3, [r7, #16]
 800567c:	015a      	lsls	r2, r3, #5
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	4413      	add	r3, r2
 8005682:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005686:	461a      	mov	r2, r3
 8005688:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800568c:	6013      	str	r3, [r2, #0]
 800568e:	e013      	b.n	80056b8 <USB_DevInit+0x204>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8005690:	693b      	ldr	r3, [r7, #16]
 8005692:	015a      	lsls	r2, r3, #5
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	4413      	add	r3, r2
 8005698:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800569c:	461a      	mov	r2, r3
 800569e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80056a2:	6013      	str	r3, [r2, #0]
 80056a4:	e008      	b.n	80056b8 <USB_DevInit+0x204>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80056a6:	693b      	ldr	r3, [r7, #16]
 80056a8:	015a      	lsls	r2, r3, #5
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	4413      	add	r3, r2
 80056ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80056b2:	461a      	mov	r2, r3
 80056b4:	2300      	movs	r3, #0
 80056b6:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80056b8:	693b      	ldr	r3, [r7, #16]
 80056ba:	015a      	lsls	r2, r3, #5
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	4413      	add	r3, r2
 80056c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80056c4:	461a      	mov	r2, r3
 80056c6:	2300      	movs	r3, #0
 80056c8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80056ca:	693b      	ldr	r3, [r7, #16]
 80056cc:	015a      	lsls	r2, r3, #5
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	4413      	add	r3, r2
 80056d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80056d6:	461a      	mov	r2, r3
 80056d8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80056dc:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80056de:	693b      	ldr	r3, [r7, #16]
 80056e0:	3301      	adds	r3, #1
 80056e2:	613b      	str	r3, [r7, #16]
 80056e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056e6:	693a      	ldr	r2, [r7, #16]
 80056e8:	429a      	cmp	r2, r3
 80056ea:	d3b7      	bcc.n	800565c <USB_DevInit+0x1a8>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80056f2:	691b      	ldr	r3, [r3, #16]
 80056f4:	68fa      	ldr	r2, [r7, #12]
 80056f6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80056fa:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80056fe:	6113      	str	r3, [r2, #16]

  if (cfg.dma_enable == 1U)
 8005700:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005702:	2b01      	cmp	r3, #1
 8005704:	d111      	bne.n	800572a <USB_DevInit+0x276>
  {
    /*Set threshold parameters */
    USBx_DEVICE->DTHRCTL = USB_OTG_DTHRCTL_TXTHRLEN_6 |
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800570c:	461a      	mov	r2, r3
 800570e:	4b20      	ldr	r3, [pc, #128]	; (8005790 <USB_DevInit+0x2dc>)
 8005710:	6313      	str	r3, [r2, #48]	; 0x30
                           USB_OTG_DTHRCTL_RXTHRLEN_6;

    USBx_DEVICE->DTHRCTL |= USB_OTG_DTHRCTL_RXTHREN |
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005718:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800571a:	68fa      	ldr	r2, [r7, #12]
 800571c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005720:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005724:	f043 0303 	orr.w	r3, r3, #3
 8005728:	6313      	str	r3, [r2, #48]	; 0x30
                            USB_OTG_DTHRCTL_ISOTHREN |
                            USB_OTG_DTHRCTL_NONISOTHREN;
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	2200      	movs	r2, #0
 800572e:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8005736:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005738:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800573a:	2b00      	cmp	r3, #0
 800573c:	d105      	bne.n	800574a <USB_DevInit+0x296>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	699b      	ldr	r3, [r3, #24]
 8005742:	f043 0210 	orr.w	r2, r3, #16
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	699a      	ldr	r2, [r3, #24]
 800574e:	4b11      	ldr	r3, [pc, #68]	; (8005794 <USB_DevInit+0x2e0>)
 8005750:	4313      	orrs	r3, r2
 8005752:	687a      	ldr	r2, [r7, #4]
 8005754:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8005756:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005758:	2b00      	cmp	r3, #0
 800575a:	d005      	beq.n	8005768 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	699b      	ldr	r3, [r3, #24]
 8005760:	f043 0208 	orr.w	r2, r3, #8
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8005768:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800576a:	2b01      	cmp	r3, #1
 800576c:	d107      	bne.n	800577e <USB_DevInit+0x2ca>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	699b      	ldr	r3, [r3, #24]
 8005772:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005776:	f043 0304 	orr.w	r3, r3, #4
 800577a:	687a      	ldr	r2, [r7, #4]
 800577c:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800577e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005780:	4618      	mov	r0, r3
 8005782:	3718      	adds	r7, #24
 8005784:	46bd      	mov	sp, r7
 8005786:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800578a:	b004      	add	sp, #16
 800578c:	4770      	bx	lr
 800578e:	bf00      	nop
 8005790:	00800100 	.word	0x00800100
 8005794:	803c3800 	.word	0x803c3800

08005798 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005798:	b480      	push	{r7}
 800579a:	b085      	sub	sp, #20
 800579c:	af00      	add	r7, sp, #0
 800579e:	6078      	str	r0, [r7, #4]
 80057a0:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 80057a2:	2300      	movs	r3, #0
 80057a4:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80057a6:	683b      	ldr	r3, [r7, #0]
 80057a8:	019b      	lsls	r3, r3, #6
 80057aa:	f043 0220 	orr.w	r2, r3, #32
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	3301      	adds	r3, #1
 80057b6:	60fb      	str	r3, [r7, #12]
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	4a09      	ldr	r2, [pc, #36]	; (80057e0 <USB_FlushTxFifo+0x48>)
 80057bc:	4293      	cmp	r3, r2
 80057be:	d901      	bls.n	80057c4 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 80057c0:	2303      	movs	r3, #3
 80057c2:	e006      	b.n	80057d2 <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	691b      	ldr	r3, [r3, #16]
 80057c8:	f003 0320 	and.w	r3, r3, #32
 80057cc:	2b20      	cmp	r3, #32
 80057ce:	d0f0      	beq.n	80057b2 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 80057d0:	2300      	movs	r3, #0
}
 80057d2:	4618      	mov	r0, r3
 80057d4:	3714      	adds	r7, #20
 80057d6:	46bd      	mov	sp, r7
 80057d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057dc:	4770      	bx	lr
 80057de:	bf00      	nop
 80057e0:	00030d40 	.word	0x00030d40

080057e4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80057e4:	b480      	push	{r7}
 80057e6:	b085      	sub	sp, #20
 80057e8:	af00      	add	r7, sp, #0
 80057ea:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 80057ec:	2300      	movs	r3, #0
 80057ee:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	2210      	movs	r2, #16
 80057f4:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	3301      	adds	r3, #1
 80057fa:	60fb      	str	r3, [r7, #12]
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	4a09      	ldr	r2, [pc, #36]	; (8005824 <USB_FlushRxFifo+0x40>)
 8005800:	4293      	cmp	r3, r2
 8005802:	d901      	bls.n	8005808 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8005804:	2303      	movs	r3, #3
 8005806:	e006      	b.n	8005816 <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	691b      	ldr	r3, [r3, #16]
 800580c:	f003 0310 	and.w	r3, r3, #16
 8005810:	2b10      	cmp	r3, #16
 8005812:	d0f0      	beq.n	80057f6 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8005814:	2300      	movs	r3, #0
}
 8005816:	4618      	mov	r0, r3
 8005818:	3714      	adds	r7, #20
 800581a:	46bd      	mov	sp, r7
 800581c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005820:	4770      	bx	lr
 8005822:	bf00      	nop
 8005824:	00030d40 	.word	0x00030d40

08005828 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8005828:	b480      	push	{r7}
 800582a:	b085      	sub	sp, #20
 800582c:	af00      	add	r7, sp, #0
 800582e:	6078      	str	r0, [r7, #4]
 8005830:	460b      	mov	r3, r1
 8005832:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800583e:	681a      	ldr	r2, [r3, #0]
 8005840:	78fb      	ldrb	r3, [r7, #3]
 8005842:	68f9      	ldr	r1, [r7, #12]
 8005844:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005848:	4313      	orrs	r3, r2
 800584a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800584c:	2300      	movs	r3, #0
}
 800584e:	4618      	mov	r0, r3
 8005850:	3714      	adds	r7, #20
 8005852:	46bd      	mov	sp, r7
 8005854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005858:	4770      	bx	lr

0800585a <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg PCD_SPEED_HIGH: High speed mode
  *            @arg PCD_SPEED_FULL: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800585a:	b480      	push	{r7}
 800585c:	b087      	sub	sp, #28
 800585e:	af00      	add	r7, sp, #0
 8005860:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8005866:	693b      	ldr	r3, [r7, #16]
 8005868:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800586c:	689b      	ldr	r3, [r3, #8]
 800586e:	f003 0306 	and.w	r3, r3, #6
 8005872:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	2b00      	cmp	r3, #0
 8005878:	d102      	bne.n	8005880 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800587a:	2300      	movs	r3, #0
 800587c:	75fb      	strb	r3, [r7, #23]
 800587e:	e00a      	b.n	8005896 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	2b02      	cmp	r3, #2
 8005884:	d002      	beq.n	800588c <USB_GetDevSpeed+0x32>
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	2b06      	cmp	r3, #6
 800588a:	d102      	bne.n	8005892 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800588c:	2302      	movs	r3, #2
 800588e:	75fb      	strb	r3, [r7, #23]
 8005890:	e001      	b.n	8005896 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8005892:	230f      	movs	r3, #15
 8005894:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8005896:	7dfb      	ldrb	r3, [r7, #23]
}
 8005898:	4618      	mov	r0, r3
 800589a:	371c      	adds	r7, #28
 800589c:	46bd      	mov	sp, r7
 800589e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058a2:	4770      	bx	lr

080058a4 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80058a4:	b480      	push	{r7}
 80058a6:	b085      	sub	sp, #20
 80058a8:	af00      	add	r7, sp, #0
 80058aa:	6078      	str	r0, [r7, #4]
 80058ac:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80058b2:	683b      	ldr	r3, [r7, #0]
 80058b4:	781b      	ldrb	r3, [r3, #0]
 80058b6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80058b8:	683b      	ldr	r3, [r7, #0]
 80058ba:	785b      	ldrb	r3, [r3, #1]
 80058bc:	2b01      	cmp	r3, #1
 80058be:	d13a      	bne.n	8005936 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80058c6:	69da      	ldr	r2, [r3, #28]
 80058c8:	683b      	ldr	r3, [r7, #0]
 80058ca:	781b      	ldrb	r3, [r3, #0]
 80058cc:	f003 030f 	and.w	r3, r3, #15
 80058d0:	2101      	movs	r1, #1
 80058d2:	fa01 f303 	lsl.w	r3, r1, r3
 80058d6:	b29b      	uxth	r3, r3
 80058d8:	68f9      	ldr	r1, [r7, #12]
 80058da:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80058de:	4313      	orrs	r3, r2
 80058e0:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80058e2:	68bb      	ldr	r3, [r7, #8]
 80058e4:	015a      	lsls	r2, r3, #5
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	4413      	add	r3, r2
 80058ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d155      	bne.n	80059a4 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80058f8:	68bb      	ldr	r3, [r7, #8]
 80058fa:	015a      	lsls	r2, r3, #5
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	4413      	add	r3, r2
 8005900:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005904:	681a      	ldr	r2, [r3, #0]
 8005906:	683b      	ldr	r3, [r7, #0]
 8005908:	689b      	ldr	r3, [r3, #8]
 800590a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800590e:	683b      	ldr	r3, [r7, #0]
 8005910:	78db      	ldrb	r3, [r3, #3]
 8005912:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005914:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005916:	68bb      	ldr	r3, [r7, #8]
 8005918:	059b      	lsls	r3, r3, #22
 800591a:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800591c:	4313      	orrs	r3, r2
 800591e:	68ba      	ldr	r2, [r7, #8]
 8005920:	0151      	lsls	r1, r2, #5
 8005922:	68fa      	ldr	r2, [r7, #12]
 8005924:	440a      	add	r2, r1
 8005926:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800592a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800592e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005932:	6013      	str	r3, [r2, #0]
 8005934:	e036      	b.n	80059a4 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800593c:	69da      	ldr	r2, [r3, #28]
 800593e:	683b      	ldr	r3, [r7, #0]
 8005940:	781b      	ldrb	r3, [r3, #0]
 8005942:	f003 030f 	and.w	r3, r3, #15
 8005946:	2101      	movs	r1, #1
 8005948:	fa01 f303 	lsl.w	r3, r1, r3
 800594c:	041b      	lsls	r3, r3, #16
 800594e:	68f9      	ldr	r1, [r7, #12]
 8005950:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005954:	4313      	orrs	r3, r2
 8005956:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8005958:	68bb      	ldr	r3, [r7, #8]
 800595a:	015a      	lsls	r2, r3, #5
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	4413      	add	r3, r2
 8005960:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800596a:	2b00      	cmp	r3, #0
 800596c:	d11a      	bne.n	80059a4 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800596e:	68bb      	ldr	r3, [r7, #8]
 8005970:	015a      	lsls	r2, r3, #5
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	4413      	add	r3, r2
 8005976:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800597a:	681a      	ldr	r2, [r3, #0]
 800597c:	683b      	ldr	r3, [r7, #0]
 800597e:	689b      	ldr	r3, [r3, #8]
 8005980:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8005984:	683b      	ldr	r3, [r7, #0]
 8005986:	78db      	ldrb	r3, [r3, #3]
 8005988:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800598a:	430b      	orrs	r3, r1
 800598c:	4313      	orrs	r3, r2
 800598e:	68ba      	ldr	r2, [r7, #8]
 8005990:	0151      	lsls	r1, r2, #5
 8005992:	68fa      	ldr	r2, [r7, #12]
 8005994:	440a      	add	r2, r1
 8005996:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800599a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800599e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80059a2:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80059a4:	2300      	movs	r3, #0
}
 80059a6:	4618      	mov	r0, r3
 80059a8:	3714      	adds	r7, #20
 80059aa:	46bd      	mov	sp, r7
 80059ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059b0:	4770      	bx	lr
	...

080059b4 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80059b4:	b480      	push	{r7}
 80059b6:	b085      	sub	sp, #20
 80059b8:	af00      	add	r7, sp, #0
 80059ba:	6078      	str	r0, [r7, #4]
 80059bc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80059c2:	683b      	ldr	r3, [r7, #0]
 80059c4:	781b      	ldrb	r3, [r3, #0]
 80059c6:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80059c8:	683b      	ldr	r3, [r7, #0]
 80059ca:	785b      	ldrb	r3, [r3, #1]
 80059cc:	2b01      	cmp	r3, #1
 80059ce:	d135      	bne.n	8005a3c <USB_DeactivateEndpoint+0x88>
  {
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80059d6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80059d8:	683b      	ldr	r3, [r7, #0]
 80059da:	781b      	ldrb	r3, [r3, #0]
 80059dc:	f003 030f 	and.w	r3, r3, #15
 80059e0:	2101      	movs	r1, #1
 80059e2:	fa01 f303 	lsl.w	r3, r1, r3
 80059e6:	b29b      	uxth	r3, r3
 80059e8:	43db      	mvns	r3, r3
 80059ea:	68f9      	ldr	r1, [r7, #12]
 80059ec:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80059f0:	4013      	ands	r3, r2
 80059f2:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80059fa:	69da      	ldr	r2, [r3, #28]
 80059fc:	683b      	ldr	r3, [r7, #0]
 80059fe:	781b      	ldrb	r3, [r3, #0]
 8005a00:	f003 030f 	and.w	r3, r3, #15
 8005a04:	2101      	movs	r1, #1
 8005a06:	fa01 f303 	lsl.w	r3, r1, r3
 8005a0a:	b29b      	uxth	r3, r3
 8005a0c:	43db      	mvns	r3, r3
 8005a0e:	68f9      	ldr	r1, [r7, #12]
 8005a10:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005a14:	4013      	ands	r3, r2
 8005a16:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8005a18:	68bb      	ldr	r3, [r7, #8]
 8005a1a:	015a      	lsls	r2, r3, #5
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	4413      	add	r3, r2
 8005a20:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a24:	681a      	ldr	r2, [r3, #0]
 8005a26:	68bb      	ldr	r3, [r7, #8]
 8005a28:	0159      	lsls	r1, r3, #5
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	440b      	add	r3, r1
 8005a2e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a32:	4619      	mov	r1, r3
 8005a34:	4b1f      	ldr	r3, [pc, #124]	; (8005ab4 <USB_DeactivateEndpoint+0x100>)
 8005a36:	4013      	ands	r3, r2
 8005a38:	600b      	str	r3, [r1, #0]
 8005a3a:	e034      	b.n	8005aa6 <USB_DeactivateEndpoint+0xf2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a42:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005a44:	683b      	ldr	r3, [r7, #0]
 8005a46:	781b      	ldrb	r3, [r3, #0]
 8005a48:	f003 030f 	and.w	r3, r3, #15
 8005a4c:	2101      	movs	r1, #1
 8005a4e:	fa01 f303 	lsl.w	r3, r1, r3
 8005a52:	041b      	lsls	r3, r3, #16
 8005a54:	43db      	mvns	r3, r3
 8005a56:	68f9      	ldr	r1, [r7, #12]
 8005a58:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005a5c:	4013      	ands	r3, r2
 8005a5e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a66:	69da      	ldr	r2, [r3, #28]
 8005a68:	683b      	ldr	r3, [r7, #0]
 8005a6a:	781b      	ldrb	r3, [r3, #0]
 8005a6c:	f003 030f 	and.w	r3, r3, #15
 8005a70:	2101      	movs	r1, #1
 8005a72:	fa01 f303 	lsl.w	r3, r1, r3
 8005a76:	041b      	lsls	r3, r3, #16
 8005a78:	43db      	mvns	r3, r3
 8005a7a:	68f9      	ldr	r1, [r7, #12]
 8005a7c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005a80:	4013      	ands	r3, r2
 8005a82:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8005a84:	68bb      	ldr	r3, [r7, #8]
 8005a86:	015a      	lsls	r2, r3, #5
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	4413      	add	r3, r2
 8005a8c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a90:	681a      	ldr	r2, [r3, #0]
 8005a92:	68bb      	ldr	r3, [r7, #8]
 8005a94:	0159      	lsls	r1, r3, #5
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	440b      	add	r3, r1
 8005a9a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a9e:	4619      	mov	r1, r3
 8005aa0:	4b05      	ldr	r3, [pc, #20]	; (8005ab8 <USB_DeactivateEndpoint+0x104>)
 8005aa2:	4013      	ands	r3, r2
 8005aa4:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8005aa6:	2300      	movs	r3, #0
}
 8005aa8:	4618      	mov	r0, r3
 8005aaa:	3714      	adds	r7, #20
 8005aac:	46bd      	mov	sp, r7
 8005aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ab2:	4770      	bx	lr
 8005ab4:	ec337800 	.word	0xec337800
 8005ab8:	eff37800 	.word	0xeff37800

08005abc <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8005abc:	b580      	push	{r7, lr}
 8005abe:	b08a      	sub	sp, #40	; 0x28
 8005ac0:	af02      	add	r7, sp, #8
 8005ac2:	60f8      	str	r0, [r7, #12]
 8005ac4:	60b9      	str	r1, [r7, #8]
 8005ac6:	4613      	mov	r3, r2
 8005ac8:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8005ace:	68bb      	ldr	r3, [r7, #8]
 8005ad0:	781b      	ldrb	r3, [r3, #0]
 8005ad2:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005ad4:	68bb      	ldr	r3, [r7, #8]
 8005ad6:	785b      	ldrb	r3, [r3, #1]
 8005ad8:	2b01      	cmp	r3, #1
 8005ada:	f040 815c 	bne.w	8005d96 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8005ade:	68bb      	ldr	r3, [r7, #8]
 8005ae0:	695b      	ldr	r3, [r3, #20]
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d132      	bne.n	8005b4c <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005ae6:	69bb      	ldr	r3, [r7, #24]
 8005ae8:	015a      	lsls	r2, r3, #5
 8005aea:	69fb      	ldr	r3, [r7, #28]
 8005aec:	4413      	add	r3, r2
 8005aee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005af2:	691b      	ldr	r3, [r3, #16]
 8005af4:	69ba      	ldr	r2, [r7, #24]
 8005af6:	0151      	lsls	r1, r2, #5
 8005af8:	69fa      	ldr	r2, [r7, #28]
 8005afa:	440a      	add	r2, r1
 8005afc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005b00:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005b04:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005b08:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005b0a:	69bb      	ldr	r3, [r7, #24]
 8005b0c:	015a      	lsls	r2, r3, #5
 8005b0e:	69fb      	ldr	r3, [r7, #28]
 8005b10:	4413      	add	r3, r2
 8005b12:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b16:	691b      	ldr	r3, [r3, #16]
 8005b18:	69ba      	ldr	r2, [r7, #24]
 8005b1a:	0151      	lsls	r1, r2, #5
 8005b1c:	69fa      	ldr	r2, [r7, #28]
 8005b1e:	440a      	add	r2, r1
 8005b20:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005b24:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005b28:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005b2a:	69bb      	ldr	r3, [r7, #24]
 8005b2c:	015a      	lsls	r2, r3, #5
 8005b2e:	69fb      	ldr	r3, [r7, #28]
 8005b30:	4413      	add	r3, r2
 8005b32:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b36:	691b      	ldr	r3, [r3, #16]
 8005b38:	69ba      	ldr	r2, [r7, #24]
 8005b3a:	0151      	lsls	r1, r2, #5
 8005b3c:	69fa      	ldr	r2, [r7, #28]
 8005b3e:	440a      	add	r2, r1
 8005b40:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005b44:	0cdb      	lsrs	r3, r3, #19
 8005b46:	04db      	lsls	r3, r3, #19
 8005b48:	6113      	str	r3, [r2, #16]
 8005b4a:	e074      	b.n	8005c36 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005b4c:	69bb      	ldr	r3, [r7, #24]
 8005b4e:	015a      	lsls	r2, r3, #5
 8005b50:	69fb      	ldr	r3, [r7, #28]
 8005b52:	4413      	add	r3, r2
 8005b54:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b58:	691b      	ldr	r3, [r3, #16]
 8005b5a:	69ba      	ldr	r2, [r7, #24]
 8005b5c:	0151      	lsls	r1, r2, #5
 8005b5e:	69fa      	ldr	r2, [r7, #28]
 8005b60:	440a      	add	r2, r1
 8005b62:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005b66:	0cdb      	lsrs	r3, r3, #19
 8005b68:	04db      	lsls	r3, r3, #19
 8005b6a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005b6c:	69bb      	ldr	r3, [r7, #24]
 8005b6e:	015a      	lsls	r2, r3, #5
 8005b70:	69fb      	ldr	r3, [r7, #28]
 8005b72:	4413      	add	r3, r2
 8005b74:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b78:	691b      	ldr	r3, [r3, #16]
 8005b7a:	69ba      	ldr	r2, [r7, #24]
 8005b7c:	0151      	lsls	r1, r2, #5
 8005b7e:	69fa      	ldr	r2, [r7, #28]
 8005b80:	440a      	add	r2, r1
 8005b82:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005b86:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005b8a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005b8e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8005b90:	69bb      	ldr	r3, [r7, #24]
 8005b92:	015a      	lsls	r2, r3, #5
 8005b94:	69fb      	ldr	r3, [r7, #28]
 8005b96:	4413      	add	r3, r2
 8005b98:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b9c:	691a      	ldr	r2, [r3, #16]
 8005b9e:	68bb      	ldr	r3, [r7, #8]
 8005ba0:	6959      	ldr	r1, [r3, #20]
 8005ba2:	68bb      	ldr	r3, [r7, #8]
 8005ba4:	689b      	ldr	r3, [r3, #8]
 8005ba6:	440b      	add	r3, r1
 8005ba8:	1e59      	subs	r1, r3, #1
 8005baa:	68bb      	ldr	r3, [r7, #8]
 8005bac:	689b      	ldr	r3, [r3, #8]
 8005bae:	fbb1 f3f3 	udiv	r3, r1, r3
 8005bb2:	04d9      	lsls	r1, r3, #19
 8005bb4:	4b9d      	ldr	r3, [pc, #628]	; (8005e2c <USB_EPStartXfer+0x370>)
 8005bb6:	400b      	ands	r3, r1
 8005bb8:	69b9      	ldr	r1, [r7, #24]
 8005bba:	0148      	lsls	r0, r1, #5
 8005bbc:	69f9      	ldr	r1, [r7, #28]
 8005bbe:	4401      	add	r1, r0
 8005bc0:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005bc4:	4313      	orrs	r3, r2
 8005bc6:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8005bc8:	69bb      	ldr	r3, [r7, #24]
 8005bca:	015a      	lsls	r2, r3, #5
 8005bcc:	69fb      	ldr	r3, [r7, #28]
 8005bce:	4413      	add	r3, r2
 8005bd0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005bd4:	691a      	ldr	r2, [r3, #16]
 8005bd6:	68bb      	ldr	r3, [r7, #8]
 8005bd8:	695b      	ldr	r3, [r3, #20]
 8005bda:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005bde:	69b9      	ldr	r1, [r7, #24]
 8005be0:	0148      	lsls	r0, r1, #5
 8005be2:	69f9      	ldr	r1, [r7, #28]
 8005be4:	4401      	add	r1, r0
 8005be6:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005bea:	4313      	orrs	r3, r2
 8005bec:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8005bee:	68bb      	ldr	r3, [r7, #8]
 8005bf0:	78db      	ldrb	r3, [r3, #3]
 8005bf2:	2b01      	cmp	r3, #1
 8005bf4:	d11f      	bne.n	8005c36 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8005bf6:	69bb      	ldr	r3, [r7, #24]
 8005bf8:	015a      	lsls	r2, r3, #5
 8005bfa:	69fb      	ldr	r3, [r7, #28]
 8005bfc:	4413      	add	r3, r2
 8005bfe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c02:	691b      	ldr	r3, [r3, #16]
 8005c04:	69ba      	ldr	r2, [r7, #24]
 8005c06:	0151      	lsls	r1, r2, #5
 8005c08:	69fa      	ldr	r2, [r7, #28]
 8005c0a:	440a      	add	r2, r1
 8005c0c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005c10:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8005c14:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8005c16:	69bb      	ldr	r3, [r7, #24]
 8005c18:	015a      	lsls	r2, r3, #5
 8005c1a:	69fb      	ldr	r3, [r7, #28]
 8005c1c:	4413      	add	r3, r2
 8005c1e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c22:	691b      	ldr	r3, [r3, #16]
 8005c24:	69ba      	ldr	r2, [r7, #24]
 8005c26:	0151      	lsls	r1, r2, #5
 8005c28:	69fa      	ldr	r2, [r7, #28]
 8005c2a:	440a      	add	r2, r1
 8005c2c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005c30:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005c34:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8005c36:	79fb      	ldrb	r3, [r7, #7]
 8005c38:	2b01      	cmp	r3, #1
 8005c3a:	d14b      	bne.n	8005cd4 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8005c3c:	68bb      	ldr	r3, [r7, #8]
 8005c3e:	691b      	ldr	r3, [r3, #16]
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	d009      	beq.n	8005c58 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8005c44:	69bb      	ldr	r3, [r7, #24]
 8005c46:	015a      	lsls	r2, r3, #5
 8005c48:	69fb      	ldr	r3, [r7, #28]
 8005c4a:	4413      	add	r3, r2
 8005c4c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c50:	461a      	mov	r2, r3
 8005c52:	68bb      	ldr	r3, [r7, #8]
 8005c54:	691b      	ldr	r3, [r3, #16]
 8005c56:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8005c58:	68bb      	ldr	r3, [r7, #8]
 8005c5a:	78db      	ldrb	r3, [r3, #3]
 8005c5c:	2b01      	cmp	r3, #1
 8005c5e:	d128      	bne.n	8005cb2 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005c60:	69fb      	ldr	r3, [r7, #28]
 8005c62:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c66:	689b      	ldr	r3, [r3, #8]
 8005c68:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d110      	bne.n	8005c92 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005c70:	69bb      	ldr	r3, [r7, #24]
 8005c72:	015a      	lsls	r2, r3, #5
 8005c74:	69fb      	ldr	r3, [r7, #28]
 8005c76:	4413      	add	r3, r2
 8005c78:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	69ba      	ldr	r2, [r7, #24]
 8005c80:	0151      	lsls	r1, r2, #5
 8005c82:	69fa      	ldr	r2, [r7, #28]
 8005c84:	440a      	add	r2, r1
 8005c86:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005c8a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005c8e:	6013      	str	r3, [r2, #0]
 8005c90:	e00f      	b.n	8005cb2 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8005c92:	69bb      	ldr	r3, [r7, #24]
 8005c94:	015a      	lsls	r2, r3, #5
 8005c96:	69fb      	ldr	r3, [r7, #28]
 8005c98:	4413      	add	r3, r2
 8005c9a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	69ba      	ldr	r2, [r7, #24]
 8005ca2:	0151      	lsls	r1, r2, #5
 8005ca4:	69fa      	ldr	r2, [r7, #28]
 8005ca6:	440a      	add	r2, r1
 8005ca8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005cac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005cb0:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005cb2:	69bb      	ldr	r3, [r7, #24]
 8005cb4:	015a      	lsls	r2, r3, #5
 8005cb6:	69fb      	ldr	r3, [r7, #28]
 8005cb8:	4413      	add	r3, r2
 8005cba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	69ba      	ldr	r2, [r7, #24]
 8005cc2:	0151      	lsls	r1, r2, #5
 8005cc4:	69fa      	ldr	r2, [r7, #28]
 8005cc6:	440a      	add	r2, r1
 8005cc8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005ccc:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005cd0:	6013      	str	r3, [r2, #0]
 8005cd2:	e12f      	b.n	8005f34 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005cd4:	69bb      	ldr	r3, [r7, #24]
 8005cd6:	015a      	lsls	r2, r3, #5
 8005cd8:	69fb      	ldr	r3, [r7, #28]
 8005cda:	4413      	add	r3, r2
 8005cdc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	69ba      	ldr	r2, [r7, #24]
 8005ce4:	0151      	lsls	r1, r2, #5
 8005ce6:	69fa      	ldr	r2, [r7, #28]
 8005ce8:	440a      	add	r2, r1
 8005cea:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005cee:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005cf2:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005cf4:	68bb      	ldr	r3, [r7, #8]
 8005cf6:	78db      	ldrb	r3, [r3, #3]
 8005cf8:	2b01      	cmp	r3, #1
 8005cfa:	d015      	beq.n	8005d28 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8005cfc:	68bb      	ldr	r3, [r7, #8]
 8005cfe:	695b      	ldr	r3, [r3, #20]
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	f000 8117 	beq.w	8005f34 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8005d06:	69fb      	ldr	r3, [r7, #28]
 8005d08:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d0c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005d0e:	68bb      	ldr	r3, [r7, #8]
 8005d10:	781b      	ldrb	r3, [r3, #0]
 8005d12:	f003 030f 	and.w	r3, r3, #15
 8005d16:	2101      	movs	r1, #1
 8005d18:	fa01 f303 	lsl.w	r3, r1, r3
 8005d1c:	69f9      	ldr	r1, [r7, #28]
 8005d1e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005d22:	4313      	orrs	r3, r2
 8005d24:	634b      	str	r3, [r1, #52]	; 0x34
 8005d26:	e105      	b.n	8005f34 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005d28:	69fb      	ldr	r3, [r7, #28]
 8005d2a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d2e:	689b      	ldr	r3, [r3, #8]
 8005d30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	d110      	bne.n	8005d5a <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005d38:	69bb      	ldr	r3, [r7, #24]
 8005d3a:	015a      	lsls	r2, r3, #5
 8005d3c:	69fb      	ldr	r3, [r7, #28]
 8005d3e:	4413      	add	r3, r2
 8005d40:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	69ba      	ldr	r2, [r7, #24]
 8005d48:	0151      	lsls	r1, r2, #5
 8005d4a:	69fa      	ldr	r2, [r7, #28]
 8005d4c:	440a      	add	r2, r1
 8005d4e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005d52:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005d56:	6013      	str	r3, [r2, #0]
 8005d58:	e00f      	b.n	8005d7a <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8005d5a:	69bb      	ldr	r3, [r7, #24]
 8005d5c:	015a      	lsls	r2, r3, #5
 8005d5e:	69fb      	ldr	r3, [r7, #28]
 8005d60:	4413      	add	r3, r2
 8005d62:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	69ba      	ldr	r2, [r7, #24]
 8005d6a:	0151      	lsls	r1, r2, #5
 8005d6c:	69fa      	ldr	r2, [r7, #28]
 8005d6e:	440a      	add	r2, r1
 8005d70:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005d74:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005d78:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8005d7a:	68bb      	ldr	r3, [r7, #8]
 8005d7c:	68d9      	ldr	r1, [r3, #12]
 8005d7e:	68bb      	ldr	r3, [r7, #8]
 8005d80:	781a      	ldrb	r2, [r3, #0]
 8005d82:	68bb      	ldr	r3, [r7, #8]
 8005d84:	695b      	ldr	r3, [r3, #20]
 8005d86:	b298      	uxth	r0, r3
 8005d88:	79fb      	ldrb	r3, [r7, #7]
 8005d8a:	9300      	str	r3, [sp, #0]
 8005d8c:	4603      	mov	r3, r0
 8005d8e:	68f8      	ldr	r0, [r7, #12]
 8005d90:	f000 fa2b 	bl	80061ea <USB_WritePacket>
 8005d94:	e0ce      	b.n	8005f34 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8005d96:	69bb      	ldr	r3, [r7, #24]
 8005d98:	015a      	lsls	r2, r3, #5
 8005d9a:	69fb      	ldr	r3, [r7, #28]
 8005d9c:	4413      	add	r3, r2
 8005d9e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005da2:	691b      	ldr	r3, [r3, #16]
 8005da4:	69ba      	ldr	r2, [r7, #24]
 8005da6:	0151      	lsls	r1, r2, #5
 8005da8:	69fa      	ldr	r2, [r7, #28]
 8005daa:	440a      	add	r2, r1
 8005dac:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005db0:	0cdb      	lsrs	r3, r3, #19
 8005db2:	04db      	lsls	r3, r3, #19
 8005db4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8005db6:	69bb      	ldr	r3, [r7, #24]
 8005db8:	015a      	lsls	r2, r3, #5
 8005dba:	69fb      	ldr	r3, [r7, #28]
 8005dbc:	4413      	add	r3, r2
 8005dbe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005dc2:	691b      	ldr	r3, [r3, #16]
 8005dc4:	69ba      	ldr	r2, [r7, #24]
 8005dc6:	0151      	lsls	r1, r2, #5
 8005dc8:	69fa      	ldr	r2, [r7, #28]
 8005dca:	440a      	add	r2, r1
 8005dcc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005dd0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005dd4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005dd8:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8005dda:	68bb      	ldr	r3, [r7, #8]
 8005ddc:	695b      	ldr	r3, [r3, #20]
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d126      	bne.n	8005e30 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8005de2:	69bb      	ldr	r3, [r7, #24]
 8005de4:	015a      	lsls	r2, r3, #5
 8005de6:	69fb      	ldr	r3, [r7, #28]
 8005de8:	4413      	add	r3, r2
 8005dea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005dee:	691a      	ldr	r2, [r3, #16]
 8005df0:	68bb      	ldr	r3, [r7, #8]
 8005df2:	689b      	ldr	r3, [r3, #8]
 8005df4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005df8:	69b9      	ldr	r1, [r7, #24]
 8005dfa:	0148      	lsls	r0, r1, #5
 8005dfc:	69f9      	ldr	r1, [r7, #28]
 8005dfe:	4401      	add	r1, r0
 8005e00:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005e04:	4313      	orrs	r3, r2
 8005e06:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005e08:	69bb      	ldr	r3, [r7, #24]
 8005e0a:	015a      	lsls	r2, r3, #5
 8005e0c:	69fb      	ldr	r3, [r7, #28]
 8005e0e:	4413      	add	r3, r2
 8005e10:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e14:	691b      	ldr	r3, [r3, #16]
 8005e16:	69ba      	ldr	r2, [r7, #24]
 8005e18:	0151      	lsls	r1, r2, #5
 8005e1a:	69fa      	ldr	r2, [r7, #28]
 8005e1c:	440a      	add	r2, r1
 8005e1e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005e22:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005e26:	6113      	str	r3, [r2, #16]
 8005e28:	e036      	b.n	8005e98 <USB_EPStartXfer+0x3dc>
 8005e2a:	bf00      	nop
 8005e2c:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8005e30:	68bb      	ldr	r3, [r7, #8]
 8005e32:	695a      	ldr	r2, [r3, #20]
 8005e34:	68bb      	ldr	r3, [r7, #8]
 8005e36:	689b      	ldr	r3, [r3, #8]
 8005e38:	4413      	add	r3, r2
 8005e3a:	1e5a      	subs	r2, r3, #1
 8005e3c:	68bb      	ldr	r3, [r7, #8]
 8005e3e:	689b      	ldr	r3, [r3, #8]
 8005e40:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e44:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8005e46:	69bb      	ldr	r3, [r7, #24]
 8005e48:	015a      	lsls	r2, r3, #5
 8005e4a:	69fb      	ldr	r3, [r7, #28]
 8005e4c:	4413      	add	r3, r2
 8005e4e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e52:	691a      	ldr	r2, [r3, #16]
 8005e54:	8afb      	ldrh	r3, [r7, #22]
 8005e56:	04d9      	lsls	r1, r3, #19
 8005e58:	4b39      	ldr	r3, [pc, #228]	; (8005f40 <USB_EPStartXfer+0x484>)
 8005e5a:	400b      	ands	r3, r1
 8005e5c:	69b9      	ldr	r1, [r7, #24]
 8005e5e:	0148      	lsls	r0, r1, #5
 8005e60:	69f9      	ldr	r1, [r7, #28]
 8005e62:	4401      	add	r1, r0
 8005e64:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005e68:	4313      	orrs	r3, r2
 8005e6a:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8005e6c:	69bb      	ldr	r3, [r7, #24]
 8005e6e:	015a      	lsls	r2, r3, #5
 8005e70:	69fb      	ldr	r3, [r7, #28]
 8005e72:	4413      	add	r3, r2
 8005e74:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e78:	691a      	ldr	r2, [r3, #16]
 8005e7a:	68bb      	ldr	r3, [r7, #8]
 8005e7c:	689b      	ldr	r3, [r3, #8]
 8005e7e:	8af9      	ldrh	r1, [r7, #22]
 8005e80:	fb01 f303 	mul.w	r3, r1, r3
 8005e84:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005e88:	69b9      	ldr	r1, [r7, #24]
 8005e8a:	0148      	lsls	r0, r1, #5
 8005e8c:	69f9      	ldr	r1, [r7, #28]
 8005e8e:	4401      	add	r1, r0
 8005e90:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005e94:	4313      	orrs	r3, r2
 8005e96:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8005e98:	79fb      	ldrb	r3, [r7, #7]
 8005e9a:	2b01      	cmp	r3, #1
 8005e9c:	d10d      	bne.n	8005eba <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8005e9e:	68bb      	ldr	r3, [r7, #8]
 8005ea0:	68db      	ldr	r3, [r3, #12]
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d009      	beq.n	8005eba <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8005ea6:	68bb      	ldr	r3, [r7, #8]
 8005ea8:	68d9      	ldr	r1, [r3, #12]
 8005eaa:	69bb      	ldr	r3, [r7, #24]
 8005eac:	015a      	lsls	r2, r3, #5
 8005eae:	69fb      	ldr	r3, [r7, #28]
 8005eb0:	4413      	add	r3, r2
 8005eb2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005eb6:	460a      	mov	r2, r1
 8005eb8:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8005eba:	68bb      	ldr	r3, [r7, #8]
 8005ebc:	78db      	ldrb	r3, [r3, #3]
 8005ebe:	2b01      	cmp	r3, #1
 8005ec0:	d128      	bne.n	8005f14 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005ec2:	69fb      	ldr	r3, [r7, #28]
 8005ec4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005ec8:	689b      	ldr	r3, [r3, #8]
 8005eca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d110      	bne.n	8005ef4 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8005ed2:	69bb      	ldr	r3, [r7, #24]
 8005ed4:	015a      	lsls	r2, r3, #5
 8005ed6:	69fb      	ldr	r3, [r7, #28]
 8005ed8:	4413      	add	r3, r2
 8005eda:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	69ba      	ldr	r2, [r7, #24]
 8005ee2:	0151      	lsls	r1, r2, #5
 8005ee4:	69fa      	ldr	r2, [r7, #28]
 8005ee6:	440a      	add	r2, r1
 8005ee8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005eec:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005ef0:	6013      	str	r3, [r2, #0]
 8005ef2:	e00f      	b.n	8005f14 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8005ef4:	69bb      	ldr	r3, [r7, #24]
 8005ef6:	015a      	lsls	r2, r3, #5
 8005ef8:	69fb      	ldr	r3, [r7, #28]
 8005efa:	4413      	add	r3, r2
 8005efc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	69ba      	ldr	r2, [r7, #24]
 8005f04:	0151      	lsls	r1, r2, #5
 8005f06:	69fa      	ldr	r2, [r7, #28]
 8005f08:	440a      	add	r2, r1
 8005f0a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005f0e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005f12:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8005f14:	69bb      	ldr	r3, [r7, #24]
 8005f16:	015a      	lsls	r2, r3, #5
 8005f18:	69fb      	ldr	r3, [r7, #28]
 8005f1a:	4413      	add	r3, r2
 8005f1c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	69ba      	ldr	r2, [r7, #24]
 8005f24:	0151      	lsls	r1, r2, #5
 8005f26:	69fa      	ldr	r2, [r7, #28]
 8005f28:	440a      	add	r2, r1
 8005f2a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005f2e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005f32:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005f34:	2300      	movs	r3, #0
}
 8005f36:	4618      	mov	r0, r3
 8005f38:	3720      	adds	r7, #32
 8005f3a:	46bd      	mov	sp, r7
 8005f3c:	bd80      	pop	{r7, pc}
 8005f3e:	bf00      	nop
 8005f40:	1ff80000 	.word	0x1ff80000

08005f44 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8005f44:	b480      	push	{r7}
 8005f46:	b087      	sub	sp, #28
 8005f48:	af00      	add	r7, sp, #0
 8005f4a:	60f8      	str	r0, [r7, #12]
 8005f4c:	60b9      	str	r1, [r7, #8]
 8005f4e:	4613      	mov	r3, r2
 8005f50:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8005f56:	68bb      	ldr	r3, [r7, #8]
 8005f58:	781b      	ldrb	r3, [r3, #0]
 8005f5a:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005f5c:	68bb      	ldr	r3, [r7, #8]
 8005f5e:	785b      	ldrb	r3, [r3, #1]
 8005f60:	2b01      	cmp	r3, #1
 8005f62:	f040 80cd 	bne.w	8006100 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8005f66:	68bb      	ldr	r3, [r7, #8]
 8005f68:	695b      	ldr	r3, [r3, #20]
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	d132      	bne.n	8005fd4 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005f6e:	693b      	ldr	r3, [r7, #16]
 8005f70:	015a      	lsls	r2, r3, #5
 8005f72:	697b      	ldr	r3, [r7, #20]
 8005f74:	4413      	add	r3, r2
 8005f76:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f7a:	691b      	ldr	r3, [r3, #16]
 8005f7c:	693a      	ldr	r2, [r7, #16]
 8005f7e:	0151      	lsls	r1, r2, #5
 8005f80:	697a      	ldr	r2, [r7, #20]
 8005f82:	440a      	add	r2, r1
 8005f84:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005f88:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005f8c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005f90:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005f92:	693b      	ldr	r3, [r7, #16]
 8005f94:	015a      	lsls	r2, r3, #5
 8005f96:	697b      	ldr	r3, [r7, #20]
 8005f98:	4413      	add	r3, r2
 8005f9a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f9e:	691b      	ldr	r3, [r3, #16]
 8005fa0:	693a      	ldr	r2, [r7, #16]
 8005fa2:	0151      	lsls	r1, r2, #5
 8005fa4:	697a      	ldr	r2, [r7, #20]
 8005fa6:	440a      	add	r2, r1
 8005fa8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005fac:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005fb0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005fb2:	693b      	ldr	r3, [r7, #16]
 8005fb4:	015a      	lsls	r2, r3, #5
 8005fb6:	697b      	ldr	r3, [r7, #20]
 8005fb8:	4413      	add	r3, r2
 8005fba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005fbe:	691b      	ldr	r3, [r3, #16]
 8005fc0:	693a      	ldr	r2, [r7, #16]
 8005fc2:	0151      	lsls	r1, r2, #5
 8005fc4:	697a      	ldr	r2, [r7, #20]
 8005fc6:	440a      	add	r2, r1
 8005fc8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005fcc:	0cdb      	lsrs	r3, r3, #19
 8005fce:	04db      	lsls	r3, r3, #19
 8005fd0:	6113      	str	r3, [r2, #16]
 8005fd2:	e04e      	b.n	8006072 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005fd4:	693b      	ldr	r3, [r7, #16]
 8005fd6:	015a      	lsls	r2, r3, #5
 8005fd8:	697b      	ldr	r3, [r7, #20]
 8005fda:	4413      	add	r3, r2
 8005fdc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005fe0:	691b      	ldr	r3, [r3, #16]
 8005fe2:	693a      	ldr	r2, [r7, #16]
 8005fe4:	0151      	lsls	r1, r2, #5
 8005fe6:	697a      	ldr	r2, [r7, #20]
 8005fe8:	440a      	add	r2, r1
 8005fea:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005fee:	0cdb      	lsrs	r3, r3, #19
 8005ff0:	04db      	lsls	r3, r3, #19
 8005ff2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005ff4:	693b      	ldr	r3, [r7, #16]
 8005ff6:	015a      	lsls	r2, r3, #5
 8005ff8:	697b      	ldr	r3, [r7, #20]
 8005ffa:	4413      	add	r3, r2
 8005ffc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006000:	691b      	ldr	r3, [r3, #16]
 8006002:	693a      	ldr	r2, [r7, #16]
 8006004:	0151      	lsls	r1, r2, #5
 8006006:	697a      	ldr	r2, [r7, #20]
 8006008:	440a      	add	r2, r1
 800600a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800600e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006012:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006016:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8006018:	68bb      	ldr	r3, [r7, #8]
 800601a:	695a      	ldr	r2, [r3, #20]
 800601c:	68bb      	ldr	r3, [r7, #8]
 800601e:	689b      	ldr	r3, [r3, #8]
 8006020:	429a      	cmp	r2, r3
 8006022:	d903      	bls.n	800602c <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8006024:	68bb      	ldr	r3, [r7, #8]
 8006026:	689a      	ldr	r2, [r3, #8]
 8006028:	68bb      	ldr	r3, [r7, #8]
 800602a:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800602c:	693b      	ldr	r3, [r7, #16]
 800602e:	015a      	lsls	r2, r3, #5
 8006030:	697b      	ldr	r3, [r7, #20]
 8006032:	4413      	add	r3, r2
 8006034:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006038:	691b      	ldr	r3, [r3, #16]
 800603a:	693a      	ldr	r2, [r7, #16]
 800603c:	0151      	lsls	r1, r2, #5
 800603e:	697a      	ldr	r2, [r7, #20]
 8006040:	440a      	add	r2, r1
 8006042:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006046:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800604a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800604c:	693b      	ldr	r3, [r7, #16]
 800604e:	015a      	lsls	r2, r3, #5
 8006050:	697b      	ldr	r3, [r7, #20]
 8006052:	4413      	add	r3, r2
 8006054:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006058:	691a      	ldr	r2, [r3, #16]
 800605a:	68bb      	ldr	r3, [r7, #8]
 800605c:	695b      	ldr	r3, [r3, #20]
 800605e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006062:	6939      	ldr	r1, [r7, #16]
 8006064:	0148      	lsls	r0, r1, #5
 8006066:	6979      	ldr	r1, [r7, #20]
 8006068:	4401      	add	r1, r0
 800606a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800606e:	4313      	orrs	r3, r2
 8006070:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8006072:	79fb      	ldrb	r3, [r7, #7]
 8006074:	2b01      	cmp	r3, #1
 8006076:	d11e      	bne.n	80060b6 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8006078:	68bb      	ldr	r3, [r7, #8]
 800607a:	691b      	ldr	r3, [r3, #16]
 800607c:	2b00      	cmp	r3, #0
 800607e:	d009      	beq.n	8006094 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8006080:	693b      	ldr	r3, [r7, #16]
 8006082:	015a      	lsls	r2, r3, #5
 8006084:	697b      	ldr	r3, [r7, #20]
 8006086:	4413      	add	r3, r2
 8006088:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800608c:	461a      	mov	r2, r3
 800608e:	68bb      	ldr	r3, [r7, #8]
 8006090:	691b      	ldr	r3, [r3, #16]
 8006092:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006094:	693b      	ldr	r3, [r7, #16]
 8006096:	015a      	lsls	r2, r3, #5
 8006098:	697b      	ldr	r3, [r7, #20]
 800609a:	4413      	add	r3, r2
 800609c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	693a      	ldr	r2, [r7, #16]
 80060a4:	0151      	lsls	r1, r2, #5
 80060a6:	697a      	ldr	r2, [r7, #20]
 80060a8:	440a      	add	r2, r1
 80060aa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80060ae:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80060b2:	6013      	str	r3, [r2, #0]
 80060b4:	e092      	b.n	80061dc <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80060b6:	693b      	ldr	r3, [r7, #16]
 80060b8:	015a      	lsls	r2, r3, #5
 80060ba:	697b      	ldr	r3, [r7, #20]
 80060bc:	4413      	add	r3, r2
 80060be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	693a      	ldr	r2, [r7, #16]
 80060c6:	0151      	lsls	r1, r2, #5
 80060c8:	697a      	ldr	r2, [r7, #20]
 80060ca:	440a      	add	r2, r1
 80060cc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80060d0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80060d4:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 80060d6:	68bb      	ldr	r3, [r7, #8]
 80060d8:	695b      	ldr	r3, [r3, #20]
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d07e      	beq.n	80061dc <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80060de:	697b      	ldr	r3, [r7, #20]
 80060e0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80060e4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80060e6:	68bb      	ldr	r3, [r7, #8]
 80060e8:	781b      	ldrb	r3, [r3, #0]
 80060ea:	f003 030f 	and.w	r3, r3, #15
 80060ee:	2101      	movs	r1, #1
 80060f0:	fa01 f303 	lsl.w	r3, r1, r3
 80060f4:	6979      	ldr	r1, [r7, #20]
 80060f6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80060fa:	4313      	orrs	r3, r2
 80060fc:	634b      	str	r3, [r1, #52]	; 0x34
 80060fe:	e06d      	b.n	80061dc <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8006100:	693b      	ldr	r3, [r7, #16]
 8006102:	015a      	lsls	r2, r3, #5
 8006104:	697b      	ldr	r3, [r7, #20]
 8006106:	4413      	add	r3, r2
 8006108:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800610c:	691b      	ldr	r3, [r3, #16]
 800610e:	693a      	ldr	r2, [r7, #16]
 8006110:	0151      	lsls	r1, r2, #5
 8006112:	697a      	ldr	r2, [r7, #20]
 8006114:	440a      	add	r2, r1
 8006116:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800611a:	0cdb      	lsrs	r3, r3, #19
 800611c:	04db      	lsls	r3, r3, #19
 800611e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8006120:	693b      	ldr	r3, [r7, #16]
 8006122:	015a      	lsls	r2, r3, #5
 8006124:	697b      	ldr	r3, [r7, #20]
 8006126:	4413      	add	r3, r2
 8006128:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800612c:	691b      	ldr	r3, [r3, #16]
 800612e:	693a      	ldr	r2, [r7, #16]
 8006130:	0151      	lsls	r1, r2, #5
 8006132:	697a      	ldr	r2, [r7, #20]
 8006134:	440a      	add	r2, r1
 8006136:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800613a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800613e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006142:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8006144:	68bb      	ldr	r3, [r7, #8]
 8006146:	695b      	ldr	r3, [r3, #20]
 8006148:	2b00      	cmp	r3, #0
 800614a:	d003      	beq.n	8006154 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 800614c:	68bb      	ldr	r3, [r7, #8]
 800614e:	689a      	ldr	r2, [r3, #8]
 8006150:	68bb      	ldr	r3, [r7, #8]
 8006152:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006154:	693b      	ldr	r3, [r7, #16]
 8006156:	015a      	lsls	r2, r3, #5
 8006158:	697b      	ldr	r3, [r7, #20]
 800615a:	4413      	add	r3, r2
 800615c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006160:	691b      	ldr	r3, [r3, #16]
 8006162:	693a      	ldr	r2, [r7, #16]
 8006164:	0151      	lsls	r1, r2, #5
 8006166:	697a      	ldr	r2, [r7, #20]
 8006168:	440a      	add	r2, r1
 800616a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800616e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006172:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8006174:	693b      	ldr	r3, [r7, #16]
 8006176:	015a      	lsls	r2, r3, #5
 8006178:	697b      	ldr	r3, [r7, #20]
 800617a:	4413      	add	r3, r2
 800617c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006180:	691a      	ldr	r2, [r3, #16]
 8006182:	68bb      	ldr	r3, [r7, #8]
 8006184:	689b      	ldr	r3, [r3, #8]
 8006186:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800618a:	6939      	ldr	r1, [r7, #16]
 800618c:	0148      	lsls	r0, r1, #5
 800618e:	6979      	ldr	r1, [r7, #20]
 8006190:	4401      	add	r1, r0
 8006192:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006196:	4313      	orrs	r3, r2
 8006198:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 800619a:	79fb      	ldrb	r3, [r7, #7]
 800619c:	2b01      	cmp	r3, #1
 800619e:	d10d      	bne.n	80061bc <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80061a0:	68bb      	ldr	r3, [r7, #8]
 80061a2:	68db      	ldr	r3, [r3, #12]
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	d009      	beq.n	80061bc <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80061a8:	68bb      	ldr	r3, [r7, #8]
 80061aa:	68d9      	ldr	r1, [r3, #12]
 80061ac:	693b      	ldr	r3, [r7, #16]
 80061ae:	015a      	lsls	r2, r3, #5
 80061b0:	697b      	ldr	r3, [r7, #20]
 80061b2:	4413      	add	r3, r2
 80061b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80061b8:	460a      	mov	r2, r1
 80061ba:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80061bc:	693b      	ldr	r3, [r7, #16]
 80061be:	015a      	lsls	r2, r3, #5
 80061c0:	697b      	ldr	r3, [r7, #20]
 80061c2:	4413      	add	r3, r2
 80061c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	693a      	ldr	r2, [r7, #16]
 80061cc:	0151      	lsls	r1, r2, #5
 80061ce:	697a      	ldr	r2, [r7, #20]
 80061d0:	440a      	add	r2, r1
 80061d2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80061d6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80061da:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80061dc:	2300      	movs	r3, #0
}
 80061de:	4618      	mov	r0, r3
 80061e0:	371c      	adds	r7, #28
 80061e2:	46bd      	mov	sp, r7
 80061e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061e8:	4770      	bx	lr

080061ea <USB_WritePacket>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src, uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80061ea:	b480      	push	{r7}
 80061ec:	b089      	sub	sp, #36	; 0x24
 80061ee:	af00      	add	r7, sp, #0
 80061f0:	60f8      	str	r0, [r7, #12]
 80061f2:	60b9      	str	r1, [r7, #8]
 80061f4:	4611      	mov	r1, r2
 80061f6:	461a      	mov	r2, r3
 80061f8:	460b      	mov	r3, r1
 80061fa:	71fb      	strb	r3, [r7, #7]
 80061fc:	4613      	mov	r3, r2
 80061fe:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 8006204:	68bb      	ldr	r3, [r7, #8]
 8006206:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 8006208:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800620c:	2b00      	cmp	r3, #0
 800620e:	d11a      	bne.n	8006246 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8006210:	88bb      	ldrh	r3, [r7, #4]
 8006212:	3303      	adds	r3, #3
 8006214:	089b      	lsrs	r3, r3, #2
 8006216:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8006218:	2300      	movs	r3, #0
 800621a:	61bb      	str	r3, [r7, #24]
 800621c:	e00f      	b.n	800623e <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800621e:	79fb      	ldrb	r3, [r7, #7]
 8006220:	031a      	lsls	r2, r3, #12
 8006222:	697b      	ldr	r3, [r7, #20]
 8006224:	4413      	add	r3, r2
 8006226:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800622a:	461a      	mov	r2, r3
 800622c:	69fb      	ldr	r3, [r7, #28]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	6013      	str	r3, [r2, #0]
      pSrc++;
 8006232:	69fb      	ldr	r3, [r7, #28]
 8006234:	3304      	adds	r3, #4
 8006236:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8006238:	69bb      	ldr	r3, [r7, #24]
 800623a:	3301      	adds	r3, #1
 800623c:	61bb      	str	r3, [r7, #24]
 800623e:	69ba      	ldr	r2, [r7, #24]
 8006240:	693b      	ldr	r3, [r7, #16]
 8006242:	429a      	cmp	r2, r3
 8006244:	d3eb      	bcc.n	800621e <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8006246:	2300      	movs	r3, #0
}
 8006248:	4618      	mov	r0, r3
 800624a:	3724      	adds	r7, #36	; 0x24
 800624c:	46bd      	mov	sp, r7
 800624e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006252:	4770      	bx	lr

08006254 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8006254:	b480      	push	{r7}
 8006256:	b089      	sub	sp, #36	; 0x24
 8006258:	af00      	add	r7, sp, #0
 800625a:	60f8      	str	r0, [r7, #12]
 800625c:	60b9      	str	r1, [r7, #8]
 800625e:	4613      	mov	r3, r2
 8006260:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 8006266:	68bb      	ldr	r3, [r7, #8]
 8006268:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 800626a:	88fb      	ldrh	r3, [r7, #6]
 800626c:	3303      	adds	r3, #3
 800626e:	089b      	lsrs	r3, r3, #2
 8006270:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 8006272:	2300      	movs	r3, #0
 8006274:	61bb      	str	r3, [r7, #24]
 8006276:	e00b      	b.n	8006290 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8006278:	697b      	ldr	r3, [r7, #20]
 800627a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800627e:	681a      	ldr	r2, [r3, #0]
 8006280:	69fb      	ldr	r3, [r7, #28]
 8006282:	601a      	str	r2, [r3, #0]
    pDest++;
 8006284:	69fb      	ldr	r3, [r7, #28]
 8006286:	3304      	adds	r3, #4
 8006288:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 800628a:	69bb      	ldr	r3, [r7, #24]
 800628c:	3301      	adds	r3, #1
 800628e:	61bb      	str	r3, [r7, #24]
 8006290:	69ba      	ldr	r2, [r7, #24]
 8006292:	693b      	ldr	r3, [r7, #16]
 8006294:	429a      	cmp	r2, r3
 8006296:	d3ef      	bcc.n	8006278 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 8006298:	69fb      	ldr	r3, [r7, #28]
}
 800629a:	4618      	mov	r0, r3
 800629c:	3724      	adds	r7, #36	; 0x24
 800629e:	46bd      	mov	sp, r7
 80062a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062a4:	4770      	bx	lr

080062a6 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80062a6:	b480      	push	{r7}
 80062a8:	b085      	sub	sp, #20
 80062aa:	af00      	add	r7, sp, #0
 80062ac:	6078      	str	r0, [r7, #4]
 80062ae:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80062b4:	683b      	ldr	r3, [r7, #0]
 80062b6:	781b      	ldrb	r3, [r3, #0]
 80062b8:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80062ba:	683b      	ldr	r3, [r7, #0]
 80062bc:	785b      	ldrb	r3, [r3, #1]
 80062be:	2b01      	cmp	r3, #1
 80062c0:	d12c      	bne.n	800631c <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80062c2:	68bb      	ldr	r3, [r7, #8]
 80062c4:	015a      	lsls	r2, r3, #5
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	4413      	add	r3, r2
 80062ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	db12      	blt.n	80062fa <USB_EPSetStall+0x54>
 80062d4:	68bb      	ldr	r3, [r7, #8]
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d00f      	beq.n	80062fa <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80062da:	68bb      	ldr	r3, [r7, #8]
 80062dc:	015a      	lsls	r2, r3, #5
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	4413      	add	r3, r2
 80062e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	68ba      	ldr	r2, [r7, #8]
 80062ea:	0151      	lsls	r1, r2, #5
 80062ec:	68fa      	ldr	r2, [r7, #12]
 80062ee:	440a      	add	r2, r1
 80062f0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80062f4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80062f8:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80062fa:	68bb      	ldr	r3, [r7, #8]
 80062fc:	015a      	lsls	r2, r3, #5
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	4413      	add	r3, r2
 8006302:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	68ba      	ldr	r2, [r7, #8]
 800630a:	0151      	lsls	r1, r2, #5
 800630c:	68fa      	ldr	r2, [r7, #12]
 800630e:	440a      	add	r2, r1
 8006310:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006314:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006318:	6013      	str	r3, [r2, #0]
 800631a:	e02b      	b.n	8006374 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800631c:	68bb      	ldr	r3, [r7, #8]
 800631e:	015a      	lsls	r2, r3, #5
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	4413      	add	r3, r2
 8006324:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	2b00      	cmp	r3, #0
 800632c:	db12      	blt.n	8006354 <USB_EPSetStall+0xae>
 800632e:	68bb      	ldr	r3, [r7, #8]
 8006330:	2b00      	cmp	r3, #0
 8006332:	d00f      	beq.n	8006354 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8006334:	68bb      	ldr	r3, [r7, #8]
 8006336:	015a      	lsls	r2, r3, #5
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	4413      	add	r3, r2
 800633c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	68ba      	ldr	r2, [r7, #8]
 8006344:	0151      	lsls	r1, r2, #5
 8006346:	68fa      	ldr	r2, [r7, #12]
 8006348:	440a      	add	r2, r1
 800634a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800634e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006352:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8006354:	68bb      	ldr	r3, [r7, #8]
 8006356:	015a      	lsls	r2, r3, #5
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	4413      	add	r3, r2
 800635c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	68ba      	ldr	r2, [r7, #8]
 8006364:	0151      	lsls	r1, r2, #5
 8006366:	68fa      	ldr	r2, [r7, #12]
 8006368:	440a      	add	r2, r1
 800636a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800636e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006372:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006374:	2300      	movs	r3, #0
}
 8006376:	4618      	mov	r0, r3
 8006378:	3714      	adds	r7, #20
 800637a:	46bd      	mov	sp, r7
 800637c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006380:	4770      	bx	lr

08006382 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006382:	b480      	push	{r7}
 8006384:	b085      	sub	sp, #20
 8006386:	af00      	add	r7, sp, #0
 8006388:	6078      	str	r0, [r7, #4]
 800638a:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006390:	683b      	ldr	r3, [r7, #0]
 8006392:	781b      	ldrb	r3, [r3, #0]
 8006394:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006396:	683b      	ldr	r3, [r7, #0]
 8006398:	785b      	ldrb	r3, [r3, #1]
 800639a:	2b01      	cmp	r3, #1
 800639c:	d128      	bne.n	80063f0 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800639e:	68bb      	ldr	r3, [r7, #8]
 80063a0:	015a      	lsls	r2, r3, #5
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	4413      	add	r3, r2
 80063a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	68ba      	ldr	r2, [r7, #8]
 80063ae:	0151      	lsls	r1, r2, #5
 80063b0:	68fa      	ldr	r2, [r7, #12]
 80063b2:	440a      	add	r2, r1
 80063b4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80063b8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80063bc:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80063be:	683b      	ldr	r3, [r7, #0]
 80063c0:	78db      	ldrb	r3, [r3, #3]
 80063c2:	2b03      	cmp	r3, #3
 80063c4:	d003      	beq.n	80063ce <USB_EPClearStall+0x4c>
 80063c6:	683b      	ldr	r3, [r7, #0]
 80063c8:	78db      	ldrb	r3, [r3, #3]
 80063ca:	2b02      	cmp	r3, #2
 80063cc:	d138      	bne.n	8006440 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80063ce:	68bb      	ldr	r3, [r7, #8]
 80063d0:	015a      	lsls	r2, r3, #5
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	4413      	add	r3, r2
 80063d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	68ba      	ldr	r2, [r7, #8]
 80063de:	0151      	lsls	r1, r2, #5
 80063e0:	68fa      	ldr	r2, [r7, #12]
 80063e2:	440a      	add	r2, r1
 80063e4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80063e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80063ec:	6013      	str	r3, [r2, #0]
 80063ee:	e027      	b.n	8006440 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80063f0:	68bb      	ldr	r3, [r7, #8]
 80063f2:	015a      	lsls	r2, r3, #5
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	4413      	add	r3, r2
 80063f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	68ba      	ldr	r2, [r7, #8]
 8006400:	0151      	lsls	r1, r2, #5
 8006402:	68fa      	ldr	r2, [r7, #12]
 8006404:	440a      	add	r2, r1
 8006406:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800640a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800640e:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8006410:	683b      	ldr	r3, [r7, #0]
 8006412:	78db      	ldrb	r3, [r3, #3]
 8006414:	2b03      	cmp	r3, #3
 8006416:	d003      	beq.n	8006420 <USB_EPClearStall+0x9e>
 8006418:	683b      	ldr	r3, [r7, #0]
 800641a:	78db      	ldrb	r3, [r3, #3]
 800641c:	2b02      	cmp	r3, #2
 800641e:	d10f      	bne.n	8006440 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8006420:	68bb      	ldr	r3, [r7, #8]
 8006422:	015a      	lsls	r2, r3, #5
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	4413      	add	r3, r2
 8006428:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	68ba      	ldr	r2, [r7, #8]
 8006430:	0151      	lsls	r1, r2, #5
 8006432:	68fa      	ldr	r2, [r7, #12]
 8006434:	440a      	add	r2, r1
 8006436:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800643a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800643e:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8006440:	2300      	movs	r3, #0
}
 8006442:	4618      	mov	r0, r3
 8006444:	3714      	adds	r7, #20
 8006446:	46bd      	mov	sp, r7
 8006448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800644c:	4770      	bx	lr

0800644e <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800644e:	b480      	push	{r7}
 8006450:	b085      	sub	sp, #20
 8006452:	af00      	add	r7, sp, #0
 8006454:	6078      	str	r0, [r7, #4]
 8006456:	460b      	mov	r3, r1
 8006458:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	68fa      	ldr	r2, [r7, #12]
 8006468:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800646c:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8006470:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006478:	681a      	ldr	r2, [r3, #0]
 800647a:	78fb      	ldrb	r3, [r7, #3]
 800647c:	011b      	lsls	r3, r3, #4
 800647e:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8006482:	68f9      	ldr	r1, [r7, #12]
 8006484:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006488:	4313      	orrs	r3, r2
 800648a:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800648c:	2300      	movs	r3, #0
}
 800648e:	4618      	mov	r0, r3
 8006490:	3714      	adds	r7, #20
 8006492:	46bd      	mov	sp, r7
 8006494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006498:	4770      	bx	lr

0800649a <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800649a:	b580      	push	{r7, lr}
 800649c:	b084      	sub	sp, #16
 800649e:	af00      	add	r7, sp, #0
 80064a0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80064ac:	685b      	ldr	r3, [r3, #4]
 80064ae:	68fa      	ldr	r2, [r7, #12]
 80064b0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80064b4:	f023 0302 	bic.w	r3, r3, #2
 80064b8:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 80064ba:	2003      	movs	r0, #3
 80064bc:	f7fa fe40 	bl	8001140 <HAL_Delay>

  return HAL_OK;
 80064c0:	2300      	movs	r3, #0
}
 80064c2:	4618      	mov	r0, r3
 80064c4:	3710      	adds	r7, #16
 80064c6:	46bd      	mov	sp, r7
 80064c8:	bd80      	pop	{r7, pc}

080064ca <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80064ca:	b580      	push	{r7, lr}
 80064cc:	b084      	sub	sp, #16
 80064ce:	af00      	add	r7, sp, #0
 80064d0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80064dc:	685b      	ldr	r3, [r3, #4]
 80064de:	68fa      	ldr	r2, [r7, #12]
 80064e0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80064e4:	f043 0302 	orr.w	r3, r3, #2
 80064e8:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 80064ea:	2003      	movs	r0, #3
 80064ec:	f7fa fe28 	bl	8001140 <HAL_Delay>

  return HAL_OK;
 80064f0:	2300      	movs	r3, #0
}
 80064f2:	4618      	mov	r0, r3
 80064f4:	3710      	adds	r7, #16
 80064f6:	46bd      	mov	sp, r7
 80064f8:	bd80      	pop	{r7, pc}

080064fa <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80064fa:	b480      	push	{r7}
 80064fc:	b085      	sub	sp, #20
 80064fe:	af00      	add	r7, sp, #0
 8006500:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	695b      	ldr	r3, [r3, #20]
 8006506:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	699b      	ldr	r3, [r3, #24]
 800650c:	68fa      	ldr	r2, [r7, #12]
 800650e:	4013      	ands	r3, r2
 8006510:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8006512:	68fb      	ldr	r3, [r7, #12]
}
 8006514:	4618      	mov	r0, r3
 8006516:	3714      	adds	r7, #20
 8006518:	46bd      	mov	sp, r7
 800651a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800651e:	4770      	bx	lr

08006520 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8006520:	b480      	push	{r7}
 8006522:	b085      	sub	sp, #20
 8006524:	af00      	add	r7, sp, #0
 8006526:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006532:	699b      	ldr	r3, [r3, #24]
 8006534:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800653c:	69db      	ldr	r3, [r3, #28]
 800653e:	68ba      	ldr	r2, [r7, #8]
 8006540:	4013      	ands	r3, r2
 8006542:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8006544:	68bb      	ldr	r3, [r7, #8]
 8006546:	0c1b      	lsrs	r3, r3, #16
}
 8006548:	4618      	mov	r0, r3
 800654a:	3714      	adds	r7, #20
 800654c:	46bd      	mov	sp, r7
 800654e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006552:	4770      	bx	lr

08006554 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8006554:	b480      	push	{r7}
 8006556:	b085      	sub	sp, #20
 8006558:	af00      	add	r7, sp, #0
 800655a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006566:	699b      	ldr	r3, [r3, #24]
 8006568:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006570:	69db      	ldr	r3, [r3, #28]
 8006572:	68ba      	ldr	r2, [r7, #8]
 8006574:	4013      	ands	r3, r2
 8006576:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8006578:	68bb      	ldr	r3, [r7, #8]
 800657a:	b29b      	uxth	r3, r3
}
 800657c:	4618      	mov	r0, r3
 800657e:	3714      	adds	r7, #20
 8006580:	46bd      	mov	sp, r7
 8006582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006586:	4770      	bx	lr

08006588 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8006588:	b480      	push	{r7}
 800658a:	b085      	sub	sp, #20
 800658c:	af00      	add	r7, sp, #0
 800658e:	6078      	str	r0, [r7, #4]
 8006590:	460b      	mov	r3, r1
 8006592:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8006598:	78fb      	ldrb	r3, [r7, #3]
 800659a:	015a      	lsls	r2, r3, #5
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	4413      	add	r3, r2
 80065a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80065a4:	689b      	ldr	r3, [r3, #8]
 80065a6:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80065ae:	695b      	ldr	r3, [r3, #20]
 80065b0:	68ba      	ldr	r2, [r7, #8]
 80065b2:	4013      	ands	r3, r2
 80065b4:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80065b6:	68bb      	ldr	r3, [r7, #8]
}
 80065b8:	4618      	mov	r0, r3
 80065ba:	3714      	adds	r7, #20
 80065bc:	46bd      	mov	sp, r7
 80065be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065c2:	4770      	bx	lr

080065c4 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80065c4:	b480      	push	{r7}
 80065c6:	b087      	sub	sp, #28
 80065c8:	af00      	add	r7, sp, #0
 80065ca:	6078      	str	r0, [r7, #4]
 80065cc:	460b      	mov	r3, r1
 80065ce:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 80065d4:	697b      	ldr	r3, [r7, #20]
 80065d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80065da:	691b      	ldr	r3, [r3, #16]
 80065dc:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 80065de:	697b      	ldr	r3, [r7, #20]
 80065e0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80065e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80065e6:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80065e8:	78fb      	ldrb	r3, [r7, #3]
 80065ea:	f003 030f 	and.w	r3, r3, #15
 80065ee:	68fa      	ldr	r2, [r7, #12]
 80065f0:	fa22 f303 	lsr.w	r3, r2, r3
 80065f4:	01db      	lsls	r3, r3, #7
 80065f6:	b2db      	uxtb	r3, r3
 80065f8:	693a      	ldr	r2, [r7, #16]
 80065fa:	4313      	orrs	r3, r2
 80065fc:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80065fe:	78fb      	ldrb	r3, [r7, #3]
 8006600:	015a      	lsls	r2, r3, #5
 8006602:	697b      	ldr	r3, [r7, #20]
 8006604:	4413      	add	r3, r2
 8006606:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800660a:	689b      	ldr	r3, [r3, #8]
 800660c:	693a      	ldr	r2, [r7, #16]
 800660e:	4013      	ands	r3, r2
 8006610:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006612:	68bb      	ldr	r3, [r7, #8]
}
 8006614:	4618      	mov	r0, r3
 8006616:	371c      	adds	r7, #28
 8006618:	46bd      	mov	sp, r7
 800661a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800661e:	4770      	bx	lr

08006620 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8006620:	b480      	push	{r7}
 8006622:	b083      	sub	sp, #12
 8006624:	af00      	add	r7, sp, #0
 8006626:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	695b      	ldr	r3, [r3, #20]
 800662c:	f003 0301 	and.w	r3, r3, #1
}
 8006630:	4618      	mov	r0, r3
 8006632:	370c      	adds	r7, #12
 8006634:	46bd      	mov	sp, r7
 8006636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800663a:	4770      	bx	lr

0800663c <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800663c:	b480      	push	{r7}
 800663e:	b085      	sub	sp, #20
 8006640:	af00      	add	r7, sp, #0
 8006642:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP based on the enumeration speed */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	68fa      	ldr	r2, [r7, #12]
 8006652:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006656:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800665a:	f023 0307 	bic.w	r3, r3, #7
 800665e:	6013      	str	r3, [r2, #0]

  if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD) == DSTS_ENUMSPD_LS_PHY_6MHZ)
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006666:	689b      	ldr	r3, [r3, #8]
 8006668:	f003 0306 	and.w	r3, r3, #6
 800666c:	2b04      	cmp	r3, #4
 800666e:	d109      	bne.n	8006684 <USB_ActivateSetup+0x48>
  {
    USBx_INEP(0U)->DIEPCTL |= 3U;
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	68fa      	ldr	r2, [r7, #12]
 800667a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800667e:	f043 0303 	orr.w	r3, r3, #3
 8006682:	6013      	str	r3, [r2, #0]
  }
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800668a:	685b      	ldr	r3, [r3, #4]
 800668c:	68fa      	ldr	r2, [r7, #12]
 800668e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006692:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006696:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006698:	2300      	movs	r3, #0
}
 800669a:	4618      	mov	r0, r3
 800669c:	3714      	adds	r7, #20
 800669e:	46bd      	mov	sp, r7
 80066a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066a4:	4770      	bx	lr
	...

080066a8 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 80066a8:	b480      	push	{r7}
 80066aa:	b087      	sub	sp, #28
 80066ac:	af00      	add	r7, sp, #0
 80066ae:	60f8      	str	r0, [r7, #12]
 80066b0:	460b      	mov	r3, r1
 80066b2:	607a      	str	r2, [r7, #4]
 80066b4:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	333c      	adds	r3, #60	; 0x3c
 80066be:	3304      	adds	r3, #4
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80066c4:	693b      	ldr	r3, [r7, #16]
 80066c6:	4a26      	ldr	r2, [pc, #152]	; (8006760 <USB_EP0_OutStart+0xb8>)
 80066c8:	4293      	cmp	r3, r2
 80066ca:	d90a      	bls.n	80066e2 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80066cc:	697b      	ldr	r3, [r7, #20]
 80066ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80066d8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80066dc:	d101      	bne.n	80066e2 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 80066de:	2300      	movs	r3, #0
 80066e0:	e037      	b.n	8006752 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80066e2:	697b      	ldr	r3, [r7, #20]
 80066e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80066e8:	461a      	mov	r2, r3
 80066ea:	2300      	movs	r3, #0
 80066ec:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80066ee:	697b      	ldr	r3, [r7, #20]
 80066f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80066f4:	691b      	ldr	r3, [r3, #16]
 80066f6:	697a      	ldr	r2, [r7, #20]
 80066f8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80066fc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006700:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8006702:	697b      	ldr	r3, [r7, #20]
 8006704:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006708:	691b      	ldr	r3, [r3, #16]
 800670a:	697a      	ldr	r2, [r7, #20]
 800670c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006710:	f043 0318 	orr.w	r3, r3, #24
 8006714:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8006716:	697b      	ldr	r3, [r7, #20]
 8006718:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800671c:	691b      	ldr	r3, [r3, #16]
 800671e:	697a      	ldr	r2, [r7, #20]
 8006720:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006724:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8006728:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800672a:	7afb      	ldrb	r3, [r7, #11]
 800672c:	2b01      	cmp	r3, #1
 800672e:	d10f      	bne.n	8006750 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8006730:	697b      	ldr	r3, [r7, #20]
 8006732:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006736:	461a      	mov	r2, r3
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800673c:	697b      	ldr	r3, [r7, #20]
 800673e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	697a      	ldr	r2, [r7, #20]
 8006746:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800674a:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800674e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006750:	2300      	movs	r3, #0
}
 8006752:	4618      	mov	r0, r3
 8006754:	371c      	adds	r7, #28
 8006756:	46bd      	mov	sp, r7
 8006758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800675c:	4770      	bx	lr
 800675e:	bf00      	nop
 8006760:	4f54300a 	.word	0x4f54300a

08006764 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006764:	b480      	push	{r7}
 8006766:	b085      	sub	sp, #20
 8006768:	af00      	add	r7, sp, #0
 800676a:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 800676c:	2300      	movs	r3, #0
 800676e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	3301      	adds	r3, #1
 8006774:	60fb      	str	r3, [r7, #12]
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	4a13      	ldr	r2, [pc, #76]	; (80067c8 <USB_CoreReset+0x64>)
 800677a:	4293      	cmp	r3, r2
 800677c:	d901      	bls.n	8006782 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800677e:	2303      	movs	r3, #3
 8006780:	e01b      	b.n	80067ba <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	691b      	ldr	r3, [r3, #16]
 8006786:	2b00      	cmp	r3, #0
 8006788:	daf2      	bge.n	8006770 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800678a:	2300      	movs	r3, #0
 800678c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	691b      	ldr	r3, [r3, #16]
 8006792:	f043 0201 	orr.w	r2, r3, #1
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	3301      	adds	r3, #1
 800679e:	60fb      	str	r3, [r7, #12]
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	4a09      	ldr	r2, [pc, #36]	; (80067c8 <USB_CoreReset+0x64>)
 80067a4:	4293      	cmp	r3, r2
 80067a6:	d901      	bls.n	80067ac <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80067a8:	2303      	movs	r3, #3
 80067aa:	e006      	b.n	80067ba <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	691b      	ldr	r3, [r3, #16]
 80067b0:	f003 0301 	and.w	r3, r3, #1
 80067b4:	2b01      	cmp	r3, #1
 80067b6:	d0f0      	beq.n	800679a <USB_CoreReset+0x36>

  return HAL_OK;
 80067b8:	2300      	movs	r3, #0
}
 80067ba:	4618      	mov	r0, r3
 80067bc:	3714      	adds	r7, #20
 80067be:	46bd      	mov	sp, r7
 80067c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067c4:	4770      	bx	lr
 80067c6:	bf00      	nop
 80067c8:	00030d40 	.word	0x00030d40

080067cc <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 80067cc:	b580      	push	{r7, lr}
 80067ce:	b084      	sub	sp, #16
 80067d0:	af04      	add	r7, sp, #16
  /* Initilialize the LwIP stack with RTOS */
  tcpip_init( NULL, NULL );
 80067d2:	2100      	movs	r1, #0
 80067d4:	2000      	movs	r0, #0
 80067d6:	f005 fddf 	bl	800c398 <tcpip_init>

  /* IP addresses initialization with DHCP (IPv4) */
  ipaddr.addr = 0;
 80067da:	4b17      	ldr	r3, [pc, #92]	; (8006838 <MX_LWIP_Init+0x6c>)
 80067dc:	2200      	movs	r2, #0
 80067de:	601a      	str	r2, [r3, #0]
  netmask.addr = 0;
 80067e0:	4b16      	ldr	r3, [pc, #88]	; (800683c <MX_LWIP_Init+0x70>)
 80067e2:	2200      	movs	r2, #0
 80067e4:	601a      	str	r2, [r3, #0]
  gw.addr = 0;
 80067e6:	4b16      	ldr	r3, [pc, #88]	; (8006840 <MX_LWIP_Init+0x74>)
 80067e8:	2200      	movs	r2, #0
 80067ea:	601a      	str	r2, [r3, #0]

  /* add the network interface (IPv4/IPv6) with RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 80067ec:	4b15      	ldr	r3, [pc, #84]	; (8006844 <MX_LWIP_Init+0x78>)
 80067ee:	9302      	str	r3, [sp, #8]
 80067f0:	4b15      	ldr	r3, [pc, #84]	; (8006848 <MX_LWIP_Init+0x7c>)
 80067f2:	9301      	str	r3, [sp, #4]
 80067f4:	2300      	movs	r3, #0
 80067f6:	9300      	str	r3, [sp, #0]
 80067f8:	4b11      	ldr	r3, [pc, #68]	; (8006840 <MX_LWIP_Init+0x74>)
 80067fa:	4a10      	ldr	r2, [pc, #64]	; (800683c <MX_LWIP_Init+0x70>)
 80067fc:	490e      	ldr	r1, [pc, #56]	; (8006838 <MX_LWIP_Init+0x6c>)
 80067fe:	4813      	ldr	r0, [pc, #76]	; (800684c <MX_LWIP_Init+0x80>)
 8006800:	f006 fa86 	bl	800cd10 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 8006804:	4811      	ldr	r0, [pc, #68]	; (800684c <MX_LWIP_Init+0x80>)
 8006806:	f006 fb6b 	bl	800cee0 <netif_set_default>

  if (netif_is_link_up(&gnetif))
 800680a:	4b10      	ldr	r3, [pc, #64]	; (800684c <MX_LWIP_Init+0x80>)
 800680c:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8006810:	089b      	lsrs	r3, r3, #2
 8006812:	f003 0301 	and.w	r3, r3, #1
 8006816:	b2db      	uxtb	r3, r3
 8006818:	2b00      	cmp	r3, #0
 800681a:	d003      	beq.n	8006824 <MX_LWIP_Init+0x58>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 800681c:	480b      	ldr	r0, [pc, #44]	; (800684c <MX_LWIP_Init+0x80>)
 800681e:	f006 fb6f 	bl	800cf00 <netif_set_up>
 8006822:	e002      	b.n	800682a <MX_LWIP_Init+0x5e>
  }
  else
  {
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
 8006824:	4809      	ldr	r0, [pc, #36]	; (800684c <MX_LWIP_Init+0x80>)
 8006826:	f006 fbaf 	bl	800cf88 <netif_set_down>
  }

  /* Start DHCP negotiation for a network interface (IPv4) */
  dhcp_start(&gnetif);
 800682a:	4808      	ldr	r0, [pc, #32]	; (800684c <MX_LWIP_Init+0x80>)
 800682c:	f00c fdd2 	bl	80133d4 <dhcp_start>

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 8006830:	bf00      	nop
 8006832:	46bd      	mov	sp, r7
 8006834:	bd80      	pop	{r7, pc}
 8006836:	bf00      	nop
 8006838:	20004d48 	.word	0x20004d48
 800683c:	20004d4c 	.word	0x20004d4c
 8006840:	20004d50 	.word	0x20004d50
 8006844:	0800c2c1 	.word	0x0800c2c1
 8006848:	08006e95 	.word	0x08006e95
 800684c:	20004d14 	.word	0x20004d14

08006850 <HAL_ETH_MspInit>:
/* USER CODE END 3 */

/* Private functions ---------------------------------------------------------*/

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8006850:	b580      	push	{r7, lr}
 8006852:	b08e      	sub	sp, #56	; 0x38
 8006854:	af00      	add	r7, sp, #0
 8006856:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006858:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800685c:	2200      	movs	r2, #0
 800685e:	601a      	str	r2, [r3, #0]
 8006860:	605a      	str	r2, [r3, #4]
 8006862:	609a      	str	r2, [r3, #8]
 8006864:	60da      	str	r2, [r3, #12]
 8006866:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	4a59      	ldr	r2, [pc, #356]	; (80069d4 <HAL_ETH_MspInit+0x184>)
 800686e:	4293      	cmp	r3, r2
 8006870:	f040 80ac 	bne.w	80069cc <HAL_ETH_MspInit+0x17c>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 8006874:	2300      	movs	r3, #0
 8006876:	623b      	str	r3, [r7, #32]
 8006878:	4b57      	ldr	r3, [pc, #348]	; (80069d8 <HAL_ETH_MspInit+0x188>)
 800687a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800687c:	4a56      	ldr	r2, [pc, #344]	; (80069d8 <HAL_ETH_MspInit+0x188>)
 800687e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8006882:	6313      	str	r3, [r2, #48]	; 0x30
 8006884:	4b54      	ldr	r3, [pc, #336]	; (80069d8 <HAL_ETH_MspInit+0x188>)
 8006886:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006888:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800688c:	623b      	str	r3, [r7, #32]
 800688e:	6a3b      	ldr	r3, [r7, #32]
 8006890:	2300      	movs	r3, #0
 8006892:	61fb      	str	r3, [r7, #28]
 8006894:	4b50      	ldr	r3, [pc, #320]	; (80069d8 <HAL_ETH_MspInit+0x188>)
 8006896:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006898:	4a4f      	ldr	r2, [pc, #316]	; (80069d8 <HAL_ETH_MspInit+0x188>)
 800689a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800689e:	6313      	str	r3, [r2, #48]	; 0x30
 80068a0:	4b4d      	ldr	r3, [pc, #308]	; (80069d8 <HAL_ETH_MspInit+0x188>)
 80068a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068a4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80068a8:	61fb      	str	r3, [r7, #28]
 80068aa:	69fb      	ldr	r3, [r7, #28]
 80068ac:	2300      	movs	r3, #0
 80068ae:	61bb      	str	r3, [r7, #24]
 80068b0:	4b49      	ldr	r3, [pc, #292]	; (80069d8 <HAL_ETH_MspInit+0x188>)
 80068b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068b4:	4a48      	ldr	r2, [pc, #288]	; (80069d8 <HAL_ETH_MspInit+0x188>)
 80068b6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80068ba:	6313      	str	r3, [r2, #48]	; 0x30
 80068bc:	4b46      	ldr	r3, [pc, #280]	; (80069d8 <HAL_ETH_MspInit+0x188>)
 80068be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068c0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80068c4:	61bb      	str	r3, [r7, #24]
 80068c6:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80068c8:	2300      	movs	r3, #0
 80068ca:	617b      	str	r3, [r7, #20]
 80068cc:	4b42      	ldr	r3, [pc, #264]	; (80069d8 <HAL_ETH_MspInit+0x188>)
 80068ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068d0:	4a41      	ldr	r2, [pc, #260]	; (80069d8 <HAL_ETH_MspInit+0x188>)
 80068d2:	f043 0304 	orr.w	r3, r3, #4
 80068d6:	6313      	str	r3, [r2, #48]	; 0x30
 80068d8:	4b3f      	ldr	r3, [pc, #252]	; (80069d8 <HAL_ETH_MspInit+0x188>)
 80068da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068dc:	f003 0304 	and.w	r3, r3, #4
 80068e0:	617b      	str	r3, [r7, #20]
 80068e2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80068e4:	2300      	movs	r3, #0
 80068e6:	613b      	str	r3, [r7, #16]
 80068e8:	4b3b      	ldr	r3, [pc, #236]	; (80069d8 <HAL_ETH_MspInit+0x188>)
 80068ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068ec:	4a3a      	ldr	r2, [pc, #232]	; (80069d8 <HAL_ETH_MspInit+0x188>)
 80068ee:	f043 0301 	orr.w	r3, r3, #1
 80068f2:	6313      	str	r3, [r2, #48]	; 0x30
 80068f4:	4b38      	ldr	r3, [pc, #224]	; (80069d8 <HAL_ETH_MspInit+0x188>)
 80068f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068f8:	f003 0301 	and.w	r3, r3, #1
 80068fc:	613b      	str	r3, [r7, #16]
 80068fe:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006900:	2300      	movs	r3, #0
 8006902:	60fb      	str	r3, [r7, #12]
 8006904:	4b34      	ldr	r3, [pc, #208]	; (80069d8 <HAL_ETH_MspInit+0x188>)
 8006906:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006908:	4a33      	ldr	r2, [pc, #204]	; (80069d8 <HAL_ETH_MspInit+0x188>)
 800690a:	f043 0302 	orr.w	r3, r3, #2
 800690e:	6313      	str	r3, [r2, #48]	; 0x30
 8006910:	4b31      	ldr	r3, [pc, #196]	; (80069d8 <HAL_ETH_MspInit+0x188>)
 8006912:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006914:	f003 0302 	and.w	r3, r3, #2
 8006918:	60fb      	str	r3, [r7, #12]
 800691a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800691c:	2300      	movs	r3, #0
 800691e:	60bb      	str	r3, [r7, #8]
 8006920:	4b2d      	ldr	r3, [pc, #180]	; (80069d8 <HAL_ETH_MspInit+0x188>)
 8006922:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006924:	4a2c      	ldr	r2, [pc, #176]	; (80069d8 <HAL_ETH_MspInit+0x188>)
 8006926:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800692a:	6313      	str	r3, [r2, #48]	; 0x30
 800692c:	4b2a      	ldr	r3, [pc, #168]	; (80069d8 <HAL_ETH_MspInit+0x188>)
 800692e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006930:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006934:	60bb      	str	r3, [r7, #8]
 8006936:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0 
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8006938:	2332      	movs	r3, #50	; 0x32
 800693a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800693c:	2302      	movs	r3, #2
 800693e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006940:	2300      	movs	r3, #0
 8006942:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006944:	2303      	movs	r3, #3
 8006946:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8006948:	230b      	movs	r3, #11
 800694a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800694c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006950:	4619      	mov	r1, r3
 8006952:	4822      	ldr	r0, [pc, #136]	; (80069dc <HAL_ETH_MspInit+0x18c>)
 8006954:	f7fb fd0a 	bl	800236c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8006958:	2386      	movs	r3, #134	; 0x86
 800695a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800695c:	2302      	movs	r3, #2
 800695e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006960:	2300      	movs	r3, #0
 8006962:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006964:	2303      	movs	r3, #3
 8006966:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8006968:	230b      	movs	r3, #11
 800696a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800696c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006970:	4619      	mov	r1, r3
 8006972:	481b      	ldr	r0, [pc, #108]	; (80069e0 <HAL_ETH_MspInit+0x190>)
 8006974:	f7fb fcfa 	bl	800236c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8006978:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800697c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800697e:	2302      	movs	r3, #2
 8006980:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006982:	2300      	movs	r3, #0
 8006984:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006986:	2303      	movs	r3, #3
 8006988:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800698a:	230b      	movs	r3, #11
 800698c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 800698e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006992:	4619      	mov	r1, r3
 8006994:	4813      	ldr	r0, [pc, #76]	; (80069e4 <HAL_ETH_MspInit+0x194>)
 8006996:	f7fb fce9 	bl	800236c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 800699a:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800699e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80069a0:	2302      	movs	r3, #2
 80069a2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80069a4:	2300      	movs	r3, #0
 80069a6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80069a8:	2303      	movs	r3, #3
 80069aa:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80069ac:	230b      	movs	r3, #11
 80069ae:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80069b0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80069b4:	4619      	mov	r1, r3
 80069b6:	480c      	ldr	r0, [pc, #48]	; (80069e8 <HAL_ETH_MspInit+0x198>)
 80069b8:	f7fb fcd8 	bl	800236c <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(ETH_IRQn, 5, 0);
 80069bc:	2200      	movs	r2, #0
 80069be:	2105      	movs	r1, #5
 80069c0:	203d      	movs	r0, #61	; 0x3d
 80069c2:	f7fa fc97 	bl	80012f4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 80069c6:	203d      	movs	r0, #61	; 0x3d
 80069c8:	f7fa fcb0 	bl	800132c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 80069cc:	bf00      	nop
 80069ce:	3738      	adds	r7, #56	; 0x38
 80069d0:	46bd      	mov	sp, r7
 80069d2:	bd80      	pop	{r7, pc}
 80069d4:	40028000 	.word	0x40028000
 80069d8:	40023800 	.word	0x40023800
 80069dc:	40020800 	.word	0x40020800
 80069e0:	40020000 	.word	0x40020000
 80069e4:	40020400 	.word	0x40020400
 80069e8:	40021800 	.word	0x40021800

080069ec <HAL_ETH_RxCpltCallback>:
  * @brief  Ethernet Rx Transfer completed callback
  * @param  heth: ETH handle
  * @retval None
  */
void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *heth)
{
 80069ec:	b580      	push	{r7, lr}
 80069ee:	b082      	sub	sp, #8
 80069f0:	af00      	add	r7, sp, #0
 80069f2:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(s_xSemaphore);
 80069f4:	4b04      	ldr	r3, [pc, #16]	; (8006a08 <HAL_ETH_RxCpltCallback+0x1c>)
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	4618      	mov	r0, r3
 80069fa:	f002 f937 	bl	8008c6c <osSemaphoreRelease>
}
 80069fe:	bf00      	nop
 8006a00:	3708      	adds	r7, #8
 8006a02:	46bd      	mov	sp, r7
 8006a04:	bd80      	pop	{r7, pc}
 8006a06:	bf00      	nop
 8006a08:	2000020c 	.word	0x2000020c

08006a0c <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{ 
 8006a0c:	b580      	push	{r7, lr}
 8006a0e:	b090      	sub	sp, #64	; 0x40
 8006a10:	af00      	add	r7, sp, #0
 8006a12:	6078      	str	r0, [r7, #4]
  uint32_t regvalue = 0;
 8006a14:	2300      	movs	r3, #0
 8006a16:	63bb      	str	r3, [r7, #56]	; 0x38
  osThreadAttr_t attributes;
  
/* Init ETH */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 8006a18:	4b59      	ldr	r3, [pc, #356]	; (8006b80 <low_level_init+0x174>)
 8006a1a:	4a5a      	ldr	r2, [pc, #360]	; (8006b84 <low_level_init+0x178>)
 8006a1c:	601a      	str	r2, [r3, #0]
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 8006a1e:	4b58      	ldr	r3, [pc, #352]	; (8006b80 <low_level_init+0x174>)
 8006a20:	2201      	movs	r2, #1
 8006a22:	605a      	str	r2, [r3, #4]
  heth.Init.PhyAddress = LAN8742A_PHY_ADDRESS;
 8006a24:	4b56      	ldr	r3, [pc, #344]	; (8006b80 <low_level_init+0x174>)
 8006a26:	2200      	movs	r2, #0
 8006a28:	821a      	strh	r2, [r3, #16]
  MACAddr[0] = 0x00;
 8006a2a:	2300      	movs	r3, #0
 8006a2c:	733b      	strb	r3, [r7, #12]
  MACAddr[1] = 0x80;
 8006a2e:	2380      	movs	r3, #128	; 0x80
 8006a30:	737b      	strb	r3, [r7, #13]
  MACAddr[2] = 0xE1;
 8006a32:	23e1      	movs	r3, #225	; 0xe1
 8006a34:	73bb      	strb	r3, [r7, #14]
  MACAddr[3] = 0x00;
 8006a36:	2300      	movs	r3, #0
 8006a38:	73fb      	strb	r3, [r7, #15]
  MACAddr[4] = 0x00;
 8006a3a:	2300      	movs	r3, #0
 8006a3c:	743b      	strb	r3, [r7, #16]
  MACAddr[5] = 0x00;
 8006a3e:	2300      	movs	r3, #0
 8006a40:	747b      	strb	r3, [r7, #17]
  heth.Init.MACAddr = &MACAddr[0];
 8006a42:	4a4f      	ldr	r2, [pc, #316]	; (8006b80 <low_level_init+0x174>)
 8006a44:	f107 030c 	add.w	r3, r7, #12
 8006a48:	6153      	str	r3, [r2, #20]
  heth.Init.RxMode = ETH_RXINTERRUPT_MODE;
 8006a4a:	4b4d      	ldr	r3, [pc, #308]	; (8006b80 <low_level_init+0x174>)
 8006a4c:	2201      	movs	r2, #1
 8006a4e:	619a      	str	r2, [r3, #24]
  heth.Init.ChecksumMode = ETH_CHECKSUM_BY_HARDWARE;
 8006a50:	4b4b      	ldr	r3, [pc, #300]	; (8006b80 <low_level_init+0x174>)
 8006a52:	2200      	movs	r2, #0
 8006a54:	61da      	str	r2, [r3, #28]
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 8006a56:	4b4a      	ldr	r3, [pc, #296]	; (8006b80 <low_level_init+0x174>)
 8006a58:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8006a5c:	621a      	str	r2, [r3, #32]

  /* USER CODE BEGIN MACADDRESS */
    
  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 8006a5e:	4848      	ldr	r0, [pc, #288]	; (8006b80 <low_level_init+0x174>)
 8006a60:	f7fa fc72 	bl	8001348 <HAL_ETH_Init>
 8006a64:	4603      	mov	r3, r0
 8006a66:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

  if (hal_eth_init_status == HAL_OK)
 8006a6a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	d108      	bne.n	8006a84 <low_level_init+0x78>
  {
    /* Set netif link flag */  
    netif->flags |= NETIF_FLAG_LINK_UP;
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8006a78:	f043 0304 	orr.w	r3, r3, #4
 8006a7c:	b2da      	uxtb	r2, r3
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
  }
  /* Initialize Tx Descriptors list: Chain Mode */
  HAL_ETH_DMATxDescListInit(&heth, DMATxDscrTab, &Tx_Buff[0][0], ETH_TXBUFNB);
 8006a84:	2304      	movs	r3, #4
 8006a86:	4a40      	ldr	r2, [pc, #256]	; (8006b88 <low_level_init+0x17c>)
 8006a88:	4940      	ldr	r1, [pc, #256]	; (8006b8c <low_level_init+0x180>)
 8006a8a:	483d      	ldr	r0, [pc, #244]	; (8006b80 <low_level_init+0x174>)
 8006a8c:	f7fa fdfa 	bl	8001684 <HAL_ETH_DMATxDescListInit>
     
  /* Initialize Rx Descriptors list: Chain Mode  */
  HAL_ETH_DMARxDescListInit(&heth, DMARxDscrTab, &Rx_Buff[0][0], ETH_RXBUFNB);
 8006a90:	2304      	movs	r3, #4
 8006a92:	4a3f      	ldr	r2, [pc, #252]	; (8006b90 <low_level_init+0x184>)
 8006a94:	493f      	ldr	r1, [pc, #252]	; (8006b94 <low_level_init+0x188>)
 8006a96:	483a      	ldr	r0, [pc, #232]	; (8006b80 <low_level_init+0x174>)
 8006a98:	f7fa fe5d 	bl	8001756 <HAL_ETH_DMARxDescListInit>
 
#if LWIP_ARP || LWIP_ETHERNET 

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	2206      	movs	r2, #6
 8006aa0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  
  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 8006aa4:	4b36      	ldr	r3, [pc, #216]	; (8006b80 <low_level_init+0x174>)
 8006aa6:	695b      	ldr	r3, [r3, #20]
 8006aa8:	781a      	ldrb	r2, [r3, #0]
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 8006ab0:	4b33      	ldr	r3, [pc, #204]	; (8006b80 <low_level_init+0x174>)
 8006ab2:	695b      	ldr	r3, [r3, #20]
 8006ab4:	785a      	ldrb	r2, [r3, #1]
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 8006abc:	4b30      	ldr	r3, [pc, #192]	; (8006b80 <low_level_init+0x174>)
 8006abe:	695b      	ldr	r3, [r3, #20]
 8006ac0:	789a      	ldrb	r2, [r3, #2]
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 8006ac8:	4b2d      	ldr	r3, [pc, #180]	; (8006b80 <low_level_init+0x174>)
 8006aca:	695b      	ldr	r3, [r3, #20]
 8006acc:	78da      	ldrb	r2, [r3, #3]
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 8006ad4:	4b2a      	ldr	r3, [pc, #168]	; (8006b80 <low_level_init+0x174>)
 8006ad6:	695b      	ldr	r3, [r3, #20]
 8006ad8:	791a      	ldrb	r2, [r3, #4]
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 8006ae0:	4b27      	ldr	r3, [pc, #156]	; (8006b80 <low_level_init+0x174>)
 8006ae2:	695b      	ldr	r3, [r3, #20]
 8006ae4:	795a      	ldrb	r2, [r3, #5]
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  
  /* maximum transfer unit */
  netif->mtu = 1500;
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8006af2:	84da      	strh	r2, [r3, #38]	; 0x26
  
  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8006afa:	f043 030a 	orr.w	r3, r3, #10
 8006afe:	b2da      	uxtb	r2, r3
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
  #else 
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */
  
/* create a binary semaphore used for informing ethernetif of frame reception */
  s_xSemaphore = osSemaphoreNew(1, 1, NULL);
 8006b06:	2200      	movs	r2, #0
 8006b08:	2101      	movs	r1, #1
 8006b0a:	2001      	movs	r0, #1
 8006b0c:	f001 ffaa 	bl	8008a64 <osSemaphoreNew>
 8006b10:	4602      	mov	r2, r0
 8006b12:	4b21      	ldr	r3, [pc, #132]	; (8006b98 <low_level_init+0x18c>)
 8006b14:	601a      	str	r2, [r3, #0]

/* create the task that handles the ETH_MAC */
  memset(&attributes, 0x0, sizeof(osThreadAttr_t));
 8006b16:	f107 0314 	add.w	r3, r7, #20
 8006b1a:	2224      	movs	r2, #36	; 0x24
 8006b1c:	2100      	movs	r1, #0
 8006b1e:	4618      	mov	r0, r3
 8006b20:	f011 f844 	bl	8017bac <memset>
  attributes.name = "EthIf";
 8006b24:	4b1d      	ldr	r3, [pc, #116]	; (8006b9c <low_level_init+0x190>)
 8006b26:	617b      	str	r3, [r7, #20]
  attributes.stack_size = INTERFACE_THREAD_STACK_SIZE;
 8006b28:	f44f 73af 	mov.w	r3, #350	; 0x15e
 8006b2c:	62bb      	str	r3, [r7, #40]	; 0x28
  attributes.priority = osPriorityRealtime;
 8006b2e:	2330      	movs	r3, #48	; 0x30
 8006b30:	62fb      	str	r3, [r7, #44]	; 0x2c
  osThreadNew(ethernetif_input, netif, &attributes);
 8006b32:	f107 0314 	add.w	r3, r7, #20
 8006b36:	461a      	mov	r2, r3
 8006b38:	6879      	ldr	r1, [r7, #4]
 8006b3a:	4819      	ldr	r0, [pc, #100]	; (8006ba0 <low_level_init+0x194>)
 8006b3c:	f001 fd72 	bl	8008624 <osThreadNew>
  /* Enable MAC and DMA transmission and reception */
  HAL_ETH_Start(&heth);
 8006b40:	480f      	ldr	r0, [pc, #60]	; (8006b80 <low_level_init+0x174>)
 8006b42:	f7fb f930 	bl	8001da6 <HAL_ETH_Start>
    
/* USER CODE END PHY_PRE_CONFIG */
  

  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR, &regvalue);
 8006b46:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8006b4a:	461a      	mov	r2, r3
 8006b4c:	211d      	movs	r1, #29
 8006b4e:	480c      	ldr	r0, [pc, #48]	; (8006b80 <low_level_init+0x174>)
 8006b50:	f7fb f85b 	bl	8001c0a <HAL_ETH_ReadPHYRegister>
  regvalue |= (PHY_ISFR_INT4);
 8006b54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b56:	f043 030b 	orr.w	r3, r3, #11
 8006b5a:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Enable Interrupt on change of link status */ 
  HAL_ETH_WritePHYRegister(&heth, PHY_ISFR , regvalue );
 8006b5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b5e:	461a      	mov	r2, r3
 8006b60:	211d      	movs	r1, #29
 8006b62:	4807      	ldr	r0, [pc, #28]	; (8006b80 <low_level_init+0x174>)
 8006b64:	f7fb f8b9 	bl	8001cda <HAL_ETH_WritePHYRegister>
  
  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR , &regvalue);
 8006b68:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8006b6c:	461a      	mov	r2, r3
 8006b6e:	211d      	movs	r1, #29
 8006b70:	4803      	ldr	r0, [pc, #12]	; (8006b80 <low_level_init+0x174>)
 8006b72:	f7fb f84a 	bl	8001c0a <HAL_ETH_ReadPHYRegister>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */ 
    
/* USER CODE END LOW_LEVEL_INIT */
}
 8006b76:	bf00      	nop
 8006b78:	3740      	adds	r7, #64	; 0x40
 8006b7a:	46bd      	mov	sp, r7
 8006b7c:	bd80      	pop	{r7, pc}
 8006b7e:	bf00      	nop
 8006b80:	20006624 	.word	0x20006624
 8006b84:	40028000 	.word	0x40028000
 8006b88:	2000666c 	.word	0x2000666c
 8006b8c:	20004d54 	.word	0x20004d54
 8006b90:	20004dd4 	.word	0x20004dd4
 8006b94:	200065a4 	.word	0x200065a4
 8006b98:	2000020c 	.word	0x2000020c
 8006b9c:	08018a40 	.word	0x08018a40
 8006ba0:	08006e45 	.word	0x08006e45

08006ba4 <low_level_output>:
 *       to become availale since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 8006ba4:	b580      	push	{r7, lr}
 8006ba6:	b08a      	sub	sp, #40	; 0x28
 8006ba8:	af00      	add	r7, sp, #0
 8006baa:	6078      	str	r0, [r7, #4]
 8006bac:	6039      	str	r1, [r7, #0]
  err_t errval;
  struct pbuf *q;
  uint8_t *buffer = (uint8_t *)(heth.TxDesc->Buffer1Addr);
 8006bae:	4b4b      	ldr	r3, [pc, #300]	; (8006cdc <low_level_output+0x138>)
 8006bb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006bb2:	689b      	ldr	r3, [r3, #8]
 8006bb4:	61fb      	str	r3, [r7, #28]
  __IO ETH_DMADescTypeDef *DmaTxDesc;
  uint32_t framelength = 0;
 8006bb6:	2300      	movs	r3, #0
 8006bb8:	617b      	str	r3, [r7, #20]
  uint32_t bufferoffset = 0;
 8006bba:	2300      	movs	r3, #0
 8006bbc:	613b      	str	r3, [r7, #16]
  uint32_t byteslefttocopy = 0;
 8006bbe:	2300      	movs	r3, #0
 8006bc0:	60fb      	str	r3, [r7, #12]
  uint32_t payloadoffset = 0;
 8006bc2:	2300      	movs	r3, #0
 8006bc4:	60bb      	str	r3, [r7, #8]
  DmaTxDesc = heth.TxDesc;
 8006bc6:	4b45      	ldr	r3, [pc, #276]	; (8006cdc <low_level_output+0x138>)
 8006bc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006bca:	61bb      	str	r3, [r7, #24]
  bufferoffset = 0;
 8006bcc:	2300      	movs	r3, #0
 8006bce:	613b      	str	r3, [r7, #16]
  
  /* copy frame from pbufs to driver buffers */
  for(q = p; q != NULL; q = q->next)
 8006bd0:	683b      	ldr	r3, [r7, #0]
 8006bd2:	623b      	str	r3, [r7, #32]
 8006bd4:	e05a      	b.n	8006c8c <low_level_output+0xe8>
    {
      /* Is this buffer available? If not, goto error */
      if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8006bd6:	69bb      	ldr	r3, [r7, #24]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	2b00      	cmp	r3, #0
 8006bdc:	da03      	bge.n	8006be6 <low_level_output+0x42>
      {
        errval = ERR_USE;
 8006bde:	23f8      	movs	r3, #248	; 0xf8
 8006be0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        goto error;
 8006be4:	e05c      	b.n	8006ca0 <low_level_output+0xfc>
      }
    
      /* Get bytes in current lwIP buffer */
      byteslefttocopy = q->len;
 8006be6:	6a3b      	ldr	r3, [r7, #32]
 8006be8:	895b      	ldrh	r3, [r3, #10]
 8006bea:	60fb      	str	r3, [r7, #12]
      payloadoffset = 0;
 8006bec:	2300      	movs	r3, #0
 8006bee:	60bb      	str	r3, [r7, #8]
    
      /* Check if the length of data to copy is bigger than Tx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 8006bf0:	e02f      	b.n	8006c52 <low_level_output+0xae>
      {
        /* Copy data to Tx buffer*/
        memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), (ETH_TX_BUF_SIZE - bufferoffset) );
 8006bf2:	69fa      	ldr	r2, [r7, #28]
 8006bf4:	693b      	ldr	r3, [r7, #16]
 8006bf6:	18d0      	adds	r0, r2, r3
 8006bf8:	6a3b      	ldr	r3, [r7, #32]
 8006bfa:	685a      	ldr	r2, [r3, #4]
 8006bfc:	68bb      	ldr	r3, [r7, #8]
 8006bfe:	18d1      	adds	r1, r2, r3
 8006c00:	693b      	ldr	r3, [r7, #16]
 8006c02:	f5c3 63be 	rsb	r3, r3, #1520	; 0x5f0
 8006c06:	3304      	adds	r3, #4
 8006c08:	461a      	mov	r2, r3
 8006c0a:	f010 ffc4 	bl	8017b96 <memcpy>
      
        /* Point to next descriptor */
        DmaTxDesc = (ETH_DMADescTypeDef *)(DmaTxDesc->Buffer2NextDescAddr);
 8006c0e:	69bb      	ldr	r3, [r7, #24]
 8006c10:	68db      	ldr	r3, [r3, #12]
 8006c12:	61bb      	str	r3, [r7, #24]
      
        /* Check if the buffer is available */
        if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8006c14:	69bb      	ldr	r3, [r7, #24]
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	2b00      	cmp	r3, #0
 8006c1a:	da03      	bge.n	8006c24 <low_level_output+0x80>
        {
          errval = ERR_USE;
 8006c1c:	23f8      	movs	r3, #248	; 0xf8
 8006c1e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          goto error;
 8006c22:	e03d      	b.n	8006ca0 <low_level_output+0xfc>
        }
      
        buffer = (uint8_t *)(DmaTxDesc->Buffer1Addr);
 8006c24:	69bb      	ldr	r3, [r7, #24]
 8006c26:	689b      	ldr	r3, [r3, #8]
 8006c28:	61fb      	str	r3, [r7, #28]
      
        byteslefttocopy = byteslefttocopy - (ETH_TX_BUF_SIZE - bufferoffset);
 8006c2a:	693a      	ldr	r2, [r7, #16]
 8006c2c:	68fb      	ldr	r3, [r7, #12]
 8006c2e:	4413      	add	r3, r2
 8006c30:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 8006c34:	60fb      	str	r3, [r7, #12]
        payloadoffset = payloadoffset + (ETH_TX_BUF_SIZE - bufferoffset);
 8006c36:	68ba      	ldr	r2, [r7, #8]
 8006c38:	693b      	ldr	r3, [r7, #16]
 8006c3a:	1ad3      	subs	r3, r2, r3
 8006c3c:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8006c40:	60bb      	str	r3, [r7, #8]
        framelength = framelength + (ETH_TX_BUF_SIZE - bufferoffset);
 8006c42:	697a      	ldr	r2, [r7, #20]
 8006c44:	693b      	ldr	r3, [r7, #16]
 8006c46:	1ad3      	subs	r3, r2, r3
 8006c48:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8006c4c:	617b      	str	r3, [r7, #20]
        bufferoffset = 0;
 8006c4e:	2300      	movs	r3, #0
 8006c50:	613b      	str	r3, [r7, #16]
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 8006c52:	68fa      	ldr	r2, [r7, #12]
 8006c54:	693b      	ldr	r3, [r7, #16]
 8006c56:	4413      	add	r3, r2
 8006c58:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8006c5c:	4293      	cmp	r3, r2
 8006c5e:	d8c8      	bhi.n	8006bf2 <low_level_output+0x4e>
      }
    
      /* Copy the remaining bytes */
      memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), byteslefttocopy );
 8006c60:	69fa      	ldr	r2, [r7, #28]
 8006c62:	693b      	ldr	r3, [r7, #16]
 8006c64:	18d0      	adds	r0, r2, r3
 8006c66:	6a3b      	ldr	r3, [r7, #32]
 8006c68:	685a      	ldr	r2, [r3, #4]
 8006c6a:	68bb      	ldr	r3, [r7, #8]
 8006c6c:	4413      	add	r3, r2
 8006c6e:	68fa      	ldr	r2, [r7, #12]
 8006c70:	4619      	mov	r1, r3
 8006c72:	f010 ff90 	bl	8017b96 <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 8006c76:	693a      	ldr	r2, [r7, #16]
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	4413      	add	r3, r2
 8006c7c:	613b      	str	r3, [r7, #16]
      framelength = framelength + byteslefttocopy;
 8006c7e:	697a      	ldr	r2, [r7, #20]
 8006c80:	68fb      	ldr	r3, [r7, #12]
 8006c82:	4413      	add	r3, r2
 8006c84:	617b      	str	r3, [r7, #20]
  for(q = p; q != NULL; q = q->next)
 8006c86:	6a3b      	ldr	r3, [r7, #32]
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	623b      	str	r3, [r7, #32]
 8006c8c:	6a3b      	ldr	r3, [r7, #32]
 8006c8e:	2b00      	cmp	r3, #0
 8006c90:	d1a1      	bne.n	8006bd6 <low_level_output+0x32>
    }
  
  /* Prepare transmit descriptors to give to DMA */ 
  HAL_ETH_TransmitFrame(&heth, framelength);
 8006c92:	6979      	ldr	r1, [r7, #20]
 8006c94:	4811      	ldr	r0, [pc, #68]	; (8006cdc <low_level_output+0x138>)
 8006c96:	f7fa fdcb 	bl	8001830 <HAL_ETH_TransmitFrame>
  
  errval = ERR_OK;
 8006c9a:	2300      	movs	r3, #0
 8006c9c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  
error:
  
  /* When Transmit Underflow flag is set, clear it and issue a Transmit Poll Demand to resume transmission */
  if ((heth.Instance->DMASR & ETH_DMASR_TUS) != (uint32_t)RESET)
 8006ca0:	4b0e      	ldr	r3, [pc, #56]	; (8006cdc <low_level_output+0x138>)
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006ca8:	3314      	adds	r3, #20
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	f003 0320 	and.w	r3, r3, #32
 8006cb0:	2b00      	cmp	r3, #0
 8006cb2:	d00d      	beq.n	8006cd0 <low_level_output+0x12c>
  {
    /* Clear TUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_TUS;
 8006cb4:	4b09      	ldr	r3, [pc, #36]	; (8006cdc <low_level_output+0x138>)
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006cbc:	3314      	adds	r3, #20
 8006cbe:	2220      	movs	r2, #32
 8006cc0:	601a      	str	r2, [r3, #0]

    /* Resume DMA transmission*/
    heth.Instance->DMATPDR = 0;
 8006cc2:	4b06      	ldr	r3, [pc, #24]	; (8006cdc <low_level_output+0x138>)
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006cca:	3304      	adds	r3, #4
 8006ccc:	2200      	movs	r2, #0
 8006cce:	601a      	str	r2, [r3, #0]
  }
  return errval;
 8006cd0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8006cd4:	4618      	mov	r0, r3
 8006cd6:	3728      	adds	r7, #40	; 0x28
 8006cd8:	46bd      	mov	sp, r7
 8006cda:	bd80      	pop	{r7, pc}
 8006cdc:	20006624 	.word	0x20006624

08006ce0 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 8006ce0:	b580      	push	{r7, lr}
 8006ce2:	b08c      	sub	sp, #48	; 0x30
 8006ce4:	af00      	add	r7, sp, #0
 8006ce6:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8006ce8:	2300      	movs	r3, #0
 8006cea:	62fb      	str	r3, [r7, #44]	; 0x2c
  struct pbuf *q = NULL;
 8006cec:	2300      	movs	r3, #0
 8006cee:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t len = 0;
 8006cf0:	2300      	movs	r3, #0
 8006cf2:	81fb      	strh	r3, [r7, #14]
  uint8_t *buffer;
  __IO ETH_DMADescTypeDef *dmarxdesc;
  uint32_t bufferoffset = 0;
 8006cf4:	2300      	movs	r3, #0
 8006cf6:	61fb      	str	r3, [r7, #28]
  uint32_t payloadoffset = 0;
 8006cf8:	2300      	movs	r3, #0
 8006cfa:	61bb      	str	r3, [r7, #24]
  uint32_t byteslefttocopy = 0;
 8006cfc:	2300      	movs	r3, #0
 8006cfe:	617b      	str	r3, [r7, #20]
  uint32_t i=0;
 8006d00:	2300      	movs	r3, #0
 8006d02:	613b      	str	r3, [r7, #16]
  

  /* get received frame */
  if (HAL_ETH_GetReceivedFrame_IT(&heth) != HAL_OK)
 8006d04:	484e      	ldr	r0, [pc, #312]	; (8006e40 <low_level_input+0x160>)
 8006d06:	f7fa fe7d 	bl	8001a04 <HAL_ETH_GetReceivedFrame_IT>
 8006d0a:	4603      	mov	r3, r0
 8006d0c:	2b00      	cmp	r3, #0
 8006d0e:	d001      	beq.n	8006d14 <low_level_input+0x34>
    return NULL;
 8006d10:	2300      	movs	r3, #0
 8006d12:	e091      	b.n	8006e38 <low_level_input+0x158>
  
  /* Obtain the size of the packet and put it into the "len" variable. */
  len = heth.RxFrameInfos.length;
 8006d14:	4b4a      	ldr	r3, [pc, #296]	; (8006e40 <low_level_input+0x160>)
 8006d16:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006d18:	81fb      	strh	r3, [r7, #14]
  buffer = (uint8_t *)heth.RxFrameInfos.buffer;
 8006d1a:	4b49      	ldr	r3, [pc, #292]	; (8006e40 <low_level_input+0x160>)
 8006d1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d1e:	627b      	str	r3, [r7, #36]	; 0x24
  
  if (len > 0)
 8006d20:	89fb      	ldrh	r3, [r7, #14]
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	d006      	beq.n	8006d34 <low_level_input+0x54>
  {
    /* We allocate a pbuf chain of pbufs from the Lwip buffer pool */
    p = pbuf_alloc(PBUF_RAW, len, PBUF_POOL);
 8006d26:	89fb      	ldrh	r3, [r7, #14]
 8006d28:	2203      	movs	r2, #3
 8006d2a:	4619      	mov	r1, r3
 8006d2c:	2004      	movs	r0, #4
 8006d2e:	f006 f9ad 	bl	800d08c <pbuf_alloc>
 8006d32:	62f8      	str	r0, [r7, #44]	; 0x2c
  }
  
  if (p != NULL)
 8006d34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d36:	2b00      	cmp	r3, #0
 8006d38:	d04b      	beq.n	8006dd2 <low_level_input+0xf2>
  {
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 8006d3a:	4b41      	ldr	r3, [pc, #260]	; (8006e40 <low_level_input+0x160>)
 8006d3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d3e:	623b      	str	r3, [r7, #32]
    bufferoffset = 0;
 8006d40:	2300      	movs	r3, #0
 8006d42:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 8006d44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d46:	62bb      	str	r3, [r7, #40]	; 0x28
 8006d48:	e040      	b.n	8006dcc <low_level_input+0xec>
    {
      byteslefttocopy = q->len;
 8006d4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d4c:	895b      	ldrh	r3, [r3, #10]
 8006d4e:	617b      	str	r3, [r7, #20]
      payloadoffset = 0;
 8006d50:	2300      	movs	r3, #0
 8006d52:	61bb      	str	r3, [r7, #24]
      
      /* Check if the length of bytes to copy in current pbuf is bigger than Rx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 8006d54:	e021      	b.n	8006d9a <low_level_input+0xba>
      {
        /* Copy data to pbuf */
        memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), (ETH_RX_BUF_SIZE - bufferoffset));
 8006d56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d58:	685a      	ldr	r2, [r3, #4]
 8006d5a:	69bb      	ldr	r3, [r7, #24]
 8006d5c:	18d0      	adds	r0, r2, r3
 8006d5e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006d60:	69fb      	ldr	r3, [r7, #28]
 8006d62:	18d1      	adds	r1, r2, r3
 8006d64:	69fb      	ldr	r3, [r7, #28]
 8006d66:	f5c3 63be 	rsb	r3, r3, #1520	; 0x5f0
 8006d6a:	3304      	adds	r3, #4
 8006d6c:	461a      	mov	r2, r3
 8006d6e:	f010 ff12 	bl	8017b96 <memcpy>
        
        /* Point to next descriptor */
        dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 8006d72:	6a3b      	ldr	r3, [r7, #32]
 8006d74:	68db      	ldr	r3, [r3, #12]
 8006d76:	623b      	str	r3, [r7, #32]
        buffer = (uint8_t *)(dmarxdesc->Buffer1Addr);
 8006d78:	6a3b      	ldr	r3, [r7, #32]
 8006d7a:	689b      	ldr	r3, [r3, #8]
 8006d7c:	627b      	str	r3, [r7, #36]	; 0x24
        
        byteslefttocopy = byteslefttocopy - (ETH_RX_BUF_SIZE - bufferoffset);
 8006d7e:	69fa      	ldr	r2, [r7, #28]
 8006d80:	697b      	ldr	r3, [r7, #20]
 8006d82:	4413      	add	r3, r2
 8006d84:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 8006d88:	617b      	str	r3, [r7, #20]
        payloadoffset = payloadoffset + (ETH_RX_BUF_SIZE - bufferoffset);
 8006d8a:	69ba      	ldr	r2, [r7, #24]
 8006d8c:	69fb      	ldr	r3, [r7, #28]
 8006d8e:	1ad3      	subs	r3, r2, r3
 8006d90:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8006d94:	61bb      	str	r3, [r7, #24]
        bufferoffset = 0;
 8006d96:	2300      	movs	r3, #0
 8006d98:	61fb      	str	r3, [r7, #28]
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 8006d9a:	697a      	ldr	r2, [r7, #20]
 8006d9c:	69fb      	ldr	r3, [r7, #28]
 8006d9e:	4413      	add	r3, r2
 8006da0:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8006da4:	4293      	cmp	r3, r2
 8006da6:	d8d6      	bhi.n	8006d56 <low_level_input+0x76>
      }
      /* Copy remaining data in pbuf */
      memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), byteslefttocopy);
 8006da8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006daa:	685a      	ldr	r2, [r3, #4]
 8006dac:	69bb      	ldr	r3, [r7, #24]
 8006dae:	18d0      	adds	r0, r2, r3
 8006db0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006db2:	69fb      	ldr	r3, [r7, #28]
 8006db4:	4413      	add	r3, r2
 8006db6:	697a      	ldr	r2, [r7, #20]
 8006db8:	4619      	mov	r1, r3
 8006dba:	f010 feec 	bl	8017b96 <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 8006dbe:	69fa      	ldr	r2, [r7, #28]
 8006dc0:	697b      	ldr	r3, [r7, #20]
 8006dc2:	4413      	add	r3, r2
 8006dc4:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 8006dc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	62bb      	str	r3, [r7, #40]	; 0x28
 8006dcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006dce:	2b00      	cmp	r3, #0
 8006dd0:	d1bb      	bne.n	8006d4a <low_level_input+0x6a>
    }
  }  
  
    /* Release descriptors to DMA */
    /* Point to first descriptor */
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 8006dd2:	4b1b      	ldr	r3, [pc, #108]	; (8006e40 <low_level_input+0x160>)
 8006dd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006dd6:	623b      	str	r3, [r7, #32]
    /* Set Own bit in Rx descriptors: gives the buffers back to DMA */
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 8006dd8:	2300      	movs	r3, #0
 8006dda:	613b      	str	r3, [r7, #16]
 8006ddc:	e00b      	b.n	8006df6 <low_level_input+0x116>
    {  
      dmarxdesc->Status |= ETH_DMARXDESC_OWN;
 8006dde:	6a3b      	ldr	r3, [r7, #32]
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8006de6:	6a3b      	ldr	r3, [r7, #32]
 8006de8:	601a      	str	r2, [r3, #0]
      dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 8006dea:	6a3b      	ldr	r3, [r7, #32]
 8006dec:	68db      	ldr	r3, [r3, #12]
 8006dee:	623b      	str	r3, [r7, #32]
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 8006df0:	693b      	ldr	r3, [r7, #16]
 8006df2:	3301      	adds	r3, #1
 8006df4:	613b      	str	r3, [r7, #16]
 8006df6:	4b12      	ldr	r3, [pc, #72]	; (8006e40 <low_level_input+0x160>)
 8006df8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006dfa:	693a      	ldr	r2, [r7, #16]
 8006dfc:	429a      	cmp	r2, r3
 8006dfe:	d3ee      	bcc.n	8006dde <low_level_input+0xfe>
    }
    
    /* Clear Segment_Count */
    heth.RxFrameInfos.SegCount =0;  
 8006e00:	4b0f      	ldr	r3, [pc, #60]	; (8006e40 <low_level_input+0x160>)
 8006e02:	2200      	movs	r2, #0
 8006e04:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* When Rx Buffer unavailable flag is set: clear it and resume reception */
  if ((heth.Instance->DMASR & ETH_DMASR_RBUS) != (uint32_t)RESET)  
 8006e06:	4b0e      	ldr	r3, [pc, #56]	; (8006e40 <low_level_input+0x160>)
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006e0e:	3314      	adds	r3, #20
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	d00d      	beq.n	8006e36 <low_level_input+0x156>
  {
    /* Clear RBUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_RBUS;
 8006e1a:	4b09      	ldr	r3, [pc, #36]	; (8006e40 <low_level_input+0x160>)
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006e22:	3314      	adds	r3, #20
 8006e24:	2280      	movs	r2, #128	; 0x80
 8006e26:	601a      	str	r2, [r3, #0]
    /* Resume DMA reception */
    heth.Instance->DMARPDR = 0;
 8006e28:	4b05      	ldr	r3, [pc, #20]	; (8006e40 <low_level_input+0x160>)
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006e30:	3308      	adds	r3, #8
 8006e32:	2200      	movs	r2, #0
 8006e34:	601a      	str	r2, [r3, #0]
  }
  return p;
 8006e36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8006e38:	4618      	mov	r0, r3
 8006e3a:	3730      	adds	r7, #48	; 0x30
 8006e3c:	46bd      	mov	sp, r7
 8006e3e:	bd80      	pop	{r7, pc}
 8006e40:	20006624 	.word	0x20006624

08006e44 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(void* argument)
{
 8006e44:	b580      	push	{r7, lr}
 8006e46:	b084      	sub	sp, #16
 8006e48:	af00      	add	r7, sp, #0
 8006e4a:	6078      	str	r0, [r7, #4]
  struct pbuf *p;
  struct netif *netif = (struct netif *) argument;
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	60fb      	str	r3, [r7, #12]
  
  for( ;; )
  {
    if (osSemaphoreAcquire(s_xSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 8006e50:	4b0f      	ldr	r3, [pc, #60]	; (8006e90 <ethernetif_input+0x4c>)
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8006e58:	4618      	mov	r0, r3
 8006e5a:	f001 fea1 	bl	8008ba0 <osSemaphoreAcquire>
 8006e5e:	4603      	mov	r3, r0
 8006e60:	2b00      	cmp	r3, #0
 8006e62:	d1f5      	bne.n	8006e50 <ethernetif_input+0xc>
    {
      do
      {   
        p = low_level_input( netif );
 8006e64:	68f8      	ldr	r0, [r7, #12]
 8006e66:	f7ff ff3b 	bl	8006ce0 <low_level_input>
 8006e6a:	60b8      	str	r0, [r7, #8]
        if   (p != NULL)
 8006e6c:	68bb      	ldr	r3, [r7, #8]
 8006e6e:	2b00      	cmp	r3, #0
 8006e70:	d00a      	beq.n	8006e88 <ethernetif_input+0x44>
        {
          if (netif->input( p, netif) != ERR_OK )
 8006e72:	68fb      	ldr	r3, [r7, #12]
 8006e74:	691b      	ldr	r3, [r3, #16]
 8006e76:	68f9      	ldr	r1, [r7, #12]
 8006e78:	68b8      	ldr	r0, [r7, #8]
 8006e7a:	4798      	blx	r3
 8006e7c:	4603      	mov	r3, r0
 8006e7e:	2b00      	cmp	r3, #0
 8006e80:	d002      	beq.n	8006e88 <ethernetif_input+0x44>
          {
            pbuf_free(p);
 8006e82:	68b8      	ldr	r0, [r7, #8]
 8006e84:	f006 fc74 	bl	800d770 <pbuf_free>
          }
        }
      } while(p!=NULL);
 8006e88:	68bb      	ldr	r3, [r7, #8]
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	d1ea      	bne.n	8006e64 <ethernetif_input+0x20>
    if (osSemaphoreAcquire(s_xSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 8006e8e:	e7df      	b.n	8006e50 <ethernetif_input+0xc>
 8006e90:	2000020c 	.word	0x2000020c

08006e94 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 8006e94:	b580      	push	{r7, lr}
 8006e96:	b082      	sub	sp, #8
 8006e98:	af00      	add	r7, sp, #0
 8006e9a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	2b00      	cmp	r3, #0
 8006ea0:	d106      	bne.n	8006eb0 <ethernetif_init+0x1c>
 8006ea2:	4b0e      	ldr	r3, [pc, #56]	; (8006edc <ethernetif_init+0x48>)
 8006ea4:	f44f 720c 	mov.w	r2, #560	; 0x230
 8006ea8:	490d      	ldr	r1, [pc, #52]	; (8006ee0 <ethernetif_init+0x4c>)
 8006eaa:	480e      	ldr	r0, [pc, #56]	; (8006ee4 <ethernetif_init+0x50>)
 8006eac:	f010 ff2e 	bl	8017d0c <iprintf>
#if LWIP_NETIF_HOSTNAME
  /* Initialize interface hostname */
  netif->hostname = "lwip";
#endif /* LWIP_NETIF_HOSTNAME */

  netif->name[0] = IFNAME0;
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	2273      	movs	r2, #115	; 0x73
 8006eb4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  netif->name[1] = IFNAME1;
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	2274      	movs	r2, #116	; 0x74
 8006ebc:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	4a09      	ldr	r2, [pc, #36]	; (8006ee8 <ethernetif_init+0x54>)
 8006ec4:	615a      	str	r2, [r3, #20]
 
#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	4a08      	ldr	r2, [pc, #32]	; (8006eec <ethernetif_init+0x58>)
 8006eca:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 8006ecc:	6878      	ldr	r0, [r7, #4]
 8006ece:	f7ff fd9d 	bl	8006a0c <low_level_init>

  return ERR_OK;
 8006ed2:	2300      	movs	r3, #0
}
 8006ed4:	4618      	mov	r0, r3
 8006ed6:	3708      	adds	r7, #8
 8006ed8:	46bd      	mov	sp, r7
 8006eda:	bd80      	pop	{r7, pc}
 8006edc:	08018a48 	.word	0x08018a48
 8006ee0:	08018a64 	.word	0x08018a64
 8006ee4:	08018a74 	.word	0x08018a74
 8006ee8:	0801533d 	.word	0x0801533d
 8006eec:	08006ba5 	.word	0x08006ba5

08006ef0 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Time
*/
u32_t sys_now(void)
{
 8006ef0:	b580      	push	{r7, lr}
 8006ef2:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8006ef4:	f7fa f918 	bl	8001128 <HAL_GetTick>
 8006ef8:	4603      	mov	r3, r0
}
 8006efa:	4618      	mov	r0, r3
 8006efc:	bd80      	pop	{r7, pc}

08006efe <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init (USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006efe:	b580      	push	{r7, lr}
 8006f00:	b084      	sub	sp, #16
 8006f02:	af00      	add	r7, sp, #0
 8006f04:	6078      	str	r0, [r7, #4]
 8006f06:	460b      	mov	r3, r1
 8006f08:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8006f0a:	2300      	movs	r3, #0
 8006f0c:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if(pdev->dev_speed == USBD_SPEED_HIGH)
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	7c1b      	ldrb	r3, [r3, #16]
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	d115      	bne.n	8006f42 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8006f16:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006f1a:	2202      	movs	r2, #2
 8006f1c:	2181      	movs	r1, #129	; 0x81
 8006f1e:	6878      	ldr	r0, [r7, #4]
 8006f20:	f010 fca3 	bl	801786a <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	2201      	movs	r2, #1
 8006f28:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8006f2a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006f2e:	2202      	movs	r2, #2
 8006f30:	2101      	movs	r1, #1
 8006f32:	6878      	ldr	r0, [r7, #4]
 8006f34:	f010 fc99 	bl	801786a <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	2201      	movs	r2, #1
 8006f3c:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
 8006f40:	e012      	b.n	8006f68 <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8006f42:	2340      	movs	r3, #64	; 0x40
 8006f44:	2202      	movs	r2, #2
 8006f46:	2181      	movs	r1, #129	; 0x81
 8006f48:	6878      	ldr	r0, [r7, #4]
 8006f4a:	f010 fc8e 	bl	801786a <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	2201      	movs	r2, #1
 8006f52:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8006f54:	2340      	movs	r3, #64	; 0x40
 8006f56:	2202      	movs	r2, #2
 8006f58:	2101      	movs	r1, #1
 8006f5a:	6878      	ldr	r0, [r7, #4]
 8006f5c:	f010 fc85 	bl	801786a <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	2201      	movs	r2, #1
 8006f64:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8006f68:	2308      	movs	r3, #8
 8006f6a:	2203      	movs	r2, #3
 8006f6c:	2182      	movs	r1, #130	; 0x82
 8006f6e:	6878      	ldr	r0, [r7, #4]
 8006f70:	f010 fc7b 	bl	801786a <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	2201      	movs	r2, #1
 8006f78:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof (USBD_CDC_HandleTypeDef));
 8006f7a:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8006f7e:	f010 fdeb 	bl	8017b58 <malloc>
 8006f82:	4603      	mov	r3, r0
 8006f84:	461a      	mov	r2, r3
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290

  if(pdev->pClassData == NULL)
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8006f92:	2b00      	cmp	r3, #0
 8006f94:	d102      	bne.n	8006f9c <USBD_CDC_Init+0x9e>
  {
    ret = 1U;
 8006f96:	2301      	movs	r3, #1
 8006f98:	73fb      	strb	r3, [r7, #15]
 8006f9a:	e026      	b.n	8006fea <USBD_CDC_Init+0xec>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8006fa2:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 8006fae:	68bb      	ldr	r3, [r7, #8]
 8006fb0:	2200      	movs	r2, #0
 8006fb2:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 8006fb6:	68bb      	ldr	r3, [r7, #8]
 8006fb8:	2200      	movs	r2, #0
 8006fba:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if(pdev->dev_speed == USBD_SPEED_HIGH)
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	7c1b      	ldrb	r3, [r3, #16]
 8006fc2:	2b00      	cmp	r3, #0
 8006fc4:	d109      	bne.n	8006fda <USBD_CDC_Init+0xdc>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006fc6:	68bb      	ldr	r3, [r7, #8]
 8006fc8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006fcc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006fd0:	2101      	movs	r1, #1
 8006fd2:	6878      	ldr	r0, [r7, #4]
 8006fd4:	f010 fd3a 	bl	8017a4c <USBD_LL_PrepareReceive>
 8006fd8:	e007      	b.n	8006fea <USBD_CDC_Init+0xec>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006fda:	68bb      	ldr	r3, [r7, #8]
 8006fdc:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006fe0:	2340      	movs	r3, #64	; 0x40
 8006fe2:	2101      	movs	r1, #1
 8006fe4:	6878      	ldr	r0, [r7, #4]
 8006fe6:	f010 fd31 	bl	8017a4c <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 8006fea:	7bfb      	ldrb	r3, [r7, #15]
}
 8006fec:	4618      	mov	r0, r3
 8006fee:	3710      	adds	r7, #16
 8006ff0:	46bd      	mov	sp, r7
 8006ff2:	bd80      	pop	{r7, pc}

08006ff4 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit (USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006ff4:	b580      	push	{r7, lr}
 8006ff6:	b084      	sub	sp, #16
 8006ff8:	af00      	add	r7, sp, #0
 8006ffa:	6078      	str	r0, [r7, #4]
 8006ffc:	460b      	mov	r3, r1
 8006ffe:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8007000:	2300      	movs	r3, #0
 8007002:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8007004:	2181      	movs	r1, #129	; 0x81
 8007006:	6878      	ldr	r0, [r7, #4]
 8007008:	f010 fc55 	bl	80178b6 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	2200      	movs	r2, #0
 8007010:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8007012:	2101      	movs	r1, #1
 8007014:	6878      	ldr	r0, [r7, #4]
 8007016:	f010 fc4e 	bl	80178b6 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	2200      	movs	r2, #0
 800701e:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8007022:	2182      	movs	r1, #130	; 0x82
 8007024:	6878      	ldr	r0, [r7, #4]
 8007026:	f010 fc46 	bl	80178b6 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	2200      	movs	r2, #0
 800702e:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if(pdev->pClassData != NULL)
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8007036:	2b00      	cmp	r3, #0
 8007038:	d00e      	beq.n	8007058 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007040:	685b      	ldr	r3, [r3, #4]
 8007042:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800704a:	4618      	mov	r0, r3
 800704c:	f010 fd8c 	bl	8017b68 <free>
    pdev->pClassData = NULL;
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	2200      	movs	r2, #0
 8007054:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290
  }

  return ret;
 8007058:	7bfb      	ldrb	r3, [r7, #15]
}
 800705a:	4618      	mov	r0, r3
 800705c:	3710      	adds	r7, #16
 800705e:	46bd      	mov	sp, r7
 8007060:	bd80      	pop	{r7, pc}

08007062 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup (USBD_HandleTypeDef *pdev,
                                USBD_SetupReqTypedef *req)
{
 8007062:	b580      	push	{r7, lr}
 8007064:	b086      	sub	sp, #24
 8007066:	af00      	add	r7, sp, #0
 8007068:	6078      	str	r0, [r7, #4]
 800706a:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8007072:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8007074:	2300      	movs	r3, #0
 8007076:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8007078:	2300      	movs	r3, #0
 800707a:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 800707c:	2300      	movs	r3, #0
 800707e:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007080:	683b      	ldr	r3, [r7, #0]
 8007082:	781b      	ldrb	r3, [r3, #0]
 8007084:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007088:	2b00      	cmp	r3, #0
 800708a:	d039      	beq.n	8007100 <USBD_CDC_Setup+0x9e>
 800708c:	2b20      	cmp	r3, #32
 800708e:	d17c      	bne.n	800718a <USBD_CDC_Setup+0x128>
  {
  case USB_REQ_TYPE_CLASS :
    if (req->wLength)
 8007090:	683b      	ldr	r3, [r7, #0]
 8007092:	88db      	ldrh	r3, [r3, #6]
 8007094:	2b00      	cmp	r3, #0
 8007096:	d029      	beq.n	80070ec <USBD_CDC_Setup+0x8a>
    {
      if (req->bmRequest & 0x80U)
 8007098:	683b      	ldr	r3, [r7, #0]
 800709a:	781b      	ldrb	r3, [r3, #0]
 800709c:	b25b      	sxtb	r3, r3
 800709e:	2b00      	cmp	r3, #0
 80070a0:	da11      	bge.n	80070c6 <USBD_CDC_Setup+0x64>
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80070a8:	689b      	ldr	r3, [r3, #8]
 80070aa:	683a      	ldr	r2, [r7, #0]
 80070ac:	7850      	ldrb	r0, [r2, #1]
                                                          (uint8_t *)(void *)hcdc->data,
 80070ae:	6939      	ldr	r1, [r7, #16]
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80070b0:	683a      	ldr	r2, [r7, #0]
 80070b2:	88d2      	ldrh	r2, [r2, #6]
 80070b4:	4798      	blx	r3
                                                          req->wLength);

          USBD_CtlSendData (pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 80070b6:	6939      	ldr	r1, [r7, #16]
 80070b8:	683b      	ldr	r3, [r7, #0]
 80070ba:	88db      	ldrh	r3, [r3, #6]
 80070bc:	461a      	mov	r2, r3
 80070be:	6878      	ldr	r0, [r7, #4]
 80070c0:	f001 f99c 	bl	80083fc <USBD_CtlSendData>
    else
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                        (uint8_t *)(void *)req, 0U);
    }
    break;
 80070c4:	e068      	b.n	8007198 <USBD_CDC_Setup+0x136>
        hcdc->CmdOpCode = req->bRequest;
 80070c6:	683b      	ldr	r3, [r7, #0]
 80070c8:	785a      	ldrb	r2, [r3, #1]
 80070ca:	693b      	ldr	r3, [r7, #16]
 80070cc:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
        hcdc->CmdLength = (uint8_t)req->wLength;
 80070d0:	683b      	ldr	r3, [r7, #0]
 80070d2:	88db      	ldrh	r3, [r3, #6]
 80070d4:	b2da      	uxtb	r2, r3
 80070d6:	693b      	ldr	r3, [r7, #16]
 80070d8:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
        USBD_CtlPrepareRx (pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 80070dc:	6939      	ldr	r1, [r7, #16]
 80070de:	683b      	ldr	r3, [r7, #0]
 80070e0:	88db      	ldrh	r3, [r3, #6]
 80070e2:	461a      	mov	r2, r3
 80070e4:	6878      	ldr	r0, [r7, #4]
 80070e6:	f001 f9b7 	bl	8008458 <USBD_CtlPrepareRx>
    break;
 80070ea:	e055      	b.n	8007198 <USBD_CDC_Setup+0x136>
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80070f2:	689b      	ldr	r3, [r3, #8]
 80070f4:	683a      	ldr	r2, [r7, #0]
 80070f6:	7850      	ldrb	r0, [r2, #1]
 80070f8:	2200      	movs	r2, #0
 80070fa:	6839      	ldr	r1, [r7, #0]
 80070fc:	4798      	blx	r3
    break;
 80070fe:	e04b      	b.n	8007198 <USBD_CDC_Setup+0x136>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8007100:	683b      	ldr	r3, [r7, #0]
 8007102:	785b      	ldrb	r3, [r3, #1]
 8007104:	2b0a      	cmp	r3, #10
 8007106:	d017      	beq.n	8007138 <USBD_CDC_Setup+0xd6>
 8007108:	2b0b      	cmp	r3, #11
 800710a:	d029      	beq.n	8007160 <USBD_CDC_Setup+0xfe>
 800710c:	2b00      	cmp	r3, #0
 800710e:	d133      	bne.n	8007178 <USBD_CDC_Setup+0x116>
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8007116:	2b03      	cmp	r3, #3
 8007118:	d107      	bne.n	800712a <USBD_CDC_Setup+0xc8>
      {
        USBD_CtlSendData (pdev, (uint8_t *)(void *)&status_info, 2U);
 800711a:	f107 030c 	add.w	r3, r7, #12
 800711e:	2202      	movs	r2, #2
 8007120:	4619      	mov	r1, r3
 8007122:	6878      	ldr	r0, [r7, #4]
 8007124:	f001 f96a 	bl	80083fc <USBD_CtlSendData>
      else
      {
        USBD_CtlError (pdev, req);
			  ret = USBD_FAIL;
      }
      break;
 8007128:	e02e      	b.n	8007188 <USBD_CDC_Setup+0x126>
        USBD_CtlError (pdev, req);
 800712a:	6839      	ldr	r1, [r7, #0]
 800712c:	6878      	ldr	r0, [r7, #4]
 800712e:	f001 f8fa 	bl	8008326 <USBD_CtlError>
			  ret = USBD_FAIL;
 8007132:	2302      	movs	r3, #2
 8007134:	75fb      	strb	r3, [r7, #23]
      break;
 8007136:	e027      	b.n	8007188 <USBD_CDC_Setup+0x126>

    case USB_REQ_GET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800713e:	2b03      	cmp	r3, #3
 8007140:	d107      	bne.n	8007152 <USBD_CDC_Setup+0xf0>
      {
        USBD_CtlSendData (pdev, &ifalt, 1U);
 8007142:	f107 030f 	add.w	r3, r7, #15
 8007146:	2201      	movs	r2, #1
 8007148:	4619      	mov	r1, r3
 800714a:	6878      	ldr	r0, [r7, #4]
 800714c:	f001 f956 	bl	80083fc <USBD_CtlSendData>
      else
      {
        USBD_CtlError (pdev, req);
			  ret = USBD_FAIL;
      }
      break;
 8007150:	e01a      	b.n	8007188 <USBD_CDC_Setup+0x126>
        USBD_CtlError (pdev, req);
 8007152:	6839      	ldr	r1, [r7, #0]
 8007154:	6878      	ldr	r0, [r7, #4]
 8007156:	f001 f8e6 	bl	8008326 <USBD_CtlError>
			  ret = USBD_FAIL;
 800715a:	2302      	movs	r3, #2
 800715c:	75fb      	strb	r3, [r7, #23]
      break;
 800715e:	e013      	b.n	8007188 <USBD_CDC_Setup+0x126>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8007166:	2b03      	cmp	r3, #3
 8007168:	d00d      	beq.n	8007186 <USBD_CDC_Setup+0x124>
      {
        USBD_CtlError (pdev, req);
 800716a:	6839      	ldr	r1, [r7, #0]
 800716c:	6878      	ldr	r0, [r7, #4]
 800716e:	f001 f8da 	bl	8008326 <USBD_CtlError>
			  ret = USBD_FAIL;
 8007172:	2302      	movs	r3, #2
 8007174:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8007176:	e006      	b.n	8007186 <USBD_CDC_Setup+0x124>

    default:
      USBD_CtlError (pdev, req);
 8007178:	6839      	ldr	r1, [r7, #0]
 800717a:	6878      	ldr	r0, [r7, #4]
 800717c:	f001 f8d3 	bl	8008326 <USBD_CtlError>
      ret = USBD_FAIL;
 8007180:	2302      	movs	r3, #2
 8007182:	75fb      	strb	r3, [r7, #23]
      break;
 8007184:	e000      	b.n	8007188 <USBD_CDC_Setup+0x126>
      break;
 8007186:	bf00      	nop
    }
    break;
 8007188:	e006      	b.n	8007198 <USBD_CDC_Setup+0x136>

  default:
    USBD_CtlError (pdev, req);
 800718a:	6839      	ldr	r1, [r7, #0]
 800718c:	6878      	ldr	r0, [r7, #4]
 800718e:	f001 f8ca 	bl	8008326 <USBD_CtlError>
    ret = USBD_FAIL;
 8007192:	2302      	movs	r3, #2
 8007194:	75fb      	strb	r3, [r7, #23]
    break;
 8007196:	bf00      	nop
  }

  return ret;
 8007198:	7dfb      	ldrb	r3, [r7, #23]
}
 800719a:	4618      	mov	r0, r3
 800719c:	3718      	adds	r7, #24
 800719e:	46bd      	mov	sp, r7
 80071a0:	bd80      	pop	{r7, pc}

080071a2 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn (USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80071a2:	b580      	push	{r7, lr}
 80071a4:	b084      	sub	sp, #16
 80071a6:	af00      	add	r7, sp, #0
 80071a8:	6078      	str	r0, [r7, #4]
 80071aa:	460b      	mov	r3, r1
 80071ac:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)pdev->pClassData;
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 80071b4:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 80071bc:	60bb      	str	r3, [r7, #8]

  if(pdev->pClassData != NULL)
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 80071c4:	2b00      	cmp	r3, #0
 80071c6:	d03a      	beq.n	800723e <USBD_CDC_DataIn+0x9c>
  {
    if((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 80071c8:	78fa      	ldrb	r2, [r7, #3]
 80071ca:	6879      	ldr	r1, [r7, #4]
 80071cc:	4613      	mov	r3, r2
 80071ce:	009b      	lsls	r3, r3, #2
 80071d0:	4413      	add	r3, r2
 80071d2:	009b      	lsls	r3, r3, #2
 80071d4:	440b      	add	r3, r1
 80071d6:	331c      	adds	r3, #28
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	2b00      	cmp	r3, #0
 80071dc:	d029      	beq.n	8007232 <USBD_CDC_DataIn+0x90>
 80071de:	78fa      	ldrb	r2, [r7, #3]
 80071e0:	6879      	ldr	r1, [r7, #4]
 80071e2:	4613      	mov	r3, r2
 80071e4:	009b      	lsls	r3, r3, #2
 80071e6:	4413      	add	r3, r2
 80071e8:	009b      	lsls	r3, r3, #2
 80071ea:	440b      	add	r3, r1
 80071ec:	331c      	adds	r3, #28
 80071ee:	681a      	ldr	r2, [r3, #0]
 80071f0:	78f9      	ldrb	r1, [r7, #3]
 80071f2:	68b8      	ldr	r0, [r7, #8]
 80071f4:	460b      	mov	r3, r1
 80071f6:	00db      	lsls	r3, r3, #3
 80071f8:	1a5b      	subs	r3, r3, r1
 80071fa:	009b      	lsls	r3, r3, #2
 80071fc:	4403      	add	r3, r0
 80071fe:	3344      	adds	r3, #68	; 0x44
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	fbb2 f1f3 	udiv	r1, r2, r3
 8007206:	fb03 f301 	mul.w	r3, r3, r1
 800720a:	1ad3      	subs	r3, r2, r3
 800720c:	2b00      	cmp	r3, #0
 800720e:	d110      	bne.n	8007232 <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 8007210:	78fa      	ldrb	r2, [r7, #3]
 8007212:	6879      	ldr	r1, [r7, #4]
 8007214:	4613      	mov	r3, r2
 8007216:	009b      	lsls	r3, r3, #2
 8007218:	4413      	add	r3, r2
 800721a:	009b      	lsls	r3, r3, #2
 800721c:	440b      	add	r3, r1
 800721e:	331c      	adds	r3, #28
 8007220:	2200      	movs	r2, #0
 8007222:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit (pdev, epnum, NULL, 0U);
 8007224:	78f9      	ldrb	r1, [r7, #3]
 8007226:	2300      	movs	r3, #0
 8007228:	2200      	movs	r2, #0
 800722a:	6878      	ldr	r0, [r7, #4]
 800722c:	f010 fbeb 	bl	8017a06 <USBD_LL_Transmit>
 8007230:	e003      	b.n	800723a <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 8007232:	68fb      	ldr	r3, [r7, #12]
 8007234:	2200      	movs	r2, #0
 8007236:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 800723a:	2300      	movs	r3, #0
 800723c:	e000      	b.n	8007240 <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 800723e:	2302      	movs	r3, #2
  }
}
 8007240:	4618      	mov	r0, r3
 8007242:	3710      	adds	r7, #16
 8007244:	46bd      	mov	sp, r7
 8007246:	bd80      	pop	{r7, pc}

08007248 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut (USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007248:	b580      	push	{r7, lr}
 800724a:	b084      	sub	sp, #16
 800724c:	af00      	add	r7, sp, #0
 800724e:	6078      	str	r0, [r7, #4]
 8007250:	460b      	mov	r3, r1
 8007252:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800725a:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize (pdev, epnum);
 800725c:	78fb      	ldrb	r3, [r7, #3]
 800725e:	4619      	mov	r1, r3
 8007260:	6878      	ldr	r0, [r7, #4]
 8007262:	f010 fc16 	bl	8017a92 <USBD_LL_GetRxDataSize>
 8007266:	4602      	mov	r2, r0
 8007268:	68fb      	ldr	r3, [r7, #12]
 800726a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if(pdev->pClassData != NULL)
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8007274:	2b00      	cmp	r3, #0
 8007276:	d00d      	beq.n	8007294 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800727e:	68db      	ldr	r3, [r3, #12]
 8007280:	68fa      	ldr	r2, [r7, #12]
 8007282:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8007286:	68fa      	ldr	r2, [r7, #12]
 8007288:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800728c:	4611      	mov	r1, r2
 800728e:	4798      	blx	r3

    return USBD_OK;
 8007290:	2300      	movs	r3, #0
 8007292:	e000      	b.n	8007296 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 8007294:	2302      	movs	r3, #2
  }
}
 8007296:	4618      	mov	r0, r3
 8007298:	3710      	adds	r7, #16
 800729a:	46bd      	mov	sp, r7
 800729c:	bd80      	pop	{r7, pc}

0800729e <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady (USBD_HandleTypeDef *pdev)
{
 800729e:	b580      	push	{r7, lr}
 80072a0:	b084      	sub	sp, #16
 80072a2:	af00      	add	r7, sp, #0
 80072a4:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 80072ac:	60fb      	str	r3, [r7, #12]

  if((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80072b4:	2b00      	cmp	r3, #0
 80072b6:	d015      	beq.n	80072e4 <USBD_CDC_EP0_RxReady+0x46>
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80072be:	2bff      	cmp	r3, #255	; 0xff
 80072c0:	d010      	beq.n	80072e4 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80072c8:	689b      	ldr	r3, [r3, #8]
 80072ca:	68fa      	ldr	r2, [r7, #12]
 80072cc:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 80072d0:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 80072d2:	68fa      	ldr	r2, [r7, #12]
 80072d4:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80072d8:	b292      	uxth	r2, r2
 80072da:	4798      	blx	r3
      hcdc->CmdOpCode = 0xFFU;
 80072dc:	68fb      	ldr	r3, [r7, #12]
 80072de:	22ff      	movs	r2, #255	; 0xff
 80072e0:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 80072e4:	2300      	movs	r3, #0
}
 80072e6:	4618      	mov	r0, r3
 80072e8:	3710      	adds	r7, #16
 80072ea:	46bd      	mov	sp, r7
 80072ec:	bd80      	pop	{r7, pc}
	...

080072f0 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc (uint16_t *length)
{
 80072f0:	b480      	push	{r7}
 80072f2:	b083      	sub	sp, #12
 80072f4:	af00      	add	r7, sp, #0
 80072f6:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_CfgFSDesc);
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	2243      	movs	r2, #67	; 0x43
 80072fc:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 80072fe:	4b03      	ldr	r3, [pc, #12]	; (800730c <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8007300:	4618      	mov	r0, r3
 8007302:	370c      	adds	r7, #12
 8007304:	46bd      	mov	sp, r7
 8007306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800730a:	4770      	bx	lr
 800730c:	20000090 	.word	0x20000090

08007310 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc (uint16_t *length)
{
 8007310:	b480      	push	{r7}
 8007312:	b083      	sub	sp, #12
 8007314:	af00      	add	r7, sp, #0
 8007316:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_CfgHSDesc);
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	2243      	movs	r2, #67	; 0x43
 800731c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 800731e:	4b03      	ldr	r3, [pc, #12]	; (800732c <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8007320:	4618      	mov	r0, r3
 8007322:	370c      	adds	r7, #12
 8007324:	46bd      	mov	sp, r7
 8007326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800732a:	4770      	bx	lr
 800732c:	2000004c 	.word	0x2000004c

08007330 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc (uint16_t *length)
{
 8007330:	b480      	push	{r7}
 8007332:	b083      	sub	sp, #12
 8007334:	af00      	add	r7, sp, #0
 8007336:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_OtherSpeedCfgDesc);
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	2243      	movs	r2, #67	; 0x43
 800733c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 800733e:	4b03      	ldr	r3, [pc, #12]	; (800734c <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8007340:	4618      	mov	r0, r3
 8007342:	370c      	adds	r7, #12
 8007344:	46bd      	mov	sp, r7
 8007346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800734a:	4770      	bx	lr
 800734c:	200000d4 	.word	0x200000d4

08007350 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor (uint16_t *length)
{
 8007350:	b480      	push	{r7}
 8007352:	b083      	sub	sp, #12
 8007354:	af00      	add	r7, sp, #0
 8007356:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_DeviceQualifierDesc);
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	220a      	movs	r2, #10
 800735c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 800735e:	4b03      	ldr	r3, [pc, #12]	; (800736c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8007360:	4618      	mov	r0, r3
 8007362:	370c      	adds	r7, #12
 8007364:	46bd      	mov	sp, r7
 8007366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800736a:	4770      	bx	lr
 800736c:	20000008 	.word	0x20000008

08007370 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface  (USBD_HandleTypeDef   *pdev,
                                      USBD_CDC_ItfTypeDef *fops)
{
 8007370:	b480      	push	{r7}
 8007372:	b085      	sub	sp, #20
 8007374:	af00      	add	r7, sp, #0
 8007376:	6078      	str	r0, [r7, #4]
 8007378:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 800737a:	2302      	movs	r3, #2
 800737c:	73fb      	strb	r3, [r7, #15]

  if(fops != NULL)
 800737e:	683b      	ldr	r3, [r7, #0]
 8007380:	2b00      	cmp	r3, #0
 8007382:	d005      	beq.n	8007390 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData= fops;
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	683a      	ldr	r2, [r7, #0]
 8007388:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
    ret = USBD_OK;
 800738c:	2300      	movs	r3, #0
 800738e:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8007390:	7bfb      	ldrb	r3, [r7, #15]
}
 8007392:	4618      	mov	r0, r3
 8007394:	3714      	adds	r7, #20
 8007396:	46bd      	mov	sp, r7
 8007398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800739c:	4770      	bx	lr

0800739e <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer  (USBD_HandleTypeDef   *pdev,
                                uint8_t  *pbuff,
                                uint16_t length)
{
 800739e:	b480      	push	{r7}
 80073a0:	b087      	sub	sp, #28
 80073a2:	af00      	add	r7, sp, #0
 80073a4:	60f8      	str	r0, [r7, #12]
 80073a6:	60b9      	str	r1, [r7, #8]
 80073a8:	4613      	mov	r3, r2
 80073aa:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 80073ac:	68fb      	ldr	r3, [r7, #12]
 80073ae:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 80073b2:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 80073b4:	697b      	ldr	r3, [r7, #20]
 80073b6:	68ba      	ldr	r2, [r7, #8]
 80073b8:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 80073bc:	88fa      	ldrh	r2, [r7, #6]
 80073be:	697b      	ldr	r3, [r7, #20]
 80073c0:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 80073c4:	2300      	movs	r3, #0
}
 80073c6:	4618      	mov	r0, r3
 80073c8:	371c      	adds	r7, #28
 80073ca:	46bd      	mov	sp, r7
 80073cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073d0:	4770      	bx	lr

080073d2 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer  (USBD_HandleTypeDef   *pdev,
                                   uint8_t  *pbuff)
{
 80073d2:	b480      	push	{r7}
 80073d4:	b085      	sub	sp, #20
 80073d6:	af00      	add	r7, sp, #0
 80073d8:	6078      	str	r0, [r7, #4]
 80073da:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 80073e2:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 80073e4:	68fb      	ldr	r3, [r7, #12]
 80073e6:	683a      	ldr	r2, [r7, #0]
 80073e8:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 80073ec:	2300      	movs	r3, #0
}
 80073ee:	4618      	mov	r0, r3
 80073f0:	3714      	adds	r7, #20
 80073f2:	46bd      	mov	sp, r7
 80073f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073f8:	4770      	bx	lr

080073fa <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80073fa:	b580      	push	{r7, lr}
 80073fc:	b084      	sub	sp, #16
 80073fe:	af00      	add	r7, sp, #0
 8007400:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8007408:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if(pdev->pClassData != NULL)
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8007410:	2b00      	cmp	r3, #0
 8007412:	d017      	beq.n	8007444 <USBD_CDC_ReceivePacket+0x4a>
  {
    if(pdev->dev_speed == USBD_SPEED_HIGH  )
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	7c1b      	ldrb	r3, [r3, #16]
 8007418:	2b00      	cmp	r3, #0
 800741a:	d109      	bne.n	8007430 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800741c:	68fb      	ldr	r3, [r7, #12]
 800741e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007422:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007426:	2101      	movs	r1, #1
 8007428:	6878      	ldr	r0, [r7, #4]
 800742a:	f010 fb0f 	bl	8017a4c <USBD_LL_PrepareReceive>
 800742e:	e007      	b.n	8007440 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8007430:	68fb      	ldr	r3, [r7, #12]
 8007432:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007436:	2340      	movs	r3, #64	; 0x40
 8007438:	2101      	movs	r1, #1
 800743a:	6878      	ldr	r0, [r7, #4]
 800743c:	f010 fb06 	bl	8017a4c <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8007440:	2300      	movs	r3, #0
 8007442:	e000      	b.n	8007446 <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 8007444:	2302      	movs	r3, #2
  }
}
 8007446:	4618      	mov	r0, r3
 8007448:	3710      	adds	r7, #16
 800744a:	46bd      	mov	sp, r7
 800744c:	bd80      	pop	{r7, pc}

0800744e <USBD_Init>:
* @param  pdesc: Descriptor structure address
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev, USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800744e:	b580      	push	{r7, lr}
 8007450:	b084      	sub	sp, #16
 8007452:	af00      	add	r7, sp, #0
 8007454:	60f8      	str	r0, [r7, #12]
 8007456:	60b9      	str	r1, [r7, #8]
 8007458:	4613      	mov	r3, r2
 800745a:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if(pdev == NULL)
 800745c:	68fb      	ldr	r3, [r7, #12]
 800745e:	2b00      	cmp	r3, #0
 8007460:	d101      	bne.n	8007466 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8007462:	2302      	movs	r3, #2
 8007464:	e01a      	b.n	800749c <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if(pdev->pClass != NULL)
 8007466:	68fb      	ldr	r3, [r7, #12]
 8007468:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800746c:	2b00      	cmp	r3, #0
 800746e:	d003      	beq.n	8007478 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8007470:	68fb      	ldr	r3, [r7, #12]
 8007472:	2200      	movs	r2, #0
 8007474:	f8c3 228c 	str.w	r2, [r3, #652]	; 0x28c
  }

  /* Assign USBD Descriptors */
  if(pdesc != NULL)
 8007478:	68bb      	ldr	r3, [r7, #8]
 800747a:	2b00      	cmp	r3, #0
 800747c:	d003      	beq.n	8007486 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 800747e:	68fb      	ldr	r3, [r7, #12]
 8007480:	68ba      	ldr	r2, [r7, #8]
 8007482:	f8c3 2288 	str.w	r2, [r3, #648]	; 0x288
  }

  /* Set Device initial State */
  pdev->dev_state  = USBD_STATE_DEFAULT;
 8007486:	68fb      	ldr	r3, [r7, #12]
 8007488:	2201      	movs	r2, #1
 800748a:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  pdev->id = id;
 800748e:	68fb      	ldr	r3, [r7, #12]
 8007490:	79fa      	ldrb	r2, [r7, #7]
 8007492:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8007494:	68f8      	ldr	r0, [r7, #12]
 8007496:	f010 f981 	bl	801779c <USBD_LL_Init>

  return USBD_OK;
 800749a:	2300      	movs	r3, #0
}
 800749c:	4618      	mov	r0, r3
 800749e:	3710      	adds	r7, #16
 80074a0:	46bd      	mov	sp, r7
 80074a2:	bd80      	pop	{r7, pc}

080074a4 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80074a4:	b480      	push	{r7}
 80074a6:	b085      	sub	sp, #20
 80074a8:	af00      	add	r7, sp, #0
 80074aa:	6078      	str	r0, [r7, #4]
 80074ac:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef   status = USBD_OK;
 80074ae:	2300      	movs	r3, #0
 80074b0:	73fb      	strb	r3, [r7, #15]
  if(pclass != 0)
 80074b2:	683b      	ldr	r3, [r7, #0]
 80074b4:	2b00      	cmp	r3, #0
 80074b6:	d006      	beq.n	80074c6 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	683a      	ldr	r2, [r7, #0]
 80074bc:	f8c3 228c 	str.w	r2, [r3, #652]	; 0x28c
    status = USBD_OK;
 80074c0:	2300      	movs	r3, #0
 80074c2:	73fb      	strb	r3, [r7, #15]
 80074c4:	e001      	b.n	80074ca <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 80074c6:	2302      	movs	r3, #2
 80074c8:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80074ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80074cc:	4618      	mov	r0, r3
 80074ce:	3714      	adds	r7, #20
 80074d0:	46bd      	mov	sp, r7
 80074d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074d6:	4770      	bx	lr

080074d8 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start  (USBD_HandleTypeDef *pdev)
{
 80074d8:	b580      	push	{r7, lr}
 80074da:	b082      	sub	sp, #8
 80074dc:	af00      	add	r7, sp, #0
 80074de:	6078      	str	r0, [r7, #4]

  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 80074e0:	6878      	ldr	r0, [r7, #4]
 80074e2:	f010 f9a7 	bl	8017834 <USBD_LL_Start>

  return USBD_OK;
 80074e6:	2300      	movs	r3, #0
}
 80074e8:	4618      	mov	r0, r3
 80074ea:	3708      	adds	r7, #8
 80074ec:	46bd      	mov	sp, r7
 80074ee:	bd80      	pop	{r7, pc}

080074f0 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode (USBD_HandleTypeDef  *pdev)
{
 80074f0:	b480      	push	{r7}
 80074f2:	b083      	sub	sp, #12
 80074f4:	af00      	add	r7, sp, #0
 80074f6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80074f8:	2300      	movs	r3, #0
}
 80074fa:	4618      	mov	r0, r3
 80074fc:	370c      	adds	r7, #12
 80074fe:	46bd      	mov	sp, r7
 8007500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007504:	4770      	bx	lr

08007506 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8007506:	b580      	push	{r7, lr}
 8007508:	b084      	sub	sp, #16
 800750a:	af00      	add	r7, sp, #0
 800750c:	6078      	str	r0, [r7, #4]
 800750e:	460b      	mov	r3, r1
 8007510:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef   ret = USBD_FAIL;
 8007512:	2302      	movs	r3, #2
 8007514:	73fb      	strb	r3, [r7, #15]

  if(pdev->pClass != NULL)
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800751c:	2b00      	cmp	r3, #0
 800751e:	d00c      	beq.n	800753a <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if(pdev->pClass->Init(pdev, cfgidx) == 0U)
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	78fa      	ldrb	r2, [r7, #3]
 800752a:	4611      	mov	r1, r2
 800752c:	6878      	ldr	r0, [r7, #4]
 800752e:	4798      	blx	r3
 8007530:	4603      	mov	r3, r0
 8007532:	2b00      	cmp	r3, #0
 8007534:	d101      	bne.n	800753a <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8007536:	2300      	movs	r3, #0
 8007538:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 800753a:	7bfb      	ldrb	r3, [r7, #15]
}
 800753c:	4618      	mov	r0, r3
 800753e:	3710      	adds	r7, #16
 8007540:	46bd      	mov	sp, r7
 8007542:	bd80      	pop	{r7, pc}

08007544 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8007544:	b580      	push	{r7, lr}
 8007546:	b082      	sub	sp, #8
 8007548:	af00      	add	r7, sp, #0
 800754a:	6078      	str	r0, [r7, #4]
 800754c:	460b      	mov	r3, r1
 800754e:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8007556:	685b      	ldr	r3, [r3, #4]
 8007558:	78fa      	ldrb	r2, [r7, #3]
 800755a:	4611      	mov	r1, r2
 800755c:	6878      	ldr	r0, [r7, #4]
 800755e:	4798      	blx	r3
  return USBD_OK;
 8007560:	2300      	movs	r3, #0
}
 8007562:	4618      	mov	r0, r3
 8007564:	3708      	adds	r7, #8
 8007566:	46bd      	mov	sp, r7
 8007568:	bd80      	pop	{r7, pc}

0800756a <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800756a:	b580      	push	{r7, lr}
 800756c:	b082      	sub	sp, #8
 800756e:	af00      	add	r7, sp, #0
 8007570:	6078      	str	r0, [r7, #4]
 8007572:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800757a:	6839      	ldr	r1, [r7, #0]
 800757c:	4618      	mov	r0, r3
 800757e:	f000 fe95 	bl	80082ac <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	2201      	movs	r2, #1
 8007586:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

  pdev->ep0_data_len = pdev->request.wLength;
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	f8b3 3286 	ldrh.w	r3, [r3, #646]	; 0x286
 8007590:	461a      	mov	r2, r3
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

  switch (pdev->request.bmRequest & 0x1FU)
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	f893 3280 	ldrb.w	r3, [r3, #640]	; 0x280
 800759e:	f003 031f 	and.w	r3, r3, #31
 80075a2:	2b01      	cmp	r3, #1
 80075a4:	d00c      	beq.n	80075c0 <USBD_LL_SetupStage+0x56>
 80075a6:	2b01      	cmp	r3, #1
 80075a8:	d302      	bcc.n	80075b0 <USBD_LL_SetupStage+0x46>
 80075aa:	2b02      	cmp	r3, #2
 80075ac:	d010      	beq.n	80075d0 <USBD_LL_SetupStage+0x66>
 80075ae:	e017      	b.n	80075e0 <USBD_LL_SetupStage+0x76>
  {
  case USB_REQ_RECIPIENT_DEVICE:
    USBD_StdDevReq (pdev, &pdev->request);
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80075b6:	4619      	mov	r1, r3
 80075b8:	6878      	ldr	r0, [r7, #4]
 80075ba:	f000 fa05 	bl	80079c8 <USBD_StdDevReq>
    break;
 80075be:	e01a      	b.n	80075f6 <USBD_LL_SetupStage+0x8c>

  case USB_REQ_RECIPIENT_INTERFACE:
    USBD_StdItfReq(pdev, &pdev->request);
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80075c6:	4619      	mov	r1, r3
 80075c8:	6878      	ldr	r0, [r7, #4]
 80075ca:	f000 fa67 	bl	8007a9c <USBD_StdItfReq>
    break;
 80075ce:	e012      	b.n	80075f6 <USBD_LL_SetupStage+0x8c>

  case USB_REQ_RECIPIENT_ENDPOINT:
    USBD_StdEPReq(pdev, &pdev->request);
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80075d6:	4619      	mov	r1, r3
 80075d8:	6878      	ldr	r0, [r7, #4]
 80075da:	f000 faa5 	bl	8007b28 <USBD_StdEPReq>
    break;
 80075de:	e00a      	b.n	80075f6 <USBD_LL_SetupStage+0x8c>

  default:
    USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	f893 3280 	ldrb.w	r3, [r3, #640]	; 0x280
 80075e6:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80075ea:	b2db      	uxtb	r3, r3
 80075ec:	4619      	mov	r1, r3
 80075ee:	6878      	ldr	r0, [r7, #4]
 80075f0:	f010 f980 	bl	80178f4 <USBD_LL_StallEP>
    break;
 80075f4:	bf00      	nop
  }

  return USBD_OK;
 80075f6:	2300      	movs	r3, #0
}
 80075f8:	4618      	mov	r0, r3
 80075fa:	3708      	adds	r7, #8
 80075fc:	46bd      	mov	sp, r7
 80075fe:	bd80      	pop	{r7, pc}

08007600 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8007600:	b580      	push	{r7, lr}
 8007602:	b086      	sub	sp, #24
 8007604:	af00      	add	r7, sp, #0
 8007606:	60f8      	str	r0, [r7, #12]
 8007608:	460b      	mov	r3, r1
 800760a:	607a      	str	r2, [r7, #4]
 800760c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef    *pep;

  if(epnum == 0U)
 800760e:	7afb      	ldrb	r3, [r7, #11]
 8007610:	2b00      	cmp	r3, #0
 8007612:	d14b      	bne.n	80076ac <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8007614:	68fb      	ldr	r3, [r7, #12]
 8007616:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 800761a:	617b      	str	r3, [r7, #20]

    if ( pdev->ep0_state == USBD_EP0_DATA_OUT)
 800761c:	68fb      	ldr	r3, [r7, #12]
 800761e:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 8007622:	2b03      	cmp	r3, #3
 8007624:	d134      	bne.n	8007690 <USBD_LL_DataOutStage+0x90>
    {
      if(pep->rem_length > pep->maxpacket)
 8007626:	697b      	ldr	r3, [r7, #20]
 8007628:	68da      	ldr	r2, [r3, #12]
 800762a:	697b      	ldr	r3, [r7, #20]
 800762c:	691b      	ldr	r3, [r3, #16]
 800762e:	429a      	cmp	r2, r3
 8007630:	d919      	bls.n	8007666 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -=  pep->maxpacket;
 8007632:	697b      	ldr	r3, [r7, #20]
 8007634:	68da      	ldr	r2, [r3, #12]
 8007636:	697b      	ldr	r3, [r7, #20]
 8007638:	691b      	ldr	r3, [r3, #16]
 800763a:	1ad2      	subs	r2, r2, r3
 800763c:	697b      	ldr	r3, [r7, #20]
 800763e:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx (pdev,
                            pdata,
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8007640:	697b      	ldr	r3, [r7, #20]
 8007642:	68da      	ldr	r2, [r3, #12]
 8007644:	697b      	ldr	r3, [r7, #20]
 8007646:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx (pdev,
 8007648:	429a      	cmp	r2, r3
 800764a:	d203      	bcs.n	8007654 <USBD_LL_DataOutStage+0x54>
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800764c:	697b      	ldr	r3, [r7, #20]
 800764e:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx (pdev,
 8007650:	b29b      	uxth	r3, r3
 8007652:	e002      	b.n	800765a <USBD_LL_DataOutStage+0x5a>
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8007654:	697b      	ldr	r3, [r7, #20]
 8007656:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx (pdev,
 8007658:	b29b      	uxth	r3, r3
 800765a:	461a      	mov	r2, r3
 800765c:	6879      	ldr	r1, [r7, #4]
 800765e:	68f8      	ldr	r0, [r7, #12]
 8007660:	f000 ff18 	bl	8008494 <USBD_CtlContinueRx>
 8007664:	e038      	b.n	80076d8 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if((pdev->pClass->EP0_RxReady != NULL)&&
 8007666:	68fb      	ldr	r3, [r7, #12]
 8007668:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800766c:	691b      	ldr	r3, [r3, #16]
 800766e:	2b00      	cmp	r3, #0
 8007670:	d00a      	beq.n	8007688 <USBD_LL_DataOutStage+0x88>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007672:	68fb      	ldr	r3, [r7, #12]
 8007674:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
        if((pdev->pClass->EP0_RxReady != NULL)&&
 8007678:	2b03      	cmp	r3, #3
 800767a:	d105      	bne.n	8007688 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 800767c:	68fb      	ldr	r3, [r7, #12]
 800767e:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8007682:	691b      	ldr	r3, [r3, #16]
 8007684:	68f8      	ldr	r0, [r7, #12]
 8007686:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8007688:	68f8      	ldr	r0, [r7, #12]
 800768a:	f000 ff15 	bl	80084b8 <USBD_CtlSendStatus>
 800768e:	e023      	b.n	80076d8 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8007690:	68fb      	ldr	r3, [r7, #12]
 8007692:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 8007696:	2b05      	cmp	r3, #5
 8007698:	d11e      	bne.n	80076d8 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 800769a:	68fb      	ldr	r3, [r7, #12]
 800769c:	2200      	movs	r2, #0
 800769e:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
        USBD_LL_StallEP(pdev, 0U);
 80076a2:	2100      	movs	r1, #0
 80076a4:	68f8      	ldr	r0, [r7, #12]
 80076a6:	f010 f925 	bl	80178f4 <USBD_LL_StallEP>
 80076aa:	e015      	b.n	80076d8 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if((pdev->pClass->DataOut != NULL) &&
 80076ac:	68fb      	ldr	r3, [r7, #12]
 80076ae:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80076b2:	699b      	ldr	r3, [r3, #24]
 80076b4:	2b00      	cmp	r3, #0
 80076b6:	d00d      	beq.n	80076d4 <USBD_LL_DataOutStage+0xd4>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
 80076b8:	68fb      	ldr	r3, [r7, #12]
 80076ba:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
  else if((pdev->pClass->DataOut != NULL) &&
 80076be:	2b03      	cmp	r3, #3
 80076c0:	d108      	bne.n	80076d4 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 80076c2:	68fb      	ldr	r3, [r7, #12]
 80076c4:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80076c8:	699b      	ldr	r3, [r3, #24]
 80076ca:	7afa      	ldrb	r2, [r7, #11]
 80076cc:	4611      	mov	r1, r2
 80076ce:	68f8      	ldr	r0, [r7, #12]
 80076d0:	4798      	blx	r3
 80076d2:	e001      	b.n	80076d8 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80076d4:	2302      	movs	r3, #2
 80076d6:	e000      	b.n	80076da <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 80076d8:	2300      	movs	r3, #0
}
 80076da:	4618      	mov	r0, r3
 80076dc:	3718      	adds	r7, #24
 80076de:	46bd      	mov	sp, r7
 80076e0:	bd80      	pop	{r7, pc}

080076e2 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev, uint8_t epnum,
                                       uint8_t *pdata)
{
 80076e2:	b580      	push	{r7, lr}
 80076e4:	b086      	sub	sp, #24
 80076e6:	af00      	add	r7, sp, #0
 80076e8:	60f8      	str	r0, [r7, #12]
 80076ea:	460b      	mov	r3, r1
 80076ec:	607a      	str	r2, [r7, #4]
 80076ee:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if(epnum == 0U)
 80076f0:	7afb      	ldrb	r3, [r7, #11]
 80076f2:	2b00      	cmp	r3, #0
 80076f4:	d17f      	bne.n	80077f6 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 80076f6:	68fb      	ldr	r3, [r7, #12]
 80076f8:	3314      	adds	r3, #20
 80076fa:	617b      	str	r3, [r7, #20]

    if ( pdev->ep0_state == USBD_EP0_DATA_IN)
 80076fc:	68fb      	ldr	r3, [r7, #12]
 80076fe:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 8007702:	2b02      	cmp	r3, #2
 8007704:	d15c      	bne.n	80077c0 <USBD_LL_DataInStage+0xde>
    {
      if(pep->rem_length > pep->maxpacket)
 8007706:	697b      	ldr	r3, [r7, #20]
 8007708:	68da      	ldr	r2, [r3, #12]
 800770a:	697b      	ldr	r3, [r7, #20]
 800770c:	691b      	ldr	r3, [r3, #16]
 800770e:	429a      	cmp	r2, r3
 8007710:	d915      	bls.n	800773e <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8007712:	697b      	ldr	r3, [r7, #20]
 8007714:	68da      	ldr	r2, [r3, #12]
 8007716:	697b      	ldr	r3, [r7, #20]
 8007718:	691b      	ldr	r3, [r3, #16]
 800771a:	1ad2      	subs	r2, r2, r3
 800771c:	697b      	ldr	r3, [r7, #20]
 800771e:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData (pdev, pdata, (uint16_t)pep->rem_length);
 8007720:	697b      	ldr	r3, [r7, #20]
 8007722:	68db      	ldr	r3, [r3, #12]
 8007724:	b29b      	uxth	r3, r3
 8007726:	461a      	mov	r2, r3
 8007728:	6879      	ldr	r1, [r7, #4]
 800772a:	68f8      	ldr	r0, [r7, #12]
 800772c:	f000 fe82 	bl	8008434 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 8007730:	2300      	movs	r3, #0
 8007732:	2200      	movs	r2, #0
 8007734:	2100      	movs	r1, #0
 8007736:	68f8      	ldr	r0, [r7, #12]
 8007738:	f010 f988 	bl	8017a4c <USBD_LL_PrepareReceive>
 800773c:	e04e      	b.n	80077dc <USBD_LL_DataInStage+0xfa>
      }
      else
      { /* last packet is MPS multiple, so send ZLP packet */
        if((pep->total_length % pep->maxpacket == 0U) &&
 800773e:	697b      	ldr	r3, [r7, #20]
 8007740:	689b      	ldr	r3, [r3, #8]
 8007742:	697a      	ldr	r2, [r7, #20]
 8007744:	6912      	ldr	r2, [r2, #16]
 8007746:	fbb3 f1f2 	udiv	r1, r3, r2
 800774a:	fb02 f201 	mul.w	r2, r2, r1
 800774e:	1a9b      	subs	r3, r3, r2
 8007750:	2b00      	cmp	r3, #0
 8007752:	d11c      	bne.n	800778e <USBD_LL_DataInStage+0xac>
           (pep->total_length >= pep->maxpacket) &&
 8007754:	697b      	ldr	r3, [r7, #20]
 8007756:	689a      	ldr	r2, [r3, #8]
 8007758:	697b      	ldr	r3, [r7, #20]
 800775a:	691b      	ldr	r3, [r3, #16]
        if((pep->total_length % pep->maxpacket == 0U) &&
 800775c:	429a      	cmp	r2, r3
 800775e:	d316      	bcc.n	800778e <USBD_LL_DataInStage+0xac>
           (pep->total_length < pdev->ep0_data_len))
 8007760:	697b      	ldr	r3, [r7, #20]
 8007762:	689a      	ldr	r2, [r3, #8]
 8007764:	68fb      	ldr	r3, [r7, #12]
 8007766:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
           (pep->total_length >= pep->maxpacket) &&
 800776a:	429a      	cmp	r2, r3
 800776c:	d20f      	bcs.n	800778e <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 800776e:	2200      	movs	r2, #0
 8007770:	2100      	movs	r1, #0
 8007772:	68f8      	ldr	r0, [r7, #12]
 8007774:	f000 fe5e 	bl	8008434 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8007778:	68fb      	ldr	r3, [r7, #12]
 800777a:	2200      	movs	r2, #0
 800777c:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 8007780:	2300      	movs	r3, #0
 8007782:	2200      	movs	r2, #0
 8007784:	2100      	movs	r1, #0
 8007786:	68f8      	ldr	r0, [r7, #12]
 8007788:	f010 f960 	bl	8017a4c <USBD_LL_PrepareReceive>
 800778c:	e026      	b.n	80077dc <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if((pdev->pClass->EP0_TxSent != NULL)&&
 800778e:	68fb      	ldr	r3, [r7, #12]
 8007790:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8007794:	68db      	ldr	r3, [r3, #12]
 8007796:	2b00      	cmp	r3, #0
 8007798:	d00a      	beq.n	80077b0 <USBD_LL_DataInStage+0xce>
             (pdev->dev_state == USBD_STATE_CONFIGURED))
 800779a:	68fb      	ldr	r3, [r7, #12]
 800779c:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
          if((pdev->pClass->EP0_TxSent != NULL)&&
 80077a0:	2b03      	cmp	r3, #3
 80077a2:	d105      	bne.n	80077b0 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 80077a4:	68fb      	ldr	r3, [r7, #12]
 80077a6:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80077aa:	68db      	ldr	r3, [r3, #12]
 80077ac:	68f8      	ldr	r0, [r7, #12]
 80077ae:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 80077b0:	2180      	movs	r1, #128	; 0x80
 80077b2:	68f8      	ldr	r0, [r7, #12]
 80077b4:	f010 f89e 	bl	80178f4 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 80077b8:	68f8      	ldr	r0, [r7, #12]
 80077ba:	f000 fe90 	bl	80084de <USBD_CtlReceiveStatus>
 80077be:	e00d      	b.n	80077dc <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80077c0:	68fb      	ldr	r3, [r7, #12]
 80077c2:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 80077c6:	2b04      	cmp	r3, #4
 80077c8:	d004      	beq.n	80077d4 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 80077ca:	68fb      	ldr	r3, [r7, #12]
 80077cc:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80077d0:	2b00      	cmp	r3, #0
 80077d2:	d103      	bne.n	80077dc <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 80077d4:	2180      	movs	r1, #128	; 0x80
 80077d6:	68f8      	ldr	r0, [r7, #12]
 80077d8:	f010 f88c 	bl	80178f4 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 80077dc:	68fb      	ldr	r3, [r7, #12]
 80077de:	f893 3278 	ldrb.w	r3, [r3, #632]	; 0x278
 80077e2:	2b01      	cmp	r3, #1
 80077e4:	d11d      	bne.n	8007822 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 80077e6:	68f8      	ldr	r0, [r7, #12]
 80077e8:	f7ff fe82 	bl	80074f0 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80077ec:	68fb      	ldr	r3, [r7, #12]
 80077ee:	2200      	movs	r2, #0
 80077f0:	f883 2278 	strb.w	r2, [r3, #632]	; 0x278
 80077f4:	e015      	b.n	8007822 <USBD_LL_DataInStage+0x140>
    }
  }
  else if((pdev->pClass->DataIn != NULL) &&
 80077f6:	68fb      	ldr	r3, [r7, #12]
 80077f8:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80077fc:	695b      	ldr	r3, [r3, #20]
 80077fe:	2b00      	cmp	r3, #0
 8007800:	d00d      	beq.n	800781e <USBD_LL_DataInStage+0x13c>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007802:	68fb      	ldr	r3, [r7, #12]
 8007804:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
  else if((pdev->pClass->DataIn != NULL) &&
 8007808:	2b03      	cmp	r3, #3
 800780a:	d108      	bne.n	800781e <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 800780c:	68fb      	ldr	r3, [r7, #12]
 800780e:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8007812:	695b      	ldr	r3, [r3, #20]
 8007814:	7afa      	ldrb	r2, [r7, #11]
 8007816:	4611      	mov	r1, r2
 8007818:	68f8      	ldr	r0, [r7, #12]
 800781a:	4798      	blx	r3
 800781c:	e001      	b.n	8007822 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800781e:	2302      	movs	r3, #2
 8007820:	e000      	b.n	8007824 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8007822:	2300      	movs	r3, #0
}
 8007824:	4618      	mov	r0, r3
 8007826:	3718      	adds	r7, #24
 8007828:	46bd      	mov	sp, r7
 800782a:	bd80      	pop	{r7, pc}

0800782c <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef  *pdev)
{
 800782c:	b580      	push	{r7, lr}
 800782e:	b082      	sub	sp, #8
 8007830:	af00      	add	r7, sp, #0
 8007832:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007834:	2340      	movs	r3, #64	; 0x40
 8007836:	2200      	movs	r2, #0
 8007838:	2100      	movs	r1, #0
 800783a:	6878      	ldr	r0, [r7, #4]
 800783c:	f010 f815 	bl	801786a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	2201      	movs	r2, #1
 8007844:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	2240      	movs	r2, #64	; 0x40
 800784c:	f8c3 2150 	str.w	r2, [r3, #336]	; 0x150

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007850:	2340      	movs	r3, #64	; 0x40
 8007852:	2200      	movs	r2, #0
 8007854:	2180      	movs	r1, #128	; 0x80
 8007856:	6878      	ldr	r0, [r7, #4]
 8007858:	f010 f807 	bl	801786a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	2201      	movs	r2, #1
 8007860:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	2240      	movs	r2, #64	; 0x40
 8007866:	625a      	str	r2, [r3, #36]	; 0x24
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	2201      	movs	r2, #1
 800786c:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  pdev->ep0_state = USBD_EP0_IDLE;
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	2200      	movs	r2, #0
 8007874:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  pdev->dev_config= 0U;
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	2200      	movs	r2, #0
 800787c:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	2200      	movs	r2, #0
 8007882:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c

  if (pdev->pClassData)
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800788c:	2b00      	cmp	r3, #0
 800788e:	d009      	beq.n	80078a4 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8007896:	685b      	ldr	r3, [r3, #4]
 8007898:	687a      	ldr	r2, [r7, #4]
 800789a:	6852      	ldr	r2, [r2, #4]
 800789c:	b2d2      	uxtb	r2, r2
 800789e:	4611      	mov	r1, r2
 80078a0:	6878      	ldr	r0, [r7, #4]
 80078a2:	4798      	blx	r3
  }

  return USBD_OK;
 80078a4:	2300      	movs	r3, #0
}
 80078a6:	4618      	mov	r0, r3
 80078a8:	3708      	adds	r7, #8
 80078aa:	46bd      	mov	sp, r7
 80078ac:	bd80      	pop	{r7, pc}

080078ae <USBD_LL_SetSpeed>:
*         Handle Reset event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef  *pdev, USBD_SpeedTypeDef speed)
{
 80078ae:	b480      	push	{r7}
 80078b0:	b083      	sub	sp, #12
 80078b2:	af00      	add	r7, sp, #0
 80078b4:	6078      	str	r0, [r7, #4]
 80078b6:	460b      	mov	r3, r1
 80078b8:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	78fa      	ldrb	r2, [r7, #3]
 80078be:	741a      	strb	r2, [r3, #16]
  return USBD_OK;
 80078c0:	2300      	movs	r3, #0
}
 80078c2:	4618      	mov	r0, r3
 80078c4:	370c      	adds	r7, #12
 80078c6:	46bd      	mov	sp, r7
 80078c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078cc:	4770      	bx	lr

080078ce <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef  *pdev)
{
 80078ce:	b480      	push	{r7}
 80078d0:	b083      	sub	sp, #12
 80078d2:	af00      	add	r7, sp, #0
 80078d4:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	f893 2274 	ldrb.w	r2, [r3, #628]	; 0x274
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	f883 2275 	strb.w	r2, [r3, #629]	; 0x275
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	2204      	movs	r2, #4
 80078e6:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  return USBD_OK;
 80078ea:	2300      	movs	r3, #0
}
 80078ec:	4618      	mov	r0, r3
 80078ee:	370c      	adds	r7, #12
 80078f0:	46bd      	mov	sp, r7
 80078f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078f6:	4770      	bx	lr

080078f8 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef  *pdev)
{
 80078f8:	b480      	push	{r7}
 80078fa:	b083      	sub	sp, #12
 80078fc:	af00      	add	r7, sp, #0
 80078fe:	6078      	str	r0, [r7, #4]
  pdev->dev_state = pdev->dev_old_state;
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	f893 2275 	ldrb.w	r2, [r3, #629]	; 0x275
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  return USBD_OK;
 800790c:	2300      	movs	r3, #0
}
 800790e:	4618      	mov	r0, r3
 8007910:	370c      	adds	r7, #12
 8007912:	46bd      	mov	sp, r7
 8007914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007918:	4770      	bx	lr

0800791a <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef  *pdev)
{
 800791a:	b580      	push	{r7, lr}
 800791c:	b082      	sub	sp, #8
 800791e:	af00      	add	r7, sp, #0
 8007920:	6078      	str	r0, [r7, #4]
  if(pdev->dev_state == USBD_STATE_CONFIGURED)
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8007928:	2b03      	cmp	r3, #3
 800792a:	d10b      	bne.n	8007944 <USBD_LL_SOF+0x2a>
  {
    if(pdev->pClass->SOF != NULL)
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8007932:	69db      	ldr	r3, [r3, #28]
 8007934:	2b00      	cmp	r3, #0
 8007936:	d005      	beq.n	8007944 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800793e:	69db      	ldr	r3, [r3, #28]
 8007940:	6878      	ldr	r0, [r7, #4]
 8007942:	4798      	blx	r3
    }
  }
  return USBD_OK;
 8007944:	2300      	movs	r3, #0
}
 8007946:	4618      	mov	r0, r3
 8007948:	3708      	adds	r7, #8
 800794a:	46bd      	mov	sp, r7
 800794c:	bd80      	pop	{r7, pc}

0800794e <USBD_LL_IsoINIncomplete>:
*         Handle iso in incomplete event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef  *pdev, uint8_t epnum)
{
 800794e:	b480      	push	{r7}
 8007950:	b083      	sub	sp, #12
 8007952:	af00      	add	r7, sp, #0
 8007954:	6078      	str	r0, [r7, #4]
 8007956:	460b      	mov	r3, r1
 8007958:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 800795a:	2300      	movs	r3, #0
}
 800795c:	4618      	mov	r0, r3
 800795e:	370c      	adds	r7, #12
 8007960:	46bd      	mov	sp, r7
 8007962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007966:	4770      	bx	lr

08007968 <USBD_LL_IsoOUTIncomplete>:
*         Handle iso out incomplete event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef  *pdev, uint8_t epnum)
{
 8007968:	b480      	push	{r7}
 800796a:	b083      	sub	sp, #12
 800796c:	af00      	add	r7, sp, #0
 800796e:	6078      	str	r0, [r7, #4]
 8007970:	460b      	mov	r3, r1
 8007972:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 8007974:	2300      	movs	r3, #0
}
 8007976:	4618      	mov	r0, r3
 8007978:	370c      	adds	r7, #12
 800797a:	46bd      	mov	sp, r7
 800797c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007980:	4770      	bx	lr

08007982 <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef  *pdev)
{
 8007982:	b480      	push	{r7}
 8007984:	b083      	sub	sp, #12
 8007986:	af00      	add	r7, sp, #0
 8007988:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800798a:	2300      	movs	r3, #0
}
 800798c:	4618      	mov	r0, r3
 800798e:	370c      	adds	r7, #12
 8007990:	46bd      	mov	sp, r7
 8007992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007996:	4770      	bx	lr

08007998 <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef  *pdev)
{
 8007998:	b580      	push	{r7, lr}
 800799a:	b082      	sub	sp, #8
 800799c:	af00      	add	r7, sp, #0
 800799e:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	2201      	movs	r2, #1
 80079a4:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80079ae:	685b      	ldr	r3, [r3, #4]
 80079b0:	687a      	ldr	r2, [r7, #4]
 80079b2:	6852      	ldr	r2, [r2, #4]
 80079b4:	b2d2      	uxtb	r2, r2
 80079b6:	4611      	mov	r1, r2
 80079b8:	6878      	ldr	r0, [r7, #4]
 80079ba:	4798      	blx	r3

  return USBD_OK;
 80079bc:	2300      	movs	r3, #0
}
 80079be:	4618      	mov	r0, r3
 80079c0:	3708      	adds	r7, #8
 80079c2:	46bd      	mov	sp, r7
 80079c4:	bd80      	pop	{r7, pc}
	...

080079c8 <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 80079c8:	b580      	push	{r7, lr}
 80079ca:	b084      	sub	sp, #16
 80079cc:	af00      	add	r7, sp, #0
 80079ce:	6078      	str	r0, [r7, #4]
 80079d0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80079d2:	2300      	movs	r3, #0
 80079d4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80079d6:	683b      	ldr	r3, [r7, #0]
 80079d8:	781b      	ldrb	r3, [r3, #0]
 80079da:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80079de:	2b20      	cmp	r3, #32
 80079e0:	d004      	beq.n	80079ec <USBD_StdDevReq+0x24>
 80079e2:	2b40      	cmp	r3, #64	; 0x40
 80079e4:	d002      	beq.n	80079ec <USBD_StdDevReq+0x24>
 80079e6:	2b00      	cmp	r3, #0
 80079e8:	d008      	beq.n	80079fc <USBD_StdDevReq+0x34>
 80079ea:	e04c      	b.n	8007a86 <USBD_StdDevReq+0xbe>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    pdev->pClass->Setup(pdev, req);
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80079f2:	689b      	ldr	r3, [r3, #8]
 80079f4:	6839      	ldr	r1, [r7, #0]
 80079f6:	6878      	ldr	r0, [r7, #4]
 80079f8:	4798      	blx	r3
    break;
 80079fa:	e049      	b.n	8007a90 <USBD_StdDevReq+0xc8>

  case USB_REQ_TYPE_STANDARD:

    switch (req->bRequest)
 80079fc:	683b      	ldr	r3, [r7, #0]
 80079fe:	785b      	ldrb	r3, [r3, #1]
 8007a00:	2b09      	cmp	r3, #9
 8007a02:	d83a      	bhi.n	8007a7a <USBD_StdDevReq+0xb2>
 8007a04:	a201      	add	r2, pc, #4	; (adr r2, 8007a0c <USBD_StdDevReq+0x44>)
 8007a06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a0a:	bf00      	nop
 8007a0c:	08007a5d 	.word	0x08007a5d
 8007a10:	08007a71 	.word	0x08007a71
 8007a14:	08007a7b 	.word	0x08007a7b
 8007a18:	08007a67 	.word	0x08007a67
 8007a1c:	08007a7b 	.word	0x08007a7b
 8007a20:	08007a3f 	.word	0x08007a3f
 8007a24:	08007a35 	.word	0x08007a35
 8007a28:	08007a7b 	.word	0x08007a7b
 8007a2c:	08007a53 	.word	0x08007a53
 8007a30:	08007a49 	.word	0x08007a49
    {
    case USB_REQ_GET_DESCRIPTOR:

      USBD_GetDescriptor (pdev, req);
 8007a34:	6839      	ldr	r1, [r7, #0]
 8007a36:	6878      	ldr	r0, [r7, #4]
 8007a38:	f000 f9d2 	bl	8007de0 <USBD_GetDescriptor>
      break;
 8007a3c:	e022      	b.n	8007a84 <USBD_StdDevReq+0xbc>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress (pdev, req);
 8007a3e:	6839      	ldr	r1, [r7, #0]
 8007a40:	6878      	ldr	r0, [r7, #4]
 8007a42:	f000 fac7 	bl	8007fd4 <USBD_SetAddress>
      break;
 8007a46:	e01d      	b.n	8007a84 <USBD_StdDevReq+0xbc>

    case USB_REQ_SET_CONFIGURATION:
      USBD_SetConfig (pdev, req);
 8007a48:	6839      	ldr	r1, [r7, #0]
 8007a4a:	6878      	ldr	r0, [r7, #4]
 8007a4c:	f000 fb04 	bl	8008058 <USBD_SetConfig>
      break;
 8007a50:	e018      	b.n	8007a84 <USBD_StdDevReq+0xbc>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig (pdev, req);
 8007a52:	6839      	ldr	r1, [r7, #0]
 8007a54:	6878      	ldr	r0, [r7, #4]
 8007a56:	f000 fb8d 	bl	8008174 <USBD_GetConfig>
      break;
 8007a5a:	e013      	b.n	8007a84 <USBD_StdDevReq+0xbc>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus (pdev, req);
 8007a5c:	6839      	ldr	r1, [r7, #0]
 8007a5e:	6878      	ldr	r0, [r7, #4]
 8007a60:	f000 fbbc 	bl	80081dc <USBD_GetStatus>
      break;
 8007a64:	e00e      	b.n	8007a84 <USBD_StdDevReq+0xbc>


    case USB_REQ_SET_FEATURE:
      USBD_SetFeature (pdev, req);
 8007a66:	6839      	ldr	r1, [r7, #0]
 8007a68:	6878      	ldr	r0, [r7, #4]
 8007a6a:	f000 fbea 	bl	8008242 <USBD_SetFeature>
      break;
 8007a6e:	e009      	b.n	8007a84 <USBD_StdDevReq+0xbc>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature (pdev, req);
 8007a70:	6839      	ldr	r1, [r7, #0]
 8007a72:	6878      	ldr	r0, [r7, #4]
 8007a74:	f000 fbf9 	bl	800826a <USBD_ClrFeature>
      break;
 8007a78:	e004      	b.n	8007a84 <USBD_StdDevReq+0xbc>

    default:
      USBD_CtlError(pdev, req);
 8007a7a:	6839      	ldr	r1, [r7, #0]
 8007a7c:	6878      	ldr	r0, [r7, #4]
 8007a7e:	f000 fc52 	bl	8008326 <USBD_CtlError>
      break;
 8007a82:	bf00      	nop
    }
    break;
 8007a84:	e004      	b.n	8007a90 <USBD_StdDevReq+0xc8>

  default:
    USBD_CtlError(pdev, req);
 8007a86:	6839      	ldr	r1, [r7, #0]
 8007a88:	6878      	ldr	r0, [r7, #4]
 8007a8a:	f000 fc4c 	bl	8008326 <USBD_CtlError>
    break;
 8007a8e:	bf00      	nop
  }

  return ret;
 8007a90:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a92:	4618      	mov	r0, r3
 8007a94:	3710      	adds	r7, #16
 8007a96:	46bd      	mov	sp, r7
 8007a98:	bd80      	pop	{r7, pc}
 8007a9a:	bf00      	nop

08007a9c <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 8007a9c:	b580      	push	{r7, lr}
 8007a9e:	b084      	sub	sp, #16
 8007aa0:	af00      	add	r7, sp, #0
 8007aa2:	6078      	str	r0, [r7, #4]
 8007aa4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007aa6:	2300      	movs	r3, #0
 8007aa8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007aaa:	683b      	ldr	r3, [r7, #0]
 8007aac:	781b      	ldrb	r3, [r3, #0]
 8007aae:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007ab2:	2b20      	cmp	r3, #32
 8007ab4:	d003      	beq.n	8007abe <USBD_StdItfReq+0x22>
 8007ab6:	2b40      	cmp	r3, #64	; 0x40
 8007ab8:	d001      	beq.n	8007abe <USBD_StdItfReq+0x22>
 8007aba:	2b00      	cmp	r3, #0
 8007abc:	d12a      	bne.n	8007b14 <USBD_StdItfReq+0x78>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8007ac4:	3b01      	subs	r3, #1
 8007ac6:	2b02      	cmp	r3, #2
 8007ac8:	d81d      	bhi.n	8007b06 <USBD_StdItfReq+0x6a>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8007aca:	683b      	ldr	r3, [r7, #0]
 8007acc:	889b      	ldrh	r3, [r3, #4]
 8007ace:	b2db      	uxtb	r3, r3
 8007ad0:	2b01      	cmp	r3, #1
 8007ad2:	d813      	bhi.n	8007afc <USBD_StdItfReq+0x60>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup (pdev, req);
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8007ada:	689b      	ldr	r3, [r3, #8]
 8007adc:	6839      	ldr	r1, [r7, #0]
 8007ade:	6878      	ldr	r0, [r7, #4]
 8007ae0:	4798      	blx	r3
 8007ae2:	4603      	mov	r3, r0
 8007ae4:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 8007ae6:	683b      	ldr	r3, [r7, #0]
 8007ae8:	88db      	ldrh	r3, [r3, #6]
 8007aea:	2b00      	cmp	r3, #0
 8007aec:	d110      	bne.n	8007b10 <USBD_StdItfReq+0x74>
 8007aee:	7bfb      	ldrb	r3, [r7, #15]
 8007af0:	2b00      	cmp	r3, #0
 8007af2:	d10d      	bne.n	8007b10 <USBD_StdItfReq+0x74>
        {
          USBD_CtlSendStatus(pdev);
 8007af4:	6878      	ldr	r0, [r7, #4]
 8007af6:	f000 fcdf 	bl	80084b8 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 8007afa:	e009      	b.n	8007b10 <USBD_StdItfReq+0x74>
        USBD_CtlError(pdev, req);
 8007afc:	6839      	ldr	r1, [r7, #0]
 8007afe:	6878      	ldr	r0, [r7, #4]
 8007b00:	f000 fc11 	bl	8008326 <USBD_CtlError>
      break;
 8007b04:	e004      	b.n	8007b10 <USBD_StdItfReq+0x74>

    default:
      USBD_CtlError(pdev, req);
 8007b06:	6839      	ldr	r1, [r7, #0]
 8007b08:	6878      	ldr	r0, [r7, #4]
 8007b0a:	f000 fc0c 	bl	8008326 <USBD_CtlError>
      break;
 8007b0e:	e000      	b.n	8007b12 <USBD_StdItfReq+0x76>
      break;
 8007b10:	bf00      	nop
    }
    break;
 8007b12:	e004      	b.n	8007b1e <USBD_StdItfReq+0x82>

  default:
    USBD_CtlError(pdev, req);
 8007b14:	6839      	ldr	r1, [r7, #0]
 8007b16:	6878      	ldr	r0, [r7, #4]
 8007b18:	f000 fc05 	bl	8008326 <USBD_CtlError>
    break;
 8007b1c:	bf00      	nop
  }

  return USBD_OK;
 8007b1e:	2300      	movs	r3, #0
}
 8007b20:	4618      	mov	r0, r3
 8007b22:	3710      	adds	r7, #16
 8007b24:	46bd      	mov	sp, r7
 8007b26:	bd80      	pop	{r7, pc}

08007b28 <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 8007b28:	b580      	push	{r7, lr}
 8007b2a:	b084      	sub	sp, #16
 8007b2c:	af00      	add	r7, sp, #0
 8007b2e:	6078      	str	r0, [r7, #4]
 8007b30:	6039      	str	r1, [r7, #0]

  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8007b32:	2300      	movs	r3, #0
 8007b34:	73fb      	strb	r3, [r7, #15]
  USBD_EndpointTypeDef   *pep;
  ep_addr  = LOBYTE(req->wIndex);
 8007b36:	683b      	ldr	r3, [r7, #0]
 8007b38:	889b      	ldrh	r3, [r3, #4]
 8007b3a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007b3c:	683b      	ldr	r3, [r7, #0]
 8007b3e:	781b      	ldrb	r3, [r3, #0]
 8007b40:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007b44:	2b20      	cmp	r3, #32
 8007b46:	d004      	beq.n	8007b52 <USBD_StdEPReq+0x2a>
 8007b48:	2b40      	cmp	r3, #64	; 0x40
 8007b4a:	d002      	beq.n	8007b52 <USBD_StdEPReq+0x2a>
 8007b4c:	2b00      	cmp	r3, #0
 8007b4e:	d008      	beq.n	8007b62 <USBD_StdEPReq+0x3a>
 8007b50:	e13b      	b.n	8007dca <USBD_StdEPReq+0x2a2>
  {

  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    pdev->pClass->Setup (pdev, req);
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8007b58:	689b      	ldr	r3, [r3, #8]
 8007b5a:	6839      	ldr	r1, [r7, #0]
 8007b5c:	6878      	ldr	r0, [r7, #4]
 8007b5e:	4798      	blx	r3
    break;
 8007b60:	e138      	b.n	8007dd4 <USBD_StdEPReq+0x2ac>

  case USB_REQ_TYPE_STANDARD:
    /* Check if it is a class request */
    if ((req->bmRequest & 0x60U) == 0x20U)
 8007b62:	683b      	ldr	r3, [r7, #0]
 8007b64:	781b      	ldrb	r3, [r3, #0]
 8007b66:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007b6a:	2b20      	cmp	r3, #32
 8007b6c:	d10a      	bne.n	8007b84 <USBD_StdEPReq+0x5c>
    {
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup (pdev, req);
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8007b74:	689b      	ldr	r3, [r3, #8]
 8007b76:	6839      	ldr	r1, [r7, #0]
 8007b78:	6878      	ldr	r0, [r7, #4]
 8007b7a:	4798      	blx	r3
 8007b7c:	4603      	mov	r3, r0
 8007b7e:	73fb      	strb	r3, [r7, #15]

      return ret;
 8007b80:	7bfb      	ldrb	r3, [r7, #15]
 8007b82:	e128      	b.n	8007dd6 <USBD_StdEPReq+0x2ae>
    }

    switch (req->bRequest)
 8007b84:	683b      	ldr	r3, [r7, #0]
 8007b86:	785b      	ldrb	r3, [r3, #1]
 8007b88:	2b01      	cmp	r3, #1
 8007b8a:	d03e      	beq.n	8007c0a <USBD_StdEPReq+0xe2>
 8007b8c:	2b03      	cmp	r3, #3
 8007b8e:	d002      	beq.n	8007b96 <USBD_StdEPReq+0x6e>
 8007b90:	2b00      	cmp	r3, #0
 8007b92:	d070      	beq.n	8007c76 <USBD_StdEPReq+0x14e>
 8007b94:	e113      	b.n	8007dbe <USBD_StdEPReq+0x296>
    {

    case USB_REQ_SET_FEATURE :

      switch (pdev->dev_state)
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8007b9c:	2b02      	cmp	r3, #2
 8007b9e:	d002      	beq.n	8007ba6 <USBD_StdEPReq+0x7e>
 8007ba0:	2b03      	cmp	r3, #3
 8007ba2:	d015      	beq.n	8007bd0 <USBD_StdEPReq+0xa8>
 8007ba4:	e02b      	b.n	8007bfe <USBD_StdEPReq+0xd6>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007ba6:	7bbb      	ldrb	r3, [r7, #14]
 8007ba8:	2b00      	cmp	r3, #0
 8007baa:	d00c      	beq.n	8007bc6 <USBD_StdEPReq+0x9e>
 8007bac:	7bbb      	ldrb	r3, [r7, #14]
 8007bae:	2b80      	cmp	r3, #128	; 0x80
 8007bb0:	d009      	beq.n	8007bc6 <USBD_StdEPReq+0x9e>
        {
          USBD_LL_StallEP(pdev, ep_addr);
 8007bb2:	7bbb      	ldrb	r3, [r7, #14]
 8007bb4:	4619      	mov	r1, r3
 8007bb6:	6878      	ldr	r0, [r7, #4]
 8007bb8:	f00f fe9c 	bl	80178f4 <USBD_LL_StallEP>
          USBD_LL_StallEP(pdev, 0x80U);
 8007bbc:	2180      	movs	r1, #128	; 0x80
 8007bbe:	6878      	ldr	r0, [r7, #4]
 8007bc0:	f00f fe98 	bl	80178f4 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 8007bc4:	e020      	b.n	8007c08 <USBD_StdEPReq+0xe0>
          USBD_CtlError(pdev, req);
 8007bc6:	6839      	ldr	r1, [r7, #0]
 8007bc8:	6878      	ldr	r0, [r7, #4]
 8007bca:	f000 fbac 	bl	8008326 <USBD_CtlError>
        break;
 8007bce:	e01b      	b.n	8007c08 <USBD_StdEPReq+0xe0>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 8007bd0:	683b      	ldr	r3, [r7, #0]
 8007bd2:	885b      	ldrh	r3, [r3, #2]
 8007bd4:	2b00      	cmp	r3, #0
 8007bd6:	d10e      	bne.n	8007bf6 <USBD_StdEPReq+0xce>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8007bd8:	7bbb      	ldrb	r3, [r7, #14]
 8007bda:	2b00      	cmp	r3, #0
 8007bdc:	d00b      	beq.n	8007bf6 <USBD_StdEPReq+0xce>
 8007bde:	7bbb      	ldrb	r3, [r7, #14]
 8007be0:	2b80      	cmp	r3, #128	; 0x80
 8007be2:	d008      	beq.n	8007bf6 <USBD_StdEPReq+0xce>
 8007be4:	683b      	ldr	r3, [r7, #0]
 8007be6:	88db      	ldrh	r3, [r3, #6]
 8007be8:	2b00      	cmp	r3, #0
 8007bea:	d104      	bne.n	8007bf6 <USBD_StdEPReq+0xce>
          {
            USBD_LL_StallEP(pdev, ep_addr);
 8007bec:	7bbb      	ldrb	r3, [r7, #14]
 8007bee:	4619      	mov	r1, r3
 8007bf0:	6878      	ldr	r0, [r7, #4]
 8007bf2:	f00f fe7f 	bl	80178f4 <USBD_LL_StallEP>
          }
        }
        USBD_CtlSendStatus(pdev);
 8007bf6:	6878      	ldr	r0, [r7, #4]
 8007bf8:	f000 fc5e 	bl	80084b8 <USBD_CtlSendStatus>

        break;
 8007bfc:	e004      	b.n	8007c08 <USBD_StdEPReq+0xe0>

      default:
        USBD_CtlError(pdev, req);
 8007bfe:	6839      	ldr	r1, [r7, #0]
 8007c00:	6878      	ldr	r0, [r7, #4]
 8007c02:	f000 fb90 	bl	8008326 <USBD_CtlError>
        break;
 8007c06:	bf00      	nop
      }
      break;
 8007c08:	e0de      	b.n	8007dc8 <USBD_StdEPReq+0x2a0>

    case USB_REQ_CLEAR_FEATURE :

      switch (pdev->dev_state)
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8007c10:	2b02      	cmp	r3, #2
 8007c12:	d002      	beq.n	8007c1a <USBD_StdEPReq+0xf2>
 8007c14:	2b03      	cmp	r3, #3
 8007c16:	d015      	beq.n	8007c44 <USBD_StdEPReq+0x11c>
 8007c18:	e026      	b.n	8007c68 <USBD_StdEPReq+0x140>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007c1a:	7bbb      	ldrb	r3, [r7, #14]
 8007c1c:	2b00      	cmp	r3, #0
 8007c1e:	d00c      	beq.n	8007c3a <USBD_StdEPReq+0x112>
 8007c20:	7bbb      	ldrb	r3, [r7, #14]
 8007c22:	2b80      	cmp	r3, #128	; 0x80
 8007c24:	d009      	beq.n	8007c3a <USBD_StdEPReq+0x112>
        {
          USBD_LL_StallEP(pdev, ep_addr);
 8007c26:	7bbb      	ldrb	r3, [r7, #14]
 8007c28:	4619      	mov	r1, r3
 8007c2a:	6878      	ldr	r0, [r7, #4]
 8007c2c:	f00f fe62 	bl	80178f4 <USBD_LL_StallEP>
          USBD_LL_StallEP(pdev, 0x80U);
 8007c30:	2180      	movs	r1, #128	; 0x80
 8007c32:	6878      	ldr	r0, [r7, #4]
 8007c34:	f00f fe5e 	bl	80178f4 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 8007c38:	e01c      	b.n	8007c74 <USBD_StdEPReq+0x14c>
          USBD_CtlError(pdev, req);
 8007c3a:	6839      	ldr	r1, [r7, #0]
 8007c3c:	6878      	ldr	r0, [r7, #4]
 8007c3e:	f000 fb72 	bl	8008326 <USBD_CtlError>
        break;
 8007c42:	e017      	b.n	8007c74 <USBD_StdEPReq+0x14c>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 8007c44:	683b      	ldr	r3, [r7, #0]
 8007c46:	885b      	ldrh	r3, [r3, #2]
 8007c48:	2b00      	cmp	r3, #0
 8007c4a:	d112      	bne.n	8007c72 <USBD_StdEPReq+0x14a>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 8007c4c:	7bbb      	ldrb	r3, [r7, #14]
 8007c4e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007c52:	2b00      	cmp	r3, #0
 8007c54:	d004      	beq.n	8007c60 <USBD_StdEPReq+0x138>
          {
            USBD_LL_ClearStallEP(pdev, ep_addr);
 8007c56:	7bbb      	ldrb	r3, [r7, #14]
 8007c58:	4619      	mov	r1, r3
 8007c5a:	6878      	ldr	r0, [r7, #4]
 8007c5c:	f00f fe69 	bl	8017932 <USBD_LL_ClearStallEP>
          }
          USBD_CtlSendStatus(pdev);
 8007c60:	6878      	ldr	r0, [r7, #4]
 8007c62:	f000 fc29 	bl	80084b8 <USBD_CtlSendStatus>
        }
        break;
 8007c66:	e004      	b.n	8007c72 <USBD_StdEPReq+0x14a>

      default:
        USBD_CtlError(pdev, req);
 8007c68:	6839      	ldr	r1, [r7, #0]
 8007c6a:	6878      	ldr	r0, [r7, #4]
 8007c6c:	f000 fb5b 	bl	8008326 <USBD_CtlError>
        break;
 8007c70:	e000      	b.n	8007c74 <USBD_StdEPReq+0x14c>
        break;
 8007c72:	bf00      	nop
      }
      break;
 8007c74:	e0a8      	b.n	8007dc8 <USBD_StdEPReq+0x2a0>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8007c7c:	2b02      	cmp	r3, #2
 8007c7e:	d002      	beq.n	8007c86 <USBD_StdEPReq+0x15e>
 8007c80:	2b03      	cmp	r3, #3
 8007c82:	d031      	beq.n	8007ce8 <USBD_StdEPReq+0x1c0>
 8007c84:	e095      	b.n	8007db2 <USBD_StdEPReq+0x28a>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007c86:	7bbb      	ldrb	r3, [r7, #14]
 8007c88:	2b00      	cmp	r3, #0
 8007c8a:	d007      	beq.n	8007c9c <USBD_StdEPReq+0x174>
 8007c8c:	7bbb      	ldrb	r3, [r7, #14]
 8007c8e:	2b80      	cmp	r3, #128	; 0x80
 8007c90:	d004      	beq.n	8007c9c <USBD_StdEPReq+0x174>
        {
          USBD_CtlError(pdev, req);
 8007c92:	6839      	ldr	r1, [r7, #0]
 8007c94:	6878      	ldr	r0, [r7, #4]
 8007c96:	f000 fb46 	bl	8008326 <USBD_CtlError>
          break;
 8007c9a:	e08f      	b.n	8007dbc <USBD_StdEPReq+0x294>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 8007c9c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007ca0:	2b00      	cmp	r3, #0
 8007ca2:	da0b      	bge.n	8007cbc <USBD_StdEPReq+0x194>
 8007ca4:	7bbb      	ldrb	r3, [r7, #14]
 8007ca6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007caa:	4613      	mov	r3, r2
 8007cac:	009b      	lsls	r3, r3, #2
 8007cae:	4413      	add	r3, r2
 8007cb0:	009b      	lsls	r3, r3, #2
 8007cb2:	3310      	adds	r3, #16
 8007cb4:	687a      	ldr	r2, [r7, #4]
 8007cb6:	4413      	add	r3, r2
 8007cb8:	3304      	adds	r3, #4
 8007cba:	e00a      	b.n	8007cd2 <USBD_StdEPReq+0x1aa>
          &pdev->ep_out[ep_addr & 0x7FU];
 8007cbc:	7bbb      	ldrb	r3, [r7, #14]
 8007cbe:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 8007cc2:	4613      	mov	r3, r2
 8007cc4:	009b      	lsls	r3, r3, #2
 8007cc6:	4413      	add	r3, r2
 8007cc8:	009b      	lsls	r3, r3, #2
 8007cca:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8007cce:	687a      	ldr	r2, [r7, #4]
 8007cd0:	4413      	add	r3, r2
 8007cd2:	60bb      	str	r3, [r7, #8]

          pep->status = 0x0000U;
 8007cd4:	68bb      	ldr	r3, [r7, #8]
 8007cd6:	2200      	movs	r2, #0
 8007cd8:	601a      	str	r2, [r3, #0]

          USBD_CtlSendData (pdev, (uint8_t *)(void *)&pep->status, 2U);
 8007cda:	68bb      	ldr	r3, [r7, #8]
 8007cdc:	2202      	movs	r2, #2
 8007cde:	4619      	mov	r1, r3
 8007ce0:	6878      	ldr	r0, [r7, #4]
 8007ce2:	f000 fb8b 	bl	80083fc <USBD_CtlSendData>
          break;
 8007ce6:	e069      	b.n	8007dbc <USBD_StdEPReq+0x294>

      case USBD_STATE_CONFIGURED:
        if((ep_addr & 0x80U) == 0x80U)
 8007ce8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007cec:	2b00      	cmp	r3, #0
 8007cee:	da11      	bge.n	8007d14 <USBD_StdEPReq+0x1ec>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8007cf0:	7bbb      	ldrb	r3, [r7, #14]
 8007cf2:	f003 020f 	and.w	r2, r3, #15
 8007cf6:	6879      	ldr	r1, [r7, #4]
 8007cf8:	4613      	mov	r3, r2
 8007cfa:	009b      	lsls	r3, r3, #2
 8007cfc:	4413      	add	r3, r2
 8007cfe:	009b      	lsls	r3, r3, #2
 8007d00:	440b      	add	r3, r1
 8007d02:	3318      	adds	r3, #24
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	2b00      	cmp	r3, #0
 8007d08:	d117      	bne.n	8007d3a <USBD_StdEPReq+0x212>
          {
            USBD_CtlError(pdev, req);
 8007d0a:	6839      	ldr	r1, [r7, #0]
 8007d0c:	6878      	ldr	r0, [r7, #4]
 8007d0e:	f000 fb0a 	bl	8008326 <USBD_CtlError>
            break;
 8007d12:	e053      	b.n	8007dbc <USBD_StdEPReq+0x294>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8007d14:	7bbb      	ldrb	r3, [r7, #14]
 8007d16:	f003 020f 	and.w	r2, r3, #15
 8007d1a:	6879      	ldr	r1, [r7, #4]
 8007d1c:	4613      	mov	r3, r2
 8007d1e:	009b      	lsls	r3, r3, #2
 8007d20:	4413      	add	r3, r2
 8007d22:	009b      	lsls	r3, r3, #2
 8007d24:	440b      	add	r3, r1
 8007d26:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	2b00      	cmp	r3, #0
 8007d2e:	d104      	bne.n	8007d3a <USBD_StdEPReq+0x212>
          {
            USBD_CtlError(pdev, req);
 8007d30:	6839      	ldr	r1, [r7, #0]
 8007d32:	6878      	ldr	r0, [r7, #4]
 8007d34:	f000 faf7 	bl	8008326 <USBD_CtlError>
            break;
 8007d38:	e040      	b.n	8007dbc <USBD_StdEPReq+0x294>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 8007d3a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007d3e:	2b00      	cmp	r3, #0
 8007d40:	da0b      	bge.n	8007d5a <USBD_StdEPReq+0x232>
 8007d42:	7bbb      	ldrb	r3, [r7, #14]
 8007d44:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007d48:	4613      	mov	r3, r2
 8007d4a:	009b      	lsls	r3, r3, #2
 8007d4c:	4413      	add	r3, r2
 8007d4e:	009b      	lsls	r3, r3, #2
 8007d50:	3310      	adds	r3, #16
 8007d52:	687a      	ldr	r2, [r7, #4]
 8007d54:	4413      	add	r3, r2
 8007d56:	3304      	adds	r3, #4
 8007d58:	e00a      	b.n	8007d70 <USBD_StdEPReq+0x248>
          &pdev->ep_out[ep_addr & 0x7FU];
 8007d5a:	7bbb      	ldrb	r3, [r7, #14]
 8007d5c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 8007d60:	4613      	mov	r3, r2
 8007d62:	009b      	lsls	r3, r3, #2
 8007d64:	4413      	add	r3, r2
 8007d66:	009b      	lsls	r3, r3, #2
 8007d68:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8007d6c:	687a      	ldr	r2, [r7, #4]
 8007d6e:	4413      	add	r3, r2
 8007d70:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8007d72:	7bbb      	ldrb	r3, [r7, #14]
 8007d74:	2b00      	cmp	r3, #0
 8007d76:	d002      	beq.n	8007d7e <USBD_StdEPReq+0x256>
 8007d78:	7bbb      	ldrb	r3, [r7, #14]
 8007d7a:	2b80      	cmp	r3, #128	; 0x80
 8007d7c:	d103      	bne.n	8007d86 <USBD_StdEPReq+0x25e>
          {
            pep->status = 0x0000U;
 8007d7e:	68bb      	ldr	r3, [r7, #8]
 8007d80:	2200      	movs	r2, #0
 8007d82:	601a      	str	r2, [r3, #0]
 8007d84:	e00e      	b.n	8007da4 <USBD_StdEPReq+0x27c>
          }
          else if(USBD_LL_IsStallEP(pdev, ep_addr))
 8007d86:	7bbb      	ldrb	r3, [r7, #14]
 8007d88:	4619      	mov	r1, r3
 8007d8a:	6878      	ldr	r0, [r7, #4]
 8007d8c:	f00f fdf0 	bl	8017970 <USBD_LL_IsStallEP>
 8007d90:	4603      	mov	r3, r0
 8007d92:	2b00      	cmp	r3, #0
 8007d94:	d003      	beq.n	8007d9e <USBD_StdEPReq+0x276>
          {
            pep->status = 0x0001U;
 8007d96:	68bb      	ldr	r3, [r7, #8]
 8007d98:	2201      	movs	r2, #1
 8007d9a:	601a      	str	r2, [r3, #0]
 8007d9c:	e002      	b.n	8007da4 <USBD_StdEPReq+0x27c>
          }
          else
          {
            pep->status = 0x0000U;
 8007d9e:	68bb      	ldr	r3, [r7, #8]
 8007da0:	2200      	movs	r2, #0
 8007da2:	601a      	str	r2, [r3, #0]
          }

          USBD_CtlSendData (pdev, (uint8_t *)(void *)&pep->status, 2U);
 8007da4:	68bb      	ldr	r3, [r7, #8]
 8007da6:	2202      	movs	r2, #2
 8007da8:	4619      	mov	r1, r3
 8007daa:	6878      	ldr	r0, [r7, #4]
 8007dac:	f000 fb26 	bl	80083fc <USBD_CtlSendData>
          break;
 8007db0:	e004      	b.n	8007dbc <USBD_StdEPReq+0x294>

      default:
        USBD_CtlError(pdev, req);
 8007db2:	6839      	ldr	r1, [r7, #0]
 8007db4:	6878      	ldr	r0, [r7, #4]
 8007db6:	f000 fab6 	bl	8008326 <USBD_CtlError>
        break;
 8007dba:	bf00      	nop
      }
      break;
 8007dbc:	e004      	b.n	8007dc8 <USBD_StdEPReq+0x2a0>

    default:
      USBD_CtlError(pdev, req);
 8007dbe:	6839      	ldr	r1, [r7, #0]
 8007dc0:	6878      	ldr	r0, [r7, #4]
 8007dc2:	f000 fab0 	bl	8008326 <USBD_CtlError>
      break;
 8007dc6:	bf00      	nop
    }
    break;
 8007dc8:	e004      	b.n	8007dd4 <USBD_StdEPReq+0x2ac>

  default:
    USBD_CtlError(pdev, req);
 8007dca:	6839      	ldr	r1, [r7, #0]
 8007dcc:	6878      	ldr	r0, [r7, #4]
 8007dce:	f000 faaa 	bl	8008326 <USBD_CtlError>
    break;
 8007dd2:	bf00      	nop
  }

  return ret;
 8007dd4:	7bfb      	ldrb	r3, [r7, #15]
}
 8007dd6:	4618      	mov	r0, r3
 8007dd8:	3710      	adds	r7, #16
 8007dda:	46bd      	mov	sp, r7
 8007ddc:	bd80      	pop	{r7, pc}
	...

08007de0 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev ,
                               USBD_SetupReqTypedef *req)
{
 8007de0:	b580      	push	{r7, lr}
 8007de2:	b084      	sub	sp, #16
 8007de4:	af00      	add	r7, sp, #0
 8007de6:	6078      	str	r0, [r7, #4]
 8007de8:	6039      	str	r1, [r7, #0]
  uint16_t len;
  uint8_t *pbuf;


  switch (req->wValue >> 8)
 8007dea:	683b      	ldr	r3, [r7, #0]
 8007dec:	885b      	ldrh	r3, [r3, #2]
 8007dee:	0a1b      	lsrs	r3, r3, #8
 8007df0:	b29b      	uxth	r3, r3
 8007df2:	3b01      	subs	r3, #1
 8007df4:	2b06      	cmp	r3, #6
 8007df6:	f200 80c9 	bhi.w	8007f8c <USBD_GetDescriptor+0x1ac>
 8007dfa:	a201      	add	r2, pc, #4	; (adr r2, 8007e00 <USBD_GetDescriptor+0x20>)
 8007dfc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e00:	08007e1d 	.word	0x08007e1d
 8007e04:	08007e35 	.word	0x08007e35
 8007e08:	08007e75 	.word	0x08007e75
 8007e0c:	08007f8d 	.word	0x08007f8d
 8007e10:	08007f8d 	.word	0x08007f8d
 8007e14:	08007f39 	.word	0x08007f39
 8007e18:	08007f5f 	.word	0x08007f5f
  case USB_DESC_TYPE_BOS:
    pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
    break;
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	687a      	ldr	r2, [r7, #4]
 8007e26:	7c12      	ldrb	r2, [r2, #16]
 8007e28:	f107 010a 	add.w	r1, r7, #10
 8007e2c:	4610      	mov	r0, r2
 8007e2e:	4798      	blx	r3
 8007e30:	60f8      	str	r0, [r7, #12]
    break;
 8007e32:	e0b0      	b.n	8007f96 <USBD_GetDescriptor+0x1b6>

  case USB_DESC_TYPE_CONFIGURATION:
    if(pdev->dev_speed == USBD_SPEED_HIGH )
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	7c1b      	ldrb	r3, [r3, #16]
 8007e38:	2b00      	cmp	r3, #0
 8007e3a:	d10d      	bne.n	8007e58 <USBD_GetDescriptor+0x78>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetHSConfigDescriptor(&len);
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8007e42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e44:	f107 020a 	add.w	r2, r7, #10
 8007e48:	4610      	mov	r0, r2
 8007e4a:	4798      	blx	r3
 8007e4c:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007e4e:	68fb      	ldr	r3, [r7, #12]
 8007e50:	3301      	adds	r3, #1
 8007e52:	2202      	movs	r2, #2
 8007e54:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 8007e56:	e09e      	b.n	8007f96 <USBD_GetDescriptor+0x1b6>
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8007e5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e60:	f107 020a 	add.w	r2, r7, #10
 8007e64:	4610      	mov	r0, r2
 8007e66:	4798      	blx	r3
 8007e68:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007e6a:	68fb      	ldr	r3, [r7, #12]
 8007e6c:	3301      	adds	r3, #1
 8007e6e:	2202      	movs	r2, #2
 8007e70:	701a      	strb	r2, [r3, #0]
    break;
 8007e72:	e090      	b.n	8007f96 <USBD_GetDescriptor+0x1b6>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 8007e74:	683b      	ldr	r3, [r7, #0]
 8007e76:	885b      	ldrh	r3, [r3, #2]
 8007e78:	b2db      	uxtb	r3, r3
 8007e7a:	2b05      	cmp	r3, #5
 8007e7c:	d856      	bhi.n	8007f2c <USBD_GetDescriptor+0x14c>
 8007e7e:	a201      	add	r2, pc, #4	; (adr r2, 8007e84 <USBD_GetDescriptor+0xa4>)
 8007e80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e84:	08007e9d 	.word	0x08007e9d
 8007e88:	08007eb5 	.word	0x08007eb5
 8007e8c:	08007ecd 	.word	0x08007ecd
 8007e90:	08007ee5 	.word	0x08007ee5
 8007e94:	08007efd 	.word	0x08007efd
 8007e98:	08007f15 	.word	0x08007f15
    {
    case USBD_IDX_LANGID_STR:
     pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 8007ea2:	685b      	ldr	r3, [r3, #4]
 8007ea4:	687a      	ldr	r2, [r7, #4]
 8007ea6:	7c12      	ldrb	r2, [r2, #16]
 8007ea8:	f107 010a 	add.w	r1, r7, #10
 8007eac:	4610      	mov	r0, r2
 8007eae:	4798      	blx	r3
 8007eb0:	60f8      	str	r0, [r7, #12]
      break;
 8007eb2:	e040      	b.n	8007f36 <USBD_GetDescriptor+0x156>

    case USBD_IDX_MFC_STR:
      pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 8007eba:	689b      	ldr	r3, [r3, #8]
 8007ebc:	687a      	ldr	r2, [r7, #4]
 8007ebe:	7c12      	ldrb	r2, [r2, #16]
 8007ec0:	f107 010a 	add.w	r1, r7, #10
 8007ec4:	4610      	mov	r0, r2
 8007ec6:	4798      	blx	r3
 8007ec8:	60f8      	str	r0, [r7, #12]
      break;
 8007eca:	e034      	b.n	8007f36 <USBD_GetDescriptor+0x156>

    case USBD_IDX_PRODUCT_STR:
      pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 8007ed2:	68db      	ldr	r3, [r3, #12]
 8007ed4:	687a      	ldr	r2, [r7, #4]
 8007ed6:	7c12      	ldrb	r2, [r2, #16]
 8007ed8:	f107 010a 	add.w	r1, r7, #10
 8007edc:	4610      	mov	r0, r2
 8007ede:	4798      	blx	r3
 8007ee0:	60f8      	str	r0, [r7, #12]
      break;
 8007ee2:	e028      	b.n	8007f36 <USBD_GetDescriptor+0x156>

    case USBD_IDX_SERIAL_STR:
      pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 8007eea:	691b      	ldr	r3, [r3, #16]
 8007eec:	687a      	ldr	r2, [r7, #4]
 8007eee:	7c12      	ldrb	r2, [r2, #16]
 8007ef0:	f107 010a 	add.w	r1, r7, #10
 8007ef4:	4610      	mov	r0, r2
 8007ef6:	4798      	blx	r3
 8007ef8:	60f8      	str	r0, [r7, #12]
      break;
 8007efa:	e01c      	b.n	8007f36 <USBD_GetDescriptor+0x156>

    case USBD_IDX_CONFIG_STR:
      pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 8007f02:	695b      	ldr	r3, [r3, #20]
 8007f04:	687a      	ldr	r2, [r7, #4]
 8007f06:	7c12      	ldrb	r2, [r2, #16]
 8007f08:	f107 010a 	add.w	r1, r7, #10
 8007f0c:	4610      	mov	r0, r2
 8007f0e:	4798      	blx	r3
 8007f10:	60f8      	str	r0, [r7, #12]
      break;
 8007f12:	e010      	b.n	8007f36 <USBD_GetDescriptor+0x156>

    case USBD_IDX_INTERFACE_STR:
      pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 8007f1a:	699b      	ldr	r3, [r3, #24]
 8007f1c:	687a      	ldr	r2, [r7, #4]
 8007f1e:	7c12      	ldrb	r2, [r2, #16]
 8007f20:	f107 010a 	add.w	r1, r7, #10
 8007f24:	4610      	mov	r0, r2
 8007f26:	4798      	blx	r3
 8007f28:	60f8      	str	r0, [r7, #12]
      break;
 8007f2a:	e004      	b.n	8007f36 <USBD_GetDescriptor+0x156>
    default:
#if (USBD_SUPPORT_USER_STRING == 1U)
      pbuf = pdev->pClass->GetUsrStrDescriptor(pdev, (req->wValue) , &len);
      break;
#else
       USBD_CtlError(pdev , req);
 8007f2c:	6839      	ldr	r1, [r7, #0]
 8007f2e:	6878      	ldr	r0, [r7, #4]
 8007f30:	f000 f9f9 	bl	8008326 <USBD_CtlError>
      return;
 8007f34:	e04b      	b.n	8007fce <USBD_GetDescriptor+0x1ee>
#endif
    }
    break;
 8007f36:	e02e      	b.n	8007f96 <USBD_GetDescriptor+0x1b6>
  case USB_DESC_TYPE_DEVICE_QUALIFIER:

    if(pdev->dev_speed == USBD_SPEED_HIGH)
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	7c1b      	ldrb	r3, [r3, #16]
 8007f3c:	2b00      	cmp	r3, #0
 8007f3e:	d109      	bne.n	8007f54 <USBD_GetDescriptor+0x174>
    {
      pbuf = (uint8_t *)pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8007f46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007f48:	f107 020a 	add.w	r2, r7, #10
 8007f4c:	4610      	mov	r0, r2
 8007f4e:	4798      	blx	r3
 8007f50:	60f8      	str	r0, [r7, #12]
      break;
 8007f52:	e020      	b.n	8007f96 <USBD_GetDescriptor+0x1b6>
    }
    else
    {
      USBD_CtlError(pdev , req);
 8007f54:	6839      	ldr	r1, [r7, #0]
 8007f56:	6878      	ldr	r0, [r7, #4]
 8007f58:	f000 f9e5 	bl	8008326 <USBD_CtlError>
      return;
 8007f5c:	e037      	b.n	8007fce <USBD_GetDescriptor+0x1ee>
    }

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if(pdev->dev_speed == USBD_SPEED_HIGH  )
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	7c1b      	ldrb	r3, [r3, #16]
 8007f62:	2b00      	cmp	r3, #0
 8007f64:	d10d      	bne.n	8007f82 <USBD_GetDescriptor+0x1a2>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8007f6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f6e:	f107 020a 	add.w	r2, r7, #10
 8007f72:	4610      	mov	r0, r2
 8007f74:	4798      	blx	r3
 8007f76:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8007f78:	68fb      	ldr	r3, [r7, #12]
 8007f7a:	3301      	adds	r3, #1
 8007f7c:	2207      	movs	r2, #7
 8007f7e:	701a      	strb	r2, [r3, #0]
      break;
 8007f80:	e009      	b.n	8007f96 <USBD_GetDescriptor+0x1b6>
    }
    else
    {
      USBD_CtlError(pdev , req);
 8007f82:	6839      	ldr	r1, [r7, #0]
 8007f84:	6878      	ldr	r0, [r7, #4]
 8007f86:	f000 f9ce 	bl	8008326 <USBD_CtlError>
      return;
 8007f8a:	e020      	b.n	8007fce <USBD_GetDescriptor+0x1ee>
    }

  default:
     USBD_CtlError(pdev , req);
 8007f8c:	6839      	ldr	r1, [r7, #0]
 8007f8e:	6878      	ldr	r0, [r7, #4]
 8007f90:	f000 f9c9 	bl	8008326 <USBD_CtlError>
    return;
 8007f94:	e01b      	b.n	8007fce <USBD_GetDescriptor+0x1ee>
  }

  if((len != 0U) && (req->wLength != 0U))
 8007f96:	897b      	ldrh	r3, [r7, #10]
 8007f98:	2b00      	cmp	r3, #0
 8007f9a:	d011      	beq.n	8007fc0 <USBD_GetDescriptor+0x1e0>
 8007f9c:	683b      	ldr	r3, [r7, #0]
 8007f9e:	88db      	ldrh	r3, [r3, #6]
 8007fa0:	2b00      	cmp	r3, #0
 8007fa2:	d00d      	beq.n	8007fc0 <USBD_GetDescriptor+0x1e0>
  {

    len = MIN(len, req->wLength);
 8007fa4:	683b      	ldr	r3, [r7, #0]
 8007fa6:	88da      	ldrh	r2, [r3, #6]
 8007fa8:	897b      	ldrh	r3, [r7, #10]
 8007faa:	4293      	cmp	r3, r2
 8007fac:	bf28      	it	cs
 8007fae:	4613      	movcs	r3, r2
 8007fb0:	b29b      	uxth	r3, r3
 8007fb2:	817b      	strh	r3, [r7, #10]

    USBD_CtlSendData (pdev, pbuf, len);
 8007fb4:	897b      	ldrh	r3, [r7, #10]
 8007fb6:	461a      	mov	r2, r3
 8007fb8:	68f9      	ldr	r1, [r7, #12]
 8007fba:	6878      	ldr	r0, [r7, #4]
 8007fbc:	f000 fa1e 	bl	80083fc <USBD_CtlSendData>
  }

  if(req->wLength == 0U)
 8007fc0:	683b      	ldr	r3, [r7, #0]
 8007fc2:	88db      	ldrh	r3, [r3, #6]
 8007fc4:	2b00      	cmp	r3, #0
 8007fc6:	d102      	bne.n	8007fce <USBD_GetDescriptor+0x1ee>
  {
   USBD_CtlSendStatus(pdev);
 8007fc8:	6878      	ldr	r0, [r7, #4]
 8007fca:	f000 fa75 	bl	80084b8 <USBD_CtlSendStatus>
  }
}
 8007fce:	3710      	adds	r7, #16
 8007fd0:	46bd      	mov	sp, r7
 8007fd2:	bd80      	pop	{r7, pc}

08007fd4 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 8007fd4:	b580      	push	{r7, lr}
 8007fd6:	b084      	sub	sp, #16
 8007fd8:	af00      	add	r7, sp, #0
 8007fda:	6078      	str	r0, [r7, #4]
 8007fdc:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8007fde:	683b      	ldr	r3, [r7, #0]
 8007fe0:	889b      	ldrh	r3, [r3, #4]
 8007fe2:	2b00      	cmp	r3, #0
 8007fe4:	d130      	bne.n	8008048 <USBD_SetAddress+0x74>
 8007fe6:	683b      	ldr	r3, [r7, #0]
 8007fe8:	88db      	ldrh	r3, [r3, #6]
 8007fea:	2b00      	cmp	r3, #0
 8007fec:	d12c      	bne.n	8008048 <USBD_SetAddress+0x74>
 8007fee:	683b      	ldr	r3, [r7, #0]
 8007ff0:	885b      	ldrh	r3, [r3, #2]
 8007ff2:	2b7f      	cmp	r3, #127	; 0x7f
 8007ff4:	d828      	bhi.n	8008048 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8007ff6:	683b      	ldr	r3, [r7, #0]
 8007ff8:	885b      	ldrh	r3, [r3, #2]
 8007ffa:	b2db      	uxtb	r3, r3
 8007ffc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008000:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8008008:	2b03      	cmp	r3, #3
 800800a:	d104      	bne.n	8008016 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev , req);
 800800c:	6839      	ldr	r1, [r7, #0]
 800800e:	6878      	ldr	r0, [r7, #4]
 8008010:	f000 f989 	bl	8008326 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008014:	e01c      	b.n	8008050 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	7bfa      	ldrb	r2, [r7, #15]
 800801a:	f883 2276 	strb.w	r2, [r3, #630]	; 0x276
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 800801e:	7bfb      	ldrb	r3, [r7, #15]
 8008020:	4619      	mov	r1, r3
 8008022:	6878      	ldr	r0, [r7, #4]
 8008024:	f00f fcd0 	bl	80179c8 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8008028:	6878      	ldr	r0, [r7, #4]
 800802a:	f000 fa45 	bl	80084b8 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800802e:	7bfb      	ldrb	r3, [r7, #15]
 8008030:	2b00      	cmp	r3, #0
 8008032:	d004      	beq.n	800803e <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	2202      	movs	r2, #2
 8008038:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800803c:	e008      	b.n	8008050 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	2201      	movs	r2, #1
 8008042:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008046:	e003      	b.n	8008050 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8008048:	6839      	ldr	r1, [r7, #0]
 800804a:	6878      	ldr	r0, [r7, #4]
 800804c:	f000 f96b 	bl	8008326 <USBD_CtlError>
  }
}
 8008050:	bf00      	nop
 8008052:	3710      	adds	r7, #16
 8008054:	46bd      	mov	sp, r7
 8008056:	bd80      	pop	{r7, pc}

08008058 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008058:	b580      	push	{r7, lr}
 800805a:	b082      	sub	sp, #8
 800805c:	af00      	add	r7, sp, #0
 800805e:	6078      	str	r0, [r7, #4]
 8008060:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8008062:	683b      	ldr	r3, [r7, #0]
 8008064:	885b      	ldrh	r3, [r3, #2]
 8008066:	b2da      	uxtb	r2, r3
 8008068:	4b41      	ldr	r3, [pc, #260]	; (8008170 <USBD_SetConfig+0x118>)
 800806a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800806c:	4b40      	ldr	r3, [pc, #256]	; (8008170 <USBD_SetConfig+0x118>)
 800806e:	781b      	ldrb	r3, [r3, #0]
 8008070:	2b01      	cmp	r3, #1
 8008072:	d904      	bls.n	800807e <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8008074:	6839      	ldr	r1, [r7, #0]
 8008076:	6878      	ldr	r0, [r7, #4]
 8008078:	f000 f955 	bl	8008326 <USBD_CtlError>
 800807c:	e075      	b.n	800816a <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8008084:	2b02      	cmp	r3, #2
 8008086:	d002      	beq.n	800808e <USBD_SetConfig+0x36>
 8008088:	2b03      	cmp	r3, #3
 800808a:	d023      	beq.n	80080d4 <USBD_SetConfig+0x7c>
 800808c:	e062      	b.n	8008154 <USBD_SetConfig+0xfc>
    {
    case USBD_STATE_ADDRESSED:
      if (cfgidx)
 800808e:	4b38      	ldr	r3, [pc, #224]	; (8008170 <USBD_SetConfig+0x118>)
 8008090:	781b      	ldrb	r3, [r3, #0]
 8008092:	2b00      	cmp	r3, #0
 8008094:	d01a      	beq.n	80080cc <USBD_SetConfig+0x74>
      {
        pdev->dev_config = cfgidx;
 8008096:	4b36      	ldr	r3, [pc, #216]	; (8008170 <USBD_SetConfig+0x118>)
 8008098:	781b      	ldrb	r3, [r3, #0]
 800809a:	461a      	mov	r2, r3
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	605a      	str	r2, [r3, #4]
        pdev->dev_state = USBD_STATE_CONFIGURED;
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	2203      	movs	r2, #3
 80080a4:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
        if(USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 80080a8:	4b31      	ldr	r3, [pc, #196]	; (8008170 <USBD_SetConfig+0x118>)
 80080aa:	781b      	ldrb	r3, [r3, #0]
 80080ac:	4619      	mov	r1, r3
 80080ae:	6878      	ldr	r0, [r7, #4]
 80080b0:	f7ff fa29 	bl	8007506 <USBD_SetClassConfig>
 80080b4:	4603      	mov	r3, r0
 80080b6:	2b02      	cmp	r3, #2
 80080b8:	d104      	bne.n	80080c4 <USBD_SetConfig+0x6c>
        {
          USBD_CtlError(pdev, req);
 80080ba:	6839      	ldr	r1, [r7, #0]
 80080bc:	6878      	ldr	r0, [r7, #4]
 80080be:	f000 f932 	bl	8008326 <USBD_CtlError>
          return;
 80080c2:	e052      	b.n	800816a <USBD_SetConfig+0x112>
        }
        USBD_CtlSendStatus(pdev);
 80080c4:	6878      	ldr	r0, [r7, #4]
 80080c6:	f000 f9f7 	bl	80084b8 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlSendStatus(pdev);
      }
      break;
 80080ca:	e04e      	b.n	800816a <USBD_SetConfig+0x112>
        USBD_CtlSendStatus(pdev);
 80080cc:	6878      	ldr	r0, [r7, #4]
 80080ce:	f000 f9f3 	bl	80084b8 <USBD_CtlSendStatus>
      break;
 80080d2:	e04a      	b.n	800816a <USBD_SetConfig+0x112>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 80080d4:	4b26      	ldr	r3, [pc, #152]	; (8008170 <USBD_SetConfig+0x118>)
 80080d6:	781b      	ldrb	r3, [r3, #0]
 80080d8:	2b00      	cmp	r3, #0
 80080da:	d112      	bne.n	8008102 <USBD_SetConfig+0xaa>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	2202      	movs	r2, #2
 80080e0:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
        pdev->dev_config = cfgidx;
 80080e4:	4b22      	ldr	r3, [pc, #136]	; (8008170 <USBD_SetConfig+0x118>)
 80080e6:	781b      	ldrb	r3, [r3, #0]
 80080e8:	461a      	mov	r2, r3
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	605a      	str	r2, [r3, #4]
        USBD_ClrClassConfig(pdev, cfgidx);
 80080ee:	4b20      	ldr	r3, [pc, #128]	; (8008170 <USBD_SetConfig+0x118>)
 80080f0:	781b      	ldrb	r3, [r3, #0]
 80080f2:	4619      	mov	r1, r3
 80080f4:	6878      	ldr	r0, [r7, #4]
 80080f6:	f7ff fa25 	bl	8007544 <USBD_ClrClassConfig>
        USBD_CtlSendStatus(pdev);
 80080fa:	6878      	ldr	r0, [r7, #4]
 80080fc:	f000 f9dc 	bl	80084b8 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlSendStatus(pdev);
      }
      break;
 8008100:	e033      	b.n	800816a <USBD_SetConfig+0x112>
      else if (cfgidx != pdev->dev_config)
 8008102:	4b1b      	ldr	r3, [pc, #108]	; (8008170 <USBD_SetConfig+0x118>)
 8008104:	781b      	ldrb	r3, [r3, #0]
 8008106:	461a      	mov	r2, r3
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	685b      	ldr	r3, [r3, #4]
 800810c:	429a      	cmp	r2, r3
 800810e:	d01d      	beq.n	800814c <USBD_SetConfig+0xf4>
        USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	685b      	ldr	r3, [r3, #4]
 8008114:	b2db      	uxtb	r3, r3
 8008116:	4619      	mov	r1, r3
 8008118:	6878      	ldr	r0, [r7, #4]
 800811a:	f7ff fa13 	bl	8007544 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800811e:	4b14      	ldr	r3, [pc, #80]	; (8008170 <USBD_SetConfig+0x118>)
 8008120:	781b      	ldrb	r3, [r3, #0]
 8008122:	461a      	mov	r2, r3
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	605a      	str	r2, [r3, #4]
        if(USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8008128:	4b11      	ldr	r3, [pc, #68]	; (8008170 <USBD_SetConfig+0x118>)
 800812a:	781b      	ldrb	r3, [r3, #0]
 800812c:	4619      	mov	r1, r3
 800812e:	6878      	ldr	r0, [r7, #4]
 8008130:	f7ff f9e9 	bl	8007506 <USBD_SetClassConfig>
 8008134:	4603      	mov	r3, r0
 8008136:	2b02      	cmp	r3, #2
 8008138:	d104      	bne.n	8008144 <USBD_SetConfig+0xec>
          USBD_CtlError(pdev, req);
 800813a:	6839      	ldr	r1, [r7, #0]
 800813c:	6878      	ldr	r0, [r7, #4]
 800813e:	f000 f8f2 	bl	8008326 <USBD_CtlError>
          return;
 8008142:	e012      	b.n	800816a <USBD_SetConfig+0x112>
        USBD_CtlSendStatus(pdev);
 8008144:	6878      	ldr	r0, [r7, #4]
 8008146:	f000 f9b7 	bl	80084b8 <USBD_CtlSendStatus>
      break;
 800814a:	e00e      	b.n	800816a <USBD_SetConfig+0x112>
        USBD_CtlSendStatus(pdev);
 800814c:	6878      	ldr	r0, [r7, #4]
 800814e:	f000 f9b3 	bl	80084b8 <USBD_CtlSendStatus>
      break;
 8008152:	e00a      	b.n	800816a <USBD_SetConfig+0x112>

    default:
      USBD_CtlError(pdev, req);
 8008154:	6839      	ldr	r1, [r7, #0]
 8008156:	6878      	ldr	r0, [r7, #4]
 8008158:	f000 f8e5 	bl	8008326 <USBD_CtlError>
      USBD_ClrClassConfig(pdev, cfgidx);
 800815c:	4b04      	ldr	r3, [pc, #16]	; (8008170 <USBD_SetConfig+0x118>)
 800815e:	781b      	ldrb	r3, [r3, #0]
 8008160:	4619      	mov	r1, r3
 8008162:	6878      	ldr	r0, [r7, #4]
 8008164:	f7ff f9ee 	bl	8007544 <USBD_ClrClassConfig>
      break;
 8008168:	bf00      	nop
    }
  }
}
 800816a:	3708      	adds	r7, #8
 800816c:	46bd      	mov	sp, r7
 800816e:	bd80      	pop	{r7, pc}
 8008170:	20000210 	.word	0x20000210

08008174 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008174:	b580      	push	{r7, lr}
 8008176:	b082      	sub	sp, #8
 8008178:	af00      	add	r7, sp, #0
 800817a:	6078      	str	r0, [r7, #4]
 800817c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800817e:	683b      	ldr	r3, [r7, #0]
 8008180:	88db      	ldrh	r3, [r3, #6]
 8008182:	2b01      	cmp	r3, #1
 8008184:	d004      	beq.n	8008190 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev , req);
 8008186:	6839      	ldr	r1, [r7, #0]
 8008188:	6878      	ldr	r0, [r7, #4]
 800818a:	f000 f8cc 	bl	8008326 <USBD_CtlError>
    default:
      USBD_CtlError(pdev , req);
      break;
    }
  }
}
 800818e:	e021      	b.n	80081d4 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8008196:	2b01      	cmp	r3, #1
 8008198:	db17      	blt.n	80081ca <USBD_GetConfig+0x56>
 800819a:	2b02      	cmp	r3, #2
 800819c:	dd02      	ble.n	80081a4 <USBD_GetConfig+0x30>
 800819e:	2b03      	cmp	r3, #3
 80081a0:	d00b      	beq.n	80081ba <USBD_GetConfig+0x46>
 80081a2:	e012      	b.n	80081ca <USBD_GetConfig+0x56>
      pdev->dev_default_config = 0U;
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	2200      	movs	r2, #0
 80081a8:	609a      	str	r2, [r3, #8]
      USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	3308      	adds	r3, #8
 80081ae:	2201      	movs	r2, #1
 80081b0:	4619      	mov	r1, r3
 80081b2:	6878      	ldr	r0, [r7, #4]
 80081b4:	f000 f922 	bl	80083fc <USBD_CtlSendData>
      break;
 80081b8:	e00c      	b.n	80081d4 <USBD_GetConfig+0x60>
      USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	3304      	adds	r3, #4
 80081be:	2201      	movs	r2, #1
 80081c0:	4619      	mov	r1, r3
 80081c2:	6878      	ldr	r0, [r7, #4]
 80081c4:	f000 f91a 	bl	80083fc <USBD_CtlSendData>
      break;
 80081c8:	e004      	b.n	80081d4 <USBD_GetConfig+0x60>
      USBD_CtlError(pdev , req);
 80081ca:	6839      	ldr	r1, [r7, #0]
 80081cc:	6878      	ldr	r0, [r7, #4]
 80081ce:	f000 f8aa 	bl	8008326 <USBD_CtlError>
      break;
 80081d2:	bf00      	nop
}
 80081d4:	bf00      	nop
 80081d6:	3708      	adds	r7, #8
 80081d8:	46bd      	mov	sp, r7
 80081da:	bd80      	pop	{r7, pc}

080081dc <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80081dc:	b580      	push	{r7, lr}
 80081de:	b082      	sub	sp, #8
 80081e0:	af00      	add	r7, sp, #0
 80081e2:	6078      	str	r0, [r7, #4]
 80081e4:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 80081ec:	3b01      	subs	r3, #1
 80081ee:	2b02      	cmp	r3, #2
 80081f0:	d81e      	bhi.n	8008230 <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if(req->wLength != 0x2U)
 80081f2:	683b      	ldr	r3, [r7, #0]
 80081f4:	88db      	ldrh	r3, [r3, #6]
 80081f6:	2b02      	cmp	r3, #2
 80081f8:	d004      	beq.n	8008204 <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 80081fa:	6839      	ldr	r1, [r7, #0]
 80081fc:	6878      	ldr	r0, [r7, #4]
 80081fe:	f000 f892 	bl	8008326 <USBD_CtlError>
      break;
 8008202:	e01a      	b.n	800823a <USBD_GetStatus+0x5e>
    }

#if ( USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	2201      	movs	r2, #1
 8008208:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup)
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	f8d3 327c 	ldr.w	r3, [r3, #636]	; 0x27c
 8008210:	2b00      	cmp	r3, #0
 8008212:	d005      	beq.n	8008220 <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	68db      	ldr	r3, [r3, #12]
 8008218:	f043 0202 	orr.w	r2, r3, #2
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	60da      	str	r2, [r3, #12]
    }

    USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	330c      	adds	r3, #12
 8008224:	2202      	movs	r2, #2
 8008226:	4619      	mov	r1, r3
 8008228:	6878      	ldr	r0, [r7, #4]
 800822a:	f000 f8e7 	bl	80083fc <USBD_CtlSendData>
    break;
 800822e:	e004      	b.n	800823a <USBD_GetStatus+0x5e>

  default :
    USBD_CtlError(pdev , req);
 8008230:	6839      	ldr	r1, [r7, #0]
 8008232:	6878      	ldr	r0, [r7, #4]
 8008234:	f000 f877 	bl	8008326 <USBD_CtlError>
    break;
 8008238:	bf00      	nop
  }
}
 800823a:	bf00      	nop
 800823c:	3708      	adds	r7, #8
 800823e:	46bd      	mov	sp, r7
 8008240:	bd80      	pop	{r7, pc}

08008242 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 8008242:	b580      	push	{r7, lr}
 8008244:	b082      	sub	sp, #8
 8008246:	af00      	add	r7, sp, #0
 8008248:	6078      	str	r0, [r7, #4]
 800824a:	6039      	str	r1, [r7, #0]

  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800824c:	683b      	ldr	r3, [r7, #0]
 800824e:	885b      	ldrh	r3, [r3, #2]
 8008250:	2b01      	cmp	r3, #1
 8008252:	d106      	bne.n	8008262 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	2201      	movs	r2, #1
 8008258:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c
    USBD_CtlSendStatus(pdev);
 800825c:	6878      	ldr	r0, [r7, #4]
 800825e:	f000 f92b 	bl	80084b8 <USBD_CtlSendStatus>
  }

}
 8008262:	bf00      	nop
 8008264:	3708      	adds	r7, #8
 8008266:	46bd      	mov	sp, r7
 8008268:	bd80      	pop	{r7, pc}

0800826a <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 800826a:	b580      	push	{r7, lr}
 800826c:	b082      	sub	sp, #8
 800826e:	af00      	add	r7, sp, #0
 8008270:	6078      	str	r0, [r7, #4]
 8008272:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800827a:	3b01      	subs	r3, #1
 800827c:	2b02      	cmp	r3, #2
 800827e:	d80b      	bhi.n	8008298 <USBD_ClrFeature+0x2e>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008280:	683b      	ldr	r3, [r7, #0]
 8008282:	885b      	ldrh	r3, [r3, #2]
 8008284:	2b01      	cmp	r3, #1
 8008286:	d10c      	bne.n	80082a2 <USBD_ClrFeature+0x38>
    {
      pdev->dev_remote_wakeup = 0U;
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	2200      	movs	r2, #0
 800828c:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c
      USBD_CtlSendStatus(pdev);
 8008290:	6878      	ldr	r0, [r7, #4]
 8008292:	f000 f911 	bl	80084b8 <USBD_CtlSendStatus>
    }
    break;
 8008296:	e004      	b.n	80082a2 <USBD_ClrFeature+0x38>

  default :
     USBD_CtlError(pdev , req);
 8008298:	6839      	ldr	r1, [r7, #0]
 800829a:	6878      	ldr	r0, [r7, #4]
 800829c:	f000 f843 	bl	8008326 <USBD_CtlError>
    break;
 80082a0:	e000      	b.n	80082a4 <USBD_ClrFeature+0x3a>
    break;
 80082a2:	bf00      	nop
  }
}
 80082a4:	bf00      	nop
 80082a6:	3708      	adds	r7, #8
 80082a8:	46bd      	mov	sp, r7
 80082aa:	bd80      	pop	{r7, pc}

080082ac <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80082ac:	b480      	push	{r7}
 80082ae:	b083      	sub	sp, #12
 80082b0:	af00      	add	r7, sp, #0
 80082b2:	6078      	str	r0, [r7, #4]
 80082b4:	6039      	str	r1, [r7, #0]
  req->bmRequest     = *(uint8_t *)  (pdata);
 80082b6:	683b      	ldr	r3, [r7, #0]
 80082b8:	781a      	ldrb	r2, [r3, #0]
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	701a      	strb	r2, [r3, #0]
  req->bRequest      = *(uint8_t *)  (pdata +  1);
 80082be:	683b      	ldr	r3, [r7, #0]
 80082c0:	785a      	ldrb	r2, [r3, #1]
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	705a      	strb	r2, [r3, #1]
  req->wValue        = SWAPBYTE      (pdata +  2);
 80082c6:	683b      	ldr	r3, [r7, #0]
 80082c8:	3302      	adds	r3, #2
 80082ca:	781b      	ldrb	r3, [r3, #0]
 80082cc:	b29a      	uxth	r2, r3
 80082ce:	683b      	ldr	r3, [r7, #0]
 80082d0:	3303      	adds	r3, #3
 80082d2:	781b      	ldrb	r3, [r3, #0]
 80082d4:	b29b      	uxth	r3, r3
 80082d6:	021b      	lsls	r3, r3, #8
 80082d8:	b29b      	uxth	r3, r3
 80082da:	4413      	add	r3, r2
 80082dc:	b29a      	uxth	r2, r3
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	805a      	strh	r2, [r3, #2]
  req->wIndex        = SWAPBYTE      (pdata +  4);
 80082e2:	683b      	ldr	r3, [r7, #0]
 80082e4:	3304      	adds	r3, #4
 80082e6:	781b      	ldrb	r3, [r3, #0]
 80082e8:	b29a      	uxth	r2, r3
 80082ea:	683b      	ldr	r3, [r7, #0]
 80082ec:	3305      	adds	r3, #5
 80082ee:	781b      	ldrb	r3, [r3, #0]
 80082f0:	b29b      	uxth	r3, r3
 80082f2:	021b      	lsls	r3, r3, #8
 80082f4:	b29b      	uxth	r3, r3
 80082f6:	4413      	add	r3, r2
 80082f8:	b29a      	uxth	r2, r3
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	809a      	strh	r2, [r3, #4]
  req->wLength       = SWAPBYTE      (pdata +  6);
 80082fe:	683b      	ldr	r3, [r7, #0]
 8008300:	3306      	adds	r3, #6
 8008302:	781b      	ldrb	r3, [r3, #0]
 8008304:	b29a      	uxth	r2, r3
 8008306:	683b      	ldr	r3, [r7, #0]
 8008308:	3307      	adds	r3, #7
 800830a:	781b      	ldrb	r3, [r3, #0]
 800830c:	b29b      	uxth	r3, r3
 800830e:	021b      	lsls	r3, r3, #8
 8008310:	b29b      	uxth	r3, r3
 8008312:	4413      	add	r3, r2
 8008314:	b29a      	uxth	r2, r3
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	80da      	strh	r2, [r3, #6]

}
 800831a:	bf00      	nop
 800831c:	370c      	adds	r7, #12
 800831e:	46bd      	mov	sp, r7
 8008320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008324:	4770      	bx	lr

08008326 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError( USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 8008326:	b580      	push	{r7, lr}
 8008328:	b082      	sub	sp, #8
 800832a:	af00      	add	r7, sp, #0
 800832c:	6078      	str	r0, [r7, #4]
 800832e:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev , 0x80U);
 8008330:	2180      	movs	r1, #128	; 0x80
 8008332:	6878      	ldr	r0, [r7, #4]
 8008334:	f00f fade 	bl	80178f4 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev , 0U);
 8008338:	2100      	movs	r1, #0
 800833a:	6878      	ldr	r0, [r7, #4]
 800833c:	f00f fada 	bl	80178f4 <USBD_LL_StallEP>
}
 8008340:	bf00      	nop
 8008342:	3708      	adds	r7, #8
 8008344:	46bd      	mov	sp, r7
 8008346:	bd80      	pop	{r7, pc}

08008348 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8008348:	b580      	push	{r7, lr}
 800834a:	b086      	sub	sp, #24
 800834c:	af00      	add	r7, sp, #0
 800834e:	60f8      	str	r0, [r7, #12]
 8008350:	60b9      	str	r1, [r7, #8]
 8008352:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8008354:	2300      	movs	r3, #0
 8008356:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 8008358:	68fb      	ldr	r3, [r7, #12]
 800835a:	2b00      	cmp	r3, #0
 800835c:	d032      	beq.n	80083c4 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 800835e:	68f8      	ldr	r0, [r7, #12]
 8008360:	f000 f834 	bl	80083cc <USBD_GetLen>
 8008364:	4603      	mov	r3, r0
 8008366:	3301      	adds	r3, #1
 8008368:	b29b      	uxth	r3, r3
 800836a:	005b      	lsls	r3, r3, #1
 800836c:	b29a      	uxth	r2, r3
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8008372:	7dfb      	ldrb	r3, [r7, #23]
 8008374:	1c5a      	adds	r2, r3, #1
 8008376:	75fa      	strb	r2, [r7, #23]
 8008378:	461a      	mov	r2, r3
 800837a:	68bb      	ldr	r3, [r7, #8]
 800837c:	4413      	add	r3, r2
 800837e:	687a      	ldr	r2, [r7, #4]
 8008380:	7812      	ldrb	r2, [r2, #0]
 8008382:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8008384:	7dfb      	ldrb	r3, [r7, #23]
 8008386:	1c5a      	adds	r2, r3, #1
 8008388:	75fa      	strb	r2, [r7, #23]
 800838a:	461a      	mov	r2, r3
 800838c:	68bb      	ldr	r3, [r7, #8]
 800838e:	4413      	add	r3, r2
 8008390:	2203      	movs	r2, #3
 8008392:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8008394:	e012      	b.n	80083bc <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 8008396:	68fb      	ldr	r3, [r7, #12]
 8008398:	1c5a      	adds	r2, r3, #1
 800839a:	60fa      	str	r2, [r7, #12]
 800839c:	7dfa      	ldrb	r2, [r7, #23]
 800839e:	1c51      	adds	r1, r2, #1
 80083a0:	75f9      	strb	r1, [r7, #23]
 80083a2:	4611      	mov	r1, r2
 80083a4:	68ba      	ldr	r2, [r7, #8]
 80083a6:	440a      	add	r2, r1
 80083a8:	781b      	ldrb	r3, [r3, #0]
 80083aa:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 80083ac:	7dfb      	ldrb	r3, [r7, #23]
 80083ae:	1c5a      	adds	r2, r3, #1
 80083b0:	75fa      	strb	r2, [r7, #23]
 80083b2:	461a      	mov	r2, r3
 80083b4:	68bb      	ldr	r3, [r7, #8]
 80083b6:	4413      	add	r3, r2
 80083b8:	2200      	movs	r2, #0
 80083ba:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 80083bc:	68fb      	ldr	r3, [r7, #12]
 80083be:	781b      	ldrb	r3, [r3, #0]
 80083c0:	2b00      	cmp	r3, #0
 80083c2:	d1e8      	bne.n	8008396 <USBD_GetString+0x4e>
    }
  }
}
 80083c4:	bf00      	nop
 80083c6:	3718      	adds	r7, #24
 80083c8:	46bd      	mov	sp, r7
 80083ca:	bd80      	pop	{r7, pc}

080083cc <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80083cc:	b480      	push	{r7}
 80083ce:	b085      	sub	sp, #20
 80083d0:	af00      	add	r7, sp, #0
 80083d2:	6078      	str	r0, [r7, #4]
    uint8_t  len = 0U;
 80083d4:	2300      	movs	r3, #0
 80083d6:	73fb      	strb	r3, [r7, #15]

    while (*buf != '\0')
 80083d8:	e005      	b.n	80083e6 <USBD_GetLen+0x1a>
    {
        len++;
 80083da:	7bfb      	ldrb	r3, [r7, #15]
 80083dc:	3301      	adds	r3, #1
 80083de:	73fb      	strb	r3, [r7, #15]
        buf++;
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	3301      	adds	r3, #1
 80083e4:	607b      	str	r3, [r7, #4]
    while (*buf != '\0')
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	781b      	ldrb	r3, [r3, #0]
 80083ea:	2b00      	cmp	r3, #0
 80083ec:	d1f5      	bne.n	80083da <USBD_GetLen+0xe>
    }

    return len;
 80083ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80083f0:	4618      	mov	r0, r3
 80083f2:	3714      	adds	r7, #20
 80083f4:	46bd      	mov	sp, r7
 80083f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083fa:	4770      	bx	lr

080083fc <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                     uint16_t len)
{
 80083fc:	b580      	push	{r7, lr}
 80083fe:	b084      	sub	sp, #16
 8008400:	af00      	add	r7, sp, #0
 8008402:	60f8      	str	r0, [r7, #12]
 8008404:	60b9      	str	r1, [r7, #8]
 8008406:	4613      	mov	r3, r2
 8008408:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800840a:	68fb      	ldr	r3, [r7, #12]
 800840c:	2202      	movs	r2, #2
 800840e:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  pdev->ep_in[0].total_length = len;
 8008412:	88fa      	ldrh	r2, [r7, #6]
 8008414:	68fb      	ldr	r3, [r7, #12]
 8008416:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8008418:	88fa      	ldrh	r2, [r7, #6]
 800841a:	68fb      	ldr	r3, [r7, #12]
 800841c:	621a      	str	r2, [r3, #32]

 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00U, pbuf, len);
 800841e:	88fb      	ldrh	r3, [r7, #6]
 8008420:	68ba      	ldr	r2, [r7, #8]
 8008422:	2100      	movs	r1, #0
 8008424:	68f8      	ldr	r0, [r7, #12]
 8008426:	f00f faee 	bl	8017a06 <USBD_LL_Transmit>

  return USBD_OK;
 800842a:	2300      	movs	r3, #0
}
 800842c:	4618      	mov	r0, r3
 800842e:	3710      	adds	r7, #16
 8008430:	46bd      	mov	sp, r7
 8008432:	bd80      	pop	{r7, pc}

08008434 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData (USBD_HandleTypeDef *pdev,
                                             uint8_t *pbuf, uint16_t len)
{
 8008434:	b580      	push	{r7, lr}
 8008436:	b084      	sub	sp, #16
 8008438:	af00      	add	r7, sp, #0
 800843a:	60f8      	str	r0, [r7, #12]
 800843c:	60b9      	str	r1, [r7, #8]
 800843e:	4613      	mov	r3, r2
 8008440:	80fb      	strh	r3, [r7, #6]
 /* Start the next transfer */
  USBD_LL_Transmit (pdev, 0x00U, pbuf, len);
 8008442:	88fb      	ldrh	r3, [r7, #6]
 8008444:	68ba      	ldr	r2, [r7, #8]
 8008446:	2100      	movs	r1, #0
 8008448:	68f8      	ldr	r0, [r7, #12]
 800844a:	f00f fadc 	bl	8017a06 <USBD_LL_Transmit>

  return USBD_OK;
 800844e:	2300      	movs	r3, #0
}
 8008450:	4618      	mov	r0, r3
 8008452:	3710      	adds	r7, #16
 8008454:	46bd      	mov	sp, r7
 8008456:	bd80      	pop	{r7, pc}

08008458 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                      uint16_t len)
{
 8008458:	b580      	push	{r7, lr}
 800845a:	b084      	sub	sp, #16
 800845c:	af00      	add	r7, sp, #0
 800845e:	60f8      	str	r0, [r7, #12]
 8008460:	60b9      	str	r1, [r7, #8]
 8008462:	4613      	mov	r3, r2
 8008464:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8008466:	68fb      	ldr	r3, [r7, #12]
 8008468:	2203      	movs	r2, #3
 800846a:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  pdev->ep_out[0].total_length = len;
 800846e:	88fa      	ldrh	r2, [r7, #6]
 8008470:	68fb      	ldr	r3, [r7, #12]
 8008472:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
  pdev->ep_out[0].rem_length   = len;
 8008476:	88fa      	ldrh	r2, [r7, #6]
 8008478:	68fb      	ldr	r3, [r7, #12]
 800847a:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c

  /* Start the transfer */
  USBD_LL_PrepareReceive (pdev, 0U, pbuf, len);
 800847e:	88fb      	ldrh	r3, [r7, #6]
 8008480:	68ba      	ldr	r2, [r7, #8]
 8008482:	2100      	movs	r1, #0
 8008484:	68f8      	ldr	r0, [r7, #12]
 8008486:	f00f fae1 	bl	8017a4c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800848a:	2300      	movs	r3, #0
}
 800848c:	4618      	mov	r0, r3
 800848e:	3710      	adds	r7, #16
 8008490:	46bd      	mov	sp, r7
 8008492:	bd80      	pop	{r7, pc}

08008494 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                       uint16_t len)
{
 8008494:	b580      	push	{r7, lr}
 8008496:	b084      	sub	sp, #16
 8008498:	af00      	add	r7, sp, #0
 800849a:	60f8      	str	r0, [r7, #12]
 800849c:	60b9      	str	r1, [r7, #8]
 800849e:	4613      	mov	r3, r2
 80084a0:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80084a2:	88fb      	ldrh	r3, [r7, #6]
 80084a4:	68ba      	ldr	r2, [r7, #8]
 80084a6:	2100      	movs	r1, #0
 80084a8:	68f8      	ldr	r0, [r7, #12]
 80084aa:	f00f facf 	bl	8017a4c <USBD_LL_PrepareReceive>

  return USBD_OK;
 80084ae:	2300      	movs	r3, #0
}
 80084b0:	4618      	mov	r0, r3
 80084b2:	3710      	adds	r7, #16
 80084b4:	46bd      	mov	sp, r7
 80084b6:	bd80      	pop	{r7, pc}

080084b8 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus (USBD_HandleTypeDef *pdev)
{
 80084b8:	b580      	push	{r7, lr}
 80084ba:	b082      	sub	sp, #8
 80084bc:	af00      	add	r7, sp, #0
 80084be:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	2204      	movs	r2, #4
 80084c4:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80084c8:	2300      	movs	r3, #0
 80084ca:	2200      	movs	r2, #0
 80084cc:	2100      	movs	r1, #0
 80084ce:	6878      	ldr	r0, [r7, #4]
 80084d0:	f00f fa99 	bl	8017a06 <USBD_LL_Transmit>

  return USBD_OK;
 80084d4:	2300      	movs	r3, #0
}
 80084d6:	4618      	mov	r0, r3
 80084d8:	3708      	adds	r7, #8
 80084da:	46bd      	mov	sp, r7
 80084dc:	bd80      	pop	{r7, pc}

080084de <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus (USBD_HandleTypeDef *pdev)
{
 80084de:	b580      	push	{r7, lr}
 80084e0:	b082      	sub	sp, #8
 80084e2:	af00      	add	r7, sp, #0
 80084e4:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	2205      	movs	r2, #5
 80084ea:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

 /* Start the transfer */
  USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 80084ee:	2300      	movs	r3, #0
 80084f0:	2200      	movs	r2, #0
 80084f2:	2100      	movs	r1, #0
 80084f4:	6878      	ldr	r0, [r7, #4]
 80084f6:	f00f faa9 	bl	8017a4c <USBD_LL_PrepareReceive>

  return USBD_OK;
 80084fa:	2300      	movs	r3, #0
}
 80084fc:	4618      	mov	r0, r3
 80084fe:	3708      	adds	r7, #8
 8008500:	46bd      	mov	sp, r7
 8008502:	bd80      	pop	{r7, pc}

08008504 <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8008504:	b480      	push	{r7}
 8008506:	b085      	sub	sp, #20
 8008508:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800850a:	f3ef 8305 	mrs	r3, IPSR
 800850e:	60bb      	str	r3, [r7, #8]
  return(result);
 8008510:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008512:	2b00      	cmp	r3, #0
 8008514:	d10f      	bne.n	8008536 <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008516:	f3ef 8310 	mrs	r3, PRIMASK
 800851a:	607b      	str	r3, [r7, #4]
  return(result);
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	2b00      	cmp	r3, #0
 8008520:	d109      	bne.n	8008536 <osKernelInitialize+0x32>
 8008522:	4b11      	ldr	r3, [pc, #68]	; (8008568 <osKernelInitialize+0x64>)
 8008524:	681b      	ldr	r3, [r3, #0]
 8008526:	2b02      	cmp	r3, #2
 8008528:	d109      	bne.n	800853e <osKernelInitialize+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800852a:	f3ef 8311 	mrs	r3, BASEPRI
 800852e:	603b      	str	r3, [r7, #0]
  return(result);
 8008530:	683b      	ldr	r3, [r7, #0]
 8008532:	2b00      	cmp	r3, #0
 8008534:	d003      	beq.n	800853e <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8008536:	f06f 0305 	mvn.w	r3, #5
 800853a:	60fb      	str	r3, [r7, #12]
 800853c:	e00c      	b.n	8008558 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 800853e:	4b0a      	ldr	r3, [pc, #40]	; (8008568 <osKernelInitialize+0x64>)
 8008540:	681b      	ldr	r3, [r3, #0]
 8008542:	2b00      	cmp	r3, #0
 8008544:	d105      	bne.n	8008552 <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 8008546:	4b08      	ldr	r3, [pc, #32]	; (8008568 <osKernelInitialize+0x64>)
 8008548:	2201      	movs	r2, #1
 800854a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800854c:	2300      	movs	r3, #0
 800854e:	60fb      	str	r3, [r7, #12]
 8008550:	e002      	b.n	8008558 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8008552:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008556:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8008558:	68fb      	ldr	r3, [r7, #12]
}
 800855a:	4618      	mov	r0, r3
 800855c:	3714      	adds	r7, #20
 800855e:	46bd      	mov	sp, r7
 8008560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008564:	4770      	bx	lr
 8008566:	bf00      	nop
 8008568:	20000214 	.word	0x20000214

0800856c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800856c:	b580      	push	{r7, lr}
 800856e:	b084      	sub	sp, #16
 8008570:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008572:	f3ef 8305 	mrs	r3, IPSR
 8008576:	60bb      	str	r3, [r7, #8]
  return(result);
 8008578:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800857a:	2b00      	cmp	r3, #0
 800857c:	d10f      	bne.n	800859e <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800857e:	f3ef 8310 	mrs	r3, PRIMASK
 8008582:	607b      	str	r3, [r7, #4]
  return(result);
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	2b00      	cmp	r3, #0
 8008588:	d109      	bne.n	800859e <osKernelStart+0x32>
 800858a:	4b11      	ldr	r3, [pc, #68]	; (80085d0 <osKernelStart+0x64>)
 800858c:	681b      	ldr	r3, [r3, #0]
 800858e:	2b02      	cmp	r3, #2
 8008590:	d109      	bne.n	80085a6 <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8008592:	f3ef 8311 	mrs	r3, BASEPRI
 8008596:	603b      	str	r3, [r7, #0]
  return(result);
 8008598:	683b      	ldr	r3, [r7, #0]
 800859a:	2b00      	cmp	r3, #0
 800859c:	d003      	beq.n	80085a6 <osKernelStart+0x3a>
    stat = osErrorISR;
 800859e:	f06f 0305 	mvn.w	r3, #5
 80085a2:	60fb      	str	r3, [r7, #12]
 80085a4:	e00e      	b.n	80085c4 <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 80085a6:	4b0a      	ldr	r3, [pc, #40]	; (80085d0 <osKernelStart+0x64>)
 80085a8:	681b      	ldr	r3, [r3, #0]
 80085aa:	2b01      	cmp	r3, #1
 80085ac:	d107      	bne.n	80085be <osKernelStart+0x52>
      KernelState = osKernelRunning;
 80085ae:	4b08      	ldr	r3, [pc, #32]	; (80085d0 <osKernelStart+0x64>)
 80085b0:	2202      	movs	r2, #2
 80085b2:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 80085b4:	f002 f86e 	bl	800a694 <vTaskStartScheduler>
      stat = osOK;
 80085b8:	2300      	movs	r3, #0
 80085ba:	60fb      	str	r3, [r7, #12]
 80085bc:	e002      	b.n	80085c4 <osKernelStart+0x58>
    } else {
      stat = osError;
 80085be:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80085c2:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80085c4:	68fb      	ldr	r3, [r7, #12]
}
 80085c6:	4618      	mov	r0, r3
 80085c8:	3710      	adds	r7, #16
 80085ca:	46bd      	mov	sp, r7
 80085cc:	bd80      	pop	{r7, pc}
 80085ce:	bf00      	nop
 80085d0:	20000214 	.word	0x20000214

080085d4 <osKernelGetTickCount>:
  }

  return (lock);
}

uint32_t osKernelGetTickCount (void) {
 80085d4:	b580      	push	{r7, lr}
 80085d6:	b084      	sub	sp, #16
 80085d8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80085da:	f3ef 8305 	mrs	r3, IPSR
 80085de:	60bb      	str	r3, [r7, #8]
  return(result);
 80085e0:	68bb      	ldr	r3, [r7, #8]
  TickType_t ticks;

  if (IS_IRQ()) {
 80085e2:	2b00      	cmp	r3, #0
 80085e4:	d10f      	bne.n	8008606 <osKernelGetTickCount+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80085e6:	f3ef 8310 	mrs	r3, PRIMASK
 80085ea:	607b      	str	r3, [r7, #4]
  return(result);
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	2b00      	cmp	r3, #0
 80085f0:	d109      	bne.n	8008606 <osKernelGetTickCount+0x32>
 80085f2:	4b0b      	ldr	r3, [pc, #44]	; (8008620 <osKernelGetTickCount+0x4c>)
 80085f4:	681b      	ldr	r3, [r3, #0]
 80085f6:	2b02      	cmp	r3, #2
 80085f8:	d109      	bne.n	800860e <osKernelGetTickCount+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80085fa:	f3ef 8311 	mrs	r3, BASEPRI
 80085fe:	603b      	str	r3, [r7, #0]
  return(result);
 8008600:	683b      	ldr	r3, [r7, #0]
 8008602:	2b00      	cmp	r3, #0
 8008604:	d003      	beq.n	800860e <osKernelGetTickCount+0x3a>
    ticks = xTaskGetTickCountFromISR();
 8008606:	f002 f963 	bl	800a8d0 <xTaskGetTickCountFromISR>
 800860a:	60f8      	str	r0, [r7, #12]
 800860c:	e002      	b.n	8008614 <osKernelGetTickCount+0x40>
  } else {
    ticks = xTaskGetTickCount();
 800860e:	f002 f94f 	bl	800a8b0 <xTaskGetTickCount>
 8008612:	60f8      	str	r0, [r7, #12]
  }

  return (ticks);
 8008614:	68fb      	ldr	r3, [r7, #12]
}
 8008616:	4618      	mov	r0, r3
 8008618:	3710      	adds	r7, #16
 800861a:	46bd      	mov	sp, r7
 800861c:	bd80      	pop	{r7, pc}
 800861e:	bf00      	nop
 8008620:	20000214 	.word	0x20000214

08008624 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8008624:	b580      	push	{r7, lr}
 8008626:	b092      	sub	sp, #72	; 0x48
 8008628:	af04      	add	r7, sp, #16
 800862a:	60f8      	str	r0, [r7, #12]
 800862c:	60b9      	str	r1, [r7, #8]
 800862e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8008630:	2300      	movs	r3, #0
 8008632:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008634:	f3ef 8305 	mrs	r3, IPSR
 8008638:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 800863a:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  if (!IS_IRQ() && (func != NULL)) {
 800863c:	2b00      	cmp	r3, #0
 800863e:	f040 8094 	bne.w	800876a <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008642:	f3ef 8310 	mrs	r3, PRIMASK
 8008646:	623b      	str	r3, [r7, #32]
  return(result);
 8008648:	6a3b      	ldr	r3, [r7, #32]
 800864a:	2b00      	cmp	r3, #0
 800864c:	f040 808d 	bne.w	800876a <osThreadNew+0x146>
 8008650:	4b48      	ldr	r3, [pc, #288]	; (8008774 <osThreadNew+0x150>)
 8008652:	681b      	ldr	r3, [r3, #0]
 8008654:	2b02      	cmp	r3, #2
 8008656:	d106      	bne.n	8008666 <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8008658:	f3ef 8311 	mrs	r3, BASEPRI
 800865c:	61fb      	str	r3, [r7, #28]
  return(result);
 800865e:	69fb      	ldr	r3, [r7, #28]
 8008660:	2b00      	cmp	r3, #0
 8008662:	f040 8082 	bne.w	800876a <osThreadNew+0x146>
 8008666:	68fb      	ldr	r3, [r7, #12]
 8008668:	2b00      	cmp	r3, #0
 800866a:	d07e      	beq.n	800876a <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 800866c:	2380      	movs	r3, #128	; 0x80
 800866e:	633b      	str	r3, [r7, #48]	; 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 8008670:	2318      	movs	r3, #24
 8008672:	62fb      	str	r3, [r7, #44]	; 0x2c

    empty = '\0';
 8008674:	2300      	movs	r3, #0
 8008676:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 8008678:	f107 031b 	add.w	r3, r7, #27
 800867c:	637b      	str	r3, [r7, #52]	; 0x34
    mem   = -1;
 800867e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008682:	62bb      	str	r3, [r7, #40]	; 0x28

    if (attr != NULL) {
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	2b00      	cmp	r3, #0
 8008688:	d045      	beq.n	8008716 <osThreadNew+0xf2>
      if (attr->name != NULL) {
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	681b      	ldr	r3, [r3, #0]
 800868e:	2b00      	cmp	r3, #0
 8008690:	d002      	beq.n	8008698 <osThreadNew+0x74>
        name = attr->name;
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	681b      	ldr	r3, [r3, #0]
 8008696:	637b      	str	r3, [r7, #52]	; 0x34
      }
      if (attr->priority != osPriorityNone) {
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	699b      	ldr	r3, [r3, #24]
 800869c:	2b00      	cmp	r3, #0
 800869e:	d002      	beq.n	80086a6 <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	699b      	ldr	r3, [r3, #24]
 80086a4:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80086a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80086a8:	2b00      	cmp	r3, #0
 80086aa:	d008      	beq.n	80086be <osThreadNew+0x9a>
 80086ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80086ae:	2b38      	cmp	r3, #56	; 0x38
 80086b0:	d805      	bhi.n	80086be <osThreadNew+0x9a>
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	685b      	ldr	r3, [r3, #4]
 80086b6:	f003 0301 	and.w	r3, r3, #1
 80086ba:	2b00      	cmp	r3, #0
 80086bc:	d001      	beq.n	80086c2 <osThreadNew+0x9e>
        return (NULL);
 80086be:	2300      	movs	r3, #0
 80086c0:	e054      	b.n	800876c <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	695b      	ldr	r3, [r3, #20]
 80086c6:	2b00      	cmp	r3, #0
 80086c8:	d003      	beq.n	80086d2 <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	695b      	ldr	r3, [r3, #20]
 80086ce:	089b      	lsrs	r3, r3, #2
 80086d0:	633b      	str	r3, [r7, #48]	; 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	689b      	ldr	r3, [r3, #8]
 80086d6:	2b00      	cmp	r3, #0
 80086d8:	d00e      	beq.n	80086f8 <osThreadNew+0xd4>
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	68db      	ldr	r3, [r3, #12]
 80086de:	2b5b      	cmp	r3, #91	; 0x5b
 80086e0:	d90a      	bls.n	80086f8 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80086e6:	2b00      	cmp	r3, #0
 80086e8:	d006      	beq.n	80086f8 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	695b      	ldr	r3, [r3, #20]
 80086ee:	2b00      	cmp	r3, #0
 80086f0:	d002      	beq.n	80086f8 <osThreadNew+0xd4>
        mem = 1;
 80086f2:	2301      	movs	r3, #1
 80086f4:	62bb      	str	r3, [r7, #40]	; 0x28
 80086f6:	e010      	b.n	800871a <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	689b      	ldr	r3, [r3, #8]
 80086fc:	2b00      	cmp	r3, #0
 80086fe:	d10c      	bne.n	800871a <osThreadNew+0xf6>
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	68db      	ldr	r3, [r3, #12]
 8008704:	2b00      	cmp	r3, #0
 8008706:	d108      	bne.n	800871a <osThreadNew+0xf6>
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	691b      	ldr	r3, [r3, #16]
 800870c:	2b00      	cmp	r3, #0
 800870e:	d104      	bne.n	800871a <osThreadNew+0xf6>
          mem = 0;
 8008710:	2300      	movs	r3, #0
 8008712:	62bb      	str	r3, [r7, #40]	; 0x28
 8008714:	e001      	b.n	800871a <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 8008716:	2300      	movs	r3, #0
 8008718:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if (mem == 1) {
 800871a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800871c:	2b01      	cmp	r3, #1
 800871e:	d110      	bne.n	8008742 <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8008724:	687a      	ldr	r2, [r7, #4]
 8008726:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8008728:	9202      	str	r2, [sp, #8]
 800872a:	9301      	str	r3, [sp, #4]
 800872c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800872e:	9300      	str	r3, [sp, #0]
 8008730:	68bb      	ldr	r3, [r7, #8]
 8008732:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008734:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8008736:	68f8      	ldr	r0, [r7, #12]
 8008738:	f001 fde4 	bl	800a304 <xTaskCreateStatic>
 800873c:	4603      	mov	r3, r0
 800873e:	617b      	str	r3, [r7, #20]
 8008740:	e013      	b.n	800876a <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 8008742:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008744:	2b00      	cmp	r3, #0
 8008746:	d110      	bne.n	800876a <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8008748:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800874a:	b29a      	uxth	r2, r3
 800874c:	f107 0314 	add.w	r3, r7, #20
 8008750:	9301      	str	r3, [sp, #4]
 8008752:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008754:	9300      	str	r3, [sp, #0]
 8008756:	68bb      	ldr	r3, [r7, #8]
 8008758:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800875a:	68f8      	ldr	r0, [r7, #12]
 800875c:	f001 fe2b 	bl	800a3b6 <xTaskCreate>
 8008760:	4603      	mov	r3, r0
 8008762:	2b01      	cmp	r3, #1
 8008764:	d001      	beq.n	800876a <osThreadNew+0x146>
          hTask = NULL;
 8008766:	2300      	movs	r3, #0
 8008768:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 800876a:	697b      	ldr	r3, [r7, #20]
}
 800876c:	4618      	mov	r0, r3
 800876e:	3738      	adds	r7, #56	; 0x38
 8008770:	46bd      	mov	sp, r7
 8008772:	bd80      	pop	{r7, pc}
 8008774:	20000214 	.word	0x20000214

08008778 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8008778:	b580      	push	{r7, lr}
 800877a:	b086      	sub	sp, #24
 800877c:	af00      	add	r7, sp, #0
 800877e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008780:	f3ef 8305 	mrs	r3, IPSR
 8008784:	613b      	str	r3, [r7, #16]
  return(result);
 8008786:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008788:	2b00      	cmp	r3, #0
 800878a:	d10f      	bne.n	80087ac <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800878c:	f3ef 8310 	mrs	r3, PRIMASK
 8008790:	60fb      	str	r3, [r7, #12]
  return(result);
 8008792:	68fb      	ldr	r3, [r7, #12]
 8008794:	2b00      	cmp	r3, #0
 8008796:	d109      	bne.n	80087ac <osDelay+0x34>
 8008798:	4b0d      	ldr	r3, [pc, #52]	; (80087d0 <osDelay+0x58>)
 800879a:	681b      	ldr	r3, [r3, #0]
 800879c:	2b02      	cmp	r3, #2
 800879e:	d109      	bne.n	80087b4 <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80087a0:	f3ef 8311 	mrs	r3, BASEPRI
 80087a4:	60bb      	str	r3, [r7, #8]
  return(result);
 80087a6:	68bb      	ldr	r3, [r7, #8]
 80087a8:	2b00      	cmp	r3, #0
 80087aa:	d003      	beq.n	80087b4 <osDelay+0x3c>
    stat = osErrorISR;
 80087ac:	f06f 0305 	mvn.w	r3, #5
 80087b0:	617b      	str	r3, [r7, #20]
 80087b2:	e007      	b.n	80087c4 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 80087b4:	2300      	movs	r3, #0
 80087b6:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	2b00      	cmp	r3, #0
 80087bc:	d002      	beq.n	80087c4 <osDelay+0x4c>
      vTaskDelay(ticks);
 80087be:	6878      	ldr	r0, [r7, #4]
 80087c0:	f001 ff34 	bl	800a62c <vTaskDelay>
    }
  }

  return (stat);
 80087c4:	697b      	ldr	r3, [r7, #20]
}
 80087c6:	4618      	mov	r0, r3
 80087c8:	3718      	adds	r7, #24
 80087ca:	46bd      	mov	sp, r7
 80087cc:	bd80      	pop	{r7, pc}
 80087ce:	bf00      	nop
 80087d0:	20000214 	.word	0x20000214

080087d4 <osMutexNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 80087d4:	b580      	push	{r7, lr}
 80087d6:	b08a      	sub	sp, #40	; 0x28
 80087d8:	af00      	add	r7, sp, #0
 80087da:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 80087dc:	2300      	movs	r3, #0
 80087de:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80087e0:	f3ef 8305 	mrs	r3, IPSR
 80087e4:	613b      	str	r3, [r7, #16]
  return(result);
 80087e6:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ()) {
 80087e8:	2b00      	cmp	r3, #0
 80087ea:	f040 8085 	bne.w	80088f8 <osMutexNew+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80087ee:	f3ef 8310 	mrs	r3, PRIMASK
 80087f2:	60fb      	str	r3, [r7, #12]
  return(result);
 80087f4:	68fb      	ldr	r3, [r7, #12]
 80087f6:	2b00      	cmp	r3, #0
 80087f8:	d17e      	bne.n	80088f8 <osMutexNew+0x124>
 80087fa:	4b42      	ldr	r3, [pc, #264]	; (8008904 <osMutexNew+0x130>)
 80087fc:	681b      	ldr	r3, [r3, #0]
 80087fe:	2b02      	cmp	r3, #2
 8008800:	d105      	bne.n	800880e <osMutexNew+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8008802:	f3ef 8311 	mrs	r3, BASEPRI
 8008806:	60bb      	str	r3, [r7, #8]
  return(result);
 8008808:	68bb      	ldr	r3, [r7, #8]
 800880a:	2b00      	cmp	r3, #0
 800880c:	d174      	bne.n	80088f8 <osMutexNew+0x124>
    if (attr != NULL) {
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	2b00      	cmp	r3, #0
 8008812:	d003      	beq.n	800881c <osMutexNew+0x48>
      type = attr->attr_bits;
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	685b      	ldr	r3, [r3, #4]
 8008818:	623b      	str	r3, [r7, #32]
 800881a:	e001      	b.n	8008820 <osMutexNew+0x4c>
    } else {
      type = 0U;
 800881c:	2300      	movs	r3, #0
 800881e:	623b      	str	r3, [r7, #32]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 8008820:	6a3b      	ldr	r3, [r7, #32]
 8008822:	f003 0301 	and.w	r3, r3, #1
 8008826:	2b00      	cmp	r3, #0
 8008828:	d002      	beq.n	8008830 <osMutexNew+0x5c>
      rmtx = 1U;
 800882a:	2301      	movs	r3, #1
 800882c:	61fb      	str	r3, [r7, #28]
 800882e:	e001      	b.n	8008834 <osMutexNew+0x60>
    } else {
      rmtx = 0U;
 8008830:	2300      	movs	r3, #0
 8008832:	61fb      	str	r3, [r7, #28]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 8008834:	6a3b      	ldr	r3, [r7, #32]
 8008836:	f003 0308 	and.w	r3, r3, #8
 800883a:	2b00      	cmp	r3, #0
 800883c:	d15c      	bne.n	80088f8 <osMutexNew+0x124>
      mem = -1;
 800883e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008842:	61bb      	str	r3, [r7, #24]

      if (attr != NULL) {
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	2b00      	cmp	r3, #0
 8008848:	d015      	beq.n	8008876 <osMutexNew+0xa2>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	689b      	ldr	r3, [r3, #8]
 800884e:	2b00      	cmp	r3, #0
 8008850:	d006      	beq.n	8008860 <osMutexNew+0x8c>
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	68db      	ldr	r3, [r3, #12]
 8008856:	2b4f      	cmp	r3, #79	; 0x4f
 8008858:	d902      	bls.n	8008860 <osMutexNew+0x8c>
          mem = 1;
 800885a:	2301      	movs	r3, #1
 800885c:	61bb      	str	r3, [r7, #24]
 800885e:	e00c      	b.n	800887a <osMutexNew+0xa6>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	689b      	ldr	r3, [r3, #8]
 8008864:	2b00      	cmp	r3, #0
 8008866:	d108      	bne.n	800887a <osMutexNew+0xa6>
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	68db      	ldr	r3, [r3, #12]
 800886c:	2b00      	cmp	r3, #0
 800886e:	d104      	bne.n	800887a <osMutexNew+0xa6>
            mem = 0;
 8008870:	2300      	movs	r3, #0
 8008872:	61bb      	str	r3, [r7, #24]
 8008874:	e001      	b.n	800887a <osMutexNew+0xa6>
          }
        }
      }
      else {
        mem = 0;
 8008876:	2300      	movs	r3, #0
 8008878:	61bb      	str	r3, [r7, #24]
      }

      if (mem == 1) {
 800887a:	69bb      	ldr	r3, [r7, #24]
 800887c:	2b01      	cmp	r3, #1
 800887e:	d112      	bne.n	80088a6 <osMutexNew+0xd2>
        if (rmtx != 0U) {
 8008880:	69fb      	ldr	r3, [r7, #28]
 8008882:	2b00      	cmp	r3, #0
 8008884:	d007      	beq.n	8008896 <osMutexNew+0xc2>
          hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	689b      	ldr	r3, [r3, #8]
 800888a:	4619      	mov	r1, r3
 800888c:	2004      	movs	r0, #4
 800888e:	f000 fe05 	bl	800949c <xQueueCreateMutexStatic>
 8008892:	6278      	str	r0, [r7, #36]	; 0x24
 8008894:	e016      	b.n	80088c4 <osMutexNew+0xf0>
        }
        else {
          hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	689b      	ldr	r3, [r3, #8]
 800889a:	4619      	mov	r1, r3
 800889c:	2001      	movs	r0, #1
 800889e:	f000 fdfd 	bl	800949c <xQueueCreateMutexStatic>
 80088a2:	6278      	str	r0, [r7, #36]	; 0x24
 80088a4:	e00e      	b.n	80088c4 <osMutexNew+0xf0>
        }
      }
      else {
        if (mem == 0) {
 80088a6:	69bb      	ldr	r3, [r7, #24]
 80088a8:	2b00      	cmp	r3, #0
 80088aa:	d10b      	bne.n	80088c4 <osMutexNew+0xf0>
          if (rmtx != 0U) {
 80088ac:	69fb      	ldr	r3, [r7, #28]
 80088ae:	2b00      	cmp	r3, #0
 80088b0:	d004      	beq.n	80088bc <osMutexNew+0xe8>
            hMutex = xSemaphoreCreateRecursiveMutex ();
 80088b2:	2004      	movs	r0, #4
 80088b4:	f000 fdda 	bl	800946c <xQueueCreateMutex>
 80088b8:	6278      	str	r0, [r7, #36]	; 0x24
 80088ba:	e003      	b.n	80088c4 <osMutexNew+0xf0>
          } else {
            hMutex = xSemaphoreCreateMutex ();
 80088bc:	2001      	movs	r0, #1
 80088be:	f000 fdd5 	bl	800946c <xQueueCreateMutex>
 80088c2:	6278      	str	r0, [r7, #36]	; 0x24
          }
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 80088c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088c6:	2b00      	cmp	r3, #0
 80088c8:	d00c      	beq.n	80088e4 <osMutexNew+0x110>
        if (attr != NULL) {
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	2b00      	cmp	r3, #0
 80088ce:	d003      	beq.n	80088d8 <osMutexNew+0x104>
          name = attr->name;
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	681b      	ldr	r3, [r3, #0]
 80088d4:	617b      	str	r3, [r7, #20]
 80088d6:	e001      	b.n	80088dc <osMutexNew+0x108>
        } else {
          name = NULL;
 80088d8:	2300      	movs	r3, #0
 80088da:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hMutex, name);
 80088dc:	6979      	ldr	r1, [r7, #20]
 80088de:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80088e0:	f001 fc8a 	bl	800a1f8 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 80088e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088e6:	2b00      	cmp	r3, #0
 80088e8:	d006      	beq.n	80088f8 <osMutexNew+0x124>
 80088ea:	69fb      	ldr	r3, [r7, #28]
 80088ec:	2b00      	cmp	r3, #0
 80088ee:	d003      	beq.n	80088f8 <osMutexNew+0x124>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 80088f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088f2:	f043 0301 	orr.w	r3, r3, #1
 80088f6:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }
  }

  return ((osMutexId_t)hMutex);
 80088f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80088fa:	4618      	mov	r0, r3
 80088fc:	3728      	adds	r7, #40	; 0x28
 80088fe:	46bd      	mov	sp, r7
 8008900:	bd80      	pop	{r7, pc}
 8008902:	bf00      	nop
 8008904:	20000214 	.word	0x20000214

08008908 <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 8008908:	b580      	push	{r7, lr}
 800890a:	b088      	sub	sp, #32
 800890c:	af00      	add	r7, sp, #0
 800890e:	6078      	str	r0, [r7, #4]
 8008910:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	f023 0301 	bic.w	r3, r3, #1
 8008918:	61bb      	str	r3, [r7, #24]

  rmtx = (uint32_t)mutex_id & 1U;
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	f003 0301 	and.w	r3, r3, #1
 8008920:	617b      	str	r3, [r7, #20]

  stat = osOK;
 8008922:	2300      	movs	r3, #0
 8008924:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008926:	f3ef 8305 	mrs	r3, IPSR
 800892a:	613b      	str	r3, [r7, #16]
  return(result);
 800892c:	693b      	ldr	r3, [r7, #16]

  if (IS_IRQ()) {
 800892e:	2b00      	cmp	r3, #0
 8008930:	d10f      	bne.n	8008952 <osMutexAcquire+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008932:	f3ef 8310 	mrs	r3, PRIMASK
 8008936:	60fb      	str	r3, [r7, #12]
  return(result);
 8008938:	68fb      	ldr	r3, [r7, #12]
 800893a:	2b00      	cmp	r3, #0
 800893c:	d109      	bne.n	8008952 <osMutexAcquire+0x4a>
 800893e:	4b20      	ldr	r3, [pc, #128]	; (80089c0 <osMutexAcquire+0xb8>)
 8008940:	681b      	ldr	r3, [r3, #0]
 8008942:	2b02      	cmp	r3, #2
 8008944:	d109      	bne.n	800895a <osMutexAcquire+0x52>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8008946:	f3ef 8311 	mrs	r3, BASEPRI
 800894a:	60bb      	str	r3, [r7, #8]
  return(result);
 800894c:	68bb      	ldr	r3, [r7, #8]
 800894e:	2b00      	cmp	r3, #0
 8008950:	d003      	beq.n	800895a <osMutexAcquire+0x52>
    stat = osErrorISR;
 8008952:	f06f 0305 	mvn.w	r3, #5
 8008956:	61fb      	str	r3, [r7, #28]
 8008958:	e02c      	b.n	80089b4 <osMutexAcquire+0xac>
  }
  else if (hMutex == NULL) {
 800895a:	69bb      	ldr	r3, [r7, #24]
 800895c:	2b00      	cmp	r3, #0
 800895e:	d103      	bne.n	8008968 <osMutexAcquire+0x60>
    stat = osErrorParameter;
 8008960:	f06f 0303 	mvn.w	r3, #3
 8008964:	61fb      	str	r3, [r7, #28]
 8008966:	e025      	b.n	80089b4 <osMutexAcquire+0xac>
  }
  else {
    if (rmtx != 0U) {
 8008968:	697b      	ldr	r3, [r7, #20]
 800896a:	2b00      	cmp	r3, #0
 800896c:	d011      	beq.n	8008992 <osMutexAcquire+0x8a>
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 800896e:	6839      	ldr	r1, [r7, #0]
 8008970:	69b8      	ldr	r0, [r7, #24]
 8008972:	f000 fde1 	bl	8009538 <xQueueTakeMutexRecursive>
 8008976:	4603      	mov	r3, r0
 8008978:	2b01      	cmp	r3, #1
 800897a:	d01b      	beq.n	80089b4 <osMutexAcquire+0xac>
        if (timeout != 0U) {
 800897c:	683b      	ldr	r3, [r7, #0]
 800897e:	2b00      	cmp	r3, #0
 8008980:	d003      	beq.n	800898a <osMutexAcquire+0x82>
          stat = osErrorTimeout;
 8008982:	f06f 0301 	mvn.w	r3, #1
 8008986:	61fb      	str	r3, [r7, #28]
 8008988:	e014      	b.n	80089b4 <osMutexAcquire+0xac>
        } else {
          stat = osErrorResource;
 800898a:	f06f 0302 	mvn.w	r3, #2
 800898e:	61fb      	str	r3, [r7, #28]
 8008990:	e010      	b.n	80089b4 <osMutexAcquire+0xac>
        }
      }
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 8008992:	6839      	ldr	r1, [r7, #0]
 8008994:	69b8      	ldr	r0, [r7, #24]
 8008996:	f001 f95f 	bl	8009c58 <xQueueSemaphoreTake>
 800899a:	4603      	mov	r3, r0
 800899c:	2b01      	cmp	r3, #1
 800899e:	d009      	beq.n	80089b4 <osMutexAcquire+0xac>
        if (timeout != 0U) {
 80089a0:	683b      	ldr	r3, [r7, #0]
 80089a2:	2b00      	cmp	r3, #0
 80089a4:	d003      	beq.n	80089ae <osMutexAcquire+0xa6>
          stat = osErrorTimeout;
 80089a6:	f06f 0301 	mvn.w	r3, #1
 80089aa:	61fb      	str	r3, [r7, #28]
 80089ac:	e002      	b.n	80089b4 <osMutexAcquire+0xac>
        } else {
          stat = osErrorResource;
 80089ae:	f06f 0302 	mvn.w	r3, #2
 80089b2:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 80089b4:	69fb      	ldr	r3, [r7, #28]
}
 80089b6:	4618      	mov	r0, r3
 80089b8:	3720      	adds	r7, #32
 80089ba:	46bd      	mov	sp, r7
 80089bc:	bd80      	pop	{r7, pc}
 80089be:	bf00      	nop
 80089c0:	20000214 	.word	0x20000214

080089c4 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 80089c4:	b580      	push	{r7, lr}
 80089c6:	b088      	sub	sp, #32
 80089c8:	af00      	add	r7, sp, #0
 80089ca:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	f023 0301 	bic.w	r3, r3, #1
 80089d2:	61bb      	str	r3, [r7, #24]

  rmtx = (uint32_t)mutex_id & 1U;
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	f003 0301 	and.w	r3, r3, #1
 80089da:	617b      	str	r3, [r7, #20]

  stat = osOK;
 80089dc:	2300      	movs	r3, #0
 80089de:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80089e0:	f3ef 8305 	mrs	r3, IPSR
 80089e4:	613b      	str	r3, [r7, #16]
  return(result);
 80089e6:	693b      	ldr	r3, [r7, #16]

  if (IS_IRQ()) {
 80089e8:	2b00      	cmp	r3, #0
 80089ea:	d10f      	bne.n	8008a0c <osMutexRelease+0x48>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80089ec:	f3ef 8310 	mrs	r3, PRIMASK
 80089f0:	60fb      	str	r3, [r7, #12]
  return(result);
 80089f2:	68fb      	ldr	r3, [r7, #12]
 80089f4:	2b00      	cmp	r3, #0
 80089f6:	d109      	bne.n	8008a0c <osMutexRelease+0x48>
 80089f8:	4b19      	ldr	r3, [pc, #100]	; (8008a60 <osMutexRelease+0x9c>)
 80089fa:	681b      	ldr	r3, [r3, #0]
 80089fc:	2b02      	cmp	r3, #2
 80089fe:	d109      	bne.n	8008a14 <osMutexRelease+0x50>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8008a00:	f3ef 8311 	mrs	r3, BASEPRI
 8008a04:	60bb      	str	r3, [r7, #8]
  return(result);
 8008a06:	68bb      	ldr	r3, [r7, #8]
 8008a08:	2b00      	cmp	r3, #0
 8008a0a:	d003      	beq.n	8008a14 <osMutexRelease+0x50>
    stat = osErrorISR;
 8008a0c:	f06f 0305 	mvn.w	r3, #5
 8008a10:	61fb      	str	r3, [r7, #28]
 8008a12:	e01f      	b.n	8008a54 <osMutexRelease+0x90>
  }
  else if (hMutex == NULL) {
 8008a14:	69bb      	ldr	r3, [r7, #24]
 8008a16:	2b00      	cmp	r3, #0
 8008a18:	d103      	bne.n	8008a22 <osMutexRelease+0x5e>
    stat = osErrorParameter;
 8008a1a:	f06f 0303 	mvn.w	r3, #3
 8008a1e:	61fb      	str	r3, [r7, #28]
 8008a20:	e018      	b.n	8008a54 <osMutexRelease+0x90>
  }
  else {
    if (rmtx != 0U) {
 8008a22:	697b      	ldr	r3, [r7, #20]
 8008a24:	2b00      	cmp	r3, #0
 8008a26:	d009      	beq.n	8008a3c <osMutexRelease+0x78>
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 8008a28:	69b8      	ldr	r0, [r7, #24]
 8008a2a:	f000 fd52 	bl	80094d2 <xQueueGiveMutexRecursive>
 8008a2e:	4603      	mov	r3, r0
 8008a30:	2b01      	cmp	r3, #1
 8008a32:	d00f      	beq.n	8008a54 <osMutexRelease+0x90>
        stat = osErrorResource;
 8008a34:	f06f 0302 	mvn.w	r3, #2
 8008a38:	61fb      	str	r3, [r7, #28]
 8008a3a:	e00b      	b.n	8008a54 <osMutexRelease+0x90>
      }
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 8008a3c:	2300      	movs	r3, #0
 8008a3e:	2200      	movs	r2, #0
 8008a40:	2100      	movs	r1, #0
 8008a42:	69b8      	ldr	r0, [r7, #24]
 8008a44:	f000 fe14 	bl	8009670 <xQueueGenericSend>
 8008a48:	4603      	mov	r3, r0
 8008a4a:	2b01      	cmp	r3, #1
 8008a4c:	d002      	beq.n	8008a54 <osMutexRelease+0x90>
        stat = osErrorResource;
 8008a4e:	f06f 0302 	mvn.w	r3, #2
 8008a52:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return (stat);
 8008a54:	69fb      	ldr	r3, [r7, #28]
}
 8008a56:	4618      	mov	r0, r3
 8008a58:	3720      	adds	r7, #32
 8008a5a:	46bd      	mov	sp, r7
 8008a5c:	bd80      	pop	{r7, pc}
 8008a5e:	bf00      	nop
 8008a60:	20000214 	.word	0x20000214

08008a64 <osSemaphoreNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8008a64:	b580      	push	{r7, lr}
 8008a66:	b08c      	sub	sp, #48	; 0x30
 8008a68:	af02      	add	r7, sp, #8
 8008a6a:	60f8      	str	r0, [r7, #12]
 8008a6c:	60b9      	str	r1, [r7, #8]
 8008a6e:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 8008a70:	2300      	movs	r3, #0
 8008a72:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008a74:	f3ef 8305 	mrs	r3, IPSR
 8008a78:	61bb      	str	r3, [r7, #24]
  return(result);
 8008a7a:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8008a7c:	2b00      	cmp	r3, #0
 8008a7e:	f040 8088 	bne.w	8008b92 <osSemaphoreNew+0x12e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008a82:	f3ef 8310 	mrs	r3, PRIMASK
 8008a86:	617b      	str	r3, [r7, #20]
  return(result);
 8008a88:	697b      	ldr	r3, [r7, #20]
 8008a8a:	2b00      	cmp	r3, #0
 8008a8c:	f040 8081 	bne.w	8008b92 <osSemaphoreNew+0x12e>
 8008a90:	4b42      	ldr	r3, [pc, #264]	; (8008b9c <osSemaphoreNew+0x138>)
 8008a92:	681b      	ldr	r3, [r3, #0]
 8008a94:	2b02      	cmp	r3, #2
 8008a96:	d105      	bne.n	8008aa4 <osSemaphoreNew+0x40>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8008a98:	f3ef 8311 	mrs	r3, BASEPRI
 8008a9c:	613b      	str	r3, [r7, #16]
  return(result);
 8008a9e:	693b      	ldr	r3, [r7, #16]
 8008aa0:	2b00      	cmp	r3, #0
 8008aa2:	d176      	bne.n	8008b92 <osSemaphoreNew+0x12e>
 8008aa4:	68fb      	ldr	r3, [r7, #12]
 8008aa6:	2b00      	cmp	r3, #0
 8008aa8:	d073      	beq.n	8008b92 <osSemaphoreNew+0x12e>
 8008aaa:	68ba      	ldr	r2, [r7, #8]
 8008aac:	68fb      	ldr	r3, [r7, #12]
 8008aae:	429a      	cmp	r2, r3
 8008ab0:	d86f      	bhi.n	8008b92 <osSemaphoreNew+0x12e>
    mem = -1;
 8008ab2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008ab6:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	2b00      	cmp	r3, #0
 8008abc:	d015      	beq.n	8008aea <osSemaphoreNew+0x86>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	689b      	ldr	r3, [r3, #8]
 8008ac2:	2b00      	cmp	r3, #0
 8008ac4:	d006      	beq.n	8008ad4 <osSemaphoreNew+0x70>
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	68db      	ldr	r3, [r3, #12]
 8008aca:	2b4f      	cmp	r3, #79	; 0x4f
 8008acc:	d902      	bls.n	8008ad4 <osSemaphoreNew+0x70>
        mem = 1;
 8008ace:	2301      	movs	r3, #1
 8008ad0:	623b      	str	r3, [r7, #32]
 8008ad2:	e00c      	b.n	8008aee <osSemaphoreNew+0x8a>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	689b      	ldr	r3, [r3, #8]
 8008ad8:	2b00      	cmp	r3, #0
 8008ada:	d108      	bne.n	8008aee <osSemaphoreNew+0x8a>
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	68db      	ldr	r3, [r3, #12]
 8008ae0:	2b00      	cmp	r3, #0
 8008ae2:	d104      	bne.n	8008aee <osSemaphoreNew+0x8a>
          mem = 0;
 8008ae4:	2300      	movs	r3, #0
 8008ae6:	623b      	str	r3, [r7, #32]
 8008ae8:	e001      	b.n	8008aee <osSemaphoreNew+0x8a>
        }
      }
    }
    else {
      mem = 0;
 8008aea:	2300      	movs	r3, #0
 8008aec:	623b      	str	r3, [r7, #32]
    }

    if (mem != -1) {
 8008aee:	6a3b      	ldr	r3, [r7, #32]
 8008af0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008af4:	d04d      	beq.n	8008b92 <osSemaphoreNew+0x12e>
      if (max_count == 1U) {
 8008af6:	68fb      	ldr	r3, [r7, #12]
 8008af8:	2b01      	cmp	r3, #1
 8008afa:	d129      	bne.n	8008b50 <osSemaphoreNew+0xec>
        if (mem == 1) {
 8008afc:	6a3b      	ldr	r3, [r7, #32]
 8008afe:	2b01      	cmp	r3, #1
 8008b00:	d10b      	bne.n	8008b1a <osSemaphoreNew+0xb6>
          hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	689a      	ldr	r2, [r3, #8]
 8008b06:	2303      	movs	r3, #3
 8008b08:	9300      	str	r3, [sp, #0]
 8008b0a:	4613      	mov	r3, r2
 8008b0c:	2200      	movs	r2, #0
 8008b0e:	2100      	movs	r1, #0
 8008b10:	2001      	movs	r0, #1
 8008b12:	f000 fbbf 	bl	8009294 <xQueueGenericCreateStatic>
 8008b16:	6278      	str	r0, [r7, #36]	; 0x24
 8008b18:	e005      	b.n	8008b26 <osSemaphoreNew+0xc2>
        }
        else {
          hSemaphore = xSemaphoreCreateBinary();
 8008b1a:	2203      	movs	r2, #3
 8008b1c:	2100      	movs	r1, #0
 8008b1e:	2001      	movs	r0, #1
 8008b20:	f000 fc2a 	bl	8009378 <xQueueGenericCreate>
 8008b24:	6278      	str	r0, [r7, #36]	; 0x24
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8008b26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b28:	2b00      	cmp	r3, #0
 8008b2a:	d022      	beq.n	8008b72 <osSemaphoreNew+0x10e>
 8008b2c:	68bb      	ldr	r3, [r7, #8]
 8008b2e:	2b00      	cmp	r3, #0
 8008b30:	d01f      	beq.n	8008b72 <osSemaphoreNew+0x10e>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8008b32:	2300      	movs	r3, #0
 8008b34:	2200      	movs	r2, #0
 8008b36:	2100      	movs	r1, #0
 8008b38:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008b3a:	f000 fd99 	bl	8009670 <xQueueGenericSend>
 8008b3e:	4603      	mov	r3, r0
 8008b40:	2b01      	cmp	r3, #1
 8008b42:	d016      	beq.n	8008b72 <osSemaphoreNew+0x10e>
            vSemaphoreDelete (hSemaphore);
 8008b44:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008b46:	f001 fa0c 	bl	8009f62 <vQueueDelete>
            hSemaphore = NULL;
 8008b4a:	2300      	movs	r3, #0
 8008b4c:	627b      	str	r3, [r7, #36]	; 0x24
 8008b4e:	e010      	b.n	8008b72 <osSemaphoreNew+0x10e>
          }
        }
      }
      else {
        if (mem == 1) {
 8008b50:	6a3b      	ldr	r3, [r7, #32]
 8008b52:	2b01      	cmp	r3, #1
 8008b54:	d108      	bne.n	8008b68 <osSemaphoreNew+0x104>
          hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	689b      	ldr	r3, [r3, #8]
 8008b5a:	461a      	mov	r2, r3
 8008b5c:	68b9      	ldr	r1, [r7, #8]
 8008b5e:	68f8      	ldr	r0, [r7, #12]
 8008b60:	f000 fd1f 	bl	80095a2 <xQueueCreateCountingSemaphoreStatic>
 8008b64:	6278      	str	r0, [r7, #36]	; 0x24
 8008b66:	e004      	b.n	8008b72 <osSemaphoreNew+0x10e>
        }
        else {
          hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8008b68:	68b9      	ldr	r1, [r7, #8]
 8008b6a:	68f8      	ldr	r0, [r7, #12]
 8008b6c:	f000 fd4e 	bl	800960c <xQueueCreateCountingSemaphore>
 8008b70:	6278      	str	r0, [r7, #36]	; 0x24
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 8008b72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b74:	2b00      	cmp	r3, #0
 8008b76:	d00c      	beq.n	8008b92 <osSemaphoreNew+0x12e>
        if (attr != NULL) {
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	2b00      	cmp	r3, #0
 8008b7c:	d003      	beq.n	8008b86 <osSemaphoreNew+0x122>
          name = attr->name;
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	681b      	ldr	r3, [r3, #0]
 8008b82:	61fb      	str	r3, [r7, #28]
 8008b84:	e001      	b.n	8008b8a <osSemaphoreNew+0x126>
        } else {
          name = NULL;
 8008b86:	2300      	movs	r3, #0
 8008b88:	61fb      	str	r3, [r7, #28]
        }
        vQueueAddToRegistry (hSemaphore, name);
 8008b8a:	69f9      	ldr	r1, [r7, #28]
 8008b8c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008b8e:	f001 fb33 	bl	800a1f8 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 8008b92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8008b94:	4618      	mov	r0, r3
 8008b96:	3728      	adds	r7, #40	; 0x28
 8008b98:	46bd      	mov	sp, r7
 8008b9a:	bd80      	pop	{r7, pc}
 8008b9c:	20000214 	.word	0x20000214

08008ba0 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 8008ba0:	b580      	push	{r7, lr}
 8008ba2:	b088      	sub	sp, #32
 8008ba4:	af00      	add	r7, sp, #0
 8008ba6:	6078      	str	r0, [r7, #4]
 8008ba8:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8008bae:	2300      	movs	r3, #0
 8008bb0:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 8008bb2:	69bb      	ldr	r3, [r7, #24]
 8008bb4:	2b00      	cmp	r3, #0
 8008bb6:	d103      	bne.n	8008bc0 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 8008bb8:	f06f 0303 	mvn.w	r3, #3
 8008bbc:	61fb      	str	r3, [r7, #28]
 8008bbe:	e04b      	b.n	8008c58 <osSemaphoreAcquire+0xb8>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008bc0:	f3ef 8305 	mrs	r3, IPSR
 8008bc4:	617b      	str	r3, [r7, #20]
  return(result);
 8008bc6:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 8008bc8:	2b00      	cmp	r3, #0
 8008bca:	d10f      	bne.n	8008bec <osSemaphoreAcquire+0x4c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008bcc:	f3ef 8310 	mrs	r3, PRIMASK
 8008bd0:	613b      	str	r3, [r7, #16]
  return(result);
 8008bd2:	693b      	ldr	r3, [r7, #16]
 8008bd4:	2b00      	cmp	r3, #0
 8008bd6:	d109      	bne.n	8008bec <osSemaphoreAcquire+0x4c>
 8008bd8:	4b22      	ldr	r3, [pc, #136]	; (8008c64 <osSemaphoreAcquire+0xc4>)
 8008bda:	681b      	ldr	r3, [r3, #0]
 8008bdc:	2b02      	cmp	r3, #2
 8008bde:	d128      	bne.n	8008c32 <osSemaphoreAcquire+0x92>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8008be0:	f3ef 8311 	mrs	r3, BASEPRI
 8008be4:	60fb      	str	r3, [r7, #12]
  return(result);
 8008be6:	68fb      	ldr	r3, [r7, #12]
 8008be8:	2b00      	cmp	r3, #0
 8008bea:	d022      	beq.n	8008c32 <osSemaphoreAcquire+0x92>
    if (timeout != 0U) {
 8008bec:	683b      	ldr	r3, [r7, #0]
 8008bee:	2b00      	cmp	r3, #0
 8008bf0:	d003      	beq.n	8008bfa <osSemaphoreAcquire+0x5a>
      stat = osErrorParameter;
 8008bf2:	f06f 0303 	mvn.w	r3, #3
 8008bf6:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 8008bf8:	e02d      	b.n	8008c56 <osSemaphoreAcquire+0xb6>
    }
    else {
      yield = pdFALSE;
 8008bfa:	2300      	movs	r3, #0
 8008bfc:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 8008bfe:	f107 0308 	add.w	r3, r7, #8
 8008c02:	461a      	mov	r2, r3
 8008c04:	2100      	movs	r1, #0
 8008c06:	69b8      	ldr	r0, [r7, #24]
 8008c08:	f001 f92e 	bl	8009e68 <xQueueReceiveFromISR>
 8008c0c:	4603      	mov	r3, r0
 8008c0e:	2b01      	cmp	r3, #1
 8008c10:	d003      	beq.n	8008c1a <osSemaphoreAcquire+0x7a>
        stat = osErrorResource;
 8008c12:	f06f 0302 	mvn.w	r3, #2
 8008c16:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 8008c18:	e01d      	b.n	8008c56 <osSemaphoreAcquire+0xb6>
      } else {
        portYIELD_FROM_ISR (yield);
 8008c1a:	68bb      	ldr	r3, [r7, #8]
 8008c1c:	2b00      	cmp	r3, #0
 8008c1e:	d01a      	beq.n	8008c56 <osSemaphoreAcquire+0xb6>
 8008c20:	4b11      	ldr	r3, [pc, #68]	; (8008c68 <osSemaphoreAcquire+0xc8>)
 8008c22:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008c26:	601a      	str	r2, [r3, #0]
 8008c28:	f3bf 8f4f 	dsb	sy
 8008c2c:	f3bf 8f6f 	isb	sy
    if (timeout != 0U) {
 8008c30:	e011      	b.n	8008c56 <osSemaphoreAcquire+0xb6>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 8008c32:	6839      	ldr	r1, [r7, #0]
 8008c34:	69b8      	ldr	r0, [r7, #24]
 8008c36:	f001 f80f 	bl	8009c58 <xQueueSemaphoreTake>
 8008c3a:	4603      	mov	r3, r0
 8008c3c:	2b01      	cmp	r3, #1
 8008c3e:	d00b      	beq.n	8008c58 <osSemaphoreAcquire+0xb8>
      if (timeout != 0U) {
 8008c40:	683b      	ldr	r3, [r7, #0]
 8008c42:	2b00      	cmp	r3, #0
 8008c44:	d003      	beq.n	8008c4e <osSemaphoreAcquire+0xae>
        stat = osErrorTimeout;
 8008c46:	f06f 0301 	mvn.w	r3, #1
 8008c4a:	61fb      	str	r3, [r7, #28]
 8008c4c:	e004      	b.n	8008c58 <osSemaphoreAcquire+0xb8>
      } else {
        stat = osErrorResource;
 8008c4e:	f06f 0302 	mvn.w	r3, #2
 8008c52:	61fb      	str	r3, [r7, #28]
 8008c54:	e000      	b.n	8008c58 <osSemaphoreAcquire+0xb8>
    if (timeout != 0U) {
 8008c56:	bf00      	nop
      }
    }
  }

  return (stat);
 8008c58:	69fb      	ldr	r3, [r7, #28]
}
 8008c5a:	4618      	mov	r0, r3
 8008c5c:	3720      	adds	r7, #32
 8008c5e:	46bd      	mov	sp, r7
 8008c60:	bd80      	pop	{r7, pc}
 8008c62:	bf00      	nop
 8008c64:	20000214 	.word	0x20000214
 8008c68:	e000ed04 	.word	0xe000ed04

08008c6c <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 8008c6c:	b580      	push	{r7, lr}
 8008c6e:	b088      	sub	sp, #32
 8008c70:	af00      	add	r7, sp, #0
 8008c72:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8008c78:	2300      	movs	r3, #0
 8008c7a:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 8008c7c:	69bb      	ldr	r3, [r7, #24]
 8008c7e:	2b00      	cmp	r3, #0
 8008c80:	d103      	bne.n	8008c8a <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 8008c82:	f06f 0303 	mvn.w	r3, #3
 8008c86:	61fb      	str	r3, [r7, #28]
 8008c88:	e03e      	b.n	8008d08 <osSemaphoreRelease+0x9c>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008c8a:	f3ef 8305 	mrs	r3, IPSR
 8008c8e:	617b      	str	r3, [r7, #20]
  return(result);
 8008c90:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 8008c92:	2b00      	cmp	r3, #0
 8008c94:	d10f      	bne.n	8008cb6 <osSemaphoreRelease+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008c96:	f3ef 8310 	mrs	r3, PRIMASK
 8008c9a:	613b      	str	r3, [r7, #16]
  return(result);
 8008c9c:	693b      	ldr	r3, [r7, #16]
 8008c9e:	2b00      	cmp	r3, #0
 8008ca0:	d109      	bne.n	8008cb6 <osSemaphoreRelease+0x4a>
 8008ca2:	4b1c      	ldr	r3, [pc, #112]	; (8008d14 <osSemaphoreRelease+0xa8>)
 8008ca4:	681b      	ldr	r3, [r3, #0]
 8008ca6:	2b02      	cmp	r3, #2
 8008ca8:	d120      	bne.n	8008cec <osSemaphoreRelease+0x80>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8008caa:	f3ef 8311 	mrs	r3, BASEPRI
 8008cae:	60fb      	str	r3, [r7, #12]
  return(result);
 8008cb0:	68fb      	ldr	r3, [r7, #12]
 8008cb2:	2b00      	cmp	r3, #0
 8008cb4:	d01a      	beq.n	8008cec <osSemaphoreRelease+0x80>
    yield = pdFALSE;
 8008cb6:	2300      	movs	r3, #0
 8008cb8:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8008cba:	f107 0308 	add.w	r3, r7, #8
 8008cbe:	4619      	mov	r1, r3
 8008cc0:	69b8      	ldr	r0, [r7, #24]
 8008cc2:	f000 fe63 	bl	800998c <xQueueGiveFromISR>
 8008cc6:	4603      	mov	r3, r0
 8008cc8:	2b01      	cmp	r3, #1
 8008cca:	d003      	beq.n	8008cd4 <osSemaphoreRelease+0x68>
      stat = osErrorResource;
 8008ccc:	f06f 0302 	mvn.w	r3, #2
 8008cd0:	61fb      	str	r3, [r7, #28]
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8008cd2:	e018      	b.n	8008d06 <osSemaphoreRelease+0x9a>
    } else {
      portYIELD_FROM_ISR (yield);
 8008cd4:	68bb      	ldr	r3, [r7, #8]
 8008cd6:	2b00      	cmp	r3, #0
 8008cd8:	d015      	beq.n	8008d06 <osSemaphoreRelease+0x9a>
 8008cda:	4b0f      	ldr	r3, [pc, #60]	; (8008d18 <osSemaphoreRelease+0xac>)
 8008cdc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008ce0:	601a      	str	r2, [r3, #0]
 8008ce2:	f3bf 8f4f 	dsb	sy
 8008ce6:	f3bf 8f6f 	isb	sy
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8008cea:	e00c      	b.n	8008d06 <osSemaphoreRelease+0x9a>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8008cec:	2300      	movs	r3, #0
 8008cee:	2200      	movs	r2, #0
 8008cf0:	2100      	movs	r1, #0
 8008cf2:	69b8      	ldr	r0, [r7, #24]
 8008cf4:	f000 fcbc 	bl	8009670 <xQueueGenericSend>
 8008cf8:	4603      	mov	r3, r0
 8008cfa:	2b01      	cmp	r3, #1
 8008cfc:	d004      	beq.n	8008d08 <osSemaphoreRelease+0x9c>
      stat = osErrorResource;
 8008cfe:	f06f 0302 	mvn.w	r3, #2
 8008d02:	61fb      	str	r3, [r7, #28]
 8008d04:	e000      	b.n	8008d08 <osSemaphoreRelease+0x9c>
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8008d06:	bf00      	nop
    }
  }

  return (stat);
 8008d08:	69fb      	ldr	r3, [r7, #28]
}
 8008d0a:	4618      	mov	r0, r3
 8008d0c:	3720      	adds	r7, #32
 8008d0e:	46bd      	mov	sp, r7
 8008d10:	bd80      	pop	{r7, pc}
 8008d12:	bf00      	nop
 8008d14:	20000214 	.word	0x20000214
 8008d18:	e000ed04 	.word	0xe000ed04

08008d1c <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8008d1c:	b580      	push	{r7, lr}
 8008d1e:	b08c      	sub	sp, #48	; 0x30
 8008d20:	af02      	add	r7, sp, #8
 8008d22:	60f8      	str	r0, [r7, #12]
 8008d24:	60b9      	str	r1, [r7, #8]
 8008d26:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8008d28:	2300      	movs	r3, #0
 8008d2a:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008d2c:	f3ef 8305 	mrs	r3, IPSR
 8008d30:	61bb      	str	r3, [r7, #24]
  return(result);
 8008d32:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8008d34:	2b00      	cmp	r3, #0
 8008d36:	d170      	bne.n	8008e1a <osMessageQueueNew+0xfe>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008d38:	f3ef 8310 	mrs	r3, PRIMASK
 8008d3c:	617b      	str	r3, [r7, #20]
  return(result);
 8008d3e:	697b      	ldr	r3, [r7, #20]
 8008d40:	2b00      	cmp	r3, #0
 8008d42:	d16a      	bne.n	8008e1a <osMessageQueueNew+0xfe>
 8008d44:	4b37      	ldr	r3, [pc, #220]	; (8008e24 <osMessageQueueNew+0x108>)
 8008d46:	681b      	ldr	r3, [r3, #0]
 8008d48:	2b02      	cmp	r3, #2
 8008d4a:	d105      	bne.n	8008d58 <osMessageQueueNew+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8008d4c:	f3ef 8311 	mrs	r3, BASEPRI
 8008d50:	613b      	str	r3, [r7, #16]
  return(result);
 8008d52:	693b      	ldr	r3, [r7, #16]
 8008d54:	2b00      	cmp	r3, #0
 8008d56:	d160      	bne.n	8008e1a <osMessageQueueNew+0xfe>
 8008d58:	68fb      	ldr	r3, [r7, #12]
 8008d5a:	2b00      	cmp	r3, #0
 8008d5c:	d05d      	beq.n	8008e1a <osMessageQueueNew+0xfe>
 8008d5e:	68bb      	ldr	r3, [r7, #8]
 8008d60:	2b00      	cmp	r3, #0
 8008d62:	d05a      	beq.n	8008e1a <osMessageQueueNew+0xfe>
    mem = -1;
 8008d64:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008d68:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	2b00      	cmp	r3, #0
 8008d6e:	d029      	beq.n	8008dc4 <osMessageQueueNew+0xa8>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	689b      	ldr	r3, [r3, #8]
 8008d74:	2b00      	cmp	r3, #0
 8008d76:	d012      	beq.n	8008d9e <osMessageQueueNew+0x82>
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	68db      	ldr	r3, [r3, #12]
 8008d7c:	2b4f      	cmp	r3, #79	; 0x4f
 8008d7e:	d90e      	bls.n	8008d9e <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8008d84:	2b00      	cmp	r3, #0
 8008d86:	d00a      	beq.n	8008d9e <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	695a      	ldr	r2, [r3, #20]
 8008d8c:	68fb      	ldr	r3, [r7, #12]
 8008d8e:	68b9      	ldr	r1, [r7, #8]
 8008d90:	fb01 f303 	mul.w	r3, r1, r3
 8008d94:	429a      	cmp	r2, r3
 8008d96:	d302      	bcc.n	8008d9e <osMessageQueueNew+0x82>
        mem = 1;
 8008d98:	2301      	movs	r3, #1
 8008d9a:	623b      	str	r3, [r7, #32]
 8008d9c:	e014      	b.n	8008dc8 <osMessageQueueNew+0xac>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	689b      	ldr	r3, [r3, #8]
 8008da2:	2b00      	cmp	r3, #0
 8008da4:	d110      	bne.n	8008dc8 <osMessageQueueNew+0xac>
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	68db      	ldr	r3, [r3, #12]
 8008daa:	2b00      	cmp	r3, #0
 8008dac:	d10c      	bne.n	8008dc8 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8008db2:	2b00      	cmp	r3, #0
 8008db4:	d108      	bne.n	8008dc8 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	695b      	ldr	r3, [r3, #20]
 8008dba:	2b00      	cmp	r3, #0
 8008dbc:	d104      	bne.n	8008dc8 <osMessageQueueNew+0xac>
          mem = 0;
 8008dbe:	2300      	movs	r3, #0
 8008dc0:	623b      	str	r3, [r7, #32]
 8008dc2:	e001      	b.n	8008dc8 <osMessageQueueNew+0xac>
        }
      }
    }
    else {
      mem = 0;
 8008dc4:	2300      	movs	r3, #0
 8008dc6:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8008dc8:	6a3b      	ldr	r3, [r7, #32]
 8008dca:	2b01      	cmp	r3, #1
 8008dcc:	d10c      	bne.n	8008de8 <osMessageQueueNew+0xcc>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	691a      	ldr	r2, [r3, #16]
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	6899      	ldr	r1, [r3, #8]
 8008dd6:	2300      	movs	r3, #0
 8008dd8:	9300      	str	r3, [sp, #0]
 8008dda:	460b      	mov	r3, r1
 8008ddc:	68b9      	ldr	r1, [r7, #8]
 8008dde:	68f8      	ldr	r0, [r7, #12]
 8008de0:	f000 fa58 	bl	8009294 <xQueueGenericCreateStatic>
 8008de4:	6278      	str	r0, [r7, #36]	; 0x24
 8008de6:	e008      	b.n	8008dfa <osMessageQueueNew+0xde>
    }
    else {
      if (mem == 0) {
 8008de8:	6a3b      	ldr	r3, [r7, #32]
 8008dea:	2b00      	cmp	r3, #0
 8008dec:	d105      	bne.n	8008dfa <osMessageQueueNew+0xde>
        hQueue = xQueueCreate (msg_count, msg_size);
 8008dee:	2200      	movs	r2, #0
 8008df0:	68b9      	ldr	r1, [r7, #8]
 8008df2:	68f8      	ldr	r0, [r7, #12]
 8008df4:	f000 fac0 	bl	8009378 <xQueueGenericCreate>
 8008df8:	6278      	str	r0, [r7, #36]	; 0x24
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8008dfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008dfc:	2b00      	cmp	r3, #0
 8008dfe:	d00c      	beq.n	8008e1a <osMessageQueueNew+0xfe>
      if (attr != NULL) {
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	2b00      	cmp	r3, #0
 8008e04:	d003      	beq.n	8008e0e <osMessageQueueNew+0xf2>
        name = attr->name;
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	681b      	ldr	r3, [r3, #0]
 8008e0a:	61fb      	str	r3, [r7, #28]
 8008e0c:	e001      	b.n	8008e12 <osMessageQueueNew+0xf6>
      } else {
        name = NULL;
 8008e0e:	2300      	movs	r3, #0
 8008e10:	61fb      	str	r3, [r7, #28]
      }
      vQueueAddToRegistry (hQueue, name);
 8008e12:	69f9      	ldr	r1, [r7, #28]
 8008e14:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008e16:	f001 f9ef 	bl	800a1f8 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8008e1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8008e1c:	4618      	mov	r0, r3
 8008e1e:	3728      	adds	r7, #40	; 0x28
 8008e20:	46bd      	mov	sp, r7
 8008e22:	bd80      	pop	{r7, pc}
 8008e24:	20000214 	.word	0x20000214

08008e28 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8008e28:	b580      	push	{r7, lr}
 8008e2a:	b08a      	sub	sp, #40	; 0x28
 8008e2c:	af00      	add	r7, sp, #0
 8008e2e:	60f8      	str	r0, [r7, #12]
 8008e30:	60b9      	str	r1, [r7, #8]
 8008e32:	603b      	str	r3, [r7, #0]
 8008e34:	4613      	mov	r3, r2
 8008e36:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8008e38:	68fb      	ldr	r3, [r7, #12]
 8008e3a:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8008e3c:	2300      	movs	r3, #0
 8008e3e:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008e40:	f3ef 8305 	mrs	r3, IPSR
 8008e44:	61fb      	str	r3, [r7, #28]
  return(result);
 8008e46:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 8008e48:	2b00      	cmp	r3, #0
 8008e4a:	d10f      	bne.n	8008e6c <osMessageQueuePut+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008e4c:	f3ef 8310 	mrs	r3, PRIMASK
 8008e50:	61bb      	str	r3, [r7, #24]
  return(result);
 8008e52:	69bb      	ldr	r3, [r7, #24]
 8008e54:	2b00      	cmp	r3, #0
 8008e56:	d109      	bne.n	8008e6c <osMessageQueuePut+0x44>
 8008e58:	4b2b      	ldr	r3, [pc, #172]	; (8008f08 <osMessageQueuePut+0xe0>)
 8008e5a:	681b      	ldr	r3, [r3, #0]
 8008e5c:	2b02      	cmp	r3, #2
 8008e5e:	d12e      	bne.n	8008ebe <osMessageQueuePut+0x96>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8008e60:	f3ef 8311 	mrs	r3, BASEPRI
 8008e64:	617b      	str	r3, [r7, #20]
  return(result);
 8008e66:	697b      	ldr	r3, [r7, #20]
 8008e68:	2b00      	cmp	r3, #0
 8008e6a:	d028      	beq.n	8008ebe <osMessageQueuePut+0x96>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8008e6c:	6a3b      	ldr	r3, [r7, #32]
 8008e6e:	2b00      	cmp	r3, #0
 8008e70:	d005      	beq.n	8008e7e <osMessageQueuePut+0x56>
 8008e72:	68bb      	ldr	r3, [r7, #8]
 8008e74:	2b00      	cmp	r3, #0
 8008e76:	d002      	beq.n	8008e7e <osMessageQueuePut+0x56>
 8008e78:	683b      	ldr	r3, [r7, #0]
 8008e7a:	2b00      	cmp	r3, #0
 8008e7c:	d003      	beq.n	8008e86 <osMessageQueuePut+0x5e>
      stat = osErrorParameter;
 8008e7e:	f06f 0303 	mvn.w	r3, #3
 8008e82:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8008e84:	e039      	b.n	8008efa <osMessageQueuePut+0xd2>
    }
    else {
      yield = pdFALSE;
 8008e86:	2300      	movs	r3, #0
 8008e88:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8008e8a:	f107 0210 	add.w	r2, r7, #16
 8008e8e:	2300      	movs	r3, #0
 8008e90:	68b9      	ldr	r1, [r7, #8]
 8008e92:	6a38      	ldr	r0, [r7, #32]
 8008e94:	f000 fce6 	bl	8009864 <xQueueGenericSendFromISR>
 8008e98:	4603      	mov	r3, r0
 8008e9a:	2b01      	cmp	r3, #1
 8008e9c:	d003      	beq.n	8008ea6 <osMessageQueuePut+0x7e>
        stat = osErrorResource;
 8008e9e:	f06f 0302 	mvn.w	r3, #2
 8008ea2:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8008ea4:	e029      	b.n	8008efa <osMessageQueuePut+0xd2>
      } else {
        portYIELD_FROM_ISR (yield);
 8008ea6:	693b      	ldr	r3, [r7, #16]
 8008ea8:	2b00      	cmp	r3, #0
 8008eaa:	d026      	beq.n	8008efa <osMessageQueuePut+0xd2>
 8008eac:	4b17      	ldr	r3, [pc, #92]	; (8008f0c <osMessageQueuePut+0xe4>)
 8008eae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008eb2:	601a      	str	r2, [r3, #0]
 8008eb4:	f3bf 8f4f 	dsb	sy
 8008eb8:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8008ebc:	e01d      	b.n	8008efa <osMessageQueuePut+0xd2>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8008ebe:	6a3b      	ldr	r3, [r7, #32]
 8008ec0:	2b00      	cmp	r3, #0
 8008ec2:	d002      	beq.n	8008eca <osMessageQueuePut+0xa2>
 8008ec4:	68bb      	ldr	r3, [r7, #8]
 8008ec6:	2b00      	cmp	r3, #0
 8008ec8:	d103      	bne.n	8008ed2 <osMessageQueuePut+0xaa>
      stat = osErrorParameter;
 8008eca:	f06f 0303 	mvn.w	r3, #3
 8008ece:	627b      	str	r3, [r7, #36]	; 0x24
 8008ed0:	e014      	b.n	8008efc <osMessageQueuePut+0xd4>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8008ed2:	2300      	movs	r3, #0
 8008ed4:	683a      	ldr	r2, [r7, #0]
 8008ed6:	68b9      	ldr	r1, [r7, #8]
 8008ed8:	6a38      	ldr	r0, [r7, #32]
 8008eda:	f000 fbc9 	bl	8009670 <xQueueGenericSend>
 8008ede:	4603      	mov	r3, r0
 8008ee0:	2b01      	cmp	r3, #1
 8008ee2:	d00b      	beq.n	8008efc <osMessageQueuePut+0xd4>
        if (timeout != 0U) {
 8008ee4:	683b      	ldr	r3, [r7, #0]
 8008ee6:	2b00      	cmp	r3, #0
 8008ee8:	d003      	beq.n	8008ef2 <osMessageQueuePut+0xca>
          stat = osErrorTimeout;
 8008eea:	f06f 0301 	mvn.w	r3, #1
 8008eee:	627b      	str	r3, [r7, #36]	; 0x24
 8008ef0:	e004      	b.n	8008efc <osMessageQueuePut+0xd4>
        } else {
          stat = osErrorResource;
 8008ef2:	f06f 0302 	mvn.w	r3, #2
 8008ef6:	627b      	str	r3, [r7, #36]	; 0x24
 8008ef8:	e000      	b.n	8008efc <osMessageQueuePut+0xd4>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8008efa:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 8008efc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8008efe:	4618      	mov	r0, r3
 8008f00:	3728      	adds	r7, #40	; 0x28
 8008f02:	46bd      	mov	sp, r7
 8008f04:	bd80      	pop	{r7, pc}
 8008f06:	bf00      	nop
 8008f08:	20000214 	.word	0x20000214
 8008f0c:	e000ed04 	.word	0xe000ed04

08008f10 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8008f10:	b580      	push	{r7, lr}
 8008f12:	b08a      	sub	sp, #40	; 0x28
 8008f14:	af00      	add	r7, sp, #0
 8008f16:	60f8      	str	r0, [r7, #12]
 8008f18:	60b9      	str	r1, [r7, #8]
 8008f1a:	607a      	str	r2, [r7, #4]
 8008f1c:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8008f1e:	68fb      	ldr	r3, [r7, #12]
 8008f20:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8008f22:	2300      	movs	r3, #0
 8008f24:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008f26:	f3ef 8305 	mrs	r3, IPSR
 8008f2a:	61fb      	str	r3, [r7, #28]
  return(result);
 8008f2c:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 8008f2e:	2b00      	cmp	r3, #0
 8008f30:	d10f      	bne.n	8008f52 <osMessageQueueGet+0x42>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008f32:	f3ef 8310 	mrs	r3, PRIMASK
 8008f36:	61bb      	str	r3, [r7, #24]
  return(result);
 8008f38:	69bb      	ldr	r3, [r7, #24]
 8008f3a:	2b00      	cmp	r3, #0
 8008f3c:	d109      	bne.n	8008f52 <osMessageQueueGet+0x42>
 8008f3e:	4b2b      	ldr	r3, [pc, #172]	; (8008fec <osMessageQueueGet+0xdc>)
 8008f40:	681b      	ldr	r3, [r3, #0]
 8008f42:	2b02      	cmp	r3, #2
 8008f44:	d12e      	bne.n	8008fa4 <osMessageQueueGet+0x94>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8008f46:	f3ef 8311 	mrs	r3, BASEPRI
 8008f4a:	617b      	str	r3, [r7, #20]
  return(result);
 8008f4c:	697b      	ldr	r3, [r7, #20]
 8008f4e:	2b00      	cmp	r3, #0
 8008f50:	d028      	beq.n	8008fa4 <osMessageQueueGet+0x94>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8008f52:	6a3b      	ldr	r3, [r7, #32]
 8008f54:	2b00      	cmp	r3, #0
 8008f56:	d005      	beq.n	8008f64 <osMessageQueueGet+0x54>
 8008f58:	68bb      	ldr	r3, [r7, #8]
 8008f5a:	2b00      	cmp	r3, #0
 8008f5c:	d002      	beq.n	8008f64 <osMessageQueueGet+0x54>
 8008f5e:	683b      	ldr	r3, [r7, #0]
 8008f60:	2b00      	cmp	r3, #0
 8008f62:	d003      	beq.n	8008f6c <osMessageQueueGet+0x5c>
      stat = osErrorParameter;
 8008f64:	f06f 0303 	mvn.w	r3, #3
 8008f68:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8008f6a:	e038      	b.n	8008fde <osMessageQueueGet+0xce>
    }
    else {
      yield = pdFALSE;
 8008f6c:	2300      	movs	r3, #0
 8008f6e:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8008f70:	f107 0310 	add.w	r3, r7, #16
 8008f74:	461a      	mov	r2, r3
 8008f76:	68b9      	ldr	r1, [r7, #8]
 8008f78:	6a38      	ldr	r0, [r7, #32]
 8008f7a:	f000 ff75 	bl	8009e68 <xQueueReceiveFromISR>
 8008f7e:	4603      	mov	r3, r0
 8008f80:	2b01      	cmp	r3, #1
 8008f82:	d003      	beq.n	8008f8c <osMessageQueueGet+0x7c>
        stat = osErrorResource;
 8008f84:	f06f 0302 	mvn.w	r3, #2
 8008f88:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8008f8a:	e028      	b.n	8008fde <osMessageQueueGet+0xce>
      } else {
        portYIELD_FROM_ISR (yield);
 8008f8c:	693b      	ldr	r3, [r7, #16]
 8008f8e:	2b00      	cmp	r3, #0
 8008f90:	d025      	beq.n	8008fde <osMessageQueueGet+0xce>
 8008f92:	4b17      	ldr	r3, [pc, #92]	; (8008ff0 <osMessageQueueGet+0xe0>)
 8008f94:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008f98:	601a      	str	r2, [r3, #0]
 8008f9a:	f3bf 8f4f 	dsb	sy
 8008f9e:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8008fa2:	e01c      	b.n	8008fde <osMessageQueueGet+0xce>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8008fa4:	6a3b      	ldr	r3, [r7, #32]
 8008fa6:	2b00      	cmp	r3, #0
 8008fa8:	d002      	beq.n	8008fb0 <osMessageQueueGet+0xa0>
 8008faa:	68bb      	ldr	r3, [r7, #8]
 8008fac:	2b00      	cmp	r3, #0
 8008fae:	d103      	bne.n	8008fb8 <osMessageQueueGet+0xa8>
      stat = osErrorParameter;
 8008fb0:	f06f 0303 	mvn.w	r3, #3
 8008fb4:	627b      	str	r3, [r7, #36]	; 0x24
 8008fb6:	e013      	b.n	8008fe0 <osMessageQueueGet+0xd0>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8008fb8:	683a      	ldr	r2, [r7, #0]
 8008fba:	68b9      	ldr	r1, [r7, #8]
 8008fbc:	6a38      	ldr	r0, [r7, #32]
 8008fbe:	f000 fd6f 	bl	8009aa0 <xQueueReceive>
 8008fc2:	4603      	mov	r3, r0
 8008fc4:	2b01      	cmp	r3, #1
 8008fc6:	d00b      	beq.n	8008fe0 <osMessageQueueGet+0xd0>
        if (timeout != 0U) {
 8008fc8:	683b      	ldr	r3, [r7, #0]
 8008fca:	2b00      	cmp	r3, #0
 8008fcc:	d003      	beq.n	8008fd6 <osMessageQueueGet+0xc6>
          stat = osErrorTimeout;
 8008fce:	f06f 0301 	mvn.w	r3, #1
 8008fd2:	627b      	str	r3, [r7, #36]	; 0x24
 8008fd4:	e004      	b.n	8008fe0 <osMessageQueueGet+0xd0>
        } else {
          stat = osErrorResource;
 8008fd6:	f06f 0302 	mvn.w	r3, #2
 8008fda:	627b      	str	r3, [r7, #36]	; 0x24
 8008fdc:	e000      	b.n	8008fe0 <osMessageQueueGet+0xd0>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8008fde:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 8008fe0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8008fe2:	4618      	mov	r0, r3
 8008fe4:	3728      	adds	r7, #40	; 0x28
 8008fe6:	46bd      	mov	sp, r7
 8008fe8:	bd80      	pop	{r7, pc}
 8008fea:	bf00      	nop
 8008fec:	20000214 	.word	0x20000214
 8008ff0:	e000ed04 	.word	0xe000ed04

08008ff4 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8008ff4:	b480      	push	{r7}
 8008ff6:	b085      	sub	sp, #20
 8008ff8:	af00      	add	r7, sp, #0
 8008ffa:	60f8      	str	r0, [r7, #12]
 8008ffc:	60b9      	str	r1, [r7, #8]
 8008ffe:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8009000:	68fb      	ldr	r3, [r7, #12]
 8009002:	4a07      	ldr	r2, [pc, #28]	; (8009020 <vApplicationGetIdleTaskMemory+0x2c>)
 8009004:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8009006:	68bb      	ldr	r3, [r7, #8]
 8009008:	4a06      	ldr	r2, [pc, #24]	; (8009024 <vApplicationGetIdleTaskMemory+0x30>)
 800900a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	2280      	movs	r2, #128	; 0x80
 8009010:	601a      	str	r2, [r3, #0]
}
 8009012:	bf00      	nop
 8009014:	3714      	adds	r7, #20
 8009016:	46bd      	mov	sp, r7
 8009018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800901c:	4770      	bx	lr
 800901e:	bf00      	nop
 8009020:	20000218 	.word	0x20000218
 8009024:	20000274 	.word	0x20000274

08009028 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8009028:	b480      	push	{r7}
 800902a:	b085      	sub	sp, #20
 800902c:	af00      	add	r7, sp, #0
 800902e:	60f8      	str	r0, [r7, #12]
 8009030:	60b9      	str	r1, [r7, #8]
 8009032:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8009034:	68fb      	ldr	r3, [r7, #12]
 8009036:	4a07      	ldr	r2, [pc, #28]	; (8009054 <vApplicationGetTimerTaskMemory+0x2c>)
 8009038:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800903a:	68bb      	ldr	r3, [r7, #8]
 800903c:	4a06      	ldr	r2, [pc, #24]	; (8009058 <vApplicationGetTimerTaskMemory+0x30>)
 800903e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009046:	601a      	str	r2, [r3, #0]
}
 8009048:	bf00      	nop
 800904a:	3714      	adds	r7, #20
 800904c:	46bd      	mov	sp, r7
 800904e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009052:	4770      	bx	lr
 8009054:	20000474 	.word	0x20000474
 8009058:	200004d0 	.word	0x200004d0

0800905c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800905c:	b480      	push	{r7}
 800905e:	b083      	sub	sp, #12
 8009060:	af00      	add	r7, sp, #0
 8009062:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	f103 0208 	add.w	r2, r3, #8
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009074:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	f103 0208 	add.w	r2, r3, #8
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	f103 0208 	add.w	r2, r3, #8
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	2200      	movs	r2, #0
 800908e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8009090:	bf00      	nop
 8009092:	370c      	adds	r7, #12
 8009094:	46bd      	mov	sp, r7
 8009096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800909a:	4770      	bx	lr

0800909c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800909c:	b480      	push	{r7}
 800909e:	b083      	sub	sp, #12
 80090a0:	af00      	add	r7, sp, #0
 80090a2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	2200      	movs	r2, #0
 80090a8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80090aa:	bf00      	nop
 80090ac:	370c      	adds	r7, #12
 80090ae:	46bd      	mov	sp, r7
 80090b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090b4:	4770      	bx	lr

080090b6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80090b6:	b480      	push	{r7}
 80090b8:	b085      	sub	sp, #20
 80090ba:	af00      	add	r7, sp, #0
 80090bc:	6078      	str	r0, [r7, #4]
 80090be:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	685b      	ldr	r3, [r3, #4]
 80090c4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80090c6:	683b      	ldr	r3, [r7, #0]
 80090c8:	68fa      	ldr	r2, [r7, #12]
 80090ca:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80090cc:	68fb      	ldr	r3, [r7, #12]
 80090ce:	689a      	ldr	r2, [r3, #8]
 80090d0:	683b      	ldr	r3, [r7, #0]
 80090d2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80090d4:	68fb      	ldr	r3, [r7, #12]
 80090d6:	689b      	ldr	r3, [r3, #8]
 80090d8:	683a      	ldr	r2, [r7, #0]
 80090da:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80090dc:	68fb      	ldr	r3, [r7, #12]
 80090de:	683a      	ldr	r2, [r7, #0]
 80090e0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80090e2:	683b      	ldr	r3, [r7, #0]
 80090e4:	687a      	ldr	r2, [r7, #4]
 80090e6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	681b      	ldr	r3, [r3, #0]
 80090ec:	1c5a      	adds	r2, r3, #1
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	601a      	str	r2, [r3, #0]
}
 80090f2:	bf00      	nop
 80090f4:	3714      	adds	r7, #20
 80090f6:	46bd      	mov	sp, r7
 80090f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090fc:	4770      	bx	lr

080090fe <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80090fe:	b480      	push	{r7}
 8009100:	b085      	sub	sp, #20
 8009102:	af00      	add	r7, sp, #0
 8009104:	6078      	str	r0, [r7, #4]
 8009106:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8009108:	683b      	ldr	r3, [r7, #0]
 800910a:	681b      	ldr	r3, [r3, #0]
 800910c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800910e:	68bb      	ldr	r3, [r7, #8]
 8009110:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009114:	d103      	bne.n	800911e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	691b      	ldr	r3, [r3, #16]
 800911a:	60fb      	str	r3, [r7, #12]
 800911c:	e00c      	b.n	8009138 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	3308      	adds	r3, #8
 8009122:	60fb      	str	r3, [r7, #12]
 8009124:	e002      	b.n	800912c <vListInsert+0x2e>
 8009126:	68fb      	ldr	r3, [r7, #12]
 8009128:	685b      	ldr	r3, [r3, #4]
 800912a:	60fb      	str	r3, [r7, #12]
 800912c:	68fb      	ldr	r3, [r7, #12]
 800912e:	685b      	ldr	r3, [r3, #4]
 8009130:	681b      	ldr	r3, [r3, #0]
 8009132:	68ba      	ldr	r2, [r7, #8]
 8009134:	429a      	cmp	r2, r3
 8009136:	d2f6      	bcs.n	8009126 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8009138:	68fb      	ldr	r3, [r7, #12]
 800913a:	685a      	ldr	r2, [r3, #4]
 800913c:	683b      	ldr	r3, [r7, #0]
 800913e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8009140:	683b      	ldr	r3, [r7, #0]
 8009142:	685b      	ldr	r3, [r3, #4]
 8009144:	683a      	ldr	r2, [r7, #0]
 8009146:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8009148:	683b      	ldr	r3, [r7, #0]
 800914a:	68fa      	ldr	r2, [r7, #12]
 800914c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800914e:	68fb      	ldr	r3, [r7, #12]
 8009150:	683a      	ldr	r2, [r7, #0]
 8009152:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8009154:	683b      	ldr	r3, [r7, #0]
 8009156:	687a      	ldr	r2, [r7, #4]
 8009158:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	681b      	ldr	r3, [r3, #0]
 800915e:	1c5a      	adds	r2, r3, #1
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	601a      	str	r2, [r3, #0]
}
 8009164:	bf00      	nop
 8009166:	3714      	adds	r7, #20
 8009168:	46bd      	mov	sp, r7
 800916a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800916e:	4770      	bx	lr

08009170 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8009170:	b480      	push	{r7}
 8009172:	b085      	sub	sp, #20
 8009174:	af00      	add	r7, sp, #0
 8009176:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	691b      	ldr	r3, [r3, #16]
 800917c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	685b      	ldr	r3, [r3, #4]
 8009182:	687a      	ldr	r2, [r7, #4]
 8009184:	6892      	ldr	r2, [r2, #8]
 8009186:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	689b      	ldr	r3, [r3, #8]
 800918c:	687a      	ldr	r2, [r7, #4]
 800918e:	6852      	ldr	r2, [r2, #4]
 8009190:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8009192:	68fb      	ldr	r3, [r7, #12]
 8009194:	685b      	ldr	r3, [r3, #4]
 8009196:	687a      	ldr	r2, [r7, #4]
 8009198:	429a      	cmp	r2, r3
 800919a:	d103      	bne.n	80091a4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	689a      	ldr	r2, [r3, #8]
 80091a0:	68fb      	ldr	r3, [r7, #12]
 80091a2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	2200      	movs	r2, #0
 80091a8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80091aa:	68fb      	ldr	r3, [r7, #12]
 80091ac:	681b      	ldr	r3, [r3, #0]
 80091ae:	1e5a      	subs	r2, r3, #1
 80091b0:	68fb      	ldr	r3, [r7, #12]
 80091b2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80091b4:	68fb      	ldr	r3, [r7, #12]
 80091b6:	681b      	ldr	r3, [r3, #0]
}
 80091b8:	4618      	mov	r0, r3
 80091ba:	3714      	adds	r7, #20
 80091bc:	46bd      	mov	sp, r7
 80091be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091c2:	4770      	bx	lr

080091c4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80091c4:	b580      	push	{r7, lr}
 80091c6:	b084      	sub	sp, #16
 80091c8:	af00      	add	r7, sp, #0
 80091ca:	6078      	str	r0, [r7, #4]
 80091cc:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80091d2:	68fb      	ldr	r3, [r7, #12]
 80091d4:	2b00      	cmp	r3, #0
 80091d6:	d109      	bne.n	80091ec <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80091d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091dc:	f383 8811 	msr	BASEPRI, r3
 80091e0:	f3bf 8f6f 	isb	sy
 80091e4:	f3bf 8f4f 	dsb	sy
 80091e8:	60bb      	str	r3, [r7, #8]
 80091ea:	e7fe      	b.n	80091ea <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 80091ec:	f002 fcce 	bl	800bb8c <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 80091f0:	68fb      	ldr	r3, [r7, #12]
 80091f2:	681a      	ldr	r2, [r3, #0]
 80091f4:	68fb      	ldr	r3, [r7, #12]
 80091f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80091f8:	68f9      	ldr	r1, [r7, #12]
 80091fa:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80091fc:	fb01 f303 	mul.w	r3, r1, r3
 8009200:	441a      	add	r2, r3
 8009202:	68fb      	ldr	r3, [r7, #12]
 8009204:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8009206:	68fb      	ldr	r3, [r7, #12]
 8009208:	2200      	movs	r2, #0
 800920a:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800920c:	68fb      	ldr	r3, [r7, #12]
 800920e:	681a      	ldr	r2, [r3, #0]
 8009210:	68fb      	ldr	r3, [r7, #12]
 8009212:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8009214:	68fb      	ldr	r3, [r7, #12]
 8009216:	681a      	ldr	r2, [r3, #0]
 8009218:	68fb      	ldr	r3, [r7, #12]
 800921a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800921c:	3b01      	subs	r3, #1
 800921e:	68f9      	ldr	r1, [r7, #12]
 8009220:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8009222:	fb01 f303 	mul.w	r3, r1, r3
 8009226:	441a      	add	r2, r3
 8009228:	68fb      	ldr	r3, [r7, #12]
 800922a:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800922c:	68fb      	ldr	r3, [r7, #12]
 800922e:	22ff      	movs	r2, #255	; 0xff
 8009230:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8009234:	68fb      	ldr	r3, [r7, #12]
 8009236:	22ff      	movs	r2, #255	; 0xff
 8009238:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800923c:	683b      	ldr	r3, [r7, #0]
 800923e:	2b00      	cmp	r3, #0
 8009240:	d114      	bne.n	800926c <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009242:	68fb      	ldr	r3, [r7, #12]
 8009244:	691b      	ldr	r3, [r3, #16]
 8009246:	2b00      	cmp	r3, #0
 8009248:	d01a      	beq.n	8009280 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800924a:	68fb      	ldr	r3, [r7, #12]
 800924c:	3310      	adds	r3, #16
 800924e:	4618      	mov	r0, r3
 8009250:	f001 fcb8 	bl	800abc4 <xTaskRemoveFromEventList>
 8009254:	4603      	mov	r3, r0
 8009256:	2b00      	cmp	r3, #0
 8009258:	d012      	beq.n	8009280 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800925a:	4b0d      	ldr	r3, [pc, #52]	; (8009290 <xQueueGenericReset+0xcc>)
 800925c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009260:	601a      	str	r2, [r3, #0]
 8009262:	f3bf 8f4f 	dsb	sy
 8009266:	f3bf 8f6f 	isb	sy
 800926a:	e009      	b.n	8009280 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800926c:	68fb      	ldr	r3, [r7, #12]
 800926e:	3310      	adds	r3, #16
 8009270:	4618      	mov	r0, r3
 8009272:	f7ff fef3 	bl	800905c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8009276:	68fb      	ldr	r3, [r7, #12]
 8009278:	3324      	adds	r3, #36	; 0x24
 800927a:	4618      	mov	r0, r3
 800927c:	f7ff feee 	bl	800905c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8009280:	f002 fcb2 	bl	800bbe8 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8009284:	2301      	movs	r3, #1
}
 8009286:	4618      	mov	r0, r3
 8009288:	3710      	adds	r7, #16
 800928a:	46bd      	mov	sp, r7
 800928c:	bd80      	pop	{r7, pc}
 800928e:	bf00      	nop
 8009290:	e000ed04 	.word	0xe000ed04

08009294 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8009294:	b580      	push	{r7, lr}
 8009296:	b08e      	sub	sp, #56	; 0x38
 8009298:	af02      	add	r7, sp, #8
 800929a:	60f8      	str	r0, [r7, #12]
 800929c:	60b9      	str	r1, [r7, #8]
 800929e:	607a      	str	r2, [r7, #4]
 80092a0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80092a2:	68fb      	ldr	r3, [r7, #12]
 80092a4:	2b00      	cmp	r3, #0
 80092a6:	d109      	bne.n	80092bc <xQueueGenericCreateStatic+0x28>
 80092a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092ac:	f383 8811 	msr	BASEPRI, r3
 80092b0:	f3bf 8f6f 	isb	sy
 80092b4:	f3bf 8f4f 	dsb	sy
 80092b8:	62bb      	str	r3, [r7, #40]	; 0x28
 80092ba:	e7fe      	b.n	80092ba <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80092bc:	683b      	ldr	r3, [r7, #0]
 80092be:	2b00      	cmp	r3, #0
 80092c0:	d109      	bne.n	80092d6 <xQueueGenericCreateStatic+0x42>
 80092c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092c6:	f383 8811 	msr	BASEPRI, r3
 80092ca:	f3bf 8f6f 	isb	sy
 80092ce:	f3bf 8f4f 	dsb	sy
 80092d2:	627b      	str	r3, [r7, #36]	; 0x24
 80092d4:	e7fe      	b.n	80092d4 <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	2b00      	cmp	r3, #0
 80092da:	d002      	beq.n	80092e2 <xQueueGenericCreateStatic+0x4e>
 80092dc:	68bb      	ldr	r3, [r7, #8]
 80092de:	2b00      	cmp	r3, #0
 80092e0:	d001      	beq.n	80092e6 <xQueueGenericCreateStatic+0x52>
 80092e2:	2301      	movs	r3, #1
 80092e4:	e000      	b.n	80092e8 <xQueueGenericCreateStatic+0x54>
 80092e6:	2300      	movs	r3, #0
 80092e8:	2b00      	cmp	r3, #0
 80092ea:	d109      	bne.n	8009300 <xQueueGenericCreateStatic+0x6c>
 80092ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092f0:	f383 8811 	msr	BASEPRI, r3
 80092f4:	f3bf 8f6f 	isb	sy
 80092f8:	f3bf 8f4f 	dsb	sy
 80092fc:	623b      	str	r3, [r7, #32]
 80092fe:	e7fe      	b.n	80092fe <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	2b00      	cmp	r3, #0
 8009304:	d102      	bne.n	800930c <xQueueGenericCreateStatic+0x78>
 8009306:	68bb      	ldr	r3, [r7, #8]
 8009308:	2b00      	cmp	r3, #0
 800930a:	d101      	bne.n	8009310 <xQueueGenericCreateStatic+0x7c>
 800930c:	2301      	movs	r3, #1
 800930e:	e000      	b.n	8009312 <xQueueGenericCreateStatic+0x7e>
 8009310:	2300      	movs	r3, #0
 8009312:	2b00      	cmp	r3, #0
 8009314:	d109      	bne.n	800932a <xQueueGenericCreateStatic+0x96>
 8009316:	f04f 0350 	mov.w	r3, #80	; 0x50
 800931a:	f383 8811 	msr	BASEPRI, r3
 800931e:	f3bf 8f6f 	isb	sy
 8009322:	f3bf 8f4f 	dsb	sy
 8009326:	61fb      	str	r3, [r7, #28]
 8009328:	e7fe      	b.n	8009328 <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800932a:	2350      	movs	r3, #80	; 0x50
 800932c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800932e:	697b      	ldr	r3, [r7, #20]
 8009330:	2b50      	cmp	r3, #80	; 0x50
 8009332:	d009      	beq.n	8009348 <xQueueGenericCreateStatic+0xb4>
 8009334:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009338:	f383 8811 	msr	BASEPRI, r3
 800933c:	f3bf 8f6f 	isb	sy
 8009340:	f3bf 8f4f 	dsb	sy
 8009344:	61bb      	str	r3, [r7, #24]
 8009346:	e7fe      	b.n	8009346 <xQueueGenericCreateStatic+0xb2>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8009348:	683b      	ldr	r3, [r7, #0]
 800934a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800934c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800934e:	2b00      	cmp	r3, #0
 8009350:	d00d      	beq.n	800936e <xQueueGenericCreateStatic+0xda>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8009352:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009354:	2201      	movs	r2, #1
 8009356:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800935a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800935e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009360:	9300      	str	r3, [sp, #0]
 8009362:	4613      	mov	r3, r2
 8009364:	687a      	ldr	r2, [r7, #4]
 8009366:	68b9      	ldr	r1, [r7, #8]
 8009368:	68f8      	ldr	r0, [r7, #12]
 800936a:	f000 f842 	bl	80093f2 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 800936e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8009370:	4618      	mov	r0, r3
 8009372:	3730      	adds	r7, #48	; 0x30
 8009374:	46bd      	mov	sp, r7
 8009376:	bd80      	pop	{r7, pc}

08009378 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8009378:	b580      	push	{r7, lr}
 800937a:	b08a      	sub	sp, #40	; 0x28
 800937c:	af02      	add	r7, sp, #8
 800937e:	60f8      	str	r0, [r7, #12]
 8009380:	60b9      	str	r1, [r7, #8]
 8009382:	4613      	mov	r3, r2
 8009384:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8009386:	68fb      	ldr	r3, [r7, #12]
 8009388:	2b00      	cmp	r3, #0
 800938a:	d109      	bne.n	80093a0 <xQueueGenericCreate+0x28>
 800938c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009390:	f383 8811 	msr	BASEPRI, r3
 8009394:	f3bf 8f6f 	isb	sy
 8009398:	f3bf 8f4f 	dsb	sy
 800939c:	613b      	str	r3, [r7, #16]
 800939e:	e7fe      	b.n	800939e <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 80093a0:	68bb      	ldr	r3, [r7, #8]
 80093a2:	2b00      	cmp	r3, #0
 80093a4:	d102      	bne.n	80093ac <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 80093a6:	2300      	movs	r3, #0
 80093a8:	61fb      	str	r3, [r7, #28]
 80093aa:	e004      	b.n	80093b6 <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80093ac:	68fb      	ldr	r3, [r7, #12]
 80093ae:	68ba      	ldr	r2, [r7, #8]
 80093b0:	fb02 f303 	mul.w	r3, r2, r3
 80093b4:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 80093b6:	69fb      	ldr	r3, [r7, #28]
 80093b8:	3350      	adds	r3, #80	; 0x50
 80093ba:	4618      	mov	r0, r3
 80093bc:	f002 fd00 	bl	800bdc0 <pvPortMalloc>
 80093c0:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80093c2:	69bb      	ldr	r3, [r7, #24]
 80093c4:	2b00      	cmp	r3, #0
 80093c6:	d00f      	beq.n	80093e8 <xQueueGenericCreate+0x70>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 80093c8:	69bb      	ldr	r3, [r7, #24]
 80093ca:	3350      	adds	r3, #80	; 0x50
 80093cc:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80093ce:	69bb      	ldr	r3, [r7, #24]
 80093d0:	2200      	movs	r2, #0
 80093d2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80093d6:	79fa      	ldrb	r2, [r7, #7]
 80093d8:	69bb      	ldr	r3, [r7, #24]
 80093da:	9300      	str	r3, [sp, #0]
 80093dc:	4613      	mov	r3, r2
 80093de:	697a      	ldr	r2, [r7, #20]
 80093e0:	68b9      	ldr	r1, [r7, #8]
 80093e2:	68f8      	ldr	r0, [r7, #12]
 80093e4:	f000 f805 	bl	80093f2 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 80093e8:	69bb      	ldr	r3, [r7, #24]
	}
 80093ea:	4618      	mov	r0, r3
 80093ec:	3720      	adds	r7, #32
 80093ee:	46bd      	mov	sp, r7
 80093f0:	bd80      	pop	{r7, pc}

080093f2 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80093f2:	b580      	push	{r7, lr}
 80093f4:	b084      	sub	sp, #16
 80093f6:	af00      	add	r7, sp, #0
 80093f8:	60f8      	str	r0, [r7, #12]
 80093fa:	60b9      	str	r1, [r7, #8]
 80093fc:	607a      	str	r2, [r7, #4]
 80093fe:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8009400:	68bb      	ldr	r3, [r7, #8]
 8009402:	2b00      	cmp	r3, #0
 8009404:	d103      	bne.n	800940e <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8009406:	69bb      	ldr	r3, [r7, #24]
 8009408:	69ba      	ldr	r2, [r7, #24]
 800940a:	601a      	str	r2, [r3, #0]
 800940c:	e002      	b.n	8009414 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800940e:	69bb      	ldr	r3, [r7, #24]
 8009410:	687a      	ldr	r2, [r7, #4]
 8009412:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8009414:	69bb      	ldr	r3, [r7, #24]
 8009416:	68fa      	ldr	r2, [r7, #12]
 8009418:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800941a:	69bb      	ldr	r3, [r7, #24]
 800941c:	68ba      	ldr	r2, [r7, #8]
 800941e:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8009420:	2101      	movs	r1, #1
 8009422:	69b8      	ldr	r0, [r7, #24]
 8009424:	f7ff fece 	bl	80091c4 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8009428:	69bb      	ldr	r3, [r7, #24]
 800942a:	78fa      	ldrb	r2, [r7, #3]
 800942c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8009430:	bf00      	nop
 8009432:	3710      	adds	r7, #16
 8009434:	46bd      	mov	sp, r7
 8009436:	bd80      	pop	{r7, pc}

08009438 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8009438:	b580      	push	{r7, lr}
 800943a:	b082      	sub	sp, #8
 800943c:	af00      	add	r7, sp, #0
 800943e:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	2b00      	cmp	r3, #0
 8009444:	d00e      	beq.n	8009464 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->pxMutexHolder = NULL;
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	2200      	movs	r2, #0
 800944a:	605a      	str	r2, [r3, #4]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	2200      	movs	r2, #0
 8009450:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.uxRecursiveCallCount = 0;
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	2200      	movs	r2, #0
 8009456:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8009458:	2300      	movs	r3, #0
 800945a:	2200      	movs	r2, #0
 800945c:	2100      	movs	r1, #0
 800945e:	6878      	ldr	r0, [r7, #4]
 8009460:	f000 f906 	bl	8009670 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8009464:	bf00      	nop
 8009466:	3708      	adds	r7, #8
 8009468:	46bd      	mov	sp, r7
 800946a:	bd80      	pop	{r7, pc}

0800946c <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800946c:	b580      	push	{r7, lr}
 800946e:	b086      	sub	sp, #24
 8009470:	af00      	add	r7, sp, #0
 8009472:	4603      	mov	r3, r0
 8009474:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8009476:	2301      	movs	r3, #1
 8009478:	617b      	str	r3, [r7, #20]
 800947a:	2300      	movs	r3, #0
 800947c:	613b      	str	r3, [r7, #16]

		pxNewQueue = ( Queue_t * ) xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800947e:	79fb      	ldrb	r3, [r7, #7]
 8009480:	461a      	mov	r2, r3
 8009482:	6939      	ldr	r1, [r7, #16]
 8009484:	6978      	ldr	r0, [r7, #20]
 8009486:	f7ff ff77 	bl	8009378 <xQueueGenericCreate>
 800948a:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( pxNewQueue );
 800948c:	68f8      	ldr	r0, [r7, #12]
 800948e:	f7ff ffd3 	bl	8009438 <prvInitialiseMutex>

		return pxNewQueue;
 8009492:	68fb      	ldr	r3, [r7, #12]
	}
 8009494:	4618      	mov	r0, r3
 8009496:	3718      	adds	r7, #24
 8009498:	46bd      	mov	sp, r7
 800949a:	bd80      	pop	{r7, pc}

0800949c <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800949c:	b580      	push	{r7, lr}
 800949e:	b088      	sub	sp, #32
 80094a0:	af02      	add	r7, sp, #8
 80094a2:	4603      	mov	r3, r0
 80094a4:	6039      	str	r1, [r7, #0]
 80094a6:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80094a8:	2301      	movs	r3, #1
 80094aa:	617b      	str	r3, [r7, #20]
 80094ac:	2300      	movs	r3, #0
 80094ae:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		pxNewQueue = ( Queue_t * ) xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 80094b0:	79fb      	ldrb	r3, [r7, #7]
 80094b2:	9300      	str	r3, [sp, #0]
 80094b4:	683b      	ldr	r3, [r7, #0]
 80094b6:	2200      	movs	r2, #0
 80094b8:	6939      	ldr	r1, [r7, #16]
 80094ba:	6978      	ldr	r0, [r7, #20]
 80094bc:	f7ff feea 	bl	8009294 <xQueueGenericCreateStatic>
 80094c0:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( pxNewQueue );
 80094c2:	68f8      	ldr	r0, [r7, #12]
 80094c4:	f7ff ffb8 	bl	8009438 <prvInitialiseMutex>

		return pxNewQueue;
 80094c8:	68fb      	ldr	r3, [r7, #12]
	}
 80094ca:	4618      	mov	r0, r3
 80094cc:	3718      	adds	r7, #24
 80094ce:	46bd      	mov	sp, r7
 80094d0:	bd80      	pop	{r7, pc}

080094d2 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 80094d2:	b590      	push	{r4, r7, lr}
 80094d4:	b087      	sub	sp, #28
 80094d6:	af00      	add	r7, sp, #0
 80094d8:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 80094de:	693b      	ldr	r3, [r7, #16]
 80094e0:	2b00      	cmp	r3, #0
 80094e2:	d109      	bne.n	80094f8 <xQueueGiveMutexRecursive+0x26>
 80094e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094e8:	f383 8811 	msr	BASEPRI, r3
 80094ec:	f3bf 8f6f 	isb	sy
 80094f0:	f3bf 8f4f 	dsb	sy
 80094f4:	60fb      	str	r3, [r7, #12]
 80094f6:	e7fe      	b.n	80094f6 <xQueueGiveMutexRecursive+0x24>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->pxMutexHolder == ( void * ) xTaskGetCurrentTaskHandle() ) /*lint !e961 Not a redundant cast as TaskHandle_t is a typedef. */
 80094f8:	693b      	ldr	r3, [r7, #16]
 80094fa:	685c      	ldr	r4, [r3, #4]
 80094fc:	f001 fd1e 	bl	800af3c <xTaskGetCurrentTaskHandle>
 8009500:	4603      	mov	r3, r0
 8009502:	429c      	cmp	r4, r3
 8009504:	d111      	bne.n	800952a <xQueueGiveMutexRecursive+0x58>
			/* uxRecursiveCallCount cannot be zero if pxMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.uxRecursiveCallCount )--;
 8009506:	693b      	ldr	r3, [r7, #16]
 8009508:	68db      	ldr	r3, [r3, #12]
 800950a:	1e5a      	subs	r2, r3, #1
 800950c:	693b      	ldr	r3, [r7, #16]
 800950e:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 8009510:	693b      	ldr	r3, [r7, #16]
 8009512:	68db      	ldr	r3, [r3, #12]
 8009514:	2b00      	cmp	r3, #0
 8009516:	d105      	bne.n	8009524 <xQueueGiveMutexRecursive+0x52>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 8009518:	2300      	movs	r3, #0
 800951a:	2200      	movs	r2, #0
 800951c:	2100      	movs	r1, #0
 800951e:	6938      	ldr	r0, [r7, #16]
 8009520:	f000 f8a6 	bl	8009670 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 8009524:	2301      	movs	r3, #1
 8009526:	617b      	str	r3, [r7, #20]
 8009528:	e001      	b.n	800952e <xQueueGiveMutexRecursive+0x5c>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 800952a:	2300      	movs	r3, #0
 800952c:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 800952e:	697b      	ldr	r3, [r7, #20]
	}
 8009530:	4618      	mov	r0, r3
 8009532:	371c      	adds	r7, #28
 8009534:	46bd      	mov	sp, r7
 8009536:	bd90      	pop	{r4, r7, pc}

08009538 <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 8009538:	b590      	push	{r4, r7, lr}
 800953a:	b087      	sub	sp, #28
 800953c:	af00      	add	r7, sp, #0
 800953e:	6078      	str	r0, [r7, #4]
 8009540:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8009546:	693b      	ldr	r3, [r7, #16]
 8009548:	2b00      	cmp	r3, #0
 800954a:	d109      	bne.n	8009560 <xQueueTakeMutexRecursive+0x28>
 800954c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009550:	f383 8811 	msr	BASEPRI, r3
 8009554:	f3bf 8f6f 	isb	sy
 8009558:	f3bf 8f4f 	dsb	sy
 800955c:	60fb      	str	r3, [r7, #12]
 800955e:	e7fe      	b.n	800955e <xQueueTakeMutexRecursive+0x26>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->pxMutexHolder == ( void * ) xTaskGetCurrentTaskHandle() ) /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 8009560:	693b      	ldr	r3, [r7, #16]
 8009562:	685c      	ldr	r4, [r3, #4]
 8009564:	f001 fcea 	bl	800af3c <xTaskGetCurrentTaskHandle>
 8009568:	4603      	mov	r3, r0
 800956a:	429c      	cmp	r4, r3
 800956c:	d107      	bne.n	800957e <xQueueTakeMutexRecursive+0x46>
		{
			( pxMutex->u.uxRecursiveCallCount )++;
 800956e:	693b      	ldr	r3, [r7, #16]
 8009570:	68db      	ldr	r3, [r3, #12]
 8009572:	1c5a      	adds	r2, r3, #1
 8009574:	693b      	ldr	r3, [r7, #16]
 8009576:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 8009578:	2301      	movs	r3, #1
 800957a:	617b      	str	r3, [r7, #20]
 800957c:	e00c      	b.n	8009598 <xQueueTakeMutexRecursive+0x60>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 800957e:	6839      	ldr	r1, [r7, #0]
 8009580:	6938      	ldr	r0, [r7, #16]
 8009582:	f000 fb69 	bl	8009c58 <xQueueSemaphoreTake>
 8009586:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 8009588:	697b      	ldr	r3, [r7, #20]
 800958a:	2b00      	cmp	r3, #0
 800958c:	d004      	beq.n	8009598 <xQueueTakeMutexRecursive+0x60>
			{
				( pxMutex->u.uxRecursiveCallCount )++;
 800958e:	693b      	ldr	r3, [r7, #16]
 8009590:	68db      	ldr	r3, [r3, #12]
 8009592:	1c5a      	adds	r2, r3, #1
 8009594:	693b      	ldr	r3, [r7, #16]
 8009596:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 8009598:	697b      	ldr	r3, [r7, #20]
	}
 800959a:	4618      	mov	r0, r3
 800959c:	371c      	adds	r7, #28
 800959e:	46bd      	mov	sp, r7
 80095a0:	bd90      	pop	{r4, r7, pc}

080095a2 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 80095a2:	b580      	push	{r7, lr}
 80095a4:	b08a      	sub	sp, #40	; 0x28
 80095a6:	af02      	add	r7, sp, #8
 80095a8:	60f8      	str	r0, [r7, #12]
 80095aa:	60b9      	str	r1, [r7, #8]
 80095ac:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 80095ae:	68fb      	ldr	r3, [r7, #12]
 80095b0:	2b00      	cmp	r3, #0
 80095b2:	d109      	bne.n	80095c8 <xQueueCreateCountingSemaphoreStatic+0x26>
 80095b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095b8:	f383 8811 	msr	BASEPRI, r3
 80095bc:	f3bf 8f6f 	isb	sy
 80095c0:	f3bf 8f4f 	dsb	sy
 80095c4:	61bb      	str	r3, [r7, #24]
 80095c6:	e7fe      	b.n	80095c6 <xQueueCreateCountingSemaphoreStatic+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 80095c8:	68ba      	ldr	r2, [r7, #8]
 80095ca:	68fb      	ldr	r3, [r7, #12]
 80095cc:	429a      	cmp	r2, r3
 80095ce:	d909      	bls.n	80095e4 <xQueueCreateCountingSemaphoreStatic+0x42>
 80095d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095d4:	f383 8811 	msr	BASEPRI, r3
 80095d8:	f3bf 8f6f 	isb	sy
 80095dc:	f3bf 8f4f 	dsb	sy
 80095e0:	617b      	str	r3, [r7, #20]
 80095e2:	e7fe      	b.n	80095e2 <xQueueCreateCountingSemaphoreStatic+0x40>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 80095e4:	2302      	movs	r3, #2
 80095e6:	9300      	str	r3, [sp, #0]
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	2200      	movs	r2, #0
 80095ec:	2100      	movs	r1, #0
 80095ee:	68f8      	ldr	r0, [r7, #12]
 80095f0:	f7ff fe50 	bl	8009294 <xQueueGenericCreateStatic>
 80095f4:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 80095f6:	69fb      	ldr	r3, [r7, #28]
 80095f8:	2b00      	cmp	r3, #0
 80095fa:	d002      	beq.n	8009602 <xQueueCreateCountingSemaphoreStatic+0x60>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 80095fc:	69fb      	ldr	r3, [r7, #28]
 80095fe:	68ba      	ldr	r2, [r7, #8]
 8009600:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8009602:	69fb      	ldr	r3, [r7, #28]
	}
 8009604:	4618      	mov	r0, r3
 8009606:	3720      	adds	r7, #32
 8009608:	46bd      	mov	sp, r7
 800960a:	bd80      	pop	{r7, pc}

0800960c <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 800960c:	b580      	push	{r7, lr}
 800960e:	b086      	sub	sp, #24
 8009610:	af00      	add	r7, sp, #0
 8009612:	6078      	str	r0, [r7, #4]
 8009614:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	2b00      	cmp	r3, #0
 800961a:	d109      	bne.n	8009630 <xQueueCreateCountingSemaphore+0x24>
 800961c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009620:	f383 8811 	msr	BASEPRI, r3
 8009624:	f3bf 8f6f 	isb	sy
 8009628:	f3bf 8f4f 	dsb	sy
 800962c:	613b      	str	r3, [r7, #16]
 800962e:	e7fe      	b.n	800962e <xQueueCreateCountingSemaphore+0x22>
		configASSERT( uxInitialCount <= uxMaxCount );
 8009630:	683a      	ldr	r2, [r7, #0]
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	429a      	cmp	r2, r3
 8009636:	d909      	bls.n	800964c <xQueueCreateCountingSemaphore+0x40>
 8009638:	f04f 0350 	mov.w	r3, #80	; 0x50
 800963c:	f383 8811 	msr	BASEPRI, r3
 8009640:	f3bf 8f6f 	isb	sy
 8009644:	f3bf 8f4f 	dsb	sy
 8009648:	60fb      	str	r3, [r7, #12]
 800964a:	e7fe      	b.n	800964a <xQueueCreateCountingSemaphore+0x3e>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800964c:	2202      	movs	r2, #2
 800964e:	2100      	movs	r1, #0
 8009650:	6878      	ldr	r0, [r7, #4]
 8009652:	f7ff fe91 	bl	8009378 <xQueueGenericCreate>
 8009656:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8009658:	697b      	ldr	r3, [r7, #20]
 800965a:	2b00      	cmp	r3, #0
 800965c:	d002      	beq.n	8009664 <xQueueCreateCountingSemaphore+0x58>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800965e:	697b      	ldr	r3, [r7, #20]
 8009660:	683a      	ldr	r2, [r7, #0]
 8009662:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8009664:	697b      	ldr	r3, [r7, #20]
	}
 8009666:	4618      	mov	r0, r3
 8009668:	3718      	adds	r7, #24
 800966a:	46bd      	mov	sp, r7
 800966c:	bd80      	pop	{r7, pc}
	...

08009670 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8009670:	b580      	push	{r7, lr}
 8009672:	b08e      	sub	sp, #56	; 0x38
 8009674:	af00      	add	r7, sp, #0
 8009676:	60f8      	str	r0, [r7, #12]
 8009678:	60b9      	str	r1, [r7, #8]
 800967a:	607a      	str	r2, [r7, #4]
 800967c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800967e:	2300      	movs	r3, #0
 8009680:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8009682:	68fb      	ldr	r3, [r7, #12]
 8009684:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8009686:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009688:	2b00      	cmp	r3, #0
 800968a:	d109      	bne.n	80096a0 <xQueueGenericSend+0x30>
 800968c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009690:	f383 8811 	msr	BASEPRI, r3
 8009694:	f3bf 8f6f 	isb	sy
 8009698:	f3bf 8f4f 	dsb	sy
 800969c:	62bb      	str	r3, [r7, #40]	; 0x28
 800969e:	e7fe      	b.n	800969e <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80096a0:	68bb      	ldr	r3, [r7, #8]
 80096a2:	2b00      	cmp	r3, #0
 80096a4:	d103      	bne.n	80096ae <xQueueGenericSend+0x3e>
 80096a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80096a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80096aa:	2b00      	cmp	r3, #0
 80096ac:	d101      	bne.n	80096b2 <xQueueGenericSend+0x42>
 80096ae:	2301      	movs	r3, #1
 80096b0:	e000      	b.n	80096b4 <xQueueGenericSend+0x44>
 80096b2:	2300      	movs	r3, #0
 80096b4:	2b00      	cmp	r3, #0
 80096b6:	d109      	bne.n	80096cc <xQueueGenericSend+0x5c>
 80096b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096bc:	f383 8811 	msr	BASEPRI, r3
 80096c0:	f3bf 8f6f 	isb	sy
 80096c4:	f3bf 8f4f 	dsb	sy
 80096c8:	627b      	str	r3, [r7, #36]	; 0x24
 80096ca:	e7fe      	b.n	80096ca <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80096cc:	683b      	ldr	r3, [r7, #0]
 80096ce:	2b02      	cmp	r3, #2
 80096d0:	d103      	bne.n	80096da <xQueueGenericSend+0x6a>
 80096d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80096d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80096d6:	2b01      	cmp	r3, #1
 80096d8:	d101      	bne.n	80096de <xQueueGenericSend+0x6e>
 80096da:	2301      	movs	r3, #1
 80096dc:	e000      	b.n	80096e0 <xQueueGenericSend+0x70>
 80096de:	2300      	movs	r3, #0
 80096e0:	2b00      	cmp	r3, #0
 80096e2:	d109      	bne.n	80096f8 <xQueueGenericSend+0x88>
 80096e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096e8:	f383 8811 	msr	BASEPRI, r3
 80096ec:	f3bf 8f6f 	isb	sy
 80096f0:	f3bf 8f4f 	dsb	sy
 80096f4:	623b      	str	r3, [r7, #32]
 80096f6:	e7fe      	b.n	80096f6 <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80096f8:	f001 fc30 	bl	800af5c <xTaskGetSchedulerState>
 80096fc:	4603      	mov	r3, r0
 80096fe:	2b00      	cmp	r3, #0
 8009700:	d102      	bne.n	8009708 <xQueueGenericSend+0x98>
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	2b00      	cmp	r3, #0
 8009706:	d101      	bne.n	800970c <xQueueGenericSend+0x9c>
 8009708:	2301      	movs	r3, #1
 800970a:	e000      	b.n	800970e <xQueueGenericSend+0x9e>
 800970c:	2300      	movs	r3, #0
 800970e:	2b00      	cmp	r3, #0
 8009710:	d109      	bne.n	8009726 <xQueueGenericSend+0xb6>
 8009712:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009716:	f383 8811 	msr	BASEPRI, r3
 800971a:	f3bf 8f6f 	isb	sy
 800971e:	f3bf 8f4f 	dsb	sy
 8009722:	61fb      	str	r3, [r7, #28]
 8009724:	e7fe      	b.n	8009724 <xQueueGenericSend+0xb4>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8009726:	f002 fa31 	bl	800bb8c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800972a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800972c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800972e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009730:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009732:	429a      	cmp	r2, r3
 8009734:	d302      	bcc.n	800973c <xQueueGenericSend+0xcc>
 8009736:	683b      	ldr	r3, [r7, #0]
 8009738:	2b02      	cmp	r3, #2
 800973a:	d129      	bne.n	8009790 <xQueueGenericSend+0x120>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800973c:	683a      	ldr	r2, [r7, #0]
 800973e:	68b9      	ldr	r1, [r7, #8]
 8009740:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009742:	f000 fc48 	bl	8009fd6 <prvCopyDataToQueue>
 8009746:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009748:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800974a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800974c:	2b00      	cmp	r3, #0
 800974e:	d010      	beq.n	8009772 <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009750:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009752:	3324      	adds	r3, #36	; 0x24
 8009754:	4618      	mov	r0, r3
 8009756:	f001 fa35 	bl	800abc4 <xTaskRemoveFromEventList>
 800975a:	4603      	mov	r3, r0
 800975c:	2b00      	cmp	r3, #0
 800975e:	d013      	beq.n	8009788 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8009760:	4b3f      	ldr	r3, [pc, #252]	; (8009860 <xQueueGenericSend+0x1f0>)
 8009762:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009766:	601a      	str	r2, [r3, #0]
 8009768:	f3bf 8f4f 	dsb	sy
 800976c:	f3bf 8f6f 	isb	sy
 8009770:	e00a      	b.n	8009788 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8009772:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009774:	2b00      	cmp	r3, #0
 8009776:	d007      	beq.n	8009788 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8009778:	4b39      	ldr	r3, [pc, #228]	; (8009860 <xQueueGenericSend+0x1f0>)
 800977a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800977e:	601a      	str	r2, [r3, #0]
 8009780:	f3bf 8f4f 	dsb	sy
 8009784:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8009788:	f002 fa2e 	bl	800bbe8 <vPortExitCritical>
				return pdPASS;
 800978c:	2301      	movs	r3, #1
 800978e:	e063      	b.n	8009858 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	2b00      	cmp	r3, #0
 8009794:	d103      	bne.n	800979e <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8009796:	f002 fa27 	bl	800bbe8 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800979a:	2300      	movs	r3, #0
 800979c:	e05c      	b.n	8009858 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800979e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80097a0:	2b00      	cmp	r3, #0
 80097a2:	d106      	bne.n	80097b2 <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80097a4:	f107 0314 	add.w	r3, r7, #20
 80097a8:	4618      	mov	r0, r3
 80097aa:	f001 fa6d 	bl	800ac88 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80097ae:	2301      	movs	r3, #1
 80097b0:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80097b2:	f002 fa19 	bl	800bbe8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80097b6:	f000 ffd1 	bl	800a75c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80097ba:	f002 f9e7 	bl	800bb8c <vPortEnterCritical>
 80097be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80097c0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80097c4:	b25b      	sxtb	r3, r3
 80097c6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80097ca:	d103      	bne.n	80097d4 <xQueueGenericSend+0x164>
 80097cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80097ce:	2200      	movs	r2, #0
 80097d0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80097d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80097d6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80097da:	b25b      	sxtb	r3, r3
 80097dc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80097e0:	d103      	bne.n	80097ea <xQueueGenericSend+0x17a>
 80097e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80097e4:	2200      	movs	r2, #0
 80097e6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80097ea:	f002 f9fd 	bl	800bbe8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80097ee:	1d3a      	adds	r2, r7, #4
 80097f0:	f107 0314 	add.w	r3, r7, #20
 80097f4:	4611      	mov	r1, r2
 80097f6:	4618      	mov	r0, r3
 80097f8:	f001 fa5c 	bl	800acb4 <xTaskCheckForTimeOut>
 80097fc:	4603      	mov	r3, r0
 80097fe:	2b00      	cmp	r3, #0
 8009800:	d124      	bne.n	800984c <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8009802:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009804:	f000 fcdf 	bl	800a1c6 <prvIsQueueFull>
 8009808:	4603      	mov	r3, r0
 800980a:	2b00      	cmp	r3, #0
 800980c:	d018      	beq.n	8009840 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800980e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009810:	3310      	adds	r3, #16
 8009812:	687a      	ldr	r2, [r7, #4]
 8009814:	4611      	mov	r1, r2
 8009816:	4618      	mov	r0, r3
 8009818:	f001 f986 	bl	800ab28 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800981c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800981e:	f000 fc6a 	bl	800a0f6 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8009822:	f000 ffa9 	bl	800a778 <xTaskResumeAll>
 8009826:	4603      	mov	r3, r0
 8009828:	2b00      	cmp	r3, #0
 800982a:	f47f af7c 	bne.w	8009726 <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 800982e:	4b0c      	ldr	r3, [pc, #48]	; (8009860 <xQueueGenericSend+0x1f0>)
 8009830:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009834:	601a      	str	r2, [r3, #0]
 8009836:	f3bf 8f4f 	dsb	sy
 800983a:	f3bf 8f6f 	isb	sy
 800983e:	e772      	b.n	8009726 <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8009840:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009842:	f000 fc58 	bl	800a0f6 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009846:	f000 ff97 	bl	800a778 <xTaskResumeAll>
 800984a:	e76c      	b.n	8009726 <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800984c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800984e:	f000 fc52 	bl	800a0f6 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009852:	f000 ff91 	bl	800a778 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8009856:	2300      	movs	r3, #0
		}
	}
}
 8009858:	4618      	mov	r0, r3
 800985a:	3738      	adds	r7, #56	; 0x38
 800985c:	46bd      	mov	sp, r7
 800985e:	bd80      	pop	{r7, pc}
 8009860:	e000ed04 	.word	0xe000ed04

08009864 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8009864:	b580      	push	{r7, lr}
 8009866:	b08e      	sub	sp, #56	; 0x38
 8009868:	af00      	add	r7, sp, #0
 800986a:	60f8      	str	r0, [r7, #12]
 800986c:	60b9      	str	r1, [r7, #8]
 800986e:	607a      	str	r2, [r7, #4]
 8009870:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8009872:	68fb      	ldr	r3, [r7, #12]
 8009874:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8009876:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009878:	2b00      	cmp	r3, #0
 800987a:	d109      	bne.n	8009890 <xQueueGenericSendFromISR+0x2c>
 800987c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009880:	f383 8811 	msr	BASEPRI, r3
 8009884:	f3bf 8f6f 	isb	sy
 8009888:	f3bf 8f4f 	dsb	sy
 800988c:	627b      	str	r3, [r7, #36]	; 0x24
 800988e:	e7fe      	b.n	800988e <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009890:	68bb      	ldr	r3, [r7, #8]
 8009892:	2b00      	cmp	r3, #0
 8009894:	d103      	bne.n	800989e <xQueueGenericSendFromISR+0x3a>
 8009896:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009898:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800989a:	2b00      	cmp	r3, #0
 800989c:	d101      	bne.n	80098a2 <xQueueGenericSendFromISR+0x3e>
 800989e:	2301      	movs	r3, #1
 80098a0:	e000      	b.n	80098a4 <xQueueGenericSendFromISR+0x40>
 80098a2:	2300      	movs	r3, #0
 80098a4:	2b00      	cmp	r3, #0
 80098a6:	d109      	bne.n	80098bc <xQueueGenericSendFromISR+0x58>
 80098a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80098ac:	f383 8811 	msr	BASEPRI, r3
 80098b0:	f3bf 8f6f 	isb	sy
 80098b4:	f3bf 8f4f 	dsb	sy
 80098b8:	623b      	str	r3, [r7, #32]
 80098ba:	e7fe      	b.n	80098ba <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80098bc:	683b      	ldr	r3, [r7, #0]
 80098be:	2b02      	cmp	r3, #2
 80098c0:	d103      	bne.n	80098ca <xQueueGenericSendFromISR+0x66>
 80098c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80098c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80098c6:	2b01      	cmp	r3, #1
 80098c8:	d101      	bne.n	80098ce <xQueueGenericSendFromISR+0x6a>
 80098ca:	2301      	movs	r3, #1
 80098cc:	e000      	b.n	80098d0 <xQueueGenericSendFromISR+0x6c>
 80098ce:	2300      	movs	r3, #0
 80098d0:	2b00      	cmp	r3, #0
 80098d2:	d109      	bne.n	80098e8 <xQueueGenericSendFromISR+0x84>
 80098d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80098d8:	f383 8811 	msr	BASEPRI, r3
 80098dc:	f3bf 8f6f 	isb	sy
 80098e0:	f3bf 8f4f 	dsb	sy
 80098e4:	61fb      	str	r3, [r7, #28]
 80098e6:	e7fe      	b.n	80098e6 <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80098e8:	f002 fa2c 	bl	800bd44 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80098ec:	f3ef 8211 	mrs	r2, BASEPRI
 80098f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80098f4:	f383 8811 	msr	BASEPRI, r3
 80098f8:	f3bf 8f6f 	isb	sy
 80098fc:	f3bf 8f4f 	dsb	sy
 8009900:	61ba      	str	r2, [r7, #24]
 8009902:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8009904:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8009906:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8009908:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800990a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800990c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800990e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009910:	429a      	cmp	r2, r3
 8009912:	d302      	bcc.n	800991a <xQueueGenericSendFromISR+0xb6>
 8009914:	683b      	ldr	r3, [r7, #0]
 8009916:	2b02      	cmp	r3, #2
 8009918:	d12c      	bne.n	8009974 <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800991a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800991c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009920:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8009924:	683a      	ldr	r2, [r7, #0]
 8009926:	68b9      	ldr	r1, [r7, #8]
 8009928:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800992a:	f000 fb54 	bl	8009fd6 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800992e:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8009932:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009936:	d112      	bne.n	800995e <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009938:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800993a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800993c:	2b00      	cmp	r3, #0
 800993e:	d016      	beq.n	800996e <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009940:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009942:	3324      	adds	r3, #36	; 0x24
 8009944:	4618      	mov	r0, r3
 8009946:	f001 f93d 	bl	800abc4 <xTaskRemoveFromEventList>
 800994a:	4603      	mov	r3, r0
 800994c:	2b00      	cmp	r3, #0
 800994e:	d00e      	beq.n	800996e <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8009950:	687b      	ldr	r3, [r7, #4]
 8009952:	2b00      	cmp	r3, #0
 8009954:	d00b      	beq.n	800996e <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	2201      	movs	r2, #1
 800995a:	601a      	str	r2, [r3, #0]
 800995c:	e007      	b.n	800996e <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800995e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8009962:	3301      	adds	r3, #1
 8009964:	b2db      	uxtb	r3, r3
 8009966:	b25a      	sxtb	r2, r3
 8009968:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800996a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800996e:	2301      	movs	r3, #1
 8009970:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8009972:	e001      	b.n	8009978 <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8009974:	2300      	movs	r3, #0
 8009976:	637b      	str	r3, [r7, #52]	; 0x34
 8009978:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800997a:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800997c:	693b      	ldr	r3, [r7, #16]
 800997e:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8009982:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8009984:	4618      	mov	r0, r3
 8009986:	3738      	adds	r7, #56	; 0x38
 8009988:	46bd      	mov	sp, r7
 800998a:	bd80      	pop	{r7, pc}

0800998c <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800998c:	b580      	push	{r7, lr}
 800998e:	b08e      	sub	sp, #56	; 0x38
 8009990:	af00      	add	r7, sp, #0
 8009992:	6078      	str	r0, [r7, #4]
 8009994:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8009996:	687b      	ldr	r3, [r7, #4]
 8009998:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800999a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800999c:	2b00      	cmp	r3, #0
 800999e:	d109      	bne.n	80099b4 <xQueueGiveFromISR+0x28>
	__asm volatile
 80099a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099a4:	f383 8811 	msr	BASEPRI, r3
 80099a8:	f3bf 8f6f 	isb	sy
 80099ac:	f3bf 8f4f 	dsb	sy
 80099b0:	623b      	str	r3, [r7, #32]
 80099b2:	e7fe      	b.n	80099b2 <xQueueGiveFromISR+0x26>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80099b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80099b8:	2b00      	cmp	r3, #0
 80099ba:	d009      	beq.n	80099d0 <xQueueGiveFromISR+0x44>
 80099bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099c0:	f383 8811 	msr	BASEPRI, r3
 80099c4:	f3bf 8f6f 	isb	sy
 80099c8:	f3bf 8f4f 	dsb	sy
 80099cc:	61fb      	str	r3, [r7, #28]
 80099ce:	e7fe      	b.n	80099ce <xQueueGiveFromISR+0x42>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
 80099d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099d2:	681b      	ldr	r3, [r3, #0]
 80099d4:	2b00      	cmp	r3, #0
 80099d6:	d103      	bne.n	80099e0 <xQueueGiveFromISR+0x54>
 80099d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099da:	685b      	ldr	r3, [r3, #4]
 80099dc:	2b00      	cmp	r3, #0
 80099de:	d101      	bne.n	80099e4 <xQueueGiveFromISR+0x58>
 80099e0:	2301      	movs	r3, #1
 80099e2:	e000      	b.n	80099e6 <xQueueGiveFromISR+0x5a>
 80099e4:	2300      	movs	r3, #0
 80099e6:	2b00      	cmp	r3, #0
 80099e8:	d109      	bne.n	80099fe <xQueueGiveFromISR+0x72>
 80099ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099ee:	f383 8811 	msr	BASEPRI, r3
 80099f2:	f3bf 8f6f 	isb	sy
 80099f6:	f3bf 8f4f 	dsb	sy
 80099fa:	61bb      	str	r3, [r7, #24]
 80099fc:	e7fe      	b.n	80099fc <xQueueGiveFromISR+0x70>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80099fe:	f002 f9a1 	bl	800bd44 <vPortValidateInterruptPriority>
	__asm volatile
 8009a02:	f3ef 8211 	mrs	r2, BASEPRI
 8009a06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a0a:	f383 8811 	msr	BASEPRI, r3
 8009a0e:	f3bf 8f6f 	isb	sy
 8009a12:	f3bf 8f4f 	dsb	sy
 8009a16:	617a      	str	r2, [r7, #20]
 8009a18:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8009a1a:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8009a1c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009a1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009a22:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8009a24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a26:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009a28:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009a2a:	429a      	cmp	r2, r3
 8009a2c:	d22b      	bcs.n	8009a86 <xQueueGiveFromISR+0xfa>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8009a2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a30:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009a34:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8009a38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a3a:	1c5a      	adds	r2, r3, #1
 8009a3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a3e:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8009a40:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8009a44:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009a48:	d112      	bne.n	8009a70 <xQueueGiveFromISR+0xe4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009a4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a4e:	2b00      	cmp	r3, #0
 8009a50:	d016      	beq.n	8009a80 <xQueueGiveFromISR+0xf4>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009a52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a54:	3324      	adds	r3, #36	; 0x24
 8009a56:	4618      	mov	r0, r3
 8009a58:	f001 f8b4 	bl	800abc4 <xTaskRemoveFromEventList>
 8009a5c:	4603      	mov	r3, r0
 8009a5e:	2b00      	cmp	r3, #0
 8009a60:	d00e      	beq.n	8009a80 <xQueueGiveFromISR+0xf4>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8009a62:	683b      	ldr	r3, [r7, #0]
 8009a64:	2b00      	cmp	r3, #0
 8009a66:	d00b      	beq.n	8009a80 <xQueueGiveFromISR+0xf4>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8009a68:	683b      	ldr	r3, [r7, #0]
 8009a6a:	2201      	movs	r2, #1
 8009a6c:	601a      	str	r2, [r3, #0]
 8009a6e:	e007      	b.n	8009a80 <xQueueGiveFromISR+0xf4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8009a70:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009a74:	3301      	adds	r3, #1
 8009a76:	b2db      	uxtb	r3, r3
 8009a78:	b25a      	sxtb	r2, r3
 8009a7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a7c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8009a80:	2301      	movs	r3, #1
 8009a82:	637b      	str	r3, [r7, #52]	; 0x34
 8009a84:	e001      	b.n	8009a8a <xQueueGiveFromISR+0xfe>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8009a86:	2300      	movs	r3, #0
 8009a88:	637b      	str	r3, [r7, #52]	; 0x34
 8009a8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a8c:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8009a8e:	68fb      	ldr	r3, [r7, #12]
 8009a90:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8009a94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8009a96:	4618      	mov	r0, r3
 8009a98:	3738      	adds	r7, #56	; 0x38
 8009a9a:	46bd      	mov	sp, r7
 8009a9c:	bd80      	pop	{r7, pc}
	...

08009aa0 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8009aa0:	b580      	push	{r7, lr}
 8009aa2:	b08c      	sub	sp, #48	; 0x30
 8009aa4:	af00      	add	r7, sp, #0
 8009aa6:	60f8      	str	r0, [r7, #12]
 8009aa8:	60b9      	str	r1, [r7, #8]
 8009aaa:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8009aac:	2300      	movs	r3, #0
 8009aae:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8009ab0:	68fb      	ldr	r3, [r7, #12]
 8009ab2:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8009ab4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ab6:	2b00      	cmp	r3, #0
 8009ab8:	d109      	bne.n	8009ace <xQueueReceive+0x2e>
	__asm volatile
 8009aba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009abe:	f383 8811 	msr	BASEPRI, r3
 8009ac2:	f3bf 8f6f 	isb	sy
 8009ac6:	f3bf 8f4f 	dsb	sy
 8009aca:	623b      	str	r3, [r7, #32]
 8009acc:	e7fe      	b.n	8009acc <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009ace:	68bb      	ldr	r3, [r7, #8]
 8009ad0:	2b00      	cmp	r3, #0
 8009ad2:	d103      	bne.n	8009adc <xQueueReceive+0x3c>
 8009ad4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ad6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ad8:	2b00      	cmp	r3, #0
 8009ada:	d101      	bne.n	8009ae0 <xQueueReceive+0x40>
 8009adc:	2301      	movs	r3, #1
 8009ade:	e000      	b.n	8009ae2 <xQueueReceive+0x42>
 8009ae0:	2300      	movs	r3, #0
 8009ae2:	2b00      	cmp	r3, #0
 8009ae4:	d109      	bne.n	8009afa <xQueueReceive+0x5a>
 8009ae6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009aea:	f383 8811 	msr	BASEPRI, r3
 8009aee:	f3bf 8f6f 	isb	sy
 8009af2:	f3bf 8f4f 	dsb	sy
 8009af6:	61fb      	str	r3, [r7, #28]
 8009af8:	e7fe      	b.n	8009af8 <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009afa:	f001 fa2f 	bl	800af5c <xTaskGetSchedulerState>
 8009afe:	4603      	mov	r3, r0
 8009b00:	2b00      	cmp	r3, #0
 8009b02:	d102      	bne.n	8009b0a <xQueueReceive+0x6a>
 8009b04:	687b      	ldr	r3, [r7, #4]
 8009b06:	2b00      	cmp	r3, #0
 8009b08:	d101      	bne.n	8009b0e <xQueueReceive+0x6e>
 8009b0a:	2301      	movs	r3, #1
 8009b0c:	e000      	b.n	8009b10 <xQueueReceive+0x70>
 8009b0e:	2300      	movs	r3, #0
 8009b10:	2b00      	cmp	r3, #0
 8009b12:	d109      	bne.n	8009b28 <xQueueReceive+0x88>
 8009b14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b18:	f383 8811 	msr	BASEPRI, r3
 8009b1c:	f3bf 8f6f 	isb	sy
 8009b20:	f3bf 8f4f 	dsb	sy
 8009b24:	61bb      	str	r3, [r7, #24]
 8009b26:	e7fe      	b.n	8009b26 <xQueueReceive+0x86>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8009b28:	f002 f830 	bl	800bb8c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009b2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b30:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009b32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b34:	2b00      	cmp	r3, #0
 8009b36:	d01f      	beq.n	8009b78 <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8009b38:	68b9      	ldr	r1, [r7, #8]
 8009b3a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009b3c:	f000 fab5 	bl	800a0aa <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8009b40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b42:	1e5a      	subs	r2, r3, #1
 8009b44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b46:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009b48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b4a:	691b      	ldr	r3, [r3, #16]
 8009b4c:	2b00      	cmp	r3, #0
 8009b4e:	d00f      	beq.n	8009b70 <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009b50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b52:	3310      	adds	r3, #16
 8009b54:	4618      	mov	r0, r3
 8009b56:	f001 f835 	bl	800abc4 <xTaskRemoveFromEventList>
 8009b5a:	4603      	mov	r3, r0
 8009b5c:	2b00      	cmp	r3, #0
 8009b5e:	d007      	beq.n	8009b70 <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8009b60:	4b3c      	ldr	r3, [pc, #240]	; (8009c54 <xQueueReceive+0x1b4>)
 8009b62:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009b66:	601a      	str	r2, [r3, #0]
 8009b68:	f3bf 8f4f 	dsb	sy
 8009b6c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8009b70:	f002 f83a 	bl	800bbe8 <vPortExitCritical>
				return pdPASS;
 8009b74:	2301      	movs	r3, #1
 8009b76:	e069      	b.n	8009c4c <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	2b00      	cmp	r3, #0
 8009b7c:	d103      	bne.n	8009b86 <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8009b7e:	f002 f833 	bl	800bbe8 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8009b82:	2300      	movs	r3, #0
 8009b84:	e062      	b.n	8009c4c <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009b86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b88:	2b00      	cmp	r3, #0
 8009b8a:	d106      	bne.n	8009b9a <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009b8c:	f107 0310 	add.w	r3, r7, #16
 8009b90:	4618      	mov	r0, r3
 8009b92:	f001 f879 	bl	800ac88 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009b96:	2301      	movs	r3, #1
 8009b98:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8009b9a:	f002 f825 	bl	800bbe8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009b9e:	f000 fddd 	bl	800a75c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009ba2:	f001 fff3 	bl	800bb8c <vPortEnterCritical>
 8009ba6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ba8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009bac:	b25b      	sxtb	r3, r3
 8009bae:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009bb2:	d103      	bne.n	8009bbc <xQueueReceive+0x11c>
 8009bb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009bb6:	2200      	movs	r2, #0
 8009bb8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009bbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009bbe:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009bc2:	b25b      	sxtb	r3, r3
 8009bc4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009bc8:	d103      	bne.n	8009bd2 <xQueueReceive+0x132>
 8009bca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009bcc:	2200      	movs	r2, #0
 8009bce:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009bd2:	f002 f809 	bl	800bbe8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009bd6:	1d3a      	adds	r2, r7, #4
 8009bd8:	f107 0310 	add.w	r3, r7, #16
 8009bdc:	4611      	mov	r1, r2
 8009bde:	4618      	mov	r0, r3
 8009be0:	f001 f868 	bl	800acb4 <xTaskCheckForTimeOut>
 8009be4:	4603      	mov	r3, r0
 8009be6:	2b00      	cmp	r3, #0
 8009be8:	d123      	bne.n	8009c32 <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009bea:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009bec:	f000 fad5 	bl	800a19a <prvIsQueueEmpty>
 8009bf0:	4603      	mov	r3, r0
 8009bf2:	2b00      	cmp	r3, #0
 8009bf4:	d017      	beq.n	8009c26 <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8009bf6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009bf8:	3324      	adds	r3, #36	; 0x24
 8009bfa:	687a      	ldr	r2, [r7, #4]
 8009bfc:	4611      	mov	r1, r2
 8009bfe:	4618      	mov	r0, r3
 8009c00:	f000 ff92 	bl	800ab28 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8009c04:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009c06:	f000 fa76 	bl	800a0f6 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8009c0a:	f000 fdb5 	bl	800a778 <xTaskResumeAll>
 8009c0e:	4603      	mov	r3, r0
 8009c10:	2b00      	cmp	r3, #0
 8009c12:	d189      	bne.n	8009b28 <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 8009c14:	4b0f      	ldr	r3, [pc, #60]	; (8009c54 <xQueueReceive+0x1b4>)
 8009c16:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009c1a:	601a      	str	r2, [r3, #0]
 8009c1c:	f3bf 8f4f 	dsb	sy
 8009c20:	f3bf 8f6f 	isb	sy
 8009c24:	e780      	b.n	8009b28 <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8009c26:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009c28:	f000 fa65 	bl	800a0f6 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009c2c:	f000 fda4 	bl	800a778 <xTaskResumeAll>
 8009c30:	e77a      	b.n	8009b28 <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8009c32:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009c34:	f000 fa5f 	bl	800a0f6 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009c38:	f000 fd9e 	bl	800a778 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009c3c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009c3e:	f000 faac 	bl	800a19a <prvIsQueueEmpty>
 8009c42:	4603      	mov	r3, r0
 8009c44:	2b00      	cmp	r3, #0
 8009c46:	f43f af6f 	beq.w	8009b28 <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8009c4a:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8009c4c:	4618      	mov	r0, r3
 8009c4e:	3730      	adds	r7, #48	; 0x30
 8009c50:	46bd      	mov	sp, r7
 8009c52:	bd80      	pop	{r7, pc}
 8009c54:	e000ed04 	.word	0xe000ed04

08009c58 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8009c58:	b580      	push	{r7, lr}
 8009c5a:	b08e      	sub	sp, #56	; 0x38
 8009c5c:	af00      	add	r7, sp, #0
 8009c5e:	6078      	str	r0, [r7, #4]
 8009c60:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8009c62:	2300      	movs	r3, #0
 8009c64:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8009c66:	687b      	ldr	r3, [r7, #4]
 8009c68:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8009c6a:	2300      	movs	r3, #0
 8009c6c:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8009c6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c70:	2b00      	cmp	r3, #0
 8009c72:	d109      	bne.n	8009c88 <xQueueSemaphoreTake+0x30>
 8009c74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c78:	f383 8811 	msr	BASEPRI, r3
 8009c7c:	f3bf 8f6f 	isb	sy
 8009c80:	f3bf 8f4f 	dsb	sy
 8009c84:	623b      	str	r3, [r7, #32]
 8009c86:	e7fe      	b.n	8009c86 <xQueueSemaphoreTake+0x2e>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8009c88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009c8c:	2b00      	cmp	r3, #0
 8009c8e:	d009      	beq.n	8009ca4 <xQueueSemaphoreTake+0x4c>
 8009c90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c94:	f383 8811 	msr	BASEPRI, r3
 8009c98:	f3bf 8f6f 	isb	sy
 8009c9c:	f3bf 8f4f 	dsb	sy
 8009ca0:	61fb      	str	r3, [r7, #28]
 8009ca2:	e7fe      	b.n	8009ca2 <xQueueSemaphoreTake+0x4a>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009ca4:	f001 f95a 	bl	800af5c <xTaskGetSchedulerState>
 8009ca8:	4603      	mov	r3, r0
 8009caa:	2b00      	cmp	r3, #0
 8009cac:	d102      	bne.n	8009cb4 <xQueueSemaphoreTake+0x5c>
 8009cae:	683b      	ldr	r3, [r7, #0]
 8009cb0:	2b00      	cmp	r3, #0
 8009cb2:	d101      	bne.n	8009cb8 <xQueueSemaphoreTake+0x60>
 8009cb4:	2301      	movs	r3, #1
 8009cb6:	e000      	b.n	8009cba <xQueueSemaphoreTake+0x62>
 8009cb8:	2300      	movs	r3, #0
 8009cba:	2b00      	cmp	r3, #0
 8009cbc:	d109      	bne.n	8009cd2 <xQueueSemaphoreTake+0x7a>
 8009cbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009cc2:	f383 8811 	msr	BASEPRI, r3
 8009cc6:	f3bf 8f6f 	isb	sy
 8009cca:	f3bf 8f4f 	dsb	sy
 8009cce:	61bb      	str	r3, [r7, #24]
 8009cd0:	e7fe      	b.n	8009cd0 <xQueueSemaphoreTake+0x78>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8009cd2:	f001 ff5b 	bl	800bb8c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8009cd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009cd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009cda:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8009cdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009cde:	2b00      	cmp	r3, #0
 8009ce0:	d024      	beq.n	8009d2c <xQueueSemaphoreTake+0xd4>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8009ce2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ce4:	1e5a      	subs	r2, r3, #1
 8009ce6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009ce8:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8009cea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009cec:	681b      	ldr	r3, [r3, #0]
 8009cee:	2b00      	cmp	r3, #0
 8009cf0:	d104      	bne.n	8009cfc <xQueueSemaphoreTake+0xa4>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 8009cf2:	f001 faaf 	bl	800b254 <pvTaskIncrementMutexHeldCount>
 8009cf6:	4602      	mov	r2, r0
 8009cf8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009cfa:	605a      	str	r2, [r3, #4]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009cfc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009cfe:	691b      	ldr	r3, [r3, #16]
 8009d00:	2b00      	cmp	r3, #0
 8009d02:	d00f      	beq.n	8009d24 <xQueueSemaphoreTake+0xcc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009d04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d06:	3310      	adds	r3, #16
 8009d08:	4618      	mov	r0, r3
 8009d0a:	f000 ff5b 	bl	800abc4 <xTaskRemoveFromEventList>
 8009d0e:	4603      	mov	r3, r0
 8009d10:	2b00      	cmp	r3, #0
 8009d12:	d007      	beq.n	8009d24 <xQueueSemaphoreTake+0xcc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8009d14:	4b53      	ldr	r3, [pc, #332]	; (8009e64 <xQueueSemaphoreTake+0x20c>)
 8009d16:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009d1a:	601a      	str	r2, [r3, #0]
 8009d1c:	f3bf 8f4f 	dsb	sy
 8009d20:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8009d24:	f001 ff60 	bl	800bbe8 <vPortExitCritical>
				return pdPASS;
 8009d28:	2301      	movs	r3, #1
 8009d2a:	e096      	b.n	8009e5a <xQueueSemaphoreTake+0x202>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009d2c:	683b      	ldr	r3, [r7, #0]
 8009d2e:	2b00      	cmp	r3, #0
 8009d30:	d110      	bne.n	8009d54 <xQueueSemaphoreTake+0xfc>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8009d32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d34:	2b00      	cmp	r3, #0
 8009d36:	d009      	beq.n	8009d4c <xQueueSemaphoreTake+0xf4>
 8009d38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d3c:	f383 8811 	msr	BASEPRI, r3
 8009d40:	f3bf 8f6f 	isb	sy
 8009d44:	f3bf 8f4f 	dsb	sy
 8009d48:	617b      	str	r3, [r7, #20]
 8009d4a:	e7fe      	b.n	8009d4a <xQueueSemaphoreTake+0xf2>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8009d4c:	f001 ff4c 	bl	800bbe8 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8009d50:	2300      	movs	r3, #0
 8009d52:	e082      	b.n	8009e5a <xQueueSemaphoreTake+0x202>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009d54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009d56:	2b00      	cmp	r3, #0
 8009d58:	d106      	bne.n	8009d68 <xQueueSemaphoreTake+0x110>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009d5a:	f107 030c 	add.w	r3, r7, #12
 8009d5e:	4618      	mov	r0, r3
 8009d60:	f000 ff92 	bl	800ac88 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009d64:	2301      	movs	r3, #1
 8009d66:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8009d68:	f001 ff3e 	bl	800bbe8 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009d6c:	f000 fcf6 	bl	800a75c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009d70:	f001 ff0c 	bl	800bb8c <vPortEnterCritical>
 8009d74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d76:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009d7a:	b25b      	sxtb	r3, r3
 8009d7c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009d80:	d103      	bne.n	8009d8a <xQueueSemaphoreTake+0x132>
 8009d82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d84:	2200      	movs	r2, #0
 8009d86:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009d8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d8c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009d90:	b25b      	sxtb	r3, r3
 8009d92:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009d96:	d103      	bne.n	8009da0 <xQueueSemaphoreTake+0x148>
 8009d98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d9a:	2200      	movs	r2, #0
 8009d9c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009da0:	f001 ff22 	bl	800bbe8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009da4:	463a      	mov	r2, r7
 8009da6:	f107 030c 	add.w	r3, r7, #12
 8009daa:	4611      	mov	r1, r2
 8009dac:	4618      	mov	r0, r3
 8009dae:	f000 ff81 	bl	800acb4 <xTaskCheckForTimeOut>
 8009db2:	4603      	mov	r3, r0
 8009db4:	2b00      	cmp	r3, #0
 8009db6:	d132      	bne.n	8009e1e <xQueueSemaphoreTake+0x1c6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009db8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009dba:	f000 f9ee 	bl	800a19a <prvIsQueueEmpty>
 8009dbe:	4603      	mov	r3, r0
 8009dc0:	2b00      	cmp	r3, #0
 8009dc2:	d026      	beq.n	8009e12 <xQueueSemaphoreTake+0x1ba>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8009dc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009dc6:	681b      	ldr	r3, [r3, #0]
 8009dc8:	2b00      	cmp	r3, #0
 8009dca:	d109      	bne.n	8009de0 <xQueueSemaphoreTake+0x188>
					{
						taskENTER_CRITICAL();
 8009dcc:	f001 fede 	bl	800bb8c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 8009dd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009dd2:	685b      	ldr	r3, [r3, #4]
 8009dd4:	4618      	mov	r0, r3
 8009dd6:	f001 f8df 	bl	800af98 <xTaskPriorityInherit>
 8009dda:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8009ddc:	f001 ff04 	bl	800bbe8 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8009de0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009de2:	3324      	adds	r3, #36	; 0x24
 8009de4:	683a      	ldr	r2, [r7, #0]
 8009de6:	4611      	mov	r1, r2
 8009de8:	4618      	mov	r0, r3
 8009dea:	f000 fe9d 	bl	800ab28 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8009dee:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009df0:	f000 f981 	bl	800a0f6 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8009df4:	f000 fcc0 	bl	800a778 <xTaskResumeAll>
 8009df8:	4603      	mov	r3, r0
 8009dfa:	2b00      	cmp	r3, #0
 8009dfc:	f47f af69 	bne.w	8009cd2 <xQueueSemaphoreTake+0x7a>
				{
					portYIELD_WITHIN_API();
 8009e00:	4b18      	ldr	r3, [pc, #96]	; (8009e64 <xQueueSemaphoreTake+0x20c>)
 8009e02:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009e06:	601a      	str	r2, [r3, #0]
 8009e08:	f3bf 8f4f 	dsb	sy
 8009e0c:	f3bf 8f6f 	isb	sy
 8009e10:	e75f      	b.n	8009cd2 <xQueueSemaphoreTake+0x7a>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8009e12:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009e14:	f000 f96f 	bl	800a0f6 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009e18:	f000 fcae 	bl	800a778 <xTaskResumeAll>
 8009e1c:	e759      	b.n	8009cd2 <xQueueSemaphoreTake+0x7a>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8009e1e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009e20:	f000 f969 	bl	800a0f6 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009e24:	f000 fca8 	bl	800a778 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009e28:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009e2a:	f000 f9b6 	bl	800a19a <prvIsQueueEmpty>
 8009e2e:	4603      	mov	r3, r0
 8009e30:	2b00      	cmp	r3, #0
 8009e32:	f43f af4e 	beq.w	8009cd2 <xQueueSemaphoreTake+0x7a>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8009e36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e38:	2b00      	cmp	r3, #0
 8009e3a:	d00d      	beq.n	8009e58 <xQueueSemaphoreTake+0x200>
					{
						taskENTER_CRITICAL();
 8009e3c:	f001 fea6 	bl	800bb8c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8009e40:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009e42:	f000 f8b0 	bl	8009fa6 <prvGetDisinheritPriorityAfterTimeout>
 8009e46:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
 8009e48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e4a:	685b      	ldr	r3, [r3, #4]
 8009e4c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009e4e:	4618      	mov	r0, r3
 8009e50:	f001 f97c 	bl	800b14c <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8009e54:	f001 fec8 	bl	800bbe8 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8009e58:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8009e5a:	4618      	mov	r0, r3
 8009e5c:	3738      	adds	r7, #56	; 0x38
 8009e5e:	46bd      	mov	sp, r7
 8009e60:	bd80      	pop	{r7, pc}
 8009e62:	bf00      	nop
 8009e64:	e000ed04 	.word	0xe000ed04

08009e68 <xQueueReceiveFromISR>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8009e68:	b580      	push	{r7, lr}
 8009e6a:	b08e      	sub	sp, #56	; 0x38
 8009e6c:	af00      	add	r7, sp, #0
 8009e6e:	60f8      	str	r0, [r7, #12]
 8009e70:	60b9      	str	r1, [r7, #8]
 8009e72:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8009e74:	68fb      	ldr	r3, [r7, #12]
 8009e76:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8009e78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e7a:	2b00      	cmp	r3, #0
 8009e7c:	d109      	bne.n	8009e92 <xQueueReceiveFromISR+0x2a>
 8009e7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e82:	f383 8811 	msr	BASEPRI, r3
 8009e86:	f3bf 8f6f 	isb	sy
 8009e8a:	f3bf 8f4f 	dsb	sy
 8009e8e:	623b      	str	r3, [r7, #32]
 8009e90:	e7fe      	b.n	8009e90 <xQueueReceiveFromISR+0x28>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009e92:	68bb      	ldr	r3, [r7, #8]
 8009e94:	2b00      	cmp	r3, #0
 8009e96:	d103      	bne.n	8009ea0 <xQueueReceiveFromISR+0x38>
 8009e98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e9c:	2b00      	cmp	r3, #0
 8009e9e:	d101      	bne.n	8009ea4 <xQueueReceiveFromISR+0x3c>
 8009ea0:	2301      	movs	r3, #1
 8009ea2:	e000      	b.n	8009ea6 <xQueueReceiveFromISR+0x3e>
 8009ea4:	2300      	movs	r3, #0
 8009ea6:	2b00      	cmp	r3, #0
 8009ea8:	d109      	bne.n	8009ebe <xQueueReceiveFromISR+0x56>
 8009eaa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009eae:	f383 8811 	msr	BASEPRI, r3
 8009eb2:	f3bf 8f6f 	isb	sy
 8009eb6:	f3bf 8f4f 	dsb	sy
 8009eba:	61fb      	str	r3, [r7, #28]
 8009ebc:	e7fe      	b.n	8009ebc <xQueueReceiveFromISR+0x54>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8009ebe:	f001 ff41 	bl	800bd44 <vPortValidateInterruptPriority>
	__asm volatile
 8009ec2:	f3ef 8211 	mrs	r2, BASEPRI
 8009ec6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009eca:	f383 8811 	msr	BASEPRI, r3
 8009ece:	f3bf 8f6f 	isb	sy
 8009ed2:	f3bf 8f4f 	dsb	sy
 8009ed6:	61ba      	str	r2, [r7, #24]
 8009ed8:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8009eda:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8009edc:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009ede:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ee0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009ee2:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009ee4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ee6:	2b00      	cmp	r3, #0
 8009ee8:	d02f      	beq.n	8009f4a <xQueueReceiveFromISR+0xe2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8009eea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009eec:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009ef0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8009ef4:	68b9      	ldr	r1, [r7, #8]
 8009ef6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009ef8:	f000 f8d7 	bl	800a0aa <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8009efc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009efe:	1e5a      	subs	r2, r3, #1
 8009f00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f02:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8009f04:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8009f08:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009f0c:	d112      	bne.n	8009f34 <xQueueReceiveFromISR+0xcc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009f0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f10:	691b      	ldr	r3, [r3, #16]
 8009f12:	2b00      	cmp	r3, #0
 8009f14:	d016      	beq.n	8009f44 <xQueueReceiveFromISR+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009f16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f18:	3310      	adds	r3, #16
 8009f1a:	4618      	mov	r0, r3
 8009f1c:	f000 fe52 	bl	800abc4 <xTaskRemoveFromEventList>
 8009f20:	4603      	mov	r3, r0
 8009f22:	2b00      	cmp	r3, #0
 8009f24:	d00e      	beq.n	8009f44 <xQueueReceiveFromISR+0xdc>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8009f26:	687b      	ldr	r3, [r7, #4]
 8009f28:	2b00      	cmp	r3, #0
 8009f2a:	d00b      	beq.n	8009f44 <xQueueReceiveFromISR+0xdc>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	2201      	movs	r2, #1
 8009f30:	601a      	str	r2, [r3, #0]
 8009f32:	e007      	b.n	8009f44 <xQueueReceiveFromISR+0xdc>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8009f34:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009f38:	3301      	adds	r3, #1
 8009f3a:	b2db      	uxtb	r3, r3
 8009f3c:	b25a      	sxtb	r2, r3
 8009f3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f40:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8009f44:	2301      	movs	r3, #1
 8009f46:	637b      	str	r3, [r7, #52]	; 0x34
 8009f48:	e001      	b.n	8009f4e <xQueueReceiveFromISR+0xe6>
		}
		else
		{
			xReturn = pdFAIL;
 8009f4a:	2300      	movs	r3, #0
 8009f4c:	637b      	str	r3, [r7, #52]	; 0x34
 8009f4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009f50:	613b      	str	r3, [r7, #16]
	__asm volatile
 8009f52:	693b      	ldr	r3, [r7, #16]
 8009f54:	f383 8811 	msr	BASEPRI, r3
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8009f58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8009f5a:	4618      	mov	r0, r3
 8009f5c:	3738      	adds	r7, #56	; 0x38
 8009f5e:	46bd      	mov	sp, r7
 8009f60:	bd80      	pop	{r7, pc}

08009f62 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8009f62:	b580      	push	{r7, lr}
 8009f64:	b084      	sub	sp, #16
 8009f66:	af00      	add	r7, sp, #0
 8009f68:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8009f6a:	687b      	ldr	r3, [r7, #4]
 8009f6c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8009f6e:	68fb      	ldr	r3, [r7, #12]
 8009f70:	2b00      	cmp	r3, #0
 8009f72:	d109      	bne.n	8009f88 <vQueueDelete+0x26>
	__asm volatile
 8009f74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f78:	f383 8811 	msr	BASEPRI, r3
 8009f7c:	f3bf 8f6f 	isb	sy
 8009f80:	f3bf 8f4f 	dsb	sy
 8009f84:	60bb      	str	r3, [r7, #8]
 8009f86:	e7fe      	b.n	8009f86 <vQueueDelete+0x24>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8009f88:	68f8      	ldr	r0, [r7, #12]
 8009f8a:	f000 f95d 	bl	800a248 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8009f8e:	68fb      	ldr	r3, [r7, #12]
 8009f90:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8009f94:	2b00      	cmp	r3, #0
 8009f96:	d102      	bne.n	8009f9e <vQueueDelete+0x3c>
		{
			vPortFree( pxQueue );
 8009f98:	68f8      	ldr	r0, [r7, #12]
 8009f9a:	f001 ffd3 	bl	800bf44 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8009f9e:	bf00      	nop
 8009fa0:	3710      	adds	r7, #16
 8009fa2:	46bd      	mov	sp, r7
 8009fa4:	bd80      	pop	{r7, pc}

08009fa6 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8009fa6:	b480      	push	{r7}
 8009fa8:	b085      	sub	sp, #20
 8009faa:	af00      	add	r7, sp, #0
 8009fac:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
 8009fae:	687b      	ldr	r3, [r7, #4]
 8009fb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009fb2:	2b00      	cmp	r3, #0
 8009fb4:	d006      	beq.n	8009fc4 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8009fb6:	687b      	ldr	r3, [r7, #4]
 8009fb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009fba:	681b      	ldr	r3, [r3, #0]
 8009fbc:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 8009fc0:	60fb      	str	r3, [r7, #12]
 8009fc2:	e001      	b.n	8009fc8 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8009fc4:	2300      	movs	r3, #0
 8009fc6:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8009fc8:	68fb      	ldr	r3, [r7, #12]
	}
 8009fca:	4618      	mov	r0, r3
 8009fcc:	3714      	adds	r7, #20
 8009fce:	46bd      	mov	sp, r7
 8009fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fd4:	4770      	bx	lr

08009fd6 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8009fd6:	b580      	push	{r7, lr}
 8009fd8:	b086      	sub	sp, #24
 8009fda:	af00      	add	r7, sp, #0
 8009fdc:	60f8      	str	r0, [r7, #12]
 8009fde:	60b9      	str	r1, [r7, #8]
 8009fe0:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8009fe2:	2300      	movs	r3, #0
 8009fe4:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009fe6:	68fb      	ldr	r3, [r7, #12]
 8009fe8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009fea:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8009fec:	68fb      	ldr	r3, [r7, #12]
 8009fee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ff0:	2b00      	cmp	r3, #0
 8009ff2:	d10d      	bne.n	800a010 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8009ff4:	68fb      	ldr	r3, [r7, #12]
 8009ff6:	681b      	ldr	r3, [r3, #0]
 8009ff8:	2b00      	cmp	r3, #0
 8009ffa:	d14d      	bne.n	800a098 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8009ffc:	68fb      	ldr	r3, [r7, #12]
 8009ffe:	685b      	ldr	r3, [r3, #4]
 800a000:	4618      	mov	r0, r3
 800a002:	f001 f837 	bl	800b074 <xTaskPriorityDisinherit>
 800a006:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 800a008:	68fb      	ldr	r3, [r7, #12]
 800a00a:	2200      	movs	r2, #0
 800a00c:	605a      	str	r2, [r3, #4]
 800a00e:	e043      	b.n	800a098 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	2b00      	cmp	r3, #0
 800a014:	d119      	bne.n	800a04a <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 800a016:	68fb      	ldr	r3, [r7, #12]
 800a018:	6898      	ldr	r0, [r3, #8]
 800a01a:	68fb      	ldr	r3, [r7, #12]
 800a01c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a01e:	461a      	mov	r2, r3
 800a020:	68b9      	ldr	r1, [r7, #8]
 800a022:	f00d fdb8 	bl	8017b96 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 800a026:	68fb      	ldr	r3, [r7, #12]
 800a028:	689a      	ldr	r2, [r3, #8]
 800a02a:	68fb      	ldr	r3, [r7, #12]
 800a02c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a02e:	441a      	add	r2, r3
 800a030:	68fb      	ldr	r3, [r7, #12]
 800a032:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800a034:	68fb      	ldr	r3, [r7, #12]
 800a036:	689a      	ldr	r2, [r3, #8]
 800a038:	68fb      	ldr	r3, [r7, #12]
 800a03a:	685b      	ldr	r3, [r3, #4]
 800a03c:	429a      	cmp	r2, r3
 800a03e:	d32b      	bcc.n	800a098 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800a040:	68fb      	ldr	r3, [r7, #12]
 800a042:	681a      	ldr	r2, [r3, #0]
 800a044:	68fb      	ldr	r3, [r7, #12]
 800a046:	609a      	str	r2, [r3, #8]
 800a048:	e026      	b.n	800a098 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a04a:	68fb      	ldr	r3, [r7, #12]
 800a04c:	68d8      	ldr	r0, [r3, #12]
 800a04e:	68fb      	ldr	r3, [r7, #12]
 800a050:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a052:	461a      	mov	r2, r3
 800a054:	68b9      	ldr	r1, [r7, #8]
 800a056:	f00d fd9e 	bl	8017b96 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 800a05a:	68fb      	ldr	r3, [r7, #12]
 800a05c:	68da      	ldr	r2, [r3, #12]
 800a05e:	68fb      	ldr	r3, [r7, #12]
 800a060:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a062:	425b      	negs	r3, r3
 800a064:	441a      	add	r2, r3
 800a066:	68fb      	ldr	r3, [r7, #12]
 800a068:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800a06a:	68fb      	ldr	r3, [r7, #12]
 800a06c:	68da      	ldr	r2, [r3, #12]
 800a06e:	68fb      	ldr	r3, [r7, #12]
 800a070:	681b      	ldr	r3, [r3, #0]
 800a072:	429a      	cmp	r2, r3
 800a074:	d207      	bcs.n	800a086 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 800a076:	68fb      	ldr	r3, [r7, #12]
 800a078:	685a      	ldr	r2, [r3, #4]
 800a07a:	68fb      	ldr	r3, [r7, #12]
 800a07c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a07e:	425b      	negs	r3, r3
 800a080:	441a      	add	r2, r3
 800a082:	68fb      	ldr	r3, [r7, #12]
 800a084:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800a086:	687b      	ldr	r3, [r7, #4]
 800a088:	2b02      	cmp	r3, #2
 800a08a:	d105      	bne.n	800a098 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a08c:	693b      	ldr	r3, [r7, #16]
 800a08e:	2b00      	cmp	r3, #0
 800a090:	d002      	beq.n	800a098 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800a092:	693b      	ldr	r3, [r7, #16]
 800a094:	3b01      	subs	r3, #1
 800a096:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800a098:	693b      	ldr	r3, [r7, #16]
 800a09a:	1c5a      	adds	r2, r3, #1
 800a09c:	68fb      	ldr	r3, [r7, #12]
 800a09e:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800a0a0:	697b      	ldr	r3, [r7, #20]
}
 800a0a2:	4618      	mov	r0, r3
 800a0a4:	3718      	adds	r7, #24
 800a0a6:	46bd      	mov	sp, r7
 800a0a8:	bd80      	pop	{r7, pc}

0800a0aa <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800a0aa:	b580      	push	{r7, lr}
 800a0ac:	b082      	sub	sp, #8
 800a0ae:	af00      	add	r7, sp, #0
 800a0b0:	6078      	str	r0, [r7, #4]
 800a0b2:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800a0b4:	687b      	ldr	r3, [r7, #4]
 800a0b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a0b8:	2b00      	cmp	r3, #0
 800a0ba:	d018      	beq.n	800a0ee <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	68da      	ldr	r2, [r3, #12]
 800a0c0:	687b      	ldr	r3, [r7, #4]
 800a0c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a0c4:	441a      	add	r2, r3
 800a0c6:	687b      	ldr	r3, [r7, #4]
 800a0c8:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800a0ca:	687b      	ldr	r3, [r7, #4]
 800a0cc:	68da      	ldr	r2, [r3, #12]
 800a0ce:	687b      	ldr	r3, [r7, #4]
 800a0d0:	685b      	ldr	r3, [r3, #4]
 800a0d2:	429a      	cmp	r2, r3
 800a0d4:	d303      	bcc.n	800a0de <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 800a0d6:	687b      	ldr	r3, [r7, #4]
 800a0d8:	681a      	ldr	r2, [r3, #0]
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 800a0de:	687b      	ldr	r3, [r7, #4]
 800a0e0:	68d9      	ldr	r1, [r3, #12]
 800a0e2:	687b      	ldr	r3, [r7, #4]
 800a0e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a0e6:	461a      	mov	r2, r3
 800a0e8:	6838      	ldr	r0, [r7, #0]
 800a0ea:	f00d fd54 	bl	8017b96 <memcpy>
	}
}
 800a0ee:	bf00      	nop
 800a0f0:	3708      	adds	r7, #8
 800a0f2:	46bd      	mov	sp, r7
 800a0f4:	bd80      	pop	{r7, pc}

0800a0f6 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800a0f6:	b580      	push	{r7, lr}
 800a0f8:	b084      	sub	sp, #16
 800a0fa:	af00      	add	r7, sp, #0
 800a0fc:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800a0fe:	f001 fd45 	bl	800bb8c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800a102:	687b      	ldr	r3, [r7, #4]
 800a104:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a108:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800a10a:	e011      	b.n	800a130 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a10c:	687b      	ldr	r3, [r7, #4]
 800a10e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a110:	2b00      	cmp	r3, #0
 800a112:	d012      	beq.n	800a13a <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a114:	687b      	ldr	r3, [r7, #4]
 800a116:	3324      	adds	r3, #36	; 0x24
 800a118:	4618      	mov	r0, r3
 800a11a:	f000 fd53 	bl	800abc4 <xTaskRemoveFromEventList>
 800a11e:	4603      	mov	r3, r0
 800a120:	2b00      	cmp	r3, #0
 800a122:	d001      	beq.n	800a128 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800a124:	f000 fe26 	bl	800ad74 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800a128:	7bfb      	ldrb	r3, [r7, #15]
 800a12a:	3b01      	subs	r3, #1
 800a12c:	b2db      	uxtb	r3, r3
 800a12e:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800a130:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a134:	2b00      	cmp	r3, #0
 800a136:	dce9      	bgt.n	800a10c <prvUnlockQueue+0x16>
 800a138:	e000      	b.n	800a13c <prvUnlockQueue+0x46>
					break;
 800a13a:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800a13c:	687b      	ldr	r3, [r7, #4]
 800a13e:	22ff      	movs	r2, #255	; 0xff
 800a140:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800a144:	f001 fd50 	bl	800bbe8 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800a148:	f001 fd20 	bl	800bb8c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800a14c:	687b      	ldr	r3, [r7, #4]
 800a14e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a152:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800a154:	e011      	b.n	800a17a <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a156:	687b      	ldr	r3, [r7, #4]
 800a158:	691b      	ldr	r3, [r3, #16]
 800a15a:	2b00      	cmp	r3, #0
 800a15c:	d012      	beq.n	800a184 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a15e:	687b      	ldr	r3, [r7, #4]
 800a160:	3310      	adds	r3, #16
 800a162:	4618      	mov	r0, r3
 800a164:	f000 fd2e 	bl	800abc4 <xTaskRemoveFromEventList>
 800a168:	4603      	mov	r3, r0
 800a16a:	2b00      	cmp	r3, #0
 800a16c:	d001      	beq.n	800a172 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800a16e:	f000 fe01 	bl	800ad74 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800a172:	7bbb      	ldrb	r3, [r7, #14]
 800a174:	3b01      	subs	r3, #1
 800a176:	b2db      	uxtb	r3, r3
 800a178:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800a17a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a17e:	2b00      	cmp	r3, #0
 800a180:	dce9      	bgt.n	800a156 <prvUnlockQueue+0x60>
 800a182:	e000      	b.n	800a186 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800a184:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800a186:	687b      	ldr	r3, [r7, #4]
 800a188:	22ff      	movs	r2, #255	; 0xff
 800a18a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800a18e:	f001 fd2b 	bl	800bbe8 <vPortExitCritical>
}
 800a192:	bf00      	nop
 800a194:	3710      	adds	r7, #16
 800a196:	46bd      	mov	sp, r7
 800a198:	bd80      	pop	{r7, pc}

0800a19a <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800a19a:	b580      	push	{r7, lr}
 800a19c:	b084      	sub	sp, #16
 800a19e:	af00      	add	r7, sp, #0
 800a1a0:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800a1a2:	f001 fcf3 	bl	800bb8c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800a1a6:	687b      	ldr	r3, [r7, #4]
 800a1a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a1aa:	2b00      	cmp	r3, #0
 800a1ac:	d102      	bne.n	800a1b4 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800a1ae:	2301      	movs	r3, #1
 800a1b0:	60fb      	str	r3, [r7, #12]
 800a1b2:	e001      	b.n	800a1b8 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800a1b4:	2300      	movs	r3, #0
 800a1b6:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800a1b8:	f001 fd16 	bl	800bbe8 <vPortExitCritical>

	return xReturn;
 800a1bc:	68fb      	ldr	r3, [r7, #12]
}
 800a1be:	4618      	mov	r0, r3
 800a1c0:	3710      	adds	r7, #16
 800a1c2:	46bd      	mov	sp, r7
 800a1c4:	bd80      	pop	{r7, pc}

0800a1c6 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800a1c6:	b580      	push	{r7, lr}
 800a1c8:	b084      	sub	sp, #16
 800a1ca:	af00      	add	r7, sp, #0
 800a1cc:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800a1ce:	f001 fcdd 	bl	800bb8c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800a1d2:	687b      	ldr	r3, [r7, #4]
 800a1d4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a1d6:	687b      	ldr	r3, [r7, #4]
 800a1d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a1da:	429a      	cmp	r2, r3
 800a1dc:	d102      	bne.n	800a1e4 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800a1de:	2301      	movs	r3, #1
 800a1e0:	60fb      	str	r3, [r7, #12]
 800a1e2:	e001      	b.n	800a1e8 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800a1e4:	2300      	movs	r3, #0
 800a1e6:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800a1e8:	f001 fcfe 	bl	800bbe8 <vPortExitCritical>

	return xReturn;
 800a1ec:	68fb      	ldr	r3, [r7, #12]
}
 800a1ee:	4618      	mov	r0, r3
 800a1f0:	3710      	adds	r7, #16
 800a1f2:	46bd      	mov	sp, r7
 800a1f4:	bd80      	pop	{r7, pc}
	...

0800a1f8 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800a1f8:	b480      	push	{r7}
 800a1fa:	b085      	sub	sp, #20
 800a1fc:	af00      	add	r7, sp, #0
 800a1fe:	6078      	str	r0, [r7, #4]
 800a200:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a202:	2300      	movs	r3, #0
 800a204:	60fb      	str	r3, [r7, #12]
 800a206:	e014      	b.n	800a232 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800a208:	4a0e      	ldr	r2, [pc, #56]	; (800a244 <vQueueAddToRegistry+0x4c>)
 800a20a:	68fb      	ldr	r3, [r7, #12]
 800a20c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800a210:	2b00      	cmp	r3, #0
 800a212:	d10b      	bne.n	800a22c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800a214:	490b      	ldr	r1, [pc, #44]	; (800a244 <vQueueAddToRegistry+0x4c>)
 800a216:	68fb      	ldr	r3, [r7, #12]
 800a218:	683a      	ldr	r2, [r7, #0]
 800a21a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800a21e:	4a09      	ldr	r2, [pc, #36]	; (800a244 <vQueueAddToRegistry+0x4c>)
 800a220:	68fb      	ldr	r3, [r7, #12]
 800a222:	00db      	lsls	r3, r3, #3
 800a224:	4413      	add	r3, r2
 800a226:	687a      	ldr	r2, [r7, #4]
 800a228:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800a22a:	e005      	b.n	800a238 <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a22c:	68fb      	ldr	r3, [r7, #12]
 800a22e:	3301      	adds	r3, #1
 800a230:	60fb      	str	r3, [r7, #12]
 800a232:	68fb      	ldr	r3, [r7, #12]
 800a234:	2b07      	cmp	r3, #7
 800a236:	d9e7      	bls.n	800a208 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800a238:	bf00      	nop
 800a23a:	3714      	adds	r7, #20
 800a23c:	46bd      	mov	sp, r7
 800a23e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a242:	4770      	bx	lr
 800a244:	20007e3c 	.word	0x20007e3c

0800a248 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800a248:	b480      	push	{r7}
 800a24a:	b085      	sub	sp, #20
 800a24c:	af00      	add	r7, sp, #0
 800a24e:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a250:	2300      	movs	r3, #0
 800a252:	60fb      	str	r3, [r7, #12]
 800a254:	e016      	b.n	800a284 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800a256:	4a10      	ldr	r2, [pc, #64]	; (800a298 <vQueueUnregisterQueue+0x50>)
 800a258:	68fb      	ldr	r3, [r7, #12]
 800a25a:	00db      	lsls	r3, r3, #3
 800a25c:	4413      	add	r3, r2
 800a25e:	685b      	ldr	r3, [r3, #4]
 800a260:	687a      	ldr	r2, [r7, #4]
 800a262:	429a      	cmp	r2, r3
 800a264:	d10b      	bne.n	800a27e <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800a266:	4a0c      	ldr	r2, [pc, #48]	; (800a298 <vQueueUnregisterQueue+0x50>)
 800a268:	68fb      	ldr	r3, [r7, #12]
 800a26a:	2100      	movs	r1, #0
 800a26c:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800a270:	4a09      	ldr	r2, [pc, #36]	; (800a298 <vQueueUnregisterQueue+0x50>)
 800a272:	68fb      	ldr	r3, [r7, #12]
 800a274:	00db      	lsls	r3, r3, #3
 800a276:	4413      	add	r3, r2
 800a278:	2200      	movs	r2, #0
 800a27a:	605a      	str	r2, [r3, #4]
				break;
 800a27c:	e005      	b.n	800a28a <vQueueUnregisterQueue+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a27e:	68fb      	ldr	r3, [r7, #12]
 800a280:	3301      	adds	r3, #1
 800a282:	60fb      	str	r3, [r7, #12]
 800a284:	68fb      	ldr	r3, [r7, #12]
 800a286:	2b07      	cmp	r3, #7
 800a288:	d9e5      	bls.n	800a256 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800a28a:	bf00      	nop
 800a28c:	3714      	adds	r7, #20
 800a28e:	46bd      	mov	sp, r7
 800a290:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a294:	4770      	bx	lr
 800a296:	bf00      	nop
 800a298:	20007e3c 	.word	0x20007e3c

0800a29c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800a29c:	b580      	push	{r7, lr}
 800a29e:	b086      	sub	sp, #24
 800a2a0:	af00      	add	r7, sp, #0
 800a2a2:	60f8      	str	r0, [r7, #12]
 800a2a4:	60b9      	str	r1, [r7, #8]
 800a2a6:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800a2a8:	68fb      	ldr	r3, [r7, #12]
 800a2aa:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800a2ac:	f001 fc6e 	bl	800bb8c <vPortEnterCritical>
 800a2b0:	697b      	ldr	r3, [r7, #20]
 800a2b2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a2b6:	b25b      	sxtb	r3, r3
 800a2b8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a2bc:	d103      	bne.n	800a2c6 <vQueueWaitForMessageRestricted+0x2a>
 800a2be:	697b      	ldr	r3, [r7, #20]
 800a2c0:	2200      	movs	r2, #0
 800a2c2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a2c6:	697b      	ldr	r3, [r7, #20]
 800a2c8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a2cc:	b25b      	sxtb	r3, r3
 800a2ce:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a2d2:	d103      	bne.n	800a2dc <vQueueWaitForMessageRestricted+0x40>
 800a2d4:	697b      	ldr	r3, [r7, #20]
 800a2d6:	2200      	movs	r2, #0
 800a2d8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a2dc:	f001 fc84 	bl	800bbe8 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800a2e0:	697b      	ldr	r3, [r7, #20]
 800a2e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a2e4:	2b00      	cmp	r3, #0
 800a2e6:	d106      	bne.n	800a2f6 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800a2e8:	697b      	ldr	r3, [r7, #20]
 800a2ea:	3324      	adds	r3, #36	; 0x24
 800a2ec:	687a      	ldr	r2, [r7, #4]
 800a2ee:	68b9      	ldr	r1, [r7, #8]
 800a2f0:	4618      	mov	r0, r3
 800a2f2:	f000 fc3d 	bl	800ab70 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800a2f6:	6978      	ldr	r0, [r7, #20]
 800a2f8:	f7ff fefd 	bl	800a0f6 <prvUnlockQueue>
	}
 800a2fc:	bf00      	nop
 800a2fe:	3718      	adds	r7, #24
 800a300:	46bd      	mov	sp, r7
 800a302:	bd80      	pop	{r7, pc}

0800a304 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800a304:	b580      	push	{r7, lr}
 800a306:	b08e      	sub	sp, #56	; 0x38
 800a308:	af04      	add	r7, sp, #16
 800a30a:	60f8      	str	r0, [r7, #12]
 800a30c:	60b9      	str	r1, [r7, #8]
 800a30e:	607a      	str	r2, [r7, #4]
 800a310:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800a312:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a314:	2b00      	cmp	r3, #0
 800a316:	d109      	bne.n	800a32c <xTaskCreateStatic+0x28>
 800a318:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a31c:	f383 8811 	msr	BASEPRI, r3
 800a320:	f3bf 8f6f 	isb	sy
 800a324:	f3bf 8f4f 	dsb	sy
 800a328:	623b      	str	r3, [r7, #32]
 800a32a:	e7fe      	b.n	800a32a <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 800a32c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a32e:	2b00      	cmp	r3, #0
 800a330:	d109      	bne.n	800a346 <xTaskCreateStatic+0x42>
 800a332:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a336:	f383 8811 	msr	BASEPRI, r3
 800a33a:	f3bf 8f6f 	isb	sy
 800a33e:	f3bf 8f4f 	dsb	sy
 800a342:	61fb      	str	r3, [r7, #28]
 800a344:	e7fe      	b.n	800a344 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800a346:	235c      	movs	r3, #92	; 0x5c
 800a348:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800a34a:	693b      	ldr	r3, [r7, #16]
 800a34c:	2b5c      	cmp	r3, #92	; 0x5c
 800a34e:	d009      	beq.n	800a364 <xTaskCreateStatic+0x60>
 800a350:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a354:	f383 8811 	msr	BASEPRI, r3
 800a358:	f3bf 8f6f 	isb	sy
 800a35c:	f3bf 8f4f 	dsb	sy
 800a360:	61bb      	str	r3, [r7, #24]
 800a362:	e7fe      	b.n	800a362 <xTaskCreateStatic+0x5e>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800a364:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a366:	2b00      	cmp	r3, #0
 800a368:	d01e      	beq.n	800a3a8 <xTaskCreateStatic+0xa4>
 800a36a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a36c:	2b00      	cmp	r3, #0
 800a36e:	d01b      	beq.n	800a3a8 <xTaskCreateStatic+0xa4>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800a370:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a372:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800a374:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a376:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a378:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800a37a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a37c:	2202      	movs	r2, #2
 800a37e:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800a382:	2300      	movs	r3, #0
 800a384:	9303      	str	r3, [sp, #12]
 800a386:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a388:	9302      	str	r3, [sp, #8]
 800a38a:	f107 0314 	add.w	r3, r7, #20
 800a38e:	9301      	str	r3, [sp, #4]
 800a390:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a392:	9300      	str	r3, [sp, #0]
 800a394:	683b      	ldr	r3, [r7, #0]
 800a396:	687a      	ldr	r2, [r7, #4]
 800a398:	68b9      	ldr	r1, [r7, #8]
 800a39a:	68f8      	ldr	r0, [r7, #12]
 800a39c:	f000 f850 	bl	800a440 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800a3a0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a3a2:	f000 f8d3 	bl	800a54c <prvAddNewTaskToReadyList>
 800a3a6:	e001      	b.n	800a3ac <xTaskCreateStatic+0xa8>
		}
		else
		{
			xReturn = NULL;
 800a3a8:	2300      	movs	r3, #0
 800a3aa:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800a3ac:	697b      	ldr	r3, [r7, #20]
	}
 800a3ae:	4618      	mov	r0, r3
 800a3b0:	3728      	adds	r7, #40	; 0x28
 800a3b2:	46bd      	mov	sp, r7
 800a3b4:	bd80      	pop	{r7, pc}

0800a3b6 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800a3b6:	b580      	push	{r7, lr}
 800a3b8:	b08c      	sub	sp, #48	; 0x30
 800a3ba:	af04      	add	r7, sp, #16
 800a3bc:	60f8      	str	r0, [r7, #12]
 800a3be:	60b9      	str	r1, [r7, #8]
 800a3c0:	603b      	str	r3, [r7, #0]
 800a3c2:	4613      	mov	r3, r2
 800a3c4:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a3c6:	88fb      	ldrh	r3, [r7, #6]
 800a3c8:	009b      	lsls	r3, r3, #2
 800a3ca:	4618      	mov	r0, r3
 800a3cc:	f001 fcf8 	bl	800bdc0 <pvPortMalloc>
 800a3d0:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800a3d2:	697b      	ldr	r3, [r7, #20]
 800a3d4:	2b00      	cmp	r3, #0
 800a3d6:	d00e      	beq.n	800a3f6 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 800a3d8:	205c      	movs	r0, #92	; 0x5c
 800a3da:	f001 fcf1 	bl	800bdc0 <pvPortMalloc>
 800a3de:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800a3e0:	69fb      	ldr	r3, [r7, #28]
 800a3e2:	2b00      	cmp	r3, #0
 800a3e4:	d003      	beq.n	800a3ee <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800a3e6:	69fb      	ldr	r3, [r7, #28]
 800a3e8:	697a      	ldr	r2, [r7, #20]
 800a3ea:	631a      	str	r2, [r3, #48]	; 0x30
 800a3ec:	e005      	b.n	800a3fa <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800a3ee:	6978      	ldr	r0, [r7, #20]
 800a3f0:	f001 fda8 	bl	800bf44 <vPortFree>
 800a3f4:	e001      	b.n	800a3fa <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800a3f6:	2300      	movs	r3, #0
 800a3f8:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800a3fa:	69fb      	ldr	r3, [r7, #28]
 800a3fc:	2b00      	cmp	r3, #0
 800a3fe:	d017      	beq.n	800a430 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800a400:	69fb      	ldr	r3, [r7, #28]
 800a402:	2200      	movs	r2, #0
 800a404:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800a408:	88fa      	ldrh	r2, [r7, #6]
 800a40a:	2300      	movs	r3, #0
 800a40c:	9303      	str	r3, [sp, #12]
 800a40e:	69fb      	ldr	r3, [r7, #28]
 800a410:	9302      	str	r3, [sp, #8]
 800a412:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a414:	9301      	str	r3, [sp, #4]
 800a416:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a418:	9300      	str	r3, [sp, #0]
 800a41a:	683b      	ldr	r3, [r7, #0]
 800a41c:	68b9      	ldr	r1, [r7, #8]
 800a41e:	68f8      	ldr	r0, [r7, #12]
 800a420:	f000 f80e 	bl	800a440 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800a424:	69f8      	ldr	r0, [r7, #28]
 800a426:	f000 f891 	bl	800a54c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800a42a:	2301      	movs	r3, #1
 800a42c:	61bb      	str	r3, [r7, #24]
 800a42e:	e002      	b.n	800a436 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800a430:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a434:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800a436:	69bb      	ldr	r3, [r7, #24]
	}
 800a438:	4618      	mov	r0, r3
 800a43a:	3720      	adds	r7, #32
 800a43c:	46bd      	mov	sp, r7
 800a43e:	bd80      	pop	{r7, pc}

0800a440 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800a440:	b580      	push	{r7, lr}
 800a442:	b088      	sub	sp, #32
 800a444:	af00      	add	r7, sp, #0
 800a446:	60f8      	str	r0, [r7, #12]
 800a448:	60b9      	str	r1, [r7, #8]
 800a44a:	607a      	str	r2, [r7, #4]
 800a44c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800a44e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a450:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800a452:	687b      	ldr	r3, [r7, #4]
 800a454:	009b      	lsls	r3, r3, #2
 800a456:	461a      	mov	r2, r3
 800a458:	21a5      	movs	r1, #165	; 0xa5
 800a45a:	f00d fba7 	bl	8017bac <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 800a45e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a460:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a462:	687b      	ldr	r3, [r7, #4]
 800a464:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800a468:	3b01      	subs	r3, #1
 800a46a:	009b      	lsls	r3, r3, #2
 800a46c:	4413      	add	r3, r2
 800a46e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 800a470:	69bb      	ldr	r3, [r7, #24]
 800a472:	f023 0307 	bic.w	r3, r3, #7
 800a476:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800a478:	69bb      	ldr	r3, [r7, #24]
 800a47a:	f003 0307 	and.w	r3, r3, #7
 800a47e:	2b00      	cmp	r3, #0
 800a480:	d009      	beq.n	800a496 <prvInitialiseNewTask+0x56>
 800a482:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a486:	f383 8811 	msr	BASEPRI, r3
 800a48a:	f3bf 8f6f 	isb	sy
 800a48e:	f3bf 8f4f 	dsb	sy
 800a492:	617b      	str	r3, [r7, #20]
 800a494:	e7fe      	b.n	800a494 <prvInitialiseNewTask+0x54>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800a496:	2300      	movs	r3, #0
 800a498:	61fb      	str	r3, [r7, #28]
 800a49a:	e012      	b.n	800a4c2 <prvInitialiseNewTask+0x82>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800a49c:	68ba      	ldr	r2, [r7, #8]
 800a49e:	69fb      	ldr	r3, [r7, #28]
 800a4a0:	4413      	add	r3, r2
 800a4a2:	7819      	ldrb	r1, [r3, #0]
 800a4a4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a4a6:	69fb      	ldr	r3, [r7, #28]
 800a4a8:	4413      	add	r3, r2
 800a4aa:	3334      	adds	r3, #52	; 0x34
 800a4ac:	460a      	mov	r2, r1
 800a4ae:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 800a4b0:	68ba      	ldr	r2, [r7, #8]
 800a4b2:	69fb      	ldr	r3, [r7, #28]
 800a4b4:	4413      	add	r3, r2
 800a4b6:	781b      	ldrb	r3, [r3, #0]
 800a4b8:	2b00      	cmp	r3, #0
 800a4ba:	d006      	beq.n	800a4ca <prvInitialiseNewTask+0x8a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800a4bc:	69fb      	ldr	r3, [r7, #28]
 800a4be:	3301      	adds	r3, #1
 800a4c0:	61fb      	str	r3, [r7, #28]
 800a4c2:	69fb      	ldr	r3, [r7, #28]
 800a4c4:	2b0f      	cmp	r3, #15
 800a4c6:	d9e9      	bls.n	800a49c <prvInitialiseNewTask+0x5c>
 800a4c8:	e000      	b.n	800a4cc <prvInitialiseNewTask+0x8c>
		{
			break;
 800a4ca:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800a4cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a4ce:	2200      	movs	r2, #0
 800a4d0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800a4d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a4d6:	2b37      	cmp	r3, #55	; 0x37
 800a4d8:	d901      	bls.n	800a4de <prvInitialiseNewTask+0x9e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800a4da:	2337      	movs	r3, #55	; 0x37
 800a4dc:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800a4de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a4e0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a4e2:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800a4e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a4e6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a4e8:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800a4ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a4ec:	2200      	movs	r2, #0
 800a4ee:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800a4f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a4f2:	3304      	adds	r3, #4
 800a4f4:	4618      	mov	r0, r3
 800a4f6:	f7fe fdd1 	bl	800909c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800a4fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a4fc:	3318      	adds	r3, #24
 800a4fe:	4618      	mov	r0, r3
 800a500:	f7fe fdcc 	bl	800909c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800a504:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a506:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a508:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a50a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a50c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800a510:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a512:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800a514:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a516:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a518:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800a51a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a51c:	2200      	movs	r2, #0
 800a51e:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800a520:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a522:	2200      	movs	r2, #0
 800a524:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800a528:	683a      	ldr	r2, [r7, #0]
 800a52a:	68f9      	ldr	r1, [r7, #12]
 800a52c:	69b8      	ldr	r0, [r7, #24]
 800a52e:	f001 fa03 	bl	800b938 <pxPortInitialiseStack>
 800a532:	4602      	mov	r2, r0
 800a534:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a536:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 800a538:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a53a:	2b00      	cmp	r3, #0
 800a53c:	d002      	beq.n	800a544 <prvInitialiseNewTask+0x104>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800a53e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a540:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a542:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a544:	bf00      	nop
 800a546:	3720      	adds	r7, #32
 800a548:	46bd      	mov	sp, r7
 800a54a:	bd80      	pop	{r7, pc}

0800a54c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800a54c:	b580      	push	{r7, lr}
 800a54e:	b082      	sub	sp, #8
 800a550:	af00      	add	r7, sp, #0
 800a552:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800a554:	f001 fb1a 	bl	800bb8c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800a558:	4b2d      	ldr	r3, [pc, #180]	; (800a610 <prvAddNewTaskToReadyList+0xc4>)
 800a55a:	681b      	ldr	r3, [r3, #0]
 800a55c:	3301      	adds	r3, #1
 800a55e:	4a2c      	ldr	r2, [pc, #176]	; (800a610 <prvAddNewTaskToReadyList+0xc4>)
 800a560:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800a562:	4b2c      	ldr	r3, [pc, #176]	; (800a614 <prvAddNewTaskToReadyList+0xc8>)
 800a564:	681b      	ldr	r3, [r3, #0]
 800a566:	2b00      	cmp	r3, #0
 800a568:	d109      	bne.n	800a57e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800a56a:	4a2a      	ldr	r2, [pc, #168]	; (800a614 <prvAddNewTaskToReadyList+0xc8>)
 800a56c:	687b      	ldr	r3, [r7, #4]
 800a56e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800a570:	4b27      	ldr	r3, [pc, #156]	; (800a610 <prvAddNewTaskToReadyList+0xc4>)
 800a572:	681b      	ldr	r3, [r3, #0]
 800a574:	2b01      	cmp	r3, #1
 800a576:	d110      	bne.n	800a59a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800a578:	f000 fc20 	bl	800adbc <prvInitialiseTaskLists>
 800a57c:	e00d      	b.n	800a59a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800a57e:	4b26      	ldr	r3, [pc, #152]	; (800a618 <prvAddNewTaskToReadyList+0xcc>)
 800a580:	681b      	ldr	r3, [r3, #0]
 800a582:	2b00      	cmp	r3, #0
 800a584:	d109      	bne.n	800a59a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800a586:	4b23      	ldr	r3, [pc, #140]	; (800a614 <prvAddNewTaskToReadyList+0xc8>)
 800a588:	681b      	ldr	r3, [r3, #0]
 800a58a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a58c:	687b      	ldr	r3, [r7, #4]
 800a58e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a590:	429a      	cmp	r2, r3
 800a592:	d802      	bhi.n	800a59a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800a594:	4a1f      	ldr	r2, [pc, #124]	; (800a614 <prvAddNewTaskToReadyList+0xc8>)
 800a596:	687b      	ldr	r3, [r7, #4]
 800a598:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800a59a:	4b20      	ldr	r3, [pc, #128]	; (800a61c <prvAddNewTaskToReadyList+0xd0>)
 800a59c:	681b      	ldr	r3, [r3, #0]
 800a59e:	3301      	adds	r3, #1
 800a5a0:	4a1e      	ldr	r2, [pc, #120]	; (800a61c <prvAddNewTaskToReadyList+0xd0>)
 800a5a2:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800a5a4:	4b1d      	ldr	r3, [pc, #116]	; (800a61c <prvAddNewTaskToReadyList+0xd0>)
 800a5a6:	681a      	ldr	r2, [r3, #0]
 800a5a8:	687b      	ldr	r3, [r7, #4]
 800a5aa:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800a5ac:	687b      	ldr	r3, [r7, #4]
 800a5ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a5b0:	4b1b      	ldr	r3, [pc, #108]	; (800a620 <prvAddNewTaskToReadyList+0xd4>)
 800a5b2:	681b      	ldr	r3, [r3, #0]
 800a5b4:	429a      	cmp	r2, r3
 800a5b6:	d903      	bls.n	800a5c0 <prvAddNewTaskToReadyList+0x74>
 800a5b8:	687b      	ldr	r3, [r7, #4]
 800a5ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a5bc:	4a18      	ldr	r2, [pc, #96]	; (800a620 <prvAddNewTaskToReadyList+0xd4>)
 800a5be:	6013      	str	r3, [r2, #0]
 800a5c0:	687b      	ldr	r3, [r7, #4]
 800a5c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a5c4:	4613      	mov	r3, r2
 800a5c6:	009b      	lsls	r3, r3, #2
 800a5c8:	4413      	add	r3, r2
 800a5ca:	009b      	lsls	r3, r3, #2
 800a5cc:	4a15      	ldr	r2, [pc, #84]	; (800a624 <prvAddNewTaskToReadyList+0xd8>)
 800a5ce:	441a      	add	r2, r3
 800a5d0:	687b      	ldr	r3, [r7, #4]
 800a5d2:	3304      	adds	r3, #4
 800a5d4:	4619      	mov	r1, r3
 800a5d6:	4610      	mov	r0, r2
 800a5d8:	f7fe fd6d 	bl	80090b6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800a5dc:	f001 fb04 	bl	800bbe8 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800a5e0:	4b0d      	ldr	r3, [pc, #52]	; (800a618 <prvAddNewTaskToReadyList+0xcc>)
 800a5e2:	681b      	ldr	r3, [r3, #0]
 800a5e4:	2b00      	cmp	r3, #0
 800a5e6:	d00e      	beq.n	800a606 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800a5e8:	4b0a      	ldr	r3, [pc, #40]	; (800a614 <prvAddNewTaskToReadyList+0xc8>)
 800a5ea:	681b      	ldr	r3, [r3, #0]
 800a5ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a5ee:	687b      	ldr	r3, [r7, #4]
 800a5f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a5f2:	429a      	cmp	r2, r3
 800a5f4:	d207      	bcs.n	800a606 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800a5f6:	4b0c      	ldr	r3, [pc, #48]	; (800a628 <prvAddNewTaskToReadyList+0xdc>)
 800a5f8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a5fc:	601a      	str	r2, [r3, #0]
 800a5fe:	f3bf 8f4f 	dsb	sy
 800a602:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a606:	bf00      	nop
 800a608:	3708      	adds	r7, #8
 800a60a:	46bd      	mov	sp, r7
 800a60c:	bd80      	pop	{r7, pc}
 800a60e:	bf00      	nop
 800a610:	20000da4 	.word	0x20000da4
 800a614:	200008d0 	.word	0x200008d0
 800a618:	20000db0 	.word	0x20000db0
 800a61c:	20000dc0 	.word	0x20000dc0
 800a620:	20000dac 	.word	0x20000dac
 800a624:	200008d4 	.word	0x200008d4
 800a628:	e000ed04 	.word	0xe000ed04

0800a62c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800a62c:	b580      	push	{r7, lr}
 800a62e:	b084      	sub	sp, #16
 800a630:	af00      	add	r7, sp, #0
 800a632:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800a634:	2300      	movs	r3, #0
 800a636:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800a638:	687b      	ldr	r3, [r7, #4]
 800a63a:	2b00      	cmp	r3, #0
 800a63c:	d016      	beq.n	800a66c <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800a63e:	4b13      	ldr	r3, [pc, #76]	; (800a68c <vTaskDelay+0x60>)
 800a640:	681b      	ldr	r3, [r3, #0]
 800a642:	2b00      	cmp	r3, #0
 800a644:	d009      	beq.n	800a65a <vTaskDelay+0x2e>
 800a646:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a64a:	f383 8811 	msr	BASEPRI, r3
 800a64e:	f3bf 8f6f 	isb	sy
 800a652:	f3bf 8f4f 	dsb	sy
 800a656:	60bb      	str	r3, [r7, #8]
 800a658:	e7fe      	b.n	800a658 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 800a65a:	f000 f87f 	bl	800a75c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800a65e:	2100      	movs	r1, #0
 800a660:	6878      	ldr	r0, [r7, #4]
 800a662:	f000 fe0b 	bl	800b27c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800a666:	f000 f887 	bl	800a778 <xTaskResumeAll>
 800a66a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800a66c:	68fb      	ldr	r3, [r7, #12]
 800a66e:	2b00      	cmp	r3, #0
 800a670:	d107      	bne.n	800a682 <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 800a672:	4b07      	ldr	r3, [pc, #28]	; (800a690 <vTaskDelay+0x64>)
 800a674:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a678:	601a      	str	r2, [r3, #0]
 800a67a:	f3bf 8f4f 	dsb	sy
 800a67e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800a682:	bf00      	nop
 800a684:	3710      	adds	r7, #16
 800a686:	46bd      	mov	sp, r7
 800a688:	bd80      	pop	{r7, pc}
 800a68a:	bf00      	nop
 800a68c:	20000dcc 	.word	0x20000dcc
 800a690:	e000ed04 	.word	0xe000ed04

0800a694 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800a694:	b580      	push	{r7, lr}
 800a696:	b08a      	sub	sp, #40	; 0x28
 800a698:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800a69a:	2300      	movs	r3, #0
 800a69c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800a69e:	2300      	movs	r3, #0
 800a6a0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800a6a2:	463a      	mov	r2, r7
 800a6a4:	1d39      	adds	r1, r7, #4
 800a6a6:	f107 0308 	add.w	r3, r7, #8
 800a6aa:	4618      	mov	r0, r3
 800a6ac:	f7fe fca2 	bl	8008ff4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800a6b0:	6839      	ldr	r1, [r7, #0]
 800a6b2:	687b      	ldr	r3, [r7, #4]
 800a6b4:	68ba      	ldr	r2, [r7, #8]
 800a6b6:	9202      	str	r2, [sp, #8]
 800a6b8:	9301      	str	r3, [sp, #4]
 800a6ba:	2300      	movs	r3, #0
 800a6bc:	9300      	str	r3, [sp, #0]
 800a6be:	2300      	movs	r3, #0
 800a6c0:	460a      	mov	r2, r1
 800a6c2:	4920      	ldr	r1, [pc, #128]	; (800a744 <vTaskStartScheduler+0xb0>)
 800a6c4:	4820      	ldr	r0, [pc, #128]	; (800a748 <vTaskStartScheduler+0xb4>)
 800a6c6:	f7ff fe1d 	bl	800a304 <xTaskCreateStatic>
 800a6ca:	4602      	mov	r2, r0
 800a6cc:	4b1f      	ldr	r3, [pc, #124]	; (800a74c <vTaskStartScheduler+0xb8>)
 800a6ce:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800a6d0:	4b1e      	ldr	r3, [pc, #120]	; (800a74c <vTaskStartScheduler+0xb8>)
 800a6d2:	681b      	ldr	r3, [r3, #0]
 800a6d4:	2b00      	cmp	r3, #0
 800a6d6:	d002      	beq.n	800a6de <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800a6d8:	2301      	movs	r3, #1
 800a6da:	617b      	str	r3, [r7, #20]
 800a6dc:	e001      	b.n	800a6e2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800a6de:	2300      	movs	r3, #0
 800a6e0:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800a6e2:	697b      	ldr	r3, [r7, #20]
 800a6e4:	2b01      	cmp	r3, #1
 800a6e6:	d102      	bne.n	800a6ee <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800a6e8:	f000 fe1c 	bl	800b324 <xTimerCreateTimerTask>
 800a6ec:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800a6ee:	697b      	ldr	r3, [r7, #20]
 800a6f0:	2b01      	cmp	r3, #1
 800a6f2:	d115      	bne.n	800a720 <vTaskStartScheduler+0x8c>
 800a6f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a6f8:	f383 8811 	msr	BASEPRI, r3
 800a6fc:	f3bf 8f6f 	isb	sy
 800a700:	f3bf 8f4f 	dsb	sy
 800a704:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800a706:	4b12      	ldr	r3, [pc, #72]	; (800a750 <vTaskStartScheduler+0xbc>)
 800a708:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a70c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800a70e:	4b11      	ldr	r3, [pc, #68]	; (800a754 <vTaskStartScheduler+0xc0>)
 800a710:	2201      	movs	r2, #1
 800a712:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 800a714:	4b10      	ldr	r3, [pc, #64]	; (800a758 <vTaskStartScheduler+0xc4>)
 800a716:	2200      	movs	r2, #0
 800a718:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800a71a:	f001 f999 	bl	800ba50 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800a71e:	e00d      	b.n	800a73c <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800a720:	697b      	ldr	r3, [r7, #20]
 800a722:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a726:	d109      	bne.n	800a73c <vTaskStartScheduler+0xa8>
 800a728:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a72c:	f383 8811 	msr	BASEPRI, r3
 800a730:	f3bf 8f6f 	isb	sy
 800a734:	f3bf 8f4f 	dsb	sy
 800a738:	60fb      	str	r3, [r7, #12]
 800a73a:	e7fe      	b.n	800a73a <vTaskStartScheduler+0xa6>
}
 800a73c:	bf00      	nop
 800a73e:	3718      	adds	r7, #24
 800a740:	46bd      	mov	sp, r7
 800a742:	bd80      	pop	{r7, pc}
 800a744:	08018a9c 	.word	0x08018a9c
 800a748:	0800ad8d 	.word	0x0800ad8d
 800a74c:	20000dc8 	.word	0x20000dc8
 800a750:	20000dc4 	.word	0x20000dc4
 800a754:	20000db0 	.word	0x20000db0
 800a758:	20000da8 	.word	0x20000da8

0800a75c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800a75c:	b480      	push	{r7}
 800a75e:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800a760:	4b04      	ldr	r3, [pc, #16]	; (800a774 <vTaskSuspendAll+0x18>)
 800a762:	681b      	ldr	r3, [r3, #0]
 800a764:	3301      	adds	r3, #1
 800a766:	4a03      	ldr	r2, [pc, #12]	; (800a774 <vTaskSuspendAll+0x18>)
 800a768:	6013      	str	r3, [r2, #0]
}
 800a76a:	bf00      	nop
 800a76c:	46bd      	mov	sp, r7
 800a76e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a772:	4770      	bx	lr
 800a774:	20000dcc 	.word	0x20000dcc

0800a778 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800a778:	b580      	push	{r7, lr}
 800a77a:	b084      	sub	sp, #16
 800a77c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800a77e:	2300      	movs	r3, #0
 800a780:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800a782:	2300      	movs	r3, #0
 800a784:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800a786:	4b41      	ldr	r3, [pc, #260]	; (800a88c <xTaskResumeAll+0x114>)
 800a788:	681b      	ldr	r3, [r3, #0]
 800a78a:	2b00      	cmp	r3, #0
 800a78c:	d109      	bne.n	800a7a2 <xTaskResumeAll+0x2a>
 800a78e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a792:	f383 8811 	msr	BASEPRI, r3
 800a796:	f3bf 8f6f 	isb	sy
 800a79a:	f3bf 8f4f 	dsb	sy
 800a79e:	603b      	str	r3, [r7, #0]
 800a7a0:	e7fe      	b.n	800a7a0 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800a7a2:	f001 f9f3 	bl	800bb8c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800a7a6:	4b39      	ldr	r3, [pc, #228]	; (800a88c <xTaskResumeAll+0x114>)
 800a7a8:	681b      	ldr	r3, [r3, #0]
 800a7aa:	3b01      	subs	r3, #1
 800a7ac:	4a37      	ldr	r2, [pc, #220]	; (800a88c <xTaskResumeAll+0x114>)
 800a7ae:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a7b0:	4b36      	ldr	r3, [pc, #216]	; (800a88c <xTaskResumeAll+0x114>)
 800a7b2:	681b      	ldr	r3, [r3, #0]
 800a7b4:	2b00      	cmp	r3, #0
 800a7b6:	d162      	bne.n	800a87e <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800a7b8:	4b35      	ldr	r3, [pc, #212]	; (800a890 <xTaskResumeAll+0x118>)
 800a7ba:	681b      	ldr	r3, [r3, #0]
 800a7bc:	2b00      	cmp	r3, #0
 800a7be:	d05e      	beq.n	800a87e <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a7c0:	e02f      	b.n	800a822 <xTaskResumeAll+0xaa>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 800a7c2:	4b34      	ldr	r3, [pc, #208]	; (800a894 <xTaskResumeAll+0x11c>)
 800a7c4:	68db      	ldr	r3, [r3, #12]
 800a7c6:	68db      	ldr	r3, [r3, #12]
 800a7c8:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a7ca:	68fb      	ldr	r3, [r7, #12]
 800a7cc:	3318      	adds	r3, #24
 800a7ce:	4618      	mov	r0, r3
 800a7d0:	f7fe fcce 	bl	8009170 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a7d4:	68fb      	ldr	r3, [r7, #12]
 800a7d6:	3304      	adds	r3, #4
 800a7d8:	4618      	mov	r0, r3
 800a7da:	f7fe fcc9 	bl	8009170 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800a7de:	68fb      	ldr	r3, [r7, #12]
 800a7e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a7e2:	4b2d      	ldr	r3, [pc, #180]	; (800a898 <xTaskResumeAll+0x120>)
 800a7e4:	681b      	ldr	r3, [r3, #0]
 800a7e6:	429a      	cmp	r2, r3
 800a7e8:	d903      	bls.n	800a7f2 <xTaskResumeAll+0x7a>
 800a7ea:	68fb      	ldr	r3, [r7, #12]
 800a7ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a7ee:	4a2a      	ldr	r2, [pc, #168]	; (800a898 <xTaskResumeAll+0x120>)
 800a7f0:	6013      	str	r3, [r2, #0]
 800a7f2:	68fb      	ldr	r3, [r7, #12]
 800a7f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a7f6:	4613      	mov	r3, r2
 800a7f8:	009b      	lsls	r3, r3, #2
 800a7fa:	4413      	add	r3, r2
 800a7fc:	009b      	lsls	r3, r3, #2
 800a7fe:	4a27      	ldr	r2, [pc, #156]	; (800a89c <xTaskResumeAll+0x124>)
 800a800:	441a      	add	r2, r3
 800a802:	68fb      	ldr	r3, [r7, #12]
 800a804:	3304      	adds	r3, #4
 800a806:	4619      	mov	r1, r3
 800a808:	4610      	mov	r0, r2
 800a80a:	f7fe fc54 	bl	80090b6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a80e:	68fb      	ldr	r3, [r7, #12]
 800a810:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a812:	4b23      	ldr	r3, [pc, #140]	; (800a8a0 <xTaskResumeAll+0x128>)
 800a814:	681b      	ldr	r3, [r3, #0]
 800a816:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a818:	429a      	cmp	r2, r3
 800a81a:	d302      	bcc.n	800a822 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 800a81c:	4b21      	ldr	r3, [pc, #132]	; (800a8a4 <xTaskResumeAll+0x12c>)
 800a81e:	2201      	movs	r2, #1
 800a820:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a822:	4b1c      	ldr	r3, [pc, #112]	; (800a894 <xTaskResumeAll+0x11c>)
 800a824:	681b      	ldr	r3, [r3, #0]
 800a826:	2b00      	cmp	r3, #0
 800a828:	d1cb      	bne.n	800a7c2 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800a82a:	68fb      	ldr	r3, [r7, #12]
 800a82c:	2b00      	cmp	r3, #0
 800a82e:	d001      	beq.n	800a834 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800a830:	f000 fb5e 	bl	800aef0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800a834:	4b1c      	ldr	r3, [pc, #112]	; (800a8a8 <xTaskResumeAll+0x130>)
 800a836:	681b      	ldr	r3, [r3, #0]
 800a838:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800a83a:	687b      	ldr	r3, [r7, #4]
 800a83c:	2b00      	cmp	r3, #0
 800a83e:	d010      	beq.n	800a862 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800a840:	f000 f858 	bl	800a8f4 <xTaskIncrementTick>
 800a844:	4603      	mov	r3, r0
 800a846:	2b00      	cmp	r3, #0
 800a848:	d002      	beq.n	800a850 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800a84a:	4b16      	ldr	r3, [pc, #88]	; (800a8a4 <xTaskResumeAll+0x12c>)
 800a84c:	2201      	movs	r2, #1
 800a84e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800a850:	687b      	ldr	r3, [r7, #4]
 800a852:	3b01      	subs	r3, #1
 800a854:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800a856:	687b      	ldr	r3, [r7, #4]
 800a858:	2b00      	cmp	r3, #0
 800a85a:	d1f1      	bne.n	800a840 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 800a85c:	4b12      	ldr	r3, [pc, #72]	; (800a8a8 <xTaskResumeAll+0x130>)
 800a85e:	2200      	movs	r2, #0
 800a860:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800a862:	4b10      	ldr	r3, [pc, #64]	; (800a8a4 <xTaskResumeAll+0x12c>)
 800a864:	681b      	ldr	r3, [r3, #0]
 800a866:	2b00      	cmp	r3, #0
 800a868:	d009      	beq.n	800a87e <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800a86a:	2301      	movs	r3, #1
 800a86c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800a86e:	4b0f      	ldr	r3, [pc, #60]	; (800a8ac <xTaskResumeAll+0x134>)
 800a870:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a874:	601a      	str	r2, [r3, #0]
 800a876:	f3bf 8f4f 	dsb	sy
 800a87a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800a87e:	f001 f9b3 	bl	800bbe8 <vPortExitCritical>

	return xAlreadyYielded;
 800a882:	68bb      	ldr	r3, [r7, #8]
}
 800a884:	4618      	mov	r0, r3
 800a886:	3710      	adds	r7, #16
 800a888:	46bd      	mov	sp, r7
 800a88a:	bd80      	pop	{r7, pc}
 800a88c:	20000dcc 	.word	0x20000dcc
 800a890:	20000da4 	.word	0x20000da4
 800a894:	20000d64 	.word	0x20000d64
 800a898:	20000dac 	.word	0x20000dac
 800a89c:	200008d4 	.word	0x200008d4
 800a8a0:	200008d0 	.word	0x200008d0
 800a8a4:	20000db8 	.word	0x20000db8
 800a8a8:	20000db4 	.word	0x20000db4
 800a8ac:	e000ed04 	.word	0xe000ed04

0800a8b0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800a8b0:	b480      	push	{r7}
 800a8b2:	b083      	sub	sp, #12
 800a8b4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800a8b6:	4b05      	ldr	r3, [pc, #20]	; (800a8cc <xTaskGetTickCount+0x1c>)
 800a8b8:	681b      	ldr	r3, [r3, #0]
 800a8ba:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800a8bc:	687b      	ldr	r3, [r7, #4]
}
 800a8be:	4618      	mov	r0, r3
 800a8c0:	370c      	adds	r7, #12
 800a8c2:	46bd      	mov	sp, r7
 800a8c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8c8:	4770      	bx	lr
 800a8ca:	bf00      	nop
 800a8cc:	20000da8 	.word	0x20000da8

0800a8d0 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 800a8d0:	b580      	push	{r7, lr}
 800a8d2:	b082      	sub	sp, #8
 800a8d4:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a8d6:	f001 fa35 	bl	800bd44 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800a8da:	2300      	movs	r3, #0
 800a8dc:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800a8de:	4b04      	ldr	r3, [pc, #16]	; (800a8f0 <xTaskGetTickCountFromISR+0x20>)
 800a8e0:	681b      	ldr	r3, [r3, #0]
 800a8e2:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800a8e4:	683b      	ldr	r3, [r7, #0]
}
 800a8e6:	4618      	mov	r0, r3
 800a8e8:	3708      	adds	r7, #8
 800a8ea:	46bd      	mov	sp, r7
 800a8ec:	bd80      	pop	{r7, pc}
 800a8ee:	bf00      	nop
 800a8f0:	20000da8 	.word	0x20000da8

0800a8f4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800a8f4:	b580      	push	{r7, lr}
 800a8f6:	b086      	sub	sp, #24
 800a8f8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800a8fa:	2300      	movs	r3, #0
 800a8fc:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a8fe:	4b51      	ldr	r3, [pc, #324]	; (800aa44 <xTaskIncrementTick+0x150>)
 800a900:	681b      	ldr	r3, [r3, #0]
 800a902:	2b00      	cmp	r3, #0
 800a904:	f040 808d 	bne.w	800aa22 <xTaskIncrementTick+0x12e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800a908:	4b4f      	ldr	r3, [pc, #316]	; (800aa48 <xTaskIncrementTick+0x154>)
 800a90a:	681b      	ldr	r3, [r3, #0]
 800a90c:	3301      	adds	r3, #1
 800a90e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800a910:	4a4d      	ldr	r2, [pc, #308]	; (800aa48 <xTaskIncrementTick+0x154>)
 800a912:	693b      	ldr	r3, [r7, #16]
 800a914:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800a916:	693b      	ldr	r3, [r7, #16]
 800a918:	2b00      	cmp	r3, #0
 800a91a:	d11f      	bne.n	800a95c <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 800a91c:	4b4b      	ldr	r3, [pc, #300]	; (800aa4c <xTaskIncrementTick+0x158>)
 800a91e:	681b      	ldr	r3, [r3, #0]
 800a920:	681b      	ldr	r3, [r3, #0]
 800a922:	2b00      	cmp	r3, #0
 800a924:	d009      	beq.n	800a93a <xTaskIncrementTick+0x46>
 800a926:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a92a:	f383 8811 	msr	BASEPRI, r3
 800a92e:	f3bf 8f6f 	isb	sy
 800a932:	f3bf 8f4f 	dsb	sy
 800a936:	603b      	str	r3, [r7, #0]
 800a938:	e7fe      	b.n	800a938 <xTaskIncrementTick+0x44>
 800a93a:	4b44      	ldr	r3, [pc, #272]	; (800aa4c <xTaskIncrementTick+0x158>)
 800a93c:	681b      	ldr	r3, [r3, #0]
 800a93e:	60fb      	str	r3, [r7, #12]
 800a940:	4b43      	ldr	r3, [pc, #268]	; (800aa50 <xTaskIncrementTick+0x15c>)
 800a942:	681b      	ldr	r3, [r3, #0]
 800a944:	4a41      	ldr	r2, [pc, #260]	; (800aa4c <xTaskIncrementTick+0x158>)
 800a946:	6013      	str	r3, [r2, #0]
 800a948:	4a41      	ldr	r2, [pc, #260]	; (800aa50 <xTaskIncrementTick+0x15c>)
 800a94a:	68fb      	ldr	r3, [r7, #12]
 800a94c:	6013      	str	r3, [r2, #0]
 800a94e:	4b41      	ldr	r3, [pc, #260]	; (800aa54 <xTaskIncrementTick+0x160>)
 800a950:	681b      	ldr	r3, [r3, #0]
 800a952:	3301      	adds	r3, #1
 800a954:	4a3f      	ldr	r2, [pc, #252]	; (800aa54 <xTaskIncrementTick+0x160>)
 800a956:	6013      	str	r3, [r2, #0]
 800a958:	f000 faca 	bl	800aef0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800a95c:	4b3e      	ldr	r3, [pc, #248]	; (800aa58 <xTaskIncrementTick+0x164>)
 800a95e:	681b      	ldr	r3, [r3, #0]
 800a960:	693a      	ldr	r2, [r7, #16]
 800a962:	429a      	cmp	r2, r3
 800a964:	d34e      	bcc.n	800aa04 <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a966:	4b39      	ldr	r3, [pc, #228]	; (800aa4c <xTaskIncrementTick+0x158>)
 800a968:	681b      	ldr	r3, [r3, #0]
 800a96a:	681b      	ldr	r3, [r3, #0]
 800a96c:	2b00      	cmp	r3, #0
 800a96e:	d101      	bne.n	800a974 <xTaskIncrementTick+0x80>
 800a970:	2301      	movs	r3, #1
 800a972:	e000      	b.n	800a976 <xTaskIncrementTick+0x82>
 800a974:	2300      	movs	r3, #0
 800a976:	2b00      	cmp	r3, #0
 800a978:	d004      	beq.n	800a984 <xTaskIncrementTick+0x90>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a97a:	4b37      	ldr	r3, [pc, #220]	; (800aa58 <xTaskIncrementTick+0x164>)
 800a97c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a980:	601a      	str	r2, [r3, #0]
					break;
 800a982:	e03f      	b.n	800aa04 <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800a984:	4b31      	ldr	r3, [pc, #196]	; (800aa4c <xTaskIncrementTick+0x158>)
 800a986:	681b      	ldr	r3, [r3, #0]
 800a988:	68db      	ldr	r3, [r3, #12]
 800a98a:	68db      	ldr	r3, [r3, #12]
 800a98c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800a98e:	68bb      	ldr	r3, [r7, #8]
 800a990:	685b      	ldr	r3, [r3, #4]
 800a992:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800a994:	693a      	ldr	r2, [r7, #16]
 800a996:	687b      	ldr	r3, [r7, #4]
 800a998:	429a      	cmp	r2, r3
 800a99a:	d203      	bcs.n	800a9a4 <xTaskIncrementTick+0xb0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800a99c:	4a2e      	ldr	r2, [pc, #184]	; (800aa58 <xTaskIncrementTick+0x164>)
 800a99e:	687b      	ldr	r3, [r7, #4]
 800a9a0:	6013      	str	r3, [r2, #0]
						break;
 800a9a2:	e02f      	b.n	800aa04 <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a9a4:	68bb      	ldr	r3, [r7, #8]
 800a9a6:	3304      	adds	r3, #4
 800a9a8:	4618      	mov	r0, r3
 800a9aa:	f7fe fbe1 	bl	8009170 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800a9ae:	68bb      	ldr	r3, [r7, #8]
 800a9b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a9b2:	2b00      	cmp	r3, #0
 800a9b4:	d004      	beq.n	800a9c0 <xTaskIncrementTick+0xcc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a9b6:	68bb      	ldr	r3, [r7, #8]
 800a9b8:	3318      	adds	r3, #24
 800a9ba:	4618      	mov	r0, r3
 800a9bc:	f7fe fbd8 	bl	8009170 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800a9c0:	68bb      	ldr	r3, [r7, #8]
 800a9c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a9c4:	4b25      	ldr	r3, [pc, #148]	; (800aa5c <xTaskIncrementTick+0x168>)
 800a9c6:	681b      	ldr	r3, [r3, #0]
 800a9c8:	429a      	cmp	r2, r3
 800a9ca:	d903      	bls.n	800a9d4 <xTaskIncrementTick+0xe0>
 800a9cc:	68bb      	ldr	r3, [r7, #8]
 800a9ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a9d0:	4a22      	ldr	r2, [pc, #136]	; (800aa5c <xTaskIncrementTick+0x168>)
 800a9d2:	6013      	str	r3, [r2, #0]
 800a9d4:	68bb      	ldr	r3, [r7, #8]
 800a9d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a9d8:	4613      	mov	r3, r2
 800a9da:	009b      	lsls	r3, r3, #2
 800a9dc:	4413      	add	r3, r2
 800a9de:	009b      	lsls	r3, r3, #2
 800a9e0:	4a1f      	ldr	r2, [pc, #124]	; (800aa60 <xTaskIncrementTick+0x16c>)
 800a9e2:	441a      	add	r2, r3
 800a9e4:	68bb      	ldr	r3, [r7, #8]
 800a9e6:	3304      	adds	r3, #4
 800a9e8:	4619      	mov	r1, r3
 800a9ea:	4610      	mov	r0, r2
 800a9ec:	f7fe fb63 	bl	80090b6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a9f0:	68bb      	ldr	r3, [r7, #8]
 800a9f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a9f4:	4b1b      	ldr	r3, [pc, #108]	; (800aa64 <xTaskIncrementTick+0x170>)
 800a9f6:	681b      	ldr	r3, [r3, #0]
 800a9f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a9fa:	429a      	cmp	r2, r3
 800a9fc:	d3b3      	bcc.n	800a966 <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 800a9fe:	2301      	movs	r3, #1
 800aa00:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800aa02:	e7b0      	b.n	800a966 <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800aa04:	4b17      	ldr	r3, [pc, #92]	; (800aa64 <xTaskIncrementTick+0x170>)
 800aa06:	681b      	ldr	r3, [r3, #0]
 800aa08:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aa0a:	4915      	ldr	r1, [pc, #84]	; (800aa60 <xTaskIncrementTick+0x16c>)
 800aa0c:	4613      	mov	r3, r2
 800aa0e:	009b      	lsls	r3, r3, #2
 800aa10:	4413      	add	r3, r2
 800aa12:	009b      	lsls	r3, r3, #2
 800aa14:	440b      	add	r3, r1
 800aa16:	681b      	ldr	r3, [r3, #0]
 800aa18:	2b01      	cmp	r3, #1
 800aa1a:	d907      	bls.n	800aa2c <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 800aa1c:	2301      	movs	r3, #1
 800aa1e:	617b      	str	r3, [r7, #20]
 800aa20:	e004      	b.n	800aa2c <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800aa22:	4b11      	ldr	r3, [pc, #68]	; (800aa68 <xTaskIncrementTick+0x174>)
 800aa24:	681b      	ldr	r3, [r3, #0]
 800aa26:	3301      	adds	r3, #1
 800aa28:	4a0f      	ldr	r2, [pc, #60]	; (800aa68 <xTaskIncrementTick+0x174>)
 800aa2a:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800aa2c:	4b0f      	ldr	r3, [pc, #60]	; (800aa6c <xTaskIncrementTick+0x178>)
 800aa2e:	681b      	ldr	r3, [r3, #0]
 800aa30:	2b00      	cmp	r3, #0
 800aa32:	d001      	beq.n	800aa38 <xTaskIncrementTick+0x144>
		{
			xSwitchRequired = pdTRUE;
 800aa34:	2301      	movs	r3, #1
 800aa36:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800aa38:	697b      	ldr	r3, [r7, #20]
}
 800aa3a:	4618      	mov	r0, r3
 800aa3c:	3718      	adds	r7, #24
 800aa3e:	46bd      	mov	sp, r7
 800aa40:	bd80      	pop	{r7, pc}
 800aa42:	bf00      	nop
 800aa44:	20000dcc 	.word	0x20000dcc
 800aa48:	20000da8 	.word	0x20000da8
 800aa4c:	20000d5c 	.word	0x20000d5c
 800aa50:	20000d60 	.word	0x20000d60
 800aa54:	20000dbc 	.word	0x20000dbc
 800aa58:	20000dc4 	.word	0x20000dc4
 800aa5c:	20000dac 	.word	0x20000dac
 800aa60:	200008d4 	.word	0x200008d4
 800aa64:	200008d0 	.word	0x200008d0
 800aa68:	20000db4 	.word	0x20000db4
 800aa6c:	20000db8 	.word	0x20000db8

0800aa70 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800aa70:	b480      	push	{r7}
 800aa72:	b085      	sub	sp, #20
 800aa74:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800aa76:	4b27      	ldr	r3, [pc, #156]	; (800ab14 <vTaskSwitchContext+0xa4>)
 800aa78:	681b      	ldr	r3, [r3, #0]
 800aa7a:	2b00      	cmp	r3, #0
 800aa7c:	d003      	beq.n	800aa86 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800aa7e:	4b26      	ldr	r3, [pc, #152]	; (800ab18 <vTaskSwitchContext+0xa8>)
 800aa80:	2201      	movs	r2, #1
 800aa82:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800aa84:	e040      	b.n	800ab08 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 800aa86:	4b24      	ldr	r3, [pc, #144]	; (800ab18 <vTaskSwitchContext+0xa8>)
 800aa88:	2200      	movs	r2, #0
 800aa8a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 800aa8c:	4b23      	ldr	r3, [pc, #140]	; (800ab1c <vTaskSwitchContext+0xac>)
 800aa8e:	681b      	ldr	r3, [r3, #0]
 800aa90:	60fb      	str	r3, [r7, #12]
 800aa92:	e00f      	b.n	800aab4 <vTaskSwitchContext+0x44>
 800aa94:	68fb      	ldr	r3, [r7, #12]
 800aa96:	2b00      	cmp	r3, #0
 800aa98:	d109      	bne.n	800aaae <vTaskSwitchContext+0x3e>
 800aa9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa9e:	f383 8811 	msr	BASEPRI, r3
 800aaa2:	f3bf 8f6f 	isb	sy
 800aaa6:	f3bf 8f4f 	dsb	sy
 800aaaa:	607b      	str	r3, [r7, #4]
 800aaac:	e7fe      	b.n	800aaac <vTaskSwitchContext+0x3c>
 800aaae:	68fb      	ldr	r3, [r7, #12]
 800aab0:	3b01      	subs	r3, #1
 800aab2:	60fb      	str	r3, [r7, #12]
 800aab4:	491a      	ldr	r1, [pc, #104]	; (800ab20 <vTaskSwitchContext+0xb0>)
 800aab6:	68fa      	ldr	r2, [r7, #12]
 800aab8:	4613      	mov	r3, r2
 800aaba:	009b      	lsls	r3, r3, #2
 800aabc:	4413      	add	r3, r2
 800aabe:	009b      	lsls	r3, r3, #2
 800aac0:	440b      	add	r3, r1
 800aac2:	681b      	ldr	r3, [r3, #0]
 800aac4:	2b00      	cmp	r3, #0
 800aac6:	d0e5      	beq.n	800aa94 <vTaskSwitchContext+0x24>
 800aac8:	68fa      	ldr	r2, [r7, #12]
 800aaca:	4613      	mov	r3, r2
 800aacc:	009b      	lsls	r3, r3, #2
 800aace:	4413      	add	r3, r2
 800aad0:	009b      	lsls	r3, r3, #2
 800aad2:	4a13      	ldr	r2, [pc, #76]	; (800ab20 <vTaskSwitchContext+0xb0>)
 800aad4:	4413      	add	r3, r2
 800aad6:	60bb      	str	r3, [r7, #8]
 800aad8:	68bb      	ldr	r3, [r7, #8]
 800aada:	685b      	ldr	r3, [r3, #4]
 800aadc:	685a      	ldr	r2, [r3, #4]
 800aade:	68bb      	ldr	r3, [r7, #8]
 800aae0:	605a      	str	r2, [r3, #4]
 800aae2:	68bb      	ldr	r3, [r7, #8]
 800aae4:	685a      	ldr	r2, [r3, #4]
 800aae6:	68bb      	ldr	r3, [r7, #8]
 800aae8:	3308      	adds	r3, #8
 800aaea:	429a      	cmp	r2, r3
 800aaec:	d104      	bne.n	800aaf8 <vTaskSwitchContext+0x88>
 800aaee:	68bb      	ldr	r3, [r7, #8]
 800aaf0:	685b      	ldr	r3, [r3, #4]
 800aaf2:	685a      	ldr	r2, [r3, #4]
 800aaf4:	68bb      	ldr	r3, [r7, #8]
 800aaf6:	605a      	str	r2, [r3, #4]
 800aaf8:	68bb      	ldr	r3, [r7, #8]
 800aafa:	685b      	ldr	r3, [r3, #4]
 800aafc:	68db      	ldr	r3, [r3, #12]
 800aafe:	4a09      	ldr	r2, [pc, #36]	; (800ab24 <vTaskSwitchContext+0xb4>)
 800ab00:	6013      	str	r3, [r2, #0]
 800ab02:	4a06      	ldr	r2, [pc, #24]	; (800ab1c <vTaskSwitchContext+0xac>)
 800ab04:	68fb      	ldr	r3, [r7, #12]
 800ab06:	6013      	str	r3, [r2, #0]
}
 800ab08:	bf00      	nop
 800ab0a:	3714      	adds	r7, #20
 800ab0c:	46bd      	mov	sp, r7
 800ab0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab12:	4770      	bx	lr
 800ab14:	20000dcc 	.word	0x20000dcc
 800ab18:	20000db8 	.word	0x20000db8
 800ab1c:	20000dac 	.word	0x20000dac
 800ab20:	200008d4 	.word	0x200008d4
 800ab24:	200008d0 	.word	0x200008d0

0800ab28 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800ab28:	b580      	push	{r7, lr}
 800ab2a:	b084      	sub	sp, #16
 800ab2c:	af00      	add	r7, sp, #0
 800ab2e:	6078      	str	r0, [r7, #4]
 800ab30:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800ab32:	687b      	ldr	r3, [r7, #4]
 800ab34:	2b00      	cmp	r3, #0
 800ab36:	d109      	bne.n	800ab4c <vTaskPlaceOnEventList+0x24>
 800ab38:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab3c:	f383 8811 	msr	BASEPRI, r3
 800ab40:	f3bf 8f6f 	isb	sy
 800ab44:	f3bf 8f4f 	dsb	sy
 800ab48:	60fb      	str	r3, [r7, #12]
 800ab4a:	e7fe      	b.n	800ab4a <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800ab4c:	4b07      	ldr	r3, [pc, #28]	; (800ab6c <vTaskPlaceOnEventList+0x44>)
 800ab4e:	681b      	ldr	r3, [r3, #0]
 800ab50:	3318      	adds	r3, #24
 800ab52:	4619      	mov	r1, r3
 800ab54:	6878      	ldr	r0, [r7, #4]
 800ab56:	f7fe fad2 	bl	80090fe <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800ab5a:	2101      	movs	r1, #1
 800ab5c:	6838      	ldr	r0, [r7, #0]
 800ab5e:	f000 fb8d 	bl	800b27c <prvAddCurrentTaskToDelayedList>
}
 800ab62:	bf00      	nop
 800ab64:	3710      	adds	r7, #16
 800ab66:	46bd      	mov	sp, r7
 800ab68:	bd80      	pop	{r7, pc}
 800ab6a:	bf00      	nop
 800ab6c:	200008d0 	.word	0x200008d0

0800ab70 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800ab70:	b580      	push	{r7, lr}
 800ab72:	b086      	sub	sp, #24
 800ab74:	af00      	add	r7, sp, #0
 800ab76:	60f8      	str	r0, [r7, #12]
 800ab78:	60b9      	str	r1, [r7, #8]
 800ab7a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800ab7c:	68fb      	ldr	r3, [r7, #12]
 800ab7e:	2b00      	cmp	r3, #0
 800ab80:	d109      	bne.n	800ab96 <vTaskPlaceOnEventListRestricted+0x26>
 800ab82:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab86:	f383 8811 	msr	BASEPRI, r3
 800ab8a:	f3bf 8f6f 	isb	sy
 800ab8e:	f3bf 8f4f 	dsb	sy
 800ab92:	617b      	str	r3, [r7, #20]
 800ab94:	e7fe      	b.n	800ab94 <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800ab96:	4b0a      	ldr	r3, [pc, #40]	; (800abc0 <vTaskPlaceOnEventListRestricted+0x50>)
 800ab98:	681b      	ldr	r3, [r3, #0]
 800ab9a:	3318      	adds	r3, #24
 800ab9c:	4619      	mov	r1, r3
 800ab9e:	68f8      	ldr	r0, [r7, #12]
 800aba0:	f7fe fa89 	bl	80090b6 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800aba4:	687b      	ldr	r3, [r7, #4]
 800aba6:	2b00      	cmp	r3, #0
 800aba8:	d002      	beq.n	800abb0 <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 800abaa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800abae:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800abb0:	6879      	ldr	r1, [r7, #4]
 800abb2:	68b8      	ldr	r0, [r7, #8]
 800abb4:	f000 fb62 	bl	800b27c <prvAddCurrentTaskToDelayedList>
	}
 800abb8:	bf00      	nop
 800abba:	3718      	adds	r7, #24
 800abbc:	46bd      	mov	sp, r7
 800abbe:	bd80      	pop	{r7, pc}
 800abc0:	200008d0 	.word	0x200008d0

0800abc4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800abc4:	b580      	push	{r7, lr}
 800abc6:	b086      	sub	sp, #24
 800abc8:	af00      	add	r7, sp, #0
 800abca:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 800abcc:	687b      	ldr	r3, [r7, #4]
 800abce:	68db      	ldr	r3, [r3, #12]
 800abd0:	68db      	ldr	r3, [r3, #12]
 800abd2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800abd4:	693b      	ldr	r3, [r7, #16]
 800abd6:	2b00      	cmp	r3, #0
 800abd8:	d109      	bne.n	800abee <xTaskRemoveFromEventList+0x2a>
 800abda:	f04f 0350 	mov.w	r3, #80	; 0x50
 800abde:	f383 8811 	msr	BASEPRI, r3
 800abe2:	f3bf 8f6f 	isb	sy
 800abe6:	f3bf 8f4f 	dsb	sy
 800abea:	60fb      	str	r3, [r7, #12]
 800abec:	e7fe      	b.n	800abec <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800abee:	693b      	ldr	r3, [r7, #16]
 800abf0:	3318      	adds	r3, #24
 800abf2:	4618      	mov	r0, r3
 800abf4:	f7fe fabc 	bl	8009170 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800abf8:	4b1d      	ldr	r3, [pc, #116]	; (800ac70 <xTaskRemoveFromEventList+0xac>)
 800abfa:	681b      	ldr	r3, [r3, #0]
 800abfc:	2b00      	cmp	r3, #0
 800abfe:	d11d      	bne.n	800ac3c <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800ac00:	693b      	ldr	r3, [r7, #16]
 800ac02:	3304      	adds	r3, #4
 800ac04:	4618      	mov	r0, r3
 800ac06:	f7fe fab3 	bl	8009170 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800ac0a:	693b      	ldr	r3, [r7, #16]
 800ac0c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ac0e:	4b19      	ldr	r3, [pc, #100]	; (800ac74 <xTaskRemoveFromEventList+0xb0>)
 800ac10:	681b      	ldr	r3, [r3, #0]
 800ac12:	429a      	cmp	r2, r3
 800ac14:	d903      	bls.n	800ac1e <xTaskRemoveFromEventList+0x5a>
 800ac16:	693b      	ldr	r3, [r7, #16]
 800ac18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ac1a:	4a16      	ldr	r2, [pc, #88]	; (800ac74 <xTaskRemoveFromEventList+0xb0>)
 800ac1c:	6013      	str	r3, [r2, #0]
 800ac1e:	693b      	ldr	r3, [r7, #16]
 800ac20:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ac22:	4613      	mov	r3, r2
 800ac24:	009b      	lsls	r3, r3, #2
 800ac26:	4413      	add	r3, r2
 800ac28:	009b      	lsls	r3, r3, #2
 800ac2a:	4a13      	ldr	r2, [pc, #76]	; (800ac78 <xTaskRemoveFromEventList+0xb4>)
 800ac2c:	441a      	add	r2, r3
 800ac2e:	693b      	ldr	r3, [r7, #16]
 800ac30:	3304      	adds	r3, #4
 800ac32:	4619      	mov	r1, r3
 800ac34:	4610      	mov	r0, r2
 800ac36:	f7fe fa3e 	bl	80090b6 <vListInsertEnd>
 800ac3a:	e005      	b.n	800ac48 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800ac3c:	693b      	ldr	r3, [r7, #16]
 800ac3e:	3318      	adds	r3, #24
 800ac40:	4619      	mov	r1, r3
 800ac42:	480e      	ldr	r0, [pc, #56]	; (800ac7c <xTaskRemoveFromEventList+0xb8>)
 800ac44:	f7fe fa37 	bl	80090b6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800ac48:	693b      	ldr	r3, [r7, #16]
 800ac4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ac4c:	4b0c      	ldr	r3, [pc, #48]	; (800ac80 <xTaskRemoveFromEventList+0xbc>)
 800ac4e:	681b      	ldr	r3, [r3, #0]
 800ac50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ac52:	429a      	cmp	r2, r3
 800ac54:	d905      	bls.n	800ac62 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800ac56:	2301      	movs	r3, #1
 800ac58:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800ac5a:	4b0a      	ldr	r3, [pc, #40]	; (800ac84 <xTaskRemoveFromEventList+0xc0>)
 800ac5c:	2201      	movs	r2, #1
 800ac5e:	601a      	str	r2, [r3, #0]
 800ac60:	e001      	b.n	800ac66 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 800ac62:	2300      	movs	r3, #0
 800ac64:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 800ac66:	697b      	ldr	r3, [r7, #20]
}
 800ac68:	4618      	mov	r0, r3
 800ac6a:	3718      	adds	r7, #24
 800ac6c:	46bd      	mov	sp, r7
 800ac6e:	bd80      	pop	{r7, pc}
 800ac70:	20000dcc 	.word	0x20000dcc
 800ac74:	20000dac 	.word	0x20000dac
 800ac78:	200008d4 	.word	0x200008d4
 800ac7c:	20000d64 	.word	0x20000d64
 800ac80:	200008d0 	.word	0x200008d0
 800ac84:	20000db8 	.word	0x20000db8

0800ac88 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800ac88:	b480      	push	{r7}
 800ac8a:	b083      	sub	sp, #12
 800ac8c:	af00      	add	r7, sp, #0
 800ac8e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800ac90:	4b06      	ldr	r3, [pc, #24]	; (800acac <vTaskInternalSetTimeOutState+0x24>)
 800ac92:	681a      	ldr	r2, [r3, #0]
 800ac94:	687b      	ldr	r3, [r7, #4]
 800ac96:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800ac98:	4b05      	ldr	r3, [pc, #20]	; (800acb0 <vTaskInternalSetTimeOutState+0x28>)
 800ac9a:	681a      	ldr	r2, [r3, #0]
 800ac9c:	687b      	ldr	r3, [r7, #4]
 800ac9e:	605a      	str	r2, [r3, #4]
}
 800aca0:	bf00      	nop
 800aca2:	370c      	adds	r7, #12
 800aca4:	46bd      	mov	sp, r7
 800aca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acaa:	4770      	bx	lr
 800acac:	20000dbc 	.word	0x20000dbc
 800acb0:	20000da8 	.word	0x20000da8

0800acb4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800acb4:	b580      	push	{r7, lr}
 800acb6:	b088      	sub	sp, #32
 800acb8:	af00      	add	r7, sp, #0
 800acba:	6078      	str	r0, [r7, #4]
 800acbc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800acbe:	687b      	ldr	r3, [r7, #4]
 800acc0:	2b00      	cmp	r3, #0
 800acc2:	d109      	bne.n	800acd8 <xTaskCheckForTimeOut+0x24>
 800acc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800acc8:	f383 8811 	msr	BASEPRI, r3
 800accc:	f3bf 8f6f 	isb	sy
 800acd0:	f3bf 8f4f 	dsb	sy
 800acd4:	613b      	str	r3, [r7, #16]
 800acd6:	e7fe      	b.n	800acd6 <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 800acd8:	683b      	ldr	r3, [r7, #0]
 800acda:	2b00      	cmp	r3, #0
 800acdc:	d109      	bne.n	800acf2 <xTaskCheckForTimeOut+0x3e>
 800acde:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ace2:	f383 8811 	msr	BASEPRI, r3
 800ace6:	f3bf 8f6f 	isb	sy
 800acea:	f3bf 8f4f 	dsb	sy
 800acee:	60fb      	str	r3, [r7, #12]
 800acf0:	e7fe      	b.n	800acf0 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 800acf2:	f000 ff4b 	bl	800bb8c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800acf6:	4b1d      	ldr	r3, [pc, #116]	; (800ad6c <xTaskCheckForTimeOut+0xb8>)
 800acf8:	681b      	ldr	r3, [r3, #0]
 800acfa:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800acfc:	687b      	ldr	r3, [r7, #4]
 800acfe:	685b      	ldr	r3, [r3, #4]
 800ad00:	69ba      	ldr	r2, [r7, #24]
 800ad02:	1ad3      	subs	r3, r2, r3
 800ad04:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800ad06:	683b      	ldr	r3, [r7, #0]
 800ad08:	681b      	ldr	r3, [r3, #0]
 800ad0a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ad0e:	d102      	bne.n	800ad16 <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800ad10:	2300      	movs	r3, #0
 800ad12:	61fb      	str	r3, [r7, #28]
 800ad14:	e023      	b.n	800ad5e <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800ad16:	687b      	ldr	r3, [r7, #4]
 800ad18:	681a      	ldr	r2, [r3, #0]
 800ad1a:	4b15      	ldr	r3, [pc, #84]	; (800ad70 <xTaskCheckForTimeOut+0xbc>)
 800ad1c:	681b      	ldr	r3, [r3, #0]
 800ad1e:	429a      	cmp	r2, r3
 800ad20:	d007      	beq.n	800ad32 <xTaskCheckForTimeOut+0x7e>
 800ad22:	687b      	ldr	r3, [r7, #4]
 800ad24:	685b      	ldr	r3, [r3, #4]
 800ad26:	69ba      	ldr	r2, [r7, #24]
 800ad28:	429a      	cmp	r2, r3
 800ad2a:	d302      	bcc.n	800ad32 <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800ad2c:	2301      	movs	r3, #1
 800ad2e:	61fb      	str	r3, [r7, #28]
 800ad30:	e015      	b.n	800ad5e <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800ad32:	683b      	ldr	r3, [r7, #0]
 800ad34:	681b      	ldr	r3, [r3, #0]
 800ad36:	697a      	ldr	r2, [r7, #20]
 800ad38:	429a      	cmp	r2, r3
 800ad3a:	d20b      	bcs.n	800ad54 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800ad3c:	683b      	ldr	r3, [r7, #0]
 800ad3e:	681a      	ldr	r2, [r3, #0]
 800ad40:	697b      	ldr	r3, [r7, #20]
 800ad42:	1ad2      	subs	r2, r2, r3
 800ad44:	683b      	ldr	r3, [r7, #0]
 800ad46:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800ad48:	6878      	ldr	r0, [r7, #4]
 800ad4a:	f7ff ff9d 	bl	800ac88 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800ad4e:	2300      	movs	r3, #0
 800ad50:	61fb      	str	r3, [r7, #28]
 800ad52:	e004      	b.n	800ad5e <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 800ad54:	683b      	ldr	r3, [r7, #0]
 800ad56:	2200      	movs	r2, #0
 800ad58:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800ad5a:	2301      	movs	r3, #1
 800ad5c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800ad5e:	f000 ff43 	bl	800bbe8 <vPortExitCritical>

	return xReturn;
 800ad62:	69fb      	ldr	r3, [r7, #28]
}
 800ad64:	4618      	mov	r0, r3
 800ad66:	3720      	adds	r7, #32
 800ad68:	46bd      	mov	sp, r7
 800ad6a:	bd80      	pop	{r7, pc}
 800ad6c:	20000da8 	.word	0x20000da8
 800ad70:	20000dbc 	.word	0x20000dbc

0800ad74 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800ad74:	b480      	push	{r7}
 800ad76:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800ad78:	4b03      	ldr	r3, [pc, #12]	; (800ad88 <vTaskMissedYield+0x14>)
 800ad7a:	2201      	movs	r2, #1
 800ad7c:	601a      	str	r2, [r3, #0]
}
 800ad7e:	bf00      	nop
 800ad80:	46bd      	mov	sp, r7
 800ad82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad86:	4770      	bx	lr
 800ad88:	20000db8 	.word	0x20000db8

0800ad8c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800ad8c:	b580      	push	{r7, lr}
 800ad8e:	b082      	sub	sp, #8
 800ad90:	af00      	add	r7, sp, #0
 800ad92:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800ad94:	f000 f852 	bl	800ae3c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800ad98:	4b06      	ldr	r3, [pc, #24]	; (800adb4 <prvIdleTask+0x28>)
 800ad9a:	681b      	ldr	r3, [r3, #0]
 800ad9c:	2b01      	cmp	r3, #1
 800ad9e:	d9f9      	bls.n	800ad94 <prvIdleTask+0x8>
			{
				taskYIELD();
 800ada0:	4b05      	ldr	r3, [pc, #20]	; (800adb8 <prvIdleTask+0x2c>)
 800ada2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ada6:	601a      	str	r2, [r3, #0]
 800ada8:	f3bf 8f4f 	dsb	sy
 800adac:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800adb0:	e7f0      	b.n	800ad94 <prvIdleTask+0x8>
 800adb2:	bf00      	nop
 800adb4:	200008d4 	.word	0x200008d4
 800adb8:	e000ed04 	.word	0xe000ed04

0800adbc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800adbc:	b580      	push	{r7, lr}
 800adbe:	b082      	sub	sp, #8
 800adc0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800adc2:	2300      	movs	r3, #0
 800adc4:	607b      	str	r3, [r7, #4]
 800adc6:	e00c      	b.n	800ade2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800adc8:	687a      	ldr	r2, [r7, #4]
 800adca:	4613      	mov	r3, r2
 800adcc:	009b      	lsls	r3, r3, #2
 800adce:	4413      	add	r3, r2
 800add0:	009b      	lsls	r3, r3, #2
 800add2:	4a12      	ldr	r2, [pc, #72]	; (800ae1c <prvInitialiseTaskLists+0x60>)
 800add4:	4413      	add	r3, r2
 800add6:	4618      	mov	r0, r3
 800add8:	f7fe f940 	bl	800905c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800addc:	687b      	ldr	r3, [r7, #4]
 800adde:	3301      	adds	r3, #1
 800ade0:	607b      	str	r3, [r7, #4]
 800ade2:	687b      	ldr	r3, [r7, #4]
 800ade4:	2b37      	cmp	r3, #55	; 0x37
 800ade6:	d9ef      	bls.n	800adc8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800ade8:	480d      	ldr	r0, [pc, #52]	; (800ae20 <prvInitialiseTaskLists+0x64>)
 800adea:	f7fe f937 	bl	800905c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800adee:	480d      	ldr	r0, [pc, #52]	; (800ae24 <prvInitialiseTaskLists+0x68>)
 800adf0:	f7fe f934 	bl	800905c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800adf4:	480c      	ldr	r0, [pc, #48]	; (800ae28 <prvInitialiseTaskLists+0x6c>)
 800adf6:	f7fe f931 	bl	800905c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800adfa:	480c      	ldr	r0, [pc, #48]	; (800ae2c <prvInitialiseTaskLists+0x70>)
 800adfc:	f7fe f92e 	bl	800905c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800ae00:	480b      	ldr	r0, [pc, #44]	; (800ae30 <prvInitialiseTaskLists+0x74>)
 800ae02:	f7fe f92b 	bl	800905c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800ae06:	4b0b      	ldr	r3, [pc, #44]	; (800ae34 <prvInitialiseTaskLists+0x78>)
 800ae08:	4a05      	ldr	r2, [pc, #20]	; (800ae20 <prvInitialiseTaskLists+0x64>)
 800ae0a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800ae0c:	4b0a      	ldr	r3, [pc, #40]	; (800ae38 <prvInitialiseTaskLists+0x7c>)
 800ae0e:	4a05      	ldr	r2, [pc, #20]	; (800ae24 <prvInitialiseTaskLists+0x68>)
 800ae10:	601a      	str	r2, [r3, #0]
}
 800ae12:	bf00      	nop
 800ae14:	3708      	adds	r7, #8
 800ae16:	46bd      	mov	sp, r7
 800ae18:	bd80      	pop	{r7, pc}
 800ae1a:	bf00      	nop
 800ae1c:	200008d4 	.word	0x200008d4
 800ae20:	20000d34 	.word	0x20000d34
 800ae24:	20000d48 	.word	0x20000d48
 800ae28:	20000d64 	.word	0x20000d64
 800ae2c:	20000d78 	.word	0x20000d78
 800ae30:	20000d90 	.word	0x20000d90
 800ae34:	20000d5c 	.word	0x20000d5c
 800ae38:	20000d60 	.word	0x20000d60

0800ae3c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800ae3c:	b580      	push	{r7, lr}
 800ae3e:	b082      	sub	sp, #8
 800ae40:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800ae42:	e019      	b.n	800ae78 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800ae44:	f000 fea2 	bl	800bb8c <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 800ae48:	4b0f      	ldr	r3, [pc, #60]	; (800ae88 <prvCheckTasksWaitingTermination+0x4c>)
 800ae4a:	68db      	ldr	r3, [r3, #12]
 800ae4c:	68db      	ldr	r3, [r3, #12]
 800ae4e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ae50:	687b      	ldr	r3, [r7, #4]
 800ae52:	3304      	adds	r3, #4
 800ae54:	4618      	mov	r0, r3
 800ae56:	f7fe f98b 	bl	8009170 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800ae5a:	4b0c      	ldr	r3, [pc, #48]	; (800ae8c <prvCheckTasksWaitingTermination+0x50>)
 800ae5c:	681b      	ldr	r3, [r3, #0]
 800ae5e:	3b01      	subs	r3, #1
 800ae60:	4a0a      	ldr	r2, [pc, #40]	; (800ae8c <prvCheckTasksWaitingTermination+0x50>)
 800ae62:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800ae64:	4b0a      	ldr	r3, [pc, #40]	; (800ae90 <prvCheckTasksWaitingTermination+0x54>)
 800ae66:	681b      	ldr	r3, [r3, #0]
 800ae68:	3b01      	subs	r3, #1
 800ae6a:	4a09      	ldr	r2, [pc, #36]	; (800ae90 <prvCheckTasksWaitingTermination+0x54>)
 800ae6c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800ae6e:	f000 febb 	bl	800bbe8 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800ae72:	6878      	ldr	r0, [r7, #4]
 800ae74:	f000 f80e 	bl	800ae94 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800ae78:	4b05      	ldr	r3, [pc, #20]	; (800ae90 <prvCheckTasksWaitingTermination+0x54>)
 800ae7a:	681b      	ldr	r3, [r3, #0]
 800ae7c:	2b00      	cmp	r3, #0
 800ae7e:	d1e1      	bne.n	800ae44 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800ae80:	bf00      	nop
 800ae82:	3708      	adds	r7, #8
 800ae84:	46bd      	mov	sp, r7
 800ae86:	bd80      	pop	{r7, pc}
 800ae88:	20000d78 	.word	0x20000d78
 800ae8c:	20000da4 	.word	0x20000da4
 800ae90:	20000d8c 	.word	0x20000d8c

0800ae94 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800ae94:	b580      	push	{r7, lr}
 800ae96:	b084      	sub	sp, #16
 800ae98:	af00      	add	r7, sp, #0
 800ae9a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800ae9c:	687b      	ldr	r3, [r7, #4]
 800ae9e:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800aea2:	2b00      	cmp	r3, #0
 800aea4:	d108      	bne.n	800aeb8 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800aea6:	687b      	ldr	r3, [r7, #4]
 800aea8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aeaa:	4618      	mov	r0, r3
 800aeac:	f001 f84a 	bl	800bf44 <vPortFree>
				vPortFree( pxTCB );
 800aeb0:	6878      	ldr	r0, [r7, #4]
 800aeb2:	f001 f847 	bl	800bf44 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800aeb6:	e017      	b.n	800aee8 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800aeb8:	687b      	ldr	r3, [r7, #4]
 800aeba:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800aebe:	2b01      	cmp	r3, #1
 800aec0:	d103      	bne.n	800aeca <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800aec2:	6878      	ldr	r0, [r7, #4]
 800aec4:	f001 f83e 	bl	800bf44 <vPortFree>
	}
 800aec8:	e00e      	b.n	800aee8 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800aeca:	687b      	ldr	r3, [r7, #4]
 800aecc:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800aed0:	2b02      	cmp	r3, #2
 800aed2:	d009      	beq.n	800aee8 <prvDeleteTCB+0x54>
 800aed4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aed8:	f383 8811 	msr	BASEPRI, r3
 800aedc:	f3bf 8f6f 	isb	sy
 800aee0:	f3bf 8f4f 	dsb	sy
 800aee4:	60fb      	str	r3, [r7, #12]
 800aee6:	e7fe      	b.n	800aee6 <prvDeleteTCB+0x52>
	}
 800aee8:	bf00      	nop
 800aeea:	3710      	adds	r7, #16
 800aeec:	46bd      	mov	sp, r7
 800aeee:	bd80      	pop	{r7, pc}

0800aef0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800aef0:	b480      	push	{r7}
 800aef2:	b083      	sub	sp, #12
 800aef4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800aef6:	4b0f      	ldr	r3, [pc, #60]	; (800af34 <prvResetNextTaskUnblockTime+0x44>)
 800aef8:	681b      	ldr	r3, [r3, #0]
 800aefa:	681b      	ldr	r3, [r3, #0]
 800aefc:	2b00      	cmp	r3, #0
 800aefe:	d101      	bne.n	800af04 <prvResetNextTaskUnblockTime+0x14>
 800af00:	2301      	movs	r3, #1
 800af02:	e000      	b.n	800af06 <prvResetNextTaskUnblockTime+0x16>
 800af04:	2300      	movs	r3, #0
 800af06:	2b00      	cmp	r3, #0
 800af08:	d004      	beq.n	800af14 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800af0a:	4b0b      	ldr	r3, [pc, #44]	; (800af38 <prvResetNextTaskUnblockTime+0x48>)
 800af0c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800af10:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800af12:	e008      	b.n	800af26 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800af14:	4b07      	ldr	r3, [pc, #28]	; (800af34 <prvResetNextTaskUnblockTime+0x44>)
 800af16:	681b      	ldr	r3, [r3, #0]
 800af18:	68db      	ldr	r3, [r3, #12]
 800af1a:	68db      	ldr	r3, [r3, #12]
 800af1c:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800af1e:	687b      	ldr	r3, [r7, #4]
 800af20:	685b      	ldr	r3, [r3, #4]
 800af22:	4a05      	ldr	r2, [pc, #20]	; (800af38 <prvResetNextTaskUnblockTime+0x48>)
 800af24:	6013      	str	r3, [r2, #0]
}
 800af26:	bf00      	nop
 800af28:	370c      	adds	r7, #12
 800af2a:	46bd      	mov	sp, r7
 800af2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af30:	4770      	bx	lr
 800af32:	bf00      	nop
 800af34:	20000d5c 	.word	0x20000d5c
 800af38:	20000dc4 	.word	0x20000dc4

0800af3c <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 800af3c:	b480      	push	{r7}
 800af3e:	b083      	sub	sp, #12
 800af40:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 800af42:	4b05      	ldr	r3, [pc, #20]	; (800af58 <xTaskGetCurrentTaskHandle+0x1c>)
 800af44:	681b      	ldr	r3, [r3, #0]
 800af46:	607b      	str	r3, [r7, #4]

		return xReturn;
 800af48:	687b      	ldr	r3, [r7, #4]
	}
 800af4a:	4618      	mov	r0, r3
 800af4c:	370c      	adds	r7, #12
 800af4e:	46bd      	mov	sp, r7
 800af50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af54:	4770      	bx	lr
 800af56:	bf00      	nop
 800af58:	200008d0 	.word	0x200008d0

0800af5c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800af5c:	b480      	push	{r7}
 800af5e:	b083      	sub	sp, #12
 800af60:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800af62:	4b0b      	ldr	r3, [pc, #44]	; (800af90 <xTaskGetSchedulerState+0x34>)
 800af64:	681b      	ldr	r3, [r3, #0]
 800af66:	2b00      	cmp	r3, #0
 800af68:	d102      	bne.n	800af70 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800af6a:	2301      	movs	r3, #1
 800af6c:	607b      	str	r3, [r7, #4]
 800af6e:	e008      	b.n	800af82 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800af70:	4b08      	ldr	r3, [pc, #32]	; (800af94 <xTaskGetSchedulerState+0x38>)
 800af72:	681b      	ldr	r3, [r3, #0]
 800af74:	2b00      	cmp	r3, #0
 800af76:	d102      	bne.n	800af7e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800af78:	2302      	movs	r3, #2
 800af7a:	607b      	str	r3, [r7, #4]
 800af7c:	e001      	b.n	800af82 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800af7e:	2300      	movs	r3, #0
 800af80:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800af82:	687b      	ldr	r3, [r7, #4]
	}
 800af84:	4618      	mov	r0, r3
 800af86:	370c      	adds	r7, #12
 800af88:	46bd      	mov	sp, r7
 800af8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af8e:	4770      	bx	lr
 800af90:	20000db0 	.word	0x20000db0
 800af94:	20000dcc 	.word	0x20000dcc

0800af98 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800af98:	b580      	push	{r7, lr}
 800af9a:	b084      	sub	sp, #16
 800af9c:	af00      	add	r7, sp, #0
 800af9e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = ( TCB_t * ) pxMutexHolder;
 800afa0:	687b      	ldr	r3, [r7, #4]
 800afa2:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800afa4:	2300      	movs	r3, #0
 800afa6:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800afa8:	687b      	ldr	r3, [r7, #4]
 800afaa:	2b00      	cmp	r3, #0
 800afac:	d056      	beq.n	800b05c <xTaskPriorityInherit+0xc4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800afae:	68bb      	ldr	r3, [r7, #8]
 800afb0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800afb2:	4b2d      	ldr	r3, [pc, #180]	; (800b068 <xTaskPriorityInherit+0xd0>)
 800afb4:	681b      	ldr	r3, [r3, #0]
 800afb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800afb8:	429a      	cmp	r2, r3
 800afba:	d246      	bcs.n	800b04a <xTaskPriorityInherit+0xb2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800afbc:	68bb      	ldr	r3, [r7, #8]
 800afbe:	699b      	ldr	r3, [r3, #24]
 800afc0:	2b00      	cmp	r3, #0
 800afc2:	db06      	blt.n	800afd2 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800afc4:	4b28      	ldr	r3, [pc, #160]	; (800b068 <xTaskPriorityInherit+0xd0>)
 800afc6:	681b      	ldr	r3, [r3, #0]
 800afc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800afca:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800afce:	68bb      	ldr	r3, [r7, #8]
 800afd0:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800afd2:	68bb      	ldr	r3, [r7, #8]
 800afd4:	6959      	ldr	r1, [r3, #20]
 800afd6:	68bb      	ldr	r3, [r7, #8]
 800afd8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800afda:	4613      	mov	r3, r2
 800afdc:	009b      	lsls	r3, r3, #2
 800afde:	4413      	add	r3, r2
 800afe0:	009b      	lsls	r3, r3, #2
 800afe2:	4a22      	ldr	r2, [pc, #136]	; (800b06c <xTaskPriorityInherit+0xd4>)
 800afe4:	4413      	add	r3, r2
 800afe6:	4299      	cmp	r1, r3
 800afe8:	d101      	bne.n	800afee <xTaskPriorityInherit+0x56>
 800afea:	2301      	movs	r3, #1
 800afec:	e000      	b.n	800aff0 <xTaskPriorityInherit+0x58>
 800afee:	2300      	movs	r3, #0
 800aff0:	2b00      	cmp	r3, #0
 800aff2:	d022      	beq.n	800b03a <xTaskPriorityInherit+0xa2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800aff4:	68bb      	ldr	r3, [r7, #8]
 800aff6:	3304      	adds	r3, #4
 800aff8:	4618      	mov	r0, r3
 800affa:	f7fe f8b9 	bl	8009170 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800affe:	4b1a      	ldr	r3, [pc, #104]	; (800b068 <xTaskPriorityInherit+0xd0>)
 800b000:	681b      	ldr	r3, [r3, #0]
 800b002:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b004:	68bb      	ldr	r3, [r7, #8]
 800b006:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800b008:	68bb      	ldr	r3, [r7, #8]
 800b00a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b00c:	4b18      	ldr	r3, [pc, #96]	; (800b070 <xTaskPriorityInherit+0xd8>)
 800b00e:	681b      	ldr	r3, [r3, #0]
 800b010:	429a      	cmp	r2, r3
 800b012:	d903      	bls.n	800b01c <xTaskPriorityInherit+0x84>
 800b014:	68bb      	ldr	r3, [r7, #8]
 800b016:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b018:	4a15      	ldr	r2, [pc, #84]	; (800b070 <xTaskPriorityInherit+0xd8>)
 800b01a:	6013      	str	r3, [r2, #0]
 800b01c:	68bb      	ldr	r3, [r7, #8]
 800b01e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b020:	4613      	mov	r3, r2
 800b022:	009b      	lsls	r3, r3, #2
 800b024:	4413      	add	r3, r2
 800b026:	009b      	lsls	r3, r3, #2
 800b028:	4a10      	ldr	r2, [pc, #64]	; (800b06c <xTaskPriorityInherit+0xd4>)
 800b02a:	441a      	add	r2, r3
 800b02c:	68bb      	ldr	r3, [r7, #8]
 800b02e:	3304      	adds	r3, #4
 800b030:	4619      	mov	r1, r3
 800b032:	4610      	mov	r0, r2
 800b034:	f7fe f83f 	bl	80090b6 <vListInsertEnd>
 800b038:	e004      	b.n	800b044 <xTaskPriorityInherit+0xac>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800b03a:	4b0b      	ldr	r3, [pc, #44]	; (800b068 <xTaskPriorityInherit+0xd0>)
 800b03c:	681b      	ldr	r3, [r3, #0]
 800b03e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b040:	68bb      	ldr	r3, [r7, #8]
 800b042:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800b044:	2301      	movs	r3, #1
 800b046:	60fb      	str	r3, [r7, #12]
 800b048:	e008      	b.n	800b05c <xTaskPriorityInherit+0xc4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800b04a:	68bb      	ldr	r3, [r7, #8]
 800b04c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800b04e:	4b06      	ldr	r3, [pc, #24]	; (800b068 <xTaskPriorityInherit+0xd0>)
 800b050:	681b      	ldr	r3, [r3, #0]
 800b052:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b054:	429a      	cmp	r2, r3
 800b056:	d201      	bcs.n	800b05c <xTaskPriorityInherit+0xc4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800b058:	2301      	movs	r3, #1
 800b05a:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800b05c:	68fb      	ldr	r3, [r7, #12]
	}
 800b05e:	4618      	mov	r0, r3
 800b060:	3710      	adds	r7, #16
 800b062:	46bd      	mov	sp, r7
 800b064:	bd80      	pop	{r7, pc}
 800b066:	bf00      	nop
 800b068:	200008d0 	.word	0x200008d0
 800b06c:	200008d4 	.word	0x200008d4
 800b070:	20000dac 	.word	0x20000dac

0800b074 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800b074:	b580      	push	{r7, lr}
 800b076:	b086      	sub	sp, #24
 800b078:	af00      	add	r7, sp, #0
 800b07a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 800b07c:	687b      	ldr	r3, [r7, #4]
 800b07e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800b080:	2300      	movs	r3, #0
 800b082:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800b084:	687b      	ldr	r3, [r7, #4]
 800b086:	2b00      	cmp	r3, #0
 800b088:	d054      	beq.n	800b134 <xTaskPriorityDisinherit+0xc0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800b08a:	4b2d      	ldr	r3, [pc, #180]	; (800b140 <xTaskPriorityDisinherit+0xcc>)
 800b08c:	681b      	ldr	r3, [r3, #0]
 800b08e:	693a      	ldr	r2, [r7, #16]
 800b090:	429a      	cmp	r2, r3
 800b092:	d009      	beq.n	800b0a8 <xTaskPriorityDisinherit+0x34>
 800b094:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b098:	f383 8811 	msr	BASEPRI, r3
 800b09c:	f3bf 8f6f 	isb	sy
 800b0a0:	f3bf 8f4f 	dsb	sy
 800b0a4:	60fb      	str	r3, [r7, #12]
 800b0a6:	e7fe      	b.n	800b0a6 <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 800b0a8:	693b      	ldr	r3, [r7, #16]
 800b0aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b0ac:	2b00      	cmp	r3, #0
 800b0ae:	d109      	bne.n	800b0c4 <xTaskPriorityDisinherit+0x50>
 800b0b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b0b4:	f383 8811 	msr	BASEPRI, r3
 800b0b8:	f3bf 8f6f 	isb	sy
 800b0bc:	f3bf 8f4f 	dsb	sy
 800b0c0:	60bb      	str	r3, [r7, #8]
 800b0c2:	e7fe      	b.n	800b0c2 <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 800b0c4:	693b      	ldr	r3, [r7, #16]
 800b0c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b0c8:	1e5a      	subs	r2, r3, #1
 800b0ca:	693b      	ldr	r3, [r7, #16]
 800b0cc:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800b0ce:	693b      	ldr	r3, [r7, #16]
 800b0d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b0d2:	693b      	ldr	r3, [r7, #16]
 800b0d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b0d6:	429a      	cmp	r2, r3
 800b0d8:	d02c      	beq.n	800b134 <xTaskPriorityDisinherit+0xc0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800b0da:	693b      	ldr	r3, [r7, #16]
 800b0dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b0de:	2b00      	cmp	r3, #0
 800b0e0:	d128      	bne.n	800b134 <xTaskPriorityDisinherit+0xc0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b0e2:	693b      	ldr	r3, [r7, #16]
 800b0e4:	3304      	adds	r3, #4
 800b0e6:	4618      	mov	r0, r3
 800b0e8:	f7fe f842 	bl	8009170 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800b0ec:	693b      	ldr	r3, [r7, #16]
 800b0ee:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800b0f0:	693b      	ldr	r3, [r7, #16]
 800b0f2:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b0f4:	693b      	ldr	r3, [r7, #16]
 800b0f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b0f8:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800b0fc:	693b      	ldr	r3, [r7, #16]
 800b0fe:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800b100:	693b      	ldr	r3, [r7, #16]
 800b102:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b104:	4b0f      	ldr	r3, [pc, #60]	; (800b144 <xTaskPriorityDisinherit+0xd0>)
 800b106:	681b      	ldr	r3, [r3, #0]
 800b108:	429a      	cmp	r2, r3
 800b10a:	d903      	bls.n	800b114 <xTaskPriorityDisinherit+0xa0>
 800b10c:	693b      	ldr	r3, [r7, #16]
 800b10e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b110:	4a0c      	ldr	r2, [pc, #48]	; (800b144 <xTaskPriorityDisinherit+0xd0>)
 800b112:	6013      	str	r3, [r2, #0]
 800b114:	693b      	ldr	r3, [r7, #16]
 800b116:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b118:	4613      	mov	r3, r2
 800b11a:	009b      	lsls	r3, r3, #2
 800b11c:	4413      	add	r3, r2
 800b11e:	009b      	lsls	r3, r3, #2
 800b120:	4a09      	ldr	r2, [pc, #36]	; (800b148 <xTaskPriorityDisinherit+0xd4>)
 800b122:	441a      	add	r2, r3
 800b124:	693b      	ldr	r3, [r7, #16]
 800b126:	3304      	adds	r3, #4
 800b128:	4619      	mov	r1, r3
 800b12a:	4610      	mov	r0, r2
 800b12c:	f7fd ffc3 	bl	80090b6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800b130:	2301      	movs	r3, #1
 800b132:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800b134:	697b      	ldr	r3, [r7, #20]
	}
 800b136:	4618      	mov	r0, r3
 800b138:	3718      	adds	r7, #24
 800b13a:	46bd      	mov	sp, r7
 800b13c:	bd80      	pop	{r7, pc}
 800b13e:	bf00      	nop
 800b140:	200008d0 	.word	0x200008d0
 800b144:	20000dac 	.word	0x20000dac
 800b148:	200008d4 	.word	0x200008d4

0800b14c <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800b14c:	b580      	push	{r7, lr}
 800b14e:	b088      	sub	sp, #32
 800b150:	af00      	add	r7, sp, #0
 800b152:	6078      	str	r0, [r7, #4]
 800b154:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 800b156:	687b      	ldr	r3, [r7, #4]
 800b158:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800b15a:	2301      	movs	r3, #1
 800b15c:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800b15e:	687b      	ldr	r3, [r7, #4]
 800b160:	2b00      	cmp	r3, #0
 800b162:	d06d      	beq.n	800b240 <vTaskPriorityDisinheritAfterTimeout+0xf4>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800b164:	69bb      	ldr	r3, [r7, #24]
 800b166:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b168:	2b00      	cmp	r3, #0
 800b16a:	d109      	bne.n	800b180 <vTaskPriorityDisinheritAfterTimeout+0x34>
 800b16c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b170:	f383 8811 	msr	BASEPRI, r3
 800b174:	f3bf 8f6f 	isb	sy
 800b178:	f3bf 8f4f 	dsb	sy
 800b17c:	60fb      	str	r3, [r7, #12]
 800b17e:	e7fe      	b.n	800b17e <vTaskPriorityDisinheritAfterTimeout+0x32>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800b180:	69bb      	ldr	r3, [r7, #24]
 800b182:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b184:	683a      	ldr	r2, [r7, #0]
 800b186:	429a      	cmp	r2, r3
 800b188:	d902      	bls.n	800b190 <vTaskPriorityDisinheritAfterTimeout+0x44>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800b18a:	683b      	ldr	r3, [r7, #0]
 800b18c:	61fb      	str	r3, [r7, #28]
 800b18e:	e002      	b.n	800b196 <vTaskPriorityDisinheritAfterTimeout+0x4a>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800b190:	69bb      	ldr	r3, [r7, #24]
 800b192:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b194:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800b196:	69bb      	ldr	r3, [r7, #24]
 800b198:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b19a:	69fa      	ldr	r2, [r7, #28]
 800b19c:	429a      	cmp	r2, r3
 800b19e:	d04f      	beq.n	800b240 <vTaskPriorityDisinheritAfterTimeout+0xf4>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800b1a0:	69bb      	ldr	r3, [r7, #24]
 800b1a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b1a4:	697a      	ldr	r2, [r7, #20]
 800b1a6:	429a      	cmp	r2, r3
 800b1a8:	d14a      	bne.n	800b240 <vTaskPriorityDisinheritAfterTimeout+0xf4>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800b1aa:	4b27      	ldr	r3, [pc, #156]	; (800b248 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800b1ac:	681b      	ldr	r3, [r3, #0]
 800b1ae:	69ba      	ldr	r2, [r7, #24]
 800b1b0:	429a      	cmp	r2, r3
 800b1b2:	d109      	bne.n	800b1c8 <vTaskPriorityDisinheritAfterTimeout+0x7c>
 800b1b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b1b8:	f383 8811 	msr	BASEPRI, r3
 800b1bc:	f3bf 8f6f 	isb	sy
 800b1c0:	f3bf 8f4f 	dsb	sy
 800b1c4:	60bb      	str	r3, [r7, #8]
 800b1c6:	e7fe      	b.n	800b1c6 <vTaskPriorityDisinheritAfterTimeout+0x7a>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800b1c8:	69bb      	ldr	r3, [r7, #24]
 800b1ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b1cc:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800b1ce:	69bb      	ldr	r3, [r7, #24]
 800b1d0:	69fa      	ldr	r2, [r7, #28]
 800b1d2:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800b1d4:	69bb      	ldr	r3, [r7, #24]
 800b1d6:	699b      	ldr	r3, [r3, #24]
 800b1d8:	2b00      	cmp	r3, #0
 800b1da:	db04      	blt.n	800b1e6 <vTaskPriorityDisinheritAfterTimeout+0x9a>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b1dc:	69fb      	ldr	r3, [r7, #28]
 800b1de:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800b1e2:	69bb      	ldr	r3, [r7, #24]
 800b1e4:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800b1e6:	69bb      	ldr	r3, [r7, #24]
 800b1e8:	6959      	ldr	r1, [r3, #20]
 800b1ea:	693a      	ldr	r2, [r7, #16]
 800b1ec:	4613      	mov	r3, r2
 800b1ee:	009b      	lsls	r3, r3, #2
 800b1f0:	4413      	add	r3, r2
 800b1f2:	009b      	lsls	r3, r3, #2
 800b1f4:	4a15      	ldr	r2, [pc, #84]	; (800b24c <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800b1f6:	4413      	add	r3, r2
 800b1f8:	4299      	cmp	r1, r3
 800b1fa:	d101      	bne.n	800b200 <vTaskPriorityDisinheritAfterTimeout+0xb4>
 800b1fc:	2301      	movs	r3, #1
 800b1fe:	e000      	b.n	800b202 <vTaskPriorityDisinheritAfterTimeout+0xb6>
 800b200:	2300      	movs	r3, #0
 800b202:	2b00      	cmp	r3, #0
 800b204:	d01c      	beq.n	800b240 <vTaskPriorityDisinheritAfterTimeout+0xf4>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b206:	69bb      	ldr	r3, [r7, #24]
 800b208:	3304      	adds	r3, #4
 800b20a:	4618      	mov	r0, r3
 800b20c:	f7fd ffb0 	bl	8009170 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800b210:	69bb      	ldr	r3, [r7, #24]
 800b212:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b214:	4b0e      	ldr	r3, [pc, #56]	; (800b250 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 800b216:	681b      	ldr	r3, [r3, #0]
 800b218:	429a      	cmp	r2, r3
 800b21a:	d903      	bls.n	800b224 <vTaskPriorityDisinheritAfterTimeout+0xd8>
 800b21c:	69bb      	ldr	r3, [r7, #24]
 800b21e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b220:	4a0b      	ldr	r2, [pc, #44]	; (800b250 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 800b222:	6013      	str	r3, [r2, #0]
 800b224:	69bb      	ldr	r3, [r7, #24]
 800b226:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b228:	4613      	mov	r3, r2
 800b22a:	009b      	lsls	r3, r3, #2
 800b22c:	4413      	add	r3, r2
 800b22e:	009b      	lsls	r3, r3, #2
 800b230:	4a06      	ldr	r2, [pc, #24]	; (800b24c <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800b232:	441a      	add	r2, r3
 800b234:	69bb      	ldr	r3, [r7, #24]
 800b236:	3304      	adds	r3, #4
 800b238:	4619      	mov	r1, r3
 800b23a:	4610      	mov	r0, r2
 800b23c:	f7fd ff3b 	bl	80090b6 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800b240:	bf00      	nop
 800b242:	3720      	adds	r7, #32
 800b244:	46bd      	mov	sp, r7
 800b246:	bd80      	pop	{r7, pc}
 800b248:	200008d0 	.word	0x200008d0
 800b24c:	200008d4 	.word	0x200008d4
 800b250:	20000dac 	.word	0x20000dac

0800b254 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
 800b254:	b480      	push	{r7}
 800b256:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800b258:	4b07      	ldr	r3, [pc, #28]	; (800b278 <pvTaskIncrementMutexHeldCount+0x24>)
 800b25a:	681b      	ldr	r3, [r3, #0]
 800b25c:	2b00      	cmp	r3, #0
 800b25e:	d004      	beq.n	800b26a <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800b260:	4b05      	ldr	r3, [pc, #20]	; (800b278 <pvTaskIncrementMutexHeldCount+0x24>)
 800b262:	681b      	ldr	r3, [r3, #0]
 800b264:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800b266:	3201      	adds	r2, #1
 800b268:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 800b26a:	4b03      	ldr	r3, [pc, #12]	; (800b278 <pvTaskIncrementMutexHeldCount+0x24>)
 800b26c:	681b      	ldr	r3, [r3, #0]
	}
 800b26e:	4618      	mov	r0, r3
 800b270:	46bd      	mov	sp, r7
 800b272:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b276:	4770      	bx	lr
 800b278:	200008d0 	.word	0x200008d0

0800b27c <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800b27c:	b580      	push	{r7, lr}
 800b27e:	b084      	sub	sp, #16
 800b280:	af00      	add	r7, sp, #0
 800b282:	6078      	str	r0, [r7, #4]
 800b284:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800b286:	4b21      	ldr	r3, [pc, #132]	; (800b30c <prvAddCurrentTaskToDelayedList+0x90>)
 800b288:	681b      	ldr	r3, [r3, #0]
 800b28a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b28c:	4b20      	ldr	r3, [pc, #128]	; (800b310 <prvAddCurrentTaskToDelayedList+0x94>)
 800b28e:	681b      	ldr	r3, [r3, #0]
 800b290:	3304      	adds	r3, #4
 800b292:	4618      	mov	r0, r3
 800b294:	f7fd ff6c 	bl	8009170 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800b298:	687b      	ldr	r3, [r7, #4]
 800b29a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b29e:	d10a      	bne.n	800b2b6 <prvAddCurrentTaskToDelayedList+0x3a>
 800b2a0:	683b      	ldr	r3, [r7, #0]
 800b2a2:	2b00      	cmp	r3, #0
 800b2a4:	d007      	beq.n	800b2b6 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b2a6:	4b1a      	ldr	r3, [pc, #104]	; (800b310 <prvAddCurrentTaskToDelayedList+0x94>)
 800b2a8:	681b      	ldr	r3, [r3, #0]
 800b2aa:	3304      	adds	r3, #4
 800b2ac:	4619      	mov	r1, r3
 800b2ae:	4819      	ldr	r0, [pc, #100]	; (800b314 <prvAddCurrentTaskToDelayedList+0x98>)
 800b2b0:	f7fd ff01 	bl	80090b6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800b2b4:	e026      	b.n	800b304 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800b2b6:	68fa      	ldr	r2, [r7, #12]
 800b2b8:	687b      	ldr	r3, [r7, #4]
 800b2ba:	4413      	add	r3, r2
 800b2bc:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800b2be:	4b14      	ldr	r3, [pc, #80]	; (800b310 <prvAddCurrentTaskToDelayedList+0x94>)
 800b2c0:	681b      	ldr	r3, [r3, #0]
 800b2c2:	68ba      	ldr	r2, [r7, #8]
 800b2c4:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800b2c6:	68ba      	ldr	r2, [r7, #8]
 800b2c8:	68fb      	ldr	r3, [r7, #12]
 800b2ca:	429a      	cmp	r2, r3
 800b2cc:	d209      	bcs.n	800b2e2 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b2ce:	4b12      	ldr	r3, [pc, #72]	; (800b318 <prvAddCurrentTaskToDelayedList+0x9c>)
 800b2d0:	681a      	ldr	r2, [r3, #0]
 800b2d2:	4b0f      	ldr	r3, [pc, #60]	; (800b310 <prvAddCurrentTaskToDelayedList+0x94>)
 800b2d4:	681b      	ldr	r3, [r3, #0]
 800b2d6:	3304      	adds	r3, #4
 800b2d8:	4619      	mov	r1, r3
 800b2da:	4610      	mov	r0, r2
 800b2dc:	f7fd ff0f 	bl	80090fe <vListInsert>
}
 800b2e0:	e010      	b.n	800b304 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b2e2:	4b0e      	ldr	r3, [pc, #56]	; (800b31c <prvAddCurrentTaskToDelayedList+0xa0>)
 800b2e4:	681a      	ldr	r2, [r3, #0]
 800b2e6:	4b0a      	ldr	r3, [pc, #40]	; (800b310 <prvAddCurrentTaskToDelayedList+0x94>)
 800b2e8:	681b      	ldr	r3, [r3, #0]
 800b2ea:	3304      	adds	r3, #4
 800b2ec:	4619      	mov	r1, r3
 800b2ee:	4610      	mov	r0, r2
 800b2f0:	f7fd ff05 	bl	80090fe <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800b2f4:	4b0a      	ldr	r3, [pc, #40]	; (800b320 <prvAddCurrentTaskToDelayedList+0xa4>)
 800b2f6:	681b      	ldr	r3, [r3, #0]
 800b2f8:	68ba      	ldr	r2, [r7, #8]
 800b2fa:	429a      	cmp	r2, r3
 800b2fc:	d202      	bcs.n	800b304 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800b2fe:	4a08      	ldr	r2, [pc, #32]	; (800b320 <prvAddCurrentTaskToDelayedList+0xa4>)
 800b300:	68bb      	ldr	r3, [r7, #8]
 800b302:	6013      	str	r3, [r2, #0]
}
 800b304:	bf00      	nop
 800b306:	3710      	adds	r7, #16
 800b308:	46bd      	mov	sp, r7
 800b30a:	bd80      	pop	{r7, pc}
 800b30c:	20000da8 	.word	0x20000da8
 800b310:	200008d0 	.word	0x200008d0
 800b314:	20000d90 	.word	0x20000d90
 800b318:	20000d60 	.word	0x20000d60
 800b31c:	20000d5c 	.word	0x20000d5c
 800b320:	20000dc4 	.word	0x20000dc4

0800b324 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800b324:	b580      	push	{r7, lr}
 800b326:	b08a      	sub	sp, #40	; 0x28
 800b328:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800b32a:	2300      	movs	r3, #0
 800b32c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800b32e:	f000 fac3 	bl	800b8b8 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800b332:	4b1c      	ldr	r3, [pc, #112]	; (800b3a4 <xTimerCreateTimerTask+0x80>)
 800b334:	681b      	ldr	r3, [r3, #0]
 800b336:	2b00      	cmp	r3, #0
 800b338:	d021      	beq.n	800b37e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800b33a:	2300      	movs	r3, #0
 800b33c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800b33e:	2300      	movs	r3, #0
 800b340:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800b342:	1d3a      	adds	r2, r7, #4
 800b344:	f107 0108 	add.w	r1, r7, #8
 800b348:	f107 030c 	add.w	r3, r7, #12
 800b34c:	4618      	mov	r0, r3
 800b34e:	f7fd fe6b 	bl	8009028 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800b352:	6879      	ldr	r1, [r7, #4]
 800b354:	68bb      	ldr	r3, [r7, #8]
 800b356:	68fa      	ldr	r2, [r7, #12]
 800b358:	9202      	str	r2, [sp, #8]
 800b35a:	9301      	str	r3, [sp, #4]
 800b35c:	2302      	movs	r3, #2
 800b35e:	9300      	str	r3, [sp, #0]
 800b360:	2300      	movs	r3, #0
 800b362:	460a      	mov	r2, r1
 800b364:	4910      	ldr	r1, [pc, #64]	; (800b3a8 <xTimerCreateTimerTask+0x84>)
 800b366:	4811      	ldr	r0, [pc, #68]	; (800b3ac <xTimerCreateTimerTask+0x88>)
 800b368:	f7fe ffcc 	bl	800a304 <xTaskCreateStatic>
 800b36c:	4602      	mov	r2, r0
 800b36e:	4b10      	ldr	r3, [pc, #64]	; (800b3b0 <xTimerCreateTimerTask+0x8c>)
 800b370:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800b372:	4b0f      	ldr	r3, [pc, #60]	; (800b3b0 <xTimerCreateTimerTask+0x8c>)
 800b374:	681b      	ldr	r3, [r3, #0]
 800b376:	2b00      	cmp	r3, #0
 800b378:	d001      	beq.n	800b37e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800b37a:	2301      	movs	r3, #1
 800b37c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800b37e:	697b      	ldr	r3, [r7, #20]
 800b380:	2b00      	cmp	r3, #0
 800b382:	d109      	bne.n	800b398 <xTimerCreateTimerTask+0x74>
 800b384:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b388:	f383 8811 	msr	BASEPRI, r3
 800b38c:	f3bf 8f6f 	isb	sy
 800b390:	f3bf 8f4f 	dsb	sy
 800b394:	613b      	str	r3, [r7, #16]
 800b396:	e7fe      	b.n	800b396 <xTimerCreateTimerTask+0x72>
	return xReturn;
 800b398:	697b      	ldr	r3, [r7, #20]
}
 800b39a:	4618      	mov	r0, r3
 800b39c:	3718      	adds	r7, #24
 800b39e:	46bd      	mov	sp, r7
 800b3a0:	bd80      	pop	{r7, pc}
 800b3a2:	bf00      	nop
 800b3a4:	20000e00 	.word	0x20000e00
 800b3a8:	08018aa4 	.word	0x08018aa4
 800b3ac:	0800b4cd 	.word	0x0800b4cd
 800b3b0:	20000e04 	.word	0x20000e04

0800b3b4 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800b3b4:	b580      	push	{r7, lr}
 800b3b6:	b08a      	sub	sp, #40	; 0x28
 800b3b8:	af00      	add	r7, sp, #0
 800b3ba:	60f8      	str	r0, [r7, #12]
 800b3bc:	60b9      	str	r1, [r7, #8]
 800b3be:	607a      	str	r2, [r7, #4]
 800b3c0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800b3c2:	2300      	movs	r3, #0
 800b3c4:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800b3c6:	68fb      	ldr	r3, [r7, #12]
 800b3c8:	2b00      	cmp	r3, #0
 800b3ca:	d109      	bne.n	800b3e0 <xTimerGenericCommand+0x2c>
 800b3cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b3d0:	f383 8811 	msr	BASEPRI, r3
 800b3d4:	f3bf 8f6f 	isb	sy
 800b3d8:	f3bf 8f4f 	dsb	sy
 800b3dc:	623b      	str	r3, [r7, #32]
 800b3de:	e7fe      	b.n	800b3de <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800b3e0:	4b19      	ldr	r3, [pc, #100]	; (800b448 <xTimerGenericCommand+0x94>)
 800b3e2:	681b      	ldr	r3, [r3, #0]
 800b3e4:	2b00      	cmp	r3, #0
 800b3e6:	d02a      	beq.n	800b43e <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800b3e8:	68bb      	ldr	r3, [r7, #8]
 800b3ea:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800b3ec:	687b      	ldr	r3, [r7, #4]
 800b3ee:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 800b3f0:	68fb      	ldr	r3, [r7, #12]
 800b3f2:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800b3f4:	68bb      	ldr	r3, [r7, #8]
 800b3f6:	2b05      	cmp	r3, #5
 800b3f8:	dc18      	bgt.n	800b42c <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800b3fa:	f7ff fdaf 	bl	800af5c <xTaskGetSchedulerState>
 800b3fe:	4603      	mov	r3, r0
 800b400:	2b02      	cmp	r3, #2
 800b402:	d109      	bne.n	800b418 <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800b404:	4b10      	ldr	r3, [pc, #64]	; (800b448 <xTimerGenericCommand+0x94>)
 800b406:	6818      	ldr	r0, [r3, #0]
 800b408:	f107 0110 	add.w	r1, r7, #16
 800b40c:	2300      	movs	r3, #0
 800b40e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b410:	f7fe f92e 	bl	8009670 <xQueueGenericSend>
 800b414:	6278      	str	r0, [r7, #36]	; 0x24
 800b416:	e012      	b.n	800b43e <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800b418:	4b0b      	ldr	r3, [pc, #44]	; (800b448 <xTimerGenericCommand+0x94>)
 800b41a:	6818      	ldr	r0, [r3, #0]
 800b41c:	f107 0110 	add.w	r1, r7, #16
 800b420:	2300      	movs	r3, #0
 800b422:	2200      	movs	r2, #0
 800b424:	f7fe f924 	bl	8009670 <xQueueGenericSend>
 800b428:	6278      	str	r0, [r7, #36]	; 0x24
 800b42a:	e008      	b.n	800b43e <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800b42c:	4b06      	ldr	r3, [pc, #24]	; (800b448 <xTimerGenericCommand+0x94>)
 800b42e:	6818      	ldr	r0, [r3, #0]
 800b430:	f107 0110 	add.w	r1, r7, #16
 800b434:	2300      	movs	r3, #0
 800b436:	683a      	ldr	r2, [r7, #0]
 800b438:	f7fe fa14 	bl	8009864 <xQueueGenericSendFromISR>
 800b43c:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800b43e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800b440:	4618      	mov	r0, r3
 800b442:	3728      	adds	r7, #40	; 0x28
 800b444:	46bd      	mov	sp, r7
 800b446:	bd80      	pop	{r7, pc}
 800b448:	20000e00 	.word	0x20000e00

0800b44c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800b44c:	b580      	push	{r7, lr}
 800b44e:	b088      	sub	sp, #32
 800b450:	af02      	add	r7, sp, #8
 800b452:	6078      	str	r0, [r7, #4]
 800b454:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800b456:	4b1c      	ldr	r3, [pc, #112]	; (800b4c8 <prvProcessExpiredTimer+0x7c>)
 800b458:	681b      	ldr	r3, [r3, #0]
 800b45a:	68db      	ldr	r3, [r3, #12]
 800b45c:	68db      	ldr	r3, [r3, #12]
 800b45e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b460:	697b      	ldr	r3, [r7, #20]
 800b462:	3304      	adds	r3, #4
 800b464:	4618      	mov	r0, r3
 800b466:	f7fd fe83 	bl	8009170 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800b46a:	697b      	ldr	r3, [r7, #20]
 800b46c:	69db      	ldr	r3, [r3, #28]
 800b46e:	2b01      	cmp	r3, #1
 800b470:	d121      	bne.n	800b4b6 <prvProcessExpiredTimer+0x6a>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800b472:	697b      	ldr	r3, [r7, #20]
 800b474:	699a      	ldr	r2, [r3, #24]
 800b476:	687b      	ldr	r3, [r7, #4]
 800b478:	18d1      	adds	r1, r2, r3
 800b47a:	687b      	ldr	r3, [r7, #4]
 800b47c:	683a      	ldr	r2, [r7, #0]
 800b47e:	6978      	ldr	r0, [r7, #20]
 800b480:	f000 f8c8 	bl	800b614 <prvInsertTimerInActiveList>
 800b484:	4603      	mov	r3, r0
 800b486:	2b00      	cmp	r3, #0
 800b488:	d015      	beq.n	800b4b6 <prvProcessExpiredTimer+0x6a>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800b48a:	2300      	movs	r3, #0
 800b48c:	9300      	str	r3, [sp, #0]
 800b48e:	2300      	movs	r3, #0
 800b490:	687a      	ldr	r2, [r7, #4]
 800b492:	2100      	movs	r1, #0
 800b494:	6978      	ldr	r0, [r7, #20]
 800b496:	f7ff ff8d 	bl	800b3b4 <xTimerGenericCommand>
 800b49a:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800b49c:	693b      	ldr	r3, [r7, #16]
 800b49e:	2b00      	cmp	r3, #0
 800b4a0:	d109      	bne.n	800b4b6 <prvProcessExpiredTimer+0x6a>
 800b4a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b4a6:	f383 8811 	msr	BASEPRI, r3
 800b4aa:	f3bf 8f6f 	isb	sy
 800b4ae:	f3bf 8f4f 	dsb	sy
 800b4b2:	60fb      	str	r3, [r7, #12]
 800b4b4:	e7fe      	b.n	800b4b4 <prvProcessExpiredTimer+0x68>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b4b6:	697b      	ldr	r3, [r7, #20]
 800b4b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b4ba:	6978      	ldr	r0, [r7, #20]
 800b4bc:	4798      	blx	r3
}
 800b4be:	bf00      	nop
 800b4c0:	3718      	adds	r7, #24
 800b4c2:	46bd      	mov	sp, r7
 800b4c4:	bd80      	pop	{r7, pc}
 800b4c6:	bf00      	nop
 800b4c8:	20000df8 	.word	0x20000df8

0800b4cc <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 800b4cc:	b580      	push	{r7, lr}
 800b4ce:	b084      	sub	sp, #16
 800b4d0:	af00      	add	r7, sp, #0
 800b4d2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800b4d4:	f107 0308 	add.w	r3, r7, #8
 800b4d8:	4618      	mov	r0, r3
 800b4da:	f000 f857 	bl	800b58c <prvGetNextExpireTime>
 800b4de:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800b4e0:	68bb      	ldr	r3, [r7, #8]
 800b4e2:	4619      	mov	r1, r3
 800b4e4:	68f8      	ldr	r0, [r7, #12]
 800b4e6:	f000 f803 	bl	800b4f0 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800b4ea:	f000 f8d5 	bl	800b698 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800b4ee:	e7f1      	b.n	800b4d4 <prvTimerTask+0x8>

0800b4f0 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800b4f0:	b580      	push	{r7, lr}
 800b4f2:	b084      	sub	sp, #16
 800b4f4:	af00      	add	r7, sp, #0
 800b4f6:	6078      	str	r0, [r7, #4]
 800b4f8:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800b4fa:	f7ff f92f 	bl	800a75c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800b4fe:	f107 0308 	add.w	r3, r7, #8
 800b502:	4618      	mov	r0, r3
 800b504:	f000 f866 	bl	800b5d4 <prvSampleTimeNow>
 800b508:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800b50a:	68bb      	ldr	r3, [r7, #8]
 800b50c:	2b00      	cmp	r3, #0
 800b50e:	d130      	bne.n	800b572 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800b510:	683b      	ldr	r3, [r7, #0]
 800b512:	2b00      	cmp	r3, #0
 800b514:	d10a      	bne.n	800b52c <prvProcessTimerOrBlockTask+0x3c>
 800b516:	687a      	ldr	r2, [r7, #4]
 800b518:	68fb      	ldr	r3, [r7, #12]
 800b51a:	429a      	cmp	r2, r3
 800b51c:	d806      	bhi.n	800b52c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800b51e:	f7ff f92b 	bl	800a778 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800b522:	68f9      	ldr	r1, [r7, #12]
 800b524:	6878      	ldr	r0, [r7, #4]
 800b526:	f7ff ff91 	bl	800b44c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800b52a:	e024      	b.n	800b576 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800b52c:	683b      	ldr	r3, [r7, #0]
 800b52e:	2b00      	cmp	r3, #0
 800b530:	d008      	beq.n	800b544 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800b532:	4b13      	ldr	r3, [pc, #76]	; (800b580 <prvProcessTimerOrBlockTask+0x90>)
 800b534:	681b      	ldr	r3, [r3, #0]
 800b536:	681b      	ldr	r3, [r3, #0]
 800b538:	2b00      	cmp	r3, #0
 800b53a:	bf0c      	ite	eq
 800b53c:	2301      	moveq	r3, #1
 800b53e:	2300      	movne	r3, #0
 800b540:	b2db      	uxtb	r3, r3
 800b542:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800b544:	4b0f      	ldr	r3, [pc, #60]	; (800b584 <prvProcessTimerOrBlockTask+0x94>)
 800b546:	6818      	ldr	r0, [r3, #0]
 800b548:	687a      	ldr	r2, [r7, #4]
 800b54a:	68fb      	ldr	r3, [r7, #12]
 800b54c:	1ad3      	subs	r3, r2, r3
 800b54e:	683a      	ldr	r2, [r7, #0]
 800b550:	4619      	mov	r1, r3
 800b552:	f7fe fea3 	bl	800a29c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800b556:	f7ff f90f 	bl	800a778 <xTaskResumeAll>
 800b55a:	4603      	mov	r3, r0
 800b55c:	2b00      	cmp	r3, #0
 800b55e:	d10a      	bne.n	800b576 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800b560:	4b09      	ldr	r3, [pc, #36]	; (800b588 <prvProcessTimerOrBlockTask+0x98>)
 800b562:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b566:	601a      	str	r2, [r3, #0]
 800b568:	f3bf 8f4f 	dsb	sy
 800b56c:	f3bf 8f6f 	isb	sy
}
 800b570:	e001      	b.n	800b576 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800b572:	f7ff f901 	bl	800a778 <xTaskResumeAll>
}
 800b576:	bf00      	nop
 800b578:	3710      	adds	r7, #16
 800b57a:	46bd      	mov	sp, r7
 800b57c:	bd80      	pop	{r7, pc}
 800b57e:	bf00      	nop
 800b580:	20000dfc 	.word	0x20000dfc
 800b584:	20000e00 	.word	0x20000e00
 800b588:	e000ed04 	.word	0xe000ed04

0800b58c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800b58c:	b480      	push	{r7}
 800b58e:	b085      	sub	sp, #20
 800b590:	af00      	add	r7, sp, #0
 800b592:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800b594:	4b0e      	ldr	r3, [pc, #56]	; (800b5d0 <prvGetNextExpireTime+0x44>)
 800b596:	681b      	ldr	r3, [r3, #0]
 800b598:	681b      	ldr	r3, [r3, #0]
 800b59a:	2b00      	cmp	r3, #0
 800b59c:	bf0c      	ite	eq
 800b59e:	2301      	moveq	r3, #1
 800b5a0:	2300      	movne	r3, #0
 800b5a2:	b2db      	uxtb	r3, r3
 800b5a4:	461a      	mov	r2, r3
 800b5a6:	687b      	ldr	r3, [r7, #4]
 800b5a8:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800b5aa:	687b      	ldr	r3, [r7, #4]
 800b5ac:	681b      	ldr	r3, [r3, #0]
 800b5ae:	2b00      	cmp	r3, #0
 800b5b0:	d105      	bne.n	800b5be <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800b5b2:	4b07      	ldr	r3, [pc, #28]	; (800b5d0 <prvGetNextExpireTime+0x44>)
 800b5b4:	681b      	ldr	r3, [r3, #0]
 800b5b6:	68db      	ldr	r3, [r3, #12]
 800b5b8:	681b      	ldr	r3, [r3, #0]
 800b5ba:	60fb      	str	r3, [r7, #12]
 800b5bc:	e001      	b.n	800b5c2 <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800b5be:	2300      	movs	r3, #0
 800b5c0:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800b5c2:	68fb      	ldr	r3, [r7, #12]
}
 800b5c4:	4618      	mov	r0, r3
 800b5c6:	3714      	adds	r7, #20
 800b5c8:	46bd      	mov	sp, r7
 800b5ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5ce:	4770      	bx	lr
 800b5d0:	20000df8 	.word	0x20000df8

0800b5d4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800b5d4:	b580      	push	{r7, lr}
 800b5d6:	b084      	sub	sp, #16
 800b5d8:	af00      	add	r7, sp, #0
 800b5da:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800b5dc:	f7ff f968 	bl	800a8b0 <xTaskGetTickCount>
 800b5e0:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800b5e2:	4b0b      	ldr	r3, [pc, #44]	; (800b610 <prvSampleTimeNow+0x3c>)
 800b5e4:	681b      	ldr	r3, [r3, #0]
 800b5e6:	68fa      	ldr	r2, [r7, #12]
 800b5e8:	429a      	cmp	r2, r3
 800b5ea:	d205      	bcs.n	800b5f8 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800b5ec:	f000 f904 	bl	800b7f8 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800b5f0:	687b      	ldr	r3, [r7, #4]
 800b5f2:	2201      	movs	r2, #1
 800b5f4:	601a      	str	r2, [r3, #0]
 800b5f6:	e002      	b.n	800b5fe <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800b5f8:	687b      	ldr	r3, [r7, #4]
 800b5fa:	2200      	movs	r2, #0
 800b5fc:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800b5fe:	4a04      	ldr	r2, [pc, #16]	; (800b610 <prvSampleTimeNow+0x3c>)
 800b600:	68fb      	ldr	r3, [r7, #12]
 800b602:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800b604:	68fb      	ldr	r3, [r7, #12]
}
 800b606:	4618      	mov	r0, r3
 800b608:	3710      	adds	r7, #16
 800b60a:	46bd      	mov	sp, r7
 800b60c:	bd80      	pop	{r7, pc}
 800b60e:	bf00      	nop
 800b610:	20000e08 	.word	0x20000e08

0800b614 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800b614:	b580      	push	{r7, lr}
 800b616:	b086      	sub	sp, #24
 800b618:	af00      	add	r7, sp, #0
 800b61a:	60f8      	str	r0, [r7, #12]
 800b61c:	60b9      	str	r1, [r7, #8]
 800b61e:	607a      	str	r2, [r7, #4]
 800b620:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800b622:	2300      	movs	r3, #0
 800b624:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800b626:	68fb      	ldr	r3, [r7, #12]
 800b628:	68ba      	ldr	r2, [r7, #8]
 800b62a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800b62c:	68fb      	ldr	r3, [r7, #12]
 800b62e:	68fa      	ldr	r2, [r7, #12]
 800b630:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800b632:	68ba      	ldr	r2, [r7, #8]
 800b634:	687b      	ldr	r3, [r7, #4]
 800b636:	429a      	cmp	r2, r3
 800b638:	d812      	bhi.n	800b660 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b63a:	687a      	ldr	r2, [r7, #4]
 800b63c:	683b      	ldr	r3, [r7, #0]
 800b63e:	1ad2      	subs	r2, r2, r3
 800b640:	68fb      	ldr	r3, [r7, #12]
 800b642:	699b      	ldr	r3, [r3, #24]
 800b644:	429a      	cmp	r2, r3
 800b646:	d302      	bcc.n	800b64e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800b648:	2301      	movs	r3, #1
 800b64a:	617b      	str	r3, [r7, #20]
 800b64c:	e01b      	b.n	800b686 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800b64e:	4b10      	ldr	r3, [pc, #64]	; (800b690 <prvInsertTimerInActiveList+0x7c>)
 800b650:	681a      	ldr	r2, [r3, #0]
 800b652:	68fb      	ldr	r3, [r7, #12]
 800b654:	3304      	adds	r3, #4
 800b656:	4619      	mov	r1, r3
 800b658:	4610      	mov	r0, r2
 800b65a:	f7fd fd50 	bl	80090fe <vListInsert>
 800b65e:	e012      	b.n	800b686 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800b660:	687a      	ldr	r2, [r7, #4]
 800b662:	683b      	ldr	r3, [r7, #0]
 800b664:	429a      	cmp	r2, r3
 800b666:	d206      	bcs.n	800b676 <prvInsertTimerInActiveList+0x62>
 800b668:	68ba      	ldr	r2, [r7, #8]
 800b66a:	683b      	ldr	r3, [r7, #0]
 800b66c:	429a      	cmp	r2, r3
 800b66e:	d302      	bcc.n	800b676 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800b670:	2301      	movs	r3, #1
 800b672:	617b      	str	r3, [r7, #20]
 800b674:	e007      	b.n	800b686 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800b676:	4b07      	ldr	r3, [pc, #28]	; (800b694 <prvInsertTimerInActiveList+0x80>)
 800b678:	681a      	ldr	r2, [r3, #0]
 800b67a:	68fb      	ldr	r3, [r7, #12]
 800b67c:	3304      	adds	r3, #4
 800b67e:	4619      	mov	r1, r3
 800b680:	4610      	mov	r0, r2
 800b682:	f7fd fd3c 	bl	80090fe <vListInsert>
		}
	}

	return xProcessTimerNow;
 800b686:	697b      	ldr	r3, [r7, #20]
}
 800b688:	4618      	mov	r0, r3
 800b68a:	3718      	adds	r7, #24
 800b68c:	46bd      	mov	sp, r7
 800b68e:	bd80      	pop	{r7, pc}
 800b690:	20000dfc 	.word	0x20000dfc
 800b694:	20000df8 	.word	0x20000df8

0800b698 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800b698:	b580      	push	{r7, lr}
 800b69a:	b08e      	sub	sp, #56	; 0x38
 800b69c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800b69e:	e099      	b.n	800b7d4 <prvProcessReceivedCommands+0x13c>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800b6a0:	687b      	ldr	r3, [r7, #4]
 800b6a2:	2b00      	cmp	r3, #0
 800b6a4:	da17      	bge.n	800b6d6 <prvProcessReceivedCommands+0x3e>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800b6a6:	1d3b      	adds	r3, r7, #4
 800b6a8:	3304      	adds	r3, #4
 800b6aa:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800b6ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b6ae:	2b00      	cmp	r3, #0
 800b6b0:	d109      	bne.n	800b6c6 <prvProcessReceivedCommands+0x2e>
 800b6b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b6b6:	f383 8811 	msr	BASEPRI, r3
 800b6ba:	f3bf 8f6f 	isb	sy
 800b6be:	f3bf 8f4f 	dsb	sy
 800b6c2:	61fb      	str	r3, [r7, #28]
 800b6c4:	e7fe      	b.n	800b6c4 <prvProcessReceivedCommands+0x2c>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800b6c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b6c8:	681b      	ldr	r3, [r3, #0]
 800b6ca:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b6cc:	6850      	ldr	r0, [r2, #4]
 800b6ce:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b6d0:	6892      	ldr	r2, [r2, #8]
 800b6d2:	4611      	mov	r1, r2
 800b6d4:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800b6d6:	687b      	ldr	r3, [r7, #4]
 800b6d8:	2b00      	cmp	r3, #0
 800b6da:	db7a      	blt.n	800b7d2 <prvProcessReceivedCommands+0x13a>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800b6dc:	68fb      	ldr	r3, [r7, #12]
 800b6de:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800b6e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b6e2:	695b      	ldr	r3, [r3, #20]
 800b6e4:	2b00      	cmp	r3, #0
 800b6e6:	d004      	beq.n	800b6f2 <prvProcessReceivedCommands+0x5a>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b6e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b6ea:	3304      	adds	r3, #4
 800b6ec:	4618      	mov	r0, r3
 800b6ee:	f7fd fd3f 	bl	8009170 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800b6f2:	463b      	mov	r3, r7
 800b6f4:	4618      	mov	r0, r3
 800b6f6:	f7ff ff6d 	bl	800b5d4 <prvSampleTimeNow>
 800b6fa:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800b6fc:	687b      	ldr	r3, [r7, #4]
 800b6fe:	2b09      	cmp	r3, #9
 800b700:	d868      	bhi.n	800b7d4 <prvProcessReceivedCommands+0x13c>
 800b702:	a201      	add	r2, pc, #4	; (adr r2, 800b708 <prvProcessReceivedCommands+0x70>)
 800b704:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b708:	0800b731 	.word	0x0800b731
 800b70c:	0800b731 	.word	0x0800b731
 800b710:	0800b731 	.word	0x0800b731
 800b714:	0800b7d5 	.word	0x0800b7d5
 800b718:	0800b78b 	.word	0x0800b78b
 800b71c:	0800b7c1 	.word	0x0800b7c1
 800b720:	0800b731 	.word	0x0800b731
 800b724:	0800b731 	.word	0x0800b731
 800b728:	0800b7d5 	.word	0x0800b7d5
 800b72c:	0800b78b 	.word	0x0800b78b
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800b730:	68ba      	ldr	r2, [r7, #8]
 800b732:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b734:	699b      	ldr	r3, [r3, #24]
 800b736:	18d1      	adds	r1, r2, r3
 800b738:	68bb      	ldr	r3, [r7, #8]
 800b73a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b73c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b73e:	f7ff ff69 	bl	800b614 <prvInsertTimerInActiveList>
 800b742:	4603      	mov	r3, r0
 800b744:	2b00      	cmp	r3, #0
 800b746:	d045      	beq.n	800b7d4 <prvProcessReceivedCommands+0x13c>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b748:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b74a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b74c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b74e:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800b750:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b752:	69db      	ldr	r3, [r3, #28]
 800b754:	2b01      	cmp	r3, #1
 800b756:	d13d      	bne.n	800b7d4 <prvProcessReceivedCommands+0x13c>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800b758:	68ba      	ldr	r2, [r7, #8]
 800b75a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b75c:	699b      	ldr	r3, [r3, #24]
 800b75e:	441a      	add	r2, r3
 800b760:	2300      	movs	r3, #0
 800b762:	9300      	str	r3, [sp, #0]
 800b764:	2300      	movs	r3, #0
 800b766:	2100      	movs	r1, #0
 800b768:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b76a:	f7ff fe23 	bl	800b3b4 <xTimerGenericCommand>
 800b76e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800b770:	6a3b      	ldr	r3, [r7, #32]
 800b772:	2b00      	cmp	r3, #0
 800b774:	d12e      	bne.n	800b7d4 <prvProcessReceivedCommands+0x13c>
 800b776:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b77a:	f383 8811 	msr	BASEPRI, r3
 800b77e:	f3bf 8f6f 	isb	sy
 800b782:	f3bf 8f4f 	dsb	sy
 800b786:	61bb      	str	r3, [r7, #24]
 800b788:	e7fe      	b.n	800b788 <prvProcessReceivedCommands+0xf0>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800b78a:	68ba      	ldr	r2, [r7, #8]
 800b78c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b78e:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800b790:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b792:	699b      	ldr	r3, [r3, #24]
 800b794:	2b00      	cmp	r3, #0
 800b796:	d109      	bne.n	800b7ac <prvProcessReceivedCommands+0x114>
 800b798:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b79c:	f383 8811 	msr	BASEPRI, r3
 800b7a0:	f3bf 8f6f 	isb	sy
 800b7a4:	f3bf 8f4f 	dsb	sy
 800b7a8:	617b      	str	r3, [r7, #20]
 800b7aa:	e7fe      	b.n	800b7aa <prvProcessReceivedCommands+0x112>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800b7ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b7ae:	699a      	ldr	r2, [r3, #24]
 800b7b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b7b2:	18d1      	adds	r1, r2, r3
 800b7b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b7b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b7b8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b7ba:	f7ff ff2b 	bl	800b614 <prvInsertTimerInActiveList>
					break;
 800b7be:	e009      	b.n	800b7d4 <prvProcessReceivedCommands+0x13c>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800b7c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b7c2:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800b7c6:	2b00      	cmp	r3, #0
 800b7c8:	d104      	bne.n	800b7d4 <prvProcessReceivedCommands+0x13c>
						{
							vPortFree( pxTimer );
 800b7ca:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b7cc:	f000 fbba 	bl	800bf44 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800b7d0:	e000      	b.n	800b7d4 <prvProcessReceivedCommands+0x13c>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800b7d2:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800b7d4:	4b07      	ldr	r3, [pc, #28]	; (800b7f4 <prvProcessReceivedCommands+0x15c>)
 800b7d6:	681b      	ldr	r3, [r3, #0]
 800b7d8:	1d39      	adds	r1, r7, #4
 800b7da:	2200      	movs	r2, #0
 800b7dc:	4618      	mov	r0, r3
 800b7de:	f7fe f95f 	bl	8009aa0 <xQueueReceive>
 800b7e2:	4603      	mov	r3, r0
 800b7e4:	2b00      	cmp	r3, #0
 800b7e6:	f47f af5b 	bne.w	800b6a0 <prvProcessReceivedCommands+0x8>
	}
}
 800b7ea:	bf00      	nop
 800b7ec:	3730      	adds	r7, #48	; 0x30
 800b7ee:	46bd      	mov	sp, r7
 800b7f0:	bd80      	pop	{r7, pc}
 800b7f2:	bf00      	nop
 800b7f4:	20000e00 	.word	0x20000e00

0800b7f8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800b7f8:	b580      	push	{r7, lr}
 800b7fa:	b088      	sub	sp, #32
 800b7fc:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800b7fe:	e044      	b.n	800b88a <prvSwitchTimerLists+0x92>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800b800:	4b2b      	ldr	r3, [pc, #172]	; (800b8b0 <prvSwitchTimerLists+0xb8>)
 800b802:	681b      	ldr	r3, [r3, #0]
 800b804:	68db      	ldr	r3, [r3, #12]
 800b806:	681b      	ldr	r3, [r3, #0]
 800b808:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800b80a:	4b29      	ldr	r3, [pc, #164]	; (800b8b0 <prvSwitchTimerLists+0xb8>)
 800b80c:	681b      	ldr	r3, [r3, #0]
 800b80e:	68db      	ldr	r3, [r3, #12]
 800b810:	68db      	ldr	r3, [r3, #12]
 800b812:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b814:	68fb      	ldr	r3, [r7, #12]
 800b816:	3304      	adds	r3, #4
 800b818:	4618      	mov	r0, r3
 800b81a:	f7fd fca9 	bl	8009170 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b81e:	68fb      	ldr	r3, [r7, #12]
 800b820:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b822:	68f8      	ldr	r0, [r7, #12]
 800b824:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800b826:	68fb      	ldr	r3, [r7, #12]
 800b828:	69db      	ldr	r3, [r3, #28]
 800b82a:	2b01      	cmp	r3, #1
 800b82c:	d12d      	bne.n	800b88a <prvSwitchTimerLists+0x92>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800b82e:	68fb      	ldr	r3, [r7, #12]
 800b830:	699b      	ldr	r3, [r3, #24]
 800b832:	693a      	ldr	r2, [r7, #16]
 800b834:	4413      	add	r3, r2
 800b836:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800b838:	68ba      	ldr	r2, [r7, #8]
 800b83a:	693b      	ldr	r3, [r7, #16]
 800b83c:	429a      	cmp	r2, r3
 800b83e:	d90e      	bls.n	800b85e <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800b840:	68fb      	ldr	r3, [r7, #12]
 800b842:	68ba      	ldr	r2, [r7, #8]
 800b844:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800b846:	68fb      	ldr	r3, [r7, #12]
 800b848:	68fa      	ldr	r2, [r7, #12]
 800b84a:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800b84c:	4b18      	ldr	r3, [pc, #96]	; (800b8b0 <prvSwitchTimerLists+0xb8>)
 800b84e:	681a      	ldr	r2, [r3, #0]
 800b850:	68fb      	ldr	r3, [r7, #12]
 800b852:	3304      	adds	r3, #4
 800b854:	4619      	mov	r1, r3
 800b856:	4610      	mov	r0, r2
 800b858:	f7fd fc51 	bl	80090fe <vListInsert>
 800b85c:	e015      	b.n	800b88a <prvSwitchTimerLists+0x92>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800b85e:	2300      	movs	r3, #0
 800b860:	9300      	str	r3, [sp, #0]
 800b862:	2300      	movs	r3, #0
 800b864:	693a      	ldr	r2, [r7, #16]
 800b866:	2100      	movs	r1, #0
 800b868:	68f8      	ldr	r0, [r7, #12]
 800b86a:	f7ff fda3 	bl	800b3b4 <xTimerGenericCommand>
 800b86e:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800b870:	687b      	ldr	r3, [r7, #4]
 800b872:	2b00      	cmp	r3, #0
 800b874:	d109      	bne.n	800b88a <prvSwitchTimerLists+0x92>
 800b876:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b87a:	f383 8811 	msr	BASEPRI, r3
 800b87e:	f3bf 8f6f 	isb	sy
 800b882:	f3bf 8f4f 	dsb	sy
 800b886:	603b      	str	r3, [r7, #0]
 800b888:	e7fe      	b.n	800b888 <prvSwitchTimerLists+0x90>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800b88a:	4b09      	ldr	r3, [pc, #36]	; (800b8b0 <prvSwitchTimerLists+0xb8>)
 800b88c:	681b      	ldr	r3, [r3, #0]
 800b88e:	681b      	ldr	r3, [r3, #0]
 800b890:	2b00      	cmp	r3, #0
 800b892:	d1b5      	bne.n	800b800 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800b894:	4b06      	ldr	r3, [pc, #24]	; (800b8b0 <prvSwitchTimerLists+0xb8>)
 800b896:	681b      	ldr	r3, [r3, #0]
 800b898:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800b89a:	4b06      	ldr	r3, [pc, #24]	; (800b8b4 <prvSwitchTimerLists+0xbc>)
 800b89c:	681b      	ldr	r3, [r3, #0]
 800b89e:	4a04      	ldr	r2, [pc, #16]	; (800b8b0 <prvSwitchTimerLists+0xb8>)
 800b8a0:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800b8a2:	4a04      	ldr	r2, [pc, #16]	; (800b8b4 <prvSwitchTimerLists+0xbc>)
 800b8a4:	697b      	ldr	r3, [r7, #20]
 800b8a6:	6013      	str	r3, [r2, #0]
}
 800b8a8:	bf00      	nop
 800b8aa:	3718      	adds	r7, #24
 800b8ac:	46bd      	mov	sp, r7
 800b8ae:	bd80      	pop	{r7, pc}
 800b8b0:	20000df8 	.word	0x20000df8
 800b8b4:	20000dfc 	.word	0x20000dfc

0800b8b8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800b8b8:	b580      	push	{r7, lr}
 800b8ba:	b082      	sub	sp, #8
 800b8bc:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800b8be:	f000 f965 	bl	800bb8c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800b8c2:	4b15      	ldr	r3, [pc, #84]	; (800b918 <prvCheckForValidListAndQueue+0x60>)
 800b8c4:	681b      	ldr	r3, [r3, #0]
 800b8c6:	2b00      	cmp	r3, #0
 800b8c8:	d120      	bne.n	800b90c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800b8ca:	4814      	ldr	r0, [pc, #80]	; (800b91c <prvCheckForValidListAndQueue+0x64>)
 800b8cc:	f7fd fbc6 	bl	800905c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800b8d0:	4813      	ldr	r0, [pc, #76]	; (800b920 <prvCheckForValidListAndQueue+0x68>)
 800b8d2:	f7fd fbc3 	bl	800905c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800b8d6:	4b13      	ldr	r3, [pc, #76]	; (800b924 <prvCheckForValidListAndQueue+0x6c>)
 800b8d8:	4a10      	ldr	r2, [pc, #64]	; (800b91c <prvCheckForValidListAndQueue+0x64>)
 800b8da:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800b8dc:	4b12      	ldr	r3, [pc, #72]	; (800b928 <prvCheckForValidListAndQueue+0x70>)
 800b8de:	4a10      	ldr	r2, [pc, #64]	; (800b920 <prvCheckForValidListAndQueue+0x68>)
 800b8e0:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800b8e2:	2300      	movs	r3, #0
 800b8e4:	9300      	str	r3, [sp, #0]
 800b8e6:	4b11      	ldr	r3, [pc, #68]	; (800b92c <prvCheckForValidListAndQueue+0x74>)
 800b8e8:	4a11      	ldr	r2, [pc, #68]	; (800b930 <prvCheckForValidListAndQueue+0x78>)
 800b8ea:	2110      	movs	r1, #16
 800b8ec:	200a      	movs	r0, #10
 800b8ee:	f7fd fcd1 	bl	8009294 <xQueueGenericCreateStatic>
 800b8f2:	4602      	mov	r2, r0
 800b8f4:	4b08      	ldr	r3, [pc, #32]	; (800b918 <prvCheckForValidListAndQueue+0x60>)
 800b8f6:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800b8f8:	4b07      	ldr	r3, [pc, #28]	; (800b918 <prvCheckForValidListAndQueue+0x60>)
 800b8fa:	681b      	ldr	r3, [r3, #0]
 800b8fc:	2b00      	cmp	r3, #0
 800b8fe:	d005      	beq.n	800b90c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800b900:	4b05      	ldr	r3, [pc, #20]	; (800b918 <prvCheckForValidListAndQueue+0x60>)
 800b902:	681b      	ldr	r3, [r3, #0]
 800b904:	490b      	ldr	r1, [pc, #44]	; (800b934 <prvCheckForValidListAndQueue+0x7c>)
 800b906:	4618      	mov	r0, r3
 800b908:	f7fe fc76 	bl	800a1f8 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800b90c:	f000 f96c 	bl	800bbe8 <vPortExitCritical>
}
 800b910:	bf00      	nop
 800b912:	46bd      	mov	sp, r7
 800b914:	bd80      	pop	{r7, pc}
 800b916:	bf00      	nop
 800b918:	20000e00 	.word	0x20000e00
 800b91c:	20000dd0 	.word	0x20000dd0
 800b920:	20000de4 	.word	0x20000de4
 800b924:	20000df8 	.word	0x20000df8
 800b928:	20000dfc 	.word	0x20000dfc
 800b92c:	20000eac 	.word	0x20000eac
 800b930:	20000e0c 	.word	0x20000e0c
 800b934:	08018aac 	.word	0x08018aac

0800b938 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800b938:	b480      	push	{r7}
 800b93a:	b085      	sub	sp, #20
 800b93c:	af00      	add	r7, sp, #0
 800b93e:	60f8      	str	r0, [r7, #12]
 800b940:	60b9      	str	r1, [r7, #8]
 800b942:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800b944:	68fb      	ldr	r3, [r7, #12]
 800b946:	3b04      	subs	r3, #4
 800b948:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800b94a:	68fb      	ldr	r3, [r7, #12]
 800b94c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800b950:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800b952:	68fb      	ldr	r3, [r7, #12]
 800b954:	3b04      	subs	r3, #4
 800b956:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800b958:	68bb      	ldr	r3, [r7, #8]
 800b95a:	f023 0201 	bic.w	r2, r3, #1
 800b95e:	68fb      	ldr	r3, [r7, #12]
 800b960:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800b962:	68fb      	ldr	r3, [r7, #12]
 800b964:	3b04      	subs	r3, #4
 800b966:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800b968:	4a0c      	ldr	r2, [pc, #48]	; (800b99c <pxPortInitialiseStack+0x64>)
 800b96a:	68fb      	ldr	r3, [r7, #12]
 800b96c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800b96e:	68fb      	ldr	r3, [r7, #12]
 800b970:	3b14      	subs	r3, #20
 800b972:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800b974:	687a      	ldr	r2, [r7, #4]
 800b976:	68fb      	ldr	r3, [r7, #12]
 800b978:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800b97a:	68fb      	ldr	r3, [r7, #12]
 800b97c:	3b04      	subs	r3, #4
 800b97e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800b980:	68fb      	ldr	r3, [r7, #12]
 800b982:	f06f 0202 	mvn.w	r2, #2
 800b986:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800b988:	68fb      	ldr	r3, [r7, #12]
 800b98a:	3b20      	subs	r3, #32
 800b98c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800b98e:	68fb      	ldr	r3, [r7, #12]
}
 800b990:	4618      	mov	r0, r3
 800b992:	3714      	adds	r7, #20
 800b994:	46bd      	mov	sp, r7
 800b996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b99a:	4770      	bx	lr
 800b99c:	0800b9a1 	.word	0x0800b9a1

0800b9a0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800b9a0:	b480      	push	{r7}
 800b9a2:	b085      	sub	sp, #20
 800b9a4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800b9a6:	2300      	movs	r3, #0
 800b9a8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800b9aa:	4b11      	ldr	r3, [pc, #68]	; (800b9f0 <prvTaskExitError+0x50>)
 800b9ac:	681b      	ldr	r3, [r3, #0]
 800b9ae:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b9b2:	d009      	beq.n	800b9c8 <prvTaskExitError+0x28>
 800b9b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b9b8:	f383 8811 	msr	BASEPRI, r3
 800b9bc:	f3bf 8f6f 	isb	sy
 800b9c0:	f3bf 8f4f 	dsb	sy
 800b9c4:	60fb      	str	r3, [r7, #12]
 800b9c6:	e7fe      	b.n	800b9c6 <prvTaskExitError+0x26>
 800b9c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b9cc:	f383 8811 	msr	BASEPRI, r3
 800b9d0:	f3bf 8f6f 	isb	sy
 800b9d4:	f3bf 8f4f 	dsb	sy
 800b9d8:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800b9da:	bf00      	nop
 800b9dc:	687b      	ldr	r3, [r7, #4]
 800b9de:	2b00      	cmp	r3, #0
 800b9e0:	d0fc      	beq.n	800b9dc <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800b9e2:	bf00      	nop
 800b9e4:	3714      	adds	r7, #20
 800b9e6:	46bd      	mov	sp, r7
 800b9e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9ec:	4770      	bx	lr
 800b9ee:	bf00      	nop
 800b9f0:	20000118 	.word	0x20000118
	...

0800ba00 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800ba00:	4b07      	ldr	r3, [pc, #28]	; (800ba20 <pxCurrentTCBConst2>)
 800ba02:	6819      	ldr	r1, [r3, #0]
 800ba04:	6808      	ldr	r0, [r1, #0]
 800ba06:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ba0a:	f380 8809 	msr	PSP, r0
 800ba0e:	f3bf 8f6f 	isb	sy
 800ba12:	f04f 0000 	mov.w	r0, #0
 800ba16:	f380 8811 	msr	BASEPRI, r0
 800ba1a:	4770      	bx	lr
 800ba1c:	f3af 8000 	nop.w

0800ba20 <pxCurrentTCBConst2>:
 800ba20:	200008d0 	.word	0x200008d0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800ba24:	bf00      	nop
 800ba26:	bf00      	nop

0800ba28 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800ba28:	4808      	ldr	r0, [pc, #32]	; (800ba4c <prvPortStartFirstTask+0x24>)
 800ba2a:	6800      	ldr	r0, [r0, #0]
 800ba2c:	6800      	ldr	r0, [r0, #0]
 800ba2e:	f380 8808 	msr	MSP, r0
 800ba32:	f04f 0000 	mov.w	r0, #0
 800ba36:	f380 8814 	msr	CONTROL, r0
 800ba3a:	b662      	cpsie	i
 800ba3c:	b661      	cpsie	f
 800ba3e:	f3bf 8f4f 	dsb	sy
 800ba42:	f3bf 8f6f 	isb	sy
 800ba46:	df00      	svc	0
 800ba48:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800ba4a:	bf00      	nop
 800ba4c:	e000ed08 	.word	0xe000ed08

0800ba50 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800ba50:	b580      	push	{r7, lr}
 800ba52:	b086      	sub	sp, #24
 800ba54:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800ba56:	4b44      	ldr	r3, [pc, #272]	; (800bb68 <xPortStartScheduler+0x118>)
 800ba58:	681b      	ldr	r3, [r3, #0]
 800ba5a:	4a44      	ldr	r2, [pc, #272]	; (800bb6c <xPortStartScheduler+0x11c>)
 800ba5c:	4293      	cmp	r3, r2
 800ba5e:	d109      	bne.n	800ba74 <xPortStartScheduler+0x24>
 800ba60:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba64:	f383 8811 	msr	BASEPRI, r3
 800ba68:	f3bf 8f6f 	isb	sy
 800ba6c:	f3bf 8f4f 	dsb	sy
 800ba70:	613b      	str	r3, [r7, #16]
 800ba72:	e7fe      	b.n	800ba72 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800ba74:	4b3c      	ldr	r3, [pc, #240]	; (800bb68 <xPortStartScheduler+0x118>)
 800ba76:	681b      	ldr	r3, [r3, #0]
 800ba78:	4a3d      	ldr	r2, [pc, #244]	; (800bb70 <xPortStartScheduler+0x120>)
 800ba7a:	4293      	cmp	r3, r2
 800ba7c:	d109      	bne.n	800ba92 <xPortStartScheduler+0x42>
 800ba7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba82:	f383 8811 	msr	BASEPRI, r3
 800ba86:	f3bf 8f6f 	isb	sy
 800ba8a:	f3bf 8f4f 	dsb	sy
 800ba8e:	60fb      	str	r3, [r7, #12]
 800ba90:	e7fe      	b.n	800ba90 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800ba92:	4b38      	ldr	r3, [pc, #224]	; (800bb74 <xPortStartScheduler+0x124>)
 800ba94:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800ba96:	697b      	ldr	r3, [r7, #20]
 800ba98:	781b      	ldrb	r3, [r3, #0]
 800ba9a:	b2db      	uxtb	r3, r3
 800ba9c:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800ba9e:	697b      	ldr	r3, [r7, #20]
 800baa0:	22ff      	movs	r2, #255	; 0xff
 800baa2:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800baa4:	697b      	ldr	r3, [r7, #20]
 800baa6:	781b      	ldrb	r3, [r3, #0]
 800baa8:	b2db      	uxtb	r3, r3
 800baaa:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800baac:	78fb      	ldrb	r3, [r7, #3]
 800baae:	b2db      	uxtb	r3, r3
 800bab0:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800bab4:	b2da      	uxtb	r2, r3
 800bab6:	4b30      	ldr	r3, [pc, #192]	; (800bb78 <xPortStartScheduler+0x128>)
 800bab8:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800baba:	4b30      	ldr	r3, [pc, #192]	; (800bb7c <xPortStartScheduler+0x12c>)
 800babc:	2207      	movs	r2, #7
 800babe:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800bac0:	e009      	b.n	800bad6 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 800bac2:	4b2e      	ldr	r3, [pc, #184]	; (800bb7c <xPortStartScheduler+0x12c>)
 800bac4:	681b      	ldr	r3, [r3, #0]
 800bac6:	3b01      	subs	r3, #1
 800bac8:	4a2c      	ldr	r2, [pc, #176]	; (800bb7c <xPortStartScheduler+0x12c>)
 800baca:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800bacc:	78fb      	ldrb	r3, [r7, #3]
 800bace:	b2db      	uxtb	r3, r3
 800bad0:	005b      	lsls	r3, r3, #1
 800bad2:	b2db      	uxtb	r3, r3
 800bad4:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800bad6:	78fb      	ldrb	r3, [r7, #3]
 800bad8:	b2db      	uxtb	r3, r3
 800bada:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bade:	2b80      	cmp	r3, #128	; 0x80
 800bae0:	d0ef      	beq.n	800bac2 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800bae2:	4b26      	ldr	r3, [pc, #152]	; (800bb7c <xPortStartScheduler+0x12c>)
 800bae4:	681b      	ldr	r3, [r3, #0]
 800bae6:	f1c3 0307 	rsb	r3, r3, #7
 800baea:	2b04      	cmp	r3, #4
 800baec:	d009      	beq.n	800bb02 <xPortStartScheduler+0xb2>
 800baee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800baf2:	f383 8811 	msr	BASEPRI, r3
 800baf6:	f3bf 8f6f 	isb	sy
 800bafa:	f3bf 8f4f 	dsb	sy
 800bafe:	60bb      	str	r3, [r7, #8]
 800bb00:	e7fe      	b.n	800bb00 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800bb02:	4b1e      	ldr	r3, [pc, #120]	; (800bb7c <xPortStartScheduler+0x12c>)
 800bb04:	681b      	ldr	r3, [r3, #0]
 800bb06:	021b      	lsls	r3, r3, #8
 800bb08:	4a1c      	ldr	r2, [pc, #112]	; (800bb7c <xPortStartScheduler+0x12c>)
 800bb0a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800bb0c:	4b1b      	ldr	r3, [pc, #108]	; (800bb7c <xPortStartScheduler+0x12c>)
 800bb0e:	681b      	ldr	r3, [r3, #0]
 800bb10:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800bb14:	4a19      	ldr	r2, [pc, #100]	; (800bb7c <xPortStartScheduler+0x12c>)
 800bb16:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800bb18:	687b      	ldr	r3, [r7, #4]
 800bb1a:	b2da      	uxtb	r2, r3
 800bb1c:	697b      	ldr	r3, [r7, #20]
 800bb1e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800bb20:	4b17      	ldr	r3, [pc, #92]	; (800bb80 <xPortStartScheduler+0x130>)
 800bb22:	681b      	ldr	r3, [r3, #0]
 800bb24:	4a16      	ldr	r2, [pc, #88]	; (800bb80 <xPortStartScheduler+0x130>)
 800bb26:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800bb2a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800bb2c:	4b14      	ldr	r3, [pc, #80]	; (800bb80 <xPortStartScheduler+0x130>)
 800bb2e:	681b      	ldr	r3, [r3, #0]
 800bb30:	4a13      	ldr	r2, [pc, #76]	; (800bb80 <xPortStartScheduler+0x130>)
 800bb32:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800bb36:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800bb38:	f000 f8d6 	bl	800bce8 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800bb3c:	4b11      	ldr	r3, [pc, #68]	; (800bb84 <xPortStartScheduler+0x134>)
 800bb3e:	2200      	movs	r2, #0
 800bb40:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800bb42:	f000 f8f5 	bl	800bd30 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800bb46:	4b10      	ldr	r3, [pc, #64]	; (800bb88 <xPortStartScheduler+0x138>)
 800bb48:	681b      	ldr	r3, [r3, #0]
 800bb4a:	4a0f      	ldr	r2, [pc, #60]	; (800bb88 <xPortStartScheduler+0x138>)
 800bb4c:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800bb50:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800bb52:	f7ff ff69 	bl	800ba28 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800bb56:	f7fe ff8b 	bl	800aa70 <vTaskSwitchContext>
	prvTaskExitError();
 800bb5a:	f7ff ff21 	bl	800b9a0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800bb5e:	2300      	movs	r3, #0
}
 800bb60:	4618      	mov	r0, r3
 800bb62:	3718      	adds	r7, #24
 800bb64:	46bd      	mov	sp, r7
 800bb66:	bd80      	pop	{r7, pc}
 800bb68:	e000ed00 	.word	0xe000ed00
 800bb6c:	410fc271 	.word	0x410fc271
 800bb70:	410fc270 	.word	0x410fc270
 800bb74:	e000e400 	.word	0xe000e400
 800bb78:	20000efc 	.word	0x20000efc
 800bb7c:	20000f00 	.word	0x20000f00
 800bb80:	e000ed20 	.word	0xe000ed20
 800bb84:	20000118 	.word	0x20000118
 800bb88:	e000ef34 	.word	0xe000ef34

0800bb8c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800bb8c:	b480      	push	{r7}
 800bb8e:	b083      	sub	sp, #12
 800bb90:	af00      	add	r7, sp, #0
 800bb92:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb96:	f383 8811 	msr	BASEPRI, r3
 800bb9a:	f3bf 8f6f 	isb	sy
 800bb9e:	f3bf 8f4f 	dsb	sy
 800bba2:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800bba4:	4b0e      	ldr	r3, [pc, #56]	; (800bbe0 <vPortEnterCritical+0x54>)
 800bba6:	681b      	ldr	r3, [r3, #0]
 800bba8:	3301      	adds	r3, #1
 800bbaa:	4a0d      	ldr	r2, [pc, #52]	; (800bbe0 <vPortEnterCritical+0x54>)
 800bbac:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800bbae:	4b0c      	ldr	r3, [pc, #48]	; (800bbe0 <vPortEnterCritical+0x54>)
 800bbb0:	681b      	ldr	r3, [r3, #0]
 800bbb2:	2b01      	cmp	r3, #1
 800bbb4:	d10e      	bne.n	800bbd4 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800bbb6:	4b0b      	ldr	r3, [pc, #44]	; (800bbe4 <vPortEnterCritical+0x58>)
 800bbb8:	681b      	ldr	r3, [r3, #0]
 800bbba:	b2db      	uxtb	r3, r3
 800bbbc:	2b00      	cmp	r3, #0
 800bbbe:	d009      	beq.n	800bbd4 <vPortEnterCritical+0x48>
 800bbc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bbc4:	f383 8811 	msr	BASEPRI, r3
 800bbc8:	f3bf 8f6f 	isb	sy
 800bbcc:	f3bf 8f4f 	dsb	sy
 800bbd0:	603b      	str	r3, [r7, #0]
 800bbd2:	e7fe      	b.n	800bbd2 <vPortEnterCritical+0x46>
	}
}
 800bbd4:	bf00      	nop
 800bbd6:	370c      	adds	r7, #12
 800bbd8:	46bd      	mov	sp, r7
 800bbda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbde:	4770      	bx	lr
 800bbe0:	20000118 	.word	0x20000118
 800bbe4:	e000ed04 	.word	0xe000ed04

0800bbe8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800bbe8:	b480      	push	{r7}
 800bbea:	b083      	sub	sp, #12
 800bbec:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800bbee:	4b11      	ldr	r3, [pc, #68]	; (800bc34 <vPortExitCritical+0x4c>)
 800bbf0:	681b      	ldr	r3, [r3, #0]
 800bbf2:	2b00      	cmp	r3, #0
 800bbf4:	d109      	bne.n	800bc0a <vPortExitCritical+0x22>
 800bbf6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bbfa:	f383 8811 	msr	BASEPRI, r3
 800bbfe:	f3bf 8f6f 	isb	sy
 800bc02:	f3bf 8f4f 	dsb	sy
 800bc06:	607b      	str	r3, [r7, #4]
 800bc08:	e7fe      	b.n	800bc08 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 800bc0a:	4b0a      	ldr	r3, [pc, #40]	; (800bc34 <vPortExitCritical+0x4c>)
 800bc0c:	681b      	ldr	r3, [r3, #0]
 800bc0e:	3b01      	subs	r3, #1
 800bc10:	4a08      	ldr	r2, [pc, #32]	; (800bc34 <vPortExitCritical+0x4c>)
 800bc12:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800bc14:	4b07      	ldr	r3, [pc, #28]	; (800bc34 <vPortExitCritical+0x4c>)
 800bc16:	681b      	ldr	r3, [r3, #0]
 800bc18:	2b00      	cmp	r3, #0
 800bc1a:	d104      	bne.n	800bc26 <vPortExitCritical+0x3e>
 800bc1c:	2300      	movs	r3, #0
 800bc1e:	603b      	str	r3, [r7, #0]
	__asm volatile
 800bc20:	683b      	ldr	r3, [r7, #0]
 800bc22:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 800bc26:	bf00      	nop
 800bc28:	370c      	adds	r7, #12
 800bc2a:	46bd      	mov	sp, r7
 800bc2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc30:	4770      	bx	lr
 800bc32:	bf00      	nop
 800bc34:	20000118 	.word	0x20000118
	...

0800bc40 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800bc40:	f3ef 8009 	mrs	r0, PSP
 800bc44:	f3bf 8f6f 	isb	sy
 800bc48:	4b15      	ldr	r3, [pc, #84]	; (800bca0 <pxCurrentTCBConst>)
 800bc4a:	681a      	ldr	r2, [r3, #0]
 800bc4c:	f01e 0f10 	tst.w	lr, #16
 800bc50:	bf08      	it	eq
 800bc52:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800bc56:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bc5a:	6010      	str	r0, [r2, #0]
 800bc5c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800bc60:	f04f 0050 	mov.w	r0, #80	; 0x50
 800bc64:	f380 8811 	msr	BASEPRI, r0
 800bc68:	f3bf 8f4f 	dsb	sy
 800bc6c:	f3bf 8f6f 	isb	sy
 800bc70:	f7fe fefe 	bl	800aa70 <vTaskSwitchContext>
 800bc74:	f04f 0000 	mov.w	r0, #0
 800bc78:	f380 8811 	msr	BASEPRI, r0
 800bc7c:	bc09      	pop	{r0, r3}
 800bc7e:	6819      	ldr	r1, [r3, #0]
 800bc80:	6808      	ldr	r0, [r1, #0]
 800bc82:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bc86:	f01e 0f10 	tst.w	lr, #16
 800bc8a:	bf08      	it	eq
 800bc8c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800bc90:	f380 8809 	msr	PSP, r0
 800bc94:	f3bf 8f6f 	isb	sy
 800bc98:	4770      	bx	lr
 800bc9a:	bf00      	nop
 800bc9c:	f3af 8000 	nop.w

0800bca0 <pxCurrentTCBConst>:
 800bca0:	200008d0 	.word	0x200008d0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800bca4:	bf00      	nop
 800bca6:	bf00      	nop

0800bca8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800bca8:	b580      	push	{r7, lr}
 800bcaa:	b082      	sub	sp, #8
 800bcac:	af00      	add	r7, sp, #0
	__asm volatile
 800bcae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bcb2:	f383 8811 	msr	BASEPRI, r3
 800bcb6:	f3bf 8f6f 	isb	sy
 800bcba:	f3bf 8f4f 	dsb	sy
 800bcbe:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800bcc0:	f7fe fe18 	bl	800a8f4 <xTaskIncrementTick>
 800bcc4:	4603      	mov	r3, r0
 800bcc6:	2b00      	cmp	r3, #0
 800bcc8:	d003      	beq.n	800bcd2 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800bcca:	4b06      	ldr	r3, [pc, #24]	; (800bce4 <SysTick_Handler+0x3c>)
 800bccc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bcd0:	601a      	str	r2, [r3, #0]
 800bcd2:	2300      	movs	r3, #0
 800bcd4:	603b      	str	r3, [r7, #0]
	__asm volatile
 800bcd6:	683b      	ldr	r3, [r7, #0]
 800bcd8:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800bcdc:	bf00      	nop
 800bcde:	3708      	adds	r7, #8
 800bce0:	46bd      	mov	sp, r7
 800bce2:	bd80      	pop	{r7, pc}
 800bce4:	e000ed04 	.word	0xe000ed04

0800bce8 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800bce8:	b480      	push	{r7}
 800bcea:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800bcec:	4b0b      	ldr	r3, [pc, #44]	; (800bd1c <vPortSetupTimerInterrupt+0x34>)
 800bcee:	2200      	movs	r2, #0
 800bcf0:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800bcf2:	4b0b      	ldr	r3, [pc, #44]	; (800bd20 <vPortSetupTimerInterrupt+0x38>)
 800bcf4:	2200      	movs	r2, #0
 800bcf6:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800bcf8:	4b0a      	ldr	r3, [pc, #40]	; (800bd24 <vPortSetupTimerInterrupt+0x3c>)
 800bcfa:	681b      	ldr	r3, [r3, #0]
 800bcfc:	4a0a      	ldr	r2, [pc, #40]	; (800bd28 <vPortSetupTimerInterrupt+0x40>)
 800bcfe:	fba2 2303 	umull	r2, r3, r2, r3
 800bd02:	099b      	lsrs	r3, r3, #6
 800bd04:	4a09      	ldr	r2, [pc, #36]	; (800bd2c <vPortSetupTimerInterrupt+0x44>)
 800bd06:	3b01      	subs	r3, #1
 800bd08:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800bd0a:	4b04      	ldr	r3, [pc, #16]	; (800bd1c <vPortSetupTimerInterrupt+0x34>)
 800bd0c:	2207      	movs	r2, #7
 800bd0e:	601a      	str	r2, [r3, #0]
}
 800bd10:	bf00      	nop
 800bd12:	46bd      	mov	sp, r7
 800bd14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd18:	4770      	bx	lr
 800bd1a:	bf00      	nop
 800bd1c:	e000e010 	.word	0xe000e010
 800bd20:	e000e018 	.word	0xe000e018
 800bd24:	20000000 	.word	0x20000000
 800bd28:	10624dd3 	.word	0x10624dd3
 800bd2c:	e000e014 	.word	0xe000e014

0800bd30 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800bd30:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800bd40 <vPortEnableVFP+0x10>
 800bd34:	6801      	ldr	r1, [r0, #0]
 800bd36:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800bd3a:	6001      	str	r1, [r0, #0]
 800bd3c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800bd3e:	bf00      	nop
 800bd40:	e000ed88 	.word	0xe000ed88

0800bd44 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800bd44:	b480      	push	{r7}
 800bd46:	b085      	sub	sp, #20
 800bd48:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800bd4a:	f3ef 8305 	mrs	r3, IPSR
 800bd4e:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800bd50:	68fb      	ldr	r3, [r7, #12]
 800bd52:	2b0f      	cmp	r3, #15
 800bd54:	d913      	bls.n	800bd7e <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800bd56:	4a16      	ldr	r2, [pc, #88]	; (800bdb0 <vPortValidateInterruptPriority+0x6c>)
 800bd58:	68fb      	ldr	r3, [r7, #12]
 800bd5a:	4413      	add	r3, r2
 800bd5c:	781b      	ldrb	r3, [r3, #0]
 800bd5e:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800bd60:	4b14      	ldr	r3, [pc, #80]	; (800bdb4 <vPortValidateInterruptPriority+0x70>)
 800bd62:	781b      	ldrb	r3, [r3, #0]
 800bd64:	7afa      	ldrb	r2, [r7, #11]
 800bd66:	429a      	cmp	r2, r3
 800bd68:	d209      	bcs.n	800bd7e <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 800bd6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd6e:	f383 8811 	msr	BASEPRI, r3
 800bd72:	f3bf 8f6f 	isb	sy
 800bd76:	f3bf 8f4f 	dsb	sy
 800bd7a:	607b      	str	r3, [r7, #4]
 800bd7c:	e7fe      	b.n	800bd7c <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800bd7e:	4b0e      	ldr	r3, [pc, #56]	; (800bdb8 <vPortValidateInterruptPriority+0x74>)
 800bd80:	681b      	ldr	r3, [r3, #0]
 800bd82:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800bd86:	4b0d      	ldr	r3, [pc, #52]	; (800bdbc <vPortValidateInterruptPriority+0x78>)
 800bd88:	681b      	ldr	r3, [r3, #0]
 800bd8a:	429a      	cmp	r2, r3
 800bd8c:	d909      	bls.n	800bda2 <vPortValidateInterruptPriority+0x5e>
 800bd8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd92:	f383 8811 	msr	BASEPRI, r3
 800bd96:	f3bf 8f6f 	isb	sy
 800bd9a:	f3bf 8f4f 	dsb	sy
 800bd9e:	603b      	str	r3, [r7, #0]
 800bda0:	e7fe      	b.n	800bda0 <vPortValidateInterruptPriority+0x5c>
	}
 800bda2:	bf00      	nop
 800bda4:	3714      	adds	r7, #20
 800bda6:	46bd      	mov	sp, r7
 800bda8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdac:	4770      	bx	lr
 800bdae:	bf00      	nop
 800bdb0:	e000e3f0 	.word	0xe000e3f0
 800bdb4:	20000efc 	.word	0x20000efc
 800bdb8:	e000ed0c 	.word	0xe000ed0c
 800bdbc:	20000f00 	.word	0x20000f00

0800bdc0 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800bdc0:	b580      	push	{r7, lr}
 800bdc2:	b08a      	sub	sp, #40	; 0x28
 800bdc4:	af00      	add	r7, sp, #0
 800bdc6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800bdc8:	2300      	movs	r3, #0
 800bdca:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800bdcc:	f7fe fcc6 	bl	800a75c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800bdd0:	4b57      	ldr	r3, [pc, #348]	; (800bf30 <pvPortMalloc+0x170>)
 800bdd2:	681b      	ldr	r3, [r3, #0]
 800bdd4:	2b00      	cmp	r3, #0
 800bdd6:	d101      	bne.n	800bddc <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800bdd8:	f000 f90c 	bl	800bff4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800bddc:	4b55      	ldr	r3, [pc, #340]	; (800bf34 <pvPortMalloc+0x174>)
 800bdde:	681a      	ldr	r2, [r3, #0]
 800bde0:	687b      	ldr	r3, [r7, #4]
 800bde2:	4013      	ands	r3, r2
 800bde4:	2b00      	cmp	r3, #0
 800bde6:	f040 808c 	bne.w	800bf02 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800bdea:	687b      	ldr	r3, [r7, #4]
 800bdec:	2b00      	cmp	r3, #0
 800bdee:	d01c      	beq.n	800be2a <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 800bdf0:	2208      	movs	r2, #8
 800bdf2:	687b      	ldr	r3, [r7, #4]
 800bdf4:	4413      	add	r3, r2
 800bdf6:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800bdf8:	687b      	ldr	r3, [r7, #4]
 800bdfa:	f003 0307 	and.w	r3, r3, #7
 800bdfe:	2b00      	cmp	r3, #0
 800be00:	d013      	beq.n	800be2a <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800be02:	687b      	ldr	r3, [r7, #4]
 800be04:	f023 0307 	bic.w	r3, r3, #7
 800be08:	3308      	adds	r3, #8
 800be0a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800be0c:	687b      	ldr	r3, [r7, #4]
 800be0e:	f003 0307 	and.w	r3, r3, #7
 800be12:	2b00      	cmp	r3, #0
 800be14:	d009      	beq.n	800be2a <pvPortMalloc+0x6a>
 800be16:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be1a:	f383 8811 	msr	BASEPRI, r3
 800be1e:	f3bf 8f6f 	isb	sy
 800be22:	f3bf 8f4f 	dsb	sy
 800be26:	617b      	str	r3, [r7, #20]
 800be28:	e7fe      	b.n	800be28 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800be2a:	687b      	ldr	r3, [r7, #4]
 800be2c:	2b00      	cmp	r3, #0
 800be2e:	d068      	beq.n	800bf02 <pvPortMalloc+0x142>
 800be30:	4b41      	ldr	r3, [pc, #260]	; (800bf38 <pvPortMalloc+0x178>)
 800be32:	681b      	ldr	r3, [r3, #0]
 800be34:	687a      	ldr	r2, [r7, #4]
 800be36:	429a      	cmp	r2, r3
 800be38:	d863      	bhi.n	800bf02 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800be3a:	4b40      	ldr	r3, [pc, #256]	; (800bf3c <pvPortMalloc+0x17c>)
 800be3c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800be3e:	4b3f      	ldr	r3, [pc, #252]	; (800bf3c <pvPortMalloc+0x17c>)
 800be40:	681b      	ldr	r3, [r3, #0]
 800be42:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800be44:	e004      	b.n	800be50 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 800be46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be48:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800be4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be4c:	681b      	ldr	r3, [r3, #0]
 800be4e:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800be50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be52:	685b      	ldr	r3, [r3, #4]
 800be54:	687a      	ldr	r2, [r7, #4]
 800be56:	429a      	cmp	r2, r3
 800be58:	d903      	bls.n	800be62 <pvPortMalloc+0xa2>
 800be5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be5c:	681b      	ldr	r3, [r3, #0]
 800be5e:	2b00      	cmp	r3, #0
 800be60:	d1f1      	bne.n	800be46 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800be62:	4b33      	ldr	r3, [pc, #204]	; (800bf30 <pvPortMalloc+0x170>)
 800be64:	681b      	ldr	r3, [r3, #0]
 800be66:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800be68:	429a      	cmp	r2, r3
 800be6a:	d04a      	beq.n	800bf02 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800be6c:	6a3b      	ldr	r3, [r7, #32]
 800be6e:	681b      	ldr	r3, [r3, #0]
 800be70:	2208      	movs	r2, #8
 800be72:	4413      	add	r3, r2
 800be74:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800be76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be78:	681a      	ldr	r2, [r3, #0]
 800be7a:	6a3b      	ldr	r3, [r7, #32]
 800be7c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800be7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be80:	685a      	ldr	r2, [r3, #4]
 800be82:	687b      	ldr	r3, [r7, #4]
 800be84:	1ad2      	subs	r2, r2, r3
 800be86:	2308      	movs	r3, #8
 800be88:	005b      	lsls	r3, r3, #1
 800be8a:	429a      	cmp	r2, r3
 800be8c:	d91e      	bls.n	800becc <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800be8e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800be90:	687b      	ldr	r3, [r7, #4]
 800be92:	4413      	add	r3, r2
 800be94:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800be96:	69bb      	ldr	r3, [r7, #24]
 800be98:	f003 0307 	and.w	r3, r3, #7
 800be9c:	2b00      	cmp	r3, #0
 800be9e:	d009      	beq.n	800beb4 <pvPortMalloc+0xf4>
 800bea0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bea4:	f383 8811 	msr	BASEPRI, r3
 800bea8:	f3bf 8f6f 	isb	sy
 800beac:	f3bf 8f4f 	dsb	sy
 800beb0:	613b      	str	r3, [r7, #16]
 800beb2:	e7fe      	b.n	800beb2 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800beb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800beb6:	685a      	ldr	r2, [r3, #4]
 800beb8:	687b      	ldr	r3, [r7, #4]
 800beba:	1ad2      	subs	r2, r2, r3
 800bebc:	69bb      	ldr	r3, [r7, #24]
 800bebe:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800bec0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bec2:	687a      	ldr	r2, [r7, #4]
 800bec4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800bec6:	69b8      	ldr	r0, [r7, #24]
 800bec8:	f000 f8f6 	bl	800c0b8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800becc:	4b1a      	ldr	r3, [pc, #104]	; (800bf38 <pvPortMalloc+0x178>)
 800bece:	681a      	ldr	r2, [r3, #0]
 800bed0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bed2:	685b      	ldr	r3, [r3, #4]
 800bed4:	1ad3      	subs	r3, r2, r3
 800bed6:	4a18      	ldr	r2, [pc, #96]	; (800bf38 <pvPortMalloc+0x178>)
 800bed8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800beda:	4b17      	ldr	r3, [pc, #92]	; (800bf38 <pvPortMalloc+0x178>)
 800bedc:	681a      	ldr	r2, [r3, #0]
 800bede:	4b18      	ldr	r3, [pc, #96]	; (800bf40 <pvPortMalloc+0x180>)
 800bee0:	681b      	ldr	r3, [r3, #0]
 800bee2:	429a      	cmp	r2, r3
 800bee4:	d203      	bcs.n	800beee <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800bee6:	4b14      	ldr	r3, [pc, #80]	; (800bf38 <pvPortMalloc+0x178>)
 800bee8:	681b      	ldr	r3, [r3, #0]
 800beea:	4a15      	ldr	r2, [pc, #84]	; (800bf40 <pvPortMalloc+0x180>)
 800beec:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800beee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bef0:	685a      	ldr	r2, [r3, #4]
 800bef2:	4b10      	ldr	r3, [pc, #64]	; (800bf34 <pvPortMalloc+0x174>)
 800bef4:	681b      	ldr	r3, [r3, #0]
 800bef6:	431a      	orrs	r2, r3
 800bef8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800befa:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800befc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800befe:	2200      	movs	r2, #0
 800bf00:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800bf02:	f7fe fc39 	bl	800a778 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800bf06:	69fb      	ldr	r3, [r7, #28]
 800bf08:	f003 0307 	and.w	r3, r3, #7
 800bf0c:	2b00      	cmp	r3, #0
 800bf0e:	d009      	beq.n	800bf24 <pvPortMalloc+0x164>
 800bf10:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf14:	f383 8811 	msr	BASEPRI, r3
 800bf18:	f3bf 8f6f 	isb	sy
 800bf1c:	f3bf 8f4f 	dsb	sy
 800bf20:	60fb      	str	r3, [r7, #12]
 800bf22:	e7fe      	b.n	800bf22 <pvPortMalloc+0x162>
	return pvReturn;
 800bf24:	69fb      	ldr	r3, [r7, #28]
}
 800bf26:	4618      	mov	r0, r3
 800bf28:	3728      	adds	r7, #40	; 0x28
 800bf2a:	46bd      	mov	sp, r7
 800bf2c:	bd80      	pop	{r7, pc}
 800bf2e:	bf00      	nop
 800bf30:	20004b0c 	.word	0x20004b0c
 800bf34:	20004b18 	.word	0x20004b18
 800bf38:	20004b10 	.word	0x20004b10
 800bf3c:	20004b04 	.word	0x20004b04
 800bf40:	20004b14 	.word	0x20004b14

0800bf44 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800bf44:	b580      	push	{r7, lr}
 800bf46:	b086      	sub	sp, #24
 800bf48:	af00      	add	r7, sp, #0
 800bf4a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800bf4c:	687b      	ldr	r3, [r7, #4]
 800bf4e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800bf50:	687b      	ldr	r3, [r7, #4]
 800bf52:	2b00      	cmp	r3, #0
 800bf54:	d046      	beq.n	800bfe4 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800bf56:	2308      	movs	r3, #8
 800bf58:	425b      	negs	r3, r3
 800bf5a:	697a      	ldr	r2, [r7, #20]
 800bf5c:	4413      	add	r3, r2
 800bf5e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800bf60:	697b      	ldr	r3, [r7, #20]
 800bf62:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800bf64:	693b      	ldr	r3, [r7, #16]
 800bf66:	685a      	ldr	r2, [r3, #4]
 800bf68:	4b20      	ldr	r3, [pc, #128]	; (800bfec <vPortFree+0xa8>)
 800bf6a:	681b      	ldr	r3, [r3, #0]
 800bf6c:	4013      	ands	r3, r2
 800bf6e:	2b00      	cmp	r3, #0
 800bf70:	d109      	bne.n	800bf86 <vPortFree+0x42>
 800bf72:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf76:	f383 8811 	msr	BASEPRI, r3
 800bf7a:	f3bf 8f6f 	isb	sy
 800bf7e:	f3bf 8f4f 	dsb	sy
 800bf82:	60fb      	str	r3, [r7, #12]
 800bf84:	e7fe      	b.n	800bf84 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800bf86:	693b      	ldr	r3, [r7, #16]
 800bf88:	681b      	ldr	r3, [r3, #0]
 800bf8a:	2b00      	cmp	r3, #0
 800bf8c:	d009      	beq.n	800bfa2 <vPortFree+0x5e>
 800bf8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf92:	f383 8811 	msr	BASEPRI, r3
 800bf96:	f3bf 8f6f 	isb	sy
 800bf9a:	f3bf 8f4f 	dsb	sy
 800bf9e:	60bb      	str	r3, [r7, #8]
 800bfa0:	e7fe      	b.n	800bfa0 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800bfa2:	693b      	ldr	r3, [r7, #16]
 800bfa4:	685a      	ldr	r2, [r3, #4]
 800bfa6:	4b11      	ldr	r3, [pc, #68]	; (800bfec <vPortFree+0xa8>)
 800bfa8:	681b      	ldr	r3, [r3, #0]
 800bfaa:	4013      	ands	r3, r2
 800bfac:	2b00      	cmp	r3, #0
 800bfae:	d019      	beq.n	800bfe4 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800bfb0:	693b      	ldr	r3, [r7, #16]
 800bfb2:	681b      	ldr	r3, [r3, #0]
 800bfb4:	2b00      	cmp	r3, #0
 800bfb6:	d115      	bne.n	800bfe4 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800bfb8:	693b      	ldr	r3, [r7, #16]
 800bfba:	685a      	ldr	r2, [r3, #4]
 800bfbc:	4b0b      	ldr	r3, [pc, #44]	; (800bfec <vPortFree+0xa8>)
 800bfbe:	681b      	ldr	r3, [r3, #0]
 800bfc0:	43db      	mvns	r3, r3
 800bfc2:	401a      	ands	r2, r3
 800bfc4:	693b      	ldr	r3, [r7, #16]
 800bfc6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800bfc8:	f7fe fbc8 	bl	800a75c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800bfcc:	693b      	ldr	r3, [r7, #16]
 800bfce:	685a      	ldr	r2, [r3, #4]
 800bfd0:	4b07      	ldr	r3, [pc, #28]	; (800bff0 <vPortFree+0xac>)
 800bfd2:	681b      	ldr	r3, [r3, #0]
 800bfd4:	4413      	add	r3, r2
 800bfd6:	4a06      	ldr	r2, [pc, #24]	; (800bff0 <vPortFree+0xac>)
 800bfd8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800bfda:	6938      	ldr	r0, [r7, #16]
 800bfdc:	f000 f86c 	bl	800c0b8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800bfe0:	f7fe fbca 	bl	800a778 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800bfe4:	bf00      	nop
 800bfe6:	3718      	adds	r7, #24
 800bfe8:	46bd      	mov	sp, r7
 800bfea:	bd80      	pop	{r7, pc}
 800bfec:	20004b18 	.word	0x20004b18
 800bff0:	20004b10 	.word	0x20004b10

0800bff4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800bff4:	b480      	push	{r7}
 800bff6:	b085      	sub	sp, #20
 800bff8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800bffa:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800bffe:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800c000:	4b27      	ldr	r3, [pc, #156]	; (800c0a0 <prvHeapInit+0xac>)
 800c002:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800c004:	68fb      	ldr	r3, [r7, #12]
 800c006:	f003 0307 	and.w	r3, r3, #7
 800c00a:	2b00      	cmp	r3, #0
 800c00c:	d00c      	beq.n	800c028 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800c00e:	68fb      	ldr	r3, [r7, #12]
 800c010:	3307      	adds	r3, #7
 800c012:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c014:	68fb      	ldr	r3, [r7, #12]
 800c016:	f023 0307 	bic.w	r3, r3, #7
 800c01a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800c01c:	68ba      	ldr	r2, [r7, #8]
 800c01e:	68fb      	ldr	r3, [r7, #12]
 800c020:	1ad3      	subs	r3, r2, r3
 800c022:	4a1f      	ldr	r2, [pc, #124]	; (800c0a0 <prvHeapInit+0xac>)
 800c024:	4413      	add	r3, r2
 800c026:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800c028:	68fb      	ldr	r3, [r7, #12]
 800c02a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800c02c:	4a1d      	ldr	r2, [pc, #116]	; (800c0a4 <prvHeapInit+0xb0>)
 800c02e:	687b      	ldr	r3, [r7, #4]
 800c030:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800c032:	4b1c      	ldr	r3, [pc, #112]	; (800c0a4 <prvHeapInit+0xb0>)
 800c034:	2200      	movs	r2, #0
 800c036:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800c038:	687b      	ldr	r3, [r7, #4]
 800c03a:	68ba      	ldr	r2, [r7, #8]
 800c03c:	4413      	add	r3, r2
 800c03e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800c040:	2208      	movs	r2, #8
 800c042:	68fb      	ldr	r3, [r7, #12]
 800c044:	1a9b      	subs	r3, r3, r2
 800c046:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c048:	68fb      	ldr	r3, [r7, #12]
 800c04a:	f023 0307 	bic.w	r3, r3, #7
 800c04e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800c050:	68fb      	ldr	r3, [r7, #12]
 800c052:	4a15      	ldr	r2, [pc, #84]	; (800c0a8 <prvHeapInit+0xb4>)
 800c054:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800c056:	4b14      	ldr	r3, [pc, #80]	; (800c0a8 <prvHeapInit+0xb4>)
 800c058:	681b      	ldr	r3, [r3, #0]
 800c05a:	2200      	movs	r2, #0
 800c05c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800c05e:	4b12      	ldr	r3, [pc, #72]	; (800c0a8 <prvHeapInit+0xb4>)
 800c060:	681b      	ldr	r3, [r3, #0]
 800c062:	2200      	movs	r2, #0
 800c064:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800c066:	687b      	ldr	r3, [r7, #4]
 800c068:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800c06a:	683b      	ldr	r3, [r7, #0]
 800c06c:	68fa      	ldr	r2, [r7, #12]
 800c06e:	1ad2      	subs	r2, r2, r3
 800c070:	683b      	ldr	r3, [r7, #0]
 800c072:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800c074:	4b0c      	ldr	r3, [pc, #48]	; (800c0a8 <prvHeapInit+0xb4>)
 800c076:	681a      	ldr	r2, [r3, #0]
 800c078:	683b      	ldr	r3, [r7, #0]
 800c07a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c07c:	683b      	ldr	r3, [r7, #0]
 800c07e:	685b      	ldr	r3, [r3, #4]
 800c080:	4a0a      	ldr	r2, [pc, #40]	; (800c0ac <prvHeapInit+0xb8>)
 800c082:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c084:	683b      	ldr	r3, [r7, #0]
 800c086:	685b      	ldr	r3, [r3, #4]
 800c088:	4a09      	ldr	r2, [pc, #36]	; (800c0b0 <prvHeapInit+0xbc>)
 800c08a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800c08c:	4b09      	ldr	r3, [pc, #36]	; (800c0b4 <prvHeapInit+0xc0>)
 800c08e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800c092:	601a      	str	r2, [r3, #0]
}
 800c094:	bf00      	nop
 800c096:	3714      	adds	r7, #20
 800c098:	46bd      	mov	sp, r7
 800c09a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c09e:	4770      	bx	lr
 800c0a0:	20000f04 	.word	0x20000f04
 800c0a4:	20004b04 	.word	0x20004b04
 800c0a8:	20004b0c 	.word	0x20004b0c
 800c0ac:	20004b14 	.word	0x20004b14
 800c0b0:	20004b10 	.word	0x20004b10
 800c0b4:	20004b18 	.word	0x20004b18

0800c0b8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800c0b8:	b480      	push	{r7}
 800c0ba:	b085      	sub	sp, #20
 800c0bc:	af00      	add	r7, sp, #0
 800c0be:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800c0c0:	4b28      	ldr	r3, [pc, #160]	; (800c164 <prvInsertBlockIntoFreeList+0xac>)
 800c0c2:	60fb      	str	r3, [r7, #12]
 800c0c4:	e002      	b.n	800c0cc <prvInsertBlockIntoFreeList+0x14>
 800c0c6:	68fb      	ldr	r3, [r7, #12]
 800c0c8:	681b      	ldr	r3, [r3, #0]
 800c0ca:	60fb      	str	r3, [r7, #12]
 800c0cc:	68fb      	ldr	r3, [r7, #12]
 800c0ce:	681b      	ldr	r3, [r3, #0]
 800c0d0:	687a      	ldr	r2, [r7, #4]
 800c0d2:	429a      	cmp	r2, r3
 800c0d4:	d8f7      	bhi.n	800c0c6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800c0d6:	68fb      	ldr	r3, [r7, #12]
 800c0d8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800c0da:	68fb      	ldr	r3, [r7, #12]
 800c0dc:	685b      	ldr	r3, [r3, #4]
 800c0de:	68ba      	ldr	r2, [r7, #8]
 800c0e0:	4413      	add	r3, r2
 800c0e2:	687a      	ldr	r2, [r7, #4]
 800c0e4:	429a      	cmp	r2, r3
 800c0e6:	d108      	bne.n	800c0fa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800c0e8:	68fb      	ldr	r3, [r7, #12]
 800c0ea:	685a      	ldr	r2, [r3, #4]
 800c0ec:	687b      	ldr	r3, [r7, #4]
 800c0ee:	685b      	ldr	r3, [r3, #4]
 800c0f0:	441a      	add	r2, r3
 800c0f2:	68fb      	ldr	r3, [r7, #12]
 800c0f4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800c0f6:	68fb      	ldr	r3, [r7, #12]
 800c0f8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800c0fa:	687b      	ldr	r3, [r7, #4]
 800c0fc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800c0fe:	687b      	ldr	r3, [r7, #4]
 800c100:	685b      	ldr	r3, [r3, #4]
 800c102:	68ba      	ldr	r2, [r7, #8]
 800c104:	441a      	add	r2, r3
 800c106:	68fb      	ldr	r3, [r7, #12]
 800c108:	681b      	ldr	r3, [r3, #0]
 800c10a:	429a      	cmp	r2, r3
 800c10c:	d118      	bne.n	800c140 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800c10e:	68fb      	ldr	r3, [r7, #12]
 800c110:	681a      	ldr	r2, [r3, #0]
 800c112:	4b15      	ldr	r3, [pc, #84]	; (800c168 <prvInsertBlockIntoFreeList+0xb0>)
 800c114:	681b      	ldr	r3, [r3, #0]
 800c116:	429a      	cmp	r2, r3
 800c118:	d00d      	beq.n	800c136 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800c11a:	687b      	ldr	r3, [r7, #4]
 800c11c:	685a      	ldr	r2, [r3, #4]
 800c11e:	68fb      	ldr	r3, [r7, #12]
 800c120:	681b      	ldr	r3, [r3, #0]
 800c122:	685b      	ldr	r3, [r3, #4]
 800c124:	441a      	add	r2, r3
 800c126:	687b      	ldr	r3, [r7, #4]
 800c128:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800c12a:	68fb      	ldr	r3, [r7, #12]
 800c12c:	681b      	ldr	r3, [r3, #0]
 800c12e:	681a      	ldr	r2, [r3, #0]
 800c130:	687b      	ldr	r3, [r7, #4]
 800c132:	601a      	str	r2, [r3, #0]
 800c134:	e008      	b.n	800c148 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800c136:	4b0c      	ldr	r3, [pc, #48]	; (800c168 <prvInsertBlockIntoFreeList+0xb0>)
 800c138:	681a      	ldr	r2, [r3, #0]
 800c13a:	687b      	ldr	r3, [r7, #4]
 800c13c:	601a      	str	r2, [r3, #0]
 800c13e:	e003      	b.n	800c148 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800c140:	68fb      	ldr	r3, [r7, #12]
 800c142:	681a      	ldr	r2, [r3, #0]
 800c144:	687b      	ldr	r3, [r7, #4]
 800c146:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800c148:	68fa      	ldr	r2, [r7, #12]
 800c14a:	687b      	ldr	r3, [r7, #4]
 800c14c:	429a      	cmp	r2, r3
 800c14e:	d002      	beq.n	800c156 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800c150:	68fb      	ldr	r3, [r7, #12]
 800c152:	687a      	ldr	r2, [r7, #4]
 800c154:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c156:	bf00      	nop
 800c158:	3714      	adds	r7, #20
 800c15a:	46bd      	mov	sp, r7
 800c15c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c160:	4770      	bx	lr
 800c162:	bf00      	nop
 800c164:	20004b04 	.word	0x20004b04
 800c168:	20004b0c 	.word	0x20004b0c

0800c16c <tcpip_thread>:
 *
 * @param arg unused argument
 */
static void
tcpip_thread(void *arg)
{
 800c16c:	b580      	push	{r7, lr}
 800c16e:	b084      	sub	sp, #16
 800c170:	af00      	add	r7, sp, #0
 800c172:	6078      	str	r0, [r7, #4]
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  if (tcpip_init_done != NULL) {
 800c174:	4b29      	ldr	r3, [pc, #164]	; (800c21c <tcpip_thread+0xb0>)
 800c176:	681b      	ldr	r3, [r3, #0]
 800c178:	2b00      	cmp	r3, #0
 800c17a:	d005      	beq.n	800c188 <tcpip_thread+0x1c>
    tcpip_init_done(tcpip_init_done_arg);
 800c17c:	4b27      	ldr	r3, [pc, #156]	; (800c21c <tcpip_thread+0xb0>)
 800c17e:	681b      	ldr	r3, [r3, #0]
 800c180:	4a27      	ldr	r2, [pc, #156]	; (800c220 <tcpip_thread+0xb4>)
 800c182:	6812      	ldr	r2, [r2, #0]
 800c184:	4610      	mov	r0, r2
 800c186:	4798      	blx	r3
  }

  LOCK_TCPIP_CORE();
 800c188:	4826      	ldr	r0, [pc, #152]	; (800c224 <tcpip_thread+0xb8>)
 800c18a:	f00a ff8d 	bl	80170a8 <sys_mutex_lock>
  while (1) {                          /* MAIN Loop */
    UNLOCK_TCPIP_CORE();
 800c18e:	4825      	ldr	r0, [pc, #148]	; (800c224 <tcpip_thread+0xb8>)
 800c190:	f00a ff99 	bl	80170c6 <sys_mutex_unlock>
    LWIP_TCPIP_THREAD_ALIVE();
    /* wait for a message, timeouts are processed while waiting */
    TCPIP_MBOX_FETCH(&mbox, (void **)&msg);
 800c194:	f107 030c 	add.w	r3, r7, #12
 800c198:	4619      	mov	r1, r3
 800c19a:	4823      	ldr	r0, [pc, #140]	; (800c228 <tcpip_thread+0xbc>)
 800c19c:	f006 fa44 	bl	8012628 <sys_timeouts_mbox_fetch>
    LOCK_TCPIP_CORE();
 800c1a0:	4820      	ldr	r0, [pc, #128]	; (800c224 <tcpip_thread+0xb8>)
 800c1a2:	f00a ff81 	bl	80170a8 <sys_mutex_lock>
    if (msg == NULL) {
 800c1a6:	68fb      	ldr	r3, [r7, #12]
 800c1a8:	2b00      	cmp	r3, #0
 800c1aa:	d106      	bne.n	800c1ba <tcpip_thread+0x4e>
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: NULL\n"));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 800c1ac:	4b1f      	ldr	r3, [pc, #124]	; (800c22c <tcpip_thread+0xc0>)
 800c1ae:	2269      	movs	r2, #105	; 0x69
 800c1b0:	491f      	ldr	r1, [pc, #124]	; (800c230 <tcpip_thread+0xc4>)
 800c1b2:	4820      	ldr	r0, [pc, #128]	; (800c234 <tcpip_thread+0xc8>)
 800c1b4:	f00b fdaa 	bl	8017d0c <iprintf>
      continue;
 800c1b8:	e02f      	b.n	800c21a <tcpip_thread+0xae>
    }
    switch (msg->type) {
 800c1ba:	68fb      	ldr	r3, [r7, #12]
 800c1bc:	781b      	ldrb	r3, [r3, #0]
 800c1be:	2b03      	cmp	r3, #3
 800c1c0:	d011      	beq.n	800c1e6 <tcpip_thread+0x7a>
 800c1c2:	2b04      	cmp	r3, #4
 800c1c4:	d01b      	beq.n	800c1fe <tcpip_thread+0x92>
 800c1c6:	2b02      	cmp	r3, #2
 800c1c8:	d120      	bne.n	800c20c <tcpip_thread+0xa0>
#endif /* !LWIP_TCPIP_CORE_LOCKING */

#if !LWIP_TCPIP_CORE_LOCKING_INPUT
    case TCPIP_MSG_INPKT:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: PACKET %p\n", (void *)msg));
      msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif);
 800c1ca:	68fb      	ldr	r3, [r7, #12]
 800c1cc:	68db      	ldr	r3, [r3, #12]
 800c1ce:	68fa      	ldr	r2, [r7, #12]
 800c1d0:	6850      	ldr	r0, [r2, #4]
 800c1d2:	68fa      	ldr	r2, [r7, #12]
 800c1d4:	6892      	ldr	r2, [r2, #8]
 800c1d6:	4611      	mov	r1, r2
 800c1d8:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 800c1da:	68fb      	ldr	r3, [r7, #12]
 800c1dc:	4619      	mov	r1, r3
 800c1de:	2009      	movs	r0, #9
 800c1e0:	f000 fd64 	bl	800ccac <memp_free>
      break;
 800c1e4:	e019      	b.n	800c21a <tcpip_thread+0xae>
      break;
#endif /* LWIP_TCPIP_TIMEOUT && LWIP_TIMERS */

    case TCPIP_MSG_CALLBACK:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 800c1e6:	68fb      	ldr	r3, [r7, #12]
 800c1e8:	685b      	ldr	r3, [r3, #4]
 800c1ea:	68fa      	ldr	r2, [r7, #12]
 800c1ec:	6892      	ldr	r2, [r2, #8]
 800c1ee:	4610      	mov	r0, r2
 800c1f0:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_API, msg);
 800c1f2:	68fb      	ldr	r3, [r7, #12]
 800c1f4:	4619      	mov	r1, r3
 800c1f6:	2008      	movs	r0, #8
 800c1f8:	f000 fd58 	bl	800ccac <memp_free>
      break;
 800c1fc:	e00d      	b.n	800c21a <tcpip_thread+0xae>

    case TCPIP_MSG_CALLBACK_STATIC:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK_STATIC %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 800c1fe:	68fb      	ldr	r3, [r7, #12]
 800c200:	685b      	ldr	r3, [r3, #4]
 800c202:	68fa      	ldr	r2, [r7, #12]
 800c204:	6892      	ldr	r2, [r2, #8]
 800c206:	4610      	mov	r0, r2
 800c208:	4798      	blx	r3
      break;
 800c20a:	e006      	b.n	800c21a <tcpip_thread+0xae>

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 800c20c:	4b07      	ldr	r3, [pc, #28]	; (800c22c <tcpip_thread+0xc0>)
 800c20e:	229b      	movs	r2, #155	; 0x9b
 800c210:	4907      	ldr	r1, [pc, #28]	; (800c230 <tcpip_thread+0xc4>)
 800c212:	4808      	ldr	r0, [pc, #32]	; (800c234 <tcpip_thread+0xc8>)
 800c214:	f00b fd7a 	bl	8017d0c <iprintf>
      break;
 800c218:	bf00      	nop
    UNLOCK_TCPIP_CORE();
 800c21a:	e7b8      	b.n	800c18e <tcpip_thread+0x22>
 800c21c:	20004b1c 	.word	0x20004b1c
 800c220:	20004b20 	.word	0x20004b20
 800c224:	20007e7c 	.word	0x20007e7c
 800c228:	20004b24 	.word	0x20004b24
 800c22c:	08018ab4 	.word	0x08018ab4
 800c230:	08018ae4 	.word	0x08018ae4
 800c234:	08018b04 	.word	0x08018b04

0800c238 <tcpip_inpkt>:
 * @param inp the network interface on which the packet was received
 * @param input_fn input function to call
 */
err_t
tcpip_inpkt(struct pbuf *p, struct netif *inp, netif_input_fn input_fn)
{
 800c238:	b580      	push	{r7, lr}
 800c23a:	b086      	sub	sp, #24
 800c23c:	af00      	add	r7, sp, #0
 800c23e:	60f8      	str	r0, [r7, #12]
 800c240:	60b9      	str	r1, [r7, #8]
 800c242:	607a      	str	r2, [r7, #4]
  UNLOCK_TCPIP_CORE();
  return ret;
#else /* LWIP_TCPIP_CORE_LOCKING_INPUT */
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(mbox));
 800c244:	481a      	ldr	r0, [pc, #104]	; (800c2b0 <tcpip_inpkt+0x78>)
 800c246:	f00a fefb 	bl	8017040 <sys_mbox_valid>
 800c24a:	4603      	mov	r3, r0
 800c24c:	2b00      	cmp	r3, #0
 800c24e:	d105      	bne.n	800c25c <tcpip_inpkt+0x24>
 800c250:	4b18      	ldr	r3, [pc, #96]	; (800c2b4 <tcpip_inpkt+0x7c>)
 800c252:	22b5      	movs	r2, #181	; 0xb5
 800c254:	4918      	ldr	r1, [pc, #96]	; (800c2b8 <tcpip_inpkt+0x80>)
 800c256:	4819      	ldr	r0, [pc, #100]	; (800c2bc <tcpip_inpkt+0x84>)
 800c258:	f00b fd58 	bl	8017d0c <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
 800c25c:	2009      	movs	r0, #9
 800c25e:	f000 fcd3 	bl	800cc08 <memp_malloc>
 800c262:	6178      	str	r0, [r7, #20]
  if (msg == NULL) {
 800c264:	697b      	ldr	r3, [r7, #20]
 800c266:	2b00      	cmp	r3, #0
 800c268:	d102      	bne.n	800c270 <tcpip_inpkt+0x38>
    return ERR_MEM;
 800c26a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c26e:	e01a      	b.n	800c2a6 <tcpip_inpkt+0x6e>
  }

  msg->type = TCPIP_MSG_INPKT;
 800c270:	697b      	ldr	r3, [r7, #20]
 800c272:	2202      	movs	r2, #2
 800c274:	701a      	strb	r2, [r3, #0]
  msg->msg.inp.p = p;
 800c276:	697b      	ldr	r3, [r7, #20]
 800c278:	68fa      	ldr	r2, [r7, #12]
 800c27a:	605a      	str	r2, [r3, #4]
  msg->msg.inp.netif = inp;
 800c27c:	697b      	ldr	r3, [r7, #20]
 800c27e:	68ba      	ldr	r2, [r7, #8]
 800c280:	609a      	str	r2, [r3, #8]
  msg->msg.inp.input_fn = input_fn;
 800c282:	697b      	ldr	r3, [r7, #20]
 800c284:	687a      	ldr	r2, [r7, #4]
 800c286:	60da      	str	r2, [r3, #12]
  if (sys_mbox_trypost(&mbox, msg) != ERR_OK) {
 800c288:	6979      	ldr	r1, [r7, #20]
 800c28a:	4809      	ldr	r0, [pc, #36]	; (800c2b0 <tcpip_inpkt+0x78>)
 800c28c:	f00a fe8d 	bl	8016faa <sys_mbox_trypost>
 800c290:	4603      	mov	r3, r0
 800c292:	2b00      	cmp	r3, #0
 800c294:	d006      	beq.n	800c2a4 <tcpip_inpkt+0x6c>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 800c296:	6979      	ldr	r1, [r7, #20]
 800c298:	2009      	movs	r0, #9
 800c29a:	f000 fd07 	bl	800ccac <memp_free>
    return ERR_MEM;
 800c29e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c2a2:	e000      	b.n	800c2a6 <tcpip_inpkt+0x6e>
  }
  return ERR_OK;
 800c2a4:	2300      	movs	r3, #0
#endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
}
 800c2a6:	4618      	mov	r0, r3
 800c2a8:	3718      	adds	r7, #24
 800c2aa:	46bd      	mov	sp, r7
 800c2ac:	bd80      	pop	{r7, pc}
 800c2ae:	bf00      	nop
 800c2b0:	20004b24 	.word	0x20004b24
 800c2b4:	08018ab4 	.word	0x08018ab4
 800c2b8:	08018b2c 	.word	0x08018b2c
 800c2bc:	08018b04 	.word	0x08018b04

0800c2c0 <tcpip_input>:
 *          NETIF_FLAG_ETHERNET flags)
 * @param inp the network interface on which the packet was received
 */
err_t
tcpip_input(struct pbuf *p, struct netif *inp)
{
 800c2c0:	b580      	push	{r7, lr}
 800c2c2:	b082      	sub	sp, #8
 800c2c4:	af00      	add	r7, sp, #0
 800c2c6:	6078      	str	r0, [r7, #4]
 800c2c8:	6039      	str	r1, [r7, #0]
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 800c2ca:	683b      	ldr	r3, [r7, #0]
 800c2cc:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800c2d0:	f003 0318 	and.w	r3, r3, #24
 800c2d4:	2b00      	cmp	r3, #0
 800c2d6:	d006      	beq.n	800c2e6 <tcpip_input+0x26>
    return tcpip_inpkt(p, inp, ethernet_input);
 800c2d8:	4a08      	ldr	r2, [pc, #32]	; (800c2fc <tcpip_input+0x3c>)
 800c2da:	6839      	ldr	r1, [r7, #0]
 800c2dc:	6878      	ldr	r0, [r7, #4]
 800c2de:	f7ff ffab 	bl	800c238 <tcpip_inpkt>
 800c2e2:	4603      	mov	r3, r0
 800c2e4:	e005      	b.n	800c2f2 <tcpip_input+0x32>
  } else
#endif /* LWIP_ETHERNET */
  return tcpip_inpkt(p, inp, ip_input);
 800c2e6:	4a06      	ldr	r2, [pc, #24]	; (800c300 <tcpip_input+0x40>)
 800c2e8:	6839      	ldr	r1, [r7, #0]
 800c2ea:	6878      	ldr	r0, [r7, #4]
 800c2ec:	f7ff ffa4 	bl	800c238 <tcpip_inpkt>
 800c2f0:	4603      	mov	r3, r0
}
 800c2f2:	4618      	mov	r0, r3
 800c2f4:	3708      	adds	r7, #8
 800c2f6:	46bd      	mov	sp, r7
 800c2f8:	bd80      	pop	{r7, pc}
 800c2fa:	bf00      	nop
 800c2fc:	08016d95 	.word	0x08016d95
 800c300:	08015d1d 	.word	0x08015d1d

0800c304 <tcpip_callback_with_block>:
 * @param block 1 to block until the request is posted, 0 to non-blocking mode
 * @return ERR_OK if the function was called, another err_t if not
 */
err_t
tcpip_callback_with_block(tcpip_callback_fn function, void *ctx, u8_t block)
{
 800c304:	b580      	push	{r7, lr}
 800c306:	b086      	sub	sp, #24
 800c308:	af00      	add	r7, sp, #0
 800c30a:	60f8      	str	r0, [r7, #12]
 800c30c:	60b9      	str	r1, [r7, #8]
 800c30e:	4613      	mov	r3, r2
 800c310:	71fb      	strb	r3, [r7, #7]
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(mbox));
 800c312:	481d      	ldr	r0, [pc, #116]	; (800c388 <tcpip_callback_with_block+0x84>)
 800c314:	f00a fe94 	bl	8017040 <sys_mbox_valid>
 800c318:	4603      	mov	r3, r0
 800c31a:	2b00      	cmp	r3, #0
 800c31c:	d105      	bne.n	800c32a <tcpip_callback_with_block+0x26>
 800c31e:	4b1b      	ldr	r3, [pc, #108]	; (800c38c <tcpip_callback_with_block+0x88>)
 800c320:	22ee      	movs	r2, #238	; 0xee
 800c322:	491b      	ldr	r1, [pc, #108]	; (800c390 <tcpip_callback_with_block+0x8c>)
 800c324:	481b      	ldr	r0, [pc, #108]	; (800c394 <tcpip_callback_with_block+0x90>)
 800c326:	f00b fcf1 	bl	8017d0c <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
 800c32a:	2008      	movs	r0, #8
 800c32c:	f000 fc6c 	bl	800cc08 <memp_malloc>
 800c330:	6178      	str	r0, [r7, #20]
  if (msg == NULL) {
 800c332:	697b      	ldr	r3, [r7, #20]
 800c334:	2b00      	cmp	r3, #0
 800c336:	d102      	bne.n	800c33e <tcpip_callback_with_block+0x3a>
    return ERR_MEM;
 800c338:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c33c:	e01f      	b.n	800c37e <tcpip_callback_with_block+0x7a>
  }

  msg->type = TCPIP_MSG_CALLBACK;
 800c33e:	697b      	ldr	r3, [r7, #20]
 800c340:	2203      	movs	r2, #3
 800c342:	701a      	strb	r2, [r3, #0]
  msg->msg.cb.function = function;
 800c344:	697b      	ldr	r3, [r7, #20]
 800c346:	68fa      	ldr	r2, [r7, #12]
 800c348:	605a      	str	r2, [r3, #4]
  msg->msg.cb.ctx = ctx;
 800c34a:	697b      	ldr	r3, [r7, #20]
 800c34c:	68ba      	ldr	r2, [r7, #8]
 800c34e:	609a      	str	r2, [r3, #8]
  if (block) {
 800c350:	79fb      	ldrb	r3, [r7, #7]
 800c352:	2b00      	cmp	r3, #0
 800c354:	d004      	beq.n	800c360 <tcpip_callback_with_block+0x5c>
    sys_mbox_post(&mbox, msg);
 800c356:	6979      	ldr	r1, [r7, #20]
 800c358:	480b      	ldr	r0, [pc, #44]	; (800c388 <tcpip_callback_with_block+0x84>)
 800c35a:	f00a fe11 	bl	8016f80 <sys_mbox_post>
 800c35e:	e00d      	b.n	800c37c <tcpip_callback_with_block+0x78>
  } else {
    if (sys_mbox_trypost(&mbox, msg) != ERR_OK) {
 800c360:	6979      	ldr	r1, [r7, #20]
 800c362:	4809      	ldr	r0, [pc, #36]	; (800c388 <tcpip_callback_with_block+0x84>)
 800c364:	f00a fe21 	bl	8016faa <sys_mbox_trypost>
 800c368:	4603      	mov	r3, r0
 800c36a:	2b00      	cmp	r3, #0
 800c36c:	d006      	beq.n	800c37c <tcpip_callback_with_block+0x78>
      memp_free(MEMP_TCPIP_MSG_API, msg);
 800c36e:	6979      	ldr	r1, [r7, #20]
 800c370:	2008      	movs	r0, #8
 800c372:	f000 fc9b 	bl	800ccac <memp_free>
      return ERR_MEM;
 800c376:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c37a:	e000      	b.n	800c37e <tcpip_callback_with_block+0x7a>
    }
  }
  return ERR_OK;
 800c37c:	2300      	movs	r3, #0
}
 800c37e:	4618      	mov	r0, r3
 800c380:	3718      	adds	r7, #24
 800c382:	46bd      	mov	sp, r7
 800c384:	bd80      	pop	{r7, pc}
 800c386:	bf00      	nop
 800c388:	20004b24 	.word	0x20004b24
 800c38c:	08018ab4 	.word	0x08018ab4
 800c390:	08018b2c 	.word	0x08018b2c
 800c394:	08018b04 	.word	0x08018b04

0800c398 <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
 800c398:	b580      	push	{r7, lr}
 800c39a:	b084      	sub	sp, #16
 800c39c:	af02      	add	r7, sp, #8
 800c39e:	6078      	str	r0, [r7, #4]
 800c3a0:	6039      	str	r1, [r7, #0]
  lwip_init();
 800c3a2:	f000 f86a 	bl	800c47a <lwip_init>

  tcpip_init_done = initfunc;
 800c3a6:	4a17      	ldr	r2, [pc, #92]	; (800c404 <tcpip_init+0x6c>)
 800c3a8:	687b      	ldr	r3, [r7, #4]
 800c3aa:	6013      	str	r3, [r2, #0]
  tcpip_init_done_arg = arg;
 800c3ac:	4a16      	ldr	r2, [pc, #88]	; (800c408 <tcpip_init+0x70>)
 800c3ae:	683b      	ldr	r3, [r7, #0]
 800c3b0:	6013      	str	r3, [r2, #0]
  if (sys_mbox_new(&mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 800c3b2:	2106      	movs	r1, #6
 800c3b4:	4815      	ldr	r0, [pc, #84]	; (800c40c <tcpip_init+0x74>)
 800c3b6:	f00a fdc9 	bl	8016f4c <sys_mbox_new>
 800c3ba:	4603      	mov	r3, r0
 800c3bc:	2b00      	cmp	r3, #0
 800c3be:	d006      	beq.n	800c3ce <tcpip_init+0x36>
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 800c3c0:	4b13      	ldr	r3, [pc, #76]	; (800c410 <tcpip_init+0x78>)
 800c3c2:	f240 12d5 	movw	r2, #469	; 0x1d5
 800c3c6:	4913      	ldr	r1, [pc, #76]	; (800c414 <tcpip_init+0x7c>)
 800c3c8:	4813      	ldr	r0, [pc, #76]	; (800c418 <tcpip_init+0x80>)
 800c3ca:	f00b fc9f 	bl	8017d0c <iprintf>
  }
#if LWIP_TCPIP_CORE_LOCKING
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 800c3ce:	4813      	ldr	r0, [pc, #76]	; (800c41c <tcpip_init+0x84>)
 800c3d0:	f00a fe54 	bl	801707c <sys_mutex_new>
 800c3d4:	4603      	mov	r3, r0
 800c3d6:	2b00      	cmp	r3, #0
 800c3d8:	d006      	beq.n	800c3e8 <tcpip_init+0x50>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
 800c3da:	4b0d      	ldr	r3, [pc, #52]	; (800c410 <tcpip_init+0x78>)
 800c3dc:	f240 12d9 	movw	r2, #473	; 0x1d9
 800c3e0:	490f      	ldr	r1, [pc, #60]	; (800c420 <tcpip_init+0x88>)
 800c3e2:	480d      	ldr	r0, [pc, #52]	; (800c418 <tcpip_init+0x80>)
 800c3e4:	f00b fc92 	bl	8017d0c <iprintf>
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 800c3e8:	2303      	movs	r3, #3
 800c3ea:	9300      	str	r3, [sp, #0]
 800c3ec:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c3f0:	2200      	movs	r2, #0
 800c3f2:	490c      	ldr	r1, [pc, #48]	; (800c424 <tcpip_init+0x8c>)
 800c3f4:	480c      	ldr	r0, [pc, #48]	; (800c428 <tcpip_init+0x90>)
 800c3f6:	f00a fe73 	bl	80170e0 <sys_thread_new>
}
 800c3fa:	bf00      	nop
 800c3fc:	3708      	adds	r7, #8
 800c3fe:	46bd      	mov	sp, r7
 800c400:	bd80      	pop	{r7, pc}
 800c402:	bf00      	nop
 800c404:	20004b1c 	.word	0x20004b1c
 800c408:	20004b20 	.word	0x20004b20
 800c40c:	20004b24 	.word	0x20004b24
 800c410:	08018ab4 	.word	0x08018ab4
 800c414:	08018b3c 	.word	0x08018b3c
 800c418:	08018b04 	.word	0x08018b04
 800c41c:	20007e7c 	.word	0x20007e7c
 800c420:	08018b60 	.word	0x08018b60
 800c424:	0800c16d 	.word	0x0800c16d
 800c428:	08018b84 	.word	0x08018b84

0800c42c <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 800c42c:	b480      	push	{r7}
 800c42e:	b083      	sub	sp, #12
 800c430:	af00      	add	r7, sp, #0
 800c432:	4603      	mov	r3, r0
 800c434:	80fb      	strh	r3, [r7, #6]
  return (u16_t)PP_HTONS(n);
 800c436:	88fb      	ldrh	r3, [r7, #6]
 800c438:	ba5b      	rev16	r3, r3
 800c43a:	b29b      	uxth	r3, r3
}
 800c43c:	4618      	mov	r0, r3
 800c43e:	370c      	adds	r7, #12
 800c440:	46bd      	mov	sp, r7
 800c442:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c446:	4770      	bx	lr

0800c448 <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 800c448:	b480      	push	{r7}
 800c44a:	b083      	sub	sp, #12
 800c44c:	af00      	add	r7, sp, #0
 800c44e:	6078      	str	r0, [r7, #4]
  return (u32_t)PP_HTONL(n);
 800c450:	687b      	ldr	r3, [r7, #4]
 800c452:	061a      	lsls	r2, r3, #24
 800c454:	687b      	ldr	r3, [r7, #4]
 800c456:	021b      	lsls	r3, r3, #8
 800c458:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800c45c:	431a      	orrs	r2, r3
 800c45e:	687b      	ldr	r3, [r7, #4]
 800c460:	0a1b      	lsrs	r3, r3, #8
 800c462:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800c466:	431a      	orrs	r2, r3
 800c468:	687b      	ldr	r3, [r7, #4]
 800c46a:	0e1b      	lsrs	r3, r3, #24
 800c46c:	4313      	orrs	r3, r2
}
 800c46e:	4618      	mov	r0, r3
 800c470:	370c      	adds	r7, #12
 800c472:	46bd      	mov	sp, r7
 800c474:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c478:	4770      	bx	lr

0800c47a <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 800c47a:	b580      	push	{r7, lr}
 800c47c:	b082      	sub	sp, #8
 800c47e:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 800c480:	2300      	movs	r3, #0
 800c482:	607b      	str	r3, [r7, #4]
#endif

  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
 800c484:	f00a fdee 	bl	8017064 <sys_init>
#endif /* !NO_SYS */
  mem_init();
 800c488:	f000 f8a6 	bl	800c5d8 <mem_init>
  memp_init();
 800c48c:	f000 fb70 	bl	800cb70 <memp_init>
  pbuf_init();
  netif_init();
 800c490:	f000 fc36 	bl	800cd00 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 800c494:	f006 f8ee 	bl	8012674 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 800c498:	f001 fbf0 	bl	800dc7c <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif
 
#if LWIP_TIMERS
  sys_timeouts_init();
 800c49c:	f005 ff80 	bl	80123a0 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 800c4a0:	bf00      	nop
 800c4a2:	3708      	adds	r7, #8
 800c4a4:	46bd      	mov	sp, r7
 800c4a6:	bd80      	pop	{r7, pc}

0800c4a8 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 800c4a8:	b580      	push	{r7, lr}
 800c4aa:	b084      	sub	sp, #16
 800c4ac:	af00      	add	r7, sp, #0
 800c4ae:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 800c4b0:	4b40      	ldr	r3, [pc, #256]	; (800c5b4 <plug_holes+0x10c>)
 800c4b2:	681b      	ldr	r3, [r3, #0]
 800c4b4:	687a      	ldr	r2, [r7, #4]
 800c4b6:	429a      	cmp	r2, r3
 800c4b8:	d206      	bcs.n	800c4c8 <plug_holes+0x20>
 800c4ba:	4b3f      	ldr	r3, [pc, #252]	; (800c5b8 <plug_holes+0x110>)
 800c4bc:	f240 125d 	movw	r2, #349	; 0x15d
 800c4c0:	493e      	ldr	r1, [pc, #248]	; (800c5bc <plug_holes+0x114>)
 800c4c2:	483f      	ldr	r0, [pc, #252]	; (800c5c0 <plug_holes+0x118>)
 800c4c4:	f00b fc22 	bl	8017d0c <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 800c4c8:	4b3e      	ldr	r3, [pc, #248]	; (800c5c4 <plug_holes+0x11c>)
 800c4ca:	681b      	ldr	r3, [r3, #0]
 800c4cc:	687a      	ldr	r2, [r7, #4]
 800c4ce:	429a      	cmp	r2, r3
 800c4d0:	d306      	bcc.n	800c4e0 <plug_holes+0x38>
 800c4d2:	4b39      	ldr	r3, [pc, #228]	; (800c5b8 <plug_holes+0x110>)
 800c4d4:	f44f 72af 	mov.w	r2, #350	; 0x15e
 800c4d8:	493b      	ldr	r1, [pc, #236]	; (800c5c8 <plug_holes+0x120>)
 800c4da:	4839      	ldr	r0, [pc, #228]	; (800c5c0 <plug_holes+0x118>)
 800c4dc:	f00b fc16 	bl	8017d0c <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 800c4e0:	687b      	ldr	r3, [r7, #4]
 800c4e2:	791b      	ldrb	r3, [r3, #4]
 800c4e4:	2b00      	cmp	r3, #0
 800c4e6:	d006      	beq.n	800c4f6 <plug_holes+0x4e>
 800c4e8:	4b33      	ldr	r3, [pc, #204]	; (800c5b8 <plug_holes+0x110>)
 800c4ea:	f240 125f 	movw	r2, #351	; 0x15f
 800c4ee:	4937      	ldr	r1, [pc, #220]	; (800c5cc <plug_holes+0x124>)
 800c4f0:	4833      	ldr	r0, [pc, #204]	; (800c5c0 <plug_holes+0x118>)
 800c4f2:	f00b fc0b 	bl	8017d0c <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 800c4f6:	687b      	ldr	r3, [r7, #4]
 800c4f8:	881b      	ldrh	r3, [r3, #0]
 800c4fa:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800c4fe:	d906      	bls.n	800c50e <plug_holes+0x66>
 800c500:	4b2d      	ldr	r3, [pc, #180]	; (800c5b8 <plug_holes+0x110>)
 800c502:	f44f 72b1 	mov.w	r2, #354	; 0x162
 800c506:	4932      	ldr	r1, [pc, #200]	; (800c5d0 <plug_holes+0x128>)
 800c508:	482d      	ldr	r0, [pc, #180]	; (800c5c0 <plug_holes+0x118>)
 800c50a:	f00b fbff 	bl	8017d0c <iprintf>

  nmem = (struct mem *)(void *)&ram[mem->next];
 800c50e:	4b29      	ldr	r3, [pc, #164]	; (800c5b4 <plug_holes+0x10c>)
 800c510:	681b      	ldr	r3, [r3, #0]
 800c512:	687a      	ldr	r2, [r7, #4]
 800c514:	8812      	ldrh	r2, [r2, #0]
 800c516:	4413      	add	r3, r2
 800c518:	60fb      	str	r3, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 800c51a:	687a      	ldr	r2, [r7, #4]
 800c51c:	68fb      	ldr	r3, [r7, #12]
 800c51e:	429a      	cmp	r2, r3
 800c520:	d01f      	beq.n	800c562 <plug_holes+0xba>
 800c522:	68fb      	ldr	r3, [r7, #12]
 800c524:	791b      	ldrb	r3, [r3, #4]
 800c526:	2b00      	cmp	r3, #0
 800c528:	d11b      	bne.n	800c562 <plug_holes+0xba>
 800c52a:	4b26      	ldr	r3, [pc, #152]	; (800c5c4 <plug_holes+0x11c>)
 800c52c:	681b      	ldr	r3, [r3, #0]
 800c52e:	68fa      	ldr	r2, [r7, #12]
 800c530:	429a      	cmp	r2, r3
 800c532:	d016      	beq.n	800c562 <plug_holes+0xba>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 800c534:	4b27      	ldr	r3, [pc, #156]	; (800c5d4 <plug_holes+0x12c>)
 800c536:	681b      	ldr	r3, [r3, #0]
 800c538:	68fa      	ldr	r2, [r7, #12]
 800c53a:	429a      	cmp	r2, r3
 800c53c:	d102      	bne.n	800c544 <plug_holes+0x9c>
      lfree = mem;
 800c53e:	4a25      	ldr	r2, [pc, #148]	; (800c5d4 <plug_holes+0x12c>)
 800c540:	687b      	ldr	r3, [r7, #4]
 800c542:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 800c544:	68fb      	ldr	r3, [r7, #12]
 800c546:	881a      	ldrh	r2, [r3, #0]
 800c548:	687b      	ldr	r3, [r7, #4]
 800c54a:	801a      	strh	r2, [r3, #0]
    ((struct mem *)(void *)&ram[nmem->next])->prev = (mem_size_t)((u8_t *)mem - ram);
 800c54c:	687b      	ldr	r3, [r7, #4]
 800c54e:	4a19      	ldr	r2, [pc, #100]	; (800c5b4 <plug_holes+0x10c>)
 800c550:	6812      	ldr	r2, [r2, #0]
 800c552:	1a99      	subs	r1, r3, r2
 800c554:	4b17      	ldr	r3, [pc, #92]	; (800c5b4 <plug_holes+0x10c>)
 800c556:	681b      	ldr	r3, [r3, #0]
 800c558:	68fa      	ldr	r2, [r7, #12]
 800c55a:	8812      	ldrh	r2, [r2, #0]
 800c55c:	4413      	add	r3, r2
 800c55e:	b28a      	uxth	r2, r1
 800c560:	805a      	strh	r2, [r3, #2]
  }

  /* plug hole backward */
  pmem = (struct mem *)(void *)&ram[mem->prev];
 800c562:	4b14      	ldr	r3, [pc, #80]	; (800c5b4 <plug_holes+0x10c>)
 800c564:	681b      	ldr	r3, [r3, #0]
 800c566:	687a      	ldr	r2, [r7, #4]
 800c568:	8852      	ldrh	r2, [r2, #2]
 800c56a:	4413      	add	r3, r2
 800c56c:	60bb      	str	r3, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 800c56e:	68ba      	ldr	r2, [r7, #8]
 800c570:	687b      	ldr	r3, [r7, #4]
 800c572:	429a      	cmp	r2, r3
 800c574:	d01a      	beq.n	800c5ac <plug_holes+0x104>
 800c576:	68bb      	ldr	r3, [r7, #8]
 800c578:	791b      	ldrb	r3, [r3, #4]
 800c57a:	2b00      	cmp	r3, #0
 800c57c:	d116      	bne.n	800c5ac <plug_holes+0x104>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 800c57e:	4b15      	ldr	r3, [pc, #84]	; (800c5d4 <plug_holes+0x12c>)
 800c580:	681b      	ldr	r3, [r3, #0]
 800c582:	687a      	ldr	r2, [r7, #4]
 800c584:	429a      	cmp	r2, r3
 800c586:	d102      	bne.n	800c58e <plug_holes+0xe6>
      lfree = pmem;
 800c588:	4a12      	ldr	r2, [pc, #72]	; (800c5d4 <plug_holes+0x12c>)
 800c58a:	68bb      	ldr	r3, [r7, #8]
 800c58c:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 800c58e:	687b      	ldr	r3, [r7, #4]
 800c590:	881a      	ldrh	r2, [r3, #0]
 800c592:	68bb      	ldr	r3, [r7, #8]
 800c594:	801a      	strh	r2, [r3, #0]
    ((struct mem *)(void *)&ram[mem->next])->prev = (mem_size_t)((u8_t *)pmem - ram);
 800c596:	68bb      	ldr	r3, [r7, #8]
 800c598:	4a06      	ldr	r2, [pc, #24]	; (800c5b4 <plug_holes+0x10c>)
 800c59a:	6812      	ldr	r2, [r2, #0]
 800c59c:	1a99      	subs	r1, r3, r2
 800c59e:	4b05      	ldr	r3, [pc, #20]	; (800c5b4 <plug_holes+0x10c>)
 800c5a0:	681b      	ldr	r3, [r3, #0]
 800c5a2:	687a      	ldr	r2, [r7, #4]
 800c5a4:	8812      	ldrh	r2, [r2, #0]
 800c5a6:	4413      	add	r3, r2
 800c5a8:	b28a      	uxth	r2, r1
 800c5aa:	805a      	strh	r2, [r3, #2]
  }
}
 800c5ac:	bf00      	nop
 800c5ae:	3710      	adds	r7, #16
 800c5b0:	46bd      	mov	sp, r7
 800c5b2:	bd80      	pop	{r7, pc}
 800c5b4:	20004b28 	.word	0x20004b28
 800c5b8:	08018b94 	.word	0x08018b94
 800c5bc:	08018bc4 	.word	0x08018bc4
 800c5c0:	08018bdc 	.word	0x08018bdc
 800c5c4:	20004b2c 	.word	0x20004b2c
 800c5c8:	08018c04 	.word	0x08018c04
 800c5cc:	08018c20 	.word	0x08018c20
 800c5d0:	08018c3c 	.word	0x08018c3c
 800c5d4:	20004b30 	.word	0x20004b30

0800c5d8 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 800c5d8:	b580      	push	{r7, lr}
 800c5da:	b082      	sub	sp, #8
 800c5dc:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
    (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT-1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 800c5de:	4b1e      	ldr	r3, [pc, #120]	; (800c658 <mem_init+0x80>)
 800c5e0:	3303      	adds	r3, #3
 800c5e2:	f023 0303 	bic.w	r3, r3, #3
 800c5e6:	461a      	mov	r2, r3
 800c5e8:	4b1c      	ldr	r3, [pc, #112]	; (800c65c <mem_init+0x84>)
 800c5ea:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 800c5ec:	4b1b      	ldr	r3, [pc, #108]	; (800c65c <mem_init+0x84>)
 800c5ee:	681b      	ldr	r3, [r3, #0]
 800c5f0:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 800c5f2:	687b      	ldr	r3, [r7, #4]
 800c5f4:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800c5f8:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 800c5fa:	687b      	ldr	r3, [r7, #4]
 800c5fc:	2200      	movs	r2, #0
 800c5fe:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 800c600:	687b      	ldr	r3, [r7, #4]
 800c602:	2200      	movs	r2, #0
 800c604:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = (struct mem *)(void *)&ram[MEM_SIZE_ALIGNED];
 800c606:	4b15      	ldr	r3, [pc, #84]	; (800c65c <mem_init+0x84>)
 800c608:	681b      	ldr	r3, [r3, #0]
 800c60a:	f503 63c8 	add.w	r3, r3, #1600	; 0x640
 800c60e:	4a14      	ldr	r2, [pc, #80]	; (800c660 <mem_init+0x88>)
 800c610:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 800c612:	4b13      	ldr	r3, [pc, #76]	; (800c660 <mem_init+0x88>)
 800c614:	681b      	ldr	r3, [r3, #0]
 800c616:	2201      	movs	r2, #1
 800c618:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 800c61a:	4b11      	ldr	r3, [pc, #68]	; (800c660 <mem_init+0x88>)
 800c61c:	681b      	ldr	r3, [r3, #0]
 800c61e:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800c622:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 800c624:	4b0e      	ldr	r3, [pc, #56]	; (800c660 <mem_init+0x88>)
 800c626:	681b      	ldr	r3, [r3, #0]
 800c628:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800c62c:	805a      	strh	r2, [r3, #2]

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 800c62e:	4b0b      	ldr	r3, [pc, #44]	; (800c65c <mem_init+0x84>)
 800c630:	681b      	ldr	r3, [r3, #0]
 800c632:	4a0c      	ldr	r2, [pc, #48]	; (800c664 <mem_init+0x8c>)
 800c634:	6013      	str	r3, [r2, #0]

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 800c636:	480c      	ldr	r0, [pc, #48]	; (800c668 <mem_init+0x90>)
 800c638:	f00a fd20 	bl	801707c <sys_mutex_new>
 800c63c:	4603      	mov	r3, r0
 800c63e:	2b00      	cmp	r3, #0
 800c640:	d006      	beq.n	800c650 <mem_init+0x78>
    LWIP_ASSERT("failed to create mem_mutex", 0);
 800c642:	4b0a      	ldr	r3, [pc, #40]	; (800c66c <mem_init+0x94>)
 800c644:	f44f 72cc 	mov.w	r2, #408	; 0x198
 800c648:	4909      	ldr	r1, [pc, #36]	; (800c670 <mem_init+0x98>)
 800c64a:	480a      	ldr	r0, [pc, #40]	; (800c674 <mem_init+0x9c>)
 800c64c:	f00b fb5e 	bl	8017d0c <iprintf>
  }
}
 800c650:	bf00      	nop
 800c652:	3708      	adds	r7, #8
 800c654:	46bd      	mov	sp, r7
 800c656:	bd80      	pop	{r7, pc}
 800c658:	20007e98 	.word	0x20007e98
 800c65c:	20004b28 	.word	0x20004b28
 800c660:	20004b2c 	.word	0x20004b2c
 800c664:	20004b30 	.word	0x20004b30
 800c668:	20004b34 	.word	0x20004b34
 800c66c:	08018b94 	.word	0x08018b94
 800c670:	08018c68 	.word	0x08018c68
 800c674:	08018bdc 	.word	0x08018bdc

0800c678 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 800c678:	b580      	push	{r7, lr}
 800c67a:	b084      	sub	sp, #16
 800c67c:	af00      	add	r7, sp, #0
 800c67e:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 800c680:	687b      	ldr	r3, [r7, #4]
 800c682:	2b00      	cmp	r3, #0
 800c684:	d050      	beq.n	800c728 <mem_free+0xb0>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  LWIP_ASSERT("mem_free: sanity check alignment", (((mem_ptr_t)rmem) & (MEM_ALIGNMENT-1)) == 0);
 800c686:	687b      	ldr	r3, [r7, #4]
 800c688:	f003 0303 	and.w	r3, r3, #3
 800c68c:	2b00      	cmp	r3, #0
 800c68e:	d006      	beq.n	800c69e <mem_free+0x26>
 800c690:	4b27      	ldr	r3, [pc, #156]	; (800c730 <mem_free+0xb8>)
 800c692:	f44f 72d6 	mov.w	r2, #428	; 0x1ac
 800c696:	4927      	ldr	r1, [pc, #156]	; (800c734 <mem_free+0xbc>)
 800c698:	4827      	ldr	r0, [pc, #156]	; (800c738 <mem_free+0xc0>)
 800c69a:	f00b fb37 	bl	8017d0c <iprintf>

  LWIP_ASSERT("mem_free: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 800c69e:	4b27      	ldr	r3, [pc, #156]	; (800c73c <mem_free+0xc4>)
 800c6a0:	681b      	ldr	r3, [r3, #0]
 800c6a2:	687a      	ldr	r2, [r7, #4]
 800c6a4:	429a      	cmp	r2, r3
 800c6a6:	d304      	bcc.n	800c6b2 <mem_free+0x3a>
 800c6a8:	4b25      	ldr	r3, [pc, #148]	; (800c740 <mem_free+0xc8>)
 800c6aa:	681b      	ldr	r3, [r3, #0]
 800c6ac:	687a      	ldr	r2, [r7, #4]
 800c6ae:	429a      	cmp	r2, r3
 800c6b0:	d306      	bcc.n	800c6c0 <mem_free+0x48>
 800c6b2:	4b1f      	ldr	r3, [pc, #124]	; (800c730 <mem_free+0xb8>)
 800c6b4:	f240 12af 	movw	r2, #431	; 0x1af
 800c6b8:	4922      	ldr	r1, [pc, #136]	; (800c744 <mem_free+0xcc>)
 800c6ba:	481f      	ldr	r0, [pc, #124]	; (800c738 <mem_free+0xc0>)
 800c6bc:	f00b fb26 	bl	8017d0c <iprintf>
    (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 800c6c0:	4b1e      	ldr	r3, [pc, #120]	; (800c73c <mem_free+0xc4>)
 800c6c2:	681b      	ldr	r3, [r3, #0]
 800c6c4:	687a      	ldr	r2, [r7, #4]
 800c6c6:	429a      	cmp	r2, r3
 800c6c8:	d304      	bcc.n	800c6d4 <mem_free+0x5c>
 800c6ca:	4b1d      	ldr	r3, [pc, #116]	; (800c740 <mem_free+0xc8>)
 800c6cc:	681b      	ldr	r3, [r3, #0]
 800c6ce:	687a      	ldr	r2, [r7, #4]
 800c6d0:	429a      	cmp	r2, r3
 800c6d2:	d306      	bcc.n	800c6e2 <mem_free+0x6a>
    SYS_ARCH_DECL_PROTECT(lev);
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    SYS_ARCH_PROTECT(lev);
 800c6d4:	f00a fd24 	bl	8017120 <sys_arch_protect>
 800c6d8:	60b8      	str	r0, [r7, #8]
    MEM_STATS_INC(illegal);
    SYS_ARCH_UNPROTECT(lev);
 800c6da:	68b8      	ldr	r0, [r7, #8]
 800c6dc:	f00a fd2e 	bl	801713c <sys_arch_unprotect>
    return;
 800c6e0:	e023      	b.n	800c72a <mem_free+0xb2>
  }
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800c6e2:	4819      	ldr	r0, [pc, #100]	; (800c748 <mem_free+0xd0>)
 800c6e4:	f00a fce0 	bl	80170a8 <sys_mutex_lock>
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - SIZEOF_STRUCT_MEM);
 800c6e8:	687b      	ldr	r3, [r7, #4]
 800c6ea:	3b08      	subs	r3, #8
 800c6ec:	60fb      	str	r3, [r7, #12]
  /* ... which has to be in a used state ... */
  LWIP_ASSERT("mem_free: mem->used", mem->used);
 800c6ee:	68fb      	ldr	r3, [r7, #12]
 800c6f0:	791b      	ldrb	r3, [r3, #4]
 800c6f2:	2b00      	cmp	r3, #0
 800c6f4:	d106      	bne.n	800c704 <mem_free+0x8c>
 800c6f6:	4b0e      	ldr	r3, [pc, #56]	; (800c730 <mem_free+0xb8>)
 800c6f8:	f44f 72e0 	mov.w	r2, #448	; 0x1c0
 800c6fc:	4913      	ldr	r1, [pc, #76]	; (800c74c <mem_free+0xd4>)
 800c6fe:	480e      	ldr	r0, [pc, #56]	; (800c738 <mem_free+0xc0>)
 800c700:	f00b fb04 	bl	8017d0c <iprintf>
  /* ... and is now unused. */
  mem->used = 0;
 800c704:	68fb      	ldr	r3, [r7, #12]
 800c706:	2200      	movs	r2, #0
 800c708:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 800c70a:	4b11      	ldr	r3, [pc, #68]	; (800c750 <mem_free+0xd8>)
 800c70c:	681b      	ldr	r3, [r3, #0]
 800c70e:	68fa      	ldr	r2, [r7, #12]
 800c710:	429a      	cmp	r2, r3
 800c712:	d202      	bcs.n	800c71a <mem_free+0xa2>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 800c714:	4a0e      	ldr	r2, [pc, #56]	; (800c750 <mem_free+0xd8>)
 800c716:	68fb      	ldr	r3, [r7, #12]
 800c718:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 800c71a:	68f8      	ldr	r0, [r7, #12]
 800c71c:	f7ff fec4 	bl	800c4a8 <plug_holes>
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800c720:	4809      	ldr	r0, [pc, #36]	; (800c748 <mem_free+0xd0>)
 800c722:	f00a fcd0 	bl	80170c6 <sys_mutex_unlock>
 800c726:	e000      	b.n	800c72a <mem_free+0xb2>
    return;
 800c728:	bf00      	nop
}
 800c72a:	3710      	adds	r7, #16
 800c72c:	46bd      	mov	sp, r7
 800c72e:	bd80      	pop	{r7, pc}
 800c730:	08018b94 	.word	0x08018b94
 800c734:	08018c84 	.word	0x08018c84
 800c738:	08018bdc 	.word	0x08018bdc
 800c73c:	20004b28 	.word	0x20004b28
 800c740:	20004b2c 	.word	0x20004b2c
 800c744:	08018ca8 	.word	0x08018ca8
 800c748:	20004b34 	.word	0x20004b34
 800c74c:	08018cc0 	.word	0x08018cc0
 800c750:	20004b30 	.word	0x20004b30

0800c754 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t newsize)
{
 800c754:	b580      	push	{r7, lr}
 800c756:	b088      	sub	sp, #32
 800c758:	af00      	add	r7, sp, #0
 800c75a:	6078      	str	r0, [r7, #4]
 800c75c:	460b      	mov	r3, r1
 800c75e:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = LWIP_MEM_ALIGN_SIZE(newsize);
 800c760:	887b      	ldrh	r3, [r7, #2]
 800c762:	3303      	adds	r3, #3
 800c764:	b29b      	uxth	r3, r3
 800c766:	f023 0303 	bic.w	r3, r3, #3
 800c76a:	807b      	strh	r3, [r7, #2]

  if (newsize < MIN_SIZE_ALIGNED) {
 800c76c:	887b      	ldrh	r3, [r7, #2]
 800c76e:	2b0b      	cmp	r3, #11
 800c770:	d801      	bhi.n	800c776 <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 800c772:	230c      	movs	r3, #12
 800c774:	807b      	strh	r3, [r7, #2]
  }

  if (newsize > MEM_SIZE_ALIGNED) {
 800c776:	887b      	ldrh	r3, [r7, #2]
 800c778:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800c77c:	d901      	bls.n	800c782 <mem_trim+0x2e>
    return NULL;
 800c77e:	2300      	movs	r3, #0
 800c780:	e0bd      	b.n	800c8fe <mem_trim+0x1aa>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 800c782:	4b61      	ldr	r3, [pc, #388]	; (800c908 <mem_trim+0x1b4>)
 800c784:	681b      	ldr	r3, [r3, #0]
 800c786:	687a      	ldr	r2, [r7, #4]
 800c788:	429a      	cmp	r2, r3
 800c78a:	d304      	bcc.n	800c796 <mem_trim+0x42>
 800c78c:	4b5f      	ldr	r3, [pc, #380]	; (800c90c <mem_trim+0x1b8>)
 800c78e:	681b      	ldr	r3, [r3, #0]
 800c790:	687a      	ldr	r2, [r7, #4]
 800c792:	429a      	cmp	r2, r3
 800c794:	d306      	bcc.n	800c7a4 <mem_trim+0x50>
 800c796:	4b5e      	ldr	r3, [pc, #376]	; (800c910 <mem_trim+0x1bc>)
 800c798:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800c79c:	495d      	ldr	r1, [pc, #372]	; (800c914 <mem_trim+0x1c0>)
 800c79e:	485e      	ldr	r0, [pc, #376]	; (800c918 <mem_trim+0x1c4>)
 800c7a0:	f00b fab4 	bl	8017d0c <iprintf>
   (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 800c7a4:	4b58      	ldr	r3, [pc, #352]	; (800c908 <mem_trim+0x1b4>)
 800c7a6:	681b      	ldr	r3, [r3, #0]
 800c7a8:	687a      	ldr	r2, [r7, #4]
 800c7aa:	429a      	cmp	r2, r3
 800c7ac:	d304      	bcc.n	800c7b8 <mem_trim+0x64>
 800c7ae:	4b57      	ldr	r3, [pc, #348]	; (800c90c <mem_trim+0x1b8>)
 800c7b0:	681b      	ldr	r3, [r3, #0]
 800c7b2:	687a      	ldr	r2, [r7, #4]
 800c7b4:	429a      	cmp	r2, r3
 800c7b6:	d307      	bcc.n	800c7c8 <mem_trim+0x74>
    SYS_ARCH_DECL_PROTECT(lev);
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    SYS_ARCH_PROTECT(lev);
 800c7b8:	f00a fcb2 	bl	8017120 <sys_arch_protect>
 800c7bc:	60f8      	str	r0, [r7, #12]
    MEM_STATS_INC(illegal);
    SYS_ARCH_UNPROTECT(lev);
 800c7be:	68f8      	ldr	r0, [r7, #12]
 800c7c0:	f00a fcbc 	bl	801713c <sys_arch_unprotect>
    return rmem;
 800c7c4:	687b      	ldr	r3, [r7, #4]
 800c7c6:	e09a      	b.n	800c8fe <mem_trim+0x1aa>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - SIZEOF_STRUCT_MEM);
 800c7c8:	687b      	ldr	r3, [r7, #4]
 800c7ca:	3b08      	subs	r3, #8
 800c7cc:	61fb      	str	r3, [r7, #28]
  /* ... and its offset pointer */
  ptr = (mem_size_t)((u8_t *)mem - ram);
 800c7ce:	69fb      	ldr	r3, [r7, #28]
 800c7d0:	4a4d      	ldr	r2, [pc, #308]	; (800c908 <mem_trim+0x1b4>)
 800c7d2:	6812      	ldr	r2, [r2, #0]
 800c7d4:	1a9b      	subs	r3, r3, r2
 800c7d6:	837b      	strh	r3, [r7, #26]

  size = mem->next - ptr - SIZEOF_STRUCT_MEM;
 800c7d8:	69fb      	ldr	r3, [r7, #28]
 800c7da:	881a      	ldrh	r2, [r3, #0]
 800c7dc:	8b7b      	ldrh	r3, [r7, #26]
 800c7de:	1ad3      	subs	r3, r2, r3
 800c7e0:	b29b      	uxth	r3, r3
 800c7e2:	3b08      	subs	r3, #8
 800c7e4:	833b      	strh	r3, [r7, #24]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 800c7e6:	887a      	ldrh	r2, [r7, #2]
 800c7e8:	8b3b      	ldrh	r3, [r7, #24]
 800c7ea:	429a      	cmp	r2, r3
 800c7ec:	d906      	bls.n	800c7fc <mem_trim+0xa8>
 800c7ee:	4b48      	ldr	r3, [pc, #288]	; (800c910 <mem_trim+0x1bc>)
 800c7f0:	f240 2206 	movw	r2, #518	; 0x206
 800c7f4:	4949      	ldr	r1, [pc, #292]	; (800c91c <mem_trim+0x1c8>)
 800c7f6:	4848      	ldr	r0, [pc, #288]	; (800c918 <mem_trim+0x1c4>)
 800c7f8:	f00b fa88 	bl	8017d0c <iprintf>
  if (newsize > size) {
 800c7fc:	887a      	ldrh	r2, [r7, #2]
 800c7fe:	8b3b      	ldrh	r3, [r7, #24]
 800c800:	429a      	cmp	r2, r3
 800c802:	d901      	bls.n	800c808 <mem_trim+0xb4>
    /* not supported */
    return NULL;
 800c804:	2300      	movs	r3, #0
 800c806:	e07a      	b.n	800c8fe <mem_trim+0x1aa>
  }
  if (newsize == size) {
 800c808:	887a      	ldrh	r2, [r7, #2]
 800c80a:	8b3b      	ldrh	r3, [r7, #24]
 800c80c:	429a      	cmp	r2, r3
 800c80e:	d101      	bne.n	800c814 <mem_trim+0xc0>
    /* No change in size, simply return */
    return rmem;
 800c810:	687b      	ldr	r3, [r7, #4]
 800c812:	e074      	b.n	800c8fe <mem_trim+0x1aa>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800c814:	4842      	ldr	r0, [pc, #264]	; (800c920 <mem_trim+0x1cc>)
 800c816:	f00a fc47 	bl	80170a8 <sys_mutex_lock>

  mem2 = (struct mem *)(void *)&ram[mem->next];
 800c81a:	4b3b      	ldr	r3, [pc, #236]	; (800c908 <mem_trim+0x1b4>)
 800c81c:	681b      	ldr	r3, [r3, #0]
 800c81e:	69fa      	ldr	r2, [r7, #28]
 800c820:	8812      	ldrh	r2, [r2, #0]
 800c822:	4413      	add	r3, r2
 800c824:	617b      	str	r3, [r7, #20]
  if (mem2->used == 0) {
 800c826:	697b      	ldr	r3, [r7, #20]
 800c828:	791b      	ldrb	r3, [r3, #4]
 800c82a:	2b00      	cmp	r3, #0
 800c82c:	d131      	bne.n	800c892 <mem_trim+0x13e>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    /* remember the old next pointer */
    next = mem2->next;
 800c82e:	697b      	ldr	r3, [r7, #20]
 800c830:	881b      	ldrh	r3, [r3, #0]
 800c832:	823b      	strh	r3, [r7, #16]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = ptr + SIZEOF_STRUCT_MEM + newsize;
 800c834:	8b7a      	ldrh	r2, [r7, #26]
 800c836:	887b      	ldrh	r3, [r7, #2]
 800c838:	4413      	add	r3, r2
 800c83a:	b29b      	uxth	r3, r3
 800c83c:	3308      	adds	r3, #8
 800c83e:	827b      	strh	r3, [r7, #18]
    if (lfree == mem2) {
 800c840:	4b38      	ldr	r3, [pc, #224]	; (800c924 <mem_trim+0x1d0>)
 800c842:	681b      	ldr	r3, [r3, #0]
 800c844:	697a      	ldr	r2, [r7, #20]
 800c846:	429a      	cmp	r2, r3
 800c848:	d105      	bne.n	800c856 <mem_trim+0x102>
      lfree = (struct mem *)(void *)&ram[ptr2];
 800c84a:	4b2f      	ldr	r3, [pc, #188]	; (800c908 <mem_trim+0x1b4>)
 800c84c:	681a      	ldr	r2, [r3, #0]
 800c84e:	8a7b      	ldrh	r3, [r7, #18]
 800c850:	4413      	add	r3, r2
 800c852:	4a34      	ldr	r2, [pc, #208]	; (800c924 <mem_trim+0x1d0>)
 800c854:	6013      	str	r3, [r2, #0]
    }
    mem2 = (struct mem *)(void *)&ram[ptr2];
 800c856:	4b2c      	ldr	r3, [pc, #176]	; (800c908 <mem_trim+0x1b4>)
 800c858:	681a      	ldr	r2, [r3, #0]
 800c85a:	8a7b      	ldrh	r3, [r7, #18]
 800c85c:	4413      	add	r3, r2
 800c85e:	617b      	str	r3, [r7, #20]
    mem2->used = 0;
 800c860:	697b      	ldr	r3, [r7, #20]
 800c862:	2200      	movs	r2, #0
 800c864:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 800c866:	697b      	ldr	r3, [r7, #20]
 800c868:	8a3a      	ldrh	r2, [r7, #16]
 800c86a:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 800c86c:	697b      	ldr	r3, [r7, #20]
 800c86e:	8b7a      	ldrh	r2, [r7, #26]
 800c870:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 800c872:	69fb      	ldr	r3, [r7, #28]
 800c874:	8a7a      	ldrh	r2, [r7, #18]
 800c876:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800c878:	697b      	ldr	r3, [r7, #20]
 800c87a:	881b      	ldrh	r3, [r3, #0]
 800c87c:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800c880:	d039      	beq.n	800c8f6 <mem_trim+0x1a2>
      ((struct mem *)(void *)&ram[mem2->next])->prev = ptr2;
 800c882:	4b21      	ldr	r3, [pc, #132]	; (800c908 <mem_trim+0x1b4>)
 800c884:	681b      	ldr	r3, [r3, #0]
 800c886:	697a      	ldr	r2, [r7, #20]
 800c888:	8812      	ldrh	r2, [r2, #0]
 800c88a:	4413      	add	r3, r2
 800c88c:	8a7a      	ldrh	r2, [r7, #18]
 800c88e:	805a      	strh	r2, [r3, #2]
 800c890:	e031      	b.n	800c8f6 <mem_trim+0x1a2>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 800c892:	887b      	ldrh	r3, [r7, #2]
 800c894:	f103 0214 	add.w	r2, r3, #20
 800c898:	8b3b      	ldrh	r3, [r7, #24]
 800c89a:	429a      	cmp	r2, r3
 800c89c:	d82b      	bhi.n	800c8f6 <mem_trim+0x1a2>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = ptr + SIZEOF_STRUCT_MEM + newsize;
 800c89e:	8b7a      	ldrh	r2, [r7, #26]
 800c8a0:	887b      	ldrh	r3, [r7, #2]
 800c8a2:	4413      	add	r3, r2
 800c8a4:	b29b      	uxth	r3, r3
 800c8a6:	3308      	adds	r3, #8
 800c8a8:	827b      	strh	r3, [r7, #18]
    mem2 = (struct mem *)(void *)&ram[ptr2];
 800c8aa:	4b17      	ldr	r3, [pc, #92]	; (800c908 <mem_trim+0x1b4>)
 800c8ac:	681a      	ldr	r2, [r3, #0]
 800c8ae:	8a7b      	ldrh	r3, [r7, #18]
 800c8b0:	4413      	add	r3, r2
 800c8b2:	617b      	str	r3, [r7, #20]
    if (mem2 < lfree) {
 800c8b4:	4b1b      	ldr	r3, [pc, #108]	; (800c924 <mem_trim+0x1d0>)
 800c8b6:	681b      	ldr	r3, [r3, #0]
 800c8b8:	697a      	ldr	r2, [r7, #20]
 800c8ba:	429a      	cmp	r2, r3
 800c8bc:	d202      	bcs.n	800c8c4 <mem_trim+0x170>
      lfree = mem2;
 800c8be:	4a19      	ldr	r2, [pc, #100]	; (800c924 <mem_trim+0x1d0>)
 800c8c0:	697b      	ldr	r3, [r7, #20]
 800c8c2:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 800c8c4:	697b      	ldr	r3, [r7, #20]
 800c8c6:	2200      	movs	r2, #0
 800c8c8:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 800c8ca:	69fb      	ldr	r3, [r7, #28]
 800c8cc:	881a      	ldrh	r2, [r3, #0]
 800c8ce:	697b      	ldr	r3, [r7, #20]
 800c8d0:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 800c8d2:	697b      	ldr	r3, [r7, #20]
 800c8d4:	8b7a      	ldrh	r2, [r7, #26]
 800c8d6:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 800c8d8:	69fb      	ldr	r3, [r7, #28]
 800c8da:	8a7a      	ldrh	r2, [r7, #18]
 800c8dc:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800c8de:	697b      	ldr	r3, [r7, #20]
 800c8e0:	881b      	ldrh	r3, [r3, #0]
 800c8e2:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800c8e6:	d006      	beq.n	800c8f6 <mem_trim+0x1a2>
      ((struct mem *)(void *)&ram[mem2->next])->prev = ptr2;
 800c8e8:	4b07      	ldr	r3, [pc, #28]	; (800c908 <mem_trim+0x1b4>)
 800c8ea:	681b      	ldr	r3, [r3, #0]
 800c8ec:	697a      	ldr	r2, [r7, #20]
 800c8ee:	8812      	ldrh	r2, [r2, #0]
 800c8f0:	4413      	add	r3, r2
 800c8f2:	8a7a      	ldrh	r2, [r7, #18]
 800c8f4:	805a      	strh	r2, [r3, #2]
    -> the remaining space stays unused since it is too small
  } */
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800c8f6:	480a      	ldr	r0, [pc, #40]	; (800c920 <mem_trim+0x1cc>)
 800c8f8:	f00a fbe5 	bl	80170c6 <sys_mutex_unlock>
  return rmem;
 800c8fc:	687b      	ldr	r3, [r7, #4]
}
 800c8fe:	4618      	mov	r0, r3
 800c900:	3720      	adds	r7, #32
 800c902:	46bd      	mov	sp, r7
 800c904:	bd80      	pop	{r7, pc}
 800c906:	bf00      	nop
 800c908:	20004b28 	.word	0x20004b28
 800c90c:	20004b2c 	.word	0x20004b2c
 800c910:	08018b94 	.word	0x08018b94
 800c914:	08018cd4 	.word	0x08018cd4
 800c918:	08018bdc 	.word	0x08018bdc
 800c91c:	08018cec 	.word	0x08018cec
 800c920:	20004b34 	.word	0x20004b34
 800c924:	20004b30 	.word	0x20004b30

0800c928 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size)
{
 800c928:	b580      	push	{r7, lr}
 800c92a:	b088      	sub	sp, #32
 800c92c:	af00      	add	r7, sp, #0
 800c92e:	4603      	mov	r3, r0
 800c930:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size == 0) {
 800c932:	88fb      	ldrh	r3, [r7, #6]
 800c934:	2b00      	cmp	r3, #0
 800c936:	d101      	bne.n	800c93c <mem_malloc+0x14>
    return NULL;
 800c938:	2300      	movs	r3, #0
 800c93a:	e0d1      	b.n	800cae0 <mem_malloc+0x1b8>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = LWIP_MEM_ALIGN_SIZE(size);
 800c93c:	88fb      	ldrh	r3, [r7, #6]
 800c93e:	3303      	adds	r3, #3
 800c940:	b29b      	uxth	r3, r3
 800c942:	f023 0303 	bic.w	r3, r3, #3
 800c946:	80fb      	strh	r3, [r7, #6]

  if (size < MIN_SIZE_ALIGNED) {
 800c948:	88fb      	ldrh	r3, [r7, #6]
 800c94a:	2b0b      	cmp	r3, #11
 800c94c:	d801      	bhi.n	800c952 <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 800c94e:	230c      	movs	r3, #12
 800c950:	80fb      	strh	r3, [r7, #6]
  }

  if (size > MEM_SIZE_ALIGNED) {
 800c952:	88fb      	ldrh	r3, [r7, #6]
 800c954:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800c958:	d901      	bls.n	800c95e <mem_malloc+0x36>
    return NULL;
 800c95a:	2300      	movs	r3, #0
 800c95c:	e0c0      	b.n	800cae0 <mem_malloc+0x1b8>
  }

  /* protect the heap from concurrent access */
  sys_mutex_lock(&mem_mutex);
 800c95e:	4862      	ldr	r0, [pc, #392]	; (800cae8 <mem_malloc+0x1c0>)
 800c960:	f00a fba2 	bl	80170a8 <sys_mutex_lock>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = (mem_size_t)((u8_t *)lfree - ram); ptr < MEM_SIZE_ALIGNED - size;
 800c964:	4b61      	ldr	r3, [pc, #388]	; (800caec <mem_malloc+0x1c4>)
 800c966:	681b      	ldr	r3, [r3, #0]
 800c968:	461a      	mov	r2, r3
 800c96a:	4b61      	ldr	r3, [pc, #388]	; (800caf0 <mem_malloc+0x1c8>)
 800c96c:	681b      	ldr	r3, [r3, #0]
 800c96e:	1ad3      	subs	r3, r2, r3
 800c970:	83fb      	strh	r3, [r7, #30]
 800c972:	e0aa      	b.n	800caca <mem_malloc+0x1a2>
         ptr = ((struct mem *)(void *)&ram[ptr])->next) {
      mem = (struct mem *)(void *)&ram[ptr];
 800c974:	4b5e      	ldr	r3, [pc, #376]	; (800caf0 <mem_malloc+0x1c8>)
 800c976:	681a      	ldr	r2, [r3, #0]
 800c978:	8bfb      	ldrh	r3, [r7, #30]
 800c97a:	4413      	add	r3, r2
 800c97c:	617b      	str	r3, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 800c97e:	697b      	ldr	r3, [r7, #20]
 800c980:	791b      	ldrb	r3, [r3, #4]
 800c982:	2b00      	cmp	r3, #0
 800c984:	f040 809b 	bne.w	800cabe <mem_malloc+0x196>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 800c988:	697b      	ldr	r3, [r7, #20]
 800c98a:	881b      	ldrh	r3, [r3, #0]
 800c98c:	461a      	mov	r2, r3
 800c98e:	8bfb      	ldrh	r3, [r7, #30]
 800c990:	1ad3      	subs	r3, r2, r3
 800c992:	f1a3 0208 	sub.w	r2, r3, #8
 800c996:	88fb      	ldrh	r3, [r7, #6]
      if ((!mem->used) &&
 800c998:	429a      	cmp	r2, r3
 800c99a:	f0c0 8090 	bcc.w	800cabe <mem_malloc+0x196>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 800c99e:	697b      	ldr	r3, [r7, #20]
 800c9a0:	881b      	ldrh	r3, [r3, #0]
 800c9a2:	461a      	mov	r2, r3
 800c9a4:	8bfb      	ldrh	r3, [r7, #30]
 800c9a6:	1ad3      	subs	r3, r2, r3
 800c9a8:	f1a3 0208 	sub.w	r2, r3, #8
 800c9ac:	88fb      	ldrh	r3, [r7, #6]
 800c9ae:	3314      	adds	r3, #20
 800c9b0:	429a      	cmp	r2, r3
 800c9b2:	d327      	bcc.n	800ca04 <mem_malloc+0xdc>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = ptr + SIZEOF_STRUCT_MEM + size;
 800c9b4:	8bfa      	ldrh	r2, [r7, #30]
 800c9b6:	88fb      	ldrh	r3, [r7, #6]
 800c9b8:	4413      	add	r3, r2
 800c9ba:	b29b      	uxth	r3, r3
 800c9bc:	3308      	adds	r3, #8
 800c9be:	827b      	strh	r3, [r7, #18]
          /* create mem2 struct */
          mem2 = (struct mem *)(void *)&ram[ptr2];
 800c9c0:	4b4b      	ldr	r3, [pc, #300]	; (800caf0 <mem_malloc+0x1c8>)
 800c9c2:	681a      	ldr	r2, [r3, #0]
 800c9c4:	8a7b      	ldrh	r3, [r7, #18]
 800c9c6:	4413      	add	r3, r2
 800c9c8:	60fb      	str	r3, [r7, #12]
          mem2->used = 0;
 800c9ca:	68fb      	ldr	r3, [r7, #12]
 800c9cc:	2200      	movs	r2, #0
 800c9ce:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 800c9d0:	697b      	ldr	r3, [r7, #20]
 800c9d2:	881a      	ldrh	r2, [r3, #0]
 800c9d4:	68fb      	ldr	r3, [r7, #12]
 800c9d6:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 800c9d8:	68fb      	ldr	r3, [r7, #12]
 800c9da:	8bfa      	ldrh	r2, [r7, #30]
 800c9dc:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 800c9de:	697b      	ldr	r3, [r7, #20]
 800c9e0:	8a7a      	ldrh	r2, [r7, #18]
 800c9e2:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 800c9e4:	697b      	ldr	r3, [r7, #20]
 800c9e6:	2201      	movs	r2, #1
 800c9e8:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 800c9ea:	68fb      	ldr	r3, [r7, #12]
 800c9ec:	881b      	ldrh	r3, [r3, #0]
 800c9ee:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800c9f2:	d00a      	beq.n	800ca0a <mem_malloc+0xe2>
            ((struct mem *)(void *)&ram[mem2->next])->prev = ptr2;
 800c9f4:	4b3e      	ldr	r3, [pc, #248]	; (800caf0 <mem_malloc+0x1c8>)
 800c9f6:	681b      	ldr	r3, [r3, #0]
 800c9f8:	68fa      	ldr	r2, [r7, #12]
 800c9fa:	8812      	ldrh	r2, [r2, #0]
 800c9fc:	4413      	add	r3, r2
 800c9fe:	8a7a      	ldrh	r2, [r7, #18]
 800ca00:	805a      	strh	r2, [r3, #2]
 800ca02:	e002      	b.n	800ca0a <mem_malloc+0xe2>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 800ca04:	697b      	ldr	r3, [r7, #20]
 800ca06:	2201      	movs	r2, #1
 800ca08:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - (mem_size_t)((u8_t *)mem - ram));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 800ca0a:	4b38      	ldr	r3, [pc, #224]	; (800caec <mem_malloc+0x1c4>)
 800ca0c:	681b      	ldr	r3, [r3, #0]
 800ca0e:	697a      	ldr	r2, [r7, #20]
 800ca10:	429a      	cmp	r2, r3
 800ca12:	d127      	bne.n	800ca64 <mem_malloc+0x13c>
          struct mem *cur = lfree;
 800ca14:	4b35      	ldr	r3, [pc, #212]	; (800caec <mem_malloc+0x1c4>)
 800ca16:	681b      	ldr	r3, [r3, #0]
 800ca18:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 800ca1a:	e005      	b.n	800ca28 <mem_malloc+0x100>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = (struct mem *)(void *)&ram[cur->next];
 800ca1c:	4b34      	ldr	r3, [pc, #208]	; (800caf0 <mem_malloc+0x1c8>)
 800ca1e:	681b      	ldr	r3, [r3, #0]
 800ca20:	69ba      	ldr	r2, [r7, #24]
 800ca22:	8812      	ldrh	r2, [r2, #0]
 800ca24:	4413      	add	r3, r2
 800ca26:	61bb      	str	r3, [r7, #24]
          while (cur->used && cur != ram_end) {
 800ca28:	69bb      	ldr	r3, [r7, #24]
 800ca2a:	791b      	ldrb	r3, [r3, #4]
 800ca2c:	2b00      	cmp	r3, #0
 800ca2e:	d004      	beq.n	800ca3a <mem_malloc+0x112>
 800ca30:	4b30      	ldr	r3, [pc, #192]	; (800caf4 <mem_malloc+0x1cc>)
 800ca32:	681b      	ldr	r3, [r3, #0]
 800ca34:	69ba      	ldr	r2, [r7, #24]
 800ca36:	429a      	cmp	r2, r3
 800ca38:	d1f0      	bne.n	800ca1c <mem_malloc+0xf4>
          }
          lfree = cur;
 800ca3a:	4a2c      	ldr	r2, [pc, #176]	; (800caec <mem_malloc+0x1c4>)
 800ca3c:	69bb      	ldr	r3, [r7, #24]
 800ca3e:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 800ca40:	4b2a      	ldr	r3, [pc, #168]	; (800caec <mem_malloc+0x1c4>)
 800ca42:	681a      	ldr	r2, [r3, #0]
 800ca44:	4b2b      	ldr	r3, [pc, #172]	; (800caf4 <mem_malloc+0x1cc>)
 800ca46:	681b      	ldr	r3, [r3, #0]
 800ca48:	429a      	cmp	r2, r3
 800ca4a:	d00b      	beq.n	800ca64 <mem_malloc+0x13c>
 800ca4c:	4b27      	ldr	r3, [pc, #156]	; (800caec <mem_malloc+0x1c4>)
 800ca4e:	681b      	ldr	r3, [r3, #0]
 800ca50:	791b      	ldrb	r3, [r3, #4]
 800ca52:	2b00      	cmp	r3, #0
 800ca54:	d006      	beq.n	800ca64 <mem_malloc+0x13c>
 800ca56:	4b28      	ldr	r3, [pc, #160]	; (800caf8 <mem_malloc+0x1d0>)
 800ca58:	f240 22cf 	movw	r2, #719	; 0x2cf
 800ca5c:	4927      	ldr	r1, [pc, #156]	; (800cafc <mem_malloc+0x1d4>)
 800ca5e:	4828      	ldr	r0, [pc, #160]	; (800cb00 <mem_malloc+0x1d8>)
 800ca60:	f00b f954 	bl	8017d0c <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
 800ca64:	4820      	ldr	r0, [pc, #128]	; (800cae8 <mem_malloc+0x1c0>)
 800ca66:	f00a fb2e 	bl	80170c6 <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 800ca6a:	88fa      	ldrh	r2, [r7, #6]
 800ca6c:	697b      	ldr	r3, [r7, #20]
 800ca6e:	4413      	add	r3, r2
 800ca70:	3308      	adds	r3, #8
 800ca72:	4a20      	ldr	r2, [pc, #128]	; (800caf4 <mem_malloc+0x1cc>)
 800ca74:	6812      	ldr	r2, [r2, #0]
 800ca76:	4293      	cmp	r3, r2
 800ca78:	d906      	bls.n	800ca88 <mem_malloc+0x160>
 800ca7a:	4b1f      	ldr	r3, [pc, #124]	; (800caf8 <mem_malloc+0x1d0>)
 800ca7c:	f44f 7235 	mov.w	r2, #724	; 0x2d4
 800ca80:	4920      	ldr	r1, [pc, #128]	; (800cb04 <mem_malloc+0x1dc>)
 800ca82:	481f      	ldr	r0, [pc, #124]	; (800cb00 <mem_malloc+0x1d8>)
 800ca84:	f00b f942 	bl	8017d0c <iprintf>
         (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 800ca88:	697b      	ldr	r3, [r7, #20]
 800ca8a:	f003 0303 	and.w	r3, r3, #3
 800ca8e:	2b00      	cmp	r3, #0
 800ca90:	d006      	beq.n	800caa0 <mem_malloc+0x178>
 800ca92:	4b19      	ldr	r3, [pc, #100]	; (800caf8 <mem_malloc+0x1d0>)
 800ca94:	f240 22d6 	movw	r2, #726	; 0x2d6
 800ca98:	491b      	ldr	r1, [pc, #108]	; (800cb08 <mem_malloc+0x1e0>)
 800ca9a:	4819      	ldr	r0, [pc, #100]	; (800cb00 <mem_malloc+0x1d8>)
 800ca9c:	f00b f936 	bl	8017d0c <iprintf>
         ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 800caa0:	697b      	ldr	r3, [r7, #20]
 800caa2:	f003 0303 	and.w	r3, r3, #3
 800caa6:	2b00      	cmp	r3, #0
 800caa8:	d006      	beq.n	800cab8 <mem_malloc+0x190>
 800caaa:	4b13      	ldr	r3, [pc, #76]	; (800caf8 <mem_malloc+0x1d0>)
 800caac:	f44f 7236 	mov.w	r2, #728	; 0x2d8
 800cab0:	4916      	ldr	r1, [pc, #88]	; (800cb0c <mem_malloc+0x1e4>)
 800cab2:	4813      	ldr	r0, [pc, #76]	; (800cb00 <mem_malloc+0x1d8>)
 800cab4:	f00b f92a 	bl	8017d0c <iprintf>
          (((mem_ptr_t)mem) & (MEM_ALIGNMENT-1)) == 0);

        return (u8_t *)mem + SIZEOF_STRUCT_MEM;
 800cab8:	697b      	ldr	r3, [r7, #20]
 800caba:	3308      	adds	r3, #8
 800cabc:	e010      	b.n	800cae0 <mem_malloc+0x1b8>
         ptr = ((struct mem *)(void *)&ram[ptr])->next) {
 800cabe:	4b0c      	ldr	r3, [pc, #48]	; (800caf0 <mem_malloc+0x1c8>)
 800cac0:	681a      	ldr	r2, [r3, #0]
 800cac2:	8bfb      	ldrh	r3, [r7, #30]
 800cac4:	4413      	add	r3, r2
 800cac6:	881b      	ldrh	r3, [r3, #0]
 800cac8:	83fb      	strh	r3, [r7, #30]
    for (ptr = (mem_size_t)((u8_t *)lfree - ram); ptr < MEM_SIZE_ALIGNED - size;
 800caca:	8bfa      	ldrh	r2, [r7, #30]
 800cacc:	88fb      	ldrh	r3, [r7, #6]
 800cace:	f5c3 63c8 	rsb	r3, r3, #1600	; 0x640
 800cad2:	429a      	cmp	r2, r3
 800cad4:	f4ff af4e 	bcc.w	800c974 <mem_malloc+0x4c>
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
 800cad8:	4803      	ldr	r0, [pc, #12]	; (800cae8 <mem_malloc+0x1c0>)
 800cada:	f00a faf4 	bl	80170c6 <sys_mutex_unlock>
  return NULL;
 800cade:	2300      	movs	r3, #0
}
 800cae0:	4618      	mov	r0, r3
 800cae2:	3720      	adds	r7, #32
 800cae4:	46bd      	mov	sp, r7
 800cae6:	bd80      	pop	{r7, pc}
 800cae8:	20004b34 	.word	0x20004b34
 800caec:	20004b30 	.word	0x20004b30
 800caf0:	20004b28 	.word	0x20004b28
 800caf4:	20004b2c 	.word	0x20004b2c
 800caf8:	08018b94 	.word	0x08018b94
 800cafc:	08018d0c 	.word	0x08018d0c
 800cb00:	08018bdc 	.word	0x08018bdc
 800cb04:	08018d28 	.word	0x08018d28
 800cb08:	08018d58 	.word	0x08018d58
 800cb0c:	08018d88 	.word	0x08018d88

0800cb10 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 800cb10:	b480      	push	{r7}
 800cb12:	b085      	sub	sp, #20
 800cb14:	af00      	add	r7, sp, #0
 800cb16:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 800cb18:	687b      	ldr	r3, [r7, #4]
 800cb1a:	689b      	ldr	r3, [r3, #8]
 800cb1c:	2200      	movs	r2, #0
 800cb1e:	601a      	str	r2, [r3, #0]
  memp = (struct memp*)LWIP_MEM_ALIGN(desc->base);
 800cb20:	687b      	ldr	r3, [r7, #4]
 800cb22:	685b      	ldr	r3, [r3, #4]
 800cb24:	3303      	adds	r3, #3
 800cb26:	f023 0303 	bic.w	r3, r3, #3
 800cb2a:	60bb      	str	r3, [r7, #8]
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 800cb2c:	2300      	movs	r3, #0
 800cb2e:	60fb      	str	r3, [r7, #12]
 800cb30:	e011      	b.n	800cb56 <memp_init_pool+0x46>
    memp->next = *desc->tab;
 800cb32:	687b      	ldr	r3, [r7, #4]
 800cb34:	689b      	ldr	r3, [r3, #8]
 800cb36:	681a      	ldr	r2, [r3, #0]
 800cb38:	68bb      	ldr	r3, [r7, #8]
 800cb3a:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 800cb3c:	687b      	ldr	r3, [r7, #4]
 800cb3e:	689b      	ldr	r3, [r3, #8]
 800cb40:	68ba      	ldr	r2, [r7, #8]
 800cb42:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
   /* cast through void* to get rid of alignment warnings */
   memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 800cb44:	687b      	ldr	r3, [r7, #4]
 800cb46:	881b      	ldrh	r3, [r3, #0]
 800cb48:	461a      	mov	r2, r3
 800cb4a:	68bb      	ldr	r3, [r7, #8]
 800cb4c:	4413      	add	r3, r2
 800cb4e:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 800cb50:	68fb      	ldr	r3, [r7, #12]
 800cb52:	3301      	adds	r3, #1
 800cb54:	60fb      	str	r3, [r7, #12]
 800cb56:	687b      	ldr	r3, [r7, #4]
 800cb58:	885b      	ldrh	r3, [r3, #2]
 800cb5a:	461a      	mov	r2, r3
 800cb5c:	68fb      	ldr	r3, [r7, #12]
 800cb5e:	4293      	cmp	r3, r2
 800cb60:	dbe7      	blt.n	800cb32 <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 800cb62:	bf00      	nop
 800cb64:	3714      	adds	r7, #20
 800cb66:	46bd      	mov	sp, r7
 800cb68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb6c:	4770      	bx	lr
	...

0800cb70 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 800cb70:	b580      	push	{r7, lr}
 800cb72:	b082      	sub	sp, #8
 800cb74:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800cb76:	2300      	movs	r3, #0
 800cb78:	80fb      	strh	r3, [r7, #6]
 800cb7a:	e009      	b.n	800cb90 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 800cb7c:	88fb      	ldrh	r3, [r7, #6]
 800cb7e:	4a08      	ldr	r2, [pc, #32]	; (800cba0 <memp_init+0x30>)
 800cb80:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cb84:	4618      	mov	r0, r3
 800cb86:	f7ff ffc3 	bl	800cb10 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800cb8a:	88fb      	ldrh	r3, [r7, #6]
 800cb8c:	3301      	adds	r3, #1
 800cb8e:	80fb      	strh	r3, [r7, #6]
 800cb90:	88fb      	ldrh	r3, [r7, #6]
 800cb92:	2b0c      	cmp	r3, #12
 800cb94:	d9f2      	bls.n	800cb7c <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 800cb96:	bf00      	nop
 800cb98:	3708      	adds	r7, #8
 800cb9a:	46bd      	mov	sp, r7
 800cb9c:	bd80      	pop	{r7, pc}
 800cb9e:	bf00      	nop
 800cba0:	0801ae10 	.word	0x0801ae10

0800cba4 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char* file, const int line)
#endif
{
 800cba4:	b580      	push	{r7, lr}
 800cba6:	b084      	sub	sp, #16
 800cba8:	af00      	add	r7, sp, #0
 800cbaa:	6078      	str	r0, [r7, #4]

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
 800cbac:	f00a fab8 	bl	8017120 <sys_arch_protect>
 800cbb0:	60f8      	str	r0, [r7, #12]

  memp = *desc->tab;
 800cbb2:	687b      	ldr	r3, [r7, #4]
 800cbb4:	689b      	ldr	r3, [r3, #8]
 800cbb6:	681b      	ldr	r3, [r3, #0]
 800cbb8:	60bb      	str	r3, [r7, #8]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 800cbba:	68bb      	ldr	r3, [r7, #8]
 800cbbc:	2b00      	cmp	r3, #0
 800cbbe:	d015      	beq.n	800cbec <do_memp_malloc_pool+0x48>
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element_overflow(memp, desc);
    memp_overflow_check_element_underflow(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 800cbc0:	687b      	ldr	r3, [r7, #4]
 800cbc2:	689b      	ldr	r3, [r3, #8]
 800cbc4:	68ba      	ldr	r2, [r7, #8]
 800cbc6:	6812      	ldr	r2, [r2, #0]
 800cbc8:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 800cbca:	68bb      	ldr	r3, [r7, #8]
 800cbcc:	f003 0303 	and.w	r3, r3, #3
 800cbd0:	2b00      	cmp	r3, #0
 800cbd2:	d006      	beq.n	800cbe2 <do_memp_malloc_pool+0x3e>
 800cbd4:	4b09      	ldr	r3, [pc, #36]	; (800cbfc <do_memp_malloc_pool+0x58>)
 800cbd6:	f240 1249 	movw	r2, #329	; 0x149
 800cbda:	4909      	ldr	r1, [pc, #36]	; (800cc00 <do_memp_malloc_pool+0x5c>)
 800cbdc:	4809      	ldr	r0, [pc, #36]	; (800cc04 <do_memp_malloc_pool+0x60>)
 800cbde:	f00b f895 	bl	8017d0c <iprintf>
    desc->stats->used++;
    if (desc->stats->used > desc->stats->max) {
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
 800cbe2:	68f8      	ldr	r0, [r7, #12]
 800cbe4:	f00a faaa 	bl	801713c <sys_arch_unprotect>
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t*)memp + MEMP_SIZE);
 800cbe8:	68bb      	ldr	r3, [r7, #8]
 800cbea:	e003      	b.n	800cbf4 <do_memp_malloc_pool+0x50>
#if MEMP_STATS
    desc->stats->err++;
#endif
  }

  SYS_ARCH_UNPROTECT(old_level);
 800cbec:	68f8      	ldr	r0, [r7, #12]
 800cbee:	f00a faa5 	bl	801713c <sys_arch_unprotect>
  return NULL;
 800cbf2:	2300      	movs	r3, #0
}
 800cbf4:	4618      	mov	r0, r3
 800cbf6:	3710      	adds	r7, #16
 800cbf8:	46bd      	mov	sp, r7
 800cbfa:	bd80      	pop	{r7, pc}
 800cbfc:	08018dac 	.word	0x08018dac
 800cc00:	08018ddc 	.word	0x08018ddc
 800cc04:	08018e00 	.word	0x08018e00

0800cc08 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char* file, const int line)
#endif
{
 800cc08:	b580      	push	{r7, lr}
 800cc0a:	b084      	sub	sp, #16
 800cc0c:	af00      	add	r7, sp, #0
 800cc0e:	4603      	mov	r3, r0
 800cc10:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 800cc12:	79fb      	ldrb	r3, [r7, #7]
 800cc14:	2b0c      	cmp	r3, #12
 800cc16:	d908      	bls.n	800cc2a <memp_malloc+0x22>
 800cc18:	4b0a      	ldr	r3, [pc, #40]	; (800cc44 <memp_malloc+0x3c>)
 800cc1a:	f240 1287 	movw	r2, #391	; 0x187
 800cc1e:	490a      	ldr	r1, [pc, #40]	; (800cc48 <memp_malloc+0x40>)
 800cc20:	480a      	ldr	r0, [pc, #40]	; (800cc4c <memp_malloc+0x44>)
 800cc22:	f00b f873 	bl	8017d0c <iprintf>
 800cc26:	2300      	movs	r3, #0
 800cc28:	e008      	b.n	800cc3c <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 800cc2a:	79fb      	ldrb	r3, [r7, #7]
 800cc2c:	4a08      	ldr	r2, [pc, #32]	; (800cc50 <memp_malloc+0x48>)
 800cc2e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cc32:	4618      	mov	r0, r3
 800cc34:	f7ff ffb6 	bl	800cba4 <do_memp_malloc_pool>
 800cc38:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 800cc3a:	68fb      	ldr	r3, [r7, #12]
}
 800cc3c:	4618      	mov	r0, r3
 800cc3e:	3710      	adds	r7, #16
 800cc40:	46bd      	mov	sp, r7
 800cc42:	bd80      	pop	{r7, pc}
 800cc44:	08018dac 	.word	0x08018dac
 800cc48:	08018e3c 	.word	0x08018e3c
 800cc4c:	08018e00 	.word	0x08018e00
 800cc50:	0801ae10 	.word	0x0801ae10

0800cc54 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc* desc, void *mem)
{
 800cc54:	b580      	push	{r7, lr}
 800cc56:	b084      	sub	sp, #16
 800cc58:	af00      	add	r7, sp, #0
 800cc5a:	6078      	str	r0, [r7, #4]
 800cc5c:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 800cc5e:	683b      	ldr	r3, [r7, #0]
 800cc60:	f003 0303 	and.w	r3, r3, #3
 800cc64:	2b00      	cmp	r3, #0
 800cc66:	d006      	beq.n	800cc76 <do_memp_free_pool+0x22>
 800cc68:	4b0d      	ldr	r3, [pc, #52]	; (800cca0 <do_memp_free_pool+0x4c>)
 800cc6a:	f240 129d 	movw	r2, #413	; 0x19d
 800cc6e:	490d      	ldr	r1, [pc, #52]	; (800cca4 <do_memp_free_pool+0x50>)
 800cc70:	480d      	ldr	r0, [pc, #52]	; (800cca8 <do_memp_free_pool+0x54>)
 800cc72:	f00b f84b 	bl	8017d0c <iprintf>
                ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t*)mem - MEMP_SIZE);
 800cc76:	683b      	ldr	r3, [r7, #0]
 800cc78:	60fb      	str	r3, [r7, #12]

  SYS_ARCH_PROTECT(old_level);
 800cc7a:	f00a fa51 	bl	8017120 <sys_arch_protect>
 800cc7e:	60b8      	str	r0, [r7, #8]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 800cc80:	687b      	ldr	r3, [r7, #4]
 800cc82:	689b      	ldr	r3, [r3, #8]
 800cc84:	681a      	ldr	r2, [r3, #0]
 800cc86:	68fb      	ldr	r3, [r7, #12]
 800cc88:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 800cc8a:	687b      	ldr	r3, [r7, #4]
 800cc8c:	689b      	ldr	r3, [r3, #8]
 800cc8e:	68fa      	ldr	r2, [r7, #12]
 800cc90:	601a      	str	r2, [r3, #0]

#if MEMP_SANITY_CHECK
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
 800cc92:	68b8      	ldr	r0, [r7, #8]
 800cc94:	f00a fa52 	bl	801713c <sys_arch_unprotect>
#endif /* !MEMP_MEM_MALLOC */
}
 800cc98:	bf00      	nop
 800cc9a:	3710      	adds	r7, #16
 800cc9c:	46bd      	mov	sp, r7
 800cc9e:	bd80      	pop	{r7, pc}
 800cca0:	08018dac 	.word	0x08018dac
 800cca4:	08018e5c 	.word	0x08018e5c
 800cca8:	08018e00 	.word	0x08018e00

0800ccac <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 800ccac:	b580      	push	{r7, lr}
 800ccae:	b082      	sub	sp, #8
 800ccb0:	af00      	add	r7, sp, #0
 800ccb2:	4603      	mov	r3, r0
 800ccb4:	6039      	str	r1, [r7, #0]
 800ccb6:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 800ccb8:	79fb      	ldrb	r3, [r7, #7]
 800ccba:	2b0c      	cmp	r3, #12
 800ccbc:	d907      	bls.n	800ccce <memp_free+0x22>
 800ccbe:	4b0c      	ldr	r3, [pc, #48]	; (800ccf0 <memp_free+0x44>)
 800ccc0:	f240 12db 	movw	r2, #475	; 0x1db
 800ccc4:	490b      	ldr	r1, [pc, #44]	; (800ccf4 <memp_free+0x48>)
 800ccc6:	480c      	ldr	r0, [pc, #48]	; (800ccf8 <memp_free+0x4c>)
 800ccc8:	f00b f820 	bl	8017d0c <iprintf>
 800cccc:	e00c      	b.n	800cce8 <memp_free+0x3c>

  if (mem == NULL) {
 800ccce:	683b      	ldr	r3, [r7, #0]
 800ccd0:	2b00      	cmp	r3, #0
 800ccd2:	d008      	beq.n	800cce6 <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 800ccd4:	79fb      	ldrb	r3, [r7, #7]
 800ccd6:	4a09      	ldr	r2, [pc, #36]	; (800ccfc <memp_free+0x50>)
 800ccd8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ccdc:	6839      	ldr	r1, [r7, #0]
 800ccde:	4618      	mov	r0, r3
 800cce0:	f7ff ffb8 	bl	800cc54 <do_memp_free_pool>
 800cce4:	e000      	b.n	800cce8 <memp_free+0x3c>
    return;
 800cce6:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 800cce8:	3708      	adds	r7, #8
 800ccea:	46bd      	mov	sp, r7
 800ccec:	bd80      	pop	{r7, pc}
 800ccee:	bf00      	nop
 800ccf0:	08018dac 	.word	0x08018dac
 800ccf4:	08018e7c 	.word	0x08018e7c
 800ccf8:	08018e00 	.word	0x08018e00
 800ccfc:	0801ae10 	.word	0x0801ae10

0800cd00 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 800cd00:	b480      	push	{r7}
 800cd02:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 800cd04:	bf00      	nop
 800cd06:	46bd      	mov	sp, r7
 800cd08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd0c:	4770      	bx	lr
	...

0800cd10 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 800cd10:	b580      	push	{r7, lr}
 800cd12:	b084      	sub	sp, #16
 800cd14:	af00      	add	r7, sp, #0
 800cd16:	60f8      	str	r0, [r7, #12]
 800cd18:	60b9      	str	r1, [r7, #8]
 800cd1a:	607a      	str	r2, [r7, #4]
 800cd1c:	603b      	str	r3, [r7, #0]
#if LWIP_IPV6
  s8_t i;
#endif

  LWIP_ASSERT("No init function given", init != NULL);
 800cd1e:	69fb      	ldr	r3, [r7, #28]
 800cd20:	2b00      	cmp	r3, #0
 800cd22:	d105      	bne.n	800cd30 <netif_add+0x20>
 800cd24:	4b23      	ldr	r3, [pc, #140]	; (800cdb4 <netif_add+0xa4>)
 800cd26:	22fb      	movs	r2, #251	; 0xfb
 800cd28:	4923      	ldr	r1, [pc, #140]	; (800cdb8 <netif_add+0xa8>)
 800cd2a:	4824      	ldr	r0, [pc, #144]	; (800cdbc <netif_add+0xac>)
 800cd2c:	f00a ffee 	bl	8017d0c <iprintf>

  /* reset new interface configuration state */
#if LWIP_IPV4
  ip_addr_set_zero_ip4(&netif->ip_addr);
 800cd30:	68fb      	ldr	r3, [r7, #12]
 800cd32:	2200      	movs	r2, #0
 800cd34:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 800cd36:	68fb      	ldr	r3, [r7, #12]
 800cd38:	2200      	movs	r2, #0
 800cd3a:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 800cd3c:	68fb      	ldr	r3, [r7, #12]
 800cd3e:	2200      	movs	r2, #0
 800cd40:	60da      	str	r2, [r3, #12]
    netif->ip6_addr_state[i] = IP6_ADDR_INVALID;
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->flags = 0;
 800cd42:	68fb      	ldr	r3, [r7, #12]
 800cd44:	2200      	movs	r2, #0
 800cd46:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
#ifdef netif_get_client_data
  memset(netif->client_data, 0, sizeof(netif->client_data));
 800cd4a:	68fb      	ldr	r3, [r7, #12]
 800cd4c:	3320      	adds	r3, #32
 800cd4e:	2204      	movs	r2, #4
 800cd50:	2100      	movs	r1, #0
 800cd52:	4618      	mov	r0, r3
 800cd54:	f00a ff2a 	bl	8017bac <memset>
#if LWIP_IPV6_AUTOCONFIG
  /* IPv6 address autoconfiguration not enabled by default */
  netif->ip6_autoconfig_enabled = 0;
#endif /* LWIP_IPV6_AUTOCONFIG */
#if LWIP_IPV6_SEND_ROUTER_SOLICIT
  netif->rs_count = LWIP_ND6_MAX_MULTICAST_SOLICIT;
 800cd58:	68fb      	ldr	r3, [r7, #12]
 800cd5a:	2203      	movs	r2, #3
 800cd5c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 800cd60:	68fb      	ldr	r3, [r7, #12]
 800cd62:	69ba      	ldr	r2, [r7, #24]
 800cd64:	61da      	str	r2, [r3, #28]
  netif->num = netif_num++;
 800cd66:	4b16      	ldr	r3, [pc, #88]	; (800cdc0 <netif_add+0xb0>)
 800cd68:	781b      	ldrb	r3, [r3, #0]
 800cd6a:	1c5a      	adds	r2, r3, #1
 800cd6c:	b2d1      	uxtb	r1, r2
 800cd6e:	4a14      	ldr	r2, [pc, #80]	; (800cdc0 <netif_add+0xb0>)
 800cd70:	7011      	strb	r1, [r2, #0]
 800cd72:	68fa      	ldr	r2, [r7, #12]
 800cd74:	f882 3032 	strb.w	r3, [r2, #50]	; 0x32
  netif->input = input;
 800cd78:	68fb      	ldr	r3, [r7, #12]
 800cd7a:	6a3a      	ldr	r2, [r7, #32]
 800cd7c:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 800cd7e:	683b      	ldr	r3, [r7, #0]
 800cd80:	687a      	ldr	r2, [r7, #4]
 800cd82:	68b9      	ldr	r1, [r7, #8]
 800cd84:	68f8      	ldr	r0, [r7, #12]
 800cd86:	f000 f81f 	bl	800cdc8 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 800cd8a:	69fb      	ldr	r3, [r7, #28]
 800cd8c:	68f8      	ldr	r0, [r7, #12]
 800cd8e:	4798      	blx	r3
 800cd90:	4603      	mov	r3, r0
 800cd92:	2b00      	cmp	r3, #0
 800cd94:	d001      	beq.n	800cd9a <netif_add+0x8a>
    return NULL;
 800cd96:	2300      	movs	r3, #0
 800cd98:	e007      	b.n	800cdaa <netif_add+0x9a>
  }

  /* add this netif to the list */
  netif->next = netif_list;
 800cd9a:	4b0a      	ldr	r3, [pc, #40]	; (800cdc4 <netif_add+0xb4>)
 800cd9c:	681a      	ldr	r2, [r3, #0]
 800cd9e:	68fb      	ldr	r3, [r7, #12]
 800cda0:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 800cda2:	4a08      	ldr	r2, [pc, #32]	; (800cdc4 <netif_add+0xb4>)
 800cda4:	68fb      	ldr	r3, [r7, #12]
 800cda6:	6013      	str	r3, [r2, #0]
  ip4_addr_debug_print(NETIF_DEBUG, netmask);
  LWIP_DEBUGF(NETIF_DEBUG, (" gw "));
  ip4_addr_debug_print(NETIF_DEBUG, gw);
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));
  return netif;
 800cda8:	68fb      	ldr	r3, [r7, #12]
}
 800cdaa:	4618      	mov	r0, r3
 800cdac:	3710      	adds	r7, #16
 800cdae:	46bd      	mov	sp, r7
 800cdb0:	bd80      	pop	{r7, pc}
 800cdb2:	bf00      	nop
 800cdb4:	08018e98 	.word	0x08018e98
 800cdb8:	08018ecc 	.word	0x08018ecc
 800cdbc:	08018ee4 	.word	0x08018ee4
 800cdc0:	20004b6c 	.word	0x20004b6c
 800cdc4:	2000b5a0 	.word	0x2000b5a0

0800cdc8 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
    const ip4_addr_t *gw)
{
 800cdc8:	b580      	push	{r7, lr}
 800cdca:	b084      	sub	sp, #16
 800cdcc:	af00      	add	r7, sp, #0
 800cdce:	60f8      	str	r0, [r7, #12]
 800cdd0:	60b9      	str	r1, [r7, #8]
 800cdd2:	607a      	str	r2, [r7, #4]
 800cdd4:	603b      	str	r3, [r7, #0]
  if (ip4_addr_isany(ipaddr)) {
 800cdd6:	68bb      	ldr	r3, [r7, #8]
 800cdd8:	2b00      	cmp	r3, #0
 800cdda:	d003      	beq.n	800cde4 <netif_set_addr+0x1c>
 800cddc:	68bb      	ldr	r3, [r7, #8]
 800cdde:	681b      	ldr	r3, [r3, #0]
 800cde0:	2b00      	cmp	r3, #0
 800cde2:	d10c      	bne.n	800cdfe <netif_set_addr+0x36>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    netif_set_ipaddr(netif, ipaddr);
 800cde4:	68b9      	ldr	r1, [r7, #8]
 800cde6:	68f8      	ldr	r0, [r7, #12]
 800cde8:	f000 f81a 	bl	800ce20 <netif_set_ipaddr>
    netif_set_netmask(netif, netmask);
 800cdec:	6879      	ldr	r1, [r7, #4]
 800cdee:	68f8      	ldr	r0, [r7, #12]
 800cdf0:	f000 f862 	bl	800ceb8 <netif_set_netmask>
    netif_set_gw(netif, gw);
 800cdf4:	6839      	ldr	r1, [r7, #0]
 800cdf6:	68f8      	ldr	r0, [r7, #12]
 800cdf8:	f000 f84a 	bl	800ce90 <netif_set_gw>
 800cdfc:	e00b      	b.n	800ce16 <netif_set_addr+0x4e>
  } else {
    netif_set_netmask(netif, netmask);
 800cdfe:	6879      	ldr	r1, [r7, #4]
 800ce00:	68f8      	ldr	r0, [r7, #12]
 800ce02:	f000 f859 	bl	800ceb8 <netif_set_netmask>
    netif_set_gw(netif, gw);
 800ce06:	6839      	ldr	r1, [r7, #0]
 800ce08:	68f8      	ldr	r0, [r7, #12]
 800ce0a:	f000 f841 	bl	800ce90 <netif_set_gw>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    netif_set_ipaddr(netif, ipaddr);
 800ce0e:	68b9      	ldr	r1, [r7, #8]
 800ce10:	68f8      	ldr	r0, [r7, #12]
 800ce12:	f000 f805 	bl	800ce20 <netif_set_ipaddr>
  }
}
 800ce16:	bf00      	nop
 800ce18:	3710      	adds	r7, #16
 800ce1a:	46bd      	mov	sp, r7
 800ce1c:	bd80      	pop	{r7, pc}
	...

0800ce20 <netif_set_ipaddr>:
 * @note call netif_set_addr() if you also want to change netmask and
 * default gateway
 */
void
netif_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr)
{
 800ce20:	b580      	push	{r7, lr}
 800ce22:	b084      	sub	sp, #16
 800ce24:	af00      	add	r7, sp, #0
 800ce26:	6078      	str	r0, [r7, #4]
 800ce28:	6039      	str	r1, [r7, #0]
  ip_addr_t new_addr;
  *ip_2_ip4(&new_addr) = (ipaddr ? *ipaddr : *IP4_ADDR_ANY4);
 800ce2a:	683b      	ldr	r3, [r7, #0]
 800ce2c:	2b00      	cmp	r3, #0
 800ce2e:	d003      	beq.n	800ce38 <netif_set_ipaddr+0x18>
 800ce30:	683b      	ldr	r3, [r7, #0]
 800ce32:	681b      	ldr	r3, [r3, #0]
 800ce34:	60fb      	str	r3, [r7, #12]
 800ce36:	e002      	b.n	800ce3e <netif_set_ipaddr+0x1e>
 800ce38:	4b14      	ldr	r3, [pc, #80]	; (800ce8c <netif_set_ipaddr+0x6c>)
 800ce3a:	681b      	ldr	r3, [r3, #0]
 800ce3c:	60fb      	str	r3, [r7, #12]
  IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

  /* address is actually being changed? */
  if (ip4_addr_cmp(ip_2_ip4(&new_addr), netif_ip4_addr(netif)) == 0) {
 800ce3e:	68fa      	ldr	r2, [r7, #12]
 800ce40:	687b      	ldr	r3, [r7, #4]
 800ce42:	3304      	adds	r3, #4
 800ce44:	681b      	ldr	r3, [r3, #0]
 800ce46:	429a      	cmp	r2, r3
 800ce48:	d01c      	beq.n	800ce84 <netif_set_ipaddr+0x64>
    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
#if LWIP_TCP
    tcp_netif_ip_addr_changed(netif_ip_addr4(netif), &new_addr);
 800ce4a:	687b      	ldr	r3, [r7, #4]
 800ce4c:	3304      	adds	r3, #4
 800ce4e:	f107 020c 	add.w	r2, r7, #12
 800ce52:	4611      	mov	r1, r2
 800ce54:	4618      	mov	r0, r3
 800ce56:	f002 f89f 	bl	800ef98 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
    udp_netif_ip_addr_changed(netif_ip_addr4(netif), &new_addr);
 800ce5a:	687b      	ldr	r3, [r7, #4]
 800ce5c:	3304      	adds	r3, #4
 800ce5e:	f107 020c 	add.w	r2, r7, #12
 800ce62:	4611      	mov	r1, r2
 800ce64:	4618      	mov	r0, r3
 800ce66:	f005 ff61 	bl	8012d2c <udp_netif_ip_addr_changed>
#endif /* LWIP_RAW */

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 800ce6a:	683b      	ldr	r3, [r7, #0]
 800ce6c:	2b00      	cmp	r3, #0
 800ce6e:	d002      	beq.n	800ce76 <netif_set_ipaddr+0x56>
 800ce70:	683b      	ldr	r3, [r7, #0]
 800ce72:	681b      	ldr	r3, [r3, #0]
 800ce74:	e000      	b.n	800ce78 <netif_set_ipaddr+0x58>
 800ce76:	2300      	movs	r3, #0
 800ce78:	687a      	ldr	r2, [r7, #4]
 800ce7a:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 800ce7c:	2101      	movs	r1, #1
 800ce7e:	6878      	ldr	r0, [r7, #4]
 800ce80:	f000 f861 	bl	800cf46 <netif_issue_reports>
    netif->name[0], netif->name[1],
    ip4_addr1_16(netif_ip4_addr(netif)),
    ip4_addr2_16(netif_ip4_addr(netif)),
    ip4_addr3_16(netif_ip4_addr(netif)),
    ip4_addr4_16(netif_ip4_addr(netif))));
}
 800ce84:	bf00      	nop
 800ce86:	3710      	adds	r7, #16
 800ce88:	46bd      	mov	sp, r7
 800ce8a:	bd80      	pop	{r7, pc}
 800ce8c:	0801ae94 	.word	0x0801ae94

0800ce90 <netif_set_gw>:
 *
 * @note call netif_set_addr() if you also want to change ip address and netmask
 */
void
netif_set_gw(struct netif *netif, const ip4_addr_t *gw)
{
 800ce90:	b480      	push	{r7}
 800ce92:	b083      	sub	sp, #12
 800ce94:	af00      	add	r7, sp, #0
 800ce96:	6078      	str	r0, [r7, #4]
 800ce98:	6039      	str	r1, [r7, #0]
  ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 800ce9a:	683b      	ldr	r3, [r7, #0]
 800ce9c:	2b00      	cmp	r3, #0
 800ce9e:	d002      	beq.n	800cea6 <netif_set_gw+0x16>
 800cea0:	683b      	ldr	r3, [r7, #0]
 800cea2:	681b      	ldr	r3, [r3, #0]
 800cea4:	e000      	b.n	800cea8 <netif_set_gw+0x18>
 800cea6:	2300      	movs	r3, #0
 800cea8:	687a      	ldr	r2, [r7, #4]
 800ceaa:	60d3      	str	r3, [r2, #12]
    netif->name[0], netif->name[1],
    ip4_addr1_16(netif_ip4_gw(netif)),
    ip4_addr2_16(netif_ip4_gw(netif)),
    ip4_addr3_16(netif_ip4_gw(netif)),
    ip4_addr4_16(netif_ip4_gw(netif))));
}
 800ceac:	bf00      	nop
 800ceae:	370c      	adds	r7, #12
 800ceb0:	46bd      	mov	sp, r7
 800ceb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ceb6:	4770      	bx	lr

0800ceb8 <netif_set_netmask>:
 * @note call netif_set_addr() if you also want to change ip address and
 * default gateway
 */
void
netif_set_netmask(struct netif *netif, const ip4_addr_t *netmask)
{
 800ceb8:	b480      	push	{r7}
 800ceba:	b083      	sub	sp, #12
 800cebc:	af00      	add	r7, sp, #0
 800cebe:	6078      	str	r0, [r7, #4]
 800cec0:	6039      	str	r1, [r7, #0]
  mib2_remove_route_ip4(0, netif);
  /* set new netmask to netif */
  ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 800cec2:	683b      	ldr	r3, [r7, #0]
 800cec4:	2b00      	cmp	r3, #0
 800cec6:	d002      	beq.n	800cece <netif_set_netmask+0x16>
 800cec8:	683b      	ldr	r3, [r7, #0]
 800ceca:	681b      	ldr	r3, [r3, #0]
 800cecc:	e000      	b.n	800ced0 <netif_set_netmask+0x18>
 800cece:	2300      	movs	r3, #0
 800ced0:	687a      	ldr	r2, [r7, #4]
 800ced2:	6093      	str	r3, [r2, #8]
    netif->name[0], netif->name[1],
    ip4_addr1_16(netif_ip4_netmask(netif)),
    ip4_addr2_16(netif_ip4_netmask(netif)),
    ip4_addr3_16(netif_ip4_netmask(netif)),
    ip4_addr4_16(netif_ip4_netmask(netif))));
}
 800ced4:	bf00      	nop
 800ced6:	370c      	adds	r7, #12
 800ced8:	46bd      	mov	sp, r7
 800ceda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cede:	4770      	bx	lr

0800cee0 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 800cee0:	b480      	push	{r7}
 800cee2:	b083      	sub	sp, #12
 800cee4:	af00      	add	r7, sp, #0
 800cee6:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 800cee8:	4a04      	ldr	r2, [pc, #16]	; (800cefc <netif_set_default+0x1c>)
 800ceea:	687b      	ldr	r3, [r7, #4]
 800ceec:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
           netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 800ceee:	bf00      	nop
 800cef0:	370c      	adds	r7, #12
 800cef2:	46bd      	mov	sp, r7
 800cef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cef8:	4770      	bx	lr
 800cefa:	bf00      	nop
 800cefc:	2000b5a4 	.word	0x2000b5a4

0800cf00 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 800cf00:	b580      	push	{r7, lr}
 800cf02:	b082      	sub	sp, #8
 800cf04:	af00      	add	r7, sp, #0
 800cf06:	6078      	str	r0, [r7, #4]
  if (!(netif->flags & NETIF_FLAG_UP)) {
 800cf08:	687b      	ldr	r3, [r7, #4]
 800cf0a:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800cf0e:	f003 0301 	and.w	r3, r3, #1
 800cf12:	2b00      	cmp	r3, #0
 800cf14:	d113      	bne.n	800cf3e <netif_set_up+0x3e>
    netif->flags |= NETIF_FLAG_UP;
 800cf16:	687b      	ldr	r3, [r7, #4]
 800cf18:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800cf1c:	f043 0301 	orr.w	r3, r3, #1
 800cf20:	b2da      	uxtb	r2, r3
 800cf22:	687b      	ldr	r3, [r7, #4]
 800cf24:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

    NETIF_STATUS_CALLBACK(netif);

    if (netif->flags & NETIF_FLAG_LINK_UP) {
 800cf28:	687b      	ldr	r3, [r7, #4]
 800cf2a:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800cf2e:	f003 0304 	and.w	r3, r3, #4
 800cf32:	2b00      	cmp	r3, #0
 800cf34:	d003      	beq.n	800cf3e <netif_set_up+0x3e>
      netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4|NETIF_REPORT_TYPE_IPV6);
 800cf36:	2103      	movs	r1, #3
 800cf38:	6878      	ldr	r0, [r7, #4]
 800cf3a:	f000 f804 	bl	800cf46 <netif_issue_reports>
    }
  }
}
 800cf3e:	bf00      	nop
 800cf40:	3708      	adds	r7, #8
 800cf42:	46bd      	mov	sp, r7
 800cf44:	bd80      	pop	{r7, pc}

0800cf46 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif* netif, u8_t report_type)
{
 800cf46:	b580      	push	{r7, lr}
 800cf48:	b082      	sub	sp, #8
 800cf4a:	af00      	add	r7, sp, #0
 800cf4c:	6078      	str	r0, [r7, #4]
 800cf4e:	460b      	mov	r3, r1
 800cf50:	70fb      	strb	r3, [r7, #3]
#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800cf52:	78fb      	ldrb	r3, [r7, #3]
 800cf54:	f003 0301 	and.w	r3, r3, #1
 800cf58:	2b00      	cmp	r3, #0
 800cf5a:	d011      	beq.n	800cf80 <netif_issue_reports+0x3a>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800cf5c:	687b      	ldr	r3, [r7, #4]
 800cf5e:	3304      	adds	r3, #4
 800cf60:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800cf62:	2b00      	cmp	r3, #0
 800cf64:	d00c      	beq.n	800cf80 <netif_issue_reports+0x3a>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 800cf66:	687b      	ldr	r3, [r7, #4]
 800cf68:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800cf6c:	f003 0308 	and.w	r3, r3, #8
 800cf70:	2b00      	cmp	r3, #0
 800cf72:	d005      	beq.n	800cf80 <netif_issue_reports+0x3a>
      etharp_gratuitous(netif);
 800cf74:	687b      	ldr	r3, [r7, #4]
 800cf76:	3304      	adds	r3, #4
 800cf78:	4619      	mov	r1, r3
 800cf7a:	6878      	ldr	r0, [r7, #4]
 800cf7c:	f008 fcc4 	bl	8015908 <etharp_request>
    /* Send Router Solicitation messages. */
    netif->rs_count = LWIP_ND6_MAX_MULTICAST_SOLICIT;
#endif /* LWIP_IPV6_SEND_ROUTER_SOLICIT */
  }
#endif /* LWIP_IPV6 */
}
 800cf80:	bf00      	nop
 800cf82:	3708      	adds	r7, #8
 800cf84:	46bd      	mov	sp, r7
 800cf86:	bd80      	pop	{r7, pc}

0800cf88 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 800cf88:	b580      	push	{r7, lr}
 800cf8a:	b082      	sub	sp, #8
 800cf8c:	af00      	add	r7, sp, #0
 800cf8e:	6078      	str	r0, [r7, #4]
  if (netif->flags & NETIF_FLAG_UP) {
 800cf90:	687b      	ldr	r3, [r7, #4]
 800cf92:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800cf96:	f003 0301 	and.w	r3, r3, #1
 800cf9a:	2b00      	cmp	r3, #0
 800cf9c:	d012      	beq.n	800cfc4 <netif_set_down+0x3c>
    netif->flags &= ~NETIF_FLAG_UP;
 800cf9e:	687b      	ldr	r3, [r7, #4]
 800cfa0:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800cfa4:	f023 0301 	bic.w	r3, r3, #1
 800cfa8:	b2da      	uxtb	r2, r3
 800cfaa:	687b      	ldr	r3, [r7, #4]
 800cfac:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 800cfb0:	687b      	ldr	r3, [r7, #4]
 800cfb2:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800cfb6:	f003 0308 	and.w	r3, r3, #8
 800cfba:	2b00      	cmp	r3, #0
 800cfbc:	d002      	beq.n	800cfc4 <netif_set_down+0x3c>
      etharp_cleanup_netif(netif);
 800cfbe:	6878      	ldr	r0, [r7, #4]
 800cfc0:	f008 f864 	bl	801508c <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 800cfc4:	bf00      	nop
 800cfc6:	3708      	adds	r7, #8
 800cfc8:	46bd      	mov	sp, r7
 800cfca:	bd80      	pop	{r7, pc}

0800cfcc <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 800cfcc:	b580      	push	{r7, lr}
 800cfce:	b082      	sub	sp, #8
 800cfd0:	af00      	add	r7, sp, #0
  struct tcp_pcb* pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 800cfd2:	f00a f8a5 	bl	8017120 <sys_arch_protect>
 800cfd6:	6038      	str	r0, [r7, #0]
 800cfd8:	4b0f      	ldr	r3, [pc, #60]	; (800d018 <pbuf_free_ooseq+0x4c>)
 800cfda:	2200      	movs	r2, #0
 800cfdc:	701a      	strb	r2, [r3, #0]
 800cfde:	6838      	ldr	r0, [r7, #0]
 800cfe0:	f00a f8ac 	bl	801713c <sys_arch_unprotect>

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800cfe4:	4b0d      	ldr	r3, [pc, #52]	; (800d01c <pbuf_free_ooseq+0x50>)
 800cfe6:	681b      	ldr	r3, [r3, #0]
 800cfe8:	607b      	str	r3, [r7, #4]
 800cfea:	e00f      	b.n	800d00c <pbuf_free_ooseq+0x40>
    if (NULL != pcb->ooseq) {
 800cfec:	687b      	ldr	r3, [r7, #4]
 800cfee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cff0:	2b00      	cmp	r3, #0
 800cff2:	d008      	beq.n	800d006 <pbuf_free_ooseq+0x3a>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_segs_free(pcb->ooseq);
 800cff4:	687b      	ldr	r3, [r7, #4]
 800cff6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cff8:	4618      	mov	r0, r3
 800cffa:	f001 fd08 	bl	800ea0e <tcp_segs_free>
      pcb->ooseq = NULL;
 800cffe:	687b      	ldr	r3, [r7, #4]
 800d000:	2200      	movs	r2, #0
 800d002:	671a      	str	r2, [r3, #112]	; 0x70
      return;
 800d004:	e005      	b.n	800d012 <pbuf_free_ooseq+0x46>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800d006:	687b      	ldr	r3, [r7, #4]
 800d008:	68db      	ldr	r3, [r3, #12]
 800d00a:	607b      	str	r3, [r7, #4]
 800d00c:	687b      	ldr	r3, [r7, #4]
 800d00e:	2b00      	cmp	r3, #0
 800d010:	d1ec      	bne.n	800cfec <pbuf_free_ooseq+0x20>
    }
  }
}
 800d012:	3708      	adds	r7, #8
 800d014:	46bd      	mov	sp, r7
 800d016:	bd80      	pop	{r7, pc}
 800d018:	2000b5a8 	.word	0x2000b5a8
 800d01c:	2000b5b0 	.word	0x2000b5b0

0800d020 <pbuf_free_ooseq_callback>:
/**
 * Just a callback function for tcpip_callback() that calls pbuf_free_ooseq().
 */
static void
pbuf_free_ooseq_callback(void *arg)
{
 800d020:	b580      	push	{r7, lr}
 800d022:	b082      	sub	sp, #8
 800d024:	af00      	add	r7, sp, #0
 800d026:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);
  pbuf_free_ooseq();
 800d028:	f7ff ffd0 	bl	800cfcc <pbuf_free_ooseq>
}
 800d02c:	bf00      	nop
 800d02e:	3708      	adds	r7, #8
 800d030:	46bd      	mov	sp, r7
 800d032:	bd80      	pop	{r7, pc}

0800d034 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 800d034:	b580      	push	{r7, lr}
 800d036:	b082      	sub	sp, #8
 800d038:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
#else /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
  u8_t queued;
  SYS_ARCH_DECL_PROTECT(old_level);
  SYS_ARCH_PROTECT(old_level);
 800d03a:	f00a f871 	bl	8017120 <sys_arch_protect>
 800d03e:	6078      	str	r0, [r7, #4]
  queued = pbuf_free_ooseq_pending;
 800d040:	4b10      	ldr	r3, [pc, #64]	; (800d084 <pbuf_pool_is_empty+0x50>)
 800d042:	781b      	ldrb	r3, [r3, #0]
 800d044:	70fb      	strb	r3, [r7, #3]
  pbuf_free_ooseq_pending = 1;
 800d046:	4b0f      	ldr	r3, [pc, #60]	; (800d084 <pbuf_pool_is_empty+0x50>)
 800d048:	2201      	movs	r2, #1
 800d04a:	701a      	strb	r2, [r3, #0]
  SYS_ARCH_UNPROTECT(old_level);
 800d04c:	6878      	ldr	r0, [r7, #4]
 800d04e:	f00a f875 	bl	801713c <sys_arch_unprotect>

  if (!queued) {
 800d052:	78fb      	ldrb	r3, [r7, #3]
 800d054:	2b00      	cmp	r3, #0
 800d056:	d110      	bne.n	800d07a <pbuf_pool_is_empty+0x46>
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
 800d058:	2200      	movs	r2, #0
 800d05a:	2100      	movs	r1, #0
 800d05c:	480a      	ldr	r0, [pc, #40]	; (800d088 <pbuf_pool_is_empty+0x54>)
 800d05e:	f7ff f951 	bl	800c304 <tcpip_callback_with_block>
 800d062:	4603      	mov	r3, r0
 800d064:	2b00      	cmp	r3, #0
 800d066:	d008      	beq.n	800d07a <pbuf_pool_is_empty+0x46>
 800d068:	f00a f85a 	bl	8017120 <sys_arch_protect>
 800d06c:	6078      	str	r0, [r7, #4]
 800d06e:	4b05      	ldr	r3, [pc, #20]	; (800d084 <pbuf_pool_is_empty+0x50>)
 800d070:	2200      	movs	r2, #0
 800d072:	701a      	strb	r2, [r3, #0]
 800d074:	6878      	ldr	r0, [r7, #4]
 800d076:	f00a f861 	bl	801713c <sys_arch_unprotect>
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 800d07a:	bf00      	nop
 800d07c:	3708      	adds	r7, #8
 800d07e:	46bd      	mov	sp, r7
 800d080:	bd80      	pop	{r7, pc}
 800d082:	bf00      	nop
 800d084:	2000b5a8 	.word	0x2000b5a8
 800d088:	0800d021 	.word	0x0800d021

0800d08c <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 800d08c:	b580      	push	{r7, lr}
 800d08e:	b088      	sub	sp, #32
 800d090:	af00      	add	r7, sp, #0
 800d092:	4603      	mov	r3, r0
 800d094:	71fb      	strb	r3, [r7, #7]
 800d096:	460b      	mov	r3, r1
 800d098:	80bb      	strh	r3, [r7, #4]
 800d09a:	4613      	mov	r3, r2
 800d09c:	71bb      	strb	r3, [r7, #6]
  u16_t offset;
  s32_t rem_len; /* remaining length */
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  /* determine header offset */
  switch (layer) {
 800d09e:	79fb      	ldrb	r3, [r7, #7]
 800d0a0:	2b04      	cmp	r3, #4
 800d0a2:	d81c      	bhi.n	800d0de <pbuf_alloc+0x52>
 800d0a4:	a201      	add	r2, pc, #4	; (adr r2, 800d0ac <pbuf_alloc+0x20>)
 800d0a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d0aa:	bf00      	nop
 800d0ac:	0800d0c1 	.word	0x0800d0c1
 800d0b0:	0800d0c7 	.word	0x0800d0c7
 800d0b4:	0800d0cd 	.word	0x0800d0cd
 800d0b8:	0800d0d3 	.word	0x0800d0d3
 800d0bc:	0800d0d9 	.word	0x0800d0d9
  case PBUF_TRANSPORT:
    /* add room for transport (often TCP) layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN + PBUF_IP_HLEN + PBUF_TRANSPORT_HLEN;
 800d0c0:	2336      	movs	r3, #54	; 0x36
 800d0c2:	82fb      	strh	r3, [r7, #22]
    break;
 800d0c4:	e014      	b.n	800d0f0 <pbuf_alloc+0x64>
  case PBUF_IP:
    /* add room for IP layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN + PBUF_IP_HLEN;
 800d0c6:	2322      	movs	r3, #34	; 0x22
 800d0c8:	82fb      	strh	r3, [r7, #22]
    break;
 800d0ca:	e011      	b.n	800d0f0 <pbuf_alloc+0x64>
  case PBUF_LINK:
    /* add room for link layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN;
 800d0cc:	230e      	movs	r3, #14
 800d0ce:	82fb      	strh	r3, [r7, #22]
    break;
 800d0d0:	e00e      	b.n	800d0f0 <pbuf_alloc+0x64>
  case PBUF_RAW_TX:
    /* add room for encapsulating link layer headers (e.g. 802.11) */
    offset = PBUF_LINK_ENCAPSULATION_HLEN;
 800d0d2:	2300      	movs	r3, #0
 800d0d4:	82fb      	strh	r3, [r7, #22]
    break;
 800d0d6:	e00b      	b.n	800d0f0 <pbuf_alloc+0x64>
  case PBUF_RAW:
    /* no offset (e.g. RX buffers or chain successors) */
    offset = 0;
 800d0d8:	2300      	movs	r3, #0
 800d0da:	82fb      	strh	r3, [r7, #22]
    break;
 800d0dc:	e008      	b.n	800d0f0 <pbuf_alloc+0x64>
  default:
    LWIP_ASSERT("pbuf_alloc: bad pbuf layer", 0);
 800d0de:	4ba5      	ldr	r3, [pc, #660]	; (800d374 <pbuf_alloc+0x2e8>)
 800d0e0:	f44f 728b 	mov.w	r2, #278	; 0x116
 800d0e4:	49a4      	ldr	r1, [pc, #656]	; (800d378 <pbuf_alloc+0x2ec>)
 800d0e6:	48a5      	ldr	r0, [pc, #660]	; (800d37c <pbuf_alloc+0x2f0>)
 800d0e8:	f00a fe10 	bl	8017d0c <iprintf>
    return NULL;
 800d0ec:	2300      	movs	r3, #0
 800d0ee:	e15d      	b.n	800d3ac <pbuf_alloc+0x320>
  }

  switch (type) {
 800d0f0:	79bb      	ldrb	r3, [r7, #6]
 800d0f2:	2b03      	cmp	r3, #3
 800d0f4:	f200 8134 	bhi.w	800d360 <pbuf_alloc+0x2d4>
 800d0f8:	a201      	add	r2, pc, #4	; (adr r2, 800d100 <pbuf_alloc+0x74>)
 800d0fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d0fe:	bf00      	nop
 800d100:	0800d2a1 	.word	0x0800d2a1
 800d104:	0800d32d 	.word	0x0800d32d
 800d108:	0800d32d 	.word	0x0800d32d
 800d10c:	0800d111 	.word	0x0800d111
  case PBUF_POOL:
    /* allocate head of pbuf chain into p */
    p = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 800d110:	200c      	movs	r0, #12
 800d112:	f7ff fd79 	bl	800cc08 <memp_malloc>
 800d116:	61f8      	str	r0, [r7, #28]
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc: allocated pbuf %p\n", (void *)p));
    if (p == NULL) {
 800d118:	69fb      	ldr	r3, [r7, #28]
 800d11a:	2b00      	cmp	r3, #0
 800d11c:	d103      	bne.n	800d126 <pbuf_alloc+0x9a>
      PBUF_POOL_IS_EMPTY();
 800d11e:	f7ff ff89 	bl	800d034 <pbuf_pool_is_empty>
      return NULL;
 800d122:	2300      	movs	r3, #0
 800d124:	e142      	b.n	800d3ac <pbuf_alloc+0x320>
    }
    p->type = type;
 800d126:	69fb      	ldr	r3, [r7, #28]
 800d128:	79ba      	ldrb	r2, [r7, #6]
 800d12a:	731a      	strb	r2, [r3, #12]
    p->next = NULL;
 800d12c:	69fb      	ldr	r3, [r7, #28]
 800d12e:	2200      	movs	r2, #0
 800d130:	601a      	str	r2, [r3, #0]

    /* make the payload pointer point 'offset' bytes into pbuf data memory */
    p->payload = LWIP_MEM_ALIGN((void *)((u8_t *)p + (SIZEOF_STRUCT_PBUF + offset)));
 800d132:	8afb      	ldrh	r3, [r7, #22]
 800d134:	3310      	adds	r3, #16
 800d136:	69fa      	ldr	r2, [r7, #28]
 800d138:	4413      	add	r3, r2
 800d13a:	3303      	adds	r3, #3
 800d13c:	f023 0303 	bic.w	r3, r3, #3
 800d140:	461a      	mov	r2, r3
 800d142:	69fb      	ldr	r3, [r7, #28]
 800d144:	605a      	str	r2, [r3, #4]
    LWIP_ASSERT("pbuf_alloc: pbuf p->payload properly aligned",
 800d146:	69fb      	ldr	r3, [r7, #28]
 800d148:	685b      	ldr	r3, [r3, #4]
 800d14a:	f003 0303 	and.w	r3, r3, #3
 800d14e:	2b00      	cmp	r3, #0
 800d150:	d006      	beq.n	800d160 <pbuf_alloc+0xd4>
 800d152:	4b88      	ldr	r3, [pc, #544]	; (800d374 <pbuf_alloc+0x2e8>)
 800d154:	f240 1229 	movw	r2, #297	; 0x129
 800d158:	4989      	ldr	r1, [pc, #548]	; (800d380 <pbuf_alloc+0x2f4>)
 800d15a:	4888      	ldr	r0, [pc, #544]	; (800d37c <pbuf_alloc+0x2f0>)
 800d15c:	f00a fdd6 	bl	8017d0c <iprintf>
            ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
    /* the total length of the pbuf chain is the requested size */
    p->tot_len = length;
 800d160:	69fb      	ldr	r3, [r7, #28]
 800d162:	88ba      	ldrh	r2, [r7, #4]
 800d164:	811a      	strh	r2, [r3, #8]
    /* set the length of the first pbuf in the chain */
    p->len = LWIP_MIN(length, PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset));
 800d166:	8afb      	ldrh	r3, [r7, #22]
 800d168:	3303      	adds	r3, #3
 800d16a:	f023 0303 	bic.w	r3, r3, #3
 800d16e:	f5c3 7214 	rsb	r2, r3, #592	; 0x250
 800d172:	88bb      	ldrh	r3, [r7, #4]
 800d174:	4293      	cmp	r3, r2
 800d176:	bf28      	it	cs
 800d178:	4613      	movcs	r3, r2
 800d17a:	b29a      	uxth	r2, r3
 800d17c:	69fb      	ldr	r3, [r7, #28]
 800d17e:	815a      	strh	r2, [r3, #10]
    LWIP_ASSERT("check p->payload + p->len does not overflow pbuf",
 800d180:	69fb      	ldr	r3, [r7, #28]
 800d182:	685b      	ldr	r3, [r3, #4]
 800d184:	69fa      	ldr	r2, [r7, #28]
 800d186:	8952      	ldrh	r2, [r2, #10]
 800d188:	441a      	add	r2, r3
 800d18a:	69fb      	ldr	r3, [r7, #28]
 800d18c:	f503 7318 	add.w	r3, r3, #608	; 0x260
 800d190:	429a      	cmp	r2, r3
 800d192:	d906      	bls.n	800d1a2 <pbuf_alloc+0x116>
 800d194:	4b77      	ldr	r3, [pc, #476]	; (800d374 <pbuf_alloc+0x2e8>)
 800d196:	f44f 7298 	mov.w	r2, #304	; 0x130
 800d19a:	497a      	ldr	r1, [pc, #488]	; (800d384 <pbuf_alloc+0x2f8>)
 800d19c:	4877      	ldr	r0, [pc, #476]	; (800d37c <pbuf_alloc+0x2f0>)
 800d19e:	f00a fdb5 	bl	8017d0c <iprintf>
                ((u8_t*)p->payload + p->len <=
                 (u8_t*)p + SIZEOF_STRUCT_PBUF + PBUF_POOL_BUFSIZE_ALIGNED));
    LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 800d1a2:	8afb      	ldrh	r3, [r7, #22]
 800d1a4:	3303      	adds	r3, #3
 800d1a6:	f023 0303 	bic.w	r3, r3, #3
 800d1aa:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 800d1ae:	d106      	bne.n	800d1be <pbuf_alloc+0x132>
 800d1b0:	4b70      	ldr	r3, [pc, #448]	; (800d374 <pbuf_alloc+0x2e8>)
 800d1b2:	f44f 7299 	mov.w	r2, #306	; 0x132
 800d1b6:	4974      	ldr	r1, [pc, #464]	; (800d388 <pbuf_alloc+0x2fc>)
 800d1b8:	4870      	ldr	r0, [pc, #448]	; (800d37c <pbuf_alloc+0x2f0>)
 800d1ba:	f00a fda7 	bl	8017d0c <iprintf>
      (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
    /* set reference count (needed here in case we fail) */
    p->ref = 1;
 800d1be:	69fb      	ldr	r3, [r7, #28]
 800d1c0:	2201      	movs	r2, #1
 800d1c2:	81da      	strh	r2, [r3, #14]

    /* now allocate the tail of the pbuf chain */

    /* remember first pbuf for linkage in next iteration */
    r = p;
 800d1c4:	69fb      	ldr	r3, [r7, #28]
 800d1c6:	61bb      	str	r3, [r7, #24]
    /* remaining length to be allocated */
    rem_len = length - p->len;
 800d1c8:	88bb      	ldrh	r3, [r7, #4]
 800d1ca:	69fa      	ldr	r2, [r7, #28]
 800d1cc:	8952      	ldrh	r2, [r2, #10]
 800d1ce:	1a9b      	subs	r3, r3, r2
 800d1d0:	613b      	str	r3, [r7, #16]
    /* any remaining pbufs to be allocated? */
    while (rem_len > 0) {
 800d1d2:	e061      	b.n	800d298 <pbuf_alloc+0x20c>
      q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 800d1d4:	200c      	movs	r0, #12
 800d1d6:	f7ff fd17 	bl	800cc08 <memp_malloc>
 800d1da:	60f8      	str	r0, [r7, #12]
      if (q == NULL) {
 800d1dc:	68fb      	ldr	r3, [r7, #12]
 800d1de:	2b00      	cmp	r3, #0
 800d1e0:	d106      	bne.n	800d1f0 <pbuf_alloc+0x164>
        PBUF_POOL_IS_EMPTY();
 800d1e2:	f7ff ff27 	bl	800d034 <pbuf_pool_is_empty>
        /* free chain so far allocated */
        pbuf_free(p);
 800d1e6:	69f8      	ldr	r0, [r7, #28]
 800d1e8:	f000 fac2 	bl	800d770 <pbuf_free>
        /* bail out unsuccessfully */
        return NULL;
 800d1ec:	2300      	movs	r3, #0
 800d1ee:	e0dd      	b.n	800d3ac <pbuf_alloc+0x320>
      }
      q->type = type;
 800d1f0:	68fb      	ldr	r3, [r7, #12]
 800d1f2:	79ba      	ldrb	r2, [r7, #6]
 800d1f4:	731a      	strb	r2, [r3, #12]
      q->flags = 0;
 800d1f6:	68fb      	ldr	r3, [r7, #12]
 800d1f8:	2200      	movs	r2, #0
 800d1fa:	735a      	strb	r2, [r3, #13]
      q->next = NULL;
 800d1fc:	68fb      	ldr	r3, [r7, #12]
 800d1fe:	2200      	movs	r2, #0
 800d200:	601a      	str	r2, [r3, #0]
      /* make previous pbuf point to this pbuf */
      r->next = q;
 800d202:	69bb      	ldr	r3, [r7, #24]
 800d204:	68fa      	ldr	r2, [r7, #12]
 800d206:	601a      	str	r2, [r3, #0]
      /* set total length of this pbuf and next in chain */
      LWIP_ASSERT("rem_len < max_u16_t", rem_len < 0xffff);
 800d208:	693b      	ldr	r3, [r7, #16]
 800d20a:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800d20e:	4293      	cmp	r3, r2
 800d210:	dd06      	ble.n	800d220 <pbuf_alloc+0x194>
 800d212:	4b58      	ldr	r3, [pc, #352]	; (800d374 <pbuf_alloc+0x2e8>)
 800d214:	f44f 72a6 	mov.w	r2, #332	; 0x14c
 800d218:	495c      	ldr	r1, [pc, #368]	; (800d38c <pbuf_alloc+0x300>)
 800d21a:	4858      	ldr	r0, [pc, #352]	; (800d37c <pbuf_alloc+0x2f0>)
 800d21c:	f00a fd76 	bl	8017d0c <iprintf>
      q->tot_len = (u16_t)rem_len;
 800d220:	693b      	ldr	r3, [r7, #16]
 800d222:	b29a      	uxth	r2, r3
 800d224:	68fb      	ldr	r3, [r7, #12]
 800d226:	811a      	strh	r2, [r3, #8]
      /* this pbuf length is pool size, unless smaller sized tail */
      q->len = LWIP_MIN((u16_t)rem_len, PBUF_POOL_BUFSIZE_ALIGNED);
 800d228:	693b      	ldr	r3, [r7, #16]
 800d22a:	b29b      	uxth	r3, r3
 800d22c:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 800d230:	bf28      	it	cs
 800d232:	f44f 7314 	movcs.w	r3, #592	; 0x250
 800d236:	b29a      	uxth	r2, r3
 800d238:	68fb      	ldr	r3, [r7, #12]
 800d23a:	815a      	strh	r2, [r3, #10]
      q->payload = (void *)((u8_t *)q + SIZEOF_STRUCT_PBUF);
 800d23c:	68fb      	ldr	r3, [r7, #12]
 800d23e:	f103 0210 	add.w	r2, r3, #16
 800d242:	68fb      	ldr	r3, [r7, #12]
 800d244:	605a      	str	r2, [r3, #4]
      LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 800d246:	68fb      	ldr	r3, [r7, #12]
 800d248:	685b      	ldr	r3, [r3, #4]
 800d24a:	f003 0303 	and.w	r3, r3, #3
 800d24e:	2b00      	cmp	r3, #0
 800d250:	d006      	beq.n	800d260 <pbuf_alloc+0x1d4>
 800d252:	4b48      	ldr	r3, [pc, #288]	; (800d374 <pbuf_alloc+0x2e8>)
 800d254:	f44f 72a9 	mov.w	r2, #338	; 0x152
 800d258:	494d      	ldr	r1, [pc, #308]	; (800d390 <pbuf_alloc+0x304>)
 800d25a:	4848      	ldr	r0, [pc, #288]	; (800d37c <pbuf_alloc+0x2f0>)
 800d25c:	f00a fd56 	bl	8017d0c <iprintf>
              ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
      LWIP_ASSERT("check p->payload + p->len does not overflow pbuf",
 800d260:	69fb      	ldr	r3, [r7, #28]
 800d262:	685b      	ldr	r3, [r3, #4]
 800d264:	69fa      	ldr	r2, [r7, #28]
 800d266:	8952      	ldrh	r2, [r2, #10]
 800d268:	441a      	add	r2, r3
 800d26a:	69fb      	ldr	r3, [r7, #28]
 800d26c:	f503 7318 	add.w	r3, r3, #608	; 0x260
 800d270:	429a      	cmp	r2, r3
 800d272:	d906      	bls.n	800d282 <pbuf_alloc+0x1f6>
 800d274:	4b3f      	ldr	r3, [pc, #252]	; (800d374 <pbuf_alloc+0x2e8>)
 800d276:	f240 1255 	movw	r2, #341	; 0x155
 800d27a:	4942      	ldr	r1, [pc, #264]	; (800d384 <pbuf_alloc+0x2f8>)
 800d27c:	483f      	ldr	r0, [pc, #252]	; (800d37c <pbuf_alloc+0x2f0>)
 800d27e:	f00a fd45 	bl	8017d0c <iprintf>
                  ((u8_t*)p->payload + p->len <=
                   (u8_t*)p + SIZEOF_STRUCT_PBUF + PBUF_POOL_BUFSIZE_ALIGNED));
      q->ref = 1;
 800d282:	68fb      	ldr	r3, [r7, #12]
 800d284:	2201      	movs	r2, #1
 800d286:	81da      	strh	r2, [r3, #14]
      /* calculate remaining length to be allocated */
      rem_len -= q->len;
 800d288:	68fb      	ldr	r3, [r7, #12]
 800d28a:	895b      	ldrh	r3, [r3, #10]
 800d28c:	461a      	mov	r2, r3
 800d28e:	693b      	ldr	r3, [r7, #16]
 800d290:	1a9b      	subs	r3, r3, r2
 800d292:	613b      	str	r3, [r7, #16]
      /* remember this pbuf for linkage in next iteration */
      r = q;
 800d294:	68fb      	ldr	r3, [r7, #12]
 800d296:	61bb      	str	r3, [r7, #24]
    while (rem_len > 0) {
 800d298:	693b      	ldr	r3, [r7, #16]
 800d29a:	2b00      	cmp	r3, #0
 800d29c:	dc9a      	bgt.n	800d1d4 <pbuf_alloc+0x148>
    }
    /* end of chain */
    /*r->next = NULL;*/

    break;
 800d29e:	e07e      	b.n	800d39e <pbuf_alloc+0x312>
  case PBUF_RAM:
    {
      mem_size_t alloc_len = LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF + offset) + LWIP_MEM_ALIGN_SIZE(length);
 800d2a0:	8afb      	ldrh	r3, [r7, #22]
 800d2a2:	3313      	adds	r3, #19
 800d2a4:	b29b      	uxth	r3, r3
 800d2a6:	f023 0303 	bic.w	r3, r3, #3
 800d2aa:	b29a      	uxth	r2, r3
 800d2ac:	88bb      	ldrh	r3, [r7, #4]
 800d2ae:	3303      	adds	r3, #3
 800d2b0:	b29b      	uxth	r3, r3
 800d2b2:	f023 0303 	bic.w	r3, r3, #3
 800d2b6:	b29b      	uxth	r3, r3
 800d2b8:	4413      	add	r3, r2
 800d2ba:	817b      	strh	r3, [r7, #10]
      
      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if (alloc_len < LWIP_MEM_ALIGN_SIZE(length)) {
 800d2bc:	897a      	ldrh	r2, [r7, #10]
 800d2be:	88bb      	ldrh	r3, [r7, #4]
 800d2c0:	3303      	adds	r3, #3
 800d2c2:	f023 0303 	bic.w	r3, r3, #3
 800d2c6:	429a      	cmp	r2, r3
 800d2c8:	d201      	bcs.n	800d2ce <pbuf_alloc+0x242>
        return NULL;
 800d2ca:	2300      	movs	r3, #0
 800d2cc:	e06e      	b.n	800d3ac <pbuf_alloc+0x320>
      }
    
      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf*)mem_malloc(alloc_len);
 800d2ce:	897b      	ldrh	r3, [r7, #10]
 800d2d0:	4618      	mov	r0, r3
 800d2d2:	f7ff fb29 	bl	800c928 <mem_malloc>
 800d2d6:	61f8      	str	r0, [r7, #28]
    }

    if (p == NULL) {
 800d2d8:	69fb      	ldr	r3, [r7, #28]
 800d2da:	2b00      	cmp	r3, #0
 800d2dc:	d101      	bne.n	800d2e2 <pbuf_alloc+0x256>
      return NULL;
 800d2de:	2300      	movs	r3, #0
 800d2e0:	e064      	b.n	800d3ac <pbuf_alloc+0x320>
    }
    /* Set up internal structure of the pbuf. */
    p->payload = LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset));
 800d2e2:	8afb      	ldrh	r3, [r7, #22]
 800d2e4:	3310      	adds	r3, #16
 800d2e6:	69fa      	ldr	r2, [r7, #28]
 800d2e8:	4413      	add	r3, r2
 800d2ea:	3303      	adds	r3, #3
 800d2ec:	f023 0303 	bic.w	r3, r3, #3
 800d2f0:	461a      	mov	r2, r3
 800d2f2:	69fb      	ldr	r3, [r7, #28]
 800d2f4:	605a      	str	r2, [r3, #4]
    p->len = p->tot_len = length;
 800d2f6:	69fb      	ldr	r3, [r7, #28]
 800d2f8:	88ba      	ldrh	r2, [r7, #4]
 800d2fa:	811a      	strh	r2, [r3, #8]
 800d2fc:	69fb      	ldr	r3, [r7, #28]
 800d2fe:	891a      	ldrh	r2, [r3, #8]
 800d300:	69fb      	ldr	r3, [r7, #28]
 800d302:	815a      	strh	r2, [r3, #10]
    p->next = NULL;
 800d304:	69fb      	ldr	r3, [r7, #28]
 800d306:	2200      	movs	r2, #0
 800d308:	601a      	str	r2, [r3, #0]
    p->type = type;
 800d30a:	69fb      	ldr	r3, [r7, #28]
 800d30c:	79ba      	ldrb	r2, [r7, #6]
 800d30e:	731a      	strb	r2, [r3, #12]

    LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 800d310:	69fb      	ldr	r3, [r7, #28]
 800d312:	685b      	ldr	r3, [r3, #4]
 800d314:	f003 0303 	and.w	r3, r3, #3
 800d318:	2b00      	cmp	r3, #0
 800d31a:	d03f      	beq.n	800d39c <pbuf_alloc+0x310>
 800d31c:	4b15      	ldr	r3, [pc, #84]	; (800d374 <pbuf_alloc+0x2e8>)
 800d31e:	f240 1277 	movw	r2, #375	; 0x177
 800d322:	491c      	ldr	r1, [pc, #112]	; (800d394 <pbuf_alloc+0x308>)
 800d324:	4815      	ldr	r0, [pc, #84]	; (800d37c <pbuf_alloc+0x2f0>)
 800d326:	f00a fcf1 	bl	8017d0c <iprintf>
           ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
    break;
 800d32a:	e037      	b.n	800d39c <pbuf_alloc+0x310>
  /* pbuf references existing (non-volatile static constant) ROM payload? */
  case PBUF_ROM:
  /* pbuf references existing (externally allocated) RAM payload? */
  case PBUF_REF:
    /* only allocate memory for the pbuf structure */
    p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 800d32c:	200b      	movs	r0, #11
 800d32e:	f7ff fc6b 	bl	800cc08 <memp_malloc>
 800d332:	61f8      	str	r0, [r7, #28]
    if (p == NULL) {
 800d334:	69fb      	ldr	r3, [r7, #28]
 800d336:	2b00      	cmp	r3, #0
 800d338:	d101      	bne.n	800d33e <pbuf_alloc+0x2b2>
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("pbuf_alloc: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                  (type == PBUF_ROM) ? "ROM" : "REF"));
      return NULL;
 800d33a:	2300      	movs	r3, #0
 800d33c:	e036      	b.n	800d3ac <pbuf_alloc+0x320>
    }
    /* caller must set this field properly, afterwards */
    p->payload = NULL;
 800d33e:	69fb      	ldr	r3, [r7, #28]
 800d340:	2200      	movs	r2, #0
 800d342:	605a      	str	r2, [r3, #4]
    p->len = p->tot_len = length;
 800d344:	69fb      	ldr	r3, [r7, #28]
 800d346:	88ba      	ldrh	r2, [r7, #4]
 800d348:	811a      	strh	r2, [r3, #8]
 800d34a:	69fb      	ldr	r3, [r7, #28]
 800d34c:	891a      	ldrh	r2, [r3, #8]
 800d34e:	69fb      	ldr	r3, [r7, #28]
 800d350:	815a      	strh	r2, [r3, #10]
    p->next = NULL;
 800d352:	69fb      	ldr	r3, [r7, #28]
 800d354:	2200      	movs	r2, #0
 800d356:	601a      	str	r2, [r3, #0]
    p->type = type;
 800d358:	69fb      	ldr	r3, [r7, #28]
 800d35a:	79ba      	ldrb	r2, [r7, #6]
 800d35c:	731a      	strb	r2, [r3, #12]
    break;
 800d35e:	e01e      	b.n	800d39e <pbuf_alloc+0x312>
  default:
    LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 800d360:	4b04      	ldr	r3, [pc, #16]	; (800d374 <pbuf_alloc+0x2e8>)
 800d362:	f44f 72c6 	mov.w	r2, #396	; 0x18c
 800d366:	490c      	ldr	r1, [pc, #48]	; (800d398 <pbuf_alloc+0x30c>)
 800d368:	4804      	ldr	r0, [pc, #16]	; (800d37c <pbuf_alloc+0x2f0>)
 800d36a:	f00a fccf 	bl	8017d0c <iprintf>
    return NULL;
 800d36e:	2300      	movs	r3, #0
 800d370:	e01c      	b.n	800d3ac <pbuf_alloc+0x320>
 800d372:	bf00      	nop
 800d374:	08018f0c 	.word	0x08018f0c
 800d378:	08018f3c 	.word	0x08018f3c
 800d37c:	08018f58 	.word	0x08018f58
 800d380:	08018f80 	.word	0x08018f80
 800d384:	08018fb0 	.word	0x08018fb0
 800d388:	08018fe4 	.word	0x08018fe4
 800d38c:	08019018 	.word	0x08019018
 800d390:	0801902c 	.word	0x0801902c
 800d394:	0801905c 	.word	0x0801905c
 800d398:	08019088 	.word	0x08019088
    break;
 800d39c:	bf00      	nop
  }
  /* set reference count */
  p->ref = 1;
 800d39e:	69fb      	ldr	r3, [r7, #28]
 800d3a0:	2201      	movs	r2, #1
 800d3a2:	81da      	strh	r2, [r3, #14]
  /* set flags */
  p->flags = 0;
 800d3a4:	69fb      	ldr	r3, [r7, #28]
 800d3a6:	2200      	movs	r2, #0
 800d3a8:	735a      	strb	r2, [r3, #13]
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 800d3aa:	69fb      	ldr	r3, [r7, #28]
}
 800d3ac:	4618      	mov	r0, r3
 800d3ae:	3720      	adds	r7, #32
 800d3b0:	46bd      	mov	sp, r7
 800d3b2:	bd80      	pop	{r7, pc}

0800d3b4 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf*
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 800d3b4:	b580      	push	{r7, lr}
 800d3b6:	b084      	sub	sp, #16
 800d3b8:	af00      	add	r7, sp, #0
 800d3ba:	603b      	str	r3, [r7, #0]
 800d3bc:	4603      	mov	r3, r0
 800d3be:	71fb      	strb	r3, [r7, #7]
 800d3c0:	460b      	mov	r3, r1
 800d3c2:	80bb      	strh	r3, [r7, #4]
 800d3c4:	4613      	mov	r3, r2
 800d3c6:	71bb      	strb	r3, [r7, #6]
  u16_t offset;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  /* determine header offset */
  switch (l) {
 800d3c8:	79fb      	ldrb	r3, [r7, #7]
 800d3ca:	2b04      	cmp	r3, #4
 800d3cc:	d81b      	bhi.n	800d406 <pbuf_alloced_custom+0x52>
 800d3ce:	a201      	add	r2, pc, #4	; (adr r2, 800d3d4 <pbuf_alloced_custom+0x20>)
 800d3d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d3d4:	0800d3e9 	.word	0x0800d3e9
 800d3d8:	0800d3ef 	.word	0x0800d3ef
 800d3dc:	0800d3f5 	.word	0x0800d3f5
 800d3e0:	0800d3fb 	.word	0x0800d3fb
 800d3e4:	0800d401 	.word	0x0800d401
  case PBUF_TRANSPORT:
    /* add room for transport (often TCP) layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN + PBUF_IP_HLEN + PBUF_TRANSPORT_HLEN;
 800d3e8:	2336      	movs	r3, #54	; 0x36
 800d3ea:	81fb      	strh	r3, [r7, #14]
    break;
 800d3ec:	e014      	b.n	800d418 <pbuf_alloced_custom+0x64>
  case PBUF_IP:
    /* add room for IP layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN + PBUF_IP_HLEN;
 800d3ee:	2322      	movs	r3, #34	; 0x22
 800d3f0:	81fb      	strh	r3, [r7, #14]
    break;
 800d3f2:	e011      	b.n	800d418 <pbuf_alloced_custom+0x64>
  case PBUF_LINK:
    /* add room for link layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN;
 800d3f4:	230e      	movs	r3, #14
 800d3f6:	81fb      	strh	r3, [r7, #14]
    break;
 800d3f8:	e00e      	b.n	800d418 <pbuf_alloced_custom+0x64>
  case PBUF_RAW_TX:
    /* add room for encapsulating link layer headers (e.g. 802.11) */
    offset = PBUF_LINK_ENCAPSULATION_HLEN;
 800d3fa:	2300      	movs	r3, #0
 800d3fc:	81fb      	strh	r3, [r7, #14]
    break;
 800d3fe:	e00b      	b.n	800d418 <pbuf_alloced_custom+0x64>
  case PBUF_RAW:
    offset = 0;
 800d400:	2300      	movs	r3, #0
 800d402:	81fb      	strh	r3, [r7, #14]
    break;
 800d404:	e008      	b.n	800d418 <pbuf_alloced_custom+0x64>
  default:
    LWIP_ASSERT("pbuf_alloced_custom: bad pbuf layer", 0);
 800d406:	4b1d      	ldr	r3, [pc, #116]	; (800d47c <pbuf_alloced_custom+0xc8>)
 800d408:	f240 12c5 	movw	r2, #453	; 0x1c5
 800d40c:	491c      	ldr	r1, [pc, #112]	; (800d480 <pbuf_alloced_custom+0xcc>)
 800d40e:	481d      	ldr	r0, [pc, #116]	; (800d484 <pbuf_alloced_custom+0xd0>)
 800d410:	f00a fc7c 	bl	8017d0c <iprintf>
    return NULL;
 800d414:	2300      	movs	r3, #0
 800d416:	e02d      	b.n	800d474 <pbuf_alloced_custom+0xc0>
  }

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 800d418:	89fb      	ldrh	r3, [r7, #14]
 800d41a:	3303      	adds	r3, #3
 800d41c:	f023 0203 	bic.w	r2, r3, #3
 800d420:	88bb      	ldrh	r3, [r7, #4]
 800d422:	441a      	add	r2, r3
 800d424:	8bbb      	ldrh	r3, [r7, #28]
 800d426:	429a      	cmp	r2, r3
 800d428:	d901      	bls.n	800d42e <pbuf_alloced_custom+0x7a>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 800d42a:	2300      	movs	r3, #0
 800d42c:	e022      	b.n	800d474 <pbuf_alloced_custom+0xc0>
  }

  p->pbuf.next = NULL;
 800d42e:	683b      	ldr	r3, [r7, #0]
 800d430:	2200      	movs	r2, #0
 800d432:	601a      	str	r2, [r3, #0]
  if (payload_mem != NULL) {
 800d434:	69bb      	ldr	r3, [r7, #24]
 800d436:	2b00      	cmp	r3, #0
 800d438:	d008      	beq.n	800d44c <pbuf_alloced_custom+0x98>
    p->pbuf.payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 800d43a:	89fb      	ldrh	r3, [r7, #14]
 800d43c:	3303      	adds	r3, #3
 800d43e:	f023 0303 	bic.w	r3, r3, #3
 800d442:	69ba      	ldr	r2, [r7, #24]
 800d444:	441a      	add	r2, r3
 800d446:	683b      	ldr	r3, [r7, #0]
 800d448:	605a      	str	r2, [r3, #4]
 800d44a:	e002      	b.n	800d452 <pbuf_alloced_custom+0x9e>
  } else {
    p->pbuf.payload = NULL;
 800d44c:	683b      	ldr	r3, [r7, #0]
 800d44e:	2200      	movs	r2, #0
 800d450:	605a      	str	r2, [r3, #4]
  }
  p->pbuf.flags = PBUF_FLAG_IS_CUSTOM;
 800d452:	683b      	ldr	r3, [r7, #0]
 800d454:	2202      	movs	r2, #2
 800d456:	735a      	strb	r2, [r3, #13]
  p->pbuf.len = p->pbuf.tot_len = length;
 800d458:	683b      	ldr	r3, [r7, #0]
 800d45a:	88ba      	ldrh	r2, [r7, #4]
 800d45c:	811a      	strh	r2, [r3, #8]
 800d45e:	683b      	ldr	r3, [r7, #0]
 800d460:	891a      	ldrh	r2, [r3, #8]
 800d462:	683b      	ldr	r3, [r7, #0]
 800d464:	815a      	strh	r2, [r3, #10]
  p->pbuf.type = type;
 800d466:	683b      	ldr	r3, [r7, #0]
 800d468:	79ba      	ldrb	r2, [r7, #6]
 800d46a:	731a      	strb	r2, [r3, #12]
  p->pbuf.ref = 1;
 800d46c:	683b      	ldr	r3, [r7, #0]
 800d46e:	2201      	movs	r2, #1
 800d470:	81da      	strh	r2, [r3, #14]
  return &p->pbuf;
 800d472:	683b      	ldr	r3, [r7, #0]
}
 800d474:	4618      	mov	r0, r3
 800d476:	3710      	adds	r7, #16
 800d478:	46bd      	mov	sp, r7
 800d47a:	bd80      	pop	{r7, pc}
 800d47c:	08018f0c 	.word	0x08018f0c
 800d480:	080190a4 	.word	0x080190a4
 800d484:	08018f58 	.word	0x08018f58

0800d488 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 800d488:	b580      	push	{r7, lr}
 800d48a:	b086      	sub	sp, #24
 800d48c:	af00      	add	r7, sp, #0
 800d48e:	6078      	str	r0, [r7, #4]
 800d490:	460b      	mov	r3, r1
 800d492:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  s32_t grow;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 800d494:	687b      	ldr	r3, [r7, #4]
 800d496:	2b00      	cmp	r3, #0
 800d498:	d106      	bne.n	800d4a8 <pbuf_realloc+0x20>
 800d49a:	4b4b      	ldr	r3, [pc, #300]	; (800d5c8 <pbuf_realloc+0x140>)
 800d49c:	f240 12f3 	movw	r2, #499	; 0x1f3
 800d4a0:	494a      	ldr	r1, [pc, #296]	; (800d5cc <pbuf_realloc+0x144>)
 800d4a2:	484b      	ldr	r0, [pc, #300]	; (800d5d0 <pbuf_realloc+0x148>)
 800d4a4:	f00a fc32 	bl	8017d0c <iprintf>
  LWIP_ASSERT("pbuf_realloc: sane p->type", p->type == PBUF_POOL ||
 800d4a8:	687b      	ldr	r3, [r7, #4]
 800d4aa:	7b1b      	ldrb	r3, [r3, #12]
 800d4ac:	2b03      	cmp	r3, #3
 800d4ae:	d012      	beq.n	800d4d6 <pbuf_realloc+0x4e>
 800d4b0:	687b      	ldr	r3, [r7, #4]
 800d4b2:	7b1b      	ldrb	r3, [r3, #12]
 800d4b4:	2b01      	cmp	r3, #1
 800d4b6:	d00e      	beq.n	800d4d6 <pbuf_realloc+0x4e>
 800d4b8:	687b      	ldr	r3, [r7, #4]
 800d4ba:	7b1b      	ldrb	r3, [r3, #12]
 800d4bc:	2b00      	cmp	r3, #0
 800d4be:	d00a      	beq.n	800d4d6 <pbuf_realloc+0x4e>
 800d4c0:	687b      	ldr	r3, [r7, #4]
 800d4c2:	7b1b      	ldrb	r3, [r3, #12]
 800d4c4:	2b02      	cmp	r3, #2
 800d4c6:	d006      	beq.n	800d4d6 <pbuf_realloc+0x4e>
 800d4c8:	4b3f      	ldr	r3, [pc, #252]	; (800d5c8 <pbuf_realloc+0x140>)
 800d4ca:	f240 12f7 	movw	r2, #503	; 0x1f7
 800d4ce:	4941      	ldr	r1, [pc, #260]	; (800d5d4 <pbuf_realloc+0x14c>)
 800d4d0:	483f      	ldr	r0, [pc, #252]	; (800d5d0 <pbuf_realloc+0x148>)
 800d4d2:	f00a fc1b 	bl	8017d0c <iprintf>
              p->type == PBUF_ROM ||
              p->type == PBUF_RAM ||
              p->type == PBUF_REF);

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 800d4d6:	687b      	ldr	r3, [r7, #4]
 800d4d8:	891b      	ldrh	r3, [r3, #8]
 800d4da:	887a      	ldrh	r2, [r7, #2]
 800d4dc:	429a      	cmp	r2, r3
 800d4de:	d26f      	bcs.n	800d5c0 <pbuf_realloc+0x138>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  grow = new_len - p->tot_len;
 800d4e0:	887b      	ldrh	r3, [r7, #2]
 800d4e2:	687a      	ldr	r2, [r7, #4]
 800d4e4:	8912      	ldrh	r2, [r2, #8]
 800d4e6:	1a9b      	subs	r3, r3, r2
 800d4e8:	60fb      	str	r3, [r7, #12]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 800d4ea:	887b      	ldrh	r3, [r7, #2]
 800d4ec:	827b      	strh	r3, [r7, #18]
  q = p;
 800d4ee:	687b      	ldr	r3, [r7, #4]
 800d4f0:	617b      	str	r3, [r7, #20]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 800d4f2:	e025      	b.n	800d540 <pbuf_realloc+0xb8>
    /* decrease remaining length by pbuf length */
    rem_len -= q->len;
 800d4f4:	697b      	ldr	r3, [r7, #20]
 800d4f6:	895b      	ldrh	r3, [r3, #10]
 800d4f8:	8a7a      	ldrh	r2, [r7, #18]
 800d4fa:	1ad3      	subs	r3, r2, r3
 800d4fc:	827b      	strh	r3, [r7, #18]
    /* decrease total length indicator */
    LWIP_ASSERT("grow < max_u16_t", grow < 0xffff);
 800d4fe:	68fb      	ldr	r3, [r7, #12]
 800d500:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800d504:	4293      	cmp	r3, r2
 800d506:	dd06      	ble.n	800d516 <pbuf_realloc+0x8e>
 800d508:	4b2f      	ldr	r3, [pc, #188]	; (800d5c8 <pbuf_realloc+0x140>)
 800d50a:	f240 220b 	movw	r2, #523	; 0x20b
 800d50e:	4932      	ldr	r1, [pc, #200]	; (800d5d8 <pbuf_realloc+0x150>)
 800d510:	482f      	ldr	r0, [pc, #188]	; (800d5d0 <pbuf_realloc+0x148>)
 800d512:	f00a fbfb 	bl	8017d0c <iprintf>
    q->tot_len += (u16_t)grow;
 800d516:	697b      	ldr	r3, [r7, #20]
 800d518:	891a      	ldrh	r2, [r3, #8]
 800d51a:	68fb      	ldr	r3, [r7, #12]
 800d51c:	b29b      	uxth	r3, r3
 800d51e:	4413      	add	r3, r2
 800d520:	b29a      	uxth	r2, r3
 800d522:	697b      	ldr	r3, [r7, #20]
 800d524:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 800d526:	697b      	ldr	r3, [r7, #20]
 800d528:	681b      	ldr	r3, [r3, #0]
 800d52a:	617b      	str	r3, [r7, #20]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 800d52c:	697b      	ldr	r3, [r7, #20]
 800d52e:	2b00      	cmp	r3, #0
 800d530:	d106      	bne.n	800d540 <pbuf_realloc+0xb8>
 800d532:	4b25      	ldr	r3, [pc, #148]	; (800d5c8 <pbuf_realloc+0x140>)
 800d534:	f240 220f 	movw	r2, #527	; 0x20f
 800d538:	4928      	ldr	r1, [pc, #160]	; (800d5dc <pbuf_realloc+0x154>)
 800d53a:	4825      	ldr	r0, [pc, #148]	; (800d5d0 <pbuf_realloc+0x148>)
 800d53c:	f00a fbe6 	bl	8017d0c <iprintf>
  while (rem_len > q->len) {
 800d540:	697b      	ldr	r3, [r7, #20]
 800d542:	895b      	ldrh	r3, [r3, #10]
 800d544:	8a7a      	ldrh	r2, [r7, #18]
 800d546:	429a      	cmp	r2, r3
 800d548:	d8d4      	bhi.n	800d4f4 <pbuf_realloc+0x6c>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if ((q->type == PBUF_RAM) && (rem_len != q->len)
 800d54a:	697b      	ldr	r3, [r7, #20]
 800d54c:	7b1b      	ldrb	r3, [r3, #12]
 800d54e:	2b00      	cmp	r3, #0
 800d550:	d122      	bne.n	800d598 <pbuf_realloc+0x110>
 800d552:	697b      	ldr	r3, [r7, #20]
 800d554:	895b      	ldrh	r3, [r3, #10]
 800d556:	8a7a      	ldrh	r2, [r7, #18]
 800d558:	429a      	cmp	r2, r3
 800d55a:	d01d      	beq.n	800d598 <pbuf_realloc+0x110>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 800d55c:	697b      	ldr	r3, [r7, #20]
 800d55e:	7b5b      	ldrb	r3, [r3, #13]
 800d560:	f003 0302 	and.w	r3, r3, #2
 800d564:	2b00      	cmp	r3, #0
 800d566:	d117      	bne.n	800d598 <pbuf_realloc+0x110>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (u16_t)((u8_t *)q->payload - (u8_t *)q) + rem_len);
 800d568:	697b      	ldr	r3, [r7, #20]
 800d56a:	685b      	ldr	r3, [r3, #4]
 800d56c:	461a      	mov	r2, r3
 800d56e:	697b      	ldr	r3, [r7, #20]
 800d570:	1ad3      	subs	r3, r2, r3
 800d572:	b29a      	uxth	r2, r3
 800d574:	8a7b      	ldrh	r3, [r7, #18]
 800d576:	4413      	add	r3, r2
 800d578:	b29b      	uxth	r3, r3
 800d57a:	4619      	mov	r1, r3
 800d57c:	6978      	ldr	r0, [r7, #20]
 800d57e:	f7ff f8e9 	bl	800c754 <mem_trim>
 800d582:	6178      	str	r0, [r7, #20]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 800d584:	697b      	ldr	r3, [r7, #20]
 800d586:	2b00      	cmp	r3, #0
 800d588:	d106      	bne.n	800d598 <pbuf_realloc+0x110>
 800d58a:	4b0f      	ldr	r3, [pc, #60]	; (800d5c8 <pbuf_realloc+0x140>)
 800d58c:	f240 221d 	movw	r2, #541	; 0x21d
 800d590:	4913      	ldr	r1, [pc, #76]	; (800d5e0 <pbuf_realloc+0x158>)
 800d592:	480f      	ldr	r0, [pc, #60]	; (800d5d0 <pbuf_realloc+0x148>)
 800d594:	f00a fbba 	bl	8017d0c <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 800d598:	697b      	ldr	r3, [r7, #20]
 800d59a:	8a7a      	ldrh	r2, [r7, #18]
 800d59c:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 800d59e:	697b      	ldr	r3, [r7, #20]
 800d5a0:	895a      	ldrh	r2, [r3, #10]
 800d5a2:	697b      	ldr	r3, [r7, #20]
 800d5a4:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 800d5a6:	697b      	ldr	r3, [r7, #20]
 800d5a8:	681b      	ldr	r3, [r3, #0]
 800d5aa:	2b00      	cmp	r3, #0
 800d5ac:	d004      	beq.n	800d5b8 <pbuf_realloc+0x130>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 800d5ae:	697b      	ldr	r3, [r7, #20]
 800d5b0:	681b      	ldr	r3, [r3, #0]
 800d5b2:	4618      	mov	r0, r3
 800d5b4:	f000 f8dc 	bl	800d770 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 800d5b8:	697b      	ldr	r3, [r7, #20]
 800d5ba:	2200      	movs	r2, #0
 800d5bc:	601a      	str	r2, [r3, #0]
 800d5be:	e000      	b.n	800d5c2 <pbuf_realloc+0x13a>
    return;
 800d5c0:	bf00      	nop

}
 800d5c2:	3718      	adds	r7, #24
 800d5c4:	46bd      	mov	sp, r7
 800d5c6:	bd80      	pop	{r7, pc}
 800d5c8:	08018f0c 	.word	0x08018f0c
 800d5cc:	080190c8 	.word	0x080190c8
 800d5d0:	08018f58 	.word	0x08018f58
 800d5d4:	080190e0 	.word	0x080190e0
 800d5d8:	080190fc 	.word	0x080190fc
 800d5dc:	08019110 	.word	0x08019110
 800d5e0:	08019128 	.word	0x08019128

0800d5e4 <pbuf_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 800d5e4:	b580      	push	{r7, lr}
 800d5e6:	b084      	sub	sp, #16
 800d5e8:	af00      	add	r7, sp, #0
 800d5ea:	6078      	str	r0, [r7, #4]
 800d5ec:	460b      	mov	r3, r1
 800d5ee:	807b      	strh	r3, [r7, #2]
 800d5f0:	4613      	mov	r3, r2
 800d5f2:	707b      	strb	r3, [r7, #1]
  u16_t type;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800d5f4:	687b      	ldr	r3, [r7, #4]
 800d5f6:	2b00      	cmp	r3, #0
 800d5f8:	d106      	bne.n	800d608 <pbuf_header_impl+0x24>
 800d5fa:	4b46      	ldr	r3, [pc, #280]	; (800d714 <pbuf_header_impl+0x130>)
 800d5fc:	f240 223f 	movw	r2, #575	; 0x23f
 800d600:	4945      	ldr	r1, [pc, #276]	; (800d718 <pbuf_header_impl+0x134>)
 800d602:	4846      	ldr	r0, [pc, #280]	; (800d71c <pbuf_header_impl+0x138>)
 800d604:	f00a fb82 	bl	8017d0c <iprintf>
  if ((header_size_increment == 0) || (p == NULL)) {
 800d608:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800d60c:	2b00      	cmp	r3, #0
 800d60e:	d002      	beq.n	800d616 <pbuf_header_impl+0x32>
 800d610:	687b      	ldr	r3, [r7, #4]
 800d612:	2b00      	cmp	r3, #0
 800d614:	d101      	bne.n	800d61a <pbuf_header_impl+0x36>
    return 0;
 800d616:	2300      	movs	r3, #0
 800d618:	e078      	b.n	800d70c <pbuf_header_impl+0x128>
  }

  if (header_size_increment < 0) {
 800d61a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800d61e:	2b00      	cmp	r3, #0
 800d620:	da10      	bge.n	800d644 <pbuf_header_impl+0x60>
    increment_magnitude = (u16_t)-header_size_increment;
 800d622:	887b      	ldrh	r3, [r7, #2]
 800d624:	425b      	negs	r3, r3
 800d626:	81fb      	strh	r3, [r7, #14]
    /* Check that we aren't going to move off the end of the pbuf */
    LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 800d628:	687b      	ldr	r3, [r7, #4]
 800d62a:	895b      	ldrh	r3, [r3, #10]
 800d62c:	89fa      	ldrh	r2, [r7, #14]
 800d62e:	429a      	cmp	r2, r3
 800d630:	d90a      	bls.n	800d648 <pbuf_header_impl+0x64>
 800d632:	4b38      	ldr	r3, [pc, #224]	; (800d714 <pbuf_header_impl+0x130>)
 800d634:	f240 2247 	movw	r2, #583	; 0x247
 800d638:	4939      	ldr	r1, [pc, #228]	; (800d720 <pbuf_header_impl+0x13c>)
 800d63a:	4838      	ldr	r0, [pc, #224]	; (800d71c <pbuf_header_impl+0x138>)
 800d63c:	f00a fb66 	bl	8017d0c <iprintf>
 800d640:	2301      	movs	r3, #1
 800d642:	e063      	b.n	800d70c <pbuf_header_impl+0x128>
  } else {
    increment_magnitude = (u16_t)header_size_increment;
 800d644:	887b      	ldrh	r3, [r7, #2]
 800d646:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("p->payload - increment_magnitude >= p + SIZEOF_STRUCT_PBUF",
                (u8_t *)p->payload - increment_magnitude >= (u8_t *)p + SIZEOF_STRUCT_PBUF);
#endif
  }

  type = p->type;
 800d648:	687b      	ldr	r3, [r7, #4]
 800d64a:	7b1b      	ldrb	r3, [r3, #12]
 800d64c:	81bb      	strh	r3, [r7, #12]
  /* remember current payload pointer */
  payload = p->payload;
 800d64e:	687b      	ldr	r3, [r7, #4]
 800d650:	685b      	ldr	r3, [r3, #4]
 800d652:	60bb      	str	r3, [r7, #8]

  /* pbuf types containing payloads? */
  if (type == PBUF_RAM || type == PBUF_POOL) {
 800d654:	89bb      	ldrh	r3, [r7, #12]
 800d656:	2b00      	cmp	r3, #0
 800d658:	d002      	beq.n	800d660 <pbuf_header_impl+0x7c>
 800d65a:	89bb      	ldrh	r3, [r7, #12]
 800d65c:	2b03      	cmp	r3, #3
 800d65e:	d112      	bne.n	800d686 <pbuf_header_impl+0xa2>
    /* set new payload pointer */
    p->payload = (u8_t *)p->payload - header_size_increment;
 800d660:	687b      	ldr	r3, [r7, #4]
 800d662:	685a      	ldr	r2, [r3, #4]
 800d664:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800d668:	425b      	negs	r3, r3
 800d66a:	441a      	add	r2, r3
 800d66c:	687b      	ldr	r3, [r7, #4]
 800d66e:	605a      	str	r2, [r3, #4]
    /* boundary check fails? */
    if ((u8_t *)p->payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 800d670:	687b      	ldr	r3, [r7, #4]
 800d672:	685a      	ldr	r2, [r3, #4]
 800d674:	687b      	ldr	r3, [r7, #4]
 800d676:	3310      	adds	r3, #16
 800d678:	429a      	cmp	r2, r3
 800d67a:	d238      	bcs.n	800d6ee <pbuf_header_impl+0x10a>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
        ("pbuf_header: failed as %p < %p (not enough space for new header size)\n",
        (void *)p->payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* restore old payload pointer */
      p->payload = payload;
 800d67c:	687b      	ldr	r3, [r7, #4]
 800d67e:	68ba      	ldr	r2, [r7, #8]
 800d680:	605a      	str	r2, [r3, #4]
      /* bail out unsuccessfully */
      return 1;
 800d682:	2301      	movs	r3, #1
 800d684:	e042      	b.n	800d70c <pbuf_header_impl+0x128>
    }
  /* pbuf types referring to external payloads? */
  } else if (type == PBUF_REF || type == PBUF_ROM) {
 800d686:	89bb      	ldrh	r3, [r7, #12]
 800d688:	2b02      	cmp	r3, #2
 800d68a:	d002      	beq.n	800d692 <pbuf_header_impl+0xae>
 800d68c:	89bb      	ldrh	r3, [r7, #12]
 800d68e:	2b01      	cmp	r3, #1
 800d690:	d124      	bne.n	800d6dc <pbuf_header_impl+0xf8>
    /* hide a header in the payload? */
    if ((header_size_increment < 0) && (increment_magnitude <= p->len)) {
 800d692:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800d696:	2b00      	cmp	r3, #0
 800d698:	da0d      	bge.n	800d6b6 <pbuf_header_impl+0xd2>
 800d69a:	687b      	ldr	r3, [r7, #4]
 800d69c:	895b      	ldrh	r3, [r3, #10]
 800d69e:	89fa      	ldrh	r2, [r7, #14]
 800d6a0:	429a      	cmp	r2, r3
 800d6a2:	d808      	bhi.n	800d6b6 <pbuf_header_impl+0xd2>
      /* increase payload pointer */
      p->payload = (u8_t *)p->payload - header_size_increment;
 800d6a4:	687b      	ldr	r3, [r7, #4]
 800d6a6:	685a      	ldr	r2, [r3, #4]
 800d6a8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800d6ac:	425b      	negs	r3, r3
 800d6ae:	441a      	add	r2, r3
 800d6b0:	687b      	ldr	r3, [r7, #4]
 800d6b2:	605a      	str	r2, [r3, #4]
 800d6b4:	e011      	b.n	800d6da <pbuf_header_impl+0xf6>
    } else if ((header_size_increment > 0) && force) {
 800d6b6:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800d6ba:	2b00      	cmp	r3, #0
 800d6bc:	dd0b      	ble.n	800d6d6 <pbuf_header_impl+0xf2>
 800d6be:	787b      	ldrb	r3, [r7, #1]
 800d6c0:	2b00      	cmp	r3, #0
 800d6c2:	d008      	beq.n	800d6d6 <pbuf_header_impl+0xf2>
      p->payload = (u8_t *)p->payload - header_size_increment;
 800d6c4:	687b      	ldr	r3, [r7, #4]
 800d6c6:	685a      	ldr	r2, [r3, #4]
 800d6c8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800d6cc:	425b      	negs	r3, r3
 800d6ce:	441a      	add	r2, r3
 800d6d0:	687b      	ldr	r3, [r7, #4]
 800d6d2:	605a      	str	r2, [r3, #4]
 800d6d4:	e001      	b.n	800d6da <pbuf_header_impl+0xf6>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 800d6d6:	2301      	movs	r3, #1
 800d6d8:	e018      	b.n	800d70c <pbuf_header_impl+0x128>
    if ((header_size_increment < 0) && (increment_magnitude <= p->len)) {
 800d6da:	e008      	b.n	800d6ee <pbuf_header_impl+0x10a>
    }
  } else {
    /* Unknown type */
    LWIP_ASSERT("bad pbuf type", 0);
 800d6dc:	4b0d      	ldr	r3, [pc, #52]	; (800d714 <pbuf_header_impl+0x130>)
 800d6de:	f240 2277 	movw	r2, #631	; 0x277
 800d6e2:	4910      	ldr	r1, [pc, #64]	; (800d724 <pbuf_header_impl+0x140>)
 800d6e4:	480d      	ldr	r0, [pc, #52]	; (800d71c <pbuf_header_impl+0x138>)
 800d6e6:	f00a fb11 	bl	8017d0c <iprintf>
    return 1;
 800d6ea:	2301      	movs	r3, #1
 800d6ec:	e00e      	b.n	800d70c <pbuf_header_impl+0x128>
  }
  /* modify pbuf length fields */
  p->len += header_size_increment;
 800d6ee:	687b      	ldr	r3, [r7, #4]
 800d6f0:	895a      	ldrh	r2, [r3, #10]
 800d6f2:	887b      	ldrh	r3, [r7, #2]
 800d6f4:	4413      	add	r3, r2
 800d6f6:	b29a      	uxth	r2, r3
 800d6f8:	687b      	ldr	r3, [r7, #4]
 800d6fa:	815a      	strh	r2, [r3, #10]
  p->tot_len += header_size_increment;
 800d6fc:	687b      	ldr	r3, [r7, #4]
 800d6fe:	891a      	ldrh	r2, [r3, #8]
 800d700:	887b      	ldrh	r3, [r7, #2]
 800d702:	4413      	add	r3, r2
 800d704:	b29a      	uxth	r2, r3
 800d706:	687b      	ldr	r3, [r7, #4]
 800d708:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_header: old %p new %p (%"S16_F")\n",
    (void *)payload, (void *)p->payload, header_size_increment));

  return 0;
 800d70a:	2300      	movs	r3, #0
}
 800d70c:	4618      	mov	r0, r3
 800d70e:	3710      	adds	r7, #16
 800d710:	46bd      	mov	sp, r7
 800d712:	bd80      	pop	{r7, pc}
 800d714:	08018f0c 	.word	0x08018f0c
 800d718:	08019144 	.word	0x08019144
 800d71c:	08018f58 	.word	0x08018f58
 800d720:	08019150 	.word	0x08019150
 800d724:	08019170 	.word	0x08019170

0800d728 <pbuf_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_header(struct pbuf *p, s16_t header_size_increment)
{
 800d728:	b580      	push	{r7, lr}
 800d72a:	b082      	sub	sp, #8
 800d72c:	af00      	add	r7, sp, #0
 800d72e:	6078      	str	r0, [r7, #4]
 800d730:	460b      	mov	r3, r1
 800d732:	807b      	strh	r3, [r7, #2]
   return pbuf_header_impl(p, header_size_increment, 0);
 800d734:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800d738:	2200      	movs	r2, #0
 800d73a:	4619      	mov	r1, r3
 800d73c:	6878      	ldr	r0, [r7, #4]
 800d73e:	f7ff ff51 	bl	800d5e4 <pbuf_header_impl>
 800d742:	4603      	mov	r3, r0
}
 800d744:	4618      	mov	r0, r3
 800d746:	3708      	adds	r7, #8
 800d748:	46bd      	mov	sp, r7
 800d74a:	bd80      	pop	{r7, pc}

0800d74c <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 800d74c:	b580      	push	{r7, lr}
 800d74e:	b082      	sub	sp, #8
 800d750:	af00      	add	r7, sp, #0
 800d752:	6078      	str	r0, [r7, #4]
 800d754:	460b      	mov	r3, r1
 800d756:	807b      	strh	r3, [r7, #2]
   return pbuf_header_impl(p, header_size_increment, 1);
 800d758:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800d75c:	2201      	movs	r2, #1
 800d75e:	4619      	mov	r1, r3
 800d760:	6878      	ldr	r0, [r7, #4]
 800d762:	f7ff ff3f 	bl	800d5e4 <pbuf_header_impl>
 800d766:	4603      	mov	r3, r0
}
 800d768:	4618      	mov	r0, r3
 800d76a:	3708      	adds	r7, #8
 800d76c:	46bd      	mov	sp, r7
 800d76e:	bd80      	pop	{r7, pc}

0800d770 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 800d770:	b580      	push	{r7, lr}
 800d772:	b088      	sub	sp, #32
 800d774:	af00      	add	r7, sp, #0
 800d776:	6078      	str	r0, [r7, #4]
  u16_t type;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 800d778:	687b      	ldr	r3, [r7, #4]
 800d77a:	2b00      	cmp	r3, #0
 800d77c:	d10b      	bne.n	800d796 <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 800d77e:	687b      	ldr	r3, [r7, #4]
 800d780:	2b00      	cmp	r3, #0
 800d782:	d106      	bne.n	800d792 <pbuf_free+0x22>
 800d784:	4b41      	ldr	r3, [pc, #260]	; (800d88c <pbuf_free+0x11c>)
 800d786:	f240 22d2 	movw	r2, #722	; 0x2d2
 800d78a:	4941      	ldr	r1, [pc, #260]	; (800d890 <pbuf_free+0x120>)
 800d78c:	4841      	ldr	r0, [pc, #260]	; (800d894 <pbuf_free+0x124>)
 800d78e:	f00a fabd 	bl	8017d0c <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
      ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 800d792:	2300      	movs	r3, #0
 800d794:	e076      	b.n	800d884 <pbuf_free+0x114>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  LWIP_ASSERT("pbuf_free: sane type",
 800d796:	687b      	ldr	r3, [r7, #4]
 800d798:	7b1b      	ldrb	r3, [r3, #12]
 800d79a:	2b00      	cmp	r3, #0
 800d79c:	d012      	beq.n	800d7c4 <pbuf_free+0x54>
 800d79e:	687b      	ldr	r3, [r7, #4]
 800d7a0:	7b1b      	ldrb	r3, [r3, #12]
 800d7a2:	2b01      	cmp	r3, #1
 800d7a4:	d00e      	beq.n	800d7c4 <pbuf_free+0x54>
 800d7a6:	687b      	ldr	r3, [r7, #4]
 800d7a8:	7b1b      	ldrb	r3, [r3, #12]
 800d7aa:	2b02      	cmp	r3, #2
 800d7ac:	d00a      	beq.n	800d7c4 <pbuf_free+0x54>
 800d7ae:	687b      	ldr	r3, [r7, #4]
 800d7b0:	7b1b      	ldrb	r3, [r3, #12]
 800d7b2:	2b03      	cmp	r3, #3
 800d7b4:	d006      	beq.n	800d7c4 <pbuf_free+0x54>
 800d7b6:	4b35      	ldr	r3, [pc, #212]	; (800d88c <pbuf_free+0x11c>)
 800d7b8:	f240 22de 	movw	r2, #734	; 0x2de
 800d7bc:	4936      	ldr	r1, [pc, #216]	; (800d898 <pbuf_free+0x128>)
 800d7be:	4835      	ldr	r0, [pc, #212]	; (800d894 <pbuf_free+0x124>)
 800d7c0:	f00a faa4 	bl	8017d0c <iprintf>
    p->type == PBUF_RAM || p->type == PBUF_ROM ||
    p->type == PBUF_REF || p->type == PBUF_POOL);

  count = 0;
 800d7c4:	2300      	movs	r3, #0
 800d7c6:	77fb      	strb	r3, [r7, #31]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 800d7c8:	e058      	b.n	800d87c <pbuf_free+0x10c>
    u16_t ref;
    SYS_ARCH_DECL_PROTECT(old_level);
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
 800d7ca:	f009 fca9 	bl	8017120 <sys_arch_protect>
 800d7ce:	61b8      	str	r0, [r7, #24]
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 800d7d0:	687b      	ldr	r3, [r7, #4]
 800d7d2:	89db      	ldrh	r3, [r3, #14]
 800d7d4:	2b00      	cmp	r3, #0
 800d7d6:	d106      	bne.n	800d7e6 <pbuf_free+0x76>
 800d7d8:	4b2c      	ldr	r3, [pc, #176]	; (800d88c <pbuf_free+0x11c>)
 800d7da:	f240 22eb 	movw	r2, #747	; 0x2eb
 800d7de:	492f      	ldr	r1, [pc, #188]	; (800d89c <pbuf_free+0x12c>)
 800d7e0:	482c      	ldr	r0, [pc, #176]	; (800d894 <pbuf_free+0x124>)
 800d7e2:	f00a fa93 	bl	8017d0c <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 800d7e6:	687b      	ldr	r3, [r7, #4]
 800d7e8:	89db      	ldrh	r3, [r3, #14]
 800d7ea:	3b01      	subs	r3, #1
 800d7ec:	b29a      	uxth	r2, r3
 800d7ee:	687b      	ldr	r3, [r7, #4]
 800d7f0:	81da      	strh	r2, [r3, #14]
 800d7f2:	687b      	ldr	r3, [r7, #4]
 800d7f4:	89db      	ldrh	r3, [r3, #14]
 800d7f6:	82fb      	strh	r3, [r7, #22]
    SYS_ARCH_UNPROTECT(old_level);
 800d7f8:	69b8      	ldr	r0, [r7, #24]
 800d7fa:	f009 fc9f 	bl	801713c <sys_arch_unprotect>
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 800d7fe:	8afb      	ldrh	r3, [r7, #22]
 800d800:	2b00      	cmp	r3, #0
 800d802:	d139      	bne.n	800d878 <pbuf_free+0x108>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 800d804:	687b      	ldr	r3, [r7, #4]
 800d806:	681b      	ldr	r3, [r3, #0]
 800d808:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      type = p->type;
 800d80a:	687b      	ldr	r3, [r7, #4]
 800d80c:	7b1b      	ldrb	r3, [r3, #12]
 800d80e:	81fb      	strh	r3, [r7, #14]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 800d810:	687b      	ldr	r3, [r7, #4]
 800d812:	7b5b      	ldrb	r3, [r3, #13]
 800d814:	f003 0302 	and.w	r3, r3, #2
 800d818:	2b00      	cmp	r3, #0
 800d81a:	d011      	beq.n	800d840 <pbuf_free+0xd0>
        struct pbuf_custom *pc = (struct pbuf_custom*)p;
 800d81c:	687b      	ldr	r3, [r7, #4]
 800d81e:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 800d820:	68bb      	ldr	r3, [r7, #8]
 800d822:	691b      	ldr	r3, [r3, #16]
 800d824:	2b00      	cmp	r3, #0
 800d826:	d106      	bne.n	800d836 <pbuf_free+0xc6>
 800d828:	4b18      	ldr	r3, [pc, #96]	; (800d88c <pbuf_free+0x11c>)
 800d82a:	f240 22f9 	movw	r2, #761	; 0x2f9
 800d82e:	491c      	ldr	r1, [pc, #112]	; (800d8a0 <pbuf_free+0x130>)
 800d830:	4818      	ldr	r0, [pc, #96]	; (800d894 <pbuf_free+0x124>)
 800d832:	f00a fa6b 	bl	8017d0c <iprintf>
        pc->custom_free_function(p);
 800d836:	68bb      	ldr	r3, [r7, #8]
 800d838:	691b      	ldr	r3, [r3, #16]
 800d83a:	6878      	ldr	r0, [r7, #4]
 800d83c:	4798      	blx	r3
 800d83e:	e015      	b.n	800d86c <pbuf_free+0xfc>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (type == PBUF_POOL) {
 800d840:	89fb      	ldrh	r3, [r7, #14]
 800d842:	2b03      	cmp	r3, #3
 800d844:	d104      	bne.n	800d850 <pbuf_free+0xe0>
          memp_free(MEMP_PBUF_POOL, p);
 800d846:	6879      	ldr	r1, [r7, #4]
 800d848:	200c      	movs	r0, #12
 800d84a:	f7ff fa2f 	bl	800ccac <memp_free>
 800d84e:	e00d      	b.n	800d86c <pbuf_free+0xfc>
        /* is this a ROM or RAM referencing pbuf? */
        } else if (type == PBUF_ROM || type == PBUF_REF) {
 800d850:	89fb      	ldrh	r3, [r7, #14]
 800d852:	2b01      	cmp	r3, #1
 800d854:	d002      	beq.n	800d85c <pbuf_free+0xec>
 800d856:	89fb      	ldrh	r3, [r7, #14]
 800d858:	2b02      	cmp	r3, #2
 800d85a:	d104      	bne.n	800d866 <pbuf_free+0xf6>
          memp_free(MEMP_PBUF, p);
 800d85c:	6879      	ldr	r1, [r7, #4]
 800d85e:	200b      	movs	r0, #11
 800d860:	f7ff fa24 	bl	800ccac <memp_free>
 800d864:	e002      	b.n	800d86c <pbuf_free+0xfc>
        /* type == PBUF_RAM */
        } else {
          mem_free(p);
 800d866:	6878      	ldr	r0, [r7, #4]
 800d868:	f7fe ff06 	bl	800c678 <mem_free>
        }
      }
      count++;
 800d86c:	7ffb      	ldrb	r3, [r7, #31]
 800d86e:	3301      	adds	r3, #1
 800d870:	77fb      	strb	r3, [r7, #31]
      /* proceed to next pbuf */
      p = q;
 800d872:	693b      	ldr	r3, [r7, #16]
 800d874:	607b      	str	r3, [r7, #4]
 800d876:	e001      	b.n	800d87c <pbuf_free+0x10c>
    /* p->ref > 0, this pbuf is still referenced to */
    /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, ref));
      /* stop walking through the chain */
      p = NULL;
 800d878:	2300      	movs	r3, #0
 800d87a:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800d87c:	687b      	ldr	r3, [r7, #4]
 800d87e:	2b00      	cmp	r3, #0
 800d880:	d1a3      	bne.n	800d7ca <pbuf_free+0x5a>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 800d882:	7ffb      	ldrb	r3, [r7, #31]
}
 800d884:	4618      	mov	r0, r3
 800d886:	3720      	adds	r7, #32
 800d888:	46bd      	mov	sp, r7
 800d88a:	bd80      	pop	{r7, pc}
 800d88c:	08018f0c 	.word	0x08018f0c
 800d890:	08019144 	.word	0x08019144
 800d894:	08018f58 	.word	0x08018f58
 800d898:	08019180 	.word	0x08019180
 800d89c:	08019198 	.word	0x08019198
 800d8a0:	080191b0 	.word	0x080191b0

0800d8a4 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 800d8a4:	b480      	push	{r7}
 800d8a6:	b085      	sub	sp, #20
 800d8a8:	af00      	add	r7, sp, #0
 800d8aa:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 800d8ac:	2300      	movs	r3, #0
 800d8ae:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 800d8b0:	e005      	b.n	800d8be <pbuf_clen+0x1a>
    ++len;
 800d8b2:	89fb      	ldrh	r3, [r7, #14]
 800d8b4:	3301      	adds	r3, #1
 800d8b6:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 800d8b8:	687b      	ldr	r3, [r7, #4]
 800d8ba:	681b      	ldr	r3, [r3, #0]
 800d8bc:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800d8be:	687b      	ldr	r3, [r7, #4]
 800d8c0:	2b00      	cmp	r3, #0
 800d8c2:	d1f6      	bne.n	800d8b2 <pbuf_clen+0xe>
  }
  return len;
 800d8c4:	89fb      	ldrh	r3, [r7, #14]
}
 800d8c6:	4618      	mov	r0, r3
 800d8c8:	3714      	adds	r7, #20
 800d8ca:	46bd      	mov	sp, r7
 800d8cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8d0:	4770      	bx	lr
	...

0800d8d4 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 800d8d4:	b580      	push	{r7, lr}
 800d8d6:	b084      	sub	sp, #16
 800d8d8:	af00      	add	r7, sp, #0
 800d8da:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 800d8dc:	687b      	ldr	r3, [r7, #4]
 800d8de:	2b00      	cmp	r3, #0
 800d8e0:	d016      	beq.n	800d910 <pbuf_ref+0x3c>
    SYS_ARCH_INC(p->ref, 1);
 800d8e2:	f009 fc1d 	bl	8017120 <sys_arch_protect>
 800d8e6:	60f8      	str	r0, [r7, #12]
 800d8e8:	687b      	ldr	r3, [r7, #4]
 800d8ea:	89db      	ldrh	r3, [r3, #14]
 800d8ec:	3301      	adds	r3, #1
 800d8ee:	b29a      	uxth	r2, r3
 800d8f0:	687b      	ldr	r3, [r7, #4]
 800d8f2:	81da      	strh	r2, [r3, #14]
 800d8f4:	68f8      	ldr	r0, [r7, #12]
 800d8f6:	f009 fc21 	bl	801713c <sys_arch_unprotect>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 800d8fa:	687b      	ldr	r3, [r7, #4]
 800d8fc:	89db      	ldrh	r3, [r3, #14]
 800d8fe:	2b00      	cmp	r3, #0
 800d900:	d106      	bne.n	800d910 <pbuf_ref+0x3c>
 800d902:	4b05      	ldr	r3, [pc, #20]	; (800d918 <pbuf_ref+0x44>)
 800d904:	f240 3239 	movw	r2, #825	; 0x339
 800d908:	4904      	ldr	r1, [pc, #16]	; (800d91c <pbuf_ref+0x48>)
 800d90a:	4805      	ldr	r0, [pc, #20]	; (800d920 <pbuf_ref+0x4c>)
 800d90c:	f00a f9fe 	bl	8017d0c <iprintf>
  }
}
 800d910:	bf00      	nop
 800d912:	3710      	adds	r7, #16
 800d914:	46bd      	mov	sp, r7
 800d916:	bd80      	pop	{r7, pc}
 800d918:	08018f0c 	.word	0x08018f0c
 800d91c:	080191d4 	.word	0x080191d4
 800d920:	08018f58 	.word	0x08018f58

0800d924 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 800d924:	b580      	push	{r7, lr}
 800d926:	b084      	sub	sp, #16
 800d928:	af00      	add	r7, sp, #0
 800d92a:	6078      	str	r0, [r7, #4]
 800d92c:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 800d92e:	687b      	ldr	r3, [r7, #4]
 800d930:	2b00      	cmp	r3, #0
 800d932:	d002      	beq.n	800d93a <pbuf_cat+0x16>
 800d934:	683b      	ldr	r3, [r7, #0]
 800d936:	2b00      	cmp	r3, #0
 800d938:	d107      	bne.n	800d94a <pbuf_cat+0x26>
 800d93a:	4b20      	ldr	r3, [pc, #128]	; (800d9bc <pbuf_cat+0x98>)
 800d93c:	f240 324d 	movw	r2, #845	; 0x34d
 800d940:	491f      	ldr	r1, [pc, #124]	; (800d9c0 <pbuf_cat+0x9c>)
 800d942:	4820      	ldr	r0, [pc, #128]	; (800d9c4 <pbuf_cat+0xa0>)
 800d944:	f00a f9e2 	bl	8017d0c <iprintf>
 800d948:	e034      	b.n	800d9b4 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 800d94a:	687b      	ldr	r3, [r7, #4]
 800d94c:	60fb      	str	r3, [r7, #12]
 800d94e:	e00a      	b.n	800d966 <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len += t->tot_len;
 800d950:	68fb      	ldr	r3, [r7, #12]
 800d952:	891a      	ldrh	r2, [r3, #8]
 800d954:	683b      	ldr	r3, [r7, #0]
 800d956:	891b      	ldrh	r3, [r3, #8]
 800d958:	4413      	add	r3, r2
 800d95a:	b29a      	uxth	r2, r3
 800d95c:	68fb      	ldr	r3, [r7, #12]
 800d95e:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 800d960:	68fb      	ldr	r3, [r7, #12]
 800d962:	681b      	ldr	r3, [r3, #0]
 800d964:	60fb      	str	r3, [r7, #12]
 800d966:	68fb      	ldr	r3, [r7, #12]
 800d968:	681b      	ldr	r3, [r3, #0]
 800d96a:	2b00      	cmp	r3, #0
 800d96c:	d1f0      	bne.n	800d950 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 800d96e:	68fb      	ldr	r3, [r7, #12]
 800d970:	891a      	ldrh	r2, [r3, #8]
 800d972:	68fb      	ldr	r3, [r7, #12]
 800d974:	895b      	ldrh	r3, [r3, #10]
 800d976:	429a      	cmp	r2, r3
 800d978:	d006      	beq.n	800d988 <pbuf_cat+0x64>
 800d97a:	4b10      	ldr	r3, [pc, #64]	; (800d9bc <pbuf_cat+0x98>)
 800d97c:	f240 3255 	movw	r2, #853	; 0x355
 800d980:	4911      	ldr	r1, [pc, #68]	; (800d9c8 <pbuf_cat+0xa4>)
 800d982:	4810      	ldr	r0, [pc, #64]	; (800d9c4 <pbuf_cat+0xa0>)
 800d984:	f00a f9c2 	bl	8017d0c <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 800d988:	68fb      	ldr	r3, [r7, #12]
 800d98a:	681b      	ldr	r3, [r3, #0]
 800d98c:	2b00      	cmp	r3, #0
 800d98e:	d006      	beq.n	800d99e <pbuf_cat+0x7a>
 800d990:	4b0a      	ldr	r3, [pc, #40]	; (800d9bc <pbuf_cat+0x98>)
 800d992:	f240 3256 	movw	r2, #854	; 0x356
 800d996:	490d      	ldr	r1, [pc, #52]	; (800d9cc <pbuf_cat+0xa8>)
 800d998:	480a      	ldr	r0, [pc, #40]	; (800d9c4 <pbuf_cat+0xa0>)
 800d99a:	f00a f9b7 	bl	8017d0c <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len += t->tot_len;
 800d99e:	68fb      	ldr	r3, [r7, #12]
 800d9a0:	891a      	ldrh	r2, [r3, #8]
 800d9a2:	683b      	ldr	r3, [r7, #0]
 800d9a4:	891b      	ldrh	r3, [r3, #8]
 800d9a6:	4413      	add	r3, r2
 800d9a8:	b29a      	uxth	r2, r3
 800d9aa:	68fb      	ldr	r3, [r7, #12]
 800d9ac:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 800d9ae:	68fb      	ldr	r3, [r7, #12]
 800d9b0:	683a      	ldr	r2, [r7, #0]
 800d9b2:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 800d9b4:	3710      	adds	r7, #16
 800d9b6:	46bd      	mov	sp, r7
 800d9b8:	bd80      	pop	{r7, pc}
 800d9ba:	bf00      	nop
 800d9bc:	08018f0c 	.word	0x08018f0c
 800d9c0:	080191e8 	.word	0x080191e8
 800d9c4:	08018f58 	.word	0x08018f58
 800d9c8:	08019220 	.word	0x08019220
 800d9cc:	08019250 	.word	0x08019250

0800d9d0 <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 800d9d0:	b580      	push	{r7, lr}
 800d9d2:	b082      	sub	sp, #8
 800d9d4:	af00      	add	r7, sp, #0
 800d9d6:	6078      	str	r0, [r7, #4]
 800d9d8:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
 800d9da:	6839      	ldr	r1, [r7, #0]
 800d9dc:	6878      	ldr	r0, [r7, #4]
 800d9de:	f7ff ffa1 	bl	800d924 <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 800d9e2:	6838      	ldr	r0, [r7, #0]
 800d9e4:	f7ff ff76 	bl	800d8d4 <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 800d9e8:	bf00      	nop
 800d9ea:	3708      	adds	r7, #8
 800d9ec:	46bd      	mov	sp, r7
 800d9ee:	bd80      	pop	{r7, pc}

0800d9f0 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 800d9f0:	b580      	push	{r7, lr}
 800d9f2:	b084      	sub	sp, #16
 800d9f4:	af00      	add	r7, sp, #0
 800d9f6:	6078      	str	r0, [r7, #4]
 800d9f8:	6039      	str	r1, [r7, #0]
  u16_t offset_to=0, offset_from=0, len;
 800d9fa:	2300      	movs	r3, #0
 800d9fc:	81fb      	strh	r3, [r7, #14]
 800d9fe:	2300      	movs	r3, #0
 800da00:	81bb      	strh	r3, [r7, #12]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
    (const void*)p_to, (const void*)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 800da02:	687b      	ldr	r3, [r7, #4]
 800da04:	2b00      	cmp	r3, #0
 800da06:	d008      	beq.n	800da1a <pbuf_copy+0x2a>
 800da08:	683b      	ldr	r3, [r7, #0]
 800da0a:	2b00      	cmp	r3, #0
 800da0c:	d005      	beq.n	800da1a <pbuf_copy+0x2a>
 800da0e:	687b      	ldr	r3, [r7, #4]
 800da10:	891a      	ldrh	r2, [r3, #8]
 800da12:	683b      	ldr	r3, [r7, #0]
 800da14:	891b      	ldrh	r3, [r3, #8]
 800da16:	429a      	cmp	r2, r3
 800da18:	d209      	bcs.n	800da2e <pbuf_copy+0x3e>
 800da1a:	4b54      	ldr	r3, [pc, #336]	; (800db6c <pbuf_copy+0x17c>)
 800da1c:	f240 32bd 	movw	r2, #957	; 0x3bd
 800da20:	4953      	ldr	r1, [pc, #332]	; (800db70 <pbuf_copy+0x180>)
 800da22:	4854      	ldr	r0, [pc, #336]	; (800db74 <pbuf_copy+0x184>)
 800da24:	f00a f972 	bl	8017d0c <iprintf>
 800da28:	f06f 030f 	mvn.w	r3, #15
 800da2c:	e099      	b.n	800db62 <pbuf_copy+0x172>

  /* iterate through pbuf chain */
  do
  {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 800da2e:	687b      	ldr	r3, [r7, #4]
 800da30:	895b      	ldrh	r3, [r3, #10]
 800da32:	461a      	mov	r2, r3
 800da34:	89fb      	ldrh	r3, [r7, #14]
 800da36:	1ad2      	subs	r2, r2, r3
 800da38:	683b      	ldr	r3, [r7, #0]
 800da3a:	895b      	ldrh	r3, [r3, #10]
 800da3c:	4619      	mov	r1, r3
 800da3e:	89bb      	ldrh	r3, [r7, #12]
 800da40:	1acb      	subs	r3, r1, r3
 800da42:	429a      	cmp	r2, r3
 800da44:	db05      	blt.n	800da52 <pbuf_copy+0x62>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 800da46:	683b      	ldr	r3, [r7, #0]
 800da48:	895a      	ldrh	r2, [r3, #10]
 800da4a:	89bb      	ldrh	r3, [r7, #12]
 800da4c:	1ad3      	subs	r3, r2, r3
 800da4e:	817b      	strh	r3, [r7, #10]
 800da50:	e004      	b.n	800da5c <pbuf_copy+0x6c>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 800da52:	687b      	ldr	r3, [r7, #4]
 800da54:	895a      	ldrh	r2, [r3, #10]
 800da56:	89fb      	ldrh	r3, [r7, #14]
 800da58:	1ad3      	subs	r3, r2, r3
 800da5a:	817b      	strh	r3, [r7, #10]
    }
    MEMCPY((u8_t*)p_to->payload + offset_to, (u8_t*)p_from->payload + offset_from, len);
 800da5c:	687b      	ldr	r3, [r7, #4]
 800da5e:	685a      	ldr	r2, [r3, #4]
 800da60:	89fb      	ldrh	r3, [r7, #14]
 800da62:	18d0      	adds	r0, r2, r3
 800da64:	683b      	ldr	r3, [r7, #0]
 800da66:	685a      	ldr	r2, [r3, #4]
 800da68:	89bb      	ldrh	r3, [r7, #12]
 800da6a:	4413      	add	r3, r2
 800da6c:	897a      	ldrh	r2, [r7, #10]
 800da6e:	4619      	mov	r1, r3
 800da70:	f00a f891 	bl	8017b96 <memcpy>
    offset_to += len;
 800da74:	89fa      	ldrh	r2, [r7, #14]
 800da76:	897b      	ldrh	r3, [r7, #10]
 800da78:	4413      	add	r3, r2
 800da7a:	81fb      	strh	r3, [r7, #14]
    offset_from += len;
 800da7c:	89ba      	ldrh	r2, [r7, #12]
 800da7e:	897b      	ldrh	r3, [r7, #10]
 800da80:	4413      	add	r3, r2
 800da82:	81bb      	strh	r3, [r7, #12]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 800da84:	687b      	ldr	r3, [r7, #4]
 800da86:	895b      	ldrh	r3, [r3, #10]
 800da88:	89fa      	ldrh	r2, [r7, #14]
 800da8a:	429a      	cmp	r2, r3
 800da8c:	d906      	bls.n	800da9c <pbuf_copy+0xac>
 800da8e:	4b37      	ldr	r3, [pc, #220]	; (800db6c <pbuf_copy+0x17c>)
 800da90:	f240 32cd 	movw	r2, #973	; 0x3cd
 800da94:	4938      	ldr	r1, [pc, #224]	; (800db78 <pbuf_copy+0x188>)
 800da96:	4837      	ldr	r0, [pc, #220]	; (800db74 <pbuf_copy+0x184>)
 800da98:	f00a f938 	bl	8017d0c <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 800da9c:	683b      	ldr	r3, [r7, #0]
 800da9e:	895b      	ldrh	r3, [r3, #10]
 800daa0:	89ba      	ldrh	r2, [r7, #12]
 800daa2:	429a      	cmp	r2, r3
 800daa4:	d906      	bls.n	800dab4 <pbuf_copy+0xc4>
 800daa6:	4b31      	ldr	r3, [pc, #196]	; (800db6c <pbuf_copy+0x17c>)
 800daa8:	f240 32ce 	movw	r2, #974	; 0x3ce
 800daac:	4933      	ldr	r1, [pc, #204]	; (800db7c <pbuf_copy+0x18c>)
 800daae:	4831      	ldr	r0, [pc, #196]	; (800db74 <pbuf_copy+0x184>)
 800dab0:	f00a f92c 	bl	8017d0c <iprintf>
    if (offset_from >= p_from->len) {
 800dab4:	683b      	ldr	r3, [r7, #0]
 800dab6:	895b      	ldrh	r3, [r3, #10]
 800dab8:	89ba      	ldrh	r2, [r7, #12]
 800daba:	429a      	cmp	r2, r3
 800dabc:	d304      	bcc.n	800dac8 <pbuf_copy+0xd8>
      /* on to next p_from (if any) */
      offset_from = 0;
 800dabe:	2300      	movs	r3, #0
 800dac0:	81bb      	strh	r3, [r7, #12]
      p_from = p_from->next;
 800dac2:	683b      	ldr	r3, [r7, #0]
 800dac4:	681b      	ldr	r3, [r3, #0]
 800dac6:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 800dac8:	687b      	ldr	r3, [r7, #4]
 800daca:	895b      	ldrh	r3, [r3, #10]
 800dacc:	89fa      	ldrh	r2, [r7, #14]
 800dace:	429a      	cmp	r2, r3
 800dad0:	d114      	bne.n	800dafc <pbuf_copy+0x10c>
      /* on to next p_to (if any) */
      offset_to = 0;
 800dad2:	2300      	movs	r3, #0
 800dad4:	81fb      	strh	r3, [r7, #14]
      p_to = p_to->next;
 800dad6:	687b      	ldr	r3, [r7, #4]
 800dad8:	681b      	ldr	r3, [r3, #0]
 800dada:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL) , return ERR_ARG;);
 800dadc:	687b      	ldr	r3, [r7, #4]
 800dade:	2b00      	cmp	r3, #0
 800dae0:	d10c      	bne.n	800dafc <pbuf_copy+0x10c>
 800dae2:	683b      	ldr	r3, [r7, #0]
 800dae4:	2b00      	cmp	r3, #0
 800dae6:	d009      	beq.n	800dafc <pbuf_copy+0x10c>
 800dae8:	4b20      	ldr	r3, [pc, #128]	; (800db6c <pbuf_copy+0x17c>)
 800daea:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 800daee:	4924      	ldr	r1, [pc, #144]	; (800db80 <pbuf_copy+0x190>)
 800daf0:	4820      	ldr	r0, [pc, #128]	; (800db74 <pbuf_copy+0x184>)
 800daf2:	f00a f90b 	bl	8017d0c <iprintf>
 800daf6:	f06f 030f 	mvn.w	r3, #15
 800dafa:	e032      	b.n	800db62 <pbuf_copy+0x172>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 800dafc:	683b      	ldr	r3, [r7, #0]
 800dafe:	2b00      	cmp	r3, #0
 800db00:	d013      	beq.n	800db2a <pbuf_copy+0x13a>
 800db02:	683b      	ldr	r3, [r7, #0]
 800db04:	895a      	ldrh	r2, [r3, #10]
 800db06:	683b      	ldr	r3, [r7, #0]
 800db08:	891b      	ldrh	r3, [r3, #8]
 800db0a:	429a      	cmp	r2, r3
 800db0c:	d10d      	bne.n	800db2a <pbuf_copy+0x13a>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800db0e:	683b      	ldr	r3, [r7, #0]
 800db10:	681b      	ldr	r3, [r3, #0]
 800db12:	2b00      	cmp	r3, #0
 800db14:	d009      	beq.n	800db2a <pbuf_copy+0x13a>
 800db16:	4b15      	ldr	r3, [pc, #84]	; (800db6c <pbuf_copy+0x17c>)
 800db18:	f240 32de 	movw	r2, #990	; 0x3de
 800db1c:	4919      	ldr	r1, [pc, #100]	; (800db84 <pbuf_copy+0x194>)
 800db1e:	4815      	ldr	r0, [pc, #84]	; (800db74 <pbuf_copy+0x184>)
 800db20:	f00a f8f4 	bl	8017d0c <iprintf>
 800db24:	f06f 0305 	mvn.w	r3, #5
 800db28:	e01b      	b.n	800db62 <pbuf_copy+0x172>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 800db2a:	687b      	ldr	r3, [r7, #4]
 800db2c:	2b00      	cmp	r3, #0
 800db2e:	d013      	beq.n	800db58 <pbuf_copy+0x168>
 800db30:	687b      	ldr	r3, [r7, #4]
 800db32:	895a      	ldrh	r2, [r3, #10]
 800db34:	687b      	ldr	r3, [r7, #4]
 800db36:	891b      	ldrh	r3, [r3, #8]
 800db38:	429a      	cmp	r2, r3
 800db3a:	d10d      	bne.n	800db58 <pbuf_copy+0x168>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800db3c:	687b      	ldr	r3, [r7, #4]
 800db3e:	681b      	ldr	r3, [r3, #0]
 800db40:	2b00      	cmp	r3, #0
 800db42:	d009      	beq.n	800db58 <pbuf_copy+0x168>
 800db44:	4b09      	ldr	r3, [pc, #36]	; (800db6c <pbuf_copy+0x17c>)
 800db46:	f240 32e3 	movw	r2, #995	; 0x3e3
 800db4a:	490e      	ldr	r1, [pc, #56]	; (800db84 <pbuf_copy+0x194>)
 800db4c:	4809      	ldr	r0, [pc, #36]	; (800db74 <pbuf_copy+0x184>)
 800db4e:	f00a f8dd 	bl	8017d0c <iprintf>
 800db52:	f06f 0305 	mvn.w	r3, #5
 800db56:	e004      	b.n	800db62 <pbuf_copy+0x172>
                  (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 800db58:	683b      	ldr	r3, [r7, #0]
 800db5a:	2b00      	cmp	r3, #0
 800db5c:	f47f af67 	bne.w	800da2e <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 800db60:	2300      	movs	r3, #0
}
 800db62:	4618      	mov	r0, r3
 800db64:	3710      	adds	r7, #16
 800db66:	46bd      	mov	sp, r7
 800db68:	bd80      	pop	{r7, pc}
 800db6a:	bf00      	nop
 800db6c:	08018f0c 	.word	0x08018f0c
 800db70:	0801929c 	.word	0x0801929c
 800db74:	08018f58 	.word	0x08018f58
 800db78:	080192cc 	.word	0x080192cc
 800db7c:	080192e4 	.word	0x080192e4
 800db80:	08019300 	.word	0x08019300
 800db84:	08019310 	.word	0x08019310

0800db88 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 800db88:	b580      	push	{r7, lr}
 800db8a:	b088      	sub	sp, #32
 800db8c:	af00      	add	r7, sp, #0
 800db8e:	60f8      	str	r0, [r7, #12]
 800db90:	60b9      	str	r1, [r7, #8]
 800db92:	4611      	mov	r1, r2
 800db94:	461a      	mov	r2, r3
 800db96:	460b      	mov	r3, r1
 800db98:	80fb      	strh	r3, [r7, #6]
 800db9a:	4613      	mov	r3, r2
 800db9c:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left;
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 800db9e:	2300      	movs	r3, #0
 800dba0:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 800dba2:	68fb      	ldr	r3, [r7, #12]
 800dba4:	2b00      	cmp	r3, #0
 800dba6:	d108      	bne.n	800dbba <pbuf_copy_partial+0x32>
 800dba8:	4b30      	ldr	r3, [pc, #192]	; (800dc6c <pbuf_copy_partial+0xe4>)
 800dbaa:	f240 32fe 	movw	r2, #1022	; 0x3fe
 800dbae:	4930      	ldr	r1, [pc, #192]	; (800dc70 <pbuf_copy_partial+0xe8>)
 800dbb0:	4830      	ldr	r0, [pc, #192]	; (800dc74 <pbuf_copy_partial+0xec>)
 800dbb2:	f00a f8ab 	bl	8017d0c <iprintf>
 800dbb6:	2300      	movs	r3, #0
 800dbb8:	e054      	b.n	800dc64 <pbuf_copy_partial+0xdc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 800dbba:	68bb      	ldr	r3, [r7, #8]
 800dbbc:	2b00      	cmp	r3, #0
 800dbbe:	d108      	bne.n	800dbd2 <pbuf_copy_partial+0x4a>
 800dbc0:	4b2a      	ldr	r3, [pc, #168]	; (800dc6c <pbuf_copy_partial+0xe4>)
 800dbc2:	f240 32ff 	movw	r2, #1023	; 0x3ff
 800dbc6:	492c      	ldr	r1, [pc, #176]	; (800dc78 <pbuf_copy_partial+0xf0>)
 800dbc8:	482a      	ldr	r0, [pc, #168]	; (800dc74 <pbuf_copy_partial+0xec>)
 800dbca:	f00a f89f 	bl	8017d0c <iprintf>
 800dbce:	2300      	movs	r3, #0
 800dbd0:	e048      	b.n	800dc64 <pbuf_copy_partial+0xdc>

  left = 0;
 800dbd2:	2300      	movs	r3, #0
 800dbd4:	837b      	strh	r3, [r7, #26]

  if ((buf == NULL) || (dataptr == NULL)) {
 800dbd6:	68fb      	ldr	r3, [r7, #12]
 800dbd8:	2b00      	cmp	r3, #0
 800dbda:	d002      	beq.n	800dbe2 <pbuf_copy_partial+0x5a>
 800dbdc:	68bb      	ldr	r3, [r7, #8]
 800dbde:	2b00      	cmp	r3, #0
 800dbe0:	d101      	bne.n	800dbe6 <pbuf_copy_partial+0x5e>
    return 0;
 800dbe2:	2300      	movs	r3, #0
 800dbe4:	e03e      	b.n	800dc64 <pbuf_copy_partial+0xdc>
  }

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800dbe6:	68fb      	ldr	r3, [r7, #12]
 800dbe8:	61fb      	str	r3, [r7, #28]
 800dbea:	e034      	b.n	800dc56 <pbuf_copy_partial+0xce>
    if ((offset != 0) && (offset >= p->len)) {
 800dbec:	88bb      	ldrh	r3, [r7, #4]
 800dbee:	2b00      	cmp	r3, #0
 800dbf0:	d00a      	beq.n	800dc08 <pbuf_copy_partial+0x80>
 800dbf2:	69fb      	ldr	r3, [r7, #28]
 800dbf4:	895b      	ldrh	r3, [r3, #10]
 800dbf6:	88ba      	ldrh	r2, [r7, #4]
 800dbf8:	429a      	cmp	r2, r3
 800dbfa:	d305      	bcc.n	800dc08 <pbuf_copy_partial+0x80>
      /* don't copy from this buffer -> on to the next */
      offset -= p->len;
 800dbfc:	69fb      	ldr	r3, [r7, #28]
 800dbfe:	895b      	ldrh	r3, [r3, #10]
 800dc00:	88ba      	ldrh	r2, [r7, #4]
 800dc02:	1ad3      	subs	r3, r2, r3
 800dc04:	80bb      	strh	r3, [r7, #4]
 800dc06:	e023      	b.n	800dc50 <pbuf_copy_partial+0xc8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = p->len - offset;
 800dc08:	69fb      	ldr	r3, [r7, #28]
 800dc0a:	895a      	ldrh	r2, [r3, #10]
 800dc0c:	88bb      	ldrh	r3, [r7, #4]
 800dc0e:	1ad3      	subs	r3, r2, r3
 800dc10:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 800dc12:	8b3a      	ldrh	r2, [r7, #24]
 800dc14:	88fb      	ldrh	r3, [r7, #6]
 800dc16:	429a      	cmp	r2, r3
 800dc18:	d901      	bls.n	800dc1e <pbuf_copy_partial+0x96>
        buf_copy_len = len;
 800dc1a:	88fb      	ldrh	r3, [r7, #6]
 800dc1c:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char*)dataptr)[left], &((char*)p->payload)[offset], buf_copy_len);
 800dc1e:	8b7b      	ldrh	r3, [r7, #26]
 800dc20:	68ba      	ldr	r2, [r7, #8]
 800dc22:	18d0      	adds	r0, r2, r3
 800dc24:	69fb      	ldr	r3, [r7, #28]
 800dc26:	685a      	ldr	r2, [r3, #4]
 800dc28:	88bb      	ldrh	r3, [r7, #4]
 800dc2a:	4413      	add	r3, r2
 800dc2c:	8b3a      	ldrh	r2, [r7, #24]
 800dc2e:	4619      	mov	r1, r3
 800dc30:	f009 ffb1 	bl	8017b96 <memcpy>
      copied_total += buf_copy_len;
 800dc34:	8afa      	ldrh	r2, [r7, #22]
 800dc36:	8b3b      	ldrh	r3, [r7, #24]
 800dc38:	4413      	add	r3, r2
 800dc3a:	82fb      	strh	r3, [r7, #22]
      left += buf_copy_len;
 800dc3c:	8b7a      	ldrh	r2, [r7, #26]
 800dc3e:	8b3b      	ldrh	r3, [r7, #24]
 800dc40:	4413      	add	r3, r2
 800dc42:	837b      	strh	r3, [r7, #26]
      len -= buf_copy_len;
 800dc44:	88fa      	ldrh	r2, [r7, #6]
 800dc46:	8b3b      	ldrh	r3, [r7, #24]
 800dc48:	1ad3      	subs	r3, r2, r3
 800dc4a:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 800dc4c:	2300      	movs	r3, #0
 800dc4e:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800dc50:	69fb      	ldr	r3, [r7, #28]
 800dc52:	681b      	ldr	r3, [r3, #0]
 800dc54:	61fb      	str	r3, [r7, #28]
 800dc56:	88fb      	ldrh	r3, [r7, #6]
 800dc58:	2b00      	cmp	r3, #0
 800dc5a:	d002      	beq.n	800dc62 <pbuf_copy_partial+0xda>
 800dc5c:	69fb      	ldr	r3, [r7, #28]
 800dc5e:	2b00      	cmp	r3, #0
 800dc60:	d1c4      	bne.n	800dbec <pbuf_copy_partial+0x64>
    }
  }
  return copied_total;
 800dc62:	8afb      	ldrh	r3, [r7, #22]
}
 800dc64:	4618      	mov	r0, r3
 800dc66:	3720      	adds	r7, #32
 800dc68:	46bd      	mov	sp, r7
 800dc6a:	bd80      	pop	{r7, pc}
 800dc6c:	08018f0c 	.word	0x08018f0c
 800dc70:	0801933c 	.word	0x0801933c
 800dc74:	08018f58 	.word	0x08018f58
 800dc78:	0801935c 	.word	0x0801935c

0800dc7c <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 800dc7c:	b480      	push	{r7}
 800dc7e:	af00      	add	r7, sp, #0
#if LWIP_RANDOMIZE_INITIAL_LOCAL_PORTS && defined(LWIP_RAND)
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
#endif /* LWIP_RANDOMIZE_INITIAL_LOCAL_PORTS && defined(LWIP_RAND) */
}
 800dc80:	bf00      	nop
 800dc82:	46bd      	mov	sp, r7
 800dc84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc88:	4770      	bx	lr
	...

0800dc8c <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 800dc8c:	b580      	push	{r7, lr}
 800dc8e:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 800dc90:	f000 fdf0 	bl	800e874 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 800dc94:	4b07      	ldr	r3, [pc, #28]	; (800dcb4 <tcp_tmr+0x28>)
 800dc96:	781b      	ldrb	r3, [r3, #0]
 800dc98:	3301      	adds	r3, #1
 800dc9a:	b2da      	uxtb	r2, r3
 800dc9c:	4b05      	ldr	r3, [pc, #20]	; (800dcb4 <tcp_tmr+0x28>)
 800dc9e:	701a      	strb	r2, [r3, #0]
 800dca0:	4b04      	ldr	r3, [pc, #16]	; (800dcb4 <tcp_tmr+0x28>)
 800dca2:	781b      	ldrb	r3, [r3, #0]
 800dca4:	f003 0301 	and.w	r3, r3, #1
 800dca8:	2b00      	cmp	r3, #0
 800dcaa:	d001      	beq.n	800dcb0 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 800dcac:	f000 fb22 	bl	800e2f4 <tcp_slowtmr>
  }
}
 800dcb0:	bf00      	nop
 800dcb2:	bd80      	pop	{r7, pc}
 800dcb4:	20004b6d 	.word	0x20004b6d

0800dcb8 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 800dcb8:	b480      	push	{r7}
 800dcba:	b085      	sub	sp, #20
 800dcbc:	af00      	add	r7, sp, #0
 800dcbe:	6078      	str	r0, [r7, #4]
 800dcc0:	6039      	str	r1, [r7, #0]
   struct tcp_pcb *pcb;
   for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800dcc2:	687b      	ldr	r3, [r7, #4]
 800dcc4:	60fb      	str	r3, [r7, #12]
 800dcc6:	e00a      	b.n	800dcde <tcp_remove_listener+0x26>
      if (pcb->listener == lpcb) {
 800dcc8:	68fb      	ldr	r3, [r7, #12]
 800dcca:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800dccc:	683a      	ldr	r2, [r7, #0]
 800dcce:	429a      	cmp	r2, r3
 800dcd0:	d102      	bne.n	800dcd8 <tcp_remove_listener+0x20>
         pcb->listener = NULL;
 800dcd2:	68fb      	ldr	r3, [r7, #12]
 800dcd4:	2200      	movs	r2, #0
 800dcd6:	679a      	str	r2, [r3, #120]	; 0x78
   for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800dcd8:	68fb      	ldr	r3, [r7, #12]
 800dcda:	68db      	ldr	r3, [r3, #12]
 800dcdc:	60fb      	str	r3, [r7, #12]
 800dcde:	68fb      	ldr	r3, [r7, #12]
 800dce0:	2b00      	cmp	r3, #0
 800dce2:	d1f1      	bne.n	800dcc8 <tcp_remove_listener+0x10>
      }
   }
}
 800dce4:	bf00      	nop
 800dce6:	3714      	adds	r7, #20
 800dce8:	46bd      	mov	sp, r7
 800dcea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcee:	4770      	bx	lr

0800dcf0 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 800dcf0:	b580      	push	{r7, lr}
 800dcf2:	b084      	sub	sp, #16
 800dcf4:	af00      	add	r7, sp, #0
 800dcf6:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800dcf8:	687b      	ldr	r3, [r7, #4]
 800dcfa:	2b00      	cmp	r3, #0
 800dcfc:	d105      	bne.n	800dd0a <tcp_listen_closed+0x1a>
 800dcfe:	4b13      	ldr	r3, [pc, #76]	; (800dd4c <tcp_listen_closed+0x5c>)
 800dd00:	22c0      	movs	r2, #192	; 0xc0
 800dd02:	4913      	ldr	r1, [pc, #76]	; (800dd50 <tcp_listen_closed+0x60>)
 800dd04:	4813      	ldr	r0, [pc, #76]	; (800dd54 <tcp_listen_closed+0x64>)
 800dd06:	f00a f801 	bl	8017d0c <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 800dd0a:	687b      	ldr	r3, [r7, #4]
 800dd0c:	7d1b      	ldrb	r3, [r3, #20]
 800dd0e:	2b01      	cmp	r3, #1
 800dd10:	d005      	beq.n	800dd1e <tcp_listen_closed+0x2e>
 800dd12:	4b0e      	ldr	r3, [pc, #56]	; (800dd4c <tcp_listen_closed+0x5c>)
 800dd14:	22c1      	movs	r2, #193	; 0xc1
 800dd16:	4910      	ldr	r1, [pc, #64]	; (800dd58 <tcp_listen_closed+0x68>)
 800dd18:	480e      	ldr	r0, [pc, #56]	; (800dd54 <tcp_listen_closed+0x64>)
 800dd1a:	f009 fff7 	bl	8017d0c <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800dd1e:	2301      	movs	r3, #1
 800dd20:	60fb      	str	r3, [r7, #12]
 800dd22:	e00b      	b.n	800dd3c <tcp_listen_closed+0x4c>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen*)pcb);
 800dd24:	4a0d      	ldr	r2, [pc, #52]	; (800dd5c <tcp_listen_closed+0x6c>)
 800dd26:	68fb      	ldr	r3, [r7, #12]
 800dd28:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800dd2c:	681b      	ldr	r3, [r3, #0]
 800dd2e:	6879      	ldr	r1, [r7, #4]
 800dd30:	4618      	mov	r0, r3
 800dd32:	f7ff ffc1 	bl	800dcb8 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800dd36:	68fb      	ldr	r3, [r7, #12]
 800dd38:	3301      	adds	r3, #1
 800dd3a:	60fb      	str	r3, [r7, #12]
 800dd3c:	68fb      	ldr	r3, [r7, #12]
 800dd3e:	2b03      	cmp	r3, #3
 800dd40:	d9f0      	bls.n	800dd24 <tcp_listen_closed+0x34>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 800dd42:	bf00      	nop
 800dd44:	3710      	adds	r7, #16
 800dd46:	46bd      	mov	sp, r7
 800dd48:	bd80      	pop	{r7, pc}
 800dd4a:	bf00      	nop
 800dd4c:	08019490 	.word	0x08019490
 800dd50:	080194c0 	.word	0x080194c0
 800dd54:	080194cc 	.word	0x080194cc
 800dd58:	080194f4 	.word	0x080194f4
 800dd5c:	0801ae5c 	.word	0x0801ae5c

0800dd60 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 800dd60:	b5b0      	push	{r4, r5, r7, lr}
 800dd62:	b086      	sub	sp, #24
 800dd64:	af02      	add	r7, sp, #8
 800dd66:	6078      	str	r0, [r7, #4]
 800dd68:	460b      	mov	r3, r1
 800dd6a:	70fb      	strb	r3, [r7, #3]
  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 800dd6c:	78fb      	ldrb	r3, [r7, #3]
 800dd6e:	2b00      	cmp	r3, #0
 800dd70:	d075      	beq.n	800de5e <tcp_close_shutdown+0xfe>
 800dd72:	687b      	ldr	r3, [r7, #4]
 800dd74:	7d1b      	ldrb	r3, [r3, #20]
 800dd76:	2b04      	cmp	r3, #4
 800dd78:	d003      	beq.n	800dd82 <tcp_close_shutdown+0x22>
 800dd7a:	687b      	ldr	r3, [r7, #4]
 800dd7c:	7d1b      	ldrb	r3, [r3, #20]
 800dd7e:	2b07      	cmp	r3, #7
 800dd80:	d16d      	bne.n	800de5e <tcp_close_shutdown+0xfe>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 800dd82:	687b      	ldr	r3, [r7, #4]
 800dd84:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800dd86:	2b00      	cmp	r3, #0
 800dd88:	d104      	bne.n	800dd94 <tcp_close_shutdown+0x34>
 800dd8a:	687b      	ldr	r3, [r7, #4]
 800dd8c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800dd8e:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800dd92:	d064      	beq.n	800de5e <tcp_close_shutdown+0xfe>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 800dd94:	687b      	ldr	r3, [r7, #4]
 800dd96:	7e9b      	ldrb	r3, [r3, #26]
 800dd98:	f003 0310 	and.w	r3, r3, #16
 800dd9c:	2b00      	cmp	r3, #0
 800dd9e:	d106      	bne.n	800ddae <tcp_close_shutdown+0x4e>
 800dda0:	4b59      	ldr	r3, [pc, #356]	; (800df08 <tcp_close_shutdown+0x1a8>)
 800dda2:	f240 120f 	movw	r2, #271	; 0x10f
 800dda6:	4959      	ldr	r1, [pc, #356]	; (800df0c <tcp_close_shutdown+0x1ac>)
 800dda8:	4859      	ldr	r0, [pc, #356]	; (800df10 <tcp_close_shutdown+0x1b0>)
 800ddaa:	f009 ffaf 	bl	8017d0c <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800ddae:	687b      	ldr	r3, [r7, #4]
 800ddb0:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800ddb2:	687b      	ldr	r3, [r7, #4]
 800ddb4:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800ddb6:	687c      	ldr	r4, [r7, #4]
 800ddb8:	687b      	ldr	r3, [r7, #4]
 800ddba:	1d1d      	adds	r5, r3, #4
 800ddbc:	687b      	ldr	r3, [r7, #4]
 800ddbe:	8adb      	ldrh	r3, [r3, #22]
 800ddc0:	687a      	ldr	r2, [r7, #4]
 800ddc2:	8b12      	ldrh	r2, [r2, #24]
 800ddc4:	9201      	str	r2, [sp, #4]
 800ddc6:	9300      	str	r3, [sp, #0]
 800ddc8:	462b      	mov	r3, r5
 800ddca:	4622      	mov	r2, r4
 800ddcc:	f004 f862 	bl	8011e94 <tcp_rst>
               pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 800ddd0:	6878      	ldr	r0, [r7, #4]
 800ddd2:	f000 ffc5 	bl	800ed60 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 800ddd6:	4b4f      	ldr	r3, [pc, #316]	; (800df14 <tcp_close_shutdown+0x1b4>)
 800ddd8:	681b      	ldr	r3, [r3, #0]
 800ddda:	687a      	ldr	r2, [r7, #4]
 800dddc:	429a      	cmp	r2, r3
 800ddde:	d105      	bne.n	800ddec <tcp_close_shutdown+0x8c>
 800dde0:	4b4c      	ldr	r3, [pc, #304]	; (800df14 <tcp_close_shutdown+0x1b4>)
 800dde2:	681b      	ldr	r3, [r3, #0]
 800dde4:	68db      	ldr	r3, [r3, #12]
 800dde6:	4a4b      	ldr	r2, [pc, #300]	; (800df14 <tcp_close_shutdown+0x1b4>)
 800dde8:	6013      	str	r3, [r2, #0]
 800ddea:	e013      	b.n	800de14 <tcp_close_shutdown+0xb4>
 800ddec:	4b49      	ldr	r3, [pc, #292]	; (800df14 <tcp_close_shutdown+0x1b4>)
 800ddee:	681b      	ldr	r3, [r3, #0]
 800ddf0:	60fb      	str	r3, [r7, #12]
 800ddf2:	e00c      	b.n	800de0e <tcp_close_shutdown+0xae>
 800ddf4:	68fb      	ldr	r3, [r7, #12]
 800ddf6:	68db      	ldr	r3, [r3, #12]
 800ddf8:	687a      	ldr	r2, [r7, #4]
 800ddfa:	429a      	cmp	r2, r3
 800ddfc:	d104      	bne.n	800de08 <tcp_close_shutdown+0xa8>
 800ddfe:	687b      	ldr	r3, [r7, #4]
 800de00:	68da      	ldr	r2, [r3, #12]
 800de02:	68fb      	ldr	r3, [r7, #12]
 800de04:	60da      	str	r2, [r3, #12]
 800de06:	e005      	b.n	800de14 <tcp_close_shutdown+0xb4>
 800de08:	68fb      	ldr	r3, [r7, #12]
 800de0a:	68db      	ldr	r3, [r3, #12]
 800de0c:	60fb      	str	r3, [r7, #12]
 800de0e:	68fb      	ldr	r3, [r7, #12]
 800de10:	2b00      	cmp	r3, #0
 800de12:	d1ef      	bne.n	800ddf4 <tcp_close_shutdown+0x94>
 800de14:	687b      	ldr	r3, [r7, #4]
 800de16:	2200      	movs	r2, #0
 800de18:	60da      	str	r2, [r3, #12]
 800de1a:	4b3f      	ldr	r3, [pc, #252]	; (800df18 <tcp_close_shutdown+0x1b8>)
 800de1c:	2201      	movs	r2, #1
 800de1e:	701a      	strb	r2, [r3, #0]
      if (pcb->state == ESTABLISHED) {
 800de20:	687b      	ldr	r3, [r7, #4]
 800de22:	7d1b      	ldrb	r3, [r3, #20]
 800de24:	2b04      	cmp	r3, #4
 800de26:	d10c      	bne.n	800de42 <tcp_close_shutdown+0xe2>
        /* move to TIME_WAIT since we close actively */
        pcb->state = TIME_WAIT;
 800de28:	687b      	ldr	r3, [r7, #4]
 800de2a:	220a      	movs	r2, #10
 800de2c:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800de2e:	4b3b      	ldr	r3, [pc, #236]	; (800df1c <tcp_close_shutdown+0x1bc>)
 800de30:	681a      	ldr	r2, [r3, #0]
 800de32:	687b      	ldr	r3, [r7, #4]
 800de34:	60da      	str	r2, [r3, #12]
 800de36:	4a39      	ldr	r2, [pc, #228]	; (800df1c <tcp_close_shutdown+0x1bc>)
 800de38:	687b      	ldr	r3, [r7, #4]
 800de3a:	6013      	str	r3, [r2, #0]
 800de3c:	f004 fa7a 	bl	8012334 <tcp_timer_needed>
 800de40:	e00b      	b.n	800de5a <tcp_close_shutdown+0xfa>
      } else {
        /* CLOSE_WAIT: deallocate the pcb since we already sent a RST for it */
        if (tcp_input_pcb == pcb) {
 800de42:	4b37      	ldr	r3, [pc, #220]	; (800df20 <tcp_close_shutdown+0x1c0>)
 800de44:	681b      	ldr	r3, [r3, #0]
 800de46:	687a      	ldr	r2, [r7, #4]
 800de48:	429a      	cmp	r2, r3
 800de4a:	d102      	bne.n	800de52 <tcp_close_shutdown+0xf2>
          /* prevent using a deallocated pcb: free it from tcp_input later */
          tcp_trigger_input_pcb_close();
 800de4c:	f003 faec 	bl	8011428 <tcp_trigger_input_pcb_close>
 800de50:	e003      	b.n	800de5a <tcp_close_shutdown+0xfa>
        } else {
          memp_free(MEMP_TCP_PCB, pcb);
 800de52:	6879      	ldr	r1, [r7, #4]
 800de54:	2001      	movs	r0, #1
 800de56:	f7fe ff29 	bl	800ccac <memp_free>
        }
      }
      return ERR_OK;
 800de5a:	2300      	movs	r3, #0
 800de5c:	e050      	b.n	800df00 <tcp_close_shutdown+0x1a0>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 800de5e:	687b      	ldr	r3, [r7, #4]
 800de60:	7d1b      	ldrb	r3, [r3, #20]
 800de62:	2b01      	cmp	r3, #1
 800de64:	d02e      	beq.n	800dec4 <tcp_close_shutdown+0x164>
 800de66:	2b02      	cmp	r3, #2
 800de68:	d038      	beq.n	800dedc <tcp_close_shutdown+0x17c>
 800de6a:	2b00      	cmp	r3, #0
 800de6c:	d142      	bne.n	800def4 <tcp_close_shutdown+0x194>
     * and the user needs some way to free it should the need arise.
     * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
     * or for a pcb that has been used and then entered the CLOSED state
     * is erroneous, but this should never happen as the pcb has in those cases
     * been freed, and so any remaining handles are bogus. */
    if (pcb->local_port != 0) {
 800de6e:	687b      	ldr	r3, [r7, #4]
 800de70:	8adb      	ldrh	r3, [r3, #22]
 800de72:	2b00      	cmp	r3, #0
 800de74:	d021      	beq.n	800deba <tcp_close_shutdown+0x15a>
      TCP_RMV(&tcp_bound_pcbs, pcb);
 800de76:	4b2b      	ldr	r3, [pc, #172]	; (800df24 <tcp_close_shutdown+0x1c4>)
 800de78:	681b      	ldr	r3, [r3, #0]
 800de7a:	687a      	ldr	r2, [r7, #4]
 800de7c:	429a      	cmp	r2, r3
 800de7e:	d105      	bne.n	800de8c <tcp_close_shutdown+0x12c>
 800de80:	4b28      	ldr	r3, [pc, #160]	; (800df24 <tcp_close_shutdown+0x1c4>)
 800de82:	681b      	ldr	r3, [r3, #0]
 800de84:	68db      	ldr	r3, [r3, #12]
 800de86:	4a27      	ldr	r2, [pc, #156]	; (800df24 <tcp_close_shutdown+0x1c4>)
 800de88:	6013      	str	r3, [r2, #0]
 800de8a:	e013      	b.n	800deb4 <tcp_close_shutdown+0x154>
 800de8c:	4b25      	ldr	r3, [pc, #148]	; (800df24 <tcp_close_shutdown+0x1c4>)
 800de8e:	681b      	ldr	r3, [r3, #0]
 800de90:	60bb      	str	r3, [r7, #8]
 800de92:	e00c      	b.n	800deae <tcp_close_shutdown+0x14e>
 800de94:	68bb      	ldr	r3, [r7, #8]
 800de96:	68db      	ldr	r3, [r3, #12]
 800de98:	687a      	ldr	r2, [r7, #4]
 800de9a:	429a      	cmp	r2, r3
 800de9c:	d104      	bne.n	800dea8 <tcp_close_shutdown+0x148>
 800de9e:	687b      	ldr	r3, [r7, #4]
 800dea0:	68da      	ldr	r2, [r3, #12]
 800dea2:	68bb      	ldr	r3, [r7, #8]
 800dea4:	60da      	str	r2, [r3, #12]
 800dea6:	e005      	b.n	800deb4 <tcp_close_shutdown+0x154>
 800dea8:	68bb      	ldr	r3, [r7, #8]
 800deaa:	68db      	ldr	r3, [r3, #12]
 800deac:	60bb      	str	r3, [r7, #8]
 800deae:	68bb      	ldr	r3, [r7, #8]
 800deb0:	2b00      	cmp	r3, #0
 800deb2:	d1ef      	bne.n	800de94 <tcp_close_shutdown+0x134>
 800deb4:	687b      	ldr	r3, [r7, #4]
 800deb6:	2200      	movs	r2, #0
 800deb8:	60da      	str	r2, [r3, #12]
    }
    memp_free(MEMP_TCP_PCB, pcb);
 800deba:	6879      	ldr	r1, [r7, #4]
 800debc:	2001      	movs	r0, #1
 800debe:	f7fe fef5 	bl	800ccac <memp_free>
    break;
 800dec2:	e01c      	b.n	800defe <tcp_close_shutdown+0x19e>
  case LISTEN:
    tcp_listen_closed(pcb);
 800dec4:	6878      	ldr	r0, [r7, #4]
 800dec6:	f7ff ff13 	bl	800dcf0 <tcp_listen_closed>
    tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 800deca:	6879      	ldr	r1, [r7, #4]
 800decc:	4816      	ldr	r0, [pc, #88]	; (800df28 <tcp_close_shutdown+0x1c8>)
 800dece:	f000 ff89 	bl	800ede4 <tcp_pcb_remove>
    memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 800ded2:	6879      	ldr	r1, [r7, #4]
 800ded4:	2002      	movs	r0, #2
 800ded6:	f7fe fee9 	bl	800ccac <memp_free>
    break;
 800deda:	e010      	b.n	800defe <tcp_close_shutdown+0x19e>
  case SYN_SENT:
    TCP_PCB_REMOVE_ACTIVE(pcb);
 800dedc:	6879      	ldr	r1, [r7, #4]
 800dede:	480d      	ldr	r0, [pc, #52]	; (800df14 <tcp_close_shutdown+0x1b4>)
 800dee0:	f000 ff80 	bl	800ede4 <tcp_pcb_remove>
 800dee4:	4b0c      	ldr	r3, [pc, #48]	; (800df18 <tcp_close_shutdown+0x1b8>)
 800dee6:	2201      	movs	r2, #1
 800dee8:	701a      	strb	r2, [r3, #0]
    memp_free(MEMP_TCP_PCB, pcb);
 800deea:	6879      	ldr	r1, [r7, #4]
 800deec:	2001      	movs	r0, #1
 800deee:	f7fe fedd 	bl	800ccac <memp_free>
    MIB2_STATS_INC(mib2.tcpattemptfails);
    break;
 800def2:	e004      	b.n	800defe <tcp_close_shutdown+0x19e>
  default:
    return tcp_close_shutdown_fin(pcb);
 800def4:	6878      	ldr	r0, [r7, #4]
 800def6:	f000 f819 	bl	800df2c <tcp_close_shutdown_fin>
 800defa:	4603      	mov	r3, r0
 800defc:	e000      	b.n	800df00 <tcp_close_shutdown+0x1a0>
  }
  return ERR_OK;
 800defe:	2300      	movs	r3, #0
}
 800df00:	4618      	mov	r0, r3
 800df02:	3710      	adds	r7, #16
 800df04:	46bd      	mov	sp, r7
 800df06:	bdb0      	pop	{r4, r5, r7, pc}
 800df08:	08019490 	.word	0x08019490
 800df0c:	0801950c 	.word	0x0801950c
 800df10:	080194cc 	.word	0x080194cc
 800df14:	2000b5b0 	.word	0x2000b5b0
 800df18:	2000b5ac 	.word	0x2000b5ac
 800df1c:	2000b5c0 	.word	0x2000b5c0
 800df20:	2000b5c4 	.word	0x2000b5c4
 800df24:	2000b5bc 	.word	0x2000b5bc
 800df28:	2000b5b8 	.word	0x2000b5b8

0800df2c <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 800df2c:	b580      	push	{r7, lr}
 800df2e:	b084      	sub	sp, #16
 800df30:	af00      	add	r7, sp, #0
 800df32:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800df34:	687b      	ldr	r3, [r7, #4]
 800df36:	2b00      	cmp	r3, #0
 800df38:	d106      	bne.n	800df48 <tcp_close_shutdown_fin+0x1c>
 800df3a:	4b2c      	ldr	r3, [pc, #176]	; (800dfec <tcp_close_shutdown_fin+0xc0>)
 800df3c:	f240 124d 	movw	r2, #333	; 0x14d
 800df40:	492b      	ldr	r1, [pc, #172]	; (800dff0 <tcp_close_shutdown_fin+0xc4>)
 800df42:	482c      	ldr	r0, [pc, #176]	; (800dff4 <tcp_close_shutdown_fin+0xc8>)
 800df44:	f009 fee2 	bl	8017d0c <iprintf>

  switch (pcb->state) {
 800df48:	687b      	ldr	r3, [r7, #4]
 800df4a:	7d1b      	ldrb	r3, [r3, #20]
 800df4c:	2b04      	cmp	r3, #4
 800df4e:	d010      	beq.n	800df72 <tcp_close_shutdown_fin+0x46>
 800df50:	2b07      	cmp	r3, #7
 800df52:	d01b      	beq.n	800df8c <tcp_close_shutdown_fin+0x60>
 800df54:	2b03      	cmp	r3, #3
 800df56:	d126      	bne.n	800dfa6 <tcp_close_shutdown_fin+0x7a>
  case SYN_RCVD:
    err = tcp_send_fin(pcb);
 800df58:	6878      	ldr	r0, [r7, #4]
 800df5a:	f003 faf1 	bl	8011540 <tcp_send_fin>
 800df5e:	4603      	mov	r3, r0
 800df60:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 800df62:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800df66:	2b00      	cmp	r3, #0
 800df68:	d11f      	bne.n	800dfaa <tcp_close_shutdown_fin+0x7e>
      tcp_backlog_accepted(pcb);
      MIB2_STATS_INC(mib2.tcpattemptfails);
      pcb->state = FIN_WAIT_1;
 800df6a:	687b      	ldr	r3, [r7, #4]
 800df6c:	2205      	movs	r2, #5
 800df6e:	751a      	strb	r2, [r3, #20]
    }
    break;
 800df70:	e01b      	b.n	800dfaa <tcp_close_shutdown_fin+0x7e>
  case ESTABLISHED:
    err = tcp_send_fin(pcb);
 800df72:	6878      	ldr	r0, [r7, #4]
 800df74:	f003 fae4 	bl	8011540 <tcp_send_fin>
 800df78:	4603      	mov	r3, r0
 800df7a:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 800df7c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800df80:	2b00      	cmp	r3, #0
 800df82:	d114      	bne.n	800dfae <tcp_close_shutdown_fin+0x82>
      MIB2_STATS_INC(mib2.tcpestabresets);
      pcb->state = FIN_WAIT_1;
 800df84:	687b      	ldr	r3, [r7, #4]
 800df86:	2205      	movs	r2, #5
 800df88:	751a      	strb	r2, [r3, #20]
    }
    break;
 800df8a:	e010      	b.n	800dfae <tcp_close_shutdown_fin+0x82>
  case CLOSE_WAIT:
    err = tcp_send_fin(pcb);
 800df8c:	6878      	ldr	r0, [r7, #4]
 800df8e:	f003 fad7 	bl	8011540 <tcp_send_fin>
 800df92:	4603      	mov	r3, r0
 800df94:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 800df96:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800df9a:	2b00      	cmp	r3, #0
 800df9c:	d109      	bne.n	800dfb2 <tcp_close_shutdown_fin+0x86>
      MIB2_STATS_INC(mib2.tcpestabresets);
      pcb->state = LAST_ACK;
 800df9e:	687b      	ldr	r3, [r7, #4]
 800dfa0:	2209      	movs	r2, #9
 800dfa2:	751a      	strb	r2, [r3, #20]
    }
    break;
 800dfa4:	e005      	b.n	800dfb2 <tcp_close_shutdown_fin+0x86>
  default:
    /* Has already been closed, do nothing. */
    return ERR_OK;
 800dfa6:	2300      	movs	r3, #0
 800dfa8:	e01c      	b.n	800dfe4 <tcp_close_shutdown_fin+0xb8>
    break;
 800dfaa:	bf00      	nop
 800dfac:	e002      	b.n	800dfb4 <tcp_close_shutdown_fin+0x88>
    break;
 800dfae:	bf00      	nop
 800dfb0:	e000      	b.n	800dfb4 <tcp_close_shutdown_fin+0x88>
    break;
 800dfb2:	bf00      	nop
  }

  if (err == ERR_OK) {
 800dfb4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800dfb8:	2b00      	cmp	r3, #0
 800dfba:	d103      	bne.n	800dfc4 <tcp_close_shutdown_fin+0x98>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 800dfbc:	6878      	ldr	r0, [r7, #4]
 800dfbe:	f003 fcdf 	bl	8011980 <tcp_output>
 800dfc2:	e00d      	b.n	800dfe0 <tcp_close_shutdown_fin+0xb4>
  } else if (err == ERR_MEM) {
 800dfc4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800dfc8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800dfcc:	d108      	bne.n	800dfe0 <tcp_close_shutdown_fin+0xb4>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    pcb->flags |= TF_CLOSEPEND;
 800dfce:	687b      	ldr	r3, [r7, #4]
 800dfd0:	7e9b      	ldrb	r3, [r3, #26]
 800dfd2:	f043 0308 	orr.w	r3, r3, #8
 800dfd6:	b2da      	uxtb	r2, r3
 800dfd8:	687b      	ldr	r3, [r7, #4]
 800dfda:	769a      	strb	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 800dfdc:	2300      	movs	r3, #0
 800dfde:	e001      	b.n	800dfe4 <tcp_close_shutdown_fin+0xb8>
  }
  return err;
 800dfe0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800dfe4:	4618      	mov	r0, r3
 800dfe6:	3710      	adds	r7, #16
 800dfe8:	46bd      	mov	sp, r7
 800dfea:	bd80      	pop	{r7, pc}
 800dfec:	08019490 	.word	0x08019490
 800dff0:	080194c0 	.word	0x080194c0
 800dff4:	080194cc 	.word	0x080194cc

0800dff8 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 800dff8:	b580      	push	{r7, lr}
 800dffa:	b082      	sub	sp, #8
 800dffc:	af00      	add	r7, sp, #0
 800dffe:	6078      	str	r0, [r7, #4]
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));
  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 800e000:	687b      	ldr	r3, [r7, #4]
 800e002:	7d1b      	ldrb	r3, [r3, #20]
 800e004:	2b01      	cmp	r3, #1
 800e006:	d006      	beq.n	800e016 <tcp_close+0x1e>
    /* Set a flag not to receive any more data... */
    pcb->flags |= TF_RXCLOSED;
 800e008:	687b      	ldr	r3, [r7, #4]
 800e00a:	7e9b      	ldrb	r3, [r3, #26]
 800e00c:	f043 0310 	orr.w	r3, r3, #16
 800e010:	b2da      	uxtb	r2, r3
 800e012:	687b      	ldr	r3, [r7, #4]
 800e014:	769a      	strb	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 800e016:	2101      	movs	r1, #1
 800e018:	6878      	ldr	r0, [r7, #4]
 800e01a:	f7ff fea1 	bl	800dd60 <tcp_close_shutdown>
 800e01e:	4603      	mov	r3, r0
}
 800e020:	4618      	mov	r0, r3
 800e022:	3708      	adds	r7, #8
 800e024:	46bd      	mov	sp, r7
 800e026:	bd80      	pop	{r7, pc}

0800e028 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 800e028:	b580      	push	{r7, lr}
 800e02a:	b08c      	sub	sp, #48	; 0x30
 800e02c:	af02      	add	r7, sp, #8
 800e02e:	6078      	str	r0, [r7, #4]
 800e030:	6039      	str	r1, [r7, #0]
  tcp_err_fn errf;
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 800e032:	687b      	ldr	r3, [r7, #4]
 800e034:	7d1b      	ldrb	r3, [r3, #20]
 800e036:	2b01      	cmp	r3, #1
 800e038:	d106      	bne.n	800e048 <tcp_abandon+0x20>
 800e03a:	4b4d      	ldr	r3, [pc, #308]	; (800e170 <tcp_abandon+0x148>)
 800e03c:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800e040:	494c      	ldr	r1, [pc, #304]	; (800e174 <tcp_abandon+0x14c>)
 800e042:	484d      	ldr	r0, [pc, #308]	; (800e178 <tcp_abandon+0x150>)
 800e044:	f009 fe62 	bl	8017d0c <iprintf>
    pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 800e048:	687b      	ldr	r3, [r7, #4]
 800e04a:	7d1b      	ldrb	r3, [r3, #20]
 800e04c:	2b0a      	cmp	r3, #10
 800e04e:	d108      	bne.n	800e062 <tcp_abandon+0x3a>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 800e050:	6879      	ldr	r1, [r7, #4]
 800e052:	484a      	ldr	r0, [pc, #296]	; (800e17c <tcp_abandon+0x154>)
 800e054:	f000 fec6 	bl	800ede4 <tcp_pcb_remove>
    memp_free(MEMP_TCP_PCB, pcb);
 800e058:	6879      	ldr	r1, [r7, #4]
 800e05a:	2001      	movs	r0, #1
 800e05c:	f7fe fe26 	bl	800ccac <memp_free>
    }
    last_state = pcb->state;
    memp_free(MEMP_TCP_PCB, pcb);
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
  }
}
 800e060:	e081      	b.n	800e166 <tcp_abandon+0x13e>
    int send_rst = 0;
 800e062:	2300      	movs	r3, #0
 800e064:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 800e066:	2300      	movs	r3, #0
 800e068:	847b      	strh	r3, [r7, #34]	; 0x22
    seqno = pcb->snd_nxt;
 800e06a:	687b      	ldr	r3, [r7, #4]
 800e06c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e06e:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 800e070:	687b      	ldr	r3, [r7, #4]
 800e072:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e074:	617b      	str	r3, [r7, #20]
    errf = pcb->errf;
 800e076:	687b      	ldr	r3, [r7, #4]
 800e078:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e07c:	613b      	str	r3, [r7, #16]
    errf_arg = pcb->callback_arg;
 800e07e:	687b      	ldr	r3, [r7, #4]
 800e080:	691b      	ldr	r3, [r3, #16]
 800e082:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 800e084:	687b      	ldr	r3, [r7, #4]
 800e086:	7d1b      	ldrb	r3, [r3, #20]
 800e088:	2b00      	cmp	r3, #0
 800e08a:	d126      	bne.n	800e0da <tcp_abandon+0xb2>
      if (pcb->local_port != 0) {
 800e08c:	687b      	ldr	r3, [r7, #4]
 800e08e:	8adb      	ldrh	r3, [r3, #22]
 800e090:	2b00      	cmp	r3, #0
 800e092:	d02e      	beq.n	800e0f2 <tcp_abandon+0xca>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800e094:	4b3a      	ldr	r3, [pc, #232]	; (800e180 <tcp_abandon+0x158>)
 800e096:	681b      	ldr	r3, [r3, #0]
 800e098:	687a      	ldr	r2, [r7, #4]
 800e09a:	429a      	cmp	r2, r3
 800e09c:	d105      	bne.n	800e0aa <tcp_abandon+0x82>
 800e09e:	4b38      	ldr	r3, [pc, #224]	; (800e180 <tcp_abandon+0x158>)
 800e0a0:	681b      	ldr	r3, [r3, #0]
 800e0a2:	68db      	ldr	r3, [r3, #12]
 800e0a4:	4a36      	ldr	r2, [pc, #216]	; (800e180 <tcp_abandon+0x158>)
 800e0a6:	6013      	str	r3, [r2, #0]
 800e0a8:	e013      	b.n	800e0d2 <tcp_abandon+0xaa>
 800e0aa:	4b35      	ldr	r3, [pc, #212]	; (800e180 <tcp_abandon+0x158>)
 800e0ac:	681b      	ldr	r3, [r3, #0]
 800e0ae:	61fb      	str	r3, [r7, #28]
 800e0b0:	e00c      	b.n	800e0cc <tcp_abandon+0xa4>
 800e0b2:	69fb      	ldr	r3, [r7, #28]
 800e0b4:	68db      	ldr	r3, [r3, #12]
 800e0b6:	687a      	ldr	r2, [r7, #4]
 800e0b8:	429a      	cmp	r2, r3
 800e0ba:	d104      	bne.n	800e0c6 <tcp_abandon+0x9e>
 800e0bc:	687b      	ldr	r3, [r7, #4]
 800e0be:	68da      	ldr	r2, [r3, #12]
 800e0c0:	69fb      	ldr	r3, [r7, #28]
 800e0c2:	60da      	str	r2, [r3, #12]
 800e0c4:	e005      	b.n	800e0d2 <tcp_abandon+0xaa>
 800e0c6:	69fb      	ldr	r3, [r7, #28]
 800e0c8:	68db      	ldr	r3, [r3, #12]
 800e0ca:	61fb      	str	r3, [r7, #28]
 800e0cc:	69fb      	ldr	r3, [r7, #28]
 800e0ce:	2b00      	cmp	r3, #0
 800e0d0:	d1ef      	bne.n	800e0b2 <tcp_abandon+0x8a>
 800e0d2:	687b      	ldr	r3, [r7, #4]
 800e0d4:	2200      	movs	r2, #0
 800e0d6:	60da      	str	r2, [r3, #12]
 800e0d8:	e00b      	b.n	800e0f2 <tcp_abandon+0xca>
      send_rst = reset;
 800e0da:	683b      	ldr	r3, [r7, #0]
 800e0dc:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 800e0de:	687b      	ldr	r3, [r7, #4]
 800e0e0:	8adb      	ldrh	r3, [r3, #22]
 800e0e2:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800e0e4:	6879      	ldr	r1, [r7, #4]
 800e0e6:	4827      	ldr	r0, [pc, #156]	; (800e184 <tcp_abandon+0x15c>)
 800e0e8:	f000 fe7c 	bl	800ede4 <tcp_pcb_remove>
 800e0ec:	4b26      	ldr	r3, [pc, #152]	; (800e188 <tcp_abandon+0x160>)
 800e0ee:	2201      	movs	r2, #1
 800e0f0:	701a      	strb	r2, [r3, #0]
    if (pcb->unacked != NULL) {
 800e0f2:	687b      	ldr	r3, [r7, #4]
 800e0f4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e0f6:	2b00      	cmp	r3, #0
 800e0f8:	d004      	beq.n	800e104 <tcp_abandon+0xdc>
      tcp_segs_free(pcb->unacked);
 800e0fa:	687b      	ldr	r3, [r7, #4]
 800e0fc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e0fe:	4618      	mov	r0, r3
 800e100:	f000 fc85 	bl	800ea0e <tcp_segs_free>
    if (pcb->unsent != NULL) {
 800e104:	687b      	ldr	r3, [r7, #4]
 800e106:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e108:	2b00      	cmp	r3, #0
 800e10a:	d004      	beq.n	800e116 <tcp_abandon+0xee>
      tcp_segs_free(pcb->unsent);
 800e10c:	687b      	ldr	r3, [r7, #4]
 800e10e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e110:	4618      	mov	r0, r3
 800e112:	f000 fc7c 	bl	800ea0e <tcp_segs_free>
    if (pcb->ooseq != NULL) {
 800e116:	687b      	ldr	r3, [r7, #4]
 800e118:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e11a:	2b00      	cmp	r3, #0
 800e11c:	d004      	beq.n	800e128 <tcp_abandon+0x100>
      tcp_segs_free(pcb->ooseq);
 800e11e:	687b      	ldr	r3, [r7, #4]
 800e120:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e122:	4618      	mov	r0, r3
 800e124:	f000 fc73 	bl	800ea0e <tcp_segs_free>
    if (send_rst) {
 800e128:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e12a:	2b00      	cmp	r3, #0
 800e12c:	d00c      	beq.n	800e148 <tcp_abandon+0x120>
      tcp_rst(seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 800e12e:	687a      	ldr	r2, [r7, #4]
 800e130:	687b      	ldr	r3, [r7, #4]
 800e132:	1d19      	adds	r1, r3, #4
 800e134:	687b      	ldr	r3, [r7, #4]
 800e136:	8b1b      	ldrh	r3, [r3, #24]
 800e138:	9301      	str	r3, [sp, #4]
 800e13a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800e13c:	9300      	str	r3, [sp, #0]
 800e13e:	460b      	mov	r3, r1
 800e140:	6979      	ldr	r1, [r7, #20]
 800e142:	69b8      	ldr	r0, [r7, #24]
 800e144:	f003 fea6 	bl	8011e94 <tcp_rst>
    last_state = pcb->state;
 800e148:	687b      	ldr	r3, [r7, #4]
 800e14a:	7d1b      	ldrb	r3, [r3, #20]
 800e14c:	72fb      	strb	r3, [r7, #11]
    memp_free(MEMP_TCP_PCB, pcb);
 800e14e:	6879      	ldr	r1, [r7, #4]
 800e150:	2001      	movs	r0, #1
 800e152:	f7fe fdab 	bl	800ccac <memp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 800e156:	693b      	ldr	r3, [r7, #16]
 800e158:	2b00      	cmp	r3, #0
 800e15a:	d004      	beq.n	800e166 <tcp_abandon+0x13e>
 800e15c:	693b      	ldr	r3, [r7, #16]
 800e15e:	f06f 010c 	mvn.w	r1, #12
 800e162:	68f8      	ldr	r0, [r7, #12]
 800e164:	4798      	blx	r3
}
 800e166:	bf00      	nop
 800e168:	3728      	adds	r7, #40	; 0x28
 800e16a:	46bd      	mov	sp, r7
 800e16c:	bd80      	pop	{r7, pc}
 800e16e:	bf00      	nop
 800e170:	08019490 	.word	0x08019490
 800e174:	08019528 	.word	0x08019528
 800e178:	080194cc 	.word	0x080194cc
 800e17c:	2000b5c0 	.word	0x2000b5c0
 800e180:	2000b5bc 	.word	0x2000b5bc
 800e184:	2000b5b0 	.word	0x2000b5b0
 800e188:	2000b5ac 	.word	0x2000b5ac

0800e18c <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 800e18c:	b580      	push	{r7, lr}
 800e18e:	b082      	sub	sp, #8
 800e190:	af00      	add	r7, sp, #0
 800e192:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 800e194:	2101      	movs	r1, #1
 800e196:	6878      	ldr	r0, [r7, #4]
 800e198:	f7ff ff46 	bl	800e028 <tcp_abandon>
}
 800e19c:	bf00      	nop
 800e19e:	3708      	adds	r7, #8
 800e1a0:	46bd      	mov	sp, r7
 800e1a2:	bd80      	pop	{r7, pc}

0800e1a4 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 800e1a4:	b580      	push	{r7, lr}
 800e1a6:	b084      	sub	sp, #16
 800e1a8:	af00      	add	r7, sp, #0
 800e1aa:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 800e1ac:	687b      	ldr	r3, [r7, #4]
 800e1ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e1b0:	687a      	ldr	r2, [r7, #4]
 800e1b2:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 800e1b4:	4413      	add	r3, r2
 800e1b6:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 800e1b8:	687b      	ldr	r3, [r7, #4]
 800e1ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e1bc:	687a      	ldr	r2, [r7, #4]
 800e1be:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 800e1c0:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 800e1c4:	bf28      	it	cs
 800e1c6:	f44f 6286 	movcs.w	r2, #1072	; 0x430
 800e1ca:	b292      	uxth	r2, r2
 800e1cc:	4413      	add	r3, r2
 800e1ce:	68fa      	ldr	r2, [r7, #12]
 800e1d0:	1ad3      	subs	r3, r2, r3
 800e1d2:	2b00      	cmp	r3, #0
 800e1d4:	db08      	blt.n	800e1e8 <tcp_update_rcv_ann_wnd+0x44>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 800e1d6:	687b      	ldr	r3, [r7, #4]
 800e1d8:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800e1da:	687b      	ldr	r3, [r7, #4]
 800e1dc:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 800e1de:	687b      	ldr	r3, [r7, #4]
 800e1e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e1e2:	68fa      	ldr	r2, [r7, #12]
 800e1e4:	1ad3      	subs	r3, r2, r3
 800e1e6:	e020      	b.n	800e22a <tcp_update_rcv_ann_wnd+0x86>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 800e1e8:	687b      	ldr	r3, [r7, #4]
 800e1ea:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e1ec:	687b      	ldr	r3, [r7, #4]
 800e1ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e1f0:	1ad3      	subs	r3, r2, r3
 800e1f2:	2b00      	cmp	r3, #0
 800e1f4:	dd03      	ble.n	800e1fe <tcp_update_rcv_ann_wnd+0x5a>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 800e1f6:	687b      	ldr	r3, [r7, #4]
 800e1f8:	2200      	movs	r2, #0
 800e1fa:	855a      	strh	r2, [r3, #42]	; 0x2a
 800e1fc:	e014      	b.n	800e228 <tcp_update_rcv_ann_wnd+0x84>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 800e1fe:	687b      	ldr	r3, [r7, #4]
 800e200:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e202:	687b      	ldr	r3, [r7, #4]
 800e204:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e206:	1ad3      	subs	r3, r2, r3
 800e208:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 800e20a:	68bb      	ldr	r3, [r7, #8]
 800e20c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e210:	d306      	bcc.n	800e220 <tcp_update_rcv_ann_wnd+0x7c>
 800e212:	4b08      	ldr	r3, [pc, #32]	; (800e234 <tcp_update_rcv_ann_wnd+0x90>)
 800e214:	f44f 7242 	mov.w	r2, #776	; 0x308
 800e218:	4907      	ldr	r1, [pc, #28]	; (800e238 <tcp_update_rcv_ann_wnd+0x94>)
 800e21a:	4808      	ldr	r0, [pc, #32]	; (800e23c <tcp_update_rcv_ann_wnd+0x98>)
 800e21c:	f009 fd76 	bl	8017d0c <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 800e220:	68bb      	ldr	r3, [r7, #8]
 800e222:	b29a      	uxth	r2, r3
 800e224:	687b      	ldr	r3, [r7, #4]
 800e226:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 800e228:	2300      	movs	r3, #0
  }
}
 800e22a:	4618      	mov	r0, r3
 800e22c:	3710      	adds	r7, #16
 800e22e:	46bd      	mov	sp, r7
 800e230:	bd80      	pop	{r7, pc}
 800e232:	bf00      	nop
 800e234:	08019490 	.word	0x08019490
 800e238:	080195a8 	.word	0x080195a8
 800e23c:	080194cc 	.word	0x080194cc

0800e240 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 800e240:	b580      	push	{r7, lr}
 800e242:	b084      	sub	sp, #16
 800e244:	af00      	add	r7, sp, #0
 800e246:	6078      	str	r0, [r7, #4]
 800e248:	460b      	mov	r3, r1
 800e24a:	807b      	strh	r3, [r7, #2]
  int wnd_inflation;

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 800e24c:	687b      	ldr	r3, [r7, #4]
 800e24e:	7d1b      	ldrb	r3, [r3, #20]
 800e250:	2b01      	cmp	r3, #1
 800e252:	d106      	bne.n	800e262 <tcp_recved+0x22>
 800e254:	4b23      	ldr	r3, [pc, #140]	; (800e2e4 <tcp_recved+0xa4>)
 800e256:	f44f 7248 	mov.w	r2, #800	; 0x320
 800e25a:	4923      	ldr	r1, [pc, #140]	; (800e2e8 <tcp_recved+0xa8>)
 800e25c:	4823      	ldr	r0, [pc, #140]	; (800e2ec <tcp_recved+0xac>)
 800e25e:	f009 fd55 	bl	8017d0c <iprintf>
    pcb->state != LISTEN);

  pcb->rcv_wnd += len;
 800e262:	687b      	ldr	r3, [r7, #4]
 800e264:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800e266:	887b      	ldrh	r3, [r7, #2]
 800e268:	4413      	add	r3, r2
 800e26a:	b29a      	uxth	r2, r3
 800e26c:	687b      	ldr	r3, [r7, #4]
 800e26e:	851a      	strh	r2, [r3, #40]	; 0x28
  if (pcb->rcv_wnd > TCP_WND_MAX(pcb)) {
 800e270:	687b      	ldr	r3, [r7, #4]
 800e272:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e274:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800e278:	d904      	bls.n	800e284 <tcp_recved+0x44>
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 800e27a:	687b      	ldr	r3, [r7, #4]
 800e27c:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800e280:	851a      	strh	r2, [r3, #40]	; 0x28
 800e282:	e017      	b.n	800e2b4 <tcp_recved+0x74>
  } else if (pcb->rcv_wnd == 0) {
 800e284:	687b      	ldr	r3, [r7, #4]
 800e286:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e288:	2b00      	cmp	r3, #0
 800e28a:	d113      	bne.n	800e2b4 <tcp_recved+0x74>
    /* rcv_wnd overflowed */
    if ((pcb->state == CLOSE_WAIT) || (pcb->state == LAST_ACK)) {
 800e28c:	687b      	ldr	r3, [r7, #4]
 800e28e:	7d1b      	ldrb	r3, [r3, #20]
 800e290:	2b07      	cmp	r3, #7
 800e292:	d003      	beq.n	800e29c <tcp_recved+0x5c>
 800e294:	687b      	ldr	r3, [r7, #4]
 800e296:	7d1b      	ldrb	r3, [r3, #20]
 800e298:	2b09      	cmp	r3, #9
 800e29a:	d104      	bne.n	800e2a6 <tcp_recved+0x66>
      /* In passive close, we allow this, since the FIN bit is added to rcv_wnd
         by the stack itself, since it is not mandatory for an application
         to call tcp_recved() for the FIN bit, but e.g. the netconn API does so. */
      pcb->rcv_wnd = TCP_WND_MAX(pcb);
 800e29c:	687b      	ldr	r3, [r7, #4]
 800e29e:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800e2a2:	851a      	strh	r2, [r3, #40]	; 0x28
 800e2a4:	e006      	b.n	800e2b4 <tcp_recved+0x74>
    } else {
      LWIP_ASSERT("tcp_recved: len wrapped rcv_wnd\n", 0);
 800e2a6:	4b0f      	ldr	r3, [pc, #60]	; (800e2e4 <tcp_recved+0xa4>)
 800e2a8:	f240 322d 	movw	r2, #813	; 0x32d
 800e2ac:	4910      	ldr	r1, [pc, #64]	; (800e2f0 <tcp_recved+0xb0>)
 800e2ae:	480f      	ldr	r0, [pc, #60]	; (800e2ec <tcp_recved+0xac>)
 800e2b0:	f009 fd2c 	bl	8017d0c <iprintf>
    }
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 800e2b4:	6878      	ldr	r0, [r7, #4]
 800e2b6:	f7ff ff75 	bl	800e1a4 <tcp_update_rcv_ann_wnd>
 800e2ba:	4603      	mov	r3, r0
 800e2bc:	60fb      	str	r3, [r7, #12]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 800e2be:	68fb      	ldr	r3, [r7, #12]
 800e2c0:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 800e2c4:	db09      	blt.n	800e2da <tcp_recved+0x9a>
    tcp_ack_now(pcb);
 800e2c6:	687b      	ldr	r3, [r7, #4]
 800e2c8:	7e9b      	ldrb	r3, [r3, #26]
 800e2ca:	f043 0302 	orr.w	r3, r3, #2
 800e2ce:	b2da      	uxtb	r2, r3
 800e2d0:	687b      	ldr	r3, [r7, #4]
 800e2d2:	769a      	strb	r2, [r3, #26]
    tcp_output(pcb);
 800e2d4:	6878      	ldr	r0, [r7, #4]
 800e2d6:	f003 fb53 	bl	8011980 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
         len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 800e2da:	bf00      	nop
 800e2dc:	3710      	adds	r7, #16
 800e2de:	46bd      	mov	sp, r7
 800e2e0:	bd80      	pop	{r7, pc}
 800e2e2:	bf00      	nop
 800e2e4:	08019490 	.word	0x08019490
 800e2e8:	080195c4 	.word	0x080195c4
 800e2ec:	080194cc 	.word	0x080194cc
 800e2f0:	080195ec 	.word	0x080195ec

0800e2f4 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 800e2f4:	b5b0      	push	{r4, r5, r7, lr}
 800e2f6:	b08c      	sub	sp, #48	; 0x30
 800e2f8:	af02      	add	r7, sp, #8
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 800e2fa:	2300      	movs	r3, #0
 800e2fc:	777b      	strb	r3, [r7, #29]

  ++tcp_ticks;
 800e2fe:	4b97      	ldr	r3, [pc, #604]	; (800e55c <tcp_slowtmr+0x268>)
 800e300:	681b      	ldr	r3, [r3, #0]
 800e302:	3301      	adds	r3, #1
 800e304:	4a95      	ldr	r2, [pc, #596]	; (800e55c <tcp_slowtmr+0x268>)
 800e306:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 800e308:	4b95      	ldr	r3, [pc, #596]	; (800e560 <tcp_slowtmr+0x26c>)
 800e30a:	781b      	ldrb	r3, [r3, #0]
 800e30c:	3301      	adds	r3, #1
 800e30e:	b2da      	uxtb	r2, r3
 800e310:	4b93      	ldr	r3, [pc, #588]	; (800e560 <tcp_slowtmr+0x26c>)
 800e312:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 800e314:	2300      	movs	r3, #0
 800e316:	623b      	str	r3, [r7, #32]
  pcb = tcp_active_pcbs;
 800e318:	4b92      	ldr	r3, [pc, #584]	; (800e564 <tcp_slowtmr+0x270>)
 800e31a:	681b      	ldr	r3, [r3, #0]
 800e31c:	627b      	str	r3, [r7, #36]	; 0x24
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 800e31e:	e227      	b.n	800e770 <tcp_slowtmr+0x47c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 800e320:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e322:	7d1b      	ldrb	r3, [r3, #20]
 800e324:	2b00      	cmp	r3, #0
 800e326:	d106      	bne.n	800e336 <tcp_slowtmr+0x42>
 800e328:	4b8f      	ldr	r3, [pc, #572]	; (800e568 <tcp_slowtmr+0x274>)
 800e32a:	f44f 727c 	mov.w	r2, #1008	; 0x3f0
 800e32e:	498f      	ldr	r1, [pc, #572]	; (800e56c <tcp_slowtmr+0x278>)
 800e330:	488f      	ldr	r0, [pc, #572]	; (800e570 <tcp_slowtmr+0x27c>)
 800e332:	f009 fceb 	bl	8017d0c <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 800e336:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e338:	7d1b      	ldrb	r3, [r3, #20]
 800e33a:	2b01      	cmp	r3, #1
 800e33c:	d106      	bne.n	800e34c <tcp_slowtmr+0x58>
 800e33e:	4b8a      	ldr	r3, [pc, #552]	; (800e568 <tcp_slowtmr+0x274>)
 800e340:	f240 32f1 	movw	r2, #1009	; 0x3f1
 800e344:	498b      	ldr	r1, [pc, #556]	; (800e574 <tcp_slowtmr+0x280>)
 800e346:	488a      	ldr	r0, [pc, #552]	; (800e570 <tcp_slowtmr+0x27c>)
 800e348:	f009 fce0 	bl	8017d0c <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 800e34c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e34e:	7d1b      	ldrb	r3, [r3, #20]
 800e350:	2b0a      	cmp	r3, #10
 800e352:	d106      	bne.n	800e362 <tcp_slowtmr+0x6e>
 800e354:	4b84      	ldr	r3, [pc, #528]	; (800e568 <tcp_slowtmr+0x274>)
 800e356:	f240 32f2 	movw	r2, #1010	; 0x3f2
 800e35a:	4987      	ldr	r1, [pc, #540]	; (800e578 <tcp_slowtmr+0x284>)
 800e35c:	4884      	ldr	r0, [pc, #528]	; (800e570 <tcp_slowtmr+0x27c>)
 800e35e:	f009 fcd5 	bl	8017d0c <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 800e362:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e364:	7f5a      	ldrb	r2, [r3, #29]
 800e366:	4b7e      	ldr	r3, [pc, #504]	; (800e560 <tcp_slowtmr+0x26c>)
 800e368:	781b      	ldrb	r3, [r3, #0]
 800e36a:	429a      	cmp	r2, r3
 800e36c:	d103      	bne.n	800e376 <tcp_slowtmr+0x82>
      /* skip this pcb, we have already processed it */
      pcb = pcb->next;
 800e36e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e370:	68db      	ldr	r3, [r3, #12]
 800e372:	627b      	str	r3, [r7, #36]	; 0x24
      continue;
 800e374:	e1fc      	b.n	800e770 <tcp_slowtmr+0x47c>
    }
    pcb->last_timer = tcp_timer_ctr;
 800e376:	4b7a      	ldr	r3, [pc, #488]	; (800e560 <tcp_slowtmr+0x26c>)
 800e378:	781a      	ldrb	r2, [r3, #0]
 800e37a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e37c:	775a      	strb	r2, [r3, #29]

    pcb_remove = 0;
 800e37e:	2300      	movs	r3, #0
 800e380:	77fb      	strb	r3, [r7, #31]
    pcb_reset = 0;
 800e382:	2300      	movs	r3, #0
 800e384:	77bb      	strb	r3, [r7, #30]

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 800e386:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e388:	7d1b      	ldrb	r3, [r3, #20]
 800e38a:	2b02      	cmp	r3, #2
 800e38c:	d108      	bne.n	800e3a0 <tcp_slowtmr+0xac>
 800e38e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e390:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800e394:	2b05      	cmp	r3, #5
 800e396:	d903      	bls.n	800e3a0 <tcp_slowtmr+0xac>
      ++pcb_remove;
 800e398:	7ffb      	ldrb	r3, [r7, #31]
 800e39a:	3301      	adds	r3, #1
 800e39c:	77fb      	strb	r3, [r7, #31]
 800e39e:	e0a2      	b.n	800e4e6 <tcp_slowtmr+0x1f2>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    }
    else if (pcb->nrtx >= TCP_MAXRTX) {
 800e3a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e3a2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800e3a6:	2b0b      	cmp	r3, #11
 800e3a8:	d903      	bls.n	800e3b2 <tcp_slowtmr+0xbe>
      ++pcb_remove;
 800e3aa:	7ffb      	ldrb	r3, [r7, #31]
 800e3ac:	3301      	adds	r3, #1
 800e3ae:	77fb      	strb	r3, [r7, #31]
 800e3b0:	e099      	b.n	800e4e6 <tcp_slowtmr+0x1f2>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 800e3b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e3b4:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 800e3b8:	2b00      	cmp	r3, #0
 800e3ba:	d032      	beq.n	800e422 <tcp_slowtmr+0x12e>
        /* If snd_wnd is zero, use persist timer to send 1 byte probes
         * instead of using the standard retransmission mechanism. */
        u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff-1];
 800e3bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e3be:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 800e3c2:	3b01      	subs	r3, #1
 800e3c4:	4a6d      	ldr	r2, [pc, #436]	; (800e57c <tcp_slowtmr+0x288>)
 800e3c6:	5cd3      	ldrb	r3, [r2, r3]
 800e3c8:	74fb      	strb	r3, [r7, #19]
        if (pcb->persist_cnt < backoff_cnt) {
 800e3ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e3cc:	f893 3094 	ldrb.w	r3, [r3, #148]	; 0x94
 800e3d0:	7cfa      	ldrb	r2, [r7, #19]
 800e3d2:	429a      	cmp	r2, r3
 800e3d4:	d907      	bls.n	800e3e6 <tcp_slowtmr+0xf2>
          pcb->persist_cnt++;
 800e3d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e3d8:	f893 3094 	ldrb.w	r3, [r3, #148]	; 0x94
 800e3dc:	3301      	adds	r3, #1
 800e3de:	b2da      	uxtb	r2, r3
 800e3e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e3e2:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
        }
        if (pcb->persist_cnt >= backoff_cnt) {
 800e3e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e3e8:	f893 3094 	ldrb.w	r3, [r3, #148]	; 0x94
 800e3ec:	7cfa      	ldrb	r2, [r7, #19]
 800e3ee:	429a      	cmp	r2, r3
 800e3f0:	d879      	bhi.n	800e4e6 <tcp_slowtmr+0x1f2>
          if (tcp_zero_window_probe(pcb) == ERR_OK) {
 800e3f2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e3f4:	f003 fede 	bl	80121b4 <tcp_zero_window_probe>
 800e3f8:	4603      	mov	r3, r0
 800e3fa:	2b00      	cmp	r3, #0
 800e3fc:	d173      	bne.n	800e4e6 <tcp_slowtmr+0x1f2>
            pcb->persist_cnt = 0;
 800e3fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e400:	2200      	movs	r2, #0
 800e402:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
            if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 800e406:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e408:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 800e40c:	2b06      	cmp	r3, #6
 800e40e:	d86a      	bhi.n	800e4e6 <tcp_slowtmr+0x1f2>
              pcb->persist_backoff++;
 800e410:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e412:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 800e416:	3301      	adds	r3, #1
 800e418:	b2da      	uxtb	r2, r3
 800e41a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e41c:	f883 2095 	strb.w	r2, [r3, #149]	; 0x95
 800e420:	e061      	b.n	800e4e6 <tcp_slowtmr+0x1f2>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if (pcb->rtime >= 0) {
 800e422:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e424:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800e428:	2b00      	cmp	r3, #0
 800e42a:	db08      	blt.n	800e43e <tcp_slowtmr+0x14a>
          ++pcb->rtime;
 800e42c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e42e:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800e432:	b29b      	uxth	r3, r3
 800e434:	3301      	adds	r3, #1
 800e436:	b29b      	uxth	r3, r3
 800e438:	b21a      	sxth	r2, r3
 800e43a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e43c:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->unacked != NULL && pcb->rtime >= pcb->rto) {
 800e43e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e440:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e442:	2b00      	cmp	r3, #0
 800e444:	d04f      	beq.n	800e4e6 <tcp_slowtmr+0x1f2>
 800e446:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e448:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 800e44c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e44e:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800e452:	429a      	cmp	r2, r3
 800e454:	db47      	blt.n	800e4e6 <tcp_slowtmr+0x1f2>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));

          /* Double retransmission time-out unless we are trying to
           * connect to somebody (i.e., we are in SYN_SENT). */
          if (pcb->state != SYN_SENT) {
 800e456:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e458:	7d1b      	ldrb	r3, [r3, #20]
 800e45a:	2b02      	cmp	r3, #2
 800e45c:	d018      	beq.n	800e490 <tcp_slowtmr+0x19c>
            u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff)-1);
 800e45e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e460:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800e464:	2b0c      	cmp	r3, #12
 800e466:	bf28      	it	cs
 800e468:	230c      	movcs	r3, #12
 800e46a:	75fb      	strb	r3, [r7, #23]
            pcb->rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 800e46c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e46e:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800e472:	10db      	asrs	r3, r3, #3
 800e474:	b21b      	sxth	r3, r3
 800e476:	461a      	mov	r2, r3
 800e478:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e47a:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800e47e:	4413      	add	r3, r2
 800e480:	7dfa      	ldrb	r2, [r7, #23]
 800e482:	493f      	ldr	r1, [pc, #252]	; (800e580 <tcp_slowtmr+0x28c>)
 800e484:	5c8a      	ldrb	r2, [r1, r2]
 800e486:	4093      	lsls	r3, r2
 800e488:	b21a      	sxth	r2, r3
 800e48a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e48c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
          }

          /* Reset the retransmission timer. */
          pcb->rtime = 0;
 800e490:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e492:	2200      	movs	r2, #0
 800e494:	861a      	strh	r2, [r3, #48]	; 0x30

          /* Reduce congestion window and ssthresh. */
          eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 800e496:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e498:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800e49c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e49e:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800e4a2:	4293      	cmp	r3, r2
 800e4a4:	bf28      	it	cs
 800e4a6:	4613      	movcs	r3, r2
 800e4a8:	82bb      	strh	r3, [r7, #20]
          pcb->ssthresh = eff_wnd >> 1;
 800e4aa:	8abb      	ldrh	r3, [r7, #20]
 800e4ac:	085b      	lsrs	r3, r3, #1
 800e4ae:	b29a      	uxth	r2, r3
 800e4b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e4b2:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
          if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 800e4b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e4b8:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800e4bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e4be:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e4c0:	005b      	lsls	r3, r3, #1
 800e4c2:	b29b      	uxth	r3, r3
 800e4c4:	429a      	cmp	r2, r3
 800e4c6:	d206      	bcs.n	800e4d6 <tcp_slowtmr+0x1e2>
            pcb->ssthresh = (pcb->mss << 1);
 800e4c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e4ca:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e4cc:	005b      	lsls	r3, r3, #1
 800e4ce:	b29a      	uxth	r2, r3
 800e4d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e4d2:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
          }
          pcb->cwnd = pcb->mss;
 800e4d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e4d8:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 800e4da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e4dc:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          /* The following needs to be called AFTER cwnd is set to one
             mss - STJ */
          tcp_rexmit_rto(pcb);
 800e4e0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e4e2:	f003 fd4d 	bl	8011f80 <tcp_rexmit_rto>
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 800e4e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e4e8:	7d1b      	ldrb	r3, [r3, #20]
 800e4ea:	2b06      	cmp	r3, #6
 800e4ec:	d10f      	bne.n	800e50e <tcp_slowtmr+0x21a>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 800e4ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e4f0:	7e9b      	ldrb	r3, [r3, #26]
 800e4f2:	f003 0310 	and.w	r3, r3, #16
 800e4f6:	2b00      	cmp	r3, #0
 800e4f8:	d009      	beq.n	800e50e <tcp_slowtmr+0x21a>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 800e4fa:	4b18      	ldr	r3, [pc, #96]	; (800e55c <tcp_slowtmr+0x268>)
 800e4fc:	681a      	ldr	r2, [r3, #0]
 800e4fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e500:	6a1b      	ldr	r3, [r3, #32]
 800e502:	1ad3      	subs	r3, r2, r3
 800e504:	2b28      	cmp	r3, #40	; 0x28
 800e506:	d902      	bls.n	800e50e <tcp_slowtmr+0x21a>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 800e508:	7ffb      	ldrb	r3, [r7, #31]
 800e50a:	3301      	adds	r3, #1
 800e50c:	77fb      	strb	r3, [r7, #31]
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800e50e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e510:	7a1b      	ldrb	r3, [r3, #8]
 800e512:	f003 0308 	and.w	r3, r3, #8
 800e516:	2b00      	cmp	r3, #0
 800e518:	d05d      	beq.n	800e5d6 <tcp_slowtmr+0x2e2>
       ((pcb->state == ESTABLISHED) ||
 800e51a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e51c:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800e51e:	2b04      	cmp	r3, #4
 800e520:	d003      	beq.n	800e52a <tcp_slowtmr+0x236>
        (pcb->state == CLOSE_WAIT))) {
 800e522:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e524:	7d1b      	ldrb	r3, [r3, #20]
       ((pcb->state == ESTABLISHED) ||
 800e526:	2b07      	cmp	r3, #7
 800e528:	d155      	bne.n	800e5d6 <tcp_slowtmr+0x2e2>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800e52a:	4b0c      	ldr	r3, [pc, #48]	; (800e55c <tcp_slowtmr+0x268>)
 800e52c:	681a      	ldr	r2, [r3, #0]
 800e52e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e530:	6a1b      	ldr	r3, [r3, #32]
 800e532:	1ad2      	subs	r2, r2, r3
         (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL)
 800e534:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e536:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e53a:	f503 2324 	add.w	r3, r3, #671744	; 0xa4000
 800e53e:	f603 43b8 	addw	r3, r3, #3256	; 0xcb8
 800e542:	4910      	ldr	r1, [pc, #64]	; (800e584 <tcp_slowtmr+0x290>)
 800e544:	fba1 1303 	umull	r1, r3, r1, r3
 800e548:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800e54a:	429a      	cmp	r2, r3
 800e54c:	d91c      	bls.n	800e588 <tcp_slowtmr+0x294>
      {
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print(TCP_DEBUG, &pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 800e54e:	7ffb      	ldrb	r3, [r7, #31]
 800e550:	3301      	adds	r3, #1
 800e552:	77fb      	strb	r3, [r7, #31]
        ++pcb_reset;
 800e554:	7fbb      	ldrb	r3, [r7, #30]
 800e556:	3301      	adds	r3, #1
 800e558:	77bb      	strb	r3, [r7, #30]
 800e55a:	e03c      	b.n	800e5d6 <tcp_slowtmr+0x2e2>
 800e55c:	2000b5b4 	.word	0x2000b5b4
 800e560:	20004b6e 	.word	0x20004b6e
 800e564:	2000b5b0 	.word	0x2000b5b0
 800e568:	08019490 	.word	0x08019490
 800e56c:	08019640 	.word	0x08019640
 800e570:	080194cc 	.word	0x080194cc
 800e574:	0801966c 	.word	0x0801966c
 800e578:	08019698 	.word	0x08019698
 800e57c:	0801ae54 	.word	0x0801ae54
 800e580:	0801ae44 	.word	0x0801ae44
 800e584:	10624dd3 	.word	0x10624dd3
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800e588:	4b97      	ldr	r3, [pc, #604]	; (800e7e8 <tcp_slowtmr+0x4f4>)
 800e58a:	681a      	ldr	r2, [r3, #0]
 800e58c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e58e:	6a1b      	ldr	r3, [r3, #32]
 800e590:	1ad2      	subs	r2, r2, r3
                (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 800e592:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e594:	f8d3 1090 	ldr.w	r1, [r3, #144]	; 0x90
 800e598:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e59a:	f893 3096 	ldrb.w	r3, [r3, #150]	; 0x96
 800e59e:	4618      	mov	r0, r3
 800e5a0:	4b92      	ldr	r3, [pc, #584]	; (800e7ec <tcp_slowtmr+0x4f8>)
 800e5a2:	fb03 f300 	mul.w	r3, r3, r0
 800e5a6:	440b      	add	r3, r1
                / TCP_SLOW_INTERVAL)
 800e5a8:	4991      	ldr	r1, [pc, #580]	; (800e7f0 <tcp_slowtmr+0x4fc>)
 800e5aa:	fba1 1303 	umull	r1, r3, r1, r3
 800e5ae:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800e5b0:	429a      	cmp	r2, r3
 800e5b2:	d910      	bls.n	800e5d6 <tcp_slowtmr+0x2e2>
      {
        err = tcp_keepalive(pcb);
 800e5b4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e5b6:	f003 fdc0 	bl	801213a <tcp_keepalive>
 800e5ba:	4603      	mov	r3, r0
 800e5bc:	777b      	strb	r3, [r7, #29]
        if (err == ERR_OK) {
 800e5be:	f997 301d 	ldrsb.w	r3, [r7, #29]
 800e5c2:	2b00      	cmp	r3, #0
 800e5c4:	d107      	bne.n	800e5d6 <tcp_slowtmr+0x2e2>
          pcb->keep_cnt_sent++;
 800e5c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e5c8:	f893 3096 	ldrb.w	r3, [r3, #150]	; 0x96
 800e5cc:	3301      	adds	r3, #1
 800e5ce:	b2da      	uxtb	r2, r3
 800e5d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e5d2:	f883 2096 	strb.w	r2, [r3, #150]	; 0x96

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 800e5d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e5d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e5da:	2b00      	cmp	r3, #0
 800e5dc:	d016      	beq.n	800e60c <tcp_slowtmr+0x318>
        (u32_t)tcp_ticks - pcb->tmr >= pcb->rto * TCP_OOSEQ_TIMEOUT) {
 800e5de:	4b82      	ldr	r3, [pc, #520]	; (800e7e8 <tcp_slowtmr+0x4f4>)
 800e5e0:	681a      	ldr	r2, [r3, #0]
 800e5e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e5e4:	6a1b      	ldr	r3, [r3, #32]
 800e5e6:	1ad2      	subs	r2, r2, r3
 800e5e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e5ea:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800e5ee:	4619      	mov	r1, r3
 800e5f0:	460b      	mov	r3, r1
 800e5f2:	005b      	lsls	r3, r3, #1
 800e5f4:	440b      	add	r3, r1
 800e5f6:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 800e5f8:	429a      	cmp	r2, r3
 800e5fa:	d307      	bcc.n	800e60c <tcp_slowtmr+0x318>
      tcp_segs_free(pcb->ooseq);
 800e5fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e5fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e600:	4618      	mov	r0, r3
 800e602:	f000 fa04 	bl	800ea0e <tcp_segs_free>
      pcb->ooseq = NULL;
 800e606:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e608:	2200      	movs	r2, #0
 800e60a:	671a      	str	r2, [r3, #112]	; 0x70
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 800e60c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e60e:	7d1b      	ldrb	r3, [r3, #20]
 800e610:	2b03      	cmp	r3, #3
 800e612:	d109      	bne.n	800e628 <tcp_slowtmr+0x334>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800e614:	4b74      	ldr	r3, [pc, #464]	; (800e7e8 <tcp_slowtmr+0x4f4>)
 800e616:	681a      	ldr	r2, [r3, #0]
 800e618:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e61a:	6a1b      	ldr	r3, [r3, #32]
 800e61c:	1ad3      	subs	r3, r2, r3
 800e61e:	2b28      	cmp	r3, #40	; 0x28
 800e620:	d902      	bls.n	800e628 <tcp_slowtmr+0x334>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 800e622:	7ffb      	ldrb	r3, [r7, #31]
 800e624:	3301      	adds	r3, #1
 800e626:	77fb      	strb	r3, [r7, #31]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 800e628:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e62a:	7d1b      	ldrb	r3, [r3, #20]
 800e62c:	2b09      	cmp	r3, #9
 800e62e:	d109      	bne.n	800e644 <tcp_slowtmr+0x350>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800e630:	4b6d      	ldr	r3, [pc, #436]	; (800e7e8 <tcp_slowtmr+0x4f4>)
 800e632:	681a      	ldr	r2, [r3, #0]
 800e634:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e636:	6a1b      	ldr	r3, [r3, #32]
 800e638:	1ad3      	subs	r3, r2, r3
 800e63a:	2bf0      	cmp	r3, #240	; 0xf0
 800e63c:	d902      	bls.n	800e644 <tcp_slowtmr+0x350>
        ++pcb_remove;
 800e63e:	7ffb      	ldrb	r3, [r7, #31]
 800e640:	3301      	adds	r3, #1
 800e642:	77fb      	strb	r3, [r7, #31]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800e644:	7ffb      	ldrb	r3, [r7, #31]
 800e646:	2b00      	cmp	r3, #0
 800e648:	d05d      	beq.n	800e706 <tcp_slowtmr+0x412>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 800e64a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e64c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e650:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 800e652:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e654:	f000 fb84 	bl	800ed60 <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 800e658:	6a3b      	ldr	r3, [r7, #32]
 800e65a:	2b00      	cmp	r3, #0
 800e65c:	d010      	beq.n	800e680 <tcp_slowtmr+0x38c>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 800e65e:	4b65      	ldr	r3, [pc, #404]	; (800e7f4 <tcp_slowtmr+0x500>)
 800e660:	681b      	ldr	r3, [r3, #0]
 800e662:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e664:	429a      	cmp	r2, r3
 800e666:	d106      	bne.n	800e676 <tcp_slowtmr+0x382>
 800e668:	4b63      	ldr	r3, [pc, #396]	; (800e7f8 <tcp_slowtmr+0x504>)
 800e66a:	f240 4289 	movw	r2, #1161	; 0x489
 800e66e:	4963      	ldr	r1, [pc, #396]	; (800e7fc <tcp_slowtmr+0x508>)
 800e670:	4863      	ldr	r0, [pc, #396]	; (800e800 <tcp_slowtmr+0x50c>)
 800e672:	f009 fb4b 	bl	8017d0c <iprintf>
        prev->next = pcb->next;
 800e676:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e678:	68da      	ldr	r2, [r3, #12]
 800e67a:	6a3b      	ldr	r3, [r7, #32]
 800e67c:	60da      	str	r2, [r3, #12]
 800e67e:	e00f      	b.n	800e6a0 <tcp_slowtmr+0x3ac>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 800e680:	4b5c      	ldr	r3, [pc, #368]	; (800e7f4 <tcp_slowtmr+0x500>)
 800e682:	681b      	ldr	r3, [r3, #0]
 800e684:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e686:	429a      	cmp	r2, r3
 800e688:	d006      	beq.n	800e698 <tcp_slowtmr+0x3a4>
 800e68a:	4b5b      	ldr	r3, [pc, #364]	; (800e7f8 <tcp_slowtmr+0x504>)
 800e68c:	f240 428d 	movw	r2, #1165	; 0x48d
 800e690:	495c      	ldr	r1, [pc, #368]	; (800e804 <tcp_slowtmr+0x510>)
 800e692:	485b      	ldr	r0, [pc, #364]	; (800e800 <tcp_slowtmr+0x50c>)
 800e694:	f009 fb3a 	bl	8017d0c <iprintf>
        tcp_active_pcbs = pcb->next;
 800e698:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e69a:	68db      	ldr	r3, [r3, #12]
 800e69c:	4a55      	ldr	r2, [pc, #340]	; (800e7f4 <tcp_slowtmr+0x500>)
 800e69e:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 800e6a0:	7fbb      	ldrb	r3, [r7, #30]
 800e6a2:	2b00      	cmp	r3, #0
 800e6a4:	d010      	beq.n	800e6c8 <tcp_slowtmr+0x3d4>
        tcp_rst(pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800e6a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e6a8:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800e6aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e6ac:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800e6ae:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 800e6b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e6b2:	1d1d      	adds	r5, r3, #4
 800e6b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e6b6:	8adb      	ldrh	r3, [r3, #22]
 800e6b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e6ba:	8b12      	ldrh	r2, [r2, #24]
 800e6bc:	9201      	str	r2, [sp, #4]
 800e6be:	9300      	str	r3, [sp, #0]
 800e6c0:	462b      	mov	r3, r5
 800e6c2:	4622      	mov	r2, r4
 800e6c4:	f003 fbe6 	bl	8011e94 <tcp_rst>
                 pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 800e6c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e6ca:	691b      	ldr	r3, [r3, #16]
 800e6cc:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 800e6ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e6d0:	7d1b      	ldrb	r3, [r3, #20]
 800e6d2:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 800e6d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e6d6:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 800e6d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e6da:	68db      	ldr	r3, [r3, #12]
 800e6dc:	627b      	str	r3, [r7, #36]	; 0x24
      memp_free(MEMP_TCP_PCB, pcb2);
 800e6de:	6839      	ldr	r1, [r7, #0]
 800e6e0:	2001      	movs	r0, #1
 800e6e2:	f7fe fae3 	bl	800ccac <memp_free>

      tcp_active_pcbs_changed = 0;
 800e6e6:	4b48      	ldr	r3, [pc, #288]	; (800e808 <tcp_slowtmr+0x514>)
 800e6e8:	2200      	movs	r2, #0
 800e6ea:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 800e6ec:	68fb      	ldr	r3, [r7, #12]
 800e6ee:	2b00      	cmp	r3, #0
 800e6f0:	d004      	beq.n	800e6fc <tcp_slowtmr+0x408>
 800e6f2:	68fb      	ldr	r3, [r7, #12]
 800e6f4:	f06f 010c 	mvn.w	r1, #12
 800e6f8:	68b8      	ldr	r0, [r7, #8]
 800e6fa:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 800e6fc:	4b42      	ldr	r3, [pc, #264]	; (800e808 <tcp_slowtmr+0x514>)
 800e6fe:	781b      	ldrb	r3, [r3, #0]
 800e700:	2b00      	cmp	r3, #0
 800e702:	d035      	beq.n	800e770 <tcp_slowtmr+0x47c>
        goto tcp_slowtmr_start;
 800e704:	e606      	b.n	800e314 <tcp_slowtmr+0x20>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 800e706:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e708:	623b      	str	r3, [r7, #32]
      pcb = pcb->next;
 800e70a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e70c:	68db      	ldr	r3, [r3, #12]
 800e70e:	627b      	str	r3, [r7, #36]	; 0x24

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 800e710:	6a3b      	ldr	r3, [r7, #32]
 800e712:	7edb      	ldrb	r3, [r3, #27]
 800e714:	3301      	adds	r3, #1
 800e716:	b2da      	uxtb	r2, r3
 800e718:	6a3b      	ldr	r3, [r7, #32]
 800e71a:	76da      	strb	r2, [r3, #27]
      if (prev->polltmr >= prev->pollinterval) {
 800e71c:	6a3b      	ldr	r3, [r7, #32]
 800e71e:	7eda      	ldrb	r2, [r3, #27]
 800e720:	6a3b      	ldr	r3, [r7, #32]
 800e722:	7f1b      	ldrb	r3, [r3, #28]
 800e724:	429a      	cmp	r2, r3
 800e726:	d323      	bcc.n	800e770 <tcp_slowtmr+0x47c>
        prev->polltmr = 0;
 800e728:	6a3b      	ldr	r3, [r7, #32]
 800e72a:	2200      	movs	r2, #0
 800e72c:	76da      	strb	r2, [r3, #27]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 800e72e:	4b36      	ldr	r3, [pc, #216]	; (800e808 <tcp_slowtmr+0x514>)
 800e730:	2200      	movs	r2, #0
 800e732:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 800e734:	6a3b      	ldr	r3, [r7, #32]
 800e736:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e73a:	2b00      	cmp	r3, #0
 800e73c:	d00a      	beq.n	800e754 <tcp_slowtmr+0x460>
 800e73e:	6a3b      	ldr	r3, [r7, #32]
 800e740:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e744:	6a3a      	ldr	r2, [r7, #32]
 800e746:	6912      	ldr	r2, [r2, #16]
 800e748:	6a39      	ldr	r1, [r7, #32]
 800e74a:	4610      	mov	r0, r2
 800e74c:	4798      	blx	r3
 800e74e:	4603      	mov	r3, r0
 800e750:	777b      	strb	r3, [r7, #29]
 800e752:	e001      	b.n	800e758 <tcp_slowtmr+0x464>
 800e754:	2300      	movs	r3, #0
 800e756:	777b      	strb	r3, [r7, #29]
        if (tcp_active_pcbs_changed) {
 800e758:	4b2b      	ldr	r3, [pc, #172]	; (800e808 <tcp_slowtmr+0x514>)
 800e75a:	781b      	ldrb	r3, [r3, #0]
 800e75c:	2b00      	cmp	r3, #0
 800e75e:	d000      	beq.n	800e762 <tcp_slowtmr+0x46e>
          goto tcp_slowtmr_start;
 800e760:	e5d8      	b.n	800e314 <tcp_slowtmr+0x20>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 800e762:	f997 301d 	ldrsb.w	r3, [r7, #29]
 800e766:	2b00      	cmp	r3, #0
 800e768:	d102      	bne.n	800e770 <tcp_slowtmr+0x47c>
          tcp_output(prev);
 800e76a:	6a38      	ldr	r0, [r7, #32]
 800e76c:	f003 f908 	bl	8011980 <tcp_output>
  while (pcb != NULL) {
 800e770:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e772:	2b00      	cmp	r3, #0
 800e774:	f47f add4 	bne.w	800e320 <tcp_slowtmr+0x2c>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 800e778:	2300      	movs	r3, #0
 800e77a:	623b      	str	r3, [r7, #32]
  pcb = tcp_tw_pcbs;
 800e77c:	4b23      	ldr	r3, [pc, #140]	; (800e80c <tcp_slowtmr+0x518>)
 800e77e:	681b      	ldr	r3, [r3, #0]
 800e780:	627b      	str	r3, [r7, #36]	; 0x24
  while (pcb != NULL) {
 800e782:	e068      	b.n	800e856 <tcp_slowtmr+0x562>
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800e784:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e786:	7d1b      	ldrb	r3, [r3, #20]
 800e788:	2b0a      	cmp	r3, #10
 800e78a:	d006      	beq.n	800e79a <tcp_slowtmr+0x4a6>
 800e78c:	4b1a      	ldr	r3, [pc, #104]	; (800e7f8 <tcp_slowtmr+0x504>)
 800e78e:	f240 42bd 	movw	r2, #1213	; 0x4bd
 800e792:	491f      	ldr	r1, [pc, #124]	; (800e810 <tcp_slowtmr+0x51c>)
 800e794:	481a      	ldr	r0, [pc, #104]	; (800e800 <tcp_slowtmr+0x50c>)
 800e796:	f009 fab9 	bl	8017d0c <iprintf>
    pcb_remove = 0;
 800e79a:	2300      	movs	r3, #0
 800e79c:	77fb      	strb	r3, [r7, #31]

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800e79e:	4b12      	ldr	r3, [pc, #72]	; (800e7e8 <tcp_slowtmr+0x4f4>)
 800e7a0:	681a      	ldr	r2, [r3, #0]
 800e7a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e7a4:	6a1b      	ldr	r3, [r3, #32]
 800e7a6:	1ad3      	subs	r3, r2, r3
 800e7a8:	2bf0      	cmp	r3, #240	; 0xf0
 800e7aa:	d902      	bls.n	800e7b2 <tcp_slowtmr+0x4be>
      ++pcb_remove;
 800e7ac:	7ffb      	ldrb	r3, [r7, #31]
 800e7ae:	3301      	adds	r3, #1
 800e7b0:	77fb      	strb	r3, [r7, #31]
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800e7b2:	7ffb      	ldrb	r3, [r7, #31]
 800e7b4:	2b00      	cmp	r3, #0
 800e7b6:	d049      	beq.n	800e84c <tcp_slowtmr+0x558>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 800e7b8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e7ba:	f000 fad1 	bl	800ed60 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 800e7be:	6a3b      	ldr	r3, [r7, #32]
 800e7c0:	2b00      	cmp	r3, #0
 800e7c2:	d029      	beq.n	800e818 <tcp_slowtmr+0x524>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 800e7c4:	4b11      	ldr	r3, [pc, #68]	; (800e80c <tcp_slowtmr+0x518>)
 800e7c6:	681b      	ldr	r3, [r3, #0]
 800e7c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e7ca:	429a      	cmp	r2, r3
 800e7cc:	d106      	bne.n	800e7dc <tcp_slowtmr+0x4e8>
 800e7ce:	4b0a      	ldr	r3, [pc, #40]	; (800e7f8 <tcp_slowtmr+0x504>)
 800e7d0:	f240 42cb 	movw	r2, #1227	; 0x4cb
 800e7d4:	490f      	ldr	r1, [pc, #60]	; (800e814 <tcp_slowtmr+0x520>)
 800e7d6:	480a      	ldr	r0, [pc, #40]	; (800e800 <tcp_slowtmr+0x50c>)
 800e7d8:	f009 fa98 	bl	8017d0c <iprintf>
        prev->next = pcb->next;
 800e7dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e7de:	68da      	ldr	r2, [r3, #12]
 800e7e0:	6a3b      	ldr	r3, [r7, #32]
 800e7e2:	60da      	str	r2, [r3, #12]
 800e7e4:	e028      	b.n	800e838 <tcp_slowtmr+0x544>
 800e7e6:	bf00      	nop
 800e7e8:	2000b5b4 	.word	0x2000b5b4
 800e7ec:	000124f8 	.word	0x000124f8
 800e7f0:	10624dd3 	.word	0x10624dd3
 800e7f4:	2000b5b0 	.word	0x2000b5b0
 800e7f8:	08019490 	.word	0x08019490
 800e7fc:	080196c8 	.word	0x080196c8
 800e800:	080194cc 	.word	0x080194cc
 800e804:	080196f4 	.word	0x080196f4
 800e808:	2000b5ac 	.word	0x2000b5ac
 800e80c:	2000b5c0 	.word	0x2000b5c0
 800e810:	08019720 	.word	0x08019720
 800e814:	08019750 	.word	0x08019750
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 800e818:	4b12      	ldr	r3, [pc, #72]	; (800e864 <tcp_slowtmr+0x570>)
 800e81a:	681b      	ldr	r3, [r3, #0]
 800e81c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e81e:	429a      	cmp	r2, r3
 800e820:	d006      	beq.n	800e830 <tcp_slowtmr+0x53c>
 800e822:	4b11      	ldr	r3, [pc, #68]	; (800e868 <tcp_slowtmr+0x574>)
 800e824:	f240 42cf 	movw	r2, #1231	; 0x4cf
 800e828:	4910      	ldr	r1, [pc, #64]	; (800e86c <tcp_slowtmr+0x578>)
 800e82a:	4811      	ldr	r0, [pc, #68]	; (800e870 <tcp_slowtmr+0x57c>)
 800e82c:	f009 fa6e 	bl	8017d0c <iprintf>
        tcp_tw_pcbs = pcb->next;
 800e830:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e832:	68db      	ldr	r3, [r3, #12]
 800e834:	4a0b      	ldr	r2, [pc, #44]	; (800e864 <tcp_slowtmr+0x570>)
 800e836:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 800e838:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e83a:	61bb      	str	r3, [r7, #24]
      pcb = pcb->next;
 800e83c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e83e:	68db      	ldr	r3, [r3, #12]
 800e840:	627b      	str	r3, [r7, #36]	; 0x24
      memp_free(MEMP_TCP_PCB, pcb2);
 800e842:	69b9      	ldr	r1, [r7, #24]
 800e844:	2001      	movs	r0, #1
 800e846:	f7fe fa31 	bl	800ccac <memp_free>
 800e84a:	e004      	b.n	800e856 <tcp_slowtmr+0x562>
    } else {
      prev = pcb;
 800e84c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e84e:	623b      	str	r3, [r7, #32]
      pcb = pcb->next;
 800e850:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e852:	68db      	ldr	r3, [r3, #12]
 800e854:	627b      	str	r3, [r7, #36]	; 0x24
  while (pcb != NULL) {
 800e856:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e858:	2b00      	cmp	r3, #0
 800e85a:	d193      	bne.n	800e784 <tcp_slowtmr+0x490>
    }
  }
}
 800e85c:	bf00      	nop
 800e85e:	3728      	adds	r7, #40	; 0x28
 800e860:	46bd      	mov	sp, r7
 800e862:	bdb0      	pop	{r4, r5, r7, pc}
 800e864:	2000b5c0 	.word	0x2000b5c0
 800e868:	08019490 	.word	0x08019490
 800e86c:	08019778 	.word	0x08019778
 800e870:	080194cc 	.word	0x080194cc

0800e874 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 800e874:	b580      	push	{r7, lr}
 800e876:	b082      	sub	sp, #8
 800e878:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 800e87a:	4b2d      	ldr	r3, [pc, #180]	; (800e930 <tcp_fasttmr+0xbc>)
 800e87c:	781b      	ldrb	r3, [r3, #0]
 800e87e:	3301      	adds	r3, #1
 800e880:	b2da      	uxtb	r2, r3
 800e882:	4b2b      	ldr	r3, [pc, #172]	; (800e930 <tcp_fasttmr+0xbc>)
 800e884:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 800e886:	4b2b      	ldr	r3, [pc, #172]	; (800e934 <tcp_fasttmr+0xc0>)
 800e888:	681b      	ldr	r3, [r3, #0]
 800e88a:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800e88c:	e048      	b.n	800e920 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 800e88e:	687b      	ldr	r3, [r7, #4]
 800e890:	7f5a      	ldrb	r2, [r3, #29]
 800e892:	4b27      	ldr	r3, [pc, #156]	; (800e930 <tcp_fasttmr+0xbc>)
 800e894:	781b      	ldrb	r3, [r3, #0]
 800e896:	429a      	cmp	r2, r3
 800e898:	d03f      	beq.n	800e91a <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 800e89a:	4b25      	ldr	r3, [pc, #148]	; (800e930 <tcp_fasttmr+0xbc>)
 800e89c:	781a      	ldrb	r2, [r3, #0]
 800e89e:	687b      	ldr	r3, [r7, #4]
 800e8a0:	775a      	strb	r2, [r3, #29]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 800e8a2:	687b      	ldr	r3, [r7, #4]
 800e8a4:	7e9b      	ldrb	r3, [r3, #26]
 800e8a6:	f003 0301 	and.w	r3, r3, #1
 800e8aa:	2b00      	cmp	r3, #0
 800e8ac:	d010      	beq.n	800e8d0 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 800e8ae:	687b      	ldr	r3, [r7, #4]
 800e8b0:	7e9b      	ldrb	r3, [r3, #26]
 800e8b2:	f043 0302 	orr.w	r3, r3, #2
 800e8b6:	b2da      	uxtb	r2, r3
 800e8b8:	687b      	ldr	r3, [r7, #4]
 800e8ba:	769a      	strb	r2, [r3, #26]
        tcp_output(pcb);
 800e8bc:	6878      	ldr	r0, [r7, #4]
 800e8be:	f003 f85f 	bl	8011980 <tcp_output>
        pcb->flags &= ~(TF_ACK_DELAY | TF_ACK_NOW);
 800e8c2:	687b      	ldr	r3, [r7, #4]
 800e8c4:	7e9b      	ldrb	r3, [r3, #26]
 800e8c6:	f023 0303 	bic.w	r3, r3, #3
 800e8ca:	b2da      	uxtb	r2, r3
 800e8cc:	687b      	ldr	r3, [r7, #4]
 800e8ce:	769a      	strb	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 800e8d0:	687b      	ldr	r3, [r7, #4]
 800e8d2:	7e9b      	ldrb	r3, [r3, #26]
 800e8d4:	f003 0308 	and.w	r3, r3, #8
 800e8d8:	2b00      	cmp	r3, #0
 800e8da:	d009      	beq.n	800e8f0 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        pcb->flags &= ~(TF_CLOSEPEND);
 800e8dc:	687b      	ldr	r3, [r7, #4]
 800e8de:	7e9b      	ldrb	r3, [r3, #26]
 800e8e0:	f023 0308 	bic.w	r3, r3, #8
 800e8e4:	b2da      	uxtb	r2, r3
 800e8e6:	687b      	ldr	r3, [r7, #4]
 800e8e8:	769a      	strb	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 800e8ea:	6878      	ldr	r0, [r7, #4]
 800e8ec:	f7ff fb1e 	bl	800df2c <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 800e8f0:	687b      	ldr	r3, [r7, #4]
 800e8f2:	68db      	ldr	r3, [r3, #12]
 800e8f4:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 800e8f6:	687b      	ldr	r3, [r7, #4]
 800e8f8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e8fa:	2b00      	cmp	r3, #0
 800e8fc:	d00a      	beq.n	800e914 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 800e8fe:	4b0e      	ldr	r3, [pc, #56]	; (800e938 <tcp_fasttmr+0xc4>)
 800e900:	2200      	movs	r2, #0
 800e902:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 800e904:	6878      	ldr	r0, [r7, #4]
 800e906:	f000 f819 	bl	800e93c <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 800e90a:	4b0b      	ldr	r3, [pc, #44]	; (800e938 <tcp_fasttmr+0xc4>)
 800e90c:	781b      	ldrb	r3, [r3, #0]
 800e90e:	2b00      	cmp	r3, #0
 800e910:	d000      	beq.n	800e914 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 800e912:	e7b8      	b.n	800e886 <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 800e914:	683b      	ldr	r3, [r7, #0]
 800e916:	607b      	str	r3, [r7, #4]
 800e918:	e002      	b.n	800e920 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 800e91a:	687b      	ldr	r3, [r7, #4]
 800e91c:	68db      	ldr	r3, [r3, #12]
 800e91e:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800e920:	687b      	ldr	r3, [r7, #4]
 800e922:	2b00      	cmp	r3, #0
 800e924:	d1b3      	bne.n	800e88e <tcp_fasttmr+0x1a>
    }
  }
}
 800e926:	bf00      	nop
 800e928:	3708      	adds	r7, #8
 800e92a:	46bd      	mov	sp, r7
 800e92c:	bd80      	pop	{r7, pc}
 800e92e:	bf00      	nop
 800e930:	20004b6e 	.word	0x20004b6e
 800e934:	2000b5b0 	.word	0x2000b5b0
 800e938:	2000b5ac 	.word	0x2000b5ac

0800e93c <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 800e93c:	b590      	push	{r4, r7, lr}
 800e93e:	b085      	sub	sp, #20
 800e940:	af00      	add	r7, sp, #0
 800e942:	6078      	str	r0, [r7, #4]
  struct pbuf *rest;
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 800e944:	687b      	ldr	r3, [r7, #4]
 800e946:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e948:	7b5b      	ldrb	r3, [r3, #13]
 800e94a:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 800e94c:	687b      	ldr	r3, [r7, #4]
 800e94e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e950:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 800e952:	687b      	ldr	r3, [r7, #4]
 800e954:	2200      	movs	r2, #0
 800e956:	675a      	str	r2, [r3, #116]	; 0x74
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 800e958:	687b      	ldr	r3, [r7, #4]
 800e95a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e95e:	2b00      	cmp	r3, #0
 800e960:	d00b      	beq.n	800e97a <tcp_process_refused_data+0x3e>
 800e962:	687b      	ldr	r3, [r7, #4]
 800e964:	f8d3 4080 	ldr.w	r4, [r3, #128]	; 0x80
 800e968:	687b      	ldr	r3, [r7, #4]
 800e96a:	6918      	ldr	r0, [r3, #16]
 800e96c:	2300      	movs	r3, #0
 800e96e:	68ba      	ldr	r2, [r7, #8]
 800e970:	6879      	ldr	r1, [r7, #4]
 800e972:	47a0      	blx	r4
 800e974:	4603      	mov	r3, r0
 800e976:	73fb      	strb	r3, [r7, #15]
 800e978:	e007      	b.n	800e98a <tcp_process_refused_data+0x4e>
 800e97a:	2300      	movs	r3, #0
 800e97c:	68ba      	ldr	r2, [r7, #8]
 800e97e:	6879      	ldr	r1, [r7, #4]
 800e980:	2000      	movs	r0, #0
 800e982:	f000 f88c 	bl	800ea9e <tcp_recv_null>
 800e986:	4603      	mov	r3, r0
 800e988:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 800e98a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e98e:	2b00      	cmp	r3, #0
 800e990:	d12a      	bne.n	800e9e8 <tcp_process_refused_data+0xac>
      /* did refused_data include a FIN? */
      if (refused_flags & PBUF_FLAG_TCP_FIN
 800e992:	7bbb      	ldrb	r3, [r7, #14]
 800e994:	f003 0320 	and.w	r3, r3, #32
 800e998:	2b00      	cmp	r3, #0
 800e99a:	d033      	beq.n	800ea04 <tcp_process_refused_data+0xc8>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800e99c:	687b      	ldr	r3, [r7, #4]
 800e99e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e9a0:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800e9a4:	d005      	beq.n	800e9b2 <tcp_process_refused_data+0x76>
          pcb->rcv_wnd++;
 800e9a6:	687b      	ldr	r3, [r7, #4]
 800e9a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e9aa:	3301      	adds	r3, #1
 800e9ac:	b29a      	uxth	r2, r3
 800e9ae:	687b      	ldr	r3, [r7, #4]
 800e9b0:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 800e9b2:	687b      	ldr	r3, [r7, #4]
 800e9b4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e9b8:	2b00      	cmp	r3, #0
 800e9ba:	d00b      	beq.n	800e9d4 <tcp_process_refused_data+0x98>
 800e9bc:	687b      	ldr	r3, [r7, #4]
 800e9be:	f8d3 4080 	ldr.w	r4, [r3, #128]	; 0x80
 800e9c2:	687b      	ldr	r3, [r7, #4]
 800e9c4:	6918      	ldr	r0, [r3, #16]
 800e9c6:	2300      	movs	r3, #0
 800e9c8:	2200      	movs	r2, #0
 800e9ca:	6879      	ldr	r1, [r7, #4]
 800e9cc:	47a0      	blx	r4
 800e9ce:	4603      	mov	r3, r0
 800e9d0:	73fb      	strb	r3, [r7, #15]
 800e9d2:	e001      	b.n	800e9d8 <tcp_process_refused_data+0x9c>
 800e9d4:	2300      	movs	r3, #0
 800e9d6:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 800e9d8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e9dc:	f113 0f0d 	cmn.w	r3, #13
 800e9e0:	d110      	bne.n	800ea04 <tcp_process_refused_data+0xc8>
          return ERR_ABRT;
 800e9e2:	f06f 030c 	mvn.w	r3, #12
 800e9e6:	e00e      	b.n	800ea06 <tcp_process_refused_data+0xca>
        }
      }
    } else if (err == ERR_ABRT) {
 800e9e8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e9ec:	f113 0f0d 	cmn.w	r3, #13
 800e9f0:	d102      	bne.n	800e9f8 <tcp_process_refused_data+0xbc>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 800e9f2:	f06f 030c 	mvn.w	r3, #12
 800e9f6:	e006      	b.n	800ea06 <tcp_process_refused_data+0xca>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 800e9f8:	687b      	ldr	r3, [r7, #4]
 800e9fa:	68ba      	ldr	r2, [r7, #8]
 800e9fc:	675a      	str	r2, [r3, #116]	; 0x74
      return ERR_INPROGRESS;
 800e9fe:	f06f 0304 	mvn.w	r3, #4
 800ea02:	e000      	b.n	800ea06 <tcp_process_refused_data+0xca>
    }
  }
  return ERR_OK;
 800ea04:	2300      	movs	r3, #0
}
 800ea06:	4618      	mov	r0, r3
 800ea08:	3714      	adds	r7, #20
 800ea0a:	46bd      	mov	sp, r7
 800ea0c:	bd90      	pop	{r4, r7, pc}

0800ea0e <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 800ea0e:	b580      	push	{r7, lr}
 800ea10:	b084      	sub	sp, #16
 800ea12:	af00      	add	r7, sp, #0
 800ea14:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 800ea16:	e007      	b.n	800ea28 <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 800ea18:	687b      	ldr	r3, [r7, #4]
 800ea1a:	681b      	ldr	r3, [r3, #0]
 800ea1c:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 800ea1e:	6878      	ldr	r0, [r7, #4]
 800ea20:	f000 f809 	bl	800ea36 <tcp_seg_free>
    seg = next;
 800ea24:	68fb      	ldr	r3, [r7, #12]
 800ea26:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 800ea28:	687b      	ldr	r3, [r7, #4]
 800ea2a:	2b00      	cmp	r3, #0
 800ea2c:	d1f4      	bne.n	800ea18 <tcp_segs_free+0xa>
  }
}
 800ea2e:	bf00      	nop
 800ea30:	3710      	adds	r7, #16
 800ea32:	46bd      	mov	sp, r7
 800ea34:	bd80      	pop	{r7, pc}

0800ea36 <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 800ea36:	b580      	push	{r7, lr}
 800ea38:	b082      	sub	sp, #8
 800ea3a:	af00      	add	r7, sp, #0
 800ea3c:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 800ea3e:	687b      	ldr	r3, [r7, #4]
 800ea40:	2b00      	cmp	r3, #0
 800ea42:	d00c      	beq.n	800ea5e <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 800ea44:	687b      	ldr	r3, [r7, #4]
 800ea46:	685b      	ldr	r3, [r3, #4]
 800ea48:	2b00      	cmp	r3, #0
 800ea4a:	d004      	beq.n	800ea56 <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 800ea4c:	687b      	ldr	r3, [r7, #4]
 800ea4e:	685b      	ldr	r3, [r3, #4]
 800ea50:	4618      	mov	r0, r3
 800ea52:	f7fe fe8d 	bl	800d770 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 800ea56:	6879      	ldr	r1, [r7, #4]
 800ea58:	2003      	movs	r0, #3
 800ea5a:	f7fe f927 	bl	800ccac <memp_free>
  }
}
 800ea5e:	bf00      	nop
 800ea60:	3708      	adds	r7, #8
 800ea62:	46bd      	mov	sp, r7
 800ea64:	bd80      	pop	{r7, pc}

0800ea66 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 800ea66:	b580      	push	{r7, lr}
 800ea68:	b084      	sub	sp, #16
 800ea6a:	af00      	add	r7, sp, #0
 800ea6c:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 800ea6e:	2003      	movs	r0, #3
 800ea70:	f7fe f8ca 	bl	800cc08 <memp_malloc>
 800ea74:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 800ea76:	68fb      	ldr	r3, [r7, #12]
 800ea78:	2b00      	cmp	r3, #0
 800ea7a:	d101      	bne.n	800ea80 <tcp_seg_copy+0x1a>
    return NULL;
 800ea7c:	2300      	movs	r3, #0
 800ea7e:	e00a      	b.n	800ea96 <tcp_seg_copy+0x30>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 800ea80:	2210      	movs	r2, #16
 800ea82:	6879      	ldr	r1, [r7, #4]
 800ea84:	68f8      	ldr	r0, [r7, #12]
 800ea86:	f009 f886 	bl	8017b96 <memcpy>
  pbuf_ref(cseg->p);
 800ea8a:	68fb      	ldr	r3, [r7, #12]
 800ea8c:	685b      	ldr	r3, [r3, #4]
 800ea8e:	4618      	mov	r0, r3
 800ea90:	f7fe ff20 	bl	800d8d4 <pbuf_ref>
  return cseg;
 800ea94:	68fb      	ldr	r3, [r7, #12]
}
 800ea96:	4618      	mov	r0, r3
 800ea98:	3710      	adds	r7, #16
 800ea9a:	46bd      	mov	sp, r7
 800ea9c:	bd80      	pop	{r7, pc}

0800ea9e <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 800ea9e:	b580      	push	{r7, lr}
 800eaa0:	b084      	sub	sp, #16
 800eaa2:	af00      	add	r7, sp, #0
 800eaa4:	60f8      	str	r0, [r7, #12]
 800eaa6:	60b9      	str	r1, [r7, #8]
 800eaa8:	607a      	str	r2, [r7, #4]
 800eaaa:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);
  if (p != NULL) {
 800eaac:	687b      	ldr	r3, [r7, #4]
 800eaae:	2b00      	cmp	r3, #0
 800eab0:	d009      	beq.n	800eac6 <tcp_recv_null+0x28>
    tcp_recved(pcb, p->tot_len);
 800eab2:	687b      	ldr	r3, [r7, #4]
 800eab4:	891b      	ldrh	r3, [r3, #8]
 800eab6:	4619      	mov	r1, r3
 800eab8:	68b8      	ldr	r0, [r7, #8]
 800eaba:	f7ff fbc1 	bl	800e240 <tcp_recved>
    pbuf_free(p);
 800eabe:	6878      	ldr	r0, [r7, #4]
 800eac0:	f7fe fe56 	bl	800d770 <pbuf_free>
 800eac4:	e008      	b.n	800ead8 <tcp_recv_null+0x3a>
  } else if (err == ERR_OK) {
 800eac6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800eaca:	2b00      	cmp	r3, #0
 800eacc:	d104      	bne.n	800ead8 <tcp_recv_null+0x3a>
    return tcp_close(pcb);
 800eace:	68b8      	ldr	r0, [r7, #8]
 800ead0:	f7ff fa92 	bl	800dff8 <tcp_close>
 800ead4:	4603      	mov	r3, r0
 800ead6:	e000      	b.n	800eada <tcp_recv_null+0x3c>
  }
  return ERR_OK;
 800ead8:	2300      	movs	r3, #0
}
 800eada:	4618      	mov	r0, r3
 800eadc:	3710      	adds	r7, #16
 800eade:	46bd      	mov	sp, r7
 800eae0:	bd80      	pop	{r7, pc}
	...

0800eae4 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 800eae4:	b580      	push	{r7, lr}
 800eae6:	b086      	sub	sp, #24
 800eae8:	af00      	add	r7, sp, #0
 800eaea:	4603      	mov	r3, r0
 800eaec:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 800eaee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800eaf2:	2b00      	cmp	r3, #0
 800eaf4:	db01      	blt.n	800eafa <tcp_kill_prio+0x16>
 800eaf6:	79fb      	ldrb	r3, [r7, #7]
 800eaf8:	e000      	b.n	800eafc <tcp_kill_prio+0x18>
 800eafa:	237f      	movs	r3, #127	; 0x7f
 800eafc:	72fb      	strb	r3, [r7, #11]

  /* We kill the oldest active connection that has lower priority than prio. */
  inactivity = 0;
 800eafe:	2300      	movs	r3, #0
 800eb00:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800eb02:	2300      	movs	r3, #0
 800eb04:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800eb06:	4b16      	ldr	r3, [pc, #88]	; (800eb60 <tcp_kill_prio+0x7c>)
 800eb08:	681b      	ldr	r3, [r3, #0]
 800eb0a:	617b      	str	r3, [r7, #20]
 800eb0c:	e01a      	b.n	800eb44 <tcp_kill_prio+0x60>
    if (pcb->prio <= mprio &&
 800eb0e:	697b      	ldr	r3, [r7, #20]
 800eb10:	7d5b      	ldrb	r3, [r3, #21]
 800eb12:	7afa      	ldrb	r2, [r7, #11]
 800eb14:	429a      	cmp	r2, r3
 800eb16:	d312      	bcc.n	800eb3e <tcp_kill_prio+0x5a>
       (u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800eb18:	4b12      	ldr	r3, [pc, #72]	; (800eb64 <tcp_kill_prio+0x80>)
 800eb1a:	681a      	ldr	r2, [r3, #0]
 800eb1c:	697b      	ldr	r3, [r7, #20]
 800eb1e:	6a1b      	ldr	r3, [r3, #32]
 800eb20:	1ad3      	subs	r3, r2, r3
    if (pcb->prio <= mprio &&
 800eb22:	68fa      	ldr	r2, [r7, #12]
 800eb24:	429a      	cmp	r2, r3
 800eb26:	d80a      	bhi.n	800eb3e <tcp_kill_prio+0x5a>
      inactivity = tcp_ticks - pcb->tmr;
 800eb28:	4b0e      	ldr	r3, [pc, #56]	; (800eb64 <tcp_kill_prio+0x80>)
 800eb2a:	681a      	ldr	r2, [r3, #0]
 800eb2c:	697b      	ldr	r3, [r7, #20]
 800eb2e:	6a1b      	ldr	r3, [r3, #32]
 800eb30:	1ad3      	subs	r3, r2, r3
 800eb32:	60fb      	str	r3, [r7, #12]
      inactive = pcb;
 800eb34:	697b      	ldr	r3, [r7, #20]
 800eb36:	613b      	str	r3, [r7, #16]
      mprio = pcb->prio;
 800eb38:	697b      	ldr	r3, [r7, #20]
 800eb3a:	7d5b      	ldrb	r3, [r3, #21]
 800eb3c:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800eb3e:	697b      	ldr	r3, [r7, #20]
 800eb40:	68db      	ldr	r3, [r3, #12]
 800eb42:	617b      	str	r3, [r7, #20]
 800eb44:	697b      	ldr	r3, [r7, #20]
 800eb46:	2b00      	cmp	r3, #0
 800eb48:	d1e1      	bne.n	800eb0e <tcp_kill_prio+0x2a>
    }
  }
  if (inactive != NULL) {
 800eb4a:	693b      	ldr	r3, [r7, #16]
 800eb4c:	2b00      	cmp	r3, #0
 800eb4e:	d002      	beq.n	800eb56 <tcp_kill_prio+0x72>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
           (void *)inactive, inactivity));
    tcp_abort(inactive);
 800eb50:	6938      	ldr	r0, [r7, #16]
 800eb52:	f7ff fb1b 	bl	800e18c <tcp_abort>
  }
}
 800eb56:	bf00      	nop
 800eb58:	3718      	adds	r7, #24
 800eb5a:	46bd      	mov	sp, r7
 800eb5c:	bd80      	pop	{r7, pc}
 800eb5e:	bf00      	nop
 800eb60:	2000b5b0 	.word	0x2000b5b0
 800eb64:	2000b5b4 	.word	0x2000b5b4

0800eb68 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 800eb68:	b580      	push	{r7, lr}
 800eb6a:	b086      	sub	sp, #24
 800eb6c:	af00      	add	r7, sp, #0
 800eb6e:	4603      	mov	r3, r0
 800eb70:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 800eb72:	79fb      	ldrb	r3, [r7, #7]
 800eb74:	2b08      	cmp	r3, #8
 800eb76:	d009      	beq.n	800eb8c <tcp_kill_state+0x24>
 800eb78:	79fb      	ldrb	r3, [r7, #7]
 800eb7a:	2b09      	cmp	r3, #9
 800eb7c:	d006      	beq.n	800eb8c <tcp_kill_state+0x24>
 800eb7e:	4b1a      	ldr	r3, [pc, #104]	; (800ebe8 <tcp_kill_state+0x80>)
 800eb80:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800eb84:	4919      	ldr	r1, [pc, #100]	; (800ebec <tcp_kill_state+0x84>)
 800eb86:	481a      	ldr	r0, [pc, #104]	; (800ebf0 <tcp_kill_state+0x88>)
 800eb88:	f009 f8c0 	bl	8017d0c <iprintf>

  inactivity = 0;
 800eb8c:	2300      	movs	r3, #0
 800eb8e:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800eb90:	2300      	movs	r3, #0
 800eb92:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800eb94:	4b17      	ldr	r3, [pc, #92]	; (800ebf4 <tcp_kill_state+0x8c>)
 800eb96:	681b      	ldr	r3, [r3, #0]
 800eb98:	617b      	str	r3, [r7, #20]
 800eb9a:	e017      	b.n	800ebcc <tcp_kill_state+0x64>
    if (pcb->state == state) {
 800eb9c:	697b      	ldr	r3, [r7, #20]
 800eb9e:	7d1b      	ldrb	r3, [r3, #20]
 800eba0:	79fa      	ldrb	r2, [r7, #7]
 800eba2:	429a      	cmp	r2, r3
 800eba4:	d10f      	bne.n	800ebc6 <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800eba6:	4b14      	ldr	r3, [pc, #80]	; (800ebf8 <tcp_kill_state+0x90>)
 800eba8:	681a      	ldr	r2, [r3, #0]
 800ebaa:	697b      	ldr	r3, [r7, #20]
 800ebac:	6a1b      	ldr	r3, [r3, #32]
 800ebae:	1ad3      	subs	r3, r2, r3
 800ebb0:	68fa      	ldr	r2, [r7, #12]
 800ebb2:	429a      	cmp	r2, r3
 800ebb4:	d807      	bhi.n	800ebc6 <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 800ebb6:	4b10      	ldr	r3, [pc, #64]	; (800ebf8 <tcp_kill_state+0x90>)
 800ebb8:	681a      	ldr	r2, [r3, #0]
 800ebba:	697b      	ldr	r3, [r7, #20]
 800ebbc:	6a1b      	ldr	r3, [r3, #32]
 800ebbe:	1ad3      	subs	r3, r2, r3
 800ebc0:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 800ebc2:	697b      	ldr	r3, [r7, #20]
 800ebc4:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800ebc6:	697b      	ldr	r3, [r7, #20]
 800ebc8:	68db      	ldr	r3, [r3, #12]
 800ebca:	617b      	str	r3, [r7, #20]
 800ebcc:	697b      	ldr	r3, [r7, #20]
 800ebce:	2b00      	cmp	r3, #0
 800ebd0:	d1e4      	bne.n	800eb9c <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 800ebd2:	693b      	ldr	r3, [r7, #16]
 800ebd4:	2b00      	cmp	r3, #0
 800ebd6:	d003      	beq.n	800ebe0 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
           tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 800ebd8:	2100      	movs	r1, #0
 800ebda:	6938      	ldr	r0, [r7, #16]
 800ebdc:	f7ff fa24 	bl	800e028 <tcp_abandon>
  }
}
 800ebe0:	bf00      	nop
 800ebe2:	3718      	adds	r7, #24
 800ebe4:	46bd      	mov	sp, r7
 800ebe6:	bd80      	pop	{r7, pc}
 800ebe8:	08019490 	.word	0x08019490
 800ebec:	080197a0 	.word	0x080197a0
 800ebf0:	080194cc 	.word	0x080194cc
 800ebf4:	2000b5b0 	.word	0x2000b5b0
 800ebf8:	2000b5b4 	.word	0x2000b5b4

0800ebfc <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 800ebfc:	b580      	push	{r7, lr}
 800ebfe:	b084      	sub	sp, #16
 800ec00:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 800ec02:	2300      	movs	r3, #0
 800ec04:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 800ec06:	2300      	movs	r3, #0
 800ec08:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800ec0a:	4b12      	ldr	r3, [pc, #72]	; (800ec54 <tcp_kill_timewait+0x58>)
 800ec0c:	681b      	ldr	r3, [r3, #0]
 800ec0e:	60fb      	str	r3, [r7, #12]
 800ec10:	e012      	b.n	800ec38 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800ec12:	4b11      	ldr	r3, [pc, #68]	; (800ec58 <tcp_kill_timewait+0x5c>)
 800ec14:	681a      	ldr	r2, [r3, #0]
 800ec16:	68fb      	ldr	r3, [r7, #12]
 800ec18:	6a1b      	ldr	r3, [r3, #32]
 800ec1a:	1ad3      	subs	r3, r2, r3
 800ec1c:	687a      	ldr	r2, [r7, #4]
 800ec1e:	429a      	cmp	r2, r3
 800ec20:	d807      	bhi.n	800ec32 <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 800ec22:	4b0d      	ldr	r3, [pc, #52]	; (800ec58 <tcp_kill_timewait+0x5c>)
 800ec24:	681a      	ldr	r2, [r3, #0]
 800ec26:	68fb      	ldr	r3, [r7, #12]
 800ec28:	6a1b      	ldr	r3, [r3, #32]
 800ec2a:	1ad3      	subs	r3, r2, r3
 800ec2c:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 800ec2e:	68fb      	ldr	r3, [r7, #12]
 800ec30:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800ec32:	68fb      	ldr	r3, [r7, #12]
 800ec34:	68db      	ldr	r3, [r3, #12]
 800ec36:	60fb      	str	r3, [r7, #12]
 800ec38:	68fb      	ldr	r3, [r7, #12]
 800ec3a:	2b00      	cmp	r3, #0
 800ec3c:	d1e9      	bne.n	800ec12 <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 800ec3e:	68bb      	ldr	r3, [r7, #8]
 800ec40:	2b00      	cmp	r3, #0
 800ec42:	d002      	beq.n	800ec4a <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
           (void *)inactive, inactivity));
    tcp_abort(inactive);
 800ec44:	68b8      	ldr	r0, [r7, #8]
 800ec46:	f7ff faa1 	bl	800e18c <tcp_abort>
  }
}
 800ec4a:	bf00      	nop
 800ec4c:	3710      	adds	r7, #16
 800ec4e:	46bd      	mov	sp, r7
 800ec50:	bd80      	pop	{r7, pc}
 800ec52:	bf00      	nop
 800ec54:	2000b5c0 	.word	0x2000b5c0
 800ec58:	2000b5b4 	.word	0x2000b5b4

0800ec5c <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 800ec5c:	b580      	push	{r7, lr}
 800ec5e:	b084      	sub	sp, #16
 800ec60:	af00      	add	r7, sp, #0
 800ec62:	4603      	mov	r3, r0
 800ec64:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800ec66:	2001      	movs	r0, #1
 800ec68:	f7fd ffce 	bl	800cc08 <memp_malloc>
 800ec6c:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 800ec6e:	68fb      	ldr	r3, [r7, #12]
 800ec70:	2b00      	cmp	r3, #0
 800ec72:	d124      	bne.n	800ecbe <tcp_alloc+0x62>
    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 800ec74:	f7ff ffc2 	bl	800ebfc <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800ec78:	2001      	movs	r0, #1
 800ec7a:	f7fd ffc5 	bl	800cc08 <memp_malloc>
 800ec7e:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 800ec80:	68fb      	ldr	r3, [r7, #12]
 800ec82:	2b00      	cmp	r3, #0
 800ec84:	d11b      	bne.n	800ecbe <tcp_alloc+0x62>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 800ec86:	2009      	movs	r0, #9
 800ec88:	f7ff ff6e 	bl	800eb68 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800ec8c:	2001      	movs	r0, #1
 800ec8e:	f7fd ffbb 	bl	800cc08 <memp_malloc>
 800ec92:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 800ec94:	68fb      	ldr	r3, [r7, #12]
 800ec96:	2b00      	cmp	r3, #0
 800ec98:	d111      	bne.n	800ecbe <tcp_alloc+0x62>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 800ec9a:	2008      	movs	r0, #8
 800ec9c:	f7ff ff64 	bl	800eb68 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800eca0:	2001      	movs	r0, #1
 800eca2:	f7fd ffb1 	bl	800cc08 <memp_malloc>
 800eca6:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 800eca8:	68fb      	ldr	r3, [r7, #12]
 800ecaa:	2b00      	cmp	r3, #0
 800ecac:	d107      	bne.n	800ecbe <tcp_alloc+0x62>
          /* Try killing active connections with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 800ecae:	79fb      	ldrb	r3, [r7, #7]
 800ecb0:	4618      	mov	r0, r3
 800ecb2:	f7ff ff17 	bl	800eae4 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800ecb6:	2001      	movs	r0, #1
 800ecb8:	f7fd ffa6 	bl	800cc08 <memp_malloc>
 800ecbc:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 800ecbe:	68fb      	ldr	r3, [r7, #12]
 800ecc0:	2b00      	cmp	r3, #0
 800ecc2:	d03f      	beq.n	800ed44 <tcp_alloc+0xe8>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 800ecc4:	2298      	movs	r2, #152	; 0x98
 800ecc6:	2100      	movs	r1, #0
 800ecc8:	68f8      	ldr	r0, [r7, #12]
 800ecca:	f008 ff6f 	bl	8017bac <memset>
    pcb->prio = prio;
 800ecce:	68fb      	ldr	r3, [r7, #12]
 800ecd0:	79fa      	ldrb	r2, [r7, #7]
 800ecd2:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 800ecd4:	68fb      	ldr	r3, [r7, #12]
 800ecd6:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800ecda:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 800ecde:	68fb      	ldr	r3, [r7, #12]
 800ece0:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800ece4:	855a      	strh	r2, [r3, #42]	; 0x2a
 800ece6:	68fb      	ldr	r3, [r7, #12]
 800ece8:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800ecea:	68fb      	ldr	r3, [r7, #12]
 800ecec:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 800ecee:	68fb      	ldr	r3, [r7, #12]
 800ecf0:	22ff      	movs	r2, #255	; 0xff
 800ecf2:	729a      	strb	r2, [r3, #10]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 800ecf4:	68fb      	ldr	r3, [r7, #12]
 800ecf6:	f44f 7206 	mov.w	r2, #536	; 0x218
 800ecfa:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 800ecfc:	68fb      	ldr	r3, [r7, #12]
 800ecfe:	2206      	movs	r2, #6
 800ed00:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 800ed04:	68fb      	ldr	r3, [r7, #12]
 800ed06:	2206      	movs	r2, #6
 800ed08:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 800ed0a:	68fb      	ldr	r3, [r7, #12]
 800ed0c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ed10:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 800ed12:	68fb      	ldr	r3, [r7, #12]
 800ed14:	2201      	movs	r2, #1
 800ed16:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 800ed1a:	4b0d      	ldr	r3, [pc, #52]	; (800ed50 <tcp_alloc+0xf4>)
 800ed1c:	681a      	ldr	r2, [r3, #0]
 800ed1e:	68fb      	ldr	r3, [r7, #12]
 800ed20:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 800ed22:	4b0c      	ldr	r3, [pc, #48]	; (800ed54 <tcp_alloc+0xf8>)
 800ed24:	781a      	ldrb	r2, [r3, #0]
 800ed26:	68fb      	ldr	r3, [r7, #12]
 800ed28:	775a      	strb	r2, [r3, #29]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 800ed2a:	68fb      	ldr	r3, [r7, #12]
 800ed2c:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800ed30:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 800ed34:	68fb      	ldr	r3, [r7, #12]
 800ed36:	4a08      	ldr	r2, [pc, #32]	; (800ed58 <tcp_alloc+0xfc>)
 800ed38:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 800ed3c:	68fb      	ldr	r3, [r7, #12]
 800ed3e:	4a07      	ldr	r2, [pc, #28]	; (800ed5c <tcp_alloc+0x100>)
 800ed40:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 800ed44:	68fb      	ldr	r3, [r7, #12]
}
 800ed46:	4618      	mov	r0, r3
 800ed48:	3710      	adds	r7, #16
 800ed4a:	46bd      	mov	sp, r7
 800ed4c:	bd80      	pop	{r7, pc}
 800ed4e:	bf00      	nop
 800ed50:	2000b5b4 	.word	0x2000b5b4
 800ed54:	20004b6e 	.word	0x20004b6e
 800ed58:	0800ea9f 	.word	0x0800ea9f
 800ed5c:	006ddd00 	.word	0x006ddd00

0800ed60 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 800ed60:	b580      	push	{r7, lr}
 800ed62:	b082      	sub	sp, #8
 800ed64:	af00      	add	r7, sp, #0
 800ed66:	6078      	str	r0, [r7, #4]
  if (pcb->state != CLOSED &&
 800ed68:	687b      	ldr	r3, [r7, #4]
 800ed6a:	7d1b      	ldrb	r3, [r3, #20]
 800ed6c:	2b00      	cmp	r3, #0
 800ed6e:	d034      	beq.n	800edda <tcp_pcb_purge+0x7a>
     pcb->state != TIME_WAIT &&
 800ed70:	687b      	ldr	r3, [r7, #4]
 800ed72:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 800ed74:	2b0a      	cmp	r3, #10
 800ed76:	d030      	beq.n	800edda <tcp_pcb_purge+0x7a>
     pcb->state != LISTEN) {
 800ed78:	687b      	ldr	r3, [r7, #4]
 800ed7a:	7d1b      	ldrb	r3, [r3, #20]
     pcb->state != TIME_WAIT &&
 800ed7c:	2b01      	cmp	r3, #1
 800ed7e:	d02c      	beq.n	800edda <tcp_pcb_purge+0x7a>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 800ed80:	687b      	ldr	r3, [r7, #4]
 800ed82:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ed84:	2b00      	cmp	r3, #0
 800ed86:	d007      	beq.n	800ed98 <tcp_pcb_purge+0x38>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 800ed88:	687b      	ldr	r3, [r7, #4]
 800ed8a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ed8c:	4618      	mov	r0, r3
 800ed8e:	f7fe fcef 	bl	800d770 <pbuf_free>
      pcb->refused_data = NULL;
 800ed92:	687b      	ldr	r3, [r7, #4]
 800ed94:	2200      	movs	r2, #0
 800ed96:	675a      	str	r2, [r3, #116]	; 0x74
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
    }
    tcp_segs_free(pcb->ooseq);
 800ed98:	687b      	ldr	r3, [r7, #4]
 800ed9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ed9c:	4618      	mov	r0, r3
 800ed9e:	f7ff fe36 	bl	800ea0e <tcp_segs_free>
    pcb->ooseq = NULL;
 800eda2:	687b      	ldr	r3, [r7, #4]
 800eda4:	2200      	movs	r2, #0
 800eda6:	671a      	str	r2, [r3, #112]	; 0x70
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 800eda8:	687b      	ldr	r3, [r7, #4]
 800edaa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800edae:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 800edb0:	687b      	ldr	r3, [r7, #4]
 800edb2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800edb4:	4618      	mov	r0, r3
 800edb6:	f7ff fe2a 	bl	800ea0e <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 800edba:	687b      	ldr	r3, [r7, #4]
 800edbc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800edbe:	4618      	mov	r0, r3
 800edc0:	f7ff fe25 	bl	800ea0e <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 800edc4:	687b      	ldr	r3, [r7, #4]
 800edc6:	2200      	movs	r2, #0
 800edc8:	669a      	str	r2, [r3, #104]	; 0x68
 800edca:	687b      	ldr	r3, [r7, #4]
 800edcc:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800edce:	687b      	ldr	r3, [r7, #4]
 800edd0:	66da      	str	r2, [r3, #108]	; 0x6c
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 800edd2:	687b      	ldr	r3, [r7, #4]
 800edd4:	2200      	movs	r2, #0
 800edd6:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
#endif /* TCP_OVERSIZE */
  }
}
 800edda:	bf00      	nop
 800eddc:	3708      	adds	r7, #8
 800edde:	46bd      	mov	sp, r7
 800ede0:	bd80      	pop	{r7, pc}
	...

0800ede4 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 800ede4:	b580      	push	{r7, lr}
 800ede6:	b084      	sub	sp, #16
 800ede8:	af00      	add	r7, sp, #0
 800edea:	6078      	str	r0, [r7, #4]
 800edec:	6039      	str	r1, [r7, #0]
  TCP_RMV(pcblist, pcb);
 800edee:	687b      	ldr	r3, [r7, #4]
 800edf0:	681b      	ldr	r3, [r3, #0]
 800edf2:	683a      	ldr	r2, [r7, #0]
 800edf4:	429a      	cmp	r2, r3
 800edf6:	d105      	bne.n	800ee04 <tcp_pcb_remove+0x20>
 800edf8:	687b      	ldr	r3, [r7, #4]
 800edfa:	681b      	ldr	r3, [r3, #0]
 800edfc:	68da      	ldr	r2, [r3, #12]
 800edfe:	687b      	ldr	r3, [r7, #4]
 800ee00:	601a      	str	r2, [r3, #0]
 800ee02:	e013      	b.n	800ee2c <tcp_pcb_remove+0x48>
 800ee04:	687b      	ldr	r3, [r7, #4]
 800ee06:	681b      	ldr	r3, [r3, #0]
 800ee08:	60fb      	str	r3, [r7, #12]
 800ee0a:	e00c      	b.n	800ee26 <tcp_pcb_remove+0x42>
 800ee0c:	68fb      	ldr	r3, [r7, #12]
 800ee0e:	68db      	ldr	r3, [r3, #12]
 800ee10:	683a      	ldr	r2, [r7, #0]
 800ee12:	429a      	cmp	r2, r3
 800ee14:	d104      	bne.n	800ee20 <tcp_pcb_remove+0x3c>
 800ee16:	683b      	ldr	r3, [r7, #0]
 800ee18:	68da      	ldr	r2, [r3, #12]
 800ee1a:	68fb      	ldr	r3, [r7, #12]
 800ee1c:	60da      	str	r2, [r3, #12]
 800ee1e:	e005      	b.n	800ee2c <tcp_pcb_remove+0x48>
 800ee20:	68fb      	ldr	r3, [r7, #12]
 800ee22:	68db      	ldr	r3, [r3, #12]
 800ee24:	60fb      	str	r3, [r7, #12]
 800ee26:	68fb      	ldr	r3, [r7, #12]
 800ee28:	2b00      	cmp	r3, #0
 800ee2a:	d1ef      	bne.n	800ee0c <tcp_pcb_remove+0x28>
 800ee2c:	683b      	ldr	r3, [r7, #0]
 800ee2e:	2200      	movs	r2, #0
 800ee30:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 800ee32:	6838      	ldr	r0, [r7, #0]
 800ee34:	f7ff ff94 	bl	800ed60 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if (pcb->state != TIME_WAIT &&
 800ee38:	683b      	ldr	r3, [r7, #0]
 800ee3a:	7d1b      	ldrb	r3, [r3, #20]
 800ee3c:	2b0a      	cmp	r3, #10
 800ee3e:	d013      	beq.n	800ee68 <tcp_pcb_remove+0x84>
     pcb->state != LISTEN &&
 800ee40:	683b      	ldr	r3, [r7, #0]
 800ee42:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != TIME_WAIT &&
 800ee44:	2b01      	cmp	r3, #1
 800ee46:	d00f      	beq.n	800ee68 <tcp_pcb_remove+0x84>
     pcb->flags & TF_ACK_DELAY) {
 800ee48:	683b      	ldr	r3, [r7, #0]
 800ee4a:	7e9b      	ldrb	r3, [r3, #26]
 800ee4c:	f003 0301 	and.w	r3, r3, #1
     pcb->state != LISTEN &&
 800ee50:	2b00      	cmp	r3, #0
 800ee52:	d009      	beq.n	800ee68 <tcp_pcb_remove+0x84>
    pcb->flags |= TF_ACK_NOW;
 800ee54:	683b      	ldr	r3, [r7, #0]
 800ee56:	7e9b      	ldrb	r3, [r3, #26]
 800ee58:	f043 0302 	orr.w	r3, r3, #2
 800ee5c:	b2da      	uxtb	r2, r3
 800ee5e:	683b      	ldr	r3, [r7, #0]
 800ee60:	769a      	strb	r2, [r3, #26]
    tcp_output(pcb);
 800ee62:	6838      	ldr	r0, [r7, #0]
 800ee64:	f002 fd8c 	bl	8011980 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 800ee68:	683b      	ldr	r3, [r7, #0]
 800ee6a:	7d1b      	ldrb	r3, [r3, #20]
 800ee6c:	2b01      	cmp	r3, #1
 800ee6e:	d020      	beq.n	800eeb2 <tcp_pcb_remove+0xce>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 800ee70:	683b      	ldr	r3, [r7, #0]
 800ee72:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ee74:	2b00      	cmp	r3, #0
 800ee76:	d006      	beq.n	800ee86 <tcp_pcb_remove+0xa2>
 800ee78:	4b13      	ldr	r3, [pc, #76]	; (800eec8 <tcp_pcb_remove+0xe4>)
 800ee7a:	f240 7253 	movw	r2, #1875	; 0x753
 800ee7e:	4913      	ldr	r1, [pc, #76]	; (800eecc <tcp_pcb_remove+0xe8>)
 800ee80:	4813      	ldr	r0, [pc, #76]	; (800eed0 <tcp_pcb_remove+0xec>)
 800ee82:	f008 ff43 	bl	8017d0c <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 800ee86:	683b      	ldr	r3, [r7, #0]
 800ee88:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ee8a:	2b00      	cmp	r3, #0
 800ee8c:	d006      	beq.n	800ee9c <tcp_pcb_remove+0xb8>
 800ee8e:	4b0e      	ldr	r3, [pc, #56]	; (800eec8 <tcp_pcb_remove+0xe4>)
 800ee90:	f240 7254 	movw	r2, #1876	; 0x754
 800ee94:	490f      	ldr	r1, [pc, #60]	; (800eed4 <tcp_pcb_remove+0xf0>)
 800ee96:	480e      	ldr	r0, [pc, #56]	; (800eed0 <tcp_pcb_remove+0xec>)
 800ee98:	f008 ff38 	bl	8017d0c <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 800ee9c:	683b      	ldr	r3, [r7, #0]
 800ee9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800eea0:	2b00      	cmp	r3, #0
 800eea2:	d006      	beq.n	800eeb2 <tcp_pcb_remove+0xce>
 800eea4:	4b08      	ldr	r3, [pc, #32]	; (800eec8 <tcp_pcb_remove+0xe4>)
 800eea6:	f240 7256 	movw	r2, #1878	; 0x756
 800eeaa:	490b      	ldr	r1, [pc, #44]	; (800eed8 <tcp_pcb_remove+0xf4>)
 800eeac:	4808      	ldr	r0, [pc, #32]	; (800eed0 <tcp_pcb_remove+0xec>)
 800eeae:	f008 ff2d 	bl	8017d0c <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 800eeb2:	683b      	ldr	r3, [r7, #0]
 800eeb4:	2200      	movs	r2, #0
 800eeb6:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 800eeb8:	683b      	ldr	r3, [r7, #0]
 800eeba:	2200      	movs	r2, #0
 800eebc:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 800eebe:	bf00      	nop
 800eec0:	3710      	adds	r7, #16
 800eec2:	46bd      	mov	sp, r7
 800eec4:	bd80      	pop	{r7, pc}
 800eec6:	bf00      	nop
 800eec8:	08019490 	.word	0x08019490
 800eecc:	08019848 	.word	0x08019848
 800eed0:	080194cc 	.word	0x080194cc
 800eed4:	08019860 	.word	0x08019860
 800eed8:	0801987c 	.word	0x0801987c

0800eedc <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 800eedc:	b480      	push	{r7}
 800eede:	b083      	sub	sp, #12
 800eee0:	af00      	add	r7, sp, #0
 800eee2:	6078      	str	r0, [r7, #4]
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 800eee4:	4b07      	ldr	r3, [pc, #28]	; (800ef04 <tcp_next_iss+0x28>)
 800eee6:	681a      	ldr	r2, [r3, #0]
 800eee8:	4b07      	ldr	r3, [pc, #28]	; (800ef08 <tcp_next_iss+0x2c>)
 800eeea:	681b      	ldr	r3, [r3, #0]
 800eeec:	4413      	add	r3, r2
 800eeee:	4a05      	ldr	r2, [pc, #20]	; (800ef04 <tcp_next_iss+0x28>)
 800eef0:	6013      	str	r3, [r2, #0]
  return iss;
 800eef2:	4b04      	ldr	r3, [pc, #16]	; (800ef04 <tcp_next_iss+0x28>)
 800eef4:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 800eef6:	4618      	mov	r0, r3
 800eef8:	370c      	adds	r7, #12
 800eefa:	46bd      	mov	sp, r7
 800eefc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef00:	4770      	bx	lr
 800ef02:	bf00      	nop
 800ef04:	2000011c 	.word	0x2000011c
 800ef08:	2000b5b4 	.word	0x2000b5b4

0800ef0c <tcp_eff_send_mss_impl>:
tcp_eff_send_mss_impl(u16_t sendmss, const ip_addr_t *dest
#if LWIP_IPV6 || LWIP_IPV4_SRC_ROUTING
                     , const ip_addr_t *src
#endif /* LWIP_IPV6 || LWIP_IPV4_SRC_ROUTING */
                     )
{
 800ef0c:	b580      	push	{r7, lr}
 800ef0e:	b084      	sub	sp, #16
 800ef10:	af00      	add	r7, sp, #0
 800ef12:	4603      	mov	r3, r0
 800ef14:	6039      	str	r1, [r7, #0]
 800ef16:	80fb      	strh	r3, [r7, #6]
  u16_t mss_s;
  struct netif *outif;
  s16_t mtu;

  outif = ip_route(src, dest);
 800ef18:	6838      	ldr	r0, [r7, #0]
 800ef1a:	f006 fe95 	bl	8015c48 <ip4_route>
 800ef1e:	60f8      	str	r0, [r7, #12]
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 800ef20:	68fb      	ldr	r3, [r7, #12]
 800ef22:	2b00      	cmp	r3, #0
 800ef24:	d101      	bne.n	800ef2a <tcp_eff_send_mss_impl+0x1e>
      return sendmss;
 800ef26:	88fb      	ldrh	r3, [r7, #6]
 800ef28:	e010      	b.n	800ef4c <tcp_eff_send_mss_impl+0x40>
    }
    mtu = outif->mtu;
 800ef2a:	68fb      	ldr	r3, [r7, #12]
 800ef2c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800ef2e:	817b      	strh	r3, [r7, #10]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 800ef30:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800ef34:	2b00      	cmp	r3, #0
 800ef36:	d008      	beq.n	800ef4a <tcp_eff_send_mss_impl+0x3e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      mss_s = mtu - IP_HLEN - TCP_HLEN;
 800ef38:	897b      	ldrh	r3, [r7, #10]
 800ef3a:	3b28      	subs	r3, #40	; 0x28
 800ef3c:	813b      	strh	r3, [r7, #8]
#endif /* LWIP_IPV4 */
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 800ef3e:	893a      	ldrh	r2, [r7, #8]
 800ef40:	88fb      	ldrh	r3, [r7, #6]
 800ef42:	4293      	cmp	r3, r2
 800ef44:	bf28      	it	cs
 800ef46:	4613      	movcs	r3, r2
 800ef48:	80fb      	strh	r3, [r7, #6]
  }
  return sendmss;
 800ef4a:	88fb      	ldrh	r3, [r7, #6]
}
 800ef4c:	4618      	mov	r0, r3
 800ef4e:	3710      	adds	r7, #16
 800ef50:	46bd      	mov	sp, r7
 800ef52:	bd80      	pop	{r7, pc}

0800ef54 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t* old_addr, struct tcp_pcb* pcb_list)
{
 800ef54:	b580      	push	{r7, lr}
 800ef56:	b084      	sub	sp, #16
 800ef58:	af00      	add	r7, sp, #0
 800ef5a:	6078      	str	r0, [r7, #4]
 800ef5c:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 800ef5e:	683b      	ldr	r3, [r7, #0]
 800ef60:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 800ef62:	e011      	b.n	800ef88 <tcp_netif_ip_addr_changed_pcblist+0x34>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 800ef64:	68fb      	ldr	r3, [r7, #12]
 800ef66:	681a      	ldr	r2, [r3, #0]
 800ef68:	687b      	ldr	r3, [r7, #4]
 800ef6a:	681b      	ldr	r3, [r3, #0]
 800ef6c:	429a      	cmp	r2, r3
 800ef6e:	d108      	bne.n	800ef82 <tcp_netif_ip_addr_changed_pcblist+0x2e>
      /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
      && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
      ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 800ef70:	68fb      	ldr	r3, [r7, #12]
 800ef72:	68db      	ldr	r3, [r3, #12]
 800ef74:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 800ef76:	68f8      	ldr	r0, [r7, #12]
 800ef78:	f7ff f908 	bl	800e18c <tcp_abort>
      pcb = next;
 800ef7c:	68bb      	ldr	r3, [r7, #8]
 800ef7e:	60fb      	str	r3, [r7, #12]
 800ef80:	e002      	b.n	800ef88 <tcp_netif_ip_addr_changed_pcblist+0x34>
    } else {
      pcb = pcb->next;
 800ef82:	68fb      	ldr	r3, [r7, #12]
 800ef84:	68db      	ldr	r3, [r3, #12]
 800ef86:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 800ef88:	68fb      	ldr	r3, [r7, #12]
 800ef8a:	2b00      	cmp	r3, #0
 800ef8c:	d1ea      	bne.n	800ef64 <tcp_netif_ip_addr_changed_pcblist+0x10>
    }
  }
}
 800ef8e:	bf00      	nop
 800ef90:	3710      	adds	r7, #16
 800ef92:	46bd      	mov	sp, r7
 800ef94:	bd80      	pop	{r7, pc}
	...

0800ef98 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t* old_addr, const ip_addr_t* new_addr)
{
 800ef98:	b580      	push	{r7, lr}
 800ef9a:	b084      	sub	sp, #16
 800ef9c:	af00      	add	r7, sp, #0
 800ef9e:	6078      	str	r0, [r7, #4]
 800efa0:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb, *next;

  if (!ip_addr_isany(old_addr)) {
 800efa2:	687b      	ldr	r3, [r7, #4]
 800efa4:	2b00      	cmp	r3, #0
 800efa6:	d02c      	beq.n	800f002 <tcp_netif_ip_addr_changed+0x6a>
 800efa8:	687b      	ldr	r3, [r7, #4]
 800efaa:	681b      	ldr	r3, [r3, #0]
 800efac:	2b00      	cmp	r3, #0
 800efae:	d028      	beq.n	800f002 <tcp_netif_ip_addr_changed+0x6a>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 800efb0:	4b16      	ldr	r3, [pc, #88]	; (800f00c <tcp_netif_ip_addr_changed+0x74>)
 800efb2:	681b      	ldr	r3, [r3, #0]
 800efb4:	4619      	mov	r1, r3
 800efb6:	6878      	ldr	r0, [r7, #4]
 800efb8:	f7ff ffcc 	bl	800ef54 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 800efbc:	4b14      	ldr	r3, [pc, #80]	; (800f010 <tcp_netif_ip_addr_changed+0x78>)
 800efbe:	681b      	ldr	r3, [r3, #0]
 800efc0:	4619      	mov	r1, r3
 800efc2:	6878      	ldr	r0, [r7, #4]
 800efc4:	f7ff ffc6 	bl	800ef54 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 800efc8:	683b      	ldr	r3, [r7, #0]
 800efca:	2b00      	cmp	r3, #0
 800efcc:	d019      	beq.n	800f002 <tcp_netif_ip_addr_changed+0x6a>
 800efce:	683b      	ldr	r3, [r7, #0]
 800efd0:	681b      	ldr	r3, [r3, #0]
 800efd2:	2b00      	cmp	r3, #0
 800efd4:	d015      	beq.n	800f002 <tcp_netif_ip_addr_changed+0x6a>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = next) {
 800efd6:	4b0f      	ldr	r3, [pc, #60]	; (800f014 <tcp_netif_ip_addr_changed+0x7c>)
 800efd8:	681b      	ldr	r3, [r3, #0]
 800efda:	60fb      	str	r3, [r7, #12]
 800efdc:	e00e      	b.n	800effc <tcp_netif_ip_addr_changed+0x64>
        next = lpcb->next;
 800efde:	68fb      	ldr	r3, [r7, #12]
 800efe0:	68db      	ldr	r3, [r3, #12]
 800efe2:	60bb      	str	r3, [r7, #8]
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 800efe4:	68fb      	ldr	r3, [r7, #12]
 800efe6:	681a      	ldr	r2, [r3, #0]
 800efe8:	687b      	ldr	r3, [r7, #4]
 800efea:	681b      	ldr	r3, [r3, #0]
 800efec:	429a      	cmp	r2, r3
 800efee:	d103      	bne.n	800eff8 <tcp_netif_ip_addr_changed+0x60>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 800eff0:	683b      	ldr	r3, [r7, #0]
 800eff2:	681a      	ldr	r2, [r3, #0]
 800eff4:	68fb      	ldr	r3, [r7, #12]
 800eff6:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = next) {
 800eff8:	68bb      	ldr	r3, [r7, #8]
 800effa:	60fb      	str	r3, [r7, #12]
 800effc:	68fb      	ldr	r3, [r7, #12]
 800effe:	2b00      	cmp	r3, #0
 800f000:	d1ed      	bne.n	800efde <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 800f002:	bf00      	nop
 800f004:	3710      	adds	r7, #16
 800f006:	46bd      	mov	sp, r7
 800f008:	bd80      	pop	{r7, pc}
 800f00a:	bf00      	nop
 800f00c:	2000b5b0 	.word	0x2000b5b0
 800f010:	2000b5bc 	.word	0x2000b5bc
 800f014:	2000b5b8 	.word	0x2000b5b8

0800f018 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 800f018:	b590      	push	{r4, r7, lr}
 800f01a:	b08b      	sub	sp, #44	; 0x2c
 800f01c:	af02      	add	r7, sp, #8
 800f01e:	6078      	str	r0, [r7, #4]
 800f020:	6039      	str	r1, [r7, #0]
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 800f022:	687b      	ldr	r3, [r7, #4]
 800f024:	685b      	ldr	r3, [r3, #4]
 800f026:	4a82      	ldr	r2, [pc, #520]	; (800f230 <tcp_input+0x218>)
 800f028:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 800f02a:	687b      	ldr	r3, [r7, #4]
 800f02c:	895b      	ldrh	r3, [r3, #10]
 800f02e:	2b13      	cmp	r3, #19
 800f030:	f240 838a 	bls.w	800f748 <tcp_input+0x730>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800f034:	4b7f      	ldr	r3, [pc, #508]	; (800f234 <tcp_input+0x21c>)
 800f036:	695a      	ldr	r2, [r3, #20]
 800f038:	4b7e      	ldr	r3, [pc, #504]	; (800f234 <tcp_input+0x21c>)
 800f03a:	681b      	ldr	r3, [r3, #0]
 800f03c:	4619      	mov	r1, r3
 800f03e:	4610      	mov	r0, r2
 800f040:	f007 f89a 	bl	8016178 <ip4_addr_isbroadcast_u32>
 800f044:	4603      	mov	r3, r0
 800f046:	2b00      	cmp	r3, #0
 800f048:	f040 8380 	bne.w	800f74c <tcp_input+0x734>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 800f04c:	4b79      	ldr	r3, [pc, #484]	; (800f234 <tcp_input+0x21c>)
 800f04e:	695b      	ldr	r3, [r3, #20]
 800f050:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800f054:	2be0      	cmp	r3, #224	; 0xe0
 800f056:	f000 8379 	beq.w	800f74c <tcp_input+0x734>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN(tcphdr) * 4;
 800f05a:	4b75      	ldr	r3, [pc, #468]	; (800f230 <tcp_input+0x218>)
 800f05c:	681b      	ldr	r3, [r3, #0]
 800f05e:	899b      	ldrh	r3, [r3, #12]
 800f060:	b29b      	uxth	r3, r3
 800f062:	4618      	mov	r0, r3
 800f064:	f7fd f9e2 	bl	800c42c <lwip_htons>
 800f068:	4603      	mov	r3, r0
 800f06a:	0b1b      	lsrs	r3, r3, #12
 800f06c:	b29b      	uxth	r3, r3
 800f06e:	b2db      	uxtb	r3, r3
 800f070:	009b      	lsls	r3, r3, #2
 800f072:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 800f074:	7cbb      	ldrb	r3, [r7, #18]
 800f076:	2b13      	cmp	r3, #19
 800f078:	f240 8368 	bls.w	800f74c <tcp_input+0x734>
 800f07c:	7cbb      	ldrb	r3, [r7, #18]
 800f07e:	b29a      	uxth	r2, r3
 800f080:	687b      	ldr	r3, [r7, #4]
 800f082:	891b      	ldrh	r3, [r3, #8]
 800f084:	429a      	cmp	r2, r3
 800f086:	f200 8361 	bhi.w	800f74c <tcp_input+0x734>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = hdrlen_bytes - TCP_HLEN;
 800f08a:	7cbb      	ldrb	r3, [r7, #18]
 800f08c:	b29b      	uxth	r3, r3
 800f08e:	3b14      	subs	r3, #20
 800f090:	b29a      	uxth	r2, r3
 800f092:	4b69      	ldr	r3, [pc, #420]	; (800f238 <tcp_input+0x220>)
 800f094:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 800f096:	4b69      	ldr	r3, [pc, #420]	; (800f23c <tcp_input+0x224>)
 800f098:	2200      	movs	r2, #0
 800f09a:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 800f09c:	687b      	ldr	r3, [r7, #4]
 800f09e:	895a      	ldrh	r2, [r3, #10]
 800f0a0:	7cbb      	ldrb	r3, [r7, #18]
 800f0a2:	b29b      	uxth	r3, r3
 800f0a4:	429a      	cmp	r2, r3
 800f0a6:	d30d      	bcc.n	800f0c4 <tcp_input+0xac>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 800f0a8:	4b63      	ldr	r3, [pc, #396]	; (800f238 <tcp_input+0x220>)
 800f0aa:	881a      	ldrh	r2, [r3, #0]
 800f0ac:	4b64      	ldr	r3, [pc, #400]	; (800f240 <tcp_input+0x228>)
 800f0ae:	801a      	strh	r2, [r3, #0]
    pbuf_header(p, -(s16_t)hdrlen_bytes); /* cannot fail */
 800f0b0:	7cbb      	ldrb	r3, [r7, #18]
 800f0b2:	b29b      	uxth	r3, r3
 800f0b4:	425b      	negs	r3, r3
 800f0b6:	b29b      	uxth	r3, r3
 800f0b8:	b21b      	sxth	r3, r3
 800f0ba:	4619      	mov	r1, r3
 800f0bc:	6878      	ldr	r0, [r7, #4]
 800f0be:	f7fe fb33 	bl	800d728 <pbuf_header>
 800f0c2:	e055      	b.n	800f170 <tcp_input+0x158>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 800f0c4:	687b      	ldr	r3, [r7, #4]
 800f0c6:	681b      	ldr	r3, [r3, #0]
 800f0c8:	2b00      	cmp	r3, #0
 800f0ca:	d105      	bne.n	800f0d8 <tcp_input+0xc0>
 800f0cc:	4b5d      	ldr	r3, [pc, #372]	; (800f244 <tcp_input+0x22c>)
 800f0ce:	22b2      	movs	r2, #178	; 0xb2
 800f0d0:	495d      	ldr	r1, [pc, #372]	; (800f248 <tcp_input+0x230>)
 800f0d2:	485e      	ldr	r0, [pc, #376]	; (800f24c <tcp_input+0x234>)
 800f0d4:	f008 fe1a 	bl	8017d0c <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_header(p, -TCP_HLEN);
 800f0d8:	f06f 0113 	mvn.w	r1, #19
 800f0dc:	6878      	ldr	r0, [r7, #4]
 800f0de:	f7fe fb23 	bl	800d728 <pbuf_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 800f0e2:	687b      	ldr	r3, [r7, #4]
 800f0e4:	895a      	ldrh	r2, [r3, #10]
 800f0e6:	4b56      	ldr	r3, [pc, #344]	; (800f240 <tcp_input+0x228>)
 800f0e8:	801a      	strh	r2, [r3, #0]
    opt2len = tcphdr_optlen - tcphdr_opt1len;
 800f0ea:	4b53      	ldr	r3, [pc, #332]	; (800f238 <tcp_input+0x220>)
 800f0ec:	881a      	ldrh	r2, [r3, #0]
 800f0ee:	4b54      	ldr	r3, [pc, #336]	; (800f240 <tcp_input+0x228>)
 800f0f0:	881b      	ldrh	r3, [r3, #0]
 800f0f2:	1ad3      	subs	r3, r2, r3
 800f0f4:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_header(p, -(s16_t)tcphdr_opt1len);
 800f0f6:	4b52      	ldr	r3, [pc, #328]	; (800f240 <tcp_input+0x228>)
 800f0f8:	881b      	ldrh	r3, [r3, #0]
 800f0fa:	425b      	negs	r3, r3
 800f0fc:	b29b      	uxth	r3, r3
 800f0fe:	b21b      	sxth	r3, r3
 800f100:	4619      	mov	r1, r3
 800f102:	6878      	ldr	r0, [r7, #4]
 800f104:	f7fe fb10 	bl	800d728 <pbuf_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 800f108:	687b      	ldr	r3, [r7, #4]
 800f10a:	681b      	ldr	r3, [r3, #0]
 800f10c:	895b      	ldrh	r3, [r3, #10]
 800f10e:	8a3a      	ldrh	r2, [r7, #16]
 800f110:	429a      	cmp	r2, r3
 800f112:	f200 831d 	bhi.w	800f750 <tcp_input+0x738>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t*)p->next->payload;
 800f116:	687b      	ldr	r3, [r7, #4]
 800f118:	681b      	ldr	r3, [r3, #0]
 800f11a:	685b      	ldr	r3, [r3, #4]
 800f11c:	4a47      	ldr	r2, [pc, #284]	; (800f23c <tcp_input+0x224>)
 800f11e:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_header(p->next, -(s16_t)opt2len);
 800f120:	687b      	ldr	r3, [r7, #4]
 800f122:	681a      	ldr	r2, [r3, #0]
 800f124:	8a3b      	ldrh	r3, [r7, #16]
 800f126:	425b      	negs	r3, r3
 800f128:	b29b      	uxth	r3, r3
 800f12a:	b21b      	sxth	r3, r3
 800f12c:	4619      	mov	r1, r3
 800f12e:	4610      	mov	r0, r2
 800f130:	f7fe fafa 	bl	800d728 <pbuf_header>
    p->tot_len -= opt2len;
 800f134:	687b      	ldr	r3, [r7, #4]
 800f136:	891a      	ldrh	r2, [r3, #8]
 800f138:	8a3b      	ldrh	r3, [r7, #16]
 800f13a:	1ad3      	subs	r3, r2, r3
 800f13c:	b29a      	uxth	r2, r3
 800f13e:	687b      	ldr	r3, [r7, #4]
 800f140:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 800f142:	687b      	ldr	r3, [r7, #4]
 800f144:	895b      	ldrh	r3, [r3, #10]
 800f146:	2b00      	cmp	r3, #0
 800f148:	d005      	beq.n	800f156 <tcp_input+0x13e>
 800f14a:	4b3e      	ldr	r3, [pc, #248]	; (800f244 <tcp_input+0x22c>)
 800f14c:	22cf      	movs	r2, #207	; 0xcf
 800f14e:	4940      	ldr	r1, [pc, #256]	; (800f250 <tcp_input+0x238>)
 800f150:	483e      	ldr	r0, [pc, #248]	; (800f24c <tcp_input+0x234>)
 800f152:	f008 fddb 	bl	8017d0c <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 800f156:	687b      	ldr	r3, [r7, #4]
 800f158:	891a      	ldrh	r2, [r3, #8]
 800f15a:	687b      	ldr	r3, [r7, #4]
 800f15c:	681b      	ldr	r3, [r3, #0]
 800f15e:	891b      	ldrh	r3, [r3, #8]
 800f160:	429a      	cmp	r2, r3
 800f162:	d005      	beq.n	800f170 <tcp_input+0x158>
 800f164:	4b37      	ldr	r3, [pc, #220]	; (800f244 <tcp_input+0x22c>)
 800f166:	22d0      	movs	r2, #208	; 0xd0
 800f168:	493a      	ldr	r1, [pc, #232]	; (800f254 <tcp_input+0x23c>)
 800f16a:	4838      	ldr	r0, [pc, #224]	; (800f24c <tcp_input+0x234>)
 800f16c:	f008 fdce 	bl	8017d0c <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 800f170:	4b2f      	ldr	r3, [pc, #188]	; (800f230 <tcp_input+0x218>)
 800f172:	681b      	ldr	r3, [r3, #0]
 800f174:	881b      	ldrh	r3, [r3, #0]
 800f176:	b29a      	uxth	r2, r3
 800f178:	4b2d      	ldr	r3, [pc, #180]	; (800f230 <tcp_input+0x218>)
 800f17a:	681c      	ldr	r4, [r3, #0]
 800f17c:	4610      	mov	r0, r2
 800f17e:	f7fd f955 	bl	800c42c <lwip_htons>
 800f182:	4603      	mov	r3, r0
 800f184:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 800f186:	4b2a      	ldr	r3, [pc, #168]	; (800f230 <tcp_input+0x218>)
 800f188:	681b      	ldr	r3, [r3, #0]
 800f18a:	885b      	ldrh	r3, [r3, #2]
 800f18c:	b29a      	uxth	r2, r3
 800f18e:	4b28      	ldr	r3, [pc, #160]	; (800f230 <tcp_input+0x218>)
 800f190:	681c      	ldr	r4, [r3, #0]
 800f192:	4610      	mov	r0, r2
 800f194:	f7fd f94a 	bl	800c42c <lwip_htons>
 800f198:	4603      	mov	r3, r0
 800f19a:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 800f19c:	4b24      	ldr	r3, [pc, #144]	; (800f230 <tcp_input+0x218>)
 800f19e:	681b      	ldr	r3, [r3, #0]
 800f1a0:	685a      	ldr	r2, [r3, #4]
 800f1a2:	4b23      	ldr	r3, [pc, #140]	; (800f230 <tcp_input+0x218>)
 800f1a4:	681c      	ldr	r4, [r3, #0]
 800f1a6:	4610      	mov	r0, r2
 800f1a8:	f7fd f94e 	bl	800c448 <lwip_htonl>
 800f1ac:	4603      	mov	r3, r0
 800f1ae:	6063      	str	r3, [r4, #4]
 800f1b0:	6863      	ldr	r3, [r4, #4]
 800f1b2:	4a29      	ldr	r2, [pc, #164]	; (800f258 <tcp_input+0x240>)
 800f1b4:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 800f1b6:	4b1e      	ldr	r3, [pc, #120]	; (800f230 <tcp_input+0x218>)
 800f1b8:	681b      	ldr	r3, [r3, #0]
 800f1ba:	689a      	ldr	r2, [r3, #8]
 800f1bc:	4b1c      	ldr	r3, [pc, #112]	; (800f230 <tcp_input+0x218>)
 800f1be:	681c      	ldr	r4, [r3, #0]
 800f1c0:	4610      	mov	r0, r2
 800f1c2:	f7fd f941 	bl	800c448 <lwip_htonl>
 800f1c6:	4603      	mov	r3, r0
 800f1c8:	60a3      	str	r3, [r4, #8]
 800f1ca:	68a3      	ldr	r3, [r4, #8]
 800f1cc:	4a23      	ldr	r2, [pc, #140]	; (800f25c <tcp_input+0x244>)
 800f1ce:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 800f1d0:	4b17      	ldr	r3, [pc, #92]	; (800f230 <tcp_input+0x218>)
 800f1d2:	681b      	ldr	r3, [r3, #0]
 800f1d4:	89db      	ldrh	r3, [r3, #14]
 800f1d6:	b29a      	uxth	r2, r3
 800f1d8:	4b15      	ldr	r3, [pc, #84]	; (800f230 <tcp_input+0x218>)
 800f1da:	681c      	ldr	r4, [r3, #0]
 800f1dc:	4610      	mov	r0, r2
 800f1de:	f7fd f925 	bl	800c42c <lwip_htons>
 800f1e2:	4603      	mov	r3, r0
 800f1e4:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 800f1e6:	4b12      	ldr	r3, [pc, #72]	; (800f230 <tcp_input+0x218>)
 800f1e8:	681b      	ldr	r3, [r3, #0]
 800f1ea:	899b      	ldrh	r3, [r3, #12]
 800f1ec:	b29b      	uxth	r3, r3
 800f1ee:	4618      	mov	r0, r3
 800f1f0:	f7fd f91c 	bl	800c42c <lwip_htons>
 800f1f4:	4603      	mov	r3, r0
 800f1f6:	b2db      	uxtb	r3, r3
 800f1f8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800f1fc:	b2da      	uxtb	r2, r3
 800f1fe:	4b18      	ldr	r3, [pc, #96]	; (800f260 <tcp_input+0x248>)
 800f200:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len + ((flags & (TCP_FIN | TCP_SYN)) ? 1 : 0);
 800f202:	687b      	ldr	r3, [r7, #4]
 800f204:	891a      	ldrh	r2, [r3, #8]
 800f206:	4b16      	ldr	r3, [pc, #88]	; (800f260 <tcp_input+0x248>)
 800f208:	781b      	ldrb	r3, [r3, #0]
 800f20a:	f003 0303 	and.w	r3, r3, #3
 800f20e:	2b00      	cmp	r3, #0
 800f210:	bf14      	ite	ne
 800f212:	2301      	movne	r3, #1
 800f214:	2300      	moveq	r3, #0
 800f216:	b2db      	uxtb	r3, r3
 800f218:	b29b      	uxth	r3, r3
 800f21a:	4413      	add	r3, r2
 800f21c:	b29a      	uxth	r2, r3
 800f21e:	4b11      	ldr	r3, [pc, #68]	; (800f264 <tcp_input+0x24c>)
 800f220:	801a      	strh	r2, [r3, #0]

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 800f222:	2300      	movs	r3, #0
 800f224:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800f226:	4b10      	ldr	r3, [pc, #64]	; (800f268 <tcp_input+0x250>)
 800f228:	681b      	ldr	r3, [r3, #0]
 800f22a:	61fb      	str	r3, [r7, #28]
 800f22c:	e082      	b.n	800f334 <tcp_input+0x31c>
 800f22e:	bf00      	nop
 800f230:	20004b80 	.word	0x20004b80
 800f234:	20007e80 	.word	0x20007e80
 800f238:	20004b84 	.word	0x20004b84
 800f23c:	20004b88 	.word	0x20004b88
 800f240:	20004b86 	.word	0x20004b86
 800f244:	08019894 	.word	0x08019894
 800f248:	080198c8 	.word	0x080198c8
 800f24c:	080198d8 	.word	0x080198d8
 800f250:	08019900 	.word	0x08019900
 800f254:	0801990c 	.word	0x0801990c
 800f258:	20004b90 	.word	0x20004b90
 800f25c:	20004b94 	.word	0x20004b94
 800f260:	20004b9c 	.word	0x20004b9c
 800f264:	20004b9a 	.word	0x20004b9a
 800f268:	2000b5b0 	.word	0x2000b5b0
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 800f26c:	69fb      	ldr	r3, [r7, #28]
 800f26e:	7d1b      	ldrb	r3, [r3, #20]
 800f270:	2b00      	cmp	r3, #0
 800f272:	d105      	bne.n	800f280 <tcp_input+0x268>
 800f274:	4b8f      	ldr	r3, [pc, #572]	; (800f4b4 <tcp_input+0x49c>)
 800f276:	22e2      	movs	r2, #226	; 0xe2
 800f278:	498f      	ldr	r1, [pc, #572]	; (800f4b8 <tcp_input+0x4a0>)
 800f27a:	4890      	ldr	r0, [pc, #576]	; (800f4bc <tcp_input+0x4a4>)
 800f27c:	f008 fd46 	bl	8017d0c <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 800f280:	69fb      	ldr	r3, [r7, #28]
 800f282:	7d1b      	ldrb	r3, [r3, #20]
 800f284:	2b0a      	cmp	r3, #10
 800f286:	d105      	bne.n	800f294 <tcp_input+0x27c>
 800f288:	4b8a      	ldr	r3, [pc, #552]	; (800f4b4 <tcp_input+0x49c>)
 800f28a:	22e3      	movs	r2, #227	; 0xe3
 800f28c:	498c      	ldr	r1, [pc, #560]	; (800f4c0 <tcp_input+0x4a8>)
 800f28e:	488b      	ldr	r0, [pc, #556]	; (800f4bc <tcp_input+0x4a4>)
 800f290:	f008 fd3c 	bl	8017d0c <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 800f294:	69fb      	ldr	r3, [r7, #28]
 800f296:	7d1b      	ldrb	r3, [r3, #20]
 800f298:	2b01      	cmp	r3, #1
 800f29a:	d105      	bne.n	800f2a8 <tcp_input+0x290>
 800f29c:	4b85      	ldr	r3, [pc, #532]	; (800f4b4 <tcp_input+0x49c>)
 800f29e:	22e4      	movs	r2, #228	; 0xe4
 800f2a0:	4988      	ldr	r1, [pc, #544]	; (800f4c4 <tcp_input+0x4ac>)
 800f2a2:	4886      	ldr	r0, [pc, #536]	; (800f4bc <tcp_input+0x4a4>)
 800f2a4:	f008 fd32 	bl	8017d0c <iprintf>
    if (pcb->remote_port == tcphdr->src &&
 800f2a8:	69fb      	ldr	r3, [r7, #28]
 800f2aa:	8b1a      	ldrh	r2, [r3, #24]
 800f2ac:	4b86      	ldr	r3, [pc, #536]	; (800f4c8 <tcp_input+0x4b0>)
 800f2ae:	681b      	ldr	r3, [r3, #0]
 800f2b0:	881b      	ldrh	r3, [r3, #0]
 800f2b2:	b29b      	uxth	r3, r3
 800f2b4:	429a      	cmp	r2, r3
 800f2b6:	d138      	bne.n	800f32a <tcp_input+0x312>
        pcb->local_port == tcphdr->dest &&
 800f2b8:	69fb      	ldr	r3, [r7, #28]
 800f2ba:	8ada      	ldrh	r2, [r3, #22]
 800f2bc:	4b82      	ldr	r3, [pc, #520]	; (800f4c8 <tcp_input+0x4b0>)
 800f2be:	681b      	ldr	r3, [r3, #0]
 800f2c0:	885b      	ldrh	r3, [r3, #2]
 800f2c2:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 800f2c4:	429a      	cmp	r2, r3
 800f2c6:	d130      	bne.n	800f32a <tcp_input+0x312>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800f2c8:	69fb      	ldr	r3, [r7, #28]
 800f2ca:	685a      	ldr	r2, [r3, #4]
 800f2cc:	4b7f      	ldr	r3, [pc, #508]	; (800f4cc <tcp_input+0x4b4>)
 800f2ce:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 800f2d0:	429a      	cmp	r2, r3
 800f2d2:	d12a      	bne.n	800f32a <tcp_input+0x312>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800f2d4:	69fb      	ldr	r3, [r7, #28]
 800f2d6:	681a      	ldr	r2, [r3, #0]
 800f2d8:	4b7c      	ldr	r3, [pc, #496]	; (800f4cc <tcp_input+0x4b4>)
 800f2da:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800f2dc:	429a      	cmp	r2, r3
 800f2de:	d124      	bne.n	800f32a <tcp_input+0x312>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 800f2e0:	69fb      	ldr	r3, [r7, #28]
 800f2e2:	68db      	ldr	r3, [r3, #12]
 800f2e4:	69fa      	ldr	r2, [r7, #28]
 800f2e6:	429a      	cmp	r2, r3
 800f2e8:	d105      	bne.n	800f2f6 <tcp_input+0x2de>
 800f2ea:	4b72      	ldr	r3, [pc, #456]	; (800f4b4 <tcp_input+0x49c>)
 800f2ec:	22ec      	movs	r2, #236	; 0xec
 800f2ee:	4978      	ldr	r1, [pc, #480]	; (800f4d0 <tcp_input+0x4b8>)
 800f2f0:	4872      	ldr	r0, [pc, #456]	; (800f4bc <tcp_input+0x4a4>)
 800f2f2:	f008 fd0b 	bl	8017d0c <iprintf>
      if (prev != NULL) {
 800f2f6:	69bb      	ldr	r3, [r7, #24]
 800f2f8:	2b00      	cmp	r3, #0
 800f2fa:	d00a      	beq.n	800f312 <tcp_input+0x2fa>
        prev->next = pcb->next;
 800f2fc:	69fb      	ldr	r3, [r7, #28]
 800f2fe:	68da      	ldr	r2, [r3, #12]
 800f300:	69bb      	ldr	r3, [r7, #24]
 800f302:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 800f304:	4b73      	ldr	r3, [pc, #460]	; (800f4d4 <tcp_input+0x4bc>)
 800f306:	681a      	ldr	r2, [r3, #0]
 800f308:	69fb      	ldr	r3, [r7, #28]
 800f30a:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 800f30c:	4a71      	ldr	r2, [pc, #452]	; (800f4d4 <tcp_input+0x4bc>)
 800f30e:	69fb      	ldr	r3, [r7, #28]
 800f310:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 800f312:	69fb      	ldr	r3, [r7, #28]
 800f314:	68db      	ldr	r3, [r3, #12]
 800f316:	69fa      	ldr	r2, [r7, #28]
 800f318:	429a      	cmp	r2, r3
 800f31a:	d10f      	bne.n	800f33c <tcp_input+0x324>
 800f31c:	4b65      	ldr	r3, [pc, #404]	; (800f4b4 <tcp_input+0x49c>)
 800f31e:	22f4      	movs	r2, #244	; 0xf4
 800f320:	496d      	ldr	r1, [pc, #436]	; (800f4d8 <tcp_input+0x4c0>)
 800f322:	4866      	ldr	r0, [pc, #408]	; (800f4bc <tcp_input+0x4a4>)
 800f324:	f008 fcf2 	bl	8017d0c <iprintf>
      break;
 800f328:	e008      	b.n	800f33c <tcp_input+0x324>
    }
    prev = pcb;
 800f32a:	69fb      	ldr	r3, [r7, #28]
 800f32c:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800f32e:	69fb      	ldr	r3, [r7, #28]
 800f330:	68db      	ldr	r3, [r3, #12]
 800f332:	61fb      	str	r3, [r7, #28]
 800f334:	69fb      	ldr	r3, [r7, #28]
 800f336:	2b00      	cmp	r3, #0
 800f338:	d198      	bne.n	800f26c <tcp_input+0x254>
 800f33a:	e000      	b.n	800f33e <tcp_input+0x326>
      break;
 800f33c:	bf00      	nop
  }

  if (pcb == NULL) {
 800f33e:	69fb      	ldr	r3, [r7, #28]
 800f340:	2b00      	cmp	r3, #0
 800f342:	d173      	bne.n	800f42c <tcp_input+0x414>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800f344:	4b65      	ldr	r3, [pc, #404]	; (800f4dc <tcp_input+0x4c4>)
 800f346:	681b      	ldr	r3, [r3, #0]
 800f348:	61fb      	str	r3, [r7, #28]
 800f34a:	e02f      	b.n	800f3ac <tcp_input+0x394>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800f34c:	69fb      	ldr	r3, [r7, #28]
 800f34e:	7d1b      	ldrb	r3, [r3, #20]
 800f350:	2b0a      	cmp	r3, #10
 800f352:	d005      	beq.n	800f360 <tcp_input+0x348>
 800f354:	4b57      	ldr	r3, [pc, #348]	; (800f4b4 <tcp_input+0x49c>)
 800f356:	22fe      	movs	r2, #254	; 0xfe
 800f358:	4961      	ldr	r1, [pc, #388]	; (800f4e0 <tcp_input+0x4c8>)
 800f35a:	4858      	ldr	r0, [pc, #352]	; (800f4bc <tcp_input+0x4a4>)
 800f35c:	f008 fcd6 	bl	8017d0c <iprintf>
      if (pcb->remote_port == tcphdr->src &&
 800f360:	69fb      	ldr	r3, [r7, #28]
 800f362:	8b1a      	ldrh	r2, [r3, #24]
 800f364:	4b58      	ldr	r3, [pc, #352]	; (800f4c8 <tcp_input+0x4b0>)
 800f366:	681b      	ldr	r3, [r3, #0]
 800f368:	881b      	ldrh	r3, [r3, #0]
 800f36a:	b29b      	uxth	r3, r3
 800f36c:	429a      	cmp	r2, r3
 800f36e:	d11a      	bne.n	800f3a6 <tcp_input+0x38e>
          pcb->local_port == tcphdr->dest &&
 800f370:	69fb      	ldr	r3, [r7, #28]
 800f372:	8ada      	ldrh	r2, [r3, #22]
 800f374:	4b54      	ldr	r3, [pc, #336]	; (800f4c8 <tcp_input+0x4b0>)
 800f376:	681b      	ldr	r3, [r3, #0]
 800f378:	885b      	ldrh	r3, [r3, #2]
 800f37a:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 800f37c:	429a      	cmp	r2, r3
 800f37e:	d112      	bne.n	800f3a6 <tcp_input+0x38e>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800f380:	69fb      	ldr	r3, [r7, #28]
 800f382:	685a      	ldr	r2, [r3, #4]
 800f384:	4b51      	ldr	r3, [pc, #324]	; (800f4cc <tcp_input+0x4b4>)
 800f386:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 800f388:	429a      	cmp	r2, r3
 800f38a:	d10c      	bne.n	800f3a6 <tcp_input+0x38e>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800f38c:	69fb      	ldr	r3, [r7, #28]
 800f38e:	681a      	ldr	r2, [r3, #0]
 800f390:	4b4e      	ldr	r3, [pc, #312]	; (800f4cc <tcp_input+0x4b4>)
 800f392:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800f394:	429a      	cmp	r2, r3
 800f396:	d106      	bne.n	800f3a6 <tcp_input+0x38e>
        /* We don't really care enough to move this PCB to the front
           of the list since we are not very likely to receive that
           many segments for connections in TIME-WAIT. */
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: packed for TIME_WAITing connection.\n"));
        tcp_timewait_input(pcb);
 800f398:	69f8      	ldr	r0, [r7, #28]
 800f39a:	f000 fb15 	bl	800f9c8 <tcp_timewait_input>
        pbuf_free(p);
 800f39e:	6878      	ldr	r0, [r7, #4]
 800f3a0:	f7fe f9e6 	bl	800d770 <pbuf_free>
        return;
 800f3a4:	e1da      	b.n	800f75c <tcp_input+0x744>
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800f3a6:	69fb      	ldr	r3, [r7, #28]
 800f3a8:	68db      	ldr	r3, [r3, #12]
 800f3aa:	61fb      	str	r3, [r7, #28]
 800f3ac:	69fb      	ldr	r3, [r7, #28]
 800f3ae:	2b00      	cmp	r3, #0
 800f3b0:	d1cc      	bne.n	800f34c <tcp_input+0x334>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 800f3b2:	2300      	movs	r3, #0
 800f3b4:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800f3b6:	4b4b      	ldr	r3, [pc, #300]	; (800f4e4 <tcp_input+0x4cc>)
 800f3b8:	681b      	ldr	r3, [r3, #0]
 800f3ba:	617b      	str	r3, [r7, #20]
 800f3bc:	e019      	b.n	800f3f2 <tcp_input+0x3da>
      if (lpcb->local_port == tcphdr->dest) {
 800f3be:	697b      	ldr	r3, [r7, #20]
 800f3c0:	8ada      	ldrh	r2, [r3, #22]
 800f3c2:	4b41      	ldr	r3, [pc, #260]	; (800f4c8 <tcp_input+0x4b0>)
 800f3c4:	681b      	ldr	r3, [r3, #0]
 800f3c6:	885b      	ldrh	r3, [r3, #2]
 800f3c8:	b29b      	uxth	r3, r3
 800f3ca:	429a      	cmp	r2, r3
 800f3cc:	d10c      	bne.n	800f3e8 <tcp_input+0x3d0>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 800f3ce:	697b      	ldr	r3, [r7, #20]
 800f3d0:	681a      	ldr	r2, [r3, #0]
 800f3d2:	4b3e      	ldr	r3, [pc, #248]	; (800f4cc <tcp_input+0x4b4>)
 800f3d4:	695b      	ldr	r3, [r3, #20]
 800f3d6:	429a      	cmp	r2, r3
 800f3d8:	d00f      	beq.n	800f3fa <tcp_input+0x3e2>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 800f3da:	697b      	ldr	r3, [r7, #20]
 800f3dc:	2b00      	cmp	r3, #0
 800f3de:	d00d      	beq.n	800f3fc <tcp_input+0x3e4>
 800f3e0:	697b      	ldr	r3, [r7, #20]
 800f3e2:	681b      	ldr	r3, [r3, #0]
 800f3e4:	2b00      	cmp	r3, #0
 800f3e6:	d009      	beq.n	800f3fc <tcp_input+0x3e4>
            break;
 #endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 800f3e8:	697b      	ldr	r3, [r7, #20]
 800f3ea:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800f3ec:	697b      	ldr	r3, [r7, #20]
 800f3ee:	68db      	ldr	r3, [r3, #12]
 800f3f0:	617b      	str	r3, [r7, #20]
 800f3f2:	697b      	ldr	r3, [r7, #20]
 800f3f4:	2b00      	cmp	r3, #0
 800f3f6:	d1e2      	bne.n	800f3be <tcp_input+0x3a6>
 800f3f8:	e000      	b.n	800f3fc <tcp_input+0x3e4>
            break;
 800f3fa:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 800f3fc:	697b      	ldr	r3, [r7, #20]
 800f3fe:	2b00      	cmp	r3, #0
 800f400:	d014      	beq.n	800f42c <tcp_input+0x414>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 800f402:	69bb      	ldr	r3, [r7, #24]
 800f404:	2b00      	cmp	r3, #0
 800f406:	d00a      	beq.n	800f41e <tcp_input+0x406>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 800f408:	697b      	ldr	r3, [r7, #20]
 800f40a:	68da      	ldr	r2, [r3, #12]
 800f40c:	69bb      	ldr	r3, [r7, #24]
 800f40e:	60da      	str	r2, [r3, #12]
              /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 800f410:	4b34      	ldr	r3, [pc, #208]	; (800f4e4 <tcp_input+0x4cc>)
 800f412:	681a      	ldr	r2, [r3, #0]
 800f414:	697b      	ldr	r3, [r7, #20]
 800f416:	60da      	str	r2, [r3, #12]
              /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 800f418:	4a32      	ldr	r2, [pc, #200]	; (800f4e4 <tcp_input+0x4cc>)
 800f41a:	697b      	ldr	r3, [r7, #20]
 800f41c:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }

      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: packed for LISTENing connection.\n"));
      tcp_listen_input(lpcb);
 800f41e:	6978      	ldr	r0, [r7, #20]
 800f420:	f000 f9f0 	bl	800f804 <tcp_listen_input>
      pbuf_free(p);
 800f424:	6878      	ldr	r0, [r7, #4]
 800f426:	f7fe f9a3 	bl	800d770 <pbuf_free>
      return;
 800f42a:	e197      	b.n	800f75c <tcp_input+0x744>
  tcp_debug_print_flags(TCPH_FLAGS(tcphdr));
  LWIP_DEBUGF(TCP_INPUT_DEBUG, ("-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n"));
#endif /* TCP_INPUT_DEBUG */


  if (pcb != NULL) {
 800f42c:	69fb      	ldr	r3, [r7, #28]
 800f42e:	2b00      	cmp	r3, #0
 800f430:	f000 8164 	beq.w	800f6fc <tcp_input+0x6e4>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 800f434:	4b2c      	ldr	r3, [pc, #176]	; (800f4e8 <tcp_input+0x4d0>)
 800f436:	2200      	movs	r2, #0
 800f438:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 800f43a:	687b      	ldr	r3, [r7, #4]
 800f43c:	891a      	ldrh	r2, [r3, #8]
 800f43e:	4b2a      	ldr	r3, [pc, #168]	; (800f4e8 <tcp_input+0x4d0>)
 800f440:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 800f442:	4a29      	ldr	r2, [pc, #164]	; (800f4e8 <tcp_input+0x4d0>)
 800f444:	687b      	ldr	r3, [r7, #4]
 800f446:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 800f448:	4b1f      	ldr	r3, [pc, #124]	; (800f4c8 <tcp_input+0x4b0>)
 800f44a:	681b      	ldr	r3, [r3, #0]
 800f44c:	4a26      	ldr	r2, [pc, #152]	; (800f4e8 <tcp_input+0x4d0>)
 800f44e:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 800f450:	4b26      	ldr	r3, [pc, #152]	; (800f4ec <tcp_input+0x4d4>)
 800f452:	2200      	movs	r2, #0
 800f454:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 800f456:	4b26      	ldr	r3, [pc, #152]	; (800f4f0 <tcp_input+0x4d8>)
 800f458:	2200      	movs	r2, #0
 800f45a:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 800f45c:	4b25      	ldr	r3, [pc, #148]	; (800f4f4 <tcp_input+0x4dc>)
 800f45e:	2200      	movs	r2, #0
 800f460:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 800f462:	4b25      	ldr	r3, [pc, #148]	; (800f4f8 <tcp_input+0x4e0>)
 800f464:	781b      	ldrb	r3, [r3, #0]
 800f466:	f003 0308 	and.w	r3, r3, #8
 800f46a:	2b00      	cmp	r3, #0
 800f46c:	d006      	beq.n	800f47c <tcp_input+0x464>
      p->flags |= PBUF_FLAG_PUSH;
 800f46e:	687b      	ldr	r3, [r7, #4]
 800f470:	7b5b      	ldrb	r3, [r3, #13]
 800f472:	f043 0301 	orr.w	r3, r3, #1
 800f476:	b2da      	uxtb	r2, r3
 800f478:	687b      	ldr	r3, [r7, #4]
 800f47a:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 800f47c:	69fb      	ldr	r3, [r7, #28]
 800f47e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f480:	2b00      	cmp	r3, #0
 800f482:	d03d      	beq.n	800f500 <tcp_input+0x4e8>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800f484:	69f8      	ldr	r0, [r7, #28]
 800f486:	f7ff fa59 	bl	800e93c <tcp_process_refused_data>
 800f48a:	4603      	mov	r3, r0
 800f48c:	f113 0f0d 	cmn.w	r3, #13
 800f490:	d007      	beq.n	800f4a2 <tcp_input+0x48a>
        ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800f492:	69fb      	ldr	r3, [r7, #28]
 800f494:	6f5b      	ldr	r3, [r3, #116]	; 0x74
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800f496:	2b00      	cmp	r3, #0
 800f498:	d032      	beq.n	800f500 <tcp_input+0x4e8>
        ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800f49a:	4b18      	ldr	r3, [pc, #96]	; (800f4fc <tcp_input+0x4e4>)
 800f49c:	881b      	ldrh	r3, [r3, #0]
 800f49e:	2b00      	cmp	r3, #0
 800f4a0:	d02e      	beq.n	800f500 <tcp_input+0x4e8>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 800f4a2:	69fb      	ldr	r3, [r7, #28]
 800f4a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800f4a6:	2b00      	cmp	r3, #0
 800f4a8:	f040 8108 	bne.w	800f6bc <tcp_input+0x6a4>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 800f4ac:	69f8      	ldr	r0, [r7, #28]
 800f4ae:	f002 fa0b 	bl	80118c8 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 800f4b2:	e103      	b.n	800f6bc <tcp_input+0x6a4>
 800f4b4:	08019894 	.word	0x08019894
 800f4b8:	0801992c 	.word	0x0801992c
 800f4bc:	080198d8 	.word	0x080198d8
 800f4c0:	08019954 	.word	0x08019954
 800f4c4:	08019980 	.word	0x08019980
 800f4c8:	20004b80 	.word	0x20004b80
 800f4cc:	20007e80 	.word	0x20007e80
 800f4d0:	080199a8 	.word	0x080199a8
 800f4d4:	2000b5b0 	.word	0x2000b5b0
 800f4d8:	080199d4 	.word	0x080199d4
 800f4dc:	2000b5c0 	.word	0x2000b5c0
 800f4e0:	08019a00 	.word	0x08019a00
 800f4e4:	2000b5b8 	.word	0x2000b5b8
 800f4e8:	20004b70 	.word	0x20004b70
 800f4ec:	20004ba0 	.word	0x20004ba0
 800f4f0:	20004b9d 	.word	0x20004b9d
 800f4f4:	20004b98 	.word	0x20004b98
 800f4f8:	20004b9c 	.word	0x20004b9c
 800f4fc:	20004b9a 	.word	0x20004b9a
      }
    }
    tcp_input_pcb = pcb;
 800f500:	4a98      	ldr	r2, [pc, #608]	; (800f764 <tcp_input+0x74c>)
 800f502:	69fb      	ldr	r3, [r7, #28]
 800f504:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 800f506:	69f8      	ldr	r0, [r7, #28]
 800f508:	f000 fac6 	bl	800fa98 <tcp_process>
 800f50c:	4603      	mov	r3, r0
 800f50e:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 800f510:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800f514:	f113 0f0d 	cmn.w	r3, #13
 800f518:	f000 80d2 	beq.w	800f6c0 <tcp_input+0x6a8>
      if (recv_flags & TF_RESET) {
 800f51c:	4b92      	ldr	r3, [pc, #584]	; (800f768 <tcp_input+0x750>)
 800f51e:	781b      	ldrb	r3, [r3, #0]
 800f520:	f003 0308 	and.w	r3, r3, #8
 800f524:	2b00      	cmp	r3, #0
 800f526:	d016      	beq.n	800f556 <tcp_input+0x53e>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 800f528:	69fb      	ldr	r3, [r7, #28]
 800f52a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800f52e:	2b00      	cmp	r3, #0
 800f530:	d008      	beq.n	800f544 <tcp_input+0x52c>
 800f532:	69fb      	ldr	r3, [r7, #28]
 800f534:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800f538:	69fa      	ldr	r2, [r7, #28]
 800f53a:	6912      	ldr	r2, [r2, #16]
 800f53c:	f06f 010d 	mvn.w	r1, #13
 800f540:	4610      	mov	r0, r2
 800f542:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800f544:	69f9      	ldr	r1, [r7, #28]
 800f546:	4889      	ldr	r0, [pc, #548]	; (800f76c <tcp_input+0x754>)
 800f548:	f7ff fc4c 	bl	800ede4 <tcp_pcb_remove>
        memp_free(MEMP_TCP_PCB, pcb);
 800f54c:	69f9      	ldr	r1, [r7, #28]
 800f54e:	2001      	movs	r0, #1
 800f550:	f7fd fbac 	bl	800ccac <memp_free>
 800f554:	e0bf      	b.n	800f6d6 <tcp_input+0x6be>
      } else {
        err = ERR_OK;
 800f556:	2300      	movs	r3, #0
 800f558:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 800f55a:	4b85      	ldr	r3, [pc, #532]	; (800f770 <tcp_input+0x758>)
 800f55c:	881b      	ldrh	r3, [r3, #0]
 800f55e:	2b00      	cmp	r3, #0
 800f560:	d01b      	beq.n	800f59a <tcp_input+0x582>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 800f562:	4b83      	ldr	r3, [pc, #524]	; (800f770 <tcp_input+0x758>)
 800f564:	881b      	ldrh	r3, [r3, #0]
 800f566:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 800f568:	69fb      	ldr	r3, [r7, #28]
 800f56a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f56c:	2b00      	cmp	r3, #0
 800f56e:	d009      	beq.n	800f584 <tcp_input+0x56c>
 800f570:	69fb      	ldr	r3, [r7, #28]
 800f572:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f574:	69fa      	ldr	r2, [r7, #28]
 800f576:	6910      	ldr	r0, [r2, #16]
 800f578:	89fa      	ldrh	r2, [r7, #14]
 800f57a:	69f9      	ldr	r1, [r7, #28]
 800f57c:	4798      	blx	r3
 800f57e:	4603      	mov	r3, r0
 800f580:	74fb      	strb	r3, [r7, #19]
 800f582:	e001      	b.n	800f588 <tcp_input+0x570>
 800f584:	2300      	movs	r3, #0
 800f586:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800f588:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800f58c:	f113 0f0d 	cmn.w	r3, #13
 800f590:	f000 8098 	beq.w	800f6c4 <tcp_input+0x6ac>
              goto aborted;
            }
          }
          recv_acked = 0;
 800f594:	4b76      	ldr	r3, [pc, #472]	; (800f770 <tcp_input+0x758>)
 800f596:	2200      	movs	r2, #0
 800f598:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 800f59a:	69f8      	ldr	r0, [r7, #28]
 800f59c:	f000 f900 	bl	800f7a0 <tcp_input_delayed_close>
 800f5a0:	4603      	mov	r3, r0
 800f5a2:	2b00      	cmp	r3, #0
 800f5a4:	f040 8090 	bne.w	800f6c8 <tcp_input+0x6b0>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 800f5a8:	4b72      	ldr	r3, [pc, #456]	; (800f774 <tcp_input+0x75c>)
 800f5aa:	681b      	ldr	r3, [r3, #0]
 800f5ac:	2b00      	cmp	r3, #0
 800f5ae:	d041      	beq.n	800f634 <tcp_input+0x61c>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 800f5b0:	69fb      	ldr	r3, [r7, #28]
 800f5b2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f5b4:	2b00      	cmp	r3, #0
 800f5b6:	d006      	beq.n	800f5c6 <tcp_input+0x5ae>
 800f5b8:	4b6f      	ldr	r3, [pc, #444]	; (800f778 <tcp_input+0x760>)
 800f5ba:	f44f 72d2 	mov.w	r2, #420	; 0x1a4
 800f5be:	496f      	ldr	r1, [pc, #444]	; (800f77c <tcp_input+0x764>)
 800f5c0:	486f      	ldr	r0, [pc, #444]	; (800f780 <tcp_input+0x768>)
 800f5c2:	f008 fba3 	bl	8017d0c <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 800f5c6:	69fb      	ldr	r3, [r7, #28]
 800f5c8:	7e9b      	ldrb	r3, [r3, #26]
 800f5ca:	f003 0310 	and.w	r3, r3, #16
 800f5ce:	2b00      	cmp	r3, #0
 800f5d0:	d008      	beq.n	800f5e4 <tcp_input+0x5cc>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 800f5d2:	4b68      	ldr	r3, [pc, #416]	; (800f774 <tcp_input+0x75c>)
 800f5d4:	681b      	ldr	r3, [r3, #0]
 800f5d6:	4618      	mov	r0, r3
 800f5d8:	f7fe f8ca 	bl	800d770 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 800f5dc:	69f8      	ldr	r0, [r7, #28]
 800f5de:	f7fe fdd5 	bl	800e18c <tcp_abort>
            goto aborted;
 800f5e2:	e078      	b.n	800f6d6 <tcp_input+0x6be>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 800f5e4:	69fb      	ldr	r3, [r7, #28]
 800f5e6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800f5ea:	2b00      	cmp	r3, #0
 800f5ec:	d00c      	beq.n	800f608 <tcp_input+0x5f0>
 800f5ee:	69fb      	ldr	r3, [r7, #28]
 800f5f0:	f8d3 4080 	ldr.w	r4, [r3, #128]	; 0x80
 800f5f4:	69fb      	ldr	r3, [r7, #28]
 800f5f6:	6918      	ldr	r0, [r3, #16]
 800f5f8:	4b5e      	ldr	r3, [pc, #376]	; (800f774 <tcp_input+0x75c>)
 800f5fa:	681a      	ldr	r2, [r3, #0]
 800f5fc:	2300      	movs	r3, #0
 800f5fe:	69f9      	ldr	r1, [r7, #28]
 800f600:	47a0      	blx	r4
 800f602:	4603      	mov	r3, r0
 800f604:	74fb      	strb	r3, [r7, #19]
 800f606:	e008      	b.n	800f61a <tcp_input+0x602>
 800f608:	4b5a      	ldr	r3, [pc, #360]	; (800f774 <tcp_input+0x75c>)
 800f60a:	681a      	ldr	r2, [r3, #0]
 800f60c:	2300      	movs	r3, #0
 800f60e:	69f9      	ldr	r1, [r7, #28]
 800f610:	2000      	movs	r0, #0
 800f612:	f7ff fa44 	bl	800ea9e <tcp_recv_null>
 800f616:	4603      	mov	r3, r0
 800f618:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 800f61a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800f61e:	f113 0f0d 	cmn.w	r3, #13
 800f622:	d053      	beq.n	800f6cc <tcp_input+0x6b4>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 800f624:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800f628:	2b00      	cmp	r3, #0
 800f62a:	d003      	beq.n	800f634 <tcp_input+0x61c>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 800f62c:	4b51      	ldr	r3, [pc, #324]	; (800f774 <tcp_input+0x75c>)
 800f62e:	681a      	ldr	r2, [r3, #0]
 800f630:	69fb      	ldr	r3, [r7, #28]
 800f632:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 800f634:	4b4c      	ldr	r3, [pc, #304]	; (800f768 <tcp_input+0x750>)
 800f636:	781b      	ldrb	r3, [r3, #0]
 800f638:	f003 0320 	and.w	r3, r3, #32
 800f63c:	2b00      	cmp	r3, #0
 800f63e:	d030      	beq.n	800f6a2 <tcp_input+0x68a>
          if (pcb->refused_data != NULL) {
 800f640:	69fb      	ldr	r3, [r7, #28]
 800f642:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f644:	2b00      	cmp	r3, #0
 800f646:	d009      	beq.n	800f65c <tcp_input+0x644>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 800f648:	69fb      	ldr	r3, [r7, #28]
 800f64a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f64c:	7b5a      	ldrb	r2, [r3, #13]
 800f64e:	69fb      	ldr	r3, [r7, #28]
 800f650:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f652:	f042 0220 	orr.w	r2, r2, #32
 800f656:	b2d2      	uxtb	r2, r2
 800f658:	735a      	strb	r2, [r3, #13]
 800f65a:	e022      	b.n	800f6a2 <tcp_input+0x68a>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800f65c:	69fb      	ldr	r3, [r7, #28]
 800f65e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800f660:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800f664:	d005      	beq.n	800f672 <tcp_input+0x65a>
              pcb->rcv_wnd++;
 800f666:	69fb      	ldr	r3, [r7, #28]
 800f668:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800f66a:	3301      	adds	r3, #1
 800f66c:	b29a      	uxth	r2, r3
 800f66e:	69fb      	ldr	r3, [r7, #28]
 800f670:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 800f672:	69fb      	ldr	r3, [r7, #28]
 800f674:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800f678:	2b00      	cmp	r3, #0
 800f67a:	d00b      	beq.n	800f694 <tcp_input+0x67c>
 800f67c:	69fb      	ldr	r3, [r7, #28]
 800f67e:	f8d3 4080 	ldr.w	r4, [r3, #128]	; 0x80
 800f682:	69fb      	ldr	r3, [r7, #28]
 800f684:	6918      	ldr	r0, [r3, #16]
 800f686:	2300      	movs	r3, #0
 800f688:	2200      	movs	r2, #0
 800f68a:	69f9      	ldr	r1, [r7, #28]
 800f68c:	47a0      	blx	r4
 800f68e:	4603      	mov	r3, r0
 800f690:	74fb      	strb	r3, [r7, #19]
 800f692:	e001      	b.n	800f698 <tcp_input+0x680>
 800f694:	2300      	movs	r3, #0
 800f696:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800f698:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800f69c:	f113 0f0d 	cmn.w	r3, #13
 800f6a0:	d016      	beq.n	800f6d0 <tcp_input+0x6b8>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 800f6a2:	4b30      	ldr	r3, [pc, #192]	; (800f764 <tcp_input+0x74c>)
 800f6a4:	2200      	movs	r2, #0
 800f6a6:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 800f6a8:	69f8      	ldr	r0, [r7, #28]
 800f6aa:	f000 f879 	bl	800f7a0 <tcp_input_delayed_close>
 800f6ae:	4603      	mov	r3, r0
 800f6b0:	2b00      	cmp	r3, #0
 800f6b2:	d10f      	bne.n	800f6d4 <tcp_input+0x6bc>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 800f6b4:	69f8      	ldr	r0, [r7, #28]
 800f6b6:	f002 f963 	bl	8011980 <tcp_output>
 800f6ba:	e00c      	b.n	800f6d6 <tcp_input+0x6be>
        goto aborted;
 800f6bc:	bf00      	nop
 800f6be:	e00a      	b.n	800f6d6 <tcp_input+0x6be>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 800f6c0:	bf00      	nop
 800f6c2:	e008      	b.n	800f6d6 <tcp_input+0x6be>
              goto aborted;
 800f6c4:	bf00      	nop
 800f6c6:	e006      	b.n	800f6d6 <tcp_input+0x6be>
          goto aborted;
 800f6c8:	bf00      	nop
 800f6ca:	e004      	b.n	800f6d6 <tcp_input+0x6be>
            goto aborted;
 800f6cc:	bf00      	nop
 800f6ce:	e002      	b.n	800f6d6 <tcp_input+0x6be>
              goto aborted;
 800f6d0:	bf00      	nop
 800f6d2:	e000      	b.n	800f6d6 <tcp_input+0x6be>
          goto aborted;
 800f6d4:	bf00      	nop
    tcp_input_pcb = NULL;
 800f6d6:	4b23      	ldr	r3, [pc, #140]	; (800f764 <tcp_input+0x74c>)
 800f6d8:	2200      	movs	r2, #0
 800f6da:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 800f6dc:	4b25      	ldr	r3, [pc, #148]	; (800f774 <tcp_input+0x75c>)
 800f6de:	2200      	movs	r2, #0
 800f6e0:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL)
 800f6e2:	4b28      	ldr	r3, [pc, #160]	; (800f784 <tcp_input+0x76c>)
 800f6e4:	685b      	ldr	r3, [r3, #4]
 800f6e6:	2b00      	cmp	r3, #0
 800f6e8:	d037      	beq.n	800f75a <tcp_input+0x742>
    {
      pbuf_free(inseg.p);
 800f6ea:	4b26      	ldr	r3, [pc, #152]	; (800f784 <tcp_input+0x76c>)
 800f6ec:	685b      	ldr	r3, [r3, #4]
 800f6ee:	4618      	mov	r0, r3
 800f6f0:	f7fe f83e 	bl	800d770 <pbuf_free>
      inseg.p = NULL;
 800f6f4:	4b23      	ldr	r3, [pc, #140]	; (800f784 <tcp_input+0x76c>)
 800f6f6:	2200      	movs	r2, #0
 800f6f8:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 800f6fa:	e02e      	b.n	800f75a <tcp_input+0x742>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 800f6fc:	4b22      	ldr	r3, [pc, #136]	; (800f788 <tcp_input+0x770>)
 800f6fe:	681b      	ldr	r3, [r3, #0]
 800f700:	899b      	ldrh	r3, [r3, #12]
 800f702:	b29b      	uxth	r3, r3
 800f704:	4618      	mov	r0, r3
 800f706:	f7fc fe91 	bl	800c42c <lwip_htons>
 800f70a:	4603      	mov	r3, r0
 800f70c:	f003 0304 	and.w	r3, r3, #4
 800f710:	2b00      	cmp	r3, #0
 800f712:	d115      	bne.n	800f740 <tcp_input+0x728>
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800f714:	4b1d      	ldr	r3, [pc, #116]	; (800f78c <tcp_input+0x774>)
 800f716:	6818      	ldr	r0, [r3, #0]
 800f718:	4b1d      	ldr	r3, [pc, #116]	; (800f790 <tcp_input+0x778>)
 800f71a:	881b      	ldrh	r3, [r3, #0]
 800f71c:	461a      	mov	r2, r3
 800f71e:	4b1d      	ldr	r3, [pc, #116]	; (800f794 <tcp_input+0x77c>)
 800f720:	681b      	ldr	r3, [r3, #0]
 800f722:	18d1      	adds	r1, r2, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800f724:	4b18      	ldr	r3, [pc, #96]	; (800f788 <tcp_input+0x770>)
 800f726:	681b      	ldr	r3, [r3, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800f728:	885b      	ldrh	r3, [r3, #2]
 800f72a:	b29b      	uxth	r3, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800f72c:	4a16      	ldr	r2, [pc, #88]	; (800f788 <tcp_input+0x770>)
 800f72e:	6812      	ldr	r2, [r2, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800f730:	8812      	ldrh	r2, [r2, #0]
 800f732:	b292      	uxth	r2, r2
 800f734:	9201      	str	r2, [sp, #4]
 800f736:	9300      	str	r3, [sp, #0]
 800f738:	4b17      	ldr	r3, [pc, #92]	; (800f798 <tcp_input+0x780>)
 800f73a:	4a18      	ldr	r2, [pc, #96]	; (800f79c <tcp_input+0x784>)
 800f73c:	f002 fbaa 	bl	8011e94 <tcp_rst>
    pbuf_free(p);
 800f740:	6878      	ldr	r0, [r7, #4]
 800f742:	f7fe f815 	bl	800d770 <pbuf_free>
  return;
 800f746:	e008      	b.n	800f75a <tcp_input+0x742>
    goto dropped;
 800f748:	bf00      	nop
 800f74a:	e002      	b.n	800f752 <tcp_input+0x73a>
dropped:
 800f74c:	bf00      	nop
 800f74e:	e000      	b.n	800f752 <tcp_input+0x73a>
      goto dropped;
 800f750:	bf00      	nop
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 800f752:	6878      	ldr	r0, [r7, #4]
 800f754:	f7fe f80c 	bl	800d770 <pbuf_free>
 800f758:	e000      	b.n	800f75c <tcp_input+0x744>
  return;
 800f75a:	bf00      	nop
}
 800f75c:	3724      	adds	r7, #36	; 0x24
 800f75e:	46bd      	mov	sp, r7
 800f760:	bd90      	pop	{r4, r7, pc}
 800f762:	bf00      	nop
 800f764:	2000b5c4 	.word	0x2000b5c4
 800f768:	20004b9d 	.word	0x20004b9d
 800f76c:	2000b5b0 	.word	0x2000b5b0
 800f770:	20004b98 	.word	0x20004b98
 800f774:	20004ba0 	.word	0x20004ba0
 800f778:	08019894 	.word	0x08019894
 800f77c:	08019a30 	.word	0x08019a30
 800f780:	080198d8 	.word	0x080198d8
 800f784:	20004b70 	.word	0x20004b70
 800f788:	20004b80 	.word	0x20004b80
 800f78c:	20004b94 	.word	0x20004b94
 800f790:	20004b9a 	.word	0x20004b9a
 800f794:	20004b90 	.word	0x20004b90
 800f798:	20007e90 	.word	0x20007e90
 800f79c:	20007e94 	.word	0x20007e94

0800f7a0 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 800f7a0:	b580      	push	{r7, lr}
 800f7a2:	b082      	sub	sp, #8
 800f7a4:	af00      	add	r7, sp, #0
 800f7a6:	6078      	str	r0, [r7, #4]
  if (recv_flags & TF_CLOSED) {
 800f7a8:	4b14      	ldr	r3, [pc, #80]	; (800f7fc <tcp_input_delayed_close+0x5c>)
 800f7aa:	781b      	ldrb	r3, [r3, #0]
 800f7ac:	f003 0310 	and.w	r3, r3, #16
 800f7b0:	2b00      	cmp	r3, #0
 800f7b2:	d01d      	beq.n	800f7f0 <tcp_input_delayed_close+0x50>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 800f7b4:	687b      	ldr	r3, [r7, #4]
 800f7b6:	7e9b      	ldrb	r3, [r3, #26]
 800f7b8:	f003 0310 	and.w	r3, r3, #16
 800f7bc:	2b00      	cmp	r3, #0
 800f7be:	d10d      	bne.n	800f7dc <tcp_input_delayed_close+0x3c>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 800f7c0:	687b      	ldr	r3, [r7, #4]
 800f7c2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800f7c6:	2b00      	cmp	r3, #0
 800f7c8:	d008      	beq.n	800f7dc <tcp_input_delayed_close+0x3c>
 800f7ca:	687b      	ldr	r3, [r7, #4]
 800f7cc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800f7d0:	687a      	ldr	r2, [r7, #4]
 800f7d2:	6912      	ldr	r2, [r2, #16]
 800f7d4:	f06f 010e 	mvn.w	r1, #14
 800f7d8:	4610      	mov	r0, r2
 800f7da:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800f7dc:	6879      	ldr	r1, [r7, #4]
 800f7de:	4808      	ldr	r0, [pc, #32]	; (800f800 <tcp_input_delayed_close+0x60>)
 800f7e0:	f7ff fb00 	bl	800ede4 <tcp_pcb_remove>
    memp_free(MEMP_TCP_PCB, pcb);
 800f7e4:	6879      	ldr	r1, [r7, #4]
 800f7e6:	2001      	movs	r0, #1
 800f7e8:	f7fd fa60 	bl	800ccac <memp_free>
    return 1;
 800f7ec:	2301      	movs	r3, #1
 800f7ee:	e000      	b.n	800f7f2 <tcp_input_delayed_close+0x52>
  }
  return 0;
 800f7f0:	2300      	movs	r3, #0
}
 800f7f2:	4618      	mov	r0, r3
 800f7f4:	3708      	adds	r7, #8
 800f7f6:	46bd      	mov	sp, r7
 800f7f8:	bd80      	pop	{r7, pc}
 800f7fa:	bf00      	nop
 800f7fc:	20004b9d 	.word	0x20004b9d
 800f800:	2000b5b0 	.word	0x2000b5b0

0800f804 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 800f804:	b580      	push	{r7, lr}
 800f806:	b088      	sub	sp, #32
 800f808:	af02      	add	r7, sp, #8
 800f80a:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 800f80c:	4b64      	ldr	r3, [pc, #400]	; (800f9a0 <tcp_listen_input+0x19c>)
 800f80e:	781b      	ldrb	r3, [r3, #0]
 800f810:	f003 0304 	and.w	r3, r3, #4
 800f814:	2b00      	cmp	r3, #0
 800f816:	f040 80bc 	bne.w	800f992 <tcp_listen_input+0x18e>
    return;
  }

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 800f81a:	4b61      	ldr	r3, [pc, #388]	; (800f9a0 <tcp_listen_input+0x19c>)
 800f81c:	781b      	ldrb	r3, [r3, #0]
 800f81e:	f003 0310 	and.w	r3, r3, #16
 800f822:	2b00      	cmp	r3, #0
 800f824:	d016      	beq.n	800f854 <tcp_listen_input+0x50>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800f826:	4b5f      	ldr	r3, [pc, #380]	; (800f9a4 <tcp_listen_input+0x1a0>)
 800f828:	6818      	ldr	r0, [r3, #0]
 800f82a:	4b5f      	ldr	r3, [pc, #380]	; (800f9a8 <tcp_listen_input+0x1a4>)
 800f82c:	881b      	ldrh	r3, [r3, #0]
 800f82e:	461a      	mov	r2, r3
 800f830:	4b5e      	ldr	r3, [pc, #376]	; (800f9ac <tcp_listen_input+0x1a8>)
 800f832:	681b      	ldr	r3, [r3, #0]
 800f834:	18d1      	adds	r1, r2, r3
      ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800f836:	4b5e      	ldr	r3, [pc, #376]	; (800f9b0 <tcp_listen_input+0x1ac>)
 800f838:	681b      	ldr	r3, [r3, #0]
    tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800f83a:	885b      	ldrh	r3, [r3, #2]
 800f83c:	b29b      	uxth	r3, r3
      ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800f83e:	4a5c      	ldr	r2, [pc, #368]	; (800f9b0 <tcp_listen_input+0x1ac>)
 800f840:	6812      	ldr	r2, [r2, #0]
    tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800f842:	8812      	ldrh	r2, [r2, #0]
 800f844:	b292      	uxth	r2, r2
 800f846:	9201      	str	r2, [sp, #4]
 800f848:	9300      	str	r3, [sp, #0]
 800f84a:	4b5a      	ldr	r3, [pc, #360]	; (800f9b4 <tcp_listen_input+0x1b0>)
 800f84c:	4a5a      	ldr	r2, [pc, #360]	; (800f9b8 <tcp_listen_input+0x1b4>)
 800f84e:	f002 fb21 	bl	8011e94 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 800f852:	e0a0      	b.n	800f996 <tcp_listen_input+0x192>
  } else if (flags & TCP_SYN) {
 800f854:	4b52      	ldr	r3, [pc, #328]	; (800f9a0 <tcp_listen_input+0x19c>)
 800f856:	781b      	ldrb	r3, [r3, #0]
 800f858:	f003 0302 	and.w	r3, r3, #2
 800f85c:	2b00      	cmp	r3, #0
 800f85e:	f000 809a 	beq.w	800f996 <tcp_listen_input+0x192>
    npcb = tcp_alloc(pcb->prio);
 800f862:	687b      	ldr	r3, [r7, #4]
 800f864:	7d5b      	ldrb	r3, [r3, #21]
 800f866:	4618      	mov	r0, r3
 800f868:	f7ff f9f8 	bl	800ec5c <tcp_alloc>
 800f86c:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 800f86e:	697b      	ldr	r3, [r7, #20]
 800f870:	2b00      	cmp	r3, #0
 800f872:	d111      	bne.n	800f898 <tcp_listen_input+0x94>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800f874:	687b      	ldr	r3, [r7, #4]
 800f876:	699b      	ldr	r3, [r3, #24]
 800f878:	2b00      	cmp	r3, #0
 800f87a:	d00a      	beq.n	800f892 <tcp_listen_input+0x8e>
 800f87c:	687b      	ldr	r3, [r7, #4]
 800f87e:	699b      	ldr	r3, [r3, #24]
 800f880:	687a      	ldr	r2, [r7, #4]
 800f882:	6910      	ldr	r0, [r2, #16]
 800f884:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800f888:	2100      	movs	r1, #0
 800f88a:	4798      	blx	r3
 800f88c:	4603      	mov	r3, r0
 800f88e:	73bb      	strb	r3, [r7, #14]
      return;
 800f890:	e082      	b.n	800f998 <tcp_listen_input+0x194>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800f892:	23f0      	movs	r3, #240	; 0xf0
 800f894:	73bb      	strb	r3, [r7, #14]
      return;
 800f896:	e07f      	b.n	800f998 <tcp_listen_input+0x194>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 800f898:	4b48      	ldr	r3, [pc, #288]	; (800f9bc <tcp_listen_input+0x1b8>)
 800f89a:	695a      	ldr	r2, [r3, #20]
 800f89c:	697b      	ldr	r3, [r7, #20]
 800f89e:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 800f8a0:	4b46      	ldr	r3, [pc, #280]	; (800f9bc <tcp_listen_input+0x1b8>)
 800f8a2:	691a      	ldr	r2, [r3, #16]
 800f8a4:	697b      	ldr	r3, [r7, #20]
 800f8a6:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 800f8a8:	687b      	ldr	r3, [r7, #4]
 800f8aa:	8ada      	ldrh	r2, [r3, #22]
 800f8ac:	697b      	ldr	r3, [r7, #20]
 800f8ae:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 800f8b0:	4b3f      	ldr	r3, [pc, #252]	; (800f9b0 <tcp_listen_input+0x1ac>)
 800f8b2:	681b      	ldr	r3, [r3, #0]
 800f8b4:	881b      	ldrh	r3, [r3, #0]
 800f8b6:	b29a      	uxth	r2, r3
 800f8b8:	697b      	ldr	r3, [r7, #20]
 800f8ba:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 800f8bc:	697b      	ldr	r3, [r7, #20]
 800f8be:	2203      	movs	r2, #3
 800f8c0:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 800f8c2:	4b3a      	ldr	r3, [pc, #232]	; (800f9ac <tcp_listen_input+0x1a8>)
 800f8c4:	681b      	ldr	r3, [r3, #0]
 800f8c6:	1c5a      	adds	r2, r3, #1
 800f8c8:	697b      	ldr	r3, [r7, #20]
 800f8ca:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 800f8cc:	697b      	ldr	r3, [r7, #20]
 800f8ce:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800f8d0:	697b      	ldr	r3, [r7, #20]
 800f8d2:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 800f8d4:	6978      	ldr	r0, [r7, #20]
 800f8d6:	f7ff fb01 	bl	800eedc <tcp_next_iss>
 800f8da:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 800f8dc:	697b      	ldr	r3, [r7, #20]
 800f8de:	693a      	ldr	r2, [r7, #16]
 800f8e0:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->snd_nxt = iss;
 800f8e2:	697b      	ldr	r3, [r7, #20]
 800f8e4:	693a      	ldr	r2, [r7, #16]
 800f8e6:	64da      	str	r2, [r3, #76]	; 0x4c
    npcb->lastack = iss;
 800f8e8:	697b      	ldr	r3, [r7, #20]
 800f8ea:	693a      	ldr	r2, [r7, #16]
 800f8ec:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 800f8ee:	697b      	ldr	r3, [r7, #20]
 800f8f0:	693a      	ldr	r2, [r7, #16]
 800f8f2:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 800f8f4:	4b2d      	ldr	r3, [pc, #180]	; (800f9ac <tcp_listen_input+0x1a8>)
 800f8f6:	681b      	ldr	r3, [r3, #0]
 800f8f8:	1e5a      	subs	r2, r3, #1
 800f8fa:	697b      	ldr	r3, [r7, #20]
 800f8fc:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->callback_arg = pcb->callback_arg;
 800f8fe:	687b      	ldr	r3, [r7, #4]
 800f900:	691a      	ldr	r2, [r3, #16]
 800f902:	697b      	ldr	r3, [r7, #20]
 800f904:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 800f906:	697b      	ldr	r3, [r7, #20]
 800f908:	687a      	ldr	r2, [r7, #4]
 800f90a:	679a      	str	r2, [r3, #120]	; 0x78
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 800f90c:	687b      	ldr	r3, [r7, #4]
 800f90e:	7a1b      	ldrb	r3, [r3, #8]
 800f910:	f003 030c 	and.w	r3, r3, #12
 800f914:	b2da      	uxtb	r2, r3
 800f916:	697b      	ldr	r3, [r7, #20]
 800f918:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 800f91a:	4b29      	ldr	r3, [pc, #164]	; (800f9c0 <tcp_listen_input+0x1bc>)
 800f91c:	681a      	ldr	r2, [r3, #0]
 800f91e:	697b      	ldr	r3, [r7, #20]
 800f920:	60da      	str	r2, [r3, #12]
 800f922:	4a27      	ldr	r2, [pc, #156]	; (800f9c0 <tcp_listen_input+0x1bc>)
 800f924:	697b      	ldr	r3, [r7, #20]
 800f926:	6013      	str	r3, [r2, #0]
 800f928:	f002 fd04 	bl	8012334 <tcp_timer_needed>
 800f92c:	4b25      	ldr	r3, [pc, #148]	; (800f9c4 <tcp_listen_input+0x1c0>)
 800f92e:	2201      	movs	r2, #1
 800f930:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 800f932:	6978      	ldr	r0, [r7, #20]
 800f934:	f001 fd14 	bl	8011360 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 800f938:	4b1d      	ldr	r3, [pc, #116]	; (800f9b0 <tcp_listen_input+0x1ac>)
 800f93a:	681b      	ldr	r3, [r3, #0]
 800f93c:	89db      	ldrh	r3, [r3, #14]
 800f93e:	b29a      	uxth	r2, r3
 800f940:	697b      	ldr	r3, [r7, #20]
 800f942:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    npcb->snd_wnd_max = npcb->snd_wnd;
 800f946:	697b      	ldr	r3, [r7, #20]
 800f948:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800f94c:	697b      	ldr	r3, [r7, #20]
 800f94e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 800f952:	697b      	ldr	r3, [r7, #20]
 800f954:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 800f956:	697b      	ldr	r3, [r7, #20]
 800f958:	3304      	adds	r3, #4
 800f95a:	4619      	mov	r1, r3
 800f95c:	4610      	mov	r0, r2
 800f95e:	f7ff fad5 	bl	800ef0c <tcp_eff_send_mss_impl>
 800f962:	4603      	mov	r3, r0
 800f964:	461a      	mov	r2, r3
 800f966:	697b      	ldr	r3, [r7, #20]
 800f968:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 800f96a:	2112      	movs	r1, #18
 800f96c:	6978      	ldr	r0, [r7, #20]
 800f96e:	f001 feaf 	bl	80116d0 <tcp_enqueue_flags>
 800f972:	4603      	mov	r3, r0
 800f974:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 800f976:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f97a:	2b00      	cmp	r3, #0
 800f97c:	d004      	beq.n	800f988 <tcp_listen_input+0x184>
      tcp_abandon(npcb, 0);
 800f97e:	2100      	movs	r1, #0
 800f980:	6978      	ldr	r0, [r7, #20]
 800f982:	f7fe fb51 	bl	800e028 <tcp_abandon>
      return;
 800f986:	e007      	b.n	800f998 <tcp_listen_input+0x194>
    tcp_output(npcb);
 800f988:	6978      	ldr	r0, [r7, #20]
 800f98a:	f001 fff9 	bl	8011980 <tcp_output>
  return;
 800f98e:	bf00      	nop
 800f990:	e001      	b.n	800f996 <tcp_listen_input+0x192>
    return;
 800f992:	bf00      	nop
 800f994:	e000      	b.n	800f998 <tcp_listen_input+0x194>
  return;
 800f996:	bf00      	nop
}
 800f998:	3718      	adds	r7, #24
 800f99a:	46bd      	mov	sp, r7
 800f99c:	bd80      	pop	{r7, pc}
 800f99e:	bf00      	nop
 800f9a0:	20004b9c 	.word	0x20004b9c
 800f9a4:	20004b94 	.word	0x20004b94
 800f9a8:	20004b9a 	.word	0x20004b9a
 800f9ac:	20004b90 	.word	0x20004b90
 800f9b0:	20004b80 	.word	0x20004b80
 800f9b4:	20007e90 	.word	0x20007e90
 800f9b8:	20007e94 	.word	0x20007e94
 800f9bc:	20007e80 	.word	0x20007e80
 800f9c0:	2000b5b0 	.word	0x2000b5b0
 800f9c4:	2000b5ac 	.word	0x2000b5ac

0800f9c8 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 800f9c8:	b580      	push	{r7, lr}
 800f9ca:	b084      	sub	sp, #16
 800f9cc:	af02      	add	r7, sp, #8
 800f9ce:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 800f9d0:	4b29      	ldr	r3, [pc, #164]	; (800fa78 <tcp_timewait_input+0xb0>)
 800f9d2:	781b      	ldrb	r3, [r3, #0]
 800f9d4:	f003 0304 	and.w	r3, r3, #4
 800f9d8:	2b00      	cmp	r3, #0
 800f9da:	d147      	bne.n	800fa6c <tcp_timewait_input+0xa4>
    return;
  }
  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 800f9dc:	4b26      	ldr	r3, [pc, #152]	; (800fa78 <tcp_timewait_input+0xb0>)
 800f9de:	781b      	ldrb	r3, [r3, #0]
 800f9e0:	f003 0302 	and.w	r3, r3, #2
 800f9e4:	2b00      	cmp	r3, #0
 800f9e6:	d027      	beq.n	800fa38 <tcp_timewait_input+0x70>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 800f9e8:	4b24      	ldr	r3, [pc, #144]	; (800fa7c <tcp_timewait_input+0xb4>)
 800f9ea:	681a      	ldr	r2, [r3, #0]
 800f9ec:	687b      	ldr	r3, [r7, #4]
 800f9ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f9f0:	1ad3      	subs	r3, r2, r3
 800f9f2:	2b00      	cmp	r3, #0
 800f9f4:	db2a      	blt.n	800fa4c <tcp_timewait_input+0x84>
 800f9f6:	4b21      	ldr	r3, [pc, #132]	; (800fa7c <tcp_timewait_input+0xb4>)
 800f9f8:	681a      	ldr	r2, [r3, #0]
 800f9fa:	687b      	ldr	r3, [r7, #4]
 800f9fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f9fe:	6879      	ldr	r1, [r7, #4]
 800fa00:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800fa02:	440b      	add	r3, r1
 800fa04:	1ad3      	subs	r3, r2, r3
 800fa06:	2b00      	cmp	r3, #0
 800fa08:	dc20      	bgt.n	800fa4c <tcp_timewait_input+0x84>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800fa0a:	4b1d      	ldr	r3, [pc, #116]	; (800fa80 <tcp_timewait_input+0xb8>)
 800fa0c:	6818      	ldr	r0, [r3, #0]
 800fa0e:	4b1d      	ldr	r3, [pc, #116]	; (800fa84 <tcp_timewait_input+0xbc>)
 800fa10:	881b      	ldrh	r3, [r3, #0]
 800fa12:	461a      	mov	r2, r3
 800fa14:	4b19      	ldr	r3, [pc, #100]	; (800fa7c <tcp_timewait_input+0xb4>)
 800fa16:	681b      	ldr	r3, [r3, #0]
 800fa18:	18d1      	adds	r1, r2, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800fa1a:	4b1b      	ldr	r3, [pc, #108]	; (800fa88 <tcp_timewait_input+0xc0>)
 800fa1c:	681b      	ldr	r3, [r3, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800fa1e:	885b      	ldrh	r3, [r3, #2]
 800fa20:	b29b      	uxth	r3, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800fa22:	4a19      	ldr	r2, [pc, #100]	; (800fa88 <tcp_timewait_input+0xc0>)
 800fa24:	6812      	ldr	r2, [r2, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800fa26:	8812      	ldrh	r2, [r2, #0]
 800fa28:	b292      	uxth	r2, r2
 800fa2a:	9201      	str	r2, [sp, #4]
 800fa2c:	9300      	str	r3, [sp, #0]
 800fa2e:	4b17      	ldr	r3, [pc, #92]	; (800fa8c <tcp_timewait_input+0xc4>)
 800fa30:	4a17      	ldr	r2, [pc, #92]	; (800fa90 <tcp_timewait_input+0xc8>)
 800fa32:	f002 fa2f 	bl	8011e94 <tcp_rst>
      return;
 800fa36:	e01c      	b.n	800fa72 <tcp_timewait_input+0xaa>
    }
  } else if (flags & TCP_FIN) {
 800fa38:	4b0f      	ldr	r3, [pc, #60]	; (800fa78 <tcp_timewait_input+0xb0>)
 800fa3a:	781b      	ldrb	r3, [r3, #0]
 800fa3c:	f003 0301 	and.w	r3, r3, #1
 800fa40:	2b00      	cmp	r3, #0
 800fa42:	d003      	beq.n	800fa4c <tcp_timewait_input+0x84>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 800fa44:	4b13      	ldr	r3, [pc, #76]	; (800fa94 <tcp_timewait_input+0xcc>)
 800fa46:	681a      	ldr	r2, [r3, #0]
 800fa48:	687b      	ldr	r3, [r7, #4]
 800fa4a:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 800fa4c:	4b0d      	ldr	r3, [pc, #52]	; (800fa84 <tcp_timewait_input+0xbc>)
 800fa4e:	881b      	ldrh	r3, [r3, #0]
 800fa50:	2b00      	cmp	r3, #0
 800fa52:	d00d      	beq.n	800fa70 <tcp_timewait_input+0xa8>
    /* Acknowledge data, FIN or out-of-window SYN */
    pcb->flags |= TF_ACK_NOW;
 800fa54:	687b      	ldr	r3, [r7, #4]
 800fa56:	7e9b      	ldrb	r3, [r3, #26]
 800fa58:	f043 0302 	orr.w	r3, r3, #2
 800fa5c:	b2da      	uxtb	r2, r3
 800fa5e:	687b      	ldr	r3, [r7, #4]
 800fa60:	769a      	strb	r2, [r3, #26]
    tcp_output(pcb);
 800fa62:	6878      	ldr	r0, [r7, #4]
 800fa64:	f001 ff8c 	bl	8011980 <tcp_output>
  }
  return;
 800fa68:	bf00      	nop
 800fa6a:	e001      	b.n	800fa70 <tcp_timewait_input+0xa8>
    return;
 800fa6c:	bf00      	nop
 800fa6e:	e000      	b.n	800fa72 <tcp_timewait_input+0xaa>
  return;
 800fa70:	bf00      	nop
}
 800fa72:	3708      	adds	r7, #8
 800fa74:	46bd      	mov	sp, r7
 800fa76:	bd80      	pop	{r7, pc}
 800fa78:	20004b9c 	.word	0x20004b9c
 800fa7c:	20004b90 	.word	0x20004b90
 800fa80:	20004b94 	.word	0x20004b94
 800fa84:	20004b9a 	.word	0x20004b9a
 800fa88:	20004b80 	.word	0x20004b80
 800fa8c:	20007e90 	.word	0x20007e90
 800fa90:	20007e94 	.word	0x20007e94
 800fa94:	2000b5b4 	.word	0x2000b5b4

0800fa98 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 800fa98:	b580      	push	{r7, lr}
 800fa9a:	b08a      	sub	sp, #40	; 0x28
 800fa9c:	af02      	add	r7, sp, #8
 800fa9e:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 800faa0:	2300      	movs	r3, #0
 800faa2:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 800faa4:	2300      	movs	r3, #0
 800faa6:	76bb      	strb	r3, [r7, #26]

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 800faa8:	4ba4      	ldr	r3, [pc, #656]	; (800fd3c <tcp_process+0x2a4>)
 800faaa:	781b      	ldrb	r3, [r3, #0]
 800faac:	f003 0304 	and.w	r3, r3, #4
 800fab0:	2b00      	cmp	r3, #0
 800fab2:	d04e      	beq.n	800fb52 <tcp_process+0xba>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 800fab4:	687b      	ldr	r3, [r7, #4]
 800fab6:	7d1b      	ldrb	r3, [r3, #20]
 800fab8:	2b02      	cmp	r3, #2
 800faba:	d108      	bne.n	800face <tcp_process+0x36>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 800fabc:	687b      	ldr	r3, [r7, #4]
 800fabe:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800fac0:	4b9f      	ldr	r3, [pc, #636]	; (800fd40 <tcp_process+0x2a8>)
 800fac2:	681b      	ldr	r3, [r3, #0]
 800fac4:	429a      	cmp	r2, r3
 800fac6:	d123      	bne.n	800fb10 <tcp_process+0x78>
        acceptable = 1;
 800fac8:	2301      	movs	r3, #1
 800faca:	76fb      	strb	r3, [r7, #27]
 800facc:	e020      	b.n	800fb10 <tcp_process+0x78>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 800face:	687b      	ldr	r3, [r7, #4]
 800fad0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800fad2:	4b9c      	ldr	r3, [pc, #624]	; (800fd44 <tcp_process+0x2ac>)
 800fad4:	681b      	ldr	r3, [r3, #0]
 800fad6:	429a      	cmp	r2, r3
 800fad8:	d102      	bne.n	800fae0 <tcp_process+0x48>
        acceptable = 1;
 800fada:	2301      	movs	r3, #1
 800fadc:	76fb      	strb	r3, [r7, #27]
 800fade:	e017      	b.n	800fb10 <tcp_process+0x78>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800fae0:	4b98      	ldr	r3, [pc, #608]	; (800fd44 <tcp_process+0x2ac>)
 800fae2:	681a      	ldr	r2, [r3, #0]
 800fae4:	687b      	ldr	r3, [r7, #4]
 800fae6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fae8:	1ad3      	subs	r3, r2, r3
 800faea:	2b00      	cmp	r3, #0
 800faec:	db10      	blt.n	800fb10 <tcp_process+0x78>
 800faee:	4b95      	ldr	r3, [pc, #596]	; (800fd44 <tcp_process+0x2ac>)
 800faf0:	681a      	ldr	r2, [r3, #0]
 800faf2:	687b      	ldr	r3, [r7, #4]
 800faf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800faf6:	6879      	ldr	r1, [r7, #4]
 800faf8:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800fafa:	440b      	add	r3, r1
 800fafc:	1ad3      	subs	r3, r2, r3
 800fafe:	2b00      	cmp	r3, #0
 800fb00:	dc06      	bgt.n	800fb10 <tcp_process+0x78>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we only send an ACK
           and wait for a re-send with matching sequence number.
           This violates RFC 793, but is required to protection against
           CVE-2004-0230 (RST spoofing attack). */
        tcp_ack_now(pcb);
 800fb02:	687b      	ldr	r3, [r7, #4]
 800fb04:	7e9b      	ldrb	r3, [r3, #26]
 800fb06:	f043 0302 	orr.w	r3, r3, #2
 800fb0a:	b2da      	uxtb	r2, r3
 800fb0c:	687b      	ldr	r3, [r7, #4]
 800fb0e:	769a      	strb	r2, [r3, #26]
      }
    }

    if (acceptable) {
 800fb10:	7efb      	ldrb	r3, [r7, #27]
 800fb12:	2b00      	cmp	r3, #0
 800fb14:	d01b      	beq.n	800fb4e <tcp_process+0xb6>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 800fb16:	687b      	ldr	r3, [r7, #4]
 800fb18:	7d1b      	ldrb	r3, [r3, #20]
 800fb1a:	2b00      	cmp	r3, #0
 800fb1c:	d106      	bne.n	800fb2c <tcp_process+0x94>
 800fb1e:	4b8a      	ldr	r3, [pc, #552]	; (800fd48 <tcp_process+0x2b0>)
 800fb20:	f240 22e7 	movw	r2, #743	; 0x2e7
 800fb24:	4989      	ldr	r1, [pc, #548]	; (800fd4c <tcp_process+0x2b4>)
 800fb26:	488a      	ldr	r0, [pc, #552]	; (800fd50 <tcp_process+0x2b8>)
 800fb28:	f008 f8f0 	bl	8017d0c <iprintf>
      recv_flags |= TF_RESET;
 800fb2c:	4b89      	ldr	r3, [pc, #548]	; (800fd54 <tcp_process+0x2bc>)
 800fb2e:	781b      	ldrb	r3, [r3, #0]
 800fb30:	f043 0308 	orr.w	r3, r3, #8
 800fb34:	b2da      	uxtb	r2, r3
 800fb36:	4b87      	ldr	r3, [pc, #540]	; (800fd54 <tcp_process+0x2bc>)
 800fb38:	701a      	strb	r2, [r3, #0]
      pcb->flags &= ~TF_ACK_DELAY;
 800fb3a:	687b      	ldr	r3, [r7, #4]
 800fb3c:	7e9b      	ldrb	r3, [r3, #26]
 800fb3e:	f023 0301 	bic.w	r3, r3, #1
 800fb42:	b2da      	uxtb	r2, r3
 800fb44:	687b      	ldr	r3, [r7, #4]
 800fb46:	769a      	strb	r2, [r3, #26]
      return ERR_RST;
 800fb48:	f06f 030d 	mvn.w	r3, #13
 800fb4c:	e34d      	b.n	80101ea <tcp_process+0x752>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
       seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
       seqno, pcb->rcv_nxt));
      return ERR_OK;
 800fb4e:	2300      	movs	r3, #0
 800fb50:	e34b      	b.n	80101ea <tcp_process+0x752>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 800fb52:	4b7a      	ldr	r3, [pc, #488]	; (800fd3c <tcp_process+0x2a4>)
 800fb54:	781b      	ldrb	r3, [r3, #0]
 800fb56:	f003 0302 	and.w	r3, r3, #2
 800fb5a:	2b00      	cmp	r3, #0
 800fb5c:	d010      	beq.n	800fb80 <tcp_process+0xe8>
 800fb5e:	687b      	ldr	r3, [r7, #4]
 800fb60:	7d1b      	ldrb	r3, [r3, #20]
 800fb62:	2b02      	cmp	r3, #2
 800fb64:	d00c      	beq.n	800fb80 <tcp_process+0xe8>
 800fb66:	687b      	ldr	r3, [r7, #4]
 800fb68:	7d1b      	ldrb	r3, [r3, #20]
 800fb6a:	2b03      	cmp	r3, #3
 800fb6c:	d008      	beq.n	800fb80 <tcp_process+0xe8>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 800fb6e:	687b      	ldr	r3, [r7, #4]
 800fb70:	7e9b      	ldrb	r3, [r3, #26]
 800fb72:	f043 0302 	orr.w	r3, r3, #2
 800fb76:	b2da      	uxtb	r2, r3
 800fb78:	687b      	ldr	r3, [r7, #4]
 800fb7a:	769a      	strb	r2, [r3, #26]
    return ERR_OK;
 800fb7c:	2300      	movs	r3, #0
 800fb7e:	e334      	b.n	80101ea <tcp_process+0x752>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 800fb80:	687b      	ldr	r3, [r7, #4]
 800fb82:	7e9b      	ldrb	r3, [r3, #26]
 800fb84:	f003 0310 	and.w	r3, r3, #16
 800fb88:	2b00      	cmp	r3, #0
 800fb8a:	d103      	bne.n	800fb94 <tcp_process+0xfc>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 800fb8c:	4b72      	ldr	r3, [pc, #456]	; (800fd58 <tcp_process+0x2c0>)
 800fb8e:	681a      	ldr	r2, [r3, #0]
 800fb90:	687b      	ldr	r3, [r7, #4]
 800fb92:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 800fb94:	687b      	ldr	r3, [r7, #4]
 800fb96:	2200      	movs	r2, #0
 800fb98:	f883 2096 	strb.w	r2, [r3, #150]	; 0x96

  tcp_parseopt(pcb);
 800fb9c:	6878      	ldr	r0, [r7, #4]
 800fb9e:	f001 fbdf 	bl	8011360 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 800fba2:	687b      	ldr	r3, [r7, #4]
 800fba4:	7d1b      	ldrb	r3, [r3, #20]
 800fba6:	3b02      	subs	r3, #2
 800fba8:	2b07      	cmp	r3, #7
 800fbaa:	f200 830e 	bhi.w	80101ca <tcp_process+0x732>
 800fbae:	a201      	add	r2, pc, #4	; (adr r2, 800fbb4 <tcp_process+0x11c>)
 800fbb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fbb4:	0800fbd5 	.word	0x0800fbd5
 800fbb8:	0800fdcd 	.word	0x0800fdcd
 800fbbc:	0800ff25 	.word	0x0800ff25
 800fbc0:	0800ff4f 	.word	0x0800ff4f
 800fbc4:	08010079 	.word	0x08010079
 800fbc8:	0800ff25 	.word	0x0800ff25
 800fbcc:	08010105 	.word	0x08010105
 800fbd0:	08010195 	.word	0x08010195
  case SYN_SENT:
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
     pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    /* received SYN ACK with expected sequence number? */
    if ((flags & TCP_ACK) && (flags & TCP_SYN)
 800fbd4:	4b59      	ldr	r3, [pc, #356]	; (800fd3c <tcp_process+0x2a4>)
 800fbd6:	781b      	ldrb	r3, [r3, #0]
 800fbd8:	f003 0310 	and.w	r3, r3, #16
 800fbdc:	2b00      	cmp	r3, #0
 800fbde:	f000 80cb 	beq.w	800fd78 <tcp_process+0x2e0>
 800fbe2:	4b56      	ldr	r3, [pc, #344]	; (800fd3c <tcp_process+0x2a4>)
 800fbe4:	781b      	ldrb	r3, [r3, #0]
 800fbe6:	f003 0302 	and.w	r3, r3, #2
 800fbea:	2b00      	cmp	r3, #0
 800fbec:	f000 80c4 	beq.w	800fd78 <tcp_process+0x2e0>
        && (ackno == pcb->lastack + 1)) {
 800fbf0:	687b      	ldr	r3, [r7, #4]
 800fbf2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800fbf4:	1c5a      	adds	r2, r3, #1
 800fbf6:	4b52      	ldr	r3, [pc, #328]	; (800fd40 <tcp_process+0x2a8>)
 800fbf8:	681b      	ldr	r3, [r3, #0]
 800fbfa:	429a      	cmp	r2, r3
 800fbfc:	f040 80bc 	bne.w	800fd78 <tcp_process+0x2e0>
      pcb->rcv_nxt = seqno + 1;
 800fc00:	4b50      	ldr	r3, [pc, #320]	; (800fd44 <tcp_process+0x2ac>)
 800fc02:	681b      	ldr	r3, [r3, #0]
 800fc04:	1c5a      	adds	r2, r3, #1
 800fc06:	687b      	ldr	r3, [r7, #4]
 800fc08:	625a      	str	r2, [r3, #36]	; 0x24
      pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 800fc0a:	687b      	ldr	r3, [r7, #4]
 800fc0c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800fc0e:	687b      	ldr	r3, [r7, #4]
 800fc10:	62da      	str	r2, [r3, #44]	; 0x2c
      pcb->lastack = ackno;
 800fc12:	4b4b      	ldr	r3, [pc, #300]	; (800fd40 <tcp_process+0x2a8>)
 800fc14:	681a      	ldr	r2, [r3, #0]
 800fc16:	687b      	ldr	r3, [r7, #4]
 800fc18:	645a      	str	r2, [r3, #68]	; 0x44
      pcb->snd_wnd = tcphdr->wnd;
 800fc1a:	4b50      	ldr	r3, [pc, #320]	; (800fd5c <tcp_process+0x2c4>)
 800fc1c:	681b      	ldr	r3, [r3, #0]
 800fc1e:	89db      	ldrh	r3, [r3, #14]
 800fc20:	b29a      	uxth	r2, r3
 800fc22:	687b      	ldr	r3, [r7, #4]
 800fc24:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
      pcb->snd_wnd_max = pcb->snd_wnd;
 800fc28:	687b      	ldr	r3, [r7, #4]
 800fc2a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800fc2e:	687b      	ldr	r3, [r7, #4]
 800fc30:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 800fc34:	4b43      	ldr	r3, [pc, #268]	; (800fd44 <tcp_process+0x2ac>)
 800fc36:	681b      	ldr	r3, [r3, #0]
 800fc38:	1e5a      	subs	r2, r3, #1
 800fc3a:	687b      	ldr	r3, [r7, #4]
 800fc3c:	651a      	str	r2, [r3, #80]	; 0x50
      pcb->state = ESTABLISHED;
 800fc3e:	687b      	ldr	r3, [r7, #4]
 800fc40:	2204      	movs	r2, #4
 800fc42:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
      pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 800fc44:	687b      	ldr	r3, [r7, #4]
 800fc46:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 800fc48:	687b      	ldr	r3, [r7, #4]
 800fc4a:	3304      	adds	r3, #4
 800fc4c:	4619      	mov	r1, r3
 800fc4e:	4610      	mov	r0, r2
 800fc50:	f7ff f95c 	bl	800ef0c <tcp_eff_send_mss_impl>
 800fc54:	4603      	mov	r3, r0
 800fc56:	461a      	mov	r2, r3
 800fc58:	687b      	ldr	r3, [r7, #4]
 800fc5a:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

      pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800fc5c:	687b      	ldr	r3, [r7, #4]
 800fc5e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800fc60:	005b      	lsls	r3, r3, #1
 800fc62:	f241 121c 	movw	r2, #4380	; 0x111c
 800fc66:	429a      	cmp	r2, r3
 800fc68:	bf38      	it	cc
 800fc6a:	461a      	movcc	r2, r3
 800fc6c:	687b      	ldr	r3, [r7, #4]
 800fc6e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800fc70:	009b      	lsls	r3, r3, #2
 800fc72:	4293      	cmp	r3, r2
 800fc74:	bf28      	it	cs
 800fc76:	4613      	movcs	r3, r2
 800fc78:	b29a      	uxth	r2, r3
 800fc7a:	687b      	ldr	r3, [r7, #4]
 800fc7c:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                   " ssthresh %"TCPWNDSIZE_F"\n",
                                   pcb->cwnd, pcb->ssthresh));
      LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 800fc80:	687b      	ldr	r3, [r7, #4]
 800fc82:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800fc86:	2b00      	cmp	r3, #0
 800fc88:	d106      	bne.n	800fc98 <tcp_process+0x200>
 800fc8a:	4b2f      	ldr	r3, [pc, #188]	; (800fd48 <tcp_process+0x2b0>)
 800fc8c:	f240 321a 	movw	r2, #794	; 0x31a
 800fc90:	4933      	ldr	r1, [pc, #204]	; (800fd60 <tcp_process+0x2c8>)
 800fc92:	482f      	ldr	r0, [pc, #188]	; (800fd50 <tcp_process+0x2b8>)
 800fc94:	f008 f83a 	bl	8017d0c <iprintf>
      --pcb->snd_queuelen;
 800fc98:	687b      	ldr	r3, [r7, #4]
 800fc9a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800fc9e:	3b01      	subs	r3, #1
 800fca0:	b29a      	uxth	r2, r3
 800fca2:	687b      	ldr	r3, [r7, #4]
 800fca4:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
      rseg = pcb->unacked;
 800fca8:	687b      	ldr	r3, [r7, #4]
 800fcaa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fcac:	61fb      	str	r3, [r7, #28]
      if (rseg == NULL) {
 800fcae:	69fb      	ldr	r3, [r7, #28]
 800fcb0:	2b00      	cmp	r3, #0
 800fcb2:	d111      	bne.n	800fcd8 <tcp_process+0x240>
        /* might happen if tcp_output fails in tcp_rexmit_rto()
           in which case the segment is on the unsent list */
        rseg = pcb->unsent;
 800fcb4:	687b      	ldr	r3, [r7, #4]
 800fcb6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800fcb8:	61fb      	str	r3, [r7, #28]
        LWIP_ASSERT("no segment to free", rseg != NULL);
 800fcba:	69fb      	ldr	r3, [r7, #28]
 800fcbc:	2b00      	cmp	r3, #0
 800fcbe:	d106      	bne.n	800fcce <tcp_process+0x236>
 800fcc0:	4b21      	ldr	r3, [pc, #132]	; (800fd48 <tcp_process+0x2b0>)
 800fcc2:	f240 3222 	movw	r2, #802	; 0x322
 800fcc6:	4927      	ldr	r1, [pc, #156]	; (800fd64 <tcp_process+0x2cc>)
 800fcc8:	4821      	ldr	r0, [pc, #132]	; (800fd50 <tcp_process+0x2b8>)
 800fcca:	f008 f81f 	bl	8017d0c <iprintf>
        pcb->unsent = rseg->next;
 800fcce:	69fb      	ldr	r3, [r7, #28]
 800fcd0:	681a      	ldr	r2, [r3, #0]
 800fcd2:	687b      	ldr	r3, [r7, #4]
 800fcd4:	669a      	str	r2, [r3, #104]	; 0x68
 800fcd6:	e003      	b.n	800fce0 <tcp_process+0x248>
      } else {
        pcb->unacked = rseg->next;
 800fcd8:	69fb      	ldr	r3, [r7, #28]
 800fcda:	681a      	ldr	r2, [r3, #0]
 800fcdc:	687b      	ldr	r3, [r7, #4]
 800fcde:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      tcp_seg_free(rseg);
 800fce0:	69f8      	ldr	r0, [r7, #28]
 800fce2:	f7fe fea8 	bl	800ea36 <tcp_seg_free>

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 800fce6:	687b      	ldr	r3, [r7, #4]
 800fce8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fcea:	2b00      	cmp	r3, #0
 800fcec:	d104      	bne.n	800fcf8 <tcp_process+0x260>
        pcb->rtime = -1;
 800fcee:	687b      	ldr	r3, [r7, #4]
 800fcf0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800fcf4:	861a      	strh	r2, [r3, #48]	; 0x30
 800fcf6:	e006      	b.n	800fd06 <tcp_process+0x26e>
      } else {
        pcb->rtime = 0;
 800fcf8:	687b      	ldr	r3, [r7, #4]
 800fcfa:	2200      	movs	r2, #0
 800fcfc:	861a      	strh	r2, [r3, #48]	; 0x30
        pcb->nrtx = 0;
 800fcfe:	687b      	ldr	r3, [r7, #4]
 800fd00:	2200      	movs	r2, #0
 800fd02:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      }

      /* Call the user specified function to call when successfully
       * connected. */
      TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 800fd06:	687b      	ldr	r3, [r7, #4]
 800fd08:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800fd0c:	2b00      	cmp	r3, #0
 800fd0e:	d00a      	beq.n	800fd26 <tcp_process+0x28e>
 800fd10:	687b      	ldr	r3, [r7, #4]
 800fd12:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800fd16:	687a      	ldr	r2, [r7, #4]
 800fd18:	6910      	ldr	r0, [r2, #16]
 800fd1a:	2200      	movs	r2, #0
 800fd1c:	6879      	ldr	r1, [r7, #4]
 800fd1e:	4798      	blx	r3
 800fd20:	4603      	mov	r3, r0
 800fd22:	76bb      	strb	r3, [r7, #26]
 800fd24:	e001      	b.n	800fd2a <tcp_process+0x292>
 800fd26:	2300      	movs	r3, #0
 800fd28:	76bb      	strb	r3, [r7, #26]
      if (err == ERR_ABRT) {
 800fd2a:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800fd2e:	f113 0f0d 	cmn.w	r3, #13
 800fd32:	d119      	bne.n	800fd68 <tcp_process+0x2d0>
        return ERR_ABRT;
 800fd34:	f06f 030c 	mvn.w	r3, #12
 800fd38:	e257      	b.n	80101ea <tcp_process+0x752>
 800fd3a:	bf00      	nop
 800fd3c:	20004b9c 	.word	0x20004b9c
 800fd40:	20004b94 	.word	0x20004b94
 800fd44:	20004b90 	.word	0x20004b90
 800fd48:	08019894 	.word	0x08019894
 800fd4c:	08019a4c 	.word	0x08019a4c
 800fd50:	080198d8 	.word	0x080198d8
 800fd54:	20004b9d 	.word	0x20004b9d
 800fd58:	2000b5b4 	.word	0x2000b5b4
 800fd5c:	20004b80 	.word	0x20004b80
 800fd60:	08019a6c 	.word	0x08019a6c
 800fd64:	08019a84 	.word	0x08019a84
      }
      tcp_ack_now(pcb);
 800fd68:	687b      	ldr	r3, [r7, #4]
 800fd6a:	7e9b      	ldrb	r3, [r3, #26]
 800fd6c:	f043 0302 	orr.w	r3, r3, #2
 800fd70:	b2da      	uxtb	r2, r3
 800fd72:	687b      	ldr	r3, [r7, #4]
 800fd74:	769a      	strb	r2, [r3, #26]
      if (pcb->nrtx < TCP_SYNMAXRTX) {
        pcb->rtime = 0;
        tcp_rexmit_rto(pcb);
      }
    }
    break;
 800fd76:	e22a      	b.n	80101ce <tcp_process+0x736>
    else if (flags & TCP_ACK) {
 800fd78:	4b9f      	ldr	r3, [pc, #636]	; (800fff8 <tcp_process+0x560>)
 800fd7a:	781b      	ldrb	r3, [r3, #0]
 800fd7c:	f003 0310 	and.w	r3, r3, #16
 800fd80:	2b00      	cmp	r3, #0
 800fd82:	f000 8224 	beq.w	80101ce <tcp_process+0x736>
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800fd86:	4b9d      	ldr	r3, [pc, #628]	; (800fffc <tcp_process+0x564>)
 800fd88:	6818      	ldr	r0, [r3, #0]
 800fd8a:	4b9d      	ldr	r3, [pc, #628]	; (8010000 <tcp_process+0x568>)
 800fd8c:	881b      	ldrh	r3, [r3, #0]
 800fd8e:	461a      	mov	r2, r3
 800fd90:	4b9c      	ldr	r3, [pc, #624]	; (8010004 <tcp_process+0x56c>)
 800fd92:	681b      	ldr	r3, [r3, #0]
 800fd94:	18d1      	adds	r1, r2, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800fd96:	4b9c      	ldr	r3, [pc, #624]	; (8010008 <tcp_process+0x570>)
 800fd98:	681b      	ldr	r3, [r3, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800fd9a:	885b      	ldrh	r3, [r3, #2]
 800fd9c:	b29b      	uxth	r3, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800fd9e:	4a9a      	ldr	r2, [pc, #616]	; (8010008 <tcp_process+0x570>)
 800fda0:	6812      	ldr	r2, [r2, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800fda2:	8812      	ldrh	r2, [r2, #0]
 800fda4:	b292      	uxth	r2, r2
 800fda6:	9201      	str	r2, [sp, #4]
 800fda8:	9300      	str	r3, [sp, #0]
 800fdaa:	4b98      	ldr	r3, [pc, #608]	; (801000c <tcp_process+0x574>)
 800fdac:	4a98      	ldr	r2, [pc, #608]	; (8010010 <tcp_process+0x578>)
 800fdae:	f002 f871 	bl	8011e94 <tcp_rst>
      if (pcb->nrtx < TCP_SYNMAXRTX) {
 800fdb2:	687b      	ldr	r3, [r7, #4]
 800fdb4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800fdb8:	2b05      	cmp	r3, #5
 800fdba:	f200 8208 	bhi.w	80101ce <tcp_process+0x736>
        pcb->rtime = 0;
 800fdbe:	687b      	ldr	r3, [r7, #4]
 800fdc0:	2200      	movs	r2, #0
 800fdc2:	861a      	strh	r2, [r3, #48]	; 0x30
        tcp_rexmit_rto(pcb);
 800fdc4:	6878      	ldr	r0, [r7, #4]
 800fdc6:	f002 f8db 	bl	8011f80 <tcp_rexmit_rto>
    break;
 800fdca:	e200      	b.n	80101ce <tcp_process+0x736>
  case SYN_RCVD:
    if (flags & TCP_ACK) {
 800fdcc:	4b8a      	ldr	r3, [pc, #552]	; (800fff8 <tcp_process+0x560>)
 800fdce:	781b      	ldrb	r3, [r3, #0]
 800fdd0:	f003 0310 	and.w	r3, r3, #16
 800fdd4:	2b00      	cmp	r3, #0
 800fdd6:	f000 8091 	beq.w	800fefc <tcp_process+0x464>
      /* expected ACK number? */
      if (TCP_SEQ_BETWEEN(ackno, pcb->lastack+1, pcb->snd_nxt)) {
 800fdda:	4b88      	ldr	r3, [pc, #544]	; (800fffc <tcp_process+0x564>)
 800fddc:	681a      	ldr	r2, [r3, #0]
 800fdde:	687b      	ldr	r3, [r7, #4]
 800fde0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800fde2:	1ad3      	subs	r3, r2, r3
 800fde4:	3b01      	subs	r3, #1
 800fde6:	2b00      	cmp	r3, #0
 800fde8:	db71      	blt.n	800fece <tcp_process+0x436>
 800fdea:	4b84      	ldr	r3, [pc, #528]	; (800fffc <tcp_process+0x564>)
 800fdec:	681a      	ldr	r2, [r3, #0]
 800fdee:	687b      	ldr	r3, [r7, #4]
 800fdf0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800fdf2:	1ad3      	subs	r3, r2, r3
 800fdf4:	2b00      	cmp	r3, #0
 800fdf6:	dc6a      	bgt.n	800fece <tcp_process+0x436>
        pcb->state = ESTABLISHED;
 800fdf8:	687b      	ldr	r3, [r7, #4]
 800fdfa:	2204      	movs	r2, #4
 800fdfc:	751a      	strb	r2, [r3, #20]
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
#if LWIP_CALLBACK_API
        LWIP_ASSERT("pcb->listener->accept != NULL",
 800fdfe:	687b      	ldr	r3, [r7, #4]
 800fe00:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800fe02:	2b00      	cmp	r3, #0
 800fe04:	d00b      	beq.n	800fe1e <tcp_process+0x386>
 800fe06:	687b      	ldr	r3, [r7, #4]
 800fe08:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800fe0a:	699b      	ldr	r3, [r3, #24]
 800fe0c:	2b00      	cmp	r3, #0
 800fe0e:	d106      	bne.n	800fe1e <tcp_process+0x386>
 800fe10:	4b80      	ldr	r3, [pc, #512]	; (8010014 <tcp_process+0x57c>)
 800fe12:	f240 3251 	movw	r2, #849	; 0x351
 800fe16:	4980      	ldr	r1, [pc, #512]	; (8010018 <tcp_process+0x580>)
 800fe18:	4880      	ldr	r0, [pc, #512]	; (801001c <tcp_process+0x584>)
 800fe1a:	f007 ff77 	bl	8017d0c <iprintf>
          (pcb->listener == NULL) || (pcb->listener->accept != NULL));
#endif
        if (pcb->listener == NULL) {
 800fe1e:	687b      	ldr	r3, [r7, #4]
 800fe20:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800fe22:	2b00      	cmp	r3, #0
 800fe24:	d102      	bne.n	800fe2c <tcp_process+0x394>
          /* listen pcb might be closed by now */
          err = ERR_VAL;
 800fe26:	23fa      	movs	r3, #250	; 0xfa
 800fe28:	76bb      	strb	r3, [r7, #26]
 800fe2a:	e011      	b.n	800fe50 <tcp_process+0x3b8>
        } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
        {
          tcp_backlog_accepted(pcb);
          /* Call the accept function. */
          TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 800fe2c:	687b      	ldr	r3, [r7, #4]
 800fe2e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800fe30:	699b      	ldr	r3, [r3, #24]
 800fe32:	2b00      	cmp	r3, #0
 800fe34:	d00a      	beq.n	800fe4c <tcp_process+0x3b4>
 800fe36:	687b      	ldr	r3, [r7, #4]
 800fe38:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800fe3a:	699b      	ldr	r3, [r3, #24]
 800fe3c:	687a      	ldr	r2, [r7, #4]
 800fe3e:	6910      	ldr	r0, [r2, #16]
 800fe40:	2200      	movs	r2, #0
 800fe42:	6879      	ldr	r1, [r7, #4]
 800fe44:	4798      	blx	r3
 800fe46:	4603      	mov	r3, r0
 800fe48:	76bb      	strb	r3, [r7, #26]
 800fe4a:	e001      	b.n	800fe50 <tcp_process+0x3b8>
 800fe4c:	23f0      	movs	r3, #240	; 0xf0
 800fe4e:	76bb      	strb	r3, [r7, #26]
        }
        if (err != ERR_OK) {
 800fe50:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800fe54:	2b00      	cmp	r3, #0
 800fe56:	d00a      	beq.n	800fe6e <tcp_process+0x3d6>
          /* If the accept function returns with an error, we abort
           * the connection. */
          /* Already aborted? */
          if (err != ERR_ABRT) {
 800fe58:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800fe5c:	f113 0f0d 	cmn.w	r3, #13
 800fe60:	d002      	beq.n	800fe68 <tcp_process+0x3d0>
            tcp_abort(pcb);
 800fe62:	6878      	ldr	r0, [r7, #4]
 800fe64:	f7fe f992 	bl	800e18c <tcp_abort>
          }
          return ERR_ABRT;
 800fe68:	f06f 030c 	mvn.w	r3, #12
 800fe6c:	e1bd      	b.n	80101ea <tcp_process+0x752>
        }
        /* If there was any data contained within this ACK,
         * we'd better pass it on to the application as well. */
        tcp_receive(pcb);
 800fe6e:	6878      	ldr	r0, [r7, #4]
 800fe70:	f000 fa42 	bl	80102f8 <tcp_receive>

        /* Prevent ACK for SYN to generate a sent event */
        if (recv_acked != 0) {
 800fe74:	4b6a      	ldr	r3, [pc, #424]	; (8010020 <tcp_process+0x588>)
 800fe76:	881b      	ldrh	r3, [r3, #0]
 800fe78:	2b00      	cmp	r3, #0
 800fe7a:	d005      	beq.n	800fe88 <tcp_process+0x3f0>
          recv_acked--;
 800fe7c:	4b68      	ldr	r3, [pc, #416]	; (8010020 <tcp_process+0x588>)
 800fe7e:	881b      	ldrh	r3, [r3, #0]
 800fe80:	3b01      	subs	r3, #1
 800fe82:	b29a      	uxth	r2, r3
 800fe84:	4b66      	ldr	r3, [pc, #408]	; (8010020 <tcp_process+0x588>)
 800fe86:	801a      	strh	r2, [r3, #0]
        }

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800fe88:	687b      	ldr	r3, [r7, #4]
 800fe8a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800fe8c:	005b      	lsls	r3, r3, #1
 800fe8e:	f241 121c 	movw	r2, #4380	; 0x111c
 800fe92:	429a      	cmp	r2, r3
 800fe94:	bf38      	it	cc
 800fe96:	461a      	movcc	r2, r3
 800fe98:	687b      	ldr	r3, [r7, #4]
 800fe9a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800fe9c:	009b      	lsls	r3, r3, #2
 800fe9e:	4293      	cmp	r3, r2
 800fea0:	bf28      	it	cs
 800fea2:	4613      	movcs	r3, r2
 800fea4:	b29a      	uxth	r2, r3
 800fea6:	687b      	ldr	r3, [r7, #4]
 800fea8:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));

        if (recv_flags & TF_GOT_FIN) {
 800feac:	4b5d      	ldr	r3, [pc, #372]	; (8010024 <tcp_process+0x58c>)
 800feae:	781b      	ldrb	r3, [r3, #0]
 800feb0:	f003 0320 	and.w	r3, r3, #32
 800feb4:	2b00      	cmp	r3, #0
 800feb6:	d034      	beq.n	800ff22 <tcp_process+0x48a>
          tcp_ack_now(pcb);
 800feb8:	687b      	ldr	r3, [r7, #4]
 800feba:	7e9b      	ldrb	r3, [r3, #26]
 800febc:	f043 0302 	orr.w	r3, r3, #2
 800fec0:	b2da      	uxtb	r2, r3
 800fec2:	687b      	ldr	r3, [r7, #4]
 800fec4:	769a      	strb	r2, [r3, #26]
          pcb->state = CLOSE_WAIT;
 800fec6:	687b      	ldr	r3, [r7, #4]
 800fec8:	2207      	movs	r2, #7
 800feca:	751a      	strb	r2, [r3, #20]
        if (recv_flags & TF_GOT_FIN) {
 800fecc:	e029      	b.n	800ff22 <tcp_process+0x48a>
        }
      } else {
        /* incorrect ACK number, send RST */
        tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800fece:	4b4b      	ldr	r3, [pc, #300]	; (800fffc <tcp_process+0x564>)
 800fed0:	6818      	ldr	r0, [r3, #0]
 800fed2:	4b4b      	ldr	r3, [pc, #300]	; (8010000 <tcp_process+0x568>)
 800fed4:	881b      	ldrh	r3, [r3, #0]
 800fed6:	461a      	mov	r2, r3
 800fed8:	4b4a      	ldr	r3, [pc, #296]	; (8010004 <tcp_process+0x56c>)
 800feda:	681b      	ldr	r3, [r3, #0]
 800fedc:	18d1      	adds	r1, r2, r3
          ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800fede:	4b4a      	ldr	r3, [pc, #296]	; (8010008 <tcp_process+0x570>)
 800fee0:	681b      	ldr	r3, [r3, #0]
        tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800fee2:	885b      	ldrh	r3, [r3, #2]
 800fee4:	b29b      	uxth	r3, r3
          ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800fee6:	4a48      	ldr	r2, [pc, #288]	; (8010008 <tcp_process+0x570>)
 800fee8:	6812      	ldr	r2, [r2, #0]
        tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800feea:	8812      	ldrh	r2, [r2, #0]
 800feec:	b292      	uxth	r2, r2
 800feee:	9201      	str	r2, [sp, #4]
 800fef0:	9300      	str	r3, [sp, #0]
 800fef2:	4b46      	ldr	r3, [pc, #280]	; (801000c <tcp_process+0x574>)
 800fef4:	4a46      	ldr	r2, [pc, #280]	; (8010010 <tcp_process+0x578>)
 800fef6:	f001 ffcd 	bl	8011e94 <tcp_rst>
      }
    } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
      /* Looks like another copy of the SYN - retransmit our SYN-ACK */
      tcp_rexmit(pcb);
    }
    break;
 800fefa:	e16a      	b.n	80101d2 <tcp_process+0x73a>
    } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 800fefc:	4b3e      	ldr	r3, [pc, #248]	; (800fff8 <tcp_process+0x560>)
 800fefe:	781b      	ldrb	r3, [r3, #0]
 800ff00:	f003 0302 	and.w	r3, r3, #2
 800ff04:	2b00      	cmp	r3, #0
 800ff06:	f000 8164 	beq.w	80101d2 <tcp_process+0x73a>
 800ff0a:	687b      	ldr	r3, [r7, #4]
 800ff0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ff0e:	1e5a      	subs	r2, r3, #1
 800ff10:	4b3c      	ldr	r3, [pc, #240]	; (8010004 <tcp_process+0x56c>)
 800ff12:	681b      	ldr	r3, [r3, #0]
 800ff14:	429a      	cmp	r2, r3
 800ff16:	f040 815c 	bne.w	80101d2 <tcp_process+0x73a>
      tcp_rexmit(pcb);
 800ff1a:	6878      	ldr	r0, [r7, #4]
 800ff1c:	f002 f866 	bl	8011fec <tcp_rexmit>
    break;
 800ff20:	e157      	b.n	80101d2 <tcp_process+0x73a>
 800ff22:	e156      	b.n	80101d2 <tcp_process+0x73a>
  case CLOSE_WAIT:
    /* FALLTHROUGH */
  case ESTABLISHED:
    tcp_receive(pcb);
 800ff24:	6878      	ldr	r0, [r7, #4]
 800ff26:	f000 f9e7 	bl	80102f8 <tcp_receive>
    if (recv_flags & TF_GOT_FIN) { /* passive close */
 800ff2a:	4b3e      	ldr	r3, [pc, #248]	; (8010024 <tcp_process+0x58c>)
 800ff2c:	781b      	ldrb	r3, [r3, #0]
 800ff2e:	f003 0320 	and.w	r3, r3, #32
 800ff32:	2b00      	cmp	r3, #0
 800ff34:	f000 814f 	beq.w	80101d6 <tcp_process+0x73e>
      tcp_ack_now(pcb);
 800ff38:	687b      	ldr	r3, [r7, #4]
 800ff3a:	7e9b      	ldrb	r3, [r3, #26]
 800ff3c:	f043 0302 	orr.w	r3, r3, #2
 800ff40:	b2da      	uxtb	r2, r3
 800ff42:	687b      	ldr	r3, [r7, #4]
 800ff44:	769a      	strb	r2, [r3, #26]
      pcb->state = CLOSE_WAIT;
 800ff46:	687b      	ldr	r3, [r7, #4]
 800ff48:	2207      	movs	r2, #7
 800ff4a:	751a      	strb	r2, [r3, #20]
    }
    break;
 800ff4c:	e143      	b.n	80101d6 <tcp_process+0x73e>
  case FIN_WAIT_1:
    tcp_receive(pcb);
 800ff4e:	6878      	ldr	r0, [r7, #4]
 800ff50:	f000 f9d2 	bl	80102f8 <tcp_receive>
    if (recv_flags & TF_GOT_FIN) {
 800ff54:	4b33      	ldr	r3, [pc, #204]	; (8010024 <tcp_process+0x58c>)
 800ff56:	781b      	ldrb	r3, [r3, #0]
 800ff58:	f003 0320 	and.w	r3, r3, #32
 800ff5c:	2b00      	cmp	r3, #0
 800ff5e:	d074      	beq.n	801004a <tcp_process+0x5b2>
      if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800ff60:	4b25      	ldr	r3, [pc, #148]	; (800fff8 <tcp_process+0x560>)
 800ff62:	781b      	ldrb	r3, [r3, #0]
 800ff64:	f003 0310 	and.w	r3, r3, #16
 800ff68:	2b00      	cmp	r3, #0
 800ff6a:	d063      	beq.n	8010034 <tcp_process+0x59c>
 800ff6c:	687b      	ldr	r3, [r7, #4]
 800ff6e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800ff70:	4b22      	ldr	r3, [pc, #136]	; (800fffc <tcp_process+0x564>)
 800ff72:	681b      	ldr	r3, [r3, #0]
 800ff74:	429a      	cmp	r2, r3
 800ff76:	d15d      	bne.n	8010034 <tcp_process+0x59c>
          pcb->unsent == NULL) {
 800ff78:	687b      	ldr	r3, [r7, #4]
 800ff7a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
      if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800ff7c:	2b00      	cmp	r3, #0
 800ff7e:	d159      	bne.n	8010034 <tcp_process+0x59c>
        LWIP_DEBUGF(TCP_DEBUG,
          ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 800ff80:	687b      	ldr	r3, [r7, #4]
 800ff82:	7e9b      	ldrb	r3, [r3, #26]
 800ff84:	f043 0302 	orr.w	r3, r3, #2
 800ff88:	b2da      	uxtb	r2, r3
 800ff8a:	687b      	ldr	r3, [r7, #4]
 800ff8c:	769a      	strb	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 800ff8e:	6878      	ldr	r0, [r7, #4]
 800ff90:	f7fe fee6 	bl	800ed60 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800ff94:	4b24      	ldr	r3, [pc, #144]	; (8010028 <tcp_process+0x590>)
 800ff96:	681b      	ldr	r3, [r3, #0]
 800ff98:	687a      	ldr	r2, [r7, #4]
 800ff9a:	429a      	cmp	r2, r3
 800ff9c:	d105      	bne.n	800ffaa <tcp_process+0x512>
 800ff9e:	4b22      	ldr	r3, [pc, #136]	; (8010028 <tcp_process+0x590>)
 800ffa0:	681b      	ldr	r3, [r3, #0]
 800ffa2:	68db      	ldr	r3, [r3, #12]
 800ffa4:	4a20      	ldr	r2, [pc, #128]	; (8010028 <tcp_process+0x590>)
 800ffa6:	6013      	str	r3, [r2, #0]
 800ffa8:	e013      	b.n	800ffd2 <tcp_process+0x53a>
 800ffaa:	4b1f      	ldr	r3, [pc, #124]	; (8010028 <tcp_process+0x590>)
 800ffac:	681b      	ldr	r3, [r3, #0]
 800ffae:	617b      	str	r3, [r7, #20]
 800ffb0:	e00c      	b.n	800ffcc <tcp_process+0x534>
 800ffb2:	697b      	ldr	r3, [r7, #20]
 800ffb4:	68db      	ldr	r3, [r3, #12]
 800ffb6:	687a      	ldr	r2, [r7, #4]
 800ffb8:	429a      	cmp	r2, r3
 800ffba:	d104      	bne.n	800ffc6 <tcp_process+0x52e>
 800ffbc:	687b      	ldr	r3, [r7, #4]
 800ffbe:	68da      	ldr	r2, [r3, #12]
 800ffc0:	697b      	ldr	r3, [r7, #20]
 800ffc2:	60da      	str	r2, [r3, #12]
 800ffc4:	e005      	b.n	800ffd2 <tcp_process+0x53a>
 800ffc6:	697b      	ldr	r3, [r7, #20]
 800ffc8:	68db      	ldr	r3, [r3, #12]
 800ffca:	617b      	str	r3, [r7, #20]
 800ffcc:	697b      	ldr	r3, [r7, #20]
 800ffce:	2b00      	cmp	r3, #0
 800ffd0:	d1ef      	bne.n	800ffb2 <tcp_process+0x51a>
 800ffd2:	687b      	ldr	r3, [r7, #4]
 800ffd4:	2200      	movs	r2, #0
 800ffd6:	60da      	str	r2, [r3, #12]
 800ffd8:	4b14      	ldr	r3, [pc, #80]	; (801002c <tcp_process+0x594>)
 800ffda:	2201      	movs	r2, #1
 800ffdc:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800ffde:	687b      	ldr	r3, [r7, #4]
 800ffe0:	220a      	movs	r2, #10
 800ffe2:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800ffe4:	4b12      	ldr	r3, [pc, #72]	; (8010030 <tcp_process+0x598>)
 800ffe6:	681a      	ldr	r2, [r3, #0]
 800ffe8:	687b      	ldr	r3, [r7, #4]
 800ffea:	60da      	str	r2, [r3, #12]
 800ffec:	4a10      	ldr	r2, [pc, #64]	; (8010030 <tcp_process+0x598>)
 800ffee:	687b      	ldr	r3, [r7, #4]
 800fff0:	6013      	str	r3, [r2, #0]
 800fff2:	f002 f99f 	bl	8012334 <tcp_timer_needed>
      }
    } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
               pcb->unsent == NULL) {
      pcb->state = FIN_WAIT_2;
    }
    break;
 800fff6:	e0f0      	b.n	80101da <tcp_process+0x742>
 800fff8:	20004b9c 	.word	0x20004b9c
 800fffc:	20004b94 	.word	0x20004b94
 8010000:	20004b9a 	.word	0x20004b9a
 8010004:	20004b90 	.word	0x20004b90
 8010008:	20004b80 	.word	0x20004b80
 801000c:	20007e90 	.word	0x20007e90
 8010010:	20007e94 	.word	0x20007e94
 8010014:	08019894 	.word	0x08019894
 8010018:	08019a98 	.word	0x08019a98
 801001c:	080198d8 	.word	0x080198d8
 8010020:	20004b98 	.word	0x20004b98
 8010024:	20004b9d 	.word	0x20004b9d
 8010028:	2000b5b0 	.word	0x2000b5b0
 801002c:	2000b5ac 	.word	0x2000b5ac
 8010030:	2000b5c0 	.word	0x2000b5c0
        tcp_ack_now(pcb);
 8010034:	687b      	ldr	r3, [r7, #4]
 8010036:	7e9b      	ldrb	r3, [r3, #26]
 8010038:	f043 0302 	orr.w	r3, r3, #2
 801003c:	b2da      	uxtb	r2, r3
 801003e:	687b      	ldr	r3, [r7, #4]
 8010040:	769a      	strb	r2, [r3, #26]
        pcb->state = CLOSING;
 8010042:	687b      	ldr	r3, [r7, #4]
 8010044:	2208      	movs	r2, #8
 8010046:	751a      	strb	r2, [r3, #20]
    break;
 8010048:	e0c7      	b.n	80101da <tcp_process+0x742>
    } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 801004a:	4b6a      	ldr	r3, [pc, #424]	; (80101f4 <tcp_process+0x75c>)
 801004c:	781b      	ldrb	r3, [r3, #0]
 801004e:	f003 0310 	and.w	r3, r3, #16
 8010052:	2b00      	cmp	r3, #0
 8010054:	f000 80c1 	beq.w	80101da <tcp_process+0x742>
 8010058:	687b      	ldr	r3, [r7, #4]
 801005a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 801005c:	4b66      	ldr	r3, [pc, #408]	; (80101f8 <tcp_process+0x760>)
 801005e:	681b      	ldr	r3, [r3, #0]
 8010060:	429a      	cmp	r2, r3
 8010062:	f040 80ba 	bne.w	80101da <tcp_process+0x742>
               pcb->unsent == NULL) {
 8010066:	687b      	ldr	r3, [r7, #4]
 8010068:	6e9b      	ldr	r3, [r3, #104]	; 0x68
    } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 801006a:	2b00      	cmp	r3, #0
 801006c:	f040 80b5 	bne.w	80101da <tcp_process+0x742>
      pcb->state = FIN_WAIT_2;
 8010070:	687b      	ldr	r3, [r7, #4]
 8010072:	2206      	movs	r2, #6
 8010074:	751a      	strb	r2, [r3, #20]
    break;
 8010076:	e0b0      	b.n	80101da <tcp_process+0x742>
  case FIN_WAIT_2:
    tcp_receive(pcb);
 8010078:	6878      	ldr	r0, [r7, #4]
 801007a:	f000 f93d 	bl	80102f8 <tcp_receive>
    if (recv_flags & TF_GOT_FIN) {
 801007e:	4b5f      	ldr	r3, [pc, #380]	; (80101fc <tcp_process+0x764>)
 8010080:	781b      	ldrb	r3, [r3, #0]
 8010082:	f003 0320 	and.w	r3, r3, #32
 8010086:	2b00      	cmp	r3, #0
 8010088:	f000 80a9 	beq.w	80101de <tcp_process+0x746>
      LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
      tcp_ack_now(pcb);
 801008c:	687b      	ldr	r3, [r7, #4]
 801008e:	7e9b      	ldrb	r3, [r3, #26]
 8010090:	f043 0302 	orr.w	r3, r3, #2
 8010094:	b2da      	uxtb	r2, r3
 8010096:	687b      	ldr	r3, [r7, #4]
 8010098:	769a      	strb	r2, [r3, #26]
      tcp_pcb_purge(pcb);
 801009a:	6878      	ldr	r0, [r7, #4]
 801009c:	f7fe fe60 	bl	800ed60 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 80100a0:	4b57      	ldr	r3, [pc, #348]	; (8010200 <tcp_process+0x768>)
 80100a2:	681b      	ldr	r3, [r3, #0]
 80100a4:	687a      	ldr	r2, [r7, #4]
 80100a6:	429a      	cmp	r2, r3
 80100a8:	d105      	bne.n	80100b6 <tcp_process+0x61e>
 80100aa:	4b55      	ldr	r3, [pc, #340]	; (8010200 <tcp_process+0x768>)
 80100ac:	681b      	ldr	r3, [r3, #0]
 80100ae:	68db      	ldr	r3, [r3, #12]
 80100b0:	4a53      	ldr	r2, [pc, #332]	; (8010200 <tcp_process+0x768>)
 80100b2:	6013      	str	r3, [r2, #0]
 80100b4:	e013      	b.n	80100de <tcp_process+0x646>
 80100b6:	4b52      	ldr	r3, [pc, #328]	; (8010200 <tcp_process+0x768>)
 80100b8:	681b      	ldr	r3, [r3, #0]
 80100ba:	613b      	str	r3, [r7, #16]
 80100bc:	e00c      	b.n	80100d8 <tcp_process+0x640>
 80100be:	693b      	ldr	r3, [r7, #16]
 80100c0:	68db      	ldr	r3, [r3, #12]
 80100c2:	687a      	ldr	r2, [r7, #4]
 80100c4:	429a      	cmp	r2, r3
 80100c6:	d104      	bne.n	80100d2 <tcp_process+0x63a>
 80100c8:	687b      	ldr	r3, [r7, #4]
 80100ca:	68da      	ldr	r2, [r3, #12]
 80100cc:	693b      	ldr	r3, [r7, #16]
 80100ce:	60da      	str	r2, [r3, #12]
 80100d0:	e005      	b.n	80100de <tcp_process+0x646>
 80100d2:	693b      	ldr	r3, [r7, #16]
 80100d4:	68db      	ldr	r3, [r3, #12]
 80100d6:	613b      	str	r3, [r7, #16]
 80100d8:	693b      	ldr	r3, [r7, #16]
 80100da:	2b00      	cmp	r3, #0
 80100dc:	d1ef      	bne.n	80100be <tcp_process+0x626>
 80100de:	687b      	ldr	r3, [r7, #4]
 80100e0:	2200      	movs	r2, #0
 80100e2:	60da      	str	r2, [r3, #12]
 80100e4:	4b47      	ldr	r3, [pc, #284]	; (8010204 <tcp_process+0x76c>)
 80100e6:	2201      	movs	r2, #1
 80100e8:	701a      	strb	r2, [r3, #0]
      pcb->state = TIME_WAIT;
 80100ea:	687b      	ldr	r3, [r7, #4]
 80100ec:	220a      	movs	r2, #10
 80100ee:	751a      	strb	r2, [r3, #20]
      TCP_REG(&tcp_tw_pcbs, pcb);
 80100f0:	4b45      	ldr	r3, [pc, #276]	; (8010208 <tcp_process+0x770>)
 80100f2:	681a      	ldr	r2, [r3, #0]
 80100f4:	687b      	ldr	r3, [r7, #4]
 80100f6:	60da      	str	r2, [r3, #12]
 80100f8:	4a43      	ldr	r2, [pc, #268]	; (8010208 <tcp_process+0x770>)
 80100fa:	687b      	ldr	r3, [r7, #4]
 80100fc:	6013      	str	r3, [r2, #0]
 80100fe:	f002 f919 	bl	8012334 <tcp_timer_needed>
    }
    break;
 8010102:	e06c      	b.n	80101de <tcp_process+0x746>
  case CLOSING:
    tcp_receive(pcb);
 8010104:	6878      	ldr	r0, [r7, #4]
 8010106:	f000 f8f7 	bl	80102f8 <tcp_receive>
    if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 801010a:	4b3a      	ldr	r3, [pc, #232]	; (80101f4 <tcp_process+0x75c>)
 801010c:	781b      	ldrb	r3, [r3, #0]
 801010e:	f003 0310 	and.w	r3, r3, #16
 8010112:	2b00      	cmp	r3, #0
 8010114:	d065      	beq.n	80101e2 <tcp_process+0x74a>
 8010116:	687b      	ldr	r3, [r7, #4]
 8010118:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 801011a:	4b37      	ldr	r3, [pc, #220]	; (80101f8 <tcp_process+0x760>)
 801011c:	681b      	ldr	r3, [r3, #0]
 801011e:	429a      	cmp	r2, r3
 8010120:	d15f      	bne.n	80101e2 <tcp_process+0x74a>
 8010122:	687b      	ldr	r3, [r7, #4]
 8010124:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8010126:	2b00      	cmp	r3, #0
 8010128:	d15b      	bne.n	80101e2 <tcp_process+0x74a>
      LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
      tcp_pcb_purge(pcb);
 801012a:	6878      	ldr	r0, [r7, #4]
 801012c:	f7fe fe18 	bl	800ed60 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 8010130:	4b33      	ldr	r3, [pc, #204]	; (8010200 <tcp_process+0x768>)
 8010132:	681b      	ldr	r3, [r3, #0]
 8010134:	687a      	ldr	r2, [r7, #4]
 8010136:	429a      	cmp	r2, r3
 8010138:	d105      	bne.n	8010146 <tcp_process+0x6ae>
 801013a:	4b31      	ldr	r3, [pc, #196]	; (8010200 <tcp_process+0x768>)
 801013c:	681b      	ldr	r3, [r3, #0]
 801013e:	68db      	ldr	r3, [r3, #12]
 8010140:	4a2f      	ldr	r2, [pc, #188]	; (8010200 <tcp_process+0x768>)
 8010142:	6013      	str	r3, [r2, #0]
 8010144:	e013      	b.n	801016e <tcp_process+0x6d6>
 8010146:	4b2e      	ldr	r3, [pc, #184]	; (8010200 <tcp_process+0x768>)
 8010148:	681b      	ldr	r3, [r3, #0]
 801014a:	60fb      	str	r3, [r7, #12]
 801014c:	e00c      	b.n	8010168 <tcp_process+0x6d0>
 801014e:	68fb      	ldr	r3, [r7, #12]
 8010150:	68db      	ldr	r3, [r3, #12]
 8010152:	687a      	ldr	r2, [r7, #4]
 8010154:	429a      	cmp	r2, r3
 8010156:	d104      	bne.n	8010162 <tcp_process+0x6ca>
 8010158:	687b      	ldr	r3, [r7, #4]
 801015a:	68da      	ldr	r2, [r3, #12]
 801015c:	68fb      	ldr	r3, [r7, #12]
 801015e:	60da      	str	r2, [r3, #12]
 8010160:	e005      	b.n	801016e <tcp_process+0x6d6>
 8010162:	68fb      	ldr	r3, [r7, #12]
 8010164:	68db      	ldr	r3, [r3, #12]
 8010166:	60fb      	str	r3, [r7, #12]
 8010168:	68fb      	ldr	r3, [r7, #12]
 801016a:	2b00      	cmp	r3, #0
 801016c:	d1ef      	bne.n	801014e <tcp_process+0x6b6>
 801016e:	687b      	ldr	r3, [r7, #4]
 8010170:	2200      	movs	r2, #0
 8010172:	60da      	str	r2, [r3, #12]
 8010174:	4b23      	ldr	r3, [pc, #140]	; (8010204 <tcp_process+0x76c>)
 8010176:	2201      	movs	r2, #1
 8010178:	701a      	strb	r2, [r3, #0]
      pcb->state = TIME_WAIT;
 801017a:	687b      	ldr	r3, [r7, #4]
 801017c:	220a      	movs	r2, #10
 801017e:	751a      	strb	r2, [r3, #20]
      TCP_REG(&tcp_tw_pcbs, pcb);
 8010180:	4b21      	ldr	r3, [pc, #132]	; (8010208 <tcp_process+0x770>)
 8010182:	681a      	ldr	r2, [r3, #0]
 8010184:	687b      	ldr	r3, [r7, #4]
 8010186:	60da      	str	r2, [r3, #12]
 8010188:	4a1f      	ldr	r2, [pc, #124]	; (8010208 <tcp_process+0x770>)
 801018a:	687b      	ldr	r3, [r7, #4]
 801018c:	6013      	str	r3, [r2, #0]
 801018e:	f002 f8d1 	bl	8012334 <tcp_timer_needed>
    }
    break;
 8010192:	e026      	b.n	80101e2 <tcp_process+0x74a>
  case LAST_ACK:
    tcp_receive(pcb);
 8010194:	6878      	ldr	r0, [r7, #4]
 8010196:	f000 f8af 	bl	80102f8 <tcp_receive>
    if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 801019a:	4b16      	ldr	r3, [pc, #88]	; (80101f4 <tcp_process+0x75c>)
 801019c:	781b      	ldrb	r3, [r3, #0]
 801019e:	f003 0310 	and.w	r3, r3, #16
 80101a2:	2b00      	cmp	r3, #0
 80101a4:	d01f      	beq.n	80101e6 <tcp_process+0x74e>
 80101a6:	687b      	ldr	r3, [r7, #4]
 80101a8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80101aa:	4b13      	ldr	r3, [pc, #76]	; (80101f8 <tcp_process+0x760>)
 80101ac:	681b      	ldr	r3, [r3, #0]
 80101ae:	429a      	cmp	r2, r3
 80101b0:	d119      	bne.n	80101e6 <tcp_process+0x74e>
 80101b2:	687b      	ldr	r3, [r7, #4]
 80101b4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80101b6:	2b00      	cmp	r3, #0
 80101b8:	d115      	bne.n	80101e6 <tcp_process+0x74e>
      LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
      /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
      recv_flags |= TF_CLOSED;
 80101ba:	4b10      	ldr	r3, [pc, #64]	; (80101fc <tcp_process+0x764>)
 80101bc:	781b      	ldrb	r3, [r3, #0]
 80101be:	f043 0310 	orr.w	r3, r3, #16
 80101c2:	b2da      	uxtb	r2, r3
 80101c4:	4b0d      	ldr	r3, [pc, #52]	; (80101fc <tcp_process+0x764>)
 80101c6:	701a      	strb	r2, [r3, #0]
    }
    break;
 80101c8:	e00d      	b.n	80101e6 <tcp_process+0x74e>
  default:
    break;
 80101ca:	bf00      	nop
 80101cc:	e00c      	b.n	80101e8 <tcp_process+0x750>
    break;
 80101ce:	bf00      	nop
 80101d0:	e00a      	b.n	80101e8 <tcp_process+0x750>
    break;
 80101d2:	bf00      	nop
 80101d4:	e008      	b.n	80101e8 <tcp_process+0x750>
    break;
 80101d6:	bf00      	nop
 80101d8:	e006      	b.n	80101e8 <tcp_process+0x750>
    break;
 80101da:	bf00      	nop
 80101dc:	e004      	b.n	80101e8 <tcp_process+0x750>
    break;
 80101de:	bf00      	nop
 80101e0:	e002      	b.n	80101e8 <tcp_process+0x750>
    break;
 80101e2:	bf00      	nop
 80101e4:	e000      	b.n	80101e8 <tcp_process+0x750>
    break;
 80101e6:	bf00      	nop
  }
  return ERR_OK;
 80101e8:	2300      	movs	r3, #0
}
 80101ea:	4618      	mov	r0, r3
 80101ec:	3720      	adds	r7, #32
 80101ee:	46bd      	mov	sp, r7
 80101f0:	bd80      	pop	{r7, pc}
 80101f2:	bf00      	nop
 80101f4:	20004b9c 	.word	0x20004b9c
 80101f8:	20004b94 	.word	0x20004b94
 80101fc:	20004b9d 	.word	0x20004b9d
 8010200:	2000b5b0 	.word	0x2000b5b0
 8010204:	2000b5ac 	.word	0x2000b5ac
 8010208:	2000b5c0 	.word	0x2000b5c0

0801020c <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 801020c:	b590      	push	{r4, r7, lr}
 801020e:	b085      	sub	sp, #20
 8010210:	af00      	add	r7, sp, #0
 8010212:	6078      	str	r0, [r7, #4]
 8010214:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8010216:	687b      	ldr	r3, [r7, #4]
 8010218:	68db      	ldr	r3, [r3, #12]
 801021a:	899b      	ldrh	r3, [r3, #12]
 801021c:	b29b      	uxth	r3, r3
 801021e:	4618      	mov	r0, r3
 8010220:	f7fc f904 	bl	800c42c <lwip_htons>
 8010224:	4603      	mov	r3, r0
 8010226:	f003 0301 	and.w	r3, r3, #1
 801022a:	2b00      	cmp	r3, #0
 801022c:	d027      	beq.n	801027e <tcp_oos_insert_segment+0x72>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 801022e:	6838      	ldr	r0, [r7, #0]
 8010230:	f7fe fbed 	bl	800ea0e <tcp_segs_free>
    next = NULL;
 8010234:	2300      	movs	r3, #0
 8010236:	603b      	str	r3, [r7, #0]
 8010238:	e055      	b.n	80102e6 <tcp_oos_insert_segment+0xda>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                      (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 801023a:	683b      	ldr	r3, [r7, #0]
 801023c:	68db      	ldr	r3, [r3, #12]
 801023e:	899b      	ldrh	r3, [r3, #12]
 8010240:	b29b      	uxth	r3, r3
 8010242:	4618      	mov	r0, r3
 8010244:	f7fc f8f2 	bl	800c42c <lwip_htons>
 8010248:	4603      	mov	r3, r0
 801024a:	f003 0301 	and.w	r3, r3, #1
 801024e:	2b00      	cmp	r3, #0
 8010250:	d00d      	beq.n	801026e <tcp_oos_insert_segment+0x62>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 8010252:	687b      	ldr	r3, [r7, #4]
 8010254:	68db      	ldr	r3, [r3, #12]
 8010256:	899b      	ldrh	r3, [r3, #12]
 8010258:	b29c      	uxth	r4, r3
 801025a:	2001      	movs	r0, #1
 801025c:	f7fc f8e6 	bl	800c42c <lwip_htons>
 8010260:	4603      	mov	r3, r0
 8010262:	461a      	mov	r2, r3
 8010264:	687b      	ldr	r3, [r7, #4]
 8010266:	68db      	ldr	r3, [r3, #12]
 8010268:	4322      	orrs	r2, r4
 801026a:	b292      	uxth	r2, r2
 801026c:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 801026e:	683b      	ldr	r3, [r7, #0]
 8010270:	60fb      	str	r3, [r7, #12]
      next = next->next;
 8010272:	683b      	ldr	r3, [r7, #0]
 8010274:	681b      	ldr	r3, [r3, #0]
 8010276:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 8010278:	68f8      	ldr	r0, [r7, #12]
 801027a:	f7fe fbdc 	bl	800ea36 <tcp_seg_free>
    while (next &&
 801027e:	683b      	ldr	r3, [r7, #0]
 8010280:	2b00      	cmp	r3, #0
 8010282:	d00e      	beq.n	80102a2 <tcp_oos_insert_segment+0x96>
           TCP_SEQ_GEQ((seqno + cseg->len),
 8010284:	687b      	ldr	r3, [r7, #4]
 8010286:	891b      	ldrh	r3, [r3, #8]
 8010288:	461a      	mov	r2, r3
 801028a:	4b1a      	ldr	r3, [pc, #104]	; (80102f4 <tcp_oos_insert_segment+0xe8>)
 801028c:	681b      	ldr	r3, [r3, #0]
 801028e:	441a      	add	r2, r3
 8010290:	683b      	ldr	r3, [r7, #0]
 8010292:	68db      	ldr	r3, [r3, #12]
 8010294:	685b      	ldr	r3, [r3, #4]
 8010296:	6839      	ldr	r1, [r7, #0]
 8010298:	8909      	ldrh	r1, [r1, #8]
 801029a:	440b      	add	r3, r1
 801029c:	1ad3      	subs	r3, r2, r3
    while (next &&
 801029e:	2b00      	cmp	r3, #0
 80102a0:	dacb      	bge.n	801023a <tcp_oos_insert_segment+0x2e>
    }
    if (next &&
 80102a2:	683b      	ldr	r3, [r7, #0]
 80102a4:	2b00      	cmp	r3, #0
 80102a6:	d01e      	beq.n	80102e6 <tcp_oos_insert_segment+0xda>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 80102a8:	687b      	ldr	r3, [r7, #4]
 80102aa:	891b      	ldrh	r3, [r3, #8]
 80102ac:	461a      	mov	r2, r3
 80102ae:	4b11      	ldr	r3, [pc, #68]	; (80102f4 <tcp_oos_insert_segment+0xe8>)
 80102b0:	681b      	ldr	r3, [r3, #0]
 80102b2:	441a      	add	r2, r3
 80102b4:	683b      	ldr	r3, [r7, #0]
 80102b6:	68db      	ldr	r3, [r3, #12]
 80102b8:	685b      	ldr	r3, [r3, #4]
 80102ba:	1ad3      	subs	r3, r2, r3
    if (next &&
 80102bc:	2b00      	cmp	r3, #0
 80102be:	dd12      	ble.n	80102e6 <tcp_oos_insert_segment+0xda>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 80102c0:	683b      	ldr	r3, [r7, #0]
 80102c2:	68db      	ldr	r3, [r3, #12]
 80102c4:	685b      	ldr	r3, [r3, #4]
 80102c6:	b29a      	uxth	r2, r3
 80102c8:	4b0a      	ldr	r3, [pc, #40]	; (80102f4 <tcp_oos_insert_segment+0xe8>)
 80102ca:	681b      	ldr	r3, [r3, #0]
 80102cc:	b29b      	uxth	r3, r3
 80102ce:	1ad3      	subs	r3, r2, r3
 80102d0:	b29a      	uxth	r2, r3
 80102d2:	687b      	ldr	r3, [r7, #4]
 80102d4:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 80102d6:	687b      	ldr	r3, [r7, #4]
 80102d8:	685a      	ldr	r2, [r3, #4]
 80102da:	687b      	ldr	r3, [r7, #4]
 80102dc:	891b      	ldrh	r3, [r3, #8]
 80102de:	4619      	mov	r1, r3
 80102e0:	4610      	mov	r0, r2
 80102e2:	f7fd f8d1 	bl	800d488 <pbuf_realloc>
    }
  }
  cseg->next = next;
 80102e6:	687b      	ldr	r3, [r7, #4]
 80102e8:	683a      	ldr	r2, [r7, #0]
 80102ea:	601a      	str	r2, [r3, #0]
}
 80102ec:	bf00      	nop
 80102ee:	3714      	adds	r7, #20
 80102f0:	46bd      	mov	sp, r7
 80102f2:	bd90      	pop	{r4, r7, pc}
 80102f4:	20004b90 	.word	0x20004b90

080102f8 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 80102f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80102fa:	b08d      	sub	sp, #52	; 0x34
 80102fc:	af00      	add	r7, sp, #0
 80102fe:	6078      	str	r0, [r7, #4]
#endif /* TCP_QUEUE_OOSEQ */
  s32_t off;
  s16_t m;
  u32_t right_wnd_edge;
  u16_t new_tot_len;
  int found_dupack = 0;
 8010300:	2300      	movs	r3, #0
 8010302:	61fb      	str	r3, [r7, #28]
#if TCP_OOSEQ_MAX_BYTES || TCP_OOSEQ_MAX_PBUFS
  u32_t ooseq_blen;
  u16_t ooseq_qlen;
#endif /* TCP_OOSEQ_MAX_BYTES || TCP_OOSEQ_MAX_PBUFS */

  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 8010304:	687b      	ldr	r3, [r7, #4]
 8010306:	7d1b      	ldrb	r3, [r3, #20]
 8010308:	2b03      	cmp	r3, #3
 801030a:	d806      	bhi.n	801031a <tcp_receive+0x22>
 801030c:	4ba6      	ldr	r3, [pc, #664]	; (80105a8 <tcp_receive+0x2b0>)
 801030e:	f44f 6281 	mov.w	r2, #1032	; 0x408
 8010312:	49a6      	ldr	r1, [pc, #664]	; (80105ac <tcp_receive+0x2b4>)
 8010314:	48a6      	ldr	r0, [pc, #664]	; (80105b0 <tcp_receive+0x2b8>)
 8010316:	f007 fcf9 	bl	8017d0c <iprintf>

  if (flags & TCP_ACK) {
 801031a:	4ba6      	ldr	r3, [pc, #664]	; (80105b4 <tcp_receive+0x2bc>)
 801031c:	781b      	ldrb	r3, [r3, #0]
 801031e:	f003 0310 	and.w	r3, r3, #16
 8010322:	2b00      	cmp	r3, #0
 8010324:	f000 82bf 	beq.w	80108a6 <tcp_receive+0x5ae>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 8010328:	687b      	ldr	r3, [r7, #4]
 801032a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 801032e:	461a      	mov	r2, r3
 8010330:	687b      	ldr	r3, [r7, #4]
 8010332:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010334:	4413      	add	r3, r2
 8010336:	617b      	str	r3, [r7, #20]

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8010338:	687b      	ldr	r3, [r7, #4]
 801033a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801033c:	4b9e      	ldr	r3, [pc, #632]	; (80105b8 <tcp_receive+0x2c0>)
 801033e:	681b      	ldr	r3, [r3, #0]
 8010340:	1ad3      	subs	r3, r2, r3
 8010342:	2b00      	cmp	r3, #0
 8010344:	db1b      	blt.n	801037e <tcp_receive+0x86>
       (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8010346:	687b      	ldr	r3, [r7, #4]
 8010348:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801034a:	4b9b      	ldr	r3, [pc, #620]	; (80105b8 <tcp_receive+0x2c0>)
 801034c:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 801034e:	429a      	cmp	r2, r3
 8010350:	d106      	bne.n	8010360 <tcp_receive+0x68>
       (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8010352:	687b      	ldr	r3, [r7, #4]
 8010354:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8010356:	4b99      	ldr	r3, [pc, #612]	; (80105bc <tcp_receive+0x2c4>)
 8010358:	681b      	ldr	r3, [r3, #0]
 801035a:	1ad3      	subs	r3, r2, r3
 801035c:	2b00      	cmp	r3, #0
 801035e:	db0e      	blt.n	801037e <tcp_receive+0x86>
       (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8010360:	687b      	ldr	r3, [r7, #4]
 8010362:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8010364:	4b95      	ldr	r3, [pc, #596]	; (80105bc <tcp_receive+0x2c4>)
 8010366:	681b      	ldr	r3, [r3, #0]
       (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8010368:	429a      	cmp	r2, r3
 801036a:	d141      	bne.n	80103f0 <tcp_receive+0xf8>
       (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 801036c:	4b94      	ldr	r3, [pc, #592]	; (80105c0 <tcp_receive+0x2c8>)
 801036e:	681b      	ldr	r3, [r3, #0]
 8010370:	89db      	ldrh	r3, [r3, #14]
 8010372:	b29a      	uxth	r2, r3
 8010374:	687b      	ldr	r3, [r7, #4]
 8010376:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 801037a:	429a      	cmp	r2, r3
 801037c:	d938      	bls.n	80103f0 <tcp_receive+0xf8>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 801037e:	4b90      	ldr	r3, [pc, #576]	; (80105c0 <tcp_receive+0x2c8>)
 8010380:	681b      	ldr	r3, [r3, #0]
 8010382:	89db      	ldrh	r3, [r3, #14]
 8010384:	b29a      	uxth	r2, r3
 8010386:	687b      	ldr	r3, [r7, #4]
 8010388:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 801038c:	687b      	ldr	r3, [r7, #4]
 801038e:	f8b3 205e 	ldrh.w	r2, [r3, #94]	; 0x5e
 8010392:	687b      	ldr	r3, [r7, #4]
 8010394:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8010398:	429a      	cmp	r2, r3
 801039a:	d205      	bcs.n	80103a8 <tcp_receive+0xb0>
        pcb->snd_wnd_max = pcb->snd_wnd;
 801039c:	687b      	ldr	r3, [r7, #4]
 801039e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 80103a2:	687b      	ldr	r3, [r7, #4]
 80103a4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      }
      pcb->snd_wl1 = seqno;
 80103a8:	4b83      	ldr	r3, [pc, #524]	; (80105b8 <tcp_receive+0x2c0>)
 80103aa:	681a      	ldr	r2, [r3, #0]
 80103ac:	687b      	ldr	r3, [r7, #4]
 80103ae:	651a      	str	r2, [r3, #80]	; 0x50
      pcb->snd_wl2 = ackno;
 80103b0:	4b82      	ldr	r3, [pc, #520]	; (80105bc <tcp_receive+0x2c4>)
 80103b2:	681a      	ldr	r2, [r3, #0]
 80103b4:	687b      	ldr	r3, [r7, #4]
 80103b6:	655a      	str	r2, [r3, #84]	; 0x54
      if (pcb->snd_wnd == 0) {
 80103b8:	687b      	ldr	r3, [r7, #4]
 80103ba:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80103be:	2b00      	cmp	r3, #0
 80103c0:	d10d      	bne.n	80103de <tcp_receive+0xe6>
        if (pcb->persist_backoff == 0) {
 80103c2:	687b      	ldr	r3, [r7, #4]
 80103c4:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 80103c8:	2b00      	cmp	r3, #0
 80103ca:	d111      	bne.n	80103f0 <tcp_receive+0xf8>
          /* start persist timer */
          pcb->persist_cnt = 0;
 80103cc:	687b      	ldr	r3, [r7, #4]
 80103ce:	2200      	movs	r2, #0
 80103d0:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
          pcb->persist_backoff = 1;
 80103d4:	687b      	ldr	r3, [r7, #4]
 80103d6:	2201      	movs	r2, #1
 80103d8:	f883 2095 	strb.w	r2, [r3, #149]	; 0x95
 80103dc:	e008      	b.n	80103f0 <tcp_receive+0xf8>
        }
      } else if (pcb->persist_backoff > 0) {
 80103de:	687b      	ldr	r3, [r7, #4]
 80103e0:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 80103e4:	2b00      	cmp	r3, #0
 80103e6:	d003      	beq.n	80103f0 <tcp_receive+0xf8>
        /* stop persist timer */
          pcb->persist_backoff = 0;
 80103e8:	687b      	ldr	r3, [r7, #4]
 80103ea:	2200      	movs	r2, #0
 80103ec:	f883 2095 	strb.w	r2, [r3, #149]	; 0x95
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 80103f0:	4b72      	ldr	r3, [pc, #456]	; (80105bc <tcp_receive+0x2c4>)
 80103f2:	681a      	ldr	r2, [r3, #0]
 80103f4:	687b      	ldr	r3, [r7, #4]
 80103f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80103f8:	1ad3      	subs	r3, r2, r3
 80103fa:	2b00      	cmp	r3, #0
 80103fc:	dc53      	bgt.n	80104a6 <tcp_receive+0x1ae>
      /* Clause 2 */
      if (tcplen == 0) {
 80103fe:	4b71      	ldr	r3, [pc, #452]	; (80105c4 <tcp_receive+0x2cc>)
 8010400:	881b      	ldrh	r3, [r3, #0]
 8010402:	2b00      	cmp	r3, #0
 8010404:	d146      	bne.n	8010494 <tcp_receive+0x19c>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 8010406:	687b      	ldr	r3, [r7, #4]
 8010408:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801040a:	687a      	ldr	r2, [r7, #4]
 801040c:	f8b2 205c 	ldrh.w	r2, [r2, #92]	; 0x5c
 8010410:	4413      	add	r3, r2
 8010412:	697a      	ldr	r2, [r7, #20]
 8010414:	429a      	cmp	r2, r3
 8010416:	d13d      	bne.n	8010494 <tcp_receive+0x19c>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 8010418:	687b      	ldr	r3, [r7, #4]
 801041a:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 801041e:	2b00      	cmp	r3, #0
 8010420:	db38      	blt.n	8010494 <tcp_receive+0x19c>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 8010422:	687b      	ldr	r3, [r7, #4]
 8010424:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8010426:	4b65      	ldr	r3, [pc, #404]	; (80105bc <tcp_receive+0x2c4>)
 8010428:	681b      	ldr	r3, [r3, #0]
 801042a:	429a      	cmp	r2, r3
 801042c:	d132      	bne.n	8010494 <tcp_receive+0x19c>
              found_dupack = 1;
 801042e:	2301      	movs	r3, #1
 8010430:	61fb      	str	r3, [r7, #28]
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 8010432:	687b      	ldr	r3, [r7, #4]
 8010434:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8010438:	2bff      	cmp	r3, #255	; 0xff
 801043a:	d007      	beq.n	801044c <tcp_receive+0x154>
                ++pcb->dupacks;
 801043c:	687b      	ldr	r3, [r7, #4]
 801043e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8010442:	3301      	adds	r3, #1
 8010444:	b2da      	uxtb	r2, r3
 8010446:	687b      	ldr	r3, [r7, #4]
 8010448:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 801044c:	687b      	ldr	r3, [r7, #4]
 801044e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8010452:	2b03      	cmp	r3, #3
 8010454:	d916      	bls.n	8010484 <tcp_receive+0x18c>
                /* Inflate the congestion window, but not if it means that
                   the value overflows. */
                if ((tcpwnd_size_t)(pcb->cwnd + pcb->mss) > pcb->cwnd) {
 8010456:	687b      	ldr	r3, [r7, #4]
 8010458:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 801045c:	687b      	ldr	r3, [r7, #4]
 801045e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010460:	4413      	add	r3, r2
 8010462:	b29a      	uxth	r2, r3
 8010464:	687b      	ldr	r3, [r7, #4]
 8010466:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 801046a:	429a      	cmp	r2, r3
 801046c:	d912      	bls.n	8010494 <tcp_receive+0x19c>
                  pcb->cwnd += pcb->mss;
 801046e:	687b      	ldr	r3, [r7, #4]
 8010470:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8010474:	687b      	ldr	r3, [r7, #4]
 8010476:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010478:	4413      	add	r3, r2
 801047a:	b29a      	uxth	r2, r3
 801047c:	687b      	ldr	r3, [r7, #4]
 801047e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8010482:	e007      	b.n	8010494 <tcp_receive+0x19c>
                }
              } else if (pcb->dupacks == 3) {
 8010484:	687b      	ldr	r3, [r7, #4]
 8010486:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 801048a:	2b03      	cmp	r3, #3
 801048c:	d102      	bne.n	8010494 <tcp_receive+0x19c>
                /* Do fast retransmit */
                tcp_rexmit_fast(pcb);
 801048e:	6878      	ldr	r0, [r7, #4]
 8010490:	f001 fdfc 	bl	801208c <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 8010494:	69fb      	ldr	r3, [r7, #28]
 8010496:	2b00      	cmp	r3, #0
 8010498:	f040 8169 	bne.w	801076e <tcp_receive+0x476>
        pcb->dupacks = 0;
 801049c:	687b      	ldr	r3, [r7, #4]
 801049e:	2200      	movs	r2, #0
 80104a0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80104a4:	e163      	b.n	801076e <tcp_receive+0x476>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack+1, pcb->snd_nxt)) {
 80104a6:	4b45      	ldr	r3, [pc, #276]	; (80105bc <tcp_receive+0x2c4>)
 80104a8:	681a      	ldr	r2, [r3, #0]
 80104aa:	687b      	ldr	r3, [r7, #4]
 80104ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80104ae:	1ad3      	subs	r3, r2, r3
 80104b0:	3b01      	subs	r3, #1
 80104b2:	2b00      	cmp	r3, #0
 80104b4:	f2c0 8107 	blt.w	80106c6 <tcp_receive+0x3ce>
 80104b8:	4b40      	ldr	r3, [pc, #256]	; (80105bc <tcp_receive+0x2c4>)
 80104ba:	681a      	ldr	r2, [r3, #0]
 80104bc:	687b      	ldr	r3, [r7, #4]
 80104be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80104c0:	1ad3      	subs	r3, r2, r3
 80104c2:	2b00      	cmp	r3, #0
 80104c4:	f300 80ff 	bgt.w	80106c6 <tcp_receive+0x3ce>
      /* We come here when the ACK acknowledges new data. */

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 80104c8:	687b      	ldr	r3, [r7, #4]
 80104ca:	7e9b      	ldrb	r3, [r3, #26]
 80104cc:	f003 0304 	and.w	r3, r3, #4
 80104d0:	2b00      	cmp	r3, #0
 80104d2:	d00c      	beq.n	80104ee <tcp_receive+0x1f6>
        pcb->flags &= ~TF_INFR;
 80104d4:	687b      	ldr	r3, [r7, #4]
 80104d6:	7e9b      	ldrb	r3, [r3, #26]
 80104d8:	f023 0304 	bic.w	r3, r3, #4
 80104dc:	b2da      	uxtb	r2, r3
 80104de:	687b      	ldr	r3, [r7, #4]
 80104e0:	769a      	strb	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 80104e2:	687b      	ldr	r3, [r7, #4]
 80104e4:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 80104e8:	687b      	ldr	r3, [r7, #4]
 80104ea:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 80104ee:	687b      	ldr	r3, [r7, #4]
 80104f0:	2200      	movs	r2, #0
 80104f2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (pcb->sa >> 3) + pcb->sv;
 80104f6:	687b      	ldr	r3, [r7, #4]
 80104f8:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 80104fc:	10db      	asrs	r3, r3, #3
 80104fe:	b21b      	sxth	r3, r3
 8010500:	b29a      	uxth	r2, r3
 8010502:	687b      	ldr	r3, [r7, #4]
 8010504:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8010508:	b29b      	uxth	r3, r3
 801050a:	4413      	add	r3, r2
 801050c:	b29b      	uxth	r3, r3
 801050e:	b21a      	sxth	r2, r3
 8010510:	687b      	ldr	r3, [r7, #4]
 8010512:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 8010516:	687b      	ldr	r3, [r7, #4]
 8010518:	2200      	movs	r2, #0
 801051a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 801051e:	4b27      	ldr	r3, [pc, #156]	; (80105bc <tcp_receive+0x2c4>)
 8010520:	681a      	ldr	r2, [r3, #0]
 8010522:	687b      	ldr	r3, [r7, #4]
 8010524:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 8010526:	687b      	ldr	r3, [r7, #4]
 8010528:	7d1b      	ldrb	r3, [r3, #20]
 801052a:	2b03      	cmp	r3, #3
 801052c:	f240 8094 	bls.w	8010658 <tcp_receive+0x360>
        if (pcb->cwnd < pcb->ssthresh) {
 8010530:	687b      	ldr	r3, [r7, #4]
 8010532:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8010536:	687b      	ldr	r3, [r7, #4]
 8010538:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 801053c:	429a      	cmp	r2, r3
 801053e:	d216      	bcs.n	801056e <tcp_receive+0x276>
          if ((tcpwnd_size_t)(pcb->cwnd + pcb->mss) > pcb->cwnd) {
 8010540:	687b      	ldr	r3, [r7, #4]
 8010542:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8010546:	687b      	ldr	r3, [r7, #4]
 8010548:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801054a:	4413      	add	r3, r2
 801054c:	b29a      	uxth	r2, r3
 801054e:	687b      	ldr	r3, [r7, #4]
 8010550:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8010554:	429a      	cmp	r2, r3
 8010556:	d97f      	bls.n	8010658 <tcp_receive+0x360>
            pcb->cwnd += pcb->mss;
 8010558:	687b      	ldr	r3, [r7, #4]
 801055a:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 801055e:	687b      	ldr	r3, [r7, #4]
 8010560:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010562:	4413      	add	r3, r2
 8010564:	b29a      	uxth	r2, r3
 8010566:	687b      	ldr	r3, [r7, #4]
 8010568:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 801056c:	e074      	b.n	8010658 <tcp_receive+0x360>
          }
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          tcpwnd_size_t new_cwnd = (pcb->cwnd + pcb->mss * pcb->mss / pcb->cwnd);
 801056e:	687b      	ldr	r3, [r7, #4]
 8010570:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8010574:	687b      	ldr	r3, [r7, #4]
 8010576:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010578:	4619      	mov	r1, r3
 801057a:	687b      	ldr	r3, [r7, #4]
 801057c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801057e:	fb03 f301 	mul.w	r3, r3, r1
 8010582:	6879      	ldr	r1, [r7, #4]
 8010584:	f8b1 1048 	ldrh.w	r1, [r1, #72]	; 0x48
 8010588:	fb93 f3f1 	sdiv	r3, r3, r1
 801058c:	b29b      	uxth	r3, r3
 801058e:	4413      	add	r3, r2
 8010590:	827b      	strh	r3, [r7, #18]
          if (new_cwnd > pcb->cwnd) {
 8010592:	687b      	ldr	r3, [r7, #4]
 8010594:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8010598:	8a7a      	ldrh	r2, [r7, #18]
 801059a:	429a      	cmp	r2, r3
 801059c:	d95c      	bls.n	8010658 <tcp_receive+0x360>
            pcb->cwnd = new_cwnd;
 801059e:	687b      	ldr	r3, [r7, #4]
 80105a0:	8a7a      	ldrh	r2, [r7, #18]
 80105a2:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked): 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      while (pcb->unacked != NULL &&
 80105a6:	e057      	b.n	8010658 <tcp_receive+0x360>
 80105a8:	08019894 	.word	0x08019894
 80105ac:	08019ab8 	.word	0x08019ab8
 80105b0:	080198d8 	.word	0x080198d8
 80105b4:	20004b9c 	.word	0x20004b9c
 80105b8:	20004b90 	.word	0x20004b90
 80105bc:	20004b94 	.word	0x20004b94
 80105c0:	20004b80 	.word	0x20004b80
 80105c4:	20004b9a 	.word	0x20004b9a
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->unacked\n",
                                      lwip_ntohl(pcb->unacked->tcphdr->seqno),
                                      lwip_ntohl(pcb->unacked->tcphdr->seqno) +
                                      TCP_TCPLEN(pcb->unacked)));

        next = pcb->unacked;
 80105c8:	687b      	ldr	r3, [r7, #4]
 80105ca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80105cc:	62fb      	str	r3, [r7, #44]	; 0x2c
        pcb->unacked = pcb->unacked->next;
 80105ce:	687b      	ldr	r3, [r7, #4]
 80105d0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80105d2:	681a      	ldr	r2, [r3, #0]
 80105d4:	687b      	ldr	r3, [r7, #4]
 80105d6:	66da      	str	r2, [r3, #108]	; 0x6c

        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ", (tcpwnd_size_t)pcb->snd_queuelen));
        LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= pbuf_clen(next->p)));
 80105d8:	687b      	ldr	r3, [r7, #4]
 80105da:	f8b3 4062 	ldrh.w	r4, [r3, #98]	; 0x62
 80105de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80105e0:	685b      	ldr	r3, [r3, #4]
 80105e2:	4618      	mov	r0, r3
 80105e4:	f7fd f95e 	bl	800d8a4 <pbuf_clen>
 80105e8:	4603      	mov	r3, r0
 80105ea:	429c      	cmp	r4, r3
 80105ec:	d206      	bcs.n	80105fc <tcp_receive+0x304>
 80105ee:	4b70      	ldr	r3, [pc, #448]	; (80107b0 <tcp_receive+0x4b8>)
 80105f0:	f240 429e 	movw	r2, #1182	; 0x49e
 80105f4:	496f      	ldr	r1, [pc, #444]	; (80107b4 <tcp_receive+0x4bc>)
 80105f6:	4870      	ldr	r0, [pc, #448]	; (80107b8 <tcp_receive+0x4c0>)
 80105f8:	f007 fb88 	bl	8017d0c <iprintf>

        pcb->snd_queuelen -= pbuf_clen(next->p);
 80105fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80105fe:	685b      	ldr	r3, [r3, #4]
 8010600:	4618      	mov	r0, r3
 8010602:	f7fd f94f 	bl	800d8a4 <pbuf_clen>
 8010606:	4603      	mov	r3, r0
 8010608:	461a      	mov	r2, r3
 801060a:	687b      	ldr	r3, [r7, #4]
 801060c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8010610:	1a9b      	subs	r3, r3, r2
 8010612:	b29a      	uxth	r2, r3
 8010614:	687b      	ldr	r3, [r7, #4]
 8010616:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        recv_acked += next->len;
 801061a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801061c:	891a      	ldrh	r2, [r3, #8]
 801061e:	4b67      	ldr	r3, [pc, #412]	; (80107bc <tcp_receive+0x4c4>)
 8010620:	881b      	ldrh	r3, [r3, #0]
 8010622:	4413      	add	r3, r2
 8010624:	b29a      	uxth	r2, r3
 8010626:	4b65      	ldr	r3, [pc, #404]	; (80107bc <tcp_receive+0x4c4>)
 8010628:	801a      	strh	r2, [r3, #0]
        tcp_seg_free(next);
 801062a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801062c:	f7fe fa03 	bl	800ea36 <tcp_seg_free>

        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing unacked)\n", (tcpwnd_size_t)pcb->snd_queuelen));
        if (pcb->snd_queuelen != 0) {
 8010630:	687b      	ldr	r3, [r7, #4]
 8010632:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8010636:	2b00      	cmp	r3, #0
 8010638:	d00e      	beq.n	8010658 <tcp_receive+0x360>
          LWIP_ASSERT("tcp_receive: valid queue length", pcb->unacked != NULL ||
 801063a:	687b      	ldr	r3, [r7, #4]
 801063c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801063e:	2b00      	cmp	r3, #0
 8010640:	d10a      	bne.n	8010658 <tcp_receive+0x360>
 8010642:	687b      	ldr	r3, [r7, #4]
 8010644:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8010646:	2b00      	cmp	r3, #0
 8010648:	d106      	bne.n	8010658 <tcp_receive+0x360>
 801064a:	4b59      	ldr	r3, [pc, #356]	; (80107b0 <tcp_receive+0x4b8>)
 801064c:	f240 42a7 	movw	r2, #1191	; 0x4a7
 8010650:	495b      	ldr	r1, [pc, #364]	; (80107c0 <tcp_receive+0x4c8>)
 8010652:	4859      	ldr	r0, [pc, #356]	; (80107b8 <tcp_receive+0x4c0>)
 8010654:	f007 fb5a 	bl	8017d0c <iprintf>
      while (pcb->unacked != NULL &&
 8010658:	687b      	ldr	r3, [r7, #4]
 801065a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801065c:	2b00      	cmp	r3, #0
 801065e:	d022      	beq.n	80106a6 <tcp_receive+0x3ae>
             TCP_SEQ_LEQ(lwip_ntohl(pcb->unacked->tcphdr->seqno) +
 8010660:	687b      	ldr	r3, [r7, #4]
 8010662:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010664:	68db      	ldr	r3, [r3, #12]
 8010666:	685b      	ldr	r3, [r3, #4]
 8010668:	4618      	mov	r0, r3
 801066a:	f7fb feed 	bl	800c448 <lwip_htonl>
 801066e:	4604      	mov	r4, r0
 8010670:	687b      	ldr	r3, [r7, #4]
 8010672:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010674:	891b      	ldrh	r3, [r3, #8]
 8010676:	461d      	mov	r5, r3
 8010678:	687b      	ldr	r3, [r7, #4]
 801067a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801067c:	68db      	ldr	r3, [r3, #12]
 801067e:	899b      	ldrh	r3, [r3, #12]
 8010680:	b29b      	uxth	r3, r3
 8010682:	4618      	mov	r0, r3
 8010684:	f7fb fed2 	bl	800c42c <lwip_htons>
 8010688:	4603      	mov	r3, r0
 801068a:	f003 0303 	and.w	r3, r3, #3
 801068e:	2b00      	cmp	r3, #0
 8010690:	d001      	beq.n	8010696 <tcp_receive+0x39e>
 8010692:	2301      	movs	r3, #1
 8010694:	e000      	b.n	8010698 <tcp_receive+0x3a0>
 8010696:	2300      	movs	r3, #0
 8010698:	442b      	add	r3, r5
 801069a:	18e2      	adds	r2, r4, r3
 801069c:	4b49      	ldr	r3, [pc, #292]	; (80107c4 <tcp_receive+0x4cc>)
 801069e:	681b      	ldr	r3, [r3, #0]
 80106a0:	1ad3      	subs	r3, r2, r3
      while (pcb->unacked != NULL &&
 80106a2:	2b00      	cmp	r3, #0
 80106a4:	dd90      	ble.n	80105c8 <tcp_receive+0x2d0>
        }
      }

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 80106a6:	687b      	ldr	r3, [r7, #4]
 80106a8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80106aa:	2b00      	cmp	r3, #0
 80106ac:	d104      	bne.n	80106b8 <tcp_receive+0x3c0>
        pcb->rtime = -1;
 80106ae:	687b      	ldr	r3, [r7, #4]
 80106b0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80106b4:	861a      	strh	r2, [r3, #48]	; 0x30
 80106b6:	e002      	b.n	80106be <tcp_receive+0x3c6>
      } else {
        pcb->rtime = 0;
 80106b8:	687b      	ldr	r3, [r7, #4]
 80106ba:	2200      	movs	r2, #0
 80106bc:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 80106be:	687b      	ldr	r3, [r7, #4]
 80106c0:	2200      	movs	r2, #0
 80106c2:	76da      	strb	r2, [r3, #27]
 80106c4:	e002      	b.n	80106cc <tcp_receive+0x3d4>
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 80106c6:	6878      	ldr	r0, [r7, #4]
 80106c8:	f001 f8fe 	bl	80118c8 <tcp_send_empty_ack>
       on the list are acknowledged by the ACK. This may seem
       strange since an "unsent" segment shouldn't be acked. The
       rationale is that lwIP puts all outstanding segments on the
       ->unsent list after a retransmission, so these segments may
       in fact have been sent once. */
    while (pcb->unsent != NULL &&
 80106cc:	e04f      	b.n	801076e <tcp_receive+0x476>
                           TCP_TCPLEN(pcb->unsent), pcb->snd_nxt)) {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->unsent\n",
                                    lwip_ntohl(pcb->unsent->tcphdr->seqno), lwip_ntohl(pcb->unsent->tcphdr->seqno) +
                                    TCP_TCPLEN(pcb->unsent)));

      next = pcb->unsent;
 80106ce:	687b      	ldr	r3, [r7, #4]
 80106d0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80106d2:	62fb      	str	r3, [r7, #44]	; 0x2c
      pcb->unsent = pcb->unsent->next;
 80106d4:	687b      	ldr	r3, [r7, #4]
 80106d6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80106d8:	681a      	ldr	r2, [r3, #0]
 80106da:	687b      	ldr	r3, [r7, #4]
 80106dc:	669a      	str	r2, [r3, #104]	; 0x68
#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 80106de:	687b      	ldr	r3, [r7, #4]
 80106e0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80106e2:	2b00      	cmp	r3, #0
 80106e4:	d103      	bne.n	80106ee <tcp_receive+0x3f6>
        pcb->unsent_oversize = 0;
 80106e6:	687b      	ldr	r3, [r7, #4]
 80106e8:	2200      	movs	r2, #0
 80106ea:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      }
#endif /* TCP_OVERSIZE */
      LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ", (tcpwnd_size_t)pcb->snd_queuelen));
      LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= pbuf_clen(next->p)));
 80106ee:	687b      	ldr	r3, [r7, #4]
 80106f0:	f8b3 4062 	ldrh.w	r4, [r3, #98]	; 0x62
 80106f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80106f6:	685b      	ldr	r3, [r3, #4]
 80106f8:	4618      	mov	r0, r3
 80106fa:	f7fd f8d3 	bl	800d8a4 <pbuf_clen>
 80106fe:	4603      	mov	r3, r0
 8010700:	429c      	cmp	r4, r3
 8010702:	d206      	bcs.n	8010712 <tcp_receive+0x41a>
 8010704:	4b2a      	ldr	r3, [pc, #168]	; (80107b0 <tcp_receive+0x4b8>)
 8010706:	f240 42d5 	movw	r2, #1237	; 0x4d5
 801070a:	492a      	ldr	r1, [pc, #168]	; (80107b4 <tcp_receive+0x4bc>)
 801070c:	482a      	ldr	r0, [pc, #168]	; (80107b8 <tcp_receive+0x4c0>)
 801070e:	f007 fafd 	bl	8017d0c <iprintf>
      /* Prevent ACK for FIN to generate a sent event */
      pcb->snd_queuelen -= pbuf_clen(next->p);
 8010712:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010714:	685b      	ldr	r3, [r3, #4]
 8010716:	4618      	mov	r0, r3
 8010718:	f7fd f8c4 	bl	800d8a4 <pbuf_clen>
 801071c:	4603      	mov	r3, r0
 801071e:	461a      	mov	r2, r3
 8010720:	687b      	ldr	r3, [r7, #4]
 8010722:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8010726:	1a9b      	subs	r3, r3, r2
 8010728:	b29a      	uxth	r2, r3
 801072a:	687b      	ldr	r3, [r7, #4]
 801072c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      recv_acked += next->len;
 8010730:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010732:	891a      	ldrh	r2, [r3, #8]
 8010734:	4b21      	ldr	r3, [pc, #132]	; (80107bc <tcp_receive+0x4c4>)
 8010736:	881b      	ldrh	r3, [r3, #0]
 8010738:	4413      	add	r3, r2
 801073a:	b29a      	uxth	r2, r3
 801073c:	4b1f      	ldr	r3, [pc, #124]	; (80107bc <tcp_receive+0x4c4>)
 801073e:	801a      	strh	r2, [r3, #0]
      tcp_seg_free(next);
 8010740:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8010742:	f7fe f978 	bl	800ea36 <tcp_seg_free>
      LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing unsent)\n", (tcpwnd_size_t)pcb->snd_queuelen));
      if (pcb->snd_queuelen != 0) {
 8010746:	687b      	ldr	r3, [r7, #4]
 8010748:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 801074c:	2b00      	cmp	r3, #0
 801074e:	d00e      	beq.n	801076e <tcp_receive+0x476>
        LWIP_ASSERT("tcp_receive: valid queue length",
 8010750:	687b      	ldr	r3, [r7, #4]
 8010752:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010754:	2b00      	cmp	r3, #0
 8010756:	d10a      	bne.n	801076e <tcp_receive+0x476>
 8010758:	687b      	ldr	r3, [r7, #4]
 801075a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801075c:	2b00      	cmp	r3, #0
 801075e:	d106      	bne.n	801076e <tcp_receive+0x476>
 8010760:	4b13      	ldr	r3, [pc, #76]	; (80107b0 <tcp_receive+0x4b8>)
 8010762:	f240 42dd 	movw	r2, #1245	; 0x4dd
 8010766:	4916      	ldr	r1, [pc, #88]	; (80107c0 <tcp_receive+0x4c8>)
 8010768:	4813      	ldr	r0, [pc, #76]	; (80107b8 <tcp_receive+0x4c0>)
 801076a:	f007 facf 	bl	8017d0c <iprintf>
    while (pcb->unsent != NULL &&
 801076e:	687b      	ldr	r3, [r7, #4]
 8010770:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8010772:	2b00      	cmp	r3, #0
 8010774:	d036      	beq.n	80107e4 <tcp_receive+0x4ec>
           TCP_SEQ_BETWEEN(ackno, lwip_ntohl(pcb->unsent->tcphdr->seqno) +
 8010776:	4b13      	ldr	r3, [pc, #76]	; (80107c4 <tcp_receive+0x4cc>)
 8010778:	681c      	ldr	r4, [r3, #0]
 801077a:	687b      	ldr	r3, [r7, #4]
 801077c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801077e:	68db      	ldr	r3, [r3, #12]
 8010780:	685b      	ldr	r3, [r3, #4]
 8010782:	4618      	mov	r0, r3
 8010784:	f7fb fe60 	bl	800c448 <lwip_htonl>
 8010788:	4605      	mov	r5, r0
 801078a:	687b      	ldr	r3, [r7, #4]
 801078c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801078e:	891b      	ldrh	r3, [r3, #8]
 8010790:	461e      	mov	r6, r3
 8010792:	687b      	ldr	r3, [r7, #4]
 8010794:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8010796:	68db      	ldr	r3, [r3, #12]
 8010798:	899b      	ldrh	r3, [r3, #12]
 801079a:	b29b      	uxth	r3, r3
 801079c:	4618      	mov	r0, r3
 801079e:	f7fb fe45 	bl	800c42c <lwip_htons>
 80107a2:	4603      	mov	r3, r0
 80107a4:	f003 0303 	and.w	r3, r3, #3
 80107a8:	2b00      	cmp	r3, #0
 80107aa:	d00d      	beq.n	80107c8 <tcp_receive+0x4d0>
 80107ac:	2301      	movs	r3, #1
 80107ae:	e00c      	b.n	80107ca <tcp_receive+0x4d2>
 80107b0:	08019894 	.word	0x08019894
 80107b4:	08019ad4 	.word	0x08019ad4
 80107b8:	080198d8 	.word	0x080198d8
 80107bc:	20004b98 	.word	0x20004b98
 80107c0:	08019afc 	.word	0x08019afc
 80107c4:	20004b94 	.word	0x20004b94
 80107c8:	2300      	movs	r3, #0
 80107ca:	4433      	add	r3, r6
 80107cc:	442b      	add	r3, r5
 80107ce:	1ae3      	subs	r3, r4, r3
    while (pcb->unsent != NULL &&
 80107d0:	2b00      	cmp	r3, #0
 80107d2:	db07      	blt.n	80107e4 <tcp_receive+0x4ec>
           TCP_SEQ_BETWEEN(ackno, lwip_ntohl(pcb->unsent->tcphdr->seqno) +
 80107d4:	4b8d      	ldr	r3, [pc, #564]	; (8010a0c <tcp_receive+0x714>)
 80107d6:	681a      	ldr	r2, [r3, #0]
 80107d8:	687b      	ldr	r3, [r7, #4]
 80107da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80107dc:	1ad3      	subs	r3, r2, r3
 80107de:	2b00      	cmp	r3, #0
 80107e0:	f77f af75 	ble.w	80106ce <tcp_receive+0x3d6>
          pcb->unacked != NULL || pcb->unsent != NULL);
      }
    }
    pcb->snd_buf += recv_acked;
 80107e4:	687b      	ldr	r3, [r7, #4]
 80107e6:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 80107ea:	4b89      	ldr	r3, [pc, #548]	; (8010a10 <tcp_receive+0x718>)
 80107ec:	881b      	ldrh	r3, [r3, #0]
 80107ee:	4413      	add	r3, r2
 80107f0:	b29a      	uxth	r2, r3
 80107f2:	687b      	ldr	r3, [r7, #4]
 80107f4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 80107f8:	687b      	ldr	r3, [r7, #4]
 80107fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80107fc:	2b00      	cmp	r3, #0
 80107fe:	d052      	beq.n	80108a6 <tcp_receive+0x5ae>
 8010800:	687b      	ldr	r3, [r7, #4]
 8010802:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8010804:	4b81      	ldr	r3, [pc, #516]	; (8010a0c <tcp_receive+0x714>)
 8010806:	681b      	ldr	r3, [r3, #0]
 8010808:	1ad3      	subs	r3, r2, r3
 801080a:	2b00      	cmp	r3, #0
 801080c:	da4b      	bge.n	80108a6 <tcp_receive+0x5ae>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 801080e:	4b81      	ldr	r3, [pc, #516]	; (8010a14 <tcp_receive+0x71c>)
 8010810:	681b      	ldr	r3, [r3, #0]
 8010812:	b29a      	uxth	r2, r3
 8010814:	687b      	ldr	r3, [r7, #4]
 8010816:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010818:	b29b      	uxth	r3, r3
 801081a:	1ad3      	subs	r3, r2, r3
 801081c:	b29b      	uxth	r3, r3
 801081e:	847b      	strh	r3, [r7, #34]	; 0x22

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = m - (pcb->sa >> 3);
 8010820:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8010822:	687b      	ldr	r3, [r7, #4]
 8010824:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8010828:	10db      	asrs	r3, r3, #3
 801082a:	b21b      	sxth	r3, r3
 801082c:	b29b      	uxth	r3, r3
 801082e:	1ad3      	subs	r3, r2, r3
 8010830:	b29b      	uxth	r3, r3
 8010832:	847b      	strh	r3, [r7, #34]	; 0x22
      pcb->sa += m;
 8010834:	687b      	ldr	r3, [r7, #4]
 8010836:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 801083a:	b29a      	uxth	r2, r3
 801083c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801083e:	4413      	add	r3, r2
 8010840:	b29b      	uxth	r3, r3
 8010842:	b21a      	sxth	r2, r3
 8010844:	687b      	ldr	r3, [r7, #4]
 8010846:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 8010848:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 801084c:	2b00      	cmp	r3, #0
 801084e:	da03      	bge.n	8010858 <tcp_receive+0x560>
        m = -m;
 8010850:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8010852:	425b      	negs	r3, r3
 8010854:	b29b      	uxth	r3, r3
 8010856:	847b      	strh	r3, [r7, #34]	; 0x22
      }
      m = m - (pcb->sv >> 2);
 8010858:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 801085a:	687b      	ldr	r3, [r7, #4]
 801085c:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8010860:	109b      	asrs	r3, r3, #2
 8010862:	b21b      	sxth	r3, r3
 8010864:	b29b      	uxth	r3, r3
 8010866:	1ad3      	subs	r3, r2, r3
 8010868:	b29b      	uxth	r3, r3
 801086a:	847b      	strh	r3, [r7, #34]	; 0x22
      pcb->sv += m;
 801086c:	687b      	ldr	r3, [r7, #4]
 801086e:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8010872:	b29a      	uxth	r2, r3
 8010874:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8010876:	4413      	add	r3, r2
 8010878:	b29b      	uxth	r3, r3
 801087a:	b21a      	sxth	r2, r3
 801087c:	687b      	ldr	r3, [r7, #4]
 801087e:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (pcb->sa >> 3) + pcb->sv;
 8010880:	687b      	ldr	r3, [r7, #4]
 8010882:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8010886:	10db      	asrs	r3, r3, #3
 8010888:	b21b      	sxth	r3, r3
 801088a:	b29a      	uxth	r2, r3
 801088c:	687b      	ldr	r3, [r7, #4]
 801088e:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8010892:	b29b      	uxth	r3, r3
 8010894:	4413      	add	r3, r2
 8010896:	b29b      	uxth	r3, r3
 8010898:	b21a      	sxth	r2, r3
 801089a:	687b      	ldr	r3, [r7, #4]
 801089c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 80108a0:	687b      	ldr	r3, [r7, #4]
 80108a2:	2200      	movs	r2, #0
 80108a4:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 80108a6:	4b5c      	ldr	r3, [pc, #368]	; (8010a18 <tcp_receive+0x720>)
 80108a8:	881b      	ldrh	r3, [r3, #0]
 80108aa:	2b00      	cmp	r3, #0
 80108ac:	f000 84f1 	beq.w	8011292 <tcp_receive+0xf9a>
 80108b0:	687b      	ldr	r3, [r7, #4]
 80108b2:	7d1b      	ldrb	r3, [r3, #20]
 80108b4:	2b06      	cmp	r3, #6
 80108b6:	f200 84ec 	bhi.w	8011292 <tcp_receive+0xf9a>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 80108ba:	687b      	ldr	r3, [r7, #4]
 80108bc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80108be:	4b57      	ldr	r3, [pc, #348]	; (8010a1c <tcp_receive+0x724>)
 80108c0:	681b      	ldr	r3, [r3, #0]
 80108c2:	1ad3      	subs	r3, r2, r3
 80108c4:	3b01      	subs	r3, #1
 80108c6:	2b00      	cmp	r3, #0
 80108c8:	f2c0 80b8 	blt.w	8010a3c <tcp_receive+0x744>
 80108cc:	687b      	ldr	r3, [r7, #4]
 80108ce:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80108d0:	4b51      	ldr	r3, [pc, #324]	; (8010a18 <tcp_receive+0x720>)
 80108d2:	881b      	ldrh	r3, [r3, #0]
 80108d4:	4619      	mov	r1, r3
 80108d6:	4b51      	ldr	r3, [pc, #324]	; (8010a1c <tcp_receive+0x724>)
 80108d8:	681b      	ldr	r3, [r3, #0]
 80108da:	440b      	add	r3, r1
 80108dc:	1ad3      	subs	r3, r2, r3
 80108de:	3301      	adds	r3, #1
 80108e0:	2b00      	cmp	r3, #0
 80108e2:	f300 80ab 	bgt.w	8010a3c <tcp_receive+0x744>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 80108e6:	4b4e      	ldr	r3, [pc, #312]	; (8010a20 <tcp_receive+0x728>)
 80108e8:	685b      	ldr	r3, [r3, #4]
 80108ea:	61bb      	str	r3, [r7, #24]
      off = pcb->rcv_nxt - seqno;
 80108ec:	687b      	ldr	r3, [r7, #4]
 80108ee:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80108f0:	4b4a      	ldr	r3, [pc, #296]	; (8010a1c <tcp_receive+0x724>)
 80108f2:	681b      	ldr	r3, [r3, #0]
 80108f4:	1ad3      	subs	r3, r2, r3
 80108f6:	627b      	str	r3, [r7, #36]	; 0x24
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 80108f8:	4b49      	ldr	r3, [pc, #292]	; (8010a20 <tcp_receive+0x728>)
 80108fa:	685b      	ldr	r3, [r3, #4]
 80108fc:	2b00      	cmp	r3, #0
 80108fe:	d106      	bne.n	801090e <tcp_receive+0x616>
 8010900:	4b48      	ldr	r3, [pc, #288]	; (8010a24 <tcp_receive+0x72c>)
 8010902:	f240 523c 	movw	r2, #1340	; 0x53c
 8010906:	4948      	ldr	r1, [pc, #288]	; (8010a28 <tcp_receive+0x730>)
 8010908:	4848      	ldr	r0, [pc, #288]	; (8010a2c <tcp_receive+0x734>)
 801090a:	f007 f9ff 	bl	8017d0c <iprintf>
      LWIP_ASSERT("insane offset!", (off < 0x7fff));
 801090e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010910:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 8010914:	4293      	cmp	r3, r2
 8010916:	dd06      	ble.n	8010926 <tcp_receive+0x62e>
 8010918:	4b42      	ldr	r3, [pc, #264]	; (8010a24 <tcp_receive+0x72c>)
 801091a:	f240 523d 	movw	r2, #1341	; 0x53d
 801091e:	4944      	ldr	r1, [pc, #272]	; (8010a30 <tcp_receive+0x738>)
 8010920:	4842      	ldr	r0, [pc, #264]	; (8010a2c <tcp_receive+0x734>)
 8010922:	f007 f9f3 	bl	8017d0c <iprintf>
      if (inseg.p->len < off) {
 8010926:	4b3e      	ldr	r3, [pc, #248]	; (8010a20 <tcp_receive+0x728>)
 8010928:	685b      	ldr	r3, [r3, #4]
 801092a:	895b      	ldrh	r3, [r3, #10]
 801092c:	461a      	mov	r2, r3
 801092e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010930:	4293      	cmp	r3, r2
 8010932:	dd3e      	ble.n	80109b2 <tcp_receive+0x6ba>
        LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 8010934:	4b3a      	ldr	r3, [pc, #232]	; (8010a20 <tcp_receive+0x728>)
 8010936:	685b      	ldr	r3, [r3, #4]
 8010938:	891b      	ldrh	r3, [r3, #8]
 801093a:	461a      	mov	r2, r3
 801093c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801093e:	4293      	cmp	r3, r2
 8010940:	dd06      	ble.n	8010950 <tcp_receive+0x658>
 8010942:	4b38      	ldr	r3, [pc, #224]	; (8010a24 <tcp_receive+0x72c>)
 8010944:	f240 523f 	movw	r2, #1343	; 0x53f
 8010948:	493a      	ldr	r1, [pc, #232]	; (8010a34 <tcp_receive+0x73c>)
 801094a:	4838      	ldr	r0, [pc, #224]	; (8010a2c <tcp_receive+0x734>)
 801094c:	f007 f9de 	bl	8017d0c <iprintf>
        new_tot_len = (u16_t)(inseg.p->tot_len - off);
 8010950:	4b33      	ldr	r3, [pc, #204]	; (8010a20 <tcp_receive+0x728>)
 8010952:	685b      	ldr	r3, [r3, #4]
 8010954:	891a      	ldrh	r2, [r3, #8]
 8010956:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010958:	b29b      	uxth	r3, r3
 801095a:	1ad3      	subs	r3, r2, r3
 801095c:	823b      	strh	r3, [r7, #16]
        while (p->len < off) {
 801095e:	e00e      	b.n	801097e <tcp_receive+0x686>
          off -= p->len;
 8010960:	69bb      	ldr	r3, [r7, #24]
 8010962:	895b      	ldrh	r3, [r3, #10]
 8010964:	461a      	mov	r2, r3
 8010966:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010968:	1a9b      	subs	r3, r3, r2
 801096a:	627b      	str	r3, [r7, #36]	; 0x24
          /* KJM following line changed (with addition of new_tot_len var)
             to fix bug #9076
             inseg.p->tot_len -= p->len; */
          p->tot_len = new_tot_len;
 801096c:	69bb      	ldr	r3, [r7, #24]
 801096e:	8a3a      	ldrh	r2, [r7, #16]
 8010970:	811a      	strh	r2, [r3, #8]
          p->len = 0;
 8010972:	69bb      	ldr	r3, [r7, #24]
 8010974:	2200      	movs	r2, #0
 8010976:	815a      	strh	r2, [r3, #10]
          p = p->next;
 8010978:	69bb      	ldr	r3, [r7, #24]
 801097a:	681b      	ldr	r3, [r3, #0]
 801097c:	61bb      	str	r3, [r7, #24]
        while (p->len < off) {
 801097e:	69bb      	ldr	r3, [r7, #24]
 8010980:	895b      	ldrh	r3, [r3, #10]
 8010982:	461a      	mov	r2, r3
 8010984:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010986:	4293      	cmp	r3, r2
 8010988:	dcea      	bgt.n	8010960 <tcp_receive+0x668>
        }
        if (pbuf_header(p, (s16_t)-off)) {
 801098a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801098c:	b29b      	uxth	r3, r3
 801098e:	425b      	negs	r3, r3
 8010990:	b29b      	uxth	r3, r3
 8010992:	b21b      	sxth	r3, r3
 8010994:	4619      	mov	r1, r3
 8010996:	69b8      	ldr	r0, [r7, #24]
 8010998:	f7fc fec6 	bl	800d728 <pbuf_header>
 801099c:	4603      	mov	r3, r0
 801099e:	2b00      	cmp	r3, #0
 80109a0:	d01c      	beq.n	80109dc <tcp_receive+0x6e4>
          /* Do we need to cope with this failing?  Assert for now */
          LWIP_ASSERT("pbuf_header failed", 0);
 80109a2:	4b20      	ldr	r3, [pc, #128]	; (8010a24 <tcp_receive+0x72c>)
 80109a4:	f240 524c 	movw	r2, #1356	; 0x54c
 80109a8:	4923      	ldr	r1, [pc, #140]	; (8010a38 <tcp_receive+0x740>)
 80109aa:	4820      	ldr	r0, [pc, #128]	; (8010a2c <tcp_receive+0x734>)
 80109ac:	f007 f9ae 	bl	8017d0c <iprintf>
 80109b0:	e014      	b.n	80109dc <tcp_receive+0x6e4>
        }
      } else {
        if (pbuf_header(inseg.p, (s16_t)-off)) {
 80109b2:	4b1b      	ldr	r3, [pc, #108]	; (8010a20 <tcp_receive+0x728>)
 80109b4:	685b      	ldr	r3, [r3, #4]
 80109b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80109b8:	b292      	uxth	r2, r2
 80109ba:	4252      	negs	r2, r2
 80109bc:	b292      	uxth	r2, r2
 80109be:	b212      	sxth	r2, r2
 80109c0:	4611      	mov	r1, r2
 80109c2:	4618      	mov	r0, r3
 80109c4:	f7fc feb0 	bl	800d728 <pbuf_header>
 80109c8:	4603      	mov	r3, r0
 80109ca:	2b00      	cmp	r3, #0
 80109cc:	d006      	beq.n	80109dc <tcp_receive+0x6e4>
          /* Do we need to cope with this failing?  Assert for now */
          LWIP_ASSERT("pbuf_header failed", 0);
 80109ce:	4b15      	ldr	r3, [pc, #84]	; (8010a24 <tcp_receive+0x72c>)
 80109d0:	f240 5251 	movw	r2, #1361	; 0x551
 80109d4:	4918      	ldr	r1, [pc, #96]	; (8010a38 <tcp_receive+0x740>)
 80109d6:	4815      	ldr	r0, [pc, #84]	; (8010a2c <tcp_receive+0x734>)
 80109d8:	f007 f998 	bl	8017d0c <iprintf>
        }
      }
      inseg.len -= (u16_t)(pcb->rcv_nxt - seqno);
 80109dc:	4b10      	ldr	r3, [pc, #64]	; (8010a20 <tcp_receive+0x728>)
 80109de:	891a      	ldrh	r2, [r3, #8]
 80109e0:	4b0e      	ldr	r3, [pc, #56]	; (8010a1c <tcp_receive+0x724>)
 80109e2:	681b      	ldr	r3, [r3, #0]
 80109e4:	b299      	uxth	r1, r3
 80109e6:	687b      	ldr	r3, [r7, #4]
 80109e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80109ea:	b29b      	uxth	r3, r3
 80109ec:	1acb      	subs	r3, r1, r3
 80109ee:	b29b      	uxth	r3, r3
 80109f0:	4413      	add	r3, r2
 80109f2:	b29a      	uxth	r2, r3
 80109f4:	4b0a      	ldr	r3, [pc, #40]	; (8010a20 <tcp_receive+0x728>)
 80109f6:	811a      	strh	r2, [r3, #8]
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 80109f8:	687b      	ldr	r3, [r7, #4]
 80109fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80109fc:	4a07      	ldr	r2, [pc, #28]	; (8010a1c <tcp_receive+0x724>)
 80109fe:	6013      	str	r3, [r2, #0]
 8010a00:	4b07      	ldr	r3, [pc, #28]	; (8010a20 <tcp_receive+0x728>)
 8010a02:	68db      	ldr	r3, [r3, #12]
 8010a04:	4a05      	ldr	r2, [pc, #20]	; (8010a1c <tcp_receive+0x724>)
 8010a06:	6812      	ldr	r2, [r2, #0]
 8010a08:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8010a0a:	e025      	b.n	8010a58 <tcp_receive+0x760>
 8010a0c:	20004b94 	.word	0x20004b94
 8010a10:	20004b98 	.word	0x20004b98
 8010a14:	2000b5b4 	.word	0x2000b5b4
 8010a18:	20004b9a 	.word	0x20004b9a
 8010a1c:	20004b90 	.word	0x20004b90
 8010a20:	20004b70 	.word	0x20004b70
 8010a24:	08019894 	.word	0x08019894
 8010a28:	08019b1c 	.word	0x08019b1c
 8010a2c:	080198d8 	.word	0x080198d8
 8010a30:	08019b2c 	.word	0x08019b2c
 8010a34:	08019b3c 	.word	0x08019b3c
 8010a38:	08019b4c 	.word	0x08019b4c
    }
    else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 8010a3c:	4b87      	ldr	r3, [pc, #540]	; (8010c5c <tcp_receive+0x964>)
 8010a3e:	681a      	ldr	r2, [r3, #0]
 8010a40:	687b      	ldr	r3, [r7, #4]
 8010a42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010a44:	1ad3      	subs	r3, r2, r3
 8010a46:	2b00      	cmp	r3, #0
 8010a48:	da06      	bge.n	8010a58 <tcp_receive+0x760>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 8010a4a:	687b      	ldr	r3, [r7, #4]
 8010a4c:	7e9b      	ldrb	r3, [r3, #26]
 8010a4e:	f043 0302 	orr.w	r3, r3, #2
 8010a52:	b2da      	uxtb	r2, r3
 8010a54:	687b      	ldr	r3, [r7, #4]
 8010a56:	769a      	strb	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8010a58:	4b80      	ldr	r3, [pc, #512]	; (8010c5c <tcp_receive+0x964>)
 8010a5a:	681a      	ldr	r2, [r3, #0]
 8010a5c:	687b      	ldr	r3, [r7, #4]
 8010a5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010a60:	1ad3      	subs	r3, r2, r3
 8010a62:	2b00      	cmp	r3, #0
 8010a64:	f2c0 8410 	blt.w	8011288 <tcp_receive+0xf90>
 8010a68:	4b7c      	ldr	r3, [pc, #496]	; (8010c5c <tcp_receive+0x964>)
 8010a6a:	681a      	ldr	r2, [r3, #0]
 8010a6c:	687b      	ldr	r3, [r7, #4]
 8010a6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010a70:	6879      	ldr	r1, [r7, #4]
 8010a72:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8010a74:	440b      	add	r3, r1
 8010a76:	1ad3      	subs	r3, r2, r3
 8010a78:	3301      	adds	r3, #1
 8010a7a:	2b00      	cmp	r3, #0
 8010a7c:	f300 8404 	bgt.w	8011288 <tcp_receive+0xf90>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 8010a80:	687b      	ldr	r3, [r7, #4]
 8010a82:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8010a84:	4b75      	ldr	r3, [pc, #468]	; (8010c5c <tcp_receive+0x964>)
 8010a86:	681b      	ldr	r3, [r3, #0]
 8010a88:	429a      	cmp	r2, r3
 8010a8a:	f040 8287 	bne.w	8010f9c <tcp_receive+0xca4>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 8010a8e:	4b74      	ldr	r3, [pc, #464]	; (8010c60 <tcp_receive+0x968>)
 8010a90:	891c      	ldrh	r4, [r3, #8]
 8010a92:	4b73      	ldr	r3, [pc, #460]	; (8010c60 <tcp_receive+0x968>)
 8010a94:	68db      	ldr	r3, [r3, #12]
 8010a96:	899b      	ldrh	r3, [r3, #12]
 8010a98:	b29b      	uxth	r3, r3
 8010a9a:	4618      	mov	r0, r3
 8010a9c:	f7fb fcc6 	bl	800c42c <lwip_htons>
 8010aa0:	4603      	mov	r3, r0
 8010aa2:	f003 0303 	and.w	r3, r3, #3
 8010aa6:	2b00      	cmp	r3, #0
 8010aa8:	d001      	beq.n	8010aae <tcp_receive+0x7b6>
 8010aaa:	2301      	movs	r3, #1
 8010aac:	e000      	b.n	8010ab0 <tcp_receive+0x7b8>
 8010aae:	2300      	movs	r3, #0
 8010ab0:	4423      	add	r3, r4
 8010ab2:	b29a      	uxth	r2, r3
 8010ab4:	4b6b      	ldr	r3, [pc, #428]	; (8010c64 <tcp_receive+0x96c>)
 8010ab6:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 8010ab8:	687b      	ldr	r3, [r7, #4]
 8010aba:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8010abc:	4b69      	ldr	r3, [pc, #420]	; (8010c64 <tcp_receive+0x96c>)
 8010abe:	881b      	ldrh	r3, [r3, #0]
 8010ac0:	429a      	cmp	r2, r3
 8010ac2:	d26e      	bcs.n	8010ba2 <tcp_receive+0x8aa>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8010ac4:	4b66      	ldr	r3, [pc, #408]	; (8010c60 <tcp_receive+0x968>)
 8010ac6:	68db      	ldr	r3, [r3, #12]
 8010ac8:	899b      	ldrh	r3, [r3, #12]
 8010aca:	b29b      	uxth	r3, r3
 8010acc:	4618      	mov	r0, r3
 8010ace:	f7fb fcad 	bl	800c42c <lwip_htons>
 8010ad2:	4603      	mov	r3, r0
 8010ad4:	f003 0301 	and.w	r3, r3, #1
 8010ad8:	2b00      	cmp	r3, #0
 8010ada:	d01b      	beq.n	8010b14 <tcp_receive+0x81c>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 8010adc:	4b60      	ldr	r3, [pc, #384]	; (8010c60 <tcp_receive+0x968>)
 8010ade:	68db      	ldr	r3, [r3, #12]
 8010ae0:	899b      	ldrh	r3, [r3, #12]
 8010ae2:	b29b      	uxth	r3, r3
 8010ae4:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8010ae8:	b29c      	uxth	r4, r3
 8010aea:	4b5d      	ldr	r3, [pc, #372]	; (8010c60 <tcp_receive+0x968>)
 8010aec:	68db      	ldr	r3, [r3, #12]
 8010aee:	899b      	ldrh	r3, [r3, #12]
 8010af0:	b29b      	uxth	r3, r3
 8010af2:	4618      	mov	r0, r3
 8010af4:	f7fb fc9a 	bl	800c42c <lwip_htons>
 8010af8:	4603      	mov	r3, r0
 8010afa:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8010afe:	b29b      	uxth	r3, r3
 8010b00:	4618      	mov	r0, r3
 8010b02:	f7fb fc93 	bl	800c42c <lwip_htons>
 8010b06:	4603      	mov	r3, r0
 8010b08:	461a      	mov	r2, r3
 8010b0a:	4b55      	ldr	r3, [pc, #340]	; (8010c60 <tcp_receive+0x968>)
 8010b0c:	68db      	ldr	r3, [r3, #12]
 8010b0e:	4322      	orrs	r2, r4
 8010b10:	b292      	uxth	r2, r2
 8010b12:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 8010b14:	687b      	ldr	r3, [r7, #4]
 8010b16:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8010b18:	4b51      	ldr	r3, [pc, #324]	; (8010c60 <tcp_receive+0x968>)
 8010b1a:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8010b1c:	4b50      	ldr	r3, [pc, #320]	; (8010c60 <tcp_receive+0x968>)
 8010b1e:	68db      	ldr	r3, [r3, #12]
 8010b20:	899b      	ldrh	r3, [r3, #12]
 8010b22:	b29b      	uxth	r3, r3
 8010b24:	4618      	mov	r0, r3
 8010b26:	f7fb fc81 	bl	800c42c <lwip_htons>
 8010b2a:	4603      	mov	r3, r0
 8010b2c:	f003 0302 	and.w	r3, r3, #2
 8010b30:	2b00      	cmp	r3, #0
 8010b32:	d005      	beq.n	8010b40 <tcp_receive+0x848>
            inseg.len -= 1;
 8010b34:	4b4a      	ldr	r3, [pc, #296]	; (8010c60 <tcp_receive+0x968>)
 8010b36:	891b      	ldrh	r3, [r3, #8]
 8010b38:	3b01      	subs	r3, #1
 8010b3a:	b29a      	uxth	r2, r3
 8010b3c:	4b48      	ldr	r3, [pc, #288]	; (8010c60 <tcp_receive+0x968>)
 8010b3e:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 8010b40:	4b47      	ldr	r3, [pc, #284]	; (8010c60 <tcp_receive+0x968>)
 8010b42:	685a      	ldr	r2, [r3, #4]
 8010b44:	4b46      	ldr	r3, [pc, #280]	; (8010c60 <tcp_receive+0x968>)
 8010b46:	891b      	ldrh	r3, [r3, #8]
 8010b48:	4619      	mov	r1, r3
 8010b4a:	4610      	mov	r0, r2
 8010b4c:	f7fc fc9c 	bl	800d488 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 8010b50:	4b43      	ldr	r3, [pc, #268]	; (8010c60 <tcp_receive+0x968>)
 8010b52:	891c      	ldrh	r4, [r3, #8]
 8010b54:	4b42      	ldr	r3, [pc, #264]	; (8010c60 <tcp_receive+0x968>)
 8010b56:	68db      	ldr	r3, [r3, #12]
 8010b58:	899b      	ldrh	r3, [r3, #12]
 8010b5a:	b29b      	uxth	r3, r3
 8010b5c:	4618      	mov	r0, r3
 8010b5e:	f7fb fc65 	bl	800c42c <lwip_htons>
 8010b62:	4603      	mov	r3, r0
 8010b64:	f003 0303 	and.w	r3, r3, #3
 8010b68:	2b00      	cmp	r3, #0
 8010b6a:	d001      	beq.n	8010b70 <tcp_receive+0x878>
 8010b6c:	2301      	movs	r3, #1
 8010b6e:	e000      	b.n	8010b72 <tcp_receive+0x87a>
 8010b70:	2300      	movs	r3, #0
 8010b72:	4423      	add	r3, r4
 8010b74:	b29a      	uxth	r2, r3
 8010b76:	4b3b      	ldr	r3, [pc, #236]	; (8010c64 <tcp_receive+0x96c>)
 8010b78:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8010b7a:	4b3a      	ldr	r3, [pc, #232]	; (8010c64 <tcp_receive+0x96c>)
 8010b7c:	881b      	ldrh	r3, [r3, #0]
 8010b7e:	461a      	mov	r2, r3
 8010b80:	4b36      	ldr	r3, [pc, #216]	; (8010c5c <tcp_receive+0x964>)
 8010b82:	681b      	ldr	r3, [r3, #0]
 8010b84:	441a      	add	r2, r3
 8010b86:	687b      	ldr	r3, [r7, #4]
 8010b88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010b8a:	6879      	ldr	r1, [r7, #4]
 8010b8c:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8010b8e:	440b      	add	r3, r1
 8010b90:	429a      	cmp	r2, r3
 8010b92:	d006      	beq.n	8010ba2 <tcp_receive+0x8aa>
 8010b94:	4b34      	ldr	r3, [pc, #208]	; (8010c68 <tcp_receive+0x970>)
 8010b96:	f240 527f 	movw	r2, #1407	; 0x57f
 8010b9a:	4934      	ldr	r1, [pc, #208]	; (8010c6c <tcp_receive+0x974>)
 8010b9c:	4834      	ldr	r0, [pc, #208]	; (8010c70 <tcp_receive+0x978>)
 8010b9e:	f007 f8b5 	bl	8017d0c <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 8010ba2:	687b      	ldr	r3, [r7, #4]
 8010ba4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010ba6:	2b00      	cmp	r3, #0
 8010ba8:	f000 80e1 	beq.w	8010d6e <tcp_receive+0xa76>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8010bac:	4b2c      	ldr	r3, [pc, #176]	; (8010c60 <tcp_receive+0x968>)
 8010bae:	68db      	ldr	r3, [r3, #12]
 8010bb0:	899b      	ldrh	r3, [r3, #12]
 8010bb2:	b29b      	uxth	r3, r3
 8010bb4:	4618      	mov	r0, r3
 8010bb6:	f7fb fc39 	bl	800c42c <lwip_htons>
 8010bba:	4603      	mov	r3, r0
 8010bbc:	f003 0301 	and.w	r3, r3, #1
 8010bc0:	2b00      	cmp	r3, #0
 8010bc2:	d010      	beq.n	8010be6 <tcp_receive+0x8ee>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 8010bc4:	e00a      	b.n	8010bdc <tcp_receive+0x8e4>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 8010bc6:	687b      	ldr	r3, [r7, #4]
 8010bc8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010bca:	60bb      	str	r3, [r7, #8]
              pcb->ooseq = pcb->ooseq->next;
 8010bcc:	687b      	ldr	r3, [r7, #4]
 8010bce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010bd0:	681a      	ldr	r2, [r3, #0]
 8010bd2:	687b      	ldr	r3, [r7, #4]
 8010bd4:	671a      	str	r2, [r3, #112]	; 0x70
              tcp_seg_free(old_ooseq);
 8010bd6:	68b8      	ldr	r0, [r7, #8]
 8010bd8:	f7fd ff2d 	bl	800ea36 <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 8010bdc:	687b      	ldr	r3, [r7, #4]
 8010bde:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010be0:	2b00      	cmp	r3, #0
 8010be2:	d1f0      	bne.n	8010bc6 <tcp_receive+0x8ce>
 8010be4:	e0c3      	b.n	8010d6e <tcp_receive+0xa76>
            }
          } else {
            next = pcb->ooseq;
 8010be6:	687b      	ldr	r3, [r7, #4]
 8010be8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010bea:	62fb      	str	r3, [r7, #44]	; 0x2c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 8010bec:	e04f      	b.n	8010c8e <tcp_receive+0x996>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8010bee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010bf0:	68db      	ldr	r3, [r3, #12]
 8010bf2:	899b      	ldrh	r3, [r3, #12]
 8010bf4:	b29b      	uxth	r3, r3
 8010bf6:	4618      	mov	r0, r3
 8010bf8:	f7fb fc18 	bl	800c42c <lwip_htons>
 8010bfc:	4603      	mov	r3, r0
 8010bfe:	f003 0301 	and.w	r3, r3, #1
 8010c02:	2b00      	cmp	r3, #0
 8010c04:	d03b      	beq.n	8010c7e <tcp_receive+0x986>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 8010c06:	4b16      	ldr	r3, [pc, #88]	; (8010c60 <tcp_receive+0x968>)
 8010c08:	68db      	ldr	r3, [r3, #12]
 8010c0a:	899b      	ldrh	r3, [r3, #12]
 8010c0c:	b29b      	uxth	r3, r3
 8010c0e:	4618      	mov	r0, r3
 8010c10:	f7fb fc0c 	bl	800c42c <lwip_htons>
 8010c14:	4603      	mov	r3, r0
 8010c16:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8010c1a:	2b00      	cmp	r3, #0
 8010c1c:	d12f      	bne.n	8010c7e <tcp_receive+0x986>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 8010c1e:	4b10      	ldr	r3, [pc, #64]	; (8010c60 <tcp_receive+0x968>)
 8010c20:	68db      	ldr	r3, [r3, #12]
 8010c22:	899b      	ldrh	r3, [r3, #12]
 8010c24:	b29c      	uxth	r4, r3
 8010c26:	2001      	movs	r0, #1
 8010c28:	f7fb fc00 	bl	800c42c <lwip_htons>
 8010c2c:	4603      	mov	r3, r0
 8010c2e:	461a      	mov	r2, r3
 8010c30:	4b0b      	ldr	r3, [pc, #44]	; (8010c60 <tcp_receive+0x968>)
 8010c32:	68db      	ldr	r3, [r3, #12]
 8010c34:	4322      	orrs	r2, r4
 8010c36:	b292      	uxth	r2, r2
 8010c38:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 8010c3a:	4b09      	ldr	r3, [pc, #36]	; (8010c60 <tcp_receive+0x968>)
 8010c3c:	891c      	ldrh	r4, [r3, #8]
 8010c3e:	4b08      	ldr	r3, [pc, #32]	; (8010c60 <tcp_receive+0x968>)
 8010c40:	68db      	ldr	r3, [r3, #12]
 8010c42:	899b      	ldrh	r3, [r3, #12]
 8010c44:	b29b      	uxth	r3, r3
 8010c46:	4618      	mov	r0, r3
 8010c48:	f7fb fbf0 	bl	800c42c <lwip_htons>
 8010c4c:	4603      	mov	r3, r0
 8010c4e:	f003 0303 	and.w	r3, r3, #3
 8010c52:	2b00      	cmp	r3, #0
 8010c54:	d00e      	beq.n	8010c74 <tcp_receive+0x97c>
 8010c56:	2301      	movs	r3, #1
 8010c58:	e00d      	b.n	8010c76 <tcp_receive+0x97e>
 8010c5a:	bf00      	nop
 8010c5c:	20004b90 	.word	0x20004b90
 8010c60:	20004b70 	.word	0x20004b70
 8010c64:	20004b9a 	.word	0x20004b9a
 8010c68:	08019894 	.word	0x08019894
 8010c6c:	08019b60 	.word	0x08019b60
 8010c70:	080198d8 	.word	0x080198d8
 8010c74:	2300      	movs	r3, #0
 8010c76:	4423      	add	r3, r4
 8010c78:	b29a      	uxth	r2, r3
 8010c7a:	4b95      	ldr	r3, [pc, #596]	; (8010ed0 <tcp_receive+0xbd8>)
 8010c7c:	801a      	strh	r2, [r3, #0]
              }
              prev = next;
 8010c7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010c80:	62bb      	str	r3, [r7, #40]	; 0x28
              next = next->next;
 8010c82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010c84:	681b      	ldr	r3, [r3, #0]
 8010c86:	62fb      	str	r3, [r7, #44]	; 0x2c
              tcp_seg_free(prev);
 8010c88:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010c8a:	f7fd fed4 	bl	800ea36 <tcp_seg_free>
            while (next &&
 8010c8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010c90:	2b00      	cmp	r3, #0
 8010c92:	d00e      	beq.n	8010cb2 <tcp_receive+0x9ba>
                   TCP_SEQ_GEQ(seqno + tcplen,
 8010c94:	4b8e      	ldr	r3, [pc, #568]	; (8010ed0 <tcp_receive+0xbd8>)
 8010c96:	881b      	ldrh	r3, [r3, #0]
 8010c98:	461a      	mov	r2, r3
 8010c9a:	4b8e      	ldr	r3, [pc, #568]	; (8010ed4 <tcp_receive+0xbdc>)
 8010c9c:	681b      	ldr	r3, [r3, #0]
 8010c9e:	441a      	add	r2, r3
 8010ca0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010ca2:	68db      	ldr	r3, [r3, #12]
 8010ca4:	685b      	ldr	r3, [r3, #4]
 8010ca6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8010ca8:	8909      	ldrh	r1, [r1, #8]
 8010caa:	440b      	add	r3, r1
 8010cac:	1ad3      	subs	r3, r2, r3
            while (next &&
 8010cae:	2b00      	cmp	r3, #0
 8010cb0:	da9d      	bge.n	8010bee <tcp_receive+0x8f6>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 8010cb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010cb4:	2b00      	cmp	r3, #0
 8010cb6:	d057      	beq.n	8010d68 <tcp_receive+0xa70>
                TCP_SEQ_GT(seqno + tcplen,
 8010cb8:	4b85      	ldr	r3, [pc, #532]	; (8010ed0 <tcp_receive+0xbd8>)
 8010cba:	881b      	ldrh	r3, [r3, #0]
 8010cbc:	461a      	mov	r2, r3
 8010cbe:	4b85      	ldr	r3, [pc, #532]	; (8010ed4 <tcp_receive+0xbdc>)
 8010cc0:	681b      	ldr	r3, [r3, #0]
 8010cc2:	441a      	add	r2, r3
 8010cc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010cc6:	68db      	ldr	r3, [r3, #12]
 8010cc8:	685b      	ldr	r3, [r3, #4]
 8010cca:	1ad3      	subs	r3, r2, r3
            if (next &&
 8010ccc:	2b00      	cmp	r3, #0
 8010cce:	dd4b      	ble.n	8010d68 <tcp_receive+0xa70>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 8010cd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010cd2:	68db      	ldr	r3, [r3, #12]
 8010cd4:	685b      	ldr	r3, [r3, #4]
 8010cd6:	b29a      	uxth	r2, r3
 8010cd8:	4b7e      	ldr	r3, [pc, #504]	; (8010ed4 <tcp_receive+0xbdc>)
 8010cda:	681b      	ldr	r3, [r3, #0]
 8010cdc:	b29b      	uxth	r3, r3
 8010cde:	1ad3      	subs	r3, r2, r3
 8010ce0:	b29a      	uxth	r2, r3
 8010ce2:	4b7d      	ldr	r3, [pc, #500]	; (8010ed8 <tcp_receive+0xbe0>)
 8010ce4:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8010ce6:	4b7c      	ldr	r3, [pc, #496]	; (8010ed8 <tcp_receive+0xbe0>)
 8010ce8:	68db      	ldr	r3, [r3, #12]
 8010cea:	899b      	ldrh	r3, [r3, #12]
 8010cec:	b29b      	uxth	r3, r3
 8010cee:	4618      	mov	r0, r3
 8010cf0:	f7fb fb9c 	bl	800c42c <lwip_htons>
 8010cf4:	4603      	mov	r3, r0
 8010cf6:	f003 0302 	and.w	r3, r3, #2
 8010cfa:	2b00      	cmp	r3, #0
 8010cfc:	d005      	beq.n	8010d0a <tcp_receive+0xa12>
                inseg.len -= 1;
 8010cfe:	4b76      	ldr	r3, [pc, #472]	; (8010ed8 <tcp_receive+0xbe0>)
 8010d00:	891b      	ldrh	r3, [r3, #8]
 8010d02:	3b01      	subs	r3, #1
 8010d04:	b29a      	uxth	r2, r3
 8010d06:	4b74      	ldr	r3, [pc, #464]	; (8010ed8 <tcp_receive+0xbe0>)
 8010d08:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 8010d0a:	4b73      	ldr	r3, [pc, #460]	; (8010ed8 <tcp_receive+0xbe0>)
 8010d0c:	685a      	ldr	r2, [r3, #4]
 8010d0e:	4b72      	ldr	r3, [pc, #456]	; (8010ed8 <tcp_receive+0xbe0>)
 8010d10:	891b      	ldrh	r3, [r3, #8]
 8010d12:	4619      	mov	r1, r3
 8010d14:	4610      	mov	r0, r2
 8010d16:	f7fc fbb7 	bl	800d488 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 8010d1a:	4b6f      	ldr	r3, [pc, #444]	; (8010ed8 <tcp_receive+0xbe0>)
 8010d1c:	891c      	ldrh	r4, [r3, #8]
 8010d1e:	4b6e      	ldr	r3, [pc, #440]	; (8010ed8 <tcp_receive+0xbe0>)
 8010d20:	68db      	ldr	r3, [r3, #12]
 8010d22:	899b      	ldrh	r3, [r3, #12]
 8010d24:	b29b      	uxth	r3, r3
 8010d26:	4618      	mov	r0, r3
 8010d28:	f7fb fb80 	bl	800c42c <lwip_htons>
 8010d2c:	4603      	mov	r3, r0
 8010d2e:	f003 0303 	and.w	r3, r3, #3
 8010d32:	2b00      	cmp	r3, #0
 8010d34:	d001      	beq.n	8010d3a <tcp_receive+0xa42>
 8010d36:	2301      	movs	r3, #1
 8010d38:	e000      	b.n	8010d3c <tcp_receive+0xa44>
 8010d3a:	2300      	movs	r3, #0
 8010d3c:	4423      	add	r3, r4
 8010d3e:	b29a      	uxth	r2, r3
 8010d40:	4b63      	ldr	r3, [pc, #396]	; (8010ed0 <tcp_receive+0xbd8>)
 8010d42:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 8010d44:	4b62      	ldr	r3, [pc, #392]	; (8010ed0 <tcp_receive+0xbd8>)
 8010d46:	881b      	ldrh	r3, [r3, #0]
 8010d48:	461a      	mov	r2, r3
 8010d4a:	4b62      	ldr	r3, [pc, #392]	; (8010ed4 <tcp_receive+0xbdc>)
 8010d4c:	681b      	ldr	r3, [r3, #0]
 8010d4e:	441a      	add	r2, r3
 8010d50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010d52:	68db      	ldr	r3, [r3, #12]
 8010d54:	685b      	ldr	r3, [r3, #4]
 8010d56:	429a      	cmp	r2, r3
 8010d58:	d006      	beq.n	8010d68 <tcp_receive+0xa70>
 8010d5a:	4b60      	ldr	r3, [pc, #384]	; (8010edc <tcp_receive+0xbe4>)
 8010d5c:	f240 52af 	movw	r2, #1455	; 0x5af
 8010d60:	495f      	ldr	r1, [pc, #380]	; (8010ee0 <tcp_receive+0xbe8>)
 8010d62:	4860      	ldr	r0, [pc, #384]	; (8010ee4 <tcp_receive+0xbec>)
 8010d64:	f006 ffd2 	bl	8017d0c <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 8010d68:	687b      	ldr	r3, [r7, #4]
 8010d6a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010d6c:	671a      	str	r2, [r3, #112]	; 0x70
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 8010d6e:	4b58      	ldr	r3, [pc, #352]	; (8010ed0 <tcp_receive+0xbd8>)
 8010d70:	881b      	ldrh	r3, [r3, #0]
 8010d72:	461a      	mov	r2, r3
 8010d74:	4b57      	ldr	r3, [pc, #348]	; (8010ed4 <tcp_receive+0xbdc>)
 8010d76:	681b      	ldr	r3, [r3, #0]
 8010d78:	441a      	add	r2, r3
 8010d7a:	687b      	ldr	r3, [r7, #4]
 8010d7c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 8010d7e:	687b      	ldr	r3, [r7, #4]
 8010d80:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8010d82:	4b53      	ldr	r3, [pc, #332]	; (8010ed0 <tcp_receive+0xbd8>)
 8010d84:	881b      	ldrh	r3, [r3, #0]
 8010d86:	429a      	cmp	r2, r3
 8010d88:	d206      	bcs.n	8010d98 <tcp_receive+0xaa0>
 8010d8a:	4b54      	ldr	r3, [pc, #336]	; (8010edc <tcp_receive+0xbe4>)
 8010d8c:	f240 52b9 	movw	r2, #1465	; 0x5b9
 8010d90:	4955      	ldr	r1, [pc, #340]	; (8010ee8 <tcp_receive+0xbf0>)
 8010d92:	4854      	ldr	r0, [pc, #336]	; (8010ee4 <tcp_receive+0xbec>)
 8010d94:	f006 ffba 	bl	8017d0c <iprintf>
        pcb->rcv_wnd -= tcplen;
 8010d98:	687b      	ldr	r3, [r7, #4]
 8010d9a:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8010d9c:	4b4c      	ldr	r3, [pc, #304]	; (8010ed0 <tcp_receive+0xbd8>)
 8010d9e:	881b      	ldrh	r3, [r3, #0]
 8010da0:	1ad3      	subs	r3, r2, r3
 8010da2:	b29a      	uxth	r2, r3
 8010da4:	687b      	ldr	r3, [r7, #4]
 8010da6:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 8010da8:	6878      	ldr	r0, [r7, #4]
 8010daa:	f7fd f9fb 	bl	800e1a4 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 8010dae:	4b4a      	ldr	r3, [pc, #296]	; (8010ed8 <tcp_receive+0xbe0>)
 8010db0:	685b      	ldr	r3, [r3, #4]
 8010db2:	891b      	ldrh	r3, [r3, #8]
 8010db4:	2b00      	cmp	r3, #0
 8010db6:	d006      	beq.n	8010dc6 <tcp_receive+0xace>
          recv_data = inseg.p;
 8010db8:	4b47      	ldr	r3, [pc, #284]	; (8010ed8 <tcp_receive+0xbe0>)
 8010dba:	685b      	ldr	r3, [r3, #4]
 8010dbc:	4a4b      	ldr	r2, [pc, #300]	; (8010eec <tcp_receive+0xbf4>)
 8010dbe:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 8010dc0:	4b45      	ldr	r3, [pc, #276]	; (8010ed8 <tcp_receive+0xbe0>)
 8010dc2:	2200      	movs	r2, #0
 8010dc4:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8010dc6:	4b44      	ldr	r3, [pc, #272]	; (8010ed8 <tcp_receive+0xbe0>)
 8010dc8:	68db      	ldr	r3, [r3, #12]
 8010dca:	899b      	ldrh	r3, [r3, #12]
 8010dcc:	b29b      	uxth	r3, r3
 8010dce:	4618      	mov	r0, r3
 8010dd0:	f7fb fb2c 	bl	800c42c <lwip_htons>
 8010dd4:	4603      	mov	r3, r0
 8010dd6:	f003 0301 	and.w	r3, r3, #1
 8010dda:	2b00      	cmp	r3, #0
 8010ddc:	f000 80b4 	beq.w	8010f48 <tcp_receive+0xc50>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 8010de0:	4b43      	ldr	r3, [pc, #268]	; (8010ef0 <tcp_receive+0xbf8>)
 8010de2:	781b      	ldrb	r3, [r3, #0]
 8010de4:	f043 0320 	orr.w	r3, r3, #32
 8010de8:	b2da      	uxtb	r2, r3
 8010dea:	4b41      	ldr	r3, [pc, #260]	; (8010ef0 <tcp_receive+0xbf8>)
 8010dec:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 8010dee:	e0ab      	b.n	8010f48 <tcp_receive+0xc50>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          cseg = pcb->ooseq;
 8010df0:	687b      	ldr	r3, [r7, #4]
 8010df2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010df4:	60fb      	str	r3, [r7, #12]
          seqno = pcb->ooseq->tcphdr->seqno;
 8010df6:	687b      	ldr	r3, [r7, #4]
 8010df8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010dfa:	68db      	ldr	r3, [r3, #12]
 8010dfc:	685b      	ldr	r3, [r3, #4]
 8010dfe:	4a35      	ldr	r2, [pc, #212]	; (8010ed4 <tcp_receive+0xbdc>)
 8010e00:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 8010e02:	68fb      	ldr	r3, [r7, #12]
 8010e04:	891b      	ldrh	r3, [r3, #8]
 8010e06:	461c      	mov	r4, r3
 8010e08:	68fb      	ldr	r3, [r7, #12]
 8010e0a:	68db      	ldr	r3, [r3, #12]
 8010e0c:	899b      	ldrh	r3, [r3, #12]
 8010e0e:	b29b      	uxth	r3, r3
 8010e10:	4618      	mov	r0, r3
 8010e12:	f7fb fb0b 	bl	800c42c <lwip_htons>
 8010e16:	4603      	mov	r3, r0
 8010e18:	f003 0303 	and.w	r3, r3, #3
 8010e1c:	2b00      	cmp	r3, #0
 8010e1e:	d001      	beq.n	8010e24 <tcp_receive+0xb2c>
 8010e20:	2301      	movs	r3, #1
 8010e22:	e000      	b.n	8010e26 <tcp_receive+0xb2e>
 8010e24:	2300      	movs	r3, #0
 8010e26:	191a      	adds	r2, r3, r4
 8010e28:	687b      	ldr	r3, [r7, #4]
 8010e2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010e2c:	441a      	add	r2, r3
 8010e2e:	687b      	ldr	r3, [r7, #4]
 8010e30:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 8010e32:	687b      	ldr	r3, [r7, #4]
 8010e34:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8010e36:	461c      	mov	r4, r3
 8010e38:	68fb      	ldr	r3, [r7, #12]
 8010e3a:	891b      	ldrh	r3, [r3, #8]
 8010e3c:	461d      	mov	r5, r3
 8010e3e:	68fb      	ldr	r3, [r7, #12]
 8010e40:	68db      	ldr	r3, [r3, #12]
 8010e42:	899b      	ldrh	r3, [r3, #12]
 8010e44:	b29b      	uxth	r3, r3
 8010e46:	4618      	mov	r0, r3
 8010e48:	f7fb faf0 	bl	800c42c <lwip_htons>
 8010e4c:	4603      	mov	r3, r0
 8010e4e:	f003 0303 	and.w	r3, r3, #3
 8010e52:	2b00      	cmp	r3, #0
 8010e54:	d001      	beq.n	8010e5a <tcp_receive+0xb62>
 8010e56:	2301      	movs	r3, #1
 8010e58:	e000      	b.n	8010e5c <tcp_receive+0xb64>
 8010e5a:	2300      	movs	r3, #0
 8010e5c:	442b      	add	r3, r5
 8010e5e:	429c      	cmp	r4, r3
 8010e60:	d206      	bcs.n	8010e70 <tcp_receive+0xb78>
 8010e62:	4b1e      	ldr	r3, [pc, #120]	; (8010edc <tcp_receive+0xbe4>)
 8010e64:	f240 52de 	movw	r2, #1502	; 0x5de
 8010e68:	4922      	ldr	r1, [pc, #136]	; (8010ef4 <tcp_receive+0xbfc>)
 8010e6a:	481e      	ldr	r0, [pc, #120]	; (8010ee4 <tcp_receive+0xbec>)
 8010e6c:	f006 ff4e 	bl	8017d0c <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 8010e70:	68fb      	ldr	r3, [r7, #12]
 8010e72:	891b      	ldrh	r3, [r3, #8]
 8010e74:	461c      	mov	r4, r3
 8010e76:	68fb      	ldr	r3, [r7, #12]
 8010e78:	68db      	ldr	r3, [r3, #12]
 8010e7a:	899b      	ldrh	r3, [r3, #12]
 8010e7c:	b29b      	uxth	r3, r3
 8010e7e:	4618      	mov	r0, r3
 8010e80:	f7fb fad4 	bl	800c42c <lwip_htons>
 8010e84:	4603      	mov	r3, r0
 8010e86:	f003 0303 	and.w	r3, r3, #3
 8010e8a:	2b00      	cmp	r3, #0
 8010e8c:	d001      	beq.n	8010e92 <tcp_receive+0xb9a>
 8010e8e:	2301      	movs	r3, #1
 8010e90:	e000      	b.n	8010e94 <tcp_receive+0xb9c>
 8010e92:	2300      	movs	r3, #0
 8010e94:	1919      	adds	r1, r3, r4
 8010e96:	687b      	ldr	r3, [r7, #4]
 8010e98:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8010e9a:	b28b      	uxth	r3, r1
 8010e9c:	1ad3      	subs	r3, r2, r3
 8010e9e:	b29a      	uxth	r2, r3
 8010ea0:	687b      	ldr	r3, [r7, #4]
 8010ea2:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 8010ea4:	6878      	ldr	r0, [r7, #4]
 8010ea6:	f7fd f97d 	bl	800e1a4 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 8010eaa:	68fb      	ldr	r3, [r7, #12]
 8010eac:	685b      	ldr	r3, [r3, #4]
 8010eae:	891b      	ldrh	r3, [r3, #8]
 8010eb0:	2b00      	cmp	r3, #0
 8010eb2:	d028      	beq.n	8010f06 <tcp_receive+0xc0e>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 8010eb4:	4b0d      	ldr	r3, [pc, #52]	; (8010eec <tcp_receive+0xbf4>)
 8010eb6:	681b      	ldr	r3, [r3, #0]
 8010eb8:	2b00      	cmp	r3, #0
 8010eba:	d01d      	beq.n	8010ef8 <tcp_receive+0xc00>
              pbuf_cat(recv_data, cseg->p);
 8010ebc:	4b0b      	ldr	r3, [pc, #44]	; (8010eec <tcp_receive+0xbf4>)
 8010ebe:	681a      	ldr	r2, [r3, #0]
 8010ec0:	68fb      	ldr	r3, [r7, #12]
 8010ec2:	685b      	ldr	r3, [r3, #4]
 8010ec4:	4619      	mov	r1, r3
 8010ec6:	4610      	mov	r0, r2
 8010ec8:	f7fc fd2c 	bl	800d924 <pbuf_cat>
 8010ecc:	e018      	b.n	8010f00 <tcp_receive+0xc08>
 8010ece:	bf00      	nop
 8010ed0:	20004b9a 	.word	0x20004b9a
 8010ed4:	20004b90 	.word	0x20004b90
 8010ed8:	20004b70 	.word	0x20004b70
 8010edc:	08019894 	.word	0x08019894
 8010ee0:	08019b98 	.word	0x08019b98
 8010ee4:	080198d8 	.word	0x080198d8
 8010ee8:	08019bd4 	.word	0x08019bd4
 8010eec:	20004ba0 	.word	0x20004ba0
 8010ef0:	20004b9d 	.word	0x20004b9d
 8010ef4:	08019bf4 	.word	0x08019bf4
            } else {
              recv_data = cseg->p;
 8010ef8:	68fb      	ldr	r3, [r7, #12]
 8010efa:	685b      	ldr	r3, [r3, #4]
 8010efc:	4a71      	ldr	r2, [pc, #452]	; (80110c4 <tcp_receive+0xdcc>)
 8010efe:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 8010f00:	68fb      	ldr	r3, [r7, #12]
 8010f02:	2200      	movs	r2, #0
 8010f04:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8010f06:	68fb      	ldr	r3, [r7, #12]
 8010f08:	68db      	ldr	r3, [r3, #12]
 8010f0a:	899b      	ldrh	r3, [r3, #12]
 8010f0c:	b29b      	uxth	r3, r3
 8010f0e:	4618      	mov	r0, r3
 8010f10:	f7fb fa8c 	bl	800c42c <lwip_htons>
 8010f14:	4603      	mov	r3, r0
 8010f16:	f003 0301 	and.w	r3, r3, #1
 8010f1a:	2b00      	cmp	r3, #0
 8010f1c:	d00d      	beq.n	8010f3a <tcp_receive+0xc42>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 8010f1e:	4b6a      	ldr	r3, [pc, #424]	; (80110c8 <tcp_receive+0xdd0>)
 8010f20:	781b      	ldrb	r3, [r3, #0]
 8010f22:	f043 0320 	orr.w	r3, r3, #32
 8010f26:	b2da      	uxtb	r2, r3
 8010f28:	4b67      	ldr	r3, [pc, #412]	; (80110c8 <tcp_receive+0xdd0>)
 8010f2a:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 8010f2c:	687b      	ldr	r3, [r7, #4]
 8010f2e:	7d1b      	ldrb	r3, [r3, #20]
 8010f30:	2b04      	cmp	r3, #4
 8010f32:	d102      	bne.n	8010f3a <tcp_receive+0xc42>
              pcb->state = CLOSE_WAIT;
 8010f34:	687b      	ldr	r3, [r7, #4]
 8010f36:	2207      	movs	r2, #7
 8010f38:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 8010f3a:	68fb      	ldr	r3, [r7, #12]
 8010f3c:	681a      	ldr	r2, [r3, #0]
 8010f3e:	687b      	ldr	r3, [r7, #4]
 8010f40:	671a      	str	r2, [r3, #112]	; 0x70
          tcp_seg_free(cseg);
 8010f42:	68f8      	ldr	r0, [r7, #12]
 8010f44:	f7fd fd77 	bl	800ea36 <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 8010f48:	687b      	ldr	r3, [r7, #4]
 8010f4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010f4c:	2b00      	cmp	r3, #0
 8010f4e:	d008      	beq.n	8010f62 <tcp_receive+0xc6a>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 8010f50:	687b      	ldr	r3, [r7, #4]
 8010f52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010f54:	68db      	ldr	r3, [r3, #12]
 8010f56:	685a      	ldr	r2, [r3, #4]
 8010f58:	687b      	ldr	r3, [r7, #4]
 8010f5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 8010f5c:	429a      	cmp	r2, r3
 8010f5e:	f43f af47 	beq.w	8010df0 <tcp_receive+0xaf8>
        }
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 8010f62:	687b      	ldr	r3, [r7, #4]
 8010f64:	7e9b      	ldrb	r3, [r3, #26]
 8010f66:	f003 0301 	and.w	r3, r3, #1
 8010f6a:	2b00      	cmp	r3, #0
 8010f6c:	d00e      	beq.n	8010f8c <tcp_receive+0xc94>
 8010f6e:	687b      	ldr	r3, [r7, #4]
 8010f70:	7e9b      	ldrb	r3, [r3, #26]
 8010f72:	f023 0301 	bic.w	r3, r3, #1
 8010f76:	b2da      	uxtb	r2, r3
 8010f78:	687b      	ldr	r3, [r7, #4]
 8010f7a:	769a      	strb	r2, [r3, #26]
 8010f7c:	687b      	ldr	r3, [r7, #4]
 8010f7e:	7e9b      	ldrb	r3, [r3, #26]
 8010f80:	f043 0302 	orr.w	r3, r3, #2
 8010f84:	b2da      	uxtb	r2, r3
 8010f86:	687b      	ldr	r3, [r7, #4]
 8010f88:	769a      	strb	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8010f8a:	e181      	b.n	8011290 <tcp_receive+0xf98>
        tcp_ack(pcb);
 8010f8c:	687b      	ldr	r3, [r7, #4]
 8010f8e:	7e9b      	ldrb	r3, [r3, #26]
 8010f90:	f043 0301 	orr.w	r3, r3, #1
 8010f94:	b2da      	uxtb	r2, r3
 8010f96:	687b      	ldr	r3, [r7, #4]
 8010f98:	769a      	strb	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8010f9a:	e179      	b.n	8011290 <tcp_receive+0xf98>
        }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      } else {
        /* We get here if the incoming segment is out-of-sequence. */
        tcp_send_empty_ack(pcb);
 8010f9c:	6878      	ldr	r0, [r7, #4]
 8010f9e:	f000 fc93 	bl	80118c8 <tcp_send_empty_ack>
#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 8010fa2:	687b      	ldr	r3, [r7, #4]
 8010fa4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010fa6:	2b00      	cmp	r3, #0
 8010fa8:	d106      	bne.n	8010fb8 <tcp_receive+0xcc0>
          pcb->ooseq = tcp_seg_copy(&inseg);
 8010faa:	4848      	ldr	r0, [pc, #288]	; (80110cc <tcp_receive+0xdd4>)
 8010fac:	f7fd fd5b 	bl	800ea66 <tcp_seg_copy>
 8010fb0:	4602      	mov	r2, r0
 8010fb2:	687b      	ldr	r3, [r7, #4]
 8010fb4:	671a      	str	r2, [r3, #112]	; 0x70
      if (pcb->rcv_nxt == seqno) {
 8010fb6:	e16b      	b.n	8011290 <tcp_receive+0xf98>

             If the incoming segment has the same sequence number as a
             segment on the ->ooseq queue, we discard the segment that
             contains less data. */

          prev = NULL;
 8010fb8:	2300      	movs	r3, #0
 8010fba:	62bb      	str	r3, [r7, #40]	; 0x28
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8010fbc:	687b      	ldr	r3, [r7, #4]
 8010fbe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010fc0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8010fc2:	e150      	b.n	8011266 <tcp_receive+0xf6e>
            if (seqno == next->tcphdr->seqno) {
 8010fc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010fc6:	68db      	ldr	r3, [r3, #12]
 8010fc8:	685a      	ldr	r2, [r3, #4]
 8010fca:	4b41      	ldr	r3, [pc, #260]	; (80110d0 <tcp_receive+0xdd8>)
 8010fcc:	681b      	ldr	r3, [r3, #0]
 8010fce:	429a      	cmp	r2, r3
 8010fd0:	d11d      	bne.n	801100e <tcp_receive+0xd16>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 8010fd2:	4b3e      	ldr	r3, [pc, #248]	; (80110cc <tcp_receive+0xdd4>)
 8010fd4:	891a      	ldrh	r2, [r3, #8]
 8010fd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010fd8:	891b      	ldrh	r3, [r3, #8]
 8010fda:	429a      	cmp	r2, r3
 8010fdc:	f240 8148 	bls.w	8011270 <tcp_receive+0xf78>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                cseg = tcp_seg_copy(&inseg);
 8010fe0:	483a      	ldr	r0, [pc, #232]	; (80110cc <tcp_receive+0xdd4>)
 8010fe2:	f7fd fd40 	bl	800ea66 <tcp_seg_copy>
 8010fe6:	60f8      	str	r0, [r7, #12]
                if (cseg != NULL) {
 8010fe8:	68fb      	ldr	r3, [r7, #12]
 8010fea:	2b00      	cmp	r3, #0
 8010fec:	f000 8142 	beq.w	8011274 <tcp_receive+0xf7c>
                  if (prev != NULL) {
 8010ff0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010ff2:	2b00      	cmp	r3, #0
 8010ff4:	d003      	beq.n	8010ffe <tcp_receive+0xd06>
                    prev->next = cseg;
 8010ff6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010ff8:	68fa      	ldr	r2, [r7, #12]
 8010ffa:	601a      	str	r2, [r3, #0]
 8010ffc:	e002      	b.n	8011004 <tcp_receive+0xd0c>
                  } else {
                    pcb->ooseq = cseg;
 8010ffe:	687b      	ldr	r3, [r7, #4]
 8011000:	68fa      	ldr	r2, [r7, #12]
 8011002:	671a      	str	r2, [r3, #112]	; 0x70
                  }
                  tcp_oos_insert_segment(cseg, next);
 8011004:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8011006:	68f8      	ldr	r0, [r7, #12]
 8011008:	f7ff f900 	bl	801020c <tcp_oos_insert_segment>
                }
                break;
 801100c:	e132      	b.n	8011274 <tcp_receive+0xf7c>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 801100e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011010:	2b00      	cmp	r3, #0
 8011012:	d117      	bne.n	8011044 <tcp_receive+0xd4c>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 8011014:	4b2e      	ldr	r3, [pc, #184]	; (80110d0 <tcp_receive+0xdd8>)
 8011016:	681a      	ldr	r2, [r3, #0]
 8011018:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801101a:	68db      	ldr	r3, [r3, #12]
 801101c:	685b      	ldr	r3, [r3, #4]
 801101e:	1ad3      	subs	r3, r2, r3
 8011020:	2b00      	cmp	r3, #0
 8011022:	da57      	bge.n	80110d4 <tcp_receive+0xddc>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  cseg = tcp_seg_copy(&inseg);
 8011024:	4829      	ldr	r0, [pc, #164]	; (80110cc <tcp_receive+0xdd4>)
 8011026:	f7fd fd1e 	bl	800ea66 <tcp_seg_copy>
 801102a:	60f8      	str	r0, [r7, #12]
                  if (cseg != NULL) {
 801102c:	68fb      	ldr	r3, [r7, #12]
 801102e:	2b00      	cmp	r3, #0
 8011030:	f000 8122 	beq.w	8011278 <tcp_receive+0xf80>
                    pcb->ooseq = cseg;
 8011034:	687b      	ldr	r3, [r7, #4]
 8011036:	68fa      	ldr	r2, [r7, #12]
 8011038:	671a      	str	r2, [r3, #112]	; 0x70
                    tcp_oos_insert_segment(cseg, next);
 801103a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801103c:	68f8      	ldr	r0, [r7, #12]
 801103e:	f7ff f8e5 	bl	801020c <tcp_oos_insert_segment>
                  }
                  break;
 8011042:	e119      	b.n	8011278 <tcp_receive+0xf80>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno+1, next->tcphdr->seqno-1)) {
 8011044:	4b22      	ldr	r3, [pc, #136]	; (80110d0 <tcp_receive+0xdd8>)
 8011046:	681a      	ldr	r2, [r3, #0]
 8011048:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801104a:	68db      	ldr	r3, [r3, #12]
 801104c:	685b      	ldr	r3, [r3, #4]
 801104e:	1ad3      	subs	r3, r2, r3
 8011050:	3b01      	subs	r3, #1
 8011052:	2b00      	cmp	r3, #0
 8011054:	db3e      	blt.n	80110d4 <tcp_receive+0xddc>
 8011056:	4b1e      	ldr	r3, [pc, #120]	; (80110d0 <tcp_receive+0xdd8>)
 8011058:	681a      	ldr	r2, [r3, #0]
 801105a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801105c:	68db      	ldr	r3, [r3, #12]
 801105e:	685b      	ldr	r3, [r3, #4]
 8011060:	1ad3      	subs	r3, r2, r3
 8011062:	3301      	adds	r3, #1
 8011064:	2b00      	cmp	r3, #0
 8011066:	dc35      	bgt.n	80110d4 <tcp_receive+0xddc>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  cseg = tcp_seg_copy(&inseg);
 8011068:	4818      	ldr	r0, [pc, #96]	; (80110cc <tcp_receive+0xdd4>)
 801106a:	f7fd fcfc 	bl	800ea66 <tcp_seg_copy>
 801106e:	60f8      	str	r0, [r7, #12]
                  if (cseg != NULL) {
 8011070:	68fb      	ldr	r3, [r7, #12]
 8011072:	2b00      	cmp	r3, #0
 8011074:	f000 8102 	beq.w	801127c <tcp_receive+0xf84>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 8011078:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801107a:	68db      	ldr	r3, [r3, #12]
 801107c:	685b      	ldr	r3, [r3, #4]
 801107e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8011080:	8912      	ldrh	r2, [r2, #8]
 8011082:	441a      	add	r2, r3
 8011084:	4b12      	ldr	r3, [pc, #72]	; (80110d0 <tcp_receive+0xdd8>)
 8011086:	681b      	ldr	r3, [r3, #0]
 8011088:	1ad3      	subs	r3, r2, r3
 801108a:	2b00      	cmp	r3, #0
 801108c:	dd12      	ble.n	80110b4 <tcp_receive+0xdbc>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 801108e:	4b10      	ldr	r3, [pc, #64]	; (80110d0 <tcp_receive+0xdd8>)
 8011090:	681b      	ldr	r3, [r3, #0]
 8011092:	b29a      	uxth	r2, r3
 8011094:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011096:	68db      	ldr	r3, [r3, #12]
 8011098:	685b      	ldr	r3, [r3, #4]
 801109a:	b29b      	uxth	r3, r3
 801109c:	1ad3      	subs	r3, r2, r3
 801109e:	b29a      	uxth	r2, r3
 80110a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80110a2:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 80110a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80110a6:	685a      	ldr	r2, [r3, #4]
 80110a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80110aa:	891b      	ldrh	r3, [r3, #8]
 80110ac:	4619      	mov	r1, r3
 80110ae:	4610      	mov	r0, r2
 80110b0:	f7fc f9ea 	bl	800d488 <pbuf_realloc>
                    }
                    prev->next = cseg;
 80110b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80110b6:	68fa      	ldr	r2, [r7, #12]
 80110b8:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 80110ba:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80110bc:	68f8      	ldr	r0, [r7, #12]
 80110be:	f7ff f8a5 	bl	801020c <tcp_oos_insert_segment>
                  }
                  break;
 80110c2:	e0db      	b.n	801127c <tcp_receive+0xf84>
 80110c4:	20004ba0 	.word	0x20004ba0
 80110c8:	20004b9d 	.word	0x20004b9d
 80110cc:	20004b70 	.word	0x20004b70
 80110d0:	20004b90 	.word	0x20004b90
                }
              }
              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 80110d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80110d6:	681b      	ldr	r3, [r3, #0]
 80110d8:	2b00      	cmp	r3, #0
 80110da:	f040 80bf 	bne.w	801125c <tcp_receive+0xf64>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 80110de:	4b7c      	ldr	r3, [pc, #496]	; (80112d0 <tcp_receive+0xfd8>)
 80110e0:	681a      	ldr	r2, [r3, #0]
 80110e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80110e4:	68db      	ldr	r3, [r3, #12]
 80110e6:	685b      	ldr	r3, [r3, #4]
 80110e8:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 80110ea:	2b00      	cmp	r3, #0
 80110ec:	f340 80b6 	ble.w	801125c <tcp_receive+0xf64>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 80110f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80110f2:	68db      	ldr	r3, [r3, #12]
 80110f4:	899b      	ldrh	r3, [r3, #12]
 80110f6:	b29b      	uxth	r3, r3
 80110f8:	4618      	mov	r0, r3
 80110fa:	f7fb f997 	bl	800c42c <lwip_htons>
 80110fe:	4603      	mov	r3, r0
 8011100:	f003 0301 	and.w	r3, r3, #1
 8011104:	2b00      	cmp	r3, #0
 8011106:	f040 80bb 	bne.w	8011280 <tcp_receive+0xf88>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 801110a:	4872      	ldr	r0, [pc, #456]	; (80112d4 <tcp_receive+0xfdc>)
 801110c:	f7fd fcab 	bl	800ea66 <tcp_seg_copy>
 8011110:	4602      	mov	r2, r0
 8011112:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011114:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 8011116:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011118:	681b      	ldr	r3, [r3, #0]
 801111a:	2b00      	cmp	r3, #0
 801111c:	f000 80b2 	beq.w	8011284 <tcp_receive+0xf8c>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 8011120:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011122:	68db      	ldr	r3, [r3, #12]
 8011124:	685b      	ldr	r3, [r3, #4]
 8011126:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011128:	8912      	ldrh	r2, [r2, #8]
 801112a:	441a      	add	r2, r3
 801112c:	4b68      	ldr	r3, [pc, #416]	; (80112d0 <tcp_receive+0xfd8>)
 801112e:	681b      	ldr	r3, [r3, #0]
 8011130:	1ad3      	subs	r3, r2, r3
 8011132:	2b00      	cmp	r3, #0
 8011134:	dd12      	ble.n	801115c <tcp_receive+0xe64>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 8011136:	4b66      	ldr	r3, [pc, #408]	; (80112d0 <tcp_receive+0xfd8>)
 8011138:	681b      	ldr	r3, [r3, #0]
 801113a:	b29a      	uxth	r2, r3
 801113c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801113e:	68db      	ldr	r3, [r3, #12]
 8011140:	685b      	ldr	r3, [r3, #4]
 8011142:	b29b      	uxth	r3, r3
 8011144:	1ad3      	subs	r3, r2, r3
 8011146:	b29a      	uxth	r2, r3
 8011148:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801114a:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 801114c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801114e:	685a      	ldr	r2, [r3, #4]
 8011150:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011152:	891b      	ldrh	r3, [r3, #8]
 8011154:	4619      	mov	r1, r3
 8011156:	4610      	mov	r0, r2
 8011158:	f7fc f996 	bl	800d488 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 801115c:	4b5e      	ldr	r3, [pc, #376]	; (80112d8 <tcp_receive+0xfe0>)
 801115e:	881b      	ldrh	r3, [r3, #0]
 8011160:	461a      	mov	r2, r3
 8011162:	4b5b      	ldr	r3, [pc, #364]	; (80112d0 <tcp_receive+0xfd8>)
 8011164:	681b      	ldr	r3, [r3, #0]
 8011166:	441a      	add	r2, r3
 8011168:	687b      	ldr	r3, [r7, #4]
 801116a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801116c:	6879      	ldr	r1, [r7, #4]
 801116e:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8011170:	440b      	add	r3, r1
 8011172:	1ad3      	subs	r3, r2, r3
 8011174:	2b00      	cmp	r3, #0
 8011176:	f340 8085 	ble.w	8011284 <tcp_receive+0xf8c>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 801117a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801117c:	681b      	ldr	r3, [r3, #0]
 801117e:	68db      	ldr	r3, [r3, #12]
 8011180:	899b      	ldrh	r3, [r3, #12]
 8011182:	b29b      	uxth	r3, r3
 8011184:	4618      	mov	r0, r3
 8011186:	f7fb f951 	bl	800c42c <lwip_htons>
 801118a:	4603      	mov	r3, r0
 801118c:	f003 0301 	and.w	r3, r3, #1
 8011190:	2b00      	cmp	r3, #0
 8011192:	d01e      	beq.n	80111d2 <tcp_receive+0xeda>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 8011194:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011196:	681b      	ldr	r3, [r3, #0]
 8011198:	68db      	ldr	r3, [r3, #12]
 801119a:	899b      	ldrh	r3, [r3, #12]
 801119c:	b29b      	uxth	r3, r3
 801119e:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80111a2:	b29c      	uxth	r4, r3
 80111a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80111a6:	681b      	ldr	r3, [r3, #0]
 80111a8:	68db      	ldr	r3, [r3, #12]
 80111aa:	899b      	ldrh	r3, [r3, #12]
 80111ac:	b29b      	uxth	r3, r3
 80111ae:	4618      	mov	r0, r3
 80111b0:	f7fb f93c 	bl	800c42c <lwip_htons>
 80111b4:	4603      	mov	r3, r0
 80111b6:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 80111ba:	b29b      	uxth	r3, r3
 80111bc:	4618      	mov	r0, r3
 80111be:	f7fb f935 	bl	800c42c <lwip_htons>
 80111c2:	4603      	mov	r3, r0
 80111c4:	461a      	mov	r2, r3
 80111c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80111c8:	681b      	ldr	r3, [r3, #0]
 80111ca:	68db      	ldr	r3, [r3, #12]
 80111cc:	4322      	orrs	r2, r4
 80111ce:	b292      	uxth	r2, r2
 80111d0:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 80111d2:	687b      	ldr	r3, [r7, #4]
 80111d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80111d6:	b29a      	uxth	r2, r3
 80111d8:	687b      	ldr	r3, [r7, #4]
 80111da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80111dc:	4413      	add	r3, r2
 80111de:	b299      	uxth	r1, r3
 80111e0:	4b3b      	ldr	r3, [pc, #236]	; (80112d0 <tcp_receive+0xfd8>)
 80111e2:	681b      	ldr	r3, [r3, #0]
 80111e4:	b29a      	uxth	r2, r3
 80111e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80111e8:	681b      	ldr	r3, [r3, #0]
 80111ea:	1a8a      	subs	r2, r1, r2
 80111ec:	b292      	uxth	r2, r2
 80111ee:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 80111f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80111f2:	681b      	ldr	r3, [r3, #0]
 80111f4:	685a      	ldr	r2, [r3, #4]
 80111f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80111f8:	681b      	ldr	r3, [r3, #0]
 80111fa:	891b      	ldrh	r3, [r3, #8]
 80111fc:	4619      	mov	r1, r3
 80111fe:	4610      	mov	r0, r2
 8011200:	f7fc f942 	bl	800d488 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 8011204:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011206:	681b      	ldr	r3, [r3, #0]
 8011208:	891c      	ldrh	r4, [r3, #8]
 801120a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801120c:	681b      	ldr	r3, [r3, #0]
 801120e:	68db      	ldr	r3, [r3, #12]
 8011210:	899b      	ldrh	r3, [r3, #12]
 8011212:	b29b      	uxth	r3, r3
 8011214:	4618      	mov	r0, r3
 8011216:	f7fb f909 	bl	800c42c <lwip_htons>
 801121a:	4603      	mov	r3, r0
 801121c:	f003 0303 	and.w	r3, r3, #3
 8011220:	2b00      	cmp	r3, #0
 8011222:	d001      	beq.n	8011228 <tcp_receive+0xf30>
 8011224:	2301      	movs	r3, #1
 8011226:	e000      	b.n	801122a <tcp_receive+0xf32>
 8011228:	2300      	movs	r3, #0
 801122a:	4423      	add	r3, r4
 801122c:	b29a      	uxth	r2, r3
 801122e:	4b2a      	ldr	r3, [pc, #168]	; (80112d8 <tcp_receive+0xfe0>)
 8011230:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8011232:	4b29      	ldr	r3, [pc, #164]	; (80112d8 <tcp_receive+0xfe0>)
 8011234:	881b      	ldrh	r3, [r3, #0]
 8011236:	461a      	mov	r2, r3
 8011238:	4b25      	ldr	r3, [pc, #148]	; (80112d0 <tcp_receive+0xfd8>)
 801123a:	681b      	ldr	r3, [r3, #0]
 801123c:	441a      	add	r2, r3
 801123e:	687b      	ldr	r3, [r7, #4]
 8011240:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011242:	6879      	ldr	r1, [r7, #4]
 8011244:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8011246:	440b      	add	r3, r1
 8011248:	429a      	cmp	r2, r3
 801124a:	d01b      	beq.n	8011284 <tcp_receive+0xf8c>
 801124c:	4b23      	ldr	r3, [pc, #140]	; (80112dc <tcp_receive+0xfe4>)
 801124e:	f240 627b 	movw	r2, #1659	; 0x67b
 8011252:	4923      	ldr	r1, [pc, #140]	; (80112e0 <tcp_receive+0xfe8>)
 8011254:	4823      	ldr	r0, [pc, #140]	; (80112e4 <tcp_receive+0xfec>)
 8011256:	f006 fd59 	bl	8017d0c <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 801125a:	e013      	b.n	8011284 <tcp_receive+0xf8c>
              }
            }
            prev = next;
 801125c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801125e:	62bb      	str	r3, [r7, #40]	; 0x28
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8011260:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011262:	681b      	ldr	r3, [r3, #0]
 8011264:	62fb      	str	r3, [r7, #44]	; 0x2c
 8011266:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011268:	2b00      	cmp	r3, #0
 801126a:	f47f aeab 	bne.w	8010fc4 <tcp_receive+0xccc>
      if (pcb->rcv_nxt == seqno) {
 801126e:	e00f      	b.n	8011290 <tcp_receive+0xf98>
                break;
 8011270:	bf00      	nop
 8011272:	e00d      	b.n	8011290 <tcp_receive+0xf98>
                break;
 8011274:	bf00      	nop
 8011276:	e00b      	b.n	8011290 <tcp_receive+0xf98>
                  break;
 8011278:	bf00      	nop
 801127a:	e009      	b.n	8011290 <tcp_receive+0xf98>
                  break;
 801127c:	bf00      	nop
 801127e:	e007      	b.n	8011290 <tcp_receive+0xf98>
                  break;
 8011280:	bf00      	nop
 8011282:	e005      	b.n	8011290 <tcp_receive+0xf98>
                break;
 8011284:	bf00      	nop
      if (pcb->rcv_nxt == seqno) {
 8011286:	e003      	b.n	8011290 <tcp_receive+0xf98>
#endif /* TCP_OOSEQ_MAX_BYTES || TCP_OOSEQ_MAX_PBUFS */
#endif /* TCP_QUEUE_OOSEQ */
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 8011288:	6878      	ldr	r0, [r7, #4]
 801128a:	f000 fb1d 	bl	80118c8 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 801128e:	e01a      	b.n	80112c6 <tcp_receive+0xfce>
 8011290:	e019      	b.n	80112c6 <tcp_receive+0xfce>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 8011292:	4b0f      	ldr	r3, [pc, #60]	; (80112d0 <tcp_receive+0xfd8>)
 8011294:	681a      	ldr	r2, [r3, #0]
 8011296:	687b      	ldr	r3, [r7, #4]
 8011298:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801129a:	1ad3      	subs	r3, r2, r3
 801129c:	2b00      	cmp	r3, #0
 801129e:	db0a      	blt.n	80112b6 <tcp_receive+0xfbe>
 80112a0:	4b0b      	ldr	r3, [pc, #44]	; (80112d0 <tcp_receive+0xfd8>)
 80112a2:	681a      	ldr	r2, [r3, #0]
 80112a4:	687b      	ldr	r3, [r7, #4]
 80112a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80112a8:	6879      	ldr	r1, [r7, #4]
 80112aa:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80112ac:	440b      	add	r3, r1
 80112ae:	1ad3      	subs	r3, r2, r3
 80112b0:	3301      	adds	r3, #1
 80112b2:	2b00      	cmp	r3, #0
 80112b4:	dd07      	ble.n	80112c6 <tcp_receive+0xfce>
      tcp_ack_now(pcb);
 80112b6:	687b      	ldr	r3, [r7, #4]
 80112b8:	7e9b      	ldrb	r3, [r3, #26]
 80112ba:	f043 0302 	orr.w	r3, r3, #2
 80112be:	b2da      	uxtb	r2, r3
 80112c0:	687b      	ldr	r3, [r7, #4]
 80112c2:	769a      	strb	r2, [r3, #26]
    }
  }
}
 80112c4:	e7ff      	b.n	80112c6 <tcp_receive+0xfce>
 80112c6:	bf00      	nop
 80112c8:	3734      	adds	r7, #52	; 0x34
 80112ca:	46bd      	mov	sp, r7
 80112cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80112ce:	bf00      	nop
 80112d0:	20004b90 	.word	0x20004b90
 80112d4:	20004b70 	.word	0x20004b70
 80112d8:	20004b9a 	.word	0x20004b9a
 80112dc:	08019894 	.word	0x08019894
 80112e0:	08019b60 	.word	0x08019b60
 80112e4:	080198d8 	.word	0x080198d8

080112e8 <tcp_getoptbyte>:

static u8_t
tcp_getoptbyte(void)
{
 80112e8:	b480      	push	{r7}
 80112ea:	b083      	sub	sp, #12
 80112ec:	af00      	add	r7, sp, #0
  if ((tcphdr_opt2 == NULL) || (tcp_optidx < tcphdr_opt1len)) {
 80112ee:	4b18      	ldr	r3, [pc, #96]	; (8011350 <tcp_getoptbyte+0x68>)
 80112f0:	681b      	ldr	r3, [r3, #0]
 80112f2:	2b00      	cmp	r3, #0
 80112f4:	d005      	beq.n	8011302 <tcp_getoptbyte+0x1a>
 80112f6:	4b17      	ldr	r3, [pc, #92]	; (8011354 <tcp_getoptbyte+0x6c>)
 80112f8:	881a      	ldrh	r2, [r3, #0]
 80112fa:	4b17      	ldr	r3, [pc, #92]	; (8011358 <tcp_getoptbyte+0x70>)
 80112fc:	881b      	ldrh	r3, [r3, #0]
 80112fe:	429a      	cmp	r2, r3
 8011300:	d20e      	bcs.n	8011320 <tcp_getoptbyte+0x38>
    u8_t* opts = (u8_t *)tcphdr + TCP_HLEN;
 8011302:	4b16      	ldr	r3, [pc, #88]	; (801135c <tcp_getoptbyte+0x74>)
 8011304:	681b      	ldr	r3, [r3, #0]
 8011306:	3314      	adds	r3, #20
 8011308:	603b      	str	r3, [r7, #0]
    return opts[tcp_optidx++];
 801130a:	4b12      	ldr	r3, [pc, #72]	; (8011354 <tcp_getoptbyte+0x6c>)
 801130c:	881b      	ldrh	r3, [r3, #0]
 801130e:	1c5a      	adds	r2, r3, #1
 8011310:	b291      	uxth	r1, r2
 8011312:	4a10      	ldr	r2, [pc, #64]	; (8011354 <tcp_getoptbyte+0x6c>)
 8011314:	8011      	strh	r1, [r2, #0]
 8011316:	461a      	mov	r2, r3
 8011318:	683b      	ldr	r3, [r7, #0]
 801131a:	4413      	add	r3, r2
 801131c:	781b      	ldrb	r3, [r3, #0]
 801131e:	e010      	b.n	8011342 <tcp_getoptbyte+0x5a>
  } else {
    u8_t idx = (u8_t)(tcp_optidx++ - tcphdr_opt1len);
 8011320:	4b0c      	ldr	r3, [pc, #48]	; (8011354 <tcp_getoptbyte+0x6c>)
 8011322:	881b      	ldrh	r3, [r3, #0]
 8011324:	1c5a      	adds	r2, r3, #1
 8011326:	b291      	uxth	r1, r2
 8011328:	4a0a      	ldr	r2, [pc, #40]	; (8011354 <tcp_getoptbyte+0x6c>)
 801132a:	8011      	strh	r1, [r2, #0]
 801132c:	b2da      	uxtb	r2, r3
 801132e:	4b0a      	ldr	r3, [pc, #40]	; (8011358 <tcp_getoptbyte+0x70>)
 8011330:	881b      	ldrh	r3, [r3, #0]
 8011332:	b2db      	uxtb	r3, r3
 8011334:	1ad3      	subs	r3, r2, r3
 8011336:	71fb      	strb	r3, [r7, #7]
    return tcphdr_opt2[idx];
 8011338:	4b05      	ldr	r3, [pc, #20]	; (8011350 <tcp_getoptbyte+0x68>)
 801133a:	681a      	ldr	r2, [r3, #0]
 801133c:	79fb      	ldrb	r3, [r7, #7]
 801133e:	4413      	add	r3, r2
 8011340:	781b      	ldrb	r3, [r3, #0]
  }
}
 8011342:	4618      	mov	r0, r3
 8011344:	370c      	adds	r7, #12
 8011346:	46bd      	mov	sp, r7
 8011348:	f85d 7b04 	ldr.w	r7, [sp], #4
 801134c:	4770      	bx	lr
 801134e:	bf00      	nop
 8011350:	20004b88 	.word	0x20004b88
 8011354:	20004b8c 	.word	0x20004b8c
 8011358:	20004b86 	.word	0x20004b86
 801135c:	20004b80 	.word	0x20004b80

08011360 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 8011360:	b580      	push	{r7, lr}
 8011362:	b084      	sub	sp, #16
 8011364:	af00      	add	r7, sp, #0
 8011366:	6078      	str	r0, [r7, #4]
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 8011368:	4b2d      	ldr	r3, [pc, #180]	; (8011420 <tcp_parseopt+0xc0>)
 801136a:	881b      	ldrh	r3, [r3, #0]
 801136c:	2b00      	cmp	r3, #0
 801136e:	d053      	beq.n	8011418 <tcp_parseopt+0xb8>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8011370:	4b2c      	ldr	r3, [pc, #176]	; (8011424 <tcp_parseopt+0xc4>)
 8011372:	2200      	movs	r2, #0
 8011374:	801a      	strh	r2, [r3, #0]
 8011376:	e043      	b.n	8011400 <tcp_parseopt+0xa0>
      u8_t opt = tcp_getoptbyte();
 8011378:	f7ff ffb6 	bl	80112e8 <tcp_getoptbyte>
 801137c:	4603      	mov	r3, r0
 801137e:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 8011380:	7bfb      	ldrb	r3, [r7, #15]
 8011382:	2b01      	cmp	r3, #1
 8011384:	d03c      	beq.n	8011400 <tcp_parseopt+0xa0>
 8011386:	2b02      	cmp	r3, #2
 8011388:	d002      	beq.n	8011390 <tcp_parseopt+0x30>
 801138a:	2b00      	cmp	r3, #0
 801138c:	d03f      	beq.n	801140e <tcp_parseopt+0xae>
 801138e:	e026      	b.n	80113de <tcp_parseopt+0x7e>
        /* NOP option. */
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
        break;
      case LWIP_TCP_OPT_MSS:
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
        if (tcp_getoptbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 8011390:	f7ff ffaa 	bl	80112e8 <tcp_getoptbyte>
 8011394:	4603      	mov	r3, r0
 8011396:	2b04      	cmp	r3, #4
 8011398:	d13b      	bne.n	8011412 <tcp_parseopt+0xb2>
 801139a:	4b22      	ldr	r3, [pc, #136]	; (8011424 <tcp_parseopt+0xc4>)
 801139c:	881b      	ldrh	r3, [r3, #0]
 801139e:	3302      	adds	r3, #2
 80113a0:	4a1f      	ldr	r2, [pc, #124]	; (8011420 <tcp_parseopt+0xc0>)
 80113a2:	8812      	ldrh	r2, [r2, #0]
 80113a4:	4293      	cmp	r3, r2
 80113a6:	dc34      	bgt.n	8011412 <tcp_parseopt+0xb2>
          /* Bad length */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
          return;
        }
        /* An MSS option with the right option length. */
        mss = (tcp_getoptbyte() << 8);
 80113a8:	f7ff ff9e 	bl	80112e8 <tcp_getoptbyte>
 80113ac:	4603      	mov	r3, r0
 80113ae:	b29b      	uxth	r3, r3
 80113b0:	021b      	lsls	r3, r3, #8
 80113b2:	81bb      	strh	r3, [r7, #12]
        mss |= tcp_getoptbyte();
 80113b4:	f7ff ff98 	bl	80112e8 <tcp_getoptbyte>
 80113b8:	4603      	mov	r3, r0
 80113ba:	b29a      	uxth	r2, r3
 80113bc:	89bb      	ldrh	r3, [r7, #12]
 80113be:	4313      	orrs	r3, r2
 80113c0:	81bb      	strh	r3, [r7, #12]
        /* Limit the mss to the configured TCP_MSS and prevent division by zero */
        pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 80113c2:	89bb      	ldrh	r3, [r7, #12]
 80113c4:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 80113c8:	d804      	bhi.n	80113d4 <tcp_parseopt+0x74>
 80113ca:	89bb      	ldrh	r3, [r7, #12]
 80113cc:	2b00      	cmp	r3, #0
 80113ce:	d001      	beq.n	80113d4 <tcp_parseopt+0x74>
 80113d0:	89ba      	ldrh	r2, [r7, #12]
 80113d2:	e001      	b.n	80113d8 <tcp_parseopt+0x78>
 80113d4:	f44f 7206 	mov.w	r2, #536	; 0x218
 80113d8:	687b      	ldr	r3, [r7, #4]
 80113da:	865a      	strh	r2, [r3, #50]	; 0x32
        break;
 80113dc:	e010      	b.n	8011400 <tcp_parseopt+0xa0>
        tcp_optidx += LWIP_TCP_OPT_LEN_TS - 6;
        break;
#endif
      default:
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
        data = tcp_getoptbyte();
 80113de:	f7ff ff83 	bl	80112e8 <tcp_getoptbyte>
 80113e2:	4603      	mov	r3, r0
 80113e4:	72fb      	strb	r3, [r7, #11]
        if (data < 2) {
 80113e6:	7afb      	ldrb	r3, [r7, #11]
 80113e8:	2b01      	cmp	r3, #1
 80113ea:	d914      	bls.n	8011416 <tcp_parseopt+0xb6>
             and we don't process them further. */
          return;
        }
        /* All other options have a length field, so that we easily
           can skip past them. */
        tcp_optidx += data - 2;
 80113ec:	7afb      	ldrb	r3, [r7, #11]
 80113ee:	b29a      	uxth	r2, r3
 80113f0:	4b0c      	ldr	r3, [pc, #48]	; (8011424 <tcp_parseopt+0xc4>)
 80113f2:	881b      	ldrh	r3, [r3, #0]
 80113f4:	4413      	add	r3, r2
 80113f6:	b29b      	uxth	r3, r3
 80113f8:	3b02      	subs	r3, #2
 80113fa:	b29a      	uxth	r2, r3
 80113fc:	4b09      	ldr	r3, [pc, #36]	; (8011424 <tcp_parseopt+0xc4>)
 80113fe:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8011400:	4b08      	ldr	r3, [pc, #32]	; (8011424 <tcp_parseopt+0xc4>)
 8011402:	881a      	ldrh	r2, [r3, #0]
 8011404:	4b06      	ldr	r3, [pc, #24]	; (8011420 <tcp_parseopt+0xc0>)
 8011406:	881b      	ldrh	r3, [r3, #0]
 8011408:	429a      	cmp	r2, r3
 801140a:	d3b5      	bcc.n	8011378 <tcp_parseopt+0x18>
 801140c:	e004      	b.n	8011418 <tcp_parseopt+0xb8>
        return;
 801140e:	bf00      	nop
 8011410:	e002      	b.n	8011418 <tcp_parseopt+0xb8>
          return;
 8011412:	bf00      	nop
 8011414:	e000      	b.n	8011418 <tcp_parseopt+0xb8>
          return;
 8011416:	bf00      	nop
      }
    }
  }
}
 8011418:	3710      	adds	r7, #16
 801141a:	46bd      	mov	sp, r7
 801141c:	bd80      	pop	{r7, pc}
 801141e:	bf00      	nop
 8011420:	20004b84 	.word	0x20004b84
 8011424:	20004b8c 	.word	0x20004b8c

08011428 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 8011428:	b480      	push	{r7}
 801142a:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 801142c:	4b05      	ldr	r3, [pc, #20]	; (8011444 <tcp_trigger_input_pcb_close+0x1c>)
 801142e:	781b      	ldrb	r3, [r3, #0]
 8011430:	f043 0310 	orr.w	r3, r3, #16
 8011434:	b2da      	uxtb	r2, r3
 8011436:	4b03      	ldr	r3, [pc, #12]	; (8011444 <tcp_trigger_input_pcb_close+0x1c>)
 8011438:	701a      	strb	r2, [r3, #0]
}
 801143a:	bf00      	nop
 801143c:	46bd      	mov	sp, r7
 801143e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011442:	4770      	bx	lr
 8011444:	20004b9d 	.word	0x20004b9d

08011448 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                      u32_t seqno_be /* already in network byte order */)
{
 8011448:	b580      	push	{r7, lr}
 801144a:	b086      	sub	sp, #24
 801144c:	af00      	add	r7, sp, #0
 801144e:	60f8      	str	r0, [r7, #12]
 8011450:	607b      	str	r3, [r7, #4]
 8011452:	460b      	mov	r3, r1
 8011454:	817b      	strh	r3, [r7, #10]
 8011456:	4613      	mov	r3, r2
 8011458:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 801145a:	897a      	ldrh	r2, [r7, #10]
 801145c:	893b      	ldrh	r3, [r7, #8]
 801145e:	4413      	add	r3, r2
 8011460:	b29b      	uxth	r3, r3
 8011462:	3314      	adds	r3, #20
 8011464:	b29b      	uxth	r3, r3
 8011466:	2200      	movs	r2, #0
 8011468:	4619      	mov	r1, r3
 801146a:	2001      	movs	r0, #1
 801146c:	f7fb fe0e 	bl	800d08c <pbuf_alloc>
 8011470:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 8011472:	697b      	ldr	r3, [r7, #20]
 8011474:	2b00      	cmp	r3, #0
 8011476:	d057      	beq.n	8011528 <tcp_output_alloc_header+0xe0>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 8011478:	697b      	ldr	r3, [r7, #20]
 801147a:	895b      	ldrh	r3, [r3, #10]
 801147c:	461a      	mov	r2, r3
 801147e:	897b      	ldrh	r3, [r7, #10]
 8011480:	3314      	adds	r3, #20
 8011482:	429a      	cmp	r2, r3
 8011484:	da05      	bge.n	8011492 <tcp_output_alloc_header+0x4a>
 8011486:	4b2b      	ldr	r3, [pc, #172]	; (8011534 <tcp_output_alloc_header+0xec>)
 8011488:	2273      	movs	r2, #115	; 0x73
 801148a:	492b      	ldr	r1, [pc, #172]	; (8011538 <tcp_output_alloc_header+0xf0>)
 801148c:	482b      	ldr	r0, [pc, #172]	; (801153c <tcp_output_alloc_header+0xf4>)
 801148e:	f006 fc3d 	bl	8017d0c <iprintf>
                 (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 8011492:	697b      	ldr	r3, [r7, #20]
 8011494:	685b      	ldr	r3, [r3, #4]
 8011496:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(pcb->local_port);
 8011498:	68fb      	ldr	r3, [r7, #12]
 801149a:	8adb      	ldrh	r3, [r3, #22]
 801149c:	4618      	mov	r0, r3
 801149e:	f7fa ffc5 	bl	800c42c <lwip_htons>
 80114a2:	4603      	mov	r3, r0
 80114a4:	461a      	mov	r2, r3
 80114a6:	693b      	ldr	r3, [r7, #16]
 80114a8:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(pcb->remote_port);
 80114aa:	68fb      	ldr	r3, [r7, #12]
 80114ac:	8b1b      	ldrh	r3, [r3, #24]
 80114ae:	4618      	mov	r0, r3
 80114b0:	f7fa ffbc 	bl	800c42c <lwip_htons>
 80114b4:	4603      	mov	r3, r0
 80114b6:	461a      	mov	r2, r3
 80114b8:	693b      	ldr	r3, [r7, #16]
 80114ba:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 80114bc:	693b      	ldr	r3, [r7, #16]
 80114be:	687a      	ldr	r2, [r7, #4]
 80114c0:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 80114c2:	68fb      	ldr	r3, [r7, #12]
 80114c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80114c6:	4618      	mov	r0, r3
 80114c8:	f7fa ffbe 	bl	800c448 <lwip_htonl>
 80114cc:	4602      	mov	r2, r0
 80114ce:	693b      	ldr	r3, [r7, #16]
 80114d0:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), TCP_ACK);
 80114d2:	897b      	ldrh	r3, [r7, #10]
 80114d4:	089b      	lsrs	r3, r3, #2
 80114d6:	b29b      	uxth	r3, r3
 80114d8:	3305      	adds	r3, #5
 80114da:	b29b      	uxth	r3, r3
 80114dc:	031b      	lsls	r3, r3, #12
 80114de:	b29b      	uxth	r3, r3
 80114e0:	f043 0310 	orr.w	r3, r3, #16
 80114e4:	b29b      	uxth	r3, r3
 80114e6:	4618      	mov	r0, r3
 80114e8:	f7fa ffa0 	bl	800c42c <lwip_htons>
 80114ec:	4603      	mov	r3, r0
 80114ee:	461a      	mov	r2, r3
 80114f0:	693b      	ldr	r3, [r7, #16]
 80114f2:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 80114f4:	68fb      	ldr	r3, [r7, #12]
 80114f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80114f8:	4618      	mov	r0, r3
 80114fa:	f7fa ff97 	bl	800c42c <lwip_htons>
 80114fe:	4603      	mov	r3, r0
 8011500:	461a      	mov	r2, r3
 8011502:	693b      	ldr	r3, [r7, #16]
 8011504:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 8011506:	693b      	ldr	r3, [r7, #16]
 8011508:	2200      	movs	r2, #0
 801150a:	741a      	strb	r2, [r3, #16]
 801150c:	2200      	movs	r2, #0
 801150e:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 8011510:	693b      	ldr	r3, [r7, #16]
 8011512:	2200      	movs	r2, #0
 8011514:	749a      	strb	r2, [r3, #18]
 8011516:	2200      	movs	r2, #0
 8011518:	74da      	strb	r2, [r3, #19]

    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 801151a:	68fb      	ldr	r3, [r7, #12]
 801151c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801151e:	68fa      	ldr	r2, [r7, #12]
 8011520:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 8011522:	441a      	add	r2, r3
 8011524:	68fb      	ldr	r3, [r7, #12]
 8011526:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 8011528:	697b      	ldr	r3, [r7, #20]
}
 801152a:	4618      	mov	r0, r3
 801152c:	3718      	adds	r7, #24
 801152e:	46bd      	mov	sp, r7
 8011530:	bd80      	pop	{r7, pc}
 8011532:	bf00      	nop
 8011534:	08019c1c 	.word	0x08019c1c
 8011538:	08019c50 	.word	0x08019c50
 801153c:	08019c80 	.word	0x08019c80

08011540 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 8011540:	b590      	push	{r4, r7, lr}
 8011542:	b085      	sub	sp, #20
 8011544:	af00      	add	r7, sp, #0
 8011546:	6078      	str	r0, [r7, #4]
  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 8011548:	687b      	ldr	r3, [r7, #4]
 801154a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801154c:	2b00      	cmp	r3, #0
 801154e:	d02d      	beq.n	80115ac <tcp_send_fin+0x6c>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8011550:	687b      	ldr	r3, [r7, #4]
 8011552:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8011554:	60fb      	str	r3, [r7, #12]
 8011556:	e002      	b.n	801155e <tcp_send_fin+0x1e>
         last_unsent = last_unsent->next);
 8011558:	68fb      	ldr	r3, [r7, #12]
 801155a:	681b      	ldr	r3, [r3, #0]
 801155c:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 801155e:	68fb      	ldr	r3, [r7, #12]
 8011560:	681b      	ldr	r3, [r3, #0]
 8011562:	2b00      	cmp	r3, #0
 8011564:	d1f8      	bne.n	8011558 <tcp_send_fin+0x18>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 8011566:	68fb      	ldr	r3, [r7, #12]
 8011568:	68db      	ldr	r3, [r3, #12]
 801156a:	899b      	ldrh	r3, [r3, #12]
 801156c:	b29b      	uxth	r3, r3
 801156e:	4618      	mov	r0, r3
 8011570:	f7fa ff5c 	bl	800c42c <lwip_htons>
 8011574:	4603      	mov	r3, r0
 8011576:	f003 0307 	and.w	r3, r3, #7
 801157a:	2b00      	cmp	r3, #0
 801157c:	d116      	bne.n	80115ac <tcp_send_fin+0x6c>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 801157e:	68fb      	ldr	r3, [r7, #12]
 8011580:	68db      	ldr	r3, [r3, #12]
 8011582:	899b      	ldrh	r3, [r3, #12]
 8011584:	b29c      	uxth	r4, r3
 8011586:	2001      	movs	r0, #1
 8011588:	f7fa ff50 	bl	800c42c <lwip_htons>
 801158c:	4603      	mov	r3, r0
 801158e:	461a      	mov	r2, r3
 8011590:	68fb      	ldr	r3, [r7, #12]
 8011592:	68db      	ldr	r3, [r3, #12]
 8011594:	4322      	orrs	r2, r4
 8011596:	b292      	uxth	r2, r2
 8011598:	819a      	strh	r2, [r3, #12]
      pcb->flags |= TF_FIN;
 801159a:	687b      	ldr	r3, [r7, #4]
 801159c:	7e9b      	ldrb	r3, [r3, #26]
 801159e:	f043 0320 	orr.w	r3, r3, #32
 80115a2:	b2da      	uxtb	r2, r3
 80115a4:	687b      	ldr	r3, [r7, #4]
 80115a6:	769a      	strb	r2, [r3, #26]
      return ERR_OK;
 80115a8:	2300      	movs	r3, #0
 80115aa:	e004      	b.n	80115b6 <tcp_send_fin+0x76>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 80115ac:	2101      	movs	r1, #1
 80115ae:	6878      	ldr	r0, [r7, #4]
 80115b0:	f000 f88e 	bl	80116d0 <tcp_enqueue_flags>
 80115b4:	4603      	mov	r3, r0
}
 80115b6:	4618      	mov	r0, r3
 80115b8:	3714      	adds	r7, #20
 80115ba:	46bd      	mov	sp, r7
 80115bc:	bd90      	pop	{r4, r7, pc}
	...

080115c0 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(struct tcp_pcb *pcb, struct pbuf *p, u8_t flags, u32_t seqno, u8_t optflags)
{
 80115c0:	b590      	push	{r4, r7, lr}
 80115c2:	b087      	sub	sp, #28
 80115c4:	af00      	add	r7, sp, #0
 80115c6:	60f8      	str	r0, [r7, #12]
 80115c8:	60b9      	str	r1, [r7, #8]
 80115ca:	603b      	str	r3, [r7, #0]
 80115cc:	4613      	mov	r3, r2
 80115ce:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen = LWIP_TCP_OPT_LENGTH(optflags);
 80115d0:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80115d4:	009b      	lsls	r3, r3, #2
 80115d6:	b2db      	uxtb	r3, r3
 80115d8:	f003 0304 	and.w	r3, r3, #4
 80115dc:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 80115de:	2003      	movs	r0, #3
 80115e0:	f7fb fb12 	bl	800cc08 <memp_malloc>
 80115e4:	6138      	str	r0, [r7, #16]
 80115e6:	693b      	ldr	r3, [r7, #16]
 80115e8:	2b00      	cmp	r3, #0
 80115ea:	d104      	bne.n	80115f6 <tcp_create_segment+0x36>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 80115ec:	68b8      	ldr	r0, [r7, #8]
 80115ee:	f7fc f8bf 	bl	800d770 <pbuf_free>
    return NULL;
 80115f2:	2300      	movs	r3, #0
 80115f4:	e061      	b.n	80116ba <tcp_create_segment+0xfa>
  }
  seg->flags = optflags;
 80115f6:	693b      	ldr	r3, [r7, #16]
 80115f8:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 80115fc:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 80115fe:	693b      	ldr	r3, [r7, #16]
 8011600:	2200      	movs	r2, #0
 8011602:	601a      	str	r2, [r3, #0]
  seg->p = p;
 8011604:	693b      	ldr	r3, [r7, #16]
 8011606:	68ba      	ldr	r2, [r7, #8]
 8011608:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 801160a:	68bb      	ldr	r3, [r7, #8]
 801160c:	891a      	ldrh	r2, [r3, #8]
 801160e:	7dfb      	ldrb	r3, [r7, #23]
 8011610:	b29b      	uxth	r3, r3
 8011612:	429a      	cmp	r2, r3
 8011614:	d205      	bcs.n	8011622 <tcp_create_segment+0x62>
 8011616:	4b2b      	ldr	r3, [pc, #172]	; (80116c4 <tcp_create_segment+0x104>)
 8011618:	22ba      	movs	r2, #186	; 0xba
 801161a:	492b      	ldr	r1, [pc, #172]	; (80116c8 <tcp_create_segment+0x108>)
 801161c:	482b      	ldr	r0, [pc, #172]	; (80116cc <tcp_create_segment+0x10c>)
 801161e:	f006 fb75 	bl	8017d0c <iprintf>
  seg->len = p->tot_len - optlen;
 8011622:	68bb      	ldr	r3, [r7, #8]
 8011624:	891a      	ldrh	r2, [r3, #8]
 8011626:	7dfb      	ldrb	r3, [r7, #23]
 8011628:	b29b      	uxth	r3, r3
 801162a:	1ad3      	subs	r3, r2, r3
 801162c:	b29a      	uxth	r2, r3
 801162e:	693b      	ldr	r3, [r7, #16]
 8011630:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_header(p, TCP_HLEN)) {
 8011632:	2114      	movs	r1, #20
 8011634:	68b8      	ldr	r0, [r7, #8]
 8011636:	f7fc f877 	bl	800d728 <pbuf_header>
 801163a:	4603      	mov	r3, r0
 801163c:	2b00      	cmp	r3, #0
 801163e:	d004      	beq.n	801164a <tcp_create_segment+0x8a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 8011640:	6938      	ldr	r0, [r7, #16]
 8011642:	f7fd f9f8 	bl	800ea36 <tcp_seg_free>
    return NULL;
 8011646:	2300      	movs	r3, #0
 8011648:	e037      	b.n	80116ba <tcp_create_segment+0xfa>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 801164a:	693b      	ldr	r3, [r7, #16]
 801164c:	685b      	ldr	r3, [r3, #4]
 801164e:	685a      	ldr	r2, [r3, #4]
 8011650:	693b      	ldr	r3, [r7, #16]
 8011652:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 8011654:	68fb      	ldr	r3, [r7, #12]
 8011656:	8ada      	ldrh	r2, [r3, #22]
 8011658:	693b      	ldr	r3, [r7, #16]
 801165a:	68dc      	ldr	r4, [r3, #12]
 801165c:	4610      	mov	r0, r2
 801165e:	f7fa fee5 	bl	800c42c <lwip_htons>
 8011662:	4603      	mov	r3, r0
 8011664:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 8011666:	68fb      	ldr	r3, [r7, #12]
 8011668:	8b1a      	ldrh	r2, [r3, #24]
 801166a:	693b      	ldr	r3, [r7, #16]
 801166c:	68dc      	ldr	r4, [r3, #12]
 801166e:	4610      	mov	r0, r2
 8011670:	f7fa fedc 	bl	800c42c <lwip_htons>
 8011674:	4603      	mov	r3, r0
 8011676:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 8011678:	693b      	ldr	r3, [r7, #16]
 801167a:	68dc      	ldr	r4, [r3, #12]
 801167c:	6838      	ldr	r0, [r7, #0]
 801167e:	f7fa fee3 	bl	800c448 <lwip_htonl>
 8011682:	4603      	mov	r3, r0
 8011684:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), flags);
 8011686:	7dfb      	ldrb	r3, [r7, #23]
 8011688:	089b      	lsrs	r3, r3, #2
 801168a:	b2db      	uxtb	r3, r3
 801168c:	b29b      	uxth	r3, r3
 801168e:	3305      	adds	r3, #5
 8011690:	b29b      	uxth	r3, r3
 8011692:	031b      	lsls	r3, r3, #12
 8011694:	b29a      	uxth	r2, r3
 8011696:	79fb      	ldrb	r3, [r7, #7]
 8011698:	b29b      	uxth	r3, r3
 801169a:	4313      	orrs	r3, r2
 801169c:	b29a      	uxth	r2, r3
 801169e:	693b      	ldr	r3, [r7, #16]
 80116a0:	68dc      	ldr	r4, [r3, #12]
 80116a2:	4610      	mov	r0, r2
 80116a4:	f7fa fec2 	bl	800c42c <lwip_htons>
 80116a8:	4603      	mov	r3, r0
 80116aa:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 80116ac:	693b      	ldr	r3, [r7, #16]
 80116ae:	68db      	ldr	r3, [r3, #12]
 80116b0:	2200      	movs	r2, #0
 80116b2:	749a      	strb	r2, [r3, #18]
 80116b4:	2200      	movs	r2, #0
 80116b6:	74da      	strb	r2, [r3, #19]
  return seg;
 80116b8:	693b      	ldr	r3, [r7, #16]
}
 80116ba:	4618      	mov	r0, r3
 80116bc:	371c      	adds	r7, #28
 80116be:	46bd      	mov	sp, r7
 80116c0:	bd90      	pop	{r4, r7, pc}
 80116c2:	bf00      	nop
 80116c4:	08019c1c 	.word	0x08019c1c
 80116c8:	08019ca8 	.word	0x08019ca8
 80116cc:	08019c80 	.word	0x08019c80

080116d0 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 80116d0:	b580      	push	{r7, lr}
 80116d2:	b08a      	sub	sp, #40	; 0x28
 80116d4:	af02      	add	r7, sp, #8
 80116d6:	6078      	str	r0, [r7, #4]
 80116d8:	460b      	mov	r3, r1
 80116da:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 80116dc:	2300      	movs	r3, #0
 80116de:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 80116e0:	2300      	movs	r3, #0
 80116e2:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 80116e4:	78fb      	ldrb	r3, [r7, #3]
 80116e6:	f003 0303 	and.w	r3, r3, #3
 80116ea:	2b00      	cmp	r3, #0
 80116ec:	d106      	bne.n	80116fc <tcp_enqueue_flags+0x2c>
 80116ee:	4b6f      	ldr	r3, [pc, #444]	; (80118ac <tcp_enqueue_flags+0x1dc>)
 80116f0:	f240 321b 	movw	r2, #795	; 0x31b
 80116f4:	496e      	ldr	r1, [pc, #440]	; (80118b0 <tcp_enqueue_flags+0x1e0>)
 80116f6:	486f      	ldr	r0, [pc, #444]	; (80118b4 <tcp_enqueue_flags+0x1e4>)
 80116f8:	f006 fb08 	bl	8017d0c <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);

  /* check for configured max queuelen and possible overflow (FIN flag should always come through!) */
  if (((pcb->snd_queuelen >= TCP_SND_QUEUELEN) || (pcb->snd_queuelen > TCP_SNDQUEUELEN_OVERFLOW)) &&
 80116fc:	687b      	ldr	r3, [r7, #4]
 80116fe:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8011702:	2b08      	cmp	r3, #8
 8011704:	d806      	bhi.n	8011714 <tcp_enqueue_flags+0x44>
 8011706:	687b      	ldr	r3, [r7, #4]
 8011708:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 801170c:	f64f 72fc 	movw	r2, #65532	; 0xfffc
 8011710:	4293      	cmp	r3, r2
 8011712:	d90e      	bls.n	8011732 <tcp_enqueue_flags+0x62>
      ((flags & TCP_FIN) == 0)) {
 8011714:	78fb      	ldrb	r3, [r7, #3]
 8011716:	f003 0301 	and.w	r3, r3, #1
  if (((pcb->snd_queuelen >= TCP_SND_QUEUELEN) || (pcb->snd_queuelen > TCP_SNDQUEUELEN_OVERFLOW)) &&
 801171a:	2b00      	cmp	r3, #0
 801171c:	d109      	bne.n	8011732 <tcp_enqueue_flags+0x62>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_enqueue_flags: too long queue %"U16_F" (max %"U16_F")\n",
                                       pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    pcb->flags |= TF_NAGLEMEMERR;
 801171e:	687b      	ldr	r3, [r7, #4]
 8011720:	7e9b      	ldrb	r3, [r3, #26]
 8011722:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8011726:	b2da      	uxtb	r2, r3
 8011728:	687b      	ldr	r3, [r7, #4]
 801172a:	769a      	strb	r2, [r3, #26]
    return ERR_MEM;
 801172c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8011730:	e0b7      	b.n	80118a2 <tcp_enqueue_flags+0x1d2>
  }

  if (flags & TCP_SYN) {
 8011732:	78fb      	ldrb	r3, [r7, #3]
 8011734:	f003 0302 	and.w	r3, r3, #2
 8011738:	2b00      	cmp	r3, #0
 801173a:	d001      	beq.n	8011740 <tcp_enqueue_flags+0x70>
    optflags = TF_SEG_OPTS_MSS;
 801173c:	2301      	movs	r3, #1
 801173e:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host. */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 8011740:	7ffb      	ldrb	r3, [r7, #31]
 8011742:	009b      	lsls	r3, r3, #2
 8011744:	b2db      	uxtb	r3, r3
 8011746:	f003 0304 	and.w	r3, r3, #4
 801174a:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 801174c:	7dfb      	ldrb	r3, [r7, #23]
 801174e:	b29b      	uxth	r3, r3
 8011750:	2200      	movs	r2, #0
 8011752:	4619      	mov	r1, r3
 8011754:	2000      	movs	r0, #0
 8011756:	f7fb fc99 	bl	800d08c <pbuf_alloc>
 801175a:	6138      	str	r0, [r7, #16]
 801175c:	693b      	ldr	r3, [r7, #16]
 801175e:	2b00      	cmp	r3, #0
 8011760:	d109      	bne.n	8011776 <tcp_enqueue_flags+0xa6>
    pcb->flags |= TF_NAGLEMEMERR;
 8011762:	687b      	ldr	r3, [r7, #4]
 8011764:	7e9b      	ldrb	r3, [r3, #26]
 8011766:	f063 037f 	orn	r3, r3, #127	; 0x7f
 801176a:	b2da      	uxtb	r2, r3
 801176c:	687b      	ldr	r3, [r7, #4]
 801176e:	769a      	strb	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8011770:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8011774:	e095      	b.n	80118a2 <tcp_enqueue_flags+0x1d2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 8011776:	693b      	ldr	r3, [r7, #16]
 8011778:	895a      	ldrh	r2, [r3, #10]
 801177a:	7dfb      	ldrb	r3, [r7, #23]
 801177c:	b29b      	uxth	r3, r3
 801177e:	429a      	cmp	r2, r3
 8011780:	d206      	bcs.n	8011790 <tcp_enqueue_flags+0xc0>
 8011782:	4b4a      	ldr	r3, [pc, #296]	; (80118ac <tcp_enqueue_flags+0x1dc>)
 8011784:	f240 3241 	movw	r2, #833	; 0x341
 8011788:	494b      	ldr	r1, [pc, #300]	; (80118b8 <tcp_enqueue_flags+0x1e8>)
 801178a:	484a      	ldr	r0, [pc, #296]	; (80118b4 <tcp_enqueue_flags+0x1e4>)
 801178c:	f006 fabe 	bl	8017d0c <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 8011790:	687b      	ldr	r3, [r7, #4]
 8011792:	6d99      	ldr	r1, [r3, #88]	; 0x58
 8011794:	78fa      	ldrb	r2, [r7, #3]
 8011796:	7ffb      	ldrb	r3, [r7, #31]
 8011798:	9300      	str	r3, [sp, #0]
 801179a:	460b      	mov	r3, r1
 801179c:	6939      	ldr	r1, [r7, #16]
 801179e:	6878      	ldr	r0, [r7, #4]
 80117a0:	f7ff ff0e 	bl	80115c0 <tcp_create_segment>
 80117a4:	60f8      	str	r0, [r7, #12]
 80117a6:	68fb      	ldr	r3, [r7, #12]
 80117a8:	2b00      	cmp	r3, #0
 80117aa:	d109      	bne.n	80117c0 <tcp_enqueue_flags+0xf0>
    pcb->flags |= TF_NAGLEMEMERR;
 80117ac:	687b      	ldr	r3, [r7, #4]
 80117ae:	7e9b      	ldrb	r3, [r3, #26]
 80117b0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80117b4:	b2da      	uxtb	r2, r3
 80117b6:	687b      	ldr	r3, [r7, #4]
 80117b8:	769a      	strb	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 80117ba:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80117be:	e070      	b.n	80118a2 <tcp_enqueue_flags+0x1d2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 80117c0:	68fb      	ldr	r3, [r7, #12]
 80117c2:	68db      	ldr	r3, [r3, #12]
 80117c4:	f003 0303 	and.w	r3, r3, #3
 80117c8:	2b00      	cmp	r3, #0
 80117ca:	d006      	beq.n	80117da <tcp_enqueue_flags+0x10a>
 80117cc:	4b37      	ldr	r3, [pc, #220]	; (80118ac <tcp_enqueue_flags+0x1dc>)
 80117ce:	f240 3249 	movw	r2, #841	; 0x349
 80117d2:	493a      	ldr	r1, [pc, #232]	; (80118bc <tcp_enqueue_flags+0x1ec>)
 80117d4:	4837      	ldr	r0, [pc, #220]	; (80118b4 <tcp_enqueue_flags+0x1e4>)
 80117d6:	f006 fa99 	bl	8017d0c <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 80117da:	68fb      	ldr	r3, [r7, #12]
 80117dc:	891b      	ldrh	r3, [r3, #8]
 80117de:	2b00      	cmp	r3, #0
 80117e0:	d006      	beq.n	80117f0 <tcp_enqueue_flags+0x120>
 80117e2:	4b32      	ldr	r3, [pc, #200]	; (80118ac <tcp_enqueue_flags+0x1dc>)
 80117e4:	f240 324a 	movw	r2, #842	; 0x34a
 80117e8:	4935      	ldr	r1, [pc, #212]	; (80118c0 <tcp_enqueue_flags+0x1f0>)
 80117ea:	4832      	ldr	r0, [pc, #200]	; (80118b4 <tcp_enqueue_flags+0x1e4>)
 80117ec:	f006 fa8e 	bl	8017d0c <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 80117f0:	687b      	ldr	r3, [r7, #4]
 80117f2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80117f4:	2b00      	cmp	r3, #0
 80117f6:	d103      	bne.n	8011800 <tcp_enqueue_flags+0x130>
    pcb->unsent = seg;
 80117f8:	687b      	ldr	r3, [r7, #4]
 80117fa:	68fa      	ldr	r2, [r7, #12]
 80117fc:	669a      	str	r2, [r3, #104]	; 0x68
 80117fe:	e00d      	b.n	801181c <tcp_enqueue_flags+0x14c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 8011800:	687b      	ldr	r3, [r7, #4]
 8011802:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8011804:	61bb      	str	r3, [r7, #24]
 8011806:	e002      	b.n	801180e <tcp_enqueue_flags+0x13e>
 8011808:	69bb      	ldr	r3, [r7, #24]
 801180a:	681b      	ldr	r3, [r3, #0]
 801180c:	61bb      	str	r3, [r7, #24]
 801180e:	69bb      	ldr	r3, [r7, #24]
 8011810:	681b      	ldr	r3, [r3, #0]
 8011812:	2b00      	cmp	r3, #0
 8011814:	d1f8      	bne.n	8011808 <tcp_enqueue_flags+0x138>
    useg->next = seg;
 8011816:	69bb      	ldr	r3, [r7, #24]
 8011818:	68fa      	ldr	r2, [r7, #12]
 801181a:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 801181c:	687b      	ldr	r3, [r7, #4]
 801181e:	2200      	movs	r2, #0
 8011820:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 8011824:	78fb      	ldrb	r3, [r7, #3]
 8011826:	f003 0302 	and.w	r3, r3, #2
 801182a:	2b00      	cmp	r3, #0
 801182c:	d104      	bne.n	8011838 <tcp_enqueue_flags+0x168>
 801182e:	78fb      	ldrb	r3, [r7, #3]
 8011830:	f003 0301 	and.w	r3, r3, #1
 8011834:	2b00      	cmp	r3, #0
 8011836:	d004      	beq.n	8011842 <tcp_enqueue_flags+0x172>
    pcb->snd_lbb++;
 8011838:	687b      	ldr	r3, [r7, #4]
 801183a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801183c:	1c5a      	adds	r2, r3, #1
 801183e:	687b      	ldr	r3, [r7, #4]
 8011840:	659a      	str	r2, [r3, #88]	; 0x58
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 8011842:	78fb      	ldrb	r3, [r7, #3]
 8011844:	f003 0301 	and.w	r3, r3, #1
 8011848:	2b00      	cmp	r3, #0
 801184a:	d006      	beq.n	801185a <tcp_enqueue_flags+0x18a>
    pcb->flags |= TF_FIN;
 801184c:	687b      	ldr	r3, [r7, #4]
 801184e:	7e9b      	ldrb	r3, [r3, #26]
 8011850:	f043 0320 	orr.w	r3, r3, #32
 8011854:	b2da      	uxtb	r2, r3
 8011856:	687b      	ldr	r3, [r7, #4]
 8011858:	769a      	strb	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 801185a:	68fb      	ldr	r3, [r7, #12]
 801185c:	685b      	ldr	r3, [r3, #4]
 801185e:	4618      	mov	r0, r3
 8011860:	f7fc f820 	bl	800d8a4 <pbuf_clen>
 8011864:	4603      	mov	r3, r0
 8011866:	461a      	mov	r2, r3
 8011868:	687b      	ldr	r3, [r7, #4]
 801186a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 801186e:	4413      	add	r3, r2
 8011870:	b29a      	uxth	r2, r3
 8011872:	687b      	ldr	r3, [r7, #4]
 8011874:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 8011878:	687b      	ldr	r3, [r7, #4]
 801187a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 801187e:	2b00      	cmp	r3, #0
 8011880:	d00e      	beq.n	80118a0 <tcp_enqueue_flags+0x1d0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 8011882:	687b      	ldr	r3, [r7, #4]
 8011884:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011886:	2b00      	cmp	r3, #0
 8011888:	d10a      	bne.n	80118a0 <tcp_enqueue_flags+0x1d0>
 801188a:	687b      	ldr	r3, [r7, #4]
 801188c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801188e:	2b00      	cmp	r3, #0
 8011890:	d106      	bne.n	80118a0 <tcp_enqueue_flags+0x1d0>
 8011892:	4b06      	ldr	r3, [pc, #24]	; (80118ac <tcp_enqueue_flags+0x1dc>)
 8011894:	f240 326d 	movw	r2, #877	; 0x36d
 8011898:	490a      	ldr	r1, [pc, #40]	; (80118c4 <tcp_enqueue_flags+0x1f4>)
 801189a:	4806      	ldr	r0, [pc, #24]	; (80118b4 <tcp_enqueue_flags+0x1e4>)
 801189c:	f006 fa36 	bl	8017d0c <iprintf>
      pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 80118a0:	2300      	movs	r3, #0
}
 80118a2:	4618      	mov	r0, r3
 80118a4:	3720      	adds	r7, #32
 80118a6:	46bd      	mov	sp, r7
 80118a8:	bd80      	pop	{r7, pc}
 80118aa:	bf00      	nop
 80118ac:	08019c1c 	.word	0x08019c1c
 80118b0:	08019f20 	.word	0x08019f20
 80118b4:	08019c80 	.word	0x08019c80
 80118b8:	08019f78 	.word	0x08019f78
 80118bc:	08019fb4 	.word	0x08019fb4
 80118c0:	08019fcc 	.word	0x08019fcc
 80118c4:	08019ff8 	.word	0x08019ff8

080118c8 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 80118c8:	b590      	push	{r4, r7, lr}
 80118ca:	b08b      	sub	sp, #44	; 0x2c
 80118cc:	af04      	add	r7, sp, #16
 80118ce:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = 0;
 80118d0:	2300      	movs	r3, #0
 80118d2:	75bb      	strb	r3, [r7, #22]
  if (pcb->flags & TF_TIMESTAMP) {
    optlen = LWIP_TCP_OPT_LENGTH(TF_SEG_OPTS_TS);
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 80118d4:	7dbb      	ldrb	r3, [r7, #22]
 80118d6:	b29c      	uxth	r4, r3
 80118d8:	687b      	ldr	r3, [r7, #4]
 80118da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80118dc:	4618      	mov	r0, r3
 80118de:	f7fa fdb3 	bl	800c448 <lwip_htonl>
 80118e2:	4603      	mov	r3, r0
 80118e4:	2200      	movs	r2, #0
 80118e6:	4621      	mov	r1, r4
 80118e8:	6878      	ldr	r0, [r7, #4]
 80118ea:	f7ff fdad 	bl	8011448 <tcp_output_alloc_header>
 80118ee:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 80118f0:	693b      	ldr	r3, [r7, #16]
 80118f2:	2b00      	cmp	r3, #0
 80118f4:	d109      	bne.n	801190a <tcp_send_empty_ack+0x42>
    /* let tcp_fasttmr retry sending this ACK */
    pcb->flags |= (TF_ACK_DELAY | TF_ACK_NOW);
 80118f6:	687b      	ldr	r3, [r7, #4]
 80118f8:	7e9b      	ldrb	r3, [r3, #26]
 80118fa:	f043 0303 	orr.w	r3, r3, #3
 80118fe:	b2da      	uxtb	r2, r3
 8011900:	687b      	ldr	r3, [r7, #4]
 8011902:	769a      	strb	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 8011904:	f06f 0301 	mvn.w	r3, #1
 8011908:	e036      	b.n	8011978 <tcp_send_empty_ack+0xb0>
  if (pcb->flags & TF_TIMESTAMP) {
    tcp_build_timestamp_option(pcb, (u32_t *)(tcphdr + 1));
  }
#endif

  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 801190a:	687b      	ldr	r3, [r7, #4]
 801190c:	3304      	adds	r3, #4
 801190e:	4618      	mov	r0, r3
 8011910:	f004 f99a 	bl	8015c48 <ip4_route>
 8011914:	60f8      	str	r0, [r7, #12]
  if (netif == NULL) {
 8011916:	68fb      	ldr	r3, [r7, #12]
 8011918:	2b00      	cmp	r3, #0
 801191a:	d102      	bne.n	8011922 <tcp_send_empty_ack+0x5a>
    err = ERR_RTE;
 801191c:	23fc      	movs	r3, #252	; 0xfc
 801191e:	75fb      	strb	r3, [r7, #23]
 8011920:	e012      	b.n	8011948 <tcp_send_empty_ack+0x80>
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
        &pcb->local_ip, &pcb->remote_ip);
    }
#endif
    NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
    err = ip_output_if(p, &pcb->local_ip, &pcb->remote_ip,
 8011922:	6879      	ldr	r1, [r7, #4]
 8011924:	687b      	ldr	r3, [r7, #4]
 8011926:	1d18      	adds	r0, r3, #4
 8011928:	687b      	ldr	r3, [r7, #4]
 801192a:	7a9c      	ldrb	r4, [r3, #10]
 801192c:	687b      	ldr	r3, [r7, #4]
 801192e:	7a5b      	ldrb	r3, [r3, #9]
 8011930:	68fa      	ldr	r2, [r7, #12]
 8011932:	9202      	str	r2, [sp, #8]
 8011934:	2206      	movs	r2, #6
 8011936:	9201      	str	r2, [sp, #4]
 8011938:	9300      	str	r3, [sp, #0]
 801193a:	4623      	mov	r3, r4
 801193c:	4602      	mov	r2, r0
 801193e:	6938      	ldr	r0, [r7, #16]
 8011940:	f004 fb48 	bl	8015fd4 <ip4_output_if>
 8011944:	4603      	mov	r3, r0
 8011946:	75fb      	strb	r3, [r7, #23]
      pcb->ttl, pcb->tos, IP_PROTO_TCP, netif);
    NETIF_SET_HWADDRHINT(netif, NULL);
  }
  pbuf_free(p);
 8011948:	6938      	ldr	r0, [r7, #16]
 801194a:	f7fb ff11 	bl	800d770 <pbuf_free>

  if (err != ERR_OK) {
 801194e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8011952:	2b00      	cmp	r3, #0
 8011954:	d007      	beq.n	8011966 <tcp_send_empty_ack+0x9e>
    /* let tcp_fasttmr retry sending this ACK */
    pcb->flags |= (TF_ACK_DELAY | TF_ACK_NOW);
 8011956:	687b      	ldr	r3, [r7, #4]
 8011958:	7e9b      	ldrb	r3, [r3, #26]
 801195a:	f043 0303 	orr.w	r3, r3, #3
 801195e:	b2da      	uxtb	r2, r3
 8011960:	687b      	ldr	r3, [r7, #4]
 8011962:	769a      	strb	r2, [r3, #26]
 8011964:	e006      	b.n	8011974 <tcp_send_empty_ack+0xac>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    pcb->flags &= ~(TF_ACK_DELAY | TF_ACK_NOW);
 8011966:	687b      	ldr	r3, [r7, #4]
 8011968:	7e9b      	ldrb	r3, [r3, #26]
 801196a:	f023 0303 	bic.w	r3, r3, #3
 801196e:	b2da      	uxtb	r2, r3
 8011970:	687b      	ldr	r3, [r7, #4]
 8011972:	769a      	strb	r2, [r3, #26]
  }

  return err;
 8011974:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8011978:	4618      	mov	r0, r3
 801197a:	371c      	adds	r7, #28
 801197c:	46bd      	mov	sp, r7
 801197e:	bd90      	pop	{r4, r7, pc}

08011980 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 8011980:	b5b0      	push	{r4, r5, r7, lr}
 8011982:	b08a      	sub	sp, #40	; 0x28
 8011984:	af00      	add	r7, sp, #0
 8011986:	6078      	str	r0, [r7, #4]
#if TCP_CWND_DEBUG
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 8011988:	687b      	ldr	r3, [r7, #4]
 801198a:	7d1b      	ldrb	r3, [r3, #20]
 801198c:	2b01      	cmp	r3, #1
 801198e:	d106      	bne.n	801199e <tcp_output+0x1e>
 8011990:	4b9b      	ldr	r3, [pc, #620]	; (8011c00 <tcp_output+0x280>)
 8011992:	f240 32ed 	movw	r2, #1005	; 0x3ed
 8011996:	499b      	ldr	r1, [pc, #620]	; (8011c04 <tcp_output+0x284>)
 8011998:	489b      	ldr	r0, [pc, #620]	; (8011c08 <tcp_output+0x288>)
 801199a:	f006 f9b7 	bl	8017d0c <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 801199e:	4b9b      	ldr	r3, [pc, #620]	; (8011c0c <tcp_output+0x28c>)
 80119a0:	681b      	ldr	r3, [r3, #0]
 80119a2:	687a      	ldr	r2, [r7, #4]
 80119a4:	429a      	cmp	r2, r3
 80119a6:	d101      	bne.n	80119ac <tcp_output+0x2c>
    return ERR_OK;
 80119a8:	2300      	movs	r3, #0
 80119aa:	e1cf      	b.n	8011d4c <tcp_output+0x3cc>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 80119ac:	687b      	ldr	r3, [r7, #4]
 80119ae:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 80119b2:	687b      	ldr	r3, [r7, #4]
 80119b4:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80119b8:	429a      	cmp	r2, r3
 80119ba:	d203      	bcs.n	80119c4 <tcp_output+0x44>
 80119bc:	687b      	ldr	r3, [r7, #4]
 80119be:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80119c2:	e002      	b.n	80119ca <tcp_output+0x4a>
 80119c4:	687b      	ldr	r3, [r7, #4]
 80119c6:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80119ca:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 80119cc:	687b      	ldr	r3, [r7, #4]
 80119ce:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80119d0:	627b      	str	r3, [r7, #36]	; 0x24
   * because the ->unsent queue is empty or because the window does
   * not allow it), construct an empty ACK segment and send it.
   *
   * If data is to be sent, we will just piggyback the ACK (see below).
   */
  if (pcb->flags & TF_ACK_NOW &&
 80119d2:	687b      	ldr	r3, [r7, #4]
 80119d4:	7e9b      	ldrb	r3, [r3, #26]
 80119d6:	f003 0302 	and.w	r3, r3, #2
 80119da:	2b00      	cmp	r3, #0
 80119dc:	d017      	beq.n	8011a0e <tcp_output+0x8e>
 80119de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80119e0:	2b00      	cmp	r3, #0
 80119e2:	d00f      	beq.n	8011a04 <tcp_output+0x84>
     (seg == NULL ||
      lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd)) {
 80119e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80119e6:	68db      	ldr	r3, [r3, #12]
 80119e8:	685b      	ldr	r3, [r3, #4]
 80119ea:	4618      	mov	r0, r3
 80119ec:	f7fa fd2c 	bl	800c448 <lwip_htonl>
 80119f0:	4602      	mov	r2, r0
 80119f2:	687b      	ldr	r3, [r7, #4]
 80119f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80119f6:	1ad3      	subs	r3, r2, r3
 80119f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80119fa:	8912      	ldrh	r2, [r2, #8]
 80119fc:	4413      	add	r3, r2
     (seg == NULL ||
 80119fe:	69ba      	ldr	r2, [r7, #24]
 8011a00:	429a      	cmp	r2, r3
 8011a02:	d204      	bcs.n	8011a0e <tcp_output+0x8e>
     return tcp_send_empty_ack(pcb);
 8011a04:	6878      	ldr	r0, [r7, #4]
 8011a06:	f7ff ff5f 	bl	80118c8 <tcp_send_empty_ack>
 8011a0a:	4603      	mov	r3, r0
 8011a0c:	e19e      	b.n	8011d4c <tcp_output+0x3cc>
  }

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 8011a0e:	687b      	ldr	r3, [r7, #4]
 8011a10:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011a12:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 8011a14:	6a3b      	ldr	r3, [r7, #32]
 8011a16:	2b00      	cmp	r3, #0
 8011a18:	d007      	beq.n	8011a2a <tcp_output+0xaa>
    for (; useg->next != NULL; useg = useg->next);
 8011a1a:	e002      	b.n	8011a22 <tcp_output+0xa2>
 8011a1c:	6a3b      	ldr	r3, [r7, #32]
 8011a1e:	681b      	ldr	r3, [r3, #0]
 8011a20:	623b      	str	r3, [r7, #32]
 8011a22:	6a3b      	ldr	r3, [r7, #32]
 8011a24:	681b      	ldr	r3, [r3, #0]
 8011a26:	2b00      	cmp	r3, #0
 8011a28:	d1f8      	bne.n	8011a1c <tcp_output+0x9c>
  }

  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 8011a2a:	687b      	ldr	r3, [r7, #4]
 8011a2c:	3304      	adds	r3, #4
 8011a2e:	4618      	mov	r0, r3
 8011a30:	f004 f90a 	bl	8015c48 <ip4_route>
 8011a34:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 8011a36:	697b      	ldr	r3, [r7, #20]
 8011a38:	2b00      	cmp	r3, #0
 8011a3a:	d102      	bne.n	8011a42 <tcp_output+0xc2>
    return ERR_RTE;
 8011a3c:	f06f 0303 	mvn.w	r3, #3
 8011a40:	e184      	b.n	8011d4c <tcp_output+0x3cc>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 8011a42:	687b      	ldr	r3, [r7, #4]
 8011a44:	2b00      	cmp	r3, #0
 8011a46:	d003      	beq.n	8011a50 <tcp_output+0xd0>
 8011a48:	687b      	ldr	r3, [r7, #4]
 8011a4a:	681b      	ldr	r3, [r3, #0]
 8011a4c:	2b00      	cmp	r3, #0
 8011a4e:	d111      	bne.n	8011a74 <tcp_output+0xf4>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 8011a50:	697b      	ldr	r3, [r7, #20]
 8011a52:	2b00      	cmp	r3, #0
 8011a54:	d002      	beq.n	8011a5c <tcp_output+0xdc>
 8011a56:	697b      	ldr	r3, [r7, #20]
 8011a58:	3304      	adds	r3, #4
 8011a5a:	e000      	b.n	8011a5e <tcp_output+0xde>
 8011a5c:	2300      	movs	r3, #0
 8011a5e:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 8011a60:	693b      	ldr	r3, [r7, #16]
 8011a62:	2b00      	cmp	r3, #0
 8011a64:	d102      	bne.n	8011a6c <tcp_output+0xec>
      return ERR_RTE;
 8011a66:	f06f 0303 	mvn.w	r3, #3
 8011a6a:	e16f      	b.n	8011d4c <tcp_output+0x3cc>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 8011a6c:	693b      	ldr	r3, [r7, #16]
 8011a6e:	681a      	ldr	r2, [r3, #0]
 8011a70:	687b      	ldr	r3, [r7, #4]
 8011a72:	601a      	str	r2, [r3, #0]
   * with part of the unsent segment (which will engage zero-window probing upon
   * reception of the zero window update from the receiver). This ensures the
   * subsequent window update is reliably received. With the goal of being lightweight,
   * we avoid splitting the unsent segment and treat the window as already zero.
   */
  if (seg != NULL &&
 8011a74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011a76:	2b00      	cmp	r3, #0
 8011a78:	f000 813e 	beq.w	8011cf8 <tcp_output+0x378>
      lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd &&
 8011a7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011a7e:	68db      	ldr	r3, [r3, #12]
 8011a80:	685b      	ldr	r3, [r3, #4]
 8011a82:	4618      	mov	r0, r3
 8011a84:	f7fa fce0 	bl	800c448 <lwip_htonl>
 8011a88:	4602      	mov	r2, r0
 8011a8a:	687b      	ldr	r3, [r7, #4]
 8011a8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011a8e:	1ad3      	subs	r3, r2, r3
 8011a90:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011a92:	8912      	ldrh	r2, [r2, #8]
 8011a94:	4413      	add	r3, r2
  if (seg != NULL &&
 8011a96:	69ba      	ldr	r2, [r7, #24]
 8011a98:	429a      	cmp	r2, r3
 8011a9a:	f080 812d 	bcs.w	8011cf8 <tcp_output+0x378>
      lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd &&
 8011a9e:	69bb      	ldr	r3, [r7, #24]
 8011aa0:	2b00      	cmp	r3, #0
 8011aa2:	f000 8129 	beq.w	8011cf8 <tcp_output+0x378>
      wnd > 0 && wnd == pcb->snd_wnd && pcb->unacked == NULL) {
 8011aa6:	687b      	ldr	r3, [r7, #4]
 8011aa8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8011aac:	461a      	mov	r2, r3
 8011aae:	69bb      	ldr	r3, [r7, #24]
 8011ab0:	4293      	cmp	r3, r2
 8011ab2:	f040 8121 	bne.w	8011cf8 <tcp_output+0x378>
 8011ab6:	687b      	ldr	r3, [r7, #4]
 8011ab8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011aba:	2b00      	cmp	r3, #0
 8011abc:	f040 811c 	bne.w	8011cf8 <tcp_output+0x378>
    /* Start the persist timer */
    if (pcb->persist_backoff == 0) {
 8011ac0:	687b      	ldr	r3, [r7, #4]
 8011ac2:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 8011ac6:	2b00      	cmp	r3, #0
 8011ac8:	f040 812b 	bne.w	8011d22 <tcp_output+0x3a2>
      pcb->persist_cnt = 0;
 8011acc:	687b      	ldr	r3, [r7, #4]
 8011ace:	2200      	movs	r2, #0
 8011ad0:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
      pcb->persist_backoff = 1;
 8011ad4:	687b      	ldr	r3, [r7, #4]
 8011ad6:	2201      	movs	r2, #1
 8011ad8:	f883 2095 	strb.w	r2, [r3, #149]	; 0x95
    }
    goto output_done;
 8011adc:	e121      	b.n	8011d22 <tcp_output+0x3a2>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 8011ade:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011ae0:	68db      	ldr	r3, [r3, #12]
 8011ae2:	899b      	ldrh	r3, [r3, #12]
 8011ae4:	b29b      	uxth	r3, r3
 8011ae6:	4618      	mov	r0, r3
 8011ae8:	f7fa fca0 	bl	800c42c <lwip_htons>
 8011aec:	4603      	mov	r3, r0
 8011aee:	f003 0304 	and.w	r3, r3, #4
 8011af2:	2b00      	cmp	r3, #0
 8011af4:	d006      	beq.n	8011b04 <tcp_output+0x184>
 8011af6:	4b42      	ldr	r3, [pc, #264]	; (8011c00 <tcp_output+0x280>)
 8011af8:	f240 4246 	movw	r2, #1094	; 0x446
 8011afc:	4944      	ldr	r1, [pc, #272]	; (8011c10 <tcp_output+0x290>)
 8011afe:	4842      	ldr	r0, [pc, #264]	; (8011c08 <tcp_output+0x288>)
 8011b00:	f006 f904 	bl	8017d0c <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8011b04:	687b      	ldr	r3, [r7, #4]
 8011b06:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011b08:	2b00      	cmp	r3, #0
 8011b0a:	d01f      	beq.n	8011b4c <tcp_output+0x1cc>
 8011b0c:	687b      	ldr	r3, [r7, #4]
 8011b0e:	7e9b      	ldrb	r3, [r3, #26]
 8011b10:	f003 0344 	and.w	r3, r3, #68	; 0x44
 8011b14:	2b00      	cmp	r3, #0
 8011b16:	d119      	bne.n	8011b4c <tcp_output+0x1cc>
 8011b18:	687b      	ldr	r3, [r7, #4]
 8011b1a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8011b1c:	2b00      	cmp	r3, #0
 8011b1e:	d00b      	beq.n	8011b38 <tcp_output+0x1b8>
 8011b20:	687b      	ldr	r3, [r7, #4]
 8011b22:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8011b24:	681b      	ldr	r3, [r3, #0]
 8011b26:	2b00      	cmp	r3, #0
 8011b28:	d110      	bne.n	8011b4c <tcp_output+0x1cc>
 8011b2a:	687b      	ldr	r3, [r7, #4]
 8011b2c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8011b2e:	891a      	ldrh	r2, [r3, #8]
 8011b30:	687b      	ldr	r3, [r7, #4]
 8011b32:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011b34:	429a      	cmp	r2, r3
 8011b36:	d209      	bcs.n	8011b4c <tcp_output+0x1cc>
 8011b38:	687b      	ldr	r3, [r7, #4]
 8011b3a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8011b3e:	2b00      	cmp	r3, #0
 8011b40:	d004      	beq.n	8011b4c <tcp_output+0x1cc>
 8011b42:	687b      	ldr	r3, [r7, #4]
 8011b44:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8011b48:	2b08      	cmp	r3, #8
 8011b4a:	d901      	bls.n	8011b50 <tcp_output+0x1d0>
 8011b4c:	2301      	movs	r3, #1
 8011b4e:	e000      	b.n	8011b52 <tcp_output+0x1d2>
 8011b50:	2300      	movs	r3, #0
 8011b52:	2b00      	cmp	r3, #0
 8011b54:	d106      	bne.n	8011b64 <tcp_output+0x1e4>
      ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 8011b56:	687b      	ldr	r3, [r7, #4]
 8011b58:	7e9b      	ldrb	r3, [r3, #26]
 8011b5a:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8011b5e:	2b00      	cmp	r3, #0
 8011b60:	f000 80e1 	beq.w	8011d26 <tcp_output+0x3a6>
                            pcb->lastack,
                            lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 8011b64:	687b      	ldr	r3, [r7, #4]
 8011b66:	7d1b      	ldrb	r3, [r3, #20]
 8011b68:	2b02      	cmp	r3, #2
 8011b6a:	d00d      	beq.n	8011b88 <tcp_output+0x208>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 8011b6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011b6e:	68db      	ldr	r3, [r3, #12]
 8011b70:	899b      	ldrh	r3, [r3, #12]
 8011b72:	b29c      	uxth	r4, r3
 8011b74:	2010      	movs	r0, #16
 8011b76:	f7fa fc59 	bl	800c42c <lwip_htons>
 8011b7a:	4603      	mov	r3, r0
 8011b7c:	461a      	mov	r2, r3
 8011b7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011b80:	68db      	ldr	r3, [r3, #12]
 8011b82:	4322      	orrs	r2, r4
 8011b84:	b292      	uxth	r2, r2
 8011b86:	819a      	strh	r2, [r3, #12]
    }

#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    err = tcp_output_segment(seg, pcb, netif);
 8011b88:	697a      	ldr	r2, [r7, #20]
 8011b8a:	6879      	ldr	r1, [r7, #4]
 8011b8c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8011b8e:	f000 f8e1 	bl	8011d54 <tcp_output_segment>
 8011b92:	4603      	mov	r3, r0
 8011b94:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 8011b96:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011b9a:	2b00      	cmp	r3, #0
 8011b9c:	d009      	beq.n	8011bb2 <tcp_output+0x232>
      /* segment could not be sent, for whatever reason */
      pcb->flags |= TF_NAGLEMEMERR;
 8011b9e:	687b      	ldr	r3, [r7, #4]
 8011ba0:	7e9b      	ldrb	r3, [r3, #26]
 8011ba2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8011ba6:	b2da      	uxtb	r2, r3
 8011ba8:	687b      	ldr	r3, [r7, #4]
 8011baa:	769a      	strb	r2, [r3, #26]
      return err;
 8011bac:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011bb0:	e0cc      	b.n	8011d4c <tcp_output+0x3cc>
    }
    pcb->unsent = seg->next;
 8011bb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011bb4:	681a      	ldr	r2, [r3, #0]
 8011bb6:	687b      	ldr	r3, [r7, #4]
 8011bb8:	669a      	str	r2, [r3, #104]	; 0x68
    if (pcb->state != SYN_SENT) {
 8011bba:	687b      	ldr	r3, [r7, #4]
 8011bbc:	7d1b      	ldrb	r3, [r3, #20]
 8011bbe:	2b02      	cmp	r3, #2
 8011bc0:	d006      	beq.n	8011bd0 <tcp_output+0x250>
      pcb->flags &= ~(TF_ACK_DELAY | TF_ACK_NOW);
 8011bc2:	687b      	ldr	r3, [r7, #4]
 8011bc4:	7e9b      	ldrb	r3, [r3, #26]
 8011bc6:	f023 0303 	bic.w	r3, r3, #3
 8011bca:	b2da      	uxtb	r2, r3
 8011bcc:	687b      	ldr	r3, [r7, #4]
 8011bce:	769a      	strb	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8011bd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011bd2:	68db      	ldr	r3, [r3, #12]
 8011bd4:	685b      	ldr	r3, [r3, #4]
 8011bd6:	4618      	mov	r0, r3
 8011bd8:	f7fa fc36 	bl	800c448 <lwip_htonl>
 8011bdc:	4604      	mov	r4, r0
 8011bde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011be0:	891b      	ldrh	r3, [r3, #8]
 8011be2:	461d      	mov	r5, r3
 8011be4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011be6:	68db      	ldr	r3, [r3, #12]
 8011be8:	899b      	ldrh	r3, [r3, #12]
 8011bea:	b29b      	uxth	r3, r3
 8011bec:	4618      	mov	r0, r3
 8011bee:	f7fa fc1d 	bl	800c42c <lwip_htons>
 8011bf2:	4603      	mov	r3, r0
 8011bf4:	f003 0303 	and.w	r3, r3, #3
 8011bf8:	2b00      	cmp	r3, #0
 8011bfa:	d00b      	beq.n	8011c14 <tcp_output+0x294>
 8011bfc:	2301      	movs	r3, #1
 8011bfe:	e00a      	b.n	8011c16 <tcp_output+0x296>
 8011c00:	08019c1c 	.word	0x08019c1c
 8011c04:	0801a020 	.word	0x0801a020
 8011c08:	08019c80 	.word	0x08019c80
 8011c0c:	2000b5c4 	.word	0x2000b5c4
 8011c10:	0801a048 	.word	0x0801a048
 8011c14:	2300      	movs	r3, #0
 8011c16:	442b      	add	r3, r5
 8011c18:	4423      	add	r3, r4
 8011c1a:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8011c1c:	687b      	ldr	r3, [r7, #4]
 8011c1e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8011c20:	68bb      	ldr	r3, [r7, #8]
 8011c22:	1ad3      	subs	r3, r2, r3
 8011c24:	2b00      	cmp	r3, #0
 8011c26:	da02      	bge.n	8011c2e <tcp_output+0x2ae>
      pcb->snd_nxt = snd_nxt;
 8011c28:	687b      	ldr	r3, [r7, #4]
 8011c2a:	68ba      	ldr	r2, [r7, #8]
 8011c2c:	64da      	str	r2, [r3, #76]	; 0x4c
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 8011c2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011c30:	891b      	ldrh	r3, [r3, #8]
 8011c32:	461c      	mov	r4, r3
 8011c34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011c36:	68db      	ldr	r3, [r3, #12]
 8011c38:	899b      	ldrh	r3, [r3, #12]
 8011c3a:	b29b      	uxth	r3, r3
 8011c3c:	4618      	mov	r0, r3
 8011c3e:	f7fa fbf5 	bl	800c42c <lwip_htons>
 8011c42:	4603      	mov	r3, r0
 8011c44:	f003 0303 	and.w	r3, r3, #3
 8011c48:	2b00      	cmp	r3, #0
 8011c4a:	d001      	beq.n	8011c50 <tcp_output+0x2d0>
 8011c4c:	2301      	movs	r3, #1
 8011c4e:	e000      	b.n	8011c52 <tcp_output+0x2d2>
 8011c50:	2300      	movs	r3, #0
 8011c52:	4423      	add	r3, r4
 8011c54:	2b00      	cmp	r3, #0
 8011c56:	d049      	beq.n	8011cec <tcp_output+0x36c>
      seg->next = NULL;
 8011c58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011c5a:	2200      	movs	r2, #0
 8011c5c:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 8011c5e:	687b      	ldr	r3, [r7, #4]
 8011c60:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011c62:	2b00      	cmp	r3, #0
 8011c64:	d105      	bne.n	8011c72 <tcp_output+0x2f2>
        pcb->unacked = seg;
 8011c66:	687b      	ldr	r3, [r7, #4]
 8011c68:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011c6a:	66da      	str	r2, [r3, #108]	; 0x6c
        useg = seg;
 8011c6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011c6e:	623b      	str	r3, [r7, #32]
 8011c70:	e03f      	b.n	8011cf2 <tcp_output+0x372>
      /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 8011c72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011c74:	68db      	ldr	r3, [r3, #12]
 8011c76:	685b      	ldr	r3, [r3, #4]
 8011c78:	4618      	mov	r0, r3
 8011c7a:	f7fa fbe5 	bl	800c448 <lwip_htonl>
 8011c7e:	4604      	mov	r4, r0
 8011c80:	6a3b      	ldr	r3, [r7, #32]
 8011c82:	68db      	ldr	r3, [r3, #12]
 8011c84:	685b      	ldr	r3, [r3, #4]
 8011c86:	4618      	mov	r0, r3
 8011c88:	f7fa fbde 	bl	800c448 <lwip_htonl>
 8011c8c:	4603      	mov	r3, r0
 8011c8e:	1ae3      	subs	r3, r4, r3
 8011c90:	2b00      	cmp	r3, #0
 8011c92:	da24      	bge.n	8011cde <tcp_output+0x35e>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 8011c94:	687b      	ldr	r3, [r7, #4]
 8011c96:	336c      	adds	r3, #108	; 0x6c
 8011c98:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8011c9a:	e002      	b.n	8011ca2 <tcp_output+0x322>
            TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
              cur_seg = &((*cur_seg)->next );
 8011c9c:	69fb      	ldr	r3, [r7, #28]
 8011c9e:	681b      	ldr	r3, [r3, #0]
 8011ca0:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8011ca2:	69fb      	ldr	r3, [r7, #28]
 8011ca4:	681b      	ldr	r3, [r3, #0]
 8011ca6:	2b00      	cmp	r3, #0
 8011ca8:	d011      	beq.n	8011cce <tcp_output+0x34e>
            TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8011caa:	69fb      	ldr	r3, [r7, #28]
 8011cac:	681b      	ldr	r3, [r3, #0]
 8011cae:	68db      	ldr	r3, [r3, #12]
 8011cb0:	685b      	ldr	r3, [r3, #4]
 8011cb2:	4618      	mov	r0, r3
 8011cb4:	f7fa fbc8 	bl	800c448 <lwip_htonl>
 8011cb8:	4604      	mov	r4, r0
 8011cba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011cbc:	68db      	ldr	r3, [r3, #12]
 8011cbe:	685b      	ldr	r3, [r3, #4]
 8011cc0:	4618      	mov	r0, r3
 8011cc2:	f7fa fbc1 	bl	800c448 <lwip_htonl>
 8011cc6:	4603      	mov	r3, r0
 8011cc8:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 8011cca:	2b00      	cmp	r3, #0
 8011ccc:	dbe6      	blt.n	8011c9c <tcp_output+0x31c>
          }
          seg->next = (*cur_seg);
 8011cce:	69fb      	ldr	r3, [r7, #28]
 8011cd0:	681a      	ldr	r2, [r3, #0]
 8011cd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011cd4:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 8011cd6:	69fb      	ldr	r3, [r7, #28]
 8011cd8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011cda:	601a      	str	r2, [r3, #0]
 8011cdc:	e009      	b.n	8011cf2 <tcp_output+0x372>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 8011cde:	6a3b      	ldr	r3, [r7, #32]
 8011ce0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011ce2:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 8011ce4:	6a3b      	ldr	r3, [r7, #32]
 8011ce6:	681b      	ldr	r3, [r3, #0]
 8011ce8:	623b      	str	r3, [r7, #32]
 8011cea:	e002      	b.n	8011cf2 <tcp_output+0x372>
        }
      }
    /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 8011cec:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8011cee:	f7fc fea2 	bl	800ea36 <tcp_seg_free>
    }
    seg = pcb->unsent;
 8011cf2:	687b      	ldr	r3, [r7, #4]
 8011cf4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8011cf6:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 8011cf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011cfa:	2b00      	cmp	r3, #0
 8011cfc:	d015      	beq.n	8011d2a <tcp_output+0x3aa>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 8011cfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011d00:	68db      	ldr	r3, [r3, #12]
 8011d02:	685b      	ldr	r3, [r3, #4]
 8011d04:	4618      	mov	r0, r3
 8011d06:	f7fa fb9f 	bl	800c448 <lwip_htonl>
 8011d0a:	4602      	mov	r2, r0
 8011d0c:	687b      	ldr	r3, [r7, #4]
 8011d0e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011d10:	1ad3      	subs	r3, r2, r3
 8011d12:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011d14:	8912      	ldrh	r2, [r2, #8]
 8011d16:	4413      	add	r3, r2
  while (seg != NULL &&
 8011d18:	69ba      	ldr	r2, [r7, #24]
 8011d1a:	429a      	cmp	r2, r3
 8011d1c:	f4bf aedf 	bcs.w	8011ade <tcp_output+0x15e>
  }
output_done:
 8011d20:	e003      	b.n	8011d2a <tcp_output+0x3aa>
    goto output_done;
 8011d22:	bf00      	nop
 8011d24:	e002      	b.n	8011d2c <tcp_output+0x3ac>
      break;
 8011d26:	bf00      	nop
 8011d28:	e000      	b.n	8011d2c <tcp_output+0x3ac>
output_done:
 8011d2a:	bf00      	nop
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 8011d2c:	687b      	ldr	r3, [r7, #4]
 8011d2e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8011d30:	2b00      	cmp	r3, #0
 8011d32:	d103      	bne.n	8011d3c <tcp_output+0x3bc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8011d34:	687b      	ldr	r3, [r7, #4]
 8011d36:	2200      	movs	r2, #0
 8011d38:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
  }
#endif /* TCP_OVERSIZE */

  pcb->flags &= ~TF_NAGLEMEMERR;
 8011d3c:	687b      	ldr	r3, [r7, #4]
 8011d3e:	7e9b      	ldrb	r3, [r3, #26]
 8011d40:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8011d44:	b2da      	uxtb	r2, r3
 8011d46:	687b      	ldr	r3, [r7, #4]
 8011d48:	769a      	strb	r2, [r3, #26]
  return ERR_OK;
 8011d4a:	2300      	movs	r3, #0
}
 8011d4c:	4618      	mov	r0, r3
 8011d4e:	3728      	adds	r7, #40	; 0x28
 8011d50:	46bd      	mov	sp, r7
 8011d52:	bdb0      	pop	{r4, r5, r7, pc}

08011d54 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 8011d54:	b5b0      	push	{r4, r5, r7, lr}
 8011d56:	b08c      	sub	sp, #48	; 0x30
 8011d58:	af04      	add	r7, sp, #16
 8011d5a:	60f8      	str	r0, [r7, #12]
 8011d5c:	60b9      	str	r1, [r7, #8]
 8011d5e:	607a      	str	r2, [r7, #4]
  err_t err;
  u16_t len;
  u32_t *opts;

  if (seg->p->ref != 1) {
 8011d60:	68fb      	ldr	r3, [r7, #12]
 8011d62:	685b      	ldr	r3, [r3, #4]
 8011d64:	89db      	ldrh	r3, [r3, #14]
 8011d66:	2b01      	cmp	r3, #1
 8011d68:	d001      	beq.n	8011d6e <tcp_output_segment+0x1a>
    /* This can happen if the pbuf of this segment is still referenced by the
       netif driver due to deferred transmission. Since this function modifies
       p->len, we must not continue in this case. */
    return ERR_OK;
 8011d6a:	2300      	movs	r3, #0
 8011d6c:	e08b      	b.n	8011e86 <tcp_output_segment+0x132>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 8011d6e:	68bb      	ldr	r3, [r7, #8]
 8011d70:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8011d72:	68fb      	ldr	r3, [r7, #12]
 8011d74:	68dc      	ldr	r4, [r3, #12]
 8011d76:	4610      	mov	r0, r2
 8011d78:	f7fa fb66 	bl	800c448 <lwip_htonl>
 8011d7c:	4603      	mov	r3, r0
 8011d7e:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 8011d80:	68bb      	ldr	r3, [r7, #8]
 8011d82:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 8011d84:	68fb      	ldr	r3, [r7, #12]
 8011d86:	68dc      	ldr	r4, [r3, #12]
 8011d88:	4610      	mov	r0, r2
 8011d8a:	f7fa fb4f 	bl	800c42c <lwip_htons>
 8011d8e:	4603      	mov	r3, r0
 8011d90:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8011d92:	68bb      	ldr	r3, [r7, #8]
 8011d94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011d96:	68ba      	ldr	r2, [r7, #8]
 8011d98:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 8011d9a:	441a      	add	r2, r3
 8011d9c:	68bb      	ldr	r3, [r7, #8]
 8011d9e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 8011da0:	68fb      	ldr	r3, [r7, #12]
 8011da2:	68db      	ldr	r3, [r3, #12]
 8011da4:	3314      	adds	r3, #20
 8011da6:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 8011da8:	68fb      	ldr	r3, [r7, #12]
 8011daa:	7a9b      	ldrb	r3, [r3, #10]
 8011dac:	f003 0301 	and.w	r3, r3, #1
 8011db0:	2b00      	cmp	r3, #0
 8011db2:	d014      	beq.n	8011dde <tcp_output_segment+0x8a>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss(TCP_MSS, &pcb->local_ip, &pcb->remote_ip);
 8011db4:	68bb      	ldr	r3, [r7, #8]
 8011db6:	3304      	adds	r3, #4
 8011db8:	4619      	mov	r1, r3
 8011dba:	f44f 7006 	mov.w	r0, #536	; 0x218
 8011dbe:	f7fd f8a5 	bl	800ef0c <tcp_eff_send_mss_impl>
 8011dc2:	4603      	mov	r3, r0
 8011dc4:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 8011dc6:	8b7b      	ldrh	r3, [r7, #26]
 8011dc8:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 8011dcc:	4618      	mov	r0, r3
 8011dce:	f7fa fb3b 	bl	800c448 <lwip_htonl>
 8011dd2:	4602      	mov	r2, r0
 8011dd4:	69fb      	ldr	r3, [r7, #28]
 8011dd6:	601a      	str	r2, [r3, #0]
    opts += 1;
 8011dd8:	69fb      	ldr	r3, [r7, #28]
 8011dda:	3304      	adds	r3, #4
 8011ddc:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 8011dde:	68bb      	ldr	r3, [r7, #8]
 8011de0:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8011de4:	2b00      	cmp	r3, #0
 8011de6:	da02      	bge.n	8011dee <tcp_output_segment+0x9a>
    pcb->rtime = 0;
 8011de8:	68bb      	ldr	r3, [r7, #8]
 8011dea:	2200      	movs	r2, #0
 8011dec:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 8011dee:	68bb      	ldr	r3, [r7, #8]
 8011df0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011df2:	2b00      	cmp	r3, #0
 8011df4:	d10c      	bne.n	8011e10 <tcp_output_segment+0xbc>
    pcb->rttest = tcp_ticks;
 8011df6:	4b26      	ldr	r3, [pc, #152]	; (8011e90 <tcp_output_segment+0x13c>)
 8011df8:	681a      	ldr	r2, [r3, #0]
 8011dfa:	68bb      	ldr	r3, [r7, #8]
 8011dfc:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 8011dfe:	68fb      	ldr	r3, [r7, #12]
 8011e00:	68db      	ldr	r3, [r3, #12]
 8011e02:	685b      	ldr	r3, [r3, #4]
 8011e04:	4618      	mov	r0, r3
 8011e06:	f7fa fb1f 	bl	800c448 <lwip_htonl>
 8011e0a:	4602      	mov	r2, r0
 8011e0c:	68bb      	ldr	r3, [r7, #8]
 8011e0e:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
          lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
          seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 8011e10:	68fb      	ldr	r3, [r7, #12]
 8011e12:	68db      	ldr	r3, [r3, #12]
 8011e14:	461a      	mov	r2, r3
 8011e16:	68fb      	ldr	r3, [r7, #12]
 8011e18:	685b      	ldr	r3, [r3, #4]
 8011e1a:	685b      	ldr	r3, [r3, #4]
 8011e1c:	1ad3      	subs	r3, r2, r3
 8011e1e:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 8011e20:	68fb      	ldr	r3, [r7, #12]
 8011e22:	685b      	ldr	r3, [r3, #4]
 8011e24:	8959      	ldrh	r1, [r3, #10]
 8011e26:	68fb      	ldr	r3, [r7, #12]
 8011e28:	685b      	ldr	r3, [r3, #4]
 8011e2a:	8b3a      	ldrh	r2, [r7, #24]
 8011e2c:	1a8a      	subs	r2, r1, r2
 8011e2e:	b292      	uxth	r2, r2
 8011e30:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 8011e32:	68fb      	ldr	r3, [r7, #12]
 8011e34:	685b      	ldr	r3, [r3, #4]
 8011e36:	8919      	ldrh	r1, [r3, #8]
 8011e38:	68fb      	ldr	r3, [r7, #12]
 8011e3a:	685b      	ldr	r3, [r3, #4]
 8011e3c:	8b3a      	ldrh	r2, [r7, #24]
 8011e3e:	1a8a      	subs	r2, r1, r2
 8011e40:	b292      	uxth	r2, r2
 8011e42:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 8011e44:	68fb      	ldr	r3, [r7, #12]
 8011e46:	685b      	ldr	r3, [r3, #4]
 8011e48:	68fa      	ldr	r2, [r7, #12]
 8011e4a:	68d2      	ldr	r2, [r2, #12]
 8011e4c:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 8011e4e:	68fb      	ldr	r3, [r7, #12]
 8011e50:	68db      	ldr	r3, [r3, #12]
 8011e52:	2200      	movs	r2, #0
 8011e54:	741a      	strb	r2, [r3, #16]
 8011e56:	2200      	movs	r2, #0
 8011e58:	745a      	strb	r2, [r3, #17]
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 8011e5a:	68fb      	ldr	r3, [r7, #12]
 8011e5c:	6858      	ldr	r0, [r3, #4]
 8011e5e:	68b9      	ldr	r1, [r7, #8]
 8011e60:	68bb      	ldr	r3, [r7, #8]
 8011e62:	1d1c      	adds	r4, r3, #4
 8011e64:	68bb      	ldr	r3, [r7, #8]
 8011e66:	7a9d      	ldrb	r5, [r3, #10]
 8011e68:	68bb      	ldr	r3, [r7, #8]
 8011e6a:	7a5b      	ldrb	r3, [r3, #9]
 8011e6c:	687a      	ldr	r2, [r7, #4]
 8011e6e:	9202      	str	r2, [sp, #8]
 8011e70:	2206      	movs	r2, #6
 8011e72:	9201      	str	r2, [sp, #4]
 8011e74:	9300      	str	r3, [sp, #0]
 8011e76:	462b      	mov	r3, r5
 8011e78:	4622      	mov	r2, r4
 8011e7a:	f004 f8ab 	bl	8015fd4 <ip4_output_if>
 8011e7e:	4603      	mov	r3, r0
 8011e80:	75fb      	strb	r3, [r7, #23]
    pcb->tos, IP_PROTO_TCP, netif);
  NETIF_SET_HWADDRHINT(netif, NULL);
  return err;
 8011e82:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8011e86:	4618      	mov	r0, r3
 8011e88:	3720      	adds	r7, #32
 8011e8a:	46bd      	mov	sp, r7
 8011e8c:	bdb0      	pop	{r4, r5, r7, pc}
 8011e8e:	bf00      	nop
 8011e90:	2000b5b4 	.word	0x2000b5b4

08011e94 <tcp_rst>:
 */
void
tcp_rst(u32_t seqno, u32_t ackno,
  const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
  u16_t local_port, u16_t remote_port)
{
 8011e94:	b580      	push	{r7, lr}
 8011e96:	b08c      	sub	sp, #48	; 0x30
 8011e98:	af04      	add	r7, sp, #16
 8011e9a:	60f8      	str	r0, [r7, #12]
 8011e9c:	60b9      	str	r1, [r7, #8]
 8011e9e:	607a      	str	r2, [r7, #4]
 8011ea0:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  struct tcp_hdr *tcphdr;
  struct netif *netif;
  p = pbuf_alloc(PBUF_IP, TCP_HLEN, PBUF_RAM);
 8011ea2:	2200      	movs	r2, #0
 8011ea4:	2114      	movs	r1, #20
 8011ea6:	2001      	movs	r0, #1
 8011ea8:	f7fb f8f0 	bl	800d08c <pbuf_alloc>
 8011eac:	61f8      	str	r0, [r7, #28]
  if (p == NULL) {
 8011eae:	69fb      	ldr	r3, [r7, #28]
 8011eb0:	2b00      	cmp	r3, #0
 8011eb2:	d05b      	beq.n	8011f6c <tcp_rst+0xd8>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 8011eb4:	69fb      	ldr	r3, [r7, #28]
 8011eb6:	895b      	ldrh	r3, [r3, #10]
 8011eb8:	2b13      	cmp	r3, #19
 8011eba:	d806      	bhi.n	8011eca <tcp_rst+0x36>
 8011ebc:	4b2d      	ldr	r3, [pc, #180]	; (8011f74 <tcp_rst+0xe0>)
 8011ebe:	f240 524d 	movw	r2, #1357	; 0x54d
 8011ec2:	492d      	ldr	r1, [pc, #180]	; (8011f78 <tcp_rst+0xe4>)
 8011ec4:	482d      	ldr	r0, [pc, #180]	; (8011f7c <tcp_rst+0xe8>)
 8011ec6:	f005 ff21 	bl	8017d0c <iprintf>
              (p->len >= sizeof(struct tcp_hdr)));

  tcphdr = (struct tcp_hdr *)p->payload;
 8011eca:	69fb      	ldr	r3, [r7, #28]
 8011ecc:	685b      	ldr	r3, [r3, #4]
 8011ece:	61bb      	str	r3, [r7, #24]
  tcphdr->src = lwip_htons(local_port);
 8011ed0:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8011ed2:	4618      	mov	r0, r3
 8011ed4:	f7fa faaa 	bl	800c42c <lwip_htons>
 8011ed8:	4603      	mov	r3, r0
 8011eda:	461a      	mov	r2, r3
 8011edc:	69bb      	ldr	r3, [r7, #24]
 8011ede:	801a      	strh	r2, [r3, #0]
  tcphdr->dest = lwip_htons(remote_port);
 8011ee0:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8011ee2:	4618      	mov	r0, r3
 8011ee4:	f7fa faa2 	bl	800c42c <lwip_htons>
 8011ee8:	4603      	mov	r3, r0
 8011eea:	461a      	mov	r2, r3
 8011eec:	69bb      	ldr	r3, [r7, #24]
 8011eee:	805a      	strh	r2, [r3, #2]
  tcphdr->seqno = lwip_htonl(seqno);
 8011ef0:	68f8      	ldr	r0, [r7, #12]
 8011ef2:	f7fa faa9 	bl	800c448 <lwip_htonl>
 8011ef6:	4602      	mov	r2, r0
 8011ef8:	69bb      	ldr	r3, [r7, #24]
 8011efa:	605a      	str	r2, [r3, #4]
  tcphdr->ackno = lwip_htonl(ackno);
 8011efc:	68b8      	ldr	r0, [r7, #8]
 8011efe:	f7fa faa3 	bl	800c448 <lwip_htonl>
 8011f02:	4602      	mov	r2, r0
 8011f04:	69bb      	ldr	r3, [r7, #24]
 8011f06:	609a      	str	r2, [r3, #8]
  TCPH_HDRLEN_FLAGS_SET(tcphdr, TCP_HLEN/4, TCP_RST | TCP_ACK);
 8011f08:	f245 0014 	movw	r0, #20500	; 0x5014
 8011f0c:	f7fa fa8e 	bl	800c42c <lwip_htons>
 8011f10:	4603      	mov	r3, r0
 8011f12:	461a      	mov	r2, r3
 8011f14:	69bb      	ldr	r3, [r7, #24]
 8011f16:	819a      	strh	r2, [r3, #12]
#if LWIP_WND_SCALE
  tcphdr->wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  tcphdr->wnd = PP_HTONS(TCP_WND);
 8011f18:	69bb      	ldr	r3, [r7, #24]
 8011f1a:	2200      	movs	r2, #0
 8011f1c:	f042 0208 	orr.w	r2, r2, #8
 8011f20:	739a      	strb	r2, [r3, #14]
 8011f22:	2200      	movs	r2, #0
 8011f24:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 8011f28:	73da      	strb	r2, [r3, #15]
#endif
  tcphdr->chksum = 0;
 8011f2a:	69bb      	ldr	r3, [r7, #24]
 8011f2c:	2200      	movs	r2, #0
 8011f2e:	741a      	strb	r2, [r3, #16]
 8011f30:	2200      	movs	r2, #0
 8011f32:	745a      	strb	r2, [r3, #17]
  tcphdr->urgp = 0;
 8011f34:	69bb      	ldr	r3, [r7, #24]
 8011f36:	2200      	movs	r2, #0
 8011f38:	749a      	strb	r2, [r3, #18]
 8011f3a:	2200      	movs	r2, #0
 8011f3c:	74da      	strb	r2, [r3, #19]

  TCP_STATS_INC(tcp.xmit);
  MIB2_STATS_INC(mib2.tcpoutrsts);

  netif = ip_route(local_ip, remote_ip);
 8011f3e:	6838      	ldr	r0, [r7, #0]
 8011f40:	f003 fe82 	bl	8015c48 <ip4_route>
 8011f44:	6178      	str	r0, [r7, #20]
  if (netif != NULL) {
 8011f46:	697b      	ldr	r3, [r7, #20]
 8011f48:	2b00      	cmp	r3, #0
 8011f4a:	d00b      	beq.n	8011f64 <tcp_rst+0xd0>
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        local_ip, remote_ip);
    }
#endif
    /* Send output with hardcoded TTL/HL since we have no access to the pcb */
    ip_output_if(p, local_ip, remote_ip, TCP_TTL, 0, IP_PROTO_TCP, netif);
 8011f4c:	697b      	ldr	r3, [r7, #20]
 8011f4e:	9302      	str	r3, [sp, #8]
 8011f50:	2306      	movs	r3, #6
 8011f52:	9301      	str	r3, [sp, #4]
 8011f54:	2300      	movs	r3, #0
 8011f56:	9300      	str	r3, [sp, #0]
 8011f58:	23ff      	movs	r3, #255	; 0xff
 8011f5a:	683a      	ldr	r2, [r7, #0]
 8011f5c:	6879      	ldr	r1, [r7, #4]
 8011f5e:	69f8      	ldr	r0, [r7, #28]
 8011f60:	f004 f838 	bl	8015fd4 <ip4_output_if>
  }
  pbuf_free(p);
 8011f64:	69f8      	ldr	r0, [r7, #28]
 8011f66:	f7fb fc03 	bl	800d770 <pbuf_free>
 8011f6a:	e000      	b.n	8011f6e <tcp_rst+0xda>
    return;
 8011f6c:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 8011f6e:	3720      	adds	r7, #32
 8011f70:	46bd      	mov	sp, r7
 8011f72:	bd80      	pop	{r7, pc}
 8011f74:	08019c1c 	.word	0x08019c1c
 8011f78:	08019c50 	.word	0x08019c50
 8011f7c:	08019c80 	.word	0x08019c80

08011f80 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 8011f80:	b580      	push	{r7, lr}
 8011f82:	b084      	sub	sp, #16
 8011f84:	af00      	add	r7, sp, #0
 8011f86:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  if (pcb->unacked == NULL) {
 8011f88:	687b      	ldr	r3, [r7, #4]
 8011f8a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011f8c:	2b00      	cmp	r3, #0
 8011f8e:	d029      	beq.n	8011fe4 <tcp_rexmit_rto+0x64>
    return;
  }

  /* Move all unacked segments to the head of the unsent queue */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next);
 8011f90:	687b      	ldr	r3, [r7, #4]
 8011f92:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011f94:	60fb      	str	r3, [r7, #12]
 8011f96:	e002      	b.n	8011f9e <tcp_rexmit_rto+0x1e>
 8011f98:	68fb      	ldr	r3, [r7, #12]
 8011f9a:	681b      	ldr	r3, [r3, #0]
 8011f9c:	60fb      	str	r3, [r7, #12]
 8011f9e:	68fb      	ldr	r3, [r7, #12]
 8011fa0:	681b      	ldr	r3, [r3, #0]
 8011fa2:	2b00      	cmp	r3, #0
 8011fa4:	d1f8      	bne.n	8011f98 <tcp_rexmit_rto+0x18>
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 8011fa6:	687b      	ldr	r3, [r7, #4]
 8011fa8:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8011faa:	68fb      	ldr	r3, [r7, #12]
 8011fac:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 8011fae:	687b      	ldr	r3, [r7, #4]
 8011fb0:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8011fb2:	687b      	ldr	r3, [r7, #4]
 8011fb4:	669a      	str	r2, [r3, #104]	; 0x68
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 8011fb6:	687b      	ldr	r3, [r7, #4]
 8011fb8:	2200      	movs	r2, #0
 8011fba:	66da      	str	r2, [r3, #108]	; 0x6c

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 8011fbc:	687b      	ldr	r3, [r7, #4]
 8011fbe:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8011fc2:	2bff      	cmp	r3, #255	; 0xff
 8011fc4:	d007      	beq.n	8011fd6 <tcp_rexmit_rto+0x56>
    ++pcb->nrtx;
 8011fc6:	687b      	ldr	r3, [r7, #4]
 8011fc8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8011fcc:	3301      	adds	r3, #1
 8011fce:	b2da      	uxtb	r2, r3
 8011fd0:	687b      	ldr	r3, [r7, #4]
 8011fd2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 8011fd6:	687b      	ldr	r3, [r7, #4]
 8011fd8:	2200      	movs	r2, #0
 8011fda:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission */
  tcp_output(pcb);
 8011fdc:	6878      	ldr	r0, [r7, #4]
 8011fde:	f7ff fccf 	bl	8011980 <tcp_output>
 8011fe2:	e000      	b.n	8011fe6 <tcp_rexmit_rto+0x66>
    return;
 8011fe4:	bf00      	nop
}
 8011fe6:	3710      	adds	r7, #16
 8011fe8:	46bd      	mov	sp, r7
 8011fea:	bd80      	pop	{r7, pc}

08011fec <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit(struct tcp_pcb *pcb)
{
 8011fec:	b590      	push	{r4, r7, lr}
 8011fee:	b085      	sub	sp, #20
 8011ff0:	af00      	add	r7, sp, #0
 8011ff2:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  if (pcb->unacked == NULL) {
 8011ff4:	687b      	ldr	r3, [r7, #4]
 8011ff6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011ff8:	2b00      	cmp	r3, #0
 8011ffa:	d043      	beq.n	8012084 <tcp_rexmit+0x98>
    return;
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  seg = pcb->unacked;
 8011ffc:	687b      	ldr	r3, [r7, #4]
 8011ffe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012000:	60bb      	str	r3, [r7, #8]
  pcb->unacked = seg->next;
 8012002:	68bb      	ldr	r3, [r7, #8]
 8012004:	681a      	ldr	r2, [r3, #0]
 8012006:	687b      	ldr	r3, [r7, #4]
 8012008:	66da      	str	r2, [r3, #108]	; 0x6c

  cur_seg = &(pcb->unsent);
 801200a:	687b      	ldr	r3, [r7, #4]
 801200c:	3368      	adds	r3, #104	; 0x68
 801200e:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8012010:	e002      	b.n	8012018 <tcp_rexmit+0x2c>
    TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
      cur_seg = &((*cur_seg)->next );
 8012012:	68fb      	ldr	r3, [r7, #12]
 8012014:	681b      	ldr	r3, [r3, #0]
 8012016:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8012018:	68fb      	ldr	r3, [r7, #12]
 801201a:	681b      	ldr	r3, [r3, #0]
 801201c:	2b00      	cmp	r3, #0
 801201e:	d011      	beq.n	8012044 <tcp_rexmit+0x58>
    TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8012020:	68fb      	ldr	r3, [r7, #12]
 8012022:	681b      	ldr	r3, [r3, #0]
 8012024:	68db      	ldr	r3, [r3, #12]
 8012026:	685b      	ldr	r3, [r3, #4]
 8012028:	4618      	mov	r0, r3
 801202a:	f7fa fa0d 	bl	800c448 <lwip_htonl>
 801202e:	4604      	mov	r4, r0
 8012030:	68bb      	ldr	r3, [r7, #8]
 8012032:	68db      	ldr	r3, [r3, #12]
 8012034:	685b      	ldr	r3, [r3, #4]
 8012036:	4618      	mov	r0, r3
 8012038:	f7fa fa06 	bl	800c448 <lwip_htonl>
 801203c:	4603      	mov	r3, r0
 801203e:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 8012040:	2b00      	cmp	r3, #0
 8012042:	dbe6      	blt.n	8012012 <tcp_rexmit+0x26>
  }
  seg->next = *cur_seg;
 8012044:	68fb      	ldr	r3, [r7, #12]
 8012046:	681a      	ldr	r2, [r3, #0]
 8012048:	68bb      	ldr	r3, [r7, #8]
 801204a:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 801204c:	68fb      	ldr	r3, [r7, #12]
 801204e:	68ba      	ldr	r2, [r7, #8]
 8012050:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 8012052:	68bb      	ldr	r3, [r7, #8]
 8012054:	681b      	ldr	r3, [r3, #0]
 8012056:	2b00      	cmp	r3, #0
 8012058:	d103      	bne.n	8012062 <tcp_rexmit+0x76>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 801205a:	687b      	ldr	r3, [r7, #4]
 801205c:	2200      	movs	r2, #0
 801205e:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 8012062:	687b      	ldr	r3, [r7, #4]
 8012064:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8012068:	2bff      	cmp	r3, #255	; 0xff
 801206a:	d007      	beq.n	801207c <tcp_rexmit+0x90>
    ++pcb->nrtx;
 801206c:	687b      	ldr	r3, [r7, #4]
 801206e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8012072:	3301      	adds	r3, #1
 8012074:	b2da      	uxtb	r2, r3
 8012076:	687b      	ldr	r3, [r7, #4]
 8012078:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 801207c:	687b      	ldr	r3, [r7, #4]
 801207e:	2200      	movs	r2, #0
 8012080:	635a      	str	r2, [r3, #52]	; 0x34
 8012082:	e000      	b.n	8012086 <tcp_rexmit+0x9a>
    return;
 8012084:	bf00      	nop

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
}
 8012086:	3714      	adds	r7, #20
 8012088:	46bd      	mov	sp, r7
 801208a:	bd90      	pop	{r4, r7, pc}

0801208c <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 801208c:	b580      	push	{r7, lr}
 801208e:	b082      	sub	sp, #8
 8012090:	af00      	add	r7, sp, #0
 8012092:	6078      	str	r0, [r7, #4]
  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 8012094:	687b      	ldr	r3, [r7, #4]
 8012096:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012098:	2b00      	cmp	r3, #0
 801209a:	d04a      	beq.n	8012132 <tcp_rexmit_fast+0xa6>
 801209c:	687b      	ldr	r3, [r7, #4]
 801209e:	7e9b      	ldrb	r3, [r3, #26]
 80120a0:	f003 0304 	and.w	r3, r3, #4
 80120a4:	2b00      	cmp	r3, #0
 80120a6:	d144      	bne.n	8012132 <tcp_rexmit_fast+0xa6>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    tcp_rexmit(pcb);
 80120a8:	6878      	ldr	r0, [r7, #4]
 80120aa:	f7ff ff9f 	bl	8011fec <tcp_rexmit>

    /* Set ssthresh to half of the minimum of the current
     * cwnd and the advertised window */
    pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 80120ae:	687b      	ldr	r3, [r7, #4]
 80120b0:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80120b4:	687b      	ldr	r3, [r7, #4]
 80120b6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80120ba:	429a      	cmp	r2, r3
 80120bc:	d207      	bcs.n	80120ce <tcp_rexmit_fast+0x42>
 80120be:	687b      	ldr	r3, [r7, #4]
 80120c0:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80120c4:	0fda      	lsrs	r2, r3, #31
 80120c6:	4413      	add	r3, r2
 80120c8:	105b      	asrs	r3, r3, #1
 80120ca:	b29b      	uxth	r3, r3
 80120cc:	e006      	b.n	80120dc <tcp_rexmit_fast+0x50>
 80120ce:	687b      	ldr	r3, [r7, #4]
 80120d0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80120d4:	0fda      	lsrs	r2, r3, #31
 80120d6:	4413      	add	r3, r2
 80120d8:	105b      	asrs	r3, r3, #1
 80120da:	b29b      	uxth	r3, r3
 80120dc:	687a      	ldr	r2, [r7, #4]
 80120de:	f8a2 304a 	strh.w	r3, [r2, #74]	; 0x4a

    /* The minimum value for ssthresh should be 2 MSS */
    if (pcb->ssthresh < (2U * pcb->mss)) {
 80120e2:	687b      	ldr	r3, [r7, #4]
 80120e4:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 80120e8:	461a      	mov	r2, r3
 80120ea:	687b      	ldr	r3, [r7, #4]
 80120ec:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80120ee:	005b      	lsls	r3, r3, #1
 80120f0:	429a      	cmp	r2, r3
 80120f2:	d206      	bcs.n	8012102 <tcp_rexmit_fast+0x76>
      LWIP_DEBUGF(TCP_FR_DEBUG,
                  ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                   " should be min 2 mss %"U16_F"...\n",
                   pcb->ssthresh, (u16_t)(2*pcb->mss)));
      pcb->ssthresh = 2*pcb->mss;
 80120f4:	687b      	ldr	r3, [r7, #4]
 80120f6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80120f8:	005b      	lsls	r3, r3, #1
 80120fa:	b29a      	uxth	r2, r3
 80120fc:	687b      	ldr	r3, [r7, #4]
 80120fe:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
    }

    pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 8012102:	687b      	ldr	r3, [r7, #4]
 8012104:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8012108:	687b      	ldr	r3, [r7, #4]
 801210a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801210c:	4619      	mov	r1, r3
 801210e:	0049      	lsls	r1, r1, #1
 8012110:	440b      	add	r3, r1
 8012112:	b29b      	uxth	r3, r3
 8012114:	4413      	add	r3, r2
 8012116:	b29a      	uxth	r2, r3
 8012118:	687b      	ldr	r3, [r7, #4]
 801211a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->flags |= TF_INFR;
 801211e:	687b      	ldr	r3, [r7, #4]
 8012120:	7e9b      	ldrb	r3, [r3, #26]
 8012122:	f043 0304 	orr.w	r3, r3, #4
 8012126:	b2da      	uxtb	r2, r3
 8012128:	687b      	ldr	r3, [r7, #4]
 801212a:	769a      	strb	r2, [r3, #26]

    /* Reset the retransmission timer to prevent immediate rto retransmissions */
    pcb->rtime = 0;
 801212c:	687b      	ldr	r3, [r7, #4]
 801212e:	2200      	movs	r2, #0
 8012130:	861a      	strh	r2, [r3, #48]	; 0x30
  }
}
 8012132:	bf00      	nop
 8012134:	3708      	adds	r7, #8
 8012136:	46bd      	mov	sp, r7
 8012138:	bd80      	pop	{r7, pc}

0801213a <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 801213a:	b580      	push	{r7, lr}
 801213c:	b08a      	sub	sp, #40	; 0x28
 801213e:	af04      	add	r7, sp, #16
 8012140:	6078      	str	r0, [r7, #4]
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, 0, 0, lwip_htonl(pcb->snd_nxt - 1));
 8012142:	687b      	ldr	r3, [r7, #4]
 8012144:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8012146:	3b01      	subs	r3, #1
 8012148:	4618      	mov	r0, r3
 801214a:	f7fa f97d 	bl	800c448 <lwip_htonl>
 801214e:	4603      	mov	r3, r0
 8012150:	2200      	movs	r2, #0
 8012152:	2100      	movs	r1, #0
 8012154:	6878      	ldr	r0, [r7, #4]
 8012156:	f7ff f977 	bl	8011448 <tcp_output_alloc_header>
 801215a:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 801215c:	693b      	ldr	r3, [r7, #16]
 801215e:	2b00      	cmp	r3, #0
 8012160:	d102      	bne.n	8012168 <tcp_keepalive+0x2e>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 8012162:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8012166:	e021      	b.n	80121ac <tcp_keepalive+0x72>
  }
  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 8012168:	687b      	ldr	r3, [r7, #4]
 801216a:	3304      	adds	r3, #4
 801216c:	4618      	mov	r0, r3
 801216e:	f003 fd6b 	bl	8015c48 <ip4_route>
 8012172:	60f8      	str	r0, [r7, #12]
  if (netif == NULL) {
 8012174:	68fb      	ldr	r3, [r7, #12]
 8012176:	2b00      	cmp	r3, #0
 8012178:	d102      	bne.n	8012180 <tcp_keepalive+0x46>
    err = ERR_RTE;
 801217a:	23fc      	movs	r3, #252	; 0xfc
 801217c:	75fb      	strb	r3, [r7, #23]
 801217e:	e010      	b.n	80121a2 <tcp_keepalive+0x68>
#endif /* CHECKSUM_GEN_TCP */
    TCP_STATS_INC(tcp.xmit);

    /* Send output to IP */
    NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
    err = ip_output_if(p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl, 0, IP_PROTO_TCP, netif);
 8012180:	6879      	ldr	r1, [r7, #4]
 8012182:	687b      	ldr	r3, [r7, #4]
 8012184:	1d1a      	adds	r2, r3, #4
 8012186:	687b      	ldr	r3, [r7, #4]
 8012188:	7a98      	ldrb	r0, [r3, #10]
 801218a:	68fb      	ldr	r3, [r7, #12]
 801218c:	9302      	str	r3, [sp, #8]
 801218e:	2306      	movs	r3, #6
 8012190:	9301      	str	r3, [sp, #4]
 8012192:	2300      	movs	r3, #0
 8012194:	9300      	str	r3, [sp, #0]
 8012196:	4603      	mov	r3, r0
 8012198:	6938      	ldr	r0, [r7, #16]
 801219a:	f003 ff1b 	bl	8015fd4 <ip4_output_if>
 801219e:	4603      	mov	r3, r0
 80121a0:	75fb      	strb	r3, [r7, #23]
    NETIF_SET_HWADDRHINT(netif, NULL);
  }
  pbuf_free(p);
 80121a2:	6938      	ldr	r0, [r7, #16]
 80121a4:	f7fb fae4 	bl	800d770 <pbuf_free>

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 80121a8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80121ac:	4618      	mov	r0, r3
 80121ae:	3718      	adds	r7, #24
 80121b0:	46bd      	mov	sp, r7
 80121b2:	bd80      	pop	{r7, pc}

080121b4 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 80121b4:	b590      	push	{r4, r7, lr}
 80121b6:	b08f      	sub	sp, #60	; 0x3c
 80121b8:	af04      	add	r7, sp, #16
 80121ba:	6078      	str	r0, [r7, #4]
  LWIP_DEBUGF(TCP_DEBUG,
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  seg = pcb->unacked;
 80121bc:	687b      	ldr	r3, [r7, #4]
 80121be:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80121c0:	623b      	str	r3, [r7, #32]

  if (seg == NULL) {
 80121c2:	6a3b      	ldr	r3, [r7, #32]
 80121c4:	2b00      	cmp	r3, #0
 80121c6:	d102      	bne.n	80121ce <tcp_zero_window_probe+0x1a>
    seg = pcb->unsent;
 80121c8:	687b      	ldr	r3, [r7, #4]
 80121ca:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80121cc:	623b      	str	r3, [r7, #32]
  }
  if (seg == NULL) {
 80121ce:	6a3b      	ldr	r3, [r7, #32]
 80121d0:	2b00      	cmp	r3, #0
 80121d2:	d101      	bne.n	80121d8 <tcp_zero_window_probe+0x24>
    /* nothing to send, zero window probe not needed */
    return ERR_OK;
 80121d4:	2300      	movs	r3, #0
 80121d6:	e085      	b.n	80122e4 <tcp_zero_window_probe+0x130>
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 80121d8:	6a3b      	ldr	r3, [r7, #32]
 80121da:	68db      	ldr	r3, [r3, #12]
 80121dc:	899b      	ldrh	r3, [r3, #12]
 80121de:	b29b      	uxth	r3, r3
 80121e0:	4618      	mov	r0, r3
 80121e2:	f7fa f923 	bl	800c42c <lwip_htons>
 80121e6:	4603      	mov	r3, r0
 80121e8:	f003 0301 	and.w	r3, r3, #1
 80121ec:	2b00      	cmp	r3, #0
 80121ee:	d005      	beq.n	80121fc <tcp_zero_window_probe+0x48>
 80121f0:	6a3b      	ldr	r3, [r7, #32]
 80121f2:	891b      	ldrh	r3, [r3, #8]
 80121f4:	2b00      	cmp	r3, #0
 80121f6:	d101      	bne.n	80121fc <tcp_zero_window_probe+0x48>
 80121f8:	2301      	movs	r3, #1
 80121fa:	e000      	b.n	80121fe <tcp_zero_window_probe+0x4a>
 80121fc:	2300      	movs	r3, #0
 80121fe:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 8012200:	7ffb      	ldrb	r3, [r7, #31]
 8012202:	2b00      	cmp	r3, #0
 8012204:	bf0c      	ite	eq
 8012206:	2301      	moveq	r3, #1
 8012208:	2300      	movne	r3, #0
 801220a:	b2db      	uxtb	r3, r3
 801220c:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, 0, len, seg->tcphdr->seqno);
 801220e:	6a3b      	ldr	r3, [r7, #32]
 8012210:	68db      	ldr	r3, [r3, #12]
 8012212:	685b      	ldr	r3, [r3, #4]
 8012214:	8bba      	ldrh	r2, [r7, #28]
 8012216:	2100      	movs	r1, #0
 8012218:	6878      	ldr	r0, [r7, #4]
 801221a:	f7ff f915 	bl	8011448 <tcp_output_alloc_header>
 801221e:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 8012220:	69bb      	ldr	r3, [r7, #24]
 8012222:	2b00      	cmp	r3, #0
 8012224:	d102      	bne.n	801222c <tcp_zero_window_probe+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 8012226:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801222a:	e05b      	b.n	80122e4 <tcp_zero_window_probe+0x130>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 801222c:	69bb      	ldr	r3, [r7, #24]
 801222e:	685b      	ldr	r3, [r3, #4]
 8012230:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 8012232:	7ffb      	ldrb	r3, [r7, #31]
 8012234:	2b00      	cmp	r3, #0
 8012236:	d00e      	beq.n	8012256 <tcp_zero_window_probe+0xa2>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 8012238:	697b      	ldr	r3, [r7, #20]
 801223a:	899b      	ldrh	r3, [r3, #12]
 801223c:	b29b      	uxth	r3, r3
 801223e:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8012242:	b29c      	uxth	r4, r3
 8012244:	2011      	movs	r0, #17
 8012246:	f7fa f8f1 	bl	800c42c <lwip_htons>
 801224a:	4603      	mov	r3, r0
 801224c:	4323      	orrs	r3, r4
 801224e:	b29a      	uxth	r2, r3
 8012250:	697b      	ldr	r3, [r7, #20]
 8012252:	819a      	strh	r2, [r3, #12]
 8012254:	e010      	b.n	8012278 <tcp_zero_window_probe+0xc4>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 8012256:	69bb      	ldr	r3, [r7, #24]
 8012258:	685b      	ldr	r3, [r3, #4]
 801225a:	3314      	adds	r3, #20
 801225c:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 801225e:	6a3b      	ldr	r3, [r7, #32]
 8012260:	6858      	ldr	r0, [r3, #4]
 8012262:	6a3b      	ldr	r3, [r7, #32]
 8012264:	685b      	ldr	r3, [r3, #4]
 8012266:	891a      	ldrh	r2, [r3, #8]
 8012268:	6a3b      	ldr	r3, [r7, #32]
 801226a:	891b      	ldrh	r3, [r3, #8]
 801226c:	1ad3      	subs	r3, r2, r3
 801226e:	b29b      	uxth	r3, r3
 8012270:	2201      	movs	r2, #1
 8012272:	6939      	ldr	r1, [r7, #16]
 8012274:	f7fb fc88 	bl	800db88 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 8012278:	6a3b      	ldr	r3, [r7, #32]
 801227a:	68db      	ldr	r3, [r3, #12]
 801227c:	685b      	ldr	r3, [r3, #4]
 801227e:	4618      	mov	r0, r3
 8012280:	f7fa f8e2 	bl	800c448 <lwip_htonl>
 8012284:	4603      	mov	r3, r0
 8012286:	3301      	adds	r3, #1
 8012288:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 801228a:	687b      	ldr	r3, [r7, #4]
 801228c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 801228e:	68fb      	ldr	r3, [r7, #12]
 8012290:	1ad3      	subs	r3, r2, r3
 8012292:	2b00      	cmp	r3, #0
 8012294:	da02      	bge.n	801229c <tcp_zero_window_probe+0xe8>
    pcb->snd_nxt = snd_nxt;
 8012296:	687b      	ldr	r3, [r7, #4]
 8012298:	68fa      	ldr	r2, [r7, #12]
 801229a:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 801229c:	687b      	ldr	r3, [r7, #4]
 801229e:	3304      	adds	r3, #4
 80122a0:	4618      	mov	r0, r3
 80122a2:	f003 fcd1 	bl	8015c48 <ip4_route>
 80122a6:	60b8      	str	r0, [r7, #8]
  if (netif == NULL) {
 80122a8:	68bb      	ldr	r3, [r7, #8]
 80122aa:	2b00      	cmp	r3, #0
 80122ac:	d103      	bne.n	80122b6 <tcp_zero_window_probe+0x102>
    err = ERR_RTE;
 80122ae:	23fc      	movs	r3, #252	; 0xfc
 80122b0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80122b4:	e011      	b.n	80122da <tcp_zero_window_probe+0x126>
#endif
    TCP_STATS_INC(tcp.xmit);

    /* Send output to IP */
    NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
    err = ip_output_if(p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 80122b6:	6879      	ldr	r1, [r7, #4]
 80122b8:	687b      	ldr	r3, [r7, #4]
 80122ba:	1d1a      	adds	r2, r3, #4
 80122bc:	687b      	ldr	r3, [r7, #4]
 80122be:	7a98      	ldrb	r0, [r3, #10]
 80122c0:	68bb      	ldr	r3, [r7, #8]
 80122c2:	9302      	str	r3, [sp, #8]
 80122c4:	2306      	movs	r3, #6
 80122c6:	9301      	str	r3, [sp, #4]
 80122c8:	2300      	movs	r3, #0
 80122ca:	9300      	str	r3, [sp, #0]
 80122cc:	4603      	mov	r3, r0
 80122ce:	69b8      	ldr	r0, [r7, #24]
 80122d0:	f003 fe80 	bl	8015fd4 <ip4_output_if>
 80122d4:	4603      	mov	r3, r0
 80122d6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      0, IP_PROTO_TCP, netif);
    NETIF_SET_HWADDRHINT(netif, NULL);
  }

  pbuf_free(p);
 80122da:	69b8      	ldr	r0, [r7, #24]
 80122dc:	f7fb fa48 	bl	800d770 <pbuf_free>

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 80122e0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 80122e4:	4618      	mov	r0, r3
 80122e6:	372c      	adds	r7, #44	; 0x2c
 80122e8:	46bd      	mov	sp, r7
 80122ea:	bd90      	pop	{r4, r7, pc}

080122ec <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 80122ec:	b580      	push	{r7, lr}
 80122ee:	b082      	sub	sp, #8
 80122f0:	af00      	add	r7, sp, #0
 80122f2:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 80122f4:	f7fb fcca 	bl	800dc8c <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 80122f8:	4b0a      	ldr	r3, [pc, #40]	; (8012324 <tcpip_tcp_timer+0x38>)
 80122fa:	681b      	ldr	r3, [r3, #0]
 80122fc:	2b00      	cmp	r3, #0
 80122fe:	d103      	bne.n	8012308 <tcpip_tcp_timer+0x1c>
 8012300:	4b09      	ldr	r3, [pc, #36]	; (8012328 <tcpip_tcp_timer+0x3c>)
 8012302:	681b      	ldr	r3, [r3, #0]
 8012304:	2b00      	cmp	r3, #0
 8012306:	d005      	beq.n	8012314 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8012308:	2200      	movs	r2, #0
 801230a:	4908      	ldr	r1, [pc, #32]	; (801232c <tcpip_tcp_timer+0x40>)
 801230c:	20fa      	movs	r0, #250	; 0xfa
 801230e:	f000 f86f 	bl	80123f0 <sys_timeout>
 8012312:	e002      	b.n	801231a <tcpip_tcp_timer+0x2e>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 8012314:	4b06      	ldr	r3, [pc, #24]	; (8012330 <tcpip_tcp_timer+0x44>)
 8012316:	2200      	movs	r2, #0
 8012318:	601a      	str	r2, [r3, #0]
  }
}
 801231a:	bf00      	nop
 801231c:	3708      	adds	r7, #8
 801231e:	46bd      	mov	sp, r7
 8012320:	bd80      	pop	{r7, pc}
 8012322:	bf00      	nop
 8012324:	2000b5b0 	.word	0x2000b5b0
 8012328:	2000b5c0 	.word	0x2000b5c0
 801232c:	080122ed 	.word	0x080122ed
 8012330:	20004bac 	.word	0x20004bac

08012334 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 8012334:	b580      	push	{r7, lr}
 8012336:	af00      	add	r7, sp, #0
  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 8012338:	4b0a      	ldr	r3, [pc, #40]	; (8012364 <tcp_timer_needed+0x30>)
 801233a:	681b      	ldr	r3, [r3, #0]
 801233c:	2b00      	cmp	r3, #0
 801233e:	d10f      	bne.n	8012360 <tcp_timer_needed+0x2c>
 8012340:	4b09      	ldr	r3, [pc, #36]	; (8012368 <tcp_timer_needed+0x34>)
 8012342:	681b      	ldr	r3, [r3, #0]
 8012344:	2b00      	cmp	r3, #0
 8012346:	d103      	bne.n	8012350 <tcp_timer_needed+0x1c>
 8012348:	4b08      	ldr	r3, [pc, #32]	; (801236c <tcp_timer_needed+0x38>)
 801234a:	681b      	ldr	r3, [r3, #0]
 801234c:	2b00      	cmp	r3, #0
 801234e:	d007      	beq.n	8012360 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 8012350:	4b04      	ldr	r3, [pc, #16]	; (8012364 <tcp_timer_needed+0x30>)
 8012352:	2201      	movs	r2, #1
 8012354:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8012356:	2200      	movs	r2, #0
 8012358:	4905      	ldr	r1, [pc, #20]	; (8012370 <tcp_timer_needed+0x3c>)
 801235a:	20fa      	movs	r0, #250	; 0xfa
 801235c:	f000 f848 	bl	80123f0 <sys_timeout>
  }
}
 8012360:	bf00      	nop
 8012362:	bd80      	pop	{r7, pc}
 8012364:	20004bac 	.word	0x20004bac
 8012368:	2000b5b0 	.word	0x2000b5b0
 801236c:	2000b5c0 	.word	0x2000b5c0
 8012370:	080122ed 	.word	0x080122ed

08012374 <cyclic_timer>:
 *
 * @param arg unused argument
 */
static void
cyclic_timer(void *arg)
{
 8012374:	b580      	push	{r7, lr}
 8012376:	b084      	sub	sp, #16
 8012378:	af00      	add	r7, sp, #0
 801237a:	6078      	str	r0, [r7, #4]
  const struct lwip_cyclic_timer* cyclic = (const struct lwip_cyclic_timer*)arg;
 801237c:	687b      	ldr	r3, [r7, #4]
 801237e:	60fb      	str	r3, [r7, #12]
#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 8012380:	68fb      	ldr	r3, [r7, #12]
 8012382:	685b      	ldr	r3, [r3, #4]
 8012384:	4798      	blx	r3
  sys_timeout(cyclic->interval_ms, cyclic_timer, arg);
 8012386:	68fb      	ldr	r3, [r7, #12]
 8012388:	681b      	ldr	r3, [r3, #0]
 801238a:	687a      	ldr	r2, [r7, #4]
 801238c:	4903      	ldr	r1, [pc, #12]	; (801239c <cyclic_timer+0x28>)
 801238e:	4618      	mov	r0, r3
 8012390:	f000 f82e 	bl	80123f0 <sys_timeout>
}
 8012394:	bf00      	nop
 8012396:	3710      	adds	r7, #16
 8012398:	46bd      	mov	sp, r7
 801239a:	bd80      	pop	{r7, pc}
 801239c:	08012375 	.word	0x08012375

080123a0 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 80123a0:	b580      	push	{r7, lr}
 80123a2:	b082      	sub	sp, #8
 80123a4:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 80123a6:	2301      	movs	r3, #1
 80123a8:	607b      	str	r3, [r7, #4]
 80123aa:	e00e      	b.n	80123ca <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, cyclic_timer, LWIP_CONST_CAST(void*, &lwip_cyclic_timers[i]));
 80123ac:	4a0d      	ldr	r2, [pc, #52]	; (80123e4 <sys_timeouts_init+0x44>)
 80123ae:	687b      	ldr	r3, [r7, #4]
 80123b0:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 80123b4:	687b      	ldr	r3, [r7, #4]
 80123b6:	00db      	lsls	r3, r3, #3
 80123b8:	4a0a      	ldr	r2, [pc, #40]	; (80123e4 <sys_timeouts_init+0x44>)
 80123ba:	4413      	add	r3, r2
 80123bc:	461a      	mov	r2, r3
 80123be:	490a      	ldr	r1, [pc, #40]	; (80123e8 <sys_timeouts_init+0x48>)
 80123c0:	f000 f816 	bl	80123f0 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 80123c4:	687b      	ldr	r3, [r7, #4]
 80123c6:	3301      	adds	r3, #1
 80123c8:	607b      	str	r3, [r7, #4]
 80123ca:	687b      	ldr	r3, [r7, #4]
 80123cc:	2b04      	cmp	r3, #4
 80123ce:	d9ed      	bls.n	80123ac <sys_timeouts_init+0xc>
  }

  /* Initialise timestamp for sys_check_timeouts */
  timeouts_last_time = sys_now();
 80123d0:	f7f4 fd8e 	bl	8006ef0 <sys_now>
 80123d4:	4602      	mov	r2, r0
 80123d6:	4b05      	ldr	r3, [pc, #20]	; (80123ec <sys_timeouts_init+0x4c>)
 80123d8:	601a      	str	r2, [r3, #0]
}
 80123da:	bf00      	nop
 80123dc:	3708      	adds	r7, #8
 80123de:	46bd      	mov	sp, r7
 80123e0:	bd80      	pop	{r7, pc}
 80123e2:	bf00      	nop
 80123e4:	0801ae6c 	.word	0x0801ae6c
 80123e8:	08012375 	.word	0x08012375
 80123ec:	20004ba8 	.word	0x20004ba8

080123f0 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char* handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 80123f0:	b580      	push	{r7, lr}
 80123f2:	b088      	sub	sp, #32
 80123f4:	af00      	add	r7, sp, #0
 80123f6:	60f8      	str	r0, [r7, #12]
 80123f8:	60b9      	str	r1, [r7, #8]
 80123fa:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;
  u32_t now, diff;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 80123fc:	200a      	movs	r0, #10
 80123fe:	f7fa fc03 	bl	800cc08 <memp_malloc>
 8012402:	6178      	str	r0, [r7, #20]
  if (timeout == NULL) {
 8012404:	697b      	ldr	r3, [r7, #20]
 8012406:	2b00      	cmp	r3, #0
 8012408:	d10a      	bne.n	8012420 <sys_timeout+0x30>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 801240a:	697b      	ldr	r3, [r7, #20]
 801240c:	2b00      	cmp	r3, #0
 801240e:	f040 8084 	bne.w	801251a <sys_timeout+0x12a>
 8012412:	4b44      	ldr	r3, [pc, #272]	; (8012524 <sys_timeout+0x134>)
 8012414:	22d4      	movs	r2, #212	; 0xd4
 8012416:	4944      	ldr	r1, [pc, #272]	; (8012528 <sys_timeout+0x138>)
 8012418:	4844      	ldr	r0, [pc, #272]	; (801252c <sys_timeout+0x13c>)
 801241a:	f005 fc77 	bl	8017d0c <iprintf>
    return;
 801241e:	e07c      	b.n	801251a <sys_timeout+0x12a>
  }

  now = sys_now();
 8012420:	f7f4 fd66 	bl	8006ef0 <sys_now>
 8012424:	6138      	str	r0, [r7, #16]
  if (next_timeout == NULL) {
 8012426:	4b42      	ldr	r3, [pc, #264]	; (8012530 <sys_timeout+0x140>)
 8012428:	681b      	ldr	r3, [r3, #0]
 801242a:	2b00      	cmp	r3, #0
 801242c:	d105      	bne.n	801243a <sys_timeout+0x4a>
    diff = 0;
 801242e:	2300      	movs	r3, #0
 8012430:	61bb      	str	r3, [r7, #24]
    timeouts_last_time = now;
 8012432:	4a40      	ldr	r2, [pc, #256]	; (8012534 <sys_timeout+0x144>)
 8012434:	693b      	ldr	r3, [r7, #16]
 8012436:	6013      	str	r3, [r2, #0]
 8012438:	e004      	b.n	8012444 <sys_timeout+0x54>
  } else {
    diff = now - timeouts_last_time;
 801243a:	4b3e      	ldr	r3, [pc, #248]	; (8012534 <sys_timeout+0x144>)
 801243c:	681b      	ldr	r3, [r3, #0]
 801243e:	693a      	ldr	r2, [r7, #16]
 8012440:	1ad3      	subs	r3, r2, r3
 8012442:	61bb      	str	r3, [r7, #24]
  }

  timeout->next = NULL;
 8012444:	697b      	ldr	r3, [r7, #20]
 8012446:	2200      	movs	r2, #0
 8012448:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 801244a:	697b      	ldr	r3, [r7, #20]
 801244c:	68ba      	ldr	r2, [r7, #8]
 801244e:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 8012450:	697b      	ldr	r3, [r7, #20]
 8012452:	687a      	ldr	r2, [r7, #4]
 8012454:	60da      	str	r2, [r3, #12]
  timeout->time = msecs + diff;
 8012456:	68fa      	ldr	r2, [r7, #12]
 8012458:	69bb      	ldr	r3, [r7, #24]
 801245a:	441a      	add	r2, r3
 801245c:	697b      	ldr	r3, [r7, #20]
 801245e:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p msecs=%"U32_F" handler=%s arg=%p\n",
    (void *)timeout, msecs, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 8012460:	4b33      	ldr	r3, [pc, #204]	; (8012530 <sys_timeout+0x140>)
 8012462:	681b      	ldr	r3, [r3, #0]
 8012464:	2b00      	cmp	r3, #0
 8012466:	d103      	bne.n	8012470 <sys_timeout+0x80>
    next_timeout = timeout;
 8012468:	4a31      	ldr	r2, [pc, #196]	; (8012530 <sys_timeout+0x140>)
 801246a:	697b      	ldr	r3, [r7, #20]
 801246c:	6013      	str	r3, [r2, #0]
    return;
 801246e:	e055      	b.n	801251c <sys_timeout+0x12c>
  }

  if (next_timeout->time > msecs) {
 8012470:	4b2f      	ldr	r3, [pc, #188]	; (8012530 <sys_timeout+0x140>)
 8012472:	681b      	ldr	r3, [r3, #0]
 8012474:	685b      	ldr	r3, [r3, #4]
 8012476:	68fa      	ldr	r2, [r7, #12]
 8012478:	429a      	cmp	r2, r3
 801247a:	d20f      	bcs.n	801249c <sys_timeout+0xac>
    next_timeout->time -= msecs;
 801247c:	4b2c      	ldr	r3, [pc, #176]	; (8012530 <sys_timeout+0x140>)
 801247e:	681b      	ldr	r3, [r3, #0]
 8012480:	6859      	ldr	r1, [r3, #4]
 8012482:	4b2b      	ldr	r3, [pc, #172]	; (8012530 <sys_timeout+0x140>)
 8012484:	681b      	ldr	r3, [r3, #0]
 8012486:	68fa      	ldr	r2, [r7, #12]
 8012488:	1a8a      	subs	r2, r1, r2
 801248a:	605a      	str	r2, [r3, #4]
    timeout->next = next_timeout;
 801248c:	4b28      	ldr	r3, [pc, #160]	; (8012530 <sys_timeout+0x140>)
 801248e:	681a      	ldr	r2, [r3, #0]
 8012490:	697b      	ldr	r3, [r7, #20]
 8012492:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 8012494:	4a26      	ldr	r2, [pc, #152]	; (8012530 <sys_timeout+0x140>)
 8012496:	697b      	ldr	r3, [r7, #20]
 8012498:	6013      	str	r3, [r2, #0]
 801249a:	e03f      	b.n	801251c <sys_timeout+0x12c>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 801249c:	4b24      	ldr	r3, [pc, #144]	; (8012530 <sys_timeout+0x140>)
 801249e:	681b      	ldr	r3, [r3, #0]
 80124a0:	61fb      	str	r3, [r7, #28]
 80124a2:	e036      	b.n	8012512 <sys_timeout+0x122>
      timeout->time -= t->time;
 80124a4:	697b      	ldr	r3, [r7, #20]
 80124a6:	685a      	ldr	r2, [r3, #4]
 80124a8:	69fb      	ldr	r3, [r7, #28]
 80124aa:	685b      	ldr	r3, [r3, #4]
 80124ac:	1ad2      	subs	r2, r2, r3
 80124ae:	697b      	ldr	r3, [r7, #20]
 80124b0:	605a      	str	r2, [r3, #4]
      if (t->next == NULL || t->next->time > timeout->time) {
 80124b2:	69fb      	ldr	r3, [r7, #28]
 80124b4:	681b      	ldr	r3, [r3, #0]
 80124b6:	2b00      	cmp	r3, #0
 80124b8:	d006      	beq.n	80124c8 <sys_timeout+0xd8>
 80124ba:	69fb      	ldr	r3, [r7, #28]
 80124bc:	681b      	ldr	r3, [r3, #0]
 80124be:	685a      	ldr	r2, [r3, #4]
 80124c0:	697b      	ldr	r3, [r7, #20]
 80124c2:	685b      	ldr	r3, [r3, #4]
 80124c4:	429a      	cmp	r2, r3
 80124c6:	d921      	bls.n	801250c <sys_timeout+0x11c>
        if (t->next != NULL) {
 80124c8:	69fb      	ldr	r3, [r7, #28]
 80124ca:	681b      	ldr	r3, [r3, #0]
 80124cc:	2b00      	cmp	r3, #0
 80124ce:	d009      	beq.n	80124e4 <sys_timeout+0xf4>
          t->next->time -= timeout->time;
 80124d0:	69fb      	ldr	r3, [r7, #28]
 80124d2:	681b      	ldr	r3, [r3, #0]
 80124d4:	6859      	ldr	r1, [r3, #4]
 80124d6:	697b      	ldr	r3, [r7, #20]
 80124d8:	685a      	ldr	r2, [r3, #4]
 80124da:	69fb      	ldr	r3, [r7, #28]
 80124dc:	681b      	ldr	r3, [r3, #0]
 80124de:	1a8a      	subs	r2, r1, r2
 80124e0:	605a      	str	r2, [r3, #4]
 80124e2:	e00b      	b.n	80124fc <sys_timeout+0x10c>
        } else if (timeout->time > msecs) {
 80124e4:	697b      	ldr	r3, [r7, #20]
 80124e6:	685b      	ldr	r3, [r3, #4]
 80124e8:	68fa      	ldr	r2, [r7, #12]
 80124ea:	429a      	cmp	r2, r3
 80124ec:	d206      	bcs.n	80124fc <sys_timeout+0x10c>
          /* If this is the case, 'timeouts_last_time' and 'now' differs too much.
             This can be due to sys_check_timeouts() not being called at the right
             times, but also when stopping in a breakpoint. Anyway, let's assume
             this is not wanted, so add the first timer's time instead of 'diff' */
          timeout->time = msecs + next_timeout->time;
 80124ee:	4b10      	ldr	r3, [pc, #64]	; (8012530 <sys_timeout+0x140>)
 80124f0:	681b      	ldr	r3, [r3, #0]
 80124f2:	685a      	ldr	r2, [r3, #4]
 80124f4:	68fb      	ldr	r3, [r7, #12]
 80124f6:	441a      	add	r2, r3
 80124f8:	697b      	ldr	r3, [r7, #20]
 80124fa:	605a      	str	r2, [r3, #4]
        }
        timeout->next = t->next;
 80124fc:	69fb      	ldr	r3, [r7, #28]
 80124fe:	681a      	ldr	r2, [r3, #0]
 8012500:	697b      	ldr	r3, [r7, #20]
 8012502:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 8012504:	69fb      	ldr	r3, [r7, #28]
 8012506:	697a      	ldr	r2, [r7, #20]
 8012508:	601a      	str	r2, [r3, #0]
        break;
 801250a:	e007      	b.n	801251c <sys_timeout+0x12c>
    for (t = next_timeout; t != NULL; t = t->next) {
 801250c:	69fb      	ldr	r3, [r7, #28]
 801250e:	681b      	ldr	r3, [r3, #0]
 8012510:	61fb      	str	r3, [r7, #28]
 8012512:	69fb      	ldr	r3, [r7, #28]
 8012514:	2b00      	cmp	r3, #0
 8012516:	d1c5      	bne.n	80124a4 <sys_timeout+0xb4>
 8012518:	e000      	b.n	801251c <sys_timeout+0x12c>
    return;
 801251a:	bf00      	nop
      }
    }
  }
}
 801251c:	3720      	adds	r7, #32
 801251e:	46bd      	mov	sp, r7
 8012520:	bd80      	pop	{r7, pc}
 8012522:	bf00      	nop
 8012524:	0801a060 	.word	0x0801a060
 8012528:	0801a094 	.word	0x0801a094
 801252c:	0801a0d4 	.word	0x0801a0d4
 8012530:	20004ba4 	.word	0x20004ba4
 8012534:	20004ba8 	.word	0x20004ba8

08012538 <sys_check_timeouts>:
#if !NO_SYS && !defined __DOXYGEN__
static
#endif /* !NO_SYS */
void
sys_check_timeouts(void)
{
 8012538:	b580      	push	{r7, lr}
 801253a:	b086      	sub	sp, #24
 801253c:	af00      	add	r7, sp, #0
  if (next_timeout) {
 801253e:	4b24      	ldr	r3, [pc, #144]	; (80125d0 <sys_check_timeouts+0x98>)
 8012540:	681b      	ldr	r3, [r3, #0]
 8012542:	2b00      	cmp	r3, #0
 8012544:	d03f      	beq.n	80125c6 <sys_check_timeouts+0x8e>
    sys_timeout_handler handler;
    void *arg;
    u8_t had_one;
    u32_t now;

    now = sys_now();
 8012546:	f7f4 fcd3 	bl	8006ef0 <sys_now>
 801254a:	60f8      	str	r0, [r7, #12]
    /* this cares for wraparounds */
    diff = now - timeouts_last_time;
 801254c:	4b21      	ldr	r3, [pc, #132]	; (80125d4 <sys_check_timeouts+0x9c>)
 801254e:	681b      	ldr	r3, [r3, #0]
 8012550:	68fa      	ldr	r2, [r7, #12]
 8012552:	1ad3      	subs	r3, r2, r3
 8012554:	617b      	str	r3, [r7, #20]
    do {
      PBUF_CHECK_FREE_OOSEQ();
      had_one = 0;
 8012556:	2300      	movs	r3, #0
 8012558:	74fb      	strb	r3, [r7, #19]
      tmptimeout = next_timeout;
 801255a:	4b1d      	ldr	r3, [pc, #116]	; (80125d0 <sys_check_timeouts+0x98>)
 801255c:	681b      	ldr	r3, [r3, #0]
 801255e:	60bb      	str	r3, [r7, #8]
      if (tmptimeout && (tmptimeout->time <= diff)) {
 8012560:	68bb      	ldr	r3, [r7, #8]
 8012562:	2b00      	cmp	r3, #0
 8012564:	d02c      	beq.n	80125c0 <sys_check_timeouts+0x88>
 8012566:	68bb      	ldr	r3, [r7, #8]
 8012568:	685b      	ldr	r3, [r3, #4]
 801256a:	697a      	ldr	r2, [r7, #20]
 801256c:	429a      	cmp	r2, r3
 801256e:	d327      	bcc.n	80125c0 <sys_check_timeouts+0x88>
        /* timeout has expired */
        had_one = 1;
 8012570:	2301      	movs	r3, #1
 8012572:	74fb      	strb	r3, [r7, #19]
        timeouts_last_time += tmptimeout->time;
 8012574:	68bb      	ldr	r3, [r7, #8]
 8012576:	685a      	ldr	r2, [r3, #4]
 8012578:	4b16      	ldr	r3, [pc, #88]	; (80125d4 <sys_check_timeouts+0x9c>)
 801257a:	681b      	ldr	r3, [r3, #0]
 801257c:	4413      	add	r3, r2
 801257e:	4a15      	ldr	r2, [pc, #84]	; (80125d4 <sys_check_timeouts+0x9c>)
 8012580:	6013      	str	r3, [r2, #0]
        diff -= tmptimeout->time;
 8012582:	68bb      	ldr	r3, [r7, #8]
 8012584:	685b      	ldr	r3, [r3, #4]
 8012586:	697a      	ldr	r2, [r7, #20]
 8012588:	1ad3      	subs	r3, r2, r3
 801258a:	617b      	str	r3, [r7, #20]
        next_timeout = tmptimeout->next;
 801258c:	68bb      	ldr	r3, [r7, #8]
 801258e:	681b      	ldr	r3, [r3, #0]
 8012590:	4a0f      	ldr	r2, [pc, #60]	; (80125d0 <sys_check_timeouts+0x98>)
 8012592:	6013      	str	r3, [r2, #0]
        handler = tmptimeout->h;
 8012594:	68bb      	ldr	r3, [r7, #8]
 8012596:	689b      	ldr	r3, [r3, #8]
 8012598:	607b      	str	r3, [r7, #4]
        arg = tmptimeout->arg;
 801259a:	68bb      	ldr	r3, [r7, #8]
 801259c:	68db      	ldr	r3, [r3, #12]
 801259e:	603b      	str	r3, [r7, #0]
        if (handler != NULL) {
          LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s arg=%p\n",
            tmptimeout->handler_name, arg));
        }
#endif /* LWIP_DEBUG_TIMERNAMES */
        memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 80125a0:	68b9      	ldr	r1, [r7, #8]
 80125a2:	200a      	movs	r0, #10
 80125a4:	f7fa fb82 	bl	800ccac <memp_free>
        if (handler != NULL) {
 80125a8:	687b      	ldr	r3, [r7, #4]
 80125aa:	2b00      	cmp	r3, #0
 80125ac:	d008      	beq.n	80125c0 <sys_check_timeouts+0x88>
#if !NO_SYS
          /* For LWIP_TCPIP_CORE_LOCKING, lock the core before calling the
             timeout handler function. */
          LOCK_TCPIP_CORE();
 80125ae:	480a      	ldr	r0, [pc, #40]	; (80125d8 <sys_check_timeouts+0xa0>)
 80125b0:	f004 fd7a 	bl	80170a8 <sys_mutex_lock>
#endif /* !NO_SYS */
          handler(arg);
 80125b4:	687b      	ldr	r3, [r7, #4]
 80125b6:	6838      	ldr	r0, [r7, #0]
 80125b8:	4798      	blx	r3
#if !NO_SYS
          UNLOCK_TCPIP_CORE();
 80125ba:	4807      	ldr	r0, [pc, #28]	; (80125d8 <sys_check_timeouts+0xa0>)
 80125bc:	f004 fd83 	bl	80170c6 <sys_mutex_unlock>
#endif /* !NO_SYS */
        }
        LWIP_TCPIP_THREAD_ALIVE();
      }
    /* repeat until all expired timers have been called */
    } while (had_one);
 80125c0:	7cfb      	ldrb	r3, [r7, #19]
 80125c2:	2b00      	cmp	r3, #0
 80125c4:	d1c7      	bne.n	8012556 <sys_check_timeouts+0x1e>
  }
}
 80125c6:	bf00      	nop
 80125c8:	3718      	adds	r7, #24
 80125ca:	46bd      	mov	sp, r7
 80125cc:	bd80      	pop	{r7, pc}
 80125ce:	bf00      	nop
 80125d0:	20004ba4 	.word	0x20004ba4
 80125d4:	20004ba8 	.word	0x20004ba8
 80125d8:	20007e7c 	.word	0x20007e7c

080125dc <sys_timeouts_sleeptime>:
#if !NO_SYS
static
#endif /* !NO_SYS */
u32_t
sys_timeouts_sleeptime(void)
{
 80125dc:	b580      	push	{r7, lr}
 80125de:	b082      	sub	sp, #8
 80125e0:	af00      	add	r7, sp, #0
  u32_t diff;
  if (next_timeout == NULL) {
 80125e2:	4b0f      	ldr	r3, [pc, #60]	; (8012620 <sys_timeouts_sleeptime+0x44>)
 80125e4:	681b      	ldr	r3, [r3, #0]
 80125e6:	2b00      	cmp	r3, #0
 80125e8:	d102      	bne.n	80125f0 <sys_timeouts_sleeptime+0x14>
    return 0xffffffff;
 80125ea:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80125ee:	e013      	b.n	8012618 <sys_timeouts_sleeptime+0x3c>
  }
  diff = sys_now() - timeouts_last_time;
 80125f0:	f7f4 fc7e 	bl	8006ef0 <sys_now>
 80125f4:	4602      	mov	r2, r0
 80125f6:	4b0b      	ldr	r3, [pc, #44]	; (8012624 <sys_timeouts_sleeptime+0x48>)
 80125f8:	681b      	ldr	r3, [r3, #0]
 80125fa:	1ad3      	subs	r3, r2, r3
 80125fc:	607b      	str	r3, [r7, #4]
  if (diff > next_timeout->time) {
 80125fe:	4b08      	ldr	r3, [pc, #32]	; (8012620 <sys_timeouts_sleeptime+0x44>)
 8012600:	681b      	ldr	r3, [r3, #0]
 8012602:	685b      	ldr	r3, [r3, #4]
 8012604:	687a      	ldr	r2, [r7, #4]
 8012606:	429a      	cmp	r2, r3
 8012608:	d901      	bls.n	801260e <sys_timeouts_sleeptime+0x32>
    return 0;
 801260a:	2300      	movs	r3, #0
 801260c:	e004      	b.n	8012618 <sys_timeouts_sleeptime+0x3c>
  } else {
    return next_timeout->time - diff;
 801260e:	4b04      	ldr	r3, [pc, #16]	; (8012620 <sys_timeouts_sleeptime+0x44>)
 8012610:	681b      	ldr	r3, [r3, #0]
 8012612:	685a      	ldr	r2, [r3, #4]
 8012614:	687b      	ldr	r3, [r7, #4]
 8012616:	1ad3      	subs	r3, r2, r3
  }
}
 8012618:	4618      	mov	r0, r3
 801261a:	3708      	adds	r7, #8
 801261c:	46bd      	mov	sp, r7
 801261e:	bd80      	pop	{r7, pc}
 8012620:	20004ba4 	.word	0x20004ba4
 8012624:	20004ba8 	.word	0x20004ba8

08012628 <sys_timeouts_mbox_fetch>:
 * @param mbox the mbox to fetch the message from
 * @param msg the place to store the message
 */
void
sys_timeouts_mbox_fetch(sys_mbox_t *mbox, void **msg)
{
 8012628:	b580      	push	{r7, lr}
 801262a:	b084      	sub	sp, #16
 801262c:	af00      	add	r7, sp, #0
 801262e:	6078      	str	r0, [r7, #4]
 8012630:	6039      	str	r1, [r7, #0]
  u32_t sleeptime;

again:
  if (!next_timeout) {
 8012632:	4b0f      	ldr	r3, [pc, #60]	; (8012670 <sys_timeouts_mbox_fetch+0x48>)
 8012634:	681b      	ldr	r3, [r3, #0]
 8012636:	2b00      	cmp	r3, #0
 8012638:	d105      	bne.n	8012646 <sys_timeouts_mbox_fetch+0x1e>
    sys_arch_mbox_fetch(mbox, msg, 0);
 801263a:	2200      	movs	r2, #0
 801263c:	6839      	ldr	r1, [r7, #0]
 801263e:	6878      	ldr	r0, [r7, #4]
 8012640:	f004 fccd 	bl	8016fde <sys_arch_mbox_fetch>
    return;
 8012644:	e011      	b.n	801266a <sys_timeouts_mbox_fetch+0x42>
  }

  sleeptime = sys_timeouts_sleeptime();
 8012646:	f7ff ffc9 	bl	80125dc <sys_timeouts_sleeptime>
 801264a:	60f8      	str	r0, [r7, #12]
  if (sleeptime == 0 || sys_arch_mbox_fetch(mbox, msg, sleeptime) == SYS_ARCH_TIMEOUT) {
 801264c:	68fb      	ldr	r3, [r7, #12]
 801264e:	2b00      	cmp	r3, #0
 8012650:	d008      	beq.n	8012664 <sys_timeouts_mbox_fetch+0x3c>
 8012652:	68fa      	ldr	r2, [r7, #12]
 8012654:	6839      	ldr	r1, [r7, #0]
 8012656:	6878      	ldr	r0, [r7, #4]
 8012658:	f004 fcc1 	bl	8016fde <sys_arch_mbox_fetch>
 801265c:	4603      	mov	r3, r0
 801265e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8012662:	d102      	bne.n	801266a <sys_timeouts_mbox_fetch+0x42>
    /* If a SYS_ARCH_TIMEOUT value is returned, a timeout occurred
       before a message could be fetched. */
    sys_check_timeouts();
 8012664:	f7ff ff68 	bl	8012538 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 8012668:	e7e3      	b.n	8012632 <sys_timeouts_mbox_fetch+0xa>
  }
}
 801266a:	3710      	adds	r7, #16
 801266c:	46bd      	mov	sp, r7
 801266e:	bd80      	pop	{r7, pc}
 8012670:	20004ba4 	.word	0x20004ba4

08012674 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 8012674:	b480      	push	{r7}
 8012676:	af00      	add	r7, sp, #0
#if LWIP_RANDOMIZE_INITIAL_LOCAL_PORTS && defined(LWIP_RAND)
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
#endif /* LWIP_RANDOMIZE_INITIAL_LOCAL_PORTS && defined(LWIP_RAND) */
}
 8012678:	bf00      	nop
 801267a:	46bd      	mov	sp, r7
 801267c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012680:	4770      	bx	lr
	...

08012684 <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 8012684:	b480      	push	{r7}
 8012686:	b083      	sub	sp, #12
 8012688:	af00      	add	r7, sp, #0
  u16_t n = 0;
 801268a:	2300      	movs	r3, #0
 801268c:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 801268e:	4b17      	ldr	r3, [pc, #92]	; (80126ec <udp_new_port+0x68>)
 8012690:	881b      	ldrh	r3, [r3, #0]
 8012692:	1c5a      	adds	r2, r3, #1
 8012694:	b291      	uxth	r1, r2
 8012696:	4a15      	ldr	r2, [pc, #84]	; (80126ec <udp_new_port+0x68>)
 8012698:	8011      	strh	r1, [r2, #0]
 801269a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801269e:	4293      	cmp	r3, r2
 80126a0:	d103      	bne.n	80126aa <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 80126a2:	4b12      	ldr	r3, [pc, #72]	; (80126ec <udp_new_port+0x68>)
 80126a4:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 80126a8:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 80126aa:	4b11      	ldr	r3, [pc, #68]	; (80126f0 <udp_new_port+0x6c>)
 80126ac:	681b      	ldr	r3, [r3, #0]
 80126ae:	603b      	str	r3, [r7, #0]
 80126b0:	e011      	b.n	80126d6 <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 80126b2:	683b      	ldr	r3, [r7, #0]
 80126b4:	8a5a      	ldrh	r2, [r3, #18]
 80126b6:	4b0d      	ldr	r3, [pc, #52]	; (80126ec <udp_new_port+0x68>)
 80126b8:	881b      	ldrh	r3, [r3, #0]
 80126ba:	429a      	cmp	r2, r3
 80126bc:	d108      	bne.n	80126d0 <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 80126be:	88fb      	ldrh	r3, [r7, #6]
 80126c0:	3301      	adds	r3, #1
 80126c2:	80fb      	strh	r3, [r7, #6]
 80126c4:	88fb      	ldrh	r3, [r7, #6]
 80126c6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80126ca:	d3e0      	bcc.n	801268e <udp_new_port+0xa>
        return 0;
 80126cc:	2300      	movs	r3, #0
 80126ce:	e007      	b.n	80126e0 <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 80126d0:	683b      	ldr	r3, [r7, #0]
 80126d2:	68db      	ldr	r3, [r3, #12]
 80126d4:	603b      	str	r3, [r7, #0]
 80126d6:	683b      	ldr	r3, [r7, #0]
 80126d8:	2b00      	cmp	r3, #0
 80126da:	d1ea      	bne.n	80126b2 <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 80126dc:	4b03      	ldr	r3, [pc, #12]	; (80126ec <udp_new_port+0x68>)
 80126de:	881b      	ldrh	r3, [r3, #0]
}
 80126e0:	4618      	mov	r0, r3
 80126e2:	370c      	adds	r7, #12
 80126e4:	46bd      	mov	sp, r7
 80126e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80126ea:	4770      	bx	lr
 80126ec:	20000120 	.word	0x20000120
 80126f0:	2000b5c8 	.word	0x2000b5c8

080126f4 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 80126f4:	b480      	push	{r7}
 80126f6:	b085      	sub	sp, #20
 80126f8:	af00      	add	r7, sp, #0
 80126fa:	60f8      	str	r0, [r7, #12]
 80126fc:	60b9      	str	r1, [r7, #8]
 80126fe:	4613      	mov	r3, r2
 8012700:	71fb      	strb	r3, [r7, #7]
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 8012702:	79fb      	ldrb	r3, [r7, #7]
 8012704:	2b00      	cmp	r3, #0
 8012706:	d018      	beq.n	801273a <udp_input_local_match+0x46>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8012708:	68fb      	ldr	r3, [r7, #12]
 801270a:	2b00      	cmp	r3, #0
 801270c:	d013      	beq.n	8012736 <udp_input_local_match+0x42>
 801270e:	68fb      	ldr	r3, [r7, #12]
 8012710:	681b      	ldr	r3, [r3, #0]
 8012712:	2b00      	cmp	r3, #0
 8012714:	d00f      	beq.n	8012736 <udp_input_local_match+0x42>
          ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8012716:	4b14      	ldr	r3, [pc, #80]	; (8012768 <udp_input_local_match+0x74>)
 8012718:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801271a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801271e:	d00a      	beq.n	8012736 <udp_input_local_match+0x42>
           ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 8012720:	68fb      	ldr	r3, [r7, #12]
 8012722:	681a      	ldr	r2, [r3, #0]
 8012724:	4b10      	ldr	r3, [pc, #64]	; (8012768 <udp_input_local_match+0x74>)
 8012726:	695b      	ldr	r3, [r3, #20]
 8012728:	405a      	eors	r2, r3
 801272a:	68bb      	ldr	r3, [r7, #8]
 801272c:	3308      	adds	r3, #8
 801272e:	681b      	ldr	r3, [r3, #0]
 8012730:	4013      	ands	r3, r2
          ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8012732:	2b00      	cmp	r3, #0
 8012734:	d110      	bne.n	8012758 <udp_input_local_match+0x64>
          return 1;
 8012736:	2301      	movs	r3, #1
 8012738:	e00f      	b.n	801275a <udp_input_local_match+0x66>
        }
      }
    } else
#endif /* LWIP_IPV4 */
    /* Handle IPv4 and IPv6: all or exact match */
    if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 801273a:	68fb      	ldr	r3, [r7, #12]
 801273c:	2b00      	cmp	r3, #0
 801273e:	d009      	beq.n	8012754 <udp_input_local_match+0x60>
 8012740:	68fb      	ldr	r3, [r7, #12]
 8012742:	681b      	ldr	r3, [r3, #0]
 8012744:	2b00      	cmp	r3, #0
 8012746:	d005      	beq.n	8012754 <udp_input_local_match+0x60>
 8012748:	68fb      	ldr	r3, [r7, #12]
 801274a:	681a      	ldr	r2, [r3, #0]
 801274c:	4b06      	ldr	r3, [pc, #24]	; (8012768 <udp_input_local_match+0x74>)
 801274e:	695b      	ldr	r3, [r3, #20]
 8012750:	429a      	cmp	r2, r3
 8012752:	d101      	bne.n	8012758 <udp_input_local_match+0x64>
      return 1;
 8012754:	2301      	movs	r3, #1
 8012756:	e000      	b.n	801275a <udp_input_local_match+0x66>
    }
  }

  return 0;
 8012758:	2300      	movs	r3, #0
}
 801275a:	4618      	mov	r0, r3
 801275c:	3714      	adds	r7, #20
 801275e:	46bd      	mov	sp, r7
 8012760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012764:	4770      	bx	lr
 8012766:	bf00      	nop
 8012768:	20007e80 	.word	0x20007e80

0801276c <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 801276c:	b590      	push	{r4, r7, lr}
 801276e:	b08d      	sub	sp, #52	; 0x34
 8012770:	af02      	add	r7, sp, #8
 8012772:	6078      	str	r0, [r7, #4]
 8012774:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 8012776:	2300      	movs	r3, #0
 8012778:	76fb      	strb	r3, [r7, #27]
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 801277a:	687b      	ldr	r3, [r7, #4]
 801277c:	895b      	ldrh	r3, [r3, #10]
 801277e:	2b07      	cmp	r3, #7
 8012780:	d803      	bhi.n	801278a <udp_input+0x1e>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 8012782:	6878      	ldr	r0, [r7, #4]
 8012784:	f7fa fff4 	bl	800d770 <pbuf_free>
    goto end;
 8012788:	e0c6      	b.n	8012918 <udp_input+0x1ac>
  }

  udphdr = (struct udp_hdr *)p->payload;
 801278a:	687b      	ldr	r3, [r7, #4]
 801278c:	685b      	ldr	r3, [r3, #4]
 801278e:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 8012790:	4b63      	ldr	r3, [pc, #396]	; (8012920 <udp_input+0x1b4>)
 8012792:	695a      	ldr	r2, [r3, #20]
 8012794:	4b62      	ldr	r3, [pc, #392]	; (8012920 <udp_input+0x1b4>)
 8012796:	681b      	ldr	r3, [r3, #0]
 8012798:	4619      	mov	r1, r3
 801279a:	4610      	mov	r0, r2
 801279c:	f003 fcec 	bl	8016178 <ip4_addr_isbroadcast_u32>
 80127a0:	4603      	mov	r3, r0
 80127a2:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 80127a4:	697b      	ldr	r3, [r7, #20]
 80127a6:	881b      	ldrh	r3, [r3, #0]
 80127a8:	b29b      	uxth	r3, r3
 80127aa:	4618      	mov	r0, r3
 80127ac:	f7f9 fe3e 	bl	800c42c <lwip_htons>
 80127b0:	4603      	mov	r3, r0
 80127b2:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 80127b4:	697b      	ldr	r3, [r7, #20]
 80127b6:	885b      	ldrh	r3, [r3, #2]
 80127b8:	b29b      	uxth	r3, r3
 80127ba:	4618      	mov	r0, r3
 80127bc:	f7f9 fe36 	bl	800c42c <lwip_htons>
 80127c0:	4603      	mov	r3, r0
 80127c2:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print(UDP_DEBUG, ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print(UDP_DEBUG, ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 80127c4:	2300      	movs	r3, #0
 80127c6:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 80127c8:	2300      	movs	r3, #0
 80127ca:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 80127cc:	2300      	movs	r3, #0
 80127ce:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 80127d0:	4b54      	ldr	r3, [pc, #336]	; (8012924 <udp_input+0x1b8>)
 80127d2:	681b      	ldr	r3, [r3, #0]
 80127d4:	627b      	str	r3, [r7, #36]	; 0x24
 80127d6:	e03b      	b.n	8012850 <udp_input+0xe4>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print(UDP_DEBUG, &pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 80127d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80127da:	8a5b      	ldrh	r3, [r3, #18]
 80127dc:	89fa      	ldrh	r2, [r7, #14]
 80127de:	429a      	cmp	r2, r3
 80127e0:	d131      	bne.n	8012846 <udp_input+0xda>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 80127e2:	7cfb      	ldrb	r3, [r7, #19]
 80127e4:	461a      	mov	r2, r3
 80127e6:	6839      	ldr	r1, [r7, #0]
 80127e8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80127ea:	f7ff ff83 	bl	80126f4 <udp_input_local_match>
 80127ee:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 80127f0:	2b00      	cmp	r3, #0
 80127f2:	d028      	beq.n	8012846 <udp_input+0xda>
      if (((pcb->flags & UDP_FLAGS_CONNECTED) == 0) &&
 80127f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80127f6:	7c1b      	ldrb	r3, [r3, #16]
 80127f8:	f003 0304 	and.w	r3, r3, #4
 80127fc:	2b00      	cmp	r3, #0
 80127fe:	d104      	bne.n	801280a <udp_input+0x9e>
 8012800:	69fb      	ldr	r3, [r7, #28]
 8012802:	2b00      	cmp	r3, #0
 8012804:	d101      	bne.n	801280a <udp_input+0x9e>
          /* prefer specific IPs over cath-all */
          || !ip_addr_isany(&pcb->local_ip)
#endif /* SO_REUSE */
          )) {
        /* the first unconnected matching PCB */
        uncon_pcb = pcb;
 8012806:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012808:	61fb      	str	r3, [r7, #28]
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 801280a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801280c:	8a9b      	ldrh	r3, [r3, #20]
 801280e:	8a3a      	ldrh	r2, [r7, #16]
 8012810:	429a      	cmp	r2, r3
 8012812:	d118      	bne.n	8012846 <udp_input+0xda>
          (ip_addr_isany_val(pcb->remote_ip) ||
 8012814:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012816:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 8012818:	2b00      	cmp	r3, #0
 801281a:	d005      	beq.n	8012828 <udp_input+0xbc>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 801281c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801281e:	685a      	ldr	r2, [r3, #4]
 8012820:	4b3f      	ldr	r3, [pc, #252]	; (8012920 <udp_input+0x1b4>)
 8012822:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 8012824:	429a      	cmp	r2, r3
 8012826:	d10e      	bne.n	8012846 <udp_input+0xda>
        /* the first fully matching PCB */
        if (prev != NULL) {
 8012828:	6a3b      	ldr	r3, [r7, #32]
 801282a:	2b00      	cmp	r3, #0
 801282c:	d014      	beq.n	8012858 <udp_input+0xec>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 801282e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012830:	68da      	ldr	r2, [r3, #12]
 8012832:	6a3b      	ldr	r3, [r7, #32]
 8012834:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 8012836:	4b3b      	ldr	r3, [pc, #236]	; (8012924 <udp_input+0x1b8>)
 8012838:	681a      	ldr	r2, [r3, #0]
 801283a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801283c:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 801283e:	4a39      	ldr	r2, [pc, #228]	; (8012924 <udp_input+0x1b8>)
 8012840:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012842:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 8012844:	e008      	b.n	8012858 <udp_input+0xec>
      }
    }

    prev = pcb;
 8012846:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012848:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801284a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801284c:	68db      	ldr	r3, [r3, #12]
 801284e:	627b      	str	r3, [r7, #36]	; 0x24
 8012850:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012852:	2b00      	cmp	r3, #0
 8012854:	d1c0      	bne.n	80127d8 <udp_input+0x6c>
 8012856:	e000      	b.n	801285a <udp_input+0xee>
        break;
 8012858:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 801285a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801285c:	2b00      	cmp	r3, #0
 801285e:	d101      	bne.n	8012864 <udp_input+0xf8>
    pcb = uncon_pcb;
 8012860:	69fb      	ldr	r3, [r7, #28]
 8012862:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 8012864:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012866:	2b00      	cmp	r3, #0
 8012868:	d002      	beq.n	8012870 <udp_input+0x104>
    for_us = 1;
 801286a:	2301      	movs	r3, #1
 801286c:	76fb      	strb	r3, [r7, #27]
 801286e:	e00a      	b.n	8012886 <udp_input+0x11a>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 8012870:	683b      	ldr	r3, [r7, #0]
 8012872:	3304      	adds	r3, #4
 8012874:	681a      	ldr	r2, [r3, #0]
 8012876:	4b2a      	ldr	r3, [pc, #168]	; (8012920 <udp_input+0x1b4>)
 8012878:	695b      	ldr	r3, [r3, #20]
 801287a:	429a      	cmp	r2, r3
 801287c:	bf0c      	ite	eq
 801287e:	2301      	moveq	r3, #1
 8012880:	2300      	movne	r3, #0
 8012882:	b2db      	uxtb	r3, r3
 8012884:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 8012886:	7efb      	ldrb	r3, [r7, #27]
 8012888:	2b00      	cmp	r3, #0
 801288a:	d042      	beq.n	8012912 <udp_input+0x1a6>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_header(p, -UDP_HLEN)) {
 801288c:	f06f 0107 	mvn.w	r1, #7
 8012890:	6878      	ldr	r0, [r7, #4]
 8012892:	f7fa ff49 	bl	800d728 <pbuf_header>
 8012896:	4603      	mov	r3, r0
 8012898:	2b00      	cmp	r3, #0
 801289a:	d00a      	beq.n	80128b2 <udp_input+0x146>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_header failed\n", 0);
 801289c:	4b22      	ldr	r3, [pc, #136]	; (8012928 <udp_input+0x1bc>)
 801289e:	f240 1255 	movw	r2, #341	; 0x155
 80128a2:	4922      	ldr	r1, [pc, #136]	; (801292c <udp_input+0x1c0>)
 80128a4:	4822      	ldr	r0, [pc, #136]	; (8012930 <udp_input+0x1c4>)
 80128a6:	f005 fa31 	bl	8017d0c <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 80128aa:	6878      	ldr	r0, [r7, #4]
 80128ac:	f7fa ff60 	bl	800d770 <pbuf_free>
      goto end;
 80128b0:	e032      	b.n	8012918 <udp_input+0x1ac>
    }

    if (pcb != NULL) {
 80128b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80128b4:	2b00      	cmp	r3, #0
 80128b6:	d012      	beq.n	80128de <udp_input+0x172>
          pbuf_header(p, -hdrs_len);
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 80128b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80128ba:	699b      	ldr	r3, [r3, #24]
 80128bc:	2b00      	cmp	r3, #0
 80128be:	d00a      	beq.n	80128d6 <udp_input+0x16a>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 80128c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80128c2:	699c      	ldr	r4, [r3, #24]
 80128c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80128c6:	69d8      	ldr	r0, [r3, #28]
 80128c8:	8a3b      	ldrh	r3, [r7, #16]
 80128ca:	9300      	str	r3, [sp, #0]
 80128cc:	4b19      	ldr	r3, [pc, #100]	; (8012934 <udp_input+0x1c8>)
 80128ce:	687a      	ldr	r2, [r7, #4]
 80128d0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80128d2:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 80128d4:	e021      	b.n	801291a <udp_input+0x1ae>
        pbuf_free(p);
 80128d6:	6878      	ldr	r0, [r7, #4]
 80128d8:	f7fa ff4a 	bl	800d770 <pbuf_free>
        goto end;
 80128dc:	e01c      	b.n	8012918 <udp_input+0x1ac>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 80128de:	7cfb      	ldrb	r3, [r7, #19]
 80128e0:	2b00      	cmp	r3, #0
 80128e2:	d112      	bne.n	801290a <udp_input+0x19e>
 80128e4:	4b0e      	ldr	r3, [pc, #56]	; (8012920 <udp_input+0x1b4>)
 80128e6:	695b      	ldr	r3, [r3, #20]
 80128e8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80128ec:	2be0      	cmp	r3, #224	; 0xe0
 80128ee:	d00c      	beq.n	801290a <udp_input+0x19e>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 80128f0:	4b0b      	ldr	r3, [pc, #44]	; (8012920 <udp_input+0x1b4>)
 80128f2:	899b      	ldrh	r3, [r3, #12]
 80128f4:	3308      	adds	r3, #8
 80128f6:	b29b      	uxth	r3, r3
 80128f8:	b21b      	sxth	r3, r3
 80128fa:	4619      	mov	r1, r3
 80128fc:	6878      	ldr	r0, [r7, #4]
 80128fe:	f7fa ff25 	bl	800d74c <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 8012902:	2103      	movs	r1, #3
 8012904:	6878      	ldr	r0, [r7, #4]
 8012906:	f003 f917 	bl	8015b38 <icmp_dest_unreach>
      pbuf_free(p);
 801290a:	6878      	ldr	r0, [r7, #4]
 801290c:	f7fa ff30 	bl	800d770 <pbuf_free>
  return;
 8012910:	e003      	b.n	801291a <udp_input+0x1ae>
    pbuf_free(p);
 8012912:	6878      	ldr	r0, [r7, #4]
 8012914:	f7fa ff2c 	bl	800d770 <pbuf_free>
  return;
 8012918:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 801291a:	372c      	adds	r7, #44	; 0x2c
 801291c:	46bd      	mov	sp, r7
 801291e:	bd90      	pop	{r4, r7, pc}
 8012920:	20007e80 	.word	0x20007e80
 8012924:	2000b5c8 	.word	0x2000b5c8
 8012928:	0801a0fc 	.word	0x0801a0fc
 801292c:	0801a12c 	.word	0x0801a12c
 8012930:	0801a140 	.word	0x0801a140
 8012934:	20007e90 	.word	0x20007e90

08012938 <udp_sendto_if>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto_if(struct udp_pcb *pcb, struct pbuf *p,
  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif)
{
 8012938:	b580      	push	{r7, lr}
 801293a:	b088      	sub	sp, #32
 801293c:	af02      	add	r7, sp, #8
 801293e:	60f8      	str	r0, [r7, #12]
 8012940:	60b9      	str	r1, [r7, #8]
 8012942:	607a      	str	r2, [r7, #4]
 8012944:	807b      	strh	r3, [r7, #2]
                     u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  const ip_addr_t *src_ip;

  if ((pcb == NULL) || (dst_ip == NULL) || !IP_ADDR_PCB_VERSION_MATCH(pcb, dst_ip)) {
 8012946:	68fb      	ldr	r3, [r7, #12]
 8012948:	2b00      	cmp	r3, #0
 801294a:	d002      	beq.n	8012952 <udp_sendto_if+0x1a>
 801294c:	687b      	ldr	r3, [r7, #4]
 801294e:	2b00      	cmp	r3, #0
 8012950:	d102      	bne.n	8012958 <udp_sendto_if+0x20>
    return ERR_VAL;
 8012952:	f06f 0305 	mvn.w	r3, #5
 8012956:	e028      	b.n	80129aa <udp_sendto_if+0x72>
#endif /* LWIP_IPV6 */
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
  if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8012958:	68fb      	ldr	r3, [r7, #12]
 801295a:	2b00      	cmp	r3, #0
 801295c:	d009      	beq.n	8012972 <udp_sendto_if+0x3a>
 801295e:	68fb      	ldr	r3, [r7, #12]
 8012960:	681b      	ldr	r3, [r3, #0]
 8012962:	2b00      	cmp	r3, #0
 8012964:	d005      	beq.n	8012972 <udp_sendto_if+0x3a>
      ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 8012966:	68fb      	ldr	r3, [r7, #12]
 8012968:	681b      	ldr	r3, [r3, #0]
 801296a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801296e:	2be0      	cmp	r3, #224	; 0xe0
 8012970:	d103      	bne.n	801297a <udp_sendto_if+0x42>
    /* if the local_ip is any or multicast
     * use the outgoing network interface IP address as source address */
    src_ip = netif_ip_addr4(netif);
 8012972:	6a3b      	ldr	r3, [r7, #32]
 8012974:	3304      	adds	r3, #4
 8012976:	617b      	str	r3, [r7, #20]
 8012978:	e00b      	b.n	8012992 <udp_sendto_if+0x5a>
  } else {
    /* check if UDP PCB local IP address is correct
     * this could be an old address if netif->ip_addr has changed */
    if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 801297a:	68fb      	ldr	r3, [r7, #12]
 801297c:	681a      	ldr	r2, [r3, #0]
 801297e:	6a3b      	ldr	r3, [r7, #32]
 8012980:	3304      	adds	r3, #4
 8012982:	681b      	ldr	r3, [r3, #0]
 8012984:	429a      	cmp	r2, r3
 8012986:	d002      	beq.n	801298e <udp_sendto_if+0x56>
      /* local_ip doesn't match, drop the packet */
      return ERR_RTE;
 8012988:	f06f 0303 	mvn.w	r3, #3
 801298c:	e00d      	b.n	80129aa <udp_sendto_if+0x72>
    }
    /* use UDP PCB local IP address as source address */
    src_ip = &pcb->local_ip;
 801298e:	68fb      	ldr	r3, [r7, #12]
 8012990:	617b      	str	r3, [r7, #20]
  }
#endif /* LWIP_IPV4 */
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_src_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum, src_ip);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 8012992:	887a      	ldrh	r2, [r7, #2]
 8012994:	697b      	ldr	r3, [r7, #20]
 8012996:	9301      	str	r3, [sp, #4]
 8012998:	6a3b      	ldr	r3, [r7, #32]
 801299a:	9300      	str	r3, [sp, #0]
 801299c:	4613      	mov	r3, r2
 801299e:	687a      	ldr	r2, [r7, #4]
 80129a0:	68b9      	ldr	r1, [r7, #8]
 80129a2:	68f8      	ldr	r0, [r7, #12]
 80129a4:	f000 f806 	bl	80129b4 <udp_sendto_if_src>
 80129a8:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 80129aa:	4618      	mov	r0, r3
 80129ac:	3718      	adds	r7, #24
 80129ae:	46bd      	mov	sp, r7
 80129b0:	bd80      	pop	{r7, pc}
	...

080129b4 <udp_sendto_if_src>:
/** @ingroup udp_raw
 * Same as @ref udp_sendto_if, but with source address */
err_t
udp_sendto_if_src(struct udp_pcb *pcb, struct pbuf *p,
  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif, const ip_addr_t *src_ip)
{
 80129b4:	b580      	push	{r7, lr}
 80129b6:	b08c      	sub	sp, #48	; 0x30
 80129b8:	af04      	add	r7, sp, #16
 80129ba:	60f8      	str	r0, [r7, #12]
 80129bc:	60b9      	str	r1, [r7, #8]
 80129be:	607a      	str	r2, [r7, #4]
 80129c0:	807b      	strh	r3, [r7, #2]
  err_t err;
  struct pbuf *q; /* q will be sent down the stack */
  u8_t ip_proto;
  u8_t ttl;

  if ((pcb == NULL) || (dst_ip == NULL) || !IP_ADDR_PCB_VERSION_MATCH(pcb, src_ip) ||
 80129c2:	68fb      	ldr	r3, [r7, #12]
 80129c4:	2b00      	cmp	r3, #0
 80129c6:	d002      	beq.n	80129ce <udp_sendto_if_src+0x1a>
 80129c8:	687b      	ldr	r3, [r7, #4]
 80129ca:	2b00      	cmp	r3, #0
 80129cc:	d102      	bne.n	80129d4 <udp_sendto_if_src+0x20>
      !IP_ADDR_PCB_VERSION_MATCH(pcb, dst_ip)) {
    return ERR_VAL;
 80129ce:	f06f 0305 	mvn.w	r3, #5
 80129d2:	e07e      	b.n	8012ad2 <udp_sendto_if_src+0x11e>
    return ERR_VAL;
  }
#endif /* LWIP_IPV4 && IP_SOF_BROADCAST */

  /* if the PCB is not yet bound to a port, bind it here */
  if (pcb->local_port == 0) {
 80129d4:	68fb      	ldr	r3, [r7, #12]
 80129d6:	8a5b      	ldrh	r3, [r3, #18]
 80129d8:	2b00      	cmp	r3, #0
 80129da:	d10f      	bne.n	80129fc <udp_sendto_if_src+0x48>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send: not yet bound to a port, binding now\n"));
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 80129dc:	68f9      	ldr	r1, [r7, #12]
 80129de:	68fb      	ldr	r3, [r7, #12]
 80129e0:	8a5b      	ldrh	r3, [r3, #18]
 80129e2:	461a      	mov	r2, r3
 80129e4:	68f8      	ldr	r0, [r7, #12]
 80129e6:	f000 f87f 	bl	8012ae8 <udp_bind>
 80129ea:	4603      	mov	r3, r0
 80129ec:	76fb      	strb	r3, [r7, #27]
    if (err != ERR_OK) {
 80129ee:	f997 301b 	ldrsb.w	r3, [r7, #27]
 80129f2:	2b00      	cmp	r3, #0
 80129f4:	d002      	beq.n	80129fc <udp_sendto_if_src+0x48>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: forced port bind failed\n"));
      return err;
 80129f6:	f997 301b 	ldrsb.w	r3, [r7, #27]
 80129fa:	e06a      	b.n	8012ad2 <udp_sendto_if_src+0x11e>
    }
  }

  /* not enough space to add an UDP header to first pbuf in given p chain? */
  if (pbuf_header(p, UDP_HLEN)) {
 80129fc:	2108      	movs	r1, #8
 80129fe:	68b8      	ldr	r0, [r7, #8]
 8012a00:	f7fa fe92 	bl	800d728 <pbuf_header>
 8012a04:	4603      	mov	r3, r0
 8012a06:	2b00      	cmp	r3, #0
 8012a08:	d014      	beq.n	8012a34 <udp_sendto_if_src+0x80>
    /* allocate header in a separate new pbuf */
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 8012a0a:	2200      	movs	r2, #0
 8012a0c:	2108      	movs	r1, #8
 8012a0e:	2001      	movs	r0, #1
 8012a10:	f7fa fb3c 	bl	800d08c <pbuf_alloc>
 8012a14:	61f8      	str	r0, [r7, #28]
    /* new header pbuf could not be allocated? */
    if (q == NULL) {
 8012a16:	69fb      	ldr	r3, [r7, #28]
 8012a18:	2b00      	cmp	r3, #0
 8012a1a:	d102      	bne.n	8012a22 <udp_sendto_if_src+0x6e>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: could not allocate header\n"));
      return ERR_MEM;
 8012a1c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8012a20:	e057      	b.n	8012ad2 <udp_sendto_if_src+0x11e>
    }
    if (p->tot_len != 0) {
 8012a22:	68bb      	ldr	r3, [r7, #8]
 8012a24:	891b      	ldrh	r3, [r3, #8]
 8012a26:	2b00      	cmp	r3, #0
 8012a28:	d006      	beq.n	8012a38 <udp_sendto_if_src+0x84>
      /* chain header q in front of given pbuf p (only if p contains data) */
      pbuf_chain(q, p);
 8012a2a:	68b9      	ldr	r1, [r7, #8]
 8012a2c:	69f8      	ldr	r0, [r7, #28]
 8012a2e:	f7fa ffcf 	bl	800d9d0 <pbuf_chain>
 8012a32:	e001      	b.n	8012a38 <udp_sendto_if_src+0x84>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_send: added header pbuf %p before given pbuf %p\n", (void *)q, (void *)p));
  } else {
    /* adding space for header within p succeeded */
    /* first pbuf q equals given pbuf */
    q = p;
 8012a34:	68bb      	ldr	r3, [r7, #8]
 8012a36:	61fb      	str	r3, [r7, #28]
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: added header in given pbuf %p\n", (void *)p));
  }
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 8012a38:	69fb      	ldr	r3, [r7, #28]
 8012a3a:	895b      	ldrh	r3, [r3, #10]
 8012a3c:	2b07      	cmp	r3, #7
 8012a3e:	d806      	bhi.n	8012a4e <udp_sendto_if_src+0x9a>
 8012a40:	4b26      	ldr	r3, [pc, #152]	; (8012adc <udp_sendto_if_src+0x128>)
 8012a42:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 8012a46:	4926      	ldr	r1, [pc, #152]	; (8012ae0 <udp_sendto_if_src+0x12c>)
 8012a48:	4826      	ldr	r0, [pc, #152]	; (8012ae4 <udp_sendto_if_src+0x130>)
 8012a4a:	f005 f95f 	bl	8017d0c <iprintf>
              (q->len >= sizeof(struct udp_hdr)));
  /* q now represents the packet to be sent */
  udphdr = (struct udp_hdr *)q->payload;
 8012a4e:	69fb      	ldr	r3, [r7, #28]
 8012a50:	685b      	ldr	r3, [r3, #4]
 8012a52:	617b      	str	r3, [r7, #20]
  udphdr->src = lwip_htons(pcb->local_port);
 8012a54:	68fb      	ldr	r3, [r7, #12]
 8012a56:	8a5b      	ldrh	r3, [r3, #18]
 8012a58:	4618      	mov	r0, r3
 8012a5a:	f7f9 fce7 	bl	800c42c <lwip_htons>
 8012a5e:	4603      	mov	r3, r0
 8012a60:	461a      	mov	r2, r3
 8012a62:	697b      	ldr	r3, [r7, #20]
 8012a64:	801a      	strh	r2, [r3, #0]
  udphdr->dest = lwip_htons(dst_port);
 8012a66:	887b      	ldrh	r3, [r7, #2]
 8012a68:	4618      	mov	r0, r3
 8012a6a:	f7f9 fcdf 	bl	800c42c <lwip_htons>
 8012a6e:	4603      	mov	r3, r0
 8012a70:	461a      	mov	r2, r3
 8012a72:	697b      	ldr	r3, [r7, #20]
 8012a74:	805a      	strh	r2, [r3, #2]
  /* in UDP, 0 checksum means 'no checksum' */
  udphdr->chksum = 0x0000;
 8012a76:	697b      	ldr	r3, [r7, #20]
 8012a78:	2200      	movs	r2, #0
 8012a7a:	719a      	strb	r2, [r3, #6]
 8012a7c:	2200      	movs	r2, #0
 8012a7e:	71da      	strb	r2, [r3, #7]
    ip_proto = IP_PROTO_UDPLITE;
  } else
#endif /* LWIP_UDPLITE */
  {      /* UDP */
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP packet length %"U16_F"\n", q->tot_len));
    udphdr->len = lwip_htons(q->tot_len);
 8012a80:	69fb      	ldr	r3, [r7, #28]
 8012a82:	891b      	ldrh	r3, [r3, #8]
 8012a84:	4618      	mov	r0, r3
 8012a86:	f7f9 fcd1 	bl	800c42c <lwip_htons>
 8012a8a:	4603      	mov	r3, r0
 8012a8c:	461a      	mov	r2, r3
 8012a8e:	697b      	ldr	r3, [r7, #20]
 8012a90:	809a      	strh	r2, [r3, #4]
        }
        udphdr->chksum = udpchksum;
      }
    }
#endif /* CHECKSUM_GEN_UDP */
    ip_proto = IP_PROTO_UDP;
 8012a92:	2311      	movs	r3, #17
 8012a94:	74fb      	strb	r3, [r7, #19]

  /* Determine TTL to use */
#if LWIP_MULTICAST_TX_OPTIONS
  ttl = (ip_addr_ismulticast(dst_ip) ? udp_get_multicast_ttl(pcb) : pcb->ttl);
#else /* LWIP_MULTICAST_TX_OPTIONS */
  ttl = pcb->ttl;
 8012a96:	68fb      	ldr	r3, [r7, #12]
 8012a98:	7a9b      	ldrb	r3, [r3, #10]
 8012a9a:	74bb      	strb	r3, [r7, #18]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP checksum 0x%04"X16_F"\n", udphdr->chksum));
  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: ip_output_if (,,,,0x%02"X16_F",)\n", (u16_t)ip_proto));
  /* output to IP */
  NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 8012a9c:	68fb      	ldr	r3, [r7, #12]
 8012a9e:	7a5b      	ldrb	r3, [r3, #9]
 8012aa0:	7cb9      	ldrb	r1, [r7, #18]
 8012aa2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8012aa4:	9202      	str	r2, [sp, #8]
 8012aa6:	7cfa      	ldrb	r2, [r7, #19]
 8012aa8:	9201      	str	r2, [sp, #4]
 8012aaa:	9300      	str	r3, [sp, #0]
 8012aac:	460b      	mov	r3, r1
 8012aae:	687a      	ldr	r2, [r7, #4]
 8012ab0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8012ab2:	69f8      	ldr	r0, [r7, #28]
 8012ab4:	f003 fab8 	bl	8016028 <ip4_output_if_src>
 8012ab8:	4603      	mov	r3, r0
 8012aba:	76fb      	strb	r3, [r7, #27]

  /* @todo: must this be increased even if error occurred? */
  MIB2_STATS_INC(mib2.udpoutdatagrams);

  /* did we chain a separate header pbuf earlier? */
  if (q != p) {
 8012abc:	69fa      	ldr	r2, [r7, #28]
 8012abe:	68bb      	ldr	r3, [r7, #8]
 8012ac0:	429a      	cmp	r2, r3
 8012ac2:	d004      	beq.n	8012ace <udp_sendto_if_src+0x11a>
    /* free the header pbuf */
    pbuf_free(q);
 8012ac4:	69f8      	ldr	r0, [r7, #28]
 8012ac6:	f7fa fe53 	bl	800d770 <pbuf_free>
    q = NULL;
 8012aca:	2300      	movs	r3, #0
 8012acc:	61fb      	str	r3, [r7, #28]
    /* p is still referenced by the caller, and will live on */
  }

  UDP_STATS_INC(udp.xmit);
  return err;
 8012ace:	f997 301b 	ldrsb.w	r3, [r7, #27]
}
 8012ad2:	4618      	mov	r0, r3
 8012ad4:	3720      	adds	r7, #32
 8012ad6:	46bd      	mov	sp, r7
 8012ad8:	bd80      	pop	{r7, pc}
 8012ada:	bf00      	nop
 8012adc:	0801a0fc 	.word	0x0801a0fc
 8012ae0:	0801a168 	.word	0x0801a168
 8012ae4:	0801a140 	.word	0x0801a140

08012ae8 <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8012ae8:	b580      	push	{r7, lr}
 8012aea:	b086      	sub	sp, #24
 8012aec:	af00      	add	r7, sp, #0
 8012aee:	60f8      	str	r0, [r7, #12]
 8012af0:	60b9      	str	r1, [r7, #8]
 8012af2:	4613      	mov	r3, r2
 8012af4:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *ipcb;
  u8_t rebind;

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8012af6:	68bb      	ldr	r3, [r7, #8]
 8012af8:	2b00      	cmp	r3, #0
 8012afa:	d101      	bne.n	8012b00 <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 8012afc:	4b30      	ldr	r3, [pc, #192]	; (8012bc0 <udp_bind+0xd8>)
 8012afe:	60bb      	str	r3, [r7, #8]
  }
#endif /* LWIP_IPV4 */

  /* still need to check for ipaddr == NULL in IPv6 only case */
  if ((pcb == NULL) || (ipaddr == NULL)) {
 8012b00:	68fb      	ldr	r3, [r7, #12]
 8012b02:	2b00      	cmp	r3, #0
 8012b04:	d002      	beq.n	8012b0c <udp_bind+0x24>
 8012b06:	68bb      	ldr	r3, [r7, #8]
 8012b08:	2b00      	cmp	r3, #0
 8012b0a:	d102      	bne.n	8012b12 <udp_bind+0x2a>
    return ERR_VAL;
 8012b0c:	f06f 0305 	mvn.w	r3, #5
 8012b10:	e052      	b.n	8012bb8 <udp_bind+0xd0>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 8012b12:	2300      	movs	r3, #0
 8012b14:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8012b16:	4b2b      	ldr	r3, [pc, #172]	; (8012bc4 <udp_bind+0xdc>)
 8012b18:	681b      	ldr	r3, [r3, #0]
 8012b1a:	617b      	str	r3, [r7, #20]
 8012b1c:	e009      	b.n	8012b32 <udp_bind+0x4a>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 8012b1e:	68fa      	ldr	r2, [r7, #12]
 8012b20:	697b      	ldr	r3, [r7, #20]
 8012b22:	429a      	cmp	r2, r3
 8012b24:	d102      	bne.n	8012b2c <udp_bind+0x44>
      rebind = 1;
 8012b26:	2301      	movs	r3, #1
 8012b28:	74fb      	strb	r3, [r7, #19]
      break;
 8012b2a:	e005      	b.n	8012b38 <udp_bind+0x50>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8012b2c:	697b      	ldr	r3, [r7, #20]
 8012b2e:	68db      	ldr	r3, [r3, #12]
 8012b30:	617b      	str	r3, [r7, #20]
 8012b32:	697b      	ldr	r3, [r7, #20]
 8012b34:	2b00      	cmp	r3, #0
 8012b36:	d1f2      	bne.n	8012b1e <udp_bind+0x36>
    }
  }

  /* no port specified? */
  if (port == 0) {
 8012b38:	88fb      	ldrh	r3, [r7, #6]
 8012b3a:	2b00      	cmp	r3, #0
 8012b3c:	d109      	bne.n	8012b52 <udp_bind+0x6a>
    port = udp_new_port();
 8012b3e:	f7ff fda1 	bl	8012684 <udp_new_port>
 8012b42:	4603      	mov	r3, r0
 8012b44:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 8012b46:	88fb      	ldrh	r3, [r7, #6]
 8012b48:	2b00      	cmp	r3, #0
 8012b4a:	d11e      	bne.n	8012b8a <udp_bind+0xa2>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 8012b4c:	f06f 0307 	mvn.w	r3, #7
 8012b50:	e032      	b.n	8012bb8 <udp_bind+0xd0>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8012b52:	4b1c      	ldr	r3, [pc, #112]	; (8012bc4 <udp_bind+0xdc>)
 8012b54:	681b      	ldr	r3, [r3, #0]
 8012b56:	617b      	str	r3, [r7, #20]
 8012b58:	e014      	b.n	8012b84 <udp_bind+0x9c>
      if (pcb != ipcb) {
 8012b5a:	68fa      	ldr	r2, [r7, #12]
 8012b5c:	697b      	ldr	r3, [r7, #20]
 8012b5e:	429a      	cmp	r2, r3
 8012b60:	d00d      	beq.n	8012b7e <udp_bind+0x96>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 8012b62:	697b      	ldr	r3, [r7, #20]
 8012b64:	8a5b      	ldrh	r3, [r3, #18]
 8012b66:	88fa      	ldrh	r2, [r7, #6]
 8012b68:	429a      	cmp	r2, r3
 8012b6a:	d108      	bne.n	8012b7e <udp_bind+0x96>
              /* IP address matches? */
              ip_addr_cmp(&ipcb->local_ip, ipaddr)) {
 8012b6c:	697b      	ldr	r3, [r7, #20]
 8012b6e:	681a      	ldr	r2, [r3, #0]
 8012b70:	68bb      	ldr	r3, [r7, #8]
 8012b72:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 8012b74:	429a      	cmp	r2, r3
 8012b76:	d102      	bne.n	8012b7e <udp_bind+0x96>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 8012b78:	f06f 0307 	mvn.w	r3, #7
 8012b7c:	e01c      	b.n	8012bb8 <udp_bind+0xd0>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8012b7e:	697b      	ldr	r3, [r7, #20]
 8012b80:	68db      	ldr	r3, [r3, #12]
 8012b82:	617b      	str	r3, [r7, #20]
 8012b84:	697b      	ldr	r3, [r7, #20]
 8012b86:	2b00      	cmp	r3, #0
 8012b88:	d1e7      	bne.n	8012b5a <udp_bind+0x72>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 8012b8a:	68bb      	ldr	r3, [r7, #8]
 8012b8c:	2b00      	cmp	r3, #0
 8012b8e:	d002      	beq.n	8012b96 <udp_bind+0xae>
 8012b90:	68bb      	ldr	r3, [r7, #8]
 8012b92:	681b      	ldr	r3, [r3, #0]
 8012b94:	e000      	b.n	8012b98 <udp_bind+0xb0>
 8012b96:	2300      	movs	r3, #0
 8012b98:	68fa      	ldr	r2, [r7, #12]
 8012b9a:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 8012b9c:	68fb      	ldr	r3, [r7, #12]
 8012b9e:	88fa      	ldrh	r2, [r7, #6]
 8012ba0:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 8012ba2:	7cfb      	ldrb	r3, [r7, #19]
 8012ba4:	2b00      	cmp	r3, #0
 8012ba6:	d106      	bne.n	8012bb6 <udp_bind+0xce>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 8012ba8:	4b06      	ldr	r3, [pc, #24]	; (8012bc4 <udp_bind+0xdc>)
 8012baa:	681a      	ldr	r2, [r3, #0]
 8012bac:	68fb      	ldr	r3, [r7, #12]
 8012bae:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 8012bb0:	4a04      	ldr	r2, [pc, #16]	; (8012bc4 <udp_bind+0xdc>)
 8012bb2:	68fb      	ldr	r3, [r7, #12]
 8012bb4:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, &pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 8012bb6:	2300      	movs	r3, #0
}
 8012bb8:	4618      	mov	r0, r3
 8012bba:	3718      	adds	r7, #24
 8012bbc:	46bd      	mov	sp, r7
 8012bbe:	bd80      	pop	{r7, pc}
 8012bc0:	0801ae94 	.word	0x0801ae94
 8012bc4:	2000b5c8 	.word	0x2000b5c8

08012bc8 <udp_connect>:
 *
 * @see udp_disconnect()
 */
err_t
udp_connect(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8012bc8:	b580      	push	{r7, lr}
 8012bca:	b086      	sub	sp, #24
 8012bcc:	af00      	add	r7, sp, #0
 8012bce:	60f8      	str	r0, [r7, #12]
 8012bd0:	60b9      	str	r1, [r7, #8]
 8012bd2:	4613      	mov	r3, r2
 8012bd4:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *ipcb;

  if ((pcb == NULL) || (ipaddr == NULL)) {
 8012bd6:	68fb      	ldr	r3, [r7, #12]
 8012bd8:	2b00      	cmp	r3, #0
 8012bda:	d002      	beq.n	8012be2 <udp_connect+0x1a>
 8012bdc:	68bb      	ldr	r3, [r7, #8]
 8012bde:	2b00      	cmp	r3, #0
 8012be0:	d102      	bne.n	8012be8 <udp_connect+0x20>
    return ERR_VAL;
 8012be2:	f06f 0305 	mvn.w	r3, #5
 8012be6:	e03e      	b.n	8012c66 <udp_connect+0x9e>
  }

  if (pcb->local_port == 0) {
 8012be8:	68fb      	ldr	r3, [r7, #12]
 8012bea:	8a5b      	ldrh	r3, [r3, #18]
 8012bec:	2b00      	cmp	r3, #0
 8012bee:	d10f      	bne.n	8012c10 <udp_connect+0x48>
    err_t err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 8012bf0:	68f9      	ldr	r1, [r7, #12]
 8012bf2:	68fb      	ldr	r3, [r7, #12]
 8012bf4:	8a5b      	ldrh	r3, [r3, #18]
 8012bf6:	461a      	mov	r2, r3
 8012bf8:	68f8      	ldr	r0, [r7, #12]
 8012bfa:	f7ff ff75 	bl	8012ae8 <udp_bind>
 8012bfe:	4603      	mov	r3, r0
 8012c00:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 8012c02:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8012c06:	2b00      	cmp	r3, #0
 8012c08:	d002      	beq.n	8012c10 <udp_connect+0x48>
      return err;
 8012c0a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8012c0e:	e02a      	b.n	8012c66 <udp_connect+0x9e>
    }
  }

  ip_addr_set_ipaddr(&pcb->remote_ip, ipaddr);
 8012c10:	68bb      	ldr	r3, [r7, #8]
 8012c12:	2b00      	cmp	r3, #0
 8012c14:	d002      	beq.n	8012c1c <udp_connect+0x54>
 8012c16:	68bb      	ldr	r3, [r7, #8]
 8012c18:	681b      	ldr	r3, [r3, #0]
 8012c1a:	e000      	b.n	8012c1e <udp_connect+0x56>
 8012c1c:	2300      	movs	r3, #0
 8012c1e:	68fa      	ldr	r2, [r7, #12]
 8012c20:	6053      	str	r3, [r2, #4]
  pcb->remote_port = port;
 8012c22:	68fb      	ldr	r3, [r7, #12]
 8012c24:	88fa      	ldrh	r2, [r7, #6]
 8012c26:	829a      	strh	r2, [r3, #20]
  pcb->flags |= UDP_FLAGS_CONNECTED;
 8012c28:	68fb      	ldr	r3, [r7, #12]
 8012c2a:	7c1b      	ldrb	r3, [r3, #16]
 8012c2c:	f043 0304 	orr.w	r3, r3, #4
 8012c30:	b2da      	uxtb	r2, r3
 8012c32:	68fb      	ldr	r3, [r7, #12]
 8012c34:	741a      	strb	r2, [r3, #16]
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                      &pcb->remote_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->remote_port));

  /* Insert UDP PCB into the list of active UDP PCBs. */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8012c36:	4b0e      	ldr	r3, [pc, #56]	; (8012c70 <udp_connect+0xa8>)
 8012c38:	681b      	ldr	r3, [r3, #0]
 8012c3a:	617b      	str	r3, [r7, #20]
 8012c3c:	e008      	b.n	8012c50 <udp_connect+0x88>
    if (pcb == ipcb) {
 8012c3e:	68fa      	ldr	r2, [r7, #12]
 8012c40:	697b      	ldr	r3, [r7, #20]
 8012c42:	429a      	cmp	r2, r3
 8012c44:	d101      	bne.n	8012c4a <udp_connect+0x82>
      /* already on the list, just return */
      return ERR_OK;
 8012c46:	2300      	movs	r3, #0
 8012c48:	e00d      	b.n	8012c66 <udp_connect+0x9e>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8012c4a:	697b      	ldr	r3, [r7, #20]
 8012c4c:	68db      	ldr	r3, [r3, #12]
 8012c4e:	617b      	str	r3, [r7, #20]
 8012c50:	697b      	ldr	r3, [r7, #20]
 8012c52:	2b00      	cmp	r3, #0
 8012c54:	d1f3      	bne.n	8012c3e <udp_connect+0x76>
    }
  }
  /* PCB not yet on the list, add PCB now */
  pcb->next = udp_pcbs;
 8012c56:	4b06      	ldr	r3, [pc, #24]	; (8012c70 <udp_connect+0xa8>)
 8012c58:	681a      	ldr	r2, [r3, #0]
 8012c5a:	68fb      	ldr	r3, [r7, #12]
 8012c5c:	60da      	str	r2, [r3, #12]
  udp_pcbs = pcb;
 8012c5e:	4a04      	ldr	r2, [pc, #16]	; (8012c70 <udp_connect+0xa8>)
 8012c60:	68fb      	ldr	r3, [r7, #12]
 8012c62:	6013      	str	r3, [r2, #0]
  return ERR_OK;
 8012c64:	2300      	movs	r3, #0
}
 8012c66:	4618      	mov	r0, r3
 8012c68:	3718      	adds	r7, #24
 8012c6a:	46bd      	mov	sp, r7
 8012c6c:	bd80      	pop	{r7, pc}
 8012c6e:	bf00      	nop
 8012c70:	2000b5c8 	.word	0x2000b5c8

08012c74 <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 8012c74:	b480      	push	{r7}
 8012c76:	b085      	sub	sp, #20
 8012c78:	af00      	add	r7, sp, #0
 8012c7a:	60f8      	str	r0, [r7, #12]
 8012c7c:	60b9      	str	r1, [r7, #8]
 8012c7e:	607a      	str	r2, [r7, #4]
  /* remember recv() callback and user data */
  pcb->recv = recv;
 8012c80:	68fb      	ldr	r3, [r7, #12]
 8012c82:	68ba      	ldr	r2, [r7, #8]
 8012c84:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 8012c86:	68fb      	ldr	r3, [r7, #12]
 8012c88:	687a      	ldr	r2, [r7, #4]
 8012c8a:	61da      	str	r2, [r3, #28]
}
 8012c8c:	bf00      	nop
 8012c8e:	3714      	adds	r7, #20
 8012c90:	46bd      	mov	sp, r7
 8012c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c96:	4770      	bx	lr

08012c98 <udp_remove>:
 *
 * @see udp_new()
 */
void
udp_remove(struct udp_pcb *pcb)
{
 8012c98:	b580      	push	{r7, lr}
 8012c9a:	b084      	sub	sp, #16
 8012c9c:	af00      	add	r7, sp, #0
 8012c9e:	6078      	str	r0, [r7, #4]
  struct udp_pcb *pcb2;

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 8012ca0:	4b15      	ldr	r3, [pc, #84]	; (8012cf8 <udp_remove+0x60>)
 8012ca2:	681b      	ldr	r3, [r3, #0]
 8012ca4:	687a      	ldr	r2, [r7, #4]
 8012ca6:	429a      	cmp	r2, r3
 8012ca8:	d105      	bne.n	8012cb6 <udp_remove+0x1e>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
 8012caa:	4b13      	ldr	r3, [pc, #76]	; (8012cf8 <udp_remove+0x60>)
 8012cac:	681b      	ldr	r3, [r3, #0]
 8012cae:	68db      	ldr	r3, [r3, #12]
 8012cb0:	4a11      	ldr	r2, [pc, #68]	; (8012cf8 <udp_remove+0x60>)
 8012cb2:	6013      	str	r3, [r2, #0]
 8012cb4:	e017      	b.n	8012ce6 <udp_remove+0x4e>
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 8012cb6:	4b10      	ldr	r3, [pc, #64]	; (8012cf8 <udp_remove+0x60>)
 8012cb8:	681b      	ldr	r3, [r3, #0]
 8012cba:	60fb      	str	r3, [r7, #12]
 8012cbc:	e010      	b.n	8012ce0 <udp_remove+0x48>
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
 8012cbe:	68fb      	ldr	r3, [r7, #12]
 8012cc0:	68db      	ldr	r3, [r3, #12]
 8012cc2:	2b00      	cmp	r3, #0
 8012cc4:	d009      	beq.n	8012cda <udp_remove+0x42>
 8012cc6:	68fb      	ldr	r3, [r7, #12]
 8012cc8:	68db      	ldr	r3, [r3, #12]
 8012cca:	687a      	ldr	r2, [r7, #4]
 8012ccc:	429a      	cmp	r2, r3
 8012cce:	d104      	bne.n	8012cda <udp_remove+0x42>
        /* remove pcb from list */
        pcb2->next = pcb->next;
 8012cd0:	687b      	ldr	r3, [r7, #4]
 8012cd2:	68da      	ldr	r2, [r3, #12]
 8012cd4:	68fb      	ldr	r3, [r7, #12]
 8012cd6:	60da      	str	r2, [r3, #12]
        break;
 8012cd8:	e005      	b.n	8012ce6 <udp_remove+0x4e>
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 8012cda:	68fb      	ldr	r3, [r7, #12]
 8012cdc:	68db      	ldr	r3, [r3, #12]
 8012cde:	60fb      	str	r3, [r7, #12]
 8012ce0:	68fb      	ldr	r3, [r7, #12]
 8012ce2:	2b00      	cmp	r3, #0
 8012ce4:	d1eb      	bne.n	8012cbe <udp_remove+0x26>
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 8012ce6:	6879      	ldr	r1, [r7, #4]
 8012ce8:	2000      	movs	r0, #0
 8012cea:	f7f9 ffdf 	bl	800ccac <memp_free>
}
 8012cee:	bf00      	nop
 8012cf0:	3710      	adds	r7, #16
 8012cf2:	46bd      	mov	sp, r7
 8012cf4:	bd80      	pop	{r7, pc}
 8012cf6:	bf00      	nop
 8012cf8:	2000b5c8 	.word	0x2000b5c8

08012cfc <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 8012cfc:	b580      	push	{r7, lr}
 8012cfe:	b082      	sub	sp, #8
 8012d00:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;
  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 8012d02:	2000      	movs	r0, #0
 8012d04:	f7f9 ff80 	bl	800cc08 <memp_malloc>
 8012d08:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 8012d0a:	687b      	ldr	r3, [r7, #4]
 8012d0c:	2b00      	cmp	r3, #0
 8012d0e:	d007      	beq.n	8012d20 <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 8012d10:	2220      	movs	r2, #32
 8012d12:	2100      	movs	r1, #0
 8012d14:	6878      	ldr	r0, [r7, #4]
 8012d16:	f004 ff49 	bl	8017bac <memset>
    pcb->ttl = UDP_TTL;
 8012d1a:	687b      	ldr	r3, [r7, #4]
 8012d1c:	22ff      	movs	r2, #255	; 0xff
 8012d1e:	729a      	strb	r2, [r3, #10]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 8012d20:	687b      	ldr	r3, [r7, #4]
}
 8012d22:	4618      	mov	r0, r3
 8012d24:	3708      	adds	r7, #8
 8012d26:	46bd      	mov	sp, r7
 8012d28:	bd80      	pop	{r7, pc}
	...

08012d2c <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t* old_addr, const ip_addr_t* new_addr)
{
 8012d2c:	b480      	push	{r7}
 8012d2e:	b085      	sub	sp, #20
 8012d30:	af00      	add	r7, sp, #0
 8012d32:	6078      	str	r0, [r7, #4]
 8012d34:	6039      	str	r1, [r7, #0]
  struct udp_pcb* upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 8012d36:	687b      	ldr	r3, [r7, #4]
 8012d38:	2b00      	cmp	r3, #0
 8012d3a:	d01e      	beq.n	8012d7a <udp_netif_ip_addr_changed+0x4e>
 8012d3c:	687b      	ldr	r3, [r7, #4]
 8012d3e:	681b      	ldr	r3, [r3, #0]
 8012d40:	2b00      	cmp	r3, #0
 8012d42:	d01a      	beq.n	8012d7a <udp_netif_ip_addr_changed+0x4e>
 8012d44:	683b      	ldr	r3, [r7, #0]
 8012d46:	2b00      	cmp	r3, #0
 8012d48:	d017      	beq.n	8012d7a <udp_netif_ip_addr_changed+0x4e>
 8012d4a:	683b      	ldr	r3, [r7, #0]
 8012d4c:	681b      	ldr	r3, [r3, #0]
 8012d4e:	2b00      	cmp	r3, #0
 8012d50:	d013      	beq.n	8012d7a <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8012d52:	4b0d      	ldr	r3, [pc, #52]	; (8012d88 <udp_netif_ip_addr_changed+0x5c>)
 8012d54:	681b      	ldr	r3, [r3, #0]
 8012d56:	60fb      	str	r3, [r7, #12]
 8012d58:	e00c      	b.n	8012d74 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 8012d5a:	68fb      	ldr	r3, [r7, #12]
 8012d5c:	681a      	ldr	r2, [r3, #0]
 8012d5e:	687b      	ldr	r3, [r7, #4]
 8012d60:	681b      	ldr	r3, [r3, #0]
 8012d62:	429a      	cmp	r2, r3
 8012d64:	d103      	bne.n	8012d6e <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 8012d66:	683b      	ldr	r3, [r7, #0]
 8012d68:	681a      	ldr	r2, [r3, #0]
 8012d6a:	68fb      	ldr	r3, [r7, #12]
 8012d6c:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8012d6e:	68fb      	ldr	r3, [r7, #12]
 8012d70:	68db      	ldr	r3, [r3, #12]
 8012d72:	60fb      	str	r3, [r7, #12]
 8012d74:	68fb      	ldr	r3, [r7, #12]
 8012d76:	2b00      	cmp	r3, #0
 8012d78:	d1ef      	bne.n	8012d5a <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 8012d7a:	bf00      	nop
 8012d7c:	3714      	adds	r7, #20
 8012d7e:	46bd      	mov	sp, r7
 8012d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d84:	4770      	bx	lr
 8012d86:	bf00      	nop
 8012d88:	2000b5c8 	.word	0x2000b5c8

08012d8c <dhcp_inc_pcb_refcount>:
static void dhcp_option_trailer(struct dhcp *dhcp);

/** Ensure DHCP PCB is allocated and bound */
static err_t
dhcp_inc_pcb_refcount(void)
{
 8012d8c:	b580      	push	{r7, lr}
 8012d8e:	af00      	add	r7, sp, #0
  if (dhcp_pcb_refcount == 0) {
 8012d90:	4b20      	ldr	r3, [pc, #128]	; (8012e14 <dhcp_inc_pcb_refcount+0x88>)
 8012d92:	781b      	ldrb	r3, [r3, #0]
 8012d94:	2b00      	cmp	r3, #0
 8012d96:	d133      	bne.n	8012e00 <dhcp_inc_pcb_refcount+0x74>
    LWIP_ASSERT("dhcp_inc_pcb_refcount(): memory leak", dhcp_pcb == NULL);
 8012d98:	4b1f      	ldr	r3, [pc, #124]	; (8012e18 <dhcp_inc_pcb_refcount+0x8c>)
 8012d9a:	681b      	ldr	r3, [r3, #0]
 8012d9c:	2b00      	cmp	r3, #0
 8012d9e:	d005      	beq.n	8012dac <dhcp_inc_pcb_refcount+0x20>
 8012da0:	4b1e      	ldr	r3, [pc, #120]	; (8012e1c <dhcp_inc_pcb_refcount+0x90>)
 8012da2:	22d9      	movs	r2, #217	; 0xd9
 8012da4:	491e      	ldr	r1, [pc, #120]	; (8012e20 <dhcp_inc_pcb_refcount+0x94>)
 8012da6:	481f      	ldr	r0, [pc, #124]	; (8012e24 <dhcp_inc_pcb_refcount+0x98>)
 8012da8:	f004 ffb0 	bl	8017d0c <iprintf>

    /* allocate UDP PCB */
    dhcp_pcb = udp_new();
 8012dac:	f7ff ffa6 	bl	8012cfc <udp_new>
 8012db0:	4602      	mov	r2, r0
 8012db2:	4b19      	ldr	r3, [pc, #100]	; (8012e18 <dhcp_inc_pcb_refcount+0x8c>)
 8012db4:	601a      	str	r2, [r3, #0]

    if (dhcp_pcb == NULL) {
 8012db6:	4b18      	ldr	r3, [pc, #96]	; (8012e18 <dhcp_inc_pcb_refcount+0x8c>)
 8012db8:	681b      	ldr	r3, [r3, #0]
 8012dba:	2b00      	cmp	r3, #0
 8012dbc:	d102      	bne.n	8012dc4 <dhcp_inc_pcb_refcount+0x38>
      return ERR_MEM;
 8012dbe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8012dc2:	e024      	b.n	8012e0e <dhcp_inc_pcb_refcount+0x82>
    }

    ip_set_option(dhcp_pcb, SOF_BROADCAST);
 8012dc4:	4b14      	ldr	r3, [pc, #80]	; (8012e18 <dhcp_inc_pcb_refcount+0x8c>)
 8012dc6:	681b      	ldr	r3, [r3, #0]
 8012dc8:	7a1a      	ldrb	r2, [r3, #8]
 8012dca:	4b13      	ldr	r3, [pc, #76]	; (8012e18 <dhcp_inc_pcb_refcount+0x8c>)
 8012dcc:	681b      	ldr	r3, [r3, #0]
 8012dce:	f042 0220 	orr.w	r2, r2, #32
 8012dd2:	b2d2      	uxtb	r2, r2
 8012dd4:	721a      	strb	r2, [r3, #8]

    /* set up local and remote port for the pcb -> listen on all interfaces on all src/dest IPs */
    udp_bind(dhcp_pcb, IP4_ADDR_ANY, DHCP_CLIENT_PORT);
 8012dd6:	4b10      	ldr	r3, [pc, #64]	; (8012e18 <dhcp_inc_pcb_refcount+0x8c>)
 8012dd8:	681b      	ldr	r3, [r3, #0]
 8012dda:	2244      	movs	r2, #68	; 0x44
 8012ddc:	4912      	ldr	r1, [pc, #72]	; (8012e28 <dhcp_inc_pcb_refcount+0x9c>)
 8012dde:	4618      	mov	r0, r3
 8012de0:	f7ff fe82 	bl	8012ae8 <udp_bind>
    udp_connect(dhcp_pcb, IP4_ADDR_ANY, DHCP_SERVER_PORT);
 8012de4:	4b0c      	ldr	r3, [pc, #48]	; (8012e18 <dhcp_inc_pcb_refcount+0x8c>)
 8012de6:	681b      	ldr	r3, [r3, #0]
 8012de8:	2243      	movs	r2, #67	; 0x43
 8012dea:	490f      	ldr	r1, [pc, #60]	; (8012e28 <dhcp_inc_pcb_refcount+0x9c>)
 8012dec:	4618      	mov	r0, r3
 8012dee:	f7ff feeb 	bl	8012bc8 <udp_connect>
    udp_recv(dhcp_pcb, dhcp_recv, NULL);
 8012df2:	4b09      	ldr	r3, [pc, #36]	; (8012e18 <dhcp_inc_pcb_refcount+0x8c>)
 8012df4:	681b      	ldr	r3, [r3, #0]
 8012df6:	2200      	movs	r2, #0
 8012df8:	490c      	ldr	r1, [pc, #48]	; (8012e2c <dhcp_inc_pcb_refcount+0xa0>)
 8012dfa:	4618      	mov	r0, r3
 8012dfc:	f7ff ff3a 	bl	8012c74 <udp_recv>
  }

  dhcp_pcb_refcount++;
 8012e00:	4b04      	ldr	r3, [pc, #16]	; (8012e14 <dhcp_inc_pcb_refcount+0x88>)
 8012e02:	781b      	ldrb	r3, [r3, #0]
 8012e04:	3301      	adds	r3, #1
 8012e06:	b2da      	uxtb	r2, r3
 8012e08:	4b02      	ldr	r3, [pc, #8]	; (8012e14 <dhcp_inc_pcb_refcount+0x88>)
 8012e0a:	701a      	strb	r2, [r3, #0]

  return ERR_OK;
 8012e0c:	2300      	movs	r3, #0
}
 8012e0e:	4618      	mov	r0, r3
 8012e10:	bd80      	pop	{r7, pc}
 8012e12:	bf00      	nop
 8012e14:	20004bb4 	.word	0x20004bb4
 8012e18:	20004bb0 	.word	0x20004bb0
 8012e1c:	0801a198 	.word	0x0801a198
 8012e20:	0801a1d0 	.word	0x0801a1d0
 8012e24:	0801a1f8 	.word	0x0801a1f8
 8012e28:	0801ae94 	.word	0x0801ae94
 8012e2c:	080144e9 	.word	0x080144e9

08012e30 <dhcp_dec_pcb_refcount>:

/** Free DHCP PCB if the last netif stops using it */
static void
dhcp_dec_pcb_refcount(void)
{
 8012e30:	b580      	push	{r7, lr}
 8012e32:	af00      	add	r7, sp, #0
  LWIP_ASSERT("dhcp_pcb_refcount(): refcount error", (dhcp_pcb_refcount > 0));
 8012e34:	4b0e      	ldr	r3, [pc, #56]	; (8012e70 <dhcp_dec_pcb_refcount+0x40>)
 8012e36:	781b      	ldrb	r3, [r3, #0]
 8012e38:	2b00      	cmp	r3, #0
 8012e3a:	d105      	bne.n	8012e48 <dhcp_dec_pcb_refcount+0x18>
 8012e3c:	4b0d      	ldr	r3, [pc, #52]	; (8012e74 <dhcp_dec_pcb_refcount+0x44>)
 8012e3e:	22f3      	movs	r2, #243	; 0xf3
 8012e40:	490d      	ldr	r1, [pc, #52]	; (8012e78 <dhcp_dec_pcb_refcount+0x48>)
 8012e42:	480e      	ldr	r0, [pc, #56]	; (8012e7c <dhcp_dec_pcb_refcount+0x4c>)
 8012e44:	f004 ff62 	bl	8017d0c <iprintf>
  dhcp_pcb_refcount--;
 8012e48:	4b09      	ldr	r3, [pc, #36]	; (8012e70 <dhcp_dec_pcb_refcount+0x40>)
 8012e4a:	781b      	ldrb	r3, [r3, #0]
 8012e4c:	3b01      	subs	r3, #1
 8012e4e:	b2da      	uxtb	r2, r3
 8012e50:	4b07      	ldr	r3, [pc, #28]	; (8012e70 <dhcp_dec_pcb_refcount+0x40>)
 8012e52:	701a      	strb	r2, [r3, #0]

  if (dhcp_pcb_refcount == 0) {
 8012e54:	4b06      	ldr	r3, [pc, #24]	; (8012e70 <dhcp_dec_pcb_refcount+0x40>)
 8012e56:	781b      	ldrb	r3, [r3, #0]
 8012e58:	2b00      	cmp	r3, #0
 8012e5a:	d107      	bne.n	8012e6c <dhcp_dec_pcb_refcount+0x3c>
    udp_remove(dhcp_pcb);
 8012e5c:	4b08      	ldr	r3, [pc, #32]	; (8012e80 <dhcp_dec_pcb_refcount+0x50>)
 8012e5e:	681b      	ldr	r3, [r3, #0]
 8012e60:	4618      	mov	r0, r3
 8012e62:	f7ff ff19 	bl	8012c98 <udp_remove>
    dhcp_pcb = NULL;
 8012e66:	4b06      	ldr	r3, [pc, #24]	; (8012e80 <dhcp_dec_pcb_refcount+0x50>)
 8012e68:	2200      	movs	r2, #0
 8012e6a:	601a      	str	r2, [r3, #0]
  }
}
 8012e6c:	bf00      	nop
 8012e6e:	bd80      	pop	{r7, pc}
 8012e70:	20004bb4 	.word	0x20004bb4
 8012e74:	0801a198 	.word	0x0801a198
 8012e78:	0801a220 	.word	0x0801a220
 8012e7c:	0801a1f8 	.word	0x0801a1f8
 8012e80:	20004bb0 	.word	0x20004bb0

08012e84 <dhcp_handle_nak>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_nak(struct netif *netif)
{
 8012e84:	b580      	push	{r7, lr}
 8012e86:	b084      	sub	sp, #16
 8012e88:	af00      	add	r7, sp, #0
 8012e8a:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8012e8c:	687b      	ldr	r3, [r7, #4]
 8012e8e:	6a1b      	ldr	r3, [r3, #32]
 8012e90:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_handle_nak(netif=%p) %c%c%"U16_F"\n",
    (void*)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  /* Change to a defined state - set this before assigning the address
     to ensure the callback can use dhcp_supplied_address() */
  dhcp_set_state(dhcp, DHCP_STATE_BACKING_OFF);
 8012e92:	210c      	movs	r1, #12
 8012e94:	68f8      	ldr	r0, [r7, #12]
 8012e96:	f000 ff85 	bl	8013da4 <dhcp_set_state>
  /* remove IP address from interface (must no longer be used, as per RFC2131) */
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 8012e9a:	4b06      	ldr	r3, [pc, #24]	; (8012eb4 <dhcp_handle_nak+0x30>)
 8012e9c:	4a05      	ldr	r2, [pc, #20]	; (8012eb4 <dhcp_handle_nak+0x30>)
 8012e9e:	4905      	ldr	r1, [pc, #20]	; (8012eb4 <dhcp_handle_nak+0x30>)
 8012ea0:	6878      	ldr	r0, [r7, #4]
 8012ea2:	f7f9 ff91 	bl	800cdc8 <netif_set_addr>
  /* We can immediately restart discovery */
  dhcp_discover(netif);
 8012ea6:	6878      	ldr	r0, [r7, #4]
 8012ea8:	f000 fbb6 	bl	8013618 <dhcp_discover>
}
 8012eac:	bf00      	nop
 8012eae:	3710      	adds	r7, #16
 8012eb0:	46bd      	mov	sp, r7
 8012eb2:	bd80      	pop	{r7, pc}
 8012eb4:	0801ae94 	.word	0x0801ae94

08012eb8 <dhcp_check>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_check(struct netif *netif)
{
 8012eb8:	b580      	push	{r7, lr}
 8012eba:	b084      	sub	sp, #16
 8012ebc:	af00      	add	r7, sp, #0
 8012ebe:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8012ec0:	687b      	ldr	r3, [r7, #4]
 8012ec2:	6a1b      	ldr	r3, [r3, #32]
 8012ec4:	60fb      	str	r3, [r7, #12]
  err_t result;
  u16_t msecs;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_check(netif=%p) %c%c\n", (void *)netif, (s16_t)netif->name[0],
    (s16_t)netif->name[1]));
  dhcp_set_state(dhcp, DHCP_STATE_CHECKING);
 8012ec6:	2108      	movs	r1, #8
 8012ec8:	68f8      	ldr	r0, [r7, #12]
 8012eca:	f000 ff6b 	bl	8013da4 <dhcp_set_state>
  /* create an ARP query for the offered IP address, expecting that no host
     responds, as the IP address should not be in use. */
  result = etharp_query(netif, &dhcp->offered_ip_addr, NULL);
 8012ece:	68fb      	ldr	r3, [r7, #12]
 8012ed0:	3328      	adds	r3, #40	; 0x28
 8012ed2:	2200      	movs	r2, #0
 8012ed4:	4619      	mov	r1, r3
 8012ed6:	6878      	ldr	r0, [r7, #4]
 8012ed8:	f002 fb1e 	bl	8015518 <etharp_query>
 8012edc:	4603      	mov	r3, r0
 8012ede:	72fb      	strb	r3, [r7, #11]
  if (result != ERR_OK) {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("dhcp_check: could not perform ARP query\n"));
  }
  if (dhcp->tries < 255) {
 8012ee0:	68fb      	ldr	r3, [r7, #12]
 8012ee2:	7a9b      	ldrb	r3, [r3, #10]
 8012ee4:	2bff      	cmp	r3, #255	; 0xff
 8012ee6:	d005      	beq.n	8012ef4 <dhcp_check+0x3c>
    dhcp->tries++;
 8012ee8:	68fb      	ldr	r3, [r7, #12]
 8012eea:	7a9b      	ldrb	r3, [r3, #10]
 8012eec:	3301      	adds	r3, #1
 8012eee:	b2da      	uxtb	r2, r3
 8012ef0:	68fb      	ldr	r3, [r7, #12]
 8012ef2:	729a      	strb	r2, [r3, #10]
  }
  msecs = 500;
 8012ef4:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8012ef8:	813b      	strh	r3, [r7, #8]
  dhcp->request_timeout = (msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS;
 8012efa:	893b      	ldrh	r3, [r7, #8]
 8012efc:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8012f00:	4a06      	ldr	r2, [pc, #24]	; (8012f1c <dhcp_check+0x64>)
 8012f02:	fb82 1203 	smull	r1, r2, r2, r3
 8012f06:	1152      	asrs	r2, r2, #5
 8012f08:	17db      	asrs	r3, r3, #31
 8012f0a:	1ad3      	subs	r3, r2, r3
 8012f0c:	b29a      	uxth	r2, r3
 8012f0e:	68fb      	ldr	r3, [r7, #12]
 8012f10:	82da      	strh	r2, [r3, #22]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_check(): set request timeout %"U16_F" msecs\n", msecs));
}
 8012f12:	bf00      	nop
 8012f14:	3710      	adds	r7, #16
 8012f16:	46bd      	mov	sp, r7
 8012f18:	bd80      	pop	{r7, pc}
 8012f1a:	bf00      	nop
 8012f1c:	10624dd3 	.word	0x10624dd3

08012f20 <dhcp_handle_offer>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_offer(struct netif *netif)
{
 8012f20:	b580      	push	{r7, lr}
 8012f22:	b084      	sub	sp, #16
 8012f24:	af00      	add	r7, sp, #0
 8012f26:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8012f28:	687b      	ldr	r3, [r7, #4]
 8012f2a:	6a1b      	ldr	r3, [r3, #32]
 8012f2c:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_handle_offer(netif=%p) %c%c%"U16_F"\n",
    (void*)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  /* obtain the server address */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SERVER_ID)) {
 8012f2e:	4b0c      	ldr	r3, [pc, #48]	; (8012f60 <dhcp_handle_offer+0x40>)
 8012f30:	789b      	ldrb	r3, [r3, #2]
 8012f32:	2b00      	cmp	r3, #0
 8012f34:	d00f      	beq.n	8012f56 <dhcp_handle_offer+0x36>
    ip_addr_set_ip4_u32(&dhcp->server_ip_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SERVER_ID)));
 8012f36:	4b0b      	ldr	r3, [pc, #44]	; (8012f64 <dhcp_handle_offer+0x44>)
 8012f38:	689b      	ldr	r3, [r3, #8]
 8012f3a:	4618      	mov	r0, r3
 8012f3c:	f7f9 fa84 	bl	800c448 <lwip_htonl>
 8012f40:	4602      	mov	r2, r0
 8012f42:	68fb      	ldr	r3, [r7, #12]
 8012f44:	625a      	str	r2, [r3, #36]	; 0x24
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_handle_offer(): server 0x%08"X32_F"\n",
      ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
    /* remember offered address */
    ip4_addr_copy(dhcp->offered_ip_addr, dhcp->msg_in->yiaddr);
 8012f46:	68fb      	ldr	r3, [r7, #12]
 8012f48:	685b      	ldr	r3, [r3, #4]
 8012f4a:	691a      	ldr	r2, [r3, #16]
 8012f4c:	68fb      	ldr	r3, [r7, #12]
 8012f4e:	629a      	str	r2, [r3, #40]	; 0x28
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_handle_offer(): offer for 0x%08"X32_F"\n",
      ip4_addr_get_u32(&dhcp->offered_ip_addr)));

    dhcp_select(netif);
 8012f50:	6878      	ldr	r0, [r7, #4]
 8012f52:	f000 f809 	bl	8012f68 <dhcp_select>
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
      ("dhcp_handle_offer(netif=%p) did not get server ID!\n", (void*)netif));
  }
}
 8012f56:	bf00      	nop
 8012f58:	3710      	adds	r7, #16
 8012f5a:	46bd      	mov	sp, r7
 8012f5c:	bd80      	pop	{r7, pc}
 8012f5e:	bf00      	nop
 8012f60:	2000b5cc 	.word	0x2000b5cc
 8012f64:	2000b5d4 	.word	0x2000b5d4

08012f68 <dhcp_select>:
 * @param netif the netif under DHCP control
 * @return lwIP specific error (see error.h)
 */
static err_t
dhcp_select(struct netif *netif)
{
 8012f68:	b580      	push	{r7, lr}
 8012f6a:	b088      	sub	sp, #32
 8012f6c:	af02      	add	r7, sp, #8
 8012f6e:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8012f70:	687b      	ldr	r3, [r7, #4]
 8012f72:	6a1b      	ldr	r3, [r3, #32]
 8012f74:	613b      	str	r3, [r7, #16]
  err_t result;
  u16_t msecs;
  u8_t i;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_select(netif=%p) %c%c%"U16_F"\n", (void*)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  dhcp_set_state(dhcp, DHCP_STATE_REQUESTING);
 8012f76:	2101      	movs	r1, #1
 8012f78:	6938      	ldr	r0, [r7, #16]
 8012f7a:	f000 ff13 	bl	8013da4 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  result = dhcp_create_msg(netif, dhcp, DHCP_REQUEST);
 8012f7e:	2203      	movs	r2, #3
 8012f80:	6939      	ldr	r1, [r7, #16]
 8012f82:	6878      	ldr	r0, [r7, #4]
 8012f84:	f001 fb94 	bl	80146b0 <dhcp_create_msg>
 8012f88:	4603      	mov	r3, r0
 8012f8a:	73fb      	strb	r3, [r7, #15]
  if (result == ERR_OK) {
 8012f8c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8012f90:	2b00      	cmp	r3, #0
 8012f92:	d159      	bne.n	8013048 <dhcp_select+0xe0>
    dhcp_option(dhcp, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8012f94:	2202      	movs	r2, #2
 8012f96:	2139      	movs	r1, #57	; 0x39
 8012f98:	6938      	ldr	r0, [r7, #16]
 8012f9a:	f000 ff1d 	bl	8013dd8 <dhcp_option>
    dhcp_option_short(dhcp, DHCP_MAX_MSG_LEN(netif));
 8012f9e:	687b      	ldr	r3, [r7, #4]
 8012fa0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8012fa2:	4619      	mov	r1, r3
 8012fa4:	6938      	ldr	r0, [r7, #16]
 8012fa6:	f000 ff79 	bl	8013e9c <dhcp_option_short>

    /* MUST request the offered IP address */
    dhcp_option(dhcp, DHCP_OPTION_REQUESTED_IP, 4);
 8012faa:	2204      	movs	r2, #4
 8012fac:	2132      	movs	r1, #50	; 0x32
 8012fae:	6938      	ldr	r0, [r7, #16]
 8012fb0:	f000 ff12 	bl	8013dd8 <dhcp_option>
    dhcp_option_long(dhcp, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 8012fb4:	693b      	ldr	r3, [r7, #16]
 8012fb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012fb8:	4618      	mov	r0, r3
 8012fba:	f7f9 fa45 	bl	800c448 <lwip_htonl>
 8012fbe:	4603      	mov	r3, r0
 8012fc0:	4619      	mov	r1, r3
 8012fc2:	6938      	ldr	r0, [r7, #16]
 8012fc4:	f000 ffa4 	bl	8013f10 <dhcp_option_long>

    dhcp_option(dhcp, DHCP_OPTION_SERVER_ID, 4);
 8012fc8:	2204      	movs	r2, #4
 8012fca:	2136      	movs	r1, #54	; 0x36
 8012fcc:	6938      	ldr	r0, [r7, #16]
 8012fce:	f000 ff03 	bl	8013dd8 <dhcp_option>
    dhcp_option_long(dhcp, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
 8012fd2:	693b      	ldr	r3, [r7, #16]
 8012fd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012fd6:	4618      	mov	r0, r3
 8012fd8:	f7f9 fa36 	bl	800c448 <lwip_htonl>
 8012fdc:	4603      	mov	r3, r0
 8012fde:	4619      	mov	r1, r3
 8012fe0:	6938      	ldr	r0, [r7, #16]
 8012fe2:	f000 ff95 	bl	8013f10 <dhcp_option_long>

    dhcp_option(dhcp, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8012fe6:	2203      	movs	r2, #3
 8012fe8:	2137      	movs	r1, #55	; 0x37
 8012fea:	6938      	ldr	r0, [r7, #16]
 8012fec:	f000 fef4 	bl	8013dd8 <dhcp_option>
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8012ff0:	2300      	movs	r3, #0
 8012ff2:	75fb      	strb	r3, [r7, #23]
 8012ff4:	e009      	b.n	801300a <dhcp_select+0xa2>
      dhcp_option_byte(dhcp, dhcp_discover_request_options[i]);
 8012ff6:	7dfb      	ldrb	r3, [r7, #23]
 8012ff8:	4a29      	ldr	r2, [pc, #164]	; (80130a0 <dhcp_select+0x138>)
 8012ffa:	5cd3      	ldrb	r3, [r2, r3]
 8012ffc:	4619      	mov	r1, r3
 8012ffe:	6938      	ldr	r0, [r7, #16]
 8013000:	f000 ff24 	bl	8013e4c <dhcp_option_byte>
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8013004:	7dfb      	ldrb	r3, [r7, #23]
 8013006:	3301      	adds	r3, #1
 8013008:	75fb      	strb	r3, [r7, #23]
 801300a:	7dfb      	ldrb	r3, [r7, #23]
 801300c:	2b02      	cmp	r3, #2
 801300e:	d9f2      	bls.n	8012ff6 <dhcp_select+0x8e>

#if LWIP_NETIF_HOSTNAME
    dhcp_option_hostname(dhcp, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    dhcp_option_trailer(dhcp);
 8013010:	6938      	ldr	r0, [r7, #16]
 8013012:	f001 fcf1 	bl	80149f8 <dhcp_option_trailer>
    /* shrink the pbuf to the actual content length */
    pbuf_realloc(dhcp->p_out, sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + dhcp->options_out_len);
 8013016:	693b      	ldr	r3, [r7, #16]
 8013018:	68da      	ldr	r2, [r3, #12]
 801301a:	693b      	ldr	r3, [r7, #16]
 801301c:	8a9b      	ldrh	r3, [r3, #20]
 801301e:	33f0      	adds	r3, #240	; 0xf0
 8013020:	b29b      	uxth	r3, r3
 8013022:	4619      	mov	r1, r3
 8013024:	4610      	mov	r0, r2
 8013026:	f7fa fa2f 	bl	800d488 <pbuf_realloc>

    /* send broadcast to any DHCP server */
    udp_sendto_if_src(dhcp_pcb, dhcp->p_out, IP_ADDR_BROADCAST, DHCP_SERVER_PORT, netif, IP4_ADDR_ANY);
 801302a:	4b1e      	ldr	r3, [pc, #120]	; (80130a4 <dhcp_select+0x13c>)
 801302c:	6818      	ldr	r0, [r3, #0]
 801302e:	693b      	ldr	r3, [r7, #16]
 8013030:	68d9      	ldr	r1, [r3, #12]
 8013032:	4b1d      	ldr	r3, [pc, #116]	; (80130a8 <dhcp_select+0x140>)
 8013034:	9301      	str	r3, [sp, #4]
 8013036:	687b      	ldr	r3, [r7, #4]
 8013038:	9300      	str	r3, [sp, #0]
 801303a:	2343      	movs	r3, #67	; 0x43
 801303c:	4a1b      	ldr	r2, [pc, #108]	; (80130ac <dhcp_select+0x144>)
 801303e:	f7ff fcb9 	bl	80129b4 <udp_sendto_if_src>
    dhcp_delete_msg(dhcp);
 8013042:	6938      	ldr	r0, [r7, #16]
 8013044:	f001 fc96 	bl	8014974 <dhcp_delete_msg>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_select: REQUESTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("dhcp_select: could not allocate DHCP request\n"));
  }
  if (dhcp->tries < 255) {
 8013048:	693b      	ldr	r3, [r7, #16]
 801304a:	7a9b      	ldrb	r3, [r3, #10]
 801304c:	2bff      	cmp	r3, #255	; 0xff
 801304e:	d005      	beq.n	801305c <dhcp_select+0xf4>
    dhcp->tries++;
 8013050:	693b      	ldr	r3, [r7, #16]
 8013052:	7a9b      	ldrb	r3, [r3, #10]
 8013054:	3301      	adds	r3, #1
 8013056:	b2da      	uxtb	r2, r3
 8013058:	693b      	ldr	r3, [r7, #16]
 801305a:	729a      	strb	r2, [r3, #10]
  }
  msecs = (dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000;
 801305c:	693b      	ldr	r3, [r7, #16]
 801305e:	7a9b      	ldrb	r3, [r3, #10]
 8013060:	2b05      	cmp	r3, #5
 8013062:	d807      	bhi.n	8013074 <dhcp_select+0x10c>
 8013064:	693b      	ldr	r3, [r7, #16]
 8013066:	7a9b      	ldrb	r3, [r3, #10]
 8013068:	461a      	mov	r2, r3
 801306a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 801306e:	4093      	lsls	r3, r2
 8013070:	b29b      	uxth	r3, r3
 8013072:	e001      	b.n	8013078 <dhcp_select+0x110>
 8013074:	f64e 2360 	movw	r3, #60000	; 0xea60
 8013078:	81bb      	strh	r3, [r7, #12]
  dhcp->request_timeout = (msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS;
 801307a:	89bb      	ldrh	r3, [r7, #12]
 801307c:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8013080:	4a0b      	ldr	r2, [pc, #44]	; (80130b0 <dhcp_select+0x148>)
 8013082:	fb82 1203 	smull	r1, r2, r2, r3
 8013086:	1152      	asrs	r2, r2, #5
 8013088:	17db      	asrs	r3, r3, #31
 801308a:	1ad3      	subs	r3, r2, r3
 801308c:	b29a      	uxth	r2, r3
 801308e:	693b      	ldr	r3, [r7, #16]
 8013090:	82da      	strh	r2, [r3, #22]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_select(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8013092:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8013096:	4618      	mov	r0, r3
 8013098:	3718      	adds	r7, #24
 801309a:	46bd      	mov	sp, r7
 801309c:	bd80      	pop	{r7, pc}
 801309e:	bf00      	nop
 80130a0:	20000124 	.word	0x20000124
 80130a4:	20004bb0 	.word	0x20004bb0
 80130a8:	0801ae94 	.word	0x0801ae94
 80130ac:	0801ae98 	.word	0x0801ae98
 80130b0:	10624dd3 	.word	0x10624dd3

080130b4 <dhcp_coarse_tmr>:
 * The DHCP timer that checks for lease renewal/rebind timeouts.
 * Must be called once a minute (see @ref DHCP_COARSE_TIMER_SECS).
 */
void
dhcp_coarse_tmr(void)
{
 80130b4:	b580      	push	{r7, lr}
 80130b6:	b082      	sub	sp, #8
 80130b8:	af00      	add	r7, sp, #0
  struct netif *netif = netif_list;
 80130ba:	4b27      	ldr	r3, [pc, #156]	; (8013158 <dhcp_coarse_tmr+0xa4>)
 80130bc:	681b      	ldr	r3, [r3, #0]
 80130be:	607b      	str	r3, [r7, #4]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_coarse_tmr()\n"));
  /* iterate through all network interfaces */
  while (netif != NULL) {
 80130c0:	e042      	b.n	8013148 <dhcp_coarse_tmr+0x94>
    /* only act on DHCP configured interfaces */
    struct dhcp *dhcp = netif_dhcp_data(netif);
 80130c2:	687b      	ldr	r3, [r7, #4]
 80130c4:	6a1b      	ldr	r3, [r3, #32]
 80130c6:	603b      	str	r3, [r7, #0]
    if ((dhcp != NULL) && (dhcp->state != DHCP_STATE_OFF)) {
 80130c8:	683b      	ldr	r3, [r7, #0]
 80130ca:	2b00      	cmp	r3, #0
 80130cc:	d039      	beq.n	8013142 <dhcp_coarse_tmr+0x8e>
 80130ce:	683b      	ldr	r3, [r7, #0]
 80130d0:	7a5b      	ldrb	r3, [r3, #9]
 80130d2:	2b00      	cmp	r3, #0
 80130d4:	d035      	beq.n	8013142 <dhcp_coarse_tmr+0x8e>
      /* compare lease time to expire timeout */
      if (dhcp->t0_timeout && (++dhcp->lease_used == dhcp->t0_timeout)) {
 80130d6:	683b      	ldr	r3, [r7, #0]
 80130d8:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 80130da:	2b00      	cmp	r3, #0
 80130dc:	d012      	beq.n	8013104 <dhcp_coarse_tmr+0x50>
 80130de:	683b      	ldr	r3, [r7, #0]
 80130e0:	8c1b      	ldrh	r3, [r3, #32]
 80130e2:	3301      	adds	r3, #1
 80130e4:	b29a      	uxth	r2, r3
 80130e6:	683b      	ldr	r3, [r7, #0]
 80130e8:	841a      	strh	r2, [r3, #32]
 80130ea:	683b      	ldr	r3, [r7, #0]
 80130ec:	8c1a      	ldrh	r2, [r3, #32]
 80130ee:	683b      	ldr	r3, [r7, #0]
 80130f0:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 80130f2:	429a      	cmp	r2, r3
 80130f4:	d106      	bne.n	8013104 <dhcp_coarse_tmr+0x50>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t0 timeout\n"));
        /* this clients' lease time has expired */
        dhcp_release(netif);
 80130f6:	6878      	ldr	r0, [r7, #4]
 80130f8:	f000 fd94 	bl	8013c24 <dhcp_release>
        dhcp_discover(netif);
 80130fc:	6878      	ldr	r0, [r7, #4]
 80130fe:	f000 fa8b 	bl	8013618 <dhcp_discover>
 8013102:	e01e      	b.n	8013142 <dhcp_coarse_tmr+0x8e>
      /* timer is active (non zero), and triggers (zeroes) now? */
      } else if (dhcp->t2_rebind_time && (dhcp->t2_rebind_time-- == 1)) {
 8013104:	683b      	ldr	r3, [r7, #0]
 8013106:	8bdb      	ldrh	r3, [r3, #30]
 8013108:	2b00      	cmp	r3, #0
 801310a:	d00b      	beq.n	8013124 <dhcp_coarse_tmr+0x70>
 801310c:	683b      	ldr	r3, [r7, #0]
 801310e:	8bdb      	ldrh	r3, [r3, #30]
 8013110:	1e5a      	subs	r2, r3, #1
 8013112:	b291      	uxth	r1, r2
 8013114:	683a      	ldr	r2, [r7, #0]
 8013116:	83d1      	strh	r1, [r2, #30]
 8013118:	2b01      	cmp	r3, #1
 801311a:	d103      	bne.n	8013124 <dhcp_coarse_tmr+0x70>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t2 timeout\n"));
        /* this clients' rebind timeout triggered */
        dhcp_t2_timeout(netif);
 801311c:	6878      	ldr	r0, [r7, #4]
 801311e:	f000 f8c6 	bl	80132ae <dhcp_t2_timeout>
 8013122:	e00e      	b.n	8013142 <dhcp_coarse_tmr+0x8e>
      /* timer is active (non zero), and triggers (zeroes) now */
      } else if (dhcp->t1_renew_time && (dhcp->t1_renew_time-- == 1)) {
 8013124:	683b      	ldr	r3, [r7, #0]
 8013126:	8b9b      	ldrh	r3, [r3, #28]
 8013128:	2b00      	cmp	r3, #0
 801312a:	d00a      	beq.n	8013142 <dhcp_coarse_tmr+0x8e>
 801312c:	683b      	ldr	r3, [r7, #0]
 801312e:	8b9b      	ldrh	r3, [r3, #28]
 8013130:	1e5a      	subs	r2, r3, #1
 8013132:	b291      	uxth	r1, r2
 8013134:	683a      	ldr	r2, [r7, #0]
 8013136:	8391      	strh	r1, [r2, #28]
 8013138:	2b01      	cmp	r3, #1
 801313a:	d102      	bne.n	8013142 <dhcp_coarse_tmr+0x8e>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t1 timeout\n"));
        /* this clients' renewal timeout triggered */
        dhcp_t1_timeout(netif);
 801313c:	6878      	ldr	r0, [r7, #4]
 801313e:	f000 f888 	bl	8013252 <dhcp_t1_timeout>
      }
    }
    /* proceed to next netif */
    netif = netif->next;
 8013142:	687b      	ldr	r3, [r7, #4]
 8013144:	681b      	ldr	r3, [r3, #0]
 8013146:	607b      	str	r3, [r7, #4]
  while (netif != NULL) {
 8013148:	687b      	ldr	r3, [r7, #4]
 801314a:	2b00      	cmp	r3, #0
 801314c:	d1b9      	bne.n	80130c2 <dhcp_coarse_tmr+0xe>
  }
}
 801314e:	bf00      	nop
 8013150:	3708      	adds	r7, #8
 8013152:	46bd      	mov	sp, r7
 8013154:	bd80      	pop	{r7, pc}
 8013156:	bf00      	nop
 8013158:	2000b5a0 	.word	0x2000b5a0

0801315c <dhcp_fine_tmr>:
 * A DHCP server is expected to respond within a short period of time.
 * This timer checks whether an outstanding DHCP request is timed out.
 */
void
dhcp_fine_tmr(void)
{
 801315c:	b580      	push	{r7, lr}
 801315e:	b082      	sub	sp, #8
 8013160:	af00      	add	r7, sp, #0
  struct netif *netif = netif_list;
 8013162:	4b16      	ldr	r3, [pc, #88]	; (80131bc <dhcp_fine_tmr+0x60>)
 8013164:	681b      	ldr	r3, [r3, #0]
 8013166:	607b      	str	r3, [r7, #4]
  /* loop through netif's */
  while (netif != NULL) {
 8013168:	e020      	b.n	80131ac <dhcp_fine_tmr+0x50>
    struct dhcp *dhcp = netif_dhcp_data(netif);
 801316a:	687b      	ldr	r3, [r7, #4]
 801316c:	6a1b      	ldr	r3, [r3, #32]
 801316e:	603b      	str	r3, [r7, #0]
    /* only act on DHCP configured interfaces */
    if (dhcp != NULL) {
 8013170:	683b      	ldr	r3, [r7, #0]
 8013172:	2b00      	cmp	r3, #0
 8013174:	d017      	beq.n	80131a6 <dhcp_fine_tmr+0x4a>
      /* timer is active (non zero), and is about to trigger now */
      if (dhcp->request_timeout > 1) {
 8013176:	683b      	ldr	r3, [r7, #0]
 8013178:	8adb      	ldrh	r3, [r3, #22]
 801317a:	2b01      	cmp	r3, #1
 801317c:	d906      	bls.n	801318c <dhcp_fine_tmr+0x30>
        dhcp->request_timeout--;
 801317e:	683b      	ldr	r3, [r7, #0]
 8013180:	8adb      	ldrh	r3, [r3, #22]
 8013182:	3b01      	subs	r3, #1
 8013184:	b29a      	uxth	r2, r3
 8013186:	683b      	ldr	r3, [r7, #0]
 8013188:	82da      	strh	r2, [r3, #22]
 801318a:	e00c      	b.n	80131a6 <dhcp_fine_tmr+0x4a>
      }
      else if (dhcp->request_timeout == 1) {
 801318c:	683b      	ldr	r3, [r7, #0]
 801318e:	8adb      	ldrh	r3, [r3, #22]
 8013190:	2b01      	cmp	r3, #1
 8013192:	d108      	bne.n	80131a6 <dhcp_fine_tmr+0x4a>
        dhcp->request_timeout--;
 8013194:	683b      	ldr	r3, [r7, #0]
 8013196:	8adb      	ldrh	r3, [r3, #22]
 8013198:	3b01      	subs	r3, #1
 801319a:	b29a      	uxth	r2, r3
 801319c:	683b      	ldr	r3, [r7, #0]
 801319e:	82da      	strh	r2, [r3, #22]
        /* { netif->dhcp->request_timeout == 0 } */
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_fine_tmr(): request timeout\n"));
        /* this client's request timeout triggered */
        dhcp_timeout(netif);
 80131a0:	6878      	ldr	r0, [r7, #4]
 80131a2:	f000 f80d 	bl	80131c0 <dhcp_timeout>
      }
    }
    /* proceed to next network interface */
    netif = netif->next;
 80131a6:	687b      	ldr	r3, [r7, #4]
 80131a8:	681b      	ldr	r3, [r3, #0]
 80131aa:	607b      	str	r3, [r7, #4]
  while (netif != NULL) {
 80131ac:	687b      	ldr	r3, [r7, #4]
 80131ae:	2b00      	cmp	r3, #0
 80131b0:	d1db      	bne.n	801316a <dhcp_fine_tmr+0xe>
  }
}
 80131b2:	bf00      	nop
 80131b4:	3708      	adds	r7, #8
 80131b6:	46bd      	mov	sp, r7
 80131b8:	bd80      	pop	{r7, pc}
 80131ba:	bf00      	nop
 80131bc:	2000b5a0 	.word	0x2000b5a0

080131c0 <dhcp_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_timeout(struct netif *netif)
{
 80131c0:	b580      	push	{r7, lr}
 80131c2:	b084      	sub	sp, #16
 80131c4:	af00      	add	r7, sp, #0
 80131c6:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80131c8:	687b      	ldr	r3, [r7, #4]
 80131ca:	6a1b      	ldr	r3, [r3, #32]
 80131cc:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_timeout()\n"));
  /* back-off period has passed, or server selection timed out */
  if ((dhcp->state == DHCP_STATE_BACKING_OFF) || (dhcp->state == DHCP_STATE_SELECTING)) {
 80131ce:	68fb      	ldr	r3, [r7, #12]
 80131d0:	7a5b      	ldrb	r3, [r3, #9]
 80131d2:	2b0c      	cmp	r3, #12
 80131d4:	d003      	beq.n	80131de <dhcp_timeout+0x1e>
 80131d6:	68fb      	ldr	r3, [r7, #12]
 80131d8:	7a5b      	ldrb	r3, [r3, #9]
 80131da:	2b06      	cmp	r3, #6
 80131dc:	d103      	bne.n	80131e6 <dhcp_timeout+0x26>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_timeout(): restarting discovery\n"));
    dhcp_discover(netif);
 80131de:	6878      	ldr	r0, [r7, #4]
 80131e0:	f000 fa1a 	bl	8013618 <dhcp_discover>
      dhcp_reboot(netif);
    } else {
      dhcp_discover(netif);
    }
  }
}
 80131e4:	e031      	b.n	801324a <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_REQUESTING) {
 80131e6:	68fb      	ldr	r3, [r7, #12]
 80131e8:	7a5b      	ldrb	r3, [r3, #9]
 80131ea:	2b01      	cmp	r3, #1
 80131ec:	d10e      	bne.n	801320c <dhcp_timeout+0x4c>
    if (dhcp->tries <= 5) {
 80131ee:	68fb      	ldr	r3, [r7, #12]
 80131f0:	7a9b      	ldrb	r3, [r3, #10]
 80131f2:	2b05      	cmp	r3, #5
 80131f4:	d803      	bhi.n	80131fe <dhcp_timeout+0x3e>
      dhcp_select(netif);
 80131f6:	6878      	ldr	r0, [r7, #4]
 80131f8:	f7ff feb6 	bl	8012f68 <dhcp_select>
}
 80131fc:	e025      	b.n	801324a <dhcp_timeout+0x8a>
      dhcp_release(netif);
 80131fe:	6878      	ldr	r0, [r7, #4]
 8013200:	f000 fd10 	bl	8013c24 <dhcp_release>
      dhcp_discover(netif);
 8013204:	6878      	ldr	r0, [r7, #4]
 8013206:	f000 fa07 	bl	8013618 <dhcp_discover>
}
 801320a:	e01e      	b.n	801324a <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_CHECKING) {
 801320c:	68fb      	ldr	r3, [r7, #12]
 801320e:	7a5b      	ldrb	r3, [r3, #9]
 8013210:	2b08      	cmp	r3, #8
 8013212:	d10b      	bne.n	801322c <dhcp_timeout+0x6c>
    if (dhcp->tries <= 1) {
 8013214:	68fb      	ldr	r3, [r7, #12]
 8013216:	7a9b      	ldrb	r3, [r3, #10]
 8013218:	2b01      	cmp	r3, #1
 801321a:	d803      	bhi.n	8013224 <dhcp_timeout+0x64>
      dhcp_check(netif);
 801321c:	6878      	ldr	r0, [r7, #4]
 801321e:	f7ff fe4b 	bl	8012eb8 <dhcp_check>
}
 8013222:	e012      	b.n	801324a <dhcp_timeout+0x8a>
      dhcp_bind(netif);
 8013224:	6878      	ldr	r0, [r7, #4]
 8013226:	f000 fa83 	bl	8013730 <dhcp_bind>
}
 801322a:	e00e      	b.n	801324a <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_REBOOTING) {
 801322c:	68fb      	ldr	r3, [r7, #12]
 801322e:	7a5b      	ldrb	r3, [r3, #9]
 8013230:	2b03      	cmp	r3, #3
 8013232:	d10a      	bne.n	801324a <dhcp_timeout+0x8a>
    if (dhcp->tries < REBOOT_TRIES) {
 8013234:	68fb      	ldr	r3, [r7, #12]
 8013236:	7a9b      	ldrb	r3, [r3, #10]
 8013238:	2b01      	cmp	r3, #1
 801323a:	d803      	bhi.n	8013244 <dhcp_timeout+0x84>
      dhcp_reboot(netif);
 801323c:	6878      	ldr	r0, [r7, #4]
 801323e:	f000 fc5d 	bl	8013afc <dhcp_reboot>
}
 8013242:	e002      	b.n	801324a <dhcp_timeout+0x8a>
      dhcp_discover(netif);
 8013244:	6878      	ldr	r0, [r7, #4]
 8013246:	f000 f9e7 	bl	8013618 <dhcp_discover>
}
 801324a:	bf00      	nop
 801324c:	3710      	adds	r7, #16
 801324e:	46bd      	mov	sp, r7
 8013250:	bd80      	pop	{r7, pc}

08013252 <dhcp_t1_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_t1_timeout(struct netif *netif)
{
 8013252:	b580      	push	{r7, lr}
 8013254:	b084      	sub	sp, #16
 8013256:	af00      	add	r7, sp, #0
 8013258:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801325a:	687b      	ldr	r3, [r7, #4]
 801325c:	6a1b      	ldr	r3, [r3, #32]
 801325e:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_t1_timeout()\n"));
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 8013260:	68fb      	ldr	r3, [r7, #12]
 8013262:	7a5b      	ldrb	r3, [r3, #9]
 8013264:	2b01      	cmp	r3, #1
 8013266:	d007      	beq.n	8013278 <dhcp_t1_timeout+0x26>
 8013268:	68fb      	ldr	r3, [r7, #12]
 801326a:	7a5b      	ldrb	r3, [r3, #9]
 801326c:	2b0a      	cmp	r3, #10
 801326e:	d003      	beq.n	8013278 <dhcp_t1_timeout+0x26>
      (dhcp->state == DHCP_STATE_RENEWING)) {
 8013270:	68fb      	ldr	r3, [r7, #12]
 8013272:	7a5b      	ldrb	r3, [r3, #9]
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 8013274:	2b05      	cmp	r3, #5
 8013276:	d116      	bne.n	80132a6 <dhcp_t1_timeout+0x54>
     * eventually time-out if renew tries fail. */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                ("dhcp_t1_timeout(): must renew\n"));
    /* This slightly different to RFC2131: DHCPREQUEST will be sent from state
       DHCP_STATE_RENEWING, not DHCP_STATE_BOUND */
    dhcp_renew(netif);
 8013278:	6878      	ldr	r0, [r7, #4]
 801327a:	f000 fb33 	bl	80138e4 <dhcp_renew>
    /* Calculate next timeout */
    if (((dhcp->t2_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS))
 801327e:	68fb      	ldr	r3, [r7, #12]
 8013280:	8b5b      	ldrh	r3, [r3, #26]
 8013282:	461a      	mov	r2, r3
 8013284:	68fb      	ldr	r3, [r7, #12]
 8013286:	8c1b      	ldrh	r3, [r3, #32]
 8013288:	1ad3      	subs	r3, r2, r3
 801328a:	2b01      	cmp	r3, #1
 801328c:	dd0b      	ble.n	80132a6 <dhcp_t1_timeout+0x54>
    {
       dhcp->t1_renew_time = ((dhcp->t2_timeout - dhcp->lease_used) / 2);
 801328e:	68fb      	ldr	r3, [r7, #12]
 8013290:	8b5b      	ldrh	r3, [r3, #26]
 8013292:	461a      	mov	r2, r3
 8013294:	68fb      	ldr	r3, [r7, #12]
 8013296:	8c1b      	ldrh	r3, [r3, #32]
 8013298:	1ad3      	subs	r3, r2, r3
 801329a:	0fda      	lsrs	r2, r3, #31
 801329c:	4413      	add	r3, r2
 801329e:	105b      	asrs	r3, r3, #1
 80132a0:	b29a      	uxth	r2, r3
 80132a2:	68fb      	ldr	r3, [r7, #12]
 80132a4:	839a      	strh	r2, [r3, #28]
    }
  }
}
 80132a6:	bf00      	nop
 80132a8:	3710      	adds	r7, #16
 80132aa:	46bd      	mov	sp, r7
 80132ac:	bd80      	pop	{r7, pc}

080132ae <dhcp_t2_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_t2_timeout(struct netif *netif)
{
 80132ae:	b580      	push	{r7, lr}
 80132b0:	b084      	sub	sp, #16
 80132b2:	af00      	add	r7, sp, #0
 80132b4:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80132b6:	687b      	ldr	r3, [r7, #4]
 80132b8:	6a1b      	ldr	r3, [r3, #32]
 80132ba:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_t2_timeout()\n"));
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 80132bc:	68fb      	ldr	r3, [r7, #12]
 80132be:	7a5b      	ldrb	r3, [r3, #9]
 80132c0:	2b01      	cmp	r3, #1
 80132c2:	d00b      	beq.n	80132dc <dhcp_t2_timeout+0x2e>
 80132c4:	68fb      	ldr	r3, [r7, #12]
 80132c6:	7a5b      	ldrb	r3, [r3, #9]
 80132c8:	2b0a      	cmp	r3, #10
 80132ca:	d007      	beq.n	80132dc <dhcp_t2_timeout+0x2e>
      (dhcp->state == DHCP_STATE_RENEWING) || (dhcp->state == DHCP_STATE_REBINDING)) {
 80132cc:	68fb      	ldr	r3, [r7, #12]
 80132ce:	7a5b      	ldrb	r3, [r3, #9]
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 80132d0:	2b05      	cmp	r3, #5
 80132d2:	d003      	beq.n	80132dc <dhcp_t2_timeout+0x2e>
      (dhcp->state == DHCP_STATE_RENEWING) || (dhcp->state == DHCP_STATE_REBINDING)) {
 80132d4:	68fb      	ldr	r3, [r7, #12]
 80132d6:	7a5b      	ldrb	r3, [r3, #9]
 80132d8:	2b04      	cmp	r3, #4
 80132da:	d116      	bne.n	801330a <dhcp_t2_timeout+0x5c>
    /* just retry to rebind */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                ("dhcp_t2_timeout(): must rebind\n"));
    /* This slightly different to RFC2131: DHCPREQUEST will be sent from state
       DHCP_STATE_REBINDING, not DHCP_STATE_BOUND */
    dhcp_rebind(netif);
 80132dc:	6878      	ldr	r0, [r7, #4]
 80132de:	f000 fb87 	bl	80139f0 <dhcp_rebind>
    /* Calculate next timeout */
    if (((dhcp->t0_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS))
 80132e2:	68fb      	ldr	r3, [r7, #12]
 80132e4:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 80132e6:	461a      	mov	r2, r3
 80132e8:	68fb      	ldr	r3, [r7, #12]
 80132ea:	8c1b      	ldrh	r3, [r3, #32]
 80132ec:	1ad3      	subs	r3, r2, r3
 80132ee:	2b01      	cmp	r3, #1
 80132f0:	dd0b      	ble.n	801330a <dhcp_t2_timeout+0x5c>
    {
       dhcp->t2_rebind_time = ((dhcp->t0_timeout - dhcp->lease_used) / 2);
 80132f2:	68fb      	ldr	r3, [r7, #12]
 80132f4:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 80132f6:	461a      	mov	r2, r3
 80132f8:	68fb      	ldr	r3, [r7, #12]
 80132fa:	8c1b      	ldrh	r3, [r3, #32]
 80132fc:	1ad3      	subs	r3, r2, r3
 80132fe:	0fda      	lsrs	r2, r3, #31
 8013300:	4413      	add	r3, r2
 8013302:	105b      	asrs	r3, r3, #1
 8013304:	b29a      	uxth	r2, r3
 8013306:	68fb      	ldr	r3, [r7, #12]
 8013308:	83da      	strh	r2, [r3, #30]
    }
  }
}
 801330a:	bf00      	nop
 801330c:	3710      	adds	r7, #16
 801330e:	46bd      	mov	sp, r7
 8013310:	bd80      	pop	{r7, pc}
	...

08013314 <dhcp_handle_ack>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_ack(struct netif *netif)
{
 8013314:	b580      	push	{r7, lr}
 8013316:	b084      	sub	sp, #16
 8013318:	af00      	add	r7, sp, #0
 801331a:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801331c:	687b      	ldr	r3, [r7, #4]
 801331e:	6a1b      	ldr	r3, [r3, #32]
 8013320:	60fb      	str	r3, [r7, #12]
#if LWIP_DHCP_GET_NTP_SRV
  ip4_addr_t ntp_server_addrs[LWIP_DHCP_MAX_NTP_SERVERS];
#endif

  /* clear options we might not get from the ACK */
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
 8013322:	68fb      	ldr	r3, [r7, #12]
 8013324:	2200      	movs	r2, #0
 8013326:	62da      	str	r2, [r3, #44]	; 0x2c
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 8013328:	68fb      	ldr	r3, [r7, #12]
 801332a:	2200      	movs	r2, #0
 801332c:	631a      	str	r2, [r3, #48]	; 0x30
#if LWIP_DHCP_BOOTP_FILE
  ip4_addr_set_zero(&dhcp->offered_si_addr);
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* lease time given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_LEASE_TIME)) {
 801332e:	4b27      	ldr	r3, [pc, #156]	; (80133cc <dhcp_handle_ack+0xb8>)
 8013330:	78db      	ldrb	r3, [r3, #3]
 8013332:	2b00      	cmp	r3, #0
 8013334:	d003      	beq.n	801333e <dhcp_handle_ack+0x2a>
    /* remember offered lease time */
    dhcp->offered_t0_lease = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_LEASE_TIME);
 8013336:	4b26      	ldr	r3, [pc, #152]	; (80133d0 <dhcp_handle_ack+0xbc>)
 8013338:	68da      	ldr	r2, [r3, #12]
 801333a:	68fb      	ldr	r3, [r7, #12]
 801333c:	635a      	str	r2, [r3, #52]	; 0x34
  }
  /* renewal period given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T1)) {
 801333e:	4b23      	ldr	r3, [pc, #140]	; (80133cc <dhcp_handle_ack+0xb8>)
 8013340:	791b      	ldrb	r3, [r3, #4]
 8013342:	2b00      	cmp	r3, #0
 8013344:	d004      	beq.n	8013350 <dhcp_handle_ack+0x3c>
    /* remember given renewal period */
    dhcp->offered_t1_renew = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T1);
 8013346:	4b22      	ldr	r3, [pc, #136]	; (80133d0 <dhcp_handle_ack+0xbc>)
 8013348:	691a      	ldr	r2, [r3, #16]
 801334a:	68fb      	ldr	r3, [r7, #12]
 801334c:	639a      	str	r2, [r3, #56]	; 0x38
 801334e:	e004      	b.n	801335a <dhcp_handle_ack+0x46>
  } else {
    /* calculate safe periods for renewal */
    dhcp->offered_t1_renew = dhcp->offered_t0_lease / 2;
 8013350:	68fb      	ldr	r3, [r7, #12]
 8013352:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013354:	085a      	lsrs	r2, r3, #1
 8013356:	68fb      	ldr	r3, [r7, #12]
 8013358:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* renewal period given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T2)) {
 801335a:	4b1c      	ldr	r3, [pc, #112]	; (80133cc <dhcp_handle_ack+0xb8>)
 801335c:	795b      	ldrb	r3, [r3, #5]
 801335e:	2b00      	cmp	r3, #0
 8013360:	d004      	beq.n	801336c <dhcp_handle_ack+0x58>
    /* remember given rebind period */
    dhcp->offered_t2_rebind = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T2);
 8013362:	4b1b      	ldr	r3, [pc, #108]	; (80133d0 <dhcp_handle_ack+0xbc>)
 8013364:	695a      	ldr	r2, [r3, #20]
 8013366:	68fb      	ldr	r3, [r7, #12]
 8013368:	63da      	str	r2, [r3, #60]	; 0x3c
 801336a:	e007      	b.n	801337c <dhcp_handle_ack+0x68>
  } else {
    /* calculate safe periods for rebinding (offered_t0_lease * 0.875 -> 87.5%)*/
    dhcp->offered_t2_rebind = (dhcp->offered_t0_lease * 7U) / 8U;
 801336c:	68fb      	ldr	r3, [r7, #12]
 801336e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8013370:	4613      	mov	r3, r2
 8013372:	00db      	lsls	r3, r3, #3
 8013374:	1a9b      	subs	r3, r3, r2
 8013376:	08da      	lsrs	r2, r3, #3
 8013378:	68fb      	ldr	r3, [r7, #12]
 801337a:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* (y)our internet address */
  ip4_addr_copy(dhcp->offered_ip_addr, dhcp->msg_in->yiaddr);
 801337c:	68fb      	ldr	r3, [r7, #12]
 801337e:	685b      	ldr	r3, [r3, #4]
 8013380:	691a      	ldr	r2, [r3, #16]
 8013382:	68fb      	ldr	r3, [r7, #12]
 8013384:	629a      	str	r2, [r3, #40]	; 0x28
     boot file name copied in dhcp_parse_reply if not overloaded */
  ip4_addr_copy(dhcp->offered_si_addr, dhcp->msg_in->siaddr);
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* subnet mask given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)) {
 8013386:	4b11      	ldr	r3, [pc, #68]	; (80133cc <dhcp_handle_ack+0xb8>)
 8013388:	799b      	ldrb	r3, [r3, #6]
 801338a:	2b00      	cmp	r3, #0
 801338c:	d00b      	beq.n	80133a6 <dhcp_handle_ack+0x92>
    /* remember given subnet mask */
    ip4_addr_set_u32(&dhcp->offered_sn_mask, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)));
 801338e:	4b10      	ldr	r3, [pc, #64]	; (80133d0 <dhcp_handle_ack+0xbc>)
 8013390:	699b      	ldr	r3, [r3, #24]
 8013392:	4618      	mov	r0, r3
 8013394:	f7f9 f858 	bl	800c448 <lwip_htonl>
 8013398:	4602      	mov	r2, r0
 801339a:	68fb      	ldr	r3, [r7, #12]
 801339c:	62da      	str	r2, [r3, #44]	; 0x2c
    dhcp->subnet_mask_given = 1;
 801339e:	68fb      	ldr	r3, [r7, #12]
 80133a0:	2201      	movs	r2, #1
 80133a2:	72da      	strb	r2, [r3, #11]
 80133a4:	e002      	b.n	80133ac <dhcp_handle_ack+0x98>
  } else {
    dhcp->subnet_mask_given = 0;
 80133a6:	68fb      	ldr	r3, [r7, #12]
 80133a8:	2200      	movs	r2, #0
 80133aa:	72da      	strb	r2, [r3, #11]
  }

  /* gateway router */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_ROUTER)) {
 80133ac:	4b07      	ldr	r3, [pc, #28]	; (80133cc <dhcp_handle_ack+0xb8>)
 80133ae:	79db      	ldrb	r3, [r3, #7]
 80133b0:	2b00      	cmp	r3, #0
 80133b2:	d007      	beq.n	80133c4 <dhcp_handle_ack+0xb0>
    ip4_addr_set_u32(&dhcp->offered_gw_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_ROUTER)));
 80133b4:	4b06      	ldr	r3, [pc, #24]	; (80133d0 <dhcp_handle_ack+0xbc>)
 80133b6:	69db      	ldr	r3, [r3, #28]
 80133b8:	4618      	mov	r0, r3
 80133ba:	f7f9 f845 	bl	800c448 <lwip_htonl>
 80133be:	4602      	mov	r2, r0
 80133c0:	68fb      	ldr	r3, [r7, #12]
 80133c2:	631a      	str	r2, [r3, #48]	; 0x30
    ip_addr_t dns_addr;
    ip_addr_set_ip4_u32(&dns_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_DNS_SERVER + n)));
    dns_setserver(n, &dns_addr);
  }
#endif /* LWIP_DHCP_PROVIDE_DNS_SERVERS */
}
 80133c4:	bf00      	nop
 80133c6:	3710      	adds	r7, #16
 80133c8:	46bd      	mov	sp, r7
 80133ca:	bd80      	pop	{r7, pc}
 80133cc:	2000b5cc 	.word	0x2000b5cc
 80133d0:	2000b5d4 	.word	0x2000b5d4

080133d4 <dhcp_start>:
 * - ERR_OK - No error
 * - ERR_MEM - Out of memory
 */
err_t
dhcp_start(struct netif *netif)
{
 80133d4:	b580      	push	{r7, lr}
 80133d6:	b084      	sub	sp, #16
 80133d8:	af00      	add	r7, sp, #0
 80133da:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp;
  err_t result;

  LWIP_ERROR("netif != NULL", (netif != NULL), return ERR_ARG;);
 80133dc:	687b      	ldr	r3, [r7, #4]
 80133de:	2b00      	cmp	r3, #0
 80133e0:	d109      	bne.n	80133f6 <dhcp_start+0x22>
 80133e2:	4b3c      	ldr	r3, [pc, #240]	; (80134d4 <dhcp_start+0x100>)
 80133e4:	f240 22d6 	movw	r2, #726	; 0x2d6
 80133e8:	493b      	ldr	r1, [pc, #236]	; (80134d8 <dhcp_start+0x104>)
 80133ea:	483c      	ldr	r0, [pc, #240]	; (80134dc <dhcp_start+0x108>)
 80133ec:	f004 fc8e 	bl	8017d0c <iprintf>
 80133f0:	f06f 030f 	mvn.w	r3, #15
 80133f4:	e069      	b.n	80134ca <dhcp_start+0xf6>
  LWIP_ERROR("netif is not up, old style port?", netif_is_up(netif), return ERR_ARG;);
 80133f6:	687b      	ldr	r3, [r7, #4]
 80133f8:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80133fc:	f003 0301 	and.w	r3, r3, #1
 8013400:	2b00      	cmp	r3, #0
 8013402:	d109      	bne.n	8013418 <dhcp_start+0x44>
 8013404:	4b33      	ldr	r3, [pc, #204]	; (80134d4 <dhcp_start+0x100>)
 8013406:	f240 22d7 	movw	r2, #727	; 0x2d7
 801340a:	4935      	ldr	r1, [pc, #212]	; (80134e0 <dhcp_start+0x10c>)
 801340c:	4833      	ldr	r0, [pc, #204]	; (80134dc <dhcp_start+0x108>)
 801340e:	f004 fc7d 	bl	8017d0c <iprintf>
 8013412:	f06f 030f 	mvn.w	r3, #15
 8013416:	e058      	b.n	80134ca <dhcp_start+0xf6>
  dhcp = netif_dhcp_data(netif);
 8013418:	687b      	ldr	r3, [r7, #4]
 801341a:	6a1b      	ldr	r3, [r3, #32]
 801341c:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_start(netif=%p) %c%c%"U16_F"\n", (void*)netif, netif->name[0], netif->name[1], (u16_t)netif->num));

  /* check MTU of the netif */
  if (netif->mtu < DHCP_MAX_MSG_LEN_MIN_REQUIRED) {
 801341e:	687b      	ldr	r3, [r7, #4]
 8013420:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8013422:	f5b3 7f10 	cmp.w	r3, #576	; 0x240
 8013426:	d202      	bcs.n	801342e <dhcp_start+0x5a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): Cannot use this netif with DHCP: MTU is too small\n"));
    return ERR_MEM;
 8013428:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801342c:	e04d      	b.n	80134ca <dhcp_start+0xf6>
  }

  /* no DHCP client attached yet? */
  if (dhcp == NULL) {
 801342e:	68fb      	ldr	r3, [r7, #12]
 8013430:	2b00      	cmp	r3, #0
 8013432:	d10d      	bne.n	8013450 <dhcp_start+0x7c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): mallocing new DHCP client\n"));
    dhcp = (struct dhcp *)mem_malloc(sizeof(struct dhcp));
 8013434:	2040      	movs	r0, #64	; 0x40
 8013436:	f7f9 fa77 	bl	800c928 <mem_malloc>
 801343a:	60f8      	str	r0, [r7, #12]
    if (dhcp == NULL) {
 801343c:	68fb      	ldr	r3, [r7, #12]
 801343e:	2b00      	cmp	r3, #0
 8013440:	d102      	bne.n	8013448 <dhcp_start+0x74>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): could not allocate dhcp\n"));
      return ERR_MEM;
 8013442:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8013446:	e040      	b.n	80134ca <dhcp_start+0xf6>
    }

    /* store this dhcp client in the netif */
    netif_set_client_data(netif, LWIP_NETIF_CLIENT_DATA_INDEX_DHCP, dhcp);
 8013448:	687b      	ldr	r3, [r7, #4]
 801344a:	68fa      	ldr	r2, [r7, #12]
 801344c:	621a      	str	r2, [r3, #32]
 801344e:	e01b      	b.n	8013488 <dhcp_start+0xb4>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): allocated dhcp"));
  /* already has DHCP client attached */
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_start(): restarting DHCP configuration\n"));
    LWIP_ASSERT("pbuf p_out wasn't freed", dhcp->p_out == NULL);
 8013450:	68fb      	ldr	r3, [r7, #12]
 8013452:	68db      	ldr	r3, [r3, #12]
 8013454:	2b00      	cmp	r3, #0
 8013456:	d006      	beq.n	8013466 <dhcp_start+0x92>
 8013458:	4b1e      	ldr	r3, [pc, #120]	; (80134d4 <dhcp_start+0x100>)
 801345a:	f44f 723c 	mov.w	r2, #752	; 0x2f0
 801345e:	4921      	ldr	r1, [pc, #132]	; (80134e4 <dhcp_start+0x110>)
 8013460:	481e      	ldr	r0, [pc, #120]	; (80134dc <dhcp_start+0x108>)
 8013462:	f004 fc53 	bl	8017d0c <iprintf>
    LWIP_ASSERT("reply wasn't freed", dhcp->msg_in == NULL );
 8013466:	68fb      	ldr	r3, [r7, #12]
 8013468:	685b      	ldr	r3, [r3, #4]
 801346a:	2b00      	cmp	r3, #0
 801346c:	d006      	beq.n	801347c <dhcp_start+0xa8>
 801346e:	4b19      	ldr	r3, [pc, #100]	; (80134d4 <dhcp_start+0x100>)
 8013470:	f240 22f1 	movw	r2, #753	; 0x2f1
 8013474:	491c      	ldr	r1, [pc, #112]	; (80134e8 <dhcp_start+0x114>)
 8013476:	4819      	ldr	r0, [pc, #100]	; (80134dc <dhcp_start+0x108>)
 8013478:	f004 fc48 	bl	8017d0c <iprintf>

    if (dhcp->pcb_allocated != 0) {
 801347c:	68fb      	ldr	r3, [r7, #12]
 801347e:	7a1b      	ldrb	r3, [r3, #8]
 8013480:	2b00      	cmp	r3, #0
 8013482:	d001      	beq.n	8013488 <dhcp_start+0xb4>
      dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 8013484:	f7ff fcd4 	bl	8012e30 <dhcp_dec_pcb_refcount>
    }
    /* dhcp is cleared below, no need to reset flag*/
  }

  /* clear data structure */
  memset(dhcp, 0, sizeof(struct dhcp));
 8013488:	2240      	movs	r2, #64	; 0x40
 801348a:	2100      	movs	r1, #0
 801348c:	68f8      	ldr	r0, [r7, #12]
 801348e:	f004 fb8d 	bl	8017bac <memset>
  /* dhcp_set_state(&dhcp, DHCP_STATE_OFF); */

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): starting DHCP configuration\n"));

  if (dhcp_inc_pcb_refcount() != ERR_OK) { /* ensure DHCP PCB is allocated */
 8013492:	f7ff fc7b 	bl	8012d8c <dhcp_inc_pcb_refcount>
 8013496:	4603      	mov	r3, r0
 8013498:	2b00      	cmp	r3, #0
 801349a:	d002      	beq.n	80134a2 <dhcp_start+0xce>
    return ERR_MEM;
 801349c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80134a0:	e013      	b.n	80134ca <dhcp_start+0xf6>
  }
  dhcp->pcb_allocated = 1;
 80134a2:	68fb      	ldr	r3, [r7, #12]
 80134a4:	2201      	movs	r2, #1
 80134a6:	721a      	strb	r2, [r3, #8]
  }
#endif /* LWIP_DHCP_CHECK_LINK_UP */


  /* (re)start the DHCP negotiation */
  result = dhcp_discover(netif);
 80134a8:	6878      	ldr	r0, [r7, #4]
 80134aa:	f000 f8b5 	bl	8013618 <dhcp_discover>
 80134ae:	4603      	mov	r3, r0
 80134b0:	72fb      	strb	r3, [r7, #11]
  if (result != ERR_OK) {
 80134b2:	f997 300b 	ldrsb.w	r3, [r7, #11]
 80134b6:	2b00      	cmp	r3, #0
 80134b8:	d005      	beq.n	80134c6 <dhcp_start+0xf2>
    /* free resources allocated above */
    dhcp_stop(netif);
 80134ba:	6878      	ldr	r0, [r7, #4]
 80134bc:	f000 fc3a 	bl	8013d34 <dhcp_stop>
    return ERR_MEM;
 80134c0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80134c4:	e001      	b.n	80134ca <dhcp_start+0xf6>
  }
  return result;
 80134c6:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 80134ca:	4618      	mov	r0, r3
 80134cc:	3710      	adds	r7, #16
 80134ce:	46bd      	mov	sp, r7
 80134d0:	bd80      	pop	{r7, pc}
 80134d2:	bf00      	nop
 80134d4:	0801a198 	.word	0x0801a198
 80134d8:	0801a244 	.word	0x0801a244
 80134dc:	0801a1f8 	.word	0x0801a1f8
 80134e0:	0801a288 	.word	0x0801a288
 80134e4:	0801a2ac 	.word	0x0801a2ac
 80134e8:	0801a2c4 	.word	0x0801a2c4

080134ec <dhcp_arp_reply>:
 * @param netif the network interface on which the reply was received
 * @param addr The IP address we received a reply from
 */
void
dhcp_arp_reply(struct netif *netif, const ip4_addr_t *addr)
{
 80134ec:	b580      	push	{r7, lr}
 80134ee:	b084      	sub	sp, #16
 80134f0:	af00      	add	r7, sp, #0
 80134f2:	6078      	str	r0, [r7, #4]
 80134f4:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp;

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 80134f6:	687b      	ldr	r3, [r7, #4]
 80134f8:	2b00      	cmp	r3, #0
 80134fa:	d107      	bne.n	801350c <dhcp_arp_reply+0x20>
 80134fc:	4b0e      	ldr	r3, [pc, #56]	; (8013538 <dhcp_arp_reply+0x4c>)
 80134fe:	f240 327b 	movw	r2, #891	; 0x37b
 8013502:	490e      	ldr	r1, [pc, #56]	; (801353c <dhcp_arp_reply+0x50>)
 8013504:	480e      	ldr	r0, [pc, #56]	; (8013540 <dhcp_arp_reply+0x54>)
 8013506:	f004 fc01 	bl	8017d0c <iprintf>
 801350a:	e012      	b.n	8013532 <dhcp_arp_reply+0x46>
  dhcp = netif_dhcp_data(netif);
 801350c:	687b      	ldr	r3, [r7, #4]
 801350e:	6a1b      	ldr	r3, [r3, #32]
 8013510:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_arp_reply()\n"));
  /* is a DHCP client doing an ARP check? */
  if ((dhcp != NULL) && (dhcp->state == DHCP_STATE_CHECKING)) {
 8013512:	68fb      	ldr	r3, [r7, #12]
 8013514:	2b00      	cmp	r3, #0
 8013516:	d00c      	beq.n	8013532 <dhcp_arp_reply+0x46>
 8013518:	68fb      	ldr	r3, [r7, #12]
 801351a:	7a5b      	ldrb	r3, [r3, #9]
 801351c:	2b08      	cmp	r3, #8
 801351e:	d108      	bne.n	8013532 <dhcp_arp_reply+0x46>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_arp_reply(): CHECKING, arp reply for 0x%08"X32_F"\n",
      ip4_addr_get_u32(addr)));
    /* did a host respond with the address we
       were offered by the DHCP server? */
    if (ip4_addr_cmp(addr, &dhcp->offered_ip_addr)) {
 8013520:	683b      	ldr	r3, [r7, #0]
 8013522:	681a      	ldr	r2, [r3, #0]
 8013524:	68fb      	ldr	r3, [r7, #12]
 8013526:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013528:	429a      	cmp	r2, r3
 801352a:	d102      	bne.n	8013532 <dhcp_arp_reply+0x46>
      /* we will not accept the offered address */
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE | LWIP_DBG_LEVEL_WARNING,
        ("dhcp_arp_reply(): arp reply matched with offered address, declining\n"));
      dhcp_decline(netif);
 801352c:	6878      	ldr	r0, [r7, #4]
 801352e:	f000 f809 	bl	8013544 <dhcp_decline>
    }
  }
}
 8013532:	3710      	adds	r7, #16
 8013534:	46bd      	mov	sp, r7
 8013536:	bd80      	pop	{r7, pc}
 8013538:	0801a198 	.word	0x0801a198
 801353c:	0801a244 	.word	0x0801a244
 8013540:	0801a1f8 	.word	0x0801a1f8

08013544 <dhcp_decline>:
 *
 * @param netif the netif under DHCP control
 */
static err_t
dhcp_decline(struct netif *netif)
{
 8013544:	b580      	push	{r7, lr}
 8013546:	b086      	sub	sp, #24
 8013548:	af02      	add	r7, sp, #8
 801354a:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801354c:	687b      	ldr	r3, [r7, #4]
 801354e:	6a1b      	ldr	r3, [r3, #32]
 8013550:	60fb      	str	r3, [r7, #12]
  err_t result = ERR_OK;
 8013552:	2300      	movs	r3, #0
 8013554:	72fb      	strb	r3, [r7, #11]
  u16_t msecs;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_decline()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_BACKING_OFF);
 8013556:	210c      	movs	r1, #12
 8013558:	68f8      	ldr	r0, [r7, #12]
 801355a:	f000 fc23 	bl	8013da4 <dhcp_set_state>
  /* create and initialize the DHCP message header */
  result = dhcp_create_msg(netif, dhcp, DHCP_DECLINE);
 801355e:	2204      	movs	r2, #4
 8013560:	68f9      	ldr	r1, [r7, #12]
 8013562:	6878      	ldr	r0, [r7, #4]
 8013564:	f001 f8a4 	bl	80146b0 <dhcp_create_msg>
 8013568:	4603      	mov	r3, r0
 801356a:	72fb      	strb	r3, [r7, #11]
  if (result == ERR_OK) {
 801356c:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8013570:	2b00      	cmp	r3, #0
 8013572:	d12a      	bne.n	80135ca <dhcp_decline+0x86>
    dhcp_option(dhcp, DHCP_OPTION_REQUESTED_IP, 4);
 8013574:	2204      	movs	r2, #4
 8013576:	2132      	movs	r1, #50	; 0x32
 8013578:	68f8      	ldr	r0, [r7, #12]
 801357a:	f000 fc2d 	bl	8013dd8 <dhcp_option>
    dhcp_option_long(dhcp, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 801357e:	68fb      	ldr	r3, [r7, #12]
 8013580:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013582:	4618      	mov	r0, r3
 8013584:	f7f8 ff60 	bl	800c448 <lwip_htonl>
 8013588:	4603      	mov	r3, r0
 801358a:	4619      	mov	r1, r3
 801358c:	68f8      	ldr	r0, [r7, #12]
 801358e:	f000 fcbf 	bl	8013f10 <dhcp_option_long>

    dhcp_option_trailer(dhcp);
 8013592:	68f8      	ldr	r0, [r7, #12]
 8013594:	f001 fa30 	bl	80149f8 <dhcp_option_trailer>
    /* resize pbuf to reflect true size of options */
    pbuf_realloc(dhcp->p_out, sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + dhcp->options_out_len);
 8013598:	68fb      	ldr	r3, [r7, #12]
 801359a:	68da      	ldr	r2, [r3, #12]
 801359c:	68fb      	ldr	r3, [r7, #12]
 801359e:	8a9b      	ldrh	r3, [r3, #20]
 80135a0:	33f0      	adds	r3, #240	; 0xf0
 80135a2:	b29b      	uxth	r3, r3
 80135a4:	4619      	mov	r1, r3
 80135a6:	4610      	mov	r0, r2
 80135a8:	f7f9 ff6e 	bl	800d488 <pbuf_realloc>

    /* per section 4.4.4, broadcast DECLINE messages */
    udp_sendto_if_src(dhcp_pcb, dhcp->p_out, IP_ADDR_BROADCAST, DHCP_SERVER_PORT, netif, IP4_ADDR_ANY);
 80135ac:	4b16      	ldr	r3, [pc, #88]	; (8013608 <dhcp_decline+0xc4>)
 80135ae:	6818      	ldr	r0, [r3, #0]
 80135b0:	68fb      	ldr	r3, [r7, #12]
 80135b2:	68d9      	ldr	r1, [r3, #12]
 80135b4:	4b15      	ldr	r3, [pc, #84]	; (801360c <dhcp_decline+0xc8>)
 80135b6:	9301      	str	r3, [sp, #4]
 80135b8:	687b      	ldr	r3, [r7, #4]
 80135ba:	9300      	str	r3, [sp, #0]
 80135bc:	2343      	movs	r3, #67	; 0x43
 80135be:	4a14      	ldr	r2, [pc, #80]	; (8013610 <dhcp_decline+0xcc>)
 80135c0:	f7ff f9f8 	bl	80129b4 <udp_sendto_if_src>
    dhcp_delete_msg(dhcp);
 80135c4:	68f8      	ldr	r0, [r7, #12]
 80135c6:	f001 f9d5 	bl	8014974 <dhcp_delete_msg>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_decline: BACKING OFF\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
      ("dhcp_decline: could not allocate DHCP request\n"));
  }
  if (dhcp->tries < 255) {
 80135ca:	68fb      	ldr	r3, [r7, #12]
 80135cc:	7a9b      	ldrb	r3, [r3, #10]
 80135ce:	2bff      	cmp	r3, #255	; 0xff
 80135d0:	d005      	beq.n	80135de <dhcp_decline+0x9a>
    dhcp->tries++;
 80135d2:	68fb      	ldr	r3, [r7, #12]
 80135d4:	7a9b      	ldrb	r3, [r3, #10]
 80135d6:	3301      	adds	r3, #1
 80135d8:	b2da      	uxtb	r2, r3
 80135da:	68fb      	ldr	r3, [r7, #12]
 80135dc:	729a      	strb	r2, [r3, #10]
  }
  msecs = 10*1000;
 80135de:	f242 7310 	movw	r3, #10000	; 0x2710
 80135e2:	813b      	strh	r3, [r7, #8]
  dhcp->request_timeout = (msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS;
 80135e4:	893b      	ldrh	r3, [r7, #8]
 80135e6:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 80135ea:	4a0a      	ldr	r2, [pc, #40]	; (8013614 <dhcp_decline+0xd0>)
 80135ec:	fb82 1203 	smull	r1, r2, r2, r3
 80135f0:	1152      	asrs	r2, r2, #5
 80135f2:	17db      	asrs	r3, r3, #31
 80135f4:	1ad3      	subs	r3, r2, r3
 80135f6:	b29a      	uxth	r2, r3
 80135f8:	68fb      	ldr	r3, [r7, #12]
 80135fa:	82da      	strh	r2, [r3, #22]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_decline(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 80135fc:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8013600:	4618      	mov	r0, r3
 8013602:	3710      	adds	r7, #16
 8013604:	46bd      	mov	sp, r7
 8013606:	bd80      	pop	{r7, pc}
 8013608:	20004bb0 	.word	0x20004bb0
 801360c:	0801ae94 	.word	0x0801ae94
 8013610:	0801ae98 	.word	0x0801ae98
 8013614:	10624dd3 	.word	0x10624dd3

08013618 <dhcp_discover>:
 *
 * @param netif the netif under DHCP control
 */
static err_t
dhcp_discover(struct netif *netif)
{
 8013618:	b580      	push	{r7, lr}
 801361a:	b088      	sub	sp, #32
 801361c:	af02      	add	r7, sp, #8
 801361e:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8013620:	687b      	ldr	r3, [r7, #4]
 8013622:	6a1b      	ldr	r3, [r3, #32]
 8013624:	613b      	str	r3, [r7, #16]
  err_t result = ERR_OK;
 8013626:	2300      	movs	r3, #0
 8013628:	73fb      	strb	r3, [r7, #15]
  u16_t msecs;
  u8_t i;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover()\n"));
  ip4_addr_set_any(&dhcp->offered_ip_addr);
 801362a:	693b      	ldr	r3, [r7, #16]
 801362c:	2200      	movs	r2, #0
 801362e:	629a      	str	r2, [r3, #40]	; 0x28
  dhcp_set_state(dhcp, DHCP_STATE_SELECTING);
 8013630:	2106      	movs	r1, #6
 8013632:	6938      	ldr	r0, [r7, #16]
 8013634:	f000 fbb6 	bl	8013da4 <dhcp_set_state>
  /* create and initialize the DHCP message header */
  result = dhcp_create_msg(netif, dhcp, DHCP_DISCOVER);
 8013638:	2201      	movs	r2, #1
 801363a:	6939      	ldr	r1, [r7, #16]
 801363c:	6878      	ldr	r0, [r7, #4]
 801363e:	f001 f837 	bl	80146b0 <dhcp_create_msg>
 8013642:	4603      	mov	r3, r0
 8013644:	73fb      	strb	r3, [r7, #15]
  if (result == ERR_OK) {
 8013646:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801364a:	2b00      	cmp	r3, #0
 801364c:	d13b      	bne.n	80136c6 <dhcp_discover+0xae>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: making request\n"));

    dhcp_option(dhcp, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 801364e:	2202      	movs	r2, #2
 8013650:	2139      	movs	r1, #57	; 0x39
 8013652:	6938      	ldr	r0, [r7, #16]
 8013654:	f000 fbc0 	bl	8013dd8 <dhcp_option>
    dhcp_option_short(dhcp, DHCP_MAX_MSG_LEN(netif));
 8013658:	687b      	ldr	r3, [r7, #4]
 801365a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 801365c:	4619      	mov	r1, r3
 801365e:	6938      	ldr	r0, [r7, #16]
 8013660:	f000 fc1c 	bl	8013e9c <dhcp_option_short>

    dhcp_option(dhcp, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8013664:	2203      	movs	r2, #3
 8013666:	2137      	movs	r1, #55	; 0x37
 8013668:	6938      	ldr	r0, [r7, #16]
 801366a:	f000 fbb5 	bl	8013dd8 <dhcp_option>
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 801366e:	2300      	movs	r3, #0
 8013670:	75fb      	strb	r3, [r7, #23]
 8013672:	e009      	b.n	8013688 <dhcp_discover+0x70>
      dhcp_option_byte(dhcp, dhcp_discover_request_options[i]);
 8013674:	7dfb      	ldrb	r3, [r7, #23]
 8013676:	4a29      	ldr	r2, [pc, #164]	; (801371c <dhcp_discover+0x104>)
 8013678:	5cd3      	ldrb	r3, [r2, r3]
 801367a:	4619      	mov	r1, r3
 801367c:	6938      	ldr	r0, [r7, #16]
 801367e:	f000 fbe5 	bl	8013e4c <dhcp_option_byte>
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8013682:	7dfb      	ldrb	r3, [r7, #23]
 8013684:	3301      	adds	r3, #1
 8013686:	75fb      	strb	r3, [r7, #23]
 8013688:	7dfb      	ldrb	r3, [r7, #23]
 801368a:	2b02      	cmp	r3, #2
 801368c:	d9f2      	bls.n	8013674 <dhcp_discover+0x5c>
    }
    dhcp_option_trailer(dhcp);
 801368e:	6938      	ldr	r0, [r7, #16]
 8013690:	f001 f9b2 	bl	80149f8 <dhcp_option_trailer>

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: realloc()ing\n"));
    pbuf_realloc(dhcp->p_out, sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + dhcp->options_out_len);
 8013694:	693b      	ldr	r3, [r7, #16]
 8013696:	68da      	ldr	r2, [r3, #12]
 8013698:	693b      	ldr	r3, [r7, #16]
 801369a:	8a9b      	ldrh	r3, [r3, #20]
 801369c:	33f0      	adds	r3, #240	; 0xf0
 801369e:	b29b      	uxth	r3, r3
 80136a0:	4619      	mov	r1, r3
 80136a2:	4610      	mov	r0, r2
 80136a4:	f7f9 fef0 	bl	800d488 <pbuf_realloc>

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: sendto(DISCOVER, IP_ADDR_BROADCAST, DHCP_SERVER_PORT)\n"));
    udp_sendto_if_src(dhcp_pcb, dhcp->p_out, IP_ADDR_BROADCAST, DHCP_SERVER_PORT, netif, IP4_ADDR_ANY);
 80136a8:	4b1d      	ldr	r3, [pc, #116]	; (8013720 <dhcp_discover+0x108>)
 80136aa:	6818      	ldr	r0, [r3, #0]
 80136ac:	693b      	ldr	r3, [r7, #16]
 80136ae:	68d9      	ldr	r1, [r3, #12]
 80136b0:	4b1c      	ldr	r3, [pc, #112]	; (8013724 <dhcp_discover+0x10c>)
 80136b2:	9301      	str	r3, [sp, #4]
 80136b4:	687b      	ldr	r3, [r7, #4]
 80136b6:	9300      	str	r3, [sp, #0]
 80136b8:	2343      	movs	r3, #67	; 0x43
 80136ba:	4a1b      	ldr	r2, [pc, #108]	; (8013728 <dhcp_discover+0x110>)
 80136bc:	f7ff f97a 	bl	80129b4 <udp_sendto_if_src>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: deleting()ing\n"));
    dhcp_delete_msg(dhcp);
 80136c0:	6938      	ldr	r0, [r7, #16]
 80136c2:	f001 f957 	bl	8014974 <dhcp_delete_msg>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_discover: SELECTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_discover: could not allocate DHCP request\n"));
  }
  if (dhcp->tries < 255) {
 80136c6:	693b      	ldr	r3, [r7, #16]
 80136c8:	7a9b      	ldrb	r3, [r3, #10]
 80136ca:	2bff      	cmp	r3, #255	; 0xff
 80136cc:	d005      	beq.n	80136da <dhcp_discover+0xc2>
    dhcp->tries++;
 80136ce:	693b      	ldr	r3, [r7, #16]
 80136d0:	7a9b      	ldrb	r3, [r3, #10]
 80136d2:	3301      	adds	r3, #1
 80136d4:	b2da      	uxtb	r2, r3
 80136d6:	693b      	ldr	r3, [r7, #16]
 80136d8:	729a      	strb	r2, [r3, #10]
  if (dhcp->tries >= LWIP_DHCP_AUTOIP_COOP_TRIES && dhcp->autoip_coop_state == DHCP_AUTOIP_COOP_STATE_OFF) {
    dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_ON;
    autoip_start(netif);
  }
#endif /* LWIP_DHCP_AUTOIP_COOP */
  msecs = (dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000;
 80136da:	693b      	ldr	r3, [r7, #16]
 80136dc:	7a9b      	ldrb	r3, [r3, #10]
 80136de:	2b05      	cmp	r3, #5
 80136e0:	d807      	bhi.n	80136f2 <dhcp_discover+0xda>
 80136e2:	693b      	ldr	r3, [r7, #16]
 80136e4:	7a9b      	ldrb	r3, [r3, #10]
 80136e6:	461a      	mov	r2, r3
 80136e8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80136ec:	4093      	lsls	r3, r2
 80136ee:	b29b      	uxth	r3, r3
 80136f0:	e001      	b.n	80136f6 <dhcp_discover+0xde>
 80136f2:	f64e 2360 	movw	r3, #60000	; 0xea60
 80136f6:	81bb      	strh	r3, [r7, #12]
  dhcp->request_timeout = (msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS;
 80136f8:	89bb      	ldrh	r3, [r7, #12]
 80136fa:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 80136fe:	4a0b      	ldr	r2, [pc, #44]	; (801372c <dhcp_discover+0x114>)
 8013700:	fb82 1203 	smull	r1, r2, r2, r3
 8013704:	1152      	asrs	r2, r2, #5
 8013706:	17db      	asrs	r3, r3, #31
 8013708:	1ad3      	subs	r3, r2, r3
 801370a:	b29a      	uxth	r2, r3
 801370c:	693b      	ldr	r3, [r7, #16]
 801370e:	82da      	strh	r2, [r3, #22]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_discover(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8013710:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8013714:	4618      	mov	r0, r3
 8013716:	3718      	adds	r7, #24
 8013718:	46bd      	mov	sp, r7
 801371a:	bd80      	pop	{r7, pc}
 801371c:	20000124 	.word	0x20000124
 8013720:	20004bb0 	.word	0x20004bb0
 8013724:	0801ae94 	.word	0x0801ae94
 8013728:	0801ae98 	.word	0x0801ae98
 801372c:	10624dd3 	.word	0x10624dd3

08013730 <dhcp_bind>:
 *
 * @param netif network interface to bind to the offered address
 */
static void
dhcp_bind(struct netif *netif)
{
 8013730:	b580      	push	{r7, lr}
 8013732:	b088      	sub	sp, #32
 8013734:	af00      	add	r7, sp, #0
 8013736:	6078      	str	r0, [r7, #4]
  u32_t timeout;
  struct dhcp *dhcp;
  ip4_addr_t sn_mask, gw_addr;
  LWIP_ERROR("dhcp_bind: netif != NULL", (netif != NULL), return;);
 8013738:	687b      	ldr	r3, [r7, #4]
 801373a:	2b00      	cmp	r3, #0
 801373c:	d107      	bne.n	801374e <dhcp_bind+0x1e>
 801373e:	4b64      	ldr	r3, [pc, #400]	; (80138d0 <dhcp_bind+0x1a0>)
 8013740:	f240 32fe 	movw	r2, #1022	; 0x3fe
 8013744:	4963      	ldr	r1, [pc, #396]	; (80138d4 <dhcp_bind+0x1a4>)
 8013746:	4864      	ldr	r0, [pc, #400]	; (80138d8 <dhcp_bind+0x1a8>)
 8013748:	f004 fae0 	bl	8017d0c <iprintf>
 801374c:	e0bc      	b.n	80138c8 <dhcp_bind+0x198>
  dhcp = netif_dhcp_data(netif);
 801374e:	687b      	ldr	r3, [r7, #4]
 8013750:	6a1b      	ldr	r3, [r3, #32]
 8013752:	61bb      	str	r3, [r7, #24]
  LWIP_ERROR("dhcp_bind: dhcp != NULL", (dhcp != NULL), return;);
 8013754:	69bb      	ldr	r3, [r7, #24]
 8013756:	2b00      	cmp	r3, #0
 8013758:	d107      	bne.n	801376a <dhcp_bind+0x3a>
 801375a:	4b5d      	ldr	r3, [pc, #372]	; (80138d0 <dhcp_bind+0x1a0>)
 801375c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8013760:	495e      	ldr	r1, [pc, #376]	; (80138dc <dhcp_bind+0x1ac>)
 8013762:	485d      	ldr	r0, [pc, #372]	; (80138d8 <dhcp_bind+0x1a8>)
 8013764:	f004 fad2 	bl	8017d0c <iprintf>
 8013768:	e0ae      	b.n	80138c8 <dhcp_bind+0x198>
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(netif=%p) %c%c%"U16_F"\n", (void*)netif, netif->name[0], netif->name[1], (u16_t)netif->num));

  /* reset time used of lease */
  dhcp->lease_used = 0;
 801376a:	69bb      	ldr	r3, [r7, #24]
 801376c:	2200      	movs	r2, #0
 801376e:	841a      	strh	r2, [r3, #32]

  if (dhcp->offered_t0_lease != 0xffffffffUL) {
 8013770:	69bb      	ldr	r3, [r7, #24]
 8013772:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013774:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8013778:	d019      	beq.n	80137ae <dhcp_bind+0x7e>
     /* set renewal period timer */
     LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t0 renewal timer %"U32_F" secs\n", dhcp->offered_t0_lease));
     timeout = (dhcp->offered_t0_lease + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 801377a:	69bb      	ldr	r3, [r7, #24]
 801377c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801377e:	331e      	adds	r3, #30
 8013780:	4a57      	ldr	r2, [pc, #348]	; (80138e0 <dhcp_bind+0x1b0>)
 8013782:	fba2 2303 	umull	r2, r3, r2, r3
 8013786:	095b      	lsrs	r3, r3, #5
 8013788:	61fb      	str	r3, [r7, #28]
     if (timeout > 0xffff) {
 801378a:	69fb      	ldr	r3, [r7, #28]
 801378c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8013790:	d302      	bcc.n	8013798 <dhcp_bind+0x68>
       timeout = 0xffff;
 8013792:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8013796:	61fb      	str	r3, [r7, #28]
     }
     dhcp->t0_timeout = (u16_t)timeout;
 8013798:	69fb      	ldr	r3, [r7, #28]
 801379a:	b29a      	uxth	r2, r3
 801379c:	69bb      	ldr	r3, [r7, #24]
 801379e:	845a      	strh	r2, [r3, #34]	; 0x22
     if (dhcp->t0_timeout == 0) {
 80137a0:	69bb      	ldr	r3, [r7, #24]
 80137a2:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 80137a4:	2b00      	cmp	r3, #0
 80137a6:	d102      	bne.n	80137ae <dhcp_bind+0x7e>
       dhcp->t0_timeout = 1;
 80137a8:	69bb      	ldr	r3, [r7, #24]
 80137aa:	2201      	movs	r2, #1
 80137ac:	845a      	strh	r2, [r3, #34]	; 0x22
     }
     LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t0_lease*1000));
  }

  /* temporary DHCP lease? */
  if (dhcp->offered_t1_renew != 0xffffffffUL) {
 80137ae:	69bb      	ldr	r3, [r7, #24]
 80137b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80137b2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80137b6:	d01d      	beq.n	80137f4 <dhcp_bind+0xc4>
    /* set renewal period timer */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t1 renewal timer %"U32_F" secs\n", dhcp->offered_t1_renew));
    timeout = (dhcp->offered_t1_renew + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 80137b8:	69bb      	ldr	r3, [r7, #24]
 80137ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80137bc:	331e      	adds	r3, #30
 80137be:	4a48      	ldr	r2, [pc, #288]	; (80138e0 <dhcp_bind+0x1b0>)
 80137c0:	fba2 2303 	umull	r2, r3, r2, r3
 80137c4:	095b      	lsrs	r3, r3, #5
 80137c6:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 80137c8:	69fb      	ldr	r3, [r7, #28]
 80137ca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80137ce:	d302      	bcc.n	80137d6 <dhcp_bind+0xa6>
      timeout = 0xffff;
 80137d0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80137d4:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t1_timeout = (u16_t)timeout;
 80137d6:	69fb      	ldr	r3, [r7, #28]
 80137d8:	b29a      	uxth	r2, r3
 80137da:	69bb      	ldr	r3, [r7, #24]
 80137dc:	831a      	strh	r2, [r3, #24]
    if (dhcp->t1_timeout == 0) {
 80137de:	69bb      	ldr	r3, [r7, #24]
 80137e0:	8b1b      	ldrh	r3, [r3, #24]
 80137e2:	2b00      	cmp	r3, #0
 80137e4:	d102      	bne.n	80137ec <dhcp_bind+0xbc>
      dhcp->t1_timeout = 1;
 80137e6:	69bb      	ldr	r3, [r7, #24]
 80137e8:	2201      	movs	r2, #1
 80137ea:	831a      	strh	r2, [r3, #24]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t1_renew*1000));
    dhcp->t1_renew_time = dhcp->t1_timeout;
 80137ec:	69bb      	ldr	r3, [r7, #24]
 80137ee:	8b1a      	ldrh	r2, [r3, #24]
 80137f0:	69bb      	ldr	r3, [r7, #24]
 80137f2:	839a      	strh	r2, [r3, #28]
  }
  /* set renewal period timer */
  if (dhcp->offered_t2_rebind != 0xffffffffUL) {
 80137f4:	69bb      	ldr	r3, [r7, #24]
 80137f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80137f8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80137fc:	d01d      	beq.n	801383a <dhcp_bind+0x10a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t2 rebind timer %"U32_F" secs\n", dhcp->offered_t2_rebind));
    timeout = (dhcp->offered_t2_rebind + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 80137fe:	69bb      	ldr	r3, [r7, #24]
 8013800:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8013802:	331e      	adds	r3, #30
 8013804:	4a36      	ldr	r2, [pc, #216]	; (80138e0 <dhcp_bind+0x1b0>)
 8013806:	fba2 2303 	umull	r2, r3, r2, r3
 801380a:	095b      	lsrs	r3, r3, #5
 801380c:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 801380e:	69fb      	ldr	r3, [r7, #28]
 8013810:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8013814:	d302      	bcc.n	801381c <dhcp_bind+0xec>
      timeout = 0xffff;
 8013816:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801381a:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t2_timeout = (u16_t)timeout;
 801381c:	69fb      	ldr	r3, [r7, #28]
 801381e:	b29a      	uxth	r2, r3
 8013820:	69bb      	ldr	r3, [r7, #24]
 8013822:	835a      	strh	r2, [r3, #26]
    if (dhcp->t2_timeout == 0) {
 8013824:	69bb      	ldr	r3, [r7, #24]
 8013826:	8b5b      	ldrh	r3, [r3, #26]
 8013828:	2b00      	cmp	r3, #0
 801382a:	d102      	bne.n	8013832 <dhcp_bind+0x102>
      dhcp->t2_timeout = 1;
 801382c:	69bb      	ldr	r3, [r7, #24]
 801382e:	2201      	movs	r2, #1
 8013830:	835a      	strh	r2, [r3, #26]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t2_rebind*1000));
    dhcp->t2_rebind_time = dhcp->t2_timeout;
 8013832:	69bb      	ldr	r3, [r7, #24]
 8013834:	8b5a      	ldrh	r2, [r3, #26]
 8013836:	69bb      	ldr	r3, [r7, #24]
 8013838:	83da      	strh	r2, [r3, #30]
  }

  /* If we have sub 1 minute lease, t2 and t1 will kick in at the same time. */
  if ((dhcp->t1_timeout >= dhcp->t2_timeout) && (dhcp->t2_timeout > 0)) {
 801383a:	69bb      	ldr	r3, [r7, #24]
 801383c:	8b1a      	ldrh	r2, [r3, #24]
 801383e:	69bb      	ldr	r3, [r7, #24]
 8013840:	8b5b      	ldrh	r3, [r3, #26]
 8013842:	429a      	cmp	r2, r3
 8013844:	d306      	bcc.n	8013854 <dhcp_bind+0x124>
 8013846:	69bb      	ldr	r3, [r7, #24]
 8013848:	8b5b      	ldrh	r3, [r3, #26]
 801384a:	2b00      	cmp	r3, #0
 801384c:	d002      	beq.n	8013854 <dhcp_bind+0x124>
    dhcp->t1_timeout = 0;
 801384e:	69bb      	ldr	r3, [r7, #24]
 8013850:	2200      	movs	r2, #0
 8013852:	831a      	strh	r2, [r3, #24]
  }

  if (dhcp->subnet_mask_given) {
 8013854:	69bb      	ldr	r3, [r7, #24]
 8013856:	7adb      	ldrb	r3, [r3, #11]
 8013858:	2b00      	cmp	r3, #0
 801385a:	d003      	beq.n	8013864 <dhcp_bind+0x134>
    /* copy offered network mask */
    ip4_addr_copy(sn_mask, dhcp->offered_sn_mask);
 801385c:	69bb      	ldr	r3, [r7, #24]
 801385e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013860:	613b      	str	r3, [r7, #16]
 8013862:	e014      	b.n	801388e <dhcp_bind+0x15e>
  } else {
    /* subnet mask not given, choose a safe subnet mask given the network class */
    u8_t first_octet = ip4_addr1(&dhcp->offered_ip_addr);
 8013864:	69bb      	ldr	r3, [r7, #24]
 8013866:	3328      	adds	r3, #40	; 0x28
 8013868:	781b      	ldrb	r3, [r3, #0]
 801386a:	75fb      	strb	r3, [r7, #23]
    if (first_octet <= 127) {
 801386c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8013870:	2b00      	cmp	r3, #0
 8013872:	db02      	blt.n	801387a <dhcp_bind+0x14a>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xff000000UL));
 8013874:	23ff      	movs	r3, #255	; 0xff
 8013876:	613b      	str	r3, [r7, #16]
 8013878:	e009      	b.n	801388e <dhcp_bind+0x15e>
    } else if (first_octet >= 192) {
 801387a:	7dfb      	ldrb	r3, [r7, #23]
 801387c:	2bbf      	cmp	r3, #191	; 0xbf
 801387e:	d903      	bls.n	8013888 <dhcp_bind+0x158>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffffff00UL));
 8013880:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 8013884:	613b      	str	r3, [r7, #16]
 8013886:	e002      	b.n	801388e <dhcp_bind+0x15e>
    } else {
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffff0000UL));
 8013888:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801388c:	613b      	str	r3, [r7, #16]
    }
  }

  ip4_addr_copy(gw_addr, dhcp->offered_gw_addr);
 801388e:	69bb      	ldr	r3, [r7, #24]
 8013890:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013892:	60fb      	str	r3, [r7, #12]
  /* gateway address not given? */
  if (ip4_addr_isany_val(gw_addr)) {
 8013894:	68fb      	ldr	r3, [r7, #12]
 8013896:	2b00      	cmp	r3, #0
 8013898:	d108      	bne.n	80138ac <dhcp_bind+0x17c>
    /* copy network address */
    ip4_addr_get_network(&gw_addr, &dhcp->offered_ip_addr, &sn_mask);
 801389a:	69bb      	ldr	r3, [r7, #24]
 801389c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 801389e:	693b      	ldr	r3, [r7, #16]
 80138a0:	4013      	ands	r3, r2
 80138a2:	60fb      	str	r3, [r7, #12]
    /* use first host address on network as gateway */
    ip4_addr_set_u32(&gw_addr, ip4_addr_get_u32(&gw_addr) | PP_HTONL(0x00000001UL));
 80138a4:	68fb      	ldr	r3, [r7, #12]
 80138a6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80138aa:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_bind(): IP: 0x%08"X32_F" SN: 0x%08"X32_F" GW: 0x%08"X32_F"\n",
    ip4_addr_get_u32(&dhcp->offered_ip_addr), ip4_addr_get_u32(&sn_mask), ip4_addr_get_u32(&gw_addr)));
  /* netif is now bound to DHCP leased address - set this before assigning the address
     to ensure the callback can use dhcp_supplied_address() */
  dhcp_set_state(dhcp, DHCP_STATE_BOUND);
 80138ac:	210a      	movs	r1, #10
 80138ae:	69b8      	ldr	r0, [r7, #24]
 80138b0:	f000 fa78 	bl	8013da4 <dhcp_set_state>

  netif_set_addr(netif, &dhcp->offered_ip_addr, &sn_mask, &gw_addr);
 80138b4:	69bb      	ldr	r3, [r7, #24]
 80138b6:	f103 0128 	add.w	r1, r3, #40	; 0x28
 80138ba:	f107 030c 	add.w	r3, r7, #12
 80138be:	f107 0210 	add.w	r2, r7, #16
 80138c2:	6878      	ldr	r0, [r7, #4]
 80138c4:	f7f9 fa80 	bl	800cdc8 <netif_set_addr>
  /* interface is used by routing now that an address is set */
}
 80138c8:	3720      	adds	r7, #32
 80138ca:	46bd      	mov	sp, r7
 80138cc:	bd80      	pop	{r7, pc}
 80138ce:	bf00      	nop
 80138d0:	0801a198 	.word	0x0801a198
 80138d4:	0801a2d8 	.word	0x0801a2d8
 80138d8:	0801a1f8 	.word	0x0801a1f8
 80138dc:	0801a2f4 	.word	0x0801a2f4
 80138e0:	88888889 	.word	0x88888889

080138e4 <dhcp_renew>:
 *
 * @param netif network interface which must renew its lease
 */
err_t
dhcp_renew(struct netif *netif)
{
 80138e4:	b580      	push	{r7, lr}
 80138e6:	b088      	sub	sp, #32
 80138e8:	af02      	add	r7, sp, #8
 80138ea:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80138ec:	687b      	ldr	r3, [r7, #4]
 80138ee:	6a1b      	ldr	r3, [r3, #32]
 80138f0:	613b      	str	r3, [r7, #16]
  err_t result;
  u16_t msecs;
  u8_t i;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_renew()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_RENEWING);
 80138f2:	2105      	movs	r1, #5
 80138f4:	6938      	ldr	r0, [r7, #16]
 80138f6:	f000 fa55 	bl	8013da4 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  result = dhcp_create_msg(netif, dhcp, DHCP_REQUEST);
 80138fa:	2203      	movs	r2, #3
 80138fc:	6939      	ldr	r1, [r7, #16]
 80138fe:	6878      	ldr	r0, [r7, #4]
 8013900:	f000 fed6 	bl	80146b0 <dhcp_create_msg>
 8013904:	4603      	mov	r3, r0
 8013906:	73fb      	strb	r3, [r7, #15]
  if (result == ERR_OK) {
 8013908:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801390c:	2b00      	cmp	r3, #0
 801390e:	d13b      	bne.n	8013988 <dhcp_renew+0xa4>
    dhcp_option(dhcp, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8013910:	2202      	movs	r2, #2
 8013912:	2139      	movs	r1, #57	; 0x39
 8013914:	6938      	ldr	r0, [r7, #16]
 8013916:	f000 fa5f 	bl	8013dd8 <dhcp_option>
    dhcp_option_short(dhcp, DHCP_MAX_MSG_LEN(netif));
 801391a:	687b      	ldr	r3, [r7, #4]
 801391c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 801391e:	4619      	mov	r1, r3
 8013920:	6938      	ldr	r0, [r7, #16]
 8013922:	f000 fabb 	bl	8013e9c <dhcp_option_short>

    dhcp_option(dhcp, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8013926:	2203      	movs	r2, #3
 8013928:	2137      	movs	r1, #55	; 0x37
 801392a:	6938      	ldr	r0, [r7, #16]
 801392c:	f000 fa54 	bl	8013dd8 <dhcp_option>
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8013930:	2300      	movs	r3, #0
 8013932:	75fb      	strb	r3, [r7, #23]
 8013934:	e009      	b.n	801394a <dhcp_renew+0x66>
      dhcp_option_byte(dhcp, dhcp_discover_request_options[i]);
 8013936:	7dfb      	ldrb	r3, [r7, #23]
 8013938:	4a2a      	ldr	r2, [pc, #168]	; (80139e4 <dhcp_renew+0x100>)
 801393a:	5cd3      	ldrb	r3, [r2, r3]
 801393c:	4619      	mov	r1, r3
 801393e:	6938      	ldr	r0, [r7, #16]
 8013940:	f000 fa84 	bl	8013e4c <dhcp_option_byte>
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8013944:	7dfb      	ldrb	r3, [r7, #23]
 8013946:	3301      	adds	r3, #1
 8013948:	75fb      	strb	r3, [r7, #23]
 801394a:	7dfb      	ldrb	r3, [r7, #23]
 801394c:	2b02      	cmp	r3, #2
 801394e:	d9f2      	bls.n	8013936 <dhcp_renew+0x52>
#if LWIP_NETIF_HOSTNAME
    dhcp_option_hostname(dhcp, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    /* append DHCP message trailer */
    dhcp_option_trailer(dhcp);
 8013950:	6938      	ldr	r0, [r7, #16]
 8013952:	f001 f851 	bl	80149f8 <dhcp_option_trailer>

    pbuf_realloc(dhcp->p_out, sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + dhcp->options_out_len);
 8013956:	693b      	ldr	r3, [r7, #16]
 8013958:	68da      	ldr	r2, [r3, #12]
 801395a:	693b      	ldr	r3, [r7, #16]
 801395c:	8a9b      	ldrh	r3, [r3, #20]
 801395e:	33f0      	adds	r3, #240	; 0xf0
 8013960:	b29b      	uxth	r3, r3
 8013962:	4619      	mov	r1, r3
 8013964:	4610      	mov	r0, r2
 8013966:	f7f9 fd8f 	bl	800d488 <pbuf_realloc>

    udp_sendto_if(dhcp_pcb, dhcp->p_out, &dhcp->server_ip_addr, DHCP_SERVER_PORT, netif);
 801396a:	4b1f      	ldr	r3, [pc, #124]	; (80139e8 <dhcp_renew+0x104>)
 801396c:	6818      	ldr	r0, [r3, #0]
 801396e:	693b      	ldr	r3, [r7, #16]
 8013970:	68d9      	ldr	r1, [r3, #12]
 8013972:	693b      	ldr	r3, [r7, #16]
 8013974:	f103 0224 	add.w	r2, r3, #36	; 0x24
 8013978:	687b      	ldr	r3, [r7, #4]
 801397a:	9300      	str	r3, [sp, #0]
 801397c:	2343      	movs	r3, #67	; 0x43
 801397e:	f7fe ffdb 	bl	8012938 <udp_sendto_if>
    dhcp_delete_msg(dhcp);
 8013982:	6938      	ldr	r0, [r7, #16]
 8013984:	f000 fff6 	bl	8014974 <dhcp_delete_msg>

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_renew: RENEWING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_renew: could not allocate DHCP request\n"));
  }
  if (dhcp->tries < 255) {
 8013988:	693b      	ldr	r3, [r7, #16]
 801398a:	7a9b      	ldrb	r3, [r3, #10]
 801398c:	2bff      	cmp	r3, #255	; 0xff
 801398e:	d005      	beq.n	801399c <dhcp_renew+0xb8>
    dhcp->tries++;
 8013990:	693b      	ldr	r3, [r7, #16]
 8013992:	7a9b      	ldrb	r3, [r3, #10]
 8013994:	3301      	adds	r3, #1
 8013996:	b2da      	uxtb	r2, r3
 8013998:	693b      	ldr	r3, [r7, #16]
 801399a:	729a      	strb	r2, [r3, #10]
  }
  /* back-off on retries, but to a maximum of 20 seconds */
  msecs = dhcp->tries < 10 ? dhcp->tries * 2000 : 20 * 1000;
 801399c:	693b      	ldr	r3, [r7, #16]
 801399e:	7a9b      	ldrb	r3, [r3, #10]
 80139a0:	2b09      	cmp	r3, #9
 80139a2:	d80a      	bhi.n	80139ba <dhcp_renew+0xd6>
 80139a4:	693b      	ldr	r3, [r7, #16]
 80139a6:	7a9b      	ldrb	r3, [r3, #10]
 80139a8:	b29b      	uxth	r3, r3
 80139aa:	461a      	mov	r2, r3
 80139ac:	0152      	lsls	r2, r2, #5
 80139ae:	1ad2      	subs	r2, r2, r3
 80139b0:	0092      	lsls	r2, r2, #2
 80139b2:	4413      	add	r3, r2
 80139b4:	011b      	lsls	r3, r3, #4
 80139b6:	b29b      	uxth	r3, r3
 80139b8:	e001      	b.n	80139be <dhcp_renew+0xda>
 80139ba:	f644 6320 	movw	r3, #20000	; 0x4e20
 80139be:	81bb      	strh	r3, [r7, #12]
  dhcp->request_timeout = (msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS;
 80139c0:	89bb      	ldrh	r3, [r7, #12]
 80139c2:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 80139c6:	4a09      	ldr	r2, [pc, #36]	; (80139ec <dhcp_renew+0x108>)
 80139c8:	fb82 1203 	smull	r1, r2, r2, r3
 80139cc:	1152      	asrs	r2, r2, #5
 80139ce:	17db      	asrs	r3, r3, #31
 80139d0:	1ad3      	subs	r3, r2, r3
 80139d2:	b29a      	uxth	r2, r3
 80139d4:	693b      	ldr	r3, [r7, #16]
 80139d6:	82da      	strh	r2, [r3, #22]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_renew(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 80139d8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80139dc:	4618      	mov	r0, r3
 80139de:	3718      	adds	r7, #24
 80139e0:	46bd      	mov	sp, r7
 80139e2:	bd80      	pop	{r7, pc}
 80139e4:	20000124 	.word	0x20000124
 80139e8:	20004bb0 	.word	0x20004bb0
 80139ec:	10624dd3 	.word	0x10624dd3

080139f0 <dhcp_rebind>:
 *
 * @param netif network interface which must rebind with a DHCP server
 */
static err_t
dhcp_rebind(struct netif *netif)
{
 80139f0:	b580      	push	{r7, lr}
 80139f2:	b088      	sub	sp, #32
 80139f4:	af02      	add	r7, sp, #8
 80139f6:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80139f8:	687b      	ldr	r3, [r7, #4]
 80139fa:	6a1b      	ldr	r3, [r3, #32]
 80139fc:	613b      	str	r3, [r7, #16]
  err_t result;
  u16_t msecs;
  u8_t i;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_REBINDING);
 80139fe:	2104      	movs	r1, #4
 8013a00:	6938      	ldr	r0, [r7, #16]
 8013a02:	f000 f9cf 	bl	8013da4 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  result = dhcp_create_msg(netif, dhcp, DHCP_REQUEST);
 8013a06:	2203      	movs	r2, #3
 8013a08:	6939      	ldr	r1, [r7, #16]
 8013a0a:	6878      	ldr	r0, [r7, #4]
 8013a0c:	f000 fe50 	bl	80146b0 <dhcp_create_msg>
 8013a10:	4603      	mov	r3, r0
 8013a12:	73fb      	strb	r3, [r7, #15]
  if (result == ERR_OK) {
 8013a14:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8013a18:	2b00      	cmp	r3, #0
 8013a1a:	d139      	bne.n	8013a90 <dhcp_rebind+0xa0>
    dhcp_option(dhcp, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8013a1c:	2202      	movs	r2, #2
 8013a1e:	2139      	movs	r1, #57	; 0x39
 8013a20:	6938      	ldr	r0, [r7, #16]
 8013a22:	f000 f9d9 	bl	8013dd8 <dhcp_option>
    dhcp_option_short(dhcp, DHCP_MAX_MSG_LEN(netif));
 8013a26:	687b      	ldr	r3, [r7, #4]
 8013a28:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8013a2a:	4619      	mov	r1, r3
 8013a2c:	6938      	ldr	r0, [r7, #16]
 8013a2e:	f000 fa35 	bl	8013e9c <dhcp_option_short>

    dhcp_option(dhcp, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8013a32:	2203      	movs	r2, #3
 8013a34:	2137      	movs	r1, #55	; 0x37
 8013a36:	6938      	ldr	r0, [r7, #16]
 8013a38:	f000 f9ce 	bl	8013dd8 <dhcp_option>
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8013a3c:	2300      	movs	r3, #0
 8013a3e:	75fb      	strb	r3, [r7, #23]
 8013a40:	e009      	b.n	8013a56 <dhcp_rebind+0x66>
      dhcp_option_byte(dhcp, dhcp_discover_request_options[i]);
 8013a42:	7dfb      	ldrb	r3, [r7, #23]
 8013a44:	4a29      	ldr	r2, [pc, #164]	; (8013aec <dhcp_rebind+0xfc>)
 8013a46:	5cd3      	ldrb	r3, [r2, r3]
 8013a48:	4619      	mov	r1, r3
 8013a4a:	6938      	ldr	r0, [r7, #16]
 8013a4c:	f000 f9fe 	bl	8013e4c <dhcp_option_byte>
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8013a50:	7dfb      	ldrb	r3, [r7, #23]
 8013a52:	3301      	adds	r3, #1
 8013a54:	75fb      	strb	r3, [r7, #23]
 8013a56:	7dfb      	ldrb	r3, [r7, #23]
 8013a58:	2b02      	cmp	r3, #2
 8013a5a:	d9f2      	bls.n	8013a42 <dhcp_rebind+0x52>

#if LWIP_NETIF_HOSTNAME
    dhcp_option_hostname(dhcp, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    dhcp_option_trailer(dhcp);
 8013a5c:	6938      	ldr	r0, [r7, #16]
 8013a5e:	f000 ffcb 	bl	80149f8 <dhcp_option_trailer>

    pbuf_realloc(dhcp->p_out, sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + dhcp->options_out_len);
 8013a62:	693b      	ldr	r3, [r7, #16]
 8013a64:	68da      	ldr	r2, [r3, #12]
 8013a66:	693b      	ldr	r3, [r7, #16]
 8013a68:	8a9b      	ldrh	r3, [r3, #20]
 8013a6a:	33f0      	adds	r3, #240	; 0xf0
 8013a6c:	b29b      	uxth	r3, r3
 8013a6e:	4619      	mov	r1, r3
 8013a70:	4610      	mov	r0, r2
 8013a72:	f7f9 fd09 	bl	800d488 <pbuf_realloc>

    /* broadcast to server */
    udp_sendto_if(dhcp_pcb, dhcp->p_out, IP_ADDR_BROADCAST, DHCP_SERVER_PORT, netif);
 8013a76:	4b1e      	ldr	r3, [pc, #120]	; (8013af0 <dhcp_rebind+0x100>)
 8013a78:	6818      	ldr	r0, [r3, #0]
 8013a7a:	693b      	ldr	r3, [r7, #16]
 8013a7c:	68d9      	ldr	r1, [r3, #12]
 8013a7e:	687b      	ldr	r3, [r7, #4]
 8013a80:	9300      	str	r3, [sp, #0]
 8013a82:	2343      	movs	r3, #67	; 0x43
 8013a84:	4a1b      	ldr	r2, [pc, #108]	; (8013af4 <dhcp_rebind+0x104>)
 8013a86:	f7fe ff57 	bl	8012938 <udp_sendto_if>
    dhcp_delete_msg(dhcp);
 8013a8a:	6938      	ldr	r0, [r7, #16]
 8013a8c:	f000 ff72 	bl	8014974 <dhcp_delete_msg>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind: REBINDING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_rebind: could not allocate DHCP request\n"));
  }
  if (dhcp->tries < 255) {
 8013a90:	693b      	ldr	r3, [r7, #16]
 8013a92:	7a9b      	ldrb	r3, [r3, #10]
 8013a94:	2bff      	cmp	r3, #255	; 0xff
 8013a96:	d005      	beq.n	8013aa4 <dhcp_rebind+0xb4>
    dhcp->tries++;
 8013a98:	693b      	ldr	r3, [r7, #16]
 8013a9a:	7a9b      	ldrb	r3, [r3, #10]
 8013a9c:	3301      	adds	r3, #1
 8013a9e:	b2da      	uxtb	r2, r3
 8013aa0:	693b      	ldr	r3, [r7, #16]
 8013aa2:	729a      	strb	r2, [r3, #10]
  }
  msecs = dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000;
 8013aa4:	693b      	ldr	r3, [r7, #16]
 8013aa6:	7a9b      	ldrb	r3, [r3, #10]
 8013aa8:	2b09      	cmp	r3, #9
 8013aaa:	d80a      	bhi.n	8013ac2 <dhcp_rebind+0xd2>
 8013aac:	693b      	ldr	r3, [r7, #16]
 8013aae:	7a9b      	ldrb	r3, [r3, #10]
 8013ab0:	b29b      	uxth	r3, r3
 8013ab2:	461a      	mov	r2, r3
 8013ab4:	0152      	lsls	r2, r2, #5
 8013ab6:	1ad2      	subs	r2, r2, r3
 8013ab8:	0092      	lsls	r2, r2, #2
 8013aba:	4413      	add	r3, r2
 8013abc:	00db      	lsls	r3, r3, #3
 8013abe:	b29b      	uxth	r3, r3
 8013ac0:	e001      	b.n	8013ac6 <dhcp_rebind+0xd6>
 8013ac2:	f242 7310 	movw	r3, #10000	; 0x2710
 8013ac6:	81bb      	strh	r3, [r7, #12]
  dhcp->request_timeout = (msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS;
 8013ac8:	89bb      	ldrh	r3, [r7, #12]
 8013aca:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8013ace:	4a0a      	ldr	r2, [pc, #40]	; (8013af8 <dhcp_rebind+0x108>)
 8013ad0:	fb82 1203 	smull	r1, r2, r2, r3
 8013ad4:	1152      	asrs	r2, r2, #5
 8013ad6:	17db      	asrs	r3, r3, #31
 8013ad8:	1ad3      	subs	r3, r2, r3
 8013ada:	b29a      	uxth	r2, r3
 8013adc:	693b      	ldr	r3, [r7, #16]
 8013ade:	82da      	strh	r2, [r3, #22]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8013ae0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8013ae4:	4618      	mov	r0, r3
 8013ae6:	3718      	adds	r7, #24
 8013ae8:	46bd      	mov	sp, r7
 8013aea:	bd80      	pop	{r7, pc}
 8013aec:	20000124 	.word	0x20000124
 8013af0:	20004bb0 	.word	0x20004bb0
 8013af4:	0801ae98 	.word	0x0801ae98
 8013af8:	10624dd3 	.word	0x10624dd3

08013afc <dhcp_reboot>:
 *
 * @param netif network interface which must reboot
 */
static err_t
dhcp_reboot(struct netif *netif)
{
 8013afc:	b580      	push	{r7, lr}
 8013afe:	b088      	sub	sp, #32
 8013b00:	af02      	add	r7, sp, #8
 8013b02:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8013b04:	687b      	ldr	r3, [r7, #4]
 8013b06:	6a1b      	ldr	r3, [r3, #32]
 8013b08:	613b      	str	r3, [r7, #16]
  err_t result;
  u16_t msecs;
  u8_t i;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_REBOOTING);
 8013b0a:	2103      	movs	r1, #3
 8013b0c:	6938      	ldr	r0, [r7, #16]
 8013b0e:	f000 f949 	bl	8013da4 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  result = dhcp_create_msg(netif, dhcp, DHCP_REQUEST);
 8013b12:	2203      	movs	r2, #3
 8013b14:	6939      	ldr	r1, [r7, #16]
 8013b16:	6878      	ldr	r0, [r7, #4]
 8013b18:	f000 fdca 	bl	80146b0 <dhcp_create_msg>
 8013b1c:	4603      	mov	r3, r0
 8013b1e:	73fb      	strb	r3, [r7, #15]
  if (result == ERR_OK) {
 8013b20:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8013b24:	2b00      	cmp	r3, #0
 8013b26:	d147      	bne.n	8013bb8 <dhcp_reboot+0xbc>
    dhcp_option(dhcp, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8013b28:	2202      	movs	r2, #2
 8013b2a:	2139      	movs	r1, #57	; 0x39
 8013b2c:	6938      	ldr	r0, [r7, #16]
 8013b2e:	f000 f953 	bl	8013dd8 <dhcp_option>
    dhcp_option_short(dhcp, DHCP_MAX_MSG_LEN_MIN_REQUIRED);
 8013b32:	f44f 7110 	mov.w	r1, #576	; 0x240
 8013b36:	6938      	ldr	r0, [r7, #16]
 8013b38:	f000 f9b0 	bl	8013e9c <dhcp_option_short>

    dhcp_option(dhcp, DHCP_OPTION_REQUESTED_IP, 4);
 8013b3c:	2204      	movs	r2, #4
 8013b3e:	2132      	movs	r1, #50	; 0x32
 8013b40:	6938      	ldr	r0, [r7, #16]
 8013b42:	f000 f949 	bl	8013dd8 <dhcp_option>
    dhcp_option_long(dhcp, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 8013b46:	693b      	ldr	r3, [r7, #16]
 8013b48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013b4a:	4618      	mov	r0, r3
 8013b4c:	f7f8 fc7c 	bl	800c448 <lwip_htonl>
 8013b50:	4603      	mov	r3, r0
 8013b52:	4619      	mov	r1, r3
 8013b54:	6938      	ldr	r0, [r7, #16]
 8013b56:	f000 f9db 	bl	8013f10 <dhcp_option_long>

    dhcp_option(dhcp, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8013b5a:	2203      	movs	r2, #3
 8013b5c:	2137      	movs	r1, #55	; 0x37
 8013b5e:	6938      	ldr	r0, [r7, #16]
 8013b60:	f000 f93a 	bl	8013dd8 <dhcp_option>
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8013b64:	2300      	movs	r3, #0
 8013b66:	75fb      	strb	r3, [r7, #23]
 8013b68:	e009      	b.n	8013b7e <dhcp_reboot+0x82>
      dhcp_option_byte(dhcp, dhcp_discover_request_options[i]);
 8013b6a:	7dfb      	ldrb	r3, [r7, #23]
 8013b6c:	4a29      	ldr	r2, [pc, #164]	; (8013c14 <dhcp_reboot+0x118>)
 8013b6e:	5cd3      	ldrb	r3, [r2, r3]
 8013b70:	4619      	mov	r1, r3
 8013b72:	6938      	ldr	r0, [r7, #16]
 8013b74:	f000 f96a 	bl	8013e4c <dhcp_option_byte>
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8013b78:	7dfb      	ldrb	r3, [r7, #23]
 8013b7a:	3301      	adds	r3, #1
 8013b7c:	75fb      	strb	r3, [r7, #23]
 8013b7e:	7dfb      	ldrb	r3, [r7, #23]
 8013b80:	2b02      	cmp	r3, #2
 8013b82:	d9f2      	bls.n	8013b6a <dhcp_reboot+0x6e>
    }

    dhcp_option_trailer(dhcp);
 8013b84:	6938      	ldr	r0, [r7, #16]
 8013b86:	f000 ff37 	bl	80149f8 <dhcp_option_trailer>

    pbuf_realloc(dhcp->p_out, sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + dhcp->options_out_len);
 8013b8a:	693b      	ldr	r3, [r7, #16]
 8013b8c:	68da      	ldr	r2, [r3, #12]
 8013b8e:	693b      	ldr	r3, [r7, #16]
 8013b90:	8a9b      	ldrh	r3, [r3, #20]
 8013b92:	33f0      	adds	r3, #240	; 0xf0
 8013b94:	b29b      	uxth	r3, r3
 8013b96:	4619      	mov	r1, r3
 8013b98:	4610      	mov	r0, r2
 8013b9a:	f7f9 fc75 	bl	800d488 <pbuf_realloc>

    /* broadcast to server */
    udp_sendto_if(dhcp_pcb, dhcp->p_out, IP_ADDR_BROADCAST, DHCP_SERVER_PORT, netif);
 8013b9e:	4b1e      	ldr	r3, [pc, #120]	; (8013c18 <dhcp_reboot+0x11c>)
 8013ba0:	6818      	ldr	r0, [r3, #0]
 8013ba2:	693b      	ldr	r3, [r7, #16]
 8013ba4:	68d9      	ldr	r1, [r3, #12]
 8013ba6:	687b      	ldr	r3, [r7, #4]
 8013ba8:	9300      	str	r3, [sp, #0]
 8013baa:	2343      	movs	r3, #67	; 0x43
 8013bac:	4a1b      	ldr	r2, [pc, #108]	; (8013c1c <dhcp_reboot+0x120>)
 8013bae:	f7fe fec3 	bl	8012938 <udp_sendto_if>
    dhcp_delete_msg(dhcp);
 8013bb2:	6938      	ldr	r0, [r7, #16]
 8013bb4:	f000 fede 	bl	8014974 <dhcp_delete_msg>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot: REBOOTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_reboot: could not allocate DHCP request\n"));
  }
  if (dhcp->tries < 255) {
 8013bb8:	693b      	ldr	r3, [r7, #16]
 8013bba:	7a9b      	ldrb	r3, [r3, #10]
 8013bbc:	2bff      	cmp	r3, #255	; 0xff
 8013bbe:	d005      	beq.n	8013bcc <dhcp_reboot+0xd0>
    dhcp->tries++;
 8013bc0:	693b      	ldr	r3, [r7, #16]
 8013bc2:	7a9b      	ldrb	r3, [r3, #10]
 8013bc4:	3301      	adds	r3, #1
 8013bc6:	b2da      	uxtb	r2, r3
 8013bc8:	693b      	ldr	r3, [r7, #16]
 8013bca:	729a      	strb	r2, [r3, #10]
  }
  msecs = dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000;
 8013bcc:	693b      	ldr	r3, [r7, #16]
 8013bce:	7a9b      	ldrb	r3, [r3, #10]
 8013bd0:	2b09      	cmp	r3, #9
 8013bd2:	d80a      	bhi.n	8013bea <dhcp_reboot+0xee>
 8013bd4:	693b      	ldr	r3, [r7, #16]
 8013bd6:	7a9b      	ldrb	r3, [r3, #10]
 8013bd8:	b29b      	uxth	r3, r3
 8013bda:	461a      	mov	r2, r3
 8013bdc:	0152      	lsls	r2, r2, #5
 8013bde:	1ad2      	subs	r2, r2, r3
 8013be0:	0092      	lsls	r2, r2, #2
 8013be2:	4413      	add	r3, r2
 8013be4:	00db      	lsls	r3, r3, #3
 8013be6:	b29b      	uxth	r3, r3
 8013be8:	e001      	b.n	8013bee <dhcp_reboot+0xf2>
 8013bea:	f242 7310 	movw	r3, #10000	; 0x2710
 8013bee:	81bb      	strh	r3, [r7, #12]
  dhcp->request_timeout = (msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS;
 8013bf0:	89bb      	ldrh	r3, [r7, #12]
 8013bf2:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8013bf6:	4a0a      	ldr	r2, [pc, #40]	; (8013c20 <dhcp_reboot+0x124>)
 8013bf8:	fb82 1203 	smull	r1, r2, r2, r3
 8013bfc:	1152      	asrs	r2, r2, #5
 8013bfe:	17db      	asrs	r3, r3, #31
 8013c00:	1ad3      	subs	r3, r2, r3
 8013c02:	b29a      	uxth	r2, r3
 8013c04:	693b      	ldr	r3, [r7, #16]
 8013c06:	82da      	strh	r2, [r3, #22]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8013c08:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8013c0c:	4618      	mov	r0, r3
 8013c0e:	3718      	adds	r7, #24
 8013c10:	46bd      	mov	sp, r7
 8013c12:	bd80      	pop	{r7, pc}
 8013c14:	20000124 	.word	0x20000124
 8013c18:	20004bb0 	.word	0x20004bb0
 8013c1c:	0801ae98 	.word	0x0801ae98
 8013c20:	10624dd3 	.word	0x10624dd3

08013c24 <dhcp_release>:
 *
 * @param netif network interface which must release its lease
 */
err_t
dhcp_release(struct netif *netif)
{
 8013c24:	b580      	push	{r7, lr}
 8013c26:	b088      	sub	sp, #32
 8013c28:	af02      	add	r7, sp, #8
 8013c2a:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8013c2c:	687b      	ldr	r3, [r7, #4]
 8013c2e:	6a1b      	ldr	r3, [r3, #32]
 8013c30:	617b      	str	r3, [r7, #20]
  err_t result;
  ip_addr_t server_ip_addr;
  u8_t is_dhcp_supplied_address;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_release()\n"));
  if (dhcp == NULL) {
 8013c32:	697b      	ldr	r3, [r7, #20]
 8013c34:	2b00      	cmp	r3, #0
 8013c36:	d102      	bne.n	8013c3e <dhcp_release+0x1a>
    return ERR_ARG;
 8013c38:	f06f 030f 	mvn.w	r3, #15
 8013c3c:	e072      	b.n	8013d24 <dhcp_release+0x100>
  }
  ip_addr_copy(server_ip_addr, dhcp->server_ip_addr);
 8013c3e:	697b      	ldr	r3, [r7, #20]
 8013c40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013c42:	60fb      	str	r3, [r7, #12]

  is_dhcp_supplied_address = dhcp_supplied_address(netif);
 8013c44:	6878      	ldr	r0, [r7, #4]
 8013c46:	f000 ff31 	bl	8014aac <dhcp_supplied_address>
 8013c4a:	4603      	mov	r3, r0
 8013c4c:	74fb      	strb	r3, [r7, #19]

  /* idle DHCP client */
  dhcp_set_state(dhcp, DHCP_STATE_OFF);
 8013c4e:	2100      	movs	r1, #0
 8013c50:	6978      	ldr	r0, [r7, #20]
 8013c52:	f000 f8a7 	bl	8013da4 <dhcp_set_state>
  /* clean old DHCP offer */
  ip_addr_set_zero_ip4(&dhcp->server_ip_addr);
 8013c56:	697b      	ldr	r3, [r7, #20]
 8013c58:	2200      	movs	r2, #0
 8013c5a:	625a      	str	r2, [r3, #36]	; 0x24
  ip4_addr_set_zero(&dhcp->offered_ip_addr);
 8013c5c:	697b      	ldr	r3, [r7, #20]
 8013c5e:	2200      	movs	r2, #0
 8013c60:	629a      	str	r2, [r3, #40]	; 0x28
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
 8013c62:	697b      	ldr	r3, [r7, #20]
 8013c64:	2200      	movs	r2, #0
 8013c66:	62da      	str	r2, [r3, #44]	; 0x2c
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 8013c68:	697b      	ldr	r3, [r7, #20]
 8013c6a:	2200      	movs	r2, #0
 8013c6c:	631a      	str	r2, [r3, #48]	; 0x30
#if LWIP_DHCP_BOOTP_FILE
  ip4_addr_set_zero(&dhcp->offered_si_addr);
#endif /* LWIP_DHCP_BOOTP_FILE */
  dhcp->offered_t0_lease = dhcp->offered_t1_renew = dhcp->offered_t2_rebind = 0;
 8013c6e:	697b      	ldr	r3, [r7, #20]
 8013c70:	2200      	movs	r2, #0
 8013c72:	63da      	str	r2, [r3, #60]	; 0x3c
 8013c74:	697b      	ldr	r3, [r7, #20]
 8013c76:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8013c78:	697b      	ldr	r3, [r7, #20]
 8013c7a:	639a      	str	r2, [r3, #56]	; 0x38
 8013c7c:	697b      	ldr	r3, [r7, #20]
 8013c7e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8013c80:	697b      	ldr	r3, [r7, #20]
 8013c82:	635a      	str	r2, [r3, #52]	; 0x34
  dhcp->t1_renew_time = dhcp->t2_rebind_time = dhcp->lease_used = dhcp->t0_timeout = 0;
 8013c84:	697b      	ldr	r3, [r7, #20]
 8013c86:	2200      	movs	r2, #0
 8013c88:	845a      	strh	r2, [r3, #34]	; 0x22
 8013c8a:	697b      	ldr	r3, [r7, #20]
 8013c8c:	8c5a      	ldrh	r2, [r3, #34]	; 0x22
 8013c8e:	697b      	ldr	r3, [r7, #20]
 8013c90:	841a      	strh	r2, [r3, #32]
 8013c92:	697b      	ldr	r3, [r7, #20]
 8013c94:	8c1a      	ldrh	r2, [r3, #32]
 8013c96:	697b      	ldr	r3, [r7, #20]
 8013c98:	83da      	strh	r2, [r3, #30]
 8013c9a:	697b      	ldr	r3, [r7, #20]
 8013c9c:	8bda      	ldrh	r2, [r3, #30]
 8013c9e:	697b      	ldr	r3, [r7, #20]
 8013ca0:	839a      	strh	r2, [r3, #28]

  if (!is_dhcp_supplied_address) {
 8013ca2:	7cfb      	ldrb	r3, [r7, #19]
 8013ca4:	2b00      	cmp	r3, #0
 8013ca6:	d101      	bne.n	8013cac <dhcp_release+0x88>
    /* don't issue release message when address is not dhcp-assigned */
    return ERR_OK;
 8013ca8:	2300      	movs	r3, #0
 8013caa:	e03b      	b.n	8013d24 <dhcp_release+0x100>
  }

  /* create and initialize the DHCP message header */
  result = dhcp_create_msg(netif, dhcp, DHCP_RELEASE);
 8013cac:	2207      	movs	r2, #7
 8013cae:	6979      	ldr	r1, [r7, #20]
 8013cb0:	6878      	ldr	r0, [r7, #4]
 8013cb2:	f000 fcfd 	bl	80146b0 <dhcp_create_msg>
 8013cb6:	4603      	mov	r3, r0
 8013cb8:	74bb      	strb	r3, [r7, #18]
  if (result == ERR_OK) {
 8013cba:	f997 3012 	ldrsb.w	r3, [r7, #18]
 8013cbe:	2b00      	cmp	r3, #0
 8013cc0:	d128      	bne.n	8013d14 <dhcp_release+0xf0>
    dhcp_option(dhcp, DHCP_OPTION_SERVER_ID, 4);
 8013cc2:	2204      	movs	r2, #4
 8013cc4:	2136      	movs	r1, #54	; 0x36
 8013cc6:	6978      	ldr	r0, [r7, #20]
 8013cc8:	f000 f886 	bl	8013dd8 <dhcp_option>
    dhcp_option_long(dhcp, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&server_ip_addr))));
 8013ccc:	68fb      	ldr	r3, [r7, #12]
 8013cce:	4618      	mov	r0, r3
 8013cd0:	f7f8 fbba 	bl	800c448 <lwip_htonl>
 8013cd4:	4603      	mov	r3, r0
 8013cd6:	4619      	mov	r1, r3
 8013cd8:	6978      	ldr	r0, [r7, #20]
 8013cda:	f000 f919 	bl	8013f10 <dhcp_option_long>

    dhcp_option_trailer(dhcp);
 8013cde:	6978      	ldr	r0, [r7, #20]
 8013ce0:	f000 fe8a 	bl	80149f8 <dhcp_option_trailer>

    pbuf_realloc(dhcp->p_out, sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + dhcp->options_out_len);
 8013ce4:	697b      	ldr	r3, [r7, #20]
 8013ce6:	68da      	ldr	r2, [r3, #12]
 8013ce8:	697b      	ldr	r3, [r7, #20]
 8013cea:	8a9b      	ldrh	r3, [r3, #20]
 8013cec:	33f0      	adds	r3, #240	; 0xf0
 8013cee:	b29b      	uxth	r3, r3
 8013cf0:	4619      	mov	r1, r3
 8013cf2:	4610      	mov	r0, r2
 8013cf4:	f7f9 fbc8 	bl	800d488 <pbuf_realloc>

    udp_sendto_if(dhcp_pcb, dhcp->p_out, &server_ip_addr, DHCP_SERVER_PORT, netif);
 8013cf8:	4b0c      	ldr	r3, [pc, #48]	; (8013d2c <dhcp_release+0x108>)
 8013cfa:	6818      	ldr	r0, [r3, #0]
 8013cfc:	697b      	ldr	r3, [r7, #20]
 8013cfe:	68d9      	ldr	r1, [r3, #12]
 8013d00:	f107 020c 	add.w	r2, r7, #12
 8013d04:	687b      	ldr	r3, [r7, #4]
 8013d06:	9300      	str	r3, [sp, #0]
 8013d08:	2343      	movs	r3, #67	; 0x43
 8013d0a:	f7fe fe15 	bl	8012938 <udp_sendto_if>
    dhcp_delete_msg(dhcp);
 8013d0e:	6978      	ldr	r0, [r7, #20]
 8013d10:	f000 fe30 	bl	8014974 <dhcp_delete_msg>
  } else {
    /* sending release failed, but that's not a problem since the correct behaviour of dhcp does not rely on release */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_release: could not allocate DHCP request\n"));
  }
  /* remove IP address from interface (prevents routing from selecting this interface) */
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 8013d14:	4b06      	ldr	r3, [pc, #24]	; (8013d30 <dhcp_release+0x10c>)
 8013d16:	4a06      	ldr	r2, [pc, #24]	; (8013d30 <dhcp_release+0x10c>)
 8013d18:	4905      	ldr	r1, [pc, #20]	; (8013d30 <dhcp_release+0x10c>)
 8013d1a:	6878      	ldr	r0, [r7, #4]
 8013d1c:	f7f9 f854 	bl	800cdc8 <netif_set_addr>

  return result;
 8013d20:	f997 3012 	ldrsb.w	r3, [r7, #18]
}
 8013d24:	4618      	mov	r0, r3
 8013d26:	3718      	adds	r7, #24
 8013d28:	46bd      	mov	sp, r7
 8013d2a:	bd80      	pop	{r7, pc}
 8013d2c:	20004bb0 	.word	0x20004bb0
 8013d30:	0801ae94 	.word	0x0801ae94

08013d34 <dhcp_stop>:
 *
 * @param netif The network interface to stop DHCP on
 */
void
dhcp_stop(struct netif *netif)
{
 8013d34:	b580      	push	{r7, lr}
 8013d36:	b084      	sub	sp, #16
 8013d38:	af00      	add	r7, sp, #0
 8013d3a:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp;
  LWIP_ERROR("dhcp_stop: netif != NULL", (netif != NULL), return;);
 8013d3c:	687b      	ldr	r3, [r7, #4]
 8013d3e:	2b00      	cmp	r3, #0
 8013d40:	d107      	bne.n	8013d52 <dhcp_stop+0x1e>
 8013d42:	4b14      	ldr	r3, [pc, #80]	; (8013d94 <dhcp_stop+0x60>)
 8013d44:	f240 5242 	movw	r2, #1346	; 0x542
 8013d48:	4913      	ldr	r1, [pc, #76]	; (8013d98 <dhcp_stop+0x64>)
 8013d4a:	4814      	ldr	r0, [pc, #80]	; (8013d9c <dhcp_stop+0x68>)
 8013d4c:	f003 ffde 	bl	8017d0c <iprintf>
 8013d50:	e01d      	b.n	8013d8e <dhcp_stop+0x5a>
  dhcp = netif_dhcp_data(netif);
 8013d52:	687b      	ldr	r3, [r7, #4]
 8013d54:	6a1b      	ldr	r3, [r3, #32]
 8013d56:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_stop()\n"));
  /* netif is DHCP configured? */
  if (dhcp != NULL) {
 8013d58:	68fb      	ldr	r3, [r7, #12]
 8013d5a:	2b00      	cmp	r3, #0
 8013d5c:	d017      	beq.n	8013d8e <dhcp_stop+0x5a>
      autoip_stop(netif);
      dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_OFF;
    }
#endif /* LWIP_DHCP_AUTOIP_COOP */

    LWIP_ASSERT("reply wasn't freed", dhcp->msg_in == NULL);
 8013d5e:	68fb      	ldr	r3, [r7, #12]
 8013d60:	685b      	ldr	r3, [r3, #4]
 8013d62:	2b00      	cmp	r3, #0
 8013d64:	d006      	beq.n	8013d74 <dhcp_stop+0x40>
 8013d66:	4b0b      	ldr	r3, [pc, #44]	; (8013d94 <dhcp_stop+0x60>)
 8013d68:	f240 524f 	movw	r2, #1359	; 0x54f
 8013d6c:	490c      	ldr	r1, [pc, #48]	; (8013da0 <dhcp_stop+0x6c>)
 8013d6e:	480b      	ldr	r0, [pc, #44]	; (8013d9c <dhcp_stop+0x68>)
 8013d70:	f003 ffcc 	bl	8017d0c <iprintf>
    dhcp_set_state(dhcp, DHCP_STATE_OFF);
 8013d74:	2100      	movs	r1, #0
 8013d76:	68f8      	ldr	r0, [r7, #12]
 8013d78:	f000 f814 	bl	8013da4 <dhcp_set_state>

    if (dhcp->pcb_allocated != 0) {
 8013d7c:	68fb      	ldr	r3, [r7, #12]
 8013d7e:	7a1b      	ldrb	r3, [r3, #8]
 8013d80:	2b00      	cmp	r3, #0
 8013d82:	d004      	beq.n	8013d8e <dhcp_stop+0x5a>
      dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 8013d84:	f7ff f854 	bl	8012e30 <dhcp_dec_pcb_refcount>
      dhcp->pcb_allocated = 0;
 8013d88:	68fb      	ldr	r3, [r7, #12]
 8013d8a:	2200      	movs	r2, #0
 8013d8c:	721a      	strb	r2, [r3, #8]
    }
  }
}
 8013d8e:	3710      	adds	r7, #16
 8013d90:	46bd      	mov	sp, r7
 8013d92:	bd80      	pop	{r7, pc}
 8013d94:	0801a198 	.word	0x0801a198
 8013d98:	0801a30c 	.word	0x0801a30c
 8013d9c:	0801a1f8 	.word	0x0801a1f8
 8013da0:	0801a2c4 	.word	0x0801a2c4

08013da4 <dhcp_set_state>:
 *
 * If the state changed, reset the number of tries.
 */
static void
dhcp_set_state(struct dhcp *dhcp, u8_t new_state)
{
 8013da4:	b480      	push	{r7}
 8013da6:	b083      	sub	sp, #12
 8013da8:	af00      	add	r7, sp, #0
 8013daa:	6078      	str	r0, [r7, #4]
 8013dac:	460b      	mov	r3, r1
 8013dae:	70fb      	strb	r3, [r7, #3]
  if (new_state != dhcp->state) {
 8013db0:	687b      	ldr	r3, [r7, #4]
 8013db2:	7a5b      	ldrb	r3, [r3, #9]
 8013db4:	78fa      	ldrb	r2, [r7, #3]
 8013db6:	429a      	cmp	r2, r3
 8013db8:	d008      	beq.n	8013dcc <dhcp_set_state+0x28>
    dhcp->state = new_state;
 8013dba:	687b      	ldr	r3, [r7, #4]
 8013dbc:	78fa      	ldrb	r2, [r7, #3]
 8013dbe:	725a      	strb	r2, [r3, #9]
    dhcp->tries = 0;
 8013dc0:	687b      	ldr	r3, [r7, #4]
 8013dc2:	2200      	movs	r2, #0
 8013dc4:	729a      	strb	r2, [r3, #10]
    dhcp->request_timeout = 0;
 8013dc6:	687b      	ldr	r3, [r7, #4]
 8013dc8:	2200      	movs	r2, #0
 8013dca:	82da      	strh	r2, [r3, #22]
  }
}
 8013dcc:	bf00      	nop
 8013dce:	370c      	adds	r7, #12
 8013dd0:	46bd      	mov	sp, r7
 8013dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013dd6:	4770      	bx	lr

08013dd8 <dhcp_option>:
 * DHCP message.
 *
 */
static void
dhcp_option(struct dhcp *dhcp, u8_t option_type, u8_t option_len)
{
 8013dd8:	b580      	push	{r7, lr}
 8013dda:	b082      	sub	sp, #8
 8013ddc:	af00      	add	r7, sp, #0
 8013dde:	6078      	str	r0, [r7, #4]
 8013de0:	460b      	mov	r3, r1
 8013de2:	70fb      	strb	r3, [r7, #3]
 8013de4:	4613      	mov	r3, r2
 8013de6:	70bb      	strb	r3, [r7, #2]
  LWIP_ASSERT("dhcp_option: dhcp->options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", dhcp->options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 8013de8:	687b      	ldr	r3, [r7, #4]
 8013dea:	8a9b      	ldrh	r3, [r3, #20]
 8013dec:	461a      	mov	r2, r3
 8013dee:	78bb      	ldrb	r3, [r7, #2]
 8013df0:	4413      	add	r3, r2
 8013df2:	3302      	adds	r3, #2
 8013df4:	2b44      	cmp	r3, #68	; 0x44
 8013df6:	d906      	bls.n	8013e06 <dhcp_option+0x2e>
 8013df8:	4b11      	ldr	r3, [pc, #68]	; (8013e40 <dhcp_option+0x68>)
 8013dfa:	f44f 62ae 	mov.w	r2, #1392	; 0x570
 8013dfe:	4911      	ldr	r1, [pc, #68]	; (8013e44 <dhcp_option+0x6c>)
 8013e00:	4811      	ldr	r0, [pc, #68]	; (8013e48 <dhcp_option+0x70>)
 8013e02:	f003 ff83 	bl	8017d0c <iprintf>
  dhcp->msg_out->options[dhcp->options_out_len++] = option_type;
 8013e06:	687b      	ldr	r3, [r7, #4]
 8013e08:	691a      	ldr	r2, [r3, #16]
 8013e0a:	687b      	ldr	r3, [r7, #4]
 8013e0c:	8a9b      	ldrh	r3, [r3, #20]
 8013e0e:	1c59      	adds	r1, r3, #1
 8013e10:	b288      	uxth	r0, r1
 8013e12:	6879      	ldr	r1, [r7, #4]
 8013e14:	8288      	strh	r0, [r1, #20]
 8013e16:	4413      	add	r3, r2
 8013e18:	78fa      	ldrb	r2, [r7, #3]
 8013e1a:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
  dhcp->msg_out->options[dhcp->options_out_len++] = option_len;
 8013e1e:	687b      	ldr	r3, [r7, #4]
 8013e20:	691a      	ldr	r2, [r3, #16]
 8013e22:	687b      	ldr	r3, [r7, #4]
 8013e24:	8a9b      	ldrh	r3, [r3, #20]
 8013e26:	1c59      	adds	r1, r3, #1
 8013e28:	b288      	uxth	r0, r1
 8013e2a:	6879      	ldr	r1, [r7, #4]
 8013e2c:	8288      	strh	r0, [r1, #20]
 8013e2e:	4413      	add	r3, r2
 8013e30:	78ba      	ldrb	r2, [r7, #2]
 8013e32:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
}
 8013e36:	bf00      	nop
 8013e38:	3708      	adds	r7, #8
 8013e3a:	46bd      	mov	sp, r7
 8013e3c:	bd80      	pop	{r7, pc}
 8013e3e:	bf00      	nop
 8013e40:	0801a198 	.word	0x0801a198
 8013e44:	0801a328 	.word	0x0801a328
 8013e48:	0801a1f8 	.word	0x0801a1f8

08013e4c <dhcp_option_byte>:
 * Concatenate a single byte to the outgoing DHCP message.
 *
 */
static void
dhcp_option_byte(struct dhcp *dhcp, u8_t value)
{
 8013e4c:	b580      	push	{r7, lr}
 8013e4e:	b082      	sub	sp, #8
 8013e50:	af00      	add	r7, sp, #0
 8013e52:	6078      	str	r0, [r7, #4]
 8013e54:	460b      	mov	r3, r1
 8013e56:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("dhcp_option_byte: dhcp->options_out_len < DHCP_OPTIONS_LEN", dhcp->options_out_len < DHCP_OPTIONS_LEN);
 8013e58:	687b      	ldr	r3, [r7, #4]
 8013e5a:	8a9b      	ldrh	r3, [r3, #20]
 8013e5c:	2b43      	cmp	r3, #67	; 0x43
 8013e5e:	d906      	bls.n	8013e6e <dhcp_option_byte+0x22>
 8013e60:	4b0b      	ldr	r3, [pc, #44]	; (8013e90 <dhcp_option_byte+0x44>)
 8013e62:	f240 527b 	movw	r2, #1403	; 0x57b
 8013e66:	490b      	ldr	r1, [pc, #44]	; (8013e94 <dhcp_option_byte+0x48>)
 8013e68:	480b      	ldr	r0, [pc, #44]	; (8013e98 <dhcp_option_byte+0x4c>)
 8013e6a:	f003 ff4f 	bl	8017d0c <iprintf>
  dhcp->msg_out->options[dhcp->options_out_len++] = value;
 8013e6e:	687b      	ldr	r3, [r7, #4]
 8013e70:	691a      	ldr	r2, [r3, #16]
 8013e72:	687b      	ldr	r3, [r7, #4]
 8013e74:	8a9b      	ldrh	r3, [r3, #20]
 8013e76:	1c59      	adds	r1, r3, #1
 8013e78:	b288      	uxth	r0, r1
 8013e7a:	6879      	ldr	r1, [r7, #4]
 8013e7c:	8288      	strh	r0, [r1, #20]
 8013e7e:	4413      	add	r3, r2
 8013e80:	78fa      	ldrb	r2, [r7, #3]
 8013e82:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
}
 8013e86:	bf00      	nop
 8013e88:	3708      	adds	r7, #8
 8013e8a:	46bd      	mov	sp, r7
 8013e8c:	bd80      	pop	{r7, pc}
 8013e8e:	bf00      	nop
 8013e90:	0801a198 	.word	0x0801a198
 8013e94:	0801a370 	.word	0x0801a370
 8013e98:	0801a1f8 	.word	0x0801a1f8

08013e9c <dhcp_option_short>:

static void
dhcp_option_short(struct dhcp *dhcp, u16_t value)
{
 8013e9c:	b590      	push	{r4, r7, lr}
 8013e9e:	b083      	sub	sp, #12
 8013ea0:	af00      	add	r7, sp, #0
 8013ea2:	6078      	str	r0, [r7, #4]
 8013ea4:	460b      	mov	r3, r1
 8013ea6:	807b      	strh	r3, [r7, #2]
  LWIP_ASSERT("dhcp_option_short: dhcp->options_out_len + 2 <= DHCP_OPTIONS_LEN", dhcp->options_out_len + 2U <= DHCP_OPTIONS_LEN);
 8013ea8:	687b      	ldr	r3, [r7, #4]
 8013eaa:	8a9b      	ldrh	r3, [r3, #20]
 8013eac:	3302      	adds	r3, #2
 8013eae:	2b44      	cmp	r3, #68	; 0x44
 8013eb0:	d906      	bls.n	8013ec0 <dhcp_option_short+0x24>
 8013eb2:	4b14      	ldr	r3, [pc, #80]	; (8013f04 <dhcp_option_short+0x68>)
 8013eb4:	f240 5282 	movw	r2, #1410	; 0x582
 8013eb8:	4913      	ldr	r1, [pc, #76]	; (8013f08 <dhcp_option_short+0x6c>)
 8013eba:	4814      	ldr	r0, [pc, #80]	; (8013f0c <dhcp_option_short+0x70>)
 8013ebc:	f003 ff26 	bl	8017d0c <iprintf>
  dhcp->msg_out->options[dhcp->options_out_len++] = (u8_t)((value & 0xff00U) >> 8);
 8013ec0:	887b      	ldrh	r3, [r7, #2]
 8013ec2:	0a1b      	lsrs	r3, r3, #8
 8013ec4:	b298      	uxth	r0, r3
 8013ec6:	687b      	ldr	r3, [r7, #4]
 8013ec8:	691a      	ldr	r2, [r3, #16]
 8013eca:	687b      	ldr	r3, [r7, #4]
 8013ecc:	8a9b      	ldrh	r3, [r3, #20]
 8013ece:	1c59      	adds	r1, r3, #1
 8013ed0:	b28c      	uxth	r4, r1
 8013ed2:	6879      	ldr	r1, [r7, #4]
 8013ed4:	828c      	strh	r4, [r1, #20]
 8013ed6:	b2c1      	uxtb	r1, r0
 8013ed8:	4413      	add	r3, r2
 8013eda:	460a      	mov	r2, r1
 8013edc:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
  dhcp->msg_out->options[dhcp->options_out_len++] = (u8_t) (value & 0x00ffU);
 8013ee0:	687b      	ldr	r3, [r7, #4]
 8013ee2:	691a      	ldr	r2, [r3, #16]
 8013ee4:	687b      	ldr	r3, [r7, #4]
 8013ee6:	8a9b      	ldrh	r3, [r3, #20]
 8013ee8:	1c59      	adds	r1, r3, #1
 8013eea:	b288      	uxth	r0, r1
 8013eec:	6879      	ldr	r1, [r7, #4]
 8013eee:	8288      	strh	r0, [r1, #20]
 8013ef0:	8879      	ldrh	r1, [r7, #2]
 8013ef2:	b2c9      	uxtb	r1, r1
 8013ef4:	4413      	add	r3, r2
 8013ef6:	460a      	mov	r2, r1
 8013ef8:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
}
 8013efc:	bf00      	nop
 8013efe:	370c      	adds	r7, #12
 8013f00:	46bd      	mov	sp, r7
 8013f02:	bd90      	pop	{r4, r7, pc}
 8013f04:	0801a198 	.word	0x0801a198
 8013f08:	0801a3ac 	.word	0x0801a3ac
 8013f0c:	0801a1f8 	.word	0x0801a1f8

08013f10 <dhcp_option_long>:

static void
dhcp_option_long(struct dhcp *dhcp, u32_t value)
{
 8013f10:	b590      	push	{r4, r7, lr}
 8013f12:	b083      	sub	sp, #12
 8013f14:	af00      	add	r7, sp, #0
 8013f16:	6078      	str	r0, [r7, #4]
 8013f18:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("dhcp_option_long: dhcp->options_out_len + 4 <= DHCP_OPTIONS_LEN", dhcp->options_out_len + 4U <= DHCP_OPTIONS_LEN);
 8013f1a:	687b      	ldr	r3, [r7, #4]
 8013f1c:	8a9b      	ldrh	r3, [r3, #20]
 8013f1e:	3304      	adds	r3, #4
 8013f20:	2b44      	cmp	r3, #68	; 0x44
 8013f22:	d906      	bls.n	8013f32 <dhcp_option_long+0x22>
 8013f24:	4b22      	ldr	r3, [pc, #136]	; (8013fb0 <dhcp_option_long+0xa0>)
 8013f26:	f240 528a 	movw	r2, #1418	; 0x58a
 8013f2a:	4922      	ldr	r1, [pc, #136]	; (8013fb4 <dhcp_option_long+0xa4>)
 8013f2c:	4822      	ldr	r0, [pc, #136]	; (8013fb8 <dhcp_option_long+0xa8>)
 8013f2e:	f003 feed 	bl	8017d0c <iprintf>
  dhcp->msg_out->options[dhcp->options_out_len++] = (u8_t)((value & 0xff000000UL) >> 24);
 8013f32:	683b      	ldr	r3, [r7, #0]
 8013f34:	0e18      	lsrs	r0, r3, #24
 8013f36:	687b      	ldr	r3, [r7, #4]
 8013f38:	691a      	ldr	r2, [r3, #16]
 8013f3a:	687b      	ldr	r3, [r7, #4]
 8013f3c:	8a9b      	ldrh	r3, [r3, #20]
 8013f3e:	1c59      	adds	r1, r3, #1
 8013f40:	b28c      	uxth	r4, r1
 8013f42:	6879      	ldr	r1, [r7, #4]
 8013f44:	828c      	strh	r4, [r1, #20]
 8013f46:	b2c1      	uxtb	r1, r0
 8013f48:	4413      	add	r3, r2
 8013f4a:	460a      	mov	r2, r1
 8013f4c:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
  dhcp->msg_out->options[dhcp->options_out_len++] = (u8_t)((value & 0x00ff0000UL) >> 16);
 8013f50:	683b      	ldr	r3, [r7, #0]
 8013f52:	0c18      	lsrs	r0, r3, #16
 8013f54:	687b      	ldr	r3, [r7, #4]
 8013f56:	691a      	ldr	r2, [r3, #16]
 8013f58:	687b      	ldr	r3, [r7, #4]
 8013f5a:	8a9b      	ldrh	r3, [r3, #20]
 8013f5c:	1c59      	adds	r1, r3, #1
 8013f5e:	b28c      	uxth	r4, r1
 8013f60:	6879      	ldr	r1, [r7, #4]
 8013f62:	828c      	strh	r4, [r1, #20]
 8013f64:	b2c1      	uxtb	r1, r0
 8013f66:	4413      	add	r3, r2
 8013f68:	460a      	mov	r2, r1
 8013f6a:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
  dhcp->msg_out->options[dhcp->options_out_len++] = (u8_t)((value & 0x0000ff00UL) >> 8);
 8013f6e:	683b      	ldr	r3, [r7, #0]
 8013f70:	0a18      	lsrs	r0, r3, #8
 8013f72:	687b      	ldr	r3, [r7, #4]
 8013f74:	691a      	ldr	r2, [r3, #16]
 8013f76:	687b      	ldr	r3, [r7, #4]
 8013f78:	8a9b      	ldrh	r3, [r3, #20]
 8013f7a:	1c59      	adds	r1, r3, #1
 8013f7c:	b28c      	uxth	r4, r1
 8013f7e:	6879      	ldr	r1, [r7, #4]
 8013f80:	828c      	strh	r4, [r1, #20]
 8013f82:	b2c1      	uxtb	r1, r0
 8013f84:	4413      	add	r3, r2
 8013f86:	460a      	mov	r2, r1
 8013f88:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
  dhcp->msg_out->options[dhcp->options_out_len++] = (u8_t)((value & 0x000000ffUL));
 8013f8c:	687b      	ldr	r3, [r7, #4]
 8013f8e:	691a      	ldr	r2, [r3, #16]
 8013f90:	687b      	ldr	r3, [r7, #4]
 8013f92:	8a9b      	ldrh	r3, [r3, #20]
 8013f94:	1c59      	adds	r1, r3, #1
 8013f96:	b288      	uxth	r0, r1
 8013f98:	6879      	ldr	r1, [r7, #4]
 8013f9a:	8288      	strh	r0, [r1, #20]
 8013f9c:	6839      	ldr	r1, [r7, #0]
 8013f9e:	b2c9      	uxtb	r1, r1
 8013fa0:	4413      	add	r3, r2
 8013fa2:	460a      	mov	r2, r1
 8013fa4:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
}
 8013fa8:	bf00      	nop
 8013faa:	370c      	adds	r7, #12
 8013fac:	46bd      	mov	sp, r7
 8013fae:	bd90      	pop	{r4, r7, pc}
 8013fb0:	0801a198 	.word	0x0801a198
 8013fb4:	0801a3f0 	.word	0x0801a3f0
 8013fb8:	0801a1f8 	.word	0x0801a1f8

08013fbc <dhcp_parse_reply>:
 * use that further on.
 *
 */
static err_t
dhcp_parse_reply(struct dhcp *dhcp, struct pbuf *p)
{
 8013fbc:	b580      	push	{r7, lr}
 8013fbe:	b08e      	sub	sp, #56	; 0x38
 8013fc0:	af00      	add	r7, sp, #0
 8013fc2:	6078      	str	r0, [r7, #4]
 8013fc4:	6039      	str	r1, [r7, #0]
  u16_t offset;
  u16_t offset_max;
  u16_t options_idx;
  u16_t options_idx_max;
  struct pbuf *q;
  int parse_file_as_options = 0;
 8013fc6:	2300      	movs	r3, #0
 8013fc8:	627b      	str	r3, [r7, #36]	; 0x24
  int parse_sname_as_options = 0;
 8013fca:	2300      	movs	r3, #0
 8013fcc:	623b      	str	r3, [r7, #32]

  /* clear received options */
  dhcp_clear_all_options(dhcp);
 8013fce:	2208      	movs	r2, #8
 8013fd0:	2100      	movs	r1, #0
 8013fd2:	48b3      	ldr	r0, [pc, #716]	; (80142a0 <dhcp_parse_reply+0x2e4>)
 8013fd4:	f003 fdea 	bl	8017bac <memset>
  /* check that beginning of dhcp_msg (up to and including chaddr) is in first pbuf */
  if (p->len < DHCP_SNAME_OFS) {
 8013fd8:	683b      	ldr	r3, [r7, #0]
 8013fda:	895b      	ldrh	r3, [r3, #10]
 8013fdc:	2b2b      	cmp	r3, #43	; 0x2b
 8013fde:	d802      	bhi.n	8013fe6 <dhcp_parse_reply+0x2a>
    return ERR_BUF;
 8013fe0:	f06f 0301 	mvn.w	r3, #1
 8013fe4:	e26a      	b.n	80144bc <dhcp_parse_reply+0x500>
  }
  dhcp->msg_in = (struct dhcp_msg *)p->payload;
 8013fe6:	683b      	ldr	r3, [r7, #0]
 8013fe8:	685a      	ldr	r2, [r3, #4]
 8013fea:	687b      	ldr	r3, [r7, #4]
 8013fec:	605a      	str	r2, [r3, #4]
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* parse options */

  /* start with options field */
  options_idx = DHCP_OPTIONS_OFS;
 8013fee:	23f0      	movs	r3, #240	; 0xf0
 8013ff0:	85fb      	strh	r3, [r7, #46]	; 0x2e
  /* parse options to the end of the received packet */
  options_idx_max = p->tot_len;
 8013ff2:	683b      	ldr	r3, [r7, #0]
 8013ff4:	891b      	ldrh	r3, [r3, #8]
 8013ff6:	85bb      	strh	r3, [r7, #44]	; 0x2c
again:
  q = p;
 8013ff8:	683b      	ldr	r3, [r7, #0]
 8013ffa:	62bb      	str	r3, [r7, #40]	; 0x28
  while ((q != NULL) && (options_idx >= q->len)) {
 8013ffc:	e00c      	b.n	8014018 <dhcp_parse_reply+0x5c>
    options_idx -= q->len;
 8013ffe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014000:	895b      	ldrh	r3, [r3, #10]
 8014002:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8014004:	1ad3      	subs	r3, r2, r3
 8014006:	85fb      	strh	r3, [r7, #46]	; 0x2e
    options_idx_max -= q->len;
 8014008:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801400a:	895b      	ldrh	r3, [r3, #10]
 801400c:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 801400e:	1ad3      	subs	r3, r2, r3
 8014010:	85bb      	strh	r3, [r7, #44]	; 0x2c
    q = q->next;
 8014012:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014014:	681b      	ldr	r3, [r3, #0]
 8014016:	62bb      	str	r3, [r7, #40]	; 0x28
  while ((q != NULL) && (options_idx >= q->len)) {
 8014018:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801401a:	2b00      	cmp	r3, #0
 801401c:	d004      	beq.n	8014028 <dhcp_parse_reply+0x6c>
 801401e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014020:	895b      	ldrh	r3, [r3, #10]
 8014022:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8014024:	429a      	cmp	r2, r3
 8014026:	d2ea      	bcs.n	8013ffe <dhcp_parse_reply+0x42>
  }
  if (q == NULL) {
 8014028:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801402a:	2b00      	cmp	r3, #0
 801402c:	d102      	bne.n	8014034 <dhcp_parse_reply+0x78>
    return ERR_BUF;
 801402e:	f06f 0301 	mvn.w	r3, #1
 8014032:	e243      	b.n	80144bc <dhcp_parse_reply+0x500>
  }
  offset = options_idx;
 8014034:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8014036:	867b      	strh	r3, [r7, #50]	; 0x32
  offset_max = options_idx_max;
 8014038:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 801403a:	863b      	strh	r3, [r7, #48]	; 0x30
  options = (u8_t*)q->payload;
 801403c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801403e:	685b      	ldr	r3, [r3, #4]
 8014040:	637b      	str	r3, [r7, #52]	; 0x34
  /* at least 1 byte to read and no end marker, then at least 3 bytes to read? */
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 8014042:	e1fb      	b.n	801443c <dhcp_parse_reply+0x480>
    u8_t op = options[offset];
 8014044:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8014046:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8014048:	4413      	add	r3, r2
 801404a:	781b      	ldrb	r3, [r3, #0]
 801404c:	757b      	strb	r3, [r7, #21]
    u8_t len;
    u8_t decode_len = 0;
 801404e:	2300      	movs	r3, #0
 8014050:	77bb      	strb	r3, [r7, #30]
    int decode_idx = -1;
 8014052:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8014056:	61bb      	str	r3, [r7, #24]
    u16_t val_offset = offset + 2;
 8014058:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 801405a:	3302      	adds	r3, #2
 801405c:	82fb      	strh	r3, [r7, #22]
    /* len byte might be in the next pbuf */
    if ((offset + 1) < q->len) {
 801405e:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8014060:	3301      	adds	r3, #1
 8014062:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8014064:	8952      	ldrh	r2, [r2, #10]
 8014066:	4293      	cmp	r3, r2
 8014068:	da06      	bge.n	8014078 <dhcp_parse_reply+0xbc>
      len = options[offset + 1];
 801406a:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 801406c:	3301      	adds	r3, #1
 801406e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8014070:	4413      	add	r3, r2
 8014072:	781b      	ldrb	r3, [r3, #0]
 8014074:	77fb      	strb	r3, [r7, #31]
 8014076:	e00a      	b.n	801408e <dhcp_parse_reply+0xd2>
    } else {
      len = (q->next != NULL ? ((u8_t*)q->next->payload)[0] : 0);
 8014078:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801407a:	681b      	ldr	r3, [r3, #0]
 801407c:	2b00      	cmp	r3, #0
 801407e:	d004      	beq.n	801408a <dhcp_parse_reply+0xce>
 8014080:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014082:	681b      	ldr	r3, [r3, #0]
 8014084:	685b      	ldr	r3, [r3, #4]
 8014086:	781b      	ldrb	r3, [r3, #0]
 8014088:	e000      	b.n	801408c <dhcp_parse_reply+0xd0>
 801408a:	2300      	movs	r3, #0
 801408c:	77fb      	strb	r3, [r7, #31]
    }
    /* LWIP_DEBUGF(DHCP_DEBUG, ("msg_offset=%"U16_F", q->len=%"U16_F, msg_offset, q->len)); */
    decode_len = len;
 801408e:	7ffb      	ldrb	r3, [r7, #31]
 8014090:	77bb      	strb	r3, [r7, #30]
    switch(op) {
 8014092:	7d7b      	ldrb	r3, [r7, #21]
 8014094:	2b3b      	cmp	r3, #59	; 0x3b
 8014096:	f200 8121 	bhi.w	80142dc <dhcp_parse_reply+0x320>
 801409a:	a201      	add	r2, pc, #4	; (adr r2, 80140a0 <dhcp_parse_reply+0xe4>)
 801409c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80140a0:	08014191 	.word	0x08014191
 80140a4:	080141a1 	.word	0x080141a1
 80140a8:	080142dd 	.word	0x080142dd
 80140ac:	080141c1 	.word	0x080141c1
 80140b0:	080142dd 	.word	0x080142dd
 80140b4:	080142dd 	.word	0x080142dd
 80140b8:	080142dd 	.word	0x080142dd
 80140bc:	080142dd 	.word	0x080142dd
 80140c0:	080142dd 	.word	0x080142dd
 80140c4:	080142dd 	.word	0x080142dd
 80140c8:	080142dd 	.word	0x080142dd
 80140cc:	080142dd 	.word	0x080142dd
 80140d0:	080142dd 	.word	0x080142dd
 80140d4:	080142dd 	.word	0x080142dd
 80140d8:	080142dd 	.word	0x080142dd
 80140dc:	080142dd 	.word	0x080142dd
 80140e0:	080142dd 	.word	0x080142dd
 80140e4:	080142dd 	.word	0x080142dd
 80140e8:	080142dd 	.word	0x080142dd
 80140ec:	080142dd 	.word	0x080142dd
 80140f0:	080142dd 	.word	0x080142dd
 80140f4:	080142dd 	.word	0x080142dd
 80140f8:	080142dd 	.word	0x080142dd
 80140fc:	080142dd 	.word	0x080142dd
 8014100:	080142dd 	.word	0x080142dd
 8014104:	080142dd 	.word	0x080142dd
 8014108:	080142dd 	.word	0x080142dd
 801410c:	080142dd 	.word	0x080142dd
 8014110:	080142dd 	.word	0x080142dd
 8014114:	080142dd 	.word	0x080142dd
 8014118:	080142dd 	.word	0x080142dd
 801411c:	080142dd 	.word	0x080142dd
 8014120:	080142dd 	.word	0x080142dd
 8014124:	080142dd 	.word	0x080142dd
 8014128:	080142dd 	.word	0x080142dd
 801412c:	080142dd 	.word	0x080142dd
 8014130:	080142dd 	.word	0x080142dd
 8014134:	080142dd 	.word	0x080142dd
 8014138:	080142dd 	.word	0x080142dd
 801413c:	080142dd 	.word	0x080142dd
 8014140:	080142dd 	.word	0x080142dd
 8014144:	080142dd 	.word	0x080142dd
 8014148:	080142dd 	.word	0x080142dd
 801414c:	080142dd 	.word	0x080142dd
 8014150:	080142dd 	.word	0x080142dd
 8014154:	080142dd 	.word	0x080142dd
 8014158:	080142dd 	.word	0x080142dd
 801415c:	080142dd 	.word	0x080142dd
 8014160:	080142dd 	.word	0x080142dd
 8014164:	080142dd 	.word	0x080142dd
 8014168:	080142dd 	.word	0x080142dd
 801416c:	080141e7 	.word	0x080141e7
 8014170:	08014207 	.word	0x08014207
 8014174:	08014241 	.word	0x08014241
 8014178:	08014261 	.word	0x08014261
 801417c:	080142dd 	.word	0x080142dd
 8014180:	080142dd 	.word	0x080142dd
 8014184:	080142dd 	.word	0x080142dd
 8014188:	08014281 	.word	0x08014281
 801418c:	080142bd 	.word	0x080142bd
      /* case(DHCP_OPTION_END): handled above */
      case(DHCP_OPTION_PAD):
        /* special option: no len encoded */
        decode_len = len = 0;
 8014190:	2300      	movs	r3, #0
 8014192:	77fb      	strb	r3, [r7, #31]
 8014194:	7ffb      	ldrb	r3, [r7, #31]
 8014196:	77bb      	strb	r3, [r7, #30]
        /* will be increased below */
        offset--;
 8014198:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 801419a:	3b01      	subs	r3, #1
 801419c:	867b      	strh	r3, [r7, #50]	; 0x32
        break;
 801419e:	e0a0      	b.n	80142e2 <dhcp_parse_reply+0x326>
      case(DHCP_OPTION_SUBNET_MASK):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 80141a0:	7ffb      	ldrb	r3, [r7, #31]
 80141a2:	2b04      	cmp	r3, #4
 80141a4:	d009      	beq.n	80141ba <dhcp_parse_reply+0x1fe>
 80141a6:	4b3f      	ldr	r3, [pc, #252]	; (80142a4 <dhcp_parse_reply+0x2e8>)
 80141a8:	f240 52f6 	movw	r2, #1526	; 0x5f6
 80141ac:	493e      	ldr	r1, [pc, #248]	; (80142a8 <dhcp_parse_reply+0x2ec>)
 80141ae:	483f      	ldr	r0, [pc, #252]	; (80142ac <dhcp_parse_reply+0x2f0>)
 80141b0:	f003 fdac 	bl	8017d0c <iprintf>
 80141b4:	f06f 0305 	mvn.w	r3, #5
 80141b8:	e180      	b.n	80144bc <dhcp_parse_reply+0x500>
        decode_idx = DHCP_OPTION_IDX_SUBNET_MASK;
 80141ba:	2306      	movs	r3, #6
 80141bc:	61bb      	str	r3, [r7, #24]
        break;
 80141be:	e090      	b.n	80142e2 <dhcp_parse_reply+0x326>
      case(DHCP_OPTION_ROUTER):
        decode_len = 4; /* only copy the first given router */
 80141c0:	2304      	movs	r3, #4
 80141c2:	77bb      	strb	r3, [r7, #30]
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
 80141c4:	7ffa      	ldrb	r2, [r7, #31]
 80141c6:	7fbb      	ldrb	r3, [r7, #30]
 80141c8:	429a      	cmp	r2, r3
 80141ca:	d209      	bcs.n	80141e0 <dhcp_parse_reply+0x224>
 80141cc:	4b35      	ldr	r3, [pc, #212]	; (80142a4 <dhcp_parse_reply+0x2e8>)
 80141ce:	f240 52fb 	movw	r2, #1531	; 0x5fb
 80141d2:	4937      	ldr	r1, [pc, #220]	; (80142b0 <dhcp_parse_reply+0x2f4>)
 80141d4:	4835      	ldr	r0, [pc, #212]	; (80142ac <dhcp_parse_reply+0x2f0>)
 80141d6:	f003 fd99 	bl	8017d0c <iprintf>
 80141da:	f06f 0305 	mvn.w	r3, #5
 80141de:	e16d      	b.n	80144bc <dhcp_parse_reply+0x500>
        decode_idx = DHCP_OPTION_IDX_ROUTER;
 80141e0:	2307      	movs	r3, #7
 80141e2:	61bb      	str	r3, [r7, #24]
        break;
 80141e4:	e07d      	b.n	80142e2 <dhcp_parse_reply+0x326>
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
        decode_idx = DHCP_OPTION_IDX_DNS_SERVER;
        break;
#endif /* LWIP_DHCP_PROVIDE_DNS_SERVERS */
      case(DHCP_OPTION_LEASE_TIME):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 80141e6:	7ffb      	ldrb	r3, [r7, #31]
 80141e8:	2b04      	cmp	r3, #4
 80141ea:	d009      	beq.n	8014200 <dhcp_parse_reply+0x244>
 80141ec:	4b2d      	ldr	r3, [pc, #180]	; (80142a4 <dhcp_parse_reply+0x2e8>)
 80141ee:	f240 6209 	movw	r2, #1545	; 0x609
 80141f2:	492d      	ldr	r1, [pc, #180]	; (80142a8 <dhcp_parse_reply+0x2ec>)
 80141f4:	482d      	ldr	r0, [pc, #180]	; (80142ac <dhcp_parse_reply+0x2f0>)
 80141f6:	f003 fd89 	bl	8017d0c <iprintf>
 80141fa:	f06f 0305 	mvn.w	r3, #5
 80141fe:	e15d      	b.n	80144bc <dhcp_parse_reply+0x500>
        decode_idx = DHCP_OPTION_IDX_LEASE_TIME;
 8014200:	2303      	movs	r3, #3
 8014202:	61bb      	str	r3, [r7, #24]
        break;
 8014204:	e06d      	b.n	80142e2 <dhcp_parse_reply+0x326>
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
        decode_idx = DHCP_OPTION_IDX_NTP_SERVER;
        break;
#endif /* LWIP_DHCP_GET_NTP_SRV*/
      case(DHCP_OPTION_OVERLOAD):
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 8014206:	7ffb      	ldrb	r3, [r7, #31]
 8014208:	2b01      	cmp	r3, #1
 801420a:	d009      	beq.n	8014220 <dhcp_parse_reply+0x264>
 801420c:	4b25      	ldr	r3, [pc, #148]	; (80142a4 <dhcp_parse_reply+0x2e8>)
 801420e:	f240 6217 	movw	r2, #1559	; 0x617
 8014212:	4928      	ldr	r1, [pc, #160]	; (80142b4 <dhcp_parse_reply+0x2f8>)
 8014214:	4825      	ldr	r0, [pc, #148]	; (80142ac <dhcp_parse_reply+0x2f0>)
 8014216:	f003 fd79 	bl	8017d0c <iprintf>
 801421a:	f06f 0305 	mvn.w	r3, #5
 801421e:	e14d      	b.n	80144bc <dhcp_parse_reply+0x500>
        /* decode overload only in options, not in file/sname: invalid packet */
        LWIP_ERROR("overload in file/sname", options_idx == DHCP_OPTIONS_OFS, return ERR_VAL;);
 8014220:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8014222:	2bf0      	cmp	r3, #240	; 0xf0
 8014224:	d009      	beq.n	801423a <dhcp_parse_reply+0x27e>
 8014226:	4b1f      	ldr	r3, [pc, #124]	; (80142a4 <dhcp_parse_reply+0x2e8>)
 8014228:	f240 6219 	movw	r2, #1561	; 0x619
 801422c:	4922      	ldr	r1, [pc, #136]	; (80142b8 <dhcp_parse_reply+0x2fc>)
 801422e:	481f      	ldr	r0, [pc, #124]	; (80142ac <dhcp_parse_reply+0x2f0>)
 8014230:	f003 fd6c 	bl	8017d0c <iprintf>
 8014234:	f06f 0305 	mvn.w	r3, #5
 8014238:	e140      	b.n	80144bc <dhcp_parse_reply+0x500>
        decode_idx = DHCP_OPTION_IDX_OVERLOAD;
 801423a:	2300      	movs	r3, #0
 801423c:	61bb      	str	r3, [r7, #24]
        break;
 801423e:	e050      	b.n	80142e2 <dhcp_parse_reply+0x326>
      case(DHCP_OPTION_MESSAGE_TYPE):
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 8014240:	7ffb      	ldrb	r3, [r7, #31]
 8014242:	2b01      	cmp	r3, #1
 8014244:	d009      	beq.n	801425a <dhcp_parse_reply+0x29e>
 8014246:	4b17      	ldr	r3, [pc, #92]	; (80142a4 <dhcp_parse_reply+0x2e8>)
 8014248:	f240 621d 	movw	r2, #1565	; 0x61d
 801424c:	4919      	ldr	r1, [pc, #100]	; (80142b4 <dhcp_parse_reply+0x2f8>)
 801424e:	4817      	ldr	r0, [pc, #92]	; (80142ac <dhcp_parse_reply+0x2f0>)
 8014250:	f003 fd5c 	bl	8017d0c <iprintf>
 8014254:	f06f 0305 	mvn.w	r3, #5
 8014258:	e130      	b.n	80144bc <dhcp_parse_reply+0x500>
        decode_idx = DHCP_OPTION_IDX_MSG_TYPE;
 801425a:	2301      	movs	r3, #1
 801425c:	61bb      	str	r3, [r7, #24]
        break;
 801425e:	e040      	b.n	80142e2 <dhcp_parse_reply+0x326>
      case(DHCP_OPTION_SERVER_ID):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8014260:	7ffb      	ldrb	r3, [r7, #31]
 8014262:	2b04      	cmp	r3, #4
 8014264:	d009      	beq.n	801427a <dhcp_parse_reply+0x2be>
 8014266:	4b0f      	ldr	r3, [pc, #60]	; (80142a4 <dhcp_parse_reply+0x2e8>)
 8014268:	f240 6221 	movw	r2, #1569	; 0x621
 801426c:	490e      	ldr	r1, [pc, #56]	; (80142a8 <dhcp_parse_reply+0x2ec>)
 801426e:	480f      	ldr	r0, [pc, #60]	; (80142ac <dhcp_parse_reply+0x2f0>)
 8014270:	f003 fd4c 	bl	8017d0c <iprintf>
 8014274:	f06f 0305 	mvn.w	r3, #5
 8014278:	e120      	b.n	80144bc <dhcp_parse_reply+0x500>
        decode_idx = DHCP_OPTION_IDX_SERVER_ID;
 801427a:	2302      	movs	r3, #2
 801427c:	61bb      	str	r3, [r7, #24]
        break;
 801427e:	e030      	b.n	80142e2 <dhcp_parse_reply+0x326>
      case(DHCP_OPTION_T1):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8014280:	7ffb      	ldrb	r3, [r7, #31]
 8014282:	2b04      	cmp	r3, #4
 8014284:	d009      	beq.n	801429a <dhcp_parse_reply+0x2de>
 8014286:	4b07      	ldr	r3, [pc, #28]	; (80142a4 <dhcp_parse_reply+0x2e8>)
 8014288:	f240 6225 	movw	r2, #1573	; 0x625
 801428c:	4906      	ldr	r1, [pc, #24]	; (80142a8 <dhcp_parse_reply+0x2ec>)
 801428e:	4807      	ldr	r0, [pc, #28]	; (80142ac <dhcp_parse_reply+0x2f0>)
 8014290:	f003 fd3c 	bl	8017d0c <iprintf>
 8014294:	f06f 0305 	mvn.w	r3, #5
 8014298:	e110      	b.n	80144bc <dhcp_parse_reply+0x500>
        decode_idx = DHCP_OPTION_IDX_T1;
 801429a:	2304      	movs	r3, #4
 801429c:	61bb      	str	r3, [r7, #24]
        break;
 801429e:	e020      	b.n	80142e2 <dhcp_parse_reply+0x326>
 80142a0:	2000b5cc 	.word	0x2000b5cc
 80142a4:	0801a198 	.word	0x0801a198
 80142a8:	0801a430 	.word	0x0801a430
 80142ac:	0801a1f8 	.word	0x0801a1f8
 80142b0:	0801a43c 	.word	0x0801a43c
 80142b4:	0801a450 	.word	0x0801a450
 80142b8:	0801a45c 	.word	0x0801a45c
      case(DHCP_OPTION_T2):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 80142bc:	7ffb      	ldrb	r3, [r7, #31]
 80142be:	2b04      	cmp	r3, #4
 80142c0:	d009      	beq.n	80142d6 <dhcp_parse_reply+0x31a>
 80142c2:	4b80      	ldr	r3, [pc, #512]	; (80144c4 <dhcp_parse_reply+0x508>)
 80142c4:	f240 6229 	movw	r2, #1577	; 0x629
 80142c8:	497f      	ldr	r1, [pc, #508]	; (80144c8 <dhcp_parse_reply+0x50c>)
 80142ca:	4880      	ldr	r0, [pc, #512]	; (80144cc <dhcp_parse_reply+0x510>)
 80142cc:	f003 fd1e 	bl	8017d0c <iprintf>
 80142d0:	f06f 0305 	mvn.w	r3, #5
 80142d4:	e0f2      	b.n	80144bc <dhcp_parse_reply+0x500>
        decode_idx = DHCP_OPTION_IDX_T2;
 80142d6:	2305      	movs	r3, #5
 80142d8:	61bb      	str	r3, [r7, #24]
        break;
 80142da:	e002      	b.n	80142e2 <dhcp_parse_reply+0x326>
      default:
        decode_len = 0;
 80142dc:	2300      	movs	r3, #0
 80142de:	77bb      	strb	r3, [r7, #30]
        LWIP_DEBUGF(DHCP_DEBUG, ("skipping option %"U16_F" in options\n", (u16_t)op));
        break;
 80142e0:	bf00      	nop
    }
    offset += len + 2;
 80142e2:	7ffb      	ldrb	r3, [r7, #31]
 80142e4:	b29a      	uxth	r2, r3
 80142e6:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 80142e8:	4413      	add	r3, r2
 80142ea:	b29b      	uxth	r3, r3
 80142ec:	3302      	adds	r3, #2
 80142ee:	867b      	strh	r3, [r7, #50]	; 0x32
    if (decode_len > 0) {
 80142f0:	7fbb      	ldrb	r3, [r7, #30]
 80142f2:	2b00      	cmp	r3, #0
 80142f4:	d079      	beq.n	80143ea <dhcp_parse_reply+0x42e>
      u32_t value = 0;
 80142f6:	2300      	movs	r3, #0
 80142f8:	60bb      	str	r3, [r7, #8]
      u16_t copy_len;
decode_next:
      LWIP_ASSERT("check decode_idx", decode_idx >= 0 && decode_idx < DHCP_OPTION_IDX_MAX);
 80142fa:	69bb      	ldr	r3, [r7, #24]
 80142fc:	2b00      	cmp	r3, #0
 80142fe:	db02      	blt.n	8014306 <dhcp_parse_reply+0x34a>
 8014300:	69bb      	ldr	r3, [r7, #24]
 8014302:	2b07      	cmp	r3, #7
 8014304:	dd06      	ble.n	8014314 <dhcp_parse_reply+0x358>
 8014306:	4b6f      	ldr	r3, [pc, #444]	; (80144c4 <dhcp_parse_reply+0x508>)
 8014308:	f240 6236 	movw	r2, #1590	; 0x636
 801430c:	4970      	ldr	r1, [pc, #448]	; (80144d0 <dhcp_parse_reply+0x514>)
 801430e:	486f      	ldr	r0, [pc, #444]	; (80144cc <dhcp_parse_reply+0x510>)
 8014310:	f003 fcfc 	bl	8017d0c <iprintf>
      if (!dhcp_option_given(dhcp, decode_idx)) {
 8014314:	4a6f      	ldr	r2, [pc, #444]	; (80144d4 <dhcp_parse_reply+0x518>)
 8014316:	69bb      	ldr	r3, [r7, #24]
 8014318:	4413      	add	r3, r2
 801431a:	781b      	ldrb	r3, [r3, #0]
 801431c:	2b00      	cmp	r3, #0
 801431e:	d164      	bne.n	80143ea <dhcp_parse_reply+0x42e>
        copy_len = LWIP_MIN(decode_len, 4);
 8014320:	7fbb      	ldrb	r3, [r7, #30]
 8014322:	2b04      	cmp	r3, #4
 8014324:	bf28      	it	cs
 8014326:	2304      	movcs	r3, #4
 8014328:	b2db      	uxtb	r3, r3
 801432a:	827b      	strh	r3, [r7, #18]
        if (pbuf_copy_partial(q, &value, copy_len, val_offset) != copy_len) {
 801432c:	8afb      	ldrh	r3, [r7, #22]
 801432e:	8a7a      	ldrh	r2, [r7, #18]
 8014330:	f107 0108 	add.w	r1, r7, #8
 8014334:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8014336:	f7f9 fc27 	bl	800db88 <pbuf_copy_partial>
 801433a:	4603      	mov	r3, r0
 801433c:	461a      	mov	r2, r3
 801433e:	8a7b      	ldrh	r3, [r7, #18]
 8014340:	4293      	cmp	r3, r2
 8014342:	d002      	beq.n	801434a <dhcp_parse_reply+0x38e>
          return ERR_BUF;
 8014344:	f06f 0301 	mvn.w	r3, #1
 8014348:	e0b8      	b.n	80144bc <dhcp_parse_reply+0x500>
        }
        if (decode_len > 4) {
 801434a:	7fbb      	ldrb	r3, [r7, #30]
 801434c:	2b04      	cmp	r3, #4
 801434e:	d927      	bls.n	80143a0 <dhcp_parse_reply+0x3e4>
          /* decode more than one u32_t */
          LWIP_ERROR("decode_len %% 4 == 0", decode_len % 4 == 0, return ERR_VAL;);
 8014350:	7fbb      	ldrb	r3, [r7, #30]
 8014352:	f003 0303 	and.w	r3, r3, #3
 8014356:	b2db      	uxtb	r3, r3
 8014358:	2b00      	cmp	r3, #0
 801435a:	d009      	beq.n	8014370 <dhcp_parse_reply+0x3b4>
 801435c:	4b59      	ldr	r3, [pc, #356]	; (80144c4 <dhcp_parse_reply+0x508>)
 801435e:	f240 623e 	movw	r2, #1598	; 0x63e
 8014362:	495d      	ldr	r1, [pc, #372]	; (80144d8 <dhcp_parse_reply+0x51c>)
 8014364:	4859      	ldr	r0, [pc, #356]	; (80144cc <dhcp_parse_reply+0x510>)
 8014366:	f003 fcd1 	bl	8017d0c <iprintf>
 801436a:	f06f 0305 	mvn.w	r3, #5
 801436e:	e0a5      	b.n	80144bc <dhcp_parse_reply+0x500>
          dhcp_got_option(dhcp, decode_idx);
 8014370:	4a58      	ldr	r2, [pc, #352]	; (80144d4 <dhcp_parse_reply+0x518>)
 8014372:	69bb      	ldr	r3, [r7, #24]
 8014374:	4413      	add	r3, r2
 8014376:	2201      	movs	r2, #1
 8014378:	701a      	strb	r2, [r3, #0]
          dhcp_set_option_value(dhcp, decode_idx, lwip_htonl(value));
 801437a:	68bb      	ldr	r3, [r7, #8]
 801437c:	4618      	mov	r0, r3
 801437e:	f7f8 f863 	bl	800c448 <lwip_htonl>
 8014382:	4601      	mov	r1, r0
 8014384:	4a55      	ldr	r2, [pc, #340]	; (80144dc <dhcp_parse_reply+0x520>)
 8014386:	69bb      	ldr	r3, [r7, #24]
 8014388:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
          decode_len -= 4;
 801438c:	7fbb      	ldrb	r3, [r7, #30]
 801438e:	3b04      	subs	r3, #4
 8014390:	77bb      	strb	r3, [r7, #30]
          val_offset += 4;
 8014392:	8afb      	ldrh	r3, [r7, #22]
 8014394:	3304      	adds	r3, #4
 8014396:	82fb      	strh	r3, [r7, #22]
          decode_idx++;
 8014398:	69bb      	ldr	r3, [r7, #24]
 801439a:	3301      	adds	r3, #1
 801439c:	61bb      	str	r3, [r7, #24]
          goto decode_next;
 801439e:	e7ac      	b.n	80142fa <dhcp_parse_reply+0x33e>
        } else if (decode_len == 4) {
 80143a0:	7fbb      	ldrb	r3, [r7, #30]
 80143a2:	2b04      	cmp	r3, #4
 80143a4:	d106      	bne.n	80143b4 <dhcp_parse_reply+0x3f8>
          value = lwip_ntohl(value);
 80143a6:	68bb      	ldr	r3, [r7, #8]
 80143a8:	4618      	mov	r0, r3
 80143aa:	f7f8 f84d 	bl	800c448 <lwip_htonl>
 80143ae:	4603      	mov	r3, r0
 80143b0:	60bb      	str	r3, [r7, #8]
 80143b2:	e010      	b.n	80143d6 <dhcp_parse_reply+0x41a>
        } else {
          LWIP_ERROR("invalid decode_len", decode_len == 1, return ERR_VAL;);
 80143b4:	7fbb      	ldrb	r3, [r7, #30]
 80143b6:	2b01      	cmp	r3, #1
 80143b8:	d009      	beq.n	80143ce <dhcp_parse_reply+0x412>
 80143ba:	4b42      	ldr	r3, [pc, #264]	; (80144c4 <dhcp_parse_reply+0x508>)
 80143bc:	f44f 62c9 	mov.w	r2, #1608	; 0x648
 80143c0:	4947      	ldr	r1, [pc, #284]	; (80144e0 <dhcp_parse_reply+0x524>)
 80143c2:	4842      	ldr	r0, [pc, #264]	; (80144cc <dhcp_parse_reply+0x510>)
 80143c4:	f003 fca2 	bl	8017d0c <iprintf>
 80143c8:	f06f 0305 	mvn.w	r3, #5
 80143cc:	e076      	b.n	80144bc <dhcp_parse_reply+0x500>
          value = ((u8_t*)&value)[0];
 80143ce:	f107 0308 	add.w	r3, r7, #8
 80143d2:	781b      	ldrb	r3, [r3, #0]
 80143d4:	60bb      	str	r3, [r7, #8]
        }
        dhcp_got_option(dhcp, decode_idx);
 80143d6:	4a3f      	ldr	r2, [pc, #252]	; (80144d4 <dhcp_parse_reply+0x518>)
 80143d8:	69bb      	ldr	r3, [r7, #24]
 80143da:	4413      	add	r3, r2
 80143dc:	2201      	movs	r2, #1
 80143de:	701a      	strb	r2, [r3, #0]
        dhcp_set_option_value(dhcp, decode_idx, value);
 80143e0:	68ba      	ldr	r2, [r7, #8]
 80143e2:	493e      	ldr	r1, [pc, #248]	; (80144dc <dhcp_parse_reply+0x520>)
 80143e4:	69bb      	ldr	r3, [r7, #24]
 80143e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      }
    }
    if (offset >= q->len) {
 80143ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80143ec:	895b      	ldrh	r3, [r3, #10]
 80143ee:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
 80143f0:	429a      	cmp	r2, r3
 80143f2:	d323      	bcc.n	801443c <dhcp_parse_reply+0x480>
      offset -= q->len;
 80143f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80143f6:	895b      	ldrh	r3, [r3, #10]
 80143f8:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
 80143fa:	1ad3      	subs	r3, r2, r3
 80143fc:	867b      	strh	r3, [r7, #50]	; 0x32
      offset_max -= q->len;
 80143fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014400:	895b      	ldrh	r3, [r3, #10]
 8014402:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 8014404:	1ad3      	subs	r3, r2, r3
 8014406:	863b      	strh	r3, [r7, #48]	; 0x30
      if ((offset < offset_max) && offset_max) {
 8014408:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
 801440a:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 801440c:	429a      	cmp	r2, r3
 801440e:	d223      	bcs.n	8014458 <dhcp_parse_reply+0x49c>
 8014410:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8014412:	2b00      	cmp	r3, #0
 8014414:	d020      	beq.n	8014458 <dhcp_parse_reply+0x49c>
        q = q->next;
 8014416:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014418:	681b      	ldr	r3, [r3, #0]
 801441a:	62bb      	str	r3, [r7, #40]	; 0x28
        LWIP_ERROR("next pbuf was null", q != NULL, return ERR_VAL;);
 801441c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801441e:	2b00      	cmp	r3, #0
 8014420:	d109      	bne.n	8014436 <dhcp_parse_reply+0x47a>
 8014422:	4b28      	ldr	r3, [pc, #160]	; (80144c4 <dhcp_parse_reply+0x508>)
 8014424:	f240 6254 	movw	r2, #1620	; 0x654
 8014428:	492e      	ldr	r1, [pc, #184]	; (80144e4 <dhcp_parse_reply+0x528>)
 801442a:	4828      	ldr	r0, [pc, #160]	; (80144cc <dhcp_parse_reply+0x510>)
 801442c:	f003 fc6e 	bl	8017d0c <iprintf>
 8014430:	f06f 0305 	mvn.w	r3, #5
 8014434:	e042      	b.n	80144bc <dhcp_parse_reply+0x500>
        options = (u8_t*)q->payload;
 8014436:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014438:	685b      	ldr	r3, [r3, #4]
 801443a:	637b      	str	r3, [r7, #52]	; 0x34
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 801443c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801443e:	2b00      	cmp	r3, #0
 8014440:	d00a      	beq.n	8014458 <dhcp_parse_reply+0x49c>
 8014442:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
 8014444:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8014446:	429a      	cmp	r2, r3
 8014448:	d206      	bcs.n	8014458 <dhcp_parse_reply+0x49c>
 801444a:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 801444c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801444e:	4413      	add	r3, r2
 8014450:	781b      	ldrb	r3, [r3, #0]
 8014452:	2bff      	cmp	r3, #255	; 0xff
 8014454:	f47f adf6 	bne.w	8014044 <dhcp_parse_reply+0x88>
        break;
      }
    }
  }
  /* is this an overloaded message? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_OVERLOAD)) {
 8014458:	4b1e      	ldr	r3, [pc, #120]	; (80144d4 <dhcp_parse_reply+0x518>)
 801445a:	781b      	ldrb	r3, [r3, #0]
 801445c:	2b00      	cmp	r3, #0
 801445e:	d018      	beq.n	8014492 <dhcp_parse_reply+0x4d6>
    u32_t overload = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 8014460:	4b1e      	ldr	r3, [pc, #120]	; (80144dc <dhcp_parse_reply+0x520>)
 8014462:	681b      	ldr	r3, [r3, #0]
 8014464:	60fb      	str	r3, [r7, #12]
    dhcp_clear_option(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 8014466:	4b1b      	ldr	r3, [pc, #108]	; (80144d4 <dhcp_parse_reply+0x518>)
 8014468:	2200      	movs	r2, #0
 801446a:	701a      	strb	r2, [r3, #0]
    if (overload == DHCP_OVERLOAD_FILE) {
 801446c:	68fb      	ldr	r3, [r7, #12]
 801446e:	2b01      	cmp	r3, #1
 8014470:	d102      	bne.n	8014478 <dhcp_parse_reply+0x4bc>
      parse_file_as_options = 1;
 8014472:	2301      	movs	r3, #1
 8014474:	627b      	str	r3, [r7, #36]	; 0x24
 8014476:	e00c      	b.n	8014492 <dhcp_parse_reply+0x4d6>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded file field\n"));
    } else if (overload == DHCP_OVERLOAD_SNAME) {
 8014478:	68fb      	ldr	r3, [r7, #12]
 801447a:	2b02      	cmp	r3, #2
 801447c:	d102      	bne.n	8014484 <dhcp_parse_reply+0x4c8>
      parse_sname_as_options = 1;
 801447e:	2301      	movs	r3, #1
 8014480:	623b      	str	r3, [r7, #32]
 8014482:	e006      	b.n	8014492 <dhcp_parse_reply+0x4d6>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded sname field\n"));
    } else if (overload == DHCP_OVERLOAD_SNAME_FILE) {
 8014484:	68fb      	ldr	r3, [r7, #12]
 8014486:	2b03      	cmp	r3, #3
 8014488:	d103      	bne.n	8014492 <dhcp_parse_reply+0x4d6>
      parse_sname_as_options = 1;
 801448a:	2301      	movs	r3, #1
 801448c:	623b      	str	r3, [r7, #32]
      parse_file_as_options = 1;
 801448e:	2301      	movs	r3, #1
 8014490:	627b      	str	r3, [r7, #36]	; 0x24
      /* make sure the string is really NULL-terminated */
      dhcp->boot_file_name[DHCP_FILE_LEN-1] = 0;
    }
#endif /* LWIP_DHCP_BOOTP_FILE */
  }
  if (parse_file_as_options) {
 8014492:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014494:	2b00      	cmp	r3, #0
 8014496:	d006      	beq.n	80144a6 <dhcp_parse_reply+0x4ea>
    /* if both are overloaded, parse file first and then sname (RFC 2131 ch. 4.1) */
    parse_file_as_options = 0;
 8014498:	2300      	movs	r3, #0
 801449a:	627b      	str	r3, [r7, #36]	; 0x24
    options_idx = DHCP_FILE_OFS;
 801449c:	236c      	movs	r3, #108	; 0x6c
 801449e:	85fb      	strh	r3, [r7, #46]	; 0x2e
    options_idx_max = DHCP_FILE_OFS + DHCP_FILE_LEN;
 80144a0:	23ec      	movs	r3, #236	; 0xec
 80144a2:	85bb      	strh	r3, [r7, #44]	; 0x2c
    goto again;
 80144a4:	e5a8      	b.n	8013ff8 <dhcp_parse_reply+0x3c>
  } else if (parse_sname_as_options) {
 80144a6:	6a3b      	ldr	r3, [r7, #32]
 80144a8:	2b00      	cmp	r3, #0
 80144aa:	d006      	beq.n	80144ba <dhcp_parse_reply+0x4fe>
    parse_sname_as_options = 0;
 80144ac:	2300      	movs	r3, #0
 80144ae:	623b      	str	r3, [r7, #32]
    options_idx = DHCP_SNAME_OFS;
 80144b0:	232c      	movs	r3, #44	; 0x2c
 80144b2:	85fb      	strh	r3, [r7, #46]	; 0x2e
    options_idx_max = DHCP_SNAME_OFS + DHCP_SNAME_LEN;
 80144b4:	236c      	movs	r3, #108	; 0x6c
 80144b6:	85bb      	strh	r3, [r7, #44]	; 0x2c
    goto again;
 80144b8:	e59e      	b.n	8013ff8 <dhcp_parse_reply+0x3c>
  }
  return ERR_OK;
 80144ba:	2300      	movs	r3, #0
}
 80144bc:	4618      	mov	r0, r3
 80144be:	3738      	adds	r7, #56	; 0x38
 80144c0:	46bd      	mov	sp, r7
 80144c2:	bd80      	pop	{r7, pc}
 80144c4:	0801a198 	.word	0x0801a198
 80144c8:	0801a430 	.word	0x0801a430
 80144cc:	0801a1f8 	.word	0x0801a1f8
 80144d0:	0801a474 	.word	0x0801a474
 80144d4:	2000b5cc 	.word	0x2000b5cc
 80144d8:	0801a488 	.word	0x0801a488
 80144dc:	2000b5d4 	.word	0x2000b5d4
 80144e0:	0801a4a0 	.word	0x0801a4a0
 80144e4:	0801a4b4 	.word	0x0801a4b4

080144e8 <dhcp_recv>:
/**
 * If an incoming DHCP message is in response to us, then trigger the state machine
 */
static void
dhcp_recv(void *arg, struct udp_pcb *pcb, struct pbuf *p, const ip_addr_t *addr, u16_t port)
{
 80144e8:	b580      	push	{r7, lr}
 80144ea:	b08a      	sub	sp, #40	; 0x28
 80144ec:	af00      	add	r7, sp, #0
 80144ee:	60f8      	str	r0, [r7, #12]
 80144f0:	60b9      	str	r1, [r7, #8]
 80144f2:	607a      	str	r2, [r7, #4]
 80144f4:	603b      	str	r3, [r7, #0]
  struct netif *netif = ip_current_input_netif();
 80144f6:	4b68      	ldr	r3, [pc, #416]	; (8014698 <dhcp_recv+0x1b0>)
 80144f8:	685b      	ldr	r3, [r3, #4]
 80144fa:	623b      	str	r3, [r7, #32]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80144fc:	6a3b      	ldr	r3, [r7, #32]
 80144fe:	6a1b      	ldr	r3, [r3, #32]
 8014500:	61fb      	str	r3, [r7, #28]
  struct dhcp_msg *reply_msg = (struct dhcp_msg *)p->payload;
 8014502:	687b      	ldr	r3, [r7, #4]
 8014504:	685b      	ldr	r3, [r3, #4]
 8014506:	61bb      	str	r3, [r7, #24]
  u8_t i;

  LWIP_UNUSED_ARG(arg);

  /* Caught DHCP message from netif that does not have DHCP enabled? -> not interested */
  if ((dhcp == NULL) || (dhcp->pcb_allocated == 0)) {
 8014508:	69fb      	ldr	r3, [r7, #28]
 801450a:	2b00      	cmp	r3, #0
 801450c:	f000 80a9 	beq.w	8014662 <dhcp_recv+0x17a>
 8014510:	69fb      	ldr	r3, [r7, #28]
 8014512:	7a1b      	ldrb	r3, [r3, #8]
 8014514:	2b00      	cmp	r3, #0
 8014516:	f000 80a4 	beq.w	8014662 <dhcp_recv+0x17a>
  /* prevent warnings about unused arguments */
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(addr);
  LWIP_UNUSED_ARG(port);

  LWIP_ASSERT("reply wasn't freed", dhcp->msg_in == NULL);
 801451a:	69fb      	ldr	r3, [r7, #28]
 801451c:	685b      	ldr	r3, [r3, #4]
 801451e:	2b00      	cmp	r3, #0
 8014520:	d006      	beq.n	8014530 <dhcp_recv+0x48>
 8014522:	4b5e      	ldr	r3, [pc, #376]	; (801469c <dhcp_recv+0x1b4>)
 8014524:	f44f 62d5 	mov.w	r2, #1704	; 0x6a8
 8014528:	495d      	ldr	r1, [pc, #372]	; (80146a0 <dhcp_recv+0x1b8>)
 801452a:	485e      	ldr	r0, [pc, #376]	; (80146a4 <dhcp_recv+0x1bc>)
 801452c:	f003 fbee 	bl	8017d0c <iprintf>

  if (p->len < DHCP_MIN_REPLY_LEN) {
 8014530:	687b      	ldr	r3, [r7, #4]
 8014532:	895b      	ldrh	r3, [r3, #10]
 8014534:	2b2b      	cmp	r3, #43	; 0x2b
 8014536:	f240 8096 	bls.w	8014666 <dhcp_recv+0x17e>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("DHCP reply message or pbuf too short\n"));
    goto free_pbuf_and_return;
  }

  if (reply_msg->op != DHCP_BOOTREPLY) {
 801453a:	69bb      	ldr	r3, [r7, #24]
 801453c:	781b      	ldrb	r3, [r3, #0]
 801453e:	2b02      	cmp	r3, #2
 8014540:	f040 8093 	bne.w	801466a <dhcp_recv+0x182>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("not a DHCP reply message, but type %"U16_F"\n", (u16_t)reply_msg->op));
    goto free_pbuf_and_return;
  }
  /* iterate through hardware address and match against DHCP message */
  for (i = 0; i < netif->hwaddr_len && i < NETIF_MAX_HWADDR_LEN && i < DHCP_CHADDR_LEN; i++) {
 8014544:	2300      	movs	r3, #0
 8014546:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801454a:	e012      	b.n	8014572 <dhcp_recv+0x8a>
    if (netif->hwaddr[i] != reply_msg->chaddr[i]) {
 801454c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8014550:	6a3a      	ldr	r2, [r7, #32]
 8014552:	4413      	add	r3, r2
 8014554:	f893 2029 	ldrb.w	r2, [r3, #41]	; 0x29
 8014558:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801455c:	69b9      	ldr	r1, [r7, #24]
 801455e:	440b      	add	r3, r1
 8014560:	7f1b      	ldrb	r3, [r3, #28]
 8014562:	429a      	cmp	r2, r3
 8014564:	f040 8083 	bne.w	801466e <dhcp_recv+0x186>
  for (i = 0; i < netif->hwaddr_len && i < NETIF_MAX_HWADDR_LEN && i < DHCP_CHADDR_LEN; i++) {
 8014568:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801456c:	3301      	adds	r3, #1
 801456e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8014572:	6a3b      	ldr	r3, [r7, #32]
 8014574:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8014578:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 801457c:	429a      	cmp	r2, r3
 801457e:	d207      	bcs.n	8014590 <dhcp_recv+0xa8>
 8014580:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8014584:	2b05      	cmp	r3, #5
 8014586:	d803      	bhi.n	8014590 <dhcp_recv+0xa8>
 8014588:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801458c:	2b0f      	cmp	r3, #15
 801458e:	d9dd      	bls.n	801454c <dhcp_recv+0x64>
        (u16_t)i, (u16_t)netif->hwaddr[i], (u16_t)i, (u16_t)reply_msg->chaddr[i]));
      goto free_pbuf_and_return;
    }
  }
  /* match transaction ID against what we expected */
  if (lwip_ntohl(reply_msg->xid) != dhcp->xid) {
 8014590:	69bb      	ldr	r3, [r7, #24]
 8014592:	685b      	ldr	r3, [r3, #4]
 8014594:	4618      	mov	r0, r3
 8014596:	f7f7 ff57 	bl	800c448 <lwip_htonl>
 801459a:	4602      	mov	r2, r0
 801459c:	69fb      	ldr	r3, [r7, #28]
 801459e:	681b      	ldr	r3, [r3, #0]
 80145a0:	429a      	cmp	r2, r3
 80145a2:	d166      	bne.n	8014672 <dhcp_recv+0x18a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
      ("transaction id mismatch reply_msg->xid(%"X32_F")!=dhcp->xid(%"X32_F")\n",lwip_ntohl(reply_msg->xid),dhcp->xid));
    goto free_pbuf_and_return;
  }
  /* option fields could be unfold? */
  if (dhcp_parse_reply(dhcp, p) != ERR_OK) {
 80145a4:	6879      	ldr	r1, [r7, #4]
 80145a6:	69f8      	ldr	r0, [r7, #28]
 80145a8:	f7ff fd08 	bl	8013fbc <dhcp_parse_reply>
 80145ac:	4603      	mov	r3, r0
 80145ae:	2b00      	cmp	r3, #0
 80145b0:	d161      	bne.n	8014676 <dhcp_recv+0x18e>
    goto free_pbuf_and_return;
  }

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("searching DHCP_OPTION_MESSAGE_TYPE\n"));
  /* obtain pointer to DHCP message type */
  if (!dhcp_option_given(dhcp, DHCP_OPTION_IDX_MSG_TYPE)) {
 80145b2:	4b3d      	ldr	r3, [pc, #244]	; (80146a8 <dhcp_recv+0x1c0>)
 80145b4:	785b      	ldrb	r3, [r3, #1]
 80145b6:	2b00      	cmp	r3, #0
 80145b8:	d05f      	beq.n	801467a <dhcp_recv+0x192>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("DHCP_OPTION_MESSAGE_TYPE option not found\n"));
    goto free_pbuf_and_return;
  }

  /* read DHCP message type */
  msg_type = (u8_t)dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_MSG_TYPE);
 80145ba:	4b3c      	ldr	r3, [pc, #240]	; (80146ac <dhcp_recv+0x1c4>)
 80145bc:	685b      	ldr	r3, [r3, #4]
 80145be:	75fb      	strb	r3, [r7, #23]
  /* message type is DHCP ACK? */
  if (msg_type == DHCP_ACK) {
 80145c0:	7dfb      	ldrb	r3, [r7, #23]
 80145c2:	2b05      	cmp	r3, #5
 80145c4:	d128      	bne.n	8014618 <dhcp_recv+0x130>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_ACK received\n"));
    /* in requesting state? */
    if (dhcp->state == DHCP_STATE_REQUESTING) {
 80145c6:	69fb      	ldr	r3, [r7, #28]
 80145c8:	7a5b      	ldrb	r3, [r3, #9]
 80145ca:	2b01      	cmp	r3, #1
 80145cc:	d111      	bne.n	80145f2 <dhcp_recv+0x10a>
      dhcp_handle_ack(netif);
 80145ce:	6a38      	ldr	r0, [r7, #32]
 80145d0:	f7fe fea0 	bl	8013314 <dhcp_handle_ack>
#if DHCP_DOES_ARP_CHECK
      if ((netif->flags & NETIF_FLAG_ETHARP) != 0) {
 80145d4:	6a3b      	ldr	r3, [r7, #32]
 80145d6:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80145da:	f003 0308 	and.w	r3, r3, #8
 80145de:	2b00      	cmp	r3, #0
 80145e0:	d003      	beq.n	80145ea <dhcp_recv+0x102>
        /* check if the acknowledged lease address is already in use */
        dhcp_check(netif);
 80145e2:	6a38      	ldr	r0, [r7, #32]
 80145e4:	f7fe fc68 	bl	8012eb8 <dhcp_check>
 80145e8:	e048      	b.n	801467c <dhcp_recv+0x194>
      } else {
        /* bind interface to the acknowledged lease address */
        dhcp_bind(netif);
 80145ea:	6a38      	ldr	r0, [r7, #32]
 80145ec:	f7ff f8a0 	bl	8013730 <dhcp_bind>
 80145f0:	e044      	b.n	801467c <dhcp_recv+0x194>
      /* bind interface to the acknowledged lease address */
      dhcp_bind(netif);
#endif
    }
    /* already bound to the given lease address? */
    else if ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REBINDING) ||
 80145f2:	69fb      	ldr	r3, [r7, #28]
 80145f4:	7a5b      	ldrb	r3, [r3, #9]
 80145f6:	2b03      	cmp	r3, #3
 80145f8:	d007      	beq.n	801460a <dhcp_recv+0x122>
 80145fa:	69fb      	ldr	r3, [r7, #28]
 80145fc:	7a5b      	ldrb	r3, [r3, #9]
 80145fe:	2b04      	cmp	r3, #4
 8014600:	d003      	beq.n	801460a <dhcp_recv+0x122>
             (dhcp->state == DHCP_STATE_RENEWING)) {
 8014602:	69fb      	ldr	r3, [r7, #28]
 8014604:	7a5b      	ldrb	r3, [r3, #9]
    else if ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REBINDING) ||
 8014606:	2b05      	cmp	r3, #5
 8014608:	d138      	bne.n	801467c <dhcp_recv+0x194>
      dhcp_handle_ack(netif);
 801460a:	6a38      	ldr	r0, [r7, #32]
 801460c:	f7fe fe82 	bl	8013314 <dhcp_handle_ack>
      dhcp_bind(netif);
 8014610:	6a38      	ldr	r0, [r7, #32]
 8014612:	f7ff f88d 	bl	8013730 <dhcp_bind>
 8014616:	e031      	b.n	801467c <dhcp_recv+0x194>
    }
  }
  /* received a DHCP_NAK in appropriate state? */
  else if ((msg_type == DHCP_NAK) &&
 8014618:	7dfb      	ldrb	r3, [r7, #23]
 801461a:	2b06      	cmp	r3, #6
 801461c:	d113      	bne.n	8014646 <dhcp_recv+0x15e>
    ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 801461e:	69fb      	ldr	r3, [r7, #28]
 8014620:	7a5b      	ldrb	r3, [r3, #9]
  else if ((msg_type == DHCP_NAK) &&
 8014622:	2b03      	cmp	r3, #3
 8014624:	d00b      	beq.n	801463e <dhcp_recv+0x156>
    ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 8014626:	69fb      	ldr	r3, [r7, #28]
 8014628:	7a5b      	ldrb	r3, [r3, #9]
 801462a:	2b01      	cmp	r3, #1
 801462c:	d007      	beq.n	801463e <dhcp_recv+0x156>
     (dhcp->state == DHCP_STATE_REBINDING) || (dhcp->state == DHCP_STATE_RENEWING  ))) {
 801462e:	69fb      	ldr	r3, [r7, #28]
 8014630:	7a5b      	ldrb	r3, [r3, #9]
    ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 8014632:	2b04      	cmp	r3, #4
 8014634:	d003      	beq.n	801463e <dhcp_recv+0x156>
     (dhcp->state == DHCP_STATE_REBINDING) || (dhcp->state == DHCP_STATE_RENEWING  ))) {
 8014636:	69fb      	ldr	r3, [r7, #28]
 8014638:	7a5b      	ldrb	r3, [r3, #9]
 801463a:	2b05      	cmp	r3, #5
 801463c:	d103      	bne.n	8014646 <dhcp_recv+0x15e>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_NAK received\n"));
    dhcp_handle_nak(netif);
 801463e:	6a38      	ldr	r0, [r7, #32]
 8014640:	f7fe fc20 	bl	8012e84 <dhcp_handle_nak>
 8014644:	e01a      	b.n	801467c <dhcp_recv+0x194>
  }
  /* received a DHCP_OFFER in DHCP_STATE_SELECTING state? */
  else if ((msg_type == DHCP_OFFER) && (dhcp->state == DHCP_STATE_SELECTING)) {
 8014646:	7dfb      	ldrb	r3, [r7, #23]
 8014648:	2b02      	cmp	r3, #2
 801464a:	d10a      	bne.n	8014662 <dhcp_recv+0x17a>
 801464c:	69fb      	ldr	r3, [r7, #28]
 801464e:	7a5b      	ldrb	r3, [r3, #9]
 8014650:	2b06      	cmp	r3, #6
 8014652:	d106      	bne.n	8014662 <dhcp_recv+0x17a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_OFFER received in DHCP_STATE_SELECTING state\n"));
    dhcp->request_timeout = 0;
 8014654:	69fb      	ldr	r3, [r7, #28]
 8014656:	2200      	movs	r2, #0
 8014658:	82da      	strh	r2, [r3, #22]
    /* remember offered lease */
    dhcp_handle_offer(netif);
 801465a:	6a38      	ldr	r0, [r7, #32]
 801465c:	f7fe fc60 	bl	8012f20 <dhcp_handle_offer>
 8014660:	e00c      	b.n	801467c <dhcp_recv+0x194>
  }

free_pbuf_and_return:
 8014662:	bf00      	nop
 8014664:	e00a      	b.n	801467c <dhcp_recv+0x194>
    goto free_pbuf_and_return;
 8014666:	bf00      	nop
 8014668:	e008      	b.n	801467c <dhcp_recv+0x194>
    goto free_pbuf_and_return;
 801466a:	bf00      	nop
 801466c:	e006      	b.n	801467c <dhcp_recv+0x194>
      goto free_pbuf_and_return;
 801466e:	bf00      	nop
 8014670:	e004      	b.n	801467c <dhcp_recv+0x194>
    goto free_pbuf_and_return;
 8014672:	bf00      	nop
 8014674:	e002      	b.n	801467c <dhcp_recv+0x194>
    goto free_pbuf_and_return;
 8014676:	bf00      	nop
 8014678:	e000      	b.n	801467c <dhcp_recv+0x194>
    goto free_pbuf_and_return;
 801467a:	bf00      	nop
  if (dhcp != NULL) {
 801467c:	69fb      	ldr	r3, [r7, #28]
 801467e:	2b00      	cmp	r3, #0
 8014680:	d002      	beq.n	8014688 <dhcp_recv+0x1a0>
    dhcp->msg_in = NULL;
 8014682:	69fb      	ldr	r3, [r7, #28]
 8014684:	2200      	movs	r2, #0
 8014686:	605a      	str	r2, [r3, #4]
  }
  pbuf_free(p);
 8014688:	6878      	ldr	r0, [r7, #4]
 801468a:	f7f9 f871 	bl	800d770 <pbuf_free>
}
 801468e:	bf00      	nop
 8014690:	3728      	adds	r7, #40	; 0x28
 8014692:	46bd      	mov	sp, r7
 8014694:	bd80      	pop	{r7, pc}
 8014696:	bf00      	nop
 8014698:	20007e80 	.word	0x20007e80
 801469c:	0801a198 	.word	0x0801a198
 80146a0:	0801a2c4 	.word	0x0801a2c4
 80146a4:	0801a1f8 	.word	0x0801a1f8
 80146a8:	2000b5cc 	.word	0x2000b5cc
 80146ac:	2000b5d4 	.word	0x2000b5d4

080146b0 <dhcp_create_msg>:
 * @param dhcp dhcp control struct
 * @param message_type message type of the request
 */
static err_t
dhcp_create_msg(struct netif *netif, struct dhcp *dhcp, u8_t message_type)
{
 80146b0:	b590      	push	{r4, r7, lr}
 80146b2:	b087      	sub	sp, #28
 80146b4:	af00      	add	r7, sp, #0
 80146b6:	60f8      	str	r0, [r7, #12]
 80146b8:	60b9      	str	r1, [r7, #8]
 80146ba:	4613      	mov	r3, r2
 80146bc:	71fb      	strb	r3, [r7, #7]
  if (!xid_initialised) {
    xid = DHCP_GLOBAL_XID;
    xid_initialised = !xid_initialised;
  }
#endif
  LWIP_ERROR("dhcp_create_msg: netif != NULL", (netif != NULL), return ERR_ARG;);
 80146be:	68fb      	ldr	r3, [r7, #12]
 80146c0:	2b00      	cmp	r3, #0
 80146c2:	d109      	bne.n	80146d8 <dhcp_create_msg+0x28>
 80146c4:	4ba3      	ldr	r3, [pc, #652]	; (8014954 <dhcp_create_msg+0x2a4>)
 80146c6:	f240 721d 	movw	r2, #1821	; 0x71d
 80146ca:	49a3      	ldr	r1, [pc, #652]	; (8014958 <dhcp_create_msg+0x2a8>)
 80146cc:	48a3      	ldr	r0, [pc, #652]	; (801495c <dhcp_create_msg+0x2ac>)
 80146ce:	f003 fb1d 	bl	8017d0c <iprintf>
 80146d2:	f06f 030f 	mvn.w	r3, #15
 80146d6:	e138      	b.n	801494a <dhcp_create_msg+0x29a>
  LWIP_ERROR("dhcp_create_msg: dhcp != NULL", (dhcp != NULL), return ERR_VAL;);
 80146d8:	68bb      	ldr	r3, [r7, #8]
 80146da:	2b00      	cmp	r3, #0
 80146dc:	d109      	bne.n	80146f2 <dhcp_create_msg+0x42>
 80146de:	4b9d      	ldr	r3, [pc, #628]	; (8014954 <dhcp_create_msg+0x2a4>)
 80146e0:	f240 721e 	movw	r2, #1822	; 0x71e
 80146e4:	499e      	ldr	r1, [pc, #632]	; (8014960 <dhcp_create_msg+0x2b0>)
 80146e6:	489d      	ldr	r0, [pc, #628]	; (801495c <dhcp_create_msg+0x2ac>)
 80146e8:	f003 fb10 	bl	8017d0c <iprintf>
 80146ec:	f06f 0305 	mvn.w	r3, #5
 80146f0:	e12b      	b.n	801494a <dhcp_create_msg+0x29a>
  LWIP_ASSERT("dhcp_create_msg: dhcp->p_out == NULL", dhcp->p_out == NULL);
 80146f2:	68bb      	ldr	r3, [r7, #8]
 80146f4:	68db      	ldr	r3, [r3, #12]
 80146f6:	2b00      	cmp	r3, #0
 80146f8:	d006      	beq.n	8014708 <dhcp_create_msg+0x58>
 80146fa:	4b96      	ldr	r3, [pc, #600]	; (8014954 <dhcp_create_msg+0x2a4>)
 80146fc:	f240 721f 	movw	r2, #1823	; 0x71f
 8014700:	4998      	ldr	r1, [pc, #608]	; (8014964 <dhcp_create_msg+0x2b4>)
 8014702:	4896      	ldr	r0, [pc, #600]	; (801495c <dhcp_create_msg+0x2ac>)
 8014704:	f003 fb02 	bl	8017d0c <iprintf>
  LWIP_ASSERT("dhcp_create_msg: dhcp->msg_out == NULL", dhcp->msg_out == NULL);
 8014708:	68bb      	ldr	r3, [r7, #8]
 801470a:	691b      	ldr	r3, [r3, #16]
 801470c:	2b00      	cmp	r3, #0
 801470e:	d006      	beq.n	801471e <dhcp_create_msg+0x6e>
 8014710:	4b90      	ldr	r3, [pc, #576]	; (8014954 <dhcp_create_msg+0x2a4>)
 8014712:	f44f 62e4 	mov.w	r2, #1824	; 0x720
 8014716:	4994      	ldr	r1, [pc, #592]	; (8014968 <dhcp_create_msg+0x2b8>)
 8014718:	4890      	ldr	r0, [pc, #576]	; (801495c <dhcp_create_msg+0x2ac>)
 801471a:	f003 faf7 	bl	8017d0c <iprintf>
  dhcp->p_out = pbuf_alloc(PBUF_TRANSPORT, sizeof(struct dhcp_msg), PBUF_RAM);
 801471e:	2200      	movs	r2, #0
 8014720:	f44f 719a 	mov.w	r1, #308	; 0x134
 8014724:	2000      	movs	r0, #0
 8014726:	f7f8 fcb1 	bl	800d08c <pbuf_alloc>
 801472a:	4602      	mov	r2, r0
 801472c:	68bb      	ldr	r3, [r7, #8]
 801472e:	60da      	str	r2, [r3, #12]
  if (dhcp->p_out == NULL) {
 8014730:	68bb      	ldr	r3, [r7, #8]
 8014732:	68db      	ldr	r3, [r3, #12]
 8014734:	2b00      	cmp	r3, #0
 8014736:	d102      	bne.n	801473e <dhcp_create_msg+0x8e>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
      ("dhcp_create_msg(): could not allocate pbuf\n"));
    return ERR_MEM;
 8014738:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801473c:	e105      	b.n	801494a <dhcp_create_msg+0x29a>
  }
  LWIP_ASSERT("dhcp_create_msg: check that first pbuf can hold struct dhcp_msg",
 801473e:	68bb      	ldr	r3, [r7, #8]
 8014740:	68db      	ldr	r3, [r3, #12]
 8014742:	895b      	ldrh	r3, [r3, #10]
 8014744:	f5b3 7f9a 	cmp.w	r3, #308	; 0x134
 8014748:	d206      	bcs.n	8014758 <dhcp_create_msg+0xa8>
 801474a:	4b82      	ldr	r3, [pc, #520]	; (8014954 <dhcp_create_msg+0x2a4>)
 801474c:	f44f 62e5 	mov.w	r2, #1832	; 0x728
 8014750:	4986      	ldr	r1, [pc, #536]	; (801496c <dhcp_create_msg+0x2bc>)
 8014752:	4882      	ldr	r0, [pc, #520]	; (801495c <dhcp_create_msg+0x2ac>)
 8014754:	f003 fada 	bl	8017d0c <iprintf>
           (dhcp->p_out->len >= sizeof(struct dhcp_msg)));

  /* DHCP_REQUEST should reuse 'xid' from DHCPOFFER */
  if ((message_type != DHCP_REQUEST) || (dhcp->state == DHCP_STATE_REBOOTING)) {
 8014758:	79fb      	ldrb	r3, [r7, #7]
 801475a:	2b03      	cmp	r3, #3
 801475c:	d103      	bne.n	8014766 <dhcp_create_msg+0xb6>
 801475e:	68bb      	ldr	r3, [r7, #8]
 8014760:	7a5b      	ldrb	r3, [r3, #9]
 8014762:	2b03      	cmp	r3, #3
 8014764:	d10d      	bne.n	8014782 <dhcp_create_msg+0xd2>
    /* reuse transaction identifier in retransmissions */
    if (dhcp->tries == 0) {
 8014766:	68bb      	ldr	r3, [r7, #8]
 8014768:	7a9b      	ldrb	r3, [r3, #10]
 801476a:	2b00      	cmp	r3, #0
 801476c:	d105      	bne.n	801477a <dhcp_create_msg+0xca>
#if DHCP_CREATE_RAND_XID && defined(LWIP_RAND)
      xid = LWIP_RAND();
 801476e:	f003 fae5 	bl	8017d3c <rand>
 8014772:	4603      	mov	r3, r0
 8014774:	461a      	mov	r2, r3
 8014776:	4b7e      	ldr	r3, [pc, #504]	; (8014970 <dhcp_create_msg+0x2c0>)
 8014778:	601a      	str	r2, [r3, #0]
#else /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
      xid++;
#endif /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
    }
    dhcp->xid = xid;
 801477a:	4b7d      	ldr	r3, [pc, #500]	; (8014970 <dhcp_create_msg+0x2c0>)
 801477c:	681a      	ldr	r2, [r3, #0]
 801477e:	68bb      	ldr	r3, [r7, #8]
 8014780:	601a      	str	r2, [r3, #0]
  }
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE,
              ("transaction id xid(%"X32_F")\n", xid));

  dhcp->msg_out = (struct dhcp_msg *)dhcp->p_out->payload;
 8014782:	68bb      	ldr	r3, [r7, #8]
 8014784:	68db      	ldr	r3, [r3, #12]
 8014786:	685a      	ldr	r2, [r3, #4]
 8014788:	68bb      	ldr	r3, [r7, #8]
 801478a:	611a      	str	r2, [r3, #16]

  dhcp->msg_out->op = DHCP_BOOTREQUEST;
 801478c:	68bb      	ldr	r3, [r7, #8]
 801478e:	691b      	ldr	r3, [r3, #16]
 8014790:	2201      	movs	r2, #1
 8014792:	701a      	strb	r2, [r3, #0]
  /* @todo: make link layer independent */
  dhcp->msg_out->htype = DHCP_HTYPE_ETH;
 8014794:	68bb      	ldr	r3, [r7, #8]
 8014796:	691b      	ldr	r3, [r3, #16]
 8014798:	2201      	movs	r2, #1
 801479a:	705a      	strb	r2, [r3, #1]
  dhcp->msg_out->hlen = netif->hwaddr_len;
 801479c:	68bb      	ldr	r3, [r7, #8]
 801479e:	691b      	ldr	r3, [r3, #16]
 80147a0:	68fa      	ldr	r2, [r7, #12]
 80147a2:	f892 2028 	ldrb.w	r2, [r2, #40]	; 0x28
 80147a6:	709a      	strb	r2, [r3, #2]
  dhcp->msg_out->hops = 0;
 80147a8:	68bb      	ldr	r3, [r7, #8]
 80147aa:	691b      	ldr	r3, [r3, #16]
 80147ac:	2200      	movs	r2, #0
 80147ae:	70da      	strb	r2, [r3, #3]
  dhcp->msg_out->xid = lwip_htonl(dhcp->xid);
 80147b0:	68bb      	ldr	r3, [r7, #8]
 80147b2:	681a      	ldr	r2, [r3, #0]
 80147b4:	68bb      	ldr	r3, [r7, #8]
 80147b6:	691c      	ldr	r4, [r3, #16]
 80147b8:	4610      	mov	r0, r2
 80147ba:	f7f7 fe45 	bl	800c448 <lwip_htonl>
 80147be:	4603      	mov	r3, r0
 80147c0:	6063      	str	r3, [r4, #4]
  dhcp->msg_out->secs = 0;
 80147c2:	68bb      	ldr	r3, [r7, #8]
 80147c4:	691b      	ldr	r3, [r3, #16]
 80147c6:	2200      	movs	r2, #0
 80147c8:	721a      	strb	r2, [r3, #8]
 80147ca:	2200      	movs	r2, #0
 80147cc:	725a      	strb	r2, [r3, #9]
  /* we don't need the broadcast flag since we can receive unicast traffic
     before being fully configured! */
  dhcp->msg_out->flags = 0;
 80147ce:	68bb      	ldr	r3, [r7, #8]
 80147d0:	691b      	ldr	r3, [r3, #16]
 80147d2:	2200      	movs	r2, #0
 80147d4:	729a      	strb	r2, [r3, #10]
 80147d6:	2200      	movs	r2, #0
 80147d8:	72da      	strb	r2, [r3, #11]
  ip4_addr_set_zero(&dhcp->msg_out->ciaddr);
 80147da:	68bb      	ldr	r3, [r7, #8]
 80147dc:	691b      	ldr	r3, [r3, #16]
 80147de:	2200      	movs	r2, #0
 80147e0:	731a      	strb	r2, [r3, #12]
 80147e2:	2200      	movs	r2, #0
 80147e4:	735a      	strb	r2, [r3, #13]
 80147e6:	2200      	movs	r2, #0
 80147e8:	739a      	strb	r2, [r3, #14]
 80147ea:	2200      	movs	r2, #0
 80147ec:	73da      	strb	r2, [r3, #15]
  /* set ciaddr to netif->ip_addr based on message_type and state */
  if ((message_type == DHCP_INFORM) || (message_type == DHCP_DECLINE) || (message_type == DHCP_RELEASE) ||
 80147ee:	79fb      	ldrb	r3, [r7, #7]
 80147f0:	2b08      	cmp	r3, #8
 80147f2:	d010      	beq.n	8014816 <dhcp_create_msg+0x166>
 80147f4:	79fb      	ldrb	r3, [r7, #7]
 80147f6:	2b04      	cmp	r3, #4
 80147f8:	d00d      	beq.n	8014816 <dhcp_create_msg+0x166>
 80147fa:	79fb      	ldrb	r3, [r7, #7]
 80147fc:	2b07      	cmp	r3, #7
 80147fe:	d00a      	beq.n	8014816 <dhcp_create_msg+0x166>
 8014800:	79fb      	ldrb	r3, [r7, #7]
 8014802:	2b03      	cmp	r3, #3
 8014804:	d10d      	bne.n	8014822 <dhcp_create_msg+0x172>
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
       ((dhcp->state== DHCP_STATE_RENEWING) || dhcp->state== DHCP_STATE_REBINDING))) {
 8014806:	68bb      	ldr	r3, [r7, #8]
 8014808:	7a5b      	ldrb	r3, [r3, #9]
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
 801480a:	2b05      	cmp	r3, #5
 801480c:	d003      	beq.n	8014816 <dhcp_create_msg+0x166>
       ((dhcp->state== DHCP_STATE_RENEWING) || dhcp->state== DHCP_STATE_REBINDING))) {
 801480e:	68bb      	ldr	r3, [r7, #8]
 8014810:	7a5b      	ldrb	r3, [r3, #9]
 8014812:	2b04      	cmp	r3, #4
 8014814:	d105      	bne.n	8014822 <dhcp_create_msg+0x172>
    ip4_addr_copy(dhcp->msg_out->ciaddr, *netif_ip4_addr(netif));
 8014816:	68fb      	ldr	r3, [r7, #12]
 8014818:	1d1a      	adds	r2, r3, #4
 801481a:	68bb      	ldr	r3, [r7, #8]
 801481c:	691b      	ldr	r3, [r3, #16]
 801481e:	6812      	ldr	r2, [r2, #0]
 8014820:	60da      	str	r2, [r3, #12]
  }
  ip4_addr_set_zero(&dhcp->msg_out->yiaddr);
 8014822:	68bb      	ldr	r3, [r7, #8]
 8014824:	691b      	ldr	r3, [r3, #16]
 8014826:	2200      	movs	r2, #0
 8014828:	741a      	strb	r2, [r3, #16]
 801482a:	2200      	movs	r2, #0
 801482c:	745a      	strb	r2, [r3, #17]
 801482e:	2200      	movs	r2, #0
 8014830:	749a      	strb	r2, [r3, #18]
 8014832:	2200      	movs	r2, #0
 8014834:	74da      	strb	r2, [r3, #19]
  ip4_addr_set_zero(&dhcp->msg_out->siaddr);
 8014836:	68bb      	ldr	r3, [r7, #8]
 8014838:	691b      	ldr	r3, [r3, #16]
 801483a:	2200      	movs	r2, #0
 801483c:	751a      	strb	r2, [r3, #20]
 801483e:	2200      	movs	r2, #0
 8014840:	755a      	strb	r2, [r3, #21]
 8014842:	2200      	movs	r2, #0
 8014844:	759a      	strb	r2, [r3, #22]
 8014846:	2200      	movs	r2, #0
 8014848:	75da      	strb	r2, [r3, #23]
  ip4_addr_set_zero(&dhcp->msg_out->giaddr);
 801484a:	68bb      	ldr	r3, [r7, #8]
 801484c:	691b      	ldr	r3, [r3, #16]
 801484e:	2200      	movs	r2, #0
 8014850:	761a      	strb	r2, [r3, #24]
 8014852:	2200      	movs	r2, #0
 8014854:	765a      	strb	r2, [r3, #25]
 8014856:	2200      	movs	r2, #0
 8014858:	769a      	strb	r2, [r3, #26]
 801485a:	2200      	movs	r2, #0
 801485c:	76da      	strb	r2, [r3, #27]
  for (i = 0; i < DHCP_CHADDR_LEN; i++) {
 801485e:	2300      	movs	r3, #0
 8014860:	82fb      	strh	r3, [r7, #22]
 8014862:	e019      	b.n	8014898 <dhcp_create_msg+0x1e8>
    /* copy netif hardware address, pad with zeroes */
    dhcp->msg_out->chaddr[i] = (i < netif->hwaddr_len && i < NETIF_MAX_HWADDR_LEN) ? netif->hwaddr[i] : 0/* pad byte*/;
 8014864:	68fb      	ldr	r3, [r7, #12]
 8014866:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801486a:	b29b      	uxth	r3, r3
 801486c:	8afa      	ldrh	r2, [r7, #22]
 801486e:	429a      	cmp	r2, r3
 8014870:	d208      	bcs.n	8014884 <dhcp_create_msg+0x1d4>
 8014872:	8afb      	ldrh	r3, [r7, #22]
 8014874:	2b05      	cmp	r3, #5
 8014876:	d805      	bhi.n	8014884 <dhcp_create_msg+0x1d4>
 8014878:	8afb      	ldrh	r3, [r7, #22]
 801487a:	68fa      	ldr	r2, [r7, #12]
 801487c:	4413      	add	r3, r2
 801487e:	f893 1029 	ldrb.w	r1, [r3, #41]	; 0x29
 8014882:	e000      	b.n	8014886 <dhcp_create_msg+0x1d6>
 8014884:	2100      	movs	r1, #0
 8014886:	68bb      	ldr	r3, [r7, #8]
 8014888:	691a      	ldr	r2, [r3, #16]
 801488a:	8afb      	ldrh	r3, [r7, #22]
 801488c:	4413      	add	r3, r2
 801488e:	460a      	mov	r2, r1
 8014890:	771a      	strb	r2, [r3, #28]
  for (i = 0; i < DHCP_CHADDR_LEN; i++) {
 8014892:	8afb      	ldrh	r3, [r7, #22]
 8014894:	3301      	adds	r3, #1
 8014896:	82fb      	strh	r3, [r7, #22]
 8014898:	8afb      	ldrh	r3, [r7, #22]
 801489a:	2b0f      	cmp	r3, #15
 801489c:	d9e2      	bls.n	8014864 <dhcp_create_msg+0x1b4>
  }
  for (i = 0; i < DHCP_SNAME_LEN; i++) {
 801489e:	2300      	movs	r3, #0
 80148a0:	82fb      	strh	r3, [r7, #22]
 80148a2:	e009      	b.n	80148b8 <dhcp_create_msg+0x208>
    dhcp->msg_out->sname[i] = 0;
 80148a4:	68bb      	ldr	r3, [r7, #8]
 80148a6:	691a      	ldr	r2, [r3, #16]
 80148a8:	8afb      	ldrh	r3, [r7, #22]
 80148aa:	4413      	add	r3, r2
 80148ac:	2200      	movs	r2, #0
 80148ae:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  for (i = 0; i < DHCP_SNAME_LEN; i++) {
 80148b2:	8afb      	ldrh	r3, [r7, #22]
 80148b4:	3301      	adds	r3, #1
 80148b6:	82fb      	strh	r3, [r7, #22]
 80148b8:	8afb      	ldrh	r3, [r7, #22]
 80148ba:	2b3f      	cmp	r3, #63	; 0x3f
 80148bc:	d9f2      	bls.n	80148a4 <dhcp_create_msg+0x1f4>
  }
  for (i = 0; i < DHCP_FILE_LEN; i++) {
 80148be:	2300      	movs	r3, #0
 80148c0:	82fb      	strh	r3, [r7, #22]
 80148c2:	e009      	b.n	80148d8 <dhcp_create_msg+0x228>
    dhcp->msg_out->file[i] = 0;
 80148c4:	68bb      	ldr	r3, [r7, #8]
 80148c6:	691a      	ldr	r2, [r3, #16]
 80148c8:	8afb      	ldrh	r3, [r7, #22]
 80148ca:	4413      	add	r3, r2
 80148cc:	2200      	movs	r2, #0
 80148ce:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
  for (i = 0; i < DHCP_FILE_LEN; i++) {
 80148d2:	8afb      	ldrh	r3, [r7, #22]
 80148d4:	3301      	adds	r3, #1
 80148d6:	82fb      	strh	r3, [r7, #22]
 80148d8:	8afb      	ldrh	r3, [r7, #22]
 80148da:	2b7f      	cmp	r3, #127	; 0x7f
 80148dc:	d9f2      	bls.n	80148c4 <dhcp_create_msg+0x214>
  }
  dhcp->msg_out->cookie = PP_HTONL(DHCP_MAGIC_COOKIE);
 80148de:	68bb      	ldr	r3, [r7, #8]
 80148e0:	691b      	ldr	r3, [r3, #16]
 80148e2:	2200      	movs	r2, #0
 80148e4:	f042 0263 	orr.w	r2, r2, #99	; 0x63
 80148e8:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
 80148ec:	2200      	movs	r2, #0
 80148ee:	f062 027d 	orn	r2, r2, #125	; 0x7d
 80148f2:	f883 20ed 	strb.w	r2, [r3, #237]	; 0xed
 80148f6:	2200      	movs	r2, #0
 80148f8:	f042 0253 	orr.w	r2, r2, #83	; 0x53
 80148fc:	f883 20ee 	strb.w	r2, [r3, #238]	; 0xee
 8014900:	2200      	movs	r2, #0
 8014902:	f042 0263 	orr.w	r2, r2, #99	; 0x63
 8014906:	f883 20ef 	strb.w	r2, [r3, #239]	; 0xef
  dhcp->options_out_len = 0;
 801490a:	68bb      	ldr	r3, [r7, #8]
 801490c:	2200      	movs	r2, #0
 801490e:	829a      	strh	r2, [r3, #20]
  /* fill options field with an incrementing array (for debugging purposes) */
  for (i = 0; i < DHCP_OPTIONS_LEN; i++) {
 8014910:	2300      	movs	r3, #0
 8014912:	82fb      	strh	r3, [r7, #22]
 8014914:	e00b      	b.n	801492e <dhcp_create_msg+0x27e>
    dhcp->msg_out->options[i] = (u8_t)i; /* for debugging only, no matter if truncated */
 8014916:	68bb      	ldr	r3, [r7, #8]
 8014918:	691a      	ldr	r2, [r3, #16]
 801491a:	8afb      	ldrh	r3, [r7, #22]
 801491c:	8af9      	ldrh	r1, [r7, #22]
 801491e:	b2c9      	uxtb	r1, r1
 8014920:	4413      	add	r3, r2
 8014922:	460a      	mov	r2, r1
 8014924:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
  for (i = 0; i < DHCP_OPTIONS_LEN; i++) {
 8014928:	8afb      	ldrh	r3, [r7, #22]
 801492a:	3301      	adds	r3, #1
 801492c:	82fb      	strh	r3, [r7, #22]
 801492e:	8afb      	ldrh	r3, [r7, #22]
 8014930:	2b43      	cmp	r3, #67	; 0x43
 8014932:	d9f0      	bls.n	8014916 <dhcp_create_msg+0x266>
  }
  /* Add option MESSAGE_TYPE */
  dhcp_option(dhcp, DHCP_OPTION_MESSAGE_TYPE, DHCP_OPTION_MESSAGE_TYPE_LEN);
 8014934:	2201      	movs	r2, #1
 8014936:	2135      	movs	r1, #53	; 0x35
 8014938:	68b8      	ldr	r0, [r7, #8]
 801493a:	f7ff fa4d 	bl	8013dd8 <dhcp_option>
  dhcp_option_byte(dhcp, message_type);
 801493e:	79fb      	ldrb	r3, [r7, #7]
 8014940:	4619      	mov	r1, r3
 8014942:	68b8      	ldr	r0, [r7, #8]
 8014944:	f7ff fa82 	bl	8013e4c <dhcp_option_byte>
  return ERR_OK;
 8014948:	2300      	movs	r3, #0
}
 801494a:	4618      	mov	r0, r3
 801494c:	371c      	adds	r7, #28
 801494e:	46bd      	mov	sp, r7
 8014950:	bd90      	pop	{r4, r7, pc}
 8014952:	bf00      	nop
 8014954:	0801a198 	.word	0x0801a198
 8014958:	0801a4c8 	.word	0x0801a4c8
 801495c:	0801a1f8 	.word	0x0801a1f8
 8014960:	0801a4e8 	.word	0x0801a4e8
 8014964:	0801a508 	.word	0x0801a508
 8014968:	0801a530 	.word	0x0801a530
 801496c:	0801a558 	.word	0x0801a558
 8014970:	20004bb8 	.word	0x20004bb8

08014974 <dhcp_delete_msg>:
 *
 * @param dhcp the dhcp struct to free the request from
 */
static void
dhcp_delete_msg(struct dhcp *dhcp)
{
 8014974:	b580      	push	{r7, lr}
 8014976:	b082      	sub	sp, #8
 8014978:	af00      	add	r7, sp, #0
 801497a:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("dhcp_delete_msg: dhcp != NULL", (dhcp != NULL), return;);
 801497c:	687b      	ldr	r3, [r7, #4]
 801497e:	2b00      	cmp	r3, #0
 8014980:	d107      	bne.n	8014992 <dhcp_delete_msg+0x1e>
 8014982:	4b18      	ldr	r3, [pc, #96]	; (80149e4 <dhcp_delete_msg+0x70>)
 8014984:	f240 726d 	movw	r2, #1901	; 0x76d
 8014988:	4917      	ldr	r1, [pc, #92]	; (80149e8 <dhcp_delete_msg+0x74>)
 801498a:	4818      	ldr	r0, [pc, #96]	; (80149ec <dhcp_delete_msg+0x78>)
 801498c:	f003 f9be 	bl	8017d0c <iprintf>
 8014990:	e024      	b.n	80149dc <dhcp_delete_msg+0x68>
  LWIP_ASSERT("dhcp_delete_msg: dhcp->p_out != NULL", dhcp->p_out != NULL);
 8014992:	687b      	ldr	r3, [r7, #4]
 8014994:	68db      	ldr	r3, [r3, #12]
 8014996:	2b00      	cmp	r3, #0
 8014998:	d106      	bne.n	80149a8 <dhcp_delete_msg+0x34>
 801499a:	4b12      	ldr	r3, [pc, #72]	; (80149e4 <dhcp_delete_msg+0x70>)
 801499c:	f240 726e 	movw	r2, #1902	; 0x76e
 80149a0:	4913      	ldr	r1, [pc, #76]	; (80149f0 <dhcp_delete_msg+0x7c>)
 80149a2:	4812      	ldr	r0, [pc, #72]	; (80149ec <dhcp_delete_msg+0x78>)
 80149a4:	f003 f9b2 	bl	8017d0c <iprintf>
  LWIP_ASSERT("dhcp_delete_msg: dhcp->msg_out != NULL", dhcp->msg_out != NULL);
 80149a8:	687b      	ldr	r3, [r7, #4]
 80149aa:	691b      	ldr	r3, [r3, #16]
 80149ac:	2b00      	cmp	r3, #0
 80149ae:	d106      	bne.n	80149be <dhcp_delete_msg+0x4a>
 80149b0:	4b0c      	ldr	r3, [pc, #48]	; (80149e4 <dhcp_delete_msg+0x70>)
 80149b2:	f240 726f 	movw	r2, #1903	; 0x76f
 80149b6:	490f      	ldr	r1, [pc, #60]	; (80149f4 <dhcp_delete_msg+0x80>)
 80149b8:	480c      	ldr	r0, [pc, #48]	; (80149ec <dhcp_delete_msg+0x78>)
 80149ba:	f003 f9a7 	bl	8017d0c <iprintf>
  if (dhcp->p_out != NULL) {
 80149be:	687b      	ldr	r3, [r7, #4]
 80149c0:	68db      	ldr	r3, [r3, #12]
 80149c2:	2b00      	cmp	r3, #0
 80149c4:	d004      	beq.n	80149d0 <dhcp_delete_msg+0x5c>
    pbuf_free(dhcp->p_out);
 80149c6:	687b      	ldr	r3, [r7, #4]
 80149c8:	68db      	ldr	r3, [r3, #12]
 80149ca:	4618      	mov	r0, r3
 80149cc:	f7f8 fed0 	bl	800d770 <pbuf_free>
  }
  dhcp->p_out = NULL;
 80149d0:	687b      	ldr	r3, [r7, #4]
 80149d2:	2200      	movs	r2, #0
 80149d4:	60da      	str	r2, [r3, #12]
  dhcp->msg_out = NULL;
 80149d6:	687b      	ldr	r3, [r7, #4]
 80149d8:	2200      	movs	r2, #0
 80149da:	611a      	str	r2, [r3, #16]
}
 80149dc:	3708      	adds	r7, #8
 80149de:	46bd      	mov	sp, r7
 80149e0:	bd80      	pop	{r7, pc}
 80149e2:	bf00      	nop
 80149e4:	0801a198 	.word	0x0801a198
 80149e8:	0801a598 	.word	0x0801a598
 80149ec:	0801a1f8 	.word	0x0801a1f8
 80149f0:	0801a5b8 	.word	0x0801a5b8
 80149f4:	0801a5e0 	.word	0x0801a5e0

080149f8 <dhcp_option_trailer>:
 *
 * @param dhcp DHCP state structure
 */
static void
dhcp_option_trailer(struct dhcp *dhcp)
{
 80149f8:	b580      	push	{r7, lr}
 80149fa:	b082      	sub	sp, #8
 80149fc:	af00      	add	r7, sp, #0
 80149fe:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("dhcp_option_trailer: dhcp != NULL", (dhcp != NULL), return;);
 8014a00:	687b      	ldr	r3, [r7, #4]
 8014a02:	2b00      	cmp	r3, #0
 8014a04:	d107      	bne.n	8014a16 <dhcp_option_trailer+0x1e>
 8014a06:	4b24      	ldr	r3, [pc, #144]	; (8014a98 <dhcp_option_trailer+0xa0>)
 8014a08:	f240 7282 	movw	r2, #1922	; 0x782
 8014a0c:	4923      	ldr	r1, [pc, #140]	; (8014a9c <dhcp_option_trailer+0xa4>)
 8014a0e:	4824      	ldr	r0, [pc, #144]	; (8014aa0 <dhcp_option_trailer+0xa8>)
 8014a10:	f003 f97c 	bl	8017d0c <iprintf>
 8014a14:	e03c      	b.n	8014a90 <dhcp_option_trailer+0x98>
  LWIP_ASSERT("dhcp_option_trailer: dhcp->msg_out != NULL\n", dhcp->msg_out != NULL);
 8014a16:	687b      	ldr	r3, [r7, #4]
 8014a18:	691b      	ldr	r3, [r3, #16]
 8014a1a:	2b00      	cmp	r3, #0
 8014a1c:	d106      	bne.n	8014a2c <dhcp_option_trailer+0x34>
 8014a1e:	4b1e      	ldr	r3, [pc, #120]	; (8014a98 <dhcp_option_trailer+0xa0>)
 8014a20:	f240 7283 	movw	r2, #1923	; 0x783
 8014a24:	491f      	ldr	r1, [pc, #124]	; (8014aa4 <dhcp_option_trailer+0xac>)
 8014a26:	481e      	ldr	r0, [pc, #120]	; (8014aa0 <dhcp_option_trailer+0xa8>)
 8014a28:	f003 f970 	bl	8017d0c <iprintf>
  LWIP_ASSERT("dhcp_option_trailer: dhcp->options_out_len < DHCP_OPTIONS_LEN\n", dhcp->options_out_len < DHCP_OPTIONS_LEN);
 8014a2c:	687b      	ldr	r3, [r7, #4]
 8014a2e:	8a9b      	ldrh	r3, [r3, #20]
 8014a30:	2b43      	cmp	r3, #67	; 0x43
 8014a32:	d906      	bls.n	8014a42 <dhcp_option_trailer+0x4a>
 8014a34:	4b18      	ldr	r3, [pc, #96]	; (8014a98 <dhcp_option_trailer+0xa0>)
 8014a36:	f240 7284 	movw	r2, #1924	; 0x784
 8014a3a:	491b      	ldr	r1, [pc, #108]	; (8014aa8 <dhcp_option_trailer+0xb0>)
 8014a3c:	4818      	ldr	r0, [pc, #96]	; (8014aa0 <dhcp_option_trailer+0xa8>)
 8014a3e:	f003 f965 	bl	8017d0c <iprintf>
  dhcp->msg_out->options[dhcp->options_out_len++] = DHCP_OPTION_END;
 8014a42:	687b      	ldr	r3, [r7, #4]
 8014a44:	691a      	ldr	r2, [r3, #16]
 8014a46:	687b      	ldr	r3, [r7, #4]
 8014a48:	8a9b      	ldrh	r3, [r3, #20]
 8014a4a:	1c59      	adds	r1, r3, #1
 8014a4c:	b288      	uxth	r0, r1
 8014a4e:	6879      	ldr	r1, [r7, #4]
 8014a50:	8288      	strh	r0, [r1, #20]
 8014a52:	4413      	add	r3, r2
 8014a54:	22ff      	movs	r2, #255	; 0xff
 8014a56:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
  /* packet is too small, or not 4 byte aligned? */
  while (((dhcp->options_out_len < DHCP_MIN_OPTIONS_LEN) || (dhcp->options_out_len & 3)) &&
 8014a5a:	e00b      	b.n	8014a74 <dhcp_option_trailer+0x7c>
         (dhcp->options_out_len < DHCP_OPTIONS_LEN)) {
    /* add a fill/padding byte */
    dhcp->msg_out->options[dhcp->options_out_len++] = 0;
 8014a5c:	687b      	ldr	r3, [r7, #4]
 8014a5e:	691a      	ldr	r2, [r3, #16]
 8014a60:	687b      	ldr	r3, [r7, #4]
 8014a62:	8a9b      	ldrh	r3, [r3, #20]
 8014a64:	1c59      	adds	r1, r3, #1
 8014a66:	b288      	uxth	r0, r1
 8014a68:	6879      	ldr	r1, [r7, #4]
 8014a6a:	8288      	strh	r0, [r1, #20]
 8014a6c:	4413      	add	r3, r2
 8014a6e:	2200      	movs	r2, #0
 8014a70:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
  while (((dhcp->options_out_len < DHCP_MIN_OPTIONS_LEN) || (dhcp->options_out_len & 3)) &&
 8014a74:	687b      	ldr	r3, [r7, #4]
 8014a76:	8a9b      	ldrh	r3, [r3, #20]
 8014a78:	2b43      	cmp	r3, #67	; 0x43
 8014a7a:	d905      	bls.n	8014a88 <dhcp_option_trailer+0x90>
 8014a7c:	687b      	ldr	r3, [r7, #4]
 8014a7e:	8a9b      	ldrh	r3, [r3, #20]
 8014a80:	f003 0303 	and.w	r3, r3, #3
 8014a84:	2b00      	cmp	r3, #0
 8014a86:	d003      	beq.n	8014a90 <dhcp_option_trailer+0x98>
         (dhcp->options_out_len < DHCP_OPTIONS_LEN)) {
 8014a88:	687b      	ldr	r3, [r7, #4]
 8014a8a:	8a9b      	ldrh	r3, [r3, #20]
  while (((dhcp->options_out_len < DHCP_MIN_OPTIONS_LEN) || (dhcp->options_out_len & 3)) &&
 8014a8c:	2b43      	cmp	r3, #67	; 0x43
 8014a8e:	d9e5      	bls.n	8014a5c <dhcp_option_trailer+0x64>
  }
}
 8014a90:	3708      	adds	r7, #8
 8014a92:	46bd      	mov	sp, r7
 8014a94:	bd80      	pop	{r7, pc}
 8014a96:	bf00      	nop
 8014a98:	0801a198 	.word	0x0801a198
 8014a9c:	0801a608 	.word	0x0801a608
 8014aa0:	0801a1f8 	.word	0x0801a1f8
 8014aa4:	0801a62c 	.word	0x0801a62c
 8014aa8:	0801a658 	.word	0x0801a658

08014aac <dhcp_supplied_address>:
 * @return 1 if DHCP supplied netif->ip_addr (states BOUND or RENEWING),
 *         0 otherwise
 */
u8_t
dhcp_supplied_address(const struct netif *netif)
{
 8014aac:	b480      	push	{r7}
 8014aae:	b085      	sub	sp, #20
 8014ab0:	af00      	add	r7, sp, #0
 8014ab2:	6078      	str	r0, [r7, #4]
  if ((netif != NULL) && (netif_dhcp_data(netif) != NULL)) {
 8014ab4:	687b      	ldr	r3, [r7, #4]
 8014ab6:	2b00      	cmp	r3, #0
 8014ab8:	d017      	beq.n	8014aea <dhcp_supplied_address+0x3e>
 8014aba:	687b      	ldr	r3, [r7, #4]
 8014abc:	6a1b      	ldr	r3, [r3, #32]
 8014abe:	2b00      	cmp	r3, #0
 8014ac0:	d013      	beq.n	8014aea <dhcp_supplied_address+0x3e>
    struct dhcp* dhcp = netif_dhcp_data(netif);
 8014ac2:	687b      	ldr	r3, [r7, #4]
 8014ac4:	6a1b      	ldr	r3, [r3, #32]
 8014ac6:	60fb      	str	r3, [r7, #12]
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 8014ac8:	68fb      	ldr	r3, [r7, #12]
 8014aca:	7a5b      	ldrb	r3, [r3, #9]
 8014acc:	2b0a      	cmp	r3, #10
 8014ace:	d007      	beq.n	8014ae0 <dhcp_supplied_address+0x34>
 8014ad0:	68fb      	ldr	r3, [r7, #12]
 8014ad2:	7a5b      	ldrb	r3, [r3, #9]
 8014ad4:	2b05      	cmp	r3, #5
 8014ad6:	d003      	beq.n	8014ae0 <dhcp_supplied_address+0x34>
           (dhcp->state == DHCP_STATE_REBINDING);
 8014ad8:	68fb      	ldr	r3, [r7, #12]
 8014ada:	7a5b      	ldrb	r3, [r3, #9]
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 8014adc:	2b04      	cmp	r3, #4
 8014ade:	d101      	bne.n	8014ae4 <dhcp_supplied_address+0x38>
 8014ae0:	2301      	movs	r3, #1
 8014ae2:	e000      	b.n	8014ae6 <dhcp_supplied_address+0x3a>
 8014ae4:	2300      	movs	r3, #0
 8014ae6:	b2db      	uxtb	r3, r3
 8014ae8:	e000      	b.n	8014aec <dhcp_supplied_address+0x40>
  }
  return 0;
 8014aea:	2300      	movs	r3, #0
}
 8014aec:	4618      	mov	r0, r3
 8014aee:	3714      	adds	r7, #20
 8014af0:	46bd      	mov	sp, r7
 8014af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014af6:	4770      	bx	lr

08014af8 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 8014af8:	b580      	push	{r7, lr}
 8014afa:	b082      	sub	sp, #8
 8014afc:	af00      	add	r7, sp, #0
 8014afe:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 8014b00:	4915      	ldr	r1, [pc, #84]	; (8014b58 <etharp_free_entry+0x60>)
 8014b02:	687a      	ldr	r2, [r7, #4]
 8014b04:	4613      	mov	r3, r2
 8014b06:	005b      	lsls	r3, r3, #1
 8014b08:	4413      	add	r3, r2
 8014b0a:	00db      	lsls	r3, r3, #3
 8014b0c:	440b      	add	r3, r1
 8014b0e:	681b      	ldr	r3, [r3, #0]
 8014b10:	2b00      	cmp	r3, #0
 8014b12:	d013      	beq.n	8014b3c <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 8014b14:	4910      	ldr	r1, [pc, #64]	; (8014b58 <etharp_free_entry+0x60>)
 8014b16:	687a      	ldr	r2, [r7, #4]
 8014b18:	4613      	mov	r3, r2
 8014b1a:	005b      	lsls	r3, r3, #1
 8014b1c:	4413      	add	r3, r2
 8014b1e:	00db      	lsls	r3, r3, #3
 8014b20:	440b      	add	r3, r1
 8014b22:	681b      	ldr	r3, [r3, #0]
 8014b24:	4618      	mov	r0, r3
 8014b26:	f7f8 fe23 	bl	800d770 <pbuf_free>
    arp_table[i].q = NULL;
 8014b2a:	490b      	ldr	r1, [pc, #44]	; (8014b58 <etharp_free_entry+0x60>)
 8014b2c:	687a      	ldr	r2, [r7, #4]
 8014b2e:	4613      	mov	r3, r2
 8014b30:	005b      	lsls	r3, r3, #1
 8014b32:	4413      	add	r3, r2
 8014b34:	00db      	lsls	r3, r3, #3
 8014b36:	440b      	add	r3, r1
 8014b38:	2200      	movs	r2, #0
 8014b3a:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 8014b3c:	4906      	ldr	r1, [pc, #24]	; (8014b58 <etharp_free_entry+0x60>)
 8014b3e:	687a      	ldr	r2, [r7, #4]
 8014b40:	4613      	mov	r3, r2
 8014b42:	005b      	lsls	r3, r3, #1
 8014b44:	4413      	add	r3, r2
 8014b46:	00db      	lsls	r3, r3, #3
 8014b48:	440b      	add	r3, r1
 8014b4a:	3314      	adds	r3, #20
 8014b4c:	2200      	movs	r2, #0
 8014b4e:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 8014b50:	bf00      	nop
 8014b52:	3708      	adds	r7, #8
 8014b54:	46bd      	mov	sp, r7
 8014b56:	bd80      	pop	{r7, pc}
 8014b58:	20004bbc 	.word	0x20004bbc

08014b5c <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 8014b5c:	b580      	push	{r7, lr}
 8014b5e:	b082      	sub	sp, #8
 8014b60:	af00      	add	r7, sp, #0
  u8_t i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8014b62:	2300      	movs	r3, #0
 8014b64:	71fb      	strb	r3, [r7, #7]
 8014b66:	e096      	b.n	8014c96 <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 8014b68:	79fa      	ldrb	r2, [r7, #7]
 8014b6a:	494f      	ldr	r1, [pc, #316]	; (8014ca8 <etharp_tmr+0x14c>)
 8014b6c:	4613      	mov	r3, r2
 8014b6e:	005b      	lsls	r3, r3, #1
 8014b70:	4413      	add	r3, r2
 8014b72:	00db      	lsls	r3, r3, #3
 8014b74:	440b      	add	r3, r1
 8014b76:	3314      	adds	r3, #20
 8014b78:	781b      	ldrb	r3, [r3, #0]
 8014b7a:	71bb      	strb	r3, [r7, #6]
    if (state != ETHARP_STATE_EMPTY
 8014b7c:	79bb      	ldrb	r3, [r7, #6]
 8014b7e:	2b00      	cmp	r3, #0
 8014b80:	f000 8086 	beq.w	8014c90 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
      && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
      ) {
      arp_table[i].ctime++;
 8014b84:	79fa      	ldrb	r2, [r7, #7]
 8014b86:	4948      	ldr	r1, [pc, #288]	; (8014ca8 <etharp_tmr+0x14c>)
 8014b88:	4613      	mov	r3, r2
 8014b8a:	005b      	lsls	r3, r3, #1
 8014b8c:	4413      	add	r3, r2
 8014b8e:	00db      	lsls	r3, r3, #3
 8014b90:	440b      	add	r3, r1
 8014b92:	3312      	adds	r3, #18
 8014b94:	881b      	ldrh	r3, [r3, #0]
 8014b96:	3301      	adds	r3, #1
 8014b98:	b298      	uxth	r0, r3
 8014b9a:	4943      	ldr	r1, [pc, #268]	; (8014ca8 <etharp_tmr+0x14c>)
 8014b9c:	4613      	mov	r3, r2
 8014b9e:	005b      	lsls	r3, r3, #1
 8014ba0:	4413      	add	r3, r2
 8014ba2:	00db      	lsls	r3, r3, #3
 8014ba4:	440b      	add	r3, r1
 8014ba6:	3312      	adds	r3, #18
 8014ba8:	4602      	mov	r2, r0
 8014baa:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8014bac:	79fa      	ldrb	r2, [r7, #7]
 8014bae:	493e      	ldr	r1, [pc, #248]	; (8014ca8 <etharp_tmr+0x14c>)
 8014bb0:	4613      	mov	r3, r2
 8014bb2:	005b      	lsls	r3, r3, #1
 8014bb4:	4413      	add	r3, r2
 8014bb6:	00db      	lsls	r3, r3, #3
 8014bb8:	440b      	add	r3, r1
 8014bba:	3312      	adds	r3, #18
 8014bbc:	881b      	ldrh	r3, [r3, #0]
 8014bbe:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8014bc2:	d215      	bcs.n	8014bf0 <etharp_tmr+0x94>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8014bc4:	79fa      	ldrb	r2, [r7, #7]
 8014bc6:	4938      	ldr	r1, [pc, #224]	; (8014ca8 <etharp_tmr+0x14c>)
 8014bc8:	4613      	mov	r3, r2
 8014bca:	005b      	lsls	r3, r3, #1
 8014bcc:	4413      	add	r3, r2
 8014bce:	00db      	lsls	r3, r3, #3
 8014bd0:	440b      	add	r3, r1
 8014bd2:	3314      	adds	r3, #20
 8014bd4:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8014bd6:	2b01      	cmp	r3, #1
 8014bd8:	d10f      	bne.n	8014bfa <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 8014bda:	79fa      	ldrb	r2, [r7, #7]
 8014bdc:	4932      	ldr	r1, [pc, #200]	; (8014ca8 <etharp_tmr+0x14c>)
 8014bde:	4613      	mov	r3, r2
 8014be0:	005b      	lsls	r3, r3, #1
 8014be2:	4413      	add	r3, r2
 8014be4:	00db      	lsls	r3, r3, #3
 8014be6:	440b      	add	r3, r1
 8014be8:	3312      	adds	r3, #18
 8014bea:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8014bec:	2b04      	cmp	r3, #4
 8014bee:	d904      	bls.n	8014bfa <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %"U16_F".\n",
             arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", (u16_t)i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 8014bf0:	79fb      	ldrb	r3, [r7, #7]
 8014bf2:	4618      	mov	r0, r3
 8014bf4:	f7ff ff80 	bl	8014af8 <etharp_free_entry>
 8014bf8:	e04a      	b.n	8014c90 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 8014bfa:	79fa      	ldrb	r2, [r7, #7]
 8014bfc:	492a      	ldr	r1, [pc, #168]	; (8014ca8 <etharp_tmr+0x14c>)
 8014bfe:	4613      	mov	r3, r2
 8014c00:	005b      	lsls	r3, r3, #1
 8014c02:	4413      	add	r3, r2
 8014c04:	00db      	lsls	r3, r3, #3
 8014c06:	440b      	add	r3, r1
 8014c08:	3314      	adds	r3, #20
 8014c0a:	781b      	ldrb	r3, [r3, #0]
 8014c0c:	2b03      	cmp	r3, #3
 8014c0e:	d10a      	bne.n	8014c26 <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 8014c10:	79fa      	ldrb	r2, [r7, #7]
 8014c12:	4925      	ldr	r1, [pc, #148]	; (8014ca8 <etharp_tmr+0x14c>)
 8014c14:	4613      	mov	r3, r2
 8014c16:	005b      	lsls	r3, r3, #1
 8014c18:	4413      	add	r3, r2
 8014c1a:	00db      	lsls	r3, r3, #3
 8014c1c:	440b      	add	r3, r1
 8014c1e:	3314      	adds	r3, #20
 8014c20:	2204      	movs	r2, #4
 8014c22:	701a      	strb	r2, [r3, #0]
 8014c24:	e034      	b.n	8014c90 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 8014c26:	79fa      	ldrb	r2, [r7, #7]
 8014c28:	491f      	ldr	r1, [pc, #124]	; (8014ca8 <etharp_tmr+0x14c>)
 8014c2a:	4613      	mov	r3, r2
 8014c2c:	005b      	lsls	r3, r3, #1
 8014c2e:	4413      	add	r3, r2
 8014c30:	00db      	lsls	r3, r3, #3
 8014c32:	440b      	add	r3, r1
 8014c34:	3314      	adds	r3, #20
 8014c36:	781b      	ldrb	r3, [r3, #0]
 8014c38:	2b04      	cmp	r3, #4
 8014c3a:	d10a      	bne.n	8014c52 <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 8014c3c:	79fa      	ldrb	r2, [r7, #7]
 8014c3e:	491a      	ldr	r1, [pc, #104]	; (8014ca8 <etharp_tmr+0x14c>)
 8014c40:	4613      	mov	r3, r2
 8014c42:	005b      	lsls	r3, r3, #1
 8014c44:	4413      	add	r3, r2
 8014c46:	00db      	lsls	r3, r3, #3
 8014c48:	440b      	add	r3, r1
 8014c4a:	3314      	adds	r3, #20
 8014c4c:	2202      	movs	r2, #2
 8014c4e:	701a      	strb	r2, [r3, #0]
 8014c50:	e01e      	b.n	8014c90 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8014c52:	79fa      	ldrb	r2, [r7, #7]
 8014c54:	4914      	ldr	r1, [pc, #80]	; (8014ca8 <etharp_tmr+0x14c>)
 8014c56:	4613      	mov	r3, r2
 8014c58:	005b      	lsls	r3, r3, #1
 8014c5a:	4413      	add	r3, r2
 8014c5c:	00db      	lsls	r3, r3, #3
 8014c5e:	440b      	add	r3, r1
 8014c60:	3314      	adds	r3, #20
 8014c62:	781b      	ldrb	r3, [r3, #0]
 8014c64:	2b01      	cmp	r3, #1
 8014c66:	d113      	bne.n	8014c90 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 8014c68:	79fa      	ldrb	r2, [r7, #7]
 8014c6a:	490f      	ldr	r1, [pc, #60]	; (8014ca8 <etharp_tmr+0x14c>)
 8014c6c:	4613      	mov	r3, r2
 8014c6e:	005b      	lsls	r3, r3, #1
 8014c70:	4413      	add	r3, r2
 8014c72:	00db      	lsls	r3, r3, #3
 8014c74:	440b      	add	r3, r1
 8014c76:	3308      	adds	r3, #8
 8014c78:	6818      	ldr	r0, [r3, #0]
 8014c7a:	79fa      	ldrb	r2, [r7, #7]
 8014c7c:	4613      	mov	r3, r2
 8014c7e:	005b      	lsls	r3, r3, #1
 8014c80:	4413      	add	r3, r2
 8014c82:	00db      	lsls	r3, r3, #3
 8014c84:	4a08      	ldr	r2, [pc, #32]	; (8014ca8 <etharp_tmr+0x14c>)
 8014c86:	4413      	add	r3, r2
 8014c88:	3304      	adds	r3, #4
 8014c8a:	4619      	mov	r1, r3
 8014c8c:	f000 fe3c 	bl	8015908 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8014c90:	79fb      	ldrb	r3, [r7, #7]
 8014c92:	3301      	adds	r3, #1
 8014c94:	71fb      	strb	r3, [r7, #7]
 8014c96:	79fb      	ldrb	r3, [r7, #7]
 8014c98:	2b09      	cmp	r3, #9
 8014c9a:	f67f af65 	bls.w	8014b68 <etharp_tmr+0xc>
      }
    }
  }
}
 8014c9e:	bf00      	nop
 8014ca0:	3708      	adds	r7, #8
 8014ca2:	46bd      	mov	sp, r7
 8014ca4:	bd80      	pop	{r7, pc}
 8014ca6:	bf00      	nop
 8014ca8:	20004bbc 	.word	0x20004bbc

08014cac <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s8_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif* netif)
{
 8014cac:	b580      	push	{r7, lr}
 8014cae:	b088      	sub	sp, #32
 8014cb0:	af00      	add	r7, sp, #0
 8014cb2:	60f8      	str	r0, [r7, #12]
 8014cb4:	460b      	mov	r3, r1
 8014cb6:	607a      	str	r2, [r7, #4]
 8014cb8:	72fb      	strb	r3, [r7, #11]
  s8_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 8014cba:	230a      	movs	r3, #10
 8014cbc:	77fb      	strb	r3, [r7, #31]
 8014cbe:	230a      	movs	r3, #10
 8014cc0:	77bb      	strb	r3, [r7, #30]
  s8_t empty = ARP_TABLE_SIZE;
 8014cc2:	230a      	movs	r3, #10
 8014cc4:	777b      	strb	r3, [r7, #29]
  u8_t i = 0;
 8014cc6:	2300      	movs	r3, #0
 8014cc8:	773b      	strb	r3, [r7, #28]
  /* oldest entry with packets on queue */
  s8_t old_queue = ARP_TABLE_SIZE;
 8014cca:	230a      	movs	r3, #10
 8014ccc:	76fb      	strb	r3, [r7, #27]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 8014cce:	2300      	movs	r3, #0
 8014cd0:	833b      	strh	r3, [r7, #24]
 8014cd2:	2300      	movs	r3, #0
 8014cd4:	82fb      	strh	r3, [r7, #22]
 8014cd6:	2300      	movs	r3, #0
 8014cd8:	82bb      	strh	r3, [r7, #20]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8014cda:	2300      	movs	r3, #0
 8014cdc:	773b      	strb	r3, [r7, #28]
 8014cde:	e093      	b.n	8014e08 <etharp_find_entry+0x15c>
    u8_t state = arp_table[i].state;
 8014ce0:	7f3a      	ldrb	r2, [r7, #28]
 8014ce2:	4990      	ldr	r1, [pc, #576]	; (8014f24 <etharp_find_entry+0x278>)
 8014ce4:	4613      	mov	r3, r2
 8014ce6:	005b      	lsls	r3, r3, #1
 8014ce8:	4413      	add	r3, r2
 8014cea:	00db      	lsls	r3, r3, #3
 8014cec:	440b      	add	r3, r1
 8014cee:	3314      	adds	r3, #20
 8014cf0:	781b      	ldrb	r3, [r3, #0]
 8014cf2:	74fb      	strb	r3, [r7, #19]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 8014cf4:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8014cf8:	2b0a      	cmp	r3, #10
 8014cfa:	d105      	bne.n	8014d08 <etharp_find_entry+0x5c>
 8014cfc:	7cfb      	ldrb	r3, [r7, #19]
 8014cfe:	2b00      	cmp	r3, #0
 8014d00:	d102      	bne.n	8014d08 <etharp_find_entry+0x5c>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %"U16_F"\n", (u16_t)i));
      /* remember first empty entry */
      empty = i;
 8014d02:	7f3b      	ldrb	r3, [r7, #28]
 8014d04:	777b      	strb	r3, [r7, #29]
 8014d06:	e07c      	b.n	8014e02 <etharp_find_entry+0x156>
    } else if (state != ETHARP_STATE_EMPTY) {
 8014d08:	7cfb      	ldrb	r3, [r7, #19]
 8014d0a:	2b00      	cmp	r3, #0
 8014d0c:	d079      	beq.n	8014e02 <etharp_find_entry+0x156>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 8014d0e:	7cfb      	ldrb	r3, [r7, #19]
 8014d10:	2b01      	cmp	r3, #1
 8014d12:	d009      	beq.n	8014d28 <etharp_find_entry+0x7c>
 8014d14:	7cfb      	ldrb	r3, [r7, #19]
 8014d16:	2b01      	cmp	r3, #1
 8014d18:	d806      	bhi.n	8014d28 <etharp_find_entry+0x7c>
 8014d1a:	4b83      	ldr	r3, [pc, #524]	; (8014f28 <etharp_find_entry+0x27c>)
 8014d1c:	f44f 7293 	mov.w	r2, #294	; 0x126
 8014d20:	4982      	ldr	r1, [pc, #520]	; (8014f2c <etharp_find_entry+0x280>)
 8014d22:	4883      	ldr	r0, [pc, #524]	; (8014f30 <etharp_find_entry+0x284>)
 8014d24:	f002 fff2 	bl	8017d0c <iprintf>
        state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 8014d28:	68fb      	ldr	r3, [r7, #12]
 8014d2a:	2b00      	cmp	r3, #0
 8014d2c:	d00f      	beq.n	8014d4e <etharp_find_entry+0xa2>
 8014d2e:	68fb      	ldr	r3, [r7, #12]
 8014d30:	6819      	ldr	r1, [r3, #0]
 8014d32:	7f3a      	ldrb	r2, [r7, #28]
 8014d34:	487b      	ldr	r0, [pc, #492]	; (8014f24 <etharp_find_entry+0x278>)
 8014d36:	4613      	mov	r3, r2
 8014d38:	005b      	lsls	r3, r3, #1
 8014d3a:	4413      	add	r3, r2
 8014d3c:	00db      	lsls	r3, r3, #3
 8014d3e:	4403      	add	r3, r0
 8014d40:	3304      	adds	r3, #4
 8014d42:	681b      	ldr	r3, [r3, #0]
 8014d44:	4299      	cmp	r1, r3
 8014d46:	d102      	bne.n	8014d4e <etharp_find_entry+0xa2>
          && ((netif == NULL) || (netif == arp_table[i].netif))
#endif /* ETHARP_TABLE_MATCH_NETIF */
        ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %"U16_F"\n", (u16_t)i));
        /* found exact IP address match, simply bail out */
        return i;
 8014d48:	f997 301c 	ldrsb.w	r3, [r7, #28]
 8014d4c:	e0e5      	b.n	8014f1a <etharp_find_entry+0x26e>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 8014d4e:	7cfb      	ldrb	r3, [r7, #19]
 8014d50:	2b01      	cmp	r3, #1
 8014d52:	d13b      	bne.n	8014dcc <etharp_find_entry+0x120>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 8014d54:	7f3a      	ldrb	r2, [r7, #28]
 8014d56:	4973      	ldr	r1, [pc, #460]	; (8014f24 <etharp_find_entry+0x278>)
 8014d58:	4613      	mov	r3, r2
 8014d5a:	005b      	lsls	r3, r3, #1
 8014d5c:	4413      	add	r3, r2
 8014d5e:	00db      	lsls	r3, r3, #3
 8014d60:	440b      	add	r3, r1
 8014d62:	681b      	ldr	r3, [r3, #0]
 8014d64:	2b00      	cmp	r3, #0
 8014d66:	d018      	beq.n	8014d9a <etharp_find_entry+0xee>
          if (arp_table[i].ctime >= age_queue) {
 8014d68:	7f3a      	ldrb	r2, [r7, #28]
 8014d6a:	496e      	ldr	r1, [pc, #440]	; (8014f24 <etharp_find_entry+0x278>)
 8014d6c:	4613      	mov	r3, r2
 8014d6e:	005b      	lsls	r3, r3, #1
 8014d70:	4413      	add	r3, r2
 8014d72:	00db      	lsls	r3, r3, #3
 8014d74:	440b      	add	r3, r1
 8014d76:	3312      	adds	r3, #18
 8014d78:	881b      	ldrh	r3, [r3, #0]
 8014d7a:	8b3a      	ldrh	r2, [r7, #24]
 8014d7c:	429a      	cmp	r2, r3
 8014d7e:	d840      	bhi.n	8014e02 <etharp_find_entry+0x156>
            old_queue = i;
 8014d80:	7f3b      	ldrb	r3, [r7, #28]
 8014d82:	76fb      	strb	r3, [r7, #27]
            age_queue = arp_table[i].ctime;
 8014d84:	7f3a      	ldrb	r2, [r7, #28]
 8014d86:	4967      	ldr	r1, [pc, #412]	; (8014f24 <etharp_find_entry+0x278>)
 8014d88:	4613      	mov	r3, r2
 8014d8a:	005b      	lsls	r3, r3, #1
 8014d8c:	4413      	add	r3, r2
 8014d8e:	00db      	lsls	r3, r3, #3
 8014d90:	440b      	add	r3, r1
 8014d92:	3312      	adds	r3, #18
 8014d94:	881b      	ldrh	r3, [r3, #0]
 8014d96:	833b      	strh	r3, [r7, #24]
 8014d98:	e033      	b.n	8014e02 <etharp_find_entry+0x156>
          }
        } else
        /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 8014d9a:	7f3a      	ldrb	r2, [r7, #28]
 8014d9c:	4961      	ldr	r1, [pc, #388]	; (8014f24 <etharp_find_entry+0x278>)
 8014d9e:	4613      	mov	r3, r2
 8014da0:	005b      	lsls	r3, r3, #1
 8014da2:	4413      	add	r3, r2
 8014da4:	00db      	lsls	r3, r3, #3
 8014da6:	440b      	add	r3, r1
 8014da8:	3312      	adds	r3, #18
 8014daa:	881b      	ldrh	r3, [r3, #0]
 8014dac:	8afa      	ldrh	r2, [r7, #22]
 8014dae:	429a      	cmp	r2, r3
 8014db0:	d827      	bhi.n	8014e02 <etharp_find_entry+0x156>
            old_pending = i;
 8014db2:	7f3b      	ldrb	r3, [r7, #28]
 8014db4:	77fb      	strb	r3, [r7, #31]
            age_pending = arp_table[i].ctime;
 8014db6:	7f3a      	ldrb	r2, [r7, #28]
 8014db8:	495a      	ldr	r1, [pc, #360]	; (8014f24 <etharp_find_entry+0x278>)
 8014dba:	4613      	mov	r3, r2
 8014dbc:	005b      	lsls	r3, r3, #1
 8014dbe:	4413      	add	r3, r2
 8014dc0:	00db      	lsls	r3, r3, #3
 8014dc2:	440b      	add	r3, r1
 8014dc4:	3312      	adds	r3, #18
 8014dc6:	881b      	ldrh	r3, [r3, #0]
 8014dc8:	82fb      	strh	r3, [r7, #22]
 8014dca:	e01a      	b.n	8014e02 <etharp_find_entry+0x156>
          }
        }
      /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 8014dcc:	7cfb      	ldrb	r3, [r7, #19]
 8014dce:	2b01      	cmp	r3, #1
 8014dd0:	d917      	bls.n	8014e02 <etharp_find_entry+0x156>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 8014dd2:	7f3a      	ldrb	r2, [r7, #28]
 8014dd4:	4953      	ldr	r1, [pc, #332]	; (8014f24 <etharp_find_entry+0x278>)
 8014dd6:	4613      	mov	r3, r2
 8014dd8:	005b      	lsls	r3, r3, #1
 8014dda:	4413      	add	r3, r2
 8014ddc:	00db      	lsls	r3, r3, #3
 8014dde:	440b      	add	r3, r1
 8014de0:	3312      	adds	r3, #18
 8014de2:	881b      	ldrh	r3, [r3, #0]
 8014de4:	8aba      	ldrh	r2, [r7, #20]
 8014de6:	429a      	cmp	r2, r3
 8014de8:	d80b      	bhi.n	8014e02 <etharp_find_entry+0x156>
            old_stable = i;
 8014dea:	7f3b      	ldrb	r3, [r7, #28]
 8014dec:	77bb      	strb	r3, [r7, #30]
            age_stable = arp_table[i].ctime;
 8014dee:	7f3a      	ldrb	r2, [r7, #28]
 8014df0:	494c      	ldr	r1, [pc, #304]	; (8014f24 <etharp_find_entry+0x278>)
 8014df2:	4613      	mov	r3, r2
 8014df4:	005b      	lsls	r3, r3, #1
 8014df6:	4413      	add	r3, r2
 8014df8:	00db      	lsls	r3, r3, #3
 8014dfa:	440b      	add	r3, r1
 8014dfc:	3312      	adds	r3, #18
 8014dfe:	881b      	ldrh	r3, [r3, #0]
 8014e00:	82bb      	strh	r3, [r7, #20]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8014e02:	7f3b      	ldrb	r3, [r7, #28]
 8014e04:	3301      	adds	r3, #1
 8014e06:	773b      	strb	r3, [r7, #28]
 8014e08:	7f3b      	ldrb	r3, [r7, #28]
 8014e0a:	2b09      	cmp	r3, #9
 8014e0c:	f67f af68 	bls.w	8014ce0 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 8014e10:	7afb      	ldrb	r3, [r7, #11]
 8014e12:	f003 0302 	and.w	r3, r3, #2
 8014e16:	2b00      	cmp	r3, #0
 8014e18:	d108      	bne.n	8014e2c <etharp_find_entry+0x180>
 8014e1a:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8014e1e:	2b0a      	cmp	r3, #10
 8014e20:	d107      	bne.n	8014e32 <etharp_find_entry+0x186>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 8014e22:	7afb      	ldrb	r3, [r7, #11]
 8014e24:	f003 0301 	and.w	r3, r3, #1
 8014e28:	2b00      	cmp	r3, #0
 8014e2a:	d102      	bne.n	8014e32 <etharp_find_entry+0x186>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s8_t)ERR_MEM;
 8014e2c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8014e30:	e073      	b.n	8014f1a <etharp_find_entry+0x26e>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 8014e32:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8014e36:	2b09      	cmp	r3, #9
 8014e38:	dc02      	bgt.n	8014e40 <etharp_find_entry+0x194>
    i = empty;
 8014e3a:	7f7b      	ldrb	r3, [r7, #29]
 8014e3c:	773b      	strb	r3, [r7, #28]
 8014e3e:	e036      	b.n	8014eae <etharp_find_entry+0x202>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %"U16_F"\n", (u16_t)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 8014e40:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8014e44:	2b09      	cmp	r3, #9
 8014e46:	dc13      	bgt.n	8014e70 <etharp_find_entry+0x1c4>
      /* recycle oldest stable*/
      i = old_stable;
 8014e48:	7fbb      	ldrb	r3, [r7, #30]
 8014e4a:	773b      	strb	r3, [r7, #28]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %"U16_F"\n", (u16_t)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 8014e4c:	7f3a      	ldrb	r2, [r7, #28]
 8014e4e:	4935      	ldr	r1, [pc, #212]	; (8014f24 <etharp_find_entry+0x278>)
 8014e50:	4613      	mov	r3, r2
 8014e52:	005b      	lsls	r3, r3, #1
 8014e54:	4413      	add	r3, r2
 8014e56:	00db      	lsls	r3, r3, #3
 8014e58:	440b      	add	r3, r1
 8014e5a:	681b      	ldr	r3, [r3, #0]
 8014e5c:	2b00      	cmp	r3, #0
 8014e5e:	d018      	beq.n	8014e92 <etharp_find_entry+0x1e6>
 8014e60:	4b31      	ldr	r3, [pc, #196]	; (8014f28 <etharp_find_entry+0x27c>)
 8014e62:	f240 126f 	movw	r2, #367	; 0x16f
 8014e66:	4933      	ldr	r1, [pc, #204]	; (8014f34 <etharp_find_entry+0x288>)
 8014e68:	4831      	ldr	r0, [pc, #196]	; (8014f30 <etharp_find_entry+0x284>)
 8014e6a:	f002 ff4f 	bl	8017d0c <iprintf>
 8014e6e:	e010      	b.n	8014e92 <etharp_find_entry+0x1e6>
    /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 8014e70:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8014e74:	2b09      	cmp	r3, #9
 8014e76:	dc02      	bgt.n	8014e7e <etharp_find_entry+0x1d2>
      /* recycle oldest pending */
      i = old_pending;
 8014e78:	7ffb      	ldrb	r3, [r7, #31]
 8014e7a:	773b      	strb	r3, [r7, #28]
 8014e7c:	e009      	b.n	8014e92 <etharp_find_entry+0x1e6>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %"U16_F" (without queue)\n", (u16_t)i));
    /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 8014e7e:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8014e82:	2b09      	cmp	r3, #9
 8014e84:	dc02      	bgt.n	8014e8c <etharp_find_entry+0x1e0>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 8014e86:	7efb      	ldrb	r3, [r7, #27]
 8014e88:	773b      	strb	r3, [r7, #28]
 8014e8a:	e002      	b.n	8014e92 <etharp_find_entry+0x1e6>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %"U16_F", freeing packet queue %p\n", (u16_t)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s8_t)ERR_MEM;
 8014e8c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8014e90:	e043      	b.n	8014f1a <etharp_find_entry+0x26e>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8014e92:	7f3b      	ldrb	r3, [r7, #28]
 8014e94:	2b09      	cmp	r3, #9
 8014e96:	d906      	bls.n	8014ea6 <etharp_find_entry+0x1fa>
 8014e98:	4b23      	ldr	r3, [pc, #140]	; (8014f28 <etharp_find_entry+0x27c>)
 8014e9a:	f240 1281 	movw	r2, #385	; 0x181
 8014e9e:	4926      	ldr	r1, [pc, #152]	; (8014f38 <etharp_find_entry+0x28c>)
 8014ea0:	4823      	ldr	r0, [pc, #140]	; (8014f30 <etharp_find_entry+0x284>)
 8014ea2:	f002 ff33 	bl	8017d0c <iprintf>
    etharp_free_entry(i);
 8014ea6:	7f3b      	ldrb	r3, [r7, #28]
 8014ea8:	4618      	mov	r0, r3
 8014eaa:	f7ff fe25 	bl	8014af8 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8014eae:	7f3b      	ldrb	r3, [r7, #28]
 8014eb0:	2b09      	cmp	r3, #9
 8014eb2:	d906      	bls.n	8014ec2 <etharp_find_entry+0x216>
 8014eb4:	4b1c      	ldr	r3, [pc, #112]	; (8014f28 <etharp_find_entry+0x27c>)
 8014eb6:	f240 1285 	movw	r2, #389	; 0x185
 8014eba:	491f      	ldr	r1, [pc, #124]	; (8014f38 <etharp_find_entry+0x28c>)
 8014ebc:	481c      	ldr	r0, [pc, #112]	; (8014f30 <etharp_find_entry+0x284>)
 8014ebe:	f002 ff25 	bl	8017d0c <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 8014ec2:	7f3a      	ldrb	r2, [r7, #28]
 8014ec4:	4917      	ldr	r1, [pc, #92]	; (8014f24 <etharp_find_entry+0x278>)
 8014ec6:	4613      	mov	r3, r2
 8014ec8:	005b      	lsls	r3, r3, #1
 8014eca:	4413      	add	r3, r2
 8014ecc:	00db      	lsls	r3, r3, #3
 8014ece:	440b      	add	r3, r1
 8014ed0:	3314      	adds	r3, #20
 8014ed2:	781b      	ldrb	r3, [r3, #0]
 8014ed4:	2b00      	cmp	r3, #0
 8014ed6:	d006      	beq.n	8014ee6 <etharp_find_entry+0x23a>
 8014ed8:	4b13      	ldr	r3, [pc, #76]	; (8014f28 <etharp_find_entry+0x27c>)
 8014eda:	f240 1287 	movw	r2, #391	; 0x187
 8014ede:	4917      	ldr	r1, [pc, #92]	; (8014f3c <etharp_find_entry+0x290>)
 8014ee0:	4813      	ldr	r0, [pc, #76]	; (8014f30 <etharp_find_entry+0x284>)
 8014ee2:	f002 ff13 	bl	8017d0c <iprintf>
    arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 8014ee6:	68fb      	ldr	r3, [r7, #12]
 8014ee8:	2b00      	cmp	r3, #0
 8014eea:	d00a      	beq.n	8014f02 <etharp_find_entry+0x256>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 8014eec:	7f3a      	ldrb	r2, [r7, #28]
 8014eee:	68fb      	ldr	r3, [r7, #12]
 8014ef0:	6819      	ldr	r1, [r3, #0]
 8014ef2:	480c      	ldr	r0, [pc, #48]	; (8014f24 <etharp_find_entry+0x278>)
 8014ef4:	4613      	mov	r3, r2
 8014ef6:	005b      	lsls	r3, r3, #1
 8014ef8:	4413      	add	r3, r2
 8014efa:	00db      	lsls	r3, r3, #3
 8014efc:	4403      	add	r3, r0
 8014efe:	3304      	adds	r3, #4
 8014f00:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 8014f02:	7f3a      	ldrb	r2, [r7, #28]
 8014f04:	4907      	ldr	r1, [pc, #28]	; (8014f24 <etharp_find_entry+0x278>)
 8014f06:	4613      	mov	r3, r2
 8014f08:	005b      	lsls	r3, r3, #1
 8014f0a:	4413      	add	r3, r2
 8014f0c:	00db      	lsls	r3, r3, #3
 8014f0e:	440b      	add	r3, r1
 8014f10:	3312      	adds	r3, #18
 8014f12:	2200      	movs	r2, #0
 8014f14:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
#endif /* ETHARP_TABLE_MATCH_NETIF*/
  return (err_t)i;
 8014f16:	f997 301c 	ldrsb.w	r3, [r7, #28]
}
 8014f1a:	4618      	mov	r0, r3
 8014f1c:	3720      	adds	r7, #32
 8014f1e:	46bd      	mov	sp, r7
 8014f20:	bd80      	pop	{r7, pc}
 8014f22:	bf00      	nop
 8014f24:	20004bbc 	.word	0x20004bbc
 8014f28:	0801a698 	.word	0x0801a698
 8014f2c:	0801a6d0 	.word	0x0801a6d0
 8014f30:	0801a710 	.word	0x0801a710
 8014f34:	0801a738 	.word	0x0801a738
 8014f38:	0801a750 	.word	0x0801a750
 8014f3c:	0801a764 	.word	0x0801a764

08014f40 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 8014f40:	b580      	push	{r7, lr}
 8014f42:	b088      	sub	sp, #32
 8014f44:	af02      	add	r7, sp, #8
 8014f46:	60f8      	str	r0, [r7, #12]
 8014f48:	60b9      	str	r1, [r7, #8]
 8014f4a:	607a      	str	r2, [r7, #4]
 8014f4c:	70fb      	strb	r3, [r7, #3]
  s8_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 8014f4e:	68fb      	ldr	r3, [r7, #12]
 8014f50:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8014f54:	2b06      	cmp	r3, #6
 8014f56:	d006      	beq.n	8014f66 <etharp_update_arp_entry+0x26>
 8014f58:	4b48      	ldr	r3, [pc, #288]	; (801507c <etharp_update_arp_entry+0x13c>)
 8014f5a:	f240 12ab 	movw	r2, #427	; 0x1ab
 8014f5e:	4948      	ldr	r1, [pc, #288]	; (8015080 <etharp_update_arp_entry+0x140>)
 8014f60:	4848      	ldr	r0, [pc, #288]	; (8015084 <etharp_update_arp_entry+0x144>)
 8014f62:	f002 fed3 	bl	8017d0c <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
    ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
    (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
    (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 8014f66:	68bb      	ldr	r3, [r7, #8]
 8014f68:	2b00      	cmp	r3, #0
 8014f6a:	d012      	beq.n	8014f92 <etharp_update_arp_entry+0x52>
 8014f6c:	68bb      	ldr	r3, [r7, #8]
 8014f6e:	681b      	ldr	r3, [r3, #0]
 8014f70:	2b00      	cmp	r3, #0
 8014f72:	d00e      	beq.n	8014f92 <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8014f74:	68bb      	ldr	r3, [r7, #8]
 8014f76:	681b      	ldr	r3, [r3, #0]
 8014f78:	68f9      	ldr	r1, [r7, #12]
 8014f7a:	4618      	mov	r0, r3
 8014f7c:	f001 f8fc 	bl	8016178 <ip4_addr_isbroadcast_u32>
 8014f80:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 8014f82:	2b00      	cmp	r3, #0
 8014f84:	d105      	bne.n	8014f92 <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 8014f86:	68bb      	ldr	r3, [r7, #8]
 8014f88:	681b      	ldr	r3, [r3, #0]
 8014f8a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8014f8e:	2be0      	cmp	r3, #224	; 0xe0
 8014f90:	d102      	bne.n	8014f98 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8014f92:	f06f 030f 	mvn.w	r3, #15
 8014f96:	e06c      	b.n	8015072 <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 8014f98:	78fb      	ldrb	r3, [r7, #3]
 8014f9a:	68fa      	ldr	r2, [r7, #12]
 8014f9c:	4619      	mov	r1, r3
 8014f9e:	68b8      	ldr	r0, [r7, #8]
 8014fa0:	f7ff fe84 	bl	8014cac <etharp_find_entry>
 8014fa4:	4603      	mov	r3, r0
 8014fa6:	75fb      	strb	r3, [r7, #23]
  /* bail out if no entry could be found */
  if (i < 0) {
 8014fa8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8014fac:	2b00      	cmp	r3, #0
 8014fae:	da02      	bge.n	8014fb6 <etharp_update_arp_entry+0x76>
    return (err_t)i;
 8014fb0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8014fb4:	e05d      	b.n	8015072 <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 8014fb6:	f997 2017 	ldrsb.w	r2, [r7, #23]
 8014fba:	4933      	ldr	r1, [pc, #204]	; (8015088 <etharp_update_arp_entry+0x148>)
 8014fbc:	4613      	mov	r3, r2
 8014fbe:	005b      	lsls	r3, r3, #1
 8014fc0:	4413      	add	r3, r2
 8014fc2:	00db      	lsls	r3, r3, #3
 8014fc4:	440b      	add	r3, r1
 8014fc6:	3314      	adds	r3, #20
 8014fc8:	2202      	movs	r2, #2
 8014fca:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 8014fcc:	f997 2017 	ldrsb.w	r2, [r7, #23]
 8014fd0:	492d      	ldr	r1, [pc, #180]	; (8015088 <etharp_update_arp_entry+0x148>)
 8014fd2:	4613      	mov	r3, r2
 8014fd4:	005b      	lsls	r3, r3, #1
 8014fd6:	4413      	add	r3, r2
 8014fd8:	00db      	lsls	r3, r3, #3
 8014fda:	440b      	add	r3, r1
 8014fdc:	3308      	adds	r3, #8
 8014fde:	68fa      	ldr	r2, [r7, #12]
 8014fe0:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", (s16_t)i));
  /* update address */
  ETHADDR32_COPY(&arp_table[i].ethaddr, ethaddr);
 8014fe2:	f997 2017 	ldrsb.w	r2, [r7, #23]
 8014fe6:	4613      	mov	r3, r2
 8014fe8:	005b      	lsls	r3, r3, #1
 8014fea:	4413      	add	r3, r2
 8014fec:	00db      	lsls	r3, r3, #3
 8014fee:	3308      	adds	r3, #8
 8014ff0:	4a25      	ldr	r2, [pc, #148]	; (8015088 <etharp_update_arp_entry+0x148>)
 8014ff2:	4413      	add	r3, r2
 8014ff4:	3304      	adds	r3, #4
 8014ff6:	2206      	movs	r2, #6
 8014ff8:	6879      	ldr	r1, [r7, #4]
 8014ffa:	4618      	mov	r0, r3
 8014ffc:	f002 fdcb 	bl	8017b96 <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 8015000:	f997 2017 	ldrsb.w	r2, [r7, #23]
 8015004:	4920      	ldr	r1, [pc, #128]	; (8015088 <etharp_update_arp_entry+0x148>)
 8015006:	4613      	mov	r3, r2
 8015008:	005b      	lsls	r3, r3, #1
 801500a:	4413      	add	r3, r2
 801500c:	00db      	lsls	r3, r3, #3
 801500e:	440b      	add	r3, r1
 8015010:	3312      	adds	r3, #18
 8015012:	2200      	movs	r2, #0
 8015014:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 8015016:	f997 2017 	ldrsb.w	r2, [r7, #23]
 801501a:	491b      	ldr	r1, [pc, #108]	; (8015088 <etharp_update_arp_entry+0x148>)
 801501c:	4613      	mov	r3, r2
 801501e:	005b      	lsls	r3, r3, #1
 8015020:	4413      	add	r3, r2
 8015022:	00db      	lsls	r3, r3, #3
 8015024:	440b      	add	r3, r1
 8015026:	681b      	ldr	r3, [r3, #0]
 8015028:	2b00      	cmp	r3, #0
 801502a:	d021      	beq.n	8015070 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 801502c:	f997 2017 	ldrsb.w	r2, [r7, #23]
 8015030:	4915      	ldr	r1, [pc, #84]	; (8015088 <etharp_update_arp_entry+0x148>)
 8015032:	4613      	mov	r3, r2
 8015034:	005b      	lsls	r3, r3, #1
 8015036:	4413      	add	r3, r2
 8015038:	00db      	lsls	r3, r3, #3
 801503a:	440b      	add	r3, r1
 801503c:	681b      	ldr	r3, [r3, #0]
 801503e:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 8015040:	f997 2017 	ldrsb.w	r2, [r7, #23]
 8015044:	4910      	ldr	r1, [pc, #64]	; (8015088 <etharp_update_arp_entry+0x148>)
 8015046:	4613      	mov	r3, r2
 8015048:	005b      	lsls	r3, r3, #1
 801504a:	4413      	add	r3, r2
 801504c:	00db      	lsls	r3, r3, #3
 801504e:	440b      	add	r3, r1
 8015050:	2200      	movs	r2, #0
 8015052:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr*)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 8015054:	68fb      	ldr	r3, [r7, #12]
 8015056:	f103 0229 	add.w	r2, r3, #41	; 0x29
 801505a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801505e:	9300      	str	r3, [sp, #0]
 8015060:	687b      	ldr	r3, [r7, #4]
 8015062:	6939      	ldr	r1, [r7, #16]
 8015064:	68f8      	ldr	r0, [r7, #12]
 8015066:	f001 ff29 	bl	8016ebc <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 801506a:	6938      	ldr	r0, [r7, #16]
 801506c:	f7f8 fb80 	bl	800d770 <pbuf_free>
  }
  return ERR_OK;
 8015070:	2300      	movs	r3, #0
}
 8015072:	4618      	mov	r0, r3
 8015074:	3718      	adds	r7, #24
 8015076:	46bd      	mov	sp, r7
 8015078:	bd80      	pop	{r7, pc}
 801507a:	bf00      	nop
 801507c:	0801a698 	.word	0x0801a698
 8015080:	0801a790 	.word	0x0801a790
 8015084:	0801a710 	.word	0x0801a710
 8015088:	20004bbc 	.word	0x20004bbc

0801508c <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 801508c:	b580      	push	{r7, lr}
 801508e:	b084      	sub	sp, #16
 8015090:	af00      	add	r7, sp, #0
 8015092:	6078      	str	r0, [r7, #4]
  u8_t i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8015094:	2300      	movs	r3, #0
 8015096:	73fb      	strb	r3, [r7, #15]
 8015098:	e01f      	b.n	80150da <etharp_cleanup_netif+0x4e>
    u8_t state = arp_table[i].state;
 801509a:	7bfa      	ldrb	r2, [r7, #15]
 801509c:	4912      	ldr	r1, [pc, #72]	; (80150e8 <etharp_cleanup_netif+0x5c>)
 801509e:	4613      	mov	r3, r2
 80150a0:	005b      	lsls	r3, r3, #1
 80150a2:	4413      	add	r3, r2
 80150a4:	00db      	lsls	r3, r3, #3
 80150a6:	440b      	add	r3, r1
 80150a8:	3314      	adds	r3, #20
 80150aa:	781b      	ldrb	r3, [r3, #0]
 80150ac:	73bb      	strb	r3, [r7, #14]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 80150ae:	7bbb      	ldrb	r3, [r7, #14]
 80150b0:	2b00      	cmp	r3, #0
 80150b2:	d00f      	beq.n	80150d4 <etharp_cleanup_netif+0x48>
 80150b4:	7bfa      	ldrb	r2, [r7, #15]
 80150b6:	490c      	ldr	r1, [pc, #48]	; (80150e8 <etharp_cleanup_netif+0x5c>)
 80150b8:	4613      	mov	r3, r2
 80150ba:	005b      	lsls	r3, r3, #1
 80150bc:	4413      	add	r3, r2
 80150be:	00db      	lsls	r3, r3, #3
 80150c0:	440b      	add	r3, r1
 80150c2:	3308      	adds	r3, #8
 80150c4:	681b      	ldr	r3, [r3, #0]
 80150c6:	687a      	ldr	r2, [r7, #4]
 80150c8:	429a      	cmp	r2, r3
 80150ca:	d103      	bne.n	80150d4 <etharp_cleanup_netif+0x48>
      etharp_free_entry(i);
 80150cc:	7bfb      	ldrb	r3, [r7, #15]
 80150ce:	4618      	mov	r0, r3
 80150d0:	f7ff fd12 	bl	8014af8 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80150d4:	7bfb      	ldrb	r3, [r7, #15]
 80150d6:	3301      	adds	r3, #1
 80150d8:	73fb      	strb	r3, [r7, #15]
 80150da:	7bfb      	ldrb	r3, [r7, #15]
 80150dc:	2b09      	cmp	r3, #9
 80150de:	d9dc      	bls.n	801509a <etharp_cleanup_netif+0xe>
    }
  }
}
 80150e0:	bf00      	nop
 80150e2:	3710      	adds	r7, #16
 80150e4:	46bd      	mov	sp, r7
 80150e6:	bd80      	pop	{r7, pc}
 80150e8:	20004bbc 	.word	0x20004bbc

080150ec <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 80150ec:	b5b0      	push	{r4, r5, r7, lr}
 80150ee:	b08a      	sub	sp, #40	; 0x28
 80150f0:	af04      	add	r7, sp, #16
 80150f2:	6078      	str	r0, [r7, #4]
 80150f4:	6039      	str	r1, [r7, #0]
  struct etharp_hdr *hdr;
  /* these are aligned properly, whereas the ARP header fields might not be */
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 80150f6:	683b      	ldr	r3, [r7, #0]
 80150f8:	2b00      	cmp	r3, #0
 80150fa:	d107      	bne.n	801510c <etharp_input+0x20>
 80150fc:	4b3f      	ldr	r3, [pc, #252]	; (80151fc <etharp_input+0x110>)
 80150fe:	f44f 7222 	mov.w	r2, #648	; 0x288
 8015102:	493f      	ldr	r1, [pc, #252]	; (8015200 <etharp_input+0x114>)
 8015104:	483f      	ldr	r0, [pc, #252]	; (8015204 <etharp_input+0x118>)
 8015106:	f002 fe01 	bl	8017d0c <iprintf>
 801510a:	e074      	b.n	80151f6 <etharp_input+0x10a>

  hdr = (struct etharp_hdr *)p->payload;
 801510c:	687b      	ldr	r3, [r7, #4]
 801510e:	685b      	ldr	r3, [r3, #4]
 8015110:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(HWTYPE_ETHERNET)) ||
 8015112:	693b      	ldr	r3, [r7, #16]
 8015114:	881b      	ldrh	r3, [r3, #0]
 8015116:	b29b      	uxth	r3, r3
 8015118:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801511c:	d10c      	bne.n	8015138 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 801511e:	693b      	ldr	r3, [r7, #16]
 8015120:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(HWTYPE_ETHERNET)) ||
 8015122:	2b06      	cmp	r3, #6
 8015124:	d108      	bne.n	8015138 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8015126:	693b      	ldr	r3, [r7, #16]
 8015128:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 801512a:	2b04      	cmp	r3, #4
 801512c:	d104      	bne.n	8015138 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 801512e:	693b      	ldr	r3, [r7, #16]
 8015130:	885b      	ldrh	r3, [r3, #2]
 8015132:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8015134:	2b08      	cmp	r3, #8
 8015136:	d003      	beq.n	8015140 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
      ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
      hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 8015138:	6878      	ldr	r0, [r7, #4]
 801513a:	f7f8 fb19 	bl	800d770 <pbuf_free>
    return;
 801513e:	e05a      	b.n	80151f6 <etharp_input+0x10a>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr2 to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR2_COPY(&sipaddr, &hdr->sipaddr);
 8015140:	693b      	ldr	r3, [r7, #16]
 8015142:	330e      	adds	r3, #14
 8015144:	681b      	ldr	r3, [r3, #0]
 8015146:	60fb      	str	r3, [r7, #12]
  IPADDR2_COPY(&dipaddr, &hdr->dipaddr);
 8015148:	693b      	ldr	r3, [r7, #16]
 801514a:	3318      	adds	r3, #24
 801514c:	681b      	ldr	r3, [r3, #0]
 801514e:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8015150:	683b      	ldr	r3, [r7, #0]
 8015152:	3304      	adds	r3, #4
 8015154:	681b      	ldr	r3, [r3, #0]
 8015156:	2b00      	cmp	r3, #0
 8015158:	d102      	bne.n	8015160 <etharp_input+0x74>
    for_us = 0;
 801515a:	2300      	movs	r3, #0
 801515c:	75fb      	strb	r3, [r7, #23]
 801515e:	e009      	b.n	8015174 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 8015160:	68ba      	ldr	r2, [r7, #8]
 8015162:	683b      	ldr	r3, [r7, #0]
 8015164:	3304      	adds	r3, #4
 8015166:	681b      	ldr	r3, [r3, #0]
 8015168:	429a      	cmp	r2, r3
 801516a:	bf0c      	ite	eq
 801516c:	2301      	moveq	r3, #1
 801516e:	2300      	movne	r3, #0
 8015170:	b2db      	uxtb	r3, r3
 8015172:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 8015174:	693b      	ldr	r3, [r7, #16]
 8015176:	f103 0208 	add.w	r2, r3, #8
 801517a:	7dfb      	ldrb	r3, [r7, #23]
 801517c:	2b00      	cmp	r3, #0
 801517e:	d001      	beq.n	8015184 <etharp_input+0x98>
 8015180:	2301      	movs	r3, #1
 8015182:	e000      	b.n	8015186 <etharp_input+0x9a>
 8015184:	2302      	movs	r3, #2
 8015186:	f107 010c 	add.w	r1, r7, #12
 801518a:	6838      	ldr	r0, [r7, #0]
 801518c:	f7ff fed8 	bl	8014f40 <etharp_update_arp_entry>
                   for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 8015190:	693b      	ldr	r3, [r7, #16]
 8015192:	88db      	ldrh	r3, [r3, #6]
 8015194:	b29b      	uxth	r3, r3
 8015196:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801519a:	d003      	beq.n	80151a4 <etharp_input+0xb8>
 801519c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80151a0:	d01e      	beq.n	80151e0 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
    break;
  default:
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
    ETHARP_STATS_INC(etharp.err);
    break;
 80151a2:	e025      	b.n	80151f0 <etharp_input+0x104>
    if (for_us) {
 80151a4:	7dfb      	ldrb	r3, [r7, #23]
 80151a6:	2b00      	cmp	r3, #0
 80151a8:	d021      	beq.n	80151ee <etharp_input+0x102>
                 (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 80151aa:	683b      	ldr	r3, [r7, #0]
 80151ac:	f103 0029 	add.w	r0, r3, #41	; 0x29
 80151b0:	693b      	ldr	r3, [r7, #16]
 80151b2:	f103 0408 	add.w	r4, r3, #8
                 (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 80151b6:	683b      	ldr	r3, [r7, #0]
 80151b8:	f103 0529 	add.w	r5, r3, #41	; 0x29
 80151bc:	683b      	ldr	r3, [r7, #0]
 80151be:	3304      	adds	r3, #4
                 &hdr->shwaddr, &sipaddr,
 80151c0:	693a      	ldr	r2, [r7, #16]
 80151c2:	3208      	adds	r2, #8
      etharp_raw(netif,
 80151c4:	2102      	movs	r1, #2
 80151c6:	9103      	str	r1, [sp, #12]
 80151c8:	f107 010c 	add.w	r1, r7, #12
 80151cc:	9102      	str	r1, [sp, #8]
 80151ce:	9201      	str	r2, [sp, #4]
 80151d0:	9300      	str	r3, [sp, #0]
 80151d2:	462b      	mov	r3, r5
 80151d4:	4622      	mov	r2, r4
 80151d6:	4601      	mov	r1, r0
 80151d8:	6838      	ldr	r0, [r7, #0]
 80151da:	f000 fae7 	bl	80157ac <etharp_raw>
    break;
 80151de:	e006      	b.n	80151ee <etharp_input+0x102>
    dhcp_arp_reply(netif, &sipaddr);
 80151e0:	f107 030c 	add.w	r3, r7, #12
 80151e4:	4619      	mov	r1, r3
 80151e6:	6838      	ldr	r0, [r7, #0]
 80151e8:	f7fe f980 	bl	80134ec <dhcp_arp_reply>
    break;
 80151ec:	e000      	b.n	80151f0 <etharp_input+0x104>
    break;
 80151ee:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 80151f0:	6878      	ldr	r0, [r7, #4]
 80151f2:	f7f8 fabd 	bl	800d770 <pbuf_free>
}
 80151f6:	3718      	adds	r7, #24
 80151f8:	46bd      	mov	sp, r7
 80151fa:	bdb0      	pop	{r4, r5, r7, pc}
 80151fc:	0801a698 	.word	0x0801a698
 8015200:	0801a7e8 	.word	0x0801a7e8
 8015204:	0801a710 	.word	0x0801a710

08015208 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, u8_t arp_idx)
{
 8015208:	b580      	push	{r7, lr}
 801520a:	b086      	sub	sp, #24
 801520c:	af02      	add	r7, sp, #8
 801520e:	60f8      	str	r0, [r7, #12]
 8015210:	60b9      	str	r1, [r7, #8]
 8015212:	4613      	mov	r3, r2
 8015214:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 8015216:	79fa      	ldrb	r2, [r7, #7]
 8015218:	4944      	ldr	r1, [pc, #272]	; (801532c <etharp_output_to_arp_index+0x124>)
 801521a:	4613      	mov	r3, r2
 801521c:	005b      	lsls	r3, r3, #1
 801521e:	4413      	add	r3, r2
 8015220:	00db      	lsls	r3, r3, #3
 8015222:	440b      	add	r3, r1
 8015224:	3314      	adds	r3, #20
 8015226:	781b      	ldrb	r3, [r3, #0]
 8015228:	2b01      	cmp	r3, #1
 801522a:	d806      	bhi.n	801523a <etharp_output_to_arp_index+0x32>
 801522c:	4b40      	ldr	r3, [pc, #256]	; (8015330 <etharp_output_to_arp_index+0x128>)
 801522e:	f240 22ed 	movw	r2, #749	; 0x2ed
 8015232:	4940      	ldr	r1, [pc, #256]	; (8015334 <etharp_output_to_arp_index+0x12c>)
 8015234:	4840      	ldr	r0, [pc, #256]	; (8015338 <etharp_output_to_arp_index+0x130>)
 8015236:	f002 fd69 	bl	8017d0c <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 801523a:	79fa      	ldrb	r2, [r7, #7]
 801523c:	493b      	ldr	r1, [pc, #236]	; (801532c <etharp_output_to_arp_index+0x124>)
 801523e:	4613      	mov	r3, r2
 8015240:	005b      	lsls	r3, r3, #1
 8015242:	4413      	add	r3, r2
 8015244:	00db      	lsls	r3, r3, #3
 8015246:	440b      	add	r3, r1
 8015248:	3314      	adds	r3, #20
 801524a:	781b      	ldrb	r3, [r3, #0]
 801524c:	2b02      	cmp	r3, #2
 801524e:	d153      	bne.n	80152f8 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 8015250:	79fa      	ldrb	r2, [r7, #7]
 8015252:	4936      	ldr	r1, [pc, #216]	; (801532c <etharp_output_to_arp_index+0x124>)
 8015254:	4613      	mov	r3, r2
 8015256:	005b      	lsls	r3, r3, #1
 8015258:	4413      	add	r3, r2
 801525a:	00db      	lsls	r3, r3, #3
 801525c:	440b      	add	r3, r1
 801525e:	3312      	adds	r3, #18
 8015260:	881b      	ldrh	r3, [r3, #0]
 8015262:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 8015266:	d919      	bls.n	801529c <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 8015268:	79fa      	ldrb	r2, [r7, #7]
 801526a:	4613      	mov	r3, r2
 801526c:	005b      	lsls	r3, r3, #1
 801526e:	4413      	add	r3, r2
 8015270:	00db      	lsls	r3, r3, #3
 8015272:	4a2e      	ldr	r2, [pc, #184]	; (801532c <etharp_output_to_arp_index+0x124>)
 8015274:	4413      	add	r3, r2
 8015276:	3304      	adds	r3, #4
 8015278:	4619      	mov	r1, r3
 801527a:	68f8      	ldr	r0, [r7, #12]
 801527c:	f000 fb44 	bl	8015908 <etharp_request>
 8015280:	4603      	mov	r3, r0
 8015282:	2b00      	cmp	r3, #0
 8015284:	d138      	bne.n	80152f8 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8015286:	79fa      	ldrb	r2, [r7, #7]
 8015288:	4928      	ldr	r1, [pc, #160]	; (801532c <etharp_output_to_arp_index+0x124>)
 801528a:	4613      	mov	r3, r2
 801528c:	005b      	lsls	r3, r3, #1
 801528e:	4413      	add	r3, r2
 8015290:	00db      	lsls	r3, r3, #3
 8015292:	440b      	add	r3, r1
 8015294:	3314      	adds	r3, #20
 8015296:	2203      	movs	r2, #3
 8015298:	701a      	strb	r2, [r3, #0]
 801529a:	e02d      	b.n	80152f8 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 801529c:	79fa      	ldrb	r2, [r7, #7]
 801529e:	4923      	ldr	r1, [pc, #140]	; (801532c <etharp_output_to_arp_index+0x124>)
 80152a0:	4613      	mov	r3, r2
 80152a2:	005b      	lsls	r3, r3, #1
 80152a4:	4413      	add	r3, r2
 80152a6:	00db      	lsls	r3, r3, #3
 80152a8:	440b      	add	r3, r1
 80152aa:	3312      	adds	r3, #18
 80152ac:	881b      	ldrh	r3, [r3, #0]
 80152ae:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 80152b2:	d321      	bcc.n	80152f8 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 80152b4:	79fa      	ldrb	r2, [r7, #7]
 80152b6:	4613      	mov	r3, r2
 80152b8:	005b      	lsls	r3, r3, #1
 80152ba:	4413      	add	r3, r2
 80152bc:	00db      	lsls	r3, r3, #3
 80152be:	4a1b      	ldr	r2, [pc, #108]	; (801532c <etharp_output_to_arp_index+0x124>)
 80152c0:	4413      	add	r3, r2
 80152c2:	1d19      	adds	r1, r3, #4
 80152c4:	79fa      	ldrb	r2, [r7, #7]
 80152c6:	4613      	mov	r3, r2
 80152c8:	005b      	lsls	r3, r3, #1
 80152ca:	4413      	add	r3, r2
 80152cc:	00db      	lsls	r3, r3, #3
 80152ce:	3308      	adds	r3, #8
 80152d0:	4a16      	ldr	r2, [pc, #88]	; (801532c <etharp_output_to_arp_index+0x124>)
 80152d2:	4413      	add	r3, r2
 80152d4:	3304      	adds	r3, #4
 80152d6:	461a      	mov	r2, r3
 80152d8:	68f8      	ldr	r0, [r7, #12]
 80152da:	f000 faf3 	bl	80158c4 <etharp_request_dst>
 80152de:	4603      	mov	r3, r0
 80152e0:	2b00      	cmp	r3, #0
 80152e2:	d109      	bne.n	80152f8 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 80152e4:	79fa      	ldrb	r2, [r7, #7]
 80152e6:	4911      	ldr	r1, [pc, #68]	; (801532c <etharp_output_to_arp_index+0x124>)
 80152e8:	4613      	mov	r3, r2
 80152ea:	005b      	lsls	r3, r3, #1
 80152ec:	4413      	add	r3, r2
 80152ee:	00db      	lsls	r3, r3, #3
 80152f0:	440b      	add	r3, r1
 80152f2:	3314      	adds	r3, #20
 80152f4:	2203      	movs	r2, #3
 80152f6:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr*)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 80152f8:	68fb      	ldr	r3, [r7, #12]
 80152fa:	f103 0129 	add.w	r1, r3, #41	; 0x29
 80152fe:	79fa      	ldrb	r2, [r7, #7]
 8015300:	4613      	mov	r3, r2
 8015302:	005b      	lsls	r3, r3, #1
 8015304:	4413      	add	r3, r2
 8015306:	00db      	lsls	r3, r3, #3
 8015308:	3308      	adds	r3, #8
 801530a:	4a08      	ldr	r2, [pc, #32]	; (801532c <etharp_output_to_arp_index+0x124>)
 801530c:	4413      	add	r3, r2
 801530e:	1d1a      	adds	r2, r3, #4
 8015310:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8015314:	9300      	str	r3, [sp, #0]
 8015316:	4613      	mov	r3, r2
 8015318:	460a      	mov	r2, r1
 801531a:	68b9      	ldr	r1, [r7, #8]
 801531c:	68f8      	ldr	r0, [r7, #12]
 801531e:	f001 fdcd 	bl	8016ebc <ethernet_output>
 8015322:	4603      	mov	r3, r0
}
 8015324:	4618      	mov	r0, r3
 8015326:	3710      	adds	r7, #16
 8015328:	46bd      	mov	sp, r7
 801532a:	bd80      	pop	{r7, pc}
 801532c:	20004bbc 	.word	0x20004bbc
 8015330:	0801a698 	.word	0x0801a698
 8015334:	0801a808 	.word	0x0801a808
 8015338:	0801a710 	.word	0x0801a710

0801533c <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 801533c:	b580      	push	{r7, lr}
 801533e:	b08a      	sub	sp, #40	; 0x28
 8015340:	af02      	add	r7, sp, #8
 8015342:	60f8      	str	r0, [r7, #12]
 8015344:	60b9      	str	r1, [r7, #8]
 8015346:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 8015348:	687b      	ldr	r3, [r7, #4]
 801534a:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT("netif != NULL", netif != NULL);
 801534c:	68fb      	ldr	r3, [r7, #12]
 801534e:	2b00      	cmp	r3, #0
 8015350:	d106      	bne.n	8015360 <etharp_output+0x24>
 8015352:	4b69      	ldr	r3, [pc, #420]	; (80154f8 <etharp_output+0x1bc>)
 8015354:	f240 321b 	movw	r2, #795	; 0x31b
 8015358:	4968      	ldr	r1, [pc, #416]	; (80154fc <etharp_output+0x1c0>)
 801535a:	4869      	ldr	r0, [pc, #420]	; (8015500 <etharp_output+0x1c4>)
 801535c:	f002 fcd6 	bl	8017d0c <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 8015360:	68bb      	ldr	r3, [r7, #8]
 8015362:	2b00      	cmp	r3, #0
 8015364:	d106      	bne.n	8015374 <etharp_output+0x38>
 8015366:	4b64      	ldr	r3, [pc, #400]	; (80154f8 <etharp_output+0x1bc>)
 8015368:	f44f 7247 	mov.w	r2, #796	; 0x31c
 801536c:	4965      	ldr	r1, [pc, #404]	; (8015504 <etharp_output+0x1c8>)
 801536e:	4864      	ldr	r0, [pc, #400]	; (8015500 <etharp_output+0x1c4>)
 8015370:	f002 fccc 	bl	8017d0c <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 8015374:	687b      	ldr	r3, [r7, #4]
 8015376:	2b00      	cmp	r3, #0
 8015378:	d106      	bne.n	8015388 <etharp_output+0x4c>
 801537a:	4b5f      	ldr	r3, [pc, #380]	; (80154f8 <etharp_output+0x1bc>)
 801537c:	f240 321d 	movw	r2, #797	; 0x31d
 8015380:	4961      	ldr	r1, [pc, #388]	; (8015508 <etharp_output+0x1cc>)
 8015382:	485f      	ldr	r0, [pc, #380]	; (8015500 <etharp_output+0x1c4>)
 8015384:	f002 fcc2 	bl	8017d0c <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 8015388:	687b      	ldr	r3, [r7, #4]
 801538a:	681b      	ldr	r3, [r3, #0]
 801538c:	68f9      	ldr	r1, [r7, #12]
 801538e:	4618      	mov	r0, r3
 8015390:	f000 fef2 	bl	8016178 <ip4_addr_isbroadcast_u32>
 8015394:	4603      	mov	r3, r0
 8015396:	2b00      	cmp	r3, #0
 8015398:	d002      	beq.n	80153a0 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 801539a:	4b5c      	ldr	r3, [pc, #368]	; (801550c <etharp_output+0x1d0>)
 801539c:	61fb      	str	r3, [r7, #28]
 801539e:	e09b      	b.n	80154d8 <etharp_output+0x19c>
  /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 80153a0:	687b      	ldr	r3, [r7, #4]
 80153a2:	681b      	ldr	r3, [r3, #0]
 80153a4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80153a8:	2be0      	cmp	r3, #224	; 0xe0
 80153aa:	d118      	bne.n	80153de <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 80153ac:	2301      	movs	r3, #1
 80153ae:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 80153b0:	2300      	movs	r3, #0
 80153b2:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 80153b4:	235e      	movs	r3, #94	; 0x5e
 80153b6:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 80153b8:	687b      	ldr	r3, [r7, #4]
 80153ba:	3301      	adds	r3, #1
 80153bc:	781b      	ldrb	r3, [r3, #0]
 80153be:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80153c2:	b2db      	uxtb	r3, r3
 80153c4:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 80153c6:	687b      	ldr	r3, [r7, #4]
 80153c8:	3302      	adds	r3, #2
 80153ca:	781b      	ldrb	r3, [r3, #0]
 80153cc:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 80153ce:	687b      	ldr	r3, [r7, #4]
 80153d0:	3303      	adds	r3, #3
 80153d2:	781b      	ldrb	r3, [r3, #0]
 80153d4:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 80153d6:	f107 0310 	add.w	r3, r7, #16
 80153da:	61fb      	str	r3, [r7, #28]
 80153dc:	e07c      	b.n	80154d8 <etharp_output+0x19c>
  /* unicast destination IP address? */
  } else {
    s8_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 80153de:	687b      	ldr	r3, [r7, #4]
 80153e0:	681a      	ldr	r2, [r3, #0]
 80153e2:	68fb      	ldr	r3, [r7, #12]
 80153e4:	3304      	adds	r3, #4
 80153e6:	681b      	ldr	r3, [r3, #0]
 80153e8:	405a      	eors	r2, r3
 80153ea:	68fb      	ldr	r3, [r7, #12]
 80153ec:	3308      	adds	r3, #8
 80153ee:	681b      	ldr	r3, [r3, #0]
 80153f0:	4013      	ands	r3, r2
 80153f2:	2b00      	cmp	r3, #0
 80153f4:	d012      	beq.n	801541c <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 80153f6:	687b      	ldr	r3, [r7, #4]
 80153f8:	681b      	ldr	r3, [r3, #0]
 80153fa:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 80153fc:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 8015400:	4293      	cmp	r3, r2
 8015402:	d00b      	beq.n	801541c <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 8015404:	68fb      	ldr	r3, [r7, #12]
 8015406:	330c      	adds	r3, #12
 8015408:	681b      	ldr	r3, [r3, #0]
 801540a:	2b00      	cmp	r3, #0
 801540c:	d003      	beq.n	8015416 <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 801540e:	68fb      	ldr	r3, [r7, #12]
 8015410:	330c      	adds	r3, #12
 8015412:	61bb      	str	r3, [r7, #24]
 8015414:	e002      	b.n	801541c <etharp_output+0xe0>
          /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 8015416:	f06f 0303 	mvn.w	r3, #3
 801541a:	e069      	b.n	80154f0 <etharp_output+0x1b4>
    if (netif->addr_hint != NULL) {
      /* per-pcb cached entry was given */
      u8_t etharp_cached_entry = *(netif->addr_hint);
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 801541c:	4b3c      	ldr	r3, [pc, #240]	; (8015510 <etharp_output+0x1d4>)
 801541e:	781b      	ldrb	r3, [r3, #0]
 8015420:	4619      	mov	r1, r3
 8015422:	4a3c      	ldr	r2, [pc, #240]	; (8015514 <etharp_output+0x1d8>)
 8015424:	460b      	mov	r3, r1
 8015426:	005b      	lsls	r3, r3, #1
 8015428:	440b      	add	r3, r1
 801542a:	00db      	lsls	r3, r3, #3
 801542c:	4413      	add	r3, r2
 801542e:	3314      	adds	r3, #20
 8015430:	781b      	ldrb	r3, [r3, #0]
 8015432:	2b01      	cmp	r3, #1
 8015434:	d917      	bls.n	8015466 <etharp_output+0x12a>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 8015436:	69bb      	ldr	r3, [r7, #24]
 8015438:	681a      	ldr	r2, [r3, #0]
 801543a:	4b35      	ldr	r3, [pc, #212]	; (8015510 <etharp_output+0x1d4>)
 801543c:	781b      	ldrb	r3, [r3, #0]
 801543e:	4618      	mov	r0, r3
 8015440:	4934      	ldr	r1, [pc, #208]	; (8015514 <etharp_output+0x1d8>)
 8015442:	4603      	mov	r3, r0
 8015444:	005b      	lsls	r3, r3, #1
 8015446:	4403      	add	r3, r0
 8015448:	00db      	lsls	r3, r3, #3
 801544a:	440b      	add	r3, r1
 801544c:	3304      	adds	r3, #4
 801544e:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8015450:	429a      	cmp	r2, r3
 8015452:	d108      	bne.n	8015466 <etharp_output+0x12a>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 8015454:	4b2e      	ldr	r3, [pc, #184]	; (8015510 <etharp_output+0x1d4>)
 8015456:	781b      	ldrb	r3, [r3, #0]
 8015458:	461a      	mov	r2, r3
 801545a:	68b9      	ldr	r1, [r7, #8]
 801545c:	68f8      	ldr	r0, [r7, #12]
 801545e:	f7ff fed3 	bl	8015208 <etharp_output_to_arp_index>
 8015462:	4603      	mov	r3, r0
 8015464:	e044      	b.n	80154f0 <etharp_output+0x1b4>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8015466:	2300      	movs	r3, #0
 8015468:	75fb      	strb	r3, [r7, #23]
 801546a:	e02a      	b.n	80154c2 <etharp_output+0x186>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 801546c:	f997 2017 	ldrsb.w	r2, [r7, #23]
 8015470:	4928      	ldr	r1, [pc, #160]	; (8015514 <etharp_output+0x1d8>)
 8015472:	4613      	mov	r3, r2
 8015474:	005b      	lsls	r3, r3, #1
 8015476:	4413      	add	r3, r2
 8015478:	00db      	lsls	r3, r3, #3
 801547a:	440b      	add	r3, r1
 801547c:	3314      	adds	r3, #20
 801547e:	781b      	ldrb	r3, [r3, #0]
 8015480:	2b01      	cmp	r3, #1
 8015482:	d918      	bls.n	80154b6 <etharp_output+0x17a>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 8015484:	69bb      	ldr	r3, [r7, #24]
 8015486:	6819      	ldr	r1, [r3, #0]
 8015488:	f997 2017 	ldrsb.w	r2, [r7, #23]
 801548c:	4821      	ldr	r0, [pc, #132]	; (8015514 <etharp_output+0x1d8>)
 801548e:	4613      	mov	r3, r2
 8015490:	005b      	lsls	r3, r3, #1
 8015492:	4413      	add	r3, r2
 8015494:	00db      	lsls	r3, r3, #3
 8015496:	4403      	add	r3, r0
 8015498:	3304      	adds	r3, #4
 801549a:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 801549c:	4299      	cmp	r1, r3
 801549e:	d10a      	bne.n	80154b6 <etharp_output+0x17a>
        /* found an existing, stable entry */
        ETHARP_SET_HINT(netif, i);
 80154a0:	7dfa      	ldrb	r2, [r7, #23]
 80154a2:	4b1b      	ldr	r3, [pc, #108]	; (8015510 <etharp_output+0x1d4>)
 80154a4:	701a      	strb	r2, [r3, #0]
        return etharp_output_to_arp_index(netif, q, i);
 80154a6:	7dfb      	ldrb	r3, [r7, #23]
 80154a8:	461a      	mov	r2, r3
 80154aa:	68b9      	ldr	r1, [r7, #8]
 80154ac:	68f8      	ldr	r0, [r7, #12]
 80154ae:	f7ff feab 	bl	8015208 <etharp_output_to_arp_index>
 80154b2:	4603      	mov	r3, r0
 80154b4:	e01c      	b.n	80154f0 <etharp_output+0x1b4>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 80154b6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80154ba:	b2db      	uxtb	r3, r3
 80154bc:	3301      	adds	r3, #1
 80154be:	b2db      	uxtb	r3, r3
 80154c0:	75fb      	strb	r3, [r7, #23]
 80154c2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80154c6:	2b09      	cmp	r3, #9
 80154c8:	ddd0      	ble.n	801546c <etharp_output+0x130>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 80154ca:	68ba      	ldr	r2, [r7, #8]
 80154cc:	69b9      	ldr	r1, [r7, #24]
 80154ce:	68f8      	ldr	r0, [r7, #12]
 80154d0:	f000 f822 	bl	8015518 <etharp_query>
 80154d4:	4603      	mov	r3, r0
 80154d6:	e00b      	b.n	80154f0 <etharp_output+0x1b4>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr*)(netif->hwaddr), dest, ETHTYPE_IP);
 80154d8:	68fb      	ldr	r3, [r7, #12]
 80154da:	f103 0229 	add.w	r2, r3, #41	; 0x29
 80154de:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80154e2:	9300      	str	r3, [sp, #0]
 80154e4:	69fb      	ldr	r3, [r7, #28]
 80154e6:	68b9      	ldr	r1, [r7, #8]
 80154e8:	68f8      	ldr	r0, [r7, #12]
 80154ea:	f001 fce7 	bl	8016ebc <ethernet_output>
 80154ee:	4603      	mov	r3, r0
}
 80154f0:	4618      	mov	r0, r3
 80154f2:	3720      	adds	r7, #32
 80154f4:	46bd      	mov	sp, r7
 80154f6:	bd80      	pop	{r7, pc}
 80154f8:	0801a698 	.word	0x0801a698
 80154fc:	0801a7e8 	.word	0x0801a7e8
 8015500:	0801a710 	.word	0x0801a710
 8015504:	0801a838 	.word	0x0801a838
 8015508:	0801a7d8 	.word	0x0801a7d8
 801550c:	0801ae9c 	.word	0x0801ae9c
 8015510:	20004cac 	.word	0x20004cac
 8015514:	20004bbc 	.word	0x20004bbc

08015518 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 8015518:	b580      	push	{r7, lr}
 801551a:	b08c      	sub	sp, #48	; 0x30
 801551c:	af02      	add	r7, sp, #8
 801551e:	60f8      	str	r0, [r7, #12]
 8015520:	60b9      	str	r1, [r7, #8]
 8015522:	607a      	str	r2, [r7, #4]
  struct eth_addr * srcaddr = (struct eth_addr *)netif->hwaddr;
 8015524:	68fb      	ldr	r3, [r7, #12]
 8015526:	3329      	adds	r3, #41	; 0x29
 8015528:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 801552a:	23ff      	movs	r3, #255	; 0xff
 801552c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 8015530:	2300      	movs	r3, #0
 8015532:	623b      	str	r3, [r7, #32]
  s8_t i; /* ARP entry index */

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8015534:	68bb      	ldr	r3, [r7, #8]
 8015536:	681b      	ldr	r3, [r3, #0]
 8015538:	68f9      	ldr	r1, [r7, #12]
 801553a:	4618      	mov	r0, r3
 801553c:	f000 fe1c 	bl	8016178 <ip4_addr_isbroadcast_u32>
 8015540:	4603      	mov	r3, r0
 8015542:	2b00      	cmp	r3, #0
 8015544:	d10c      	bne.n	8015560 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8015546:	68bb      	ldr	r3, [r7, #8]
 8015548:	681b      	ldr	r3, [r3, #0]
 801554a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 801554e:	2be0      	cmp	r3, #224	; 0xe0
 8015550:	d006      	beq.n	8015560 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8015552:	68bb      	ldr	r3, [r7, #8]
 8015554:	2b00      	cmp	r3, #0
 8015556:	d003      	beq.n	8015560 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 8015558:	68bb      	ldr	r3, [r7, #8]
 801555a:	681b      	ldr	r3, [r3, #0]
 801555c:	2b00      	cmp	r3, #0
 801555e:	d102      	bne.n	8015566 <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8015560:	f06f 030f 	mvn.w	r3, #15
 8015564:	e10f      	b.n	8015786 <etharp_query+0x26e>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 8015566:	68fa      	ldr	r2, [r7, #12]
 8015568:	2101      	movs	r1, #1
 801556a:	68b8      	ldr	r0, [r7, #8]
 801556c:	f7ff fb9e 	bl	8014cac <etharp_find_entry>
 8015570:	4603      	mov	r3, r0
 8015572:	74fb      	strb	r3, [r7, #19]

  /* could not find or create entry? */
  if (i < 0) {
 8015574:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8015578:	2b00      	cmp	r3, #0
 801557a:	da02      	bge.n	8015582 <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i;
 801557c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8015580:	e101      	b.n	8015786 <etharp_query+0x26e>
  }

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 8015582:	f997 2013 	ldrsb.w	r2, [r7, #19]
 8015586:	4982      	ldr	r1, [pc, #520]	; (8015790 <etharp_query+0x278>)
 8015588:	4613      	mov	r3, r2
 801558a:	005b      	lsls	r3, r3, #1
 801558c:	4413      	add	r3, r2
 801558e:	00db      	lsls	r3, r3, #3
 8015590:	440b      	add	r3, r1
 8015592:	3314      	adds	r3, #20
 8015594:	781b      	ldrb	r3, [r3, #0]
 8015596:	2b00      	cmp	r3, #0
 8015598:	d117      	bne.n	80155ca <etharp_query+0xb2>
    is_new_entry = 1;
 801559a:	2301      	movs	r3, #1
 801559c:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 801559e:	f997 2013 	ldrsb.w	r2, [r7, #19]
 80155a2:	497b      	ldr	r1, [pc, #492]	; (8015790 <etharp_query+0x278>)
 80155a4:	4613      	mov	r3, r2
 80155a6:	005b      	lsls	r3, r3, #1
 80155a8:	4413      	add	r3, r2
 80155aa:	00db      	lsls	r3, r3, #3
 80155ac:	440b      	add	r3, r1
 80155ae:	3314      	adds	r3, #20
 80155b0:	2201      	movs	r2, #1
 80155b2:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 80155b4:	f997 2013 	ldrsb.w	r2, [r7, #19]
 80155b8:	4975      	ldr	r1, [pc, #468]	; (8015790 <etharp_query+0x278>)
 80155ba:	4613      	mov	r3, r2
 80155bc:	005b      	lsls	r3, r3, #1
 80155be:	4413      	add	r3, r2
 80155c0:	00db      	lsls	r3, r3, #3
 80155c2:	440b      	add	r3, r1
 80155c4:	3308      	adds	r3, #8
 80155c6:	68fa      	ldr	r2, [r7, #12]
 80155c8:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 80155ca:	f997 2013 	ldrsb.w	r2, [r7, #19]
 80155ce:	4970      	ldr	r1, [pc, #448]	; (8015790 <etharp_query+0x278>)
 80155d0:	4613      	mov	r3, r2
 80155d2:	005b      	lsls	r3, r3, #1
 80155d4:	4413      	add	r3, r2
 80155d6:	00db      	lsls	r3, r3, #3
 80155d8:	440b      	add	r3, r1
 80155da:	3314      	adds	r3, #20
 80155dc:	781b      	ldrb	r3, [r3, #0]
 80155de:	2b01      	cmp	r3, #1
 80155e0:	d012      	beq.n	8015608 <etharp_query+0xf0>
 80155e2:	f997 2013 	ldrsb.w	r2, [r7, #19]
 80155e6:	496a      	ldr	r1, [pc, #424]	; (8015790 <etharp_query+0x278>)
 80155e8:	4613      	mov	r3, r2
 80155ea:	005b      	lsls	r3, r3, #1
 80155ec:	4413      	add	r3, r2
 80155ee:	00db      	lsls	r3, r3, #3
 80155f0:	440b      	add	r3, r1
 80155f2:	3314      	adds	r3, #20
 80155f4:	781b      	ldrb	r3, [r3, #0]
 80155f6:	2b01      	cmp	r3, #1
 80155f8:	d806      	bhi.n	8015608 <etharp_query+0xf0>
 80155fa:	4b66      	ldr	r3, [pc, #408]	; (8015794 <etharp_query+0x27c>)
 80155fc:	f240 32c9 	movw	r2, #969	; 0x3c9
 8015600:	4965      	ldr	r1, [pc, #404]	; (8015798 <etharp_query+0x280>)
 8015602:	4866      	ldr	r0, [pc, #408]	; (801579c <etharp_query+0x284>)
 8015604:	f002 fb82 	bl	8017d0c <iprintf>
  ((arp_table[i].state == ETHARP_STATE_PENDING) ||
   (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 8015608:	6a3b      	ldr	r3, [r7, #32]
 801560a:	2b00      	cmp	r3, #0
 801560c:	d102      	bne.n	8015614 <etharp_query+0xfc>
 801560e:	687b      	ldr	r3, [r7, #4]
 8015610:	2b00      	cmp	r3, #0
 8015612:	d10c      	bne.n	801562e <etharp_query+0x116>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 8015614:	68b9      	ldr	r1, [r7, #8]
 8015616:	68f8      	ldr	r0, [r7, #12]
 8015618:	f000 f976 	bl	8015908 <etharp_request>
 801561c:	4603      	mov	r3, r0
 801561e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 8015622:	687b      	ldr	r3, [r7, #4]
 8015624:	2b00      	cmp	r3, #0
 8015626:	d102      	bne.n	801562e <etharp_query+0x116>
      return result;
 8015628:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 801562c:	e0ab      	b.n	8015786 <etharp_query+0x26e>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 801562e:	687b      	ldr	r3, [r7, #4]
 8015630:	2b00      	cmp	r3, #0
 8015632:	d106      	bne.n	8015642 <etharp_query+0x12a>
 8015634:	4b57      	ldr	r3, [pc, #348]	; (8015794 <etharp_query+0x27c>)
 8015636:	f240 32db 	movw	r2, #987	; 0x3db
 801563a:	4959      	ldr	r1, [pc, #356]	; (80157a0 <etharp_query+0x288>)
 801563c:	4857      	ldr	r0, [pc, #348]	; (801579c <etharp_query+0x284>)
 801563e:	f002 fb65 	bl	8017d0c <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 8015642:	f997 2013 	ldrsb.w	r2, [r7, #19]
 8015646:	4952      	ldr	r1, [pc, #328]	; (8015790 <etharp_query+0x278>)
 8015648:	4613      	mov	r3, r2
 801564a:	005b      	lsls	r3, r3, #1
 801564c:	4413      	add	r3, r2
 801564e:	00db      	lsls	r3, r3, #3
 8015650:	440b      	add	r3, r1
 8015652:	3314      	adds	r3, #20
 8015654:	781b      	ldrb	r3, [r3, #0]
 8015656:	2b01      	cmp	r3, #1
 8015658:	d919      	bls.n	801568e <etharp_query+0x176>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_HINT(netif, i);
 801565a:	7cfa      	ldrb	r2, [r7, #19]
 801565c:	4b51      	ldr	r3, [pc, #324]	; (80157a4 <etharp_query+0x28c>)
 801565e:	701a      	strb	r2, [r3, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 8015660:	f997 2013 	ldrsb.w	r2, [r7, #19]
 8015664:	4613      	mov	r3, r2
 8015666:	005b      	lsls	r3, r3, #1
 8015668:	4413      	add	r3, r2
 801566a:	00db      	lsls	r3, r3, #3
 801566c:	3308      	adds	r3, #8
 801566e:	4a48      	ldr	r2, [pc, #288]	; (8015790 <etharp_query+0x278>)
 8015670:	4413      	add	r3, r2
 8015672:	1d1a      	adds	r2, r3, #4
 8015674:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8015678:	9300      	str	r3, [sp, #0]
 801567a:	4613      	mov	r3, r2
 801567c:	697a      	ldr	r2, [r7, #20]
 801567e:	6879      	ldr	r1, [r7, #4]
 8015680:	68f8      	ldr	r0, [r7, #12]
 8015682:	f001 fc1b 	bl	8016ebc <ethernet_output>
 8015686:	4603      	mov	r3, r0
 8015688:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801568c:	e079      	b.n	8015782 <etharp_query+0x26a>
  /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 801568e:	f997 2013 	ldrsb.w	r2, [r7, #19]
 8015692:	493f      	ldr	r1, [pc, #252]	; (8015790 <etharp_query+0x278>)
 8015694:	4613      	mov	r3, r2
 8015696:	005b      	lsls	r3, r3, #1
 8015698:	4413      	add	r3, r2
 801569a:	00db      	lsls	r3, r3, #3
 801569c:	440b      	add	r3, r1
 801569e:	3314      	adds	r3, #20
 80156a0:	781b      	ldrb	r3, [r3, #0]
 80156a2:	2b01      	cmp	r3, #1
 80156a4:	d16d      	bne.n	8015782 <etharp_query+0x26a>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 80156a6:	2300      	movs	r3, #0
 80156a8:	61bb      	str	r3, [r7, #24]
    /* IF q includes a PBUF_REF, PBUF_POOL or PBUF_RAM, we have no choice but
     * to copy the whole queue into a new PBUF_RAM (see bug #11400)
     * PBUF_ROMs can be left as they are, since ROM must not get changed. */
    p = q;
 80156aa:	687b      	ldr	r3, [r7, #4]
 80156ac:	61fb      	str	r3, [r7, #28]
    while (p) {
 80156ae:	e01a      	b.n	80156e6 <etharp_query+0x1ce>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 80156b0:	69fb      	ldr	r3, [r7, #28]
 80156b2:	895a      	ldrh	r2, [r3, #10]
 80156b4:	69fb      	ldr	r3, [r7, #28]
 80156b6:	891b      	ldrh	r3, [r3, #8]
 80156b8:	429a      	cmp	r2, r3
 80156ba:	d10a      	bne.n	80156d2 <etharp_query+0x1ba>
 80156bc:	69fb      	ldr	r3, [r7, #28]
 80156be:	681b      	ldr	r3, [r3, #0]
 80156c0:	2b00      	cmp	r3, #0
 80156c2:	d006      	beq.n	80156d2 <etharp_query+0x1ba>
 80156c4:	4b33      	ldr	r3, [pc, #204]	; (8015794 <etharp_query+0x27c>)
 80156c6:	f44f 727b 	mov.w	r2, #1004	; 0x3ec
 80156ca:	4937      	ldr	r1, [pc, #220]	; (80157a8 <etharp_query+0x290>)
 80156cc:	4833      	ldr	r0, [pc, #204]	; (801579c <etharp_query+0x284>)
 80156ce:	f002 fb1d 	bl	8017d0c <iprintf>
      if (p->type != PBUF_ROM) {
 80156d2:	69fb      	ldr	r3, [r7, #28]
 80156d4:	7b1b      	ldrb	r3, [r3, #12]
 80156d6:	2b01      	cmp	r3, #1
 80156d8:	d002      	beq.n	80156e0 <etharp_query+0x1c8>
        copy_needed = 1;
 80156da:	2301      	movs	r3, #1
 80156dc:	61bb      	str	r3, [r7, #24]
        break;
 80156de:	e005      	b.n	80156ec <etharp_query+0x1d4>
      }
      p = p->next;
 80156e0:	69fb      	ldr	r3, [r7, #28]
 80156e2:	681b      	ldr	r3, [r3, #0]
 80156e4:	61fb      	str	r3, [r7, #28]
    while (p) {
 80156e6:	69fb      	ldr	r3, [r7, #28]
 80156e8:	2b00      	cmp	r3, #0
 80156ea:	d1e1      	bne.n	80156b0 <etharp_query+0x198>
    }
    if (copy_needed) {
 80156ec:	69bb      	ldr	r3, [r7, #24]
 80156ee:	2b00      	cmp	r3, #0
 80156f0:	d017      	beq.n	8015722 <etharp_query+0x20a>
      /* copy the whole packet into new pbufs */
      p = pbuf_alloc(PBUF_LINK, p->tot_len, PBUF_RAM);
 80156f2:	69fb      	ldr	r3, [r7, #28]
 80156f4:	891b      	ldrh	r3, [r3, #8]
 80156f6:	2200      	movs	r2, #0
 80156f8:	4619      	mov	r1, r3
 80156fa:	2002      	movs	r0, #2
 80156fc:	f7f7 fcc6 	bl	800d08c <pbuf_alloc>
 8015700:	61f8      	str	r0, [r7, #28]
      if (p != NULL) {
 8015702:	69fb      	ldr	r3, [r7, #28]
 8015704:	2b00      	cmp	r3, #0
 8015706:	d011      	beq.n	801572c <etharp_query+0x214>
        if (pbuf_copy(p, q) != ERR_OK) {
 8015708:	6879      	ldr	r1, [r7, #4]
 801570a:	69f8      	ldr	r0, [r7, #28]
 801570c:	f7f8 f970 	bl	800d9f0 <pbuf_copy>
 8015710:	4603      	mov	r3, r0
 8015712:	2b00      	cmp	r3, #0
 8015714:	d00a      	beq.n	801572c <etharp_query+0x214>
          pbuf_free(p);
 8015716:	69f8      	ldr	r0, [r7, #28]
 8015718:	f7f8 f82a 	bl	800d770 <pbuf_free>
          p = NULL;
 801571c:	2300      	movs	r3, #0
 801571e:	61fb      	str	r3, [r7, #28]
 8015720:	e004      	b.n	801572c <etharp_query+0x214>
        }
      }
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 8015722:	687b      	ldr	r3, [r7, #4]
 8015724:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 8015726:	69f8      	ldr	r0, [r7, #28]
 8015728:	f7f8 f8d4 	bl	800d8d4 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 801572c:	69fb      	ldr	r3, [r7, #28]
 801572e:	2b00      	cmp	r3, #0
 8015730:	d024      	beq.n	801577c <etharp_query+0x264>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 8015732:	f997 2013 	ldrsb.w	r2, [r7, #19]
 8015736:	4916      	ldr	r1, [pc, #88]	; (8015790 <etharp_query+0x278>)
 8015738:	4613      	mov	r3, r2
 801573a:	005b      	lsls	r3, r3, #1
 801573c:	4413      	add	r3, r2
 801573e:	00db      	lsls	r3, r3, #3
 8015740:	440b      	add	r3, r1
 8015742:	681b      	ldr	r3, [r3, #0]
 8015744:	2b00      	cmp	r3, #0
 8015746:	d00b      	beq.n	8015760 <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"S16_F"\n", (void *)q, (s16_t)i));
        pbuf_free(arp_table[i].q);
 8015748:	f997 2013 	ldrsb.w	r2, [r7, #19]
 801574c:	4910      	ldr	r1, [pc, #64]	; (8015790 <etharp_query+0x278>)
 801574e:	4613      	mov	r3, r2
 8015750:	005b      	lsls	r3, r3, #1
 8015752:	4413      	add	r3, r2
 8015754:	00db      	lsls	r3, r3, #3
 8015756:	440b      	add	r3, r1
 8015758:	681b      	ldr	r3, [r3, #0]
 801575a:	4618      	mov	r0, r3
 801575c:	f7f8 f808 	bl	800d770 <pbuf_free>
      }
      arp_table[i].q = p;
 8015760:	f997 2013 	ldrsb.w	r2, [r7, #19]
 8015764:	490a      	ldr	r1, [pc, #40]	; (8015790 <etharp_query+0x278>)
 8015766:	4613      	mov	r3, r2
 8015768:	005b      	lsls	r3, r3, #1
 801576a:	4413      	add	r3, r2
 801576c:	00db      	lsls	r3, r3, #3
 801576e:	440b      	add	r3, r1
 8015770:	69fa      	ldr	r2, [r7, #28]
 8015772:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 8015774:	2300      	movs	r3, #0
 8015776:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801577a:	e002      	b.n	8015782 <etharp_query+0x26a>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"S16_F"\n", (void *)q, (s16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 801577c:	23ff      	movs	r3, #255	; 0xff
 801577e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 8015782:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8015786:	4618      	mov	r0, r3
 8015788:	3728      	adds	r7, #40	; 0x28
 801578a:	46bd      	mov	sp, r7
 801578c:	bd80      	pop	{r7, pc}
 801578e:	bf00      	nop
 8015790:	20004bbc 	.word	0x20004bbc
 8015794:	0801a698 	.word	0x0801a698
 8015798:	0801a844 	.word	0x0801a844
 801579c:	0801a710 	.word	0x0801a710
 80157a0:	0801a838 	.word	0x0801a838
 80157a4:	20004cac 	.word	0x20004cac
 80157a8:	0801a86c 	.word	0x0801a86c

080157ac <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 80157ac:	b580      	push	{r7, lr}
 80157ae:	b08a      	sub	sp, #40	; 0x28
 80157b0:	af02      	add	r7, sp, #8
 80157b2:	60f8      	str	r0, [r7, #12]
 80157b4:	60b9      	str	r1, [r7, #8]
 80157b6:	607a      	str	r2, [r7, #4]
 80157b8:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 80157ba:	2300      	movs	r3, #0
 80157bc:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 80157be:	68fb      	ldr	r3, [r7, #12]
 80157c0:	2b00      	cmp	r3, #0
 80157c2:	d106      	bne.n	80157d2 <etharp_raw+0x26>
 80157c4:	4b3a      	ldr	r3, [pc, #232]	; (80158b0 <etharp_raw+0x104>)
 80157c6:	f44f 628b 	mov.w	r2, #1112	; 0x458
 80157ca:	493a      	ldr	r1, [pc, #232]	; (80158b4 <etharp_raw+0x108>)
 80157cc:	483a      	ldr	r0, [pc, #232]	; (80158b8 <etharp_raw+0x10c>)
 80157ce:	f002 fa9d 	bl	8017d0c <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 80157d2:	2200      	movs	r2, #0
 80157d4:	211c      	movs	r1, #28
 80157d6:	2002      	movs	r0, #2
 80157d8:	f7f7 fc58 	bl	800d08c <pbuf_alloc>
 80157dc:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 80157de:	69bb      	ldr	r3, [r7, #24]
 80157e0:	2b00      	cmp	r3, #0
 80157e2:	d102      	bne.n	80157ea <etharp_raw+0x3e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
      ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 80157e4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80157e8:	e05d      	b.n	80158a6 <etharp_raw+0xfa>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 80157ea:	69bb      	ldr	r3, [r7, #24]
 80157ec:	895b      	ldrh	r3, [r3, #10]
 80157ee:	2b1b      	cmp	r3, #27
 80157f0:	d806      	bhi.n	8015800 <etharp_raw+0x54>
 80157f2:	4b2f      	ldr	r3, [pc, #188]	; (80158b0 <etharp_raw+0x104>)
 80157f4:	f240 4264 	movw	r2, #1124	; 0x464
 80157f8:	4930      	ldr	r1, [pc, #192]	; (80158bc <etharp_raw+0x110>)
 80157fa:	482f      	ldr	r0, [pc, #188]	; (80158b8 <etharp_raw+0x10c>)
 80157fc:	f002 fa86 	bl	8017d0c <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 8015800:	69bb      	ldr	r3, [r7, #24]
 8015802:	685b      	ldr	r3, [r3, #4]
 8015804:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 8015806:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8015808:	4618      	mov	r0, r3
 801580a:	f7f6 fe0f 	bl	800c42c <lwip_htons>
 801580e:	4603      	mov	r3, r0
 8015810:	461a      	mov	r2, r3
 8015812:	697b      	ldr	r3, [r7, #20]
 8015814:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 8015816:	68fb      	ldr	r3, [r7, #12]
 8015818:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801581c:	2b06      	cmp	r3, #6
 801581e:	d006      	beq.n	801582e <etharp_raw+0x82>
 8015820:	4b23      	ldr	r3, [pc, #140]	; (80158b0 <etharp_raw+0x104>)
 8015822:	f240 426b 	movw	r2, #1131	; 0x46b
 8015826:	4926      	ldr	r1, [pc, #152]	; (80158c0 <etharp_raw+0x114>)
 8015828:	4823      	ldr	r0, [pc, #140]	; (80158b8 <etharp_raw+0x10c>)
 801582a:	f002 fa6f 	bl	8017d0c <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  ETHADDR16_COPY(&hdr->shwaddr, hwsrc_addr);
 801582e:	697b      	ldr	r3, [r7, #20]
 8015830:	3308      	adds	r3, #8
 8015832:	2206      	movs	r2, #6
 8015834:	6839      	ldr	r1, [r7, #0]
 8015836:	4618      	mov	r0, r3
 8015838:	f002 f9ad 	bl	8017b96 <memcpy>
  ETHADDR16_COPY(&hdr->dhwaddr, hwdst_addr);
 801583c:	697b      	ldr	r3, [r7, #20]
 801583e:	3312      	adds	r3, #18
 8015840:	2206      	movs	r2, #6
 8015842:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8015844:	4618      	mov	r0, r3
 8015846:	f002 f9a6 	bl	8017b96 <memcpy>
  /* Copy struct ip4_addr2 to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR2_COPY(&hdr->sipaddr, ipsrc_addr);
 801584a:	697b      	ldr	r3, [r7, #20]
 801584c:	330e      	adds	r3, #14
 801584e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8015850:	6812      	ldr	r2, [r2, #0]
 8015852:	601a      	str	r2, [r3, #0]
  IPADDR2_COPY(&hdr->dipaddr, ipdst_addr);
 8015854:	697b      	ldr	r3, [r7, #20]
 8015856:	3318      	adds	r3, #24
 8015858:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801585a:	6812      	ldr	r2, [r2, #0]
 801585c:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(HWTYPE_ETHERNET);
 801585e:	697b      	ldr	r3, [r7, #20]
 8015860:	2200      	movs	r2, #0
 8015862:	701a      	strb	r2, [r3, #0]
 8015864:	2200      	movs	r2, #0
 8015866:	f042 0201 	orr.w	r2, r2, #1
 801586a:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 801586c:	697b      	ldr	r3, [r7, #20]
 801586e:	2200      	movs	r2, #0
 8015870:	f042 0208 	orr.w	r2, r2, #8
 8015874:	709a      	strb	r2, [r3, #2]
 8015876:	2200      	movs	r2, #0
 8015878:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 801587a:	697b      	ldr	r3, [r7, #20]
 801587c:	2206      	movs	r2, #6
 801587e:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 8015880:	697b      	ldr	r3, [r7, #20]
 8015882:	2204      	movs	r2, #4
 8015884:	715a      	strb	r2, [r3, #5]
  if(ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 8015886:	f640 0306 	movw	r3, #2054	; 0x806
 801588a:	9300      	str	r3, [sp, #0]
 801588c:	687b      	ldr	r3, [r7, #4]
 801588e:	68ba      	ldr	r2, [r7, #8]
 8015890:	69b9      	ldr	r1, [r7, #24]
 8015892:	68f8      	ldr	r0, [r7, #12]
 8015894:	f001 fb12 	bl	8016ebc <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 8015898:	69b8      	ldr	r0, [r7, #24]
 801589a:	f7f7 ff69 	bl	800d770 <pbuf_free>
  p = NULL;
 801589e:	2300      	movs	r3, #0
 80158a0:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 80158a2:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 80158a6:	4618      	mov	r0, r3
 80158a8:	3720      	adds	r7, #32
 80158aa:	46bd      	mov	sp, r7
 80158ac:	bd80      	pop	{r7, pc}
 80158ae:	bf00      	nop
 80158b0:	0801a698 	.word	0x0801a698
 80158b4:	0801a7e8 	.word	0x0801a7e8
 80158b8:	0801a710 	.word	0x0801a710
 80158bc:	0801a888 	.word	0x0801a888
 80158c0:	0801a8bc 	.word	0x0801a8bc

080158c4 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr* hw_dst_addr)
{
 80158c4:	b580      	push	{r7, lr}
 80158c6:	b088      	sub	sp, #32
 80158c8:	af04      	add	r7, sp, #16
 80158ca:	60f8      	str	r0, [r7, #12]
 80158cc:	60b9      	str	r1, [r7, #8]
 80158ce:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 80158d0:	68fb      	ldr	r3, [r7, #12]
 80158d2:	f103 0129 	add.w	r1, r3, #41	; 0x29
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 80158d6:	68fb      	ldr	r3, [r7, #12]
 80158d8:	f103 0029 	add.w	r0, r3, #41	; 0x29
 80158dc:	68fb      	ldr	r3, [r7, #12]
 80158de:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 80158e0:	2201      	movs	r2, #1
 80158e2:	9203      	str	r2, [sp, #12]
 80158e4:	68ba      	ldr	r2, [r7, #8]
 80158e6:	9202      	str	r2, [sp, #8]
 80158e8:	4a06      	ldr	r2, [pc, #24]	; (8015904 <etharp_request_dst+0x40>)
 80158ea:	9201      	str	r2, [sp, #4]
 80158ec:	9300      	str	r3, [sp, #0]
 80158ee:	4603      	mov	r3, r0
 80158f0:	687a      	ldr	r2, [r7, #4]
 80158f2:	68f8      	ldr	r0, [r7, #12]
 80158f4:	f7ff ff5a 	bl	80157ac <etharp_raw>
 80158f8:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 80158fa:	4618      	mov	r0, r3
 80158fc:	3710      	adds	r7, #16
 80158fe:	46bd      	mov	sp, r7
 8015900:	bd80      	pop	{r7, pc}
 8015902:	bf00      	nop
 8015904:	0801aea4 	.word	0x0801aea4

08015908 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 8015908:	b580      	push	{r7, lr}
 801590a:	b082      	sub	sp, #8
 801590c:	af00      	add	r7, sp, #0
 801590e:	6078      	str	r0, [r7, #4]
 8015910:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 8015912:	4a05      	ldr	r2, [pc, #20]	; (8015928 <etharp_request+0x20>)
 8015914:	6839      	ldr	r1, [r7, #0]
 8015916:	6878      	ldr	r0, [r7, #4]
 8015918:	f7ff ffd4 	bl	80158c4 <etharp_request_dst>
 801591c:	4603      	mov	r3, r0
}
 801591e:	4618      	mov	r0, r3
 8015920:	3708      	adds	r7, #8
 8015922:	46bd      	mov	sp, r7
 8015924:	bd80      	pop	{r7, pc}
 8015926:	bf00      	nop
 8015928:	0801ae9c 	.word	0x0801ae9c

0801592c <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 801592c:	b580      	push	{r7, lr}
 801592e:	b08e      	sub	sp, #56	; 0x38
 8015930:	af04      	add	r7, sp, #16
 8015932:	6078      	str	r0, [r7, #4]
 8015934:	6039      	str	r1, [r7, #0]
  const ip4_addr_t* src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 8015936:	4b7a      	ldr	r3, [pc, #488]	; (8015b20 <icmp_input+0x1f4>)
 8015938:	689b      	ldr	r3, [r3, #8]
 801593a:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL(iphdr_in) * 4;
 801593c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801593e:	781b      	ldrb	r3, [r3, #0]
 8015940:	b29b      	uxth	r3, r3
 8015942:	f003 030f 	and.w	r3, r3, #15
 8015946:	b29b      	uxth	r3, r3
 8015948:	009b      	lsls	r3, r3, #2
 801594a:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 801594c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801594e:	2b13      	cmp	r3, #19
 8015950:	f240 80d1 	bls.w	8015af6 <icmp_input+0x1ca>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t)*2) {
 8015954:	687b      	ldr	r3, [r7, #4]
 8015956:	895b      	ldrh	r3, [r3, #10]
 8015958:	2b03      	cmp	r3, #3
 801595a:	f240 80ce 	bls.w	8015afa <icmp_input+0x1ce>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 801595e:	687b      	ldr	r3, [r7, #4]
 8015960:	685b      	ldr	r3, [r3, #4]
 8015962:	781b      	ldrb	r3, [r3, #0]
 8015964:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload)+1);
#endif /* LWIP_DEBUG */
  switch (type) {
 8015968:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 801596c:	2b00      	cmp	r3, #0
 801596e:	f000 80bb 	beq.w	8015ae8 <icmp_input+0x1bc>
 8015972:	2b08      	cmp	r3, #8
 8015974:	f040 80bb 	bne.w	8015aee <icmp_input+0x1c2>
       (as obviously, an echo request has been sent, too). */
    MIB2_STATS_INC(mib2.icmpinechoreps);
    break;
  case ICMP_ECHO:
    MIB2_STATS_INC(mib2.icmpinechos);
    src = ip4_current_dest_addr();
 8015978:	4b6a      	ldr	r3, [pc, #424]	; (8015b24 <icmp_input+0x1f8>)
 801597a:	61fb      	str	r3, [r7, #28]
    /* multicast destination address? */
    if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 801597c:	4b68      	ldr	r3, [pc, #416]	; (8015b20 <icmp_input+0x1f4>)
 801597e:	695b      	ldr	r3, [r3, #20]
 8015980:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8015984:	2be0      	cmp	r3, #224	; 0xe0
 8015986:	f000 80bf 	beq.w	8015b08 <icmp_input+0x1dc>
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
      goto icmperr;
#endif /* LWIP_MULTICAST_PING */
    }
    /* broadcast destination address? */
    if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 801598a:	4b65      	ldr	r3, [pc, #404]	; (8015b20 <icmp_input+0x1f4>)
 801598c:	695a      	ldr	r2, [r3, #20]
 801598e:	4b64      	ldr	r3, [pc, #400]	; (8015b20 <icmp_input+0x1f4>)
 8015990:	681b      	ldr	r3, [r3, #0]
 8015992:	4619      	mov	r1, r3
 8015994:	4610      	mov	r0, r2
 8015996:	f000 fbef 	bl	8016178 <ip4_addr_isbroadcast_u32>
 801599a:	4603      	mov	r3, r0
 801599c:	2b00      	cmp	r3, #0
 801599e:	f040 80b5 	bne.w	8015b0c <icmp_input+0x1e0>
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
      goto icmperr;
#endif /* LWIP_BROADCAST_PING */
    }
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
    if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 80159a2:	687b      	ldr	r3, [r7, #4]
 80159a4:	891b      	ldrh	r3, [r3, #8]
 80159a6:	2b07      	cmp	r3, #7
 80159a8:	f240 80a9 	bls.w	8015afe <icmp_input+0x1d2>
        return;
      }
    }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
    if (pbuf_header(p, (s16_t)(hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN))) {
 80159ac:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80159ae:	330e      	adds	r3, #14
 80159b0:	b29b      	uxth	r3, r3
 80159b2:	b21b      	sxth	r3, r3
 80159b4:	4619      	mov	r1, r3
 80159b6:	6878      	ldr	r0, [r7, #4]
 80159b8:	f7f7 feb6 	bl	800d728 <pbuf_header>
 80159bc:	4603      	mov	r3, r0
 80159be:	2b00      	cmp	r3, #0
 80159c0:	d046      	beq.n	8015a50 <icmp_input+0x124>
      /* p is not big enough to contain link headers
       * allocate a new one and copy p into it
       */
      struct pbuf *r;
      /* allocate new packet buffer with space for link headers */
      r = pbuf_alloc(PBUF_LINK, p->tot_len + hlen, PBUF_RAM);
 80159c2:	687b      	ldr	r3, [r7, #4]
 80159c4:	891a      	ldrh	r2, [r3, #8]
 80159c6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80159c8:	4413      	add	r3, r2
 80159ca:	b29b      	uxth	r3, r3
 80159cc:	2200      	movs	r2, #0
 80159ce:	4619      	mov	r1, r3
 80159d0:	2002      	movs	r0, #2
 80159d2:	f7f7 fb5b 	bl	800d08c <pbuf_alloc>
 80159d6:	61b8      	str	r0, [r7, #24]
      if (r == NULL) {
 80159d8:	69bb      	ldr	r3, [r7, #24]
 80159da:	2b00      	cmp	r3, #0
 80159dc:	f000 8098 	beq.w	8015b10 <icmp_input+0x1e4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
        goto icmperr;
      }
      if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 80159e0:	69bb      	ldr	r3, [r7, #24]
 80159e2:	895b      	ldrh	r3, [r3, #10]
 80159e4:	461a      	mov	r2, r3
 80159e6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80159e8:	3308      	adds	r3, #8
 80159ea:	429a      	cmp	r2, r3
 80159ec:	d203      	bcs.n	80159f6 <icmp_input+0xca>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
        pbuf_free(r);
 80159ee:	69b8      	ldr	r0, [r7, #24]
 80159f0:	f7f7 febe 	bl	800d770 <pbuf_free>
        goto icmperr;
 80159f4:	e08d      	b.n	8015b12 <icmp_input+0x1e6>
      }
      /* copy the ip header */
      MEMCPY(r->payload, iphdr_in, hlen);
 80159f6:	69bb      	ldr	r3, [r7, #24]
 80159f8:	685b      	ldr	r3, [r3, #4]
 80159fa:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 80159fc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80159fe:	4618      	mov	r0, r3
 8015a00:	f002 f8c9 	bl	8017b96 <memcpy>
      /* switch r->payload back to icmp header (cannot fail) */
      if (pbuf_header(r, (s16_t)-hlen)) {
 8015a04:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8015a06:	425b      	negs	r3, r3
 8015a08:	b29b      	uxth	r3, r3
 8015a0a:	b21b      	sxth	r3, r3
 8015a0c:	4619      	mov	r1, r3
 8015a0e:	69b8      	ldr	r0, [r7, #24]
 8015a10:	f7f7 fe8a 	bl	800d728 <pbuf_header>
 8015a14:	4603      	mov	r3, r0
 8015a16:	2b00      	cmp	r3, #0
 8015a18:	d009      	beq.n	8015a2e <icmp_input+0x102>
        LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 8015a1a:	4b43      	ldr	r3, [pc, #268]	; (8015b28 <icmp_input+0x1fc>)
 8015a1c:	22af      	movs	r2, #175	; 0xaf
 8015a1e:	4943      	ldr	r1, [pc, #268]	; (8015b2c <icmp_input+0x200>)
 8015a20:	4843      	ldr	r0, [pc, #268]	; (8015b30 <icmp_input+0x204>)
 8015a22:	f002 f973 	bl	8017d0c <iprintf>
        pbuf_free(r);
 8015a26:	69b8      	ldr	r0, [r7, #24]
 8015a28:	f7f7 fea2 	bl	800d770 <pbuf_free>
        goto icmperr;
 8015a2c:	e071      	b.n	8015b12 <icmp_input+0x1e6>
      }
      /* copy the rest of the packet without ip header */
      if (pbuf_copy(r, p) != ERR_OK) {
 8015a2e:	6879      	ldr	r1, [r7, #4]
 8015a30:	69b8      	ldr	r0, [r7, #24]
 8015a32:	f7f7 ffdd 	bl	800d9f0 <pbuf_copy>
 8015a36:	4603      	mov	r3, r0
 8015a38:	2b00      	cmp	r3, #0
 8015a3a:	d003      	beq.n	8015a44 <icmp_input+0x118>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
        pbuf_free(r);
 8015a3c:	69b8      	ldr	r0, [r7, #24]
 8015a3e:	f7f7 fe97 	bl	800d770 <pbuf_free>
        goto icmperr;
 8015a42:	e066      	b.n	8015b12 <icmp_input+0x1e6>
      }
      /* free the original p */
      pbuf_free(p);
 8015a44:	6878      	ldr	r0, [r7, #4]
 8015a46:	f7f7 fe93 	bl	800d770 <pbuf_free>
      /* we now have an identical copy of p that has room for link headers */
      p = r;
 8015a4a:	69bb      	ldr	r3, [r7, #24]
 8015a4c:	607b      	str	r3, [r7, #4]
 8015a4e:	e015      	b.n	8015a7c <icmp_input+0x150>
    } else {
      /* restore p->payload to point to icmp header (cannot fail) */
      if (pbuf_header(p, -(s16_t)(hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN))) {
 8015a50:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8015a52:	f1c3 23ff 	rsb	r3, r3, #4278255360	; 0xff00ff00
 8015a56:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
 8015a5a:	33f2      	adds	r3, #242	; 0xf2
 8015a5c:	b29b      	uxth	r3, r3
 8015a5e:	b21b      	sxth	r3, r3
 8015a60:	4619      	mov	r1, r3
 8015a62:	6878      	ldr	r0, [r7, #4]
 8015a64:	f7f7 fe60 	bl	800d728 <pbuf_header>
 8015a68:	4603      	mov	r3, r0
 8015a6a:	2b00      	cmp	r3, #0
 8015a6c:	d006      	beq.n	8015a7c <icmp_input+0x150>
        LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 8015a6e:	4b2e      	ldr	r3, [pc, #184]	; (8015b28 <icmp_input+0x1fc>)
 8015a70:	22c0      	movs	r2, #192	; 0xc0
 8015a72:	4930      	ldr	r1, [pc, #192]	; (8015b34 <icmp_input+0x208>)
 8015a74:	482e      	ldr	r0, [pc, #184]	; (8015b30 <icmp_input+0x204>)
 8015a76:	f002 f949 	bl	8017d0c <iprintf>
        goto icmperr;
 8015a7a:	e04a      	b.n	8015b12 <icmp_input+0x1e6>
    }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
    /* At this point, all checks are OK. */
    /* We generate an answer by switching the dest and src ip addresses,
     * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
    iecho = (struct icmp_echo_hdr *)p->payload;
 8015a7c:	687b      	ldr	r3, [r7, #4]
 8015a7e:	685b      	ldr	r3, [r3, #4]
 8015a80:	617b      	str	r3, [r7, #20]
    if (pbuf_header(p, (s16_t)hlen)) {
 8015a82:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8015a86:	4619      	mov	r1, r3
 8015a88:	6878      	ldr	r0, [r7, #4]
 8015a8a:	f7f7 fe4d 	bl	800d728 <pbuf_header>
 8015a8e:	4603      	mov	r3, r0
 8015a90:	2b00      	cmp	r3, #0
 8015a92:	d12b      	bne.n	8015aec <icmp_input+0x1c0>
      LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
    } else {
      err_t ret;
      struct ip_hdr *iphdr = (struct ip_hdr*)p->payload;
 8015a94:	687b      	ldr	r3, [r7, #4]
 8015a96:	685b      	ldr	r3, [r3, #4]
 8015a98:	613b      	str	r3, [r7, #16]
      ip4_addr_copy(iphdr->src, *src);
 8015a9a:	69fb      	ldr	r3, [r7, #28]
 8015a9c:	681a      	ldr	r2, [r3, #0]
 8015a9e:	693b      	ldr	r3, [r7, #16]
 8015aa0:	60da      	str	r2, [r3, #12]
      ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 8015aa2:	4b1f      	ldr	r3, [pc, #124]	; (8015b20 <icmp_input+0x1f4>)
 8015aa4:	691a      	ldr	r2, [r3, #16]
 8015aa6:	693b      	ldr	r3, [r7, #16]
 8015aa8:	611a      	str	r2, [r3, #16]
      ICMPH_TYPE_SET(iecho, ICMP_ER);
 8015aaa:	697b      	ldr	r3, [r7, #20]
 8015aac:	2200      	movs	r2, #0
 8015aae:	701a      	strb	r2, [r3, #0]
      else {
        iecho->chksum = 0;
      }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
      iecho->chksum = 0;
 8015ab0:	697b      	ldr	r3, [r7, #20]
 8015ab2:	2200      	movs	r2, #0
 8015ab4:	709a      	strb	r2, [r3, #2]
 8015ab6:	2200      	movs	r2, #0
 8015ab8:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

      /* Set the correct TTL and recalculate the header checksum. */
      IPH_TTL_SET(iphdr, ICMP_TTL);
 8015aba:	693b      	ldr	r3, [r7, #16]
 8015abc:	22ff      	movs	r2, #255	; 0xff
 8015abe:	721a      	strb	r2, [r3, #8]
      IPH_CHKSUM_SET(iphdr, 0);
 8015ac0:	693b      	ldr	r3, [r7, #16]
 8015ac2:	2200      	movs	r2, #0
 8015ac4:	729a      	strb	r2, [r3, #10]
 8015ac6:	2200      	movs	r2, #0
 8015ac8:	72da      	strb	r2, [r3, #11]
      MIB2_STATS_INC(mib2.icmpoutmsgs);
      /* increase number of echo replies attempted to send */
      MIB2_STATS_INC(mib2.icmpoutechoreps);

      /* send an ICMP packet */
      ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 8015aca:	683b      	ldr	r3, [r7, #0]
 8015acc:	9302      	str	r3, [sp, #8]
 8015ace:	2301      	movs	r3, #1
 8015ad0:	9301      	str	r3, [sp, #4]
 8015ad2:	2300      	movs	r3, #0
 8015ad4:	9300      	str	r3, [sp, #0]
 8015ad6:	23ff      	movs	r3, #255	; 0xff
 8015ad8:	2200      	movs	r2, #0
 8015ada:	69f9      	ldr	r1, [r7, #28]
 8015adc:	6878      	ldr	r0, [r7, #4]
 8015ade:	f000 fa79 	bl	8015fd4 <ip4_output_if>
 8015ae2:	4603      	mov	r3, r0
 8015ae4:	73fb      	strb	r3, [r7, #15]
                   ICMP_TTL, 0, IP_PROTO_ICMP, inp);
      if (ret != ERR_OK) {
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
      }
    }
    break;
 8015ae6:	e001      	b.n	8015aec <icmp_input+0x1c0>
    break;
 8015ae8:	bf00      	nop
 8015aea:	e000      	b.n	8015aee <icmp_input+0x1c2>
    break;
 8015aec:	bf00      	nop
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                (s16_t)type, (s16_t)code));
    ICMP_STATS_INC(icmp.proterr);
    ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 8015aee:	6878      	ldr	r0, [r7, #4]
 8015af0:	f7f7 fe3e 	bl	800d770 <pbuf_free>
  return;
 8015af4:	e011      	b.n	8015b1a <icmp_input+0x1ee>
    goto lenerr;
 8015af6:	bf00      	nop
 8015af8:	e002      	b.n	8015b00 <icmp_input+0x1d4>
    goto lenerr;
 8015afa:	bf00      	nop
 8015afc:	e000      	b.n	8015b00 <icmp_input+0x1d4>
      goto lenerr;
 8015afe:	bf00      	nop
lenerr:
  pbuf_free(p);
 8015b00:	6878      	ldr	r0, [r7, #4]
 8015b02:	f7f7 fe35 	bl	800d770 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8015b06:	e008      	b.n	8015b1a <icmp_input+0x1ee>
      goto icmperr;
 8015b08:	bf00      	nop
 8015b0a:	e002      	b.n	8015b12 <icmp_input+0x1e6>
      goto icmperr;
 8015b0c:	bf00      	nop
 8015b0e:	e000      	b.n	8015b12 <icmp_input+0x1e6>
        goto icmperr;
 8015b10:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 8015b12:	6878      	ldr	r0, [r7, #4]
 8015b14:	f7f7 fe2c 	bl	800d770 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8015b18:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 8015b1a:	3728      	adds	r7, #40	; 0x28
 8015b1c:	46bd      	mov	sp, r7
 8015b1e:	bd80      	pop	{r7, pc}
 8015b20:	20007e80 	.word	0x20007e80
 8015b24:	20007e94 	.word	0x20007e94
 8015b28:	0801a900 	.word	0x0801a900
 8015b2c:	0801a938 	.word	0x0801a938
 8015b30:	0801a970 	.word	0x0801a970
 8015b34:	0801a998 	.word	0x0801a998

08015b38 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 8015b38:	b580      	push	{r7, lr}
 8015b3a:	b082      	sub	sp, #8
 8015b3c:	af00      	add	r7, sp, #0
 8015b3e:	6078      	str	r0, [r7, #4]
 8015b40:	460b      	mov	r3, r1
 8015b42:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 8015b44:	78fb      	ldrb	r3, [r7, #3]
 8015b46:	461a      	mov	r2, r3
 8015b48:	2103      	movs	r1, #3
 8015b4a:	6878      	ldr	r0, [r7, #4]
 8015b4c:	f000 f814 	bl	8015b78 <icmp_send_response>
}
 8015b50:	bf00      	nop
 8015b52:	3708      	adds	r7, #8
 8015b54:	46bd      	mov	sp, r7
 8015b56:	bd80      	pop	{r7, pc}

08015b58 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 8015b58:	b580      	push	{r7, lr}
 8015b5a:	b082      	sub	sp, #8
 8015b5c:	af00      	add	r7, sp, #0
 8015b5e:	6078      	str	r0, [r7, #4]
 8015b60:	460b      	mov	r3, r1
 8015b62:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 8015b64:	78fb      	ldrb	r3, [r7, #3]
 8015b66:	461a      	mov	r2, r3
 8015b68:	210b      	movs	r1, #11
 8015b6a:	6878      	ldr	r0, [r7, #4]
 8015b6c:	f000 f804 	bl	8015b78 <icmp_send_response>
}
 8015b70:	bf00      	nop
 8015b72:	3708      	adds	r7, #8
 8015b74:	46bd      	mov	sp, r7
 8015b76:	bd80      	pop	{r7, pc}

08015b78 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 8015b78:	b580      	push	{r7, lr}
 8015b7a:	b08c      	sub	sp, #48	; 0x30
 8015b7c:	af04      	add	r7, sp, #16
 8015b7e:	6078      	str	r0, [r7, #4]
 8015b80:	460b      	mov	r3, r1
 8015b82:	70fb      	strb	r3, [r7, #3]
 8015b84:	4613      	mov	r3, r2
 8015b86:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 8015b88:	2200      	movs	r2, #0
 8015b8a:	2124      	movs	r1, #36	; 0x24
 8015b8c:	2001      	movs	r0, #1
 8015b8e:	f7f7 fa7d 	bl	800d08c <pbuf_alloc>
 8015b92:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 8015b94:	69fb      	ldr	r3, [r7, #28]
 8015b96:	2b00      	cmp	r3, #0
 8015b98:	d04c      	beq.n	8015c34 <icmp_send_response+0xbc>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 8015b9a:	69fb      	ldr	r3, [r7, #28]
 8015b9c:	895b      	ldrh	r3, [r3, #10]
 8015b9e:	2b23      	cmp	r3, #35	; 0x23
 8015ba0:	d806      	bhi.n	8015bb0 <icmp_send_response+0x38>
 8015ba2:	4b26      	ldr	r3, [pc, #152]	; (8015c3c <icmp_send_response+0xc4>)
 8015ba4:	f44f 72b1 	mov.w	r2, #354	; 0x162
 8015ba8:	4925      	ldr	r1, [pc, #148]	; (8015c40 <icmp_send_response+0xc8>)
 8015baa:	4826      	ldr	r0, [pc, #152]	; (8015c44 <icmp_send_response+0xcc>)
 8015bac:	f002 f8ae 	bl	8017d0c <iprintf>
             (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 8015bb0:	687b      	ldr	r3, [r7, #4]
 8015bb2:	685b      	ldr	r3, [r3, #4]
 8015bb4:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 8015bb6:	69fb      	ldr	r3, [r7, #28]
 8015bb8:	685b      	ldr	r3, [r3, #4]
 8015bba:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 8015bbc:	697b      	ldr	r3, [r7, #20]
 8015bbe:	78fa      	ldrb	r2, [r7, #3]
 8015bc0:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 8015bc2:	697b      	ldr	r3, [r7, #20]
 8015bc4:	78ba      	ldrb	r2, [r7, #2]
 8015bc6:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 8015bc8:	697b      	ldr	r3, [r7, #20]
 8015bca:	2200      	movs	r2, #0
 8015bcc:	711a      	strb	r2, [r3, #4]
 8015bce:	2200      	movs	r2, #0
 8015bd0:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 8015bd2:	697b      	ldr	r3, [r7, #20]
 8015bd4:	2200      	movs	r2, #0
 8015bd6:	719a      	strb	r2, [r3, #6]
 8015bd8:	2200      	movs	r2, #0
 8015bda:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 8015bdc:	69fb      	ldr	r3, [r7, #28]
 8015bde:	685b      	ldr	r3, [r3, #4]
 8015be0:	f103 0008 	add.w	r0, r3, #8
 8015be4:	687b      	ldr	r3, [r7, #4]
 8015be6:	685b      	ldr	r3, [r3, #4]
 8015be8:	221c      	movs	r2, #28
 8015bea:	4619      	mov	r1, r3
 8015bec:	f001 ffd3 	bl	8017b96 <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 8015bf0:	69bb      	ldr	r3, [r7, #24]
 8015bf2:	68db      	ldr	r3, [r3, #12]
 8015bf4:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_src, &iphdr_dst);
  }
#else
  netif = ip4_route(&iphdr_src);
 8015bf6:	f107 030c 	add.w	r3, r7, #12
 8015bfa:	4618      	mov	r0, r3
 8015bfc:	f000 f824 	bl	8015c48 <ip4_route>
 8015c00:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 8015c02:	693b      	ldr	r3, [r7, #16]
 8015c04:	2b00      	cmp	r3, #0
 8015c06:	d011      	beq.n	8015c2c <icmp_send_response+0xb4>
    /* calculate checksum */
    icmphdr->chksum = 0;
 8015c08:	697b      	ldr	r3, [r7, #20]
 8015c0a:	2200      	movs	r2, #0
 8015c0c:	709a      	strb	r2, [r3, #2]
 8015c0e:	2200      	movs	r2, #0
 8015c10:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 8015c12:	f107 020c 	add.w	r2, r7, #12
 8015c16:	693b      	ldr	r3, [r7, #16]
 8015c18:	9302      	str	r3, [sp, #8]
 8015c1a:	2301      	movs	r3, #1
 8015c1c:	9301      	str	r3, [sp, #4]
 8015c1e:	2300      	movs	r3, #0
 8015c20:	9300      	str	r3, [sp, #0]
 8015c22:	23ff      	movs	r3, #255	; 0xff
 8015c24:	2100      	movs	r1, #0
 8015c26:	69f8      	ldr	r0, [r7, #28]
 8015c28:	f000 f9d4 	bl	8015fd4 <ip4_output_if>
  }
  pbuf_free(q);
 8015c2c:	69f8      	ldr	r0, [r7, #28]
 8015c2e:	f7f7 fd9f 	bl	800d770 <pbuf_free>
 8015c32:	e000      	b.n	8015c36 <icmp_send_response+0xbe>
    return;
 8015c34:	bf00      	nop
}
 8015c36:	3720      	adds	r7, #32
 8015c38:	46bd      	mov	sp, r7
 8015c3a:	bd80      	pop	{r7, pc}
 8015c3c:	0801a900 	.word	0x0801a900
 8015c40:	0801a9cc 	.word	0x0801a9cc
 8015c44:	0801a970 	.word	0x0801a970

08015c48 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 8015c48:	b480      	push	{r7}
 8015c4a:	b085      	sub	sp, #20
 8015c4c:	af00      	add	r7, sp, #0
 8015c4e:	6078      	str	r0, [r7, #4]
    return ip4_default_multicast_netif;
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */

  /* iterate through netifs */
  for (netif = netif_list; netif != NULL; netif = netif->next) {
 8015c50:	4b30      	ldr	r3, [pc, #192]	; (8015d14 <ip4_route+0xcc>)
 8015c52:	681b      	ldr	r3, [r3, #0]
 8015c54:	60fb      	str	r3, [r7, #12]
 8015c56:	e036      	b.n	8015cc6 <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8015c58:	68fb      	ldr	r3, [r7, #12]
 8015c5a:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8015c5e:	f003 0301 	and.w	r3, r3, #1
 8015c62:	b2db      	uxtb	r3, r3
 8015c64:	2b00      	cmp	r3, #0
 8015c66:	d02b      	beq.n	8015cc0 <ip4_route+0x78>
 8015c68:	68fb      	ldr	r3, [r7, #12]
 8015c6a:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8015c6e:	089b      	lsrs	r3, r3, #2
 8015c70:	f003 0301 	and.w	r3, r3, #1
 8015c74:	b2db      	uxtb	r3, r3
 8015c76:	2b00      	cmp	r3, #0
 8015c78:	d022      	beq.n	8015cc0 <ip4_route+0x78>
 8015c7a:	68fb      	ldr	r3, [r7, #12]
 8015c7c:	3304      	adds	r3, #4
 8015c7e:	681b      	ldr	r3, [r3, #0]
 8015c80:	2b00      	cmp	r3, #0
 8015c82:	d01d      	beq.n	8015cc0 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 8015c84:	687b      	ldr	r3, [r7, #4]
 8015c86:	681a      	ldr	r2, [r3, #0]
 8015c88:	68fb      	ldr	r3, [r7, #12]
 8015c8a:	3304      	adds	r3, #4
 8015c8c:	681b      	ldr	r3, [r3, #0]
 8015c8e:	405a      	eors	r2, r3
 8015c90:	68fb      	ldr	r3, [r7, #12]
 8015c92:	3308      	adds	r3, #8
 8015c94:	681b      	ldr	r3, [r3, #0]
 8015c96:	4013      	ands	r3, r2
 8015c98:	2b00      	cmp	r3, #0
 8015c9a:	d101      	bne.n	8015ca0 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 8015c9c:	68fb      	ldr	r3, [r7, #12]
 8015c9e:	e033      	b.n	8015d08 <ip4_route+0xc0>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 8015ca0:	68fb      	ldr	r3, [r7, #12]
 8015ca2:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8015ca6:	f003 0302 	and.w	r3, r3, #2
 8015caa:	2b00      	cmp	r3, #0
 8015cac:	d108      	bne.n	8015cc0 <ip4_route+0x78>
 8015cae:	687b      	ldr	r3, [r7, #4]
 8015cb0:	681a      	ldr	r2, [r3, #0]
 8015cb2:	68fb      	ldr	r3, [r7, #12]
 8015cb4:	330c      	adds	r3, #12
 8015cb6:	681b      	ldr	r3, [r3, #0]
 8015cb8:	429a      	cmp	r2, r3
 8015cba:	d101      	bne.n	8015cc0 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 8015cbc:	68fb      	ldr	r3, [r7, #12]
 8015cbe:	e023      	b.n	8015d08 <ip4_route+0xc0>
  for (netif = netif_list; netif != NULL; netif = netif->next) {
 8015cc0:	68fb      	ldr	r3, [r7, #12]
 8015cc2:	681b      	ldr	r3, [r3, #0]
 8015cc4:	60fb      	str	r3, [r7, #12]
 8015cc6:	68fb      	ldr	r3, [r7, #12]
 8015cc8:	2b00      	cmp	r3, #0
 8015cca:	d1c5      	bne.n	8015c58 <ip4_route+0x10>
  if (netif != NULL) {
    return netif;
  }
#endif

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8015ccc:	4b12      	ldr	r3, [pc, #72]	; (8015d18 <ip4_route+0xd0>)
 8015cce:	681b      	ldr	r3, [r3, #0]
 8015cd0:	2b00      	cmp	r3, #0
 8015cd2:	d015      	beq.n	8015d00 <ip4_route+0xb8>
 8015cd4:	4b10      	ldr	r3, [pc, #64]	; (8015d18 <ip4_route+0xd0>)
 8015cd6:	681b      	ldr	r3, [r3, #0]
 8015cd8:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8015cdc:	f003 0301 	and.w	r3, r3, #1
 8015ce0:	2b00      	cmp	r3, #0
 8015ce2:	d00d      	beq.n	8015d00 <ip4_route+0xb8>
 8015ce4:	4b0c      	ldr	r3, [pc, #48]	; (8015d18 <ip4_route+0xd0>)
 8015ce6:	681b      	ldr	r3, [r3, #0]
 8015ce8:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8015cec:	f003 0304 	and.w	r3, r3, #4
 8015cf0:	2b00      	cmp	r3, #0
 8015cf2:	d005      	beq.n	8015d00 <ip4_route+0xb8>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default))) {
 8015cf4:	4b08      	ldr	r3, [pc, #32]	; (8015d18 <ip4_route+0xd0>)
 8015cf6:	681b      	ldr	r3, [r3, #0]
 8015cf8:	3304      	adds	r3, #4
 8015cfa:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8015cfc:	2b00      	cmp	r3, #0
 8015cfe:	d101      	bne.n	8015d04 <ip4_route+0xbc>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
      ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 8015d00:	2300      	movs	r3, #0
 8015d02:	e001      	b.n	8015d08 <ip4_route+0xc0>
  }

  return netif_default;
 8015d04:	4b04      	ldr	r3, [pc, #16]	; (8015d18 <ip4_route+0xd0>)
 8015d06:	681b      	ldr	r3, [r3, #0]
}
 8015d08:	4618      	mov	r0, r3
 8015d0a:	3714      	adds	r7, #20
 8015d0c:	46bd      	mov	sp, r7
 8015d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015d12:	4770      	bx	lr
 8015d14:	2000b5a0 	.word	0x2000b5a0
 8015d18:	2000b5a4 	.word	0x2000b5a4

08015d1c <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 8015d1c:	b580      	push	{r7, lr}
 8015d1e:	b088      	sub	sp, #32
 8015d20:	af00      	add	r7, sp, #0
 8015d22:	6078      	str	r0, [r7, #4]
 8015d24:	6039      	str	r1, [r7, #0]
  struct ip_hdr *iphdr;
  struct netif *netif;
  u16_t iphdr_hlen;
  u16_t iphdr_len;
#if IP_ACCEPT_LINK_LAYER_ADDRESSING || LWIP_IGMP
  int check_ip_src = 1;
 8015d26:	2301      	movs	r3, #1
 8015d28:	617b      	str	r3, [r7, #20]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 8015d2a:	687b      	ldr	r3, [r7, #4]
 8015d2c:	685b      	ldr	r3, [r3, #4]
 8015d2e:	61fb      	str	r3, [r7, #28]
  if (IPH_V(iphdr) != 4) {
 8015d30:	69fb      	ldr	r3, [r7, #28]
 8015d32:	781b      	ldrb	r3, [r3, #0]
 8015d34:	091b      	lsrs	r3, r3, #4
 8015d36:	b2db      	uxtb	r3, r3
 8015d38:	2b04      	cmp	r3, #4
 8015d3a:	d004      	beq.n	8015d46 <ip4_input+0x2a>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 8015d3c:	6878      	ldr	r0, [r7, #4]
 8015d3e:	f7f7 fd17 	bl	800d770 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 8015d42:	2300      	movs	r3, #0
 8015d44:	e13e      	b.n	8015fc4 <ip4_input+0x2a8>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in number of 32-bit words */
  iphdr_hlen = IPH_HL(iphdr);
 8015d46:	69fb      	ldr	r3, [r7, #28]
 8015d48:	781b      	ldrb	r3, [r3, #0]
 8015d4a:	b29b      	uxth	r3, r3
 8015d4c:	f003 030f 	and.w	r3, r3, #15
 8015d50:	81fb      	strh	r3, [r7, #14]
  /* calculate IP header length in bytes */
  iphdr_hlen *= 4;
 8015d52:	89fb      	ldrh	r3, [r7, #14]
 8015d54:	009b      	lsls	r3, r3, #2
 8015d56:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 8015d58:	69fb      	ldr	r3, [r7, #28]
 8015d5a:	885b      	ldrh	r3, [r3, #2]
 8015d5c:	b29b      	uxth	r3, r3
 8015d5e:	4618      	mov	r0, r3
 8015d60:	f7f6 fb64 	bl	800c42c <lwip_htons>
 8015d64:	4603      	mov	r3, r0
 8015d66:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 8015d68:	687b      	ldr	r3, [r7, #4]
 8015d6a:	891b      	ldrh	r3, [r3, #8]
 8015d6c:	89ba      	ldrh	r2, [r7, #12]
 8015d6e:	429a      	cmp	r2, r3
 8015d70:	d204      	bcs.n	8015d7c <ip4_input+0x60>
    pbuf_realloc(p, iphdr_len);
 8015d72:	89bb      	ldrh	r3, [r7, #12]
 8015d74:	4619      	mov	r1, r3
 8015d76:	6878      	ldr	r0, [r7, #4]
 8015d78:	f7f7 fb86 	bl	800d488 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 8015d7c:	687b      	ldr	r3, [r7, #4]
 8015d7e:	895b      	ldrh	r3, [r3, #10]
 8015d80:	89fa      	ldrh	r2, [r7, #14]
 8015d82:	429a      	cmp	r2, r3
 8015d84:	d807      	bhi.n	8015d96 <ip4_input+0x7a>
 8015d86:	687b      	ldr	r3, [r7, #4]
 8015d88:	891b      	ldrh	r3, [r3, #8]
 8015d8a:	89ba      	ldrh	r2, [r7, #12]
 8015d8c:	429a      	cmp	r2, r3
 8015d8e:	d802      	bhi.n	8015d96 <ip4_input+0x7a>
 8015d90:	89fb      	ldrh	r3, [r7, #14]
 8015d92:	2b13      	cmp	r3, #19
 8015d94:	d804      	bhi.n	8015da0 <ip4_input+0x84>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
        ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
        iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 8015d96:	6878      	ldr	r0, [r7, #4]
 8015d98:	f7f7 fcea 	bl	800d770 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 8015d9c:	2300      	movs	r3, #0
 8015d9e:	e111      	b.n	8015fc4 <ip4_input+0x2a8>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 8015da0:	69fb      	ldr	r3, [r7, #28]
 8015da2:	691b      	ldr	r3, [r3, #16]
 8015da4:	4a89      	ldr	r2, [pc, #548]	; (8015fcc <ip4_input+0x2b0>)
 8015da6:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 8015da8:	69fb      	ldr	r3, [r7, #28]
 8015daa:	68db      	ldr	r3, [r3, #12]
 8015dac:	4a87      	ldr	r2, [pc, #540]	; (8015fcc <ip4_input+0x2b0>)
 8015dae:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8015db0:	4b86      	ldr	r3, [pc, #536]	; (8015fcc <ip4_input+0x2b0>)
 8015db2:	695b      	ldr	r3, [r3, #20]
 8015db4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8015db8:	2be0      	cmp	r3, #224	; 0xe0
 8015dba:	d112      	bne.n	8015de2 <ip4_input+0xc6>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 8015dbc:	683b      	ldr	r3, [r7, #0]
 8015dbe:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8015dc2:	f003 0301 	and.w	r3, r3, #1
 8015dc6:	b2db      	uxtb	r3, r3
 8015dc8:	2b00      	cmp	r3, #0
 8015dca:	d007      	beq.n	8015ddc <ip4_input+0xc0>
 8015dcc:	683b      	ldr	r3, [r7, #0]
 8015dce:	3304      	adds	r3, #4
 8015dd0:	681b      	ldr	r3, [r3, #0]
 8015dd2:	2b00      	cmp	r3, #0
 8015dd4:	d002      	beq.n	8015ddc <ip4_input+0xc0>
      netif = inp;
 8015dd6:	683b      	ldr	r3, [r7, #0]
 8015dd8:	61bb      	str	r3, [r7, #24]
 8015dda:	e041      	b.n	8015e60 <ip4_input+0x144>
    } else {
      netif = NULL;
 8015ddc:	2300      	movs	r3, #0
 8015dde:	61bb      	str	r3, [r7, #24]
 8015de0:	e03e      	b.n	8015e60 <ip4_input+0x144>
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs.
       'first' is used as a boolean to mark whether we started walking the list */
    int first = 1;
 8015de2:	2301      	movs	r3, #1
 8015de4:	613b      	str	r3, [r7, #16]
    netif = inp;
 8015de6:	683b      	ldr	r3, [r7, #0]
 8015de8:	61bb      	str	r3, [r7, #24]
          ip4_addr_get_u32(&iphdr->dest) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
          ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
          ip4_addr_get_u32(&iphdr->dest) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

      /* interface is up and configured? */
      if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 8015dea:	69bb      	ldr	r3, [r7, #24]
 8015dec:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8015df0:	f003 0301 	and.w	r3, r3, #1
 8015df4:	b2db      	uxtb	r3, r3
 8015df6:	2b00      	cmp	r3, #0
 8015df8:	d014      	beq.n	8015e24 <ip4_input+0x108>
 8015dfa:	69bb      	ldr	r3, [r7, #24]
 8015dfc:	3304      	adds	r3, #4
 8015dfe:	681b      	ldr	r3, [r3, #0]
 8015e00:	2b00      	cmp	r3, #0
 8015e02:	d00f      	beq.n	8015e24 <ip4_input+0x108>
        /* unicast to this interface address? */
        if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8015e04:	4b71      	ldr	r3, [pc, #452]	; (8015fcc <ip4_input+0x2b0>)
 8015e06:	695a      	ldr	r2, [r3, #20]
 8015e08:	69bb      	ldr	r3, [r7, #24]
 8015e0a:	3304      	adds	r3, #4
 8015e0c:	681b      	ldr	r3, [r3, #0]
 8015e0e:	429a      	cmp	r2, r3
 8015e10:	d026      	beq.n	8015e60 <ip4_input+0x144>
            /* or broadcast on this interface network address? */
            ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 8015e12:	4b6e      	ldr	r3, [pc, #440]	; (8015fcc <ip4_input+0x2b0>)
 8015e14:	695b      	ldr	r3, [r3, #20]
 8015e16:	69b9      	ldr	r1, [r7, #24]
 8015e18:	4618      	mov	r0, r3
 8015e1a:	f000 f9ad 	bl	8016178 <ip4_addr_isbroadcast_u32>
 8015e1e:	4603      	mov	r3, r0
        if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8015e20:	2b00      	cmp	r3, #0
 8015e22:	d11d      	bne.n	8015e60 <ip4_input+0x144>
          /* break out of for loop */
          break;
        }
#endif /* LWIP_AUTOIP */
      }
      if (first) {
 8015e24:	693b      	ldr	r3, [r7, #16]
 8015e26:	2b00      	cmp	r3, #0
 8015e28:	d00d      	beq.n	8015e46 <ip4_input+0x12a>
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
        /* Packets sent to the loopback address must not be accepted on an
         * interface that does not have the loopback address assigned to it,
         * unless a non-loopback interface is used for loopback traffic. */
        if (ip4_addr_isloopback(ip4_current_dest_addr())) {
 8015e2a:	4b68      	ldr	r3, [pc, #416]	; (8015fcc <ip4_input+0x2b0>)
 8015e2c:	695b      	ldr	r3, [r3, #20]
 8015e2e:	b2db      	uxtb	r3, r3
 8015e30:	2b7f      	cmp	r3, #127	; 0x7f
 8015e32:	d102      	bne.n	8015e3a <ip4_input+0x11e>
          netif = NULL;
 8015e34:	2300      	movs	r3, #0
 8015e36:	61bb      	str	r3, [r7, #24]
          break;
 8015e38:	e012      	b.n	8015e60 <ip4_input+0x144>
        }
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
        first = 0;
 8015e3a:	2300      	movs	r3, #0
 8015e3c:	613b      	str	r3, [r7, #16]
        netif = netif_list;
 8015e3e:	4b64      	ldr	r3, [pc, #400]	; (8015fd0 <ip4_input+0x2b4>)
 8015e40:	681b      	ldr	r3, [r3, #0]
 8015e42:	61bb      	str	r3, [r7, #24]
 8015e44:	e002      	b.n	8015e4c <ip4_input+0x130>
      } else {
        netif = netif->next;
 8015e46:	69bb      	ldr	r3, [r7, #24]
 8015e48:	681b      	ldr	r3, [r3, #0]
 8015e4a:	61bb      	str	r3, [r7, #24]
      }
      if (netif == inp) {
 8015e4c:	69ba      	ldr	r2, [r7, #24]
 8015e4e:	683b      	ldr	r3, [r7, #0]
 8015e50:	429a      	cmp	r2, r3
 8015e52:	d102      	bne.n	8015e5a <ip4_input+0x13e>
        netif = netif->next;
 8015e54:	69bb      	ldr	r3, [r7, #24]
 8015e56:	681b      	ldr	r3, [r3, #0]
 8015e58:	61bb      	str	r3, [r7, #24]
      }
    } while (netif != NULL);
 8015e5a:	69bb      	ldr	r3, [r7, #24]
 8015e5c:	2b00      	cmp	r3, #0
 8015e5e:	d1c4      	bne.n	8015dea <ip4_input+0xce>
   * If you want to accept private broadcast communication while a netif is down,
   * define LWIP_IP_ACCEPT_UDP_PORT(dst_port), e.g.:
   *
   * #define LWIP_IP_ACCEPT_UDP_PORT(dst_port) ((dst_port) == PP_NTOHS(12345))
   */
  if (netif == NULL) {
 8015e60:	69bb      	ldr	r3, [r7, #24]
 8015e62:	2b00      	cmp	r3, #0
 8015e64:	d111      	bne.n	8015e8a <ip4_input+0x16e>
    /* remote port is DHCP server? */
    if (IPH_PROTO(iphdr) == IP_PROTO_UDP) {
 8015e66:	69fb      	ldr	r3, [r7, #28]
 8015e68:	7a5b      	ldrb	r3, [r3, #9]
 8015e6a:	2b11      	cmp	r3, #17
 8015e6c:	d10d      	bne.n	8015e8a <ip4_input+0x16e>
      struct udp_hdr *udphdr = (struct udp_hdr *)((u8_t *)iphdr + iphdr_hlen);
 8015e6e:	89fb      	ldrh	r3, [r7, #14]
 8015e70:	69fa      	ldr	r2, [r7, #28]
 8015e72:	4413      	add	r3, r2
 8015e74:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE, ("ip4_input: UDP packet to DHCP client port %"U16_F"\n",
        lwip_ntohs(udphdr->dest)));
      if (IP_ACCEPT_LINK_LAYER_ADDRESSED_PORT(udphdr->dest)) {
 8015e76:	68bb      	ldr	r3, [r7, #8]
 8015e78:	885b      	ldrh	r3, [r3, #2]
 8015e7a:	b29b      	uxth	r3, r3
 8015e7c:	f5b3 4f88 	cmp.w	r3, #17408	; 0x4400
 8015e80:	d103      	bne.n	8015e8a <ip4_input+0x16e>
        LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE, ("ip4_input: DHCP packet accepted.\n"));
        netif = inp;
 8015e82:	683b      	ldr	r3, [r7, #0]
 8015e84:	61bb      	str	r3, [r7, #24]
        check_ip_src = 0;
 8015e86:	2300      	movs	r3, #0
 8015e88:	617b      	str	r3, [r7, #20]
  }
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */

  /* broadcast or multicast packet source address? Compliant with RFC 1122: 3.2.1.3 */
#if LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING
  if (check_ip_src
 8015e8a:	697b      	ldr	r3, [r7, #20]
 8015e8c:	2b00      	cmp	r3, #0
 8015e8e:	d017      	beq.n	8015ec0 <ip4_input+0x1a4>
#if IP_ACCEPT_LINK_LAYER_ADDRESSING
  /* DHCP servers need 0.0.0.0 to be allowed as source address (RFC 1.1.2.2: 3.2.1.3/a) */
      && !ip4_addr_isany_val(*ip4_current_src_addr())
 8015e90:	4b4e      	ldr	r3, [pc, #312]	; (8015fcc <ip4_input+0x2b0>)
 8015e92:	691b      	ldr	r3, [r3, #16]
 8015e94:	2b00      	cmp	r3, #0
 8015e96:	d013      	beq.n	8015ec0 <ip4_input+0x1a4>
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8015e98:	4b4c      	ldr	r3, [pc, #304]	; (8015fcc <ip4_input+0x2b0>)
 8015e9a:	691b      	ldr	r3, [r3, #16]
 8015e9c:	6839      	ldr	r1, [r7, #0]
 8015e9e:	4618      	mov	r0, r3
 8015ea0:	f000 f96a 	bl	8016178 <ip4_addr_isbroadcast_u32>
 8015ea4:	4603      	mov	r3, r0
 8015ea6:	2b00      	cmp	r3, #0
 8015ea8:	d105      	bne.n	8015eb6 <ip4_input+0x19a>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 8015eaa:	4b48      	ldr	r3, [pc, #288]	; (8015fcc <ip4_input+0x2b0>)
 8015eac:	691b      	ldr	r3, [r3, #16]
 8015eae:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8015eb2:	2be0      	cmp	r3, #224	; 0xe0
 8015eb4:	d104      	bne.n	8015ec0 <ip4_input+0x1a4>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 8015eb6:	6878      	ldr	r0, [r7, #4]
 8015eb8:	f7f7 fc5a 	bl	800d770 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 8015ebc:	2300      	movs	r3, #0
 8015ebe:	e081      	b.n	8015fc4 <ip4_input+0x2a8>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 8015ec0:	69bb      	ldr	r3, [r7, #24]
 8015ec2:	2b00      	cmp	r3, #0
 8015ec4:	d104      	bne.n	8015ed0 <ip4_input+0x1b4>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 8015ec6:	6878      	ldr	r0, [r7, #4]
 8015ec8:	f7f7 fc52 	bl	800d770 <pbuf_free>
    return ERR_OK;
 8015ecc:	2300      	movs	r3, #0
 8015ece:	e079      	b.n	8015fc4 <ip4_input+0x2a8>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 8015ed0:	69fb      	ldr	r3, [r7, #28]
 8015ed2:	88db      	ldrh	r3, [r3, #6]
 8015ed4:	b29b      	uxth	r3, r3
 8015ed6:	461a      	mov	r2, r3
 8015ed8:	f64f 733f 	movw	r3, #65343	; 0xff3f
 8015edc:	4013      	ands	r3, r2
 8015ede:	2b00      	cmp	r3, #0
 8015ee0:	d00b      	beq.n	8015efa <ip4_input+0x1de>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
      lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK)*8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 8015ee2:	6878      	ldr	r0, [r7, #4]
 8015ee4:	f000 fc8e 	bl	8016804 <ip4_reass>
 8015ee8:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 8015eea:	687b      	ldr	r3, [r7, #4]
 8015eec:	2b00      	cmp	r3, #0
 8015eee:	d101      	bne.n	8015ef4 <ip4_input+0x1d8>
      return ERR_OK;
 8015ef0:	2300      	movs	r3, #0
 8015ef2:	e067      	b.n	8015fc4 <ip4_input+0x2a8>
    }
    iphdr = (struct ip_hdr *)p->payload;
 8015ef4:	687b      	ldr	r3, [r7, #4]
 8015ef6:	685b      	ldr	r3, [r3, #4]
 8015ef8:	61fb      	str	r3, [r7, #28]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 8015efa:	4a34      	ldr	r2, [pc, #208]	; (8015fcc <ip4_input+0x2b0>)
 8015efc:	69bb      	ldr	r3, [r7, #24]
 8015efe:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 8015f00:	4a32      	ldr	r2, [pc, #200]	; (8015fcc <ip4_input+0x2b0>)
 8015f02:	683b      	ldr	r3, [r7, #0]
 8015f04:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 8015f06:	4a31      	ldr	r2, [pc, #196]	; (8015fcc <ip4_input+0x2b0>)
 8015f08:	69fb      	ldr	r3, [r7, #28]
 8015f0a:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL(iphdr) * 4;
 8015f0c:	69fb      	ldr	r3, [r7, #28]
 8015f0e:	781b      	ldrb	r3, [r3, #0]
 8015f10:	b29b      	uxth	r3, r3
 8015f12:	f003 030f 	and.w	r3, r3, #15
 8015f16:	b29b      	uxth	r3, r3
 8015f18:	009b      	lsls	r3, r3, #2
 8015f1a:	b29a      	uxth	r2, r3
 8015f1c:	4b2b      	ldr	r3, [pc, #172]	; (8015fcc <ip4_input+0x2b0>)
 8015f1e:	819a      	strh	r2, [r3, #12]
#if LWIP_RAW
  /* raw input did not eat the packet? */
  if (raw_input(p, inp) == 0)
#endif /* LWIP_RAW */
  {
    pbuf_header(p, -(s16_t)iphdr_hlen); /* Move to payload, no check necessary. */
 8015f20:	89fb      	ldrh	r3, [r7, #14]
 8015f22:	425b      	negs	r3, r3
 8015f24:	b29b      	uxth	r3, r3
 8015f26:	b21b      	sxth	r3, r3
 8015f28:	4619      	mov	r1, r3
 8015f2a:	6878      	ldr	r0, [r7, #4]
 8015f2c:	f7f7 fbfc 	bl	800d728 <pbuf_header>

    switch (IPH_PROTO(iphdr)) {
 8015f30:	69fb      	ldr	r3, [r7, #28]
 8015f32:	7a5b      	ldrb	r3, [r3, #9]
 8015f34:	2b06      	cmp	r3, #6
 8015f36:	d009      	beq.n	8015f4c <ip4_input+0x230>
 8015f38:	2b11      	cmp	r3, #17
 8015f3a:	d002      	beq.n	8015f42 <ip4_input+0x226>
 8015f3c:	2b01      	cmp	r3, #1
 8015f3e:	d00a      	beq.n	8015f56 <ip4_input+0x23a>
 8015f40:	e00e      	b.n	8015f60 <ip4_input+0x244>
    case IP_PROTO_UDP:
#if LWIP_UDPLITE
    case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
      MIB2_STATS_INC(mib2.ipindelivers);
      udp_input(p, inp);
 8015f42:	6839      	ldr	r1, [r7, #0]
 8015f44:	6878      	ldr	r0, [r7, #4]
 8015f46:	f7fc fc11 	bl	801276c <udp_input>
      break;
 8015f4a:	e028      	b.n	8015f9e <ip4_input+0x282>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case IP_PROTO_TCP:
      MIB2_STATS_INC(mib2.ipindelivers);
      tcp_input(p, inp);
 8015f4c:	6839      	ldr	r1, [r7, #0]
 8015f4e:	6878      	ldr	r0, [r7, #4]
 8015f50:	f7f9 f862 	bl	800f018 <tcp_input>
      break;
 8015f54:	e023      	b.n	8015f9e <ip4_input+0x282>
#endif /* LWIP_TCP */
#if LWIP_ICMP
    case IP_PROTO_ICMP:
      MIB2_STATS_INC(mib2.ipindelivers);
      icmp_input(p, inp);
 8015f56:	6839      	ldr	r1, [r7, #0]
 8015f58:	6878      	ldr	r0, [r7, #4]
 8015f5a:	f7ff fce7 	bl	801592c <icmp_input>
      break;
 8015f5e:	e01e      	b.n	8015f9e <ip4_input+0x282>
      break;
#endif /* LWIP_IGMP */
    default:
#if LWIP_ICMP
      /* send ICMP destination protocol unreachable unless is was a broadcast */
      if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8015f60:	4b1a      	ldr	r3, [pc, #104]	; (8015fcc <ip4_input+0x2b0>)
 8015f62:	695b      	ldr	r3, [r3, #20]
 8015f64:	69b9      	ldr	r1, [r7, #24]
 8015f66:	4618      	mov	r0, r3
 8015f68:	f000 f906 	bl	8016178 <ip4_addr_isbroadcast_u32>
 8015f6c:	4603      	mov	r3, r0
 8015f6e:	2b00      	cmp	r3, #0
 8015f70:	d112      	bne.n	8015f98 <ip4_input+0x27c>
          !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8015f72:	4b16      	ldr	r3, [pc, #88]	; (8015fcc <ip4_input+0x2b0>)
 8015f74:	695b      	ldr	r3, [r3, #20]
 8015f76:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8015f7a:	2be0      	cmp	r3, #224	; 0xe0
 8015f7c:	d00c      	beq.n	8015f98 <ip4_input+0x27c>
        pbuf_header_force(p, iphdr_hlen); /* Move to ip header, no check necessary. */
 8015f7e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8015f82:	4619      	mov	r1, r3
 8015f84:	6878      	ldr	r0, [r7, #4]
 8015f86:	f7f7 fbe1 	bl	800d74c <pbuf_header_force>
        p->payload = iphdr;
 8015f8a:	687b      	ldr	r3, [r7, #4]
 8015f8c:	69fa      	ldr	r2, [r7, #28]
 8015f8e:	605a      	str	r2, [r3, #4]
        icmp_dest_unreach(p, ICMP_DUR_PROTO);
 8015f90:	2102      	movs	r1, #2
 8015f92:	6878      	ldr	r0, [r7, #4]
 8015f94:	f7ff fdd0 	bl	8015b38 <icmp_dest_unreach>
      }
#endif /* LWIP_ICMP */
      pbuf_free(p);
 8015f98:	6878      	ldr	r0, [r7, #4]
 8015f9a:	f7f7 fbe9 	bl	800d770 <pbuf_free>
      MIB2_STATS_INC(mib2.ipinunknownprotos);
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 8015f9e:	4b0b      	ldr	r3, [pc, #44]	; (8015fcc <ip4_input+0x2b0>)
 8015fa0:	2200      	movs	r2, #0
 8015fa2:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 8015fa4:	4b09      	ldr	r3, [pc, #36]	; (8015fcc <ip4_input+0x2b0>)
 8015fa6:	2200      	movs	r2, #0
 8015fa8:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 8015faa:	4b08      	ldr	r3, [pc, #32]	; (8015fcc <ip4_input+0x2b0>)
 8015fac:	2200      	movs	r2, #0
 8015fae:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 8015fb0:	4b06      	ldr	r3, [pc, #24]	; (8015fcc <ip4_input+0x2b0>)
 8015fb2:	2200      	movs	r2, #0
 8015fb4:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 8015fb6:	4b05      	ldr	r3, [pc, #20]	; (8015fcc <ip4_input+0x2b0>)
 8015fb8:	2200      	movs	r2, #0
 8015fba:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 8015fbc:	4b03      	ldr	r3, [pc, #12]	; (8015fcc <ip4_input+0x2b0>)
 8015fbe:	2200      	movs	r2, #0
 8015fc0:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 8015fc2:	2300      	movs	r3, #0
}
 8015fc4:	4618      	mov	r0, r3
 8015fc6:	3720      	adds	r7, #32
 8015fc8:	46bd      	mov	sp, r7
 8015fca:	bd80      	pop	{r7, pc}
 8015fcc:	20007e80 	.word	0x20007e80
 8015fd0:	2000b5a0 	.word	0x2000b5a0

08015fd4 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
             u8_t ttl, u8_t tos,
             u8_t proto, struct netif *netif)
{
 8015fd4:	b580      	push	{r7, lr}
 8015fd6:	b08a      	sub	sp, #40	; 0x28
 8015fd8:	af04      	add	r7, sp, #16
 8015fda:	60f8      	str	r0, [r7, #12]
 8015fdc:	60b9      	str	r1, [r7, #8]
 8015fde:	607a      	str	r2, [r7, #4]
 8015fe0:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
       u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
       u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 8015fe2:	68bb      	ldr	r3, [r7, #8]
 8015fe4:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 8015fe6:	687b      	ldr	r3, [r7, #4]
 8015fe8:	2b00      	cmp	r3, #0
 8015fea:	d009      	beq.n	8016000 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 8015fec:	68bb      	ldr	r3, [r7, #8]
 8015fee:	2b00      	cmp	r3, #0
 8015ff0:	d003      	beq.n	8015ffa <ip4_output_if+0x26>
 8015ff2:	68bb      	ldr	r3, [r7, #8]
 8015ff4:	681b      	ldr	r3, [r3, #0]
 8015ff6:	2b00      	cmp	r3, #0
 8015ff8:	d102      	bne.n	8016000 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 8015ffa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015ffc:	3304      	adds	r3, #4
 8015ffe:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
    ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 8016000:	78fa      	ldrb	r2, [r7, #3]
 8016002:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016004:	9302      	str	r3, [sp, #8]
 8016006:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801600a:	9301      	str	r3, [sp, #4]
 801600c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8016010:	9300      	str	r3, [sp, #0]
 8016012:	4613      	mov	r3, r2
 8016014:	687a      	ldr	r2, [r7, #4]
 8016016:	6979      	ldr	r1, [r7, #20]
 8016018:	68f8      	ldr	r0, [r7, #12]
 801601a:	f000 f805 	bl	8016028 <ip4_output_if_src>
 801601e:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 8016020:	4618      	mov	r0, r3
 8016022:	3718      	adds	r7, #24
 8016024:	46bd      	mov	sp, r7
 8016026:	bd80      	pop	{r7, pc}

08016028 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
             u8_t ttl, u8_t tos,
             u8_t proto, struct netif *netif)
{
 8016028:	b580      	push	{r7, lr}
 801602a:	b088      	sub	sp, #32
 801602c:	af00      	add	r7, sp, #0
 801602e:	60f8      	str	r0, [r7, #12]
 8016030:	60b9      	str	r1, [r7, #8]
 8016032:	607a      	str	r2, [r7, #4]
 8016034:	70fb      	strb	r3, [r7, #3]
  ip4_addr_t dest_addr;
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 8016036:	68fb      	ldr	r3, [r7, #12]
 8016038:	89db      	ldrh	r3, [r3, #14]
 801603a:	2b01      	cmp	r3, #1
 801603c:	d006      	beq.n	801604c <ip4_output_if_src+0x24>
 801603e:	4b48      	ldr	r3, [pc, #288]	; (8016160 <ip4_output_if_src+0x138>)
 8016040:	f240 3233 	movw	r2, #819	; 0x333
 8016044:	4947      	ldr	r1, [pc, #284]	; (8016164 <ip4_output_if_src+0x13c>)
 8016046:	4848      	ldr	r0, [pc, #288]	; (8016168 <ip4_output_if_src+0x140>)
 8016048:	f001 fe60 	bl	8017d0c <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 801604c:	687b      	ldr	r3, [r7, #4]
 801604e:	2b00      	cmp	r3, #0
 8016050:	d060      	beq.n	8016114 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 8016052:	2314      	movs	r3, #20
 8016054:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_header(p, IP_HLEN)) {
 8016056:	2114      	movs	r1, #20
 8016058:	68f8      	ldr	r0, [r7, #12]
 801605a:	f7f7 fb65 	bl	800d728 <pbuf_header>
 801605e:	4603      	mov	r3, r0
 8016060:	2b00      	cmp	r3, #0
 8016062:	d002      	beq.n	801606a <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8016064:	f06f 0301 	mvn.w	r3, #1
 8016068:	e075      	b.n	8016156 <ip4_output_if_src+0x12e>
    }

    iphdr = (struct ip_hdr *)p->payload;
 801606a:	68fb      	ldr	r3, [r7, #12]
 801606c:	685b      	ldr	r3, [r3, #4]
 801606e:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 8016070:	68fb      	ldr	r3, [r7, #12]
 8016072:	895b      	ldrh	r3, [r3, #10]
 8016074:	2b13      	cmp	r3, #19
 8016076:	d806      	bhi.n	8016086 <ip4_output_if_src+0x5e>
 8016078:	4b39      	ldr	r3, [pc, #228]	; (8016160 <ip4_output_if_src+0x138>)
 801607a:	f240 3261 	movw	r2, #865	; 0x361
 801607e:	493b      	ldr	r1, [pc, #236]	; (801616c <ip4_output_if_src+0x144>)
 8016080:	4839      	ldr	r0, [pc, #228]	; (8016168 <ip4_output_if_src+0x140>)
 8016082:	f001 fe43 	bl	8017d0c <iprintf>
               (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 8016086:	69fb      	ldr	r3, [r7, #28]
 8016088:	78fa      	ldrb	r2, [r7, #3]
 801608a:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 801608c:	69fb      	ldr	r3, [r7, #28]
 801608e:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8016092:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 8016094:	687b      	ldr	r3, [r7, #4]
 8016096:	681a      	ldr	r2, [r3, #0]
 8016098:	69fb      	ldr	r3, [r7, #28]
 801609a:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 801609c:	8b7b      	ldrh	r3, [r7, #26]
 801609e:	089b      	lsrs	r3, r3, #2
 80160a0:	b29b      	uxth	r3, r3
 80160a2:	b2db      	uxtb	r3, r3
 80160a4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80160a8:	b2da      	uxtb	r2, r3
 80160aa:	69fb      	ldr	r3, [r7, #28]
 80160ac:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 80160ae:	69fb      	ldr	r3, [r7, #28]
 80160b0:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 80160b4:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 80160b6:	68fb      	ldr	r3, [r7, #12]
 80160b8:	891b      	ldrh	r3, [r3, #8]
 80160ba:	4618      	mov	r0, r3
 80160bc:	f7f6 f9b6 	bl	800c42c <lwip_htons>
 80160c0:	4603      	mov	r3, r0
 80160c2:	461a      	mov	r2, r3
 80160c4:	69fb      	ldr	r3, [r7, #28]
 80160c6:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 80160c8:	69fb      	ldr	r3, [r7, #28]
 80160ca:	2200      	movs	r2, #0
 80160cc:	719a      	strb	r2, [r3, #6]
 80160ce:	2200      	movs	r2, #0
 80160d0:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 80160d2:	4b27      	ldr	r3, [pc, #156]	; (8016170 <ip4_output_if_src+0x148>)
 80160d4:	881b      	ldrh	r3, [r3, #0]
 80160d6:	4618      	mov	r0, r3
 80160d8:	f7f6 f9a8 	bl	800c42c <lwip_htons>
 80160dc:	4603      	mov	r3, r0
 80160de:	461a      	mov	r2, r3
 80160e0:	69fb      	ldr	r3, [r7, #28]
 80160e2:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 80160e4:	4b22      	ldr	r3, [pc, #136]	; (8016170 <ip4_output_if_src+0x148>)
 80160e6:	881b      	ldrh	r3, [r3, #0]
 80160e8:	3301      	adds	r3, #1
 80160ea:	b29a      	uxth	r2, r3
 80160ec:	4b20      	ldr	r3, [pc, #128]	; (8016170 <ip4_output_if_src+0x148>)
 80160ee:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 80160f0:	68bb      	ldr	r3, [r7, #8]
 80160f2:	2b00      	cmp	r3, #0
 80160f4:	d104      	bne.n	8016100 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 80160f6:	4b1f      	ldr	r3, [pc, #124]	; (8016174 <ip4_output_if_src+0x14c>)
 80160f8:	681a      	ldr	r2, [r3, #0]
 80160fa:	69fb      	ldr	r3, [r7, #28]
 80160fc:	60da      	str	r2, [r3, #12]
 80160fe:	e003      	b.n	8016108 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 8016100:	68bb      	ldr	r3, [r7, #8]
 8016102:	681a      	ldr	r2, [r3, #0]
 8016104:	69fb      	ldr	r3, [r7, #28]
 8016106:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 8016108:	69fb      	ldr	r3, [r7, #28]
 801610a:	2200      	movs	r2, #0
 801610c:	729a      	strb	r2, [r3, #10]
 801610e:	2200      	movs	r2, #0
 8016110:	72da      	strb	r2, [r3, #11]
 8016112:	e008      	b.n	8016126 <ip4_output_if_src+0xfe>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    iphdr = (struct ip_hdr *)p->payload;
 8016114:	68fb      	ldr	r3, [r7, #12]
 8016116:	685b      	ldr	r3, [r3, #4]
 8016118:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 801611a:	69fb      	ldr	r3, [r7, #28]
 801611c:	691b      	ldr	r3, [r3, #16]
 801611e:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 8016120:	f107 0314 	add.w	r3, r7, #20
 8016124:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 8016126:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016128:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 801612a:	2b00      	cmp	r3, #0
 801612c:	d00c      	beq.n	8016148 <ip4_output_if_src+0x120>
 801612e:	68fb      	ldr	r3, [r7, #12]
 8016130:	891a      	ldrh	r2, [r3, #8]
 8016132:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016134:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8016136:	429a      	cmp	r2, r3
 8016138:	d906      	bls.n	8016148 <ip4_output_if_src+0x120>
    return ip4_frag(p, netif, dest);
 801613a:	687a      	ldr	r2, [r7, #4]
 801613c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801613e:	68f8      	ldr	r0, [r7, #12]
 8016140:	f000 fd0a 	bl	8016b58 <ip4_frag>
 8016144:	4603      	mov	r3, r0
 8016146:	e006      	b.n	8016156 <ip4_output_if_src+0x12e>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 8016148:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801614a:	695b      	ldr	r3, [r3, #20]
 801614c:	687a      	ldr	r2, [r7, #4]
 801614e:	68f9      	ldr	r1, [r7, #12]
 8016150:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8016152:	4798      	blx	r3
 8016154:	4603      	mov	r3, r0
}
 8016156:	4618      	mov	r0, r3
 8016158:	3720      	adds	r7, #32
 801615a:	46bd      	mov	sp, r7
 801615c:	bd80      	pop	{r7, pc}
 801615e:	bf00      	nop
 8016160:	0801a9f8 	.word	0x0801a9f8
 8016164:	0801aa2c 	.word	0x0801aa2c
 8016168:	0801aa38 	.word	0x0801aa38
 801616c:	0801aa60 	.word	0x0801aa60
 8016170:	20004cae 	.word	0x20004cae
 8016174:	0801ae94 	.word	0x0801ae94

08016178 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 8016178:	b480      	push	{r7}
 801617a:	b085      	sub	sp, #20
 801617c:	af00      	add	r7, sp, #0
 801617e:	6078      	str	r0, [r7, #4]
 8016180:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 8016182:	687b      	ldr	r3, [r7, #4]
 8016184:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 8016186:	687b      	ldr	r3, [r7, #4]
 8016188:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801618c:	d002      	beq.n	8016194 <ip4_addr_isbroadcast_u32+0x1c>
 801618e:	687b      	ldr	r3, [r7, #4]
 8016190:	2b00      	cmp	r3, #0
 8016192:	d101      	bne.n	8016198 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 8016194:	2301      	movs	r3, #1
 8016196:	e02a      	b.n	80161ee <ip4_addr_isbroadcast_u32+0x76>
  /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 8016198:	683b      	ldr	r3, [r7, #0]
 801619a:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 801619e:	f003 0302 	and.w	r3, r3, #2
 80161a2:	2b00      	cmp	r3, #0
 80161a4:	d101      	bne.n	80161aa <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 80161a6:	2300      	movs	r3, #0
 80161a8:	e021      	b.n	80161ee <ip4_addr_isbroadcast_u32+0x76>
  /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 80161aa:	683b      	ldr	r3, [r7, #0]
 80161ac:	3304      	adds	r3, #4
 80161ae:	681b      	ldr	r3, [r3, #0]
 80161b0:	687a      	ldr	r2, [r7, #4]
 80161b2:	429a      	cmp	r2, r3
 80161b4:	d101      	bne.n	80161ba <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 80161b6:	2300      	movs	r3, #0
 80161b8:	e019      	b.n	80161ee <ip4_addr_isbroadcast_u32+0x76>
  /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 80161ba:	68fa      	ldr	r2, [r7, #12]
 80161bc:	683b      	ldr	r3, [r7, #0]
 80161be:	3304      	adds	r3, #4
 80161c0:	681b      	ldr	r3, [r3, #0]
 80161c2:	405a      	eors	r2, r3
 80161c4:	683b      	ldr	r3, [r7, #0]
 80161c6:	3308      	adds	r3, #8
 80161c8:	681b      	ldr	r3, [r3, #0]
 80161ca:	4013      	ands	r3, r2
 80161cc:	2b00      	cmp	r3, #0
 80161ce:	d10d      	bne.n	80161ec <ip4_addr_isbroadcast_u32+0x74>
         /* ...and host identifier bits are all ones? =>... */
          && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 80161d0:	683b      	ldr	r3, [r7, #0]
 80161d2:	3308      	adds	r3, #8
 80161d4:	681b      	ldr	r3, [r3, #0]
 80161d6:	43da      	mvns	r2, r3
 80161d8:	687b      	ldr	r3, [r7, #4]
 80161da:	401a      	ands	r2, r3
           (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 80161dc:	683b      	ldr	r3, [r7, #0]
 80161de:	3308      	adds	r3, #8
 80161e0:	681b      	ldr	r3, [r3, #0]
 80161e2:	43db      	mvns	r3, r3
          && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 80161e4:	429a      	cmp	r2, r3
 80161e6:	d101      	bne.n	80161ec <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 80161e8:	2301      	movs	r3, #1
 80161ea:	e000      	b.n	80161ee <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 80161ec:	2300      	movs	r3, #0
  }
}
 80161ee:	4618      	mov	r0, r3
 80161f0:	3714      	adds	r7, #20
 80161f2:	46bd      	mov	sp, r7
 80161f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80161f8:	4770      	bx	lr
	...

080161fc <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 80161fc:	b580      	push	{r7, lr}
 80161fe:	b084      	sub	sp, #16
 8016200:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 8016202:	2300      	movs	r3, #0
 8016204:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 8016206:	4b12      	ldr	r3, [pc, #72]	; (8016250 <ip_reass_tmr+0x54>)
 8016208:	681b      	ldr	r3, [r3, #0]
 801620a:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 801620c:	e018      	b.n	8016240 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 801620e:	68fb      	ldr	r3, [r7, #12]
 8016210:	7fdb      	ldrb	r3, [r3, #31]
 8016212:	2b00      	cmp	r3, #0
 8016214:	d00b      	beq.n	801622e <ip_reass_tmr+0x32>
      r->timer--;
 8016216:	68fb      	ldr	r3, [r7, #12]
 8016218:	7fdb      	ldrb	r3, [r3, #31]
 801621a:	3b01      	subs	r3, #1
 801621c:	b2da      	uxtb	r2, r3
 801621e:	68fb      	ldr	r3, [r7, #12]
 8016220:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n",(u16_t)r->timer));
      prev = r;
 8016222:	68fb      	ldr	r3, [r7, #12]
 8016224:	60bb      	str	r3, [r7, #8]
      r = r->next;
 8016226:	68fb      	ldr	r3, [r7, #12]
 8016228:	681b      	ldr	r3, [r3, #0]
 801622a:	60fb      	str	r3, [r7, #12]
 801622c:	e008      	b.n	8016240 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 801622e:	68fb      	ldr	r3, [r7, #12]
 8016230:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 8016232:	68fb      	ldr	r3, [r7, #12]
 8016234:	681b      	ldr	r3, [r3, #0]
 8016236:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 8016238:	68b9      	ldr	r1, [r7, #8]
 801623a:	6878      	ldr	r0, [r7, #4]
 801623c:	f000 f80a 	bl	8016254 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 8016240:	68fb      	ldr	r3, [r7, #12]
 8016242:	2b00      	cmp	r3, #0
 8016244:	d1e3      	bne.n	801620e <ip_reass_tmr+0x12>
     }
   }
}
 8016246:	bf00      	nop
 8016248:	3710      	adds	r7, #16
 801624a:	46bd      	mov	sp, r7
 801624c:	bd80      	pop	{r7, pc}
 801624e:	bf00      	nop
 8016250:	20004cb0 	.word	0x20004cb0

08016254 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8016254:	b580      	push	{r7, lr}
 8016256:	b088      	sub	sp, #32
 8016258:	af00      	add	r7, sp, #0
 801625a:	6078      	str	r0, [r7, #4]
 801625c:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 801625e:	2300      	movs	r3, #0
 8016260:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 8016262:	683a      	ldr	r2, [r7, #0]
 8016264:	687b      	ldr	r3, [r7, #4]
 8016266:	429a      	cmp	r2, r3
 8016268:	d105      	bne.n	8016276 <ip_reass_free_complete_datagram+0x22>
 801626a:	4b45      	ldr	r3, [pc, #276]	; (8016380 <ip_reass_free_complete_datagram+0x12c>)
 801626c:	22ab      	movs	r2, #171	; 0xab
 801626e:	4945      	ldr	r1, [pc, #276]	; (8016384 <ip_reass_free_complete_datagram+0x130>)
 8016270:	4845      	ldr	r0, [pc, #276]	; (8016388 <ip_reass_free_complete_datagram+0x134>)
 8016272:	f001 fd4b 	bl	8017d0c <iprintf>
  if (prev != NULL) {
 8016276:	683b      	ldr	r3, [r7, #0]
 8016278:	2b00      	cmp	r3, #0
 801627a:	d00a      	beq.n	8016292 <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 801627c:	683b      	ldr	r3, [r7, #0]
 801627e:	681b      	ldr	r3, [r3, #0]
 8016280:	687a      	ldr	r2, [r7, #4]
 8016282:	429a      	cmp	r2, r3
 8016284:	d005      	beq.n	8016292 <ip_reass_free_complete_datagram+0x3e>
 8016286:	4b3e      	ldr	r3, [pc, #248]	; (8016380 <ip_reass_free_complete_datagram+0x12c>)
 8016288:	22ad      	movs	r2, #173	; 0xad
 801628a:	4940      	ldr	r1, [pc, #256]	; (801638c <ip_reass_free_complete_datagram+0x138>)
 801628c:	483e      	ldr	r0, [pc, #248]	; (8016388 <ip_reass_free_complete_datagram+0x134>)
 801628e:	f001 fd3d 	bl	8017d0c <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 8016292:	687b      	ldr	r3, [r7, #4]
 8016294:	685b      	ldr	r3, [r3, #4]
 8016296:	685b      	ldr	r3, [r3, #4]
 8016298:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 801629a:	697b      	ldr	r3, [r7, #20]
 801629c:	889b      	ldrh	r3, [r3, #4]
 801629e:	b29b      	uxth	r3, r3
 80162a0:	2b00      	cmp	r3, #0
 80162a2:	d12a      	bne.n	80162fa <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 80162a4:	687b      	ldr	r3, [r7, #4]
 80162a6:	685b      	ldr	r3, [r3, #4]
 80162a8:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 80162aa:	697b      	ldr	r3, [r7, #20]
 80162ac:	681a      	ldr	r2, [r3, #0]
 80162ae:	687b      	ldr	r3, [r7, #4]
 80162b0:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 80162b2:	69bb      	ldr	r3, [r7, #24]
 80162b4:	6858      	ldr	r0, [r3, #4]
 80162b6:	687b      	ldr	r3, [r7, #4]
 80162b8:	3308      	adds	r3, #8
 80162ba:	2214      	movs	r2, #20
 80162bc:	4619      	mov	r1, r3
 80162be:	f001 fc6a 	bl	8017b96 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 80162c2:	2101      	movs	r1, #1
 80162c4:	69b8      	ldr	r0, [r7, #24]
 80162c6:	f7ff fc47 	bl	8015b58 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 80162ca:	69b8      	ldr	r0, [r7, #24]
 80162cc:	f7f7 faea 	bl	800d8a4 <pbuf_clen>
 80162d0:	4603      	mov	r3, r0
 80162d2:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 80162d4:	8bfa      	ldrh	r2, [r7, #30]
 80162d6:	8a7b      	ldrh	r3, [r7, #18]
 80162d8:	4413      	add	r3, r2
 80162da:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80162de:	db05      	blt.n	80162ec <ip_reass_free_complete_datagram+0x98>
 80162e0:	4b27      	ldr	r3, [pc, #156]	; (8016380 <ip_reass_free_complete_datagram+0x12c>)
 80162e2:	22bc      	movs	r2, #188	; 0xbc
 80162e4:	492a      	ldr	r1, [pc, #168]	; (8016390 <ip_reass_free_complete_datagram+0x13c>)
 80162e6:	4828      	ldr	r0, [pc, #160]	; (8016388 <ip_reass_free_complete_datagram+0x134>)
 80162e8:	f001 fd10 	bl	8017d0c <iprintf>
    pbufs_freed += clen;
 80162ec:	8bfa      	ldrh	r2, [r7, #30]
 80162ee:	8a7b      	ldrh	r3, [r7, #18]
 80162f0:	4413      	add	r3, r2
 80162f2:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 80162f4:	69b8      	ldr	r0, [r7, #24]
 80162f6:	f7f7 fa3b 	bl	800d770 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 80162fa:	687b      	ldr	r3, [r7, #4]
 80162fc:	685b      	ldr	r3, [r3, #4]
 80162fe:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 8016300:	e01f      	b.n	8016342 <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 8016302:	69bb      	ldr	r3, [r7, #24]
 8016304:	685b      	ldr	r3, [r3, #4]
 8016306:	617b      	str	r3, [r7, #20]
    pcur = p;
 8016308:	69bb      	ldr	r3, [r7, #24]
 801630a:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 801630c:	697b      	ldr	r3, [r7, #20]
 801630e:	681b      	ldr	r3, [r3, #0]
 8016310:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 8016312:	68f8      	ldr	r0, [r7, #12]
 8016314:	f7f7 fac6 	bl	800d8a4 <pbuf_clen>
 8016318:	4603      	mov	r3, r0
 801631a:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 801631c:	8bfa      	ldrh	r2, [r7, #30]
 801631e:	8a7b      	ldrh	r3, [r7, #18]
 8016320:	4413      	add	r3, r2
 8016322:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8016326:	db05      	blt.n	8016334 <ip_reass_free_complete_datagram+0xe0>
 8016328:	4b15      	ldr	r3, [pc, #84]	; (8016380 <ip_reass_free_complete_datagram+0x12c>)
 801632a:	22cc      	movs	r2, #204	; 0xcc
 801632c:	4918      	ldr	r1, [pc, #96]	; (8016390 <ip_reass_free_complete_datagram+0x13c>)
 801632e:	4816      	ldr	r0, [pc, #88]	; (8016388 <ip_reass_free_complete_datagram+0x134>)
 8016330:	f001 fcec 	bl	8017d0c <iprintf>
    pbufs_freed += clen;
 8016334:	8bfa      	ldrh	r2, [r7, #30]
 8016336:	8a7b      	ldrh	r3, [r7, #18]
 8016338:	4413      	add	r3, r2
 801633a:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 801633c:	68f8      	ldr	r0, [r7, #12]
 801633e:	f7f7 fa17 	bl	800d770 <pbuf_free>
  while (p != NULL) {
 8016342:	69bb      	ldr	r3, [r7, #24]
 8016344:	2b00      	cmp	r3, #0
 8016346:	d1dc      	bne.n	8016302 <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 8016348:	6839      	ldr	r1, [r7, #0]
 801634a:	6878      	ldr	r0, [r7, #4]
 801634c:	f000 f8c2 	bl	80164d4 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= pbufs_freed);
 8016350:	4b10      	ldr	r3, [pc, #64]	; (8016394 <ip_reass_free_complete_datagram+0x140>)
 8016352:	881b      	ldrh	r3, [r3, #0]
 8016354:	8bfa      	ldrh	r2, [r7, #30]
 8016356:	429a      	cmp	r2, r3
 8016358:	d905      	bls.n	8016366 <ip_reass_free_complete_datagram+0x112>
 801635a:	4b09      	ldr	r3, [pc, #36]	; (8016380 <ip_reass_free_complete_datagram+0x12c>)
 801635c:	22d2      	movs	r2, #210	; 0xd2
 801635e:	490e      	ldr	r1, [pc, #56]	; (8016398 <ip_reass_free_complete_datagram+0x144>)
 8016360:	4809      	ldr	r0, [pc, #36]	; (8016388 <ip_reass_free_complete_datagram+0x134>)
 8016362:	f001 fcd3 	bl	8017d0c <iprintf>
  ip_reass_pbufcount -= pbufs_freed;
 8016366:	4b0b      	ldr	r3, [pc, #44]	; (8016394 <ip_reass_free_complete_datagram+0x140>)
 8016368:	881a      	ldrh	r2, [r3, #0]
 801636a:	8bfb      	ldrh	r3, [r7, #30]
 801636c:	1ad3      	subs	r3, r2, r3
 801636e:	b29a      	uxth	r2, r3
 8016370:	4b08      	ldr	r3, [pc, #32]	; (8016394 <ip_reass_free_complete_datagram+0x140>)
 8016372:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 8016374:	8bfb      	ldrh	r3, [r7, #30]
}
 8016376:	4618      	mov	r0, r3
 8016378:	3720      	adds	r7, #32
 801637a:	46bd      	mov	sp, r7
 801637c:	bd80      	pop	{r7, pc}
 801637e:	bf00      	nop
 8016380:	0801aa90 	.word	0x0801aa90
 8016384:	0801aacc 	.word	0x0801aacc
 8016388:	0801aad8 	.word	0x0801aad8
 801638c:	0801ab00 	.word	0x0801ab00
 8016390:	0801ab14 	.word	0x0801ab14
 8016394:	20004cb4 	.word	0x20004cb4
 8016398:	0801ab34 	.word	0x0801ab34

0801639c <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 801639c:	b580      	push	{r7, lr}
 801639e:	b08a      	sub	sp, #40	; 0x28
 80163a0:	af00      	add	r7, sp, #0
 80163a2:	6078      	str	r0, [r7, #4]
 80163a4:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 80163a6:	2300      	movs	r3, #0
 80163a8:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 80163aa:	2300      	movs	r3, #0
 80163ac:	623b      	str	r3, [r7, #32]
    prev = NULL;
 80163ae:	2300      	movs	r3, #0
 80163b0:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 80163b2:	2300      	movs	r3, #0
 80163b4:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 80163b6:	2300      	movs	r3, #0
 80163b8:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 80163ba:	4b28      	ldr	r3, [pc, #160]	; (801645c <ip_reass_remove_oldest_datagram+0xc0>)
 80163bc:	681b      	ldr	r3, [r3, #0]
 80163be:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 80163c0:	e030      	b.n	8016424 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 80163c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80163c4:	695a      	ldr	r2, [r3, #20]
 80163c6:	687b      	ldr	r3, [r7, #4]
 80163c8:	68db      	ldr	r3, [r3, #12]
 80163ca:	429a      	cmp	r2, r3
 80163cc:	d10c      	bne.n	80163e8 <ip_reass_remove_oldest_datagram+0x4c>
 80163ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80163d0:	699a      	ldr	r2, [r3, #24]
 80163d2:	687b      	ldr	r3, [r7, #4]
 80163d4:	691b      	ldr	r3, [r3, #16]
 80163d6:	429a      	cmp	r2, r3
 80163d8:	d106      	bne.n	80163e8 <ip_reass_remove_oldest_datagram+0x4c>
 80163da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80163dc:	899a      	ldrh	r2, [r3, #12]
 80163de:	687b      	ldr	r3, [r7, #4]
 80163e0:	889b      	ldrh	r3, [r3, #4]
 80163e2:	b29b      	uxth	r3, r3
 80163e4:	429a      	cmp	r2, r3
 80163e6:	d014      	beq.n	8016412 <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 80163e8:	693b      	ldr	r3, [r7, #16]
 80163ea:	3301      	adds	r3, #1
 80163ec:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 80163ee:	6a3b      	ldr	r3, [r7, #32]
 80163f0:	2b00      	cmp	r3, #0
 80163f2:	d104      	bne.n	80163fe <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 80163f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80163f6:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 80163f8:	69fb      	ldr	r3, [r7, #28]
 80163fa:	61bb      	str	r3, [r7, #24]
 80163fc:	e009      	b.n	8016412 <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 80163fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016400:	7fda      	ldrb	r2, [r3, #31]
 8016402:	6a3b      	ldr	r3, [r7, #32]
 8016404:	7fdb      	ldrb	r3, [r3, #31]
 8016406:	429a      	cmp	r2, r3
 8016408:	d803      	bhi.n	8016412 <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 801640a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801640c:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 801640e:	69fb      	ldr	r3, [r7, #28]
 8016410:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 8016412:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016414:	681b      	ldr	r3, [r3, #0]
 8016416:	2b00      	cmp	r3, #0
 8016418:	d001      	beq.n	801641e <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 801641a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801641c:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 801641e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016420:	681b      	ldr	r3, [r3, #0]
 8016422:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8016424:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016426:	2b00      	cmp	r3, #0
 8016428:	d1cb      	bne.n	80163c2 <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 801642a:	6a3b      	ldr	r3, [r7, #32]
 801642c:	2b00      	cmp	r3, #0
 801642e:	d008      	beq.n	8016442 <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 8016430:	69b9      	ldr	r1, [r7, #24]
 8016432:	6a38      	ldr	r0, [r7, #32]
 8016434:	f7ff ff0e 	bl	8016254 <ip_reass_free_complete_datagram>
 8016438:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 801643a:	697a      	ldr	r2, [r7, #20]
 801643c:	68fb      	ldr	r3, [r7, #12]
 801643e:	4413      	add	r3, r2
 8016440:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 8016442:	697a      	ldr	r2, [r7, #20]
 8016444:	683b      	ldr	r3, [r7, #0]
 8016446:	429a      	cmp	r2, r3
 8016448:	da02      	bge.n	8016450 <ip_reass_remove_oldest_datagram+0xb4>
 801644a:	693b      	ldr	r3, [r7, #16]
 801644c:	2b01      	cmp	r3, #1
 801644e:	dcac      	bgt.n	80163aa <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 8016450:	697b      	ldr	r3, [r7, #20]
}
 8016452:	4618      	mov	r0, r3
 8016454:	3728      	adds	r7, #40	; 0x28
 8016456:	46bd      	mov	sp, r7
 8016458:	bd80      	pop	{r7, pc}
 801645a:	bf00      	nop
 801645c:	20004cb0 	.word	0x20004cb0

08016460 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata*
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 8016460:	b580      	push	{r7, lr}
 8016462:	b084      	sub	sp, #16
 8016464:	af00      	add	r7, sp, #0
 8016466:	6078      	str	r0, [r7, #4]
 8016468:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 801646a:	2004      	movs	r0, #4
 801646c:	f7f6 fbcc 	bl	800cc08 <memp_malloc>
 8016470:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 8016472:	68fb      	ldr	r3, [r7, #12]
 8016474:	2b00      	cmp	r3, #0
 8016476:	d110      	bne.n	801649a <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 8016478:	6839      	ldr	r1, [r7, #0]
 801647a:	6878      	ldr	r0, [r7, #4]
 801647c:	f7ff ff8e 	bl	801639c <ip_reass_remove_oldest_datagram>
 8016480:	4602      	mov	r2, r0
 8016482:	683b      	ldr	r3, [r7, #0]
 8016484:	4293      	cmp	r3, r2
 8016486:	dc03      	bgt.n	8016490 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8016488:	2004      	movs	r0, #4
 801648a:	f7f6 fbbd 	bl	800cc08 <memp_malloc>
 801648e:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 8016490:	68fb      	ldr	r3, [r7, #12]
 8016492:	2b00      	cmp	r3, #0
 8016494:	d101      	bne.n	801649a <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG,("Failed to alloc reassdata struct\n"));
      return NULL;
 8016496:	2300      	movs	r3, #0
 8016498:	e016      	b.n	80164c8 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 801649a:	2220      	movs	r2, #32
 801649c:	2100      	movs	r1, #0
 801649e:	68f8      	ldr	r0, [r7, #12]
 80164a0:	f001 fb84 	bl	8017bac <memset>
  ipr->timer = IP_REASS_MAXAGE;
 80164a4:	68fb      	ldr	r3, [r7, #12]
 80164a6:	2203      	movs	r2, #3
 80164a8:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 80164aa:	4b09      	ldr	r3, [pc, #36]	; (80164d0 <ip_reass_enqueue_new_datagram+0x70>)
 80164ac:	681a      	ldr	r2, [r3, #0]
 80164ae:	68fb      	ldr	r3, [r7, #12]
 80164b0:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 80164b2:	4a07      	ldr	r2, [pc, #28]	; (80164d0 <ip_reass_enqueue_new_datagram+0x70>)
 80164b4:	68fb      	ldr	r3, [r7, #12]
 80164b6:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 80164b8:	68fb      	ldr	r3, [r7, #12]
 80164ba:	3308      	adds	r3, #8
 80164bc:	2214      	movs	r2, #20
 80164be:	6879      	ldr	r1, [r7, #4]
 80164c0:	4618      	mov	r0, r3
 80164c2:	f001 fb68 	bl	8017b96 <memcpy>
  return ipr;
 80164c6:	68fb      	ldr	r3, [r7, #12]
}
 80164c8:	4618      	mov	r0, r3
 80164ca:	3710      	adds	r7, #16
 80164cc:	46bd      	mov	sp, r7
 80164ce:	bd80      	pop	{r7, pc}
 80164d0:	20004cb0 	.word	0x20004cb0

080164d4 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 80164d4:	b580      	push	{r7, lr}
 80164d6:	b082      	sub	sp, #8
 80164d8:	af00      	add	r7, sp, #0
 80164da:	6078      	str	r0, [r7, #4]
 80164dc:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 80164de:	4b10      	ldr	r3, [pc, #64]	; (8016520 <ip_reass_dequeue_datagram+0x4c>)
 80164e0:	681b      	ldr	r3, [r3, #0]
 80164e2:	687a      	ldr	r2, [r7, #4]
 80164e4:	429a      	cmp	r2, r3
 80164e6:	d104      	bne.n	80164f2 <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 80164e8:	687b      	ldr	r3, [r7, #4]
 80164ea:	681b      	ldr	r3, [r3, #0]
 80164ec:	4a0c      	ldr	r2, [pc, #48]	; (8016520 <ip_reass_dequeue_datagram+0x4c>)
 80164ee:	6013      	str	r3, [r2, #0]
 80164f0:	e00d      	b.n	801650e <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 80164f2:	683b      	ldr	r3, [r7, #0]
 80164f4:	2b00      	cmp	r3, #0
 80164f6:	d106      	bne.n	8016506 <ip_reass_dequeue_datagram+0x32>
 80164f8:	4b0a      	ldr	r3, [pc, #40]	; (8016524 <ip_reass_dequeue_datagram+0x50>)
 80164fa:	f240 1245 	movw	r2, #325	; 0x145
 80164fe:	490a      	ldr	r1, [pc, #40]	; (8016528 <ip_reass_dequeue_datagram+0x54>)
 8016500:	480a      	ldr	r0, [pc, #40]	; (801652c <ip_reass_dequeue_datagram+0x58>)
 8016502:	f001 fc03 	bl	8017d0c <iprintf>
    prev->next = ipr->next;
 8016506:	687b      	ldr	r3, [r7, #4]
 8016508:	681a      	ldr	r2, [r3, #0]
 801650a:	683b      	ldr	r3, [r7, #0]
 801650c:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 801650e:	6879      	ldr	r1, [r7, #4]
 8016510:	2004      	movs	r0, #4
 8016512:	f7f6 fbcb 	bl	800ccac <memp_free>
}
 8016516:	bf00      	nop
 8016518:	3708      	adds	r7, #8
 801651a:	46bd      	mov	sp, r7
 801651c:	bd80      	pop	{r7, pc}
 801651e:	bf00      	nop
 8016520:	20004cb0 	.word	0x20004cb0
 8016524:	0801aa90 	.word	0x0801aa90
 8016528:	0801ab50 	.word	0x0801ab50
 801652c:	0801aad8 	.word	0x0801aad8

08016530 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 8016530:	b580      	push	{r7, lr}
 8016532:	b08c      	sub	sp, #48	; 0x30
 8016534:	af00      	add	r7, sp, #0
 8016536:	60f8      	str	r0, [r7, #12]
 8016538:	60b9      	str	r1, [r7, #8]
 801653a:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev=NULL;
 801653c:	2300      	movs	r3, #0
 801653e:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  struct ip_hdr *fraghdr;
  int valid = 1;
 8016540:	2301      	movs	r3, #1
 8016542:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr*)new_p->payload;
 8016544:	68bb      	ldr	r3, [r7, #8]
 8016546:	685b      	ldr	r3, [r3, #4]
 8016548:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr)) - IPH_HL(fraghdr) * 4;
 801654a:	69fb      	ldr	r3, [r7, #28]
 801654c:	885b      	ldrh	r3, [r3, #2]
 801654e:	b29b      	uxth	r3, r3
 8016550:	4618      	mov	r0, r3
 8016552:	f7f5 ff6b 	bl	800c42c <lwip_htons>
 8016556:	4603      	mov	r3, r0
 8016558:	461a      	mov	r2, r3
 801655a:	69fb      	ldr	r3, [r7, #28]
 801655c:	781b      	ldrb	r3, [r3, #0]
 801655e:	b29b      	uxth	r3, r3
 8016560:	f003 030f 	and.w	r3, r3, #15
 8016564:	b29b      	uxth	r3, r3
 8016566:	009b      	lsls	r3, r3, #2
 8016568:	b29b      	uxth	r3, r3
 801656a:	1ad3      	subs	r3, r2, r3
 801656c:	837b      	strh	r3, [r7, #26]
  offset = (lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) * 8;
 801656e:	69fb      	ldr	r3, [r7, #28]
 8016570:	88db      	ldrh	r3, [r3, #6]
 8016572:	b29b      	uxth	r3, r3
 8016574:	4618      	mov	r0, r3
 8016576:	f7f5 ff59 	bl	800c42c <lwip_htons>
 801657a:	4603      	mov	r3, r0
 801657c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8016580:	b29b      	uxth	r3, r3
 8016582:	00db      	lsls	r3, r3, #3
 8016584:	833b      	strh	r3, [r7, #24]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper*)new_p->payload;
 8016586:	68bb      	ldr	r3, [r7, #8]
 8016588:	685b      	ldr	r3, [r3, #4]
 801658a:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 801658c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801658e:	2200      	movs	r2, #0
 8016590:	701a      	strb	r2, [r3, #0]
 8016592:	2200      	movs	r2, #0
 8016594:	705a      	strb	r2, [r3, #1]
 8016596:	2200      	movs	r2, #0
 8016598:	709a      	strb	r2, [r3, #2]
 801659a:	2200      	movs	r2, #0
 801659c:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 801659e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80165a0:	8b3a      	ldrh	r2, [r7, #24]
 80165a2:	809a      	strh	r2, [r3, #4]
  iprh->end = offset + len;
 80165a4:	8b3a      	ldrh	r2, [r7, #24]
 80165a6:	8b7b      	ldrh	r3, [r7, #26]
 80165a8:	4413      	add	r3, r2
 80165aa:	b29a      	uxth	r2, r3
 80165ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80165ae:	80da      	strh	r2, [r3, #6]

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 80165b0:	68fb      	ldr	r3, [r7, #12]
 80165b2:	685b      	ldr	r3, [r3, #4]
 80165b4:	627b      	str	r3, [r7, #36]	; 0x24
 80165b6:	e061      	b.n	801667c <ip_reass_chain_frag_into_datagram_and_validate+0x14c>
    iprh_tmp = (struct ip_reass_helper*)q->payload;
 80165b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80165ba:	685b      	ldr	r3, [r3, #4]
 80165bc:	617b      	str	r3, [r7, #20]
    if (iprh->start < iprh_tmp->start) {
 80165be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80165c0:	889b      	ldrh	r3, [r3, #4]
 80165c2:	b29a      	uxth	r2, r3
 80165c4:	697b      	ldr	r3, [r7, #20]
 80165c6:	889b      	ldrh	r3, [r3, #4]
 80165c8:	b29b      	uxth	r3, r3
 80165ca:	429a      	cmp	r2, r3
 80165cc:	d232      	bcs.n	8016634 <ip_reass_chain_frag_into_datagram_and_validate+0x104>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 80165ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80165d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80165d2:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 80165d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80165d6:	2b00      	cmp	r3, #0
 80165d8:	d01f      	beq.n	801661a <ip_reass_chain_frag_into_datagram_and_validate+0xea>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 80165da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80165dc:	889b      	ldrh	r3, [r3, #4]
 80165de:	b29a      	uxth	r2, r3
 80165e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80165e2:	88db      	ldrh	r3, [r3, #6]
 80165e4:	b29b      	uxth	r3, r3
 80165e6:	429a      	cmp	r2, r3
 80165e8:	f0c0 80e3 	bcc.w	80167b2 <ip_reass_chain_frag_into_datagram_and_validate+0x282>
 80165ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80165ee:	88db      	ldrh	r3, [r3, #6]
 80165f0:	b29a      	uxth	r2, r3
 80165f2:	697b      	ldr	r3, [r7, #20]
 80165f4:	889b      	ldrh	r3, [r3, #4]
 80165f6:	b29b      	uxth	r3, r3
 80165f8:	429a      	cmp	r2, r3
 80165fa:	f200 80da 	bhi.w	80167b2 <ip_reass_chain_frag_into_datagram_and_validate+0x282>
          /* fragment overlaps with previous or following, throw away */
          goto freepbuf;
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 80165fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016600:	68ba      	ldr	r2, [r7, #8]
 8016602:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 8016604:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016606:	88db      	ldrh	r3, [r3, #6]
 8016608:	b29a      	uxth	r2, r3
 801660a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801660c:	889b      	ldrh	r3, [r3, #4]
 801660e:	b29b      	uxth	r3, r3
 8016610:	429a      	cmp	r2, r3
 8016612:	d037      	beq.n	8016684 <ip_reass_chain_frag_into_datagram_and_validate+0x154>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8016614:	2300      	movs	r3, #0
 8016616:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 8016618:	e034      	b.n	8016684 <ip_reass_chain_frag_into_datagram_and_validate+0x154>
        if (iprh->end > iprh_tmp->start) {
 801661a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801661c:	88db      	ldrh	r3, [r3, #6]
 801661e:	b29a      	uxth	r2, r3
 8016620:	697b      	ldr	r3, [r7, #20]
 8016622:	889b      	ldrh	r3, [r3, #4]
 8016624:	b29b      	uxth	r3, r3
 8016626:	429a      	cmp	r2, r3
 8016628:	f200 80c5 	bhi.w	80167b6 <ip_reass_chain_frag_into_datagram_and_validate+0x286>
        ipr->p = new_p;
 801662c:	68fb      	ldr	r3, [r7, #12]
 801662e:	68ba      	ldr	r2, [r7, #8]
 8016630:	605a      	str	r2, [r3, #4]
      break;
 8016632:	e027      	b.n	8016684 <ip_reass_chain_frag_into_datagram_and_validate+0x154>
    } else if (iprh->start == iprh_tmp->start) {
 8016634:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016636:	889b      	ldrh	r3, [r3, #4]
 8016638:	b29a      	uxth	r2, r3
 801663a:	697b      	ldr	r3, [r7, #20]
 801663c:	889b      	ldrh	r3, [r3, #4]
 801663e:	b29b      	uxth	r3, r3
 8016640:	429a      	cmp	r2, r3
 8016642:	f000 80ba 	beq.w	80167ba <ip_reass_chain_frag_into_datagram_and_validate+0x28a>
      /* received the same datagram twice: no need to keep the datagram */
      goto freepbuf;
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 8016646:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016648:	889b      	ldrh	r3, [r3, #4]
 801664a:	b29a      	uxth	r2, r3
 801664c:	697b      	ldr	r3, [r7, #20]
 801664e:	88db      	ldrh	r3, [r3, #6]
 8016650:	b29b      	uxth	r3, r3
 8016652:	429a      	cmp	r2, r3
 8016654:	f0c0 80b3 	bcc.w	80167be <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
      /* overlap: no need to keep the new datagram */
      goto freepbuf;
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 8016658:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801665a:	2b00      	cmp	r3, #0
 801665c:	d009      	beq.n	8016672 <ip_reass_chain_frag_into_datagram_and_validate+0x142>
        if (iprh_prev->end != iprh_tmp->start) {
 801665e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016660:	88db      	ldrh	r3, [r3, #6]
 8016662:	b29a      	uxth	r2, r3
 8016664:	697b      	ldr	r3, [r7, #20]
 8016666:	889b      	ldrh	r3, [r3, #4]
 8016668:	b29b      	uxth	r3, r3
 801666a:	429a      	cmp	r2, r3
 801666c:	d001      	beq.n	8016672 <ip_reass_chain_frag_into_datagram_and_validate+0x142>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 801666e:	2300      	movs	r3, #0
 8016670:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 8016672:	697b      	ldr	r3, [r7, #20]
 8016674:	681b      	ldr	r3, [r3, #0]
 8016676:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 8016678:	697b      	ldr	r3, [r7, #20]
 801667a:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 801667c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801667e:	2b00      	cmp	r3, #0
 8016680:	d19a      	bne.n	80165b8 <ip_reass_chain_frag_into_datagram_and_validate+0x88>
 8016682:	e000      	b.n	8016686 <ip_reass_chain_frag_into_datagram_and_validate+0x156>
      break;
 8016684:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 8016686:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016688:	2b00      	cmp	r3, #0
 801668a:	d12d      	bne.n	80166e8 <ip_reass_chain_frag_into_datagram_and_validate+0x1b8>
    if (iprh_prev != NULL) {
 801668c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801668e:	2b00      	cmp	r3, #0
 8016690:	d01c      	beq.n	80166cc <ip_reass_chain_frag_into_datagram_and_validate+0x19c>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 8016692:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016694:	88db      	ldrh	r3, [r3, #6]
 8016696:	b29a      	uxth	r2, r3
 8016698:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801669a:	889b      	ldrh	r3, [r3, #4]
 801669c:	b29b      	uxth	r3, r3
 801669e:	429a      	cmp	r2, r3
 80166a0:	d906      	bls.n	80166b0 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
 80166a2:	4b51      	ldr	r3, [pc, #324]	; (80167e8 <ip_reass_chain_frag_into_datagram_and_validate+0x2b8>)
 80166a4:	f240 12ab 	movw	r2, #427	; 0x1ab
 80166a8:	4950      	ldr	r1, [pc, #320]	; (80167ec <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80166aa:	4851      	ldr	r0, [pc, #324]	; (80167f0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 80166ac:	f001 fb2e 	bl	8017d0c <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 80166b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80166b2:	68ba      	ldr	r2, [r7, #8]
 80166b4:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 80166b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80166b8:	88db      	ldrh	r3, [r3, #6]
 80166ba:	b29a      	uxth	r2, r3
 80166bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80166be:	889b      	ldrh	r3, [r3, #4]
 80166c0:	b29b      	uxth	r3, r3
 80166c2:	429a      	cmp	r2, r3
 80166c4:	d010      	beq.n	80166e8 <ip_reass_chain_frag_into_datagram_and_validate+0x1b8>
        valid = 0;
 80166c6:	2300      	movs	r3, #0
 80166c8:	623b      	str	r3, [r7, #32]
 80166ca:	e00d      	b.n	80166e8 <ip_reass_chain_frag_into_datagram_and_validate+0x1b8>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 80166cc:	68fb      	ldr	r3, [r7, #12]
 80166ce:	685b      	ldr	r3, [r3, #4]
 80166d0:	2b00      	cmp	r3, #0
 80166d2:	d006      	beq.n	80166e2 <ip_reass_chain_frag_into_datagram_and_validate+0x1b2>
 80166d4:	4b44      	ldr	r3, [pc, #272]	; (80167e8 <ip_reass_chain_frag_into_datagram_and_validate+0x2b8>)
 80166d6:	f44f 72da 	mov.w	r2, #436	; 0x1b4
 80166da:	4946      	ldr	r1, [pc, #280]	; (80167f4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80166dc:	4844      	ldr	r0, [pc, #272]	; (80167f0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 80166de:	f001 fb15 	bl	8017d0c <iprintf>
        ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 80166e2:	68fb      	ldr	r3, [r7, #12]
 80166e4:	68ba      	ldr	r2, [r7, #8]
 80166e6:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 80166e8:	687b      	ldr	r3, [r7, #4]
 80166ea:	2b00      	cmp	r3, #0
 80166ec:	d105      	bne.n	80166fa <ip_reass_chain_frag_into_datagram_and_validate+0x1ca>
 80166ee:	68fb      	ldr	r3, [r7, #12]
 80166f0:	7f9b      	ldrb	r3, [r3, #30]
 80166f2:	f003 0301 	and.w	r3, r3, #1
 80166f6:	2b00      	cmp	r3, #0
 80166f8:	d059      	beq.n	80167ae <ip_reass_chain_frag_into_datagram_and_validate+0x27e>
    /* and had no holes so far */
    if (valid) {
 80166fa:	6a3b      	ldr	r3, [r7, #32]
 80166fc:	2b00      	cmp	r3, #0
 80166fe:	d04f      	beq.n	80167a0 <ip_reass_chain_frag_into_datagram_and_validate+0x270>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper*)ipr->p->payload)->start != 0)) {
 8016700:	68fb      	ldr	r3, [r7, #12]
 8016702:	685b      	ldr	r3, [r3, #4]
 8016704:	2b00      	cmp	r3, #0
 8016706:	d006      	beq.n	8016716 <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 8016708:	68fb      	ldr	r3, [r7, #12]
 801670a:	685b      	ldr	r3, [r3, #4]
 801670c:	685b      	ldr	r3, [r3, #4]
 801670e:	889b      	ldrh	r3, [r3, #4]
 8016710:	b29b      	uxth	r3, r3
 8016712:	2b00      	cmp	r3, #0
 8016714:	d002      	beq.n	801671c <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 8016716:	2300      	movs	r3, #0
 8016718:	623b      	str	r3, [r7, #32]
 801671a:	e041      	b.n	80167a0 <ip_reass_chain_frag_into_datagram_and_validate+0x270>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 801671c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801671e:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 8016720:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016722:	681b      	ldr	r3, [r3, #0]
 8016724:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 8016726:	e012      	b.n	801674e <ip_reass_chain_frag_into_datagram_and_validate+0x21e>
          iprh = (struct ip_reass_helper*)q->payload;
 8016728:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801672a:	685b      	ldr	r3, [r3, #4]
 801672c:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 801672e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016730:	88db      	ldrh	r3, [r3, #6]
 8016732:	b29a      	uxth	r2, r3
 8016734:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016736:	889b      	ldrh	r3, [r3, #4]
 8016738:	b29b      	uxth	r3, r3
 801673a:	429a      	cmp	r2, r3
 801673c:	d002      	beq.n	8016744 <ip_reass_chain_frag_into_datagram_and_validate+0x214>
            valid = 0;
 801673e:	2300      	movs	r3, #0
 8016740:	623b      	str	r3, [r7, #32]
            break;
 8016742:	e007      	b.n	8016754 <ip_reass_chain_frag_into_datagram_and_validate+0x224>
          }
          iprh_prev = iprh;
 8016744:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016746:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 8016748:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801674a:	681b      	ldr	r3, [r3, #0]
 801674c:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 801674e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016750:	2b00      	cmp	r3, #0
 8016752:	d1e9      	bne.n	8016728 <ip_reass_chain_frag_into_datagram_and_validate+0x1f8>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 8016754:	6a3b      	ldr	r3, [r7, #32]
 8016756:	2b00      	cmp	r3, #0
 8016758:	d022      	beq.n	80167a0 <ip_reass_chain_frag_into_datagram_and_validate+0x270>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 801675a:	68fb      	ldr	r3, [r7, #12]
 801675c:	685b      	ldr	r3, [r3, #4]
 801675e:	2b00      	cmp	r3, #0
 8016760:	d106      	bne.n	8016770 <ip_reass_chain_frag_into_datagram_and_validate+0x240>
 8016762:	4b21      	ldr	r3, [pc, #132]	; (80167e8 <ip_reass_chain_frag_into_datagram_and_validate+0x2b8>)
 8016764:	f44f 72ea 	mov.w	r2, #468	; 0x1d4
 8016768:	4923      	ldr	r1, [pc, #140]	; (80167f8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 801676a:	4821      	ldr	r0, [pc, #132]	; (80167f0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 801676c:	f001 face 	bl	8017d0c <iprintf>
          LWIP_ASSERT("sanity check",
 8016770:	68fb      	ldr	r3, [r7, #12]
 8016772:	685b      	ldr	r3, [r3, #4]
 8016774:	685b      	ldr	r3, [r3, #4]
 8016776:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8016778:	429a      	cmp	r2, r3
 801677a:	d106      	bne.n	801678a <ip_reass_chain_frag_into_datagram_and_validate+0x25a>
 801677c:	4b1a      	ldr	r3, [pc, #104]	; (80167e8 <ip_reass_chain_frag_into_datagram_and_validate+0x2b8>)
 801677e:	f44f 72eb 	mov.w	r2, #470	; 0x1d6
 8016782:	491d      	ldr	r1, [pc, #116]	; (80167f8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 8016784:	481a      	ldr	r0, [pc, #104]	; (80167f0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 8016786:	f001 fac1 	bl	8017d0c <iprintf>
            ((struct ip_reass_helper*)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 801678a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801678c:	681b      	ldr	r3, [r3, #0]
 801678e:	2b00      	cmp	r3, #0
 8016790:	d006      	beq.n	80167a0 <ip_reass_chain_frag_into_datagram_and_validate+0x270>
 8016792:	4b15      	ldr	r3, [pc, #84]	; (80167e8 <ip_reass_chain_frag_into_datagram_and_validate+0x2b8>)
 8016794:	f44f 72ec 	mov.w	r2, #472	; 0x1d8
 8016798:	4918      	ldr	r1, [pc, #96]	; (80167fc <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 801679a:	4815      	ldr	r0, [pc, #84]	; (80167f0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 801679c:	f001 fab6 	bl	8017d0c <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 80167a0:	6a3b      	ldr	r3, [r7, #32]
 80167a2:	2b00      	cmp	r3, #0
 80167a4:	bf14      	ite	ne
 80167a6:	2301      	movne	r3, #1
 80167a8:	2300      	moveq	r3, #0
 80167aa:	b2db      	uxtb	r3, r3
 80167ac:	e018      	b.n	80167e0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b0>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 80167ae:	2300      	movs	r3, #0
 80167b0:	e016      	b.n	80167e0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b0>
#if IP_REASS_CHECK_OVERLAP
freepbuf:
 80167b2:	bf00      	nop
 80167b4:	e004      	b.n	80167c0 <ip_reass_chain_frag_into_datagram_and_validate+0x290>
          goto freepbuf;
 80167b6:	bf00      	nop
 80167b8:	e002      	b.n	80167c0 <ip_reass_chain_frag_into_datagram_and_validate+0x290>
      goto freepbuf;
 80167ba:	bf00      	nop
 80167bc:	e000      	b.n	80167c0 <ip_reass_chain_frag_into_datagram_and_validate+0x290>
      goto freepbuf;
 80167be:	bf00      	nop
  ip_reass_pbufcount -= pbuf_clen(new_p);
 80167c0:	68b8      	ldr	r0, [r7, #8]
 80167c2:	f7f7 f86f 	bl	800d8a4 <pbuf_clen>
 80167c6:	4603      	mov	r3, r0
 80167c8:	461a      	mov	r2, r3
 80167ca:	4b0d      	ldr	r3, [pc, #52]	; (8016800 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 80167cc:	881b      	ldrh	r3, [r3, #0]
 80167ce:	1a9b      	subs	r3, r3, r2
 80167d0:	b29a      	uxth	r2, r3
 80167d2:	4b0b      	ldr	r3, [pc, #44]	; (8016800 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 80167d4:	801a      	strh	r2, [r3, #0]
  pbuf_free(new_p);
 80167d6:	68b8      	ldr	r0, [r7, #8]
 80167d8:	f7f6 ffca 	bl	800d770 <pbuf_free>
  return IP_REASS_VALIDATE_PBUF_DROPPED;
 80167dc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
#endif /* IP_REASS_CHECK_OVERLAP */
}
 80167e0:	4618      	mov	r0, r3
 80167e2:	3730      	adds	r7, #48	; 0x30
 80167e4:	46bd      	mov	sp, r7
 80167e6:	bd80      	pop	{r7, pc}
 80167e8:	0801aa90 	.word	0x0801aa90
 80167ec:	0801ab6c 	.word	0x0801ab6c
 80167f0:	0801aad8 	.word	0x0801aad8
 80167f4:	0801ab8c 	.word	0x0801ab8c
 80167f8:	0801abc4 	.word	0x0801abc4
 80167fc:	0801abd4 	.word	0x0801abd4
 8016800:	20004cb4 	.word	0x20004cb4

08016804 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 8016804:	b580      	push	{r7, lr}
 8016806:	b08e      	sub	sp, #56	; 0x38
 8016808:	af00      	add	r7, sp, #0
 801680a:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr*)p->payload;
 801680c:	687b      	ldr	r3, [r7, #4]
 801680e:	685b      	ldr	r3, [r3, #4]
 8016810:	62bb      	str	r3, [r7, #40]	; 0x28

  if ((IPH_HL(fraghdr) * 4) != IP_HLEN) {
 8016812:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016814:	781b      	ldrb	r3, [r3, #0]
 8016816:	f003 030f 	and.w	r3, r3, #15
 801681a:	009b      	lsls	r3, r3, #2
 801681c:	2b14      	cmp	r3, #20
 801681e:	f040 8131 	bne.w	8016a84 <ip4_reass+0x280>
    LWIP_DEBUGF(IP_REASS_DEBUG,("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = (lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) * 8;
 8016822:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016824:	88db      	ldrh	r3, [r3, #6]
 8016826:	b29b      	uxth	r3, r3
 8016828:	4618      	mov	r0, r3
 801682a:	f7f5 fdff 	bl	800c42c <lwip_htons>
 801682e:	4603      	mov	r3, r0
 8016830:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8016834:	b29b      	uxth	r3, r3
 8016836:	00db      	lsls	r3, r3, #3
 8016838:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr)) - IPH_HL(fraghdr) * 4;
 801683a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801683c:	885b      	ldrh	r3, [r3, #2]
 801683e:	b29b      	uxth	r3, r3
 8016840:	4618      	mov	r0, r3
 8016842:	f7f5 fdf3 	bl	800c42c <lwip_htons>
 8016846:	4603      	mov	r3, r0
 8016848:	461a      	mov	r2, r3
 801684a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801684c:	781b      	ldrb	r3, [r3, #0]
 801684e:	b29b      	uxth	r3, r3
 8016850:	f003 030f 	and.w	r3, r3, #15
 8016854:	b29b      	uxth	r3, r3
 8016856:	009b      	lsls	r3, r3, #2
 8016858:	b29b      	uxth	r3, r3
 801685a:	1ad3      	subs	r3, r2, r3
 801685c:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 801685e:	6878      	ldr	r0, [r7, #4]
 8016860:	f7f7 f820 	bl	800d8a4 <pbuf_clen>
 8016864:	4603      	mov	r3, r0
 8016866:	847b      	strh	r3, [r7, #34]	; 0x22
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 8016868:	4b8d      	ldr	r3, [pc, #564]	; (8016aa0 <ip4_reass+0x29c>)
 801686a:	881b      	ldrh	r3, [r3, #0]
 801686c:	461a      	mov	r2, r3
 801686e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8016870:	4413      	add	r3, r2
 8016872:	2b0a      	cmp	r3, #10
 8016874:	dd10      	ble.n	8016898 <ip4_reass+0x94>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8016876:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8016878:	4619      	mov	r1, r3
 801687a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801687c:	f7ff fd8e 	bl	801639c <ip_reass_remove_oldest_datagram>
 8016880:	4603      	mov	r3, r0
 8016882:	2b00      	cmp	r3, #0
 8016884:	f000 8100 	beq.w	8016a88 <ip4_reass+0x284>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 8016888:	4b85      	ldr	r3, [pc, #532]	; (8016aa0 <ip4_reass+0x29c>)
 801688a:	881b      	ldrh	r3, [r3, #0]
 801688c:	461a      	mov	r2, r3
 801688e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8016890:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8016892:	2b0a      	cmp	r3, #10
 8016894:	f300 80f8 	bgt.w	8016a88 <ip4_reass+0x284>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8016898:	4b82      	ldr	r3, [pc, #520]	; (8016aa4 <ip4_reass+0x2a0>)
 801689a:	681b      	ldr	r3, [r3, #0]
 801689c:	633b      	str	r3, [r7, #48]	; 0x30
 801689e:	e015      	b.n	80168cc <ip4_reass+0xc8>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 80168a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80168a2:	695a      	ldr	r2, [r3, #20]
 80168a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80168a6:	68db      	ldr	r3, [r3, #12]
 80168a8:	429a      	cmp	r2, r3
 80168aa:	d10c      	bne.n	80168c6 <ip4_reass+0xc2>
 80168ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80168ae:	699a      	ldr	r2, [r3, #24]
 80168b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80168b2:	691b      	ldr	r3, [r3, #16]
 80168b4:	429a      	cmp	r2, r3
 80168b6:	d106      	bne.n	80168c6 <ip4_reass+0xc2>
 80168b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80168ba:	899a      	ldrh	r2, [r3, #12]
 80168bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80168be:	889b      	ldrh	r3, [r3, #4]
 80168c0:	b29b      	uxth	r3, r3
 80168c2:	429a      	cmp	r2, r3
 80168c4:	d006      	beq.n	80168d4 <ip4_reass+0xd0>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 80168c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80168c8:	681b      	ldr	r3, [r3, #0]
 80168ca:	633b      	str	r3, [r7, #48]	; 0x30
 80168cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80168ce:	2b00      	cmp	r3, #0
 80168d0:	d1e6      	bne.n	80168a0 <ip4_reass+0x9c>
 80168d2:	e000      	b.n	80168d6 <ip4_reass+0xd2>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
        lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 80168d4:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 80168d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80168d8:	2b00      	cmp	r3, #0
 80168da:	d109      	bne.n	80168f0 <ip4_reass+0xec>
  /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 80168dc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80168de:	4619      	mov	r1, r3
 80168e0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80168e2:	f7ff fdbd 	bl	8016460 <ip_reass_enqueue_new_datagram>
 80168e6:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 80168e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80168ea:	2b00      	cmp	r3, #0
 80168ec:	d11c      	bne.n	8016928 <ip4_reass+0x124>
      goto nullreturn;
 80168ee:	e0ce      	b.n	8016a8e <ip4_reass+0x28a>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 80168f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80168f2:	88db      	ldrh	r3, [r3, #6]
 80168f4:	b29b      	uxth	r3, r3
 80168f6:	4618      	mov	r0, r3
 80168f8:	f7f5 fd98 	bl	800c42c <lwip_htons>
 80168fc:	4603      	mov	r3, r0
 80168fe:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8016902:	2b00      	cmp	r3, #0
 8016904:	d110      	bne.n	8016928 <ip4_reass+0x124>
      ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 8016906:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016908:	89db      	ldrh	r3, [r3, #14]
 801690a:	4618      	mov	r0, r3
 801690c:	f7f5 fd8e 	bl	800c42c <lwip_htons>
 8016910:	4603      	mov	r3, r0
 8016912:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8016916:	2b00      	cmp	r3, #0
 8016918:	d006      	beq.n	8016928 <ip4_reass+0x124>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 801691a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801691c:	3308      	adds	r3, #8
 801691e:	2214      	movs	r2, #20
 8016920:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8016922:	4618      	mov	r0, r3
 8016924:	f001 f937 	bl	8017b96 <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 8016928:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801692a:	88db      	ldrh	r3, [r3, #6]
 801692c:	b29b      	uxth	r3, r3
 801692e:	f003 0320 	and.w	r3, r3, #32
 8016932:	2b00      	cmp	r3, #0
 8016934:	bf0c      	ite	eq
 8016936:	2301      	moveq	r3, #1
 8016938:	2300      	movne	r3, #0
 801693a:	b2db      	uxtb	r3, r3
 801693c:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 801693e:	69fb      	ldr	r3, [r7, #28]
 8016940:	2b00      	cmp	r3, #0
 8016942:	d00e      	beq.n	8016962 <ip4_reass+0x15e>
    u16_t datagram_len = (u16_t)(offset + len);
 8016944:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8016946:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8016948:	4413      	add	r3, r2
 801694a:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 801694c:	8b7a      	ldrh	r2, [r7, #26]
 801694e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8016950:	429a      	cmp	r2, r3
 8016952:	f0c0 8099 	bcc.w	8016a88 <ip4_reass+0x284>
 8016956:	8b7b      	ldrh	r3, [r7, #26]
 8016958:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 801695c:	4293      	cmp	r3, r2
 801695e:	f200 8093 	bhi.w	8016a88 <ip4_reass+0x284>
      goto nullreturn;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 8016962:	69fa      	ldr	r2, [r7, #28]
 8016964:	6879      	ldr	r1, [r7, #4]
 8016966:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8016968:	f7ff fde2 	bl	8016530 <ip_reass_chain_frag_into_datagram_and_validate>
 801696c:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 801696e:	697b      	ldr	r3, [r7, #20]
 8016970:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8016974:	f000 808a 	beq.w	8016a8c <ip4_reass+0x288>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 8016978:	4b49      	ldr	r3, [pc, #292]	; (8016aa0 <ip4_reass+0x29c>)
 801697a:	881a      	ldrh	r2, [r3, #0]
 801697c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801697e:	4413      	add	r3, r2
 8016980:	b29a      	uxth	r2, r3
 8016982:	4b47      	ldr	r3, [pc, #284]	; (8016aa0 <ip4_reass+0x29c>)
 8016984:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 8016986:	69fb      	ldr	r3, [r7, #28]
 8016988:	2b00      	cmp	r3, #0
 801698a:	d00d      	beq.n	80169a8 <ip4_reass+0x1a4>
    u16_t datagram_len = (u16_t)(offset + len);
 801698c:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 801698e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8016990:	4413      	add	r3, r2
 8016992:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 8016994:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016996:	8a7a      	ldrh	r2, [r7, #18]
 8016998:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 801699a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801699c:	7f9b      	ldrb	r3, [r3, #30]
 801699e:	f043 0301 	orr.w	r3, r3, #1
 80169a2:	b2da      	uxtb	r2, r3
 80169a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80169a6:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
     ("ip4_reass: last fragment seen, total len %"S16_F"\n",
      ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 80169a8:	697b      	ldr	r3, [r7, #20]
 80169aa:	2b01      	cmp	r3, #1
 80169ac:	d168      	bne.n	8016a80 <ip4_reass+0x27c>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    ipr->datagram_len += IP_HLEN;
 80169ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80169b0:	8b9b      	ldrh	r3, [r3, #28]
 80169b2:	3314      	adds	r3, #20
 80169b4:	b29a      	uxth	r2, r3
 80169b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80169b8:	839a      	strh	r2, [r3, #28]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper*)ipr->p->payload)->next_pbuf;
 80169ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80169bc:	685b      	ldr	r3, [r3, #4]
 80169be:	685b      	ldr	r3, [r3, #4]
 80169c0:	681b      	ldr	r3, [r3, #0]
 80169c2:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr*)(ipr->p->payload);
 80169c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80169c6:	685b      	ldr	r3, [r3, #4]
 80169c8:	685b      	ldr	r3, [r3, #4]
 80169ca:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 80169cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80169ce:	3308      	adds	r3, #8
 80169d0:	2214      	movs	r2, #20
 80169d2:	4619      	mov	r1, r3
 80169d4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80169d6:	f001 f8de 	bl	8017b96 <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(ipr->datagram_len));
 80169da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80169dc:	8b9b      	ldrh	r3, [r3, #28]
 80169de:	4618      	mov	r0, r3
 80169e0:	f7f5 fd24 	bl	800c42c <lwip_htons>
 80169e4:	4603      	mov	r3, r0
 80169e6:	461a      	mov	r2, r3
 80169e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80169ea:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 80169ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80169ee:	2200      	movs	r2, #0
 80169f0:	719a      	strb	r2, [r3, #6]
 80169f2:	2200      	movs	r2, #0
 80169f4:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 80169f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80169f8:	2200      	movs	r2, #0
 80169fa:	729a      	strb	r2, [r3, #10]
 80169fc:	2200      	movs	r2, #0
 80169fe:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 8016a00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016a02:	685b      	ldr	r3, [r3, #4]
 8016a04:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 8016a06:	e00e      	b.n	8016a26 <ip4_reass+0x222>
      iprh = (struct ip_reass_helper*)r->payload;
 8016a08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016a0a:	685b      	ldr	r3, [r3, #4]
 8016a0c:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_header(r, -IP_HLEN);
 8016a0e:	f06f 0113 	mvn.w	r1, #19
 8016a12:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8016a14:	f7f6 fe88 	bl	800d728 <pbuf_header>
      pbuf_cat(p, r);
 8016a18:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8016a1a:	6878      	ldr	r0, [r7, #4]
 8016a1c:	f7f6 ff82 	bl	800d924 <pbuf_cat>
      r = iprh->next_pbuf;
 8016a20:	68fb      	ldr	r3, [r7, #12]
 8016a22:	681b      	ldr	r3, [r3, #0]
 8016a24:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 8016a26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016a28:	2b00      	cmp	r3, #0
 8016a2a:	d1ed      	bne.n	8016a08 <ip4_reass+0x204>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 8016a2c:	4b1d      	ldr	r3, [pc, #116]	; (8016aa4 <ip4_reass+0x2a0>)
 8016a2e:	681b      	ldr	r3, [r3, #0]
 8016a30:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8016a32:	429a      	cmp	r2, r3
 8016a34:	d102      	bne.n	8016a3c <ip4_reass+0x238>
      ipr_prev = NULL;
 8016a36:	2300      	movs	r3, #0
 8016a38:	62fb      	str	r3, [r7, #44]	; 0x2c
 8016a3a:	e010      	b.n	8016a5e <ip4_reass+0x25a>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8016a3c:	4b19      	ldr	r3, [pc, #100]	; (8016aa4 <ip4_reass+0x2a0>)
 8016a3e:	681b      	ldr	r3, [r3, #0]
 8016a40:	62fb      	str	r3, [r7, #44]	; 0x2c
 8016a42:	e007      	b.n	8016a54 <ip4_reass+0x250>
        if (ipr_prev->next == ipr) {
 8016a44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016a46:	681b      	ldr	r3, [r3, #0]
 8016a48:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8016a4a:	429a      	cmp	r2, r3
 8016a4c:	d006      	beq.n	8016a5c <ip4_reass+0x258>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8016a4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016a50:	681b      	ldr	r3, [r3, #0]
 8016a52:	62fb      	str	r3, [r7, #44]	; 0x2c
 8016a54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016a56:	2b00      	cmp	r3, #0
 8016a58:	d1f4      	bne.n	8016a44 <ip4_reass+0x240>
 8016a5a:	e000      	b.n	8016a5e <ip4_reass+0x25a>
          break;
 8016a5c:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 8016a5e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8016a60:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8016a62:	f7ff fd37 	bl	80164d4 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    ip_reass_pbufcount -= pbuf_clen(p);
 8016a66:	6878      	ldr	r0, [r7, #4]
 8016a68:	f7f6 ff1c 	bl	800d8a4 <pbuf_clen>
 8016a6c:	4603      	mov	r3, r0
 8016a6e:	461a      	mov	r2, r3
 8016a70:	4b0b      	ldr	r3, [pc, #44]	; (8016aa0 <ip4_reass+0x29c>)
 8016a72:	881b      	ldrh	r3, [r3, #0]
 8016a74:	1a9b      	subs	r3, r3, r2
 8016a76:	b29a      	uxth	r2, r3
 8016a78:	4b09      	ldr	r3, [pc, #36]	; (8016aa0 <ip4_reass+0x29c>)
 8016a7a:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 8016a7c:	687b      	ldr	r3, [r7, #4]
 8016a7e:	e00a      	b.n	8016a96 <ip4_reass+0x292>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG,("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 8016a80:	2300      	movs	r3, #0
 8016a82:	e008      	b.n	8016a96 <ip4_reass+0x292>
    goto nullreturn;
 8016a84:	bf00      	nop
 8016a86:	e002      	b.n	8016a8e <ip4_reass+0x28a>

nullreturn:
 8016a88:	bf00      	nop
 8016a8a:	e000      	b.n	8016a8e <ip4_reass+0x28a>
    goto nullreturn;
 8016a8c:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG,("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 8016a8e:	6878      	ldr	r0, [r7, #4]
 8016a90:	f7f6 fe6e 	bl	800d770 <pbuf_free>
  return NULL;
 8016a94:	2300      	movs	r3, #0
}
 8016a96:	4618      	mov	r0, r3
 8016a98:	3738      	adds	r7, #56	; 0x38
 8016a9a:	46bd      	mov	sp, r7
 8016a9c:	bd80      	pop	{r7, pc}
 8016a9e:	bf00      	nop
 8016aa0:	20004cb4 	.word	0x20004cb4
 8016aa4:	20004cb0 	.word	0x20004cb0

08016aa8 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref*
ip_frag_alloc_pbuf_custom_ref(void)
{
 8016aa8:	b580      	push	{r7, lr}
 8016aaa:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref*)memp_malloc(MEMP_FRAG_PBUF);
 8016aac:	2005      	movs	r0, #5
 8016aae:	f7f6 f8ab 	bl	800cc08 <memp_malloc>
 8016ab2:	4603      	mov	r3, r0
}
 8016ab4:	4618      	mov	r0, r3
 8016ab6:	bd80      	pop	{r7, pc}

08016ab8 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref* p)
{
 8016ab8:	b580      	push	{r7, lr}
 8016aba:	b082      	sub	sp, #8
 8016abc:	af00      	add	r7, sp, #0
 8016abe:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 8016ac0:	687b      	ldr	r3, [r7, #4]
 8016ac2:	2b00      	cmp	r3, #0
 8016ac4:	d106      	bne.n	8016ad4 <ip_frag_free_pbuf_custom_ref+0x1c>
 8016ac6:	4b07      	ldr	r3, [pc, #28]	; (8016ae4 <ip_frag_free_pbuf_custom_ref+0x2c>)
 8016ac8:	f240 22ae 	movw	r2, #686	; 0x2ae
 8016acc:	4906      	ldr	r1, [pc, #24]	; (8016ae8 <ip_frag_free_pbuf_custom_ref+0x30>)
 8016ace:	4807      	ldr	r0, [pc, #28]	; (8016aec <ip_frag_free_pbuf_custom_ref+0x34>)
 8016ad0:	f001 f91c 	bl	8017d0c <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 8016ad4:	6879      	ldr	r1, [r7, #4]
 8016ad6:	2005      	movs	r0, #5
 8016ad8:	f7f6 f8e8 	bl	800ccac <memp_free>
}
 8016adc:	bf00      	nop
 8016ade:	3708      	adds	r7, #8
 8016ae0:	46bd      	mov	sp, r7
 8016ae2:	bd80      	pop	{r7, pc}
 8016ae4:	0801aa90 	.word	0x0801aa90
 8016ae8:	0801abf8 	.word	0x0801abf8
 8016aec:	0801aad8 	.word	0x0801aad8

08016af0 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 8016af0:	b580      	push	{r7, lr}
 8016af2:	b084      	sub	sp, #16
 8016af4:	af00      	add	r7, sp, #0
 8016af6:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref*)p;
 8016af8:	687b      	ldr	r3, [r7, #4]
 8016afa:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 8016afc:	68fb      	ldr	r3, [r7, #12]
 8016afe:	2b00      	cmp	r3, #0
 8016b00:	d106      	bne.n	8016b10 <ipfrag_free_pbuf_custom+0x20>
 8016b02:	4b11      	ldr	r3, [pc, #68]	; (8016b48 <ipfrag_free_pbuf_custom+0x58>)
 8016b04:	f44f 722e 	mov.w	r2, #696	; 0x2b8
 8016b08:	4910      	ldr	r1, [pc, #64]	; (8016b4c <ipfrag_free_pbuf_custom+0x5c>)
 8016b0a:	4811      	ldr	r0, [pc, #68]	; (8016b50 <ipfrag_free_pbuf_custom+0x60>)
 8016b0c:	f001 f8fe 	bl	8017d0c <iprintf>
  LWIP_ASSERT("pcr == p", (void*)pcr == (void*)p);
 8016b10:	68fa      	ldr	r2, [r7, #12]
 8016b12:	687b      	ldr	r3, [r7, #4]
 8016b14:	429a      	cmp	r2, r3
 8016b16:	d006      	beq.n	8016b26 <ipfrag_free_pbuf_custom+0x36>
 8016b18:	4b0b      	ldr	r3, [pc, #44]	; (8016b48 <ipfrag_free_pbuf_custom+0x58>)
 8016b1a:	f240 22b9 	movw	r2, #697	; 0x2b9
 8016b1e:	490d      	ldr	r1, [pc, #52]	; (8016b54 <ipfrag_free_pbuf_custom+0x64>)
 8016b20:	480b      	ldr	r0, [pc, #44]	; (8016b50 <ipfrag_free_pbuf_custom+0x60>)
 8016b22:	f001 f8f3 	bl	8017d0c <iprintf>
  if (pcr->original != NULL) {
 8016b26:	68fb      	ldr	r3, [r7, #12]
 8016b28:	695b      	ldr	r3, [r3, #20]
 8016b2a:	2b00      	cmp	r3, #0
 8016b2c:	d004      	beq.n	8016b38 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 8016b2e:	68fb      	ldr	r3, [r7, #12]
 8016b30:	695b      	ldr	r3, [r3, #20]
 8016b32:	4618      	mov	r0, r3
 8016b34:	f7f6 fe1c 	bl	800d770 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 8016b38:	68f8      	ldr	r0, [r7, #12]
 8016b3a:	f7ff ffbd 	bl	8016ab8 <ip_frag_free_pbuf_custom_ref>
}
 8016b3e:	bf00      	nop
 8016b40:	3710      	adds	r7, #16
 8016b42:	46bd      	mov	sp, r7
 8016b44:	bd80      	pop	{r7, pc}
 8016b46:	bf00      	nop
 8016b48:	0801aa90 	.word	0x0801aa90
 8016b4c:	0801ac04 	.word	0x0801ac04
 8016b50:	0801aad8 	.word	0x0801aad8
 8016b54:	0801ac10 	.word	0x0801ac10

08016b58 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 8016b58:	b580      	push	{r7, lr}
 8016b5a:	b092      	sub	sp, #72	; 0x48
 8016b5c:	af02      	add	r7, sp, #8
 8016b5e:	60f8      	str	r0, [r7, #12]
 8016b60:	60b9      	str	r1, [r7, #8]
 8016b62:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 8016b64:	2300      	movs	r3, #0
 8016b66:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (netif->mtu - IP_HLEN) / 8;
 8016b68:	68bb      	ldr	r3, [r7, #8]
 8016b6a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8016b6c:	3b14      	subs	r3, #20
 8016b6e:	2b00      	cmp	r3, #0
 8016b70:	da00      	bge.n	8016b74 <ip4_frag+0x1c>
 8016b72:	3307      	adds	r3, #7
 8016b74:	10db      	asrs	r3, r3, #3
 8016b76:	867b      	strh	r3, [r7, #50]	; 0x32
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 8016b78:	2314      	movs	r3, #20
 8016b7a:	86fb      	strh	r3, [r7, #54]	; 0x36
  u16_t tmp;

  original_iphdr = (struct ip_hdr *)p->payload;
 8016b7c:	68fb      	ldr	r3, [r7, #12]
 8016b7e:	685b      	ldr	r3, [r3, #4]
 8016b80:	62fb      	str	r3, [r7, #44]	; 0x2c
  iphdr = original_iphdr;
 8016b82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016b84:	62bb      	str	r3, [r7, #40]	; 0x28
  LWIP_ERROR("ip4_frag() does not support IP options", IPH_HL(iphdr) * 4 == IP_HLEN, return ERR_VAL);
 8016b86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016b88:	781b      	ldrb	r3, [r3, #0]
 8016b8a:	f003 030f 	and.w	r3, r3, #15
 8016b8e:	009b      	lsls	r3, r3, #2
 8016b90:	2b14      	cmp	r3, #20
 8016b92:	d009      	beq.n	8016ba8 <ip4_frag+0x50>
 8016b94:	4b79      	ldr	r3, [pc, #484]	; (8016d7c <ip4_frag+0x224>)
 8016b96:	f240 22e1 	movw	r2, #737	; 0x2e1
 8016b9a:	4979      	ldr	r1, [pc, #484]	; (8016d80 <ip4_frag+0x228>)
 8016b9c:	4879      	ldr	r0, [pc, #484]	; (8016d84 <ip4_frag+0x22c>)
 8016b9e:	f001 f8b5 	bl	8017d0c <iprintf>
 8016ba2:	f06f 0305 	mvn.w	r3, #5
 8016ba6:	e0e5      	b.n	8016d74 <ip4_frag+0x21c>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 8016ba8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016baa:	88db      	ldrh	r3, [r3, #6]
 8016bac:	b29b      	uxth	r3, r3
 8016bae:	4618      	mov	r0, r3
 8016bb0:	f7f5 fc3c 	bl	800c42c <lwip_htons>
 8016bb4:	4603      	mov	r3, r0
 8016bb6:	86bb      	strh	r3, [r7, #52]	; 0x34
  ofo = tmp & IP_OFFMASK;
 8016bb8:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8016bba:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8016bbe:	873b      	strh	r3, [r7, #56]	; 0x38
  LWIP_ERROR("ip_frag(): MF already set", (tmp & IP_MF) == 0, return ERR_VAL);
 8016bc0:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8016bc2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8016bc6:	2b00      	cmp	r3, #0
 8016bc8:	d009      	beq.n	8016bde <ip4_frag+0x86>
 8016bca:	4b6c      	ldr	r3, [pc, #432]	; (8016d7c <ip4_frag+0x224>)
 8016bcc:	f240 22e6 	movw	r2, #742	; 0x2e6
 8016bd0:	496d      	ldr	r1, [pc, #436]	; (8016d88 <ip4_frag+0x230>)
 8016bd2:	486c      	ldr	r0, [pc, #432]	; (8016d84 <ip4_frag+0x22c>)
 8016bd4:	f001 f89a 	bl	8017d0c <iprintf>
 8016bd8:	f06f 0305 	mvn.w	r3, #5
 8016bdc:	e0ca      	b.n	8016d74 <ip4_frag+0x21c>

  left = p->tot_len - IP_HLEN;
 8016bde:	68fb      	ldr	r3, [r7, #12]
 8016be0:	891b      	ldrh	r3, [r3, #8]
 8016be2:	3b14      	subs	r3, #20
 8016be4:	877b      	strh	r3, [r7, #58]	; 0x3a

  while (left) {
 8016be6:	e0bc      	b.n	8016d62 <ip4_frag+0x20a>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, nfb * 8);
 8016be8:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8016bea:	00da      	lsls	r2, r3, #3
 8016bec:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8016bee:	4293      	cmp	r3, r2
 8016bf0:	bfa8      	it	ge
 8016bf2:	4613      	movge	r3, r2
 8016bf4:	84fb      	strh	r3, [r7, #38]	; 0x26
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 8016bf6:	2200      	movs	r2, #0
 8016bf8:	2114      	movs	r1, #20
 8016bfa:	2002      	movs	r0, #2
 8016bfc:	f7f6 fa46 	bl	800d08c <pbuf_alloc>
 8016c00:	6238      	str	r0, [r7, #32]
    if (rambuf == NULL) {
 8016c02:	6a3b      	ldr	r3, [r7, #32]
 8016c04:	2b00      	cmp	r3, #0
 8016c06:	f000 80b2 	beq.w	8016d6e <ip4_frag+0x216>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 8016c0a:	68fb      	ldr	r3, [r7, #12]
 8016c0c:	895b      	ldrh	r3, [r3, #10]
 8016c0e:	2b13      	cmp	r3, #19
 8016c10:	d806      	bhi.n	8016c20 <ip4_frag+0xc8>
 8016c12:	4b5a      	ldr	r3, [pc, #360]	; (8016d7c <ip4_frag+0x224>)
 8016c14:	f240 3209 	movw	r2, #777	; 0x309
 8016c18:	495c      	ldr	r1, [pc, #368]	; (8016d8c <ip4_frag+0x234>)
 8016c1a:	485a      	ldr	r0, [pc, #360]	; (8016d84 <ip4_frag+0x22c>)
 8016c1c:	f001 f876 	bl	8017d0c <iprintf>
                (p->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 8016c20:	6a3b      	ldr	r3, [r7, #32]
 8016c22:	685b      	ldr	r3, [r3, #4]
 8016c24:	2214      	movs	r2, #20
 8016c26:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8016c28:	4618      	mov	r0, r3
 8016c2a:	f000 ffb4 	bl	8017b96 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 8016c2e:	6a3b      	ldr	r3, [r7, #32]
 8016c30:	685b      	ldr	r3, [r3, #4]
 8016c32:	62bb      	str	r3, [r7, #40]	; 0x28

    left_to_copy = fragsize;
 8016c34:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8016c36:	87bb      	strh	r3, [r7, #60]	; 0x3c
    while (left_to_copy) {
 8016c38:	e04f      	b.n	8016cda <ip4_frag+0x182>
      struct pbuf_custom_ref *pcr;
      u16_t plen = p->len - poff;
 8016c3a:	68fb      	ldr	r3, [r7, #12]
 8016c3c:	895a      	ldrh	r2, [r3, #10]
 8016c3e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8016c40:	1ad3      	subs	r3, r2, r3
 8016c42:	837b      	strh	r3, [r7, #26]
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 8016c44:	8b7a      	ldrh	r2, [r7, #26]
 8016c46:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8016c48:	4293      	cmp	r3, r2
 8016c4a:	bf28      	it	cs
 8016c4c:	4613      	movcs	r3, r2
 8016c4e:	87fb      	strh	r3, [r7, #62]	; 0x3e
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 8016c50:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8016c52:	2b00      	cmp	r3, #0
 8016c54:	d105      	bne.n	8016c62 <ip4_frag+0x10a>
        poff = 0;
 8016c56:	2300      	movs	r3, #0
 8016c58:	86fb      	strh	r3, [r7, #54]	; 0x36
        p = p->next;
 8016c5a:	68fb      	ldr	r3, [r7, #12]
 8016c5c:	681b      	ldr	r3, [r3, #0]
 8016c5e:	60fb      	str	r3, [r7, #12]
        continue;
 8016c60:	e03b      	b.n	8016cda <ip4_frag+0x182>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 8016c62:	f7ff ff21 	bl	8016aa8 <ip_frag_alloc_pbuf_custom_ref>
 8016c66:	6178      	str	r0, [r7, #20]
      if (pcr == NULL) {
 8016c68:	697b      	ldr	r3, [r7, #20]
 8016c6a:	2b00      	cmp	r3, #0
 8016c6c:	d103      	bne.n	8016c76 <ip4_frag+0x11e>
        pbuf_free(rambuf);
 8016c6e:	6a38      	ldr	r0, [r7, #32]
 8016c70:	f7f6 fd7e 	bl	800d770 <pbuf_free>
        goto memerr;
 8016c74:	e07c      	b.n	8016d70 <ip4_frag+0x218>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8016c76:	6978      	ldr	r0, [r7, #20]
        (u8_t*)p->payload + poff, newpbuflen);
 8016c78:	68fb      	ldr	r3, [r7, #12]
 8016c7a:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8016c7c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8016c7e:	4413      	add	r3, r2
 8016c80:	8ff9      	ldrh	r1, [r7, #62]	; 0x3e
 8016c82:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8016c84:	9201      	str	r2, [sp, #4]
 8016c86:	9300      	str	r3, [sp, #0]
 8016c88:	4603      	mov	r3, r0
 8016c8a:	2202      	movs	r2, #2
 8016c8c:	2004      	movs	r0, #4
 8016c8e:	f7f6 fb91 	bl	800d3b4 <pbuf_alloced_custom>
 8016c92:	6138      	str	r0, [r7, #16]
      if (newpbuf == NULL) {
 8016c94:	693b      	ldr	r3, [r7, #16]
 8016c96:	2b00      	cmp	r3, #0
 8016c98:	d106      	bne.n	8016ca8 <ip4_frag+0x150>
        ip_frag_free_pbuf_custom_ref(pcr);
 8016c9a:	6978      	ldr	r0, [r7, #20]
 8016c9c:	f7ff ff0c 	bl	8016ab8 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 8016ca0:	6a38      	ldr	r0, [r7, #32]
 8016ca2:	f7f6 fd65 	bl	800d770 <pbuf_free>
        goto memerr;
 8016ca6:	e063      	b.n	8016d70 <ip4_frag+0x218>
      }
      pbuf_ref(p);
 8016ca8:	68f8      	ldr	r0, [r7, #12]
 8016caa:	f7f6 fe13 	bl	800d8d4 <pbuf_ref>
      pcr->original = p;
 8016cae:	697b      	ldr	r3, [r7, #20]
 8016cb0:	68fa      	ldr	r2, [r7, #12]
 8016cb2:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 8016cb4:	697b      	ldr	r3, [r7, #20]
 8016cb6:	4a36      	ldr	r2, [pc, #216]	; (8016d90 <ip4_frag+0x238>)
 8016cb8:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 8016cba:	6939      	ldr	r1, [r7, #16]
 8016cbc:	6a38      	ldr	r0, [r7, #32]
 8016cbe:	f7f6 fe31 	bl	800d924 <pbuf_cat>
      left_to_copy -= newpbuflen;
 8016cc2:	8fba      	ldrh	r2, [r7, #60]	; 0x3c
 8016cc4:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8016cc6:	1ad3      	subs	r3, r2, r3
 8016cc8:	87bb      	strh	r3, [r7, #60]	; 0x3c
      if (left_to_copy) {
 8016cca:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8016ccc:	2b00      	cmp	r3, #0
 8016cce:	d004      	beq.n	8016cda <ip4_frag+0x182>
        poff = 0;
 8016cd0:	2300      	movs	r3, #0
 8016cd2:	86fb      	strh	r3, [r7, #54]	; 0x36
        p = p->next;
 8016cd4:	68fb      	ldr	r3, [r7, #12]
 8016cd6:	681b      	ldr	r3, [r3, #0]
 8016cd8:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 8016cda:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8016cdc:	2b00      	cmp	r3, #0
 8016cde:	d1ac      	bne.n	8016c3a <ip4_frag+0xe2>
      }
    }
    poff += newpbuflen;
 8016ce0:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8016ce2:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8016ce4:	4413      	add	r3, r2
 8016ce6:	86fb      	strh	r3, [r7, #54]	; 0x36
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 8016ce8:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8016cea:	68bb      	ldr	r3, [r7, #8]
 8016cec:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8016cee:	3b14      	subs	r3, #20
 8016cf0:	429a      	cmp	r2, r3
 8016cf2:	bfd4      	ite	le
 8016cf4:	2301      	movle	r3, #1
 8016cf6:	2300      	movgt	r3, #0
 8016cf8:	b2db      	uxtb	r3, r3
 8016cfa:	61fb      	str	r3, [r7, #28]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 8016cfc:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8016cfe:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8016d02:	86bb      	strh	r3, [r7, #52]	; 0x34
    if (!last) {
 8016d04:	69fb      	ldr	r3, [r7, #28]
 8016d06:	2b00      	cmp	r3, #0
 8016d08:	d103      	bne.n	8016d12 <ip4_frag+0x1ba>
      tmp = tmp | IP_MF;
 8016d0a:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8016d0c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8016d10:	86bb      	strh	r3, [r7, #52]	; 0x34
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 8016d12:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8016d14:	4618      	mov	r0, r3
 8016d16:	f7f5 fb89 	bl	800c42c <lwip_htons>
 8016d1a:	4603      	mov	r3, r0
 8016d1c:	461a      	mov	r2, r3
 8016d1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016d20:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons(fragsize + IP_HLEN));
 8016d22:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8016d24:	3314      	adds	r3, #20
 8016d26:	b29b      	uxth	r3, r3
 8016d28:	4618      	mov	r0, r3
 8016d2a:	f7f5 fb7f 	bl	800c42c <lwip_htons>
 8016d2e:	4603      	mov	r3, r0
 8016d30:	461a      	mov	r2, r3
 8016d32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016d34:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 8016d36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016d38:	2200      	movs	r2, #0
 8016d3a:	729a      	strb	r2, [r3, #10]
 8016d3c:	2200      	movs	r2, #0
 8016d3e:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 8016d40:	68bb      	ldr	r3, [r7, #8]
 8016d42:	695b      	ldr	r3, [r3, #20]
 8016d44:	687a      	ldr	r2, [r7, #4]
 8016d46:	6a39      	ldr	r1, [r7, #32]
 8016d48:	68b8      	ldr	r0, [r7, #8]
 8016d4a:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 8016d4c:	6a38      	ldr	r0, [r7, #32]
 8016d4e:	f7f6 fd0f 	bl	800d770 <pbuf_free>
    left -= fragsize;
 8016d52:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8016d54:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8016d56:	1ad3      	subs	r3, r2, r3
 8016d58:	877b      	strh	r3, [r7, #58]	; 0x3a
    ofo += nfb;
 8016d5a:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 8016d5c:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8016d5e:	4413      	add	r3, r2
 8016d60:	873b      	strh	r3, [r7, #56]	; 0x38
  while (left) {
 8016d62:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8016d64:	2b00      	cmp	r3, #0
 8016d66:	f47f af3f 	bne.w	8016be8 <ip4_frag+0x90>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 8016d6a:	2300      	movs	r3, #0
 8016d6c:	e002      	b.n	8016d74 <ip4_frag+0x21c>
      goto memerr;
 8016d6e:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 8016d70:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8016d74:	4618      	mov	r0, r3
 8016d76:	3740      	adds	r7, #64	; 0x40
 8016d78:	46bd      	mov	sp, r7
 8016d7a:	bd80      	pop	{r7, pc}
 8016d7c:	0801aa90 	.word	0x0801aa90
 8016d80:	0801ac1c 	.word	0x0801ac1c
 8016d84:	0801aad8 	.word	0x0801aad8
 8016d88:	0801ac44 	.word	0x0801ac44
 8016d8c:	0801ac60 	.word	0x0801ac60
 8016d90:	08016af1 	.word	0x08016af1

08016d94 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 8016d94:	b580      	push	{r7, lr}
 8016d96:	b086      	sub	sp, #24
 8016d98:	af00      	add	r7, sp, #0
 8016d9a:	6078      	str	r0, [r7, #4]
 8016d9c:	6039      	str	r1, [r7, #0]
  struct eth_hdr* ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  s16_t ip_hdr_offset = SIZEOF_ETH_HDR;
 8016d9e:	230e      	movs	r3, #14
 8016da0:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  if (p->len <= SIZEOF_ETH_HDR) {
 8016da2:	687b      	ldr	r3, [r7, #4]
 8016da4:	895b      	ldrh	r3, [r3, #10]
 8016da6:	2b0e      	cmp	r3, #14
 8016da8:	d977      	bls.n	8016e9a <ethernet_input+0x106>
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 8016daa:	687b      	ldr	r3, [r7, #4]
 8016dac:	685b      	ldr	r3, [r3, #4]
 8016dae:	613b      	str	r3, [r7, #16]
     (unsigned)ethhdr->dest.addr[3], (unsigned)ethhdr->dest.addr[4], (unsigned)ethhdr->dest.addr[5],
     (unsigned)ethhdr->src.addr[0],  (unsigned)ethhdr->src.addr[1],  (unsigned)ethhdr->src.addr[2],
     (unsigned)ethhdr->src.addr[3],  (unsigned)ethhdr->src.addr[4],  (unsigned)ethhdr->src.addr[5],
     lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 8016db0:	693b      	ldr	r3, [r7, #16]
 8016db2:	7b1a      	ldrb	r2, [r3, #12]
 8016db4:	7b5b      	ldrb	r3, [r3, #13]
 8016db6:	021b      	lsls	r3, r3, #8
 8016db8:	4313      	orrs	r3, r2
 8016dba:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 8016dbc:	693b      	ldr	r3, [r7, #16]
 8016dbe:	781b      	ldrb	r3, [r3, #0]
 8016dc0:	f003 0301 	and.w	r3, r3, #1
 8016dc4:	2b00      	cmp	r3, #0
 8016dc6:	d023      	beq.n	8016e10 <ethernet_input+0x7c>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 8016dc8:	693b      	ldr	r3, [r7, #16]
 8016dca:	781b      	ldrb	r3, [r3, #0]
 8016dcc:	2b01      	cmp	r3, #1
 8016dce:	d10f      	bne.n	8016df0 <ethernet_input+0x5c>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8016dd0:	693b      	ldr	r3, [r7, #16]
 8016dd2:	785b      	ldrb	r3, [r3, #1]
 8016dd4:	2b00      	cmp	r3, #0
 8016dd6:	d11b      	bne.n	8016e10 <ethernet_input+0x7c>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 8016dd8:	693b      	ldr	r3, [r7, #16]
 8016dda:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8016ddc:	2b5e      	cmp	r3, #94	; 0x5e
 8016dde:	d117      	bne.n	8016e10 <ethernet_input+0x7c>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 8016de0:	687b      	ldr	r3, [r7, #4]
 8016de2:	7b5b      	ldrb	r3, [r3, #13]
 8016de4:	f043 0310 	orr.w	r3, r3, #16
 8016de8:	b2da      	uxtb	r2, r3
 8016dea:	687b      	ldr	r3, [r7, #4]
 8016dec:	735a      	strb	r2, [r3, #13]
 8016dee:	e00f      	b.n	8016e10 <ethernet_input+0x7c>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 8016df0:	693b      	ldr	r3, [r7, #16]
 8016df2:	2206      	movs	r2, #6
 8016df4:	4930      	ldr	r1, [pc, #192]	; (8016eb8 <ethernet_input+0x124>)
 8016df6:	4618      	mov	r0, r3
 8016df8:	f000 febe 	bl	8017b78 <memcmp>
 8016dfc:	4603      	mov	r3, r0
 8016dfe:	2b00      	cmp	r3, #0
 8016e00:	d106      	bne.n	8016e10 <ethernet_input+0x7c>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 8016e02:	687b      	ldr	r3, [r7, #4]
 8016e04:	7b5b      	ldrb	r3, [r3, #13]
 8016e06:	f043 0308 	orr.w	r3, r3, #8
 8016e0a:	b2da      	uxtb	r2, r3
 8016e0c:	687b      	ldr	r3, [r7, #4]
 8016e0e:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 8016e10:	89fb      	ldrh	r3, [r7, #14]
 8016e12:	2b08      	cmp	r3, #8
 8016e14:	d003      	beq.n	8016e1e <ethernet_input+0x8a>
 8016e16:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 8016e1a:	d01e      	beq.n	8016e5a <ethernet_input+0xc6>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 8016e1c:	e044      	b.n	8016ea8 <ethernet_input+0x114>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8016e1e:	683b      	ldr	r3, [r7, #0]
 8016e20:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8016e24:	f003 0308 	and.w	r3, r3, #8
 8016e28:	2b00      	cmp	r3, #0
 8016e2a:	d038      	beq.n	8016e9e <ethernet_input+0x10a>
      if ((p->len < ip_hdr_offset) || pbuf_header(p, (s16_t)-ip_hdr_offset)) {
 8016e2c:	687b      	ldr	r3, [r7, #4]
 8016e2e:	895b      	ldrh	r3, [r3, #10]
 8016e30:	461a      	mov	r2, r3
 8016e32:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8016e36:	429a      	cmp	r2, r3
 8016e38:	db33      	blt.n	8016ea2 <ethernet_input+0x10e>
 8016e3a:	8afb      	ldrh	r3, [r7, #22]
 8016e3c:	425b      	negs	r3, r3
 8016e3e:	b29b      	uxth	r3, r3
 8016e40:	b21b      	sxth	r3, r3
 8016e42:	4619      	mov	r1, r3
 8016e44:	6878      	ldr	r0, [r7, #4]
 8016e46:	f7f6 fc6f 	bl	800d728 <pbuf_header>
 8016e4a:	4603      	mov	r3, r0
 8016e4c:	2b00      	cmp	r3, #0
 8016e4e:	d128      	bne.n	8016ea2 <ethernet_input+0x10e>
        ip4_input(p, netif);
 8016e50:	6839      	ldr	r1, [r7, #0]
 8016e52:	6878      	ldr	r0, [r7, #4]
 8016e54:	f7fe ff62 	bl	8015d1c <ip4_input>
      break;
 8016e58:	e01d      	b.n	8016e96 <ethernet_input+0x102>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8016e5a:	683b      	ldr	r3, [r7, #0]
 8016e5c:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8016e60:	f003 0308 	and.w	r3, r3, #8
 8016e64:	2b00      	cmp	r3, #0
 8016e66:	d01e      	beq.n	8016ea6 <ethernet_input+0x112>
      if ((p->len < ip_hdr_offset) || pbuf_header(p, (s16_t)-ip_hdr_offset)) {
 8016e68:	687b      	ldr	r3, [r7, #4]
 8016e6a:	895b      	ldrh	r3, [r3, #10]
 8016e6c:	461a      	mov	r2, r3
 8016e6e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8016e72:	429a      	cmp	r2, r3
 8016e74:	db15      	blt.n	8016ea2 <ethernet_input+0x10e>
 8016e76:	8afb      	ldrh	r3, [r7, #22]
 8016e78:	425b      	negs	r3, r3
 8016e7a:	b29b      	uxth	r3, r3
 8016e7c:	b21b      	sxth	r3, r3
 8016e7e:	4619      	mov	r1, r3
 8016e80:	6878      	ldr	r0, [r7, #4]
 8016e82:	f7f6 fc51 	bl	800d728 <pbuf_header>
 8016e86:	4603      	mov	r3, r0
 8016e88:	2b00      	cmp	r3, #0
 8016e8a:	d10a      	bne.n	8016ea2 <ethernet_input+0x10e>
        etharp_input(p, netif);
 8016e8c:	6839      	ldr	r1, [r7, #0]
 8016e8e:	6878      	ldr	r0, [r7, #4]
 8016e90:	f7fe f92c 	bl	80150ec <etharp_input>
      break;
 8016e94:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 8016e96:	2300      	movs	r3, #0
 8016e98:	e00a      	b.n	8016eb0 <ethernet_input+0x11c>
    goto free_and_return;
 8016e9a:	bf00      	nop
 8016e9c:	e004      	b.n	8016ea8 <ethernet_input+0x114>
        goto free_and_return;
 8016e9e:	bf00      	nop
 8016ea0:	e002      	b.n	8016ea8 <ethernet_input+0x114>

free_and_return:
 8016ea2:	bf00      	nop
 8016ea4:	e000      	b.n	8016ea8 <ethernet_input+0x114>
        goto free_and_return;
 8016ea6:	bf00      	nop
  pbuf_free(p);
 8016ea8:	6878      	ldr	r0, [r7, #4]
 8016eaa:	f7f6 fc61 	bl	800d770 <pbuf_free>
  return ERR_OK;
 8016eae:	2300      	movs	r3, #0
}
 8016eb0:	4618      	mov	r0, r3
 8016eb2:	3718      	adds	r7, #24
 8016eb4:	46bd      	mov	sp, r7
 8016eb6:	bd80      	pop	{r7, pc}
 8016eb8:	0801ae9c 	.word	0x0801ae9c

08016ebc <ethernet_output>:
 */
err_t
ethernet_output(struct netif* netif, struct pbuf* p,
                const struct eth_addr* src, const struct eth_addr* dst,
                u16_t eth_type)
{
 8016ebc:	b580      	push	{r7, lr}
 8016ebe:	b086      	sub	sp, #24
 8016ec0:	af00      	add	r7, sp, #0
 8016ec2:	60f8      	str	r0, [r7, #12]
 8016ec4:	60b9      	str	r1, [r7, #8]
 8016ec6:	607a      	str	r2, [r7, #4]
 8016ec8:	603b      	str	r3, [r7, #0]
  struct eth_hdr* ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 8016eca:	8c3b      	ldrh	r3, [r7, #32]
 8016ecc:	4618      	mov	r0, r3
 8016ece:	f7f5 faad 	bl	800c42c <lwip_htons>
 8016ed2:	4603      	mov	r3, r0
 8016ed4:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_header(p, SIZEOF_ETH_HDR) != 0) {
 8016ed6:	210e      	movs	r1, #14
 8016ed8:	68b8      	ldr	r0, [r7, #8]
 8016eda:	f7f6 fc25 	bl	800d728 <pbuf_header>
 8016ede:	4603      	mov	r3, r0
 8016ee0:	2b00      	cmp	r3, #0
 8016ee2:	d125      	bne.n	8016f30 <ethernet_output+0x74>
      goto pbuf_header_failed;
    }
  }

  ethhdr = (struct eth_hdr*)p->payload;
 8016ee4:	68bb      	ldr	r3, [r7, #8]
 8016ee6:	685b      	ldr	r3, [r3, #4]
 8016ee8:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 8016eea:	693b      	ldr	r3, [r7, #16]
 8016eec:	8afa      	ldrh	r2, [r7, #22]
 8016eee:	819a      	strh	r2, [r3, #12]
  ETHADDR32_COPY(&ethhdr->dest, dst);
 8016ef0:	693b      	ldr	r3, [r7, #16]
 8016ef2:	2206      	movs	r2, #6
 8016ef4:	6839      	ldr	r1, [r7, #0]
 8016ef6:	4618      	mov	r0, r3
 8016ef8:	f000 fe4d 	bl	8017b96 <memcpy>
  ETHADDR16_COPY(&ethhdr->src,  src);
 8016efc:	693b      	ldr	r3, [r7, #16]
 8016efe:	3306      	adds	r3, #6
 8016f00:	2206      	movs	r2, #6
 8016f02:	6879      	ldr	r1, [r7, #4]
 8016f04:	4618      	mov	r0, r3
 8016f06:	f000 fe46 	bl	8017b96 <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 8016f0a:	68fb      	ldr	r3, [r7, #12]
 8016f0c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8016f10:	2b06      	cmp	r3, #6
 8016f12:	d006      	beq.n	8016f22 <ethernet_output+0x66>
 8016f14:	4b0a      	ldr	r3, [pc, #40]	; (8016f40 <ethernet_output+0x84>)
 8016f16:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8016f1a:	490a      	ldr	r1, [pc, #40]	; (8016f44 <ethernet_output+0x88>)
 8016f1c:	480a      	ldr	r0, [pc, #40]	; (8016f48 <ethernet_output+0x8c>)
 8016f1e:	f000 fef5 	bl	8017d0c <iprintf>
    (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
    ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 8016f22:	68fb      	ldr	r3, [r7, #12]
 8016f24:	699b      	ldr	r3, [r3, #24]
 8016f26:	68b9      	ldr	r1, [r7, #8]
 8016f28:	68f8      	ldr	r0, [r7, #12]
 8016f2a:	4798      	blx	r3
 8016f2c:	4603      	mov	r3, r0
 8016f2e:	e002      	b.n	8016f36 <ethernet_output+0x7a>
      goto pbuf_header_failed;
 8016f30:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
    ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 8016f32:	f06f 0301 	mvn.w	r3, #1
}
 8016f36:	4618      	mov	r0, r3
 8016f38:	3718      	adds	r7, #24
 8016f3a:	46bd      	mov	sp, r7
 8016f3c:	bd80      	pop	{r7, pc}
 8016f3e:	bf00      	nop
 8016f40:	0801ac80 	.word	0x0801ac80
 8016f44:	0801acb8 	.word	0x0801acb8
 8016f48:	0801acec 	.word	0x0801acec

08016f4c <sys_mbox_new>:
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 8016f4c:	b580      	push	{r7, lr}
 8016f4e:	b082      	sub	sp, #8
 8016f50:	af00      	add	r7, sp, #0
 8016f52:	6078      	str	r0, [r7, #4]
 8016f54:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osMessageQDef(QUEUE, size, void *);
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
#else
  *mbox = osMessageQueueNew(size, sizeof(void *), NULL);
 8016f56:	683b      	ldr	r3, [r7, #0]
 8016f58:	2200      	movs	r2, #0
 8016f5a:	2104      	movs	r1, #4
 8016f5c:	4618      	mov	r0, r3
 8016f5e:	f7f1 fedd 	bl	8008d1c <osMessageQueueNew>
 8016f62:	4602      	mov	r2, r0
 8016f64:	687b      	ldr	r3, [r7, #4]
 8016f66:	601a      	str	r2, [r3, #0]
  if(lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used)
  {
    lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
  }
#endif /* SYS_STATS */
  if(*mbox == NULL)
 8016f68:	687b      	ldr	r3, [r7, #4]
 8016f6a:	681b      	ldr	r3, [r3, #0]
 8016f6c:	2b00      	cmp	r3, #0
 8016f6e:	d102      	bne.n	8016f76 <sys_mbox_new+0x2a>
    return ERR_MEM;
 8016f70:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8016f74:	e000      	b.n	8016f78 <sys_mbox_new+0x2c>

  return ERR_OK;
 8016f76:	2300      	movs	r3, #0
}
 8016f78:	4618      	mov	r0, r3
 8016f7a:	3708      	adds	r7, #8
 8016f7c:	46bd      	mov	sp, r7
 8016f7e:	bd80      	pop	{r7, pc}

08016f80 <sys_mbox_post>:
}

/*-----------------------------------------------------------------------------------*/
//   Posts the "msg" to the mailbox.
void sys_mbox_post(sys_mbox_t *mbox, void *data)
{
 8016f80:	b580      	push	{r7, lr}
 8016f82:	b082      	sub	sp, #8
 8016f84:	af00      	add	r7, sp, #0
 8016f86:	6078      	str	r0, [r7, #4]
 8016f88:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  while(osMessagePut(*mbox, (uint32_t)data, osWaitForever) != osOK);
#else
  while(osMessageQueuePut(*mbox, &data, 0, osWaitForever) != osOK);
 8016f8a:	bf00      	nop
 8016f8c:	687b      	ldr	r3, [r7, #4]
 8016f8e:	6818      	ldr	r0, [r3, #0]
 8016f90:	4639      	mov	r1, r7
 8016f92:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8016f96:	2200      	movs	r2, #0
 8016f98:	f7f1 ff46 	bl	8008e28 <osMessageQueuePut>
 8016f9c:	4603      	mov	r3, r0
 8016f9e:	2b00      	cmp	r3, #0
 8016fa0:	d1f4      	bne.n	8016f8c <sys_mbox_post+0xc>
#endif
}
 8016fa2:	bf00      	nop
 8016fa4:	3708      	adds	r7, #8
 8016fa6:	46bd      	mov	sp, r7
 8016fa8:	bd80      	pop	{r7, pc}

08016faa <sys_mbox_trypost>:


/*-----------------------------------------------------------------------------------*/
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
 8016faa:	b580      	push	{r7, lr}
 8016fac:	b084      	sub	sp, #16
 8016fae:	af00      	add	r7, sp, #0
 8016fb0:	6078      	str	r0, [r7, #4]
 8016fb2:	6039      	str	r1, [r7, #0]
  err_t result;
#if (osCMSIS < 0x20000U)
  if(osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
#else
  if(osMessageQueuePut(*mbox, &msg, 0, 0) == osOK)
 8016fb4:	687b      	ldr	r3, [r7, #4]
 8016fb6:	6818      	ldr	r0, [r3, #0]
 8016fb8:	4639      	mov	r1, r7
 8016fba:	2300      	movs	r3, #0
 8016fbc:	2200      	movs	r2, #0
 8016fbe:	f7f1 ff33 	bl	8008e28 <osMessageQueuePut>
 8016fc2:	4603      	mov	r3, r0
 8016fc4:	2b00      	cmp	r3, #0
 8016fc6:	d102      	bne.n	8016fce <sys_mbox_trypost+0x24>
#endif
  {
    result = ERR_OK;
 8016fc8:	2300      	movs	r3, #0
 8016fca:	73fb      	strb	r3, [r7, #15]
 8016fcc:	e001      	b.n	8016fd2 <sys_mbox_trypost+0x28>
  }
  else
  {
    // could not post, queue must be full
    result = ERR_MEM;
 8016fce:	23ff      	movs	r3, #255	; 0xff
 8016fd0:	73fb      	strb	r3, [r7, #15]
#if SYS_STATS
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */
  }

  return result;
 8016fd2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8016fd6:	4618      	mov	r0, r3
 8016fd8:	3710      	adds	r7, #16
 8016fda:	46bd      	mov	sp, r7
 8016fdc:	bd80      	pop	{r7, pc}

08016fde <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 8016fde:	b580      	push	{r7, lr}
 8016fe0:	b086      	sub	sp, #24
 8016fe2:	af00      	add	r7, sp, #0
 8016fe4:	60f8      	str	r0, [r7, #12]
 8016fe6:	60b9      	str	r1, [r7, #8]
 8016fe8:	607a      	str	r2, [r7, #4]
#if (osCMSIS < 0x20000U)
  osEvent event;
  uint32_t starttime = osKernelSysTick();
#else
  osStatus_t status;
  uint32_t starttime = osKernelGetTickCount();
 8016fea:	f7f1 faf3 	bl	80085d4 <osKernelGetTickCount>
 8016fee:	6178      	str	r0, [r7, #20]
#endif
  if(timeout != 0)
 8016ff0:	687b      	ldr	r3, [r7, #4]
 8016ff2:	2b00      	cmp	r3, #0
 8016ff4:	d013      	beq.n	801701e <sys_arch_mbox_fetch+0x40>
    {
      *msg = (void *)event.value.v;
      return (osKernelSysTick() - starttime);
    }
#else
    status = osMessageQueueGet(*mbox, msg, 0, timeout);
 8016ff6:	68fb      	ldr	r3, [r7, #12]
 8016ff8:	6818      	ldr	r0, [r3, #0]
 8016ffa:	687b      	ldr	r3, [r7, #4]
 8016ffc:	2200      	movs	r2, #0
 8016ffe:	68b9      	ldr	r1, [r7, #8]
 8017000:	f7f1 ff86 	bl	8008f10 <osMessageQueueGet>
 8017004:	6138      	str	r0, [r7, #16]
    if (status == osOK)
 8017006:	693b      	ldr	r3, [r7, #16]
 8017008:	2b00      	cmp	r3, #0
 801700a:	d105      	bne.n	8017018 <sys_arch_mbox_fetch+0x3a>
    {
      return (osKernelGetTickCount() - starttime);
 801700c:	f7f1 fae2 	bl	80085d4 <osKernelGetTickCount>
 8017010:	4602      	mov	r2, r0
 8017012:	697b      	ldr	r3, [r7, #20]
 8017014:	1ad3      	subs	r3, r2, r3
 8017016:	e00f      	b.n	8017038 <sys_arch_mbox_fetch+0x5a>
    }
#endif
    else
    {
      return SYS_ARCH_TIMEOUT;
 8017018:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801701c:	e00c      	b.n	8017038 <sys_arch_mbox_fetch+0x5a>
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, osWaitForever);
    *msg = (void *)event.value.v;
    return (osKernelSysTick() - starttime);
#else
    osMessageQueueGet(*mbox, msg, 0, osWaitForever );
 801701e:	68fb      	ldr	r3, [r7, #12]
 8017020:	6818      	ldr	r0, [r3, #0]
 8017022:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8017026:	2200      	movs	r2, #0
 8017028:	68b9      	ldr	r1, [r7, #8]
 801702a:	f7f1 ff71 	bl	8008f10 <osMessageQueueGet>
    return (osKernelGetTickCount() - starttime);
 801702e:	f7f1 fad1 	bl	80085d4 <osKernelGetTickCount>
 8017032:	4602      	mov	r2, r0
 8017034:	697b      	ldr	r3, [r7, #20]
 8017036:	1ad3      	subs	r3, r2, r3
#endif
  }
}
 8017038:	4618      	mov	r0, r3
 801703a:	3718      	adds	r7, #24
 801703c:	46bd      	mov	sp, r7
 801703e:	bd80      	pop	{r7, pc}

08017040 <sys_mbox_valid>:
    return SYS_MBOX_EMPTY;
  }
}
/*----------------------------------------------------------------------------------*/
int sys_mbox_valid(sys_mbox_t *mbox)
{
 8017040:	b480      	push	{r7}
 8017042:	b083      	sub	sp, #12
 8017044:	af00      	add	r7, sp, #0
 8017046:	6078      	str	r0, [r7, #4]
  if (*mbox == SYS_MBOX_NULL)
 8017048:	687b      	ldr	r3, [r7, #4]
 801704a:	681b      	ldr	r3, [r3, #0]
 801704c:	2b00      	cmp	r3, #0
 801704e:	d101      	bne.n	8017054 <sys_mbox_valid+0x14>
    return 0;
 8017050:	2300      	movs	r3, #0
 8017052:	e000      	b.n	8017056 <sys_mbox_valid+0x16>
  else
    return 1;
 8017054:	2301      	movs	r3, #1
}
 8017056:	4618      	mov	r0, r3
 8017058:	370c      	adds	r7, #12
 801705a:	46bd      	mov	sp, r7
 801705c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017060:	4770      	bx	lr
	...

08017064 <sys_init>:
#else
osMutexId_t lwip_sys_mutex;
#endif
// Initialize sys arch
void sys_init(void)
{
 8017064:	b580      	push	{r7, lr}
 8017066:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
#else
  lwip_sys_mutex = osMutexNew(NULL);
 8017068:	2000      	movs	r0, #0
 801706a:	f7f1 fbb3 	bl	80087d4 <osMutexNew>
 801706e:	4602      	mov	r2, r0
 8017070:	4b01      	ldr	r3, [pc, #4]	; (8017078 <sys_init+0x14>)
 8017072:	601a      	str	r2, [r3, #0]
#endif
}
 8017074:	bf00      	nop
 8017076:	bd80      	pop	{r7, pc}
 8017078:	2000b5f8 	.word	0x2000b5f8

0801707c <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
 801707c:	b580      	push	{r7, lr}
 801707e:	b082      	sub	sp, #8
 8017080:	af00      	add	r7, sp, #0
 8017082:	6078      	str	r0, [r7, #4]

#if (osCMSIS < 0x20000U)
  osMutexDef(MUTEX);
  *mutex = osMutexCreate(osMutex(MUTEX));
#else
  *mutex = osMutexNew(NULL);
 8017084:	2000      	movs	r0, #0
 8017086:	f7f1 fba5 	bl	80087d4 <osMutexNew>
 801708a:	4602      	mov	r2, r0
 801708c:	687b      	ldr	r3, [r7, #4]
 801708e:	601a      	str	r2, [r3, #0]
#endif

  if(*mutex == NULL)
 8017090:	687b      	ldr	r3, [r7, #4]
 8017092:	681b      	ldr	r3, [r3, #0]
 8017094:	2b00      	cmp	r3, #0
 8017096:	d102      	bne.n	801709e <sys_mutex_new+0x22>
  {
#if SYS_STATS
    ++lwip_stats.sys.mutex.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 8017098:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801709c:	e000      	b.n	80170a0 <sys_mutex_new+0x24>
  ++lwip_stats.sys.mutex.used;
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
  }
#endif /* SYS_STATS */
  return ERR_OK;
 801709e:	2300      	movs	r3, #0
}
 80170a0:	4618      	mov	r0, r3
 80170a2:	3708      	adds	r7, #8
 80170a4:	46bd      	mov	sp, r7
 80170a6:	bd80      	pop	{r7, pc}

080170a8 <sys_mutex_lock>:
  osMutexDelete(*mutex);
}
/*-----------------------------------------------------------------------------------*/
/* Lock a mutex*/
void sys_mutex_lock(sys_mutex_t *mutex)
{
 80170a8:	b580      	push	{r7, lr}
 80170aa:	b082      	sub	sp, #8
 80170ac:	af00      	add	r7, sp, #0
 80170ae:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  osMutexWait(*mutex, osWaitForever);
#else
  osMutexAcquire(*mutex, osWaitForever);
 80170b0:	687b      	ldr	r3, [r7, #4]
 80170b2:	681b      	ldr	r3, [r3, #0]
 80170b4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80170b8:	4618      	mov	r0, r3
 80170ba:	f7f1 fc25 	bl	8008908 <osMutexAcquire>
#endif
}
 80170be:	bf00      	nop
 80170c0:	3708      	adds	r7, #8
 80170c2:	46bd      	mov	sp, r7
 80170c4:	bd80      	pop	{r7, pc}

080170c6 <sys_mutex_unlock>:

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
 80170c6:	b580      	push	{r7, lr}
 80170c8:	b082      	sub	sp, #8
 80170ca:	af00      	add	r7, sp, #0
 80170cc:	6078      	str	r0, [r7, #4]
  osMutexRelease(*mutex);
 80170ce:	687b      	ldr	r3, [r7, #4]
 80170d0:	681b      	ldr	r3, [r3, #0]
 80170d2:	4618      	mov	r0, r3
 80170d4:	f7f1 fc76 	bl	80089c4 <osMutexRelease>
}
 80170d8:	bf00      	nop
 80170da:	3708      	adds	r7, #8
 80170dc:	46bd      	mov	sp, r7
 80170de:	bd80      	pop	{r7, pc}

080170e0 <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 80170e0:	b580      	push	{r7, lr}
 80170e2:	b08e      	sub	sp, #56	; 0x38
 80170e4:	af00      	add	r7, sp, #0
 80170e6:	60f8      	str	r0, [r7, #12]
 80170e8:	60b9      	str	r1, [r7, #8]
 80170ea:	607a      	str	r2, [r7, #4]
 80170ec:	603b      	str	r3, [r7, #0]
#if (osCMSIS < 0x20000U)
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
  return osThreadCreate(&os_thread_def, arg);
#else
  const osThreadAttr_t attributes = {
 80170ee:	f107 0314 	add.w	r3, r7, #20
 80170f2:	2224      	movs	r2, #36	; 0x24
 80170f4:	2100      	movs	r1, #0
 80170f6:	4618      	mov	r0, r3
 80170f8:	f000 fd58 	bl	8017bac <memset>
 80170fc:	68fb      	ldr	r3, [r7, #12]
 80170fe:	617b      	str	r3, [r7, #20]
 8017100:	683b      	ldr	r3, [r7, #0]
 8017102:	62bb      	str	r3, [r7, #40]	; 0x28
 8017104:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8017106:	62fb      	str	r3, [r7, #44]	; 0x2c
                        .name = name,
                        .stack_size = stacksize,
                        .priority = (osPriority_t)prio,
                      };
  return osThreadNew(thread, arg, &attributes);
 8017108:	f107 0314 	add.w	r3, r7, #20
 801710c:	461a      	mov	r2, r3
 801710e:	6879      	ldr	r1, [r7, #4]
 8017110:	68b8      	ldr	r0, [r7, #8]
 8017112:	f7f1 fa87 	bl	8008624 <osThreadNew>
 8017116:	4603      	mov	r3, r0
#endif
}
 8017118:	4618      	mov	r0, r3
 801711a:	3738      	adds	r7, #56	; 0x38
 801711c:	46bd      	mov	sp, r7
 801711e:	bd80      	pop	{r7, pc}

08017120 <sys_arch_protect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
sys_prot_t sys_arch_protect(void)
{
 8017120:	b580      	push	{r7, lr}
 8017122:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  osMutexWait(lwip_sys_mutex, osWaitForever);
#else
  osMutexAcquire(lwip_sys_mutex, osWaitForever);
 8017124:	4b04      	ldr	r3, [pc, #16]	; (8017138 <sys_arch_protect+0x18>)
 8017126:	681b      	ldr	r3, [r3, #0]
 8017128:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 801712c:	4618      	mov	r0, r3
 801712e:	f7f1 fbeb 	bl	8008908 <osMutexAcquire>
#endif
  return (sys_prot_t)1;
 8017132:	2301      	movs	r3, #1
}
 8017134:	4618      	mov	r0, r3
 8017136:	bd80      	pop	{r7, pc}
 8017138:	2000b5f8 	.word	0x2000b5f8

0801713c <sys_arch_unprotect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
void sys_arch_unprotect(sys_prot_t pval)
{
 801713c:	b580      	push	{r7, lr}
 801713e:	b082      	sub	sp, #8
 8017140:	af00      	add	r7, sp, #0
 8017142:	6078      	str	r0, [r7, #4]
  ( void ) pval;
  osMutexRelease(lwip_sys_mutex);
 8017144:	4b04      	ldr	r3, [pc, #16]	; (8017158 <sys_arch_unprotect+0x1c>)
 8017146:	681b      	ldr	r3, [r3, #0]
 8017148:	4618      	mov	r0, r3
 801714a:	f7f1 fc3b 	bl	80089c4 <osMutexRelease>
}
 801714e:	bf00      	nop
 8017150:	3708      	adds	r7, #8
 8017152:	46bd      	mov	sp, r7
 8017154:	bd80      	pop	{r7, pc}
 8017156:	bf00      	nop
 8017158:	2000b5f8 	.word	0x2000b5f8

0801715c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 801715c:	b580      	push	{r7, lr}
 801715e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PreTreatment */
  
  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8017160:	2200      	movs	r2, #0
 8017162:	4912      	ldr	r1, [pc, #72]	; (80171ac <MX_USB_DEVICE_Init+0x50>)
 8017164:	4812      	ldr	r0, [pc, #72]	; (80171b0 <MX_USB_DEVICE_Init+0x54>)
 8017166:	f7f0 f972 	bl	800744e <USBD_Init>
 801716a:	4603      	mov	r3, r0
 801716c:	2b00      	cmp	r3, #0
 801716e:	d001      	beq.n	8017174 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8017170:	f7e9 fd3a 	bl	8000be8 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8017174:	490f      	ldr	r1, [pc, #60]	; (80171b4 <MX_USB_DEVICE_Init+0x58>)
 8017176:	480e      	ldr	r0, [pc, #56]	; (80171b0 <MX_USB_DEVICE_Init+0x54>)
 8017178:	f7f0 f994 	bl	80074a4 <USBD_RegisterClass>
 801717c:	4603      	mov	r3, r0
 801717e:	2b00      	cmp	r3, #0
 8017180:	d001      	beq.n	8017186 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8017182:	f7e9 fd31 	bl	8000be8 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8017186:	490c      	ldr	r1, [pc, #48]	; (80171b8 <MX_USB_DEVICE_Init+0x5c>)
 8017188:	4809      	ldr	r0, [pc, #36]	; (80171b0 <MX_USB_DEVICE_Init+0x54>)
 801718a:	f7f0 f8f1 	bl	8007370 <USBD_CDC_RegisterInterface>
 801718e:	4603      	mov	r3, r0
 8017190:	2b00      	cmp	r3, #0
 8017192:	d001      	beq.n	8017198 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8017194:	f7e9 fd28 	bl	8000be8 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8017198:	4805      	ldr	r0, [pc, #20]	; (80171b0 <MX_USB_DEVICE_Init+0x54>)
 801719a:	f7f0 f99d 	bl	80074d8 <USBD_Start>
 801719e:	4603      	mov	r3, r0
 80171a0:	2b00      	cmp	r3, #0
 80171a2:	d001      	beq.n	80171a8 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 80171a4:	f7e9 fd20 	bl	8000be8 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80171a8:	bf00      	nop
 80171aa:	bd80      	pop	{r7, pc}
 80171ac:	20000138 	.word	0x20000138
 80171b0:	2000b5fc 	.word	0x2000b5fc
 80171b4:	20000014 	.word	0x20000014
 80171b8:	20000128 	.word	0x20000128

080171bc <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 80171bc:	b580      	push	{r7, lr}
 80171be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80171c0:	2200      	movs	r2, #0
 80171c2:	4905      	ldr	r1, [pc, #20]	; (80171d8 <CDC_Init_FS+0x1c>)
 80171c4:	4805      	ldr	r0, [pc, #20]	; (80171dc <CDC_Init_FS+0x20>)
 80171c6:	f7f0 f8ea 	bl	800739e <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80171ca:	4905      	ldr	r1, [pc, #20]	; (80171e0 <CDC_Init_FS+0x24>)
 80171cc:	4803      	ldr	r0, [pc, #12]	; (80171dc <CDC_Init_FS+0x20>)
 80171ce:	f7f0 f900 	bl	80073d2 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 80171d2:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80171d4:	4618      	mov	r0, r3
 80171d6:	bd80      	pop	{r7, pc}
 80171d8:	2000c098 	.word	0x2000c098
 80171dc:	2000b5fc 	.word	0x2000b5fc
 80171e0:	2000b898 	.word	0x2000b898

080171e4 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 80171e4:	b480      	push	{r7}
 80171e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 80171e8:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80171ea:	4618      	mov	r0, r3
 80171ec:	46bd      	mov	sp, r7
 80171ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80171f2:	4770      	bx	lr

080171f4 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 80171f4:	b480      	push	{r7}
 80171f6:	b083      	sub	sp, #12
 80171f8:	af00      	add	r7, sp, #0
 80171fa:	4603      	mov	r3, r0
 80171fc:	6039      	str	r1, [r7, #0]
 80171fe:	71fb      	strb	r3, [r7, #7]
 8017200:	4613      	mov	r3, r2
 8017202:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8017204:	79fb      	ldrb	r3, [r7, #7]
 8017206:	2b23      	cmp	r3, #35	; 0x23
 8017208:	d84a      	bhi.n	80172a0 <CDC_Control_FS+0xac>
 801720a:	a201      	add	r2, pc, #4	; (adr r2, 8017210 <CDC_Control_FS+0x1c>)
 801720c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8017210:	080172a1 	.word	0x080172a1
 8017214:	080172a1 	.word	0x080172a1
 8017218:	080172a1 	.word	0x080172a1
 801721c:	080172a1 	.word	0x080172a1
 8017220:	080172a1 	.word	0x080172a1
 8017224:	080172a1 	.word	0x080172a1
 8017228:	080172a1 	.word	0x080172a1
 801722c:	080172a1 	.word	0x080172a1
 8017230:	080172a1 	.word	0x080172a1
 8017234:	080172a1 	.word	0x080172a1
 8017238:	080172a1 	.word	0x080172a1
 801723c:	080172a1 	.word	0x080172a1
 8017240:	080172a1 	.word	0x080172a1
 8017244:	080172a1 	.word	0x080172a1
 8017248:	080172a1 	.word	0x080172a1
 801724c:	080172a1 	.word	0x080172a1
 8017250:	080172a1 	.word	0x080172a1
 8017254:	080172a1 	.word	0x080172a1
 8017258:	080172a1 	.word	0x080172a1
 801725c:	080172a1 	.word	0x080172a1
 8017260:	080172a1 	.word	0x080172a1
 8017264:	080172a1 	.word	0x080172a1
 8017268:	080172a1 	.word	0x080172a1
 801726c:	080172a1 	.word	0x080172a1
 8017270:	080172a1 	.word	0x080172a1
 8017274:	080172a1 	.word	0x080172a1
 8017278:	080172a1 	.word	0x080172a1
 801727c:	080172a1 	.word	0x080172a1
 8017280:	080172a1 	.word	0x080172a1
 8017284:	080172a1 	.word	0x080172a1
 8017288:	080172a1 	.word	0x080172a1
 801728c:	080172a1 	.word	0x080172a1
 8017290:	080172a1 	.word	0x080172a1
 8017294:	080172a1 	.word	0x080172a1
 8017298:	080172a1 	.word	0x080172a1
 801729c:	080172a1 	.word	0x080172a1
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 80172a0:	bf00      	nop
  }

  return (USBD_OK);
 80172a2:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80172a4:	4618      	mov	r0, r3
 80172a6:	370c      	adds	r7, #12
 80172a8:	46bd      	mov	sp, r7
 80172aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80172ae:	4770      	bx	lr

080172b0 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 80172b0:	b580      	push	{r7, lr}
 80172b2:	b082      	sub	sp, #8
 80172b4:	af00      	add	r7, sp, #0
 80172b6:	6078      	str	r0, [r7, #4]
 80172b8:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80172ba:	6879      	ldr	r1, [r7, #4]
 80172bc:	4805      	ldr	r0, [pc, #20]	; (80172d4 <CDC_Receive_FS+0x24>)
 80172be:	f7f0 f888 	bl	80073d2 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80172c2:	4804      	ldr	r0, [pc, #16]	; (80172d4 <CDC_Receive_FS+0x24>)
 80172c4:	f7f0 f899 	bl	80073fa <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 80172c8:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80172ca:	4618      	mov	r0, r3
 80172cc:	3708      	adds	r7, #8
 80172ce:	46bd      	mov	sp, r7
 80172d0:	bd80      	pop	{r7, pc}
 80172d2:	bf00      	nop
 80172d4:	2000b5fc 	.word	0x2000b5fc

080172d8 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80172d8:	b480      	push	{r7}
 80172da:	b083      	sub	sp, #12
 80172dc:	af00      	add	r7, sp, #0
 80172de:	4603      	mov	r3, r0
 80172e0:	6039      	str	r1, [r7, #0]
 80172e2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80172e4:	683b      	ldr	r3, [r7, #0]
 80172e6:	2212      	movs	r2, #18
 80172e8:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80172ea:	4b03      	ldr	r3, [pc, #12]	; (80172f8 <USBD_FS_DeviceDescriptor+0x20>)
}
 80172ec:	4618      	mov	r0, r3
 80172ee:	370c      	adds	r7, #12
 80172f0:	46bd      	mov	sp, r7
 80172f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80172f6:	4770      	bx	lr
 80172f8:	20000154 	.word	0x20000154

080172fc <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80172fc:	b480      	push	{r7}
 80172fe:	b083      	sub	sp, #12
 8017300:	af00      	add	r7, sp, #0
 8017302:	4603      	mov	r3, r0
 8017304:	6039      	str	r1, [r7, #0]
 8017306:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8017308:	683b      	ldr	r3, [r7, #0]
 801730a:	2204      	movs	r2, #4
 801730c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 801730e:	4b03      	ldr	r3, [pc, #12]	; (801731c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8017310:	4618      	mov	r0, r3
 8017312:	370c      	adds	r7, #12
 8017314:	46bd      	mov	sp, r7
 8017316:	f85d 7b04 	ldr.w	r7, [sp], #4
 801731a:	4770      	bx	lr
 801731c:	20000168 	.word	0x20000168

08017320 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8017320:	b580      	push	{r7, lr}
 8017322:	b082      	sub	sp, #8
 8017324:	af00      	add	r7, sp, #0
 8017326:	4603      	mov	r3, r0
 8017328:	6039      	str	r1, [r7, #0]
 801732a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 801732c:	79fb      	ldrb	r3, [r7, #7]
 801732e:	2b00      	cmp	r3, #0
 8017330:	d105      	bne.n	801733e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8017332:	683a      	ldr	r2, [r7, #0]
 8017334:	4907      	ldr	r1, [pc, #28]	; (8017354 <USBD_FS_ProductStrDescriptor+0x34>)
 8017336:	4808      	ldr	r0, [pc, #32]	; (8017358 <USBD_FS_ProductStrDescriptor+0x38>)
 8017338:	f7f1 f806 	bl	8008348 <USBD_GetString>
 801733c:	e004      	b.n	8017348 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 801733e:	683a      	ldr	r2, [r7, #0]
 8017340:	4904      	ldr	r1, [pc, #16]	; (8017354 <USBD_FS_ProductStrDescriptor+0x34>)
 8017342:	4805      	ldr	r0, [pc, #20]	; (8017358 <USBD_FS_ProductStrDescriptor+0x38>)
 8017344:	f7f1 f800 	bl	8008348 <USBD_GetString>
  }
  return USBD_StrDesc;
 8017348:	4b02      	ldr	r3, [pc, #8]	; (8017354 <USBD_FS_ProductStrDescriptor+0x34>)
}
 801734a:	4618      	mov	r0, r3
 801734c:	3708      	adds	r7, #8
 801734e:	46bd      	mov	sp, r7
 8017350:	bd80      	pop	{r7, pc}
 8017352:	bf00      	nop
 8017354:	2000c898 	.word	0x2000c898
 8017358:	0801ad14 	.word	0x0801ad14

0801735c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801735c:	b580      	push	{r7, lr}
 801735e:	b082      	sub	sp, #8
 8017360:	af00      	add	r7, sp, #0
 8017362:	4603      	mov	r3, r0
 8017364:	6039      	str	r1, [r7, #0]
 8017366:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8017368:	683a      	ldr	r2, [r7, #0]
 801736a:	4904      	ldr	r1, [pc, #16]	; (801737c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 801736c:	4804      	ldr	r0, [pc, #16]	; (8017380 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 801736e:	f7f0 ffeb 	bl	8008348 <USBD_GetString>
  return USBD_StrDesc;
 8017372:	4b02      	ldr	r3, [pc, #8]	; (801737c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8017374:	4618      	mov	r0, r3
 8017376:	3708      	adds	r7, #8
 8017378:	46bd      	mov	sp, r7
 801737a:	bd80      	pop	{r7, pc}
 801737c:	2000c898 	.word	0x2000c898
 8017380:	0801ad2c 	.word	0x0801ad2c

08017384 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8017384:	b580      	push	{r7, lr}
 8017386:	b082      	sub	sp, #8
 8017388:	af00      	add	r7, sp, #0
 801738a:	4603      	mov	r3, r0
 801738c:	6039      	str	r1, [r7, #0]
 801738e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8017390:	683b      	ldr	r3, [r7, #0]
 8017392:	221a      	movs	r2, #26
 8017394:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8017396:	f000 f843 	bl	8017420 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */
  
  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 801739a:	4b02      	ldr	r3, [pc, #8]	; (80173a4 <USBD_FS_SerialStrDescriptor+0x20>)
}
 801739c:	4618      	mov	r0, r3
 801739e:	3708      	adds	r7, #8
 80173a0:	46bd      	mov	sp, r7
 80173a2:	bd80      	pop	{r7, pc}
 80173a4:	2000016c 	.word	0x2000016c

080173a8 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80173a8:	b580      	push	{r7, lr}
 80173aa:	b082      	sub	sp, #8
 80173ac:	af00      	add	r7, sp, #0
 80173ae:	4603      	mov	r3, r0
 80173b0:	6039      	str	r1, [r7, #0]
 80173b2:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80173b4:	79fb      	ldrb	r3, [r7, #7]
 80173b6:	2b00      	cmp	r3, #0
 80173b8:	d105      	bne.n	80173c6 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80173ba:	683a      	ldr	r2, [r7, #0]
 80173bc:	4907      	ldr	r1, [pc, #28]	; (80173dc <USBD_FS_ConfigStrDescriptor+0x34>)
 80173be:	4808      	ldr	r0, [pc, #32]	; (80173e0 <USBD_FS_ConfigStrDescriptor+0x38>)
 80173c0:	f7f0 ffc2 	bl	8008348 <USBD_GetString>
 80173c4:	e004      	b.n	80173d0 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80173c6:	683a      	ldr	r2, [r7, #0]
 80173c8:	4904      	ldr	r1, [pc, #16]	; (80173dc <USBD_FS_ConfigStrDescriptor+0x34>)
 80173ca:	4805      	ldr	r0, [pc, #20]	; (80173e0 <USBD_FS_ConfigStrDescriptor+0x38>)
 80173cc:	f7f0 ffbc 	bl	8008348 <USBD_GetString>
  }
  return USBD_StrDesc;
 80173d0:	4b02      	ldr	r3, [pc, #8]	; (80173dc <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80173d2:	4618      	mov	r0, r3
 80173d4:	3708      	adds	r7, #8
 80173d6:	46bd      	mov	sp, r7
 80173d8:	bd80      	pop	{r7, pc}
 80173da:	bf00      	nop
 80173dc:	2000c898 	.word	0x2000c898
 80173e0:	0801ad40 	.word	0x0801ad40

080173e4 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80173e4:	b580      	push	{r7, lr}
 80173e6:	b082      	sub	sp, #8
 80173e8:	af00      	add	r7, sp, #0
 80173ea:	4603      	mov	r3, r0
 80173ec:	6039      	str	r1, [r7, #0]
 80173ee:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80173f0:	79fb      	ldrb	r3, [r7, #7]
 80173f2:	2b00      	cmp	r3, #0
 80173f4:	d105      	bne.n	8017402 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80173f6:	683a      	ldr	r2, [r7, #0]
 80173f8:	4907      	ldr	r1, [pc, #28]	; (8017418 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80173fa:	4808      	ldr	r0, [pc, #32]	; (801741c <USBD_FS_InterfaceStrDescriptor+0x38>)
 80173fc:	f7f0 ffa4 	bl	8008348 <USBD_GetString>
 8017400:	e004      	b.n	801740c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8017402:	683a      	ldr	r2, [r7, #0]
 8017404:	4904      	ldr	r1, [pc, #16]	; (8017418 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8017406:	4805      	ldr	r0, [pc, #20]	; (801741c <USBD_FS_InterfaceStrDescriptor+0x38>)
 8017408:	f7f0 ff9e 	bl	8008348 <USBD_GetString>
  }
  return USBD_StrDesc;
 801740c:	4b02      	ldr	r3, [pc, #8]	; (8017418 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 801740e:	4618      	mov	r0, r3
 8017410:	3708      	adds	r7, #8
 8017412:	46bd      	mov	sp, r7
 8017414:	bd80      	pop	{r7, pc}
 8017416:	bf00      	nop
 8017418:	2000c898 	.word	0x2000c898
 801741c:	0801ad4c 	.word	0x0801ad4c

08017420 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor 
  * @param  None 
  * @retval None
  */
static void Get_SerialNum(void)
{
 8017420:	b580      	push	{r7, lr}
 8017422:	b084      	sub	sp, #16
 8017424:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8017426:	4b0f      	ldr	r3, [pc, #60]	; (8017464 <Get_SerialNum+0x44>)
 8017428:	681b      	ldr	r3, [r3, #0]
 801742a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 801742c:	4b0e      	ldr	r3, [pc, #56]	; (8017468 <Get_SerialNum+0x48>)
 801742e:	681b      	ldr	r3, [r3, #0]
 8017430:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8017432:	4b0e      	ldr	r3, [pc, #56]	; (801746c <Get_SerialNum+0x4c>)
 8017434:	681b      	ldr	r3, [r3, #0]
 8017436:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8017438:	68fa      	ldr	r2, [r7, #12]
 801743a:	687b      	ldr	r3, [r7, #4]
 801743c:	4413      	add	r3, r2
 801743e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8017440:	68fb      	ldr	r3, [r7, #12]
 8017442:	2b00      	cmp	r3, #0
 8017444:	d009      	beq.n	801745a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8017446:	2208      	movs	r2, #8
 8017448:	4909      	ldr	r1, [pc, #36]	; (8017470 <Get_SerialNum+0x50>)
 801744a:	68f8      	ldr	r0, [r7, #12]
 801744c:	f000 f814 	bl	8017478 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8017450:	2204      	movs	r2, #4
 8017452:	4908      	ldr	r1, [pc, #32]	; (8017474 <Get_SerialNum+0x54>)
 8017454:	68b8      	ldr	r0, [r7, #8]
 8017456:	f000 f80f 	bl	8017478 <IntToUnicode>
  }
}
 801745a:	bf00      	nop
 801745c:	3710      	adds	r7, #16
 801745e:	46bd      	mov	sp, r7
 8017460:	bd80      	pop	{r7, pc}
 8017462:	bf00      	nop
 8017464:	1fff7a10 	.word	0x1fff7a10
 8017468:	1fff7a14 	.word	0x1fff7a14
 801746c:	1fff7a18 	.word	0x1fff7a18
 8017470:	2000016e 	.word	0x2000016e
 8017474:	2000017e 	.word	0x2000017e

08017478 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer 
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8017478:	b480      	push	{r7}
 801747a:	b087      	sub	sp, #28
 801747c:	af00      	add	r7, sp, #0
 801747e:	60f8      	str	r0, [r7, #12]
 8017480:	60b9      	str	r1, [r7, #8]
 8017482:	4613      	mov	r3, r2
 8017484:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8017486:	2300      	movs	r3, #0
 8017488:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 801748a:	2300      	movs	r3, #0
 801748c:	75fb      	strb	r3, [r7, #23]
 801748e:	e027      	b.n	80174e0 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8017490:	68fb      	ldr	r3, [r7, #12]
 8017492:	0f1b      	lsrs	r3, r3, #28
 8017494:	2b09      	cmp	r3, #9
 8017496:	d80b      	bhi.n	80174b0 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8017498:	68fb      	ldr	r3, [r7, #12]
 801749a:	0f1b      	lsrs	r3, r3, #28
 801749c:	b2da      	uxtb	r2, r3
 801749e:	7dfb      	ldrb	r3, [r7, #23]
 80174a0:	005b      	lsls	r3, r3, #1
 80174a2:	4619      	mov	r1, r3
 80174a4:	68bb      	ldr	r3, [r7, #8]
 80174a6:	440b      	add	r3, r1
 80174a8:	3230      	adds	r2, #48	; 0x30
 80174aa:	b2d2      	uxtb	r2, r2
 80174ac:	701a      	strb	r2, [r3, #0]
 80174ae:	e00a      	b.n	80174c6 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80174b0:	68fb      	ldr	r3, [r7, #12]
 80174b2:	0f1b      	lsrs	r3, r3, #28
 80174b4:	b2da      	uxtb	r2, r3
 80174b6:	7dfb      	ldrb	r3, [r7, #23]
 80174b8:	005b      	lsls	r3, r3, #1
 80174ba:	4619      	mov	r1, r3
 80174bc:	68bb      	ldr	r3, [r7, #8]
 80174be:	440b      	add	r3, r1
 80174c0:	3237      	adds	r2, #55	; 0x37
 80174c2:	b2d2      	uxtb	r2, r2
 80174c4:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80174c6:	68fb      	ldr	r3, [r7, #12]
 80174c8:	011b      	lsls	r3, r3, #4
 80174ca:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80174cc:	7dfb      	ldrb	r3, [r7, #23]
 80174ce:	005b      	lsls	r3, r3, #1
 80174d0:	3301      	adds	r3, #1
 80174d2:	68ba      	ldr	r2, [r7, #8]
 80174d4:	4413      	add	r3, r2
 80174d6:	2200      	movs	r2, #0
 80174d8:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80174da:	7dfb      	ldrb	r3, [r7, #23]
 80174dc:	3301      	adds	r3, #1
 80174de:	75fb      	strb	r3, [r7, #23]
 80174e0:	7dfa      	ldrb	r2, [r7, #23]
 80174e2:	79fb      	ldrb	r3, [r7, #7]
 80174e4:	429a      	cmp	r2, r3
 80174e6:	d3d3      	bcc.n	8017490 <IntToUnicode+0x18>
  }
}
 80174e8:	bf00      	nop
 80174ea:	371c      	adds	r7, #28
 80174ec:	46bd      	mov	sp, r7
 80174ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80174f2:	4770      	bx	lr

080174f4 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80174f4:	b580      	push	{r7, lr}
 80174f6:	b08a      	sub	sp, #40	; 0x28
 80174f8:	af00      	add	r7, sp, #0
 80174fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80174fc:	f107 0314 	add.w	r3, r7, #20
 8017500:	2200      	movs	r2, #0
 8017502:	601a      	str	r2, [r3, #0]
 8017504:	605a      	str	r2, [r3, #4]
 8017506:	609a      	str	r2, [r3, #8]
 8017508:	60da      	str	r2, [r3, #12]
 801750a:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 801750c:	687b      	ldr	r3, [r7, #4]
 801750e:	681b      	ldr	r3, [r3, #0]
 8017510:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8017514:	d147      	bne.n	80175a6 <HAL_PCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8017516:	2300      	movs	r3, #0
 8017518:	613b      	str	r3, [r7, #16]
 801751a:	4b25      	ldr	r3, [pc, #148]	; (80175b0 <HAL_PCD_MspInit+0xbc>)
 801751c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801751e:	4a24      	ldr	r2, [pc, #144]	; (80175b0 <HAL_PCD_MspInit+0xbc>)
 8017520:	f043 0301 	orr.w	r3, r3, #1
 8017524:	6313      	str	r3, [r2, #48]	; 0x30
 8017526:	4b22      	ldr	r3, [pc, #136]	; (80175b0 <HAL_PCD_MspInit+0xbc>)
 8017528:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801752a:	f003 0301 	and.w	r3, r3, #1
 801752e:	613b      	str	r3, [r7, #16]
 8017530:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8017532:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8017536:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8017538:	2302      	movs	r3, #2
 801753a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801753c:	2300      	movs	r3, #0
 801753e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8017540:	2303      	movs	r3, #3
 8017542:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8017544:	230a      	movs	r3, #10
 8017546:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8017548:	f107 0314 	add.w	r3, r7, #20
 801754c:	4619      	mov	r1, r3
 801754e:	4819      	ldr	r0, [pc, #100]	; (80175b4 <HAL_PCD_MspInit+0xc0>)
 8017550:	f7ea ff0c 	bl	800236c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8017554:	f44f 7300 	mov.w	r3, #512	; 0x200
 8017558:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 801755a:	2300      	movs	r3, #0
 801755c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801755e:	2300      	movs	r3, #0
 8017560:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8017562:	f107 0314 	add.w	r3, r7, #20
 8017566:	4619      	mov	r1, r3
 8017568:	4812      	ldr	r0, [pc, #72]	; (80175b4 <HAL_PCD_MspInit+0xc0>)
 801756a:	f7ea feff 	bl	800236c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 801756e:	4b10      	ldr	r3, [pc, #64]	; (80175b0 <HAL_PCD_MspInit+0xbc>)
 8017570:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8017572:	4a0f      	ldr	r2, [pc, #60]	; (80175b0 <HAL_PCD_MspInit+0xbc>)
 8017574:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8017578:	6353      	str	r3, [r2, #52]	; 0x34
 801757a:	2300      	movs	r3, #0
 801757c:	60fb      	str	r3, [r7, #12]
 801757e:	4b0c      	ldr	r3, [pc, #48]	; (80175b0 <HAL_PCD_MspInit+0xbc>)
 8017580:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8017582:	4a0b      	ldr	r2, [pc, #44]	; (80175b0 <HAL_PCD_MspInit+0xbc>)
 8017584:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8017588:	6453      	str	r3, [r2, #68]	; 0x44
 801758a:	4b09      	ldr	r3, [pc, #36]	; (80175b0 <HAL_PCD_MspInit+0xbc>)
 801758c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801758e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8017592:	60fb      	str	r3, [r7, #12]
 8017594:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 8017596:	2200      	movs	r2, #0
 8017598:	2105      	movs	r1, #5
 801759a:	2043      	movs	r0, #67	; 0x43
 801759c:	f7e9 feaa 	bl	80012f4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80175a0:	2043      	movs	r0, #67	; 0x43
 80175a2:	f7e9 fec3 	bl	800132c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80175a6:	bf00      	nop
 80175a8:	3728      	adds	r7, #40	; 0x28
 80175aa:	46bd      	mov	sp, r7
 80175ac:	bd80      	pop	{r7, pc}
 80175ae:	bf00      	nop
 80175b0:	40023800 	.word	0x40023800
 80175b4:	40020000 	.word	0x40020000

080175b8 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80175b8:	b580      	push	{r7, lr}
 80175ba:	b082      	sub	sp, #8
 80175bc:	af00      	add	r7, sp, #0
 80175be:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80175c0:	687b      	ldr	r3, [r7, #4]
 80175c2:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 80175c6:	687b      	ldr	r3, [r7, #4]
 80175c8:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80175cc:	4619      	mov	r1, r3
 80175ce:	4610      	mov	r0, r2
 80175d0:	f7ef ffcb 	bl	800756a <USBD_LL_SetupStage>
}
 80175d4:	bf00      	nop
 80175d6:	3708      	adds	r7, #8
 80175d8:	46bd      	mov	sp, r7
 80175da:	bd80      	pop	{r7, pc}

080175dc <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80175dc:	b580      	push	{r7, lr}
 80175de:	b082      	sub	sp, #8
 80175e0:	af00      	add	r7, sp, #0
 80175e2:	6078      	str	r0, [r7, #4]
 80175e4:	460b      	mov	r3, r1
 80175e6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80175e8:	687b      	ldr	r3, [r7, #4]
 80175ea:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 80175ee:	78fa      	ldrb	r2, [r7, #3]
 80175f0:	6879      	ldr	r1, [r7, #4]
 80175f2:	4613      	mov	r3, r2
 80175f4:	00db      	lsls	r3, r3, #3
 80175f6:	1a9b      	subs	r3, r3, r2
 80175f8:	009b      	lsls	r3, r3, #2
 80175fa:	440b      	add	r3, r1
 80175fc:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8017600:	681a      	ldr	r2, [r3, #0]
 8017602:	78fb      	ldrb	r3, [r7, #3]
 8017604:	4619      	mov	r1, r3
 8017606:	f7ef fffb 	bl	8007600 <USBD_LL_DataOutStage>
}
 801760a:	bf00      	nop
 801760c:	3708      	adds	r7, #8
 801760e:	46bd      	mov	sp, r7
 8017610:	bd80      	pop	{r7, pc}

08017612 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8017612:	b580      	push	{r7, lr}
 8017614:	b082      	sub	sp, #8
 8017616:	af00      	add	r7, sp, #0
 8017618:	6078      	str	r0, [r7, #4]
 801761a:	460b      	mov	r3, r1
 801761c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 801761e:	687b      	ldr	r3, [r7, #4]
 8017620:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8017624:	78fa      	ldrb	r2, [r7, #3]
 8017626:	6879      	ldr	r1, [r7, #4]
 8017628:	4613      	mov	r3, r2
 801762a:	00db      	lsls	r3, r3, #3
 801762c:	1a9b      	subs	r3, r3, r2
 801762e:	009b      	lsls	r3, r3, #2
 8017630:	440b      	add	r3, r1
 8017632:	3348      	adds	r3, #72	; 0x48
 8017634:	681a      	ldr	r2, [r3, #0]
 8017636:	78fb      	ldrb	r3, [r7, #3]
 8017638:	4619      	mov	r1, r3
 801763a:	f7f0 f852 	bl	80076e2 <USBD_LL_DataInStage>
}
 801763e:	bf00      	nop
 8017640:	3708      	adds	r7, #8
 8017642:	46bd      	mov	sp, r7
 8017644:	bd80      	pop	{r7, pc}

08017646 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8017646:	b580      	push	{r7, lr}
 8017648:	b082      	sub	sp, #8
 801764a:	af00      	add	r7, sp, #0
 801764c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 801764e:	687b      	ldr	r3, [r7, #4]
 8017650:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8017654:	4618      	mov	r0, r3
 8017656:	f7f0 f960 	bl	800791a <USBD_LL_SOF>
}
 801765a:	bf00      	nop
 801765c:	3708      	adds	r7, #8
 801765e:	46bd      	mov	sp, r7
 8017660:	bd80      	pop	{r7, pc}

08017662 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{ 
 8017662:	b580      	push	{r7, lr}
 8017664:	b084      	sub	sp, #16
 8017666:	af00      	add	r7, sp, #0
 8017668:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 801766a:	2301      	movs	r3, #1
 801766c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 801766e:	687b      	ldr	r3, [r7, #4]
 8017670:	68db      	ldr	r3, [r3, #12]
 8017672:	2b00      	cmp	r3, #0
 8017674:	d102      	bne.n	801767c <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8017676:	2300      	movs	r3, #0
 8017678:	73fb      	strb	r3, [r7, #15]
 801767a:	e008      	b.n	801768e <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 801767c:	687b      	ldr	r3, [r7, #4]
 801767e:	68db      	ldr	r3, [r3, #12]
 8017680:	2b02      	cmp	r3, #2
 8017682:	d102      	bne.n	801768a <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8017684:	2301      	movs	r3, #1
 8017686:	73fb      	strb	r3, [r7, #15]
 8017688:	e001      	b.n	801768e <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 801768a:	f7e9 faad 	bl	8000be8 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 801768e:	687b      	ldr	r3, [r7, #4]
 8017690:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8017694:	7bfa      	ldrb	r2, [r7, #15]
 8017696:	4611      	mov	r1, r2
 8017698:	4618      	mov	r0, r3
 801769a:	f7f0 f908 	bl	80078ae <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 801769e:	687b      	ldr	r3, [r7, #4]
 80176a0:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80176a4:	4618      	mov	r0, r3
 80176a6:	f7f0 f8c1 	bl	800782c <USBD_LL_Reset>
}
 80176aa:	bf00      	nop
 80176ac:	3710      	adds	r7, #16
 80176ae:	46bd      	mov	sp, r7
 80176b0:	bd80      	pop	{r7, pc}
	...

080176b4 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80176b4:	b580      	push	{r7, lr}
 80176b6:	b082      	sub	sp, #8
 80176b8:	af00      	add	r7, sp, #0
 80176ba:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80176bc:	687b      	ldr	r3, [r7, #4]
 80176be:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80176c2:	4618      	mov	r0, r3
 80176c4:	f7f0 f903 	bl	80078ce <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80176c8:	687b      	ldr	r3, [r7, #4]
 80176ca:	681b      	ldr	r3, [r3, #0]
 80176cc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80176d0:	681b      	ldr	r3, [r3, #0]
 80176d2:	687a      	ldr	r2, [r7, #4]
 80176d4:	6812      	ldr	r2, [r2, #0]
 80176d6:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80176da:	f043 0301 	orr.w	r3, r3, #1
 80176de:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80176e0:	687b      	ldr	r3, [r7, #4]
 80176e2:	6a1b      	ldr	r3, [r3, #32]
 80176e4:	2b00      	cmp	r3, #0
 80176e6:	d005      	beq.n	80176f4 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80176e8:	4b04      	ldr	r3, [pc, #16]	; (80176fc <HAL_PCD_SuspendCallback+0x48>)
 80176ea:	691b      	ldr	r3, [r3, #16]
 80176ec:	4a03      	ldr	r2, [pc, #12]	; (80176fc <HAL_PCD_SuspendCallback+0x48>)
 80176ee:	f043 0306 	orr.w	r3, r3, #6
 80176f2:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80176f4:	bf00      	nop
 80176f6:	3708      	adds	r7, #8
 80176f8:	46bd      	mov	sp, r7
 80176fa:	bd80      	pop	{r7, pc}
 80176fc:	e000ed00 	.word	0xe000ed00

08017700 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8017700:	b580      	push	{r7, lr}
 8017702:	b082      	sub	sp, #8
 8017704:	af00      	add	r7, sp, #0
 8017706:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8017708:	687b      	ldr	r3, [r7, #4]
 801770a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801770e:	4618      	mov	r0, r3
 8017710:	f7f0 f8f2 	bl	80078f8 <USBD_LL_Resume>
}
 8017714:	bf00      	nop
 8017716:	3708      	adds	r7, #8
 8017718:	46bd      	mov	sp, r7
 801771a:	bd80      	pop	{r7, pc}

0801771c <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801771c:	b580      	push	{r7, lr}
 801771e:	b082      	sub	sp, #8
 8017720:	af00      	add	r7, sp, #0
 8017722:	6078      	str	r0, [r7, #4]
 8017724:	460b      	mov	r3, r1
 8017726:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8017728:	687b      	ldr	r3, [r7, #4]
 801772a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801772e:	78fa      	ldrb	r2, [r7, #3]
 8017730:	4611      	mov	r1, r2
 8017732:	4618      	mov	r0, r3
 8017734:	f7f0 f918 	bl	8007968 <USBD_LL_IsoOUTIncomplete>
}
 8017738:	bf00      	nop
 801773a:	3708      	adds	r7, #8
 801773c:	46bd      	mov	sp, r7
 801773e:	bd80      	pop	{r7, pc}

08017740 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8017740:	b580      	push	{r7, lr}
 8017742:	b082      	sub	sp, #8
 8017744:	af00      	add	r7, sp, #0
 8017746:	6078      	str	r0, [r7, #4]
 8017748:	460b      	mov	r3, r1
 801774a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 801774c:	687b      	ldr	r3, [r7, #4]
 801774e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8017752:	78fa      	ldrb	r2, [r7, #3]
 8017754:	4611      	mov	r1, r2
 8017756:	4618      	mov	r0, r3
 8017758:	f7f0 f8f9 	bl	800794e <USBD_LL_IsoINIncomplete>
}
 801775c:	bf00      	nop
 801775e:	3708      	adds	r7, #8
 8017760:	46bd      	mov	sp, r7
 8017762:	bd80      	pop	{r7, pc}

08017764 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8017764:	b580      	push	{r7, lr}
 8017766:	b082      	sub	sp, #8
 8017768:	af00      	add	r7, sp, #0
 801776a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 801776c:	687b      	ldr	r3, [r7, #4]
 801776e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8017772:	4618      	mov	r0, r3
 8017774:	f7f0 f905 	bl	8007982 <USBD_LL_DevConnected>
}
 8017778:	bf00      	nop
 801777a:	3708      	adds	r7, #8
 801777c:	46bd      	mov	sp, r7
 801777e:	bd80      	pop	{r7, pc}

08017780 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8017780:	b580      	push	{r7, lr}
 8017782:	b082      	sub	sp, #8
 8017784:	af00      	add	r7, sp, #0
 8017786:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8017788:	687b      	ldr	r3, [r7, #4]
 801778a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801778e:	4618      	mov	r0, r3
 8017790:	f7f0 f902 	bl	8007998 <USBD_LL_DevDisconnected>
}
 8017794:	bf00      	nop
 8017796:	3708      	adds	r7, #8
 8017798:	46bd      	mov	sp, r7
 801779a:	bd80      	pop	{r7, pc}

0801779c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 801779c:	b580      	push	{r7, lr}
 801779e:	b082      	sub	sp, #8
 80177a0:	af00      	add	r7, sp, #0
 80177a2:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 80177a4:	687b      	ldr	r3, [r7, #4]
 80177a6:	781b      	ldrb	r3, [r3, #0]
 80177a8:	2b00      	cmp	r3, #0
 80177aa:	d13c      	bne.n	8017826 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 80177ac:	4a20      	ldr	r2, [pc, #128]	; (8017830 <USBD_LL_Init+0x94>)
 80177ae:	687b      	ldr	r3, [r7, #4]
 80177b0:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 80177b4:	687b      	ldr	r3, [r7, #4]
 80177b6:	4a1e      	ldr	r2, [pc, #120]	; (8017830 <USBD_LL_Init+0x94>)
 80177b8:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298
  
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80177bc:	4b1c      	ldr	r3, [pc, #112]	; (8017830 <USBD_LL_Init+0x94>)
 80177be:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80177c2:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 80177c4:	4b1a      	ldr	r3, [pc, #104]	; (8017830 <USBD_LL_Init+0x94>)
 80177c6:	2204      	movs	r2, #4
 80177c8:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80177ca:	4b19      	ldr	r3, [pc, #100]	; (8017830 <USBD_LL_Init+0x94>)
 80177cc:	2202      	movs	r2, #2
 80177ce:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80177d0:	4b17      	ldr	r3, [pc, #92]	; (8017830 <USBD_LL_Init+0x94>)
 80177d2:	2200      	movs	r2, #0
 80177d4:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80177d6:	4b16      	ldr	r3, [pc, #88]	; (8017830 <USBD_LL_Init+0x94>)
 80177d8:	2202      	movs	r2, #2
 80177da:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 80177dc:	4b14      	ldr	r3, [pc, #80]	; (8017830 <USBD_LL_Init+0x94>)
 80177de:	2201      	movs	r2, #1
 80177e0:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80177e2:	4b13      	ldr	r3, [pc, #76]	; (8017830 <USBD_LL_Init+0x94>)
 80177e4:	2200      	movs	r2, #0
 80177e6:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80177e8:	4b11      	ldr	r3, [pc, #68]	; (8017830 <USBD_LL_Init+0x94>)
 80177ea:	2200      	movs	r2, #0
 80177ec:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 80177ee:	4b10      	ldr	r3, [pc, #64]	; (8017830 <USBD_LL_Init+0x94>)
 80177f0:	2201      	movs	r2, #1
 80177f2:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80177f4:	4b0e      	ldr	r3, [pc, #56]	; (8017830 <USBD_LL_Init+0x94>)
 80177f6:	2200      	movs	r2, #0
 80177f8:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80177fa:	480d      	ldr	r0, [pc, #52]	; (8017830 <USBD_LL_Init+0x94>)
 80177fc:	f7ea ff79 	bl	80026f2 <HAL_PCD_Init>
 8017800:	4603      	mov	r3, r0
 8017802:	2b00      	cmp	r3, #0
 8017804:	d001      	beq.n	801780a <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8017806:	f7e9 f9ef 	bl	8000be8 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 801780a:	2180      	movs	r1, #128	; 0x80
 801780c:	4808      	ldr	r0, [pc, #32]	; (8017830 <USBD_LL_Init+0x94>)
 801780e:	f7ec f8de 	bl	80039ce <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8017812:	2240      	movs	r2, #64	; 0x40
 8017814:	2100      	movs	r1, #0
 8017816:	4806      	ldr	r0, [pc, #24]	; (8017830 <USBD_LL_Init+0x94>)
 8017818:	f7ec f892 	bl	8003940 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 801781c:	2280      	movs	r2, #128	; 0x80
 801781e:	2101      	movs	r1, #1
 8017820:	4803      	ldr	r0, [pc, #12]	; (8017830 <USBD_LL_Init+0x94>)
 8017822:	f7ec f88d 	bl	8003940 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8017826:	2300      	movs	r3, #0
}
 8017828:	4618      	mov	r0, r3
 801782a:	3708      	adds	r7, #8
 801782c:	46bd      	mov	sp, r7
 801782e:	bd80      	pop	{r7, pc}
 8017830:	2000ca98 	.word	0x2000ca98

08017834 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver. 
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8017834:	b580      	push	{r7, lr}
 8017836:	b084      	sub	sp, #16
 8017838:	af00      	add	r7, sp, #0
 801783a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801783c:	2300      	movs	r3, #0
 801783e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8017840:	2300      	movs	r3, #0
 8017842:	73bb      	strb	r3, [r7, #14]
 
  hal_status = HAL_PCD_Start(pdev->pData);
 8017844:	687b      	ldr	r3, [r7, #4]
 8017846:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 801784a:	4618      	mov	r0, r3
 801784c:	f7eb f86e 	bl	800292c <HAL_PCD_Start>
 8017850:	4603      	mov	r3, r0
 8017852:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);     
 8017854:	7bfb      	ldrb	r3, [r7, #15]
 8017856:	4618      	mov	r0, r3
 8017858:	f000 f92e 	bl	8017ab8 <USBD_Get_USB_Status>
 801785c:	4603      	mov	r3, r0
 801785e:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 8017860:	7bbb      	ldrb	r3, [r7, #14]
}
 8017862:	4618      	mov	r0, r3
 8017864:	3710      	adds	r7, #16
 8017866:	46bd      	mov	sp, r7
 8017868:	bd80      	pop	{r7, pc}

0801786a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 801786a:	b580      	push	{r7, lr}
 801786c:	b084      	sub	sp, #16
 801786e:	af00      	add	r7, sp, #0
 8017870:	6078      	str	r0, [r7, #4]
 8017872:	4608      	mov	r0, r1
 8017874:	4611      	mov	r1, r2
 8017876:	461a      	mov	r2, r3
 8017878:	4603      	mov	r3, r0
 801787a:	70fb      	strb	r3, [r7, #3]
 801787c:	460b      	mov	r3, r1
 801787e:	70bb      	strb	r3, [r7, #2]
 8017880:	4613      	mov	r3, r2
 8017882:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8017884:	2300      	movs	r3, #0
 8017886:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8017888:	2300      	movs	r3, #0
 801788a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 801788c:	687b      	ldr	r3, [r7, #4]
 801788e:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 8017892:	78bb      	ldrb	r3, [r7, #2]
 8017894:	883a      	ldrh	r2, [r7, #0]
 8017896:	78f9      	ldrb	r1, [r7, #3]
 8017898:	f7eb fc43 	bl	8003122 <HAL_PCD_EP_Open>
 801789c:	4603      	mov	r3, r0
 801789e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80178a0:	7bfb      	ldrb	r3, [r7, #15]
 80178a2:	4618      	mov	r0, r3
 80178a4:	f000 f908 	bl	8017ab8 <USBD_Get_USB_Status>
 80178a8:	4603      	mov	r3, r0
 80178aa:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 80178ac:	7bbb      	ldrb	r3, [r7, #14]
}
 80178ae:	4618      	mov	r0, r3
 80178b0:	3710      	adds	r7, #16
 80178b2:	46bd      	mov	sp, r7
 80178b4:	bd80      	pop	{r7, pc}

080178b6 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80178b6:	b580      	push	{r7, lr}
 80178b8:	b084      	sub	sp, #16
 80178ba:	af00      	add	r7, sp, #0
 80178bc:	6078      	str	r0, [r7, #4]
 80178be:	460b      	mov	r3, r1
 80178c0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80178c2:	2300      	movs	r3, #0
 80178c4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80178c6:	2300      	movs	r3, #0
 80178c8:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80178ca:	687b      	ldr	r3, [r7, #4]
 80178cc:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 80178d0:	78fa      	ldrb	r2, [r7, #3]
 80178d2:	4611      	mov	r1, r2
 80178d4:	4618      	mov	r0, r3
 80178d6:	f7eb fc8c 	bl	80031f2 <HAL_PCD_EP_Close>
 80178da:	4603      	mov	r3, r0
 80178dc:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);    
 80178de:	7bfb      	ldrb	r3, [r7, #15]
 80178e0:	4618      	mov	r0, r3
 80178e2:	f000 f8e9 	bl	8017ab8 <USBD_Get_USB_Status>
 80178e6:	4603      	mov	r3, r0
 80178e8:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;  
 80178ea:	7bbb      	ldrb	r3, [r7, #14]
}
 80178ec:	4618      	mov	r0, r3
 80178ee:	3710      	adds	r7, #16
 80178f0:	46bd      	mov	sp, r7
 80178f2:	bd80      	pop	{r7, pc}

080178f4 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80178f4:	b580      	push	{r7, lr}
 80178f6:	b084      	sub	sp, #16
 80178f8:	af00      	add	r7, sp, #0
 80178fa:	6078      	str	r0, [r7, #4]
 80178fc:	460b      	mov	r3, r1
 80178fe:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8017900:	2300      	movs	r3, #0
 8017902:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8017904:	2300      	movs	r3, #0
 8017906:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8017908:	687b      	ldr	r3, [r7, #4]
 801790a:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 801790e:	78fa      	ldrb	r2, [r7, #3]
 8017910:	4611      	mov	r1, r2
 8017912:	4618      	mov	r0, r3
 8017914:	f7eb fd64 	bl	80033e0 <HAL_PCD_EP_SetStall>
 8017918:	4603      	mov	r3, r0
 801791a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801791c:	7bfb      	ldrb	r3, [r7, #15]
 801791e:	4618      	mov	r0, r3
 8017920:	f000 f8ca 	bl	8017ab8 <USBD_Get_USB_Status>
 8017924:	4603      	mov	r3, r0
 8017926:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;  
 8017928:	7bbb      	ldrb	r3, [r7, #14]
}
 801792a:	4618      	mov	r0, r3
 801792c:	3710      	adds	r7, #16
 801792e:	46bd      	mov	sp, r7
 8017930:	bd80      	pop	{r7, pc}

08017932 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8017932:	b580      	push	{r7, lr}
 8017934:	b084      	sub	sp, #16
 8017936:	af00      	add	r7, sp, #0
 8017938:	6078      	str	r0, [r7, #4]
 801793a:	460b      	mov	r3, r1
 801793c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801793e:	2300      	movs	r3, #0
 8017940:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8017942:	2300      	movs	r3, #0
 8017944:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8017946:	687b      	ldr	r3, [r7, #4]
 8017948:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 801794c:	78fa      	ldrb	r2, [r7, #3]
 801794e:	4611      	mov	r1, r2
 8017950:	4618      	mov	r0, r3
 8017952:	f7eb fda9 	bl	80034a8 <HAL_PCD_EP_ClrStall>
 8017956:	4603      	mov	r3, r0
 8017958:	73fb      	strb	r3, [r7, #15]
    
  usb_status =  USBD_Get_USB_Status(hal_status);  
 801795a:	7bfb      	ldrb	r3, [r7, #15]
 801795c:	4618      	mov	r0, r3
 801795e:	f000 f8ab 	bl	8017ab8 <USBD_Get_USB_Status>
 8017962:	4603      	mov	r3, r0
 8017964:	73bb      	strb	r3, [r7, #14]
  
  return usb_status; 
 8017966:	7bbb      	ldrb	r3, [r7, #14]
}
 8017968:	4618      	mov	r0, r3
 801796a:	3710      	adds	r7, #16
 801796c:	46bd      	mov	sp, r7
 801796e:	bd80      	pop	{r7, pc}

08017970 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8017970:	b480      	push	{r7}
 8017972:	b085      	sub	sp, #20
 8017974:	af00      	add	r7, sp, #0
 8017976:	6078      	str	r0, [r7, #4]
 8017978:	460b      	mov	r3, r1
 801797a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 801797c:	687b      	ldr	r3, [r7, #4]
 801797e:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8017982:	60fb      	str	r3, [r7, #12]
  
  if((ep_addr & 0x80) == 0x80)
 8017984:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8017988:	2b00      	cmp	r3, #0
 801798a:	da0b      	bge.n	80179a4 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 801798c:	78fb      	ldrb	r3, [r7, #3]
 801798e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8017992:	68f9      	ldr	r1, [r7, #12]
 8017994:	4613      	mov	r3, r2
 8017996:	00db      	lsls	r3, r3, #3
 8017998:	1a9b      	subs	r3, r3, r2
 801799a:	009b      	lsls	r3, r3, #2
 801799c:	440b      	add	r3, r1
 801799e:	333e      	adds	r3, #62	; 0x3e
 80179a0:	781b      	ldrb	r3, [r3, #0]
 80179a2:	e00b      	b.n	80179bc <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 80179a4:	78fb      	ldrb	r3, [r7, #3]
 80179a6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80179aa:	68f9      	ldr	r1, [r7, #12]
 80179ac:	4613      	mov	r3, r2
 80179ae:	00db      	lsls	r3, r3, #3
 80179b0:	1a9b      	subs	r3, r3, r2
 80179b2:	009b      	lsls	r3, r3, #2
 80179b4:	440b      	add	r3, r1
 80179b6:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80179ba:	781b      	ldrb	r3, [r3, #0]
  }
}
 80179bc:	4618      	mov	r0, r3
 80179be:	3714      	adds	r7, #20
 80179c0:	46bd      	mov	sp, r7
 80179c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80179c6:	4770      	bx	lr

080179c8 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80179c8:	b580      	push	{r7, lr}
 80179ca:	b084      	sub	sp, #16
 80179cc:	af00      	add	r7, sp, #0
 80179ce:	6078      	str	r0, [r7, #4]
 80179d0:	460b      	mov	r3, r1
 80179d2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80179d4:	2300      	movs	r3, #0
 80179d6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80179d8:	2300      	movs	r3, #0
 80179da:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80179dc:	687b      	ldr	r3, [r7, #4]
 80179de:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 80179e2:	78fa      	ldrb	r2, [r7, #3]
 80179e4:	4611      	mov	r1, r2
 80179e6:	4618      	mov	r0, r3
 80179e8:	f7eb fb76 	bl	80030d8 <HAL_PCD_SetAddress>
 80179ec:	4603      	mov	r3, r0
 80179ee:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);
 80179f0:	7bfb      	ldrb	r3, [r7, #15]
 80179f2:	4618      	mov	r0, r3
 80179f4:	f000 f860 	bl	8017ab8 <USBD_Get_USB_Status>
 80179f8:	4603      	mov	r3, r0
 80179fa:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;  
 80179fc:	7bbb      	ldrb	r3, [r7, #14]
}
 80179fe:	4618      	mov	r0, r3
 8017a00:	3710      	adds	r7, #16
 8017a02:	46bd      	mov	sp, r7
 8017a04:	bd80      	pop	{r7, pc}

08017a06 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size    
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8017a06:	b580      	push	{r7, lr}
 8017a08:	b086      	sub	sp, #24
 8017a0a:	af00      	add	r7, sp, #0
 8017a0c:	60f8      	str	r0, [r7, #12]
 8017a0e:	607a      	str	r2, [r7, #4]
 8017a10:	461a      	mov	r2, r3
 8017a12:	460b      	mov	r3, r1
 8017a14:	72fb      	strb	r3, [r7, #11]
 8017a16:	4613      	mov	r3, r2
 8017a18:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8017a1a:	2300      	movs	r3, #0
 8017a1c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8017a1e:	2300      	movs	r3, #0
 8017a20:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8017a22:	68fb      	ldr	r3, [r7, #12]
 8017a24:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 8017a28:	893b      	ldrh	r3, [r7, #8]
 8017a2a:	7af9      	ldrb	r1, [r7, #11]
 8017a2c:	687a      	ldr	r2, [r7, #4]
 8017a2e:	f7eb fc8d 	bl	800334c <HAL_PCD_EP_Transmit>
 8017a32:	4603      	mov	r3, r0
 8017a34:	75fb      	strb	r3, [r7, #23]
  
  usb_status =  USBD_Get_USB_Status(hal_status); 
 8017a36:	7dfb      	ldrb	r3, [r7, #23]
 8017a38:	4618      	mov	r0, r3
 8017a3a:	f000 f83d 	bl	8017ab8 <USBD_Get_USB_Status>
 8017a3e:	4603      	mov	r3, r0
 8017a40:	75bb      	strb	r3, [r7, #22]
  
  return usb_status;    
 8017a42:	7dbb      	ldrb	r3, [r7, #22]
}
 8017a44:	4618      	mov	r0, r3
 8017a46:	3718      	adds	r7, #24
 8017a48:	46bd      	mov	sp, r7
 8017a4a:	bd80      	pop	{r7, pc}

08017a4c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8017a4c:	b580      	push	{r7, lr}
 8017a4e:	b086      	sub	sp, #24
 8017a50:	af00      	add	r7, sp, #0
 8017a52:	60f8      	str	r0, [r7, #12]
 8017a54:	607a      	str	r2, [r7, #4]
 8017a56:	461a      	mov	r2, r3
 8017a58:	460b      	mov	r3, r1
 8017a5a:	72fb      	strb	r3, [r7, #11]
 8017a5c:	4613      	mov	r3, r2
 8017a5e:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8017a60:	2300      	movs	r3, #0
 8017a62:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8017a64:	2300      	movs	r3, #0
 8017a66:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8017a68:	68fb      	ldr	r3, [r7, #12]
 8017a6a:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 8017a6e:	893b      	ldrh	r3, [r7, #8]
 8017a70:	7af9      	ldrb	r1, [r7, #11]
 8017a72:	687a      	ldr	r2, [r7, #4]
 8017a74:	f7eb fc07 	bl	8003286 <HAL_PCD_EP_Receive>
 8017a78:	4603      	mov	r3, r0
 8017a7a:	75fb      	strb	r3, [r7, #23]
  
  usb_status =  USBD_Get_USB_Status(hal_status);   
 8017a7c:	7dfb      	ldrb	r3, [r7, #23]
 8017a7e:	4618      	mov	r0, r3
 8017a80:	f000 f81a 	bl	8017ab8 <USBD_Get_USB_Status>
 8017a84:	4603      	mov	r3, r0
 8017a86:	75bb      	strb	r3, [r7, #22]
  
  return usb_status; 
 8017a88:	7dbb      	ldrb	r3, [r7, #22]
}
 8017a8a:	4618      	mov	r0, r3
 8017a8c:	3718      	adds	r7, #24
 8017a8e:	46bd      	mov	sp, r7
 8017a90:	bd80      	pop	{r7, pc}

08017a92 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8017a92:	b580      	push	{r7, lr}
 8017a94:	b082      	sub	sp, #8
 8017a96:	af00      	add	r7, sp, #0
 8017a98:	6078      	str	r0, [r7, #4]
 8017a9a:	460b      	mov	r3, r1
 8017a9c:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8017a9e:	687b      	ldr	r3, [r7, #4]
 8017aa0:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8017aa4:	78fa      	ldrb	r2, [r7, #3]
 8017aa6:	4611      	mov	r1, r2
 8017aa8:	4618      	mov	r0, r3
 8017aaa:	f7eb fc37 	bl	800331c <HAL_PCD_EP_GetRxCount>
 8017aae:	4603      	mov	r3, r0
}
 8017ab0:	4618      	mov	r0, r3
 8017ab2:	3708      	adds	r7, #8
 8017ab4:	46bd      	mov	sp, r7
 8017ab6:	bd80      	pop	{r7, pc}

08017ab8 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8017ab8:	b480      	push	{r7}
 8017aba:	b085      	sub	sp, #20
 8017abc:	af00      	add	r7, sp, #0
 8017abe:	4603      	mov	r3, r0
 8017ac0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8017ac2:	2300      	movs	r3, #0
 8017ac4:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8017ac6:	79fb      	ldrb	r3, [r7, #7]
 8017ac8:	2b03      	cmp	r3, #3
 8017aca:	d817      	bhi.n	8017afc <USBD_Get_USB_Status+0x44>
 8017acc:	a201      	add	r2, pc, #4	; (adr r2, 8017ad4 <USBD_Get_USB_Status+0x1c>)
 8017ace:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8017ad2:	bf00      	nop
 8017ad4:	08017ae5 	.word	0x08017ae5
 8017ad8:	08017aeb 	.word	0x08017aeb
 8017adc:	08017af1 	.word	0x08017af1
 8017ae0:	08017af7 	.word	0x08017af7
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8017ae4:	2300      	movs	r3, #0
 8017ae6:	73fb      	strb	r3, [r7, #15]
    break;
 8017ae8:	e00b      	b.n	8017b02 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8017aea:	2302      	movs	r3, #2
 8017aec:	73fb      	strb	r3, [r7, #15]
    break;
 8017aee:	e008      	b.n	8017b02 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8017af0:	2301      	movs	r3, #1
 8017af2:	73fb      	strb	r3, [r7, #15]
    break;
 8017af4:	e005      	b.n	8017b02 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8017af6:	2302      	movs	r3, #2
 8017af8:	73fb      	strb	r3, [r7, #15]
    break;
 8017afa:	e002      	b.n	8017b02 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8017afc:	2302      	movs	r3, #2
 8017afe:	73fb      	strb	r3, [r7, #15]
    break;
 8017b00:	bf00      	nop
  }
  return usb_status;
 8017b02:	7bfb      	ldrb	r3, [r7, #15]
}
 8017b04:	4618      	mov	r0, r3
 8017b06:	3714      	adds	r7, #20
 8017b08:	46bd      	mov	sp, r7
 8017b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017b0e:	4770      	bx	lr

08017b10 <__libc_init_array>:
 8017b10:	b570      	push	{r4, r5, r6, lr}
 8017b12:	4e0d      	ldr	r6, [pc, #52]	; (8017b48 <__libc_init_array+0x38>)
 8017b14:	4c0d      	ldr	r4, [pc, #52]	; (8017b4c <__libc_init_array+0x3c>)
 8017b16:	1ba4      	subs	r4, r4, r6
 8017b18:	10a4      	asrs	r4, r4, #2
 8017b1a:	2500      	movs	r5, #0
 8017b1c:	42a5      	cmp	r5, r4
 8017b1e:	d109      	bne.n	8017b34 <__libc_init_array+0x24>
 8017b20:	4e0b      	ldr	r6, [pc, #44]	; (8017b50 <__libc_init_array+0x40>)
 8017b22:	4c0c      	ldr	r4, [pc, #48]	; (8017b54 <__libc_init_array+0x44>)
 8017b24:	f000 ff62 	bl	80189ec <_init>
 8017b28:	1ba4      	subs	r4, r4, r6
 8017b2a:	10a4      	asrs	r4, r4, #2
 8017b2c:	2500      	movs	r5, #0
 8017b2e:	42a5      	cmp	r5, r4
 8017b30:	d105      	bne.n	8017b3e <__libc_init_array+0x2e>
 8017b32:	bd70      	pop	{r4, r5, r6, pc}
 8017b34:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8017b38:	4798      	blx	r3
 8017b3a:	3501      	adds	r5, #1
 8017b3c:	e7ee      	b.n	8017b1c <__libc_init_array+0xc>
 8017b3e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8017b42:	4798      	blx	r3
 8017b44:	3501      	adds	r5, #1
 8017b46:	e7f2      	b.n	8017b2e <__libc_init_array+0x1e>
 8017b48:	0801af4c 	.word	0x0801af4c
 8017b4c:	0801af4c 	.word	0x0801af4c
 8017b50:	0801af4c 	.word	0x0801af4c
 8017b54:	0801af50 	.word	0x0801af50

08017b58 <malloc>:
 8017b58:	4b02      	ldr	r3, [pc, #8]	; (8017b64 <malloc+0xc>)
 8017b5a:	4601      	mov	r1, r0
 8017b5c:	6818      	ldr	r0, [r3, #0]
 8017b5e:	f000 b87b 	b.w	8017c58 <_malloc_r>
 8017b62:	bf00      	nop
 8017b64:	20000188 	.word	0x20000188

08017b68 <free>:
 8017b68:	4b02      	ldr	r3, [pc, #8]	; (8017b74 <free+0xc>)
 8017b6a:	4601      	mov	r1, r0
 8017b6c:	6818      	ldr	r0, [r3, #0]
 8017b6e:	f000 b825 	b.w	8017bbc <_free_r>
 8017b72:	bf00      	nop
 8017b74:	20000188 	.word	0x20000188

08017b78 <memcmp>:
 8017b78:	b530      	push	{r4, r5, lr}
 8017b7a:	2400      	movs	r4, #0
 8017b7c:	42a2      	cmp	r2, r4
 8017b7e:	d101      	bne.n	8017b84 <memcmp+0xc>
 8017b80:	2000      	movs	r0, #0
 8017b82:	e007      	b.n	8017b94 <memcmp+0x1c>
 8017b84:	5d03      	ldrb	r3, [r0, r4]
 8017b86:	3401      	adds	r4, #1
 8017b88:	190d      	adds	r5, r1, r4
 8017b8a:	f815 5c01 	ldrb.w	r5, [r5, #-1]
 8017b8e:	42ab      	cmp	r3, r5
 8017b90:	d0f4      	beq.n	8017b7c <memcmp+0x4>
 8017b92:	1b58      	subs	r0, r3, r5
 8017b94:	bd30      	pop	{r4, r5, pc}

08017b96 <memcpy>:
 8017b96:	b510      	push	{r4, lr}
 8017b98:	1e43      	subs	r3, r0, #1
 8017b9a:	440a      	add	r2, r1
 8017b9c:	4291      	cmp	r1, r2
 8017b9e:	d100      	bne.n	8017ba2 <memcpy+0xc>
 8017ba0:	bd10      	pop	{r4, pc}
 8017ba2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8017ba6:	f803 4f01 	strb.w	r4, [r3, #1]!
 8017baa:	e7f7      	b.n	8017b9c <memcpy+0x6>

08017bac <memset>:
 8017bac:	4402      	add	r2, r0
 8017bae:	4603      	mov	r3, r0
 8017bb0:	4293      	cmp	r3, r2
 8017bb2:	d100      	bne.n	8017bb6 <memset+0xa>
 8017bb4:	4770      	bx	lr
 8017bb6:	f803 1b01 	strb.w	r1, [r3], #1
 8017bba:	e7f9      	b.n	8017bb0 <memset+0x4>

08017bbc <_free_r>:
 8017bbc:	b538      	push	{r3, r4, r5, lr}
 8017bbe:	4605      	mov	r5, r0
 8017bc0:	2900      	cmp	r1, #0
 8017bc2:	d045      	beq.n	8017c50 <_free_r+0x94>
 8017bc4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8017bc8:	1f0c      	subs	r4, r1, #4
 8017bca:	2b00      	cmp	r3, #0
 8017bcc:	bfb8      	it	lt
 8017bce:	18e4      	addlt	r4, r4, r3
 8017bd0:	f000 f9c2 	bl	8017f58 <__malloc_lock>
 8017bd4:	4a1f      	ldr	r2, [pc, #124]	; (8017c54 <_free_r+0x98>)
 8017bd6:	6813      	ldr	r3, [r2, #0]
 8017bd8:	4610      	mov	r0, r2
 8017bda:	b933      	cbnz	r3, 8017bea <_free_r+0x2e>
 8017bdc:	6063      	str	r3, [r4, #4]
 8017bde:	6014      	str	r4, [r2, #0]
 8017be0:	4628      	mov	r0, r5
 8017be2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8017be6:	f000 b9b8 	b.w	8017f5a <__malloc_unlock>
 8017bea:	42a3      	cmp	r3, r4
 8017bec:	d90c      	bls.n	8017c08 <_free_r+0x4c>
 8017bee:	6821      	ldr	r1, [r4, #0]
 8017bf0:	1862      	adds	r2, r4, r1
 8017bf2:	4293      	cmp	r3, r2
 8017bf4:	bf04      	itt	eq
 8017bf6:	681a      	ldreq	r2, [r3, #0]
 8017bf8:	685b      	ldreq	r3, [r3, #4]
 8017bfa:	6063      	str	r3, [r4, #4]
 8017bfc:	bf04      	itt	eq
 8017bfe:	1852      	addeq	r2, r2, r1
 8017c00:	6022      	streq	r2, [r4, #0]
 8017c02:	6004      	str	r4, [r0, #0]
 8017c04:	e7ec      	b.n	8017be0 <_free_r+0x24>
 8017c06:	4613      	mov	r3, r2
 8017c08:	685a      	ldr	r2, [r3, #4]
 8017c0a:	b10a      	cbz	r2, 8017c10 <_free_r+0x54>
 8017c0c:	42a2      	cmp	r2, r4
 8017c0e:	d9fa      	bls.n	8017c06 <_free_r+0x4a>
 8017c10:	6819      	ldr	r1, [r3, #0]
 8017c12:	1858      	adds	r0, r3, r1
 8017c14:	42a0      	cmp	r0, r4
 8017c16:	d10b      	bne.n	8017c30 <_free_r+0x74>
 8017c18:	6820      	ldr	r0, [r4, #0]
 8017c1a:	4401      	add	r1, r0
 8017c1c:	1858      	adds	r0, r3, r1
 8017c1e:	4282      	cmp	r2, r0
 8017c20:	6019      	str	r1, [r3, #0]
 8017c22:	d1dd      	bne.n	8017be0 <_free_r+0x24>
 8017c24:	6810      	ldr	r0, [r2, #0]
 8017c26:	6852      	ldr	r2, [r2, #4]
 8017c28:	605a      	str	r2, [r3, #4]
 8017c2a:	4401      	add	r1, r0
 8017c2c:	6019      	str	r1, [r3, #0]
 8017c2e:	e7d7      	b.n	8017be0 <_free_r+0x24>
 8017c30:	d902      	bls.n	8017c38 <_free_r+0x7c>
 8017c32:	230c      	movs	r3, #12
 8017c34:	602b      	str	r3, [r5, #0]
 8017c36:	e7d3      	b.n	8017be0 <_free_r+0x24>
 8017c38:	6820      	ldr	r0, [r4, #0]
 8017c3a:	1821      	adds	r1, r4, r0
 8017c3c:	428a      	cmp	r2, r1
 8017c3e:	bf04      	itt	eq
 8017c40:	6811      	ldreq	r1, [r2, #0]
 8017c42:	6852      	ldreq	r2, [r2, #4]
 8017c44:	6062      	str	r2, [r4, #4]
 8017c46:	bf04      	itt	eq
 8017c48:	1809      	addeq	r1, r1, r0
 8017c4a:	6021      	streq	r1, [r4, #0]
 8017c4c:	605c      	str	r4, [r3, #4]
 8017c4e:	e7c7      	b.n	8017be0 <_free_r+0x24>
 8017c50:	bd38      	pop	{r3, r4, r5, pc}
 8017c52:	bf00      	nop
 8017c54:	20004cb8 	.word	0x20004cb8

08017c58 <_malloc_r>:
 8017c58:	b570      	push	{r4, r5, r6, lr}
 8017c5a:	1ccd      	adds	r5, r1, #3
 8017c5c:	f025 0503 	bic.w	r5, r5, #3
 8017c60:	3508      	adds	r5, #8
 8017c62:	2d0c      	cmp	r5, #12
 8017c64:	bf38      	it	cc
 8017c66:	250c      	movcc	r5, #12
 8017c68:	2d00      	cmp	r5, #0
 8017c6a:	4606      	mov	r6, r0
 8017c6c:	db01      	blt.n	8017c72 <_malloc_r+0x1a>
 8017c6e:	42a9      	cmp	r1, r5
 8017c70:	d903      	bls.n	8017c7a <_malloc_r+0x22>
 8017c72:	230c      	movs	r3, #12
 8017c74:	6033      	str	r3, [r6, #0]
 8017c76:	2000      	movs	r0, #0
 8017c78:	bd70      	pop	{r4, r5, r6, pc}
 8017c7a:	f000 f96d 	bl	8017f58 <__malloc_lock>
 8017c7e:	4a21      	ldr	r2, [pc, #132]	; (8017d04 <_malloc_r+0xac>)
 8017c80:	6814      	ldr	r4, [r2, #0]
 8017c82:	4621      	mov	r1, r4
 8017c84:	b991      	cbnz	r1, 8017cac <_malloc_r+0x54>
 8017c86:	4c20      	ldr	r4, [pc, #128]	; (8017d08 <_malloc_r+0xb0>)
 8017c88:	6823      	ldr	r3, [r4, #0]
 8017c8a:	b91b      	cbnz	r3, 8017c94 <_malloc_r+0x3c>
 8017c8c:	4630      	mov	r0, r6
 8017c8e:	f000 f889 	bl	8017da4 <_sbrk_r>
 8017c92:	6020      	str	r0, [r4, #0]
 8017c94:	4629      	mov	r1, r5
 8017c96:	4630      	mov	r0, r6
 8017c98:	f000 f884 	bl	8017da4 <_sbrk_r>
 8017c9c:	1c43      	adds	r3, r0, #1
 8017c9e:	d124      	bne.n	8017cea <_malloc_r+0x92>
 8017ca0:	230c      	movs	r3, #12
 8017ca2:	6033      	str	r3, [r6, #0]
 8017ca4:	4630      	mov	r0, r6
 8017ca6:	f000 f958 	bl	8017f5a <__malloc_unlock>
 8017caa:	e7e4      	b.n	8017c76 <_malloc_r+0x1e>
 8017cac:	680b      	ldr	r3, [r1, #0]
 8017cae:	1b5b      	subs	r3, r3, r5
 8017cb0:	d418      	bmi.n	8017ce4 <_malloc_r+0x8c>
 8017cb2:	2b0b      	cmp	r3, #11
 8017cb4:	d90f      	bls.n	8017cd6 <_malloc_r+0x7e>
 8017cb6:	600b      	str	r3, [r1, #0]
 8017cb8:	50cd      	str	r5, [r1, r3]
 8017cba:	18cc      	adds	r4, r1, r3
 8017cbc:	4630      	mov	r0, r6
 8017cbe:	f000 f94c 	bl	8017f5a <__malloc_unlock>
 8017cc2:	f104 000b 	add.w	r0, r4, #11
 8017cc6:	1d23      	adds	r3, r4, #4
 8017cc8:	f020 0007 	bic.w	r0, r0, #7
 8017ccc:	1ac3      	subs	r3, r0, r3
 8017cce:	d0d3      	beq.n	8017c78 <_malloc_r+0x20>
 8017cd0:	425a      	negs	r2, r3
 8017cd2:	50e2      	str	r2, [r4, r3]
 8017cd4:	e7d0      	b.n	8017c78 <_malloc_r+0x20>
 8017cd6:	428c      	cmp	r4, r1
 8017cd8:	684b      	ldr	r3, [r1, #4]
 8017cda:	bf16      	itet	ne
 8017cdc:	6063      	strne	r3, [r4, #4]
 8017cde:	6013      	streq	r3, [r2, #0]
 8017ce0:	460c      	movne	r4, r1
 8017ce2:	e7eb      	b.n	8017cbc <_malloc_r+0x64>
 8017ce4:	460c      	mov	r4, r1
 8017ce6:	6849      	ldr	r1, [r1, #4]
 8017ce8:	e7cc      	b.n	8017c84 <_malloc_r+0x2c>
 8017cea:	1cc4      	adds	r4, r0, #3
 8017cec:	f024 0403 	bic.w	r4, r4, #3
 8017cf0:	42a0      	cmp	r0, r4
 8017cf2:	d005      	beq.n	8017d00 <_malloc_r+0xa8>
 8017cf4:	1a21      	subs	r1, r4, r0
 8017cf6:	4630      	mov	r0, r6
 8017cf8:	f000 f854 	bl	8017da4 <_sbrk_r>
 8017cfc:	3001      	adds	r0, #1
 8017cfe:	d0cf      	beq.n	8017ca0 <_malloc_r+0x48>
 8017d00:	6025      	str	r5, [r4, #0]
 8017d02:	e7db      	b.n	8017cbc <_malloc_r+0x64>
 8017d04:	20004cb8 	.word	0x20004cb8
 8017d08:	20004cbc 	.word	0x20004cbc

08017d0c <iprintf>:
 8017d0c:	b40f      	push	{r0, r1, r2, r3}
 8017d0e:	4b0a      	ldr	r3, [pc, #40]	; (8017d38 <iprintf+0x2c>)
 8017d10:	b513      	push	{r0, r1, r4, lr}
 8017d12:	681c      	ldr	r4, [r3, #0]
 8017d14:	b124      	cbz	r4, 8017d20 <iprintf+0x14>
 8017d16:	69a3      	ldr	r3, [r4, #24]
 8017d18:	b913      	cbnz	r3, 8017d20 <iprintf+0x14>
 8017d1a:	4620      	mov	r0, r4
 8017d1c:	f000 f892 	bl	8017e44 <__sinit>
 8017d20:	ab05      	add	r3, sp, #20
 8017d22:	9a04      	ldr	r2, [sp, #16]
 8017d24:	68a1      	ldr	r1, [r4, #8]
 8017d26:	9301      	str	r3, [sp, #4]
 8017d28:	4620      	mov	r0, r4
 8017d2a:	f000 f941 	bl	8017fb0 <_vfiprintf_r>
 8017d2e:	b002      	add	sp, #8
 8017d30:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8017d34:	b004      	add	sp, #16
 8017d36:	4770      	bx	lr
 8017d38:	20000188 	.word	0x20000188

08017d3c <rand>:
 8017d3c:	b538      	push	{r3, r4, r5, lr}
 8017d3e:	4b13      	ldr	r3, [pc, #76]	; (8017d8c <rand+0x50>)
 8017d40:	681c      	ldr	r4, [r3, #0]
 8017d42:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8017d44:	b97b      	cbnz	r3, 8017d66 <rand+0x2a>
 8017d46:	2018      	movs	r0, #24
 8017d48:	f7ff ff06 	bl	8017b58 <malloc>
 8017d4c:	4a10      	ldr	r2, [pc, #64]	; (8017d90 <rand+0x54>)
 8017d4e:	4b11      	ldr	r3, [pc, #68]	; (8017d94 <rand+0x58>)
 8017d50:	63a0      	str	r0, [r4, #56]	; 0x38
 8017d52:	e9c0 2300 	strd	r2, r3, [r0]
 8017d56:	4b10      	ldr	r3, [pc, #64]	; (8017d98 <rand+0x5c>)
 8017d58:	6083      	str	r3, [r0, #8]
 8017d5a:	230b      	movs	r3, #11
 8017d5c:	8183      	strh	r3, [r0, #12]
 8017d5e:	2201      	movs	r2, #1
 8017d60:	2300      	movs	r3, #0
 8017d62:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8017d66:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8017d68:	480c      	ldr	r0, [pc, #48]	; (8017d9c <rand+0x60>)
 8017d6a:	690a      	ldr	r2, [r1, #16]
 8017d6c:	694b      	ldr	r3, [r1, #20]
 8017d6e:	4c0c      	ldr	r4, [pc, #48]	; (8017da0 <rand+0x64>)
 8017d70:	4350      	muls	r0, r2
 8017d72:	fb04 0003 	mla	r0, r4, r3, r0
 8017d76:	fba2 2304 	umull	r2, r3, r2, r4
 8017d7a:	4403      	add	r3, r0
 8017d7c:	1c54      	adds	r4, r2, #1
 8017d7e:	f143 0500 	adc.w	r5, r3, #0
 8017d82:	e9c1 4504 	strd	r4, r5, [r1, #16]
 8017d86:	f025 4000 	bic.w	r0, r5, #2147483648	; 0x80000000
 8017d8a:	bd38      	pop	{r3, r4, r5, pc}
 8017d8c:	20000188 	.word	0x20000188
 8017d90:	abcd330e 	.word	0xabcd330e
 8017d94:	e66d1234 	.word	0xe66d1234
 8017d98:	0005deec 	.word	0x0005deec
 8017d9c:	5851f42d 	.word	0x5851f42d
 8017da0:	4c957f2d 	.word	0x4c957f2d

08017da4 <_sbrk_r>:
 8017da4:	b538      	push	{r3, r4, r5, lr}
 8017da6:	4c06      	ldr	r4, [pc, #24]	; (8017dc0 <_sbrk_r+0x1c>)
 8017da8:	2300      	movs	r3, #0
 8017daa:	4605      	mov	r5, r0
 8017dac:	4608      	mov	r0, r1
 8017dae:	6023      	str	r3, [r4, #0]
 8017db0:	f7e9 f84e 	bl	8000e50 <_sbrk>
 8017db4:	1c43      	adds	r3, r0, #1
 8017db6:	d102      	bne.n	8017dbe <_sbrk_r+0x1a>
 8017db8:	6823      	ldr	r3, [r4, #0]
 8017dba:	b103      	cbz	r3, 8017dbe <_sbrk_r+0x1a>
 8017dbc:	602b      	str	r3, [r5, #0]
 8017dbe:	bd38      	pop	{r3, r4, r5, pc}
 8017dc0:	2000b5f4 	.word	0x2000b5f4

08017dc4 <std>:
 8017dc4:	2300      	movs	r3, #0
 8017dc6:	b510      	push	{r4, lr}
 8017dc8:	4604      	mov	r4, r0
 8017dca:	e9c0 3300 	strd	r3, r3, [r0]
 8017dce:	6083      	str	r3, [r0, #8]
 8017dd0:	8181      	strh	r1, [r0, #12]
 8017dd2:	6643      	str	r3, [r0, #100]	; 0x64
 8017dd4:	81c2      	strh	r2, [r0, #14]
 8017dd6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8017dda:	6183      	str	r3, [r0, #24]
 8017ddc:	4619      	mov	r1, r3
 8017dde:	2208      	movs	r2, #8
 8017de0:	305c      	adds	r0, #92	; 0x5c
 8017de2:	f7ff fee3 	bl	8017bac <memset>
 8017de6:	4b05      	ldr	r3, [pc, #20]	; (8017dfc <std+0x38>)
 8017de8:	6263      	str	r3, [r4, #36]	; 0x24
 8017dea:	4b05      	ldr	r3, [pc, #20]	; (8017e00 <std+0x3c>)
 8017dec:	62a3      	str	r3, [r4, #40]	; 0x28
 8017dee:	4b05      	ldr	r3, [pc, #20]	; (8017e04 <std+0x40>)
 8017df0:	62e3      	str	r3, [r4, #44]	; 0x2c
 8017df2:	4b05      	ldr	r3, [pc, #20]	; (8017e08 <std+0x44>)
 8017df4:	6224      	str	r4, [r4, #32]
 8017df6:	6323      	str	r3, [r4, #48]	; 0x30
 8017df8:	bd10      	pop	{r4, pc}
 8017dfa:	bf00      	nop
 8017dfc:	080184ed 	.word	0x080184ed
 8017e00:	0801850f 	.word	0x0801850f
 8017e04:	08018547 	.word	0x08018547
 8017e08:	0801856b 	.word	0x0801856b

08017e0c <_cleanup_r>:
 8017e0c:	4901      	ldr	r1, [pc, #4]	; (8017e14 <_cleanup_r+0x8>)
 8017e0e:	f000 b885 	b.w	8017f1c <_fwalk_reent>
 8017e12:	bf00      	nop
 8017e14:	08018845 	.word	0x08018845

08017e18 <__sfmoreglue>:
 8017e18:	b570      	push	{r4, r5, r6, lr}
 8017e1a:	1e4a      	subs	r2, r1, #1
 8017e1c:	2568      	movs	r5, #104	; 0x68
 8017e1e:	4355      	muls	r5, r2
 8017e20:	460e      	mov	r6, r1
 8017e22:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8017e26:	f7ff ff17 	bl	8017c58 <_malloc_r>
 8017e2a:	4604      	mov	r4, r0
 8017e2c:	b140      	cbz	r0, 8017e40 <__sfmoreglue+0x28>
 8017e2e:	2100      	movs	r1, #0
 8017e30:	e9c0 1600 	strd	r1, r6, [r0]
 8017e34:	300c      	adds	r0, #12
 8017e36:	60a0      	str	r0, [r4, #8]
 8017e38:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8017e3c:	f7ff feb6 	bl	8017bac <memset>
 8017e40:	4620      	mov	r0, r4
 8017e42:	bd70      	pop	{r4, r5, r6, pc}

08017e44 <__sinit>:
 8017e44:	6983      	ldr	r3, [r0, #24]
 8017e46:	b510      	push	{r4, lr}
 8017e48:	4604      	mov	r4, r0
 8017e4a:	bb33      	cbnz	r3, 8017e9a <__sinit+0x56>
 8017e4c:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8017e50:	6503      	str	r3, [r0, #80]	; 0x50
 8017e52:	4b12      	ldr	r3, [pc, #72]	; (8017e9c <__sinit+0x58>)
 8017e54:	4a12      	ldr	r2, [pc, #72]	; (8017ea0 <__sinit+0x5c>)
 8017e56:	681b      	ldr	r3, [r3, #0]
 8017e58:	6282      	str	r2, [r0, #40]	; 0x28
 8017e5a:	4298      	cmp	r0, r3
 8017e5c:	bf04      	itt	eq
 8017e5e:	2301      	moveq	r3, #1
 8017e60:	6183      	streq	r3, [r0, #24]
 8017e62:	f000 f81f 	bl	8017ea4 <__sfp>
 8017e66:	6060      	str	r0, [r4, #4]
 8017e68:	4620      	mov	r0, r4
 8017e6a:	f000 f81b 	bl	8017ea4 <__sfp>
 8017e6e:	60a0      	str	r0, [r4, #8]
 8017e70:	4620      	mov	r0, r4
 8017e72:	f000 f817 	bl	8017ea4 <__sfp>
 8017e76:	2200      	movs	r2, #0
 8017e78:	60e0      	str	r0, [r4, #12]
 8017e7a:	2104      	movs	r1, #4
 8017e7c:	6860      	ldr	r0, [r4, #4]
 8017e7e:	f7ff ffa1 	bl	8017dc4 <std>
 8017e82:	2201      	movs	r2, #1
 8017e84:	2109      	movs	r1, #9
 8017e86:	68a0      	ldr	r0, [r4, #8]
 8017e88:	f7ff ff9c 	bl	8017dc4 <std>
 8017e8c:	2202      	movs	r2, #2
 8017e8e:	2112      	movs	r1, #18
 8017e90:	68e0      	ldr	r0, [r4, #12]
 8017e92:	f7ff ff97 	bl	8017dc4 <std>
 8017e96:	2301      	movs	r3, #1
 8017e98:	61a3      	str	r3, [r4, #24]
 8017e9a:	bd10      	pop	{r4, pc}
 8017e9c:	0801aeac 	.word	0x0801aeac
 8017ea0:	08017e0d 	.word	0x08017e0d

08017ea4 <__sfp>:
 8017ea4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017ea6:	4b1b      	ldr	r3, [pc, #108]	; (8017f14 <__sfp+0x70>)
 8017ea8:	681e      	ldr	r6, [r3, #0]
 8017eaa:	69b3      	ldr	r3, [r6, #24]
 8017eac:	4607      	mov	r7, r0
 8017eae:	b913      	cbnz	r3, 8017eb6 <__sfp+0x12>
 8017eb0:	4630      	mov	r0, r6
 8017eb2:	f7ff ffc7 	bl	8017e44 <__sinit>
 8017eb6:	3648      	adds	r6, #72	; 0x48
 8017eb8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8017ebc:	3b01      	subs	r3, #1
 8017ebe:	d503      	bpl.n	8017ec8 <__sfp+0x24>
 8017ec0:	6833      	ldr	r3, [r6, #0]
 8017ec2:	b133      	cbz	r3, 8017ed2 <__sfp+0x2e>
 8017ec4:	6836      	ldr	r6, [r6, #0]
 8017ec6:	e7f7      	b.n	8017eb8 <__sfp+0x14>
 8017ec8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8017ecc:	b16d      	cbz	r5, 8017eea <__sfp+0x46>
 8017ece:	3468      	adds	r4, #104	; 0x68
 8017ed0:	e7f4      	b.n	8017ebc <__sfp+0x18>
 8017ed2:	2104      	movs	r1, #4
 8017ed4:	4638      	mov	r0, r7
 8017ed6:	f7ff ff9f 	bl	8017e18 <__sfmoreglue>
 8017eda:	6030      	str	r0, [r6, #0]
 8017edc:	2800      	cmp	r0, #0
 8017ede:	d1f1      	bne.n	8017ec4 <__sfp+0x20>
 8017ee0:	230c      	movs	r3, #12
 8017ee2:	603b      	str	r3, [r7, #0]
 8017ee4:	4604      	mov	r4, r0
 8017ee6:	4620      	mov	r0, r4
 8017ee8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017eea:	4b0b      	ldr	r3, [pc, #44]	; (8017f18 <__sfp+0x74>)
 8017eec:	6665      	str	r5, [r4, #100]	; 0x64
 8017eee:	e9c4 5500 	strd	r5, r5, [r4]
 8017ef2:	60a5      	str	r5, [r4, #8]
 8017ef4:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8017ef8:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8017efc:	2208      	movs	r2, #8
 8017efe:	4629      	mov	r1, r5
 8017f00:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8017f04:	f7ff fe52 	bl	8017bac <memset>
 8017f08:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8017f0c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8017f10:	e7e9      	b.n	8017ee6 <__sfp+0x42>
 8017f12:	bf00      	nop
 8017f14:	0801aeac 	.word	0x0801aeac
 8017f18:	ffff0001 	.word	0xffff0001

08017f1c <_fwalk_reent>:
 8017f1c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8017f20:	4680      	mov	r8, r0
 8017f22:	4689      	mov	r9, r1
 8017f24:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8017f28:	2600      	movs	r6, #0
 8017f2a:	b914      	cbnz	r4, 8017f32 <_fwalk_reent+0x16>
 8017f2c:	4630      	mov	r0, r6
 8017f2e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8017f32:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8017f36:	3f01      	subs	r7, #1
 8017f38:	d501      	bpl.n	8017f3e <_fwalk_reent+0x22>
 8017f3a:	6824      	ldr	r4, [r4, #0]
 8017f3c:	e7f5      	b.n	8017f2a <_fwalk_reent+0xe>
 8017f3e:	89ab      	ldrh	r3, [r5, #12]
 8017f40:	2b01      	cmp	r3, #1
 8017f42:	d907      	bls.n	8017f54 <_fwalk_reent+0x38>
 8017f44:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8017f48:	3301      	adds	r3, #1
 8017f4a:	d003      	beq.n	8017f54 <_fwalk_reent+0x38>
 8017f4c:	4629      	mov	r1, r5
 8017f4e:	4640      	mov	r0, r8
 8017f50:	47c8      	blx	r9
 8017f52:	4306      	orrs	r6, r0
 8017f54:	3568      	adds	r5, #104	; 0x68
 8017f56:	e7ee      	b.n	8017f36 <_fwalk_reent+0x1a>

08017f58 <__malloc_lock>:
 8017f58:	4770      	bx	lr

08017f5a <__malloc_unlock>:
 8017f5a:	4770      	bx	lr

08017f5c <__sfputc_r>:
 8017f5c:	6893      	ldr	r3, [r2, #8]
 8017f5e:	3b01      	subs	r3, #1
 8017f60:	2b00      	cmp	r3, #0
 8017f62:	b410      	push	{r4}
 8017f64:	6093      	str	r3, [r2, #8]
 8017f66:	da08      	bge.n	8017f7a <__sfputc_r+0x1e>
 8017f68:	6994      	ldr	r4, [r2, #24]
 8017f6a:	42a3      	cmp	r3, r4
 8017f6c:	db01      	blt.n	8017f72 <__sfputc_r+0x16>
 8017f6e:	290a      	cmp	r1, #10
 8017f70:	d103      	bne.n	8017f7a <__sfputc_r+0x1e>
 8017f72:	f85d 4b04 	ldr.w	r4, [sp], #4
 8017f76:	f000 bafd 	b.w	8018574 <__swbuf_r>
 8017f7a:	6813      	ldr	r3, [r2, #0]
 8017f7c:	1c58      	adds	r0, r3, #1
 8017f7e:	6010      	str	r0, [r2, #0]
 8017f80:	7019      	strb	r1, [r3, #0]
 8017f82:	4608      	mov	r0, r1
 8017f84:	f85d 4b04 	ldr.w	r4, [sp], #4
 8017f88:	4770      	bx	lr

08017f8a <__sfputs_r>:
 8017f8a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017f8c:	4606      	mov	r6, r0
 8017f8e:	460f      	mov	r7, r1
 8017f90:	4614      	mov	r4, r2
 8017f92:	18d5      	adds	r5, r2, r3
 8017f94:	42ac      	cmp	r4, r5
 8017f96:	d101      	bne.n	8017f9c <__sfputs_r+0x12>
 8017f98:	2000      	movs	r0, #0
 8017f9a:	e007      	b.n	8017fac <__sfputs_r+0x22>
 8017f9c:	463a      	mov	r2, r7
 8017f9e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017fa2:	4630      	mov	r0, r6
 8017fa4:	f7ff ffda 	bl	8017f5c <__sfputc_r>
 8017fa8:	1c43      	adds	r3, r0, #1
 8017faa:	d1f3      	bne.n	8017f94 <__sfputs_r+0xa>
 8017fac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08017fb0 <_vfiprintf_r>:
 8017fb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017fb4:	460c      	mov	r4, r1
 8017fb6:	b09d      	sub	sp, #116	; 0x74
 8017fb8:	4617      	mov	r7, r2
 8017fba:	461d      	mov	r5, r3
 8017fbc:	4606      	mov	r6, r0
 8017fbe:	b118      	cbz	r0, 8017fc8 <_vfiprintf_r+0x18>
 8017fc0:	6983      	ldr	r3, [r0, #24]
 8017fc2:	b90b      	cbnz	r3, 8017fc8 <_vfiprintf_r+0x18>
 8017fc4:	f7ff ff3e 	bl	8017e44 <__sinit>
 8017fc8:	4b7c      	ldr	r3, [pc, #496]	; (80181bc <_vfiprintf_r+0x20c>)
 8017fca:	429c      	cmp	r4, r3
 8017fcc:	d158      	bne.n	8018080 <_vfiprintf_r+0xd0>
 8017fce:	6874      	ldr	r4, [r6, #4]
 8017fd0:	89a3      	ldrh	r3, [r4, #12]
 8017fd2:	0718      	lsls	r0, r3, #28
 8017fd4:	d55e      	bpl.n	8018094 <_vfiprintf_r+0xe4>
 8017fd6:	6923      	ldr	r3, [r4, #16]
 8017fd8:	2b00      	cmp	r3, #0
 8017fda:	d05b      	beq.n	8018094 <_vfiprintf_r+0xe4>
 8017fdc:	2300      	movs	r3, #0
 8017fde:	9309      	str	r3, [sp, #36]	; 0x24
 8017fe0:	2320      	movs	r3, #32
 8017fe2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8017fe6:	2330      	movs	r3, #48	; 0x30
 8017fe8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8017fec:	9503      	str	r5, [sp, #12]
 8017fee:	f04f 0b01 	mov.w	fp, #1
 8017ff2:	46b8      	mov	r8, r7
 8017ff4:	4645      	mov	r5, r8
 8017ff6:	f815 3b01 	ldrb.w	r3, [r5], #1
 8017ffa:	b10b      	cbz	r3, 8018000 <_vfiprintf_r+0x50>
 8017ffc:	2b25      	cmp	r3, #37	; 0x25
 8017ffe:	d154      	bne.n	80180aa <_vfiprintf_r+0xfa>
 8018000:	ebb8 0a07 	subs.w	sl, r8, r7
 8018004:	d00b      	beq.n	801801e <_vfiprintf_r+0x6e>
 8018006:	4653      	mov	r3, sl
 8018008:	463a      	mov	r2, r7
 801800a:	4621      	mov	r1, r4
 801800c:	4630      	mov	r0, r6
 801800e:	f7ff ffbc 	bl	8017f8a <__sfputs_r>
 8018012:	3001      	adds	r0, #1
 8018014:	f000 80c2 	beq.w	801819c <_vfiprintf_r+0x1ec>
 8018018:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801801a:	4453      	add	r3, sl
 801801c:	9309      	str	r3, [sp, #36]	; 0x24
 801801e:	f898 3000 	ldrb.w	r3, [r8]
 8018022:	2b00      	cmp	r3, #0
 8018024:	f000 80ba 	beq.w	801819c <_vfiprintf_r+0x1ec>
 8018028:	2300      	movs	r3, #0
 801802a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801802e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8018032:	9304      	str	r3, [sp, #16]
 8018034:	9307      	str	r3, [sp, #28]
 8018036:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801803a:	931a      	str	r3, [sp, #104]	; 0x68
 801803c:	46a8      	mov	r8, r5
 801803e:	2205      	movs	r2, #5
 8018040:	f818 1b01 	ldrb.w	r1, [r8], #1
 8018044:	485e      	ldr	r0, [pc, #376]	; (80181c0 <_vfiprintf_r+0x210>)
 8018046:	f7e8 f8d3 	bl	80001f0 <memchr>
 801804a:	9b04      	ldr	r3, [sp, #16]
 801804c:	bb78      	cbnz	r0, 80180ae <_vfiprintf_r+0xfe>
 801804e:	06d9      	lsls	r1, r3, #27
 8018050:	bf44      	itt	mi
 8018052:	2220      	movmi	r2, #32
 8018054:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8018058:	071a      	lsls	r2, r3, #28
 801805a:	bf44      	itt	mi
 801805c:	222b      	movmi	r2, #43	; 0x2b
 801805e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8018062:	782a      	ldrb	r2, [r5, #0]
 8018064:	2a2a      	cmp	r2, #42	; 0x2a
 8018066:	d02a      	beq.n	80180be <_vfiprintf_r+0x10e>
 8018068:	9a07      	ldr	r2, [sp, #28]
 801806a:	46a8      	mov	r8, r5
 801806c:	2000      	movs	r0, #0
 801806e:	250a      	movs	r5, #10
 8018070:	4641      	mov	r1, r8
 8018072:	f811 3b01 	ldrb.w	r3, [r1], #1
 8018076:	3b30      	subs	r3, #48	; 0x30
 8018078:	2b09      	cmp	r3, #9
 801807a:	d969      	bls.n	8018150 <_vfiprintf_r+0x1a0>
 801807c:	b360      	cbz	r0, 80180d8 <_vfiprintf_r+0x128>
 801807e:	e024      	b.n	80180ca <_vfiprintf_r+0x11a>
 8018080:	4b50      	ldr	r3, [pc, #320]	; (80181c4 <_vfiprintf_r+0x214>)
 8018082:	429c      	cmp	r4, r3
 8018084:	d101      	bne.n	801808a <_vfiprintf_r+0xda>
 8018086:	68b4      	ldr	r4, [r6, #8]
 8018088:	e7a2      	b.n	8017fd0 <_vfiprintf_r+0x20>
 801808a:	4b4f      	ldr	r3, [pc, #316]	; (80181c8 <_vfiprintf_r+0x218>)
 801808c:	429c      	cmp	r4, r3
 801808e:	bf08      	it	eq
 8018090:	68f4      	ldreq	r4, [r6, #12]
 8018092:	e79d      	b.n	8017fd0 <_vfiprintf_r+0x20>
 8018094:	4621      	mov	r1, r4
 8018096:	4630      	mov	r0, r6
 8018098:	f000 fad0 	bl	801863c <__swsetup_r>
 801809c:	2800      	cmp	r0, #0
 801809e:	d09d      	beq.n	8017fdc <_vfiprintf_r+0x2c>
 80180a0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80180a4:	b01d      	add	sp, #116	; 0x74
 80180a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80180aa:	46a8      	mov	r8, r5
 80180ac:	e7a2      	b.n	8017ff4 <_vfiprintf_r+0x44>
 80180ae:	4a44      	ldr	r2, [pc, #272]	; (80181c0 <_vfiprintf_r+0x210>)
 80180b0:	1a80      	subs	r0, r0, r2
 80180b2:	fa0b f000 	lsl.w	r0, fp, r0
 80180b6:	4318      	orrs	r0, r3
 80180b8:	9004      	str	r0, [sp, #16]
 80180ba:	4645      	mov	r5, r8
 80180bc:	e7be      	b.n	801803c <_vfiprintf_r+0x8c>
 80180be:	9a03      	ldr	r2, [sp, #12]
 80180c0:	1d11      	adds	r1, r2, #4
 80180c2:	6812      	ldr	r2, [r2, #0]
 80180c4:	9103      	str	r1, [sp, #12]
 80180c6:	2a00      	cmp	r2, #0
 80180c8:	db01      	blt.n	80180ce <_vfiprintf_r+0x11e>
 80180ca:	9207      	str	r2, [sp, #28]
 80180cc:	e004      	b.n	80180d8 <_vfiprintf_r+0x128>
 80180ce:	4252      	negs	r2, r2
 80180d0:	f043 0302 	orr.w	r3, r3, #2
 80180d4:	9207      	str	r2, [sp, #28]
 80180d6:	9304      	str	r3, [sp, #16]
 80180d8:	f898 3000 	ldrb.w	r3, [r8]
 80180dc:	2b2e      	cmp	r3, #46	; 0x2e
 80180de:	d10e      	bne.n	80180fe <_vfiprintf_r+0x14e>
 80180e0:	f898 3001 	ldrb.w	r3, [r8, #1]
 80180e4:	2b2a      	cmp	r3, #42	; 0x2a
 80180e6:	d138      	bne.n	801815a <_vfiprintf_r+0x1aa>
 80180e8:	9b03      	ldr	r3, [sp, #12]
 80180ea:	1d1a      	adds	r2, r3, #4
 80180ec:	681b      	ldr	r3, [r3, #0]
 80180ee:	9203      	str	r2, [sp, #12]
 80180f0:	2b00      	cmp	r3, #0
 80180f2:	bfb8      	it	lt
 80180f4:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80180f8:	f108 0802 	add.w	r8, r8, #2
 80180fc:	9305      	str	r3, [sp, #20]
 80180fe:	4d33      	ldr	r5, [pc, #204]	; (80181cc <_vfiprintf_r+0x21c>)
 8018100:	f898 1000 	ldrb.w	r1, [r8]
 8018104:	2203      	movs	r2, #3
 8018106:	4628      	mov	r0, r5
 8018108:	f7e8 f872 	bl	80001f0 <memchr>
 801810c:	b140      	cbz	r0, 8018120 <_vfiprintf_r+0x170>
 801810e:	2340      	movs	r3, #64	; 0x40
 8018110:	1b40      	subs	r0, r0, r5
 8018112:	fa03 f000 	lsl.w	r0, r3, r0
 8018116:	9b04      	ldr	r3, [sp, #16]
 8018118:	4303      	orrs	r3, r0
 801811a:	f108 0801 	add.w	r8, r8, #1
 801811e:	9304      	str	r3, [sp, #16]
 8018120:	f898 1000 	ldrb.w	r1, [r8]
 8018124:	482a      	ldr	r0, [pc, #168]	; (80181d0 <_vfiprintf_r+0x220>)
 8018126:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801812a:	2206      	movs	r2, #6
 801812c:	f108 0701 	add.w	r7, r8, #1
 8018130:	f7e8 f85e 	bl	80001f0 <memchr>
 8018134:	2800      	cmp	r0, #0
 8018136:	d037      	beq.n	80181a8 <_vfiprintf_r+0x1f8>
 8018138:	4b26      	ldr	r3, [pc, #152]	; (80181d4 <_vfiprintf_r+0x224>)
 801813a:	bb1b      	cbnz	r3, 8018184 <_vfiprintf_r+0x1d4>
 801813c:	9b03      	ldr	r3, [sp, #12]
 801813e:	3307      	adds	r3, #7
 8018140:	f023 0307 	bic.w	r3, r3, #7
 8018144:	3308      	adds	r3, #8
 8018146:	9303      	str	r3, [sp, #12]
 8018148:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801814a:	444b      	add	r3, r9
 801814c:	9309      	str	r3, [sp, #36]	; 0x24
 801814e:	e750      	b.n	8017ff2 <_vfiprintf_r+0x42>
 8018150:	fb05 3202 	mla	r2, r5, r2, r3
 8018154:	2001      	movs	r0, #1
 8018156:	4688      	mov	r8, r1
 8018158:	e78a      	b.n	8018070 <_vfiprintf_r+0xc0>
 801815a:	2300      	movs	r3, #0
 801815c:	f108 0801 	add.w	r8, r8, #1
 8018160:	9305      	str	r3, [sp, #20]
 8018162:	4619      	mov	r1, r3
 8018164:	250a      	movs	r5, #10
 8018166:	4640      	mov	r0, r8
 8018168:	f810 2b01 	ldrb.w	r2, [r0], #1
 801816c:	3a30      	subs	r2, #48	; 0x30
 801816e:	2a09      	cmp	r2, #9
 8018170:	d903      	bls.n	801817a <_vfiprintf_r+0x1ca>
 8018172:	2b00      	cmp	r3, #0
 8018174:	d0c3      	beq.n	80180fe <_vfiprintf_r+0x14e>
 8018176:	9105      	str	r1, [sp, #20]
 8018178:	e7c1      	b.n	80180fe <_vfiprintf_r+0x14e>
 801817a:	fb05 2101 	mla	r1, r5, r1, r2
 801817e:	2301      	movs	r3, #1
 8018180:	4680      	mov	r8, r0
 8018182:	e7f0      	b.n	8018166 <_vfiprintf_r+0x1b6>
 8018184:	ab03      	add	r3, sp, #12
 8018186:	9300      	str	r3, [sp, #0]
 8018188:	4622      	mov	r2, r4
 801818a:	4b13      	ldr	r3, [pc, #76]	; (80181d8 <_vfiprintf_r+0x228>)
 801818c:	a904      	add	r1, sp, #16
 801818e:	4630      	mov	r0, r6
 8018190:	f3af 8000 	nop.w
 8018194:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8018198:	4681      	mov	r9, r0
 801819a:	d1d5      	bne.n	8018148 <_vfiprintf_r+0x198>
 801819c:	89a3      	ldrh	r3, [r4, #12]
 801819e:	065b      	lsls	r3, r3, #25
 80181a0:	f53f af7e 	bmi.w	80180a0 <_vfiprintf_r+0xf0>
 80181a4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80181a6:	e77d      	b.n	80180a4 <_vfiprintf_r+0xf4>
 80181a8:	ab03      	add	r3, sp, #12
 80181aa:	9300      	str	r3, [sp, #0]
 80181ac:	4622      	mov	r2, r4
 80181ae:	4b0a      	ldr	r3, [pc, #40]	; (80181d8 <_vfiprintf_r+0x228>)
 80181b0:	a904      	add	r1, sp, #16
 80181b2:	4630      	mov	r0, r6
 80181b4:	f000 f888 	bl	80182c8 <_printf_i>
 80181b8:	e7ec      	b.n	8018194 <_vfiprintf_r+0x1e4>
 80181ba:	bf00      	nop
 80181bc:	0801aed0 	.word	0x0801aed0
 80181c0:	0801af10 	.word	0x0801af10
 80181c4:	0801aef0 	.word	0x0801aef0
 80181c8:	0801aeb0 	.word	0x0801aeb0
 80181cc:	0801af16 	.word	0x0801af16
 80181d0:	0801af1a 	.word	0x0801af1a
 80181d4:	00000000 	.word	0x00000000
 80181d8:	08017f8b 	.word	0x08017f8b

080181dc <_printf_common>:
 80181dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80181e0:	4691      	mov	r9, r2
 80181e2:	461f      	mov	r7, r3
 80181e4:	688a      	ldr	r2, [r1, #8]
 80181e6:	690b      	ldr	r3, [r1, #16]
 80181e8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80181ec:	4293      	cmp	r3, r2
 80181ee:	bfb8      	it	lt
 80181f0:	4613      	movlt	r3, r2
 80181f2:	f8c9 3000 	str.w	r3, [r9]
 80181f6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80181fa:	4606      	mov	r6, r0
 80181fc:	460c      	mov	r4, r1
 80181fe:	b112      	cbz	r2, 8018206 <_printf_common+0x2a>
 8018200:	3301      	adds	r3, #1
 8018202:	f8c9 3000 	str.w	r3, [r9]
 8018206:	6823      	ldr	r3, [r4, #0]
 8018208:	0699      	lsls	r1, r3, #26
 801820a:	bf42      	ittt	mi
 801820c:	f8d9 3000 	ldrmi.w	r3, [r9]
 8018210:	3302      	addmi	r3, #2
 8018212:	f8c9 3000 	strmi.w	r3, [r9]
 8018216:	6825      	ldr	r5, [r4, #0]
 8018218:	f015 0506 	ands.w	r5, r5, #6
 801821c:	d107      	bne.n	801822e <_printf_common+0x52>
 801821e:	f104 0a19 	add.w	sl, r4, #25
 8018222:	68e3      	ldr	r3, [r4, #12]
 8018224:	f8d9 2000 	ldr.w	r2, [r9]
 8018228:	1a9b      	subs	r3, r3, r2
 801822a:	42ab      	cmp	r3, r5
 801822c:	dc28      	bgt.n	8018280 <_printf_common+0xa4>
 801822e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8018232:	6822      	ldr	r2, [r4, #0]
 8018234:	3300      	adds	r3, #0
 8018236:	bf18      	it	ne
 8018238:	2301      	movne	r3, #1
 801823a:	0692      	lsls	r2, r2, #26
 801823c:	d42d      	bmi.n	801829a <_printf_common+0xbe>
 801823e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8018242:	4639      	mov	r1, r7
 8018244:	4630      	mov	r0, r6
 8018246:	47c0      	blx	r8
 8018248:	3001      	adds	r0, #1
 801824a:	d020      	beq.n	801828e <_printf_common+0xb2>
 801824c:	6823      	ldr	r3, [r4, #0]
 801824e:	68e5      	ldr	r5, [r4, #12]
 8018250:	f8d9 2000 	ldr.w	r2, [r9]
 8018254:	f003 0306 	and.w	r3, r3, #6
 8018258:	2b04      	cmp	r3, #4
 801825a:	bf08      	it	eq
 801825c:	1aad      	subeq	r5, r5, r2
 801825e:	68a3      	ldr	r3, [r4, #8]
 8018260:	6922      	ldr	r2, [r4, #16]
 8018262:	bf0c      	ite	eq
 8018264:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8018268:	2500      	movne	r5, #0
 801826a:	4293      	cmp	r3, r2
 801826c:	bfc4      	itt	gt
 801826e:	1a9b      	subgt	r3, r3, r2
 8018270:	18ed      	addgt	r5, r5, r3
 8018272:	f04f 0900 	mov.w	r9, #0
 8018276:	341a      	adds	r4, #26
 8018278:	454d      	cmp	r5, r9
 801827a:	d11a      	bne.n	80182b2 <_printf_common+0xd6>
 801827c:	2000      	movs	r0, #0
 801827e:	e008      	b.n	8018292 <_printf_common+0xb6>
 8018280:	2301      	movs	r3, #1
 8018282:	4652      	mov	r2, sl
 8018284:	4639      	mov	r1, r7
 8018286:	4630      	mov	r0, r6
 8018288:	47c0      	blx	r8
 801828a:	3001      	adds	r0, #1
 801828c:	d103      	bne.n	8018296 <_printf_common+0xba>
 801828e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8018292:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018296:	3501      	adds	r5, #1
 8018298:	e7c3      	b.n	8018222 <_printf_common+0x46>
 801829a:	18e1      	adds	r1, r4, r3
 801829c:	1c5a      	adds	r2, r3, #1
 801829e:	2030      	movs	r0, #48	; 0x30
 80182a0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80182a4:	4422      	add	r2, r4
 80182a6:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80182aa:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80182ae:	3302      	adds	r3, #2
 80182b0:	e7c5      	b.n	801823e <_printf_common+0x62>
 80182b2:	2301      	movs	r3, #1
 80182b4:	4622      	mov	r2, r4
 80182b6:	4639      	mov	r1, r7
 80182b8:	4630      	mov	r0, r6
 80182ba:	47c0      	blx	r8
 80182bc:	3001      	adds	r0, #1
 80182be:	d0e6      	beq.n	801828e <_printf_common+0xb2>
 80182c0:	f109 0901 	add.w	r9, r9, #1
 80182c4:	e7d8      	b.n	8018278 <_printf_common+0x9c>
	...

080182c8 <_printf_i>:
 80182c8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80182cc:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80182d0:	460c      	mov	r4, r1
 80182d2:	7e09      	ldrb	r1, [r1, #24]
 80182d4:	b085      	sub	sp, #20
 80182d6:	296e      	cmp	r1, #110	; 0x6e
 80182d8:	4617      	mov	r7, r2
 80182da:	4606      	mov	r6, r0
 80182dc:	4698      	mov	r8, r3
 80182de:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80182e0:	f000 80b3 	beq.w	801844a <_printf_i+0x182>
 80182e4:	d822      	bhi.n	801832c <_printf_i+0x64>
 80182e6:	2963      	cmp	r1, #99	; 0x63
 80182e8:	d036      	beq.n	8018358 <_printf_i+0x90>
 80182ea:	d80a      	bhi.n	8018302 <_printf_i+0x3a>
 80182ec:	2900      	cmp	r1, #0
 80182ee:	f000 80b9 	beq.w	8018464 <_printf_i+0x19c>
 80182f2:	2958      	cmp	r1, #88	; 0x58
 80182f4:	f000 8083 	beq.w	80183fe <_printf_i+0x136>
 80182f8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80182fc:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8018300:	e032      	b.n	8018368 <_printf_i+0xa0>
 8018302:	2964      	cmp	r1, #100	; 0x64
 8018304:	d001      	beq.n	801830a <_printf_i+0x42>
 8018306:	2969      	cmp	r1, #105	; 0x69
 8018308:	d1f6      	bne.n	80182f8 <_printf_i+0x30>
 801830a:	6820      	ldr	r0, [r4, #0]
 801830c:	6813      	ldr	r3, [r2, #0]
 801830e:	0605      	lsls	r5, r0, #24
 8018310:	f103 0104 	add.w	r1, r3, #4
 8018314:	d52a      	bpl.n	801836c <_printf_i+0xa4>
 8018316:	681b      	ldr	r3, [r3, #0]
 8018318:	6011      	str	r1, [r2, #0]
 801831a:	2b00      	cmp	r3, #0
 801831c:	da03      	bge.n	8018326 <_printf_i+0x5e>
 801831e:	222d      	movs	r2, #45	; 0x2d
 8018320:	425b      	negs	r3, r3
 8018322:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8018326:	486f      	ldr	r0, [pc, #444]	; (80184e4 <_printf_i+0x21c>)
 8018328:	220a      	movs	r2, #10
 801832a:	e039      	b.n	80183a0 <_printf_i+0xd8>
 801832c:	2973      	cmp	r1, #115	; 0x73
 801832e:	f000 809d 	beq.w	801846c <_printf_i+0x1a4>
 8018332:	d808      	bhi.n	8018346 <_printf_i+0x7e>
 8018334:	296f      	cmp	r1, #111	; 0x6f
 8018336:	d020      	beq.n	801837a <_printf_i+0xb2>
 8018338:	2970      	cmp	r1, #112	; 0x70
 801833a:	d1dd      	bne.n	80182f8 <_printf_i+0x30>
 801833c:	6823      	ldr	r3, [r4, #0]
 801833e:	f043 0320 	orr.w	r3, r3, #32
 8018342:	6023      	str	r3, [r4, #0]
 8018344:	e003      	b.n	801834e <_printf_i+0x86>
 8018346:	2975      	cmp	r1, #117	; 0x75
 8018348:	d017      	beq.n	801837a <_printf_i+0xb2>
 801834a:	2978      	cmp	r1, #120	; 0x78
 801834c:	d1d4      	bne.n	80182f8 <_printf_i+0x30>
 801834e:	2378      	movs	r3, #120	; 0x78
 8018350:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8018354:	4864      	ldr	r0, [pc, #400]	; (80184e8 <_printf_i+0x220>)
 8018356:	e055      	b.n	8018404 <_printf_i+0x13c>
 8018358:	6813      	ldr	r3, [r2, #0]
 801835a:	1d19      	adds	r1, r3, #4
 801835c:	681b      	ldr	r3, [r3, #0]
 801835e:	6011      	str	r1, [r2, #0]
 8018360:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8018364:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8018368:	2301      	movs	r3, #1
 801836a:	e08c      	b.n	8018486 <_printf_i+0x1be>
 801836c:	681b      	ldr	r3, [r3, #0]
 801836e:	6011      	str	r1, [r2, #0]
 8018370:	f010 0f40 	tst.w	r0, #64	; 0x40
 8018374:	bf18      	it	ne
 8018376:	b21b      	sxthne	r3, r3
 8018378:	e7cf      	b.n	801831a <_printf_i+0x52>
 801837a:	6813      	ldr	r3, [r2, #0]
 801837c:	6825      	ldr	r5, [r4, #0]
 801837e:	1d18      	adds	r0, r3, #4
 8018380:	6010      	str	r0, [r2, #0]
 8018382:	0628      	lsls	r0, r5, #24
 8018384:	d501      	bpl.n	801838a <_printf_i+0xc2>
 8018386:	681b      	ldr	r3, [r3, #0]
 8018388:	e002      	b.n	8018390 <_printf_i+0xc8>
 801838a:	0668      	lsls	r0, r5, #25
 801838c:	d5fb      	bpl.n	8018386 <_printf_i+0xbe>
 801838e:	881b      	ldrh	r3, [r3, #0]
 8018390:	4854      	ldr	r0, [pc, #336]	; (80184e4 <_printf_i+0x21c>)
 8018392:	296f      	cmp	r1, #111	; 0x6f
 8018394:	bf14      	ite	ne
 8018396:	220a      	movne	r2, #10
 8018398:	2208      	moveq	r2, #8
 801839a:	2100      	movs	r1, #0
 801839c:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80183a0:	6865      	ldr	r5, [r4, #4]
 80183a2:	60a5      	str	r5, [r4, #8]
 80183a4:	2d00      	cmp	r5, #0
 80183a6:	f2c0 8095 	blt.w	80184d4 <_printf_i+0x20c>
 80183aa:	6821      	ldr	r1, [r4, #0]
 80183ac:	f021 0104 	bic.w	r1, r1, #4
 80183b0:	6021      	str	r1, [r4, #0]
 80183b2:	2b00      	cmp	r3, #0
 80183b4:	d13d      	bne.n	8018432 <_printf_i+0x16a>
 80183b6:	2d00      	cmp	r5, #0
 80183b8:	f040 808e 	bne.w	80184d8 <_printf_i+0x210>
 80183bc:	4665      	mov	r5, ip
 80183be:	2a08      	cmp	r2, #8
 80183c0:	d10b      	bne.n	80183da <_printf_i+0x112>
 80183c2:	6823      	ldr	r3, [r4, #0]
 80183c4:	07db      	lsls	r3, r3, #31
 80183c6:	d508      	bpl.n	80183da <_printf_i+0x112>
 80183c8:	6923      	ldr	r3, [r4, #16]
 80183ca:	6862      	ldr	r2, [r4, #4]
 80183cc:	429a      	cmp	r2, r3
 80183ce:	bfde      	ittt	le
 80183d0:	2330      	movle	r3, #48	; 0x30
 80183d2:	f805 3c01 	strble.w	r3, [r5, #-1]
 80183d6:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 80183da:	ebac 0305 	sub.w	r3, ip, r5
 80183de:	6123      	str	r3, [r4, #16]
 80183e0:	f8cd 8000 	str.w	r8, [sp]
 80183e4:	463b      	mov	r3, r7
 80183e6:	aa03      	add	r2, sp, #12
 80183e8:	4621      	mov	r1, r4
 80183ea:	4630      	mov	r0, r6
 80183ec:	f7ff fef6 	bl	80181dc <_printf_common>
 80183f0:	3001      	adds	r0, #1
 80183f2:	d14d      	bne.n	8018490 <_printf_i+0x1c8>
 80183f4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80183f8:	b005      	add	sp, #20
 80183fa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80183fe:	4839      	ldr	r0, [pc, #228]	; (80184e4 <_printf_i+0x21c>)
 8018400:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8018404:	6813      	ldr	r3, [r2, #0]
 8018406:	6821      	ldr	r1, [r4, #0]
 8018408:	1d1d      	adds	r5, r3, #4
 801840a:	681b      	ldr	r3, [r3, #0]
 801840c:	6015      	str	r5, [r2, #0]
 801840e:	060a      	lsls	r2, r1, #24
 8018410:	d50b      	bpl.n	801842a <_printf_i+0x162>
 8018412:	07ca      	lsls	r2, r1, #31
 8018414:	bf44      	itt	mi
 8018416:	f041 0120 	orrmi.w	r1, r1, #32
 801841a:	6021      	strmi	r1, [r4, #0]
 801841c:	b91b      	cbnz	r3, 8018426 <_printf_i+0x15e>
 801841e:	6822      	ldr	r2, [r4, #0]
 8018420:	f022 0220 	bic.w	r2, r2, #32
 8018424:	6022      	str	r2, [r4, #0]
 8018426:	2210      	movs	r2, #16
 8018428:	e7b7      	b.n	801839a <_printf_i+0xd2>
 801842a:	064d      	lsls	r5, r1, #25
 801842c:	bf48      	it	mi
 801842e:	b29b      	uxthmi	r3, r3
 8018430:	e7ef      	b.n	8018412 <_printf_i+0x14a>
 8018432:	4665      	mov	r5, ip
 8018434:	fbb3 f1f2 	udiv	r1, r3, r2
 8018438:	fb02 3311 	mls	r3, r2, r1, r3
 801843c:	5cc3      	ldrb	r3, [r0, r3]
 801843e:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8018442:	460b      	mov	r3, r1
 8018444:	2900      	cmp	r1, #0
 8018446:	d1f5      	bne.n	8018434 <_printf_i+0x16c>
 8018448:	e7b9      	b.n	80183be <_printf_i+0xf6>
 801844a:	6813      	ldr	r3, [r2, #0]
 801844c:	6825      	ldr	r5, [r4, #0]
 801844e:	6961      	ldr	r1, [r4, #20]
 8018450:	1d18      	adds	r0, r3, #4
 8018452:	6010      	str	r0, [r2, #0]
 8018454:	0628      	lsls	r0, r5, #24
 8018456:	681b      	ldr	r3, [r3, #0]
 8018458:	d501      	bpl.n	801845e <_printf_i+0x196>
 801845a:	6019      	str	r1, [r3, #0]
 801845c:	e002      	b.n	8018464 <_printf_i+0x19c>
 801845e:	066a      	lsls	r2, r5, #25
 8018460:	d5fb      	bpl.n	801845a <_printf_i+0x192>
 8018462:	8019      	strh	r1, [r3, #0]
 8018464:	2300      	movs	r3, #0
 8018466:	6123      	str	r3, [r4, #16]
 8018468:	4665      	mov	r5, ip
 801846a:	e7b9      	b.n	80183e0 <_printf_i+0x118>
 801846c:	6813      	ldr	r3, [r2, #0]
 801846e:	1d19      	adds	r1, r3, #4
 8018470:	6011      	str	r1, [r2, #0]
 8018472:	681d      	ldr	r5, [r3, #0]
 8018474:	6862      	ldr	r2, [r4, #4]
 8018476:	2100      	movs	r1, #0
 8018478:	4628      	mov	r0, r5
 801847a:	f7e7 feb9 	bl	80001f0 <memchr>
 801847e:	b108      	cbz	r0, 8018484 <_printf_i+0x1bc>
 8018480:	1b40      	subs	r0, r0, r5
 8018482:	6060      	str	r0, [r4, #4]
 8018484:	6863      	ldr	r3, [r4, #4]
 8018486:	6123      	str	r3, [r4, #16]
 8018488:	2300      	movs	r3, #0
 801848a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801848e:	e7a7      	b.n	80183e0 <_printf_i+0x118>
 8018490:	6923      	ldr	r3, [r4, #16]
 8018492:	462a      	mov	r2, r5
 8018494:	4639      	mov	r1, r7
 8018496:	4630      	mov	r0, r6
 8018498:	47c0      	blx	r8
 801849a:	3001      	adds	r0, #1
 801849c:	d0aa      	beq.n	80183f4 <_printf_i+0x12c>
 801849e:	6823      	ldr	r3, [r4, #0]
 80184a0:	079b      	lsls	r3, r3, #30
 80184a2:	d413      	bmi.n	80184cc <_printf_i+0x204>
 80184a4:	68e0      	ldr	r0, [r4, #12]
 80184a6:	9b03      	ldr	r3, [sp, #12]
 80184a8:	4298      	cmp	r0, r3
 80184aa:	bfb8      	it	lt
 80184ac:	4618      	movlt	r0, r3
 80184ae:	e7a3      	b.n	80183f8 <_printf_i+0x130>
 80184b0:	2301      	movs	r3, #1
 80184b2:	464a      	mov	r2, r9
 80184b4:	4639      	mov	r1, r7
 80184b6:	4630      	mov	r0, r6
 80184b8:	47c0      	blx	r8
 80184ba:	3001      	adds	r0, #1
 80184bc:	d09a      	beq.n	80183f4 <_printf_i+0x12c>
 80184be:	3501      	adds	r5, #1
 80184c0:	68e3      	ldr	r3, [r4, #12]
 80184c2:	9a03      	ldr	r2, [sp, #12]
 80184c4:	1a9b      	subs	r3, r3, r2
 80184c6:	42ab      	cmp	r3, r5
 80184c8:	dcf2      	bgt.n	80184b0 <_printf_i+0x1e8>
 80184ca:	e7eb      	b.n	80184a4 <_printf_i+0x1dc>
 80184cc:	2500      	movs	r5, #0
 80184ce:	f104 0919 	add.w	r9, r4, #25
 80184d2:	e7f5      	b.n	80184c0 <_printf_i+0x1f8>
 80184d4:	2b00      	cmp	r3, #0
 80184d6:	d1ac      	bne.n	8018432 <_printf_i+0x16a>
 80184d8:	7803      	ldrb	r3, [r0, #0]
 80184da:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80184de:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80184e2:	e76c      	b.n	80183be <_printf_i+0xf6>
 80184e4:	0801af21 	.word	0x0801af21
 80184e8:	0801af32 	.word	0x0801af32

080184ec <__sread>:
 80184ec:	b510      	push	{r4, lr}
 80184ee:	460c      	mov	r4, r1
 80184f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80184f4:	f000 fa46 	bl	8018984 <_read_r>
 80184f8:	2800      	cmp	r0, #0
 80184fa:	bfab      	itete	ge
 80184fc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80184fe:	89a3      	ldrhlt	r3, [r4, #12]
 8018500:	181b      	addge	r3, r3, r0
 8018502:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8018506:	bfac      	ite	ge
 8018508:	6563      	strge	r3, [r4, #84]	; 0x54
 801850a:	81a3      	strhlt	r3, [r4, #12]
 801850c:	bd10      	pop	{r4, pc}

0801850e <__swrite>:
 801850e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018512:	461f      	mov	r7, r3
 8018514:	898b      	ldrh	r3, [r1, #12]
 8018516:	05db      	lsls	r3, r3, #23
 8018518:	4605      	mov	r5, r0
 801851a:	460c      	mov	r4, r1
 801851c:	4616      	mov	r6, r2
 801851e:	d505      	bpl.n	801852c <__swrite+0x1e>
 8018520:	2302      	movs	r3, #2
 8018522:	2200      	movs	r2, #0
 8018524:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8018528:	f000 f9b6 	bl	8018898 <_lseek_r>
 801852c:	89a3      	ldrh	r3, [r4, #12]
 801852e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8018532:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8018536:	81a3      	strh	r3, [r4, #12]
 8018538:	4632      	mov	r2, r6
 801853a:	463b      	mov	r3, r7
 801853c:	4628      	mov	r0, r5
 801853e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8018542:	f000 b869 	b.w	8018618 <_write_r>

08018546 <__sseek>:
 8018546:	b510      	push	{r4, lr}
 8018548:	460c      	mov	r4, r1
 801854a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801854e:	f000 f9a3 	bl	8018898 <_lseek_r>
 8018552:	1c43      	adds	r3, r0, #1
 8018554:	89a3      	ldrh	r3, [r4, #12]
 8018556:	bf15      	itete	ne
 8018558:	6560      	strne	r0, [r4, #84]	; 0x54
 801855a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801855e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8018562:	81a3      	strheq	r3, [r4, #12]
 8018564:	bf18      	it	ne
 8018566:	81a3      	strhne	r3, [r4, #12]
 8018568:	bd10      	pop	{r4, pc}

0801856a <__sclose>:
 801856a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801856e:	f000 b8d3 	b.w	8018718 <_close_r>
	...

08018574 <__swbuf_r>:
 8018574:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018576:	460e      	mov	r6, r1
 8018578:	4614      	mov	r4, r2
 801857a:	4605      	mov	r5, r0
 801857c:	b118      	cbz	r0, 8018586 <__swbuf_r+0x12>
 801857e:	6983      	ldr	r3, [r0, #24]
 8018580:	b90b      	cbnz	r3, 8018586 <__swbuf_r+0x12>
 8018582:	f7ff fc5f 	bl	8017e44 <__sinit>
 8018586:	4b21      	ldr	r3, [pc, #132]	; (801860c <__swbuf_r+0x98>)
 8018588:	429c      	cmp	r4, r3
 801858a:	d12a      	bne.n	80185e2 <__swbuf_r+0x6e>
 801858c:	686c      	ldr	r4, [r5, #4]
 801858e:	69a3      	ldr	r3, [r4, #24]
 8018590:	60a3      	str	r3, [r4, #8]
 8018592:	89a3      	ldrh	r3, [r4, #12]
 8018594:	071a      	lsls	r2, r3, #28
 8018596:	d52e      	bpl.n	80185f6 <__swbuf_r+0x82>
 8018598:	6923      	ldr	r3, [r4, #16]
 801859a:	b363      	cbz	r3, 80185f6 <__swbuf_r+0x82>
 801859c:	6923      	ldr	r3, [r4, #16]
 801859e:	6820      	ldr	r0, [r4, #0]
 80185a0:	1ac0      	subs	r0, r0, r3
 80185a2:	6963      	ldr	r3, [r4, #20]
 80185a4:	b2f6      	uxtb	r6, r6
 80185a6:	4283      	cmp	r3, r0
 80185a8:	4637      	mov	r7, r6
 80185aa:	dc04      	bgt.n	80185b6 <__swbuf_r+0x42>
 80185ac:	4621      	mov	r1, r4
 80185ae:	4628      	mov	r0, r5
 80185b0:	f000 f948 	bl	8018844 <_fflush_r>
 80185b4:	bb28      	cbnz	r0, 8018602 <__swbuf_r+0x8e>
 80185b6:	68a3      	ldr	r3, [r4, #8]
 80185b8:	3b01      	subs	r3, #1
 80185ba:	60a3      	str	r3, [r4, #8]
 80185bc:	6823      	ldr	r3, [r4, #0]
 80185be:	1c5a      	adds	r2, r3, #1
 80185c0:	6022      	str	r2, [r4, #0]
 80185c2:	701e      	strb	r6, [r3, #0]
 80185c4:	6963      	ldr	r3, [r4, #20]
 80185c6:	3001      	adds	r0, #1
 80185c8:	4283      	cmp	r3, r0
 80185ca:	d004      	beq.n	80185d6 <__swbuf_r+0x62>
 80185cc:	89a3      	ldrh	r3, [r4, #12]
 80185ce:	07db      	lsls	r3, r3, #31
 80185d0:	d519      	bpl.n	8018606 <__swbuf_r+0x92>
 80185d2:	2e0a      	cmp	r6, #10
 80185d4:	d117      	bne.n	8018606 <__swbuf_r+0x92>
 80185d6:	4621      	mov	r1, r4
 80185d8:	4628      	mov	r0, r5
 80185da:	f000 f933 	bl	8018844 <_fflush_r>
 80185de:	b190      	cbz	r0, 8018606 <__swbuf_r+0x92>
 80185e0:	e00f      	b.n	8018602 <__swbuf_r+0x8e>
 80185e2:	4b0b      	ldr	r3, [pc, #44]	; (8018610 <__swbuf_r+0x9c>)
 80185e4:	429c      	cmp	r4, r3
 80185e6:	d101      	bne.n	80185ec <__swbuf_r+0x78>
 80185e8:	68ac      	ldr	r4, [r5, #8]
 80185ea:	e7d0      	b.n	801858e <__swbuf_r+0x1a>
 80185ec:	4b09      	ldr	r3, [pc, #36]	; (8018614 <__swbuf_r+0xa0>)
 80185ee:	429c      	cmp	r4, r3
 80185f0:	bf08      	it	eq
 80185f2:	68ec      	ldreq	r4, [r5, #12]
 80185f4:	e7cb      	b.n	801858e <__swbuf_r+0x1a>
 80185f6:	4621      	mov	r1, r4
 80185f8:	4628      	mov	r0, r5
 80185fa:	f000 f81f 	bl	801863c <__swsetup_r>
 80185fe:	2800      	cmp	r0, #0
 8018600:	d0cc      	beq.n	801859c <__swbuf_r+0x28>
 8018602:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8018606:	4638      	mov	r0, r7
 8018608:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801860a:	bf00      	nop
 801860c:	0801aed0 	.word	0x0801aed0
 8018610:	0801aef0 	.word	0x0801aef0
 8018614:	0801aeb0 	.word	0x0801aeb0

08018618 <_write_r>:
 8018618:	b538      	push	{r3, r4, r5, lr}
 801861a:	4c07      	ldr	r4, [pc, #28]	; (8018638 <_write_r+0x20>)
 801861c:	4605      	mov	r5, r0
 801861e:	4608      	mov	r0, r1
 8018620:	4611      	mov	r1, r2
 8018622:	2200      	movs	r2, #0
 8018624:	6022      	str	r2, [r4, #0]
 8018626:	461a      	mov	r2, r3
 8018628:	f7e8 fbc1 	bl	8000dae <_write>
 801862c:	1c43      	adds	r3, r0, #1
 801862e:	d102      	bne.n	8018636 <_write_r+0x1e>
 8018630:	6823      	ldr	r3, [r4, #0]
 8018632:	b103      	cbz	r3, 8018636 <_write_r+0x1e>
 8018634:	602b      	str	r3, [r5, #0]
 8018636:	bd38      	pop	{r3, r4, r5, pc}
 8018638:	2000b5f4 	.word	0x2000b5f4

0801863c <__swsetup_r>:
 801863c:	4b32      	ldr	r3, [pc, #200]	; (8018708 <__swsetup_r+0xcc>)
 801863e:	b570      	push	{r4, r5, r6, lr}
 8018640:	681d      	ldr	r5, [r3, #0]
 8018642:	4606      	mov	r6, r0
 8018644:	460c      	mov	r4, r1
 8018646:	b125      	cbz	r5, 8018652 <__swsetup_r+0x16>
 8018648:	69ab      	ldr	r3, [r5, #24]
 801864a:	b913      	cbnz	r3, 8018652 <__swsetup_r+0x16>
 801864c:	4628      	mov	r0, r5
 801864e:	f7ff fbf9 	bl	8017e44 <__sinit>
 8018652:	4b2e      	ldr	r3, [pc, #184]	; (801870c <__swsetup_r+0xd0>)
 8018654:	429c      	cmp	r4, r3
 8018656:	d10f      	bne.n	8018678 <__swsetup_r+0x3c>
 8018658:	686c      	ldr	r4, [r5, #4]
 801865a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801865e:	b29a      	uxth	r2, r3
 8018660:	0715      	lsls	r5, r2, #28
 8018662:	d42c      	bmi.n	80186be <__swsetup_r+0x82>
 8018664:	06d0      	lsls	r0, r2, #27
 8018666:	d411      	bmi.n	801868c <__swsetup_r+0x50>
 8018668:	2209      	movs	r2, #9
 801866a:	6032      	str	r2, [r6, #0]
 801866c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8018670:	81a3      	strh	r3, [r4, #12]
 8018672:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8018676:	e03e      	b.n	80186f6 <__swsetup_r+0xba>
 8018678:	4b25      	ldr	r3, [pc, #148]	; (8018710 <__swsetup_r+0xd4>)
 801867a:	429c      	cmp	r4, r3
 801867c:	d101      	bne.n	8018682 <__swsetup_r+0x46>
 801867e:	68ac      	ldr	r4, [r5, #8]
 8018680:	e7eb      	b.n	801865a <__swsetup_r+0x1e>
 8018682:	4b24      	ldr	r3, [pc, #144]	; (8018714 <__swsetup_r+0xd8>)
 8018684:	429c      	cmp	r4, r3
 8018686:	bf08      	it	eq
 8018688:	68ec      	ldreq	r4, [r5, #12]
 801868a:	e7e6      	b.n	801865a <__swsetup_r+0x1e>
 801868c:	0751      	lsls	r1, r2, #29
 801868e:	d512      	bpl.n	80186b6 <__swsetup_r+0x7a>
 8018690:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8018692:	b141      	cbz	r1, 80186a6 <__swsetup_r+0x6a>
 8018694:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8018698:	4299      	cmp	r1, r3
 801869a:	d002      	beq.n	80186a2 <__swsetup_r+0x66>
 801869c:	4630      	mov	r0, r6
 801869e:	f7ff fa8d 	bl	8017bbc <_free_r>
 80186a2:	2300      	movs	r3, #0
 80186a4:	6363      	str	r3, [r4, #52]	; 0x34
 80186a6:	89a3      	ldrh	r3, [r4, #12]
 80186a8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80186ac:	81a3      	strh	r3, [r4, #12]
 80186ae:	2300      	movs	r3, #0
 80186b0:	6063      	str	r3, [r4, #4]
 80186b2:	6923      	ldr	r3, [r4, #16]
 80186b4:	6023      	str	r3, [r4, #0]
 80186b6:	89a3      	ldrh	r3, [r4, #12]
 80186b8:	f043 0308 	orr.w	r3, r3, #8
 80186bc:	81a3      	strh	r3, [r4, #12]
 80186be:	6923      	ldr	r3, [r4, #16]
 80186c0:	b94b      	cbnz	r3, 80186d6 <__swsetup_r+0x9a>
 80186c2:	89a3      	ldrh	r3, [r4, #12]
 80186c4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80186c8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80186cc:	d003      	beq.n	80186d6 <__swsetup_r+0x9a>
 80186ce:	4621      	mov	r1, r4
 80186d0:	4630      	mov	r0, r6
 80186d2:	f000 f917 	bl	8018904 <__smakebuf_r>
 80186d6:	89a2      	ldrh	r2, [r4, #12]
 80186d8:	f012 0301 	ands.w	r3, r2, #1
 80186dc:	d00c      	beq.n	80186f8 <__swsetup_r+0xbc>
 80186de:	2300      	movs	r3, #0
 80186e0:	60a3      	str	r3, [r4, #8]
 80186e2:	6963      	ldr	r3, [r4, #20]
 80186e4:	425b      	negs	r3, r3
 80186e6:	61a3      	str	r3, [r4, #24]
 80186e8:	6923      	ldr	r3, [r4, #16]
 80186ea:	b953      	cbnz	r3, 8018702 <__swsetup_r+0xc6>
 80186ec:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80186f0:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 80186f4:	d1ba      	bne.n	801866c <__swsetup_r+0x30>
 80186f6:	bd70      	pop	{r4, r5, r6, pc}
 80186f8:	0792      	lsls	r2, r2, #30
 80186fa:	bf58      	it	pl
 80186fc:	6963      	ldrpl	r3, [r4, #20]
 80186fe:	60a3      	str	r3, [r4, #8]
 8018700:	e7f2      	b.n	80186e8 <__swsetup_r+0xac>
 8018702:	2000      	movs	r0, #0
 8018704:	e7f7      	b.n	80186f6 <__swsetup_r+0xba>
 8018706:	bf00      	nop
 8018708:	20000188 	.word	0x20000188
 801870c:	0801aed0 	.word	0x0801aed0
 8018710:	0801aef0 	.word	0x0801aef0
 8018714:	0801aeb0 	.word	0x0801aeb0

08018718 <_close_r>:
 8018718:	b538      	push	{r3, r4, r5, lr}
 801871a:	4c06      	ldr	r4, [pc, #24]	; (8018734 <_close_r+0x1c>)
 801871c:	2300      	movs	r3, #0
 801871e:	4605      	mov	r5, r0
 8018720:	4608      	mov	r0, r1
 8018722:	6023      	str	r3, [r4, #0]
 8018724:	f7e8 fb5f 	bl	8000de6 <_close>
 8018728:	1c43      	adds	r3, r0, #1
 801872a:	d102      	bne.n	8018732 <_close_r+0x1a>
 801872c:	6823      	ldr	r3, [r4, #0]
 801872e:	b103      	cbz	r3, 8018732 <_close_r+0x1a>
 8018730:	602b      	str	r3, [r5, #0]
 8018732:	bd38      	pop	{r3, r4, r5, pc}
 8018734:	2000b5f4 	.word	0x2000b5f4

08018738 <__sflush_r>:
 8018738:	898a      	ldrh	r2, [r1, #12]
 801873a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801873e:	4605      	mov	r5, r0
 8018740:	0710      	lsls	r0, r2, #28
 8018742:	460c      	mov	r4, r1
 8018744:	d458      	bmi.n	80187f8 <__sflush_r+0xc0>
 8018746:	684b      	ldr	r3, [r1, #4]
 8018748:	2b00      	cmp	r3, #0
 801874a:	dc05      	bgt.n	8018758 <__sflush_r+0x20>
 801874c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801874e:	2b00      	cmp	r3, #0
 8018750:	dc02      	bgt.n	8018758 <__sflush_r+0x20>
 8018752:	2000      	movs	r0, #0
 8018754:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018758:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801875a:	2e00      	cmp	r6, #0
 801875c:	d0f9      	beq.n	8018752 <__sflush_r+0x1a>
 801875e:	2300      	movs	r3, #0
 8018760:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8018764:	682f      	ldr	r7, [r5, #0]
 8018766:	6a21      	ldr	r1, [r4, #32]
 8018768:	602b      	str	r3, [r5, #0]
 801876a:	d032      	beq.n	80187d2 <__sflush_r+0x9a>
 801876c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801876e:	89a3      	ldrh	r3, [r4, #12]
 8018770:	075a      	lsls	r2, r3, #29
 8018772:	d505      	bpl.n	8018780 <__sflush_r+0x48>
 8018774:	6863      	ldr	r3, [r4, #4]
 8018776:	1ac0      	subs	r0, r0, r3
 8018778:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801877a:	b10b      	cbz	r3, 8018780 <__sflush_r+0x48>
 801877c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801877e:	1ac0      	subs	r0, r0, r3
 8018780:	2300      	movs	r3, #0
 8018782:	4602      	mov	r2, r0
 8018784:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8018786:	6a21      	ldr	r1, [r4, #32]
 8018788:	4628      	mov	r0, r5
 801878a:	47b0      	blx	r6
 801878c:	1c43      	adds	r3, r0, #1
 801878e:	89a3      	ldrh	r3, [r4, #12]
 8018790:	d106      	bne.n	80187a0 <__sflush_r+0x68>
 8018792:	6829      	ldr	r1, [r5, #0]
 8018794:	291d      	cmp	r1, #29
 8018796:	d848      	bhi.n	801882a <__sflush_r+0xf2>
 8018798:	4a29      	ldr	r2, [pc, #164]	; (8018840 <__sflush_r+0x108>)
 801879a:	40ca      	lsrs	r2, r1
 801879c:	07d6      	lsls	r6, r2, #31
 801879e:	d544      	bpl.n	801882a <__sflush_r+0xf2>
 80187a0:	2200      	movs	r2, #0
 80187a2:	6062      	str	r2, [r4, #4]
 80187a4:	04d9      	lsls	r1, r3, #19
 80187a6:	6922      	ldr	r2, [r4, #16]
 80187a8:	6022      	str	r2, [r4, #0]
 80187aa:	d504      	bpl.n	80187b6 <__sflush_r+0x7e>
 80187ac:	1c42      	adds	r2, r0, #1
 80187ae:	d101      	bne.n	80187b4 <__sflush_r+0x7c>
 80187b0:	682b      	ldr	r3, [r5, #0]
 80187b2:	b903      	cbnz	r3, 80187b6 <__sflush_r+0x7e>
 80187b4:	6560      	str	r0, [r4, #84]	; 0x54
 80187b6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80187b8:	602f      	str	r7, [r5, #0]
 80187ba:	2900      	cmp	r1, #0
 80187bc:	d0c9      	beq.n	8018752 <__sflush_r+0x1a>
 80187be:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80187c2:	4299      	cmp	r1, r3
 80187c4:	d002      	beq.n	80187cc <__sflush_r+0x94>
 80187c6:	4628      	mov	r0, r5
 80187c8:	f7ff f9f8 	bl	8017bbc <_free_r>
 80187cc:	2000      	movs	r0, #0
 80187ce:	6360      	str	r0, [r4, #52]	; 0x34
 80187d0:	e7c0      	b.n	8018754 <__sflush_r+0x1c>
 80187d2:	2301      	movs	r3, #1
 80187d4:	4628      	mov	r0, r5
 80187d6:	47b0      	blx	r6
 80187d8:	1c41      	adds	r1, r0, #1
 80187da:	d1c8      	bne.n	801876e <__sflush_r+0x36>
 80187dc:	682b      	ldr	r3, [r5, #0]
 80187de:	2b00      	cmp	r3, #0
 80187e0:	d0c5      	beq.n	801876e <__sflush_r+0x36>
 80187e2:	2b1d      	cmp	r3, #29
 80187e4:	d001      	beq.n	80187ea <__sflush_r+0xb2>
 80187e6:	2b16      	cmp	r3, #22
 80187e8:	d101      	bne.n	80187ee <__sflush_r+0xb6>
 80187ea:	602f      	str	r7, [r5, #0]
 80187ec:	e7b1      	b.n	8018752 <__sflush_r+0x1a>
 80187ee:	89a3      	ldrh	r3, [r4, #12]
 80187f0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80187f4:	81a3      	strh	r3, [r4, #12]
 80187f6:	e7ad      	b.n	8018754 <__sflush_r+0x1c>
 80187f8:	690f      	ldr	r7, [r1, #16]
 80187fa:	2f00      	cmp	r7, #0
 80187fc:	d0a9      	beq.n	8018752 <__sflush_r+0x1a>
 80187fe:	0793      	lsls	r3, r2, #30
 8018800:	680e      	ldr	r6, [r1, #0]
 8018802:	bf08      	it	eq
 8018804:	694b      	ldreq	r3, [r1, #20]
 8018806:	600f      	str	r7, [r1, #0]
 8018808:	bf18      	it	ne
 801880a:	2300      	movne	r3, #0
 801880c:	eba6 0807 	sub.w	r8, r6, r7
 8018810:	608b      	str	r3, [r1, #8]
 8018812:	f1b8 0f00 	cmp.w	r8, #0
 8018816:	dd9c      	ble.n	8018752 <__sflush_r+0x1a>
 8018818:	4643      	mov	r3, r8
 801881a:	463a      	mov	r2, r7
 801881c:	6a21      	ldr	r1, [r4, #32]
 801881e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8018820:	4628      	mov	r0, r5
 8018822:	47b0      	blx	r6
 8018824:	2800      	cmp	r0, #0
 8018826:	dc06      	bgt.n	8018836 <__sflush_r+0xfe>
 8018828:	89a3      	ldrh	r3, [r4, #12]
 801882a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801882e:	81a3      	strh	r3, [r4, #12]
 8018830:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8018834:	e78e      	b.n	8018754 <__sflush_r+0x1c>
 8018836:	4407      	add	r7, r0
 8018838:	eba8 0800 	sub.w	r8, r8, r0
 801883c:	e7e9      	b.n	8018812 <__sflush_r+0xda>
 801883e:	bf00      	nop
 8018840:	20400001 	.word	0x20400001

08018844 <_fflush_r>:
 8018844:	b538      	push	{r3, r4, r5, lr}
 8018846:	690b      	ldr	r3, [r1, #16]
 8018848:	4605      	mov	r5, r0
 801884a:	460c      	mov	r4, r1
 801884c:	b1db      	cbz	r3, 8018886 <_fflush_r+0x42>
 801884e:	b118      	cbz	r0, 8018858 <_fflush_r+0x14>
 8018850:	6983      	ldr	r3, [r0, #24]
 8018852:	b90b      	cbnz	r3, 8018858 <_fflush_r+0x14>
 8018854:	f7ff faf6 	bl	8017e44 <__sinit>
 8018858:	4b0c      	ldr	r3, [pc, #48]	; (801888c <_fflush_r+0x48>)
 801885a:	429c      	cmp	r4, r3
 801885c:	d109      	bne.n	8018872 <_fflush_r+0x2e>
 801885e:	686c      	ldr	r4, [r5, #4]
 8018860:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8018864:	b17b      	cbz	r3, 8018886 <_fflush_r+0x42>
 8018866:	4621      	mov	r1, r4
 8018868:	4628      	mov	r0, r5
 801886a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801886e:	f7ff bf63 	b.w	8018738 <__sflush_r>
 8018872:	4b07      	ldr	r3, [pc, #28]	; (8018890 <_fflush_r+0x4c>)
 8018874:	429c      	cmp	r4, r3
 8018876:	d101      	bne.n	801887c <_fflush_r+0x38>
 8018878:	68ac      	ldr	r4, [r5, #8]
 801887a:	e7f1      	b.n	8018860 <_fflush_r+0x1c>
 801887c:	4b05      	ldr	r3, [pc, #20]	; (8018894 <_fflush_r+0x50>)
 801887e:	429c      	cmp	r4, r3
 8018880:	bf08      	it	eq
 8018882:	68ec      	ldreq	r4, [r5, #12]
 8018884:	e7ec      	b.n	8018860 <_fflush_r+0x1c>
 8018886:	2000      	movs	r0, #0
 8018888:	bd38      	pop	{r3, r4, r5, pc}
 801888a:	bf00      	nop
 801888c:	0801aed0 	.word	0x0801aed0
 8018890:	0801aef0 	.word	0x0801aef0
 8018894:	0801aeb0 	.word	0x0801aeb0

08018898 <_lseek_r>:
 8018898:	b538      	push	{r3, r4, r5, lr}
 801889a:	4c07      	ldr	r4, [pc, #28]	; (80188b8 <_lseek_r+0x20>)
 801889c:	4605      	mov	r5, r0
 801889e:	4608      	mov	r0, r1
 80188a0:	4611      	mov	r1, r2
 80188a2:	2200      	movs	r2, #0
 80188a4:	6022      	str	r2, [r4, #0]
 80188a6:	461a      	mov	r2, r3
 80188a8:	f7e8 fac4 	bl	8000e34 <_lseek>
 80188ac:	1c43      	adds	r3, r0, #1
 80188ae:	d102      	bne.n	80188b6 <_lseek_r+0x1e>
 80188b0:	6823      	ldr	r3, [r4, #0]
 80188b2:	b103      	cbz	r3, 80188b6 <_lseek_r+0x1e>
 80188b4:	602b      	str	r3, [r5, #0]
 80188b6:	bd38      	pop	{r3, r4, r5, pc}
 80188b8:	2000b5f4 	.word	0x2000b5f4

080188bc <__swhatbuf_r>:
 80188bc:	b570      	push	{r4, r5, r6, lr}
 80188be:	460e      	mov	r6, r1
 80188c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80188c4:	2900      	cmp	r1, #0
 80188c6:	b096      	sub	sp, #88	; 0x58
 80188c8:	4614      	mov	r4, r2
 80188ca:	461d      	mov	r5, r3
 80188cc:	da07      	bge.n	80188de <__swhatbuf_r+0x22>
 80188ce:	2300      	movs	r3, #0
 80188d0:	602b      	str	r3, [r5, #0]
 80188d2:	89b3      	ldrh	r3, [r6, #12]
 80188d4:	061a      	lsls	r2, r3, #24
 80188d6:	d410      	bmi.n	80188fa <__swhatbuf_r+0x3e>
 80188d8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80188dc:	e00e      	b.n	80188fc <__swhatbuf_r+0x40>
 80188de:	466a      	mov	r2, sp
 80188e0:	f000 f862 	bl	80189a8 <_fstat_r>
 80188e4:	2800      	cmp	r0, #0
 80188e6:	dbf2      	blt.n	80188ce <__swhatbuf_r+0x12>
 80188e8:	9a01      	ldr	r2, [sp, #4]
 80188ea:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80188ee:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80188f2:	425a      	negs	r2, r3
 80188f4:	415a      	adcs	r2, r3
 80188f6:	602a      	str	r2, [r5, #0]
 80188f8:	e7ee      	b.n	80188d8 <__swhatbuf_r+0x1c>
 80188fa:	2340      	movs	r3, #64	; 0x40
 80188fc:	2000      	movs	r0, #0
 80188fe:	6023      	str	r3, [r4, #0]
 8018900:	b016      	add	sp, #88	; 0x58
 8018902:	bd70      	pop	{r4, r5, r6, pc}

08018904 <__smakebuf_r>:
 8018904:	898b      	ldrh	r3, [r1, #12]
 8018906:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8018908:	079d      	lsls	r5, r3, #30
 801890a:	4606      	mov	r6, r0
 801890c:	460c      	mov	r4, r1
 801890e:	d507      	bpl.n	8018920 <__smakebuf_r+0x1c>
 8018910:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8018914:	6023      	str	r3, [r4, #0]
 8018916:	6123      	str	r3, [r4, #16]
 8018918:	2301      	movs	r3, #1
 801891a:	6163      	str	r3, [r4, #20]
 801891c:	b002      	add	sp, #8
 801891e:	bd70      	pop	{r4, r5, r6, pc}
 8018920:	ab01      	add	r3, sp, #4
 8018922:	466a      	mov	r2, sp
 8018924:	f7ff ffca 	bl	80188bc <__swhatbuf_r>
 8018928:	9900      	ldr	r1, [sp, #0]
 801892a:	4605      	mov	r5, r0
 801892c:	4630      	mov	r0, r6
 801892e:	f7ff f993 	bl	8017c58 <_malloc_r>
 8018932:	b948      	cbnz	r0, 8018948 <__smakebuf_r+0x44>
 8018934:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8018938:	059a      	lsls	r2, r3, #22
 801893a:	d4ef      	bmi.n	801891c <__smakebuf_r+0x18>
 801893c:	f023 0303 	bic.w	r3, r3, #3
 8018940:	f043 0302 	orr.w	r3, r3, #2
 8018944:	81a3      	strh	r3, [r4, #12]
 8018946:	e7e3      	b.n	8018910 <__smakebuf_r+0xc>
 8018948:	4b0d      	ldr	r3, [pc, #52]	; (8018980 <__smakebuf_r+0x7c>)
 801894a:	62b3      	str	r3, [r6, #40]	; 0x28
 801894c:	89a3      	ldrh	r3, [r4, #12]
 801894e:	6020      	str	r0, [r4, #0]
 8018950:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8018954:	81a3      	strh	r3, [r4, #12]
 8018956:	9b00      	ldr	r3, [sp, #0]
 8018958:	6163      	str	r3, [r4, #20]
 801895a:	9b01      	ldr	r3, [sp, #4]
 801895c:	6120      	str	r0, [r4, #16]
 801895e:	b15b      	cbz	r3, 8018978 <__smakebuf_r+0x74>
 8018960:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8018964:	4630      	mov	r0, r6
 8018966:	f000 f831 	bl	80189cc <_isatty_r>
 801896a:	b128      	cbz	r0, 8018978 <__smakebuf_r+0x74>
 801896c:	89a3      	ldrh	r3, [r4, #12]
 801896e:	f023 0303 	bic.w	r3, r3, #3
 8018972:	f043 0301 	orr.w	r3, r3, #1
 8018976:	81a3      	strh	r3, [r4, #12]
 8018978:	89a3      	ldrh	r3, [r4, #12]
 801897a:	431d      	orrs	r5, r3
 801897c:	81a5      	strh	r5, [r4, #12]
 801897e:	e7cd      	b.n	801891c <__smakebuf_r+0x18>
 8018980:	08017e0d 	.word	0x08017e0d

08018984 <_read_r>:
 8018984:	b538      	push	{r3, r4, r5, lr}
 8018986:	4c07      	ldr	r4, [pc, #28]	; (80189a4 <_read_r+0x20>)
 8018988:	4605      	mov	r5, r0
 801898a:	4608      	mov	r0, r1
 801898c:	4611      	mov	r1, r2
 801898e:	2200      	movs	r2, #0
 8018990:	6022      	str	r2, [r4, #0]
 8018992:	461a      	mov	r2, r3
 8018994:	f7e8 f9ee 	bl	8000d74 <_read>
 8018998:	1c43      	adds	r3, r0, #1
 801899a:	d102      	bne.n	80189a2 <_read_r+0x1e>
 801899c:	6823      	ldr	r3, [r4, #0]
 801899e:	b103      	cbz	r3, 80189a2 <_read_r+0x1e>
 80189a0:	602b      	str	r3, [r5, #0]
 80189a2:	bd38      	pop	{r3, r4, r5, pc}
 80189a4:	2000b5f4 	.word	0x2000b5f4

080189a8 <_fstat_r>:
 80189a8:	b538      	push	{r3, r4, r5, lr}
 80189aa:	4c07      	ldr	r4, [pc, #28]	; (80189c8 <_fstat_r+0x20>)
 80189ac:	2300      	movs	r3, #0
 80189ae:	4605      	mov	r5, r0
 80189b0:	4608      	mov	r0, r1
 80189b2:	4611      	mov	r1, r2
 80189b4:	6023      	str	r3, [r4, #0]
 80189b6:	f7e8 fa22 	bl	8000dfe <_fstat>
 80189ba:	1c43      	adds	r3, r0, #1
 80189bc:	d102      	bne.n	80189c4 <_fstat_r+0x1c>
 80189be:	6823      	ldr	r3, [r4, #0]
 80189c0:	b103      	cbz	r3, 80189c4 <_fstat_r+0x1c>
 80189c2:	602b      	str	r3, [r5, #0]
 80189c4:	bd38      	pop	{r3, r4, r5, pc}
 80189c6:	bf00      	nop
 80189c8:	2000b5f4 	.word	0x2000b5f4

080189cc <_isatty_r>:
 80189cc:	b538      	push	{r3, r4, r5, lr}
 80189ce:	4c06      	ldr	r4, [pc, #24]	; (80189e8 <_isatty_r+0x1c>)
 80189d0:	2300      	movs	r3, #0
 80189d2:	4605      	mov	r5, r0
 80189d4:	4608      	mov	r0, r1
 80189d6:	6023      	str	r3, [r4, #0]
 80189d8:	f7e8 fa21 	bl	8000e1e <_isatty>
 80189dc:	1c43      	adds	r3, r0, #1
 80189de:	d102      	bne.n	80189e6 <_isatty_r+0x1a>
 80189e0:	6823      	ldr	r3, [r4, #0]
 80189e2:	b103      	cbz	r3, 80189e6 <_isatty_r+0x1a>
 80189e4:	602b      	str	r3, [r5, #0]
 80189e6:	bd38      	pop	{r3, r4, r5, pc}
 80189e8:	2000b5f4 	.word	0x2000b5f4

080189ec <_init>:
 80189ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80189ee:	bf00      	nop
 80189f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80189f2:	bc08      	pop	{r3}
 80189f4:	469e      	mov	lr, r3
 80189f6:	4770      	bx	lr

080189f8 <_fini>:
 80189f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80189fa:	bf00      	nop
 80189fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80189fe:	bc08      	pop	{r3}
 8018a00:	469e      	mov	lr, r3
 8018a02:	4770      	bx	lr
