
CDFR_2020.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00019190  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002638  08019340  08019340  00029340  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801b978  0801b978  000301f0  2**0
                  CONTENTS
  4 .ARM          00000008  0801b978  0801b978  0002b978  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801b980  0801b980  000301f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801b980  0801b980  0002b980  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801b984  0801b984  0002b984  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f0  20000000  0801b988  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000c334  200001f0  0801bb78  000301f0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000c524  0801bb78  0003c524  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000301f0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0004f488  00000000  00000000  00030220  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00009b54  00000000  00000000  0007f6a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00002800  00000000  00000000  00089200  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000024c0  00000000  00000000  0008ba00  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0003d51e  00000000  00000000  0008dec0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00039e1f  00000000  00000000  000cb3de  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0010c7e9  00000000  00000000  001051fd  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  002119e6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000a77c  00000000  00000000  00211a64  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	200001f0 	.word	0x200001f0
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08019328 	.word	0x08019328

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	200001f4 	.word	0x200001f4
 80001ec:	08019328 	.word	0x08019328

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002a4:	f000 b972 	b.w	800058c <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9e08      	ldr	r6, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	4688      	mov	r8, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d14b      	bne.n	8000366 <__udivmoddi4+0xa6>
 80002ce:	428a      	cmp	r2, r1
 80002d0:	4615      	mov	r5, r2
 80002d2:	d967      	bls.n	80003a4 <__udivmoddi4+0xe4>
 80002d4:	fab2 f282 	clz	r2, r2
 80002d8:	b14a      	cbz	r2, 80002ee <__udivmoddi4+0x2e>
 80002da:	f1c2 0720 	rsb	r7, r2, #32
 80002de:	fa01 f302 	lsl.w	r3, r1, r2
 80002e2:	fa20 f707 	lsr.w	r7, r0, r7
 80002e6:	4095      	lsls	r5, r2
 80002e8:	ea47 0803 	orr.w	r8, r7, r3
 80002ec:	4094      	lsls	r4, r2
 80002ee:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002f2:	0c23      	lsrs	r3, r4, #16
 80002f4:	fbb8 f7fe 	udiv	r7, r8, lr
 80002f8:	fa1f fc85 	uxth.w	ip, r5
 80002fc:	fb0e 8817 	mls	r8, lr, r7, r8
 8000300:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000304:	fb07 f10c 	mul.w	r1, r7, ip
 8000308:	4299      	cmp	r1, r3
 800030a:	d909      	bls.n	8000320 <__udivmoddi4+0x60>
 800030c:	18eb      	adds	r3, r5, r3
 800030e:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 8000312:	f080 811b 	bcs.w	800054c <__udivmoddi4+0x28c>
 8000316:	4299      	cmp	r1, r3
 8000318:	f240 8118 	bls.w	800054c <__udivmoddi4+0x28c>
 800031c:	3f02      	subs	r7, #2
 800031e:	442b      	add	r3, r5
 8000320:	1a5b      	subs	r3, r3, r1
 8000322:	b2a4      	uxth	r4, r4
 8000324:	fbb3 f0fe 	udiv	r0, r3, lr
 8000328:	fb0e 3310 	mls	r3, lr, r0, r3
 800032c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000330:	fb00 fc0c 	mul.w	ip, r0, ip
 8000334:	45a4      	cmp	ip, r4
 8000336:	d909      	bls.n	800034c <__udivmoddi4+0x8c>
 8000338:	192c      	adds	r4, r5, r4
 800033a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800033e:	f080 8107 	bcs.w	8000550 <__udivmoddi4+0x290>
 8000342:	45a4      	cmp	ip, r4
 8000344:	f240 8104 	bls.w	8000550 <__udivmoddi4+0x290>
 8000348:	3802      	subs	r0, #2
 800034a:	442c      	add	r4, r5
 800034c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000350:	eba4 040c 	sub.w	r4, r4, ip
 8000354:	2700      	movs	r7, #0
 8000356:	b11e      	cbz	r6, 8000360 <__udivmoddi4+0xa0>
 8000358:	40d4      	lsrs	r4, r2
 800035a:	2300      	movs	r3, #0
 800035c:	e9c6 4300 	strd	r4, r3, [r6]
 8000360:	4639      	mov	r1, r7
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	428b      	cmp	r3, r1
 8000368:	d909      	bls.n	800037e <__udivmoddi4+0xbe>
 800036a:	2e00      	cmp	r6, #0
 800036c:	f000 80eb 	beq.w	8000546 <__udivmoddi4+0x286>
 8000370:	2700      	movs	r7, #0
 8000372:	e9c6 0100 	strd	r0, r1, [r6]
 8000376:	4638      	mov	r0, r7
 8000378:	4639      	mov	r1, r7
 800037a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037e:	fab3 f783 	clz	r7, r3
 8000382:	2f00      	cmp	r7, #0
 8000384:	d147      	bne.n	8000416 <__udivmoddi4+0x156>
 8000386:	428b      	cmp	r3, r1
 8000388:	d302      	bcc.n	8000390 <__udivmoddi4+0xd0>
 800038a:	4282      	cmp	r2, r0
 800038c:	f200 80fa 	bhi.w	8000584 <__udivmoddi4+0x2c4>
 8000390:	1a84      	subs	r4, r0, r2
 8000392:	eb61 0303 	sbc.w	r3, r1, r3
 8000396:	2001      	movs	r0, #1
 8000398:	4698      	mov	r8, r3
 800039a:	2e00      	cmp	r6, #0
 800039c:	d0e0      	beq.n	8000360 <__udivmoddi4+0xa0>
 800039e:	e9c6 4800 	strd	r4, r8, [r6]
 80003a2:	e7dd      	b.n	8000360 <__udivmoddi4+0xa0>
 80003a4:	b902      	cbnz	r2, 80003a8 <__udivmoddi4+0xe8>
 80003a6:	deff      	udf	#255	; 0xff
 80003a8:	fab2 f282 	clz	r2, r2
 80003ac:	2a00      	cmp	r2, #0
 80003ae:	f040 808f 	bne.w	80004d0 <__udivmoddi4+0x210>
 80003b2:	1b49      	subs	r1, r1, r5
 80003b4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003b8:	fa1f f885 	uxth.w	r8, r5
 80003bc:	2701      	movs	r7, #1
 80003be:	fbb1 fcfe 	udiv	ip, r1, lr
 80003c2:	0c23      	lsrs	r3, r4, #16
 80003c4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003c8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003cc:	fb08 f10c 	mul.w	r1, r8, ip
 80003d0:	4299      	cmp	r1, r3
 80003d2:	d907      	bls.n	80003e4 <__udivmoddi4+0x124>
 80003d4:	18eb      	adds	r3, r5, r3
 80003d6:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 80003da:	d202      	bcs.n	80003e2 <__udivmoddi4+0x122>
 80003dc:	4299      	cmp	r1, r3
 80003de:	f200 80cd 	bhi.w	800057c <__udivmoddi4+0x2bc>
 80003e2:	4684      	mov	ip, r0
 80003e4:	1a59      	subs	r1, r3, r1
 80003e6:	b2a3      	uxth	r3, r4
 80003e8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003ec:	fb0e 1410 	mls	r4, lr, r0, r1
 80003f0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003f4:	fb08 f800 	mul.w	r8, r8, r0
 80003f8:	45a0      	cmp	r8, r4
 80003fa:	d907      	bls.n	800040c <__udivmoddi4+0x14c>
 80003fc:	192c      	adds	r4, r5, r4
 80003fe:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x14a>
 8000404:	45a0      	cmp	r8, r4
 8000406:	f200 80b6 	bhi.w	8000576 <__udivmoddi4+0x2b6>
 800040a:	4618      	mov	r0, r3
 800040c:	eba4 0408 	sub.w	r4, r4, r8
 8000410:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000414:	e79f      	b.n	8000356 <__udivmoddi4+0x96>
 8000416:	f1c7 0c20 	rsb	ip, r7, #32
 800041a:	40bb      	lsls	r3, r7
 800041c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000420:	ea4e 0e03 	orr.w	lr, lr, r3
 8000424:	fa01 f407 	lsl.w	r4, r1, r7
 8000428:	fa20 f50c 	lsr.w	r5, r0, ip
 800042c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000430:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000434:	4325      	orrs	r5, r4
 8000436:	fbb3 f9f8 	udiv	r9, r3, r8
 800043a:	0c2c      	lsrs	r4, r5, #16
 800043c:	fb08 3319 	mls	r3, r8, r9, r3
 8000440:	fa1f fa8e 	uxth.w	sl, lr
 8000444:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000448:	fb09 f40a 	mul.w	r4, r9, sl
 800044c:	429c      	cmp	r4, r3
 800044e:	fa02 f207 	lsl.w	r2, r2, r7
 8000452:	fa00 f107 	lsl.w	r1, r0, r7
 8000456:	d90b      	bls.n	8000470 <__udivmoddi4+0x1b0>
 8000458:	eb1e 0303 	adds.w	r3, lr, r3
 800045c:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000460:	f080 8087 	bcs.w	8000572 <__udivmoddi4+0x2b2>
 8000464:	429c      	cmp	r4, r3
 8000466:	f240 8084 	bls.w	8000572 <__udivmoddi4+0x2b2>
 800046a:	f1a9 0902 	sub.w	r9, r9, #2
 800046e:	4473      	add	r3, lr
 8000470:	1b1b      	subs	r3, r3, r4
 8000472:	b2ad      	uxth	r5, r5
 8000474:	fbb3 f0f8 	udiv	r0, r3, r8
 8000478:	fb08 3310 	mls	r3, r8, r0, r3
 800047c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000480:	fb00 fa0a 	mul.w	sl, r0, sl
 8000484:	45a2      	cmp	sl, r4
 8000486:	d908      	bls.n	800049a <__udivmoddi4+0x1da>
 8000488:	eb1e 0404 	adds.w	r4, lr, r4
 800048c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000490:	d26b      	bcs.n	800056a <__udivmoddi4+0x2aa>
 8000492:	45a2      	cmp	sl, r4
 8000494:	d969      	bls.n	800056a <__udivmoddi4+0x2aa>
 8000496:	3802      	subs	r0, #2
 8000498:	4474      	add	r4, lr
 800049a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800049e:	fba0 8902 	umull	r8, r9, r0, r2
 80004a2:	eba4 040a 	sub.w	r4, r4, sl
 80004a6:	454c      	cmp	r4, r9
 80004a8:	46c2      	mov	sl, r8
 80004aa:	464b      	mov	r3, r9
 80004ac:	d354      	bcc.n	8000558 <__udivmoddi4+0x298>
 80004ae:	d051      	beq.n	8000554 <__udivmoddi4+0x294>
 80004b0:	2e00      	cmp	r6, #0
 80004b2:	d069      	beq.n	8000588 <__udivmoddi4+0x2c8>
 80004b4:	ebb1 050a 	subs.w	r5, r1, sl
 80004b8:	eb64 0403 	sbc.w	r4, r4, r3
 80004bc:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004c0:	40fd      	lsrs	r5, r7
 80004c2:	40fc      	lsrs	r4, r7
 80004c4:	ea4c 0505 	orr.w	r5, ip, r5
 80004c8:	e9c6 5400 	strd	r5, r4, [r6]
 80004cc:	2700      	movs	r7, #0
 80004ce:	e747      	b.n	8000360 <__udivmoddi4+0xa0>
 80004d0:	f1c2 0320 	rsb	r3, r2, #32
 80004d4:	fa20 f703 	lsr.w	r7, r0, r3
 80004d8:	4095      	lsls	r5, r2
 80004da:	fa01 f002 	lsl.w	r0, r1, r2
 80004de:	fa21 f303 	lsr.w	r3, r1, r3
 80004e2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004e6:	4338      	orrs	r0, r7
 80004e8:	0c01      	lsrs	r1, r0, #16
 80004ea:	fbb3 f7fe 	udiv	r7, r3, lr
 80004ee:	fa1f f885 	uxth.w	r8, r5
 80004f2:	fb0e 3317 	mls	r3, lr, r7, r3
 80004f6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004fa:	fb07 f308 	mul.w	r3, r7, r8
 80004fe:	428b      	cmp	r3, r1
 8000500:	fa04 f402 	lsl.w	r4, r4, r2
 8000504:	d907      	bls.n	8000516 <__udivmoddi4+0x256>
 8000506:	1869      	adds	r1, r5, r1
 8000508:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 800050c:	d22f      	bcs.n	800056e <__udivmoddi4+0x2ae>
 800050e:	428b      	cmp	r3, r1
 8000510:	d92d      	bls.n	800056e <__udivmoddi4+0x2ae>
 8000512:	3f02      	subs	r7, #2
 8000514:	4429      	add	r1, r5
 8000516:	1acb      	subs	r3, r1, r3
 8000518:	b281      	uxth	r1, r0
 800051a:	fbb3 f0fe 	udiv	r0, r3, lr
 800051e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000522:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000526:	fb00 f308 	mul.w	r3, r0, r8
 800052a:	428b      	cmp	r3, r1
 800052c:	d907      	bls.n	800053e <__udivmoddi4+0x27e>
 800052e:	1869      	adds	r1, r5, r1
 8000530:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000534:	d217      	bcs.n	8000566 <__udivmoddi4+0x2a6>
 8000536:	428b      	cmp	r3, r1
 8000538:	d915      	bls.n	8000566 <__udivmoddi4+0x2a6>
 800053a:	3802      	subs	r0, #2
 800053c:	4429      	add	r1, r5
 800053e:	1ac9      	subs	r1, r1, r3
 8000540:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000544:	e73b      	b.n	80003be <__udivmoddi4+0xfe>
 8000546:	4637      	mov	r7, r6
 8000548:	4630      	mov	r0, r6
 800054a:	e709      	b.n	8000360 <__udivmoddi4+0xa0>
 800054c:	4607      	mov	r7, r0
 800054e:	e6e7      	b.n	8000320 <__udivmoddi4+0x60>
 8000550:	4618      	mov	r0, r3
 8000552:	e6fb      	b.n	800034c <__udivmoddi4+0x8c>
 8000554:	4541      	cmp	r1, r8
 8000556:	d2ab      	bcs.n	80004b0 <__udivmoddi4+0x1f0>
 8000558:	ebb8 0a02 	subs.w	sl, r8, r2
 800055c:	eb69 020e 	sbc.w	r2, r9, lr
 8000560:	3801      	subs	r0, #1
 8000562:	4613      	mov	r3, r2
 8000564:	e7a4      	b.n	80004b0 <__udivmoddi4+0x1f0>
 8000566:	4660      	mov	r0, ip
 8000568:	e7e9      	b.n	800053e <__udivmoddi4+0x27e>
 800056a:	4618      	mov	r0, r3
 800056c:	e795      	b.n	800049a <__udivmoddi4+0x1da>
 800056e:	4667      	mov	r7, ip
 8000570:	e7d1      	b.n	8000516 <__udivmoddi4+0x256>
 8000572:	4681      	mov	r9, r0
 8000574:	e77c      	b.n	8000470 <__udivmoddi4+0x1b0>
 8000576:	3802      	subs	r0, #2
 8000578:	442c      	add	r4, r5
 800057a:	e747      	b.n	800040c <__udivmoddi4+0x14c>
 800057c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000580:	442b      	add	r3, r5
 8000582:	e72f      	b.n	80003e4 <__udivmoddi4+0x124>
 8000584:	4638      	mov	r0, r7
 8000586:	e708      	b.n	800039a <__udivmoddi4+0xda>
 8000588:	4637      	mov	r7, r6
 800058a:	e6e9      	b.n	8000360 <__udivmoddi4+0xa0>

0800058c <__aeabi_idiv0>:
 800058c:	4770      	bx	lr
 800058e:	bf00      	nop

08000590 <F_TCP_paquetTocmd>:




void F_TCP_paquetTocmd(struct pbuf *p, struct tcp_command *s_cmd_received)
{
 8000590:	b480      	push	{r7}
 8000592:	b08b      	sub	sp, #44	; 0x2c
 8000594:	af00      	add	r7, sp, #0
 8000596:	6078      	str	r0, [r7, #4]
 8000598:	6039      	str	r1, [r7, #0]
	uint8_t *tempPtr;
	uint8_t i = 0;
 800059a:	2300      	movs	r3, #0
 800059c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	tempPtr = (uint8_t *)p->payload;
 80005a0:	687b      	ldr	r3, [r7, #4]
 80005a2:	685b      	ldr	r3, [r3, #4]
 80005a4:	627b      	str	r3, [r7, #36]	; 0x24
	volatile uint8_t tab_reveived[20] = {0};
 80005a6:	f107 030c 	add.w	r3, r7, #12
 80005aa:	2200      	movs	r2, #0
 80005ac:	601a      	str	r2, [r3, #0]
 80005ae:	605a      	str	r2, [r3, #4]
 80005b0:	609a      	str	r2, [r3, #8]
 80005b2:	60da      	str	r2, [r3, #12]
 80005b4:	611a      	str	r2, [r3, #16]

	for(i=0; i<(p->len);i++)
 80005b6:	2300      	movs	r3, #0
 80005b8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80005bc:	e010      	b.n	80005e0 <F_TCP_paquetTocmd+0x50>
	{

		tab_reveived[i] = (uint8_t) *(tempPtr++);
 80005be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80005c0:	1c5a      	adds	r2, r3, #1
 80005c2:	627a      	str	r2, [r7, #36]	; 0x24
 80005c4:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 80005c8:	7819      	ldrb	r1, [r3, #0]
 80005ca:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80005ce:	4413      	add	r3, r2
 80005d0:	460a      	mov	r2, r1
 80005d2:	f803 2c1c 	strb.w	r2, [r3, #-28]
	for(i=0; i<(p->len);i++)
 80005d6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80005da:	3301      	adds	r3, #1
 80005dc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80005e0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80005e4:	b29a      	uxth	r2, r3
 80005e6:	687b      	ldr	r3, [r7, #4]
 80005e8:	895b      	ldrh	r3, [r3, #10]
 80005ea:	429a      	cmp	r2, r3
 80005ec:	d3e7      	bcc.n	80005be <F_TCP_paquetTocmd+0x2e>

	}

	s_cmd_received->id = (uint32_t)((tab_reveived[0] << 24) + (tab_reveived[1] << 16) + (tab_reveived[2] << 8) + tab_reveived[3]);
 80005ee:	7b3b      	ldrb	r3, [r7, #12]
 80005f0:	b2db      	uxtb	r3, r3
 80005f2:	061a      	lsls	r2, r3, #24
 80005f4:	7b7b      	ldrb	r3, [r7, #13]
 80005f6:	b2db      	uxtb	r3, r3
 80005f8:	041b      	lsls	r3, r3, #16
 80005fa:	441a      	add	r2, r3
 80005fc:	7bbb      	ldrb	r3, [r7, #14]
 80005fe:	b2db      	uxtb	r3, r3
 8000600:	021b      	lsls	r3, r3, #8
 8000602:	4413      	add	r3, r2
 8000604:	7bfa      	ldrb	r2, [r7, #15]
 8000606:	b2d2      	uxtb	r2, r2
 8000608:	4413      	add	r3, r2
 800060a:	461a      	mov	r2, r3
 800060c:	683b      	ldr	r3, [r7, #0]
 800060e:	601a      	str	r2, [r3, #0]
	s_cmd_received->nb_octet = tab_reveived[4];
 8000610:	7c3b      	ldrb	r3, [r7, #16]
 8000612:	b2da      	uxtb	r2, r3
 8000614:	683b      	ldr	r3, [r7, #0]
 8000616:	711a      	strb	r2, [r3, #4]
	s_cmd_received->cmd = tab_reveived[5];
 8000618:	7c7b      	ldrb	r3, [r7, #17]
 800061a:	b2da      	uxtb	r2, r3
 800061c:	683b      	ldr	r3, [r7, #0]
 800061e:	715a      	strb	r2, [r3, #5]
	s_cmd_received->nb_param = tab_reveived[6];
 8000620:	7cbb      	ldrb	r3, [r7, #18]
 8000622:	b2da      	uxtb	r2, r3
 8000624:	683b      	ldr	r3, [r7, #0]
 8000626:	719a      	strb	r2, [r3, #6]
	s_cmd_received->params[0] = (uint16_t)((tab_reveived[7] << 8) + tab_reveived[8]);
 8000628:	7cfb      	ldrb	r3, [r7, #19]
 800062a:	b2db      	uxtb	r3, r3
 800062c:	b29b      	uxth	r3, r3
 800062e:	021b      	lsls	r3, r3, #8
 8000630:	b29a      	uxth	r2, r3
 8000632:	7d3b      	ldrb	r3, [r7, #20]
 8000634:	b2db      	uxtb	r3, r3
 8000636:	b29b      	uxth	r3, r3
 8000638:	4413      	add	r3, r2
 800063a:	b29a      	uxth	r2, r3
 800063c:	683b      	ldr	r3, [r7, #0]
 800063e:	811a      	strh	r2, [r3, #8]
	s_cmd_received->params[1] = (uint16_t)((tab_reveived[9] << 8) + tab_reveived[10]);
 8000640:	7d7b      	ldrb	r3, [r7, #21]
 8000642:	b2db      	uxtb	r3, r3
 8000644:	b29b      	uxth	r3, r3
 8000646:	021b      	lsls	r3, r3, #8
 8000648:	b29a      	uxth	r2, r3
 800064a:	7dbb      	ldrb	r3, [r7, #22]
 800064c:	b2db      	uxtb	r3, r3
 800064e:	b29b      	uxth	r3, r3
 8000650:	4413      	add	r3, r2
 8000652:	b29a      	uxth	r2, r3
 8000654:	683b      	ldr	r3, [r7, #0]
 8000656:	815a      	strh	r2, [r3, #10]
	s_cmd_received->params[2] = (uint16_t)((tab_reveived[11] << 8) +tab_reveived[12]);
 8000658:	7dfb      	ldrb	r3, [r7, #23]
 800065a:	b2db      	uxtb	r3, r3
 800065c:	b29b      	uxth	r3, r3
 800065e:	021b      	lsls	r3, r3, #8
 8000660:	b29a      	uxth	r2, r3
 8000662:	7e3b      	ldrb	r3, [r7, #24]
 8000664:	b2db      	uxtb	r3, r3
 8000666:	b29b      	uxth	r3, r3
 8000668:	4413      	add	r3, r2
 800066a:	b29a      	uxth	r2, r3
 800066c:	683b      	ldr	r3, [r7, #0]
 800066e:	819a      	strh	r2, [r3, #12]
	s_cmd_received->params[3] = (uint16_t)((tab_reveived[13] << 8) + tab_reveived[14]);
 8000670:	7e7b      	ldrb	r3, [r7, #25]
 8000672:	b2db      	uxtb	r3, r3
 8000674:	b29b      	uxth	r3, r3
 8000676:	021b      	lsls	r3, r3, #8
 8000678:	b29a      	uxth	r2, r3
 800067a:	7ebb      	ldrb	r3, [r7, #26]
 800067c:	b2db      	uxtb	r3, r3
 800067e:	b29b      	uxth	r3, r3
 8000680:	4413      	add	r3, r2
 8000682:	b29a      	uxth	r2, r3
 8000684:	683b      	ldr	r3, [r7, #0]
 8000686:	81da      	strh	r2, [r3, #14]

}
 8000688:	bf00      	nop
 800068a:	372c      	adds	r7, #44	; 0x2c
 800068c:	46bd      	mov	sp, r7
 800068e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000692:	4770      	bx	lr

08000694 <F_TCP_answerTotab>:

void F_TCP_answerTotab(uint8_t *array, struct tcp_answer s_cmd_answer)
{
 8000694:	b084      	sub	sp, #16
 8000696:	b480      	push	{r7}
 8000698:	b085      	sub	sp, #20
 800069a:	af00      	add	r7, sp, #0
 800069c:	6078      	str	r0, [r7, #4]
 800069e:	f107 001c 	add.w	r0, r7, #28
 80006a2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	uint8_t i = 0, j = 0;
 80006a6:	2300      	movs	r3, #0
 80006a8:	73fb      	strb	r3, [r7, #15]
 80006aa:	2300      	movs	r3, #0
 80006ac:	73bb      	strb	r3, [r7, #14]

	array[0] = (uint8_t)(0x00FF & (s_cmd_answer.id >> 24));
 80006ae:	69fb      	ldr	r3, [r7, #28]
 80006b0:	0e1b      	lsrs	r3, r3, #24
 80006b2:	b2da      	uxtb	r2, r3
 80006b4:	687b      	ldr	r3, [r7, #4]
 80006b6:	701a      	strb	r2, [r3, #0]
	array[1] = (uint8_t)(0x00FF & (s_cmd_answer.id >> 16));
 80006b8:	69fb      	ldr	r3, [r7, #28]
 80006ba:	0c1a      	lsrs	r2, r3, #16
 80006bc:	687b      	ldr	r3, [r7, #4]
 80006be:	3301      	adds	r3, #1
 80006c0:	b2d2      	uxtb	r2, r2
 80006c2:	701a      	strb	r2, [r3, #0]
	array[2] = (uint8_t)(0x00FF & (s_cmd_answer.id >> 8));
 80006c4:	69fb      	ldr	r3, [r7, #28]
 80006c6:	0a1a      	lsrs	r2, r3, #8
 80006c8:	687b      	ldr	r3, [r7, #4]
 80006ca:	3302      	adds	r3, #2
 80006cc:	b2d2      	uxtb	r2, r2
 80006ce:	701a      	strb	r2, [r3, #0]
	array[3] = (uint8_t)(0x00FF & s_cmd_answer.id);
 80006d0:	69fa      	ldr	r2, [r7, #28]
 80006d2:	687b      	ldr	r3, [r7, #4]
 80006d4:	3303      	adds	r3, #3
 80006d6:	b2d2      	uxtb	r2, r2
 80006d8:	701a      	strb	r2, [r3, #0]
	array[4] = s_cmd_answer.nb_octet;
 80006da:	687b      	ldr	r3, [r7, #4]
 80006dc:	3304      	adds	r3, #4
 80006de:	f897 2020 	ldrb.w	r2, [r7, #32]
 80006e2:	701a      	strb	r2, [r3, #0]
	array[5] = s_cmd_answer.cmd;
 80006e4:	687b      	ldr	r3, [r7, #4]
 80006e6:	3305      	adds	r3, #5
 80006e8:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 80006ec:	701a      	strb	r2, [r3, #0]
	array[6] = s_cmd_answer.code_retour;
 80006ee:	687b      	ldr	r3, [r7, #4]
 80006f0:	3306      	adds	r3, #6
 80006f2:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 80006f6:	701a      	strb	r2, [r3, #0]

	for(i=0;i<SIZE_PARAM_CMD;i++)
 80006f8:	2300      	movs	r3, #0
 80006fa:	73fb      	strb	r3, [r7, #15]
 80006fc:	e022      	b.n	8000744 <F_TCP_answerTotab+0xb0>
	{
		array[7+j] = (uint8_t)(0x00FF & (s_cmd_answer.reponse[i] >> 8));
 80006fe:	7bfb      	ldrb	r3, [r7, #15]
 8000700:	3304      	adds	r3, #4
 8000702:	005b      	lsls	r3, r3, #1
 8000704:	f107 0218 	add.w	r2, r7, #24
 8000708:	4413      	add	r3, r2
 800070a:	889b      	ldrh	r3, [r3, #4]
 800070c:	0a1b      	lsrs	r3, r3, #8
 800070e:	b29a      	uxth	r2, r3
 8000710:	7bbb      	ldrb	r3, [r7, #14]
 8000712:	3307      	adds	r3, #7
 8000714:	4619      	mov	r1, r3
 8000716:	687b      	ldr	r3, [r7, #4]
 8000718:	440b      	add	r3, r1
 800071a:	b2d2      	uxtb	r2, r2
 800071c:	701a      	strb	r2, [r3, #0]
		array[7+j+1] = (uint8_t)(0x00FF & s_cmd_answer.reponse[i]);
 800071e:	7bfb      	ldrb	r3, [r7, #15]
 8000720:	3304      	adds	r3, #4
 8000722:	005b      	lsls	r3, r3, #1
 8000724:	f107 0218 	add.w	r2, r7, #24
 8000728:	4413      	add	r3, r2
 800072a:	8899      	ldrh	r1, [r3, #4]
 800072c:	7bbb      	ldrb	r3, [r7, #14]
 800072e:	3308      	adds	r3, #8
 8000730:	687a      	ldr	r2, [r7, #4]
 8000732:	4413      	add	r3, r2
 8000734:	b2ca      	uxtb	r2, r1
 8000736:	701a      	strb	r2, [r3, #0]

		j+=2;
 8000738:	7bbb      	ldrb	r3, [r7, #14]
 800073a:	3302      	adds	r3, #2
 800073c:	73bb      	strb	r3, [r7, #14]
	for(i=0;i<SIZE_PARAM_CMD;i++)
 800073e:	7bfb      	ldrb	r3, [r7, #15]
 8000740:	3301      	adds	r3, #1
 8000742:	73fb      	strb	r3, [r7, #15]
 8000744:	7bfb      	ldrb	r3, [r7, #15]
 8000746:	2b03      	cmp	r3, #3
 8000748:	d9d9      	bls.n	80006fe <F_TCP_answerTotab+0x6a>
	}


}
 800074a:	bf00      	nop
 800074c:	3714      	adds	r7, #20
 800074e:	46bd      	mov	sp, r7
 8000750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000754:	b004      	add	sp, #16
 8000756:	4770      	bx	lr

08000758 <F_Process_Command>:

/**
 *
 */
void F_Process_Command(struct tcp_command s_cmd_received, struct tcp_answer *s_cmd_answer)
{
 8000758:	b590      	push	{r4, r7, lr}
 800075a:	b089      	sub	sp, #36	; 0x24
 800075c:	af02      	add	r7, sp, #8
 800075e:	463c      	mov	r4, r7
 8000760:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	uint8_t status = STATUS_OK;
 8000764:	2300      	movs	r3, #0
 8000766:	75fb      	strb	r3, [r7, #23]

	s_cmd_answer->id = s_cmd_received.id; 	// same ID as the received command
 8000768:	683a      	ldr	r2, [r7, #0]
 800076a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800076c:	601a      	str	r2, [r3, #0]
	s_cmd_answer->nb_octet = NB_OCTETS_CMD;
 800076e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000770:	220f      	movs	r2, #15
 8000772:	711a      	strb	r2, [r3, #4]
	s_cmd_answer->cmd = s_cmd_received.cmd;	// recall the command executed
 8000774:	797a      	ldrb	r2, [r7, #5]
 8000776:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000778:	715a      	strb	r2, [r3, #5]

	// Process the command depending on the command number
	switch(s_cmd_received.cmd)
 800077a:	797b      	ldrb	r3, [r7, #5]
 800077c:	3b01      	subs	r3, #1
 800077e:	2b0b      	cmp	r3, #11
 8000780:	d86b      	bhi.n	800085a <F_Process_Command+0x102>
 8000782:	a201      	add	r2, pc, #4	; (adr r2, 8000788 <F_Process_Command+0x30>)
 8000784:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000788:	080007b9 	.word	0x080007b9
 800078c:	080007c7 	.word	0x080007c7
 8000790:	080007d9 	.word	0x080007d9
 8000794:	080007eb 	.word	0x080007eb
 8000798:	080007f9 	.word	0x080007f9
 800079c:	08000807 	.word	0x08000807
 80007a0:	08000815 	.word	0x08000815
 80007a4:	08000823 	.word	0x08000823
 80007a8:	08000831 	.word	0x08000831
 80007ac:	0800085b 	.word	0x0800085b
 80007b0:	0800083f 	.word	0x0800083f
 80007b4:	0800084d 	.word	0x0800084d
	{
		// Get info
		case CMD_INFO:
			F_Cmd_Info(s_cmd_received, s_cmd_answer);
 80007b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80007ba:	9300      	str	r3, [sp, #0]
 80007bc:	463b      	mov	r3, r7
 80007be:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80007c0:	f000 f850 	bl	8000864 <F_Cmd_Info>
			break;
 80007c4:	e04a      	b.n	800085c <F_Process_Command+0x104>

		// Set LED
		case CMD_SET_LED:
			status = F_Cmd_SetLED(s_cmd_received, s_cmd_answer);
 80007c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80007c8:	9300      	str	r3, [sp, #0]
 80007ca:	463b      	mov	r3, r7
 80007cc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80007ce:	f000 f873 	bl	80008b8 <F_Cmd_SetLED>
 80007d2:	4603      	mov	r3, r0
 80007d4:	75fb      	strb	r3, [r7, #23]
			break;
 80007d6:	e041      	b.n	800085c <F_Process_Command+0x104>

		// Get LED
		case CMD_GET_LED:
			status = F_Cmd_GetLED(s_cmd_received, s_cmd_answer);
 80007d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80007da:	9300      	str	r3, [sp, #0]
 80007dc:	463b      	mov	r3, r7
 80007de:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80007e0:	f000 f887 	bl	80008f2 <F_Cmd_GetLED>
 80007e4:	4603      	mov	r3, r0
 80007e6:	75fb      	strb	r3, [r7, #23]
			break;
 80007e8:	e038      	b.n	800085c <F_Process_Command+0x104>
		// Get distances from sensors
		case CMD_GET_DISTANCES:
			F_Cmd_GetDistance(s_cmd_received, s_cmd_answer);
 80007ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80007ec:	9300      	str	r3, [sp, #0]
 80007ee:	463b      	mov	r3, r7
 80007f0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80007f2:	f000 f88f 	bl	8000914 <F_Cmd_GetDistance>
			break;
 80007f6:	e031      	b.n	800085c <F_Process_Command+0x104>

		// Set robot's position
		case CMD_SET_POSITION:
			F_Cmd_SetPosition(s_cmd_received, s_cmd_answer);
 80007f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80007fa:	9300      	str	r3, [sp, #0]
 80007fc:	463b      	mov	r3, r7
 80007fe:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000800:	f000 f8f1 	bl	80009e6 <F_Cmd_SetPosition>
			break;
 8000804:	e02a      	b.n	800085c <F_Process_Command+0x104>

		// get robot's position
		case CMD_GET_POSITION:
			F_Cmd_GetPosition(s_cmd_received, s_cmd_answer);
 8000806:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000808:	9300      	str	r3, [sp, #0]
 800080a:	463b      	mov	r3, r7
 800080c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800080e:	f000 f8d9 	bl	80009c4 <F_Cmd_GetPosition>
			break;
 8000812:	e023      	b.n	800085c <F_Process_Command+0x104>

		// Start navigation
		case CMD_GO:
			F_Cmd_StartStopRegulation(s_cmd_received, s_cmd_answer);
 8000814:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000816:	9300      	str	r3, [sp, #0]
 8000818:	463b      	mov	r3, r7
 800081a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800081c:	f000 f91e 	bl	8000a5c <F_Cmd_StartStopRegulation>
			break;
 8000820:	e01c      	b.n	800085c <F_Process_Command+0x104>

		// Add a new point to the list of points
		case CMD_ADD_POINT:
			F_Cmd_AddWayPoint(s_cmd_received, s_cmd_answer);
 8000822:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000824:	9300      	str	r3, [sp, #0]
 8000826:	463b      	mov	r3, r7
 8000828:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800082a:	f000 f8f9 	bl	8000a20 <F_Cmd_AddWayPoint>
			break;
 800082e:	e015      	b.n	800085c <F_Process_Command+0x104>

		// Remove one point from the list of points
		case CMD_RESET_LIST_WAYPOINTS:
			F_Cmd_ResetWayPointsList(s_cmd_received, s_cmd_answer);
 8000830:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000832:	9300      	str	r3, [sp, #0]
 8000834:	463b      	mov	r3, r7
 8000836:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000838:	f000 f92a 	bl	8000a90 <F_Cmd_ResetWayPointsList>
			break;
 800083c:	e00e      	b.n	800085c <F_Process_Command+0x104>
		case CMD_GET_LIST_POINTS:
			break;

		// Get the list of points
			case CMD_GET_TIRETTE:
				F_Cmd_GetTirette(s_cmd_received, s_cmd_answer);
 800083e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000840:	9300      	str	r3, [sp, #0]
 8000842:	463b      	mov	r3, r7
 8000844:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000846:	f000 f88f 	bl	8000968 <F_Cmd_GetTirette>
			break;
 800084a:	e007      	b.n	800085c <F_Process_Command+0x104>

		// Get the list of points
			case CMD_MOVE_SERVO:
				F_Cmd_MoveServo(s_cmd_received, s_cmd_answer);
 800084c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800084e:	9300      	str	r3, [sp, #0]
 8000850:	463b      	mov	r3, r7
 8000852:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000854:	f000 f899 	bl	800098a <F_Cmd_MoveServo>
			break;
 8000858:	e000      	b.n	800085c <F_Process_Command+0x104>


		// Error, unknown command
		default:
			break;
 800085a:	bf00      	nop

	}


}
 800085c:	bf00      	nop
 800085e:	371c      	adds	r7, #28
 8000860:	46bd      	mov	sp, r7
 8000862:	bd90      	pop	{r4, r7, pc}

08000864 <F_Cmd_Info>:
       - bit 0 : Distance 1 & Distance 2 & Distance 3 ==> = 1 if distance < 30cm otherwise 0


 */
uint8_t F_Cmd_Info(Tcp_command s_cmd_received, Tcp_answer *s_cmd_answer)
{
 8000864:	b490      	push	{r4, r7}
 8000866:	b086      	sub	sp, #24
 8000868:	af00      	add	r7, sp, #0
 800086a:	463c      	mov	r4, r7
 800086c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	uint8_t status = STATUS_OK;
 8000870:	2300      	movs	r3, #0
 8000872:	75fb      	strb	r3, [r7, #23]
	uint8_t distance_warning = 0;
 8000874:	2300      	movs	r3, #0
 8000876:	75bb      	strb	r3, [r7, #22]
	if((distance_avant_1 < DISTANCE_WARNING) || (distance_avant_2 < DISTANCE_WARNING) || (distance_avant_3 < DISTANCE_WARNING))
 8000878:	4b0c      	ldr	r3, [pc, #48]	; (80008ac <F_Cmd_Info+0x48>)
 800087a:	881b      	ldrh	r3, [r3, #0]
 800087c:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8000880:	d309      	bcc.n	8000896 <F_Cmd_Info+0x32>
 8000882:	4b0b      	ldr	r3, [pc, #44]	; (80008b0 <F_Cmd_Info+0x4c>)
 8000884:	881b      	ldrh	r3, [r3, #0]
 8000886:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 800088a:	d304      	bcc.n	8000896 <F_Cmd_Info+0x32>
 800088c:	4b09      	ldr	r3, [pc, #36]	; (80008b4 <F_Cmd_Info+0x50>)
 800088e:	881b      	ldrh	r3, [r3, #0]
 8000890:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8000894:	d201      	bcs.n	800089a <F_Cmd_Info+0x36>
	{
		distance_warning = 1;
 8000896:	2301      	movs	r3, #1
 8000898:	75bb      	strb	r3, [r7, #22]
	}


	s_cmd_answer->code_retour = status;
 800089a:	6a3b      	ldr	r3, [r7, #32]
 800089c:	7dfa      	ldrb	r2, [r7, #23]
 800089e:	719a      	strb	r2, [r3, #6]
	/*s_cmd_answer->reponse[0] = (int16_t)(g_estimate.x);
	s_cmd_answer->reponse[1] = (int16_t)(g_estimate.y);
	s_cmd_answer->reponse[2] = (int16_t)(g_estimate.teta*1000);
	s_cmd_answer->reponse[3] = (uint16_t)((g_nbPoints << 1) | (0x01 & distance_warning));
*/
	return status;
 80008a0:	7dfb      	ldrb	r3, [r7, #23]

}
 80008a2:	4618      	mov	r0, r3
 80008a4:	3718      	adds	r7, #24
 80008a6:	46bd      	mov	sp, r7
 80008a8:	bc90      	pop	{r4, r7}
 80008aa:	4770      	bx	lr
 80008ac:	2000020c 	.word	0x2000020c
 80008b0:	2000020e 	.word	0x2000020e
 80008b4:	20000210 	.word	0x20000210

080008b8 <F_Cmd_SetLED>:

/**
 * Set the on board LEDs
 */
uint8_t F_Cmd_SetLED(struct tcp_command s_cmd_received, struct tcp_answer *s_cmd_answer)
{
 80008b8:	b490      	push	{r4, r7}
 80008ba:	b086      	sub	sp, #24
 80008bc:	af00      	add	r7, sp, #0
 80008be:	463c      	mov	r4, r7
 80008c0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	uint8_t status = STATUS_OK;
 80008c4:	2300      	movs	r3, #0
 80008c6:	75fb      	strb	r3, [r7, #23]
	else
	{
		status = STATUS_ERROR_PARAM;
	}
*/
	s_cmd_answer->code_retour = status;
 80008c8:	6a3b      	ldr	r3, [r7, #32]
 80008ca:	7dfa      	ldrb	r2, [r7, #23]
 80008cc:	719a      	strb	r2, [r3, #6]
	s_cmd_answer->reponse[0] = 0;
 80008ce:	6a3b      	ldr	r3, [r7, #32]
 80008d0:	2200      	movs	r2, #0
 80008d2:	811a      	strh	r2, [r3, #8]
	s_cmd_answer->reponse[1] = 0;
 80008d4:	6a3b      	ldr	r3, [r7, #32]
 80008d6:	2200      	movs	r2, #0
 80008d8:	815a      	strh	r2, [r3, #10]
	s_cmd_answer->reponse[2] = 0;
 80008da:	6a3b      	ldr	r3, [r7, #32]
 80008dc:	2200      	movs	r2, #0
 80008de:	819a      	strh	r2, [r3, #12]
	s_cmd_answer->reponse[3] = 0;
 80008e0:	6a3b      	ldr	r3, [r7, #32]
 80008e2:	2200      	movs	r2, #0
 80008e4:	81da      	strh	r2, [r3, #14]

	return status;
 80008e6:	7dfb      	ldrb	r3, [r7, #23]
}
 80008e8:	4618      	mov	r0, r3
 80008ea:	3718      	adds	r7, #24
 80008ec:	46bd      	mov	sp, r7
 80008ee:	bc90      	pop	{r4, r7}
 80008f0:	4770      	bx	lr

080008f2 <F_Cmd_GetLED>:

/**
 * Set the on board LEDs
 */
uint8_t F_Cmd_GetLED(struct tcp_command s_cmd_received, struct tcp_answer *s_cmd_answer)
{
 80008f2:	b490      	push	{r4, r7}
 80008f4:	b086      	sub	sp, #24
 80008f6:	af00      	add	r7, sp, #0
 80008f8:	463c      	mov	r4, r7
 80008fa:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	uint8_t status = STATUS_OK;
 80008fe:	2300      	movs	r3, #0
 8000900:	75fb      	strb	r3, [r7, #23]


	s_cmd_answer->code_retour = status;
 8000902:	6a3b      	ldr	r3, [r7, #32]
 8000904:	7dfa      	ldrb	r2, [r7, #23]
 8000906:	719a      	strb	r2, [r3, #6]
	/*s_cmd_answer->reponse[0] = (((GPIOB->ODR & LED_Red) >> 14) << 2) + ((GPIOB->ODR & LED_Green) << 1) + (((GPIOB->ODR & LED_Blue) >> 7));
	s_cmd_answer->reponse[1] = 0;
	s_cmd_answer->reponse[2] = 0;
	s_cmd_answer->reponse[3] = 0;
*/
	return status;
 8000908:	7dfb      	ldrb	r3, [r7, #23]
}
 800090a:	4618      	mov	r0, r3
 800090c:	3718      	adds	r7, #24
 800090e:	46bd      	mov	sp, r7
 8000910:	bc90      	pop	{r4, r7}
 8000912:	4770      	bx	lr

08000914 <F_Cmd_GetDistance>:

/**
 * Set the on board LEDs
 */
uint8_t F_Cmd_GetDistance(struct tcp_command s_cmd_received, struct tcp_answer *s_cmd_answer)
{
 8000914:	b490      	push	{r4, r7}
 8000916:	b086      	sub	sp, #24
 8000918:	af00      	add	r7, sp, #0
 800091a:	463c      	mov	r4, r7
 800091c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	uint8_t status = STATUS_OK;
 8000920:	2300      	movs	r3, #0
 8000922:	75fb      	strb	r3, [r7, #23]

	s_cmd_answer->code_retour = status;
 8000924:	6a3b      	ldr	r3, [r7, #32]
 8000926:	7dfa      	ldrb	r2, [r7, #23]
 8000928:	719a      	strb	r2, [r3, #6]
	s_cmd_answer->reponse[0] = distance_avant_1;
 800092a:	4b0b      	ldr	r3, [pc, #44]	; (8000958 <F_Cmd_GetDistance+0x44>)
 800092c:	881a      	ldrh	r2, [r3, #0]
 800092e:	6a3b      	ldr	r3, [r7, #32]
 8000930:	811a      	strh	r2, [r3, #8]
	s_cmd_answer->reponse[1] = distance_avant_2;
 8000932:	4b0a      	ldr	r3, [pc, #40]	; (800095c <F_Cmd_GetDistance+0x48>)
 8000934:	881a      	ldrh	r2, [r3, #0]
 8000936:	6a3b      	ldr	r3, [r7, #32]
 8000938:	815a      	strh	r2, [r3, #10]
	s_cmd_answer->reponse[2] = distance_avant_3;
 800093a:	4b09      	ldr	r3, [pc, #36]	; (8000960 <F_Cmd_GetDistance+0x4c>)
 800093c:	881a      	ldrh	r2, [r3, #0]
 800093e:	6a3b      	ldr	r3, [r7, #32]
 8000940:	819a      	strh	r2, [r3, #12]
	s_cmd_answer->reponse[3] = distance_arriere_1;
 8000942:	4b08      	ldr	r3, [pc, #32]	; (8000964 <F_Cmd_GetDistance+0x50>)
 8000944:	881a      	ldrh	r2, [r3, #0]
 8000946:	6a3b      	ldr	r3, [r7, #32]
 8000948:	81da      	strh	r2, [r3, #14]

	return status;
 800094a:	7dfb      	ldrb	r3, [r7, #23]
}
 800094c:	4618      	mov	r0, r3
 800094e:	3718      	adds	r7, #24
 8000950:	46bd      	mov	sp, r7
 8000952:	bc90      	pop	{r4, r7}
 8000954:	4770      	bx	lr
 8000956:	bf00      	nop
 8000958:	2000020c 	.word	0x2000020c
 800095c:	2000020e 	.word	0x2000020e
 8000960:	20000210 	.word	0x20000210
 8000964:	20000212 	.word	0x20000212

08000968 <F_Cmd_GetTirette>:

/**
 * Set the on board LEDs
 */
uint8_t F_Cmd_GetTirette(struct tcp_command s_cmd_received, struct tcp_answer *s_cmd_answer)
{
 8000968:	b490      	push	{r4, r7}
 800096a:	b086      	sub	sp, #24
 800096c:	af00      	add	r7, sp, #0
 800096e:	463c      	mov	r4, r7
 8000970:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	uint8_t status = STATUS_OK;
 8000974:	2300      	movs	r3, #0
 8000976:	75fb      	strb	r3, [r7, #23]

	s_cmd_answer->code_retour = status;
 8000978:	6a3b      	ldr	r3, [r7, #32]
 800097a:	7dfa      	ldrb	r2, [r7, #23]
 800097c:	719a      	strb	r2, [r3, #6]
	/*s_cmd_answer->reponse[0] = (uint16_t)(F_GPIO_GetTirette());
	s_cmd_answer->reponse[1] = 0;
	s_cmd_answer->reponse[2] = 0;
	s_cmd_answer->reponse[3] = 0;
*/
	return status;
 800097e:	7dfb      	ldrb	r3, [r7, #23]
}
 8000980:	4618      	mov	r0, r3
 8000982:	3718      	adds	r7, #24
 8000984:	46bd      	mov	sp, r7
 8000986:	bc90      	pop	{r4, r7}
 8000988:	4770      	bx	lr

0800098a <F_Cmd_MoveServo>:

/**
 * Set the on board LEDs
 */
uint8_t F_Cmd_MoveServo(struct tcp_command s_cmd_received, struct tcp_answer *s_cmd_answer)
{
 800098a:	b490      	push	{r4, r7}
 800098c:	b086      	sub	sp, #24
 800098e:	af00      	add	r7, sp, #0
 8000990:	463c      	mov	r4, r7
 8000992:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	uint8_t status = STATUS_OK;
 8000996:	2300      	movs	r3, #0
 8000998:	75fb      	strb	r3, [r7, #23]
	else
	{
	//	F_Servo_Ouvrir();
	}

	s_cmd_answer->code_retour = status;
 800099a:	6a3b      	ldr	r3, [r7, #32]
 800099c:	7dfa      	ldrb	r2, [r7, #23]
 800099e:	719a      	strb	r2, [r3, #6]
	s_cmd_answer->reponse[0] = 0;
 80009a0:	6a3b      	ldr	r3, [r7, #32]
 80009a2:	2200      	movs	r2, #0
 80009a4:	811a      	strh	r2, [r3, #8]
	s_cmd_answer->reponse[1] = 0;
 80009a6:	6a3b      	ldr	r3, [r7, #32]
 80009a8:	2200      	movs	r2, #0
 80009aa:	815a      	strh	r2, [r3, #10]
	s_cmd_answer->reponse[2] = 0;
 80009ac:	6a3b      	ldr	r3, [r7, #32]
 80009ae:	2200      	movs	r2, #0
 80009b0:	819a      	strh	r2, [r3, #12]
	s_cmd_answer->reponse[3] = 0;
 80009b2:	6a3b      	ldr	r3, [r7, #32]
 80009b4:	2200      	movs	r2, #0
 80009b6:	81da      	strh	r2, [r3, #14]

	return status;
 80009b8:	7dfb      	ldrb	r3, [r7, #23]
}
 80009ba:	4618      	mov	r0, r3
 80009bc:	3718      	adds	r7, #24
 80009be:	46bd      	mov	sp, r7
 80009c0:	bc90      	pop	{r4, r7}
 80009c2:	4770      	bx	lr

080009c4 <F_Cmd_GetPosition>:

/**
 * Set the on board LEDs
 */
uint8_t F_Cmd_GetPosition(struct tcp_command s_cmd_received, struct tcp_answer *s_cmd_answer)
{
 80009c4:	b490      	push	{r4, r7}
 80009c6:	b086      	sub	sp, #24
 80009c8:	af00      	add	r7, sp, #0
 80009ca:	463c      	mov	r4, r7
 80009cc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	uint8_t status = STATUS_OK;
 80009d0:	2300      	movs	r3, #0
 80009d2:	75fb      	strb	r3, [r7, #23]

	s_cmd_answer->code_retour = status;
 80009d4:	6a3b      	ldr	r3, [r7, #32]
 80009d6:	7dfa      	ldrb	r2, [r7, #23]
 80009d8:	719a      	strb	r2, [r3, #6]
/*	s_cmd_answer->reponse[0] = (int16_t)(g_estimate.x);
	s_cmd_answer->reponse[1] = (int16_t)(g_estimate.y);
	s_cmd_answer->reponse[2] = (int16_t)(g_estimate.teta*1000);
	s_cmd_answer->reponse[3] = 0;
*/
	return status;
 80009da:	7dfb      	ldrb	r3, [r7, #23]
}
 80009dc:	4618      	mov	r0, r3
 80009de:	3718      	adds	r7, #24
 80009e0:	46bd      	mov	sp, r7
 80009e2:	bc90      	pop	{r4, r7}
 80009e4:	4770      	bx	lr

080009e6 <F_Cmd_SetPosition>:

/**
 * Set the position of the Robot
 */
uint8_t F_Cmd_SetPosition(struct tcp_command s_cmd_received, struct tcp_answer *s_cmd_answer)
{
 80009e6:	b490      	push	{r4, r7}
 80009e8:	b086      	sub	sp, #24
 80009ea:	af00      	add	r7, sp, #0
 80009ec:	463c      	mov	r4, r7
 80009ee:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	uint8_t status = STATUS_OK;
 80009f2:	2300      	movs	r3, #0
 80009f4:	75fb      	strb	r3, [r7, #23]

//	F_QEI_setPosition((int16_t)s_cmd_received.params[0], (int16_t)s_cmd_received.params[1], (int16_t)s_cmd_received.params[2]);

	s_cmd_answer->code_retour = status;
 80009f6:	6a3b      	ldr	r3, [r7, #32]
 80009f8:	7dfa      	ldrb	r2, [r7, #23]
 80009fa:	719a      	strb	r2, [r3, #6]
	s_cmd_answer->reponse[0] = 0;
 80009fc:	6a3b      	ldr	r3, [r7, #32]
 80009fe:	2200      	movs	r2, #0
 8000a00:	811a      	strh	r2, [r3, #8]
	s_cmd_answer->reponse[1] = 0;
 8000a02:	6a3b      	ldr	r3, [r7, #32]
 8000a04:	2200      	movs	r2, #0
 8000a06:	815a      	strh	r2, [r3, #10]
	s_cmd_answer->reponse[2] = 0;
 8000a08:	6a3b      	ldr	r3, [r7, #32]
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	819a      	strh	r2, [r3, #12]
	s_cmd_answer->reponse[3] = 0;
 8000a0e:	6a3b      	ldr	r3, [r7, #32]
 8000a10:	2200      	movs	r2, #0
 8000a12:	81da      	strh	r2, [r3, #14]

	return status;
 8000a14:	7dfb      	ldrb	r3, [r7, #23]
}
 8000a16:	4618      	mov	r0, r3
 8000a18:	3718      	adds	r7, #24
 8000a1a:	46bd      	mov	sp, r7
 8000a1c:	bc90      	pop	{r4, r7}
 8000a1e:	4770      	bx	lr

08000a20 <F_Cmd_AddWayPoint>:

/**
 * Add a new WayPoint to the list of WayPoints
 */
uint8_t F_Cmd_AddWayPoint(struct tcp_command s_cmd_received, struct tcp_answer *s_cmd_answer)
{
 8000a20:	b490      	push	{r4, r7}
 8000a22:	b086      	sub	sp, #24
 8000a24:	af00      	add	r7, sp, #0
 8000a26:	463c      	mov	r4, r7
 8000a28:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	uint8_t status = STATUS_OK;
 8000a2c:	2300      	movs	r3, #0
 8000a2e:	75fb      	strb	r3, [r7, #23]

	//status = F_AUTO_AddTargetPoint((float)((int16_t)s_cmd_received.params[0]) , (float)((int16_t)s_cmd_received.params[1]), (float)((int16_t)s_cmd_received.params[2]));


	s_cmd_answer->code_retour = status;
 8000a30:	6a3b      	ldr	r3, [r7, #32]
 8000a32:	7dfa      	ldrb	r2, [r7, #23]
 8000a34:	719a      	strb	r2, [r3, #6]
	s_cmd_answer->reponse[0] = status;
 8000a36:	7dfb      	ldrb	r3, [r7, #23]
 8000a38:	b29a      	uxth	r2, r3
 8000a3a:	6a3b      	ldr	r3, [r7, #32]
 8000a3c:	811a      	strh	r2, [r3, #8]
	s_cmd_answer->reponse[1] = 0;
 8000a3e:	6a3b      	ldr	r3, [r7, #32]
 8000a40:	2200      	movs	r2, #0
 8000a42:	815a      	strh	r2, [r3, #10]
	s_cmd_answer->reponse[2] = 0;
 8000a44:	6a3b      	ldr	r3, [r7, #32]
 8000a46:	2200      	movs	r2, #0
 8000a48:	819a      	strh	r2, [r3, #12]
	s_cmd_answer->reponse[3] = 0;
 8000a4a:	6a3b      	ldr	r3, [r7, #32]
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	81da      	strh	r2, [r3, #14]

	return status;
 8000a50:	7dfb      	ldrb	r3, [r7, #23]
}
 8000a52:	4618      	mov	r0, r3
 8000a54:	3718      	adds	r7, #24
 8000a56:	46bd      	mov	sp, r7
 8000a58:	bc90      	pop	{r4, r7}
 8000a5a:	4770      	bx	lr

08000a5c <F_Cmd_StartStopRegulation>:

/**
 * Start / Stop the regulation
 */
uint8_t F_Cmd_StartStopRegulation(struct tcp_command s_cmd_received, struct tcp_answer *s_cmd_answer)
{
 8000a5c:	b490      	push	{r4, r7}
 8000a5e:	b086      	sub	sp, #24
 8000a60:	af00      	add	r7, sp, #0
 8000a62:	463c      	mov	r4, r7
 8000a64:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	uint8_t status = STATUS_OK;
 8000a68:	2300      	movs	r3, #0
 8000a6a:	75fb      	strb	r3, [r7, #23]
	else
	{
		//F_AUTO_Disable();
	}

	s_cmd_answer->code_retour = status;
 8000a6c:	6a3b      	ldr	r3, [r7, #32]
 8000a6e:	7dfa      	ldrb	r2, [r7, #23]
 8000a70:	719a      	strb	r2, [r3, #6]
	//s_cmd_answer->reponse[0] = (uint16_t)g_enableAUTO;
	s_cmd_answer->reponse[1] = 0;
 8000a72:	6a3b      	ldr	r3, [r7, #32]
 8000a74:	2200      	movs	r2, #0
 8000a76:	815a      	strh	r2, [r3, #10]
	s_cmd_answer->reponse[2] = 0;
 8000a78:	6a3b      	ldr	r3, [r7, #32]
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	819a      	strh	r2, [r3, #12]
	s_cmd_answer->reponse[3] = 0;
 8000a7e:	6a3b      	ldr	r3, [r7, #32]
 8000a80:	2200      	movs	r2, #0
 8000a82:	81da      	strh	r2, [r3, #14]

	return status;
 8000a84:	7dfb      	ldrb	r3, [r7, #23]
}
 8000a86:	4618      	mov	r0, r3
 8000a88:	3718      	adds	r7, #24
 8000a8a:	46bd      	mov	sp, r7
 8000a8c:	bc90      	pop	{r4, r7}
 8000a8e:	4770      	bx	lr

08000a90 <F_Cmd_ResetWayPointsList>:

/**
 * Reset the list of WayPoints
 */
uint8_t F_Cmd_ResetWayPointsList(struct tcp_command s_cmd_received, struct tcp_answer *s_cmd_answer)
{
 8000a90:	b490      	push	{r4, r7}
 8000a92:	b086      	sub	sp, #24
 8000a94:	af00      	add	r7, sp, #0
 8000a96:	463c      	mov	r4, r7
 8000a98:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	uint8_t status = STATUS_OK;
 8000a9c:	2300      	movs	r3, #0
 8000a9e:	75fb      	strb	r3, [r7, #23]

//	F_AUTO_ResetTargetList();

	s_cmd_answer->code_retour = status;
 8000aa0:	6a3b      	ldr	r3, [r7, #32]
 8000aa2:	7dfa      	ldrb	r2, [r7, #23]
 8000aa4:	719a      	strb	r2, [r3, #6]
	s_cmd_answer->reponse[0] = 0;
 8000aa6:	6a3b      	ldr	r3, [r7, #32]
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	811a      	strh	r2, [r3, #8]
	s_cmd_answer->reponse[1] = 0;
 8000aac:	6a3b      	ldr	r3, [r7, #32]
 8000aae:	2200      	movs	r2, #0
 8000ab0:	815a      	strh	r2, [r3, #10]
	s_cmd_answer->reponse[2] = 0;
 8000ab2:	6a3b      	ldr	r3, [r7, #32]
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	819a      	strh	r2, [r3, #12]
	s_cmd_answer->reponse[3] = 0;
 8000ab8:	6a3b      	ldr	r3, [r7, #32]
 8000aba:	2200      	movs	r2, #0
 8000abc:	81da      	strh	r2, [r3, #14]

	return status;
 8000abe:	7dfb      	ldrb	r3, [r7, #23]
}
 8000ac0:	4618      	mov	r0, r3
 8000ac2:	3718      	adds	r7, #24
 8000ac4:	46bd      	mov	sp, r7
 8000ac6:	bc90      	pop	{r4, r7}
 8000ac8:	4770      	bx	lr
	...

08000acc <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];
  
void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000acc:	b480      	push	{r7}
 8000ace:	b085      	sub	sp, #20
 8000ad0:	af00      	add	r7, sp, #0
 8000ad2:	60f8      	str	r0, [r7, #12]
 8000ad4:	60b9      	str	r1, [r7, #8]
 8000ad6:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000ad8:	68fb      	ldr	r3, [r7, #12]
 8000ada:	4a07      	ldr	r2, [pc, #28]	; (8000af8 <vApplicationGetIdleTaskMemory+0x2c>)
 8000adc:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000ade:	68bb      	ldr	r3, [r7, #8]
 8000ae0:	4a06      	ldr	r2, [pc, #24]	; (8000afc <vApplicationGetIdleTaskMemory+0x30>)
 8000ae2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	2280      	movs	r2, #128	; 0x80
 8000ae8:	601a      	str	r2, [r3, #0]
  /* place for user code */
}                   
 8000aea:	bf00      	nop
 8000aec:	3714      	adds	r7, #20
 8000aee:	46bd      	mov	sp, r7
 8000af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop
 8000af8:	20000214 	.word	0x20000214
 8000afc:	20000268 	.word	0x20000268

08000b00 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000b00:	b5b0      	push	{r4, r5, r7, lr}
 8000b02:	b0a4      	sub	sp, #144	; 0x90
 8000b04:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 256);
 8000b06:	4b30      	ldr	r3, [pc, #192]	; (8000bc8 <MX_FREERTOS_Init+0xc8>)
 8000b08:	f107 0474 	add.w	r4, r7, #116	; 0x74
 8000b0c:	461d      	mov	r5, r3
 8000b0e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000b10:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000b12:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000b16:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000b1a:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8000b1e:	2100      	movs	r1, #0
 8000b20:	4618      	mov	r0, r3
 8000b22:	f008 faaa 	bl	800907a <osThreadCreate>
 8000b26:	4602      	mov	r2, r0
 8000b28:	4b28      	ldr	r3, [pc, #160]	; (8000bcc <MX_FREERTOS_Init+0xcc>)
 8000b2a:	601a      	str	r2, [r3, #0]

  /* definition and creation of MotionRegTask */
  osThreadDef(MotionRegTask, StartMotionRegTask, osPriorityHigh, 0, 256);
 8000b2c:	4b28      	ldr	r3, [pc, #160]	; (8000bd0 <MX_FREERTOS_Init+0xd0>)
 8000b2e:	f107 0458 	add.w	r4, r7, #88	; 0x58
 8000b32:	461d      	mov	r5, r3
 8000b34:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000b36:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000b38:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000b3c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  MotionRegTaskHandle = osThreadCreate(osThread(MotionRegTask), NULL);
 8000b40:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000b44:	2100      	movs	r1, #0
 8000b46:	4618      	mov	r0, r3
 8000b48:	f008 fa97 	bl	800907a <osThreadCreate>
 8000b4c:	4602      	mov	r2, r0
 8000b4e:	4b21      	ldr	r3, [pc, #132]	; (8000bd4 <MX_FREERTOS_Init+0xd4>)
 8000b50:	601a      	str	r2, [r3, #0]

  /* definition and creation of OdometryRegTask */
  osThreadDef(OdometryRegTask, StartOdometryRegTask, osPriorityRealtime, 0, 256);
 8000b52:	4b21      	ldr	r3, [pc, #132]	; (8000bd8 <MX_FREERTOS_Init+0xd8>)
 8000b54:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 8000b58:	461d      	mov	r5, r3
 8000b5a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000b5c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000b5e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000b62:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  OdometryRegTaskHandle = osThreadCreate(osThread(OdometryRegTask), NULL);
 8000b66:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000b6a:	2100      	movs	r1, #0
 8000b6c:	4618      	mov	r0, r3
 8000b6e:	f008 fa84 	bl	800907a <osThreadCreate>
 8000b72:	4602      	mov	r2, r0
 8000b74:	4b19      	ldr	r3, [pc, #100]	; (8000bdc <MX_FREERTOS_Init+0xdc>)
 8000b76:	601a      	str	r2, [r3, #0]

  /* definition and creation of SensorsTask */
  osThreadDef(SensorsTask, StartSensorsTask, osPriorityNormal, 0, 256);
 8000b78:	4b19      	ldr	r3, [pc, #100]	; (8000be0 <MX_FREERTOS_Init+0xe0>)
 8000b7a:	f107 0420 	add.w	r4, r7, #32
 8000b7e:	461d      	mov	r5, r3
 8000b80:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000b82:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000b84:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000b88:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  SensorsTaskHandle = osThreadCreate(osThread(SensorsTask), NULL);
 8000b8c:	f107 0320 	add.w	r3, r7, #32
 8000b90:	2100      	movs	r1, #0
 8000b92:	4618      	mov	r0, r3
 8000b94:	f008 fa71 	bl	800907a <osThreadCreate>
 8000b98:	4602      	mov	r2, r0
 8000b9a:	4b12      	ldr	r3, [pc, #72]	; (8000be4 <MX_FREERTOS_Init+0xe4>)
 8000b9c:	601a      	str	r2, [r3, #0]

  /* definition and creation of DebugTask */
  osThreadDef(DebugTask, StartDebugTask, osPriorityNormal, 0, 256);
 8000b9e:	4b12      	ldr	r3, [pc, #72]	; (8000be8 <MX_FREERTOS_Init+0xe8>)
 8000ba0:	1d3c      	adds	r4, r7, #4
 8000ba2:	461d      	mov	r5, r3
 8000ba4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000ba6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000ba8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000bac:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  DebugTaskHandle = osThreadCreate(osThread(DebugTask), NULL);
 8000bb0:	1d3b      	adds	r3, r7, #4
 8000bb2:	2100      	movs	r1, #0
 8000bb4:	4618      	mov	r0, r3
 8000bb6:	f008 fa60 	bl	800907a <osThreadCreate>
 8000bba:	4602      	mov	r2, r0
 8000bbc:	4b0b      	ldr	r3, [pc, #44]	; (8000bec <MX_FREERTOS_Init+0xec>)
 8000bbe:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 8000bc0:	bf00      	nop
 8000bc2:	3790      	adds	r7, #144	; 0x90
 8000bc4:	46bd      	mov	sp, r7
 8000bc6:	bdb0      	pop	{r4, r5, r7, pc}
 8000bc8:	0801934c 	.word	0x0801934c
 8000bcc:	20004364 	.word	0x20004364
 8000bd0:	08019378 	.word	0x08019378
 8000bd4:	20004374 	.word	0x20004374
 8000bd8:	080193a4 	.word	0x080193a4
 8000bdc:	2000436c 	.word	0x2000436c
 8000be0:	080193cc 	.word	0x080193cc
 8000be4:	20004370 	.word	0x20004370
 8000be8:	080193f4 	.word	0x080193f4
 8000bec:	20004368 	.word	0x20004368

08000bf0 <StartDefaultTask>:
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	b082      	sub	sp, #8
 8000bf4:	af00      	add	r7, sp, #0
 8000bf6:	6078      	str	r0, [r7, #4]
  /* init code for LWIP */
  MX_LWIP_Init();
 8000bf8:	f006 fb76 	bl	80072e8 <MX_LWIP_Init>

  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 8000bfc:	f016 ff4c 	bl	8017a98 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN StartDefaultTask */

  tcp_server_init();
 8000c00:	f000 fd70 	bl	80016e4 <tcp_server_init>

  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000c04:	2001      	movs	r0, #1
 8000c06:	f008 fa84 	bl	8009112 <osDelay>
 8000c0a:	e7fb      	b.n	8000c04 <StartDefaultTask+0x14>

08000c0c <StartMotionRegTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartMotionRegTask */
void StartMotionRegTask(void const * argument)
{
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	b082      	sub	sp, #8
 8000c10:	af00      	add	r7, sp, #0
 8000c12:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartMotionRegTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000c14:	2001      	movs	r0, #1
 8000c16:	f008 fa7c 	bl	8009112 <osDelay>
 8000c1a:	e7fb      	b.n	8000c14 <StartMotionRegTask+0x8>

08000c1c <StartOdometryRegTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartOdometryRegTask */
void StartOdometryRegTask(void const * argument)
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	b082      	sub	sp, #8
 8000c20:	af00      	add	r7, sp, #0
 8000c22:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartOdometryRegTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000c24:	2001      	movs	r0, #1
 8000c26:	f008 fa74 	bl	8009112 <osDelay>
 8000c2a:	e7fb      	b.n	8000c24 <StartOdometryRegTask+0x8>

08000c2c <StartSensorsTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartSensorsTask */
void StartSensorsTask(void const * argument)
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	b082      	sub	sp, #8
 8000c30:	af00      	add	r7, sp, #0
 8000c32:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartSensorsTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000c34:	2001      	movs	r0, #1
 8000c36:	f008 fa6c 	bl	8009112 <osDelay>
 8000c3a:	e7fb      	b.n	8000c34 <StartSensorsTask+0x8>

08000c3c <StartDebugTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartDebugTask */
void StartDebugTask(void const * argument)
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	b082      	sub	sp, #8
 8000c40:	af00      	add	r7, sp, #0
 8000c42:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDebugTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000c44:	2001      	movs	r0, #1
 8000c46:	f008 fa64 	bl	8009112 <osDelay>
 8000c4a:	e7fb      	b.n	8000c44 <StartDebugTask+0x8>

08000c4c <MX_GPIO_Init>:
     PB3   ------> S_TIM2_CH2
     PB4   ------> S_TIM3_CH1
     PB5   ------> S_TIM3_CH2
*/
void MX_GPIO_Init(void)
{
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	b08e      	sub	sp, #56	; 0x38
 8000c50:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c52:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c56:	2200      	movs	r2, #0
 8000c58:	601a      	str	r2, [r3, #0]
 8000c5a:	605a      	str	r2, [r3, #4]
 8000c5c:	609a      	str	r2, [r3, #8]
 8000c5e:	60da      	str	r2, [r3, #12]
 8000c60:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000c62:	2300      	movs	r3, #0
 8000c64:	623b      	str	r3, [r7, #32]
 8000c66:	4bb2      	ldr	r3, [pc, #712]	; (8000f30 <MX_GPIO_Init+0x2e4>)
 8000c68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c6a:	4ab1      	ldr	r2, [pc, #708]	; (8000f30 <MX_GPIO_Init+0x2e4>)
 8000c6c:	f043 0310 	orr.w	r3, r3, #16
 8000c70:	6313      	str	r3, [r2, #48]	; 0x30
 8000c72:	4baf      	ldr	r3, [pc, #700]	; (8000f30 <MX_GPIO_Init+0x2e4>)
 8000c74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c76:	f003 0310 	and.w	r3, r3, #16
 8000c7a:	623b      	str	r3, [r7, #32]
 8000c7c:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c7e:	2300      	movs	r3, #0
 8000c80:	61fb      	str	r3, [r7, #28]
 8000c82:	4bab      	ldr	r3, [pc, #684]	; (8000f30 <MX_GPIO_Init+0x2e4>)
 8000c84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c86:	4aaa      	ldr	r2, [pc, #680]	; (8000f30 <MX_GPIO_Init+0x2e4>)
 8000c88:	f043 0304 	orr.w	r3, r3, #4
 8000c8c:	6313      	str	r3, [r2, #48]	; 0x30
 8000c8e:	4ba8      	ldr	r3, [pc, #672]	; (8000f30 <MX_GPIO_Init+0x2e4>)
 8000c90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c92:	f003 0304 	and.w	r3, r3, #4
 8000c96:	61fb      	str	r3, [r7, #28]
 8000c98:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000c9a:	2300      	movs	r3, #0
 8000c9c:	61bb      	str	r3, [r7, #24]
 8000c9e:	4ba4      	ldr	r3, [pc, #656]	; (8000f30 <MX_GPIO_Init+0x2e4>)
 8000ca0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ca2:	4aa3      	ldr	r2, [pc, #652]	; (8000f30 <MX_GPIO_Init+0x2e4>)
 8000ca4:	f043 0320 	orr.w	r3, r3, #32
 8000ca8:	6313      	str	r3, [r2, #48]	; 0x30
 8000caa:	4ba1      	ldr	r3, [pc, #644]	; (8000f30 <MX_GPIO_Init+0x2e4>)
 8000cac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cae:	f003 0320 	and.w	r3, r3, #32
 8000cb2:	61bb      	str	r3, [r7, #24]
 8000cb4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	617b      	str	r3, [r7, #20]
 8000cba:	4b9d      	ldr	r3, [pc, #628]	; (8000f30 <MX_GPIO_Init+0x2e4>)
 8000cbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cbe:	4a9c      	ldr	r2, [pc, #624]	; (8000f30 <MX_GPIO_Init+0x2e4>)
 8000cc0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000cc4:	6313      	str	r3, [r2, #48]	; 0x30
 8000cc6:	4b9a      	ldr	r3, [pc, #616]	; (8000f30 <MX_GPIO_Init+0x2e4>)
 8000cc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000cce:	617b      	str	r3, [r7, #20]
 8000cd0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	613b      	str	r3, [r7, #16]
 8000cd6:	4b96      	ldr	r3, [pc, #600]	; (8000f30 <MX_GPIO_Init+0x2e4>)
 8000cd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cda:	4a95      	ldr	r2, [pc, #596]	; (8000f30 <MX_GPIO_Init+0x2e4>)
 8000cdc:	f043 0301 	orr.w	r3, r3, #1
 8000ce0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ce2:	4b93      	ldr	r3, [pc, #588]	; (8000f30 <MX_GPIO_Init+0x2e4>)
 8000ce4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ce6:	f003 0301 	and.w	r3, r3, #1
 8000cea:	613b      	str	r3, [r7, #16]
 8000cec:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cee:	2300      	movs	r3, #0
 8000cf0:	60fb      	str	r3, [r7, #12]
 8000cf2:	4b8f      	ldr	r3, [pc, #572]	; (8000f30 <MX_GPIO_Init+0x2e4>)
 8000cf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cf6:	4a8e      	ldr	r2, [pc, #568]	; (8000f30 <MX_GPIO_Init+0x2e4>)
 8000cf8:	f043 0302 	orr.w	r3, r3, #2
 8000cfc:	6313      	str	r3, [r2, #48]	; 0x30
 8000cfe:	4b8c      	ldr	r3, [pc, #560]	; (8000f30 <MX_GPIO_Init+0x2e4>)
 8000d00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d02:	f003 0302 	and.w	r3, r3, #2
 8000d06:	60fb      	str	r3, [r7, #12]
 8000d08:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000d0a:	2300      	movs	r3, #0
 8000d0c:	60bb      	str	r3, [r7, #8]
 8000d0e:	4b88      	ldr	r3, [pc, #544]	; (8000f30 <MX_GPIO_Init+0x2e4>)
 8000d10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d12:	4a87      	ldr	r2, [pc, #540]	; (8000f30 <MX_GPIO_Init+0x2e4>)
 8000d14:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000d18:	6313      	str	r3, [r2, #48]	; 0x30
 8000d1a:	4b85      	ldr	r3, [pc, #532]	; (8000f30 <MX_GPIO_Init+0x2e4>)
 8000d1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000d22:	60bb      	str	r3, [r7, #8]
 8000d24:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d26:	2300      	movs	r3, #0
 8000d28:	607b      	str	r3, [r7, #4]
 8000d2a:	4b81      	ldr	r3, [pc, #516]	; (8000f30 <MX_GPIO_Init+0x2e4>)
 8000d2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d2e:	4a80      	ldr	r2, [pc, #512]	; (8000f30 <MX_GPIO_Init+0x2e4>)
 8000d30:	f043 0308 	orr.w	r3, r3, #8
 8000d34:	6313      	str	r3, [r2, #48]	; 0x30
 8000d36:	4b7e      	ldr	r3, [pc, #504]	; (8000f30 <MX_GPIO_Init+0x2e4>)
 8000d38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d3a:	f003 0308 	and.w	r3, r3, #8
 8000d3e:	607b      	str	r3, [r7, #4]
 8000d40:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, XSHUNT_5_Pin|XSHUNT_4_Pin|XSHUNT_1_Pin|M2_DIR_Pin 
 8000d42:	2200      	movs	r2, #0
 8000d44:	f247 4130 	movw	r1, #29744	; 0x7430
 8000d48:	487a      	ldr	r0, [pc, #488]	; (8000f34 <MX_GPIO_Init+0x2e8>)
 8000d4a:	f002 fa47 	bl	80031dc <HAL_GPIO_WritePin>
                          |M1_DIR_Pin|ENABLE_MOTORS_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_3_GPIO_Port, LED_3_Pin, GPIO_PIN_RESET);
 8000d4e:	2200      	movs	r2, #0
 8000d50:	2108      	movs	r1, #8
 8000d52:	4879      	ldr	r0, [pc, #484]	; (8000f38 <MX_GPIO_Init+0x2ec>)
 8000d54:	f002 fa42 	bl	80031dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LED_4_Pin|LD3_Pin|LED_1_Pin 
 8000d58:	2200      	movs	r2, #0
 8000d5a:	f244 41c1 	movw	r1, #17601	; 0x44c1
 8000d5e:	4877      	ldr	r0, [pc, #476]	; (8000f3c <MX_GPIO_Init+0x2f0>)
 8000d60:	f002 fa3c 	bl	80031dc <HAL_GPIO_WritePin>
                          |LD2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, XSHUNT_2_Pin|XSHUNT_6_Pin|LED_2_Pin, GPIO_PIN_RESET);
 8000d64:	2200      	movs	r2, #0
 8000d66:	f44f 61b0 	mov.w	r1, #1408	; 0x580
 8000d6a:	4875      	ldr	r0, [pc, #468]	; (8000f40 <MX_GPIO_Init+0x2f4>)
 8000d6c:	f002 fa36 	bl	80031dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_5_GPIO_Port, LED_5_Pin, GPIO_PIN_RESET);
 8000d70:	2200      	movs	r2, #0
 8000d72:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000d76:	4873      	ldr	r0, [pc, #460]	; (8000f44 <MX_GPIO_Init+0x2f8>)
 8000d78:	f002 fa30 	bl	80031dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, USB_PowerSwitchOn_Pin|XSHUNT_3_Pin, GPIO_PIN_RESET);
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8000d82:	4871      	ldr	r0, [pc, #452]	; (8000f48 <MX_GPIO_Init+0x2fc>)
 8000d84:	f002 fa2a 	bl	80031dc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE2 PE4 PE5 PE6 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 8000d88:	2374      	movs	r3, #116	; 0x74
 8000d8a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d8c:	2302      	movs	r3, #2
 8000d8e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d90:	2300      	movs	r3, #0
 8000d92:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d94:	2303      	movs	r3, #3
 8000d96:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 8000d98:	2305      	movs	r3, #5
 8000d9a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000d9c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000da0:	4619      	mov	r1, r3
 8000da2:	4867      	ldr	r0, [pc, #412]	; (8000f40 <MX_GPIO_Init+0x2f4>)
 8000da4:	f002 f870 	bl	8002e88 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000da8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000dac:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000dae:	4b67      	ldr	r3, [pc, #412]	; (8000f4c <MX_GPIO_Init+0x300>)
 8000db0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000db2:	2300      	movs	r3, #0
 8000db4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000db6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000dba:	4619      	mov	r1, r3
 8000dbc:	4864      	ldr	r0, [pc, #400]	; (8000f50 <MX_GPIO_Init+0x304>)
 8000dbe:	f002 f863 	bl	8002e88 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = M1_FB_Pin;
 8000dc2:	2308      	movs	r3, #8
 8000dc4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000dc6:	2303      	movs	r3, #3
 8000dc8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dca:	2300      	movs	r3, #0
 8000dcc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(M1_FB_GPIO_Port, &GPIO_InitStruct);
 8000dce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000dd2:	4619      	mov	r1, r3
 8000dd4:	4857      	ldr	r0, [pc, #348]	; (8000f34 <MX_GPIO_Init+0x2e8>)
 8000dd6:	f002 f857 	bl	8002e88 <HAL_GPIO_Init>

  /*Configure GPIO pins : PFPin PFPin PFPin PFPin 
                           PFPin PFPin */
  GPIO_InitStruct.Pin = XSHUNT_5_Pin|XSHUNT_4_Pin|XSHUNT_1_Pin|M2_DIR_Pin 
 8000dda:	f247 4330 	movw	r3, #29744	; 0x7430
 8000dde:	627b      	str	r3, [r7, #36]	; 0x24
                          |M1_DIR_Pin|ENABLE_MOTORS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000de0:	2301      	movs	r3, #1
 8000de2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000de4:	2300      	movs	r3, #0
 8000de6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000de8:	2300      	movs	r3, #0
 8000dea:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000dec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000df0:	4619      	mov	r1, r3
 8000df2:	4850      	ldr	r0, [pc, #320]	; (8000f34 <MX_GPIO_Init+0x2e8>)
 8000df4:	f002 f848 	bl	8002e88 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_3_Pin;
 8000df8:	2308      	movs	r3, #8
 8000dfa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dfc:	2301      	movs	r3, #1
 8000dfe:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e00:	2300      	movs	r3, #0
 8000e02:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e04:	2300      	movs	r3, #0
 8000e06:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LED_3_GPIO_Port, &GPIO_InitStruct);
 8000e08:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e0c:	4619      	mov	r1, r3
 8000e0e:	484a      	ldr	r0, [pc, #296]	; (8000f38 <MX_GPIO_Init+0x2ec>)
 8000e10:	f002 f83a 	bl	8002e88 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = TIRETTE_Pin|M_SF_Pin;
 8000e14:	2360      	movs	r3, #96	; 0x60
 8000e16:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e18:	2300      	movs	r3, #0
 8000e1a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e1c:	2300      	movs	r3, #0
 8000e1e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e20:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e24:	4619      	mov	r1, r3
 8000e26:	4844      	ldr	r0, [pc, #272]	; (8000f38 <MX_GPIO_Init+0x2ec>)
 8000e28:	f002 f82e 	bl	8002e88 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin 
                           PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LED_4_Pin|LD3_Pin|LED_1_Pin 
 8000e2c:	f244 43c1 	movw	r3, #17601	; 0x44c1
 8000e30:	627b      	str	r3, [r7, #36]	; 0x24
                          |LD2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e32:	2301      	movs	r3, #1
 8000e34:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e36:	2300      	movs	r3, #0
 8000e38:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e3e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e42:	4619      	mov	r1, r3
 8000e44:	483d      	ldr	r0, [pc, #244]	; (8000f3c <MX_GPIO_Init+0x2f0>)
 8000e46:	f002 f81f 	bl	8002e88 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = M2_FB_Pin;
 8000e4a:	2302      	movs	r3, #2
 8000e4c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000e4e:	2303      	movs	r3, #3
 8000e50:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e52:	2300      	movs	r3, #0
 8000e54:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(M2_FB_GPIO_Port, &GPIO_InitStruct);
 8000e56:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e5a:	4619      	mov	r1, r3
 8000e5c:	4837      	ldr	r0, [pc, #220]	; (8000f3c <MX_GPIO_Init+0x2f0>)
 8000e5e:	f002 f813 	bl	8002e88 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = CONTACT_4_Pin|USB_OverCurrent_Pin;
 8000e62:	2381      	movs	r3, #129	; 0x81
 8000e64:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e66:	2300      	movs	r3, #0
 8000e68:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000e6e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e72:	4619      	mov	r1, r3
 8000e74:	4834      	ldr	r0, [pc, #208]	; (8000f48 <MX_GPIO_Init+0x2fc>)
 8000e76:	f002 f807 	bl	8002e88 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = XSHUNT_2_Pin|XSHUNT_6_Pin|LED_2_Pin;
 8000e7a:	f44f 63b0 	mov.w	r3, #1408	; 0x580
 8000e7e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e80:	2301      	movs	r3, #1
 8000e82:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e84:	2300      	movs	r3, #0
 8000e86:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e88:	2300      	movs	r3, #0
 8000e8a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000e8c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e90:	4619      	mov	r1, r3
 8000e92:	482b      	ldr	r0, [pc, #172]	; (8000f40 <MX_GPIO_Init+0x2f4>)
 8000e94:	f001 fff8 	bl	8002e88 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = PWM_SERVO_5_Pin|PWM_SERVO_6_Pin|PWM_SERVO_7_Pin|PWM_SERVO_8_Pin;
 8000e98:	f44f 43d4 	mov.w	r3, #27136	; 0x6a00
 8000e9c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e9e:	2302      	movs	r3, #2
 8000ea0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000eaa:	2301      	movs	r3, #1
 8000eac:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000eae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000eb2:	4619      	mov	r1, r3
 8000eb4:	4822      	ldr	r0, [pc, #136]	; (8000f40 <MX_GPIO_Init+0x2f4>)
 8000eb6:	f001 ffe7 	bl	8002e88 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_5_Pin;
 8000eba:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000ebe:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ec0:	2301      	movs	r3, #1
 8000ec2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ec4:	2300      	movs	r3, #0
 8000ec6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ec8:	2300      	movs	r3, #0
 8000eca:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LED_5_GPIO_Port, &GPIO_InitStruct);
 8000ecc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ed0:	4619      	mov	r1, r3
 8000ed2:	481c      	ldr	r0, [pc, #112]	; (8000f44 <MX_GPIO_Init+0x2f8>)
 8000ed4:	f001 ffd8 	bl	8002e88 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = CMD_MOTEUR_DROIT_Pin|CMD_MOTEUR_GAUCHE_Pin;
 8000ed8:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8000edc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ede:	2302      	movs	r3, #2
 8000ee0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8000eea:	2302      	movs	r3, #2
 8000eec:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000eee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ef2:	4619      	mov	r1, r3
 8000ef4:	4813      	ldr	r0, [pc, #76]	; (8000f44 <MX_GPIO_Init+0x2f8>)
 8000ef6:	f001 ffc7 	bl	8002e88 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin|XSHUNT_3_Pin;
 8000efa:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8000efe:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f00:	2301      	movs	r3, #1
 8000f02:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f04:	2300      	movs	r3, #0
 8000f06:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f08:	2300      	movs	r3, #0
 8000f0a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000f0c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f10:	4619      	mov	r1, r3
 8000f12:	480d      	ldr	r0, [pc, #52]	; (8000f48 <MX_GPIO_Init+0x2fc>)
 8000f14:	f001 ffb8 	bl	8002e88 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = PWM_SERVO_1_Pin|PWM_SERVO_2_Pin|PWM_SERVO_3_Pin|PWM_SERVO_4_Pin;
 8000f18:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8000f1c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f1e:	2302      	movs	r3, #2
 8000f20:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f22:	2300      	movs	r3, #0
 8000f24:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f26:	2300      	movs	r3, #0
 8000f28:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8000f2a:	2303      	movs	r3, #3
 8000f2c:	637b      	str	r3, [r7, #52]	; 0x34
 8000f2e:	e011      	b.n	8000f54 <MX_GPIO_Init+0x308>
 8000f30:	40023800 	.word	0x40023800
 8000f34:	40021400 	.word	0x40021400
 8000f38:	40020000 	.word	0x40020000
 8000f3c:	40020400 	.word	0x40020400
 8000f40:	40021000 	.word	0x40021000
 8000f44:	40020c00 	.word	0x40020c00
 8000f48:	40021800 	.word	0x40021800
 8000f4c:	10110000 	.word	0x10110000
 8000f50:	40020800 	.word	0x40020800
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f54:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f58:	4619      	mov	r1, r3
 8000f5a:	4839      	ldr	r0, [pc, #228]	; (8001040 <MX_GPIO_Init+0x3f4>)
 8000f5c:	f001 ff94 	bl	8002e88 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = QEI_M1_CH1_Pin;
 8000f60:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000f64:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f66:	2302      	movs	r3, #2
 8000f68:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f6e:	2300      	movs	r3, #0
 8000f70:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000f72:	2301      	movs	r3, #1
 8000f74:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(QEI_M1_CH1_GPIO_Port, &GPIO_InitStruct);
 8000f76:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f7a:	4619      	mov	r1, r3
 8000f7c:	4831      	ldr	r0, [pc, #196]	; (8001044 <MX_GPIO_Init+0x3f8>)
 8000f7e:	f001 ff83 	bl	8002e88 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC10 PC11 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000f82:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000f86:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f88:	2302      	movs	r3, #2
 8000f8a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f8c:	2300      	movs	r3, #0
 8000f8e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f90:	2303      	movs	r3, #3
 8000f92:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8000f94:	2308      	movs	r3, #8
 8000f96:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f98:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f9c:	4619      	mov	r1, r3
 8000f9e:	4828      	ldr	r0, [pc, #160]	; (8001040 <MX_GPIO_Init+0x3f4>)
 8000fa0:	f001 ff72 	bl	8002e88 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = CONTACT_5_Pin|CONTACT_1_Pin|CONTACT_2_Pin|CONTACT_3_Pin;
 8000fa4:	23b1      	movs	r3, #177	; 0xb1
 8000fa6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000fa8:	2300      	movs	r3, #0
 8000faa:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fac:	2300      	movs	r3, #0
 8000fae:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000fb0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000fb4:	4619      	mov	r1, r3
 8000fb6:	4824      	ldr	r0, [pc, #144]	; (8001048 <MX_GPIO_Init+0x3fc>)
 8000fb8:	f001 ff66 	bl	8002e88 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG9 PG14 */
  GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_14;
 8000fbc:	f44f 4384 	mov.w	r3, #16896	; 0x4200
 8000fc0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fc2:	2302      	movs	r3, #2
 8000fc4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fca:	2303      	movs	r3, #3
 8000fcc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8000fce:	2308      	movs	r3, #8
 8000fd0:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000fd2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000fd6:	4619      	mov	r1, r3
 8000fd8:	481c      	ldr	r0, [pc, #112]	; (800104c <MX_GPIO_Init+0x400>)
 8000fda:	f001 ff55 	bl	8002e88 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = QEI_M1_CH2_Pin;
 8000fde:	2308      	movs	r3, #8
 8000fe0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fe2:	2302      	movs	r3, #2
 8000fe4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fea:	2300      	movs	r3, #0
 8000fec:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000fee:	2301      	movs	r3, #1
 8000ff0:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(QEI_M1_CH2_GPIO_Port, &GPIO_InitStruct);
 8000ff2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ff6:	4619      	mov	r1, r3
 8000ff8:	4815      	ldr	r0, [pc, #84]	; (8001050 <MX_GPIO_Init+0x404>)
 8000ffa:	f001 ff45 	bl	8002e88 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = QEI_M2_CH1_Pin|QEI_M2_CH2_Pin;
 8000ffe:	2330      	movs	r3, #48	; 0x30
 8001000:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001002:	2302      	movs	r3, #2
 8001004:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001006:	2300      	movs	r3, #0
 8001008:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800100a:	2300      	movs	r3, #0
 800100c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800100e:	2302      	movs	r3, #2
 8001010:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001012:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001016:	4619      	mov	r1, r3
 8001018:	480d      	ldr	r0, [pc, #52]	; (8001050 <MX_GPIO_Init+0x404>)
 800101a:	f001 ff35 	bl	8002e88 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CONTACT_6_Pin;
 800101e:	2302      	movs	r3, #2
 8001020:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001022:	2300      	movs	r3, #0
 8001024:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001026:	2300      	movs	r3, #0
 8001028:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CONTACT_6_GPIO_Port, &GPIO_InitStruct);
 800102a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800102e:	4619      	mov	r1, r3
 8001030:	4808      	ldr	r0, [pc, #32]	; (8001054 <MX_GPIO_Init+0x408>)
 8001032:	f001 ff29 	bl	8002e88 <HAL_GPIO_Init>

}
 8001036:	bf00      	nop
 8001038:	3738      	adds	r7, #56	; 0x38
 800103a:	46bd      	mov	sp, r7
 800103c:	bd80      	pop	{r7, pc}
 800103e:	bf00      	nop
 8001040:	40020800 	.word	0x40020800
 8001044:	40020000 	.word	0x40020000
 8001048:	40020c00 	.word	0x40020c00
 800104c:	40021800 	.word	0x40021800
 8001050:	40020400 	.word	0x40020400
 8001054:	40021000 	.word	0x40021000

08001058 <LL_I2C_EnableClockStretching>:
  * @rmtoll CR1          NOSTRETCH     LL_I2C_EnableClockStretching
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_EnableClockStretching(I2C_TypeDef *I2Cx)
{
 8001058:	b480      	push	{r7}
 800105a:	b083      	sub	sp, #12
 800105c:	af00      	add	r7, sp, #0
 800105e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_NOSTRETCH);
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	601a      	str	r2, [r3, #0]
}
 800106c:	bf00      	nop
 800106e:	370c      	adds	r7, #12
 8001070:	46bd      	mov	sp, r7
 8001072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001076:	4770      	bx	lr

08001078 <LL_I2C_DisableGeneralCall>:
  * @rmtoll CR1          ENGC          LL_I2C_DisableGeneralCall
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_DisableGeneralCall(I2C_TypeDef *I2Cx)
{
 8001078:	b480      	push	{r7}
 800107a:	b083      	sub	sp, #12
 800107c:	af00      	add	r7, sp, #0
 800107e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_ENGC);
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	601a      	str	r2, [r3, #0]
}
 800108c:	bf00      	nop
 800108e:	370c      	adds	r7, #12
 8001090:	46bd      	mov	sp, r7
 8001092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001096:	4770      	bx	lr

08001098 <LL_I2C_SetOwnAddress2>:
  * @param  I2Cx I2C Instance.
  * @param  OwnAddress2 This parameter must be a value between Min_Data=0 and Max_Data=0x7F.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_SetOwnAddress2(I2C_TypeDef *I2Cx, uint32_t OwnAddress2)
{
 8001098:	b480      	push	{r7}
 800109a:	b083      	sub	sp, #12
 800109c:	af00      	add	r7, sp, #0
 800109e:	6078      	str	r0, [r7, #4]
 80010a0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->OAR2, I2C_OAR2_ADD2, OwnAddress2);
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	68db      	ldr	r3, [r3, #12]
 80010a6:	f023 02fe 	bic.w	r2, r3, #254	; 0xfe
 80010aa:	683b      	ldr	r3, [r7, #0]
 80010ac:	431a      	orrs	r2, r3
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	60da      	str	r2, [r3, #12]
}
 80010b2:	bf00      	nop
 80010b4:	370c      	adds	r7, #12
 80010b6:	46bd      	mov	sp, r7
 80010b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010bc:	4770      	bx	lr

080010be <LL_I2C_DisableOwnAddress2>:
  * @rmtoll OAR2         ENDUAL        LL_I2C_DisableOwnAddress2
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_DisableOwnAddress2(I2C_TypeDef *I2Cx)
{
 80010be:	b480      	push	{r7}
 80010c0:	b083      	sub	sp, #12
 80010c2:	af00      	add	r7, sp, #0
 80010c4:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->OAR2, I2C_OAR2_ENDUAL);
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	68db      	ldr	r3, [r3, #12]
 80010ca:	f023 0201 	bic.w	r2, r3, #1
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	60da      	str	r2, [r3, #12]
}
 80010d2:	bf00      	nop
 80010d4:	370c      	adds	r7, #12
 80010d6:	46bd      	mov	sp, r7
 80010d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010dc:	4770      	bx	lr
	...

080010e0 <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 80010e0:	b480      	push	{r7}
 80010e2:	b085      	sub	sp, #20
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 80010e8:	4b08      	ldr	r3, [pc, #32]	; (800110c <LL_AHB1_GRP1_EnableClock+0x2c>)
 80010ea:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80010ec:	4907      	ldr	r1, [pc, #28]	; (800110c <LL_AHB1_GRP1_EnableClock+0x2c>)
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	4313      	orrs	r3, r2
 80010f2:	630b      	str	r3, [r1, #48]	; 0x30
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 80010f4:	4b05      	ldr	r3, [pc, #20]	; (800110c <LL_AHB1_GRP1_EnableClock+0x2c>)
 80010f6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	4013      	ands	r3, r2
 80010fc:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80010fe:	68fb      	ldr	r3, [r7, #12]
}
 8001100:	bf00      	nop
 8001102:	3714      	adds	r7, #20
 8001104:	46bd      	mov	sp, r7
 8001106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800110a:	4770      	bx	lr
 800110c:	40023800 	.word	0x40023800

08001110 <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8001110:	b480      	push	{r7}
 8001112:	b085      	sub	sp, #20
 8001114:	af00      	add	r7, sp, #0
 8001116:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 8001118:	4b08      	ldr	r3, [pc, #32]	; (800113c <LL_APB1_GRP1_EnableClock+0x2c>)
 800111a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800111c:	4907      	ldr	r1, [pc, #28]	; (800113c <LL_APB1_GRP1_EnableClock+0x2c>)
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	4313      	orrs	r3, r2
 8001122:	640b      	str	r3, [r1, #64]	; 0x40
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8001124:	4b05      	ldr	r3, [pc, #20]	; (800113c <LL_APB1_GRP1_EnableClock+0x2c>)
 8001126:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	4013      	ands	r3, r2
 800112c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800112e:	68fb      	ldr	r3, [r7, #12]
}
 8001130:	bf00      	nop
 8001132:	3714      	adds	r7, #20
 8001134:	46bd      	mov	sp, r7
 8001136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800113a:	4770      	bx	lr
 800113c:	40023800 	.word	0x40023800

08001140 <MX_I2C1_Init>:

/* USER CODE END 0 */

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001140:	b580      	push	{r7, lr}
 8001142:	b08e      	sub	sp, #56	; 0x38
 8001144:	af00      	add	r7, sp, #0
  LL_I2C_InitTypeDef I2C_InitStruct = {0};
 8001146:	f107 0318 	add.w	r3, r7, #24
 800114a:	2220      	movs	r2, #32
 800114c:	2100      	movs	r1, #0
 800114e:	4618      	mov	r0, r3
 8001150:	f017 f9ca 	bl	80184e8 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001154:	463b      	mov	r3, r7
 8001156:	2200      	movs	r2, #0
 8001158:	601a      	str	r2, [r3, #0]
 800115a:	605a      	str	r2, [r3, #4]
 800115c:	609a      	str	r2, [r3, #8]
 800115e:	60da      	str	r2, [r3, #12]
 8001160:	611a      	str	r2, [r3, #16]
 8001162:	615a      	str	r2, [r3, #20]

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 8001164:	2002      	movs	r0, #2
 8001166:	f7ff ffbb 	bl	80010e0 <LL_AHB1_GRP1_EnableClock>
  /**I2C1 GPIO Configuration  
  PB8   ------> I2C1_SCL
  PB9   ------> I2C1_SDA 
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_8|LL_GPIO_PIN_9;
 800116a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800116e:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001170:	2302      	movs	r3, #2
 8001172:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8001174:	2303      	movs	r3, #3
 8001176:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_OPENDRAIN;
 8001178:	2301      	movs	r3, #1
 800117a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 800117c:	2301      	movs	r3, #1
 800117e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_4;
 8001180:	2304      	movs	r3, #4
 8001182:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001184:	463b      	mov	r3, r7
 8001186:	4619      	mov	r1, r3
 8001188:	4817      	ldr	r0, [pc, #92]	; (80011e8 <MX_I2C1_Init+0xa8>)
 800118a:	f004 f95c 	bl	8005446 <LL_GPIO_Init>

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_I2C1);
 800118e:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8001192:	f7ff ffbd 	bl	8001110 <LL_APB1_GRP1_EnableClock>

  /** I2C Initialization 
  */
  LL_I2C_DisableOwnAddress2(I2C1);
 8001196:	4815      	ldr	r0, [pc, #84]	; (80011ec <MX_I2C1_Init+0xac>)
 8001198:	f7ff ff91 	bl	80010be <LL_I2C_DisableOwnAddress2>
  LL_I2C_DisableGeneralCall(I2C1);
 800119c:	4813      	ldr	r0, [pc, #76]	; (80011ec <MX_I2C1_Init+0xac>)
 800119e:	f7ff ff6b 	bl	8001078 <LL_I2C_DisableGeneralCall>
  LL_I2C_EnableClockStretching(I2C1);
 80011a2:	4812      	ldr	r0, [pc, #72]	; (80011ec <MX_I2C1_Init+0xac>)
 80011a4:	f7ff ff58 	bl	8001058 <LL_I2C_EnableClockStretching>
  I2C_InitStruct.PeripheralMode = LL_I2C_MODE_I2C;
 80011a8:	2300      	movs	r3, #0
 80011aa:	61bb      	str	r3, [r7, #24]
  I2C_InitStruct.ClockSpeed = 100000;
 80011ac:	4b10      	ldr	r3, [pc, #64]	; (80011f0 <MX_I2C1_Init+0xb0>)
 80011ae:	61fb      	str	r3, [r7, #28]
  I2C_InitStruct.DutyCycle = LL_I2C_DUTYCYCLE_2;
 80011b0:	2300      	movs	r3, #0
 80011b2:	623b      	str	r3, [r7, #32]
  I2C_InitStruct.AnalogFilter = LL_I2C_ANALOGFILTER_ENABLE;
 80011b4:	2300      	movs	r3, #0
 80011b6:	627b      	str	r3, [r7, #36]	; 0x24
  I2C_InitStruct.DigitalFilter = 0;
 80011b8:	2300      	movs	r3, #0
 80011ba:	62bb      	str	r3, [r7, #40]	; 0x28
  I2C_InitStruct.OwnAddress1 = 0;
 80011bc:	2300      	movs	r3, #0
 80011be:	62fb      	str	r3, [r7, #44]	; 0x2c
  I2C_InitStruct.TypeAcknowledge = LL_I2C_ACK;
 80011c0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80011c4:	633b      	str	r3, [r7, #48]	; 0x30
  I2C_InitStruct.OwnAddrSize = LL_I2C_OWNADDRESS1_7BIT;
 80011c6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80011ca:	637b      	str	r3, [r7, #52]	; 0x34
  LL_I2C_Init(I2C1, &I2C_InitStruct);
 80011cc:	f107 0318 	add.w	r3, r7, #24
 80011d0:	4619      	mov	r1, r3
 80011d2:	4806      	ldr	r0, [pc, #24]	; (80011ec <MX_I2C1_Init+0xac>)
 80011d4:	f004 fab8 	bl	8005748 <LL_I2C_Init>
  LL_I2C_SetOwnAddress2(I2C1, 0);
 80011d8:	2100      	movs	r1, #0
 80011da:	4804      	ldr	r0, [pc, #16]	; (80011ec <MX_I2C1_Init+0xac>)
 80011dc:	f7ff ff5c 	bl	8001098 <LL_I2C_SetOwnAddress2>

}
 80011e0:	bf00      	nop
 80011e2:	3738      	adds	r7, #56	; 0x38
 80011e4:	46bd      	mov	sp, r7
 80011e6:	bd80      	pop	{r7, pc}
 80011e8:	40020400 	.word	0x40020400
 80011ec:	40005400 	.word	0x40005400
 80011f0:	000186a0 	.word	0x000186a0

080011f4 <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b08e      	sub	sp, #56	; 0x38
 80011f8:	af00      	add	r7, sp, #0
  LL_I2C_InitTypeDef I2C_InitStruct = {0};
 80011fa:	f107 0318 	add.w	r3, r7, #24
 80011fe:	2220      	movs	r2, #32
 8001200:	2100      	movs	r1, #0
 8001202:	4618      	mov	r0, r3
 8001204:	f017 f970 	bl	80184e8 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001208:	463b      	mov	r3, r7
 800120a:	2200      	movs	r2, #0
 800120c:	601a      	str	r2, [r3, #0]
 800120e:	605a      	str	r2, [r3, #4]
 8001210:	609a      	str	r2, [r3, #8]
 8001212:	60da      	str	r2, [r3, #12]
 8001214:	611a      	str	r2, [r3, #16]
 8001216:	615a      	str	r2, [r3, #20]

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOF);
 8001218:	2020      	movs	r0, #32
 800121a:	f7ff ff61 	bl	80010e0 <LL_AHB1_GRP1_EnableClock>
  /**I2C2 GPIO Configuration  
  PF0   ------> I2C2_SDA
  PF1   ------> I2C2_SCL 
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_0|LL_GPIO_PIN_1;
 800121e:	2303      	movs	r3, #3
 8001220:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001222:	2302      	movs	r3, #2
 8001224:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8001226:	2303      	movs	r3, #3
 8001228:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_OPENDRAIN;
 800122a:	2301      	movs	r3, #1
 800122c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 800122e:	2301      	movs	r3, #1
 8001230:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_4;
 8001232:	2304      	movs	r3, #4
 8001234:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001236:	463b      	mov	r3, r7
 8001238:	4619      	mov	r1, r3
 800123a:	4818      	ldr	r0, [pc, #96]	; (800129c <MX_I2C2_Init+0xa8>)
 800123c:	f004 f903 	bl	8005446 <LL_GPIO_Init>

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_I2C2);
 8001240:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 8001244:	f7ff ff64 	bl	8001110 <LL_APB1_GRP1_EnableClock>

  /** I2C Initialization 
  */
  LL_I2C_DisableOwnAddress2(I2C2);
 8001248:	4815      	ldr	r0, [pc, #84]	; (80012a0 <MX_I2C2_Init+0xac>)
 800124a:	f7ff ff38 	bl	80010be <LL_I2C_DisableOwnAddress2>
  LL_I2C_DisableGeneralCall(I2C2);
 800124e:	4814      	ldr	r0, [pc, #80]	; (80012a0 <MX_I2C2_Init+0xac>)
 8001250:	f7ff ff12 	bl	8001078 <LL_I2C_DisableGeneralCall>
  LL_I2C_EnableClockStretching(I2C2);
 8001254:	4812      	ldr	r0, [pc, #72]	; (80012a0 <MX_I2C2_Init+0xac>)
 8001256:	f7ff feff 	bl	8001058 <LL_I2C_EnableClockStretching>
  I2C_InitStruct.PeripheralMode = LL_I2C_MODE_I2C;
 800125a:	2300      	movs	r3, #0
 800125c:	61bb      	str	r3, [r7, #24]
  I2C_InitStruct.ClockSpeed = 100000;
 800125e:	4b11      	ldr	r3, [pc, #68]	; (80012a4 <MX_I2C2_Init+0xb0>)
 8001260:	61fb      	str	r3, [r7, #28]
  I2C_InitStruct.DutyCycle = LL_I2C_DUTYCYCLE_2;
 8001262:	2300      	movs	r3, #0
 8001264:	623b      	str	r3, [r7, #32]
  I2C_InitStruct.AnalogFilter = LL_I2C_ANALOGFILTER_ENABLE;
 8001266:	2300      	movs	r3, #0
 8001268:	627b      	str	r3, [r7, #36]	; 0x24
  I2C_InitStruct.DigitalFilter = 0;
 800126a:	2300      	movs	r3, #0
 800126c:	62bb      	str	r3, [r7, #40]	; 0x28
  I2C_InitStruct.OwnAddress1 = 0;
 800126e:	2300      	movs	r3, #0
 8001270:	62fb      	str	r3, [r7, #44]	; 0x2c
  I2C_InitStruct.TypeAcknowledge = LL_I2C_ACK;
 8001272:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001276:	633b      	str	r3, [r7, #48]	; 0x30
  I2C_InitStruct.OwnAddrSize = LL_I2C_OWNADDRESS1_7BIT;
 8001278:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800127c:	637b      	str	r3, [r7, #52]	; 0x34
  LL_I2C_Init(I2C2, &I2C_InitStruct);
 800127e:	f107 0318 	add.w	r3, r7, #24
 8001282:	4619      	mov	r1, r3
 8001284:	4806      	ldr	r0, [pc, #24]	; (80012a0 <MX_I2C2_Init+0xac>)
 8001286:	f004 fa5f 	bl	8005748 <LL_I2C_Init>
  LL_I2C_SetOwnAddress2(I2C2, 0);
 800128a:	2100      	movs	r1, #0
 800128c:	4804      	ldr	r0, [pc, #16]	; (80012a0 <MX_I2C2_Init+0xac>)
 800128e:	f7ff ff03 	bl	8001098 <LL_I2C_SetOwnAddress2>

}
 8001292:	bf00      	nop
 8001294:	3738      	adds	r7, #56	; 0x38
 8001296:	46bd      	mov	sp, r7
 8001298:	bd80      	pop	{r7, pc}
 800129a:	bf00      	nop
 800129c:	40021400 	.word	0x40021400
 80012a0:	40005800 	.word	0x40005800
 80012a4:	000186a0 	.word	0x000186a0

080012a8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80012ac:	f000 fd0e 	bl	8001ccc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80012b0:	f000 f80e 	bl	80012d0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80012b4:	f7ff fcca 	bl	8000c4c <MX_GPIO_Init>
  MX_USART3_UART_Init();
 80012b8:	f000 fc8c 	bl	8001bd4 <MX_USART3_UART_Init>
  MX_I2C1_Init();
 80012bc:	f7ff ff40 	bl	8001140 <MX_I2C1_Init>
  MX_I2C2_Init();
 80012c0:	f7ff ff98 	bl	80011f4 <MX_I2C2_Init>
  /* USER CODE BEGIN 2 */
  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init(); 
 80012c4:	f7ff fc1c 	bl	8000b00 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 80012c8:	f007 fec0 	bl	800904c <osKernelStart>
  
  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80012cc:	e7fe      	b.n	80012cc <main+0x24>
	...

080012d0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80012d0:	b580      	push	{r7, lr}
 80012d2:	b094      	sub	sp, #80	; 0x50
 80012d4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80012d6:	f107 0320 	add.w	r3, r7, #32
 80012da:	2230      	movs	r2, #48	; 0x30
 80012dc:	2100      	movs	r1, #0
 80012de:	4618      	mov	r0, r3
 80012e0:	f017 f902 	bl	80184e8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80012e4:	f107 030c 	add.w	r3, r7, #12
 80012e8:	2200      	movs	r2, #0
 80012ea:	601a      	str	r2, [r3, #0]
 80012ec:	605a      	str	r2, [r3, #4]
 80012ee:	609a      	str	r2, [r3, #8]
 80012f0:	60da      	str	r2, [r3, #12]
 80012f2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80012f4:	2300      	movs	r3, #0
 80012f6:	60bb      	str	r3, [r7, #8]
 80012f8:	4b28      	ldr	r3, [pc, #160]	; (800139c <SystemClock_Config+0xcc>)
 80012fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012fc:	4a27      	ldr	r2, [pc, #156]	; (800139c <SystemClock_Config+0xcc>)
 80012fe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001302:	6413      	str	r3, [r2, #64]	; 0x40
 8001304:	4b25      	ldr	r3, [pc, #148]	; (800139c <SystemClock_Config+0xcc>)
 8001306:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001308:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800130c:	60bb      	str	r3, [r7, #8]
 800130e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001310:	2300      	movs	r3, #0
 8001312:	607b      	str	r3, [r7, #4]
 8001314:	4b22      	ldr	r3, [pc, #136]	; (80013a0 <SystemClock_Config+0xd0>)
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	4a21      	ldr	r2, [pc, #132]	; (80013a0 <SystemClock_Config+0xd0>)
 800131a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800131e:	6013      	str	r3, [r2, #0]
 8001320:	4b1f      	ldr	r3, [pc, #124]	; (80013a0 <SystemClock_Config+0xd0>)
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001328:	607b      	str	r3, [r7, #4]
 800132a:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800132c:	2301      	movs	r3, #1
 800132e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001330:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8001334:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001336:	2302      	movs	r3, #2
 8001338:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800133a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800133e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001340:	2304      	movs	r3, #4
 8001342:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001344:	23a8      	movs	r3, #168	; 0xa8
 8001346:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001348:	2302      	movs	r3, #2
 800134a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800134c:	2307      	movs	r3, #7
 800134e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001350:	f107 0320 	add.w	r3, r7, #32
 8001354:	4618      	mov	r0, r3
 8001356:	f003 f8e5 	bl	8004524 <HAL_RCC_OscConfig>
 800135a:	4603      	mov	r3, r0
 800135c:	2b00      	cmp	r3, #0
 800135e:	d001      	beq.n	8001364 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001360:	f000 f832 	bl	80013c8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001364:	230f      	movs	r3, #15
 8001366:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001368:	2302      	movs	r3, #2
 800136a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800136c:	2300      	movs	r3, #0
 800136e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001370:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001374:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001376:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800137a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800137c:	f107 030c 	add.w	r3, r7, #12
 8001380:	2105      	movs	r1, #5
 8001382:	4618      	mov	r0, r3
 8001384:	f003 fb10 	bl	80049a8 <HAL_RCC_ClockConfig>
 8001388:	4603      	mov	r3, r0
 800138a:	2b00      	cmp	r3, #0
 800138c:	d001      	beq.n	8001392 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800138e:	f000 f81b 	bl	80013c8 <Error_Handler>
  }
}
 8001392:	bf00      	nop
 8001394:	3750      	adds	r7, #80	; 0x50
 8001396:	46bd      	mov	sp, r7
 8001398:	bd80      	pop	{r7, pc}
 800139a:	bf00      	nop
 800139c:	40023800 	.word	0x40023800
 80013a0:	40007000 	.word	0x40007000

080013a4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	b082      	sub	sp, #8
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM10) {
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	4a04      	ldr	r2, [pc, #16]	; (80013c4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80013b2:	4293      	cmp	r3, r2
 80013b4:	d101      	bne.n	80013ba <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80013b6:	f000 fcab 	bl	8001d10 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80013ba:	bf00      	nop
 80013bc:	3708      	adds	r7, #8
 80013be:	46bd      	mov	sp, r7
 80013c0:	bd80      	pop	{r7, pc}
 80013c2:	bf00      	nop
 80013c4:	40014400 	.word	0x40014400

080013c8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80013c8:	b480      	push	{r7}
 80013ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80013cc:	bf00      	nop
 80013ce:	46bd      	mov	sp, r7
 80013d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d4:	4770      	bx	lr
	...

080013d8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80013d8:	b580      	push	{r7, lr}
 80013da:	b082      	sub	sp, #8
 80013dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013de:	2300      	movs	r3, #0
 80013e0:	607b      	str	r3, [r7, #4]
 80013e2:	4b12      	ldr	r3, [pc, #72]	; (800142c <HAL_MspInit+0x54>)
 80013e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013e6:	4a11      	ldr	r2, [pc, #68]	; (800142c <HAL_MspInit+0x54>)
 80013e8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80013ec:	6453      	str	r3, [r2, #68]	; 0x44
 80013ee:	4b0f      	ldr	r3, [pc, #60]	; (800142c <HAL_MspInit+0x54>)
 80013f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013f2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80013f6:	607b      	str	r3, [r7, #4]
 80013f8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80013fa:	2300      	movs	r3, #0
 80013fc:	603b      	str	r3, [r7, #0]
 80013fe:	4b0b      	ldr	r3, [pc, #44]	; (800142c <HAL_MspInit+0x54>)
 8001400:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001402:	4a0a      	ldr	r2, [pc, #40]	; (800142c <HAL_MspInit+0x54>)
 8001404:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001408:	6413      	str	r3, [r2, #64]	; 0x40
 800140a:	4b08      	ldr	r3, [pc, #32]	; (800142c <HAL_MspInit+0x54>)
 800140c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800140e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001412:	603b      	str	r3, [r7, #0]
 8001414:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001416:	2200      	movs	r2, #0
 8001418:	210f      	movs	r1, #15
 800141a:	f06f 0001 	mvn.w	r0, #1
 800141e:	f000 fd71 	bl	8001f04 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001422:	bf00      	nop
 8001424:	3708      	adds	r7, #8
 8001426:	46bd      	mov	sp, r7
 8001428:	bd80      	pop	{r7, pc}
 800142a:	bf00      	nop
 800142c:	40023800 	.word	0x40023800

08001430 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001430:	b580      	push	{r7, lr}
 8001432:	b08c      	sub	sp, #48	; 0x30
 8001434:	af00      	add	r7, sp, #0
 8001436:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001438:	2300      	movs	r3, #0
 800143a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 800143c:	2300      	movs	r3, #0
 800143e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM10 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0); 
 8001440:	2200      	movs	r2, #0
 8001442:	6879      	ldr	r1, [r7, #4]
 8001444:	2019      	movs	r0, #25
 8001446:	f000 fd5d 	bl	8001f04 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM10 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn); 
 800144a:	2019      	movs	r0, #25
 800144c:	f000 fd76 	bl	8001f3c <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM10 clock */
  __HAL_RCC_TIM10_CLK_ENABLE();
 8001450:	2300      	movs	r3, #0
 8001452:	60fb      	str	r3, [r7, #12]
 8001454:	4b1f      	ldr	r3, [pc, #124]	; (80014d4 <HAL_InitTick+0xa4>)
 8001456:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001458:	4a1e      	ldr	r2, [pc, #120]	; (80014d4 <HAL_InitTick+0xa4>)
 800145a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800145e:	6453      	str	r3, [r2, #68]	; 0x44
 8001460:	4b1c      	ldr	r3, [pc, #112]	; (80014d4 <HAL_InitTick+0xa4>)
 8001462:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001464:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001468:	60fb      	str	r3, [r7, #12]
 800146a:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800146c:	f107 0210 	add.w	r2, r7, #16
 8001470:	f107 0314 	add.w	r3, r7, #20
 8001474:	4611      	mov	r1, r2
 8001476:	4618      	mov	r0, r3
 8001478:	f003 fc70 	bl	8004d5c <HAL_RCC_GetClockConfig>
  
  /* Compute TIM10 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 800147c:	f003 fc5a 	bl	8004d34 <HAL_RCC_GetPCLK2Freq>
 8001480:	4603      	mov	r3, r0
 8001482:	005b      	lsls	r3, r3, #1
 8001484:	62fb      	str	r3, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM10 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8001486:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001488:	4a13      	ldr	r2, [pc, #76]	; (80014d8 <HAL_InitTick+0xa8>)
 800148a:	fba2 2303 	umull	r2, r3, r2, r3
 800148e:	0c9b      	lsrs	r3, r3, #18
 8001490:	3b01      	subs	r3, #1
 8001492:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM10 */
  htim10.Instance = TIM10;
 8001494:	4b11      	ldr	r3, [pc, #68]	; (80014dc <HAL_InitTick+0xac>)
 8001496:	4a12      	ldr	r2, [pc, #72]	; (80014e0 <HAL_InitTick+0xb0>)
 8001498:	601a      	str	r2, [r3, #0]
  + Period = [(TIM10CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim10.Init.Period = (1000000 / 1000) - 1;
 800149a:	4b10      	ldr	r3, [pc, #64]	; (80014dc <HAL_InitTick+0xac>)
 800149c:	f240 32e7 	movw	r2, #999	; 0x3e7
 80014a0:	60da      	str	r2, [r3, #12]
  htim10.Init.Prescaler = uwPrescalerValue;
 80014a2:	4a0e      	ldr	r2, [pc, #56]	; (80014dc <HAL_InitTick+0xac>)
 80014a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80014a6:	6053      	str	r3, [r2, #4]
  htim10.Init.ClockDivision = 0;
 80014a8:	4b0c      	ldr	r3, [pc, #48]	; (80014dc <HAL_InitTick+0xac>)
 80014aa:	2200      	movs	r2, #0
 80014ac:	611a      	str	r2, [r3, #16]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014ae:	4b0b      	ldr	r3, [pc, #44]	; (80014dc <HAL_InitTick+0xac>)
 80014b0:	2200      	movs	r2, #0
 80014b2:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim10) == HAL_OK)
 80014b4:	4809      	ldr	r0, [pc, #36]	; (80014dc <HAL_InitTick+0xac>)
 80014b6:	f003 fc83 	bl	8004dc0 <HAL_TIM_Base_Init>
 80014ba:	4603      	mov	r3, r0
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d104      	bne.n	80014ca <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim10);
 80014c0:	4806      	ldr	r0, [pc, #24]	; (80014dc <HAL_InitTick+0xac>)
 80014c2:	f003 fcb2 	bl	8004e2a <HAL_TIM_Base_Start_IT>
 80014c6:	4603      	mov	r3, r0
 80014c8:	e000      	b.n	80014cc <HAL_InitTick+0x9c>
  }
  
  /* Return function status */
  return HAL_ERROR;
 80014ca:	2301      	movs	r3, #1
}
 80014cc:	4618      	mov	r0, r3
 80014ce:	3730      	adds	r7, #48	; 0x30
 80014d0:	46bd      	mov	sp, r7
 80014d2:	bd80      	pop	{r7, pc}
 80014d4:	40023800 	.word	0x40023800
 80014d8:	431bde83 	.word	0x431bde83
 80014dc:	20004378 	.word	0x20004378
 80014e0:	40014400 	.word	0x40014400

080014e4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80014e4:	b480      	push	{r7}
 80014e6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80014e8:	bf00      	nop
 80014ea:	46bd      	mov	sp, r7
 80014ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f0:	4770      	bx	lr

080014f2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80014f2:	b480      	push	{r7}
 80014f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80014f6:	e7fe      	b.n	80014f6 <HardFault_Handler+0x4>

080014f8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80014f8:	b480      	push	{r7}
 80014fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80014fc:	e7fe      	b.n	80014fc <MemManage_Handler+0x4>

080014fe <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80014fe:	b480      	push	{r7}
 8001500:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001502:	e7fe      	b.n	8001502 <BusFault_Handler+0x4>

08001504 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001504:	b480      	push	{r7}
 8001506:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001508:	e7fe      	b.n	8001508 <UsageFault_Handler+0x4>

0800150a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800150a:	b480      	push	{r7}
 800150c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800150e:	bf00      	nop
 8001510:	46bd      	mov	sp, r7
 8001512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001516:	4770      	bx	lr

08001518 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8001518:	b580      	push	{r7, lr}
 800151a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 800151c:	4802      	ldr	r0, [pc, #8]	; (8001528 <TIM1_UP_TIM10_IRQHandler+0x10>)
 800151e:	f003 fca8 	bl	8004e72 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8001522:	bf00      	nop
 8001524:	bd80      	pop	{r7, pc}
 8001526:	bf00      	nop
 8001528:	20004378 	.word	0x20004378

0800152c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 800152c:	b580      	push	{r7, lr}
 800152e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001530:	4802      	ldr	r0, [pc, #8]	; (800153c <OTG_FS_IRQHandler+0x10>)
 8001532:	f001 ffbc 	bl	80034ae <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001536:	bf00      	nop
 8001538:	bd80      	pop	{r7, pc}
 800153a:	bf00      	nop
 800153c:	2000c11c 	.word	0x2000c11c

08001540 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001540:	b580      	push	{r7, lr}
 8001542:	b086      	sub	sp, #24
 8001544:	af00      	add	r7, sp, #0
 8001546:	60f8      	str	r0, [r7, #12]
 8001548:	60b9      	str	r1, [r7, #8]
 800154a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800154c:	2300      	movs	r3, #0
 800154e:	617b      	str	r3, [r7, #20]
 8001550:	e00a      	b.n	8001568 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001552:	f3af 8000 	nop.w
 8001556:	4601      	mov	r1, r0
 8001558:	68bb      	ldr	r3, [r7, #8]
 800155a:	1c5a      	adds	r2, r3, #1
 800155c:	60ba      	str	r2, [r7, #8]
 800155e:	b2ca      	uxtb	r2, r1
 8001560:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001562:	697b      	ldr	r3, [r7, #20]
 8001564:	3301      	adds	r3, #1
 8001566:	617b      	str	r3, [r7, #20]
 8001568:	697a      	ldr	r2, [r7, #20]
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	429a      	cmp	r2, r3
 800156e:	dbf0      	blt.n	8001552 <_read+0x12>
	}

return len;
 8001570:	687b      	ldr	r3, [r7, #4]
}
 8001572:	4618      	mov	r0, r3
 8001574:	3718      	adds	r7, #24
 8001576:	46bd      	mov	sp, r7
 8001578:	bd80      	pop	{r7, pc}

0800157a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800157a:	b580      	push	{r7, lr}
 800157c:	b086      	sub	sp, #24
 800157e:	af00      	add	r7, sp, #0
 8001580:	60f8      	str	r0, [r7, #12]
 8001582:	60b9      	str	r1, [r7, #8]
 8001584:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001586:	2300      	movs	r3, #0
 8001588:	617b      	str	r3, [r7, #20]
 800158a:	e009      	b.n	80015a0 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800158c:	68bb      	ldr	r3, [r7, #8]
 800158e:	1c5a      	adds	r2, r3, #1
 8001590:	60ba      	str	r2, [r7, #8]
 8001592:	781b      	ldrb	r3, [r3, #0]
 8001594:	4618      	mov	r0, r3
 8001596:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800159a:	697b      	ldr	r3, [r7, #20]
 800159c:	3301      	adds	r3, #1
 800159e:	617b      	str	r3, [r7, #20]
 80015a0:	697a      	ldr	r2, [r7, #20]
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	429a      	cmp	r2, r3
 80015a6:	dbf1      	blt.n	800158c <_write+0x12>
	}
	return len;
 80015a8:	687b      	ldr	r3, [r7, #4]
}
 80015aa:	4618      	mov	r0, r3
 80015ac:	3718      	adds	r7, #24
 80015ae:	46bd      	mov	sp, r7
 80015b0:	bd80      	pop	{r7, pc}

080015b2 <_close>:

int _close(int file)
{
 80015b2:	b480      	push	{r7}
 80015b4:	b083      	sub	sp, #12
 80015b6:	af00      	add	r7, sp, #0
 80015b8:	6078      	str	r0, [r7, #4]
	return -1;
 80015ba:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80015be:	4618      	mov	r0, r3
 80015c0:	370c      	adds	r7, #12
 80015c2:	46bd      	mov	sp, r7
 80015c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c8:	4770      	bx	lr

080015ca <_fstat>:


int _fstat(int file, struct stat *st)
{
 80015ca:	b480      	push	{r7}
 80015cc:	b083      	sub	sp, #12
 80015ce:	af00      	add	r7, sp, #0
 80015d0:	6078      	str	r0, [r7, #4]
 80015d2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80015d4:	683b      	ldr	r3, [r7, #0]
 80015d6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80015da:	605a      	str	r2, [r3, #4]
	return 0;
 80015dc:	2300      	movs	r3, #0
}
 80015de:	4618      	mov	r0, r3
 80015e0:	370c      	adds	r7, #12
 80015e2:	46bd      	mov	sp, r7
 80015e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e8:	4770      	bx	lr

080015ea <_isatty>:

int _isatty(int file)
{
 80015ea:	b480      	push	{r7}
 80015ec:	b083      	sub	sp, #12
 80015ee:	af00      	add	r7, sp, #0
 80015f0:	6078      	str	r0, [r7, #4]
	return 1;
 80015f2:	2301      	movs	r3, #1
}
 80015f4:	4618      	mov	r0, r3
 80015f6:	370c      	adds	r7, #12
 80015f8:	46bd      	mov	sp, r7
 80015fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015fe:	4770      	bx	lr

08001600 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001600:	b480      	push	{r7}
 8001602:	b085      	sub	sp, #20
 8001604:	af00      	add	r7, sp, #0
 8001606:	60f8      	str	r0, [r7, #12]
 8001608:	60b9      	str	r1, [r7, #8]
 800160a:	607a      	str	r2, [r7, #4]
	return 0;
 800160c:	2300      	movs	r3, #0
}
 800160e:	4618      	mov	r0, r3
 8001610:	3714      	adds	r7, #20
 8001612:	46bd      	mov	sp, r7
 8001614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001618:	4770      	bx	lr
	...

0800161c <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 800161c:	b480      	push	{r7}
 800161e:	b085      	sub	sp, #20
 8001620:	af00      	add	r7, sp, #0
 8001622:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8001624:	4b11      	ldr	r3, [pc, #68]	; (800166c <_sbrk+0x50>)
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	2b00      	cmp	r3, #0
 800162a:	d102      	bne.n	8001632 <_sbrk+0x16>
		heap_end = &end;
 800162c:	4b0f      	ldr	r3, [pc, #60]	; (800166c <_sbrk+0x50>)
 800162e:	4a10      	ldr	r2, [pc, #64]	; (8001670 <_sbrk+0x54>)
 8001630:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8001632:	4b0e      	ldr	r3, [pc, #56]	; (800166c <_sbrk+0x50>)
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8001638:	4b0c      	ldr	r3, [pc, #48]	; (800166c <_sbrk+0x50>)
 800163a:	681a      	ldr	r2, [r3, #0]
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	4413      	add	r3, r2
 8001640:	466a      	mov	r2, sp
 8001642:	4293      	cmp	r3, r2
 8001644:	d905      	bls.n	8001652 <_sbrk+0x36>
	{
		errno = ENOMEM;
 8001646:	4b0b      	ldr	r3, [pc, #44]	; (8001674 <_sbrk+0x58>)
 8001648:	220c      	movs	r2, #12
 800164a:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 800164c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001650:	e006      	b.n	8001660 <_sbrk+0x44>
	}

	heap_end += incr;
 8001652:	4b06      	ldr	r3, [pc, #24]	; (800166c <_sbrk+0x50>)
 8001654:	681a      	ldr	r2, [r3, #0]
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	4413      	add	r3, r2
 800165a:	4a04      	ldr	r2, [pc, #16]	; (800166c <_sbrk+0x50>)
 800165c:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 800165e:	68fb      	ldr	r3, [r7, #12]
}
 8001660:	4618      	mov	r0, r3
 8001662:	3714      	adds	r7, #20
 8001664:	46bd      	mov	sp, r7
 8001666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800166a:	4770      	bx	lr
 800166c:	20000468 	.word	0x20000468
 8001670:	2000c528 	.word	0x2000c528
 8001674:	2000ac78 	.word	0x2000ac78

08001678 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001678:	b480      	push	{r7}
 800167a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800167c:	4b16      	ldr	r3, [pc, #88]	; (80016d8 <SystemInit+0x60>)
 800167e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001682:	4a15      	ldr	r2, [pc, #84]	; (80016d8 <SystemInit+0x60>)
 8001684:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001688:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 800168c:	4b13      	ldr	r3, [pc, #76]	; (80016dc <SystemInit+0x64>)
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	4a12      	ldr	r2, [pc, #72]	; (80016dc <SystemInit+0x64>)
 8001692:	f043 0301 	orr.w	r3, r3, #1
 8001696:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001698:	4b10      	ldr	r3, [pc, #64]	; (80016dc <SystemInit+0x64>)
 800169a:	2200      	movs	r2, #0
 800169c:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800169e:	4b0f      	ldr	r3, [pc, #60]	; (80016dc <SystemInit+0x64>)
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	4a0e      	ldr	r2, [pc, #56]	; (80016dc <SystemInit+0x64>)
 80016a4:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80016a8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80016ac:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 80016ae:	4b0b      	ldr	r3, [pc, #44]	; (80016dc <SystemInit+0x64>)
 80016b0:	4a0b      	ldr	r2, [pc, #44]	; (80016e0 <SystemInit+0x68>)
 80016b2:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80016b4:	4b09      	ldr	r3, [pc, #36]	; (80016dc <SystemInit+0x64>)
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	4a08      	ldr	r2, [pc, #32]	; (80016dc <SystemInit+0x64>)
 80016ba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80016be:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 80016c0:	4b06      	ldr	r3, [pc, #24]	; (80016dc <SystemInit+0x64>)
 80016c2:	2200      	movs	r2, #0
 80016c4:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80016c6:	4b04      	ldr	r3, [pc, #16]	; (80016d8 <SystemInit+0x60>)
 80016c8:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80016cc:	609a      	str	r2, [r3, #8]
#endif
}
 80016ce:	bf00      	nop
 80016d0:	46bd      	mov	sp, r7
 80016d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d6:	4770      	bx	lr
 80016d8:	e000ed00 	.word	0xe000ed00
 80016dc:	40023800 	.word	0x40023800
 80016e0:	24003010 	.word	0x24003010

080016e4 <tcp_server_init>:
  * @brief  Initializes the tcp echo server
  * @param  None
  * @retval None
  */
void tcp_server_init(void)
{
 80016e4:	b580      	push	{r7, lr}
 80016e6:	b082      	sub	sp, #8
 80016e8:	af00      	add	r7, sp, #0
  /* create new tcp pcb */
  tcp_echoserver_pcb = tcp_new();
 80016ea:	f00d fac7 	bl	800ec7c <tcp_new>
 80016ee:	4602      	mov	r2, r0
 80016f0:	4b16      	ldr	r3, [pc, #88]	; (800174c <tcp_server_init+0x68>)
 80016f2:	601a      	str	r2, [r3, #0]

  if (tcp_echoserver_pcb != NULL)
 80016f4:	4b15      	ldr	r3, [pc, #84]	; (800174c <tcp_server_init+0x68>)
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d022      	beq.n	8001742 <tcp_server_init+0x5e>
  {
    err_t err;

    /* bind echo_pcb to port 7 (ECHO protocol) */
    err = tcp_bind(tcp_echoserver_pcb, IP_ADDR_ANY, 7);
 80016fc:	4b13      	ldr	r3, [pc, #76]	; (800174c <tcp_server_init+0x68>)
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	2207      	movs	r2, #7
 8001702:	4913      	ldr	r1, [pc, #76]	; (8001750 <tcp_server_init+0x6c>)
 8001704:	4618      	mov	r0, r3
 8001706:	f00c fb3d 	bl	800dd84 <tcp_bind>
 800170a:	4603      	mov	r3, r0
 800170c:	71fb      	strb	r3, [r7, #7]

    if (err == ERR_OK)
 800170e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001712:	2b00      	cmp	r3, #0
 8001714:	d10f      	bne.n	8001736 <tcp_server_init+0x52>
    {
      /* start tcp listening for echo_pcb */
      tcp_echoserver_pcb = tcp_listen(tcp_echoserver_pcb);
 8001716:	4b0d      	ldr	r3, [pc, #52]	; (800174c <tcp_server_init+0x68>)
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	21ff      	movs	r1, #255	; 0xff
 800171c:	4618      	mov	r0, r3
 800171e:	f00c fbd3 	bl	800dec8 <tcp_listen_with_backlog>
 8001722:	4602      	mov	r2, r0
 8001724:	4b09      	ldr	r3, [pc, #36]	; (800174c <tcp_server_init+0x68>)
 8001726:	601a      	str	r2, [r3, #0]

      /* initialize LwIP tcp_accept callback function */
      tcp_accept(tcp_echoserver_pcb, tcp_server_accept);
 8001728:	4b08      	ldr	r3, [pc, #32]	; (800174c <tcp_server_init+0x68>)
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	4909      	ldr	r1, [pc, #36]	; (8001754 <tcp_server_init+0x70>)
 800172e:	4618      	mov	r0, r3
 8001730:	f00d fb22 	bl	800ed78 <tcp_accept>
    {
      /* deallocate the pcb */
      memp_free(MEMP_TCP_PCB, tcp_echoserver_pcb);
    }
  }
}
 8001734:	e005      	b.n	8001742 <tcp_server_init+0x5e>
      memp_free(MEMP_TCP_PCB, tcp_echoserver_pcb);
 8001736:	4b05      	ldr	r3, [pc, #20]	; (800174c <tcp_server_init+0x68>)
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	4619      	mov	r1, r3
 800173c:	2001      	movs	r0, #1
 800173e:	f00b f8a5 	bl	800c88c <memp_free>
}
 8001742:	bf00      	nop
 8001744:	3708      	adds	r7, #8
 8001746:	46bd      	mov	sp, r7
 8001748:	bd80      	pop	{r7, pc}
 800174a:	bf00      	nop
 800174c:	200043d0 	.word	0x200043d0
 8001750:	0801b8c0 	.word	0x0801b8c0
 8001754:	08001759 	.word	0x08001759

08001758 <tcp_server_accept>:
  * @param  newpcb: pointer on tcp_pcb struct for the newly created tcp connection
  * @param  err: not used
  * @retval err_t: error status
  */
static err_t tcp_server_accept(void *arg, struct tcp_pcb *newpcb, err_t err)
{
 8001758:	b580      	push	{r7, lr}
 800175a:	b086      	sub	sp, #24
 800175c:	af00      	add	r7, sp, #0
 800175e:	60f8      	str	r0, [r7, #12]
 8001760:	60b9      	str	r1, [r7, #8]
 8001762:	4613      	mov	r3, r2
 8001764:	71fb      	strb	r3, [r7, #7]

  LWIP_UNUSED_ARG(arg);
  LWIP_UNUSED_ARG(err);

  /* set priority for the newly accepted tcp connection newpcb */
  tcp_setprio(newpcb, TCP_PRIO_MIN);
 8001766:	2101      	movs	r1, #1
 8001768:	68b8      	ldr	r0, [r7, #8]
 800176a:	f00d f8fc 	bl	800e966 <tcp_setprio>

  /* allocate structure es to maintain tcp connection informations */
  es = (struct tcp_echoserver_struct *)mem_malloc(sizeof(struct tcp_echoserver_struct));
 800176e:	200c      	movs	r0, #12
 8001770:	f00a feca 	bl	800c508 <mem_malloc>
 8001774:	6138      	str	r0, [r7, #16]

  if (es != NULL)
 8001776:	693b      	ldr	r3, [r7, #16]
 8001778:	2b00      	cmp	r3, #0
 800177a:	d01c      	beq.n	80017b6 <tcp_server_accept+0x5e>
  {
    es->state = ES_ACCEPTED;
 800177c:	693b      	ldr	r3, [r7, #16]
 800177e:	2201      	movs	r2, #1
 8001780:	701a      	strb	r2, [r3, #0]
    es->pcb = newpcb;
 8001782:	693b      	ldr	r3, [r7, #16]
 8001784:	68ba      	ldr	r2, [r7, #8]
 8001786:	605a      	str	r2, [r3, #4]
    es->p = NULL;
 8001788:	693b      	ldr	r3, [r7, #16]
 800178a:	2200      	movs	r2, #0
 800178c:	609a      	str	r2, [r3, #8]

    /* pass newly allocated es structure as argument to newpcb */
    tcp_arg(newpcb, es);
 800178e:	6939      	ldr	r1, [r7, #16]
 8001790:	68b8      	ldr	r0, [r7, #8]
 8001792:	f00d fa7b 	bl	800ec8c <tcp_arg>

    /* initialize lwip tcp_recv callback function for newpcb  */
    tcp_recv(newpcb, tcp_server_recv);
 8001796:	490e      	ldr	r1, [pc, #56]	; (80017d0 <tcp_server_accept+0x78>)
 8001798:	68b8      	ldr	r0, [r7, #8]
 800179a:	f00d fa89 	bl	800ecb0 <tcp_recv>

    /* initialize lwip tcp_err callback function for newpcb  */
    tcp_err(newpcb, tcp_server_error);
 800179e:	490d      	ldr	r1, [pc, #52]	; (80017d4 <tcp_server_accept+0x7c>)
 80017a0:	68b8      	ldr	r0, [r7, #8]
 80017a2:	f00d fac7 	bl	800ed34 <tcp_err>

    /* initialize lwip tcp_poll callback function for newpcb */
    tcp_poll(newpcb, tcp_server_poll, 1);
 80017a6:	2201      	movs	r2, #1
 80017a8:	490b      	ldr	r1, [pc, #44]	; (80017d8 <tcp_server_accept+0x80>)
 80017aa:	68b8      	ldr	r0, [r7, #8]
 80017ac:	f00d fafc 	bl	800eda8 <tcp_poll>

    ret_err = ERR_OK;
 80017b0:	2300      	movs	r3, #0
 80017b2:	75fb      	strb	r3, [r7, #23]
 80017b4:	e005      	b.n	80017c2 <tcp_server_accept+0x6a>
  }
  else
  {
    /*  close tcp connection */
    tcp_server_connection_close(newpcb, es);
 80017b6:	6939      	ldr	r1, [r7, #16]
 80017b8:	68b8      	ldr	r0, [r7, #8]
 80017ba:	f000 f98d 	bl	8001ad8 <tcp_server_connection_close>
    /* return memory error */
    ret_err = ERR_MEM;
 80017be:	23ff      	movs	r3, #255	; 0xff
 80017c0:	75fb      	strb	r3, [r7, #23]
  }
  return ret_err;
 80017c2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80017c6:	4618      	mov	r0, r3
 80017c8:	3718      	adds	r7, #24
 80017ca:	46bd      	mov	sp, r7
 80017cc:	bd80      	pop	{r7, pc}
 80017ce:	bf00      	nop
 80017d0:	080017dd 	.word	0x080017dd
 80017d4:	08001989 	.word	0x08001989
 80017d8:	080019ad 	.word	0x080019ad

080017dc <tcp_server_recv>:
  * @param  pbuf: pointer on the received pbuf
  * @param  err: error information regarding the reveived pbuf
  * @retval err_t: error code
  */
static err_t tcp_server_recv(void *arg, struct tcp_pcb *tpcb, struct pbuf *p, err_t err)
{
 80017dc:	b580      	push	{r7, lr}
 80017de:	b096      	sub	sp, #88	; 0x58
 80017e0:	af02      	add	r7, sp, #8
 80017e2:	60f8      	str	r0, [r7, #12]
 80017e4:	60b9      	str	r1, [r7, #8]
 80017e6:	607a      	str	r2, [r7, #4]
 80017e8:	70fb      	strb	r3, [r7, #3]
  struct tcp_echoserver_struct *es;
  err_t ret_err;
  uint8_t array[NB_OCTETS_CMD] = {0};
 80017ea:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80017ee:	2200      	movs	r2, #0
 80017f0:	601a      	str	r2, [r3, #0]
 80017f2:	605a      	str	r2, [r3, #4]
 80017f4:	609a      	str	r2, [r3, #8]
 80017f6:	f8c3 200b 	str.w	r2, [r3, #11]
  struct tcp_answer s_cmd_answer;
  struct tcp_command s_cmd_received;


  LWIP_ASSERT("arg != NULL",arg != NULL);
 80017fa:	68fb      	ldr	r3, [r7, #12]
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d105      	bne.n	800180c <tcp_server_recv+0x30>
 8001800:	4b5d      	ldr	r3, [pc, #372]	; (8001978 <tcp_server_recv+0x19c>)
 8001802:	22b6      	movs	r2, #182	; 0xb6
 8001804:	495d      	ldr	r1, [pc, #372]	; (800197c <tcp_server_recv+0x1a0>)
 8001806:	485e      	ldr	r0, [pc, #376]	; (8001980 <tcp_server_recv+0x1a4>)
 8001808:	f016 ff1e 	bl	8018648 <iprintf>

  es = (struct tcp_echoserver_struct *)arg;
 800180c:	68fb      	ldr	r3, [r7, #12]
 800180e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* if we receive an empty tcp frame from client => close connection */
  if (p == NULL)
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	2b00      	cmp	r3, #0
 8001814:	d117      	bne.n	8001846 <tcp_server_recv+0x6a>
  {
    /* remote host closed connection */
    es->state = ES_CLOSING;
 8001816:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001818:	2203      	movs	r2, #3
 800181a:	701a      	strb	r2, [r3, #0]
    if(es->p == NULL)
 800181c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800181e:	689b      	ldr	r3, [r3, #8]
 8001820:	2b00      	cmp	r3, #0
 8001822:	d104      	bne.n	800182e <tcp_server_recv+0x52>
    {
       /* we're done sending, close connection */
       tcp_server_connection_close(tpcb, es);
 8001824:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8001826:	68b8      	ldr	r0, [r7, #8]
 8001828:	f000 f956 	bl	8001ad8 <tcp_server_connection_close>
 800182c:	e007      	b.n	800183e <tcp_server_recv+0x62>
    }
    else
    {
      /* we're not done yet */
      /* acknowledge received packet */
      tcp_sent(tpcb, tcp_server_sent);
 800182e:	4955      	ldr	r1, [pc, #340]	; (8001984 <tcp_server_recv+0x1a8>)
 8001830:	68b8      	ldr	r0, [r7, #8]
 8001832:	f00d fa5f 	bl	800ecf4 <tcp_sent>

      /* send remaining data*/
      tcp_server_send(tpcb, es);
 8001836:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8001838:	68b8      	ldr	r0, [r7, #8]
 800183a:	f000 f8ff 	bl	8001a3c <tcp_server_send>
    }
    ret_err = ERR_OK;
 800183e:	2300      	movs	r3, #0
 8001840:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 8001844:	e092      	b.n	800196c <tcp_server_recv+0x190>
  }
  /* else : a non empty frame was received from client but for some reason err != ERR_OK */
  else if(err != ERR_OK)
 8001846:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800184a:	2b00      	cmp	r3, #0
 800184c:	d00c      	beq.n	8001868 <tcp_server_recv+0x8c>
  {
    /* free received pbuf*/
    if (p != NULL)
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	2b00      	cmp	r3, #0
 8001852:	d005      	beq.n	8001860 <tcp_server_recv+0x84>
    {
      es->p = NULL;
 8001854:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001856:	2200      	movs	r2, #0
 8001858:	609a      	str	r2, [r3, #8]
      pbuf_free(p);
 800185a:	6878      	ldr	r0, [r7, #4]
 800185c:	f00b fd78 	bl	800d350 <pbuf_free>
    }
    ret_err = err;
 8001860:	78fb      	ldrb	r3, [r7, #3]
 8001862:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 8001866:	e081      	b.n	800196c <tcp_server_recv+0x190>
  }
  else if(es->state == ES_ACCEPTED)
 8001868:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800186a:	781b      	ldrb	r3, [r3, #0]
 800186c:	2b01      	cmp	r3, #1
 800186e:	d132      	bne.n	80018d6 <tcp_server_recv+0xfa>
  {
    /* first data chunk in p->payload */
    es->state = ES_RECEIVED;
 8001870:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001872:	2202      	movs	r2, #2
 8001874:	701a      	strb	r2, [r3, #0]

    // Get the command from the data received over TCP
    F_TCP_paquetTocmd(p, &s_cmd_received);
 8001876:	f107 0314 	add.w	r3, r7, #20
 800187a:	4619      	mov	r1, r3
 800187c:	6878      	ldr	r0, [r7, #4]
 800187e:	f7fe fe87 	bl	8000590 <F_TCP_paquetTocmd>
    // Process the command received

    // Send back the answer of the command received


    F_Process_Command(s_cmd_received,&s_cmd_answer);
 8001882:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001886:	9300      	str	r3, [sp, #0]
 8001888:	f107 0314 	add.w	r3, r7, #20
 800188c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800188e:	f7fe ff63 	bl	8000758 <F_Process_Command>


    F_TCP_answerTotab(array, s_cmd_answer);
 8001892:	f107 0034 	add.w	r0, r7, #52	; 0x34
 8001896:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001898:	9300      	str	r3, [sp, #0]
 800189a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800189e:	cb0e      	ldmia	r3, {r1, r2, r3}
 80018a0:	f7fe fef8 	bl	8000694 <F_TCP_answerTotab>

    p->payload = array;
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	f107 0234 	add.w	r2, r7, #52	; 0x34
 80018aa:	605a      	str	r2, [r3, #4]
    p->len = NB_OCTETS_CMD;
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	220f      	movs	r2, #15
 80018b0:	815a      	strh	r2, [r3, #10]
    p->tot_len = NB_OCTETS_CMD;
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	220f      	movs	r2, #15
 80018b6:	811a      	strh	r2, [r3, #8]

    /* store reference to incoming pbuf (chain) */
        es->p = p;
 80018b8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80018ba:	687a      	ldr	r2, [r7, #4]
 80018bc:	609a      	str	r2, [r3, #8]
    /* initialize LwIP tcp_sent callback function */
    tcp_sent(tpcb, tcp_server_sent);
 80018be:	4931      	ldr	r1, [pc, #196]	; (8001984 <tcp_server_recv+0x1a8>)
 80018c0:	68b8      	ldr	r0, [r7, #8]
 80018c2:	f00d fa17 	bl	800ecf4 <tcp_sent>

    /* send back the received data (echo) */
    tcp_server_send(tpcb, es);
 80018c6:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80018c8:	68b8      	ldr	r0, [r7, #8]
 80018ca:	f000 f8b7 	bl	8001a3c <tcp_server_send>

    ret_err = ERR_OK;
 80018ce:	2300      	movs	r3, #0
 80018d0:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 80018d4:	e04a      	b.n	800196c <tcp_server_recv+0x190>

  }
  else if (es->state == ES_RECEIVED)
 80018d6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80018d8:	781b      	ldrb	r3, [r3, #0]
 80018da:	2b02      	cmp	r3, #2
 80018dc:	d137      	bne.n	800194e <tcp_server_recv+0x172>
  {
    /* more data received from client and previous data has been already sent*/
    if(es->p == NULL)
 80018de:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80018e0:	689b      	ldr	r3, [r3, #8]
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d128      	bne.n	8001938 <tcp_server_recv+0x15c>
    {

    	// Get the command from the data received over TCP
		F_TCP_paquetTocmd(p, &s_cmd_received);
 80018e6:	f107 0314 	add.w	r3, r7, #20
 80018ea:	4619      	mov	r1, r3
 80018ec:	6878      	ldr	r0, [r7, #4]
 80018ee:	f7fe fe4f 	bl	8000590 <F_TCP_paquetTocmd>
		// Process the command received

		// Send back the answer of the command received


		F_Process_Command(s_cmd_received,&s_cmd_answer);
 80018f2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80018f6:	9300      	str	r3, [sp, #0]
 80018f8:	f107 0314 	add.w	r3, r7, #20
 80018fc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80018fe:	f7fe ff2b 	bl	8000758 <F_Process_Command>


		F_TCP_answerTotab(array, s_cmd_answer);
 8001902:	f107 0034 	add.w	r0, r7, #52	; 0x34
 8001906:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001908:	9300      	str	r3, [sp, #0]
 800190a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800190e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001910:	f7fe fec0 	bl	8000694 <F_TCP_answerTotab>

		p->payload = array;
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	f107 0234 	add.w	r2, r7, #52	; 0x34
 800191a:	605a      	str	r2, [r3, #4]
		p->len = NB_OCTETS_CMD;
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	220f      	movs	r2, #15
 8001920:	815a      	strh	r2, [r3, #10]
		p->tot_len = NB_OCTETS_CMD;
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	220f      	movs	r2, #15
 8001926:	811a      	strh	r2, [r3, #8]

		es->p = p;
 8001928:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800192a:	687a      	ldr	r2, [r7, #4]
 800192c:	609a      	str	r2, [r3, #8]

      /* send back received data */
      tcp_server_send(tpcb, es);
 800192e:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8001930:	68b8      	ldr	r0, [r7, #8]
 8001932:	f000 f883 	bl	8001a3c <tcp_server_send>
 8001936:	e006      	b.n	8001946 <tcp_server_recv+0x16a>
    else
    {
      struct pbuf *ptr;

      /* chain pbufs to the end of what we recv'ed previously  */
      ptr = es->p;
 8001938:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800193a:	689b      	ldr	r3, [r3, #8]
 800193c:	647b      	str	r3, [r7, #68]	; 0x44
      pbuf_chain(ptr,p);
 800193e:	6879      	ldr	r1, [r7, #4]
 8001940:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8001942:	f00b fe35 	bl	800d5b0 <pbuf_chain>
    }
    ret_err = ERR_OK;
 8001946:	2300      	movs	r3, #0
 8001948:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 800194c:	e00e      	b.n	800196c <tcp_server_recv+0x190>

  /* data received when connection already closed */
  else
  {
    /* Acknowledge data reception */
    tcp_recved(tpcb, p->tot_len);
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	891b      	ldrh	r3, [r3, #8]
 8001952:	4619      	mov	r1, r3
 8001954:	68b8      	ldr	r0, [r7, #8]
 8001956:	f00c fbaf 	bl	800e0b8 <tcp_recved>

    /* free pbuf and do nothing */
    es->p = NULL;
 800195a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800195c:	2200      	movs	r2, #0
 800195e:	609a      	str	r2, [r3, #8]
    pbuf_free(p);
 8001960:	6878      	ldr	r0, [r7, #4]
 8001962:	f00b fcf5 	bl	800d350 <pbuf_free>
    ret_err = ERR_OK;
 8001966:	2300      	movs	r3, #0
 8001968:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  }
  return ret_err;
 800196c:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
}
 8001970:	4618      	mov	r0, r3
 8001972:	3750      	adds	r7, #80	; 0x50
 8001974:	46bd      	mov	sp, r7
 8001976:	bd80      	pop	{r7, pc}
 8001978:	08019410 	.word	0x08019410
 800197c:	0801942c 	.word	0x0801942c
 8001980:	08019438 	.word	0x08019438
 8001984:	080019ff 	.word	0x080019ff

08001988 <tcp_server_error>:
  * @param  arg: pointer on argument parameter
  * @param  err: not used
  * @retval None
  */
static void tcp_server_error(void *arg, err_t err)
{
 8001988:	b580      	push	{r7, lr}
 800198a:	b084      	sub	sp, #16
 800198c:	af00      	add	r7, sp, #0
 800198e:	6078      	str	r0, [r7, #4]
 8001990:	460b      	mov	r3, r1
 8001992:	70fb      	strb	r3, [r7, #3]
  struct tcp_echoserver_struct *es;

  LWIP_UNUSED_ARG(err);

  es = (struct tcp_echoserver_struct *)arg;
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	60fb      	str	r3, [r7, #12]
  if (es != NULL)
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	2b00      	cmp	r3, #0
 800199c:	d002      	beq.n	80019a4 <tcp_server_error+0x1c>
  {
    /*  free es structure */
    mem_free(es);
 800199e:	68f8      	ldr	r0, [r7, #12]
 80019a0:	f00a fc5a 	bl	800c258 <mem_free>
  }
}
 80019a4:	bf00      	nop
 80019a6:	3710      	adds	r7, #16
 80019a8:	46bd      	mov	sp, r7
 80019aa:	bd80      	pop	{r7, pc}

080019ac <tcp_server_poll>:
  * @param  arg: pointer on argument passed to callback
  * @param  tpcb: pointer on the tcp_pcb for the current tcp connection
  * @retval err_t: error code
  */
static err_t tcp_server_poll(void *arg, struct tcp_pcb *tpcb)
{
 80019ac:	b580      	push	{r7, lr}
 80019ae:	b084      	sub	sp, #16
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	6078      	str	r0, [r7, #4]
 80019b4:	6039      	str	r1, [r7, #0]
  err_t ret_err;
  struct tcp_echoserver_struct *es;

  es = (struct tcp_echoserver_struct *)arg;
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	60bb      	str	r3, [r7, #8]
  if (es != NULL)
 80019ba:	68bb      	ldr	r3, [r7, #8]
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d013      	beq.n	80019e8 <tcp_server_poll+0x3c>
  {
    if (es->p != NULL)
 80019c0:	68bb      	ldr	r3, [r7, #8]
 80019c2:	689b      	ldr	r3, [r3, #8]
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d004      	beq.n	80019d2 <tcp_server_poll+0x26>
    {
      /* there is a remaining pbuf (chain) , try to send data */
      tcp_server_send(tpcb, es);
 80019c8:	68b9      	ldr	r1, [r7, #8]
 80019ca:	6838      	ldr	r0, [r7, #0]
 80019cc:	f000 f836 	bl	8001a3c <tcp_server_send>
 80019d0:	e007      	b.n	80019e2 <tcp_server_poll+0x36>
    }
    else
    {
      /* no remaining pbuf (chain)  */
      if(es->state == ES_CLOSING)
 80019d2:	68bb      	ldr	r3, [r7, #8]
 80019d4:	781b      	ldrb	r3, [r3, #0]
 80019d6:	2b03      	cmp	r3, #3
 80019d8:	d103      	bne.n	80019e2 <tcp_server_poll+0x36>
      {
        /*  close tcp connection */
        tcp_server_connection_close(tpcb, es);
 80019da:	68b9      	ldr	r1, [r7, #8]
 80019dc:	6838      	ldr	r0, [r7, #0]
 80019de:	f000 f87b 	bl	8001ad8 <tcp_server_connection_close>
      }
    }
    ret_err = ERR_OK;
 80019e2:	2300      	movs	r3, #0
 80019e4:	73fb      	strb	r3, [r7, #15]
 80019e6:	e004      	b.n	80019f2 <tcp_server_poll+0x46>
  }
  else
  {
    /* nothing to be done */
    tcp_abort(tpcb);
 80019e8:	6838      	ldr	r0, [r7, #0]
 80019ea:	f00c f9bf 	bl	800dd6c <tcp_abort>
    ret_err = ERR_ABRT;
 80019ee:	23f3      	movs	r3, #243	; 0xf3
 80019f0:	73fb      	strb	r3, [r7, #15]
  }
  return ret_err;
 80019f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80019f6:	4618      	mov	r0, r3
 80019f8:	3710      	adds	r7, #16
 80019fa:	46bd      	mov	sp, r7
 80019fc:	bd80      	pop	{r7, pc}

080019fe <tcp_server_sent>:
  *         is received from remote host for sent data)
  * @param  None
  * @retval None
  */
static err_t tcp_server_sent(void *arg, struct tcp_pcb *tpcb, u16_t len)
{
 80019fe:	b580      	push	{r7, lr}
 8001a00:	b086      	sub	sp, #24
 8001a02:	af00      	add	r7, sp, #0
 8001a04:	60f8      	str	r0, [r7, #12]
 8001a06:	60b9      	str	r1, [r7, #8]
 8001a08:	4613      	mov	r3, r2
 8001a0a:	80fb      	strh	r3, [r7, #6]
  struct tcp_echoserver_struct *es;

  LWIP_UNUSED_ARG(len);

  es = (struct tcp_echoserver_struct *)arg;
 8001a0c:	68fb      	ldr	r3, [r7, #12]
 8001a0e:	617b      	str	r3, [r7, #20]

  if(es->p != NULL)
 8001a10:	697b      	ldr	r3, [r7, #20]
 8001a12:	689b      	ldr	r3, [r3, #8]
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d004      	beq.n	8001a22 <tcp_server_sent+0x24>
  {
    /* still got pbufs to send */
    tcp_server_send(tpcb, es);
 8001a18:	6979      	ldr	r1, [r7, #20]
 8001a1a:	68b8      	ldr	r0, [r7, #8]
 8001a1c:	f000 f80e 	bl	8001a3c <tcp_server_send>
 8001a20:	e007      	b.n	8001a32 <tcp_server_sent+0x34>
  }
  else
  {
    /* if no more data to send and client closed connection*/
    if(es->state == ES_CLOSING)
 8001a22:	697b      	ldr	r3, [r7, #20]
 8001a24:	781b      	ldrb	r3, [r3, #0]
 8001a26:	2b03      	cmp	r3, #3
 8001a28:	d103      	bne.n	8001a32 <tcp_server_sent+0x34>
      tcp_server_connection_close(tpcb, es);
 8001a2a:	6979      	ldr	r1, [r7, #20]
 8001a2c:	68b8      	ldr	r0, [r7, #8]
 8001a2e:	f000 f853 	bl	8001ad8 <tcp_server_connection_close>
  }
  return ERR_OK;
 8001a32:	2300      	movs	r3, #0
}
 8001a34:	4618      	mov	r0, r3
 8001a36:	3718      	adds	r7, #24
 8001a38:	46bd      	mov	sp, r7
 8001a3a:	bd80      	pop	{r7, pc}

08001a3c <tcp_server_send>:
  * @param  tpcb: pointer on the tcp_pcb connection
  * @param  es: pointer on echo_state structure
  * @retval None
  */
static void tcp_server_send(struct tcp_pcb *tpcb, struct tcp_echoserver_struct *es)
{
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	b086      	sub	sp, #24
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	6078      	str	r0, [r7, #4]
 8001a44:	6039      	str	r1, [r7, #0]
  struct pbuf *ptr;
  err_t wr_err = ERR_OK;
 8001a46:	2300      	movs	r3, #0
 8001a48:	75fb      	strb	r3, [r7, #23]


  while ((wr_err == ERR_OK) &&
 8001a4a:	e031      	b.n	8001ab0 <tcp_server_send+0x74>
         (es->p != NULL) &&
         (es->p->len <= tcp_sndbuf(tpcb)))
  {

    /* get pointer on pbuf from es structure */
    ptr = es->p;
 8001a4c:	683b      	ldr	r3, [r7, #0]
 8001a4e:	689b      	ldr	r3, [r3, #8]
 8001a50:	613b      	str	r3, [r7, #16]

    /* enqueue data for transmission */
    wr_err = tcp_write(tpcb, ptr->payload, ptr->len, 1);
 8001a52:	693b      	ldr	r3, [r7, #16]
 8001a54:	6859      	ldr	r1, [r3, #4]
 8001a56:	693b      	ldr	r3, [r7, #16]
 8001a58:	895a      	ldrh	r2, [r3, #10]
 8001a5a:	2301      	movs	r3, #1
 8001a5c:	6878      	ldr	r0, [r7, #4]
 8001a5e:	f00f ff57 	bl	8011910 <tcp_write>
 8001a62:	4603      	mov	r3, r0
 8001a64:	75fb      	strb	r3, [r7, #23]

    if (wr_err == ERR_OK)
 8001a66:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d118      	bne.n	8001aa0 <tcp_server_send+0x64>
    {
      u16_t plen;

      plen = ptr->len;
 8001a6e:	693b      	ldr	r3, [r7, #16]
 8001a70:	895b      	ldrh	r3, [r3, #10]
 8001a72:	81fb      	strh	r3, [r7, #14]

      /* continue with next pbuf in chain (if any) */
      es->p = ptr->next;
 8001a74:	693b      	ldr	r3, [r7, #16]
 8001a76:	681a      	ldr	r2, [r3, #0]
 8001a78:	683b      	ldr	r3, [r7, #0]
 8001a7a:	609a      	str	r2, [r3, #8]

      if(es->p != NULL)
 8001a7c:	683b      	ldr	r3, [r7, #0]
 8001a7e:	689b      	ldr	r3, [r3, #8]
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d004      	beq.n	8001a8e <tcp_server_send+0x52>
      {
        /* increment reference count for es->p */
        pbuf_ref(es->p);
 8001a84:	683b      	ldr	r3, [r7, #0]
 8001a86:	689b      	ldr	r3, [r3, #8]
 8001a88:	4618      	mov	r0, r3
 8001a8a:	f00b fd13 	bl	800d4b4 <pbuf_ref>
      }

      /* free pbuf: will free pbufs up to es->p (because es->p has a reference count > 0) */
      pbuf_free(ptr);
 8001a8e:	6938      	ldr	r0, [r7, #16]
 8001a90:	f00b fc5e 	bl	800d350 <pbuf_free>

      /* Update tcp window size to be advertized : should be called when received
      data (with the amount plen) has been processed by the application layer */
      tcp_recved(tpcb, plen);
 8001a94:	89fb      	ldrh	r3, [r7, #14]
 8001a96:	4619      	mov	r1, r3
 8001a98:	6878      	ldr	r0, [r7, #4]
 8001a9a:	f00c fb0d 	bl	800e0b8 <tcp_recved>
 8001a9e:	e007      	b.n	8001ab0 <tcp_server_send+0x74>
   }
   else if(wr_err == ERR_MEM)
 8001aa0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001aa4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001aa8:	d102      	bne.n	8001ab0 <tcp_server_send+0x74>
   {
      /* we are low on memory, try later / harder, defer to poll */
     es->p = ptr;
 8001aaa:	683b      	ldr	r3, [r7, #0]
 8001aac:	693a      	ldr	r2, [r7, #16]
 8001aae:	609a      	str	r2, [r3, #8]
  while ((wr_err == ERR_OK) &&
 8001ab0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d10b      	bne.n	8001ad0 <tcp_server_send+0x94>
         (es->p != NULL) &&
 8001ab8:	683b      	ldr	r3, [r7, #0]
 8001aba:	689b      	ldr	r3, [r3, #8]
  while ((wr_err == ERR_OK) &&
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d007      	beq.n	8001ad0 <tcp_server_send+0x94>
         (es->p->len <= tcp_sndbuf(tpcb)))
 8001ac0:	683b      	ldr	r3, [r7, #0]
 8001ac2:	689b      	ldr	r3, [r3, #8]
 8001ac4:	895a      	ldrh	r2, [r3, #10]
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
         (es->p != NULL) &&
 8001acc:	429a      	cmp	r2, r3
 8001ace:	d9bd      	bls.n	8001a4c <tcp_server_send+0x10>
   else
   {
     /* other problem ?? */
   }
  }
}
 8001ad0:	bf00      	nop
 8001ad2:	3718      	adds	r7, #24
 8001ad4:	46bd      	mov	sp, r7
 8001ad6:	bd80      	pop	{r7, pc}

08001ad8 <tcp_server_connection_close>:
  * @param  tcp_pcb: pointer on the tcp connection
  * @param  es: pointer on echo_state structure
  * @retval None
  */
static void tcp_server_connection_close(struct tcp_pcb *tpcb, struct tcp_echoserver_struct *es)
{
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	b082      	sub	sp, #8
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	6078      	str	r0, [r7, #4]
 8001ae0:	6039      	str	r1, [r7, #0]

  /* remove all callbacks */
  tcp_arg(tpcb, NULL);
 8001ae2:	2100      	movs	r1, #0
 8001ae4:	6878      	ldr	r0, [r7, #4]
 8001ae6:	f00d f8d1 	bl	800ec8c <tcp_arg>
  tcp_sent(tpcb, NULL);
 8001aea:	2100      	movs	r1, #0
 8001aec:	6878      	ldr	r0, [r7, #4]
 8001aee:	f00d f901 	bl	800ecf4 <tcp_sent>
  tcp_recv(tpcb, NULL);
 8001af2:	2100      	movs	r1, #0
 8001af4:	6878      	ldr	r0, [r7, #4]
 8001af6:	f00d f8db 	bl	800ecb0 <tcp_recv>
  tcp_err(tpcb, NULL);
 8001afa:	2100      	movs	r1, #0
 8001afc:	6878      	ldr	r0, [r7, #4]
 8001afe:	f00d f919 	bl	800ed34 <tcp_err>
  tcp_poll(tpcb, NULL, 0);
 8001b02:	2200      	movs	r2, #0
 8001b04:	2100      	movs	r1, #0
 8001b06:	6878      	ldr	r0, [r7, #4]
 8001b08:	f00d f94e 	bl	800eda8 <tcp_poll>

  /* delete es structure */
  if (es != NULL)
 8001b0c:	683b      	ldr	r3, [r7, #0]
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d002      	beq.n	8001b18 <tcp_server_connection_close+0x40>
  {
    mem_free(es);
 8001b12:	6838      	ldr	r0, [r7, #0]
 8001b14:	f00a fba0 	bl	800c258 <mem_free>
  }

  /* close tcp connection */
  tcp_close(tpcb);
 8001b18:	6878      	ldr	r0, [r7, #4]
 8001b1a:	f00c f85d 	bl	800dbd8 <tcp_close>
}
 8001b1e:	bf00      	nop
 8001b20:	3708      	adds	r7, #8
 8001b22:	46bd      	mov	sp, r7
 8001b24:	bd80      	pop	{r7, pc}

08001b26 <LL_USART_Enable>:
  * @rmtoll CR1          UE            LL_USART_Enable
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_Enable(USART_TypeDef *USARTx)
{
 8001b26:	b480      	push	{r7}
 8001b28:	b083      	sub	sp, #12
 8001b2a:	af00      	add	r7, sp, #0
 8001b2c:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	68db      	ldr	r3, [r3, #12]
 8001b32:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	60da      	str	r2, [r3, #12]
}
 8001b3a:	bf00      	nop
 8001b3c:	370c      	adds	r7, #12
 8001b3e:	46bd      	mov	sp, r7
 8001b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b44:	4770      	bx	lr

08001b46 <LL_USART_ConfigAsyncMode>:
  *         CR3          HDSEL         LL_USART_ConfigAsyncMode
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ConfigAsyncMode(USART_TypeDef *USARTx)
{
 8001b46:	b480      	push	{r7}
 8001b48:	b083      	sub	sp, #12
 8001b4a:	af00      	add	r7, sp, #0
 8001b4c:	6078      	str	r0, [r7, #4]
  /* In Asynchronous mode, the following bits must be kept cleared:
  - LINEN, CLKEN bits in the USART_CR2 register,
  - SCEN, IREN and HDSEL bits in the USART_CR3 register.*/
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	691b      	ldr	r3, [r3, #16]
 8001b52:	f423 4290 	bic.w	r2, r3, #18432	; 0x4800
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	695b      	ldr	r3, [r3, #20]
 8001b5e:	f023 022a 	bic.w	r2, r3, #42	; 0x2a
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	615a      	str	r2, [r3, #20]
}
 8001b66:	bf00      	nop
 8001b68:	370c      	adds	r7, #12
 8001b6a:	46bd      	mov	sp, r7
 8001b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b70:	4770      	bx	lr
	...

08001b74 <LL_AHB1_GRP1_EnableClock>:
{
 8001b74:	b480      	push	{r7}
 8001b76:	b085      	sub	sp, #20
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8001b7c:	4b08      	ldr	r3, [pc, #32]	; (8001ba0 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001b7e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001b80:	4907      	ldr	r1, [pc, #28]	; (8001ba0 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	4313      	orrs	r3, r2
 8001b86:	630b      	str	r3, [r1, #48]	; 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8001b88:	4b05      	ldr	r3, [pc, #20]	; (8001ba0 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001b8a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	4013      	ands	r3, r2
 8001b90:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001b92:	68fb      	ldr	r3, [r7, #12]
}
 8001b94:	bf00      	nop
 8001b96:	3714      	adds	r7, #20
 8001b98:	46bd      	mov	sp, r7
 8001b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b9e:	4770      	bx	lr
 8001ba0:	40023800 	.word	0x40023800

08001ba4 <LL_APB1_GRP1_EnableClock>:
{
 8001ba4:	b480      	push	{r7}
 8001ba6:	b085      	sub	sp, #20
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 8001bac:	4b08      	ldr	r3, [pc, #32]	; (8001bd0 <LL_APB1_GRP1_EnableClock+0x2c>)
 8001bae:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001bb0:	4907      	ldr	r1, [pc, #28]	; (8001bd0 <LL_APB1_GRP1_EnableClock+0x2c>)
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	4313      	orrs	r3, r2
 8001bb6:	640b      	str	r3, [r1, #64]	; 0x40
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8001bb8:	4b05      	ldr	r3, [pc, #20]	; (8001bd0 <LL_APB1_GRP1_EnableClock+0x2c>)
 8001bba:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	4013      	ands	r3, r2
 8001bc0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001bc2:	68fb      	ldr	r3, [r7, #12]
}
 8001bc4:	bf00      	nop
 8001bc6:	3714      	adds	r7, #20
 8001bc8:	46bd      	mov	sp, r7
 8001bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bce:	4770      	bx	lr
 8001bd0:	40023800 	.word	0x40023800

08001bd4 <MX_USART3_UART_Init>:
/* USER CODE END 0 */

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8001bd4:	b580      	push	{r7, lr}
 8001bd6:	b08e      	sub	sp, #56	; 0x38
 8001bd8:	af00      	add	r7, sp, #0
  LL_USART_InitTypeDef USART_InitStruct = {0};
 8001bda:	f107 031c 	add.w	r3, r7, #28
 8001bde:	2200      	movs	r2, #0
 8001be0:	601a      	str	r2, [r3, #0]
 8001be2:	605a      	str	r2, [r3, #4]
 8001be4:	609a      	str	r2, [r3, #8]
 8001be6:	60da      	str	r2, [r3, #12]
 8001be8:	611a      	str	r2, [r3, #16]
 8001bea:	615a      	str	r2, [r3, #20]
 8001bec:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bee:	1d3b      	adds	r3, r7, #4
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	601a      	str	r2, [r3, #0]
 8001bf4:	605a      	str	r2, [r3, #4]
 8001bf6:	609a      	str	r2, [r3, #8]
 8001bf8:	60da      	str	r2, [r3, #12]
 8001bfa:	611a      	str	r2, [r3, #16]
 8001bfc:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_USART3);
 8001bfe:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8001c02:	f7ff ffcf 	bl	8001ba4 <LL_APB1_GRP1_EnableClock>
  
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOD);
 8001c06:	2008      	movs	r0, #8
 8001c08:	f7ff ffb4 	bl	8001b74 <LL_AHB1_GRP1_EnableClock>
  /**USART3 GPIO Configuration  
  PD8   ------> USART3_TX
  PD9   ------> USART3_RX 
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_8|LL_GPIO_PIN_9;
 8001c0c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001c10:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001c12:	2302      	movs	r3, #2
 8001c14:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8001c16:	2303      	movs	r3, #3
 8001c18:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001c1a:	2300      	movs	r3, #0
 8001c1c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8001c1e:	2301      	movs	r3, #1
 8001c20:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 8001c22:	2307      	movs	r3, #7
 8001c24:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001c26:	1d3b      	adds	r3, r7, #4
 8001c28:	4619      	mov	r1, r3
 8001c2a:	4811      	ldr	r0, [pc, #68]	; (8001c70 <MX_USART3_UART_Init+0x9c>)
 8001c2c:	f003 fc0b 	bl	8005446 <LL_GPIO_Init>

  USART_InitStruct.BaudRate = 115200;
 8001c30:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8001c34:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8001c36:	2300      	movs	r3, #0
 8001c38:	623b      	str	r3, [r7, #32]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8001c3a:	2300      	movs	r3, #0
 8001c3c:	627b      	str	r3, [r7, #36]	; 0x24
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8001c3e:	2300      	movs	r3, #0
 8001c40:	62bb      	str	r3, [r7, #40]	; 0x28
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8001c42:	230c      	movs	r3, #12
 8001c44:	62fb      	str	r3, [r7, #44]	; 0x2c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8001c46:	2300      	movs	r3, #0
 8001c48:	633b      	str	r3, [r7, #48]	; 0x30
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8001c4a:	2300      	movs	r3, #0
 8001c4c:	637b      	str	r3, [r7, #52]	; 0x34
  LL_USART_Init(USART3, &USART_InitStruct);
 8001c4e:	f107 031c 	add.w	r3, r7, #28
 8001c52:	4619      	mov	r1, r3
 8001c54:	4807      	ldr	r0, [pc, #28]	; (8001c74 <MX_USART3_UART_Init+0xa0>)
 8001c56:	f003 ffd9 	bl	8005c0c <LL_USART_Init>
  LL_USART_ConfigAsyncMode(USART3);
 8001c5a:	4806      	ldr	r0, [pc, #24]	; (8001c74 <MX_USART3_UART_Init+0xa0>)
 8001c5c:	f7ff ff73 	bl	8001b46 <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART3);
 8001c60:	4804      	ldr	r0, [pc, #16]	; (8001c74 <MX_USART3_UART_Init+0xa0>)
 8001c62:	f7ff ff60 	bl	8001b26 <LL_USART_Enable>

}
 8001c66:	bf00      	nop
 8001c68:	3738      	adds	r7, #56	; 0x38
 8001c6a:	46bd      	mov	sp, r7
 8001c6c:	bd80      	pop	{r7, pc}
 8001c6e:	bf00      	nop
 8001c70:	40020c00 	.word	0x40020c00
 8001c74:	40004800 	.word	0x40004800

08001c78 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8001c78:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001cb0 <LoopFillZerobss+0x14>
 
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001c7c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001c7e:	e003      	b.n	8001c88 <LoopCopyDataInit>

08001c80 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001c80:	4b0c      	ldr	r3, [pc, #48]	; (8001cb4 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001c82:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001c84:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001c86:	3104      	adds	r1, #4

08001c88 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001c88:	480b      	ldr	r0, [pc, #44]	; (8001cb8 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001c8a:	4b0c      	ldr	r3, [pc, #48]	; (8001cbc <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001c8c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001c8e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001c90:	d3f6      	bcc.n	8001c80 <CopyDataInit>
  ldr  r2, =_sbss
 8001c92:	4a0b      	ldr	r2, [pc, #44]	; (8001cc0 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001c94:	e002      	b.n	8001c9c <LoopFillZerobss>

08001c96 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001c96:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001c98:	f842 3b04 	str.w	r3, [r2], #4

08001c9c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001c9c:	4b09      	ldr	r3, [pc, #36]	; (8001cc4 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001c9e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001ca0:	d3f9      	bcc.n	8001c96 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001ca2:	f7ff fce9 	bl	8001678 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001ca6:	f016 fbd1 	bl	801844c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001caa:	f7ff fafd 	bl	80012a8 <main>
  bx  lr    
 8001cae:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8001cb0:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 8001cb4:	0801b988 	.word	0x0801b988
  ldr  r0, =_sdata
 8001cb8:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001cbc:	200001f0 	.word	0x200001f0
  ldr  r2, =_sbss
 8001cc0:	200001f0 	.word	0x200001f0
  ldr  r3, = _ebss
 8001cc4:	2000c524 	.word	0x2000c524

08001cc8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001cc8:	e7fe      	b.n	8001cc8 <ADC_IRQHandler>
	...

08001ccc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001cd0:	4b0e      	ldr	r3, [pc, #56]	; (8001d0c <HAL_Init+0x40>)
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	4a0d      	ldr	r2, [pc, #52]	; (8001d0c <HAL_Init+0x40>)
 8001cd6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001cda:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001cdc:	4b0b      	ldr	r3, [pc, #44]	; (8001d0c <HAL_Init+0x40>)
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	4a0a      	ldr	r2, [pc, #40]	; (8001d0c <HAL_Init+0x40>)
 8001ce2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001ce6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001ce8:	4b08      	ldr	r3, [pc, #32]	; (8001d0c <HAL_Init+0x40>)
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	4a07      	ldr	r2, [pc, #28]	; (8001d0c <HAL_Init+0x40>)
 8001cee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001cf2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001cf4:	2003      	movs	r0, #3
 8001cf6:	f000 f8fa 	bl	8001eee <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001cfa:	2000      	movs	r0, #0
 8001cfc:	f7ff fb98 	bl	8001430 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001d00:	f7ff fb6a 	bl	80013d8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001d04:	2300      	movs	r3, #0
}
 8001d06:	4618      	mov	r0, r3
 8001d08:	bd80      	pop	{r7, pc}
 8001d0a:	bf00      	nop
 8001d0c:	40023c00 	.word	0x40023c00

08001d10 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001d10:	b480      	push	{r7}
 8001d12:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001d14:	4b06      	ldr	r3, [pc, #24]	; (8001d30 <HAL_IncTick+0x20>)
 8001d16:	781b      	ldrb	r3, [r3, #0]
 8001d18:	461a      	mov	r2, r3
 8001d1a:	4b06      	ldr	r3, [pc, #24]	; (8001d34 <HAL_IncTick+0x24>)
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	4413      	add	r3, r2
 8001d20:	4a04      	ldr	r2, [pc, #16]	; (8001d34 <HAL_IncTick+0x24>)
 8001d22:	6013      	str	r3, [r2, #0]
}
 8001d24:	bf00      	nop
 8001d26:	46bd      	mov	sp, r7
 8001d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d2c:	4770      	bx	lr
 8001d2e:	bf00      	nop
 8001d30:	20000004 	.word	0x20000004
 8001d34:	200043d4 	.word	0x200043d4

08001d38 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001d38:	b480      	push	{r7}
 8001d3a:	af00      	add	r7, sp, #0
  return uwTick;
 8001d3c:	4b03      	ldr	r3, [pc, #12]	; (8001d4c <HAL_GetTick+0x14>)
 8001d3e:	681b      	ldr	r3, [r3, #0]
}
 8001d40:	4618      	mov	r0, r3
 8001d42:	46bd      	mov	sp, r7
 8001d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d48:	4770      	bx	lr
 8001d4a:	bf00      	nop
 8001d4c:	200043d4 	.word	0x200043d4

08001d50 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001d50:	b580      	push	{r7, lr}
 8001d52:	b084      	sub	sp, #16
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001d58:	f7ff ffee 	bl	8001d38 <HAL_GetTick>
 8001d5c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001d68:	d005      	beq.n	8001d76 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001d6a:	4b09      	ldr	r3, [pc, #36]	; (8001d90 <HAL_Delay+0x40>)
 8001d6c:	781b      	ldrb	r3, [r3, #0]
 8001d6e:	461a      	mov	r2, r3
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	4413      	add	r3, r2
 8001d74:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001d76:	bf00      	nop
 8001d78:	f7ff ffde 	bl	8001d38 <HAL_GetTick>
 8001d7c:	4602      	mov	r2, r0
 8001d7e:	68bb      	ldr	r3, [r7, #8]
 8001d80:	1ad3      	subs	r3, r2, r3
 8001d82:	68fa      	ldr	r2, [r7, #12]
 8001d84:	429a      	cmp	r2, r3
 8001d86:	d8f7      	bhi.n	8001d78 <HAL_Delay+0x28>
  {
  }
}
 8001d88:	bf00      	nop
 8001d8a:	3710      	adds	r7, #16
 8001d8c:	46bd      	mov	sp, r7
 8001d8e:	bd80      	pop	{r7, pc}
 8001d90:	20000004 	.word	0x20000004

08001d94 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d94:	b480      	push	{r7}
 8001d96:	b085      	sub	sp, #20
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	f003 0307 	and.w	r3, r3, #7
 8001da2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001da4:	4b0c      	ldr	r3, [pc, #48]	; (8001dd8 <__NVIC_SetPriorityGrouping+0x44>)
 8001da6:	68db      	ldr	r3, [r3, #12]
 8001da8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001daa:	68ba      	ldr	r2, [r7, #8]
 8001dac:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001db0:	4013      	ands	r3, r2
 8001db2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001db8:	68bb      	ldr	r3, [r7, #8]
 8001dba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001dbc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001dc0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001dc4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001dc6:	4a04      	ldr	r2, [pc, #16]	; (8001dd8 <__NVIC_SetPriorityGrouping+0x44>)
 8001dc8:	68bb      	ldr	r3, [r7, #8]
 8001dca:	60d3      	str	r3, [r2, #12]
}
 8001dcc:	bf00      	nop
 8001dce:	3714      	adds	r7, #20
 8001dd0:	46bd      	mov	sp, r7
 8001dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd6:	4770      	bx	lr
 8001dd8:	e000ed00 	.word	0xe000ed00

08001ddc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001ddc:	b480      	push	{r7}
 8001dde:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001de0:	4b04      	ldr	r3, [pc, #16]	; (8001df4 <__NVIC_GetPriorityGrouping+0x18>)
 8001de2:	68db      	ldr	r3, [r3, #12]
 8001de4:	0a1b      	lsrs	r3, r3, #8
 8001de6:	f003 0307 	and.w	r3, r3, #7
}
 8001dea:	4618      	mov	r0, r3
 8001dec:	46bd      	mov	sp, r7
 8001dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df2:	4770      	bx	lr
 8001df4:	e000ed00 	.word	0xe000ed00

08001df8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001df8:	b480      	push	{r7}
 8001dfa:	b083      	sub	sp, #12
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	4603      	mov	r3, r0
 8001e00:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	db0b      	blt.n	8001e22 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001e0a:	79fb      	ldrb	r3, [r7, #7]
 8001e0c:	f003 021f 	and.w	r2, r3, #31
 8001e10:	4907      	ldr	r1, [pc, #28]	; (8001e30 <__NVIC_EnableIRQ+0x38>)
 8001e12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e16:	095b      	lsrs	r3, r3, #5
 8001e18:	2001      	movs	r0, #1
 8001e1a:	fa00 f202 	lsl.w	r2, r0, r2
 8001e1e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001e22:	bf00      	nop
 8001e24:	370c      	adds	r7, #12
 8001e26:	46bd      	mov	sp, r7
 8001e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e2c:	4770      	bx	lr
 8001e2e:	bf00      	nop
 8001e30:	e000e100 	.word	0xe000e100

08001e34 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001e34:	b480      	push	{r7}
 8001e36:	b083      	sub	sp, #12
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	4603      	mov	r3, r0
 8001e3c:	6039      	str	r1, [r7, #0]
 8001e3e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e40:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	db0a      	blt.n	8001e5e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e48:	683b      	ldr	r3, [r7, #0]
 8001e4a:	b2da      	uxtb	r2, r3
 8001e4c:	490c      	ldr	r1, [pc, #48]	; (8001e80 <__NVIC_SetPriority+0x4c>)
 8001e4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e52:	0112      	lsls	r2, r2, #4
 8001e54:	b2d2      	uxtb	r2, r2
 8001e56:	440b      	add	r3, r1
 8001e58:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001e5c:	e00a      	b.n	8001e74 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e5e:	683b      	ldr	r3, [r7, #0]
 8001e60:	b2da      	uxtb	r2, r3
 8001e62:	4908      	ldr	r1, [pc, #32]	; (8001e84 <__NVIC_SetPriority+0x50>)
 8001e64:	79fb      	ldrb	r3, [r7, #7]
 8001e66:	f003 030f 	and.w	r3, r3, #15
 8001e6a:	3b04      	subs	r3, #4
 8001e6c:	0112      	lsls	r2, r2, #4
 8001e6e:	b2d2      	uxtb	r2, r2
 8001e70:	440b      	add	r3, r1
 8001e72:	761a      	strb	r2, [r3, #24]
}
 8001e74:	bf00      	nop
 8001e76:	370c      	adds	r7, #12
 8001e78:	46bd      	mov	sp, r7
 8001e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e7e:	4770      	bx	lr
 8001e80:	e000e100 	.word	0xe000e100
 8001e84:	e000ed00 	.word	0xe000ed00

08001e88 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e88:	b480      	push	{r7}
 8001e8a:	b089      	sub	sp, #36	; 0x24
 8001e8c:	af00      	add	r7, sp, #0
 8001e8e:	60f8      	str	r0, [r7, #12]
 8001e90:	60b9      	str	r1, [r7, #8]
 8001e92:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	f003 0307 	and.w	r3, r3, #7
 8001e9a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001e9c:	69fb      	ldr	r3, [r7, #28]
 8001e9e:	f1c3 0307 	rsb	r3, r3, #7
 8001ea2:	2b04      	cmp	r3, #4
 8001ea4:	bf28      	it	cs
 8001ea6:	2304      	movcs	r3, #4
 8001ea8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001eaa:	69fb      	ldr	r3, [r7, #28]
 8001eac:	3304      	adds	r3, #4
 8001eae:	2b06      	cmp	r3, #6
 8001eb0:	d902      	bls.n	8001eb8 <NVIC_EncodePriority+0x30>
 8001eb2:	69fb      	ldr	r3, [r7, #28]
 8001eb4:	3b03      	subs	r3, #3
 8001eb6:	e000      	b.n	8001eba <NVIC_EncodePriority+0x32>
 8001eb8:	2300      	movs	r3, #0
 8001eba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ebc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001ec0:	69bb      	ldr	r3, [r7, #24]
 8001ec2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ec6:	43da      	mvns	r2, r3
 8001ec8:	68bb      	ldr	r3, [r7, #8]
 8001eca:	401a      	ands	r2, r3
 8001ecc:	697b      	ldr	r3, [r7, #20]
 8001ece:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ed0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001ed4:	697b      	ldr	r3, [r7, #20]
 8001ed6:	fa01 f303 	lsl.w	r3, r1, r3
 8001eda:	43d9      	mvns	r1, r3
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ee0:	4313      	orrs	r3, r2
         );
}
 8001ee2:	4618      	mov	r0, r3
 8001ee4:	3724      	adds	r7, #36	; 0x24
 8001ee6:	46bd      	mov	sp, r7
 8001ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eec:	4770      	bx	lr

08001eee <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001eee:	b580      	push	{r7, lr}
 8001ef0:	b082      	sub	sp, #8
 8001ef2:	af00      	add	r7, sp, #0
 8001ef4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001ef6:	6878      	ldr	r0, [r7, #4]
 8001ef8:	f7ff ff4c 	bl	8001d94 <__NVIC_SetPriorityGrouping>
}
 8001efc:	bf00      	nop
 8001efe:	3708      	adds	r7, #8
 8001f00:	46bd      	mov	sp, r7
 8001f02:	bd80      	pop	{r7, pc}

08001f04 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001f04:	b580      	push	{r7, lr}
 8001f06:	b086      	sub	sp, #24
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	4603      	mov	r3, r0
 8001f0c:	60b9      	str	r1, [r7, #8]
 8001f0e:	607a      	str	r2, [r7, #4]
 8001f10:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001f12:	2300      	movs	r3, #0
 8001f14:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001f16:	f7ff ff61 	bl	8001ddc <__NVIC_GetPriorityGrouping>
 8001f1a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001f1c:	687a      	ldr	r2, [r7, #4]
 8001f1e:	68b9      	ldr	r1, [r7, #8]
 8001f20:	6978      	ldr	r0, [r7, #20]
 8001f22:	f7ff ffb1 	bl	8001e88 <NVIC_EncodePriority>
 8001f26:	4602      	mov	r2, r0
 8001f28:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f2c:	4611      	mov	r1, r2
 8001f2e:	4618      	mov	r0, r3
 8001f30:	f7ff ff80 	bl	8001e34 <__NVIC_SetPriority>
}
 8001f34:	bf00      	nop
 8001f36:	3718      	adds	r7, #24
 8001f38:	46bd      	mov	sp, r7
 8001f3a:	bd80      	pop	{r7, pc}

08001f3c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f3c:	b580      	push	{r7, lr}
 8001f3e:	b082      	sub	sp, #8
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	4603      	mov	r3, r0
 8001f44:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001f46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f4a:	4618      	mov	r0, r3
 8001f4c:	f7ff ff54 	bl	8001df8 <__NVIC_EnableIRQ>
}
 8001f50:	bf00      	nop
 8001f52:	3708      	adds	r7, #8
 8001f54:	46bd      	mov	sp, r7
 8001f56:	bd80      	pop	{r7, pc}

08001f58 <HAL_ETH_Init>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8001f58:	b580      	push	{r7, lr}
 8001f5a:	b088      	sub	sp, #32
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1 = 0U, phyreg = 0U;
 8001f60:	2300      	movs	r3, #0
 8001f62:	61fb      	str	r3, [r7, #28]
 8001f64:	2300      	movs	r3, #0
 8001f66:	60fb      	str	r3, [r7, #12]
  uint32_t hclk = 60000000U;
 8001f68:	4baa      	ldr	r3, [pc, #680]	; (8002214 <HAL_ETH_Init+0x2bc>)
 8001f6a:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart = 0U;
 8001f6c:	2300      	movs	r3, #0
 8001f6e:	617b      	str	r3, [r7, #20]
  uint32_t err = ETH_SUCCESS;
 8001f70:	2300      	movs	r3, #0
 8001f72:	613b      	str	r3, [r7, #16]
  
  /* Check the ETH peripheral state */
  if(heth == NULL)
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d101      	bne.n	8001f7e <HAL_ETH_Init+0x26>
  {
    return HAL_ERROR;
 8001f7a:	2301      	movs	r3, #1
 8001f7c:	e185      	b.n	800228a <HAL_ETH_Init+0x332>
  assert_param(IS_ETH_AUTONEGOTIATION(heth->Init.AutoNegotiation));
  assert_param(IS_ETH_RX_MODE(heth->Init.RxMode));
  assert_param(IS_ETH_CHECKSUM_MODE(heth->Init.ChecksumMode));
  assert_param(IS_ETH_MEDIA_INTERFACE(heth->Init.MediaInterface));  
  
  if(heth->State == HAL_ETH_STATE_RESET)
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001f84:	b2db      	uxtb	r3, r3
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d106      	bne.n	8001f98 <HAL_ETH_Init+0x40>
  {
    /* Allocate lock resource and initialize it */
    heth->Lock = HAL_UNLOCKED;
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	2200      	movs	r2, #0
 8001f8e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    heth->MspInitCallback(heth);

#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8001f92:	6878      	ldr	r0, [r7, #4]
 8001f94:	f005 f9ea 	bl	800736c <HAL_ETH_MspInit>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
  
  /* Enable SYSCFG Clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f98:	2300      	movs	r3, #0
 8001f9a:	60bb      	str	r3, [r7, #8]
 8001f9c:	4b9e      	ldr	r3, [pc, #632]	; (8002218 <HAL_ETH_Init+0x2c0>)
 8001f9e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fa0:	4a9d      	ldr	r2, [pc, #628]	; (8002218 <HAL_ETH_Init+0x2c0>)
 8001fa2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001fa6:	6453      	str	r3, [r2, #68]	; 0x44
 8001fa8:	4b9b      	ldr	r3, [pc, #620]	; (8002218 <HAL_ETH_Init+0x2c0>)
 8001faa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fac:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001fb0:	60bb      	str	r3, [r7, #8]
 8001fb2:	68bb      	ldr	r3, [r7, #8]
  
  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8001fb4:	4b99      	ldr	r3, [pc, #612]	; (800221c <HAL_ETH_Init+0x2c4>)
 8001fb6:	685b      	ldr	r3, [r3, #4]
 8001fb8:	4a98      	ldr	r2, [pc, #608]	; (800221c <HAL_ETH_Init+0x2c4>)
 8001fba:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001fbe:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8001fc0:	4b96      	ldr	r3, [pc, #600]	; (800221c <HAL_ETH_Init+0x2c4>)
 8001fc2:	685a      	ldr	r2, [r3, #4]
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	6a1b      	ldr	r3, [r3, #32]
 8001fc8:	4994      	ldr	r1, [pc, #592]	; (800221c <HAL_ETH_Init+0x2c4>)
 8001fca:	4313      	orrs	r3, r2
 8001fcc:	604b      	str	r3, [r1, #4]
  
  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001fd6:	681a      	ldr	r2, [r3, #0]
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	f042 0201 	orr.w	r2, r2, #1
 8001fe0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001fe4:	601a      	str	r2, [r3, #0]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8001fe6:	f7ff fea7 	bl	8001d38 <HAL_GetTick>
 8001fea:	6178      	str	r0, [r7, #20]
  
  /* Wait for software reset */
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8001fec:	e011      	b.n	8002012 <HAL_ETH_Init+0xba>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_SWRESET)
 8001fee:	f7ff fea3 	bl	8001d38 <HAL_GetTick>
 8001ff2:	4602      	mov	r2, r0
 8001ff4:	697b      	ldr	r3, [r7, #20]
 8001ff6:	1ad3      	subs	r3, r2, r3
 8001ff8:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001ffc:	d909      	bls.n	8002012 <HAL_ETH_Init+0xba>
    {     
      heth->State= HAL_ETH_STATE_TIMEOUT;
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	2203      	movs	r2, #3
 8002002:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	2200      	movs	r2, #0
 800200a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      /* Note: The SWR is not performed if the ETH_RX_CLK or the ETH_TX_CLK are  
         not available, please check your external PHY or the IO configuration */
      return HAL_TIMEOUT;
 800200e:	2303      	movs	r3, #3
 8002010:	e13b      	b.n	800228a <HAL_ETH_Init+0x332>
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	f003 0301 	and.w	r3, r3, #1
 8002020:	2b00      	cmp	r3, #0
 8002022:	d1e4      	bne.n	8001fee <HAL_ETH_Init+0x96>
    }
  }
  
  /*-------------------------------- MAC Initialization ----------------------*/
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = (heth->Instance)->MACMIIAR;
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	691b      	ldr	r3, [r3, #16]
 800202a:	61fb      	str	r3, [r7, #28]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg1 &= ETH_MACMIIAR_CR_MASK;
 800202c:	69fb      	ldr	r3, [r7, #28]
 800202e:	f023 031c 	bic.w	r3, r3, #28
 8002032:	61fb      	str	r3, [r7, #28]
  
  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8002034:	f002 fe72 	bl	8004d1c <HAL_RCC_GetHCLKFreq>
 8002038:	61b8      	str	r0, [r7, #24]
  
  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 800203a:	69bb      	ldr	r3, [r7, #24]
 800203c:	4a78      	ldr	r2, [pc, #480]	; (8002220 <HAL_ETH_Init+0x2c8>)
 800203e:	4293      	cmp	r3, r2
 8002040:	d908      	bls.n	8002054 <HAL_ETH_Init+0xfc>
 8002042:	69bb      	ldr	r3, [r7, #24]
 8002044:	4a77      	ldr	r2, [pc, #476]	; (8002224 <HAL_ETH_Init+0x2cc>)
 8002046:	4293      	cmp	r3, r2
 8002048:	d804      	bhi.n	8002054 <HAL_ETH_Init+0xfc>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 800204a:	69fb      	ldr	r3, [r7, #28]
 800204c:	f043 0308 	orr.w	r3, r3, #8
 8002050:	61fb      	str	r3, [r7, #28]
 8002052:	e027      	b.n	80020a4 <HAL_ETH_Init+0x14c>
  }
  else if((hclk >= 35000000U)&&(hclk < 60000000U))
 8002054:	69bb      	ldr	r3, [r7, #24]
 8002056:	4a73      	ldr	r2, [pc, #460]	; (8002224 <HAL_ETH_Init+0x2cc>)
 8002058:	4293      	cmp	r3, r2
 800205a:	d908      	bls.n	800206e <HAL_ETH_Init+0x116>
 800205c:	69bb      	ldr	r3, [r7, #24]
 800205e:	4a72      	ldr	r2, [pc, #456]	; (8002228 <HAL_ETH_Init+0x2d0>)
 8002060:	4293      	cmp	r3, r2
 8002062:	d804      	bhi.n	800206e <HAL_ETH_Init+0x116>
  {
    /* CSR Clock Range between 35-60 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 8002064:	69fb      	ldr	r3, [r7, #28]
 8002066:	f043 030c 	orr.w	r3, r3, #12
 800206a:	61fb      	str	r3, [r7, #28]
 800206c:	e01a      	b.n	80020a4 <HAL_ETH_Init+0x14c>
  }  
  else if((hclk >= 60000000U)&&(hclk < 100000000U))
 800206e:	69bb      	ldr	r3, [r7, #24]
 8002070:	4a6d      	ldr	r2, [pc, #436]	; (8002228 <HAL_ETH_Init+0x2d0>)
 8002072:	4293      	cmp	r3, r2
 8002074:	d903      	bls.n	800207e <HAL_ETH_Init+0x126>
 8002076:	69bb      	ldr	r3, [r7, #24]
 8002078:	4a6c      	ldr	r2, [pc, #432]	; (800222c <HAL_ETH_Init+0x2d4>)
 800207a:	4293      	cmp	r3, r2
 800207c:	d911      	bls.n	80020a2 <HAL_ETH_Init+0x14a>
  {
    /* CSR Clock Range between 60-100 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }  
  else if((hclk >= 100000000U)&&(hclk < 150000000U))
 800207e:	69bb      	ldr	r3, [r7, #24]
 8002080:	4a6a      	ldr	r2, [pc, #424]	; (800222c <HAL_ETH_Init+0x2d4>)
 8002082:	4293      	cmp	r3, r2
 8002084:	d908      	bls.n	8002098 <HAL_ETH_Init+0x140>
 8002086:	69bb      	ldr	r3, [r7, #24]
 8002088:	4a69      	ldr	r2, [pc, #420]	; (8002230 <HAL_ETH_Init+0x2d8>)
 800208a:	4293      	cmp	r3, r2
 800208c:	d804      	bhi.n	8002098 <HAL_ETH_Init+0x140>
  {
    /* CSR Clock Range between 100-150 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 800208e:	69fb      	ldr	r3, [r7, #28]
 8002090:	f043 0304 	orr.w	r3, r3, #4
 8002094:	61fb      	str	r3, [r7, #28]
 8002096:	e005      	b.n	80020a4 <HAL_ETH_Init+0x14c>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 183000000)) */
  {
    /* CSR Clock Range between 150-183 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div102;    
 8002098:	69fb      	ldr	r3, [r7, #28]
 800209a:	f043 0310 	orr.w	r3, r3, #16
 800209e:	61fb      	str	r3, [r7, #28]
 80020a0:	e000      	b.n	80020a4 <HAL_ETH_Init+0x14c>
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 80020a2:	bf00      	nop
  }
  
  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg1;
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	69fa      	ldr	r2, [r7, #28]
 80020aa:	611a      	str	r2, [r3, #16]
  
  /*-------------------- PHY initialization and configuration ----------------*/
  /* Put the PHY in reset mode */
  if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 80020ac:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80020b0:	2100      	movs	r1, #0
 80020b2:	6878      	ldr	r0, [r7, #4]
 80020b4:	f000 fb9e 	bl	80027f4 <HAL_ETH_WritePHYRegister>
 80020b8:	4603      	mov	r3, r0
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d00b      	beq.n	80020d6 <HAL_ETH_Init+0x17e>
  {
    /* In case of write timeout */
    err = ETH_ERROR;
 80020be:	2301      	movs	r3, #1
 80020c0:	613b      	str	r3, [r7, #16]
    
    /* Config MAC and DMA */
    ETH_MACDMAConfig(heth, err);
 80020c2:	6939      	ldr	r1, [r7, #16]
 80020c4:	6878      	ldr	r0, [r7, #4]
 80020c6:	f000 fc2b 	bl	8002920 <ETH_MACDMAConfig>
    
    /* Set the ETH peripheral state to READY */
    heth->State = HAL_ETH_STATE_READY;
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	2201      	movs	r2, #1
 80020ce:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Return HAL_ERROR */
    return HAL_ERROR;
 80020d2:	2301      	movs	r3, #1
 80020d4:	e0d9      	b.n	800228a <HAL_ETH_Init+0x332>
  }
  
  /* Delay to assure PHY reset */
  HAL_Delay(PHY_RESET_DELAY);
 80020d6:	20ff      	movs	r0, #255	; 0xff
 80020d8:	f7ff fe3a 	bl	8001d50 <HAL_Delay>
  
  if((heth->Init).AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	685b      	ldr	r3, [r3, #4]
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	f000 80a7 	beq.w	8002234 <HAL_ETH_Init+0x2dc>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 80020e6:	f7ff fe27 	bl	8001d38 <HAL_GetTick>
 80020ea:	6178      	str	r0, [r7, #20]
    
    /* We wait for linked status */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 80020ec:	f107 030c 	add.w	r3, r7, #12
 80020f0:	461a      	mov	r2, r3
 80020f2:	2101      	movs	r1, #1
 80020f4:	6878      	ldr	r0, [r7, #4]
 80020f6:	f000 fb15 	bl	8002724 <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
 80020fa:	f7ff fe1d 	bl	8001d38 <HAL_GetTick>
 80020fe:	4602      	mov	r2, r0
 8002100:	697b      	ldr	r3, [r7, #20]
 8002102:	1ad3      	subs	r3, r2, r3
 8002104:	f241 3288 	movw	r2, #5000	; 0x1388
 8002108:	4293      	cmp	r3, r2
 800210a:	d90f      	bls.n	800212c <HAL_ETH_Init+0x1d4>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 800210c:	2301      	movs	r3, #1
 800210e:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 8002110:	6939      	ldr	r1, [r7, #16]
 8002112:	6878      	ldr	r0, [r7, #4]
 8002114:	f000 fc04 	bl	8002920 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	2201      	movs	r2, #1
 800211c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	2200      	movs	r2, #0
 8002124:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 8002128:	2303      	movs	r3, #3
 800212a:	e0ae      	b.n	800228a <HAL_ETH_Init+0x332>
      }
    } while (((phyreg & PHY_LINKED_STATUS) != PHY_LINKED_STATUS));
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	f003 0304 	and.w	r3, r3, #4
 8002132:	2b00      	cmp	r3, #0
 8002134:	d0da      	beq.n	80020ec <HAL_ETH_Init+0x194>

    
    /* Enable Auto-Negotiation */
    if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_AUTONEGOTIATION)) != HAL_OK)
 8002136:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800213a:	2100      	movs	r1, #0
 800213c:	6878      	ldr	r0, [r7, #4]
 800213e:	f000 fb59 	bl	80027f4 <HAL_ETH_WritePHYRegister>
 8002142:	4603      	mov	r3, r0
 8002144:	2b00      	cmp	r3, #0
 8002146:	d00b      	beq.n	8002160 <HAL_ETH_Init+0x208>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8002148:	2301      	movs	r3, #1
 800214a:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 800214c:	6939      	ldr	r1, [r7, #16]
 800214e:	6878      	ldr	r0, [r7, #4]
 8002150:	f000 fbe6 	bl	8002920 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	2201      	movs	r2, #1
 8002158:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 800215c:	2301      	movs	r3, #1
 800215e:	e094      	b.n	800228a <HAL_ETH_Init+0x332>
    }
    
    /* Get tick */
    tickstart = HAL_GetTick();
 8002160:	f7ff fdea 	bl	8001d38 <HAL_GetTick>
 8002164:	6178      	str	r0, [r7, #20]
    
    /* Wait until the auto-negotiation will be completed */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8002166:	f107 030c 	add.w	r3, r7, #12
 800216a:	461a      	mov	r2, r3
 800216c:	2101      	movs	r1, #1
 800216e:	6878      	ldr	r0, [r7, #4]
 8002170:	f000 fad8 	bl	8002724 <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 8002174:	f7ff fde0 	bl	8001d38 <HAL_GetTick>
 8002178:	4602      	mov	r2, r0
 800217a:	697b      	ldr	r3, [r7, #20]
 800217c:	1ad3      	subs	r3, r2, r3
 800217e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002182:	4293      	cmp	r3, r2
 8002184:	d90f      	bls.n	80021a6 <HAL_ETH_Init+0x24e>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 8002186:	2301      	movs	r3, #1
 8002188:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 800218a:	6939      	ldr	r1, [r7, #16]
 800218c:	6878      	ldr	r0, [r7, #4]
 800218e:	f000 fbc7 	bl	8002920 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	2201      	movs	r2, #1
 8002196:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	2200      	movs	r2, #0
 800219e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 80021a2:	2303      	movs	r3, #3
 80021a4:	e071      	b.n	800228a <HAL_ETH_Init+0x332>
      }
      
    } while (((phyreg & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	f003 0320 	and.w	r3, r3, #32
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d0da      	beq.n	8002166 <HAL_ETH_Init+0x20e>
    
    /* Read the result of the auto-negotiation */
    if((HAL_ETH_ReadPHYRegister(heth, PHY_SR, &phyreg)) != HAL_OK)
 80021b0:	f107 030c 	add.w	r3, r7, #12
 80021b4:	461a      	mov	r2, r3
 80021b6:	211f      	movs	r1, #31
 80021b8:	6878      	ldr	r0, [r7, #4]
 80021ba:	f000 fab3 	bl	8002724 <HAL_ETH_ReadPHYRegister>
 80021be:	4603      	mov	r3, r0
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d00b      	beq.n	80021dc <HAL_ETH_Init+0x284>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 80021c4:	2301      	movs	r3, #1
 80021c6:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 80021c8:	6939      	ldr	r1, [r7, #16]
 80021ca:	6878      	ldr	r0, [r7, #4]
 80021cc:	f000 fba8 	bl	8002920 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	2201      	movs	r2, #1
 80021d4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 80021d8:	2301      	movs	r3, #1
 80021da:	e056      	b.n	800228a <HAL_ETH_Init+0x332>
    }
    
    /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
    if((phyreg & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	f003 0310 	and.w	r3, r3, #16
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d004      	beq.n	80021f0 <HAL_ETH_Init+0x298>
    {
      /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;  
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80021ec:	60da      	str	r2, [r3, #12]
 80021ee:	e002      	b.n	80021f6 <HAL_ETH_Init+0x29e>
    }
    else
    {
      /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_HALFDUPLEX;           
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	2200      	movs	r2, #0
 80021f4:	60da      	str	r2, [r3, #12]
    }
    /* Configure the MAC with the speed fixed by the auto-negotiation process */
    if((phyreg & PHY_SPEED_STATUS) == PHY_SPEED_STATUS)
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	f003 0304 	and.w	r3, r3, #4
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d003      	beq.n	8002208 <HAL_ETH_Init+0x2b0>
    {  
      /* Set Ethernet speed to 10M following the auto-negotiation */
      (heth->Init).Speed = ETH_SPEED_10M; 
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	2200      	movs	r2, #0
 8002204:	609a      	str	r2, [r3, #8]
 8002206:	e037      	b.n	8002278 <HAL_ETH_Init+0x320>
    }
    else
    {   
      /* Set Ethernet speed to 100M following the auto-negotiation */ 
      (heth->Init).Speed = ETH_SPEED_100M;
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800220e:	609a      	str	r2, [r3, #8]
 8002210:	e032      	b.n	8002278 <HAL_ETH_Init+0x320>
 8002212:	bf00      	nop
 8002214:	03938700 	.word	0x03938700
 8002218:	40023800 	.word	0x40023800
 800221c:	40013800 	.word	0x40013800
 8002220:	01312cff 	.word	0x01312cff
 8002224:	02160ebf 	.word	0x02160ebf
 8002228:	039386ff 	.word	0x039386ff
 800222c:	05f5e0ff 	.word	0x05f5e0ff
 8002230:	08f0d17f 	.word	0x08f0d17f
    /* Check parameters */
    assert_param(IS_ETH_SPEED(heth->Init.Speed));
    assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode));
    
    /* Set MAC Speed and Duplex Mode */
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3U) |
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	68db      	ldr	r3, [r3, #12]
 8002238:	08db      	lsrs	r3, r3, #3
 800223a:	b29a      	uxth	r2, r3
                                                (uint16_t)((heth->Init).Speed >> 1U))) != HAL_OK)
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	689b      	ldr	r3, [r3, #8]
 8002240:	085b      	lsrs	r3, r3, #1
 8002242:	b29b      	uxth	r3, r3
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3U) |
 8002244:	4313      	orrs	r3, r2
 8002246:	b29b      	uxth	r3, r3
 8002248:	461a      	mov	r2, r3
 800224a:	2100      	movs	r1, #0
 800224c:	6878      	ldr	r0, [r7, #4]
 800224e:	f000 fad1 	bl	80027f4 <HAL_ETH_WritePHYRegister>
 8002252:	4603      	mov	r3, r0
 8002254:	2b00      	cmp	r3, #0
 8002256:	d00b      	beq.n	8002270 <HAL_ETH_Init+0x318>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8002258:	2301      	movs	r3, #1
 800225a:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 800225c:	6939      	ldr	r1, [r7, #16]
 800225e:	6878      	ldr	r0, [r7, #4]
 8002260:	f000 fb5e 	bl	8002920 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	2201      	movs	r2, #1
 8002268:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;
 800226c:	2301      	movs	r3, #1
 800226e:	e00c      	b.n	800228a <HAL_ETH_Init+0x332>
    }  
    
    /* Delay to assure PHY configuration */
    HAL_Delay(PHY_CONFIG_DELAY);
 8002270:	f640 70ff 	movw	r0, #4095	; 0xfff
 8002274:	f7ff fd6c 	bl	8001d50 <HAL_Delay>
  }
  
  /* Config MAC and DMA */
  ETH_MACDMAConfig(heth, err);
 8002278:	6939      	ldr	r1, [r7, #16]
 800227a:	6878      	ldr	r0, [r7, #4]
 800227c:	f000 fb50 	bl	8002920 <ETH_MACDMAConfig>
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	2201      	movs	r2, #1
 8002284:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 8002288:	2300      	movs	r3, #0
}
 800228a:	4618      	mov	r0, r3
 800228c:	3720      	adds	r7, #32
 800228e:	46bd      	mov	sp, r7
 8002290:	bd80      	pop	{r7, pc}
 8002292:	bf00      	nop

08002294 <HAL_ETH_DMATxDescListInit>:
  * @param  TxBuff Pointer to the first TxBuffer list
  * @param  TxBuffCount Number of the used Tx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMATxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMATxDescTab, uint8_t *TxBuff, uint32_t TxBuffCount)
{
 8002294:	b480      	push	{r7}
 8002296:	b087      	sub	sp, #28
 8002298:	af00      	add	r7, sp, #0
 800229a:	60f8      	str	r0, [r7, #12]
 800229c:	60b9      	str	r1, [r7, #8]
 800229e:	607a      	str	r2, [r7, #4]
 80022a0:	603b      	str	r3, [r7, #0]
  uint32_t i = 0U;
 80022a2:	2300      	movs	r3, #0
 80022a4:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *dmatxdesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80022ac:	2b01      	cmp	r3, #1
 80022ae:	d101      	bne.n	80022b4 <HAL_ETH_DMATxDescListInit+0x20>
 80022b0:	2302      	movs	r3, #2
 80022b2:	e052      	b.n	800235a <HAL_ETH_DMATxDescListInit+0xc6>
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	2201      	movs	r2, #1
 80022b8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	2202      	movs	r2, #2
 80022c0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the DMATxDescToSet pointer with the first one of the DMATxDescTab list */
  heth->TxDesc = DMATxDescTab;
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	68ba      	ldr	r2, [r7, #8]
 80022c8:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Fill each DMATxDesc descriptor with the right values */   
  for(i=0U; i < TxBuffCount; i++)
 80022ca:	2300      	movs	r3, #0
 80022cc:	617b      	str	r3, [r7, #20]
 80022ce:	e030      	b.n	8002332 <HAL_ETH_DMATxDescListInit+0x9e>
  {
    /* Get the pointer on the ith member of the Tx Desc list */
    dmatxdesc = DMATxDescTab + i;
 80022d0:	697b      	ldr	r3, [r7, #20]
 80022d2:	015b      	lsls	r3, r3, #5
 80022d4:	68ba      	ldr	r2, [r7, #8]
 80022d6:	4413      	add	r3, r2
 80022d8:	613b      	str	r3, [r7, #16]
    
    /* Set Second Address Chained bit */
    dmatxdesc->Status = ETH_DMATXDESC_TCH;  
 80022da:	693b      	ldr	r3, [r7, #16]
 80022dc:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80022e0:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 address pointer */
    dmatxdesc->Buffer1Addr = (uint32_t)(&TxBuff[i*ETH_TX_BUF_SIZE]);
 80022e2:	697b      	ldr	r3, [r7, #20]
 80022e4:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80022e8:	fb02 f303 	mul.w	r3, r2, r3
 80022ec:	687a      	ldr	r2, [r7, #4]
 80022ee:	4413      	add	r3, r2
 80022f0:	461a      	mov	r2, r3
 80022f2:	693b      	ldr	r3, [r7, #16]
 80022f4:	609a      	str	r2, [r3, #8]
    
    if ((heth->Init).ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	69db      	ldr	r3, [r3, #28]
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d105      	bne.n	800230a <HAL_ETH_DMATxDescListInit+0x76>
    {
      /* Set the DMA Tx descriptors checksum insertion */
      dmatxdesc->Status |= ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL;
 80022fe:	693b      	ldr	r3, [r7, #16]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 8002306:	693b      	ldr	r3, [r7, #16]
 8002308:	601a      	str	r2, [r3, #0]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (TxBuffCount-1U))
 800230a:	683b      	ldr	r3, [r7, #0]
 800230c:	3b01      	subs	r3, #1
 800230e:	697a      	ldr	r2, [r7, #20]
 8002310:	429a      	cmp	r2, r3
 8002312:	d208      	bcs.n	8002326 <HAL_ETH_DMATxDescListInit+0x92>
    {
      /* Set next descriptor address register with next descriptor base address */
      dmatxdesc->Buffer2NextDescAddr = (uint32_t)(DMATxDescTab+i+1U);
 8002314:	697b      	ldr	r3, [r7, #20]
 8002316:	3301      	adds	r3, #1
 8002318:	015b      	lsls	r3, r3, #5
 800231a:	68ba      	ldr	r2, [r7, #8]
 800231c:	4413      	add	r3, r2
 800231e:	461a      	mov	r2, r3
 8002320:	693b      	ldr	r3, [r7, #16]
 8002322:	60da      	str	r2, [r3, #12]
 8002324:	e002      	b.n	800232c <HAL_ETH_DMATxDescListInit+0x98>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      dmatxdesc->Buffer2NextDescAddr = (uint32_t) DMATxDescTab;  
 8002326:	68ba      	ldr	r2, [r7, #8]
 8002328:	693b      	ldr	r3, [r7, #16]
 800232a:	60da      	str	r2, [r3, #12]
  for(i=0U; i < TxBuffCount; i++)
 800232c:	697b      	ldr	r3, [r7, #20]
 800232e:	3301      	adds	r3, #1
 8002330:	617b      	str	r3, [r7, #20]
 8002332:	697a      	ldr	r2, [r7, #20]
 8002334:	683b      	ldr	r3, [r7, #0]
 8002336:	429a      	cmp	r2, r3
 8002338:	d3ca      	bcc.n	80022d0 <HAL_ETH_DMATxDescListInit+0x3c>
    }
  }
  
  /* Set Transmit Descriptor List Address Register */
  (heth->Instance)->DMATDLAR = (uint32_t) DMATxDescTab;
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	68ba      	ldr	r2, [r7, #8]
 8002340:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002344:	3310      	adds	r3, #16
 8002346:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	2201      	movs	r2, #1
 800234c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	2200      	movs	r2, #0
 8002354:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8002358:	2300      	movs	r3, #0
}
 800235a:	4618      	mov	r0, r3
 800235c:	371c      	adds	r7, #28
 800235e:	46bd      	mov	sp, r7
 8002360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002364:	4770      	bx	lr

08002366 <HAL_ETH_DMARxDescListInit>:
  * @param  RxBuff Pointer to the first RxBuffer list
  * @param  RxBuffCount Number of the used Rx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMARxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMARxDescTab, uint8_t *RxBuff, uint32_t RxBuffCount)
{
 8002366:	b480      	push	{r7}
 8002368:	b087      	sub	sp, #28
 800236a:	af00      	add	r7, sp, #0
 800236c:	60f8      	str	r0, [r7, #12]
 800236e:	60b9      	str	r1, [r7, #8]
 8002370:	607a      	str	r2, [r7, #4]
 8002372:	603b      	str	r3, [r7, #0]
  uint32_t i = 0U;
 8002374:	2300      	movs	r3, #0
 8002376:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *DMARxDesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800237e:	2b01      	cmp	r3, #1
 8002380:	d101      	bne.n	8002386 <HAL_ETH_DMARxDescListInit+0x20>
 8002382:	2302      	movs	r3, #2
 8002384:	e056      	b.n	8002434 <HAL_ETH_DMARxDescListInit+0xce>
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	2201      	movs	r2, #1
 800238a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	2202      	movs	r2, #2
 8002392:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the Ethernet RxDesc pointer with the first one of the DMARxDescTab list */
  heth->RxDesc = DMARxDescTab; 
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	68ba      	ldr	r2, [r7, #8]
 800239a:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Fill each DMARxDesc descriptor with the right values */
  for(i=0U; i < RxBuffCount; i++)
 800239c:	2300      	movs	r3, #0
 800239e:	617b      	str	r3, [r7, #20]
 80023a0:	e034      	b.n	800240c <HAL_ETH_DMARxDescListInit+0xa6>
  {
    /* Get the pointer on the ith member of the Rx Desc list */
    DMARxDesc = DMARxDescTab+i;
 80023a2:	697b      	ldr	r3, [r7, #20]
 80023a4:	015b      	lsls	r3, r3, #5
 80023a6:	68ba      	ldr	r2, [r7, #8]
 80023a8:	4413      	add	r3, r2
 80023aa:	613b      	str	r3, [r7, #16]
    
    /* Set Own bit of the Rx descriptor Status */
    DMARxDesc->Status = ETH_DMARXDESC_OWN;
 80023ac:	693b      	ldr	r3, [r7, #16]
 80023ae:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80023b2:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 size and Second Address Chained bit */
    DMARxDesc->ControlBufferSize = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;  
 80023b4:	693b      	ldr	r3, [r7, #16]
 80023b6:	f244 52f4 	movw	r2, #17908	; 0x45f4
 80023ba:	605a      	str	r2, [r3, #4]
    
    /* Set Buffer1 address pointer */
    DMARxDesc->Buffer1Addr = (uint32_t)(&RxBuff[i*ETH_RX_BUF_SIZE]);
 80023bc:	697b      	ldr	r3, [r7, #20]
 80023be:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80023c2:	fb02 f303 	mul.w	r3, r2, r3
 80023c6:	687a      	ldr	r2, [r7, #4]
 80023c8:	4413      	add	r3, r2
 80023ca:	461a      	mov	r2, r3
 80023cc:	693b      	ldr	r3, [r7, #16]
 80023ce:	609a      	str	r2, [r3, #8]
    
    if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	699b      	ldr	r3, [r3, #24]
 80023d4:	2b01      	cmp	r3, #1
 80023d6:	d105      	bne.n	80023e4 <HAL_ETH_DMARxDescListInit+0x7e>
    {
      /* Enable Ethernet DMA Rx Descriptor interrupt */
      DMARxDesc->ControlBufferSize &= ~ETH_DMARXDESC_DIC;
 80023d8:	693b      	ldr	r3, [r7, #16]
 80023da:	685b      	ldr	r3, [r3, #4]
 80023dc:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80023e0:	693b      	ldr	r3, [r7, #16]
 80023e2:	605a      	str	r2, [r3, #4]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (RxBuffCount-1U))
 80023e4:	683b      	ldr	r3, [r7, #0]
 80023e6:	3b01      	subs	r3, #1
 80023e8:	697a      	ldr	r2, [r7, #20]
 80023ea:	429a      	cmp	r2, r3
 80023ec:	d208      	bcs.n	8002400 <HAL_ETH_DMARxDescListInit+0x9a>
    {
      /* Set next descriptor address register with next descriptor base address */
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab+i+1U); 
 80023ee:	697b      	ldr	r3, [r7, #20]
 80023f0:	3301      	adds	r3, #1
 80023f2:	015b      	lsls	r3, r3, #5
 80023f4:	68ba      	ldr	r2, [r7, #8]
 80023f6:	4413      	add	r3, r2
 80023f8:	461a      	mov	r2, r3
 80023fa:	693b      	ldr	r3, [r7, #16]
 80023fc:	60da      	str	r2, [r3, #12]
 80023fe:	e002      	b.n	8002406 <HAL_ETH_DMARxDescListInit+0xa0>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab); 
 8002400:	68ba      	ldr	r2, [r7, #8]
 8002402:	693b      	ldr	r3, [r7, #16]
 8002404:	60da      	str	r2, [r3, #12]
  for(i=0U; i < RxBuffCount; i++)
 8002406:	697b      	ldr	r3, [r7, #20]
 8002408:	3301      	adds	r3, #1
 800240a:	617b      	str	r3, [r7, #20]
 800240c:	697a      	ldr	r2, [r7, #20]
 800240e:	683b      	ldr	r3, [r7, #0]
 8002410:	429a      	cmp	r2, r3
 8002412:	d3c6      	bcc.n	80023a2 <HAL_ETH_DMARxDescListInit+0x3c>
    }
  }
  
  /* Set Receive Descriptor List Address Register */
  (heth->Instance)->DMARDLAR = (uint32_t) DMARxDescTab;
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	68ba      	ldr	r2, [r7, #8]
 800241a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800241e:	330c      	adds	r3, #12
 8002420:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	2201      	movs	r2, #1
 8002426:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	2200      	movs	r2, #0
 800242e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8002432:	2300      	movs	r3, #0
}
 8002434:	4618      	mov	r0, r3
 8002436:	371c      	adds	r7, #28
 8002438:	46bd      	mov	sp, r7
 800243a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800243e:	4770      	bx	lr

08002440 <HAL_ETH_TransmitFrame>:
  *         the configuration information for ETHERNET module
  * @param  FrameLength Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_TransmitFrame(ETH_HandleTypeDef *heth, uint32_t FrameLength)
{
 8002440:	b480      	push	{r7}
 8002442:	b087      	sub	sp, #28
 8002444:	af00      	add	r7, sp, #0
 8002446:	6078      	str	r0, [r7, #4]
 8002448:	6039      	str	r1, [r7, #0]
  uint32_t bufcount = 0U, size = 0U, i = 0U;
 800244a:	2300      	movs	r3, #0
 800244c:	617b      	str	r3, [r7, #20]
 800244e:	2300      	movs	r3, #0
 8002450:	60fb      	str	r3, [r7, #12]
 8002452:	2300      	movs	r3, #0
 8002454:	613b      	str	r3, [r7, #16]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800245c:	2b01      	cmp	r3, #1
 800245e:	d101      	bne.n	8002464 <HAL_ETH_TransmitFrame+0x24>
 8002460:	2302      	movs	r3, #2
 8002462:	e0cd      	b.n	8002600 <HAL_ETH_TransmitFrame+0x1c0>
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	2201      	movs	r2, #1
 8002468:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	2202      	movs	r2, #2
 8002470:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  if (FrameLength == 0U) 
 8002474:	683b      	ldr	r3, [r7, #0]
 8002476:	2b00      	cmp	r3, #0
 8002478:	d109      	bne.n	800248e <HAL_ETH_TransmitFrame+0x4e>
  {
    /* Set ETH HAL state to READY */
    heth->State = HAL_ETH_STATE_READY;
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	2201      	movs	r2, #1
 800247e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	2200      	movs	r2, #0
 8002486:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return  HAL_ERROR;                                    
 800248a:	2301      	movs	r3, #1
 800248c:	e0b8      	b.n	8002600 <HAL_ETH_TransmitFrame+0x1c0>
  }  
  
  /* Check if the descriptor is owned by the ETHERNET DMA (when set) or CPU (when reset) */
  if(((heth->TxDesc)->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	2b00      	cmp	r3, #0
 8002496:	da09      	bge.n	80024ac <HAL_ETH_TransmitFrame+0x6c>
  {  
    /* OWN bit set */
    heth->State = HAL_ETH_STATE_BUSY_TX;
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	2212      	movs	r2, #18
 800249c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	2200      	movs	r2, #0
 80024a4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return HAL_ERROR;
 80024a8:	2301      	movs	r3, #1
 80024aa:	e0a9      	b.n	8002600 <HAL_ETH_TransmitFrame+0x1c0>
  }
  
  /* Get the number of needed Tx buffers for the current frame */
  if (FrameLength > ETH_TX_BUF_SIZE)
 80024ac:	683b      	ldr	r3, [r7, #0]
 80024ae:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80024b2:	4293      	cmp	r3, r2
 80024b4:	d915      	bls.n	80024e2 <HAL_ETH_TransmitFrame+0xa2>
  {
    bufcount = FrameLength/ETH_TX_BUF_SIZE;
 80024b6:	683b      	ldr	r3, [r7, #0]
 80024b8:	4a54      	ldr	r2, [pc, #336]	; (800260c <HAL_ETH_TransmitFrame+0x1cc>)
 80024ba:	fba2 2303 	umull	r2, r3, r2, r3
 80024be:	0a9b      	lsrs	r3, r3, #10
 80024c0:	617b      	str	r3, [r7, #20]
    if (FrameLength % ETH_TX_BUF_SIZE) 
 80024c2:	683a      	ldr	r2, [r7, #0]
 80024c4:	4b51      	ldr	r3, [pc, #324]	; (800260c <HAL_ETH_TransmitFrame+0x1cc>)
 80024c6:	fba3 1302 	umull	r1, r3, r3, r2
 80024ca:	0a9b      	lsrs	r3, r3, #10
 80024cc:	f240 51f4 	movw	r1, #1524	; 0x5f4
 80024d0:	fb01 f303 	mul.w	r3, r1, r3
 80024d4:	1ad3      	subs	r3, r2, r3
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d005      	beq.n	80024e6 <HAL_ETH_TransmitFrame+0xa6>
    {
      bufcount++;
 80024da:	697b      	ldr	r3, [r7, #20]
 80024dc:	3301      	adds	r3, #1
 80024de:	617b      	str	r3, [r7, #20]
 80024e0:	e001      	b.n	80024e6 <HAL_ETH_TransmitFrame+0xa6>
    }
  }
  else 
  {  
    bufcount = 1U;
 80024e2:	2301      	movs	r3, #1
 80024e4:	617b      	str	r3, [r7, #20]
  }
  if (bufcount == 1U)
 80024e6:	697b      	ldr	r3, [r7, #20]
 80024e8:	2b01      	cmp	r3, #1
 80024ea:	d11c      	bne.n	8002526 <HAL_ETH_TransmitFrame+0xe6>
  {
    /* Set LAST and FIRST segment */
    heth->TxDesc->Status |=ETH_DMATXDESC_FS|ETH_DMATXDESC_LS;
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024f0:	681a      	ldr	r2, [r3, #0]
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024f6:	f042 5240 	orr.w	r2, r2, #805306368	; 0x30000000
 80024fa:	601a      	str	r2, [r3, #0]
    /* Set frame size */
    heth->TxDesc->ControlBufferSize = (FrameLength & ETH_DMATXDESC_TBS1);
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002500:	683a      	ldr	r2, [r7, #0]
 8002502:	f3c2 020c 	ubfx	r2, r2, #0, #13
 8002506:	605a      	str	r2, [r3, #4]
    /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
    heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800250c:	681a      	ldr	r2, [r3, #0]
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002512:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8002516:	601a      	str	r2, [r3, #0]
    /* Point to next descriptor */
    heth->TxDesc= (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800251c:	68db      	ldr	r3, [r3, #12]
 800251e:	461a      	mov	r2, r3
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	62da      	str	r2, [r3, #44]	; 0x2c
 8002524:	e04b      	b.n	80025be <HAL_ETH_TransmitFrame+0x17e>
  }
  else
  {
    for (i=0U; i< bufcount; i++)
 8002526:	2300      	movs	r3, #0
 8002528:	613b      	str	r3, [r7, #16]
 800252a:	e044      	b.n	80025b6 <HAL_ETH_TransmitFrame+0x176>
    {
      /* Clear FIRST and LAST segment bits */
      heth->TxDesc->Status &= ~(ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002530:	681a      	ldr	r2, [r3, #0]
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002536:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800253a:	601a      	str	r2, [r3, #0]
      
      if (i == 0U) 
 800253c:	693b      	ldr	r3, [r7, #16]
 800253e:	2b00      	cmp	r3, #0
 8002540:	d107      	bne.n	8002552 <HAL_ETH_TransmitFrame+0x112>
      {
        /* Setting the first segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_FS;  
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002546:	681a      	ldr	r2, [r3, #0]
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800254c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002550:	601a      	str	r2, [r3, #0]
      }
      
      /* Program size */
      heth->TxDesc->ControlBufferSize = (ETH_TX_BUF_SIZE & ETH_DMATXDESC_TBS1);
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002556:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800255a:	605a      	str	r2, [r3, #4]
      
      if (i == (bufcount-1U))
 800255c:	697b      	ldr	r3, [r7, #20]
 800255e:	3b01      	subs	r3, #1
 8002560:	693a      	ldr	r2, [r7, #16]
 8002562:	429a      	cmp	r2, r3
 8002564:	d116      	bne.n	8002594 <HAL_ETH_TransmitFrame+0x154>
      {
        /* Setting the last segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_LS;
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800256a:	681a      	ldr	r2, [r3, #0]
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002570:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8002574:	601a      	str	r2, [r3, #0]
        size = FrameLength - (bufcount-1U)*ETH_TX_BUF_SIZE;
 8002576:	697b      	ldr	r3, [r7, #20]
 8002578:	4a25      	ldr	r2, [pc, #148]	; (8002610 <HAL_ETH_TransmitFrame+0x1d0>)
 800257a:	fb02 f203 	mul.w	r2, r2, r3
 800257e:	683b      	ldr	r3, [r7, #0]
 8002580:	4413      	add	r3, r2
 8002582:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8002586:	60fb      	str	r3, [r7, #12]
        heth->TxDesc->ControlBufferSize = (size & ETH_DMATXDESC_TBS1);
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800258c:	68fa      	ldr	r2, [r7, #12]
 800258e:	f3c2 020c 	ubfx	r2, r2, #0, #13
 8002592:	605a      	str	r2, [r3, #4]
      }
      
      /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
      heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002598:	681a      	ldr	r2, [r3, #0]
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800259e:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80025a2:	601a      	str	r2, [r3, #0]
      /* point to next descriptor */
      heth->TxDesc = (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025a8:	68db      	ldr	r3, [r3, #12]
 80025aa:	461a      	mov	r2, r3
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	62da      	str	r2, [r3, #44]	; 0x2c
    for (i=0U; i< bufcount; i++)
 80025b0:	693b      	ldr	r3, [r7, #16]
 80025b2:	3301      	adds	r3, #1
 80025b4:	613b      	str	r3, [r7, #16]
 80025b6:	693a      	ldr	r2, [r7, #16]
 80025b8:	697b      	ldr	r3, [r7, #20]
 80025ba:	429a      	cmp	r2, r3
 80025bc:	d3b6      	bcc.n	800252c <HAL_ETH_TransmitFrame+0xec>
    }
  }
  
  /* When Tx Buffer unavailable flag is set: clear it and resume transmission */
  if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80025c6:	3314      	adds	r3, #20
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	f003 0304 	and.w	r3, r3, #4
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d00d      	beq.n	80025ee <HAL_ETH_TransmitFrame+0x1ae>
  {
    /* Clear TBUS ETHERNET DMA flag */
    (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80025da:	3314      	adds	r3, #20
 80025dc:	2204      	movs	r2, #4
 80025de:	601a      	str	r2, [r3, #0]
    /* Resume DMA transmission*/
    (heth->Instance)->DMATPDR = 0U;
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80025e8:	3304      	adds	r3, #4
 80025ea:	2200      	movs	r2, #0
 80025ec:	601a      	str	r2, [r3, #0]
  }
  
  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	2201      	movs	r2, #1
 80025f2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	2200      	movs	r2, #0
 80025fa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 80025fe:	2300      	movs	r3, #0
}
 8002600:	4618      	mov	r0, r3
 8002602:	371c      	adds	r7, #28
 8002604:	46bd      	mov	sp, r7
 8002606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800260a:	4770      	bx	lr
 800260c:	ac02b00b 	.word	0xac02b00b
 8002610:	fffffa0c 	.word	0xfffffa0c

08002614 <HAL_ETH_GetReceivedFrame_IT>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_GetReceivedFrame_IT(ETH_HandleTypeDef *heth)
{
 8002614:	b480      	push	{r7}
 8002616:	b085      	sub	sp, #20
 8002618:	af00      	add	r7, sp, #0
 800261a:	6078      	str	r0, [r7, #4]
  uint32_t descriptorscancounter = 0U;
 800261c:	2300      	movs	r3, #0
 800261e:	60fb      	str	r3, [r7, #12]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002626:	2b01      	cmp	r3, #1
 8002628:	d101      	bne.n	800262e <HAL_ETH_GetReceivedFrame_IT+0x1a>
 800262a:	2302      	movs	r3, #2
 800262c:	e074      	b.n	8002718 <HAL_ETH_GetReceivedFrame_IT+0x104>
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	2201      	movs	r2, #1
 8002632:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set ETH HAL State to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	2202      	movs	r2, #2
 800263a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Scan descriptors owned by CPU */
  while (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (descriptorscancounter < ETH_RXBUFNB))
 800263e:	e05a      	b.n	80026f6 <HAL_ETH_GetReceivedFrame_IT+0xe2>
  {
    /* Just for security */
    descriptorscancounter++;
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	3301      	adds	r3, #1
 8002644:	60fb      	str	r3, [r7, #12]
    
    /* Check if first segment in frame */
    /* ((heth->RxDesc->Status & ETH_DMARXDESC_FS) != (uint32_t)RESET) && ((heth->RxDesc->Status & ETH_DMARXDESC_LS) == (uint32_t)RESET)) */  
    if((heth->RxDesc->Status & (ETH_DMARXDESC_FS | ETH_DMARXDESC_LS)) == (uint32_t)ETH_DMARXDESC_FS)
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002650:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002654:	d10d      	bne.n	8002672 <HAL_ETH_GetReceivedFrame_IT+0x5e>
    { 
      heth->RxFrameInfos.FSRxDesc = heth->RxDesc;
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	631a      	str	r2, [r3, #48]	; 0x30
      heth->RxFrameInfos.SegCount = 1U;   
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	2201      	movs	r2, #1
 8002662:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002668:	68db      	ldr	r3, [r3, #12]
 800266a:	461a      	mov	r2, r3
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	629a      	str	r2, [r3, #40]	; 0x28
 8002670:	e041      	b.n	80026f6 <HAL_ETH_GetReceivedFrame_IT+0xe2>
    }
    /* Check if intermediate segment */
    /* ((heth->RxDesc->Status & ETH_DMARXDESC_LS) == (uint32_t)RESET)&& ((heth->RxDesc->Status & ETH_DMARXDESC_FS) == (uint32_t)RESET)) */
    else if ((heth->RxDesc->Status & (ETH_DMARXDESC_LS | ETH_DMARXDESC_FS)) == (uint32_t)RESET)
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800267c:	2b00      	cmp	r3, #0
 800267e:	d10b      	bne.n	8002698 <HAL_ETH_GetReceivedFrame_IT+0x84>
    {
      /* Increment segment count */
      (heth->RxFrameInfos.SegCount)++;
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002684:	1c5a      	adds	r2, r3, #1
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*)(heth->RxDesc->Buffer2NextDescAddr);
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800268e:	68db      	ldr	r3, [r3, #12]
 8002690:	461a      	mov	r2, r3
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	629a      	str	r2, [r3, #40]	; 0x28
 8002696:	e02e      	b.n	80026f6 <HAL_ETH_GetReceivedFrame_IT+0xe2>
    }
    /* Should be last segment */
    else
    { 
      /* Last segment */
      heth->RxFrameInfos.LSRxDesc = heth->RxDesc;
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	635a      	str	r2, [r3, #52]	; 0x34
      
      /* Increment segment count */
      (heth->RxFrameInfos.SegCount)++;
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026a4:	1c5a      	adds	r2, r3, #1
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	639a      	str	r2, [r3, #56]	; 0x38
      
      /* Check if last segment is first segment: one segment contains the frame */
      if ((heth->RxFrameInfos.SegCount) == 1U)
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026ae:	2b01      	cmp	r3, #1
 80026b0:	d103      	bne.n	80026ba <HAL_ETH_GetReceivedFrame_IT+0xa6>
      {
        heth->RxFrameInfos.FSRxDesc = heth->RxDesc;
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	631a      	str	r2, [r3, #48]	; 0x30
      }
      
      /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
      heth->RxFrameInfos.length = (((heth->RxDesc)->Status & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4U;
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	0c1b      	lsrs	r3, r3, #16
 80026c2:	f3c3 030d 	ubfx	r3, r3, #0, #14
 80026c6:	1f1a      	subs	r2, r3, #4
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Get the address of the buffer start address */ 
      heth->RxFrameInfos.buffer =((heth->RxFrameInfos).FSRxDesc)->Buffer1Addr;
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026d0:	689a      	ldr	r2, [r3, #8]
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Point to next descriptor */      
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026da:	68db      	ldr	r3, [r3, #12]
 80026dc:	461a      	mov	r2, r3
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Set HAL State to Ready */
      heth->State = HAL_ETH_STATE_READY;
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	2201      	movs	r2, #1
 80026e6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	2200      	movs	r2, #0
 80026ee:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
      /* Return function status */
      return HAL_OK;
 80026f2:	2300      	movs	r3, #0
 80026f4:	e010      	b.n	8002718 <HAL_ETH_GetReceivedFrame_IT+0x104>
  while (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (descriptorscancounter < ETH_RXBUFNB))
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	db02      	blt.n	8002706 <HAL_ETH_GetReceivedFrame_IT+0xf2>
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	2b03      	cmp	r3, #3
 8002704:	d99c      	bls.n	8002640 <HAL_ETH_GetReceivedFrame_IT+0x2c>
    }
  }

  /* Set HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	2201      	movs	r2, #1
 800270a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	2200      	movs	r2, #0
 8002712:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_ERROR;
 8002716:	2301      	movs	r3, #1
}
 8002718:	4618      	mov	r0, r3
 800271a:	3714      	adds	r7, #20
 800271c:	46bd      	mov	sp, r7
 800271e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002722:	4770      	bx	lr

08002724 <HAL_ETH_ReadPHYRegister>:
  *                   More PHY register could be read depending on the used PHY
  * @param RegValue PHY register value                  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t *RegValue)
{
 8002724:	b580      	push	{r7, lr}
 8002726:	b086      	sub	sp, #24
 8002728:	af00      	add	r7, sp, #0
 800272a:	60f8      	str	r0, [r7, #12]
 800272c:	460b      	mov	r3, r1
 800272e:	607a      	str	r2, [r7, #4]
 8002730:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg1 = 0U;     
 8002732:	2300      	movs	r3, #0
 8002734:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 8002736:	2300      	movs	r3, #0
 8002738:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002740:	b2db      	uxtb	r3, r3
 8002742:	2b82      	cmp	r3, #130	; 0x82
 8002744:	d101      	bne.n	800274a <HAL_ETH_ReadPHYRegister+0x26>
  {
    return HAL_BUSY;
 8002746:	2302      	movs	r3, #2
 8002748:	e050      	b.n	80027ec <HAL_ETH_ReadPHYRegister+0xc8>
  }
  /* Set ETH HAL State to BUSY_RD */
  heth->State = HAL_ETH_STATE_BUSY_RD;
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	2282      	movs	r2, #130	; 0x82
 800274e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	691b      	ldr	r3, [r3, #16]
 8002758:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 800275a:	697b      	ldr	r3, [r7, #20]
 800275c:	f003 031c 	and.w	r3, r3, #28
 8002760:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII address register value */
  tmpreg1 |=(((uint32_t)heth->Init.PhyAddress << 11U) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	8a1b      	ldrh	r3, [r3, #16]
 8002766:	02db      	lsls	r3, r3, #11
 8002768:	b29b      	uxth	r3, r3
 800276a:	697a      	ldr	r2, [r7, #20]
 800276c:	4313      	orrs	r3, r2
 800276e:	617b      	str	r3, [r7, #20]
  tmpreg1 |=(((uint32_t)PHYReg<<6U) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
 8002770:	897b      	ldrh	r3, [r7, #10]
 8002772:	019b      	lsls	r3, r3, #6
 8002774:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8002778:	697a      	ldr	r2, [r7, #20]
 800277a:	4313      	orrs	r3, r2
 800277c:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 800277e:	697b      	ldr	r3, [r7, #20]
 8002780:	f023 0302 	bic.w	r3, r3, #2
 8002784:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 8002786:	697b      	ldr	r3, [r7, #20]
 8002788:	f043 0301 	orr.w	r3, r3, #1
 800278c:	617b      	str	r3, [r7, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	697a      	ldr	r2, [r7, #20]
 8002794:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8002796:	f7ff facf 	bl	8001d38 <HAL_GetTick>
 800279a:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 800279c:	e015      	b.n	80027ca <HAL_ETH_ReadPHYRegister+0xa6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_READ_TO)
 800279e:	f7ff facb 	bl	8001d38 <HAL_GetTick>
 80027a2:	4602      	mov	r2, r0
 80027a4:	693b      	ldr	r3, [r7, #16]
 80027a6:	1ad3      	subs	r3, r2, r3
 80027a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80027ac:	d309      	bcc.n	80027c2 <HAL_ETH_ReadPHYRegister+0x9e>
    {
      heth->State= HAL_ETH_STATE_READY;
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	2201      	movs	r2, #1
 80027b2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	2200      	movs	r2, #0
 80027ba:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 80027be:	2303      	movs	r3, #3
 80027c0:	e014      	b.n	80027ec <HAL_ETH_ReadPHYRegister+0xc8>
    }
    
    tmpreg1 = heth->Instance->MACMIIAR;
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	691b      	ldr	r3, [r3, #16]
 80027c8:	617b      	str	r3, [r7, #20]
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80027ca:	697b      	ldr	r3, [r7, #20]
 80027cc:	f003 0301 	and.w	r3, r3, #1
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d1e4      	bne.n	800279e <HAL_ETH_ReadPHYRegister+0x7a>
  }
  
  /* Get MACMIIDR value */
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	695b      	ldr	r3, [r3, #20]
 80027da:	b29b      	uxth	r3, r3
 80027dc:	461a      	mov	r2, r3
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	2201      	movs	r2, #1
 80027e6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 80027ea:	2300      	movs	r3, #0
}
 80027ec:	4618      	mov	r0, r3
 80027ee:	3718      	adds	r7, #24
 80027f0:	46bd      	mov	sp, r7
 80027f2:	bd80      	pop	{r7, pc}

080027f4 <HAL_ETH_WritePHYRegister>:
  *             More PHY register could be written depending on the used PHY
  * @param  RegValue the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t RegValue)
{
 80027f4:	b580      	push	{r7, lr}
 80027f6:	b086      	sub	sp, #24
 80027f8:	af00      	add	r7, sp, #0
 80027fa:	60f8      	str	r0, [r7, #12]
 80027fc:	460b      	mov	r3, r1
 80027fe:	607a      	str	r2, [r7, #4]
 8002800:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg1 = 0U;
 8002802:	2300      	movs	r3, #0
 8002804:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 8002806:	2300      	movs	r3, #0
 8002808:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002810:	b2db      	uxtb	r3, r3
 8002812:	2b42      	cmp	r3, #66	; 0x42
 8002814:	d101      	bne.n	800281a <HAL_ETH_WritePHYRegister+0x26>
  {
    return HAL_BUSY;
 8002816:	2302      	movs	r3, #2
 8002818:	e04e      	b.n	80028b8 <HAL_ETH_WritePHYRegister+0xc4>
  }
  /* Set ETH HAL State to BUSY_WR */
  heth->State = HAL_ETH_STATE_BUSY_WR;
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	2242      	movs	r2, #66	; 0x42
 800281e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	691b      	ldr	r3, [r3, #16]
 8002828:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 800282a:	697b      	ldr	r3, [r7, #20]
 800282c:	f003 031c 	and.w	r3, r3, #28
 8002830:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII register address value */
  tmpreg1 |=(((uint32_t)heth->Init.PhyAddress<<11U) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	8a1b      	ldrh	r3, [r3, #16]
 8002836:	02db      	lsls	r3, r3, #11
 8002838:	b29b      	uxth	r3, r3
 800283a:	697a      	ldr	r2, [r7, #20]
 800283c:	4313      	orrs	r3, r2
 800283e:	617b      	str	r3, [r7, #20]
  tmpreg1 |=(((uint32_t)PHYReg<<6U) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 8002840:	897b      	ldrh	r3, [r7, #10]
 8002842:	019b      	lsls	r3, r3, #6
 8002844:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8002848:	697a      	ldr	r2, [r7, #20]
 800284a:	4313      	orrs	r3, r2
 800284c:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 800284e:	697b      	ldr	r3, [r7, #20]
 8002850:	f043 0302 	orr.w	r3, r3, #2
 8002854:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 8002856:	697b      	ldr	r3, [r7, #20]
 8002858:	f043 0301 	orr.w	r3, r3, #1
 800285c:	617b      	str	r3, [r7, #20]
  
  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	b29a      	uxth	r2, r3
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	615a      	str	r2, [r3, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	697a      	ldr	r2, [r7, #20]
 800286e:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8002870:	f7ff fa62 	bl	8001d38 <HAL_GetTick>
 8002874:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8002876:	e015      	b.n	80028a4 <HAL_ETH_WritePHYRegister+0xb0>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_WRITE_TO)
 8002878:	f7ff fa5e 	bl	8001d38 <HAL_GetTick>
 800287c:	4602      	mov	r2, r0
 800287e:	693b      	ldr	r3, [r7, #16]
 8002880:	1ad3      	subs	r3, r2, r3
 8002882:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002886:	d309      	bcc.n	800289c <HAL_ETH_WritePHYRegister+0xa8>
    {
      heth->State= HAL_ETH_STATE_READY;
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	2201      	movs	r2, #1
 800288c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	2200      	movs	r2, #0
 8002894:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 8002898:	2303      	movs	r3, #3
 800289a:	e00d      	b.n	80028b8 <HAL_ETH_WritePHYRegister+0xc4>
    }
    
    tmpreg1 = heth->Instance->MACMIIAR;
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	691b      	ldr	r3, [r3, #16]
 80028a2:	617b      	str	r3, [r7, #20]
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80028a4:	697b      	ldr	r3, [r7, #20]
 80028a6:	f003 0301 	and.w	r3, r3, #1
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d1e4      	bne.n	8002878 <HAL_ETH_WritePHYRegister+0x84>
  }
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	2201      	movs	r2, #1
 80028b2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK; 
 80028b6:	2300      	movs	r3, #0
}
 80028b8:	4618      	mov	r0, r3
 80028ba:	3718      	adds	r7, #24
 80028bc:	46bd      	mov	sp, r7
 80028be:	bd80      	pop	{r7, pc}

080028c0 <HAL_ETH_Start>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{  
 80028c0:	b580      	push	{r7, lr}
 80028c2:	b082      	sub	sp, #8
 80028c4:	af00      	add	r7, sp, #0
 80028c6:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80028ce:	2b01      	cmp	r3, #1
 80028d0:	d101      	bne.n	80028d6 <HAL_ETH_Start+0x16>
 80028d2:	2302      	movs	r3, #2
 80028d4:	e01f      	b.n	8002916 <HAL_ETH_Start+0x56>
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	2201      	movs	r2, #1
 80028da:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	2202      	movs	r2, #2
 80028e2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Enable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionEnable(heth);
 80028e6:	6878      	ldr	r0, [r7, #4]
 80028e8:	f000 fa1c 	bl	8002d24 <ETH_MACTransmissionEnable>
  
  /* Enable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionEnable(heth);
 80028ec:	6878      	ldr	r0, [r7, #4]
 80028ee:	f000 fa36 	bl	8002d5e <ETH_MACReceptionEnable>
  
  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 80028f2:	6878      	ldr	r0, [r7, #4]
 80028f4:	f000 fa80 	bl	8002df8 <ETH_FlushTransmitFIFO>
  
  /* Start DMA transmission */
  ETH_DMATransmissionEnable(heth);
 80028f8:	6878      	ldr	r0, [r7, #4]
 80028fa:	f000 fa4d 	bl	8002d98 <ETH_DMATransmissionEnable>
  
  /* Start DMA reception */
  ETH_DMAReceptionEnable(heth);
 80028fe:	6878      	ldr	r0, [r7, #4]
 8002900:	f000 fa62 	bl	8002dc8 <ETH_DMAReceptionEnable>
  
  /* Set the ETH state to READY*/
  heth->State= HAL_ETH_STATE_READY;
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	2201      	movs	r2, #1
 8002908:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	2200      	movs	r2, #0
 8002910:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8002914:	2300      	movs	r3, #0
}
 8002916:	4618      	mov	r0, r3
 8002918:	3708      	adds	r7, #8
 800291a:	46bd      	mov	sp, r7
 800291c:	bd80      	pop	{r7, pc}
	...

08002920 <ETH_MACDMAConfig>:
  *         the configuration information for ETHERNET module
  * @param  err Ethernet Init error
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth, uint32_t err)
{
 8002920:	b580      	push	{r7, lr}
 8002922:	b0b0      	sub	sp, #192	; 0xc0
 8002924:	af00      	add	r7, sp, #0
 8002926:	6078      	str	r0, [r7, #4]
 8002928:	6039      	str	r1, [r7, #0]
  ETH_MACInitTypeDef macinit;
  ETH_DMAInitTypeDef dmainit;
  uint32_t tmpreg1 = 0U;
 800292a:	2300      	movs	r3, #0
 800292c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  if (err != ETH_SUCCESS) /* Auto-negotiation failed */
 8002930:	683b      	ldr	r3, [r7, #0]
 8002932:	2b00      	cmp	r3, #0
 8002934:	d007      	beq.n	8002946 <ETH_MACDMAConfig+0x26>
  {
    /* Set Ethernet duplex mode to Full-duplex */
    (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800293c:	60da      	str	r2, [r3, #12]
    
    /* Set Ethernet speed to 100M */
    (heth->Init).Speed = ETH_SPEED_100M;
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002944:	609a      	str	r2, [r3, #8]
  }
  
  /* Ethernet MAC default initialization **************************************/
  macinit.Watchdog = ETH_WATCHDOG_ENABLE;
 8002946:	2300      	movs	r3, #0
 8002948:	64bb      	str	r3, [r7, #72]	; 0x48
  macinit.Jabber = ETH_JABBER_ENABLE;
 800294a:	2300      	movs	r3, #0
 800294c:	64fb      	str	r3, [r7, #76]	; 0x4c
  macinit.InterFrameGap = ETH_INTERFRAMEGAP_96BIT;
 800294e:	2300      	movs	r3, #0
 8002950:	653b      	str	r3, [r7, #80]	; 0x50
  macinit.CarrierSense = ETH_CARRIERSENCE_ENABLE;
 8002952:	2300      	movs	r3, #0
 8002954:	657b      	str	r3, [r7, #84]	; 0x54
  macinit.ReceiveOwn = ETH_RECEIVEOWN_ENABLE;
 8002956:	2300      	movs	r3, #0
 8002958:	65bb      	str	r3, [r7, #88]	; 0x58
  macinit.LoopbackMode = ETH_LOOPBACKMODE_DISABLE;
 800295a:	2300      	movs	r3, #0
 800295c:	65fb      	str	r3, [r7, #92]	; 0x5c
  if(heth->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	69db      	ldr	r3, [r3, #28]
 8002962:	2b00      	cmp	r3, #0
 8002964:	d103      	bne.n	800296e <ETH_MACDMAConfig+0x4e>
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_ENABLE;
 8002966:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800296a:	663b      	str	r3, [r7, #96]	; 0x60
 800296c:	e001      	b.n	8002972 <ETH_MACDMAConfig+0x52>
  }
  else
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 800296e:	2300      	movs	r3, #0
 8002970:	663b      	str	r3, [r7, #96]	; 0x60
  }
  macinit.RetryTransmission = ETH_RETRYTRANSMISSION_DISABLE;
 8002972:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002976:	667b      	str	r3, [r7, #100]	; 0x64
  macinit.AutomaticPadCRCStrip = ETH_AUTOMATICPADCRCSTRIP_DISABLE;
 8002978:	2300      	movs	r3, #0
 800297a:	66bb      	str	r3, [r7, #104]	; 0x68
  macinit.BackOffLimit = ETH_BACKOFFLIMIT_10;
 800297c:	2300      	movs	r3, #0
 800297e:	66fb      	str	r3, [r7, #108]	; 0x6c
  macinit.DeferralCheck = ETH_DEFFERRALCHECK_DISABLE;
 8002980:	2300      	movs	r3, #0
 8002982:	673b      	str	r3, [r7, #112]	; 0x70
  macinit.ReceiveAll = ETH_RECEIVEAll_DISABLE;
 8002984:	2300      	movs	r3, #0
 8002986:	677b      	str	r3, [r7, #116]	; 0x74
  macinit.SourceAddrFilter = ETH_SOURCEADDRFILTER_DISABLE;
 8002988:	2300      	movs	r3, #0
 800298a:	67bb      	str	r3, [r7, #120]	; 0x78
  macinit.PassControlFrames = ETH_PASSCONTROLFRAMES_BLOCKALL;
 800298c:	2340      	movs	r3, #64	; 0x40
 800298e:	67fb      	str	r3, [r7, #124]	; 0x7c
  macinit.BroadcastFramesReception = ETH_BROADCASTFRAMESRECEPTION_ENABLE;
 8002990:	2300      	movs	r3, #0
 8002992:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  macinit.DestinationAddrFilter = ETH_DESTINATIONADDRFILTER_NORMAL;
 8002996:	2300      	movs	r3, #0
 8002998:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macinit.PromiscuousMode = ETH_PROMISCUOUS_MODE_DISABLE;
 800299c:	2300      	movs	r3, #0
 800299e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macinit.MulticastFramesFilter = ETH_MULTICASTFRAMESFILTER_PERFECT;
 80029a2:	2300      	movs	r3, #0
 80029a4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  macinit.UnicastFramesFilter = ETH_UNICASTFRAMESFILTER_PERFECT;
 80029a8:	2300      	movs	r3, #0
 80029aa:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  macinit.HashTableHigh = 0x0U;
 80029ae:	2300      	movs	r3, #0
 80029b0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  macinit.HashTableLow = 0x0U;
 80029b4:	2300      	movs	r3, #0
 80029b6:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  macinit.PauseTime = 0x0U;
 80029ba:	2300      	movs	r3, #0
 80029bc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  macinit.ZeroQuantaPause = ETH_ZEROQUANTAPAUSE_DISABLE;
 80029c0:	2380      	movs	r3, #128	; 0x80
 80029c2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  macinit.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 80029c6:	2300      	movs	r3, #0
 80029c8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  macinit.UnicastPauseFrameDetect = ETH_UNICASTPAUSEFRAMEDETECT_DISABLE;
 80029cc:	2300      	movs	r3, #0
 80029ce:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  macinit.ReceiveFlowControl = ETH_RECEIVEFLOWCONTROL_DISABLE;
 80029d2:	2300      	movs	r3, #0
 80029d4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  macinit.TransmitFlowControl = ETH_TRANSMITFLOWCONTROL_DISABLE;
 80029d8:	2300      	movs	r3, #0
 80029da:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  macinit.VLANTagComparison = ETH_VLANTAGCOMPARISON_16BIT;
 80029de:	2300      	movs	r3, #0
 80029e0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  macinit.VLANTagIdentifier = 0x0U;
 80029e4:	2300      	movs	r3, #0
 80029e6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  
  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 80029f4:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80029f8:	4bac      	ldr	r3, [pc, #688]	; (8002cac <ETH_MACDMAConfig+0x38c>)
 80029fa:	4013      	ands	r3, r2
 80029fc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Set the IPCO bit according to ETH ChecksumOffload value */
  /* Set the DR bit according to ETH RetryTransmission value */
  /* Set the ACS bit according to ETH AutomaticPadCRCStrip value */
  /* Set the BL bit according to ETH BackOffLimit value */
  /* Set the DC bit according to ETH DeferralCheck value */
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 8002a00:	6cba      	ldr	r2, [r7, #72]	; 0x48
                       macinit.Jabber | 
 8002a02:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 8002a04:	431a      	orrs	r2, r3
                       macinit.InterFrameGap |
 8002a06:	6d3b      	ldr	r3, [r7, #80]	; 0x50
                       macinit.Jabber | 
 8002a08:	431a      	orrs	r2, r3
                       macinit.CarrierSense |
 8002a0a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
                       macinit.InterFrameGap |
 8002a0c:	431a      	orrs	r2, r3
                       (heth->Init).Speed | 
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	689b      	ldr	r3, [r3, #8]
                       macinit.CarrierSense |
 8002a12:	431a      	orrs	r2, r3
                       macinit.ReceiveOwn |
 8002a14:	6dbb      	ldr	r3, [r7, #88]	; 0x58
                       (heth->Init).Speed | 
 8002a16:	431a      	orrs	r2, r3
                       macinit.LoopbackMode |
 8002a18:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
                       macinit.ReceiveOwn |
 8002a1a:	431a      	orrs	r2, r3
                       (heth->Init).DuplexMode | 
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	68db      	ldr	r3, [r3, #12]
                       macinit.LoopbackMode |
 8002a20:	431a      	orrs	r2, r3
                       macinit.ChecksumOffload |    
 8002a22:	6e3b      	ldr	r3, [r7, #96]	; 0x60
                       (heth->Init).DuplexMode | 
 8002a24:	431a      	orrs	r2, r3
                       macinit.RetryTransmission | 
 8002a26:	6e7b      	ldr	r3, [r7, #100]	; 0x64
                       macinit.ChecksumOffload |    
 8002a28:	431a      	orrs	r2, r3
                       macinit.AutomaticPadCRCStrip | 
 8002a2a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
                       macinit.RetryTransmission | 
 8002a2c:	431a      	orrs	r2, r3
                       macinit.BackOffLimit | 
 8002a2e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
                       macinit.AutomaticPadCRCStrip | 
 8002a30:	431a      	orrs	r2, r3
                       macinit.DeferralCheck);
 8002a32:	6f3b      	ldr	r3, [r7, #112]	; 0x70
                       macinit.BackOffLimit | 
 8002a34:	4313      	orrs	r3, r2
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 8002a36:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002a3a:	4313      	orrs	r3, r2
 8002a3c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002a48:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002a54:	2001      	movs	r0, #1
 8002a56:	f7ff f97b 	bl	8001d50 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1; 
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002a62:	601a      	str	r2, [r3, #0]
  /* Set the DAIF bit according to ETH DestinationAddrFilter value */
  /* Set the PR bit according to ETH PromiscuousMode value */
  /* Set the PM, HMC and HPF bits according to ETH MulticastFramesFilter value */
  /* Set the HUC and HPF bits according to ETH UnicastFramesFilter value */
  /* Write to ETHERNET MACFFR */  
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8002a64:	6f7a      	ldr	r2, [r7, #116]	; 0x74
                                        macinit.SourceAddrFilter |
 8002a66:	6fbb      	ldr	r3, [r7, #120]	; 0x78
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8002a68:	431a      	orrs	r2, r3
                                        macinit.PassControlFrames |
 8002a6a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
                                        macinit.SourceAddrFilter |
 8002a6c:	431a      	orrs	r2, r3
                                        macinit.BroadcastFramesReception | 
 8002a6e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
                                        macinit.PassControlFrames |
 8002a72:	431a      	orrs	r2, r3
                                        macinit.DestinationAddrFilter |
 8002a74:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
                                        macinit.BroadcastFramesReception | 
 8002a78:	431a      	orrs	r2, r3
                                        macinit.PromiscuousMode |
 8002a7a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
                                        macinit.DestinationAddrFilter |
 8002a7e:	431a      	orrs	r2, r3
                                        macinit.MulticastFramesFilter |
 8002a80:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
                                        macinit.PromiscuousMode |
 8002a84:	ea42 0103 	orr.w	r1, r2, r3
                                        macinit.UnicastFramesFilter);
 8002a88:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
                                        macinit.MulticastFramesFilter |
 8002a90:	430a      	orrs	r2, r1
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8002a92:	605a      	str	r2, [r3, #4]
   
   /* Wait until the write operation will be taken into account:
      at least four TX_CLK/RX_CLK clock cycles */
   tmpreg1 = (heth->Instance)->MACFFR;
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	685b      	ldr	r3, [r3, #4]
 8002a9a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8002a9e:	2001      	movs	r0, #1
 8002aa0:	f7ff f956 	bl	8001d50 <HAL_Delay>
   (heth->Instance)->MACFFR = tmpreg1;
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002aac:	605a      	str	r2, [r3, #4]
   
   /*--------------- ETHERNET MACHTHR and MACHTLR Configuration --------------*/
   /* Write to ETHERNET MACHTHR */
   (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002ab6:	609a      	str	r2, [r3, #8]
   
   /* Write to ETHERNET MACHTLR */
   (heth->Instance)->MACHTLR = (uint32_t)macinit.HashTableLow;
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8002ac0:	60da      	str	r2, [r3, #12]
   /*----------------------- ETHERNET MACFCR Configuration -------------------*/
   
   /* Get the ETHERNET MACFCR value */  
   tmpreg1 = (heth->Instance)->MACFCR;
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	699b      	ldr	r3, [r3, #24]
 8002ac8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Clear xx bits */
   tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8002acc:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002ad0:	f64f 7341 	movw	r3, #65345	; 0xff41
 8002ad4:	4013      	ands	r3, r2
 8002ad6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Set the DZPQ bit according to ETH ZeroQuantaPause value */
   /* Set the PLT bit according to ETH PauseLowThreshold value */
   /* Set the UP bit according to ETH UnicastPauseFrameDetect value */
   /* Set the RFE bit according to ETH ReceiveFlowControl value */
   /* Set the TFE bit according to ETH TransmitFlowControl value */ 
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 8002ada:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002ade:	041a      	lsls	r2, r3, #16
                        macinit.ZeroQuantaPause |
 8002ae0:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 8002ae4:	431a      	orrs	r2, r3
                        macinit.PauseLowThreshold |
 8002ae6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
                        macinit.ZeroQuantaPause |
 8002aea:	431a      	orrs	r2, r3
                        macinit.UnicastPauseFrameDetect | 
 8002aec:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
                        macinit.PauseLowThreshold |
 8002af0:	431a      	orrs	r2, r3
                        macinit.ReceiveFlowControl |
 8002af2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
                        macinit.UnicastPauseFrameDetect | 
 8002af6:	431a      	orrs	r2, r3
                        macinit.TransmitFlowControl); 
 8002af8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
                        macinit.ReceiveFlowControl |
 8002afc:	4313      	orrs	r3, r2
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 8002afe:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002b02:	4313      	orrs	r3, r2
 8002b04:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   
   /* Write to ETHERNET MACFCR */
   (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002b10:	619a      	str	r2, [r3, #24]
   
   /* Wait until the write operation will be taken into account:
   at least four TX_CLK/RX_CLK clock cycles */
   tmpreg1 = (heth->Instance)->MACFCR;
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	699b      	ldr	r3, [r3, #24]
 8002b18:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8002b1c:	2001      	movs	r0, #1
 8002b1e:	f7ff f917 	bl	8001d50 <HAL_Delay>
   (heth->Instance)->MACFCR = tmpreg1;
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002b2a:	619a      	str	r2, [r3, #24]
   
   /*----------------------- ETHERNET MACVLANTR Configuration ----------------*/
   /* Set the ETV bit according to ETH VLANTagComparison value */
   /* Set the VL bit according to ETH VLANTagIdentifier value */  
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8002b2c:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
                                            macinit.VLANTagIdentifier);
 8002b30:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	430a      	orrs	r2, r1
 8002b3a:	61da      	str	r2, [r3, #28]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACVLANTR;
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	69db      	ldr	r3, [r3, #28]
 8002b42:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8002b46:	2001      	movs	r0, #1
 8002b48:	f7ff f902 	bl	8001d50 <HAL_Delay>
    (heth->Instance)->MACVLANTR = tmpreg1;
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002b54:	61da      	str	r2, [r3, #28]
    
    /* Ethernet DMA default initialization ************************************/
    dmainit.DropTCPIPChecksumErrorFrame = ETH_DROPTCPIPCHECKSUMERRORFRAME_ENABLE;
 8002b56:	2300      	movs	r3, #0
 8002b58:	60bb      	str	r3, [r7, #8]
    dmainit.ReceiveStoreForward = ETH_RECEIVESTOREFORWARD_ENABLE;
 8002b5a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002b5e:	60fb      	str	r3, [r7, #12]
    dmainit.FlushReceivedFrame = ETH_FLUSHRECEIVEDFRAME_ENABLE;
 8002b60:	2300      	movs	r3, #0
 8002b62:	613b      	str	r3, [r7, #16]
    dmainit.TransmitStoreForward = ETH_TRANSMITSTOREFORWARD_ENABLE;  
 8002b64:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002b68:	617b      	str	r3, [r7, #20]
    dmainit.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8002b6a:	2300      	movs	r3, #0
 8002b6c:	61bb      	str	r3, [r7, #24]
    dmainit.ForwardErrorFrames = ETH_FORWARDERRORFRAMES_DISABLE;
 8002b6e:	2300      	movs	r3, #0
 8002b70:	61fb      	str	r3, [r7, #28]
    dmainit.ForwardUndersizedGoodFrames = ETH_FORWARDUNDERSIZEDGOODFRAMES_DISABLE;
 8002b72:	2300      	movs	r3, #0
 8002b74:	623b      	str	r3, [r7, #32]
    dmainit.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8002b76:	2300      	movs	r3, #0
 8002b78:	627b      	str	r3, [r7, #36]	; 0x24
    dmainit.SecondFrameOperate = ETH_SECONDFRAMEOPERARTE_ENABLE;
 8002b7a:	2304      	movs	r3, #4
 8002b7c:	62bb      	str	r3, [r7, #40]	; 0x28
    dmainit.AddressAlignedBeats = ETH_ADDRESSALIGNEDBEATS_ENABLE;
 8002b7e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002b82:	62fb      	str	r3, [r7, #44]	; 0x2c
    dmainit.FixedBurst = ETH_FIXEDBURST_ENABLE;
 8002b84:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002b88:	633b      	str	r3, [r7, #48]	; 0x30
    dmainit.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8002b8a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002b8e:	637b      	str	r3, [r7, #52]	; 0x34
    dmainit.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8002b90:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002b94:	63bb      	str	r3, [r7, #56]	; 0x38
    dmainit.EnhancedDescriptorFormat = ETH_DMAENHANCEDDESCRIPTOR_ENABLE;
 8002b96:	2380      	movs	r3, #128	; 0x80
 8002b98:	63fb      	str	r3, [r7, #60]	; 0x3c
    dmainit.DescriptorSkipLength = 0x0U;
 8002b9a:	2300      	movs	r3, #0
 8002b9c:	643b      	str	r3, [r7, #64]	; 0x40
    dmainit.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8002b9e:	2300      	movs	r3, #0
 8002ba0:	647b      	str	r3, [r7, #68]	; 0x44
    
    /* Get the ETHERNET DMAOMR value */
    tmpreg1 = (heth->Instance)->DMAOMR;
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002baa:	3318      	adds	r3, #24
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Clear xx bits */
    tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8002bb2:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002bb6:	4b3e      	ldr	r3, [pc, #248]	; (8002cb0 <ETH_MACDMAConfig+0x390>)
 8002bb8:	4013      	ands	r3, r2
 8002bba:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Set the TTC bit according to ETH TransmitThresholdControl value */
    /* Set the FEF bit according to ETH ForwardErrorFrames value */
    /* Set the FUF bit according to ETH ForwardUndersizedGoodFrames value */
    /* Set the RTC bit according to ETH ReceiveThresholdControl value */
    /* Set the OSF bit according to ETH SecondFrameOperate value */
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8002bbe:	68ba      	ldr	r2, [r7, #8]
                         dmainit.ReceiveStoreForward |
 8002bc0:	68fb      	ldr	r3, [r7, #12]
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8002bc2:	431a      	orrs	r2, r3
                         dmainit.FlushReceivedFrame |
 8002bc4:	693b      	ldr	r3, [r7, #16]
                         dmainit.ReceiveStoreForward |
 8002bc6:	431a      	orrs	r2, r3
                         dmainit.TransmitStoreForward | 
 8002bc8:	697b      	ldr	r3, [r7, #20]
                         dmainit.FlushReceivedFrame |
 8002bca:	431a      	orrs	r2, r3
                         dmainit.TransmitThresholdControl |
 8002bcc:	69bb      	ldr	r3, [r7, #24]
                         dmainit.TransmitStoreForward | 
 8002bce:	431a      	orrs	r2, r3
                         dmainit.ForwardErrorFrames |
 8002bd0:	69fb      	ldr	r3, [r7, #28]
                         dmainit.TransmitThresholdControl |
 8002bd2:	431a      	orrs	r2, r3
                         dmainit.ForwardUndersizedGoodFrames |
 8002bd4:	6a3b      	ldr	r3, [r7, #32]
                         dmainit.ForwardErrorFrames |
 8002bd6:	431a      	orrs	r2, r3
                         dmainit.ReceiveThresholdControl |
 8002bd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
                         dmainit.ForwardUndersizedGoodFrames |
 8002bda:	431a      	orrs	r2, r3
                         dmainit.SecondFrameOperate);
 8002bdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
                         dmainit.ReceiveThresholdControl |
 8002bde:	4313      	orrs	r3, r2
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8002be0:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002be4:	4313      	orrs	r3, r2
 8002be6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    
    /* Write to ETHERNET DMAOMR */
    (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002bf2:	3318      	adds	r3, #24
 8002bf4:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002bf8:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->DMAOMR;
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002c02:	3318      	adds	r3, #24
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8002c0a:	2001      	movs	r0, #1
 8002c0c:	f7ff f8a0 	bl	8001d50 <HAL_Delay>
    (heth->Instance)->DMAOMR = tmpreg1;
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002c18:	3318      	adds	r3, #24
 8002c1a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002c1e:	601a      	str	r2, [r3, #0]
    /* Set the RPBL and 4*PBL bits according to ETH RxDMABurstLength value */
    /* Set the PBL and 4*PBL bits according to ETH TxDMABurstLength value */
    /* Set the Enhanced DMA descriptors bit according to ETH EnhancedDescriptorFormat value*/
    /* Set the DSL bit according to ETH DesciptorSkipLength value */
    /* Set the PR and DA bits according to ETH DMAArbitration value */
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8002c20:	6afa      	ldr	r2, [r7, #44]	; 0x2c
                                          dmainit.FixedBurst |
 8002c22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8002c24:	431a      	orrs	r2, r3
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 8002c26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                          dmainit.FixedBurst |
 8002c28:	431a      	orrs	r2, r3
                                          dmainit.TxDMABurstLength |
 8002c2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 8002c2c:	431a      	orrs	r2, r3
                                          dmainit.EnhancedDescriptorFormat |
 8002c2e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
                                          dmainit.TxDMABurstLength |
 8002c30:	431a      	orrs	r2, r3
                                          (dmainit.DescriptorSkipLength << 2U) |
 8002c32:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002c34:	009b      	lsls	r3, r3, #2
                                          dmainit.EnhancedDescriptorFormat |
 8002c36:	431a      	orrs	r2, r3
                                          dmainit.DMAArbitration |
 8002c38:	6c7b      	ldr	r3, [r7, #68]	; 0x44
                                          (dmainit.DescriptorSkipLength << 2U) |
 8002c3a:	431a      	orrs	r2, r3
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8002c44:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002c48:	601a      	str	r2, [r3, #0]
                                          ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */
     
     /* Wait until the write operation will be taken into account:
        at least four TX_CLK/RX_CLK clock cycles */
     tmpreg1 = (heth->Instance)->DMABMR;
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8002c58:	2001      	movs	r0, #1
 8002c5a:	f7ff f879 	bl	8001d50 <HAL_Delay>
     (heth->Instance)->DMABMR = tmpreg1;
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002c66:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002c6a:	601a      	str	r2, [r3, #0]

     if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	699b      	ldr	r3, [r3, #24]
 8002c70:	2b01      	cmp	r3, #1
 8002c72:	d10f      	bne.n	8002c94 <ETH_MACDMAConfig+0x374>
     {
       /* Enable the Ethernet Rx Interrupt */
       __HAL_ETH_DMA_ENABLE_IT((heth), ETH_DMA_IT_NIS | ETH_DMA_IT_R);
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002c7c:	331c      	adds	r3, #28
 8002c7e:	681a      	ldr	r2, [r3, #0]
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8002c88:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002c8c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002c90:	331c      	adds	r3, #28
 8002c92:	601a      	str	r2, [r3, #0]
     }

     /* Initialize MAC address in ethernet MAC */ 
     ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	695b      	ldr	r3, [r3, #20]
 8002c98:	461a      	mov	r2, r3
 8002c9a:	2100      	movs	r1, #0
 8002c9c:	6878      	ldr	r0, [r7, #4]
 8002c9e:	f000 f809 	bl	8002cb4 <ETH_MACAddressConfig>
}
 8002ca2:	bf00      	nop
 8002ca4:	37c0      	adds	r7, #192	; 0xc0
 8002ca6:	46bd      	mov	sp, r7
 8002ca8:	bd80      	pop	{r7, pc}
 8002caa:	bf00      	nop
 8002cac:	ff20810f 	.word	0xff20810f
 8002cb0:	f8de3f23 	.word	0xf8de3f23

08002cb4 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8002cb4:	b480      	push	{r7}
 8002cb6:	b087      	sub	sp, #28
 8002cb8:	af00      	add	r7, sp, #0
 8002cba:	60f8      	str	r0, [r7, #12]
 8002cbc:	60b9      	str	r1, [r7, #8]
 8002cbe:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ETH_MAC_ADDRESS0123(MacAddr));
  
  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	3305      	adds	r3, #5
 8002cc4:	781b      	ldrb	r3, [r3, #0]
 8002cc6:	021b      	lsls	r3, r3, #8
 8002cc8:	687a      	ldr	r2, [r7, #4]
 8002cca:	3204      	adds	r2, #4
 8002ccc:	7812      	ldrb	r2, [r2, #0]
 8002cce:	4313      	orrs	r3, r2
 8002cd0:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8002cd2:	68ba      	ldr	r2, [r7, #8]
 8002cd4:	4b11      	ldr	r3, [pc, #68]	; (8002d1c <ETH_MACAddressConfig+0x68>)
 8002cd6:	4413      	add	r3, r2
 8002cd8:	461a      	mov	r2, r3
 8002cda:	697b      	ldr	r3, [r7, #20]
 8002cdc:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	3303      	adds	r3, #3
 8002ce2:	781b      	ldrb	r3, [r3, #0]
 8002ce4:	061a      	lsls	r2, r3, #24
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	3302      	adds	r3, #2
 8002cea:	781b      	ldrb	r3, [r3, #0]
 8002cec:	041b      	lsls	r3, r3, #16
 8002cee:	431a      	orrs	r2, r3
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	3301      	adds	r3, #1
 8002cf4:	781b      	ldrb	r3, [r3, #0]
 8002cf6:	021b      	lsls	r3, r3, #8
 8002cf8:	4313      	orrs	r3, r2
 8002cfa:	687a      	ldr	r2, [r7, #4]
 8002cfc:	7812      	ldrb	r2, [r2, #0]
 8002cfe:	4313      	orrs	r3, r2
 8002d00:	617b      	str	r3, [r7, #20]
  
  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8002d02:	68ba      	ldr	r2, [r7, #8]
 8002d04:	4b06      	ldr	r3, [pc, #24]	; (8002d20 <ETH_MACAddressConfig+0x6c>)
 8002d06:	4413      	add	r3, r2
 8002d08:	461a      	mov	r2, r3
 8002d0a:	697b      	ldr	r3, [r7, #20]
 8002d0c:	6013      	str	r3, [r2, #0]
}
 8002d0e:	bf00      	nop
 8002d10:	371c      	adds	r7, #28
 8002d12:	46bd      	mov	sp, r7
 8002d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d18:	4770      	bx	lr
 8002d1a:	bf00      	nop
 8002d1c:	40028040 	.word	0x40028040
 8002d20:	40028044 	.word	0x40028044

08002d24 <ETH_MACTransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module  
  * @retval None
  */
static void ETH_MACTransmissionEnable(ETH_HandleTypeDef *heth)
{ 
 8002d24:	b580      	push	{r7, lr}
 8002d26:	b084      	sub	sp, #16
 8002d28:	af00      	add	r7, sp, #0
 8002d2a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8002d2c:	2300      	movs	r3, #0
 8002d2e:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC transmission */
  (heth->Instance)->MACCR |= ETH_MACCR_TE;
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	681a      	ldr	r2, [r3, #0]
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	f042 0208 	orr.w	r2, r2, #8
 8002d3e:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8002d48:	2001      	movs	r0, #1
 8002d4a:	f000 f87f 	bl	8002e4c <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	68fa      	ldr	r2, [r7, #12]
 8002d54:	601a      	str	r2, [r3, #0]
}
 8002d56:	bf00      	nop
 8002d58:	3710      	adds	r7, #16
 8002d5a:	46bd      	mov	sp, r7
 8002d5c:	bd80      	pop	{r7, pc}

08002d5e <ETH_MACReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_MACReceptionEnable(ETH_HandleTypeDef *heth)
{ 
 8002d5e:	b580      	push	{r7, lr}
 8002d60:	b084      	sub	sp, #16
 8002d62:	af00      	add	r7, sp, #0
 8002d64:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8002d66:	2300      	movs	r3, #0
 8002d68:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC reception */
  (heth->Instance)->MACCR |= ETH_MACCR_RE;
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	681a      	ldr	r2, [r3, #0]
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	f042 0204 	orr.w	r2, r2, #4
 8002d78:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8002d82:	2001      	movs	r0, #1
 8002d84:	f000 f862 	bl	8002e4c <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	68fa      	ldr	r2, [r7, #12]
 8002d8e:	601a      	str	r2, [r3, #0]
}
 8002d90:	bf00      	nop
 8002d92:	3710      	adds	r7, #16
 8002d94:	46bd      	mov	sp, r7
 8002d96:	bd80      	pop	{r7, pc}

08002d98 <ETH_DMATransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_DMATransmissionEnable(ETH_HandleTypeDef *heth)
{
 8002d98:	b480      	push	{r7}
 8002d9a:	b083      	sub	sp, #12
 8002d9c:	af00      	add	r7, sp, #0
 8002d9e:	6078      	str	r0, [r7, #4]
  /* Enable the DMA transmission */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_ST;  
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002da8:	3318      	adds	r3, #24
 8002daa:	681a      	ldr	r2, [r3, #0]
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002db4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002db8:	3318      	adds	r3, #24
 8002dba:	601a      	str	r2, [r3, #0]
}
 8002dbc:	bf00      	nop
 8002dbe:	370c      	adds	r7, #12
 8002dc0:	46bd      	mov	sp, r7
 8002dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc6:	4770      	bx	lr

08002dc8 <ETH_DMAReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module 
  * @retval None
  */
static void ETH_DMAReceptionEnable(ETH_HandleTypeDef *heth)
{  
 8002dc8:	b480      	push	{r7}
 8002dca:	b083      	sub	sp, #12
 8002dcc:	af00      	add	r7, sp, #0
 8002dce:	6078      	str	r0, [r7, #4]
  /* Enable the DMA reception */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_SR;  
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002dd8:	3318      	adds	r3, #24
 8002dda:	681a      	ldr	r2, [r3, #0]
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	f042 0202 	orr.w	r2, r2, #2
 8002de4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002de8:	3318      	adds	r3, #24
 8002dea:	601a      	str	r2, [r3, #0]
}
 8002dec:	bf00      	nop
 8002dee:	370c      	adds	r7, #12
 8002df0:	46bd      	mov	sp, r7
 8002df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df6:	4770      	bx	lr

08002df8 <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 8002df8:	b580      	push	{r7, lr}
 8002dfa:	b084      	sub	sp, #16
 8002dfc:	af00      	add	r7, sp, #0
 8002dfe:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8002e00:	2300      	movs	r3, #0
 8002e02:	60fb      	str	r3, [r7, #12]
  
  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002e0c:	3318      	adds	r3, #24
 8002e0e:	681a      	ldr	r2, [r3, #0]
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8002e18:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002e1c:	3318      	adds	r3, #24
 8002e1e:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002e28:	3318      	adds	r3, #24
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8002e2e:	2001      	movs	r0, #1
 8002e30:	f000 f80c 	bl	8002e4c <ETH_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	68fa      	ldr	r2, [r7, #12]
 8002e3a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002e3e:	3318      	adds	r3, #24
 8002e40:	601a      	str	r2, [r3, #0]
}
 8002e42:	bf00      	nop
 8002e44:	3710      	adds	r7, #16
 8002e46:	46bd      	mov	sp, r7
 8002e48:	bd80      	pop	{r7, pc}
	...

08002e4c <ETH_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay specifies the delay time length, in milliseconds.
  * @retval None
  */
static void ETH_Delay(uint32_t mdelay)
{
 8002e4c:	b480      	push	{r7}
 8002e4e:	b085      	sub	sp, #20
 8002e50:	af00      	add	r7, sp, #0
 8002e52:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002e54:	4b0a      	ldr	r3, [pc, #40]	; (8002e80 <ETH_Delay+0x34>)
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	4a0a      	ldr	r2, [pc, #40]	; (8002e84 <ETH_Delay+0x38>)
 8002e5a:	fba2 2303 	umull	r2, r3, r2, r3
 8002e5e:	0a5b      	lsrs	r3, r3, #9
 8002e60:	687a      	ldr	r2, [r7, #4]
 8002e62:	fb02 f303 	mul.w	r3, r2, r3
 8002e66:	60fb      	str	r3, [r7, #12]
  do 
  {
    __NOP();
 8002e68:	bf00      	nop
  } 
  while (Delay --);
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	1e5a      	subs	r2, r3, #1
 8002e6e:	60fa      	str	r2, [r7, #12]
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d1f9      	bne.n	8002e68 <ETH_Delay+0x1c>
}
 8002e74:	bf00      	nop
 8002e76:	3714      	adds	r7, #20
 8002e78:	46bd      	mov	sp, r7
 8002e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e7e:	4770      	bx	lr
 8002e80:	20000000 	.word	0x20000000
 8002e84:	10624dd3 	.word	0x10624dd3

08002e88 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002e88:	b480      	push	{r7}
 8002e8a:	b089      	sub	sp, #36	; 0x24
 8002e8c:	af00      	add	r7, sp, #0
 8002e8e:	6078      	str	r0, [r7, #4]
 8002e90:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002e92:	2300      	movs	r3, #0
 8002e94:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002e96:	2300      	movs	r3, #0
 8002e98:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002e9a:	2300      	movs	r3, #0
 8002e9c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002e9e:	2300      	movs	r3, #0
 8002ea0:	61fb      	str	r3, [r7, #28]
 8002ea2:	e177      	b.n	8003194 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002ea4:	2201      	movs	r2, #1
 8002ea6:	69fb      	ldr	r3, [r7, #28]
 8002ea8:	fa02 f303 	lsl.w	r3, r2, r3
 8002eac:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002eae:	683b      	ldr	r3, [r7, #0]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	697a      	ldr	r2, [r7, #20]
 8002eb4:	4013      	ands	r3, r2
 8002eb6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002eb8:	693a      	ldr	r2, [r7, #16]
 8002eba:	697b      	ldr	r3, [r7, #20]
 8002ebc:	429a      	cmp	r2, r3
 8002ebe:	f040 8166 	bne.w	800318e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002ec2:	683b      	ldr	r3, [r7, #0]
 8002ec4:	685b      	ldr	r3, [r3, #4]
 8002ec6:	2b02      	cmp	r3, #2
 8002ec8:	d003      	beq.n	8002ed2 <HAL_GPIO_Init+0x4a>
 8002eca:	683b      	ldr	r3, [r7, #0]
 8002ecc:	685b      	ldr	r3, [r3, #4]
 8002ece:	2b12      	cmp	r3, #18
 8002ed0:	d123      	bne.n	8002f1a <HAL_GPIO_Init+0x92>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002ed2:	69fb      	ldr	r3, [r7, #28]
 8002ed4:	08da      	lsrs	r2, r3, #3
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	3208      	adds	r2, #8
 8002eda:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002ede:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002ee0:	69fb      	ldr	r3, [r7, #28]
 8002ee2:	f003 0307 	and.w	r3, r3, #7
 8002ee6:	009b      	lsls	r3, r3, #2
 8002ee8:	220f      	movs	r2, #15
 8002eea:	fa02 f303 	lsl.w	r3, r2, r3
 8002eee:	43db      	mvns	r3, r3
 8002ef0:	69ba      	ldr	r2, [r7, #24]
 8002ef2:	4013      	ands	r3, r2
 8002ef4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002ef6:	683b      	ldr	r3, [r7, #0]
 8002ef8:	691a      	ldr	r2, [r3, #16]
 8002efa:	69fb      	ldr	r3, [r7, #28]
 8002efc:	f003 0307 	and.w	r3, r3, #7
 8002f00:	009b      	lsls	r3, r3, #2
 8002f02:	fa02 f303 	lsl.w	r3, r2, r3
 8002f06:	69ba      	ldr	r2, [r7, #24]
 8002f08:	4313      	orrs	r3, r2
 8002f0a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002f0c:	69fb      	ldr	r3, [r7, #28]
 8002f0e:	08da      	lsrs	r2, r3, #3
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	3208      	adds	r2, #8
 8002f14:	69b9      	ldr	r1, [r7, #24]
 8002f16:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002f20:	69fb      	ldr	r3, [r7, #28]
 8002f22:	005b      	lsls	r3, r3, #1
 8002f24:	2203      	movs	r2, #3
 8002f26:	fa02 f303 	lsl.w	r3, r2, r3
 8002f2a:	43db      	mvns	r3, r3
 8002f2c:	69ba      	ldr	r2, [r7, #24]
 8002f2e:	4013      	ands	r3, r2
 8002f30:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002f32:	683b      	ldr	r3, [r7, #0]
 8002f34:	685b      	ldr	r3, [r3, #4]
 8002f36:	f003 0203 	and.w	r2, r3, #3
 8002f3a:	69fb      	ldr	r3, [r7, #28]
 8002f3c:	005b      	lsls	r3, r3, #1
 8002f3e:	fa02 f303 	lsl.w	r3, r2, r3
 8002f42:	69ba      	ldr	r2, [r7, #24]
 8002f44:	4313      	orrs	r3, r2
 8002f46:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	69ba      	ldr	r2, [r7, #24]
 8002f4c:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002f4e:	683b      	ldr	r3, [r7, #0]
 8002f50:	685b      	ldr	r3, [r3, #4]
 8002f52:	2b01      	cmp	r3, #1
 8002f54:	d00b      	beq.n	8002f6e <HAL_GPIO_Init+0xe6>
 8002f56:	683b      	ldr	r3, [r7, #0]
 8002f58:	685b      	ldr	r3, [r3, #4]
 8002f5a:	2b02      	cmp	r3, #2
 8002f5c:	d007      	beq.n	8002f6e <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002f5e:	683b      	ldr	r3, [r7, #0]
 8002f60:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002f62:	2b11      	cmp	r3, #17
 8002f64:	d003      	beq.n	8002f6e <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002f66:	683b      	ldr	r3, [r7, #0]
 8002f68:	685b      	ldr	r3, [r3, #4]
 8002f6a:	2b12      	cmp	r3, #18
 8002f6c:	d130      	bne.n	8002fd0 <HAL_GPIO_Init+0x148>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	689b      	ldr	r3, [r3, #8]
 8002f72:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002f74:	69fb      	ldr	r3, [r7, #28]
 8002f76:	005b      	lsls	r3, r3, #1
 8002f78:	2203      	movs	r2, #3
 8002f7a:	fa02 f303 	lsl.w	r3, r2, r3
 8002f7e:	43db      	mvns	r3, r3
 8002f80:	69ba      	ldr	r2, [r7, #24]
 8002f82:	4013      	ands	r3, r2
 8002f84:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002f86:	683b      	ldr	r3, [r7, #0]
 8002f88:	68da      	ldr	r2, [r3, #12]
 8002f8a:	69fb      	ldr	r3, [r7, #28]
 8002f8c:	005b      	lsls	r3, r3, #1
 8002f8e:	fa02 f303 	lsl.w	r3, r2, r3
 8002f92:	69ba      	ldr	r2, [r7, #24]
 8002f94:	4313      	orrs	r3, r2
 8002f96:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	69ba      	ldr	r2, [r7, #24]
 8002f9c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	685b      	ldr	r3, [r3, #4]
 8002fa2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002fa4:	2201      	movs	r2, #1
 8002fa6:	69fb      	ldr	r3, [r7, #28]
 8002fa8:	fa02 f303 	lsl.w	r3, r2, r3
 8002fac:	43db      	mvns	r3, r3
 8002fae:	69ba      	ldr	r2, [r7, #24]
 8002fb0:	4013      	ands	r3, r2
 8002fb2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002fb4:	683b      	ldr	r3, [r7, #0]
 8002fb6:	685b      	ldr	r3, [r3, #4]
 8002fb8:	091b      	lsrs	r3, r3, #4
 8002fba:	f003 0201 	and.w	r2, r3, #1
 8002fbe:	69fb      	ldr	r3, [r7, #28]
 8002fc0:	fa02 f303 	lsl.w	r3, r2, r3
 8002fc4:	69ba      	ldr	r2, [r7, #24]
 8002fc6:	4313      	orrs	r3, r2
 8002fc8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	69ba      	ldr	r2, [r7, #24]
 8002fce:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	68db      	ldr	r3, [r3, #12]
 8002fd4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002fd6:	69fb      	ldr	r3, [r7, #28]
 8002fd8:	005b      	lsls	r3, r3, #1
 8002fda:	2203      	movs	r2, #3
 8002fdc:	fa02 f303 	lsl.w	r3, r2, r3
 8002fe0:	43db      	mvns	r3, r3
 8002fe2:	69ba      	ldr	r2, [r7, #24]
 8002fe4:	4013      	ands	r3, r2
 8002fe6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002fe8:	683b      	ldr	r3, [r7, #0]
 8002fea:	689a      	ldr	r2, [r3, #8]
 8002fec:	69fb      	ldr	r3, [r7, #28]
 8002fee:	005b      	lsls	r3, r3, #1
 8002ff0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ff4:	69ba      	ldr	r2, [r7, #24]
 8002ff6:	4313      	orrs	r3, r2
 8002ff8:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	69ba      	ldr	r2, [r7, #24]
 8002ffe:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003000:	683b      	ldr	r3, [r7, #0]
 8003002:	685b      	ldr	r3, [r3, #4]
 8003004:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003008:	2b00      	cmp	r3, #0
 800300a:	f000 80c0 	beq.w	800318e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800300e:	2300      	movs	r3, #0
 8003010:	60fb      	str	r3, [r7, #12]
 8003012:	4b65      	ldr	r3, [pc, #404]	; (80031a8 <HAL_GPIO_Init+0x320>)
 8003014:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003016:	4a64      	ldr	r2, [pc, #400]	; (80031a8 <HAL_GPIO_Init+0x320>)
 8003018:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800301c:	6453      	str	r3, [r2, #68]	; 0x44
 800301e:	4b62      	ldr	r3, [pc, #392]	; (80031a8 <HAL_GPIO_Init+0x320>)
 8003020:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003022:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003026:	60fb      	str	r3, [r7, #12]
 8003028:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800302a:	4a60      	ldr	r2, [pc, #384]	; (80031ac <HAL_GPIO_Init+0x324>)
 800302c:	69fb      	ldr	r3, [r7, #28]
 800302e:	089b      	lsrs	r3, r3, #2
 8003030:	3302      	adds	r3, #2
 8003032:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003036:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003038:	69fb      	ldr	r3, [r7, #28]
 800303a:	f003 0303 	and.w	r3, r3, #3
 800303e:	009b      	lsls	r3, r3, #2
 8003040:	220f      	movs	r2, #15
 8003042:	fa02 f303 	lsl.w	r3, r2, r3
 8003046:	43db      	mvns	r3, r3
 8003048:	69ba      	ldr	r2, [r7, #24]
 800304a:	4013      	ands	r3, r2
 800304c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	4a57      	ldr	r2, [pc, #348]	; (80031b0 <HAL_GPIO_Init+0x328>)
 8003052:	4293      	cmp	r3, r2
 8003054:	d037      	beq.n	80030c6 <HAL_GPIO_Init+0x23e>
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	4a56      	ldr	r2, [pc, #344]	; (80031b4 <HAL_GPIO_Init+0x32c>)
 800305a:	4293      	cmp	r3, r2
 800305c:	d031      	beq.n	80030c2 <HAL_GPIO_Init+0x23a>
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	4a55      	ldr	r2, [pc, #340]	; (80031b8 <HAL_GPIO_Init+0x330>)
 8003062:	4293      	cmp	r3, r2
 8003064:	d02b      	beq.n	80030be <HAL_GPIO_Init+0x236>
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	4a54      	ldr	r2, [pc, #336]	; (80031bc <HAL_GPIO_Init+0x334>)
 800306a:	4293      	cmp	r3, r2
 800306c:	d025      	beq.n	80030ba <HAL_GPIO_Init+0x232>
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	4a53      	ldr	r2, [pc, #332]	; (80031c0 <HAL_GPIO_Init+0x338>)
 8003072:	4293      	cmp	r3, r2
 8003074:	d01f      	beq.n	80030b6 <HAL_GPIO_Init+0x22e>
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	4a52      	ldr	r2, [pc, #328]	; (80031c4 <HAL_GPIO_Init+0x33c>)
 800307a:	4293      	cmp	r3, r2
 800307c:	d019      	beq.n	80030b2 <HAL_GPIO_Init+0x22a>
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	4a51      	ldr	r2, [pc, #324]	; (80031c8 <HAL_GPIO_Init+0x340>)
 8003082:	4293      	cmp	r3, r2
 8003084:	d013      	beq.n	80030ae <HAL_GPIO_Init+0x226>
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	4a50      	ldr	r2, [pc, #320]	; (80031cc <HAL_GPIO_Init+0x344>)
 800308a:	4293      	cmp	r3, r2
 800308c:	d00d      	beq.n	80030aa <HAL_GPIO_Init+0x222>
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	4a4f      	ldr	r2, [pc, #316]	; (80031d0 <HAL_GPIO_Init+0x348>)
 8003092:	4293      	cmp	r3, r2
 8003094:	d007      	beq.n	80030a6 <HAL_GPIO_Init+0x21e>
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	4a4e      	ldr	r2, [pc, #312]	; (80031d4 <HAL_GPIO_Init+0x34c>)
 800309a:	4293      	cmp	r3, r2
 800309c:	d101      	bne.n	80030a2 <HAL_GPIO_Init+0x21a>
 800309e:	2309      	movs	r3, #9
 80030a0:	e012      	b.n	80030c8 <HAL_GPIO_Init+0x240>
 80030a2:	230a      	movs	r3, #10
 80030a4:	e010      	b.n	80030c8 <HAL_GPIO_Init+0x240>
 80030a6:	2308      	movs	r3, #8
 80030a8:	e00e      	b.n	80030c8 <HAL_GPIO_Init+0x240>
 80030aa:	2307      	movs	r3, #7
 80030ac:	e00c      	b.n	80030c8 <HAL_GPIO_Init+0x240>
 80030ae:	2306      	movs	r3, #6
 80030b0:	e00a      	b.n	80030c8 <HAL_GPIO_Init+0x240>
 80030b2:	2305      	movs	r3, #5
 80030b4:	e008      	b.n	80030c8 <HAL_GPIO_Init+0x240>
 80030b6:	2304      	movs	r3, #4
 80030b8:	e006      	b.n	80030c8 <HAL_GPIO_Init+0x240>
 80030ba:	2303      	movs	r3, #3
 80030bc:	e004      	b.n	80030c8 <HAL_GPIO_Init+0x240>
 80030be:	2302      	movs	r3, #2
 80030c0:	e002      	b.n	80030c8 <HAL_GPIO_Init+0x240>
 80030c2:	2301      	movs	r3, #1
 80030c4:	e000      	b.n	80030c8 <HAL_GPIO_Init+0x240>
 80030c6:	2300      	movs	r3, #0
 80030c8:	69fa      	ldr	r2, [r7, #28]
 80030ca:	f002 0203 	and.w	r2, r2, #3
 80030ce:	0092      	lsls	r2, r2, #2
 80030d0:	4093      	lsls	r3, r2
 80030d2:	69ba      	ldr	r2, [r7, #24]
 80030d4:	4313      	orrs	r3, r2
 80030d6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80030d8:	4934      	ldr	r1, [pc, #208]	; (80031ac <HAL_GPIO_Init+0x324>)
 80030da:	69fb      	ldr	r3, [r7, #28]
 80030dc:	089b      	lsrs	r3, r3, #2
 80030de:	3302      	adds	r3, #2
 80030e0:	69ba      	ldr	r2, [r7, #24]
 80030e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80030e6:	4b3c      	ldr	r3, [pc, #240]	; (80031d8 <HAL_GPIO_Init+0x350>)
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80030ec:	693b      	ldr	r3, [r7, #16]
 80030ee:	43db      	mvns	r3, r3
 80030f0:	69ba      	ldr	r2, [r7, #24]
 80030f2:	4013      	ands	r3, r2
 80030f4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80030f6:	683b      	ldr	r3, [r7, #0]
 80030f8:	685b      	ldr	r3, [r3, #4]
 80030fa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d003      	beq.n	800310a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8003102:	69ba      	ldr	r2, [r7, #24]
 8003104:	693b      	ldr	r3, [r7, #16]
 8003106:	4313      	orrs	r3, r2
 8003108:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800310a:	4a33      	ldr	r2, [pc, #204]	; (80031d8 <HAL_GPIO_Init+0x350>)
 800310c:	69bb      	ldr	r3, [r7, #24]
 800310e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003110:	4b31      	ldr	r3, [pc, #196]	; (80031d8 <HAL_GPIO_Init+0x350>)
 8003112:	685b      	ldr	r3, [r3, #4]
 8003114:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003116:	693b      	ldr	r3, [r7, #16]
 8003118:	43db      	mvns	r3, r3
 800311a:	69ba      	ldr	r2, [r7, #24]
 800311c:	4013      	ands	r3, r2
 800311e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003120:	683b      	ldr	r3, [r7, #0]
 8003122:	685b      	ldr	r3, [r3, #4]
 8003124:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003128:	2b00      	cmp	r3, #0
 800312a:	d003      	beq.n	8003134 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800312c:	69ba      	ldr	r2, [r7, #24]
 800312e:	693b      	ldr	r3, [r7, #16]
 8003130:	4313      	orrs	r3, r2
 8003132:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003134:	4a28      	ldr	r2, [pc, #160]	; (80031d8 <HAL_GPIO_Init+0x350>)
 8003136:	69bb      	ldr	r3, [r7, #24]
 8003138:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800313a:	4b27      	ldr	r3, [pc, #156]	; (80031d8 <HAL_GPIO_Init+0x350>)
 800313c:	689b      	ldr	r3, [r3, #8]
 800313e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003140:	693b      	ldr	r3, [r7, #16]
 8003142:	43db      	mvns	r3, r3
 8003144:	69ba      	ldr	r2, [r7, #24]
 8003146:	4013      	ands	r3, r2
 8003148:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800314a:	683b      	ldr	r3, [r7, #0]
 800314c:	685b      	ldr	r3, [r3, #4]
 800314e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003152:	2b00      	cmp	r3, #0
 8003154:	d003      	beq.n	800315e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8003156:	69ba      	ldr	r2, [r7, #24]
 8003158:	693b      	ldr	r3, [r7, #16]
 800315a:	4313      	orrs	r3, r2
 800315c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800315e:	4a1e      	ldr	r2, [pc, #120]	; (80031d8 <HAL_GPIO_Init+0x350>)
 8003160:	69bb      	ldr	r3, [r7, #24]
 8003162:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003164:	4b1c      	ldr	r3, [pc, #112]	; (80031d8 <HAL_GPIO_Init+0x350>)
 8003166:	68db      	ldr	r3, [r3, #12]
 8003168:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800316a:	693b      	ldr	r3, [r7, #16]
 800316c:	43db      	mvns	r3, r3
 800316e:	69ba      	ldr	r2, [r7, #24]
 8003170:	4013      	ands	r3, r2
 8003172:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003174:	683b      	ldr	r3, [r7, #0]
 8003176:	685b      	ldr	r3, [r3, #4]
 8003178:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800317c:	2b00      	cmp	r3, #0
 800317e:	d003      	beq.n	8003188 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003180:	69ba      	ldr	r2, [r7, #24]
 8003182:	693b      	ldr	r3, [r7, #16]
 8003184:	4313      	orrs	r3, r2
 8003186:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003188:	4a13      	ldr	r2, [pc, #76]	; (80031d8 <HAL_GPIO_Init+0x350>)
 800318a:	69bb      	ldr	r3, [r7, #24]
 800318c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800318e:	69fb      	ldr	r3, [r7, #28]
 8003190:	3301      	adds	r3, #1
 8003192:	61fb      	str	r3, [r7, #28]
 8003194:	69fb      	ldr	r3, [r7, #28]
 8003196:	2b0f      	cmp	r3, #15
 8003198:	f67f ae84 	bls.w	8002ea4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800319c:	bf00      	nop
 800319e:	3724      	adds	r7, #36	; 0x24
 80031a0:	46bd      	mov	sp, r7
 80031a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a6:	4770      	bx	lr
 80031a8:	40023800 	.word	0x40023800
 80031ac:	40013800 	.word	0x40013800
 80031b0:	40020000 	.word	0x40020000
 80031b4:	40020400 	.word	0x40020400
 80031b8:	40020800 	.word	0x40020800
 80031bc:	40020c00 	.word	0x40020c00
 80031c0:	40021000 	.word	0x40021000
 80031c4:	40021400 	.word	0x40021400
 80031c8:	40021800 	.word	0x40021800
 80031cc:	40021c00 	.word	0x40021c00
 80031d0:	40022000 	.word	0x40022000
 80031d4:	40022400 	.word	0x40022400
 80031d8:	40013c00 	.word	0x40013c00

080031dc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80031dc:	b480      	push	{r7}
 80031de:	b083      	sub	sp, #12
 80031e0:	af00      	add	r7, sp, #0
 80031e2:	6078      	str	r0, [r7, #4]
 80031e4:	460b      	mov	r3, r1
 80031e6:	807b      	strh	r3, [r7, #2]
 80031e8:	4613      	mov	r3, r2
 80031ea:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80031ec:	787b      	ldrb	r3, [r7, #1]
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d003      	beq.n	80031fa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80031f2:	887a      	ldrh	r2, [r7, #2]
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80031f8:	e003      	b.n	8003202 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80031fa:	887b      	ldrh	r3, [r7, #2]
 80031fc:	041a      	lsls	r2, r3, #16
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	619a      	str	r2, [r3, #24]
}
 8003202:	bf00      	nop
 8003204:	370c      	adds	r7, #12
 8003206:	46bd      	mov	sp, r7
 8003208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800320c:	4770      	bx	lr

0800320e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800320e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003210:	b08f      	sub	sp, #60	; 0x3c
 8003212:	af0a      	add	r7, sp, #40	; 0x28
 8003214:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	2b00      	cmp	r3, #0
 800321a:	d101      	bne.n	8003220 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800321c:	2301      	movs	r3, #1
 800321e:	e10f      	b.n	8003440 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 800322c:	b2db      	uxtb	r3, r3
 800322e:	2b00      	cmp	r3, #0
 8003230:	d106      	bne.n	8003240 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	2200      	movs	r2, #0
 8003236:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800323a:	6878      	ldr	r0, [r7, #4]
 800323c:	f014 fdf8 	bl	8017e30 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	2203      	movs	r2, #3
 8003244:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8003248:	68bb      	ldr	r3, [r7, #8]
 800324a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800324c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003250:	2b00      	cmp	r3, #0
 8003252:	d102      	bne.n	800325a <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	2200      	movs	r2, #0
 8003258:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	4618      	mov	r0, r3
 8003260:	f002 fe7b 	bl	8005f5a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	603b      	str	r3, [r7, #0]
 800326a:	687e      	ldr	r6, [r7, #4]
 800326c:	466d      	mov	r5, sp
 800326e:	f106 0410 	add.w	r4, r6, #16
 8003272:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003274:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003276:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003278:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800327a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800327e:	e885 0003 	stmia.w	r5, {r0, r1}
 8003282:	1d33      	adds	r3, r6, #4
 8003284:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003286:	6838      	ldr	r0, [r7, #0]
 8003288:	f002 fd52 	bl	8005d30 <USB_CoreInit>
 800328c:	4603      	mov	r3, r0
 800328e:	2b00      	cmp	r3, #0
 8003290:	d005      	beq.n	800329e <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	2202      	movs	r2, #2
 8003296:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800329a:	2301      	movs	r3, #1
 800329c:	e0d0      	b.n	8003440 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	2100      	movs	r1, #0
 80032a4:	4618      	mov	r0, r3
 80032a6:	f002 fe69 	bl	8005f7c <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80032aa:	2300      	movs	r3, #0
 80032ac:	73fb      	strb	r3, [r7, #15]
 80032ae:	e04a      	b.n	8003346 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80032b0:	7bfa      	ldrb	r2, [r7, #15]
 80032b2:	6879      	ldr	r1, [r7, #4]
 80032b4:	4613      	mov	r3, r2
 80032b6:	00db      	lsls	r3, r3, #3
 80032b8:	1a9b      	subs	r3, r3, r2
 80032ba:	009b      	lsls	r3, r3, #2
 80032bc:	440b      	add	r3, r1
 80032be:	333d      	adds	r3, #61	; 0x3d
 80032c0:	2201      	movs	r2, #1
 80032c2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80032c4:	7bfa      	ldrb	r2, [r7, #15]
 80032c6:	6879      	ldr	r1, [r7, #4]
 80032c8:	4613      	mov	r3, r2
 80032ca:	00db      	lsls	r3, r3, #3
 80032cc:	1a9b      	subs	r3, r3, r2
 80032ce:	009b      	lsls	r3, r3, #2
 80032d0:	440b      	add	r3, r1
 80032d2:	333c      	adds	r3, #60	; 0x3c
 80032d4:	7bfa      	ldrb	r2, [r7, #15]
 80032d6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80032d8:	7bfa      	ldrb	r2, [r7, #15]
 80032da:	7bfb      	ldrb	r3, [r7, #15]
 80032dc:	b298      	uxth	r0, r3
 80032de:	6879      	ldr	r1, [r7, #4]
 80032e0:	4613      	mov	r3, r2
 80032e2:	00db      	lsls	r3, r3, #3
 80032e4:	1a9b      	subs	r3, r3, r2
 80032e6:	009b      	lsls	r3, r3, #2
 80032e8:	440b      	add	r3, r1
 80032ea:	3342      	adds	r3, #66	; 0x42
 80032ec:	4602      	mov	r2, r0
 80032ee:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80032f0:	7bfa      	ldrb	r2, [r7, #15]
 80032f2:	6879      	ldr	r1, [r7, #4]
 80032f4:	4613      	mov	r3, r2
 80032f6:	00db      	lsls	r3, r3, #3
 80032f8:	1a9b      	subs	r3, r3, r2
 80032fa:	009b      	lsls	r3, r3, #2
 80032fc:	440b      	add	r3, r1
 80032fe:	333f      	adds	r3, #63	; 0x3f
 8003300:	2200      	movs	r2, #0
 8003302:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003304:	7bfa      	ldrb	r2, [r7, #15]
 8003306:	6879      	ldr	r1, [r7, #4]
 8003308:	4613      	mov	r3, r2
 800330a:	00db      	lsls	r3, r3, #3
 800330c:	1a9b      	subs	r3, r3, r2
 800330e:	009b      	lsls	r3, r3, #2
 8003310:	440b      	add	r3, r1
 8003312:	3344      	adds	r3, #68	; 0x44
 8003314:	2200      	movs	r2, #0
 8003316:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003318:	7bfa      	ldrb	r2, [r7, #15]
 800331a:	6879      	ldr	r1, [r7, #4]
 800331c:	4613      	mov	r3, r2
 800331e:	00db      	lsls	r3, r3, #3
 8003320:	1a9b      	subs	r3, r3, r2
 8003322:	009b      	lsls	r3, r3, #2
 8003324:	440b      	add	r3, r1
 8003326:	3348      	adds	r3, #72	; 0x48
 8003328:	2200      	movs	r2, #0
 800332a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800332c:	7bfa      	ldrb	r2, [r7, #15]
 800332e:	6879      	ldr	r1, [r7, #4]
 8003330:	4613      	mov	r3, r2
 8003332:	00db      	lsls	r3, r3, #3
 8003334:	1a9b      	subs	r3, r3, r2
 8003336:	009b      	lsls	r3, r3, #2
 8003338:	440b      	add	r3, r1
 800333a:	3350      	adds	r3, #80	; 0x50
 800333c:	2200      	movs	r2, #0
 800333e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003340:	7bfb      	ldrb	r3, [r7, #15]
 8003342:	3301      	adds	r3, #1
 8003344:	73fb      	strb	r3, [r7, #15]
 8003346:	7bfa      	ldrb	r2, [r7, #15]
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	685b      	ldr	r3, [r3, #4]
 800334c:	429a      	cmp	r2, r3
 800334e:	d3af      	bcc.n	80032b0 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003350:	2300      	movs	r3, #0
 8003352:	73fb      	strb	r3, [r7, #15]
 8003354:	e044      	b.n	80033e0 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003356:	7bfa      	ldrb	r2, [r7, #15]
 8003358:	6879      	ldr	r1, [r7, #4]
 800335a:	4613      	mov	r3, r2
 800335c:	00db      	lsls	r3, r3, #3
 800335e:	1a9b      	subs	r3, r3, r2
 8003360:	009b      	lsls	r3, r3, #2
 8003362:	440b      	add	r3, r1
 8003364:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8003368:	2200      	movs	r2, #0
 800336a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800336c:	7bfa      	ldrb	r2, [r7, #15]
 800336e:	6879      	ldr	r1, [r7, #4]
 8003370:	4613      	mov	r3, r2
 8003372:	00db      	lsls	r3, r3, #3
 8003374:	1a9b      	subs	r3, r3, r2
 8003376:	009b      	lsls	r3, r3, #2
 8003378:	440b      	add	r3, r1
 800337a:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 800337e:	7bfa      	ldrb	r2, [r7, #15]
 8003380:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003382:	7bfa      	ldrb	r2, [r7, #15]
 8003384:	6879      	ldr	r1, [r7, #4]
 8003386:	4613      	mov	r3, r2
 8003388:	00db      	lsls	r3, r3, #3
 800338a:	1a9b      	subs	r3, r3, r2
 800338c:	009b      	lsls	r3, r3, #2
 800338e:	440b      	add	r3, r1
 8003390:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8003394:	2200      	movs	r2, #0
 8003396:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003398:	7bfa      	ldrb	r2, [r7, #15]
 800339a:	6879      	ldr	r1, [r7, #4]
 800339c:	4613      	mov	r3, r2
 800339e:	00db      	lsls	r3, r3, #3
 80033a0:	1a9b      	subs	r3, r3, r2
 80033a2:	009b      	lsls	r3, r3, #2
 80033a4:	440b      	add	r3, r1
 80033a6:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80033aa:	2200      	movs	r2, #0
 80033ac:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80033ae:	7bfa      	ldrb	r2, [r7, #15]
 80033b0:	6879      	ldr	r1, [r7, #4]
 80033b2:	4613      	mov	r3, r2
 80033b4:	00db      	lsls	r3, r3, #3
 80033b6:	1a9b      	subs	r3, r3, r2
 80033b8:	009b      	lsls	r3, r3, #2
 80033ba:	440b      	add	r3, r1
 80033bc:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80033c0:	2200      	movs	r2, #0
 80033c2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80033c4:	7bfa      	ldrb	r2, [r7, #15]
 80033c6:	6879      	ldr	r1, [r7, #4]
 80033c8:	4613      	mov	r3, r2
 80033ca:	00db      	lsls	r3, r3, #3
 80033cc:	1a9b      	subs	r3, r3, r2
 80033ce:	009b      	lsls	r3, r3, #2
 80033d0:	440b      	add	r3, r1
 80033d2:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80033d6:	2200      	movs	r2, #0
 80033d8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80033da:	7bfb      	ldrb	r3, [r7, #15]
 80033dc:	3301      	adds	r3, #1
 80033de:	73fb      	strb	r3, [r7, #15]
 80033e0:	7bfa      	ldrb	r2, [r7, #15]
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	685b      	ldr	r3, [r3, #4]
 80033e6:	429a      	cmp	r2, r3
 80033e8:	d3b5      	bcc.n	8003356 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	603b      	str	r3, [r7, #0]
 80033f0:	687e      	ldr	r6, [r7, #4]
 80033f2:	466d      	mov	r5, sp
 80033f4:	f106 0410 	add.w	r4, r6, #16
 80033f8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80033fa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80033fc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80033fe:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003400:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003404:	e885 0003 	stmia.w	r5, {r0, r1}
 8003408:	1d33      	adds	r3, r6, #4
 800340a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800340c:	6838      	ldr	r0, [r7, #0]
 800340e:	f002 fddf 	bl	8005fd0 <USB_DevInit>
 8003412:	4603      	mov	r3, r0
 8003414:	2b00      	cmp	r3, #0
 8003416:	d005      	beq.n	8003424 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	2202      	movs	r2, #2
 800341c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8003420:	2301      	movs	r3, #1
 8003422:	e00d      	b.n	8003440 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	2200      	movs	r2, #0
 8003428:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	2201      	movs	r2, #1
 8003430:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
  #endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	4618      	mov	r0, r3
 800343a:	f003 fdd4 	bl	8006fe6 <USB_DevDisconnect>

  return HAL_OK;
 800343e:	2300      	movs	r3, #0
}
 8003440:	4618      	mov	r0, r3
 8003442:	3714      	adds	r7, #20
 8003444:	46bd      	mov	sp, r7
 8003446:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003448 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8003448:	b580      	push	{r7, lr}
 800344a:	b084      	sub	sp, #16
 800344c:	af00      	add	r7, sp, #0
 800344e:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */

  __HAL_LOCK(hpcd);
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800345c:	2b01      	cmp	r3, #1
 800345e:	d101      	bne.n	8003464 <HAL_PCD_Start+0x1c>
 8003460:	2302      	movs	r3, #2
 8003462:	e020      	b.n	80034a6 <HAL_PCD_Start+0x5e>
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	2201      	movs	r2, #1
 8003468:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003470:	2b01      	cmp	r3, #1
 8003472:	d109      	bne.n	8003488 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8003478:	2b01      	cmp	r3, #1
 800347a:	d005      	beq.n	8003488 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003480:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */
  (void)USB_DevConnect(hpcd->Instance);
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	4618      	mov	r0, r3
 800348e:	f003 fd92 	bl	8006fb6 <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	4618      	mov	r0, r3
 8003498:	f002 fd4e 	bl	8005f38 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	2200      	movs	r2, #0
 80034a0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 80034a4:	2300      	movs	r3, #0
}
 80034a6:	4618      	mov	r0, r3
 80034a8:	3710      	adds	r7, #16
 80034aa:	46bd      	mov	sp, r7
 80034ac:	bd80      	pop	{r7, pc}

080034ae <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80034ae:	b590      	push	{r4, r7, lr}
 80034b0:	b08d      	sub	sp, #52	; 0x34
 80034b2:	af00      	add	r7, sp, #0
 80034b4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80034bc:	6a3b      	ldr	r3, [r7, #32]
 80034be:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	4618      	mov	r0, r3
 80034c6:	f003 fe39 	bl	800713c <USB_GetMode>
 80034ca:	4603      	mov	r3, r0
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	f040 838e 	bne.w	8003bee <HAL_PCD_IRQHandler+0x740>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	4618      	mov	r0, r3
 80034d8:	f003 fd9d 	bl	8007016 <USB_ReadInterrupts>
 80034dc:	4603      	mov	r3, r0
 80034de:	2b00      	cmp	r3, #0
 80034e0:	f000 8384 	beq.w	8003bec <HAL_PCD_IRQHandler+0x73e>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	4618      	mov	r0, r3
 80034ea:	f003 fd94 	bl	8007016 <USB_ReadInterrupts>
 80034ee:	4603      	mov	r3, r0
 80034f0:	f003 0302 	and.w	r3, r3, #2
 80034f4:	2b02      	cmp	r3, #2
 80034f6:	d107      	bne.n	8003508 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	695a      	ldr	r2, [r3, #20]
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	f002 0202 	and.w	r2, r2, #2
 8003506:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	4618      	mov	r0, r3
 800350e:	f003 fd82 	bl	8007016 <USB_ReadInterrupts>
 8003512:	4603      	mov	r3, r0
 8003514:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003518:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800351c:	d17b      	bne.n	8003616 <HAL_PCD_IRQHandler+0x168>
    {
      epnum = 0U;
 800351e:	2300      	movs	r3, #0
 8003520:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	4618      	mov	r0, r3
 8003528:	f003 fd88 	bl	800703c <USB_ReadDevAllOutEpInterrupt>
 800352c:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 800352e:	e06f      	b.n	8003610 <HAL_PCD_IRQHandler+0x162>
      {
        if ((ep_intr & 0x1U) != 0U)
 8003530:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003532:	f003 0301 	and.w	r3, r3, #1
 8003536:	2b00      	cmp	r3, #0
 8003538:	d064      	beq.n	8003604 <HAL_PCD_IRQHandler+0x156>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003540:	b2d2      	uxtb	r2, r2
 8003542:	4611      	mov	r1, r2
 8003544:	4618      	mov	r0, r3
 8003546:	f003 fdad 	bl	80070a4 <USB_ReadDevOutEPInterrupt>
 800354a:	61b8      	str	r0, [r7, #24]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800354c:	69bb      	ldr	r3, [r7, #24]
 800354e:	f003 0301 	and.w	r3, r3, #1
 8003552:	2b00      	cmp	r3, #0
 8003554:	d00c      	beq.n	8003570 <HAL_PCD_IRQHandler+0xc2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8003556:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003558:	015a      	lsls	r2, r3, #5
 800355a:	69fb      	ldr	r3, [r7, #28]
 800355c:	4413      	add	r3, r2
 800355e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003562:	461a      	mov	r2, r3
 8003564:	2301      	movs	r3, #1
 8003566:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8003568:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800356a:	6878      	ldr	r0, [r7, #4]
 800356c:	f000 fe0e 	bl	800418c <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8003570:	69bb      	ldr	r3, [r7, #24]
 8003572:	f003 0308 	and.w	r3, r3, #8
 8003576:	2b00      	cmp	r3, #0
 8003578:	d00c      	beq.n	8003594 <HAL_PCD_IRQHandler+0xe6>
          {
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800357a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800357c:	6878      	ldr	r0, [r7, #4]
 800357e:	f000 ff0d 	bl	800439c <PCD_EP_OutSetupPacket_int>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8003582:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003584:	015a      	lsls	r2, r3, #5
 8003586:	69fb      	ldr	r3, [r7, #28]
 8003588:	4413      	add	r3, r2
 800358a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800358e:	461a      	mov	r2, r3
 8003590:	2308      	movs	r3, #8
 8003592:	6093      	str	r3, [r2, #8]
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8003594:	69bb      	ldr	r3, [r7, #24]
 8003596:	f003 0310 	and.w	r3, r3, #16
 800359a:	2b00      	cmp	r3, #0
 800359c:	d008      	beq.n	80035b0 <HAL_PCD_IRQHandler+0x102>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800359e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035a0:	015a      	lsls	r2, r3, #5
 80035a2:	69fb      	ldr	r3, [r7, #28]
 80035a4:	4413      	add	r3, r2
 80035a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80035aa:	461a      	mov	r2, r3
 80035ac:	2310      	movs	r3, #16
 80035ae:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80035b0:	69bb      	ldr	r3, [r7, #24]
 80035b2:	f003 0320 	and.w	r3, r3, #32
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d015      	beq.n	80035e6 <HAL_PCD_IRQHandler+0x138>
          {
            if (hpcd->Init.dma_enable == 1U)
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	691b      	ldr	r3, [r3, #16]
 80035be:	2b01      	cmp	r3, #1
 80035c0:	d108      	bne.n	80035d4 <HAL_PCD_IRQHandler+0x126>
            {
              (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	6818      	ldr	r0, [r3, #0]
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80035cc:	461a      	mov	r2, r3
 80035ce:	2101      	movs	r1, #1
 80035d0:	f003 fdf8 	bl	80071c4 <USB_EP0_OutStart>
            }
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80035d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035d6:	015a      	lsls	r2, r3, #5
 80035d8:	69fb      	ldr	r3, [r7, #28]
 80035da:	4413      	add	r3, r2
 80035dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80035e0:	461a      	mov	r2, r3
 80035e2:	2320      	movs	r3, #32
 80035e4:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80035e6:	69bb      	ldr	r3, [r7, #24]
 80035e8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d009      	beq.n	8003604 <HAL_PCD_IRQHandler+0x156>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80035f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035f2:	015a      	lsls	r2, r3, #5
 80035f4:	69fb      	ldr	r3, [r7, #28]
 80035f6:	4413      	add	r3, r2
 80035f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80035fc:	461a      	mov	r2, r3
 80035fe:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003602:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8003604:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003606:	3301      	adds	r3, #1
 8003608:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800360a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800360c:	085b      	lsrs	r3, r3, #1
 800360e:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8003610:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003612:	2b00      	cmp	r3, #0
 8003614:	d18c      	bne.n	8003530 <HAL_PCD_IRQHandler+0x82>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	4618      	mov	r0, r3
 800361c:	f003 fcfb 	bl	8007016 <USB_ReadInterrupts>
 8003620:	4603      	mov	r3, r0
 8003622:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003626:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800362a:	f040 80c4 	bne.w	80037b6 <HAL_PCD_IRQHandler+0x308>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	4618      	mov	r0, r3
 8003634:	f003 fd1c 	bl	8007070 <USB_ReadDevAllInEpInterrupt>
 8003638:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 800363a:	2300      	movs	r3, #0
 800363c:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 800363e:	e0b6      	b.n	80037ae <HAL_PCD_IRQHandler+0x300>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8003640:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003642:	f003 0301 	and.w	r3, r3, #1
 8003646:	2b00      	cmp	r3, #0
 8003648:	f000 80ab 	beq.w	80037a2 <HAL_PCD_IRQHandler+0x2f4>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003652:	b2d2      	uxtb	r2, r2
 8003654:	4611      	mov	r1, r2
 8003656:	4618      	mov	r0, r3
 8003658:	f003 fd42 	bl	80070e0 <USB_ReadDevInEPInterrupt>
 800365c:	61b8      	str	r0, [r7, #24]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800365e:	69bb      	ldr	r3, [r7, #24]
 8003660:	f003 0301 	and.w	r3, r3, #1
 8003664:	2b00      	cmp	r3, #0
 8003666:	d05b      	beq.n	8003720 <HAL_PCD_IRQHandler+0x272>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003668:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800366a:	f003 030f 	and.w	r3, r3, #15
 800366e:	2201      	movs	r2, #1
 8003670:	fa02 f303 	lsl.w	r3, r2, r3
 8003674:	617b      	str	r3, [r7, #20]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003676:	69fb      	ldr	r3, [r7, #28]
 8003678:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800367c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800367e:	697b      	ldr	r3, [r7, #20]
 8003680:	43db      	mvns	r3, r3
 8003682:	69f9      	ldr	r1, [r7, #28]
 8003684:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003688:	4013      	ands	r3, r2
 800368a:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800368c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800368e:	015a      	lsls	r2, r3, #5
 8003690:	69fb      	ldr	r3, [r7, #28]
 8003692:	4413      	add	r3, r2
 8003694:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003698:	461a      	mov	r2, r3
 800369a:	2301      	movs	r3, #1
 800369c:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	691b      	ldr	r3, [r3, #16]
 80036a2:	2b01      	cmp	r3, #1
 80036a4:	d11b      	bne.n	80036de <HAL_PCD_IRQHandler+0x230>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80036a6:	6879      	ldr	r1, [r7, #4]
 80036a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80036aa:	4613      	mov	r3, r2
 80036ac:	00db      	lsls	r3, r3, #3
 80036ae:	1a9b      	subs	r3, r3, r2
 80036b0:	009b      	lsls	r3, r3, #2
 80036b2:	440b      	add	r3, r1
 80036b4:	3348      	adds	r3, #72	; 0x48
 80036b6:	6819      	ldr	r1, [r3, #0]
 80036b8:	6878      	ldr	r0, [r7, #4]
 80036ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80036bc:	4613      	mov	r3, r2
 80036be:	00db      	lsls	r3, r3, #3
 80036c0:	1a9b      	subs	r3, r3, r2
 80036c2:	009b      	lsls	r3, r3, #2
 80036c4:	4403      	add	r3, r0
 80036c6:	3344      	adds	r3, #68	; 0x44
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	4419      	add	r1, r3
 80036cc:	6878      	ldr	r0, [r7, #4]
 80036ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80036d0:	4613      	mov	r3, r2
 80036d2:	00db      	lsls	r3, r3, #3
 80036d4:	1a9b      	subs	r3, r3, r2
 80036d6:	009b      	lsls	r3, r3, #2
 80036d8:	4403      	add	r3, r0
 80036da:	3348      	adds	r3, #72	; 0x48
 80036dc:	6019      	str	r1, [r3, #0]
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80036de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036e0:	b2db      	uxtb	r3, r3
 80036e2:	4619      	mov	r1, r3
 80036e4:	6878      	ldr	r0, [r7, #4]
 80036e6:	f014 fc32 	bl	8017f4e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

            if (hpcd->Init.dma_enable == 1U)
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	691b      	ldr	r3, [r3, #16]
 80036ee:	2b01      	cmp	r3, #1
 80036f0:	d116      	bne.n	8003720 <HAL_PCD_IRQHandler+0x272>
            {
              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80036f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d113      	bne.n	8003720 <HAL_PCD_IRQHandler+0x272>
 80036f8:	6879      	ldr	r1, [r7, #4]
 80036fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80036fc:	4613      	mov	r3, r2
 80036fe:	00db      	lsls	r3, r3, #3
 8003700:	1a9b      	subs	r3, r3, r2
 8003702:	009b      	lsls	r3, r3, #2
 8003704:	440b      	add	r3, r1
 8003706:	3350      	adds	r3, #80	; 0x50
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	2b00      	cmp	r3, #0
 800370c:	d108      	bne.n	8003720 <HAL_PCD_IRQHandler+0x272>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	6818      	ldr	r0, [r3, #0]
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003718:	461a      	mov	r2, r3
 800371a:	2101      	movs	r1, #1
 800371c:	f003 fd52 	bl	80071c4 <USB_EP0_OutStart>
              }
            }
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8003720:	69bb      	ldr	r3, [r7, #24]
 8003722:	f003 0308 	and.w	r3, r3, #8
 8003726:	2b00      	cmp	r3, #0
 8003728:	d008      	beq.n	800373c <HAL_PCD_IRQHandler+0x28e>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800372a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800372c:	015a      	lsls	r2, r3, #5
 800372e:	69fb      	ldr	r3, [r7, #28]
 8003730:	4413      	add	r3, r2
 8003732:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003736:	461a      	mov	r2, r3
 8003738:	2308      	movs	r3, #8
 800373a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800373c:	69bb      	ldr	r3, [r7, #24]
 800373e:	f003 0310 	and.w	r3, r3, #16
 8003742:	2b00      	cmp	r3, #0
 8003744:	d008      	beq.n	8003758 <HAL_PCD_IRQHandler+0x2aa>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8003746:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003748:	015a      	lsls	r2, r3, #5
 800374a:	69fb      	ldr	r3, [r7, #28]
 800374c:	4413      	add	r3, r2
 800374e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003752:	461a      	mov	r2, r3
 8003754:	2310      	movs	r3, #16
 8003756:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8003758:	69bb      	ldr	r3, [r7, #24]
 800375a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800375e:	2b00      	cmp	r3, #0
 8003760:	d008      	beq.n	8003774 <HAL_PCD_IRQHandler+0x2c6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8003762:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003764:	015a      	lsls	r2, r3, #5
 8003766:	69fb      	ldr	r3, [r7, #28]
 8003768:	4413      	add	r3, r2
 800376a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800376e:	461a      	mov	r2, r3
 8003770:	2340      	movs	r3, #64	; 0x40
 8003772:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8003774:	69bb      	ldr	r3, [r7, #24]
 8003776:	f003 0302 	and.w	r3, r3, #2
 800377a:	2b00      	cmp	r3, #0
 800377c:	d008      	beq.n	8003790 <HAL_PCD_IRQHandler+0x2e2>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800377e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003780:	015a      	lsls	r2, r3, #5
 8003782:	69fb      	ldr	r3, [r7, #28]
 8003784:	4413      	add	r3, r2
 8003786:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800378a:	461a      	mov	r2, r3
 800378c:	2302      	movs	r3, #2
 800378e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8003790:	69bb      	ldr	r3, [r7, #24]
 8003792:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003796:	2b00      	cmp	r3, #0
 8003798:	d003      	beq.n	80037a2 <HAL_PCD_IRQHandler+0x2f4>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800379a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800379c:	6878      	ldr	r0, [r7, #4]
 800379e:	f000 fc67 	bl	8004070 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80037a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037a4:	3301      	adds	r3, #1
 80037a6:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80037a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037aa:	085b      	lsrs	r3, r3, #1
 80037ac:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80037ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	f47f af45 	bne.w	8003640 <HAL_PCD_IRQHandler+0x192>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	4618      	mov	r0, r3
 80037bc:	f003 fc2b 	bl	8007016 <USB_ReadInterrupts>
 80037c0:	4603      	mov	r3, r0
 80037c2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80037c6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80037ca:	d122      	bne.n	8003812 <HAL_PCD_IRQHandler+0x364>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80037cc:	69fb      	ldr	r3, [r7, #28]
 80037ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80037d2:	685b      	ldr	r3, [r3, #4]
 80037d4:	69fa      	ldr	r2, [r7, #28]
 80037d6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80037da:	f023 0301 	bic.w	r3, r3, #1
 80037de:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 80037e6:	2b01      	cmp	r3, #1
 80037e8:	d108      	bne.n	80037fc <HAL_PCD_IRQHandler+0x34e>
      {
        hpcd->LPM_State = LPM_L0;
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	2200      	movs	r2, #0
 80037ee:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80037f2:	2100      	movs	r1, #0
 80037f4:	6878      	ldr	r0, [r7, #4]
 80037f6:	f000 fe89 	bl	800450c <HAL_PCDEx_LPM_Callback>
 80037fa:	e002      	b.n	8003802 <HAL_PCD_IRQHandler+0x354>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80037fc:	6878      	ldr	r0, [r7, #4]
 80037fe:	f014 fc1d 	bl	801803c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	695a      	ldr	r2, [r3, #20]
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8003810:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	4618      	mov	r0, r3
 8003818:	f003 fbfd 	bl	8007016 <USB_ReadInterrupts>
 800381c:	4603      	mov	r3, r0
 800381e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003822:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003826:	d112      	bne.n	800384e <HAL_PCD_IRQHandler+0x3a0>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8003828:	69fb      	ldr	r3, [r7, #28]
 800382a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800382e:	689b      	ldr	r3, [r3, #8]
 8003830:	f003 0301 	and.w	r3, r3, #1
 8003834:	2b01      	cmp	r3, #1
 8003836:	d102      	bne.n	800383e <HAL_PCD_IRQHandler+0x390>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8003838:	6878      	ldr	r0, [r7, #4]
 800383a:	f014 fbd9 	bl	8017ff0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	695a      	ldr	r2, [r3, #20]
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 800384c:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    #endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	4618      	mov	r0, r3
 8003854:	f003 fbdf 	bl	8007016 <USB_ReadInterrupts>
 8003858:	4603      	mov	r3, r0
 800385a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800385e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003862:	f040 80a7 	bne.w	80039b4 <HAL_PCD_IRQHandler+0x506>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003866:	69fb      	ldr	r3, [r7, #28]
 8003868:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800386c:	685b      	ldr	r3, [r3, #4]
 800386e:	69fa      	ldr	r2, [r7, #28]
 8003870:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003874:	f023 0301 	bic.w	r3, r3, #1
 8003878:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	2110      	movs	r1, #16
 8003880:	4618      	mov	r0, r3
 8003882:	f002 fd17 	bl	80062b4 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003886:	2300      	movs	r3, #0
 8003888:	62fb      	str	r3, [r7, #44]	; 0x2c
 800388a:	e036      	b.n	80038fa <HAL_PCD_IRQHandler+0x44c>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800388c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800388e:	015a      	lsls	r2, r3, #5
 8003890:	69fb      	ldr	r3, [r7, #28]
 8003892:	4413      	add	r3, r2
 8003894:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003898:	461a      	mov	r2, r3
 800389a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800389e:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80038a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038a2:	015a      	lsls	r2, r3, #5
 80038a4:	69fb      	ldr	r3, [r7, #28]
 80038a6:	4413      	add	r3, r2
 80038a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80038b0:	0151      	lsls	r1, r2, #5
 80038b2:	69fa      	ldr	r2, [r7, #28]
 80038b4:	440a      	add	r2, r1
 80038b6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80038ba:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80038be:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80038c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038c2:	015a      	lsls	r2, r3, #5
 80038c4:	69fb      	ldr	r3, [r7, #28]
 80038c6:	4413      	add	r3, r2
 80038c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80038cc:	461a      	mov	r2, r3
 80038ce:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80038d2:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80038d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038d6:	015a      	lsls	r2, r3, #5
 80038d8:	69fb      	ldr	r3, [r7, #28]
 80038da:	4413      	add	r3, r2
 80038dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80038e4:	0151      	lsls	r1, r2, #5
 80038e6:	69fa      	ldr	r2, [r7, #28]
 80038e8:	440a      	add	r2, r1
 80038ea:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80038ee:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80038f2:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80038f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038f6:	3301      	adds	r3, #1
 80038f8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	685b      	ldr	r3, [r3, #4]
 80038fe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003900:	429a      	cmp	r2, r3
 8003902:	d3c3      	bcc.n	800388c <HAL_PCD_IRQHandler+0x3de>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8003904:	69fb      	ldr	r3, [r7, #28]
 8003906:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800390a:	69db      	ldr	r3, [r3, #28]
 800390c:	69fa      	ldr	r2, [r7, #28]
 800390e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003912:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8003916:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800391c:	2b00      	cmp	r3, #0
 800391e:	d016      	beq.n	800394e <HAL_PCD_IRQHandler+0x4a0>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8003920:	69fb      	ldr	r3, [r7, #28]
 8003922:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003926:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800392a:	69fa      	ldr	r2, [r7, #28]
 800392c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003930:	f043 030b 	orr.w	r3, r3, #11
 8003934:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8003938:	69fb      	ldr	r3, [r7, #28]
 800393a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800393e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003940:	69fa      	ldr	r2, [r7, #28]
 8003942:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003946:	f043 030b 	orr.w	r3, r3, #11
 800394a:	6453      	str	r3, [r2, #68]	; 0x44
 800394c:	e015      	b.n	800397a <HAL_PCD_IRQHandler+0x4cc>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800394e:	69fb      	ldr	r3, [r7, #28]
 8003950:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003954:	695b      	ldr	r3, [r3, #20]
 8003956:	69fa      	ldr	r2, [r7, #28]
 8003958:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800395c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003960:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8003964:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8003966:	69fb      	ldr	r3, [r7, #28]
 8003968:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800396c:	691b      	ldr	r3, [r3, #16]
 800396e:	69fa      	ldr	r2, [r7, #28]
 8003970:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003974:	f043 030b 	orr.w	r3, r3, #11
 8003978:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800397a:	69fb      	ldr	r3, [r7, #28]
 800397c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	69fa      	ldr	r2, [r7, #28]
 8003984:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003988:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800398c:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	6818      	ldr	r0, [r3, #0]
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	691b      	ldr	r3, [r3, #16]
 8003996:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800399e:	461a      	mov	r2, r3
 80039a0:	f003 fc10 	bl	80071c4 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	695a      	ldr	r2, [r3, #20]
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80039b2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	4618      	mov	r0, r3
 80039ba:	f003 fb2c 	bl	8007016 <USB_ReadInterrupts>
 80039be:	4603      	mov	r3, r0
 80039c0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80039c4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80039c8:	d124      	bne.n	8003a14 <HAL_PCD_IRQHandler+0x566>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	4618      	mov	r0, r3
 80039d0:	f003 fbc2 	bl	8007158 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	4618      	mov	r0, r3
 80039da:	f002 fccc 	bl	8006376 <USB_GetDevSpeed>
 80039de:	4603      	mov	r3, r0
 80039e0:	461a      	mov	r2, r3
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681c      	ldr	r4, [r3, #0]
 80039ea:	f001 f997 	bl	8004d1c <HAL_RCC_GetHCLKFreq>
 80039ee:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80039f4:	b2db      	uxtb	r3, r3
 80039f6:	461a      	mov	r2, r3
 80039f8:	4620      	mov	r0, r4
 80039fa:	f002 f9fb 	bl	8005df4 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80039fe:	6878      	ldr	r0, [r7, #4]
 8003a00:	f014 facd 	bl	8017f9e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	695a      	ldr	r2, [r3, #20]
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8003a12:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	4618      	mov	r0, r3
 8003a1a:	f003 fafc 	bl	8007016 <USB_ReadInterrupts>
 8003a1e:	4603      	mov	r3, r0
 8003a20:	f003 0310 	and.w	r3, r3, #16
 8003a24:	2b10      	cmp	r3, #16
 8003a26:	d161      	bne.n	8003aec <HAL_PCD_IRQHandler+0x63e>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	699a      	ldr	r2, [r3, #24]
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	f022 0210 	bic.w	r2, r2, #16
 8003a36:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8003a38:	6a3b      	ldr	r3, [r7, #32]
 8003a3a:	6a1b      	ldr	r3, [r3, #32]
 8003a3c:	613b      	str	r3, [r7, #16]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8003a3e:	693b      	ldr	r3, [r7, #16]
 8003a40:	f003 020f 	and.w	r2, r3, #15
 8003a44:	4613      	mov	r3, r2
 8003a46:	00db      	lsls	r3, r3, #3
 8003a48:	1a9b      	subs	r3, r3, r2
 8003a4a:	009b      	lsls	r3, r3, #2
 8003a4c:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003a50:	687a      	ldr	r2, [r7, #4]
 8003a52:	4413      	add	r3, r2
 8003a54:	3304      	adds	r3, #4
 8003a56:	60fb      	str	r3, [r7, #12]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8003a58:	693b      	ldr	r3, [r7, #16]
 8003a5a:	0c5b      	lsrs	r3, r3, #17
 8003a5c:	f003 030f 	and.w	r3, r3, #15
 8003a60:	2b02      	cmp	r3, #2
 8003a62:	d124      	bne.n	8003aae <HAL_PCD_IRQHandler+0x600>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8003a64:	693a      	ldr	r2, [r7, #16]
 8003a66:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8003a6a:	4013      	ands	r3, r2
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d035      	beq.n	8003adc <HAL_PCD_IRQHandler+0x62e>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8003a74:	693b      	ldr	r3, [r7, #16]
 8003a76:	091b      	lsrs	r3, r3, #4
 8003a78:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003a7a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003a7e:	b29b      	uxth	r3, r3
 8003a80:	461a      	mov	r2, r3
 8003a82:	6a38      	ldr	r0, [r7, #32]
 8003a84:	f003 f974 	bl	8006d70 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	68da      	ldr	r2, [r3, #12]
 8003a8c:	693b      	ldr	r3, [r7, #16]
 8003a8e:	091b      	lsrs	r3, r3, #4
 8003a90:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003a94:	441a      	add	r2, r3
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	699a      	ldr	r2, [r3, #24]
 8003a9e:	693b      	ldr	r3, [r7, #16]
 8003aa0:	091b      	lsrs	r3, r3, #4
 8003aa2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003aa6:	441a      	add	r2, r3
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	619a      	str	r2, [r3, #24]
 8003aac:	e016      	b.n	8003adc <HAL_PCD_IRQHandler+0x62e>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8003aae:	693b      	ldr	r3, [r7, #16]
 8003ab0:	0c5b      	lsrs	r3, r3, #17
 8003ab2:	f003 030f 	and.w	r3, r3, #15
 8003ab6:	2b06      	cmp	r3, #6
 8003ab8:	d110      	bne.n	8003adc <HAL_PCD_IRQHandler+0x62e>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003ac0:	2208      	movs	r2, #8
 8003ac2:	4619      	mov	r1, r3
 8003ac4:	6a38      	ldr	r0, [r7, #32]
 8003ac6:	f003 f953 	bl	8006d70 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	699a      	ldr	r2, [r3, #24]
 8003ace:	693b      	ldr	r3, [r7, #16]
 8003ad0:	091b      	lsrs	r3, r3, #4
 8003ad2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003ad6:	441a      	add	r2, r3
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	699a      	ldr	r2, [r3, #24]
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	f042 0210 	orr.w	r2, r2, #16
 8003aea:	619a      	str	r2, [r3, #24]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	4618      	mov	r0, r3
 8003af2:	f003 fa90 	bl	8007016 <USB_ReadInterrupts>
 8003af6:	4603      	mov	r3, r0
 8003af8:	f003 0308 	and.w	r3, r3, #8
 8003afc:	2b08      	cmp	r3, #8
 8003afe:	d10a      	bne.n	8003b16 <HAL_PCD_IRQHandler+0x668>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8003b00:	6878      	ldr	r0, [r7, #4]
 8003b02:	f014 fa3e 	bl	8017f82 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	695a      	ldr	r2, [r3, #20]
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	f002 0208 	and.w	r2, r2, #8
 8003b14:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	4618      	mov	r0, r3
 8003b1c:	f003 fa7b 	bl	8007016 <USB_ReadInterrupts>
 8003b20:	4603      	mov	r3, r0
 8003b22:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003b26:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003b2a:	d10f      	bne.n	8003b4c <HAL_PCD_IRQHandler+0x69e>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8003b2c:	2300      	movs	r3, #0
 8003b2e:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8003b30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b32:	b2db      	uxtb	r3, r3
 8003b34:	4619      	mov	r1, r3
 8003b36:	6878      	ldr	r0, [r7, #4]
 8003b38:	f014 faa0 	bl	801807c <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	695a      	ldr	r2, [r3, #20]
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8003b4a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	4618      	mov	r0, r3
 8003b52:	f003 fa60 	bl	8007016 <USB_ReadInterrupts>
 8003b56:	4603      	mov	r3, r0
 8003b58:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003b5c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003b60:	d10f      	bne.n	8003b82 <HAL_PCD_IRQHandler+0x6d4>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8003b62:	2300      	movs	r3, #0
 8003b64:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8003b66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b68:	b2db      	uxtb	r3, r3
 8003b6a:	4619      	mov	r1, r3
 8003b6c:	6878      	ldr	r0, [r7, #4]
 8003b6e:	f014 fa73 	bl	8018058 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	695a      	ldr	r2, [r3, #20]
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8003b80:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	4618      	mov	r0, r3
 8003b88:	f003 fa45 	bl	8007016 <USB_ReadInterrupts>
 8003b8c:	4603      	mov	r3, r0
 8003b8e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003b92:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b96:	d10a      	bne.n	8003bae <HAL_PCD_IRQHandler+0x700>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8003b98:	6878      	ldr	r0, [r7, #4]
 8003b9a:	f014 fa81 	bl	80180a0 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	695a      	ldr	r2, [r3, #20]
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8003bac:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	4618      	mov	r0, r3
 8003bb4:	f003 fa2f 	bl	8007016 <USB_ReadInterrupts>
 8003bb8:	4603      	mov	r3, r0
 8003bba:	f003 0304 	and.w	r3, r3, #4
 8003bbe:	2b04      	cmp	r3, #4
 8003bc0:	d115      	bne.n	8003bee <HAL_PCD_IRQHandler+0x740>
    {
      temp = hpcd->Instance->GOTGINT;
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	685b      	ldr	r3, [r3, #4]
 8003bc8:	613b      	str	r3, [r7, #16]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8003bca:	693b      	ldr	r3, [r7, #16]
 8003bcc:	f003 0304 	and.w	r3, r3, #4
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d002      	beq.n	8003bda <HAL_PCD_IRQHandler+0x72c>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8003bd4:	6878      	ldr	r0, [r7, #4]
 8003bd6:	f014 fa71 	bl	80180bc <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	6859      	ldr	r1, [r3, #4]
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	693a      	ldr	r2, [r7, #16]
 8003be6:	430a      	orrs	r2, r1
 8003be8:	605a      	str	r2, [r3, #4]
 8003bea:	e000      	b.n	8003bee <HAL_PCD_IRQHandler+0x740>
      return;
 8003bec:	bf00      	nop
    }
  }
}
 8003bee:	3734      	adds	r7, #52	; 0x34
 8003bf0:	46bd      	mov	sp, r7
 8003bf2:	bd90      	pop	{r4, r7, pc}

08003bf4 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003bf4:	b580      	push	{r7, lr}
 8003bf6:	b082      	sub	sp, #8
 8003bf8:	af00      	add	r7, sp, #0
 8003bfa:	6078      	str	r0, [r7, #4]
 8003bfc:	460b      	mov	r3, r1
 8003bfe:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003c06:	2b01      	cmp	r3, #1
 8003c08:	d101      	bne.n	8003c0e <HAL_PCD_SetAddress+0x1a>
 8003c0a:	2302      	movs	r3, #2
 8003c0c:	e013      	b.n	8003c36 <HAL_PCD_SetAddress+0x42>
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	2201      	movs	r2, #1
 8003c12:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	78fa      	ldrb	r2, [r7, #3]
 8003c1a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	78fa      	ldrb	r2, [r7, #3]
 8003c24:	4611      	mov	r1, r2
 8003c26:	4618      	mov	r0, r3
 8003c28:	f003 f99f 	bl	8006f6a <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	2200      	movs	r2, #0
 8003c30:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8003c34:	2300      	movs	r3, #0
}
 8003c36:	4618      	mov	r0, r3
 8003c38:	3708      	adds	r7, #8
 8003c3a:	46bd      	mov	sp, r7
 8003c3c:	bd80      	pop	{r7, pc}

08003c3e <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 8003c3e:	b580      	push	{r7, lr}
 8003c40:	b084      	sub	sp, #16
 8003c42:	af00      	add	r7, sp, #0
 8003c44:	6078      	str	r0, [r7, #4]
 8003c46:	4608      	mov	r0, r1
 8003c48:	4611      	mov	r1, r2
 8003c4a:	461a      	mov	r2, r3
 8003c4c:	4603      	mov	r3, r0
 8003c4e:	70fb      	strb	r3, [r7, #3]
 8003c50:	460b      	mov	r3, r1
 8003c52:	803b      	strh	r3, [r7, #0]
 8003c54:	4613      	mov	r3, r2
 8003c56:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8003c58:	2300      	movs	r3, #0
 8003c5a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003c5c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	da0f      	bge.n	8003c84 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003c64:	78fb      	ldrb	r3, [r7, #3]
 8003c66:	f003 020f 	and.w	r2, r3, #15
 8003c6a:	4613      	mov	r3, r2
 8003c6c:	00db      	lsls	r3, r3, #3
 8003c6e:	1a9b      	subs	r3, r3, r2
 8003c70:	009b      	lsls	r3, r3, #2
 8003c72:	3338      	adds	r3, #56	; 0x38
 8003c74:	687a      	ldr	r2, [r7, #4]
 8003c76:	4413      	add	r3, r2
 8003c78:	3304      	adds	r3, #4
 8003c7a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	2201      	movs	r2, #1
 8003c80:	705a      	strb	r2, [r3, #1]
 8003c82:	e00f      	b.n	8003ca4 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003c84:	78fb      	ldrb	r3, [r7, #3]
 8003c86:	f003 020f 	and.w	r2, r3, #15
 8003c8a:	4613      	mov	r3, r2
 8003c8c:	00db      	lsls	r3, r3, #3
 8003c8e:	1a9b      	subs	r3, r3, r2
 8003c90:	009b      	lsls	r3, r3, #2
 8003c92:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003c96:	687a      	ldr	r2, [r7, #4]
 8003c98:	4413      	add	r3, r2
 8003c9a:	3304      	adds	r3, #4
 8003c9c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	2200      	movs	r2, #0
 8003ca2:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003ca4:	78fb      	ldrb	r3, [r7, #3]
 8003ca6:	f003 030f 	and.w	r3, r3, #15
 8003caa:	b2da      	uxtb	r2, r3
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8003cb0:	883a      	ldrh	r2, [r7, #0]
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	78ba      	ldrb	r2, [r7, #2]
 8003cba:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	785b      	ldrb	r3, [r3, #1]
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d004      	beq.n	8003cce <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	781b      	ldrb	r3, [r3, #0]
 8003cc8:	b29a      	uxth	r2, r3
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8003cce:	78bb      	ldrb	r3, [r7, #2]
 8003cd0:	2b02      	cmp	r3, #2
 8003cd2:	d102      	bne.n	8003cda <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	2200      	movs	r2, #0
 8003cd8:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003ce0:	2b01      	cmp	r3, #1
 8003ce2:	d101      	bne.n	8003ce8 <HAL_PCD_EP_Open+0xaa>
 8003ce4:	2302      	movs	r3, #2
 8003ce6:	e00e      	b.n	8003d06 <HAL_PCD_EP_Open+0xc8>
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	2201      	movs	r2, #1
 8003cec:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	68f9      	ldr	r1, [r7, #12]
 8003cf6:	4618      	mov	r0, r3
 8003cf8:	f002 fb62 	bl	80063c0 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	2200      	movs	r2, #0
 8003d00:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8003d04:	7afb      	ldrb	r3, [r7, #11]
}
 8003d06:	4618      	mov	r0, r3
 8003d08:	3710      	adds	r7, #16
 8003d0a:	46bd      	mov	sp, r7
 8003d0c:	bd80      	pop	{r7, pc}

08003d0e <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003d0e:	b580      	push	{r7, lr}
 8003d10:	b084      	sub	sp, #16
 8003d12:	af00      	add	r7, sp, #0
 8003d14:	6078      	str	r0, [r7, #4]
 8003d16:	460b      	mov	r3, r1
 8003d18:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003d1a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	da0f      	bge.n	8003d42 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003d22:	78fb      	ldrb	r3, [r7, #3]
 8003d24:	f003 020f 	and.w	r2, r3, #15
 8003d28:	4613      	mov	r3, r2
 8003d2a:	00db      	lsls	r3, r3, #3
 8003d2c:	1a9b      	subs	r3, r3, r2
 8003d2e:	009b      	lsls	r3, r3, #2
 8003d30:	3338      	adds	r3, #56	; 0x38
 8003d32:	687a      	ldr	r2, [r7, #4]
 8003d34:	4413      	add	r3, r2
 8003d36:	3304      	adds	r3, #4
 8003d38:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	2201      	movs	r2, #1
 8003d3e:	705a      	strb	r2, [r3, #1]
 8003d40:	e00f      	b.n	8003d62 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003d42:	78fb      	ldrb	r3, [r7, #3]
 8003d44:	f003 020f 	and.w	r2, r3, #15
 8003d48:	4613      	mov	r3, r2
 8003d4a:	00db      	lsls	r3, r3, #3
 8003d4c:	1a9b      	subs	r3, r3, r2
 8003d4e:	009b      	lsls	r3, r3, #2
 8003d50:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003d54:	687a      	ldr	r2, [r7, #4]
 8003d56:	4413      	add	r3, r2
 8003d58:	3304      	adds	r3, #4
 8003d5a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	2200      	movs	r2, #0
 8003d60:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8003d62:	78fb      	ldrb	r3, [r7, #3]
 8003d64:	f003 030f 	and.w	r3, r3, #15
 8003d68:	b2da      	uxtb	r2, r3
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003d74:	2b01      	cmp	r3, #1
 8003d76:	d101      	bne.n	8003d7c <HAL_PCD_EP_Close+0x6e>
 8003d78:	2302      	movs	r3, #2
 8003d7a:	e00e      	b.n	8003d9a <HAL_PCD_EP_Close+0x8c>
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	2201      	movs	r2, #1
 8003d80:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	68f9      	ldr	r1, [r7, #12]
 8003d8a:	4618      	mov	r0, r3
 8003d8c:	f002 fba0 	bl	80064d0 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	2200      	movs	r2, #0
 8003d94:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8003d98:	2300      	movs	r3, #0
}
 8003d9a:	4618      	mov	r0, r3
 8003d9c:	3710      	adds	r7, #16
 8003d9e:	46bd      	mov	sp, r7
 8003da0:	bd80      	pop	{r7, pc}

08003da2 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003da2:	b580      	push	{r7, lr}
 8003da4:	b086      	sub	sp, #24
 8003da6:	af00      	add	r7, sp, #0
 8003da8:	60f8      	str	r0, [r7, #12]
 8003daa:	607a      	str	r2, [r7, #4]
 8003dac:	603b      	str	r3, [r7, #0]
 8003dae:	460b      	mov	r3, r1
 8003db0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003db2:	7afb      	ldrb	r3, [r7, #11]
 8003db4:	f003 020f 	and.w	r2, r3, #15
 8003db8:	4613      	mov	r3, r2
 8003dba:	00db      	lsls	r3, r3, #3
 8003dbc:	1a9b      	subs	r3, r3, r2
 8003dbe:	009b      	lsls	r3, r3, #2
 8003dc0:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003dc4:	68fa      	ldr	r2, [r7, #12]
 8003dc6:	4413      	add	r3, r2
 8003dc8:	3304      	adds	r3, #4
 8003dca:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003dcc:	697b      	ldr	r3, [r7, #20]
 8003dce:	687a      	ldr	r2, [r7, #4]
 8003dd0:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8003dd2:	697b      	ldr	r3, [r7, #20]
 8003dd4:	683a      	ldr	r2, [r7, #0]
 8003dd6:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8003dd8:	697b      	ldr	r3, [r7, #20]
 8003dda:	2200      	movs	r2, #0
 8003ddc:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8003dde:	697b      	ldr	r3, [r7, #20]
 8003de0:	2200      	movs	r2, #0
 8003de2:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003de4:	7afb      	ldrb	r3, [r7, #11]
 8003de6:	f003 030f 	and.w	r3, r3, #15
 8003dea:	b2da      	uxtb	r2, r3
 8003dec:	697b      	ldr	r3, [r7, #20]
 8003dee:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	691b      	ldr	r3, [r3, #16]
 8003df4:	2b01      	cmp	r3, #1
 8003df6:	d102      	bne.n	8003dfe <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003df8:	687a      	ldr	r2, [r7, #4]
 8003dfa:	697b      	ldr	r3, [r7, #20]
 8003dfc:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003dfe:	7afb      	ldrb	r3, [r7, #11]
 8003e00:	f003 030f 	and.w	r3, r3, #15
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d109      	bne.n	8003e1c <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	6818      	ldr	r0, [r3, #0]
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	691b      	ldr	r3, [r3, #16]
 8003e10:	b2db      	uxtb	r3, r3
 8003e12:	461a      	mov	r2, r3
 8003e14:	6979      	ldr	r1, [r7, #20]
 8003e16:	f002 fe23 	bl	8006a60 <USB_EP0StartXfer>
 8003e1a:	e008      	b.n	8003e2e <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	6818      	ldr	r0, [r3, #0]
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	691b      	ldr	r3, [r3, #16]
 8003e24:	b2db      	uxtb	r3, r3
 8003e26:	461a      	mov	r2, r3
 8003e28:	6979      	ldr	r1, [r7, #20]
 8003e2a:	f002 fbd5 	bl	80065d8 <USB_EPStartXfer>
  }

  return HAL_OK;
 8003e2e:	2300      	movs	r3, #0
}
 8003e30:	4618      	mov	r0, r3
 8003e32:	3718      	adds	r7, #24
 8003e34:	46bd      	mov	sp, r7
 8003e36:	bd80      	pop	{r7, pc}

08003e38 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003e38:	b480      	push	{r7}
 8003e3a:	b083      	sub	sp, #12
 8003e3c:	af00      	add	r7, sp, #0
 8003e3e:	6078      	str	r0, [r7, #4]
 8003e40:	460b      	mov	r3, r1
 8003e42:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8003e44:	78fb      	ldrb	r3, [r7, #3]
 8003e46:	f003 020f 	and.w	r2, r3, #15
 8003e4a:	6879      	ldr	r1, [r7, #4]
 8003e4c:	4613      	mov	r3, r2
 8003e4e:	00db      	lsls	r3, r3, #3
 8003e50:	1a9b      	subs	r3, r3, r2
 8003e52:	009b      	lsls	r3, r3, #2
 8003e54:	440b      	add	r3, r1
 8003e56:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8003e5a:	681b      	ldr	r3, [r3, #0]
}
 8003e5c:	4618      	mov	r0, r3
 8003e5e:	370c      	adds	r7, #12
 8003e60:	46bd      	mov	sp, r7
 8003e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e66:	4770      	bx	lr

08003e68 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003e68:	b580      	push	{r7, lr}
 8003e6a:	b086      	sub	sp, #24
 8003e6c:	af00      	add	r7, sp, #0
 8003e6e:	60f8      	str	r0, [r7, #12]
 8003e70:	607a      	str	r2, [r7, #4]
 8003e72:	603b      	str	r3, [r7, #0]
 8003e74:	460b      	mov	r3, r1
 8003e76:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003e78:	7afb      	ldrb	r3, [r7, #11]
 8003e7a:	f003 020f 	and.w	r2, r3, #15
 8003e7e:	4613      	mov	r3, r2
 8003e80:	00db      	lsls	r3, r3, #3
 8003e82:	1a9b      	subs	r3, r3, r2
 8003e84:	009b      	lsls	r3, r3, #2
 8003e86:	3338      	adds	r3, #56	; 0x38
 8003e88:	68fa      	ldr	r2, [r7, #12]
 8003e8a:	4413      	add	r3, r2
 8003e8c:	3304      	adds	r3, #4
 8003e8e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003e90:	697b      	ldr	r3, [r7, #20]
 8003e92:	687a      	ldr	r2, [r7, #4]
 8003e94:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8003e96:	697b      	ldr	r3, [r7, #20]
 8003e98:	683a      	ldr	r2, [r7, #0]
 8003e9a:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8003e9c:	697b      	ldr	r3, [r7, #20]
 8003e9e:	2200      	movs	r2, #0
 8003ea0:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8003ea2:	697b      	ldr	r3, [r7, #20]
 8003ea4:	2201      	movs	r2, #1
 8003ea6:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003ea8:	7afb      	ldrb	r3, [r7, #11]
 8003eaa:	f003 030f 	and.w	r3, r3, #15
 8003eae:	b2da      	uxtb	r2, r3
 8003eb0:	697b      	ldr	r3, [r7, #20]
 8003eb2:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	691b      	ldr	r3, [r3, #16]
 8003eb8:	2b01      	cmp	r3, #1
 8003eba:	d102      	bne.n	8003ec2 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003ebc:	687a      	ldr	r2, [r7, #4]
 8003ebe:	697b      	ldr	r3, [r7, #20]
 8003ec0:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003ec2:	7afb      	ldrb	r3, [r7, #11]
 8003ec4:	f003 030f 	and.w	r3, r3, #15
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d109      	bne.n	8003ee0 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	6818      	ldr	r0, [r3, #0]
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	691b      	ldr	r3, [r3, #16]
 8003ed4:	b2db      	uxtb	r3, r3
 8003ed6:	461a      	mov	r2, r3
 8003ed8:	6979      	ldr	r1, [r7, #20]
 8003eda:	f002 fdc1 	bl	8006a60 <USB_EP0StartXfer>
 8003ede:	e008      	b.n	8003ef2 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	6818      	ldr	r0, [r3, #0]
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	691b      	ldr	r3, [r3, #16]
 8003ee8:	b2db      	uxtb	r3, r3
 8003eea:	461a      	mov	r2, r3
 8003eec:	6979      	ldr	r1, [r7, #20]
 8003eee:	f002 fb73 	bl	80065d8 <USB_EPStartXfer>
  }

  return HAL_OK;
 8003ef2:	2300      	movs	r3, #0
}
 8003ef4:	4618      	mov	r0, r3
 8003ef6:	3718      	adds	r7, #24
 8003ef8:	46bd      	mov	sp, r7
 8003efa:	bd80      	pop	{r7, pc}

08003efc <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003efc:	b580      	push	{r7, lr}
 8003efe:	b084      	sub	sp, #16
 8003f00:	af00      	add	r7, sp, #0
 8003f02:	6078      	str	r0, [r7, #4]
 8003f04:	460b      	mov	r3, r1
 8003f06:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003f08:	78fb      	ldrb	r3, [r7, #3]
 8003f0a:	f003 020f 	and.w	r2, r3, #15
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	685b      	ldr	r3, [r3, #4]
 8003f12:	429a      	cmp	r2, r3
 8003f14:	d901      	bls.n	8003f1a <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003f16:	2301      	movs	r3, #1
 8003f18:	e050      	b.n	8003fbc <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003f1a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	da0f      	bge.n	8003f42 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003f22:	78fb      	ldrb	r3, [r7, #3]
 8003f24:	f003 020f 	and.w	r2, r3, #15
 8003f28:	4613      	mov	r3, r2
 8003f2a:	00db      	lsls	r3, r3, #3
 8003f2c:	1a9b      	subs	r3, r3, r2
 8003f2e:	009b      	lsls	r3, r3, #2
 8003f30:	3338      	adds	r3, #56	; 0x38
 8003f32:	687a      	ldr	r2, [r7, #4]
 8003f34:	4413      	add	r3, r2
 8003f36:	3304      	adds	r3, #4
 8003f38:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	2201      	movs	r2, #1
 8003f3e:	705a      	strb	r2, [r3, #1]
 8003f40:	e00d      	b.n	8003f5e <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003f42:	78fa      	ldrb	r2, [r7, #3]
 8003f44:	4613      	mov	r3, r2
 8003f46:	00db      	lsls	r3, r3, #3
 8003f48:	1a9b      	subs	r3, r3, r2
 8003f4a:	009b      	lsls	r3, r3, #2
 8003f4c:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003f50:	687a      	ldr	r2, [r7, #4]
 8003f52:	4413      	add	r3, r2
 8003f54:	3304      	adds	r3, #4
 8003f56:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	2200      	movs	r2, #0
 8003f5c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	2201      	movs	r2, #1
 8003f62:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003f64:	78fb      	ldrb	r3, [r7, #3]
 8003f66:	f003 030f 	and.w	r3, r3, #15
 8003f6a:	b2da      	uxtb	r2, r3
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003f76:	2b01      	cmp	r3, #1
 8003f78:	d101      	bne.n	8003f7e <HAL_PCD_EP_SetStall+0x82>
 8003f7a:	2302      	movs	r3, #2
 8003f7c:	e01e      	b.n	8003fbc <HAL_PCD_EP_SetStall+0xc0>
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	2201      	movs	r2, #1
 8003f82:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	68f9      	ldr	r1, [r7, #12]
 8003f8c:	4618      	mov	r0, r3
 8003f8e:	f002 ff18 	bl	8006dc2 <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003f92:	78fb      	ldrb	r3, [r7, #3]
 8003f94:	f003 030f 	and.w	r3, r3, #15
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d10a      	bne.n	8003fb2 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	6818      	ldr	r0, [r3, #0]
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	691b      	ldr	r3, [r3, #16]
 8003fa4:	b2d9      	uxtb	r1, r3
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003fac:	461a      	mov	r2, r3
 8003fae:	f003 f909 	bl	80071c4 <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd);
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	2200      	movs	r2, #0
 8003fb6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8003fba:	2300      	movs	r3, #0
}
 8003fbc:	4618      	mov	r0, r3
 8003fbe:	3710      	adds	r7, #16
 8003fc0:	46bd      	mov	sp, r7
 8003fc2:	bd80      	pop	{r7, pc}

08003fc4 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003fc4:	b580      	push	{r7, lr}
 8003fc6:	b084      	sub	sp, #16
 8003fc8:	af00      	add	r7, sp, #0
 8003fca:	6078      	str	r0, [r7, #4]
 8003fcc:	460b      	mov	r3, r1
 8003fce:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003fd0:	78fb      	ldrb	r3, [r7, #3]
 8003fd2:	f003 020f 	and.w	r2, r3, #15
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	685b      	ldr	r3, [r3, #4]
 8003fda:	429a      	cmp	r2, r3
 8003fdc:	d901      	bls.n	8003fe2 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003fde:	2301      	movs	r3, #1
 8003fe0:	e042      	b.n	8004068 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003fe2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	da0f      	bge.n	800400a <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003fea:	78fb      	ldrb	r3, [r7, #3]
 8003fec:	f003 020f 	and.w	r2, r3, #15
 8003ff0:	4613      	mov	r3, r2
 8003ff2:	00db      	lsls	r3, r3, #3
 8003ff4:	1a9b      	subs	r3, r3, r2
 8003ff6:	009b      	lsls	r3, r3, #2
 8003ff8:	3338      	adds	r3, #56	; 0x38
 8003ffa:	687a      	ldr	r2, [r7, #4]
 8003ffc:	4413      	add	r3, r2
 8003ffe:	3304      	adds	r3, #4
 8004000:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	2201      	movs	r2, #1
 8004006:	705a      	strb	r2, [r3, #1]
 8004008:	e00f      	b.n	800402a <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800400a:	78fb      	ldrb	r3, [r7, #3]
 800400c:	f003 020f 	and.w	r2, r3, #15
 8004010:	4613      	mov	r3, r2
 8004012:	00db      	lsls	r3, r3, #3
 8004014:	1a9b      	subs	r3, r3, r2
 8004016:	009b      	lsls	r3, r3, #2
 8004018:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800401c:	687a      	ldr	r2, [r7, #4]
 800401e:	4413      	add	r3, r2
 8004020:	3304      	adds	r3, #4
 8004022:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	2200      	movs	r2, #0
 8004028:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	2200      	movs	r2, #0
 800402e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004030:	78fb      	ldrb	r3, [r7, #3]
 8004032:	f003 030f 	and.w	r3, r3, #15
 8004036:	b2da      	uxtb	r2, r3
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8004042:	2b01      	cmp	r3, #1
 8004044:	d101      	bne.n	800404a <HAL_PCD_EP_ClrStall+0x86>
 8004046:	2302      	movs	r3, #2
 8004048:	e00e      	b.n	8004068 <HAL_PCD_EP_ClrStall+0xa4>
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	2201      	movs	r2, #1
 800404e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	68f9      	ldr	r1, [r7, #12]
 8004058:	4618      	mov	r0, r3
 800405a:	f002 ff20 	bl	8006e9e <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	2200      	movs	r2, #0
 8004062:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8004066:	2300      	movs	r3, #0
}
 8004068:	4618      	mov	r0, r3
 800406a:	3710      	adds	r7, #16
 800406c:	46bd      	mov	sp, r7
 800406e:	bd80      	pop	{r7, pc}

08004070 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004070:	b580      	push	{r7, lr}
 8004072:	b08a      	sub	sp, #40	; 0x28
 8004074:	af02      	add	r7, sp, #8
 8004076:	6078      	str	r0, [r7, #4]
 8004078:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004080:	697b      	ldr	r3, [r7, #20]
 8004082:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8004084:	683a      	ldr	r2, [r7, #0]
 8004086:	4613      	mov	r3, r2
 8004088:	00db      	lsls	r3, r3, #3
 800408a:	1a9b      	subs	r3, r3, r2
 800408c:	009b      	lsls	r3, r3, #2
 800408e:	3338      	adds	r3, #56	; 0x38
 8004090:	687a      	ldr	r2, [r7, #4]
 8004092:	4413      	add	r3, r2
 8004094:	3304      	adds	r3, #4
 8004096:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	699a      	ldr	r2, [r3, #24]
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	695b      	ldr	r3, [r3, #20]
 80040a0:	429a      	cmp	r2, r3
 80040a2:	d901      	bls.n	80040a8 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80040a4:	2301      	movs	r3, #1
 80040a6:	e06c      	b.n	8004182 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	695a      	ldr	r2, [r3, #20]
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	699b      	ldr	r3, [r3, #24]
 80040b0:	1ad3      	subs	r3, r2, r3
 80040b2:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	689b      	ldr	r3, [r3, #8]
 80040b8:	69fa      	ldr	r2, [r7, #28]
 80040ba:	429a      	cmp	r2, r3
 80040bc:	d902      	bls.n	80040c4 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	689b      	ldr	r3, [r3, #8]
 80040c2:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80040c4:	69fb      	ldr	r3, [r7, #28]
 80040c6:	3303      	adds	r3, #3
 80040c8:	089b      	lsrs	r3, r3, #2
 80040ca:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80040cc:	e02b      	b.n	8004126 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	695a      	ldr	r2, [r3, #20]
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	699b      	ldr	r3, [r3, #24]
 80040d6:	1ad3      	subs	r3, r2, r3
 80040d8:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	689b      	ldr	r3, [r3, #8]
 80040de:	69fa      	ldr	r2, [r7, #28]
 80040e0:	429a      	cmp	r2, r3
 80040e2:	d902      	bls.n	80040ea <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	689b      	ldr	r3, [r3, #8]
 80040e8:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80040ea:	69fb      	ldr	r3, [r7, #28]
 80040ec:	3303      	adds	r3, #3
 80040ee:	089b      	lsrs	r3, r3, #2
 80040f0:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	68d9      	ldr	r1, [r3, #12]
 80040f6:	683b      	ldr	r3, [r7, #0]
 80040f8:	b2da      	uxtb	r2, r3
 80040fa:	69fb      	ldr	r3, [r7, #28]
 80040fc:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8004102:	b2db      	uxtb	r3, r3
 8004104:	9300      	str	r3, [sp, #0]
 8004106:	4603      	mov	r3, r0
 8004108:	6978      	ldr	r0, [r7, #20]
 800410a:	f002 fdfc 	bl	8006d06 <USB_WritePacket>

    ep->xfer_buff  += len;
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	68da      	ldr	r2, [r3, #12]
 8004112:	69fb      	ldr	r3, [r7, #28]
 8004114:	441a      	add	r2, r3
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	699a      	ldr	r2, [r3, #24]
 800411e:	69fb      	ldr	r3, [r7, #28]
 8004120:	441a      	add	r2, r3
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004126:	683b      	ldr	r3, [r7, #0]
 8004128:	015a      	lsls	r2, r3, #5
 800412a:	693b      	ldr	r3, [r7, #16]
 800412c:	4413      	add	r3, r2
 800412e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004132:	699b      	ldr	r3, [r3, #24]
 8004134:	b29b      	uxth	r3, r3
 8004136:	69ba      	ldr	r2, [r7, #24]
 8004138:	429a      	cmp	r2, r3
 800413a:	d809      	bhi.n	8004150 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	699a      	ldr	r2, [r3, #24]
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004144:	429a      	cmp	r2, r3
 8004146:	d203      	bcs.n	8004150 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	695b      	ldr	r3, [r3, #20]
 800414c:	2b00      	cmp	r3, #0
 800414e:	d1be      	bne.n	80040ce <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	695a      	ldr	r2, [r3, #20]
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	699b      	ldr	r3, [r3, #24]
 8004158:	429a      	cmp	r2, r3
 800415a:	d811      	bhi.n	8004180 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800415c:	683b      	ldr	r3, [r7, #0]
 800415e:	f003 030f 	and.w	r3, r3, #15
 8004162:	2201      	movs	r2, #1
 8004164:	fa02 f303 	lsl.w	r3, r2, r3
 8004168:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800416a:	693b      	ldr	r3, [r7, #16]
 800416c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004170:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004172:	68bb      	ldr	r3, [r7, #8]
 8004174:	43db      	mvns	r3, r3
 8004176:	6939      	ldr	r1, [r7, #16]
 8004178:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800417c:	4013      	ands	r3, r2
 800417e:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8004180:	2300      	movs	r3, #0
}
 8004182:	4618      	mov	r0, r3
 8004184:	3720      	adds	r7, #32
 8004186:	46bd      	mov	sp, r7
 8004188:	bd80      	pop	{r7, pc}
	...

0800418c <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800418c:	b580      	push	{r7, lr}
 800418e:	b086      	sub	sp, #24
 8004190:	af00      	add	r7, sp, #0
 8004192:	6078      	str	r0, [r7, #4]
 8004194:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800419c:	697b      	ldr	r3, [r7, #20]
 800419e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80041a0:	697b      	ldr	r3, [r7, #20]
 80041a2:	333c      	adds	r3, #60	; 0x3c
 80041a4:	3304      	adds	r3, #4
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80041aa:	683b      	ldr	r3, [r7, #0]
 80041ac:	015a      	lsls	r2, r3, #5
 80041ae:	693b      	ldr	r3, [r7, #16]
 80041b0:	4413      	add	r3, r2
 80041b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80041b6:	689b      	ldr	r3, [r3, #8]
 80041b8:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	691b      	ldr	r3, [r3, #16]
 80041be:	2b01      	cmp	r3, #1
 80041c0:	f040 80b3 	bne.w	800432a <PCD_EP_OutXfrComplete_int+0x19e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80041c4:	68bb      	ldr	r3, [r7, #8]
 80041c6:	f003 0308 	and.w	r3, r3, #8
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d028      	beq.n	8004220 <PCD_EP_OutXfrComplete_int+0x94>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	4a70      	ldr	r2, [pc, #448]	; (8004394 <PCD_EP_OutXfrComplete_int+0x208>)
 80041d2:	4293      	cmp	r3, r2
 80041d4:	d90e      	bls.n	80041f4 <PCD_EP_OutXfrComplete_int+0x68>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80041d6:	68bb      	ldr	r3, [r7, #8]
 80041d8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d009      	beq.n	80041f4 <PCD_EP_OutXfrComplete_int+0x68>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80041e0:	683b      	ldr	r3, [r7, #0]
 80041e2:	015a      	lsls	r2, r3, #5
 80041e4:	693b      	ldr	r3, [r7, #16]
 80041e6:	4413      	add	r3, r2
 80041e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80041ec:	461a      	mov	r2, r3
 80041ee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80041f2:	6093      	str	r3, [r2, #8]

      /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SetupStageCallback(hpcd);
#else
      HAL_PCD_SetupStageCallback(hpcd);
 80041f4:	6878      	ldr	r0, [r7, #4]
 80041f6:	f013 fe7d 	bl	8017ef4 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	6818      	ldr	r0, [r3, #0]
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8004204:	461a      	mov	r2, r3
 8004206:	2101      	movs	r1, #1
 8004208:	f002 ffdc 	bl	80071c4 <USB_EP0_OutStart>
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800420c:	683b      	ldr	r3, [r7, #0]
 800420e:	015a      	lsls	r2, r3, #5
 8004210:	693b      	ldr	r3, [r7, #16]
 8004212:	4413      	add	r3, r2
 8004214:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004218:	461a      	mov	r2, r3
 800421a:	2308      	movs	r3, #8
 800421c:	6093      	str	r3, [r2, #8]
 800421e:	e0b3      	b.n	8004388 <PCD_EP_OutXfrComplete_int+0x1fc>
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8004220:	68bb      	ldr	r3, [r7, #8]
 8004222:	f003 0320 	and.w	r3, r3, #32
 8004226:	2b00      	cmp	r3, #0
 8004228:	d009      	beq.n	800423e <PCD_EP_OutXfrComplete_int+0xb2>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800422a:	683b      	ldr	r3, [r7, #0]
 800422c:	015a      	lsls	r2, r3, #5
 800422e:	693b      	ldr	r3, [r7, #16]
 8004230:	4413      	add	r3, r2
 8004232:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004236:	461a      	mov	r2, r3
 8004238:	2320      	movs	r3, #32
 800423a:	6093      	str	r3, [r2, #8]
 800423c:	e0a4      	b.n	8004388 <PCD_EP_OutXfrComplete_int+0x1fc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800423e:	68bb      	ldr	r3, [r7, #8]
 8004240:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004244:	2b00      	cmp	r3, #0
 8004246:	f040 809f 	bne.w	8004388 <PCD_EP_OutXfrComplete_int+0x1fc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	4a51      	ldr	r2, [pc, #324]	; (8004394 <PCD_EP_OutXfrComplete_int+0x208>)
 800424e:	4293      	cmp	r3, r2
 8004250:	d90f      	bls.n	8004272 <PCD_EP_OutXfrComplete_int+0xe6>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004252:	68bb      	ldr	r3, [r7, #8]
 8004254:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004258:	2b00      	cmp	r3, #0
 800425a:	d00a      	beq.n	8004272 <PCD_EP_OutXfrComplete_int+0xe6>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800425c:	683b      	ldr	r3, [r7, #0]
 800425e:	015a      	lsls	r2, r3, #5
 8004260:	693b      	ldr	r3, [r7, #16]
 8004262:	4413      	add	r3, r2
 8004264:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004268:	461a      	mov	r2, r3
 800426a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800426e:	6093      	str	r3, [r2, #8]
 8004270:	e08a      	b.n	8004388 <PCD_EP_OutXfrComplete_int+0x1fc>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8004272:	6879      	ldr	r1, [r7, #4]
 8004274:	683a      	ldr	r2, [r7, #0]
 8004276:	4613      	mov	r3, r2
 8004278:	00db      	lsls	r3, r3, #3
 800427a:	1a9b      	subs	r3, r3, r2
 800427c:	009b      	lsls	r3, r3, #2
 800427e:	440b      	add	r3, r1
 8004280:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8004284:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8004286:	683b      	ldr	r3, [r7, #0]
 8004288:	0159      	lsls	r1, r3, #5
 800428a:	693b      	ldr	r3, [r7, #16]
 800428c:	440b      	add	r3, r1
 800428e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004292:	691b      	ldr	r3, [r3, #16]
 8004294:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 8004298:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 800429a:	6878      	ldr	r0, [r7, #4]
 800429c:	683a      	ldr	r2, [r7, #0]
 800429e:	4613      	mov	r3, r2
 80042a0:	00db      	lsls	r3, r3, #3
 80042a2:	1a9b      	subs	r3, r3, r2
 80042a4:	009b      	lsls	r3, r3, #2
 80042a6:	4403      	add	r3, r0
 80042a8:	f503 7305 	add.w	r3, r3, #532	; 0x214
 80042ac:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 80042ae:	6879      	ldr	r1, [r7, #4]
 80042b0:	683a      	ldr	r2, [r7, #0]
 80042b2:	4613      	mov	r3, r2
 80042b4:	00db      	lsls	r3, r3, #3
 80042b6:	1a9b      	subs	r3, r3, r2
 80042b8:	009b      	lsls	r3, r3, #2
 80042ba:	440b      	add	r3, r1
 80042bc:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80042c0:	6819      	ldr	r1, [r3, #0]
 80042c2:	6878      	ldr	r0, [r7, #4]
 80042c4:	683a      	ldr	r2, [r7, #0]
 80042c6:	4613      	mov	r3, r2
 80042c8:	00db      	lsls	r3, r3, #3
 80042ca:	1a9b      	subs	r3, r3, r2
 80042cc:	009b      	lsls	r3, r3, #2
 80042ce:	4403      	add	r3, r0
 80042d0:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	4419      	add	r1, r3
 80042d8:	6878      	ldr	r0, [r7, #4]
 80042da:	683a      	ldr	r2, [r7, #0]
 80042dc:	4613      	mov	r3, r2
 80042de:	00db      	lsls	r3, r3, #3
 80042e0:	1a9b      	subs	r3, r3, r2
 80042e2:	009b      	lsls	r3, r3, #2
 80042e4:	4403      	add	r3, r0
 80042e6:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80042ea:	6019      	str	r1, [r3, #0]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80042ec:	683b      	ldr	r3, [r7, #0]
 80042ee:	b2db      	uxtb	r3, r3
 80042f0:	4619      	mov	r1, r3
 80042f2:	6878      	ldr	r0, [r7, #4]
 80042f4:	f013 fe10 	bl	8017f18 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80042f8:	683b      	ldr	r3, [r7, #0]
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d144      	bne.n	8004388 <PCD_EP_OutXfrComplete_int+0x1fc>
 80042fe:	6879      	ldr	r1, [r7, #4]
 8004300:	683a      	ldr	r2, [r7, #0]
 8004302:	4613      	mov	r3, r2
 8004304:	00db      	lsls	r3, r3, #3
 8004306:	1a9b      	subs	r3, r3, r2
 8004308:	009b      	lsls	r3, r3, #2
 800430a:	440b      	add	r3, r1
 800430c:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	2b00      	cmp	r3, #0
 8004314:	d138      	bne.n	8004388 <PCD_EP_OutXfrComplete_int+0x1fc>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	6818      	ldr	r0, [r3, #0]
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8004320:	461a      	mov	r2, r3
 8004322:	2101      	movs	r1, #1
 8004324:	f002 ff4e 	bl	80071c4 <USB_EP0_OutStart>
 8004328:	e02e      	b.n	8004388 <PCD_EP_OutXfrComplete_int+0x1fc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	4a1a      	ldr	r2, [pc, #104]	; (8004398 <PCD_EP_OutXfrComplete_int+0x20c>)
 800432e:	4293      	cmp	r3, r2
 8004330:	d124      	bne.n	800437c <PCD_EP_OutXfrComplete_int+0x1f0>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8004332:	68bb      	ldr	r3, [r7, #8]
 8004334:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004338:	2b00      	cmp	r3, #0
 800433a:	d00a      	beq.n	8004352 <PCD_EP_OutXfrComplete_int+0x1c6>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800433c:	683b      	ldr	r3, [r7, #0]
 800433e:	015a      	lsls	r2, r3, #5
 8004340:	693b      	ldr	r3, [r7, #16]
 8004342:	4413      	add	r3, r2
 8004344:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004348:	461a      	mov	r2, r3
 800434a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800434e:	6093      	str	r3, [r2, #8]
 8004350:	e01a      	b.n	8004388 <PCD_EP_OutXfrComplete_int+0x1fc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8004352:	68bb      	ldr	r3, [r7, #8]
 8004354:	f003 0320 	and.w	r3, r3, #32
 8004358:	2b00      	cmp	r3, #0
 800435a:	d008      	beq.n	800436e <PCD_EP_OutXfrComplete_int+0x1e2>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800435c:	683b      	ldr	r3, [r7, #0]
 800435e:	015a      	lsls	r2, r3, #5
 8004360:	693b      	ldr	r3, [r7, #16]
 8004362:	4413      	add	r3, r2
 8004364:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004368:	461a      	mov	r2, r3
 800436a:	2320      	movs	r3, #32
 800436c:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800436e:	683b      	ldr	r3, [r7, #0]
 8004370:	b2db      	uxtb	r3, r3
 8004372:	4619      	mov	r1, r3
 8004374:	6878      	ldr	r0, [r7, #4]
 8004376:	f013 fdcf 	bl	8017f18 <HAL_PCD_DataOutStageCallback>
 800437a:	e005      	b.n	8004388 <PCD_EP_OutXfrComplete_int+0x1fc>
    else
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800437c:	683b      	ldr	r3, [r7, #0]
 800437e:	b2db      	uxtb	r3, r3
 8004380:	4619      	mov	r1, r3
 8004382:	6878      	ldr	r0, [r7, #4]
 8004384:	f013 fdc8 	bl	8017f18 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8004388:	2300      	movs	r3, #0
}
 800438a:	4618      	mov	r0, r3
 800438c:	3718      	adds	r7, #24
 800438e:	46bd      	mov	sp, r7
 8004390:	bd80      	pop	{r7, pc}
 8004392:	bf00      	nop
 8004394:	4f54300a 	.word	0x4f54300a
 8004398:	4f54310a 	.word	0x4f54310a

0800439c <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800439c:	b580      	push	{r7, lr}
 800439e:	b086      	sub	sp, #24
 80043a0:	af00      	add	r7, sp, #0
 80043a2:	6078      	str	r0, [r7, #4]
 80043a4:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80043ac:	697b      	ldr	r3, [r7, #20]
 80043ae:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80043b0:	697b      	ldr	r3, [r7, #20]
 80043b2:	333c      	adds	r3, #60	; 0x3c
 80043b4:	3304      	adds	r3, #4
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80043ba:	683b      	ldr	r3, [r7, #0]
 80043bc:	015a      	lsls	r2, r3, #5
 80043be:	693b      	ldr	r3, [r7, #16]
 80043c0:	4413      	add	r3, r2
 80043c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80043c6:	689b      	ldr	r3, [r3, #8]
 80043c8:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	691b      	ldr	r3, [r3, #16]
 80043ce:	2b01      	cmp	r3, #1
 80043d0:	d113      	bne.n	80043fa <PCD_EP_OutSetupPacket_int+0x5e>
  {
    /* StupPktRcvd = 1 pending setup packet int */
    if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	4a1f      	ldr	r2, [pc, #124]	; (8004454 <PCD_EP_OutSetupPacket_int+0xb8>)
 80043d6:	4293      	cmp	r3, r2
 80043d8:	d922      	bls.n	8004420 <PCD_EP_OutSetupPacket_int+0x84>
        ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80043da:	68bb      	ldr	r3, [r7, #8]
 80043dc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
    if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d01d      	beq.n	8004420 <PCD_EP_OutSetupPacket_int+0x84>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80043e4:	683b      	ldr	r3, [r7, #0]
 80043e6:	015a      	lsls	r2, r3, #5
 80043e8:	693b      	ldr	r3, [r7, #16]
 80043ea:	4413      	add	r3, r2
 80043ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80043f0:	461a      	mov	r2, r3
 80043f2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80043f6:	6093      	str	r3, [r2, #8]
 80043f8:	e012      	b.n	8004420 <PCD_EP_OutSetupPacket_int+0x84>
    }
  }
  else
  {
    if ((gSNPSiD == USB_OTG_CORE_ID_310A) &&
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	4a16      	ldr	r2, [pc, #88]	; (8004458 <PCD_EP_OutSetupPacket_int+0xbc>)
 80043fe:	4293      	cmp	r3, r2
 8004400:	d10e      	bne.n	8004420 <PCD_EP_OutSetupPacket_int+0x84>
        ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004402:	68bb      	ldr	r3, [r7, #8]
 8004404:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
    if ((gSNPSiD == USB_OTG_CORE_ID_310A) &&
 8004408:	2b00      	cmp	r3, #0
 800440a:	d009      	beq.n	8004420 <PCD_EP_OutSetupPacket_int+0x84>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800440c:	683b      	ldr	r3, [r7, #0]
 800440e:	015a      	lsls	r2, r3, #5
 8004410:	693b      	ldr	r3, [r7, #16]
 8004412:	4413      	add	r3, r2
 8004414:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004418:	461a      	mov	r2, r3
 800441a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800441e:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8004420:	6878      	ldr	r0, [r7, #4]
 8004422:	f013 fd67 	bl	8017ef4 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	4a0a      	ldr	r2, [pc, #40]	; (8004454 <PCD_EP_OutSetupPacket_int+0xb8>)
 800442a:	4293      	cmp	r3, r2
 800442c:	d90c      	bls.n	8004448 <PCD_EP_OutSetupPacket_int+0xac>
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	691b      	ldr	r3, [r3, #16]
 8004432:	2b01      	cmp	r3, #1
 8004434:	d108      	bne.n	8004448 <PCD_EP_OutSetupPacket_int+0xac>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	6818      	ldr	r0, [r3, #0]
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8004440:	461a      	mov	r2, r3
 8004442:	2101      	movs	r1, #1
 8004444:	f002 febe 	bl	80071c4 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8004448:	2300      	movs	r3, #0
}
 800444a:	4618      	mov	r0, r3
 800444c:	3718      	adds	r7, #24
 800444e:	46bd      	mov	sp, r7
 8004450:	bd80      	pop	{r7, pc}
 8004452:	bf00      	nop
 8004454:	4f54300a 	.word	0x4f54300a
 8004458:	4f54310a 	.word	0x4f54310a

0800445c <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 800445c:	b480      	push	{r7}
 800445e:	b085      	sub	sp, #20
 8004460:	af00      	add	r7, sp, #0
 8004462:	6078      	str	r0, [r7, #4]
 8004464:	460b      	mov	r3, r1
 8004466:	70fb      	strb	r3, [r7, #3]
 8004468:	4613      	mov	r3, r2
 800446a:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004472:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8004474:	78fb      	ldrb	r3, [r7, #3]
 8004476:	2b00      	cmp	r3, #0
 8004478:	d107      	bne.n	800448a <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800447a:	883b      	ldrh	r3, [r7, #0]
 800447c:	0419      	lsls	r1, r3, #16
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	68ba      	ldr	r2, [r7, #8]
 8004484:	430a      	orrs	r2, r1
 8004486:	629a      	str	r2, [r3, #40]	; 0x28
 8004488:	e028      	b.n	80044dc <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004490:	0c1b      	lsrs	r3, r3, #16
 8004492:	68ba      	ldr	r2, [r7, #8]
 8004494:	4413      	add	r3, r2
 8004496:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004498:	2300      	movs	r3, #0
 800449a:	73fb      	strb	r3, [r7, #15]
 800449c:	e00d      	b.n	80044ba <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681a      	ldr	r2, [r3, #0]
 80044a2:	7bfb      	ldrb	r3, [r7, #15]
 80044a4:	3340      	adds	r3, #64	; 0x40
 80044a6:	009b      	lsls	r3, r3, #2
 80044a8:	4413      	add	r3, r2
 80044aa:	685b      	ldr	r3, [r3, #4]
 80044ac:	0c1b      	lsrs	r3, r3, #16
 80044ae:	68ba      	ldr	r2, [r7, #8]
 80044b0:	4413      	add	r3, r2
 80044b2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80044b4:	7bfb      	ldrb	r3, [r7, #15]
 80044b6:	3301      	adds	r3, #1
 80044b8:	73fb      	strb	r3, [r7, #15]
 80044ba:	7bfa      	ldrb	r2, [r7, #15]
 80044bc:	78fb      	ldrb	r3, [r7, #3]
 80044be:	3b01      	subs	r3, #1
 80044c0:	429a      	cmp	r2, r3
 80044c2:	d3ec      	bcc.n	800449e <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80044c4:	883b      	ldrh	r3, [r7, #0]
 80044c6:	0418      	lsls	r0, r3, #16
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	6819      	ldr	r1, [r3, #0]
 80044cc:	78fb      	ldrb	r3, [r7, #3]
 80044ce:	3b01      	subs	r3, #1
 80044d0:	68ba      	ldr	r2, [r7, #8]
 80044d2:	4302      	orrs	r2, r0
 80044d4:	3340      	adds	r3, #64	; 0x40
 80044d6:	009b      	lsls	r3, r3, #2
 80044d8:	440b      	add	r3, r1
 80044da:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80044dc:	2300      	movs	r3, #0
}
 80044de:	4618      	mov	r0, r3
 80044e0:	3714      	adds	r7, #20
 80044e2:	46bd      	mov	sp, r7
 80044e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e8:	4770      	bx	lr

080044ea <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80044ea:	b480      	push	{r7}
 80044ec:	b083      	sub	sp, #12
 80044ee:	af00      	add	r7, sp, #0
 80044f0:	6078      	str	r0, [r7, #4]
 80044f2:	460b      	mov	r3, r1
 80044f4:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	887a      	ldrh	r2, [r7, #2]
 80044fc:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80044fe:	2300      	movs	r3, #0
}
 8004500:	4618      	mov	r0, r3
 8004502:	370c      	adds	r7, #12
 8004504:	46bd      	mov	sp, r7
 8004506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800450a:	4770      	bx	lr

0800450c <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800450c:	b480      	push	{r7}
 800450e:	b083      	sub	sp, #12
 8004510:	af00      	add	r7, sp, #0
 8004512:	6078      	str	r0, [r7, #4]
 8004514:	460b      	mov	r3, r1
 8004516:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8004518:	bf00      	nop
 800451a:	370c      	adds	r7, #12
 800451c:	46bd      	mov	sp, r7
 800451e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004522:	4770      	bx	lr

08004524 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004524:	b580      	push	{r7, lr}
 8004526:	b086      	sub	sp, #24
 8004528:	af00      	add	r7, sp, #0
 800452a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	2b00      	cmp	r3, #0
 8004530:	d101      	bne.n	8004536 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004532:	2301      	movs	r3, #1
 8004534:	e22d      	b.n	8004992 <HAL_RCC_OscConfig+0x46e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	f003 0301 	and.w	r3, r3, #1
 800453e:	2b00      	cmp	r3, #0
 8004540:	d075      	beq.n	800462e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004542:	4ba3      	ldr	r3, [pc, #652]	; (80047d0 <HAL_RCC_OscConfig+0x2ac>)
 8004544:	689b      	ldr	r3, [r3, #8]
 8004546:	f003 030c 	and.w	r3, r3, #12
 800454a:	2b04      	cmp	r3, #4
 800454c:	d00c      	beq.n	8004568 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800454e:	4ba0      	ldr	r3, [pc, #640]	; (80047d0 <HAL_RCC_OscConfig+0x2ac>)
 8004550:	689b      	ldr	r3, [r3, #8]
 8004552:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004556:	2b08      	cmp	r3, #8
 8004558:	d112      	bne.n	8004580 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800455a:	4b9d      	ldr	r3, [pc, #628]	; (80047d0 <HAL_RCC_OscConfig+0x2ac>)
 800455c:	685b      	ldr	r3, [r3, #4]
 800455e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004562:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004566:	d10b      	bne.n	8004580 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004568:	4b99      	ldr	r3, [pc, #612]	; (80047d0 <HAL_RCC_OscConfig+0x2ac>)
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004570:	2b00      	cmp	r3, #0
 8004572:	d05b      	beq.n	800462c <HAL_RCC_OscConfig+0x108>
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	685b      	ldr	r3, [r3, #4]
 8004578:	2b00      	cmp	r3, #0
 800457a:	d157      	bne.n	800462c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800457c:	2301      	movs	r3, #1
 800457e:	e208      	b.n	8004992 <HAL_RCC_OscConfig+0x46e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	685b      	ldr	r3, [r3, #4]
 8004584:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004588:	d106      	bne.n	8004598 <HAL_RCC_OscConfig+0x74>
 800458a:	4b91      	ldr	r3, [pc, #580]	; (80047d0 <HAL_RCC_OscConfig+0x2ac>)
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	4a90      	ldr	r2, [pc, #576]	; (80047d0 <HAL_RCC_OscConfig+0x2ac>)
 8004590:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004594:	6013      	str	r3, [r2, #0]
 8004596:	e01d      	b.n	80045d4 <HAL_RCC_OscConfig+0xb0>
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	685b      	ldr	r3, [r3, #4]
 800459c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80045a0:	d10c      	bne.n	80045bc <HAL_RCC_OscConfig+0x98>
 80045a2:	4b8b      	ldr	r3, [pc, #556]	; (80047d0 <HAL_RCC_OscConfig+0x2ac>)
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	4a8a      	ldr	r2, [pc, #552]	; (80047d0 <HAL_RCC_OscConfig+0x2ac>)
 80045a8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80045ac:	6013      	str	r3, [r2, #0]
 80045ae:	4b88      	ldr	r3, [pc, #544]	; (80047d0 <HAL_RCC_OscConfig+0x2ac>)
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	4a87      	ldr	r2, [pc, #540]	; (80047d0 <HAL_RCC_OscConfig+0x2ac>)
 80045b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80045b8:	6013      	str	r3, [r2, #0]
 80045ba:	e00b      	b.n	80045d4 <HAL_RCC_OscConfig+0xb0>
 80045bc:	4b84      	ldr	r3, [pc, #528]	; (80047d0 <HAL_RCC_OscConfig+0x2ac>)
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	4a83      	ldr	r2, [pc, #524]	; (80047d0 <HAL_RCC_OscConfig+0x2ac>)
 80045c2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80045c6:	6013      	str	r3, [r2, #0]
 80045c8:	4b81      	ldr	r3, [pc, #516]	; (80047d0 <HAL_RCC_OscConfig+0x2ac>)
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	4a80      	ldr	r2, [pc, #512]	; (80047d0 <HAL_RCC_OscConfig+0x2ac>)
 80045ce:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80045d2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	685b      	ldr	r3, [r3, #4]
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d013      	beq.n	8004604 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80045dc:	f7fd fbac 	bl	8001d38 <HAL_GetTick>
 80045e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80045e2:	e008      	b.n	80045f6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80045e4:	f7fd fba8 	bl	8001d38 <HAL_GetTick>
 80045e8:	4602      	mov	r2, r0
 80045ea:	693b      	ldr	r3, [r7, #16]
 80045ec:	1ad3      	subs	r3, r2, r3
 80045ee:	2b64      	cmp	r3, #100	; 0x64
 80045f0:	d901      	bls.n	80045f6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80045f2:	2303      	movs	r3, #3
 80045f4:	e1cd      	b.n	8004992 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80045f6:	4b76      	ldr	r3, [pc, #472]	; (80047d0 <HAL_RCC_OscConfig+0x2ac>)
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d0f0      	beq.n	80045e4 <HAL_RCC_OscConfig+0xc0>
 8004602:	e014      	b.n	800462e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004604:	f7fd fb98 	bl	8001d38 <HAL_GetTick>
 8004608:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800460a:	e008      	b.n	800461e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800460c:	f7fd fb94 	bl	8001d38 <HAL_GetTick>
 8004610:	4602      	mov	r2, r0
 8004612:	693b      	ldr	r3, [r7, #16]
 8004614:	1ad3      	subs	r3, r2, r3
 8004616:	2b64      	cmp	r3, #100	; 0x64
 8004618:	d901      	bls.n	800461e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800461a:	2303      	movs	r3, #3
 800461c:	e1b9      	b.n	8004992 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800461e:	4b6c      	ldr	r3, [pc, #432]	; (80047d0 <HAL_RCC_OscConfig+0x2ac>)
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004626:	2b00      	cmp	r3, #0
 8004628:	d1f0      	bne.n	800460c <HAL_RCC_OscConfig+0xe8>
 800462a:	e000      	b.n	800462e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800462c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	f003 0302 	and.w	r3, r3, #2
 8004636:	2b00      	cmp	r3, #0
 8004638:	d063      	beq.n	8004702 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800463a:	4b65      	ldr	r3, [pc, #404]	; (80047d0 <HAL_RCC_OscConfig+0x2ac>)
 800463c:	689b      	ldr	r3, [r3, #8]
 800463e:	f003 030c 	and.w	r3, r3, #12
 8004642:	2b00      	cmp	r3, #0
 8004644:	d00b      	beq.n	800465e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004646:	4b62      	ldr	r3, [pc, #392]	; (80047d0 <HAL_RCC_OscConfig+0x2ac>)
 8004648:	689b      	ldr	r3, [r3, #8]
 800464a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800464e:	2b08      	cmp	r3, #8
 8004650:	d11c      	bne.n	800468c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004652:	4b5f      	ldr	r3, [pc, #380]	; (80047d0 <HAL_RCC_OscConfig+0x2ac>)
 8004654:	685b      	ldr	r3, [r3, #4]
 8004656:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800465a:	2b00      	cmp	r3, #0
 800465c:	d116      	bne.n	800468c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800465e:	4b5c      	ldr	r3, [pc, #368]	; (80047d0 <HAL_RCC_OscConfig+0x2ac>)
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	f003 0302 	and.w	r3, r3, #2
 8004666:	2b00      	cmp	r3, #0
 8004668:	d005      	beq.n	8004676 <HAL_RCC_OscConfig+0x152>
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	68db      	ldr	r3, [r3, #12]
 800466e:	2b01      	cmp	r3, #1
 8004670:	d001      	beq.n	8004676 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004672:	2301      	movs	r3, #1
 8004674:	e18d      	b.n	8004992 <HAL_RCC_OscConfig+0x46e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004676:	4b56      	ldr	r3, [pc, #344]	; (80047d0 <HAL_RCC_OscConfig+0x2ac>)
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	691b      	ldr	r3, [r3, #16]
 8004682:	00db      	lsls	r3, r3, #3
 8004684:	4952      	ldr	r1, [pc, #328]	; (80047d0 <HAL_RCC_OscConfig+0x2ac>)
 8004686:	4313      	orrs	r3, r2
 8004688:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800468a:	e03a      	b.n	8004702 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	68db      	ldr	r3, [r3, #12]
 8004690:	2b00      	cmp	r3, #0
 8004692:	d020      	beq.n	80046d6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004694:	4b4f      	ldr	r3, [pc, #316]	; (80047d4 <HAL_RCC_OscConfig+0x2b0>)
 8004696:	2201      	movs	r2, #1
 8004698:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800469a:	f7fd fb4d 	bl	8001d38 <HAL_GetTick>
 800469e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80046a0:	e008      	b.n	80046b4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80046a2:	f7fd fb49 	bl	8001d38 <HAL_GetTick>
 80046a6:	4602      	mov	r2, r0
 80046a8:	693b      	ldr	r3, [r7, #16]
 80046aa:	1ad3      	subs	r3, r2, r3
 80046ac:	2b02      	cmp	r3, #2
 80046ae:	d901      	bls.n	80046b4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80046b0:	2303      	movs	r3, #3
 80046b2:	e16e      	b.n	8004992 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80046b4:	4b46      	ldr	r3, [pc, #280]	; (80047d0 <HAL_RCC_OscConfig+0x2ac>)
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	f003 0302 	and.w	r3, r3, #2
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d0f0      	beq.n	80046a2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80046c0:	4b43      	ldr	r3, [pc, #268]	; (80047d0 <HAL_RCC_OscConfig+0x2ac>)
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	691b      	ldr	r3, [r3, #16]
 80046cc:	00db      	lsls	r3, r3, #3
 80046ce:	4940      	ldr	r1, [pc, #256]	; (80047d0 <HAL_RCC_OscConfig+0x2ac>)
 80046d0:	4313      	orrs	r3, r2
 80046d2:	600b      	str	r3, [r1, #0]
 80046d4:	e015      	b.n	8004702 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80046d6:	4b3f      	ldr	r3, [pc, #252]	; (80047d4 <HAL_RCC_OscConfig+0x2b0>)
 80046d8:	2200      	movs	r2, #0
 80046da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046dc:	f7fd fb2c 	bl	8001d38 <HAL_GetTick>
 80046e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80046e2:	e008      	b.n	80046f6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80046e4:	f7fd fb28 	bl	8001d38 <HAL_GetTick>
 80046e8:	4602      	mov	r2, r0
 80046ea:	693b      	ldr	r3, [r7, #16]
 80046ec:	1ad3      	subs	r3, r2, r3
 80046ee:	2b02      	cmp	r3, #2
 80046f0:	d901      	bls.n	80046f6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80046f2:	2303      	movs	r3, #3
 80046f4:	e14d      	b.n	8004992 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80046f6:	4b36      	ldr	r3, [pc, #216]	; (80047d0 <HAL_RCC_OscConfig+0x2ac>)
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	f003 0302 	and.w	r3, r3, #2
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d1f0      	bne.n	80046e4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	f003 0308 	and.w	r3, r3, #8
 800470a:	2b00      	cmp	r3, #0
 800470c:	d030      	beq.n	8004770 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	695b      	ldr	r3, [r3, #20]
 8004712:	2b00      	cmp	r3, #0
 8004714:	d016      	beq.n	8004744 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004716:	4b30      	ldr	r3, [pc, #192]	; (80047d8 <HAL_RCC_OscConfig+0x2b4>)
 8004718:	2201      	movs	r2, #1
 800471a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800471c:	f7fd fb0c 	bl	8001d38 <HAL_GetTick>
 8004720:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004722:	e008      	b.n	8004736 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004724:	f7fd fb08 	bl	8001d38 <HAL_GetTick>
 8004728:	4602      	mov	r2, r0
 800472a:	693b      	ldr	r3, [r7, #16]
 800472c:	1ad3      	subs	r3, r2, r3
 800472e:	2b02      	cmp	r3, #2
 8004730:	d901      	bls.n	8004736 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004732:	2303      	movs	r3, #3
 8004734:	e12d      	b.n	8004992 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004736:	4b26      	ldr	r3, [pc, #152]	; (80047d0 <HAL_RCC_OscConfig+0x2ac>)
 8004738:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800473a:	f003 0302 	and.w	r3, r3, #2
 800473e:	2b00      	cmp	r3, #0
 8004740:	d0f0      	beq.n	8004724 <HAL_RCC_OscConfig+0x200>
 8004742:	e015      	b.n	8004770 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004744:	4b24      	ldr	r3, [pc, #144]	; (80047d8 <HAL_RCC_OscConfig+0x2b4>)
 8004746:	2200      	movs	r2, #0
 8004748:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800474a:	f7fd faf5 	bl	8001d38 <HAL_GetTick>
 800474e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004750:	e008      	b.n	8004764 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004752:	f7fd faf1 	bl	8001d38 <HAL_GetTick>
 8004756:	4602      	mov	r2, r0
 8004758:	693b      	ldr	r3, [r7, #16]
 800475a:	1ad3      	subs	r3, r2, r3
 800475c:	2b02      	cmp	r3, #2
 800475e:	d901      	bls.n	8004764 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004760:	2303      	movs	r3, #3
 8004762:	e116      	b.n	8004992 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004764:	4b1a      	ldr	r3, [pc, #104]	; (80047d0 <HAL_RCC_OscConfig+0x2ac>)
 8004766:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004768:	f003 0302 	and.w	r3, r3, #2
 800476c:	2b00      	cmp	r3, #0
 800476e:	d1f0      	bne.n	8004752 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	f003 0304 	and.w	r3, r3, #4
 8004778:	2b00      	cmp	r3, #0
 800477a:	f000 80a0 	beq.w	80048be <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800477e:	2300      	movs	r3, #0
 8004780:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004782:	4b13      	ldr	r3, [pc, #76]	; (80047d0 <HAL_RCC_OscConfig+0x2ac>)
 8004784:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004786:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800478a:	2b00      	cmp	r3, #0
 800478c:	d10f      	bne.n	80047ae <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800478e:	2300      	movs	r3, #0
 8004790:	60fb      	str	r3, [r7, #12]
 8004792:	4b0f      	ldr	r3, [pc, #60]	; (80047d0 <HAL_RCC_OscConfig+0x2ac>)
 8004794:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004796:	4a0e      	ldr	r2, [pc, #56]	; (80047d0 <HAL_RCC_OscConfig+0x2ac>)
 8004798:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800479c:	6413      	str	r3, [r2, #64]	; 0x40
 800479e:	4b0c      	ldr	r3, [pc, #48]	; (80047d0 <HAL_RCC_OscConfig+0x2ac>)
 80047a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80047a6:	60fb      	str	r3, [r7, #12]
 80047a8:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80047aa:	2301      	movs	r3, #1
 80047ac:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80047ae:	4b0b      	ldr	r3, [pc, #44]	; (80047dc <HAL_RCC_OscConfig+0x2b8>)
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d121      	bne.n	80047fe <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80047ba:	4b08      	ldr	r3, [pc, #32]	; (80047dc <HAL_RCC_OscConfig+0x2b8>)
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	4a07      	ldr	r2, [pc, #28]	; (80047dc <HAL_RCC_OscConfig+0x2b8>)
 80047c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80047c4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80047c6:	f7fd fab7 	bl	8001d38 <HAL_GetTick>
 80047ca:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80047cc:	e011      	b.n	80047f2 <HAL_RCC_OscConfig+0x2ce>
 80047ce:	bf00      	nop
 80047d0:	40023800 	.word	0x40023800
 80047d4:	42470000 	.word	0x42470000
 80047d8:	42470e80 	.word	0x42470e80
 80047dc:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80047e0:	f7fd faaa 	bl	8001d38 <HAL_GetTick>
 80047e4:	4602      	mov	r2, r0
 80047e6:	693b      	ldr	r3, [r7, #16]
 80047e8:	1ad3      	subs	r3, r2, r3
 80047ea:	2b02      	cmp	r3, #2
 80047ec:	d901      	bls.n	80047f2 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80047ee:	2303      	movs	r3, #3
 80047f0:	e0cf      	b.n	8004992 <HAL_RCC_OscConfig+0x46e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80047f2:	4b6a      	ldr	r3, [pc, #424]	; (800499c <HAL_RCC_OscConfig+0x478>)
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d0f0      	beq.n	80047e0 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	689b      	ldr	r3, [r3, #8]
 8004802:	2b01      	cmp	r3, #1
 8004804:	d106      	bne.n	8004814 <HAL_RCC_OscConfig+0x2f0>
 8004806:	4b66      	ldr	r3, [pc, #408]	; (80049a0 <HAL_RCC_OscConfig+0x47c>)
 8004808:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800480a:	4a65      	ldr	r2, [pc, #404]	; (80049a0 <HAL_RCC_OscConfig+0x47c>)
 800480c:	f043 0301 	orr.w	r3, r3, #1
 8004810:	6713      	str	r3, [r2, #112]	; 0x70
 8004812:	e01c      	b.n	800484e <HAL_RCC_OscConfig+0x32a>
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	689b      	ldr	r3, [r3, #8]
 8004818:	2b05      	cmp	r3, #5
 800481a:	d10c      	bne.n	8004836 <HAL_RCC_OscConfig+0x312>
 800481c:	4b60      	ldr	r3, [pc, #384]	; (80049a0 <HAL_RCC_OscConfig+0x47c>)
 800481e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004820:	4a5f      	ldr	r2, [pc, #380]	; (80049a0 <HAL_RCC_OscConfig+0x47c>)
 8004822:	f043 0304 	orr.w	r3, r3, #4
 8004826:	6713      	str	r3, [r2, #112]	; 0x70
 8004828:	4b5d      	ldr	r3, [pc, #372]	; (80049a0 <HAL_RCC_OscConfig+0x47c>)
 800482a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800482c:	4a5c      	ldr	r2, [pc, #368]	; (80049a0 <HAL_RCC_OscConfig+0x47c>)
 800482e:	f043 0301 	orr.w	r3, r3, #1
 8004832:	6713      	str	r3, [r2, #112]	; 0x70
 8004834:	e00b      	b.n	800484e <HAL_RCC_OscConfig+0x32a>
 8004836:	4b5a      	ldr	r3, [pc, #360]	; (80049a0 <HAL_RCC_OscConfig+0x47c>)
 8004838:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800483a:	4a59      	ldr	r2, [pc, #356]	; (80049a0 <HAL_RCC_OscConfig+0x47c>)
 800483c:	f023 0301 	bic.w	r3, r3, #1
 8004840:	6713      	str	r3, [r2, #112]	; 0x70
 8004842:	4b57      	ldr	r3, [pc, #348]	; (80049a0 <HAL_RCC_OscConfig+0x47c>)
 8004844:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004846:	4a56      	ldr	r2, [pc, #344]	; (80049a0 <HAL_RCC_OscConfig+0x47c>)
 8004848:	f023 0304 	bic.w	r3, r3, #4
 800484c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	689b      	ldr	r3, [r3, #8]
 8004852:	2b00      	cmp	r3, #0
 8004854:	d015      	beq.n	8004882 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004856:	f7fd fa6f 	bl	8001d38 <HAL_GetTick>
 800485a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800485c:	e00a      	b.n	8004874 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800485e:	f7fd fa6b 	bl	8001d38 <HAL_GetTick>
 8004862:	4602      	mov	r2, r0
 8004864:	693b      	ldr	r3, [r7, #16]
 8004866:	1ad3      	subs	r3, r2, r3
 8004868:	f241 3288 	movw	r2, #5000	; 0x1388
 800486c:	4293      	cmp	r3, r2
 800486e:	d901      	bls.n	8004874 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8004870:	2303      	movs	r3, #3
 8004872:	e08e      	b.n	8004992 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004874:	4b4a      	ldr	r3, [pc, #296]	; (80049a0 <HAL_RCC_OscConfig+0x47c>)
 8004876:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004878:	f003 0302 	and.w	r3, r3, #2
 800487c:	2b00      	cmp	r3, #0
 800487e:	d0ee      	beq.n	800485e <HAL_RCC_OscConfig+0x33a>
 8004880:	e014      	b.n	80048ac <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004882:	f7fd fa59 	bl	8001d38 <HAL_GetTick>
 8004886:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004888:	e00a      	b.n	80048a0 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800488a:	f7fd fa55 	bl	8001d38 <HAL_GetTick>
 800488e:	4602      	mov	r2, r0
 8004890:	693b      	ldr	r3, [r7, #16]
 8004892:	1ad3      	subs	r3, r2, r3
 8004894:	f241 3288 	movw	r2, #5000	; 0x1388
 8004898:	4293      	cmp	r3, r2
 800489a:	d901      	bls.n	80048a0 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 800489c:	2303      	movs	r3, #3
 800489e:	e078      	b.n	8004992 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80048a0:	4b3f      	ldr	r3, [pc, #252]	; (80049a0 <HAL_RCC_OscConfig+0x47c>)
 80048a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048a4:	f003 0302 	and.w	r3, r3, #2
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d1ee      	bne.n	800488a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80048ac:	7dfb      	ldrb	r3, [r7, #23]
 80048ae:	2b01      	cmp	r3, #1
 80048b0:	d105      	bne.n	80048be <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80048b2:	4b3b      	ldr	r3, [pc, #236]	; (80049a0 <HAL_RCC_OscConfig+0x47c>)
 80048b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048b6:	4a3a      	ldr	r2, [pc, #232]	; (80049a0 <HAL_RCC_OscConfig+0x47c>)
 80048b8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80048bc:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	699b      	ldr	r3, [r3, #24]
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d064      	beq.n	8004990 <HAL_RCC_OscConfig+0x46c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80048c6:	4b36      	ldr	r3, [pc, #216]	; (80049a0 <HAL_RCC_OscConfig+0x47c>)
 80048c8:	689b      	ldr	r3, [r3, #8]
 80048ca:	f003 030c 	and.w	r3, r3, #12
 80048ce:	2b08      	cmp	r3, #8
 80048d0:	d05c      	beq.n	800498c <HAL_RCC_OscConfig+0x468>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	699b      	ldr	r3, [r3, #24]
 80048d6:	2b02      	cmp	r3, #2
 80048d8:	d141      	bne.n	800495e <HAL_RCC_OscConfig+0x43a>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80048da:	4b32      	ldr	r3, [pc, #200]	; (80049a4 <HAL_RCC_OscConfig+0x480>)
 80048dc:	2200      	movs	r2, #0
 80048de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80048e0:	f7fd fa2a 	bl	8001d38 <HAL_GetTick>
 80048e4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80048e6:	e008      	b.n	80048fa <HAL_RCC_OscConfig+0x3d6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80048e8:	f7fd fa26 	bl	8001d38 <HAL_GetTick>
 80048ec:	4602      	mov	r2, r0
 80048ee:	693b      	ldr	r3, [r7, #16]
 80048f0:	1ad3      	subs	r3, r2, r3
 80048f2:	2b02      	cmp	r3, #2
 80048f4:	d901      	bls.n	80048fa <HAL_RCC_OscConfig+0x3d6>
          {
            return HAL_TIMEOUT;
 80048f6:	2303      	movs	r3, #3
 80048f8:	e04b      	b.n	8004992 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80048fa:	4b29      	ldr	r3, [pc, #164]	; (80049a0 <HAL_RCC_OscConfig+0x47c>)
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004902:	2b00      	cmp	r3, #0
 8004904:	d1f0      	bne.n	80048e8 <HAL_RCC_OscConfig+0x3c4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	69da      	ldr	r2, [r3, #28]
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	6a1b      	ldr	r3, [r3, #32]
 800490e:	431a      	orrs	r2, r3
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004914:	019b      	lsls	r3, r3, #6
 8004916:	431a      	orrs	r2, r3
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800491c:	085b      	lsrs	r3, r3, #1
 800491e:	3b01      	subs	r3, #1
 8004920:	041b      	lsls	r3, r3, #16
 8004922:	431a      	orrs	r2, r3
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004928:	061b      	lsls	r3, r3, #24
 800492a:	491d      	ldr	r1, [pc, #116]	; (80049a0 <HAL_RCC_OscConfig+0x47c>)
 800492c:	4313      	orrs	r3, r2
 800492e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004930:	4b1c      	ldr	r3, [pc, #112]	; (80049a4 <HAL_RCC_OscConfig+0x480>)
 8004932:	2201      	movs	r2, #1
 8004934:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004936:	f7fd f9ff 	bl	8001d38 <HAL_GetTick>
 800493a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800493c:	e008      	b.n	8004950 <HAL_RCC_OscConfig+0x42c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800493e:	f7fd f9fb 	bl	8001d38 <HAL_GetTick>
 8004942:	4602      	mov	r2, r0
 8004944:	693b      	ldr	r3, [r7, #16]
 8004946:	1ad3      	subs	r3, r2, r3
 8004948:	2b02      	cmp	r3, #2
 800494a:	d901      	bls.n	8004950 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 800494c:	2303      	movs	r3, #3
 800494e:	e020      	b.n	8004992 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004950:	4b13      	ldr	r3, [pc, #76]	; (80049a0 <HAL_RCC_OscConfig+0x47c>)
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004958:	2b00      	cmp	r3, #0
 800495a:	d0f0      	beq.n	800493e <HAL_RCC_OscConfig+0x41a>
 800495c:	e018      	b.n	8004990 <HAL_RCC_OscConfig+0x46c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800495e:	4b11      	ldr	r3, [pc, #68]	; (80049a4 <HAL_RCC_OscConfig+0x480>)
 8004960:	2200      	movs	r2, #0
 8004962:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004964:	f7fd f9e8 	bl	8001d38 <HAL_GetTick>
 8004968:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800496a:	e008      	b.n	800497e <HAL_RCC_OscConfig+0x45a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800496c:	f7fd f9e4 	bl	8001d38 <HAL_GetTick>
 8004970:	4602      	mov	r2, r0
 8004972:	693b      	ldr	r3, [r7, #16]
 8004974:	1ad3      	subs	r3, r2, r3
 8004976:	2b02      	cmp	r3, #2
 8004978:	d901      	bls.n	800497e <HAL_RCC_OscConfig+0x45a>
          {
            return HAL_TIMEOUT;
 800497a:	2303      	movs	r3, #3
 800497c:	e009      	b.n	8004992 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800497e:	4b08      	ldr	r3, [pc, #32]	; (80049a0 <HAL_RCC_OscConfig+0x47c>)
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004986:	2b00      	cmp	r3, #0
 8004988:	d1f0      	bne.n	800496c <HAL_RCC_OscConfig+0x448>
 800498a:	e001      	b.n	8004990 <HAL_RCC_OscConfig+0x46c>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 800498c:	2301      	movs	r3, #1
 800498e:	e000      	b.n	8004992 <HAL_RCC_OscConfig+0x46e>
    }
  }
  return HAL_OK;
 8004990:	2300      	movs	r3, #0
}
 8004992:	4618      	mov	r0, r3
 8004994:	3718      	adds	r7, #24
 8004996:	46bd      	mov	sp, r7
 8004998:	bd80      	pop	{r7, pc}
 800499a:	bf00      	nop
 800499c:	40007000 	.word	0x40007000
 80049a0:	40023800 	.word	0x40023800
 80049a4:	42470060 	.word	0x42470060

080049a8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80049a8:	b580      	push	{r7, lr}
 80049aa:	b084      	sub	sp, #16
 80049ac:	af00      	add	r7, sp, #0
 80049ae:	6078      	str	r0, [r7, #4]
 80049b0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d101      	bne.n	80049bc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80049b8:	2301      	movs	r3, #1
 80049ba:	e0ca      	b.n	8004b52 <HAL_RCC_ClockConfig+0x1aa>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80049bc:	4b67      	ldr	r3, [pc, #412]	; (8004b5c <HAL_RCC_ClockConfig+0x1b4>)
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	f003 030f 	and.w	r3, r3, #15
 80049c4:	683a      	ldr	r2, [r7, #0]
 80049c6:	429a      	cmp	r2, r3
 80049c8:	d90c      	bls.n	80049e4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80049ca:	4b64      	ldr	r3, [pc, #400]	; (8004b5c <HAL_RCC_ClockConfig+0x1b4>)
 80049cc:	683a      	ldr	r2, [r7, #0]
 80049ce:	b2d2      	uxtb	r2, r2
 80049d0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80049d2:	4b62      	ldr	r3, [pc, #392]	; (8004b5c <HAL_RCC_ClockConfig+0x1b4>)
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	f003 030f 	and.w	r3, r3, #15
 80049da:	683a      	ldr	r2, [r7, #0]
 80049dc:	429a      	cmp	r2, r3
 80049de:	d001      	beq.n	80049e4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80049e0:	2301      	movs	r3, #1
 80049e2:	e0b6      	b.n	8004b52 <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	f003 0302 	and.w	r3, r3, #2
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d020      	beq.n	8004a32 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	f003 0304 	and.w	r3, r3, #4
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d005      	beq.n	8004a08 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80049fc:	4b58      	ldr	r3, [pc, #352]	; (8004b60 <HAL_RCC_ClockConfig+0x1b8>)
 80049fe:	689b      	ldr	r3, [r3, #8]
 8004a00:	4a57      	ldr	r2, [pc, #348]	; (8004b60 <HAL_RCC_ClockConfig+0x1b8>)
 8004a02:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004a06:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	f003 0308 	and.w	r3, r3, #8
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d005      	beq.n	8004a20 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004a14:	4b52      	ldr	r3, [pc, #328]	; (8004b60 <HAL_RCC_ClockConfig+0x1b8>)
 8004a16:	689b      	ldr	r3, [r3, #8]
 8004a18:	4a51      	ldr	r2, [pc, #324]	; (8004b60 <HAL_RCC_ClockConfig+0x1b8>)
 8004a1a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004a1e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004a20:	4b4f      	ldr	r3, [pc, #316]	; (8004b60 <HAL_RCC_ClockConfig+0x1b8>)
 8004a22:	689b      	ldr	r3, [r3, #8]
 8004a24:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	689b      	ldr	r3, [r3, #8]
 8004a2c:	494c      	ldr	r1, [pc, #304]	; (8004b60 <HAL_RCC_ClockConfig+0x1b8>)
 8004a2e:	4313      	orrs	r3, r2
 8004a30:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	f003 0301 	and.w	r3, r3, #1
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d044      	beq.n	8004ac8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	685b      	ldr	r3, [r3, #4]
 8004a42:	2b01      	cmp	r3, #1
 8004a44:	d107      	bne.n	8004a56 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004a46:	4b46      	ldr	r3, [pc, #280]	; (8004b60 <HAL_RCC_ClockConfig+0x1b8>)
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d119      	bne.n	8004a86 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004a52:	2301      	movs	r3, #1
 8004a54:	e07d      	b.n	8004b52 <HAL_RCC_ClockConfig+0x1aa>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	685b      	ldr	r3, [r3, #4]
 8004a5a:	2b02      	cmp	r3, #2
 8004a5c:	d003      	beq.n	8004a66 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004a62:	2b03      	cmp	r3, #3
 8004a64:	d107      	bne.n	8004a76 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004a66:	4b3e      	ldr	r3, [pc, #248]	; (8004b60 <HAL_RCC_ClockConfig+0x1b8>)
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d109      	bne.n	8004a86 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004a72:	2301      	movs	r3, #1
 8004a74:	e06d      	b.n	8004b52 <HAL_RCC_ClockConfig+0x1aa>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004a76:	4b3a      	ldr	r3, [pc, #232]	; (8004b60 <HAL_RCC_ClockConfig+0x1b8>)
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	f003 0302 	and.w	r3, r3, #2
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d101      	bne.n	8004a86 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004a82:	2301      	movs	r3, #1
 8004a84:	e065      	b.n	8004b52 <HAL_RCC_ClockConfig+0x1aa>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004a86:	4b36      	ldr	r3, [pc, #216]	; (8004b60 <HAL_RCC_ClockConfig+0x1b8>)
 8004a88:	689b      	ldr	r3, [r3, #8]
 8004a8a:	f023 0203 	bic.w	r2, r3, #3
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	685b      	ldr	r3, [r3, #4]
 8004a92:	4933      	ldr	r1, [pc, #204]	; (8004b60 <HAL_RCC_ClockConfig+0x1b8>)
 8004a94:	4313      	orrs	r3, r2
 8004a96:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004a98:	f7fd f94e 	bl	8001d38 <HAL_GetTick>
 8004a9c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004a9e:	e00a      	b.n	8004ab6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004aa0:	f7fd f94a 	bl	8001d38 <HAL_GetTick>
 8004aa4:	4602      	mov	r2, r0
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	1ad3      	subs	r3, r2, r3
 8004aaa:	f241 3288 	movw	r2, #5000	; 0x1388
 8004aae:	4293      	cmp	r3, r2
 8004ab0:	d901      	bls.n	8004ab6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004ab2:	2303      	movs	r3, #3
 8004ab4:	e04d      	b.n	8004b52 <HAL_RCC_ClockConfig+0x1aa>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004ab6:	4b2a      	ldr	r3, [pc, #168]	; (8004b60 <HAL_RCC_ClockConfig+0x1b8>)
 8004ab8:	689b      	ldr	r3, [r3, #8]
 8004aba:	f003 020c 	and.w	r2, r3, #12
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	685b      	ldr	r3, [r3, #4]
 8004ac2:	009b      	lsls	r3, r3, #2
 8004ac4:	429a      	cmp	r2, r3
 8004ac6:	d1eb      	bne.n	8004aa0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004ac8:	4b24      	ldr	r3, [pc, #144]	; (8004b5c <HAL_RCC_ClockConfig+0x1b4>)
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	f003 030f 	and.w	r3, r3, #15
 8004ad0:	683a      	ldr	r2, [r7, #0]
 8004ad2:	429a      	cmp	r2, r3
 8004ad4:	d20c      	bcs.n	8004af0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004ad6:	4b21      	ldr	r3, [pc, #132]	; (8004b5c <HAL_RCC_ClockConfig+0x1b4>)
 8004ad8:	683a      	ldr	r2, [r7, #0]
 8004ada:	b2d2      	uxtb	r2, r2
 8004adc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004ade:	4b1f      	ldr	r3, [pc, #124]	; (8004b5c <HAL_RCC_ClockConfig+0x1b4>)
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	f003 030f 	and.w	r3, r3, #15
 8004ae6:	683a      	ldr	r2, [r7, #0]
 8004ae8:	429a      	cmp	r2, r3
 8004aea:	d001      	beq.n	8004af0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004aec:	2301      	movs	r3, #1
 8004aee:	e030      	b.n	8004b52 <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	f003 0304 	and.w	r3, r3, #4
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d008      	beq.n	8004b0e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004afc:	4b18      	ldr	r3, [pc, #96]	; (8004b60 <HAL_RCC_ClockConfig+0x1b8>)
 8004afe:	689b      	ldr	r3, [r3, #8]
 8004b00:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	68db      	ldr	r3, [r3, #12]
 8004b08:	4915      	ldr	r1, [pc, #84]	; (8004b60 <HAL_RCC_ClockConfig+0x1b8>)
 8004b0a:	4313      	orrs	r3, r2
 8004b0c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	f003 0308 	and.w	r3, r3, #8
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d009      	beq.n	8004b2e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004b1a:	4b11      	ldr	r3, [pc, #68]	; (8004b60 <HAL_RCC_ClockConfig+0x1b8>)
 8004b1c:	689b      	ldr	r3, [r3, #8]
 8004b1e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	691b      	ldr	r3, [r3, #16]
 8004b26:	00db      	lsls	r3, r3, #3
 8004b28:	490d      	ldr	r1, [pc, #52]	; (8004b60 <HAL_RCC_ClockConfig+0x1b8>)
 8004b2a:	4313      	orrs	r3, r2
 8004b2c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004b2e:	f000 f81d 	bl	8004b6c <HAL_RCC_GetSysClockFreq>
 8004b32:	4601      	mov	r1, r0
 8004b34:	4b0a      	ldr	r3, [pc, #40]	; (8004b60 <HAL_RCC_ClockConfig+0x1b8>)
 8004b36:	689b      	ldr	r3, [r3, #8]
 8004b38:	091b      	lsrs	r3, r3, #4
 8004b3a:	f003 030f 	and.w	r3, r3, #15
 8004b3e:	4a09      	ldr	r2, [pc, #36]	; (8004b64 <HAL_RCC_ClockConfig+0x1bc>)
 8004b40:	5cd3      	ldrb	r3, [r2, r3]
 8004b42:	fa21 f303 	lsr.w	r3, r1, r3
 8004b46:	4a08      	ldr	r2, [pc, #32]	; (8004b68 <HAL_RCC_ClockConfig+0x1c0>)
 8004b48:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (TICK_INT_PRIORITY);
 8004b4a:	2000      	movs	r0, #0
 8004b4c:	f7fc fc70 	bl	8001430 <HAL_InitTick>

  return HAL_OK;
 8004b50:	2300      	movs	r3, #0
}
 8004b52:	4618      	mov	r0, r3
 8004b54:	3710      	adds	r7, #16
 8004b56:	46bd      	mov	sp, r7
 8004b58:	bd80      	pop	{r7, pc}
 8004b5a:	bf00      	nop
 8004b5c:	40023c00 	.word	0x40023c00
 8004b60:	40023800 	.word	0x40023800
 8004b64:	0801b788 	.word	0x0801b788
 8004b68:	20000000 	.word	0x20000000

08004b6c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004b6c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004b6e:	b085      	sub	sp, #20
 8004b70:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004b72:	2300      	movs	r3, #0
 8004b74:	607b      	str	r3, [r7, #4]
 8004b76:	2300      	movs	r3, #0
 8004b78:	60fb      	str	r3, [r7, #12]
 8004b7a:	2300      	movs	r3, #0
 8004b7c:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8004b7e:	2300      	movs	r3, #0
 8004b80:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004b82:	4b63      	ldr	r3, [pc, #396]	; (8004d10 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004b84:	689b      	ldr	r3, [r3, #8]
 8004b86:	f003 030c 	and.w	r3, r3, #12
 8004b8a:	2b04      	cmp	r3, #4
 8004b8c:	d007      	beq.n	8004b9e <HAL_RCC_GetSysClockFreq+0x32>
 8004b8e:	2b08      	cmp	r3, #8
 8004b90:	d008      	beq.n	8004ba4 <HAL_RCC_GetSysClockFreq+0x38>
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	f040 80b4 	bne.w	8004d00 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004b98:	4b5e      	ldr	r3, [pc, #376]	; (8004d14 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8004b9a:	60bb      	str	r3, [r7, #8]
       break;
 8004b9c:	e0b3      	b.n	8004d06 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004b9e:	4b5e      	ldr	r3, [pc, #376]	; (8004d18 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8004ba0:	60bb      	str	r3, [r7, #8]
      break;
 8004ba2:	e0b0      	b.n	8004d06 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004ba4:	4b5a      	ldr	r3, [pc, #360]	; (8004d10 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004ba6:	685b      	ldr	r3, [r3, #4]
 8004ba8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004bac:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004bae:	4b58      	ldr	r3, [pc, #352]	; (8004d10 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004bb0:	685b      	ldr	r3, [r3, #4]
 8004bb2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d04a      	beq.n	8004c50 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004bba:	4b55      	ldr	r3, [pc, #340]	; (8004d10 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004bbc:	685b      	ldr	r3, [r3, #4]
 8004bbe:	099b      	lsrs	r3, r3, #6
 8004bc0:	f04f 0400 	mov.w	r4, #0
 8004bc4:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004bc8:	f04f 0200 	mov.w	r2, #0
 8004bcc:	ea03 0501 	and.w	r5, r3, r1
 8004bd0:	ea04 0602 	and.w	r6, r4, r2
 8004bd4:	4629      	mov	r1, r5
 8004bd6:	4632      	mov	r2, r6
 8004bd8:	f04f 0300 	mov.w	r3, #0
 8004bdc:	f04f 0400 	mov.w	r4, #0
 8004be0:	0154      	lsls	r4, r2, #5
 8004be2:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8004be6:	014b      	lsls	r3, r1, #5
 8004be8:	4619      	mov	r1, r3
 8004bea:	4622      	mov	r2, r4
 8004bec:	1b49      	subs	r1, r1, r5
 8004bee:	eb62 0206 	sbc.w	r2, r2, r6
 8004bf2:	f04f 0300 	mov.w	r3, #0
 8004bf6:	f04f 0400 	mov.w	r4, #0
 8004bfa:	0194      	lsls	r4, r2, #6
 8004bfc:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8004c00:	018b      	lsls	r3, r1, #6
 8004c02:	1a5b      	subs	r3, r3, r1
 8004c04:	eb64 0402 	sbc.w	r4, r4, r2
 8004c08:	f04f 0100 	mov.w	r1, #0
 8004c0c:	f04f 0200 	mov.w	r2, #0
 8004c10:	00e2      	lsls	r2, r4, #3
 8004c12:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8004c16:	00d9      	lsls	r1, r3, #3
 8004c18:	460b      	mov	r3, r1
 8004c1a:	4614      	mov	r4, r2
 8004c1c:	195b      	adds	r3, r3, r5
 8004c1e:	eb44 0406 	adc.w	r4, r4, r6
 8004c22:	f04f 0100 	mov.w	r1, #0
 8004c26:	f04f 0200 	mov.w	r2, #0
 8004c2a:	0262      	lsls	r2, r4, #9
 8004c2c:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8004c30:	0259      	lsls	r1, r3, #9
 8004c32:	460b      	mov	r3, r1
 8004c34:	4614      	mov	r4, r2
 8004c36:	4618      	mov	r0, r3
 8004c38:	4621      	mov	r1, r4
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	f04f 0400 	mov.w	r4, #0
 8004c40:	461a      	mov	r2, r3
 8004c42:	4623      	mov	r3, r4
 8004c44:	f7fb fb24 	bl	8000290 <__aeabi_uldivmod>
 8004c48:	4603      	mov	r3, r0
 8004c4a:	460c      	mov	r4, r1
 8004c4c:	60fb      	str	r3, [r7, #12]
 8004c4e:	e049      	b.n	8004ce4 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004c50:	4b2f      	ldr	r3, [pc, #188]	; (8004d10 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004c52:	685b      	ldr	r3, [r3, #4]
 8004c54:	099b      	lsrs	r3, r3, #6
 8004c56:	f04f 0400 	mov.w	r4, #0
 8004c5a:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004c5e:	f04f 0200 	mov.w	r2, #0
 8004c62:	ea03 0501 	and.w	r5, r3, r1
 8004c66:	ea04 0602 	and.w	r6, r4, r2
 8004c6a:	4629      	mov	r1, r5
 8004c6c:	4632      	mov	r2, r6
 8004c6e:	f04f 0300 	mov.w	r3, #0
 8004c72:	f04f 0400 	mov.w	r4, #0
 8004c76:	0154      	lsls	r4, r2, #5
 8004c78:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8004c7c:	014b      	lsls	r3, r1, #5
 8004c7e:	4619      	mov	r1, r3
 8004c80:	4622      	mov	r2, r4
 8004c82:	1b49      	subs	r1, r1, r5
 8004c84:	eb62 0206 	sbc.w	r2, r2, r6
 8004c88:	f04f 0300 	mov.w	r3, #0
 8004c8c:	f04f 0400 	mov.w	r4, #0
 8004c90:	0194      	lsls	r4, r2, #6
 8004c92:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8004c96:	018b      	lsls	r3, r1, #6
 8004c98:	1a5b      	subs	r3, r3, r1
 8004c9a:	eb64 0402 	sbc.w	r4, r4, r2
 8004c9e:	f04f 0100 	mov.w	r1, #0
 8004ca2:	f04f 0200 	mov.w	r2, #0
 8004ca6:	00e2      	lsls	r2, r4, #3
 8004ca8:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8004cac:	00d9      	lsls	r1, r3, #3
 8004cae:	460b      	mov	r3, r1
 8004cb0:	4614      	mov	r4, r2
 8004cb2:	195b      	adds	r3, r3, r5
 8004cb4:	eb44 0406 	adc.w	r4, r4, r6
 8004cb8:	f04f 0100 	mov.w	r1, #0
 8004cbc:	f04f 0200 	mov.w	r2, #0
 8004cc0:	02a2      	lsls	r2, r4, #10
 8004cc2:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8004cc6:	0299      	lsls	r1, r3, #10
 8004cc8:	460b      	mov	r3, r1
 8004cca:	4614      	mov	r4, r2
 8004ccc:	4618      	mov	r0, r3
 8004cce:	4621      	mov	r1, r4
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	f04f 0400 	mov.w	r4, #0
 8004cd6:	461a      	mov	r2, r3
 8004cd8:	4623      	mov	r3, r4
 8004cda:	f7fb fad9 	bl	8000290 <__aeabi_uldivmod>
 8004cde:	4603      	mov	r3, r0
 8004ce0:	460c      	mov	r4, r1
 8004ce2:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004ce4:	4b0a      	ldr	r3, [pc, #40]	; (8004d10 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004ce6:	685b      	ldr	r3, [r3, #4]
 8004ce8:	0c1b      	lsrs	r3, r3, #16
 8004cea:	f003 0303 	and.w	r3, r3, #3
 8004cee:	3301      	adds	r3, #1
 8004cf0:	005b      	lsls	r3, r3, #1
 8004cf2:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8004cf4:	68fa      	ldr	r2, [r7, #12]
 8004cf6:	683b      	ldr	r3, [r7, #0]
 8004cf8:	fbb2 f3f3 	udiv	r3, r2, r3
 8004cfc:	60bb      	str	r3, [r7, #8]
      break;
 8004cfe:	e002      	b.n	8004d06 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004d00:	4b04      	ldr	r3, [pc, #16]	; (8004d14 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8004d02:	60bb      	str	r3, [r7, #8]
      break;
 8004d04:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004d06:	68bb      	ldr	r3, [r7, #8]
}
 8004d08:	4618      	mov	r0, r3
 8004d0a:	3714      	adds	r7, #20
 8004d0c:	46bd      	mov	sp, r7
 8004d0e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004d10:	40023800 	.word	0x40023800
 8004d14:	00f42400 	.word	0x00f42400
 8004d18:	007a1200 	.word	0x007a1200

08004d1c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004d1c:	b480      	push	{r7}
 8004d1e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004d20:	4b03      	ldr	r3, [pc, #12]	; (8004d30 <HAL_RCC_GetHCLKFreq+0x14>)
 8004d22:	681b      	ldr	r3, [r3, #0]
}
 8004d24:	4618      	mov	r0, r3
 8004d26:	46bd      	mov	sp, r7
 8004d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d2c:	4770      	bx	lr
 8004d2e:	bf00      	nop
 8004d30:	20000000 	.word	0x20000000

08004d34 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004d34:	b580      	push	{r7, lr}
 8004d36:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004d38:	f7ff fff0 	bl	8004d1c <HAL_RCC_GetHCLKFreq>
 8004d3c:	4601      	mov	r1, r0
 8004d3e:	4b05      	ldr	r3, [pc, #20]	; (8004d54 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004d40:	689b      	ldr	r3, [r3, #8]
 8004d42:	0b5b      	lsrs	r3, r3, #13
 8004d44:	f003 0307 	and.w	r3, r3, #7
 8004d48:	4a03      	ldr	r2, [pc, #12]	; (8004d58 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004d4a:	5cd3      	ldrb	r3, [r2, r3]
 8004d4c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004d50:	4618      	mov	r0, r3
 8004d52:	bd80      	pop	{r7, pc}
 8004d54:	40023800 	.word	0x40023800
 8004d58:	0801b798 	.word	0x0801b798

08004d5c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004d5c:	b480      	push	{r7}
 8004d5e:	b083      	sub	sp, #12
 8004d60:	af00      	add	r7, sp, #0
 8004d62:	6078      	str	r0, [r7, #4]
 8004d64:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	220f      	movs	r2, #15
 8004d6a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004d6c:	4b12      	ldr	r3, [pc, #72]	; (8004db8 <HAL_RCC_GetClockConfig+0x5c>)
 8004d6e:	689b      	ldr	r3, [r3, #8]
 8004d70:	f003 0203 	and.w	r2, r3, #3
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8004d78:	4b0f      	ldr	r3, [pc, #60]	; (8004db8 <HAL_RCC_GetClockConfig+0x5c>)
 8004d7a:	689b      	ldr	r3, [r3, #8]
 8004d7c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8004d84:	4b0c      	ldr	r3, [pc, #48]	; (8004db8 <HAL_RCC_GetClockConfig+0x5c>)
 8004d86:	689b      	ldr	r3, [r3, #8]
 8004d88:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8004d90:	4b09      	ldr	r3, [pc, #36]	; (8004db8 <HAL_RCC_GetClockConfig+0x5c>)
 8004d92:	689b      	ldr	r3, [r3, #8]
 8004d94:	08db      	lsrs	r3, r3, #3
 8004d96:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8004d9e:	4b07      	ldr	r3, [pc, #28]	; (8004dbc <HAL_RCC_GetClockConfig+0x60>)
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	f003 020f 	and.w	r2, r3, #15
 8004da6:	683b      	ldr	r3, [r7, #0]
 8004da8:	601a      	str	r2, [r3, #0]
}
 8004daa:	bf00      	nop
 8004dac:	370c      	adds	r7, #12
 8004dae:	46bd      	mov	sp, r7
 8004db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004db4:	4770      	bx	lr
 8004db6:	bf00      	nop
 8004db8:	40023800 	.word	0x40023800
 8004dbc:	40023c00 	.word	0x40023c00

08004dc0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004dc0:	b580      	push	{r7, lr}
 8004dc2:	b082      	sub	sp, #8
 8004dc4:	af00      	add	r7, sp, #0
 8004dc6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d101      	bne.n	8004dd2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004dce:	2301      	movs	r3, #1
 8004dd0:	e01d      	b.n	8004e0e <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004dd8:	b2db      	uxtb	r3, r3
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d106      	bne.n	8004dec <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	2200      	movs	r2, #0
 8004de2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004de6:	6878      	ldr	r0, [r7, #4]
 8004de8:	f000 f815 	bl	8004e16 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	2202      	movs	r2, #2
 8004df0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681a      	ldr	r2, [r3, #0]
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	3304      	adds	r3, #4
 8004dfc:	4619      	mov	r1, r3
 8004dfe:	4610      	mov	r0, r2
 8004e00:	f000 f968 	bl	80050d4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	2201      	movs	r2, #1
 8004e08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004e0c:	2300      	movs	r3, #0
}
 8004e0e:	4618      	mov	r0, r3
 8004e10:	3708      	adds	r7, #8
 8004e12:	46bd      	mov	sp, r7
 8004e14:	bd80      	pop	{r7, pc}

08004e16 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8004e16:	b480      	push	{r7}
 8004e18:	b083      	sub	sp, #12
 8004e1a:	af00      	add	r7, sp, #0
 8004e1c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8004e1e:	bf00      	nop
 8004e20:	370c      	adds	r7, #12
 8004e22:	46bd      	mov	sp, r7
 8004e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e28:	4770      	bx	lr

08004e2a <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004e2a:	b480      	push	{r7}
 8004e2c:	b085      	sub	sp, #20
 8004e2e:	af00      	add	r7, sp, #0
 8004e30:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	68da      	ldr	r2, [r3, #12]
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	f042 0201 	orr.w	r2, r2, #1
 8004e40:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	689b      	ldr	r3, [r3, #8]
 8004e48:	f003 0307 	and.w	r3, r3, #7
 8004e4c:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	2b06      	cmp	r3, #6
 8004e52:	d007      	beq.n	8004e64 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	681a      	ldr	r2, [r3, #0]
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	f042 0201 	orr.w	r2, r2, #1
 8004e62:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004e64:	2300      	movs	r3, #0
}
 8004e66:	4618      	mov	r0, r3
 8004e68:	3714      	adds	r7, #20
 8004e6a:	46bd      	mov	sp, r7
 8004e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e70:	4770      	bx	lr

08004e72 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004e72:	b580      	push	{r7, lr}
 8004e74:	b082      	sub	sp, #8
 8004e76:	af00      	add	r7, sp, #0
 8004e78:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	691b      	ldr	r3, [r3, #16]
 8004e80:	f003 0302 	and.w	r3, r3, #2
 8004e84:	2b02      	cmp	r3, #2
 8004e86:	d122      	bne.n	8004ece <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	68db      	ldr	r3, [r3, #12]
 8004e8e:	f003 0302 	and.w	r3, r3, #2
 8004e92:	2b02      	cmp	r3, #2
 8004e94:	d11b      	bne.n	8004ece <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	f06f 0202 	mvn.w	r2, #2
 8004e9e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	2201      	movs	r2, #1
 8004ea4:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	699b      	ldr	r3, [r3, #24]
 8004eac:	f003 0303 	and.w	r3, r3, #3
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d003      	beq.n	8004ebc <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004eb4:	6878      	ldr	r0, [r7, #4]
 8004eb6:	f000 f8ee 	bl	8005096 <HAL_TIM_IC_CaptureCallback>
 8004eba:	e005      	b.n	8004ec8 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004ebc:	6878      	ldr	r0, [r7, #4]
 8004ebe:	f000 f8e0 	bl	8005082 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ec2:	6878      	ldr	r0, [r7, #4]
 8004ec4:	f000 f8f1 	bl	80050aa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	2200      	movs	r2, #0
 8004ecc:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	691b      	ldr	r3, [r3, #16]
 8004ed4:	f003 0304 	and.w	r3, r3, #4
 8004ed8:	2b04      	cmp	r3, #4
 8004eda:	d122      	bne.n	8004f22 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	68db      	ldr	r3, [r3, #12]
 8004ee2:	f003 0304 	and.w	r3, r3, #4
 8004ee6:	2b04      	cmp	r3, #4
 8004ee8:	d11b      	bne.n	8004f22 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	f06f 0204 	mvn.w	r2, #4
 8004ef2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	2202      	movs	r2, #2
 8004ef8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	699b      	ldr	r3, [r3, #24]
 8004f00:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d003      	beq.n	8004f10 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004f08:	6878      	ldr	r0, [r7, #4]
 8004f0a:	f000 f8c4 	bl	8005096 <HAL_TIM_IC_CaptureCallback>
 8004f0e:	e005      	b.n	8004f1c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004f10:	6878      	ldr	r0, [r7, #4]
 8004f12:	f000 f8b6 	bl	8005082 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004f16:	6878      	ldr	r0, [r7, #4]
 8004f18:	f000 f8c7 	bl	80050aa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	2200      	movs	r2, #0
 8004f20:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	691b      	ldr	r3, [r3, #16]
 8004f28:	f003 0308 	and.w	r3, r3, #8
 8004f2c:	2b08      	cmp	r3, #8
 8004f2e:	d122      	bne.n	8004f76 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	68db      	ldr	r3, [r3, #12]
 8004f36:	f003 0308 	and.w	r3, r3, #8
 8004f3a:	2b08      	cmp	r3, #8
 8004f3c:	d11b      	bne.n	8004f76 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	f06f 0208 	mvn.w	r2, #8
 8004f46:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	2204      	movs	r2, #4
 8004f4c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	69db      	ldr	r3, [r3, #28]
 8004f54:	f003 0303 	and.w	r3, r3, #3
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d003      	beq.n	8004f64 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004f5c:	6878      	ldr	r0, [r7, #4]
 8004f5e:	f000 f89a 	bl	8005096 <HAL_TIM_IC_CaptureCallback>
 8004f62:	e005      	b.n	8004f70 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004f64:	6878      	ldr	r0, [r7, #4]
 8004f66:	f000 f88c 	bl	8005082 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004f6a:	6878      	ldr	r0, [r7, #4]
 8004f6c:	f000 f89d 	bl	80050aa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	2200      	movs	r2, #0
 8004f74:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	691b      	ldr	r3, [r3, #16]
 8004f7c:	f003 0310 	and.w	r3, r3, #16
 8004f80:	2b10      	cmp	r3, #16
 8004f82:	d122      	bne.n	8004fca <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	68db      	ldr	r3, [r3, #12]
 8004f8a:	f003 0310 	and.w	r3, r3, #16
 8004f8e:	2b10      	cmp	r3, #16
 8004f90:	d11b      	bne.n	8004fca <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	f06f 0210 	mvn.w	r2, #16
 8004f9a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	2208      	movs	r2, #8
 8004fa0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	69db      	ldr	r3, [r3, #28]
 8004fa8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d003      	beq.n	8004fb8 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004fb0:	6878      	ldr	r0, [r7, #4]
 8004fb2:	f000 f870 	bl	8005096 <HAL_TIM_IC_CaptureCallback>
 8004fb6:	e005      	b.n	8004fc4 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004fb8:	6878      	ldr	r0, [r7, #4]
 8004fba:	f000 f862 	bl	8005082 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004fbe:	6878      	ldr	r0, [r7, #4]
 8004fc0:	f000 f873 	bl	80050aa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	2200      	movs	r2, #0
 8004fc8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	691b      	ldr	r3, [r3, #16]
 8004fd0:	f003 0301 	and.w	r3, r3, #1
 8004fd4:	2b01      	cmp	r3, #1
 8004fd6:	d10e      	bne.n	8004ff6 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	68db      	ldr	r3, [r3, #12]
 8004fde:	f003 0301 	and.w	r3, r3, #1
 8004fe2:	2b01      	cmp	r3, #1
 8004fe4:	d107      	bne.n	8004ff6 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	f06f 0201 	mvn.w	r2, #1
 8004fee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004ff0:	6878      	ldr	r0, [r7, #4]
 8004ff2:	f7fc f9d7 	bl	80013a4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	691b      	ldr	r3, [r3, #16]
 8004ffc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005000:	2b80      	cmp	r3, #128	; 0x80
 8005002:	d10e      	bne.n	8005022 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	68db      	ldr	r3, [r3, #12]
 800500a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800500e:	2b80      	cmp	r3, #128	; 0x80
 8005010:	d107      	bne.n	8005022 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800501a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800501c:	6878      	ldr	r0, [r7, #4]
 800501e:	f000 f903 	bl	8005228 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	691b      	ldr	r3, [r3, #16]
 8005028:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800502c:	2b40      	cmp	r3, #64	; 0x40
 800502e:	d10e      	bne.n	800504e <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	68db      	ldr	r3, [r3, #12]
 8005036:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800503a:	2b40      	cmp	r3, #64	; 0x40
 800503c:	d107      	bne.n	800504e <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005046:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005048:	6878      	ldr	r0, [r7, #4]
 800504a:	f000 f838 	bl	80050be <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	691b      	ldr	r3, [r3, #16]
 8005054:	f003 0320 	and.w	r3, r3, #32
 8005058:	2b20      	cmp	r3, #32
 800505a:	d10e      	bne.n	800507a <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	68db      	ldr	r3, [r3, #12]
 8005062:	f003 0320 	and.w	r3, r3, #32
 8005066:	2b20      	cmp	r3, #32
 8005068:	d107      	bne.n	800507a <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	f06f 0220 	mvn.w	r2, #32
 8005072:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005074:	6878      	ldr	r0, [r7, #4]
 8005076:	f000 f8cd 	bl	8005214 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800507a:	bf00      	nop
 800507c:	3708      	adds	r7, #8
 800507e:	46bd      	mov	sp, r7
 8005080:	bd80      	pop	{r7, pc}

08005082 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005082:	b480      	push	{r7}
 8005084:	b083      	sub	sp, #12
 8005086:	af00      	add	r7, sp, #0
 8005088:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800508a:	bf00      	nop
 800508c:	370c      	adds	r7, #12
 800508e:	46bd      	mov	sp, r7
 8005090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005094:	4770      	bx	lr

08005096 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005096:	b480      	push	{r7}
 8005098:	b083      	sub	sp, #12
 800509a:	af00      	add	r7, sp, #0
 800509c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800509e:	bf00      	nop
 80050a0:	370c      	adds	r7, #12
 80050a2:	46bd      	mov	sp, r7
 80050a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050a8:	4770      	bx	lr

080050aa <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80050aa:	b480      	push	{r7}
 80050ac:	b083      	sub	sp, #12
 80050ae:	af00      	add	r7, sp, #0
 80050b0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80050b2:	bf00      	nop
 80050b4:	370c      	adds	r7, #12
 80050b6:	46bd      	mov	sp, r7
 80050b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050bc:	4770      	bx	lr

080050be <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80050be:	b480      	push	{r7}
 80050c0:	b083      	sub	sp, #12
 80050c2:	af00      	add	r7, sp, #0
 80050c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80050c6:	bf00      	nop
 80050c8:	370c      	adds	r7, #12
 80050ca:	46bd      	mov	sp, r7
 80050cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050d0:	4770      	bx	lr
	...

080050d4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80050d4:	b480      	push	{r7}
 80050d6:	b085      	sub	sp, #20
 80050d8:	af00      	add	r7, sp, #0
 80050da:	6078      	str	r0, [r7, #4]
 80050dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	4a40      	ldr	r2, [pc, #256]	; (80051e8 <TIM_Base_SetConfig+0x114>)
 80050e8:	4293      	cmp	r3, r2
 80050ea:	d013      	beq.n	8005114 <TIM_Base_SetConfig+0x40>
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80050f2:	d00f      	beq.n	8005114 <TIM_Base_SetConfig+0x40>
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	4a3d      	ldr	r2, [pc, #244]	; (80051ec <TIM_Base_SetConfig+0x118>)
 80050f8:	4293      	cmp	r3, r2
 80050fa:	d00b      	beq.n	8005114 <TIM_Base_SetConfig+0x40>
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	4a3c      	ldr	r2, [pc, #240]	; (80051f0 <TIM_Base_SetConfig+0x11c>)
 8005100:	4293      	cmp	r3, r2
 8005102:	d007      	beq.n	8005114 <TIM_Base_SetConfig+0x40>
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	4a3b      	ldr	r2, [pc, #236]	; (80051f4 <TIM_Base_SetConfig+0x120>)
 8005108:	4293      	cmp	r3, r2
 800510a:	d003      	beq.n	8005114 <TIM_Base_SetConfig+0x40>
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	4a3a      	ldr	r2, [pc, #232]	; (80051f8 <TIM_Base_SetConfig+0x124>)
 8005110:	4293      	cmp	r3, r2
 8005112:	d108      	bne.n	8005126 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800511a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800511c:	683b      	ldr	r3, [r7, #0]
 800511e:	685b      	ldr	r3, [r3, #4]
 8005120:	68fa      	ldr	r2, [r7, #12]
 8005122:	4313      	orrs	r3, r2
 8005124:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	4a2f      	ldr	r2, [pc, #188]	; (80051e8 <TIM_Base_SetConfig+0x114>)
 800512a:	4293      	cmp	r3, r2
 800512c:	d02b      	beq.n	8005186 <TIM_Base_SetConfig+0xb2>
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005134:	d027      	beq.n	8005186 <TIM_Base_SetConfig+0xb2>
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	4a2c      	ldr	r2, [pc, #176]	; (80051ec <TIM_Base_SetConfig+0x118>)
 800513a:	4293      	cmp	r3, r2
 800513c:	d023      	beq.n	8005186 <TIM_Base_SetConfig+0xb2>
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	4a2b      	ldr	r2, [pc, #172]	; (80051f0 <TIM_Base_SetConfig+0x11c>)
 8005142:	4293      	cmp	r3, r2
 8005144:	d01f      	beq.n	8005186 <TIM_Base_SetConfig+0xb2>
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	4a2a      	ldr	r2, [pc, #168]	; (80051f4 <TIM_Base_SetConfig+0x120>)
 800514a:	4293      	cmp	r3, r2
 800514c:	d01b      	beq.n	8005186 <TIM_Base_SetConfig+0xb2>
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	4a29      	ldr	r2, [pc, #164]	; (80051f8 <TIM_Base_SetConfig+0x124>)
 8005152:	4293      	cmp	r3, r2
 8005154:	d017      	beq.n	8005186 <TIM_Base_SetConfig+0xb2>
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	4a28      	ldr	r2, [pc, #160]	; (80051fc <TIM_Base_SetConfig+0x128>)
 800515a:	4293      	cmp	r3, r2
 800515c:	d013      	beq.n	8005186 <TIM_Base_SetConfig+0xb2>
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	4a27      	ldr	r2, [pc, #156]	; (8005200 <TIM_Base_SetConfig+0x12c>)
 8005162:	4293      	cmp	r3, r2
 8005164:	d00f      	beq.n	8005186 <TIM_Base_SetConfig+0xb2>
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	4a26      	ldr	r2, [pc, #152]	; (8005204 <TIM_Base_SetConfig+0x130>)
 800516a:	4293      	cmp	r3, r2
 800516c:	d00b      	beq.n	8005186 <TIM_Base_SetConfig+0xb2>
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	4a25      	ldr	r2, [pc, #148]	; (8005208 <TIM_Base_SetConfig+0x134>)
 8005172:	4293      	cmp	r3, r2
 8005174:	d007      	beq.n	8005186 <TIM_Base_SetConfig+0xb2>
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	4a24      	ldr	r2, [pc, #144]	; (800520c <TIM_Base_SetConfig+0x138>)
 800517a:	4293      	cmp	r3, r2
 800517c:	d003      	beq.n	8005186 <TIM_Base_SetConfig+0xb2>
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	4a23      	ldr	r2, [pc, #140]	; (8005210 <TIM_Base_SetConfig+0x13c>)
 8005182:	4293      	cmp	r3, r2
 8005184:	d108      	bne.n	8005198 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800518c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800518e:	683b      	ldr	r3, [r7, #0]
 8005190:	68db      	ldr	r3, [r3, #12]
 8005192:	68fa      	ldr	r2, [r7, #12]
 8005194:	4313      	orrs	r3, r2
 8005196:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800519e:	683b      	ldr	r3, [r7, #0]
 80051a0:	695b      	ldr	r3, [r3, #20]
 80051a2:	4313      	orrs	r3, r2
 80051a4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	68fa      	ldr	r2, [r7, #12]
 80051aa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80051ac:	683b      	ldr	r3, [r7, #0]
 80051ae:	689a      	ldr	r2, [r3, #8]
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80051b4:	683b      	ldr	r3, [r7, #0]
 80051b6:	681a      	ldr	r2, [r3, #0]
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	4a0a      	ldr	r2, [pc, #40]	; (80051e8 <TIM_Base_SetConfig+0x114>)
 80051c0:	4293      	cmp	r3, r2
 80051c2:	d003      	beq.n	80051cc <TIM_Base_SetConfig+0xf8>
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	4a0c      	ldr	r2, [pc, #48]	; (80051f8 <TIM_Base_SetConfig+0x124>)
 80051c8:	4293      	cmp	r3, r2
 80051ca:	d103      	bne.n	80051d4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80051cc:	683b      	ldr	r3, [r7, #0]
 80051ce:	691a      	ldr	r2, [r3, #16]
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	2201      	movs	r2, #1
 80051d8:	615a      	str	r2, [r3, #20]
}
 80051da:	bf00      	nop
 80051dc:	3714      	adds	r7, #20
 80051de:	46bd      	mov	sp, r7
 80051e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051e4:	4770      	bx	lr
 80051e6:	bf00      	nop
 80051e8:	40010000 	.word	0x40010000
 80051ec:	40000400 	.word	0x40000400
 80051f0:	40000800 	.word	0x40000800
 80051f4:	40000c00 	.word	0x40000c00
 80051f8:	40010400 	.word	0x40010400
 80051fc:	40014000 	.word	0x40014000
 8005200:	40014400 	.word	0x40014400
 8005204:	40014800 	.word	0x40014800
 8005208:	40001800 	.word	0x40001800
 800520c:	40001c00 	.word	0x40001c00
 8005210:	40002000 	.word	0x40002000

08005214 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005214:	b480      	push	{r7}
 8005216:	b083      	sub	sp, #12
 8005218:	af00      	add	r7, sp, #0
 800521a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800521c:	bf00      	nop
 800521e:	370c      	adds	r7, #12
 8005220:	46bd      	mov	sp, r7
 8005222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005226:	4770      	bx	lr

08005228 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005228:	b480      	push	{r7}
 800522a:	b083      	sub	sp, #12
 800522c:	af00      	add	r7, sp, #0
 800522e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005230:	bf00      	nop
 8005232:	370c      	adds	r7, #12
 8005234:	46bd      	mov	sp, r7
 8005236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800523a:	4770      	bx	lr

0800523c <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 800523c:	b480      	push	{r7}
 800523e:	b089      	sub	sp, #36	; 0x24
 8005240:	af00      	add	r7, sp, #0
 8005242:	60f8      	str	r0, [r7, #12]
 8005244:	60b9      	str	r1, [r7, #8]
 8005246:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	681a      	ldr	r2, [r3, #0]
 800524c:	68bb      	ldr	r3, [r7, #8]
 800524e:	617b      	str	r3, [r7, #20]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005250:	697b      	ldr	r3, [r7, #20]
 8005252:	fa93 f3a3 	rbit	r3, r3
 8005256:	613b      	str	r3, [r7, #16]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8005258:	693b      	ldr	r3, [r7, #16]
 800525a:	fab3 f383 	clz	r3, r3
 800525e:	b2db      	uxtb	r3, r3
 8005260:	005b      	lsls	r3, r3, #1
 8005262:	2103      	movs	r1, #3
 8005264:	fa01 f303 	lsl.w	r3, r1, r3
 8005268:	43db      	mvns	r3, r3
 800526a:	401a      	ands	r2, r3
 800526c:	68bb      	ldr	r3, [r7, #8]
 800526e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005270:	69fb      	ldr	r3, [r7, #28]
 8005272:	fa93 f3a3 	rbit	r3, r3
 8005276:	61bb      	str	r3, [r7, #24]
  return result;
 8005278:	69bb      	ldr	r3, [r7, #24]
 800527a:	fab3 f383 	clz	r3, r3
 800527e:	b2db      	uxtb	r3, r3
 8005280:	005b      	lsls	r3, r3, #1
 8005282:	6879      	ldr	r1, [r7, #4]
 8005284:	fa01 f303 	lsl.w	r3, r1, r3
 8005288:	431a      	orrs	r2, r3
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	601a      	str	r2, [r3, #0]
}
 800528e:	bf00      	nop
 8005290:	3724      	adds	r7, #36	; 0x24
 8005292:	46bd      	mov	sp, r7
 8005294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005298:	4770      	bx	lr

0800529a <LL_GPIO_SetPinOutputType>:
  *         @arg @ref LL_GPIO_OUTPUT_PUSHPULL
  *         @arg @ref LL_GPIO_OUTPUT_OPENDRAIN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinOutputType(GPIO_TypeDef *GPIOx, uint32_t PinMask, uint32_t OutputType)
{
 800529a:	b480      	push	{r7}
 800529c:	b085      	sub	sp, #20
 800529e:	af00      	add	r7, sp, #0
 80052a0:	60f8      	str	r0, [r7, #12]
 80052a2:	60b9      	str	r1, [r7, #8]
 80052a4:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	685a      	ldr	r2, [r3, #4]
 80052aa:	68bb      	ldr	r3, [r7, #8]
 80052ac:	43db      	mvns	r3, r3
 80052ae:	401a      	ands	r2, r3
 80052b0:	68bb      	ldr	r3, [r7, #8]
 80052b2:	6879      	ldr	r1, [r7, #4]
 80052b4:	fb01 f303 	mul.w	r3, r1, r3
 80052b8:	431a      	orrs	r2, r3
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	605a      	str	r2, [r3, #4]
}
 80052be:	bf00      	nop
 80052c0:	3714      	adds	r7, #20
 80052c2:	46bd      	mov	sp, r7
 80052c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052c8:	4770      	bx	lr

080052ca <LL_GPIO_SetPinSpeed>:
  *         @arg @ref LL_GPIO_SPEED_FREQ_HIGH
  *         @arg @ref LL_GPIO_SPEED_FREQ_VERY_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
{
 80052ca:	b480      	push	{r7}
 80052cc:	b089      	sub	sp, #36	; 0x24
 80052ce:	af00      	add	r7, sp, #0
 80052d0:	60f8      	str	r0, [r7, #12]
 80052d2:	60b9      	str	r1, [r7, #8]
 80052d4:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	689a      	ldr	r2, [r3, #8]
 80052da:	68bb      	ldr	r3, [r7, #8]
 80052dc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80052de:	697b      	ldr	r3, [r7, #20]
 80052e0:	fa93 f3a3 	rbit	r3, r3
 80052e4:	613b      	str	r3, [r7, #16]
  return result;
 80052e6:	693b      	ldr	r3, [r7, #16]
 80052e8:	fab3 f383 	clz	r3, r3
 80052ec:	b2db      	uxtb	r3, r3
 80052ee:	005b      	lsls	r3, r3, #1
 80052f0:	2103      	movs	r1, #3
 80052f2:	fa01 f303 	lsl.w	r3, r1, r3
 80052f6:	43db      	mvns	r3, r3
 80052f8:	401a      	ands	r2, r3
 80052fa:	68bb      	ldr	r3, [r7, #8]
 80052fc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80052fe:	69fb      	ldr	r3, [r7, #28]
 8005300:	fa93 f3a3 	rbit	r3, r3
 8005304:	61bb      	str	r3, [r7, #24]
  return result;
 8005306:	69bb      	ldr	r3, [r7, #24]
 8005308:	fab3 f383 	clz	r3, r3
 800530c:	b2db      	uxtb	r3, r3
 800530e:	005b      	lsls	r3, r3, #1
 8005310:	6879      	ldr	r1, [r7, #4]
 8005312:	fa01 f303 	lsl.w	r3, r1, r3
 8005316:	431a      	orrs	r2, r3
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	609a      	str	r2, [r3, #8]
             (Speed << (POSITION_VAL(Pin) * 2U)));
}
 800531c:	bf00      	nop
 800531e:	3724      	adds	r7, #36	; 0x24
 8005320:	46bd      	mov	sp, r7
 8005322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005326:	4770      	bx	lr

08005328 <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 8005328:	b480      	push	{r7}
 800532a:	b089      	sub	sp, #36	; 0x24
 800532c:	af00      	add	r7, sp, #0
 800532e:	60f8      	str	r0, [r7, #12]
 8005330:	60b9      	str	r1, [r7, #8]
 8005332:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	68da      	ldr	r2, [r3, #12]
 8005338:	68bb      	ldr	r3, [r7, #8]
 800533a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800533c:	697b      	ldr	r3, [r7, #20]
 800533e:	fa93 f3a3 	rbit	r3, r3
 8005342:	613b      	str	r3, [r7, #16]
  return result;
 8005344:	693b      	ldr	r3, [r7, #16]
 8005346:	fab3 f383 	clz	r3, r3
 800534a:	b2db      	uxtb	r3, r3
 800534c:	005b      	lsls	r3, r3, #1
 800534e:	2103      	movs	r1, #3
 8005350:	fa01 f303 	lsl.w	r3, r1, r3
 8005354:	43db      	mvns	r3, r3
 8005356:	401a      	ands	r2, r3
 8005358:	68bb      	ldr	r3, [r7, #8]
 800535a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800535c:	69fb      	ldr	r3, [r7, #28]
 800535e:	fa93 f3a3 	rbit	r3, r3
 8005362:	61bb      	str	r3, [r7, #24]
  return result;
 8005364:	69bb      	ldr	r3, [r7, #24]
 8005366:	fab3 f383 	clz	r3, r3
 800536a:	b2db      	uxtb	r3, r3
 800536c:	005b      	lsls	r3, r3, #1
 800536e:	6879      	ldr	r1, [r7, #4]
 8005370:	fa01 f303 	lsl.w	r3, r1, r3
 8005374:	431a      	orrs	r2, r3
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	60da      	str	r2, [r3, #12]
}
 800537a:	bf00      	nop
 800537c:	3724      	adds	r7, #36	; 0x24
 800537e:	46bd      	mov	sp, r7
 8005380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005384:	4770      	bx	lr

08005386 <LL_GPIO_SetAFPin_0_7>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_0_7(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 8005386:	b480      	push	{r7}
 8005388:	b089      	sub	sp, #36	; 0x24
 800538a:	af00      	add	r7, sp, #0
 800538c:	60f8      	str	r0, [r7, #12]
 800538e:	60b9      	str	r1, [r7, #8]
 8005390:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	6a1a      	ldr	r2, [r3, #32]
 8005396:	68bb      	ldr	r3, [r7, #8]
 8005398:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800539a:	697b      	ldr	r3, [r7, #20]
 800539c:	fa93 f3a3 	rbit	r3, r3
 80053a0:	613b      	str	r3, [r7, #16]
  return result;
 80053a2:	693b      	ldr	r3, [r7, #16]
 80053a4:	fab3 f383 	clz	r3, r3
 80053a8:	b2db      	uxtb	r3, r3
 80053aa:	009b      	lsls	r3, r3, #2
 80053ac:	210f      	movs	r1, #15
 80053ae:	fa01 f303 	lsl.w	r3, r1, r3
 80053b2:	43db      	mvns	r3, r3
 80053b4:	401a      	ands	r2, r3
 80053b6:	68bb      	ldr	r3, [r7, #8]
 80053b8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80053ba:	69fb      	ldr	r3, [r7, #28]
 80053bc:	fa93 f3a3 	rbit	r3, r3
 80053c0:	61bb      	str	r3, [r7, #24]
  return result;
 80053c2:	69bb      	ldr	r3, [r7, #24]
 80053c4:	fab3 f383 	clz	r3, r3
 80053c8:	b2db      	uxtb	r3, r3
 80053ca:	009b      	lsls	r3, r3, #2
 80053cc:	6879      	ldr	r1, [r7, #4]
 80053ce:	fa01 f303 	lsl.w	r3, r1, r3
 80053d2:	431a      	orrs	r2, r3
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	621a      	str	r2, [r3, #32]
             (Alternate << (POSITION_VAL(Pin) * 4U)));
}
 80053d8:	bf00      	nop
 80053da:	3724      	adds	r7, #36	; 0x24
 80053dc:	46bd      	mov	sp, r7
 80053de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053e2:	4770      	bx	lr

080053e4 <LL_GPIO_SetAFPin_8_15>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_8_15(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 80053e4:	b480      	push	{r7}
 80053e6:	b089      	sub	sp, #36	; 0x24
 80053e8:	af00      	add	r7, sp, #0
 80053ea:	60f8      	str	r0, [r7, #12]
 80053ec:	60b9      	str	r1, [r7, #8]
 80053ee:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80053f4:	68bb      	ldr	r3, [r7, #8]
 80053f6:	0a1b      	lsrs	r3, r3, #8
 80053f8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80053fa:	697b      	ldr	r3, [r7, #20]
 80053fc:	fa93 f3a3 	rbit	r3, r3
 8005400:	613b      	str	r3, [r7, #16]
  return result;
 8005402:	693b      	ldr	r3, [r7, #16]
 8005404:	fab3 f383 	clz	r3, r3
 8005408:	b2db      	uxtb	r3, r3
 800540a:	009b      	lsls	r3, r3, #2
 800540c:	210f      	movs	r1, #15
 800540e:	fa01 f303 	lsl.w	r3, r1, r3
 8005412:	43db      	mvns	r3, r3
 8005414:	401a      	ands	r2, r3
 8005416:	68bb      	ldr	r3, [r7, #8]
 8005418:	0a1b      	lsrs	r3, r3, #8
 800541a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800541c:	69fb      	ldr	r3, [r7, #28]
 800541e:	fa93 f3a3 	rbit	r3, r3
 8005422:	61bb      	str	r3, [r7, #24]
  return result;
 8005424:	69bb      	ldr	r3, [r7, #24]
 8005426:	fab3 f383 	clz	r3, r3
 800542a:	b2db      	uxtb	r3, r3
 800542c:	009b      	lsls	r3, r3, #2
 800542e:	6879      	ldr	r1, [r7, #4]
 8005430:	fa01 f303 	lsl.w	r3, r1, r3
 8005434:	431a      	orrs	r2, r3
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	625a      	str	r2, [r3, #36]	; 0x24
             (Alternate << (POSITION_VAL(Pin >> 8U) * 4U)));
}
 800543a:	bf00      	nop
 800543c:	3724      	adds	r7, #36	; 0x24
 800543e:	46bd      	mov	sp, r7
 8005440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005444:	4770      	bx	lr

08005446 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8005446:	b580      	push	{r7, lr}
 8005448:	b088      	sub	sp, #32
 800544a:	af00      	add	r7, sp, #0
 800544c:	6078      	str	r0, [r7, #4]
 800544e:	6039      	str	r1, [r7, #0]
  uint32_t pinpos     = 0x00000000U;
 8005450:	2300      	movs	r3, #0
 8005452:	61fb      	str	r3, [r7, #28]
  uint32_t currentpin = 0x00000000U;
 8005454:	2300      	movs	r3, #0
 8005456:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8005458:	683b      	ldr	r3, [r7, #0]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800545e:	697b      	ldr	r3, [r7, #20]
 8005460:	fa93 f3a3 	rbit	r3, r3
 8005464:	613b      	str	r3, [r7, #16]
  return result;
 8005466:	693b      	ldr	r3, [r7, #16]
 8005468:	fab3 f383 	clz	r3, r3
 800546c:	b2db      	uxtb	r3, r3
 800546e:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8005470:	e049      	b.n	8005506 <LL_GPIO_Init+0xc0>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001U << pinpos);
 8005472:	683b      	ldr	r3, [r7, #0]
 8005474:	681a      	ldr	r2, [r3, #0]
 8005476:	2101      	movs	r1, #1
 8005478:	69fb      	ldr	r3, [r7, #28]
 800547a:	fa01 f303 	lsl.w	r3, r1, r3
 800547e:	4013      	ands	r3, r2
 8005480:	61bb      	str	r3, [r7, #24]

    if (currentpin)
 8005482:	69bb      	ldr	r3, [r7, #24]
 8005484:	2b00      	cmp	r3, #0
 8005486:	d03b      	beq.n	8005500 <LL_GPIO_Init+0xba>
    {
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8005488:	683b      	ldr	r3, [r7, #0]
 800548a:	685b      	ldr	r3, [r3, #4]
 800548c:	461a      	mov	r2, r3
 800548e:	69b9      	ldr	r1, [r7, #24]
 8005490:	6878      	ldr	r0, [r7, #4]
 8005492:	f7ff fed3 	bl	800523c <LL_GPIO_SetPinMode>

      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8005496:	683b      	ldr	r3, [r7, #0]
 8005498:	685b      	ldr	r3, [r3, #4]
 800549a:	2b01      	cmp	r3, #1
 800549c:	d003      	beq.n	80054a6 <LL_GPIO_Init+0x60>
 800549e:	683b      	ldr	r3, [r7, #0]
 80054a0:	685b      	ldr	r3, [r3, #4]
 80054a2:	2b02      	cmp	r3, #2
 80054a4:	d106      	bne.n	80054b4 <LL_GPIO_Init+0x6e>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 80054a6:	683b      	ldr	r3, [r7, #0]
 80054a8:	689b      	ldr	r3, [r3, #8]
 80054aa:	461a      	mov	r2, r3
 80054ac:	69b9      	ldr	r1, [r7, #24]
 80054ae:	6878      	ldr	r0, [r7, #4]
 80054b0:	f7ff ff0b 	bl	80052ca <LL_GPIO_SetPinSpeed>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 80054b4:	683b      	ldr	r3, [r7, #0]
 80054b6:	691b      	ldr	r3, [r3, #16]
 80054b8:	461a      	mov	r2, r3
 80054ba:	69b9      	ldr	r1, [r7, #24]
 80054bc:	6878      	ldr	r0, [r7, #4]
 80054be:	f7ff ff33 	bl	8005328 <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 80054c2:	683b      	ldr	r3, [r7, #0]
 80054c4:	685b      	ldr	r3, [r3, #4]
 80054c6:	2b02      	cmp	r3, #2
 80054c8:	d11a      	bne.n	8005500 <LL_GPIO_Init+0xba>
 80054ca:	69bb      	ldr	r3, [r7, #24]
 80054cc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	fa93 f3a3 	rbit	r3, r3
 80054d4:	60bb      	str	r3, [r7, #8]
  return result;
 80054d6:	68bb      	ldr	r3, [r7, #8]
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 0x00000008U)
 80054d8:	fab3 f383 	clz	r3, r3
 80054dc:	b2db      	uxtb	r3, r3
 80054de:	2b07      	cmp	r3, #7
 80054e0:	d807      	bhi.n	80054f2 <LL_GPIO_Init+0xac>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 80054e2:	683b      	ldr	r3, [r7, #0]
 80054e4:	695b      	ldr	r3, [r3, #20]
 80054e6:	461a      	mov	r2, r3
 80054e8:	69b9      	ldr	r1, [r7, #24]
 80054ea:	6878      	ldr	r0, [r7, #4]
 80054ec:	f7ff ff4b 	bl	8005386 <LL_GPIO_SetAFPin_0_7>
 80054f0:	e006      	b.n	8005500 <LL_GPIO_Init+0xba>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 80054f2:	683b      	ldr	r3, [r7, #0]
 80054f4:	695b      	ldr	r3, [r3, #20]
 80054f6:	461a      	mov	r2, r3
 80054f8:	69b9      	ldr	r1, [r7, #24]
 80054fa:	6878      	ldr	r0, [r7, #4]
 80054fc:	f7ff ff72 	bl	80053e4 <LL_GPIO_SetAFPin_8_15>
        }
      }
    }
    pinpos++;
 8005500:	69fb      	ldr	r3, [r7, #28]
 8005502:	3301      	adds	r3, #1
 8005504:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8005506:	683b      	ldr	r3, [r7, #0]
 8005508:	681a      	ldr	r2, [r3, #0]
 800550a:	69fb      	ldr	r3, [r7, #28]
 800550c:	fa22 f303 	lsr.w	r3, r2, r3
 8005510:	2b00      	cmp	r3, #0
 8005512:	d1ae      	bne.n	8005472 <LL_GPIO_Init+0x2c>
  }

  if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8005514:	683b      	ldr	r3, [r7, #0]
 8005516:	685b      	ldr	r3, [r3, #4]
 8005518:	2b01      	cmp	r3, #1
 800551a:	d003      	beq.n	8005524 <LL_GPIO_Init+0xde>
 800551c:	683b      	ldr	r3, [r7, #0]
 800551e:	685b      	ldr	r3, [r3, #4]
 8005520:	2b02      	cmp	r3, #2
 8005522:	d107      	bne.n	8005534 <LL_GPIO_Init+0xee>
  {
    /* Check Output mode parameters */
    assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

    /* Output mode configuration*/
    LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 8005524:	683b      	ldr	r3, [r7, #0]
 8005526:	6819      	ldr	r1, [r3, #0]
 8005528:	683b      	ldr	r3, [r7, #0]
 800552a:	68db      	ldr	r3, [r3, #12]
 800552c:	461a      	mov	r2, r3
 800552e:	6878      	ldr	r0, [r7, #4]
 8005530:	f7ff feb3 	bl	800529a <LL_GPIO_SetPinOutputType>

  }
  return (SUCCESS);
 8005534:	2300      	movs	r3, #0
}
 8005536:	4618      	mov	r0, r3
 8005538:	3720      	adds	r7, #32
 800553a:	46bd      	mov	sp, r7
 800553c:	bd80      	pop	{r7, pc}

0800553e <LL_I2C_Enable>:
{
 800553e:	b480      	push	{r7}
 8005540:	b083      	sub	sp, #12
 8005542:	af00      	add	r7, sp, #0
 8005544:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR1, I2C_CR1_PE);
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	f043 0201 	orr.w	r2, r3, #1
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	601a      	str	r2, [r3, #0]
}
 8005552:	bf00      	nop
 8005554:	370c      	adds	r7, #12
 8005556:	46bd      	mov	sp, r7
 8005558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800555c:	4770      	bx	lr

0800555e <LL_I2C_Disable>:
{
 800555e:	b480      	push	{r7}
 8005560:	b083      	sub	sp, #12
 8005562:	af00      	add	r7, sp, #0
 8005564:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_PE);
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	f023 0201 	bic.w	r2, r3, #1
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	601a      	str	r2, [r3, #0]
}
 8005572:	bf00      	nop
 8005574:	370c      	adds	r7, #12
 8005576:	46bd      	mov	sp, r7
 8005578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800557c:	4770      	bx	lr

0800557e <LL_I2C_ConfigFilters>:
{
 800557e:	b480      	push	{r7}
 8005580:	b085      	sub	sp, #20
 8005582:	af00      	add	r7, sp, #0
 8005584:	60f8      	str	r0, [r7, #12]
 8005586:	60b9      	str	r1, [r7, #8]
 8005588:	607a      	str	r2, [r7, #4]
  MODIFY_REG(I2Cx->FLTR, I2C_FLTR_ANOFF | I2C_FLTR_DNF, AnalogFilter | DigitalFilter);
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800558e:	f023 021f 	bic.w	r2, r3, #31
 8005592:	68b9      	ldr	r1, [r7, #8]
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	430b      	orrs	r3, r1
 8005598:	431a      	orrs	r2, r3
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	625a      	str	r2, [r3, #36]	; 0x24
}
 800559e:	bf00      	nop
 80055a0:	3714      	adds	r7, #20
 80055a2:	46bd      	mov	sp, r7
 80055a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055a8:	4770      	bx	lr

080055aa <LL_I2C_SetOwnAddress1>:
{
 80055aa:	b480      	push	{r7}
 80055ac:	b085      	sub	sp, #20
 80055ae:	af00      	add	r7, sp, #0
 80055b0:	60f8      	str	r0, [r7, #12]
 80055b2:	60b9      	str	r1, [r7, #8]
 80055b4:	607a      	str	r2, [r7, #4]
  MODIFY_REG(I2Cx->OAR1, I2C_OAR1_ADD0 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD8_9 | I2C_OAR1_ADDMODE, OwnAddress1 | OwnAddrSize);
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	689b      	ldr	r3, [r3, #8]
 80055ba:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80055be:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80055c2:	68b9      	ldr	r1, [r7, #8]
 80055c4:	687a      	ldr	r2, [r7, #4]
 80055c6:	430a      	orrs	r2, r1
 80055c8:	431a      	orrs	r2, r3
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	609a      	str	r2, [r3, #8]
}
 80055ce:	bf00      	nop
 80055d0:	3714      	adds	r7, #20
 80055d2:	46bd      	mov	sp, r7
 80055d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055d8:	4770      	bx	lr
	...

080055dc <LL_I2C_ConfigSpeed>:
  *         @arg @ref LL_I2C_DUTYCYCLE_16_9
  * @retval None
  */
__STATIC_INLINE void LL_I2C_ConfigSpeed(I2C_TypeDef *I2Cx, uint32_t PeriphClock, uint32_t ClockSpeed,
                                        uint32_t DutyCycle)
{
 80055dc:	b490      	push	{r4, r7}
 80055de:	b084      	sub	sp, #16
 80055e0:	af00      	add	r7, sp, #0
 80055e2:	60f8      	str	r0, [r7, #12]
 80055e4:	60b9      	str	r1, [r7, #8]
 80055e6:	607a      	str	r2, [r7, #4]
 80055e8:	603b      	str	r3, [r7, #0]
  register uint32_t freqrange = 0x0U;
 80055ea:	2400      	movs	r4, #0
  register uint32_t clockconfig = 0x0U;
 80055ec:	2400      	movs	r4, #0

  /* Compute frequency range */
  freqrange = __LL_I2C_FREQ_HZ_TO_MHZ(PeriphClock);
 80055ee:	68bb      	ldr	r3, [r7, #8]
 80055f0:	4a3f      	ldr	r2, [pc, #252]	; (80056f0 <LL_I2C_ConfigSpeed+0x114>)
 80055f2:	fba2 2303 	umull	r2, r3, r2, r3
 80055f6:	0c9c      	lsrs	r4, r3, #18

  /* Configure I2Cx: Frequency range register */
  MODIFY_REG(I2Cx->CR2, I2C_CR2_FREQ, freqrange);
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	685b      	ldr	r3, [r3, #4]
 80055fc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8005600:	ea44 0203 	orr.w	r2, r4, r3
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	605a      	str	r2, [r3, #4]

  /* Configure I2Cx: Rise Time register */
  MODIFY_REG(I2Cx->TRISE, I2C_TRISE_TRISE, __LL_I2C_RISE_TIME(freqrange, ClockSpeed));
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	6a1b      	ldr	r3, [r3, #32]
 800560c:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	4938      	ldr	r1, [pc, #224]	; (80056f4 <LL_I2C_ConfigSpeed+0x118>)
 8005614:	428b      	cmp	r3, r1
 8005616:	d801      	bhi.n	800561c <LL_I2C_ConfigSpeed+0x40>
 8005618:	1c63      	adds	r3, r4, #1
 800561a:	e008      	b.n	800562e <LL_I2C_ConfigSpeed+0x52>
 800561c:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8005620:	fb03 f304 	mul.w	r3, r3, r4
 8005624:	4934      	ldr	r1, [pc, #208]	; (80056f8 <LL_I2C_ConfigSpeed+0x11c>)
 8005626:	fba1 1303 	umull	r1, r3, r1, r3
 800562a:	099b      	lsrs	r3, r3, #6
 800562c:	3301      	adds	r3, #1
 800562e:	431a      	orrs	r2, r3
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	621a      	str	r2, [r3, #32]

  /* Configure Speed mode, Duty Cycle and Clock control register value */
  if (ClockSpeed > LL_I2C_MAX_SPEED_STANDARD)
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	4a2f      	ldr	r2, [pc, #188]	; (80056f4 <LL_I2C_ConfigSpeed+0x118>)
 8005638:	4293      	cmp	r3, r2
 800563a:	d939      	bls.n	80056b0 <LL_I2C_ConfigSpeed+0xd4>
  {
    /* Set Speed mode at fast and duty cycle for Clock Speed request in fast clock range */
    clockconfig = LL_I2C_CLOCK_SPEED_FAST_MODE                                          | \
 800563c:	683b      	ldr	r3, [r7, #0]
 800563e:	2b00      	cmp	r3, #0
 8005640:	d117      	bne.n	8005672 <LL_I2C_ConfigSpeed+0x96>
                  __LL_I2C_SPEED_FAST_TO_CCR(PeriphClock, ClockSpeed, DutyCycle)        | \
 8005642:	687a      	ldr	r2, [r7, #4]
 8005644:	4613      	mov	r3, r2
 8005646:	005b      	lsls	r3, r3, #1
 8005648:	4413      	add	r3, r2
 800564a:	68ba      	ldr	r2, [r7, #8]
 800564c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005650:	f3c3 030b 	ubfx	r3, r3, #0, #12
    clockconfig = LL_I2C_CLOCK_SPEED_FAST_MODE                                          | \
 8005654:	2b00      	cmp	r3, #0
 8005656:	d009      	beq.n	800566c <LL_I2C_ConfigSpeed+0x90>
                  __LL_I2C_SPEED_FAST_TO_CCR(PeriphClock, ClockSpeed, DutyCycle)        | \
 8005658:	687a      	ldr	r2, [r7, #4]
 800565a:	4613      	mov	r3, r2
 800565c:	005b      	lsls	r3, r3, #1
 800565e:	4413      	add	r3, r2
 8005660:	68ba      	ldr	r2, [r7, #8]
 8005662:	fbb2 f3f3 	udiv	r3, r2, r3
    clockconfig = LL_I2C_CLOCK_SPEED_FAST_MODE                                          | \
 8005666:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800566a:	e01d      	b.n	80056a8 <LL_I2C_ConfigSpeed+0xcc>
 800566c:	f248 0301 	movw	r3, #32769	; 0x8001
 8005670:	e01a      	b.n	80056a8 <LL_I2C_ConfigSpeed+0xcc>
                  __LL_I2C_SPEED_FAST_TO_CCR(PeriphClock, ClockSpeed, DutyCycle)        | \
 8005672:	687a      	ldr	r2, [r7, #4]
 8005674:	4613      	mov	r3, r2
 8005676:	009b      	lsls	r3, r3, #2
 8005678:	4413      	add	r3, r2
 800567a:	009a      	lsls	r2, r3, #2
 800567c:	4413      	add	r3, r2
 800567e:	68ba      	ldr	r2, [r7, #8]
 8005680:	fbb2 f3f3 	udiv	r3, r2, r3
 8005684:	f3c3 030b 	ubfx	r3, r3, #0, #12
    clockconfig = LL_I2C_CLOCK_SPEED_FAST_MODE                                          | \
 8005688:	2b00      	cmp	r3, #0
 800568a:	d00b      	beq.n	80056a4 <LL_I2C_ConfigSpeed+0xc8>
                  __LL_I2C_SPEED_FAST_TO_CCR(PeriphClock, ClockSpeed, DutyCycle)        | \
 800568c:	687a      	ldr	r2, [r7, #4]
 800568e:	4613      	mov	r3, r2
 8005690:	009b      	lsls	r3, r3, #2
 8005692:	4413      	add	r3, r2
 8005694:	009a      	lsls	r2, r3, #2
 8005696:	4413      	add	r3, r2
 8005698:	68ba      	ldr	r2, [r7, #8]
 800569a:	fbb2 f3f3 	udiv	r3, r2, r3
    clockconfig = LL_I2C_CLOCK_SPEED_FAST_MODE                                          | \
 800569e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80056a2:	e001      	b.n	80056a8 <LL_I2C_ConfigSpeed+0xcc>
 80056a4:	f248 0301 	movw	r3, #32769	; 0x8001
 80056a8:	683a      	ldr	r2, [r7, #0]
 80056aa:	ea43 0402 	orr.w	r4, r3, r2
 80056ae:	e010      	b.n	80056d2 <LL_I2C_ConfigSpeed+0xf6>
  }
  else
  {
    /* Set Speed mode at standard for Clock Speed request in standard clock range */
    clockconfig = LL_I2C_CLOCK_SPEED_STANDARD_MODE                                      | \
                  __LL_I2C_SPEED_STANDARD_TO_CCR(PeriphClock, ClockSpeed);
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	005b      	lsls	r3, r3, #1
 80056b4:	68ba      	ldr	r2, [r7, #8]
 80056b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80056ba:	f3c3 030b 	ubfx	r3, r3, #0, #12
    clockconfig = LL_I2C_CLOCK_SPEED_STANDARD_MODE                                      | \
 80056be:	2b03      	cmp	r3, #3
 80056c0:	d905      	bls.n	80056ce <LL_I2C_ConfigSpeed+0xf2>
                  __LL_I2C_SPEED_STANDARD_TO_CCR(PeriphClock, ClockSpeed);
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	005b      	lsls	r3, r3, #1
    clockconfig = LL_I2C_CLOCK_SPEED_STANDARD_MODE                                      | \
 80056c6:	68ba      	ldr	r2, [r7, #8]
 80056c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80056cc:	e000      	b.n	80056d0 <LL_I2C_ConfigSpeed+0xf4>
 80056ce:	2304      	movs	r3, #4
 80056d0:	461c      	mov	r4, r3
  }

  /* Configure I2Cx: Clock control register */
  MODIFY_REG(I2Cx->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), clockconfig);
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	69db      	ldr	r3, [r3, #28]
 80056d6:	f423 434f 	bic.w	r3, r3, #52992	; 0xcf00
 80056da:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80056de:	ea44 0203 	orr.w	r2, r4, r3
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	61da      	str	r2, [r3, #28]
}
 80056e6:	bf00      	nop
 80056e8:	3710      	adds	r7, #16
 80056ea:	46bd      	mov	sp, r7
 80056ec:	bc90      	pop	{r4, r7}
 80056ee:	4770      	bx	lr
 80056f0:	431bde83 	.word	0x431bde83
 80056f4:	000186a0 	.word	0x000186a0
 80056f8:	10624dd3 	.word	0x10624dd3

080056fc <LL_I2C_SetMode>:
  *         @arg @ref LL_I2C_MODE_SMBUS_DEVICE
  *         @arg @ref LL_I2C_MODE_SMBUS_DEVICE_ARP
  * @retval None
  */
__STATIC_INLINE void LL_I2C_SetMode(I2C_TypeDef *I2Cx, uint32_t PeripheralMode)
{
 80056fc:	b480      	push	{r7}
 80056fe:	b083      	sub	sp, #12
 8005700:	af00      	add	r7, sp, #0
 8005702:	6078      	str	r0, [r7, #4]
 8005704:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->CR1, I2C_CR1_SMBUS | I2C_CR1_SMBTYPE | I2C_CR1_ENARP, PeripheralMode);
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	f023 021a 	bic.w	r2, r3, #26
 800570e:	683b      	ldr	r3, [r7, #0]
 8005710:	431a      	orrs	r2, r3
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	601a      	str	r2, [r3, #0]
}
 8005716:	bf00      	nop
 8005718:	370c      	adds	r7, #12
 800571a:	46bd      	mov	sp, r7
 800571c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005720:	4770      	bx	lr

08005722 <LL_I2C_AcknowledgeNextData>:
  *         @arg @ref LL_I2C_ACK
  *         @arg @ref LL_I2C_NACK
  * @retval None
  */
__STATIC_INLINE void LL_I2C_AcknowledgeNextData(I2C_TypeDef *I2Cx, uint32_t TypeAcknowledge)
{
 8005722:	b480      	push	{r7}
 8005724:	b083      	sub	sp, #12
 8005726:	af00      	add	r7, sp, #0
 8005728:	6078      	str	r0, [r7, #4]
 800572a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->CR1, I2C_CR1_ACK, TypeAcknowledge);
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8005734:	683b      	ldr	r3, [r7, #0]
 8005736:	431a      	orrs	r2, r3
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	601a      	str	r2, [r3, #0]
}
 800573c:	bf00      	nop
 800573e:	370c      	adds	r7, #12
 8005740:	46bd      	mov	sp, r7
 8005742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005746:	4770      	bx	lr

08005748 <LL_I2C_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS  I2C registers are initialized
  *          - ERROR  Not applicable
  */
uint32_t LL_I2C_Init(I2C_TypeDef *I2Cx, LL_I2C_InitTypeDef *I2C_InitStruct)
{
 8005748:	b580      	push	{r7, lr}
 800574a:	b086      	sub	sp, #24
 800574c:	af00      	add	r7, sp, #0
 800574e:	6078      	str	r0, [r7, #4]
 8005750:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_I2C_OWN_ADDRESS1(I2C_InitStruct->OwnAddress1));
  assert_param(IS_LL_I2C_TYPE_ACKNOWLEDGE(I2C_InitStruct->TypeAcknowledge));
  assert_param(IS_LL_I2C_OWN_ADDRSIZE(I2C_InitStruct->OwnAddrSize));

  /* Disable the selected I2Cx Peripheral */
  LL_I2C_Disable(I2Cx);
 8005752:	6878      	ldr	r0, [r7, #4]
 8005754:	f7ff ff03 	bl	800555e <LL_I2C_Disable>

  /* Retrieve Clock frequencies */
  LL_RCC_GetSystemClocksFreq(&rcc_clocks);
 8005758:	f107 0308 	add.w	r3, r7, #8
 800575c:	4618      	mov	r0, r3
 800575e:	f000 f89d 	bl	800589c <LL_RCC_GetSystemClocksFreq>
  /*---------------------------- I2Cx FLTR Configuration -----------------------
   * Configure the analog and digital noise filters with parameters :
   * - AnalogFilter: I2C_FLTR_ANFOFF bit
   * - DigitalFilter: I2C_FLTR_DNF[3:0] bits
   */
  LL_I2C_ConfigFilters(I2Cx, I2C_InitStruct->AnalogFilter, I2C_InitStruct->DigitalFilter);
 8005762:	683b      	ldr	r3, [r7, #0]
 8005764:	68d9      	ldr	r1, [r3, #12]
 8005766:	683b      	ldr	r3, [r7, #0]
 8005768:	691b      	ldr	r3, [r3, #16]
 800576a:	461a      	mov	r2, r3
 800576c:	6878      	ldr	r0, [r7, #4]
 800576e:	f7ff ff06 	bl	800557e <LL_I2C_ConfigFilters>
   * Configure the SCL speed :
   * - ClockSpeed: I2C_CR2_FREQ[5:0], I2C_TRISE_TRISE[5:0], I2C_CCR_FS,
   *           and I2C_CCR_CCR[11:0] bits
   * - DutyCycle: I2C_CCR_DUTY[7:0] bits
   */
  LL_I2C_ConfigSpeed(I2Cx, rcc_clocks.PCLK1_Frequency, I2C_InitStruct->ClockSpeed, I2C_InitStruct->DutyCycle);
 8005772:	6939      	ldr	r1, [r7, #16]
 8005774:	683b      	ldr	r3, [r7, #0]
 8005776:	685a      	ldr	r2, [r3, #4]
 8005778:	683b      	ldr	r3, [r7, #0]
 800577a:	689b      	ldr	r3, [r3, #8]
 800577c:	6878      	ldr	r0, [r7, #4]
 800577e:	f7ff ff2d 	bl	80055dc <LL_I2C_ConfigSpeed>
  /*---------------------------- I2Cx OAR1 Configuration -----------------------
   * Disable, Configure and Enable I2Cx device own address 1 with parameters :
   * - OwnAddress1:  I2C_OAR1_ADD[9:8], I2C_OAR1_ADD[7:1] and I2C_OAR1_ADD0 bits
   * - OwnAddrSize:  I2C_OAR1_ADDMODE bit
   */
  LL_I2C_SetOwnAddress1(I2Cx, I2C_InitStruct->OwnAddress1, I2C_InitStruct->OwnAddrSize);
 8005782:	683b      	ldr	r3, [r7, #0]
 8005784:	6959      	ldr	r1, [r3, #20]
 8005786:	683b      	ldr	r3, [r7, #0]
 8005788:	69db      	ldr	r3, [r3, #28]
 800578a:	461a      	mov	r2, r3
 800578c:	6878      	ldr	r0, [r7, #4]
 800578e:	f7ff ff0c 	bl	80055aa <LL_I2C_SetOwnAddress1>

  /*---------------------------- I2Cx MODE Configuration -----------------------
  * Configure I2Cx peripheral mode with parameter :
   * - PeripheralMode: I2C_CR1_SMBUS, I2C_CR1_SMBTYPE and I2C_CR1_ENARP bits
   */
  LL_I2C_SetMode(I2Cx, I2C_InitStruct->PeripheralMode);
 8005792:	683b      	ldr	r3, [r7, #0]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	4619      	mov	r1, r3
 8005798:	6878      	ldr	r0, [r7, #4]
 800579a:	f7ff ffaf 	bl	80056fc <LL_I2C_SetMode>

  /* Enable the selected I2Cx Peripheral */
  LL_I2C_Enable(I2Cx);
 800579e:	6878      	ldr	r0, [r7, #4]
 80057a0:	f7ff fecd 	bl	800553e <LL_I2C_Enable>
  /*---------------------------- I2Cx CR2 Configuration ------------------------
   * Configure the ACKnowledge or Non ACKnowledge condition
   * after the address receive match code or next received byte with parameter :
   * - TypeAcknowledge: I2C_CR2_NACK bit
   */
  LL_I2C_AcknowledgeNextData(I2Cx, I2C_InitStruct->TypeAcknowledge);
 80057a4:	683b      	ldr	r3, [r7, #0]
 80057a6:	699b      	ldr	r3, [r3, #24]
 80057a8:	4619      	mov	r1, r3
 80057aa:	6878      	ldr	r0, [r7, #4]
 80057ac:	f7ff ffb9 	bl	8005722 <LL_I2C_AcknowledgeNextData>

  return SUCCESS;
 80057b0:	2300      	movs	r3, #0
}
 80057b2:	4618      	mov	r0, r3
 80057b4:	3718      	adds	r7, #24
 80057b6:	46bd      	mov	sp, r7
 80057b8:	bd80      	pop	{r7, pc}
	...

080057bc <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLLR (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 80057bc:	b480      	push	{r7}
 80057be:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80057c0:	4b04      	ldr	r3, [pc, #16]	; (80057d4 <LL_RCC_GetSysClkSource+0x18>)
 80057c2:	689b      	ldr	r3, [r3, #8]
 80057c4:	f003 030c 	and.w	r3, r3, #12
}
 80057c8:	4618      	mov	r0, r3
 80057ca:	46bd      	mov	sp, r7
 80057cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057d0:	4770      	bx	lr
 80057d2:	bf00      	nop
 80057d4:	40023800 	.word	0x40023800

080057d8 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 80057d8:	b480      	push	{r7}
 80057da:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 80057dc:	4b04      	ldr	r3, [pc, #16]	; (80057f0 <LL_RCC_GetAHBPrescaler+0x18>)
 80057de:	689b      	ldr	r3, [r3, #8]
 80057e0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 80057e4:	4618      	mov	r0, r3
 80057e6:	46bd      	mov	sp, r7
 80057e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ec:	4770      	bx	lr
 80057ee:	bf00      	nop
 80057f0:	40023800 	.word	0x40023800

080057f4 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 80057f4:	b480      	push	{r7}
 80057f6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 80057f8:	4b04      	ldr	r3, [pc, #16]	; (800580c <LL_RCC_GetAPB1Prescaler+0x18>)
 80057fa:	689b      	ldr	r3, [r3, #8]
 80057fc:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
}
 8005800:	4618      	mov	r0, r3
 8005802:	46bd      	mov	sp, r7
 8005804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005808:	4770      	bx	lr
 800580a:	bf00      	nop
 800580c:	40023800 	.word	0x40023800

08005810 <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 8005810:	b480      	push	{r7}
 8005812:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8005814:	4b04      	ldr	r3, [pc, #16]	; (8005828 <LL_RCC_GetAPB2Prescaler+0x18>)
 8005816:	689b      	ldr	r3, [r3, #8]
 8005818:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 800581c:	4618      	mov	r0, r3
 800581e:	46bd      	mov	sp, r7
 8005820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005824:	4770      	bx	lr
 8005826:	bf00      	nop
 8005828:	40023800 	.word	0x40023800

0800582c <LL_RCC_PLL_GetMainSource>:
  * @retval Returned value can be one of the following values:
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 800582c:	b480      	push	{r7}
 800582e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8005830:	4b04      	ldr	r3, [pc, #16]	; (8005844 <LL_RCC_PLL_GetMainSource+0x18>)
 8005832:	685b      	ldr	r3, [r3, #4]
 8005834:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
}
 8005838:	4618      	mov	r0, r3
 800583a:	46bd      	mov	sp, r7
 800583c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005840:	4770      	bx	lr
 8005842:	bf00      	nop
 8005844:	40023800 	.word	0x40023800

08005848 <LL_RCC_PLL_GetN>:
  * @retval Between 50/192(*) and 432
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8005848:	b480      	push	{r7}
 800584a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 800584c:	4b04      	ldr	r3, [pc, #16]	; (8005860 <LL_RCC_PLL_GetN+0x18>)
 800584e:	685b      	ldr	r3, [r3, #4]
 8005850:	099b      	lsrs	r3, r3, #6
 8005852:	f3c3 0308 	ubfx	r3, r3, #0, #9
}
 8005856:	4618      	mov	r0, r3
 8005858:	46bd      	mov	sp, r7
 800585a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800585e:	4770      	bx	lr
 8005860:	40023800 	.word	0x40023800

08005864 <LL_RCC_PLL_GetP>:
  *         @arg @ref LL_RCC_PLLP_DIV_4
  *         @arg @ref LL_RCC_PLLP_DIV_6
  *         @arg @ref LL_RCC_PLLP_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetP(void)
{
 8005864:	b480      	push	{r7}
 8005866:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP));
 8005868:	4b04      	ldr	r3, [pc, #16]	; (800587c <LL_RCC_PLL_GetP+0x18>)
 800586a:	685b      	ldr	r3, [r3, #4]
 800586c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
}
 8005870:	4618      	mov	r0, r3
 8005872:	46bd      	mov	sp, r7
 8005874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005878:	4770      	bx	lr
 800587a:	bf00      	nop
 800587c:	40023800 	.word	0x40023800

08005880 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_61
  *         @arg @ref LL_RCC_PLLM_DIV_62
  *         @arg @ref LL_RCC_PLLM_DIV_63
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8005880:	b480      	push	{r7}
 8005882:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8005884:	4b04      	ldr	r3, [pc, #16]	; (8005898 <LL_RCC_PLL_GetDivider+0x18>)
 8005886:	685b      	ldr	r3, [r3, #4]
 8005888:	f003 033f 	and.w	r3, r3, #63	; 0x3f
}
 800588c:	4618      	mov	r0, r3
 800588e:	46bd      	mov	sp, r7
 8005890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005894:	4770      	bx	lr
 8005896:	bf00      	nop
 8005898:	40023800 	.word	0x40023800

0800589c <LL_RCC_GetSystemClocksFreq>:
  *         configuration based on this function will be incorrect.
  * @param  RCC_Clocks pointer to a @ref LL_RCC_ClocksTypeDef structure which will hold the clocks frequencies
  * @retval None
  */
void LL_RCC_GetSystemClocksFreq(LL_RCC_ClocksTypeDef *RCC_Clocks)
{
 800589c:	b580      	push	{r7, lr}
 800589e:	b082      	sub	sp, #8
 80058a0:	af00      	add	r7, sp, #0
 80058a2:	6078      	str	r0, [r7, #4]
  /* Get SYSCLK frequency */
  RCC_Clocks->SYSCLK_Frequency = RCC_GetSystemClockFreq();
 80058a4:	f000 f820 	bl	80058e8 <RCC_GetSystemClockFreq>
 80058a8:	4602      	mov	r2, r0
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	601a      	str	r2, [r3, #0]

  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency   = RCC_GetHCLKClockFreq(RCC_Clocks->SYSCLK_Frequency);
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	4618      	mov	r0, r3
 80058b4:	f000 f83e 	bl	8005934 <RCC_GetHCLKClockFreq>
 80058b8:	4602      	mov	r2, r0
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	605a      	str	r2, [r3, #4]

  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency  = RCC_GetPCLK1ClockFreq(RCC_Clocks->HCLK_Frequency);
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	685b      	ldr	r3, [r3, #4]
 80058c2:	4618      	mov	r0, r3
 80058c4:	f000 f84c 	bl	8005960 <RCC_GetPCLK1ClockFreq>
 80058c8:	4602      	mov	r2, r0
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	609a      	str	r2, [r3, #8]

  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency  = RCC_GetPCLK2ClockFreq(RCC_Clocks->HCLK_Frequency);
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	685b      	ldr	r3, [r3, #4]
 80058d2:	4618      	mov	r0, r3
 80058d4:	f000 f858 	bl	8005988 <RCC_GetPCLK2ClockFreq>
 80058d8:	4602      	mov	r2, r0
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	60da      	str	r2, [r3, #12]
}
 80058de:	bf00      	nop
 80058e0:	3708      	adds	r7, #8
 80058e2:	46bd      	mov	sp, r7
 80058e4:	bd80      	pop	{r7, pc}
	...

080058e8 <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
uint32_t RCC_GetSystemClockFreq(void)
{
 80058e8:	b580      	push	{r7, lr}
 80058ea:	b082      	sub	sp, #8
 80058ec:	af00      	add	r7, sp, #0
  uint32_t frequency = 0U;
 80058ee:	2300      	movs	r3, #0
 80058f0:	607b      	str	r3, [r7, #4]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 80058f2:	f7ff ff63 	bl	80057bc <LL_RCC_GetSysClkSource>
 80058f6:	4603      	mov	r3, r0
 80058f8:	2b04      	cmp	r3, #4
 80058fa:	d006      	beq.n	800590a <RCC_GetSystemClockFreq+0x22>
 80058fc:	2b08      	cmp	r3, #8
 80058fe:	d007      	beq.n	8005910 <RCC_GetSystemClockFreq+0x28>
 8005900:	2b00      	cmp	r3, #0
 8005902:	d10a      	bne.n	800591a <RCC_GetSystemClockFreq+0x32>
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 8005904:	4b09      	ldr	r3, [pc, #36]	; (800592c <RCC_GetSystemClockFreq+0x44>)
 8005906:	607b      	str	r3, [r7, #4]
      break;
 8005908:	e00a      	b.n	8005920 <RCC_GetSystemClockFreq+0x38>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 800590a:	4b09      	ldr	r3, [pc, #36]	; (8005930 <RCC_GetSystemClockFreq+0x48>)
 800590c:	607b      	str	r3, [r7, #4]
      break;
 800590e:	e007      	b.n	8005920 <RCC_GetSystemClockFreq+0x38>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS(LL_RCC_SYS_CLKSOURCE_STATUS_PLL);
 8005910:	2008      	movs	r0, #8
 8005912:	f000 f84d 	bl	80059b0 <RCC_PLL_GetFreqDomain_SYS>
 8005916:	6078      	str	r0, [r7, #4]
      break;
 8005918:	e002      	b.n	8005920 <RCC_GetSystemClockFreq+0x38>
      frequency = RCC_PLL_GetFreqDomain_SYS(LL_RCC_SYS_CLKSOURCE_STATUS_PLLR);
      break;
#endif /* RCC_PLLR_SYSCLK_SUPPORT */

    default:
      frequency = HSI_VALUE;
 800591a:	4b04      	ldr	r3, [pc, #16]	; (800592c <RCC_GetSystemClockFreq+0x44>)
 800591c:	607b      	str	r3, [r7, #4]
      break;
 800591e:	bf00      	nop
  }

  return frequency;
 8005920:	687b      	ldr	r3, [r7, #4]
}
 8005922:	4618      	mov	r0, r3
 8005924:	3708      	adds	r7, #8
 8005926:	46bd      	mov	sp, r7
 8005928:	bd80      	pop	{r7, pc}
 800592a:	bf00      	nop
 800592c:	00f42400 	.word	0x00f42400
 8005930:	007a1200 	.word	0x007a1200

08005934 <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 8005934:	b580      	push	{r7, lr}
 8005936:	b082      	sub	sp, #8
 8005938:	af00      	add	r7, sp, #0
 800593a:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 800593c:	f7ff ff4c 	bl	80057d8 <LL_RCC_GetAHBPrescaler>
 8005940:	4603      	mov	r3, r0
 8005942:	091b      	lsrs	r3, r3, #4
 8005944:	f003 030f 	and.w	r3, r3, #15
 8005948:	4a04      	ldr	r2, [pc, #16]	; (800595c <RCC_GetHCLKClockFreq+0x28>)
 800594a:	5cd3      	ldrb	r3, [r2, r3]
 800594c:	461a      	mov	r2, r3
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	40d3      	lsrs	r3, r2
}
 8005952:	4618      	mov	r0, r3
 8005954:	3708      	adds	r7, #8
 8005956:	46bd      	mov	sp, r7
 8005958:	bd80      	pop	{r7, pc}
 800595a:	bf00      	nop
 800595c:	0801b788 	.word	0x0801b788

08005960 <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 8005960:	b580      	push	{r7, lr}
 8005962:	b082      	sub	sp, #8
 8005964:	af00      	add	r7, sp, #0
 8005966:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 8005968:	f7ff ff44 	bl	80057f4 <LL_RCC_GetAPB1Prescaler>
 800596c:	4603      	mov	r3, r0
 800596e:	0a9b      	lsrs	r3, r3, #10
 8005970:	4a04      	ldr	r2, [pc, #16]	; (8005984 <RCC_GetPCLK1ClockFreq+0x24>)
 8005972:	5cd3      	ldrb	r3, [r2, r3]
 8005974:	461a      	mov	r2, r3
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	40d3      	lsrs	r3, r2
}
 800597a:	4618      	mov	r0, r3
 800597c:	3708      	adds	r7, #8
 800597e:	46bd      	mov	sp, r7
 8005980:	bd80      	pop	{r7, pc}
 8005982:	bf00      	nop
 8005984:	0801b798 	.word	0x0801b798

08005988 <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 8005988:	b580      	push	{r7, lr}
 800598a:	b082      	sub	sp, #8
 800598c:	af00      	add	r7, sp, #0
 800598e:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 8005990:	f7ff ff3e 	bl	8005810 <LL_RCC_GetAPB2Prescaler>
 8005994:	4603      	mov	r3, r0
 8005996:	0b5b      	lsrs	r3, r3, #13
 8005998:	4a04      	ldr	r2, [pc, #16]	; (80059ac <RCC_GetPCLK2ClockFreq+0x24>)
 800599a:	5cd3      	ldrb	r3, [r2, r3]
 800599c:	461a      	mov	r2, r3
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	40d3      	lsrs	r3, r2
}
 80059a2:	4618      	mov	r0, r3
 80059a4:	3708      	adds	r7, #8
 80059a6:	46bd      	mov	sp, r7
 80059a8:	bd80      	pop	{r7, pc}
 80059aa:	bf00      	nop
 80059ac:	0801b798 	.word	0x0801b798

080059b0 <RCC_PLL_GetFreqDomain_SYS>:
  * @brief  Return PLL clock frequency used for system domain
  * @param  SYSCLK_Source System clock source
  * @retval PLL clock frequency (in Hz)
  */
uint32_t RCC_PLL_GetFreqDomain_SYS(uint32_t SYSCLK_Source)
{
 80059b0:	b590      	push	{r4, r7, lr}
 80059b2:	b087      	sub	sp, #28
 80059b4:	af00      	add	r7, sp, #0
 80059b6:	6078      	str	r0, [r7, #4]
  uint32_t pllinputfreq = 0U, pllsource = 0U, plloutputfreq = 0U;
 80059b8:	2300      	movs	r3, #0
 80059ba:	617b      	str	r3, [r7, #20]
 80059bc:	2300      	movs	r3, #0
 80059be:	60fb      	str	r3, [r7, #12]
 80059c0:	2300      	movs	r3, #0
 80059c2:	613b      	str	r3, [r7, #16]

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
     SYSCLK = PLL_VCO / (PLLP or PLLR)
  */
  pllsource = LL_RCC_PLL_GetMainSource();
 80059c4:	f7ff ff32 	bl	800582c <LL_RCC_PLL_GetMainSource>
 80059c8:	60f8      	str	r0, [r7, #12]

  switch (pllsource)
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d003      	beq.n	80059d8 <RCC_PLL_GetFreqDomain_SYS+0x28>
 80059d0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80059d4:	d003      	beq.n	80059de <RCC_PLL_GetFreqDomain_SYS+0x2e>
 80059d6:	e005      	b.n	80059e4 <RCC_PLL_GetFreqDomain_SYS+0x34>
  {
    case LL_RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
 80059d8:	4b12      	ldr	r3, [pc, #72]	; (8005a24 <RCC_PLL_GetFreqDomain_SYS+0x74>)
 80059da:	617b      	str	r3, [r7, #20]
      break;
 80059dc:	e005      	b.n	80059ea <RCC_PLL_GetFreqDomain_SYS+0x3a>

    case LL_RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 80059de:	4b12      	ldr	r3, [pc, #72]	; (8005a28 <RCC_PLL_GetFreqDomain_SYS+0x78>)
 80059e0:	617b      	str	r3, [r7, #20]
      break;
 80059e2:	e002      	b.n	80059ea <RCC_PLL_GetFreqDomain_SYS+0x3a>

    default:
      pllinputfreq = HSI_VALUE;
 80059e4:	4b0f      	ldr	r3, [pc, #60]	; (8005a24 <RCC_PLL_GetFreqDomain_SYS+0x74>)
 80059e6:	617b      	str	r3, [r7, #20]
      break;
 80059e8:	bf00      	nop
  }

  if (SYSCLK_Source == LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	2b08      	cmp	r3, #8
 80059ee:	d113      	bne.n	8005a18 <RCC_PLL_GetFreqDomain_SYS+0x68>
  {
    plloutputfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 80059f0:	f7ff ff46 	bl	8005880 <LL_RCC_PLL_GetDivider>
 80059f4:	4602      	mov	r2, r0
 80059f6:	697b      	ldr	r3, [r7, #20]
 80059f8:	fbb3 f4f2 	udiv	r4, r3, r2
 80059fc:	f7ff ff24 	bl	8005848 <LL_RCC_PLL_GetN>
 8005a00:	4603      	mov	r3, r0
 8005a02:	fb03 f404 	mul.w	r4, r3, r4
 8005a06:	f7ff ff2d 	bl	8005864 <LL_RCC_PLL_GetP>
 8005a0a:	4603      	mov	r3, r0
 8005a0c:	0c1b      	lsrs	r3, r3, #16
 8005a0e:	3301      	adds	r3, #1
 8005a10:	005b      	lsls	r3, r3, #1
 8005a12:	fbb4 f3f3 	udiv	r3, r4, r3
 8005a16:	613b      	str	r3, [r7, #16]
    plloutputfreq = __LL_RCC_CALC_PLLRCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
                                        LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }
#endif /* RCC_PLLR_SYSCLK_SUPPORT */

  return plloutputfreq;
 8005a18:	693b      	ldr	r3, [r7, #16]
}
 8005a1a:	4618      	mov	r0, r3
 8005a1c:	371c      	adds	r7, #28
 8005a1e:	46bd      	mov	sp, r7
 8005a20:	bd90      	pop	{r4, r7, pc}
 8005a22:	bf00      	nop
 8005a24:	00f42400 	.word	0x00f42400
 8005a28:	007a1200 	.word	0x007a1200

08005a2c <LL_USART_IsEnabled>:
{
 8005a2c:	b480      	push	{r7}
 8005a2e:	b083      	sub	sp, #12
 8005a30:	af00      	add	r7, sp, #0
 8005a32:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE));
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	68db      	ldr	r3, [r3, #12]
 8005a38:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005a3c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005a40:	bf0c      	ite	eq
 8005a42:	2301      	moveq	r3, #1
 8005a44:	2300      	movne	r3, #0
 8005a46:	b2db      	uxtb	r3, r3
}
 8005a48:	4618      	mov	r0, r3
 8005a4a:	370c      	adds	r7, #12
 8005a4c:	46bd      	mov	sp, r7
 8005a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a52:	4770      	bx	lr

08005a54 <LL_USART_SetStopBitsLength>:
{
 8005a54:	b480      	push	{r7}
 8005a56:	b083      	sub	sp, #12
 8005a58:	af00      	add	r7, sp, #0
 8005a5a:	6078      	str	r0, [r7, #4]
 8005a5c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	691b      	ldr	r3, [r3, #16]
 8005a62:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005a66:	683b      	ldr	r3, [r7, #0]
 8005a68:	431a      	orrs	r2, r3
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	611a      	str	r2, [r3, #16]
}
 8005a6e:	bf00      	nop
 8005a70:	370c      	adds	r7, #12
 8005a72:	46bd      	mov	sp, r7
 8005a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a78:	4770      	bx	lr

08005a7a <LL_USART_SetHWFlowCtrl>:
{
 8005a7a:	b480      	push	{r7}
 8005a7c:	b083      	sub	sp, #12
 8005a7e:	af00      	add	r7, sp, #0
 8005a80:	6078      	str	r0, [r7, #4]
 8005a82:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	695b      	ldr	r3, [r3, #20]
 8005a88:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005a8c:	683b      	ldr	r3, [r7, #0]
 8005a8e:	431a      	orrs	r2, r3
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	615a      	str	r2, [r3, #20]
}
 8005a94:	bf00      	nop
 8005a96:	370c      	adds	r7, #12
 8005a98:	46bd      	mov	sp, r7
 8005a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a9e:	4770      	bx	lr

08005aa0 <LL_USART_SetBaudRate>:
{
 8005aa0:	b480      	push	{r7}
 8005aa2:	b085      	sub	sp, #20
 8005aa4:	af00      	add	r7, sp, #0
 8005aa6:	60f8      	str	r0, [r7, #12]
 8005aa8:	60b9      	str	r1, [r7, #8]
 8005aaa:	607a      	str	r2, [r7, #4]
 8005aac:	603b      	str	r3, [r7, #0]
  if (OverSampling == LL_USART_OVERSAMPLING_8)
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005ab4:	d152      	bne.n	8005b5c <LL_USART_SetBaudRate+0xbc>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
 8005ab6:	68ba      	ldr	r2, [r7, #8]
 8005ab8:	4613      	mov	r3, r2
 8005aba:	009b      	lsls	r3, r3, #2
 8005abc:	4413      	add	r3, r2
 8005abe:	009a      	lsls	r2, r3, #2
 8005ac0:	441a      	add	r2, r3
 8005ac2:	683b      	ldr	r3, [r7, #0]
 8005ac4:	005b      	lsls	r3, r3, #1
 8005ac6:	fbb2 f3f3 	udiv	r3, r2, r3
 8005aca:	4a4f      	ldr	r2, [pc, #316]	; (8005c08 <LL_USART_SetBaudRate+0x168>)
 8005acc:	fba2 2303 	umull	r2, r3, r2, r3
 8005ad0:	095b      	lsrs	r3, r3, #5
 8005ad2:	b29b      	uxth	r3, r3
 8005ad4:	011b      	lsls	r3, r3, #4
 8005ad6:	b299      	uxth	r1, r3
 8005ad8:	68ba      	ldr	r2, [r7, #8]
 8005ada:	4613      	mov	r3, r2
 8005adc:	009b      	lsls	r3, r3, #2
 8005ade:	4413      	add	r3, r2
 8005ae0:	009a      	lsls	r2, r3, #2
 8005ae2:	441a      	add	r2, r3
 8005ae4:	683b      	ldr	r3, [r7, #0]
 8005ae6:	005b      	lsls	r3, r3, #1
 8005ae8:	fbb2 f2f3 	udiv	r2, r2, r3
 8005aec:	4b46      	ldr	r3, [pc, #280]	; (8005c08 <LL_USART_SetBaudRate+0x168>)
 8005aee:	fba3 0302 	umull	r0, r3, r3, r2
 8005af2:	095b      	lsrs	r3, r3, #5
 8005af4:	2064      	movs	r0, #100	; 0x64
 8005af6:	fb00 f303 	mul.w	r3, r0, r3
 8005afa:	1ad3      	subs	r3, r2, r3
 8005afc:	00db      	lsls	r3, r3, #3
 8005afe:	3332      	adds	r3, #50	; 0x32
 8005b00:	4a41      	ldr	r2, [pc, #260]	; (8005c08 <LL_USART_SetBaudRate+0x168>)
 8005b02:	fba2 2303 	umull	r2, r3, r2, r3
 8005b06:	095b      	lsrs	r3, r3, #5
 8005b08:	b29b      	uxth	r3, r3
 8005b0a:	005b      	lsls	r3, r3, #1
 8005b0c:	b29b      	uxth	r3, r3
 8005b0e:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005b12:	b29b      	uxth	r3, r3
 8005b14:	440b      	add	r3, r1
 8005b16:	b299      	uxth	r1, r3
 8005b18:	68ba      	ldr	r2, [r7, #8]
 8005b1a:	4613      	mov	r3, r2
 8005b1c:	009b      	lsls	r3, r3, #2
 8005b1e:	4413      	add	r3, r2
 8005b20:	009a      	lsls	r2, r3, #2
 8005b22:	441a      	add	r2, r3
 8005b24:	683b      	ldr	r3, [r7, #0]
 8005b26:	005b      	lsls	r3, r3, #1
 8005b28:	fbb2 f2f3 	udiv	r2, r2, r3
 8005b2c:	4b36      	ldr	r3, [pc, #216]	; (8005c08 <LL_USART_SetBaudRate+0x168>)
 8005b2e:	fba3 0302 	umull	r0, r3, r3, r2
 8005b32:	095b      	lsrs	r3, r3, #5
 8005b34:	2064      	movs	r0, #100	; 0x64
 8005b36:	fb00 f303 	mul.w	r3, r0, r3
 8005b3a:	1ad3      	subs	r3, r2, r3
 8005b3c:	00db      	lsls	r3, r3, #3
 8005b3e:	3332      	adds	r3, #50	; 0x32
 8005b40:	4a31      	ldr	r2, [pc, #196]	; (8005c08 <LL_USART_SetBaudRate+0x168>)
 8005b42:	fba2 2303 	umull	r2, r3, r2, r3
 8005b46:	095b      	lsrs	r3, r3, #5
 8005b48:	b29b      	uxth	r3, r3
 8005b4a:	f003 0307 	and.w	r3, r3, #7
 8005b4e:	b29b      	uxth	r3, r3
 8005b50:	440b      	add	r3, r1
 8005b52:	b29b      	uxth	r3, r3
 8005b54:	461a      	mov	r2, r3
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	609a      	str	r2, [r3, #8]
}
 8005b5a:	e04f      	b.n	8005bfc <LL_USART_SetBaudRate+0x15c>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 8005b5c:	68ba      	ldr	r2, [r7, #8]
 8005b5e:	4613      	mov	r3, r2
 8005b60:	009b      	lsls	r3, r3, #2
 8005b62:	4413      	add	r3, r2
 8005b64:	009a      	lsls	r2, r3, #2
 8005b66:	441a      	add	r2, r3
 8005b68:	683b      	ldr	r3, [r7, #0]
 8005b6a:	009b      	lsls	r3, r3, #2
 8005b6c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b70:	4a25      	ldr	r2, [pc, #148]	; (8005c08 <LL_USART_SetBaudRate+0x168>)
 8005b72:	fba2 2303 	umull	r2, r3, r2, r3
 8005b76:	095b      	lsrs	r3, r3, #5
 8005b78:	b29b      	uxth	r3, r3
 8005b7a:	011b      	lsls	r3, r3, #4
 8005b7c:	b299      	uxth	r1, r3
 8005b7e:	68ba      	ldr	r2, [r7, #8]
 8005b80:	4613      	mov	r3, r2
 8005b82:	009b      	lsls	r3, r3, #2
 8005b84:	4413      	add	r3, r2
 8005b86:	009a      	lsls	r2, r3, #2
 8005b88:	441a      	add	r2, r3
 8005b8a:	683b      	ldr	r3, [r7, #0]
 8005b8c:	009b      	lsls	r3, r3, #2
 8005b8e:	fbb2 f2f3 	udiv	r2, r2, r3
 8005b92:	4b1d      	ldr	r3, [pc, #116]	; (8005c08 <LL_USART_SetBaudRate+0x168>)
 8005b94:	fba3 0302 	umull	r0, r3, r3, r2
 8005b98:	095b      	lsrs	r3, r3, #5
 8005b9a:	2064      	movs	r0, #100	; 0x64
 8005b9c:	fb00 f303 	mul.w	r3, r0, r3
 8005ba0:	1ad3      	subs	r3, r2, r3
 8005ba2:	011b      	lsls	r3, r3, #4
 8005ba4:	3332      	adds	r3, #50	; 0x32
 8005ba6:	4a18      	ldr	r2, [pc, #96]	; (8005c08 <LL_USART_SetBaudRate+0x168>)
 8005ba8:	fba2 2303 	umull	r2, r3, r2, r3
 8005bac:	095b      	lsrs	r3, r3, #5
 8005bae:	b29b      	uxth	r3, r3
 8005bb0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005bb4:	b29b      	uxth	r3, r3
 8005bb6:	440b      	add	r3, r1
 8005bb8:	b299      	uxth	r1, r3
 8005bba:	68ba      	ldr	r2, [r7, #8]
 8005bbc:	4613      	mov	r3, r2
 8005bbe:	009b      	lsls	r3, r3, #2
 8005bc0:	4413      	add	r3, r2
 8005bc2:	009a      	lsls	r2, r3, #2
 8005bc4:	441a      	add	r2, r3
 8005bc6:	683b      	ldr	r3, [r7, #0]
 8005bc8:	009b      	lsls	r3, r3, #2
 8005bca:	fbb2 f2f3 	udiv	r2, r2, r3
 8005bce:	4b0e      	ldr	r3, [pc, #56]	; (8005c08 <LL_USART_SetBaudRate+0x168>)
 8005bd0:	fba3 0302 	umull	r0, r3, r3, r2
 8005bd4:	095b      	lsrs	r3, r3, #5
 8005bd6:	2064      	movs	r0, #100	; 0x64
 8005bd8:	fb00 f303 	mul.w	r3, r0, r3
 8005bdc:	1ad3      	subs	r3, r2, r3
 8005bde:	011b      	lsls	r3, r3, #4
 8005be0:	3332      	adds	r3, #50	; 0x32
 8005be2:	4a09      	ldr	r2, [pc, #36]	; (8005c08 <LL_USART_SetBaudRate+0x168>)
 8005be4:	fba2 2303 	umull	r2, r3, r2, r3
 8005be8:	095b      	lsrs	r3, r3, #5
 8005bea:	b29b      	uxth	r3, r3
 8005bec:	f003 030f 	and.w	r3, r3, #15
 8005bf0:	b29b      	uxth	r3, r3
 8005bf2:	440b      	add	r3, r1
 8005bf4:	b29b      	uxth	r3, r3
 8005bf6:	461a      	mov	r2, r3
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	609a      	str	r2, [r3, #8]
}
 8005bfc:	bf00      	nop
 8005bfe:	3714      	adds	r7, #20
 8005c00:	46bd      	mov	sp, r7
 8005c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c06:	4770      	bx	lr
 8005c08:	51eb851f 	.word	0x51eb851f

08005c0c <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, LL_USART_InitTypeDef *USART_InitStruct)
{
 8005c0c:	b580      	push	{r7, lr}
 8005c0e:	b088      	sub	sp, #32
 8005c10:	af00      	add	r7, sp, #0
 8005c12:	6078      	str	r0, [r7, #4]
 8005c14:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 8005c16:	2301      	movs	r3, #1
 8005c18:	77fb      	strb	r3, [r7, #31]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 8005c1a:	2300      	movs	r3, #0
 8005c1c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 8005c1e:	6878      	ldr	r0, [r7, #4]
 8005c20:	f7ff ff04 	bl	8005a2c <LL_USART_IsEnabled>
 8005c24:	4603      	mov	r3, r0
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d16c      	bne.n	8005d04 <LL_USART_Init+0xf8>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	68db      	ldr	r3, [r3, #12]
 8005c2e:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8005c32:	f023 030c 	bic.w	r3, r3, #12
 8005c36:	683a      	ldr	r2, [r7, #0]
 8005c38:	6851      	ldr	r1, [r2, #4]
 8005c3a:	683a      	ldr	r2, [r7, #0]
 8005c3c:	68d2      	ldr	r2, [r2, #12]
 8005c3e:	4311      	orrs	r1, r2
 8005c40:	683a      	ldr	r2, [r7, #0]
 8005c42:	6912      	ldr	r2, [r2, #16]
 8005c44:	4311      	orrs	r1, r2
 8005c46:	683a      	ldr	r2, [r7, #0]
 8005c48:	6992      	ldr	r2, [r2, #24]
 8005c4a:	430a      	orrs	r2, r1
 8005c4c:	431a      	orrs	r2, r3
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	60da      	str	r2, [r3, #12]
    /*---------------------------- USART CR2 Configuration -----------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 8005c52:	683b      	ldr	r3, [r7, #0]
 8005c54:	689b      	ldr	r3, [r3, #8]
 8005c56:	4619      	mov	r1, r3
 8005c58:	6878      	ldr	r0, [r7, #4]
 8005c5a:	f7ff fefb 	bl	8005a54 <LL_USART_SetStopBitsLength>

    /*---------------------------- USART CR3 Configuration -----------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 8005c5e:	683b      	ldr	r3, [r7, #0]
 8005c60:	695b      	ldr	r3, [r3, #20]
 8005c62:	4619      	mov	r1, r3
 8005c64:	6878      	ldr	r0, [r7, #4]
 8005c66:	f7ff ff08 	bl	8005a7a <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration -----------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    LL_RCC_GetSystemClocksFreq(&rcc_clocks);
 8005c6a:	f107 0308 	add.w	r3, r7, #8
 8005c6e:	4618      	mov	r0, r3
 8005c70:	f7ff fe14 	bl	800589c <LL_RCC_GetSystemClocksFreq>
    if (USARTx == USART1)
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	4a26      	ldr	r2, [pc, #152]	; (8005d10 <LL_USART_Init+0x104>)
 8005c78:	4293      	cmp	r3, r2
 8005c7a:	d102      	bne.n	8005c82 <LL_USART_Init+0x76>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 8005c7c:	697b      	ldr	r3, [r7, #20]
 8005c7e:	61bb      	str	r3, [r7, #24]
 8005c80:	e02f      	b.n	8005ce2 <LL_USART_Init+0xd6>
    }
    else if (USARTx == USART2)
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	4a23      	ldr	r2, [pc, #140]	; (8005d14 <LL_USART_Init+0x108>)
 8005c86:	4293      	cmp	r3, r2
 8005c88:	d102      	bne.n	8005c90 <LL_USART_Init+0x84>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8005c8a:	693b      	ldr	r3, [r7, #16]
 8005c8c:	61bb      	str	r3, [r7, #24]
 8005c8e:	e028      	b.n	8005ce2 <LL_USART_Init+0xd6>
    }
#if defined(USART3)
    else if (USARTx == USART3)
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	4a21      	ldr	r2, [pc, #132]	; (8005d18 <LL_USART_Init+0x10c>)
 8005c94:	4293      	cmp	r3, r2
 8005c96:	d102      	bne.n	8005c9e <LL_USART_Init+0x92>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8005c98:	693b      	ldr	r3, [r7, #16]
 8005c9a:	61bb      	str	r3, [r7, #24]
 8005c9c:	e021      	b.n	8005ce2 <LL_USART_Init+0xd6>
    }
#endif /* USART3 */
#if defined(USART6)
    else if (USARTx == USART6)
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	4a1e      	ldr	r2, [pc, #120]	; (8005d1c <LL_USART_Init+0x110>)
 8005ca2:	4293      	cmp	r3, r2
 8005ca4:	d102      	bne.n	8005cac <LL_USART_Init+0xa0>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 8005ca6:	697b      	ldr	r3, [r7, #20]
 8005ca8:	61bb      	str	r3, [r7, #24]
 8005caa:	e01a      	b.n	8005ce2 <LL_USART_Init+0xd6>
    }
#endif /* USART6 */
#if defined(UART4)
    else if (USARTx == UART4)
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	4a1c      	ldr	r2, [pc, #112]	; (8005d20 <LL_USART_Init+0x114>)
 8005cb0:	4293      	cmp	r3, r2
 8005cb2:	d102      	bne.n	8005cba <LL_USART_Init+0xae>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8005cb4:	693b      	ldr	r3, [r7, #16]
 8005cb6:	61bb      	str	r3, [r7, #24]
 8005cb8:	e013      	b.n	8005ce2 <LL_USART_Init+0xd6>
    }
#endif /* UART4 */
#if defined(UART5)
    else if (USARTx == UART5)
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	4a19      	ldr	r2, [pc, #100]	; (8005d24 <LL_USART_Init+0x118>)
 8005cbe:	4293      	cmp	r3, r2
 8005cc0:	d102      	bne.n	8005cc8 <LL_USART_Init+0xbc>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8005cc2:	693b      	ldr	r3, [r7, #16]
 8005cc4:	61bb      	str	r3, [r7, #24]
 8005cc6:	e00c      	b.n	8005ce2 <LL_USART_Init+0xd6>
    }
#endif /* UART5 */
#if defined(UART7)
    else if (USARTx == UART7)
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	4a17      	ldr	r2, [pc, #92]	; (8005d28 <LL_USART_Init+0x11c>)
 8005ccc:	4293      	cmp	r3, r2
 8005cce:	d102      	bne.n	8005cd6 <LL_USART_Init+0xca>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8005cd0:	693b      	ldr	r3, [r7, #16]
 8005cd2:	61bb      	str	r3, [r7, #24]
 8005cd4:	e005      	b.n	8005ce2 <LL_USART_Init+0xd6>
    }
#endif /* UART7 */
#if defined(UART8)
    else if (USARTx == UART8)
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	4a14      	ldr	r2, [pc, #80]	; (8005d2c <LL_USART_Init+0x120>)
 8005cda:	4293      	cmp	r3, r2
 8005cdc:	d101      	bne.n	8005ce2 <LL_USART_Init+0xd6>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8005cde:	693b      	ldr	r3, [r7, #16]
 8005ce0:	61bb      	str	r3, [r7, #24]

    /* Configure the USART Baud Rate :
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 8005ce2:	69bb      	ldr	r3, [r7, #24]
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d00d      	beq.n	8005d04 <LL_USART_Init+0xf8>
        && (USART_InitStruct->BaudRate != 0U))
 8005ce8:	683b      	ldr	r3, [r7, #0]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	d009      	beq.n	8005d04 <LL_USART_Init+0xf8>
    {
      status = SUCCESS;
 8005cf0:	2300      	movs	r3, #0
 8005cf2:	77fb      	strb	r3, [r7, #31]
      LL_USART_SetBaudRate(USARTx,
 8005cf4:	683b      	ldr	r3, [r7, #0]
 8005cf6:	699a      	ldr	r2, [r3, #24]
 8005cf8:	683b      	ldr	r3, [r7, #0]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	69b9      	ldr	r1, [r7, #24]
 8005cfe:	6878      	ldr	r0, [r7, #4]
 8005d00:	f7ff fece 	bl	8005aa0 <LL_USART_SetBaudRate>
      assert_param(IS_LL_USART_BRR_MAX(USARTx->BRR));
    }
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 8005d04:	7ffb      	ldrb	r3, [r7, #31]
}
 8005d06:	4618      	mov	r0, r3
 8005d08:	3720      	adds	r7, #32
 8005d0a:	46bd      	mov	sp, r7
 8005d0c:	bd80      	pop	{r7, pc}
 8005d0e:	bf00      	nop
 8005d10:	40011000 	.word	0x40011000
 8005d14:	40004400 	.word	0x40004400
 8005d18:	40004800 	.word	0x40004800
 8005d1c:	40011400 	.word	0x40011400
 8005d20:	40004c00 	.word	0x40004c00
 8005d24:	40005000 	.word	0x40005000
 8005d28:	40007800 	.word	0x40007800
 8005d2c:	40007c00 	.word	0x40007c00

08005d30 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005d30:	b084      	sub	sp, #16
 8005d32:	b580      	push	{r7, lr}
 8005d34:	b084      	sub	sp, #16
 8005d36:	af00      	add	r7, sp, #0
 8005d38:	6078      	str	r0, [r7, #4]
 8005d3a:	f107 001c 	add.w	r0, r7, #28
 8005d3e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005d42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d44:	2b01      	cmp	r3, #1
 8005d46:	d122      	bne.n	8005d8e <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d4c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	68db      	ldr	r3, [r3, #12]
 8005d58:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8005d5c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005d60:	687a      	ldr	r2, [r7, #4]
 8005d62:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	68db      	ldr	r3, [r3, #12]
 8005d68:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005d70:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005d72:	2b01      	cmp	r3, #1
 8005d74:	d105      	bne.n	8005d82 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	68db      	ldr	r3, [r3, #12]
 8005d7a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8005d82:	6878      	ldr	r0, [r7, #4]
 8005d84:	f001 fa7c 	bl	8007280 <USB_CoreReset>
 8005d88:	4603      	mov	r3, r0
 8005d8a:	73fb      	strb	r3, [r7, #15]
 8005d8c:	e01a      	b.n	8005dc4 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	68db      	ldr	r3, [r3, #12]
 8005d92:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 8005d9a:	6878      	ldr	r0, [r7, #4]
 8005d9c:	f001 fa70 	bl	8007280 <USB_CoreReset>
 8005da0:	4603      	mov	r3, r0
 8005da2:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8005da4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d106      	bne.n	8005db8 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005dae:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	639a      	str	r2, [r3, #56]	; 0x38
 8005db6:	e005      	b.n	8005dc4 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005dbc:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8005dc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005dc6:	2b01      	cmp	r3, #1
 8005dc8:	d10b      	bne.n	8005de2 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	689b      	ldr	r3, [r3, #8]
 8005dce:	f043 0206 	orr.w	r2, r3, #6
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	689b      	ldr	r3, [r3, #8]
 8005dda:	f043 0220 	orr.w	r2, r3, #32
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8005de2:	7bfb      	ldrb	r3, [r7, #15]
}
 8005de4:	4618      	mov	r0, r3
 8005de6:	3710      	adds	r7, #16
 8005de8:	46bd      	mov	sp, r7
 8005dea:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005dee:	b004      	add	sp, #16
 8005df0:	4770      	bx	lr
	...

08005df4 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8005df4:	b480      	push	{r7}
 8005df6:	b087      	sub	sp, #28
 8005df8:	af00      	add	r7, sp, #0
 8005dfa:	60f8      	str	r0, [r7, #12]
 8005dfc:	60b9      	str	r1, [r7, #8]
 8005dfe:	4613      	mov	r3, r2
 8005e00:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8005e02:	79fb      	ldrb	r3, [r7, #7]
 8005e04:	2b02      	cmp	r3, #2
 8005e06:	d165      	bne.n	8005ed4 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8005e08:	68bb      	ldr	r3, [r7, #8]
 8005e0a:	4a41      	ldr	r2, [pc, #260]	; (8005f10 <USB_SetTurnaroundTime+0x11c>)
 8005e0c:	4293      	cmp	r3, r2
 8005e0e:	d906      	bls.n	8005e1e <USB_SetTurnaroundTime+0x2a>
 8005e10:	68bb      	ldr	r3, [r7, #8]
 8005e12:	4a40      	ldr	r2, [pc, #256]	; (8005f14 <USB_SetTurnaroundTime+0x120>)
 8005e14:	4293      	cmp	r3, r2
 8005e16:	d802      	bhi.n	8005e1e <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8005e18:	230f      	movs	r3, #15
 8005e1a:	617b      	str	r3, [r7, #20]
 8005e1c:	e062      	b.n	8005ee4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8005e1e:	68bb      	ldr	r3, [r7, #8]
 8005e20:	4a3c      	ldr	r2, [pc, #240]	; (8005f14 <USB_SetTurnaroundTime+0x120>)
 8005e22:	4293      	cmp	r3, r2
 8005e24:	d906      	bls.n	8005e34 <USB_SetTurnaroundTime+0x40>
 8005e26:	68bb      	ldr	r3, [r7, #8]
 8005e28:	4a3b      	ldr	r2, [pc, #236]	; (8005f18 <USB_SetTurnaroundTime+0x124>)
 8005e2a:	4293      	cmp	r3, r2
 8005e2c:	d802      	bhi.n	8005e34 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8005e2e:	230e      	movs	r3, #14
 8005e30:	617b      	str	r3, [r7, #20]
 8005e32:	e057      	b.n	8005ee4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8005e34:	68bb      	ldr	r3, [r7, #8]
 8005e36:	4a38      	ldr	r2, [pc, #224]	; (8005f18 <USB_SetTurnaroundTime+0x124>)
 8005e38:	4293      	cmp	r3, r2
 8005e3a:	d906      	bls.n	8005e4a <USB_SetTurnaroundTime+0x56>
 8005e3c:	68bb      	ldr	r3, [r7, #8]
 8005e3e:	4a37      	ldr	r2, [pc, #220]	; (8005f1c <USB_SetTurnaroundTime+0x128>)
 8005e40:	4293      	cmp	r3, r2
 8005e42:	d802      	bhi.n	8005e4a <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8005e44:	230d      	movs	r3, #13
 8005e46:	617b      	str	r3, [r7, #20]
 8005e48:	e04c      	b.n	8005ee4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8005e4a:	68bb      	ldr	r3, [r7, #8]
 8005e4c:	4a33      	ldr	r2, [pc, #204]	; (8005f1c <USB_SetTurnaroundTime+0x128>)
 8005e4e:	4293      	cmp	r3, r2
 8005e50:	d906      	bls.n	8005e60 <USB_SetTurnaroundTime+0x6c>
 8005e52:	68bb      	ldr	r3, [r7, #8]
 8005e54:	4a32      	ldr	r2, [pc, #200]	; (8005f20 <USB_SetTurnaroundTime+0x12c>)
 8005e56:	4293      	cmp	r3, r2
 8005e58:	d802      	bhi.n	8005e60 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8005e5a:	230c      	movs	r3, #12
 8005e5c:	617b      	str	r3, [r7, #20]
 8005e5e:	e041      	b.n	8005ee4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8005e60:	68bb      	ldr	r3, [r7, #8]
 8005e62:	4a2f      	ldr	r2, [pc, #188]	; (8005f20 <USB_SetTurnaroundTime+0x12c>)
 8005e64:	4293      	cmp	r3, r2
 8005e66:	d906      	bls.n	8005e76 <USB_SetTurnaroundTime+0x82>
 8005e68:	68bb      	ldr	r3, [r7, #8]
 8005e6a:	4a2e      	ldr	r2, [pc, #184]	; (8005f24 <USB_SetTurnaroundTime+0x130>)
 8005e6c:	4293      	cmp	r3, r2
 8005e6e:	d802      	bhi.n	8005e76 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8005e70:	230b      	movs	r3, #11
 8005e72:	617b      	str	r3, [r7, #20]
 8005e74:	e036      	b.n	8005ee4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8005e76:	68bb      	ldr	r3, [r7, #8]
 8005e78:	4a2a      	ldr	r2, [pc, #168]	; (8005f24 <USB_SetTurnaroundTime+0x130>)
 8005e7a:	4293      	cmp	r3, r2
 8005e7c:	d906      	bls.n	8005e8c <USB_SetTurnaroundTime+0x98>
 8005e7e:	68bb      	ldr	r3, [r7, #8]
 8005e80:	4a29      	ldr	r2, [pc, #164]	; (8005f28 <USB_SetTurnaroundTime+0x134>)
 8005e82:	4293      	cmp	r3, r2
 8005e84:	d802      	bhi.n	8005e8c <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8005e86:	230a      	movs	r3, #10
 8005e88:	617b      	str	r3, [r7, #20]
 8005e8a:	e02b      	b.n	8005ee4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8005e8c:	68bb      	ldr	r3, [r7, #8]
 8005e8e:	4a26      	ldr	r2, [pc, #152]	; (8005f28 <USB_SetTurnaroundTime+0x134>)
 8005e90:	4293      	cmp	r3, r2
 8005e92:	d906      	bls.n	8005ea2 <USB_SetTurnaroundTime+0xae>
 8005e94:	68bb      	ldr	r3, [r7, #8]
 8005e96:	4a25      	ldr	r2, [pc, #148]	; (8005f2c <USB_SetTurnaroundTime+0x138>)
 8005e98:	4293      	cmp	r3, r2
 8005e9a:	d802      	bhi.n	8005ea2 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8005e9c:	2309      	movs	r3, #9
 8005e9e:	617b      	str	r3, [r7, #20]
 8005ea0:	e020      	b.n	8005ee4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8005ea2:	68bb      	ldr	r3, [r7, #8]
 8005ea4:	4a21      	ldr	r2, [pc, #132]	; (8005f2c <USB_SetTurnaroundTime+0x138>)
 8005ea6:	4293      	cmp	r3, r2
 8005ea8:	d906      	bls.n	8005eb8 <USB_SetTurnaroundTime+0xc4>
 8005eaa:	68bb      	ldr	r3, [r7, #8]
 8005eac:	4a20      	ldr	r2, [pc, #128]	; (8005f30 <USB_SetTurnaroundTime+0x13c>)
 8005eae:	4293      	cmp	r3, r2
 8005eb0:	d802      	bhi.n	8005eb8 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8005eb2:	2308      	movs	r3, #8
 8005eb4:	617b      	str	r3, [r7, #20]
 8005eb6:	e015      	b.n	8005ee4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8005eb8:	68bb      	ldr	r3, [r7, #8]
 8005eba:	4a1d      	ldr	r2, [pc, #116]	; (8005f30 <USB_SetTurnaroundTime+0x13c>)
 8005ebc:	4293      	cmp	r3, r2
 8005ebe:	d906      	bls.n	8005ece <USB_SetTurnaroundTime+0xda>
 8005ec0:	68bb      	ldr	r3, [r7, #8]
 8005ec2:	4a1c      	ldr	r2, [pc, #112]	; (8005f34 <USB_SetTurnaroundTime+0x140>)
 8005ec4:	4293      	cmp	r3, r2
 8005ec6:	d802      	bhi.n	8005ece <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8005ec8:	2307      	movs	r3, #7
 8005eca:	617b      	str	r3, [r7, #20]
 8005ecc:	e00a      	b.n	8005ee4 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8005ece:	2306      	movs	r3, #6
 8005ed0:	617b      	str	r3, [r7, #20]
 8005ed2:	e007      	b.n	8005ee4 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8005ed4:	79fb      	ldrb	r3, [r7, #7]
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d102      	bne.n	8005ee0 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8005eda:	2309      	movs	r3, #9
 8005edc:	617b      	str	r3, [r7, #20]
 8005ede:	e001      	b.n	8005ee4 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8005ee0:	2309      	movs	r3, #9
 8005ee2:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	68db      	ldr	r3, [r3, #12]
 8005ee8:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	68da      	ldr	r2, [r3, #12]
 8005ef4:	697b      	ldr	r3, [r7, #20]
 8005ef6:	029b      	lsls	r3, r3, #10
 8005ef8:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8005efc:	431a      	orrs	r2, r3
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005f02:	2300      	movs	r3, #0
}
 8005f04:	4618      	mov	r0, r3
 8005f06:	371c      	adds	r7, #28
 8005f08:	46bd      	mov	sp, r7
 8005f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f0e:	4770      	bx	lr
 8005f10:	00d8acbf 	.word	0x00d8acbf
 8005f14:	00e4e1bf 	.word	0x00e4e1bf
 8005f18:	00f423ff 	.word	0x00f423ff
 8005f1c:	0106737f 	.word	0x0106737f
 8005f20:	011a499f 	.word	0x011a499f
 8005f24:	01312cff 	.word	0x01312cff
 8005f28:	014ca43f 	.word	0x014ca43f
 8005f2c:	016e35ff 	.word	0x016e35ff
 8005f30:	01a6ab1f 	.word	0x01a6ab1f
 8005f34:	01e847ff 	.word	0x01e847ff

08005f38 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005f38:	b480      	push	{r7}
 8005f3a:	b083      	sub	sp, #12
 8005f3c:	af00      	add	r7, sp, #0
 8005f3e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	689b      	ldr	r3, [r3, #8]
 8005f44:	f043 0201 	orr.w	r2, r3, #1
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005f4c:	2300      	movs	r3, #0
}
 8005f4e:	4618      	mov	r0, r3
 8005f50:	370c      	adds	r7, #12
 8005f52:	46bd      	mov	sp, r7
 8005f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f58:	4770      	bx	lr

08005f5a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005f5a:	b480      	push	{r7}
 8005f5c:	b083      	sub	sp, #12
 8005f5e:	af00      	add	r7, sp, #0
 8005f60:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	689b      	ldr	r3, [r3, #8]
 8005f66:	f023 0201 	bic.w	r2, r3, #1
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005f6e:	2300      	movs	r3, #0
}
 8005f70:	4618      	mov	r0, r3
 8005f72:	370c      	adds	r7, #12
 8005f74:	46bd      	mov	sp, r7
 8005f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f7a:	4770      	bx	lr

08005f7c <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005f7c:	b580      	push	{r7, lr}
 8005f7e:	b082      	sub	sp, #8
 8005f80:	af00      	add	r7, sp, #0
 8005f82:	6078      	str	r0, [r7, #4]
 8005f84:	460b      	mov	r3, r1
 8005f86:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	68db      	ldr	r3, [r3, #12]
 8005f8c:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005f94:	78fb      	ldrb	r3, [r7, #3]
 8005f96:	2b01      	cmp	r3, #1
 8005f98:	d106      	bne.n	8005fa8 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	68db      	ldr	r3, [r3, #12]
 8005f9e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	60da      	str	r2, [r3, #12]
 8005fa6:	e00b      	b.n	8005fc0 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8005fa8:	78fb      	ldrb	r3, [r7, #3]
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d106      	bne.n	8005fbc <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	68db      	ldr	r3, [r3, #12]
 8005fb2:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	60da      	str	r2, [r3, #12]
 8005fba:	e001      	b.n	8005fc0 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8005fbc:	2301      	movs	r3, #1
 8005fbe:	e003      	b.n	8005fc8 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8005fc0:	2032      	movs	r0, #50	; 0x32
 8005fc2:	f7fb fec5 	bl	8001d50 <HAL_Delay>

  return HAL_OK;
 8005fc6:	2300      	movs	r3, #0
}
 8005fc8:	4618      	mov	r0, r3
 8005fca:	3708      	adds	r7, #8
 8005fcc:	46bd      	mov	sp, r7
 8005fce:	bd80      	pop	{r7, pc}

08005fd0 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005fd0:	b084      	sub	sp, #16
 8005fd2:	b580      	push	{r7, lr}
 8005fd4:	b086      	sub	sp, #24
 8005fd6:	af00      	add	r7, sp, #0
 8005fd8:	6078      	str	r0, [r7, #4]
 8005fda:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8005fde:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8005fe2:	2300      	movs	r3, #0
 8005fe4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8005fea:	2300      	movs	r3, #0
 8005fec:	613b      	str	r3, [r7, #16]
 8005fee:	e009      	b.n	8006004 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8005ff0:	687a      	ldr	r2, [r7, #4]
 8005ff2:	693b      	ldr	r3, [r7, #16]
 8005ff4:	3340      	adds	r3, #64	; 0x40
 8005ff6:	009b      	lsls	r3, r3, #2
 8005ff8:	4413      	add	r3, r2
 8005ffa:	2200      	movs	r2, #0
 8005ffc:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8005ffe:	693b      	ldr	r3, [r7, #16]
 8006000:	3301      	adds	r3, #1
 8006002:	613b      	str	r3, [r7, #16]
 8006004:	693b      	ldr	r3, [r7, #16]
 8006006:	2b0e      	cmp	r3, #14
 8006008:	d9f2      	bls.n	8005ff0 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800600a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800600c:	2b00      	cmp	r3, #0
 800600e:	d112      	bne.n	8006036 <USB_DevInit+0x66>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006014:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006020:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800602c:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	639a      	str	r2, [r3, #56]	; 0x38
 8006034:	e00b      	b.n	800604e <USB_DevInit+0x7e>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GOTGCTL &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	601a      	str	r2, [r3, #0]
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006046:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006054:	461a      	mov	r2, r3
 8006056:	2300      	movs	r3, #0
 8006058:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006060:	4619      	mov	r1, r3
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006068:	461a      	mov	r2, r3
 800606a:	680b      	ldr	r3, [r1, #0]
 800606c:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800606e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006070:	2b01      	cmp	r3, #1
 8006072:	d10c      	bne.n	800608e <USB_DevInit+0xbe>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8006074:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006076:	2b00      	cmp	r3, #0
 8006078:	d104      	bne.n	8006084 <USB_DevInit+0xb4>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800607a:	2100      	movs	r1, #0
 800607c:	6878      	ldr	r0, [r7, #4]
 800607e:	f000 f961 	bl	8006344 <USB_SetDevSpeed>
 8006082:	e008      	b.n	8006096 <USB_DevInit+0xc6>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8006084:	2101      	movs	r1, #1
 8006086:	6878      	ldr	r0, [r7, #4]
 8006088:	f000 f95c 	bl	8006344 <USB_SetDevSpeed>
 800608c:	e003      	b.n	8006096 <USB_DevInit+0xc6>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800608e:	2103      	movs	r1, #3
 8006090:	6878      	ldr	r0, [r7, #4]
 8006092:	f000 f957 	bl	8006344 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006096:	2110      	movs	r1, #16
 8006098:	6878      	ldr	r0, [r7, #4]
 800609a:	f000 f90b 	bl	80062b4 <USB_FlushTxFifo>
 800609e:	4603      	mov	r3, r0
 80060a0:	2b00      	cmp	r3, #0
 80060a2:	d001      	beq.n	80060a8 <USB_DevInit+0xd8>
  {
    ret = HAL_ERROR;
 80060a4:	2301      	movs	r3, #1
 80060a6:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80060a8:	6878      	ldr	r0, [r7, #4]
 80060aa:	f000 f929 	bl	8006300 <USB_FlushRxFifo>
 80060ae:	4603      	mov	r3, r0
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	d001      	beq.n	80060b8 <USB_DevInit+0xe8>
  {
    ret = HAL_ERROR;
 80060b4:	2301      	movs	r3, #1
 80060b6:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80060be:	461a      	mov	r2, r3
 80060c0:	2300      	movs	r3, #0
 80060c2:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80060ca:	461a      	mov	r2, r3
 80060cc:	2300      	movs	r3, #0
 80060ce:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80060d6:	461a      	mov	r2, r3
 80060d8:	2300      	movs	r3, #0
 80060da:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80060dc:	2300      	movs	r3, #0
 80060de:	613b      	str	r3, [r7, #16]
 80060e0:	e043      	b.n	800616a <USB_DevInit+0x19a>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80060e2:	693b      	ldr	r3, [r7, #16]
 80060e4:	015a      	lsls	r2, r3, #5
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	4413      	add	r3, r2
 80060ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80060f4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80060f8:	d118      	bne.n	800612c <USB_DevInit+0x15c>
    {
      if (i == 0U)
 80060fa:	693b      	ldr	r3, [r7, #16]
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	d10a      	bne.n	8006116 <USB_DevInit+0x146>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8006100:	693b      	ldr	r3, [r7, #16]
 8006102:	015a      	lsls	r2, r3, #5
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	4413      	add	r3, r2
 8006108:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800610c:	461a      	mov	r2, r3
 800610e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006112:	6013      	str	r3, [r2, #0]
 8006114:	e013      	b.n	800613e <USB_DevInit+0x16e>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8006116:	693b      	ldr	r3, [r7, #16]
 8006118:	015a      	lsls	r2, r3, #5
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	4413      	add	r3, r2
 800611e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006122:	461a      	mov	r2, r3
 8006124:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006128:	6013      	str	r3, [r2, #0]
 800612a:	e008      	b.n	800613e <USB_DevInit+0x16e>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800612c:	693b      	ldr	r3, [r7, #16]
 800612e:	015a      	lsls	r2, r3, #5
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	4413      	add	r3, r2
 8006134:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006138:	461a      	mov	r2, r3
 800613a:	2300      	movs	r3, #0
 800613c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800613e:	693b      	ldr	r3, [r7, #16]
 8006140:	015a      	lsls	r2, r3, #5
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	4413      	add	r3, r2
 8006146:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800614a:	461a      	mov	r2, r3
 800614c:	2300      	movs	r3, #0
 800614e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8006150:	693b      	ldr	r3, [r7, #16]
 8006152:	015a      	lsls	r2, r3, #5
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	4413      	add	r3, r2
 8006158:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800615c:	461a      	mov	r2, r3
 800615e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006162:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006164:	693b      	ldr	r3, [r7, #16]
 8006166:	3301      	adds	r3, #1
 8006168:	613b      	str	r3, [r7, #16]
 800616a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800616c:	693a      	ldr	r2, [r7, #16]
 800616e:	429a      	cmp	r2, r3
 8006170:	d3b7      	bcc.n	80060e2 <USB_DevInit+0x112>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006172:	2300      	movs	r3, #0
 8006174:	613b      	str	r3, [r7, #16]
 8006176:	e043      	b.n	8006200 <USB_DevInit+0x230>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006178:	693b      	ldr	r3, [r7, #16]
 800617a:	015a      	lsls	r2, r3, #5
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	4413      	add	r3, r2
 8006180:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800618a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800618e:	d118      	bne.n	80061c2 <USB_DevInit+0x1f2>
    {
      if (i == 0U)
 8006190:	693b      	ldr	r3, [r7, #16]
 8006192:	2b00      	cmp	r3, #0
 8006194:	d10a      	bne.n	80061ac <USB_DevInit+0x1dc>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8006196:	693b      	ldr	r3, [r7, #16]
 8006198:	015a      	lsls	r2, r3, #5
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	4413      	add	r3, r2
 800619e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80061a2:	461a      	mov	r2, r3
 80061a4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80061a8:	6013      	str	r3, [r2, #0]
 80061aa:	e013      	b.n	80061d4 <USB_DevInit+0x204>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80061ac:	693b      	ldr	r3, [r7, #16]
 80061ae:	015a      	lsls	r2, r3, #5
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	4413      	add	r3, r2
 80061b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80061b8:	461a      	mov	r2, r3
 80061ba:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80061be:	6013      	str	r3, [r2, #0]
 80061c0:	e008      	b.n	80061d4 <USB_DevInit+0x204>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80061c2:	693b      	ldr	r3, [r7, #16]
 80061c4:	015a      	lsls	r2, r3, #5
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	4413      	add	r3, r2
 80061ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80061ce:	461a      	mov	r2, r3
 80061d0:	2300      	movs	r3, #0
 80061d2:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80061d4:	693b      	ldr	r3, [r7, #16]
 80061d6:	015a      	lsls	r2, r3, #5
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	4413      	add	r3, r2
 80061dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80061e0:	461a      	mov	r2, r3
 80061e2:	2300      	movs	r3, #0
 80061e4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80061e6:	693b      	ldr	r3, [r7, #16]
 80061e8:	015a      	lsls	r2, r3, #5
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	4413      	add	r3, r2
 80061ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80061f2:	461a      	mov	r2, r3
 80061f4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80061f8:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80061fa:	693b      	ldr	r3, [r7, #16]
 80061fc:	3301      	adds	r3, #1
 80061fe:	613b      	str	r3, [r7, #16]
 8006200:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006202:	693a      	ldr	r2, [r7, #16]
 8006204:	429a      	cmp	r2, r3
 8006206:	d3b7      	bcc.n	8006178 <USB_DevInit+0x1a8>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800620e:	691b      	ldr	r3, [r3, #16]
 8006210:	68fa      	ldr	r2, [r7, #12]
 8006212:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006216:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800621a:	6113      	str	r3, [r2, #16]

  if (cfg.dma_enable == 1U)
 800621c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800621e:	2b01      	cmp	r3, #1
 8006220:	d111      	bne.n	8006246 <USB_DevInit+0x276>
  {
    /*Set threshold parameters */
    USBx_DEVICE->DTHRCTL = USB_OTG_DTHRCTL_TXTHRLEN_6 |
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006228:	461a      	mov	r2, r3
 800622a:	4b20      	ldr	r3, [pc, #128]	; (80062ac <USB_DevInit+0x2dc>)
 800622c:	6313      	str	r3, [r2, #48]	; 0x30
                           USB_OTG_DTHRCTL_RXTHRLEN_6;

    USBx_DEVICE->DTHRCTL |= USB_OTG_DTHRCTL_RXTHREN |
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006234:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006236:	68fa      	ldr	r2, [r7, #12]
 8006238:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800623c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006240:	f043 0303 	orr.w	r3, r3, #3
 8006244:	6313      	str	r3, [r2, #48]	; 0x30
                            USB_OTG_DTHRCTL_ISOTHREN |
                            USB_OTG_DTHRCTL_NONISOTHREN;
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	2200      	movs	r2, #0
 800624a:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8006252:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8006254:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006256:	2b00      	cmp	r3, #0
 8006258:	d105      	bne.n	8006266 <USB_DevInit+0x296>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	699b      	ldr	r3, [r3, #24]
 800625e:	f043 0210 	orr.w	r2, r3, #16
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	699a      	ldr	r2, [r3, #24]
 800626a:	4b11      	ldr	r3, [pc, #68]	; (80062b0 <USB_DevInit+0x2e0>)
 800626c:	4313      	orrs	r3, r2
 800626e:	687a      	ldr	r2, [r7, #4]
 8006270:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8006272:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006274:	2b00      	cmp	r3, #0
 8006276:	d005      	beq.n	8006284 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	699b      	ldr	r3, [r3, #24]
 800627c:	f043 0208 	orr.w	r2, r3, #8
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8006284:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006286:	2b01      	cmp	r3, #1
 8006288:	d107      	bne.n	800629a <USB_DevInit+0x2ca>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	699b      	ldr	r3, [r3, #24]
 800628e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006292:	f043 0304 	orr.w	r3, r3, #4
 8006296:	687a      	ldr	r2, [r7, #4]
 8006298:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800629a:	7dfb      	ldrb	r3, [r7, #23]
}
 800629c:	4618      	mov	r0, r3
 800629e:	3718      	adds	r7, #24
 80062a0:	46bd      	mov	sp, r7
 80062a2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80062a6:	b004      	add	sp, #16
 80062a8:	4770      	bx	lr
 80062aa:	bf00      	nop
 80062ac:	00800100 	.word	0x00800100
 80062b0:	803c3800 	.word	0x803c3800

080062b4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80062b4:	b480      	push	{r7}
 80062b6:	b085      	sub	sp, #20
 80062b8:	af00      	add	r7, sp, #0
 80062ba:	6078      	str	r0, [r7, #4]
 80062bc:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 80062be:	2300      	movs	r3, #0
 80062c0:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80062c2:	683b      	ldr	r3, [r7, #0]
 80062c4:	019b      	lsls	r3, r3, #6
 80062c6:	f043 0220 	orr.w	r2, r3, #32
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	3301      	adds	r3, #1
 80062d2:	60fb      	str	r3, [r7, #12]
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	4a09      	ldr	r2, [pc, #36]	; (80062fc <USB_FlushTxFifo+0x48>)
 80062d8:	4293      	cmp	r3, r2
 80062da:	d901      	bls.n	80062e0 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 80062dc:	2303      	movs	r3, #3
 80062de:	e006      	b.n	80062ee <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	691b      	ldr	r3, [r3, #16]
 80062e4:	f003 0320 	and.w	r3, r3, #32
 80062e8:	2b20      	cmp	r3, #32
 80062ea:	d0f0      	beq.n	80062ce <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 80062ec:	2300      	movs	r3, #0
}
 80062ee:	4618      	mov	r0, r3
 80062f0:	3714      	adds	r7, #20
 80062f2:	46bd      	mov	sp, r7
 80062f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062f8:	4770      	bx	lr
 80062fa:	bf00      	nop
 80062fc:	00030d40 	.word	0x00030d40

08006300 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006300:	b480      	push	{r7}
 8006302:	b085      	sub	sp, #20
 8006304:	af00      	add	r7, sp, #0
 8006306:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8006308:	2300      	movs	r3, #0
 800630a:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	2210      	movs	r2, #16
 8006310:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	3301      	adds	r3, #1
 8006316:	60fb      	str	r3, [r7, #12]
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	4a09      	ldr	r2, [pc, #36]	; (8006340 <USB_FlushRxFifo+0x40>)
 800631c:	4293      	cmp	r3, r2
 800631e:	d901      	bls.n	8006324 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8006320:	2303      	movs	r3, #3
 8006322:	e006      	b.n	8006332 <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	691b      	ldr	r3, [r3, #16]
 8006328:	f003 0310 	and.w	r3, r3, #16
 800632c:	2b10      	cmp	r3, #16
 800632e:	d0f0      	beq.n	8006312 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8006330:	2300      	movs	r3, #0
}
 8006332:	4618      	mov	r0, r3
 8006334:	3714      	adds	r7, #20
 8006336:	46bd      	mov	sp, r7
 8006338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800633c:	4770      	bx	lr
 800633e:	bf00      	nop
 8006340:	00030d40 	.word	0x00030d40

08006344 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8006344:	b480      	push	{r7}
 8006346:	b085      	sub	sp, #20
 8006348:	af00      	add	r7, sp, #0
 800634a:	6078      	str	r0, [r7, #4]
 800634c:	460b      	mov	r3, r1
 800634e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800635a:	681a      	ldr	r2, [r3, #0]
 800635c:	78fb      	ldrb	r3, [r7, #3]
 800635e:	68f9      	ldr	r1, [r7, #12]
 8006360:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006364:	4313      	orrs	r3, r2
 8006366:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8006368:	2300      	movs	r3, #0
}
 800636a:	4618      	mov	r0, r3
 800636c:	3714      	adds	r7, #20
 800636e:	46bd      	mov	sp, r7
 8006370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006374:	4770      	bx	lr

08006376 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg PCD_SPEED_HIGH: High speed mode
  *            @arg PCD_SPEED_FULL: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8006376:	b480      	push	{r7}
 8006378:	b087      	sub	sp, #28
 800637a:	af00      	add	r7, sp, #0
 800637c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8006382:	693b      	ldr	r3, [r7, #16]
 8006384:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006388:	689b      	ldr	r3, [r3, #8]
 800638a:	f003 0306 	and.w	r3, r3, #6
 800638e:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	2b00      	cmp	r3, #0
 8006394:	d102      	bne.n	800639c <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8006396:	2300      	movs	r3, #0
 8006398:	75fb      	strb	r3, [r7, #23]
 800639a:	e00a      	b.n	80063b2 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	2b02      	cmp	r3, #2
 80063a0:	d002      	beq.n	80063a8 <USB_GetDevSpeed+0x32>
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	2b06      	cmp	r3, #6
 80063a6:	d102      	bne.n	80063ae <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80063a8:	2302      	movs	r3, #2
 80063aa:	75fb      	strb	r3, [r7, #23]
 80063ac:	e001      	b.n	80063b2 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 80063ae:	230f      	movs	r3, #15
 80063b0:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80063b2:	7dfb      	ldrb	r3, [r7, #23]
}
 80063b4:	4618      	mov	r0, r3
 80063b6:	371c      	adds	r7, #28
 80063b8:	46bd      	mov	sp, r7
 80063ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063be:	4770      	bx	lr

080063c0 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80063c0:	b480      	push	{r7}
 80063c2:	b085      	sub	sp, #20
 80063c4:	af00      	add	r7, sp, #0
 80063c6:	6078      	str	r0, [r7, #4]
 80063c8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80063ce:	683b      	ldr	r3, [r7, #0]
 80063d0:	781b      	ldrb	r3, [r3, #0]
 80063d2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80063d4:	683b      	ldr	r3, [r7, #0]
 80063d6:	785b      	ldrb	r3, [r3, #1]
 80063d8:	2b01      	cmp	r3, #1
 80063da:	d13a      	bne.n	8006452 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80063e2:	69da      	ldr	r2, [r3, #28]
 80063e4:	683b      	ldr	r3, [r7, #0]
 80063e6:	781b      	ldrb	r3, [r3, #0]
 80063e8:	f003 030f 	and.w	r3, r3, #15
 80063ec:	2101      	movs	r1, #1
 80063ee:	fa01 f303 	lsl.w	r3, r1, r3
 80063f2:	b29b      	uxth	r3, r3
 80063f4:	68f9      	ldr	r1, [r7, #12]
 80063f6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80063fa:	4313      	orrs	r3, r2
 80063fc:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80063fe:	68bb      	ldr	r3, [r7, #8]
 8006400:	015a      	lsls	r2, r3, #5
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	4413      	add	r3, r2
 8006406:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006410:	2b00      	cmp	r3, #0
 8006412:	d155      	bne.n	80064c0 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006414:	68bb      	ldr	r3, [r7, #8]
 8006416:	015a      	lsls	r2, r3, #5
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	4413      	add	r3, r2
 800641c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006420:	681a      	ldr	r2, [r3, #0]
 8006422:	683b      	ldr	r3, [r7, #0]
 8006424:	689b      	ldr	r3, [r3, #8]
 8006426:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800642a:	683b      	ldr	r3, [r7, #0]
 800642c:	78db      	ldrb	r3, [r3, #3]
 800642e:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006430:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8006432:	68bb      	ldr	r3, [r7, #8]
 8006434:	059b      	lsls	r3, r3, #22
 8006436:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006438:	4313      	orrs	r3, r2
 800643a:	68ba      	ldr	r2, [r7, #8]
 800643c:	0151      	lsls	r1, r2, #5
 800643e:	68fa      	ldr	r2, [r7, #12]
 8006440:	440a      	add	r2, r1
 8006442:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006446:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800644a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800644e:	6013      	str	r3, [r2, #0]
 8006450:	e036      	b.n	80064c0 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006458:	69da      	ldr	r2, [r3, #28]
 800645a:	683b      	ldr	r3, [r7, #0]
 800645c:	781b      	ldrb	r3, [r3, #0]
 800645e:	f003 030f 	and.w	r3, r3, #15
 8006462:	2101      	movs	r1, #1
 8006464:	fa01 f303 	lsl.w	r3, r1, r3
 8006468:	041b      	lsls	r3, r3, #16
 800646a:	68f9      	ldr	r1, [r7, #12]
 800646c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006470:	4313      	orrs	r3, r2
 8006472:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8006474:	68bb      	ldr	r3, [r7, #8]
 8006476:	015a      	lsls	r2, r3, #5
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	4413      	add	r3, r2
 800647c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006486:	2b00      	cmp	r3, #0
 8006488:	d11a      	bne.n	80064c0 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800648a:	68bb      	ldr	r3, [r7, #8]
 800648c:	015a      	lsls	r2, r3, #5
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	4413      	add	r3, r2
 8006492:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006496:	681a      	ldr	r2, [r3, #0]
 8006498:	683b      	ldr	r3, [r7, #0]
 800649a:	689b      	ldr	r3, [r3, #8]
 800649c:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80064a0:	683b      	ldr	r3, [r7, #0]
 80064a2:	78db      	ldrb	r3, [r3, #3]
 80064a4:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80064a6:	430b      	orrs	r3, r1
 80064a8:	4313      	orrs	r3, r2
 80064aa:	68ba      	ldr	r2, [r7, #8]
 80064ac:	0151      	lsls	r1, r2, #5
 80064ae:	68fa      	ldr	r2, [r7, #12]
 80064b0:	440a      	add	r2, r1
 80064b2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80064b6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80064ba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80064be:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80064c0:	2300      	movs	r3, #0
}
 80064c2:	4618      	mov	r0, r3
 80064c4:	3714      	adds	r7, #20
 80064c6:	46bd      	mov	sp, r7
 80064c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064cc:	4770      	bx	lr
	...

080064d0 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80064d0:	b480      	push	{r7}
 80064d2:	b085      	sub	sp, #20
 80064d4:	af00      	add	r7, sp, #0
 80064d6:	6078      	str	r0, [r7, #4]
 80064d8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80064de:	683b      	ldr	r3, [r7, #0]
 80064e0:	781b      	ldrb	r3, [r3, #0]
 80064e2:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80064e4:	683b      	ldr	r3, [r7, #0]
 80064e6:	785b      	ldrb	r3, [r3, #1]
 80064e8:	2b01      	cmp	r3, #1
 80064ea:	d135      	bne.n	8006558 <USB_DeactivateEndpoint+0x88>
  {
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80064f2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80064f4:	683b      	ldr	r3, [r7, #0]
 80064f6:	781b      	ldrb	r3, [r3, #0]
 80064f8:	f003 030f 	and.w	r3, r3, #15
 80064fc:	2101      	movs	r1, #1
 80064fe:	fa01 f303 	lsl.w	r3, r1, r3
 8006502:	b29b      	uxth	r3, r3
 8006504:	43db      	mvns	r3, r3
 8006506:	68f9      	ldr	r1, [r7, #12]
 8006508:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800650c:	4013      	ands	r3, r2
 800650e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006516:	69da      	ldr	r2, [r3, #28]
 8006518:	683b      	ldr	r3, [r7, #0]
 800651a:	781b      	ldrb	r3, [r3, #0]
 800651c:	f003 030f 	and.w	r3, r3, #15
 8006520:	2101      	movs	r1, #1
 8006522:	fa01 f303 	lsl.w	r3, r1, r3
 8006526:	b29b      	uxth	r3, r3
 8006528:	43db      	mvns	r3, r3
 800652a:	68f9      	ldr	r1, [r7, #12]
 800652c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006530:	4013      	ands	r3, r2
 8006532:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8006534:	68bb      	ldr	r3, [r7, #8]
 8006536:	015a      	lsls	r2, r3, #5
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	4413      	add	r3, r2
 800653c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006540:	681a      	ldr	r2, [r3, #0]
 8006542:	68bb      	ldr	r3, [r7, #8]
 8006544:	0159      	lsls	r1, r3, #5
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	440b      	add	r3, r1
 800654a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800654e:	4619      	mov	r1, r3
 8006550:	4b1f      	ldr	r3, [pc, #124]	; (80065d0 <USB_DeactivateEndpoint+0x100>)
 8006552:	4013      	ands	r3, r2
 8006554:	600b      	str	r3, [r1, #0]
 8006556:	e034      	b.n	80065c2 <USB_DeactivateEndpoint+0xf2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800655e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006560:	683b      	ldr	r3, [r7, #0]
 8006562:	781b      	ldrb	r3, [r3, #0]
 8006564:	f003 030f 	and.w	r3, r3, #15
 8006568:	2101      	movs	r1, #1
 800656a:	fa01 f303 	lsl.w	r3, r1, r3
 800656e:	041b      	lsls	r3, r3, #16
 8006570:	43db      	mvns	r3, r3
 8006572:	68f9      	ldr	r1, [r7, #12]
 8006574:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006578:	4013      	ands	r3, r2
 800657a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006582:	69da      	ldr	r2, [r3, #28]
 8006584:	683b      	ldr	r3, [r7, #0]
 8006586:	781b      	ldrb	r3, [r3, #0]
 8006588:	f003 030f 	and.w	r3, r3, #15
 800658c:	2101      	movs	r1, #1
 800658e:	fa01 f303 	lsl.w	r3, r1, r3
 8006592:	041b      	lsls	r3, r3, #16
 8006594:	43db      	mvns	r3, r3
 8006596:	68f9      	ldr	r1, [r7, #12]
 8006598:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800659c:	4013      	ands	r3, r2
 800659e:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80065a0:	68bb      	ldr	r3, [r7, #8]
 80065a2:	015a      	lsls	r2, r3, #5
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	4413      	add	r3, r2
 80065a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80065ac:	681a      	ldr	r2, [r3, #0]
 80065ae:	68bb      	ldr	r3, [r7, #8]
 80065b0:	0159      	lsls	r1, r3, #5
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	440b      	add	r3, r1
 80065b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80065ba:	4619      	mov	r1, r3
 80065bc:	4b05      	ldr	r3, [pc, #20]	; (80065d4 <USB_DeactivateEndpoint+0x104>)
 80065be:	4013      	ands	r3, r2
 80065c0:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80065c2:	2300      	movs	r3, #0
}
 80065c4:	4618      	mov	r0, r3
 80065c6:	3714      	adds	r7, #20
 80065c8:	46bd      	mov	sp, r7
 80065ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ce:	4770      	bx	lr
 80065d0:	ec337800 	.word	0xec337800
 80065d4:	eff37800 	.word	0xeff37800

080065d8 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80065d8:	b580      	push	{r7, lr}
 80065da:	b08a      	sub	sp, #40	; 0x28
 80065dc:	af02      	add	r7, sp, #8
 80065de:	60f8      	str	r0, [r7, #12]
 80065e0:	60b9      	str	r1, [r7, #8]
 80065e2:	4613      	mov	r3, r2
 80065e4:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80065ea:	68bb      	ldr	r3, [r7, #8]
 80065ec:	781b      	ldrb	r3, [r3, #0]
 80065ee:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80065f0:	68bb      	ldr	r3, [r7, #8]
 80065f2:	785b      	ldrb	r3, [r3, #1]
 80065f4:	2b01      	cmp	r3, #1
 80065f6:	f040 815c 	bne.w	80068b2 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80065fa:	68bb      	ldr	r3, [r7, #8]
 80065fc:	695b      	ldr	r3, [r3, #20]
 80065fe:	2b00      	cmp	r3, #0
 8006600:	d132      	bne.n	8006668 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006602:	69bb      	ldr	r3, [r7, #24]
 8006604:	015a      	lsls	r2, r3, #5
 8006606:	69fb      	ldr	r3, [r7, #28]
 8006608:	4413      	add	r3, r2
 800660a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800660e:	691b      	ldr	r3, [r3, #16]
 8006610:	69ba      	ldr	r2, [r7, #24]
 8006612:	0151      	lsls	r1, r2, #5
 8006614:	69fa      	ldr	r2, [r7, #28]
 8006616:	440a      	add	r2, r1
 8006618:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800661c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006620:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006624:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006626:	69bb      	ldr	r3, [r7, #24]
 8006628:	015a      	lsls	r2, r3, #5
 800662a:	69fb      	ldr	r3, [r7, #28]
 800662c:	4413      	add	r3, r2
 800662e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006632:	691b      	ldr	r3, [r3, #16]
 8006634:	69ba      	ldr	r2, [r7, #24]
 8006636:	0151      	lsls	r1, r2, #5
 8006638:	69fa      	ldr	r2, [r7, #28]
 800663a:	440a      	add	r2, r1
 800663c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006640:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006644:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006646:	69bb      	ldr	r3, [r7, #24]
 8006648:	015a      	lsls	r2, r3, #5
 800664a:	69fb      	ldr	r3, [r7, #28]
 800664c:	4413      	add	r3, r2
 800664e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006652:	691b      	ldr	r3, [r3, #16]
 8006654:	69ba      	ldr	r2, [r7, #24]
 8006656:	0151      	lsls	r1, r2, #5
 8006658:	69fa      	ldr	r2, [r7, #28]
 800665a:	440a      	add	r2, r1
 800665c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006660:	0cdb      	lsrs	r3, r3, #19
 8006662:	04db      	lsls	r3, r3, #19
 8006664:	6113      	str	r3, [r2, #16]
 8006666:	e074      	b.n	8006752 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006668:	69bb      	ldr	r3, [r7, #24]
 800666a:	015a      	lsls	r2, r3, #5
 800666c:	69fb      	ldr	r3, [r7, #28]
 800666e:	4413      	add	r3, r2
 8006670:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006674:	691b      	ldr	r3, [r3, #16]
 8006676:	69ba      	ldr	r2, [r7, #24]
 8006678:	0151      	lsls	r1, r2, #5
 800667a:	69fa      	ldr	r2, [r7, #28]
 800667c:	440a      	add	r2, r1
 800667e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006682:	0cdb      	lsrs	r3, r3, #19
 8006684:	04db      	lsls	r3, r3, #19
 8006686:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006688:	69bb      	ldr	r3, [r7, #24]
 800668a:	015a      	lsls	r2, r3, #5
 800668c:	69fb      	ldr	r3, [r7, #28]
 800668e:	4413      	add	r3, r2
 8006690:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006694:	691b      	ldr	r3, [r3, #16]
 8006696:	69ba      	ldr	r2, [r7, #24]
 8006698:	0151      	lsls	r1, r2, #5
 800669a:	69fa      	ldr	r2, [r7, #28]
 800669c:	440a      	add	r2, r1
 800669e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80066a2:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80066a6:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80066aa:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 80066ac:	69bb      	ldr	r3, [r7, #24]
 80066ae:	015a      	lsls	r2, r3, #5
 80066b0:	69fb      	ldr	r3, [r7, #28]
 80066b2:	4413      	add	r3, r2
 80066b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80066b8:	691a      	ldr	r2, [r3, #16]
 80066ba:	68bb      	ldr	r3, [r7, #8]
 80066bc:	6959      	ldr	r1, [r3, #20]
 80066be:	68bb      	ldr	r3, [r7, #8]
 80066c0:	689b      	ldr	r3, [r3, #8]
 80066c2:	440b      	add	r3, r1
 80066c4:	1e59      	subs	r1, r3, #1
 80066c6:	68bb      	ldr	r3, [r7, #8]
 80066c8:	689b      	ldr	r3, [r3, #8]
 80066ca:	fbb1 f3f3 	udiv	r3, r1, r3
 80066ce:	04d9      	lsls	r1, r3, #19
 80066d0:	4b9d      	ldr	r3, [pc, #628]	; (8006948 <USB_EPStartXfer+0x370>)
 80066d2:	400b      	ands	r3, r1
 80066d4:	69b9      	ldr	r1, [r7, #24]
 80066d6:	0148      	lsls	r0, r1, #5
 80066d8:	69f9      	ldr	r1, [r7, #28]
 80066da:	4401      	add	r1, r0
 80066dc:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80066e0:	4313      	orrs	r3, r2
 80066e2:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80066e4:	69bb      	ldr	r3, [r7, #24]
 80066e6:	015a      	lsls	r2, r3, #5
 80066e8:	69fb      	ldr	r3, [r7, #28]
 80066ea:	4413      	add	r3, r2
 80066ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80066f0:	691a      	ldr	r2, [r3, #16]
 80066f2:	68bb      	ldr	r3, [r7, #8]
 80066f4:	695b      	ldr	r3, [r3, #20]
 80066f6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80066fa:	69b9      	ldr	r1, [r7, #24]
 80066fc:	0148      	lsls	r0, r1, #5
 80066fe:	69f9      	ldr	r1, [r7, #28]
 8006700:	4401      	add	r1, r0
 8006702:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8006706:	4313      	orrs	r3, r2
 8006708:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800670a:	68bb      	ldr	r3, [r7, #8]
 800670c:	78db      	ldrb	r3, [r3, #3]
 800670e:	2b01      	cmp	r3, #1
 8006710:	d11f      	bne.n	8006752 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8006712:	69bb      	ldr	r3, [r7, #24]
 8006714:	015a      	lsls	r2, r3, #5
 8006716:	69fb      	ldr	r3, [r7, #28]
 8006718:	4413      	add	r3, r2
 800671a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800671e:	691b      	ldr	r3, [r3, #16]
 8006720:	69ba      	ldr	r2, [r7, #24]
 8006722:	0151      	lsls	r1, r2, #5
 8006724:	69fa      	ldr	r2, [r7, #28]
 8006726:	440a      	add	r2, r1
 8006728:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800672c:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8006730:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8006732:	69bb      	ldr	r3, [r7, #24]
 8006734:	015a      	lsls	r2, r3, #5
 8006736:	69fb      	ldr	r3, [r7, #28]
 8006738:	4413      	add	r3, r2
 800673a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800673e:	691b      	ldr	r3, [r3, #16]
 8006740:	69ba      	ldr	r2, [r7, #24]
 8006742:	0151      	lsls	r1, r2, #5
 8006744:	69fa      	ldr	r2, [r7, #28]
 8006746:	440a      	add	r2, r1
 8006748:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800674c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006750:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8006752:	79fb      	ldrb	r3, [r7, #7]
 8006754:	2b01      	cmp	r3, #1
 8006756:	d14b      	bne.n	80067f0 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8006758:	68bb      	ldr	r3, [r7, #8]
 800675a:	691b      	ldr	r3, [r3, #16]
 800675c:	2b00      	cmp	r3, #0
 800675e:	d009      	beq.n	8006774 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8006760:	69bb      	ldr	r3, [r7, #24]
 8006762:	015a      	lsls	r2, r3, #5
 8006764:	69fb      	ldr	r3, [r7, #28]
 8006766:	4413      	add	r3, r2
 8006768:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800676c:	461a      	mov	r2, r3
 800676e:	68bb      	ldr	r3, [r7, #8]
 8006770:	691b      	ldr	r3, [r3, #16]
 8006772:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8006774:	68bb      	ldr	r3, [r7, #8]
 8006776:	78db      	ldrb	r3, [r3, #3]
 8006778:	2b01      	cmp	r3, #1
 800677a:	d128      	bne.n	80067ce <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800677c:	69fb      	ldr	r3, [r7, #28]
 800677e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006782:	689b      	ldr	r3, [r3, #8]
 8006784:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006788:	2b00      	cmp	r3, #0
 800678a:	d110      	bne.n	80067ae <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800678c:	69bb      	ldr	r3, [r7, #24]
 800678e:	015a      	lsls	r2, r3, #5
 8006790:	69fb      	ldr	r3, [r7, #28]
 8006792:	4413      	add	r3, r2
 8006794:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	69ba      	ldr	r2, [r7, #24]
 800679c:	0151      	lsls	r1, r2, #5
 800679e:	69fa      	ldr	r2, [r7, #28]
 80067a0:	440a      	add	r2, r1
 80067a2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80067a6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80067aa:	6013      	str	r3, [r2, #0]
 80067ac:	e00f      	b.n	80067ce <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80067ae:	69bb      	ldr	r3, [r7, #24]
 80067b0:	015a      	lsls	r2, r3, #5
 80067b2:	69fb      	ldr	r3, [r7, #28]
 80067b4:	4413      	add	r3, r2
 80067b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	69ba      	ldr	r2, [r7, #24]
 80067be:	0151      	lsls	r1, r2, #5
 80067c0:	69fa      	ldr	r2, [r7, #28]
 80067c2:	440a      	add	r2, r1
 80067c4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80067c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80067cc:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80067ce:	69bb      	ldr	r3, [r7, #24]
 80067d0:	015a      	lsls	r2, r3, #5
 80067d2:	69fb      	ldr	r3, [r7, #28]
 80067d4:	4413      	add	r3, r2
 80067d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	69ba      	ldr	r2, [r7, #24]
 80067de:	0151      	lsls	r1, r2, #5
 80067e0:	69fa      	ldr	r2, [r7, #28]
 80067e2:	440a      	add	r2, r1
 80067e4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80067e8:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80067ec:	6013      	str	r3, [r2, #0]
 80067ee:	e12f      	b.n	8006a50 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80067f0:	69bb      	ldr	r3, [r7, #24]
 80067f2:	015a      	lsls	r2, r3, #5
 80067f4:	69fb      	ldr	r3, [r7, #28]
 80067f6:	4413      	add	r3, r2
 80067f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	69ba      	ldr	r2, [r7, #24]
 8006800:	0151      	lsls	r1, r2, #5
 8006802:	69fa      	ldr	r2, [r7, #28]
 8006804:	440a      	add	r2, r1
 8006806:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800680a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800680e:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006810:	68bb      	ldr	r3, [r7, #8]
 8006812:	78db      	ldrb	r3, [r3, #3]
 8006814:	2b01      	cmp	r3, #1
 8006816:	d015      	beq.n	8006844 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8006818:	68bb      	ldr	r3, [r7, #8]
 800681a:	695b      	ldr	r3, [r3, #20]
 800681c:	2b00      	cmp	r3, #0
 800681e:	f000 8117 	beq.w	8006a50 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8006822:	69fb      	ldr	r3, [r7, #28]
 8006824:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006828:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800682a:	68bb      	ldr	r3, [r7, #8]
 800682c:	781b      	ldrb	r3, [r3, #0]
 800682e:	f003 030f 	and.w	r3, r3, #15
 8006832:	2101      	movs	r1, #1
 8006834:	fa01 f303 	lsl.w	r3, r1, r3
 8006838:	69f9      	ldr	r1, [r7, #28]
 800683a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800683e:	4313      	orrs	r3, r2
 8006840:	634b      	str	r3, [r1, #52]	; 0x34
 8006842:	e105      	b.n	8006a50 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006844:	69fb      	ldr	r3, [r7, #28]
 8006846:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800684a:	689b      	ldr	r3, [r3, #8]
 800684c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006850:	2b00      	cmp	r3, #0
 8006852:	d110      	bne.n	8006876 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8006854:	69bb      	ldr	r3, [r7, #24]
 8006856:	015a      	lsls	r2, r3, #5
 8006858:	69fb      	ldr	r3, [r7, #28]
 800685a:	4413      	add	r3, r2
 800685c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	69ba      	ldr	r2, [r7, #24]
 8006864:	0151      	lsls	r1, r2, #5
 8006866:	69fa      	ldr	r2, [r7, #28]
 8006868:	440a      	add	r2, r1
 800686a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800686e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006872:	6013      	str	r3, [r2, #0]
 8006874:	e00f      	b.n	8006896 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8006876:	69bb      	ldr	r3, [r7, #24]
 8006878:	015a      	lsls	r2, r3, #5
 800687a:	69fb      	ldr	r3, [r7, #28]
 800687c:	4413      	add	r3, r2
 800687e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	69ba      	ldr	r2, [r7, #24]
 8006886:	0151      	lsls	r1, r2, #5
 8006888:	69fa      	ldr	r2, [r7, #28]
 800688a:	440a      	add	r2, r1
 800688c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006890:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006894:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8006896:	68bb      	ldr	r3, [r7, #8]
 8006898:	68d9      	ldr	r1, [r3, #12]
 800689a:	68bb      	ldr	r3, [r7, #8]
 800689c:	781a      	ldrb	r2, [r3, #0]
 800689e:	68bb      	ldr	r3, [r7, #8]
 80068a0:	695b      	ldr	r3, [r3, #20]
 80068a2:	b298      	uxth	r0, r3
 80068a4:	79fb      	ldrb	r3, [r7, #7]
 80068a6:	9300      	str	r3, [sp, #0]
 80068a8:	4603      	mov	r3, r0
 80068aa:	68f8      	ldr	r0, [r7, #12]
 80068ac:	f000 fa2b 	bl	8006d06 <USB_WritePacket>
 80068b0:	e0ce      	b.n	8006a50 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80068b2:	69bb      	ldr	r3, [r7, #24]
 80068b4:	015a      	lsls	r2, r3, #5
 80068b6:	69fb      	ldr	r3, [r7, #28]
 80068b8:	4413      	add	r3, r2
 80068ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80068be:	691b      	ldr	r3, [r3, #16]
 80068c0:	69ba      	ldr	r2, [r7, #24]
 80068c2:	0151      	lsls	r1, r2, #5
 80068c4:	69fa      	ldr	r2, [r7, #28]
 80068c6:	440a      	add	r2, r1
 80068c8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80068cc:	0cdb      	lsrs	r3, r3, #19
 80068ce:	04db      	lsls	r3, r3, #19
 80068d0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80068d2:	69bb      	ldr	r3, [r7, #24]
 80068d4:	015a      	lsls	r2, r3, #5
 80068d6:	69fb      	ldr	r3, [r7, #28]
 80068d8:	4413      	add	r3, r2
 80068da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80068de:	691b      	ldr	r3, [r3, #16]
 80068e0:	69ba      	ldr	r2, [r7, #24]
 80068e2:	0151      	lsls	r1, r2, #5
 80068e4:	69fa      	ldr	r2, [r7, #28]
 80068e6:	440a      	add	r2, r1
 80068e8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80068ec:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80068f0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80068f4:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 80068f6:	68bb      	ldr	r3, [r7, #8]
 80068f8:	695b      	ldr	r3, [r3, #20]
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	d126      	bne.n	800694c <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80068fe:	69bb      	ldr	r3, [r7, #24]
 8006900:	015a      	lsls	r2, r3, #5
 8006902:	69fb      	ldr	r3, [r7, #28]
 8006904:	4413      	add	r3, r2
 8006906:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800690a:	691a      	ldr	r2, [r3, #16]
 800690c:	68bb      	ldr	r3, [r7, #8]
 800690e:	689b      	ldr	r3, [r3, #8]
 8006910:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006914:	69b9      	ldr	r1, [r7, #24]
 8006916:	0148      	lsls	r0, r1, #5
 8006918:	69f9      	ldr	r1, [r7, #28]
 800691a:	4401      	add	r1, r0
 800691c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006920:	4313      	orrs	r3, r2
 8006922:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006924:	69bb      	ldr	r3, [r7, #24]
 8006926:	015a      	lsls	r2, r3, #5
 8006928:	69fb      	ldr	r3, [r7, #28]
 800692a:	4413      	add	r3, r2
 800692c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006930:	691b      	ldr	r3, [r3, #16]
 8006932:	69ba      	ldr	r2, [r7, #24]
 8006934:	0151      	lsls	r1, r2, #5
 8006936:	69fa      	ldr	r2, [r7, #28]
 8006938:	440a      	add	r2, r1
 800693a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800693e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006942:	6113      	str	r3, [r2, #16]
 8006944:	e036      	b.n	80069b4 <USB_EPStartXfer+0x3dc>
 8006946:	bf00      	nop
 8006948:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800694c:	68bb      	ldr	r3, [r7, #8]
 800694e:	695a      	ldr	r2, [r3, #20]
 8006950:	68bb      	ldr	r3, [r7, #8]
 8006952:	689b      	ldr	r3, [r3, #8]
 8006954:	4413      	add	r3, r2
 8006956:	1e5a      	subs	r2, r3, #1
 8006958:	68bb      	ldr	r3, [r7, #8]
 800695a:	689b      	ldr	r3, [r3, #8]
 800695c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006960:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8006962:	69bb      	ldr	r3, [r7, #24]
 8006964:	015a      	lsls	r2, r3, #5
 8006966:	69fb      	ldr	r3, [r7, #28]
 8006968:	4413      	add	r3, r2
 800696a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800696e:	691a      	ldr	r2, [r3, #16]
 8006970:	8afb      	ldrh	r3, [r7, #22]
 8006972:	04d9      	lsls	r1, r3, #19
 8006974:	4b39      	ldr	r3, [pc, #228]	; (8006a5c <USB_EPStartXfer+0x484>)
 8006976:	400b      	ands	r3, r1
 8006978:	69b9      	ldr	r1, [r7, #24]
 800697a:	0148      	lsls	r0, r1, #5
 800697c:	69f9      	ldr	r1, [r7, #28]
 800697e:	4401      	add	r1, r0
 8006980:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006984:	4313      	orrs	r3, r2
 8006986:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8006988:	69bb      	ldr	r3, [r7, #24]
 800698a:	015a      	lsls	r2, r3, #5
 800698c:	69fb      	ldr	r3, [r7, #28]
 800698e:	4413      	add	r3, r2
 8006990:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006994:	691a      	ldr	r2, [r3, #16]
 8006996:	68bb      	ldr	r3, [r7, #8]
 8006998:	689b      	ldr	r3, [r3, #8]
 800699a:	8af9      	ldrh	r1, [r7, #22]
 800699c:	fb01 f303 	mul.w	r3, r1, r3
 80069a0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80069a4:	69b9      	ldr	r1, [r7, #24]
 80069a6:	0148      	lsls	r0, r1, #5
 80069a8:	69f9      	ldr	r1, [r7, #28]
 80069aa:	4401      	add	r1, r0
 80069ac:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80069b0:	4313      	orrs	r3, r2
 80069b2:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80069b4:	79fb      	ldrb	r3, [r7, #7]
 80069b6:	2b01      	cmp	r3, #1
 80069b8:	d10d      	bne.n	80069d6 <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80069ba:	68bb      	ldr	r3, [r7, #8]
 80069bc:	68db      	ldr	r3, [r3, #12]
 80069be:	2b00      	cmp	r3, #0
 80069c0:	d009      	beq.n	80069d6 <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80069c2:	68bb      	ldr	r3, [r7, #8]
 80069c4:	68d9      	ldr	r1, [r3, #12]
 80069c6:	69bb      	ldr	r3, [r7, #24]
 80069c8:	015a      	lsls	r2, r3, #5
 80069ca:	69fb      	ldr	r3, [r7, #28]
 80069cc:	4413      	add	r3, r2
 80069ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80069d2:	460a      	mov	r2, r1
 80069d4:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80069d6:	68bb      	ldr	r3, [r7, #8]
 80069d8:	78db      	ldrb	r3, [r3, #3]
 80069da:	2b01      	cmp	r3, #1
 80069dc:	d128      	bne.n	8006a30 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80069de:	69fb      	ldr	r3, [r7, #28]
 80069e0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80069e4:	689b      	ldr	r3, [r3, #8]
 80069e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	d110      	bne.n	8006a10 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80069ee:	69bb      	ldr	r3, [r7, #24]
 80069f0:	015a      	lsls	r2, r3, #5
 80069f2:	69fb      	ldr	r3, [r7, #28]
 80069f4:	4413      	add	r3, r2
 80069f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	69ba      	ldr	r2, [r7, #24]
 80069fe:	0151      	lsls	r1, r2, #5
 8006a00:	69fa      	ldr	r2, [r7, #28]
 8006a02:	440a      	add	r2, r1
 8006a04:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006a08:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006a0c:	6013      	str	r3, [r2, #0]
 8006a0e:	e00f      	b.n	8006a30 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8006a10:	69bb      	ldr	r3, [r7, #24]
 8006a12:	015a      	lsls	r2, r3, #5
 8006a14:	69fb      	ldr	r3, [r7, #28]
 8006a16:	4413      	add	r3, r2
 8006a18:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	69ba      	ldr	r2, [r7, #24]
 8006a20:	0151      	lsls	r1, r2, #5
 8006a22:	69fa      	ldr	r2, [r7, #28]
 8006a24:	440a      	add	r2, r1
 8006a26:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006a2a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006a2e:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8006a30:	69bb      	ldr	r3, [r7, #24]
 8006a32:	015a      	lsls	r2, r3, #5
 8006a34:	69fb      	ldr	r3, [r7, #28]
 8006a36:	4413      	add	r3, r2
 8006a38:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	69ba      	ldr	r2, [r7, #24]
 8006a40:	0151      	lsls	r1, r2, #5
 8006a42:	69fa      	ldr	r2, [r7, #28]
 8006a44:	440a      	add	r2, r1
 8006a46:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006a4a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006a4e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006a50:	2300      	movs	r3, #0
}
 8006a52:	4618      	mov	r0, r3
 8006a54:	3720      	adds	r7, #32
 8006a56:	46bd      	mov	sp, r7
 8006a58:	bd80      	pop	{r7, pc}
 8006a5a:	bf00      	nop
 8006a5c:	1ff80000 	.word	0x1ff80000

08006a60 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8006a60:	b480      	push	{r7}
 8006a62:	b087      	sub	sp, #28
 8006a64:	af00      	add	r7, sp, #0
 8006a66:	60f8      	str	r0, [r7, #12]
 8006a68:	60b9      	str	r1, [r7, #8]
 8006a6a:	4613      	mov	r3, r2
 8006a6c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006a6e:	68fb      	ldr	r3, [r7, #12]
 8006a70:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8006a72:	68bb      	ldr	r3, [r7, #8]
 8006a74:	781b      	ldrb	r3, [r3, #0]
 8006a76:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006a78:	68bb      	ldr	r3, [r7, #8]
 8006a7a:	785b      	ldrb	r3, [r3, #1]
 8006a7c:	2b01      	cmp	r3, #1
 8006a7e:	f040 80cd 	bne.w	8006c1c <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8006a82:	68bb      	ldr	r3, [r7, #8]
 8006a84:	695b      	ldr	r3, [r3, #20]
 8006a86:	2b00      	cmp	r3, #0
 8006a88:	d132      	bne.n	8006af0 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006a8a:	693b      	ldr	r3, [r7, #16]
 8006a8c:	015a      	lsls	r2, r3, #5
 8006a8e:	697b      	ldr	r3, [r7, #20]
 8006a90:	4413      	add	r3, r2
 8006a92:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006a96:	691b      	ldr	r3, [r3, #16]
 8006a98:	693a      	ldr	r2, [r7, #16]
 8006a9a:	0151      	lsls	r1, r2, #5
 8006a9c:	697a      	ldr	r2, [r7, #20]
 8006a9e:	440a      	add	r2, r1
 8006aa0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006aa4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006aa8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006aac:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006aae:	693b      	ldr	r3, [r7, #16]
 8006ab0:	015a      	lsls	r2, r3, #5
 8006ab2:	697b      	ldr	r3, [r7, #20]
 8006ab4:	4413      	add	r3, r2
 8006ab6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006aba:	691b      	ldr	r3, [r3, #16]
 8006abc:	693a      	ldr	r2, [r7, #16]
 8006abe:	0151      	lsls	r1, r2, #5
 8006ac0:	697a      	ldr	r2, [r7, #20]
 8006ac2:	440a      	add	r2, r1
 8006ac4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006ac8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006acc:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006ace:	693b      	ldr	r3, [r7, #16]
 8006ad0:	015a      	lsls	r2, r3, #5
 8006ad2:	697b      	ldr	r3, [r7, #20]
 8006ad4:	4413      	add	r3, r2
 8006ad6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ada:	691b      	ldr	r3, [r3, #16]
 8006adc:	693a      	ldr	r2, [r7, #16]
 8006ade:	0151      	lsls	r1, r2, #5
 8006ae0:	697a      	ldr	r2, [r7, #20]
 8006ae2:	440a      	add	r2, r1
 8006ae4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006ae8:	0cdb      	lsrs	r3, r3, #19
 8006aea:	04db      	lsls	r3, r3, #19
 8006aec:	6113      	str	r3, [r2, #16]
 8006aee:	e04e      	b.n	8006b8e <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006af0:	693b      	ldr	r3, [r7, #16]
 8006af2:	015a      	lsls	r2, r3, #5
 8006af4:	697b      	ldr	r3, [r7, #20]
 8006af6:	4413      	add	r3, r2
 8006af8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006afc:	691b      	ldr	r3, [r3, #16]
 8006afe:	693a      	ldr	r2, [r7, #16]
 8006b00:	0151      	lsls	r1, r2, #5
 8006b02:	697a      	ldr	r2, [r7, #20]
 8006b04:	440a      	add	r2, r1
 8006b06:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006b0a:	0cdb      	lsrs	r3, r3, #19
 8006b0c:	04db      	lsls	r3, r3, #19
 8006b0e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006b10:	693b      	ldr	r3, [r7, #16]
 8006b12:	015a      	lsls	r2, r3, #5
 8006b14:	697b      	ldr	r3, [r7, #20]
 8006b16:	4413      	add	r3, r2
 8006b18:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006b1c:	691b      	ldr	r3, [r3, #16]
 8006b1e:	693a      	ldr	r2, [r7, #16]
 8006b20:	0151      	lsls	r1, r2, #5
 8006b22:	697a      	ldr	r2, [r7, #20]
 8006b24:	440a      	add	r2, r1
 8006b26:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006b2a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006b2e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006b32:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8006b34:	68bb      	ldr	r3, [r7, #8]
 8006b36:	695a      	ldr	r2, [r3, #20]
 8006b38:	68bb      	ldr	r3, [r7, #8]
 8006b3a:	689b      	ldr	r3, [r3, #8]
 8006b3c:	429a      	cmp	r2, r3
 8006b3e:	d903      	bls.n	8006b48 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8006b40:	68bb      	ldr	r3, [r7, #8]
 8006b42:	689a      	ldr	r2, [r3, #8]
 8006b44:	68bb      	ldr	r3, [r7, #8]
 8006b46:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006b48:	693b      	ldr	r3, [r7, #16]
 8006b4a:	015a      	lsls	r2, r3, #5
 8006b4c:	697b      	ldr	r3, [r7, #20]
 8006b4e:	4413      	add	r3, r2
 8006b50:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006b54:	691b      	ldr	r3, [r3, #16]
 8006b56:	693a      	ldr	r2, [r7, #16]
 8006b58:	0151      	lsls	r1, r2, #5
 8006b5a:	697a      	ldr	r2, [r7, #20]
 8006b5c:	440a      	add	r2, r1
 8006b5e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006b62:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006b66:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8006b68:	693b      	ldr	r3, [r7, #16]
 8006b6a:	015a      	lsls	r2, r3, #5
 8006b6c:	697b      	ldr	r3, [r7, #20]
 8006b6e:	4413      	add	r3, r2
 8006b70:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006b74:	691a      	ldr	r2, [r3, #16]
 8006b76:	68bb      	ldr	r3, [r7, #8]
 8006b78:	695b      	ldr	r3, [r3, #20]
 8006b7a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006b7e:	6939      	ldr	r1, [r7, #16]
 8006b80:	0148      	lsls	r0, r1, #5
 8006b82:	6979      	ldr	r1, [r7, #20]
 8006b84:	4401      	add	r1, r0
 8006b86:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8006b8a:	4313      	orrs	r3, r2
 8006b8c:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8006b8e:	79fb      	ldrb	r3, [r7, #7]
 8006b90:	2b01      	cmp	r3, #1
 8006b92:	d11e      	bne.n	8006bd2 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8006b94:	68bb      	ldr	r3, [r7, #8]
 8006b96:	691b      	ldr	r3, [r3, #16]
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	d009      	beq.n	8006bb0 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8006b9c:	693b      	ldr	r3, [r7, #16]
 8006b9e:	015a      	lsls	r2, r3, #5
 8006ba0:	697b      	ldr	r3, [r7, #20]
 8006ba2:	4413      	add	r3, r2
 8006ba4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ba8:	461a      	mov	r2, r3
 8006baa:	68bb      	ldr	r3, [r7, #8]
 8006bac:	691b      	ldr	r3, [r3, #16]
 8006bae:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006bb0:	693b      	ldr	r3, [r7, #16]
 8006bb2:	015a      	lsls	r2, r3, #5
 8006bb4:	697b      	ldr	r3, [r7, #20]
 8006bb6:	4413      	add	r3, r2
 8006bb8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	693a      	ldr	r2, [r7, #16]
 8006bc0:	0151      	lsls	r1, r2, #5
 8006bc2:	697a      	ldr	r2, [r7, #20]
 8006bc4:	440a      	add	r2, r1
 8006bc6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006bca:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006bce:	6013      	str	r3, [r2, #0]
 8006bd0:	e092      	b.n	8006cf8 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006bd2:	693b      	ldr	r3, [r7, #16]
 8006bd4:	015a      	lsls	r2, r3, #5
 8006bd6:	697b      	ldr	r3, [r7, #20]
 8006bd8:	4413      	add	r3, r2
 8006bda:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	693a      	ldr	r2, [r7, #16]
 8006be2:	0151      	lsls	r1, r2, #5
 8006be4:	697a      	ldr	r2, [r7, #20]
 8006be6:	440a      	add	r2, r1
 8006be8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006bec:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006bf0:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8006bf2:	68bb      	ldr	r3, [r7, #8]
 8006bf4:	695b      	ldr	r3, [r3, #20]
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	d07e      	beq.n	8006cf8 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8006bfa:	697b      	ldr	r3, [r7, #20]
 8006bfc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006c00:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006c02:	68bb      	ldr	r3, [r7, #8]
 8006c04:	781b      	ldrb	r3, [r3, #0]
 8006c06:	f003 030f 	and.w	r3, r3, #15
 8006c0a:	2101      	movs	r1, #1
 8006c0c:	fa01 f303 	lsl.w	r3, r1, r3
 8006c10:	6979      	ldr	r1, [r7, #20]
 8006c12:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006c16:	4313      	orrs	r3, r2
 8006c18:	634b      	str	r3, [r1, #52]	; 0x34
 8006c1a:	e06d      	b.n	8006cf8 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8006c1c:	693b      	ldr	r3, [r7, #16]
 8006c1e:	015a      	lsls	r2, r3, #5
 8006c20:	697b      	ldr	r3, [r7, #20]
 8006c22:	4413      	add	r3, r2
 8006c24:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006c28:	691b      	ldr	r3, [r3, #16]
 8006c2a:	693a      	ldr	r2, [r7, #16]
 8006c2c:	0151      	lsls	r1, r2, #5
 8006c2e:	697a      	ldr	r2, [r7, #20]
 8006c30:	440a      	add	r2, r1
 8006c32:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006c36:	0cdb      	lsrs	r3, r3, #19
 8006c38:	04db      	lsls	r3, r3, #19
 8006c3a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8006c3c:	693b      	ldr	r3, [r7, #16]
 8006c3e:	015a      	lsls	r2, r3, #5
 8006c40:	697b      	ldr	r3, [r7, #20]
 8006c42:	4413      	add	r3, r2
 8006c44:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006c48:	691b      	ldr	r3, [r3, #16]
 8006c4a:	693a      	ldr	r2, [r7, #16]
 8006c4c:	0151      	lsls	r1, r2, #5
 8006c4e:	697a      	ldr	r2, [r7, #20]
 8006c50:	440a      	add	r2, r1
 8006c52:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006c56:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006c5a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006c5e:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8006c60:	68bb      	ldr	r3, [r7, #8]
 8006c62:	695b      	ldr	r3, [r3, #20]
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	d003      	beq.n	8006c70 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 8006c68:	68bb      	ldr	r3, [r7, #8]
 8006c6a:	689a      	ldr	r2, [r3, #8]
 8006c6c:	68bb      	ldr	r3, [r7, #8]
 8006c6e:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006c70:	693b      	ldr	r3, [r7, #16]
 8006c72:	015a      	lsls	r2, r3, #5
 8006c74:	697b      	ldr	r3, [r7, #20]
 8006c76:	4413      	add	r3, r2
 8006c78:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006c7c:	691b      	ldr	r3, [r3, #16]
 8006c7e:	693a      	ldr	r2, [r7, #16]
 8006c80:	0151      	lsls	r1, r2, #5
 8006c82:	697a      	ldr	r2, [r7, #20]
 8006c84:	440a      	add	r2, r1
 8006c86:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006c8a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006c8e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8006c90:	693b      	ldr	r3, [r7, #16]
 8006c92:	015a      	lsls	r2, r3, #5
 8006c94:	697b      	ldr	r3, [r7, #20]
 8006c96:	4413      	add	r3, r2
 8006c98:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006c9c:	691a      	ldr	r2, [r3, #16]
 8006c9e:	68bb      	ldr	r3, [r7, #8]
 8006ca0:	689b      	ldr	r3, [r3, #8]
 8006ca2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006ca6:	6939      	ldr	r1, [r7, #16]
 8006ca8:	0148      	lsls	r0, r1, #5
 8006caa:	6979      	ldr	r1, [r7, #20]
 8006cac:	4401      	add	r1, r0
 8006cae:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006cb2:	4313      	orrs	r3, r2
 8006cb4:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8006cb6:	79fb      	ldrb	r3, [r7, #7]
 8006cb8:	2b01      	cmp	r3, #1
 8006cba:	d10d      	bne.n	8006cd8 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8006cbc:	68bb      	ldr	r3, [r7, #8]
 8006cbe:	68db      	ldr	r3, [r3, #12]
 8006cc0:	2b00      	cmp	r3, #0
 8006cc2:	d009      	beq.n	8006cd8 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8006cc4:	68bb      	ldr	r3, [r7, #8]
 8006cc6:	68d9      	ldr	r1, [r3, #12]
 8006cc8:	693b      	ldr	r3, [r7, #16]
 8006cca:	015a      	lsls	r2, r3, #5
 8006ccc:	697b      	ldr	r3, [r7, #20]
 8006cce:	4413      	add	r3, r2
 8006cd0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006cd4:	460a      	mov	r2, r1
 8006cd6:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8006cd8:	693b      	ldr	r3, [r7, #16]
 8006cda:	015a      	lsls	r2, r3, #5
 8006cdc:	697b      	ldr	r3, [r7, #20]
 8006cde:	4413      	add	r3, r2
 8006ce0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	693a      	ldr	r2, [r7, #16]
 8006ce8:	0151      	lsls	r1, r2, #5
 8006cea:	697a      	ldr	r2, [r7, #20]
 8006cec:	440a      	add	r2, r1
 8006cee:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006cf2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006cf6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006cf8:	2300      	movs	r3, #0
}
 8006cfa:	4618      	mov	r0, r3
 8006cfc:	371c      	adds	r7, #28
 8006cfe:	46bd      	mov	sp, r7
 8006d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d04:	4770      	bx	lr

08006d06 <USB_WritePacket>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src, uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8006d06:	b480      	push	{r7}
 8006d08:	b089      	sub	sp, #36	; 0x24
 8006d0a:	af00      	add	r7, sp, #0
 8006d0c:	60f8      	str	r0, [r7, #12]
 8006d0e:	60b9      	str	r1, [r7, #8]
 8006d10:	4611      	mov	r1, r2
 8006d12:	461a      	mov	r2, r3
 8006d14:	460b      	mov	r3, r1
 8006d16:	71fb      	strb	r3, [r7, #7]
 8006d18:	4613      	mov	r3, r2
 8006d1a:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006d1c:	68fb      	ldr	r3, [r7, #12]
 8006d1e:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 8006d20:	68bb      	ldr	r3, [r7, #8]
 8006d22:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 8006d24:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8006d28:	2b00      	cmp	r3, #0
 8006d2a:	d11a      	bne.n	8006d62 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8006d2c:	88bb      	ldrh	r3, [r7, #4]
 8006d2e:	3303      	adds	r3, #3
 8006d30:	089b      	lsrs	r3, r3, #2
 8006d32:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8006d34:	2300      	movs	r3, #0
 8006d36:	61bb      	str	r3, [r7, #24]
 8006d38:	e00f      	b.n	8006d5a <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8006d3a:	79fb      	ldrb	r3, [r7, #7]
 8006d3c:	031a      	lsls	r2, r3, #12
 8006d3e:	697b      	ldr	r3, [r7, #20]
 8006d40:	4413      	add	r3, r2
 8006d42:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006d46:	461a      	mov	r2, r3
 8006d48:	69fb      	ldr	r3, [r7, #28]
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	6013      	str	r3, [r2, #0]
      pSrc++;
 8006d4e:	69fb      	ldr	r3, [r7, #28]
 8006d50:	3304      	adds	r3, #4
 8006d52:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8006d54:	69bb      	ldr	r3, [r7, #24]
 8006d56:	3301      	adds	r3, #1
 8006d58:	61bb      	str	r3, [r7, #24]
 8006d5a:	69ba      	ldr	r2, [r7, #24]
 8006d5c:	693b      	ldr	r3, [r7, #16]
 8006d5e:	429a      	cmp	r2, r3
 8006d60:	d3eb      	bcc.n	8006d3a <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8006d62:	2300      	movs	r3, #0
}
 8006d64:	4618      	mov	r0, r3
 8006d66:	3724      	adds	r7, #36	; 0x24
 8006d68:	46bd      	mov	sp, r7
 8006d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d6e:	4770      	bx	lr

08006d70 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8006d70:	b480      	push	{r7}
 8006d72:	b089      	sub	sp, #36	; 0x24
 8006d74:	af00      	add	r7, sp, #0
 8006d76:	60f8      	str	r0, [r7, #12]
 8006d78:	60b9      	str	r1, [r7, #8]
 8006d7a:	4613      	mov	r3, r2
 8006d7c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006d7e:	68fb      	ldr	r3, [r7, #12]
 8006d80:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 8006d82:	68bb      	ldr	r3, [r7, #8]
 8006d84:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8006d86:	88fb      	ldrh	r3, [r7, #6]
 8006d88:	3303      	adds	r3, #3
 8006d8a:	089b      	lsrs	r3, r3, #2
 8006d8c:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 8006d8e:	2300      	movs	r3, #0
 8006d90:	61bb      	str	r3, [r7, #24]
 8006d92:	e00b      	b.n	8006dac <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8006d94:	697b      	ldr	r3, [r7, #20]
 8006d96:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006d9a:	681a      	ldr	r2, [r3, #0]
 8006d9c:	69fb      	ldr	r3, [r7, #28]
 8006d9e:	601a      	str	r2, [r3, #0]
    pDest++;
 8006da0:	69fb      	ldr	r3, [r7, #28]
 8006da2:	3304      	adds	r3, #4
 8006da4:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8006da6:	69bb      	ldr	r3, [r7, #24]
 8006da8:	3301      	adds	r3, #1
 8006daa:	61bb      	str	r3, [r7, #24]
 8006dac:	69ba      	ldr	r2, [r7, #24]
 8006dae:	693b      	ldr	r3, [r7, #16]
 8006db0:	429a      	cmp	r2, r3
 8006db2:	d3ef      	bcc.n	8006d94 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 8006db4:	69fb      	ldr	r3, [r7, #28]
}
 8006db6:	4618      	mov	r0, r3
 8006db8:	3724      	adds	r7, #36	; 0x24
 8006dba:	46bd      	mov	sp, r7
 8006dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dc0:	4770      	bx	lr

08006dc2 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006dc2:	b480      	push	{r7}
 8006dc4:	b085      	sub	sp, #20
 8006dc6:	af00      	add	r7, sp, #0
 8006dc8:	6078      	str	r0, [r7, #4]
 8006dca:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006dd0:	683b      	ldr	r3, [r7, #0]
 8006dd2:	781b      	ldrb	r3, [r3, #0]
 8006dd4:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006dd6:	683b      	ldr	r3, [r7, #0]
 8006dd8:	785b      	ldrb	r3, [r3, #1]
 8006dda:	2b01      	cmp	r3, #1
 8006ddc:	d12c      	bne.n	8006e38 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8006dde:	68bb      	ldr	r3, [r7, #8]
 8006de0:	015a      	lsls	r2, r3, #5
 8006de2:	68fb      	ldr	r3, [r7, #12]
 8006de4:	4413      	add	r3, r2
 8006de6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	2b00      	cmp	r3, #0
 8006dee:	db12      	blt.n	8006e16 <USB_EPSetStall+0x54>
 8006df0:	68bb      	ldr	r3, [r7, #8]
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	d00f      	beq.n	8006e16 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8006df6:	68bb      	ldr	r3, [r7, #8]
 8006df8:	015a      	lsls	r2, r3, #5
 8006dfa:	68fb      	ldr	r3, [r7, #12]
 8006dfc:	4413      	add	r3, r2
 8006dfe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	68ba      	ldr	r2, [r7, #8]
 8006e06:	0151      	lsls	r1, r2, #5
 8006e08:	68fa      	ldr	r2, [r7, #12]
 8006e0a:	440a      	add	r2, r1
 8006e0c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006e10:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006e14:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8006e16:	68bb      	ldr	r3, [r7, #8]
 8006e18:	015a      	lsls	r2, r3, #5
 8006e1a:	68fb      	ldr	r3, [r7, #12]
 8006e1c:	4413      	add	r3, r2
 8006e1e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	68ba      	ldr	r2, [r7, #8]
 8006e26:	0151      	lsls	r1, r2, #5
 8006e28:	68fa      	ldr	r2, [r7, #12]
 8006e2a:	440a      	add	r2, r1
 8006e2c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006e30:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006e34:	6013      	str	r3, [r2, #0]
 8006e36:	e02b      	b.n	8006e90 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8006e38:	68bb      	ldr	r3, [r7, #8]
 8006e3a:	015a      	lsls	r2, r3, #5
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	4413      	add	r3, r2
 8006e40:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	2b00      	cmp	r3, #0
 8006e48:	db12      	blt.n	8006e70 <USB_EPSetStall+0xae>
 8006e4a:	68bb      	ldr	r3, [r7, #8]
 8006e4c:	2b00      	cmp	r3, #0
 8006e4e:	d00f      	beq.n	8006e70 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8006e50:	68bb      	ldr	r3, [r7, #8]
 8006e52:	015a      	lsls	r2, r3, #5
 8006e54:	68fb      	ldr	r3, [r7, #12]
 8006e56:	4413      	add	r3, r2
 8006e58:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	68ba      	ldr	r2, [r7, #8]
 8006e60:	0151      	lsls	r1, r2, #5
 8006e62:	68fa      	ldr	r2, [r7, #12]
 8006e64:	440a      	add	r2, r1
 8006e66:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006e6a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006e6e:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8006e70:	68bb      	ldr	r3, [r7, #8]
 8006e72:	015a      	lsls	r2, r3, #5
 8006e74:	68fb      	ldr	r3, [r7, #12]
 8006e76:	4413      	add	r3, r2
 8006e78:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	68ba      	ldr	r2, [r7, #8]
 8006e80:	0151      	lsls	r1, r2, #5
 8006e82:	68fa      	ldr	r2, [r7, #12]
 8006e84:	440a      	add	r2, r1
 8006e86:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006e8a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006e8e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006e90:	2300      	movs	r3, #0
}
 8006e92:	4618      	mov	r0, r3
 8006e94:	3714      	adds	r7, #20
 8006e96:	46bd      	mov	sp, r7
 8006e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e9c:	4770      	bx	lr

08006e9e <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006e9e:	b480      	push	{r7}
 8006ea0:	b085      	sub	sp, #20
 8006ea2:	af00      	add	r7, sp, #0
 8006ea4:	6078      	str	r0, [r7, #4]
 8006ea6:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006eac:	683b      	ldr	r3, [r7, #0]
 8006eae:	781b      	ldrb	r3, [r3, #0]
 8006eb0:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006eb2:	683b      	ldr	r3, [r7, #0]
 8006eb4:	785b      	ldrb	r3, [r3, #1]
 8006eb6:	2b01      	cmp	r3, #1
 8006eb8:	d128      	bne.n	8006f0c <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8006eba:	68bb      	ldr	r3, [r7, #8]
 8006ebc:	015a      	lsls	r2, r3, #5
 8006ebe:	68fb      	ldr	r3, [r7, #12]
 8006ec0:	4413      	add	r3, r2
 8006ec2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	68ba      	ldr	r2, [r7, #8]
 8006eca:	0151      	lsls	r1, r2, #5
 8006ecc:	68fa      	ldr	r2, [r7, #12]
 8006ece:	440a      	add	r2, r1
 8006ed0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006ed4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006ed8:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8006eda:	683b      	ldr	r3, [r7, #0]
 8006edc:	78db      	ldrb	r3, [r3, #3]
 8006ede:	2b03      	cmp	r3, #3
 8006ee0:	d003      	beq.n	8006eea <USB_EPClearStall+0x4c>
 8006ee2:	683b      	ldr	r3, [r7, #0]
 8006ee4:	78db      	ldrb	r3, [r3, #3]
 8006ee6:	2b02      	cmp	r3, #2
 8006ee8:	d138      	bne.n	8006f5c <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8006eea:	68bb      	ldr	r3, [r7, #8]
 8006eec:	015a      	lsls	r2, r3, #5
 8006eee:	68fb      	ldr	r3, [r7, #12]
 8006ef0:	4413      	add	r3, r2
 8006ef2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	68ba      	ldr	r2, [r7, #8]
 8006efa:	0151      	lsls	r1, r2, #5
 8006efc:	68fa      	ldr	r2, [r7, #12]
 8006efe:	440a      	add	r2, r1
 8006f00:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006f04:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006f08:	6013      	str	r3, [r2, #0]
 8006f0a:	e027      	b.n	8006f5c <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8006f0c:	68bb      	ldr	r3, [r7, #8]
 8006f0e:	015a      	lsls	r2, r3, #5
 8006f10:	68fb      	ldr	r3, [r7, #12]
 8006f12:	4413      	add	r3, r2
 8006f14:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	68ba      	ldr	r2, [r7, #8]
 8006f1c:	0151      	lsls	r1, r2, #5
 8006f1e:	68fa      	ldr	r2, [r7, #12]
 8006f20:	440a      	add	r2, r1
 8006f22:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006f26:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006f2a:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8006f2c:	683b      	ldr	r3, [r7, #0]
 8006f2e:	78db      	ldrb	r3, [r3, #3]
 8006f30:	2b03      	cmp	r3, #3
 8006f32:	d003      	beq.n	8006f3c <USB_EPClearStall+0x9e>
 8006f34:	683b      	ldr	r3, [r7, #0]
 8006f36:	78db      	ldrb	r3, [r3, #3]
 8006f38:	2b02      	cmp	r3, #2
 8006f3a:	d10f      	bne.n	8006f5c <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8006f3c:	68bb      	ldr	r3, [r7, #8]
 8006f3e:	015a      	lsls	r2, r3, #5
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	4413      	add	r3, r2
 8006f44:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	68ba      	ldr	r2, [r7, #8]
 8006f4c:	0151      	lsls	r1, r2, #5
 8006f4e:	68fa      	ldr	r2, [r7, #12]
 8006f50:	440a      	add	r2, r1
 8006f52:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006f56:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006f5a:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8006f5c:	2300      	movs	r3, #0
}
 8006f5e:	4618      	mov	r0, r3
 8006f60:	3714      	adds	r7, #20
 8006f62:	46bd      	mov	sp, r7
 8006f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f68:	4770      	bx	lr

08006f6a <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8006f6a:	b480      	push	{r7}
 8006f6c:	b085      	sub	sp, #20
 8006f6e:	af00      	add	r7, sp, #0
 8006f70:	6078      	str	r0, [r7, #4]
 8006f72:	460b      	mov	r3, r1
 8006f74:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8006f7a:	68fb      	ldr	r3, [r7, #12]
 8006f7c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	68fa      	ldr	r2, [r7, #12]
 8006f84:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006f88:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8006f8c:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8006f8e:	68fb      	ldr	r3, [r7, #12]
 8006f90:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006f94:	681a      	ldr	r2, [r3, #0]
 8006f96:	78fb      	ldrb	r3, [r7, #3]
 8006f98:	011b      	lsls	r3, r3, #4
 8006f9a:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8006f9e:	68f9      	ldr	r1, [r7, #12]
 8006fa0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006fa4:	4313      	orrs	r3, r2
 8006fa6:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8006fa8:	2300      	movs	r3, #0
}
 8006faa:	4618      	mov	r0, r3
 8006fac:	3714      	adds	r7, #20
 8006fae:	46bd      	mov	sp, r7
 8006fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fb4:	4770      	bx	lr

08006fb6 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8006fb6:	b580      	push	{r7, lr}
 8006fb8:	b084      	sub	sp, #16
 8006fba:	af00      	add	r7, sp, #0
 8006fbc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8006fc2:	68fb      	ldr	r3, [r7, #12]
 8006fc4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006fc8:	685b      	ldr	r3, [r3, #4]
 8006fca:	68fa      	ldr	r2, [r7, #12]
 8006fcc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006fd0:	f023 0302 	bic.w	r3, r3, #2
 8006fd4:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 8006fd6:	2003      	movs	r0, #3
 8006fd8:	f7fa feba 	bl	8001d50 <HAL_Delay>

  return HAL_OK;
 8006fdc:	2300      	movs	r3, #0
}
 8006fde:	4618      	mov	r0, r3
 8006fe0:	3710      	adds	r7, #16
 8006fe2:	46bd      	mov	sp, r7
 8006fe4:	bd80      	pop	{r7, pc}

08006fe6 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8006fe6:	b580      	push	{r7, lr}
 8006fe8:	b084      	sub	sp, #16
 8006fea:	af00      	add	r7, sp, #0
 8006fec:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006ff2:	68fb      	ldr	r3, [r7, #12]
 8006ff4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006ff8:	685b      	ldr	r3, [r3, #4]
 8006ffa:	68fa      	ldr	r2, [r7, #12]
 8006ffc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007000:	f043 0302 	orr.w	r3, r3, #2
 8007004:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 8007006:	2003      	movs	r0, #3
 8007008:	f7fa fea2 	bl	8001d50 <HAL_Delay>

  return HAL_OK;
 800700c:	2300      	movs	r3, #0
}
 800700e:	4618      	mov	r0, r3
 8007010:	3710      	adds	r7, #16
 8007012:	46bd      	mov	sp, r7
 8007014:	bd80      	pop	{r7, pc}

08007016 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8007016:	b480      	push	{r7}
 8007018:	b085      	sub	sp, #20
 800701a:	af00      	add	r7, sp, #0
 800701c:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	695b      	ldr	r3, [r3, #20]
 8007022:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	699b      	ldr	r3, [r3, #24]
 8007028:	68fa      	ldr	r2, [r7, #12]
 800702a:	4013      	ands	r3, r2
 800702c:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800702e:	68fb      	ldr	r3, [r7, #12]
}
 8007030:	4618      	mov	r0, r3
 8007032:	3714      	adds	r7, #20
 8007034:	46bd      	mov	sp, r7
 8007036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800703a:	4770      	bx	lr

0800703c <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800703c:	b480      	push	{r7}
 800703e:	b085      	sub	sp, #20
 8007040:	af00      	add	r7, sp, #0
 8007042:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8007048:	68fb      	ldr	r3, [r7, #12]
 800704a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800704e:	699b      	ldr	r3, [r3, #24]
 8007050:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8007052:	68fb      	ldr	r3, [r7, #12]
 8007054:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007058:	69db      	ldr	r3, [r3, #28]
 800705a:	68ba      	ldr	r2, [r7, #8]
 800705c:	4013      	ands	r3, r2
 800705e:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8007060:	68bb      	ldr	r3, [r7, #8]
 8007062:	0c1b      	lsrs	r3, r3, #16
}
 8007064:	4618      	mov	r0, r3
 8007066:	3714      	adds	r7, #20
 8007068:	46bd      	mov	sp, r7
 800706a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800706e:	4770      	bx	lr

08007070 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8007070:	b480      	push	{r7}
 8007072:	b085      	sub	sp, #20
 8007074:	af00      	add	r7, sp, #0
 8007076:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800707c:	68fb      	ldr	r3, [r7, #12]
 800707e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007082:	699b      	ldr	r3, [r3, #24]
 8007084:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8007086:	68fb      	ldr	r3, [r7, #12]
 8007088:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800708c:	69db      	ldr	r3, [r3, #28]
 800708e:	68ba      	ldr	r2, [r7, #8]
 8007090:	4013      	ands	r3, r2
 8007092:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8007094:	68bb      	ldr	r3, [r7, #8]
 8007096:	b29b      	uxth	r3, r3
}
 8007098:	4618      	mov	r0, r3
 800709a:	3714      	adds	r7, #20
 800709c:	46bd      	mov	sp, r7
 800709e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070a2:	4770      	bx	lr

080070a4 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80070a4:	b480      	push	{r7}
 80070a6:	b085      	sub	sp, #20
 80070a8:	af00      	add	r7, sp, #0
 80070aa:	6078      	str	r0, [r7, #4]
 80070ac:	460b      	mov	r3, r1
 80070ae:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80070b4:	78fb      	ldrb	r3, [r7, #3]
 80070b6:	015a      	lsls	r2, r3, #5
 80070b8:	68fb      	ldr	r3, [r7, #12]
 80070ba:	4413      	add	r3, r2
 80070bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80070c0:	689b      	ldr	r3, [r3, #8]
 80070c2:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80070c4:	68fb      	ldr	r3, [r7, #12]
 80070c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80070ca:	695b      	ldr	r3, [r3, #20]
 80070cc:	68ba      	ldr	r2, [r7, #8]
 80070ce:	4013      	ands	r3, r2
 80070d0:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80070d2:	68bb      	ldr	r3, [r7, #8]
}
 80070d4:	4618      	mov	r0, r3
 80070d6:	3714      	adds	r7, #20
 80070d8:	46bd      	mov	sp, r7
 80070da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070de:	4770      	bx	lr

080070e0 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80070e0:	b480      	push	{r7}
 80070e2:	b087      	sub	sp, #28
 80070e4:	af00      	add	r7, sp, #0
 80070e6:	6078      	str	r0, [r7, #4]
 80070e8:	460b      	mov	r3, r1
 80070ea:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 80070f0:	697b      	ldr	r3, [r7, #20]
 80070f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80070f6:	691b      	ldr	r3, [r3, #16]
 80070f8:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 80070fa:	697b      	ldr	r3, [r7, #20]
 80070fc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007100:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007102:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8007104:	78fb      	ldrb	r3, [r7, #3]
 8007106:	f003 030f 	and.w	r3, r3, #15
 800710a:	68fa      	ldr	r2, [r7, #12]
 800710c:	fa22 f303 	lsr.w	r3, r2, r3
 8007110:	01db      	lsls	r3, r3, #7
 8007112:	b2db      	uxtb	r3, r3
 8007114:	693a      	ldr	r2, [r7, #16]
 8007116:	4313      	orrs	r3, r2
 8007118:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800711a:	78fb      	ldrb	r3, [r7, #3]
 800711c:	015a      	lsls	r2, r3, #5
 800711e:	697b      	ldr	r3, [r7, #20]
 8007120:	4413      	add	r3, r2
 8007122:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007126:	689b      	ldr	r3, [r3, #8]
 8007128:	693a      	ldr	r2, [r7, #16]
 800712a:	4013      	ands	r3, r2
 800712c:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800712e:	68bb      	ldr	r3, [r7, #8]
}
 8007130:	4618      	mov	r0, r3
 8007132:	371c      	adds	r7, #28
 8007134:	46bd      	mov	sp, r7
 8007136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800713a:	4770      	bx	lr

0800713c <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800713c:	b480      	push	{r7}
 800713e:	b083      	sub	sp, #12
 8007140:	af00      	add	r7, sp, #0
 8007142:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	695b      	ldr	r3, [r3, #20]
 8007148:	f003 0301 	and.w	r3, r3, #1
}
 800714c:	4618      	mov	r0, r3
 800714e:	370c      	adds	r7, #12
 8007150:	46bd      	mov	sp, r7
 8007152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007156:	4770      	bx	lr

08007158 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8007158:	b480      	push	{r7}
 800715a:	b085      	sub	sp, #20
 800715c:	af00      	add	r7, sp, #0
 800715e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP based on the enumeration speed */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8007164:	68fb      	ldr	r3, [r7, #12]
 8007166:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	68fa      	ldr	r2, [r7, #12]
 800716e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007172:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8007176:	f023 0307 	bic.w	r3, r3, #7
 800717a:	6013      	str	r3, [r2, #0]

  if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD) == DSTS_ENUMSPD_LS_PHY_6MHZ)
 800717c:	68fb      	ldr	r3, [r7, #12]
 800717e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007182:	689b      	ldr	r3, [r3, #8]
 8007184:	f003 0306 	and.w	r3, r3, #6
 8007188:	2b04      	cmp	r3, #4
 800718a:	d109      	bne.n	80071a0 <USB_ActivateSetup+0x48>
  {
    USBx_INEP(0U)->DIEPCTL |= 3U;
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	68fa      	ldr	r2, [r7, #12]
 8007196:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800719a:	f043 0303 	orr.w	r3, r3, #3
 800719e:	6013      	str	r3, [r2, #0]
  }
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80071a0:	68fb      	ldr	r3, [r7, #12]
 80071a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80071a6:	685b      	ldr	r3, [r3, #4]
 80071a8:	68fa      	ldr	r2, [r7, #12]
 80071aa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80071ae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80071b2:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80071b4:	2300      	movs	r3, #0
}
 80071b6:	4618      	mov	r0, r3
 80071b8:	3714      	adds	r7, #20
 80071ba:	46bd      	mov	sp, r7
 80071bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071c0:	4770      	bx	lr
	...

080071c4 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 80071c4:	b480      	push	{r7}
 80071c6:	b087      	sub	sp, #28
 80071c8:	af00      	add	r7, sp, #0
 80071ca:	60f8      	str	r0, [r7, #12]
 80071cc:	460b      	mov	r3, r1
 80071ce:	607a      	str	r2, [r7, #4]
 80071d0:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80071d2:	68fb      	ldr	r3, [r7, #12]
 80071d4:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80071d6:	68fb      	ldr	r3, [r7, #12]
 80071d8:	333c      	adds	r3, #60	; 0x3c
 80071da:	3304      	adds	r3, #4
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80071e0:	693b      	ldr	r3, [r7, #16]
 80071e2:	4a26      	ldr	r2, [pc, #152]	; (800727c <USB_EP0_OutStart+0xb8>)
 80071e4:	4293      	cmp	r3, r2
 80071e6:	d90a      	bls.n	80071fe <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80071e8:	697b      	ldr	r3, [r7, #20]
 80071ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80071f4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80071f8:	d101      	bne.n	80071fe <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 80071fa:	2300      	movs	r3, #0
 80071fc:	e037      	b.n	800726e <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80071fe:	697b      	ldr	r3, [r7, #20]
 8007200:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007204:	461a      	mov	r2, r3
 8007206:	2300      	movs	r3, #0
 8007208:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800720a:	697b      	ldr	r3, [r7, #20]
 800720c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007210:	691b      	ldr	r3, [r3, #16]
 8007212:	697a      	ldr	r2, [r7, #20]
 8007214:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007218:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800721c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800721e:	697b      	ldr	r3, [r7, #20]
 8007220:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007224:	691b      	ldr	r3, [r3, #16]
 8007226:	697a      	ldr	r2, [r7, #20]
 8007228:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800722c:	f043 0318 	orr.w	r3, r3, #24
 8007230:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8007232:	697b      	ldr	r3, [r7, #20]
 8007234:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007238:	691b      	ldr	r3, [r3, #16]
 800723a:	697a      	ldr	r2, [r7, #20]
 800723c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007240:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8007244:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8007246:	7afb      	ldrb	r3, [r7, #11]
 8007248:	2b01      	cmp	r3, #1
 800724a:	d10f      	bne.n	800726c <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800724c:	697b      	ldr	r3, [r7, #20]
 800724e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007252:	461a      	mov	r2, r3
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8007258:	697b      	ldr	r3, [r7, #20]
 800725a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	697a      	ldr	r2, [r7, #20]
 8007262:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007266:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800726a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800726c:	2300      	movs	r3, #0
}
 800726e:	4618      	mov	r0, r3
 8007270:	371c      	adds	r7, #28
 8007272:	46bd      	mov	sp, r7
 8007274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007278:	4770      	bx	lr
 800727a:	bf00      	nop
 800727c:	4f54300a 	.word	0x4f54300a

08007280 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8007280:	b480      	push	{r7}
 8007282:	b085      	sub	sp, #20
 8007284:	af00      	add	r7, sp, #0
 8007286:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8007288:	2300      	movs	r3, #0
 800728a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800728c:	68fb      	ldr	r3, [r7, #12]
 800728e:	3301      	adds	r3, #1
 8007290:	60fb      	str	r3, [r7, #12]
 8007292:	68fb      	ldr	r3, [r7, #12]
 8007294:	4a13      	ldr	r2, [pc, #76]	; (80072e4 <USB_CoreReset+0x64>)
 8007296:	4293      	cmp	r3, r2
 8007298:	d901      	bls.n	800729e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800729a:	2303      	movs	r3, #3
 800729c:	e01b      	b.n	80072d6 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	691b      	ldr	r3, [r3, #16]
 80072a2:	2b00      	cmp	r3, #0
 80072a4:	daf2      	bge.n	800728c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80072a6:	2300      	movs	r3, #0
 80072a8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	691b      	ldr	r3, [r3, #16]
 80072ae:	f043 0201 	orr.w	r2, r3, #1
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80072b6:	68fb      	ldr	r3, [r7, #12]
 80072b8:	3301      	adds	r3, #1
 80072ba:	60fb      	str	r3, [r7, #12]
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	4a09      	ldr	r2, [pc, #36]	; (80072e4 <USB_CoreReset+0x64>)
 80072c0:	4293      	cmp	r3, r2
 80072c2:	d901      	bls.n	80072c8 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80072c4:	2303      	movs	r3, #3
 80072c6:	e006      	b.n	80072d6 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	691b      	ldr	r3, [r3, #16]
 80072cc:	f003 0301 	and.w	r3, r3, #1
 80072d0:	2b01      	cmp	r3, #1
 80072d2:	d0f0      	beq.n	80072b6 <USB_CoreReset+0x36>

  return HAL_OK;
 80072d4:	2300      	movs	r3, #0
}
 80072d6:	4618      	mov	r0, r3
 80072d8:	3714      	adds	r7, #20
 80072da:	46bd      	mov	sp, r7
 80072dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072e0:	4770      	bx	lr
 80072e2:	bf00      	nop
 80072e4:	00030d40 	.word	0x00030d40

080072e8 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 80072e8:	b580      	push	{r7, lr}
 80072ea:	b084      	sub	sp, #16
 80072ec:	af04      	add	r7, sp, #16
  /* Initilialize the LwIP stack with RTOS */
  tcpip_init( NULL, NULL );
 80072ee:	2100      	movs	r1, #0
 80072f0:	2000      	movs	r0, #0
 80072f2:	f004 fe41 	bl	800bf78 <tcpip_init>

  /* IP addresses initialization with DHCP (IPv4) */
  ipaddr.addr = 0;
 80072f6:	4b17      	ldr	r3, [pc, #92]	; (8007354 <MX_LWIP_Init+0x6c>)
 80072f8:	2200      	movs	r2, #0
 80072fa:	601a      	str	r2, [r3, #0]
  netmask.addr = 0;
 80072fc:	4b16      	ldr	r3, [pc, #88]	; (8007358 <MX_LWIP_Init+0x70>)
 80072fe:	2200      	movs	r2, #0
 8007300:	601a      	str	r2, [r3, #0]
  gw.addr = 0;
 8007302:	4b16      	ldr	r3, [pc, #88]	; (800735c <MX_LWIP_Init+0x74>)
 8007304:	2200      	movs	r2, #0
 8007306:	601a      	str	r2, [r3, #0]

  /* add the network interface (IPv4/IPv6) with RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 8007308:	4b15      	ldr	r3, [pc, #84]	; (8007360 <MX_LWIP_Init+0x78>)
 800730a:	9302      	str	r3, [sp, #8]
 800730c:	4b15      	ldr	r3, [pc, #84]	; (8007364 <MX_LWIP_Init+0x7c>)
 800730e:	9301      	str	r3, [sp, #4]
 8007310:	2300      	movs	r3, #0
 8007312:	9300      	str	r3, [sp, #0]
 8007314:	4b11      	ldr	r3, [pc, #68]	; (800735c <MX_LWIP_Init+0x74>)
 8007316:	4a10      	ldr	r2, [pc, #64]	; (8007358 <MX_LWIP_Init+0x70>)
 8007318:	490e      	ldr	r1, [pc, #56]	; (8007354 <MX_LWIP_Init+0x6c>)
 800731a:	4813      	ldr	r0, [pc, #76]	; (8007368 <MX_LWIP_Init+0x80>)
 800731c:	f005 fae8 	bl	800c8f0 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 8007320:	4811      	ldr	r0, [pc, #68]	; (8007368 <MX_LWIP_Init+0x80>)
 8007322:	f005 fbcd 	bl	800cac0 <netif_set_default>

  if (netif_is_link_up(&gnetif))
 8007326:	4b10      	ldr	r3, [pc, #64]	; (8007368 <MX_LWIP_Init+0x80>)
 8007328:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800732c:	089b      	lsrs	r3, r3, #2
 800732e:	f003 0301 	and.w	r3, r3, #1
 8007332:	b2db      	uxtb	r3, r3
 8007334:	2b00      	cmp	r3, #0
 8007336:	d003      	beq.n	8007340 <MX_LWIP_Init+0x58>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 8007338:	480b      	ldr	r0, [pc, #44]	; (8007368 <MX_LWIP_Init+0x80>)
 800733a:	f005 fbd1 	bl	800cae0 <netif_set_up>
 800733e:	e002      	b.n	8007346 <MX_LWIP_Init+0x5e>
  }
  else
  {
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
 8007340:	4809      	ldr	r0, [pc, #36]	; (8007368 <MX_LWIP_Init+0x80>)
 8007342:	f005 fc11 	bl	800cb68 <netif_set_down>
  }

  /* Start DHCP negotiation for a network interface (IPv4) */
  dhcp_start(&gnetif);
 8007346:	4808      	ldr	r0, [pc, #32]	; (8007368 <MX_LWIP_Init+0x80>)
 8007348:	f00c fcbe 	bl	8013cc8 <dhcp_start>

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 800734c:	bf00      	nop
 800734e:	46bd      	mov	sp, r7
 8007350:	bd80      	pop	{r7, pc}
 8007352:	bf00      	nop
 8007354:	2000440c 	.word	0x2000440c
 8007358:	20004410 	.word	0x20004410
 800735c:	20004414 	.word	0x20004414
 8007360:	0800bea1 	.word	0x0800bea1
 8007364:	08007989 	.word	0x08007989
 8007368:	200043d8 	.word	0x200043d8

0800736c <HAL_ETH_MspInit>:
/* USER CODE END 3 */

/* Private functions ---------------------------------------------------------*/

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 800736c:	b580      	push	{r7, lr}
 800736e:	b08e      	sub	sp, #56	; 0x38
 8007370:	af00      	add	r7, sp, #0
 8007372:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007374:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007378:	2200      	movs	r2, #0
 800737a:	601a      	str	r2, [r3, #0]
 800737c:	605a      	str	r2, [r3, #4]
 800737e:	609a      	str	r2, [r3, #8]
 8007380:	60da      	str	r2, [r3, #12]
 8007382:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	4a55      	ldr	r2, [pc, #340]	; (80074e0 <HAL_ETH_MspInit+0x174>)
 800738a:	4293      	cmp	r3, r2
 800738c:	f040 80a4 	bne.w	80074d8 <HAL_ETH_MspInit+0x16c>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 8007390:	2300      	movs	r3, #0
 8007392:	623b      	str	r3, [r7, #32]
 8007394:	4b53      	ldr	r3, [pc, #332]	; (80074e4 <HAL_ETH_MspInit+0x178>)
 8007396:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007398:	4a52      	ldr	r2, [pc, #328]	; (80074e4 <HAL_ETH_MspInit+0x178>)
 800739a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800739e:	6313      	str	r3, [r2, #48]	; 0x30
 80073a0:	4b50      	ldr	r3, [pc, #320]	; (80074e4 <HAL_ETH_MspInit+0x178>)
 80073a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80073a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80073a8:	623b      	str	r3, [r7, #32]
 80073aa:	6a3b      	ldr	r3, [r7, #32]
 80073ac:	2300      	movs	r3, #0
 80073ae:	61fb      	str	r3, [r7, #28]
 80073b0:	4b4c      	ldr	r3, [pc, #304]	; (80074e4 <HAL_ETH_MspInit+0x178>)
 80073b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80073b4:	4a4b      	ldr	r2, [pc, #300]	; (80074e4 <HAL_ETH_MspInit+0x178>)
 80073b6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80073ba:	6313      	str	r3, [r2, #48]	; 0x30
 80073bc:	4b49      	ldr	r3, [pc, #292]	; (80074e4 <HAL_ETH_MspInit+0x178>)
 80073be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80073c0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80073c4:	61fb      	str	r3, [r7, #28]
 80073c6:	69fb      	ldr	r3, [r7, #28]
 80073c8:	2300      	movs	r3, #0
 80073ca:	61bb      	str	r3, [r7, #24]
 80073cc:	4b45      	ldr	r3, [pc, #276]	; (80074e4 <HAL_ETH_MspInit+0x178>)
 80073ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80073d0:	4a44      	ldr	r2, [pc, #272]	; (80074e4 <HAL_ETH_MspInit+0x178>)
 80073d2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80073d6:	6313      	str	r3, [r2, #48]	; 0x30
 80073d8:	4b42      	ldr	r3, [pc, #264]	; (80074e4 <HAL_ETH_MspInit+0x178>)
 80073da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80073dc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80073e0:	61bb      	str	r3, [r7, #24]
 80073e2:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80073e4:	2300      	movs	r3, #0
 80073e6:	617b      	str	r3, [r7, #20]
 80073e8:	4b3e      	ldr	r3, [pc, #248]	; (80074e4 <HAL_ETH_MspInit+0x178>)
 80073ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80073ec:	4a3d      	ldr	r2, [pc, #244]	; (80074e4 <HAL_ETH_MspInit+0x178>)
 80073ee:	f043 0304 	orr.w	r3, r3, #4
 80073f2:	6313      	str	r3, [r2, #48]	; 0x30
 80073f4:	4b3b      	ldr	r3, [pc, #236]	; (80074e4 <HAL_ETH_MspInit+0x178>)
 80073f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80073f8:	f003 0304 	and.w	r3, r3, #4
 80073fc:	617b      	str	r3, [r7, #20]
 80073fe:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007400:	2300      	movs	r3, #0
 8007402:	613b      	str	r3, [r7, #16]
 8007404:	4b37      	ldr	r3, [pc, #220]	; (80074e4 <HAL_ETH_MspInit+0x178>)
 8007406:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007408:	4a36      	ldr	r2, [pc, #216]	; (80074e4 <HAL_ETH_MspInit+0x178>)
 800740a:	f043 0301 	orr.w	r3, r3, #1
 800740e:	6313      	str	r3, [r2, #48]	; 0x30
 8007410:	4b34      	ldr	r3, [pc, #208]	; (80074e4 <HAL_ETH_MspInit+0x178>)
 8007412:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007414:	f003 0301 	and.w	r3, r3, #1
 8007418:	613b      	str	r3, [r7, #16]
 800741a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800741c:	2300      	movs	r3, #0
 800741e:	60fb      	str	r3, [r7, #12]
 8007420:	4b30      	ldr	r3, [pc, #192]	; (80074e4 <HAL_ETH_MspInit+0x178>)
 8007422:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007424:	4a2f      	ldr	r2, [pc, #188]	; (80074e4 <HAL_ETH_MspInit+0x178>)
 8007426:	f043 0302 	orr.w	r3, r3, #2
 800742a:	6313      	str	r3, [r2, #48]	; 0x30
 800742c:	4b2d      	ldr	r3, [pc, #180]	; (80074e4 <HAL_ETH_MspInit+0x178>)
 800742e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007430:	f003 0302 	and.w	r3, r3, #2
 8007434:	60fb      	str	r3, [r7, #12]
 8007436:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8007438:	2300      	movs	r3, #0
 800743a:	60bb      	str	r3, [r7, #8]
 800743c:	4b29      	ldr	r3, [pc, #164]	; (80074e4 <HAL_ETH_MspInit+0x178>)
 800743e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007440:	4a28      	ldr	r2, [pc, #160]	; (80074e4 <HAL_ETH_MspInit+0x178>)
 8007442:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007446:	6313      	str	r3, [r2, #48]	; 0x30
 8007448:	4b26      	ldr	r3, [pc, #152]	; (80074e4 <HAL_ETH_MspInit+0x178>)
 800744a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800744c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007450:	60bb      	str	r3, [r7, #8]
 8007452:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0 
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8007454:	2332      	movs	r3, #50	; 0x32
 8007456:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007458:	2302      	movs	r3, #2
 800745a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800745c:	2300      	movs	r3, #0
 800745e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007460:	2303      	movs	r3, #3
 8007462:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8007464:	230b      	movs	r3, #11
 8007466:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8007468:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800746c:	4619      	mov	r1, r3
 800746e:	481e      	ldr	r0, [pc, #120]	; (80074e8 <HAL_ETH_MspInit+0x17c>)
 8007470:	f7fb fd0a 	bl	8002e88 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8007474:	2386      	movs	r3, #134	; 0x86
 8007476:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007478:	2302      	movs	r3, #2
 800747a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800747c:	2300      	movs	r3, #0
 800747e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007480:	2303      	movs	r3, #3
 8007482:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8007484:	230b      	movs	r3, #11
 8007486:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007488:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800748c:	4619      	mov	r1, r3
 800748e:	4817      	ldr	r0, [pc, #92]	; (80074ec <HAL_ETH_MspInit+0x180>)
 8007490:	f7fb fcfa 	bl	8002e88 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8007494:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8007498:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800749a:	2302      	movs	r3, #2
 800749c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800749e:	2300      	movs	r3, #0
 80074a0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80074a2:	2303      	movs	r3, #3
 80074a4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80074a6:	230b      	movs	r3, #11
 80074a8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 80074aa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80074ae:	4619      	mov	r1, r3
 80074b0:	480f      	ldr	r0, [pc, #60]	; (80074f0 <HAL_ETH_MspInit+0x184>)
 80074b2:	f7fb fce9 	bl	8002e88 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 80074b6:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80074ba:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80074bc:	2302      	movs	r3, #2
 80074be:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80074c0:	2300      	movs	r3, #0
 80074c2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80074c4:	2303      	movs	r3, #3
 80074c6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80074c8:	230b      	movs	r3, #11
 80074ca:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80074cc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80074d0:	4619      	mov	r1, r3
 80074d2:	4808      	ldr	r0, [pc, #32]	; (80074f4 <HAL_ETH_MspInit+0x188>)
 80074d4:	f7fb fcd8 	bl	8002e88 <HAL_GPIO_Init>

  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 80074d8:	bf00      	nop
 80074da:	3738      	adds	r7, #56	; 0x38
 80074dc:	46bd      	mov	sp, r7
 80074de:	bd80      	pop	{r7, pc}
 80074e0:	40028000 	.word	0x40028000
 80074e4:	40023800 	.word	0x40023800
 80074e8:	40020800 	.word	0x40020800
 80074ec:	40020000 	.word	0x40020000
 80074f0:	40020400 	.word	0x40020400
 80074f4:	40021800 	.word	0x40021800

080074f8 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{ 
 80074f8:	b5b0      	push	{r4, r5, r7, lr}
 80074fa:	b090      	sub	sp, #64	; 0x40
 80074fc:	af00      	add	r7, sp, #0
 80074fe:	6078      	str	r0, [r7, #4]
  uint32_t regvalue = 0;
 8007500:	2300      	movs	r3, #0
 8007502:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_StatusTypeDef hal_eth_init_status;
  
/* Init ETH */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 8007504:	4b5c      	ldr	r3, [pc, #368]	; (8007678 <low_level_init+0x180>)
 8007506:	4a5d      	ldr	r2, [pc, #372]	; (800767c <low_level_init+0x184>)
 8007508:	601a      	str	r2, [r3, #0]
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 800750a:	4b5b      	ldr	r3, [pc, #364]	; (8007678 <low_level_init+0x180>)
 800750c:	2201      	movs	r2, #1
 800750e:	605a      	str	r2, [r3, #4]
  heth.Init.PhyAddress = LAN8742A_PHY_ADDRESS;
 8007510:	4b59      	ldr	r3, [pc, #356]	; (8007678 <low_level_init+0x180>)
 8007512:	2200      	movs	r2, #0
 8007514:	821a      	strh	r2, [r3, #16]
  MACAddr[0] = 0x00;
 8007516:	2300      	movs	r3, #0
 8007518:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  MACAddr[1] = 0x80;
 800751c:	2380      	movs	r3, #128	; 0x80
 800751e:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  MACAddr[2] = 0xE1;
 8007522:	23e1      	movs	r3, #225	; 0xe1
 8007524:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  MACAddr[3] = 0x00;
 8007528:	2300      	movs	r3, #0
 800752a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  MACAddr[4] = 0x00;
 800752e:	2300      	movs	r3, #0
 8007530:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  MACAddr[5] = 0x00;
 8007534:	2300      	movs	r3, #0
 8007536:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  heth.Init.MACAddr = &MACAddr[0];
 800753a:	4a4f      	ldr	r2, [pc, #316]	; (8007678 <low_level_init+0x180>)
 800753c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8007540:	6153      	str	r3, [r2, #20]
  heth.Init.RxMode = ETH_RXINTERRUPT_MODE;
 8007542:	4b4d      	ldr	r3, [pc, #308]	; (8007678 <low_level_init+0x180>)
 8007544:	2201      	movs	r2, #1
 8007546:	619a      	str	r2, [r3, #24]
  heth.Init.ChecksumMode = ETH_CHECKSUM_BY_HARDWARE;
 8007548:	4b4b      	ldr	r3, [pc, #300]	; (8007678 <low_level_init+0x180>)
 800754a:	2200      	movs	r2, #0
 800754c:	61da      	str	r2, [r3, #28]
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 800754e:	4b4a      	ldr	r3, [pc, #296]	; (8007678 <low_level_init+0x180>)
 8007550:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8007554:	621a      	str	r2, [r3, #32]

  /* USER CODE BEGIN MACADDRESS */
    
  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 8007556:	4848      	ldr	r0, [pc, #288]	; (8007678 <low_level_init+0x180>)
 8007558:	f7fa fcfe 	bl	8001f58 <HAL_ETH_Init>
 800755c:	4603      	mov	r3, r0
 800755e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

  if (hal_eth_init_status == HAL_OK)
 8007562:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8007566:	2b00      	cmp	r3, #0
 8007568:	d108      	bne.n	800757c <low_level_init+0x84>
  {
    /* Set netif link flag */  
    netif->flags |= NETIF_FLAG_LINK_UP;
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8007570:	f043 0304 	orr.w	r3, r3, #4
 8007574:	b2da      	uxtb	r2, r3
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
  }
  /* Initialize Tx Descriptors list: Chain Mode */
  HAL_ETH_DMATxDescListInit(&heth, DMATxDscrTab, &Tx_Buff[0][0], ETH_TXBUFNB);
 800757c:	2304      	movs	r3, #4
 800757e:	4a40      	ldr	r2, [pc, #256]	; (8007680 <low_level_init+0x188>)
 8007580:	4940      	ldr	r1, [pc, #256]	; (8007684 <low_level_init+0x18c>)
 8007582:	483d      	ldr	r0, [pc, #244]	; (8007678 <low_level_init+0x180>)
 8007584:	f7fa fe86 	bl	8002294 <HAL_ETH_DMATxDescListInit>
     
  /* Initialize Rx Descriptors list: Chain Mode  */
  HAL_ETH_DMARxDescListInit(&heth, DMARxDscrTab, &Rx_Buff[0][0], ETH_RXBUFNB);
 8007588:	2304      	movs	r3, #4
 800758a:	4a3f      	ldr	r2, [pc, #252]	; (8007688 <low_level_init+0x190>)
 800758c:	493f      	ldr	r1, [pc, #252]	; (800768c <low_level_init+0x194>)
 800758e:	483a      	ldr	r0, [pc, #232]	; (8007678 <low_level_init+0x180>)
 8007590:	f7fa fee9 	bl	8002366 <HAL_ETH_DMARxDescListInit>
 
#if LWIP_ARP || LWIP_ETHERNET 

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	2206      	movs	r2, #6
 8007598:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  
  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 800759c:	4b36      	ldr	r3, [pc, #216]	; (8007678 <low_level_init+0x180>)
 800759e:	695b      	ldr	r3, [r3, #20]
 80075a0:	781a      	ldrb	r2, [r3, #0]
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 80075a8:	4b33      	ldr	r3, [pc, #204]	; (8007678 <low_level_init+0x180>)
 80075aa:	695b      	ldr	r3, [r3, #20]
 80075ac:	785a      	ldrb	r2, [r3, #1]
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 80075b4:	4b30      	ldr	r3, [pc, #192]	; (8007678 <low_level_init+0x180>)
 80075b6:	695b      	ldr	r3, [r3, #20]
 80075b8:	789a      	ldrb	r2, [r3, #2]
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 80075c0:	4b2d      	ldr	r3, [pc, #180]	; (8007678 <low_level_init+0x180>)
 80075c2:	695b      	ldr	r3, [r3, #20]
 80075c4:	78da      	ldrb	r2, [r3, #3]
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 80075cc:	4b2a      	ldr	r3, [pc, #168]	; (8007678 <low_level_init+0x180>)
 80075ce:	695b      	ldr	r3, [r3, #20]
 80075d0:	791a      	ldrb	r2, [r3, #4]
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 80075d8:	4b27      	ldr	r3, [pc, #156]	; (8007678 <low_level_init+0x180>)
 80075da:	695b      	ldr	r3, [r3, #20]
 80075dc:	795a      	ldrb	r2, [r3, #5]
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  
  /* maximum transfer unit */
  netif->mtu = 1500;
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	f240 52dc 	movw	r2, #1500	; 0x5dc
 80075ea:	84da      	strh	r2, [r3, #38]	; 0x26
  
  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80075f2:	f043 030a 	orr.w	r3, r3, #10
 80075f6:	b2da      	uxtb	r2, r3
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
  #else 
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */
  
/* create a binary semaphore used for informing ethernetif of frame reception */
  osSemaphoreDef(SEM);
 80075fe:	2300      	movs	r3, #0
 8007600:	62bb      	str	r3, [r7, #40]	; 0x28
 8007602:	2300      	movs	r3, #0
 8007604:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_xSemaphore = osSemaphoreCreate(osSemaphore(SEM), 1);
 8007606:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800760a:	2101      	movs	r1, #1
 800760c:	4618      	mov	r0, r3
 800760e:	f001 fe31 	bl	8009274 <osSemaphoreCreate>
 8007612:	4602      	mov	r2, r0
 8007614:	4b1e      	ldr	r3, [pc, #120]	; (8007690 <low_level_init+0x198>)
 8007616:	601a      	str	r2, [r3, #0]

/* create the task that handles the ETH_MAC */
  osThreadDef(EthIf, ethernetif_input, osPriorityRealtime, 0, INTERFACE_THREAD_STACK_SIZE);
 8007618:	4b1e      	ldr	r3, [pc, #120]	; (8007694 <low_level_init+0x19c>)
 800761a:	f107 040c 	add.w	r4, r7, #12
 800761e:	461d      	mov	r5, r3
 8007620:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007622:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007624:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8007628:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  osThreadCreate (osThread(EthIf), netif);
 800762c:	f107 030c 	add.w	r3, r7, #12
 8007630:	6879      	ldr	r1, [r7, #4]
 8007632:	4618      	mov	r0, r3
 8007634:	f001 fd21 	bl	800907a <osThreadCreate>
  /* Enable MAC and DMA transmission and reception */
  HAL_ETH_Start(&heth);
 8007638:	480f      	ldr	r0, [pc, #60]	; (8007678 <low_level_init+0x180>)
 800763a:	f7fb f941 	bl	80028c0 <HAL_ETH_Start>
    
/* USER CODE END PHY_PRE_CONFIG */
  

  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR, &regvalue);
 800763e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8007642:	461a      	mov	r2, r3
 8007644:	211d      	movs	r1, #29
 8007646:	480c      	ldr	r0, [pc, #48]	; (8007678 <low_level_init+0x180>)
 8007648:	f7fb f86c 	bl	8002724 <HAL_ETH_ReadPHYRegister>
  regvalue |= (PHY_ISFR_INT4);
 800764c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800764e:	f043 030b 	orr.w	r3, r3, #11
 8007652:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Enable Interrupt on change of link status */ 
  HAL_ETH_WritePHYRegister(&heth, PHY_ISFR , regvalue );
 8007654:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007656:	461a      	mov	r2, r3
 8007658:	211d      	movs	r1, #29
 800765a:	4807      	ldr	r0, [pc, #28]	; (8007678 <low_level_init+0x180>)
 800765c:	f7fb f8ca 	bl	80027f4 <HAL_ETH_WritePHYRegister>
  
  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR , &regvalue);
 8007660:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8007664:	461a      	mov	r2, r3
 8007666:	211d      	movs	r1, #29
 8007668:	4803      	ldr	r0, [pc, #12]	; (8007678 <low_level_init+0x180>)
 800766a:	f7fb f85b 	bl	8002724 <HAL_ETH_ReadPHYRegister>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */ 
    
/* USER CODE END LOW_LEVEL_INIT */
}
 800766e:	bf00      	nop
 8007670:	3740      	adds	r7, #64	; 0x40
 8007672:	46bd      	mov	sp, r7
 8007674:	bdb0      	pop	{r4, r5, r7, pc}
 8007676:	bf00      	nop
 8007678:	20005ce8 	.word	0x20005ce8
 800767c:	40028000 	.word	0x40028000
 8007680:	20005d30 	.word	0x20005d30
 8007684:	20004418 	.word	0x20004418
 8007688:	20004498 	.word	0x20004498
 800768c:	20005c68 	.word	0x20005c68
 8007690:	2000046c 	.word	0x2000046c
 8007694:	08019468 	.word	0x08019468

08007698 <low_level_output>:
 *       to become availale since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 8007698:	b580      	push	{r7, lr}
 800769a:	b08a      	sub	sp, #40	; 0x28
 800769c:	af00      	add	r7, sp, #0
 800769e:	6078      	str	r0, [r7, #4]
 80076a0:	6039      	str	r1, [r7, #0]
  err_t errval;
  struct pbuf *q;
  uint8_t *buffer = (uint8_t *)(heth.TxDesc->Buffer1Addr);
 80076a2:	4b4b      	ldr	r3, [pc, #300]	; (80077d0 <low_level_output+0x138>)
 80076a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076a6:	689b      	ldr	r3, [r3, #8]
 80076a8:	61fb      	str	r3, [r7, #28]
  __IO ETH_DMADescTypeDef *DmaTxDesc;
  uint32_t framelength = 0;
 80076aa:	2300      	movs	r3, #0
 80076ac:	617b      	str	r3, [r7, #20]
  uint32_t bufferoffset = 0;
 80076ae:	2300      	movs	r3, #0
 80076b0:	613b      	str	r3, [r7, #16]
  uint32_t byteslefttocopy = 0;
 80076b2:	2300      	movs	r3, #0
 80076b4:	60fb      	str	r3, [r7, #12]
  uint32_t payloadoffset = 0;
 80076b6:	2300      	movs	r3, #0
 80076b8:	60bb      	str	r3, [r7, #8]
  DmaTxDesc = heth.TxDesc;
 80076ba:	4b45      	ldr	r3, [pc, #276]	; (80077d0 <low_level_output+0x138>)
 80076bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076be:	61bb      	str	r3, [r7, #24]
  bufferoffset = 0;
 80076c0:	2300      	movs	r3, #0
 80076c2:	613b      	str	r3, [r7, #16]
  
  /* copy frame from pbufs to driver buffers */
  for(q = p; q != NULL; q = q->next)
 80076c4:	683b      	ldr	r3, [r7, #0]
 80076c6:	623b      	str	r3, [r7, #32]
 80076c8:	e05a      	b.n	8007780 <low_level_output+0xe8>
    {
      /* Is this buffer available? If not, goto error */
      if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 80076ca:	69bb      	ldr	r3, [r7, #24]
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	2b00      	cmp	r3, #0
 80076d0:	da03      	bge.n	80076da <low_level_output+0x42>
      {
        errval = ERR_USE;
 80076d2:	23f8      	movs	r3, #248	; 0xf8
 80076d4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        goto error;
 80076d8:	e05c      	b.n	8007794 <low_level_output+0xfc>
      }
    
      /* Get bytes in current lwIP buffer */
      byteslefttocopy = q->len;
 80076da:	6a3b      	ldr	r3, [r7, #32]
 80076dc:	895b      	ldrh	r3, [r3, #10]
 80076de:	60fb      	str	r3, [r7, #12]
      payloadoffset = 0;
 80076e0:	2300      	movs	r3, #0
 80076e2:	60bb      	str	r3, [r7, #8]
    
      /* Check if the length of data to copy is bigger than Tx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 80076e4:	e02f      	b.n	8007746 <low_level_output+0xae>
      {
        /* Copy data to Tx buffer*/
        memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), (ETH_TX_BUF_SIZE - bufferoffset) );
 80076e6:	69fa      	ldr	r2, [r7, #28]
 80076e8:	693b      	ldr	r3, [r7, #16]
 80076ea:	18d0      	adds	r0, r2, r3
 80076ec:	6a3b      	ldr	r3, [r7, #32]
 80076ee:	685a      	ldr	r2, [r3, #4]
 80076f0:	68bb      	ldr	r3, [r7, #8]
 80076f2:	18d1      	adds	r1, r2, r3
 80076f4:	693b      	ldr	r3, [r7, #16]
 80076f6:	f5c3 63be 	rsb	r3, r3, #1520	; 0x5f0
 80076fa:	3304      	adds	r3, #4
 80076fc:	461a      	mov	r2, r3
 80076fe:	f010 fee8 	bl	80184d2 <memcpy>
      
        /* Point to next descriptor */
        DmaTxDesc = (ETH_DMADescTypeDef *)(DmaTxDesc->Buffer2NextDescAddr);
 8007702:	69bb      	ldr	r3, [r7, #24]
 8007704:	68db      	ldr	r3, [r3, #12]
 8007706:	61bb      	str	r3, [r7, #24]
      
        /* Check if the buffer is available */
        if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8007708:	69bb      	ldr	r3, [r7, #24]
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	2b00      	cmp	r3, #0
 800770e:	da03      	bge.n	8007718 <low_level_output+0x80>
        {
          errval = ERR_USE;
 8007710:	23f8      	movs	r3, #248	; 0xf8
 8007712:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          goto error;
 8007716:	e03d      	b.n	8007794 <low_level_output+0xfc>
        }
      
        buffer = (uint8_t *)(DmaTxDesc->Buffer1Addr);
 8007718:	69bb      	ldr	r3, [r7, #24]
 800771a:	689b      	ldr	r3, [r3, #8]
 800771c:	61fb      	str	r3, [r7, #28]
      
        byteslefttocopy = byteslefttocopy - (ETH_TX_BUF_SIZE - bufferoffset);
 800771e:	693a      	ldr	r2, [r7, #16]
 8007720:	68fb      	ldr	r3, [r7, #12]
 8007722:	4413      	add	r3, r2
 8007724:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 8007728:	60fb      	str	r3, [r7, #12]
        payloadoffset = payloadoffset + (ETH_TX_BUF_SIZE - bufferoffset);
 800772a:	68ba      	ldr	r2, [r7, #8]
 800772c:	693b      	ldr	r3, [r7, #16]
 800772e:	1ad3      	subs	r3, r2, r3
 8007730:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8007734:	60bb      	str	r3, [r7, #8]
        framelength = framelength + (ETH_TX_BUF_SIZE - bufferoffset);
 8007736:	697a      	ldr	r2, [r7, #20]
 8007738:	693b      	ldr	r3, [r7, #16]
 800773a:	1ad3      	subs	r3, r2, r3
 800773c:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8007740:	617b      	str	r3, [r7, #20]
        bufferoffset = 0;
 8007742:	2300      	movs	r3, #0
 8007744:	613b      	str	r3, [r7, #16]
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 8007746:	68fa      	ldr	r2, [r7, #12]
 8007748:	693b      	ldr	r3, [r7, #16]
 800774a:	4413      	add	r3, r2
 800774c:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8007750:	4293      	cmp	r3, r2
 8007752:	d8c8      	bhi.n	80076e6 <low_level_output+0x4e>
      }
    
      /* Copy the remaining bytes */
      memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), byteslefttocopy );
 8007754:	69fa      	ldr	r2, [r7, #28]
 8007756:	693b      	ldr	r3, [r7, #16]
 8007758:	18d0      	adds	r0, r2, r3
 800775a:	6a3b      	ldr	r3, [r7, #32]
 800775c:	685a      	ldr	r2, [r3, #4]
 800775e:	68bb      	ldr	r3, [r7, #8]
 8007760:	4413      	add	r3, r2
 8007762:	68fa      	ldr	r2, [r7, #12]
 8007764:	4619      	mov	r1, r3
 8007766:	f010 feb4 	bl	80184d2 <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 800776a:	693a      	ldr	r2, [r7, #16]
 800776c:	68fb      	ldr	r3, [r7, #12]
 800776e:	4413      	add	r3, r2
 8007770:	613b      	str	r3, [r7, #16]
      framelength = framelength + byteslefttocopy;
 8007772:	697a      	ldr	r2, [r7, #20]
 8007774:	68fb      	ldr	r3, [r7, #12]
 8007776:	4413      	add	r3, r2
 8007778:	617b      	str	r3, [r7, #20]
  for(q = p; q != NULL; q = q->next)
 800777a:	6a3b      	ldr	r3, [r7, #32]
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	623b      	str	r3, [r7, #32]
 8007780:	6a3b      	ldr	r3, [r7, #32]
 8007782:	2b00      	cmp	r3, #0
 8007784:	d1a1      	bne.n	80076ca <low_level_output+0x32>
    }
  
  /* Prepare transmit descriptors to give to DMA */ 
  HAL_ETH_TransmitFrame(&heth, framelength);
 8007786:	6979      	ldr	r1, [r7, #20]
 8007788:	4811      	ldr	r0, [pc, #68]	; (80077d0 <low_level_output+0x138>)
 800778a:	f7fa fe59 	bl	8002440 <HAL_ETH_TransmitFrame>
  
  errval = ERR_OK;
 800778e:	2300      	movs	r3, #0
 8007790:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  
error:
  
  /* When Transmit Underflow flag is set, clear it and issue a Transmit Poll Demand to resume transmission */
  if ((heth.Instance->DMASR & ETH_DMASR_TUS) != (uint32_t)RESET)
 8007794:	4b0e      	ldr	r3, [pc, #56]	; (80077d0 <low_level_output+0x138>)
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800779c:	3314      	adds	r3, #20
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	f003 0320 	and.w	r3, r3, #32
 80077a4:	2b00      	cmp	r3, #0
 80077a6:	d00d      	beq.n	80077c4 <low_level_output+0x12c>
  {
    /* Clear TUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_TUS;
 80077a8:	4b09      	ldr	r3, [pc, #36]	; (80077d0 <low_level_output+0x138>)
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80077b0:	3314      	adds	r3, #20
 80077b2:	2220      	movs	r2, #32
 80077b4:	601a      	str	r2, [r3, #0]

    /* Resume DMA transmission*/
    heth.Instance->DMATPDR = 0;
 80077b6:	4b06      	ldr	r3, [pc, #24]	; (80077d0 <low_level_output+0x138>)
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80077be:	3304      	adds	r3, #4
 80077c0:	2200      	movs	r2, #0
 80077c2:	601a      	str	r2, [r3, #0]
  }
  return errval;
 80077c4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 80077c8:	4618      	mov	r0, r3
 80077ca:	3728      	adds	r7, #40	; 0x28
 80077cc:	46bd      	mov	sp, r7
 80077ce:	bd80      	pop	{r7, pc}
 80077d0:	20005ce8 	.word	0x20005ce8

080077d4 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 80077d4:	b580      	push	{r7, lr}
 80077d6:	b08c      	sub	sp, #48	; 0x30
 80077d8:	af00      	add	r7, sp, #0
 80077da:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 80077dc:	2300      	movs	r3, #0
 80077de:	62fb      	str	r3, [r7, #44]	; 0x2c
  struct pbuf *q = NULL;
 80077e0:	2300      	movs	r3, #0
 80077e2:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t len = 0;
 80077e4:	2300      	movs	r3, #0
 80077e6:	81fb      	strh	r3, [r7, #14]
  uint8_t *buffer;
  __IO ETH_DMADescTypeDef *dmarxdesc;
  uint32_t bufferoffset = 0;
 80077e8:	2300      	movs	r3, #0
 80077ea:	61fb      	str	r3, [r7, #28]
  uint32_t payloadoffset = 0;
 80077ec:	2300      	movs	r3, #0
 80077ee:	61bb      	str	r3, [r7, #24]
  uint32_t byteslefttocopy = 0;
 80077f0:	2300      	movs	r3, #0
 80077f2:	617b      	str	r3, [r7, #20]
  uint32_t i=0;
 80077f4:	2300      	movs	r3, #0
 80077f6:	613b      	str	r3, [r7, #16]
  

  /* get received frame */
  if (HAL_ETH_GetReceivedFrame_IT(&heth) != HAL_OK)
 80077f8:	484e      	ldr	r0, [pc, #312]	; (8007934 <low_level_input+0x160>)
 80077fa:	f7fa ff0b 	bl	8002614 <HAL_ETH_GetReceivedFrame_IT>
 80077fe:	4603      	mov	r3, r0
 8007800:	2b00      	cmp	r3, #0
 8007802:	d001      	beq.n	8007808 <low_level_input+0x34>
    return NULL;
 8007804:	2300      	movs	r3, #0
 8007806:	e091      	b.n	800792c <low_level_input+0x158>
  
  /* Obtain the size of the packet and put it into the "len" variable. */
  len = heth.RxFrameInfos.length;
 8007808:	4b4a      	ldr	r3, [pc, #296]	; (8007934 <low_level_input+0x160>)
 800780a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800780c:	81fb      	strh	r3, [r7, #14]
  buffer = (uint8_t *)heth.RxFrameInfos.buffer;
 800780e:	4b49      	ldr	r3, [pc, #292]	; (8007934 <low_level_input+0x160>)
 8007810:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007812:	627b      	str	r3, [r7, #36]	; 0x24
  
  if (len > 0)
 8007814:	89fb      	ldrh	r3, [r7, #14]
 8007816:	2b00      	cmp	r3, #0
 8007818:	d006      	beq.n	8007828 <low_level_input+0x54>
  {
    /* We allocate a pbuf chain of pbufs from the Lwip buffer pool */
    p = pbuf_alloc(PBUF_RAW, len, PBUF_POOL);
 800781a:	89fb      	ldrh	r3, [r7, #14]
 800781c:	2203      	movs	r2, #3
 800781e:	4619      	mov	r1, r3
 8007820:	2004      	movs	r0, #4
 8007822:	f005 fa23 	bl	800cc6c <pbuf_alloc>
 8007826:	62f8      	str	r0, [r7, #44]	; 0x2c
  }
  
  if (p != NULL)
 8007828:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800782a:	2b00      	cmp	r3, #0
 800782c:	d04b      	beq.n	80078c6 <low_level_input+0xf2>
  {
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 800782e:	4b41      	ldr	r3, [pc, #260]	; (8007934 <low_level_input+0x160>)
 8007830:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007832:	623b      	str	r3, [r7, #32]
    bufferoffset = 0;
 8007834:	2300      	movs	r3, #0
 8007836:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 8007838:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800783a:	62bb      	str	r3, [r7, #40]	; 0x28
 800783c:	e040      	b.n	80078c0 <low_level_input+0xec>
    {
      byteslefttocopy = q->len;
 800783e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007840:	895b      	ldrh	r3, [r3, #10]
 8007842:	617b      	str	r3, [r7, #20]
      payloadoffset = 0;
 8007844:	2300      	movs	r3, #0
 8007846:	61bb      	str	r3, [r7, #24]
      
      /* Check if the length of bytes to copy in current pbuf is bigger than Rx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 8007848:	e021      	b.n	800788e <low_level_input+0xba>
      {
        /* Copy data to pbuf */
        memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), (ETH_RX_BUF_SIZE - bufferoffset));
 800784a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800784c:	685a      	ldr	r2, [r3, #4]
 800784e:	69bb      	ldr	r3, [r7, #24]
 8007850:	18d0      	adds	r0, r2, r3
 8007852:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007854:	69fb      	ldr	r3, [r7, #28]
 8007856:	18d1      	adds	r1, r2, r3
 8007858:	69fb      	ldr	r3, [r7, #28]
 800785a:	f5c3 63be 	rsb	r3, r3, #1520	; 0x5f0
 800785e:	3304      	adds	r3, #4
 8007860:	461a      	mov	r2, r3
 8007862:	f010 fe36 	bl	80184d2 <memcpy>
        
        /* Point to next descriptor */
        dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 8007866:	6a3b      	ldr	r3, [r7, #32]
 8007868:	68db      	ldr	r3, [r3, #12]
 800786a:	623b      	str	r3, [r7, #32]
        buffer = (uint8_t *)(dmarxdesc->Buffer1Addr);
 800786c:	6a3b      	ldr	r3, [r7, #32]
 800786e:	689b      	ldr	r3, [r3, #8]
 8007870:	627b      	str	r3, [r7, #36]	; 0x24
        
        byteslefttocopy = byteslefttocopy - (ETH_RX_BUF_SIZE - bufferoffset);
 8007872:	69fa      	ldr	r2, [r7, #28]
 8007874:	697b      	ldr	r3, [r7, #20]
 8007876:	4413      	add	r3, r2
 8007878:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 800787c:	617b      	str	r3, [r7, #20]
        payloadoffset = payloadoffset + (ETH_RX_BUF_SIZE - bufferoffset);
 800787e:	69ba      	ldr	r2, [r7, #24]
 8007880:	69fb      	ldr	r3, [r7, #28]
 8007882:	1ad3      	subs	r3, r2, r3
 8007884:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8007888:	61bb      	str	r3, [r7, #24]
        bufferoffset = 0;
 800788a:	2300      	movs	r3, #0
 800788c:	61fb      	str	r3, [r7, #28]
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 800788e:	697a      	ldr	r2, [r7, #20]
 8007890:	69fb      	ldr	r3, [r7, #28]
 8007892:	4413      	add	r3, r2
 8007894:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8007898:	4293      	cmp	r3, r2
 800789a:	d8d6      	bhi.n	800784a <low_level_input+0x76>
      }
      /* Copy remaining data in pbuf */
      memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), byteslefttocopy);
 800789c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800789e:	685a      	ldr	r2, [r3, #4]
 80078a0:	69bb      	ldr	r3, [r7, #24]
 80078a2:	18d0      	adds	r0, r2, r3
 80078a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80078a6:	69fb      	ldr	r3, [r7, #28]
 80078a8:	4413      	add	r3, r2
 80078aa:	697a      	ldr	r2, [r7, #20]
 80078ac:	4619      	mov	r1, r3
 80078ae:	f010 fe10 	bl	80184d2 <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 80078b2:	69fa      	ldr	r2, [r7, #28]
 80078b4:	697b      	ldr	r3, [r7, #20]
 80078b6:	4413      	add	r3, r2
 80078b8:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 80078ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	62bb      	str	r3, [r7, #40]	; 0x28
 80078c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078c2:	2b00      	cmp	r3, #0
 80078c4:	d1bb      	bne.n	800783e <low_level_input+0x6a>
    }
  }  
  
    /* Release descriptors to DMA */
    /* Point to first descriptor */
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 80078c6:	4b1b      	ldr	r3, [pc, #108]	; (8007934 <low_level_input+0x160>)
 80078c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80078ca:	623b      	str	r3, [r7, #32]
    /* Set Own bit in Rx descriptors: gives the buffers back to DMA */
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 80078cc:	2300      	movs	r3, #0
 80078ce:	613b      	str	r3, [r7, #16]
 80078d0:	e00b      	b.n	80078ea <low_level_input+0x116>
    {  
      dmarxdesc->Status |= ETH_DMARXDESC_OWN;
 80078d2:	6a3b      	ldr	r3, [r7, #32]
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80078da:	6a3b      	ldr	r3, [r7, #32]
 80078dc:	601a      	str	r2, [r3, #0]
      dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 80078de:	6a3b      	ldr	r3, [r7, #32]
 80078e0:	68db      	ldr	r3, [r3, #12]
 80078e2:	623b      	str	r3, [r7, #32]
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 80078e4:	693b      	ldr	r3, [r7, #16]
 80078e6:	3301      	adds	r3, #1
 80078e8:	613b      	str	r3, [r7, #16]
 80078ea:	4b12      	ldr	r3, [pc, #72]	; (8007934 <low_level_input+0x160>)
 80078ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80078ee:	693a      	ldr	r2, [r7, #16]
 80078f0:	429a      	cmp	r2, r3
 80078f2:	d3ee      	bcc.n	80078d2 <low_level_input+0xfe>
    }
    
    /* Clear Segment_Count */
    heth.RxFrameInfos.SegCount =0;  
 80078f4:	4b0f      	ldr	r3, [pc, #60]	; (8007934 <low_level_input+0x160>)
 80078f6:	2200      	movs	r2, #0
 80078f8:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* When Rx Buffer unavailable flag is set: clear it and resume reception */
  if ((heth.Instance->DMASR & ETH_DMASR_RBUS) != (uint32_t)RESET)  
 80078fa:	4b0e      	ldr	r3, [pc, #56]	; (8007934 <low_level_input+0x160>)
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007902:	3314      	adds	r3, #20
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800790a:	2b00      	cmp	r3, #0
 800790c:	d00d      	beq.n	800792a <low_level_input+0x156>
  {
    /* Clear RBUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_RBUS;
 800790e:	4b09      	ldr	r3, [pc, #36]	; (8007934 <low_level_input+0x160>)
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007916:	3314      	adds	r3, #20
 8007918:	2280      	movs	r2, #128	; 0x80
 800791a:	601a      	str	r2, [r3, #0]
    /* Resume DMA reception */
    heth.Instance->DMARPDR = 0;
 800791c:	4b05      	ldr	r3, [pc, #20]	; (8007934 <low_level_input+0x160>)
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007924:	3308      	adds	r3, #8
 8007926:	2200      	movs	r2, #0
 8007928:	601a      	str	r2, [r3, #0]
  }
  return p;
 800792a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800792c:	4618      	mov	r0, r3
 800792e:	3730      	adds	r7, #48	; 0x30
 8007930:	46bd      	mov	sp, r7
 8007932:	bd80      	pop	{r7, pc}
 8007934:	20005ce8 	.word	0x20005ce8

08007938 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(void const * argument)
{
 8007938:	b580      	push	{r7, lr}
 800793a:	b084      	sub	sp, #16
 800793c:	af00      	add	r7, sp, #0
 800793e:	6078      	str	r0, [r7, #4]
  struct pbuf *p;
  struct netif *netif = (struct netif *) argument;
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	60fb      	str	r3, [r7, #12]
  
  for( ;; )
  {
    if (osSemaphoreWait(s_xSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 8007944:	4b0f      	ldr	r3, [pc, #60]	; (8007984 <ethernetif_input+0x4c>)
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800794c:	4618      	mov	r0, r3
 800794e:	f001 fcc5 	bl	80092dc <osSemaphoreWait>
 8007952:	4603      	mov	r3, r0
 8007954:	2b00      	cmp	r3, #0
 8007956:	d1f5      	bne.n	8007944 <ethernetif_input+0xc>
    {
      do
      {   
        p = low_level_input( netif );
 8007958:	68f8      	ldr	r0, [r7, #12]
 800795a:	f7ff ff3b 	bl	80077d4 <low_level_input>
 800795e:	60b8      	str	r0, [r7, #8]
        if   (p != NULL)
 8007960:	68bb      	ldr	r3, [r7, #8]
 8007962:	2b00      	cmp	r3, #0
 8007964:	d00a      	beq.n	800797c <ethernetif_input+0x44>
        {
          if (netif->input( p, netif) != ERR_OK )
 8007966:	68fb      	ldr	r3, [r7, #12]
 8007968:	691b      	ldr	r3, [r3, #16]
 800796a:	68f9      	ldr	r1, [r7, #12]
 800796c:	68b8      	ldr	r0, [r7, #8]
 800796e:	4798      	blx	r3
 8007970:	4603      	mov	r3, r0
 8007972:	2b00      	cmp	r3, #0
 8007974:	d002      	beq.n	800797c <ethernetif_input+0x44>
          {
            pbuf_free(p);
 8007976:	68b8      	ldr	r0, [r7, #8]
 8007978:	f005 fcea 	bl	800d350 <pbuf_free>
          }
        }
      } while(p!=NULL);
 800797c:	68bb      	ldr	r3, [r7, #8]
 800797e:	2b00      	cmp	r3, #0
 8007980:	d1ea      	bne.n	8007958 <ethernetif_input+0x20>
    if (osSemaphoreWait(s_xSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 8007982:	e7df      	b.n	8007944 <ethernetif_input+0xc>
 8007984:	2000046c 	.word	0x2000046c

08007988 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 8007988:	b580      	push	{r7, lr}
 800798a:	b082      	sub	sp, #8
 800798c:	af00      	add	r7, sp, #0
 800798e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	2b00      	cmp	r3, #0
 8007994:	d106      	bne.n	80079a4 <ethernetif_init+0x1c>
 8007996:	4b0e      	ldr	r3, [pc, #56]	; (80079d0 <ethernetif_init+0x48>)
 8007998:	f240 2227 	movw	r2, #551	; 0x227
 800799c:	490d      	ldr	r1, [pc, #52]	; (80079d4 <ethernetif_init+0x4c>)
 800799e:	480e      	ldr	r0, [pc, #56]	; (80079d8 <ethernetif_init+0x50>)
 80079a0:	f010 fe52 	bl	8018648 <iprintf>
#if LWIP_NETIF_HOSTNAME
  /* Initialize interface hostname */
  netif->hostname = "lwip";
#endif /* LWIP_NETIF_HOSTNAME */

  netif->name[0] = IFNAME0;
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	2273      	movs	r2, #115	; 0x73
 80079a8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  netif->name[1] = IFNAME1;
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	2274      	movs	r2, #116	; 0x74
 80079b0:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	4a09      	ldr	r2, [pc, #36]	; (80079dc <ethernetif_init+0x54>)
 80079b8:	615a      	str	r2, [r3, #20]
 
#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	4a08      	ldr	r2, [pc, #32]	; (80079e0 <ethernetif_init+0x58>)
 80079be:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 80079c0:	6878      	ldr	r0, [r7, #4]
 80079c2:	f7ff fd99 	bl	80074f8 <low_level_init>

  return ERR_OK;
 80079c6:	2300      	movs	r3, #0
}
 80079c8:	4618      	mov	r0, r3
 80079ca:	3708      	adds	r7, #8
 80079cc:	46bd      	mov	sp, r7
 80079ce:	bd80      	pop	{r7, pc}
 80079d0:	08019484 	.word	0x08019484
 80079d4:	080194a0 	.word	0x080194a0
 80079d8:	080194b0 	.word	0x080194b0
 80079dc:	08015c31 	.word	0x08015c31
 80079e0:	08007699 	.word	0x08007699

080079e4 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Time
*/
u32_t sys_now(void)
{
 80079e4:	b580      	push	{r7, lr}
 80079e6:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 80079e8:	f7fa f9a6 	bl	8001d38 <HAL_GetTick>
 80079ec:	4603      	mov	r3, r0
}
 80079ee:	4618      	mov	r0, r3
 80079f0:	bd80      	pop	{r7, pc}

080079f2 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init (USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80079f2:	b580      	push	{r7, lr}
 80079f4:	b084      	sub	sp, #16
 80079f6:	af00      	add	r7, sp, #0
 80079f8:	6078      	str	r0, [r7, #4]
 80079fa:	460b      	mov	r3, r1
 80079fc:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 80079fe:	2300      	movs	r3, #0
 8007a00:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if(pdev->dev_speed == USBD_SPEED_HIGH)
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	7c1b      	ldrb	r3, [r3, #16]
 8007a06:	2b00      	cmp	r3, #0
 8007a08:	d115      	bne.n	8007a36 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8007a0a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007a0e:	2202      	movs	r2, #2
 8007a10:	2181      	movs	r1, #129	; 0x81
 8007a12:	6878      	ldr	r0, [r7, #4]
 8007a14:	f010 fbc7 	bl	80181a6 <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	2201      	movs	r2, #1
 8007a1c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8007a1e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007a22:	2202      	movs	r2, #2
 8007a24:	2101      	movs	r1, #1
 8007a26:	6878      	ldr	r0, [r7, #4]
 8007a28:	f010 fbbd 	bl	80181a6 <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	2201      	movs	r2, #1
 8007a30:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
 8007a34:	e012      	b.n	8007a5c <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8007a36:	2340      	movs	r3, #64	; 0x40
 8007a38:	2202      	movs	r2, #2
 8007a3a:	2181      	movs	r1, #129	; 0x81
 8007a3c:	6878      	ldr	r0, [r7, #4]
 8007a3e:	f010 fbb2 	bl	80181a6 <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	2201      	movs	r2, #1
 8007a46:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8007a48:	2340      	movs	r3, #64	; 0x40
 8007a4a:	2202      	movs	r2, #2
 8007a4c:	2101      	movs	r1, #1
 8007a4e:	6878      	ldr	r0, [r7, #4]
 8007a50:	f010 fba9 	bl	80181a6 <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	2201      	movs	r2, #1
 8007a58:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8007a5c:	2308      	movs	r3, #8
 8007a5e:	2203      	movs	r2, #3
 8007a60:	2182      	movs	r1, #130	; 0x82
 8007a62:	6878      	ldr	r0, [r7, #4]
 8007a64:	f010 fb9f 	bl	80181a6 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	2201      	movs	r2, #1
 8007a6c:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof (USBD_CDC_HandleTypeDef));
 8007a6e:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8007a72:	f010 fd0f 	bl	8018494 <malloc>
 8007a76:	4603      	mov	r3, r0
 8007a78:	461a      	mov	r2, r3
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290

  if(pdev->pClassData == NULL)
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8007a86:	2b00      	cmp	r3, #0
 8007a88:	d102      	bne.n	8007a90 <USBD_CDC_Init+0x9e>
  {
    ret = 1U;
 8007a8a:	2301      	movs	r3, #1
 8007a8c:	73fb      	strb	r3, [r7, #15]
 8007a8e:	e026      	b.n	8007ade <USBD_CDC_Init+0xec>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8007a96:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 8007aa2:	68bb      	ldr	r3, [r7, #8]
 8007aa4:	2200      	movs	r2, #0
 8007aa6:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 8007aaa:	68bb      	ldr	r3, [r7, #8]
 8007aac:	2200      	movs	r2, #0
 8007aae:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if(pdev->dev_speed == USBD_SPEED_HIGH)
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	7c1b      	ldrb	r3, [r3, #16]
 8007ab6:	2b00      	cmp	r3, #0
 8007ab8:	d109      	bne.n	8007ace <USBD_CDC_Init+0xdc>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8007aba:	68bb      	ldr	r3, [r7, #8]
 8007abc:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007ac0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007ac4:	2101      	movs	r1, #1
 8007ac6:	6878      	ldr	r0, [r7, #4]
 8007ac8:	f010 fc5e 	bl	8018388 <USBD_LL_PrepareReceive>
 8007acc:	e007      	b.n	8007ade <USBD_CDC_Init+0xec>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8007ace:	68bb      	ldr	r3, [r7, #8]
 8007ad0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007ad4:	2340      	movs	r3, #64	; 0x40
 8007ad6:	2101      	movs	r1, #1
 8007ad8:	6878      	ldr	r0, [r7, #4]
 8007ada:	f010 fc55 	bl	8018388 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 8007ade:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ae0:	4618      	mov	r0, r3
 8007ae2:	3710      	adds	r7, #16
 8007ae4:	46bd      	mov	sp, r7
 8007ae6:	bd80      	pop	{r7, pc}

08007ae8 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit (USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007ae8:	b580      	push	{r7, lr}
 8007aea:	b084      	sub	sp, #16
 8007aec:	af00      	add	r7, sp, #0
 8007aee:	6078      	str	r0, [r7, #4]
 8007af0:	460b      	mov	r3, r1
 8007af2:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8007af4:	2300      	movs	r3, #0
 8007af6:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8007af8:	2181      	movs	r1, #129	; 0x81
 8007afa:	6878      	ldr	r0, [r7, #4]
 8007afc:	f010 fb79 	bl	80181f2 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	2200      	movs	r2, #0
 8007b04:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8007b06:	2101      	movs	r1, #1
 8007b08:	6878      	ldr	r0, [r7, #4]
 8007b0a:	f010 fb72 	bl	80181f2 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	2200      	movs	r2, #0
 8007b12:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8007b16:	2182      	movs	r1, #130	; 0x82
 8007b18:	6878      	ldr	r0, [r7, #4]
 8007b1a:	f010 fb6a 	bl	80181f2 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	2200      	movs	r2, #0
 8007b22:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if(pdev->pClassData != NULL)
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8007b2a:	2b00      	cmp	r3, #0
 8007b2c:	d00e      	beq.n	8007b4c <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007b34:	685b      	ldr	r3, [r3, #4]
 8007b36:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8007b3e:	4618      	mov	r0, r3
 8007b40:	f010 fcb0 	bl	80184a4 <free>
    pdev->pClassData = NULL;
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	2200      	movs	r2, #0
 8007b48:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290
  }

  return ret;
 8007b4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b4e:	4618      	mov	r0, r3
 8007b50:	3710      	adds	r7, #16
 8007b52:	46bd      	mov	sp, r7
 8007b54:	bd80      	pop	{r7, pc}

08007b56 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup (USBD_HandleTypeDef *pdev,
                                USBD_SetupReqTypedef *req)
{
 8007b56:	b580      	push	{r7, lr}
 8007b58:	b086      	sub	sp, #24
 8007b5a:	af00      	add	r7, sp, #0
 8007b5c:	6078      	str	r0, [r7, #4]
 8007b5e:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8007b66:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8007b68:	2300      	movs	r3, #0
 8007b6a:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8007b6c:	2300      	movs	r3, #0
 8007b6e:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 8007b70:	2300      	movs	r3, #0
 8007b72:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007b74:	683b      	ldr	r3, [r7, #0]
 8007b76:	781b      	ldrb	r3, [r3, #0]
 8007b78:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007b7c:	2b00      	cmp	r3, #0
 8007b7e:	d039      	beq.n	8007bf4 <USBD_CDC_Setup+0x9e>
 8007b80:	2b20      	cmp	r3, #32
 8007b82:	d17c      	bne.n	8007c7e <USBD_CDC_Setup+0x128>
  {
  case USB_REQ_TYPE_CLASS :
    if (req->wLength)
 8007b84:	683b      	ldr	r3, [r7, #0]
 8007b86:	88db      	ldrh	r3, [r3, #6]
 8007b88:	2b00      	cmp	r3, #0
 8007b8a:	d029      	beq.n	8007be0 <USBD_CDC_Setup+0x8a>
    {
      if (req->bmRequest & 0x80U)
 8007b8c:	683b      	ldr	r3, [r7, #0]
 8007b8e:	781b      	ldrb	r3, [r3, #0]
 8007b90:	b25b      	sxtb	r3, r3
 8007b92:	2b00      	cmp	r3, #0
 8007b94:	da11      	bge.n	8007bba <USBD_CDC_Setup+0x64>
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007b9c:	689b      	ldr	r3, [r3, #8]
 8007b9e:	683a      	ldr	r2, [r7, #0]
 8007ba0:	7850      	ldrb	r0, [r2, #1]
                                                          (uint8_t *)(void *)hcdc->data,
 8007ba2:	6939      	ldr	r1, [r7, #16]
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8007ba4:	683a      	ldr	r2, [r7, #0]
 8007ba6:	88d2      	ldrh	r2, [r2, #6]
 8007ba8:	4798      	blx	r3
                                                          req->wLength);

          USBD_CtlSendData (pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8007baa:	6939      	ldr	r1, [r7, #16]
 8007bac:	683b      	ldr	r3, [r7, #0]
 8007bae:	88db      	ldrh	r3, [r3, #6]
 8007bb0:	461a      	mov	r2, r3
 8007bb2:	6878      	ldr	r0, [r7, #4]
 8007bb4:	f001 f99c 	bl	8008ef0 <USBD_CtlSendData>
    else
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                        (uint8_t *)(void *)req, 0U);
    }
    break;
 8007bb8:	e068      	b.n	8007c8c <USBD_CDC_Setup+0x136>
        hcdc->CmdOpCode = req->bRequest;
 8007bba:	683b      	ldr	r3, [r7, #0]
 8007bbc:	785a      	ldrb	r2, [r3, #1]
 8007bbe:	693b      	ldr	r3, [r7, #16]
 8007bc0:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
        hcdc->CmdLength = (uint8_t)req->wLength;
 8007bc4:	683b      	ldr	r3, [r7, #0]
 8007bc6:	88db      	ldrh	r3, [r3, #6]
 8007bc8:	b2da      	uxtb	r2, r3
 8007bca:	693b      	ldr	r3, [r7, #16]
 8007bcc:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
        USBD_CtlPrepareRx (pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8007bd0:	6939      	ldr	r1, [r7, #16]
 8007bd2:	683b      	ldr	r3, [r7, #0]
 8007bd4:	88db      	ldrh	r3, [r3, #6]
 8007bd6:	461a      	mov	r2, r3
 8007bd8:	6878      	ldr	r0, [r7, #4]
 8007bda:	f001 f9b7 	bl	8008f4c <USBD_CtlPrepareRx>
    break;
 8007bde:	e055      	b.n	8007c8c <USBD_CDC_Setup+0x136>
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007be6:	689b      	ldr	r3, [r3, #8]
 8007be8:	683a      	ldr	r2, [r7, #0]
 8007bea:	7850      	ldrb	r0, [r2, #1]
 8007bec:	2200      	movs	r2, #0
 8007bee:	6839      	ldr	r1, [r7, #0]
 8007bf0:	4798      	blx	r3
    break;
 8007bf2:	e04b      	b.n	8007c8c <USBD_CDC_Setup+0x136>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8007bf4:	683b      	ldr	r3, [r7, #0]
 8007bf6:	785b      	ldrb	r3, [r3, #1]
 8007bf8:	2b0a      	cmp	r3, #10
 8007bfa:	d017      	beq.n	8007c2c <USBD_CDC_Setup+0xd6>
 8007bfc:	2b0b      	cmp	r3, #11
 8007bfe:	d029      	beq.n	8007c54 <USBD_CDC_Setup+0xfe>
 8007c00:	2b00      	cmp	r3, #0
 8007c02:	d133      	bne.n	8007c6c <USBD_CDC_Setup+0x116>
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8007c0a:	2b03      	cmp	r3, #3
 8007c0c:	d107      	bne.n	8007c1e <USBD_CDC_Setup+0xc8>
      {
        USBD_CtlSendData (pdev, (uint8_t *)(void *)&status_info, 2U);
 8007c0e:	f107 030c 	add.w	r3, r7, #12
 8007c12:	2202      	movs	r2, #2
 8007c14:	4619      	mov	r1, r3
 8007c16:	6878      	ldr	r0, [r7, #4]
 8007c18:	f001 f96a 	bl	8008ef0 <USBD_CtlSendData>
      else
      {
        USBD_CtlError (pdev, req);
			  ret = USBD_FAIL;
      }
      break;
 8007c1c:	e02e      	b.n	8007c7c <USBD_CDC_Setup+0x126>
        USBD_CtlError (pdev, req);
 8007c1e:	6839      	ldr	r1, [r7, #0]
 8007c20:	6878      	ldr	r0, [r7, #4]
 8007c22:	f001 f8fa 	bl	8008e1a <USBD_CtlError>
			  ret = USBD_FAIL;
 8007c26:	2302      	movs	r3, #2
 8007c28:	75fb      	strb	r3, [r7, #23]
      break;
 8007c2a:	e027      	b.n	8007c7c <USBD_CDC_Setup+0x126>

    case USB_REQ_GET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8007c32:	2b03      	cmp	r3, #3
 8007c34:	d107      	bne.n	8007c46 <USBD_CDC_Setup+0xf0>
      {
        USBD_CtlSendData (pdev, &ifalt, 1U);
 8007c36:	f107 030f 	add.w	r3, r7, #15
 8007c3a:	2201      	movs	r2, #1
 8007c3c:	4619      	mov	r1, r3
 8007c3e:	6878      	ldr	r0, [r7, #4]
 8007c40:	f001 f956 	bl	8008ef0 <USBD_CtlSendData>
      else
      {
        USBD_CtlError (pdev, req);
			  ret = USBD_FAIL;
      }
      break;
 8007c44:	e01a      	b.n	8007c7c <USBD_CDC_Setup+0x126>
        USBD_CtlError (pdev, req);
 8007c46:	6839      	ldr	r1, [r7, #0]
 8007c48:	6878      	ldr	r0, [r7, #4]
 8007c4a:	f001 f8e6 	bl	8008e1a <USBD_CtlError>
			  ret = USBD_FAIL;
 8007c4e:	2302      	movs	r3, #2
 8007c50:	75fb      	strb	r3, [r7, #23]
      break;
 8007c52:	e013      	b.n	8007c7c <USBD_CDC_Setup+0x126>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8007c5a:	2b03      	cmp	r3, #3
 8007c5c:	d00d      	beq.n	8007c7a <USBD_CDC_Setup+0x124>
      {
        USBD_CtlError (pdev, req);
 8007c5e:	6839      	ldr	r1, [r7, #0]
 8007c60:	6878      	ldr	r0, [r7, #4]
 8007c62:	f001 f8da 	bl	8008e1a <USBD_CtlError>
			  ret = USBD_FAIL;
 8007c66:	2302      	movs	r3, #2
 8007c68:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8007c6a:	e006      	b.n	8007c7a <USBD_CDC_Setup+0x124>

    default:
      USBD_CtlError (pdev, req);
 8007c6c:	6839      	ldr	r1, [r7, #0]
 8007c6e:	6878      	ldr	r0, [r7, #4]
 8007c70:	f001 f8d3 	bl	8008e1a <USBD_CtlError>
      ret = USBD_FAIL;
 8007c74:	2302      	movs	r3, #2
 8007c76:	75fb      	strb	r3, [r7, #23]
      break;
 8007c78:	e000      	b.n	8007c7c <USBD_CDC_Setup+0x126>
      break;
 8007c7a:	bf00      	nop
    }
    break;
 8007c7c:	e006      	b.n	8007c8c <USBD_CDC_Setup+0x136>

  default:
    USBD_CtlError (pdev, req);
 8007c7e:	6839      	ldr	r1, [r7, #0]
 8007c80:	6878      	ldr	r0, [r7, #4]
 8007c82:	f001 f8ca 	bl	8008e1a <USBD_CtlError>
    ret = USBD_FAIL;
 8007c86:	2302      	movs	r3, #2
 8007c88:	75fb      	strb	r3, [r7, #23]
    break;
 8007c8a:	bf00      	nop
  }

  return ret;
 8007c8c:	7dfb      	ldrb	r3, [r7, #23]
}
 8007c8e:	4618      	mov	r0, r3
 8007c90:	3718      	adds	r7, #24
 8007c92:	46bd      	mov	sp, r7
 8007c94:	bd80      	pop	{r7, pc}

08007c96 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn (USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007c96:	b580      	push	{r7, lr}
 8007c98:	b084      	sub	sp, #16
 8007c9a:	af00      	add	r7, sp, #0
 8007c9c:	6078      	str	r0, [r7, #4]
 8007c9e:	460b      	mov	r3, r1
 8007ca0:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)pdev->pClassData;
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8007ca8:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8007cb0:	60bb      	str	r3, [r7, #8]

  if(pdev->pClassData != NULL)
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8007cb8:	2b00      	cmp	r3, #0
 8007cba:	d03a      	beq.n	8007d32 <USBD_CDC_DataIn+0x9c>
  {
    if((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8007cbc:	78fa      	ldrb	r2, [r7, #3]
 8007cbe:	6879      	ldr	r1, [r7, #4]
 8007cc0:	4613      	mov	r3, r2
 8007cc2:	009b      	lsls	r3, r3, #2
 8007cc4:	4413      	add	r3, r2
 8007cc6:	009b      	lsls	r3, r3, #2
 8007cc8:	440b      	add	r3, r1
 8007cca:	331c      	adds	r3, #28
 8007ccc:	681b      	ldr	r3, [r3, #0]
 8007cce:	2b00      	cmp	r3, #0
 8007cd0:	d029      	beq.n	8007d26 <USBD_CDC_DataIn+0x90>
 8007cd2:	78fa      	ldrb	r2, [r7, #3]
 8007cd4:	6879      	ldr	r1, [r7, #4]
 8007cd6:	4613      	mov	r3, r2
 8007cd8:	009b      	lsls	r3, r3, #2
 8007cda:	4413      	add	r3, r2
 8007cdc:	009b      	lsls	r3, r3, #2
 8007cde:	440b      	add	r3, r1
 8007ce0:	331c      	adds	r3, #28
 8007ce2:	681a      	ldr	r2, [r3, #0]
 8007ce4:	78f9      	ldrb	r1, [r7, #3]
 8007ce6:	68b8      	ldr	r0, [r7, #8]
 8007ce8:	460b      	mov	r3, r1
 8007cea:	00db      	lsls	r3, r3, #3
 8007cec:	1a5b      	subs	r3, r3, r1
 8007cee:	009b      	lsls	r3, r3, #2
 8007cf0:	4403      	add	r3, r0
 8007cf2:	3344      	adds	r3, #68	; 0x44
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	fbb2 f1f3 	udiv	r1, r2, r3
 8007cfa:	fb03 f301 	mul.w	r3, r3, r1
 8007cfe:	1ad3      	subs	r3, r2, r3
 8007d00:	2b00      	cmp	r3, #0
 8007d02:	d110      	bne.n	8007d26 <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 8007d04:	78fa      	ldrb	r2, [r7, #3]
 8007d06:	6879      	ldr	r1, [r7, #4]
 8007d08:	4613      	mov	r3, r2
 8007d0a:	009b      	lsls	r3, r3, #2
 8007d0c:	4413      	add	r3, r2
 8007d0e:	009b      	lsls	r3, r3, #2
 8007d10:	440b      	add	r3, r1
 8007d12:	331c      	adds	r3, #28
 8007d14:	2200      	movs	r2, #0
 8007d16:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit (pdev, epnum, NULL, 0U);
 8007d18:	78f9      	ldrb	r1, [r7, #3]
 8007d1a:	2300      	movs	r3, #0
 8007d1c:	2200      	movs	r2, #0
 8007d1e:	6878      	ldr	r0, [r7, #4]
 8007d20:	f010 fb0f 	bl	8018342 <USBD_LL_Transmit>
 8007d24:	e003      	b.n	8007d2e <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 8007d26:	68fb      	ldr	r3, [r7, #12]
 8007d28:	2200      	movs	r2, #0
 8007d2a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 8007d2e:	2300      	movs	r3, #0
 8007d30:	e000      	b.n	8007d34 <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 8007d32:	2302      	movs	r3, #2
  }
}
 8007d34:	4618      	mov	r0, r3
 8007d36:	3710      	adds	r7, #16
 8007d38:	46bd      	mov	sp, r7
 8007d3a:	bd80      	pop	{r7, pc}

08007d3c <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut (USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007d3c:	b580      	push	{r7, lr}
 8007d3e:	b084      	sub	sp, #16
 8007d40:	af00      	add	r7, sp, #0
 8007d42:	6078      	str	r0, [r7, #4]
 8007d44:	460b      	mov	r3, r1
 8007d46:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8007d4e:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize (pdev, epnum);
 8007d50:	78fb      	ldrb	r3, [r7, #3]
 8007d52:	4619      	mov	r1, r3
 8007d54:	6878      	ldr	r0, [r7, #4]
 8007d56:	f010 fb3a 	bl	80183ce <USBD_LL_GetRxDataSize>
 8007d5a:	4602      	mov	r2, r0
 8007d5c:	68fb      	ldr	r3, [r7, #12]
 8007d5e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if(pdev->pClassData != NULL)
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8007d68:	2b00      	cmp	r3, #0
 8007d6a:	d00d      	beq.n	8007d88 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007d72:	68db      	ldr	r3, [r3, #12]
 8007d74:	68fa      	ldr	r2, [r7, #12]
 8007d76:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8007d7a:	68fa      	ldr	r2, [r7, #12]
 8007d7c:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8007d80:	4611      	mov	r1, r2
 8007d82:	4798      	blx	r3

    return USBD_OK;
 8007d84:	2300      	movs	r3, #0
 8007d86:	e000      	b.n	8007d8a <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 8007d88:	2302      	movs	r3, #2
  }
}
 8007d8a:	4618      	mov	r0, r3
 8007d8c:	3710      	adds	r7, #16
 8007d8e:	46bd      	mov	sp, r7
 8007d90:	bd80      	pop	{r7, pc}

08007d92 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady (USBD_HandleTypeDef *pdev)
{
 8007d92:	b580      	push	{r7, lr}
 8007d94:	b084      	sub	sp, #16
 8007d96:	af00      	add	r7, sp, #0
 8007d98:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8007da0:	60fb      	str	r3, [r7, #12]

  if((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007da8:	2b00      	cmp	r3, #0
 8007daa:	d015      	beq.n	8007dd8 <USBD_CDC_EP0_RxReady+0x46>
 8007dac:	68fb      	ldr	r3, [r7, #12]
 8007dae:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8007db2:	2bff      	cmp	r3, #255	; 0xff
 8007db4:	d010      	beq.n	8007dd8 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007dbc:	689b      	ldr	r3, [r3, #8]
 8007dbe:	68fa      	ldr	r2, [r7, #12]
 8007dc0:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 8007dc4:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8007dc6:	68fa      	ldr	r2, [r7, #12]
 8007dc8:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8007dcc:	b292      	uxth	r2, r2
 8007dce:	4798      	blx	r3
      hcdc->CmdOpCode = 0xFFU;
 8007dd0:	68fb      	ldr	r3, [r7, #12]
 8007dd2:	22ff      	movs	r2, #255	; 0xff
 8007dd4:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 8007dd8:	2300      	movs	r3, #0
}
 8007dda:	4618      	mov	r0, r3
 8007ddc:	3710      	adds	r7, #16
 8007dde:	46bd      	mov	sp, r7
 8007de0:	bd80      	pop	{r7, pc}
	...

08007de4 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc (uint16_t *length)
{
 8007de4:	b480      	push	{r7}
 8007de6:	b083      	sub	sp, #12
 8007de8:	af00      	add	r7, sp, #0
 8007dea:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_CfgFSDesc);
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	2243      	movs	r2, #67	; 0x43
 8007df0:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 8007df2:	4b03      	ldr	r3, [pc, #12]	; (8007e00 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8007df4:	4618      	mov	r0, r3
 8007df6:	370c      	adds	r7, #12
 8007df8:	46bd      	mov	sp, r7
 8007dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dfe:	4770      	bx	lr
 8007e00:	20000090 	.word	0x20000090

08007e04 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc (uint16_t *length)
{
 8007e04:	b480      	push	{r7}
 8007e06:	b083      	sub	sp, #12
 8007e08:	af00      	add	r7, sp, #0
 8007e0a:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_CfgHSDesc);
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	2243      	movs	r2, #67	; 0x43
 8007e10:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 8007e12:	4b03      	ldr	r3, [pc, #12]	; (8007e20 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8007e14:	4618      	mov	r0, r3
 8007e16:	370c      	adds	r7, #12
 8007e18:	46bd      	mov	sp, r7
 8007e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e1e:	4770      	bx	lr
 8007e20:	2000004c 	.word	0x2000004c

08007e24 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc (uint16_t *length)
{
 8007e24:	b480      	push	{r7}
 8007e26:	b083      	sub	sp, #12
 8007e28:	af00      	add	r7, sp, #0
 8007e2a:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_OtherSpeedCfgDesc);
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	2243      	movs	r2, #67	; 0x43
 8007e30:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 8007e32:	4b03      	ldr	r3, [pc, #12]	; (8007e40 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8007e34:	4618      	mov	r0, r3
 8007e36:	370c      	adds	r7, #12
 8007e38:	46bd      	mov	sp, r7
 8007e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e3e:	4770      	bx	lr
 8007e40:	200000d4 	.word	0x200000d4

08007e44 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor (uint16_t *length)
{
 8007e44:	b480      	push	{r7}
 8007e46:	b083      	sub	sp, #12
 8007e48:	af00      	add	r7, sp, #0
 8007e4a:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_DeviceQualifierDesc);
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	220a      	movs	r2, #10
 8007e50:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 8007e52:	4b03      	ldr	r3, [pc, #12]	; (8007e60 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8007e54:	4618      	mov	r0, r3
 8007e56:	370c      	adds	r7, #12
 8007e58:	46bd      	mov	sp, r7
 8007e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e5e:	4770      	bx	lr
 8007e60:	20000008 	.word	0x20000008

08007e64 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface  (USBD_HandleTypeDef   *pdev,
                                      USBD_CDC_ItfTypeDef *fops)
{
 8007e64:	b480      	push	{r7}
 8007e66:	b085      	sub	sp, #20
 8007e68:	af00      	add	r7, sp, #0
 8007e6a:	6078      	str	r0, [r7, #4]
 8007e6c:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 8007e6e:	2302      	movs	r3, #2
 8007e70:	73fb      	strb	r3, [r7, #15]

  if(fops != NULL)
 8007e72:	683b      	ldr	r3, [r7, #0]
 8007e74:	2b00      	cmp	r3, #0
 8007e76:	d005      	beq.n	8007e84 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData= fops;
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	683a      	ldr	r2, [r7, #0]
 8007e7c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
    ret = USBD_OK;
 8007e80:	2300      	movs	r3, #0
 8007e82:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8007e84:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e86:	4618      	mov	r0, r3
 8007e88:	3714      	adds	r7, #20
 8007e8a:	46bd      	mov	sp, r7
 8007e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e90:	4770      	bx	lr

08007e92 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer  (USBD_HandleTypeDef   *pdev,
                                uint8_t  *pbuff,
                                uint16_t length)
{
 8007e92:	b480      	push	{r7}
 8007e94:	b087      	sub	sp, #28
 8007e96:	af00      	add	r7, sp, #0
 8007e98:	60f8      	str	r0, [r7, #12]
 8007e9a:	60b9      	str	r1, [r7, #8]
 8007e9c:	4613      	mov	r3, r2
 8007e9e:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8007ea0:	68fb      	ldr	r3, [r7, #12]
 8007ea2:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8007ea6:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8007ea8:	697b      	ldr	r3, [r7, #20]
 8007eaa:	68ba      	ldr	r2, [r7, #8]
 8007eac:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8007eb0:	88fa      	ldrh	r2, [r7, #6]
 8007eb2:	697b      	ldr	r3, [r7, #20]
 8007eb4:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 8007eb8:	2300      	movs	r3, #0
}
 8007eba:	4618      	mov	r0, r3
 8007ebc:	371c      	adds	r7, #28
 8007ebe:	46bd      	mov	sp, r7
 8007ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ec4:	4770      	bx	lr

08007ec6 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer  (USBD_HandleTypeDef   *pdev,
                                   uint8_t  *pbuff)
{
 8007ec6:	b480      	push	{r7}
 8007ec8:	b085      	sub	sp, #20
 8007eca:	af00      	add	r7, sp, #0
 8007ecc:	6078      	str	r0, [r7, #4]
 8007ece:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8007ed6:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8007ed8:	68fb      	ldr	r3, [r7, #12]
 8007eda:	683a      	ldr	r2, [r7, #0]
 8007edc:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 8007ee0:	2300      	movs	r3, #0
}
 8007ee2:	4618      	mov	r0, r3
 8007ee4:	3714      	adds	r7, #20
 8007ee6:	46bd      	mov	sp, r7
 8007ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eec:	4770      	bx	lr

08007eee <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8007eee:	b580      	push	{r7, lr}
 8007ef0:	b084      	sub	sp, #16
 8007ef2:	af00      	add	r7, sp, #0
 8007ef4:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8007efc:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if(pdev->pClassData != NULL)
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8007f04:	2b00      	cmp	r3, #0
 8007f06:	d017      	beq.n	8007f38 <USBD_CDC_ReceivePacket+0x4a>
  {
    if(pdev->dev_speed == USBD_SPEED_HIGH  )
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	7c1b      	ldrb	r3, [r3, #16]
 8007f0c:	2b00      	cmp	r3, #0
 8007f0e:	d109      	bne.n	8007f24 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8007f10:	68fb      	ldr	r3, [r7, #12]
 8007f12:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007f16:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007f1a:	2101      	movs	r1, #1
 8007f1c:	6878      	ldr	r0, [r7, #4]
 8007f1e:	f010 fa33 	bl	8018388 <USBD_LL_PrepareReceive>
 8007f22:	e007      	b.n	8007f34 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8007f24:	68fb      	ldr	r3, [r7, #12]
 8007f26:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007f2a:	2340      	movs	r3, #64	; 0x40
 8007f2c:	2101      	movs	r1, #1
 8007f2e:	6878      	ldr	r0, [r7, #4]
 8007f30:	f010 fa2a 	bl	8018388 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8007f34:	2300      	movs	r3, #0
 8007f36:	e000      	b.n	8007f3a <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 8007f38:	2302      	movs	r3, #2
  }
}
 8007f3a:	4618      	mov	r0, r3
 8007f3c:	3710      	adds	r7, #16
 8007f3e:	46bd      	mov	sp, r7
 8007f40:	bd80      	pop	{r7, pc}

08007f42 <USBD_Init>:
* @param  pdesc: Descriptor structure address
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev, USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8007f42:	b580      	push	{r7, lr}
 8007f44:	b084      	sub	sp, #16
 8007f46:	af00      	add	r7, sp, #0
 8007f48:	60f8      	str	r0, [r7, #12]
 8007f4a:	60b9      	str	r1, [r7, #8]
 8007f4c:	4613      	mov	r3, r2
 8007f4e:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if(pdev == NULL)
 8007f50:	68fb      	ldr	r3, [r7, #12]
 8007f52:	2b00      	cmp	r3, #0
 8007f54:	d101      	bne.n	8007f5a <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8007f56:	2302      	movs	r3, #2
 8007f58:	e01a      	b.n	8007f90 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if(pdev->pClass != NULL)
 8007f5a:	68fb      	ldr	r3, [r7, #12]
 8007f5c:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8007f60:	2b00      	cmp	r3, #0
 8007f62:	d003      	beq.n	8007f6c <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8007f64:	68fb      	ldr	r3, [r7, #12]
 8007f66:	2200      	movs	r2, #0
 8007f68:	f8c3 228c 	str.w	r2, [r3, #652]	; 0x28c
  }

  /* Assign USBD Descriptors */
  if(pdesc != NULL)
 8007f6c:	68bb      	ldr	r3, [r7, #8]
 8007f6e:	2b00      	cmp	r3, #0
 8007f70:	d003      	beq.n	8007f7a <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8007f72:	68fb      	ldr	r3, [r7, #12]
 8007f74:	68ba      	ldr	r2, [r7, #8]
 8007f76:	f8c3 2288 	str.w	r2, [r3, #648]	; 0x288
  }

  /* Set Device initial State */
  pdev->dev_state  = USBD_STATE_DEFAULT;
 8007f7a:	68fb      	ldr	r3, [r7, #12]
 8007f7c:	2201      	movs	r2, #1
 8007f7e:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  pdev->id = id;
 8007f82:	68fb      	ldr	r3, [r7, #12]
 8007f84:	79fa      	ldrb	r2, [r7, #7]
 8007f86:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8007f88:	68f8      	ldr	r0, [r7, #12]
 8007f8a:	f010 f8a5 	bl	80180d8 <USBD_LL_Init>

  return USBD_OK;
 8007f8e:	2300      	movs	r3, #0
}
 8007f90:	4618      	mov	r0, r3
 8007f92:	3710      	adds	r7, #16
 8007f94:	46bd      	mov	sp, r7
 8007f96:	bd80      	pop	{r7, pc}

08007f98 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8007f98:	b480      	push	{r7}
 8007f9a:	b085      	sub	sp, #20
 8007f9c:	af00      	add	r7, sp, #0
 8007f9e:	6078      	str	r0, [r7, #4]
 8007fa0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef   status = USBD_OK;
 8007fa2:	2300      	movs	r3, #0
 8007fa4:	73fb      	strb	r3, [r7, #15]
  if(pclass != 0)
 8007fa6:	683b      	ldr	r3, [r7, #0]
 8007fa8:	2b00      	cmp	r3, #0
 8007faa:	d006      	beq.n	8007fba <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	683a      	ldr	r2, [r7, #0]
 8007fb0:	f8c3 228c 	str.w	r2, [r3, #652]	; 0x28c
    status = USBD_OK;
 8007fb4:	2300      	movs	r3, #0
 8007fb6:	73fb      	strb	r3, [r7, #15]
 8007fb8:	e001      	b.n	8007fbe <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8007fba:	2302      	movs	r3, #2
 8007fbc:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007fbe:	7bfb      	ldrb	r3, [r7, #15]
}
 8007fc0:	4618      	mov	r0, r3
 8007fc2:	3714      	adds	r7, #20
 8007fc4:	46bd      	mov	sp, r7
 8007fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fca:	4770      	bx	lr

08007fcc <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start  (USBD_HandleTypeDef *pdev)
{
 8007fcc:	b580      	push	{r7, lr}
 8007fce:	b082      	sub	sp, #8
 8007fd0:	af00      	add	r7, sp, #0
 8007fd2:	6078      	str	r0, [r7, #4]

  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8007fd4:	6878      	ldr	r0, [r7, #4]
 8007fd6:	f010 f8cb 	bl	8018170 <USBD_LL_Start>

  return USBD_OK;
 8007fda:	2300      	movs	r3, #0
}
 8007fdc:	4618      	mov	r0, r3
 8007fde:	3708      	adds	r7, #8
 8007fe0:	46bd      	mov	sp, r7
 8007fe2:	bd80      	pop	{r7, pc}

08007fe4 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode (USBD_HandleTypeDef  *pdev)
{
 8007fe4:	b480      	push	{r7}
 8007fe6:	b083      	sub	sp, #12
 8007fe8:	af00      	add	r7, sp, #0
 8007fea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007fec:	2300      	movs	r3, #0
}
 8007fee:	4618      	mov	r0, r3
 8007ff0:	370c      	adds	r7, #12
 8007ff2:	46bd      	mov	sp, r7
 8007ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ff8:	4770      	bx	lr

08007ffa <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8007ffa:	b580      	push	{r7, lr}
 8007ffc:	b084      	sub	sp, #16
 8007ffe:	af00      	add	r7, sp, #0
 8008000:	6078      	str	r0, [r7, #4]
 8008002:	460b      	mov	r3, r1
 8008004:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef   ret = USBD_FAIL;
 8008006:	2302      	movs	r3, #2
 8008008:	73fb      	strb	r3, [r7, #15]

  if(pdev->pClass != NULL)
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8008010:	2b00      	cmp	r3, #0
 8008012:	d00c      	beq.n	800802e <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if(pdev->pClass->Init(pdev, cfgidx) == 0U)
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800801a:	681b      	ldr	r3, [r3, #0]
 800801c:	78fa      	ldrb	r2, [r7, #3]
 800801e:	4611      	mov	r1, r2
 8008020:	6878      	ldr	r0, [r7, #4]
 8008022:	4798      	blx	r3
 8008024:	4603      	mov	r3, r0
 8008026:	2b00      	cmp	r3, #0
 8008028:	d101      	bne.n	800802e <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 800802a:	2300      	movs	r3, #0
 800802c:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 800802e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008030:	4618      	mov	r0, r3
 8008032:	3710      	adds	r7, #16
 8008034:	46bd      	mov	sp, r7
 8008036:	bd80      	pop	{r7, pc}

08008038 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8008038:	b580      	push	{r7, lr}
 800803a:	b082      	sub	sp, #8
 800803c:	af00      	add	r7, sp, #0
 800803e:	6078      	str	r0, [r7, #4]
 8008040:	460b      	mov	r3, r1
 8008042:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800804a:	685b      	ldr	r3, [r3, #4]
 800804c:	78fa      	ldrb	r2, [r7, #3]
 800804e:	4611      	mov	r1, r2
 8008050:	6878      	ldr	r0, [r7, #4]
 8008052:	4798      	blx	r3
  return USBD_OK;
 8008054:	2300      	movs	r3, #0
}
 8008056:	4618      	mov	r0, r3
 8008058:	3708      	adds	r7, #8
 800805a:	46bd      	mov	sp, r7
 800805c:	bd80      	pop	{r7, pc}

0800805e <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800805e:	b580      	push	{r7, lr}
 8008060:	b082      	sub	sp, #8
 8008062:	af00      	add	r7, sp, #0
 8008064:	6078      	str	r0, [r7, #4]
 8008066:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800806e:	6839      	ldr	r1, [r7, #0]
 8008070:	4618      	mov	r0, r3
 8008072:	f000 fe95 	bl	8008da0 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	2201      	movs	r2, #1
 800807a:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

  pdev->ep0_data_len = pdev->request.wLength;
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	f8b3 3286 	ldrh.w	r3, [r3, #646]	; 0x286
 8008084:	461a      	mov	r2, r3
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

  switch (pdev->request.bmRequest & 0x1FU)
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	f893 3280 	ldrb.w	r3, [r3, #640]	; 0x280
 8008092:	f003 031f 	and.w	r3, r3, #31
 8008096:	2b01      	cmp	r3, #1
 8008098:	d00c      	beq.n	80080b4 <USBD_LL_SetupStage+0x56>
 800809a:	2b01      	cmp	r3, #1
 800809c:	d302      	bcc.n	80080a4 <USBD_LL_SetupStage+0x46>
 800809e:	2b02      	cmp	r3, #2
 80080a0:	d010      	beq.n	80080c4 <USBD_LL_SetupStage+0x66>
 80080a2:	e017      	b.n	80080d4 <USBD_LL_SetupStage+0x76>
  {
  case USB_REQ_RECIPIENT_DEVICE:
    USBD_StdDevReq (pdev, &pdev->request);
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80080aa:	4619      	mov	r1, r3
 80080ac:	6878      	ldr	r0, [r7, #4]
 80080ae:	f000 fa05 	bl	80084bc <USBD_StdDevReq>
    break;
 80080b2:	e01a      	b.n	80080ea <USBD_LL_SetupStage+0x8c>

  case USB_REQ_RECIPIENT_INTERFACE:
    USBD_StdItfReq(pdev, &pdev->request);
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80080ba:	4619      	mov	r1, r3
 80080bc:	6878      	ldr	r0, [r7, #4]
 80080be:	f000 fa67 	bl	8008590 <USBD_StdItfReq>
    break;
 80080c2:	e012      	b.n	80080ea <USBD_LL_SetupStage+0x8c>

  case USB_REQ_RECIPIENT_ENDPOINT:
    USBD_StdEPReq(pdev, &pdev->request);
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80080ca:	4619      	mov	r1, r3
 80080cc:	6878      	ldr	r0, [r7, #4]
 80080ce:	f000 faa5 	bl	800861c <USBD_StdEPReq>
    break;
 80080d2:	e00a      	b.n	80080ea <USBD_LL_SetupStage+0x8c>

  default:
    USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	f893 3280 	ldrb.w	r3, [r3, #640]	; 0x280
 80080da:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80080de:	b2db      	uxtb	r3, r3
 80080e0:	4619      	mov	r1, r3
 80080e2:	6878      	ldr	r0, [r7, #4]
 80080e4:	f010 f8a4 	bl	8018230 <USBD_LL_StallEP>
    break;
 80080e8:	bf00      	nop
  }

  return USBD_OK;
 80080ea:	2300      	movs	r3, #0
}
 80080ec:	4618      	mov	r0, r3
 80080ee:	3708      	adds	r7, #8
 80080f0:	46bd      	mov	sp, r7
 80080f2:	bd80      	pop	{r7, pc}

080080f4 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80080f4:	b580      	push	{r7, lr}
 80080f6:	b086      	sub	sp, #24
 80080f8:	af00      	add	r7, sp, #0
 80080fa:	60f8      	str	r0, [r7, #12]
 80080fc:	460b      	mov	r3, r1
 80080fe:	607a      	str	r2, [r7, #4]
 8008100:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef    *pep;

  if(epnum == 0U)
 8008102:	7afb      	ldrb	r3, [r7, #11]
 8008104:	2b00      	cmp	r3, #0
 8008106:	d14b      	bne.n	80081a0 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8008108:	68fb      	ldr	r3, [r7, #12]
 800810a:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 800810e:	617b      	str	r3, [r7, #20]

    if ( pdev->ep0_state == USBD_EP0_DATA_OUT)
 8008110:	68fb      	ldr	r3, [r7, #12]
 8008112:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 8008116:	2b03      	cmp	r3, #3
 8008118:	d134      	bne.n	8008184 <USBD_LL_DataOutStage+0x90>
    {
      if(pep->rem_length > pep->maxpacket)
 800811a:	697b      	ldr	r3, [r7, #20]
 800811c:	68da      	ldr	r2, [r3, #12]
 800811e:	697b      	ldr	r3, [r7, #20]
 8008120:	691b      	ldr	r3, [r3, #16]
 8008122:	429a      	cmp	r2, r3
 8008124:	d919      	bls.n	800815a <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -=  pep->maxpacket;
 8008126:	697b      	ldr	r3, [r7, #20]
 8008128:	68da      	ldr	r2, [r3, #12]
 800812a:	697b      	ldr	r3, [r7, #20]
 800812c:	691b      	ldr	r3, [r3, #16]
 800812e:	1ad2      	subs	r2, r2, r3
 8008130:	697b      	ldr	r3, [r7, #20]
 8008132:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx (pdev,
                            pdata,
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8008134:	697b      	ldr	r3, [r7, #20]
 8008136:	68da      	ldr	r2, [r3, #12]
 8008138:	697b      	ldr	r3, [r7, #20]
 800813a:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx (pdev,
 800813c:	429a      	cmp	r2, r3
 800813e:	d203      	bcs.n	8008148 <USBD_LL_DataOutStage+0x54>
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8008140:	697b      	ldr	r3, [r7, #20]
 8008142:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx (pdev,
 8008144:	b29b      	uxth	r3, r3
 8008146:	e002      	b.n	800814e <USBD_LL_DataOutStage+0x5a>
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8008148:	697b      	ldr	r3, [r7, #20]
 800814a:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx (pdev,
 800814c:	b29b      	uxth	r3, r3
 800814e:	461a      	mov	r2, r3
 8008150:	6879      	ldr	r1, [r7, #4]
 8008152:	68f8      	ldr	r0, [r7, #12]
 8008154:	f000 ff18 	bl	8008f88 <USBD_CtlContinueRx>
 8008158:	e038      	b.n	80081cc <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if((pdev->pClass->EP0_RxReady != NULL)&&
 800815a:	68fb      	ldr	r3, [r7, #12]
 800815c:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8008160:	691b      	ldr	r3, [r3, #16]
 8008162:	2b00      	cmp	r3, #0
 8008164:	d00a      	beq.n	800817c <USBD_LL_DataOutStage+0x88>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008166:	68fb      	ldr	r3, [r7, #12]
 8008168:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
        if((pdev->pClass->EP0_RxReady != NULL)&&
 800816c:	2b03      	cmp	r3, #3
 800816e:	d105      	bne.n	800817c <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8008170:	68fb      	ldr	r3, [r7, #12]
 8008172:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8008176:	691b      	ldr	r3, [r3, #16]
 8008178:	68f8      	ldr	r0, [r7, #12]
 800817a:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 800817c:	68f8      	ldr	r0, [r7, #12]
 800817e:	f000 ff15 	bl	8008fac <USBD_CtlSendStatus>
 8008182:	e023      	b.n	80081cc <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8008184:	68fb      	ldr	r3, [r7, #12]
 8008186:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 800818a:	2b05      	cmp	r3, #5
 800818c:	d11e      	bne.n	80081cc <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 800818e:	68fb      	ldr	r3, [r7, #12]
 8008190:	2200      	movs	r2, #0
 8008192:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
        USBD_LL_StallEP(pdev, 0U);
 8008196:	2100      	movs	r1, #0
 8008198:	68f8      	ldr	r0, [r7, #12]
 800819a:	f010 f849 	bl	8018230 <USBD_LL_StallEP>
 800819e:	e015      	b.n	80081cc <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if((pdev->pClass->DataOut != NULL) &&
 80081a0:	68fb      	ldr	r3, [r7, #12]
 80081a2:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80081a6:	699b      	ldr	r3, [r3, #24]
 80081a8:	2b00      	cmp	r3, #0
 80081aa:	d00d      	beq.n	80081c8 <USBD_LL_DataOutStage+0xd4>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
 80081ac:	68fb      	ldr	r3, [r7, #12]
 80081ae:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
  else if((pdev->pClass->DataOut != NULL) &&
 80081b2:	2b03      	cmp	r3, #3
 80081b4:	d108      	bne.n	80081c8 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 80081b6:	68fb      	ldr	r3, [r7, #12]
 80081b8:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80081bc:	699b      	ldr	r3, [r3, #24]
 80081be:	7afa      	ldrb	r2, [r7, #11]
 80081c0:	4611      	mov	r1, r2
 80081c2:	68f8      	ldr	r0, [r7, #12]
 80081c4:	4798      	blx	r3
 80081c6:	e001      	b.n	80081cc <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80081c8:	2302      	movs	r3, #2
 80081ca:	e000      	b.n	80081ce <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 80081cc:	2300      	movs	r3, #0
}
 80081ce:	4618      	mov	r0, r3
 80081d0:	3718      	adds	r7, #24
 80081d2:	46bd      	mov	sp, r7
 80081d4:	bd80      	pop	{r7, pc}

080081d6 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev, uint8_t epnum,
                                       uint8_t *pdata)
{
 80081d6:	b580      	push	{r7, lr}
 80081d8:	b086      	sub	sp, #24
 80081da:	af00      	add	r7, sp, #0
 80081dc:	60f8      	str	r0, [r7, #12]
 80081de:	460b      	mov	r3, r1
 80081e0:	607a      	str	r2, [r7, #4]
 80081e2:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if(epnum == 0U)
 80081e4:	7afb      	ldrb	r3, [r7, #11]
 80081e6:	2b00      	cmp	r3, #0
 80081e8:	d17f      	bne.n	80082ea <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 80081ea:	68fb      	ldr	r3, [r7, #12]
 80081ec:	3314      	adds	r3, #20
 80081ee:	617b      	str	r3, [r7, #20]

    if ( pdev->ep0_state == USBD_EP0_DATA_IN)
 80081f0:	68fb      	ldr	r3, [r7, #12]
 80081f2:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 80081f6:	2b02      	cmp	r3, #2
 80081f8:	d15c      	bne.n	80082b4 <USBD_LL_DataInStage+0xde>
    {
      if(pep->rem_length > pep->maxpacket)
 80081fa:	697b      	ldr	r3, [r7, #20]
 80081fc:	68da      	ldr	r2, [r3, #12]
 80081fe:	697b      	ldr	r3, [r7, #20]
 8008200:	691b      	ldr	r3, [r3, #16]
 8008202:	429a      	cmp	r2, r3
 8008204:	d915      	bls.n	8008232 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8008206:	697b      	ldr	r3, [r7, #20]
 8008208:	68da      	ldr	r2, [r3, #12]
 800820a:	697b      	ldr	r3, [r7, #20]
 800820c:	691b      	ldr	r3, [r3, #16]
 800820e:	1ad2      	subs	r2, r2, r3
 8008210:	697b      	ldr	r3, [r7, #20]
 8008212:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData (pdev, pdata, (uint16_t)pep->rem_length);
 8008214:	697b      	ldr	r3, [r7, #20]
 8008216:	68db      	ldr	r3, [r3, #12]
 8008218:	b29b      	uxth	r3, r3
 800821a:	461a      	mov	r2, r3
 800821c:	6879      	ldr	r1, [r7, #4]
 800821e:	68f8      	ldr	r0, [r7, #12]
 8008220:	f000 fe82 	bl	8008f28 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 8008224:	2300      	movs	r3, #0
 8008226:	2200      	movs	r2, #0
 8008228:	2100      	movs	r1, #0
 800822a:	68f8      	ldr	r0, [r7, #12]
 800822c:	f010 f8ac 	bl	8018388 <USBD_LL_PrepareReceive>
 8008230:	e04e      	b.n	80082d0 <USBD_LL_DataInStage+0xfa>
      }
      else
      { /* last packet is MPS multiple, so send ZLP packet */
        if((pep->total_length % pep->maxpacket == 0U) &&
 8008232:	697b      	ldr	r3, [r7, #20]
 8008234:	689b      	ldr	r3, [r3, #8]
 8008236:	697a      	ldr	r2, [r7, #20]
 8008238:	6912      	ldr	r2, [r2, #16]
 800823a:	fbb3 f1f2 	udiv	r1, r3, r2
 800823e:	fb02 f201 	mul.w	r2, r2, r1
 8008242:	1a9b      	subs	r3, r3, r2
 8008244:	2b00      	cmp	r3, #0
 8008246:	d11c      	bne.n	8008282 <USBD_LL_DataInStage+0xac>
           (pep->total_length >= pep->maxpacket) &&
 8008248:	697b      	ldr	r3, [r7, #20]
 800824a:	689a      	ldr	r2, [r3, #8]
 800824c:	697b      	ldr	r3, [r7, #20]
 800824e:	691b      	ldr	r3, [r3, #16]
        if((pep->total_length % pep->maxpacket == 0U) &&
 8008250:	429a      	cmp	r2, r3
 8008252:	d316      	bcc.n	8008282 <USBD_LL_DataInStage+0xac>
           (pep->total_length < pdev->ep0_data_len))
 8008254:	697b      	ldr	r3, [r7, #20]
 8008256:	689a      	ldr	r2, [r3, #8]
 8008258:	68fb      	ldr	r3, [r7, #12]
 800825a:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
           (pep->total_length >= pep->maxpacket) &&
 800825e:	429a      	cmp	r2, r3
 8008260:	d20f      	bcs.n	8008282 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8008262:	2200      	movs	r2, #0
 8008264:	2100      	movs	r1, #0
 8008266:	68f8      	ldr	r0, [r7, #12]
 8008268:	f000 fe5e 	bl	8008f28 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800826c:	68fb      	ldr	r3, [r7, #12]
 800826e:	2200      	movs	r2, #0
 8008270:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 8008274:	2300      	movs	r3, #0
 8008276:	2200      	movs	r2, #0
 8008278:	2100      	movs	r1, #0
 800827a:	68f8      	ldr	r0, [r7, #12]
 800827c:	f010 f884 	bl	8018388 <USBD_LL_PrepareReceive>
 8008280:	e026      	b.n	80082d0 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if((pdev->pClass->EP0_TxSent != NULL)&&
 8008282:	68fb      	ldr	r3, [r7, #12]
 8008284:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8008288:	68db      	ldr	r3, [r3, #12]
 800828a:	2b00      	cmp	r3, #0
 800828c:	d00a      	beq.n	80082a4 <USBD_LL_DataInStage+0xce>
             (pdev->dev_state == USBD_STATE_CONFIGURED))
 800828e:	68fb      	ldr	r3, [r7, #12]
 8008290:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
          if((pdev->pClass->EP0_TxSent != NULL)&&
 8008294:	2b03      	cmp	r3, #3
 8008296:	d105      	bne.n	80082a4 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8008298:	68fb      	ldr	r3, [r7, #12]
 800829a:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800829e:	68db      	ldr	r3, [r3, #12]
 80082a0:	68f8      	ldr	r0, [r7, #12]
 80082a2:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 80082a4:	2180      	movs	r1, #128	; 0x80
 80082a6:	68f8      	ldr	r0, [r7, #12]
 80082a8:	f00f ffc2 	bl	8018230 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 80082ac:	68f8      	ldr	r0, [r7, #12]
 80082ae:	f000 fe90 	bl	8008fd2 <USBD_CtlReceiveStatus>
 80082b2:	e00d      	b.n	80082d0 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80082b4:	68fb      	ldr	r3, [r7, #12]
 80082b6:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 80082ba:	2b04      	cmp	r3, #4
 80082bc:	d004      	beq.n	80082c8 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 80082be:	68fb      	ldr	r3, [r7, #12]
 80082c0:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80082c4:	2b00      	cmp	r3, #0
 80082c6:	d103      	bne.n	80082d0 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 80082c8:	2180      	movs	r1, #128	; 0x80
 80082ca:	68f8      	ldr	r0, [r7, #12]
 80082cc:	f00f ffb0 	bl	8018230 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 80082d0:	68fb      	ldr	r3, [r7, #12]
 80082d2:	f893 3278 	ldrb.w	r3, [r3, #632]	; 0x278
 80082d6:	2b01      	cmp	r3, #1
 80082d8:	d11d      	bne.n	8008316 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 80082da:	68f8      	ldr	r0, [r7, #12]
 80082dc:	f7ff fe82 	bl	8007fe4 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80082e0:	68fb      	ldr	r3, [r7, #12]
 80082e2:	2200      	movs	r2, #0
 80082e4:	f883 2278 	strb.w	r2, [r3, #632]	; 0x278
 80082e8:	e015      	b.n	8008316 <USBD_LL_DataInStage+0x140>
    }
  }
  else if((pdev->pClass->DataIn != NULL) &&
 80082ea:	68fb      	ldr	r3, [r7, #12]
 80082ec:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80082f0:	695b      	ldr	r3, [r3, #20]
 80082f2:	2b00      	cmp	r3, #0
 80082f4:	d00d      	beq.n	8008312 <USBD_LL_DataInStage+0x13c>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
 80082f6:	68fb      	ldr	r3, [r7, #12]
 80082f8:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
  else if((pdev->pClass->DataIn != NULL) &&
 80082fc:	2b03      	cmp	r3, #3
 80082fe:	d108      	bne.n	8008312 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8008300:	68fb      	ldr	r3, [r7, #12]
 8008302:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8008306:	695b      	ldr	r3, [r3, #20]
 8008308:	7afa      	ldrb	r2, [r7, #11]
 800830a:	4611      	mov	r1, r2
 800830c:	68f8      	ldr	r0, [r7, #12]
 800830e:	4798      	blx	r3
 8008310:	e001      	b.n	8008316 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8008312:	2302      	movs	r3, #2
 8008314:	e000      	b.n	8008318 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8008316:	2300      	movs	r3, #0
}
 8008318:	4618      	mov	r0, r3
 800831a:	3718      	adds	r7, #24
 800831c:	46bd      	mov	sp, r7
 800831e:	bd80      	pop	{r7, pc}

08008320 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef  *pdev)
{
 8008320:	b580      	push	{r7, lr}
 8008322:	b082      	sub	sp, #8
 8008324:	af00      	add	r7, sp, #0
 8008326:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008328:	2340      	movs	r3, #64	; 0x40
 800832a:	2200      	movs	r2, #0
 800832c:	2100      	movs	r1, #0
 800832e:	6878      	ldr	r0, [r7, #4]
 8008330:	f00f ff39 	bl	80181a6 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	2201      	movs	r2, #1
 8008338:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	2240      	movs	r2, #64	; 0x40
 8008340:	f8c3 2150 	str.w	r2, [r3, #336]	; 0x150

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008344:	2340      	movs	r3, #64	; 0x40
 8008346:	2200      	movs	r2, #0
 8008348:	2180      	movs	r1, #128	; 0x80
 800834a:	6878      	ldr	r0, [r7, #4]
 800834c:	f00f ff2b 	bl	80181a6 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	2201      	movs	r2, #1
 8008354:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	2240      	movs	r2, #64	; 0x40
 800835a:	625a      	str	r2, [r3, #36]	; 0x24
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	2201      	movs	r2, #1
 8008360:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  pdev->ep0_state = USBD_EP0_IDLE;
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	2200      	movs	r2, #0
 8008368:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  pdev->dev_config= 0U;
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	2200      	movs	r2, #0
 8008370:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	2200      	movs	r2, #0
 8008376:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c

  if (pdev->pClassData)
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8008380:	2b00      	cmp	r3, #0
 8008382:	d009      	beq.n	8008398 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800838a:	685b      	ldr	r3, [r3, #4]
 800838c:	687a      	ldr	r2, [r7, #4]
 800838e:	6852      	ldr	r2, [r2, #4]
 8008390:	b2d2      	uxtb	r2, r2
 8008392:	4611      	mov	r1, r2
 8008394:	6878      	ldr	r0, [r7, #4]
 8008396:	4798      	blx	r3
  }

  return USBD_OK;
 8008398:	2300      	movs	r3, #0
}
 800839a:	4618      	mov	r0, r3
 800839c:	3708      	adds	r7, #8
 800839e:	46bd      	mov	sp, r7
 80083a0:	bd80      	pop	{r7, pc}

080083a2 <USBD_LL_SetSpeed>:
*         Handle Reset event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef  *pdev, USBD_SpeedTypeDef speed)
{
 80083a2:	b480      	push	{r7}
 80083a4:	b083      	sub	sp, #12
 80083a6:	af00      	add	r7, sp, #0
 80083a8:	6078      	str	r0, [r7, #4]
 80083aa:	460b      	mov	r3, r1
 80083ac:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	78fa      	ldrb	r2, [r7, #3]
 80083b2:	741a      	strb	r2, [r3, #16]
  return USBD_OK;
 80083b4:	2300      	movs	r3, #0
}
 80083b6:	4618      	mov	r0, r3
 80083b8:	370c      	adds	r7, #12
 80083ba:	46bd      	mov	sp, r7
 80083bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083c0:	4770      	bx	lr

080083c2 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef  *pdev)
{
 80083c2:	b480      	push	{r7}
 80083c4:	b083      	sub	sp, #12
 80083c6:	af00      	add	r7, sp, #0
 80083c8:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	f893 2274 	ldrb.w	r2, [r3, #628]	; 0x274
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	f883 2275 	strb.w	r2, [r3, #629]	; 0x275
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	2204      	movs	r2, #4
 80083da:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  return USBD_OK;
 80083de:	2300      	movs	r3, #0
}
 80083e0:	4618      	mov	r0, r3
 80083e2:	370c      	adds	r7, #12
 80083e4:	46bd      	mov	sp, r7
 80083e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083ea:	4770      	bx	lr

080083ec <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef  *pdev)
{
 80083ec:	b480      	push	{r7}
 80083ee:	b083      	sub	sp, #12
 80083f0:	af00      	add	r7, sp, #0
 80083f2:	6078      	str	r0, [r7, #4]
  pdev->dev_state = pdev->dev_old_state;
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	f893 2275 	ldrb.w	r2, [r3, #629]	; 0x275
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  return USBD_OK;
 8008400:	2300      	movs	r3, #0
}
 8008402:	4618      	mov	r0, r3
 8008404:	370c      	adds	r7, #12
 8008406:	46bd      	mov	sp, r7
 8008408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800840c:	4770      	bx	lr

0800840e <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef  *pdev)
{
 800840e:	b580      	push	{r7, lr}
 8008410:	b082      	sub	sp, #8
 8008412:	af00      	add	r7, sp, #0
 8008414:	6078      	str	r0, [r7, #4]
  if(pdev->dev_state == USBD_STATE_CONFIGURED)
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800841c:	2b03      	cmp	r3, #3
 800841e:	d10b      	bne.n	8008438 <USBD_LL_SOF+0x2a>
  {
    if(pdev->pClass->SOF != NULL)
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8008426:	69db      	ldr	r3, [r3, #28]
 8008428:	2b00      	cmp	r3, #0
 800842a:	d005      	beq.n	8008438 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8008432:	69db      	ldr	r3, [r3, #28]
 8008434:	6878      	ldr	r0, [r7, #4]
 8008436:	4798      	blx	r3
    }
  }
  return USBD_OK;
 8008438:	2300      	movs	r3, #0
}
 800843a:	4618      	mov	r0, r3
 800843c:	3708      	adds	r7, #8
 800843e:	46bd      	mov	sp, r7
 8008440:	bd80      	pop	{r7, pc}

08008442 <USBD_LL_IsoINIncomplete>:
*         Handle iso in incomplete event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef  *pdev, uint8_t epnum)
{
 8008442:	b480      	push	{r7}
 8008444:	b083      	sub	sp, #12
 8008446:	af00      	add	r7, sp, #0
 8008448:	6078      	str	r0, [r7, #4]
 800844a:	460b      	mov	r3, r1
 800844c:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 800844e:	2300      	movs	r3, #0
}
 8008450:	4618      	mov	r0, r3
 8008452:	370c      	adds	r7, #12
 8008454:	46bd      	mov	sp, r7
 8008456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800845a:	4770      	bx	lr

0800845c <USBD_LL_IsoOUTIncomplete>:
*         Handle iso out incomplete event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef  *pdev, uint8_t epnum)
{
 800845c:	b480      	push	{r7}
 800845e:	b083      	sub	sp, #12
 8008460:	af00      	add	r7, sp, #0
 8008462:	6078      	str	r0, [r7, #4]
 8008464:	460b      	mov	r3, r1
 8008466:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 8008468:	2300      	movs	r3, #0
}
 800846a:	4618      	mov	r0, r3
 800846c:	370c      	adds	r7, #12
 800846e:	46bd      	mov	sp, r7
 8008470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008474:	4770      	bx	lr

08008476 <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef  *pdev)
{
 8008476:	b480      	push	{r7}
 8008478:	b083      	sub	sp, #12
 800847a:	af00      	add	r7, sp, #0
 800847c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800847e:	2300      	movs	r3, #0
}
 8008480:	4618      	mov	r0, r3
 8008482:	370c      	adds	r7, #12
 8008484:	46bd      	mov	sp, r7
 8008486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800848a:	4770      	bx	lr

0800848c <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef  *pdev)
{
 800848c:	b580      	push	{r7, lr}
 800848e:	b082      	sub	sp, #8
 8008490:	af00      	add	r7, sp, #0
 8008492:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	2201      	movs	r2, #1
 8008498:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80084a2:	685b      	ldr	r3, [r3, #4]
 80084a4:	687a      	ldr	r2, [r7, #4]
 80084a6:	6852      	ldr	r2, [r2, #4]
 80084a8:	b2d2      	uxtb	r2, r2
 80084aa:	4611      	mov	r1, r2
 80084ac:	6878      	ldr	r0, [r7, #4]
 80084ae:	4798      	blx	r3

  return USBD_OK;
 80084b0:	2300      	movs	r3, #0
}
 80084b2:	4618      	mov	r0, r3
 80084b4:	3708      	adds	r7, #8
 80084b6:	46bd      	mov	sp, r7
 80084b8:	bd80      	pop	{r7, pc}
	...

080084bc <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 80084bc:	b580      	push	{r7, lr}
 80084be:	b084      	sub	sp, #16
 80084c0:	af00      	add	r7, sp, #0
 80084c2:	6078      	str	r0, [r7, #4]
 80084c4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80084c6:	2300      	movs	r3, #0
 80084c8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80084ca:	683b      	ldr	r3, [r7, #0]
 80084cc:	781b      	ldrb	r3, [r3, #0]
 80084ce:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80084d2:	2b20      	cmp	r3, #32
 80084d4:	d004      	beq.n	80084e0 <USBD_StdDevReq+0x24>
 80084d6:	2b40      	cmp	r3, #64	; 0x40
 80084d8:	d002      	beq.n	80084e0 <USBD_StdDevReq+0x24>
 80084da:	2b00      	cmp	r3, #0
 80084dc:	d008      	beq.n	80084f0 <USBD_StdDevReq+0x34>
 80084de:	e04c      	b.n	800857a <USBD_StdDevReq+0xbe>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    pdev->pClass->Setup(pdev, req);
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80084e6:	689b      	ldr	r3, [r3, #8]
 80084e8:	6839      	ldr	r1, [r7, #0]
 80084ea:	6878      	ldr	r0, [r7, #4]
 80084ec:	4798      	blx	r3
    break;
 80084ee:	e049      	b.n	8008584 <USBD_StdDevReq+0xc8>

  case USB_REQ_TYPE_STANDARD:

    switch (req->bRequest)
 80084f0:	683b      	ldr	r3, [r7, #0]
 80084f2:	785b      	ldrb	r3, [r3, #1]
 80084f4:	2b09      	cmp	r3, #9
 80084f6:	d83a      	bhi.n	800856e <USBD_StdDevReq+0xb2>
 80084f8:	a201      	add	r2, pc, #4	; (adr r2, 8008500 <USBD_StdDevReq+0x44>)
 80084fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80084fe:	bf00      	nop
 8008500:	08008551 	.word	0x08008551
 8008504:	08008565 	.word	0x08008565
 8008508:	0800856f 	.word	0x0800856f
 800850c:	0800855b 	.word	0x0800855b
 8008510:	0800856f 	.word	0x0800856f
 8008514:	08008533 	.word	0x08008533
 8008518:	08008529 	.word	0x08008529
 800851c:	0800856f 	.word	0x0800856f
 8008520:	08008547 	.word	0x08008547
 8008524:	0800853d 	.word	0x0800853d
    {
    case USB_REQ_GET_DESCRIPTOR:

      USBD_GetDescriptor (pdev, req);
 8008528:	6839      	ldr	r1, [r7, #0]
 800852a:	6878      	ldr	r0, [r7, #4]
 800852c:	f000 f9d2 	bl	80088d4 <USBD_GetDescriptor>
      break;
 8008530:	e022      	b.n	8008578 <USBD_StdDevReq+0xbc>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress (pdev, req);
 8008532:	6839      	ldr	r1, [r7, #0]
 8008534:	6878      	ldr	r0, [r7, #4]
 8008536:	f000 fac7 	bl	8008ac8 <USBD_SetAddress>
      break;
 800853a:	e01d      	b.n	8008578 <USBD_StdDevReq+0xbc>

    case USB_REQ_SET_CONFIGURATION:
      USBD_SetConfig (pdev, req);
 800853c:	6839      	ldr	r1, [r7, #0]
 800853e:	6878      	ldr	r0, [r7, #4]
 8008540:	f000 fb04 	bl	8008b4c <USBD_SetConfig>
      break;
 8008544:	e018      	b.n	8008578 <USBD_StdDevReq+0xbc>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig (pdev, req);
 8008546:	6839      	ldr	r1, [r7, #0]
 8008548:	6878      	ldr	r0, [r7, #4]
 800854a:	f000 fb8d 	bl	8008c68 <USBD_GetConfig>
      break;
 800854e:	e013      	b.n	8008578 <USBD_StdDevReq+0xbc>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus (pdev, req);
 8008550:	6839      	ldr	r1, [r7, #0]
 8008552:	6878      	ldr	r0, [r7, #4]
 8008554:	f000 fbbc 	bl	8008cd0 <USBD_GetStatus>
      break;
 8008558:	e00e      	b.n	8008578 <USBD_StdDevReq+0xbc>


    case USB_REQ_SET_FEATURE:
      USBD_SetFeature (pdev, req);
 800855a:	6839      	ldr	r1, [r7, #0]
 800855c:	6878      	ldr	r0, [r7, #4]
 800855e:	f000 fbea 	bl	8008d36 <USBD_SetFeature>
      break;
 8008562:	e009      	b.n	8008578 <USBD_StdDevReq+0xbc>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature (pdev, req);
 8008564:	6839      	ldr	r1, [r7, #0]
 8008566:	6878      	ldr	r0, [r7, #4]
 8008568:	f000 fbf9 	bl	8008d5e <USBD_ClrFeature>
      break;
 800856c:	e004      	b.n	8008578 <USBD_StdDevReq+0xbc>

    default:
      USBD_CtlError(pdev, req);
 800856e:	6839      	ldr	r1, [r7, #0]
 8008570:	6878      	ldr	r0, [r7, #4]
 8008572:	f000 fc52 	bl	8008e1a <USBD_CtlError>
      break;
 8008576:	bf00      	nop
    }
    break;
 8008578:	e004      	b.n	8008584 <USBD_StdDevReq+0xc8>

  default:
    USBD_CtlError(pdev, req);
 800857a:	6839      	ldr	r1, [r7, #0]
 800857c:	6878      	ldr	r0, [r7, #4]
 800857e:	f000 fc4c 	bl	8008e1a <USBD_CtlError>
    break;
 8008582:	bf00      	nop
  }

  return ret;
 8008584:	7bfb      	ldrb	r3, [r7, #15]
}
 8008586:	4618      	mov	r0, r3
 8008588:	3710      	adds	r7, #16
 800858a:	46bd      	mov	sp, r7
 800858c:	bd80      	pop	{r7, pc}
 800858e:	bf00      	nop

08008590 <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 8008590:	b580      	push	{r7, lr}
 8008592:	b084      	sub	sp, #16
 8008594:	af00      	add	r7, sp, #0
 8008596:	6078      	str	r0, [r7, #4]
 8008598:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800859a:	2300      	movs	r3, #0
 800859c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800859e:	683b      	ldr	r3, [r7, #0]
 80085a0:	781b      	ldrb	r3, [r3, #0]
 80085a2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80085a6:	2b20      	cmp	r3, #32
 80085a8:	d003      	beq.n	80085b2 <USBD_StdItfReq+0x22>
 80085aa:	2b40      	cmp	r3, #64	; 0x40
 80085ac:	d001      	beq.n	80085b2 <USBD_StdItfReq+0x22>
 80085ae:	2b00      	cmp	r3, #0
 80085b0:	d12a      	bne.n	8008608 <USBD_StdItfReq+0x78>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 80085b8:	3b01      	subs	r3, #1
 80085ba:	2b02      	cmp	r3, #2
 80085bc:	d81d      	bhi.n	80085fa <USBD_StdItfReq+0x6a>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80085be:	683b      	ldr	r3, [r7, #0]
 80085c0:	889b      	ldrh	r3, [r3, #4]
 80085c2:	b2db      	uxtb	r3, r3
 80085c4:	2b01      	cmp	r3, #1
 80085c6:	d813      	bhi.n	80085f0 <USBD_StdItfReq+0x60>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup (pdev, req);
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80085ce:	689b      	ldr	r3, [r3, #8]
 80085d0:	6839      	ldr	r1, [r7, #0]
 80085d2:	6878      	ldr	r0, [r7, #4]
 80085d4:	4798      	blx	r3
 80085d6:	4603      	mov	r3, r0
 80085d8:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 80085da:	683b      	ldr	r3, [r7, #0]
 80085dc:	88db      	ldrh	r3, [r3, #6]
 80085de:	2b00      	cmp	r3, #0
 80085e0:	d110      	bne.n	8008604 <USBD_StdItfReq+0x74>
 80085e2:	7bfb      	ldrb	r3, [r7, #15]
 80085e4:	2b00      	cmp	r3, #0
 80085e6:	d10d      	bne.n	8008604 <USBD_StdItfReq+0x74>
        {
          USBD_CtlSendStatus(pdev);
 80085e8:	6878      	ldr	r0, [r7, #4]
 80085ea:	f000 fcdf 	bl	8008fac <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 80085ee:	e009      	b.n	8008604 <USBD_StdItfReq+0x74>
        USBD_CtlError(pdev, req);
 80085f0:	6839      	ldr	r1, [r7, #0]
 80085f2:	6878      	ldr	r0, [r7, #4]
 80085f4:	f000 fc11 	bl	8008e1a <USBD_CtlError>
      break;
 80085f8:	e004      	b.n	8008604 <USBD_StdItfReq+0x74>

    default:
      USBD_CtlError(pdev, req);
 80085fa:	6839      	ldr	r1, [r7, #0]
 80085fc:	6878      	ldr	r0, [r7, #4]
 80085fe:	f000 fc0c 	bl	8008e1a <USBD_CtlError>
      break;
 8008602:	e000      	b.n	8008606 <USBD_StdItfReq+0x76>
      break;
 8008604:	bf00      	nop
    }
    break;
 8008606:	e004      	b.n	8008612 <USBD_StdItfReq+0x82>

  default:
    USBD_CtlError(pdev, req);
 8008608:	6839      	ldr	r1, [r7, #0]
 800860a:	6878      	ldr	r0, [r7, #4]
 800860c:	f000 fc05 	bl	8008e1a <USBD_CtlError>
    break;
 8008610:	bf00      	nop
  }

  return USBD_OK;
 8008612:	2300      	movs	r3, #0
}
 8008614:	4618      	mov	r0, r3
 8008616:	3710      	adds	r7, #16
 8008618:	46bd      	mov	sp, r7
 800861a:	bd80      	pop	{r7, pc}

0800861c <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 800861c:	b580      	push	{r7, lr}
 800861e:	b084      	sub	sp, #16
 8008620:	af00      	add	r7, sp, #0
 8008622:	6078      	str	r0, [r7, #4]
 8008624:	6039      	str	r1, [r7, #0]

  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8008626:	2300      	movs	r3, #0
 8008628:	73fb      	strb	r3, [r7, #15]
  USBD_EndpointTypeDef   *pep;
  ep_addr  = LOBYTE(req->wIndex);
 800862a:	683b      	ldr	r3, [r7, #0]
 800862c:	889b      	ldrh	r3, [r3, #4]
 800862e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008630:	683b      	ldr	r3, [r7, #0]
 8008632:	781b      	ldrb	r3, [r3, #0]
 8008634:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008638:	2b20      	cmp	r3, #32
 800863a:	d004      	beq.n	8008646 <USBD_StdEPReq+0x2a>
 800863c:	2b40      	cmp	r3, #64	; 0x40
 800863e:	d002      	beq.n	8008646 <USBD_StdEPReq+0x2a>
 8008640:	2b00      	cmp	r3, #0
 8008642:	d008      	beq.n	8008656 <USBD_StdEPReq+0x3a>
 8008644:	e13b      	b.n	80088be <USBD_StdEPReq+0x2a2>
  {

  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    pdev->pClass->Setup (pdev, req);
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800864c:	689b      	ldr	r3, [r3, #8]
 800864e:	6839      	ldr	r1, [r7, #0]
 8008650:	6878      	ldr	r0, [r7, #4]
 8008652:	4798      	blx	r3
    break;
 8008654:	e138      	b.n	80088c8 <USBD_StdEPReq+0x2ac>

  case USB_REQ_TYPE_STANDARD:
    /* Check if it is a class request */
    if ((req->bmRequest & 0x60U) == 0x20U)
 8008656:	683b      	ldr	r3, [r7, #0]
 8008658:	781b      	ldrb	r3, [r3, #0]
 800865a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800865e:	2b20      	cmp	r3, #32
 8008660:	d10a      	bne.n	8008678 <USBD_StdEPReq+0x5c>
    {
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup (pdev, req);
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8008668:	689b      	ldr	r3, [r3, #8]
 800866a:	6839      	ldr	r1, [r7, #0]
 800866c:	6878      	ldr	r0, [r7, #4]
 800866e:	4798      	blx	r3
 8008670:	4603      	mov	r3, r0
 8008672:	73fb      	strb	r3, [r7, #15]

      return ret;
 8008674:	7bfb      	ldrb	r3, [r7, #15]
 8008676:	e128      	b.n	80088ca <USBD_StdEPReq+0x2ae>
    }

    switch (req->bRequest)
 8008678:	683b      	ldr	r3, [r7, #0]
 800867a:	785b      	ldrb	r3, [r3, #1]
 800867c:	2b01      	cmp	r3, #1
 800867e:	d03e      	beq.n	80086fe <USBD_StdEPReq+0xe2>
 8008680:	2b03      	cmp	r3, #3
 8008682:	d002      	beq.n	800868a <USBD_StdEPReq+0x6e>
 8008684:	2b00      	cmp	r3, #0
 8008686:	d070      	beq.n	800876a <USBD_StdEPReq+0x14e>
 8008688:	e113      	b.n	80088b2 <USBD_StdEPReq+0x296>
    {

    case USB_REQ_SET_FEATURE :

      switch (pdev->dev_state)
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8008690:	2b02      	cmp	r3, #2
 8008692:	d002      	beq.n	800869a <USBD_StdEPReq+0x7e>
 8008694:	2b03      	cmp	r3, #3
 8008696:	d015      	beq.n	80086c4 <USBD_StdEPReq+0xa8>
 8008698:	e02b      	b.n	80086f2 <USBD_StdEPReq+0xd6>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800869a:	7bbb      	ldrb	r3, [r7, #14]
 800869c:	2b00      	cmp	r3, #0
 800869e:	d00c      	beq.n	80086ba <USBD_StdEPReq+0x9e>
 80086a0:	7bbb      	ldrb	r3, [r7, #14]
 80086a2:	2b80      	cmp	r3, #128	; 0x80
 80086a4:	d009      	beq.n	80086ba <USBD_StdEPReq+0x9e>
        {
          USBD_LL_StallEP(pdev, ep_addr);
 80086a6:	7bbb      	ldrb	r3, [r7, #14]
 80086a8:	4619      	mov	r1, r3
 80086aa:	6878      	ldr	r0, [r7, #4]
 80086ac:	f00f fdc0 	bl	8018230 <USBD_LL_StallEP>
          USBD_LL_StallEP(pdev, 0x80U);
 80086b0:	2180      	movs	r1, #128	; 0x80
 80086b2:	6878      	ldr	r0, [r7, #4]
 80086b4:	f00f fdbc 	bl	8018230 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 80086b8:	e020      	b.n	80086fc <USBD_StdEPReq+0xe0>
          USBD_CtlError(pdev, req);
 80086ba:	6839      	ldr	r1, [r7, #0]
 80086bc:	6878      	ldr	r0, [r7, #4]
 80086be:	f000 fbac 	bl	8008e1a <USBD_CtlError>
        break;
 80086c2:	e01b      	b.n	80086fc <USBD_StdEPReq+0xe0>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 80086c4:	683b      	ldr	r3, [r7, #0]
 80086c6:	885b      	ldrh	r3, [r3, #2]
 80086c8:	2b00      	cmp	r3, #0
 80086ca:	d10e      	bne.n	80086ea <USBD_StdEPReq+0xce>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80086cc:	7bbb      	ldrb	r3, [r7, #14]
 80086ce:	2b00      	cmp	r3, #0
 80086d0:	d00b      	beq.n	80086ea <USBD_StdEPReq+0xce>
 80086d2:	7bbb      	ldrb	r3, [r7, #14]
 80086d4:	2b80      	cmp	r3, #128	; 0x80
 80086d6:	d008      	beq.n	80086ea <USBD_StdEPReq+0xce>
 80086d8:	683b      	ldr	r3, [r7, #0]
 80086da:	88db      	ldrh	r3, [r3, #6]
 80086dc:	2b00      	cmp	r3, #0
 80086de:	d104      	bne.n	80086ea <USBD_StdEPReq+0xce>
          {
            USBD_LL_StallEP(pdev, ep_addr);
 80086e0:	7bbb      	ldrb	r3, [r7, #14]
 80086e2:	4619      	mov	r1, r3
 80086e4:	6878      	ldr	r0, [r7, #4]
 80086e6:	f00f fda3 	bl	8018230 <USBD_LL_StallEP>
          }
        }
        USBD_CtlSendStatus(pdev);
 80086ea:	6878      	ldr	r0, [r7, #4]
 80086ec:	f000 fc5e 	bl	8008fac <USBD_CtlSendStatus>

        break;
 80086f0:	e004      	b.n	80086fc <USBD_StdEPReq+0xe0>

      default:
        USBD_CtlError(pdev, req);
 80086f2:	6839      	ldr	r1, [r7, #0]
 80086f4:	6878      	ldr	r0, [r7, #4]
 80086f6:	f000 fb90 	bl	8008e1a <USBD_CtlError>
        break;
 80086fa:	bf00      	nop
      }
      break;
 80086fc:	e0de      	b.n	80088bc <USBD_StdEPReq+0x2a0>

    case USB_REQ_CLEAR_FEATURE :

      switch (pdev->dev_state)
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8008704:	2b02      	cmp	r3, #2
 8008706:	d002      	beq.n	800870e <USBD_StdEPReq+0xf2>
 8008708:	2b03      	cmp	r3, #3
 800870a:	d015      	beq.n	8008738 <USBD_StdEPReq+0x11c>
 800870c:	e026      	b.n	800875c <USBD_StdEPReq+0x140>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800870e:	7bbb      	ldrb	r3, [r7, #14]
 8008710:	2b00      	cmp	r3, #0
 8008712:	d00c      	beq.n	800872e <USBD_StdEPReq+0x112>
 8008714:	7bbb      	ldrb	r3, [r7, #14]
 8008716:	2b80      	cmp	r3, #128	; 0x80
 8008718:	d009      	beq.n	800872e <USBD_StdEPReq+0x112>
        {
          USBD_LL_StallEP(pdev, ep_addr);
 800871a:	7bbb      	ldrb	r3, [r7, #14]
 800871c:	4619      	mov	r1, r3
 800871e:	6878      	ldr	r0, [r7, #4]
 8008720:	f00f fd86 	bl	8018230 <USBD_LL_StallEP>
          USBD_LL_StallEP(pdev, 0x80U);
 8008724:	2180      	movs	r1, #128	; 0x80
 8008726:	6878      	ldr	r0, [r7, #4]
 8008728:	f00f fd82 	bl	8018230 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 800872c:	e01c      	b.n	8008768 <USBD_StdEPReq+0x14c>
          USBD_CtlError(pdev, req);
 800872e:	6839      	ldr	r1, [r7, #0]
 8008730:	6878      	ldr	r0, [r7, #4]
 8008732:	f000 fb72 	bl	8008e1a <USBD_CtlError>
        break;
 8008736:	e017      	b.n	8008768 <USBD_StdEPReq+0x14c>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 8008738:	683b      	ldr	r3, [r7, #0]
 800873a:	885b      	ldrh	r3, [r3, #2]
 800873c:	2b00      	cmp	r3, #0
 800873e:	d112      	bne.n	8008766 <USBD_StdEPReq+0x14a>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 8008740:	7bbb      	ldrb	r3, [r7, #14]
 8008742:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008746:	2b00      	cmp	r3, #0
 8008748:	d004      	beq.n	8008754 <USBD_StdEPReq+0x138>
          {
            USBD_LL_ClearStallEP(pdev, ep_addr);
 800874a:	7bbb      	ldrb	r3, [r7, #14]
 800874c:	4619      	mov	r1, r3
 800874e:	6878      	ldr	r0, [r7, #4]
 8008750:	f00f fd8d 	bl	801826e <USBD_LL_ClearStallEP>
          }
          USBD_CtlSendStatus(pdev);
 8008754:	6878      	ldr	r0, [r7, #4]
 8008756:	f000 fc29 	bl	8008fac <USBD_CtlSendStatus>
        }
        break;
 800875a:	e004      	b.n	8008766 <USBD_StdEPReq+0x14a>

      default:
        USBD_CtlError(pdev, req);
 800875c:	6839      	ldr	r1, [r7, #0]
 800875e:	6878      	ldr	r0, [r7, #4]
 8008760:	f000 fb5b 	bl	8008e1a <USBD_CtlError>
        break;
 8008764:	e000      	b.n	8008768 <USBD_StdEPReq+0x14c>
        break;
 8008766:	bf00      	nop
      }
      break;
 8008768:	e0a8      	b.n	80088bc <USBD_StdEPReq+0x2a0>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8008770:	2b02      	cmp	r3, #2
 8008772:	d002      	beq.n	800877a <USBD_StdEPReq+0x15e>
 8008774:	2b03      	cmp	r3, #3
 8008776:	d031      	beq.n	80087dc <USBD_StdEPReq+0x1c0>
 8008778:	e095      	b.n	80088a6 <USBD_StdEPReq+0x28a>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800877a:	7bbb      	ldrb	r3, [r7, #14]
 800877c:	2b00      	cmp	r3, #0
 800877e:	d007      	beq.n	8008790 <USBD_StdEPReq+0x174>
 8008780:	7bbb      	ldrb	r3, [r7, #14]
 8008782:	2b80      	cmp	r3, #128	; 0x80
 8008784:	d004      	beq.n	8008790 <USBD_StdEPReq+0x174>
        {
          USBD_CtlError(pdev, req);
 8008786:	6839      	ldr	r1, [r7, #0]
 8008788:	6878      	ldr	r0, [r7, #4]
 800878a:	f000 fb46 	bl	8008e1a <USBD_CtlError>
          break;
 800878e:	e08f      	b.n	80088b0 <USBD_StdEPReq+0x294>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 8008790:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008794:	2b00      	cmp	r3, #0
 8008796:	da0b      	bge.n	80087b0 <USBD_StdEPReq+0x194>
 8008798:	7bbb      	ldrb	r3, [r7, #14]
 800879a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800879e:	4613      	mov	r3, r2
 80087a0:	009b      	lsls	r3, r3, #2
 80087a2:	4413      	add	r3, r2
 80087a4:	009b      	lsls	r3, r3, #2
 80087a6:	3310      	adds	r3, #16
 80087a8:	687a      	ldr	r2, [r7, #4]
 80087aa:	4413      	add	r3, r2
 80087ac:	3304      	adds	r3, #4
 80087ae:	e00a      	b.n	80087c6 <USBD_StdEPReq+0x1aa>
          &pdev->ep_out[ep_addr & 0x7FU];
 80087b0:	7bbb      	ldrb	r3, [r7, #14]
 80087b2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 80087b6:	4613      	mov	r3, r2
 80087b8:	009b      	lsls	r3, r3, #2
 80087ba:	4413      	add	r3, r2
 80087bc:	009b      	lsls	r3, r3, #2
 80087be:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 80087c2:	687a      	ldr	r2, [r7, #4]
 80087c4:	4413      	add	r3, r2
 80087c6:	60bb      	str	r3, [r7, #8]

          pep->status = 0x0000U;
 80087c8:	68bb      	ldr	r3, [r7, #8]
 80087ca:	2200      	movs	r2, #0
 80087cc:	601a      	str	r2, [r3, #0]

          USBD_CtlSendData (pdev, (uint8_t *)(void *)&pep->status, 2U);
 80087ce:	68bb      	ldr	r3, [r7, #8]
 80087d0:	2202      	movs	r2, #2
 80087d2:	4619      	mov	r1, r3
 80087d4:	6878      	ldr	r0, [r7, #4]
 80087d6:	f000 fb8b 	bl	8008ef0 <USBD_CtlSendData>
          break;
 80087da:	e069      	b.n	80088b0 <USBD_StdEPReq+0x294>

      case USBD_STATE_CONFIGURED:
        if((ep_addr & 0x80U) == 0x80U)
 80087dc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80087e0:	2b00      	cmp	r3, #0
 80087e2:	da11      	bge.n	8008808 <USBD_StdEPReq+0x1ec>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80087e4:	7bbb      	ldrb	r3, [r7, #14]
 80087e6:	f003 020f 	and.w	r2, r3, #15
 80087ea:	6879      	ldr	r1, [r7, #4]
 80087ec:	4613      	mov	r3, r2
 80087ee:	009b      	lsls	r3, r3, #2
 80087f0:	4413      	add	r3, r2
 80087f2:	009b      	lsls	r3, r3, #2
 80087f4:	440b      	add	r3, r1
 80087f6:	3318      	adds	r3, #24
 80087f8:	681b      	ldr	r3, [r3, #0]
 80087fa:	2b00      	cmp	r3, #0
 80087fc:	d117      	bne.n	800882e <USBD_StdEPReq+0x212>
          {
            USBD_CtlError(pdev, req);
 80087fe:	6839      	ldr	r1, [r7, #0]
 8008800:	6878      	ldr	r0, [r7, #4]
 8008802:	f000 fb0a 	bl	8008e1a <USBD_CtlError>
            break;
 8008806:	e053      	b.n	80088b0 <USBD_StdEPReq+0x294>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8008808:	7bbb      	ldrb	r3, [r7, #14]
 800880a:	f003 020f 	and.w	r2, r3, #15
 800880e:	6879      	ldr	r1, [r7, #4]
 8008810:	4613      	mov	r3, r2
 8008812:	009b      	lsls	r3, r3, #2
 8008814:	4413      	add	r3, r2
 8008816:	009b      	lsls	r3, r3, #2
 8008818:	440b      	add	r3, r1
 800881a:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800881e:	681b      	ldr	r3, [r3, #0]
 8008820:	2b00      	cmp	r3, #0
 8008822:	d104      	bne.n	800882e <USBD_StdEPReq+0x212>
          {
            USBD_CtlError(pdev, req);
 8008824:	6839      	ldr	r1, [r7, #0]
 8008826:	6878      	ldr	r0, [r7, #4]
 8008828:	f000 faf7 	bl	8008e1a <USBD_CtlError>
            break;
 800882c:	e040      	b.n	80088b0 <USBD_StdEPReq+0x294>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 800882e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008832:	2b00      	cmp	r3, #0
 8008834:	da0b      	bge.n	800884e <USBD_StdEPReq+0x232>
 8008836:	7bbb      	ldrb	r3, [r7, #14]
 8008838:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800883c:	4613      	mov	r3, r2
 800883e:	009b      	lsls	r3, r3, #2
 8008840:	4413      	add	r3, r2
 8008842:	009b      	lsls	r3, r3, #2
 8008844:	3310      	adds	r3, #16
 8008846:	687a      	ldr	r2, [r7, #4]
 8008848:	4413      	add	r3, r2
 800884a:	3304      	adds	r3, #4
 800884c:	e00a      	b.n	8008864 <USBD_StdEPReq+0x248>
          &pdev->ep_out[ep_addr & 0x7FU];
 800884e:	7bbb      	ldrb	r3, [r7, #14]
 8008850:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 8008854:	4613      	mov	r3, r2
 8008856:	009b      	lsls	r3, r3, #2
 8008858:	4413      	add	r3, r2
 800885a:	009b      	lsls	r3, r3, #2
 800885c:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8008860:	687a      	ldr	r2, [r7, #4]
 8008862:	4413      	add	r3, r2
 8008864:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8008866:	7bbb      	ldrb	r3, [r7, #14]
 8008868:	2b00      	cmp	r3, #0
 800886a:	d002      	beq.n	8008872 <USBD_StdEPReq+0x256>
 800886c:	7bbb      	ldrb	r3, [r7, #14]
 800886e:	2b80      	cmp	r3, #128	; 0x80
 8008870:	d103      	bne.n	800887a <USBD_StdEPReq+0x25e>
          {
            pep->status = 0x0000U;
 8008872:	68bb      	ldr	r3, [r7, #8]
 8008874:	2200      	movs	r2, #0
 8008876:	601a      	str	r2, [r3, #0]
 8008878:	e00e      	b.n	8008898 <USBD_StdEPReq+0x27c>
          }
          else if(USBD_LL_IsStallEP(pdev, ep_addr))
 800887a:	7bbb      	ldrb	r3, [r7, #14]
 800887c:	4619      	mov	r1, r3
 800887e:	6878      	ldr	r0, [r7, #4]
 8008880:	f00f fd14 	bl	80182ac <USBD_LL_IsStallEP>
 8008884:	4603      	mov	r3, r0
 8008886:	2b00      	cmp	r3, #0
 8008888:	d003      	beq.n	8008892 <USBD_StdEPReq+0x276>
          {
            pep->status = 0x0001U;
 800888a:	68bb      	ldr	r3, [r7, #8]
 800888c:	2201      	movs	r2, #1
 800888e:	601a      	str	r2, [r3, #0]
 8008890:	e002      	b.n	8008898 <USBD_StdEPReq+0x27c>
          }
          else
          {
            pep->status = 0x0000U;
 8008892:	68bb      	ldr	r3, [r7, #8]
 8008894:	2200      	movs	r2, #0
 8008896:	601a      	str	r2, [r3, #0]
          }

          USBD_CtlSendData (pdev, (uint8_t *)(void *)&pep->status, 2U);
 8008898:	68bb      	ldr	r3, [r7, #8]
 800889a:	2202      	movs	r2, #2
 800889c:	4619      	mov	r1, r3
 800889e:	6878      	ldr	r0, [r7, #4]
 80088a0:	f000 fb26 	bl	8008ef0 <USBD_CtlSendData>
          break;
 80088a4:	e004      	b.n	80088b0 <USBD_StdEPReq+0x294>

      default:
        USBD_CtlError(pdev, req);
 80088a6:	6839      	ldr	r1, [r7, #0]
 80088a8:	6878      	ldr	r0, [r7, #4]
 80088aa:	f000 fab6 	bl	8008e1a <USBD_CtlError>
        break;
 80088ae:	bf00      	nop
      }
      break;
 80088b0:	e004      	b.n	80088bc <USBD_StdEPReq+0x2a0>

    default:
      USBD_CtlError(pdev, req);
 80088b2:	6839      	ldr	r1, [r7, #0]
 80088b4:	6878      	ldr	r0, [r7, #4]
 80088b6:	f000 fab0 	bl	8008e1a <USBD_CtlError>
      break;
 80088ba:	bf00      	nop
    }
    break;
 80088bc:	e004      	b.n	80088c8 <USBD_StdEPReq+0x2ac>

  default:
    USBD_CtlError(pdev, req);
 80088be:	6839      	ldr	r1, [r7, #0]
 80088c0:	6878      	ldr	r0, [r7, #4]
 80088c2:	f000 faaa 	bl	8008e1a <USBD_CtlError>
    break;
 80088c6:	bf00      	nop
  }

  return ret;
 80088c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80088ca:	4618      	mov	r0, r3
 80088cc:	3710      	adds	r7, #16
 80088ce:	46bd      	mov	sp, r7
 80088d0:	bd80      	pop	{r7, pc}
	...

080088d4 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev ,
                               USBD_SetupReqTypedef *req)
{
 80088d4:	b580      	push	{r7, lr}
 80088d6:	b084      	sub	sp, #16
 80088d8:	af00      	add	r7, sp, #0
 80088da:	6078      	str	r0, [r7, #4]
 80088dc:	6039      	str	r1, [r7, #0]
  uint16_t len;
  uint8_t *pbuf;


  switch (req->wValue >> 8)
 80088de:	683b      	ldr	r3, [r7, #0]
 80088e0:	885b      	ldrh	r3, [r3, #2]
 80088e2:	0a1b      	lsrs	r3, r3, #8
 80088e4:	b29b      	uxth	r3, r3
 80088e6:	3b01      	subs	r3, #1
 80088e8:	2b06      	cmp	r3, #6
 80088ea:	f200 80c9 	bhi.w	8008a80 <USBD_GetDescriptor+0x1ac>
 80088ee:	a201      	add	r2, pc, #4	; (adr r2, 80088f4 <USBD_GetDescriptor+0x20>)
 80088f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80088f4:	08008911 	.word	0x08008911
 80088f8:	08008929 	.word	0x08008929
 80088fc:	08008969 	.word	0x08008969
 8008900:	08008a81 	.word	0x08008a81
 8008904:	08008a81 	.word	0x08008a81
 8008908:	08008a2d 	.word	0x08008a2d
 800890c:	08008a53 	.word	0x08008a53
  case USB_DESC_TYPE_BOS:
    pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
    break;
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 8008916:	681b      	ldr	r3, [r3, #0]
 8008918:	687a      	ldr	r2, [r7, #4]
 800891a:	7c12      	ldrb	r2, [r2, #16]
 800891c:	f107 010a 	add.w	r1, r7, #10
 8008920:	4610      	mov	r0, r2
 8008922:	4798      	blx	r3
 8008924:	60f8      	str	r0, [r7, #12]
    break;
 8008926:	e0b0      	b.n	8008a8a <USBD_GetDescriptor+0x1b6>

  case USB_DESC_TYPE_CONFIGURATION:
    if(pdev->dev_speed == USBD_SPEED_HIGH )
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	7c1b      	ldrb	r3, [r3, #16]
 800892c:	2b00      	cmp	r3, #0
 800892e:	d10d      	bne.n	800894c <USBD_GetDescriptor+0x78>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetHSConfigDescriptor(&len);
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8008936:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008938:	f107 020a 	add.w	r2, r7, #10
 800893c:	4610      	mov	r0, r2
 800893e:	4798      	blx	r3
 8008940:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008942:	68fb      	ldr	r3, [r7, #12]
 8008944:	3301      	adds	r3, #1
 8008946:	2202      	movs	r2, #2
 8008948:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 800894a:	e09e      	b.n	8008a8a <USBD_GetDescriptor+0x1b6>
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8008952:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008954:	f107 020a 	add.w	r2, r7, #10
 8008958:	4610      	mov	r0, r2
 800895a:	4798      	blx	r3
 800895c:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800895e:	68fb      	ldr	r3, [r7, #12]
 8008960:	3301      	adds	r3, #1
 8008962:	2202      	movs	r2, #2
 8008964:	701a      	strb	r2, [r3, #0]
    break;
 8008966:	e090      	b.n	8008a8a <USBD_GetDescriptor+0x1b6>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 8008968:	683b      	ldr	r3, [r7, #0]
 800896a:	885b      	ldrh	r3, [r3, #2]
 800896c:	b2db      	uxtb	r3, r3
 800896e:	2b05      	cmp	r3, #5
 8008970:	d856      	bhi.n	8008a20 <USBD_GetDescriptor+0x14c>
 8008972:	a201      	add	r2, pc, #4	; (adr r2, 8008978 <USBD_GetDescriptor+0xa4>)
 8008974:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008978:	08008991 	.word	0x08008991
 800897c:	080089a9 	.word	0x080089a9
 8008980:	080089c1 	.word	0x080089c1
 8008984:	080089d9 	.word	0x080089d9
 8008988:	080089f1 	.word	0x080089f1
 800898c:	08008a09 	.word	0x08008a09
    {
    case USBD_IDX_LANGID_STR:
     pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 8008996:	685b      	ldr	r3, [r3, #4]
 8008998:	687a      	ldr	r2, [r7, #4]
 800899a:	7c12      	ldrb	r2, [r2, #16]
 800899c:	f107 010a 	add.w	r1, r7, #10
 80089a0:	4610      	mov	r0, r2
 80089a2:	4798      	blx	r3
 80089a4:	60f8      	str	r0, [r7, #12]
      break;
 80089a6:	e040      	b.n	8008a2a <USBD_GetDescriptor+0x156>

    case USBD_IDX_MFC_STR:
      pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 80089ae:	689b      	ldr	r3, [r3, #8]
 80089b0:	687a      	ldr	r2, [r7, #4]
 80089b2:	7c12      	ldrb	r2, [r2, #16]
 80089b4:	f107 010a 	add.w	r1, r7, #10
 80089b8:	4610      	mov	r0, r2
 80089ba:	4798      	blx	r3
 80089bc:	60f8      	str	r0, [r7, #12]
      break;
 80089be:	e034      	b.n	8008a2a <USBD_GetDescriptor+0x156>

    case USBD_IDX_PRODUCT_STR:
      pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 80089c6:	68db      	ldr	r3, [r3, #12]
 80089c8:	687a      	ldr	r2, [r7, #4]
 80089ca:	7c12      	ldrb	r2, [r2, #16]
 80089cc:	f107 010a 	add.w	r1, r7, #10
 80089d0:	4610      	mov	r0, r2
 80089d2:	4798      	blx	r3
 80089d4:	60f8      	str	r0, [r7, #12]
      break;
 80089d6:	e028      	b.n	8008a2a <USBD_GetDescriptor+0x156>

    case USBD_IDX_SERIAL_STR:
      pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 80089de:	691b      	ldr	r3, [r3, #16]
 80089e0:	687a      	ldr	r2, [r7, #4]
 80089e2:	7c12      	ldrb	r2, [r2, #16]
 80089e4:	f107 010a 	add.w	r1, r7, #10
 80089e8:	4610      	mov	r0, r2
 80089ea:	4798      	blx	r3
 80089ec:	60f8      	str	r0, [r7, #12]
      break;
 80089ee:	e01c      	b.n	8008a2a <USBD_GetDescriptor+0x156>

    case USBD_IDX_CONFIG_STR:
      pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 80089f6:	695b      	ldr	r3, [r3, #20]
 80089f8:	687a      	ldr	r2, [r7, #4]
 80089fa:	7c12      	ldrb	r2, [r2, #16]
 80089fc:	f107 010a 	add.w	r1, r7, #10
 8008a00:	4610      	mov	r0, r2
 8008a02:	4798      	blx	r3
 8008a04:	60f8      	str	r0, [r7, #12]
      break;
 8008a06:	e010      	b.n	8008a2a <USBD_GetDescriptor+0x156>

    case USBD_IDX_INTERFACE_STR:
      pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 8008a0e:	699b      	ldr	r3, [r3, #24]
 8008a10:	687a      	ldr	r2, [r7, #4]
 8008a12:	7c12      	ldrb	r2, [r2, #16]
 8008a14:	f107 010a 	add.w	r1, r7, #10
 8008a18:	4610      	mov	r0, r2
 8008a1a:	4798      	blx	r3
 8008a1c:	60f8      	str	r0, [r7, #12]
      break;
 8008a1e:	e004      	b.n	8008a2a <USBD_GetDescriptor+0x156>
    default:
#if (USBD_SUPPORT_USER_STRING == 1U)
      pbuf = pdev->pClass->GetUsrStrDescriptor(pdev, (req->wValue) , &len);
      break;
#else
       USBD_CtlError(pdev , req);
 8008a20:	6839      	ldr	r1, [r7, #0]
 8008a22:	6878      	ldr	r0, [r7, #4]
 8008a24:	f000 f9f9 	bl	8008e1a <USBD_CtlError>
      return;
 8008a28:	e04b      	b.n	8008ac2 <USBD_GetDescriptor+0x1ee>
#endif
    }
    break;
 8008a2a:	e02e      	b.n	8008a8a <USBD_GetDescriptor+0x1b6>
  case USB_DESC_TYPE_DEVICE_QUALIFIER:

    if(pdev->dev_speed == USBD_SPEED_HIGH)
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	7c1b      	ldrb	r3, [r3, #16]
 8008a30:	2b00      	cmp	r3, #0
 8008a32:	d109      	bne.n	8008a48 <USBD_GetDescriptor+0x174>
    {
      pbuf = (uint8_t *)pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8008a3a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008a3c:	f107 020a 	add.w	r2, r7, #10
 8008a40:	4610      	mov	r0, r2
 8008a42:	4798      	blx	r3
 8008a44:	60f8      	str	r0, [r7, #12]
      break;
 8008a46:	e020      	b.n	8008a8a <USBD_GetDescriptor+0x1b6>
    }
    else
    {
      USBD_CtlError(pdev , req);
 8008a48:	6839      	ldr	r1, [r7, #0]
 8008a4a:	6878      	ldr	r0, [r7, #4]
 8008a4c:	f000 f9e5 	bl	8008e1a <USBD_CtlError>
      return;
 8008a50:	e037      	b.n	8008ac2 <USBD_GetDescriptor+0x1ee>
    }

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if(pdev->dev_speed == USBD_SPEED_HIGH  )
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	7c1b      	ldrb	r3, [r3, #16]
 8008a56:	2b00      	cmp	r3, #0
 8008a58:	d10d      	bne.n	8008a76 <USBD_GetDescriptor+0x1a2>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8008a60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a62:	f107 020a 	add.w	r2, r7, #10
 8008a66:	4610      	mov	r0, r2
 8008a68:	4798      	blx	r3
 8008a6a:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8008a6c:	68fb      	ldr	r3, [r7, #12]
 8008a6e:	3301      	adds	r3, #1
 8008a70:	2207      	movs	r2, #7
 8008a72:	701a      	strb	r2, [r3, #0]
      break;
 8008a74:	e009      	b.n	8008a8a <USBD_GetDescriptor+0x1b6>
    }
    else
    {
      USBD_CtlError(pdev , req);
 8008a76:	6839      	ldr	r1, [r7, #0]
 8008a78:	6878      	ldr	r0, [r7, #4]
 8008a7a:	f000 f9ce 	bl	8008e1a <USBD_CtlError>
      return;
 8008a7e:	e020      	b.n	8008ac2 <USBD_GetDescriptor+0x1ee>
    }

  default:
     USBD_CtlError(pdev , req);
 8008a80:	6839      	ldr	r1, [r7, #0]
 8008a82:	6878      	ldr	r0, [r7, #4]
 8008a84:	f000 f9c9 	bl	8008e1a <USBD_CtlError>
    return;
 8008a88:	e01b      	b.n	8008ac2 <USBD_GetDescriptor+0x1ee>
  }

  if((len != 0U) && (req->wLength != 0U))
 8008a8a:	897b      	ldrh	r3, [r7, #10]
 8008a8c:	2b00      	cmp	r3, #0
 8008a8e:	d011      	beq.n	8008ab4 <USBD_GetDescriptor+0x1e0>
 8008a90:	683b      	ldr	r3, [r7, #0]
 8008a92:	88db      	ldrh	r3, [r3, #6]
 8008a94:	2b00      	cmp	r3, #0
 8008a96:	d00d      	beq.n	8008ab4 <USBD_GetDescriptor+0x1e0>
  {

    len = MIN(len, req->wLength);
 8008a98:	683b      	ldr	r3, [r7, #0]
 8008a9a:	88da      	ldrh	r2, [r3, #6]
 8008a9c:	897b      	ldrh	r3, [r7, #10]
 8008a9e:	4293      	cmp	r3, r2
 8008aa0:	bf28      	it	cs
 8008aa2:	4613      	movcs	r3, r2
 8008aa4:	b29b      	uxth	r3, r3
 8008aa6:	817b      	strh	r3, [r7, #10]

    USBD_CtlSendData (pdev, pbuf, len);
 8008aa8:	897b      	ldrh	r3, [r7, #10]
 8008aaa:	461a      	mov	r2, r3
 8008aac:	68f9      	ldr	r1, [r7, #12]
 8008aae:	6878      	ldr	r0, [r7, #4]
 8008ab0:	f000 fa1e 	bl	8008ef0 <USBD_CtlSendData>
  }

  if(req->wLength == 0U)
 8008ab4:	683b      	ldr	r3, [r7, #0]
 8008ab6:	88db      	ldrh	r3, [r3, #6]
 8008ab8:	2b00      	cmp	r3, #0
 8008aba:	d102      	bne.n	8008ac2 <USBD_GetDescriptor+0x1ee>
  {
   USBD_CtlSendStatus(pdev);
 8008abc:	6878      	ldr	r0, [r7, #4]
 8008abe:	f000 fa75 	bl	8008fac <USBD_CtlSendStatus>
  }
}
 8008ac2:	3710      	adds	r7, #16
 8008ac4:	46bd      	mov	sp, r7
 8008ac6:	bd80      	pop	{r7, pc}

08008ac8 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 8008ac8:	b580      	push	{r7, lr}
 8008aca:	b084      	sub	sp, #16
 8008acc:	af00      	add	r7, sp, #0
 8008ace:	6078      	str	r0, [r7, #4]
 8008ad0:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8008ad2:	683b      	ldr	r3, [r7, #0]
 8008ad4:	889b      	ldrh	r3, [r3, #4]
 8008ad6:	2b00      	cmp	r3, #0
 8008ad8:	d130      	bne.n	8008b3c <USBD_SetAddress+0x74>
 8008ada:	683b      	ldr	r3, [r7, #0]
 8008adc:	88db      	ldrh	r3, [r3, #6]
 8008ade:	2b00      	cmp	r3, #0
 8008ae0:	d12c      	bne.n	8008b3c <USBD_SetAddress+0x74>
 8008ae2:	683b      	ldr	r3, [r7, #0]
 8008ae4:	885b      	ldrh	r3, [r3, #2]
 8008ae6:	2b7f      	cmp	r3, #127	; 0x7f
 8008ae8:	d828      	bhi.n	8008b3c <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8008aea:	683b      	ldr	r3, [r7, #0]
 8008aec:	885b      	ldrh	r3, [r3, #2]
 8008aee:	b2db      	uxtb	r3, r3
 8008af0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008af4:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8008afc:	2b03      	cmp	r3, #3
 8008afe:	d104      	bne.n	8008b0a <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev , req);
 8008b00:	6839      	ldr	r1, [r7, #0]
 8008b02:	6878      	ldr	r0, [r7, #4]
 8008b04:	f000 f989 	bl	8008e1a <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008b08:	e01c      	b.n	8008b44 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	7bfa      	ldrb	r2, [r7, #15]
 8008b0e:	f883 2276 	strb.w	r2, [r3, #630]	; 0x276
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8008b12:	7bfb      	ldrb	r3, [r7, #15]
 8008b14:	4619      	mov	r1, r3
 8008b16:	6878      	ldr	r0, [r7, #4]
 8008b18:	f00f fbf4 	bl	8018304 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8008b1c:	6878      	ldr	r0, [r7, #4]
 8008b1e:	f000 fa45 	bl	8008fac <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8008b22:	7bfb      	ldrb	r3, [r7, #15]
 8008b24:	2b00      	cmp	r3, #0
 8008b26:	d004      	beq.n	8008b32 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	2202      	movs	r2, #2
 8008b2c:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008b30:	e008      	b.n	8008b44 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	2201      	movs	r2, #1
 8008b36:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008b3a:	e003      	b.n	8008b44 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8008b3c:	6839      	ldr	r1, [r7, #0]
 8008b3e:	6878      	ldr	r0, [r7, #4]
 8008b40:	f000 f96b 	bl	8008e1a <USBD_CtlError>
  }
}
 8008b44:	bf00      	nop
 8008b46:	3710      	adds	r7, #16
 8008b48:	46bd      	mov	sp, r7
 8008b4a:	bd80      	pop	{r7, pc}

08008b4c <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008b4c:	b580      	push	{r7, lr}
 8008b4e:	b082      	sub	sp, #8
 8008b50:	af00      	add	r7, sp, #0
 8008b52:	6078      	str	r0, [r7, #4]
 8008b54:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8008b56:	683b      	ldr	r3, [r7, #0]
 8008b58:	885b      	ldrh	r3, [r3, #2]
 8008b5a:	b2da      	uxtb	r2, r3
 8008b5c:	4b41      	ldr	r3, [pc, #260]	; (8008c64 <USBD_SetConfig+0x118>)
 8008b5e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8008b60:	4b40      	ldr	r3, [pc, #256]	; (8008c64 <USBD_SetConfig+0x118>)
 8008b62:	781b      	ldrb	r3, [r3, #0]
 8008b64:	2b01      	cmp	r3, #1
 8008b66:	d904      	bls.n	8008b72 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8008b68:	6839      	ldr	r1, [r7, #0]
 8008b6a:	6878      	ldr	r0, [r7, #4]
 8008b6c:	f000 f955 	bl	8008e1a <USBD_CtlError>
 8008b70:	e075      	b.n	8008c5e <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8008b78:	2b02      	cmp	r3, #2
 8008b7a:	d002      	beq.n	8008b82 <USBD_SetConfig+0x36>
 8008b7c:	2b03      	cmp	r3, #3
 8008b7e:	d023      	beq.n	8008bc8 <USBD_SetConfig+0x7c>
 8008b80:	e062      	b.n	8008c48 <USBD_SetConfig+0xfc>
    {
    case USBD_STATE_ADDRESSED:
      if (cfgidx)
 8008b82:	4b38      	ldr	r3, [pc, #224]	; (8008c64 <USBD_SetConfig+0x118>)
 8008b84:	781b      	ldrb	r3, [r3, #0]
 8008b86:	2b00      	cmp	r3, #0
 8008b88:	d01a      	beq.n	8008bc0 <USBD_SetConfig+0x74>
      {
        pdev->dev_config = cfgidx;
 8008b8a:	4b36      	ldr	r3, [pc, #216]	; (8008c64 <USBD_SetConfig+0x118>)
 8008b8c:	781b      	ldrb	r3, [r3, #0]
 8008b8e:	461a      	mov	r2, r3
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	605a      	str	r2, [r3, #4]
        pdev->dev_state = USBD_STATE_CONFIGURED;
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	2203      	movs	r2, #3
 8008b98:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
        if(USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8008b9c:	4b31      	ldr	r3, [pc, #196]	; (8008c64 <USBD_SetConfig+0x118>)
 8008b9e:	781b      	ldrb	r3, [r3, #0]
 8008ba0:	4619      	mov	r1, r3
 8008ba2:	6878      	ldr	r0, [r7, #4]
 8008ba4:	f7ff fa29 	bl	8007ffa <USBD_SetClassConfig>
 8008ba8:	4603      	mov	r3, r0
 8008baa:	2b02      	cmp	r3, #2
 8008bac:	d104      	bne.n	8008bb8 <USBD_SetConfig+0x6c>
        {
          USBD_CtlError(pdev, req);
 8008bae:	6839      	ldr	r1, [r7, #0]
 8008bb0:	6878      	ldr	r0, [r7, #4]
 8008bb2:	f000 f932 	bl	8008e1a <USBD_CtlError>
          return;
 8008bb6:	e052      	b.n	8008c5e <USBD_SetConfig+0x112>
        }
        USBD_CtlSendStatus(pdev);
 8008bb8:	6878      	ldr	r0, [r7, #4]
 8008bba:	f000 f9f7 	bl	8008fac <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlSendStatus(pdev);
      }
      break;
 8008bbe:	e04e      	b.n	8008c5e <USBD_SetConfig+0x112>
        USBD_CtlSendStatus(pdev);
 8008bc0:	6878      	ldr	r0, [r7, #4]
 8008bc2:	f000 f9f3 	bl	8008fac <USBD_CtlSendStatus>
      break;
 8008bc6:	e04a      	b.n	8008c5e <USBD_SetConfig+0x112>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8008bc8:	4b26      	ldr	r3, [pc, #152]	; (8008c64 <USBD_SetConfig+0x118>)
 8008bca:	781b      	ldrb	r3, [r3, #0]
 8008bcc:	2b00      	cmp	r3, #0
 8008bce:	d112      	bne.n	8008bf6 <USBD_SetConfig+0xaa>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	2202      	movs	r2, #2
 8008bd4:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
        pdev->dev_config = cfgidx;
 8008bd8:	4b22      	ldr	r3, [pc, #136]	; (8008c64 <USBD_SetConfig+0x118>)
 8008bda:	781b      	ldrb	r3, [r3, #0]
 8008bdc:	461a      	mov	r2, r3
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	605a      	str	r2, [r3, #4]
        USBD_ClrClassConfig(pdev, cfgidx);
 8008be2:	4b20      	ldr	r3, [pc, #128]	; (8008c64 <USBD_SetConfig+0x118>)
 8008be4:	781b      	ldrb	r3, [r3, #0]
 8008be6:	4619      	mov	r1, r3
 8008be8:	6878      	ldr	r0, [r7, #4]
 8008bea:	f7ff fa25 	bl	8008038 <USBD_ClrClassConfig>
        USBD_CtlSendStatus(pdev);
 8008bee:	6878      	ldr	r0, [r7, #4]
 8008bf0:	f000 f9dc 	bl	8008fac <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlSendStatus(pdev);
      }
      break;
 8008bf4:	e033      	b.n	8008c5e <USBD_SetConfig+0x112>
      else if (cfgidx != pdev->dev_config)
 8008bf6:	4b1b      	ldr	r3, [pc, #108]	; (8008c64 <USBD_SetConfig+0x118>)
 8008bf8:	781b      	ldrb	r3, [r3, #0]
 8008bfa:	461a      	mov	r2, r3
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	685b      	ldr	r3, [r3, #4]
 8008c00:	429a      	cmp	r2, r3
 8008c02:	d01d      	beq.n	8008c40 <USBD_SetConfig+0xf4>
        USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	685b      	ldr	r3, [r3, #4]
 8008c08:	b2db      	uxtb	r3, r3
 8008c0a:	4619      	mov	r1, r3
 8008c0c:	6878      	ldr	r0, [r7, #4]
 8008c0e:	f7ff fa13 	bl	8008038 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8008c12:	4b14      	ldr	r3, [pc, #80]	; (8008c64 <USBD_SetConfig+0x118>)
 8008c14:	781b      	ldrb	r3, [r3, #0]
 8008c16:	461a      	mov	r2, r3
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	605a      	str	r2, [r3, #4]
        if(USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8008c1c:	4b11      	ldr	r3, [pc, #68]	; (8008c64 <USBD_SetConfig+0x118>)
 8008c1e:	781b      	ldrb	r3, [r3, #0]
 8008c20:	4619      	mov	r1, r3
 8008c22:	6878      	ldr	r0, [r7, #4]
 8008c24:	f7ff f9e9 	bl	8007ffa <USBD_SetClassConfig>
 8008c28:	4603      	mov	r3, r0
 8008c2a:	2b02      	cmp	r3, #2
 8008c2c:	d104      	bne.n	8008c38 <USBD_SetConfig+0xec>
          USBD_CtlError(pdev, req);
 8008c2e:	6839      	ldr	r1, [r7, #0]
 8008c30:	6878      	ldr	r0, [r7, #4]
 8008c32:	f000 f8f2 	bl	8008e1a <USBD_CtlError>
          return;
 8008c36:	e012      	b.n	8008c5e <USBD_SetConfig+0x112>
        USBD_CtlSendStatus(pdev);
 8008c38:	6878      	ldr	r0, [r7, #4]
 8008c3a:	f000 f9b7 	bl	8008fac <USBD_CtlSendStatus>
      break;
 8008c3e:	e00e      	b.n	8008c5e <USBD_SetConfig+0x112>
        USBD_CtlSendStatus(pdev);
 8008c40:	6878      	ldr	r0, [r7, #4]
 8008c42:	f000 f9b3 	bl	8008fac <USBD_CtlSendStatus>
      break;
 8008c46:	e00a      	b.n	8008c5e <USBD_SetConfig+0x112>

    default:
      USBD_CtlError(pdev, req);
 8008c48:	6839      	ldr	r1, [r7, #0]
 8008c4a:	6878      	ldr	r0, [r7, #4]
 8008c4c:	f000 f8e5 	bl	8008e1a <USBD_CtlError>
      USBD_ClrClassConfig(pdev, cfgidx);
 8008c50:	4b04      	ldr	r3, [pc, #16]	; (8008c64 <USBD_SetConfig+0x118>)
 8008c52:	781b      	ldrb	r3, [r3, #0]
 8008c54:	4619      	mov	r1, r3
 8008c56:	6878      	ldr	r0, [r7, #4]
 8008c58:	f7ff f9ee 	bl	8008038 <USBD_ClrClassConfig>
      break;
 8008c5c:	bf00      	nop
    }
  }
}
 8008c5e:	3708      	adds	r7, #8
 8008c60:	46bd      	mov	sp, r7
 8008c62:	bd80      	pop	{r7, pc}
 8008c64:	20000470 	.word	0x20000470

08008c68 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008c68:	b580      	push	{r7, lr}
 8008c6a:	b082      	sub	sp, #8
 8008c6c:	af00      	add	r7, sp, #0
 8008c6e:	6078      	str	r0, [r7, #4]
 8008c70:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8008c72:	683b      	ldr	r3, [r7, #0]
 8008c74:	88db      	ldrh	r3, [r3, #6]
 8008c76:	2b01      	cmp	r3, #1
 8008c78:	d004      	beq.n	8008c84 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev , req);
 8008c7a:	6839      	ldr	r1, [r7, #0]
 8008c7c:	6878      	ldr	r0, [r7, #4]
 8008c7e:	f000 f8cc 	bl	8008e1a <USBD_CtlError>
    default:
      USBD_CtlError(pdev , req);
      break;
    }
  }
}
 8008c82:	e021      	b.n	8008cc8 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8008c8a:	2b01      	cmp	r3, #1
 8008c8c:	db17      	blt.n	8008cbe <USBD_GetConfig+0x56>
 8008c8e:	2b02      	cmp	r3, #2
 8008c90:	dd02      	ble.n	8008c98 <USBD_GetConfig+0x30>
 8008c92:	2b03      	cmp	r3, #3
 8008c94:	d00b      	beq.n	8008cae <USBD_GetConfig+0x46>
 8008c96:	e012      	b.n	8008cbe <USBD_GetConfig+0x56>
      pdev->dev_default_config = 0U;
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	2200      	movs	r2, #0
 8008c9c:	609a      	str	r2, [r3, #8]
      USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	3308      	adds	r3, #8
 8008ca2:	2201      	movs	r2, #1
 8008ca4:	4619      	mov	r1, r3
 8008ca6:	6878      	ldr	r0, [r7, #4]
 8008ca8:	f000 f922 	bl	8008ef0 <USBD_CtlSendData>
      break;
 8008cac:	e00c      	b.n	8008cc8 <USBD_GetConfig+0x60>
      USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	3304      	adds	r3, #4
 8008cb2:	2201      	movs	r2, #1
 8008cb4:	4619      	mov	r1, r3
 8008cb6:	6878      	ldr	r0, [r7, #4]
 8008cb8:	f000 f91a 	bl	8008ef0 <USBD_CtlSendData>
      break;
 8008cbc:	e004      	b.n	8008cc8 <USBD_GetConfig+0x60>
      USBD_CtlError(pdev , req);
 8008cbe:	6839      	ldr	r1, [r7, #0]
 8008cc0:	6878      	ldr	r0, [r7, #4]
 8008cc2:	f000 f8aa 	bl	8008e1a <USBD_CtlError>
      break;
 8008cc6:	bf00      	nop
}
 8008cc8:	bf00      	nop
 8008cca:	3708      	adds	r7, #8
 8008ccc:	46bd      	mov	sp, r7
 8008cce:	bd80      	pop	{r7, pc}

08008cd0 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008cd0:	b580      	push	{r7, lr}
 8008cd2:	b082      	sub	sp, #8
 8008cd4:	af00      	add	r7, sp, #0
 8008cd6:	6078      	str	r0, [r7, #4]
 8008cd8:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8008ce0:	3b01      	subs	r3, #1
 8008ce2:	2b02      	cmp	r3, #2
 8008ce4:	d81e      	bhi.n	8008d24 <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if(req->wLength != 0x2U)
 8008ce6:	683b      	ldr	r3, [r7, #0]
 8008ce8:	88db      	ldrh	r3, [r3, #6]
 8008cea:	2b02      	cmp	r3, #2
 8008cec:	d004      	beq.n	8008cf8 <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 8008cee:	6839      	ldr	r1, [r7, #0]
 8008cf0:	6878      	ldr	r0, [r7, #4]
 8008cf2:	f000 f892 	bl	8008e1a <USBD_CtlError>
      break;
 8008cf6:	e01a      	b.n	8008d2e <USBD_GetStatus+0x5e>
    }

#if ( USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	2201      	movs	r2, #1
 8008cfc:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup)
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	f8d3 327c 	ldr.w	r3, [r3, #636]	; 0x27c
 8008d04:	2b00      	cmp	r3, #0
 8008d06:	d005      	beq.n	8008d14 <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	68db      	ldr	r3, [r3, #12]
 8008d0c:	f043 0202 	orr.w	r2, r3, #2
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	60da      	str	r2, [r3, #12]
    }

    USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	330c      	adds	r3, #12
 8008d18:	2202      	movs	r2, #2
 8008d1a:	4619      	mov	r1, r3
 8008d1c:	6878      	ldr	r0, [r7, #4]
 8008d1e:	f000 f8e7 	bl	8008ef0 <USBD_CtlSendData>
    break;
 8008d22:	e004      	b.n	8008d2e <USBD_GetStatus+0x5e>

  default :
    USBD_CtlError(pdev , req);
 8008d24:	6839      	ldr	r1, [r7, #0]
 8008d26:	6878      	ldr	r0, [r7, #4]
 8008d28:	f000 f877 	bl	8008e1a <USBD_CtlError>
    break;
 8008d2c:	bf00      	nop
  }
}
 8008d2e:	bf00      	nop
 8008d30:	3708      	adds	r7, #8
 8008d32:	46bd      	mov	sp, r7
 8008d34:	bd80      	pop	{r7, pc}

08008d36 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 8008d36:	b580      	push	{r7, lr}
 8008d38:	b082      	sub	sp, #8
 8008d3a:	af00      	add	r7, sp, #0
 8008d3c:	6078      	str	r0, [r7, #4]
 8008d3e:	6039      	str	r1, [r7, #0]

  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008d40:	683b      	ldr	r3, [r7, #0]
 8008d42:	885b      	ldrh	r3, [r3, #2]
 8008d44:	2b01      	cmp	r3, #1
 8008d46:	d106      	bne.n	8008d56 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	2201      	movs	r2, #1
 8008d4c:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c
    USBD_CtlSendStatus(pdev);
 8008d50:	6878      	ldr	r0, [r7, #4]
 8008d52:	f000 f92b 	bl	8008fac <USBD_CtlSendStatus>
  }

}
 8008d56:	bf00      	nop
 8008d58:	3708      	adds	r7, #8
 8008d5a:	46bd      	mov	sp, r7
 8008d5c:	bd80      	pop	{r7, pc}

08008d5e <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 8008d5e:	b580      	push	{r7, lr}
 8008d60:	b082      	sub	sp, #8
 8008d62:	af00      	add	r7, sp, #0
 8008d64:	6078      	str	r0, [r7, #4]
 8008d66:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8008d6e:	3b01      	subs	r3, #1
 8008d70:	2b02      	cmp	r3, #2
 8008d72:	d80b      	bhi.n	8008d8c <USBD_ClrFeature+0x2e>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008d74:	683b      	ldr	r3, [r7, #0]
 8008d76:	885b      	ldrh	r3, [r3, #2]
 8008d78:	2b01      	cmp	r3, #1
 8008d7a:	d10c      	bne.n	8008d96 <USBD_ClrFeature+0x38>
    {
      pdev->dev_remote_wakeup = 0U;
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	2200      	movs	r2, #0
 8008d80:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c
      USBD_CtlSendStatus(pdev);
 8008d84:	6878      	ldr	r0, [r7, #4]
 8008d86:	f000 f911 	bl	8008fac <USBD_CtlSendStatus>
    }
    break;
 8008d8a:	e004      	b.n	8008d96 <USBD_ClrFeature+0x38>

  default :
     USBD_CtlError(pdev , req);
 8008d8c:	6839      	ldr	r1, [r7, #0]
 8008d8e:	6878      	ldr	r0, [r7, #4]
 8008d90:	f000 f843 	bl	8008e1a <USBD_CtlError>
    break;
 8008d94:	e000      	b.n	8008d98 <USBD_ClrFeature+0x3a>
    break;
 8008d96:	bf00      	nop
  }
}
 8008d98:	bf00      	nop
 8008d9a:	3708      	adds	r7, #8
 8008d9c:	46bd      	mov	sp, r7
 8008d9e:	bd80      	pop	{r7, pc}

08008da0 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8008da0:	b480      	push	{r7}
 8008da2:	b083      	sub	sp, #12
 8008da4:	af00      	add	r7, sp, #0
 8008da6:	6078      	str	r0, [r7, #4]
 8008da8:	6039      	str	r1, [r7, #0]
  req->bmRequest     = *(uint8_t *)  (pdata);
 8008daa:	683b      	ldr	r3, [r7, #0]
 8008dac:	781a      	ldrb	r2, [r3, #0]
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	701a      	strb	r2, [r3, #0]
  req->bRequest      = *(uint8_t *)  (pdata +  1);
 8008db2:	683b      	ldr	r3, [r7, #0]
 8008db4:	785a      	ldrb	r2, [r3, #1]
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	705a      	strb	r2, [r3, #1]
  req->wValue        = SWAPBYTE      (pdata +  2);
 8008dba:	683b      	ldr	r3, [r7, #0]
 8008dbc:	3302      	adds	r3, #2
 8008dbe:	781b      	ldrb	r3, [r3, #0]
 8008dc0:	b29a      	uxth	r2, r3
 8008dc2:	683b      	ldr	r3, [r7, #0]
 8008dc4:	3303      	adds	r3, #3
 8008dc6:	781b      	ldrb	r3, [r3, #0]
 8008dc8:	b29b      	uxth	r3, r3
 8008dca:	021b      	lsls	r3, r3, #8
 8008dcc:	b29b      	uxth	r3, r3
 8008dce:	4413      	add	r3, r2
 8008dd0:	b29a      	uxth	r2, r3
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	805a      	strh	r2, [r3, #2]
  req->wIndex        = SWAPBYTE      (pdata +  4);
 8008dd6:	683b      	ldr	r3, [r7, #0]
 8008dd8:	3304      	adds	r3, #4
 8008dda:	781b      	ldrb	r3, [r3, #0]
 8008ddc:	b29a      	uxth	r2, r3
 8008dde:	683b      	ldr	r3, [r7, #0]
 8008de0:	3305      	adds	r3, #5
 8008de2:	781b      	ldrb	r3, [r3, #0]
 8008de4:	b29b      	uxth	r3, r3
 8008de6:	021b      	lsls	r3, r3, #8
 8008de8:	b29b      	uxth	r3, r3
 8008dea:	4413      	add	r3, r2
 8008dec:	b29a      	uxth	r2, r3
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	809a      	strh	r2, [r3, #4]
  req->wLength       = SWAPBYTE      (pdata +  6);
 8008df2:	683b      	ldr	r3, [r7, #0]
 8008df4:	3306      	adds	r3, #6
 8008df6:	781b      	ldrb	r3, [r3, #0]
 8008df8:	b29a      	uxth	r2, r3
 8008dfa:	683b      	ldr	r3, [r7, #0]
 8008dfc:	3307      	adds	r3, #7
 8008dfe:	781b      	ldrb	r3, [r3, #0]
 8008e00:	b29b      	uxth	r3, r3
 8008e02:	021b      	lsls	r3, r3, #8
 8008e04:	b29b      	uxth	r3, r3
 8008e06:	4413      	add	r3, r2
 8008e08:	b29a      	uxth	r2, r3
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	80da      	strh	r2, [r3, #6]

}
 8008e0e:	bf00      	nop
 8008e10:	370c      	adds	r7, #12
 8008e12:	46bd      	mov	sp, r7
 8008e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e18:	4770      	bx	lr

08008e1a <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError( USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 8008e1a:	b580      	push	{r7, lr}
 8008e1c:	b082      	sub	sp, #8
 8008e1e:	af00      	add	r7, sp, #0
 8008e20:	6078      	str	r0, [r7, #4]
 8008e22:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev , 0x80U);
 8008e24:	2180      	movs	r1, #128	; 0x80
 8008e26:	6878      	ldr	r0, [r7, #4]
 8008e28:	f00f fa02 	bl	8018230 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev , 0U);
 8008e2c:	2100      	movs	r1, #0
 8008e2e:	6878      	ldr	r0, [r7, #4]
 8008e30:	f00f f9fe 	bl	8018230 <USBD_LL_StallEP>
}
 8008e34:	bf00      	nop
 8008e36:	3708      	adds	r7, #8
 8008e38:	46bd      	mov	sp, r7
 8008e3a:	bd80      	pop	{r7, pc}

08008e3c <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8008e3c:	b580      	push	{r7, lr}
 8008e3e:	b086      	sub	sp, #24
 8008e40:	af00      	add	r7, sp, #0
 8008e42:	60f8      	str	r0, [r7, #12]
 8008e44:	60b9      	str	r1, [r7, #8]
 8008e46:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8008e48:	2300      	movs	r3, #0
 8008e4a:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 8008e4c:	68fb      	ldr	r3, [r7, #12]
 8008e4e:	2b00      	cmp	r3, #0
 8008e50:	d032      	beq.n	8008eb8 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8008e52:	68f8      	ldr	r0, [r7, #12]
 8008e54:	f000 f834 	bl	8008ec0 <USBD_GetLen>
 8008e58:	4603      	mov	r3, r0
 8008e5a:	3301      	adds	r3, #1
 8008e5c:	b29b      	uxth	r3, r3
 8008e5e:	005b      	lsls	r3, r3, #1
 8008e60:	b29a      	uxth	r2, r3
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8008e66:	7dfb      	ldrb	r3, [r7, #23]
 8008e68:	1c5a      	adds	r2, r3, #1
 8008e6a:	75fa      	strb	r2, [r7, #23]
 8008e6c:	461a      	mov	r2, r3
 8008e6e:	68bb      	ldr	r3, [r7, #8]
 8008e70:	4413      	add	r3, r2
 8008e72:	687a      	ldr	r2, [r7, #4]
 8008e74:	7812      	ldrb	r2, [r2, #0]
 8008e76:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8008e78:	7dfb      	ldrb	r3, [r7, #23]
 8008e7a:	1c5a      	adds	r2, r3, #1
 8008e7c:	75fa      	strb	r2, [r7, #23]
 8008e7e:	461a      	mov	r2, r3
 8008e80:	68bb      	ldr	r3, [r7, #8]
 8008e82:	4413      	add	r3, r2
 8008e84:	2203      	movs	r2, #3
 8008e86:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8008e88:	e012      	b.n	8008eb0 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 8008e8a:	68fb      	ldr	r3, [r7, #12]
 8008e8c:	1c5a      	adds	r2, r3, #1
 8008e8e:	60fa      	str	r2, [r7, #12]
 8008e90:	7dfa      	ldrb	r2, [r7, #23]
 8008e92:	1c51      	adds	r1, r2, #1
 8008e94:	75f9      	strb	r1, [r7, #23]
 8008e96:	4611      	mov	r1, r2
 8008e98:	68ba      	ldr	r2, [r7, #8]
 8008e9a:	440a      	add	r2, r1
 8008e9c:	781b      	ldrb	r3, [r3, #0]
 8008e9e:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8008ea0:	7dfb      	ldrb	r3, [r7, #23]
 8008ea2:	1c5a      	adds	r2, r3, #1
 8008ea4:	75fa      	strb	r2, [r7, #23]
 8008ea6:	461a      	mov	r2, r3
 8008ea8:	68bb      	ldr	r3, [r7, #8]
 8008eaa:	4413      	add	r3, r2
 8008eac:	2200      	movs	r2, #0
 8008eae:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8008eb0:	68fb      	ldr	r3, [r7, #12]
 8008eb2:	781b      	ldrb	r3, [r3, #0]
 8008eb4:	2b00      	cmp	r3, #0
 8008eb6:	d1e8      	bne.n	8008e8a <USBD_GetString+0x4e>
    }
  }
}
 8008eb8:	bf00      	nop
 8008eba:	3718      	adds	r7, #24
 8008ebc:	46bd      	mov	sp, r7
 8008ebe:	bd80      	pop	{r7, pc}

08008ec0 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8008ec0:	b480      	push	{r7}
 8008ec2:	b085      	sub	sp, #20
 8008ec4:	af00      	add	r7, sp, #0
 8008ec6:	6078      	str	r0, [r7, #4]
    uint8_t  len = 0U;
 8008ec8:	2300      	movs	r3, #0
 8008eca:	73fb      	strb	r3, [r7, #15]

    while (*buf != '\0')
 8008ecc:	e005      	b.n	8008eda <USBD_GetLen+0x1a>
    {
        len++;
 8008ece:	7bfb      	ldrb	r3, [r7, #15]
 8008ed0:	3301      	adds	r3, #1
 8008ed2:	73fb      	strb	r3, [r7, #15]
        buf++;
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	3301      	adds	r3, #1
 8008ed8:	607b      	str	r3, [r7, #4]
    while (*buf != '\0')
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	781b      	ldrb	r3, [r3, #0]
 8008ede:	2b00      	cmp	r3, #0
 8008ee0:	d1f5      	bne.n	8008ece <USBD_GetLen+0xe>
    }

    return len;
 8008ee2:	7bfb      	ldrb	r3, [r7, #15]
}
 8008ee4:	4618      	mov	r0, r3
 8008ee6:	3714      	adds	r7, #20
 8008ee8:	46bd      	mov	sp, r7
 8008eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eee:	4770      	bx	lr

08008ef0 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                     uint16_t len)
{
 8008ef0:	b580      	push	{r7, lr}
 8008ef2:	b084      	sub	sp, #16
 8008ef4:	af00      	add	r7, sp, #0
 8008ef6:	60f8      	str	r0, [r7, #12]
 8008ef8:	60b9      	str	r1, [r7, #8]
 8008efa:	4613      	mov	r3, r2
 8008efc:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8008efe:	68fb      	ldr	r3, [r7, #12]
 8008f00:	2202      	movs	r2, #2
 8008f02:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  pdev->ep_in[0].total_length = len;
 8008f06:	88fa      	ldrh	r2, [r7, #6]
 8008f08:	68fb      	ldr	r3, [r7, #12]
 8008f0a:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8008f0c:	88fa      	ldrh	r2, [r7, #6]
 8008f0e:	68fb      	ldr	r3, [r7, #12]
 8008f10:	621a      	str	r2, [r3, #32]

 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00U, pbuf, len);
 8008f12:	88fb      	ldrh	r3, [r7, #6]
 8008f14:	68ba      	ldr	r2, [r7, #8]
 8008f16:	2100      	movs	r1, #0
 8008f18:	68f8      	ldr	r0, [r7, #12]
 8008f1a:	f00f fa12 	bl	8018342 <USBD_LL_Transmit>

  return USBD_OK;
 8008f1e:	2300      	movs	r3, #0
}
 8008f20:	4618      	mov	r0, r3
 8008f22:	3710      	adds	r7, #16
 8008f24:	46bd      	mov	sp, r7
 8008f26:	bd80      	pop	{r7, pc}

08008f28 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData (USBD_HandleTypeDef *pdev,
                                             uint8_t *pbuf, uint16_t len)
{
 8008f28:	b580      	push	{r7, lr}
 8008f2a:	b084      	sub	sp, #16
 8008f2c:	af00      	add	r7, sp, #0
 8008f2e:	60f8      	str	r0, [r7, #12]
 8008f30:	60b9      	str	r1, [r7, #8]
 8008f32:	4613      	mov	r3, r2
 8008f34:	80fb      	strh	r3, [r7, #6]
 /* Start the next transfer */
  USBD_LL_Transmit (pdev, 0x00U, pbuf, len);
 8008f36:	88fb      	ldrh	r3, [r7, #6]
 8008f38:	68ba      	ldr	r2, [r7, #8]
 8008f3a:	2100      	movs	r1, #0
 8008f3c:	68f8      	ldr	r0, [r7, #12]
 8008f3e:	f00f fa00 	bl	8018342 <USBD_LL_Transmit>

  return USBD_OK;
 8008f42:	2300      	movs	r3, #0
}
 8008f44:	4618      	mov	r0, r3
 8008f46:	3710      	adds	r7, #16
 8008f48:	46bd      	mov	sp, r7
 8008f4a:	bd80      	pop	{r7, pc}

08008f4c <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                      uint16_t len)
{
 8008f4c:	b580      	push	{r7, lr}
 8008f4e:	b084      	sub	sp, #16
 8008f50:	af00      	add	r7, sp, #0
 8008f52:	60f8      	str	r0, [r7, #12]
 8008f54:	60b9      	str	r1, [r7, #8]
 8008f56:	4613      	mov	r3, r2
 8008f58:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8008f5a:	68fb      	ldr	r3, [r7, #12]
 8008f5c:	2203      	movs	r2, #3
 8008f5e:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  pdev->ep_out[0].total_length = len;
 8008f62:	88fa      	ldrh	r2, [r7, #6]
 8008f64:	68fb      	ldr	r3, [r7, #12]
 8008f66:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
  pdev->ep_out[0].rem_length   = len;
 8008f6a:	88fa      	ldrh	r2, [r7, #6]
 8008f6c:	68fb      	ldr	r3, [r7, #12]
 8008f6e:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c

  /* Start the transfer */
  USBD_LL_PrepareReceive (pdev, 0U, pbuf, len);
 8008f72:	88fb      	ldrh	r3, [r7, #6]
 8008f74:	68ba      	ldr	r2, [r7, #8]
 8008f76:	2100      	movs	r1, #0
 8008f78:	68f8      	ldr	r0, [r7, #12]
 8008f7a:	f00f fa05 	bl	8018388 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008f7e:	2300      	movs	r3, #0
}
 8008f80:	4618      	mov	r0, r3
 8008f82:	3710      	adds	r7, #16
 8008f84:	46bd      	mov	sp, r7
 8008f86:	bd80      	pop	{r7, pc}

08008f88 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                       uint16_t len)
{
 8008f88:	b580      	push	{r7, lr}
 8008f8a:	b084      	sub	sp, #16
 8008f8c:	af00      	add	r7, sp, #0
 8008f8e:	60f8      	str	r0, [r7, #12]
 8008f90:	60b9      	str	r1, [r7, #8]
 8008f92:	4613      	mov	r3, r2
 8008f94:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008f96:	88fb      	ldrh	r3, [r7, #6]
 8008f98:	68ba      	ldr	r2, [r7, #8]
 8008f9a:	2100      	movs	r1, #0
 8008f9c:	68f8      	ldr	r0, [r7, #12]
 8008f9e:	f00f f9f3 	bl	8018388 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008fa2:	2300      	movs	r3, #0
}
 8008fa4:	4618      	mov	r0, r3
 8008fa6:	3710      	adds	r7, #16
 8008fa8:	46bd      	mov	sp, r7
 8008faa:	bd80      	pop	{r7, pc}

08008fac <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus (USBD_HandleTypeDef *pdev)
{
 8008fac:	b580      	push	{r7, lr}
 8008fae:	b082      	sub	sp, #8
 8008fb0:	af00      	add	r7, sp, #0
 8008fb2:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	2204      	movs	r2, #4
 8008fb8:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8008fbc:	2300      	movs	r3, #0
 8008fbe:	2200      	movs	r2, #0
 8008fc0:	2100      	movs	r1, #0
 8008fc2:	6878      	ldr	r0, [r7, #4]
 8008fc4:	f00f f9bd 	bl	8018342 <USBD_LL_Transmit>

  return USBD_OK;
 8008fc8:	2300      	movs	r3, #0
}
 8008fca:	4618      	mov	r0, r3
 8008fcc:	3708      	adds	r7, #8
 8008fce:	46bd      	mov	sp, r7
 8008fd0:	bd80      	pop	{r7, pc}

08008fd2 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus (USBD_HandleTypeDef *pdev)
{
 8008fd2:	b580      	push	{r7, lr}
 8008fd4:	b082      	sub	sp, #8
 8008fd6:	af00      	add	r7, sp, #0
 8008fd8:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	2205      	movs	r2, #5
 8008fde:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

 /* Start the transfer */
  USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 8008fe2:	2300      	movs	r3, #0
 8008fe4:	2200      	movs	r2, #0
 8008fe6:	2100      	movs	r1, #0
 8008fe8:	6878      	ldr	r0, [r7, #4]
 8008fea:	f00f f9cd 	bl	8018388 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008fee:	2300      	movs	r3, #0
}
 8008ff0:	4618      	mov	r0, r3
 8008ff2:	3708      	adds	r7, #8
 8008ff4:	46bd      	mov	sp, r7
 8008ff6:	bd80      	pop	{r7, pc}

08008ff8 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8008ff8:	b480      	push	{r7}
 8008ffa:	b085      	sub	sp, #20
 8008ffc:	af00      	add	r7, sp, #0
 8008ffe:	4603      	mov	r3, r0
 8009000:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8009002:	2300      	movs	r3, #0
 8009004:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8009006:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800900a:	2b84      	cmp	r3, #132	; 0x84
 800900c:	d005      	beq.n	800901a <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800900e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8009012:	68fb      	ldr	r3, [r7, #12]
 8009014:	4413      	add	r3, r2
 8009016:	3303      	adds	r3, #3
 8009018:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800901a:	68fb      	ldr	r3, [r7, #12]
}
 800901c:	4618      	mov	r0, r3
 800901e:	3714      	adds	r7, #20
 8009020:	46bd      	mov	sp, r7
 8009022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009026:	4770      	bx	lr

08009028 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8009028:	b480      	push	{r7}
 800902a:	b083      	sub	sp, #12
 800902c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800902e:	f3ef 8305 	mrs	r3, IPSR
 8009032:	607b      	str	r3, [r7, #4]
  return(result);
 8009034:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8009036:	2b00      	cmp	r3, #0
 8009038:	bf14      	ite	ne
 800903a:	2301      	movne	r3, #1
 800903c:	2300      	moveq	r3, #0
 800903e:	b2db      	uxtb	r3, r3
}
 8009040:	4618      	mov	r0, r3
 8009042:	370c      	adds	r7, #12
 8009044:	46bd      	mov	sp, r7
 8009046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800904a:	4770      	bx	lr

0800904c <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800904c:	b580      	push	{r7, lr}
 800904e:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8009050:	f001 fc04 	bl	800a85c <vTaskStartScheduler>
  
  return osOK;
 8009054:	2300      	movs	r3, #0
}
 8009056:	4618      	mov	r0, r3
 8009058:	bd80      	pop	{r7, pc}

0800905a <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 800905a:	b580      	push	{r7, lr}
 800905c:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 800905e:	f7ff ffe3 	bl	8009028 <inHandlerMode>
 8009062:	4603      	mov	r3, r0
 8009064:	2b00      	cmp	r3, #0
 8009066:	d003      	beq.n	8009070 <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 8009068:	f001 fd10 	bl	800aa8c <xTaskGetTickCountFromISR>
 800906c:	4603      	mov	r3, r0
 800906e:	e002      	b.n	8009076 <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 8009070:	f001 fcfc 	bl	800aa6c <xTaskGetTickCount>
 8009074:	4603      	mov	r3, r0
  }
}
 8009076:	4618      	mov	r0, r3
 8009078:	bd80      	pop	{r7, pc}

0800907a <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800907a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800907c:	b089      	sub	sp, #36	; 0x24
 800907e:	af04      	add	r7, sp, #16
 8009080:	6078      	str	r0, [r7, #4]
 8009082:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	695b      	ldr	r3, [r3, #20]
 8009088:	2b00      	cmp	r3, #0
 800908a:	d020      	beq.n	80090ce <osThreadCreate+0x54>
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	699b      	ldr	r3, [r3, #24]
 8009090:	2b00      	cmp	r3, #0
 8009092:	d01c      	beq.n	80090ce <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	685c      	ldr	r4, [r3, #4]
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	681d      	ldr	r5, [r3, #0]
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	691e      	ldr	r6, [r3, #16]
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80090a6:	4618      	mov	r0, r3
 80090a8:	f7ff ffa6 	bl	8008ff8 <makeFreeRtosPriority>
 80090ac:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	695b      	ldr	r3, [r3, #20]
 80090b2:	687a      	ldr	r2, [r7, #4]
 80090b4:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80090b6:	9202      	str	r2, [sp, #8]
 80090b8:	9301      	str	r3, [sp, #4]
 80090ba:	9100      	str	r1, [sp, #0]
 80090bc:	683b      	ldr	r3, [r7, #0]
 80090be:	4632      	mov	r2, r6
 80090c0:	4629      	mov	r1, r5
 80090c2:	4620      	mov	r0, r4
 80090c4:	f001 fa0f 	bl	800a4e6 <xTaskCreateStatic>
 80090c8:	4603      	mov	r3, r0
 80090ca:	60fb      	str	r3, [r7, #12]
 80090cc:	e01c      	b.n	8009108 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	685c      	ldr	r4, [r3, #4]
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80090da:	b29e      	uxth	r6, r3
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80090e2:	4618      	mov	r0, r3
 80090e4:	f7ff ff88 	bl	8008ff8 <makeFreeRtosPriority>
 80090e8:	4602      	mov	r2, r0
 80090ea:	f107 030c 	add.w	r3, r7, #12
 80090ee:	9301      	str	r3, [sp, #4]
 80090f0:	9200      	str	r2, [sp, #0]
 80090f2:	683b      	ldr	r3, [r7, #0]
 80090f4:	4632      	mov	r2, r6
 80090f6:	4629      	mov	r1, r5
 80090f8:	4620      	mov	r0, r4
 80090fa:	f001 fa4d 	bl	800a598 <xTaskCreate>
 80090fe:	4603      	mov	r3, r0
 8009100:	2b01      	cmp	r3, #1
 8009102:	d001      	beq.n	8009108 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8009104:	2300      	movs	r3, #0
 8009106:	e000      	b.n	800910a <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8009108:	68fb      	ldr	r3, [r7, #12]
}
 800910a:	4618      	mov	r0, r3
 800910c:	3714      	adds	r7, #20
 800910e:	46bd      	mov	sp, r7
 8009110:	bdf0      	pop	{r4, r5, r6, r7, pc}

08009112 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8009112:	b580      	push	{r7, lr}
 8009114:	b084      	sub	sp, #16
 8009116:	af00      	add	r7, sp, #0
 8009118:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800911e:	68fb      	ldr	r3, [r7, #12]
 8009120:	2b00      	cmp	r3, #0
 8009122:	d001      	beq.n	8009128 <osDelay+0x16>
 8009124:	68fb      	ldr	r3, [r7, #12]
 8009126:	e000      	b.n	800912a <osDelay+0x18>
 8009128:	2301      	movs	r3, #1
 800912a:	4618      	mov	r0, r3
 800912c:	f001 fb62 	bl	800a7f4 <vTaskDelay>
  
  return osOK;
 8009130:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8009132:	4618      	mov	r0, r3
 8009134:	3710      	adds	r7, #16
 8009136:	46bd      	mov	sp, r7
 8009138:	bd80      	pop	{r7, pc}

0800913a <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 800913a:	b580      	push	{r7, lr}
 800913c:	b082      	sub	sp, #8
 800913e:	af00      	add	r7, sp, #0
 8009140:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	685b      	ldr	r3, [r3, #4]
 8009146:	2b00      	cmp	r3, #0
 8009148:	d007      	beq.n	800915a <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	685b      	ldr	r3, [r3, #4]
 800914e:	4619      	mov	r1, r3
 8009150:	2001      	movs	r0, #1
 8009152:	f000 fc0b 	bl	800996c <xQueueCreateMutexStatic>
 8009156:	4603      	mov	r3, r0
 8009158:	e003      	b.n	8009162 <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 800915a:	2001      	movs	r0, #1
 800915c:	f000 fbee 	bl	800993c <xQueueCreateMutex>
 8009160:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 8009162:	4618      	mov	r0, r3
 8009164:	3708      	adds	r7, #8
 8009166:	46bd      	mov	sp, r7
 8009168:	bd80      	pop	{r7, pc}
	...

0800916c <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 800916c:	b580      	push	{r7, lr}
 800916e:	b084      	sub	sp, #16
 8009170:	af00      	add	r7, sp, #0
 8009172:	6078      	str	r0, [r7, #4]
 8009174:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8009176:	2300      	movs	r3, #0
 8009178:	60bb      	str	r3, [r7, #8]
  
  
  if (mutex_id == NULL) {
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	2b00      	cmp	r3, #0
 800917e:	d101      	bne.n	8009184 <osMutexWait+0x18>
    return osErrorParameter;
 8009180:	2380      	movs	r3, #128	; 0x80
 8009182:	e03a      	b.n	80091fa <osMutexWait+0x8e>
  }
  
  ticks = 0;
 8009184:	2300      	movs	r3, #0
 8009186:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8009188:	683b      	ldr	r3, [r7, #0]
 800918a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800918e:	d103      	bne.n	8009198 <osMutexWait+0x2c>
    ticks = portMAX_DELAY;
 8009190:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009194:	60fb      	str	r3, [r7, #12]
 8009196:	e009      	b.n	80091ac <osMutexWait+0x40>
  }
  else if (millisec != 0) {
 8009198:	683b      	ldr	r3, [r7, #0]
 800919a:	2b00      	cmp	r3, #0
 800919c:	d006      	beq.n	80091ac <osMutexWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 800919e:	683b      	ldr	r3, [r7, #0]
 80091a0:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 80091a2:	68fb      	ldr	r3, [r7, #12]
 80091a4:	2b00      	cmp	r3, #0
 80091a6:	d101      	bne.n	80091ac <osMutexWait+0x40>
      ticks = 1;
 80091a8:	2301      	movs	r3, #1
 80091aa:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 80091ac:	f7ff ff3c 	bl	8009028 <inHandlerMode>
 80091b0:	4603      	mov	r3, r0
 80091b2:	2b00      	cmp	r3, #0
 80091b4:	d017      	beq.n	80091e6 <osMutexWait+0x7a>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 80091b6:	f107 0308 	add.w	r3, r7, #8
 80091ba:	461a      	mov	r2, r3
 80091bc:	2100      	movs	r1, #0
 80091be:	6878      	ldr	r0, [r7, #4]
 80091c0:	f000 ffec 	bl	800a19c <xQueueReceiveFromISR>
 80091c4:	4603      	mov	r3, r0
 80091c6:	2b01      	cmp	r3, #1
 80091c8:	d001      	beq.n	80091ce <osMutexWait+0x62>
      return osErrorOS;
 80091ca:	23ff      	movs	r3, #255	; 0xff
 80091cc:	e015      	b.n	80091fa <osMutexWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 80091ce:	68bb      	ldr	r3, [r7, #8]
 80091d0:	2b00      	cmp	r3, #0
 80091d2:	d011      	beq.n	80091f8 <osMutexWait+0x8c>
 80091d4:	4b0b      	ldr	r3, [pc, #44]	; (8009204 <osMutexWait+0x98>)
 80091d6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80091da:	601a      	str	r2, [r3, #0]
 80091dc:	f3bf 8f4f 	dsb	sy
 80091e0:	f3bf 8f6f 	isb	sy
 80091e4:	e008      	b.n	80091f8 <osMutexWait+0x8c>
  } 
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 80091e6:	68f9      	ldr	r1, [r7, #12]
 80091e8:	6878      	ldr	r0, [r7, #4]
 80091ea:	f000 fecf 	bl	8009f8c <xQueueSemaphoreTake>
 80091ee:	4603      	mov	r3, r0
 80091f0:	2b01      	cmp	r3, #1
 80091f2:	d001      	beq.n	80091f8 <osMutexWait+0x8c>
    return osErrorOS;
 80091f4:	23ff      	movs	r3, #255	; 0xff
 80091f6:	e000      	b.n	80091fa <osMutexWait+0x8e>
  }
  
  return osOK;
 80091f8:	2300      	movs	r3, #0
}
 80091fa:	4618      	mov	r0, r3
 80091fc:	3710      	adds	r7, #16
 80091fe:	46bd      	mov	sp, r7
 8009200:	bd80      	pop	{r7, pc}
 8009202:	bf00      	nop
 8009204:	e000ed04 	.word	0xe000ed04

08009208 <osMutexRelease>:
* @param mutex_id      mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
 8009208:	b580      	push	{r7, lr}
 800920a:	b084      	sub	sp, #16
 800920c:	af00      	add	r7, sp, #0
 800920e:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8009210:	2300      	movs	r3, #0
 8009212:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8009214:	2300      	movs	r3, #0
 8009216:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode()) {
 8009218:	f7ff ff06 	bl	8009028 <inHandlerMode>
 800921c:	4603      	mov	r3, r0
 800921e:	2b00      	cmp	r3, #0
 8009220:	d016      	beq.n	8009250 <osMutexRelease+0x48>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 8009222:	f107 0308 	add.w	r3, r7, #8
 8009226:	4619      	mov	r1, r3
 8009228:	6878      	ldr	r0, [r7, #4]
 800922a:	f000 fd49 	bl	8009cc0 <xQueueGiveFromISR>
 800922e:	4603      	mov	r3, r0
 8009230:	2b01      	cmp	r3, #1
 8009232:	d001      	beq.n	8009238 <osMutexRelease+0x30>
      return osErrorOS;
 8009234:	23ff      	movs	r3, #255	; 0xff
 8009236:	e017      	b.n	8009268 <osMutexRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8009238:	68bb      	ldr	r3, [r7, #8]
 800923a:	2b00      	cmp	r3, #0
 800923c:	d013      	beq.n	8009266 <osMutexRelease+0x5e>
 800923e:	4b0c      	ldr	r3, [pc, #48]	; (8009270 <osMutexRelease+0x68>)
 8009240:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009244:	601a      	str	r2, [r3, #0]
 8009246:	f3bf 8f4f 	dsb	sy
 800924a:	f3bf 8f6f 	isb	sy
 800924e:	e00a      	b.n	8009266 <osMutexRelease+0x5e>
  }
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 8009250:	2300      	movs	r3, #0
 8009252:	2200      	movs	r2, #0
 8009254:	2100      	movs	r1, #0
 8009256:	6878      	ldr	r0, [r7, #4]
 8009258:	f000 fba4 	bl	80099a4 <xQueueGenericSend>
 800925c:	4603      	mov	r3, r0
 800925e:	2b01      	cmp	r3, #1
 8009260:	d001      	beq.n	8009266 <osMutexRelease+0x5e>
  {
    result = osErrorOS;
 8009262:	23ff      	movs	r3, #255	; 0xff
 8009264:	60fb      	str	r3, [r7, #12]
  }
  return result;
 8009266:	68fb      	ldr	r3, [r7, #12]
}
 8009268:	4618      	mov	r0, r3
 800926a:	3710      	adds	r7, #16
 800926c:	46bd      	mov	sp, r7
 800926e:	bd80      	pop	{r7, pc}
 8009270:	e000ed04 	.word	0xe000ed04

08009274 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 8009274:	b580      	push	{r7, lr}
 8009276:	b086      	sub	sp, #24
 8009278:	af02      	add	r7, sp, #8
 800927a:	6078      	str	r0, [r7, #4]
 800927c:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	685b      	ldr	r3, [r3, #4]
 8009282:	2b00      	cmp	r3, #0
 8009284:	d010      	beq.n	80092a8 <osSemaphoreCreate+0x34>
    if (count == 1) {
 8009286:	683b      	ldr	r3, [r7, #0]
 8009288:	2b01      	cmp	r3, #1
 800928a:	d10b      	bne.n	80092a4 <osSemaphoreCreate+0x30>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	685a      	ldr	r2, [r3, #4]
 8009290:	2303      	movs	r3, #3
 8009292:	9300      	str	r3, [sp, #0]
 8009294:	4613      	mov	r3, r2
 8009296:	2200      	movs	r2, #0
 8009298:	2100      	movs	r1, #0
 800929a:	2001      	movs	r0, #1
 800929c:	f000 fa66 	bl	800976c <xQueueGenericCreateStatic>
 80092a0:	4603      	mov	r3, r0
 80092a2:	e016      	b.n	80092d2 <osSemaphoreCreate+0x5e>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 80092a4:	2300      	movs	r3, #0
 80092a6:	e014      	b.n	80092d2 <osSemaphoreCreate+0x5e>
#endif
    }
  }
  else {
    if (count == 1) {
 80092a8:	683b      	ldr	r3, [r7, #0]
 80092aa:	2b01      	cmp	r3, #1
 80092ac:	d110      	bne.n	80092d0 <osSemaphoreCreate+0x5c>
      vSemaphoreCreateBinary(sema);
 80092ae:	2203      	movs	r2, #3
 80092b0:	2100      	movs	r1, #0
 80092b2:	2001      	movs	r0, #1
 80092b4:	f000 facc 	bl	8009850 <xQueueGenericCreate>
 80092b8:	60f8      	str	r0, [r7, #12]
 80092ba:	68fb      	ldr	r3, [r7, #12]
 80092bc:	2b00      	cmp	r3, #0
 80092be:	d005      	beq.n	80092cc <osSemaphoreCreate+0x58>
 80092c0:	2300      	movs	r3, #0
 80092c2:	2200      	movs	r2, #0
 80092c4:	2100      	movs	r1, #0
 80092c6:	68f8      	ldr	r0, [r7, #12]
 80092c8:	f000 fb6c 	bl	80099a4 <xQueueGenericSend>
      return sema;
 80092cc:	68fb      	ldr	r3, [r7, #12]
 80092ce:	e000      	b.n	80092d2 <osSemaphoreCreate+0x5e>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 80092d0:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 80092d2:	4618      	mov	r0, r3
 80092d4:	3710      	adds	r7, #16
 80092d6:	46bd      	mov	sp, r7
 80092d8:	bd80      	pop	{r7, pc}
	...

080092dc <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 80092dc:	b580      	push	{r7, lr}
 80092de:	b084      	sub	sp, #16
 80092e0:	af00      	add	r7, sp, #0
 80092e2:	6078      	str	r0, [r7, #4]
 80092e4:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 80092e6:	2300      	movs	r3, #0
 80092e8:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	2b00      	cmp	r3, #0
 80092ee:	d101      	bne.n	80092f4 <osSemaphoreWait+0x18>
    return osErrorParameter;
 80092f0:	2380      	movs	r3, #128	; 0x80
 80092f2:	e03a      	b.n	800936a <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 80092f4:	2300      	movs	r3, #0
 80092f6:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 80092f8:	683b      	ldr	r3, [r7, #0]
 80092fa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80092fe:	d103      	bne.n	8009308 <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 8009300:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009304:	60fb      	str	r3, [r7, #12]
 8009306:	e009      	b.n	800931c <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 8009308:	683b      	ldr	r3, [r7, #0]
 800930a:	2b00      	cmp	r3, #0
 800930c:	d006      	beq.n	800931c <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 800930e:	683b      	ldr	r3, [r7, #0]
 8009310:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 8009312:	68fb      	ldr	r3, [r7, #12]
 8009314:	2b00      	cmp	r3, #0
 8009316:	d101      	bne.n	800931c <osSemaphoreWait+0x40>
      ticks = 1;
 8009318:	2301      	movs	r3, #1
 800931a:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 800931c:	f7ff fe84 	bl	8009028 <inHandlerMode>
 8009320:	4603      	mov	r3, r0
 8009322:	2b00      	cmp	r3, #0
 8009324:	d017      	beq.n	8009356 <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8009326:	f107 0308 	add.w	r3, r7, #8
 800932a:	461a      	mov	r2, r3
 800932c:	2100      	movs	r1, #0
 800932e:	6878      	ldr	r0, [r7, #4]
 8009330:	f000 ff34 	bl	800a19c <xQueueReceiveFromISR>
 8009334:	4603      	mov	r3, r0
 8009336:	2b01      	cmp	r3, #1
 8009338:	d001      	beq.n	800933e <osSemaphoreWait+0x62>
      return osErrorOS;
 800933a:	23ff      	movs	r3, #255	; 0xff
 800933c:	e015      	b.n	800936a <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 800933e:	68bb      	ldr	r3, [r7, #8]
 8009340:	2b00      	cmp	r3, #0
 8009342:	d011      	beq.n	8009368 <osSemaphoreWait+0x8c>
 8009344:	4b0b      	ldr	r3, [pc, #44]	; (8009374 <osSemaphoreWait+0x98>)
 8009346:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800934a:	601a      	str	r2, [r3, #0]
 800934c:	f3bf 8f4f 	dsb	sy
 8009350:	f3bf 8f6f 	isb	sy
 8009354:	e008      	b.n	8009368 <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 8009356:	68f9      	ldr	r1, [r7, #12]
 8009358:	6878      	ldr	r0, [r7, #4]
 800935a:	f000 fe17 	bl	8009f8c <xQueueSemaphoreTake>
 800935e:	4603      	mov	r3, r0
 8009360:	2b01      	cmp	r3, #1
 8009362:	d001      	beq.n	8009368 <osSemaphoreWait+0x8c>
    return osErrorOS;
 8009364:	23ff      	movs	r3, #255	; 0xff
 8009366:	e000      	b.n	800936a <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 8009368:	2300      	movs	r3, #0
}
 800936a:	4618      	mov	r0, r3
 800936c:	3710      	adds	r7, #16
 800936e:	46bd      	mov	sp, r7
 8009370:	bd80      	pop	{r7, pc}
 8009372:	bf00      	nop
 8009374:	e000ed04 	.word	0xe000ed04

08009378 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 8009378:	b590      	push	{r4, r7, lr}
 800937a:	b085      	sub	sp, #20
 800937c:	af02      	add	r7, sp, #8
 800937e:	6078      	str	r0, [r7, #4]
 8009380:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	689b      	ldr	r3, [r3, #8]
 8009386:	2b00      	cmp	r3, #0
 8009388:	d012      	beq.n	80093b0 <osMessageCreate+0x38>
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	68db      	ldr	r3, [r3, #12]
 800938e:	2b00      	cmp	r3, #0
 8009390:	d00e      	beq.n	80093b0 <osMessageCreate+0x38>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	6818      	ldr	r0, [r3, #0]
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	6859      	ldr	r1, [r3, #4]
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	689a      	ldr	r2, [r3, #8]
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	68dc      	ldr	r4, [r3, #12]
 80093a2:	2300      	movs	r3, #0
 80093a4:	9300      	str	r3, [sp, #0]
 80093a6:	4623      	mov	r3, r4
 80093a8:	f000 f9e0 	bl	800976c <xQueueGenericCreateStatic>
 80093ac:	4603      	mov	r3, r0
 80093ae:	e008      	b.n	80093c2 <osMessageCreate+0x4a>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	6818      	ldr	r0, [r3, #0]
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	685b      	ldr	r3, [r3, #4]
 80093b8:	2200      	movs	r2, #0
 80093ba:	4619      	mov	r1, r3
 80093bc:	f000 fa48 	bl	8009850 <xQueueGenericCreate>
 80093c0:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 80093c2:	4618      	mov	r0, r3
 80093c4:	370c      	adds	r7, #12
 80093c6:	46bd      	mov	sp, r7
 80093c8:	bd90      	pop	{r4, r7, pc}
	...

080093cc <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 80093cc:	b580      	push	{r7, lr}
 80093ce:	b086      	sub	sp, #24
 80093d0:	af00      	add	r7, sp, #0
 80093d2:	60f8      	str	r0, [r7, #12]
 80093d4:	60b9      	str	r1, [r7, #8]
 80093d6:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 80093d8:	2300      	movs	r3, #0
 80093da:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 80093e0:	697b      	ldr	r3, [r7, #20]
 80093e2:	2b00      	cmp	r3, #0
 80093e4:	d101      	bne.n	80093ea <osMessagePut+0x1e>
    ticks = 1;
 80093e6:	2301      	movs	r3, #1
 80093e8:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 80093ea:	f7ff fe1d 	bl	8009028 <inHandlerMode>
 80093ee:	4603      	mov	r3, r0
 80093f0:	2b00      	cmp	r3, #0
 80093f2:	d018      	beq.n	8009426 <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 80093f4:	f107 0210 	add.w	r2, r7, #16
 80093f8:	f107 0108 	add.w	r1, r7, #8
 80093fc:	2300      	movs	r3, #0
 80093fe:	68f8      	ldr	r0, [r7, #12]
 8009400:	f000 fbca 	bl	8009b98 <xQueueGenericSendFromISR>
 8009404:	4603      	mov	r3, r0
 8009406:	2b01      	cmp	r3, #1
 8009408:	d001      	beq.n	800940e <osMessagePut+0x42>
      return osErrorOS;
 800940a:	23ff      	movs	r3, #255	; 0xff
 800940c:	e018      	b.n	8009440 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800940e:	693b      	ldr	r3, [r7, #16]
 8009410:	2b00      	cmp	r3, #0
 8009412:	d014      	beq.n	800943e <osMessagePut+0x72>
 8009414:	4b0c      	ldr	r3, [pc, #48]	; (8009448 <osMessagePut+0x7c>)
 8009416:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800941a:	601a      	str	r2, [r3, #0]
 800941c:	f3bf 8f4f 	dsb	sy
 8009420:	f3bf 8f6f 	isb	sy
 8009424:	e00b      	b.n	800943e <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 8009426:	f107 0108 	add.w	r1, r7, #8
 800942a:	2300      	movs	r3, #0
 800942c:	697a      	ldr	r2, [r7, #20]
 800942e:	68f8      	ldr	r0, [r7, #12]
 8009430:	f000 fab8 	bl	80099a4 <xQueueGenericSend>
 8009434:	4603      	mov	r3, r0
 8009436:	2b01      	cmp	r3, #1
 8009438:	d001      	beq.n	800943e <osMessagePut+0x72>
      return osErrorOS;
 800943a:	23ff      	movs	r3, #255	; 0xff
 800943c:	e000      	b.n	8009440 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 800943e:	2300      	movs	r3, #0
}
 8009440:	4618      	mov	r0, r3
 8009442:	3718      	adds	r7, #24
 8009444:	46bd      	mov	sp, r7
 8009446:	bd80      	pop	{r7, pc}
 8009448:	e000ed04 	.word	0xe000ed04

0800944c <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 800944c:	b590      	push	{r4, r7, lr}
 800944e:	b08b      	sub	sp, #44	; 0x2c
 8009450:	af00      	add	r7, sp, #0
 8009452:	60f8      	str	r0, [r7, #12]
 8009454:	60b9      	str	r1, [r7, #8]
 8009456:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 8009458:	68bb      	ldr	r3, [r7, #8]
 800945a:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 800945c:	2300      	movs	r3, #0
 800945e:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 8009460:	68bb      	ldr	r3, [r7, #8]
 8009462:	2b00      	cmp	r3, #0
 8009464:	d10a      	bne.n	800947c <osMessageGet+0x30>
    event.status = osErrorParameter;
 8009466:	2380      	movs	r3, #128	; 0x80
 8009468:	617b      	str	r3, [r7, #20]
    return event;
 800946a:	68fb      	ldr	r3, [r7, #12]
 800946c:	461c      	mov	r4, r3
 800946e:	f107 0314 	add.w	r3, r7, #20
 8009472:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8009476:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800947a:	e054      	b.n	8009526 <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 800947c:	2300      	movs	r3, #0
 800947e:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 8009480:	2300      	movs	r3, #0
 8009482:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800948a:	d103      	bne.n	8009494 <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 800948c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009490:	627b      	str	r3, [r7, #36]	; 0x24
 8009492:	e009      	b.n	80094a8 <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	2b00      	cmp	r3, #0
 8009498:	d006      	beq.n	80094a8 <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 800949e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094a0:	2b00      	cmp	r3, #0
 80094a2:	d101      	bne.n	80094a8 <osMessageGet+0x5c>
      ticks = 1;
 80094a4:	2301      	movs	r3, #1
 80094a6:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 80094a8:	f7ff fdbe 	bl	8009028 <inHandlerMode>
 80094ac:	4603      	mov	r3, r0
 80094ae:	2b00      	cmp	r3, #0
 80094b0:	d01c      	beq.n	80094ec <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 80094b2:	f107 0220 	add.w	r2, r7, #32
 80094b6:	f107 0314 	add.w	r3, r7, #20
 80094ba:	3304      	adds	r3, #4
 80094bc:	4619      	mov	r1, r3
 80094be:	68b8      	ldr	r0, [r7, #8]
 80094c0:	f000 fe6c 	bl	800a19c <xQueueReceiveFromISR>
 80094c4:	4603      	mov	r3, r0
 80094c6:	2b01      	cmp	r3, #1
 80094c8:	d102      	bne.n	80094d0 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 80094ca:	2310      	movs	r3, #16
 80094cc:	617b      	str	r3, [r7, #20]
 80094ce:	e001      	b.n	80094d4 <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 80094d0:	2300      	movs	r3, #0
 80094d2:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 80094d4:	6a3b      	ldr	r3, [r7, #32]
 80094d6:	2b00      	cmp	r3, #0
 80094d8:	d01d      	beq.n	8009516 <osMessageGet+0xca>
 80094da:	4b15      	ldr	r3, [pc, #84]	; (8009530 <osMessageGet+0xe4>)
 80094dc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80094e0:	601a      	str	r2, [r3, #0]
 80094e2:	f3bf 8f4f 	dsb	sy
 80094e6:	f3bf 8f6f 	isb	sy
 80094ea:	e014      	b.n	8009516 <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 80094ec:	f107 0314 	add.w	r3, r7, #20
 80094f0:	3304      	adds	r3, #4
 80094f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80094f4:	4619      	mov	r1, r3
 80094f6:	68b8      	ldr	r0, [r7, #8]
 80094f8:	f000 fc6c 	bl	8009dd4 <xQueueReceive>
 80094fc:	4603      	mov	r3, r0
 80094fe:	2b01      	cmp	r3, #1
 8009500:	d102      	bne.n	8009508 <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 8009502:	2310      	movs	r3, #16
 8009504:	617b      	str	r3, [r7, #20]
 8009506:	e006      	b.n	8009516 <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 8009508:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800950a:	2b00      	cmp	r3, #0
 800950c:	d101      	bne.n	8009512 <osMessageGet+0xc6>
 800950e:	2300      	movs	r3, #0
 8009510:	e000      	b.n	8009514 <osMessageGet+0xc8>
 8009512:	2340      	movs	r3, #64	; 0x40
 8009514:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 8009516:	68fb      	ldr	r3, [r7, #12]
 8009518:	461c      	mov	r4, r3
 800951a:	f107 0314 	add.w	r3, r7, #20
 800951e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8009522:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8009526:	68f8      	ldr	r0, [r7, #12]
 8009528:	372c      	adds	r7, #44	; 0x2c
 800952a:	46bd      	mov	sp, r7
 800952c:	bd90      	pop	{r4, r7, pc}
 800952e:	bf00      	nop
 8009530:	e000ed04 	.word	0xe000ed04

08009534 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8009534:	b480      	push	{r7}
 8009536:	b083      	sub	sp, #12
 8009538:	af00      	add	r7, sp, #0
 800953a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	f103 0208 	add.w	r2, r3, #8
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800954c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	f103 0208 	add.w	r2, r3, #8
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	f103 0208 	add.w	r2, r3, #8
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	2200      	movs	r2, #0
 8009566:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8009568:	bf00      	nop
 800956a:	370c      	adds	r7, #12
 800956c:	46bd      	mov	sp, r7
 800956e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009572:	4770      	bx	lr

08009574 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8009574:	b480      	push	{r7}
 8009576:	b083      	sub	sp, #12
 8009578:	af00      	add	r7, sp, #0
 800957a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	2200      	movs	r2, #0
 8009580:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8009582:	bf00      	nop
 8009584:	370c      	adds	r7, #12
 8009586:	46bd      	mov	sp, r7
 8009588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800958c:	4770      	bx	lr

0800958e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800958e:	b480      	push	{r7}
 8009590:	b085      	sub	sp, #20
 8009592:	af00      	add	r7, sp, #0
 8009594:	6078      	str	r0, [r7, #4]
 8009596:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	685b      	ldr	r3, [r3, #4]
 800959c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800959e:	683b      	ldr	r3, [r7, #0]
 80095a0:	68fa      	ldr	r2, [r7, #12]
 80095a2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80095a4:	68fb      	ldr	r3, [r7, #12]
 80095a6:	689a      	ldr	r2, [r3, #8]
 80095a8:	683b      	ldr	r3, [r7, #0]
 80095aa:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80095ac:	68fb      	ldr	r3, [r7, #12]
 80095ae:	689b      	ldr	r3, [r3, #8]
 80095b0:	683a      	ldr	r2, [r7, #0]
 80095b2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80095b4:	68fb      	ldr	r3, [r7, #12]
 80095b6:	683a      	ldr	r2, [r7, #0]
 80095b8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80095ba:	683b      	ldr	r3, [r7, #0]
 80095bc:	687a      	ldr	r2, [r7, #4]
 80095be:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	681b      	ldr	r3, [r3, #0]
 80095c4:	1c5a      	adds	r2, r3, #1
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	601a      	str	r2, [r3, #0]
}
 80095ca:	bf00      	nop
 80095cc:	3714      	adds	r7, #20
 80095ce:	46bd      	mov	sp, r7
 80095d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095d4:	4770      	bx	lr

080095d6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80095d6:	b480      	push	{r7}
 80095d8:	b085      	sub	sp, #20
 80095da:	af00      	add	r7, sp, #0
 80095dc:	6078      	str	r0, [r7, #4]
 80095de:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80095e0:	683b      	ldr	r3, [r7, #0]
 80095e2:	681b      	ldr	r3, [r3, #0]
 80095e4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80095e6:	68bb      	ldr	r3, [r7, #8]
 80095e8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80095ec:	d103      	bne.n	80095f6 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	691b      	ldr	r3, [r3, #16]
 80095f2:	60fb      	str	r3, [r7, #12]
 80095f4:	e00c      	b.n	8009610 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	3308      	adds	r3, #8
 80095fa:	60fb      	str	r3, [r7, #12]
 80095fc:	e002      	b.n	8009604 <vListInsert+0x2e>
 80095fe:	68fb      	ldr	r3, [r7, #12]
 8009600:	685b      	ldr	r3, [r3, #4]
 8009602:	60fb      	str	r3, [r7, #12]
 8009604:	68fb      	ldr	r3, [r7, #12]
 8009606:	685b      	ldr	r3, [r3, #4]
 8009608:	681b      	ldr	r3, [r3, #0]
 800960a:	68ba      	ldr	r2, [r7, #8]
 800960c:	429a      	cmp	r2, r3
 800960e:	d2f6      	bcs.n	80095fe <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8009610:	68fb      	ldr	r3, [r7, #12]
 8009612:	685a      	ldr	r2, [r3, #4]
 8009614:	683b      	ldr	r3, [r7, #0]
 8009616:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8009618:	683b      	ldr	r3, [r7, #0]
 800961a:	685b      	ldr	r3, [r3, #4]
 800961c:	683a      	ldr	r2, [r7, #0]
 800961e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8009620:	683b      	ldr	r3, [r7, #0]
 8009622:	68fa      	ldr	r2, [r7, #12]
 8009624:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8009626:	68fb      	ldr	r3, [r7, #12]
 8009628:	683a      	ldr	r2, [r7, #0]
 800962a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800962c:	683b      	ldr	r3, [r7, #0]
 800962e:	687a      	ldr	r2, [r7, #4]
 8009630:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	681b      	ldr	r3, [r3, #0]
 8009636:	1c5a      	adds	r2, r3, #1
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	601a      	str	r2, [r3, #0]
}
 800963c:	bf00      	nop
 800963e:	3714      	adds	r7, #20
 8009640:	46bd      	mov	sp, r7
 8009642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009646:	4770      	bx	lr

08009648 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8009648:	b480      	push	{r7}
 800964a:	b085      	sub	sp, #20
 800964c:	af00      	add	r7, sp, #0
 800964e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	691b      	ldr	r3, [r3, #16]
 8009654:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	685b      	ldr	r3, [r3, #4]
 800965a:	687a      	ldr	r2, [r7, #4]
 800965c:	6892      	ldr	r2, [r2, #8]
 800965e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	689b      	ldr	r3, [r3, #8]
 8009664:	687a      	ldr	r2, [r7, #4]
 8009666:	6852      	ldr	r2, [r2, #4]
 8009668:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800966a:	68fb      	ldr	r3, [r7, #12]
 800966c:	685b      	ldr	r3, [r3, #4]
 800966e:	687a      	ldr	r2, [r7, #4]
 8009670:	429a      	cmp	r2, r3
 8009672:	d103      	bne.n	800967c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	689a      	ldr	r2, [r3, #8]
 8009678:	68fb      	ldr	r3, [r7, #12]
 800967a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	2200      	movs	r2, #0
 8009680:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8009682:	68fb      	ldr	r3, [r7, #12]
 8009684:	681b      	ldr	r3, [r3, #0]
 8009686:	1e5a      	subs	r2, r3, #1
 8009688:	68fb      	ldr	r3, [r7, #12]
 800968a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800968c:	68fb      	ldr	r3, [r7, #12]
 800968e:	681b      	ldr	r3, [r3, #0]
}
 8009690:	4618      	mov	r0, r3
 8009692:	3714      	adds	r7, #20
 8009694:	46bd      	mov	sp, r7
 8009696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800969a:	4770      	bx	lr

0800969c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800969c:	b580      	push	{r7, lr}
 800969e:	b084      	sub	sp, #16
 80096a0:	af00      	add	r7, sp, #0
 80096a2:	6078      	str	r0, [r7, #4]
 80096a4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80096aa:	68fb      	ldr	r3, [r7, #12]
 80096ac:	2b00      	cmp	r3, #0
 80096ae:	d109      	bne.n	80096c4 <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80096b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096b4:	f383 8811 	msr	BASEPRI, r3
 80096b8:	f3bf 8f6f 	isb	sy
 80096bc:	f3bf 8f4f 	dsb	sy
 80096c0:	60bb      	str	r3, [r7, #8]
 80096c2:	e7fe      	b.n	80096c2 <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 80096c4:	f002 f852 	bl	800b76c <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 80096c8:	68fb      	ldr	r3, [r7, #12]
 80096ca:	681a      	ldr	r2, [r3, #0]
 80096cc:	68fb      	ldr	r3, [r7, #12]
 80096ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80096d0:	68f9      	ldr	r1, [r7, #12]
 80096d2:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80096d4:	fb01 f303 	mul.w	r3, r1, r3
 80096d8:	441a      	add	r2, r3
 80096da:	68fb      	ldr	r3, [r7, #12]
 80096dc:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80096de:	68fb      	ldr	r3, [r7, #12]
 80096e0:	2200      	movs	r2, #0
 80096e2:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80096e4:	68fb      	ldr	r3, [r7, #12]
 80096e6:	681a      	ldr	r2, [r3, #0]
 80096e8:	68fb      	ldr	r3, [r7, #12]
 80096ea:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 80096ec:	68fb      	ldr	r3, [r7, #12]
 80096ee:	681a      	ldr	r2, [r3, #0]
 80096f0:	68fb      	ldr	r3, [r7, #12]
 80096f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80096f4:	3b01      	subs	r3, #1
 80096f6:	68f9      	ldr	r1, [r7, #12]
 80096f8:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80096fa:	fb01 f303 	mul.w	r3, r1, r3
 80096fe:	441a      	add	r2, r3
 8009700:	68fb      	ldr	r3, [r7, #12]
 8009702:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8009704:	68fb      	ldr	r3, [r7, #12]
 8009706:	22ff      	movs	r2, #255	; 0xff
 8009708:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800970c:	68fb      	ldr	r3, [r7, #12]
 800970e:	22ff      	movs	r2, #255	; 0xff
 8009710:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8009714:	683b      	ldr	r3, [r7, #0]
 8009716:	2b00      	cmp	r3, #0
 8009718:	d114      	bne.n	8009744 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800971a:	68fb      	ldr	r3, [r7, #12]
 800971c:	691b      	ldr	r3, [r3, #16]
 800971e:	2b00      	cmp	r3, #0
 8009720:	d01a      	beq.n	8009758 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009722:	68fb      	ldr	r3, [r7, #12]
 8009724:	3310      	adds	r3, #16
 8009726:	4618      	mov	r0, r3
 8009728:	f001 fafc 	bl	800ad24 <xTaskRemoveFromEventList>
 800972c:	4603      	mov	r3, r0
 800972e:	2b00      	cmp	r3, #0
 8009730:	d012      	beq.n	8009758 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8009732:	4b0d      	ldr	r3, [pc, #52]	; (8009768 <xQueueGenericReset+0xcc>)
 8009734:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009738:	601a      	str	r2, [r3, #0]
 800973a:	f3bf 8f4f 	dsb	sy
 800973e:	f3bf 8f6f 	isb	sy
 8009742:	e009      	b.n	8009758 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8009744:	68fb      	ldr	r3, [r7, #12]
 8009746:	3310      	adds	r3, #16
 8009748:	4618      	mov	r0, r3
 800974a:	f7ff fef3 	bl	8009534 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800974e:	68fb      	ldr	r3, [r7, #12]
 8009750:	3324      	adds	r3, #36	; 0x24
 8009752:	4618      	mov	r0, r3
 8009754:	f7ff feee 	bl	8009534 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8009758:	f002 f836 	bl	800b7c8 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800975c:	2301      	movs	r3, #1
}
 800975e:	4618      	mov	r0, r3
 8009760:	3710      	adds	r7, #16
 8009762:	46bd      	mov	sp, r7
 8009764:	bd80      	pop	{r7, pc}
 8009766:	bf00      	nop
 8009768:	e000ed04 	.word	0xe000ed04

0800976c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800976c:	b580      	push	{r7, lr}
 800976e:	b08e      	sub	sp, #56	; 0x38
 8009770:	af02      	add	r7, sp, #8
 8009772:	60f8      	str	r0, [r7, #12]
 8009774:	60b9      	str	r1, [r7, #8]
 8009776:	607a      	str	r2, [r7, #4]
 8009778:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800977a:	68fb      	ldr	r3, [r7, #12]
 800977c:	2b00      	cmp	r3, #0
 800977e:	d109      	bne.n	8009794 <xQueueGenericCreateStatic+0x28>
 8009780:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009784:	f383 8811 	msr	BASEPRI, r3
 8009788:	f3bf 8f6f 	isb	sy
 800978c:	f3bf 8f4f 	dsb	sy
 8009790:	62bb      	str	r3, [r7, #40]	; 0x28
 8009792:	e7fe      	b.n	8009792 <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8009794:	683b      	ldr	r3, [r7, #0]
 8009796:	2b00      	cmp	r3, #0
 8009798:	d109      	bne.n	80097ae <xQueueGenericCreateStatic+0x42>
 800979a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800979e:	f383 8811 	msr	BASEPRI, r3
 80097a2:	f3bf 8f6f 	isb	sy
 80097a6:	f3bf 8f4f 	dsb	sy
 80097aa:	627b      	str	r3, [r7, #36]	; 0x24
 80097ac:	e7fe      	b.n	80097ac <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80097ae:	687b      	ldr	r3, [r7, #4]
 80097b0:	2b00      	cmp	r3, #0
 80097b2:	d002      	beq.n	80097ba <xQueueGenericCreateStatic+0x4e>
 80097b4:	68bb      	ldr	r3, [r7, #8]
 80097b6:	2b00      	cmp	r3, #0
 80097b8:	d001      	beq.n	80097be <xQueueGenericCreateStatic+0x52>
 80097ba:	2301      	movs	r3, #1
 80097bc:	e000      	b.n	80097c0 <xQueueGenericCreateStatic+0x54>
 80097be:	2300      	movs	r3, #0
 80097c0:	2b00      	cmp	r3, #0
 80097c2:	d109      	bne.n	80097d8 <xQueueGenericCreateStatic+0x6c>
 80097c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097c8:	f383 8811 	msr	BASEPRI, r3
 80097cc:	f3bf 8f6f 	isb	sy
 80097d0:	f3bf 8f4f 	dsb	sy
 80097d4:	623b      	str	r3, [r7, #32]
 80097d6:	e7fe      	b.n	80097d6 <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	2b00      	cmp	r3, #0
 80097dc:	d102      	bne.n	80097e4 <xQueueGenericCreateStatic+0x78>
 80097de:	68bb      	ldr	r3, [r7, #8]
 80097e0:	2b00      	cmp	r3, #0
 80097e2:	d101      	bne.n	80097e8 <xQueueGenericCreateStatic+0x7c>
 80097e4:	2301      	movs	r3, #1
 80097e6:	e000      	b.n	80097ea <xQueueGenericCreateStatic+0x7e>
 80097e8:	2300      	movs	r3, #0
 80097ea:	2b00      	cmp	r3, #0
 80097ec:	d109      	bne.n	8009802 <xQueueGenericCreateStatic+0x96>
 80097ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097f2:	f383 8811 	msr	BASEPRI, r3
 80097f6:	f3bf 8f6f 	isb	sy
 80097fa:	f3bf 8f4f 	dsb	sy
 80097fe:	61fb      	str	r3, [r7, #28]
 8009800:	e7fe      	b.n	8009800 <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8009802:	2348      	movs	r3, #72	; 0x48
 8009804:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8009806:	697b      	ldr	r3, [r7, #20]
 8009808:	2b48      	cmp	r3, #72	; 0x48
 800980a:	d009      	beq.n	8009820 <xQueueGenericCreateStatic+0xb4>
 800980c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009810:	f383 8811 	msr	BASEPRI, r3
 8009814:	f3bf 8f6f 	isb	sy
 8009818:	f3bf 8f4f 	dsb	sy
 800981c:	61bb      	str	r3, [r7, #24]
 800981e:	e7fe      	b.n	800981e <xQueueGenericCreateStatic+0xb2>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8009820:	683b      	ldr	r3, [r7, #0]
 8009822:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8009824:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009826:	2b00      	cmp	r3, #0
 8009828:	d00d      	beq.n	8009846 <xQueueGenericCreateStatic+0xda>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800982a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800982c:	2201      	movs	r2, #1
 800982e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8009832:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8009836:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009838:	9300      	str	r3, [sp, #0]
 800983a:	4613      	mov	r3, r2
 800983c:	687a      	ldr	r2, [r7, #4]
 800983e:	68b9      	ldr	r1, [r7, #8]
 8009840:	68f8      	ldr	r0, [r7, #12]
 8009842:	f000 f842 	bl	80098ca <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8009846:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8009848:	4618      	mov	r0, r3
 800984a:	3730      	adds	r7, #48	; 0x30
 800984c:	46bd      	mov	sp, r7
 800984e:	bd80      	pop	{r7, pc}

08009850 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8009850:	b580      	push	{r7, lr}
 8009852:	b08a      	sub	sp, #40	; 0x28
 8009854:	af02      	add	r7, sp, #8
 8009856:	60f8      	str	r0, [r7, #12]
 8009858:	60b9      	str	r1, [r7, #8]
 800985a:	4613      	mov	r3, r2
 800985c:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800985e:	68fb      	ldr	r3, [r7, #12]
 8009860:	2b00      	cmp	r3, #0
 8009862:	d109      	bne.n	8009878 <xQueueGenericCreate+0x28>
 8009864:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009868:	f383 8811 	msr	BASEPRI, r3
 800986c:	f3bf 8f6f 	isb	sy
 8009870:	f3bf 8f4f 	dsb	sy
 8009874:	613b      	str	r3, [r7, #16]
 8009876:	e7fe      	b.n	8009876 <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8009878:	68bb      	ldr	r3, [r7, #8]
 800987a:	2b00      	cmp	r3, #0
 800987c:	d102      	bne.n	8009884 <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800987e:	2300      	movs	r3, #0
 8009880:	61fb      	str	r3, [r7, #28]
 8009882:	e004      	b.n	800988e <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009884:	68fb      	ldr	r3, [r7, #12]
 8009886:	68ba      	ldr	r2, [r7, #8]
 8009888:	fb02 f303 	mul.w	r3, r2, r3
 800988c:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 800988e:	69fb      	ldr	r3, [r7, #28]
 8009890:	3348      	adds	r3, #72	; 0x48
 8009892:	4618      	mov	r0, r3
 8009894:	f002 f884 	bl	800b9a0 <pvPortMalloc>
 8009898:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800989a:	69bb      	ldr	r3, [r7, #24]
 800989c:	2b00      	cmp	r3, #0
 800989e:	d00f      	beq.n	80098c0 <xQueueGenericCreate+0x70>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 80098a0:	69bb      	ldr	r3, [r7, #24]
 80098a2:	3348      	adds	r3, #72	; 0x48
 80098a4:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80098a6:	69bb      	ldr	r3, [r7, #24]
 80098a8:	2200      	movs	r2, #0
 80098aa:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80098ae:	79fa      	ldrb	r2, [r7, #7]
 80098b0:	69bb      	ldr	r3, [r7, #24]
 80098b2:	9300      	str	r3, [sp, #0]
 80098b4:	4613      	mov	r3, r2
 80098b6:	697a      	ldr	r2, [r7, #20]
 80098b8:	68b9      	ldr	r1, [r7, #8]
 80098ba:	68f8      	ldr	r0, [r7, #12]
 80098bc:	f000 f805 	bl	80098ca <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 80098c0:	69bb      	ldr	r3, [r7, #24]
	}
 80098c2:	4618      	mov	r0, r3
 80098c4:	3720      	adds	r7, #32
 80098c6:	46bd      	mov	sp, r7
 80098c8:	bd80      	pop	{r7, pc}

080098ca <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80098ca:	b580      	push	{r7, lr}
 80098cc:	b084      	sub	sp, #16
 80098ce:	af00      	add	r7, sp, #0
 80098d0:	60f8      	str	r0, [r7, #12]
 80098d2:	60b9      	str	r1, [r7, #8]
 80098d4:	607a      	str	r2, [r7, #4]
 80098d6:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80098d8:	68bb      	ldr	r3, [r7, #8]
 80098da:	2b00      	cmp	r3, #0
 80098dc:	d103      	bne.n	80098e6 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80098de:	69bb      	ldr	r3, [r7, #24]
 80098e0:	69ba      	ldr	r2, [r7, #24]
 80098e2:	601a      	str	r2, [r3, #0]
 80098e4:	e002      	b.n	80098ec <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80098e6:	69bb      	ldr	r3, [r7, #24]
 80098e8:	687a      	ldr	r2, [r7, #4]
 80098ea:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80098ec:	69bb      	ldr	r3, [r7, #24]
 80098ee:	68fa      	ldr	r2, [r7, #12]
 80098f0:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80098f2:	69bb      	ldr	r3, [r7, #24]
 80098f4:	68ba      	ldr	r2, [r7, #8]
 80098f6:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80098f8:	2101      	movs	r1, #1
 80098fa:	69b8      	ldr	r0, [r7, #24]
 80098fc:	f7ff fece 	bl	800969c <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8009900:	bf00      	nop
 8009902:	3710      	adds	r7, #16
 8009904:	46bd      	mov	sp, r7
 8009906:	bd80      	pop	{r7, pc}

08009908 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8009908:	b580      	push	{r7, lr}
 800990a:	b082      	sub	sp, #8
 800990c:	af00      	add	r7, sp, #0
 800990e:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	2b00      	cmp	r3, #0
 8009914:	d00e      	beq.n	8009934 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->pxMutexHolder = NULL;
 8009916:	687b      	ldr	r3, [r7, #4]
 8009918:	2200      	movs	r2, #0
 800991a:	605a      	str	r2, [r3, #4]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	2200      	movs	r2, #0
 8009920:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.uxRecursiveCallCount = 0;
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	2200      	movs	r2, #0
 8009926:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8009928:	2300      	movs	r3, #0
 800992a:	2200      	movs	r2, #0
 800992c:	2100      	movs	r1, #0
 800992e:	6878      	ldr	r0, [r7, #4]
 8009930:	f000 f838 	bl	80099a4 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8009934:	bf00      	nop
 8009936:	3708      	adds	r7, #8
 8009938:	46bd      	mov	sp, r7
 800993a:	bd80      	pop	{r7, pc}

0800993c <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800993c:	b580      	push	{r7, lr}
 800993e:	b086      	sub	sp, #24
 8009940:	af00      	add	r7, sp, #0
 8009942:	4603      	mov	r3, r0
 8009944:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8009946:	2301      	movs	r3, #1
 8009948:	617b      	str	r3, [r7, #20]
 800994a:	2300      	movs	r3, #0
 800994c:	613b      	str	r3, [r7, #16]

		pxNewQueue = ( Queue_t * ) xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800994e:	79fb      	ldrb	r3, [r7, #7]
 8009950:	461a      	mov	r2, r3
 8009952:	6939      	ldr	r1, [r7, #16]
 8009954:	6978      	ldr	r0, [r7, #20]
 8009956:	f7ff ff7b 	bl	8009850 <xQueueGenericCreate>
 800995a:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( pxNewQueue );
 800995c:	68f8      	ldr	r0, [r7, #12]
 800995e:	f7ff ffd3 	bl	8009908 <prvInitialiseMutex>

		return pxNewQueue;
 8009962:	68fb      	ldr	r3, [r7, #12]
	}
 8009964:	4618      	mov	r0, r3
 8009966:	3718      	adds	r7, #24
 8009968:	46bd      	mov	sp, r7
 800996a:	bd80      	pop	{r7, pc}

0800996c <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800996c:	b580      	push	{r7, lr}
 800996e:	b088      	sub	sp, #32
 8009970:	af02      	add	r7, sp, #8
 8009972:	4603      	mov	r3, r0
 8009974:	6039      	str	r1, [r7, #0]
 8009976:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8009978:	2301      	movs	r3, #1
 800997a:	617b      	str	r3, [r7, #20]
 800997c:	2300      	movs	r3, #0
 800997e:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		pxNewQueue = ( Queue_t * ) xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8009980:	79fb      	ldrb	r3, [r7, #7]
 8009982:	9300      	str	r3, [sp, #0]
 8009984:	683b      	ldr	r3, [r7, #0]
 8009986:	2200      	movs	r2, #0
 8009988:	6939      	ldr	r1, [r7, #16]
 800998a:	6978      	ldr	r0, [r7, #20]
 800998c:	f7ff feee 	bl	800976c <xQueueGenericCreateStatic>
 8009990:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( pxNewQueue );
 8009992:	68f8      	ldr	r0, [r7, #12]
 8009994:	f7ff ffb8 	bl	8009908 <prvInitialiseMutex>

		return pxNewQueue;
 8009998:	68fb      	ldr	r3, [r7, #12]
	}
 800999a:	4618      	mov	r0, r3
 800999c:	3718      	adds	r7, #24
 800999e:	46bd      	mov	sp, r7
 80099a0:	bd80      	pop	{r7, pc}
	...

080099a4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80099a4:	b580      	push	{r7, lr}
 80099a6:	b08e      	sub	sp, #56	; 0x38
 80099a8:	af00      	add	r7, sp, #0
 80099aa:	60f8      	str	r0, [r7, #12]
 80099ac:	60b9      	str	r1, [r7, #8]
 80099ae:	607a      	str	r2, [r7, #4]
 80099b0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80099b2:	2300      	movs	r3, #0
 80099b4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80099b6:	68fb      	ldr	r3, [r7, #12]
 80099b8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80099ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099bc:	2b00      	cmp	r3, #0
 80099be:	d109      	bne.n	80099d4 <xQueueGenericSend+0x30>
 80099c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099c4:	f383 8811 	msr	BASEPRI, r3
 80099c8:	f3bf 8f6f 	isb	sy
 80099cc:	f3bf 8f4f 	dsb	sy
 80099d0:	62bb      	str	r3, [r7, #40]	; 0x28
 80099d2:	e7fe      	b.n	80099d2 <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80099d4:	68bb      	ldr	r3, [r7, #8]
 80099d6:	2b00      	cmp	r3, #0
 80099d8:	d103      	bne.n	80099e2 <xQueueGenericSend+0x3e>
 80099da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80099de:	2b00      	cmp	r3, #0
 80099e0:	d101      	bne.n	80099e6 <xQueueGenericSend+0x42>
 80099e2:	2301      	movs	r3, #1
 80099e4:	e000      	b.n	80099e8 <xQueueGenericSend+0x44>
 80099e6:	2300      	movs	r3, #0
 80099e8:	2b00      	cmp	r3, #0
 80099ea:	d109      	bne.n	8009a00 <xQueueGenericSend+0x5c>
 80099ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099f0:	f383 8811 	msr	BASEPRI, r3
 80099f4:	f3bf 8f6f 	isb	sy
 80099f8:	f3bf 8f4f 	dsb	sy
 80099fc:	627b      	str	r3, [r7, #36]	; 0x24
 80099fe:	e7fe      	b.n	80099fe <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009a00:	683b      	ldr	r3, [r7, #0]
 8009a02:	2b02      	cmp	r3, #2
 8009a04:	d103      	bne.n	8009a0e <xQueueGenericSend+0x6a>
 8009a06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009a0a:	2b01      	cmp	r3, #1
 8009a0c:	d101      	bne.n	8009a12 <xQueueGenericSend+0x6e>
 8009a0e:	2301      	movs	r3, #1
 8009a10:	e000      	b.n	8009a14 <xQueueGenericSend+0x70>
 8009a12:	2300      	movs	r3, #0
 8009a14:	2b00      	cmp	r3, #0
 8009a16:	d109      	bne.n	8009a2c <xQueueGenericSend+0x88>
 8009a18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a1c:	f383 8811 	msr	BASEPRI, r3
 8009a20:	f3bf 8f6f 	isb	sy
 8009a24:	f3bf 8f4f 	dsb	sy
 8009a28:	623b      	str	r3, [r7, #32]
 8009a2a:	e7fe      	b.n	8009a2a <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009a2c:	f001 fb36 	bl	800b09c <xTaskGetSchedulerState>
 8009a30:	4603      	mov	r3, r0
 8009a32:	2b00      	cmp	r3, #0
 8009a34:	d102      	bne.n	8009a3c <xQueueGenericSend+0x98>
 8009a36:	687b      	ldr	r3, [r7, #4]
 8009a38:	2b00      	cmp	r3, #0
 8009a3a:	d101      	bne.n	8009a40 <xQueueGenericSend+0x9c>
 8009a3c:	2301      	movs	r3, #1
 8009a3e:	e000      	b.n	8009a42 <xQueueGenericSend+0x9e>
 8009a40:	2300      	movs	r3, #0
 8009a42:	2b00      	cmp	r3, #0
 8009a44:	d109      	bne.n	8009a5a <xQueueGenericSend+0xb6>
 8009a46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a4a:	f383 8811 	msr	BASEPRI, r3
 8009a4e:	f3bf 8f6f 	isb	sy
 8009a52:	f3bf 8f4f 	dsb	sy
 8009a56:	61fb      	str	r3, [r7, #28]
 8009a58:	e7fe      	b.n	8009a58 <xQueueGenericSend+0xb4>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8009a5a:	f001 fe87 	bl	800b76c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8009a5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a60:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009a62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009a66:	429a      	cmp	r2, r3
 8009a68:	d302      	bcc.n	8009a70 <xQueueGenericSend+0xcc>
 8009a6a:	683b      	ldr	r3, [r7, #0]
 8009a6c:	2b02      	cmp	r3, #2
 8009a6e:	d129      	bne.n	8009ac4 <xQueueGenericSend+0x120>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8009a70:	683a      	ldr	r2, [r7, #0]
 8009a72:	68b9      	ldr	r1, [r7, #8]
 8009a74:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009a76:	f000 fc26 	bl	800a2c6 <prvCopyDataToQueue>
 8009a7a:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009a7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a80:	2b00      	cmp	r3, #0
 8009a82:	d010      	beq.n	8009aa6 <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009a84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a86:	3324      	adds	r3, #36	; 0x24
 8009a88:	4618      	mov	r0, r3
 8009a8a:	f001 f94b 	bl	800ad24 <xTaskRemoveFromEventList>
 8009a8e:	4603      	mov	r3, r0
 8009a90:	2b00      	cmp	r3, #0
 8009a92:	d013      	beq.n	8009abc <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8009a94:	4b3f      	ldr	r3, [pc, #252]	; (8009b94 <xQueueGenericSend+0x1f0>)
 8009a96:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009a9a:	601a      	str	r2, [r3, #0]
 8009a9c:	f3bf 8f4f 	dsb	sy
 8009aa0:	f3bf 8f6f 	isb	sy
 8009aa4:	e00a      	b.n	8009abc <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8009aa6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009aa8:	2b00      	cmp	r3, #0
 8009aaa:	d007      	beq.n	8009abc <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8009aac:	4b39      	ldr	r3, [pc, #228]	; (8009b94 <xQueueGenericSend+0x1f0>)
 8009aae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009ab2:	601a      	str	r2, [r3, #0]
 8009ab4:	f3bf 8f4f 	dsb	sy
 8009ab8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8009abc:	f001 fe84 	bl	800b7c8 <vPortExitCritical>
				return pdPASS;
 8009ac0:	2301      	movs	r3, #1
 8009ac2:	e063      	b.n	8009b8c <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	2b00      	cmp	r3, #0
 8009ac8:	d103      	bne.n	8009ad2 <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8009aca:	f001 fe7d 	bl	800b7c8 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8009ace:	2300      	movs	r3, #0
 8009ad0:	e05c      	b.n	8009b8c <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009ad2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009ad4:	2b00      	cmp	r3, #0
 8009ad6:	d106      	bne.n	8009ae6 <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009ad8:	f107 0314 	add.w	r3, r7, #20
 8009adc:	4618      	mov	r0, r3
 8009ade:	f001 f983 	bl	800ade8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009ae2:	2301      	movs	r3, #1
 8009ae4:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8009ae6:	f001 fe6f 	bl	800b7c8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009aea:	f000 ff15 	bl	800a918 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009aee:	f001 fe3d 	bl	800b76c <vPortEnterCritical>
 8009af2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009af4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009af8:	b25b      	sxtb	r3, r3
 8009afa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009afe:	d103      	bne.n	8009b08 <xQueueGenericSend+0x164>
 8009b00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b02:	2200      	movs	r2, #0
 8009b04:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009b08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b0a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009b0e:	b25b      	sxtb	r3, r3
 8009b10:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009b14:	d103      	bne.n	8009b1e <xQueueGenericSend+0x17a>
 8009b16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b18:	2200      	movs	r2, #0
 8009b1a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009b1e:	f001 fe53 	bl	800b7c8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009b22:	1d3a      	adds	r2, r7, #4
 8009b24:	f107 0314 	add.w	r3, r7, #20
 8009b28:	4611      	mov	r1, r2
 8009b2a:	4618      	mov	r0, r3
 8009b2c:	f001 f972 	bl	800ae14 <xTaskCheckForTimeOut>
 8009b30:	4603      	mov	r3, r0
 8009b32:	2b00      	cmp	r3, #0
 8009b34:	d124      	bne.n	8009b80 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8009b36:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009b38:	f000 fcbd 	bl	800a4b6 <prvIsQueueFull>
 8009b3c:	4603      	mov	r3, r0
 8009b3e:	2b00      	cmp	r3, #0
 8009b40:	d018      	beq.n	8009b74 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8009b42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b44:	3310      	adds	r3, #16
 8009b46:	687a      	ldr	r2, [r7, #4]
 8009b48:	4611      	mov	r1, r2
 8009b4a:	4618      	mov	r0, r3
 8009b4c:	f001 f8c6 	bl	800acdc <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8009b50:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009b52:	f000 fc48 	bl	800a3e6 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8009b56:	f000 feed 	bl	800a934 <xTaskResumeAll>
 8009b5a:	4603      	mov	r3, r0
 8009b5c:	2b00      	cmp	r3, #0
 8009b5e:	f47f af7c 	bne.w	8009a5a <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 8009b62:	4b0c      	ldr	r3, [pc, #48]	; (8009b94 <xQueueGenericSend+0x1f0>)
 8009b64:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009b68:	601a      	str	r2, [r3, #0]
 8009b6a:	f3bf 8f4f 	dsb	sy
 8009b6e:	f3bf 8f6f 	isb	sy
 8009b72:	e772      	b.n	8009a5a <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8009b74:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009b76:	f000 fc36 	bl	800a3e6 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009b7a:	f000 fedb 	bl	800a934 <xTaskResumeAll>
 8009b7e:	e76c      	b.n	8009a5a <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8009b80:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009b82:	f000 fc30 	bl	800a3e6 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009b86:	f000 fed5 	bl	800a934 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8009b8a:	2300      	movs	r3, #0
		}
	}
}
 8009b8c:	4618      	mov	r0, r3
 8009b8e:	3738      	adds	r7, #56	; 0x38
 8009b90:	46bd      	mov	sp, r7
 8009b92:	bd80      	pop	{r7, pc}
 8009b94:	e000ed04 	.word	0xe000ed04

08009b98 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8009b98:	b580      	push	{r7, lr}
 8009b9a:	b08e      	sub	sp, #56	; 0x38
 8009b9c:	af00      	add	r7, sp, #0
 8009b9e:	60f8      	str	r0, [r7, #12]
 8009ba0:	60b9      	str	r1, [r7, #8]
 8009ba2:	607a      	str	r2, [r7, #4]
 8009ba4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8009ba6:	68fb      	ldr	r3, [r7, #12]
 8009ba8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8009baa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009bac:	2b00      	cmp	r3, #0
 8009bae:	d109      	bne.n	8009bc4 <xQueueGenericSendFromISR+0x2c>
 8009bb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009bb4:	f383 8811 	msr	BASEPRI, r3
 8009bb8:	f3bf 8f6f 	isb	sy
 8009bbc:	f3bf 8f4f 	dsb	sy
 8009bc0:	627b      	str	r3, [r7, #36]	; 0x24
 8009bc2:	e7fe      	b.n	8009bc2 <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009bc4:	68bb      	ldr	r3, [r7, #8]
 8009bc6:	2b00      	cmp	r3, #0
 8009bc8:	d103      	bne.n	8009bd2 <xQueueGenericSendFromISR+0x3a>
 8009bca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009bcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009bce:	2b00      	cmp	r3, #0
 8009bd0:	d101      	bne.n	8009bd6 <xQueueGenericSendFromISR+0x3e>
 8009bd2:	2301      	movs	r3, #1
 8009bd4:	e000      	b.n	8009bd8 <xQueueGenericSendFromISR+0x40>
 8009bd6:	2300      	movs	r3, #0
 8009bd8:	2b00      	cmp	r3, #0
 8009bda:	d109      	bne.n	8009bf0 <xQueueGenericSendFromISR+0x58>
 8009bdc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009be0:	f383 8811 	msr	BASEPRI, r3
 8009be4:	f3bf 8f6f 	isb	sy
 8009be8:	f3bf 8f4f 	dsb	sy
 8009bec:	623b      	str	r3, [r7, #32]
 8009bee:	e7fe      	b.n	8009bee <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009bf0:	683b      	ldr	r3, [r7, #0]
 8009bf2:	2b02      	cmp	r3, #2
 8009bf4:	d103      	bne.n	8009bfe <xQueueGenericSendFromISR+0x66>
 8009bf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009bf8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009bfa:	2b01      	cmp	r3, #1
 8009bfc:	d101      	bne.n	8009c02 <xQueueGenericSendFromISR+0x6a>
 8009bfe:	2301      	movs	r3, #1
 8009c00:	e000      	b.n	8009c04 <xQueueGenericSendFromISR+0x6c>
 8009c02:	2300      	movs	r3, #0
 8009c04:	2b00      	cmp	r3, #0
 8009c06:	d109      	bne.n	8009c1c <xQueueGenericSendFromISR+0x84>
 8009c08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c0c:	f383 8811 	msr	BASEPRI, r3
 8009c10:	f3bf 8f6f 	isb	sy
 8009c14:	f3bf 8f4f 	dsb	sy
 8009c18:	61fb      	str	r3, [r7, #28]
 8009c1a:	e7fe      	b.n	8009c1a <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8009c1c:	f001 fe82 	bl	800b924 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8009c20:	f3ef 8211 	mrs	r2, BASEPRI
 8009c24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c28:	f383 8811 	msr	BASEPRI, r3
 8009c2c:	f3bf 8f6f 	isb	sy
 8009c30:	f3bf 8f4f 	dsb	sy
 8009c34:	61ba      	str	r2, [r7, #24]
 8009c36:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8009c38:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8009c3a:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8009c3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c3e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009c40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c42:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009c44:	429a      	cmp	r2, r3
 8009c46:	d302      	bcc.n	8009c4e <xQueueGenericSendFromISR+0xb6>
 8009c48:	683b      	ldr	r3, [r7, #0]
 8009c4a:	2b02      	cmp	r3, #2
 8009c4c:	d12c      	bne.n	8009ca8 <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8009c4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c50:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009c54:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8009c58:	683a      	ldr	r2, [r7, #0]
 8009c5a:	68b9      	ldr	r1, [r7, #8]
 8009c5c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009c5e:	f000 fb32 	bl	800a2c6 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8009c62:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8009c66:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009c6a:	d112      	bne.n	8009c92 <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009c6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c70:	2b00      	cmp	r3, #0
 8009c72:	d016      	beq.n	8009ca2 <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009c74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c76:	3324      	adds	r3, #36	; 0x24
 8009c78:	4618      	mov	r0, r3
 8009c7a:	f001 f853 	bl	800ad24 <xTaskRemoveFromEventList>
 8009c7e:	4603      	mov	r3, r0
 8009c80:	2b00      	cmp	r3, #0
 8009c82:	d00e      	beq.n	8009ca2 <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	2b00      	cmp	r3, #0
 8009c88:	d00b      	beq.n	8009ca2 <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	2201      	movs	r2, #1
 8009c8e:	601a      	str	r2, [r3, #0]
 8009c90:	e007      	b.n	8009ca2 <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8009c92:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8009c96:	3301      	adds	r3, #1
 8009c98:	b2db      	uxtb	r3, r3
 8009c9a:	b25a      	sxtb	r2, r3
 8009c9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c9e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8009ca2:	2301      	movs	r3, #1
 8009ca4:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8009ca6:	e001      	b.n	8009cac <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8009ca8:	2300      	movs	r3, #0
 8009caa:	637b      	str	r3, [r7, #52]	; 0x34
 8009cac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009cae:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8009cb0:	693b      	ldr	r3, [r7, #16]
 8009cb2:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8009cb6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8009cb8:	4618      	mov	r0, r3
 8009cba:	3738      	adds	r7, #56	; 0x38
 8009cbc:	46bd      	mov	sp, r7
 8009cbe:	bd80      	pop	{r7, pc}

08009cc0 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8009cc0:	b580      	push	{r7, lr}
 8009cc2:	b08e      	sub	sp, #56	; 0x38
 8009cc4:	af00      	add	r7, sp, #0
 8009cc6:	6078      	str	r0, [r7, #4]
 8009cc8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8009cce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009cd0:	2b00      	cmp	r3, #0
 8009cd2:	d109      	bne.n	8009ce8 <xQueueGiveFromISR+0x28>
	__asm volatile
 8009cd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009cd8:	f383 8811 	msr	BASEPRI, r3
 8009cdc:	f3bf 8f6f 	isb	sy
 8009ce0:	f3bf 8f4f 	dsb	sy
 8009ce4:	623b      	str	r3, [r7, #32]
 8009ce6:	e7fe      	b.n	8009ce6 <xQueueGiveFromISR+0x26>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8009ce8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009cea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009cec:	2b00      	cmp	r3, #0
 8009cee:	d009      	beq.n	8009d04 <xQueueGiveFromISR+0x44>
 8009cf0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009cf4:	f383 8811 	msr	BASEPRI, r3
 8009cf8:	f3bf 8f6f 	isb	sy
 8009cfc:	f3bf 8f4f 	dsb	sy
 8009d00:	61fb      	str	r3, [r7, #28]
 8009d02:	e7fe      	b.n	8009d02 <xQueueGiveFromISR+0x42>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
 8009d04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d06:	681b      	ldr	r3, [r3, #0]
 8009d08:	2b00      	cmp	r3, #0
 8009d0a:	d103      	bne.n	8009d14 <xQueueGiveFromISR+0x54>
 8009d0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d0e:	685b      	ldr	r3, [r3, #4]
 8009d10:	2b00      	cmp	r3, #0
 8009d12:	d101      	bne.n	8009d18 <xQueueGiveFromISR+0x58>
 8009d14:	2301      	movs	r3, #1
 8009d16:	e000      	b.n	8009d1a <xQueueGiveFromISR+0x5a>
 8009d18:	2300      	movs	r3, #0
 8009d1a:	2b00      	cmp	r3, #0
 8009d1c:	d109      	bne.n	8009d32 <xQueueGiveFromISR+0x72>
 8009d1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d22:	f383 8811 	msr	BASEPRI, r3
 8009d26:	f3bf 8f6f 	isb	sy
 8009d2a:	f3bf 8f4f 	dsb	sy
 8009d2e:	61bb      	str	r3, [r7, #24]
 8009d30:	e7fe      	b.n	8009d30 <xQueueGiveFromISR+0x70>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8009d32:	f001 fdf7 	bl	800b924 <vPortValidateInterruptPriority>
	__asm volatile
 8009d36:	f3ef 8211 	mrs	r2, BASEPRI
 8009d3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d3e:	f383 8811 	msr	BASEPRI, r3
 8009d42:	f3bf 8f6f 	isb	sy
 8009d46:	f3bf 8f4f 	dsb	sy
 8009d4a:	617a      	str	r2, [r7, #20]
 8009d4c:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8009d4e:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8009d50:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009d52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009d56:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8009d58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d5a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009d5c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009d5e:	429a      	cmp	r2, r3
 8009d60:	d22b      	bcs.n	8009dba <xQueueGiveFromISR+0xfa>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8009d62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d64:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009d68:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8009d6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d6e:	1c5a      	adds	r2, r3, #1
 8009d70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d72:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8009d74:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8009d78:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009d7c:	d112      	bne.n	8009da4 <xQueueGiveFromISR+0xe4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009d7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d82:	2b00      	cmp	r3, #0
 8009d84:	d016      	beq.n	8009db4 <xQueueGiveFromISR+0xf4>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009d86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d88:	3324      	adds	r3, #36	; 0x24
 8009d8a:	4618      	mov	r0, r3
 8009d8c:	f000 ffca 	bl	800ad24 <xTaskRemoveFromEventList>
 8009d90:	4603      	mov	r3, r0
 8009d92:	2b00      	cmp	r3, #0
 8009d94:	d00e      	beq.n	8009db4 <xQueueGiveFromISR+0xf4>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8009d96:	683b      	ldr	r3, [r7, #0]
 8009d98:	2b00      	cmp	r3, #0
 8009d9a:	d00b      	beq.n	8009db4 <xQueueGiveFromISR+0xf4>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8009d9c:	683b      	ldr	r3, [r7, #0]
 8009d9e:	2201      	movs	r2, #1
 8009da0:	601a      	str	r2, [r3, #0]
 8009da2:	e007      	b.n	8009db4 <xQueueGiveFromISR+0xf4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8009da4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009da8:	3301      	adds	r3, #1
 8009daa:	b2db      	uxtb	r3, r3
 8009dac:	b25a      	sxtb	r2, r3
 8009dae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009db0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8009db4:	2301      	movs	r3, #1
 8009db6:	637b      	str	r3, [r7, #52]	; 0x34
 8009db8:	e001      	b.n	8009dbe <xQueueGiveFromISR+0xfe>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8009dba:	2300      	movs	r3, #0
 8009dbc:	637b      	str	r3, [r7, #52]	; 0x34
 8009dbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009dc0:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8009dc2:	68fb      	ldr	r3, [r7, #12]
 8009dc4:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8009dc8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8009dca:	4618      	mov	r0, r3
 8009dcc:	3738      	adds	r7, #56	; 0x38
 8009dce:	46bd      	mov	sp, r7
 8009dd0:	bd80      	pop	{r7, pc}
	...

08009dd4 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8009dd4:	b580      	push	{r7, lr}
 8009dd6:	b08c      	sub	sp, #48	; 0x30
 8009dd8:	af00      	add	r7, sp, #0
 8009dda:	60f8      	str	r0, [r7, #12]
 8009ddc:	60b9      	str	r1, [r7, #8]
 8009dde:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8009de0:	2300      	movs	r3, #0
 8009de2:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8009de4:	68fb      	ldr	r3, [r7, #12]
 8009de6:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8009de8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009dea:	2b00      	cmp	r3, #0
 8009dec:	d109      	bne.n	8009e02 <xQueueReceive+0x2e>
	__asm volatile
 8009dee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009df2:	f383 8811 	msr	BASEPRI, r3
 8009df6:	f3bf 8f6f 	isb	sy
 8009dfa:	f3bf 8f4f 	dsb	sy
 8009dfe:	623b      	str	r3, [r7, #32]
 8009e00:	e7fe      	b.n	8009e00 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009e02:	68bb      	ldr	r3, [r7, #8]
 8009e04:	2b00      	cmp	r3, #0
 8009e06:	d103      	bne.n	8009e10 <xQueueReceive+0x3c>
 8009e08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e0c:	2b00      	cmp	r3, #0
 8009e0e:	d101      	bne.n	8009e14 <xQueueReceive+0x40>
 8009e10:	2301      	movs	r3, #1
 8009e12:	e000      	b.n	8009e16 <xQueueReceive+0x42>
 8009e14:	2300      	movs	r3, #0
 8009e16:	2b00      	cmp	r3, #0
 8009e18:	d109      	bne.n	8009e2e <xQueueReceive+0x5a>
 8009e1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e1e:	f383 8811 	msr	BASEPRI, r3
 8009e22:	f3bf 8f6f 	isb	sy
 8009e26:	f3bf 8f4f 	dsb	sy
 8009e2a:	61fb      	str	r3, [r7, #28]
 8009e2c:	e7fe      	b.n	8009e2c <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009e2e:	f001 f935 	bl	800b09c <xTaskGetSchedulerState>
 8009e32:	4603      	mov	r3, r0
 8009e34:	2b00      	cmp	r3, #0
 8009e36:	d102      	bne.n	8009e3e <xQueueReceive+0x6a>
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	2b00      	cmp	r3, #0
 8009e3c:	d101      	bne.n	8009e42 <xQueueReceive+0x6e>
 8009e3e:	2301      	movs	r3, #1
 8009e40:	e000      	b.n	8009e44 <xQueueReceive+0x70>
 8009e42:	2300      	movs	r3, #0
 8009e44:	2b00      	cmp	r3, #0
 8009e46:	d109      	bne.n	8009e5c <xQueueReceive+0x88>
 8009e48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e4c:	f383 8811 	msr	BASEPRI, r3
 8009e50:	f3bf 8f6f 	isb	sy
 8009e54:	f3bf 8f4f 	dsb	sy
 8009e58:	61bb      	str	r3, [r7, #24]
 8009e5a:	e7fe      	b.n	8009e5a <xQueueReceive+0x86>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8009e5c:	f001 fc86 	bl	800b76c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009e60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009e64:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009e66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e68:	2b00      	cmp	r3, #0
 8009e6a:	d01f      	beq.n	8009eac <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8009e6c:	68b9      	ldr	r1, [r7, #8]
 8009e6e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009e70:	f000 fa93 	bl	800a39a <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8009e74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e76:	1e5a      	subs	r2, r3, #1
 8009e78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e7a:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009e7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e7e:	691b      	ldr	r3, [r3, #16]
 8009e80:	2b00      	cmp	r3, #0
 8009e82:	d00f      	beq.n	8009ea4 <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009e84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e86:	3310      	adds	r3, #16
 8009e88:	4618      	mov	r0, r3
 8009e8a:	f000 ff4b 	bl	800ad24 <xTaskRemoveFromEventList>
 8009e8e:	4603      	mov	r3, r0
 8009e90:	2b00      	cmp	r3, #0
 8009e92:	d007      	beq.n	8009ea4 <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8009e94:	4b3c      	ldr	r3, [pc, #240]	; (8009f88 <xQueueReceive+0x1b4>)
 8009e96:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009e9a:	601a      	str	r2, [r3, #0]
 8009e9c:	f3bf 8f4f 	dsb	sy
 8009ea0:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8009ea4:	f001 fc90 	bl	800b7c8 <vPortExitCritical>
				return pdPASS;
 8009ea8:	2301      	movs	r3, #1
 8009eaa:	e069      	b.n	8009f80 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	2b00      	cmp	r3, #0
 8009eb0:	d103      	bne.n	8009eba <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8009eb2:	f001 fc89 	bl	800b7c8 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8009eb6:	2300      	movs	r3, #0
 8009eb8:	e062      	b.n	8009f80 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009eba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009ebc:	2b00      	cmp	r3, #0
 8009ebe:	d106      	bne.n	8009ece <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009ec0:	f107 0310 	add.w	r3, r7, #16
 8009ec4:	4618      	mov	r0, r3
 8009ec6:	f000 ff8f 	bl	800ade8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009eca:	2301      	movs	r3, #1
 8009ecc:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8009ece:	f001 fc7b 	bl	800b7c8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009ed2:	f000 fd21 	bl	800a918 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009ed6:	f001 fc49 	bl	800b76c <vPortEnterCritical>
 8009eda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009edc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009ee0:	b25b      	sxtb	r3, r3
 8009ee2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009ee6:	d103      	bne.n	8009ef0 <xQueueReceive+0x11c>
 8009ee8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009eea:	2200      	movs	r2, #0
 8009eec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009ef0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ef2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009ef6:	b25b      	sxtb	r3, r3
 8009ef8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009efc:	d103      	bne.n	8009f06 <xQueueReceive+0x132>
 8009efe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f00:	2200      	movs	r2, #0
 8009f02:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009f06:	f001 fc5f 	bl	800b7c8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009f0a:	1d3a      	adds	r2, r7, #4
 8009f0c:	f107 0310 	add.w	r3, r7, #16
 8009f10:	4611      	mov	r1, r2
 8009f12:	4618      	mov	r0, r3
 8009f14:	f000 ff7e 	bl	800ae14 <xTaskCheckForTimeOut>
 8009f18:	4603      	mov	r3, r0
 8009f1a:	2b00      	cmp	r3, #0
 8009f1c:	d123      	bne.n	8009f66 <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009f1e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009f20:	f000 fab3 	bl	800a48a <prvIsQueueEmpty>
 8009f24:	4603      	mov	r3, r0
 8009f26:	2b00      	cmp	r3, #0
 8009f28:	d017      	beq.n	8009f5a <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8009f2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f2c:	3324      	adds	r3, #36	; 0x24
 8009f2e:	687a      	ldr	r2, [r7, #4]
 8009f30:	4611      	mov	r1, r2
 8009f32:	4618      	mov	r0, r3
 8009f34:	f000 fed2 	bl	800acdc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8009f38:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009f3a:	f000 fa54 	bl	800a3e6 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8009f3e:	f000 fcf9 	bl	800a934 <xTaskResumeAll>
 8009f42:	4603      	mov	r3, r0
 8009f44:	2b00      	cmp	r3, #0
 8009f46:	d189      	bne.n	8009e5c <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 8009f48:	4b0f      	ldr	r3, [pc, #60]	; (8009f88 <xQueueReceive+0x1b4>)
 8009f4a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009f4e:	601a      	str	r2, [r3, #0]
 8009f50:	f3bf 8f4f 	dsb	sy
 8009f54:	f3bf 8f6f 	isb	sy
 8009f58:	e780      	b.n	8009e5c <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8009f5a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009f5c:	f000 fa43 	bl	800a3e6 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009f60:	f000 fce8 	bl	800a934 <xTaskResumeAll>
 8009f64:	e77a      	b.n	8009e5c <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8009f66:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009f68:	f000 fa3d 	bl	800a3e6 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009f6c:	f000 fce2 	bl	800a934 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009f70:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009f72:	f000 fa8a 	bl	800a48a <prvIsQueueEmpty>
 8009f76:	4603      	mov	r3, r0
 8009f78:	2b00      	cmp	r3, #0
 8009f7a:	f43f af6f 	beq.w	8009e5c <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8009f7e:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8009f80:	4618      	mov	r0, r3
 8009f82:	3730      	adds	r7, #48	; 0x30
 8009f84:	46bd      	mov	sp, r7
 8009f86:	bd80      	pop	{r7, pc}
 8009f88:	e000ed04 	.word	0xe000ed04

08009f8c <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8009f8c:	b580      	push	{r7, lr}
 8009f8e:	b08e      	sub	sp, #56	; 0x38
 8009f90:	af00      	add	r7, sp, #0
 8009f92:	6078      	str	r0, [r7, #4]
 8009f94:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8009f96:	2300      	movs	r3, #0
 8009f98:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8009f9a:	687b      	ldr	r3, [r7, #4]
 8009f9c:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8009f9e:	2300      	movs	r3, #0
 8009fa0:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8009fa2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009fa4:	2b00      	cmp	r3, #0
 8009fa6:	d109      	bne.n	8009fbc <xQueueSemaphoreTake+0x30>
 8009fa8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009fac:	f383 8811 	msr	BASEPRI, r3
 8009fb0:	f3bf 8f6f 	isb	sy
 8009fb4:	f3bf 8f4f 	dsb	sy
 8009fb8:	623b      	str	r3, [r7, #32]
 8009fba:	e7fe      	b.n	8009fba <xQueueSemaphoreTake+0x2e>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8009fbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009fbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009fc0:	2b00      	cmp	r3, #0
 8009fc2:	d009      	beq.n	8009fd8 <xQueueSemaphoreTake+0x4c>
 8009fc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009fc8:	f383 8811 	msr	BASEPRI, r3
 8009fcc:	f3bf 8f6f 	isb	sy
 8009fd0:	f3bf 8f4f 	dsb	sy
 8009fd4:	61fb      	str	r3, [r7, #28]
 8009fd6:	e7fe      	b.n	8009fd6 <xQueueSemaphoreTake+0x4a>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009fd8:	f001 f860 	bl	800b09c <xTaskGetSchedulerState>
 8009fdc:	4603      	mov	r3, r0
 8009fde:	2b00      	cmp	r3, #0
 8009fe0:	d102      	bne.n	8009fe8 <xQueueSemaphoreTake+0x5c>
 8009fe2:	683b      	ldr	r3, [r7, #0]
 8009fe4:	2b00      	cmp	r3, #0
 8009fe6:	d101      	bne.n	8009fec <xQueueSemaphoreTake+0x60>
 8009fe8:	2301      	movs	r3, #1
 8009fea:	e000      	b.n	8009fee <xQueueSemaphoreTake+0x62>
 8009fec:	2300      	movs	r3, #0
 8009fee:	2b00      	cmp	r3, #0
 8009ff0:	d109      	bne.n	800a006 <xQueueSemaphoreTake+0x7a>
 8009ff2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ff6:	f383 8811 	msr	BASEPRI, r3
 8009ffa:	f3bf 8f6f 	isb	sy
 8009ffe:	f3bf 8f4f 	dsb	sy
 800a002:	61bb      	str	r3, [r7, #24]
 800a004:	e7fe      	b.n	800a004 <xQueueSemaphoreTake+0x78>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 800a006:	f001 fbb1 	bl	800b76c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800a00a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a00c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a00e:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800a010:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a012:	2b00      	cmp	r3, #0
 800a014:	d024      	beq.n	800a060 <xQueueSemaphoreTake+0xd4>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800a016:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a018:	1e5a      	subs	r2, r3, #1
 800a01a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a01c:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800a01e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a020:	681b      	ldr	r3, [r3, #0]
 800a022:	2b00      	cmp	r3, #0
 800a024:	d104      	bne.n	800a030 <xQueueSemaphoreTake+0xa4>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 800a026:	f001 f9ff 	bl	800b428 <pvTaskIncrementMutexHeldCount>
 800a02a:	4602      	mov	r2, r0
 800a02c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a02e:	605a      	str	r2, [r3, #4]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a030:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a032:	691b      	ldr	r3, [r3, #16]
 800a034:	2b00      	cmp	r3, #0
 800a036:	d00f      	beq.n	800a058 <xQueueSemaphoreTake+0xcc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a038:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a03a:	3310      	adds	r3, #16
 800a03c:	4618      	mov	r0, r3
 800a03e:	f000 fe71 	bl	800ad24 <xTaskRemoveFromEventList>
 800a042:	4603      	mov	r3, r0
 800a044:	2b00      	cmp	r3, #0
 800a046:	d007      	beq.n	800a058 <xQueueSemaphoreTake+0xcc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800a048:	4b53      	ldr	r3, [pc, #332]	; (800a198 <xQueueSemaphoreTake+0x20c>)
 800a04a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a04e:	601a      	str	r2, [r3, #0]
 800a050:	f3bf 8f4f 	dsb	sy
 800a054:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800a058:	f001 fbb6 	bl	800b7c8 <vPortExitCritical>
				return pdPASS;
 800a05c:	2301      	movs	r3, #1
 800a05e:	e096      	b.n	800a18e <xQueueSemaphoreTake+0x202>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a060:	683b      	ldr	r3, [r7, #0]
 800a062:	2b00      	cmp	r3, #0
 800a064:	d110      	bne.n	800a088 <xQueueSemaphoreTake+0xfc>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800a066:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a068:	2b00      	cmp	r3, #0
 800a06a:	d009      	beq.n	800a080 <xQueueSemaphoreTake+0xf4>
 800a06c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a070:	f383 8811 	msr	BASEPRI, r3
 800a074:	f3bf 8f6f 	isb	sy
 800a078:	f3bf 8f4f 	dsb	sy
 800a07c:	617b      	str	r3, [r7, #20]
 800a07e:	e7fe      	b.n	800a07e <xQueueSemaphoreTake+0xf2>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800a080:	f001 fba2 	bl	800b7c8 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800a084:	2300      	movs	r3, #0
 800a086:	e082      	b.n	800a18e <xQueueSemaphoreTake+0x202>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a088:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a08a:	2b00      	cmp	r3, #0
 800a08c:	d106      	bne.n	800a09c <xQueueSemaphoreTake+0x110>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a08e:	f107 030c 	add.w	r3, r7, #12
 800a092:	4618      	mov	r0, r3
 800a094:	f000 fea8 	bl	800ade8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a098:	2301      	movs	r3, #1
 800a09a:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a09c:	f001 fb94 	bl	800b7c8 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a0a0:	f000 fc3a 	bl	800a918 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a0a4:	f001 fb62 	bl	800b76c <vPortEnterCritical>
 800a0a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a0aa:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a0ae:	b25b      	sxtb	r3, r3
 800a0b0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a0b4:	d103      	bne.n	800a0be <xQueueSemaphoreTake+0x132>
 800a0b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a0b8:	2200      	movs	r2, #0
 800a0ba:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a0be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a0c0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a0c4:	b25b      	sxtb	r3, r3
 800a0c6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a0ca:	d103      	bne.n	800a0d4 <xQueueSemaphoreTake+0x148>
 800a0cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a0ce:	2200      	movs	r2, #0
 800a0d0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a0d4:	f001 fb78 	bl	800b7c8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a0d8:	463a      	mov	r2, r7
 800a0da:	f107 030c 	add.w	r3, r7, #12
 800a0de:	4611      	mov	r1, r2
 800a0e0:	4618      	mov	r0, r3
 800a0e2:	f000 fe97 	bl	800ae14 <xTaskCheckForTimeOut>
 800a0e6:	4603      	mov	r3, r0
 800a0e8:	2b00      	cmp	r3, #0
 800a0ea:	d132      	bne.n	800a152 <xQueueSemaphoreTake+0x1c6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a0ec:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a0ee:	f000 f9cc 	bl	800a48a <prvIsQueueEmpty>
 800a0f2:	4603      	mov	r3, r0
 800a0f4:	2b00      	cmp	r3, #0
 800a0f6:	d026      	beq.n	800a146 <xQueueSemaphoreTake+0x1ba>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800a0f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a0fa:	681b      	ldr	r3, [r3, #0]
 800a0fc:	2b00      	cmp	r3, #0
 800a0fe:	d109      	bne.n	800a114 <xQueueSemaphoreTake+0x188>
					{
						taskENTER_CRITICAL();
 800a100:	f001 fb34 	bl	800b76c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 800a104:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a106:	685b      	ldr	r3, [r3, #4]
 800a108:	4618      	mov	r0, r3
 800a10a:	f000 ffe5 	bl	800b0d8 <xTaskPriorityInherit>
 800a10e:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800a110:	f001 fb5a 	bl	800b7c8 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800a114:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a116:	3324      	adds	r3, #36	; 0x24
 800a118:	683a      	ldr	r2, [r7, #0]
 800a11a:	4611      	mov	r1, r2
 800a11c:	4618      	mov	r0, r3
 800a11e:	f000 fddd 	bl	800acdc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800a122:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a124:	f000 f95f 	bl	800a3e6 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800a128:	f000 fc04 	bl	800a934 <xTaskResumeAll>
 800a12c:	4603      	mov	r3, r0
 800a12e:	2b00      	cmp	r3, #0
 800a130:	f47f af69 	bne.w	800a006 <xQueueSemaphoreTake+0x7a>
				{
					portYIELD_WITHIN_API();
 800a134:	4b18      	ldr	r3, [pc, #96]	; (800a198 <xQueueSemaphoreTake+0x20c>)
 800a136:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a13a:	601a      	str	r2, [r3, #0]
 800a13c:	f3bf 8f4f 	dsb	sy
 800a140:	f3bf 8f6f 	isb	sy
 800a144:	e75f      	b.n	800a006 <xQueueSemaphoreTake+0x7a>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800a146:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a148:	f000 f94d 	bl	800a3e6 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a14c:	f000 fbf2 	bl	800a934 <xTaskResumeAll>
 800a150:	e759      	b.n	800a006 <xQueueSemaphoreTake+0x7a>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800a152:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a154:	f000 f947 	bl	800a3e6 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a158:	f000 fbec 	bl	800a934 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a15c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a15e:	f000 f994 	bl	800a48a <prvIsQueueEmpty>
 800a162:	4603      	mov	r3, r0
 800a164:	2b00      	cmp	r3, #0
 800a166:	f43f af4e 	beq.w	800a006 <xQueueSemaphoreTake+0x7a>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800a16a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a16c:	2b00      	cmp	r3, #0
 800a16e:	d00d      	beq.n	800a18c <xQueueSemaphoreTake+0x200>
					{
						taskENTER_CRITICAL();
 800a170:	f001 fafc 	bl	800b76c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800a174:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a176:	f000 f88e 	bl	800a296 <prvGetDisinheritPriorityAfterTimeout>
 800a17a:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
 800a17c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a17e:	685b      	ldr	r3, [r3, #4]
 800a180:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800a182:	4618      	mov	r0, r3
 800a184:	f001 f8b2 	bl	800b2ec <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800a188:	f001 fb1e 	bl	800b7c8 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800a18c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 800a18e:	4618      	mov	r0, r3
 800a190:	3738      	adds	r7, #56	; 0x38
 800a192:	46bd      	mov	sp, r7
 800a194:	bd80      	pop	{r7, pc}
 800a196:	bf00      	nop
 800a198:	e000ed04 	.word	0xe000ed04

0800a19c <xQueueReceiveFromISR>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800a19c:	b580      	push	{r7, lr}
 800a19e:	b08e      	sub	sp, #56	; 0x38
 800a1a0:	af00      	add	r7, sp, #0
 800a1a2:	60f8      	str	r0, [r7, #12]
 800a1a4:	60b9      	str	r1, [r7, #8]
 800a1a6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800a1a8:	68fb      	ldr	r3, [r7, #12]
 800a1aa:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800a1ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a1ae:	2b00      	cmp	r3, #0
 800a1b0:	d109      	bne.n	800a1c6 <xQueueReceiveFromISR+0x2a>
 800a1b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a1b6:	f383 8811 	msr	BASEPRI, r3
 800a1ba:	f3bf 8f6f 	isb	sy
 800a1be:	f3bf 8f4f 	dsb	sy
 800a1c2:	623b      	str	r3, [r7, #32]
 800a1c4:	e7fe      	b.n	800a1c4 <xQueueReceiveFromISR+0x28>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a1c6:	68bb      	ldr	r3, [r7, #8]
 800a1c8:	2b00      	cmp	r3, #0
 800a1ca:	d103      	bne.n	800a1d4 <xQueueReceiveFromISR+0x38>
 800a1cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a1ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a1d0:	2b00      	cmp	r3, #0
 800a1d2:	d101      	bne.n	800a1d8 <xQueueReceiveFromISR+0x3c>
 800a1d4:	2301      	movs	r3, #1
 800a1d6:	e000      	b.n	800a1da <xQueueReceiveFromISR+0x3e>
 800a1d8:	2300      	movs	r3, #0
 800a1da:	2b00      	cmp	r3, #0
 800a1dc:	d109      	bne.n	800a1f2 <xQueueReceiveFromISR+0x56>
 800a1de:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a1e2:	f383 8811 	msr	BASEPRI, r3
 800a1e6:	f3bf 8f6f 	isb	sy
 800a1ea:	f3bf 8f4f 	dsb	sy
 800a1ee:	61fb      	str	r3, [r7, #28]
 800a1f0:	e7fe      	b.n	800a1f0 <xQueueReceiveFromISR+0x54>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a1f2:	f001 fb97 	bl	800b924 <vPortValidateInterruptPriority>
	__asm volatile
 800a1f6:	f3ef 8211 	mrs	r2, BASEPRI
 800a1fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a1fe:	f383 8811 	msr	BASEPRI, r3
 800a202:	f3bf 8f6f 	isb	sy
 800a206:	f3bf 8f4f 	dsb	sy
 800a20a:	61ba      	str	r2, [r7, #24]
 800a20c:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800a20e:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800a210:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a212:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a214:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a216:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a218:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a21a:	2b00      	cmp	r3, #0
 800a21c:	d02f      	beq.n	800a27e <xQueueReceiveFromISR+0xe2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800a21e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a220:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a224:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800a228:	68b9      	ldr	r1, [r7, #8]
 800a22a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a22c:	f000 f8b5 	bl	800a39a <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800a230:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a232:	1e5a      	subs	r2, r3, #1
 800a234:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a236:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800a238:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800a23c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a240:	d112      	bne.n	800a268 <xQueueReceiveFromISR+0xcc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a242:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a244:	691b      	ldr	r3, [r3, #16]
 800a246:	2b00      	cmp	r3, #0
 800a248:	d016      	beq.n	800a278 <xQueueReceiveFromISR+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a24a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a24c:	3310      	adds	r3, #16
 800a24e:	4618      	mov	r0, r3
 800a250:	f000 fd68 	bl	800ad24 <xTaskRemoveFromEventList>
 800a254:	4603      	mov	r3, r0
 800a256:	2b00      	cmp	r3, #0
 800a258:	d00e      	beq.n	800a278 <xQueueReceiveFromISR+0xdc>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800a25a:	687b      	ldr	r3, [r7, #4]
 800a25c:	2b00      	cmp	r3, #0
 800a25e:	d00b      	beq.n	800a278 <xQueueReceiveFromISR+0xdc>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800a260:	687b      	ldr	r3, [r7, #4]
 800a262:	2201      	movs	r2, #1
 800a264:	601a      	str	r2, [r3, #0]
 800a266:	e007      	b.n	800a278 <xQueueReceiveFromISR+0xdc>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800a268:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a26c:	3301      	adds	r3, #1
 800a26e:	b2db      	uxtb	r3, r3
 800a270:	b25a      	sxtb	r2, r3
 800a272:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a274:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800a278:	2301      	movs	r3, #1
 800a27a:	637b      	str	r3, [r7, #52]	; 0x34
 800a27c:	e001      	b.n	800a282 <xQueueReceiveFromISR+0xe6>
		}
		else
		{
			xReturn = pdFAIL;
 800a27e:	2300      	movs	r3, #0
 800a280:	637b      	str	r3, [r7, #52]	; 0x34
 800a282:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a284:	613b      	str	r3, [r7, #16]
	__asm volatile
 800a286:	693b      	ldr	r3, [r7, #16]
 800a288:	f383 8811 	msr	BASEPRI, r3
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800a28c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800a28e:	4618      	mov	r0, r3
 800a290:	3738      	adds	r7, #56	; 0x38
 800a292:	46bd      	mov	sp, r7
 800a294:	bd80      	pop	{r7, pc}

0800a296 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800a296:	b480      	push	{r7}
 800a298:	b085      	sub	sp, #20
 800a29a:	af00      	add	r7, sp, #0
 800a29c:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
 800a29e:	687b      	ldr	r3, [r7, #4]
 800a2a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a2a2:	2b00      	cmp	r3, #0
 800a2a4:	d006      	beq.n	800a2b4 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800a2a6:	687b      	ldr	r3, [r7, #4]
 800a2a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a2aa:	681b      	ldr	r3, [r3, #0]
 800a2ac:	f1c3 0307 	rsb	r3, r3, #7
 800a2b0:	60fb      	str	r3, [r7, #12]
 800a2b2:	e001      	b.n	800a2b8 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800a2b4:	2300      	movs	r3, #0
 800a2b6:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800a2b8:	68fb      	ldr	r3, [r7, #12]
	}
 800a2ba:	4618      	mov	r0, r3
 800a2bc:	3714      	adds	r7, #20
 800a2be:	46bd      	mov	sp, r7
 800a2c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2c4:	4770      	bx	lr

0800a2c6 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800a2c6:	b580      	push	{r7, lr}
 800a2c8:	b086      	sub	sp, #24
 800a2ca:	af00      	add	r7, sp, #0
 800a2cc:	60f8      	str	r0, [r7, #12]
 800a2ce:	60b9      	str	r1, [r7, #8]
 800a2d0:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800a2d2:	2300      	movs	r3, #0
 800a2d4:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a2d6:	68fb      	ldr	r3, [r7, #12]
 800a2d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a2da:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800a2dc:	68fb      	ldr	r3, [r7, #12]
 800a2de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a2e0:	2b00      	cmp	r3, #0
 800a2e2:	d10d      	bne.n	800a300 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800a2e4:	68fb      	ldr	r3, [r7, #12]
 800a2e6:	681b      	ldr	r3, [r3, #0]
 800a2e8:	2b00      	cmp	r3, #0
 800a2ea:	d14d      	bne.n	800a388 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 800a2ec:	68fb      	ldr	r3, [r7, #12]
 800a2ee:	685b      	ldr	r3, [r3, #4]
 800a2f0:	4618      	mov	r0, r3
 800a2f2:	f000 ff77 	bl	800b1e4 <xTaskPriorityDisinherit>
 800a2f6:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 800a2f8:	68fb      	ldr	r3, [r7, #12]
 800a2fa:	2200      	movs	r2, #0
 800a2fc:	605a      	str	r2, [r3, #4]
 800a2fe:	e043      	b.n	800a388 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800a300:	687b      	ldr	r3, [r7, #4]
 800a302:	2b00      	cmp	r3, #0
 800a304:	d119      	bne.n	800a33a <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 800a306:	68fb      	ldr	r3, [r7, #12]
 800a308:	6898      	ldr	r0, [r3, #8]
 800a30a:	68fb      	ldr	r3, [r7, #12]
 800a30c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a30e:	461a      	mov	r2, r3
 800a310:	68b9      	ldr	r1, [r7, #8]
 800a312:	f00e f8de 	bl	80184d2 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 800a316:	68fb      	ldr	r3, [r7, #12]
 800a318:	689a      	ldr	r2, [r3, #8]
 800a31a:	68fb      	ldr	r3, [r7, #12]
 800a31c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a31e:	441a      	add	r2, r3
 800a320:	68fb      	ldr	r3, [r7, #12]
 800a322:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800a324:	68fb      	ldr	r3, [r7, #12]
 800a326:	689a      	ldr	r2, [r3, #8]
 800a328:	68fb      	ldr	r3, [r7, #12]
 800a32a:	685b      	ldr	r3, [r3, #4]
 800a32c:	429a      	cmp	r2, r3
 800a32e:	d32b      	bcc.n	800a388 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800a330:	68fb      	ldr	r3, [r7, #12]
 800a332:	681a      	ldr	r2, [r3, #0]
 800a334:	68fb      	ldr	r3, [r7, #12]
 800a336:	609a      	str	r2, [r3, #8]
 800a338:	e026      	b.n	800a388 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a33a:	68fb      	ldr	r3, [r7, #12]
 800a33c:	68d8      	ldr	r0, [r3, #12]
 800a33e:	68fb      	ldr	r3, [r7, #12]
 800a340:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a342:	461a      	mov	r2, r3
 800a344:	68b9      	ldr	r1, [r7, #8]
 800a346:	f00e f8c4 	bl	80184d2 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 800a34a:	68fb      	ldr	r3, [r7, #12]
 800a34c:	68da      	ldr	r2, [r3, #12]
 800a34e:	68fb      	ldr	r3, [r7, #12]
 800a350:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a352:	425b      	negs	r3, r3
 800a354:	441a      	add	r2, r3
 800a356:	68fb      	ldr	r3, [r7, #12]
 800a358:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800a35a:	68fb      	ldr	r3, [r7, #12]
 800a35c:	68da      	ldr	r2, [r3, #12]
 800a35e:	68fb      	ldr	r3, [r7, #12]
 800a360:	681b      	ldr	r3, [r3, #0]
 800a362:	429a      	cmp	r2, r3
 800a364:	d207      	bcs.n	800a376 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 800a366:	68fb      	ldr	r3, [r7, #12]
 800a368:	685a      	ldr	r2, [r3, #4]
 800a36a:	68fb      	ldr	r3, [r7, #12]
 800a36c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a36e:	425b      	negs	r3, r3
 800a370:	441a      	add	r2, r3
 800a372:	68fb      	ldr	r3, [r7, #12]
 800a374:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800a376:	687b      	ldr	r3, [r7, #4]
 800a378:	2b02      	cmp	r3, #2
 800a37a:	d105      	bne.n	800a388 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a37c:	693b      	ldr	r3, [r7, #16]
 800a37e:	2b00      	cmp	r3, #0
 800a380:	d002      	beq.n	800a388 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800a382:	693b      	ldr	r3, [r7, #16]
 800a384:	3b01      	subs	r3, #1
 800a386:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800a388:	693b      	ldr	r3, [r7, #16]
 800a38a:	1c5a      	adds	r2, r3, #1
 800a38c:	68fb      	ldr	r3, [r7, #12]
 800a38e:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800a390:	697b      	ldr	r3, [r7, #20]
}
 800a392:	4618      	mov	r0, r3
 800a394:	3718      	adds	r7, #24
 800a396:	46bd      	mov	sp, r7
 800a398:	bd80      	pop	{r7, pc}

0800a39a <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800a39a:	b580      	push	{r7, lr}
 800a39c:	b082      	sub	sp, #8
 800a39e:	af00      	add	r7, sp, #0
 800a3a0:	6078      	str	r0, [r7, #4]
 800a3a2:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800a3a4:	687b      	ldr	r3, [r7, #4]
 800a3a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a3a8:	2b00      	cmp	r3, #0
 800a3aa:	d018      	beq.n	800a3de <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 800a3ac:	687b      	ldr	r3, [r7, #4]
 800a3ae:	68da      	ldr	r2, [r3, #12]
 800a3b0:	687b      	ldr	r3, [r7, #4]
 800a3b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a3b4:	441a      	add	r2, r3
 800a3b6:	687b      	ldr	r3, [r7, #4]
 800a3b8:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800a3ba:	687b      	ldr	r3, [r7, #4]
 800a3bc:	68da      	ldr	r2, [r3, #12]
 800a3be:	687b      	ldr	r3, [r7, #4]
 800a3c0:	685b      	ldr	r3, [r3, #4]
 800a3c2:	429a      	cmp	r2, r3
 800a3c4:	d303      	bcc.n	800a3ce <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 800a3c6:	687b      	ldr	r3, [r7, #4]
 800a3c8:	681a      	ldr	r2, [r3, #0]
 800a3ca:	687b      	ldr	r3, [r7, #4]
 800a3cc:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 800a3ce:	687b      	ldr	r3, [r7, #4]
 800a3d0:	68d9      	ldr	r1, [r3, #12]
 800a3d2:	687b      	ldr	r3, [r7, #4]
 800a3d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a3d6:	461a      	mov	r2, r3
 800a3d8:	6838      	ldr	r0, [r7, #0]
 800a3da:	f00e f87a 	bl	80184d2 <memcpy>
	}
}
 800a3de:	bf00      	nop
 800a3e0:	3708      	adds	r7, #8
 800a3e2:	46bd      	mov	sp, r7
 800a3e4:	bd80      	pop	{r7, pc}

0800a3e6 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800a3e6:	b580      	push	{r7, lr}
 800a3e8:	b084      	sub	sp, #16
 800a3ea:	af00      	add	r7, sp, #0
 800a3ec:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800a3ee:	f001 f9bd 	bl	800b76c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800a3f2:	687b      	ldr	r3, [r7, #4]
 800a3f4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a3f8:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800a3fa:	e011      	b.n	800a420 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a3fc:	687b      	ldr	r3, [r7, #4]
 800a3fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a400:	2b00      	cmp	r3, #0
 800a402:	d012      	beq.n	800a42a <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a404:	687b      	ldr	r3, [r7, #4]
 800a406:	3324      	adds	r3, #36	; 0x24
 800a408:	4618      	mov	r0, r3
 800a40a:	f000 fc8b 	bl	800ad24 <xTaskRemoveFromEventList>
 800a40e:	4603      	mov	r3, r0
 800a410:	2b00      	cmp	r3, #0
 800a412:	d001      	beq.n	800a418 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800a414:	f000 fd5e 	bl	800aed4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800a418:	7bfb      	ldrb	r3, [r7, #15]
 800a41a:	3b01      	subs	r3, #1
 800a41c:	b2db      	uxtb	r3, r3
 800a41e:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800a420:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a424:	2b00      	cmp	r3, #0
 800a426:	dce9      	bgt.n	800a3fc <prvUnlockQueue+0x16>
 800a428:	e000      	b.n	800a42c <prvUnlockQueue+0x46>
					break;
 800a42a:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800a42c:	687b      	ldr	r3, [r7, #4]
 800a42e:	22ff      	movs	r2, #255	; 0xff
 800a430:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800a434:	f001 f9c8 	bl	800b7c8 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800a438:	f001 f998 	bl	800b76c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800a43c:	687b      	ldr	r3, [r7, #4]
 800a43e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a442:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800a444:	e011      	b.n	800a46a <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a446:	687b      	ldr	r3, [r7, #4]
 800a448:	691b      	ldr	r3, [r3, #16]
 800a44a:	2b00      	cmp	r3, #0
 800a44c:	d012      	beq.n	800a474 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a44e:	687b      	ldr	r3, [r7, #4]
 800a450:	3310      	adds	r3, #16
 800a452:	4618      	mov	r0, r3
 800a454:	f000 fc66 	bl	800ad24 <xTaskRemoveFromEventList>
 800a458:	4603      	mov	r3, r0
 800a45a:	2b00      	cmp	r3, #0
 800a45c:	d001      	beq.n	800a462 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800a45e:	f000 fd39 	bl	800aed4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800a462:	7bbb      	ldrb	r3, [r7, #14]
 800a464:	3b01      	subs	r3, #1
 800a466:	b2db      	uxtb	r3, r3
 800a468:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800a46a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a46e:	2b00      	cmp	r3, #0
 800a470:	dce9      	bgt.n	800a446 <prvUnlockQueue+0x60>
 800a472:	e000      	b.n	800a476 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800a474:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800a476:	687b      	ldr	r3, [r7, #4]
 800a478:	22ff      	movs	r2, #255	; 0xff
 800a47a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800a47e:	f001 f9a3 	bl	800b7c8 <vPortExitCritical>
}
 800a482:	bf00      	nop
 800a484:	3710      	adds	r7, #16
 800a486:	46bd      	mov	sp, r7
 800a488:	bd80      	pop	{r7, pc}

0800a48a <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800a48a:	b580      	push	{r7, lr}
 800a48c:	b084      	sub	sp, #16
 800a48e:	af00      	add	r7, sp, #0
 800a490:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800a492:	f001 f96b 	bl	800b76c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800a496:	687b      	ldr	r3, [r7, #4]
 800a498:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a49a:	2b00      	cmp	r3, #0
 800a49c:	d102      	bne.n	800a4a4 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800a49e:	2301      	movs	r3, #1
 800a4a0:	60fb      	str	r3, [r7, #12]
 800a4a2:	e001      	b.n	800a4a8 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800a4a4:	2300      	movs	r3, #0
 800a4a6:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800a4a8:	f001 f98e 	bl	800b7c8 <vPortExitCritical>

	return xReturn;
 800a4ac:	68fb      	ldr	r3, [r7, #12]
}
 800a4ae:	4618      	mov	r0, r3
 800a4b0:	3710      	adds	r7, #16
 800a4b2:	46bd      	mov	sp, r7
 800a4b4:	bd80      	pop	{r7, pc}

0800a4b6 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800a4b6:	b580      	push	{r7, lr}
 800a4b8:	b084      	sub	sp, #16
 800a4ba:	af00      	add	r7, sp, #0
 800a4bc:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800a4be:	f001 f955 	bl	800b76c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800a4c2:	687b      	ldr	r3, [r7, #4]
 800a4c4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a4c6:	687b      	ldr	r3, [r7, #4]
 800a4c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a4ca:	429a      	cmp	r2, r3
 800a4cc:	d102      	bne.n	800a4d4 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800a4ce:	2301      	movs	r3, #1
 800a4d0:	60fb      	str	r3, [r7, #12]
 800a4d2:	e001      	b.n	800a4d8 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800a4d4:	2300      	movs	r3, #0
 800a4d6:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800a4d8:	f001 f976 	bl	800b7c8 <vPortExitCritical>

	return xReturn;
 800a4dc:	68fb      	ldr	r3, [r7, #12]
}
 800a4de:	4618      	mov	r0, r3
 800a4e0:	3710      	adds	r7, #16
 800a4e2:	46bd      	mov	sp, r7
 800a4e4:	bd80      	pop	{r7, pc}

0800a4e6 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800a4e6:	b580      	push	{r7, lr}
 800a4e8:	b08e      	sub	sp, #56	; 0x38
 800a4ea:	af04      	add	r7, sp, #16
 800a4ec:	60f8      	str	r0, [r7, #12]
 800a4ee:	60b9      	str	r1, [r7, #8]
 800a4f0:	607a      	str	r2, [r7, #4]
 800a4f2:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800a4f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a4f6:	2b00      	cmp	r3, #0
 800a4f8:	d109      	bne.n	800a50e <xTaskCreateStatic+0x28>
	__asm volatile
 800a4fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a4fe:	f383 8811 	msr	BASEPRI, r3
 800a502:	f3bf 8f6f 	isb	sy
 800a506:	f3bf 8f4f 	dsb	sy
 800a50a:	623b      	str	r3, [r7, #32]
 800a50c:	e7fe      	b.n	800a50c <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 800a50e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a510:	2b00      	cmp	r3, #0
 800a512:	d109      	bne.n	800a528 <xTaskCreateStatic+0x42>
 800a514:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a518:	f383 8811 	msr	BASEPRI, r3
 800a51c:	f3bf 8f6f 	isb	sy
 800a520:	f3bf 8f4f 	dsb	sy
 800a524:	61fb      	str	r3, [r7, #28]
 800a526:	e7fe      	b.n	800a526 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800a528:	2354      	movs	r3, #84	; 0x54
 800a52a:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800a52c:	693b      	ldr	r3, [r7, #16]
 800a52e:	2b54      	cmp	r3, #84	; 0x54
 800a530:	d009      	beq.n	800a546 <xTaskCreateStatic+0x60>
 800a532:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a536:	f383 8811 	msr	BASEPRI, r3
 800a53a:	f3bf 8f6f 	isb	sy
 800a53e:	f3bf 8f4f 	dsb	sy
 800a542:	61bb      	str	r3, [r7, #24]
 800a544:	e7fe      	b.n	800a544 <xTaskCreateStatic+0x5e>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800a546:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a548:	2b00      	cmp	r3, #0
 800a54a:	d01e      	beq.n	800a58a <xTaskCreateStatic+0xa4>
 800a54c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a54e:	2b00      	cmp	r3, #0
 800a550:	d01b      	beq.n	800a58a <xTaskCreateStatic+0xa4>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800a552:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a554:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800a556:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a558:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a55a:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800a55c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a55e:	2202      	movs	r2, #2
 800a560:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800a564:	2300      	movs	r3, #0
 800a566:	9303      	str	r3, [sp, #12]
 800a568:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a56a:	9302      	str	r3, [sp, #8]
 800a56c:	f107 0314 	add.w	r3, r7, #20
 800a570:	9301      	str	r3, [sp, #4]
 800a572:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a574:	9300      	str	r3, [sp, #0]
 800a576:	683b      	ldr	r3, [r7, #0]
 800a578:	687a      	ldr	r2, [r7, #4]
 800a57a:	68b9      	ldr	r1, [r7, #8]
 800a57c:	68f8      	ldr	r0, [r7, #12]
 800a57e:	f000 f850 	bl	800a622 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800a582:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a584:	f000 f8cc 	bl	800a720 <prvAddNewTaskToReadyList>
 800a588:	e001      	b.n	800a58e <xTaskCreateStatic+0xa8>
		}
		else
		{
			xReturn = NULL;
 800a58a:	2300      	movs	r3, #0
 800a58c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800a58e:	697b      	ldr	r3, [r7, #20]
	}
 800a590:	4618      	mov	r0, r3
 800a592:	3728      	adds	r7, #40	; 0x28
 800a594:	46bd      	mov	sp, r7
 800a596:	bd80      	pop	{r7, pc}

0800a598 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800a598:	b580      	push	{r7, lr}
 800a59a:	b08c      	sub	sp, #48	; 0x30
 800a59c:	af04      	add	r7, sp, #16
 800a59e:	60f8      	str	r0, [r7, #12]
 800a5a0:	60b9      	str	r1, [r7, #8]
 800a5a2:	603b      	str	r3, [r7, #0]
 800a5a4:	4613      	mov	r3, r2
 800a5a6:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a5a8:	88fb      	ldrh	r3, [r7, #6]
 800a5aa:	009b      	lsls	r3, r3, #2
 800a5ac:	4618      	mov	r0, r3
 800a5ae:	f001 f9f7 	bl	800b9a0 <pvPortMalloc>
 800a5b2:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800a5b4:	697b      	ldr	r3, [r7, #20]
 800a5b6:	2b00      	cmp	r3, #0
 800a5b8:	d00e      	beq.n	800a5d8 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 800a5ba:	2054      	movs	r0, #84	; 0x54
 800a5bc:	f001 f9f0 	bl	800b9a0 <pvPortMalloc>
 800a5c0:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800a5c2:	69fb      	ldr	r3, [r7, #28]
 800a5c4:	2b00      	cmp	r3, #0
 800a5c6:	d003      	beq.n	800a5d0 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800a5c8:	69fb      	ldr	r3, [r7, #28]
 800a5ca:	697a      	ldr	r2, [r7, #20]
 800a5cc:	631a      	str	r2, [r3, #48]	; 0x30
 800a5ce:	e005      	b.n	800a5dc <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800a5d0:	6978      	ldr	r0, [r7, #20]
 800a5d2:	f001 faa7 	bl	800bb24 <vPortFree>
 800a5d6:	e001      	b.n	800a5dc <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800a5d8:	2300      	movs	r3, #0
 800a5da:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800a5dc:	69fb      	ldr	r3, [r7, #28]
 800a5de:	2b00      	cmp	r3, #0
 800a5e0:	d017      	beq.n	800a612 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800a5e2:	69fb      	ldr	r3, [r7, #28]
 800a5e4:	2200      	movs	r2, #0
 800a5e6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800a5ea:	88fa      	ldrh	r2, [r7, #6]
 800a5ec:	2300      	movs	r3, #0
 800a5ee:	9303      	str	r3, [sp, #12]
 800a5f0:	69fb      	ldr	r3, [r7, #28]
 800a5f2:	9302      	str	r3, [sp, #8]
 800a5f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a5f6:	9301      	str	r3, [sp, #4]
 800a5f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a5fa:	9300      	str	r3, [sp, #0]
 800a5fc:	683b      	ldr	r3, [r7, #0]
 800a5fe:	68b9      	ldr	r1, [r7, #8]
 800a600:	68f8      	ldr	r0, [r7, #12]
 800a602:	f000 f80e 	bl	800a622 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800a606:	69f8      	ldr	r0, [r7, #28]
 800a608:	f000 f88a 	bl	800a720 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800a60c:	2301      	movs	r3, #1
 800a60e:	61bb      	str	r3, [r7, #24]
 800a610:	e002      	b.n	800a618 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800a612:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a616:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800a618:	69bb      	ldr	r3, [r7, #24]
	}
 800a61a:	4618      	mov	r0, r3
 800a61c:	3720      	adds	r7, #32
 800a61e:	46bd      	mov	sp, r7
 800a620:	bd80      	pop	{r7, pc}

0800a622 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800a622:	b580      	push	{r7, lr}
 800a624:	b088      	sub	sp, #32
 800a626:	af00      	add	r7, sp, #0
 800a628:	60f8      	str	r0, [r7, #12]
 800a62a:	60b9      	str	r1, [r7, #8]
 800a62c:	607a      	str	r2, [r7, #4]
 800a62e:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 800a630:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a632:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a634:	687b      	ldr	r3, [r7, #4]
 800a636:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800a63a:	3b01      	subs	r3, #1
 800a63c:	009b      	lsls	r3, r3, #2
 800a63e:	4413      	add	r3, r2
 800a640:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 800a642:	69bb      	ldr	r3, [r7, #24]
 800a644:	f023 0307 	bic.w	r3, r3, #7
 800a648:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800a64a:	69bb      	ldr	r3, [r7, #24]
 800a64c:	f003 0307 	and.w	r3, r3, #7
 800a650:	2b00      	cmp	r3, #0
 800a652:	d009      	beq.n	800a668 <prvInitialiseNewTask+0x46>
 800a654:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a658:	f383 8811 	msr	BASEPRI, r3
 800a65c:	f3bf 8f6f 	isb	sy
 800a660:	f3bf 8f4f 	dsb	sy
 800a664:	617b      	str	r3, [r7, #20]
 800a666:	e7fe      	b.n	800a666 <prvInitialiseNewTask+0x44>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800a668:	2300      	movs	r3, #0
 800a66a:	61fb      	str	r3, [r7, #28]
 800a66c:	e012      	b.n	800a694 <prvInitialiseNewTask+0x72>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800a66e:	68ba      	ldr	r2, [r7, #8]
 800a670:	69fb      	ldr	r3, [r7, #28]
 800a672:	4413      	add	r3, r2
 800a674:	7819      	ldrb	r1, [r3, #0]
 800a676:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a678:	69fb      	ldr	r3, [r7, #28]
 800a67a:	4413      	add	r3, r2
 800a67c:	3334      	adds	r3, #52	; 0x34
 800a67e:	460a      	mov	r2, r1
 800a680:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 800a682:	68ba      	ldr	r2, [r7, #8]
 800a684:	69fb      	ldr	r3, [r7, #28]
 800a686:	4413      	add	r3, r2
 800a688:	781b      	ldrb	r3, [r3, #0]
 800a68a:	2b00      	cmp	r3, #0
 800a68c:	d006      	beq.n	800a69c <prvInitialiseNewTask+0x7a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800a68e:	69fb      	ldr	r3, [r7, #28]
 800a690:	3301      	adds	r3, #1
 800a692:	61fb      	str	r3, [r7, #28]
 800a694:	69fb      	ldr	r3, [r7, #28]
 800a696:	2b0f      	cmp	r3, #15
 800a698:	d9e9      	bls.n	800a66e <prvInitialiseNewTask+0x4c>
 800a69a:	e000      	b.n	800a69e <prvInitialiseNewTask+0x7c>
		{
			break;
 800a69c:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800a69e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a6a0:	2200      	movs	r2, #0
 800a6a2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800a6a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a6a8:	2b06      	cmp	r3, #6
 800a6aa:	d901      	bls.n	800a6b0 <prvInitialiseNewTask+0x8e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800a6ac:	2306      	movs	r3, #6
 800a6ae:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800a6b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a6b2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a6b4:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800a6b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a6b8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a6ba:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800a6bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a6be:	2200      	movs	r2, #0
 800a6c0:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800a6c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a6c4:	3304      	adds	r3, #4
 800a6c6:	4618      	mov	r0, r3
 800a6c8:	f7fe ff54 	bl	8009574 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800a6cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a6ce:	3318      	adds	r3, #24
 800a6d0:	4618      	mov	r0, r3
 800a6d2:	f7fe ff4f 	bl	8009574 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800a6d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a6d8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a6da:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a6dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a6de:	f1c3 0207 	rsb	r2, r3, #7
 800a6e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a6e4:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800a6e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a6e8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a6ea:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800a6ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a6ee:	2200      	movs	r2, #0
 800a6f0:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800a6f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a6f4:	2200      	movs	r2, #0
 800a6f6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800a6fa:	683a      	ldr	r2, [r7, #0]
 800a6fc:	68f9      	ldr	r1, [r7, #12]
 800a6fe:	69b8      	ldr	r0, [r7, #24]
 800a700:	f000 ff0c 	bl	800b51c <pxPortInitialiseStack>
 800a704:	4602      	mov	r2, r0
 800a706:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a708:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 800a70a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a70c:	2b00      	cmp	r3, #0
 800a70e:	d002      	beq.n	800a716 <prvInitialiseNewTask+0xf4>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800a710:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a712:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a714:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a716:	bf00      	nop
 800a718:	3720      	adds	r7, #32
 800a71a:	46bd      	mov	sp, r7
 800a71c:	bd80      	pop	{r7, pc}
	...

0800a720 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800a720:	b580      	push	{r7, lr}
 800a722:	b082      	sub	sp, #8
 800a724:	af00      	add	r7, sp, #0
 800a726:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800a728:	f001 f820 	bl	800b76c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800a72c:	4b2a      	ldr	r3, [pc, #168]	; (800a7d8 <prvAddNewTaskToReadyList+0xb8>)
 800a72e:	681b      	ldr	r3, [r3, #0]
 800a730:	3301      	adds	r3, #1
 800a732:	4a29      	ldr	r2, [pc, #164]	; (800a7d8 <prvAddNewTaskToReadyList+0xb8>)
 800a734:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800a736:	4b29      	ldr	r3, [pc, #164]	; (800a7dc <prvAddNewTaskToReadyList+0xbc>)
 800a738:	681b      	ldr	r3, [r3, #0]
 800a73a:	2b00      	cmp	r3, #0
 800a73c:	d109      	bne.n	800a752 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800a73e:	4a27      	ldr	r2, [pc, #156]	; (800a7dc <prvAddNewTaskToReadyList+0xbc>)
 800a740:	687b      	ldr	r3, [r7, #4]
 800a742:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800a744:	4b24      	ldr	r3, [pc, #144]	; (800a7d8 <prvAddNewTaskToReadyList+0xb8>)
 800a746:	681b      	ldr	r3, [r3, #0]
 800a748:	2b01      	cmp	r3, #1
 800a74a:	d110      	bne.n	800a76e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800a74c:	f000 fbe6 	bl	800af1c <prvInitialiseTaskLists>
 800a750:	e00d      	b.n	800a76e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800a752:	4b23      	ldr	r3, [pc, #140]	; (800a7e0 <prvAddNewTaskToReadyList+0xc0>)
 800a754:	681b      	ldr	r3, [r3, #0]
 800a756:	2b00      	cmp	r3, #0
 800a758:	d109      	bne.n	800a76e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800a75a:	4b20      	ldr	r3, [pc, #128]	; (800a7dc <prvAddNewTaskToReadyList+0xbc>)
 800a75c:	681b      	ldr	r3, [r3, #0]
 800a75e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a760:	687b      	ldr	r3, [r7, #4]
 800a762:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a764:	429a      	cmp	r2, r3
 800a766:	d802      	bhi.n	800a76e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800a768:	4a1c      	ldr	r2, [pc, #112]	; (800a7dc <prvAddNewTaskToReadyList+0xbc>)
 800a76a:	687b      	ldr	r3, [r7, #4]
 800a76c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800a76e:	4b1d      	ldr	r3, [pc, #116]	; (800a7e4 <prvAddNewTaskToReadyList+0xc4>)
 800a770:	681b      	ldr	r3, [r3, #0]
 800a772:	3301      	adds	r3, #1
 800a774:	4a1b      	ldr	r2, [pc, #108]	; (800a7e4 <prvAddNewTaskToReadyList+0xc4>)
 800a776:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800a778:	687b      	ldr	r3, [r7, #4]
 800a77a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a77c:	2201      	movs	r2, #1
 800a77e:	409a      	lsls	r2, r3
 800a780:	4b19      	ldr	r3, [pc, #100]	; (800a7e8 <prvAddNewTaskToReadyList+0xc8>)
 800a782:	681b      	ldr	r3, [r3, #0]
 800a784:	4313      	orrs	r3, r2
 800a786:	4a18      	ldr	r2, [pc, #96]	; (800a7e8 <prvAddNewTaskToReadyList+0xc8>)
 800a788:	6013      	str	r3, [r2, #0]
 800a78a:	687b      	ldr	r3, [r7, #4]
 800a78c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a78e:	4613      	mov	r3, r2
 800a790:	009b      	lsls	r3, r3, #2
 800a792:	4413      	add	r3, r2
 800a794:	009b      	lsls	r3, r3, #2
 800a796:	4a15      	ldr	r2, [pc, #84]	; (800a7ec <prvAddNewTaskToReadyList+0xcc>)
 800a798:	441a      	add	r2, r3
 800a79a:	687b      	ldr	r3, [r7, #4]
 800a79c:	3304      	adds	r3, #4
 800a79e:	4619      	mov	r1, r3
 800a7a0:	4610      	mov	r0, r2
 800a7a2:	f7fe fef4 	bl	800958e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800a7a6:	f001 f80f 	bl	800b7c8 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800a7aa:	4b0d      	ldr	r3, [pc, #52]	; (800a7e0 <prvAddNewTaskToReadyList+0xc0>)
 800a7ac:	681b      	ldr	r3, [r3, #0]
 800a7ae:	2b00      	cmp	r3, #0
 800a7b0:	d00e      	beq.n	800a7d0 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800a7b2:	4b0a      	ldr	r3, [pc, #40]	; (800a7dc <prvAddNewTaskToReadyList+0xbc>)
 800a7b4:	681b      	ldr	r3, [r3, #0]
 800a7b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a7b8:	687b      	ldr	r3, [r7, #4]
 800a7ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a7bc:	429a      	cmp	r2, r3
 800a7be:	d207      	bcs.n	800a7d0 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800a7c0:	4b0b      	ldr	r3, [pc, #44]	; (800a7f0 <prvAddNewTaskToReadyList+0xd0>)
 800a7c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a7c6:	601a      	str	r2, [r3, #0]
 800a7c8:	f3bf 8f4f 	dsb	sy
 800a7cc:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a7d0:	bf00      	nop
 800a7d2:	3708      	adds	r7, #8
 800a7d4:	46bd      	mov	sp, r7
 800a7d6:	bd80      	pop	{r7, pc}
 800a7d8:	20000574 	.word	0x20000574
 800a7dc:	20000474 	.word	0x20000474
 800a7e0:	20000580 	.word	0x20000580
 800a7e4:	20000590 	.word	0x20000590
 800a7e8:	2000057c 	.word	0x2000057c
 800a7ec:	20000478 	.word	0x20000478
 800a7f0:	e000ed04 	.word	0xe000ed04

0800a7f4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800a7f4:	b580      	push	{r7, lr}
 800a7f6:	b084      	sub	sp, #16
 800a7f8:	af00      	add	r7, sp, #0
 800a7fa:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800a7fc:	2300      	movs	r3, #0
 800a7fe:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800a800:	687b      	ldr	r3, [r7, #4]
 800a802:	2b00      	cmp	r3, #0
 800a804:	d016      	beq.n	800a834 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800a806:	4b13      	ldr	r3, [pc, #76]	; (800a854 <vTaskDelay+0x60>)
 800a808:	681b      	ldr	r3, [r3, #0]
 800a80a:	2b00      	cmp	r3, #0
 800a80c:	d009      	beq.n	800a822 <vTaskDelay+0x2e>
 800a80e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a812:	f383 8811 	msr	BASEPRI, r3
 800a816:	f3bf 8f6f 	isb	sy
 800a81a:	f3bf 8f4f 	dsb	sy
 800a81e:	60bb      	str	r3, [r7, #8]
 800a820:	e7fe      	b.n	800a820 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 800a822:	f000 f879 	bl	800a918 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800a826:	2100      	movs	r1, #0
 800a828:	6878      	ldr	r0, [r7, #4]
 800a82a:	f000 fe11 	bl	800b450 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800a82e:	f000 f881 	bl	800a934 <xTaskResumeAll>
 800a832:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800a834:	68fb      	ldr	r3, [r7, #12]
 800a836:	2b00      	cmp	r3, #0
 800a838:	d107      	bne.n	800a84a <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 800a83a:	4b07      	ldr	r3, [pc, #28]	; (800a858 <vTaskDelay+0x64>)
 800a83c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a840:	601a      	str	r2, [r3, #0]
 800a842:	f3bf 8f4f 	dsb	sy
 800a846:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800a84a:	bf00      	nop
 800a84c:	3710      	adds	r7, #16
 800a84e:	46bd      	mov	sp, r7
 800a850:	bd80      	pop	{r7, pc}
 800a852:	bf00      	nop
 800a854:	2000059c 	.word	0x2000059c
 800a858:	e000ed04 	.word	0xe000ed04

0800a85c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800a85c:	b580      	push	{r7, lr}
 800a85e:	b08a      	sub	sp, #40	; 0x28
 800a860:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800a862:	2300      	movs	r3, #0
 800a864:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800a866:	2300      	movs	r3, #0
 800a868:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800a86a:	463a      	mov	r2, r7
 800a86c:	1d39      	adds	r1, r7, #4
 800a86e:	f107 0308 	add.w	r3, r7, #8
 800a872:	4618      	mov	r0, r3
 800a874:	f7f6 f92a 	bl	8000acc <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800a878:	6839      	ldr	r1, [r7, #0]
 800a87a:	687b      	ldr	r3, [r7, #4]
 800a87c:	68ba      	ldr	r2, [r7, #8]
 800a87e:	9202      	str	r2, [sp, #8]
 800a880:	9301      	str	r3, [sp, #4]
 800a882:	2300      	movs	r3, #0
 800a884:	9300      	str	r3, [sp, #0]
 800a886:	2300      	movs	r3, #0
 800a888:	460a      	mov	r2, r1
 800a88a:	491d      	ldr	r1, [pc, #116]	; (800a900 <vTaskStartScheduler+0xa4>)
 800a88c:	481d      	ldr	r0, [pc, #116]	; (800a904 <vTaskStartScheduler+0xa8>)
 800a88e:	f7ff fe2a 	bl	800a4e6 <xTaskCreateStatic>
 800a892:	4602      	mov	r2, r0
 800a894:	4b1c      	ldr	r3, [pc, #112]	; (800a908 <vTaskStartScheduler+0xac>)
 800a896:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800a898:	4b1b      	ldr	r3, [pc, #108]	; (800a908 <vTaskStartScheduler+0xac>)
 800a89a:	681b      	ldr	r3, [r3, #0]
 800a89c:	2b00      	cmp	r3, #0
 800a89e:	d002      	beq.n	800a8a6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800a8a0:	2301      	movs	r3, #1
 800a8a2:	617b      	str	r3, [r7, #20]
 800a8a4:	e001      	b.n	800a8aa <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800a8a6:	2300      	movs	r3, #0
 800a8a8:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800a8aa:	697b      	ldr	r3, [r7, #20]
 800a8ac:	2b01      	cmp	r3, #1
 800a8ae:	d115      	bne.n	800a8dc <vTaskStartScheduler+0x80>
 800a8b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a8b4:	f383 8811 	msr	BASEPRI, r3
 800a8b8:	f3bf 8f6f 	isb	sy
 800a8bc:	f3bf 8f4f 	dsb	sy
 800a8c0:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800a8c2:	4b12      	ldr	r3, [pc, #72]	; (800a90c <vTaskStartScheduler+0xb0>)
 800a8c4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a8c8:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800a8ca:	4b11      	ldr	r3, [pc, #68]	; (800a910 <vTaskStartScheduler+0xb4>)
 800a8cc:	2201      	movs	r2, #1
 800a8ce:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 800a8d0:	4b10      	ldr	r3, [pc, #64]	; (800a914 <vTaskStartScheduler+0xb8>)
 800a8d2:	2200      	movs	r2, #0
 800a8d4:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800a8d6:	f000 feab 	bl	800b630 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800a8da:	e00d      	b.n	800a8f8 <vTaskStartScheduler+0x9c>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800a8dc:	697b      	ldr	r3, [r7, #20]
 800a8de:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a8e2:	d109      	bne.n	800a8f8 <vTaskStartScheduler+0x9c>
 800a8e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a8e8:	f383 8811 	msr	BASEPRI, r3
 800a8ec:	f3bf 8f6f 	isb	sy
 800a8f0:	f3bf 8f4f 	dsb	sy
 800a8f4:	60fb      	str	r3, [r7, #12]
 800a8f6:	e7fe      	b.n	800a8f6 <vTaskStartScheduler+0x9a>
}
 800a8f8:	bf00      	nop
 800a8fa:	3718      	adds	r7, #24
 800a8fc:	46bd      	mov	sp, r7
 800a8fe:	bd80      	pop	{r7, pc}
 800a900:	080194d8 	.word	0x080194d8
 800a904:	0800aeed 	.word	0x0800aeed
 800a908:	20000598 	.word	0x20000598
 800a90c:	20000594 	.word	0x20000594
 800a910:	20000580 	.word	0x20000580
 800a914:	20000578 	.word	0x20000578

0800a918 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800a918:	b480      	push	{r7}
 800a91a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800a91c:	4b04      	ldr	r3, [pc, #16]	; (800a930 <vTaskSuspendAll+0x18>)
 800a91e:	681b      	ldr	r3, [r3, #0]
 800a920:	3301      	adds	r3, #1
 800a922:	4a03      	ldr	r2, [pc, #12]	; (800a930 <vTaskSuspendAll+0x18>)
 800a924:	6013      	str	r3, [r2, #0]
}
 800a926:	bf00      	nop
 800a928:	46bd      	mov	sp, r7
 800a92a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a92e:	4770      	bx	lr
 800a930:	2000059c 	.word	0x2000059c

0800a934 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800a934:	b580      	push	{r7, lr}
 800a936:	b084      	sub	sp, #16
 800a938:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800a93a:	2300      	movs	r3, #0
 800a93c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800a93e:	2300      	movs	r3, #0
 800a940:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800a942:	4b41      	ldr	r3, [pc, #260]	; (800aa48 <xTaskResumeAll+0x114>)
 800a944:	681b      	ldr	r3, [r3, #0]
 800a946:	2b00      	cmp	r3, #0
 800a948:	d109      	bne.n	800a95e <xTaskResumeAll+0x2a>
 800a94a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a94e:	f383 8811 	msr	BASEPRI, r3
 800a952:	f3bf 8f6f 	isb	sy
 800a956:	f3bf 8f4f 	dsb	sy
 800a95a:	603b      	str	r3, [r7, #0]
 800a95c:	e7fe      	b.n	800a95c <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800a95e:	f000 ff05 	bl	800b76c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800a962:	4b39      	ldr	r3, [pc, #228]	; (800aa48 <xTaskResumeAll+0x114>)
 800a964:	681b      	ldr	r3, [r3, #0]
 800a966:	3b01      	subs	r3, #1
 800a968:	4a37      	ldr	r2, [pc, #220]	; (800aa48 <xTaskResumeAll+0x114>)
 800a96a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a96c:	4b36      	ldr	r3, [pc, #216]	; (800aa48 <xTaskResumeAll+0x114>)
 800a96e:	681b      	ldr	r3, [r3, #0]
 800a970:	2b00      	cmp	r3, #0
 800a972:	d161      	bne.n	800aa38 <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800a974:	4b35      	ldr	r3, [pc, #212]	; (800aa4c <xTaskResumeAll+0x118>)
 800a976:	681b      	ldr	r3, [r3, #0]
 800a978:	2b00      	cmp	r3, #0
 800a97a:	d05d      	beq.n	800aa38 <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a97c:	e02e      	b.n	800a9dc <xTaskResumeAll+0xa8>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 800a97e:	4b34      	ldr	r3, [pc, #208]	; (800aa50 <xTaskResumeAll+0x11c>)
 800a980:	68db      	ldr	r3, [r3, #12]
 800a982:	68db      	ldr	r3, [r3, #12]
 800a984:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a986:	68fb      	ldr	r3, [r7, #12]
 800a988:	3318      	adds	r3, #24
 800a98a:	4618      	mov	r0, r3
 800a98c:	f7fe fe5c 	bl	8009648 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a990:	68fb      	ldr	r3, [r7, #12]
 800a992:	3304      	adds	r3, #4
 800a994:	4618      	mov	r0, r3
 800a996:	f7fe fe57 	bl	8009648 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800a99a:	68fb      	ldr	r3, [r7, #12]
 800a99c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a99e:	2201      	movs	r2, #1
 800a9a0:	409a      	lsls	r2, r3
 800a9a2:	4b2c      	ldr	r3, [pc, #176]	; (800aa54 <xTaskResumeAll+0x120>)
 800a9a4:	681b      	ldr	r3, [r3, #0]
 800a9a6:	4313      	orrs	r3, r2
 800a9a8:	4a2a      	ldr	r2, [pc, #168]	; (800aa54 <xTaskResumeAll+0x120>)
 800a9aa:	6013      	str	r3, [r2, #0]
 800a9ac:	68fb      	ldr	r3, [r7, #12]
 800a9ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a9b0:	4613      	mov	r3, r2
 800a9b2:	009b      	lsls	r3, r3, #2
 800a9b4:	4413      	add	r3, r2
 800a9b6:	009b      	lsls	r3, r3, #2
 800a9b8:	4a27      	ldr	r2, [pc, #156]	; (800aa58 <xTaskResumeAll+0x124>)
 800a9ba:	441a      	add	r2, r3
 800a9bc:	68fb      	ldr	r3, [r7, #12]
 800a9be:	3304      	adds	r3, #4
 800a9c0:	4619      	mov	r1, r3
 800a9c2:	4610      	mov	r0, r2
 800a9c4:	f7fe fde3 	bl	800958e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a9c8:	68fb      	ldr	r3, [r7, #12]
 800a9ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a9cc:	4b23      	ldr	r3, [pc, #140]	; (800aa5c <xTaskResumeAll+0x128>)
 800a9ce:	681b      	ldr	r3, [r3, #0]
 800a9d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a9d2:	429a      	cmp	r2, r3
 800a9d4:	d302      	bcc.n	800a9dc <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 800a9d6:	4b22      	ldr	r3, [pc, #136]	; (800aa60 <xTaskResumeAll+0x12c>)
 800a9d8:	2201      	movs	r2, #1
 800a9da:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a9dc:	4b1c      	ldr	r3, [pc, #112]	; (800aa50 <xTaskResumeAll+0x11c>)
 800a9de:	681b      	ldr	r3, [r3, #0]
 800a9e0:	2b00      	cmp	r3, #0
 800a9e2:	d1cc      	bne.n	800a97e <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800a9e4:	68fb      	ldr	r3, [r7, #12]
 800a9e6:	2b00      	cmp	r3, #0
 800a9e8:	d001      	beq.n	800a9ee <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800a9ea:	f000 fb31 	bl	800b050 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800a9ee:	4b1d      	ldr	r3, [pc, #116]	; (800aa64 <xTaskResumeAll+0x130>)
 800a9f0:	681b      	ldr	r3, [r3, #0]
 800a9f2:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800a9f4:	687b      	ldr	r3, [r7, #4]
 800a9f6:	2b00      	cmp	r3, #0
 800a9f8:	d010      	beq.n	800aa1c <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800a9fa:	f000 f859 	bl	800aab0 <xTaskIncrementTick>
 800a9fe:	4603      	mov	r3, r0
 800aa00:	2b00      	cmp	r3, #0
 800aa02:	d002      	beq.n	800aa0a <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 800aa04:	4b16      	ldr	r3, [pc, #88]	; (800aa60 <xTaskResumeAll+0x12c>)
 800aa06:	2201      	movs	r2, #1
 800aa08:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800aa0a:	687b      	ldr	r3, [r7, #4]
 800aa0c:	3b01      	subs	r3, #1
 800aa0e:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800aa10:	687b      	ldr	r3, [r7, #4]
 800aa12:	2b00      	cmp	r3, #0
 800aa14:	d1f1      	bne.n	800a9fa <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 800aa16:	4b13      	ldr	r3, [pc, #76]	; (800aa64 <xTaskResumeAll+0x130>)
 800aa18:	2200      	movs	r2, #0
 800aa1a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800aa1c:	4b10      	ldr	r3, [pc, #64]	; (800aa60 <xTaskResumeAll+0x12c>)
 800aa1e:	681b      	ldr	r3, [r3, #0]
 800aa20:	2b00      	cmp	r3, #0
 800aa22:	d009      	beq.n	800aa38 <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800aa24:	2301      	movs	r3, #1
 800aa26:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800aa28:	4b0f      	ldr	r3, [pc, #60]	; (800aa68 <xTaskResumeAll+0x134>)
 800aa2a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800aa2e:	601a      	str	r2, [r3, #0]
 800aa30:	f3bf 8f4f 	dsb	sy
 800aa34:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800aa38:	f000 fec6 	bl	800b7c8 <vPortExitCritical>

	return xAlreadyYielded;
 800aa3c:	68bb      	ldr	r3, [r7, #8]
}
 800aa3e:	4618      	mov	r0, r3
 800aa40:	3710      	adds	r7, #16
 800aa42:	46bd      	mov	sp, r7
 800aa44:	bd80      	pop	{r7, pc}
 800aa46:	bf00      	nop
 800aa48:	2000059c 	.word	0x2000059c
 800aa4c:	20000574 	.word	0x20000574
 800aa50:	20000534 	.word	0x20000534
 800aa54:	2000057c 	.word	0x2000057c
 800aa58:	20000478 	.word	0x20000478
 800aa5c:	20000474 	.word	0x20000474
 800aa60:	20000588 	.word	0x20000588
 800aa64:	20000584 	.word	0x20000584
 800aa68:	e000ed04 	.word	0xe000ed04

0800aa6c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800aa6c:	b480      	push	{r7}
 800aa6e:	b083      	sub	sp, #12
 800aa70:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800aa72:	4b05      	ldr	r3, [pc, #20]	; (800aa88 <xTaskGetTickCount+0x1c>)
 800aa74:	681b      	ldr	r3, [r3, #0]
 800aa76:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800aa78:	687b      	ldr	r3, [r7, #4]
}
 800aa7a:	4618      	mov	r0, r3
 800aa7c:	370c      	adds	r7, #12
 800aa7e:	46bd      	mov	sp, r7
 800aa80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa84:	4770      	bx	lr
 800aa86:	bf00      	nop
 800aa88:	20000578 	.word	0x20000578

0800aa8c <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 800aa8c:	b580      	push	{r7, lr}
 800aa8e:	b082      	sub	sp, #8
 800aa90:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800aa92:	f000 ff47 	bl	800b924 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800aa96:	2300      	movs	r3, #0
 800aa98:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800aa9a:	4b04      	ldr	r3, [pc, #16]	; (800aaac <xTaskGetTickCountFromISR+0x20>)
 800aa9c:	681b      	ldr	r3, [r3, #0]
 800aa9e:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800aaa0:	683b      	ldr	r3, [r7, #0]
}
 800aaa2:	4618      	mov	r0, r3
 800aaa4:	3708      	adds	r7, #8
 800aaa6:	46bd      	mov	sp, r7
 800aaa8:	bd80      	pop	{r7, pc}
 800aaaa:	bf00      	nop
 800aaac:	20000578 	.word	0x20000578

0800aab0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800aab0:	b580      	push	{r7, lr}
 800aab2:	b086      	sub	sp, #24
 800aab4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800aab6:	2300      	movs	r3, #0
 800aab8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800aaba:	4b50      	ldr	r3, [pc, #320]	; (800abfc <xTaskIncrementTick+0x14c>)
 800aabc:	681b      	ldr	r3, [r3, #0]
 800aabe:	2b00      	cmp	r3, #0
 800aac0:	f040 808c 	bne.w	800abdc <xTaskIncrementTick+0x12c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800aac4:	4b4e      	ldr	r3, [pc, #312]	; (800ac00 <xTaskIncrementTick+0x150>)
 800aac6:	681b      	ldr	r3, [r3, #0]
 800aac8:	3301      	adds	r3, #1
 800aaca:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800aacc:	4a4c      	ldr	r2, [pc, #304]	; (800ac00 <xTaskIncrementTick+0x150>)
 800aace:	693b      	ldr	r3, [r7, #16]
 800aad0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800aad2:	693b      	ldr	r3, [r7, #16]
 800aad4:	2b00      	cmp	r3, #0
 800aad6:	d11f      	bne.n	800ab18 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 800aad8:	4b4a      	ldr	r3, [pc, #296]	; (800ac04 <xTaskIncrementTick+0x154>)
 800aada:	681b      	ldr	r3, [r3, #0]
 800aadc:	681b      	ldr	r3, [r3, #0]
 800aade:	2b00      	cmp	r3, #0
 800aae0:	d009      	beq.n	800aaf6 <xTaskIncrementTick+0x46>
 800aae2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aae6:	f383 8811 	msr	BASEPRI, r3
 800aaea:	f3bf 8f6f 	isb	sy
 800aaee:	f3bf 8f4f 	dsb	sy
 800aaf2:	603b      	str	r3, [r7, #0]
 800aaf4:	e7fe      	b.n	800aaf4 <xTaskIncrementTick+0x44>
 800aaf6:	4b43      	ldr	r3, [pc, #268]	; (800ac04 <xTaskIncrementTick+0x154>)
 800aaf8:	681b      	ldr	r3, [r3, #0]
 800aafa:	60fb      	str	r3, [r7, #12]
 800aafc:	4b42      	ldr	r3, [pc, #264]	; (800ac08 <xTaskIncrementTick+0x158>)
 800aafe:	681b      	ldr	r3, [r3, #0]
 800ab00:	4a40      	ldr	r2, [pc, #256]	; (800ac04 <xTaskIncrementTick+0x154>)
 800ab02:	6013      	str	r3, [r2, #0]
 800ab04:	4a40      	ldr	r2, [pc, #256]	; (800ac08 <xTaskIncrementTick+0x158>)
 800ab06:	68fb      	ldr	r3, [r7, #12]
 800ab08:	6013      	str	r3, [r2, #0]
 800ab0a:	4b40      	ldr	r3, [pc, #256]	; (800ac0c <xTaskIncrementTick+0x15c>)
 800ab0c:	681b      	ldr	r3, [r3, #0]
 800ab0e:	3301      	adds	r3, #1
 800ab10:	4a3e      	ldr	r2, [pc, #248]	; (800ac0c <xTaskIncrementTick+0x15c>)
 800ab12:	6013      	str	r3, [r2, #0]
 800ab14:	f000 fa9c 	bl	800b050 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800ab18:	4b3d      	ldr	r3, [pc, #244]	; (800ac10 <xTaskIncrementTick+0x160>)
 800ab1a:	681b      	ldr	r3, [r3, #0]
 800ab1c:	693a      	ldr	r2, [r7, #16]
 800ab1e:	429a      	cmp	r2, r3
 800ab20:	d34d      	bcc.n	800abbe <xTaskIncrementTick+0x10e>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ab22:	4b38      	ldr	r3, [pc, #224]	; (800ac04 <xTaskIncrementTick+0x154>)
 800ab24:	681b      	ldr	r3, [r3, #0]
 800ab26:	681b      	ldr	r3, [r3, #0]
 800ab28:	2b00      	cmp	r3, #0
 800ab2a:	d101      	bne.n	800ab30 <xTaskIncrementTick+0x80>
 800ab2c:	2301      	movs	r3, #1
 800ab2e:	e000      	b.n	800ab32 <xTaskIncrementTick+0x82>
 800ab30:	2300      	movs	r3, #0
 800ab32:	2b00      	cmp	r3, #0
 800ab34:	d004      	beq.n	800ab40 <xTaskIncrementTick+0x90>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ab36:	4b36      	ldr	r3, [pc, #216]	; (800ac10 <xTaskIncrementTick+0x160>)
 800ab38:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800ab3c:	601a      	str	r2, [r3, #0]
					break;
 800ab3e:	e03e      	b.n	800abbe <xTaskIncrementTick+0x10e>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800ab40:	4b30      	ldr	r3, [pc, #192]	; (800ac04 <xTaskIncrementTick+0x154>)
 800ab42:	681b      	ldr	r3, [r3, #0]
 800ab44:	68db      	ldr	r3, [r3, #12]
 800ab46:	68db      	ldr	r3, [r3, #12]
 800ab48:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800ab4a:	68bb      	ldr	r3, [r7, #8]
 800ab4c:	685b      	ldr	r3, [r3, #4]
 800ab4e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800ab50:	693a      	ldr	r2, [r7, #16]
 800ab52:	687b      	ldr	r3, [r7, #4]
 800ab54:	429a      	cmp	r2, r3
 800ab56:	d203      	bcs.n	800ab60 <xTaskIncrementTick+0xb0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800ab58:	4a2d      	ldr	r2, [pc, #180]	; (800ac10 <xTaskIncrementTick+0x160>)
 800ab5a:	687b      	ldr	r3, [r7, #4]
 800ab5c:	6013      	str	r3, [r2, #0]
						break;
 800ab5e:	e02e      	b.n	800abbe <xTaskIncrementTick+0x10e>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ab60:	68bb      	ldr	r3, [r7, #8]
 800ab62:	3304      	adds	r3, #4
 800ab64:	4618      	mov	r0, r3
 800ab66:	f7fe fd6f 	bl	8009648 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800ab6a:	68bb      	ldr	r3, [r7, #8]
 800ab6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ab6e:	2b00      	cmp	r3, #0
 800ab70:	d004      	beq.n	800ab7c <xTaskIncrementTick+0xcc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800ab72:	68bb      	ldr	r3, [r7, #8]
 800ab74:	3318      	adds	r3, #24
 800ab76:	4618      	mov	r0, r3
 800ab78:	f7fe fd66 	bl	8009648 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800ab7c:	68bb      	ldr	r3, [r7, #8]
 800ab7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab80:	2201      	movs	r2, #1
 800ab82:	409a      	lsls	r2, r3
 800ab84:	4b23      	ldr	r3, [pc, #140]	; (800ac14 <xTaskIncrementTick+0x164>)
 800ab86:	681b      	ldr	r3, [r3, #0]
 800ab88:	4313      	orrs	r3, r2
 800ab8a:	4a22      	ldr	r2, [pc, #136]	; (800ac14 <xTaskIncrementTick+0x164>)
 800ab8c:	6013      	str	r3, [r2, #0]
 800ab8e:	68bb      	ldr	r3, [r7, #8]
 800ab90:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ab92:	4613      	mov	r3, r2
 800ab94:	009b      	lsls	r3, r3, #2
 800ab96:	4413      	add	r3, r2
 800ab98:	009b      	lsls	r3, r3, #2
 800ab9a:	4a1f      	ldr	r2, [pc, #124]	; (800ac18 <xTaskIncrementTick+0x168>)
 800ab9c:	441a      	add	r2, r3
 800ab9e:	68bb      	ldr	r3, [r7, #8]
 800aba0:	3304      	adds	r3, #4
 800aba2:	4619      	mov	r1, r3
 800aba4:	4610      	mov	r0, r2
 800aba6:	f7fe fcf2 	bl	800958e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800abaa:	68bb      	ldr	r3, [r7, #8]
 800abac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800abae:	4b1b      	ldr	r3, [pc, #108]	; (800ac1c <xTaskIncrementTick+0x16c>)
 800abb0:	681b      	ldr	r3, [r3, #0]
 800abb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800abb4:	429a      	cmp	r2, r3
 800abb6:	d3b4      	bcc.n	800ab22 <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 800abb8:	2301      	movs	r3, #1
 800abba:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800abbc:	e7b1      	b.n	800ab22 <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800abbe:	4b17      	ldr	r3, [pc, #92]	; (800ac1c <xTaskIncrementTick+0x16c>)
 800abc0:	681b      	ldr	r3, [r3, #0]
 800abc2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800abc4:	4914      	ldr	r1, [pc, #80]	; (800ac18 <xTaskIncrementTick+0x168>)
 800abc6:	4613      	mov	r3, r2
 800abc8:	009b      	lsls	r3, r3, #2
 800abca:	4413      	add	r3, r2
 800abcc:	009b      	lsls	r3, r3, #2
 800abce:	440b      	add	r3, r1
 800abd0:	681b      	ldr	r3, [r3, #0]
 800abd2:	2b01      	cmp	r3, #1
 800abd4:	d907      	bls.n	800abe6 <xTaskIncrementTick+0x136>
			{
				xSwitchRequired = pdTRUE;
 800abd6:	2301      	movs	r3, #1
 800abd8:	617b      	str	r3, [r7, #20]
 800abda:	e004      	b.n	800abe6 <xTaskIncrementTick+0x136>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800abdc:	4b10      	ldr	r3, [pc, #64]	; (800ac20 <xTaskIncrementTick+0x170>)
 800abde:	681b      	ldr	r3, [r3, #0]
 800abe0:	3301      	adds	r3, #1
 800abe2:	4a0f      	ldr	r2, [pc, #60]	; (800ac20 <xTaskIncrementTick+0x170>)
 800abe4:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800abe6:	4b0f      	ldr	r3, [pc, #60]	; (800ac24 <xTaskIncrementTick+0x174>)
 800abe8:	681b      	ldr	r3, [r3, #0]
 800abea:	2b00      	cmp	r3, #0
 800abec:	d001      	beq.n	800abf2 <xTaskIncrementTick+0x142>
		{
			xSwitchRequired = pdTRUE;
 800abee:	2301      	movs	r3, #1
 800abf0:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800abf2:	697b      	ldr	r3, [r7, #20]
}
 800abf4:	4618      	mov	r0, r3
 800abf6:	3718      	adds	r7, #24
 800abf8:	46bd      	mov	sp, r7
 800abfa:	bd80      	pop	{r7, pc}
 800abfc:	2000059c 	.word	0x2000059c
 800ac00:	20000578 	.word	0x20000578
 800ac04:	2000052c 	.word	0x2000052c
 800ac08:	20000530 	.word	0x20000530
 800ac0c:	2000058c 	.word	0x2000058c
 800ac10:	20000594 	.word	0x20000594
 800ac14:	2000057c 	.word	0x2000057c
 800ac18:	20000478 	.word	0x20000478
 800ac1c:	20000474 	.word	0x20000474
 800ac20:	20000584 	.word	0x20000584
 800ac24:	20000588 	.word	0x20000588

0800ac28 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800ac28:	b480      	push	{r7}
 800ac2a:	b087      	sub	sp, #28
 800ac2c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800ac2e:	4b26      	ldr	r3, [pc, #152]	; (800acc8 <vTaskSwitchContext+0xa0>)
 800ac30:	681b      	ldr	r3, [r3, #0]
 800ac32:	2b00      	cmp	r3, #0
 800ac34:	d003      	beq.n	800ac3e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800ac36:	4b25      	ldr	r3, [pc, #148]	; (800accc <vTaskSwitchContext+0xa4>)
 800ac38:	2201      	movs	r2, #1
 800ac3a:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800ac3c:	e03e      	b.n	800acbc <vTaskSwitchContext+0x94>
		xYieldPending = pdFALSE;
 800ac3e:	4b23      	ldr	r3, [pc, #140]	; (800accc <vTaskSwitchContext+0xa4>)
 800ac40:	2200      	movs	r2, #0
 800ac42:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 800ac44:	4b22      	ldr	r3, [pc, #136]	; (800acd0 <vTaskSwitchContext+0xa8>)
 800ac46:	681b      	ldr	r3, [r3, #0]
 800ac48:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800ac4a:	68fb      	ldr	r3, [r7, #12]
 800ac4c:	fab3 f383 	clz	r3, r3
 800ac50:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800ac52:	7afb      	ldrb	r3, [r7, #11]
 800ac54:	f1c3 031f 	rsb	r3, r3, #31
 800ac58:	617b      	str	r3, [r7, #20]
 800ac5a:	491e      	ldr	r1, [pc, #120]	; (800acd4 <vTaskSwitchContext+0xac>)
 800ac5c:	697a      	ldr	r2, [r7, #20]
 800ac5e:	4613      	mov	r3, r2
 800ac60:	009b      	lsls	r3, r3, #2
 800ac62:	4413      	add	r3, r2
 800ac64:	009b      	lsls	r3, r3, #2
 800ac66:	440b      	add	r3, r1
 800ac68:	681b      	ldr	r3, [r3, #0]
 800ac6a:	2b00      	cmp	r3, #0
 800ac6c:	d109      	bne.n	800ac82 <vTaskSwitchContext+0x5a>
	__asm volatile
 800ac6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac72:	f383 8811 	msr	BASEPRI, r3
 800ac76:	f3bf 8f6f 	isb	sy
 800ac7a:	f3bf 8f4f 	dsb	sy
 800ac7e:	607b      	str	r3, [r7, #4]
 800ac80:	e7fe      	b.n	800ac80 <vTaskSwitchContext+0x58>
 800ac82:	697a      	ldr	r2, [r7, #20]
 800ac84:	4613      	mov	r3, r2
 800ac86:	009b      	lsls	r3, r3, #2
 800ac88:	4413      	add	r3, r2
 800ac8a:	009b      	lsls	r3, r3, #2
 800ac8c:	4a11      	ldr	r2, [pc, #68]	; (800acd4 <vTaskSwitchContext+0xac>)
 800ac8e:	4413      	add	r3, r2
 800ac90:	613b      	str	r3, [r7, #16]
 800ac92:	693b      	ldr	r3, [r7, #16]
 800ac94:	685b      	ldr	r3, [r3, #4]
 800ac96:	685a      	ldr	r2, [r3, #4]
 800ac98:	693b      	ldr	r3, [r7, #16]
 800ac9a:	605a      	str	r2, [r3, #4]
 800ac9c:	693b      	ldr	r3, [r7, #16]
 800ac9e:	685a      	ldr	r2, [r3, #4]
 800aca0:	693b      	ldr	r3, [r7, #16]
 800aca2:	3308      	adds	r3, #8
 800aca4:	429a      	cmp	r2, r3
 800aca6:	d104      	bne.n	800acb2 <vTaskSwitchContext+0x8a>
 800aca8:	693b      	ldr	r3, [r7, #16]
 800acaa:	685b      	ldr	r3, [r3, #4]
 800acac:	685a      	ldr	r2, [r3, #4]
 800acae:	693b      	ldr	r3, [r7, #16]
 800acb0:	605a      	str	r2, [r3, #4]
 800acb2:	693b      	ldr	r3, [r7, #16]
 800acb4:	685b      	ldr	r3, [r3, #4]
 800acb6:	68db      	ldr	r3, [r3, #12]
 800acb8:	4a07      	ldr	r2, [pc, #28]	; (800acd8 <vTaskSwitchContext+0xb0>)
 800acba:	6013      	str	r3, [r2, #0]
}
 800acbc:	bf00      	nop
 800acbe:	371c      	adds	r7, #28
 800acc0:	46bd      	mov	sp, r7
 800acc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acc6:	4770      	bx	lr
 800acc8:	2000059c 	.word	0x2000059c
 800accc:	20000588 	.word	0x20000588
 800acd0:	2000057c 	.word	0x2000057c
 800acd4:	20000478 	.word	0x20000478
 800acd8:	20000474 	.word	0x20000474

0800acdc <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800acdc:	b580      	push	{r7, lr}
 800acde:	b084      	sub	sp, #16
 800ace0:	af00      	add	r7, sp, #0
 800ace2:	6078      	str	r0, [r7, #4]
 800ace4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800ace6:	687b      	ldr	r3, [r7, #4]
 800ace8:	2b00      	cmp	r3, #0
 800acea:	d109      	bne.n	800ad00 <vTaskPlaceOnEventList+0x24>
 800acec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800acf0:	f383 8811 	msr	BASEPRI, r3
 800acf4:	f3bf 8f6f 	isb	sy
 800acf8:	f3bf 8f4f 	dsb	sy
 800acfc:	60fb      	str	r3, [r7, #12]
 800acfe:	e7fe      	b.n	800acfe <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800ad00:	4b07      	ldr	r3, [pc, #28]	; (800ad20 <vTaskPlaceOnEventList+0x44>)
 800ad02:	681b      	ldr	r3, [r3, #0]
 800ad04:	3318      	adds	r3, #24
 800ad06:	4619      	mov	r1, r3
 800ad08:	6878      	ldr	r0, [r7, #4]
 800ad0a:	f7fe fc64 	bl	80095d6 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800ad0e:	2101      	movs	r1, #1
 800ad10:	6838      	ldr	r0, [r7, #0]
 800ad12:	f000 fb9d 	bl	800b450 <prvAddCurrentTaskToDelayedList>
}
 800ad16:	bf00      	nop
 800ad18:	3710      	adds	r7, #16
 800ad1a:	46bd      	mov	sp, r7
 800ad1c:	bd80      	pop	{r7, pc}
 800ad1e:	bf00      	nop
 800ad20:	20000474 	.word	0x20000474

0800ad24 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800ad24:	b580      	push	{r7, lr}
 800ad26:	b086      	sub	sp, #24
 800ad28:	af00      	add	r7, sp, #0
 800ad2a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 800ad2c:	687b      	ldr	r3, [r7, #4]
 800ad2e:	68db      	ldr	r3, [r3, #12]
 800ad30:	68db      	ldr	r3, [r3, #12]
 800ad32:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800ad34:	693b      	ldr	r3, [r7, #16]
 800ad36:	2b00      	cmp	r3, #0
 800ad38:	d109      	bne.n	800ad4e <xTaskRemoveFromEventList+0x2a>
 800ad3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad3e:	f383 8811 	msr	BASEPRI, r3
 800ad42:	f3bf 8f6f 	isb	sy
 800ad46:	f3bf 8f4f 	dsb	sy
 800ad4a:	60fb      	str	r3, [r7, #12]
 800ad4c:	e7fe      	b.n	800ad4c <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800ad4e:	693b      	ldr	r3, [r7, #16]
 800ad50:	3318      	adds	r3, #24
 800ad52:	4618      	mov	r0, r3
 800ad54:	f7fe fc78 	bl	8009648 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ad58:	4b1d      	ldr	r3, [pc, #116]	; (800add0 <xTaskRemoveFromEventList+0xac>)
 800ad5a:	681b      	ldr	r3, [r3, #0]
 800ad5c:	2b00      	cmp	r3, #0
 800ad5e:	d11c      	bne.n	800ad9a <xTaskRemoveFromEventList+0x76>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800ad60:	693b      	ldr	r3, [r7, #16]
 800ad62:	3304      	adds	r3, #4
 800ad64:	4618      	mov	r0, r3
 800ad66:	f7fe fc6f 	bl	8009648 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800ad6a:	693b      	ldr	r3, [r7, #16]
 800ad6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ad6e:	2201      	movs	r2, #1
 800ad70:	409a      	lsls	r2, r3
 800ad72:	4b18      	ldr	r3, [pc, #96]	; (800add4 <xTaskRemoveFromEventList+0xb0>)
 800ad74:	681b      	ldr	r3, [r3, #0]
 800ad76:	4313      	orrs	r3, r2
 800ad78:	4a16      	ldr	r2, [pc, #88]	; (800add4 <xTaskRemoveFromEventList+0xb0>)
 800ad7a:	6013      	str	r3, [r2, #0]
 800ad7c:	693b      	ldr	r3, [r7, #16]
 800ad7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ad80:	4613      	mov	r3, r2
 800ad82:	009b      	lsls	r3, r3, #2
 800ad84:	4413      	add	r3, r2
 800ad86:	009b      	lsls	r3, r3, #2
 800ad88:	4a13      	ldr	r2, [pc, #76]	; (800add8 <xTaskRemoveFromEventList+0xb4>)
 800ad8a:	441a      	add	r2, r3
 800ad8c:	693b      	ldr	r3, [r7, #16]
 800ad8e:	3304      	adds	r3, #4
 800ad90:	4619      	mov	r1, r3
 800ad92:	4610      	mov	r0, r2
 800ad94:	f7fe fbfb 	bl	800958e <vListInsertEnd>
 800ad98:	e005      	b.n	800ada6 <xTaskRemoveFromEventList+0x82>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800ad9a:	693b      	ldr	r3, [r7, #16]
 800ad9c:	3318      	adds	r3, #24
 800ad9e:	4619      	mov	r1, r3
 800ada0:	480e      	ldr	r0, [pc, #56]	; (800addc <xTaskRemoveFromEventList+0xb8>)
 800ada2:	f7fe fbf4 	bl	800958e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800ada6:	693b      	ldr	r3, [r7, #16]
 800ada8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800adaa:	4b0d      	ldr	r3, [pc, #52]	; (800ade0 <xTaskRemoveFromEventList+0xbc>)
 800adac:	681b      	ldr	r3, [r3, #0]
 800adae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800adb0:	429a      	cmp	r2, r3
 800adb2:	d905      	bls.n	800adc0 <xTaskRemoveFromEventList+0x9c>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800adb4:	2301      	movs	r3, #1
 800adb6:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800adb8:	4b0a      	ldr	r3, [pc, #40]	; (800ade4 <xTaskRemoveFromEventList+0xc0>)
 800adba:	2201      	movs	r2, #1
 800adbc:	601a      	str	r2, [r3, #0]
 800adbe:	e001      	b.n	800adc4 <xTaskRemoveFromEventList+0xa0>
	}
	else
	{
		xReturn = pdFALSE;
 800adc0:	2300      	movs	r3, #0
 800adc2:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 800adc4:	697b      	ldr	r3, [r7, #20]
}
 800adc6:	4618      	mov	r0, r3
 800adc8:	3718      	adds	r7, #24
 800adca:	46bd      	mov	sp, r7
 800adcc:	bd80      	pop	{r7, pc}
 800adce:	bf00      	nop
 800add0:	2000059c 	.word	0x2000059c
 800add4:	2000057c 	.word	0x2000057c
 800add8:	20000478 	.word	0x20000478
 800addc:	20000534 	.word	0x20000534
 800ade0:	20000474 	.word	0x20000474
 800ade4:	20000588 	.word	0x20000588

0800ade8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800ade8:	b480      	push	{r7}
 800adea:	b083      	sub	sp, #12
 800adec:	af00      	add	r7, sp, #0
 800adee:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800adf0:	4b06      	ldr	r3, [pc, #24]	; (800ae0c <vTaskInternalSetTimeOutState+0x24>)
 800adf2:	681a      	ldr	r2, [r3, #0]
 800adf4:	687b      	ldr	r3, [r7, #4]
 800adf6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800adf8:	4b05      	ldr	r3, [pc, #20]	; (800ae10 <vTaskInternalSetTimeOutState+0x28>)
 800adfa:	681a      	ldr	r2, [r3, #0]
 800adfc:	687b      	ldr	r3, [r7, #4]
 800adfe:	605a      	str	r2, [r3, #4]
}
 800ae00:	bf00      	nop
 800ae02:	370c      	adds	r7, #12
 800ae04:	46bd      	mov	sp, r7
 800ae06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae0a:	4770      	bx	lr
 800ae0c:	2000058c 	.word	0x2000058c
 800ae10:	20000578 	.word	0x20000578

0800ae14 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800ae14:	b580      	push	{r7, lr}
 800ae16:	b088      	sub	sp, #32
 800ae18:	af00      	add	r7, sp, #0
 800ae1a:	6078      	str	r0, [r7, #4]
 800ae1c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800ae1e:	687b      	ldr	r3, [r7, #4]
 800ae20:	2b00      	cmp	r3, #0
 800ae22:	d109      	bne.n	800ae38 <xTaskCheckForTimeOut+0x24>
 800ae24:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae28:	f383 8811 	msr	BASEPRI, r3
 800ae2c:	f3bf 8f6f 	isb	sy
 800ae30:	f3bf 8f4f 	dsb	sy
 800ae34:	613b      	str	r3, [r7, #16]
 800ae36:	e7fe      	b.n	800ae36 <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 800ae38:	683b      	ldr	r3, [r7, #0]
 800ae3a:	2b00      	cmp	r3, #0
 800ae3c:	d109      	bne.n	800ae52 <xTaskCheckForTimeOut+0x3e>
 800ae3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae42:	f383 8811 	msr	BASEPRI, r3
 800ae46:	f3bf 8f6f 	isb	sy
 800ae4a:	f3bf 8f4f 	dsb	sy
 800ae4e:	60fb      	str	r3, [r7, #12]
 800ae50:	e7fe      	b.n	800ae50 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 800ae52:	f000 fc8b 	bl	800b76c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800ae56:	4b1d      	ldr	r3, [pc, #116]	; (800aecc <xTaskCheckForTimeOut+0xb8>)
 800ae58:	681b      	ldr	r3, [r3, #0]
 800ae5a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800ae5c:	687b      	ldr	r3, [r7, #4]
 800ae5e:	685b      	ldr	r3, [r3, #4]
 800ae60:	69ba      	ldr	r2, [r7, #24]
 800ae62:	1ad3      	subs	r3, r2, r3
 800ae64:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800ae66:	683b      	ldr	r3, [r7, #0]
 800ae68:	681b      	ldr	r3, [r3, #0]
 800ae6a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ae6e:	d102      	bne.n	800ae76 <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800ae70:	2300      	movs	r3, #0
 800ae72:	61fb      	str	r3, [r7, #28]
 800ae74:	e023      	b.n	800aebe <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800ae76:	687b      	ldr	r3, [r7, #4]
 800ae78:	681a      	ldr	r2, [r3, #0]
 800ae7a:	4b15      	ldr	r3, [pc, #84]	; (800aed0 <xTaskCheckForTimeOut+0xbc>)
 800ae7c:	681b      	ldr	r3, [r3, #0]
 800ae7e:	429a      	cmp	r2, r3
 800ae80:	d007      	beq.n	800ae92 <xTaskCheckForTimeOut+0x7e>
 800ae82:	687b      	ldr	r3, [r7, #4]
 800ae84:	685b      	ldr	r3, [r3, #4]
 800ae86:	69ba      	ldr	r2, [r7, #24]
 800ae88:	429a      	cmp	r2, r3
 800ae8a:	d302      	bcc.n	800ae92 <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800ae8c:	2301      	movs	r3, #1
 800ae8e:	61fb      	str	r3, [r7, #28]
 800ae90:	e015      	b.n	800aebe <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800ae92:	683b      	ldr	r3, [r7, #0]
 800ae94:	681b      	ldr	r3, [r3, #0]
 800ae96:	697a      	ldr	r2, [r7, #20]
 800ae98:	429a      	cmp	r2, r3
 800ae9a:	d20b      	bcs.n	800aeb4 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800ae9c:	683b      	ldr	r3, [r7, #0]
 800ae9e:	681a      	ldr	r2, [r3, #0]
 800aea0:	697b      	ldr	r3, [r7, #20]
 800aea2:	1ad2      	subs	r2, r2, r3
 800aea4:	683b      	ldr	r3, [r7, #0]
 800aea6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800aea8:	6878      	ldr	r0, [r7, #4]
 800aeaa:	f7ff ff9d 	bl	800ade8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800aeae:	2300      	movs	r3, #0
 800aeb0:	61fb      	str	r3, [r7, #28]
 800aeb2:	e004      	b.n	800aebe <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 800aeb4:	683b      	ldr	r3, [r7, #0]
 800aeb6:	2200      	movs	r2, #0
 800aeb8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800aeba:	2301      	movs	r3, #1
 800aebc:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800aebe:	f000 fc83 	bl	800b7c8 <vPortExitCritical>

	return xReturn;
 800aec2:	69fb      	ldr	r3, [r7, #28]
}
 800aec4:	4618      	mov	r0, r3
 800aec6:	3720      	adds	r7, #32
 800aec8:	46bd      	mov	sp, r7
 800aeca:	bd80      	pop	{r7, pc}
 800aecc:	20000578 	.word	0x20000578
 800aed0:	2000058c 	.word	0x2000058c

0800aed4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800aed4:	b480      	push	{r7}
 800aed6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800aed8:	4b03      	ldr	r3, [pc, #12]	; (800aee8 <vTaskMissedYield+0x14>)
 800aeda:	2201      	movs	r2, #1
 800aedc:	601a      	str	r2, [r3, #0]
}
 800aede:	bf00      	nop
 800aee0:	46bd      	mov	sp, r7
 800aee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aee6:	4770      	bx	lr
 800aee8:	20000588 	.word	0x20000588

0800aeec <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800aeec:	b580      	push	{r7, lr}
 800aeee:	b082      	sub	sp, #8
 800aef0:	af00      	add	r7, sp, #0
 800aef2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800aef4:	f000 f852 	bl	800af9c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800aef8:	4b06      	ldr	r3, [pc, #24]	; (800af14 <prvIdleTask+0x28>)
 800aefa:	681b      	ldr	r3, [r3, #0]
 800aefc:	2b01      	cmp	r3, #1
 800aefe:	d9f9      	bls.n	800aef4 <prvIdleTask+0x8>
			{
				taskYIELD();
 800af00:	4b05      	ldr	r3, [pc, #20]	; (800af18 <prvIdleTask+0x2c>)
 800af02:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800af06:	601a      	str	r2, [r3, #0]
 800af08:	f3bf 8f4f 	dsb	sy
 800af0c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800af10:	e7f0      	b.n	800aef4 <prvIdleTask+0x8>
 800af12:	bf00      	nop
 800af14:	20000478 	.word	0x20000478
 800af18:	e000ed04 	.word	0xe000ed04

0800af1c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800af1c:	b580      	push	{r7, lr}
 800af1e:	b082      	sub	sp, #8
 800af20:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800af22:	2300      	movs	r3, #0
 800af24:	607b      	str	r3, [r7, #4]
 800af26:	e00c      	b.n	800af42 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800af28:	687a      	ldr	r2, [r7, #4]
 800af2a:	4613      	mov	r3, r2
 800af2c:	009b      	lsls	r3, r3, #2
 800af2e:	4413      	add	r3, r2
 800af30:	009b      	lsls	r3, r3, #2
 800af32:	4a12      	ldr	r2, [pc, #72]	; (800af7c <prvInitialiseTaskLists+0x60>)
 800af34:	4413      	add	r3, r2
 800af36:	4618      	mov	r0, r3
 800af38:	f7fe fafc 	bl	8009534 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800af3c:	687b      	ldr	r3, [r7, #4]
 800af3e:	3301      	adds	r3, #1
 800af40:	607b      	str	r3, [r7, #4]
 800af42:	687b      	ldr	r3, [r7, #4]
 800af44:	2b06      	cmp	r3, #6
 800af46:	d9ef      	bls.n	800af28 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800af48:	480d      	ldr	r0, [pc, #52]	; (800af80 <prvInitialiseTaskLists+0x64>)
 800af4a:	f7fe faf3 	bl	8009534 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800af4e:	480d      	ldr	r0, [pc, #52]	; (800af84 <prvInitialiseTaskLists+0x68>)
 800af50:	f7fe faf0 	bl	8009534 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800af54:	480c      	ldr	r0, [pc, #48]	; (800af88 <prvInitialiseTaskLists+0x6c>)
 800af56:	f7fe faed 	bl	8009534 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800af5a:	480c      	ldr	r0, [pc, #48]	; (800af8c <prvInitialiseTaskLists+0x70>)
 800af5c:	f7fe faea 	bl	8009534 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800af60:	480b      	ldr	r0, [pc, #44]	; (800af90 <prvInitialiseTaskLists+0x74>)
 800af62:	f7fe fae7 	bl	8009534 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800af66:	4b0b      	ldr	r3, [pc, #44]	; (800af94 <prvInitialiseTaskLists+0x78>)
 800af68:	4a05      	ldr	r2, [pc, #20]	; (800af80 <prvInitialiseTaskLists+0x64>)
 800af6a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800af6c:	4b0a      	ldr	r3, [pc, #40]	; (800af98 <prvInitialiseTaskLists+0x7c>)
 800af6e:	4a05      	ldr	r2, [pc, #20]	; (800af84 <prvInitialiseTaskLists+0x68>)
 800af70:	601a      	str	r2, [r3, #0]
}
 800af72:	bf00      	nop
 800af74:	3708      	adds	r7, #8
 800af76:	46bd      	mov	sp, r7
 800af78:	bd80      	pop	{r7, pc}
 800af7a:	bf00      	nop
 800af7c:	20000478 	.word	0x20000478
 800af80:	20000504 	.word	0x20000504
 800af84:	20000518 	.word	0x20000518
 800af88:	20000534 	.word	0x20000534
 800af8c:	20000548 	.word	0x20000548
 800af90:	20000560 	.word	0x20000560
 800af94:	2000052c 	.word	0x2000052c
 800af98:	20000530 	.word	0x20000530

0800af9c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800af9c:	b580      	push	{r7, lr}
 800af9e:	b082      	sub	sp, #8
 800afa0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800afa2:	e019      	b.n	800afd8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800afa4:	f000 fbe2 	bl	800b76c <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 800afa8:	4b0f      	ldr	r3, [pc, #60]	; (800afe8 <prvCheckTasksWaitingTermination+0x4c>)
 800afaa:	68db      	ldr	r3, [r3, #12]
 800afac:	68db      	ldr	r3, [r3, #12]
 800afae:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800afb0:	687b      	ldr	r3, [r7, #4]
 800afb2:	3304      	adds	r3, #4
 800afb4:	4618      	mov	r0, r3
 800afb6:	f7fe fb47 	bl	8009648 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800afba:	4b0c      	ldr	r3, [pc, #48]	; (800afec <prvCheckTasksWaitingTermination+0x50>)
 800afbc:	681b      	ldr	r3, [r3, #0]
 800afbe:	3b01      	subs	r3, #1
 800afc0:	4a0a      	ldr	r2, [pc, #40]	; (800afec <prvCheckTasksWaitingTermination+0x50>)
 800afc2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800afc4:	4b0a      	ldr	r3, [pc, #40]	; (800aff0 <prvCheckTasksWaitingTermination+0x54>)
 800afc6:	681b      	ldr	r3, [r3, #0]
 800afc8:	3b01      	subs	r3, #1
 800afca:	4a09      	ldr	r2, [pc, #36]	; (800aff0 <prvCheckTasksWaitingTermination+0x54>)
 800afcc:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800afce:	f000 fbfb 	bl	800b7c8 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800afd2:	6878      	ldr	r0, [r7, #4]
 800afd4:	f000 f80e 	bl	800aff4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800afd8:	4b05      	ldr	r3, [pc, #20]	; (800aff0 <prvCheckTasksWaitingTermination+0x54>)
 800afda:	681b      	ldr	r3, [r3, #0]
 800afdc:	2b00      	cmp	r3, #0
 800afde:	d1e1      	bne.n	800afa4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800afe0:	bf00      	nop
 800afe2:	3708      	adds	r7, #8
 800afe4:	46bd      	mov	sp, r7
 800afe6:	bd80      	pop	{r7, pc}
 800afe8:	20000548 	.word	0x20000548
 800afec:	20000574 	.word	0x20000574
 800aff0:	2000055c 	.word	0x2000055c

0800aff4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800aff4:	b580      	push	{r7, lr}
 800aff6:	b084      	sub	sp, #16
 800aff8:	af00      	add	r7, sp, #0
 800affa:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800affc:	687b      	ldr	r3, [r7, #4]
 800affe:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800b002:	2b00      	cmp	r3, #0
 800b004:	d108      	bne.n	800b018 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800b006:	687b      	ldr	r3, [r7, #4]
 800b008:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b00a:	4618      	mov	r0, r3
 800b00c:	f000 fd8a 	bl	800bb24 <vPortFree>
				vPortFree( pxTCB );
 800b010:	6878      	ldr	r0, [r7, #4]
 800b012:	f000 fd87 	bl	800bb24 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800b016:	e017      	b.n	800b048 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800b018:	687b      	ldr	r3, [r7, #4]
 800b01a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800b01e:	2b01      	cmp	r3, #1
 800b020:	d103      	bne.n	800b02a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800b022:	6878      	ldr	r0, [r7, #4]
 800b024:	f000 fd7e 	bl	800bb24 <vPortFree>
	}
 800b028:	e00e      	b.n	800b048 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800b02a:	687b      	ldr	r3, [r7, #4]
 800b02c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800b030:	2b02      	cmp	r3, #2
 800b032:	d009      	beq.n	800b048 <prvDeleteTCB+0x54>
 800b034:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b038:	f383 8811 	msr	BASEPRI, r3
 800b03c:	f3bf 8f6f 	isb	sy
 800b040:	f3bf 8f4f 	dsb	sy
 800b044:	60fb      	str	r3, [r7, #12]
 800b046:	e7fe      	b.n	800b046 <prvDeleteTCB+0x52>
	}
 800b048:	bf00      	nop
 800b04a:	3710      	adds	r7, #16
 800b04c:	46bd      	mov	sp, r7
 800b04e:	bd80      	pop	{r7, pc}

0800b050 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800b050:	b480      	push	{r7}
 800b052:	b083      	sub	sp, #12
 800b054:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b056:	4b0f      	ldr	r3, [pc, #60]	; (800b094 <prvResetNextTaskUnblockTime+0x44>)
 800b058:	681b      	ldr	r3, [r3, #0]
 800b05a:	681b      	ldr	r3, [r3, #0]
 800b05c:	2b00      	cmp	r3, #0
 800b05e:	d101      	bne.n	800b064 <prvResetNextTaskUnblockTime+0x14>
 800b060:	2301      	movs	r3, #1
 800b062:	e000      	b.n	800b066 <prvResetNextTaskUnblockTime+0x16>
 800b064:	2300      	movs	r3, #0
 800b066:	2b00      	cmp	r3, #0
 800b068:	d004      	beq.n	800b074 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800b06a:	4b0b      	ldr	r3, [pc, #44]	; (800b098 <prvResetNextTaskUnblockTime+0x48>)
 800b06c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b070:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800b072:	e008      	b.n	800b086 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800b074:	4b07      	ldr	r3, [pc, #28]	; (800b094 <prvResetNextTaskUnblockTime+0x44>)
 800b076:	681b      	ldr	r3, [r3, #0]
 800b078:	68db      	ldr	r3, [r3, #12]
 800b07a:	68db      	ldr	r3, [r3, #12]
 800b07c:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800b07e:	687b      	ldr	r3, [r7, #4]
 800b080:	685b      	ldr	r3, [r3, #4]
 800b082:	4a05      	ldr	r2, [pc, #20]	; (800b098 <prvResetNextTaskUnblockTime+0x48>)
 800b084:	6013      	str	r3, [r2, #0]
}
 800b086:	bf00      	nop
 800b088:	370c      	adds	r7, #12
 800b08a:	46bd      	mov	sp, r7
 800b08c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b090:	4770      	bx	lr
 800b092:	bf00      	nop
 800b094:	2000052c 	.word	0x2000052c
 800b098:	20000594 	.word	0x20000594

0800b09c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800b09c:	b480      	push	{r7}
 800b09e:	b083      	sub	sp, #12
 800b0a0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800b0a2:	4b0b      	ldr	r3, [pc, #44]	; (800b0d0 <xTaskGetSchedulerState+0x34>)
 800b0a4:	681b      	ldr	r3, [r3, #0]
 800b0a6:	2b00      	cmp	r3, #0
 800b0a8:	d102      	bne.n	800b0b0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800b0aa:	2301      	movs	r3, #1
 800b0ac:	607b      	str	r3, [r7, #4]
 800b0ae:	e008      	b.n	800b0c2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b0b0:	4b08      	ldr	r3, [pc, #32]	; (800b0d4 <xTaskGetSchedulerState+0x38>)
 800b0b2:	681b      	ldr	r3, [r3, #0]
 800b0b4:	2b00      	cmp	r3, #0
 800b0b6:	d102      	bne.n	800b0be <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800b0b8:	2302      	movs	r3, #2
 800b0ba:	607b      	str	r3, [r7, #4]
 800b0bc:	e001      	b.n	800b0c2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800b0be:	2300      	movs	r3, #0
 800b0c0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800b0c2:	687b      	ldr	r3, [r7, #4]
	}
 800b0c4:	4618      	mov	r0, r3
 800b0c6:	370c      	adds	r7, #12
 800b0c8:	46bd      	mov	sp, r7
 800b0ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0ce:	4770      	bx	lr
 800b0d0:	20000580 	.word	0x20000580
 800b0d4:	2000059c 	.word	0x2000059c

0800b0d8 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800b0d8:	b580      	push	{r7, lr}
 800b0da:	b084      	sub	sp, #16
 800b0dc:	af00      	add	r7, sp, #0
 800b0de:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = ( TCB_t * ) pxMutexHolder;
 800b0e0:	687b      	ldr	r3, [r7, #4]
 800b0e2:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800b0e4:	2300      	movs	r3, #0
 800b0e6:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800b0e8:	687b      	ldr	r3, [r7, #4]
 800b0ea:	2b00      	cmp	r3, #0
 800b0ec:	d06e      	beq.n	800b1cc <xTaskPriorityInherit+0xf4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800b0ee:	68bb      	ldr	r3, [r7, #8]
 800b0f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b0f2:	4b39      	ldr	r3, [pc, #228]	; (800b1d8 <xTaskPriorityInherit+0x100>)
 800b0f4:	681b      	ldr	r3, [r3, #0]
 800b0f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b0f8:	429a      	cmp	r2, r3
 800b0fa:	d25e      	bcs.n	800b1ba <xTaskPriorityInherit+0xe2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800b0fc:	68bb      	ldr	r3, [r7, #8]
 800b0fe:	699b      	ldr	r3, [r3, #24]
 800b100:	2b00      	cmp	r3, #0
 800b102:	db06      	blt.n	800b112 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b104:	4b34      	ldr	r3, [pc, #208]	; (800b1d8 <xTaskPriorityInherit+0x100>)
 800b106:	681b      	ldr	r3, [r3, #0]
 800b108:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b10a:	f1c3 0207 	rsb	r2, r3, #7
 800b10e:	68bb      	ldr	r3, [r7, #8]
 800b110:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800b112:	68bb      	ldr	r3, [r7, #8]
 800b114:	6959      	ldr	r1, [r3, #20]
 800b116:	68bb      	ldr	r3, [r7, #8]
 800b118:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b11a:	4613      	mov	r3, r2
 800b11c:	009b      	lsls	r3, r3, #2
 800b11e:	4413      	add	r3, r2
 800b120:	009b      	lsls	r3, r3, #2
 800b122:	4a2e      	ldr	r2, [pc, #184]	; (800b1dc <xTaskPriorityInherit+0x104>)
 800b124:	4413      	add	r3, r2
 800b126:	4299      	cmp	r1, r3
 800b128:	d101      	bne.n	800b12e <xTaskPriorityInherit+0x56>
 800b12a:	2301      	movs	r3, #1
 800b12c:	e000      	b.n	800b130 <xTaskPriorityInherit+0x58>
 800b12e:	2300      	movs	r3, #0
 800b130:	2b00      	cmp	r3, #0
 800b132:	d03a      	beq.n	800b1aa <xTaskPriorityInherit+0xd2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b134:	68bb      	ldr	r3, [r7, #8]
 800b136:	3304      	adds	r3, #4
 800b138:	4618      	mov	r0, r3
 800b13a:	f7fe fa85 	bl	8009648 <uxListRemove>
 800b13e:	4603      	mov	r3, r0
 800b140:	2b00      	cmp	r3, #0
 800b142:	d115      	bne.n	800b170 <xTaskPriorityInherit+0x98>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 800b144:	68bb      	ldr	r3, [r7, #8]
 800b146:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b148:	4924      	ldr	r1, [pc, #144]	; (800b1dc <xTaskPriorityInherit+0x104>)
 800b14a:	4613      	mov	r3, r2
 800b14c:	009b      	lsls	r3, r3, #2
 800b14e:	4413      	add	r3, r2
 800b150:	009b      	lsls	r3, r3, #2
 800b152:	440b      	add	r3, r1
 800b154:	681b      	ldr	r3, [r3, #0]
 800b156:	2b00      	cmp	r3, #0
 800b158:	d10a      	bne.n	800b170 <xTaskPriorityInherit+0x98>
 800b15a:	68bb      	ldr	r3, [r7, #8]
 800b15c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b15e:	2201      	movs	r2, #1
 800b160:	fa02 f303 	lsl.w	r3, r2, r3
 800b164:	43da      	mvns	r2, r3
 800b166:	4b1e      	ldr	r3, [pc, #120]	; (800b1e0 <xTaskPriorityInherit+0x108>)
 800b168:	681b      	ldr	r3, [r3, #0]
 800b16a:	4013      	ands	r3, r2
 800b16c:	4a1c      	ldr	r2, [pc, #112]	; (800b1e0 <xTaskPriorityInherit+0x108>)
 800b16e:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800b170:	4b19      	ldr	r3, [pc, #100]	; (800b1d8 <xTaskPriorityInherit+0x100>)
 800b172:	681b      	ldr	r3, [r3, #0]
 800b174:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b176:	68bb      	ldr	r3, [r7, #8]
 800b178:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800b17a:	68bb      	ldr	r3, [r7, #8]
 800b17c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b17e:	2201      	movs	r2, #1
 800b180:	409a      	lsls	r2, r3
 800b182:	4b17      	ldr	r3, [pc, #92]	; (800b1e0 <xTaskPriorityInherit+0x108>)
 800b184:	681b      	ldr	r3, [r3, #0]
 800b186:	4313      	orrs	r3, r2
 800b188:	4a15      	ldr	r2, [pc, #84]	; (800b1e0 <xTaskPriorityInherit+0x108>)
 800b18a:	6013      	str	r3, [r2, #0]
 800b18c:	68bb      	ldr	r3, [r7, #8]
 800b18e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b190:	4613      	mov	r3, r2
 800b192:	009b      	lsls	r3, r3, #2
 800b194:	4413      	add	r3, r2
 800b196:	009b      	lsls	r3, r3, #2
 800b198:	4a10      	ldr	r2, [pc, #64]	; (800b1dc <xTaskPriorityInherit+0x104>)
 800b19a:	441a      	add	r2, r3
 800b19c:	68bb      	ldr	r3, [r7, #8]
 800b19e:	3304      	adds	r3, #4
 800b1a0:	4619      	mov	r1, r3
 800b1a2:	4610      	mov	r0, r2
 800b1a4:	f7fe f9f3 	bl	800958e <vListInsertEnd>
 800b1a8:	e004      	b.n	800b1b4 <xTaskPriorityInherit+0xdc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800b1aa:	4b0b      	ldr	r3, [pc, #44]	; (800b1d8 <xTaskPriorityInherit+0x100>)
 800b1ac:	681b      	ldr	r3, [r3, #0]
 800b1ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b1b0:	68bb      	ldr	r3, [r7, #8]
 800b1b2:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800b1b4:	2301      	movs	r3, #1
 800b1b6:	60fb      	str	r3, [r7, #12]
 800b1b8:	e008      	b.n	800b1cc <xTaskPriorityInherit+0xf4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800b1ba:	68bb      	ldr	r3, [r7, #8]
 800b1bc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b1be:	4b06      	ldr	r3, [pc, #24]	; (800b1d8 <xTaskPriorityInherit+0x100>)
 800b1c0:	681b      	ldr	r3, [r3, #0]
 800b1c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b1c4:	429a      	cmp	r2, r3
 800b1c6:	d201      	bcs.n	800b1cc <xTaskPriorityInherit+0xf4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800b1c8:	2301      	movs	r3, #1
 800b1ca:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800b1cc:	68fb      	ldr	r3, [r7, #12]
	}
 800b1ce:	4618      	mov	r0, r3
 800b1d0:	3710      	adds	r7, #16
 800b1d2:	46bd      	mov	sp, r7
 800b1d4:	bd80      	pop	{r7, pc}
 800b1d6:	bf00      	nop
 800b1d8:	20000474 	.word	0x20000474
 800b1dc:	20000478 	.word	0x20000478
 800b1e0:	2000057c 	.word	0x2000057c

0800b1e4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800b1e4:	b580      	push	{r7, lr}
 800b1e6:	b086      	sub	sp, #24
 800b1e8:	af00      	add	r7, sp, #0
 800b1ea:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 800b1ec:	687b      	ldr	r3, [r7, #4]
 800b1ee:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800b1f0:	2300      	movs	r3, #0
 800b1f2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800b1f4:	687b      	ldr	r3, [r7, #4]
 800b1f6:	2b00      	cmp	r3, #0
 800b1f8:	d06c      	beq.n	800b2d4 <xTaskPriorityDisinherit+0xf0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800b1fa:	4b39      	ldr	r3, [pc, #228]	; (800b2e0 <xTaskPriorityDisinherit+0xfc>)
 800b1fc:	681b      	ldr	r3, [r3, #0]
 800b1fe:	693a      	ldr	r2, [r7, #16]
 800b200:	429a      	cmp	r2, r3
 800b202:	d009      	beq.n	800b218 <xTaskPriorityDisinherit+0x34>
 800b204:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b208:	f383 8811 	msr	BASEPRI, r3
 800b20c:	f3bf 8f6f 	isb	sy
 800b210:	f3bf 8f4f 	dsb	sy
 800b214:	60fb      	str	r3, [r7, #12]
 800b216:	e7fe      	b.n	800b216 <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 800b218:	693b      	ldr	r3, [r7, #16]
 800b21a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b21c:	2b00      	cmp	r3, #0
 800b21e:	d109      	bne.n	800b234 <xTaskPriorityDisinherit+0x50>
 800b220:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b224:	f383 8811 	msr	BASEPRI, r3
 800b228:	f3bf 8f6f 	isb	sy
 800b22c:	f3bf 8f4f 	dsb	sy
 800b230:	60bb      	str	r3, [r7, #8]
 800b232:	e7fe      	b.n	800b232 <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 800b234:	693b      	ldr	r3, [r7, #16]
 800b236:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b238:	1e5a      	subs	r2, r3, #1
 800b23a:	693b      	ldr	r3, [r7, #16]
 800b23c:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800b23e:	693b      	ldr	r3, [r7, #16]
 800b240:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b242:	693b      	ldr	r3, [r7, #16]
 800b244:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b246:	429a      	cmp	r2, r3
 800b248:	d044      	beq.n	800b2d4 <xTaskPriorityDisinherit+0xf0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800b24a:	693b      	ldr	r3, [r7, #16]
 800b24c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b24e:	2b00      	cmp	r3, #0
 800b250:	d140      	bne.n	800b2d4 <xTaskPriorityDisinherit+0xf0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b252:	693b      	ldr	r3, [r7, #16]
 800b254:	3304      	adds	r3, #4
 800b256:	4618      	mov	r0, r3
 800b258:	f7fe f9f6 	bl	8009648 <uxListRemove>
 800b25c:	4603      	mov	r3, r0
 800b25e:	2b00      	cmp	r3, #0
 800b260:	d115      	bne.n	800b28e <xTaskPriorityDisinherit+0xaa>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800b262:	693b      	ldr	r3, [r7, #16]
 800b264:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b266:	491f      	ldr	r1, [pc, #124]	; (800b2e4 <xTaskPriorityDisinherit+0x100>)
 800b268:	4613      	mov	r3, r2
 800b26a:	009b      	lsls	r3, r3, #2
 800b26c:	4413      	add	r3, r2
 800b26e:	009b      	lsls	r3, r3, #2
 800b270:	440b      	add	r3, r1
 800b272:	681b      	ldr	r3, [r3, #0]
 800b274:	2b00      	cmp	r3, #0
 800b276:	d10a      	bne.n	800b28e <xTaskPriorityDisinherit+0xaa>
 800b278:	693b      	ldr	r3, [r7, #16]
 800b27a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b27c:	2201      	movs	r2, #1
 800b27e:	fa02 f303 	lsl.w	r3, r2, r3
 800b282:	43da      	mvns	r2, r3
 800b284:	4b18      	ldr	r3, [pc, #96]	; (800b2e8 <xTaskPriorityDisinherit+0x104>)
 800b286:	681b      	ldr	r3, [r3, #0]
 800b288:	4013      	ands	r3, r2
 800b28a:	4a17      	ldr	r2, [pc, #92]	; (800b2e8 <xTaskPriorityDisinherit+0x104>)
 800b28c:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800b28e:	693b      	ldr	r3, [r7, #16]
 800b290:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b292:	693b      	ldr	r3, [r7, #16]
 800b294:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b296:	693b      	ldr	r3, [r7, #16]
 800b298:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b29a:	f1c3 0207 	rsb	r2, r3, #7
 800b29e:	693b      	ldr	r3, [r7, #16]
 800b2a0:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800b2a2:	693b      	ldr	r3, [r7, #16]
 800b2a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b2a6:	2201      	movs	r2, #1
 800b2a8:	409a      	lsls	r2, r3
 800b2aa:	4b0f      	ldr	r3, [pc, #60]	; (800b2e8 <xTaskPriorityDisinherit+0x104>)
 800b2ac:	681b      	ldr	r3, [r3, #0]
 800b2ae:	4313      	orrs	r3, r2
 800b2b0:	4a0d      	ldr	r2, [pc, #52]	; (800b2e8 <xTaskPriorityDisinherit+0x104>)
 800b2b2:	6013      	str	r3, [r2, #0]
 800b2b4:	693b      	ldr	r3, [r7, #16]
 800b2b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b2b8:	4613      	mov	r3, r2
 800b2ba:	009b      	lsls	r3, r3, #2
 800b2bc:	4413      	add	r3, r2
 800b2be:	009b      	lsls	r3, r3, #2
 800b2c0:	4a08      	ldr	r2, [pc, #32]	; (800b2e4 <xTaskPriorityDisinherit+0x100>)
 800b2c2:	441a      	add	r2, r3
 800b2c4:	693b      	ldr	r3, [r7, #16]
 800b2c6:	3304      	adds	r3, #4
 800b2c8:	4619      	mov	r1, r3
 800b2ca:	4610      	mov	r0, r2
 800b2cc:	f7fe f95f 	bl	800958e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800b2d0:	2301      	movs	r3, #1
 800b2d2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800b2d4:	697b      	ldr	r3, [r7, #20]
	}
 800b2d6:	4618      	mov	r0, r3
 800b2d8:	3718      	adds	r7, #24
 800b2da:	46bd      	mov	sp, r7
 800b2dc:	bd80      	pop	{r7, pc}
 800b2de:	bf00      	nop
 800b2e0:	20000474 	.word	0x20000474
 800b2e4:	20000478 	.word	0x20000478
 800b2e8:	2000057c 	.word	0x2000057c

0800b2ec <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800b2ec:	b580      	push	{r7, lr}
 800b2ee:	b088      	sub	sp, #32
 800b2f0:	af00      	add	r7, sp, #0
 800b2f2:	6078      	str	r0, [r7, #4]
 800b2f4:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 800b2f6:	687b      	ldr	r3, [r7, #4]
 800b2f8:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800b2fa:	2301      	movs	r3, #1
 800b2fc:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800b2fe:	687b      	ldr	r3, [r7, #4]
 800b300:	2b00      	cmp	r3, #0
 800b302:	f000 8086 	beq.w	800b412 <vTaskPriorityDisinheritAfterTimeout+0x126>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800b306:	69bb      	ldr	r3, [r7, #24]
 800b308:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b30a:	2b00      	cmp	r3, #0
 800b30c:	d109      	bne.n	800b322 <vTaskPriorityDisinheritAfterTimeout+0x36>
 800b30e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b312:	f383 8811 	msr	BASEPRI, r3
 800b316:	f3bf 8f6f 	isb	sy
 800b31a:	f3bf 8f4f 	dsb	sy
 800b31e:	60fb      	str	r3, [r7, #12]
 800b320:	e7fe      	b.n	800b320 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800b322:	69bb      	ldr	r3, [r7, #24]
 800b324:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b326:	683a      	ldr	r2, [r7, #0]
 800b328:	429a      	cmp	r2, r3
 800b32a:	d902      	bls.n	800b332 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800b32c:	683b      	ldr	r3, [r7, #0]
 800b32e:	61fb      	str	r3, [r7, #28]
 800b330:	e002      	b.n	800b338 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800b332:	69bb      	ldr	r3, [r7, #24]
 800b334:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b336:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800b338:	69bb      	ldr	r3, [r7, #24]
 800b33a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b33c:	69fa      	ldr	r2, [r7, #28]
 800b33e:	429a      	cmp	r2, r3
 800b340:	d067      	beq.n	800b412 <vTaskPriorityDisinheritAfterTimeout+0x126>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800b342:	69bb      	ldr	r3, [r7, #24]
 800b344:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b346:	697a      	ldr	r2, [r7, #20]
 800b348:	429a      	cmp	r2, r3
 800b34a:	d162      	bne.n	800b412 <vTaskPriorityDisinheritAfterTimeout+0x126>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800b34c:	4b33      	ldr	r3, [pc, #204]	; (800b41c <vTaskPriorityDisinheritAfterTimeout+0x130>)
 800b34e:	681b      	ldr	r3, [r3, #0]
 800b350:	69ba      	ldr	r2, [r7, #24]
 800b352:	429a      	cmp	r2, r3
 800b354:	d109      	bne.n	800b36a <vTaskPriorityDisinheritAfterTimeout+0x7e>
 800b356:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b35a:	f383 8811 	msr	BASEPRI, r3
 800b35e:	f3bf 8f6f 	isb	sy
 800b362:	f3bf 8f4f 	dsb	sy
 800b366:	60bb      	str	r3, [r7, #8]
 800b368:	e7fe      	b.n	800b368 <vTaskPriorityDisinheritAfterTimeout+0x7c>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800b36a:	69bb      	ldr	r3, [r7, #24]
 800b36c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b36e:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800b370:	69bb      	ldr	r3, [r7, #24]
 800b372:	69fa      	ldr	r2, [r7, #28]
 800b374:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800b376:	69bb      	ldr	r3, [r7, #24]
 800b378:	699b      	ldr	r3, [r3, #24]
 800b37a:	2b00      	cmp	r3, #0
 800b37c:	db04      	blt.n	800b388 <vTaskPriorityDisinheritAfterTimeout+0x9c>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b37e:	69fb      	ldr	r3, [r7, #28]
 800b380:	f1c3 0207 	rsb	r2, r3, #7
 800b384:	69bb      	ldr	r3, [r7, #24]
 800b386:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800b388:	69bb      	ldr	r3, [r7, #24]
 800b38a:	6959      	ldr	r1, [r3, #20]
 800b38c:	693a      	ldr	r2, [r7, #16]
 800b38e:	4613      	mov	r3, r2
 800b390:	009b      	lsls	r3, r3, #2
 800b392:	4413      	add	r3, r2
 800b394:	009b      	lsls	r3, r3, #2
 800b396:	4a22      	ldr	r2, [pc, #136]	; (800b420 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 800b398:	4413      	add	r3, r2
 800b39a:	4299      	cmp	r1, r3
 800b39c:	d101      	bne.n	800b3a2 <vTaskPriorityDisinheritAfterTimeout+0xb6>
 800b39e:	2301      	movs	r3, #1
 800b3a0:	e000      	b.n	800b3a4 <vTaskPriorityDisinheritAfterTimeout+0xb8>
 800b3a2:	2300      	movs	r3, #0
 800b3a4:	2b00      	cmp	r3, #0
 800b3a6:	d034      	beq.n	800b412 <vTaskPriorityDisinheritAfterTimeout+0x126>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b3a8:	69bb      	ldr	r3, [r7, #24]
 800b3aa:	3304      	adds	r3, #4
 800b3ac:	4618      	mov	r0, r3
 800b3ae:	f7fe f94b 	bl	8009648 <uxListRemove>
 800b3b2:	4603      	mov	r3, r0
 800b3b4:	2b00      	cmp	r3, #0
 800b3b6:	d115      	bne.n	800b3e4 <vTaskPriorityDisinheritAfterTimeout+0xf8>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800b3b8:	69bb      	ldr	r3, [r7, #24]
 800b3ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b3bc:	4918      	ldr	r1, [pc, #96]	; (800b420 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 800b3be:	4613      	mov	r3, r2
 800b3c0:	009b      	lsls	r3, r3, #2
 800b3c2:	4413      	add	r3, r2
 800b3c4:	009b      	lsls	r3, r3, #2
 800b3c6:	440b      	add	r3, r1
 800b3c8:	681b      	ldr	r3, [r3, #0]
 800b3ca:	2b00      	cmp	r3, #0
 800b3cc:	d10a      	bne.n	800b3e4 <vTaskPriorityDisinheritAfterTimeout+0xf8>
 800b3ce:	69bb      	ldr	r3, [r7, #24]
 800b3d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b3d2:	2201      	movs	r2, #1
 800b3d4:	fa02 f303 	lsl.w	r3, r2, r3
 800b3d8:	43da      	mvns	r2, r3
 800b3da:	4b12      	ldr	r3, [pc, #72]	; (800b424 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 800b3dc:	681b      	ldr	r3, [r3, #0]
 800b3de:	4013      	ands	r3, r2
 800b3e0:	4a10      	ldr	r2, [pc, #64]	; (800b424 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 800b3e2:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800b3e4:	69bb      	ldr	r3, [r7, #24]
 800b3e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b3e8:	2201      	movs	r2, #1
 800b3ea:	409a      	lsls	r2, r3
 800b3ec:	4b0d      	ldr	r3, [pc, #52]	; (800b424 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 800b3ee:	681b      	ldr	r3, [r3, #0]
 800b3f0:	4313      	orrs	r3, r2
 800b3f2:	4a0c      	ldr	r2, [pc, #48]	; (800b424 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 800b3f4:	6013      	str	r3, [r2, #0]
 800b3f6:	69bb      	ldr	r3, [r7, #24]
 800b3f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b3fa:	4613      	mov	r3, r2
 800b3fc:	009b      	lsls	r3, r3, #2
 800b3fe:	4413      	add	r3, r2
 800b400:	009b      	lsls	r3, r3, #2
 800b402:	4a07      	ldr	r2, [pc, #28]	; (800b420 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 800b404:	441a      	add	r2, r3
 800b406:	69bb      	ldr	r3, [r7, #24]
 800b408:	3304      	adds	r3, #4
 800b40a:	4619      	mov	r1, r3
 800b40c:	4610      	mov	r0, r2
 800b40e:	f7fe f8be 	bl	800958e <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800b412:	bf00      	nop
 800b414:	3720      	adds	r7, #32
 800b416:	46bd      	mov	sp, r7
 800b418:	bd80      	pop	{r7, pc}
 800b41a:	bf00      	nop
 800b41c:	20000474 	.word	0x20000474
 800b420:	20000478 	.word	0x20000478
 800b424:	2000057c 	.word	0x2000057c

0800b428 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
 800b428:	b480      	push	{r7}
 800b42a:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800b42c:	4b07      	ldr	r3, [pc, #28]	; (800b44c <pvTaskIncrementMutexHeldCount+0x24>)
 800b42e:	681b      	ldr	r3, [r3, #0]
 800b430:	2b00      	cmp	r3, #0
 800b432:	d004      	beq.n	800b43e <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800b434:	4b05      	ldr	r3, [pc, #20]	; (800b44c <pvTaskIncrementMutexHeldCount+0x24>)
 800b436:	681b      	ldr	r3, [r3, #0]
 800b438:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800b43a:	3201      	adds	r2, #1
 800b43c:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 800b43e:	4b03      	ldr	r3, [pc, #12]	; (800b44c <pvTaskIncrementMutexHeldCount+0x24>)
 800b440:	681b      	ldr	r3, [r3, #0]
	}
 800b442:	4618      	mov	r0, r3
 800b444:	46bd      	mov	sp, r7
 800b446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b44a:	4770      	bx	lr
 800b44c:	20000474 	.word	0x20000474

0800b450 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800b450:	b580      	push	{r7, lr}
 800b452:	b084      	sub	sp, #16
 800b454:	af00      	add	r7, sp, #0
 800b456:	6078      	str	r0, [r7, #4]
 800b458:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800b45a:	4b29      	ldr	r3, [pc, #164]	; (800b500 <prvAddCurrentTaskToDelayedList+0xb0>)
 800b45c:	681b      	ldr	r3, [r3, #0]
 800b45e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b460:	4b28      	ldr	r3, [pc, #160]	; (800b504 <prvAddCurrentTaskToDelayedList+0xb4>)
 800b462:	681b      	ldr	r3, [r3, #0]
 800b464:	3304      	adds	r3, #4
 800b466:	4618      	mov	r0, r3
 800b468:	f7fe f8ee 	bl	8009648 <uxListRemove>
 800b46c:	4603      	mov	r3, r0
 800b46e:	2b00      	cmp	r3, #0
 800b470:	d10b      	bne.n	800b48a <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 800b472:	4b24      	ldr	r3, [pc, #144]	; (800b504 <prvAddCurrentTaskToDelayedList+0xb4>)
 800b474:	681b      	ldr	r3, [r3, #0]
 800b476:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b478:	2201      	movs	r2, #1
 800b47a:	fa02 f303 	lsl.w	r3, r2, r3
 800b47e:	43da      	mvns	r2, r3
 800b480:	4b21      	ldr	r3, [pc, #132]	; (800b508 <prvAddCurrentTaskToDelayedList+0xb8>)
 800b482:	681b      	ldr	r3, [r3, #0]
 800b484:	4013      	ands	r3, r2
 800b486:	4a20      	ldr	r2, [pc, #128]	; (800b508 <prvAddCurrentTaskToDelayedList+0xb8>)
 800b488:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800b48a:	687b      	ldr	r3, [r7, #4]
 800b48c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b490:	d10a      	bne.n	800b4a8 <prvAddCurrentTaskToDelayedList+0x58>
 800b492:	683b      	ldr	r3, [r7, #0]
 800b494:	2b00      	cmp	r3, #0
 800b496:	d007      	beq.n	800b4a8 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b498:	4b1a      	ldr	r3, [pc, #104]	; (800b504 <prvAddCurrentTaskToDelayedList+0xb4>)
 800b49a:	681b      	ldr	r3, [r3, #0]
 800b49c:	3304      	adds	r3, #4
 800b49e:	4619      	mov	r1, r3
 800b4a0:	481a      	ldr	r0, [pc, #104]	; (800b50c <prvAddCurrentTaskToDelayedList+0xbc>)
 800b4a2:	f7fe f874 	bl	800958e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800b4a6:	e026      	b.n	800b4f6 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800b4a8:	68fa      	ldr	r2, [r7, #12]
 800b4aa:	687b      	ldr	r3, [r7, #4]
 800b4ac:	4413      	add	r3, r2
 800b4ae:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800b4b0:	4b14      	ldr	r3, [pc, #80]	; (800b504 <prvAddCurrentTaskToDelayedList+0xb4>)
 800b4b2:	681b      	ldr	r3, [r3, #0]
 800b4b4:	68ba      	ldr	r2, [r7, #8]
 800b4b6:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800b4b8:	68ba      	ldr	r2, [r7, #8]
 800b4ba:	68fb      	ldr	r3, [r7, #12]
 800b4bc:	429a      	cmp	r2, r3
 800b4be:	d209      	bcs.n	800b4d4 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b4c0:	4b13      	ldr	r3, [pc, #76]	; (800b510 <prvAddCurrentTaskToDelayedList+0xc0>)
 800b4c2:	681a      	ldr	r2, [r3, #0]
 800b4c4:	4b0f      	ldr	r3, [pc, #60]	; (800b504 <prvAddCurrentTaskToDelayedList+0xb4>)
 800b4c6:	681b      	ldr	r3, [r3, #0]
 800b4c8:	3304      	adds	r3, #4
 800b4ca:	4619      	mov	r1, r3
 800b4cc:	4610      	mov	r0, r2
 800b4ce:	f7fe f882 	bl	80095d6 <vListInsert>
}
 800b4d2:	e010      	b.n	800b4f6 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b4d4:	4b0f      	ldr	r3, [pc, #60]	; (800b514 <prvAddCurrentTaskToDelayedList+0xc4>)
 800b4d6:	681a      	ldr	r2, [r3, #0]
 800b4d8:	4b0a      	ldr	r3, [pc, #40]	; (800b504 <prvAddCurrentTaskToDelayedList+0xb4>)
 800b4da:	681b      	ldr	r3, [r3, #0]
 800b4dc:	3304      	adds	r3, #4
 800b4de:	4619      	mov	r1, r3
 800b4e0:	4610      	mov	r0, r2
 800b4e2:	f7fe f878 	bl	80095d6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800b4e6:	4b0c      	ldr	r3, [pc, #48]	; (800b518 <prvAddCurrentTaskToDelayedList+0xc8>)
 800b4e8:	681b      	ldr	r3, [r3, #0]
 800b4ea:	68ba      	ldr	r2, [r7, #8]
 800b4ec:	429a      	cmp	r2, r3
 800b4ee:	d202      	bcs.n	800b4f6 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800b4f0:	4a09      	ldr	r2, [pc, #36]	; (800b518 <prvAddCurrentTaskToDelayedList+0xc8>)
 800b4f2:	68bb      	ldr	r3, [r7, #8]
 800b4f4:	6013      	str	r3, [r2, #0]
}
 800b4f6:	bf00      	nop
 800b4f8:	3710      	adds	r7, #16
 800b4fa:	46bd      	mov	sp, r7
 800b4fc:	bd80      	pop	{r7, pc}
 800b4fe:	bf00      	nop
 800b500:	20000578 	.word	0x20000578
 800b504:	20000474 	.word	0x20000474
 800b508:	2000057c 	.word	0x2000057c
 800b50c:	20000560 	.word	0x20000560
 800b510:	20000530 	.word	0x20000530
 800b514:	2000052c 	.word	0x2000052c
 800b518:	20000594 	.word	0x20000594

0800b51c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800b51c:	b480      	push	{r7}
 800b51e:	b085      	sub	sp, #20
 800b520:	af00      	add	r7, sp, #0
 800b522:	60f8      	str	r0, [r7, #12]
 800b524:	60b9      	str	r1, [r7, #8]
 800b526:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800b528:	68fb      	ldr	r3, [r7, #12]
 800b52a:	3b04      	subs	r3, #4
 800b52c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800b52e:	68fb      	ldr	r3, [r7, #12]
 800b530:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800b534:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800b536:	68fb      	ldr	r3, [r7, #12]
 800b538:	3b04      	subs	r3, #4
 800b53a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800b53c:	68bb      	ldr	r3, [r7, #8]
 800b53e:	f023 0201 	bic.w	r2, r3, #1
 800b542:	68fb      	ldr	r3, [r7, #12]
 800b544:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800b546:	68fb      	ldr	r3, [r7, #12]
 800b548:	3b04      	subs	r3, #4
 800b54a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800b54c:	4a0c      	ldr	r2, [pc, #48]	; (800b580 <pxPortInitialiseStack+0x64>)
 800b54e:	68fb      	ldr	r3, [r7, #12]
 800b550:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800b552:	68fb      	ldr	r3, [r7, #12]
 800b554:	3b14      	subs	r3, #20
 800b556:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800b558:	687a      	ldr	r2, [r7, #4]
 800b55a:	68fb      	ldr	r3, [r7, #12]
 800b55c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800b55e:	68fb      	ldr	r3, [r7, #12]
 800b560:	3b04      	subs	r3, #4
 800b562:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800b564:	68fb      	ldr	r3, [r7, #12]
 800b566:	f06f 0202 	mvn.w	r2, #2
 800b56a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800b56c:	68fb      	ldr	r3, [r7, #12]
 800b56e:	3b20      	subs	r3, #32
 800b570:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800b572:	68fb      	ldr	r3, [r7, #12]
}
 800b574:	4618      	mov	r0, r3
 800b576:	3714      	adds	r7, #20
 800b578:	46bd      	mov	sp, r7
 800b57a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b57e:	4770      	bx	lr
 800b580:	0800b585 	.word	0x0800b585

0800b584 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800b584:	b480      	push	{r7}
 800b586:	b085      	sub	sp, #20
 800b588:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800b58a:	2300      	movs	r3, #0
 800b58c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800b58e:	4b11      	ldr	r3, [pc, #68]	; (800b5d4 <prvTaskExitError+0x50>)
 800b590:	681b      	ldr	r3, [r3, #0]
 800b592:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b596:	d009      	beq.n	800b5ac <prvTaskExitError+0x28>
 800b598:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b59c:	f383 8811 	msr	BASEPRI, r3
 800b5a0:	f3bf 8f6f 	isb	sy
 800b5a4:	f3bf 8f4f 	dsb	sy
 800b5a8:	60fb      	str	r3, [r7, #12]
 800b5aa:	e7fe      	b.n	800b5aa <prvTaskExitError+0x26>
 800b5ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b5b0:	f383 8811 	msr	BASEPRI, r3
 800b5b4:	f3bf 8f6f 	isb	sy
 800b5b8:	f3bf 8f4f 	dsb	sy
 800b5bc:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800b5be:	bf00      	nop
 800b5c0:	687b      	ldr	r3, [r7, #4]
 800b5c2:	2b00      	cmp	r3, #0
 800b5c4:	d0fc      	beq.n	800b5c0 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800b5c6:	bf00      	nop
 800b5c8:	3714      	adds	r7, #20
 800b5ca:	46bd      	mov	sp, r7
 800b5cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5d0:	4770      	bx	lr
 800b5d2:	bf00      	nop
 800b5d4:	20000118 	.word	0x20000118
	...

0800b5e0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800b5e0:	4b07      	ldr	r3, [pc, #28]	; (800b600 <pxCurrentTCBConst2>)
 800b5e2:	6819      	ldr	r1, [r3, #0]
 800b5e4:	6808      	ldr	r0, [r1, #0]
 800b5e6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b5ea:	f380 8809 	msr	PSP, r0
 800b5ee:	f3bf 8f6f 	isb	sy
 800b5f2:	f04f 0000 	mov.w	r0, #0
 800b5f6:	f380 8811 	msr	BASEPRI, r0
 800b5fa:	4770      	bx	lr
 800b5fc:	f3af 8000 	nop.w

0800b600 <pxCurrentTCBConst2>:
 800b600:	20000474 	.word	0x20000474
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800b604:	bf00      	nop
 800b606:	bf00      	nop

0800b608 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800b608:	4808      	ldr	r0, [pc, #32]	; (800b62c <prvPortStartFirstTask+0x24>)
 800b60a:	6800      	ldr	r0, [r0, #0]
 800b60c:	6800      	ldr	r0, [r0, #0]
 800b60e:	f380 8808 	msr	MSP, r0
 800b612:	f04f 0000 	mov.w	r0, #0
 800b616:	f380 8814 	msr	CONTROL, r0
 800b61a:	b662      	cpsie	i
 800b61c:	b661      	cpsie	f
 800b61e:	f3bf 8f4f 	dsb	sy
 800b622:	f3bf 8f6f 	isb	sy
 800b626:	df00      	svc	0
 800b628:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800b62a:	bf00      	nop
 800b62c:	e000ed08 	.word	0xe000ed08

0800b630 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800b630:	b580      	push	{r7, lr}
 800b632:	b086      	sub	sp, #24
 800b634:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800b636:	4b44      	ldr	r3, [pc, #272]	; (800b748 <xPortStartScheduler+0x118>)
 800b638:	681b      	ldr	r3, [r3, #0]
 800b63a:	4a44      	ldr	r2, [pc, #272]	; (800b74c <xPortStartScheduler+0x11c>)
 800b63c:	4293      	cmp	r3, r2
 800b63e:	d109      	bne.n	800b654 <xPortStartScheduler+0x24>
 800b640:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b644:	f383 8811 	msr	BASEPRI, r3
 800b648:	f3bf 8f6f 	isb	sy
 800b64c:	f3bf 8f4f 	dsb	sy
 800b650:	613b      	str	r3, [r7, #16]
 800b652:	e7fe      	b.n	800b652 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800b654:	4b3c      	ldr	r3, [pc, #240]	; (800b748 <xPortStartScheduler+0x118>)
 800b656:	681b      	ldr	r3, [r3, #0]
 800b658:	4a3d      	ldr	r2, [pc, #244]	; (800b750 <xPortStartScheduler+0x120>)
 800b65a:	4293      	cmp	r3, r2
 800b65c:	d109      	bne.n	800b672 <xPortStartScheduler+0x42>
 800b65e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b662:	f383 8811 	msr	BASEPRI, r3
 800b666:	f3bf 8f6f 	isb	sy
 800b66a:	f3bf 8f4f 	dsb	sy
 800b66e:	60fb      	str	r3, [r7, #12]
 800b670:	e7fe      	b.n	800b670 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800b672:	4b38      	ldr	r3, [pc, #224]	; (800b754 <xPortStartScheduler+0x124>)
 800b674:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800b676:	697b      	ldr	r3, [r7, #20]
 800b678:	781b      	ldrb	r3, [r3, #0]
 800b67a:	b2db      	uxtb	r3, r3
 800b67c:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800b67e:	697b      	ldr	r3, [r7, #20]
 800b680:	22ff      	movs	r2, #255	; 0xff
 800b682:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800b684:	697b      	ldr	r3, [r7, #20]
 800b686:	781b      	ldrb	r3, [r3, #0]
 800b688:	b2db      	uxtb	r3, r3
 800b68a:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800b68c:	78fb      	ldrb	r3, [r7, #3]
 800b68e:	b2db      	uxtb	r3, r3
 800b690:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800b694:	b2da      	uxtb	r2, r3
 800b696:	4b30      	ldr	r3, [pc, #192]	; (800b758 <xPortStartScheduler+0x128>)
 800b698:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800b69a:	4b30      	ldr	r3, [pc, #192]	; (800b75c <xPortStartScheduler+0x12c>)
 800b69c:	2207      	movs	r2, #7
 800b69e:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b6a0:	e009      	b.n	800b6b6 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 800b6a2:	4b2e      	ldr	r3, [pc, #184]	; (800b75c <xPortStartScheduler+0x12c>)
 800b6a4:	681b      	ldr	r3, [r3, #0]
 800b6a6:	3b01      	subs	r3, #1
 800b6a8:	4a2c      	ldr	r2, [pc, #176]	; (800b75c <xPortStartScheduler+0x12c>)
 800b6aa:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800b6ac:	78fb      	ldrb	r3, [r7, #3]
 800b6ae:	b2db      	uxtb	r3, r3
 800b6b0:	005b      	lsls	r3, r3, #1
 800b6b2:	b2db      	uxtb	r3, r3
 800b6b4:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800b6b6:	78fb      	ldrb	r3, [r7, #3]
 800b6b8:	b2db      	uxtb	r3, r3
 800b6ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b6be:	2b80      	cmp	r3, #128	; 0x80
 800b6c0:	d0ef      	beq.n	800b6a2 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800b6c2:	4b26      	ldr	r3, [pc, #152]	; (800b75c <xPortStartScheduler+0x12c>)
 800b6c4:	681b      	ldr	r3, [r3, #0]
 800b6c6:	f1c3 0307 	rsb	r3, r3, #7
 800b6ca:	2b04      	cmp	r3, #4
 800b6cc:	d009      	beq.n	800b6e2 <xPortStartScheduler+0xb2>
 800b6ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b6d2:	f383 8811 	msr	BASEPRI, r3
 800b6d6:	f3bf 8f6f 	isb	sy
 800b6da:	f3bf 8f4f 	dsb	sy
 800b6de:	60bb      	str	r3, [r7, #8]
 800b6e0:	e7fe      	b.n	800b6e0 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800b6e2:	4b1e      	ldr	r3, [pc, #120]	; (800b75c <xPortStartScheduler+0x12c>)
 800b6e4:	681b      	ldr	r3, [r3, #0]
 800b6e6:	021b      	lsls	r3, r3, #8
 800b6e8:	4a1c      	ldr	r2, [pc, #112]	; (800b75c <xPortStartScheduler+0x12c>)
 800b6ea:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800b6ec:	4b1b      	ldr	r3, [pc, #108]	; (800b75c <xPortStartScheduler+0x12c>)
 800b6ee:	681b      	ldr	r3, [r3, #0]
 800b6f0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800b6f4:	4a19      	ldr	r2, [pc, #100]	; (800b75c <xPortStartScheduler+0x12c>)
 800b6f6:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800b6f8:	687b      	ldr	r3, [r7, #4]
 800b6fa:	b2da      	uxtb	r2, r3
 800b6fc:	697b      	ldr	r3, [r7, #20]
 800b6fe:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800b700:	4b17      	ldr	r3, [pc, #92]	; (800b760 <xPortStartScheduler+0x130>)
 800b702:	681b      	ldr	r3, [r3, #0]
 800b704:	4a16      	ldr	r2, [pc, #88]	; (800b760 <xPortStartScheduler+0x130>)
 800b706:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800b70a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800b70c:	4b14      	ldr	r3, [pc, #80]	; (800b760 <xPortStartScheduler+0x130>)
 800b70e:	681b      	ldr	r3, [r3, #0]
 800b710:	4a13      	ldr	r2, [pc, #76]	; (800b760 <xPortStartScheduler+0x130>)
 800b712:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800b716:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800b718:	f000 f8d6 	bl	800b8c8 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800b71c:	4b11      	ldr	r3, [pc, #68]	; (800b764 <xPortStartScheduler+0x134>)
 800b71e:	2200      	movs	r2, #0
 800b720:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800b722:	f000 f8f5 	bl	800b910 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800b726:	4b10      	ldr	r3, [pc, #64]	; (800b768 <xPortStartScheduler+0x138>)
 800b728:	681b      	ldr	r3, [r3, #0]
 800b72a:	4a0f      	ldr	r2, [pc, #60]	; (800b768 <xPortStartScheduler+0x138>)
 800b72c:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800b730:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800b732:	f7ff ff69 	bl	800b608 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800b736:	f7ff fa77 	bl	800ac28 <vTaskSwitchContext>
	prvTaskExitError();
 800b73a:	f7ff ff23 	bl	800b584 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800b73e:	2300      	movs	r3, #0
}
 800b740:	4618      	mov	r0, r3
 800b742:	3718      	adds	r7, #24
 800b744:	46bd      	mov	sp, r7
 800b746:	bd80      	pop	{r7, pc}
 800b748:	e000ed00 	.word	0xe000ed00
 800b74c:	410fc271 	.word	0x410fc271
 800b750:	410fc270 	.word	0x410fc270
 800b754:	e000e400 	.word	0xe000e400
 800b758:	200005a0 	.word	0x200005a0
 800b75c:	200005a4 	.word	0x200005a4
 800b760:	e000ed20 	.word	0xe000ed20
 800b764:	20000118 	.word	0x20000118
 800b768:	e000ef34 	.word	0xe000ef34

0800b76c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800b76c:	b480      	push	{r7}
 800b76e:	b083      	sub	sp, #12
 800b770:	af00      	add	r7, sp, #0
 800b772:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b776:	f383 8811 	msr	BASEPRI, r3
 800b77a:	f3bf 8f6f 	isb	sy
 800b77e:	f3bf 8f4f 	dsb	sy
 800b782:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800b784:	4b0e      	ldr	r3, [pc, #56]	; (800b7c0 <vPortEnterCritical+0x54>)
 800b786:	681b      	ldr	r3, [r3, #0]
 800b788:	3301      	adds	r3, #1
 800b78a:	4a0d      	ldr	r2, [pc, #52]	; (800b7c0 <vPortEnterCritical+0x54>)
 800b78c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800b78e:	4b0c      	ldr	r3, [pc, #48]	; (800b7c0 <vPortEnterCritical+0x54>)
 800b790:	681b      	ldr	r3, [r3, #0]
 800b792:	2b01      	cmp	r3, #1
 800b794:	d10e      	bne.n	800b7b4 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800b796:	4b0b      	ldr	r3, [pc, #44]	; (800b7c4 <vPortEnterCritical+0x58>)
 800b798:	681b      	ldr	r3, [r3, #0]
 800b79a:	b2db      	uxtb	r3, r3
 800b79c:	2b00      	cmp	r3, #0
 800b79e:	d009      	beq.n	800b7b4 <vPortEnterCritical+0x48>
 800b7a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b7a4:	f383 8811 	msr	BASEPRI, r3
 800b7a8:	f3bf 8f6f 	isb	sy
 800b7ac:	f3bf 8f4f 	dsb	sy
 800b7b0:	603b      	str	r3, [r7, #0]
 800b7b2:	e7fe      	b.n	800b7b2 <vPortEnterCritical+0x46>
	}
}
 800b7b4:	bf00      	nop
 800b7b6:	370c      	adds	r7, #12
 800b7b8:	46bd      	mov	sp, r7
 800b7ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7be:	4770      	bx	lr
 800b7c0:	20000118 	.word	0x20000118
 800b7c4:	e000ed04 	.word	0xe000ed04

0800b7c8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800b7c8:	b480      	push	{r7}
 800b7ca:	b083      	sub	sp, #12
 800b7cc:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800b7ce:	4b11      	ldr	r3, [pc, #68]	; (800b814 <vPortExitCritical+0x4c>)
 800b7d0:	681b      	ldr	r3, [r3, #0]
 800b7d2:	2b00      	cmp	r3, #0
 800b7d4:	d109      	bne.n	800b7ea <vPortExitCritical+0x22>
 800b7d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b7da:	f383 8811 	msr	BASEPRI, r3
 800b7de:	f3bf 8f6f 	isb	sy
 800b7e2:	f3bf 8f4f 	dsb	sy
 800b7e6:	607b      	str	r3, [r7, #4]
 800b7e8:	e7fe      	b.n	800b7e8 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 800b7ea:	4b0a      	ldr	r3, [pc, #40]	; (800b814 <vPortExitCritical+0x4c>)
 800b7ec:	681b      	ldr	r3, [r3, #0]
 800b7ee:	3b01      	subs	r3, #1
 800b7f0:	4a08      	ldr	r2, [pc, #32]	; (800b814 <vPortExitCritical+0x4c>)
 800b7f2:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800b7f4:	4b07      	ldr	r3, [pc, #28]	; (800b814 <vPortExitCritical+0x4c>)
 800b7f6:	681b      	ldr	r3, [r3, #0]
 800b7f8:	2b00      	cmp	r3, #0
 800b7fa:	d104      	bne.n	800b806 <vPortExitCritical+0x3e>
 800b7fc:	2300      	movs	r3, #0
 800b7fe:	603b      	str	r3, [r7, #0]
	__asm volatile
 800b800:	683b      	ldr	r3, [r7, #0]
 800b802:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 800b806:	bf00      	nop
 800b808:	370c      	adds	r7, #12
 800b80a:	46bd      	mov	sp, r7
 800b80c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b810:	4770      	bx	lr
 800b812:	bf00      	nop
 800b814:	20000118 	.word	0x20000118
	...

0800b820 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800b820:	f3ef 8009 	mrs	r0, PSP
 800b824:	f3bf 8f6f 	isb	sy
 800b828:	4b15      	ldr	r3, [pc, #84]	; (800b880 <pxCurrentTCBConst>)
 800b82a:	681a      	ldr	r2, [r3, #0]
 800b82c:	f01e 0f10 	tst.w	lr, #16
 800b830:	bf08      	it	eq
 800b832:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800b836:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b83a:	6010      	str	r0, [r2, #0]
 800b83c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800b840:	f04f 0050 	mov.w	r0, #80	; 0x50
 800b844:	f380 8811 	msr	BASEPRI, r0
 800b848:	f3bf 8f4f 	dsb	sy
 800b84c:	f3bf 8f6f 	isb	sy
 800b850:	f7ff f9ea 	bl	800ac28 <vTaskSwitchContext>
 800b854:	f04f 0000 	mov.w	r0, #0
 800b858:	f380 8811 	msr	BASEPRI, r0
 800b85c:	bc09      	pop	{r0, r3}
 800b85e:	6819      	ldr	r1, [r3, #0]
 800b860:	6808      	ldr	r0, [r1, #0]
 800b862:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b866:	f01e 0f10 	tst.w	lr, #16
 800b86a:	bf08      	it	eq
 800b86c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800b870:	f380 8809 	msr	PSP, r0
 800b874:	f3bf 8f6f 	isb	sy
 800b878:	4770      	bx	lr
 800b87a:	bf00      	nop
 800b87c:	f3af 8000 	nop.w

0800b880 <pxCurrentTCBConst>:
 800b880:	20000474 	.word	0x20000474
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800b884:	bf00      	nop
 800b886:	bf00      	nop

0800b888 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800b888:	b580      	push	{r7, lr}
 800b88a:	b082      	sub	sp, #8
 800b88c:	af00      	add	r7, sp, #0
	__asm volatile
 800b88e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b892:	f383 8811 	msr	BASEPRI, r3
 800b896:	f3bf 8f6f 	isb	sy
 800b89a:	f3bf 8f4f 	dsb	sy
 800b89e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800b8a0:	f7ff f906 	bl	800aab0 <xTaskIncrementTick>
 800b8a4:	4603      	mov	r3, r0
 800b8a6:	2b00      	cmp	r3, #0
 800b8a8:	d003      	beq.n	800b8b2 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800b8aa:	4b06      	ldr	r3, [pc, #24]	; (800b8c4 <SysTick_Handler+0x3c>)
 800b8ac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b8b0:	601a      	str	r2, [r3, #0]
 800b8b2:	2300      	movs	r3, #0
 800b8b4:	603b      	str	r3, [r7, #0]
	__asm volatile
 800b8b6:	683b      	ldr	r3, [r7, #0]
 800b8b8:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800b8bc:	bf00      	nop
 800b8be:	3708      	adds	r7, #8
 800b8c0:	46bd      	mov	sp, r7
 800b8c2:	bd80      	pop	{r7, pc}
 800b8c4:	e000ed04 	.word	0xe000ed04

0800b8c8 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800b8c8:	b480      	push	{r7}
 800b8ca:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800b8cc:	4b0b      	ldr	r3, [pc, #44]	; (800b8fc <vPortSetupTimerInterrupt+0x34>)
 800b8ce:	2200      	movs	r2, #0
 800b8d0:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800b8d2:	4b0b      	ldr	r3, [pc, #44]	; (800b900 <vPortSetupTimerInterrupt+0x38>)
 800b8d4:	2200      	movs	r2, #0
 800b8d6:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800b8d8:	4b0a      	ldr	r3, [pc, #40]	; (800b904 <vPortSetupTimerInterrupt+0x3c>)
 800b8da:	681b      	ldr	r3, [r3, #0]
 800b8dc:	4a0a      	ldr	r2, [pc, #40]	; (800b908 <vPortSetupTimerInterrupt+0x40>)
 800b8de:	fba2 2303 	umull	r2, r3, r2, r3
 800b8e2:	099b      	lsrs	r3, r3, #6
 800b8e4:	4a09      	ldr	r2, [pc, #36]	; (800b90c <vPortSetupTimerInterrupt+0x44>)
 800b8e6:	3b01      	subs	r3, #1
 800b8e8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800b8ea:	4b04      	ldr	r3, [pc, #16]	; (800b8fc <vPortSetupTimerInterrupt+0x34>)
 800b8ec:	2207      	movs	r2, #7
 800b8ee:	601a      	str	r2, [r3, #0]
}
 800b8f0:	bf00      	nop
 800b8f2:	46bd      	mov	sp, r7
 800b8f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8f8:	4770      	bx	lr
 800b8fa:	bf00      	nop
 800b8fc:	e000e010 	.word	0xe000e010
 800b900:	e000e018 	.word	0xe000e018
 800b904:	20000000 	.word	0x20000000
 800b908:	10624dd3 	.word	0x10624dd3
 800b90c:	e000e014 	.word	0xe000e014

0800b910 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800b910:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800b920 <vPortEnableVFP+0x10>
 800b914:	6801      	ldr	r1, [r0, #0]
 800b916:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800b91a:	6001      	str	r1, [r0, #0]
 800b91c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800b91e:	bf00      	nop
 800b920:	e000ed88 	.word	0xe000ed88

0800b924 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800b924:	b480      	push	{r7}
 800b926:	b085      	sub	sp, #20
 800b928:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800b92a:	f3ef 8305 	mrs	r3, IPSR
 800b92e:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800b930:	68fb      	ldr	r3, [r7, #12]
 800b932:	2b0f      	cmp	r3, #15
 800b934:	d913      	bls.n	800b95e <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800b936:	4a16      	ldr	r2, [pc, #88]	; (800b990 <vPortValidateInterruptPriority+0x6c>)
 800b938:	68fb      	ldr	r3, [r7, #12]
 800b93a:	4413      	add	r3, r2
 800b93c:	781b      	ldrb	r3, [r3, #0]
 800b93e:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800b940:	4b14      	ldr	r3, [pc, #80]	; (800b994 <vPortValidateInterruptPriority+0x70>)
 800b942:	781b      	ldrb	r3, [r3, #0]
 800b944:	7afa      	ldrb	r2, [r7, #11]
 800b946:	429a      	cmp	r2, r3
 800b948:	d209      	bcs.n	800b95e <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 800b94a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b94e:	f383 8811 	msr	BASEPRI, r3
 800b952:	f3bf 8f6f 	isb	sy
 800b956:	f3bf 8f4f 	dsb	sy
 800b95a:	607b      	str	r3, [r7, #4]
 800b95c:	e7fe      	b.n	800b95c <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800b95e:	4b0e      	ldr	r3, [pc, #56]	; (800b998 <vPortValidateInterruptPriority+0x74>)
 800b960:	681b      	ldr	r3, [r3, #0]
 800b962:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800b966:	4b0d      	ldr	r3, [pc, #52]	; (800b99c <vPortValidateInterruptPriority+0x78>)
 800b968:	681b      	ldr	r3, [r3, #0]
 800b96a:	429a      	cmp	r2, r3
 800b96c:	d909      	bls.n	800b982 <vPortValidateInterruptPriority+0x5e>
 800b96e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b972:	f383 8811 	msr	BASEPRI, r3
 800b976:	f3bf 8f6f 	isb	sy
 800b97a:	f3bf 8f4f 	dsb	sy
 800b97e:	603b      	str	r3, [r7, #0]
 800b980:	e7fe      	b.n	800b980 <vPortValidateInterruptPriority+0x5c>
	}
 800b982:	bf00      	nop
 800b984:	3714      	adds	r7, #20
 800b986:	46bd      	mov	sp, r7
 800b988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b98c:	4770      	bx	lr
 800b98e:	bf00      	nop
 800b990:	e000e3f0 	.word	0xe000e3f0
 800b994:	200005a0 	.word	0x200005a0
 800b998:	e000ed0c 	.word	0xe000ed0c
 800b99c:	200005a4 	.word	0x200005a4

0800b9a0 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800b9a0:	b580      	push	{r7, lr}
 800b9a2:	b08a      	sub	sp, #40	; 0x28
 800b9a4:	af00      	add	r7, sp, #0
 800b9a6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800b9a8:	2300      	movs	r3, #0
 800b9aa:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800b9ac:	f7fe ffb4 	bl	800a918 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800b9b0:	4b57      	ldr	r3, [pc, #348]	; (800bb10 <pvPortMalloc+0x170>)
 800b9b2:	681b      	ldr	r3, [r3, #0]
 800b9b4:	2b00      	cmp	r3, #0
 800b9b6:	d101      	bne.n	800b9bc <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800b9b8:	f000 f90c 	bl	800bbd4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800b9bc:	4b55      	ldr	r3, [pc, #340]	; (800bb14 <pvPortMalloc+0x174>)
 800b9be:	681a      	ldr	r2, [r3, #0]
 800b9c0:	687b      	ldr	r3, [r7, #4]
 800b9c2:	4013      	ands	r3, r2
 800b9c4:	2b00      	cmp	r3, #0
 800b9c6:	f040 808c 	bne.w	800bae2 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800b9ca:	687b      	ldr	r3, [r7, #4]
 800b9cc:	2b00      	cmp	r3, #0
 800b9ce:	d01c      	beq.n	800ba0a <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 800b9d0:	2208      	movs	r2, #8
 800b9d2:	687b      	ldr	r3, [r7, #4]
 800b9d4:	4413      	add	r3, r2
 800b9d6:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800b9d8:	687b      	ldr	r3, [r7, #4]
 800b9da:	f003 0307 	and.w	r3, r3, #7
 800b9de:	2b00      	cmp	r3, #0
 800b9e0:	d013      	beq.n	800ba0a <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800b9e2:	687b      	ldr	r3, [r7, #4]
 800b9e4:	f023 0307 	bic.w	r3, r3, #7
 800b9e8:	3308      	adds	r3, #8
 800b9ea:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b9ec:	687b      	ldr	r3, [r7, #4]
 800b9ee:	f003 0307 	and.w	r3, r3, #7
 800b9f2:	2b00      	cmp	r3, #0
 800b9f4:	d009      	beq.n	800ba0a <pvPortMalloc+0x6a>
 800b9f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b9fa:	f383 8811 	msr	BASEPRI, r3
 800b9fe:	f3bf 8f6f 	isb	sy
 800ba02:	f3bf 8f4f 	dsb	sy
 800ba06:	617b      	str	r3, [r7, #20]
 800ba08:	e7fe      	b.n	800ba08 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800ba0a:	687b      	ldr	r3, [r7, #4]
 800ba0c:	2b00      	cmp	r3, #0
 800ba0e:	d068      	beq.n	800bae2 <pvPortMalloc+0x142>
 800ba10:	4b41      	ldr	r3, [pc, #260]	; (800bb18 <pvPortMalloc+0x178>)
 800ba12:	681b      	ldr	r3, [r3, #0]
 800ba14:	687a      	ldr	r2, [r7, #4]
 800ba16:	429a      	cmp	r2, r3
 800ba18:	d863      	bhi.n	800bae2 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800ba1a:	4b40      	ldr	r3, [pc, #256]	; (800bb1c <pvPortMalloc+0x17c>)
 800ba1c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800ba1e:	4b3f      	ldr	r3, [pc, #252]	; (800bb1c <pvPortMalloc+0x17c>)
 800ba20:	681b      	ldr	r3, [r3, #0]
 800ba22:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800ba24:	e004      	b.n	800ba30 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 800ba26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba28:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800ba2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba2c:	681b      	ldr	r3, [r3, #0]
 800ba2e:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800ba30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba32:	685b      	ldr	r3, [r3, #4]
 800ba34:	687a      	ldr	r2, [r7, #4]
 800ba36:	429a      	cmp	r2, r3
 800ba38:	d903      	bls.n	800ba42 <pvPortMalloc+0xa2>
 800ba3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba3c:	681b      	ldr	r3, [r3, #0]
 800ba3e:	2b00      	cmp	r3, #0
 800ba40:	d1f1      	bne.n	800ba26 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800ba42:	4b33      	ldr	r3, [pc, #204]	; (800bb10 <pvPortMalloc+0x170>)
 800ba44:	681b      	ldr	r3, [r3, #0]
 800ba46:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ba48:	429a      	cmp	r2, r3
 800ba4a:	d04a      	beq.n	800bae2 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800ba4c:	6a3b      	ldr	r3, [r7, #32]
 800ba4e:	681b      	ldr	r3, [r3, #0]
 800ba50:	2208      	movs	r2, #8
 800ba52:	4413      	add	r3, r2
 800ba54:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800ba56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba58:	681a      	ldr	r2, [r3, #0]
 800ba5a:	6a3b      	ldr	r3, [r7, #32]
 800ba5c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800ba5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba60:	685a      	ldr	r2, [r3, #4]
 800ba62:	687b      	ldr	r3, [r7, #4]
 800ba64:	1ad2      	subs	r2, r2, r3
 800ba66:	2308      	movs	r3, #8
 800ba68:	005b      	lsls	r3, r3, #1
 800ba6a:	429a      	cmp	r2, r3
 800ba6c:	d91e      	bls.n	800baac <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800ba6e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ba70:	687b      	ldr	r3, [r7, #4]
 800ba72:	4413      	add	r3, r2
 800ba74:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800ba76:	69bb      	ldr	r3, [r7, #24]
 800ba78:	f003 0307 	and.w	r3, r3, #7
 800ba7c:	2b00      	cmp	r3, #0
 800ba7e:	d009      	beq.n	800ba94 <pvPortMalloc+0xf4>
 800ba80:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba84:	f383 8811 	msr	BASEPRI, r3
 800ba88:	f3bf 8f6f 	isb	sy
 800ba8c:	f3bf 8f4f 	dsb	sy
 800ba90:	613b      	str	r3, [r7, #16]
 800ba92:	e7fe      	b.n	800ba92 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800ba94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba96:	685a      	ldr	r2, [r3, #4]
 800ba98:	687b      	ldr	r3, [r7, #4]
 800ba9a:	1ad2      	subs	r2, r2, r3
 800ba9c:	69bb      	ldr	r3, [r7, #24]
 800ba9e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800baa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800baa2:	687a      	ldr	r2, [r7, #4]
 800baa4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800baa6:	69b8      	ldr	r0, [r7, #24]
 800baa8:	f000 f8f6 	bl	800bc98 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800baac:	4b1a      	ldr	r3, [pc, #104]	; (800bb18 <pvPortMalloc+0x178>)
 800baae:	681a      	ldr	r2, [r3, #0]
 800bab0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bab2:	685b      	ldr	r3, [r3, #4]
 800bab4:	1ad3      	subs	r3, r2, r3
 800bab6:	4a18      	ldr	r2, [pc, #96]	; (800bb18 <pvPortMalloc+0x178>)
 800bab8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800baba:	4b17      	ldr	r3, [pc, #92]	; (800bb18 <pvPortMalloc+0x178>)
 800babc:	681a      	ldr	r2, [r3, #0]
 800babe:	4b18      	ldr	r3, [pc, #96]	; (800bb20 <pvPortMalloc+0x180>)
 800bac0:	681b      	ldr	r3, [r3, #0]
 800bac2:	429a      	cmp	r2, r3
 800bac4:	d203      	bcs.n	800bace <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800bac6:	4b14      	ldr	r3, [pc, #80]	; (800bb18 <pvPortMalloc+0x178>)
 800bac8:	681b      	ldr	r3, [r3, #0]
 800baca:	4a15      	ldr	r2, [pc, #84]	; (800bb20 <pvPortMalloc+0x180>)
 800bacc:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800bace:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bad0:	685a      	ldr	r2, [r3, #4]
 800bad2:	4b10      	ldr	r3, [pc, #64]	; (800bb14 <pvPortMalloc+0x174>)
 800bad4:	681b      	ldr	r3, [r3, #0]
 800bad6:	431a      	orrs	r2, r3
 800bad8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bada:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800badc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bade:	2200      	movs	r2, #0
 800bae0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800bae2:	f7fe ff27 	bl	800a934 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800bae6:	69fb      	ldr	r3, [r7, #28]
 800bae8:	f003 0307 	and.w	r3, r3, #7
 800baec:	2b00      	cmp	r3, #0
 800baee:	d009      	beq.n	800bb04 <pvPortMalloc+0x164>
 800baf0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800baf4:	f383 8811 	msr	BASEPRI, r3
 800baf8:	f3bf 8f6f 	isb	sy
 800bafc:	f3bf 8f4f 	dsb	sy
 800bb00:	60fb      	str	r3, [r7, #12]
 800bb02:	e7fe      	b.n	800bb02 <pvPortMalloc+0x162>
	return pvReturn;
 800bb04:	69fb      	ldr	r3, [r7, #28]
}
 800bb06:	4618      	mov	r0, r3
 800bb08:	3728      	adds	r7, #40	; 0x28
 800bb0a:	46bd      	mov	sp, r7
 800bb0c:	bd80      	pop	{r7, pc}
 800bb0e:	bf00      	nop
 800bb10:	200041b0 	.word	0x200041b0
 800bb14:	200041bc 	.word	0x200041bc
 800bb18:	200041b4 	.word	0x200041b4
 800bb1c:	200041a8 	.word	0x200041a8
 800bb20:	200041b8 	.word	0x200041b8

0800bb24 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800bb24:	b580      	push	{r7, lr}
 800bb26:	b086      	sub	sp, #24
 800bb28:	af00      	add	r7, sp, #0
 800bb2a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800bb2c:	687b      	ldr	r3, [r7, #4]
 800bb2e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800bb30:	687b      	ldr	r3, [r7, #4]
 800bb32:	2b00      	cmp	r3, #0
 800bb34:	d046      	beq.n	800bbc4 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800bb36:	2308      	movs	r3, #8
 800bb38:	425b      	negs	r3, r3
 800bb3a:	697a      	ldr	r2, [r7, #20]
 800bb3c:	4413      	add	r3, r2
 800bb3e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800bb40:	697b      	ldr	r3, [r7, #20]
 800bb42:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800bb44:	693b      	ldr	r3, [r7, #16]
 800bb46:	685a      	ldr	r2, [r3, #4]
 800bb48:	4b20      	ldr	r3, [pc, #128]	; (800bbcc <vPortFree+0xa8>)
 800bb4a:	681b      	ldr	r3, [r3, #0]
 800bb4c:	4013      	ands	r3, r2
 800bb4e:	2b00      	cmp	r3, #0
 800bb50:	d109      	bne.n	800bb66 <vPortFree+0x42>
 800bb52:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb56:	f383 8811 	msr	BASEPRI, r3
 800bb5a:	f3bf 8f6f 	isb	sy
 800bb5e:	f3bf 8f4f 	dsb	sy
 800bb62:	60fb      	str	r3, [r7, #12]
 800bb64:	e7fe      	b.n	800bb64 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800bb66:	693b      	ldr	r3, [r7, #16]
 800bb68:	681b      	ldr	r3, [r3, #0]
 800bb6a:	2b00      	cmp	r3, #0
 800bb6c:	d009      	beq.n	800bb82 <vPortFree+0x5e>
 800bb6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb72:	f383 8811 	msr	BASEPRI, r3
 800bb76:	f3bf 8f6f 	isb	sy
 800bb7a:	f3bf 8f4f 	dsb	sy
 800bb7e:	60bb      	str	r3, [r7, #8]
 800bb80:	e7fe      	b.n	800bb80 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800bb82:	693b      	ldr	r3, [r7, #16]
 800bb84:	685a      	ldr	r2, [r3, #4]
 800bb86:	4b11      	ldr	r3, [pc, #68]	; (800bbcc <vPortFree+0xa8>)
 800bb88:	681b      	ldr	r3, [r3, #0]
 800bb8a:	4013      	ands	r3, r2
 800bb8c:	2b00      	cmp	r3, #0
 800bb8e:	d019      	beq.n	800bbc4 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800bb90:	693b      	ldr	r3, [r7, #16]
 800bb92:	681b      	ldr	r3, [r3, #0]
 800bb94:	2b00      	cmp	r3, #0
 800bb96:	d115      	bne.n	800bbc4 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800bb98:	693b      	ldr	r3, [r7, #16]
 800bb9a:	685a      	ldr	r2, [r3, #4]
 800bb9c:	4b0b      	ldr	r3, [pc, #44]	; (800bbcc <vPortFree+0xa8>)
 800bb9e:	681b      	ldr	r3, [r3, #0]
 800bba0:	43db      	mvns	r3, r3
 800bba2:	401a      	ands	r2, r3
 800bba4:	693b      	ldr	r3, [r7, #16]
 800bba6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800bba8:	f7fe feb6 	bl	800a918 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800bbac:	693b      	ldr	r3, [r7, #16]
 800bbae:	685a      	ldr	r2, [r3, #4]
 800bbb0:	4b07      	ldr	r3, [pc, #28]	; (800bbd0 <vPortFree+0xac>)
 800bbb2:	681b      	ldr	r3, [r3, #0]
 800bbb4:	4413      	add	r3, r2
 800bbb6:	4a06      	ldr	r2, [pc, #24]	; (800bbd0 <vPortFree+0xac>)
 800bbb8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800bbba:	6938      	ldr	r0, [r7, #16]
 800bbbc:	f000 f86c 	bl	800bc98 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800bbc0:	f7fe feb8 	bl	800a934 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800bbc4:	bf00      	nop
 800bbc6:	3718      	adds	r7, #24
 800bbc8:	46bd      	mov	sp, r7
 800bbca:	bd80      	pop	{r7, pc}
 800bbcc:	200041bc 	.word	0x200041bc
 800bbd0:	200041b4 	.word	0x200041b4

0800bbd4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800bbd4:	b480      	push	{r7}
 800bbd6:	b085      	sub	sp, #20
 800bbd8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800bbda:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800bbde:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800bbe0:	4b27      	ldr	r3, [pc, #156]	; (800bc80 <prvHeapInit+0xac>)
 800bbe2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800bbe4:	68fb      	ldr	r3, [r7, #12]
 800bbe6:	f003 0307 	and.w	r3, r3, #7
 800bbea:	2b00      	cmp	r3, #0
 800bbec:	d00c      	beq.n	800bc08 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800bbee:	68fb      	ldr	r3, [r7, #12]
 800bbf0:	3307      	adds	r3, #7
 800bbf2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800bbf4:	68fb      	ldr	r3, [r7, #12]
 800bbf6:	f023 0307 	bic.w	r3, r3, #7
 800bbfa:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800bbfc:	68ba      	ldr	r2, [r7, #8]
 800bbfe:	68fb      	ldr	r3, [r7, #12]
 800bc00:	1ad3      	subs	r3, r2, r3
 800bc02:	4a1f      	ldr	r2, [pc, #124]	; (800bc80 <prvHeapInit+0xac>)
 800bc04:	4413      	add	r3, r2
 800bc06:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800bc08:	68fb      	ldr	r3, [r7, #12]
 800bc0a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800bc0c:	4a1d      	ldr	r2, [pc, #116]	; (800bc84 <prvHeapInit+0xb0>)
 800bc0e:	687b      	ldr	r3, [r7, #4]
 800bc10:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800bc12:	4b1c      	ldr	r3, [pc, #112]	; (800bc84 <prvHeapInit+0xb0>)
 800bc14:	2200      	movs	r2, #0
 800bc16:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800bc18:	687b      	ldr	r3, [r7, #4]
 800bc1a:	68ba      	ldr	r2, [r7, #8]
 800bc1c:	4413      	add	r3, r2
 800bc1e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800bc20:	2208      	movs	r2, #8
 800bc22:	68fb      	ldr	r3, [r7, #12]
 800bc24:	1a9b      	subs	r3, r3, r2
 800bc26:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800bc28:	68fb      	ldr	r3, [r7, #12]
 800bc2a:	f023 0307 	bic.w	r3, r3, #7
 800bc2e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800bc30:	68fb      	ldr	r3, [r7, #12]
 800bc32:	4a15      	ldr	r2, [pc, #84]	; (800bc88 <prvHeapInit+0xb4>)
 800bc34:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800bc36:	4b14      	ldr	r3, [pc, #80]	; (800bc88 <prvHeapInit+0xb4>)
 800bc38:	681b      	ldr	r3, [r3, #0]
 800bc3a:	2200      	movs	r2, #0
 800bc3c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800bc3e:	4b12      	ldr	r3, [pc, #72]	; (800bc88 <prvHeapInit+0xb4>)
 800bc40:	681b      	ldr	r3, [r3, #0]
 800bc42:	2200      	movs	r2, #0
 800bc44:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800bc46:	687b      	ldr	r3, [r7, #4]
 800bc48:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800bc4a:	683b      	ldr	r3, [r7, #0]
 800bc4c:	68fa      	ldr	r2, [r7, #12]
 800bc4e:	1ad2      	subs	r2, r2, r3
 800bc50:	683b      	ldr	r3, [r7, #0]
 800bc52:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800bc54:	4b0c      	ldr	r3, [pc, #48]	; (800bc88 <prvHeapInit+0xb4>)
 800bc56:	681a      	ldr	r2, [r3, #0]
 800bc58:	683b      	ldr	r3, [r7, #0]
 800bc5a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800bc5c:	683b      	ldr	r3, [r7, #0]
 800bc5e:	685b      	ldr	r3, [r3, #4]
 800bc60:	4a0a      	ldr	r2, [pc, #40]	; (800bc8c <prvHeapInit+0xb8>)
 800bc62:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800bc64:	683b      	ldr	r3, [r7, #0]
 800bc66:	685b      	ldr	r3, [r3, #4]
 800bc68:	4a09      	ldr	r2, [pc, #36]	; (800bc90 <prvHeapInit+0xbc>)
 800bc6a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800bc6c:	4b09      	ldr	r3, [pc, #36]	; (800bc94 <prvHeapInit+0xc0>)
 800bc6e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800bc72:	601a      	str	r2, [r3, #0]
}
 800bc74:	bf00      	nop
 800bc76:	3714      	adds	r7, #20
 800bc78:	46bd      	mov	sp, r7
 800bc7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc7e:	4770      	bx	lr
 800bc80:	200005a8 	.word	0x200005a8
 800bc84:	200041a8 	.word	0x200041a8
 800bc88:	200041b0 	.word	0x200041b0
 800bc8c:	200041b8 	.word	0x200041b8
 800bc90:	200041b4 	.word	0x200041b4
 800bc94:	200041bc 	.word	0x200041bc

0800bc98 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800bc98:	b480      	push	{r7}
 800bc9a:	b085      	sub	sp, #20
 800bc9c:	af00      	add	r7, sp, #0
 800bc9e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800bca0:	4b28      	ldr	r3, [pc, #160]	; (800bd44 <prvInsertBlockIntoFreeList+0xac>)
 800bca2:	60fb      	str	r3, [r7, #12]
 800bca4:	e002      	b.n	800bcac <prvInsertBlockIntoFreeList+0x14>
 800bca6:	68fb      	ldr	r3, [r7, #12]
 800bca8:	681b      	ldr	r3, [r3, #0]
 800bcaa:	60fb      	str	r3, [r7, #12]
 800bcac:	68fb      	ldr	r3, [r7, #12]
 800bcae:	681b      	ldr	r3, [r3, #0]
 800bcb0:	687a      	ldr	r2, [r7, #4]
 800bcb2:	429a      	cmp	r2, r3
 800bcb4:	d8f7      	bhi.n	800bca6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800bcb6:	68fb      	ldr	r3, [r7, #12]
 800bcb8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800bcba:	68fb      	ldr	r3, [r7, #12]
 800bcbc:	685b      	ldr	r3, [r3, #4]
 800bcbe:	68ba      	ldr	r2, [r7, #8]
 800bcc0:	4413      	add	r3, r2
 800bcc2:	687a      	ldr	r2, [r7, #4]
 800bcc4:	429a      	cmp	r2, r3
 800bcc6:	d108      	bne.n	800bcda <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800bcc8:	68fb      	ldr	r3, [r7, #12]
 800bcca:	685a      	ldr	r2, [r3, #4]
 800bccc:	687b      	ldr	r3, [r7, #4]
 800bcce:	685b      	ldr	r3, [r3, #4]
 800bcd0:	441a      	add	r2, r3
 800bcd2:	68fb      	ldr	r3, [r7, #12]
 800bcd4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800bcd6:	68fb      	ldr	r3, [r7, #12]
 800bcd8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800bcda:	687b      	ldr	r3, [r7, #4]
 800bcdc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800bcde:	687b      	ldr	r3, [r7, #4]
 800bce0:	685b      	ldr	r3, [r3, #4]
 800bce2:	68ba      	ldr	r2, [r7, #8]
 800bce4:	441a      	add	r2, r3
 800bce6:	68fb      	ldr	r3, [r7, #12]
 800bce8:	681b      	ldr	r3, [r3, #0]
 800bcea:	429a      	cmp	r2, r3
 800bcec:	d118      	bne.n	800bd20 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800bcee:	68fb      	ldr	r3, [r7, #12]
 800bcf0:	681a      	ldr	r2, [r3, #0]
 800bcf2:	4b15      	ldr	r3, [pc, #84]	; (800bd48 <prvInsertBlockIntoFreeList+0xb0>)
 800bcf4:	681b      	ldr	r3, [r3, #0]
 800bcf6:	429a      	cmp	r2, r3
 800bcf8:	d00d      	beq.n	800bd16 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800bcfa:	687b      	ldr	r3, [r7, #4]
 800bcfc:	685a      	ldr	r2, [r3, #4]
 800bcfe:	68fb      	ldr	r3, [r7, #12]
 800bd00:	681b      	ldr	r3, [r3, #0]
 800bd02:	685b      	ldr	r3, [r3, #4]
 800bd04:	441a      	add	r2, r3
 800bd06:	687b      	ldr	r3, [r7, #4]
 800bd08:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800bd0a:	68fb      	ldr	r3, [r7, #12]
 800bd0c:	681b      	ldr	r3, [r3, #0]
 800bd0e:	681a      	ldr	r2, [r3, #0]
 800bd10:	687b      	ldr	r3, [r7, #4]
 800bd12:	601a      	str	r2, [r3, #0]
 800bd14:	e008      	b.n	800bd28 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800bd16:	4b0c      	ldr	r3, [pc, #48]	; (800bd48 <prvInsertBlockIntoFreeList+0xb0>)
 800bd18:	681a      	ldr	r2, [r3, #0]
 800bd1a:	687b      	ldr	r3, [r7, #4]
 800bd1c:	601a      	str	r2, [r3, #0]
 800bd1e:	e003      	b.n	800bd28 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800bd20:	68fb      	ldr	r3, [r7, #12]
 800bd22:	681a      	ldr	r2, [r3, #0]
 800bd24:	687b      	ldr	r3, [r7, #4]
 800bd26:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800bd28:	68fa      	ldr	r2, [r7, #12]
 800bd2a:	687b      	ldr	r3, [r7, #4]
 800bd2c:	429a      	cmp	r2, r3
 800bd2e:	d002      	beq.n	800bd36 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800bd30:	68fb      	ldr	r3, [r7, #12]
 800bd32:	687a      	ldr	r2, [r7, #4]
 800bd34:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800bd36:	bf00      	nop
 800bd38:	3714      	adds	r7, #20
 800bd3a:	46bd      	mov	sp, r7
 800bd3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd40:	4770      	bx	lr
 800bd42:	bf00      	nop
 800bd44:	200041a8 	.word	0x200041a8
 800bd48:	200041b0 	.word	0x200041b0

0800bd4c <tcpip_thread>:
 *
 * @param arg unused argument
 */
static void
tcpip_thread(void *arg)
{
 800bd4c:	b580      	push	{r7, lr}
 800bd4e:	b084      	sub	sp, #16
 800bd50:	af00      	add	r7, sp, #0
 800bd52:	6078      	str	r0, [r7, #4]
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  if (tcpip_init_done != NULL) {
 800bd54:	4b29      	ldr	r3, [pc, #164]	; (800bdfc <tcpip_thread+0xb0>)
 800bd56:	681b      	ldr	r3, [r3, #0]
 800bd58:	2b00      	cmp	r3, #0
 800bd5a:	d005      	beq.n	800bd68 <tcpip_thread+0x1c>
    tcpip_init_done(tcpip_init_done_arg);
 800bd5c:	4b27      	ldr	r3, [pc, #156]	; (800bdfc <tcpip_thread+0xb0>)
 800bd5e:	681b      	ldr	r3, [r3, #0]
 800bd60:	4a27      	ldr	r2, [pc, #156]	; (800be00 <tcpip_thread+0xb4>)
 800bd62:	6812      	ldr	r2, [r2, #0]
 800bd64:	4610      	mov	r0, r2
 800bd66:	4798      	blx	r3
  }

  LOCK_TCPIP_CORE();
 800bd68:	4826      	ldr	r0, [pc, #152]	; (800be04 <tcpip_thread+0xb8>)
 800bd6a:	f00b fe35 	bl	80179d8 <sys_mutex_lock>
  while (1) {                          /* MAIN Loop */
    UNLOCK_TCPIP_CORE();
 800bd6e:	4825      	ldr	r0, [pc, #148]	; (800be04 <tcpip_thread+0xb8>)
 800bd70:	f00b fe41 	bl	80179f6 <sys_mutex_unlock>
    LWIP_TCPIP_THREAD_ALIVE();
    /* wait for a message, timeouts are processed while waiting */
    TCPIP_MBOX_FETCH(&mbox, (void **)&msg);
 800bd74:	f107 030c 	add.w	r3, r7, #12
 800bd78:	4619      	mov	r1, r3
 800bd7a:	4823      	ldr	r0, [pc, #140]	; (800be08 <tcpip_thread+0xbc>)
 800bd7c:	f007 f8ce 	bl	8012f1c <sys_timeouts_mbox_fetch>
    LOCK_TCPIP_CORE();
 800bd80:	4820      	ldr	r0, [pc, #128]	; (800be04 <tcpip_thread+0xb8>)
 800bd82:	f00b fe29 	bl	80179d8 <sys_mutex_lock>
    if (msg == NULL) {
 800bd86:	68fb      	ldr	r3, [r7, #12]
 800bd88:	2b00      	cmp	r3, #0
 800bd8a:	d106      	bne.n	800bd9a <tcpip_thread+0x4e>
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: NULL\n"));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 800bd8c:	4b1f      	ldr	r3, [pc, #124]	; (800be0c <tcpip_thread+0xc0>)
 800bd8e:	2269      	movs	r2, #105	; 0x69
 800bd90:	491f      	ldr	r1, [pc, #124]	; (800be10 <tcpip_thread+0xc4>)
 800bd92:	4820      	ldr	r0, [pc, #128]	; (800be14 <tcpip_thread+0xc8>)
 800bd94:	f00c fc58 	bl	8018648 <iprintf>
      continue;
 800bd98:	e02f      	b.n	800bdfa <tcpip_thread+0xae>
    }
    switch (msg->type) {
 800bd9a:	68fb      	ldr	r3, [r7, #12]
 800bd9c:	781b      	ldrb	r3, [r3, #0]
 800bd9e:	2b03      	cmp	r3, #3
 800bda0:	d011      	beq.n	800bdc6 <tcpip_thread+0x7a>
 800bda2:	2b04      	cmp	r3, #4
 800bda4:	d01b      	beq.n	800bdde <tcpip_thread+0x92>
 800bda6:	2b02      	cmp	r3, #2
 800bda8:	d120      	bne.n	800bdec <tcpip_thread+0xa0>
#endif /* !LWIP_TCPIP_CORE_LOCKING */

#if !LWIP_TCPIP_CORE_LOCKING_INPUT
    case TCPIP_MSG_INPKT:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: PACKET %p\n", (void *)msg));
      msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif);
 800bdaa:	68fb      	ldr	r3, [r7, #12]
 800bdac:	68db      	ldr	r3, [r3, #12]
 800bdae:	68fa      	ldr	r2, [r7, #12]
 800bdb0:	6850      	ldr	r0, [r2, #4]
 800bdb2:	68fa      	ldr	r2, [r7, #12]
 800bdb4:	6892      	ldr	r2, [r2, #8]
 800bdb6:	4611      	mov	r1, r2
 800bdb8:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 800bdba:	68fb      	ldr	r3, [r7, #12]
 800bdbc:	4619      	mov	r1, r3
 800bdbe:	2009      	movs	r0, #9
 800bdc0:	f000 fd64 	bl	800c88c <memp_free>
      break;
 800bdc4:	e019      	b.n	800bdfa <tcpip_thread+0xae>
      break;
#endif /* LWIP_TCPIP_TIMEOUT && LWIP_TIMERS */

    case TCPIP_MSG_CALLBACK:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 800bdc6:	68fb      	ldr	r3, [r7, #12]
 800bdc8:	685b      	ldr	r3, [r3, #4]
 800bdca:	68fa      	ldr	r2, [r7, #12]
 800bdcc:	6892      	ldr	r2, [r2, #8]
 800bdce:	4610      	mov	r0, r2
 800bdd0:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_API, msg);
 800bdd2:	68fb      	ldr	r3, [r7, #12]
 800bdd4:	4619      	mov	r1, r3
 800bdd6:	2008      	movs	r0, #8
 800bdd8:	f000 fd58 	bl	800c88c <memp_free>
      break;
 800bddc:	e00d      	b.n	800bdfa <tcpip_thread+0xae>

    case TCPIP_MSG_CALLBACK_STATIC:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK_STATIC %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 800bdde:	68fb      	ldr	r3, [r7, #12]
 800bde0:	685b      	ldr	r3, [r3, #4]
 800bde2:	68fa      	ldr	r2, [r7, #12]
 800bde4:	6892      	ldr	r2, [r2, #8]
 800bde6:	4610      	mov	r0, r2
 800bde8:	4798      	blx	r3
      break;
 800bdea:	e006      	b.n	800bdfa <tcpip_thread+0xae>

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 800bdec:	4b07      	ldr	r3, [pc, #28]	; (800be0c <tcpip_thread+0xc0>)
 800bdee:	229b      	movs	r2, #155	; 0x9b
 800bdf0:	4907      	ldr	r1, [pc, #28]	; (800be10 <tcpip_thread+0xc4>)
 800bdf2:	4808      	ldr	r0, [pc, #32]	; (800be14 <tcpip_thread+0xc8>)
 800bdf4:	f00c fc28 	bl	8018648 <iprintf>
      break;
 800bdf8:	bf00      	nop
    UNLOCK_TCPIP_CORE();
 800bdfa:	e7b8      	b.n	800bd6e <tcpip_thread+0x22>
 800bdfc:	200041c0 	.word	0x200041c0
 800be00:	200041c4 	.word	0x200041c4
 800be04:	20007500 	.word	0x20007500
 800be08:	200041c8 	.word	0x200041c8
 800be0c:	080194e0 	.word	0x080194e0
 800be10:	08019510 	.word	0x08019510
 800be14:	08019530 	.word	0x08019530

0800be18 <tcpip_inpkt>:
 * @param inp the network interface on which the packet was received
 * @param input_fn input function to call
 */
err_t
tcpip_inpkt(struct pbuf *p, struct netif *inp, netif_input_fn input_fn)
{
 800be18:	b580      	push	{r7, lr}
 800be1a:	b086      	sub	sp, #24
 800be1c:	af00      	add	r7, sp, #0
 800be1e:	60f8      	str	r0, [r7, #12]
 800be20:	60b9      	str	r1, [r7, #8]
 800be22:	607a      	str	r2, [r7, #4]
  UNLOCK_TCPIP_CORE();
  return ret;
#else /* LWIP_TCPIP_CORE_LOCKING_INPUT */
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(mbox));
 800be24:	481a      	ldr	r0, [pc, #104]	; (800be90 <tcpip_inpkt+0x78>)
 800be26:	f00b fd9b 	bl	8017960 <sys_mbox_valid>
 800be2a:	4603      	mov	r3, r0
 800be2c:	2b00      	cmp	r3, #0
 800be2e:	d105      	bne.n	800be3c <tcpip_inpkt+0x24>
 800be30:	4b18      	ldr	r3, [pc, #96]	; (800be94 <tcpip_inpkt+0x7c>)
 800be32:	22b5      	movs	r2, #181	; 0xb5
 800be34:	4918      	ldr	r1, [pc, #96]	; (800be98 <tcpip_inpkt+0x80>)
 800be36:	4819      	ldr	r0, [pc, #100]	; (800be9c <tcpip_inpkt+0x84>)
 800be38:	f00c fc06 	bl	8018648 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
 800be3c:	2009      	movs	r0, #9
 800be3e:	f000 fcd3 	bl	800c7e8 <memp_malloc>
 800be42:	6178      	str	r0, [r7, #20]
  if (msg == NULL) {
 800be44:	697b      	ldr	r3, [r7, #20]
 800be46:	2b00      	cmp	r3, #0
 800be48:	d102      	bne.n	800be50 <tcpip_inpkt+0x38>
    return ERR_MEM;
 800be4a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800be4e:	e01a      	b.n	800be86 <tcpip_inpkt+0x6e>
  }

  msg->type = TCPIP_MSG_INPKT;
 800be50:	697b      	ldr	r3, [r7, #20]
 800be52:	2202      	movs	r2, #2
 800be54:	701a      	strb	r2, [r3, #0]
  msg->msg.inp.p = p;
 800be56:	697b      	ldr	r3, [r7, #20]
 800be58:	68fa      	ldr	r2, [r7, #12]
 800be5a:	605a      	str	r2, [r3, #4]
  msg->msg.inp.netif = inp;
 800be5c:	697b      	ldr	r3, [r7, #20]
 800be5e:	68ba      	ldr	r2, [r7, #8]
 800be60:	609a      	str	r2, [r3, #8]
  msg->msg.inp.input_fn = input_fn;
 800be62:	697b      	ldr	r3, [r7, #20]
 800be64:	687a      	ldr	r2, [r7, #4]
 800be66:	60da      	str	r2, [r3, #12]
  if (sys_mbox_trypost(&mbox, msg) != ERR_OK) {
 800be68:	6979      	ldr	r1, [r7, #20]
 800be6a:	4809      	ldr	r0, [pc, #36]	; (800be90 <tcpip_inpkt+0x78>)
 800be6c:	f00b fd1f 	bl	80178ae <sys_mbox_trypost>
 800be70:	4603      	mov	r3, r0
 800be72:	2b00      	cmp	r3, #0
 800be74:	d006      	beq.n	800be84 <tcpip_inpkt+0x6c>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 800be76:	6979      	ldr	r1, [r7, #20]
 800be78:	2009      	movs	r0, #9
 800be7a:	f000 fd07 	bl	800c88c <memp_free>
    return ERR_MEM;
 800be7e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800be82:	e000      	b.n	800be86 <tcpip_inpkt+0x6e>
  }
  return ERR_OK;
 800be84:	2300      	movs	r3, #0
#endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
}
 800be86:	4618      	mov	r0, r3
 800be88:	3718      	adds	r7, #24
 800be8a:	46bd      	mov	sp, r7
 800be8c:	bd80      	pop	{r7, pc}
 800be8e:	bf00      	nop
 800be90:	200041c8 	.word	0x200041c8
 800be94:	080194e0 	.word	0x080194e0
 800be98:	08019558 	.word	0x08019558
 800be9c:	08019530 	.word	0x08019530

0800bea0 <tcpip_input>:
 *          NETIF_FLAG_ETHERNET flags)
 * @param inp the network interface on which the packet was received
 */
err_t
tcpip_input(struct pbuf *p, struct netif *inp)
{
 800bea0:	b580      	push	{r7, lr}
 800bea2:	b082      	sub	sp, #8
 800bea4:	af00      	add	r7, sp, #0
 800bea6:	6078      	str	r0, [r7, #4]
 800bea8:	6039      	str	r1, [r7, #0]
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 800beaa:	683b      	ldr	r3, [r7, #0]
 800beac:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800beb0:	f003 0318 	and.w	r3, r3, #24
 800beb4:	2b00      	cmp	r3, #0
 800beb6:	d006      	beq.n	800bec6 <tcpip_input+0x26>
    return tcpip_inpkt(p, inp, ethernet_input);
 800beb8:	4a08      	ldr	r2, [pc, #32]	; (800bedc <tcpip_input+0x3c>)
 800beba:	6839      	ldr	r1, [r7, #0]
 800bebc:	6878      	ldr	r0, [r7, #4]
 800bebe:	f7ff ffab 	bl	800be18 <tcpip_inpkt>
 800bec2:	4603      	mov	r3, r0
 800bec4:	e005      	b.n	800bed2 <tcpip_input+0x32>
  } else
#endif /* LWIP_ETHERNET */
  return tcpip_inpkt(p, inp, ip_input);
 800bec6:	4a06      	ldr	r2, [pc, #24]	; (800bee0 <tcpip_input+0x40>)
 800bec8:	6839      	ldr	r1, [r7, #0]
 800beca:	6878      	ldr	r0, [r7, #4]
 800becc:	f7ff ffa4 	bl	800be18 <tcpip_inpkt>
 800bed0:	4603      	mov	r3, r0
}
 800bed2:	4618      	mov	r0, r3
 800bed4:	3708      	adds	r7, #8
 800bed6:	46bd      	mov	sp, r7
 800bed8:	bd80      	pop	{r7, pc}
 800beda:	bf00      	nop
 800bedc:	08017689 	.word	0x08017689
 800bee0:	08016611 	.word	0x08016611

0800bee4 <tcpip_callback_with_block>:
 * @param block 1 to block until the request is posted, 0 to non-blocking mode
 * @return ERR_OK if the function was called, another err_t if not
 */
err_t
tcpip_callback_with_block(tcpip_callback_fn function, void *ctx, u8_t block)
{
 800bee4:	b580      	push	{r7, lr}
 800bee6:	b086      	sub	sp, #24
 800bee8:	af00      	add	r7, sp, #0
 800beea:	60f8      	str	r0, [r7, #12]
 800beec:	60b9      	str	r1, [r7, #8]
 800beee:	4613      	mov	r3, r2
 800bef0:	71fb      	strb	r3, [r7, #7]
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(mbox));
 800bef2:	481d      	ldr	r0, [pc, #116]	; (800bf68 <tcpip_callback_with_block+0x84>)
 800bef4:	f00b fd34 	bl	8017960 <sys_mbox_valid>
 800bef8:	4603      	mov	r3, r0
 800befa:	2b00      	cmp	r3, #0
 800befc:	d105      	bne.n	800bf0a <tcpip_callback_with_block+0x26>
 800befe:	4b1b      	ldr	r3, [pc, #108]	; (800bf6c <tcpip_callback_with_block+0x88>)
 800bf00:	22ee      	movs	r2, #238	; 0xee
 800bf02:	491b      	ldr	r1, [pc, #108]	; (800bf70 <tcpip_callback_with_block+0x8c>)
 800bf04:	481b      	ldr	r0, [pc, #108]	; (800bf74 <tcpip_callback_with_block+0x90>)
 800bf06:	f00c fb9f 	bl	8018648 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
 800bf0a:	2008      	movs	r0, #8
 800bf0c:	f000 fc6c 	bl	800c7e8 <memp_malloc>
 800bf10:	6178      	str	r0, [r7, #20]
  if (msg == NULL) {
 800bf12:	697b      	ldr	r3, [r7, #20]
 800bf14:	2b00      	cmp	r3, #0
 800bf16:	d102      	bne.n	800bf1e <tcpip_callback_with_block+0x3a>
    return ERR_MEM;
 800bf18:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800bf1c:	e01f      	b.n	800bf5e <tcpip_callback_with_block+0x7a>
  }

  msg->type = TCPIP_MSG_CALLBACK;
 800bf1e:	697b      	ldr	r3, [r7, #20]
 800bf20:	2203      	movs	r2, #3
 800bf22:	701a      	strb	r2, [r3, #0]
  msg->msg.cb.function = function;
 800bf24:	697b      	ldr	r3, [r7, #20]
 800bf26:	68fa      	ldr	r2, [r7, #12]
 800bf28:	605a      	str	r2, [r3, #4]
  msg->msg.cb.ctx = ctx;
 800bf2a:	697b      	ldr	r3, [r7, #20]
 800bf2c:	68ba      	ldr	r2, [r7, #8]
 800bf2e:	609a      	str	r2, [r3, #8]
  if (block) {
 800bf30:	79fb      	ldrb	r3, [r7, #7]
 800bf32:	2b00      	cmp	r3, #0
 800bf34:	d004      	beq.n	800bf40 <tcpip_callback_with_block+0x5c>
    sys_mbox_post(&mbox, msg);
 800bf36:	6979      	ldr	r1, [r7, #20]
 800bf38:	480b      	ldr	r0, [pc, #44]	; (800bf68 <tcpip_callback_with_block+0x84>)
 800bf3a:	f00b fca3 	bl	8017884 <sys_mbox_post>
 800bf3e:	e00d      	b.n	800bf5c <tcpip_callback_with_block+0x78>
  } else {
    if (sys_mbox_trypost(&mbox, msg) != ERR_OK) {
 800bf40:	6979      	ldr	r1, [r7, #20]
 800bf42:	4809      	ldr	r0, [pc, #36]	; (800bf68 <tcpip_callback_with_block+0x84>)
 800bf44:	f00b fcb3 	bl	80178ae <sys_mbox_trypost>
 800bf48:	4603      	mov	r3, r0
 800bf4a:	2b00      	cmp	r3, #0
 800bf4c:	d006      	beq.n	800bf5c <tcpip_callback_with_block+0x78>
      memp_free(MEMP_TCPIP_MSG_API, msg);
 800bf4e:	6979      	ldr	r1, [r7, #20]
 800bf50:	2008      	movs	r0, #8
 800bf52:	f000 fc9b 	bl	800c88c <memp_free>
      return ERR_MEM;
 800bf56:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800bf5a:	e000      	b.n	800bf5e <tcpip_callback_with_block+0x7a>
    }
  }
  return ERR_OK;
 800bf5c:	2300      	movs	r3, #0
}
 800bf5e:	4618      	mov	r0, r3
 800bf60:	3718      	adds	r7, #24
 800bf62:	46bd      	mov	sp, r7
 800bf64:	bd80      	pop	{r7, pc}
 800bf66:	bf00      	nop
 800bf68:	200041c8 	.word	0x200041c8
 800bf6c:	080194e0 	.word	0x080194e0
 800bf70:	08019558 	.word	0x08019558
 800bf74:	08019530 	.word	0x08019530

0800bf78 <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
 800bf78:	b580      	push	{r7, lr}
 800bf7a:	b084      	sub	sp, #16
 800bf7c:	af02      	add	r7, sp, #8
 800bf7e:	6078      	str	r0, [r7, #4]
 800bf80:	6039      	str	r1, [r7, #0]
  lwip_init();
 800bf82:	f000 f86a 	bl	800c05a <lwip_init>

  tcpip_init_done = initfunc;
 800bf86:	4a17      	ldr	r2, [pc, #92]	; (800bfe4 <tcpip_init+0x6c>)
 800bf88:	687b      	ldr	r3, [r7, #4]
 800bf8a:	6013      	str	r3, [r2, #0]
  tcpip_init_done_arg = arg;
 800bf8c:	4a16      	ldr	r2, [pc, #88]	; (800bfe8 <tcpip_init+0x70>)
 800bf8e:	683b      	ldr	r3, [r7, #0]
 800bf90:	6013      	str	r3, [r2, #0]
  if (sys_mbox_new(&mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 800bf92:	2106      	movs	r1, #6
 800bf94:	4815      	ldr	r0, [pc, #84]	; (800bfec <tcpip_init+0x74>)
 800bf96:	f00b fc53 	bl	8017840 <sys_mbox_new>
 800bf9a:	4603      	mov	r3, r0
 800bf9c:	2b00      	cmp	r3, #0
 800bf9e:	d006      	beq.n	800bfae <tcpip_init+0x36>
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 800bfa0:	4b13      	ldr	r3, [pc, #76]	; (800bff0 <tcpip_init+0x78>)
 800bfa2:	f240 12d5 	movw	r2, #469	; 0x1d5
 800bfa6:	4913      	ldr	r1, [pc, #76]	; (800bff4 <tcpip_init+0x7c>)
 800bfa8:	4813      	ldr	r0, [pc, #76]	; (800bff8 <tcpip_init+0x80>)
 800bfaa:	f00c fb4d 	bl	8018648 <iprintf>
  }
#if LWIP_TCPIP_CORE_LOCKING
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 800bfae:	4813      	ldr	r0, [pc, #76]	; (800bffc <tcpip_init+0x84>)
 800bfb0:	f00b fcf6 	bl	80179a0 <sys_mutex_new>
 800bfb4:	4603      	mov	r3, r0
 800bfb6:	2b00      	cmp	r3, #0
 800bfb8:	d006      	beq.n	800bfc8 <tcpip_init+0x50>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
 800bfba:	4b0d      	ldr	r3, [pc, #52]	; (800bff0 <tcpip_init+0x78>)
 800bfbc:	f240 12d9 	movw	r2, #473	; 0x1d9
 800bfc0:	490f      	ldr	r1, [pc, #60]	; (800c000 <tcpip_init+0x88>)
 800bfc2:	480d      	ldr	r0, [pc, #52]	; (800bff8 <tcpip_init+0x80>)
 800bfc4:	f00c fb40 	bl	8018648 <iprintf>
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 800bfc8:	2303      	movs	r3, #3
 800bfca:	9300      	str	r3, [sp, #0]
 800bfcc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800bfd0:	2200      	movs	r2, #0
 800bfd2:	490c      	ldr	r1, [pc, #48]	; (800c004 <tcpip_init+0x8c>)
 800bfd4:	480c      	ldr	r0, [pc, #48]	; (800c008 <tcpip_init+0x90>)
 800bfd6:	f00b fd1b 	bl	8017a10 <sys_thread_new>
}
 800bfda:	bf00      	nop
 800bfdc:	3708      	adds	r7, #8
 800bfde:	46bd      	mov	sp, r7
 800bfe0:	bd80      	pop	{r7, pc}
 800bfe2:	bf00      	nop
 800bfe4:	200041c0 	.word	0x200041c0
 800bfe8:	200041c4 	.word	0x200041c4
 800bfec:	200041c8 	.word	0x200041c8
 800bff0:	080194e0 	.word	0x080194e0
 800bff4:	08019568 	.word	0x08019568
 800bff8:	08019530 	.word	0x08019530
 800bffc:	20007500 	.word	0x20007500
 800c000:	0801958c 	.word	0x0801958c
 800c004:	0800bd4d 	.word	0x0800bd4d
 800c008:	080195b0 	.word	0x080195b0

0800c00c <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 800c00c:	b480      	push	{r7}
 800c00e:	b083      	sub	sp, #12
 800c010:	af00      	add	r7, sp, #0
 800c012:	4603      	mov	r3, r0
 800c014:	80fb      	strh	r3, [r7, #6]
  return (u16_t)PP_HTONS(n);
 800c016:	88fb      	ldrh	r3, [r7, #6]
 800c018:	ba5b      	rev16	r3, r3
 800c01a:	b29b      	uxth	r3, r3
}
 800c01c:	4618      	mov	r0, r3
 800c01e:	370c      	adds	r7, #12
 800c020:	46bd      	mov	sp, r7
 800c022:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c026:	4770      	bx	lr

0800c028 <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 800c028:	b480      	push	{r7}
 800c02a:	b083      	sub	sp, #12
 800c02c:	af00      	add	r7, sp, #0
 800c02e:	6078      	str	r0, [r7, #4]
  return (u32_t)PP_HTONL(n);
 800c030:	687b      	ldr	r3, [r7, #4]
 800c032:	061a      	lsls	r2, r3, #24
 800c034:	687b      	ldr	r3, [r7, #4]
 800c036:	021b      	lsls	r3, r3, #8
 800c038:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800c03c:	431a      	orrs	r2, r3
 800c03e:	687b      	ldr	r3, [r7, #4]
 800c040:	0a1b      	lsrs	r3, r3, #8
 800c042:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800c046:	431a      	orrs	r2, r3
 800c048:	687b      	ldr	r3, [r7, #4]
 800c04a:	0e1b      	lsrs	r3, r3, #24
 800c04c:	4313      	orrs	r3, r2
}
 800c04e:	4618      	mov	r0, r3
 800c050:	370c      	adds	r7, #12
 800c052:	46bd      	mov	sp, r7
 800c054:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c058:	4770      	bx	lr

0800c05a <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 800c05a:	b580      	push	{r7, lr}
 800c05c:	b082      	sub	sp, #8
 800c05e:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 800c060:	2300      	movs	r3, #0
 800c062:	607b      	str	r3, [r7, #4]
#endif

  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
 800c064:	f00b fc8e 	bl	8017984 <sys_init>
#endif /* !NO_SYS */
  mem_init();
 800c068:	f000 f8a6 	bl	800c1b8 <mem_init>
  memp_init();
 800c06c:	f000 fb70 	bl	800c750 <memp_init>
  pbuf_init();
  netif_init();
 800c070:	f000 fc36 	bl	800c8e0 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 800c074:	f006 ff78 	bl	8012f68 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 800c078:	f001 fbf0 	bl	800d85c <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif
 
#if LWIP_TIMERS
  sys_timeouts_init();
 800c07c:	f006 fe0a 	bl	8012c94 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 800c080:	bf00      	nop
 800c082:	3708      	adds	r7, #8
 800c084:	46bd      	mov	sp, r7
 800c086:	bd80      	pop	{r7, pc}

0800c088 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 800c088:	b580      	push	{r7, lr}
 800c08a:	b084      	sub	sp, #16
 800c08c:	af00      	add	r7, sp, #0
 800c08e:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 800c090:	4b40      	ldr	r3, [pc, #256]	; (800c194 <plug_holes+0x10c>)
 800c092:	681b      	ldr	r3, [r3, #0]
 800c094:	687a      	ldr	r2, [r7, #4]
 800c096:	429a      	cmp	r2, r3
 800c098:	d206      	bcs.n	800c0a8 <plug_holes+0x20>
 800c09a:	4b3f      	ldr	r3, [pc, #252]	; (800c198 <plug_holes+0x110>)
 800c09c:	f240 125d 	movw	r2, #349	; 0x15d
 800c0a0:	493e      	ldr	r1, [pc, #248]	; (800c19c <plug_holes+0x114>)
 800c0a2:	483f      	ldr	r0, [pc, #252]	; (800c1a0 <plug_holes+0x118>)
 800c0a4:	f00c fad0 	bl	8018648 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 800c0a8:	4b3e      	ldr	r3, [pc, #248]	; (800c1a4 <plug_holes+0x11c>)
 800c0aa:	681b      	ldr	r3, [r3, #0]
 800c0ac:	687a      	ldr	r2, [r7, #4]
 800c0ae:	429a      	cmp	r2, r3
 800c0b0:	d306      	bcc.n	800c0c0 <plug_holes+0x38>
 800c0b2:	4b39      	ldr	r3, [pc, #228]	; (800c198 <plug_holes+0x110>)
 800c0b4:	f44f 72af 	mov.w	r2, #350	; 0x15e
 800c0b8:	493b      	ldr	r1, [pc, #236]	; (800c1a8 <plug_holes+0x120>)
 800c0ba:	4839      	ldr	r0, [pc, #228]	; (800c1a0 <plug_holes+0x118>)
 800c0bc:	f00c fac4 	bl	8018648 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 800c0c0:	687b      	ldr	r3, [r7, #4]
 800c0c2:	791b      	ldrb	r3, [r3, #4]
 800c0c4:	2b00      	cmp	r3, #0
 800c0c6:	d006      	beq.n	800c0d6 <plug_holes+0x4e>
 800c0c8:	4b33      	ldr	r3, [pc, #204]	; (800c198 <plug_holes+0x110>)
 800c0ca:	f240 125f 	movw	r2, #351	; 0x15f
 800c0ce:	4937      	ldr	r1, [pc, #220]	; (800c1ac <plug_holes+0x124>)
 800c0d0:	4833      	ldr	r0, [pc, #204]	; (800c1a0 <plug_holes+0x118>)
 800c0d2:	f00c fab9 	bl	8018648 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 800c0d6:	687b      	ldr	r3, [r7, #4]
 800c0d8:	881b      	ldrh	r3, [r3, #0]
 800c0da:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800c0de:	d906      	bls.n	800c0ee <plug_holes+0x66>
 800c0e0:	4b2d      	ldr	r3, [pc, #180]	; (800c198 <plug_holes+0x110>)
 800c0e2:	f44f 72b1 	mov.w	r2, #354	; 0x162
 800c0e6:	4932      	ldr	r1, [pc, #200]	; (800c1b0 <plug_holes+0x128>)
 800c0e8:	482d      	ldr	r0, [pc, #180]	; (800c1a0 <plug_holes+0x118>)
 800c0ea:	f00c faad 	bl	8018648 <iprintf>

  nmem = (struct mem *)(void *)&ram[mem->next];
 800c0ee:	4b29      	ldr	r3, [pc, #164]	; (800c194 <plug_holes+0x10c>)
 800c0f0:	681b      	ldr	r3, [r3, #0]
 800c0f2:	687a      	ldr	r2, [r7, #4]
 800c0f4:	8812      	ldrh	r2, [r2, #0]
 800c0f6:	4413      	add	r3, r2
 800c0f8:	60fb      	str	r3, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 800c0fa:	687a      	ldr	r2, [r7, #4]
 800c0fc:	68fb      	ldr	r3, [r7, #12]
 800c0fe:	429a      	cmp	r2, r3
 800c100:	d01f      	beq.n	800c142 <plug_holes+0xba>
 800c102:	68fb      	ldr	r3, [r7, #12]
 800c104:	791b      	ldrb	r3, [r3, #4]
 800c106:	2b00      	cmp	r3, #0
 800c108:	d11b      	bne.n	800c142 <plug_holes+0xba>
 800c10a:	4b26      	ldr	r3, [pc, #152]	; (800c1a4 <plug_holes+0x11c>)
 800c10c:	681b      	ldr	r3, [r3, #0]
 800c10e:	68fa      	ldr	r2, [r7, #12]
 800c110:	429a      	cmp	r2, r3
 800c112:	d016      	beq.n	800c142 <plug_holes+0xba>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 800c114:	4b27      	ldr	r3, [pc, #156]	; (800c1b4 <plug_holes+0x12c>)
 800c116:	681b      	ldr	r3, [r3, #0]
 800c118:	68fa      	ldr	r2, [r7, #12]
 800c11a:	429a      	cmp	r2, r3
 800c11c:	d102      	bne.n	800c124 <plug_holes+0x9c>
      lfree = mem;
 800c11e:	4a25      	ldr	r2, [pc, #148]	; (800c1b4 <plug_holes+0x12c>)
 800c120:	687b      	ldr	r3, [r7, #4]
 800c122:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 800c124:	68fb      	ldr	r3, [r7, #12]
 800c126:	881a      	ldrh	r2, [r3, #0]
 800c128:	687b      	ldr	r3, [r7, #4]
 800c12a:	801a      	strh	r2, [r3, #0]
    ((struct mem *)(void *)&ram[nmem->next])->prev = (mem_size_t)((u8_t *)mem - ram);
 800c12c:	687b      	ldr	r3, [r7, #4]
 800c12e:	4a19      	ldr	r2, [pc, #100]	; (800c194 <plug_holes+0x10c>)
 800c130:	6812      	ldr	r2, [r2, #0]
 800c132:	1a99      	subs	r1, r3, r2
 800c134:	4b17      	ldr	r3, [pc, #92]	; (800c194 <plug_holes+0x10c>)
 800c136:	681b      	ldr	r3, [r3, #0]
 800c138:	68fa      	ldr	r2, [r7, #12]
 800c13a:	8812      	ldrh	r2, [r2, #0]
 800c13c:	4413      	add	r3, r2
 800c13e:	b28a      	uxth	r2, r1
 800c140:	805a      	strh	r2, [r3, #2]
  }

  /* plug hole backward */
  pmem = (struct mem *)(void *)&ram[mem->prev];
 800c142:	4b14      	ldr	r3, [pc, #80]	; (800c194 <plug_holes+0x10c>)
 800c144:	681b      	ldr	r3, [r3, #0]
 800c146:	687a      	ldr	r2, [r7, #4]
 800c148:	8852      	ldrh	r2, [r2, #2]
 800c14a:	4413      	add	r3, r2
 800c14c:	60bb      	str	r3, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 800c14e:	68ba      	ldr	r2, [r7, #8]
 800c150:	687b      	ldr	r3, [r7, #4]
 800c152:	429a      	cmp	r2, r3
 800c154:	d01a      	beq.n	800c18c <plug_holes+0x104>
 800c156:	68bb      	ldr	r3, [r7, #8]
 800c158:	791b      	ldrb	r3, [r3, #4]
 800c15a:	2b00      	cmp	r3, #0
 800c15c:	d116      	bne.n	800c18c <plug_holes+0x104>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 800c15e:	4b15      	ldr	r3, [pc, #84]	; (800c1b4 <plug_holes+0x12c>)
 800c160:	681b      	ldr	r3, [r3, #0]
 800c162:	687a      	ldr	r2, [r7, #4]
 800c164:	429a      	cmp	r2, r3
 800c166:	d102      	bne.n	800c16e <plug_holes+0xe6>
      lfree = pmem;
 800c168:	4a12      	ldr	r2, [pc, #72]	; (800c1b4 <plug_holes+0x12c>)
 800c16a:	68bb      	ldr	r3, [r7, #8]
 800c16c:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 800c16e:	687b      	ldr	r3, [r7, #4]
 800c170:	881a      	ldrh	r2, [r3, #0]
 800c172:	68bb      	ldr	r3, [r7, #8]
 800c174:	801a      	strh	r2, [r3, #0]
    ((struct mem *)(void *)&ram[mem->next])->prev = (mem_size_t)((u8_t *)pmem - ram);
 800c176:	68bb      	ldr	r3, [r7, #8]
 800c178:	4a06      	ldr	r2, [pc, #24]	; (800c194 <plug_holes+0x10c>)
 800c17a:	6812      	ldr	r2, [r2, #0]
 800c17c:	1a99      	subs	r1, r3, r2
 800c17e:	4b05      	ldr	r3, [pc, #20]	; (800c194 <plug_holes+0x10c>)
 800c180:	681b      	ldr	r3, [r3, #0]
 800c182:	687a      	ldr	r2, [r7, #4]
 800c184:	8812      	ldrh	r2, [r2, #0]
 800c186:	4413      	add	r3, r2
 800c188:	b28a      	uxth	r2, r1
 800c18a:	805a      	strh	r2, [r3, #2]
  }
}
 800c18c:	bf00      	nop
 800c18e:	3710      	adds	r7, #16
 800c190:	46bd      	mov	sp, r7
 800c192:	bd80      	pop	{r7, pc}
 800c194:	200041cc 	.word	0x200041cc
 800c198:	080195c0 	.word	0x080195c0
 800c19c:	080195f0 	.word	0x080195f0
 800c1a0:	08019608 	.word	0x08019608
 800c1a4:	200041d0 	.word	0x200041d0
 800c1a8:	08019630 	.word	0x08019630
 800c1ac:	0801964c 	.word	0x0801964c
 800c1b0:	08019668 	.word	0x08019668
 800c1b4:	200041d4 	.word	0x200041d4

0800c1b8 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 800c1b8:	b580      	push	{r7, lr}
 800c1ba:	b082      	sub	sp, #8
 800c1bc:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
    (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT-1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 800c1be:	4b1e      	ldr	r3, [pc, #120]	; (800c238 <mem_init+0x80>)
 800c1c0:	3303      	adds	r3, #3
 800c1c2:	f023 0303 	bic.w	r3, r3, #3
 800c1c6:	461a      	mov	r2, r3
 800c1c8:	4b1c      	ldr	r3, [pc, #112]	; (800c23c <mem_init+0x84>)
 800c1ca:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 800c1cc:	4b1b      	ldr	r3, [pc, #108]	; (800c23c <mem_init+0x84>)
 800c1ce:	681b      	ldr	r3, [r3, #0]
 800c1d0:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 800c1d2:	687b      	ldr	r3, [r7, #4]
 800c1d4:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800c1d8:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 800c1da:	687b      	ldr	r3, [r7, #4]
 800c1dc:	2200      	movs	r2, #0
 800c1de:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 800c1e0:	687b      	ldr	r3, [r7, #4]
 800c1e2:	2200      	movs	r2, #0
 800c1e4:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = (struct mem *)(void *)&ram[MEM_SIZE_ALIGNED];
 800c1e6:	4b15      	ldr	r3, [pc, #84]	; (800c23c <mem_init+0x84>)
 800c1e8:	681b      	ldr	r3, [r3, #0]
 800c1ea:	f503 63c8 	add.w	r3, r3, #1600	; 0x640
 800c1ee:	4a14      	ldr	r2, [pc, #80]	; (800c240 <mem_init+0x88>)
 800c1f0:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 800c1f2:	4b13      	ldr	r3, [pc, #76]	; (800c240 <mem_init+0x88>)
 800c1f4:	681b      	ldr	r3, [r3, #0]
 800c1f6:	2201      	movs	r2, #1
 800c1f8:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 800c1fa:	4b11      	ldr	r3, [pc, #68]	; (800c240 <mem_init+0x88>)
 800c1fc:	681b      	ldr	r3, [r3, #0]
 800c1fe:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800c202:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 800c204:	4b0e      	ldr	r3, [pc, #56]	; (800c240 <mem_init+0x88>)
 800c206:	681b      	ldr	r3, [r3, #0]
 800c208:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800c20c:	805a      	strh	r2, [r3, #2]

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 800c20e:	4b0b      	ldr	r3, [pc, #44]	; (800c23c <mem_init+0x84>)
 800c210:	681b      	ldr	r3, [r3, #0]
 800c212:	4a0c      	ldr	r2, [pc, #48]	; (800c244 <mem_init+0x8c>)
 800c214:	6013      	str	r3, [r2, #0]

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 800c216:	480c      	ldr	r0, [pc, #48]	; (800c248 <mem_init+0x90>)
 800c218:	f00b fbc2 	bl	80179a0 <sys_mutex_new>
 800c21c:	4603      	mov	r3, r0
 800c21e:	2b00      	cmp	r3, #0
 800c220:	d006      	beq.n	800c230 <mem_init+0x78>
    LWIP_ASSERT("failed to create mem_mutex", 0);
 800c222:	4b0a      	ldr	r3, [pc, #40]	; (800c24c <mem_init+0x94>)
 800c224:	f44f 72cc 	mov.w	r2, #408	; 0x198
 800c228:	4909      	ldr	r1, [pc, #36]	; (800c250 <mem_init+0x98>)
 800c22a:	480a      	ldr	r0, [pc, #40]	; (800c254 <mem_init+0x9c>)
 800c22c:	f00c fa0c 	bl	8018648 <iprintf>
  }
}
 800c230:	bf00      	nop
 800c232:	3708      	adds	r7, #8
 800c234:	46bd      	mov	sp, r7
 800c236:	bd80      	pop	{r7, pc}
 800c238:	2000751c 	.word	0x2000751c
 800c23c:	200041cc 	.word	0x200041cc
 800c240:	200041d0 	.word	0x200041d0
 800c244:	200041d4 	.word	0x200041d4
 800c248:	200041d8 	.word	0x200041d8
 800c24c:	080195c0 	.word	0x080195c0
 800c250:	08019694 	.word	0x08019694
 800c254:	08019608 	.word	0x08019608

0800c258 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 800c258:	b580      	push	{r7, lr}
 800c25a:	b084      	sub	sp, #16
 800c25c:	af00      	add	r7, sp, #0
 800c25e:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 800c260:	687b      	ldr	r3, [r7, #4]
 800c262:	2b00      	cmp	r3, #0
 800c264:	d050      	beq.n	800c308 <mem_free+0xb0>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  LWIP_ASSERT("mem_free: sanity check alignment", (((mem_ptr_t)rmem) & (MEM_ALIGNMENT-1)) == 0);
 800c266:	687b      	ldr	r3, [r7, #4]
 800c268:	f003 0303 	and.w	r3, r3, #3
 800c26c:	2b00      	cmp	r3, #0
 800c26e:	d006      	beq.n	800c27e <mem_free+0x26>
 800c270:	4b27      	ldr	r3, [pc, #156]	; (800c310 <mem_free+0xb8>)
 800c272:	f44f 72d6 	mov.w	r2, #428	; 0x1ac
 800c276:	4927      	ldr	r1, [pc, #156]	; (800c314 <mem_free+0xbc>)
 800c278:	4827      	ldr	r0, [pc, #156]	; (800c318 <mem_free+0xc0>)
 800c27a:	f00c f9e5 	bl	8018648 <iprintf>

  LWIP_ASSERT("mem_free: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 800c27e:	4b27      	ldr	r3, [pc, #156]	; (800c31c <mem_free+0xc4>)
 800c280:	681b      	ldr	r3, [r3, #0]
 800c282:	687a      	ldr	r2, [r7, #4]
 800c284:	429a      	cmp	r2, r3
 800c286:	d304      	bcc.n	800c292 <mem_free+0x3a>
 800c288:	4b25      	ldr	r3, [pc, #148]	; (800c320 <mem_free+0xc8>)
 800c28a:	681b      	ldr	r3, [r3, #0]
 800c28c:	687a      	ldr	r2, [r7, #4]
 800c28e:	429a      	cmp	r2, r3
 800c290:	d306      	bcc.n	800c2a0 <mem_free+0x48>
 800c292:	4b1f      	ldr	r3, [pc, #124]	; (800c310 <mem_free+0xb8>)
 800c294:	f240 12af 	movw	r2, #431	; 0x1af
 800c298:	4922      	ldr	r1, [pc, #136]	; (800c324 <mem_free+0xcc>)
 800c29a:	481f      	ldr	r0, [pc, #124]	; (800c318 <mem_free+0xc0>)
 800c29c:	f00c f9d4 	bl	8018648 <iprintf>
    (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 800c2a0:	4b1e      	ldr	r3, [pc, #120]	; (800c31c <mem_free+0xc4>)
 800c2a2:	681b      	ldr	r3, [r3, #0]
 800c2a4:	687a      	ldr	r2, [r7, #4]
 800c2a6:	429a      	cmp	r2, r3
 800c2a8:	d304      	bcc.n	800c2b4 <mem_free+0x5c>
 800c2aa:	4b1d      	ldr	r3, [pc, #116]	; (800c320 <mem_free+0xc8>)
 800c2ac:	681b      	ldr	r3, [r3, #0]
 800c2ae:	687a      	ldr	r2, [r7, #4]
 800c2b0:	429a      	cmp	r2, r3
 800c2b2:	d306      	bcc.n	800c2c2 <mem_free+0x6a>
    SYS_ARCH_DECL_PROTECT(lev);
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    SYS_ARCH_PROTECT(lev);
 800c2b4:	f00b fbd2 	bl	8017a5c <sys_arch_protect>
 800c2b8:	60b8      	str	r0, [r7, #8]
    MEM_STATS_INC(illegal);
    SYS_ARCH_UNPROTECT(lev);
 800c2ba:	68b8      	ldr	r0, [r7, #8]
 800c2bc:	f00b fbdc 	bl	8017a78 <sys_arch_unprotect>
    return;
 800c2c0:	e023      	b.n	800c30a <mem_free+0xb2>
  }
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800c2c2:	4819      	ldr	r0, [pc, #100]	; (800c328 <mem_free+0xd0>)
 800c2c4:	f00b fb88 	bl	80179d8 <sys_mutex_lock>
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - SIZEOF_STRUCT_MEM);
 800c2c8:	687b      	ldr	r3, [r7, #4]
 800c2ca:	3b08      	subs	r3, #8
 800c2cc:	60fb      	str	r3, [r7, #12]
  /* ... which has to be in a used state ... */
  LWIP_ASSERT("mem_free: mem->used", mem->used);
 800c2ce:	68fb      	ldr	r3, [r7, #12]
 800c2d0:	791b      	ldrb	r3, [r3, #4]
 800c2d2:	2b00      	cmp	r3, #0
 800c2d4:	d106      	bne.n	800c2e4 <mem_free+0x8c>
 800c2d6:	4b0e      	ldr	r3, [pc, #56]	; (800c310 <mem_free+0xb8>)
 800c2d8:	f44f 72e0 	mov.w	r2, #448	; 0x1c0
 800c2dc:	4913      	ldr	r1, [pc, #76]	; (800c32c <mem_free+0xd4>)
 800c2de:	480e      	ldr	r0, [pc, #56]	; (800c318 <mem_free+0xc0>)
 800c2e0:	f00c f9b2 	bl	8018648 <iprintf>
  /* ... and is now unused. */
  mem->used = 0;
 800c2e4:	68fb      	ldr	r3, [r7, #12]
 800c2e6:	2200      	movs	r2, #0
 800c2e8:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 800c2ea:	4b11      	ldr	r3, [pc, #68]	; (800c330 <mem_free+0xd8>)
 800c2ec:	681b      	ldr	r3, [r3, #0]
 800c2ee:	68fa      	ldr	r2, [r7, #12]
 800c2f0:	429a      	cmp	r2, r3
 800c2f2:	d202      	bcs.n	800c2fa <mem_free+0xa2>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 800c2f4:	4a0e      	ldr	r2, [pc, #56]	; (800c330 <mem_free+0xd8>)
 800c2f6:	68fb      	ldr	r3, [r7, #12]
 800c2f8:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 800c2fa:	68f8      	ldr	r0, [r7, #12]
 800c2fc:	f7ff fec4 	bl	800c088 <plug_holes>
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800c300:	4809      	ldr	r0, [pc, #36]	; (800c328 <mem_free+0xd0>)
 800c302:	f00b fb78 	bl	80179f6 <sys_mutex_unlock>
 800c306:	e000      	b.n	800c30a <mem_free+0xb2>
    return;
 800c308:	bf00      	nop
}
 800c30a:	3710      	adds	r7, #16
 800c30c:	46bd      	mov	sp, r7
 800c30e:	bd80      	pop	{r7, pc}
 800c310:	080195c0 	.word	0x080195c0
 800c314:	080196b0 	.word	0x080196b0
 800c318:	08019608 	.word	0x08019608
 800c31c:	200041cc 	.word	0x200041cc
 800c320:	200041d0 	.word	0x200041d0
 800c324:	080196d4 	.word	0x080196d4
 800c328:	200041d8 	.word	0x200041d8
 800c32c:	080196ec 	.word	0x080196ec
 800c330:	200041d4 	.word	0x200041d4

0800c334 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t newsize)
{
 800c334:	b580      	push	{r7, lr}
 800c336:	b088      	sub	sp, #32
 800c338:	af00      	add	r7, sp, #0
 800c33a:	6078      	str	r0, [r7, #4]
 800c33c:	460b      	mov	r3, r1
 800c33e:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = LWIP_MEM_ALIGN_SIZE(newsize);
 800c340:	887b      	ldrh	r3, [r7, #2]
 800c342:	3303      	adds	r3, #3
 800c344:	b29b      	uxth	r3, r3
 800c346:	f023 0303 	bic.w	r3, r3, #3
 800c34a:	807b      	strh	r3, [r7, #2]

  if (newsize < MIN_SIZE_ALIGNED) {
 800c34c:	887b      	ldrh	r3, [r7, #2]
 800c34e:	2b0b      	cmp	r3, #11
 800c350:	d801      	bhi.n	800c356 <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 800c352:	230c      	movs	r3, #12
 800c354:	807b      	strh	r3, [r7, #2]
  }

  if (newsize > MEM_SIZE_ALIGNED) {
 800c356:	887b      	ldrh	r3, [r7, #2]
 800c358:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800c35c:	d901      	bls.n	800c362 <mem_trim+0x2e>
    return NULL;
 800c35e:	2300      	movs	r3, #0
 800c360:	e0bd      	b.n	800c4de <mem_trim+0x1aa>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 800c362:	4b61      	ldr	r3, [pc, #388]	; (800c4e8 <mem_trim+0x1b4>)
 800c364:	681b      	ldr	r3, [r3, #0]
 800c366:	687a      	ldr	r2, [r7, #4]
 800c368:	429a      	cmp	r2, r3
 800c36a:	d304      	bcc.n	800c376 <mem_trim+0x42>
 800c36c:	4b5f      	ldr	r3, [pc, #380]	; (800c4ec <mem_trim+0x1b8>)
 800c36e:	681b      	ldr	r3, [r3, #0]
 800c370:	687a      	ldr	r2, [r7, #4]
 800c372:	429a      	cmp	r2, r3
 800c374:	d306      	bcc.n	800c384 <mem_trim+0x50>
 800c376:	4b5e      	ldr	r3, [pc, #376]	; (800c4f0 <mem_trim+0x1bc>)
 800c378:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800c37c:	495d      	ldr	r1, [pc, #372]	; (800c4f4 <mem_trim+0x1c0>)
 800c37e:	485e      	ldr	r0, [pc, #376]	; (800c4f8 <mem_trim+0x1c4>)
 800c380:	f00c f962 	bl	8018648 <iprintf>
   (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 800c384:	4b58      	ldr	r3, [pc, #352]	; (800c4e8 <mem_trim+0x1b4>)
 800c386:	681b      	ldr	r3, [r3, #0]
 800c388:	687a      	ldr	r2, [r7, #4]
 800c38a:	429a      	cmp	r2, r3
 800c38c:	d304      	bcc.n	800c398 <mem_trim+0x64>
 800c38e:	4b57      	ldr	r3, [pc, #348]	; (800c4ec <mem_trim+0x1b8>)
 800c390:	681b      	ldr	r3, [r3, #0]
 800c392:	687a      	ldr	r2, [r7, #4]
 800c394:	429a      	cmp	r2, r3
 800c396:	d307      	bcc.n	800c3a8 <mem_trim+0x74>
    SYS_ARCH_DECL_PROTECT(lev);
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    SYS_ARCH_PROTECT(lev);
 800c398:	f00b fb60 	bl	8017a5c <sys_arch_protect>
 800c39c:	60f8      	str	r0, [r7, #12]
    MEM_STATS_INC(illegal);
    SYS_ARCH_UNPROTECT(lev);
 800c39e:	68f8      	ldr	r0, [r7, #12]
 800c3a0:	f00b fb6a 	bl	8017a78 <sys_arch_unprotect>
    return rmem;
 800c3a4:	687b      	ldr	r3, [r7, #4]
 800c3a6:	e09a      	b.n	800c4de <mem_trim+0x1aa>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - SIZEOF_STRUCT_MEM);
 800c3a8:	687b      	ldr	r3, [r7, #4]
 800c3aa:	3b08      	subs	r3, #8
 800c3ac:	61fb      	str	r3, [r7, #28]
  /* ... and its offset pointer */
  ptr = (mem_size_t)((u8_t *)mem - ram);
 800c3ae:	69fb      	ldr	r3, [r7, #28]
 800c3b0:	4a4d      	ldr	r2, [pc, #308]	; (800c4e8 <mem_trim+0x1b4>)
 800c3b2:	6812      	ldr	r2, [r2, #0]
 800c3b4:	1a9b      	subs	r3, r3, r2
 800c3b6:	837b      	strh	r3, [r7, #26]

  size = mem->next - ptr - SIZEOF_STRUCT_MEM;
 800c3b8:	69fb      	ldr	r3, [r7, #28]
 800c3ba:	881a      	ldrh	r2, [r3, #0]
 800c3bc:	8b7b      	ldrh	r3, [r7, #26]
 800c3be:	1ad3      	subs	r3, r2, r3
 800c3c0:	b29b      	uxth	r3, r3
 800c3c2:	3b08      	subs	r3, #8
 800c3c4:	833b      	strh	r3, [r7, #24]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 800c3c6:	887a      	ldrh	r2, [r7, #2]
 800c3c8:	8b3b      	ldrh	r3, [r7, #24]
 800c3ca:	429a      	cmp	r2, r3
 800c3cc:	d906      	bls.n	800c3dc <mem_trim+0xa8>
 800c3ce:	4b48      	ldr	r3, [pc, #288]	; (800c4f0 <mem_trim+0x1bc>)
 800c3d0:	f240 2206 	movw	r2, #518	; 0x206
 800c3d4:	4949      	ldr	r1, [pc, #292]	; (800c4fc <mem_trim+0x1c8>)
 800c3d6:	4848      	ldr	r0, [pc, #288]	; (800c4f8 <mem_trim+0x1c4>)
 800c3d8:	f00c f936 	bl	8018648 <iprintf>
  if (newsize > size) {
 800c3dc:	887a      	ldrh	r2, [r7, #2]
 800c3de:	8b3b      	ldrh	r3, [r7, #24]
 800c3e0:	429a      	cmp	r2, r3
 800c3e2:	d901      	bls.n	800c3e8 <mem_trim+0xb4>
    /* not supported */
    return NULL;
 800c3e4:	2300      	movs	r3, #0
 800c3e6:	e07a      	b.n	800c4de <mem_trim+0x1aa>
  }
  if (newsize == size) {
 800c3e8:	887a      	ldrh	r2, [r7, #2]
 800c3ea:	8b3b      	ldrh	r3, [r7, #24]
 800c3ec:	429a      	cmp	r2, r3
 800c3ee:	d101      	bne.n	800c3f4 <mem_trim+0xc0>
    /* No change in size, simply return */
    return rmem;
 800c3f0:	687b      	ldr	r3, [r7, #4]
 800c3f2:	e074      	b.n	800c4de <mem_trim+0x1aa>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800c3f4:	4842      	ldr	r0, [pc, #264]	; (800c500 <mem_trim+0x1cc>)
 800c3f6:	f00b faef 	bl	80179d8 <sys_mutex_lock>

  mem2 = (struct mem *)(void *)&ram[mem->next];
 800c3fa:	4b3b      	ldr	r3, [pc, #236]	; (800c4e8 <mem_trim+0x1b4>)
 800c3fc:	681b      	ldr	r3, [r3, #0]
 800c3fe:	69fa      	ldr	r2, [r7, #28]
 800c400:	8812      	ldrh	r2, [r2, #0]
 800c402:	4413      	add	r3, r2
 800c404:	617b      	str	r3, [r7, #20]
  if (mem2->used == 0) {
 800c406:	697b      	ldr	r3, [r7, #20]
 800c408:	791b      	ldrb	r3, [r3, #4]
 800c40a:	2b00      	cmp	r3, #0
 800c40c:	d131      	bne.n	800c472 <mem_trim+0x13e>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    /* remember the old next pointer */
    next = mem2->next;
 800c40e:	697b      	ldr	r3, [r7, #20]
 800c410:	881b      	ldrh	r3, [r3, #0]
 800c412:	823b      	strh	r3, [r7, #16]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = ptr + SIZEOF_STRUCT_MEM + newsize;
 800c414:	8b7a      	ldrh	r2, [r7, #26]
 800c416:	887b      	ldrh	r3, [r7, #2]
 800c418:	4413      	add	r3, r2
 800c41a:	b29b      	uxth	r3, r3
 800c41c:	3308      	adds	r3, #8
 800c41e:	827b      	strh	r3, [r7, #18]
    if (lfree == mem2) {
 800c420:	4b38      	ldr	r3, [pc, #224]	; (800c504 <mem_trim+0x1d0>)
 800c422:	681b      	ldr	r3, [r3, #0]
 800c424:	697a      	ldr	r2, [r7, #20]
 800c426:	429a      	cmp	r2, r3
 800c428:	d105      	bne.n	800c436 <mem_trim+0x102>
      lfree = (struct mem *)(void *)&ram[ptr2];
 800c42a:	4b2f      	ldr	r3, [pc, #188]	; (800c4e8 <mem_trim+0x1b4>)
 800c42c:	681a      	ldr	r2, [r3, #0]
 800c42e:	8a7b      	ldrh	r3, [r7, #18]
 800c430:	4413      	add	r3, r2
 800c432:	4a34      	ldr	r2, [pc, #208]	; (800c504 <mem_trim+0x1d0>)
 800c434:	6013      	str	r3, [r2, #0]
    }
    mem2 = (struct mem *)(void *)&ram[ptr2];
 800c436:	4b2c      	ldr	r3, [pc, #176]	; (800c4e8 <mem_trim+0x1b4>)
 800c438:	681a      	ldr	r2, [r3, #0]
 800c43a:	8a7b      	ldrh	r3, [r7, #18]
 800c43c:	4413      	add	r3, r2
 800c43e:	617b      	str	r3, [r7, #20]
    mem2->used = 0;
 800c440:	697b      	ldr	r3, [r7, #20]
 800c442:	2200      	movs	r2, #0
 800c444:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 800c446:	697b      	ldr	r3, [r7, #20]
 800c448:	8a3a      	ldrh	r2, [r7, #16]
 800c44a:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 800c44c:	697b      	ldr	r3, [r7, #20]
 800c44e:	8b7a      	ldrh	r2, [r7, #26]
 800c450:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 800c452:	69fb      	ldr	r3, [r7, #28]
 800c454:	8a7a      	ldrh	r2, [r7, #18]
 800c456:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800c458:	697b      	ldr	r3, [r7, #20]
 800c45a:	881b      	ldrh	r3, [r3, #0]
 800c45c:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800c460:	d039      	beq.n	800c4d6 <mem_trim+0x1a2>
      ((struct mem *)(void *)&ram[mem2->next])->prev = ptr2;
 800c462:	4b21      	ldr	r3, [pc, #132]	; (800c4e8 <mem_trim+0x1b4>)
 800c464:	681b      	ldr	r3, [r3, #0]
 800c466:	697a      	ldr	r2, [r7, #20]
 800c468:	8812      	ldrh	r2, [r2, #0]
 800c46a:	4413      	add	r3, r2
 800c46c:	8a7a      	ldrh	r2, [r7, #18]
 800c46e:	805a      	strh	r2, [r3, #2]
 800c470:	e031      	b.n	800c4d6 <mem_trim+0x1a2>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 800c472:	887b      	ldrh	r3, [r7, #2]
 800c474:	f103 0214 	add.w	r2, r3, #20
 800c478:	8b3b      	ldrh	r3, [r7, #24]
 800c47a:	429a      	cmp	r2, r3
 800c47c:	d82b      	bhi.n	800c4d6 <mem_trim+0x1a2>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = ptr + SIZEOF_STRUCT_MEM + newsize;
 800c47e:	8b7a      	ldrh	r2, [r7, #26]
 800c480:	887b      	ldrh	r3, [r7, #2]
 800c482:	4413      	add	r3, r2
 800c484:	b29b      	uxth	r3, r3
 800c486:	3308      	adds	r3, #8
 800c488:	827b      	strh	r3, [r7, #18]
    mem2 = (struct mem *)(void *)&ram[ptr2];
 800c48a:	4b17      	ldr	r3, [pc, #92]	; (800c4e8 <mem_trim+0x1b4>)
 800c48c:	681a      	ldr	r2, [r3, #0]
 800c48e:	8a7b      	ldrh	r3, [r7, #18]
 800c490:	4413      	add	r3, r2
 800c492:	617b      	str	r3, [r7, #20]
    if (mem2 < lfree) {
 800c494:	4b1b      	ldr	r3, [pc, #108]	; (800c504 <mem_trim+0x1d0>)
 800c496:	681b      	ldr	r3, [r3, #0]
 800c498:	697a      	ldr	r2, [r7, #20]
 800c49a:	429a      	cmp	r2, r3
 800c49c:	d202      	bcs.n	800c4a4 <mem_trim+0x170>
      lfree = mem2;
 800c49e:	4a19      	ldr	r2, [pc, #100]	; (800c504 <mem_trim+0x1d0>)
 800c4a0:	697b      	ldr	r3, [r7, #20]
 800c4a2:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 800c4a4:	697b      	ldr	r3, [r7, #20]
 800c4a6:	2200      	movs	r2, #0
 800c4a8:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 800c4aa:	69fb      	ldr	r3, [r7, #28]
 800c4ac:	881a      	ldrh	r2, [r3, #0]
 800c4ae:	697b      	ldr	r3, [r7, #20]
 800c4b0:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 800c4b2:	697b      	ldr	r3, [r7, #20]
 800c4b4:	8b7a      	ldrh	r2, [r7, #26]
 800c4b6:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 800c4b8:	69fb      	ldr	r3, [r7, #28]
 800c4ba:	8a7a      	ldrh	r2, [r7, #18]
 800c4bc:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800c4be:	697b      	ldr	r3, [r7, #20]
 800c4c0:	881b      	ldrh	r3, [r3, #0]
 800c4c2:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800c4c6:	d006      	beq.n	800c4d6 <mem_trim+0x1a2>
      ((struct mem *)(void *)&ram[mem2->next])->prev = ptr2;
 800c4c8:	4b07      	ldr	r3, [pc, #28]	; (800c4e8 <mem_trim+0x1b4>)
 800c4ca:	681b      	ldr	r3, [r3, #0]
 800c4cc:	697a      	ldr	r2, [r7, #20]
 800c4ce:	8812      	ldrh	r2, [r2, #0]
 800c4d0:	4413      	add	r3, r2
 800c4d2:	8a7a      	ldrh	r2, [r7, #18]
 800c4d4:	805a      	strh	r2, [r3, #2]
    -> the remaining space stays unused since it is too small
  } */
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800c4d6:	480a      	ldr	r0, [pc, #40]	; (800c500 <mem_trim+0x1cc>)
 800c4d8:	f00b fa8d 	bl	80179f6 <sys_mutex_unlock>
  return rmem;
 800c4dc:	687b      	ldr	r3, [r7, #4]
}
 800c4de:	4618      	mov	r0, r3
 800c4e0:	3720      	adds	r7, #32
 800c4e2:	46bd      	mov	sp, r7
 800c4e4:	bd80      	pop	{r7, pc}
 800c4e6:	bf00      	nop
 800c4e8:	200041cc 	.word	0x200041cc
 800c4ec:	200041d0 	.word	0x200041d0
 800c4f0:	080195c0 	.word	0x080195c0
 800c4f4:	08019700 	.word	0x08019700
 800c4f8:	08019608 	.word	0x08019608
 800c4fc:	08019718 	.word	0x08019718
 800c500:	200041d8 	.word	0x200041d8
 800c504:	200041d4 	.word	0x200041d4

0800c508 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size)
{
 800c508:	b580      	push	{r7, lr}
 800c50a:	b088      	sub	sp, #32
 800c50c:	af00      	add	r7, sp, #0
 800c50e:	4603      	mov	r3, r0
 800c510:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size == 0) {
 800c512:	88fb      	ldrh	r3, [r7, #6]
 800c514:	2b00      	cmp	r3, #0
 800c516:	d101      	bne.n	800c51c <mem_malloc+0x14>
    return NULL;
 800c518:	2300      	movs	r3, #0
 800c51a:	e0d1      	b.n	800c6c0 <mem_malloc+0x1b8>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = LWIP_MEM_ALIGN_SIZE(size);
 800c51c:	88fb      	ldrh	r3, [r7, #6]
 800c51e:	3303      	adds	r3, #3
 800c520:	b29b      	uxth	r3, r3
 800c522:	f023 0303 	bic.w	r3, r3, #3
 800c526:	80fb      	strh	r3, [r7, #6]

  if (size < MIN_SIZE_ALIGNED) {
 800c528:	88fb      	ldrh	r3, [r7, #6]
 800c52a:	2b0b      	cmp	r3, #11
 800c52c:	d801      	bhi.n	800c532 <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 800c52e:	230c      	movs	r3, #12
 800c530:	80fb      	strh	r3, [r7, #6]
  }

  if (size > MEM_SIZE_ALIGNED) {
 800c532:	88fb      	ldrh	r3, [r7, #6]
 800c534:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800c538:	d901      	bls.n	800c53e <mem_malloc+0x36>
    return NULL;
 800c53a:	2300      	movs	r3, #0
 800c53c:	e0c0      	b.n	800c6c0 <mem_malloc+0x1b8>
  }

  /* protect the heap from concurrent access */
  sys_mutex_lock(&mem_mutex);
 800c53e:	4862      	ldr	r0, [pc, #392]	; (800c6c8 <mem_malloc+0x1c0>)
 800c540:	f00b fa4a 	bl	80179d8 <sys_mutex_lock>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = (mem_size_t)((u8_t *)lfree - ram); ptr < MEM_SIZE_ALIGNED - size;
 800c544:	4b61      	ldr	r3, [pc, #388]	; (800c6cc <mem_malloc+0x1c4>)
 800c546:	681b      	ldr	r3, [r3, #0]
 800c548:	461a      	mov	r2, r3
 800c54a:	4b61      	ldr	r3, [pc, #388]	; (800c6d0 <mem_malloc+0x1c8>)
 800c54c:	681b      	ldr	r3, [r3, #0]
 800c54e:	1ad3      	subs	r3, r2, r3
 800c550:	83fb      	strh	r3, [r7, #30]
 800c552:	e0aa      	b.n	800c6aa <mem_malloc+0x1a2>
         ptr = ((struct mem *)(void *)&ram[ptr])->next) {
      mem = (struct mem *)(void *)&ram[ptr];
 800c554:	4b5e      	ldr	r3, [pc, #376]	; (800c6d0 <mem_malloc+0x1c8>)
 800c556:	681a      	ldr	r2, [r3, #0]
 800c558:	8bfb      	ldrh	r3, [r7, #30]
 800c55a:	4413      	add	r3, r2
 800c55c:	617b      	str	r3, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 800c55e:	697b      	ldr	r3, [r7, #20]
 800c560:	791b      	ldrb	r3, [r3, #4]
 800c562:	2b00      	cmp	r3, #0
 800c564:	f040 809b 	bne.w	800c69e <mem_malloc+0x196>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 800c568:	697b      	ldr	r3, [r7, #20]
 800c56a:	881b      	ldrh	r3, [r3, #0]
 800c56c:	461a      	mov	r2, r3
 800c56e:	8bfb      	ldrh	r3, [r7, #30]
 800c570:	1ad3      	subs	r3, r2, r3
 800c572:	f1a3 0208 	sub.w	r2, r3, #8
 800c576:	88fb      	ldrh	r3, [r7, #6]
      if ((!mem->used) &&
 800c578:	429a      	cmp	r2, r3
 800c57a:	f0c0 8090 	bcc.w	800c69e <mem_malloc+0x196>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 800c57e:	697b      	ldr	r3, [r7, #20]
 800c580:	881b      	ldrh	r3, [r3, #0]
 800c582:	461a      	mov	r2, r3
 800c584:	8bfb      	ldrh	r3, [r7, #30]
 800c586:	1ad3      	subs	r3, r2, r3
 800c588:	f1a3 0208 	sub.w	r2, r3, #8
 800c58c:	88fb      	ldrh	r3, [r7, #6]
 800c58e:	3314      	adds	r3, #20
 800c590:	429a      	cmp	r2, r3
 800c592:	d327      	bcc.n	800c5e4 <mem_malloc+0xdc>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = ptr + SIZEOF_STRUCT_MEM + size;
 800c594:	8bfa      	ldrh	r2, [r7, #30]
 800c596:	88fb      	ldrh	r3, [r7, #6]
 800c598:	4413      	add	r3, r2
 800c59a:	b29b      	uxth	r3, r3
 800c59c:	3308      	adds	r3, #8
 800c59e:	827b      	strh	r3, [r7, #18]
          /* create mem2 struct */
          mem2 = (struct mem *)(void *)&ram[ptr2];
 800c5a0:	4b4b      	ldr	r3, [pc, #300]	; (800c6d0 <mem_malloc+0x1c8>)
 800c5a2:	681a      	ldr	r2, [r3, #0]
 800c5a4:	8a7b      	ldrh	r3, [r7, #18]
 800c5a6:	4413      	add	r3, r2
 800c5a8:	60fb      	str	r3, [r7, #12]
          mem2->used = 0;
 800c5aa:	68fb      	ldr	r3, [r7, #12]
 800c5ac:	2200      	movs	r2, #0
 800c5ae:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 800c5b0:	697b      	ldr	r3, [r7, #20]
 800c5b2:	881a      	ldrh	r2, [r3, #0]
 800c5b4:	68fb      	ldr	r3, [r7, #12]
 800c5b6:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 800c5b8:	68fb      	ldr	r3, [r7, #12]
 800c5ba:	8bfa      	ldrh	r2, [r7, #30]
 800c5bc:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 800c5be:	697b      	ldr	r3, [r7, #20]
 800c5c0:	8a7a      	ldrh	r2, [r7, #18]
 800c5c2:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 800c5c4:	697b      	ldr	r3, [r7, #20]
 800c5c6:	2201      	movs	r2, #1
 800c5c8:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 800c5ca:	68fb      	ldr	r3, [r7, #12]
 800c5cc:	881b      	ldrh	r3, [r3, #0]
 800c5ce:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800c5d2:	d00a      	beq.n	800c5ea <mem_malloc+0xe2>
            ((struct mem *)(void *)&ram[mem2->next])->prev = ptr2;
 800c5d4:	4b3e      	ldr	r3, [pc, #248]	; (800c6d0 <mem_malloc+0x1c8>)
 800c5d6:	681b      	ldr	r3, [r3, #0]
 800c5d8:	68fa      	ldr	r2, [r7, #12]
 800c5da:	8812      	ldrh	r2, [r2, #0]
 800c5dc:	4413      	add	r3, r2
 800c5de:	8a7a      	ldrh	r2, [r7, #18]
 800c5e0:	805a      	strh	r2, [r3, #2]
 800c5e2:	e002      	b.n	800c5ea <mem_malloc+0xe2>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 800c5e4:	697b      	ldr	r3, [r7, #20]
 800c5e6:	2201      	movs	r2, #1
 800c5e8:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - (mem_size_t)((u8_t *)mem - ram));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 800c5ea:	4b38      	ldr	r3, [pc, #224]	; (800c6cc <mem_malloc+0x1c4>)
 800c5ec:	681b      	ldr	r3, [r3, #0]
 800c5ee:	697a      	ldr	r2, [r7, #20]
 800c5f0:	429a      	cmp	r2, r3
 800c5f2:	d127      	bne.n	800c644 <mem_malloc+0x13c>
          struct mem *cur = lfree;
 800c5f4:	4b35      	ldr	r3, [pc, #212]	; (800c6cc <mem_malloc+0x1c4>)
 800c5f6:	681b      	ldr	r3, [r3, #0]
 800c5f8:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 800c5fa:	e005      	b.n	800c608 <mem_malloc+0x100>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = (struct mem *)(void *)&ram[cur->next];
 800c5fc:	4b34      	ldr	r3, [pc, #208]	; (800c6d0 <mem_malloc+0x1c8>)
 800c5fe:	681b      	ldr	r3, [r3, #0]
 800c600:	69ba      	ldr	r2, [r7, #24]
 800c602:	8812      	ldrh	r2, [r2, #0]
 800c604:	4413      	add	r3, r2
 800c606:	61bb      	str	r3, [r7, #24]
          while (cur->used && cur != ram_end) {
 800c608:	69bb      	ldr	r3, [r7, #24]
 800c60a:	791b      	ldrb	r3, [r3, #4]
 800c60c:	2b00      	cmp	r3, #0
 800c60e:	d004      	beq.n	800c61a <mem_malloc+0x112>
 800c610:	4b30      	ldr	r3, [pc, #192]	; (800c6d4 <mem_malloc+0x1cc>)
 800c612:	681b      	ldr	r3, [r3, #0]
 800c614:	69ba      	ldr	r2, [r7, #24]
 800c616:	429a      	cmp	r2, r3
 800c618:	d1f0      	bne.n	800c5fc <mem_malloc+0xf4>
          }
          lfree = cur;
 800c61a:	4a2c      	ldr	r2, [pc, #176]	; (800c6cc <mem_malloc+0x1c4>)
 800c61c:	69bb      	ldr	r3, [r7, #24]
 800c61e:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 800c620:	4b2a      	ldr	r3, [pc, #168]	; (800c6cc <mem_malloc+0x1c4>)
 800c622:	681a      	ldr	r2, [r3, #0]
 800c624:	4b2b      	ldr	r3, [pc, #172]	; (800c6d4 <mem_malloc+0x1cc>)
 800c626:	681b      	ldr	r3, [r3, #0]
 800c628:	429a      	cmp	r2, r3
 800c62a:	d00b      	beq.n	800c644 <mem_malloc+0x13c>
 800c62c:	4b27      	ldr	r3, [pc, #156]	; (800c6cc <mem_malloc+0x1c4>)
 800c62e:	681b      	ldr	r3, [r3, #0]
 800c630:	791b      	ldrb	r3, [r3, #4]
 800c632:	2b00      	cmp	r3, #0
 800c634:	d006      	beq.n	800c644 <mem_malloc+0x13c>
 800c636:	4b28      	ldr	r3, [pc, #160]	; (800c6d8 <mem_malloc+0x1d0>)
 800c638:	f240 22cf 	movw	r2, #719	; 0x2cf
 800c63c:	4927      	ldr	r1, [pc, #156]	; (800c6dc <mem_malloc+0x1d4>)
 800c63e:	4828      	ldr	r0, [pc, #160]	; (800c6e0 <mem_malloc+0x1d8>)
 800c640:	f00c f802 	bl	8018648 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
 800c644:	4820      	ldr	r0, [pc, #128]	; (800c6c8 <mem_malloc+0x1c0>)
 800c646:	f00b f9d6 	bl	80179f6 <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 800c64a:	88fa      	ldrh	r2, [r7, #6]
 800c64c:	697b      	ldr	r3, [r7, #20]
 800c64e:	4413      	add	r3, r2
 800c650:	3308      	adds	r3, #8
 800c652:	4a20      	ldr	r2, [pc, #128]	; (800c6d4 <mem_malloc+0x1cc>)
 800c654:	6812      	ldr	r2, [r2, #0]
 800c656:	4293      	cmp	r3, r2
 800c658:	d906      	bls.n	800c668 <mem_malloc+0x160>
 800c65a:	4b1f      	ldr	r3, [pc, #124]	; (800c6d8 <mem_malloc+0x1d0>)
 800c65c:	f44f 7235 	mov.w	r2, #724	; 0x2d4
 800c660:	4920      	ldr	r1, [pc, #128]	; (800c6e4 <mem_malloc+0x1dc>)
 800c662:	481f      	ldr	r0, [pc, #124]	; (800c6e0 <mem_malloc+0x1d8>)
 800c664:	f00b fff0 	bl	8018648 <iprintf>
         (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 800c668:	697b      	ldr	r3, [r7, #20]
 800c66a:	f003 0303 	and.w	r3, r3, #3
 800c66e:	2b00      	cmp	r3, #0
 800c670:	d006      	beq.n	800c680 <mem_malloc+0x178>
 800c672:	4b19      	ldr	r3, [pc, #100]	; (800c6d8 <mem_malloc+0x1d0>)
 800c674:	f240 22d6 	movw	r2, #726	; 0x2d6
 800c678:	491b      	ldr	r1, [pc, #108]	; (800c6e8 <mem_malloc+0x1e0>)
 800c67a:	4819      	ldr	r0, [pc, #100]	; (800c6e0 <mem_malloc+0x1d8>)
 800c67c:	f00b ffe4 	bl	8018648 <iprintf>
         ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 800c680:	697b      	ldr	r3, [r7, #20]
 800c682:	f003 0303 	and.w	r3, r3, #3
 800c686:	2b00      	cmp	r3, #0
 800c688:	d006      	beq.n	800c698 <mem_malloc+0x190>
 800c68a:	4b13      	ldr	r3, [pc, #76]	; (800c6d8 <mem_malloc+0x1d0>)
 800c68c:	f44f 7236 	mov.w	r2, #728	; 0x2d8
 800c690:	4916      	ldr	r1, [pc, #88]	; (800c6ec <mem_malloc+0x1e4>)
 800c692:	4813      	ldr	r0, [pc, #76]	; (800c6e0 <mem_malloc+0x1d8>)
 800c694:	f00b ffd8 	bl	8018648 <iprintf>
          (((mem_ptr_t)mem) & (MEM_ALIGNMENT-1)) == 0);

        return (u8_t *)mem + SIZEOF_STRUCT_MEM;
 800c698:	697b      	ldr	r3, [r7, #20]
 800c69a:	3308      	adds	r3, #8
 800c69c:	e010      	b.n	800c6c0 <mem_malloc+0x1b8>
         ptr = ((struct mem *)(void *)&ram[ptr])->next) {
 800c69e:	4b0c      	ldr	r3, [pc, #48]	; (800c6d0 <mem_malloc+0x1c8>)
 800c6a0:	681a      	ldr	r2, [r3, #0]
 800c6a2:	8bfb      	ldrh	r3, [r7, #30]
 800c6a4:	4413      	add	r3, r2
 800c6a6:	881b      	ldrh	r3, [r3, #0]
 800c6a8:	83fb      	strh	r3, [r7, #30]
    for (ptr = (mem_size_t)((u8_t *)lfree - ram); ptr < MEM_SIZE_ALIGNED - size;
 800c6aa:	8bfa      	ldrh	r2, [r7, #30]
 800c6ac:	88fb      	ldrh	r3, [r7, #6]
 800c6ae:	f5c3 63c8 	rsb	r3, r3, #1600	; 0x640
 800c6b2:	429a      	cmp	r2, r3
 800c6b4:	f4ff af4e 	bcc.w	800c554 <mem_malloc+0x4c>
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
 800c6b8:	4803      	ldr	r0, [pc, #12]	; (800c6c8 <mem_malloc+0x1c0>)
 800c6ba:	f00b f99c 	bl	80179f6 <sys_mutex_unlock>
  return NULL;
 800c6be:	2300      	movs	r3, #0
}
 800c6c0:	4618      	mov	r0, r3
 800c6c2:	3720      	adds	r7, #32
 800c6c4:	46bd      	mov	sp, r7
 800c6c6:	bd80      	pop	{r7, pc}
 800c6c8:	200041d8 	.word	0x200041d8
 800c6cc:	200041d4 	.word	0x200041d4
 800c6d0:	200041cc 	.word	0x200041cc
 800c6d4:	200041d0 	.word	0x200041d0
 800c6d8:	080195c0 	.word	0x080195c0
 800c6dc:	08019738 	.word	0x08019738
 800c6e0:	08019608 	.word	0x08019608
 800c6e4:	08019754 	.word	0x08019754
 800c6e8:	08019784 	.word	0x08019784
 800c6ec:	080197b4 	.word	0x080197b4

0800c6f0 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 800c6f0:	b480      	push	{r7}
 800c6f2:	b085      	sub	sp, #20
 800c6f4:	af00      	add	r7, sp, #0
 800c6f6:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 800c6f8:	687b      	ldr	r3, [r7, #4]
 800c6fa:	689b      	ldr	r3, [r3, #8]
 800c6fc:	2200      	movs	r2, #0
 800c6fe:	601a      	str	r2, [r3, #0]
  memp = (struct memp*)LWIP_MEM_ALIGN(desc->base);
 800c700:	687b      	ldr	r3, [r7, #4]
 800c702:	685b      	ldr	r3, [r3, #4]
 800c704:	3303      	adds	r3, #3
 800c706:	f023 0303 	bic.w	r3, r3, #3
 800c70a:	60bb      	str	r3, [r7, #8]
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 800c70c:	2300      	movs	r3, #0
 800c70e:	60fb      	str	r3, [r7, #12]
 800c710:	e011      	b.n	800c736 <memp_init_pool+0x46>
    memp->next = *desc->tab;
 800c712:	687b      	ldr	r3, [r7, #4]
 800c714:	689b      	ldr	r3, [r3, #8]
 800c716:	681a      	ldr	r2, [r3, #0]
 800c718:	68bb      	ldr	r3, [r7, #8]
 800c71a:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 800c71c:	687b      	ldr	r3, [r7, #4]
 800c71e:	689b      	ldr	r3, [r3, #8]
 800c720:	68ba      	ldr	r2, [r7, #8]
 800c722:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
   /* cast through void* to get rid of alignment warnings */
   memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 800c724:	687b      	ldr	r3, [r7, #4]
 800c726:	881b      	ldrh	r3, [r3, #0]
 800c728:	461a      	mov	r2, r3
 800c72a:	68bb      	ldr	r3, [r7, #8]
 800c72c:	4413      	add	r3, r2
 800c72e:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 800c730:	68fb      	ldr	r3, [r7, #12]
 800c732:	3301      	adds	r3, #1
 800c734:	60fb      	str	r3, [r7, #12]
 800c736:	687b      	ldr	r3, [r7, #4]
 800c738:	885b      	ldrh	r3, [r3, #2]
 800c73a:	461a      	mov	r2, r3
 800c73c:	68fb      	ldr	r3, [r7, #12]
 800c73e:	4293      	cmp	r3, r2
 800c740:	dbe7      	blt.n	800c712 <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 800c742:	bf00      	nop
 800c744:	3714      	adds	r7, #20
 800c746:	46bd      	mov	sp, r7
 800c748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c74c:	4770      	bx	lr
	...

0800c750 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 800c750:	b580      	push	{r7, lr}
 800c752:	b082      	sub	sp, #8
 800c754:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800c756:	2300      	movs	r3, #0
 800c758:	80fb      	strh	r3, [r7, #6]
 800c75a:	e009      	b.n	800c770 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 800c75c:	88fb      	ldrh	r3, [r7, #6]
 800c75e:	4a08      	ldr	r2, [pc, #32]	; (800c780 <memp_init+0x30>)
 800c760:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c764:	4618      	mov	r0, r3
 800c766:	f7ff ffc3 	bl	800c6f0 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800c76a:	88fb      	ldrh	r3, [r7, #6]
 800c76c:	3301      	adds	r3, #1
 800c76e:	80fb      	strh	r3, [r7, #6]
 800c770:	88fb      	ldrh	r3, [r7, #6]
 800c772:	2b0c      	cmp	r3, #12
 800c774:	d9f2      	bls.n	800c75c <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 800c776:	bf00      	nop
 800c778:	3708      	adds	r7, #8
 800c77a:	46bd      	mov	sp, r7
 800c77c:	bd80      	pop	{r7, pc}
 800c77e:	bf00      	nop
 800c780:	0801b83c 	.word	0x0801b83c

0800c784 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char* file, const int line)
#endif
{
 800c784:	b580      	push	{r7, lr}
 800c786:	b084      	sub	sp, #16
 800c788:	af00      	add	r7, sp, #0
 800c78a:	6078      	str	r0, [r7, #4]

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
 800c78c:	f00b f966 	bl	8017a5c <sys_arch_protect>
 800c790:	60f8      	str	r0, [r7, #12]

  memp = *desc->tab;
 800c792:	687b      	ldr	r3, [r7, #4]
 800c794:	689b      	ldr	r3, [r3, #8]
 800c796:	681b      	ldr	r3, [r3, #0]
 800c798:	60bb      	str	r3, [r7, #8]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 800c79a:	68bb      	ldr	r3, [r7, #8]
 800c79c:	2b00      	cmp	r3, #0
 800c79e:	d015      	beq.n	800c7cc <do_memp_malloc_pool+0x48>
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element_overflow(memp, desc);
    memp_overflow_check_element_underflow(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 800c7a0:	687b      	ldr	r3, [r7, #4]
 800c7a2:	689b      	ldr	r3, [r3, #8]
 800c7a4:	68ba      	ldr	r2, [r7, #8]
 800c7a6:	6812      	ldr	r2, [r2, #0]
 800c7a8:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 800c7aa:	68bb      	ldr	r3, [r7, #8]
 800c7ac:	f003 0303 	and.w	r3, r3, #3
 800c7b0:	2b00      	cmp	r3, #0
 800c7b2:	d006      	beq.n	800c7c2 <do_memp_malloc_pool+0x3e>
 800c7b4:	4b09      	ldr	r3, [pc, #36]	; (800c7dc <do_memp_malloc_pool+0x58>)
 800c7b6:	f240 1249 	movw	r2, #329	; 0x149
 800c7ba:	4909      	ldr	r1, [pc, #36]	; (800c7e0 <do_memp_malloc_pool+0x5c>)
 800c7bc:	4809      	ldr	r0, [pc, #36]	; (800c7e4 <do_memp_malloc_pool+0x60>)
 800c7be:	f00b ff43 	bl	8018648 <iprintf>
    desc->stats->used++;
    if (desc->stats->used > desc->stats->max) {
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
 800c7c2:	68f8      	ldr	r0, [r7, #12]
 800c7c4:	f00b f958 	bl	8017a78 <sys_arch_unprotect>
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t*)memp + MEMP_SIZE);
 800c7c8:	68bb      	ldr	r3, [r7, #8]
 800c7ca:	e003      	b.n	800c7d4 <do_memp_malloc_pool+0x50>
#if MEMP_STATS
    desc->stats->err++;
#endif
  }

  SYS_ARCH_UNPROTECT(old_level);
 800c7cc:	68f8      	ldr	r0, [r7, #12]
 800c7ce:	f00b f953 	bl	8017a78 <sys_arch_unprotect>
  return NULL;
 800c7d2:	2300      	movs	r3, #0
}
 800c7d4:	4618      	mov	r0, r3
 800c7d6:	3710      	adds	r7, #16
 800c7d8:	46bd      	mov	sp, r7
 800c7da:	bd80      	pop	{r7, pc}
 800c7dc:	080197d8 	.word	0x080197d8
 800c7e0:	08019808 	.word	0x08019808
 800c7e4:	0801982c 	.word	0x0801982c

0800c7e8 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char* file, const int line)
#endif
{
 800c7e8:	b580      	push	{r7, lr}
 800c7ea:	b084      	sub	sp, #16
 800c7ec:	af00      	add	r7, sp, #0
 800c7ee:	4603      	mov	r3, r0
 800c7f0:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 800c7f2:	79fb      	ldrb	r3, [r7, #7]
 800c7f4:	2b0c      	cmp	r3, #12
 800c7f6:	d908      	bls.n	800c80a <memp_malloc+0x22>
 800c7f8:	4b0a      	ldr	r3, [pc, #40]	; (800c824 <memp_malloc+0x3c>)
 800c7fa:	f240 1287 	movw	r2, #391	; 0x187
 800c7fe:	490a      	ldr	r1, [pc, #40]	; (800c828 <memp_malloc+0x40>)
 800c800:	480a      	ldr	r0, [pc, #40]	; (800c82c <memp_malloc+0x44>)
 800c802:	f00b ff21 	bl	8018648 <iprintf>
 800c806:	2300      	movs	r3, #0
 800c808:	e008      	b.n	800c81c <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 800c80a:	79fb      	ldrb	r3, [r7, #7]
 800c80c:	4a08      	ldr	r2, [pc, #32]	; (800c830 <memp_malloc+0x48>)
 800c80e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c812:	4618      	mov	r0, r3
 800c814:	f7ff ffb6 	bl	800c784 <do_memp_malloc_pool>
 800c818:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 800c81a:	68fb      	ldr	r3, [r7, #12]
}
 800c81c:	4618      	mov	r0, r3
 800c81e:	3710      	adds	r7, #16
 800c820:	46bd      	mov	sp, r7
 800c822:	bd80      	pop	{r7, pc}
 800c824:	080197d8 	.word	0x080197d8
 800c828:	08019868 	.word	0x08019868
 800c82c:	0801982c 	.word	0x0801982c
 800c830:	0801b83c 	.word	0x0801b83c

0800c834 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc* desc, void *mem)
{
 800c834:	b580      	push	{r7, lr}
 800c836:	b084      	sub	sp, #16
 800c838:	af00      	add	r7, sp, #0
 800c83a:	6078      	str	r0, [r7, #4]
 800c83c:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 800c83e:	683b      	ldr	r3, [r7, #0]
 800c840:	f003 0303 	and.w	r3, r3, #3
 800c844:	2b00      	cmp	r3, #0
 800c846:	d006      	beq.n	800c856 <do_memp_free_pool+0x22>
 800c848:	4b0d      	ldr	r3, [pc, #52]	; (800c880 <do_memp_free_pool+0x4c>)
 800c84a:	f240 129d 	movw	r2, #413	; 0x19d
 800c84e:	490d      	ldr	r1, [pc, #52]	; (800c884 <do_memp_free_pool+0x50>)
 800c850:	480d      	ldr	r0, [pc, #52]	; (800c888 <do_memp_free_pool+0x54>)
 800c852:	f00b fef9 	bl	8018648 <iprintf>
                ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t*)mem - MEMP_SIZE);
 800c856:	683b      	ldr	r3, [r7, #0]
 800c858:	60fb      	str	r3, [r7, #12]

  SYS_ARCH_PROTECT(old_level);
 800c85a:	f00b f8ff 	bl	8017a5c <sys_arch_protect>
 800c85e:	60b8      	str	r0, [r7, #8]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 800c860:	687b      	ldr	r3, [r7, #4]
 800c862:	689b      	ldr	r3, [r3, #8]
 800c864:	681a      	ldr	r2, [r3, #0]
 800c866:	68fb      	ldr	r3, [r7, #12]
 800c868:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 800c86a:	687b      	ldr	r3, [r7, #4]
 800c86c:	689b      	ldr	r3, [r3, #8]
 800c86e:	68fa      	ldr	r2, [r7, #12]
 800c870:	601a      	str	r2, [r3, #0]

#if MEMP_SANITY_CHECK
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
 800c872:	68b8      	ldr	r0, [r7, #8]
 800c874:	f00b f900 	bl	8017a78 <sys_arch_unprotect>
#endif /* !MEMP_MEM_MALLOC */
}
 800c878:	bf00      	nop
 800c87a:	3710      	adds	r7, #16
 800c87c:	46bd      	mov	sp, r7
 800c87e:	bd80      	pop	{r7, pc}
 800c880:	080197d8 	.word	0x080197d8
 800c884:	08019888 	.word	0x08019888
 800c888:	0801982c 	.word	0x0801982c

0800c88c <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 800c88c:	b580      	push	{r7, lr}
 800c88e:	b082      	sub	sp, #8
 800c890:	af00      	add	r7, sp, #0
 800c892:	4603      	mov	r3, r0
 800c894:	6039      	str	r1, [r7, #0]
 800c896:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 800c898:	79fb      	ldrb	r3, [r7, #7]
 800c89a:	2b0c      	cmp	r3, #12
 800c89c:	d907      	bls.n	800c8ae <memp_free+0x22>
 800c89e:	4b0c      	ldr	r3, [pc, #48]	; (800c8d0 <memp_free+0x44>)
 800c8a0:	f240 12db 	movw	r2, #475	; 0x1db
 800c8a4:	490b      	ldr	r1, [pc, #44]	; (800c8d4 <memp_free+0x48>)
 800c8a6:	480c      	ldr	r0, [pc, #48]	; (800c8d8 <memp_free+0x4c>)
 800c8a8:	f00b fece 	bl	8018648 <iprintf>
 800c8ac:	e00c      	b.n	800c8c8 <memp_free+0x3c>

  if (mem == NULL) {
 800c8ae:	683b      	ldr	r3, [r7, #0]
 800c8b0:	2b00      	cmp	r3, #0
 800c8b2:	d008      	beq.n	800c8c6 <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 800c8b4:	79fb      	ldrb	r3, [r7, #7]
 800c8b6:	4a09      	ldr	r2, [pc, #36]	; (800c8dc <memp_free+0x50>)
 800c8b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c8bc:	6839      	ldr	r1, [r7, #0]
 800c8be:	4618      	mov	r0, r3
 800c8c0:	f7ff ffb8 	bl	800c834 <do_memp_free_pool>
 800c8c4:	e000      	b.n	800c8c8 <memp_free+0x3c>
    return;
 800c8c6:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 800c8c8:	3708      	adds	r7, #8
 800c8ca:	46bd      	mov	sp, r7
 800c8cc:	bd80      	pop	{r7, pc}
 800c8ce:	bf00      	nop
 800c8d0:	080197d8 	.word	0x080197d8
 800c8d4:	080198a8 	.word	0x080198a8
 800c8d8:	0801982c 	.word	0x0801982c
 800c8dc:	0801b83c 	.word	0x0801b83c

0800c8e0 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 800c8e0:	b480      	push	{r7}
 800c8e2:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 800c8e4:	bf00      	nop
 800c8e6:	46bd      	mov	sp, r7
 800c8e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8ec:	4770      	bx	lr
	...

0800c8f0 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 800c8f0:	b580      	push	{r7, lr}
 800c8f2:	b084      	sub	sp, #16
 800c8f4:	af00      	add	r7, sp, #0
 800c8f6:	60f8      	str	r0, [r7, #12]
 800c8f8:	60b9      	str	r1, [r7, #8]
 800c8fa:	607a      	str	r2, [r7, #4]
 800c8fc:	603b      	str	r3, [r7, #0]
#if LWIP_IPV6
  s8_t i;
#endif

  LWIP_ASSERT("No init function given", init != NULL);
 800c8fe:	69fb      	ldr	r3, [r7, #28]
 800c900:	2b00      	cmp	r3, #0
 800c902:	d105      	bne.n	800c910 <netif_add+0x20>
 800c904:	4b23      	ldr	r3, [pc, #140]	; (800c994 <netif_add+0xa4>)
 800c906:	22fb      	movs	r2, #251	; 0xfb
 800c908:	4923      	ldr	r1, [pc, #140]	; (800c998 <netif_add+0xa8>)
 800c90a:	4824      	ldr	r0, [pc, #144]	; (800c99c <netif_add+0xac>)
 800c90c:	f00b fe9c 	bl	8018648 <iprintf>

  /* reset new interface configuration state */
#if LWIP_IPV4
  ip_addr_set_zero_ip4(&netif->ip_addr);
 800c910:	68fb      	ldr	r3, [r7, #12]
 800c912:	2200      	movs	r2, #0
 800c914:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 800c916:	68fb      	ldr	r3, [r7, #12]
 800c918:	2200      	movs	r2, #0
 800c91a:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 800c91c:	68fb      	ldr	r3, [r7, #12]
 800c91e:	2200      	movs	r2, #0
 800c920:	60da      	str	r2, [r3, #12]
    netif->ip6_addr_state[i] = IP6_ADDR_INVALID;
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->flags = 0;
 800c922:	68fb      	ldr	r3, [r7, #12]
 800c924:	2200      	movs	r2, #0
 800c926:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
#ifdef netif_get_client_data
  memset(netif->client_data, 0, sizeof(netif->client_data));
 800c92a:	68fb      	ldr	r3, [r7, #12]
 800c92c:	3320      	adds	r3, #32
 800c92e:	2204      	movs	r2, #4
 800c930:	2100      	movs	r1, #0
 800c932:	4618      	mov	r0, r3
 800c934:	f00b fdd8 	bl	80184e8 <memset>
#if LWIP_IPV6_AUTOCONFIG
  /* IPv6 address autoconfiguration not enabled by default */
  netif->ip6_autoconfig_enabled = 0;
#endif /* LWIP_IPV6_AUTOCONFIG */
#if LWIP_IPV6_SEND_ROUTER_SOLICIT
  netif->rs_count = LWIP_ND6_MAX_MULTICAST_SOLICIT;
 800c938:	68fb      	ldr	r3, [r7, #12]
 800c93a:	2203      	movs	r2, #3
 800c93c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 800c940:	68fb      	ldr	r3, [r7, #12]
 800c942:	69ba      	ldr	r2, [r7, #24]
 800c944:	61da      	str	r2, [r3, #28]
  netif->num = netif_num++;
 800c946:	4b16      	ldr	r3, [pc, #88]	; (800c9a0 <netif_add+0xb0>)
 800c948:	781b      	ldrb	r3, [r3, #0]
 800c94a:	1c5a      	adds	r2, r3, #1
 800c94c:	b2d1      	uxtb	r1, r2
 800c94e:	4a14      	ldr	r2, [pc, #80]	; (800c9a0 <netif_add+0xb0>)
 800c950:	7011      	strb	r1, [r2, #0]
 800c952:	68fa      	ldr	r2, [r7, #12]
 800c954:	f882 3032 	strb.w	r3, [r2, #50]	; 0x32
  netif->input = input;
 800c958:	68fb      	ldr	r3, [r7, #12]
 800c95a:	6a3a      	ldr	r2, [r7, #32]
 800c95c:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 800c95e:	683b      	ldr	r3, [r7, #0]
 800c960:	687a      	ldr	r2, [r7, #4]
 800c962:	68b9      	ldr	r1, [r7, #8]
 800c964:	68f8      	ldr	r0, [r7, #12]
 800c966:	f000 f81f 	bl	800c9a8 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 800c96a:	69fb      	ldr	r3, [r7, #28]
 800c96c:	68f8      	ldr	r0, [r7, #12]
 800c96e:	4798      	blx	r3
 800c970:	4603      	mov	r3, r0
 800c972:	2b00      	cmp	r3, #0
 800c974:	d001      	beq.n	800c97a <netif_add+0x8a>
    return NULL;
 800c976:	2300      	movs	r3, #0
 800c978:	e007      	b.n	800c98a <netif_add+0x9a>
  }

  /* add this netif to the list */
  netif->next = netif_list;
 800c97a:	4b0a      	ldr	r3, [pc, #40]	; (800c9a4 <netif_add+0xb4>)
 800c97c:	681a      	ldr	r2, [r3, #0]
 800c97e:	68fb      	ldr	r3, [r7, #12]
 800c980:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 800c982:	4a08      	ldr	r2, [pc, #32]	; (800c9a4 <netif_add+0xb4>)
 800c984:	68fb      	ldr	r3, [r7, #12]
 800c986:	6013      	str	r3, [r2, #0]
  ip4_addr_debug_print(NETIF_DEBUG, netmask);
  LWIP_DEBUGF(NETIF_DEBUG, (" gw "));
  ip4_addr_debug_print(NETIF_DEBUG, gw);
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));
  return netif;
 800c988:	68fb      	ldr	r3, [r7, #12]
}
 800c98a:	4618      	mov	r0, r3
 800c98c:	3710      	adds	r7, #16
 800c98e:	46bd      	mov	sp, r7
 800c990:	bd80      	pop	{r7, pc}
 800c992:	bf00      	nop
 800c994:	080198c4 	.word	0x080198c4
 800c998:	080198f8 	.word	0x080198f8
 800c99c:	08019910 	.word	0x08019910
 800c9a0:	20004210 	.word	0x20004210
 800c9a4:	2000ac24 	.word	0x2000ac24

0800c9a8 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
    const ip4_addr_t *gw)
{
 800c9a8:	b580      	push	{r7, lr}
 800c9aa:	b084      	sub	sp, #16
 800c9ac:	af00      	add	r7, sp, #0
 800c9ae:	60f8      	str	r0, [r7, #12]
 800c9b0:	60b9      	str	r1, [r7, #8]
 800c9b2:	607a      	str	r2, [r7, #4]
 800c9b4:	603b      	str	r3, [r7, #0]
  if (ip4_addr_isany(ipaddr)) {
 800c9b6:	68bb      	ldr	r3, [r7, #8]
 800c9b8:	2b00      	cmp	r3, #0
 800c9ba:	d003      	beq.n	800c9c4 <netif_set_addr+0x1c>
 800c9bc:	68bb      	ldr	r3, [r7, #8]
 800c9be:	681b      	ldr	r3, [r3, #0]
 800c9c0:	2b00      	cmp	r3, #0
 800c9c2:	d10c      	bne.n	800c9de <netif_set_addr+0x36>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    netif_set_ipaddr(netif, ipaddr);
 800c9c4:	68b9      	ldr	r1, [r7, #8]
 800c9c6:	68f8      	ldr	r0, [r7, #12]
 800c9c8:	f000 f81a 	bl	800ca00 <netif_set_ipaddr>
    netif_set_netmask(netif, netmask);
 800c9cc:	6879      	ldr	r1, [r7, #4]
 800c9ce:	68f8      	ldr	r0, [r7, #12]
 800c9d0:	f000 f862 	bl	800ca98 <netif_set_netmask>
    netif_set_gw(netif, gw);
 800c9d4:	6839      	ldr	r1, [r7, #0]
 800c9d6:	68f8      	ldr	r0, [r7, #12]
 800c9d8:	f000 f84a 	bl	800ca70 <netif_set_gw>
 800c9dc:	e00b      	b.n	800c9f6 <netif_set_addr+0x4e>
  } else {
    netif_set_netmask(netif, netmask);
 800c9de:	6879      	ldr	r1, [r7, #4]
 800c9e0:	68f8      	ldr	r0, [r7, #12]
 800c9e2:	f000 f859 	bl	800ca98 <netif_set_netmask>
    netif_set_gw(netif, gw);
 800c9e6:	6839      	ldr	r1, [r7, #0]
 800c9e8:	68f8      	ldr	r0, [r7, #12]
 800c9ea:	f000 f841 	bl	800ca70 <netif_set_gw>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    netif_set_ipaddr(netif, ipaddr);
 800c9ee:	68b9      	ldr	r1, [r7, #8]
 800c9f0:	68f8      	ldr	r0, [r7, #12]
 800c9f2:	f000 f805 	bl	800ca00 <netif_set_ipaddr>
  }
}
 800c9f6:	bf00      	nop
 800c9f8:	3710      	adds	r7, #16
 800c9fa:	46bd      	mov	sp, r7
 800c9fc:	bd80      	pop	{r7, pc}
	...

0800ca00 <netif_set_ipaddr>:
 * @note call netif_set_addr() if you also want to change netmask and
 * default gateway
 */
void
netif_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr)
{
 800ca00:	b580      	push	{r7, lr}
 800ca02:	b084      	sub	sp, #16
 800ca04:	af00      	add	r7, sp, #0
 800ca06:	6078      	str	r0, [r7, #4]
 800ca08:	6039      	str	r1, [r7, #0]
  ip_addr_t new_addr;
  *ip_2_ip4(&new_addr) = (ipaddr ? *ipaddr : *IP4_ADDR_ANY4);
 800ca0a:	683b      	ldr	r3, [r7, #0]
 800ca0c:	2b00      	cmp	r3, #0
 800ca0e:	d003      	beq.n	800ca18 <netif_set_ipaddr+0x18>
 800ca10:	683b      	ldr	r3, [r7, #0]
 800ca12:	681b      	ldr	r3, [r3, #0]
 800ca14:	60fb      	str	r3, [r7, #12]
 800ca16:	e002      	b.n	800ca1e <netif_set_ipaddr+0x1e>
 800ca18:	4b14      	ldr	r3, [pc, #80]	; (800ca6c <netif_set_ipaddr+0x6c>)
 800ca1a:	681b      	ldr	r3, [r3, #0]
 800ca1c:	60fb      	str	r3, [r7, #12]
  IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

  /* address is actually being changed? */
  if (ip4_addr_cmp(ip_2_ip4(&new_addr), netif_ip4_addr(netif)) == 0) {
 800ca1e:	68fa      	ldr	r2, [r7, #12]
 800ca20:	687b      	ldr	r3, [r7, #4]
 800ca22:	3304      	adds	r3, #4
 800ca24:	681b      	ldr	r3, [r3, #0]
 800ca26:	429a      	cmp	r2, r3
 800ca28:	d01c      	beq.n	800ca64 <netif_set_ipaddr+0x64>
    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
#if LWIP_TCP
    tcp_netif_ip_addr_changed(netif_ip_addr4(netif), &new_addr);
 800ca2a:	687b      	ldr	r3, [r7, #4]
 800ca2c:	3304      	adds	r3, #4
 800ca2e:	f107 020c 	add.w	r2, r7, #12
 800ca32:	4611      	mov	r1, r2
 800ca34:	4618      	mov	r0, r3
 800ca36:	f002 faf7 	bl	800f028 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
    udp_netif_ip_addr_changed(netif_ip_addr4(netif), &new_addr);
 800ca3a:	687b      	ldr	r3, [r7, #4]
 800ca3c:	3304      	adds	r3, #4
 800ca3e:	f107 020c 	add.w	r2, r7, #12
 800ca42:	4611      	mov	r1, r2
 800ca44:	4618      	mov	r0, r3
 800ca46:	f006 fdeb 	bl	8013620 <udp_netif_ip_addr_changed>
#endif /* LWIP_RAW */

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 800ca4a:	683b      	ldr	r3, [r7, #0]
 800ca4c:	2b00      	cmp	r3, #0
 800ca4e:	d002      	beq.n	800ca56 <netif_set_ipaddr+0x56>
 800ca50:	683b      	ldr	r3, [r7, #0]
 800ca52:	681b      	ldr	r3, [r3, #0]
 800ca54:	e000      	b.n	800ca58 <netif_set_ipaddr+0x58>
 800ca56:	2300      	movs	r3, #0
 800ca58:	687a      	ldr	r2, [r7, #4]
 800ca5a:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 800ca5c:	2101      	movs	r1, #1
 800ca5e:	6878      	ldr	r0, [r7, #4]
 800ca60:	f000 f861 	bl	800cb26 <netif_issue_reports>
    netif->name[0], netif->name[1],
    ip4_addr1_16(netif_ip4_addr(netif)),
    ip4_addr2_16(netif_ip4_addr(netif)),
    ip4_addr3_16(netif_ip4_addr(netif)),
    ip4_addr4_16(netif_ip4_addr(netif))));
}
 800ca64:	bf00      	nop
 800ca66:	3710      	adds	r7, #16
 800ca68:	46bd      	mov	sp, r7
 800ca6a:	bd80      	pop	{r7, pc}
 800ca6c:	0801b8c0 	.word	0x0801b8c0

0800ca70 <netif_set_gw>:
 *
 * @note call netif_set_addr() if you also want to change ip address and netmask
 */
void
netif_set_gw(struct netif *netif, const ip4_addr_t *gw)
{
 800ca70:	b480      	push	{r7}
 800ca72:	b083      	sub	sp, #12
 800ca74:	af00      	add	r7, sp, #0
 800ca76:	6078      	str	r0, [r7, #4]
 800ca78:	6039      	str	r1, [r7, #0]
  ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 800ca7a:	683b      	ldr	r3, [r7, #0]
 800ca7c:	2b00      	cmp	r3, #0
 800ca7e:	d002      	beq.n	800ca86 <netif_set_gw+0x16>
 800ca80:	683b      	ldr	r3, [r7, #0]
 800ca82:	681b      	ldr	r3, [r3, #0]
 800ca84:	e000      	b.n	800ca88 <netif_set_gw+0x18>
 800ca86:	2300      	movs	r3, #0
 800ca88:	687a      	ldr	r2, [r7, #4]
 800ca8a:	60d3      	str	r3, [r2, #12]
    netif->name[0], netif->name[1],
    ip4_addr1_16(netif_ip4_gw(netif)),
    ip4_addr2_16(netif_ip4_gw(netif)),
    ip4_addr3_16(netif_ip4_gw(netif)),
    ip4_addr4_16(netif_ip4_gw(netif))));
}
 800ca8c:	bf00      	nop
 800ca8e:	370c      	adds	r7, #12
 800ca90:	46bd      	mov	sp, r7
 800ca92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca96:	4770      	bx	lr

0800ca98 <netif_set_netmask>:
 * @note call netif_set_addr() if you also want to change ip address and
 * default gateway
 */
void
netif_set_netmask(struct netif *netif, const ip4_addr_t *netmask)
{
 800ca98:	b480      	push	{r7}
 800ca9a:	b083      	sub	sp, #12
 800ca9c:	af00      	add	r7, sp, #0
 800ca9e:	6078      	str	r0, [r7, #4]
 800caa0:	6039      	str	r1, [r7, #0]
  mib2_remove_route_ip4(0, netif);
  /* set new netmask to netif */
  ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 800caa2:	683b      	ldr	r3, [r7, #0]
 800caa4:	2b00      	cmp	r3, #0
 800caa6:	d002      	beq.n	800caae <netif_set_netmask+0x16>
 800caa8:	683b      	ldr	r3, [r7, #0]
 800caaa:	681b      	ldr	r3, [r3, #0]
 800caac:	e000      	b.n	800cab0 <netif_set_netmask+0x18>
 800caae:	2300      	movs	r3, #0
 800cab0:	687a      	ldr	r2, [r7, #4]
 800cab2:	6093      	str	r3, [r2, #8]
    netif->name[0], netif->name[1],
    ip4_addr1_16(netif_ip4_netmask(netif)),
    ip4_addr2_16(netif_ip4_netmask(netif)),
    ip4_addr3_16(netif_ip4_netmask(netif)),
    ip4_addr4_16(netif_ip4_netmask(netif))));
}
 800cab4:	bf00      	nop
 800cab6:	370c      	adds	r7, #12
 800cab8:	46bd      	mov	sp, r7
 800caba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cabe:	4770      	bx	lr

0800cac0 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 800cac0:	b480      	push	{r7}
 800cac2:	b083      	sub	sp, #12
 800cac4:	af00      	add	r7, sp, #0
 800cac6:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 800cac8:	4a04      	ldr	r2, [pc, #16]	; (800cadc <netif_set_default+0x1c>)
 800caca:	687b      	ldr	r3, [r7, #4]
 800cacc:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
           netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 800cace:	bf00      	nop
 800cad0:	370c      	adds	r7, #12
 800cad2:	46bd      	mov	sp, r7
 800cad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cad8:	4770      	bx	lr
 800cada:	bf00      	nop
 800cadc:	2000ac28 	.word	0x2000ac28

0800cae0 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 800cae0:	b580      	push	{r7, lr}
 800cae2:	b082      	sub	sp, #8
 800cae4:	af00      	add	r7, sp, #0
 800cae6:	6078      	str	r0, [r7, #4]
  if (!(netif->flags & NETIF_FLAG_UP)) {
 800cae8:	687b      	ldr	r3, [r7, #4]
 800caea:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800caee:	f003 0301 	and.w	r3, r3, #1
 800caf2:	2b00      	cmp	r3, #0
 800caf4:	d113      	bne.n	800cb1e <netif_set_up+0x3e>
    netif->flags |= NETIF_FLAG_UP;
 800caf6:	687b      	ldr	r3, [r7, #4]
 800caf8:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800cafc:	f043 0301 	orr.w	r3, r3, #1
 800cb00:	b2da      	uxtb	r2, r3
 800cb02:	687b      	ldr	r3, [r7, #4]
 800cb04:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

    NETIF_STATUS_CALLBACK(netif);

    if (netif->flags & NETIF_FLAG_LINK_UP) {
 800cb08:	687b      	ldr	r3, [r7, #4]
 800cb0a:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800cb0e:	f003 0304 	and.w	r3, r3, #4
 800cb12:	2b00      	cmp	r3, #0
 800cb14:	d003      	beq.n	800cb1e <netif_set_up+0x3e>
      netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4|NETIF_REPORT_TYPE_IPV6);
 800cb16:	2103      	movs	r1, #3
 800cb18:	6878      	ldr	r0, [r7, #4]
 800cb1a:	f000 f804 	bl	800cb26 <netif_issue_reports>
    }
  }
}
 800cb1e:	bf00      	nop
 800cb20:	3708      	adds	r7, #8
 800cb22:	46bd      	mov	sp, r7
 800cb24:	bd80      	pop	{r7, pc}

0800cb26 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif* netif, u8_t report_type)
{
 800cb26:	b580      	push	{r7, lr}
 800cb28:	b082      	sub	sp, #8
 800cb2a:	af00      	add	r7, sp, #0
 800cb2c:	6078      	str	r0, [r7, #4]
 800cb2e:	460b      	mov	r3, r1
 800cb30:	70fb      	strb	r3, [r7, #3]
#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800cb32:	78fb      	ldrb	r3, [r7, #3]
 800cb34:	f003 0301 	and.w	r3, r3, #1
 800cb38:	2b00      	cmp	r3, #0
 800cb3a:	d011      	beq.n	800cb60 <netif_issue_reports+0x3a>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800cb3c:	687b      	ldr	r3, [r7, #4]
 800cb3e:	3304      	adds	r3, #4
 800cb40:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800cb42:	2b00      	cmp	r3, #0
 800cb44:	d00c      	beq.n	800cb60 <netif_issue_reports+0x3a>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 800cb46:	687b      	ldr	r3, [r7, #4]
 800cb48:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800cb4c:	f003 0308 	and.w	r3, r3, #8
 800cb50:	2b00      	cmp	r3, #0
 800cb52:	d005      	beq.n	800cb60 <netif_issue_reports+0x3a>
      etharp_gratuitous(netif);
 800cb54:	687b      	ldr	r3, [r7, #4]
 800cb56:	3304      	adds	r3, #4
 800cb58:	4619      	mov	r1, r3
 800cb5a:	6878      	ldr	r0, [r7, #4]
 800cb5c:	f009 fb4e 	bl	80161fc <etharp_request>
    /* Send Router Solicitation messages. */
    netif->rs_count = LWIP_ND6_MAX_MULTICAST_SOLICIT;
#endif /* LWIP_IPV6_SEND_ROUTER_SOLICIT */
  }
#endif /* LWIP_IPV6 */
}
 800cb60:	bf00      	nop
 800cb62:	3708      	adds	r7, #8
 800cb64:	46bd      	mov	sp, r7
 800cb66:	bd80      	pop	{r7, pc}

0800cb68 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 800cb68:	b580      	push	{r7, lr}
 800cb6a:	b082      	sub	sp, #8
 800cb6c:	af00      	add	r7, sp, #0
 800cb6e:	6078      	str	r0, [r7, #4]
  if (netif->flags & NETIF_FLAG_UP) {
 800cb70:	687b      	ldr	r3, [r7, #4]
 800cb72:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800cb76:	f003 0301 	and.w	r3, r3, #1
 800cb7a:	2b00      	cmp	r3, #0
 800cb7c:	d012      	beq.n	800cba4 <netif_set_down+0x3c>
    netif->flags &= ~NETIF_FLAG_UP;
 800cb7e:	687b      	ldr	r3, [r7, #4]
 800cb80:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800cb84:	f023 0301 	bic.w	r3, r3, #1
 800cb88:	b2da      	uxtb	r2, r3
 800cb8a:	687b      	ldr	r3, [r7, #4]
 800cb8c:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 800cb90:	687b      	ldr	r3, [r7, #4]
 800cb92:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800cb96:	f003 0308 	and.w	r3, r3, #8
 800cb9a:	2b00      	cmp	r3, #0
 800cb9c:	d002      	beq.n	800cba4 <netif_set_down+0x3c>
      etharp_cleanup_netif(netif);
 800cb9e:	6878      	ldr	r0, [r7, #4]
 800cba0:	f008 feee 	bl	8015980 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 800cba4:	bf00      	nop
 800cba6:	3708      	adds	r7, #8
 800cba8:	46bd      	mov	sp, r7
 800cbaa:	bd80      	pop	{r7, pc}

0800cbac <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 800cbac:	b580      	push	{r7, lr}
 800cbae:	b082      	sub	sp, #8
 800cbb0:	af00      	add	r7, sp, #0
  struct tcp_pcb* pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 800cbb2:	f00a ff53 	bl	8017a5c <sys_arch_protect>
 800cbb6:	6038      	str	r0, [r7, #0]
 800cbb8:	4b0f      	ldr	r3, [pc, #60]	; (800cbf8 <pbuf_free_ooseq+0x4c>)
 800cbba:	2200      	movs	r2, #0
 800cbbc:	701a      	strb	r2, [r3, #0]
 800cbbe:	6838      	ldr	r0, [r7, #0]
 800cbc0:	f00a ff5a 	bl	8017a78 <sys_arch_unprotect>

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800cbc4:	4b0d      	ldr	r3, [pc, #52]	; (800cbfc <pbuf_free_ooseq+0x50>)
 800cbc6:	681b      	ldr	r3, [r3, #0]
 800cbc8:	607b      	str	r3, [r7, #4]
 800cbca:	e00f      	b.n	800cbec <pbuf_free_ooseq+0x40>
    if (NULL != pcb->ooseq) {
 800cbcc:	687b      	ldr	r3, [r7, #4]
 800cbce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cbd0:	2b00      	cmp	r3, #0
 800cbd2:	d008      	beq.n	800cbe6 <pbuf_free_ooseq+0x3a>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_segs_free(pcb->ooseq);
 800cbd4:	687b      	ldr	r3, [r7, #4]
 800cbd6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cbd8:	4618      	mov	r0, r3
 800cbda:	f001 fe98 	bl	800e90e <tcp_segs_free>
      pcb->ooseq = NULL;
 800cbde:	687b      	ldr	r3, [r7, #4]
 800cbe0:	2200      	movs	r2, #0
 800cbe2:	671a      	str	r2, [r3, #112]	; 0x70
      return;
 800cbe4:	e005      	b.n	800cbf2 <pbuf_free_ooseq+0x46>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800cbe6:	687b      	ldr	r3, [r7, #4]
 800cbe8:	68db      	ldr	r3, [r3, #12]
 800cbea:	607b      	str	r3, [r7, #4]
 800cbec:	687b      	ldr	r3, [r7, #4]
 800cbee:	2b00      	cmp	r3, #0
 800cbf0:	d1ec      	bne.n	800cbcc <pbuf_free_ooseq+0x20>
    }
  }
}
 800cbf2:	3708      	adds	r7, #8
 800cbf4:	46bd      	mov	sp, r7
 800cbf6:	bd80      	pop	{r7, pc}
 800cbf8:	2000ac2c 	.word	0x2000ac2c
 800cbfc:	2000ac34 	.word	0x2000ac34

0800cc00 <pbuf_free_ooseq_callback>:
/**
 * Just a callback function for tcpip_callback() that calls pbuf_free_ooseq().
 */
static void
pbuf_free_ooseq_callback(void *arg)
{
 800cc00:	b580      	push	{r7, lr}
 800cc02:	b082      	sub	sp, #8
 800cc04:	af00      	add	r7, sp, #0
 800cc06:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);
  pbuf_free_ooseq();
 800cc08:	f7ff ffd0 	bl	800cbac <pbuf_free_ooseq>
}
 800cc0c:	bf00      	nop
 800cc0e:	3708      	adds	r7, #8
 800cc10:	46bd      	mov	sp, r7
 800cc12:	bd80      	pop	{r7, pc}

0800cc14 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 800cc14:	b580      	push	{r7, lr}
 800cc16:	b082      	sub	sp, #8
 800cc18:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
#else /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
  u8_t queued;
  SYS_ARCH_DECL_PROTECT(old_level);
  SYS_ARCH_PROTECT(old_level);
 800cc1a:	f00a ff1f 	bl	8017a5c <sys_arch_protect>
 800cc1e:	6078      	str	r0, [r7, #4]
  queued = pbuf_free_ooseq_pending;
 800cc20:	4b10      	ldr	r3, [pc, #64]	; (800cc64 <pbuf_pool_is_empty+0x50>)
 800cc22:	781b      	ldrb	r3, [r3, #0]
 800cc24:	70fb      	strb	r3, [r7, #3]
  pbuf_free_ooseq_pending = 1;
 800cc26:	4b0f      	ldr	r3, [pc, #60]	; (800cc64 <pbuf_pool_is_empty+0x50>)
 800cc28:	2201      	movs	r2, #1
 800cc2a:	701a      	strb	r2, [r3, #0]
  SYS_ARCH_UNPROTECT(old_level);
 800cc2c:	6878      	ldr	r0, [r7, #4]
 800cc2e:	f00a ff23 	bl	8017a78 <sys_arch_unprotect>

  if (!queued) {
 800cc32:	78fb      	ldrb	r3, [r7, #3]
 800cc34:	2b00      	cmp	r3, #0
 800cc36:	d110      	bne.n	800cc5a <pbuf_pool_is_empty+0x46>
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
 800cc38:	2200      	movs	r2, #0
 800cc3a:	2100      	movs	r1, #0
 800cc3c:	480a      	ldr	r0, [pc, #40]	; (800cc68 <pbuf_pool_is_empty+0x54>)
 800cc3e:	f7ff f951 	bl	800bee4 <tcpip_callback_with_block>
 800cc42:	4603      	mov	r3, r0
 800cc44:	2b00      	cmp	r3, #0
 800cc46:	d008      	beq.n	800cc5a <pbuf_pool_is_empty+0x46>
 800cc48:	f00a ff08 	bl	8017a5c <sys_arch_protect>
 800cc4c:	6078      	str	r0, [r7, #4]
 800cc4e:	4b05      	ldr	r3, [pc, #20]	; (800cc64 <pbuf_pool_is_empty+0x50>)
 800cc50:	2200      	movs	r2, #0
 800cc52:	701a      	strb	r2, [r3, #0]
 800cc54:	6878      	ldr	r0, [r7, #4]
 800cc56:	f00a ff0f 	bl	8017a78 <sys_arch_unprotect>
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 800cc5a:	bf00      	nop
 800cc5c:	3708      	adds	r7, #8
 800cc5e:	46bd      	mov	sp, r7
 800cc60:	bd80      	pop	{r7, pc}
 800cc62:	bf00      	nop
 800cc64:	2000ac2c 	.word	0x2000ac2c
 800cc68:	0800cc01 	.word	0x0800cc01

0800cc6c <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 800cc6c:	b580      	push	{r7, lr}
 800cc6e:	b088      	sub	sp, #32
 800cc70:	af00      	add	r7, sp, #0
 800cc72:	4603      	mov	r3, r0
 800cc74:	71fb      	strb	r3, [r7, #7]
 800cc76:	460b      	mov	r3, r1
 800cc78:	80bb      	strh	r3, [r7, #4]
 800cc7a:	4613      	mov	r3, r2
 800cc7c:	71bb      	strb	r3, [r7, #6]
  u16_t offset;
  s32_t rem_len; /* remaining length */
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  /* determine header offset */
  switch (layer) {
 800cc7e:	79fb      	ldrb	r3, [r7, #7]
 800cc80:	2b04      	cmp	r3, #4
 800cc82:	d81c      	bhi.n	800ccbe <pbuf_alloc+0x52>
 800cc84:	a201      	add	r2, pc, #4	; (adr r2, 800cc8c <pbuf_alloc+0x20>)
 800cc86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cc8a:	bf00      	nop
 800cc8c:	0800cca1 	.word	0x0800cca1
 800cc90:	0800cca7 	.word	0x0800cca7
 800cc94:	0800ccad 	.word	0x0800ccad
 800cc98:	0800ccb3 	.word	0x0800ccb3
 800cc9c:	0800ccb9 	.word	0x0800ccb9
  case PBUF_TRANSPORT:
    /* add room for transport (often TCP) layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN + PBUF_IP_HLEN + PBUF_TRANSPORT_HLEN;
 800cca0:	2336      	movs	r3, #54	; 0x36
 800cca2:	82fb      	strh	r3, [r7, #22]
    break;
 800cca4:	e014      	b.n	800ccd0 <pbuf_alloc+0x64>
  case PBUF_IP:
    /* add room for IP layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN + PBUF_IP_HLEN;
 800cca6:	2322      	movs	r3, #34	; 0x22
 800cca8:	82fb      	strh	r3, [r7, #22]
    break;
 800ccaa:	e011      	b.n	800ccd0 <pbuf_alloc+0x64>
  case PBUF_LINK:
    /* add room for link layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN;
 800ccac:	230e      	movs	r3, #14
 800ccae:	82fb      	strh	r3, [r7, #22]
    break;
 800ccb0:	e00e      	b.n	800ccd0 <pbuf_alloc+0x64>
  case PBUF_RAW_TX:
    /* add room for encapsulating link layer headers (e.g. 802.11) */
    offset = PBUF_LINK_ENCAPSULATION_HLEN;
 800ccb2:	2300      	movs	r3, #0
 800ccb4:	82fb      	strh	r3, [r7, #22]
    break;
 800ccb6:	e00b      	b.n	800ccd0 <pbuf_alloc+0x64>
  case PBUF_RAW:
    /* no offset (e.g. RX buffers or chain successors) */
    offset = 0;
 800ccb8:	2300      	movs	r3, #0
 800ccba:	82fb      	strh	r3, [r7, #22]
    break;
 800ccbc:	e008      	b.n	800ccd0 <pbuf_alloc+0x64>
  default:
    LWIP_ASSERT("pbuf_alloc: bad pbuf layer", 0);
 800ccbe:	4ba5      	ldr	r3, [pc, #660]	; (800cf54 <pbuf_alloc+0x2e8>)
 800ccc0:	f44f 728b 	mov.w	r2, #278	; 0x116
 800ccc4:	49a4      	ldr	r1, [pc, #656]	; (800cf58 <pbuf_alloc+0x2ec>)
 800ccc6:	48a5      	ldr	r0, [pc, #660]	; (800cf5c <pbuf_alloc+0x2f0>)
 800ccc8:	f00b fcbe 	bl	8018648 <iprintf>
    return NULL;
 800cccc:	2300      	movs	r3, #0
 800ccce:	e15d      	b.n	800cf8c <pbuf_alloc+0x320>
  }

  switch (type) {
 800ccd0:	79bb      	ldrb	r3, [r7, #6]
 800ccd2:	2b03      	cmp	r3, #3
 800ccd4:	f200 8134 	bhi.w	800cf40 <pbuf_alloc+0x2d4>
 800ccd8:	a201      	add	r2, pc, #4	; (adr r2, 800cce0 <pbuf_alloc+0x74>)
 800ccda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ccde:	bf00      	nop
 800cce0:	0800ce81 	.word	0x0800ce81
 800cce4:	0800cf0d 	.word	0x0800cf0d
 800cce8:	0800cf0d 	.word	0x0800cf0d
 800ccec:	0800ccf1 	.word	0x0800ccf1
  case PBUF_POOL:
    /* allocate head of pbuf chain into p */
    p = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 800ccf0:	200c      	movs	r0, #12
 800ccf2:	f7ff fd79 	bl	800c7e8 <memp_malloc>
 800ccf6:	61f8      	str	r0, [r7, #28]
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc: allocated pbuf %p\n", (void *)p));
    if (p == NULL) {
 800ccf8:	69fb      	ldr	r3, [r7, #28]
 800ccfa:	2b00      	cmp	r3, #0
 800ccfc:	d103      	bne.n	800cd06 <pbuf_alloc+0x9a>
      PBUF_POOL_IS_EMPTY();
 800ccfe:	f7ff ff89 	bl	800cc14 <pbuf_pool_is_empty>
      return NULL;
 800cd02:	2300      	movs	r3, #0
 800cd04:	e142      	b.n	800cf8c <pbuf_alloc+0x320>
    }
    p->type = type;
 800cd06:	69fb      	ldr	r3, [r7, #28]
 800cd08:	79ba      	ldrb	r2, [r7, #6]
 800cd0a:	731a      	strb	r2, [r3, #12]
    p->next = NULL;
 800cd0c:	69fb      	ldr	r3, [r7, #28]
 800cd0e:	2200      	movs	r2, #0
 800cd10:	601a      	str	r2, [r3, #0]

    /* make the payload pointer point 'offset' bytes into pbuf data memory */
    p->payload = LWIP_MEM_ALIGN((void *)((u8_t *)p + (SIZEOF_STRUCT_PBUF + offset)));
 800cd12:	8afb      	ldrh	r3, [r7, #22]
 800cd14:	3310      	adds	r3, #16
 800cd16:	69fa      	ldr	r2, [r7, #28]
 800cd18:	4413      	add	r3, r2
 800cd1a:	3303      	adds	r3, #3
 800cd1c:	f023 0303 	bic.w	r3, r3, #3
 800cd20:	461a      	mov	r2, r3
 800cd22:	69fb      	ldr	r3, [r7, #28]
 800cd24:	605a      	str	r2, [r3, #4]
    LWIP_ASSERT("pbuf_alloc: pbuf p->payload properly aligned",
 800cd26:	69fb      	ldr	r3, [r7, #28]
 800cd28:	685b      	ldr	r3, [r3, #4]
 800cd2a:	f003 0303 	and.w	r3, r3, #3
 800cd2e:	2b00      	cmp	r3, #0
 800cd30:	d006      	beq.n	800cd40 <pbuf_alloc+0xd4>
 800cd32:	4b88      	ldr	r3, [pc, #544]	; (800cf54 <pbuf_alloc+0x2e8>)
 800cd34:	f240 1229 	movw	r2, #297	; 0x129
 800cd38:	4989      	ldr	r1, [pc, #548]	; (800cf60 <pbuf_alloc+0x2f4>)
 800cd3a:	4888      	ldr	r0, [pc, #544]	; (800cf5c <pbuf_alloc+0x2f0>)
 800cd3c:	f00b fc84 	bl	8018648 <iprintf>
            ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
    /* the total length of the pbuf chain is the requested size */
    p->tot_len = length;
 800cd40:	69fb      	ldr	r3, [r7, #28]
 800cd42:	88ba      	ldrh	r2, [r7, #4]
 800cd44:	811a      	strh	r2, [r3, #8]
    /* set the length of the first pbuf in the chain */
    p->len = LWIP_MIN(length, PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset));
 800cd46:	8afb      	ldrh	r3, [r7, #22]
 800cd48:	3303      	adds	r3, #3
 800cd4a:	f023 0303 	bic.w	r3, r3, #3
 800cd4e:	f5c3 7214 	rsb	r2, r3, #592	; 0x250
 800cd52:	88bb      	ldrh	r3, [r7, #4]
 800cd54:	4293      	cmp	r3, r2
 800cd56:	bf28      	it	cs
 800cd58:	4613      	movcs	r3, r2
 800cd5a:	b29a      	uxth	r2, r3
 800cd5c:	69fb      	ldr	r3, [r7, #28]
 800cd5e:	815a      	strh	r2, [r3, #10]
    LWIP_ASSERT("check p->payload + p->len does not overflow pbuf",
 800cd60:	69fb      	ldr	r3, [r7, #28]
 800cd62:	685b      	ldr	r3, [r3, #4]
 800cd64:	69fa      	ldr	r2, [r7, #28]
 800cd66:	8952      	ldrh	r2, [r2, #10]
 800cd68:	441a      	add	r2, r3
 800cd6a:	69fb      	ldr	r3, [r7, #28]
 800cd6c:	f503 7318 	add.w	r3, r3, #608	; 0x260
 800cd70:	429a      	cmp	r2, r3
 800cd72:	d906      	bls.n	800cd82 <pbuf_alloc+0x116>
 800cd74:	4b77      	ldr	r3, [pc, #476]	; (800cf54 <pbuf_alloc+0x2e8>)
 800cd76:	f44f 7298 	mov.w	r2, #304	; 0x130
 800cd7a:	497a      	ldr	r1, [pc, #488]	; (800cf64 <pbuf_alloc+0x2f8>)
 800cd7c:	4877      	ldr	r0, [pc, #476]	; (800cf5c <pbuf_alloc+0x2f0>)
 800cd7e:	f00b fc63 	bl	8018648 <iprintf>
                ((u8_t*)p->payload + p->len <=
                 (u8_t*)p + SIZEOF_STRUCT_PBUF + PBUF_POOL_BUFSIZE_ALIGNED));
    LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 800cd82:	8afb      	ldrh	r3, [r7, #22]
 800cd84:	3303      	adds	r3, #3
 800cd86:	f023 0303 	bic.w	r3, r3, #3
 800cd8a:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 800cd8e:	d106      	bne.n	800cd9e <pbuf_alloc+0x132>
 800cd90:	4b70      	ldr	r3, [pc, #448]	; (800cf54 <pbuf_alloc+0x2e8>)
 800cd92:	f44f 7299 	mov.w	r2, #306	; 0x132
 800cd96:	4974      	ldr	r1, [pc, #464]	; (800cf68 <pbuf_alloc+0x2fc>)
 800cd98:	4870      	ldr	r0, [pc, #448]	; (800cf5c <pbuf_alloc+0x2f0>)
 800cd9a:	f00b fc55 	bl	8018648 <iprintf>
      (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
    /* set reference count (needed here in case we fail) */
    p->ref = 1;
 800cd9e:	69fb      	ldr	r3, [r7, #28]
 800cda0:	2201      	movs	r2, #1
 800cda2:	81da      	strh	r2, [r3, #14]

    /* now allocate the tail of the pbuf chain */

    /* remember first pbuf for linkage in next iteration */
    r = p;
 800cda4:	69fb      	ldr	r3, [r7, #28]
 800cda6:	61bb      	str	r3, [r7, #24]
    /* remaining length to be allocated */
    rem_len = length - p->len;
 800cda8:	88bb      	ldrh	r3, [r7, #4]
 800cdaa:	69fa      	ldr	r2, [r7, #28]
 800cdac:	8952      	ldrh	r2, [r2, #10]
 800cdae:	1a9b      	subs	r3, r3, r2
 800cdb0:	613b      	str	r3, [r7, #16]
    /* any remaining pbufs to be allocated? */
    while (rem_len > 0) {
 800cdb2:	e061      	b.n	800ce78 <pbuf_alloc+0x20c>
      q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 800cdb4:	200c      	movs	r0, #12
 800cdb6:	f7ff fd17 	bl	800c7e8 <memp_malloc>
 800cdba:	60f8      	str	r0, [r7, #12]
      if (q == NULL) {
 800cdbc:	68fb      	ldr	r3, [r7, #12]
 800cdbe:	2b00      	cmp	r3, #0
 800cdc0:	d106      	bne.n	800cdd0 <pbuf_alloc+0x164>
        PBUF_POOL_IS_EMPTY();
 800cdc2:	f7ff ff27 	bl	800cc14 <pbuf_pool_is_empty>
        /* free chain so far allocated */
        pbuf_free(p);
 800cdc6:	69f8      	ldr	r0, [r7, #28]
 800cdc8:	f000 fac2 	bl	800d350 <pbuf_free>
        /* bail out unsuccessfully */
        return NULL;
 800cdcc:	2300      	movs	r3, #0
 800cdce:	e0dd      	b.n	800cf8c <pbuf_alloc+0x320>
      }
      q->type = type;
 800cdd0:	68fb      	ldr	r3, [r7, #12]
 800cdd2:	79ba      	ldrb	r2, [r7, #6]
 800cdd4:	731a      	strb	r2, [r3, #12]
      q->flags = 0;
 800cdd6:	68fb      	ldr	r3, [r7, #12]
 800cdd8:	2200      	movs	r2, #0
 800cdda:	735a      	strb	r2, [r3, #13]
      q->next = NULL;
 800cddc:	68fb      	ldr	r3, [r7, #12]
 800cdde:	2200      	movs	r2, #0
 800cde0:	601a      	str	r2, [r3, #0]
      /* make previous pbuf point to this pbuf */
      r->next = q;
 800cde2:	69bb      	ldr	r3, [r7, #24]
 800cde4:	68fa      	ldr	r2, [r7, #12]
 800cde6:	601a      	str	r2, [r3, #0]
      /* set total length of this pbuf and next in chain */
      LWIP_ASSERT("rem_len < max_u16_t", rem_len < 0xffff);
 800cde8:	693b      	ldr	r3, [r7, #16]
 800cdea:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800cdee:	4293      	cmp	r3, r2
 800cdf0:	dd06      	ble.n	800ce00 <pbuf_alloc+0x194>
 800cdf2:	4b58      	ldr	r3, [pc, #352]	; (800cf54 <pbuf_alloc+0x2e8>)
 800cdf4:	f44f 72a6 	mov.w	r2, #332	; 0x14c
 800cdf8:	495c      	ldr	r1, [pc, #368]	; (800cf6c <pbuf_alloc+0x300>)
 800cdfa:	4858      	ldr	r0, [pc, #352]	; (800cf5c <pbuf_alloc+0x2f0>)
 800cdfc:	f00b fc24 	bl	8018648 <iprintf>
      q->tot_len = (u16_t)rem_len;
 800ce00:	693b      	ldr	r3, [r7, #16]
 800ce02:	b29a      	uxth	r2, r3
 800ce04:	68fb      	ldr	r3, [r7, #12]
 800ce06:	811a      	strh	r2, [r3, #8]
      /* this pbuf length is pool size, unless smaller sized tail */
      q->len = LWIP_MIN((u16_t)rem_len, PBUF_POOL_BUFSIZE_ALIGNED);
 800ce08:	693b      	ldr	r3, [r7, #16]
 800ce0a:	b29b      	uxth	r3, r3
 800ce0c:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 800ce10:	bf28      	it	cs
 800ce12:	f44f 7314 	movcs.w	r3, #592	; 0x250
 800ce16:	b29a      	uxth	r2, r3
 800ce18:	68fb      	ldr	r3, [r7, #12]
 800ce1a:	815a      	strh	r2, [r3, #10]
      q->payload = (void *)((u8_t *)q + SIZEOF_STRUCT_PBUF);
 800ce1c:	68fb      	ldr	r3, [r7, #12]
 800ce1e:	f103 0210 	add.w	r2, r3, #16
 800ce22:	68fb      	ldr	r3, [r7, #12]
 800ce24:	605a      	str	r2, [r3, #4]
      LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 800ce26:	68fb      	ldr	r3, [r7, #12]
 800ce28:	685b      	ldr	r3, [r3, #4]
 800ce2a:	f003 0303 	and.w	r3, r3, #3
 800ce2e:	2b00      	cmp	r3, #0
 800ce30:	d006      	beq.n	800ce40 <pbuf_alloc+0x1d4>
 800ce32:	4b48      	ldr	r3, [pc, #288]	; (800cf54 <pbuf_alloc+0x2e8>)
 800ce34:	f44f 72a9 	mov.w	r2, #338	; 0x152
 800ce38:	494d      	ldr	r1, [pc, #308]	; (800cf70 <pbuf_alloc+0x304>)
 800ce3a:	4848      	ldr	r0, [pc, #288]	; (800cf5c <pbuf_alloc+0x2f0>)
 800ce3c:	f00b fc04 	bl	8018648 <iprintf>
              ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
      LWIP_ASSERT("check p->payload + p->len does not overflow pbuf",
 800ce40:	69fb      	ldr	r3, [r7, #28]
 800ce42:	685b      	ldr	r3, [r3, #4]
 800ce44:	69fa      	ldr	r2, [r7, #28]
 800ce46:	8952      	ldrh	r2, [r2, #10]
 800ce48:	441a      	add	r2, r3
 800ce4a:	69fb      	ldr	r3, [r7, #28]
 800ce4c:	f503 7318 	add.w	r3, r3, #608	; 0x260
 800ce50:	429a      	cmp	r2, r3
 800ce52:	d906      	bls.n	800ce62 <pbuf_alloc+0x1f6>
 800ce54:	4b3f      	ldr	r3, [pc, #252]	; (800cf54 <pbuf_alloc+0x2e8>)
 800ce56:	f240 1255 	movw	r2, #341	; 0x155
 800ce5a:	4942      	ldr	r1, [pc, #264]	; (800cf64 <pbuf_alloc+0x2f8>)
 800ce5c:	483f      	ldr	r0, [pc, #252]	; (800cf5c <pbuf_alloc+0x2f0>)
 800ce5e:	f00b fbf3 	bl	8018648 <iprintf>
                  ((u8_t*)p->payload + p->len <=
                   (u8_t*)p + SIZEOF_STRUCT_PBUF + PBUF_POOL_BUFSIZE_ALIGNED));
      q->ref = 1;
 800ce62:	68fb      	ldr	r3, [r7, #12]
 800ce64:	2201      	movs	r2, #1
 800ce66:	81da      	strh	r2, [r3, #14]
      /* calculate remaining length to be allocated */
      rem_len -= q->len;
 800ce68:	68fb      	ldr	r3, [r7, #12]
 800ce6a:	895b      	ldrh	r3, [r3, #10]
 800ce6c:	461a      	mov	r2, r3
 800ce6e:	693b      	ldr	r3, [r7, #16]
 800ce70:	1a9b      	subs	r3, r3, r2
 800ce72:	613b      	str	r3, [r7, #16]
      /* remember this pbuf for linkage in next iteration */
      r = q;
 800ce74:	68fb      	ldr	r3, [r7, #12]
 800ce76:	61bb      	str	r3, [r7, #24]
    while (rem_len > 0) {
 800ce78:	693b      	ldr	r3, [r7, #16]
 800ce7a:	2b00      	cmp	r3, #0
 800ce7c:	dc9a      	bgt.n	800cdb4 <pbuf_alloc+0x148>
    }
    /* end of chain */
    /*r->next = NULL;*/

    break;
 800ce7e:	e07e      	b.n	800cf7e <pbuf_alloc+0x312>
  case PBUF_RAM:
    {
      mem_size_t alloc_len = LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF + offset) + LWIP_MEM_ALIGN_SIZE(length);
 800ce80:	8afb      	ldrh	r3, [r7, #22]
 800ce82:	3313      	adds	r3, #19
 800ce84:	b29b      	uxth	r3, r3
 800ce86:	f023 0303 	bic.w	r3, r3, #3
 800ce8a:	b29a      	uxth	r2, r3
 800ce8c:	88bb      	ldrh	r3, [r7, #4]
 800ce8e:	3303      	adds	r3, #3
 800ce90:	b29b      	uxth	r3, r3
 800ce92:	f023 0303 	bic.w	r3, r3, #3
 800ce96:	b29b      	uxth	r3, r3
 800ce98:	4413      	add	r3, r2
 800ce9a:	817b      	strh	r3, [r7, #10]
      
      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if (alloc_len < LWIP_MEM_ALIGN_SIZE(length)) {
 800ce9c:	897a      	ldrh	r2, [r7, #10]
 800ce9e:	88bb      	ldrh	r3, [r7, #4]
 800cea0:	3303      	adds	r3, #3
 800cea2:	f023 0303 	bic.w	r3, r3, #3
 800cea6:	429a      	cmp	r2, r3
 800cea8:	d201      	bcs.n	800ceae <pbuf_alloc+0x242>
        return NULL;
 800ceaa:	2300      	movs	r3, #0
 800ceac:	e06e      	b.n	800cf8c <pbuf_alloc+0x320>
      }
    
      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf*)mem_malloc(alloc_len);
 800ceae:	897b      	ldrh	r3, [r7, #10]
 800ceb0:	4618      	mov	r0, r3
 800ceb2:	f7ff fb29 	bl	800c508 <mem_malloc>
 800ceb6:	61f8      	str	r0, [r7, #28]
    }

    if (p == NULL) {
 800ceb8:	69fb      	ldr	r3, [r7, #28]
 800ceba:	2b00      	cmp	r3, #0
 800cebc:	d101      	bne.n	800cec2 <pbuf_alloc+0x256>
      return NULL;
 800cebe:	2300      	movs	r3, #0
 800cec0:	e064      	b.n	800cf8c <pbuf_alloc+0x320>
    }
    /* Set up internal structure of the pbuf. */
    p->payload = LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset));
 800cec2:	8afb      	ldrh	r3, [r7, #22]
 800cec4:	3310      	adds	r3, #16
 800cec6:	69fa      	ldr	r2, [r7, #28]
 800cec8:	4413      	add	r3, r2
 800ceca:	3303      	adds	r3, #3
 800cecc:	f023 0303 	bic.w	r3, r3, #3
 800ced0:	461a      	mov	r2, r3
 800ced2:	69fb      	ldr	r3, [r7, #28]
 800ced4:	605a      	str	r2, [r3, #4]
    p->len = p->tot_len = length;
 800ced6:	69fb      	ldr	r3, [r7, #28]
 800ced8:	88ba      	ldrh	r2, [r7, #4]
 800ceda:	811a      	strh	r2, [r3, #8]
 800cedc:	69fb      	ldr	r3, [r7, #28]
 800cede:	891a      	ldrh	r2, [r3, #8]
 800cee0:	69fb      	ldr	r3, [r7, #28]
 800cee2:	815a      	strh	r2, [r3, #10]
    p->next = NULL;
 800cee4:	69fb      	ldr	r3, [r7, #28]
 800cee6:	2200      	movs	r2, #0
 800cee8:	601a      	str	r2, [r3, #0]
    p->type = type;
 800ceea:	69fb      	ldr	r3, [r7, #28]
 800ceec:	79ba      	ldrb	r2, [r7, #6]
 800ceee:	731a      	strb	r2, [r3, #12]

    LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 800cef0:	69fb      	ldr	r3, [r7, #28]
 800cef2:	685b      	ldr	r3, [r3, #4]
 800cef4:	f003 0303 	and.w	r3, r3, #3
 800cef8:	2b00      	cmp	r3, #0
 800cefa:	d03f      	beq.n	800cf7c <pbuf_alloc+0x310>
 800cefc:	4b15      	ldr	r3, [pc, #84]	; (800cf54 <pbuf_alloc+0x2e8>)
 800cefe:	f240 1277 	movw	r2, #375	; 0x177
 800cf02:	491c      	ldr	r1, [pc, #112]	; (800cf74 <pbuf_alloc+0x308>)
 800cf04:	4815      	ldr	r0, [pc, #84]	; (800cf5c <pbuf_alloc+0x2f0>)
 800cf06:	f00b fb9f 	bl	8018648 <iprintf>
           ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
    break;
 800cf0a:	e037      	b.n	800cf7c <pbuf_alloc+0x310>
  /* pbuf references existing (non-volatile static constant) ROM payload? */
  case PBUF_ROM:
  /* pbuf references existing (externally allocated) RAM payload? */
  case PBUF_REF:
    /* only allocate memory for the pbuf structure */
    p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 800cf0c:	200b      	movs	r0, #11
 800cf0e:	f7ff fc6b 	bl	800c7e8 <memp_malloc>
 800cf12:	61f8      	str	r0, [r7, #28]
    if (p == NULL) {
 800cf14:	69fb      	ldr	r3, [r7, #28]
 800cf16:	2b00      	cmp	r3, #0
 800cf18:	d101      	bne.n	800cf1e <pbuf_alloc+0x2b2>
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("pbuf_alloc: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                  (type == PBUF_ROM) ? "ROM" : "REF"));
      return NULL;
 800cf1a:	2300      	movs	r3, #0
 800cf1c:	e036      	b.n	800cf8c <pbuf_alloc+0x320>
    }
    /* caller must set this field properly, afterwards */
    p->payload = NULL;
 800cf1e:	69fb      	ldr	r3, [r7, #28]
 800cf20:	2200      	movs	r2, #0
 800cf22:	605a      	str	r2, [r3, #4]
    p->len = p->tot_len = length;
 800cf24:	69fb      	ldr	r3, [r7, #28]
 800cf26:	88ba      	ldrh	r2, [r7, #4]
 800cf28:	811a      	strh	r2, [r3, #8]
 800cf2a:	69fb      	ldr	r3, [r7, #28]
 800cf2c:	891a      	ldrh	r2, [r3, #8]
 800cf2e:	69fb      	ldr	r3, [r7, #28]
 800cf30:	815a      	strh	r2, [r3, #10]
    p->next = NULL;
 800cf32:	69fb      	ldr	r3, [r7, #28]
 800cf34:	2200      	movs	r2, #0
 800cf36:	601a      	str	r2, [r3, #0]
    p->type = type;
 800cf38:	69fb      	ldr	r3, [r7, #28]
 800cf3a:	79ba      	ldrb	r2, [r7, #6]
 800cf3c:	731a      	strb	r2, [r3, #12]
    break;
 800cf3e:	e01e      	b.n	800cf7e <pbuf_alloc+0x312>
  default:
    LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 800cf40:	4b04      	ldr	r3, [pc, #16]	; (800cf54 <pbuf_alloc+0x2e8>)
 800cf42:	f44f 72c6 	mov.w	r2, #396	; 0x18c
 800cf46:	490c      	ldr	r1, [pc, #48]	; (800cf78 <pbuf_alloc+0x30c>)
 800cf48:	4804      	ldr	r0, [pc, #16]	; (800cf5c <pbuf_alloc+0x2f0>)
 800cf4a:	f00b fb7d 	bl	8018648 <iprintf>
    return NULL;
 800cf4e:	2300      	movs	r3, #0
 800cf50:	e01c      	b.n	800cf8c <pbuf_alloc+0x320>
 800cf52:	bf00      	nop
 800cf54:	08019938 	.word	0x08019938
 800cf58:	08019968 	.word	0x08019968
 800cf5c:	08019984 	.word	0x08019984
 800cf60:	080199ac 	.word	0x080199ac
 800cf64:	080199dc 	.word	0x080199dc
 800cf68:	08019a10 	.word	0x08019a10
 800cf6c:	08019a44 	.word	0x08019a44
 800cf70:	08019a58 	.word	0x08019a58
 800cf74:	08019a88 	.word	0x08019a88
 800cf78:	08019ab4 	.word	0x08019ab4
    break;
 800cf7c:	bf00      	nop
  }
  /* set reference count */
  p->ref = 1;
 800cf7e:	69fb      	ldr	r3, [r7, #28]
 800cf80:	2201      	movs	r2, #1
 800cf82:	81da      	strh	r2, [r3, #14]
  /* set flags */
  p->flags = 0;
 800cf84:	69fb      	ldr	r3, [r7, #28]
 800cf86:	2200      	movs	r2, #0
 800cf88:	735a      	strb	r2, [r3, #13]
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 800cf8a:	69fb      	ldr	r3, [r7, #28]
}
 800cf8c:	4618      	mov	r0, r3
 800cf8e:	3720      	adds	r7, #32
 800cf90:	46bd      	mov	sp, r7
 800cf92:	bd80      	pop	{r7, pc}

0800cf94 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf*
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 800cf94:	b580      	push	{r7, lr}
 800cf96:	b084      	sub	sp, #16
 800cf98:	af00      	add	r7, sp, #0
 800cf9a:	603b      	str	r3, [r7, #0]
 800cf9c:	4603      	mov	r3, r0
 800cf9e:	71fb      	strb	r3, [r7, #7]
 800cfa0:	460b      	mov	r3, r1
 800cfa2:	80bb      	strh	r3, [r7, #4]
 800cfa4:	4613      	mov	r3, r2
 800cfa6:	71bb      	strb	r3, [r7, #6]
  u16_t offset;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  /* determine header offset */
  switch (l) {
 800cfa8:	79fb      	ldrb	r3, [r7, #7]
 800cfaa:	2b04      	cmp	r3, #4
 800cfac:	d81b      	bhi.n	800cfe6 <pbuf_alloced_custom+0x52>
 800cfae:	a201      	add	r2, pc, #4	; (adr r2, 800cfb4 <pbuf_alloced_custom+0x20>)
 800cfb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cfb4:	0800cfc9 	.word	0x0800cfc9
 800cfb8:	0800cfcf 	.word	0x0800cfcf
 800cfbc:	0800cfd5 	.word	0x0800cfd5
 800cfc0:	0800cfdb 	.word	0x0800cfdb
 800cfc4:	0800cfe1 	.word	0x0800cfe1
  case PBUF_TRANSPORT:
    /* add room for transport (often TCP) layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN + PBUF_IP_HLEN + PBUF_TRANSPORT_HLEN;
 800cfc8:	2336      	movs	r3, #54	; 0x36
 800cfca:	81fb      	strh	r3, [r7, #14]
    break;
 800cfcc:	e014      	b.n	800cff8 <pbuf_alloced_custom+0x64>
  case PBUF_IP:
    /* add room for IP layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN + PBUF_IP_HLEN;
 800cfce:	2322      	movs	r3, #34	; 0x22
 800cfd0:	81fb      	strh	r3, [r7, #14]
    break;
 800cfd2:	e011      	b.n	800cff8 <pbuf_alloced_custom+0x64>
  case PBUF_LINK:
    /* add room for link layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN;
 800cfd4:	230e      	movs	r3, #14
 800cfd6:	81fb      	strh	r3, [r7, #14]
    break;
 800cfd8:	e00e      	b.n	800cff8 <pbuf_alloced_custom+0x64>
  case PBUF_RAW_TX:
    /* add room for encapsulating link layer headers (e.g. 802.11) */
    offset = PBUF_LINK_ENCAPSULATION_HLEN;
 800cfda:	2300      	movs	r3, #0
 800cfdc:	81fb      	strh	r3, [r7, #14]
    break;
 800cfde:	e00b      	b.n	800cff8 <pbuf_alloced_custom+0x64>
  case PBUF_RAW:
    offset = 0;
 800cfe0:	2300      	movs	r3, #0
 800cfe2:	81fb      	strh	r3, [r7, #14]
    break;
 800cfe4:	e008      	b.n	800cff8 <pbuf_alloced_custom+0x64>
  default:
    LWIP_ASSERT("pbuf_alloced_custom: bad pbuf layer", 0);
 800cfe6:	4b1d      	ldr	r3, [pc, #116]	; (800d05c <pbuf_alloced_custom+0xc8>)
 800cfe8:	f240 12c5 	movw	r2, #453	; 0x1c5
 800cfec:	491c      	ldr	r1, [pc, #112]	; (800d060 <pbuf_alloced_custom+0xcc>)
 800cfee:	481d      	ldr	r0, [pc, #116]	; (800d064 <pbuf_alloced_custom+0xd0>)
 800cff0:	f00b fb2a 	bl	8018648 <iprintf>
    return NULL;
 800cff4:	2300      	movs	r3, #0
 800cff6:	e02d      	b.n	800d054 <pbuf_alloced_custom+0xc0>
  }

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 800cff8:	89fb      	ldrh	r3, [r7, #14]
 800cffa:	3303      	adds	r3, #3
 800cffc:	f023 0203 	bic.w	r2, r3, #3
 800d000:	88bb      	ldrh	r3, [r7, #4]
 800d002:	441a      	add	r2, r3
 800d004:	8bbb      	ldrh	r3, [r7, #28]
 800d006:	429a      	cmp	r2, r3
 800d008:	d901      	bls.n	800d00e <pbuf_alloced_custom+0x7a>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 800d00a:	2300      	movs	r3, #0
 800d00c:	e022      	b.n	800d054 <pbuf_alloced_custom+0xc0>
  }

  p->pbuf.next = NULL;
 800d00e:	683b      	ldr	r3, [r7, #0]
 800d010:	2200      	movs	r2, #0
 800d012:	601a      	str	r2, [r3, #0]
  if (payload_mem != NULL) {
 800d014:	69bb      	ldr	r3, [r7, #24]
 800d016:	2b00      	cmp	r3, #0
 800d018:	d008      	beq.n	800d02c <pbuf_alloced_custom+0x98>
    p->pbuf.payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 800d01a:	89fb      	ldrh	r3, [r7, #14]
 800d01c:	3303      	adds	r3, #3
 800d01e:	f023 0303 	bic.w	r3, r3, #3
 800d022:	69ba      	ldr	r2, [r7, #24]
 800d024:	441a      	add	r2, r3
 800d026:	683b      	ldr	r3, [r7, #0]
 800d028:	605a      	str	r2, [r3, #4]
 800d02a:	e002      	b.n	800d032 <pbuf_alloced_custom+0x9e>
  } else {
    p->pbuf.payload = NULL;
 800d02c:	683b      	ldr	r3, [r7, #0]
 800d02e:	2200      	movs	r2, #0
 800d030:	605a      	str	r2, [r3, #4]
  }
  p->pbuf.flags = PBUF_FLAG_IS_CUSTOM;
 800d032:	683b      	ldr	r3, [r7, #0]
 800d034:	2202      	movs	r2, #2
 800d036:	735a      	strb	r2, [r3, #13]
  p->pbuf.len = p->pbuf.tot_len = length;
 800d038:	683b      	ldr	r3, [r7, #0]
 800d03a:	88ba      	ldrh	r2, [r7, #4]
 800d03c:	811a      	strh	r2, [r3, #8]
 800d03e:	683b      	ldr	r3, [r7, #0]
 800d040:	891a      	ldrh	r2, [r3, #8]
 800d042:	683b      	ldr	r3, [r7, #0]
 800d044:	815a      	strh	r2, [r3, #10]
  p->pbuf.type = type;
 800d046:	683b      	ldr	r3, [r7, #0]
 800d048:	79ba      	ldrb	r2, [r7, #6]
 800d04a:	731a      	strb	r2, [r3, #12]
  p->pbuf.ref = 1;
 800d04c:	683b      	ldr	r3, [r7, #0]
 800d04e:	2201      	movs	r2, #1
 800d050:	81da      	strh	r2, [r3, #14]
  return &p->pbuf;
 800d052:	683b      	ldr	r3, [r7, #0]
}
 800d054:	4618      	mov	r0, r3
 800d056:	3710      	adds	r7, #16
 800d058:	46bd      	mov	sp, r7
 800d05a:	bd80      	pop	{r7, pc}
 800d05c:	08019938 	.word	0x08019938
 800d060:	08019ad0 	.word	0x08019ad0
 800d064:	08019984 	.word	0x08019984

0800d068 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 800d068:	b580      	push	{r7, lr}
 800d06a:	b086      	sub	sp, #24
 800d06c:	af00      	add	r7, sp, #0
 800d06e:	6078      	str	r0, [r7, #4]
 800d070:	460b      	mov	r3, r1
 800d072:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  s32_t grow;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 800d074:	687b      	ldr	r3, [r7, #4]
 800d076:	2b00      	cmp	r3, #0
 800d078:	d106      	bne.n	800d088 <pbuf_realloc+0x20>
 800d07a:	4b4b      	ldr	r3, [pc, #300]	; (800d1a8 <pbuf_realloc+0x140>)
 800d07c:	f240 12f3 	movw	r2, #499	; 0x1f3
 800d080:	494a      	ldr	r1, [pc, #296]	; (800d1ac <pbuf_realloc+0x144>)
 800d082:	484b      	ldr	r0, [pc, #300]	; (800d1b0 <pbuf_realloc+0x148>)
 800d084:	f00b fae0 	bl	8018648 <iprintf>
  LWIP_ASSERT("pbuf_realloc: sane p->type", p->type == PBUF_POOL ||
 800d088:	687b      	ldr	r3, [r7, #4]
 800d08a:	7b1b      	ldrb	r3, [r3, #12]
 800d08c:	2b03      	cmp	r3, #3
 800d08e:	d012      	beq.n	800d0b6 <pbuf_realloc+0x4e>
 800d090:	687b      	ldr	r3, [r7, #4]
 800d092:	7b1b      	ldrb	r3, [r3, #12]
 800d094:	2b01      	cmp	r3, #1
 800d096:	d00e      	beq.n	800d0b6 <pbuf_realloc+0x4e>
 800d098:	687b      	ldr	r3, [r7, #4]
 800d09a:	7b1b      	ldrb	r3, [r3, #12]
 800d09c:	2b00      	cmp	r3, #0
 800d09e:	d00a      	beq.n	800d0b6 <pbuf_realloc+0x4e>
 800d0a0:	687b      	ldr	r3, [r7, #4]
 800d0a2:	7b1b      	ldrb	r3, [r3, #12]
 800d0a4:	2b02      	cmp	r3, #2
 800d0a6:	d006      	beq.n	800d0b6 <pbuf_realloc+0x4e>
 800d0a8:	4b3f      	ldr	r3, [pc, #252]	; (800d1a8 <pbuf_realloc+0x140>)
 800d0aa:	f240 12f7 	movw	r2, #503	; 0x1f7
 800d0ae:	4941      	ldr	r1, [pc, #260]	; (800d1b4 <pbuf_realloc+0x14c>)
 800d0b0:	483f      	ldr	r0, [pc, #252]	; (800d1b0 <pbuf_realloc+0x148>)
 800d0b2:	f00b fac9 	bl	8018648 <iprintf>
              p->type == PBUF_ROM ||
              p->type == PBUF_RAM ||
              p->type == PBUF_REF);

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 800d0b6:	687b      	ldr	r3, [r7, #4]
 800d0b8:	891b      	ldrh	r3, [r3, #8]
 800d0ba:	887a      	ldrh	r2, [r7, #2]
 800d0bc:	429a      	cmp	r2, r3
 800d0be:	d26f      	bcs.n	800d1a0 <pbuf_realloc+0x138>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  grow = new_len - p->tot_len;
 800d0c0:	887b      	ldrh	r3, [r7, #2]
 800d0c2:	687a      	ldr	r2, [r7, #4]
 800d0c4:	8912      	ldrh	r2, [r2, #8]
 800d0c6:	1a9b      	subs	r3, r3, r2
 800d0c8:	60fb      	str	r3, [r7, #12]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 800d0ca:	887b      	ldrh	r3, [r7, #2]
 800d0cc:	827b      	strh	r3, [r7, #18]
  q = p;
 800d0ce:	687b      	ldr	r3, [r7, #4]
 800d0d0:	617b      	str	r3, [r7, #20]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 800d0d2:	e025      	b.n	800d120 <pbuf_realloc+0xb8>
    /* decrease remaining length by pbuf length */
    rem_len -= q->len;
 800d0d4:	697b      	ldr	r3, [r7, #20]
 800d0d6:	895b      	ldrh	r3, [r3, #10]
 800d0d8:	8a7a      	ldrh	r2, [r7, #18]
 800d0da:	1ad3      	subs	r3, r2, r3
 800d0dc:	827b      	strh	r3, [r7, #18]
    /* decrease total length indicator */
    LWIP_ASSERT("grow < max_u16_t", grow < 0xffff);
 800d0de:	68fb      	ldr	r3, [r7, #12]
 800d0e0:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800d0e4:	4293      	cmp	r3, r2
 800d0e6:	dd06      	ble.n	800d0f6 <pbuf_realloc+0x8e>
 800d0e8:	4b2f      	ldr	r3, [pc, #188]	; (800d1a8 <pbuf_realloc+0x140>)
 800d0ea:	f240 220b 	movw	r2, #523	; 0x20b
 800d0ee:	4932      	ldr	r1, [pc, #200]	; (800d1b8 <pbuf_realloc+0x150>)
 800d0f0:	482f      	ldr	r0, [pc, #188]	; (800d1b0 <pbuf_realloc+0x148>)
 800d0f2:	f00b faa9 	bl	8018648 <iprintf>
    q->tot_len += (u16_t)grow;
 800d0f6:	697b      	ldr	r3, [r7, #20]
 800d0f8:	891a      	ldrh	r2, [r3, #8]
 800d0fa:	68fb      	ldr	r3, [r7, #12]
 800d0fc:	b29b      	uxth	r3, r3
 800d0fe:	4413      	add	r3, r2
 800d100:	b29a      	uxth	r2, r3
 800d102:	697b      	ldr	r3, [r7, #20]
 800d104:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 800d106:	697b      	ldr	r3, [r7, #20]
 800d108:	681b      	ldr	r3, [r3, #0]
 800d10a:	617b      	str	r3, [r7, #20]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 800d10c:	697b      	ldr	r3, [r7, #20]
 800d10e:	2b00      	cmp	r3, #0
 800d110:	d106      	bne.n	800d120 <pbuf_realloc+0xb8>
 800d112:	4b25      	ldr	r3, [pc, #148]	; (800d1a8 <pbuf_realloc+0x140>)
 800d114:	f240 220f 	movw	r2, #527	; 0x20f
 800d118:	4928      	ldr	r1, [pc, #160]	; (800d1bc <pbuf_realloc+0x154>)
 800d11a:	4825      	ldr	r0, [pc, #148]	; (800d1b0 <pbuf_realloc+0x148>)
 800d11c:	f00b fa94 	bl	8018648 <iprintf>
  while (rem_len > q->len) {
 800d120:	697b      	ldr	r3, [r7, #20]
 800d122:	895b      	ldrh	r3, [r3, #10]
 800d124:	8a7a      	ldrh	r2, [r7, #18]
 800d126:	429a      	cmp	r2, r3
 800d128:	d8d4      	bhi.n	800d0d4 <pbuf_realloc+0x6c>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if ((q->type == PBUF_RAM) && (rem_len != q->len)
 800d12a:	697b      	ldr	r3, [r7, #20]
 800d12c:	7b1b      	ldrb	r3, [r3, #12]
 800d12e:	2b00      	cmp	r3, #0
 800d130:	d122      	bne.n	800d178 <pbuf_realloc+0x110>
 800d132:	697b      	ldr	r3, [r7, #20]
 800d134:	895b      	ldrh	r3, [r3, #10]
 800d136:	8a7a      	ldrh	r2, [r7, #18]
 800d138:	429a      	cmp	r2, r3
 800d13a:	d01d      	beq.n	800d178 <pbuf_realloc+0x110>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 800d13c:	697b      	ldr	r3, [r7, #20]
 800d13e:	7b5b      	ldrb	r3, [r3, #13]
 800d140:	f003 0302 	and.w	r3, r3, #2
 800d144:	2b00      	cmp	r3, #0
 800d146:	d117      	bne.n	800d178 <pbuf_realloc+0x110>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (u16_t)((u8_t *)q->payload - (u8_t *)q) + rem_len);
 800d148:	697b      	ldr	r3, [r7, #20]
 800d14a:	685b      	ldr	r3, [r3, #4]
 800d14c:	461a      	mov	r2, r3
 800d14e:	697b      	ldr	r3, [r7, #20]
 800d150:	1ad3      	subs	r3, r2, r3
 800d152:	b29a      	uxth	r2, r3
 800d154:	8a7b      	ldrh	r3, [r7, #18]
 800d156:	4413      	add	r3, r2
 800d158:	b29b      	uxth	r3, r3
 800d15a:	4619      	mov	r1, r3
 800d15c:	6978      	ldr	r0, [r7, #20]
 800d15e:	f7ff f8e9 	bl	800c334 <mem_trim>
 800d162:	6178      	str	r0, [r7, #20]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 800d164:	697b      	ldr	r3, [r7, #20]
 800d166:	2b00      	cmp	r3, #0
 800d168:	d106      	bne.n	800d178 <pbuf_realloc+0x110>
 800d16a:	4b0f      	ldr	r3, [pc, #60]	; (800d1a8 <pbuf_realloc+0x140>)
 800d16c:	f240 221d 	movw	r2, #541	; 0x21d
 800d170:	4913      	ldr	r1, [pc, #76]	; (800d1c0 <pbuf_realloc+0x158>)
 800d172:	480f      	ldr	r0, [pc, #60]	; (800d1b0 <pbuf_realloc+0x148>)
 800d174:	f00b fa68 	bl	8018648 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 800d178:	697b      	ldr	r3, [r7, #20]
 800d17a:	8a7a      	ldrh	r2, [r7, #18]
 800d17c:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 800d17e:	697b      	ldr	r3, [r7, #20]
 800d180:	895a      	ldrh	r2, [r3, #10]
 800d182:	697b      	ldr	r3, [r7, #20]
 800d184:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 800d186:	697b      	ldr	r3, [r7, #20]
 800d188:	681b      	ldr	r3, [r3, #0]
 800d18a:	2b00      	cmp	r3, #0
 800d18c:	d004      	beq.n	800d198 <pbuf_realloc+0x130>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 800d18e:	697b      	ldr	r3, [r7, #20]
 800d190:	681b      	ldr	r3, [r3, #0]
 800d192:	4618      	mov	r0, r3
 800d194:	f000 f8dc 	bl	800d350 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 800d198:	697b      	ldr	r3, [r7, #20]
 800d19a:	2200      	movs	r2, #0
 800d19c:	601a      	str	r2, [r3, #0]
 800d19e:	e000      	b.n	800d1a2 <pbuf_realloc+0x13a>
    return;
 800d1a0:	bf00      	nop

}
 800d1a2:	3718      	adds	r7, #24
 800d1a4:	46bd      	mov	sp, r7
 800d1a6:	bd80      	pop	{r7, pc}
 800d1a8:	08019938 	.word	0x08019938
 800d1ac:	08019af4 	.word	0x08019af4
 800d1b0:	08019984 	.word	0x08019984
 800d1b4:	08019b0c 	.word	0x08019b0c
 800d1b8:	08019b28 	.word	0x08019b28
 800d1bc:	08019b3c 	.word	0x08019b3c
 800d1c0:	08019b54 	.word	0x08019b54

0800d1c4 <pbuf_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 800d1c4:	b580      	push	{r7, lr}
 800d1c6:	b084      	sub	sp, #16
 800d1c8:	af00      	add	r7, sp, #0
 800d1ca:	6078      	str	r0, [r7, #4]
 800d1cc:	460b      	mov	r3, r1
 800d1ce:	807b      	strh	r3, [r7, #2]
 800d1d0:	4613      	mov	r3, r2
 800d1d2:	707b      	strb	r3, [r7, #1]
  u16_t type;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800d1d4:	687b      	ldr	r3, [r7, #4]
 800d1d6:	2b00      	cmp	r3, #0
 800d1d8:	d106      	bne.n	800d1e8 <pbuf_header_impl+0x24>
 800d1da:	4b46      	ldr	r3, [pc, #280]	; (800d2f4 <pbuf_header_impl+0x130>)
 800d1dc:	f240 223f 	movw	r2, #575	; 0x23f
 800d1e0:	4945      	ldr	r1, [pc, #276]	; (800d2f8 <pbuf_header_impl+0x134>)
 800d1e2:	4846      	ldr	r0, [pc, #280]	; (800d2fc <pbuf_header_impl+0x138>)
 800d1e4:	f00b fa30 	bl	8018648 <iprintf>
  if ((header_size_increment == 0) || (p == NULL)) {
 800d1e8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800d1ec:	2b00      	cmp	r3, #0
 800d1ee:	d002      	beq.n	800d1f6 <pbuf_header_impl+0x32>
 800d1f0:	687b      	ldr	r3, [r7, #4]
 800d1f2:	2b00      	cmp	r3, #0
 800d1f4:	d101      	bne.n	800d1fa <pbuf_header_impl+0x36>
    return 0;
 800d1f6:	2300      	movs	r3, #0
 800d1f8:	e078      	b.n	800d2ec <pbuf_header_impl+0x128>
  }

  if (header_size_increment < 0) {
 800d1fa:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800d1fe:	2b00      	cmp	r3, #0
 800d200:	da10      	bge.n	800d224 <pbuf_header_impl+0x60>
    increment_magnitude = (u16_t)-header_size_increment;
 800d202:	887b      	ldrh	r3, [r7, #2]
 800d204:	425b      	negs	r3, r3
 800d206:	81fb      	strh	r3, [r7, #14]
    /* Check that we aren't going to move off the end of the pbuf */
    LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 800d208:	687b      	ldr	r3, [r7, #4]
 800d20a:	895b      	ldrh	r3, [r3, #10]
 800d20c:	89fa      	ldrh	r2, [r7, #14]
 800d20e:	429a      	cmp	r2, r3
 800d210:	d90a      	bls.n	800d228 <pbuf_header_impl+0x64>
 800d212:	4b38      	ldr	r3, [pc, #224]	; (800d2f4 <pbuf_header_impl+0x130>)
 800d214:	f240 2247 	movw	r2, #583	; 0x247
 800d218:	4939      	ldr	r1, [pc, #228]	; (800d300 <pbuf_header_impl+0x13c>)
 800d21a:	4838      	ldr	r0, [pc, #224]	; (800d2fc <pbuf_header_impl+0x138>)
 800d21c:	f00b fa14 	bl	8018648 <iprintf>
 800d220:	2301      	movs	r3, #1
 800d222:	e063      	b.n	800d2ec <pbuf_header_impl+0x128>
  } else {
    increment_magnitude = (u16_t)header_size_increment;
 800d224:	887b      	ldrh	r3, [r7, #2]
 800d226:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("p->payload - increment_magnitude >= p + SIZEOF_STRUCT_PBUF",
                (u8_t *)p->payload - increment_magnitude >= (u8_t *)p + SIZEOF_STRUCT_PBUF);
#endif
  }

  type = p->type;
 800d228:	687b      	ldr	r3, [r7, #4]
 800d22a:	7b1b      	ldrb	r3, [r3, #12]
 800d22c:	81bb      	strh	r3, [r7, #12]
  /* remember current payload pointer */
  payload = p->payload;
 800d22e:	687b      	ldr	r3, [r7, #4]
 800d230:	685b      	ldr	r3, [r3, #4]
 800d232:	60bb      	str	r3, [r7, #8]

  /* pbuf types containing payloads? */
  if (type == PBUF_RAM || type == PBUF_POOL) {
 800d234:	89bb      	ldrh	r3, [r7, #12]
 800d236:	2b00      	cmp	r3, #0
 800d238:	d002      	beq.n	800d240 <pbuf_header_impl+0x7c>
 800d23a:	89bb      	ldrh	r3, [r7, #12]
 800d23c:	2b03      	cmp	r3, #3
 800d23e:	d112      	bne.n	800d266 <pbuf_header_impl+0xa2>
    /* set new payload pointer */
    p->payload = (u8_t *)p->payload - header_size_increment;
 800d240:	687b      	ldr	r3, [r7, #4]
 800d242:	685a      	ldr	r2, [r3, #4]
 800d244:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800d248:	425b      	negs	r3, r3
 800d24a:	441a      	add	r2, r3
 800d24c:	687b      	ldr	r3, [r7, #4]
 800d24e:	605a      	str	r2, [r3, #4]
    /* boundary check fails? */
    if ((u8_t *)p->payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 800d250:	687b      	ldr	r3, [r7, #4]
 800d252:	685a      	ldr	r2, [r3, #4]
 800d254:	687b      	ldr	r3, [r7, #4]
 800d256:	3310      	adds	r3, #16
 800d258:	429a      	cmp	r2, r3
 800d25a:	d238      	bcs.n	800d2ce <pbuf_header_impl+0x10a>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
        ("pbuf_header: failed as %p < %p (not enough space for new header size)\n",
        (void *)p->payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* restore old payload pointer */
      p->payload = payload;
 800d25c:	687b      	ldr	r3, [r7, #4]
 800d25e:	68ba      	ldr	r2, [r7, #8]
 800d260:	605a      	str	r2, [r3, #4]
      /* bail out unsuccessfully */
      return 1;
 800d262:	2301      	movs	r3, #1
 800d264:	e042      	b.n	800d2ec <pbuf_header_impl+0x128>
    }
  /* pbuf types referring to external payloads? */
  } else if (type == PBUF_REF || type == PBUF_ROM) {
 800d266:	89bb      	ldrh	r3, [r7, #12]
 800d268:	2b02      	cmp	r3, #2
 800d26a:	d002      	beq.n	800d272 <pbuf_header_impl+0xae>
 800d26c:	89bb      	ldrh	r3, [r7, #12]
 800d26e:	2b01      	cmp	r3, #1
 800d270:	d124      	bne.n	800d2bc <pbuf_header_impl+0xf8>
    /* hide a header in the payload? */
    if ((header_size_increment < 0) && (increment_magnitude <= p->len)) {
 800d272:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800d276:	2b00      	cmp	r3, #0
 800d278:	da0d      	bge.n	800d296 <pbuf_header_impl+0xd2>
 800d27a:	687b      	ldr	r3, [r7, #4]
 800d27c:	895b      	ldrh	r3, [r3, #10]
 800d27e:	89fa      	ldrh	r2, [r7, #14]
 800d280:	429a      	cmp	r2, r3
 800d282:	d808      	bhi.n	800d296 <pbuf_header_impl+0xd2>
      /* increase payload pointer */
      p->payload = (u8_t *)p->payload - header_size_increment;
 800d284:	687b      	ldr	r3, [r7, #4]
 800d286:	685a      	ldr	r2, [r3, #4]
 800d288:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800d28c:	425b      	negs	r3, r3
 800d28e:	441a      	add	r2, r3
 800d290:	687b      	ldr	r3, [r7, #4]
 800d292:	605a      	str	r2, [r3, #4]
 800d294:	e011      	b.n	800d2ba <pbuf_header_impl+0xf6>
    } else if ((header_size_increment > 0) && force) {
 800d296:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800d29a:	2b00      	cmp	r3, #0
 800d29c:	dd0b      	ble.n	800d2b6 <pbuf_header_impl+0xf2>
 800d29e:	787b      	ldrb	r3, [r7, #1]
 800d2a0:	2b00      	cmp	r3, #0
 800d2a2:	d008      	beq.n	800d2b6 <pbuf_header_impl+0xf2>
      p->payload = (u8_t *)p->payload - header_size_increment;
 800d2a4:	687b      	ldr	r3, [r7, #4]
 800d2a6:	685a      	ldr	r2, [r3, #4]
 800d2a8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800d2ac:	425b      	negs	r3, r3
 800d2ae:	441a      	add	r2, r3
 800d2b0:	687b      	ldr	r3, [r7, #4]
 800d2b2:	605a      	str	r2, [r3, #4]
 800d2b4:	e001      	b.n	800d2ba <pbuf_header_impl+0xf6>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 800d2b6:	2301      	movs	r3, #1
 800d2b8:	e018      	b.n	800d2ec <pbuf_header_impl+0x128>
    if ((header_size_increment < 0) && (increment_magnitude <= p->len)) {
 800d2ba:	e008      	b.n	800d2ce <pbuf_header_impl+0x10a>
    }
  } else {
    /* Unknown type */
    LWIP_ASSERT("bad pbuf type", 0);
 800d2bc:	4b0d      	ldr	r3, [pc, #52]	; (800d2f4 <pbuf_header_impl+0x130>)
 800d2be:	f240 2277 	movw	r2, #631	; 0x277
 800d2c2:	4910      	ldr	r1, [pc, #64]	; (800d304 <pbuf_header_impl+0x140>)
 800d2c4:	480d      	ldr	r0, [pc, #52]	; (800d2fc <pbuf_header_impl+0x138>)
 800d2c6:	f00b f9bf 	bl	8018648 <iprintf>
    return 1;
 800d2ca:	2301      	movs	r3, #1
 800d2cc:	e00e      	b.n	800d2ec <pbuf_header_impl+0x128>
  }
  /* modify pbuf length fields */
  p->len += header_size_increment;
 800d2ce:	687b      	ldr	r3, [r7, #4]
 800d2d0:	895a      	ldrh	r2, [r3, #10]
 800d2d2:	887b      	ldrh	r3, [r7, #2]
 800d2d4:	4413      	add	r3, r2
 800d2d6:	b29a      	uxth	r2, r3
 800d2d8:	687b      	ldr	r3, [r7, #4]
 800d2da:	815a      	strh	r2, [r3, #10]
  p->tot_len += header_size_increment;
 800d2dc:	687b      	ldr	r3, [r7, #4]
 800d2de:	891a      	ldrh	r2, [r3, #8]
 800d2e0:	887b      	ldrh	r3, [r7, #2]
 800d2e2:	4413      	add	r3, r2
 800d2e4:	b29a      	uxth	r2, r3
 800d2e6:	687b      	ldr	r3, [r7, #4]
 800d2e8:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_header: old %p new %p (%"S16_F")\n",
    (void *)payload, (void *)p->payload, header_size_increment));

  return 0;
 800d2ea:	2300      	movs	r3, #0
}
 800d2ec:	4618      	mov	r0, r3
 800d2ee:	3710      	adds	r7, #16
 800d2f0:	46bd      	mov	sp, r7
 800d2f2:	bd80      	pop	{r7, pc}
 800d2f4:	08019938 	.word	0x08019938
 800d2f8:	08019b70 	.word	0x08019b70
 800d2fc:	08019984 	.word	0x08019984
 800d300:	08019b7c 	.word	0x08019b7c
 800d304:	08019b9c 	.word	0x08019b9c

0800d308 <pbuf_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_header(struct pbuf *p, s16_t header_size_increment)
{
 800d308:	b580      	push	{r7, lr}
 800d30a:	b082      	sub	sp, #8
 800d30c:	af00      	add	r7, sp, #0
 800d30e:	6078      	str	r0, [r7, #4]
 800d310:	460b      	mov	r3, r1
 800d312:	807b      	strh	r3, [r7, #2]
   return pbuf_header_impl(p, header_size_increment, 0);
 800d314:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800d318:	2200      	movs	r2, #0
 800d31a:	4619      	mov	r1, r3
 800d31c:	6878      	ldr	r0, [r7, #4]
 800d31e:	f7ff ff51 	bl	800d1c4 <pbuf_header_impl>
 800d322:	4603      	mov	r3, r0
}
 800d324:	4618      	mov	r0, r3
 800d326:	3708      	adds	r7, #8
 800d328:	46bd      	mov	sp, r7
 800d32a:	bd80      	pop	{r7, pc}

0800d32c <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 800d32c:	b580      	push	{r7, lr}
 800d32e:	b082      	sub	sp, #8
 800d330:	af00      	add	r7, sp, #0
 800d332:	6078      	str	r0, [r7, #4]
 800d334:	460b      	mov	r3, r1
 800d336:	807b      	strh	r3, [r7, #2]
   return pbuf_header_impl(p, header_size_increment, 1);
 800d338:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800d33c:	2201      	movs	r2, #1
 800d33e:	4619      	mov	r1, r3
 800d340:	6878      	ldr	r0, [r7, #4]
 800d342:	f7ff ff3f 	bl	800d1c4 <pbuf_header_impl>
 800d346:	4603      	mov	r3, r0
}
 800d348:	4618      	mov	r0, r3
 800d34a:	3708      	adds	r7, #8
 800d34c:	46bd      	mov	sp, r7
 800d34e:	bd80      	pop	{r7, pc}

0800d350 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 800d350:	b580      	push	{r7, lr}
 800d352:	b088      	sub	sp, #32
 800d354:	af00      	add	r7, sp, #0
 800d356:	6078      	str	r0, [r7, #4]
  u16_t type;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 800d358:	687b      	ldr	r3, [r7, #4]
 800d35a:	2b00      	cmp	r3, #0
 800d35c:	d10b      	bne.n	800d376 <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 800d35e:	687b      	ldr	r3, [r7, #4]
 800d360:	2b00      	cmp	r3, #0
 800d362:	d106      	bne.n	800d372 <pbuf_free+0x22>
 800d364:	4b41      	ldr	r3, [pc, #260]	; (800d46c <pbuf_free+0x11c>)
 800d366:	f240 22d2 	movw	r2, #722	; 0x2d2
 800d36a:	4941      	ldr	r1, [pc, #260]	; (800d470 <pbuf_free+0x120>)
 800d36c:	4841      	ldr	r0, [pc, #260]	; (800d474 <pbuf_free+0x124>)
 800d36e:	f00b f96b 	bl	8018648 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
      ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 800d372:	2300      	movs	r3, #0
 800d374:	e076      	b.n	800d464 <pbuf_free+0x114>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  LWIP_ASSERT("pbuf_free: sane type",
 800d376:	687b      	ldr	r3, [r7, #4]
 800d378:	7b1b      	ldrb	r3, [r3, #12]
 800d37a:	2b00      	cmp	r3, #0
 800d37c:	d012      	beq.n	800d3a4 <pbuf_free+0x54>
 800d37e:	687b      	ldr	r3, [r7, #4]
 800d380:	7b1b      	ldrb	r3, [r3, #12]
 800d382:	2b01      	cmp	r3, #1
 800d384:	d00e      	beq.n	800d3a4 <pbuf_free+0x54>
 800d386:	687b      	ldr	r3, [r7, #4]
 800d388:	7b1b      	ldrb	r3, [r3, #12]
 800d38a:	2b02      	cmp	r3, #2
 800d38c:	d00a      	beq.n	800d3a4 <pbuf_free+0x54>
 800d38e:	687b      	ldr	r3, [r7, #4]
 800d390:	7b1b      	ldrb	r3, [r3, #12]
 800d392:	2b03      	cmp	r3, #3
 800d394:	d006      	beq.n	800d3a4 <pbuf_free+0x54>
 800d396:	4b35      	ldr	r3, [pc, #212]	; (800d46c <pbuf_free+0x11c>)
 800d398:	f240 22de 	movw	r2, #734	; 0x2de
 800d39c:	4936      	ldr	r1, [pc, #216]	; (800d478 <pbuf_free+0x128>)
 800d39e:	4835      	ldr	r0, [pc, #212]	; (800d474 <pbuf_free+0x124>)
 800d3a0:	f00b f952 	bl	8018648 <iprintf>
    p->type == PBUF_RAM || p->type == PBUF_ROM ||
    p->type == PBUF_REF || p->type == PBUF_POOL);

  count = 0;
 800d3a4:	2300      	movs	r3, #0
 800d3a6:	77fb      	strb	r3, [r7, #31]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 800d3a8:	e058      	b.n	800d45c <pbuf_free+0x10c>
    u16_t ref;
    SYS_ARCH_DECL_PROTECT(old_level);
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
 800d3aa:	f00a fb57 	bl	8017a5c <sys_arch_protect>
 800d3ae:	61b8      	str	r0, [r7, #24]
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 800d3b0:	687b      	ldr	r3, [r7, #4]
 800d3b2:	89db      	ldrh	r3, [r3, #14]
 800d3b4:	2b00      	cmp	r3, #0
 800d3b6:	d106      	bne.n	800d3c6 <pbuf_free+0x76>
 800d3b8:	4b2c      	ldr	r3, [pc, #176]	; (800d46c <pbuf_free+0x11c>)
 800d3ba:	f240 22eb 	movw	r2, #747	; 0x2eb
 800d3be:	492f      	ldr	r1, [pc, #188]	; (800d47c <pbuf_free+0x12c>)
 800d3c0:	482c      	ldr	r0, [pc, #176]	; (800d474 <pbuf_free+0x124>)
 800d3c2:	f00b f941 	bl	8018648 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 800d3c6:	687b      	ldr	r3, [r7, #4]
 800d3c8:	89db      	ldrh	r3, [r3, #14]
 800d3ca:	3b01      	subs	r3, #1
 800d3cc:	b29a      	uxth	r2, r3
 800d3ce:	687b      	ldr	r3, [r7, #4]
 800d3d0:	81da      	strh	r2, [r3, #14]
 800d3d2:	687b      	ldr	r3, [r7, #4]
 800d3d4:	89db      	ldrh	r3, [r3, #14]
 800d3d6:	82fb      	strh	r3, [r7, #22]
    SYS_ARCH_UNPROTECT(old_level);
 800d3d8:	69b8      	ldr	r0, [r7, #24]
 800d3da:	f00a fb4d 	bl	8017a78 <sys_arch_unprotect>
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 800d3de:	8afb      	ldrh	r3, [r7, #22]
 800d3e0:	2b00      	cmp	r3, #0
 800d3e2:	d139      	bne.n	800d458 <pbuf_free+0x108>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 800d3e4:	687b      	ldr	r3, [r7, #4]
 800d3e6:	681b      	ldr	r3, [r3, #0]
 800d3e8:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      type = p->type;
 800d3ea:	687b      	ldr	r3, [r7, #4]
 800d3ec:	7b1b      	ldrb	r3, [r3, #12]
 800d3ee:	81fb      	strh	r3, [r7, #14]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 800d3f0:	687b      	ldr	r3, [r7, #4]
 800d3f2:	7b5b      	ldrb	r3, [r3, #13]
 800d3f4:	f003 0302 	and.w	r3, r3, #2
 800d3f8:	2b00      	cmp	r3, #0
 800d3fa:	d011      	beq.n	800d420 <pbuf_free+0xd0>
        struct pbuf_custom *pc = (struct pbuf_custom*)p;
 800d3fc:	687b      	ldr	r3, [r7, #4]
 800d3fe:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 800d400:	68bb      	ldr	r3, [r7, #8]
 800d402:	691b      	ldr	r3, [r3, #16]
 800d404:	2b00      	cmp	r3, #0
 800d406:	d106      	bne.n	800d416 <pbuf_free+0xc6>
 800d408:	4b18      	ldr	r3, [pc, #96]	; (800d46c <pbuf_free+0x11c>)
 800d40a:	f240 22f9 	movw	r2, #761	; 0x2f9
 800d40e:	491c      	ldr	r1, [pc, #112]	; (800d480 <pbuf_free+0x130>)
 800d410:	4818      	ldr	r0, [pc, #96]	; (800d474 <pbuf_free+0x124>)
 800d412:	f00b f919 	bl	8018648 <iprintf>
        pc->custom_free_function(p);
 800d416:	68bb      	ldr	r3, [r7, #8]
 800d418:	691b      	ldr	r3, [r3, #16]
 800d41a:	6878      	ldr	r0, [r7, #4]
 800d41c:	4798      	blx	r3
 800d41e:	e015      	b.n	800d44c <pbuf_free+0xfc>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (type == PBUF_POOL) {
 800d420:	89fb      	ldrh	r3, [r7, #14]
 800d422:	2b03      	cmp	r3, #3
 800d424:	d104      	bne.n	800d430 <pbuf_free+0xe0>
          memp_free(MEMP_PBUF_POOL, p);
 800d426:	6879      	ldr	r1, [r7, #4]
 800d428:	200c      	movs	r0, #12
 800d42a:	f7ff fa2f 	bl	800c88c <memp_free>
 800d42e:	e00d      	b.n	800d44c <pbuf_free+0xfc>
        /* is this a ROM or RAM referencing pbuf? */
        } else if (type == PBUF_ROM || type == PBUF_REF) {
 800d430:	89fb      	ldrh	r3, [r7, #14]
 800d432:	2b01      	cmp	r3, #1
 800d434:	d002      	beq.n	800d43c <pbuf_free+0xec>
 800d436:	89fb      	ldrh	r3, [r7, #14]
 800d438:	2b02      	cmp	r3, #2
 800d43a:	d104      	bne.n	800d446 <pbuf_free+0xf6>
          memp_free(MEMP_PBUF, p);
 800d43c:	6879      	ldr	r1, [r7, #4]
 800d43e:	200b      	movs	r0, #11
 800d440:	f7ff fa24 	bl	800c88c <memp_free>
 800d444:	e002      	b.n	800d44c <pbuf_free+0xfc>
        /* type == PBUF_RAM */
        } else {
          mem_free(p);
 800d446:	6878      	ldr	r0, [r7, #4]
 800d448:	f7fe ff06 	bl	800c258 <mem_free>
        }
      }
      count++;
 800d44c:	7ffb      	ldrb	r3, [r7, #31]
 800d44e:	3301      	adds	r3, #1
 800d450:	77fb      	strb	r3, [r7, #31]
      /* proceed to next pbuf */
      p = q;
 800d452:	693b      	ldr	r3, [r7, #16]
 800d454:	607b      	str	r3, [r7, #4]
 800d456:	e001      	b.n	800d45c <pbuf_free+0x10c>
    /* p->ref > 0, this pbuf is still referenced to */
    /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, ref));
      /* stop walking through the chain */
      p = NULL;
 800d458:	2300      	movs	r3, #0
 800d45a:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800d45c:	687b      	ldr	r3, [r7, #4]
 800d45e:	2b00      	cmp	r3, #0
 800d460:	d1a3      	bne.n	800d3aa <pbuf_free+0x5a>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 800d462:	7ffb      	ldrb	r3, [r7, #31]
}
 800d464:	4618      	mov	r0, r3
 800d466:	3720      	adds	r7, #32
 800d468:	46bd      	mov	sp, r7
 800d46a:	bd80      	pop	{r7, pc}
 800d46c:	08019938 	.word	0x08019938
 800d470:	08019b70 	.word	0x08019b70
 800d474:	08019984 	.word	0x08019984
 800d478:	08019bac 	.word	0x08019bac
 800d47c:	08019bc4 	.word	0x08019bc4
 800d480:	08019bdc 	.word	0x08019bdc

0800d484 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 800d484:	b480      	push	{r7}
 800d486:	b085      	sub	sp, #20
 800d488:	af00      	add	r7, sp, #0
 800d48a:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 800d48c:	2300      	movs	r3, #0
 800d48e:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 800d490:	e005      	b.n	800d49e <pbuf_clen+0x1a>
    ++len;
 800d492:	89fb      	ldrh	r3, [r7, #14]
 800d494:	3301      	adds	r3, #1
 800d496:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 800d498:	687b      	ldr	r3, [r7, #4]
 800d49a:	681b      	ldr	r3, [r3, #0]
 800d49c:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800d49e:	687b      	ldr	r3, [r7, #4]
 800d4a0:	2b00      	cmp	r3, #0
 800d4a2:	d1f6      	bne.n	800d492 <pbuf_clen+0xe>
  }
  return len;
 800d4a4:	89fb      	ldrh	r3, [r7, #14]
}
 800d4a6:	4618      	mov	r0, r3
 800d4a8:	3714      	adds	r7, #20
 800d4aa:	46bd      	mov	sp, r7
 800d4ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4b0:	4770      	bx	lr
	...

0800d4b4 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 800d4b4:	b580      	push	{r7, lr}
 800d4b6:	b084      	sub	sp, #16
 800d4b8:	af00      	add	r7, sp, #0
 800d4ba:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 800d4bc:	687b      	ldr	r3, [r7, #4]
 800d4be:	2b00      	cmp	r3, #0
 800d4c0:	d016      	beq.n	800d4f0 <pbuf_ref+0x3c>
    SYS_ARCH_INC(p->ref, 1);
 800d4c2:	f00a facb 	bl	8017a5c <sys_arch_protect>
 800d4c6:	60f8      	str	r0, [r7, #12]
 800d4c8:	687b      	ldr	r3, [r7, #4]
 800d4ca:	89db      	ldrh	r3, [r3, #14]
 800d4cc:	3301      	adds	r3, #1
 800d4ce:	b29a      	uxth	r2, r3
 800d4d0:	687b      	ldr	r3, [r7, #4]
 800d4d2:	81da      	strh	r2, [r3, #14]
 800d4d4:	68f8      	ldr	r0, [r7, #12]
 800d4d6:	f00a facf 	bl	8017a78 <sys_arch_unprotect>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 800d4da:	687b      	ldr	r3, [r7, #4]
 800d4dc:	89db      	ldrh	r3, [r3, #14]
 800d4de:	2b00      	cmp	r3, #0
 800d4e0:	d106      	bne.n	800d4f0 <pbuf_ref+0x3c>
 800d4e2:	4b05      	ldr	r3, [pc, #20]	; (800d4f8 <pbuf_ref+0x44>)
 800d4e4:	f240 3239 	movw	r2, #825	; 0x339
 800d4e8:	4904      	ldr	r1, [pc, #16]	; (800d4fc <pbuf_ref+0x48>)
 800d4ea:	4805      	ldr	r0, [pc, #20]	; (800d500 <pbuf_ref+0x4c>)
 800d4ec:	f00b f8ac 	bl	8018648 <iprintf>
  }
}
 800d4f0:	bf00      	nop
 800d4f2:	3710      	adds	r7, #16
 800d4f4:	46bd      	mov	sp, r7
 800d4f6:	bd80      	pop	{r7, pc}
 800d4f8:	08019938 	.word	0x08019938
 800d4fc:	08019c00 	.word	0x08019c00
 800d500:	08019984 	.word	0x08019984

0800d504 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 800d504:	b580      	push	{r7, lr}
 800d506:	b084      	sub	sp, #16
 800d508:	af00      	add	r7, sp, #0
 800d50a:	6078      	str	r0, [r7, #4]
 800d50c:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 800d50e:	687b      	ldr	r3, [r7, #4]
 800d510:	2b00      	cmp	r3, #0
 800d512:	d002      	beq.n	800d51a <pbuf_cat+0x16>
 800d514:	683b      	ldr	r3, [r7, #0]
 800d516:	2b00      	cmp	r3, #0
 800d518:	d107      	bne.n	800d52a <pbuf_cat+0x26>
 800d51a:	4b20      	ldr	r3, [pc, #128]	; (800d59c <pbuf_cat+0x98>)
 800d51c:	f240 324d 	movw	r2, #845	; 0x34d
 800d520:	491f      	ldr	r1, [pc, #124]	; (800d5a0 <pbuf_cat+0x9c>)
 800d522:	4820      	ldr	r0, [pc, #128]	; (800d5a4 <pbuf_cat+0xa0>)
 800d524:	f00b f890 	bl	8018648 <iprintf>
 800d528:	e034      	b.n	800d594 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 800d52a:	687b      	ldr	r3, [r7, #4]
 800d52c:	60fb      	str	r3, [r7, #12]
 800d52e:	e00a      	b.n	800d546 <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len += t->tot_len;
 800d530:	68fb      	ldr	r3, [r7, #12]
 800d532:	891a      	ldrh	r2, [r3, #8]
 800d534:	683b      	ldr	r3, [r7, #0]
 800d536:	891b      	ldrh	r3, [r3, #8]
 800d538:	4413      	add	r3, r2
 800d53a:	b29a      	uxth	r2, r3
 800d53c:	68fb      	ldr	r3, [r7, #12]
 800d53e:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 800d540:	68fb      	ldr	r3, [r7, #12]
 800d542:	681b      	ldr	r3, [r3, #0]
 800d544:	60fb      	str	r3, [r7, #12]
 800d546:	68fb      	ldr	r3, [r7, #12]
 800d548:	681b      	ldr	r3, [r3, #0]
 800d54a:	2b00      	cmp	r3, #0
 800d54c:	d1f0      	bne.n	800d530 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 800d54e:	68fb      	ldr	r3, [r7, #12]
 800d550:	891a      	ldrh	r2, [r3, #8]
 800d552:	68fb      	ldr	r3, [r7, #12]
 800d554:	895b      	ldrh	r3, [r3, #10]
 800d556:	429a      	cmp	r2, r3
 800d558:	d006      	beq.n	800d568 <pbuf_cat+0x64>
 800d55a:	4b10      	ldr	r3, [pc, #64]	; (800d59c <pbuf_cat+0x98>)
 800d55c:	f240 3255 	movw	r2, #853	; 0x355
 800d560:	4911      	ldr	r1, [pc, #68]	; (800d5a8 <pbuf_cat+0xa4>)
 800d562:	4810      	ldr	r0, [pc, #64]	; (800d5a4 <pbuf_cat+0xa0>)
 800d564:	f00b f870 	bl	8018648 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 800d568:	68fb      	ldr	r3, [r7, #12]
 800d56a:	681b      	ldr	r3, [r3, #0]
 800d56c:	2b00      	cmp	r3, #0
 800d56e:	d006      	beq.n	800d57e <pbuf_cat+0x7a>
 800d570:	4b0a      	ldr	r3, [pc, #40]	; (800d59c <pbuf_cat+0x98>)
 800d572:	f240 3256 	movw	r2, #854	; 0x356
 800d576:	490d      	ldr	r1, [pc, #52]	; (800d5ac <pbuf_cat+0xa8>)
 800d578:	480a      	ldr	r0, [pc, #40]	; (800d5a4 <pbuf_cat+0xa0>)
 800d57a:	f00b f865 	bl	8018648 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len += t->tot_len;
 800d57e:	68fb      	ldr	r3, [r7, #12]
 800d580:	891a      	ldrh	r2, [r3, #8]
 800d582:	683b      	ldr	r3, [r7, #0]
 800d584:	891b      	ldrh	r3, [r3, #8]
 800d586:	4413      	add	r3, r2
 800d588:	b29a      	uxth	r2, r3
 800d58a:	68fb      	ldr	r3, [r7, #12]
 800d58c:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 800d58e:	68fb      	ldr	r3, [r7, #12]
 800d590:	683a      	ldr	r2, [r7, #0]
 800d592:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 800d594:	3710      	adds	r7, #16
 800d596:	46bd      	mov	sp, r7
 800d598:	bd80      	pop	{r7, pc}
 800d59a:	bf00      	nop
 800d59c:	08019938 	.word	0x08019938
 800d5a0:	08019c14 	.word	0x08019c14
 800d5a4:	08019984 	.word	0x08019984
 800d5a8:	08019c4c 	.word	0x08019c4c
 800d5ac:	08019c7c 	.word	0x08019c7c

0800d5b0 <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 800d5b0:	b580      	push	{r7, lr}
 800d5b2:	b082      	sub	sp, #8
 800d5b4:	af00      	add	r7, sp, #0
 800d5b6:	6078      	str	r0, [r7, #4]
 800d5b8:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
 800d5ba:	6839      	ldr	r1, [r7, #0]
 800d5bc:	6878      	ldr	r0, [r7, #4]
 800d5be:	f7ff ffa1 	bl	800d504 <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 800d5c2:	6838      	ldr	r0, [r7, #0]
 800d5c4:	f7ff ff76 	bl	800d4b4 <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 800d5c8:	bf00      	nop
 800d5ca:	3708      	adds	r7, #8
 800d5cc:	46bd      	mov	sp, r7
 800d5ce:	bd80      	pop	{r7, pc}

0800d5d0 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 800d5d0:	b580      	push	{r7, lr}
 800d5d2:	b084      	sub	sp, #16
 800d5d4:	af00      	add	r7, sp, #0
 800d5d6:	6078      	str	r0, [r7, #4]
 800d5d8:	6039      	str	r1, [r7, #0]
  u16_t offset_to=0, offset_from=0, len;
 800d5da:	2300      	movs	r3, #0
 800d5dc:	81fb      	strh	r3, [r7, #14]
 800d5de:	2300      	movs	r3, #0
 800d5e0:	81bb      	strh	r3, [r7, #12]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
    (const void*)p_to, (const void*)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 800d5e2:	687b      	ldr	r3, [r7, #4]
 800d5e4:	2b00      	cmp	r3, #0
 800d5e6:	d008      	beq.n	800d5fa <pbuf_copy+0x2a>
 800d5e8:	683b      	ldr	r3, [r7, #0]
 800d5ea:	2b00      	cmp	r3, #0
 800d5ec:	d005      	beq.n	800d5fa <pbuf_copy+0x2a>
 800d5ee:	687b      	ldr	r3, [r7, #4]
 800d5f0:	891a      	ldrh	r2, [r3, #8]
 800d5f2:	683b      	ldr	r3, [r7, #0]
 800d5f4:	891b      	ldrh	r3, [r3, #8]
 800d5f6:	429a      	cmp	r2, r3
 800d5f8:	d209      	bcs.n	800d60e <pbuf_copy+0x3e>
 800d5fa:	4b54      	ldr	r3, [pc, #336]	; (800d74c <pbuf_copy+0x17c>)
 800d5fc:	f240 32bd 	movw	r2, #957	; 0x3bd
 800d600:	4953      	ldr	r1, [pc, #332]	; (800d750 <pbuf_copy+0x180>)
 800d602:	4854      	ldr	r0, [pc, #336]	; (800d754 <pbuf_copy+0x184>)
 800d604:	f00b f820 	bl	8018648 <iprintf>
 800d608:	f06f 030f 	mvn.w	r3, #15
 800d60c:	e099      	b.n	800d742 <pbuf_copy+0x172>

  /* iterate through pbuf chain */
  do
  {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 800d60e:	687b      	ldr	r3, [r7, #4]
 800d610:	895b      	ldrh	r3, [r3, #10]
 800d612:	461a      	mov	r2, r3
 800d614:	89fb      	ldrh	r3, [r7, #14]
 800d616:	1ad2      	subs	r2, r2, r3
 800d618:	683b      	ldr	r3, [r7, #0]
 800d61a:	895b      	ldrh	r3, [r3, #10]
 800d61c:	4619      	mov	r1, r3
 800d61e:	89bb      	ldrh	r3, [r7, #12]
 800d620:	1acb      	subs	r3, r1, r3
 800d622:	429a      	cmp	r2, r3
 800d624:	db05      	blt.n	800d632 <pbuf_copy+0x62>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 800d626:	683b      	ldr	r3, [r7, #0]
 800d628:	895a      	ldrh	r2, [r3, #10]
 800d62a:	89bb      	ldrh	r3, [r7, #12]
 800d62c:	1ad3      	subs	r3, r2, r3
 800d62e:	817b      	strh	r3, [r7, #10]
 800d630:	e004      	b.n	800d63c <pbuf_copy+0x6c>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 800d632:	687b      	ldr	r3, [r7, #4]
 800d634:	895a      	ldrh	r2, [r3, #10]
 800d636:	89fb      	ldrh	r3, [r7, #14]
 800d638:	1ad3      	subs	r3, r2, r3
 800d63a:	817b      	strh	r3, [r7, #10]
    }
    MEMCPY((u8_t*)p_to->payload + offset_to, (u8_t*)p_from->payload + offset_from, len);
 800d63c:	687b      	ldr	r3, [r7, #4]
 800d63e:	685a      	ldr	r2, [r3, #4]
 800d640:	89fb      	ldrh	r3, [r7, #14]
 800d642:	18d0      	adds	r0, r2, r3
 800d644:	683b      	ldr	r3, [r7, #0]
 800d646:	685a      	ldr	r2, [r3, #4]
 800d648:	89bb      	ldrh	r3, [r7, #12]
 800d64a:	4413      	add	r3, r2
 800d64c:	897a      	ldrh	r2, [r7, #10]
 800d64e:	4619      	mov	r1, r3
 800d650:	f00a ff3f 	bl	80184d2 <memcpy>
    offset_to += len;
 800d654:	89fa      	ldrh	r2, [r7, #14]
 800d656:	897b      	ldrh	r3, [r7, #10]
 800d658:	4413      	add	r3, r2
 800d65a:	81fb      	strh	r3, [r7, #14]
    offset_from += len;
 800d65c:	89ba      	ldrh	r2, [r7, #12]
 800d65e:	897b      	ldrh	r3, [r7, #10]
 800d660:	4413      	add	r3, r2
 800d662:	81bb      	strh	r3, [r7, #12]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 800d664:	687b      	ldr	r3, [r7, #4]
 800d666:	895b      	ldrh	r3, [r3, #10]
 800d668:	89fa      	ldrh	r2, [r7, #14]
 800d66a:	429a      	cmp	r2, r3
 800d66c:	d906      	bls.n	800d67c <pbuf_copy+0xac>
 800d66e:	4b37      	ldr	r3, [pc, #220]	; (800d74c <pbuf_copy+0x17c>)
 800d670:	f240 32cd 	movw	r2, #973	; 0x3cd
 800d674:	4938      	ldr	r1, [pc, #224]	; (800d758 <pbuf_copy+0x188>)
 800d676:	4837      	ldr	r0, [pc, #220]	; (800d754 <pbuf_copy+0x184>)
 800d678:	f00a ffe6 	bl	8018648 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 800d67c:	683b      	ldr	r3, [r7, #0]
 800d67e:	895b      	ldrh	r3, [r3, #10]
 800d680:	89ba      	ldrh	r2, [r7, #12]
 800d682:	429a      	cmp	r2, r3
 800d684:	d906      	bls.n	800d694 <pbuf_copy+0xc4>
 800d686:	4b31      	ldr	r3, [pc, #196]	; (800d74c <pbuf_copy+0x17c>)
 800d688:	f240 32ce 	movw	r2, #974	; 0x3ce
 800d68c:	4933      	ldr	r1, [pc, #204]	; (800d75c <pbuf_copy+0x18c>)
 800d68e:	4831      	ldr	r0, [pc, #196]	; (800d754 <pbuf_copy+0x184>)
 800d690:	f00a ffda 	bl	8018648 <iprintf>
    if (offset_from >= p_from->len) {
 800d694:	683b      	ldr	r3, [r7, #0]
 800d696:	895b      	ldrh	r3, [r3, #10]
 800d698:	89ba      	ldrh	r2, [r7, #12]
 800d69a:	429a      	cmp	r2, r3
 800d69c:	d304      	bcc.n	800d6a8 <pbuf_copy+0xd8>
      /* on to next p_from (if any) */
      offset_from = 0;
 800d69e:	2300      	movs	r3, #0
 800d6a0:	81bb      	strh	r3, [r7, #12]
      p_from = p_from->next;
 800d6a2:	683b      	ldr	r3, [r7, #0]
 800d6a4:	681b      	ldr	r3, [r3, #0]
 800d6a6:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 800d6a8:	687b      	ldr	r3, [r7, #4]
 800d6aa:	895b      	ldrh	r3, [r3, #10]
 800d6ac:	89fa      	ldrh	r2, [r7, #14]
 800d6ae:	429a      	cmp	r2, r3
 800d6b0:	d114      	bne.n	800d6dc <pbuf_copy+0x10c>
      /* on to next p_to (if any) */
      offset_to = 0;
 800d6b2:	2300      	movs	r3, #0
 800d6b4:	81fb      	strh	r3, [r7, #14]
      p_to = p_to->next;
 800d6b6:	687b      	ldr	r3, [r7, #4]
 800d6b8:	681b      	ldr	r3, [r3, #0]
 800d6ba:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL) , return ERR_ARG;);
 800d6bc:	687b      	ldr	r3, [r7, #4]
 800d6be:	2b00      	cmp	r3, #0
 800d6c0:	d10c      	bne.n	800d6dc <pbuf_copy+0x10c>
 800d6c2:	683b      	ldr	r3, [r7, #0]
 800d6c4:	2b00      	cmp	r3, #0
 800d6c6:	d009      	beq.n	800d6dc <pbuf_copy+0x10c>
 800d6c8:	4b20      	ldr	r3, [pc, #128]	; (800d74c <pbuf_copy+0x17c>)
 800d6ca:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 800d6ce:	4924      	ldr	r1, [pc, #144]	; (800d760 <pbuf_copy+0x190>)
 800d6d0:	4820      	ldr	r0, [pc, #128]	; (800d754 <pbuf_copy+0x184>)
 800d6d2:	f00a ffb9 	bl	8018648 <iprintf>
 800d6d6:	f06f 030f 	mvn.w	r3, #15
 800d6da:	e032      	b.n	800d742 <pbuf_copy+0x172>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 800d6dc:	683b      	ldr	r3, [r7, #0]
 800d6de:	2b00      	cmp	r3, #0
 800d6e0:	d013      	beq.n	800d70a <pbuf_copy+0x13a>
 800d6e2:	683b      	ldr	r3, [r7, #0]
 800d6e4:	895a      	ldrh	r2, [r3, #10]
 800d6e6:	683b      	ldr	r3, [r7, #0]
 800d6e8:	891b      	ldrh	r3, [r3, #8]
 800d6ea:	429a      	cmp	r2, r3
 800d6ec:	d10d      	bne.n	800d70a <pbuf_copy+0x13a>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800d6ee:	683b      	ldr	r3, [r7, #0]
 800d6f0:	681b      	ldr	r3, [r3, #0]
 800d6f2:	2b00      	cmp	r3, #0
 800d6f4:	d009      	beq.n	800d70a <pbuf_copy+0x13a>
 800d6f6:	4b15      	ldr	r3, [pc, #84]	; (800d74c <pbuf_copy+0x17c>)
 800d6f8:	f240 32de 	movw	r2, #990	; 0x3de
 800d6fc:	4919      	ldr	r1, [pc, #100]	; (800d764 <pbuf_copy+0x194>)
 800d6fe:	4815      	ldr	r0, [pc, #84]	; (800d754 <pbuf_copy+0x184>)
 800d700:	f00a ffa2 	bl	8018648 <iprintf>
 800d704:	f06f 0305 	mvn.w	r3, #5
 800d708:	e01b      	b.n	800d742 <pbuf_copy+0x172>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 800d70a:	687b      	ldr	r3, [r7, #4]
 800d70c:	2b00      	cmp	r3, #0
 800d70e:	d013      	beq.n	800d738 <pbuf_copy+0x168>
 800d710:	687b      	ldr	r3, [r7, #4]
 800d712:	895a      	ldrh	r2, [r3, #10]
 800d714:	687b      	ldr	r3, [r7, #4]
 800d716:	891b      	ldrh	r3, [r3, #8]
 800d718:	429a      	cmp	r2, r3
 800d71a:	d10d      	bne.n	800d738 <pbuf_copy+0x168>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800d71c:	687b      	ldr	r3, [r7, #4]
 800d71e:	681b      	ldr	r3, [r3, #0]
 800d720:	2b00      	cmp	r3, #0
 800d722:	d009      	beq.n	800d738 <pbuf_copy+0x168>
 800d724:	4b09      	ldr	r3, [pc, #36]	; (800d74c <pbuf_copy+0x17c>)
 800d726:	f240 32e3 	movw	r2, #995	; 0x3e3
 800d72a:	490e      	ldr	r1, [pc, #56]	; (800d764 <pbuf_copy+0x194>)
 800d72c:	4809      	ldr	r0, [pc, #36]	; (800d754 <pbuf_copy+0x184>)
 800d72e:	f00a ff8b 	bl	8018648 <iprintf>
 800d732:	f06f 0305 	mvn.w	r3, #5
 800d736:	e004      	b.n	800d742 <pbuf_copy+0x172>
                  (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 800d738:	683b      	ldr	r3, [r7, #0]
 800d73a:	2b00      	cmp	r3, #0
 800d73c:	f47f af67 	bne.w	800d60e <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 800d740:	2300      	movs	r3, #0
}
 800d742:	4618      	mov	r0, r3
 800d744:	3710      	adds	r7, #16
 800d746:	46bd      	mov	sp, r7
 800d748:	bd80      	pop	{r7, pc}
 800d74a:	bf00      	nop
 800d74c:	08019938 	.word	0x08019938
 800d750:	08019cc8 	.word	0x08019cc8
 800d754:	08019984 	.word	0x08019984
 800d758:	08019cf8 	.word	0x08019cf8
 800d75c:	08019d10 	.word	0x08019d10
 800d760:	08019d2c 	.word	0x08019d2c
 800d764:	08019d3c 	.word	0x08019d3c

0800d768 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 800d768:	b580      	push	{r7, lr}
 800d76a:	b088      	sub	sp, #32
 800d76c:	af00      	add	r7, sp, #0
 800d76e:	60f8      	str	r0, [r7, #12]
 800d770:	60b9      	str	r1, [r7, #8]
 800d772:	4611      	mov	r1, r2
 800d774:	461a      	mov	r2, r3
 800d776:	460b      	mov	r3, r1
 800d778:	80fb      	strh	r3, [r7, #6]
 800d77a:	4613      	mov	r3, r2
 800d77c:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left;
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 800d77e:	2300      	movs	r3, #0
 800d780:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 800d782:	68fb      	ldr	r3, [r7, #12]
 800d784:	2b00      	cmp	r3, #0
 800d786:	d108      	bne.n	800d79a <pbuf_copy_partial+0x32>
 800d788:	4b30      	ldr	r3, [pc, #192]	; (800d84c <pbuf_copy_partial+0xe4>)
 800d78a:	f240 32fe 	movw	r2, #1022	; 0x3fe
 800d78e:	4930      	ldr	r1, [pc, #192]	; (800d850 <pbuf_copy_partial+0xe8>)
 800d790:	4830      	ldr	r0, [pc, #192]	; (800d854 <pbuf_copy_partial+0xec>)
 800d792:	f00a ff59 	bl	8018648 <iprintf>
 800d796:	2300      	movs	r3, #0
 800d798:	e054      	b.n	800d844 <pbuf_copy_partial+0xdc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 800d79a:	68bb      	ldr	r3, [r7, #8]
 800d79c:	2b00      	cmp	r3, #0
 800d79e:	d108      	bne.n	800d7b2 <pbuf_copy_partial+0x4a>
 800d7a0:	4b2a      	ldr	r3, [pc, #168]	; (800d84c <pbuf_copy_partial+0xe4>)
 800d7a2:	f240 32ff 	movw	r2, #1023	; 0x3ff
 800d7a6:	492c      	ldr	r1, [pc, #176]	; (800d858 <pbuf_copy_partial+0xf0>)
 800d7a8:	482a      	ldr	r0, [pc, #168]	; (800d854 <pbuf_copy_partial+0xec>)
 800d7aa:	f00a ff4d 	bl	8018648 <iprintf>
 800d7ae:	2300      	movs	r3, #0
 800d7b0:	e048      	b.n	800d844 <pbuf_copy_partial+0xdc>

  left = 0;
 800d7b2:	2300      	movs	r3, #0
 800d7b4:	837b      	strh	r3, [r7, #26]

  if ((buf == NULL) || (dataptr == NULL)) {
 800d7b6:	68fb      	ldr	r3, [r7, #12]
 800d7b8:	2b00      	cmp	r3, #0
 800d7ba:	d002      	beq.n	800d7c2 <pbuf_copy_partial+0x5a>
 800d7bc:	68bb      	ldr	r3, [r7, #8]
 800d7be:	2b00      	cmp	r3, #0
 800d7c0:	d101      	bne.n	800d7c6 <pbuf_copy_partial+0x5e>
    return 0;
 800d7c2:	2300      	movs	r3, #0
 800d7c4:	e03e      	b.n	800d844 <pbuf_copy_partial+0xdc>
  }

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800d7c6:	68fb      	ldr	r3, [r7, #12]
 800d7c8:	61fb      	str	r3, [r7, #28]
 800d7ca:	e034      	b.n	800d836 <pbuf_copy_partial+0xce>
    if ((offset != 0) && (offset >= p->len)) {
 800d7cc:	88bb      	ldrh	r3, [r7, #4]
 800d7ce:	2b00      	cmp	r3, #0
 800d7d0:	d00a      	beq.n	800d7e8 <pbuf_copy_partial+0x80>
 800d7d2:	69fb      	ldr	r3, [r7, #28]
 800d7d4:	895b      	ldrh	r3, [r3, #10]
 800d7d6:	88ba      	ldrh	r2, [r7, #4]
 800d7d8:	429a      	cmp	r2, r3
 800d7da:	d305      	bcc.n	800d7e8 <pbuf_copy_partial+0x80>
      /* don't copy from this buffer -> on to the next */
      offset -= p->len;
 800d7dc:	69fb      	ldr	r3, [r7, #28]
 800d7de:	895b      	ldrh	r3, [r3, #10]
 800d7e0:	88ba      	ldrh	r2, [r7, #4]
 800d7e2:	1ad3      	subs	r3, r2, r3
 800d7e4:	80bb      	strh	r3, [r7, #4]
 800d7e6:	e023      	b.n	800d830 <pbuf_copy_partial+0xc8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = p->len - offset;
 800d7e8:	69fb      	ldr	r3, [r7, #28]
 800d7ea:	895a      	ldrh	r2, [r3, #10]
 800d7ec:	88bb      	ldrh	r3, [r7, #4]
 800d7ee:	1ad3      	subs	r3, r2, r3
 800d7f0:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 800d7f2:	8b3a      	ldrh	r2, [r7, #24]
 800d7f4:	88fb      	ldrh	r3, [r7, #6]
 800d7f6:	429a      	cmp	r2, r3
 800d7f8:	d901      	bls.n	800d7fe <pbuf_copy_partial+0x96>
        buf_copy_len = len;
 800d7fa:	88fb      	ldrh	r3, [r7, #6]
 800d7fc:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char*)dataptr)[left], &((char*)p->payload)[offset], buf_copy_len);
 800d7fe:	8b7b      	ldrh	r3, [r7, #26]
 800d800:	68ba      	ldr	r2, [r7, #8]
 800d802:	18d0      	adds	r0, r2, r3
 800d804:	69fb      	ldr	r3, [r7, #28]
 800d806:	685a      	ldr	r2, [r3, #4]
 800d808:	88bb      	ldrh	r3, [r7, #4]
 800d80a:	4413      	add	r3, r2
 800d80c:	8b3a      	ldrh	r2, [r7, #24]
 800d80e:	4619      	mov	r1, r3
 800d810:	f00a fe5f 	bl	80184d2 <memcpy>
      copied_total += buf_copy_len;
 800d814:	8afa      	ldrh	r2, [r7, #22]
 800d816:	8b3b      	ldrh	r3, [r7, #24]
 800d818:	4413      	add	r3, r2
 800d81a:	82fb      	strh	r3, [r7, #22]
      left += buf_copy_len;
 800d81c:	8b7a      	ldrh	r2, [r7, #26]
 800d81e:	8b3b      	ldrh	r3, [r7, #24]
 800d820:	4413      	add	r3, r2
 800d822:	837b      	strh	r3, [r7, #26]
      len -= buf_copy_len;
 800d824:	88fa      	ldrh	r2, [r7, #6]
 800d826:	8b3b      	ldrh	r3, [r7, #24]
 800d828:	1ad3      	subs	r3, r2, r3
 800d82a:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 800d82c:	2300      	movs	r3, #0
 800d82e:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800d830:	69fb      	ldr	r3, [r7, #28]
 800d832:	681b      	ldr	r3, [r3, #0]
 800d834:	61fb      	str	r3, [r7, #28]
 800d836:	88fb      	ldrh	r3, [r7, #6]
 800d838:	2b00      	cmp	r3, #0
 800d83a:	d002      	beq.n	800d842 <pbuf_copy_partial+0xda>
 800d83c:	69fb      	ldr	r3, [r7, #28]
 800d83e:	2b00      	cmp	r3, #0
 800d840:	d1c4      	bne.n	800d7cc <pbuf_copy_partial+0x64>
    }
  }
  return copied_total;
 800d842:	8afb      	ldrh	r3, [r7, #22]
}
 800d844:	4618      	mov	r0, r3
 800d846:	3720      	adds	r7, #32
 800d848:	46bd      	mov	sp, r7
 800d84a:	bd80      	pop	{r7, pc}
 800d84c:	08019938 	.word	0x08019938
 800d850:	08019d68 	.word	0x08019d68
 800d854:	08019984 	.word	0x08019984
 800d858:	08019d88 	.word	0x08019d88

0800d85c <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 800d85c:	b480      	push	{r7}
 800d85e:	af00      	add	r7, sp, #0
#if LWIP_RANDOMIZE_INITIAL_LOCAL_PORTS && defined(LWIP_RAND)
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
#endif /* LWIP_RANDOMIZE_INITIAL_LOCAL_PORTS && defined(LWIP_RAND) */
}
 800d860:	bf00      	nop
 800d862:	46bd      	mov	sp, r7
 800d864:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d868:	4770      	bx	lr
	...

0800d86c <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 800d86c:	b580      	push	{r7, lr}
 800d86e:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 800d870:	f000 ff80 	bl	800e774 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 800d874:	4b07      	ldr	r3, [pc, #28]	; (800d894 <tcp_tmr+0x28>)
 800d876:	781b      	ldrb	r3, [r3, #0]
 800d878:	3301      	adds	r3, #1
 800d87a:	b2da      	uxtb	r2, r3
 800d87c:	4b05      	ldr	r3, [pc, #20]	; (800d894 <tcp_tmr+0x28>)
 800d87e:	701a      	strb	r2, [r3, #0]
 800d880:	4b04      	ldr	r3, [pc, #16]	; (800d894 <tcp_tmr+0x28>)
 800d882:	781b      	ldrb	r3, [r3, #0]
 800d884:	f003 0301 	and.w	r3, r3, #1
 800d888:	2b00      	cmp	r3, #0
 800d88a:	d001      	beq.n	800d890 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 800d88c:	f000 fcb2 	bl	800e1f4 <tcp_slowtmr>
  }
}
 800d890:	bf00      	nop
 800d892:	bd80      	pop	{r7, pc}
 800d894:	20004211 	.word	0x20004211

0800d898 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 800d898:	b480      	push	{r7}
 800d89a:	b085      	sub	sp, #20
 800d89c:	af00      	add	r7, sp, #0
 800d89e:	6078      	str	r0, [r7, #4]
 800d8a0:	6039      	str	r1, [r7, #0]
   struct tcp_pcb *pcb;
   for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800d8a2:	687b      	ldr	r3, [r7, #4]
 800d8a4:	60fb      	str	r3, [r7, #12]
 800d8a6:	e00a      	b.n	800d8be <tcp_remove_listener+0x26>
      if (pcb->listener == lpcb) {
 800d8a8:	68fb      	ldr	r3, [r7, #12]
 800d8aa:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d8ac:	683a      	ldr	r2, [r7, #0]
 800d8ae:	429a      	cmp	r2, r3
 800d8b0:	d102      	bne.n	800d8b8 <tcp_remove_listener+0x20>
         pcb->listener = NULL;
 800d8b2:	68fb      	ldr	r3, [r7, #12]
 800d8b4:	2200      	movs	r2, #0
 800d8b6:	679a      	str	r2, [r3, #120]	; 0x78
   for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800d8b8:	68fb      	ldr	r3, [r7, #12]
 800d8ba:	68db      	ldr	r3, [r3, #12]
 800d8bc:	60fb      	str	r3, [r7, #12]
 800d8be:	68fb      	ldr	r3, [r7, #12]
 800d8c0:	2b00      	cmp	r3, #0
 800d8c2:	d1f1      	bne.n	800d8a8 <tcp_remove_listener+0x10>
      }
   }
}
 800d8c4:	bf00      	nop
 800d8c6:	3714      	adds	r7, #20
 800d8c8:	46bd      	mov	sp, r7
 800d8ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8ce:	4770      	bx	lr

0800d8d0 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 800d8d0:	b580      	push	{r7, lr}
 800d8d2:	b084      	sub	sp, #16
 800d8d4:	af00      	add	r7, sp, #0
 800d8d6:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800d8d8:	687b      	ldr	r3, [r7, #4]
 800d8da:	2b00      	cmp	r3, #0
 800d8dc:	d105      	bne.n	800d8ea <tcp_listen_closed+0x1a>
 800d8de:	4b13      	ldr	r3, [pc, #76]	; (800d92c <tcp_listen_closed+0x5c>)
 800d8e0:	22c0      	movs	r2, #192	; 0xc0
 800d8e2:	4913      	ldr	r1, [pc, #76]	; (800d930 <tcp_listen_closed+0x60>)
 800d8e4:	4813      	ldr	r0, [pc, #76]	; (800d934 <tcp_listen_closed+0x64>)
 800d8e6:	f00a feaf 	bl	8018648 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 800d8ea:	687b      	ldr	r3, [r7, #4]
 800d8ec:	7d1b      	ldrb	r3, [r3, #20]
 800d8ee:	2b01      	cmp	r3, #1
 800d8f0:	d005      	beq.n	800d8fe <tcp_listen_closed+0x2e>
 800d8f2:	4b0e      	ldr	r3, [pc, #56]	; (800d92c <tcp_listen_closed+0x5c>)
 800d8f4:	22c1      	movs	r2, #193	; 0xc1
 800d8f6:	4910      	ldr	r1, [pc, #64]	; (800d938 <tcp_listen_closed+0x68>)
 800d8f8:	480e      	ldr	r0, [pc, #56]	; (800d934 <tcp_listen_closed+0x64>)
 800d8fa:	f00a fea5 	bl	8018648 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800d8fe:	2301      	movs	r3, #1
 800d900:	60fb      	str	r3, [r7, #12]
 800d902:	e00b      	b.n	800d91c <tcp_listen_closed+0x4c>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen*)pcb);
 800d904:	4a0d      	ldr	r2, [pc, #52]	; (800d93c <tcp_listen_closed+0x6c>)
 800d906:	68fb      	ldr	r3, [r7, #12]
 800d908:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d90c:	681b      	ldr	r3, [r3, #0]
 800d90e:	6879      	ldr	r1, [r7, #4]
 800d910:	4618      	mov	r0, r3
 800d912:	f7ff ffc1 	bl	800d898 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800d916:	68fb      	ldr	r3, [r7, #12]
 800d918:	3301      	adds	r3, #1
 800d91a:	60fb      	str	r3, [r7, #12]
 800d91c:	68fb      	ldr	r3, [r7, #12]
 800d91e:	2b03      	cmp	r3, #3
 800d920:	d9f0      	bls.n	800d904 <tcp_listen_closed+0x34>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 800d922:	bf00      	nop
 800d924:	3710      	adds	r7, #16
 800d926:	46bd      	mov	sp, r7
 800d928:	bd80      	pop	{r7, pc}
 800d92a:	bf00      	nop
 800d92c:	08019ebc 	.word	0x08019ebc
 800d930:	08019eec 	.word	0x08019eec
 800d934:	08019ef8 	.word	0x08019ef8
 800d938:	08019f20 	.word	0x08019f20
 800d93c:	0801b888 	.word	0x0801b888

0800d940 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 800d940:	b5b0      	push	{r4, r5, r7, lr}
 800d942:	b086      	sub	sp, #24
 800d944:	af02      	add	r7, sp, #8
 800d946:	6078      	str	r0, [r7, #4]
 800d948:	460b      	mov	r3, r1
 800d94a:	70fb      	strb	r3, [r7, #3]
  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 800d94c:	78fb      	ldrb	r3, [r7, #3]
 800d94e:	2b00      	cmp	r3, #0
 800d950:	d075      	beq.n	800da3e <tcp_close_shutdown+0xfe>
 800d952:	687b      	ldr	r3, [r7, #4]
 800d954:	7d1b      	ldrb	r3, [r3, #20]
 800d956:	2b04      	cmp	r3, #4
 800d958:	d003      	beq.n	800d962 <tcp_close_shutdown+0x22>
 800d95a:	687b      	ldr	r3, [r7, #4]
 800d95c:	7d1b      	ldrb	r3, [r3, #20]
 800d95e:	2b07      	cmp	r3, #7
 800d960:	d16d      	bne.n	800da3e <tcp_close_shutdown+0xfe>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 800d962:	687b      	ldr	r3, [r7, #4]
 800d964:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d966:	2b00      	cmp	r3, #0
 800d968:	d104      	bne.n	800d974 <tcp_close_shutdown+0x34>
 800d96a:	687b      	ldr	r3, [r7, #4]
 800d96c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d96e:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800d972:	d064      	beq.n	800da3e <tcp_close_shutdown+0xfe>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 800d974:	687b      	ldr	r3, [r7, #4]
 800d976:	7e9b      	ldrb	r3, [r3, #26]
 800d978:	f003 0310 	and.w	r3, r3, #16
 800d97c:	2b00      	cmp	r3, #0
 800d97e:	d106      	bne.n	800d98e <tcp_close_shutdown+0x4e>
 800d980:	4b59      	ldr	r3, [pc, #356]	; (800dae8 <tcp_close_shutdown+0x1a8>)
 800d982:	f240 120f 	movw	r2, #271	; 0x10f
 800d986:	4959      	ldr	r1, [pc, #356]	; (800daec <tcp_close_shutdown+0x1ac>)
 800d988:	4859      	ldr	r0, [pc, #356]	; (800daf0 <tcp_close_shutdown+0x1b0>)
 800d98a:	f00a fe5d 	bl	8018648 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800d98e:	687b      	ldr	r3, [r7, #4]
 800d990:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800d992:	687b      	ldr	r3, [r7, #4]
 800d994:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800d996:	687c      	ldr	r4, [r7, #4]
 800d998:	687b      	ldr	r3, [r7, #4]
 800d99a:	1d1d      	adds	r5, r3, #4
 800d99c:	687b      	ldr	r3, [r7, #4]
 800d99e:	8adb      	ldrh	r3, [r3, #22]
 800d9a0:	687a      	ldr	r2, [r7, #4]
 800d9a2:	8b12      	ldrh	r2, [r2, #24]
 800d9a4:	9201      	str	r2, [sp, #4]
 800d9a6:	9300      	str	r3, [sp, #0]
 800d9a8:	462b      	mov	r3, r5
 800d9aa:	4622      	mov	r2, r4
 800d9ac:	f004 feec 	bl	8012788 <tcp_rst>
               pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 800d9b0:	6878      	ldr	r0, [r7, #4]
 800d9b2:	f001 fa1d 	bl	800edf0 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 800d9b6:	4b4f      	ldr	r3, [pc, #316]	; (800daf4 <tcp_close_shutdown+0x1b4>)
 800d9b8:	681b      	ldr	r3, [r3, #0]
 800d9ba:	687a      	ldr	r2, [r7, #4]
 800d9bc:	429a      	cmp	r2, r3
 800d9be:	d105      	bne.n	800d9cc <tcp_close_shutdown+0x8c>
 800d9c0:	4b4c      	ldr	r3, [pc, #304]	; (800daf4 <tcp_close_shutdown+0x1b4>)
 800d9c2:	681b      	ldr	r3, [r3, #0]
 800d9c4:	68db      	ldr	r3, [r3, #12]
 800d9c6:	4a4b      	ldr	r2, [pc, #300]	; (800daf4 <tcp_close_shutdown+0x1b4>)
 800d9c8:	6013      	str	r3, [r2, #0]
 800d9ca:	e013      	b.n	800d9f4 <tcp_close_shutdown+0xb4>
 800d9cc:	4b49      	ldr	r3, [pc, #292]	; (800daf4 <tcp_close_shutdown+0x1b4>)
 800d9ce:	681b      	ldr	r3, [r3, #0]
 800d9d0:	60fb      	str	r3, [r7, #12]
 800d9d2:	e00c      	b.n	800d9ee <tcp_close_shutdown+0xae>
 800d9d4:	68fb      	ldr	r3, [r7, #12]
 800d9d6:	68db      	ldr	r3, [r3, #12]
 800d9d8:	687a      	ldr	r2, [r7, #4]
 800d9da:	429a      	cmp	r2, r3
 800d9dc:	d104      	bne.n	800d9e8 <tcp_close_shutdown+0xa8>
 800d9de:	687b      	ldr	r3, [r7, #4]
 800d9e0:	68da      	ldr	r2, [r3, #12]
 800d9e2:	68fb      	ldr	r3, [r7, #12]
 800d9e4:	60da      	str	r2, [r3, #12]
 800d9e6:	e005      	b.n	800d9f4 <tcp_close_shutdown+0xb4>
 800d9e8:	68fb      	ldr	r3, [r7, #12]
 800d9ea:	68db      	ldr	r3, [r3, #12]
 800d9ec:	60fb      	str	r3, [r7, #12]
 800d9ee:	68fb      	ldr	r3, [r7, #12]
 800d9f0:	2b00      	cmp	r3, #0
 800d9f2:	d1ef      	bne.n	800d9d4 <tcp_close_shutdown+0x94>
 800d9f4:	687b      	ldr	r3, [r7, #4]
 800d9f6:	2200      	movs	r2, #0
 800d9f8:	60da      	str	r2, [r3, #12]
 800d9fa:	4b3f      	ldr	r3, [pc, #252]	; (800daf8 <tcp_close_shutdown+0x1b8>)
 800d9fc:	2201      	movs	r2, #1
 800d9fe:	701a      	strb	r2, [r3, #0]
      if (pcb->state == ESTABLISHED) {
 800da00:	687b      	ldr	r3, [r7, #4]
 800da02:	7d1b      	ldrb	r3, [r3, #20]
 800da04:	2b04      	cmp	r3, #4
 800da06:	d10c      	bne.n	800da22 <tcp_close_shutdown+0xe2>
        /* move to TIME_WAIT since we close actively */
        pcb->state = TIME_WAIT;
 800da08:	687b      	ldr	r3, [r7, #4]
 800da0a:	220a      	movs	r2, #10
 800da0c:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800da0e:	4b3b      	ldr	r3, [pc, #236]	; (800dafc <tcp_close_shutdown+0x1bc>)
 800da10:	681a      	ldr	r2, [r3, #0]
 800da12:	687b      	ldr	r3, [r7, #4]
 800da14:	60da      	str	r2, [r3, #12]
 800da16:	4a39      	ldr	r2, [pc, #228]	; (800dafc <tcp_close_shutdown+0x1bc>)
 800da18:	687b      	ldr	r3, [r7, #4]
 800da1a:	6013      	str	r3, [r2, #0]
 800da1c:	f005 f904 	bl	8012c28 <tcp_timer_needed>
 800da20:	e00b      	b.n	800da3a <tcp_close_shutdown+0xfa>
      } else {
        /* CLOSE_WAIT: deallocate the pcb since we already sent a RST for it */
        if (tcp_input_pcb == pcb) {
 800da22:	4b37      	ldr	r3, [pc, #220]	; (800db00 <tcp_close_shutdown+0x1c0>)
 800da24:	681b      	ldr	r3, [r3, #0]
 800da26:	687a      	ldr	r2, [r7, #4]
 800da28:	429a      	cmp	r2, r3
 800da2a:	d102      	bne.n	800da32 <tcp_close_shutdown+0xf2>
          /* prevent using a deallocated pcb: free it from tcp_input later */
          tcp_trigger_input_pcb_close();
 800da2c:	f003 fd44 	bl	80114b8 <tcp_trigger_input_pcb_close>
 800da30:	e003      	b.n	800da3a <tcp_close_shutdown+0xfa>
        } else {
          memp_free(MEMP_TCP_PCB, pcb);
 800da32:	6879      	ldr	r1, [r7, #4]
 800da34:	2001      	movs	r0, #1
 800da36:	f7fe ff29 	bl	800c88c <memp_free>
        }
      }
      return ERR_OK;
 800da3a:	2300      	movs	r3, #0
 800da3c:	e050      	b.n	800dae0 <tcp_close_shutdown+0x1a0>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 800da3e:	687b      	ldr	r3, [r7, #4]
 800da40:	7d1b      	ldrb	r3, [r3, #20]
 800da42:	2b01      	cmp	r3, #1
 800da44:	d02e      	beq.n	800daa4 <tcp_close_shutdown+0x164>
 800da46:	2b02      	cmp	r3, #2
 800da48:	d038      	beq.n	800dabc <tcp_close_shutdown+0x17c>
 800da4a:	2b00      	cmp	r3, #0
 800da4c:	d142      	bne.n	800dad4 <tcp_close_shutdown+0x194>
     * and the user needs some way to free it should the need arise.
     * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
     * or for a pcb that has been used and then entered the CLOSED state
     * is erroneous, but this should never happen as the pcb has in those cases
     * been freed, and so any remaining handles are bogus. */
    if (pcb->local_port != 0) {
 800da4e:	687b      	ldr	r3, [r7, #4]
 800da50:	8adb      	ldrh	r3, [r3, #22]
 800da52:	2b00      	cmp	r3, #0
 800da54:	d021      	beq.n	800da9a <tcp_close_shutdown+0x15a>
      TCP_RMV(&tcp_bound_pcbs, pcb);
 800da56:	4b2b      	ldr	r3, [pc, #172]	; (800db04 <tcp_close_shutdown+0x1c4>)
 800da58:	681b      	ldr	r3, [r3, #0]
 800da5a:	687a      	ldr	r2, [r7, #4]
 800da5c:	429a      	cmp	r2, r3
 800da5e:	d105      	bne.n	800da6c <tcp_close_shutdown+0x12c>
 800da60:	4b28      	ldr	r3, [pc, #160]	; (800db04 <tcp_close_shutdown+0x1c4>)
 800da62:	681b      	ldr	r3, [r3, #0]
 800da64:	68db      	ldr	r3, [r3, #12]
 800da66:	4a27      	ldr	r2, [pc, #156]	; (800db04 <tcp_close_shutdown+0x1c4>)
 800da68:	6013      	str	r3, [r2, #0]
 800da6a:	e013      	b.n	800da94 <tcp_close_shutdown+0x154>
 800da6c:	4b25      	ldr	r3, [pc, #148]	; (800db04 <tcp_close_shutdown+0x1c4>)
 800da6e:	681b      	ldr	r3, [r3, #0]
 800da70:	60bb      	str	r3, [r7, #8]
 800da72:	e00c      	b.n	800da8e <tcp_close_shutdown+0x14e>
 800da74:	68bb      	ldr	r3, [r7, #8]
 800da76:	68db      	ldr	r3, [r3, #12]
 800da78:	687a      	ldr	r2, [r7, #4]
 800da7a:	429a      	cmp	r2, r3
 800da7c:	d104      	bne.n	800da88 <tcp_close_shutdown+0x148>
 800da7e:	687b      	ldr	r3, [r7, #4]
 800da80:	68da      	ldr	r2, [r3, #12]
 800da82:	68bb      	ldr	r3, [r7, #8]
 800da84:	60da      	str	r2, [r3, #12]
 800da86:	e005      	b.n	800da94 <tcp_close_shutdown+0x154>
 800da88:	68bb      	ldr	r3, [r7, #8]
 800da8a:	68db      	ldr	r3, [r3, #12]
 800da8c:	60bb      	str	r3, [r7, #8]
 800da8e:	68bb      	ldr	r3, [r7, #8]
 800da90:	2b00      	cmp	r3, #0
 800da92:	d1ef      	bne.n	800da74 <tcp_close_shutdown+0x134>
 800da94:	687b      	ldr	r3, [r7, #4]
 800da96:	2200      	movs	r2, #0
 800da98:	60da      	str	r2, [r3, #12]
    }
    memp_free(MEMP_TCP_PCB, pcb);
 800da9a:	6879      	ldr	r1, [r7, #4]
 800da9c:	2001      	movs	r0, #1
 800da9e:	f7fe fef5 	bl	800c88c <memp_free>
    break;
 800daa2:	e01c      	b.n	800dade <tcp_close_shutdown+0x19e>
  case LISTEN:
    tcp_listen_closed(pcb);
 800daa4:	6878      	ldr	r0, [r7, #4]
 800daa6:	f7ff ff13 	bl	800d8d0 <tcp_listen_closed>
    tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 800daaa:	6879      	ldr	r1, [r7, #4]
 800daac:	4816      	ldr	r0, [pc, #88]	; (800db08 <tcp_close_shutdown+0x1c8>)
 800daae:	f001 f9e1 	bl	800ee74 <tcp_pcb_remove>
    memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 800dab2:	6879      	ldr	r1, [r7, #4]
 800dab4:	2002      	movs	r0, #2
 800dab6:	f7fe fee9 	bl	800c88c <memp_free>
    break;
 800daba:	e010      	b.n	800dade <tcp_close_shutdown+0x19e>
  case SYN_SENT:
    TCP_PCB_REMOVE_ACTIVE(pcb);
 800dabc:	6879      	ldr	r1, [r7, #4]
 800dabe:	480d      	ldr	r0, [pc, #52]	; (800daf4 <tcp_close_shutdown+0x1b4>)
 800dac0:	f001 f9d8 	bl	800ee74 <tcp_pcb_remove>
 800dac4:	4b0c      	ldr	r3, [pc, #48]	; (800daf8 <tcp_close_shutdown+0x1b8>)
 800dac6:	2201      	movs	r2, #1
 800dac8:	701a      	strb	r2, [r3, #0]
    memp_free(MEMP_TCP_PCB, pcb);
 800daca:	6879      	ldr	r1, [r7, #4]
 800dacc:	2001      	movs	r0, #1
 800dace:	f7fe fedd 	bl	800c88c <memp_free>
    MIB2_STATS_INC(mib2.tcpattemptfails);
    break;
 800dad2:	e004      	b.n	800dade <tcp_close_shutdown+0x19e>
  default:
    return tcp_close_shutdown_fin(pcb);
 800dad4:	6878      	ldr	r0, [r7, #4]
 800dad6:	f000 f819 	bl	800db0c <tcp_close_shutdown_fin>
 800dada:	4603      	mov	r3, r0
 800dadc:	e000      	b.n	800dae0 <tcp_close_shutdown+0x1a0>
  }
  return ERR_OK;
 800dade:	2300      	movs	r3, #0
}
 800dae0:	4618      	mov	r0, r3
 800dae2:	3710      	adds	r7, #16
 800dae4:	46bd      	mov	sp, r7
 800dae6:	bdb0      	pop	{r4, r5, r7, pc}
 800dae8:	08019ebc 	.word	0x08019ebc
 800daec:	08019f38 	.word	0x08019f38
 800daf0:	08019ef8 	.word	0x08019ef8
 800daf4:	2000ac34 	.word	0x2000ac34
 800daf8:	2000ac30 	.word	0x2000ac30
 800dafc:	2000ac44 	.word	0x2000ac44
 800db00:	2000ac48 	.word	0x2000ac48
 800db04:	2000ac40 	.word	0x2000ac40
 800db08:	2000ac3c 	.word	0x2000ac3c

0800db0c <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 800db0c:	b580      	push	{r7, lr}
 800db0e:	b084      	sub	sp, #16
 800db10:	af00      	add	r7, sp, #0
 800db12:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800db14:	687b      	ldr	r3, [r7, #4]
 800db16:	2b00      	cmp	r3, #0
 800db18:	d106      	bne.n	800db28 <tcp_close_shutdown_fin+0x1c>
 800db1a:	4b2c      	ldr	r3, [pc, #176]	; (800dbcc <tcp_close_shutdown_fin+0xc0>)
 800db1c:	f240 124d 	movw	r2, #333	; 0x14d
 800db20:	492b      	ldr	r1, [pc, #172]	; (800dbd0 <tcp_close_shutdown_fin+0xc4>)
 800db22:	482c      	ldr	r0, [pc, #176]	; (800dbd4 <tcp_close_shutdown_fin+0xc8>)
 800db24:	f00a fd90 	bl	8018648 <iprintf>

  switch (pcb->state) {
 800db28:	687b      	ldr	r3, [r7, #4]
 800db2a:	7d1b      	ldrb	r3, [r3, #20]
 800db2c:	2b04      	cmp	r3, #4
 800db2e:	d010      	beq.n	800db52 <tcp_close_shutdown_fin+0x46>
 800db30:	2b07      	cmp	r3, #7
 800db32:	d01b      	beq.n	800db6c <tcp_close_shutdown_fin+0x60>
 800db34:	2b03      	cmp	r3, #3
 800db36:	d126      	bne.n	800db86 <tcp_close_shutdown_fin+0x7a>
  case SYN_RCVD:
    err = tcp_send_fin(pcb);
 800db38:	6878      	ldr	r0, [r7, #4]
 800db3a:	f003 fd49 	bl	80115d0 <tcp_send_fin>
 800db3e:	4603      	mov	r3, r0
 800db40:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 800db42:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800db46:	2b00      	cmp	r3, #0
 800db48:	d11f      	bne.n	800db8a <tcp_close_shutdown_fin+0x7e>
      tcp_backlog_accepted(pcb);
      MIB2_STATS_INC(mib2.tcpattemptfails);
      pcb->state = FIN_WAIT_1;
 800db4a:	687b      	ldr	r3, [r7, #4]
 800db4c:	2205      	movs	r2, #5
 800db4e:	751a      	strb	r2, [r3, #20]
    }
    break;
 800db50:	e01b      	b.n	800db8a <tcp_close_shutdown_fin+0x7e>
  case ESTABLISHED:
    err = tcp_send_fin(pcb);
 800db52:	6878      	ldr	r0, [r7, #4]
 800db54:	f003 fd3c 	bl	80115d0 <tcp_send_fin>
 800db58:	4603      	mov	r3, r0
 800db5a:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 800db5c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800db60:	2b00      	cmp	r3, #0
 800db62:	d114      	bne.n	800db8e <tcp_close_shutdown_fin+0x82>
      MIB2_STATS_INC(mib2.tcpestabresets);
      pcb->state = FIN_WAIT_1;
 800db64:	687b      	ldr	r3, [r7, #4]
 800db66:	2205      	movs	r2, #5
 800db68:	751a      	strb	r2, [r3, #20]
    }
    break;
 800db6a:	e010      	b.n	800db8e <tcp_close_shutdown_fin+0x82>
  case CLOSE_WAIT:
    err = tcp_send_fin(pcb);
 800db6c:	6878      	ldr	r0, [r7, #4]
 800db6e:	f003 fd2f 	bl	80115d0 <tcp_send_fin>
 800db72:	4603      	mov	r3, r0
 800db74:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 800db76:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800db7a:	2b00      	cmp	r3, #0
 800db7c:	d109      	bne.n	800db92 <tcp_close_shutdown_fin+0x86>
      MIB2_STATS_INC(mib2.tcpestabresets);
      pcb->state = LAST_ACK;
 800db7e:	687b      	ldr	r3, [r7, #4]
 800db80:	2209      	movs	r2, #9
 800db82:	751a      	strb	r2, [r3, #20]
    }
    break;
 800db84:	e005      	b.n	800db92 <tcp_close_shutdown_fin+0x86>
  default:
    /* Has already been closed, do nothing. */
    return ERR_OK;
 800db86:	2300      	movs	r3, #0
 800db88:	e01c      	b.n	800dbc4 <tcp_close_shutdown_fin+0xb8>
    break;
 800db8a:	bf00      	nop
 800db8c:	e002      	b.n	800db94 <tcp_close_shutdown_fin+0x88>
    break;
 800db8e:	bf00      	nop
 800db90:	e000      	b.n	800db94 <tcp_close_shutdown_fin+0x88>
    break;
 800db92:	bf00      	nop
  }

  if (err == ERR_OK) {
 800db94:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800db98:	2b00      	cmp	r3, #0
 800db9a:	d103      	bne.n	800dba4 <tcp_close_shutdown_fin+0x98>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 800db9c:	6878      	ldr	r0, [r7, #4]
 800db9e:	f004 fb69 	bl	8012274 <tcp_output>
 800dba2:	e00d      	b.n	800dbc0 <tcp_close_shutdown_fin+0xb4>
  } else if (err == ERR_MEM) {
 800dba4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800dba8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800dbac:	d108      	bne.n	800dbc0 <tcp_close_shutdown_fin+0xb4>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    pcb->flags |= TF_CLOSEPEND;
 800dbae:	687b      	ldr	r3, [r7, #4]
 800dbb0:	7e9b      	ldrb	r3, [r3, #26]
 800dbb2:	f043 0308 	orr.w	r3, r3, #8
 800dbb6:	b2da      	uxtb	r2, r3
 800dbb8:	687b      	ldr	r3, [r7, #4]
 800dbba:	769a      	strb	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 800dbbc:	2300      	movs	r3, #0
 800dbbe:	e001      	b.n	800dbc4 <tcp_close_shutdown_fin+0xb8>
  }
  return err;
 800dbc0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800dbc4:	4618      	mov	r0, r3
 800dbc6:	3710      	adds	r7, #16
 800dbc8:	46bd      	mov	sp, r7
 800dbca:	bd80      	pop	{r7, pc}
 800dbcc:	08019ebc 	.word	0x08019ebc
 800dbd0:	08019eec 	.word	0x08019eec
 800dbd4:	08019ef8 	.word	0x08019ef8

0800dbd8 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 800dbd8:	b580      	push	{r7, lr}
 800dbda:	b082      	sub	sp, #8
 800dbdc:	af00      	add	r7, sp, #0
 800dbde:	6078      	str	r0, [r7, #4]
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));
  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 800dbe0:	687b      	ldr	r3, [r7, #4]
 800dbe2:	7d1b      	ldrb	r3, [r3, #20]
 800dbe4:	2b01      	cmp	r3, #1
 800dbe6:	d006      	beq.n	800dbf6 <tcp_close+0x1e>
    /* Set a flag not to receive any more data... */
    pcb->flags |= TF_RXCLOSED;
 800dbe8:	687b      	ldr	r3, [r7, #4]
 800dbea:	7e9b      	ldrb	r3, [r3, #26]
 800dbec:	f043 0310 	orr.w	r3, r3, #16
 800dbf0:	b2da      	uxtb	r2, r3
 800dbf2:	687b      	ldr	r3, [r7, #4]
 800dbf4:	769a      	strb	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 800dbf6:	2101      	movs	r1, #1
 800dbf8:	6878      	ldr	r0, [r7, #4]
 800dbfa:	f7ff fea1 	bl	800d940 <tcp_close_shutdown>
 800dbfe:	4603      	mov	r3, r0
}
 800dc00:	4618      	mov	r0, r3
 800dc02:	3708      	adds	r7, #8
 800dc04:	46bd      	mov	sp, r7
 800dc06:	bd80      	pop	{r7, pc}

0800dc08 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 800dc08:	b580      	push	{r7, lr}
 800dc0a:	b08c      	sub	sp, #48	; 0x30
 800dc0c:	af02      	add	r7, sp, #8
 800dc0e:	6078      	str	r0, [r7, #4]
 800dc10:	6039      	str	r1, [r7, #0]
  tcp_err_fn errf;
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 800dc12:	687b      	ldr	r3, [r7, #4]
 800dc14:	7d1b      	ldrb	r3, [r3, #20]
 800dc16:	2b01      	cmp	r3, #1
 800dc18:	d106      	bne.n	800dc28 <tcp_abandon+0x20>
 800dc1a:	4b4d      	ldr	r3, [pc, #308]	; (800dd50 <tcp_abandon+0x148>)
 800dc1c:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800dc20:	494c      	ldr	r1, [pc, #304]	; (800dd54 <tcp_abandon+0x14c>)
 800dc22:	484d      	ldr	r0, [pc, #308]	; (800dd58 <tcp_abandon+0x150>)
 800dc24:	f00a fd10 	bl	8018648 <iprintf>
    pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 800dc28:	687b      	ldr	r3, [r7, #4]
 800dc2a:	7d1b      	ldrb	r3, [r3, #20]
 800dc2c:	2b0a      	cmp	r3, #10
 800dc2e:	d108      	bne.n	800dc42 <tcp_abandon+0x3a>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 800dc30:	6879      	ldr	r1, [r7, #4]
 800dc32:	484a      	ldr	r0, [pc, #296]	; (800dd5c <tcp_abandon+0x154>)
 800dc34:	f001 f91e 	bl	800ee74 <tcp_pcb_remove>
    memp_free(MEMP_TCP_PCB, pcb);
 800dc38:	6879      	ldr	r1, [r7, #4]
 800dc3a:	2001      	movs	r0, #1
 800dc3c:	f7fe fe26 	bl	800c88c <memp_free>
    }
    last_state = pcb->state;
    memp_free(MEMP_TCP_PCB, pcb);
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
  }
}
 800dc40:	e081      	b.n	800dd46 <tcp_abandon+0x13e>
    int send_rst = 0;
 800dc42:	2300      	movs	r3, #0
 800dc44:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 800dc46:	2300      	movs	r3, #0
 800dc48:	847b      	strh	r3, [r7, #34]	; 0x22
    seqno = pcb->snd_nxt;
 800dc4a:	687b      	ldr	r3, [r7, #4]
 800dc4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800dc4e:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 800dc50:	687b      	ldr	r3, [r7, #4]
 800dc52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dc54:	617b      	str	r3, [r7, #20]
    errf = pcb->errf;
 800dc56:	687b      	ldr	r3, [r7, #4]
 800dc58:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800dc5c:	613b      	str	r3, [r7, #16]
    errf_arg = pcb->callback_arg;
 800dc5e:	687b      	ldr	r3, [r7, #4]
 800dc60:	691b      	ldr	r3, [r3, #16]
 800dc62:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 800dc64:	687b      	ldr	r3, [r7, #4]
 800dc66:	7d1b      	ldrb	r3, [r3, #20]
 800dc68:	2b00      	cmp	r3, #0
 800dc6a:	d126      	bne.n	800dcba <tcp_abandon+0xb2>
      if (pcb->local_port != 0) {
 800dc6c:	687b      	ldr	r3, [r7, #4]
 800dc6e:	8adb      	ldrh	r3, [r3, #22]
 800dc70:	2b00      	cmp	r3, #0
 800dc72:	d02e      	beq.n	800dcd2 <tcp_abandon+0xca>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800dc74:	4b3a      	ldr	r3, [pc, #232]	; (800dd60 <tcp_abandon+0x158>)
 800dc76:	681b      	ldr	r3, [r3, #0]
 800dc78:	687a      	ldr	r2, [r7, #4]
 800dc7a:	429a      	cmp	r2, r3
 800dc7c:	d105      	bne.n	800dc8a <tcp_abandon+0x82>
 800dc7e:	4b38      	ldr	r3, [pc, #224]	; (800dd60 <tcp_abandon+0x158>)
 800dc80:	681b      	ldr	r3, [r3, #0]
 800dc82:	68db      	ldr	r3, [r3, #12]
 800dc84:	4a36      	ldr	r2, [pc, #216]	; (800dd60 <tcp_abandon+0x158>)
 800dc86:	6013      	str	r3, [r2, #0]
 800dc88:	e013      	b.n	800dcb2 <tcp_abandon+0xaa>
 800dc8a:	4b35      	ldr	r3, [pc, #212]	; (800dd60 <tcp_abandon+0x158>)
 800dc8c:	681b      	ldr	r3, [r3, #0]
 800dc8e:	61fb      	str	r3, [r7, #28]
 800dc90:	e00c      	b.n	800dcac <tcp_abandon+0xa4>
 800dc92:	69fb      	ldr	r3, [r7, #28]
 800dc94:	68db      	ldr	r3, [r3, #12]
 800dc96:	687a      	ldr	r2, [r7, #4]
 800dc98:	429a      	cmp	r2, r3
 800dc9a:	d104      	bne.n	800dca6 <tcp_abandon+0x9e>
 800dc9c:	687b      	ldr	r3, [r7, #4]
 800dc9e:	68da      	ldr	r2, [r3, #12]
 800dca0:	69fb      	ldr	r3, [r7, #28]
 800dca2:	60da      	str	r2, [r3, #12]
 800dca4:	e005      	b.n	800dcb2 <tcp_abandon+0xaa>
 800dca6:	69fb      	ldr	r3, [r7, #28]
 800dca8:	68db      	ldr	r3, [r3, #12]
 800dcaa:	61fb      	str	r3, [r7, #28]
 800dcac:	69fb      	ldr	r3, [r7, #28]
 800dcae:	2b00      	cmp	r3, #0
 800dcb0:	d1ef      	bne.n	800dc92 <tcp_abandon+0x8a>
 800dcb2:	687b      	ldr	r3, [r7, #4]
 800dcb4:	2200      	movs	r2, #0
 800dcb6:	60da      	str	r2, [r3, #12]
 800dcb8:	e00b      	b.n	800dcd2 <tcp_abandon+0xca>
      send_rst = reset;
 800dcba:	683b      	ldr	r3, [r7, #0]
 800dcbc:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 800dcbe:	687b      	ldr	r3, [r7, #4]
 800dcc0:	8adb      	ldrh	r3, [r3, #22]
 800dcc2:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800dcc4:	6879      	ldr	r1, [r7, #4]
 800dcc6:	4827      	ldr	r0, [pc, #156]	; (800dd64 <tcp_abandon+0x15c>)
 800dcc8:	f001 f8d4 	bl	800ee74 <tcp_pcb_remove>
 800dccc:	4b26      	ldr	r3, [pc, #152]	; (800dd68 <tcp_abandon+0x160>)
 800dcce:	2201      	movs	r2, #1
 800dcd0:	701a      	strb	r2, [r3, #0]
    if (pcb->unacked != NULL) {
 800dcd2:	687b      	ldr	r3, [r7, #4]
 800dcd4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800dcd6:	2b00      	cmp	r3, #0
 800dcd8:	d004      	beq.n	800dce4 <tcp_abandon+0xdc>
      tcp_segs_free(pcb->unacked);
 800dcda:	687b      	ldr	r3, [r7, #4]
 800dcdc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800dcde:	4618      	mov	r0, r3
 800dce0:	f000 fe15 	bl	800e90e <tcp_segs_free>
    if (pcb->unsent != NULL) {
 800dce4:	687b      	ldr	r3, [r7, #4]
 800dce6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800dce8:	2b00      	cmp	r3, #0
 800dcea:	d004      	beq.n	800dcf6 <tcp_abandon+0xee>
      tcp_segs_free(pcb->unsent);
 800dcec:	687b      	ldr	r3, [r7, #4]
 800dcee:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800dcf0:	4618      	mov	r0, r3
 800dcf2:	f000 fe0c 	bl	800e90e <tcp_segs_free>
    if (pcb->ooseq != NULL) {
 800dcf6:	687b      	ldr	r3, [r7, #4]
 800dcf8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800dcfa:	2b00      	cmp	r3, #0
 800dcfc:	d004      	beq.n	800dd08 <tcp_abandon+0x100>
      tcp_segs_free(pcb->ooseq);
 800dcfe:	687b      	ldr	r3, [r7, #4]
 800dd00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800dd02:	4618      	mov	r0, r3
 800dd04:	f000 fe03 	bl	800e90e <tcp_segs_free>
    if (send_rst) {
 800dd08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dd0a:	2b00      	cmp	r3, #0
 800dd0c:	d00c      	beq.n	800dd28 <tcp_abandon+0x120>
      tcp_rst(seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 800dd0e:	687a      	ldr	r2, [r7, #4]
 800dd10:	687b      	ldr	r3, [r7, #4]
 800dd12:	1d19      	adds	r1, r3, #4
 800dd14:	687b      	ldr	r3, [r7, #4]
 800dd16:	8b1b      	ldrh	r3, [r3, #24]
 800dd18:	9301      	str	r3, [sp, #4]
 800dd1a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800dd1c:	9300      	str	r3, [sp, #0]
 800dd1e:	460b      	mov	r3, r1
 800dd20:	6979      	ldr	r1, [r7, #20]
 800dd22:	69b8      	ldr	r0, [r7, #24]
 800dd24:	f004 fd30 	bl	8012788 <tcp_rst>
    last_state = pcb->state;
 800dd28:	687b      	ldr	r3, [r7, #4]
 800dd2a:	7d1b      	ldrb	r3, [r3, #20]
 800dd2c:	72fb      	strb	r3, [r7, #11]
    memp_free(MEMP_TCP_PCB, pcb);
 800dd2e:	6879      	ldr	r1, [r7, #4]
 800dd30:	2001      	movs	r0, #1
 800dd32:	f7fe fdab 	bl	800c88c <memp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 800dd36:	693b      	ldr	r3, [r7, #16]
 800dd38:	2b00      	cmp	r3, #0
 800dd3a:	d004      	beq.n	800dd46 <tcp_abandon+0x13e>
 800dd3c:	693b      	ldr	r3, [r7, #16]
 800dd3e:	f06f 010c 	mvn.w	r1, #12
 800dd42:	68f8      	ldr	r0, [r7, #12]
 800dd44:	4798      	blx	r3
}
 800dd46:	bf00      	nop
 800dd48:	3728      	adds	r7, #40	; 0x28
 800dd4a:	46bd      	mov	sp, r7
 800dd4c:	bd80      	pop	{r7, pc}
 800dd4e:	bf00      	nop
 800dd50:	08019ebc 	.word	0x08019ebc
 800dd54:	08019f54 	.word	0x08019f54
 800dd58:	08019ef8 	.word	0x08019ef8
 800dd5c:	2000ac44 	.word	0x2000ac44
 800dd60:	2000ac40 	.word	0x2000ac40
 800dd64:	2000ac34 	.word	0x2000ac34
 800dd68:	2000ac30 	.word	0x2000ac30

0800dd6c <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 800dd6c:	b580      	push	{r7, lr}
 800dd6e:	b082      	sub	sp, #8
 800dd70:	af00      	add	r7, sp, #0
 800dd72:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 800dd74:	2101      	movs	r1, #1
 800dd76:	6878      	ldr	r0, [r7, #4]
 800dd78:	f7ff ff46 	bl	800dc08 <tcp_abandon>
}
 800dd7c:	bf00      	nop
 800dd7e:	3708      	adds	r7, #8
 800dd80:	46bd      	mov	sp, r7
 800dd82:	bd80      	pop	{r7, pc}

0800dd84 <tcp_bind>:
 *         ERR_VAL if bind failed because the PCB is not in a valid state
 *         ERR_OK if bound
 */
err_t
tcp_bind(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 800dd84:	b580      	push	{r7, lr}
 800dd86:	b088      	sub	sp, #32
 800dd88:	af00      	add	r7, sp, #0
 800dd8a:	60f8      	str	r0, [r7, #12]
 800dd8c:	60b9      	str	r1, [r7, #8]
 800dd8e:	4613      	mov	r3, r2
 800dd90:	80fb      	strh	r3, [r7, #6]
  int i;
  int max_pcb_list = NUM_TCP_PCB_LISTS;
 800dd92:	2304      	movs	r3, #4
 800dd94:	617b      	str	r3, [r7, #20]
  struct tcp_pcb *cpcb;

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800dd96:	68bb      	ldr	r3, [r7, #8]
 800dd98:	2b00      	cmp	r3, #0
 800dd9a:	d101      	bne.n	800dda0 <tcp_bind+0x1c>
    ipaddr = IP4_ADDR_ANY;
 800dd9c:	4b3c      	ldr	r3, [pc, #240]	; (800de90 <tcp_bind+0x10c>)
 800dd9e:	60bb      	str	r3, [r7, #8]
  }
#endif /* LWIP_IPV4 */

  /* still need to check for ipaddr == NULL in IPv6 only case */
  if ((pcb == NULL) || (ipaddr == NULL)) {
 800dda0:	68fb      	ldr	r3, [r7, #12]
 800dda2:	2b00      	cmp	r3, #0
 800dda4:	d002      	beq.n	800ddac <tcp_bind+0x28>
 800dda6:	68bb      	ldr	r3, [r7, #8]
 800dda8:	2b00      	cmp	r3, #0
 800ddaa:	d102      	bne.n	800ddb2 <tcp_bind+0x2e>
    return ERR_VAL;
 800ddac:	f06f 0305 	mvn.w	r3, #5
 800ddb0:	e06a      	b.n	800de88 <tcp_bind+0x104>
  }

  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
 800ddb2:	68fb      	ldr	r3, [r7, #12]
 800ddb4:	7d1b      	ldrb	r3, [r3, #20]
 800ddb6:	2b00      	cmp	r3, #0
 800ddb8:	d009      	beq.n	800ddce <tcp_bind+0x4a>
 800ddba:	4b36      	ldr	r3, [pc, #216]	; (800de94 <tcp_bind+0x110>)
 800ddbc:	f44f 7211 	mov.w	r2, #580	; 0x244
 800ddc0:	4935      	ldr	r1, [pc, #212]	; (800de98 <tcp_bind+0x114>)
 800ddc2:	4836      	ldr	r0, [pc, #216]	; (800de9c <tcp_bind+0x118>)
 800ddc4:	f00a fc40 	bl	8018648 <iprintf>
 800ddc8:	f06f 0305 	mvn.w	r3, #5
 800ddcc:	e05c      	b.n	800de88 <tcp_bind+0x104>
  if (ip_get_option(pcb, SOF_REUSEADDR)) {
    max_pcb_list = NUM_TCP_PCB_LISTS_NO_TIME_WAIT;
  }
#endif /* SO_REUSE */

  if (port == 0) {
 800ddce:	88fb      	ldrh	r3, [r7, #6]
 800ddd0:	2b00      	cmp	r3, #0
 800ddd2:	d109      	bne.n	800dde8 <tcp_bind+0x64>
    port = tcp_new_port();
 800ddd4:	f000 f9ca 	bl	800e16c <tcp_new_port>
 800ddd8:	4603      	mov	r3, r0
 800ddda:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 800dddc:	88fb      	ldrh	r3, [r7, #6]
 800ddde:	2b00      	cmp	r3, #0
 800dde0:	d135      	bne.n	800de4e <tcp_bind+0xca>
      return ERR_BUF;
 800dde2:	f06f 0301 	mvn.w	r3, #1
 800dde6:	e04f      	b.n	800de88 <tcp_bind+0x104>
    }
  } else {
    /* Check if the address already is in use (on all lists) */
    for (i = 0; i < max_pcb_list; i++) {
 800dde8:	2300      	movs	r3, #0
 800ddea:	61fb      	str	r3, [r7, #28]
 800ddec:	e02b      	b.n	800de46 <tcp_bind+0xc2>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 800ddee:	4a2c      	ldr	r2, [pc, #176]	; (800dea0 <tcp_bind+0x11c>)
 800ddf0:	69fb      	ldr	r3, [r7, #28]
 800ddf2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ddf6:	681b      	ldr	r3, [r3, #0]
 800ddf8:	61bb      	str	r3, [r7, #24]
 800ddfa:	e01e      	b.n	800de3a <tcp_bind+0xb6>
        if (cpcb->local_port == port) {
 800ddfc:	69bb      	ldr	r3, [r7, #24]
 800ddfe:	8adb      	ldrh	r3, [r3, #22]
 800de00:	88fa      	ldrh	r2, [r7, #6]
 800de02:	429a      	cmp	r2, r3
 800de04:	d116      	bne.n	800de34 <tcp_bind+0xb0>
              !ip_get_option(cpcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
          {
            /* @todo: check accept_any_ip_version */
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
                (ip_addr_isany(&cpcb->local_ip) ||
 800de06:	69bb      	ldr	r3, [r7, #24]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 800de08:	2b00      	cmp	r3, #0
 800de0a:	d010      	beq.n	800de2e <tcp_bind+0xaa>
                (ip_addr_isany(&cpcb->local_ip) ||
 800de0c:	69bb      	ldr	r3, [r7, #24]
 800de0e:	681b      	ldr	r3, [r3, #0]
 800de10:	2b00      	cmp	r3, #0
 800de12:	d00c      	beq.n	800de2e <tcp_bind+0xaa>
 800de14:	68bb      	ldr	r3, [r7, #8]
 800de16:	2b00      	cmp	r3, #0
 800de18:	d009      	beq.n	800de2e <tcp_bind+0xaa>
                ip_addr_isany(ipaddr) ||
 800de1a:	68bb      	ldr	r3, [r7, #8]
 800de1c:	681b      	ldr	r3, [r3, #0]
 800de1e:	2b00      	cmp	r3, #0
 800de20:	d005      	beq.n	800de2e <tcp_bind+0xaa>
                ip_addr_cmp(&cpcb->local_ip, ipaddr))) {
 800de22:	69bb      	ldr	r3, [r7, #24]
 800de24:	681a      	ldr	r2, [r3, #0]
 800de26:	68bb      	ldr	r3, [r7, #8]
 800de28:	681b      	ldr	r3, [r3, #0]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 800de2a:	429a      	cmp	r2, r3
 800de2c:	d102      	bne.n	800de34 <tcp_bind+0xb0>
              return ERR_USE;
 800de2e:	f06f 0307 	mvn.w	r3, #7
 800de32:	e029      	b.n	800de88 <tcp_bind+0x104>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 800de34:	69bb      	ldr	r3, [r7, #24]
 800de36:	68db      	ldr	r3, [r3, #12]
 800de38:	61bb      	str	r3, [r7, #24]
 800de3a:	69bb      	ldr	r3, [r7, #24]
 800de3c:	2b00      	cmp	r3, #0
 800de3e:	d1dd      	bne.n	800ddfc <tcp_bind+0x78>
    for (i = 0; i < max_pcb_list; i++) {
 800de40:	69fb      	ldr	r3, [r7, #28]
 800de42:	3301      	adds	r3, #1
 800de44:	61fb      	str	r3, [r7, #28]
 800de46:	69fa      	ldr	r2, [r7, #28]
 800de48:	697b      	ldr	r3, [r7, #20]
 800de4a:	429a      	cmp	r2, r3
 800de4c:	dbcf      	blt.n	800ddee <tcp_bind+0x6a>
        }
      }
    }
  }

  if (!ip_addr_isany(ipaddr)) {
 800de4e:	68bb      	ldr	r3, [r7, #8]
 800de50:	2b00      	cmp	r3, #0
 800de52:	d00c      	beq.n	800de6e <tcp_bind+0xea>
 800de54:	68bb      	ldr	r3, [r7, #8]
 800de56:	681b      	ldr	r3, [r3, #0]
 800de58:	2b00      	cmp	r3, #0
 800de5a:	d008      	beq.n	800de6e <tcp_bind+0xea>
    ip_addr_set(&pcb->local_ip, ipaddr);
 800de5c:	68bb      	ldr	r3, [r7, #8]
 800de5e:	2b00      	cmp	r3, #0
 800de60:	d002      	beq.n	800de68 <tcp_bind+0xe4>
 800de62:	68bb      	ldr	r3, [r7, #8]
 800de64:	681b      	ldr	r3, [r3, #0]
 800de66:	e000      	b.n	800de6a <tcp_bind+0xe6>
 800de68:	2300      	movs	r3, #0
 800de6a:	68fa      	ldr	r2, [r7, #12]
 800de6c:	6013      	str	r3, [r2, #0]
  }
  pcb->local_port = port;
 800de6e:	68fb      	ldr	r3, [r7, #12]
 800de70:	88fa      	ldrh	r2, [r7, #6]
 800de72:	82da      	strh	r2, [r3, #22]
  TCP_REG(&tcp_bound_pcbs, pcb);
 800de74:	4b0b      	ldr	r3, [pc, #44]	; (800dea4 <tcp_bind+0x120>)
 800de76:	681a      	ldr	r2, [r3, #0]
 800de78:	68fb      	ldr	r3, [r7, #12]
 800de7a:	60da      	str	r2, [r3, #12]
 800de7c:	4a09      	ldr	r2, [pc, #36]	; (800dea4 <tcp_bind+0x120>)
 800de7e:	68fb      	ldr	r3, [r7, #12]
 800de80:	6013      	str	r3, [r2, #0]
 800de82:	f004 fed1 	bl	8012c28 <tcp_timer_needed>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_bind: bind to port %"U16_F"\n", port));
  return ERR_OK;
 800de86:	2300      	movs	r3, #0
}
 800de88:	4618      	mov	r0, r3
 800de8a:	3720      	adds	r7, #32
 800de8c:	46bd      	mov	sp, r7
 800de8e:	bd80      	pop	{r7, pc}
 800de90:	0801b8c0 	.word	0x0801b8c0
 800de94:	08019ebc 	.word	0x08019ebc
 800de98:	08019f88 	.word	0x08019f88
 800de9c:	08019ef8 	.word	0x08019ef8
 800dea0:	0801b888 	.word	0x0801b888
 800dea4:	2000ac40 	.word	0x2000ac40

0800dea8 <tcp_accept_null>:
/**
 * Default accept callback if no accept callback is specified by the user.
 */
static err_t
tcp_accept_null(void *arg, struct tcp_pcb *pcb, err_t err)
{
 800dea8:	b580      	push	{r7, lr}
 800deaa:	b084      	sub	sp, #16
 800deac:	af00      	add	r7, sp, #0
 800deae:	60f8      	str	r0, [r7, #12]
 800deb0:	60b9      	str	r1, [r7, #8]
 800deb2:	4613      	mov	r3, r2
 800deb4:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(arg);
  LWIP_UNUSED_ARG(err);

  tcp_abort(pcb);
 800deb6:	68b8      	ldr	r0, [r7, #8]
 800deb8:	f7ff ff58 	bl	800dd6c <tcp_abort>

  return ERR_ABRT;
 800debc:	f06f 030c 	mvn.w	r3, #12
}
 800dec0:	4618      	mov	r0, r3
 800dec2:	3710      	adds	r7, #16
 800dec4:	46bd      	mov	sp, r7
 800dec6:	bd80      	pop	{r7, pc}

0800dec8 <tcp_listen_with_backlog>:
 *       called like this:
 *             tpcb = tcp_listen_with_backlog(tpcb, backlog);
 */
struct tcp_pcb *
tcp_listen_with_backlog(struct tcp_pcb *pcb, u8_t backlog)
{
 800dec8:	b580      	push	{r7, lr}
 800deca:	b082      	sub	sp, #8
 800decc:	af00      	add	r7, sp, #0
 800dece:	6078      	str	r0, [r7, #4]
 800ded0:	460b      	mov	r3, r1
 800ded2:	70fb      	strb	r3, [r7, #3]
  return tcp_listen_with_backlog_and_err(pcb, backlog, NULL);
 800ded4:	78fb      	ldrb	r3, [r7, #3]
 800ded6:	2200      	movs	r2, #0
 800ded8:	4619      	mov	r1, r3
 800deda:	6878      	ldr	r0, [r7, #4]
 800dedc:	f000 f806 	bl	800deec <tcp_listen_with_backlog_and_err>
 800dee0:	4603      	mov	r3, r0
}
 800dee2:	4618      	mov	r0, r3
 800dee4:	3708      	adds	r7, #8
 800dee6:	46bd      	mov	sp, r7
 800dee8:	bd80      	pop	{r7, pc}
	...

0800deec <tcp_listen_with_backlog_and_err>:
 *       called like this:
 *             tpcb = tcp_listen_with_backlog_and_err(tpcb, backlog, &err);
 */
struct tcp_pcb *
tcp_listen_with_backlog_and_err(struct tcp_pcb *pcb, u8_t backlog, err_t *err)
{
 800deec:	b580      	push	{r7, lr}
 800deee:	b088      	sub	sp, #32
 800def0:	af00      	add	r7, sp, #0
 800def2:	60f8      	str	r0, [r7, #12]
 800def4:	460b      	mov	r3, r1
 800def6:	607a      	str	r2, [r7, #4]
 800def8:	72fb      	strb	r3, [r7, #11]
  struct tcp_pcb_listen *lpcb = NULL;
 800defa:	2300      	movs	r3, #0
 800defc:	61fb      	str	r3, [r7, #28]
  err_t res;

  LWIP_UNUSED_ARG(backlog);
  LWIP_ERROR("tcp_listen: pcb already connected", pcb->state == CLOSED, res = ERR_CLSD; goto done);
 800defe:	68fb      	ldr	r3, [r7, #12]
 800df00:	7d1b      	ldrb	r3, [r3, #20]
 800df02:	2b00      	cmp	r3, #0
 800df04:	d009      	beq.n	800df1a <tcp_listen_with_backlog_and_err+0x2e>
 800df06:	4b3f      	ldr	r3, [pc, #252]	; (800e004 <tcp_listen_with_backlog_and_err+0x118>)
 800df08:	f44f 722d 	mov.w	r2, #692	; 0x2b4
 800df0c:	493e      	ldr	r1, [pc, #248]	; (800e008 <tcp_listen_with_backlog_and_err+0x11c>)
 800df0e:	483f      	ldr	r0, [pc, #252]	; (800e00c <tcp_listen_with_backlog_and_err+0x120>)
 800df10:	f00a fb9a 	bl	8018648 <iprintf>
 800df14:	23f1      	movs	r3, #241	; 0xf1
 800df16:	76fb      	strb	r3, [r7, #27]
 800df18:	e069      	b.n	800dfee <tcp_listen_with_backlog_and_err+0x102>

  /* already listening? */
  if (pcb->state == LISTEN) {
 800df1a:	68fb      	ldr	r3, [r7, #12]
 800df1c:	7d1b      	ldrb	r3, [r3, #20]
 800df1e:	2b01      	cmp	r3, #1
 800df20:	d104      	bne.n	800df2c <tcp_listen_with_backlog_and_err+0x40>
    lpcb = (struct tcp_pcb_listen*)pcb;
 800df22:	68fb      	ldr	r3, [r7, #12]
 800df24:	61fb      	str	r3, [r7, #28]
    res = ERR_ALREADY;
 800df26:	23f7      	movs	r3, #247	; 0xf7
 800df28:	76fb      	strb	r3, [r7, #27]
    goto done;
 800df2a:	e060      	b.n	800dfee <tcp_listen_with_backlog_and_err+0x102>
        goto done;
      }
    }
  }
#endif /* SO_REUSE */
  lpcb = (struct tcp_pcb_listen *)memp_malloc(MEMP_TCP_PCB_LISTEN);
 800df2c:	2002      	movs	r0, #2
 800df2e:	f7fe fc5b 	bl	800c7e8 <memp_malloc>
 800df32:	61f8      	str	r0, [r7, #28]
  if (lpcb == NULL) {
 800df34:	69fb      	ldr	r3, [r7, #28]
 800df36:	2b00      	cmp	r3, #0
 800df38:	d102      	bne.n	800df40 <tcp_listen_with_backlog_and_err+0x54>
    res = ERR_MEM;
 800df3a:	23ff      	movs	r3, #255	; 0xff
 800df3c:	76fb      	strb	r3, [r7, #27]
    goto done;
 800df3e:	e056      	b.n	800dfee <tcp_listen_with_backlog_and_err+0x102>
  }
  lpcb->callback_arg = pcb->callback_arg;
 800df40:	68fb      	ldr	r3, [r7, #12]
 800df42:	691a      	ldr	r2, [r3, #16]
 800df44:	69fb      	ldr	r3, [r7, #28]
 800df46:	611a      	str	r2, [r3, #16]
  lpcb->local_port = pcb->local_port;
 800df48:	68fb      	ldr	r3, [r7, #12]
 800df4a:	8ada      	ldrh	r2, [r3, #22]
 800df4c:	69fb      	ldr	r3, [r7, #28]
 800df4e:	82da      	strh	r2, [r3, #22]
  lpcb->state = LISTEN;
 800df50:	69fb      	ldr	r3, [r7, #28]
 800df52:	2201      	movs	r2, #1
 800df54:	751a      	strb	r2, [r3, #20]
  lpcb->prio = pcb->prio;
 800df56:	68fb      	ldr	r3, [r7, #12]
 800df58:	7d5a      	ldrb	r2, [r3, #21]
 800df5a:	69fb      	ldr	r3, [r7, #28]
 800df5c:	755a      	strb	r2, [r3, #21]
  lpcb->so_options = pcb->so_options;
 800df5e:	68fb      	ldr	r3, [r7, #12]
 800df60:	7a1a      	ldrb	r2, [r3, #8]
 800df62:	69fb      	ldr	r3, [r7, #28]
 800df64:	721a      	strb	r2, [r3, #8]
  lpcb->ttl = pcb->ttl;
 800df66:	68fb      	ldr	r3, [r7, #12]
 800df68:	7a9a      	ldrb	r2, [r3, #10]
 800df6a:	69fb      	ldr	r3, [r7, #28]
 800df6c:	729a      	strb	r2, [r3, #10]
  lpcb->tos = pcb->tos;
 800df6e:	68fb      	ldr	r3, [r7, #12]
 800df70:	7a5a      	ldrb	r2, [r3, #9]
 800df72:	69fb      	ldr	r3, [r7, #28]
 800df74:	725a      	strb	r2, [r3, #9]
#if LWIP_IPV4 && LWIP_IPV6
  IP_SET_TYPE_VAL(lpcb->remote_ip, pcb->local_ip.type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  ip_addr_copy(lpcb->local_ip, pcb->local_ip);
 800df76:	68fb      	ldr	r3, [r7, #12]
 800df78:	681a      	ldr	r2, [r3, #0]
 800df7a:	69fb      	ldr	r3, [r7, #28]
 800df7c:	601a      	str	r2, [r3, #0]
  if (pcb->local_port != 0) {
 800df7e:	68fb      	ldr	r3, [r7, #12]
 800df80:	8adb      	ldrh	r3, [r3, #22]
 800df82:	2b00      	cmp	r3, #0
 800df84:	d021      	beq.n	800dfca <tcp_listen_with_backlog_and_err+0xde>
    TCP_RMV(&tcp_bound_pcbs, pcb);
 800df86:	4b22      	ldr	r3, [pc, #136]	; (800e010 <tcp_listen_with_backlog_and_err+0x124>)
 800df88:	681b      	ldr	r3, [r3, #0]
 800df8a:	68fa      	ldr	r2, [r7, #12]
 800df8c:	429a      	cmp	r2, r3
 800df8e:	d105      	bne.n	800df9c <tcp_listen_with_backlog_and_err+0xb0>
 800df90:	4b1f      	ldr	r3, [pc, #124]	; (800e010 <tcp_listen_with_backlog_and_err+0x124>)
 800df92:	681b      	ldr	r3, [r3, #0]
 800df94:	68db      	ldr	r3, [r3, #12]
 800df96:	4a1e      	ldr	r2, [pc, #120]	; (800e010 <tcp_listen_with_backlog_and_err+0x124>)
 800df98:	6013      	str	r3, [r2, #0]
 800df9a:	e013      	b.n	800dfc4 <tcp_listen_with_backlog_and_err+0xd8>
 800df9c:	4b1c      	ldr	r3, [pc, #112]	; (800e010 <tcp_listen_with_backlog_and_err+0x124>)
 800df9e:	681b      	ldr	r3, [r3, #0]
 800dfa0:	617b      	str	r3, [r7, #20]
 800dfa2:	e00c      	b.n	800dfbe <tcp_listen_with_backlog_and_err+0xd2>
 800dfa4:	697b      	ldr	r3, [r7, #20]
 800dfa6:	68db      	ldr	r3, [r3, #12]
 800dfa8:	68fa      	ldr	r2, [r7, #12]
 800dfaa:	429a      	cmp	r2, r3
 800dfac:	d104      	bne.n	800dfb8 <tcp_listen_with_backlog_and_err+0xcc>
 800dfae:	68fb      	ldr	r3, [r7, #12]
 800dfb0:	68da      	ldr	r2, [r3, #12]
 800dfb2:	697b      	ldr	r3, [r7, #20]
 800dfb4:	60da      	str	r2, [r3, #12]
 800dfb6:	e005      	b.n	800dfc4 <tcp_listen_with_backlog_and_err+0xd8>
 800dfb8:	697b      	ldr	r3, [r7, #20]
 800dfba:	68db      	ldr	r3, [r3, #12]
 800dfbc:	617b      	str	r3, [r7, #20]
 800dfbe:	697b      	ldr	r3, [r7, #20]
 800dfc0:	2b00      	cmp	r3, #0
 800dfc2:	d1ef      	bne.n	800dfa4 <tcp_listen_with_backlog_and_err+0xb8>
 800dfc4:	68fb      	ldr	r3, [r7, #12]
 800dfc6:	2200      	movs	r2, #0
 800dfc8:	60da      	str	r2, [r3, #12]
  }
  memp_free(MEMP_TCP_PCB, pcb);
 800dfca:	68f9      	ldr	r1, [r7, #12]
 800dfcc:	2001      	movs	r0, #1
 800dfce:	f7fe fc5d 	bl	800c88c <memp_free>
#if LWIP_CALLBACK_API
  lpcb->accept = tcp_accept_null;
 800dfd2:	69fb      	ldr	r3, [r7, #28]
 800dfd4:	4a0f      	ldr	r2, [pc, #60]	; (800e014 <tcp_listen_with_backlog_and_err+0x128>)
 800dfd6:	619a      	str	r2, [r3, #24]
#endif /* LWIP_CALLBACK_API */
#if TCP_LISTEN_BACKLOG
  lpcb->accepts_pending = 0;
  tcp_backlog_set(lpcb, backlog);
#endif /* TCP_LISTEN_BACKLOG */
  TCP_REG(&tcp_listen_pcbs.pcbs, (struct tcp_pcb *)lpcb);
 800dfd8:	4b0f      	ldr	r3, [pc, #60]	; (800e018 <tcp_listen_with_backlog_and_err+0x12c>)
 800dfda:	681a      	ldr	r2, [r3, #0]
 800dfdc:	69fb      	ldr	r3, [r7, #28]
 800dfde:	60da      	str	r2, [r3, #12]
 800dfe0:	4a0d      	ldr	r2, [pc, #52]	; (800e018 <tcp_listen_with_backlog_and_err+0x12c>)
 800dfe2:	69fb      	ldr	r3, [r7, #28]
 800dfe4:	6013      	str	r3, [r2, #0]
 800dfe6:	f004 fe1f 	bl	8012c28 <tcp_timer_needed>
  res = ERR_OK;
 800dfea:	2300      	movs	r3, #0
 800dfec:	76fb      	strb	r3, [r7, #27]
done:
  if (err != NULL) {
 800dfee:	687b      	ldr	r3, [r7, #4]
 800dff0:	2b00      	cmp	r3, #0
 800dff2:	d002      	beq.n	800dffa <tcp_listen_with_backlog_and_err+0x10e>
    *err = res;
 800dff4:	687b      	ldr	r3, [r7, #4]
 800dff6:	7efa      	ldrb	r2, [r7, #27]
 800dff8:	701a      	strb	r2, [r3, #0]
  }
  return (struct tcp_pcb *)lpcb;
 800dffa:	69fb      	ldr	r3, [r7, #28]
}
 800dffc:	4618      	mov	r0, r3
 800dffe:	3720      	adds	r7, #32
 800e000:	46bd      	mov	sp, r7
 800e002:	bd80      	pop	{r7, pc}
 800e004:	08019ebc 	.word	0x08019ebc
 800e008:	08019fb0 	.word	0x08019fb0
 800e00c:	08019ef8 	.word	0x08019ef8
 800e010:	2000ac40 	.word	0x2000ac40
 800e014:	0800dea9 	.word	0x0800dea9
 800e018:	2000ac3c 	.word	0x2000ac3c

0800e01c <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 800e01c:	b580      	push	{r7, lr}
 800e01e:	b084      	sub	sp, #16
 800e020:	af00      	add	r7, sp, #0
 800e022:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 800e024:	687b      	ldr	r3, [r7, #4]
 800e026:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e028:	687a      	ldr	r2, [r7, #4]
 800e02a:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 800e02c:	4413      	add	r3, r2
 800e02e:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 800e030:	687b      	ldr	r3, [r7, #4]
 800e032:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e034:	687a      	ldr	r2, [r7, #4]
 800e036:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 800e038:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 800e03c:	bf28      	it	cs
 800e03e:	f44f 6286 	movcs.w	r2, #1072	; 0x430
 800e042:	b292      	uxth	r2, r2
 800e044:	4413      	add	r3, r2
 800e046:	68fa      	ldr	r2, [r7, #12]
 800e048:	1ad3      	subs	r3, r2, r3
 800e04a:	2b00      	cmp	r3, #0
 800e04c:	db08      	blt.n	800e060 <tcp_update_rcv_ann_wnd+0x44>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 800e04e:	687b      	ldr	r3, [r7, #4]
 800e050:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800e052:	687b      	ldr	r3, [r7, #4]
 800e054:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 800e056:	687b      	ldr	r3, [r7, #4]
 800e058:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e05a:	68fa      	ldr	r2, [r7, #12]
 800e05c:	1ad3      	subs	r3, r2, r3
 800e05e:	e020      	b.n	800e0a2 <tcp_update_rcv_ann_wnd+0x86>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 800e060:	687b      	ldr	r3, [r7, #4]
 800e062:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e064:	687b      	ldr	r3, [r7, #4]
 800e066:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e068:	1ad3      	subs	r3, r2, r3
 800e06a:	2b00      	cmp	r3, #0
 800e06c:	dd03      	ble.n	800e076 <tcp_update_rcv_ann_wnd+0x5a>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 800e06e:	687b      	ldr	r3, [r7, #4]
 800e070:	2200      	movs	r2, #0
 800e072:	855a      	strh	r2, [r3, #42]	; 0x2a
 800e074:	e014      	b.n	800e0a0 <tcp_update_rcv_ann_wnd+0x84>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 800e076:	687b      	ldr	r3, [r7, #4]
 800e078:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e07a:	687b      	ldr	r3, [r7, #4]
 800e07c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e07e:	1ad3      	subs	r3, r2, r3
 800e080:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 800e082:	68bb      	ldr	r3, [r7, #8]
 800e084:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e088:	d306      	bcc.n	800e098 <tcp_update_rcv_ann_wnd+0x7c>
 800e08a:	4b08      	ldr	r3, [pc, #32]	; (800e0ac <tcp_update_rcv_ann_wnd+0x90>)
 800e08c:	f44f 7242 	mov.w	r2, #776	; 0x308
 800e090:	4907      	ldr	r1, [pc, #28]	; (800e0b0 <tcp_update_rcv_ann_wnd+0x94>)
 800e092:	4808      	ldr	r0, [pc, #32]	; (800e0b4 <tcp_update_rcv_ann_wnd+0x98>)
 800e094:	f00a fad8 	bl	8018648 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 800e098:	68bb      	ldr	r3, [r7, #8]
 800e09a:	b29a      	uxth	r2, r3
 800e09c:	687b      	ldr	r3, [r7, #4]
 800e09e:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 800e0a0:	2300      	movs	r3, #0
  }
}
 800e0a2:	4618      	mov	r0, r3
 800e0a4:	3710      	adds	r7, #16
 800e0a6:	46bd      	mov	sp, r7
 800e0a8:	bd80      	pop	{r7, pc}
 800e0aa:	bf00      	nop
 800e0ac:	08019ebc 	.word	0x08019ebc
 800e0b0:	08019fd4 	.word	0x08019fd4
 800e0b4:	08019ef8 	.word	0x08019ef8

0800e0b8 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 800e0b8:	b580      	push	{r7, lr}
 800e0ba:	b084      	sub	sp, #16
 800e0bc:	af00      	add	r7, sp, #0
 800e0be:	6078      	str	r0, [r7, #4]
 800e0c0:	460b      	mov	r3, r1
 800e0c2:	807b      	strh	r3, [r7, #2]
  int wnd_inflation;

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 800e0c4:	687b      	ldr	r3, [r7, #4]
 800e0c6:	7d1b      	ldrb	r3, [r3, #20]
 800e0c8:	2b01      	cmp	r3, #1
 800e0ca:	d106      	bne.n	800e0da <tcp_recved+0x22>
 800e0cc:	4b23      	ldr	r3, [pc, #140]	; (800e15c <tcp_recved+0xa4>)
 800e0ce:	f44f 7248 	mov.w	r2, #800	; 0x320
 800e0d2:	4923      	ldr	r1, [pc, #140]	; (800e160 <tcp_recved+0xa8>)
 800e0d4:	4823      	ldr	r0, [pc, #140]	; (800e164 <tcp_recved+0xac>)
 800e0d6:	f00a fab7 	bl	8018648 <iprintf>
    pcb->state != LISTEN);

  pcb->rcv_wnd += len;
 800e0da:	687b      	ldr	r3, [r7, #4]
 800e0dc:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800e0de:	887b      	ldrh	r3, [r7, #2]
 800e0e0:	4413      	add	r3, r2
 800e0e2:	b29a      	uxth	r2, r3
 800e0e4:	687b      	ldr	r3, [r7, #4]
 800e0e6:	851a      	strh	r2, [r3, #40]	; 0x28
  if (pcb->rcv_wnd > TCP_WND_MAX(pcb)) {
 800e0e8:	687b      	ldr	r3, [r7, #4]
 800e0ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e0ec:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800e0f0:	d904      	bls.n	800e0fc <tcp_recved+0x44>
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 800e0f2:	687b      	ldr	r3, [r7, #4]
 800e0f4:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800e0f8:	851a      	strh	r2, [r3, #40]	; 0x28
 800e0fa:	e017      	b.n	800e12c <tcp_recved+0x74>
  } else if (pcb->rcv_wnd == 0) {
 800e0fc:	687b      	ldr	r3, [r7, #4]
 800e0fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e100:	2b00      	cmp	r3, #0
 800e102:	d113      	bne.n	800e12c <tcp_recved+0x74>
    /* rcv_wnd overflowed */
    if ((pcb->state == CLOSE_WAIT) || (pcb->state == LAST_ACK)) {
 800e104:	687b      	ldr	r3, [r7, #4]
 800e106:	7d1b      	ldrb	r3, [r3, #20]
 800e108:	2b07      	cmp	r3, #7
 800e10a:	d003      	beq.n	800e114 <tcp_recved+0x5c>
 800e10c:	687b      	ldr	r3, [r7, #4]
 800e10e:	7d1b      	ldrb	r3, [r3, #20]
 800e110:	2b09      	cmp	r3, #9
 800e112:	d104      	bne.n	800e11e <tcp_recved+0x66>
      /* In passive close, we allow this, since the FIN bit is added to rcv_wnd
         by the stack itself, since it is not mandatory for an application
         to call tcp_recved() for the FIN bit, but e.g. the netconn API does so. */
      pcb->rcv_wnd = TCP_WND_MAX(pcb);
 800e114:	687b      	ldr	r3, [r7, #4]
 800e116:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800e11a:	851a      	strh	r2, [r3, #40]	; 0x28
 800e11c:	e006      	b.n	800e12c <tcp_recved+0x74>
    } else {
      LWIP_ASSERT("tcp_recved: len wrapped rcv_wnd\n", 0);
 800e11e:	4b0f      	ldr	r3, [pc, #60]	; (800e15c <tcp_recved+0xa4>)
 800e120:	f240 322d 	movw	r2, #813	; 0x32d
 800e124:	4910      	ldr	r1, [pc, #64]	; (800e168 <tcp_recved+0xb0>)
 800e126:	480f      	ldr	r0, [pc, #60]	; (800e164 <tcp_recved+0xac>)
 800e128:	f00a fa8e 	bl	8018648 <iprintf>
    }
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 800e12c:	6878      	ldr	r0, [r7, #4]
 800e12e:	f7ff ff75 	bl	800e01c <tcp_update_rcv_ann_wnd>
 800e132:	4603      	mov	r3, r0
 800e134:	60fb      	str	r3, [r7, #12]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 800e136:	68fb      	ldr	r3, [r7, #12]
 800e138:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 800e13c:	db09      	blt.n	800e152 <tcp_recved+0x9a>
    tcp_ack_now(pcb);
 800e13e:	687b      	ldr	r3, [r7, #4]
 800e140:	7e9b      	ldrb	r3, [r3, #26]
 800e142:	f043 0302 	orr.w	r3, r3, #2
 800e146:	b2da      	uxtb	r2, r3
 800e148:	687b      	ldr	r3, [r7, #4]
 800e14a:	769a      	strb	r2, [r3, #26]
    tcp_output(pcb);
 800e14c:	6878      	ldr	r0, [r7, #4]
 800e14e:	f004 f891 	bl	8012274 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
         len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 800e152:	bf00      	nop
 800e154:	3710      	adds	r7, #16
 800e156:	46bd      	mov	sp, r7
 800e158:	bd80      	pop	{r7, pc}
 800e15a:	bf00      	nop
 800e15c:	08019ebc 	.word	0x08019ebc
 800e160:	08019ff0 	.word	0x08019ff0
 800e164:	08019ef8 	.word	0x08019ef8
 800e168:	0801a018 	.word	0x0801a018

0800e16c <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 800e16c:	b480      	push	{r7}
 800e16e:	b083      	sub	sp, #12
 800e170:	af00      	add	r7, sp, #0
  u8_t i;
  u16_t n = 0;
 800e172:	2300      	movs	r3, #0
 800e174:	80bb      	strh	r3, [r7, #4]
  struct tcp_pcb *pcb;

again:
  if (tcp_port++ == TCP_LOCAL_PORT_RANGE_END) {
 800e176:	4b1d      	ldr	r3, [pc, #116]	; (800e1ec <tcp_new_port+0x80>)
 800e178:	881b      	ldrh	r3, [r3, #0]
 800e17a:	1c5a      	adds	r2, r3, #1
 800e17c:	b291      	uxth	r1, r2
 800e17e:	4a1b      	ldr	r2, [pc, #108]	; (800e1ec <tcp_new_port+0x80>)
 800e180:	8011      	strh	r1, [r2, #0]
 800e182:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800e186:	4293      	cmp	r3, r2
 800e188:	d103      	bne.n	800e192 <tcp_new_port+0x26>
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 800e18a:	4b18      	ldr	r3, [pc, #96]	; (800e1ec <tcp_new_port+0x80>)
 800e18c:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 800e190:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 800e192:	2300      	movs	r3, #0
 800e194:	71fb      	strb	r3, [r7, #7]
 800e196:	e01e      	b.n	800e1d6 <tcp_new_port+0x6a>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 800e198:	79fb      	ldrb	r3, [r7, #7]
 800e19a:	4a15      	ldr	r2, [pc, #84]	; (800e1f0 <tcp_new_port+0x84>)
 800e19c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e1a0:	681b      	ldr	r3, [r3, #0]
 800e1a2:	603b      	str	r3, [r7, #0]
 800e1a4:	e011      	b.n	800e1ca <tcp_new_port+0x5e>
      if (pcb->local_port == tcp_port) {
 800e1a6:	683b      	ldr	r3, [r7, #0]
 800e1a8:	8ada      	ldrh	r2, [r3, #22]
 800e1aa:	4b10      	ldr	r3, [pc, #64]	; (800e1ec <tcp_new_port+0x80>)
 800e1ac:	881b      	ldrh	r3, [r3, #0]
 800e1ae:	429a      	cmp	r2, r3
 800e1b0:	d108      	bne.n	800e1c4 <tcp_new_port+0x58>
        if (++n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 800e1b2:	88bb      	ldrh	r3, [r7, #4]
 800e1b4:	3301      	adds	r3, #1
 800e1b6:	80bb      	strh	r3, [r7, #4]
 800e1b8:	88bb      	ldrh	r3, [r7, #4]
 800e1ba:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800e1be:	d3da      	bcc.n	800e176 <tcp_new_port+0xa>
          return 0;
 800e1c0:	2300      	movs	r3, #0
 800e1c2:	e00d      	b.n	800e1e0 <tcp_new_port+0x74>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 800e1c4:	683b      	ldr	r3, [r7, #0]
 800e1c6:	68db      	ldr	r3, [r3, #12]
 800e1c8:	603b      	str	r3, [r7, #0]
 800e1ca:	683b      	ldr	r3, [r7, #0]
 800e1cc:	2b00      	cmp	r3, #0
 800e1ce:	d1ea      	bne.n	800e1a6 <tcp_new_port+0x3a>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 800e1d0:	79fb      	ldrb	r3, [r7, #7]
 800e1d2:	3301      	adds	r3, #1
 800e1d4:	71fb      	strb	r3, [r7, #7]
 800e1d6:	79fb      	ldrb	r3, [r7, #7]
 800e1d8:	2b03      	cmp	r3, #3
 800e1da:	d9dd      	bls.n	800e198 <tcp_new_port+0x2c>
        }
        goto again;
      }
    }
  }
  return tcp_port;
 800e1dc:	4b03      	ldr	r3, [pc, #12]	; (800e1ec <tcp_new_port+0x80>)
 800e1de:	881b      	ldrh	r3, [r3, #0]
}
 800e1e0:	4618      	mov	r0, r3
 800e1e2:	370c      	adds	r7, #12
 800e1e4:	46bd      	mov	sp, r7
 800e1e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1ea:	4770      	bx	lr
 800e1ec:	2000011c 	.word	0x2000011c
 800e1f0:	0801b888 	.word	0x0801b888

0800e1f4 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 800e1f4:	b5b0      	push	{r4, r5, r7, lr}
 800e1f6:	b08c      	sub	sp, #48	; 0x30
 800e1f8:	af02      	add	r7, sp, #8
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 800e1fa:	2300      	movs	r3, #0
 800e1fc:	777b      	strb	r3, [r7, #29]

  ++tcp_ticks;
 800e1fe:	4b97      	ldr	r3, [pc, #604]	; (800e45c <tcp_slowtmr+0x268>)
 800e200:	681b      	ldr	r3, [r3, #0]
 800e202:	3301      	adds	r3, #1
 800e204:	4a95      	ldr	r2, [pc, #596]	; (800e45c <tcp_slowtmr+0x268>)
 800e206:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 800e208:	4b95      	ldr	r3, [pc, #596]	; (800e460 <tcp_slowtmr+0x26c>)
 800e20a:	781b      	ldrb	r3, [r3, #0]
 800e20c:	3301      	adds	r3, #1
 800e20e:	b2da      	uxtb	r2, r3
 800e210:	4b93      	ldr	r3, [pc, #588]	; (800e460 <tcp_slowtmr+0x26c>)
 800e212:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 800e214:	2300      	movs	r3, #0
 800e216:	623b      	str	r3, [r7, #32]
  pcb = tcp_active_pcbs;
 800e218:	4b92      	ldr	r3, [pc, #584]	; (800e464 <tcp_slowtmr+0x270>)
 800e21a:	681b      	ldr	r3, [r3, #0]
 800e21c:	627b      	str	r3, [r7, #36]	; 0x24
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 800e21e:	e227      	b.n	800e670 <tcp_slowtmr+0x47c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 800e220:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e222:	7d1b      	ldrb	r3, [r3, #20]
 800e224:	2b00      	cmp	r3, #0
 800e226:	d106      	bne.n	800e236 <tcp_slowtmr+0x42>
 800e228:	4b8f      	ldr	r3, [pc, #572]	; (800e468 <tcp_slowtmr+0x274>)
 800e22a:	f44f 727c 	mov.w	r2, #1008	; 0x3f0
 800e22e:	498f      	ldr	r1, [pc, #572]	; (800e46c <tcp_slowtmr+0x278>)
 800e230:	488f      	ldr	r0, [pc, #572]	; (800e470 <tcp_slowtmr+0x27c>)
 800e232:	f00a fa09 	bl	8018648 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 800e236:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e238:	7d1b      	ldrb	r3, [r3, #20]
 800e23a:	2b01      	cmp	r3, #1
 800e23c:	d106      	bne.n	800e24c <tcp_slowtmr+0x58>
 800e23e:	4b8a      	ldr	r3, [pc, #552]	; (800e468 <tcp_slowtmr+0x274>)
 800e240:	f240 32f1 	movw	r2, #1009	; 0x3f1
 800e244:	498b      	ldr	r1, [pc, #556]	; (800e474 <tcp_slowtmr+0x280>)
 800e246:	488a      	ldr	r0, [pc, #552]	; (800e470 <tcp_slowtmr+0x27c>)
 800e248:	f00a f9fe 	bl	8018648 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 800e24c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e24e:	7d1b      	ldrb	r3, [r3, #20]
 800e250:	2b0a      	cmp	r3, #10
 800e252:	d106      	bne.n	800e262 <tcp_slowtmr+0x6e>
 800e254:	4b84      	ldr	r3, [pc, #528]	; (800e468 <tcp_slowtmr+0x274>)
 800e256:	f240 32f2 	movw	r2, #1010	; 0x3f2
 800e25a:	4987      	ldr	r1, [pc, #540]	; (800e478 <tcp_slowtmr+0x284>)
 800e25c:	4884      	ldr	r0, [pc, #528]	; (800e470 <tcp_slowtmr+0x27c>)
 800e25e:	f00a f9f3 	bl	8018648 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 800e262:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e264:	7f5a      	ldrb	r2, [r3, #29]
 800e266:	4b7e      	ldr	r3, [pc, #504]	; (800e460 <tcp_slowtmr+0x26c>)
 800e268:	781b      	ldrb	r3, [r3, #0]
 800e26a:	429a      	cmp	r2, r3
 800e26c:	d103      	bne.n	800e276 <tcp_slowtmr+0x82>
      /* skip this pcb, we have already processed it */
      pcb = pcb->next;
 800e26e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e270:	68db      	ldr	r3, [r3, #12]
 800e272:	627b      	str	r3, [r7, #36]	; 0x24
      continue;
 800e274:	e1fc      	b.n	800e670 <tcp_slowtmr+0x47c>
    }
    pcb->last_timer = tcp_timer_ctr;
 800e276:	4b7a      	ldr	r3, [pc, #488]	; (800e460 <tcp_slowtmr+0x26c>)
 800e278:	781a      	ldrb	r2, [r3, #0]
 800e27a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e27c:	775a      	strb	r2, [r3, #29]

    pcb_remove = 0;
 800e27e:	2300      	movs	r3, #0
 800e280:	77fb      	strb	r3, [r7, #31]
    pcb_reset = 0;
 800e282:	2300      	movs	r3, #0
 800e284:	77bb      	strb	r3, [r7, #30]

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 800e286:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e288:	7d1b      	ldrb	r3, [r3, #20]
 800e28a:	2b02      	cmp	r3, #2
 800e28c:	d108      	bne.n	800e2a0 <tcp_slowtmr+0xac>
 800e28e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e290:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800e294:	2b05      	cmp	r3, #5
 800e296:	d903      	bls.n	800e2a0 <tcp_slowtmr+0xac>
      ++pcb_remove;
 800e298:	7ffb      	ldrb	r3, [r7, #31]
 800e29a:	3301      	adds	r3, #1
 800e29c:	77fb      	strb	r3, [r7, #31]
 800e29e:	e0a2      	b.n	800e3e6 <tcp_slowtmr+0x1f2>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    }
    else if (pcb->nrtx >= TCP_MAXRTX) {
 800e2a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e2a2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800e2a6:	2b0b      	cmp	r3, #11
 800e2a8:	d903      	bls.n	800e2b2 <tcp_slowtmr+0xbe>
      ++pcb_remove;
 800e2aa:	7ffb      	ldrb	r3, [r7, #31]
 800e2ac:	3301      	adds	r3, #1
 800e2ae:	77fb      	strb	r3, [r7, #31]
 800e2b0:	e099      	b.n	800e3e6 <tcp_slowtmr+0x1f2>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 800e2b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e2b4:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 800e2b8:	2b00      	cmp	r3, #0
 800e2ba:	d032      	beq.n	800e322 <tcp_slowtmr+0x12e>
        /* If snd_wnd is zero, use persist timer to send 1 byte probes
         * instead of using the standard retransmission mechanism. */
        u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff-1];
 800e2bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e2be:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 800e2c2:	3b01      	subs	r3, #1
 800e2c4:	4a6d      	ldr	r2, [pc, #436]	; (800e47c <tcp_slowtmr+0x288>)
 800e2c6:	5cd3      	ldrb	r3, [r2, r3]
 800e2c8:	74fb      	strb	r3, [r7, #19]
        if (pcb->persist_cnt < backoff_cnt) {
 800e2ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e2cc:	f893 3094 	ldrb.w	r3, [r3, #148]	; 0x94
 800e2d0:	7cfa      	ldrb	r2, [r7, #19]
 800e2d2:	429a      	cmp	r2, r3
 800e2d4:	d907      	bls.n	800e2e6 <tcp_slowtmr+0xf2>
          pcb->persist_cnt++;
 800e2d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e2d8:	f893 3094 	ldrb.w	r3, [r3, #148]	; 0x94
 800e2dc:	3301      	adds	r3, #1
 800e2de:	b2da      	uxtb	r2, r3
 800e2e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e2e2:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
        }
        if (pcb->persist_cnt >= backoff_cnt) {
 800e2e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e2e8:	f893 3094 	ldrb.w	r3, [r3, #148]	; 0x94
 800e2ec:	7cfa      	ldrb	r2, [r7, #19]
 800e2ee:	429a      	cmp	r2, r3
 800e2f0:	d879      	bhi.n	800e3e6 <tcp_slowtmr+0x1f2>
          if (tcp_zero_window_probe(pcb) == ERR_OK) {
 800e2f2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e2f4:	f004 fbd8 	bl	8012aa8 <tcp_zero_window_probe>
 800e2f8:	4603      	mov	r3, r0
 800e2fa:	2b00      	cmp	r3, #0
 800e2fc:	d173      	bne.n	800e3e6 <tcp_slowtmr+0x1f2>
            pcb->persist_cnt = 0;
 800e2fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e300:	2200      	movs	r2, #0
 800e302:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
            if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 800e306:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e308:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 800e30c:	2b06      	cmp	r3, #6
 800e30e:	d86a      	bhi.n	800e3e6 <tcp_slowtmr+0x1f2>
              pcb->persist_backoff++;
 800e310:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e312:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 800e316:	3301      	adds	r3, #1
 800e318:	b2da      	uxtb	r2, r3
 800e31a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e31c:	f883 2095 	strb.w	r2, [r3, #149]	; 0x95
 800e320:	e061      	b.n	800e3e6 <tcp_slowtmr+0x1f2>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if (pcb->rtime >= 0) {
 800e322:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e324:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800e328:	2b00      	cmp	r3, #0
 800e32a:	db08      	blt.n	800e33e <tcp_slowtmr+0x14a>
          ++pcb->rtime;
 800e32c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e32e:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800e332:	b29b      	uxth	r3, r3
 800e334:	3301      	adds	r3, #1
 800e336:	b29b      	uxth	r3, r3
 800e338:	b21a      	sxth	r2, r3
 800e33a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e33c:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->unacked != NULL && pcb->rtime >= pcb->rto) {
 800e33e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e340:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e342:	2b00      	cmp	r3, #0
 800e344:	d04f      	beq.n	800e3e6 <tcp_slowtmr+0x1f2>
 800e346:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e348:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 800e34c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e34e:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800e352:	429a      	cmp	r2, r3
 800e354:	db47      	blt.n	800e3e6 <tcp_slowtmr+0x1f2>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));

          /* Double retransmission time-out unless we are trying to
           * connect to somebody (i.e., we are in SYN_SENT). */
          if (pcb->state != SYN_SENT) {
 800e356:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e358:	7d1b      	ldrb	r3, [r3, #20]
 800e35a:	2b02      	cmp	r3, #2
 800e35c:	d018      	beq.n	800e390 <tcp_slowtmr+0x19c>
            u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff)-1);
 800e35e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e360:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800e364:	2b0c      	cmp	r3, #12
 800e366:	bf28      	it	cs
 800e368:	230c      	movcs	r3, #12
 800e36a:	75fb      	strb	r3, [r7, #23]
            pcb->rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 800e36c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e36e:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800e372:	10db      	asrs	r3, r3, #3
 800e374:	b21b      	sxth	r3, r3
 800e376:	461a      	mov	r2, r3
 800e378:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e37a:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800e37e:	4413      	add	r3, r2
 800e380:	7dfa      	ldrb	r2, [r7, #23]
 800e382:	493f      	ldr	r1, [pc, #252]	; (800e480 <tcp_slowtmr+0x28c>)
 800e384:	5c8a      	ldrb	r2, [r1, r2]
 800e386:	4093      	lsls	r3, r2
 800e388:	b21a      	sxth	r2, r3
 800e38a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e38c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
          }

          /* Reset the retransmission timer. */
          pcb->rtime = 0;
 800e390:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e392:	2200      	movs	r2, #0
 800e394:	861a      	strh	r2, [r3, #48]	; 0x30

          /* Reduce congestion window and ssthresh. */
          eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 800e396:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e398:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800e39c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e39e:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800e3a2:	4293      	cmp	r3, r2
 800e3a4:	bf28      	it	cs
 800e3a6:	4613      	movcs	r3, r2
 800e3a8:	82bb      	strh	r3, [r7, #20]
          pcb->ssthresh = eff_wnd >> 1;
 800e3aa:	8abb      	ldrh	r3, [r7, #20]
 800e3ac:	085b      	lsrs	r3, r3, #1
 800e3ae:	b29a      	uxth	r2, r3
 800e3b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e3b2:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
          if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 800e3b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e3b8:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800e3bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e3be:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e3c0:	005b      	lsls	r3, r3, #1
 800e3c2:	b29b      	uxth	r3, r3
 800e3c4:	429a      	cmp	r2, r3
 800e3c6:	d206      	bcs.n	800e3d6 <tcp_slowtmr+0x1e2>
            pcb->ssthresh = (pcb->mss << 1);
 800e3c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e3ca:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e3cc:	005b      	lsls	r3, r3, #1
 800e3ce:	b29a      	uxth	r2, r3
 800e3d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e3d2:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
          }
          pcb->cwnd = pcb->mss;
 800e3d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e3d8:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 800e3da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e3dc:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          /* The following needs to be called AFTER cwnd is set to one
             mss - STJ */
          tcp_rexmit_rto(pcb);
 800e3e0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e3e2:	f004 fa47 	bl	8012874 <tcp_rexmit_rto>
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 800e3e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e3e8:	7d1b      	ldrb	r3, [r3, #20]
 800e3ea:	2b06      	cmp	r3, #6
 800e3ec:	d10f      	bne.n	800e40e <tcp_slowtmr+0x21a>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 800e3ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e3f0:	7e9b      	ldrb	r3, [r3, #26]
 800e3f2:	f003 0310 	and.w	r3, r3, #16
 800e3f6:	2b00      	cmp	r3, #0
 800e3f8:	d009      	beq.n	800e40e <tcp_slowtmr+0x21a>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 800e3fa:	4b18      	ldr	r3, [pc, #96]	; (800e45c <tcp_slowtmr+0x268>)
 800e3fc:	681a      	ldr	r2, [r3, #0]
 800e3fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e400:	6a1b      	ldr	r3, [r3, #32]
 800e402:	1ad3      	subs	r3, r2, r3
 800e404:	2b28      	cmp	r3, #40	; 0x28
 800e406:	d902      	bls.n	800e40e <tcp_slowtmr+0x21a>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 800e408:	7ffb      	ldrb	r3, [r7, #31]
 800e40a:	3301      	adds	r3, #1
 800e40c:	77fb      	strb	r3, [r7, #31]
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800e40e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e410:	7a1b      	ldrb	r3, [r3, #8]
 800e412:	f003 0308 	and.w	r3, r3, #8
 800e416:	2b00      	cmp	r3, #0
 800e418:	d05d      	beq.n	800e4d6 <tcp_slowtmr+0x2e2>
       ((pcb->state == ESTABLISHED) ||
 800e41a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e41c:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800e41e:	2b04      	cmp	r3, #4
 800e420:	d003      	beq.n	800e42a <tcp_slowtmr+0x236>
        (pcb->state == CLOSE_WAIT))) {
 800e422:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e424:	7d1b      	ldrb	r3, [r3, #20]
       ((pcb->state == ESTABLISHED) ||
 800e426:	2b07      	cmp	r3, #7
 800e428:	d155      	bne.n	800e4d6 <tcp_slowtmr+0x2e2>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800e42a:	4b0c      	ldr	r3, [pc, #48]	; (800e45c <tcp_slowtmr+0x268>)
 800e42c:	681a      	ldr	r2, [r3, #0]
 800e42e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e430:	6a1b      	ldr	r3, [r3, #32]
 800e432:	1ad2      	subs	r2, r2, r3
         (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL)
 800e434:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e436:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e43a:	f503 2324 	add.w	r3, r3, #671744	; 0xa4000
 800e43e:	f603 43b8 	addw	r3, r3, #3256	; 0xcb8
 800e442:	4910      	ldr	r1, [pc, #64]	; (800e484 <tcp_slowtmr+0x290>)
 800e444:	fba1 1303 	umull	r1, r3, r1, r3
 800e448:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800e44a:	429a      	cmp	r2, r3
 800e44c:	d91c      	bls.n	800e488 <tcp_slowtmr+0x294>
      {
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print(TCP_DEBUG, &pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 800e44e:	7ffb      	ldrb	r3, [r7, #31]
 800e450:	3301      	adds	r3, #1
 800e452:	77fb      	strb	r3, [r7, #31]
        ++pcb_reset;
 800e454:	7fbb      	ldrb	r3, [r7, #30]
 800e456:	3301      	adds	r3, #1
 800e458:	77bb      	strb	r3, [r7, #30]
 800e45a:	e03c      	b.n	800e4d6 <tcp_slowtmr+0x2e2>
 800e45c:	2000ac38 	.word	0x2000ac38
 800e460:	20004212 	.word	0x20004212
 800e464:	2000ac34 	.word	0x2000ac34
 800e468:	08019ebc 	.word	0x08019ebc
 800e46c:	0801a06c 	.word	0x0801a06c
 800e470:	08019ef8 	.word	0x08019ef8
 800e474:	0801a098 	.word	0x0801a098
 800e478:	0801a0c4 	.word	0x0801a0c4
 800e47c:	0801b880 	.word	0x0801b880
 800e480:	0801b870 	.word	0x0801b870
 800e484:	10624dd3 	.word	0x10624dd3
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800e488:	4b97      	ldr	r3, [pc, #604]	; (800e6e8 <tcp_slowtmr+0x4f4>)
 800e48a:	681a      	ldr	r2, [r3, #0]
 800e48c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e48e:	6a1b      	ldr	r3, [r3, #32]
 800e490:	1ad2      	subs	r2, r2, r3
                (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 800e492:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e494:	f8d3 1090 	ldr.w	r1, [r3, #144]	; 0x90
 800e498:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e49a:	f893 3096 	ldrb.w	r3, [r3, #150]	; 0x96
 800e49e:	4618      	mov	r0, r3
 800e4a0:	4b92      	ldr	r3, [pc, #584]	; (800e6ec <tcp_slowtmr+0x4f8>)
 800e4a2:	fb03 f300 	mul.w	r3, r3, r0
 800e4a6:	440b      	add	r3, r1
                / TCP_SLOW_INTERVAL)
 800e4a8:	4991      	ldr	r1, [pc, #580]	; (800e6f0 <tcp_slowtmr+0x4fc>)
 800e4aa:	fba1 1303 	umull	r1, r3, r1, r3
 800e4ae:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800e4b0:	429a      	cmp	r2, r3
 800e4b2:	d910      	bls.n	800e4d6 <tcp_slowtmr+0x2e2>
      {
        err = tcp_keepalive(pcb);
 800e4b4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e4b6:	f004 faba 	bl	8012a2e <tcp_keepalive>
 800e4ba:	4603      	mov	r3, r0
 800e4bc:	777b      	strb	r3, [r7, #29]
        if (err == ERR_OK) {
 800e4be:	f997 301d 	ldrsb.w	r3, [r7, #29]
 800e4c2:	2b00      	cmp	r3, #0
 800e4c4:	d107      	bne.n	800e4d6 <tcp_slowtmr+0x2e2>
          pcb->keep_cnt_sent++;
 800e4c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e4c8:	f893 3096 	ldrb.w	r3, [r3, #150]	; 0x96
 800e4cc:	3301      	adds	r3, #1
 800e4ce:	b2da      	uxtb	r2, r3
 800e4d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e4d2:	f883 2096 	strb.w	r2, [r3, #150]	; 0x96

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 800e4d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e4d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e4da:	2b00      	cmp	r3, #0
 800e4dc:	d016      	beq.n	800e50c <tcp_slowtmr+0x318>
        (u32_t)tcp_ticks - pcb->tmr >= pcb->rto * TCP_OOSEQ_TIMEOUT) {
 800e4de:	4b82      	ldr	r3, [pc, #520]	; (800e6e8 <tcp_slowtmr+0x4f4>)
 800e4e0:	681a      	ldr	r2, [r3, #0]
 800e4e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e4e4:	6a1b      	ldr	r3, [r3, #32]
 800e4e6:	1ad2      	subs	r2, r2, r3
 800e4e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e4ea:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800e4ee:	4619      	mov	r1, r3
 800e4f0:	460b      	mov	r3, r1
 800e4f2:	005b      	lsls	r3, r3, #1
 800e4f4:	440b      	add	r3, r1
 800e4f6:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 800e4f8:	429a      	cmp	r2, r3
 800e4fa:	d307      	bcc.n	800e50c <tcp_slowtmr+0x318>
      tcp_segs_free(pcb->ooseq);
 800e4fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e4fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e500:	4618      	mov	r0, r3
 800e502:	f000 fa04 	bl	800e90e <tcp_segs_free>
      pcb->ooseq = NULL;
 800e506:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e508:	2200      	movs	r2, #0
 800e50a:	671a      	str	r2, [r3, #112]	; 0x70
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 800e50c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e50e:	7d1b      	ldrb	r3, [r3, #20]
 800e510:	2b03      	cmp	r3, #3
 800e512:	d109      	bne.n	800e528 <tcp_slowtmr+0x334>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800e514:	4b74      	ldr	r3, [pc, #464]	; (800e6e8 <tcp_slowtmr+0x4f4>)
 800e516:	681a      	ldr	r2, [r3, #0]
 800e518:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e51a:	6a1b      	ldr	r3, [r3, #32]
 800e51c:	1ad3      	subs	r3, r2, r3
 800e51e:	2b28      	cmp	r3, #40	; 0x28
 800e520:	d902      	bls.n	800e528 <tcp_slowtmr+0x334>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 800e522:	7ffb      	ldrb	r3, [r7, #31]
 800e524:	3301      	adds	r3, #1
 800e526:	77fb      	strb	r3, [r7, #31]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 800e528:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e52a:	7d1b      	ldrb	r3, [r3, #20]
 800e52c:	2b09      	cmp	r3, #9
 800e52e:	d109      	bne.n	800e544 <tcp_slowtmr+0x350>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800e530:	4b6d      	ldr	r3, [pc, #436]	; (800e6e8 <tcp_slowtmr+0x4f4>)
 800e532:	681a      	ldr	r2, [r3, #0]
 800e534:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e536:	6a1b      	ldr	r3, [r3, #32]
 800e538:	1ad3      	subs	r3, r2, r3
 800e53a:	2bf0      	cmp	r3, #240	; 0xf0
 800e53c:	d902      	bls.n	800e544 <tcp_slowtmr+0x350>
        ++pcb_remove;
 800e53e:	7ffb      	ldrb	r3, [r7, #31]
 800e540:	3301      	adds	r3, #1
 800e542:	77fb      	strb	r3, [r7, #31]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800e544:	7ffb      	ldrb	r3, [r7, #31]
 800e546:	2b00      	cmp	r3, #0
 800e548:	d05d      	beq.n	800e606 <tcp_slowtmr+0x412>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 800e54a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e54c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e550:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 800e552:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e554:	f000 fc4c 	bl	800edf0 <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 800e558:	6a3b      	ldr	r3, [r7, #32]
 800e55a:	2b00      	cmp	r3, #0
 800e55c:	d010      	beq.n	800e580 <tcp_slowtmr+0x38c>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 800e55e:	4b65      	ldr	r3, [pc, #404]	; (800e6f4 <tcp_slowtmr+0x500>)
 800e560:	681b      	ldr	r3, [r3, #0]
 800e562:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e564:	429a      	cmp	r2, r3
 800e566:	d106      	bne.n	800e576 <tcp_slowtmr+0x382>
 800e568:	4b63      	ldr	r3, [pc, #396]	; (800e6f8 <tcp_slowtmr+0x504>)
 800e56a:	f240 4289 	movw	r2, #1161	; 0x489
 800e56e:	4963      	ldr	r1, [pc, #396]	; (800e6fc <tcp_slowtmr+0x508>)
 800e570:	4863      	ldr	r0, [pc, #396]	; (800e700 <tcp_slowtmr+0x50c>)
 800e572:	f00a f869 	bl	8018648 <iprintf>
        prev->next = pcb->next;
 800e576:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e578:	68da      	ldr	r2, [r3, #12]
 800e57a:	6a3b      	ldr	r3, [r7, #32]
 800e57c:	60da      	str	r2, [r3, #12]
 800e57e:	e00f      	b.n	800e5a0 <tcp_slowtmr+0x3ac>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 800e580:	4b5c      	ldr	r3, [pc, #368]	; (800e6f4 <tcp_slowtmr+0x500>)
 800e582:	681b      	ldr	r3, [r3, #0]
 800e584:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e586:	429a      	cmp	r2, r3
 800e588:	d006      	beq.n	800e598 <tcp_slowtmr+0x3a4>
 800e58a:	4b5b      	ldr	r3, [pc, #364]	; (800e6f8 <tcp_slowtmr+0x504>)
 800e58c:	f240 428d 	movw	r2, #1165	; 0x48d
 800e590:	495c      	ldr	r1, [pc, #368]	; (800e704 <tcp_slowtmr+0x510>)
 800e592:	485b      	ldr	r0, [pc, #364]	; (800e700 <tcp_slowtmr+0x50c>)
 800e594:	f00a f858 	bl	8018648 <iprintf>
        tcp_active_pcbs = pcb->next;
 800e598:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e59a:	68db      	ldr	r3, [r3, #12]
 800e59c:	4a55      	ldr	r2, [pc, #340]	; (800e6f4 <tcp_slowtmr+0x500>)
 800e59e:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 800e5a0:	7fbb      	ldrb	r3, [r7, #30]
 800e5a2:	2b00      	cmp	r3, #0
 800e5a4:	d010      	beq.n	800e5c8 <tcp_slowtmr+0x3d4>
        tcp_rst(pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800e5a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e5a8:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800e5aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e5ac:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800e5ae:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 800e5b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e5b2:	1d1d      	adds	r5, r3, #4
 800e5b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e5b6:	8adb      	ldrh	r3, [r3, #22]
 800e5b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e5ba:	8b12      	ldrh	r2, [r2, #24]
 800e5bc:	9201      	str	r2, [sp, #4]
 800e5be:	9300      	str	r3, [sp, #0]
 800e5c0:	462b      	mov	r3, r5
 800e5c2:	4622      	mov	r2, r4
 800e5c4:	f004 f8e0 	bl	8012788 <tcp_rst>
                 pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 800e5c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e5ca:	691b      	ldr	r3, [r3, #16]
 800e5cc:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 800e5ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e5d0:	7d1b      	ldrb	r3, [r3, #20]
 800e5d2:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 800e5d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e5d6:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 800e5d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e5da:	68db      	ldr	r3, [r3, #12]
 800e5dc:	627b      	str	r3, [r7, #36]	; 0x24
      memp_free(MEMP_TCP_PCB, pcb2);
 800e5de:	6839      	ldr	r1, [r7, #0]
 800e5e0:	2001      	movs	r0, #1
 800e5e2:	f7fe f953 	bl	800c88c <memp_free>

      tcp_active_pcbs_changed = 0;
 800e5e6:	4b48      	ldr	r3, [pc, #288]	; (800e708 <tcp_slowtmr+0x514>)
 800e5e8:	2200      	movs	r2, #0
 800e5ea:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 800e5ec:	68fb      	ldr	r3, [r7, #12]
 800e5ee:	2b00      	cmp	r3, #0
 800e5f0:	d004      	beq.n	800e5fc <tcp_slowtmr+0x408>
 800e5f2:	68fb      	ldr	r3, [r7, #12]
 800e5f4:	f06f 010c 	mvn.w	r1, #12
 800e5f8:	68b8      	ldr	r0, [r7, #8]
 800e5fa:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 800e5fc:	4b42      	ldr	r3, [pc, #264]	; (800e708 <tcp_slowtmr+0x514>)
 800e5fe:	781b      	ldrb	r3, [r3, #0]
 800e600:	2b00      	cmp	r3, #0
 800e602:	d035      	beq.n	800e670 <tcp_slowtmr+0x47c>
        goto tcp_slowtmr_start;
 800e604:	e606      	b.n	800e214 <tcp_slowtmr+0x20>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 800e606:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e608:	623b      	str	r3, [r7, #32]
      pcb = pcb->next;
 800e60a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e60c:	68db      	ldr	r3, [r3, #12]
 800e60e:	627b      	str	r3, [r7, #36]	; 0x24

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 800e610:	6a3b      	ldr	r3, [r7, #32]
 800e612:	7edb      	ldrb	r3, [r3, #27]
 800e614:	3301      	adds	r3, #1
 800e616:	b2da      	uxtb	r2, r3
 800e618:	6a3b      	ldr	r3, [r7, #32]
 800e61a:	76da      	strb	r2, [r3, #27]
      if (prev->polltmr >= prev->pollinterval) {
 800e61c:	6a3b      	ldr	r3, [r7, #32]
 800e61e:	7eda      	ldrb	r2, [r3, #27]
 800e620:	6a3b      	ldr	r3, [r7, #32]
 800e622:	7f1b      	ldrb	r3, [r3, #28]
 800e624:	429a      	cmp	r2, r3
 800e626:	d323      	bcc.n	800e670 <tcp_slowtmr+0x47c>
        prev->polltmr = 0;
 800e628:	6a3b      	ldr	r3, [r7, #32]
 800e62a:	2200      	movs	r2, #0
 800e62c:	76da      	strb	r2, [r3, #27]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 800e62e:	4b36      	ldr	r3, [pc, #216]	; (800e708 <tcp_slowtmr+0x514>)
 800e630:	2200      	movs	r2, #0
 800e632:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 800e634:	6a3b      	ldr	r3, [r7, #32]
 800e636:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e63a:	2b00      	cmp	r3, #0
 800e63c:	d00a      	beq.n	800e654 <tcp_slowtmr+0x460>
 800e63e:	6a3b      	ldr	r3, [r7, #32]
 800e640:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e644:	6a3a      	ldr	r2, [r7, #32]
 800e646:	6912      	ldr	r2, [r2, #16]
 800e648:	6a39      	ldr	r1, [r7, #32]
 800e64a:	4610      	mov	r0, r2
 800e64c:	4798      	blx	r3
 800e64e:	4603      	mov	r3, r0
 800e650:	777b      	strb	r3, [r7, #29]
 800e652:	e001      	b.n	800e658 <tcp_slowtmr+0x464>
 800e654:	2300      	movs	r3, #0
 800e656:	777b      	strb	r3, [r7, #29]
        if (tcp_active_pcbs_changed) {
 800e658:	4b2b      	ldr	r3, [pc, #172]	; (800e708 <tcp_slowtmr+0x514>)
 800e65a:	781b      	ldrb	r3, [r3, #0]
 800e65c:	2b00      	cmp	r3, #0
 800e65e:	d000      	beq.n	800e662 <tcp_slowtmr+0x46e>
          goto tcp_slowtmr_start;
 800e660:	e5d8      	b.n	800e214 <tcp_slowtmr+0x20>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 800e662:	f997 301d 	ldrsb.w	r3, [r7, #29]
 800e666:	2b00      	cmp	r3, #0
 800e668:	d102      	bne.n	800e670 <tcp_slowtmr+0x47c>
          tcp_output(prev);
 800e66a:	6a38      	ldr	r0, [r7, #32]
 800e66c:	f003 fe02 	bl	8012274 <tcp_output>
  while (pcb != NULL) {
 800e670:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e672:	2b00      	cmp	r3, #0
 800e674:	f47f add4 	bne.w	800e220 <tcp_slowtmr+0x2c>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 800e678:	2300      	movs	r3, #0
 800e67a:	623b      	str	r3, [r7, #32]
  pcb = tcp_tw_pcbs;
 800e67c:	4b23      	ldr	r3, [pc, #140]	; (800e70c <tcp_slowtmr+0x518>)
 800e67e:	681b      	ldr	r3, [r3, #0]
 800e680:	627b      	str	r3, [r7, #36]	; 0x24
  while (pcb != NULL) {
 800e682:	e068      	b.n	800e756 <tcp_slowtmr+0x562>
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800e684:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e686:	7d1b      	ldrb	r3, [r3, #20]
 800e688:	2b0a      	cmp	r3, #10
 800e68a:	d006      	beq.n	800e69a <tcp_slowtmr+0x4a6>
 800e68c:	4b1a      	ldr	r3, [pc, #104]	; (800e6f8 <tcp_slowtmr+0x504>)
 800e68e:	f240 42bd 	movw	r2, #1213	; 0x4bd
 800e692:	491f      	ldr	r1, [pc, #124]	; (800e710 <tcp_slowtmr+0x51c>)
 800e694:	481a      	ldr	r0, [pc, #104]	; (800e700 <tcp_slowtmr+0x50c>)
 800e696:	f009 ffd7 	bl	8018648 <iprintf>
    pcb_remove = 0;
 800e69a:	2300      	movs	r3, #0
 800e69c:	77fb      	strb	r3, [r7, #31]

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800e69e:	4b12      	ldr	r3, [pc, #72]	; (800e6e8 <tcp_slowtmr+0x4f4>)
 800e6a0:	681a      	ldr	r2, [r3, #0]
 800e6a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e6a4:	6a1b      	ldr	r3, [r3, #32]
 800e6a6:	1ad3      	subs	r3, r2, r3
 800e6a8:	2bf0      	cmp	r3, #240	; 0xf0
 800e6aa:	d902      	bls.n	800e6b2 <tcp_slowtmr+0x4be>
      ++pcb_remove;
 800e6ac:	7ffb      	ldrb	r3, [r7, #31]
 800e6ae:	3301      	adds	r3, #1
 800e6b0:	77fb      	strb	r3, [r7, #31]
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800e6b2:	7ffb      	ldrb	r3, [r7, #31]
 800e6b4:	2b00      	cmp	r3, #0
 800e6b6:	d049      	beq.n	800e74c <tcp_slowtmr+0x558>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 800e6b8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e6ba:	f000 fb99 	bl	800edf0 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 800e6be:	6a3b      	ldr	r3, [r7, #32]
 800e6c0:	2b00      	cmp	r3, #0
 800e6c2:	d029      	beq.n	800e718 <tcp_slowtmr+0x524>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 800e6c4:	4b11      	ldr	r3, [pc, #68]	; (800e70c <tcp_slowtmr+0x518>)
 800e6c6:	681b      	ldr	r3, [r3, #0]
 800e6c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e6ca:	429a      	cmp	r2, r3
 800e6cc:	d106      	bne.n	800e6dc <tcp_slowtmr+0x4e8>
 800e6ce:	4b0a      	ldr	r3, [pc, #40]	; (800e6f8 <tcp_slowtmr+0x504>)
 800e6d0:	f240 42cb 	movw	r2, #1227	; 0x4cb
 800e6d4:	490f      	ldr	r1, [pc, #60]	; (800e714 <tcp_slowtmr+0x520>)
 800e6d6:	480a      	ldr	r0, [pc, #40]	; (800e700 <tcp_slowtmr+0x50c>)
 800e6d8:	f009 ffb6 	bl	8018648 <iprintf>
        prev->next = pcb->next;
 800e6dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e6de:	68da      	ldr	r2, [r3, #12]
 800e6e0:	6a3b      	ldr	r3, [r7, #32]
 800e6e2:	60da      	str	r2, [r3, #12]
 800e6e4:	e028      	b.n	800e738 <tcp_slowtmr+0x544>
 800e6e6:	bf00      	nop
 800e6e8:	2000ac38 	.word	0x2000ac38
 800e6ec:	000124f8 	.word	0x000124f8
 800e6f0:	10624dd3 	.word	0x10624dd3
 800e6f4:	2000ac34 	.word	0x2000ac34
 800e6f8:	08019ebc 	.word	0x08019ebc
 800e6fc:	0801a0f4 	.word	0x0801a0f4
 800e700:	08019ef8 	.word	0x08019ef8
 800e704:	0801a120 	.word	0x0801a120
 800e708:	2000ac30 	.word	0x2000ac30
 800e70c:	2000ac44 	.word	0x2000ac44
 800e710:	0801a14c 	.word	0x0801a14c
 800e714:	0801a17c 	.word	0x0801a17c
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 800e718:	4b12      	ldr	r3, [pc, #72]	; (800e764 <tcp_slowtmr+0x570>)
 800e71a:	681b      	ldr	r3, [r3, #0]
 800e71c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e71e:	429a      	cmp	r2, r3
 800e720:	d006      	beq.n	800e730 <tcp_slowtmr+0x53c>
 800e722:	4b11      	ldr	r3, [pc, #68]	; (800e768 <tcp_slowtmr+0x574>)
 800e724:	f240 42cf 	movw	r2, #1231	; 0x4cf
 800e728:	4910      	ldr	r1, [pc, #64]	; (800e76c <tcp_slowtmr+0x578>)
 800e72a:	4811      	ldr	r0, [pc, #68]	; (800e770 <tcp_slowtmr+0x57c>)
 800e72c:	f009 ff8c 	bl	8018648 <iprintf>
        tcp_tw_pcbs = pcb->next;
 800e730:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e732:	68db      	ldr	r3, [r3, #12]
 800e734:	4a0b      	ldr	r2, [pc, #44]	; (800e764 <tcp_slowtmr+0x570>)
 800e736:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 800e738:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e73a:	61bb      	str	r3, [r7, #24]
      pcb = pcb->next;
 800e73c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e73e:	68db      	ldr	r3, [r3, #12]
 800e740:	627b      	str	r3, [r7, #36]	; 0x24
      memp_free(MEMP_TCP_PCB, pcb2);
 800e742:	69b9      	ldr	r1, [r7, #24]
 800e744:	2001      	movs	r0, #1
 800e746:	f7fe f8a1 	bl	800c88c <memp_free>
 800e74a:	e004      	b.n	800e756 <tcp_slowtmr+0x562>
    } else {
      prev = pcb;
 800e74c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e74e:	623b      	str	r3, [r7, #32]
      pcb = pcb->next;
 800e750:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e752:	68db      	ldr	r3, [r3, #12]
 800e754:	627b      	str	r3, [r7, #36]	; 0x24
  while (pcb != NULL) {
 800e756:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e758:	2b00      	cmp	r3, #0
 800e75a:	d193      	bne.n	800e684 <tcp_slowtmr+0x490>
    }
  }
}
 800e75c:	bf00      	nop
 800e75e:	3728      	adds	r7, #40	; 0x28
 800e760:	46bd      	mov	sp, r7
 800e762:	bdb0      	pop	{r4, r5, r7, pc}
 800e764:	2000ac44 	.word	0x2000ac44
 800e768:	08019ebc 	.word	0x08019ebc
 800e76c:	0801a1a4 	.word	0x0801a1a4
 800e770:	08019ef8 	.word	0x08019ef8

0800e774 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 800e774:	b580      	push	{r7, lr}
 800e776:	b082      	sub	sp, #8
 800e778:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 800e77a:	4b2d      	ldr	r3, [pc, #180]	; (800e830 <tcp_fasttmr+0xbc>)
 800e77c:	781b      	ldrb	r3, [r3, #0]
 800e77e:	3301      	adds	r3, #1
 800e780:	b2da      	uxtb	r2, r3
 800e782:	4b2b      	ldr	r3, [pc, #172]	; (800e830 <tcp_fasttmr+0xbc>)
 800e784:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 800e786:	4b2b      	ldr	r3, [pc, #172]	; (800e834 <tcp_fasttmr+0xc0>)
 800e788:	681b      	ldr	r3, [r3, #0]
 800e78a:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800e78c:	e048      	b.n	800e820 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 800e78e:	687b      	ldr	r3, [r7, #4]
 800e790:	7f5a      	ldrb	r2, [r3, #29]
 800e792:	4b27      	ldr	r3, [pc, #156]	; (800e830 <tcp_fasttmr+0xbc>)
 800e794:	781b      	ldrb	r3, [r3, #0]
 800e796:	429a      	cmp	r2, r3
 800e798:	d03f      	beq.n	800e81a <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 800e79a:	4b25      	ldr	r3, [pc, #148]	; (800e830 <tcp_fasttmr+0xbc>)
 800e79c:	781a      	ldrb	r2, [r3, #0]
 800e79e:	687b      	ldr	r3, [r7, #4]
 800e7a0:	775a      	strb	r2, [r3, #29]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 800e7a2:	687b      	ldr	r3, [r7, #4]
 800e7a4:	7e9b      	ldrb	r3, [r3, #26]
 800e7a6:	f003 0301 	and.w	r3, r3, #1
 800e7aa:	2b00      	cmp	r3, #0
 800e7ac:	d010      	beq.n	800e7d0 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 800e7ae:	687b      	ldr	r3, [r7, #4]
 800e7b0:	7e9b      	ldrb	r3, [r3, #26]
 800e7b2:	f043 0302 	orr.w	r3, r3, #2
 800e7b6:	b2da      	uxtb	r2, r3
 800e7b8:	687b      	ldr	r3, [r7, #4]
 800e7ba:	769a      	strb	r2, [r3, #26]
        tcp_output(pcb);
 800e7bc:	6878      	ldr	r0, [r7, #4]
 800e7be:	f003 fd59 	bl	8012274 <tcp_output>
        pcb->flags &= ~(TF_ACK_DELAY | TF_ACK_NOW);
 800e7c2:	687b      	ldr	r3, [r7, #4]
 800e7c4:	7e9b      	ldrb	r3, [r3, #26]
 800e7c6:	f023 0303 	bic.w	r3, r3, #3
 800e7ca:	b2da      	uxtb	r2, r3
 800e7cc:	687b      	ldr	r3, [r7, #4]
 800e7ce:	769a      	strb	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 800e7d0:	687b      	ldr	r3, [r7, #4]
 800e7d2:	7e9b      	ldrb	r3, [r3, #26]
 800e7d4:	f003 0308 	and.w	r3, r3, #8
 800e7d8:	2b00      	cmp	r3, #0
 800e7da:	d009      	beq.n	800e7f0 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        pcb->flags &= ~(TF_CLOSEPEND);
 800e7dc:	687b      	ldr	r3, [r7, #4]
 800e7de:	7e9b      	ldrb	r3, [r3, #26]
 800e7e0:	f023 0308 	bic.w	r3, r3, #8
 800e7e4:	b2da      	uxtb	r2, r3
 800e7e6:	687b      	ldr	r3, [r7, #4]
 800e7e8:	769a      	strb	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 800e7ea:	6878      	ldr	r0, [r7, #4]
 800e7ec:	f7ff f98e 	bl	800db0c <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 800e7f0:	687b      	ldr	r3, [r7, #4]
 800e7f2:	68db      	ldr	r3, [r3, #12]
 800e7f4:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 800e7f6:	687b      	ldr	r3, [r7, #4]
 800e7f8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e7fa:	2b00      	cmp	r3, #0
 800e7fc:	d00a      	beq.n	800e814 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 800e7fe:	4b0e      	ldr	r3, [pc, #56]	; (800e838 <tcp_fasttmr+0xc4>)
 800e800:	2200      	movs	r2, #0
 800e802:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 800e804:	6878      	ldr	r0, [r7, #4]
 800e806:	f000 f819 	bl	800e83c <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 800e80a:	4b0b      	ldr	r3, [pc, #44]	; (800e838 <tcp_fasttmr+0xc4>)
 800e80c:	781b      	ldrb	r3, [r3, #0]
 800e80e:	2b00      	cmp	r3, #0
 800e810:	d000      	beq.n	800e814 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 800e812:	e7b8      	b.n	800e786 <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 800e814:	683b      	ldr	r3, [r7, #0]
 800e816:	607b      	str	r3, [r7, #4]
 800e818:	e002      	b.n	800e820 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 800e81a:	687b      	ldr	r3, [r7, #4]
 800e81c:	68db      	ldr	r3, [r3, #12]
 800e81e:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800e820:	687b      	ldr	r3, [r7, #4]
 800e822:	2b00      	cmp	r3, #0
 800e824:	d1b3      	bne.n	800e78e <tcp_fasttmr+0x1a>
    }
  }
}
 800e826:	bf00      	nop
 800e828:	3708      	adds	r7, #8
 800e82a:	46bd      	mov	sp, r7
 800e82c:	bd80      	pop	{r7, pc}
 800e82e:	bf00      	nop
 800e830:	20004212 	.word	0x20004212
 800e834:	2000ac34 	.word	0x2000ac34
 800e838:	2000ac30 	.word	0x2000ac30

0800e83c <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 800e83c:	b590      	push	{r4, r7, lr}
 800e83e:	b085      	sub	sp, #20
 800e840:	af00      	add	r7, sp, #0
 800e842:	6078      	str	r0, [r7, #4]
  struct pbuf *rest;
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 800e844:	687b      	ldr	r3, [r7, #4]
 800e846:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e848:	7b5b      	ldrb	r3, [r3, #13]
 800e84a:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 800e84c:	687b      	ldr	r3, [r7, #4]
 800e84e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e850:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 800e852:	687b      	ldr	r3, [r7, #4]
 800e854:	2200      	movs	r2, #0
 800e856:	675a      	str	r2, [r3, #116]	; 0x74
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 800e858:	687b      	ldr	r3, [r7, #4]
 800e85a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e85e:	2b00      	cmp	r3, #0
 800e860:	d00b      	beq.n	800e87a <tcp_process_refused_data+0x3e>
 800e862:	687b      	ldr	r3, [r7, #4]
 800e864:	f8d3 4080 	ldr.w	r4, [r3, #128]	; 0x80
 800e868:	687b      	ldr	r3, [r7, #4]
 800e86a:	6918      	ldr	r0, [r3, #16]
 800e86c:	2300      	movs	r3, #0
 800e86e:	68ba      	ldr	r2, [r7, #8]
 800e870:	6879      	ldr	r1, [r7, #4]
 800e872:	47a0      	blx	r4
 800e874:	4603      	mov	r3, r0
 800e876:	73fb      	strb	r3, [r7, #15]
 800e878:	e007      	b.n	800e88a <tcp_process_refused_data+0x4e>
 800e87a:	2300      	movs	r3, #0
 800e87c:	68ba      	ldr	r2, [r7, #8]
 800e87e:	6879      	ldr	r1, [r7, #4]
 800e880:	2000      	movs	r0, #0
 800e882:	f000 f89b 	bl	800e9bc <tcp_recv_null>
 800e886:	4603      	mov	r3, r0
 800e888:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 800e88a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e88e:	2b00      	cmp	r3, #0
 800e890:	d12a      	bne.n	800e8e8 <tcp_process_refused_data+0xac>
      /* did refused_data include a FIN? */
      if (refused_flags & PBUF_FLAG_TCP_FIN
 800e892:	7bbb      	ldrb	r3, [r7, #14]
 800e894:	f003 0320 	and.w	r3, r3, #32
 800e898:	2b00      	cmp	r3, #0
 800e89a:	d033      	beq.n	800e904 <tcp_process_refused_data+0xc8>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800e89c:	687b      	ldr	r3, [r7, #4]
 800e89e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e8a0:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800e8a4:	d005      	beq.n	800e8b2 <tcp_process_refused_data+0x76>
          pcb->rcv_wnd++;
 800e8a6:	687b      	ldr	r3, [r7, #4]
 800e8a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e8aa:	3301      	adds	r3, #1
 800e8ac:	b29a      	uxth	r2, r3
 800e8ae:	687b      	ldr	r3, [r7, #4]
 800e8b0:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 800e8b2:	687b      	ldr	r3, [r7, #4]
 800e8b4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e8b8:	2b00      	cmp	r3, #0
 800e8ba:	d00b      	beq.n	800e8d4 <tcp_process_refused_data+0x98>
 800e8bc:	687b      	ldr	r3, [r7, #4]
 800e8be:	f8d3 4080 	ldr.w	r4, [r3, #128]	; 0x80
 800e8c2:	687b      	ldr	r3, [r7, #4]
 800e8c4:	6918      	ldr	r0, [r3, #16]
 800e8c6:	2300      	movs	r3, #0
 800e8c8:	2200      	movs	r2, #0
 800e8ca:	6879      	ldr	r1, [r7, #4]
 800e8cc:	47a0      	blx	r4
 800e8ce:	4603      	mov	r3, r0
 800e8d0:	73fb      	strb	r3, [r7, #15]
 800e8d2:	e001      	b.n	800e8d8 <tcp_process_refused_data+0x9c>
 800e8d4:	2300      	movs	r3, #0
 800e8d6:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 800e8d8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e8dc:	f113 0f0d 	cmn.w	r3, #13
 800e8e0:	d110      	bne.n	800e904 <tcp_process_refused_data+0xc8>
          return ERR_ABRT;
 800e8e2:	f06f 030c 	mvn.w	r3, #12
 800e8e6:	e00e      	b.n	800e906 <tcp_process_refused_data+0xca>
        }
      }
    } else if (err == ERR_ABRT) {
 800e8e8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e8ec:	f113 0f0d 	cmn.w	r3, #13
 800e8f0:	d102      	bne.n	800e8f8 <tcp_process_refused_data+0xbc>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 800e8f2:	f06f 030c 	mvn.w	r3, #12
 800e8f6:	e006      	b.n	800e906 <tcp_process_refused_data+0xca>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 800e8f8:	687b      	ldr	r3, [r7, #4]
 800e8fa:	68ba      	ldr	r2, [r7, #8]
 800e8fc:	675a      	str	r2, [r3, #116]	; 0x74
      return ERR_INPROGRESS;
 800e8fe:	f06f 0304 	mvn.w	r3, #4
 800e902:	e000      	b.n	800e906 <tcp_process_refused_data+0xca>
    }
  }
  return ERR_OK;
 800e904:	2300      	movs	r3, #0
}
 800e906:	4618      	mov	r0, r3
 800e908:	3714      	adds	r7, #20
 800e90a:	46bd      	mov	sp, r7
 800e90c:	bd90      	pop	{r4, r7, pc}

0800e90e <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 800e90e:	b580      	push	{r7, lr}
 800e910:	b084      	sub	sp, #16
 800e912:	af00      	add	r7, sp, #0
 800e914:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 800e916:	e007      	b.n	800e928 <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 800e918:	687b      	ldr	r3, [r7, #4]
 800e91a:	681b      	ldr	r3, [r3, #0]
 800e91c:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 800e91e:	6878      	ldr	r0, [r7, #4]
 800e920:	f000 f809 	bl	800e936 <tcp_seg_free>
    seg = next;
 800e924:	68fb      	ldr	r3, [r7, #12]
 800e926:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 800e928:	687b      	ldr	r3, [r7, #4]
 800e92a:	2b00      	cmp	r3, #0
 800e92c:	d1f4      	bne.n	800e918 <tcp_segs_free+0xa>
  }
}
 800e92e:	bf00      	nop
 800e930:	3710      	adds	r7, #16
 800e932:	46bd      	mov	sp, r7
 800e934:	bd80      	pop	{r7, pc}

0800e936 <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 800e936:	b580      	push	{r7, lr}
 800e938:	b082      	sub	sp, #8
 800e93a:	af00      	add	r7, sp, #0
 800e93c:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 800e93e:	687b      	ldr	r3, [r7, #4]
 800e940:	2b00      	cmp	r3, #0
 800e942:	d00c      	beq.n	800e95e <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 800e944:	687b      	ldr	r3, [r7, #4]
 800e946:	685b      	ldr	r3, [r3, #4]
 800e948:	2b00      	cmp	r3, #0
 800e94a:	d004      	beq.n	800e956 <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 800e94c:	687b      	ldr	r3, [r7, #4]
 800e94e:	685b      	ldr	r3, [r3, #4]
 800e950:	4618      	mov	r0, r3
 800e952:	f7fe fcfd 	bl	800d350 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 800e956:	6879      	ldr	r1, [r7, #4]
 800e958:	2003      	movs	r0, #3
 800e95a:	f7fd ff97 	bl	800c88c <memp_free>
  }
}
 800e95e:	bf00      	nop
 800e960:	3708      	adds	r7, #8
 800e962:	46bd      	mov	sp, r7
 800e964:	bd80      	pop	{r7, pc}

0800e966 <tcp_setprio>:
 * @param pcb the tcp_pcb to manipulate
 * @param prio new priority
 */
void
tcp_setprio(struct tcp_pcb *pcb, u8_t prio)
{
 800e966:	b480      	push	{r7}
 800e968:	b083      	sub	sp, #12
 800e96a:	af00      	add	r7, sp, #0
 800e96c:	6078      	str	r0, [r7, #4]
 800e96e:	460b      	mov	r3, r1
 800e970:	70fb      	strb	r3, [r7, #3]
  pcb->prio = prio;
 800e972:	687b      	ldr	r3, [r7, #4]
 800e974:	78fa      	ldrb	r2, [r7, #3]
 800e976:	755a      	strb	r2, [r3, #21]
}
 800e978:	bf00      	nop
 800e97a:	370c      	adds	r7, #12
 800e97c:	46bd      	mov	sp, r7
 800e97e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e982:	4770      	bx	lr

0800e984 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 800e984:	b580      	push	{r7, lr}
 800e986:	b084      	sub	sp, #16
 800e988:	af00      	add	r7, sp, #0
 800e98a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 800e98c:	2003      	movs	r0, #3
 800e98e:	f7fd ff2b 	bl	800c7e8 <memp_malloc>
 800e992:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 800e994:	68fb      	ldr	r3, [r7, #12]
 800e996:	2b00      	cmp	r3, #0
 800e998:	d101      	bne.n	800e99e <tcp_seg_copy+0x1a>
    return NULL;
 800e99a:	2300      	movs	r3, #0
 800e99c:	e00a      	b.n	800e9b4 <tcp_seg_copy+0x30>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 800e99e:	2210      	movs	r2, #16
 800e9a0:	6879      	ldr	r1, [r7, #4]
 800e9a2:	68f8      	ldr	r0, [r7, #12]
 800e9a4:	f009 fd95 	bl	80184d2 <memcpy>
  pbuf_ref(cseg->p);
 800e9a8:	68fb      	ldr	r3, [r7, #12]
 800e9aa:	685b      	ldr	r3, [r3, #4]
 800e9ac:	4618      	mov	r0, r3
 800e9ae:	f7fe fd81 	bl	800d4b4 <pbuf_ref>
  return cseg;
 800e9b2:	68fb      	ldr	r3, [r7, #12]
}
 800e9b4:	4618      	mov	r0, r3
 800e9b6:	3710      	adds	r7, #16
 800e9b8:	46bd      	mov	sp, r7
 800e9ba:	bd80      	pop	{r7, pc}

0800e9bc <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 800e9bc:	b580      	push	{r7, lr}
 800e9be:	b084      	sub	sp, #16
 800e9c0:	af00      	add	r7, sp, #0
 800e9c2:	60f8      	str	r0, [r7, #12]
 800e9c4:	60b9      	str	r1, [r7, #8]
 800e9c6:	607a      	str	r2, [r7, #4]
 800e9c8:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);
  if (p != NULL) {
 800e9ca:	687b      	ldr	r3, [r7, #4]
 800e9cc:	2b00      	cmp	r3, #0
 800e9ce:	d009      	beq.n	800e9e4 <tcp_recv_null+0x28>
    tcp_recved(pcb, p->tot_len);
 800e9d0:	687b      	ldr	r3, [r7, #4]
 800e9d2:	891b      	ldrh	r3, [r3, #8]
 800e9d4:	4619      	mov	r1, r3
 800e9d6:	68b8      	ldr	r0, [r7, #8]
 800e9d8:	f7ff fb6e 	bl	800e0b8 <tcp_recved>
    pbuf_free(p);
 800e9dc:	6878      	ldr	r0, [r7, #4]
 800e9de:	f7fe fcb7 	bl	800d350 <pbuf_free>
 800e9e2:	e008      	b.n	800e9f6 <tcp_recv_null+0x3a>
  } else if (err == ERR_OK) {
 800e9e4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800e9e8:	2b00      	cmp	r3, #0
 800e9ea:	d104      	bne.n	800e9f6 <tcp_recv_null+0x3a>
    return tcp_close(pcb);
 800e9ec:	68b8      	ldr	r0, [r7, #8]
 800e9ee:	f7ff f8f3 	bl	800dbd8 <tcp_close>
 800e9f2:	4603      	mov	r3, r0
 800e9f4:	e000      	b.n	800e9f8 <tcp_recv_null+0x3c>
  }
  return ERR_OK;
 800e9f6:	2300      	movs	r3, #0
}
 800e9f8:	4618      	mov	r0, r3
 800e9fa:	3710      	adds	r7, #16
 800e9fc:	46bd      	mov	sp, r7
 800e9fe:	bd80      	pop	{r7, pc}

0800ea00 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 800ea00:	b580      	push	{r7, lr}
 800ea02:	b086      	sub	sp, #24
 800ea04:	af00      	add	r7, sp, #0
 800ea06:	4603      	mov	r3, r0
 800ea08:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 800ea0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ea0e:	2b00      	cmp	r3, #0
 800ea10:	db01      	blt.n	800ea16 <tcp_kill_prio+0x16>
 800ea12:	79fb      	ldrb	r3, [r7, #7]
 800ea14:	e000      	b.n	800ea18 <tcp_kill_prio+0x18>
 800ea16:	237f      	movs	r3, #127	; 0x7f
 800ea18:	72fb      	strb	r3, [r7, #11]

  /* We kill the oldest active connection that has lower priority than prio. */
  inactivity = 0;
 800ea1a:	2300      	movs	r3, #0
 800ea1c:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800ea1e:	2300      	movs	r3, #0
 800ea20:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800ea22:	4b16      	ldr	r3, [pc, #88]	; (800ea7c <tcp_kill_prio+0x7c>)
 800ea24:	681b      	ldr	r3, [r3, #0]
 800ea26:	617b      	str	r3, [r7, #20]
 800ea28:	e01a      	b.n	800ea60 <tcp_kill_prio+0x60>
    if (pcb->prio <= mprio &&
 800ea2a:	697b      	ldr	r3, [r7, #20]
 800ea2c:	7d5b      	ldrb	r3, [r3, #21]
 800ea2e:	7afa      	ldrb	r2, [r7, #11]
 800ea30:	429a      	cmp	r2, r3
 800ea32:	d312      	bcc.n	800ea5a <tcp_kill_prio+0x5a>
       (u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800ea34:	4b12      	ldr	r3, [pc, #72]	; (800ea80 <tcp_kill_prio+0x80>)
 800ea36:	681a      	ldr	r2, [r3, #0]
 800ea38:	697b      	ldr	r3, [r7, #20]
 800ea3a:	6a1b      	ldr	r3, [r3, #32]
 800ea3c:	1ad3      	subs	r3, r2, r3
    if (pcb->prio <= mprio &&
 800ea3e:	68fa      	ldr	r2, [r7, #12]
 800ea40:	429a      	cmp	r2, r3
 800ea42:	d80a      	bhi.n	800ea5a <tcp_kill_prio+0x5a>
      inactivity = tcp_ticks - pcb->tmr;
 800ea44:	4b0e      	ldr	r3, [pc, #56]	; (800ea80 <tcp_kill_prio+0x80>)
 800ea46:	681a      	ldr	r2, [r3, #0]
 800ea48:	697b      	ldr	r3, [r7, #20]
 800ea4a:	6a1b      	ldr	r3, [r3, #32]
 800ea4c:	1ad3      	subs	r3, r2, r3
 800ea4e:	60fb      	str	r3, [r7, #12]
      inactive = pcb;
 800ea50:	697b      	ldr	r3, [r7, #20]
 800ea52:	613b      	str	r3, [r7, #16]
      mprio = pcb->prio;
 800ea54:	697b      	ldr	r3, [r7, #20]
 800ea56:	7d5b      	ldrb	r3, [r3, #21]
 800ea58:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800ea5a:	697b      	ldr	r3, [r7, #20]
 800ea5c:	68db      	ldr	r3, [r3, #12]
 800ea5e:	617b      	str	r3, [r7, #20]
 800ea60:	697b      	ldr	r3, [r7, #20]
 800ea62:	2b00      	cmp	r3, #0
 800ea64:	d1e1      	bne.n	800ea2a <tcp_kill_prio+0x2a>
    }
  }
  if (inactive != NULL) {
 800ea66:	693b      	ldr	r3, [r7, #16]
 800ea68:	2b00      	cmp	r3, #0
 800ea6a:	d002      	beq.n	800ea72 <tcp_kill_prio+0x72>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
           (void *)inactive, inactivity));
    tcp_abort(inactive);
 800ea6c:	6938      	ldr	r0, [r7, #16]
 800ea6e:	f7ff f97d 	bl	800dd6c <tcp_abort>
  }
}
 800ea72:	bf00      	nop
 800ea74:	3718      	adds	r7, #24
 800ea76:	46bd      	mov	sp, r7
 800ea78:	bd80      	pop	{r7, pc}
 800ea7a:	bf00      	nop
 800ea7c:	2000ac34 	.word	0x2000ac34
 800ea80:	2000ac38 	.word	0x2000ac38

0800ea84 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 800ea84:	b580      	push	{r7, lr}
 800ea86:	b086      	sub	sp, #24
 800ea88:	af00      	add	r7, sp, #0
 800ea8a:	4603      	mov	r3, r0
 800ea8c:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 800ea8e:	79fb      	ldrb	r3, [r7, #7]
 800ea90:	2b08      	cmp	r3, #8
 800ea92:	d009      	beq.n	800eaa8 <tcp_kill_state+0x24>
 800ea94:	79fb      	ldrb	r3, [r7, #7]
 800ea96:	2b09      	cmp	r3, #9
 800ea98:	d006      	beq.n	800eaa8 <tcp_kill_state+0x24>
 800ea9a:	4b1a      	ldr	r3, [pc, #104]	; (800eb04 <tcp_kill_state+0x80>)
 800ea9c:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800eaa0:	4919      	ldr	r1, [pc, #100]	; (800eb08 <tcp_kill_state+0x84>)
 800eaa2:	481a      	ldr	r0, [pc, #104]	; (800eb0c <tcp_kill_state+0x88>)
 800eaa4:	f009 fdd0 	bl	8018648 <iprintf>

  inactivity = 0;
 800eaa8:	2300      	movs	r3, #0
 800eaaa:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800eaac:	2300      	movs	r3, #0
 800eaae:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800eab0:	4b17      	ldr	r3, [pc, #92]	; (800eb10 <tcp_kill_state+0x8c>)
 800eab2:	681b      	ldr	r3, [r3, #0]
 800eab4:	617b      	str	r3, [r7, #20]
 800eab6:	e017      	b.n	800eae8 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 800eab8:	697b      	ldr	r3, [r7, #20]
 800eaba:	7d1b      	ldrb	r3, [r3, #20]
 800eabc:	79fa      	ldrb	r2, [r7, #7]
 800eabe:	429a      	cmp	r2, r3
 800eac0:	d10f      	bne.n	800eae2 <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800eac2:	4b14      	ldr	r3, [pc, #80]	; (800eb14 <tcp_kill_state+0x90>)
 800eac4:	681a      	ldr	r2, [r3, #0]
 800eac6:	697b      	ldr	r3, [r7, #20]
 800eac8:	6a1b      	ldr	r3, [r3, #32]
 800eaca:	1ad3      	subs	r3, r2, r3
 800eacc:	68fa      	ldr	r2, [r7, #12]
 800eace:	429a      	cmp	r2, r3
 800ead0:	d807      	bhi.n	800eae2 <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 800ead2:	4b10      	ldr	r3, [pc, #64]	; (800eb14 <tcp_kill_state+0x90>)
 800ead4:	681a      	ldr	r2, [r3, #0]
 800ead6:	697b      	ldr	r3, [r7, #20]
 800ead8:	6a1b      	ldr	r3, [r3, #32]
 800eada:	1ad3      	subs	r3, r2, r3
 800eadc:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 800eade:	697b      	ldr	r3, [r7, #20]
 800eae0:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800eae2:	697b      	ldr	r3, [r7, #20]
 800eae4:	68db      	ldr	r3, [r3, #12]
 800eae6:	617b      	str	r3, [r7, #20]
 800eae8:	697b      	ldr	r3, [r7, #20]
 800eaea:	2b00      	cmp	r3, #0
 800eaec:	d1e4      	bne.n	800eab8 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 800eaee:	693b      	ldr	r3, [r7, #16]
 800eaf0:	2b00      	cmp	r3, #0
 800eaf2:	d003      	beq.n	800eafc <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
           tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 800eaf4:	2100      	movs	r1, #0
 800eaf6:	6938      	ldr	r0, [r7, #16]
 800eaf8:	f7ff f886 	bl	800dc08 <tcp_abandon>
  }
}
 800eafc:	bf00      	nop
 800eafe:	3718      	adds	r7, #24
 800eb00:	46bd      	mov	sp, r7
 800eb02:	bd80      	pop	{r7, pc}
 800eb04:	08019ebc 	.word	0x08019ebc
 800eb08:	0801a1cc 	.word	0x0801a1cc
 800eb0c:	08019ef8 	.word	0x08019ef8
 800eb10:	2000ac34 	.word	0x2000ac34
 800eb14:	2000ac38 	.word	0x2000ac38

0800eb18 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 800eb18:	b580      	push	{r7, lr}
 800eb1a:	b084      	sub	sp, #16
 800eb1c:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 800eb1e:	2300      	movs	r3, #0
 800eb20:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 800eb22:	2300      	movs	r3, #0
 800eb24:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800eb26:	4b12      	ldr	r3, [pc, #72]	; (800eb70 <tcp_kill_timewait+0x58>)
 800eb28:	681b      	ldr	r3, [r3, #0]
 800eb2a:	60fb      	str	r3, [r7, #12]
 800eb2c:	e012      	b.n	800eb54 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800eb2e:	4b11      	ldr	r3, [pc, #68]	; (800eb74 <tcp_kill_timewait+0x5c>)
 800eb30:	681a      	ldr	r2, [r3, #0]
 800eb32:	68fb      	ldr	r3, [r7, #12]
 800eb34:	6a1b      	ldr	r3, [r3, #32]
 800eb36:	1ad3      	subs	r3, r2, r3
 800eb38:	687a      	ldr	r2, [r7, #4]
 800eb3a:	429a      	cmp	r2, r3
 800eb3c:	d807      	bhi.n	800eb4e <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 800eb3e:	4b0d      	ldr	r3, [pc, #52]	; (800eb74 <tcp_kill_timewait+0x5c>)
 800eb40:	681a      	ldr	r2, [r3, #0]
 800eb42:	68fb      	ldr	r3, [r7, #12]
 800eb44:	6a1b      	ldr	r3, [r3, #32]
 800eb46:	1ad3      	subs	r3, r2, r3
 800eb48:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 800eb4a:	68fb      	ldr	r3, [r7, #12]
 800eb4c:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800eb4e:	68fb      	ldr	r3, [r7, #12]
 800eb50:	68db      	ldr	r3, [r3, #12]
 800eb52:	60fb      	str	r3, [r7, #12]
 800eb54:	68fb      	ldr	r3, [r7, #12]
 800eb56:	2b00      	cmp	r3, #0
 800eb58:	d1e9      	bne.n	800eb2e <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 800eb5a:	68bb      	ldr	r3, [r7, #8]
 800eb5c:	2b00      	cmp	r3, #0
 800eb5e:	d002      	beq.n	800eb66 <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
           (void *)inactive, inactivity));
    tcp_abort(inactive);
 800eb60:	68b8      	ldr	r0, [r7, #8]
 800eb62:	f7ff f903 	bl	800dd6c <tcp_abort>
  }
}
 800eb66:	bf00      	nop
 800eb68:	3710      	adds	r7, #16
 800eb6a:	46bd      	mov	sp, r7
 800eb6c:	bd80      	pop	{r7, pc}
 800eb6e:	bf00      	nop
 800eb70:	2000ac44 	.word	0x2000ac44
 800eb74:	2000ac38 	.word	0x2000ac38

0800eb78 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 800eb78:	b580      	push	{r7, lr}
 800eb7a:	b084      	sub	sp, #16
 800eb7c:	af00      	add	r7, sp, #0
 800eb7e:	4603      	mov	r3, r0
 800eb80:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800eb82:	2001      	movs	r0, #1
 800eb84:	f7fd fe30 	bl	800c7e8 <memp_malloc>
 800eb88:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 800eb8a:	68fb      	ldr	r3, [r7, #12]
 800eb8c:	2b00      	cmp	r3, #0
 800eb8e:	d124      	bne.n	800ebda <tcp_alloc+0x62>
    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 800eb90:	f7ff ffc2 	bl	800eb18 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800eb94:	2001      	movs	r0, #1
 800eb96:	f7fd fe27 	bl	800c7e8 <memp_malloc>
 800eb9a:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 800eb9c:	68fb      	ldr	r3, [r7, #12]
 800eb9e:	2b00      	cmp	r3, #0
 800eba0:	d11b      	bne.n	800ebda <tcp_alloc+0x62>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 800eba2:	2009      	movs	r0, #9
 800eba4:	f7ff ff6e 	bl	800ea84 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800eba8:	2001      	movs	r0, #1
 800ebaa:	f7fd fe1d 	bl	800c7e8 <memp_malloc>
 800ebae:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 800ebb0:	68fb      	ldr	r3, [r7, #12]
 800ebb2:	2b00      	cmp	r3, #0
 800ebb4:	d111      	bne.n	800ebda <tcp_alloc+0x62>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 800ebb6:	2008      	movs	r0, #8
 800ebb8:	f7ff ff64 	bl	800ea84 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800ebbc:	2001      	movs	r0, #1
 800ebbe:	f7fd fe13 	bl	800c7e8 <memp_malloc>
 800ebc2:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 800ebc4:	68fb      	ldr	r3, [r7, #12]
 800ebc6:	2b00      	cmp	r3, #0
 800ebc8:	d107      	bne.n	800ebda <tcp_alloc+0x62>
          /* Try killing active connections with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 800ebca:	79fb      	ldrb	r3, [r7, #7]
 800ebcc:	4618      	mov	r0, r3
 800ebce:	f7ff ff17 	bl	800ea00 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800ebd2:	2001      	movs	r0, #1
 800ebd4:	f7fd fe08 	bl	800c7e8 <memp_malloc>
 800ebd8:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 800ebda:	68fb      	ldr	r3, [r7, #12]
 800ebdc:	2b00      	cmp	r3, #0
 800ebde:	d03f      	beq.n	800ec60 <tcp_alloc+0xe8>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 800ebe0:	2298      	movs	r2, #152	; 0x98
 800ebe2:	2100      	movs	r1, #0
 800ebe4:	68f8      	ldr	r0, [r7, #12]
 800ebe6:	f009 fc7f 	bl	80184e8 <memset>
    pcb->prio = prio;
 800ebea:	68fb      	ldr	r3, [r7, #12]
 800ebec:	79fa      	ldrb	r2, [r7, #7]
 800ebee:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 800ebf0:	68fb      	ldr	r3, [r7, #12]
 800ebf2:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800ebf6:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 800ebfa:	68fb      	ldr	r3, [r7, #12]
 800ebfc:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800ec00:	855a      	strh	r2, [r3, #42]	; 0x2a
 800ec02:	68fb      	ldr	r3, [r7, #12]
 800ec04:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800ec06:	68fb      	ldr	r3, [r7, #12]
 800ec08:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 800ec0a:	68fb      	ldr	r3, [r7, #12]
 800ec0c:	22ff      	movs	r2, #255	; 0xff
 800ec0e:	729a      	strb	r2, [r3, #10]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 800ec10:	68fb      	ldr	r3, [r7, #12]
 800ec12:	f44f 7206 	mov.w	r2, #536	; 0x218
 800ec16:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 800ec18:	68fb      	ldr	r3, [r7, #12]
 800ec1a:	2206      	movs	r2, #6
 800ec1c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 800ec20:	68fb      	ldr	r3, [r7, #12]
 800ec22:	2206      	movs	r2, #6
 800ec24:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 800ec26:	68fb      	ldr	r3, [r7, #12]
 800ec28:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ec2c:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 800ec2e:	68fb      	ldr	r3, [r7, #12]
 800ec30:	2201      	movs	r2, #1
 800ec32:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 800ec36:	4b0d      	ldr	r3, [pc, #52]	; (800ec6c <tcp_alloc+0xf4>)
 800ec38:	681a      	ldr	r2, [r3, #0]
 800ec3a:	68fb      	ldr	r3, [r7, #12]
 800ec3c:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 800ec3e:	4b0c      	ldr	r3, [pc, #48]	; (800ec70 <tcp_alloc+0xf8>)
 800ec40:	781a      	ldrb	r2, [r3, #0]
 800ec42:	68fb      	ldr	r3, [r7, #12]
 800ec44:	775a      	strb	r2, [r3, #29]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 800ec46:	68fb      	ldr	r3, [r7, #12]
 800ec48:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800ec4c:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 800ec50:	68fb      	ldr	r3, [r7, #12]
 800ec52:	4a08      	ldr	r2, [pc, #32]	; (800ec74 <tcp_alloc+0xfc>)
 800ec54:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 800ec58:	68fb      	ldr	r3, [r7, #12]
 800ec5a:	4a07      	ldr	r2, [pc, #28]	; (800ec78 <tcp_alloc+0x100>)
 800ec5c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 800ec60:	68fb      	ldr	r3, [r7, #12]
}
 800ec62:	4618      	mov	r0, r3
 800ec64:	3710      	adds	r7, #16
 800ec66:	46bd      	mov	sp, r7
 800ec68:	bd80      	pop	{r7, pc}
 800ec6a:	bf00      	nop
 800ec6c:	2000ac38 	.word	0x2000ac38
 800ec70:	20004212 	.word	0x20004212
 800ec74:	0800e9bd 	.word	0x0800e9bd
 800ec78:	006ddd00 	.word	0x006ddd00

0800ec7c <tcp_new>:
 *
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_new(void)
{
 800ec7c:	b580      	push	{r7, lr}
 800ec7e:	af00      	add	r7, sp, #0
  return tcp_alloc(TCP_PRIO_NORMAL);
 800ec80:	2040      	movs	r0, #64	; 0x40
 800ec82:	f7ff ff79 	bl	800eb78 <tcp_alloc>
 800ec86:	4603      	mov	r3, r0
}
 800ec88:	4618      	mov	r0, r3
 800ec8a:	bd80      	pop	{r7, pc}

0800ec8c <tcp_arg>:
 * @param pcb tcp_pcb to set the callback argument
 * @param arg void pointer argument to pass to callback functions
 */
void
tcp_arg(struct tcp_pcb *pcb, void *arg)
{
 800ec8c:	b480      	push	{r7}
 800ec8e:	b083      	sub	sp, #12
 800ec90:	af00      	add	r7, sp, #0
 800ec92:	6078      	str	r0, [r7, #4]
 800ec94:	6039      	str	r1, [r7, #0]
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  if (pcb != NULL) {
 800ec96:	687b      	ldr	r3, [r7, #4]
 800ec98:	2b00      	cmp	r3, #0
 800ec9a:	d002      	beq.n	800eca2 <tcp_arg+0x16>
    pcb->callback_arg = arg;
 800ec9c:	687b      	ldr	r3, [r7, #4]
 800ec9e:	683a      	ldr	r2, [r7, #0]
 800eca0:	611a      	str	r2, [r3, #16]
  }
}
 800eca2:	bf00      	nop
 800eca4:	370c      	adds	r7, #12
 800eca6:	46bd      	mov	sp, r7
 800eca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecac:	4770      	bx	lr
	...

0800ecb0 <tcp_recv>:
 * @param pcb tcp_pcb to set the recv callback
 * @param recv callback function to call for this pcb when data is received
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
 800ecb0:	b580      	push	{r7, lr}
 800ecb2:	b082      	sub	sp, #8
 800ecb4:	af00      	add	r7, sp, #0
 800ecb6:	6078      	str	r0, [r7, #4]
 800ecb8:	6039      	str	r1, [r7, #0]
  if (pcb != NULL) {
 800ecba:	687b      	ldr	r3, [r7, #4]
 800ecbc:	2b00      	cmp	r3, #0
 800ecbe:	d00e      	beq.n	800ecde <tcp_recv+0x2e>
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 800ecc0:	687b      	ldr	r3, [r7, #4]
 800ecc2:	7d1b      	ldrb	r3, [r3, #20]
 800ecc4:	2b01      	cmp	r3, #1
 800ecc6:	d106      	bne.n	800ecd6 <tcp_recv+0x26>
 800ecc8:	4b07      	ldr	r3, [pc, #28]	; (800ece8 <tcp_recv+0x38>)
 800ecca:	f240 62bb 	movw	r2, #1723	; 0x6bb
 800ecce:	4907      	ldr	r1, [pc, #28]	; (800ecec <tcp_recv+0x3c>)
 800ecd0:	4807      	ldr	r0, [pc, #28]	; (800ecf0 <tcp_recv+0x40>)
 800ecd2:	f009 fcb9 	bl	8018648 <iprintf>
    pcb->recv = recv;
 800ecd6:	687b      	ldr	r3, [r7, #4]
 800ecd8:	683a      	ldr	r2, [r7, #0]
 800ecda:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  }
}
 800ecde:	bf00      	nop
 800ece0:	3708      	adds	r7, #8
 800ece2:	46bd      	mov	sp, r7
 800ece4:	bd80      	pop	{r7, pc}
 800ece6:	bf00      	nop
 800ece8:	08019ebc 	.word	0x08019ebc
 800ecec:	0801a1dc 	.word	0x0801a1dc
 800ecf0:	08019ef8 	.word	0x08019ef8

0800ecf4 <tcp_sent>:
 * @param pcb tcp_pcb to set the sent callback
 * @param sent callback function to call for this pcb when data is successfully sent
 */
void
tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)
{
 800ecf4:	b580      	push	{r7, lr}
 800ecf6:	b082      	sub	sp, #8
 800ecf8:	af00      	add	r7, sp, #0
 800ecfa:	6078      	str	r0, [r7, #4]
 800ecfc:	6039      	str	r1, [r7, #0]
  if (pcb != NULL) {
 800ecfe:	687b      	ldr	r3, [r7, #4]
 800ed00:	2b00      	cmp	r3, #0
 800ed02:	d00d      	beq.n	800ed20 <tcp_sent+0x2c>
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 800ed04:	687b      	ldr	r3, [r7, #4]
 800ed06:	7d1b      	ldrb	r3, [r3, #20]
 800ed08:	2b01      	cmp	r3, #1
 800ed0a:	d106      	bne.n	800ed1a <tcp_sent+0x26>
 800ed0c:	4b06      	ldr	r3, [pc, #24]	; (800ed28 <tcp_sent+0x34>)
 800ed0e:	f240 62cc 	movw	r2, #1740	; 0x6cc
 800ed12:	4906      	ldr	r1, [pc, #24]	; (800ed2c <tcp_sent+0x38>)
 800ed14:	4806      	ldr	r0, [pc, #24]	; (800ed30 <tcp_sent+0x3c>)
 800ed16:	f009 fc97 	bl	8018648 <iprintf>
    pcb->sent = sent;
 800ed1a:	687b      	ldr	r3, [r7, #4]
 800ed1c:	683a      	ldr	r2, [r7, #0]
 800ed1e:	67da      	str	r2, [r3, #124]	; 0x7c
  }
}
 800ed20:	bf00      	nop
 800ed22:	3708      	adds	r7, #8
 800ed24:	46bd      	mov	sp, r7
 800ed26:	bd80      	pop	{r7, pc}
 800ed28:	08019ebc 	.word	0x08019ebc
 800ed2c:	0801a204 	.word	0x0801a204
 800ed30:	08019ef8 	.word	0x08019ef8

0800ed34 <tcp_err>:
 * @param err callback function to call for this pcb when a fatal error
 *        has occurred on the connection
 */
void
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
 800ed34:	b580      	push	{r7, lr}
 800ed36:	b082      	sub	sp, #8
 800ed38:	af00      	add	r7, sp, #0
 800ed3a:	6078      	str	r0, [r7, #4]
 800ed3c:	6039      	str	r1, [r7, #0]
  if (pcb != NULL) {
 800ed3e:	687b      	ldr	r3, [r7, #4]
 800ed40:	2b00      	cmp	r3, #0
 800ed42:	d00e      	beq.n	800ed62 <tcp_err+0x2e>
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 800ed44:	687b      	ldr	r3, [r7, #4]
 800ed46:	7d1b      	ldrb	r3, [r3, #20]
 800ed48:	2b01      	cmp	r3, #1
 800ed4a:	d106      	bne.n	800ed5a <tcp_err+0x26>
 800ed4c:	4b07      	ldr	r3, [pc, #28]	; (800ed6c <tcp_err+0x38>)
 800ed4e:	f44f 62dc 	mov.w	r2, #1760	; 0x6e0
 800ed52:	4907      	ldr	r1, [pc, #28]	; (800ed70 <tcp_err+0x3c>)
 800ed54:	4807      	ldr	r0, [pc, #28]	; (800ed74 <tcp_err+0x40>)
 800ed56:	f009 fc77 	bl	8018648 <iprintf>
    pcb->errf = err;
 800ed5a:	687b      	ldr	r3, [r7, #4]
 800ed5c:	683a      	ldr	r2, [r7, #0]
 800ed5e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  }
}
 800ed62:	bf00      	nop
 800ed64:	3708      	adds	r7, #8
 800ed66:	46bd      	mov	sp, r7
 800ed68:	bd80      	pop	{r7, pc}
 800ed6a:	bf00      	nop
 800ed6c:	08019ebc 	.word	0x08019ebc
 800ed70:	0801a22c 	.word	0x0801a22c
 800ed74:	08019ef8 	.word	0x08019ef8

0800ed78 <tcp_accept>:
 * @param accept callback function to call for this pcb when LISTENing
 *        connection has been connected to another host
 */
void
tcp_accept(struct tcp_pcb *pcb, tcp_accept_fn accept)
{
 800ed78:	b480      	push	{r7}
 800ed7a:	b085      	sub	sp, #20
 800ed7c:	af00      	add	r7, sp, #0
 800ed7e:	6078      	str	r0, [r7, #4]
 800ed80:	6039      	str	r1, [r7, #0]
  if ((pcb != NULL) && (pcb->state == LISTEN)) {
 800ed82:	687b      	ldr	r3, [r7, #4]
 800ed84:	2b00      	cmp	r3, #0
 800ed86:	d008      	beq.n	800ed9a <tcp_accept+0x22>
 800ed88:	687b      	ldr	r3, [r7, #4]
 800ed8a:	7d1b      	ldrb	r3, [r3, #20]
 800ed8c:	2b01      	cmp	r3, #1
 800ed8e:	d104      	bne.n	800ed9a <tcp_accept+0x22>
    struct tcp_pcb_listen *lpcb = (struct tcp_pcb_listen*)pcb;
 800ed90:	687b      	ldr	r3, [r7, #4]
 800ed92:	60fb      	str	r3, [r7, #12]
    lpcb->accept = accept;
 800ed94:	68fb      	ldr	r3, [r7, #12]
 800ed96:	683a      	ldr	r2, [r7, #0]
 800ed98:	619a      	str	r2, [r3, #24]
  }
}
 800ed9a:	bf00      	nop
 800ed9c:	3714      	adds	r7, #20
 800ed9e:	46bd      	mov	sp, r7
 800eda0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eda4:	4770      	bx	lr
	...

0800eda8 <tcp_poll>:
 * timer interval, which is called twice a second.
 *
 */
void
tcp_poll(struct tcp_pcb *pcb, tcp_poll_fn poll, u8_t interval)
{
 800eda8:	b580      	push	{r7, lr}
 800edaa:	b084      	sub	sp, #16
 800edac:	af00      	add	r7, sp, #0
 800edae:	60f8      	str	r0, [r7, #12]
 800edb0:	60b9      	str	r1, [r7, #8]
 800edb2:	4613      	mov	r3, r2
 800edb4:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 800edb6:	68fb      	ldr	r3, [r7, #12]
 800edb8:	7d1b      	ldrb	r3, [r3, #20]
 800edba:	2b01      	cmp	r3, #1
 800edbc:	d106      	bne.n	800edcc <tcp_poll+0x24>
 800edbe:	4b09      	ldr	r3, [pc, #36]	; (800ede4 <tcp_poll+0x3c>)
 800edc0:	f240 7203 	movw	r2, #1795	; 0x703
 800edc4:	4908      	ldr	r1, [pc, #32]	; (800ede8 <tcp_poll+0x40>)
 800edc6:	4809      	ldr	r0, [pc, #36]	; (800edec <tcp_poll+0x44>)
 800edc8:	f009 fc3e 	bl	8018648 <iprintf>
#if LWIP_CALLBACK_API
  pcb->poll = poll;
 800edcc:	68fb      	ldr	r3, [r7, #12]
 800edce:	68ba      	ldr	r2, [r7, #8]
 800edd0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(poll);
#endif /* LWIP_CALLBACK_API */
  pcb->pollinterval = interval;
 800edd4:	68fb      	ldr	r3, [r7, #12]
 800edd6:	79fa      	ldrb	r2, [r7, #7]
 800edd8:	771a      	strb	r2, [r3, #28]
}
 800edda:	bf00      	nop
 800eddc:	3710      	adds	r7, #16
 800edde:	46bd      	mov	sp, r7
 800ede0:	bd80      	pop	{r7, pc}
 800ede2:	bf00      	nop
 800ede4:	08019ebc 	.word	0x08019ebc
 800ede8:	0801a254 	.word	0x0801a254
 800edec:	08019ef8 	.word	0x08019ef8

0800edf0 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 800edf0:	b580      	push	{r7, lr}
 800edf2:	b082      	sub	sp, #8
 800edf4:	af00      	add	r7, sp, #0
 800edf6:	6078      	str	r0, [r7, #4]
  if (pcb->state != CLOSED &&
 800edf8:	687b      	ldr	r3, [r7, #4]
 800edfa:	7d1b      	ldrb	r3, [r3, #20]
 800edfc:	2b00      	cmp	r3, #0
 800edfe:	d034      	beq.n	800ee6a <tcp_pcb_purge+0x7a>
     pcb->state != TIME_WAIT &&
 800ee00:	687b      	ldr	r3, [r7, #4]
 800ee02:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 800ee04:	2b0a      	cmp	r3, #10
 800ee06:	d030      	beq.n	800ee6a <tcp_pcb_purge+0x7a>
     pcb->state != LISTEN) {
 800ee08:	687b      	ldr	r3, [r7, #4]
 800ee0a:	7d1b      	ldrb	r3, [r3, #20]
     pcb->state != TIME_WAIT &&
 800ee0c:	2b01      	cmp	r3, #1
 800ee0e:	d02c      	beq.n	800ee6a <tcp_pcb_purge+0x7a>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 800ee10:	687b      	ldr	r3, [r7, #4]
 800ee12:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ee14:	2b00      	cmp	r3, #0
 800ee16:	d007      	beq.n	800ee28 <tcp_pcb_purge+0x38>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 800ee18:	687b      	ldr	r3, [r7, #4]
 800ee1a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ee1c:	4618      	mov	r0, r3
 800ee1e:	f7fe fa97 	bl	800d350 <pbuf_free>
      pcb->refused_data = NULL;
 800ee22:	687b      	ldr	r3, [r7, #4]
 800ee24:	2200      	movs	r2, #0
 800ee26:	675a      	str	r2, [r3, #116]	; 0x74
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
    }
    tcp_segs_free(pcb->ooseq);
 800ee28:	687b      	ldr	r3, [r7, #4]
 800ee2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ee2c:	4618      	mov	r0, r3
 800ee2e:	f7ff fd6e 	bl	800e90e <tcp_segs_free>
    pcb->ooseq = NULL;
 800ee32:	687b      	ldr	r3, [r7, #4]
 800ee34:	2200      	movs	r2, #0
 800ee36:	671a      	str	r2, [r3, #112]	; 0x70
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 800ee38:	687b      	ldr	r3, [r7, #4]
 800ee3a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ee3e:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 800ee40:	687b      	ldr	r3, [r7, #4]
 800ee42:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ee44:	4618      	mov	r0, r3
 800ee46:	f7ff fd62 	bl	800e90e <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 800ee4a:	687b      	ldr	r3, [r7, #4]
 800ee4c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ee4e:	4618      	mov	r0, r3
 800ee50:	f7ff fd5d 	bl	800e90e <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 800ee54:	687b      	ldr	r3, [r7, #4]
 800ee56:	2200      	movs	r2, #0
 800ee58:	669a      	str	r2, [r3, #104]	; 0x68
 800ee5a:	687b      	ldr	r3, [r7, #4]
 800ee5c:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800ee5e:	687b      	ldr	r3, [r7, #4]
 800ee60:	66da      	str	r2, [r3, #108]	; 0x6c
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 800ee62:	687b      	ldr	r3, [r7, #4]
 800ee64:	2200      	movs	r2, #0
 800ee66:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
#endif /* TCP_OVERSIZE */
  }
}
 800ee6a:	bf00      	nop
 800ee6c:	3708      	adds	r7, #8
 800ee6e:	46bd      	mov	sp, r7
 800ee70:	bd80      	pop	{r7, pc}
	...

0800ee74 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 800ee74:	b580      	push	{r7, lr}
 800ee76:	b084      	sub	sp, #16
 800ee78:	af00      	add	r7, sp, #0
 800ee7a:	6078      	str	r0, [r7, #4]
 800ee7c:	6039      	str	r1, [r7, #0]
  TCP_RMV(pcblist, pcb);
 800ee7e:	687b      	ldr	r3, [r7, #4]
 800ee80:	681b      	ldr	r3, [r3, #0]
 800ee82:	683a      	ldr	r2, [r7, #0]
 800ee84:	429a      	cmp	r2, r3
 800ee86:	d105      	bne.n	800ee94 <tcp_pcb_remove+0x20>
 800ee88:	687b      	ldr	r3, [r7, #4]
 800ee8a:	681b      	ldr	r3, [r3, #0]
 800ee8c:	68da      	ldr	r2, [r3, #12]
 800ee8e:	687b      	ldr	r3, [r7, #4]
 800ee90:	601a      	str	r2, [r3, #0]
 800ee92:	e013      	b.n	800eebc <tcp_pcb_remove+0x48>
 800ee94:	687b      	ldr	r3, [r7, #4]
 800ee96:	681b      	ldr	r3, [r3, #0]
 800ee98:	60fb      	str	r3, [r7, #12]
 800ee9a:	e00c      	b.n	800eeb6 <tcp_pcb_remove+0x42>
 800ee9c:	68fb      	ldr	r3, [r7, #12]
 800ee9e:	68db      	ldr	r3, [r3, #12]
 800eea0:	683a      	ldr	r2, [r7, #0]
 800eea2:	429a      	cmp	r2, r3
 800eea4:	d104      	bne.n	800eeb0 <tcp_pcb_remove+0x3c>
 800eea6:	683b      	ldr	r3, [r7, #0]
 800eea8:	68da      	ldr	r2, [r3, #12]
 800eeaa:	68fb      	ldr	r3, [r7, #12]
 800eeac:	60da      	str	r2, [r3, #12]
 800eeae:	e005      	b.n	800eebc <tcp_pcb_remove+0x48>
 800eeb0:	68fb      	ldr	r3, [r7, #12]
 800eeb2:	68db      	ldr	r3, [r3, #12]
 800eeb4:	60fb      	str	r3, [r7, #12]
 800eeb6:	68fb      	ldr	r3, [r7, #12]
 800eeb8:	2b00      	cmp	r3, #0
 800eeba:	d1ef      	bne.n	800ee9c <tcp_pcb_remove+0x28>
 800eebc:	683b      	ldr	r3, [r7, #0]
 800eebe:	2200      	movs	r2, #0
 800eec0:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 800eec2:	6838      	ldr	r0, [r7, #0]
 800eec4:	f7ff ff94 	bl	800edf0 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if (pcb->state != TIME_WAIT &&
 800eec8:	683b      	ldr	r3, [r7, #0]
 800eeca:	7d1b      	ldrb	r3, [r3, #20]
 800eecc:	2b0a      	cmp	r3, #10
 800eece:	d013      	beq.n	800eef8 <tcp_pcb_remove+0x84>
     pcb->state != LISTEN &&
 800eed0:	683b      	ldr	r3, [r7, #0]
 800eed2:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != TIME_WAIT &&
 800eed4:	2b01      	cmp	r3, #1
 800eed6:	d00f      	beq.n	800eef8 <tcp_pcb_remove+0x84>
     pcb->flags & TF_ACK_DELAY) {
 800eed8:	683b      	ldr	r3, [r7, #0]
 800eeda:	7e9b      	ldrb	r3, [r3, #26]
 800eedc:	f003 0301 	and.w	r3, r3, #1
     pcb->state != LISTEN &&
 800eee0:	2b00      	cmp	r3, #0
 800eee2:	d009      	beq.n	800eef8 <tcp_pcb_remove+0x84>
    pcb->flags |= TF_ACK_NOW;
 800eee4:	683b      	ldr	r3, [r7, #0]
 800eee6:	7e9b      	ldrb	r3, [r3, #26]
 800eee8:	f043 0302 	orr.w	r3, r3, #2
 800eeec:	b2da      	uxtb	r2, r3
 800eeee:	683b      	ldr	r3, [r7, #0]
 800eef0:	769a      	strb	r2, [r3, #26]
    tcp_output(pcb);
 800eef2:	6838      	ldr	r0, [r7, #0]
 800eef4:	f003 f9be 	bl	8012274 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 800eef8:	683b      	ldr	r3, [r7, #0]
 800eefa:	7d1b      	ldrb	r3, [r3, #20]
 800eefc:	2b01      	cmp	r3, #1
 800eefe:	d020      	beq.n	800ef42 <tcp_pcb_remove+0xce>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 800ef00:	683b      	ldr	r3, [r7, #0]
 800ef02:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ef04:	2b00      	cmp	r3, #0
 800ef06:	d006      	beq.n	800ef16 <tcp_pcb_remove+0xa2>
 800ef08:	4b13      	ldr	r3, [pc, #76]	; (800ef58 <tcp_pcb_remove+0xe4>)
 800ef0a:	f240 7253 	movw	r2, #1875	; 0x753
 800ef0e:	4913      	ldr	r1, [pc, #76]	; (800ef5c <tcp_pcb_remove+0xe8>)
 800ef10:	4813      	ldr	r0, [pc, #76]	; (800ef60 <tcp_pcb_remove+0xec>)
 800ef12:	f009 fb99 	bl	8018648 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 800ef16:	683b      	ldr	r3, [r7, #0]
 800ef18:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ef1a:	2b00      	cmp	r3, #0
 800ef1c:	d006      	beq.n	800ef2c <tcp_pcb_remove+0xb8>
 800ef1e:	4b0e      	ldr	r3, [pc, #56]	; (800ef58 <tcp_pcb_remove+0xe4>)
 800ef20:	f240 7254 	movw	r2, #1876	; 0x754
 800ef24:	490f      	ldr	r1, [pc, #60]	; (800ef64 <tcp_pcb_remove+0xf0>)
 800ef26:	480e      	ldr	r0, [pc, #56]	; (800ef60 <tcp_pcb_remove+0xec>)
 800ef28:	f009 fb8e 	bl	8018648 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 800ef2c:	683b      	ldr	r3, [r7, #0]
 800ef2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ef30:	2b00      	cmp	r3, #0
 800ef32:	d006      	beq.n	800ef42 <tcp_pcb_remove+0xce>
 800ef34:	4b08      	ldr	r3, [pc, #32]	; (800ef58 <tcp_pcb_remove+0xe4>)
 800ef36:	f240 7256 	movw	r2, #1878	; 0x756
 800ef3a:	490b      	ldr	r1, [pc, #44]	; (800ef68 <tcp_pcb_remove+0xf4>)
 800ef3c:	4808      	ldr	r0, [pc, #32]	; (800ef60 <tcp_pcb_remove+0xec>)
 800ef3e:	f009 fb83 	bl	8018648 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 800ef42:	683b      	ldr	r3, [r7, #0]
 800ef44:	2200      	movs	r2, #0
 800ef46:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 800ef48:	683b      	ldr	r3, [r7, #0]
 800ef4a:	2200      	movs	r2, #0
 800ef4c:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 800ef4e:	bf00      	nop
 800ef50:	3710      	adds	r7, #16
 800ef52:	46bd      	mov	sp, r7
 800ef54:	bd80      	pop	{r7, pc}
 800ef56:	bf00      	nop
 800ef58:	08019ebc 	.word	0x08019ebc
 800ef5c:	0801a274 	.word	0x0801a274
 800ef60:	08019ef8 	.word	0x08019ef8
 800ef64:	0801a28c 	.word	0x0801a28c
 800ef68:	0801a2a8 	.word	0x0801a2a8

0800ef6c <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 800ef6c:	b480      	push	{r7}
 800ef6e:	b083      	sub	sp, #12
 800ef70:	af00      	add	r7, sp, #0
 800ef72:	6078      	str	r0, [r7, #4]
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 800ef74:	4b07      	ldr	r3, [pc, #28]	; (800ef94 <tcp_next_iss+0x28>)
 800ef76:	681a      	ldr	r2, [r3, #0]
 800ef78:	4b07      	ldr	r3, [pc, #28]	; (800ef98 <tcp_next_iss+0x2c>)
 800ef7a:	681b      	ldr	r3, [r3, #0]
 800ef7c:	4413      	add	r3, r2
 800ef7e:	4a05      	ldr	r2, [pc, #20]	; (800ef94 <tcp_next_iss+0x28>)
 800ef80:	6013      	str	r3, [r2, #0]
  return iss;
 800ef82:	4b04      	ldr	r3, [pc, #16]	; (800ef94 <tcp_next_iss+0x28>)
 800ef84:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 800ef86:	4618      	mov	r0, r3
 800ef88:	370c      	adds	r7, #12
 800ef8a:	46bd      	mov	sp, r7
 800ef8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef90:	4770      	bx	lr
 800ef92:	bf00      	nop
 800ef94:	20000120 	.word	0x20000120
 800ef98:	2000ac38 	.word	0x2000ac38

0800ef9c <tcp_eff_send_mss_impl>:
tcp_eff_send_mss_impl(u16_t sendmss, const ip_addr_t *dest
#if LWIP_IPV6 || LWIP_IPV4_SRC_ROUTING
                     , const ip_addr_t *src
#endif /* LWIP_IPV6 || LWIP_IPV4_SRC_ROUTING */
                     )
{
 800ef9c:	b580      	push	{r7, lr}
 800ef9e:	b084      	sub	sp, #16
 800efa0:	af00      	add	r7, sp, #0
 800efa2:	4603      	mov	r3, r0
 800efa4:	6039      	str	r1, [r7, #0]
 800efa6:	80fb      	strh	r3, [r7, #6]
  u16_t mss_s;
  struct netif *outif;
  s16_t mtu;

  outif = ip_route(src, dest);
 800efa8:	6838      	ldr	r0, [r7, #0]
 800efaa:	f007 fac7 	bl	801653c <ip4_route>
 800efae:	60f8      	str	r0, [r7, #12]
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 800efb0:	68fb      	ldr	r3, [r7, #12]
 800efb2:	2b00      	cmp	r3, #0
 800efb4:	d101      	bne.n	800efba <tcp_eff_send_mss_impl+0x1e>
      return sendmss;
 800efb6:	88fb      	ldrh	r3, [r7, #6]
 800efb8:	e010      	b.n	800efdc <tcp_eff_send_mss_impl+0x40>
    }
    mtu = outif->mtu;
 800efba:	68fb      	ldr	r3, [r7, #12]
 800efbc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800efbe:	817b      	strh	r3, [r7, #10]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 800efc0:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800efc4:	2b00      	cmp	r3, #0
 800efc6:	d008      	beq.n	800efda <tcp_eff_send_mss_impl+0x3e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      mss_s = mtu - IP_HLEN - TCP_HLEN;
 800efc8:	897b      	ldrh	r3, [r7, #10]
 800efca:	3b28      	subs	r3, #40	; 0x28
 800efcc:	813b      	strh	r3, [r7, #8]
#endif /* LWIP_IPV4 */
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 800efce:	893a      	ldrh	r2, [r7, #8]
 800efd0:	88fb      	ldrh	r3, [r7, #6]
 800efd2:	4293      	cmp	r3, r2
 800efd4:	bf28      	it	cs
 800efd6:	4613      	movcs	r3, r2
 800efd8:	80fb      	strh	r3, [r7, #6]
  }
  return sendmss;
 800efda:	88fb      	ldrh	r3, [r7, #6]
}
 800efdc:	4618      	mov	r0, r3
 800efde:	3710      	adds	r7, #16
 800efe0:	46bd      	mov	sp, r7
 800efe2:	bd80      	pop	{r7, pc}

0800efe4 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t* old_addr, struct tcp_pcb* pcb_list)
{
 800efe4:	b580      	push	{r7, lr}
 800efe6:	b084      	sub	sp, #16
 800efe8:	af00      	add	r7, sp, #0
 800efea:	6078      	str	r0, [r7, #4]
 800efec:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 800efee:	683b      	ldr	r3, [r7, #0]
 800eff0:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 800eff2:	e011      	b.n	800f018 <tcp_netif_ip_addr_changed_pcblist+0x34>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 800eff4:	68fb      	ldr	r3, [r7, #12]
 800eff6:	681a      	ldr	r2, [r3, #0]
 800eff8:	687b      	ldr	r3, [r7, #4]
 800effa:	681b      	ldr	r3, [r3, #0]
 800effc:	429a      	cmp	r2, r3
 800effe:	d108      	bne.n	800f012 <tcp_netif_ip_addr_changed_pcblist+0x2e>
      /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
      && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
      ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 800f000:	68fb      	ldr	r3, [r7, #12]
 800f002:	68db      	ldr	r3, [r3, #12]
 800f004:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 800f006:	68f8      	ldr	r0, [r7, #12]
 800f008:	f7fe feb0 	bl	800dd6c <tcp_abort>
      pcb = next;
 800f00c:	68bb      	ldr	r3, [r7, #8]
 800f00e:	60fb      	str	r3, [r7, #12]
 800f010:	e002      	b.n	800f018 <tcp_netif_ip_addr_changed_pcblist+0x34>
    } else {
      pcb = pcb->next;
 800f012:	68fb      	ldr	r3, [r7, #12]
 800f014:	68db      	ldr	r3, [r3, #12]
 800f016:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 800f018:	68fb      	ldr	r3, [r7, #12]
 800f01a:	2b00      	cmp	r3, #0
 800f01c:	d1ea      	bne.n	800eff4 <tcp_netif_ip_addr_changed_pcblist+0x10>
    }
  }
}
 800f01e:	bf00      	nop
 800f020:	3710      	adds	r7, #16
 800f022:	46bd      	mov	sp, r7
 800f024:	bd80      	pop	{r7, pc}
	...

0800f028 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t* old_addr, const ip_addr_t* new_addr)
{
 800f028:	b580      	push	{r7, lr}
 800f02a:	b084      	sub	sp, #16
 800f02c:	af00      	add	r7, sp, #0
 800f02e:	6078      	str	r0, [r7, #4]
 800f030:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb, *next;

  if (!ip_addr_isany(old_addr)) {
 800f032:	687b      	ldr	r3, [r7, #4]
 800f034:	2b00      	cmp	r3, #0
 800f036:	d02c      	beq.n	800f092 <tcp_netif_ip_addr_changed+0x6a>
 800f038:	687b      	ldr	r3, [r7, #4]
 800f03a:	681b      	ldr	r3, [r3, #0]
 800f03c:	2b00      	cmp	r3, #0
 800f03e:	d028      	beq.n	800f092 <tcp_netif_ip_addr_changed+0x6a>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 800f040:	4b16      	ldr	r3, [pc, #88]	; (800f09c <tcp_netif_ip_addr_changed+0x74>)
 800f042:	681b      	ldr	r3, [r3, #0]
 800f044:	4619      	mov	r1, r3
 800f046:	6878      	ldr	r0, [r7, #4]
 800f048:	f7ff ffcc 	bl	800efe4 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 800f04c:	4b14      	ldr	r3, [pc, #80]	; (800f0a0 <tcp_netif_ip_addr_changed+0x78>)
 800f04e:	681b      	ldr	r3, [r3, #0]
 800f050:	4619      	mov	r1, r3
 800f052:	6878      	ldr	r0, [r7, #4]
 800f054:	f7ff ffc6 	bl	800efe4 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 800f058:	683b      	ldr	r3, [r7, #0]
 800f05a:	2b00      	cmp	r3, #0
 800f05c:	d019      	beq.n	800f092 <tcp_netif_ip_addr_changed+0x6a>
 800f05e:	683b      	ldr	r3, [r7, #0]
 800f060:	681b      	ldr	r3, [r3, #0]
 800f062:	2b00      	cmp	r3, #0
 800f064:	d015      	beq.n	800f092 <tcp_netif_ip_addr_changed+0x6a>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = next) {
 800f066:	4b0f      	ldr	r3, [pc, #60]	; (800f0a4 <tcp_netif_ip_addr_changed+0x7c>)
 800f068:	681b      	ldr	r3, [r3, #0]
 800f06a:	60fb      	str	r3, [r7, #12]
 800f06c:	e00e      	b.n	800f08c <tcp_netif_ip_addr_changed+0x64>
        next = lpcb->next;
 800f06e:	68fb      	ldr	r3, [r7, #12]
 800f070:	68db      	ldr	r3, [r3, #12]
 800f072:	60bb      	str	r3, [r7, #8]
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 800f074:	68fb      	ldr	r3, [r7, #12]
 800f076:	681a      	ldr	r2, [r3, #0]
 800f078:	687b      	ldr	r3, [r7, #4]
 800f07a:	681b      	ldr	r3, [r3, #0]
 800f07c:	429a      	cmp	r2, r3
 800f07e:	d103      	bne.n	800f088 <tcp_netif_ip_addr_changed+0x60>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 800f080:	683b      	ldr	r3, [r7, #0]
 800f082:	681a      	ldr	r2, [r3, #0]
 800f084:	68fb      	ldr	r3, [r7, #12]
 800f086:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = next) {
 800f088:	68bb      	ldr	r3, [r7, #8]
 800f08a:	60fb      	str	r3, [r7, #12]
 800f08c:	68fb      	ldr	r3, [r7, #12]
 800f08e:	2b00      	cmp	r3, #0
 800f090:	d1ed      	bne.n	800f06e <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 800f092:	bf00      	nop
 800f094:	3710      	adds	r7, #16
 800f096:	46bd      	mov	sp, r7
 800f098:	bd80      	pop	{r7, pc}
 800f09a:	bf00      	nop
 800f09c:	2000ac34 	.word	0x2000ac34
 800f0a0:	2000ac40 	.word	0x2000ac40
 800f0a4:	2000ac3c 	.word	0x2000ac3c

0800f0a8 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 800f0a8:	b590      	push	{r4, r7, lr}
 800f0aa:	b08b      	sub	sp, #44	; 0x2c
 800f0ac:	af02      	add	r7, sp, #8
 800f0ae:	6078      	str	r0, [r7, #4]
 800f0b0:	6039      	str	r1, [r7, #0]
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 800f0b2:	687b      	ldr	r3, [r7, #4]
 800f0b4:	685b      	ldr	r3, [r3, #4]
 800f0b6:	4a82      	ldr	r2, [pc, #520]	; (800f2c0 <tcp_input+0x218>)
 800f0b8:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 800f0ba:	687b      	ldr	r3, [r7, #4]
 800f0bc:	895b      	ldrh	r3, [r3, #10]
 800f0be:	2b13      	cmp	r3, #19
 800f0c0:	f240 838a 	bls.w	800f7d8 <tcp_input+0x730>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800f0c4:	4b7f      	ldr	r3, [pc, #508]	; (800f2c4 <tcp_input+0x21c>)
 800f0c6:	695a      	ldr	r2, [r3, #20]
 800f0c8:	4b7e      	ldr	r3, [pc, #504]	; (800f2c4 <tcp_input+0x21c>)
 800f0ca:	681b      	ldr	r3, [r3, #0]
 800f0cc:	4619      	mov	r1, r3
 800f0ce:	4610      	mov	r0, r2
 800f0d0:	f007 fccc 	bl	8016a6c <ip4_addr_isbroadcast_u32>
 800f0d4:	4603      	mov	r3, r0
 800f0d6:	2b00      	cmp	r3, #0
 800f0d8:	f040 8380 	bne.w	800f7dc <tcp_input+0x734>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 800f0dc:	4b79      	ldr	r3, [pc, #484]	; (800f2c4 <tcp_input+0x21c>)
 800f0de:	695b      	ldr	r3, [r3, #20]
 800f0e0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800f0e4:	2be0      	cmp	r3, #224	; 0xe0
 800f0e6:	f000 8379 	beq.w	800f7dc <tcp_input+0x734>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN(tcphdr) * 4;
 800f0ea:	4b75      	ldr	r3, [pc, #468]	; (800f2c0 <tcp_input+0x218>)
 800f0ec:	681b      	ldr	r3, [r3, #0]
 800f0ee:	899b      	ldrh	r3, [r3, #12]
 800f0f0:	b29b      	uxth	r3, r3
 800f0f2:	4618      	mov	r0, r3
 800f0f4:	f7fc ff8a 	bl	800c00c <lwip_htons>
 800f0f8:	4603      	mov	r3, r0
 800f0fa:	0b1b      	lsrs	r3, r3, #12
 800f0fc:	b29b      	uxth	r3, r3
 800f0fe:	b2db      	uxtb	r3, r3
 800f100:	009b      	lsls	r3, r3, #2
 800f102:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 800f104:	7cbb      	ldrb	r3, [r7, #18]
 800f106:	2b13      	cmp	r3, #19
 800f108:	f240 8368 	bls.w	800f7dc <tcp_input+0x734>
 800f10c:	7cbb      	ldrb	r3, [r7, #18]
 800f10e:	b29a      	uxth	r2, r3
 800f110:	687b      	ldr	r3, [r7, #4]
 800f112:	891b      	ldrh	r3, [r3, #8]
 800f114:	429a      	cmp	r2, r3
 800f116:	f200 8361 	bhi.w	800f7dc <tcp_input+0x734>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = hdrlen_bytes - TCP_HLEN;
 800f11a:	7cbb      	ldrb	r3, [r7, #18]
 800f11c:	b29b      	uxth	r3, r3
 800f11e:	3b14      	subs	r3, #20
 800f120:	b29a      	uxth	r2, r3
 800f122:	4b69      	ldr	r3, [pc, #420]	; (800f2c8 <tcp_input+0x220>)
 800f124:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 800f126:	4b69      	ldr	r3, [pc, #420]	; (800f2cc <tcp_input+0x224>)
 800f128:	2200      	movs	r2, #0
 800f12a:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 800f12c:	687b      	ldr	r3, [r7, #4]
 800f12e:	895a      	ldrh	r2, [r3, #10]
 800f130:	7cbb      	ldrb	r3, [r7, #18]
 800f132:	b29b      	uxth	r3, r3
 800f134:	429a      	cmp	r2, r3
 800f136:	d30d      	bcc.n	800f154 <tcp_input+0xac>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 800f138:	4b63      	ldr	r3, [pc, #396]	; (800f2c8 <tcp_input+0x220>)
 800f13a:	881a      	ldrh	r2, [r3, #0]
 800f13c:	4b64      	ldr	r3, [pc, #400]	; (800f2d0 <tcp_input+0x228>)
 800f13e:	801a      	strh	r2, [r3, #0]
    pbuf_header(p, -(s16_t)hdrlen_bytes); /* cannot fail */
 800f140:	7cbb      	ldrb	r3, [r7, #18]
 800f142:	b29b      	uxth	r3, r3
 800f144:	425b      	negs	r3, r3
 800f146:	b29b      	uxth	r3, r3
 800f148:	b21b      	sxth	r3, r3
 800f14a:	4619      	mov	r1, r3
 800f14c:	6878      	ldr	r0, [r7, #4]
 800f14e:	f7fe f8db 	bl	800d308 <pbuf_header>
 800f152:	e055      	b.n	800f200 <tcp_input+0x158>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 800f154:	687b      	ldr	r3, [r7, #4]
 800f156:	681b      	ldr	r3, [r3, #0]
 800f158:	2b00      	cmp	r3, #0
 800f15a:	d105      	bne.n	800f168 <tcp_input+0xc0>
 800f15c:	4b5d      	ldr	r3, [pc, #372]	; (800f2d4 <tcp_input+0x22c>)
 800f15e:	22b2      	movs	r2, #178	; 0xb2
 800f160:	495d      	ldr	r1, [pc, #372]	; (800f2d8 <tcp_input+0x230>)
 800f162:	485e      	ldr	r0, [pc, #376]	; (800f2dc <tcp_input+0x234>)
 800f164:	f009 fa70 	bl	8018648 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_header(p, -TCP_HLEN);
 800f168:	f06f 0113 	mvn.w	r1, #19
 800f16c:	6878      	ldr	r0, [r7, #4]
 800f16e:	f7fe f8cb 	bl	800d308 <pbuf_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 800f172:	687b      	ldr	r3, [r7, #4]
 800f174:	895a      	ldrh	r2, [r3, #10]
 800f176:	4b56      	ldr	r3, [pc, #344]	; (800f2d0 <tcp_input+0x228>)
 800f178:	801a      	strh	r2, [r3, #0]
    opt2len = tcphdr_optlen - tcphdr_opt1len;
 800f17a:	4b53      	ldr	r3, [pc, #332]	; (800f2c8 <tcp_input+0x220>)
 800f17c:	881a      	ldrh	r2, [r3, #0]
 800f17e:	4b54      	ldr	r3, [pc, #336]	; (800f2d0 <tcp_input+0x228>)
 800f180:	881b      	ldrh	r3, [r3, #0]
 800f182:	1ad3      	subs	r3, r2, r3
 800f184:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_header(p, -(s16_t)tcphdr_opt1len);
 800f186:	4b52      	ldr	r3, [pc, #328]	; (800f2d0 <tcp_input+0x228>)
 800f188:	881b      	ldrh	r3, [r3, #0]
 800f18a:	425b      	negs	r3, r3
 800f18c:	b29b      	uxth	r3, r3
 800f18e:	b21b      	sxth	r3, r3
 800f190:	4619      	mov	r1, r3
 800f192:	6878      	ldr	r0, [r7, #4]
 800f194:	f7fe f8b8 	bl	800d308 <pbuf_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 800f198:	687b      	ldr	r3, [r7, #4]
 800f19a:	681b      	ldr	r3, [r3, #0]
 800f19c:	895b      	ldrh	r3, [r3, #10]
 800f19e:	8a3a      	ldrh	r2, [r7, #16]
 800f1a0:	429a      	cmp	r2, r3
 800f1a2:	f200 831d 	bhi.w	800f7e0 <tcp_input+0x738>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t*)p->next->payload;
 800f1a6:	687b      	ldr	r3, [r7, #4]
 800f1a8:	681b      	ldr	r3, [r3, #0]
 800f1aa:	685b      	ldr	r3, [r3, #4]
 800f1ac:	4a47      	ldr	r2, [pc, #284]	; (800f2cc <tcp_input+0x224>)
 800f1ae:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_header(p->next, -(s16_t)opt2len);
 800f1b0:	687b      	ldr	r3, [r7, #4]
 800f1b2:	681a      	ldr	r2, [r3, #0]
 800f1b4:	8a3b      	ldrh	r3, [r7, #16]
 800f1b6:	425b      	negs	r3, r3
 800f1b8:	b29b      	uxth	r3, r3
 800f1ba:	b21b      	sxth	r3, r3
 800f1bc:	4619      	mov	r1, r3
 800f1be:	4610      	mov	r0, r2
 800f1c0:	f7fe f8a2 	bl	800d308 <pbuf_header>
    p->tot_len -= opt2len;
 800f1c4:	687b      	ldr	r3, [r7, #4]
 800f1c6:	891a      	ldrh	r2, [r3, #8]
 800f1c8:	8a3b      	ldrh	r3, [r7, #16]
 800f1ca:	1ad3      	subs	r3, r2, r3
 800f1cc:	b29a      	uxth	r2, r3
 800f1ce:	687b      	ldr	r3, [r7, #4]
 800f1d0:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 800f1d2:	687b      	ldr	r3, [r7, #4]
 800f1d4:	895b      	ldrh	r3, [r3, #10]
 800f1d6:	2b00      	cmp	r3, #0
 800f1d8:	d005      	beq.n	800f1e6 <tcp_input+0x13e>
 800f1da:	4b3e      	ldr	r3, [pc, #248]	; (800f2d4 <tcp_input+0x22c>)
 800f1dc:	22cf      	movs	r2, #207	; 0xcf
 800f1de:	4940      	ldr	r1, [pc, #256]	; (800f2e0 <tcp_input+0x238>)
 800f1e0:	483e      	ldr	r0, [pc, #248]	; (800f2dc <tcp_input+0x234>)
 800f1e2:	f009 fa31 	bl	8018648 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 800f1e6:	687b      	ldr	r3, [r7, #4]
 800f1e8:	891a      	ldrh	r2, [r3, #8]
 800f1ea:	687b      	ldr	r3, [r7, #4]
 800f1ec:	681b      	ldr	r3, [r3, #0]
 800f1ee:	891b      	ldrh	r3, [r3, #8]
 800f1f0:	429a      	cmp	r2, r3
 800f1f2:	d005      	beq.n	800f200 <tcp_input+0x158>
 800f1f4:	4b37      	ldr	r3, [pc, #220]	; (800f2d4 <tcp_input+0x22c>)
 800f1f6:	22d0      	movs	r2, #208	; 0xd0
 800f1f8:	493a      	ldr	r1, [pc, #232]	; (800f2e4 <tcp_input+0x23c>)
 800f1fa:	4838      	ldr	r0, [pc, #224]	; (800f2dc <tcp_input+0x234>)
 800f1fc:	f009 fa24 	bl	8018648 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 800f200:	4b2f      	ldr	r3, [pc, #188]	; (800f2c0 <tcp_input+0x218>)
 800f202:	681b      	ldr	r3, [r3, #0]
 800f204:	881b      	ldrh	r3, [r3, #0]
 800f206:	b29a      	uxth	r2, r3
 800f208:	4b2d      	ldr	r3, [pc, #180]	; (800f2c0 <tcp_input+0x218>)
 800f20a:	681c      	ldr	r4, [r3, #0]
 800f20c:	4610      	mov	r0, r2
 800f20e:	f7fc fefd 	bl	800c00c <lwip_htons>
 800f212:	4603      	mov	r3, r0
 800f214:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 800f216:	4b2a      	ldr	r3, [pc, #168]	; (800f2c0 <tcp_input+0x218>)
 800f218:	681b      	ldr	r3, [r3, #0]
 800f21a:	885b      	ldrh	r3, [r3, #2]
 800f21c:	b29a      	uxth	r2, r3
 800f21e:	4b28      	ldr	r3, [pc, #160]	; (800f2c0 <tcp_input+0x218>)
 800f220:	681c      	ldr	r4, [r3, #0]
 800f222:	4610      	mov	r0, r2
 800f224:	f7fc fef2 	bl	800c00c <lwip_htons>
 800f228:	4603      	mov	r3, r0
 800f22a:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 800f22c:	4b24      	ldr	r3, [pc, #144]	; (800f2c0 <tcp_input+0x218>)
 800f22e:	681b      	ldr	r3, [r3, #0]
 800f230:	685a      	ldr	r2, [r3, #4]
 800f232:	4b23      	ldr	r3, [pc, #140]	; (800f2c0 <tcp_input+0x218>)
 800f234:	681c      	ldr	r4, [r3, #0]
 800f236:	4610      	mov	r0, r2
 800f238:	f7fc fef6 	bl	800c028 <lwip_htonl>
 800f23c:	4603      	mov	r3, r0
 800f23e:	6063      	str	r3, [r4, #4]
 800f240:	6863      	ldr	r3, [r4, #4]
 800f242:	4a29      	ldr	r2, [pc, #164]	; (800f2e8 <tcp_input+0x240>)
 800f244:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 800f246:	4b1e      	ldr	r3, [pc, #120]	; (800f2c0 <tcp_input+0x218>)
 800f248:	681b      	ldr	r3, [r3, #0]
 800f24a:	689a      	ldr	r2, [r3, #8]
 800f24c:	4b1c      	ldr	r3, [pc, #112]	; (800f2c0 <tcp_input+0x218>)
 800f24e:	681c      	ldr	r4, [r3, #0]
 800f250:	4610      	mov	r0, r2
 800f252:	f7fc fee9 	bl	800c028 <lwip_htonl>
 800f256:	4603      	mov	r3, r0
 800f258:	60a3      	str	r3, [r4, #8]
 800f25a:	68a3      	ldr	r3, [r4, #8]
 800f25c:	4a23      	ldr	r2, [pc, #140]	; (800f2ec <tcp_input+0x244>)
 800f25e:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 800f260:	4b17      	ldr	r3, [pc, #92]	; (800f2c0 <tcp_input+0x218>)
 800f262:	681b      	ldr	r3, [r3, #0]
 800f264:	89db      	ldrh	r3, [r3, #14]
 800f266:	b29a      	uxth	r2, r3
 800f268:	4b15      	ldr	r3, [pc, #84]	; (800f2c0 <tcp_input+0x218>)
 800f26a:	681c      	ldr	r4, [r3, #0]
 800f26c:	4610      	mov	r0, r2
 800f26e:	f7fc fecd 	bl	800c00c <lwip_htons>
 800f272:	4603      	mov	r3, r0
 800f274:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 800f276:	4b12      	ldr	r3, [pc, #72]	; (800f2c0 <tcp_input+0x218>)
 800f278:	681b      	ldr	r3, [r3, #0]
 800f27a:	899b      	ldrh	r3, [r3, #12]
 800f27c:	b29b      	uxth	r3, r3
 800f27e:	4618      	mov	r0, r3
 800f280:	f7fc fec4 	bl	800c00c <lwip_htons>
 800f284:	4603      	mov	r3, r0
 800f286:	b2db      	uxtb	r3, r3
 800f288:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800f28c:	b2da      	uxtb	r2, r3
 800f28e:	4b18      	ldr	r3, [pc, #96]	; (800f2f0 <tcp_input+0x248>)
 800f290:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len + ((flags & (TCP_FIN | TCP_SYN)) ? 1 : 0);
 800f292:	687b      	ldr	r3, [r7, #4]
 800f294:	891a      	ldrh	r2, [r3, #8]
 800f296:	4b16      	ldr	r3, [pc, #88]	; (800f2f0 <tcp_input+0x248>)
 800f298:	781b      	ldrb	r3, [r3, #0]
 800f29a:	f003 0303 	and.w	r3, r3, #3
 800f29e:	2b00      	cmp	r3, #0
 800f2a0:	bf14      	ite	ne
 800f2a2:	2301      	movne	r3, #1
 800f2a4:	2300      	moveq	r3, #0
 800f2a6:	b2db      	uxtb	r3, r3
 800f2a8:	b29b      	uxth	r3, r3
 800f2aa:	4413      	add	r3, r2
 800f2ac:	b29a      	uxth	r2, r3
 800f2ae:	4b11      	ldr	r3, [pc, #68]	; (800f2f4 <tcp_input+0x24c>)
 800f2b0:	801a      	strh	r2, [r3, #0]

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 800f2b2:	2300      	movs	r3, #0
 800f2b4:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800f2b6:	4b10      	ldr	r3, [pc, #64]	; (800f2f8 <tcp_input+0x250>)
 800f2b8:	681b      	ldr	r3, [r3, #0]
 800f2ba:	61fb      	str	r3, [r7, #28]
 800f2bc:	e082      	b.n	800f3c4 <tcp_input+0x31c>
 800f2be:	bf00      	nop
 800f2c0:	20004224 	.word	0x20004224
 800f2c4:	20007504 	.word	0x20007504
 800f2c8:	20004228 	.word	0x20004228
 800f2cc:	2000422c 	.word	0x2000422c
 800f2d0:	2000422a 	.word	0x2000422a
 800f2d4:	0801a2c0 	.word	0x0801a2c0
 800f2d8:	0801a2f4 	.word	0x0801a2f4
 800f2dc:	0801a304 	.word	0x0801a304
 800f2e0:	0801a32c 	.word	0x0801a32c
 800f2e4:	0801a338 	.word	0x0801a338
 800f2e8:	20004234 	.word	0x20004234
 800f2ec:	20004238 	.word	0x20004238
 800f2f0:	20004240 	.word	0x20004240
 800f2f4:	2000423e 	.word	0x2000423e
 800f2f8:	2000ac34 	.word	0x2000ac34
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 800f2fc:	69fb      	ldr	r3, [r7, #28]
 800f2fe:	7d1b      	ldrb	r3, [r3, #20]
 800f300:	2b00      	cmp	r3, #0
 800f302:	d105      	bne.n	800f310 <tcp_input+0x268>
 800f304:	4b8f      	ldr	r3, [pc, #572]	; (800f544 <tcp_input+0x49c>)
 800f306:	22e2      	movs	r2, #226	; 0xe2
 800f308:	498f      	ldr	r1, [pc, #572]	; (800f548 <tcp_input+0x4a0>)
 800f30a:	4890      	ldr	r0, [pc, #576]	; (800f54c <tcp_input+0x4a4>)
 800f30c:	f009 f99c 	bl	8018648 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 800f310:	69fb      	ldr	r3, [r7, #28]
 800f312:	7d1b      	ldrb	r3, [r3, #20]
 800f314:	2b0a      	cmp	r3, #10
 800f316:	d105      	bne.n	800f324 <tcp_input+0x27c>
 800f318:	4b8a      	ldr	r3, [pc, #552]	; (800f544 <tcp_input+0x49c>)
 800f31a:	22e3      	movs	r2, #227	; 0xe3
 800f31c:	498c      	ldr	r1, [pc, #560]	; (800f550 <tcp_input+0x4a8>)
 800f31e:	488b      	ldr	r0, [pc, #556]	; (800f54c <tcp_input+0x4a4>)
 800f320:	f009 f992 	bl	8018648 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 800f324:	69fb      	ldr	r3, [r7, #28]
 800f326:	7d1b      	ldrb	r3, [r3, #20]
 800f328:	2b01      	cmp	r3, #1
 800f32a:	d105      	bne.n	800f338 <tcp_input+0x290>
 800f32c:	4b85      	ldr	r3, [pc, #532]	; (800f544 <tcp_input+0x49c>)
 800f32e:	22e4      	movs	r2, #228	; 0xe4
 800f330:	4988      	ldr	r1, [pc, #544]	; (800f554 <tcp_input+0x4ac>)
 800f332:	4886      	ldr	r0, [pc, #536]	; (800f54c <tcp_input+0x4a4>)
 800f334:	f009 f988 	bl	8018648 <iprintf>
    if (pcb->remote_port == tcphdr->src &&
 800f338:	69fb      	ldr	r3, [r7, #28]
 800f33a:	8b1a      	ldrh	r2, [r3, #24]
 800f33c:	4b86      	ldr	r3, [pc, #536]	; (800f558 <tcp_input+0x4b0>)
 800f33e:	681b      	ldr	r3, [r3, #0]
 800f340:	881b      	ldrh	r3, [r3, #0]
 800f342:	b29b      	uxth	r3, r3
 800f344:	429a      	cmp	r2, r3
 800f346:	d138      	bne.n	800f3ba <tcp_input+0x312>
        pcb->local_port == tcphdr->dest &&
 800f348:	69fb      	ldr	r3, [r7, #28]
 800f34a:	8ada      	ldrh	r2, [r3, #22]
 800f34c:	4b82      	ldr	r3, [pc, #520]	; (800f558 <tcp_input+0x4b0>)
 800f34e:	681b      	ldr	r3, [r3, #0]
 800f350:	885b      	ldrh	r3, [r3, #2]
 800f352:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 800f354:	429a      	cmp	r2, r3
 800f356:	d130      	bne.n	800f3ba <tcp_input+0x312>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800f358:	69fb      	ldr	r3, [r7, #28]
 800f35a:	685a      	ldr	r2, [r3, #4]
 800f35c:	4b7f      	ldr	r3, [pc, #508]	; (800f55c <tcp_input+0x4b4>)
 800f35e:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 800f360:	429a      	cmp	r2, r3
 800f362:	d12a      	bne.n	800f3ba <tcp_input+0x312>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800f364:	69fb      	ldr	r3, [r7, #28]
 800f366:	681a      	ldr	r2, [r3, #0]
 800f368:	4b7c      	ldr	r3, [pc, #496]	; (800f55c <tcp_input+0x4b4>)
 800f36a:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800f36c:	429a      	cmp	r2, r3
 800f36e:	d124      	bne.n	800f3ba <tcp_input+0x312>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 800f370:	69fb      	ldr	r3, [r7, #28]
 800f372:	68db      	ldr	r3, [r3, #12]
 800f374:	69fa      	ldr	r2, [r7, #28]
 800f376:	429a      	cmp	r2, r3
 800f378:	d105      	bne.n	800f386 <tcp_input+0x2de>
 800f37a:	4b72      	ldr	r3, [pc, #456]	; (800f544 <tcp_input+0x49c>)
 800f37c:	22ec      	movs	r2, #236	; 0xec
 800f37e:	4978      	ldr	r1, [pc, #480]	; (800f560 <tcp_input+0x4b8>)
 800f380:	4872      	ldr	r0, [pc, #456]	; (800f54c <tcp_input+0x4a4>)
 800f382:	f009 f961 	bl	8018648 <iprintf>
      if (prev != NULL) {
 800f386:	69bb      	ldr	r3, [r7, #24]
 800f388:	2b00      	cmp	r3, #0
 800f38a:	d00a      	beq.n	800f3a2 <tcp_input+0x2fa>
        prev->next = pcb->next;
 800f38c:	69fb      	ldr	r3, [r7, #28]
 800f38e:	68da      	ldr	r2, [r3, #12]
 800f390:	69bb      	ldr	r3, [r7, #24]
 800f392:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 800f394:	4b73      	ldr	r3, [pc, #460]	; (800f564 <tcp_input+0x4bc>)
 800f396:	681a      	ldr	r2, [r3, #0]
 800f398:	69fb      	ldr	r3, [r7, #28]
 800f39a:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 800f39c:	4a71      	ldr	r2, [pc, #452]	; (800f564 <tcp_input+0x4bc>)
 800f39e:	69fb      	ldr	r3, [r7, #28]
 800f3a0:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 800f3a2:	69fb      	ldr	r3, [r7, #28]
 800f3a4:	68db      	ldr	r3, [r3, #12]
 800f3a6:	69fa      	ldr	r2, [r7, #28]
 800f3a8:	429a      	cmp	r2, r3
 800f3aa:	d10f      	bne.n	800f3cc <tcp_input+0x324>
 800f3ac:	4b65      	ldr	r3, [pc, #404]	; (800f544 <tcp_input+0x49c>)
 800f3ae:	22f4      	movs	r2, #244	; 0xf4
 800f3b0:	496d      	ldr	r1, [pc, #436]	; (800f568 <tcp_input+0x4c0>)
 800f3b2:	4866      	ldr	r0, [pc, #408]	; (800f54c <tcp_input+0x4a4>)
 800f3b4:	f009 f948 	bl	8018648 <iprintf>
      break;
 800f3b8:	e008      	b.n	800f3cc <tcp_input+0x324>
    }
    prev = pcb;
 800f3ba:	69fb      	ldr	r3, [r7, #28]
 800f3bc:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800f3be:	69fb      	ldr	r3, [r7, #28]
 800f3c0:	68db      	ldr	r3, [r3, #12]
 800f3c2:	61fb      	str	r3, [r7, #28]
 800f3c4:	69fb      	ldr	r3, [r7, #28]
 800f3c6:	2b00      	cmp	r3, #0
 800f3c8:	d198      	bne.n	800f2fc <tcp_input+0x254>
 800f3ca:	e000      	b.n	800f3ce <tcp_input+0x326>
      break;
 800f3cc:	bf00      	nop
  }

  if (pcb == NULL) {
 800f3ce:	69fb      	ldr	r3, [r7, #28]
 800f3d0:	2b00      	cmp	r3, #0
 800f3d2:	d173      	bne.n	800f4bc <tcp_input+0x414>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800f3d4:	4b65      	ldr	r3, [pc, #404]	; (800f56c <tcp_input+0x4c4>)
 800f3d6:	681b      	ldr	r3, [r3, #0]
 800f3d8:	61fb      	str	r3, [r7, #28]
 800f3da:	e02f      	b.n	800f43c <tcp_input+0x394>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800f3dc:	69fb      	ldr	r3, [r7, #28]
 800f3de:	7d1b      	ldrb	r3, [r3, #20]
 800f3e0:	2b0a      	cmp	r3, #10
 800f3e2:	d005      	beq.n	800f3f0 <tcp_input+0x348>
 800f3e4:	4b57      	ldr	r3, [pc, #348]	; (800f544 <tcp_input+0x49c>)
 800f3e6:	22fe      	movs	r2, #254	; 0xfe
 800f3e8:	4961      	ldr	r1, [pc, #388]	; (800f570 <tcp_input+0x4c8>)
 800f3ea:	4858      	ldr	r0, [pc, #352]	; (800f54c <tcp_input+0x4a4>)
 800f3ec:	f009 f92c 	bl	8018648 <iprintf>
      if (pcb->remote_port == tcphdr->src &&
 800f3f0:	69fb      	ldr	r3, [r7, #28]
 800f3f2:	8b1a      	ldrh	r2, [r3, #24]
 800f3f4:	4b58      	ldr	r3, [pc, #352]	; (800f558 <tcp_input+0x4b0>)
 800f3f6:	681b      	ldr	r3, [r3, #0]
 800f3f8:	881b      	ldrh	r3, [r3, #0]
 800f3fa:	b29b      	uxth	r3, r3
 800f3fc:	429a      	cmp	r2, r3
 800f3fe:	d11a      	bne.n	800f436 <tcp_input+0x38e>
          pcb->local_port == tcphdr->dest &&
 800f400:	69fb      	ldr	r3, [r7, #28]
 800f402:	8ada      	ldrh	r2, [r3, #22]
 800f404:	4b54      	ldr	r3, [pc, #336]	; (800f558 <tcp_input+0x4b0>)
 800f406:	681b      	ldr	r3, [r3, #0]
 800f408:	885b      	ldrh	r3, [r3, #2]
 800f40a:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 800f40c:	429a      	cmp	r2, r3
 800f40e:	d112      	bne.n	800f436 <tcp_input+0x38e>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800f410:	69fb      	ldr	r3, [r7, #28]
 800f412:	685a      	ldr	r2, [r3, #4]
 800f414:	4b51      	ldr	r3, [pc, #324]	; (800f55c <tcp_input+0x4b4>)
 800f416:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 800f418:	429a      	cmp	r2, r3
 800f41a:	d10c      	bne.n	800f436 <tcp_input+0x38e>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800f41c:	69fb      	ldr	r3, [r7, #28]
 800f41e:	681a      	ldr	r2, [r3, #0]
 800f420:	4b4e      	ldr	r3, [pc, #312]	; (800f55c <tcp_input+0x4b4>)
 800f422:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800f424:	429a      	cmp	r2, r3
 800f426:	d106      	bne.n	800f436 <tcp_input+0x38e>
        /* We don't really care enough to move this PCB to the front
           of the list since we are not very likely to receive that
           many segments for connections in TIME-WAIT. */
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: packed for TIME_WAITing connection.\n"));
        tcp_timewait_input(pcb);
 800f428:	69f8      	ldr	r0, [r7, #28]
 800f42a:	f000 fb15 	bl	800fa58 <tcp_timewait_input>
        pbuf_free(p);
 800f42e:	6878      	ldr	r0, [r7, #4]
 800f430:	f7fd ff8e 	bl	800d350 <pbuf_free>
        return;
 800f434:	e1da      	b.n	800f7ec <tcp_input+0x744>
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800f436:	69fb      	ldr	r3, [r7, #28]
 800f438:	68db      	ldr	r3, [r3, #12]
 800f43a:	61fb      	str	r3, [r7, #28]
 800f43c:	69fb      	ldr	r3, [r7, #28]
 800f43e:	2b00      	cmp	r3, #0
 800f440:	d1cc      	bne.n	800f3dc <tcp_input+0x334>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 800f442:	2300      	movs	r3, #0
 800f444:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800f446:	4b4b      	ldr	r3, [pc, #300]	; (800f574 <tcp_input+0x4cc>)
 800f448:	681b      	ldr	r3, [r3, #0]
 800f44a:	617b      	str	r3, [r7, #20]
 800f44c:	e019      	b.n	800f482 <tcp_input+0x3da>
      if (lpcb->local_port == tcphdr->dest) {
 800f44e:	697b      	ldr	r3, [r7, #20]
 800f450:	8ada      	ldrh	r2, [r3, #22]
 800f452:	4b41      	ldr	r3, [pc, #260]	; (800f558 <tcp_input+0x4b0>)
 800f454:	681b      	ldr	r3, [r3, #0]
 800f456:	885b      	ldrh	r3, [r3, #2]
 800f458:	b29b      	uxth	r3, r3
 800f45a:	429a      	cmp	r2, r3
 800f45c:	d10c      	bne.n	800f478 <tcp_input+0x3d0>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 800f45e:	697b      	ldr	r3, [r7, #20]
 800f460:	681a      	ldr	r2, [r3, #0]
 800f462:	4b3e      	ldr	r3, [pc, #248]	; (800f55c <tcp_input+0x4b4>)
 800f464:	695b      	ldr	r3, [r3, #20]
 800f466:	429a      	cmp	r2, r3
 800f468:	d00f      	beq.n	800f48a <tcp_input+0x3e2>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 800f46a:	697b      	ldr	r3, [r7, #20]
 800f46c:	2b00      	cmp	r3, #0
 800f46e:	d00d      	beq.n	800f48c <tcp_input+0x3e4>
 800f470:	697b      	ldr	r3, [r7, #20]
 800f472:	681b      	ldr	r3, [r3, #0]
 800f474:	2b00      	cmp	r3, #0
 800f476:	d009      	beq.n	800f48c <tcp_input+0x3e4>
            break;
 #endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 800f478:	697b      	ldr	r3, [r7, #20]
 800f47a:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800f47c:	697b      	ldr	r3, [r7, #20]
 800f47e:	68db      	ldr	r3, [r3, #12]
 800f480:	617b      	str	r3, [r7, #20]
 800f482:	697b      	ldr	r3, [r7, #20]
 800f484:	2b00      	cmp	r3, #0
 800f486:	d1e2      	bne.n	800f44e <tcp_input+0x3a6>
 800f488:	e000      	b.n	800f48c <tcp_input+0x3e4>
            break;
 800f48a:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 800f48c:	697b      	ldr	r3, [r7, #20]
 800f48e:	2b00      	cmp	r3, #0
 800f490:	d014      	beq.n	800f4bc <tcp_input+0x414>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 800f492:	69bb      	ldr	r3, [r7, #24]
 800f494:	2b00      	cmp	r3, #0
 800f496:	d00a      	beq.n	800f4ae <tcp_input+0x406>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 800f498:	697b      	ldr	r3, [r7, #20]
 800f49a:	68da      	ldr	r2, [r3, #12]
 800f49c:	69bb      	ldr	r3, [r7, #24]
 800f49e:	60da      	str	r2, [r3, #12]
              /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 800f4a0:	4b34      	ldr	r3, [pc, #208]	; (800f574 <tcp_input+0x4cc>)
 800f4a2:	681a      	ldr	r2, [r3, #0]
 800f4a4:	697b      	ldr	r3, [r7, #20]
 800f4a6:	60da      	str	r2, [r3, #12]
              /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 800f4a8:	4a32      	ldr	r2, [pc, #200]	; (800f574 <tcp_input+0x4cc>)
 800f4aa:	697b      	ldr	r3, [r7, #20]
 800f4ac:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }

      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: packed for LISTENing connection.\n"));
      tcp_listen_input(lpcb);
 800f4ae:	6978      	ldr	r0, [r7, #20]
 800f4b0:	f000 f9f0 	bl	800f894 <tcp_listen_input>
      pbuf_free(p);
 800f4b4:	6878      	ldr	r0, [r7, #4]
 800f4b6:	f7fd ff4b 	bl	800d350 <pbuf_free>
      return;
 800f4ba:	e197      	b.n	800f7ec <tcp_input+0x744>
  tcp_debug_print_flags(TCPH_FLAGS(tcphdr));
  LWIP_DEBUGF(TCP_INPUT_DEBUG, ("-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n"));
#endif /* TCP_INPUT_DEBUG */


  if (pcb != NULL) {
 800f4bc:	69fb      	ldr	r3, [r7, #28]
 800f4be:	2b00      	cmp	r3, #0
 800f4c0:	f000 8164 	beq.w	800f78c <tcp_input+0x6e4>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 800f4c4:	4b2c      	ldr	r3, [pc, #176]	; (800f578 <tcp_input+0x4d0>)
 800f4c6:	2200      	movs	r2, #0
 800f4c8:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 800f4ca:	687b      	ldr	r3, [r7, #4]
 800f4cc:	891a      	ldrh	r2, [r3, #8]
 800f4ce:	4b2a      	ldr	r3, [pc, #168]	; (800f578 <tcp_input+0x4d0>)
 800f4d0:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 800f4d2:	4a29      	ldr	r2, [pc, #164]	; (800f578 <tcp_input+0x4d0>)
 800f4d4:	687b      	ldr	r3, [r7, #4]
 800f4d6:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 800f4d8:	4b1f      	ldr	r3, [pc, #124]	; (800f558 <tcp_input+0x4b0>)
 800f4da:	681b      	ldr	r3, [r3, #0]
 800f4dc:	4a26      	ldr	r2, [pc, #152]	; (800f578 <tcp_input+0x4d0>)
 800f4de:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 800f4e0:	4b26      	ldr	r3, [pc, #152]	; (800f57c <tcp_input+0x4d4>)
 800f4e2:	2200      	movs	r2, #0
 800f4e4:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 800f4e6:	4b26      	ldr	r3, [pc, #152]	; (800f580 <tcp_input+0x4d8>)
 800f4e8:	2200      	movs	r2, #0
 800f4ea:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 800f4ec:	4b25      	ldr	r3, [pc, #148]	; (800f584 <tcp_input+0x4dc>)
 800f4ee:	2200      	movs	r2, #0
 800f4f0:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 800f4f2:	4b25      	ldr	r3, [pc, #148]	; (800f588 <tcp_input+0x4e0>)
 800f4f4:	781b      	ldrb	r3, [r3, #0]
 800f4f6:	f003 0308 	and.w	r3, r3, #8
 800f4fa:	2b00      	cmp	r3, #0
 800f4fc:	d006      	beq.n	800f50c <tcp_input+0x464>
      p->flags |= PBUF_FLAG_PUSH;
 800f4fe:	687b      	ldr	r3, [r7, #4]
 800f500:	7b5b      	ldrb	r3, [r3, #13]
 800f502:	f043 0301 	orr.w	r3, r3, #1
 800f506:	b2da      	uxtb	r2, r3
 800f508:	687b      	ldr	r3, [r7, #4]
 800f50a:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 800f50c:	69fb      	ldr	r3, [r7, #28]
 800f50e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f510:	2b00      	cmp	r3, #0
 800f512:	d03d      	beq.n	800f590 <tcp_input+0x4e8>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800f514:	69f8      	ldr	r0, [r7, #28]
 800f516:	f7ff f991 	bl	800e83c <tcp_process_refused_data>
 800f51a:	4603      	mov	r3, r0
 800f51c:	f113 0f0d 	cmn.w	r3, #13
 800f520:	d007      	beq.n	800f532 <tcp_input+0x48a>
        ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800f522:	69fb      	ldr	r3, [r7, #28]
 800f524:	6f5b      	ldr	r3, [r3, #116]	; 0x74
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800f526:	2b00      	cmp	r3, #0
 800f528:	d032      	beq.n	800f590 <tcp_input+0x4e8>
        ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800f52a:	4b18      	ldr	r3, [pc, #96]	; (800f58c <tcp_input+0x4e4>)
 800f52c:	881b      	ldrh	r3, [r3, #0]
 800f52e:	2b00      	cmp	r3, #0
 800f530:	d02e      	beq.n	800f590 <tcp_input+0x4e8>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 800f532:	69fb      	ldr	r3, [r7, #28]
 800f534:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800f536:	2b00      	cmp	r3, #0
 800f538:	f040 8108 	bne.w	800f74c <tcp_input+0x6a4>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 800f53c:	69f8      	ldr	r0, [r7, #28]
 800f53e:	f002 fe3d 	bl	80121bc <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 800f542:	e103      	b.n	800f74c <tcp_input+0x6a4>
 800f544:	0801a2c0 	.word	0x0801a2c0
 800f548:	0801a358 	.word	0x0801a358
 800f54c:	0801a304 	.word	0x0801a304
 800f550:	0801a380 	.word	0x0801a380
 800f554:	0801a3ac 	.word	0x0801a3ac
 800f558:	20004224 	.word	0x20004224
 800f55c:	20007504 	.word	0x20007504
 800f560:	0801a3d4 	.word	0x0801a3d4
 800f564:	2000ac34 	.word	0x2000ac34
 800f568:	0801a400 	.word	0x0801a400
 800f56c:	2000ac44 	.word	0x2000ac44
 800f570:	0801a42c 	.word	0x0801a42c
 800f574:	2000ac3c 	.word	0x2000ac3c
 800f578:	20004214 	.word	0x20004214
 800f57c:	20004244 	.word	0x20004244
 800f580:	20004241 	.word	0x20004241
 800f584:	2000423c 	.word	0x2000423c
 800f588:	20004240 	.word	0x20004240
 800f58c:	2000423e 	.word	0x2000423e
      }
    }
    tcp_input_pcb = pcb;
 800f590:	4a98      	ldr	r2, [pc, #608]	; (800f7f4 <tcp_input+0x74c>)
 800f592:	69fb      	ldr	r3, [r7, #28]
 800f594:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 800f596:	69f8      	ldr	r0, [r7, #28]
 800f598:	f000 fac6 	bl	800fb28 <tcp_process>
 800f59c:	4603      	mov	r3, r0
 800f59e:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 800f5a0:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800f5a4:	f113 0f0d 	cmn.w	r3, #13
 800f5a8:	f000 80d2 	beq.w	800f750 <tcp_input+0x6a8>
      if (recv_flags & TF_RESET) {
 800f5ac:	4b92      	ldr	r3, [pc, #584]	; (800f7f8 <tcp_input+0x750>)
 800f5ae:	781b      	ldrb	r3, [r3, #0]
 800f5b0:	f003 0308 	and.w	r3, r3, #8
 800f5b4:	2b00      	cmp	r3, #0
 800f5b6:	d016      	beq.n	800f5e6 <tcp_input+0x53e>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 800f5b8:	69fb      	ldr	r3, [r7, #28]
 800f5ba:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800f5be:	2b00      	cmp	r3, #0
 800f5c0:	d008      	beq.n	800f5d4 <tcp_input+0x52c>
 800f5c2:	69fb      	ldr	r3, [r7, #28]
 800f5c4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800f5c8:	69fa      	ldr	r2, [r7, #28]
 800f5ca:	6912      	ldr	r2, [r2, #16]
 800f5cc:	f06f 010d 	mvn.w	r1, #13
 800f5d0:	4610      	mov	r0, r2
 800f5d2:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800f5d4:	69f9      	ldr	r1, [r7, #28]
 800f5d6:	4889      	ldr	r0, [pc, #548]	; (800f7fc <tcp_input+0x754>)
 800f5d8:	f7ff fc4c 	bl	800ee74 <tcp_pcb_remove>
        memp_free(MEMP_TCP_PCB, pcb);
 800f5dc:	69f9      	ldr	r1, [r7, #28]
 800f5de:	2001      	movs	r0, #1
 800f5e0:	f7fd f954 	bl	800c88c <memp_free>
 800f5e4:	e0bf      	b.n	800f766 <tcp_input+0x6be>
      } else {
        err = ERR_OK;
 800f5e6:	2300      	movs	r3, #0
 800f5e8:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 800f5ea:	4b85      	ldr	r3, [pc, #532]	; (800f800 <tcp_input+0x758>)
 800f5ec:	881b      	ldrh	r3, [r3, #0]
 800f5ee:	2b00      	cmp	r3, #0
 800f5f0:	d01b      	beq.n	800f62a <tcp_input+0x582>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 800f5f2:	4b83      	ldr	r3, [pc, #524]	; (800f800 <tcp_input+0x758>)
 800f5f4:	881b      	ldrh	r3, [r3, #0]
 800f5f6:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 800f5f8:	69fb      	ldr	r3, [r7, #28]
 800f5fa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f5fc:	2b00      	cmp	r3, #0
 800f5fe:	d009      	beq.n	800f614 <tcp_input+0x56c>
 800f600:	69fb      	ldr	r3, [r7, #28]
 800f602:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f604:	69fa      	ldr	r2, [r7, #28]
 800f606:	6910      	ldr	r0, [r2, #16]
 800f608:	89fa      	ldrh	r2, [r7, #14]
 800f60a:	69f9      	ldr	r1, [r7, #28]
 800f60c:	4798      	blx	r3
 800f60e:	4603      	mov	r3, r0
 800f610:	74fb      	strb	r3, [r7, #19]
 800f612:	e001      	b.n	800f618 <tcp_input+0x570>
 800f614:	2300      	movs	r3, #0
 800f616:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800f618:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800f61c:	f113 0f0d 	cmn.w	r3, #13
 800f620:	f000 8098 	beq.w	800f754 <tcp_input+0x6ac>
              goto aborted;
            }
          }
          recv_acked = 0;
 800f624:	4b76      	ldr	r3, [pc, #472]	; (800f800 <tcp_input+0x758>)
 800f626:	2200      	movs	r2, #0
 800f628:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 800f62a:	69f8      	ldr	r0, [r7, #28]
 800f62c:	f000 f900 	bl	800f830 <tcp_input_delayed_close>
 800f630:	4603      	mov	r3, r0
 800f632:	2b00      	cmp	r3, #0
 800f634:	f040 8090 	bne.w	800f758 <tcp_input+0x6b0>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 800f638:	4b72      	ldr	r3, [pc, #456]	; (800f804 <tcp_input+0x75c>)
 800f63a:	681b      	ldr	r3, [r3, #0]
 800f63c:	2b00      	cmp	r3, #0
 800f63e:	d041      	beq.n	800f6c4 <tcp_input+0x61c>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 800f640:	69fb      	ldr	r3, [r7, #28]
 800f642:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f644:	2b00      	cmp	r3, #0
 800f646:	d006      	beq.n	800f656 <tcp_input+0x5ae>
 800f648:	4b6f      	ldr	r3, [pc, #444]	; (800f808 <tcp_input+0x760>)
 800f64a:	f44f 72d2 	mov.w	r2, #420	; 0x1a4
 800f64e:	496f      	ldr	r1, [pc, #444]	; (800f80c <tcp_input+0x764>)
 800f650:	486f      	ldr	r0, [pc, #444]	; (800f810 <tcp_input+0x768>)
 800f652:	f008 fff9 	bl	8018648 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 800f656:	69fb      	ldr	r3, [r7, #28]
 800f658:	7e9b      	ldrb	r3, [r3, #26]
 800f65a:	f003 0310 	and.w	r3, r3, #16
 800f65e:	2b00      	cmp	r3, #0
 800f660:	d008      	beq.n	800f674 <tcp_input+0x5cc>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 800f662:	4b68      	ldr	r3, [pc, #416]	; (800f804 <tcp_input+0x75c>)
 800f664:	681b      	ldr	r3, [r3, #0]
 800f666:	4618      	mov	r0, r3
 800f668:	f7fd fe72 	bl	800d350 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 800f66c:	69f8      	ldr	r0, [r7, #28]
 800f66e:	f7fe fb7d 	bl	800dd6c <tcp_abort>
            goto aborted;
 800f672:	e078      	b.n	800f766 <tcp_input+0x6be>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 800f674:	69fb      	ldr	r3, [r7, #28]
 800f676:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800f67a:	2b00      	cmp	r3, #0
 800f67c:	d00c      	beq.n	800f698 <tcp_input+0x5f0>
 800f67e:	69fb      	ldr	r3, [r7, #28]
 800f680:	f8d3 4080 	ldr.w	r4, [r3, #128]	; 0x80
 800f684:	69fb      	ldr	r3, [r7, #28]
 800f686:	6918      	ldr	r0, [r3, #16]
 800f688:	4b5e      	ldr	r3, [pc, #376]	; (800f804 <tcp_input+0x75c>)
 800f68a:	681a      	ldr	r2, [r3, #0]
 800f68c:	2300      	movs	r3, #0
 800f68e:	69f9      	ldr	r1, [r7, #28]
 800f690:	47a0      	blx	r4
 800f692:	4603      	mov	r3, r0
 800f694:	74fb      	strb	r3, [r7, #19]
 800f696:	e008      	b.n	800f6aa <tcp_input+0x602>
 800f698:	4b5a      	ldr	r3, [pc, #360]	; (800f804 <tcp_input+0x75c>)
 800f69a:	681a      	ldr	r2, [r3, #0]
 800f69c:	2300      	movs	r3, #0
 800f69e:	69f9      	ldr	r1, [r7, #28]
 800f6a0:	2000      	movs	r0, #0
 800f6a2:	f7ff f98b 	bl	800e9bc <tcp_recv_null>
 800f6a6:	4603      	mov	r3, r0
 800f6a8:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 800f6aa:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800f6ae:	f113 0f0d 	cmn.w	r3, #13
 800f6b2:	d053      	beq.n	800f75c <tcp_input+0x6b4>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 800f6b4:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800f6b8:	2b00      	cmp	r3, #0
 800f6ba:	d003      	beq.n	800f6c4 <tcp_input+0x61c>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 800f6bc:	4b51      	ldr	r3, [pc, #324]	; (800f804 <tcp_input+0x75c>)
 800f6be:	681a      	ldr	r2, [r3, #0]
 800f6c0:	69fb      	ldr	r3, [r7, #28]
 800f6c2:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 800f6c4:	4b4c      	ldr	r3, [pc, #304]	; (800f7f8 <tcp_input+0x750>)
 800f6c6:	781b      	ldrb	r3, [r3, #0]
 800f6c8:	f003 0320 	and.w	r3, r3, #32
 800f6cc:	2b00      	cmp	r3, #0
 800f6ce:	d030      	beq.n	800f732 <tcp_input+0x68a>
          if (pcb->refused_data != NULL) {
 800f6d0:	69fb      	ldr	r3, [r7, #28]
 800f6d2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f6d4:	2b00      	cmp	r3, #0
 800f6d6:	d009      	beq.n	800f6ec <tcp_input+0x644>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 800f6d8:	69fb      	ldr	r3, [r7, #28]
 800f6da:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f6dc:	7b5a      	ldrb	r2, [r3, #13]
 800f6de:	69fb      	ldr	r3, [r7, #28]
 800f6e0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f6e2:	f042 0220 	orr.w	r2, r2, #32
 800f6e6:	b2d2      	uxtb	r2, r2
 800f6e8:	735a      	strb	r2, [r3, #13]
 800f6ea:	e022      	b.n	800f732 <tcp_input+0x68a>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800f6ec:	69fb      	ldr	r3, [r7, #28]
 800f6ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800f6f0:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800f6f4:	d005      	beq.n	800f702 <tcp_input+0x65a>
              pcb->rcv_wnd++;
 800f6f6:	69fb      	ldr	r3, [r7, #28]
 800f6f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800f6fa:	3301      	adds	r3, #1
 800f6fc:	b29a      	uxth	r2, r3
 800f6fe:	69fb      	ldr	r3, [r7, #28]
 800f700:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 800f702:	69fb      	ldr	r3, [r7, #28]
 800f704:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800f708:	2b00      	cmp	r3, #0
 800f70a:	d00b      	beq.n	800f724 <tcp_input+0x67c>
 800f70c:	69fb      	ldr	r3, [r7, #28]
 800f70e:	f8d3 4080 	ldr.w	r4, [r3, #128]	; 0x80
 800f712:	69fb      	ldr	r3, [r7, #28]
 800f714:	6918      	ldr	r0, [r3, #16]
 800f716:	2300      	movs	r3, #0
 800f718:	2200      	movs	r2, #0
 800f71a:	69f9      	ldr	r1, [r7, #28]
 800f71c:	47a0      	blx	r4
 800f71e:	4603      	mov	r3, r0
 800f720:	74fb      	strb	r3, [r7, #19]
 800f722:	e001      	b.n	800f728 <tcp_input+0x680>
 800f724:	2300      	movs	r3, #0
 800f726:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800f728:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800f72c:	f113 0f0d 	cmn.w	r3, #13
 800f730:	d016      	beq.n	800f760 <tcp_input+0x6b8>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 800f732:	4b30      	ldr	r3, [pc, #192]	; (800f7f4 <tcp_input+0x74c>)
 800f734:	2200      	movs	r2, #0
 800f736:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 800f738:	69f8      	ldr	r0, [r7, #28]
 800f73a:	f000 f879 	bl	800f830 <tcp_input_delayed_close>
 800f73e:	4603      	mov	r3, r0
 800f740:	2b00      	cmp	r3, #0
 800f742:	d10f      	bne.n	800f764 <tcp_input+0x6bc>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 800f744:	69f8      	ldr	r0, [r7, #28]
 800f746:	f002 fd95 	bl	8012274 <tcp_output>
 800f74a:	e00c      	b.n	800f766 <tcp_input+0x6be>
        goto aborted;
 800f74c:	bf00      	nop
 800f74e:	e00a      	b.n	800f766 <tcp_input+0x6be>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 800f750:	bf00      	nop
 800f752:	e008      	b.n	800f766 <tcp_input+0x6be>
              goto aborted;
 800f754:	bf00      	nop
 800f756:	e006      	b.n	800f766 <tcp_input+0x6be>
          goto aborted;
 800f758:	bf00      	nop
 800f75a:	e004      	b.n	800f766 <tcp_input+0x6be>
            goto aborted;
 800f75c:	bf00      	nop
 800f75e:	e002      	b.n	800f766 <tcp_input+0x6be>
              goto aborted;
 800f760:	bf00      	nop
 800f762:	e000      	b.n	800f766 <tcp_input+0x6be>
          goto aborted;
 800f764:	bf00      	nop
    tcp_input_pcb = NULL;
 800f766:	4b23      	ldr	r3, [pc, #140]	; (800f7f4 <tcp_input+0x74c>)
 800f768:	2200      	movs	r2, #0
 800f76a:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 800f76c:	4b25      	ldr	r3, [pc, #148]	; (800f804 <tcp_input+0x75c>)
 800f76e:	2200      	movs	r2, #0
 800f770:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL)
 800f772:	4b28      	ldr	r3, [pc, #160]	; (800f814 <tcp_input+0x76c>)
 800f774:	685b      	ldr	r3, [r3, #4]
 800f776:	2b00      	cmp	r3, #0
 800f778:	d037      	beq.n	800f7ea <tcp_input+0x742>
    {
      pbuf_free(inseg.p);
 800f77a:	4b26      	ldr	r3, [pc, #152]	; (800f814 <tcp_input+0x76c>)
 800f77c:	685b      	ldr	r3, [r3, #4]
 800f77e:	4618      	mov	r0, r3
 800f780:	f7fd fde6 	bl	800d350 <pbuf_free>
      inseg.p = NULL;
 800f784:	4b23      	ldr	r3, [pc, #140]	; (800f814 <tcp_input+0x76c>)
 800f786:	2200      	movs	r2, #0
 800f788:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 800f78a:	e02e      	b.n	800f7ea <tcp_input+0x742>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 800f78c:	4b22      	ldr	r3, [pc, #136]	; (800f818 <tcp_input+0x770>)
 800f78e:	681b      	ldr	r3, [r3, #0]
 800f790:	899b      	ldrh	r3, [r3, #12]
 800f792:	b29b      	uxth	r3, r3
 800f794:	4618      	mov	r0, r3
 800f796:	f7fc fc39 	bl	800c00c <lwip_htons>
 800f79a:	4603      	mov	r3, r0
 800f79c:	f003 0304 	and.w	r3, r3, #4
 800f7a0:	2b00      	cmp	r3, #0
 800f7a2:	d115      	bne.n	800f7d0 <tcp_input+0x728>
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800f7a4:	4b1d      	ldr	r3, [pc, #116]	; (800f81c <tcp_input+0x774>)
 800f7a6:	6818      	ldr	r0, [r3, #0]
 800f7a8:	4b1d      	ldr	r3, [pc, #116]	; (800f820 <tcp_input+0x778>)
 800f7aa:	881b      	ldrh	r3, [r3, #0]
 800f7ac:	461a      	mov	r2, r3
 800f7ae:	4b1d      	ldr	r3, [pc, #116]	; (800f824 <tcp_input+0x77c>)
 800f7b0:	681b      	ldr	r3, [r3, #0]
 800f7b2:	18d1      	adds	r1, r2, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800f7b4:	4b18      	ldr	r3, [pc, #96]	; (800f818 <tcp_input+0x770>)
 800f7b6:	681b      	ldr	r3, [r3, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800f7b8:	885b      	ldrh	r3, [r3, #2]
 800f7ba:	b29b      	uxth	r3, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800f7bc:	4a16      	ldr	r2, [pc, #88]	; (800f818 <tcp_input+0x770>)
 800f7be:	6812      	ldr	r2, [r2, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800f7c0:	8812      	ldrh	r2, [r2, #0]
 800f7c2:	b292      	uxth	r2, r2
 800f7c4:	9201      	str	r2, [sp, #4]
 800f7c6:	9300      	str	r3, [sp, #0]
 800f7c8:	4b17      	ldr	r3, [pc, #92]	; (800f828 <tcp_input+0x780>)
 800f7ca:	4a18      	ldr	r2, [pc, #96]	; (800f82c <tcp_input+0x784>)
 800f7cc:	f002 ffdc 	bl	8012788 <tcp_rst>
    pbuf_free(p);
 800f7d0:	6878      	ldr	r0, [r7, #4]
 800f7d2:	f7fd fdbd 	bl	800d350 <pbuf_free>
  return;
 800f7d6:	e008      	b.n	800f7ea <tcp_input+0x742>
    goto dropped;
 800f7d8:	bf00      	nop
 800f7da:	e002      	b.n	800f7e2 <tcp_input+0x73a>
dropped:
 800f7dc:	bf00      	nop
 800f7de:	e000      	b.n	800f7e2 <tcp_input+0x73a>
      goto dropped;
 800f7e0:	bf00      	nop
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 800f7e2:	6878      	ldr	r0, [r7, #4]
 800f7e4:	f7fd fdb4 	bl	800d350 <pbuf_free>
 800f7e8:	e000      	b.n	800f7ec <tcp_input+0x744>
  return;
 800f7ea:	bf00      	nop
}
 800f7ec:	3724      	adds	r7, #36	; 0x24
 800f7ee:	46bd      	mov	sp, r7
 800f7f0:	bd90      	pop	{r4, r7, pc}
 800f7f2:	bf00      	nop
 800f7f4:	2000ac48 	.word	0x2000ac48
 800f7f8:	20004241 	.word	0x20004241
 800f7fc:	2000ac34 	.word	0x2000ac34
 800f800:	2000423c 	.word	0x2000423c
 800f804:	20004244 	.word	0x20004244
 800f808:	0801a2c0 	.word	0x0801a2c0
 800f80c:	0801a45c 	.word	0x0801a45c
 800f810:	0801a304 	.word	0x0801a304
 800f814:	20004214 	.word	0x20004214
 800f818:	20004224 	.word	0x20004224
 800f81c:	20004238 	.word	0x20004238
 800f820:	2000423e 	.word	0x2000423e
 800f824:	20004234 	.word	0x20004234
 800f828:	20007514 	.word	0x20007514
 800f82c:	20007518 	.word	0x20007518

0800f830 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 800f830:	b580      	push	{r7, lr}
 800f832:	b082      	sub	sp, #8
 800f834:	af00      	add	r7, sp, #0
 800f836:	6078      	str	r0, [r7, #4]
  if (recv_flags & TF_CLOSED) {
 800f838:	4b14      	ldr	r3, [pc, #80]	; (800f88c <tcp_input_delayed_close+0x5c>)
 800f83a:	781b      	ldrb	r3, [r3, #0]
 800f83c:	f003 0310 	and.w	r3, r3, #16
 800f840:	2b00      	cmp	r3, #0
 800f842:	d01d      	beq.n	800f880 <tcp_input_delayed_close+0x50>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 800f844:	687b      	ldr	r3, [r7, #4]
 800f846:	7e9b      	ldrb	r3, [r3, #26]
 800f848:	f003 0310 	and.w	r3, r3, #16
 800f84c:	2b00      	cmp	r3, #0
 800f84e:	d10d      	bne.n	800f86c <tcp_input_delayed_close+0x3c>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 800f850:	687b      	ldr	r3, [r7, #4]
 800f852:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800f856:	2b00      	cmp	r3, #0
 800f858:	d008      	beq.n	800f86c <tcp_input_delayed_close+0x3c>
 800f85a:	687b      	ldr	r3, [r7, #4]
 800f85c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800f860:	687a      	ldr	r2, [r7, #4]
 800f862:	6912      	ldr	r2, [r2, #16]
 800f864:	f06f 010e 	mvn.w	r1, #14
 800f868:	4610      	mov	r0, r2
 800f86a:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800f86c:	6879      	ldr	r1, [r7, #4]
 800f86e:	4808      	ldr	r0, [pc, #32]	; (800f890 <tcp_input_delayed_close+0x60>)
 800f870:	f7ff fb00 	bl	800ee74 <tcp_pcb_remove>
    memp_free(MEMP_TCP_PCB, pcb);
 800f874:	6879      	ldr	r1, [r7, #4]
 800f876:	2001      	movs	r0, #1
 800f878:	f7fd f808 	bl	800c88c <memp_free>
    return 1;
 800f87c:	2301      	movs	r3, #1
 800f87e:	e000      	b.n	800f882 <tcp_input_delayed_close+0x52>
  }
  return 0;
 800f880:	2300      	movs	r3, #0
}
 800f882:	4618      	mov	r0, r3
 800f884:	3708      	adds	r7, #8
 800f886:	46bd      	mov	sp, r7
 800f888:	bd80      	pop	{r7, pc}
 800f88a:	bf00      	nop
 800f88c:	20004241 	.word	0x20004241
 800f890:	2000ac34 	.word	0x2000ac34

0800f894 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 800f894:	b580      	push	{r7, lr}
 800f896:	b088      	sub	sp, #32
 800f898:	af02      	add	r7, sp, #8
 800f89a:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 800f89c:	4b64      	ldr	r3, [pc, #400]	; (800fa30 <tcp_listen_input+0x19c>)
 800f89e:	781b      	ldrb	r3, [r3, #0]
 800f8a0:	f003 0304 	and.w	r3, r3, #4
 800f8a4:	2b00      	cmp	r3, #0
 800f8a6:	f040 80bc 	bne.w	800fa22 <tcp_listen_input+0x18e>
    return;
  }

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 800f8aa:	4b61      	ldr	r3, [pc, #388]	; (800fa30 <tcp_listen_input+0x19c>)
 800f8ac:	781b      	ldrb	r3, [r3, #0]
 800f8ae:	f003 0310 	and.w	r3, r3, #16
 800f8b2:	2b00      	cmp	r3, #0
 800f8b4:	d016      	beq.n	800f8e4 <tcp_listen_input+0x50>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800f8b6:	4b5f      	ldr	r3, [pc, #380]	; (800fa34 <tcp_listen_input+0x1a0>)
 800f8b8:	6818      	ldr	r0, [r3, #0]
 800f8ba:	4b5f      	ldr	r3, [pc, #380]	; (800fa38 <tcp_listen_input+0x1a4>)
 800f8bc:	881b      	ldrh	r3, [r3, #0]
 800f8be:	461a      	mov	r2, r3
 800f8c0:	4b5e      	ldr	r3, [pc, #376]	; (800fa3c <tcp_listen_input+0x1a8>)
 800f8c2:	681b      	ldr	r3, [r3, #0]
 800f8c4:	18d1      	adds	r1, r2, r3
      ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800f8c6:	4b5e      	ldr	r3, [pc, #376]	; (800fa40 <tcp_listen_input+0x1ac>)
 800f8c8:	681b      	ldr	r3, [r3, #0]
    tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800f8ca:	885b      	ldrh	r3, [r3, #2]
 800f8cc:	b29b      	uxth	r3, r3
      ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800f8ce:	4a5c      	ldr	r2, [pc, #368]	; (800fa40 <tcp_listen_input+0x1ac>)
 800f8d0:	6812      	ldr	r2, [r2, #0]
    tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800f8d2:	8812      	ldrh	r2, [r2, #0]
 800f8d4:	b292      	uxth	r2, r2
 800f8d6:	9201      	str	r2, [sp, #4]
 800f8d8:	9300      	str	r3, [sp, #0]
 800f8da:	4b5a      	ldr	r3, [pc, #360]	; (800fa44 <tcp_listen_input+0x1b0>)
 800f8dc:	4a5a      	ldr	r2, [pc, #360]	; (800fa48 <tcp_listen_input+0x1b4>)
 800f8de:	f002 ff53 	bl	8012788 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 800f8e2:	e0a0      	b.n	800fa26 <tcp_listen_input+0x192>
  } else if (flags & TCP_SYN) {
 800f8e4:	4b52      	ldr	r3, [pc, #328]	; (800fa30 <tcp_listen_input+0x19c>)
 800f8e6:	781b      	ldrb	r3, [r3, #0]
 800f8e8:	f003 0302 	and.w	r3, r3, #2
 800f8ec:	2b00      	cmp	r3, #0
 800f8ee:	f000 809a 	beq.w	800fa26 <tcp_listen_input+0x192>
    npcb = tcp_alloc(pcb->prio);
 800f8f2:	687b      	ldr	r3, [r7, #4]
 800f8f4:	7d5b      	ldrb	r3, [r3, #21]
 800f8f6:	4618      	mov	r0, r3
 800f8f8:	f7ff f93e 	bl	800eb78 <tcp_alloc>
 800f8fc:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 800f8fe:	697b      	ldr	r3, [r7, #20]
 800f900:	2b00      	cmp	r3, #0
 800f902:	d111      	bne.n	800f928 <tcp_listen_input+0x94>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800f904:	687b      	ldr	r3, [r7, #4]
 800f906:	699b      	ldr	r3, [r3, #24]
 800f908:	2b00      	cmp	r3, #0
 800f90a:	d00a      	beq.n	800f922 <tcp_listen_input+0x8e>
 800f90c:	687b      	ldr	r3, [r7, #4]
 800f90e:	699b      	ldr	r3, [r3, #24]
 800f910:	687a      	ldr	r2, [r7, #4]
 800f912:	6910      	ldr	r0, [r2, #16]
 800f914:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800f918:	2100      	movs	r1, #0
 800f91a:	4798      	blx	r3
 800f91c:	4603      	mov	r3, r0
 800f91e:	73bb      	strb	r3, [r7, #14]
      return;
 800f920:	e082      	b.n	800fa28 <tcp_listen_input+0x194>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800f922:	23f0      	movs	r3, #240	; 0xf0
 800f924:	73bb      	strb	r3, [r7, #14]
      return;
 800f926:	e07f      	b.n	800fa28 <tcp_listen_input+0x194>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 800f928:	4b48      	ldr	r3, [pc, #288]	; (800fa4c <tcp_listen_input+0x1b8>)
 800f92a:	695a      	ldr	r2, [r3, #20]
 800f92c:	697b      	ldr	r3, [r7, #20]
 800f92e:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 800f930:	4b46      	ldr	r3, [pc, #280]	; (800fa4c <tcp_listen_input+0x1b8>)
 800f932:	691a      	ldr	r2, [r3, #16]
 800f934:	697b      	ldr	r3, [r7, #20]
 800f936:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 800f938:	687b      	ldr	r3, [r7, #4]
 800f93a:	8ada      	ldrh	r2, [r3, #22]
 800f93c:	697b      	ldr	r3, [r7, #20]
 800f93e:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 800f940:	4b3f      	ldr	r3, [pc, #252]	; (800fa40 <tcp_listen_input+0x1ac>)
 800f942:	681b      	ldr	r3, [r3, #0]
 800f944:	881b      	ldrh	r3, [r3, #0]
 800f946:	b29a      	uxth	r2, r3
 800f948:	697b      	ldr	r3, [r7, #20]
 800f94a:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 800f94c:	697b      	ldr	r3, [r7, #20]
 800f94e:	2203      	movs	r2, #3
 800f950:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 800f952:	4b3a      	ldr	r3, [pc, #232]	; (800fa3c <tcp_listen_input+0x1a8>)
 800f954:	681b      	ldr	r3, [r3, #0]
 800f956:	1c5a      	adds	r2, r3, #1
 800f958:	697b      	ldr	r3, [r7, #20]
 800f95a:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 800f95c:	697b      	ldr	r3, [r7, #20]
 800f95e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800f960:	697b      	ldr	r3, [r7, #20]
 800f962:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 800f964:	6978      	ldr	r0, [r7, #20]
 800f966:	f7ff fb01 	bl	800ef6c <tcp_next_iss>
 800f96a:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 800f96c:	697b      	ldr	r3, [r7, #20]
 800f96e:	693a      	ldr	r2, [r7, #16]
 800f970:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->snd_nxt = iss;
 800f972:	697b      	ldr	r3, [r7, #20]
 800f974:	693a      	ldr	r2, [r7, #16]
 800f976:	64da      	str	r2, [r3, #76]	; 0x4c
    npcb->lastack = iss;
 800f978:	697b      	ldr	r3, [r7, #20]
 800f97a:	693a      	ldr	r2, [r7, #16]
 800f97c:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 800f97e:	697b      	ldr	r3, [r7, #20]
 800f980:	693a      	ldr	r2, [r7, #16]
 800f982:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 800f984:	4b2d      	ldr	r3, [pc, #180]	; (800fa3c <tcp_listen_input+0x1a8>)
 800f986:	681b      	ldr	r3, [r3, #0]
 800f988:	1e5a      	subs	r2, r3, #1
 800f98a:	697b      	ldr	r3, [r7, #20]
 800f98c:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->callback_arg = pcb->callback_arg;
 800f98e:	687b      	ldr	r3, [r7, #4]
 800f990:	691a      	ldr	r2, [r3, #16]
 800f992:	697b      	ldr	r3, [r7, #20]
 800f994:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 800f996:	697b      	ldr	r3, [r7, #20]
 800f998:	687a      	ldr	r2, [r7, #4]
 800f99a:	679a      	str	r2, [r3, #120]	; 0x78
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 800f99c:	687b      	ldr	r3, [r7, #4]
 800f99e:	7a1b      	ldrb	r3, [r3, #8]
 800f9a0:	f003 030c 	and.w	r3, r3, #12
 800f9a4:	b2da      	uxtb	r2, r3
 800f9a6:	697b      	ldr	r3, [r7, #20]
 800f9a8:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 800f9aa:	4b29      	ldr	r3, [pc, #164]	; (800fa50 <tcp_listen_input+0x1bc>)
 800f9ac:	681a      	ldr	r2, [r3, #0]
 800f9ae:	697b      	ldr	r3, [r7, #20]
 800f9b0:	60da      	str	r2, [r3, #12]
 800f9b2:	4a27      	ldr	r2, [pc, #156]	; (800fa50 <tcp_listen_input+0x1bc>)
 800f9b4:	697b      	ldr	r3, [r7, #20]
 800f9b6:	6013      	str	r3, [r2, #0]
 800f9b8:	f003 f936 	bl	8012c28 <tcp_timer_needed>
 800f9bc:	4b25      	ldr	r3, [pc, #148]	; (800fa54 <tcp_listen_input+0x1c0>)
 800f9be:	2201      	movs	r2, #1
 800f9c0:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 800f9c2:	6978      	ldr	r0, [r7, #20]
 800f9c4:	f001 fd14 	bl	80113f0 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 800f9c8:	4b1d      	ldr	r3, [pc, #116]	; (800fa40 <tcp_listen_input+0x1ac>)
 800f9ca:	681b      	ldr	r3, [r3, #0]
 800f9cc:	89db      	ldrh	r3, [r3, #14]
 800f9ce:	b29a      	uxth	r2, r3
 800f9d0:	697b      	ldr	r3, [r7, #20]
 800f9d2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    npcb->snd_wnd_max = npcb->snd_wnd;
 800f9d6:	697b      	ldr	r3, [r7, #20]
 800f9d8:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800f9dc:	697b      	ldr	r3, [r7, #20]
 800f9de:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 800f9e2:	697b      	ldr	r3, [r7, #20]
 800f9e4:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 800f9e6:	697b      	ldr	r3, [r7, #20]
 800f9e8:	3304      	adds	r3, #4
 800f9ea:	4619      	mov	r1, r3
 800f9ec:	4610      	mov	r0, r2
 800f9ee:	f7ff fad5 	bl	800ef9c <tcp_eff_send_mss_impl>
 800f9f2:	4603      	mov	r3, r0
 800f9f4:	461a      	mov	r2, r3
 800f9f6:	697b      	ldr	r3, [r7, #20]
 800f9f8:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 800f9fa:	2112      	movs	r1, #18
 800f9fc:	6978      	ldr	r0, [r7, #20]
 800f9fe:	f002 fae1 	bl	8011fc4 <tcp_enqueue_flags>
 800fa02:	4603      	mov	r3, r0
 800fa04:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 800fa06:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800fa0a:	2b00      	cmp	r3, #0
 800fa0c:	d004      	beq.n	800fa18 <tcp_listen_input+0x184>
      tcp_abandon(npcb, 0);
 800fa0e:	2100      	movs	r1, #0
 800fa10:	6978      	ldr	r0, [r7, #20]
 800fa12:	f7fe f8f9 	bl	800dc08 <tcp_abandon>
      return;
 800fa16:	e007      	b.n	800fa28 <tcp_listen_input+0x194>
    tcp_output(npcb);
 800fa18:	6978      	ldr	r0, [r7, #20]
 800fa1a:	f002 fc2b 	bl	8012274 <tcp_output>
  return;
 800fa1e:	bf00      	nop
 800fa20:	e001      	b.n	800fa26 <tcp_listen_input+0x192>
    return;
 800fa22:	bf00      	nop
 800fa24:	e000      	b.n	800fa28 <tcp_listen_input+0x194>
  return;
 800fa26:	bf00      	nop
}
 800fa28:	3718      	adds	r7, #24
 800fa2a:	46bd      	mov	sp, r7
 800fa2c:	bd80      	pop	{r7, pc}
 800fa2e:	bf00      	nop
 800fa30:	20004240 	.word	0x20004240
 800fa34:	20004238 	.word	0x20004238
 800fa38:	2000423e 	.word	0x2000423e
 800fa3c:	20004234 	.word	0x20004234
 800fa40:	20004224 	.word	0x20004224
 800fa44:	20007514 	.word	0x20007514
 800fa48:	20007518 	.word	0x20007518
 800fa4c:	20007504 	.word	0x20007504
 800fa50:	2000ac34 	.word	0x2000ac34
 800fa54:	2000ac30 	.word	0x2000ac30

0800fa58 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 800fa58:	b580      	push	{r7, lr}
 800fa5a:	b084      	sub	sp, #16
 800fa5c:	af02      	add	r7, sp, #8
 800fa5e:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 800fa60:	4b29      	ldr	r3, [pc, #164]	; (800fb08 <tcp_timewait_input+0xb0>)
 800fa62:	781b      	ldrb	r3, [r3, #0]
 800fa64:	f003 0304 	and.w	r3, r3, #4
 800fa68:	2b00      	cmp	r3, #0
 800fa6a:	d147      	bne.n	800fafc <tcp_timewait_input+0xa4>
    return;
  }
  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 800fa6c:	4b26      	ldr	r3, [pc, #152]	; (800fb08 <tcp_timewait_input+0xb0>)
 800fa6e:	781b      	ldrb	r3, [r3, #0]
 800fa70:	f003 0302 	and.w	r3, r3, #2
 800fa74:	2b00      	cmp	r3, #0
 800fa76:	d027      	beq.n	800fac8 <tcp_timewait_input+0x70>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 800fa78:	4b24      	ldr	r3, [pc, #144]	; (800fb0c <tcp_timewait_input+0xb4>)
 800fa7a:	681a      	ldr	r2, [r3, #0]
 800fa7c:	687b      	ldr	r3, [r7, #4]
 800fa7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fa80:	1ad3      	subs	r3, r2, r3
 800fa82:	2b00      	cmp	r3, #0
 800fa84:	db2a      	blt.n	800fadc <tcp_timewait_input+0x84>
 800fa86:	4b21      	ldr	r3, [pc, #132]	; (800fb0c <tcp_timewait_input+0xb4>)
 800fa88:	681a      	ldr	r2, [r3, #0]
 800fa8a:	687b      	ldr	r3, [r7, #4]
 800fa8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fa8e:	6879      	ldr	r1, [r7, #4]
 800fa90:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800fa92:	440b      	add	r3, r1
 800fa94:	1ad3      	subs	r3, r2, r3
 800fa96:	2b00      	cmp	r3, #0
 800fa98:	dc20      	bgt.n	800fadc <tcp_timewait_input+0x84>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800fa9a:	4b1d      	ldr	r3, [pc, #116]	; (800fb10 <tcp_timewait_input+0xb8>)
 800fa9c:	6818      	ldr	r0, [r3, #0]
 800fa9e:	4b1d      	ldr	r3, [pc, #116]	; (800fb14 <tcp_timewait_input+0xbc>)
 800faa0:	881b      	ldrh	r3, [r3, #0]
 800faa2:	461a      	mov	r2, r3
 800faa4:	4b19      	ldr	r3, [pc, #100]	; (800fb0c <tcp_timewait_input+0xb4>)
 800faa6:	681b      	ldr	r3, [r3, #0]
 800faa8:	18d1      	adds	r1, r2, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800faaa:	4b1b      	ldr	r3, [pc, #108]	; (800fb18 <tcp_timewait_input+0xc0>)
 800faac:	681b      	ldr	r3, [r3, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800faae:	885b      	ldrh	r3, [r3, #2]
 800fab0:	b29b      	uxth	r3, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800fab2:	4a19      	ldr	r2, [pc, #100]	; (800fb18 <tcp_timewait_input+0xc0>)
 800fab4:	6812      	ldr	r2, [r2, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800fab6:	8812      	ldrh	r2, [r2, #0]
 800fab8:	b292      	uxth	r2, r2
 800faba:	9201      	str	r2, [sp, #4]
 800fabc:	9300      	str	r3, [sp, #0]
 800fabe:	4b17      	ldr	r3, [pc, #92]	; (800fb1c <tcp_timewait_input+0xc4>)
 800fac0:	4a17      	ldr	r2, [pc, #92]	; (800fb20 <tcp_timewait_input+0xc8>)
 800fac2:	f002 fe61 	bl	8012788 <tcp_rst>
      return;
 800fac6:	e01c      	b.n	800fb02 <tcp_timewait_input+0xaa>
    }
  } else if (flags & TCP_FIN) {
 800fac8:	4b0f      	ldr	r3, [pc, #60]	; (800fb08 <tcp_timewait_input+0xb0>)
 800faca:	781b      	ldrb	r3, [r3, #0]
 800facc:	f003 0301 	and.w	r3, r3, #1
 800fad0:	2b00      	cmp	r3, #0
 800fad2:	d003      	beq.n	800fadc <tcp_timewait_input+0x84>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 800fad4:	4b13      	ldr	r3, [pc, #76]	; (800fb24 <tcp_timewait_input+0xcc>)
 800fad6:	681a      	ldr	r2, [r3, #0]
 800fad8:	687b      	ldr	r3, [r7, #4]
 800fada:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 800fadc:	4b0d      	ldr	r3, [pc, #52]	; (800fb14 <tcp_timewait_input+0xbc>)
 800fade:	881b      	ldrh	r3, [r3, #0]
 800fae0:	2b00      	cmp	r3, #0
 800fae2:	d00d      	beq.n	800fb00 <tcp_timewait_input+0xa8>
    /* Acknowledge data, FIN or out-of-window SYN */
    pcb->flags |= TF_ACK_NOW;
 800fae4:	687b      	ldr	r3, [r7, #4]
 800fae6:	7e9b      	ldrb	r3, [r3, #26]
 800fae8:	f043 0302 	orr.w	r3, r3, #2
 800faec:	b2da      	uxtb	r2, r3
 800faee:	687b      	ldr	r3, [r7, #4]
 800faf0:	769a      	strb	r2, [r3, #26]
    tcp_output(pcb);
 800faf2:	6878      	ldr	r0, [r7, #4]
 800faf4:	f002 fbbe 	bl	8012274 <tcp_output>
  }
  return;
 800faf8:	bf00      	nop
 800fafa:	e001      	b.n	800fb00 <tcp_timewait_input+0xa8>
    return;
 800fafc:	bf00      	nop
 800fafe:	e000      	b.n	800fb02 <tcp_timewait_input+0xaa>
  return;
 800fb00:	bf00      	nop
}
 800fb02:	3708      	adds	r7, #8
 800fb04:	46bd      	mov	sp, r7
 800fb06:	bd80      	pop	{r7, pc}
 800fb08:	20004240 	.word	0x20004240
 800fb0c:	20004234 	.word	0x20004234
 800fb10:	20004238 	.word	0x20004238
 800fb14:	2000423e 	.word	0x2000423e
 800fb18:	20004224 	.word	0x20004224
 800fb1c:	20007514 	.word	0x20007514
 800fb20:	20007518 	.word	0x20007518
 800fb24:	2000ac38 	.word	0x2000ac38

0800fb28 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 800fb28:	b580      	push	{r7, lr}
 800fb2a:	b08a      	sub	sp, #40	; 0x28
 800fb2c:	af02      	add	r7, sp, #8
 800fb2e:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 800fb30:	2300      	movs	r3, #0
 800fb32:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 800fb34:	2300      	movs	r3, #0
 800fb36:	76bb      	strb	r3, [r7, #26]

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 800fb38:	4ba4      	ldr	r3, [pc, #656]	; (800fdcc <tcp_process+0x2a4>)
 800fb3a:	781b      	ldrb	r3, [r3, #0]
 800fb3c:	f003 0304 	and.w	r3, r3, #4
 800fb40:	2b00      	cmp	r3, #0
 800fb42:	d04e      	beq.n	800fbe2 <tcp_process+0xba>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 800fb44:	687b      	ldr	r3, [r7, #4]
 800fb46:	7d1b      	ldrb	r3, [r3, #20]
 800fb48:	2b02      	cmp	r3, #2
 800fb4a:	d108      	bne.n	800fb5e <tcp_process+0x36>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 800fb4c:	687b      	ldr	r3, [r7, #4]
 800fb4e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800fb50:	4b9f      	ldr	r3, [pc, #636]	; (800fdd0 <tcp_process+0x2a8>)
 800fb52:	681b      	ldr	r3, [r3, #0]
 800fb54:	429a      	cmp	r2, r3
 800fb56:	d123      	bne.n	800fba0 <tcp_process+0x78>
        acceptable = 1;
 800fb58:	2301      	movs	r3, #1
 800fb5a:	76fb      	strb	r3, [r7, #27]
 800fb5c:	e020      	b.n	800fba0 <tcp_process+0x78>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 800fb5e:	687b      	ldr	r3, [r7, #4]
 800fb60:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800fb62:	4b9c      	ldr	r3, [pc, #624]	; (800fdd4 <tcp_process+0x2ac>)
 800fb64:	681b      	ldr	r3, [r3, #0]
 800fb66:	429a      	cmp	r2, r3
 800fb68:	d102      	bne.n	800fb70 <tcp_process+0x48>
        acceptable = 1;
 800fb6a:	2301      	movs	r3, #1
 800fb6c:	76fb      	strb	r3, [r7, #27]
 800fb6e:	e017      	b.n	800fba0 <tcp_process+0x78>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800fb70:	4b98      	ldr	r3, [pc, #608]	; (800fdd4 <tcp_process+0x2ac>)
 800fb72:	681a      	ldr	r2, [r3, #0]
 800fb74:	687b      	ldr	r3, [r7, #4]
 800fb76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fb78:	1ad3      	subs	r3, r2, r3
 800fb7a:	2b00      	cmp	r3, #0
 800fb7c:	db10      	blt.n	800fba0 <tcp_process+0x78>
 800fb7e:	4b95      	ldr	r3, [pc, #596]	; (800fdd4 <tcp_process+0x2ac>)
 800fb80:	681a      	ldr	r2, [r3, #0]
 800fb82:	687b      	ldr	r3, [r7, #4]
 800fb84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fb86:	6879      	ldr	r1, [r7, #4]
 800fb88:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800fb8a:	440b      	add	r3, r1
 800fb8c:	1ad3      	subs	r3, r2, r3
 800fb8e:	2b00      	cmp	r3, #0
 800fb90:	dc06      	bgt.n	800fba0 <tcp_process+0x78>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we only send an ACK
           and wait for a re-send with matching sequence number.
           This violates RFC 793, but is required to protection against
           CVE-2004-0230 (RST spoofing attack). */
        tcp_ack_now(pcb);
 800fb92:	687b      	ldr	r3, [r7, #4]
 800fb94:	7e9b      	ldrb	r3, [r3, #26]
 800fb96:	f043 0302 	orr.w	r3, r3, #2
 800fb9a:	b2da      	uxtb	r2, r3
 800fb9c:	687b      	ldr	r3, [r7, #4]
 800fb9e:	769a      	strb	r2, [r3, #26]
      }
    }

    if (acceptable) {
 800fba0:	7efb      	ldrb	r3, [r7, #27]
 800fba2:	2b00      	cmp	r3, #0
 800fba4:	d01b      	beq.n	800fbde <tcp_process+0xb6>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 800fba6:	687b      	ldr	r3, [r7, #4]
 800fba8:	7d1b      	ldrb	r3, [r3, #20]
 800fbaa:	2b00      	cmp	r3, #0
 800fbac:	d106      	bne.n	800fbbc <tcp_process+0x94>
 800fbae:	4b8a      	ldr	r3, [pc, #552]	; (800fdd8 <tcp_process+0x2b0>)
 800fbb0:	f240 22e7 	movw	r2, #743	; 0x2e7
 800fbb4:	4989      	ldr	r1, [pc, #548]	; (800fddc <tcp_process+0x2b4>)
 800fbb6:	488a      	ldr	r0, [pc, #552]	; (800fde0 <tcp_process+0x2b8>)
 800fbb8:	f008 fd46 	bl	8018648 <iprintf>
      recv_flags |= TF_RESET;
 800fbbc:	4b89      	ldr	r3, [pc, #548]	; (800fde4 <tcp_process+0x2bc>)
 800fbbe:	781b      	ldrb	r3, [r3, #0]
 800fbc0:	f043 0308 	orr.w	r3, r3, #8
 800fbc4:	b2da      	uxtb	r2, r3
 800fbc6:	4b87      	ldr	r3, [pc, #540]	; (800fde4 <tcp_process+0x2bc>)
 800fbc8:	701a      	strb	r2, [r3, #0]
      pcb->flags &= ~TF_ACK_DELAY;
 800fbca:	687b      	ldr	r3, [r7, #4]
 800fbcc:	7e9b      	ldrb	r3, [r3, #26]
 800fbce:	f023 0301 	bic.w	r3, r3, #1
 800fbd2:	b2da      	uxtb	r2, r3
 800fbd4:	687b      	ldr	r3, [r7, #4]
 800fbd6:	769a      	strb	r2, [r3, #26]
      return ERR_RST;
 800fbd8:	f06f 030d 	mvn.w	r3, #13
 800fbdc:	e34d      	b.n	801027a <tcp_process+0x752>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
       seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
       seqno, pcb->rcv_nxt));
      return ERR_OK;
 800fbde:	2300      	movs	r3, #0
 800fbe0:	e34b      	b.n	801027a <tcp_process+0x752>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 800fbe2:	4b7a      	ldr	r3, [pc, #488]	; (800fdcc <tcp_process+0x2a4>)
 800fbe4:	781b      	ldrb	r3, [r3, #0]
 800fbe6:	f003 0302 	and.w	r3, r3, #2
 800fbea:	2b00      	cmp	r3, #0
 800fbec:	d010      	beq.n	800fc10 <tcp_process+0xe8>
 800fbee:	687b      	ldr	r3, [r7, #4]
 800fbf0:	7d1b      	ldrb	r3, [r3, #20]
 800fbf2:	2b02      	cmp	r3, #2
 800fbf4:	d00c      	beq.n	800fc10 <tcp_process+0xe8>
 800fbf6:	687b      	ldr	r3, [r7, #4]
 800fbf8:	7d1b      	ldrb	r3, [r3, #20]
 800fbfa:	2b03      	cmp	r3, #3
 800fbfc:	d008      	beq.n	800fc10 <tcp_process+0xe8>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 800fbfe:	687b      	ldr	r3, [r7, #4]
 800fc00:	7e9b      	ldrb	r3, [r3, #26]
 800fc02:	f043 0302 	orr.w	r3, r3, #2
 800fc06:	b2da      	uxtb	r2, r3
 800fc08:	687b      	ldr	r3, [r7, #4]
 800fc0a:	769a      	strb	r2, [r3, #26]
    return ERR_OK;
 800fc0c:	2300      	movs	r3, #0
 800fc0e:	e334      	b.n	801027a <tcp_process+0x752>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 800fc10:	687b      	ldr	r3, [r7, #4]
 800fc12:	7e9b      	ldrb	r3, [r3, #26]
 800fc14:	f003 0310 	and.w	r3, r3, #16
 800fc18:	2b00      	cmp	r3, #0
 800fc1a:	d103      	bne.n	800fc24 <tcp_process+0xfc>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 800fc1c:	4b72      	ldr	r3, [pc, #456]	; (800fde8 <tcp_process+0x2c0>)
 800fc1e:	681a      	ldr	r2, [r3, #0]
 800fc20:	687b      	ldr	r3, [r7, #4]
 800fc22:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 800fc24:	687b      	ldr	r3, [r7, #4]
 800fc26:	2200      	movs	r2, #0
 800fc28:	f883 2096 	strb.w	r2, [r3, #150]	; 0x96

  tcp_parseopt(pcb);
 800fc2c:	6878      	ldr	r0, [r7, #4]
 800fc2e:	f001 fbdf 	bl	80113f0 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 800fc32:	687b      	ldr	r3, [r7, #4]
 800fc34:	7d1b      	ldrb	r3, [r3, #20]
 800fc36:	3b02      	subs	r3, #2
 800fc38:	2b07      	cmp	r3, #7
 800fc3a:	f200 830e 	bhi.w	801025a <tcp_process+0x732>
 800fc3e:	a201      	add	r2, pc, #4	; (adr r2, 800fc44 <tcp_process+0x11c>)
 800fc40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fc44:	0800fc65 	.word	0x0800fc65
 800fc48:	0800fe5d 	.word	0x0800fe5d
 800fc4c:	0800ffb5 	.word	0x0800ffb5
 800fc50:	0800ffdf 	.word	0x0800ffdf
 800fc54:	08010109 	.word	0x08010109
 800fc58:	0800ffb5 	.word	0x0800ffb5
 800fc5c:	08010195 	.word	0x08010195
 800fc60:	08010225 	.word	0x08010225
  case SYN_SENT:
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
     pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    /* received SYN ACK with expected sequence number? */
    if ((flags & TCP_ACK) && (flags & TCP_SYN)
 800fc64:	4b59      	ldr	r3, [pc, #356]	; (800fdcc <tcp_process+0x2a4>)
 800fc66:	781b      	ldrb	r3, [r3, #0]
 800fc68:	f003 0310 	and.w	r3, r3, #16
 800fc6c:	2b00      	cmp	r3, #0
 800fc6e:	f000 80cb 	beq.w	800fe08 <tcp_process+0x2e0>
 800fc72:	4b56      	ldr	r3, [pc, #344]	; (800fdcc <tcp_process+0x2a4>)
 800fc74:	781b      	ldrb	r3, [r3, #0]
 800fc76:	f003 0302 	and.w	r3, r3, #2
 800fc7a:	2b00      	cmp	r3, #0
 800fc7c:	f000 80c4 	beq.w	800fe08 <tcp_process+0x2e0>
        && (ackno == pcb->lastack + 1)) {
 800fc80:	687b      	ldr	r3, [r7, #4]
 800fc82:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800fc84:	1c5a      	adds	r2, r3, #1
 800fc86:	4b52      	ldr	r3, [pc, #328]	; (800fdd0 <tcp_process+0x2a8>)
 800fc88:	681b      	ldr	r3, [r3, #0]
 800fc8a:	429a      	cmp	r2, r3
 800fc8c:	f040 80bc 	bne.w	800fe08 <tcp_process+0x2e0>
      pcb->rcv_nxt = seqno + 1;
 800fc90:	4b50      	ldr	r3, [pc, #320]	; (800fdd4 <tcp_process+0x2ac>)
 800fc92:	681b      	ldr	r3, [r3, #0]
 800fc94:	1c5a      	adds	r2, r3, #1
 800fc96:	687b      	ldr	r3, [r7, #4]
 800fc98:	625a      	str	r2, [r3, #36]	; 0x24
      pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 800fc9a:	687b      	ldr	r3, [r7, #4]
 800fc9c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800fc9e:	687b      	ldr	r3, [r7, #4]
 800fca0:	62da      	str	r2, [r3, #44]	; 0x2c
      pcb->lastack = ackno;
 800fca2:	4b4b      	ldr	r3, [pc, #300]	; (800fdd0 <tcp_process+0x2a8>)
 800fca4:	681a      	ldr	r2, [r3, #0]
 800fca6:	687b      	ldr	r3, [r7, #4]
 800fca8:	645a      	str	r2, [r3, #68]	; 0x44
      pcb->snd_wnd = tcphdr->wnd;
 800fcaa:	4b50      	ldr	r3, [pc, #320]	; (800fdec <tcp_process+0x2c4>)
 800fcac:	681b      	ldr	r3, [r3, #0]
 800fcae:	89db      	ldrh	r3, [r3, #14]
 800fcb0:	b29a      	uxth	r2, r3
 800fcb2:	687b      	ldr	r3, [r7, #4]
 800fcb4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
      pcb->snd_wnd_max = pcb->snd_wnd;
 800fcb8:	687b      	ldr	r3, [r7, #4]
 800fcba:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800fcbe:	687b      	ldr	r3, [r7, #4]
 800fcc0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 800fcc4:	4b43      	ldr	r3, [pc, #268]	; (800fdd4 <tcp_process+0x2ac>)
 800fcc6:	681b      	ldr	r3, [r3, #0]
 800fcc8:	1e5a      	subs	r2, r3, #1
 800fcca:	687b      	ldr	r3, [r7, #4]
 800fccc:	651a      	str	r2, [r3, #80]	; 0x50
      pcb->state = ESTABLISHED;
 800fcce:	687b      	ldr	r3, [r7, #4]
 800fcd0:	2204      	movs	r2, #4
 800fcd2:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
      pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 800fcd4:	687b      	ldr	r3, [r7, #4]
 800fcd6:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 800fcd8:	687b      	ldr	r3, [r7, #4]
 800fcda:	3304      	adds	r3, #4
 800fcdc:	4619      	mov	r1, r3
 800fcde:	4610      	mov	r0, r2
 800fce0:	f7ff f95c 	bl	800ef9c <tcp_eff_send_mss_impl>
 800fce4:	4603      	mov	r3, r0
 800fce6:	461a      	mov	r2, r3
 800fce8:	687b      	ldr	r3, [r7, #4]
 800fcea:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

      pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800fcec:	687b      	ldr	r3, [r7, #4]
 800fcee:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800fcf0:	005b      	lsls	r3, r3, #1
 800fcf2:	f241 121c 	movw	r2, #4380	; 0x111c
 800fcf6:	429a      	cmp	r2, r3
 800fcf8:	bf38      	it	cc
 800fcfa:	461a      	movcc	r2, r3
 800fcfc:	687b      	ldr	r3, [r7, #4]
 800fcfe:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800fd00:	009b      	lsls	r3, r3, #2
 800fd02:	4293      	cmp	r3, r2
 800fd04:	bf28      	it	cs
 800fd06:	4613      	movcs	r3, r2
 800fd08:	b29a      	uxth	r2, r3
 800fd0a:	687b      	ldr	r3, [r7, #4]
 800fd0c:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                   " ssthresh %"TCPWNDSIZE_F"\n",
                                   pcb->cwnd, pcb->ssthresh));
      LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 800fd10:	687b      	ldr	r3, [r7, #4]
 800fd12:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800fd16:	2b00      	cmp	r3, #0
 800fd18:	d106      	bne.n	800fd28 <tcp_process+0x200>
 800fd1a:	4b2f      	ldr	r3, [pc, #188]	; (800fdd8 <tcp_process+0x2b0>)
 800fd1c:	f240 321a 	movw	r2, #794	; 0x31a
 800fd20:	4933      	ldr	r1, [pc, #204]	; (800fdf0 <tcp_process+0x2c8>)
 800fd22:	482f      	ldr	r0, [pc, #188]	; (800fde0 <tcp_process+0x2b8>)
 800fd24:	f008 fc90 	bl	8018648 <iprintf>
      --pcb->snd_queuelen;
 800fd28:	687b      	ldr	r3, [r7, #4]
 800fd2a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800fd2e:	3b01      	subs	r3, #1
 800fd30:	b29a      	uxth	r2, r3
 800fd32:	687b      	ldr	r3, [r7, #4]
 800fd34:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
      rseg = pcb->unacked;
 800fd38:	687b      	ldr	r3, [r7, #4]
 800fd3a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fd3c:	61fb      	str	r3, [r7, #28]
      if (rseg == NULL) {
 800fd3e:	69fb      	ldr	r3, [r7, #28]
 800fd40:	2b00      	cmp	r3, #0
 800fd42:	d111      	bne.n	800fd68 <tcp_process+0x240>
        /* might happen if tcp_output fails in tcp_rexmit_rto()
           in which case the segment is on the unsent list */
        rseg = pcb->unsent;
 800fd44:	687b      	ldr	r3, [r7, #4]
 800fd46:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800fd48:	61fb      	str	r3, [r7, #28]
        LWIP_ASSERT("no segment to free", rseg != NULL);
 800fd4a:	69fb      	ldr	r3, [r7, #28]
 800fd4c:	2b00      	cmp	r3, #0
 800fd4e:	d106      	bne.n	800fd5e <tcp_process+0x236>
 800fd50:	4b21      	ldr	r3, [pc, #132]	; (800fdd8 <tcp_process+0x2b0>)
 800fd52:	f240 3222 	movw	r2, #802	; 0x322
 800fd56:	4927      	ldr	r1, [pc, #156]	; (800fdf4 <tcp_process+0x2cc>)
 800fd58:	4821      	ldr	r0, [pc, #132]	; (800fde0 <tcp_process+0x2b8>)
 800fd5a:	f008 fc75 	bl	8018648 <iprintf>
        pcb->unsent = rseg->next;
 800fd5e:	69fb      	ldr	r3, [r7, #28]
 800fd60:	681a      	ldr	r2, [r3, #0]
 800fd62:	687b      	ldr	r3, [r7, #4]
 800fd64:	669a      	str	r2, [r3, #104]	; 0x68
 800fd66:	e003      	b.n	800fd70 <tcp_process+0x248>
      } else {
        pcb->unacked = rseg->next;
 800fd68:	69fb      	ldr	r3, [r7, #28]
 800fd6a:	681a      	ldr	r2, [r3, #0]
 800fd6c:	687b      	ldr	r3, [r7, #4]
 800fd6e:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      tcp_seg_free(rseg);
 800fd70:	69f8      	ldr	r0, [r7, #28]
 800fd72:	f7fe fde0 	bl	800e936 <tcp_seg_free>

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 800fd76:	687b      	ldr	r3, [r7, #4]
 800fd78:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fd7a:	2b00      	cmp	r3, #0
 800fd7c:	d104      	bne.n	800fd88 <tcp_process+0x260>
        pcb->rtime = -1;
 800fd7e:	687b      	ldr	r3, [r7, #4]
 800fd80:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800fd84:	861a      	strh	r2, [r3, #48]	; 0x30
 800fd86:	e006      	b.n	800fd96 <tcp_process+0x26e>
      } else {
        pcb->rtime = 0;
 800fd88:	687b      	ldr	r3, [r7, #4]
 800fd8a:	2200      	movs	r2, #0
 800fd8c:	861a      	strh	r2, [r3, #48]	; 0x30
        pcb->nrtx = 0;
 800fd8e:	687b      	ldr	r3, [r7, #4]
 800fd90:	2200      	movs	r2, #0
 800fd92:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      }

      /* Call the user specified function to call when successfully
       * connected. */
      TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 800fd96:	687b      	ldr	r3, [r7, #4]
 800fd98:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800fd9c:	2b00      	cmp	r3, #0
 800fd9e:	d00a      	beq.n	800fdb6 <tcp_process+0x28e>
 800fda0:	687b      	ldr	r3, [r7, #4]
 800fda2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800fda6:	687a      	ldr	r2, [r7, #4]
 800fda8:	6910      	ldr	r0, [r2, #16]
 800fdaa:	2200      	movs	r2, #0
 800fdac:	6879      	ldr	r1, [r7, #4]
 800fdae:	4798      	blx	r3
 800fdb0:	4603      	mov	r3, r0
 800fdb2:	76bb      	strb	r3, [r7, #26]
 800fdb4:	e001      	b.n	800fdba <tcp_process+0x292>
 800fdb6:	2300      	movs	r3, #0
 800fdb8:	76bb      	strb	r3, [r7, #26]
      if (err == ERR_ABRT) {
 800fdba:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800fdbe:	f113 0f0d 	cmn.w	r3, #13
 800fdc2:	d119      	bne.n	800fdf8 <tcp_process+0x2d0>
        return ERR_ABRT;
 800fdc4:	f06f 030c 	mvn.w	r3, #12
 800fdc8:	e257      	b.n	801027a <tcp_process+0x752>
 800fdca:	bf00      	nop
 800fdcc:	20004240 	.word	0x20004240
 800fdd0:	20004238 	.word	0x20004238
 800fdd4:	20004234 	.word	0x20004234
 800fdd8:	0801a2c0 	.word	0x0801a2c0
 800fddc:	0801a478 	.word	0x0801a478
 800fde0:	0801a304 	.word	0x0801a304
 800fde4:	20004241 	.word	0x20004241
 800fde8:	2000ac38 	.word	0x2000ac38
 800fdec:	20004224 	.word	0x20004224
 800fdf0:	0801a498 	.word	0x0801a498
 800fdf4:	0801a4b0 	.word	0x0801a4b0
      }
      tcp_ack_now(pcb);
 800fdf8:	687b      	ldr	r3, [r7, #4]
 800fdfa:	7e9b      	ldrb	r3, [r3, #26]
 800fdfc:	f043 0302 	orr.w	r3, r3, #2
 800fe00:	b2da      	uxtb	r2, r3
 800fe02:	687b      	ldr	r3, [r7, #4]
 800fe04:	769a      	strb	r2, [r3, #26]
      if (pcb->nrtx < TCP_SYNMAXRTX) {
        pcb->rtime = 0;
        tcp_rexmit_rto(pcb);
      }
    }
    break;
 800fe06:	e22a      	b.n	801025e <tcp_process+0x736>
    else if (flags & TCP_ACK) {
 800fe08:	4b9f      	ldr	r3, [pc, #636]	; (8010088 <tcp_process+0x560>)
 800fe0a:	781b      	ldrb	r3, [r3, #0]
 800fe0c:	f003 0310 	and.w	r3, r3, #16
 800fe10:	2b00      	cmp	r3, #0
 800fe12:	f000 8224 	beq.w	801025e <tcp_process+0x736>
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800fe16:	4b9d      	ldr	r3, [pc, #628]	; (801008c <tcp_process+0x564>)
 800fe18:	6818      	ldr	r0, [r3, #0]
 800fe1a:	4b9d      	ldr	r3, [pc, #628]	; (8010090 <tcp_process+0x568>)
 800fe1c:	881b      	ldrh	r3, [r3, #0]
 800fe1e:	461a      	mov	r2, r3
 800fe20:	4b9c      	ldr	r3, [pc, #624]	; (8010094 <tcp_process+0x56c>)
 800fe22:	681b      	ldr	r3, [r3, #0]
 800fe24:	18d1      	adds	r1, r2, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800fe26:	4b9c      	ldr	r3, [pc, #624]	; (8010098 <tcp_process+0x570>)
 800fe28:	681b      	ldr	r3, [r3, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800fe2a:	885b      	ldrh	r3, [r3, #2]
 800fe2c:	b29b      	uxth	r3, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800fe2e:	4a9a      	ldr	r2, [pc, #616]	; (8010098 <tcp_process+0x570>)
 800fe30:	6812      	ldr	r2, [r2, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800fe32:	8812      	ldrh	r2, [r2, #0]
 800fe34:	b292      	uxth	r2, r2
 800fe36:	9201      	str	r2, [sp, #4]
 800fe38:	9300      	str	r3, [sp, #0]
 800fe3a:	4b98      	ldr	r3, [pc, #608]	; (801009c <tcp_process+0x574>)
 800fe3c:	4a98      	ldr	r2, [pc, #608]	; (80100a0 <tcp_process+0x578>)
 800fe3e:	f002 fca3 	bl	8012788 <tcp_rst>
      if (pcb->nrtx < TCP_SYNMAXRTX) {
 800fe42:	687b      	ldr	r3, [r7, #4]
 800fe44:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800fe48:	2b05      	cmp	r3, #5
 800fe4a:	f200 8208 	bhi.w	801025e <tcp_process+0x736>
        pcb->rtime = 0;
 800fe4e:	687b      	ldr	r3, [r7, #4]
 800fe50:	2200      	movs	r2, #0
 800fe52:	861a      	strh	r2, [r3, #48]	; 0x30
        tcp_rexmit_rto(pcb);
 800fe54:	6878      	ldr	r0, [r7, #4]
 800fe56:	f002 fd0d 	bl	8012874 <tcp_rexmit_rto>
    break;
 800fe5a:	e200      	b.n	801025e <tcp_process+0x736>
  case SYN_RCVD:
    if (flags & TCP_ACK) {
 800fe5c:	4b8a      	ldr	r3, [pc, #552]	; (8010088 <tcp_process+0x560>)
 800fe5e:	781b      	ldrb	r3, [r3, #0]
 800fe60:	f003 0310 	and.w	r3, r3, #16
 800fe64:	2b00      	cmp	r3, #0
 800fe66:	f000 8091 	beq.w	800ff8c <tcp_process+0x464>
      /* expected ACK number? */
      if (TCP_SEQ_BETWEEN(ackno, pcb->lastack+1, pcb->snd_nxt)) {
 800fe6a:	4b88      	ldr	r3, [pc, #544]	; (801008c <tcp_process+0x564>)
 800fe6c:	681a      	ldr	r2, [r3, #0]
 800fe6e:	687b      	ldr	r3, [r7, #4]
 800fe70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800fe72:	1ad3      	subs	r3, r2, r3
 800fe74:	3b01      	subs	r3, #1
 800fe76:	2b00      	cmp	r3, #0
 800fe78:	db71      	blt.n	800ff5e <tcp_process+0x436>
 800fe7a:	4b84      	ldr	r3, [pc, #528]	; (801008c <tcp_process+0x564>)
 800fe7c:	681a      	ldr	r2, [r3, #0]
 800fe7e:	687b      	ldr	r3, [r7, #4]
 800fe80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800fe82:	1ad3      	subs	r3, r2, r3
 800fe84:	2b00      	cmp	r3, #0
 800fe86:	dc6a      	bgt.n	800ff5e <tcp_process+0x436>
        pcb->state = ESTABLISHED;
 800fe88:	687b      	ldr	r3, [r7, #4]
 800fe8a:	2204      	movs	r2, #4
 800fe8c:	751a      	strb	r2, [r3, #20]
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
#if LWIP_CALLBACK_API
        LWIP_ASSERT("pcb->listener->accept != NULL",
 800fe8e:	687b      	ldr	r3, [r7, #4]
 800fe90:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800fe92:	2b00      	cmp	r3, #0
 800fe94:	d00b      	beq.n	800feae <tcp_process+0x386>
 800fe96:	687b      	ldr	r3, [r7, #4]
 800fe98:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800fe9a:	699b      	ldr	r3, [r3, #24]
 800fe9c:	2b00      	cmp	r3, #0
 800fe9e:	d106      	bne.n	800feae <tcp_process+0x386>
 800fea0:	4b80      	ldr	r3, [pc, #512]	; (80100a4 <tcp_process+0x57c>)
 800fea2:	f240 3251 	movw	r2, #849	; 0x351
 800fea6:	4980      	ldr	r1, [pc, #512]	; (80100a8 <tcp_process+0x580>)
 800fea8:	4880      	ldr	r0, [pc, #512]	; (80100ac <tcp_process+0x584>)
 800feaa:	f008 fbcd 	bl	8018648 <iprintf>
          (pcb->listener == NULL) || (pcb->listener->accept != NULL));
#endif
        if (pcb->listener == NULL) {
 800feae:	687b      	ldr	r3, [r7, #4]
 800feb0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800feb2:	2b00      	cmp	r3, #0
 800feb4:	d102      	bne.n	800febc <tcp_process+0x394>
          /* listen pcb might be closed by now */
          err = ERR_VAL;
 800feb6:	23fa      	movs	r3, #250	; 0xfa
 800feb8:	76bb      	strb	r3, [r7, #26]
 800feba:	e011      	b.n	800fee0 <tcp_process+0x3b8>
        } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
        {
          tcp_backlog_accepted(pcb);
          /* Call the accept function. */
          TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 800febc:	687b      	ldr	r3, [r7, #4]
 800febe:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800fec0:	699b      	ldr	r3, [r3, #24]
 800fec2:	2b00      	cmp	r3, #0
 800fec4:	d00a      	beq.n	800fedc <tcp_process+0x3b4>
 800fec6:	687b      	ldr	r3, [r7, #4]
 800fec8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800feca:	699b      	ldr	r3, [r3, #24]
 800fecc:	687a      	ldr	r2, [r7, #4]
 800fece:	6910      	ldr	r0, [r2, #16]
 800fed0:	2200      	movs	r2, #0
 800fed2:	6879      	ldr	r1, [r7, #4]
 800fed4:	4798      	blx	r3
 800fed6:	4603      	mov	r3, r0
 800fed8:	76bb      	strb	r3, [r7, #26]
 800feda:	e001      	b.n	800fee0 <tcp_process+0x3b8>
 800fedc:	23f0      	movs	r3, #240	; 0xf0
 800fede:	76bb      	strb	r3, [r7, #26]
        }
        if (err != ERR_OK) {
 800fee0:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800fee4:	2b00      	cmp	r3, #0
 800fee6:	d00a      	beq.n	800fefe <tcp_process+0x3d6>
          /* If the accept function returns with an error, we abort
           * the connection. */
          /* Already aborted? */
          if (err != ERR_ABRT) {
 800fee8:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800feec:	f113 0f0d 	cmn.w	r3, #13
 800fef0:	d002      	beq.n	800fef8 <tcp_process+0x3d0>
            tcp_abort(pcb);
 800fef2:	6878      	ldr	r0, [r7, #4]
 800fef4:	f7fd ff3a 	bl	800dd6c <tcp_abort>
          }
          return ERR_ABRT;
 800fef8:	f06f 030c 	mvn.w	r3, #12
 800fefc:	e1bd      	b.n	801027a <tcp_process+0x752>
        }
        /* If there was any data contained within this ACK,
         * we'd better pass it on to the application as well. */
        tcp_receive(pcb);
 800fefe:	6878      	ldr	r0, [r7, #4]
 800ff00:	f000 fa42 	bl	8010388 <tcp_receive>

        /* Prevent ACK for SYN to generate a sent event */
        if (recv_acked != 0) {
 800ff04:	4b6a      	ldr	r3, [pc, #424]	; (80100b0 <tcp_process+0x588>)
 800ff06:	881b      	ldrh	r3, [r3, #0]
 800ff08:	2b00      	cmp	r3, #0
 800ff0a:	d005      	beq.n	800ff18 <tcp_process+0x3f0>
          recv_acked--;
 800ff0c:	4b68      	ldr	r3, [pc, #416]	; (80100b0 <tcp_process+0x588>)
 800ff0e:	881b      	ldrh	r3, [r3, #0]
 800ff10:	3b01      	subs	r3, #1
 800ff12:	b29a      	uxth	r2, r3
 800ff14:	4b66      	ldr	r3, [pc, #408]	; (80100b0 <tcp_process+0x588>)
 800ff16:	801a      	strh	r2, [r3, #0]
        }

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800ff18:	687b      	ldr	r3, [r7, #4]
 800ff1a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800ff1c:	005b      	lsls	r3, r3, #1
 800ff1e:	f241 121c 	movw	r2, #4380	; 0x111c
 800ff22:	429a      	cmp	r2, r3
 800ff24:	bf38      	it	cc
 800ff26:	461a      	movcc	r2, r3
 800ff28:	687b      	ldr	r3, [r7, #4]
 800ff2a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800ff2c:	009b      	lsls	r3, r3, #2
 800ff2e:	4293      	cmp	r3, r2
 800ff30:	bf28      	it	cs
 800ff32:	4613      	movcs	r3, r2
 800ff34:	b29a      	uxth	r2, r3
 800ff36:	687b      	ldr	r3, [r7, #4]
 800ff38:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));

        if (recv_flags & TF_GOT_FIN) {
 800ff3c:	4b5d      	ldr	r3, [pc, #372]	; (80100b4 <tcp_process+0x58c>)
 800ff3e:	781b      	ldrb	r3, [r3, #0]
 800ff40:	f003 0320 	and.w	r3, r3, #32
 800ff44:	2b00      	cmp	r3, #0
 800ff46:	d034      	beq.n	800ffb2 <tcp_process+0x48a>
          tcp_ack_now(pcb);
 800ff48:	687b      	ldr	r3, [r7, #4]
 800ff4a:	7e9b      	ldrb	r3, [r3, #26]
 800ff4c:	f043 0302 	orr.w	r3, r3, #2
 800ff50:	b2da      	uxtb	r2, r3
 800ff52:	687b      	ldr	r3, [r7, #4]
 800ff54:	769a      	strb	r2, [r3, #26]
          pcb->state = CLOSE_WAIT;
 800ff56:	687b      	ldr	r3, [r7, #4]
 800ff58:	2207      	movs	r2, #7
 800ff5a:	751a      	strb	r2, [r3, #20]
        if (recv_flags & TF_GOT_FIN) {
 800ff5c:	e029      	b.n	800ffb2 <tcp_process+0x48a>
        }
      } else {
        /* incorrect ACK number, send RST */
        tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800ff5e:	4b4b      	ldr	r3, [pc, #300]	; (801008c <tcp_process+0x564>)
 800ff60:	6818      	ldr	r0, [r3, #0]
 800ff62:	4b4b      	ldr	r3, [pc, #300]	; (8010090 <tcp_process+0x568>)
 800ff64:	881b      	ldrh	r3, [r3, #0]
 800ff66:	461a      	mov	r2, r3
 800ff68:	4b4a      	ldr	r3, [pc, #296]	; (8010094 <tcp_process+0x56c>)
 800ff6a:	681b      	ldr	r3, [r3, #0]
 800ff6c:	18d1      	adds	r1, r2, r3
          ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800ff6e:	4b4a      	ldr	r3, [pc, #296]	; (8010098 <tcp_process+0x570>)
 800ff70:	681b      	ldr	r3, [r3, #0]
        tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800ff72:	885b      	ldrh	r3, [r3, #2]
 800ff74:	b29b      	uxth	r3, r3
          ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800ff76:	4a48      	ldr	r2, [pc, #288]	; (8010098 <tcp_process+0x570>)
 800ff78:	6812      	ldr	r2, [r2, #0]
        tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800ff7a:	8812      	ldrh	r2, [r2, #0]
 800ff7c:	b292      	uxth	r2, r2
 800ff7e:	9201      	str	r2, [sp, #4]
 800ff80:	9300      	str	r3, [sp, #0]
 800ff82:	4b46      	ldr	r3, [pc, #280]	; (801009c <tcp_process+0x574>)
 800ff84:	4a46      	ldr	r2, [pc, #280]	; (80100a0 <tcp_process+0x578>)
 800ff86:	f002 fbff 	bl	8012788 <tcp_rst>
      }
    } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
      /* Looks like another copy of the SYN - retransmit our SYN-ACK */
      tcp_rexmit(pcb);
    }
    break;
 800ff8a:	e16a      	b.n	8010262 <tcp_process+0x73a>
    } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 800ff8c:	4b3e      	ldr	r3, [pc, #248]	; (8010088 <tcp_process+0x560>)
 800ff8e:	781b      	ldrb	r3, [r3, #0]
 800ff90:	f003 0302 	and.w	r3, r3, #2
 800ff94:	2b00      	cmp	r3, #0
 800ff96:	f000 8164 	beq.w	8010262 <tcp_process+0x73a>
 800ff9a:	687b      	ldr	r3, [r7, #4]
 800ff9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ff9e:	1e5a      	subs	r2, r3, #1
 800ffa0:	4b3c      	ldr	r3, [pc, #240]	; (8010094 <tcp_process+0x56c>)
 800ffa2:	681b      	ldr	r3, [r3, #0]
 800ffa4:	429a      	cmp	r2, r3
 800ffa6:	f040 815c 	bne.w	8010262 <tcp_process+0x73a>
      tcp_rexmit(pcb);
 800ffaa:	6878      	ldr	r0, [r7, #4]
 800ffac:	f002 fc98 	bl	80128e0 <tcp_rexmit>
    break;
 800ffb0:	e157      	b.n	8010262 <tcp_process+0x73a>
 800ffb2:	e156      	b.n	8010262 <tcp_process+0x73a>
  case CLOSE_WAIT:
    /* FALLTHROUGH */
  case ESTABLISHED:
    tcp_receive(pcb);
 800ffb4:	6878      	ldr	r0, [r7, #4]
 800ffb6:	f000 f9e7 	bl	8010388 <tcp_receive>
    if (recv_flags & TF_GOT_FIN) { /* passive close */
 800ffba:	4b3e      	ldr	r3, [pc, #248]	; (80100b4 <tcp_process+0x58c>)
 800ffbc:	781b      	ldrb	r3, [r3, #0]
 800ffbe:	f003 0320 	and.w	r3, r3, #32
 800ffc2:	2b00      	cmp	r3, #0
 800ffc4:	f000 814f 	beq.w	8010266 <tcp_process+0x73e>
      tcp_ack_now(pcb);
 800ffc8:	687b      	ldr	r3, [r7, #4]
 800ffca:	7e9b      	ldrb	r3, [r3, #26]
 800ffcc:	f043 0302 	orr.w	r3, r3, #2
 800ffd0:	b2da      	uxtb	r2, r3
 800ffd2:	687b      	ldr	r3, [r7, #4]
 800ffd4:	769a      	strb	r2, [r3, #26]
      pcb->state = CLOSE_WAIT;
 800ffd6:	687b      	ldr	r3, [r7, #4]
 800ffd8:	2207      	movs	r2, #7
 800ffda:	751a      	strb	r2, [r3, #20]
    }
    break;
 800ffdc:	e143      	b.n	8010266 <tcp_process+0x73e>
  case FIN_WAIT_1:
    tcp_receive(pcb);
 800ffde:	6878      	ldr	r0, [r7, #4]
 800ffe0:	f000 f9d2 	bl	8010388 <tcp_receive>
    if (recv_flags & TF_GOT_FIN) {
 800ffe4:	4b33      	ldr	r3, [pc, #204]	; (80100b4 <tcp_process+0x58c>)
 800ffe6:	781b      	ldrb	r3, [r3, #0]
 800ffe8:	f003 0320 	and.w	r3, r3, #32
 800ffec:	2b00      	cmp	r3, #0
 800ffee:	d074      	beq.n	80100da <tcp_process+0x5b2>
      if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800fff0:	4b25      	ldr	r3, [pc, #148]	; (8010088 <tcp_process+0x560>)
 800fff2:	781b      	ldrb	r3, [r3, #0]
 800fff4:	f003 0310 	and.w	r3, r3, #16
 800fff8:	2b00      	cmp	r3, #0
 800fffa:	d063      	beq.n	80100c4 <tcp_process+0x59c>
 800fffc:	687b      	ldr	r3, [r7, #4]
 800fffe:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8010000:	4b22      	ldr	r3, [pc, #136]	; (801008c <tcp_process+0x564>)
 8010002:	681b      	ldr	r3, [r3, #0]
 8010004:	429a      	cmp	r2, r3
 8010006:	d15d      	bne.n	80100c4 <tcp_process+0x59c>
          pcb->unsent == NULL) {
 8010008:	687b      	ldr	r3, [r7, #4]
 801000a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
      if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 801000c:	2b00      	cmp	r3, #0
 801000e:	d159      	bne.n	80100c4 <tcp_process+0x59c>
        LWIP_DEBUGF(TCP_DEBUG,
          ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 8010010:	687b      	ldr	r3, [r7, #4]
 8010012:	7e9b      	ldrb	r3, [r3, #26]
 8010014:	f043 0302 	orr.w	r3, r3, #2
 8010018:	b2da      	uxtb	r2, r3
 801001a:	687b      	ldr	r3, [r7, #4]
 801001c:	769a      	strb	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 801001e:	6878      	ldr	r0, [r7, #4]
 8010020:	f7fe fee6 	bl	800edf0 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8010024:	4b24      	ldr	r3, [pc, #144]	; (80100b8 <tcp_process+0x590>)
 8010026:	681b      	ldr	r3, [r3, #0]
 8010028:	687a      	ldr	r2, [r7, #4]
 801002a:	429a      	cmp	r2, r3
 801002c:	d105      	bne.n	801003a <tcp_process+0x512>
 801002e:	4b22      	ldr	r3, [pc, #136]	; (80100b8 <tcp_process+0x590>)
 8010030:	681b      	ldr	r3, [r3, #0]
 8010032:	68db      	ldr	r3, [r3, #12]
 8010034:	4a20      	ldr	r2, [pc, #128]	; (80100b8 <tcp_process+0x590>)
 8010036:	6013      	str	r3, [r2, #0]
 8010038:	e013      	b.n	8010062 <tcp_process+0x53a>
 801003a:	4b1f      	ldr	r3, [pc, #124]	; (80100b8 <tcp_process+0x590>)
 801003c:	681b      	ldr	r3, [r3, #0]
 801003e:	617b      	str	r3, [r7, #20]
 8010040:	e00c      	b.n	801005c <tcp_process+0x534>
 8010042:	697b      	ldr	r3, [r7, #20]
 8010044:	68db      	ldr	r3, [r3, #12]
 8010046:	687a      	ldr	r2, [r7, #4]
 8010048:	429a      	cmp	r2, r3
 801004a:	d104      	bne.n	8010056 <tcp_process+0x52e>
 801004c:	687b      	ldr	r3, [r7, #4]
 801004e:	68da      	ldr	r2, [r3, #12]
 8010050:	697b      	ldr	r3, [r7, #20]
 8010052:	60da      	str	r2, [r3, #12]
 8010054:	e005      	b.n	8010062 <tcp_process+0x53a>
 8010056:	697b      	ldr	r3, [r7, #20]
 8010058:	68db      	ldr	r3, [r3, #12]
 801005a:	617b      	str	r3, [r7, #20]
 801005c:	697b      	ldr	r3, [r7, #20]
 801005e:	2b00      	cmp	r3, #0
 8010060:	d1ef      	bne.n	8010042 <tcp_process+0x51a>
 8010062:	687b      	ldr	r3, [r7, #4]
 8010064:	2200      	movs	r2, #0
 8010066:	60da      	str	r2, [r3, #12]
 8010068:	4b14      	ldr	r3, [pc, #80]	; (80100bc <tcp_process+0x594>)
 801006a:	2201      	movs	r2, #1
 801006c:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 801006e:	687b      	ldr	r3, [r7, #4]
 8010070:	220a      	movs	r2, #10
 8010072:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8010074:	4b12      	ldr	r3, [pc, #72]	; (80100c0 <tcp_process+0x598>)
 8010076:	681a      	ldr	r2, [r3, #0]
 8010078:	687b      	ldr	r3, [r7, #4]
 801007a:	60da      	str	r2, [r3, #12]
 801007c:	4a10      	ldr	r2, [pc, #64]	; (80100c0 <tcp_process+0x598>)
 801007e:	687b      	ldr	r3, [r7, #4]
 8010080:	6013      	str	r3, [r2, #0]
 8010082:	f002 fdd1 	bl	8012c28 <tcp_timer_needed>
      }
    } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
               pcb->unsent == NULL) {
      pcb->state = FIN_WAIT_2;
    }
    break;
 8010086:	e0f0      	b.n	801026a <tcp_process+0x742>
 8010088:	20004240 	.word	0x20004240
 801008c:	20004238 	.word	0x20004238
 8010090:	2000423e 	.word	0x2000423e
 8010094:	20004234 	.word	0x20004234
 8010098:	20004224 	.word	0x20004224
 801009c:	20007514 	.word	0x20007514
 80100a0:	20007518 	.word	0x20007518
 80100a4:	0801a2c0 	.word	0x0801a2c0
 80100a8:	0801a4c4 	.word	0x0801a4c4
 80100ac:	0801a304 	.word	0x0801a304
 80100b0:	2000423c 	.word	0x2000423c
 80100b4:	20004241 	.word	0x20004241
 80100b8:	2000ac34 	.word	0x2000ac34
 80100bc:	2000ac30 	.word	0x2000ac30
 80100c0:	2000ac44 	.word	0x2000ac44
        tcp_ack_now(pcb);
 80100c4:	687b      	ldr	r3, [r7, #4]
 80100c6:	7e9b      	ldrb	r3, [r3, #26]
 80100c8:	f043 0302 	orr.w	r3, r3, #2
 80100cc:	b2da      	uxtb	r2, r3
 80100ce:	687b      	ldr	r3, [r7, #4]
 80100d0:	769a      	strb	r2, [r3, #26]
        pcb->state = CLOSING;
 80100d2:	687b      	ldr	r3, [r7, #4]
 80100d4:	2208      	movs	r2, #8
 80100d6:	751a      	strb	r2, [r3, #20]
    break;
 80100d8:	e0c7      	b.n	801026a <tcp_process+0x742>
    } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 80100da:	4b6a      	ldr	r3, [pc, #424]	; (8010284 <tcp_process+0x75c>)
 80100dc:	781b      	ldrb	r3, [r3, #0]
 80100de:	f003 0310 	and.w	r3, r3, #16
 80100e2:	2b00      	cmp	r3, #0
 80100e4:	f000 80c1 	beq.w	801026a <tcp_process+0x742>
 80100e8:	687b      	ldr	r3, [r7, #4]
 80100ea:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80100ec:	4b66      	ldr	r3, [pc, #408]	; (8010288 <tcp_process+0x760>)
 80100ee:	681b      	ldr	r3, [r3, #0]
 80100f0:	429a      	cmp	r2, r3
 80100f2:	f040 80ba 	bne.w	801026a <tcp_process+0x742>
               pcb->unsent == NULL) {
 80100f6:	687b      	ldr	r3, [r7, #4]
 80100f8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
    } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 80100fa:	2b00      	cmp	r3, #0
 80100fc:	f040 80b5 	bne.w	801026a <tcp_process+0x742>
      pcb->state = FIN_WAIT_2;
 8010100:	687b      	ldr	r3, [r7, #4]
 8010102:	2206      	movs	r2, #6
 8010104:	751a      	strb	r2, [r3, #20]
    break;
 8010106:	e0b0      	b.n	801026a <tcp_process+0x742>
  case FIN_WAIT_2:
    tcp_receive(pcb);
 8010108:	6878      	ldr	r0, [r7, #4]
 801010a:	f000 f93d 	bl	8010388 <tcp_receive>
    if (recv_flags & TF_GOT_FIN) {
 801010e:	4b5f      	ldr	r3, [pc, #380]	; (801028c <tcp_process+0x764>)
 8010110:	781b      	ldrb	r3, [r3, #0]
 8010112:	f003 0320 	and.w	r3, r3, #32
 8010116:	2b00      	cmp	r3, #0
 8010118:	f000 80a9 	beq.w	801026e <tcp_process+0x746>
      LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
      tcp_ack_now(pcb);
 801011c:	687b      	ldr	r3, [r7, #4]
 801011e:	7e9b      	ldrb	r3, [r3, #26]
 8010120:	f043 0302 	orr.w	r3, r3, #2
 8010124:	b2da      	uxtb	r2, r3
 8010126:	687b      	ldr	r3, [r7, #4]
 8010128:	769a      	strb	r2, [r3, #26]
      tcp_pcb_purge(pcb);
 801012a:	6878      	ldr	r0, [r7, #4]
 801012c:	f7fe fe60 	bl	800edf0 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 8010130:	4b57      	ldr	r3, [pc, #348]	; (8010290 <tcp_process+0x768>)
 8010132:	681b      	ldr	r3, [r3, #0]
 8010134:	687a      	ldr	r2, [r7, #4]
 8010136:	429a      	cmp	r2, r3
 8010138:	d105      	bne.n	8010146 <tcp_process+0x61e>
 801013a:	4b55      	ldr	r3, [pc, #340]	; (8010290 <tcp_process+0x768>)
 801013c:	681b      	ldr	r3, [r3, #0]
 801013e:	68db      	ldr	r3, [r3, #12]
 8010140:	4a53      	ldr	r2, [pc, #332]	; (8010290 <tcp_process+0x768>)
 8010142:	6013      	str	r3, [r2, #0]
 8010144:	e013      	b.n	801016e <tcp_process+0x646>
 8010146:	4b52      	ldr	r3, [pc, #328]	; (8010290 <tcp_process+0x768>)
 8010148:	681b      	ldr	r3, [r3, #0]
 801014a:	613b      	str	r3, [r7, #16]
 801014c:	e00c      	b.n	8010168 <tcp_process+0x640>
 801014e:	693b      	ldr	r3, [r7, #16]
 8010150:	68db      	ldr	r3, [r3, #12]
 8010152:	687a      	ldr	r2, [r7, #4]
 8010154:	429a      	cmp	r2, r3
 8010156:	d104      	bne.n	8010162 <tcp_process+0x63a>
 8010158:	687b      	ldr	r3, [r7, #4]
 801015a:	68da      	ldr	r2, [r3, #12]
 801015c:	693b      	ldr	r3, [r7, #16]
 801015e:	60da      	str	r2, [r3, #12]
 8010160:	e005      	b.n	801016e <tcp_process+0x646>
 8010162:	693b      	ldr	r3, [r7, #16]
 8010164:	68db      	ldr	r3, [r3, #12]
 8010166:	613b      	str	r3, [r7, #16]
 8010168:	693b      	ldr	r3, [r7, #16]
 801016a:	2b00      	cmp	r3, #0
 801016c:	d1ef      	bne.n	801014e <tcp_process+0x626>
 801016e:	687b      	ldr	r3, [r7, #4]
 8010170:	2200      	movs	r2, #0
 8010172:	60da      	str	r2, [r3, #12]
 8010174:	4b47      	ldr	r3, [pc, #284]	; (8010294 <tcp_process+0x76c>)
 8010176:	2201      	movs	r2, #1
 8010178:	701a      	strb	r2, [r3, #0]
      pcb->state = TIME_WAIT;
 801017a:	687b      	ldr	r3, [r7, #4]
 801017c:	220a      	movs	r2, #10
 801017e:	751a      	strb	r2, [r3, #20]
      TCP_REG(&tcp_tw_pcbs, pcb);
 8010180:	4b45      	ldr	r3, [pc, #276]	; (8010298 <tcp_process+0x770>)
 8010182:	681a      	ldr	r2, [r3, #0]
 8010184:	687b      	ldr	r3, [r7, #4]
 8010186:	60da      	str	r2, [r3, #12]
 8010188:	4a43      	ldr	r2, [pc, #268]	; (8010298 <tcp_process+0x770>)
 801018a:	687b      	ldr	r3, [r7, #4]
 801018c:	6013      	str	r3, [r2, #0]
 801018e:	f002 fd4b 	bl	8012c28 <tcp_timer_needed>
    }
    break;
 8010192:	e06c      	b.n	801026e <tcp_process+0x746>
  case CLOSING:
    tcp_receive(pcb);
 8010194:	6878      	ldr	r0, [r7, #4]
 8010196:	f000 f8f7 	bl	8010388 <tcp_receive>
    if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 801019a:	4b3a      	ldr	r3, [pc, #232]	; (8010284 <tcp_process+0x75c>)
 801019c:	781b      	ldrb	r3, [r3, #0]
 801019e:	f003 0310 	and.w	r3, r3, #16
 80101a2:	2b00      	cmp	r3, #0
 80101a4:	d065      	beq.n	8010272 <tcp_process+0x74a>
 80101a6:	687b      	ldr	r3, [r7, #4]
 80101a8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80101aa:	4b37      	ldr	r3, [pc, #220]	; (8010288 <tcp_process+0x760>)
 80101ac:	681b      	ldr	r3, [r3, #0]
 80101ae:	429a      	cmp	r2, r3
 80101b0:	d15f      	bne.n	8010272 <tcp_process+0x74a>
 80101b2:	687b      	ldr	r3, [r7, #4]
 80101b4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80101b6:	2b00      	cmp	r3, #0
 80101b8:	d15b      	bne.n	8010272 <tcp_process+0x74a>
      LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
      tcp_pcb_purge(pcb);
 80101ba:	6878      	ldr	r0, [r7, #4]
 80101bc:	f7fe fe18 	bl	800edf0 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 80101c0:	4b33      	ldr	r3, [pc, #204]	; (8010290 <tcp_process+0x768>)
 80101c2:	681b      	ldr	r3, [r3, #0]
 80101c4:	687a      	ldr	r2, [r7, #4]
 80101c6:	429a      	cmp	r2, r3
 80101c8:	d105      	bne.n	80101d6 <tcp_process+0x6ae>
 80101ca:	4b31      	ldr	r3, [pc, #196]	; (8010290 <tcp_process+0x768>)
 80101cc:	681b      	ldr	r3, [r3, #0]
 80101ce:	68db      	ldr	r3, [r3, #12]
 80101d0:	4a2f      	ldr	r2, [pc, #188]	; (8010290 <tcp_process+0x768>)
 80101d2:	6013      	str	r3, [r2, #0]
 80101d4:	e013      	b.n	80101fe <tcp_process+0x6d6>
 80101d6:	4b2e      	ldr	r3, [pc, #184]	; (8010290 <tcp_process+0x768>)
 80101d8:	681b      	ldr	r3, [r3, #0]
 80101da:	60fb      	str	r3, [r7, #12]
 80101dc:	e00c      	b.n	80101f8 <tcp_process+0x6d0>
 80101de:	68fb      	ldr	r3, [r7, #12]
 80101e0:	68db      	ldr	r3, [r3, #12]
 80101e2:	687a      	ldr	r2, [r7, #4]
 80101e4:	429a      	cmp	r2, r3
 80101e6:	d104      	bne.n	80101f2 <tcp_process+0x6ca>
 80101e8:	687b      	ldr	r3, [r7, #4]
 80101ea:	68da      	ldr	r2, [r3, #12]
 80101ec:	68fb      	ldr	r3, [r7, #12]
 80101ee:	60da      	str	r2, [r3, #12]
 80101f0:	e005      	b.n	80101fe <tcp_process+0x6d6>
 80101f2:	68fb      	ldr	r3, [r7, #12]
 80101f4:	68db      	ldr	r3, [r3, #12]
 80101f6:	60fb      	str	r3, [r7, #12]
 80101f8:	68fb      	ldr	r3, [r7, #12]
 80101fa:	2b00      	cmp	r3, #0
 80101fc:	d1ef      	bne.n	80101de <tcp_process+0x6b6>
 80101fe:	687b      	ldr	r3, [r7, #4]
 8010200:	2200      	movs	r2, #0
 8010202:	60da      	str	r2, [r3, #12]
 8010204:	4b23      	ldr	r3, [pc, #140]	; (8010294 <tcp_process+0x76c>)
 8010206:	2201      	movs	r2, #1
 8010208:	701a      	strb	r2, [r3, #0]
      pcb->state = TIME_WAIT;
 801020a:	687b      	ldr	r3, [r7, #4]
 801020c:	220a      	movs	r2, #10
 801020e:	751a      	strb	r2, [r3, #20]
      TCP_REG(&tcp_tw_pcbs, pcb);
 8010210:	4b21      	ldr	r3, [pc, #132]	; (8010298 <tcp_process+0x770>)
 8010212:	681a      	ldr	r2, [r3, #0]
 8010214:	687b      	ldr	r3, [r7, #4]
 8010216:	60da      	str	r2, [r3, #12]
 8010218:	4a1f      	ldr	r2, [pc, #124]	; (8010298 <tcp_process+0x770>)
 801021a:	687b      	ldr	r3, [r7, #4]
 801021c:	6013      	str	r3, [r2, #0]
 801021e:	f002 fd03 	bl	8012c28 <tcp_timer_needed>
    }
    break;
 8010222:	e026      	b.n	8010272 <tcp_process+0x74a>
  case LAST_ACK:
    tcp_receive(pcb);
 8010224:	6878      	ldr	r0, [r7, #4]
 8010226:	f000 f8af 	bl	8010388 <tcp_receive>
    if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 801022a:	4b16      	ldr	r3, [pc, #88]	; (8010284 <tcp_process+0x75c>)
 801022c:	781b      	ldrb	r3, [r3, #0]
 801022e:	f003 0310 	and.w	r3, r3, #16
 8010232:	2b00      	cmp	r3, #0
 8010234:	d01f      	beq.n	8010276 <tcp_process+0x74e>
 8010236:	687b      	ldr	r3, [r7, #4]
 8010238:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 801023a:	4b13      	ldr	r3, [pc, #76]	; (8010288 <tcp_process+0x760>)
 801023c:	681b      	ldr	r3, [r3, #0]
 801023e:	429a      	cmp	r2, r3
 8010240:	d119      	bne.n	8010276 <tcp_process+0x74e>
 8010242:	687b      	ldr	r3, [r7, #4]
 8010244:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8010246:	2b00      	cmp	r3, #0
 8010248:	d115      	bne.n	8010276 <tcp_process+0x74e>
      LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
      /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
      recv_flags |= TF_CLOSED;
 801024a:	4b10      	ldr	r3, [pc, #64]	; (801028c <tcp_process+0x764>)
 801024c:	781b      	ldrb	r3, [r3, #0]
 801024e:	f043 0310 	orr.w	r3, r3, #16
 8010252:	b2da      	uxtb	r2, r3
 8010254:	4b0d      	ldr	r3, [pc, #52]	; (801028c <tcp_process+0x764>)
 8010256:	701a      	strb	r2, [r3, #0]
    }
    break;
 8010258:	e00d      	b.n	8010276 <tcp_process+0x74e>
  default:
    break;
 801025a:	bf00      	nop
 801025c:	e00c      	b.n	8010278 <tcp_process+0x750>
    break;
 801025e:	bf00      	nop
 8010260:	e00a      	b.n	8010278 <tcp_process+0x750>
    break;
 8010262:	bf00      	nop
 8010264:	e008      	b.n	8010278 <tcp_process+0x750>
    break;
 8010266:	bf00      	nop
 8010268:	e006      	b.n	8010278 <tcp_process+0x750>
    break;
 801026a:	bf00      	nop
 801026c:	e004      	b.n	8010278 <tcp_process+0x750>
    break;
 801026e:	bf00      	nop
 8010270:	e002      	b.n	8010278 <tcp_process+0x750>
    break;
 8010272:	bf00      	nop
 8010274:	e000      	b.n	8010278 <tcp_process+0x750>
    break;
 8010276:	bf00      	nop
  }
  return ERR_OK;
 8010278:	2300      	movs	r3, #0
}
 801027a:	4618      	mov	r0, r3
 801027c:	3720      	adds	r7, #32
 801027e:	46bd      	mov	sp, r7
 8010280:	bd80      	pop	{r7, pc}
 8010282:	bf00      	nop
 8010284:	20004240 	.word	0x20004240
 8010288:	20004238 	.word	0x20004238
 801028c:	20004241 	.word	0x20004241
 8010290:	2000ac34 	.word	0x2000ac34
 8010294:	2000ac30 	.word	0x2000ac30
 8010298:	2000ac44 	.word	0x2000ac44

0801029c <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 801029c:	b590      	push	{r4, r7, lr}
 801029e:	b085      	sub	sp, #20
 80102a0:	af00      	add	r7, sp, #0
 80102a2:	6078      	str	r0, [r7, #4]
 80102a4:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 80102a6:	687b      	ldr	r3, [r7, #4]
 80102a8:	68db      	ldr	r3, [r3, #12]
 80102aa:	899b      	ldrh	r3, [r3, #12]
 80102ac:	b29b      	uxth	r3, r3
 80102ae:	4618      	mov	r0, r3
 80102b0:	f7fb feac 	bl	800c00c <lwip_htons>
 80102b4:	4603      	mov	r3, r0
 80102b6:	f003 0301 	and.w	r3, r3, #1
 80102ba:	2b00      	cmp	r3, #0
 80102bc:	d027      	beq.n	801030e <tcp_oos_insert_segment+0x72>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 80102be:	6838      	ldr	r0, [r7, #0]
 80102c0:	f7fe fb25 	bl	800e90e <tcp_segs_free>
    next = NULL;
 80102c4:	2300      	movs	r3, #0
 80102c6:	603b      	str	r3, [r7, #0]
 80102c8:	e055      	b.n	8010376 <tcp_oos_insert_segment+0xda>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                      (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 80102ca:	683b      	ldr	r3, [r7, #0]
 80102cc:	68db      	ldr	r3, [r3, #12]
 80102ce:	899b      	ldrh	r3, [r3, #12]
 80102d0:	b29b      	uxth	r3, r3
 80102d2:	4618      	mov	r0, r3
 80102d4:	f7fb fe9a 	bl	800c00c <lwip_htons>
 80102d8:	4603      	mov	r3, r0
 80102da:	f003 0301 	and.w	r3, r3, #1
 80102de:	2b00      	cmp	r3, #0
 80102e0:	d00d      	beq.n	80102fe <tcp_oos_insert_segment+0x62>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 80102e2:	687b      	ldr	r3, [r7, #4]
 80102e4:	68db      	ldr	r3, [r3, #12]
 80102e6:	899b      	ldrh	r3, [r3, #12]
 80102e8:	b29c      	uxth	r4, r3
 80102ea:	2001      	movs	r0, #1
 80102ec:	f7fb fe8e 	bl	800c00c <lwip_htons>
 80102f0:	4603      	mov	r3, r0
 80102f2:	461a      	mov	r2, r3
 80102f4:	687b      	ldr	r3, [r7, #4]
 80102f6:	68db      	ldr	r3, [r3, #12]
 80102f8:	4322      	orrs	r2, r4
 80102fa:	b292      	uxth	r2, r2
 80102fc:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 80102fe:	683b      	ldr	r3, [r7, #0]
 8010300:	60fb      	str	r3, [r7, #12]
      next = next->next;
 8010302:	683b      	ldr	r3, [r7, #0]
 8010304:	681b      	ldr	r3, [r3, #0]
 8010306:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 8010308:	68f8      	ldr	r0, [r7, #12]
 801030a:	f7fe fb14 	bl	800e936 <tcp_seg_free>
    while (next &&
 801030e:	683b      	ldr	r3, [r7, #0]
 8010310:	2b00      	cmp	r3, #0
 8010312:	d00e      	beq.n	8010332 <tcp_oos_insert_segment+0x96>
           TCP_SEQ_GEQ((seqno + cseg->len),
 8010314:	687b      	ldr	r3, [r7, #4]
 8010316:	891b      	ldrh	r3, [r3, #8]
 8010318:	461a      	mov	r2, r3
 801031a:	4b1a      	ldr	r3, [pc, #104]	; (8010384 <tcp_oos_insert_segment+0xe8>)
 801031c:	681b      	ldr	r3, [r3, #0]
 801031e:	441a      	add	r2, r3
 8010320:	683b      	ldr	r3, [r7, #0]
 8010322:	68db      	ldr	r3, [r3, #12]
 8010324:	685b      	ldr	r3, [r3, #4]
 8010326:	6839      	ldr	r1, [r7, #0]
 8010328:	8909      	ldrh	r1, [r1, #8]
 801032a:	440b      	add	r3, r1
 801032c:	1ad3      	subs	r3, r2, r3
    while (next &&
 801032e:	2b00      	cmp	r3, #0
 8010330:	dacb      	bge.n	80102ca <tcp_oos_insert_segment+0x2e>
    }
    if (next &&
 8010332:	683b      	ldr	r3, [r7, #0]
 8010334:	2b00      	cmp	r3, #0
 8010336:	d01e      	beq.n	8010376 <tcp_oos_insert_segment+0xda>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 8010338:	687b      	ldr	r3, [r7, #4]
 801033a:	891b      	ldrh	r3, [r3, #8]
 801033c:	461a      	mov	r2, r3
 801033e:	4b11      	ldr	r3, [pc, #68]	; (8010384 <tcp_oos_insert_segment+0xe8>)
 8010340:	681b      	ldr	r3, [r3, #0]
 8010342:	441a      	add	r2, r3
 8010344:	683b      	ldr	r3, [r7, #0]
 8010346:	68db      	ldr	r3, [r3, #12]
 8010348:	685b      	ldr	r3, [r3, #4]
 801034a:	1ad3      	subs	r3, r2, r3
    if (next &&
 801034c:	2b00      	cmp	r3, #0
 801034e:	dd12      	ble.n	8010376 <tcp_oos_insert_segment+0xda>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 8010350:	683b      	ldr	r3, [r7, #0]
 8010352:	68db      	ldr	r3, [r3, #12]
 8010354:	685b      	ldr	r3, [r3, #4]
 8010356:	b29a      	uxth	r2, r3
 8010358:	4b0a      	ldr	r3, [pc, #40]	; (8010384 <tcp_oos_insert_segment+0xe8>)
 801035a:	681b      	ldr	r3, [r3, #0]
 801035c:	b29b      	uxth	r3, r3
 801035e:	1ad3      	subs	r3, r2, r3
 8010360:	b29a      	uxth	r2, r3
 8010362:	687b      	ldr	r3, [r7, #4]
 8010364:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 8010366:	687b      	ldr	r3, [r7, #4]
 8010368:	685a      	ldr	r2, [r3, #4]
 801036a:	687b      	ldr	r3, [r7, #4]
 801036c:	891b      	ldrh	r3, [r3, #8]
 801036e:	4619      	mov	r1, r3
 8010370:	4610      	mov	r0, r2
 8010372:	f7fc fe79 	bl	800d068 <pbuf_realloc>
    }
  }
  cseg->next = next;
 8010376:	687b      	ldr	r3, [r7, #4]
 8010378:	683a      	ldr	r2, [r7, #0]
 801037a:	601a      	str	r2, [r3, #0]
}
 801037c:	bf00      	nop
 801037e:	3714      	adds	r7, #20
 8010380:	46bd      	mov	sp, r7
 8010382:	bd90      	pop	{r4, r7, pc}
 8010384:	20004234 	.word	0x20004234

08010388 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 8010388:	b5f0      	push	{r4, r5, r6, r7, lr}
 801038a:	b08d      	sub	sp, #52	; 0x34
 801038c:	af00      	add	r7, sp, #0
 801038e:	6078      	str	r0, [r7, #4]
#endif /* TCP_QUEUE_OOSEQ */
  s32_t off;
  s16_t m;
  u32_t right_wnd_edge;
  u16_t new_tot_len;
  int found_dupack = 0;
 8010390:	2300      	movs	r3, #0
 8010392:	61fb      	str	r3, [r7, #28]
#if TCP_OOSEQ_MAX_BYTES || TCP_OOSEQ_MAX_PBUFS
  u32_t ooseq_blen;
  u16_t ooseq_qlen;
#endif /* TCP_OOSEQ_MAX_BYTES || TCP_OOSEQ_MAX_PBUFS */

  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 8010394:	687b      	ldr	r3, [r7, #4]
 8010396:	7d1b      	ldrb	r3, [r3, #20]
 8010398:	2b03      	cmp	r3, #3
 801039a:	d806      	bhi.n	80103aa <tcp_receive+0x22>
 801039c:	4ba6      	ldr	r3, [pc, #664]	; (8010638 <tcp_receive+0x2b0>)
 801039e:	f44f 6281 	mov.w	r2, #1032	; 0x408
 80103a2:	49a6      	ldr	r1, [pc, #664]	; (801063c <tcp_receive+0x2b4>)
 80103a4:	48a6      	ldr	r0, [pc, #664]	; (8010640 <tcp_receive+0x2b8>)
 80103a6:	f008 f94f 	bl	8018648 <iprintf>

  if (flags & TCP_ACK) {
 80103aa:	4ba6      	ldr	r3, [pc, #664]	; (8010644 <tcp_receive+0x2bc>)
 80103ac:	781b      	ldrb	r3, [r3, #0]
 80103ae:	f003 0310 	and.w	r3, r3, #16
 80103b2:	2b00      	cmp	r3, #0
 80103b4:	f000 82bf 	beq.w	8010936 <tcp_receive+0x5ae>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 80103b8:	687b      	ldr	r3, [r7, #4]
 80103ba:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80103be:	461a      	mov	r2, r3
 80103c0:	687b      	ldr	r3, [r7, #4]
 80103c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80103c4:	4413      	add	r3, r2
 80103c6:	617b      	str	r3, [r7, #20]

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 80103c8:	687b      	ldr	r3, [r7, #4]
 80103ca:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80103cc:	4b9e      	ldr	r3, [pc, #632]	; (8010648 <tcp_receive+0x2c0>)
 80103ce:	681b      	ldr	r3, [r3, #0]
 80103d0:	1ad3      	subs	r3, r2, r3
 80103d2:	2b00      	cmp	r3, #0
 80103d4:	db1b      	blt.n	801040e <tcp_receive+0x86>
       (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 80103d6:	687b      	ldr	r3, [r7, #4]
 80103d8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80103da:	4b9b      	ldr	r3, [pc, #620]	; (8010648 <tcp_receive+0x2c0>)
 80103dc:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 80103de:	429a      	cmp	r2, r3
 80103e0:	d106      	bne.n	80103f0 <tcp_receive+0x68>
       (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 80103e2:	687b      	ldr	r3, [r7, #4]
 80103e4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80103e6:	4b99      	ldr	r3, [pc, #612]	; (801064c <tcp_receive+0x2c4>)
 80103e8:	681b      	ldr	r3, [r3, #0]
 80103ea:	1ad3      	subs	r3, r2, r3
 80103ec:	2b00      	cmp	r3, #0
 80103ee:	db0e      	blt.n	801040e <tcp_receive+0x86>
       (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 80103f0:	687b      	ldr	r3, [r7, #4]
 80103f2:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80103f4:	4b95      	ldr	r3, [pc, #596]	; (801064c <tcp_receive+0x2c4>)
 80103f6:	681b      	ldr	r3, [r3, #0]
       (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 80103f8:	429a      	cmp	r2, r3
 80103fa:	d141      	bne.n	8010480 <tcp_receive+0xf8>
       (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 80103fc:	4b94      	ldr	r3, [pc, #592]	; (8010650 <tcp_receive+0x2c8>)
 80103fe:	681b      	ldr	r3, [r3, #0]
 8010400:	89db      	ldrh	r3, [r3, #14]
 8010402:	b29a      	uxth	r2, r3
 8010404:	687b      	ldr	r3, [r7, #4]
 8010406:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 801040a:	429a      	cmp	r2, r3
 801040c:	d938      	bls.n	8010480 <tcp_receive+0xf8>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 801040e:	4b90      	ldr	r3, [pc, #576]	; (8010650 <tcp_receive+0x2c8>)
 8010410:	681b      	ldr	r3, [r3, #0]
 8010412:	89db      	ldrh	r3, [r3, #14]
 8010414:	b29a      	uxth	r2, r3
 8010416:	687b      	ldr	r3, [r7, #4]
 8010418:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 801041c:	687b      	ldr	r3, [r7, #4]
 801041e:	f8b3 205e 	ldrh.w	r2, [r3, #94]	; 0x5e
 8010422:	687b      	ldr	r3, [r7, #4]
 8010424:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8010428:	429a      	cmp	r2, r3
 801042a:	d205      	bcs.n	8010438 <tcp_receive+0xb0>
        pcb->snd_wnd_max = pcb->snd_wnd;
 801042c:	687b      	ldr	r3, [r7, #4]
 801042e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8010432:	687b      	ldr	r3, [r7, #4]
 8010434:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      }
      pcb->snd_wl1 = seqno;
 8010438:	4b83      	ldr	r3, [pc, #524]	; (8010648 <tcp_receive+0x2c0>)
 801043a:	681a      	ldr	r2, [r3, #0]
 801043c:	687b      	ldr	r3, [r7, #4]
 801043e:	651a      	str	r2, [r3, #80]	; 0x50
      pcb->snd_wl2 = ackno;
 8010440:	4b82      	ldr	r3, [pc, #520]	; (801064c <tcp_receive+0x2c4>)
 8010442:	681a      	ldr	r2, [r3, #0]
 8010444:	687b      	ldr	r3, [r7, #4]
 8010446:	655a      	str	r2, [r3, #84]	; 0x54
      if (pcb->snd_wnd == 0) {
 8010448:	687b      	ldr	r3, [r7, #4]
 801044a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 801044e:	2b00      	cmp	r3, #0
 8010450:	d10d      	bne.n	801046e <tcp_receive+0xe6>
        if (pcb->persist_backoff == 0) {
 8010452:	687b      	ldr	r3, [r7, #4]
 8010454:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 8010458:	2b00      	cmp	r3, #0
 801045a:	d111      	bne.n	8010480 <tcp_receive+0xf8>
          /* start persist timer */
          pcb->persist_cnt = 0;
 801045c:	687b      	ldr	r3, [r7, #4]
 801045e:	2200      	movs	r2, #0
 8010460:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
          pcb->persist_backoff = 1;
 8010464:	687b      	ldr	r3, [r7, #4]
 8010466:	2201      	movs	r2, #1
 8010468:	f883 2095 	strb.w	r2, [r3, #149]	; 0x95
 801046c:	e008      	b.n	8010480 <tcp_receive+0xf8>
        }
      } else if (pcb->persist_backoff > 0) {
 801046e:	687b      	ldr	r3, [r7, #4]
 8010470:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 8010474:	2b00      	cmp	r3, #0
 8010476:	d003      	beq.n	8010480 <tcp_receive+0xf8>
        /* stop persist timer */
          pcb->persist_backoff = 0;
 8010478:	687b      	ldr	r3, [r7, #4]
 801047a:	2200      	movs	r2, #0
 801047c:	f883 2095 	strb.w	r2, [r3, #149]	; 0x95
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 8010480:	4b72      	ldr	r3, [pc, #456]	; (801064c <tcp_receive+0x2c4>)
 8010482:	681a      	ldr	r2, [r3, #0]
 8010484:	687b      	ldr	r3, [r7, #4]
 8010486:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010488:	1ad3      	subs	r3, r2, r3
 801048a:	2b00      	cmp	r3, #0
 801048c:	dc53      	bgt.n	8010536 <tcp_receive+0x1ae>
      /* Clause 2 */
      if (tcplen == 0) {
 801048e:	4b71      	ldr	r3, [pc, #452]	; (8010654 <tcp_receive+0x2cc>)
 8010490:	881b      	ldrh	r3, [r3, #0]
 8010492:	2b00      	cmp	r3, #0
 8010494:	d146      	bne.n	8010524 <tcp_receive+0x19c>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 8010496:	687b      	ldr	r3, [r7, #4]
 8010498:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801049a:	687a      	ldr	r2, [r7, #4]
 801049c:	f8b2 205c 	ldrh.w	r2, [r2, #92]	; 0x5c
 80104a0:	4413      	add	r3, r2
 80104a2:	697a      	ldr	r2, [r7, #20]
 80104a4:	429a      	cmp	r2, r3
 80104a6:	d13d      	bne.n	8010524 <tcp_receive+0x19c>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 80104a8:	687b      	ldr	r3, [r7, #4]
 80104aa:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 80104ae:	2b00      	cmp	r3, #0
 80104b0:	db38      	blt.n	8010524 <tcp_receive+0x19c>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 80104b2:	687b      	ldr	r3, [r7, #4]
 80104b4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80104b6:	4b65      	ldr	r3, [pc, #404]	; (801064c <tcp_receive+0x2c4>)
 80104b8:	681b      	ldr	r3, [r3, #0]
 80104ba:	429a      	cmp	r2, r3
 80104bc:	d132      	bne.n	8010524 <tcp_receive+0x19c>
              found_dupack = 1;
 80104be:	2301      	movs	r3, #1
 80104c0:	61fb      	str	r3, [r7, #28]
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 80104c2:	687b      	ldr	r3, [r7, #4]
 80104c4:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80104c8:	2bff      	cmp	r3, #255	; 0xff
 80104ca:	d007      	beq.n	80104dc <tcp_receive+0x154>
                ++pcb->dupacks;
 80104cc:	687b      	ldr	r3, [r7, #4]
 80104ce:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80104d2:	3301      	adds	r3, #1
 80104d4:	b2da      	uxtb	r2, r3
 80104d6:	687b      	ldr	r3, [r7, #4]
 80104d8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 80104dc:	687b      	ldr	r3, [r7, #4]
 80104de:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80104e2:	2b03      	cmp	r3, #3
 80104e4:	d916      	bls.n	8010514 <tcp_receive+0x18c>
                /* Inflate the congestion window, but not if it means that
                   the value overflows. */
                if ((tcpwnd_size_t)(pcb->cwnd + pcb->mss) > pcb->cwnd) {
 80104e6:	687b      	ldr	r3, [r7, #4]
 80104e8:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80104ec:	687b      	ldr	r3, [r7, #4]
 80104ee:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80104f0:	4413      	add	r3, r2
 80104f2:	b29a      	uxth	r2, r3
 80104f4:	687b      	ldr	r3, [r7, #4]
 80104f6:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80104fa:	429a      	cmp	r2, r3
 80104fc:	d912      	bls.n	8010524 <tcp_receive+0x19c>
                  pcb->cwnd += pcb->mss;
 80104fe:	687b      	ldr	r3, [r7, #4]
 8010500:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8010504:	687b      	ldr	r3, [r7, #4]
 8010506:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010508:	4413      	add	r3, r2
 801050a:	b29a      	uxth	r2, r3
 801050c:	687b      	ldr	r3, [r7, #4]
 801050e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8010512:	e007      	b.n	8010524 <tcp_receive+0x19c>
                }
              } else if (pcb->dupacks == 3) {
 8010514:	687b      	ldr	r3, [r7, #4]
 8010516:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 801051a:	2b03      	cmp	r3, #3
 801051c:	d102      	bne.n	8010524 <tcp_receive+0x19c>
                /* Do fast retransmit */
                tcp_rexmit_fast(pcb);
 801051e:	6878      	ldr	r0, [r7, #4]
 8010520:	f002 fa2e 	bl	8012980 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 8010524:	69fb      	ldr	r3, [r7, #28]
 8010526:	2b00      	cmp	r3, #0
 8010528:	f040 8169 	bne.w	80107fe <tcp_receive+0x476>
        pcb->dupacks = 0;
 801052c:	687b      	ldr	r3, [r7, #4]
 801052e:	2200      	movs	r2, #0
 8010530:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8010534:	e163      	b.n	80107fe <tcp_receive+0x476>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack+1, pcb->snd_nxt)) {
 8010536:	4b45      	ldr	r3, [pc, #276]	; (801064c <tcp_receive+0x2c4>)
 8010538:	681a      	ldr	r2, [r3, #0]
 801053a:	687b      	ldr	r3, [r7, #4]
 801053c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801053e:	1ad3      	subs	r3, r2, r3
 8010540:	3b01      	subs	r3, #1
 8010542:	2b00      	cmp	r3, #0
 8010544:	f2c0 8107 	blt.w	8010756 <tcp_receive+0x3ce>
 8010548:	4b40      	ldr	r3, [pc, #256]	; (801064c <tcp_receive+0x2c4>)
 801054a:	681a      	ldr	r2, [r3, #0]
 801054c:	687b      	ldr	r3, [r7, #4]
 801054e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8010550:	1ad3      	subs	r3, r2, r3
 8010552:	2b00      	cmp	r3, #0
 8010554:	f300 80ff 	bgt.w	8010756 <tcp_receive+0x3ce>
      /* We come here when the ACK acknowledges new data. */

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 8010558:	687b      	ldr	r3, [r7, #4]
 801055a:	7e9b      	ldrb	r3, [r3, #26]
 801055c:	f003 0304 	and.w	r3, r3, #4
 8010560:	2b00      	cmp	r3, #0
 8010562:	d00c      	beq.n	801057e <tcp_receive+0x1f6>
        pcb->flags &= ~TF_INFR;
 8010564:	687b      	ldr	r3, [r7, #4]
 8010566:	7e9b      	ldrb	r3, [r3, #26]
 8010568:	f023 0304 	bic.w	r3, r3, #4
 801056c:	b2da      	uxtb	r2, r3
 801056e:	687b      	ldr	r3, [r7, #4]
 8010570:	769a      	strb	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 8010572:	687b      	ldr	r3, [r7, #4]
 8010574:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8010578:	687b      	ldr	r3, [r7, #4]
 801057a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 801057e:	687b      	ldr	r3, [r7, #4]
 8010580:	2200      	movs	r2, #0
 8010582:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (pcb->sa >> 3) + pcb->sv;
 8010586:	687b      	ldr	r3, [r7, #4]
 8010588:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 801058c:	10db      	asrs	r3, r3, #3
 801058e:	b21b      	sxth	r3, r3
 8010590:	b29a      	uxth	r2, r3
 8010592:	687b      	ldr	r3, [r7, #4]
 8010594:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8010598:	b29b      	uxth	r3, r3
 801059a:	4413      	add	r3, r2
 801059c:	b29b      	uxth	r3, r3
 801059e:	b21a      	sxth	r2, r3
 80105a0:	687b      	ldr	r3, [r7, #4]
 80105a2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 80105a6:	687b      	ldr	r3, [r7, #4]
 80105a8:	2200      	movs	r2, #0
 80105aa:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 80105ae:	4b27      	ldr	r3, [pc, #156]	; (801064c <tcp_receive+0x2c4>)
 80105b0:	681a      	ldr	r2, [r3, #0]
 80105b2:	687b      	ldr	r3, [r7, #4]
 80105b4:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 80105b6:	687b      	ldr	r3, [r7, #4]
 80105b8:	7d1b      	ldrb	r3, [r3, #20]
 80105ba:	2b03      	cmp	r3, #3
 80105bc:	f240 8094 	bls.w	80106e8 <tcp_receive+0x360>
        if (pcb->cwnd < pcb->ssthresh) {
 80105c0:	687b      	ldr	r3, [r7, #4]
 80105c2:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80105c6:	687b      	ldr	r3, [r7, #4]
 80105c8:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 80105cc:	429a      	cmp	r2, r3
 80105ce:	d216      	bcs.n	80105fe <tcp_receive+0x276>
          if ((tcpwnd_size_t)(pcb->cwnd + pcb->mss) > pcb->cwnd) {
 80105d0:	687b      	ldr	r3, [r7, #4]
 80105d2:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80105d6:	687b      	ldr	r3, [r7, #4]
 80105d8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80105da:	4413      	add	r3, r2
 80105dc:	b29a      	uxth	r2, r3
 80105de:	687b      	ldr	r3, [r7, #4]
 80105e0:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80105e4:	429a      	cmp	r2, r3
 80105e6:	d97f      	bls.n	80106e8 <tcp_receive+0x360>
            pcb->cwnd += pcb->mss;
 80105e8:	687b      	ldr	r3, [r7, #4]
 80105ea:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80105ee:	687b      	ldr	r3, [r7, #4]
 80105f0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80105f2:	4413      	add	r3, r2
 80105f4:	b29a      	uxth	r2, r3
 80105f6:	687b      	ldr	r3, [r7, #4]
 80105f8:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 80105fc:	e074      	b.n	80106e8 <tcp_receive+0x360>
          }
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          tcpwnd_size_t new_cwnd = (pcb->cwnd + pcb->mss * pcb->mss / pcb->cwnd);
 80105fe:	687b      	ldr	r3, [r7, #4]
 8010600:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8010604:	687b      	ldr	r3, [r7, #4]
 8010606:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010608:	4619      	mov	r1, r3
 801060a:	687b      	ldr	r3, [r7, #4]
 801060c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801060e:	fb03 f301 	mul.w	r3, r3, r1
 8010612:	6879      	ldr	r1, [r7, #4]
 8010614:	f8b1 1048 	ldrh.w	r1, [r1, #72]	; 0x48
 8010618:	fb93 f3f1 	sdiv	r3, r3, r1
 801061c:	b29b      	uxth	r3, r3
 801061e:	4413      	add	r3, r2
 8010620:	827b      	strh	r3, [r7, #18]
          if (new_cwnd > pcb->cwnd) {
 8010622:	687b      	ldr	r3, [r7, #4]
 8010624:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8010628:	8a7a      	ldrh	r2, [r7, #18]
 801062a:	429a      	cmp	r2, r3
 801062c:	d95c      	bls.n	80106e8 <tcp_receive+0x360>
            pcb->cwnd = new_cwnd;
 801062e:	687b      	ldr	r3, [r7, #4]
 8010630:	8a7a      	ldrh	r2, [r7, #18]
 8010632:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked): 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      while (pcb->unacked != NULL &&
 8010636:	e057      	b.n	80106e8 <tcp_receive+0x360>
 8010638:	0801a2c0 	.word	0x0801a2c0
 801063c:	0801a4e4 	.word	0x0801a4e4
 8010640:	0801a304 	.word	0x0801a304
 8010644:	20004240 	.word	0x20004240
 8010648:	20004234 	.word	0x20004234
 801064c:	20004238 	.word	0x20004238
 8010650:	20004224 	.word	0x20004224
 8010654:	2000423e 	.word	0x2000423e
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->unacked\n",
                                      lwip_ntohl(pcb->unacked->tcphdr->seqno),
                                      lwip_ntohl(pcb->unacked->tcphdr->seqno) +
                                      TCP_TCPLEN(pcb->unacked)));

        next = pcb->unacked;
 8010658:	687b      	ldr	r3, [r7, #4]
 801065a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801065c:	62fb      	str	r3, [r7, #44]	; 0x2c
        pcb->unacked = pcb->unacked->next;
 801065e:	687b      	ldr	r3, [r7, #4]
 8010660:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010662:	681a      	ldr	r2, [r3, #0]
 8010664:	687b      	ldr	r3, [r7, #4]
 8010666:	66da      	str	r2, [r3, #108]	; 0x6c

        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ", (tcpwnd_size_t)pcb->snd_queuelen));
        LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= pbuf_clen(next->p)));
 8010668:	687b      	ldr	r3, [r7, #4]
 801066a:	f8b3 4062 	ldrh.w	r4, [r3, #98]	; 0x62
 801066e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010670:	685b      	ldr	r3, [r3, #4]
 8010672:	4618      	mov	r0, r3
 8010674:	f7fc ff06 	bl	800d484 <pbuf_clen>
 8010678:	4603      	mov	r3, r0
 801067a:	429c      	cmp	r4, r3
 801067c:	d206      	bcs.n	801068c <tcp_receive+0x304>
 801067e:	4b70      	ldr	r3, [pc, #448]	; (8010840 <tcp_receive+0x4b8>)
 8010680:	f240 429e 	movw	r2, #1182	; 0x49e
 8010684:	496f      	ldr	r1, [pc, #444]	; (8010844 <tcp_receive+0x4bc>)
 8010686:	4870      	ldr	r0, [pc, #448]	; (8010848 <tcp_receive+0x4c0>)
 8010688:	f007 ffde 	bl	8018648 <iprintf>

        pcb->snd_queuelen -= pbuf_clen(next->p);
 801068c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801068e:	685b      	ldr	r3, [r3, #4]
 8010690:	4618      	mov	r0, r3
 8010692:	f7fc fef7 	bl	800d484 <pbuf_clen>
 8010696:	4603      	mov	r3, r0
 8010698:	461a      	mov	r2, r3
 801069a:	687b      	ldr	r3, [r7, #4]
 801069c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80106a0:	1a9b      	subs	r3, r3, r2
 80106a2:	b29a      	uxth	r2, r3
 80106a4:	687b      	ldr	r3, [r7, #4]
 80106a6:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        recv_acked += next->len;
 80106aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80106ac:	891a      	ldrh	r2, [r3, #8]
 80106ae:	4b67      	ldr	r3, [pc, #412]	; (801084c <tcp_receive+0x4c4>)
 80106b0:	881b      	ldrh	r3, [r3, #0]
 80106b2:	4413      	add	r3, r2
 80106b4:	b29a      	uxth	r2, r3
 80106b6:	4b65      	ldr	r3, [pc, #404]	; (801084c <tcp_receive+0x4c4>)
 80106b8:	801a      	strh	r2, [r3, #0]
        tcp_seg_free(next);
 80106ba:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80106bc:	f7fe f93b 	bl	800e936 <tcp_seg_free>

        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing unacked)\n", (tcpwnd_size_t)pcb->snd_queuelen));
        if (pcb->snd_queuelen != 0) {
 80106c0:	687b      	ldr	r3, [r7, #4]
 80106c2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80106c6:	2b00      	cmp	r3, #0
 80106c8:	d00e      	beq.n	80106e8 <tcp_receive+0x360>
          LWIP_ASSERT("tcp_receive: valid queue length", pcb->unacked != NULL ||
 80106ca:	687b      	ldr	r3, [r7, #4]
 80106cc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80106ce:	2b00      	cmp	r3, #0
 80106d0:	d10a      	bne.n	80106e8 <tcp_receive+0x360>
 80106d2:	687b      	ldr	r3, [r7, #4]
 80106d4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80106d6:	2b00      	cmp	r3, #0
 80106d8:	d106      	bne.n	80106e8 <tcp_receive+0x360>
 80106da:	4b59      	ldr	r3, [pc, #356]	; (8010840 <tcp_receive+0x4b8>)
 80106dc:	f240 42a7 	movw	r2, #1191	; 0x4a7
 80106e0:	495b      	ldr	r1, [pc, #364]	; (8010850 <tcp_receive+0x4c8>)
 80106e2:	4859      	ldr	r0, [pc, #356]	; (8010848 <tcp_receive+0x4c0>)
 80106e4:	f007 ffb0 	bl	8018648 <iprintf>
      while (pcb->unacked != NULL &&
 80106e8:	687b      	ldr	r3, [r7, #4]
 80106ea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80106ec:	2b00      	cmp	r3, #0
 80106ee:	d022      	beq.n	8010736 <tcp_receive+0x3ae>
             TCP_SEQ_LEQ(lwip_ntohl(pcb->unacked->tcphdr->seqno) +
 80106f0:	687b      	ldr	r3, [r7, #4]
 80106f2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80106f4:	68db      	ldr	r3, [r3, #12]
 80106f6:	685b      	ldr	r3, [r3, #4]
 80106f8:	4618      	mov	r0, r3
 80106fa:	f7fb fc95 	bl	800c028 <lwip_htonl>
 80106fe:	4604      	mov	r4, r0
 8010700:	687b      	ldr	r3, [r7, #4]
 8010702:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010704:	891b      	ldrh	r3, [r3, #8]
 8010706:	461d      	mov	r5, r3
 8010708:	687b      	ldr	r3, [r7, #4]
 801070a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801070c:	68db      	ldr	r3, [r3, #12]
 801070e:	899b      	ldrh	r3, [r3, #12]
 8010710:	b29b      	uxth	r3, r3
 8010712:	4618      	mov	r0, r3
 8010714:	f7fb fc7a 	bl	800c00c <lwip_htons>
 8010718:	4603      	mov	r3, r0
 801071a:	f003 0303 	and.w	r3, r3, #3
 801071e:	2b00      	cmp	r3, #0
 8010720:	d001      	beq.n	8010726 <tcp_receive+0x39e>
 8010722:	2301      	movs	r3, #1
 8010724:	e000      	b.n	8010728 <tcp_receive+0x3a0>
 8010726:	2300      	movs	r3, #0
 8010728:	442b      	add	r3, r5
 801072a:	18e2      	adds	r2, r4, r3
 801072c:	4b49      	ldr	r3, [pc, #292]	; (8010854 <tcp_receive+0x4cc>)
 801072e:	681b      	ldr	r3, [r3, #0]
 8010730:	1ad3      	subs	r3, r2, r3
      while (pcb->unacked != NULL &&
 8010732:	2b00      	cmp	r3, #0
 8010734:	dd90      	ble.n	8010658 <tcp_receive+0x2d0>
        }
      }

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 8010736:	687b      	ldr	r3, [r7, #4]
 8010738:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801073a:	2b00      	cmp	r3, #0
 801073c:	d104      	bne.n	8010748 <tcp_receive+0x3c0>
        pcb->rtime = -1;
 801073e:	687b      	ldr	r3, [r7, #4]
 8010740:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8010744:	861a      	strh	r2, [r3, #48]	; 0x30
 8010746:	e002      	b.n	801074e <tcp_receive+0x3c6>
      } else {
        pcb->rtime = 0;
 8010748:	687b      	ldr	r3, [r7, #4]
 801074a:	2200      	movs	r2, #0
 801074c:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 801074e:	687b      	ldr	r3, [r7, #4]
 8010750:	2200      	movs	r2, #0
 8010752:	76da      	strb	r2, [r3, #27]
 8010754:	e002      	b.n	801075c <tcp_receive+0x3d4>
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 8010756:	6878      	ldr	r0, [r7, #4]
 8010758:	f001 fd30 	bl	80121bc <tcp_send_empty_ack>
       on the list are acknowledged by the ACK. This may seem
       strange since an "unsent" segment shouldn't be acked. The
       rationale is that lwIP puts all outstanding segments on the
       ->unsent list after a retransmission, so these segments may
       in fact have been sent once. */
    while (pcb->unsent != NULL &&
 801075c:	e04f      	b.n	80107fe <tcp_receive+0x476>
                           TCP_TCPLEN(pcb->unsent), pcb->snd_nxt)) {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->unsent\n",
                                    lwip_ntohl(pcb->unsent->tcphdr->seqno), lwip_ntohl(pcb->unsent->tcphdr->seqno) +
                                    TCP_TCPLEN(pcb->unsent)));

      next = pcb->unsent;
 801075e:	687b      	ldr	r3, [r7, #4]
 8010760:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8010762:	62fb      	str	r3, [r7, #44]	; 0x2c
      pcb->unsent = pcb->unsent->next;
 8010764:	687b      	ldr	r3, [r7, #4]
 8010766:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8010768:	681a      	ldr	r2, [r3, #0]
 801076a:	687b      	ldr	r3, [r7, #4]
 801076c:	669a      	str	r2, [r3, #104]	; 0x68
#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 801076e:	687b      	ldr	r3, [r7, #4]
 8010770:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8010772:	2b00      	cmp	r3, #0
 8010774:	d103      	bne.n	801077e <tcp_receive+0x3f6>
        pcb->unsent_oversize = 0;
 8010776:	687b      	ldr	r3, [r7, #4]
 8010778:	2200      	movs	r2, #0
 801077a:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      }
#endif /* TCP_OVERSIZE */
      LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ", (tcpwnd_size_t)pcb->snd_queuelen));
      LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= pbuf_clen(next->p)));
 801077e:	687b      	ldr	r3, [r7, #4]
 8010780:	f8b3 4062 	ldrh.w	r4, [r3, #98]	; 0x62
 8010784:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010786:	685b      	ldr	r3, [r3, #4]
 8010788:	4618      	mov	r0, r3
 801078a:	f7fc fe7b 	bl	800d484 <pbuf_clen>
 801078e:	4603      	mov	r3, r0
 8010790:	429c      	cmp	r4, r3
 8010792:	d206      	bcs.n	80107a2 <tcp_receive+0x41a>
 8010794:	4b2a      	ldr	r3, [pc, #168]	; (8010840 <tcp_receive+0x4b8>)
 8010796:	f240 42d5 	movw	r2, #1237	; 0x4d5
 801079a:	492a      	ldr	r1, [pc, #168]	; (8010844 <tcp_receive+0x4bc>)
 801079c:	482a      	ldr	r0, [pc, #168]	; (8010848 <tcp_receive+0x4c0>)
 801079e:	f007 ff53 	bl	8018648 <iprintf>
      /* Prevent ACK for FIN to generate a sent event */
      pcb->snd_queuelen -= pbuf_clen(next->p);
 80107a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80107a4:	685b      	ldr	r3, [r3, #4]
 80107a6:	4618      	mov	r0, r3
 80107a8:	f7fc fe6c 	bl	800d484 <pbuf_clen>
 80107ac:	4603      	mov	r3, r0
 80107ae:	461a      	mov	r2, r3
 80107b0:	687b      	ldr	r3, [r7, #4]
 80107b2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80107b6:	1a9b      	subs	r3, r3, r2
 80107b8:	b29a      	uxth	r2, r3
 80107ba:	687b      	ldr	r3, [r7, #4]
 80107bc:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      recv_acked += next->len;
 80107c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80107c2:	891a      	ldrh	r2, [r3, #8]
 80107c4:	4b21      	ldr	r3, [pc, #132]	; (801084c <tcp_receive+0x4c4>)
 80107c6:	881b      	ldrh	r3, [r3, #0]
 80107c8:	4413      	add	r3, r2
 80107ca:	b29a      	uxth	r2, r3
 80107cc:	4b1f      	ldr	r3, [pc, #124]	; (801084c <tcp_receive+0x4c4>)
 80107ce:	801a      	strh	r2, [r3, #0]
      tcp_seg_free(next);
 80107d0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80107d2:	f7fe f8b0 	bl	800e936 <tcp_seg_free>
      LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing unsent)\n", (tcpwnd_size_t)pcb->snd_queuelen));
      if (pcb->snd_queuelen != 0) {
 80107d6:	687b      	ldr	r3, [r7, #4]
 80107d8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80107dc:	2b00      	cmp	r3, #0
 80107de:	d00e      	beq.n	80107fe <tcp_receive+0x476>
        LWIP_ASSERT("tcp_receive: valid queue length",
 80107e0:	687b      	ldr	r3, [r7, #4]
 80107e2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80107e4:	2b00      	cmp	r3, #0
 80107e6:	d10a      	bne.n	80107fe <tcp_receive+0x476>
 80107e8:	687b      	ldr	r3, [r7, #4]
 80107ea:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80107ec:	2b00      	cmp	r3, #0
 80107ee:	d106      	bne.n	80107fe <tcp_receive+0x476>
 80107f0:	4b13      	ldr	r3, [pc, #76]	; (8010840 <tcp_receive+0x4b8>)
 80107f2:	f240 42dd 	movw	r2, #1245	; 0x4dd
 80107f6:	4916      	ldr	r1, [pc, #88]	; (8010850 <tcp_receive+0x4c8>)
 80107f8:	4813      	ldr	r0, [pc, #76]	; (8010848 <tcp_receive+0x4c0>)
 80107fa:	f007 ff25 	bl	8018648 <iprintf>
    while (pcb->unsent != NULL &&
 80107fe:	687b      	ldr	r3, [r7, #4]
 8010800:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8010802:	2b00      	cmp	r3, #0
 8010804:	d036      	beq.n	8010874 <tcp_receive+0x4ec>
           TCP_SEQ_BETWEEN(ackno, lwip_ntohl(pcb->unsent->tcphdr->seqno) +
 8010806:	4b13      	ldr	r3, [pc, #76]	; (8010854 <tcp_receive+0x4cc>)
 8010808:	681c      	ldr	r4, [r3, #0]
 801080a:	687b      	ldr	r3, [r7, #4]
 801080c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801080e:	68db      	ldr	r3, [r3, #12]
 8010810:	685b      	ldr	r3, [r3, #4]
 8010812:	4618      	mov	r0, r3
 8010814:	f7fb fc08 	bl	800c028 <lwip_htonl>
 8010818:	4605      	mov	r5, r0
 801081a:	687b      	ldr	r3, [r7, #4]
 801081c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801081e:	891b      	ldrh	r3, [r3, #8]
 8010820:	461e      	mov	r6, r3
 8010822:	687b      	ldr	r3, [r7, #4]
 8010824:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8010826:	68db      	ldr	r3, [r3, #12]
 8010828:	899b      	ldrh	r3, [r3, #12]
 801082a:	b29b      	uxth	r3, r3
 801082c:	4618      	mov	r0, r3
 801082e:	f7fb fbed 	bl	800c00c <lwip_htons>
 8010832:	4603      	mov	r3, r0
 8010834:	f003 0303 	and.w	r3, r3, #3
 8010838:	2b00      	cmp	r3, #0
 801083a:	d00d      	beq.n	8010858 <tcp_receive+0x4d0>
 801083c:	2301      	movs	r3, #1
 801083e:	e00c      	b.n	801085a <tcp_receive+0x4d2>
 8010840:	0801a2c0 	.word	0x0801a2c0
 8010844:	0801a500 	.word	0x0801a500
 8010848:	0801a304 	.word	0x0801a304
 801084c:	2000423c 	.word	0x2000423c
 8010850:	0801a528 	.word	0x0801a528
 8010854:	20004238 	.word	0x20004238
 8010858:	2300      	movs	r3, #0
 801085a:	4433      	add	r3, r6
 801085c:	442b      	add	r3, r5
 801085e:	1ae3      	subs	r3, r4, r3
    while (pcb->unsent != NULL &&
 8010860:	2b00      	cmp	r3, #0
 8010862:	db07      	blt.n	8010874 <tcp_receive+0x4ec>
           TCP_SEQ_BETWEEN(ackno, lwip_ntohl(pcb->unsent->tcphdr->seqno) +
 8010864:	4b8d      	ldr	r3, [pc, #564]	; (8010a9c <tcp_receive+0x714>)
 8010866:	681a      	ldr	r2, [r3, #0]
 8010868:	687b      	ldr	r3, [r7, #4]
 801086a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801086c:	1ad3      	subs	r3, r2, r3
 801086e:	2b00      	cmp	r3, #0
 8010870:	f77f af75 	ble.w	801075e <tcp_receive+0x3d6>
          pcb->unacked != NULL || pcb->unsent != NULL);
      }
    }
    pcb->snd_buf += recv_acked;
 8010874:	687b      	ldr	r3, [r7, #4]
 8010876:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 801087a:	4b89      	ldr	r3, [pc, #548]	; (8010aa0 <tcp_receive+0x718>)
 801087c:	881b      	ldrh	r3, [r3, #0]
 801087e:	4413      	add	r3, r2
 8010880:	b29a      	uxth	r2, r3
 8010882:	687b      	ldr	r3, [r7, #4]
 8010884:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 8010888:	687b      	ldr	r3, [r7, #4]
 801088a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801088c:	2b00      	cmp	r3, #0
 801088e:	d052      	beq.n	8010936 <tcp_receive+0x5ae>
 8010890:	687b      	ldr	r3, [r7, #4]
 8010892:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8010894:	4b81      	ldr	r3, [pc, #516]	; (8010a9c <tcp_receive+0x714>)
 8010896:	681b      	ldr	r3, [r3, #0]
 8010898:	1ad3      	subs	r3, r2, r3
 801089a:	2b00      	cmp	r3, #0
 801089c:	da4b      	bge.n	8010936 <tcp_receive+0x5ae>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 801089e:	4b81      	ldr	r3, [pc, #516]	; (8010aa4 <tcp_receive+0x71c>)
 80108a0:	681b      	ldr	r3, [r3, #0]
 80108a2:	b29a      	uxth	r2, r3
 80108a4:	687b      	ldr	r3, [r7, #4]
 80108a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80108a8:	b29b      	uxth	r3, r3
 80108aa:	1ad3      	subs	r3, r2, r3
 80108ac:	b29b      	uxth	r3, r3
 80108ae:	847b      	strh	r3, [r7, #34]	; 0x22

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = m - (pcb->sa >> 3);
 80108b0:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 80108b2:	687b      	ldr	r3, [r7, #4]
 80108b4:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 80108b8:	10db      	asrs	r3, r3, #3
 80108ba:	b21b      	sxth	r3, r3
 80108bc:	b29b      	uxth	r3, r3
 80108be:	1ad3      	subs	r3, r2, r3
 80108c0:	b29b      	uxth	r3, r3
 80108c2:	847b      	strh	r3, [r7, #34]	; 0x22
      pcb->sa += m;
 80108c4:	687b      	ldr	r3, [r7, #4]
 80108c6:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 80108ca:	b29a      	uxth	r2, r3
 80108cc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80108ce:	4413      	add	r3, r2
 80108d0:	b29b      	uxth	r3, r3
 80108d2:	b21a      	sxth	r2, r3
 80108d4:	687b      	ldr	r3, [r7, #4]
 80108d6:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 80108d8:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 80108dc:	2b00      	cmp	r3, #0
 80108de:	da03      	bge.n	80108e8 <tcp_receive+0x560>
        m = -m;
 80108e0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80108e2:	425b      	negs	r3, r3
 80108e4:	b29b      	uxth	r3, r3
 80108e6:	847b      	strh	r3, [r7, #34]	; 0x22
      }
      m = m - (pcb->sv >> 2);
 80108e8:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 80108ea:	687b      	ldr	r3, [r7, #4]
 80108ec:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 80108f0:	109b      	asrs	r3, r3, #2
 80108f2:	b21b      	sxth	r3, r3
 80108f4:	b29b      	uxth	r3, r3
 80108f6:	1ad3      	subs	r3, r2, r3
 80108f8:	b29b      	uxth	r3, r3
 80108fa:	847b      	strh	r3, [r7, #34]	; 0x22
      pcb->sv += m;
 80108fc:	687b      	ldr	r3, [r7, #4]
 80108fe:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8010902:	b29a      	uxth	r2, r3
 8010904:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8010906:	4413      	add	r3, r2
 8010908:	b29b      	uxth	r3, r3
 801090a:	b21a      	sxth	r2, r3
 801090c:	687b      	ldr	r3, [r7, #4]
 801090e:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (pcb->sa >> 3) + pcb->sv;
 8010910:	687b      	ldr	r3, [r7, #4]
 8010912:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8010916:	10db      	asrs	r3, r3, #3
 8010918:	b21b      	sxth	r3, r3
 801091a:	b29a      	uxth	r2, r3
 801091c:	687b      	ldr	r3, [r7, #4]
 801091e:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8010922:	b29b      	uxth	r3, r3
 8010924:	4413      	add	r3, r2
 8010926:	b29b      	uxth	r3, r3
 8010928:	b21a      	sxth	r2, r3
 801092a:	687b      	ldr	r3, [r7, #4]
 801092c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 8010930:	687b      	ldr	r3, [r7, #4]
 8010932:	2200      	movs	r2, #0
 8010934:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 8010936:	4b5c      	ldr	r3, [pc, #368]	; (8010aa8 <tcp_receive+0x720>)
 8010938:	881b      	ldrh	r3, [r3, #0]
 801093a:	2b00      	cmp	r3, #0
 801093c:	f000 84f1 	beq.w	8011322 <tcp_receive+0xf9a>
 8010940:	687b      	ldr	r3, [r7, #4]
 8010942:	7d1b      	ldrb	r3, [r3, #20]
 8010944:	2b06      	cmp	r3, #6
 8010946:	f200 84ec 	bhi.w	8011322 <tcp_receive+0xf9a>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 801094a:	687b      	ldr	r3, [r7, #4]
 801094c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801094e:	4b57      	ldr	r3, [pc, #348]	; (8010aac <tcp_receive+0x724>)
 8010950:	681b      	ldr	r3, [r3, #0]
 8010952:	1ad3      	subs	r3, r2, r3
 8010954:	3b01      	subs	r3, #1
 8010956:	2b00      	cmp	r3, #0
 8010958:	f2c0 80b8 	blt.w	8010acc <tcp_receive+0x744>
 801095c:	687b      	ldr	r3, [r7, #4]
 801095e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8010960:	4b51      	ldr	r3, [pc, #324]	; (8010aa8 <tcp_receive+0x720>)
 8010962:	881b      	ldrh	r3, [r3, #0]
 8010964:	4619      	mov	r1, r3
 8010966:	4b51      	ldr	r3, [pc, #324]	; (8010aac <tcp_receive+0x724>)
 8010968:	681b      	ldr	r3, [r3, #0]
 801096a:	440b      	add	r3, r1
 801096c:	1ad3      	subs	r3, r2, r3
 801096e:	3301      	adds	r3, #1
 8010970:	2b00      	cmp	r3, #0
 8010972:	f300 80ab 	bgt.w	8010acc <tcp_receive+0x744>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 8010976:	4b4e      	ldr	r3, [pc, #312]	; (8010ab0 <tcp_receive+0x728>)
 8010978:	685b      	ldr	r3, [r3, #4]
 801097a:	61bb      	str	r3, [r7, #24]
      off = pcb->rcv_nxt - seqno;
 801097c:	687b      	ldr	r3, [r7, #4]
 801097e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8010980:	4b4a      	ldr	r3, [pc, #296]	; (8010aac <tcp_receive+0x724>)
 8010982:	681b      	ldr	r3, [r3, #0]
 8010984:	1ad3      	subs	r3, r2, r3
 8010986:	627b      	str	r3, [r7, #36]	; 0x24
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 8010988:	4b49      	ldr	r3, [pc, #292]	; (8010ab0 <tcp_receive+0x728>)
 801098a:	685b      	ldr	r3, [r3, #4]
 801098c:	2b00      	cmp	r3, #0
 801098e:	d106      	bne.n	801099e <tcp_receive+0x616>
 8010990:	4b48      	ldr	r3, [pc, #288]	; (8010ab4 <tcp_receive+0x72c>)
 8010992:	f240 523c 	movw	r2, #1340	; 0x53c
 8010996:	4948      	ldr	r1, [pc, #288]	; (8010ab8 <tcp_receive+0x730>)
 8010998:	4848      	ldr	r0, [pc, #288]	; (8010abc <tcp_receive+0x734>)
 801099a:	f007 fe55 	bl	8018648 <iprintf>
      LWIP_ASSERT("insane offset!", (off < 0x7fff));
 801099e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80109a0:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 80109a4:	4293      	cmp	r3, r2
 80109a6:	dd06      	ble.n	80109b6 <tcp_receive+0x62e>
 80109a8:	4b42      	ldr	r3, [pc, #264]	; (8010ab4 <tcp_receive+0x72c>)
 80109aa:	f240 523d 	movw	r2, #1341	; 0x53d
 80109ae:	4944      	ldr	r1, [pc, #272]	; (8010ac0 <tcp_receive+0x738>)
 80109b0:	4842      	ldr	r0, [pc, #264]	; (8010abc <tcp_receive+0x734>)
 80109b2:	f007 fe49 	bl	8018648 <iprintf>
      if (inseg.p->len < off) {
 80109b6:	4b3e      	ldr	r3, [pc, #248]	; (8010ab0 <tcp_receive+0x728>)
 80109b8:	685b      	ldr	r3, [r3, #4]
 80109ba:	895b      	ldrh	r3, [r3, #10]
 80109bc:	461a      	mov	r2, r3
 80109be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80109c0:	4293      	cmp	r3, r2
 80109c2:	dd3e      	ble.n	8010a42 <tcp_receive+0x6ba>
        LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 80109c4:	4b3a      	ldr	r3, [pc, #232]	; (8010ab0 <tcp_receive+0x728>)
 80109c6:	685b      	ldr	r3, [r3, #4]
 80109c8:	891b      	ldrh	r3, [r3, #8]
 80109ca:	461a      	mov	r2, r3
 80109cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80109ce:	4293      	cmp	r3, r2
 80109d0:	dd06      	ble.n	80109e0 <tcp_receive+0x658>
 80109d2:	4b38      	ldr	r3, [pc, #224]	; (8010ab4 <tcp_receive+0x72c>)
 80109d4:	f240 523f 	movw	r2, #1343	; 0x53f
 80109d8:	493a      	ldr	r1, [pc, #232]	; (8010ac4 <tcp_receive+0x73c>)
 80109da:	4838      	ldr	r0, [pc, #224]	; (8010abc <tcp_receive+0x734>)
 80109dc:	f007 fe34 	bl	8018648 <iprintf>
        new_tot_len = (u16_t)(inseg.p->tot_len - off);
 80109e0:	4b33      	ldr	r3, [pc, #204]	; (8010ab0 <tcp_receive+0x728>)
 80109e2:	685b      	ldr	r3, [r3, #4]
 80109e4:	891a      	ldrh	r2, [r3, #8]
 80109e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80109e8:	b29b      	uxth	r3, r3
 80109ea:	1ad3      	subs	r3, r2, r3
 80109ec:	823b      	strh	r3, [r7, #16]
        while (p->len < off) {
 80109ee:	e00e      	b.n	8010a0e <tcp_receive+0x686>
          off -= p->len;
 80109f0:	69bb      	ldr	r3, [r7, #24]
 80109f2:	895b      	ldrh	r3, [r3, #10]
 80109f4:	461a      	mov	r2, r3
 80109f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80109f8:	1a9b      	subs	r3, r3, r2
 80109fa:	627b      	str	r3, [r7, #36]	; 0x24
          /* KJM following line changed (with addition of new_tot_len var)
             to fix bug #9076
             inseg.p->tot_len -= p->len; */
          p->tot_len = new_tot_len;
 80109fc:	69bb      	ldr	r3, [r7, #24]
 80109fe:	8a3a      	ldrh	r2, [r7, #16]
 8010a00:	811a      	strh	r2, [r3, #8]
          p->len = 0;
 8010a02:	69bb      	ldr	r3, [r7, #24]
 8010a04:	2200      	movs	r2, #0
 8010a06:	815a      	strh	r2, [r3, #10]
          p = p->next;
 8010a08:	69bb      	ldr	r3, [r7, #24]
 8010a0a:	681b      	ldr	r3, [r3, #0]
 8010a0c:	61bb      	str	r3, [r7, #24]
        while (p->len < off) {
 8010a0e:	69bb      	ldr	r3, [r7, #24]
 8010a10:	895b      	ldrh	r3, [r3, #10]
 8010a12:	461a      	mov	r2, r3
 8010a14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010a16:	4293      	cmp	r3, r2
 8010a18:	dcea      	bgt.n	80109f0 <tcp_receive+0x668>
        }
        if (pbuf_header(p, (s16_t)-off)) {
 8010a1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010a1c:	b29b      	uxth	r3, r3
 8010a1e:	425b      	negs	r3, r3
 8010a20:	b29b      	uxth	r3, r3
 8010a22:	b21b      	sxth	r3, r3
 8010a24:	4619      	mov	r1, r3
 8010a26:	69b8      	ldr	r0, [r7, #24]
 8010a28:	f7fc fc6e 	bl	800d308 <pbuf_header>
 8010a2c:	4603      	mov	r3, r0
 8010a2e:	2b00      	cmp	r3, #0
 8010a30:	d01c      	beq.n	8010a6c <tcp_receive+0x6e4>
          /* Do we need to cope with this failing?  Assert for now */
          LWIP_ASSERT("pbuf_header failed", 0);
 8010a32:	4b20      	ldr	r3, [pc, #128]	; (8010ab4 <tcp_receive+0x72c>)
 8010a34:	f240 524c 	movw	r2, #1356	; 0x54c
 8010a38:	4923      	ldr	r1, [pc, #140]	; (8010ac8 <tcp_receive+0x740>)
 8010a3a:	4820      	ldr	r0, [pc, #128]	; (8010abc <tcp_receive+0x734>)
 8010a3c:	f007 fe04 	bl	8018648 <iprintf>
 8010a40:	e014      	b.n	8010a6c <tcp_receive+0x6e4>
        }
      } else {
        if (pbuf_header(inseg.p, (s16_t)-off)) {
 8010a42:	4b1b      	ldr	r3, [pc, #108]	; (8010ab0 <tcp_receive+0x728>)
 8010a44:	685b      	ldr	r3, [r3, #4]
 8010a46:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010a48:	b292      	uxth	r2, r2
 8010a4a:	4252      	negs	r2, r2
 8010a4c:	b292      	uxth	r2, r2
 8010a4e:	b212      	sxth	r2, r2
 8010a50:	4611      	mov	r1, r2
 8010a52:	4618      	mov	r0, r3
 8010a54:	f7fc fc58 	bl	800d308 <pbuf_header>
 8010a58:	4603      	mov	r3, r0
 8010a5a:	2b00      	cmp	r3, #0
 8010a5c:	d006      	beq.n	8010a6c <tcp_receive+0x6e4>
          /* Do we need to cope with this failing?  Assert for now */
          LWIP_ASSERT("pbuf_header failed", 0);
 8010a5e:	4b15      	ldr	r3, [pc, #84]	; (8010ab4 <tcp_receive+0x72c>)
 8010a60:	f240 5251 	movw	r2, #1361	; 0x551
 8010a64:	4918      	ldr	r1, [pc, #96]	; (8010ac8 <tcp_receive+0x740>)
 8010a66:	4815      	ldr	r0, [pc, #84]	; (8010abc <tcp_receive+0x734>)
 8010a68:	f007 fdee 	bl	8018648 <iprintf>
        }
      }
      inseg.len -= (u16_t)(pcb->rcv_nxt - seqno);
 8010a6c:	4b10      	ldr	r3, [pc, #64]	; (8010ab0 <tcp_receive+0x728>)
 8010a6e:	891a      	ldrh	r2, [r3, #8]
 8010a70:	4b0e      	ldr	r3, [pc, #56]	; (8010aac <tcp_receive+0x724>)
 8010a72:	681b      	ldr	r3, [r3, #0]
 8010a74:	b299      	uxth	r1, r3
 8010a76:	687b      	ldr	r3, [r7, #4]
 8010a78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010a7a:	b29b      	uxth	r3, r3
 8010a7c:	1acb      	subs	r3, r1, r3
 8010a7e:	b29b      	uxth	r3, r3
 8010a80:	4413      	add	r3, r2
 8010a82:	b29a      	uxth	r2, r3
 8010a84:	4b0a      	ldr	r3, [pc, #40]	; (8010ab0 <tcp_receive+0x728>)
 8010a86:	811a      	strh	r2, [r3, #8]
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 8010a88:	687b      	ldr	r3, [r7, #4]
 8010a8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010a8c:	4a07      	ldr	r2, [pc, #28]	; (8010aac <tcp_receive+0x724>)
 8010a8e:	6013      	str	r3, [r2, #0]
 8010a90:	4b07      	ldr	r3, [pc, #28]	; (8010ab0 <tcp_receive+0x728>)
 8010a92:	68db      	ldr	r3, [r3, #12]
 8010a94:	4a05      	ldr	r2, [pc, #20]	; (8010aac <tcp_receive+0x724>)
 8010a96:	6812      	ldr	r2, [r2, #0]
 8010a98:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8010a9a:	e025      	b.n	8010ae8 <tcp_receive+0x760>
 8010a9c:	20004238 	.word	0x20004238
 8010aa0:	2000423c 	.word	0x2000423c
 8010aa4:	2000ac38 	.word	0x2000ac38
 8010aa8:	2000423e 	.word	0x2000423e
 8010aac:	20004234 	.word	0x20004234
 8010ab0:	20004214 	.word	0x20004214
 8010ab4:	0801a2c0 	.word	0x0801a2c0
 8010ab8:	0801a548 	.word	0x0801a548
 8010abc:	0801a304 	.word	0x0801a304
 8010ac0:	0801a558 	.word	0x0801a558
 8010ac4:	0801a568 	.word	0x0801a568
 8010ac8:	0801a578 	.word	0x0801a578
    }
    else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 8010acc:	4b87      	ldr	r3, [pc, #540]	; (8010cec <tcp_receive+0x964>)
 8010ace:	681a      	ldr	r2, [r3, #0]
 8010ad0:	687b      	ldr	r3, [r7, #4]
 8010ad2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010ad4:	1ad3      	subs	r3, r2, r3
 8010ad6:	2b00      	cmp	r3, #0
 8010ad8:	da06      	bge.n	8010ae8 <tcp_receive+0x760>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 8010ada:	687b      	ldr	r3, [r7, #4]
 8010adc:	7e9b      	ldrb	r3, [r3, #26]
 8010ade:	f043 0302 	orr.w	r3, r3, #2
 8010ae2:	b2da      	uxtb	r2, r3
 8010ae4:	687b      	ldr	r3, [r7, #4]
 8010ae6:	769a      	strb	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8010ae8:	4b80      	ldr	r3, [pc, #512]	; (8010cec <tcp_receive+0x964>)
 8010aea:	681a      	ldr	r2, [r3, #0]
 8010aec:	687b      	ldr	r3, [r7, #4]
 8010aee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010af0:	1ad3      	subs	r3, r2, r3
 8010af2:	2b00      	cmp	r3, #0
 8010af4:	f2c0 8410 	blt.w	8011318 <tcp_receive+0xf90>
 8010af8:	4b7c      	ldr	r3, [pc, #496]	; (8010cec <tcp_receive+0x964>)
 8010afa:	681a      	ldr	r2, [r3, #0]
 8010afc:	687b      	ldr	r3, [r7, #4]
 8010afe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010b00:	6879      	ldr	r1, [r7, #4]
 8010b02:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8010b04:	440b      	add	r3, r1
 8010b06:	1ad3      	subs	r3, r2, r3
 8010b08:	3301      	adds	r3, #1
 8010b0a:	2b00      	cmp	r3, #0
 8010b0c:	f300 8404 	bgt.w	8011318 <tcp_receive+0xf90>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 8010b10:	687b      	ldr	r3, [r7, #4]
 8010b12:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8010b14:	4b75      	ldr	r3, [pc, #468]	; (8010cec <tcp_receive+0x964>)
 8010b16:	681b      	ldr	r3, [r3, #0]
 8010b18:	429a      	cmp	r2, r3
 8010b1a:	f040 8287 	bne.w	801102c <tcp_receive+0xca4>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 8010b1e:	4b74      	ldr	r3, [pc, #464]	; (8010cf0 <tcp_receive+0x968>)
 8010b20:	891c      	ldrh	r4, [r3, #8]
 8010b22:	4b73      	ldr	r3, [pc, #460]	; (8010cf0 <tcp_receive+0x968>)
 8010b24:	68db      	ldr	r3, [r3, #12]
 8010b26:	899b      	ldrh	r3, [r3, #12]
 8010b28:	b29b      	uxth	r3, r3
 8010b2a:	4618      	mov	r0, r3
 8010b2c:	f7fb fa6e 	bl	800c00c <lwip_htons>
 8010b30:	4603      	mov	r3, r0
 8010b32:	f003 0303 	and.w	r3, r3, #3
 8010b36:	2b00      	cmp	r3, #0
 8010b38:	d001      	beq.n	8010b3e <tcp_receive+0x7b6>
 8010b3a:	2301      	movs	r3, #1
 8010b3c:	e000      	b.n	8010b40 <tcp_receive+0x7b8>
 8010b3e:	2300      	movs	r3, #0
 8010b40:	4423      	add	r3, r4
 8010b42:	b29a      	uxth	r2, r3
 8010b44:	4b6b      	ldr	r3, [pc, #428]	; (8010cf4 <tcp_receive+0x96c>)
 8010b46:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 8010b48:	687b      	ldr	r3, [r7, #4]
 8010b4a:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8010b4c:	4b69      	ldr	r3, [pc, #420]	; (8010cf4 <tcp_receive+0x96c>)
 8010b4e:	881b      	ldrh	r3, [r3, #0]
 8010b50:	429a      	cmp	r2, r3
 8010b52:	d26e      	bcs.n	8010c32 <tcp_receive+0x8aa>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8010b54:	4b66      	ldr	r3, [pc, #408]	; (8010cf0 <tcp_receive+0x968>)
 8010b56:	68db      	ldr	r3, [r3, #12]
 8010b58:	899b      	ldrh	r3, [r3, #12]
 8010b5a:	b29b      	uxth	r3, r3
 8010b5c:	4618      	mov	r0, r3
 8010b5e:	f7fb fa55 	bl	800c00c <lwip_htons>
 8010b62:	4603      	mov	r3, r0
 8010b64:	f003 0301 	and.w	r3, r3, #1
 8010b68:	2b00      	cmp	r3, #0
 8010b6a:	d01b      	beq.n	8010ba4 <tcp_receive+0x81c>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 8010b6c:	4b60      	ldr	r3, [pc, #384]	; (8010cf0 <tcp_receive+0x968>)
 8010b6e:	68db      	ldr	r3, [r3, #12]
 8010b70:	899b      	ldrh	r3, [r3, #12]
 8010b72:	b29b      	uxth	r3, r3
 8010b74:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8010b78:	b29c      	uxth	r4, r3
 8010b7a:	4b5d      	ldr	r3, [pc, #372]	; (8010cf0 <tcp_receive+0x968>)
 8010b7c:	68db      	ldr	r3, [r3, #12]
 8010b7e:	899b      	ldrh	r3, [r3, #12]
 8010b80:	b29b      	uxth	r3, r3
 8010b82:	4618      	mov	r0, r3
 8010b84:	f7fb fa42 	bl	800c00c <lwip_htons>
 8010b88:	4603      	mov	r3, r0
 8010b8a:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8010b8e:	b29b      	uxth	r3, r3
 8010b90:	4618      	mov	r0, r3
 8010b92:	f7fb fa3b 	bl	800c00c <lwip_htons>
 8010b96:	4603      	mov	r3, r0
 8010b98:	461a      	mov	r2, r3
 8010b9a:	4b55      	ldr	r3, [pc, #340]	; (8010cf0 <tcp_receive+0x968>)
 8010b9c:	68db      	ldr	r3, [r3, #12]
 8010b9e:	4322      	orrs	r2, r4
 8010ba0:	b292      	uxth	r2, r2
 8010ba2:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 8010ba4:	687b      	ldr	r3, [r7, #4]
 8010ba6:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8010ba8:	4b51      	ldr	r3, [pc, #324]	; (8010cf0 <tcp_receive+0x968>)
 8010baa:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8010bac:	4b50      	ldr	r3, [pc, #320]	; (8010cf0 <tcp_receive+0x968>)
 8010bae:	68db      	ldr	r3, [r3, #12]
 8010bb0:	899b      	ldrh	r3, [r3, #12]
 8010bb2:	b29b      	uxth	r3, r3
 8010bb4:	4618      	mov	r0, r3
 8010bb6:	f7fb fa29 	bl	800c00c <lwip_htons>
 8010bba:	4603      	mov	r3, r0
 8010bbc:	f003 0302 	and.w	r3, r3, #2
 8010bc0:	2b00      	cmp	r3, #0
 8010bc2:	d005      	beq.n	8010bd0 <tcp_receive+0x848>
            inseg.len -= 1;
 8010bc4:	4b4a      	ldr	r3, [pc, #296]	; (8010cf0 <tcp_receive+0x968>)
 8010bc6:	891b      	ldrh	r3, [r3, #8]
 8010bc8:	3b01      	subs	r3, #1
 8010bca:	b29a      	uxth	r2, r3
 8010bcc:	4b48      	ldr	r3, [pc, #288]	; (8010cf0 <tcp_receive+0x968>)
 8010bce:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 8010bd0:	4b47      	ldr	r3, [pc, #284]	; (8010cf0 <tcp_receive+0x968>)
 8010bd2:	685a      	ldr	r2, [r3, #4]
 8010bd4:	4b46      	ldr	r3, [pc, #280]	; (8010cf0 <tcp_receive+0x968>)
 8010bd6:	891b      	ldrh	r3, [r3, #8]
 8010bd8:	4619      	mov	r1, r3
 8010bda:	4610      	mov	r0, r2
 8010bdc:	f7fc fa44 	bl	800d068 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 8010be0:	4b43      	ldr	r3, [pc, #268]	; (8010cf0 <tcp_receive+0x968>)
 8010be2:	891c      	ldrh	r4, [r3, #8]
 8010be4:	4b42      	ldr	r3, [pc, #264]	; (8010cf0 <tcp_receive+0x968>)
 8010be6:	68db      	ldr	r3, [r3, #12]
 8010be8:	899b      	ldrh	r3, [r3, #12]
 8010bea:	b29b      	uxth	r3, r3
 8010bec:	4618      	mov	r0, r3
 8010bee:	f7fb fa0d 	bl	800c00c <lwip_htons>
 8010bf2:	4603      	mov	r3, r0
 8010bf4:	f003 0303 	and.w	r3, r3, #3
 8010bf8:	2b00      	cmp	r3, #0
 8010bfa:	d001      	beq.n	8010c00 <tcp_receive+0x878>
 8010bfc:	2301      	movs	r3, #1
 8010bfe:	e000      	b.n	8010c02 <tcp_receive+0x87a>
 8010c00:	2300      	movs	r3, #0
 8010c02:	4423      	add	r3, r4
 8010c04:	b29a      	uxth	r2, r3
 8010c06:	4b3b      	ldr	r3, [pc, #236]	; (8010cf4 <tcp_receive+0x96c>)
 8010c08:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8010c0a:	4b3a      	ldr	r3, [pc, #232]	; (8010cf4 <tcp_receive+0x96c>)
 8010c0c:	881b      	ldrh	r3, [r3, #0]
 8010c0e:	461a      	mov	r2, r3
 8010c10:	4b36      	ldr	r3, [pc, #216]	; (8010cec <tcp_receive+0x964>)
 8010c12:	681b      	ldr	r3, [r3, #0]
 8010c14:	441a      	add	r2, r3
 8010c16:	687b      	ldr	r3, [r7, #4]
 8010c18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010c1a:	6879      	ldr	r1, [r7, #4]
 8010c1c:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8010c1e:	440b      	add	r3, r1
 8010c20:	429a      	cmp	r2, r3
 8010c22:	d006      	beq.n	8010c32 <tcp_receive+0x8aa>
 8010c24:	4b34      	ldr	r3, [pc, #208]	; (8010cf8 <tcp_receive+0x970>)
 8010c26:	f240 527f 	movw	r2, #1407	; 0x57f
 8010c2a:	4934      	ldr	r1, [pc, #208]	; (8010cfc <tcp_receive+0x974>)
 8010c2c:	4834      	ldr	r0, [pc, #208]	; (8010d00 <tcp_receive+0x978>)
 8010c2e:	f007 fd0b 	bl	8018648 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 8010c32:	687b      	ldr	r3, [r7, #4]
 8010c34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010c36:	2b00      	cmp	r3, #0
 8010c38:	f000 80e1 	beq.w	8010dfe <tcp_receive+0xa76>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8010c3c:	4b2c      	ldr	r3, [pc, #176]	; (8010cf0 <tcp_receive+0x968>)
 8010c3e:	68db      	ldr	r3, [r3, #12]
 8010c40:	899b      	ldrh	r3, [r3, #12]
 8010c42:	b29b      	uxth	r3, r3
 8010c44:	4618      	mov	r0, r3
 8010c46:	f7fb f9e1 	bl	800c00c <lwip_htons>
 8010c4a:	4603      	mov	r3, r0
 8010c4c:	f003 0301 	and.w	r3, r3, #1
 8010c50:	2b00      	cmp	r3, #0
 8010c52:	d010      	beq.n	8010c76 <tcp_receive+0x8ee>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 8010c54:	e00a      	b.n	8010c6c <tcp_receive+0x8e4>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 8010c56:	687b      	ldr	r3, [r7, #4]
 8010c58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010c5a:	60bb      	str	r3, [r7, #8]
              pcb->ooseq = pcb->ooseq->next;
 8010c5c:	687b      	ldr	r3, [r7, #4]
 8010c5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010c60:	681a      	ldr	r2, [r3, #0]
 8010c62:	687b      	ldr	r3, [r7, #4]
 8010c64:	671a      	str	r2, [r3, #112]	; 0x70
              tcp_seg_free(old_ooseq);
 8010c66:	68b8      	ldr	r0, [r7, #8]
 8010c68:	f7fd fe65 	bl	800e936 <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 8010c6c:	687b      	ldr	r3, [r7, #4]
 8010c6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010c70:	2b00      	cmp	r3, #0
 8010c72:	d1f0      	bne.n	8010c56 <tcp_receive+0x8ce>
 8010c74:	e0c3      	b.n	8010dfe <tcp_receive+0xa76>
            }
          } else {
            next = pcb->ooseq;
 8010c76:	687b      	ldr	r3, [r7, #4]
 8010c78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010c7a:	62fb      	str	r3, [r7, #44]	; 0x2c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 8010c7c:	e04f      	b.n	8010d1e <tcp_receive+0x996>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8010c7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010c80:	68db      	ldr	r3, [r3, #12]
 8010c82:	899b      	ldrh	r3, [r3, #12]
 8010c84:	b29b      	uxth	r3, r3
 8010c86:	4618      	mov	r0, r3
 8010c88:	f7fb f9c0 	bl	800c00c <lwip_htons>
 8010c8c:	4603      	mov	r3, r0
 8010c8e:	f003 0301 	and.w	r3, r3, #1
 8010c92:	2b00      	cmp	r3, #0
 8010c94:	d03b      	beq.n	8010d0e <tcp_receive+0x986>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 8010c96:	4b16      	ldr	r3, [pc, #88]	; (8010cf0 <tcp_receive+0x968>)
 8010c98:	68db      	ldr	r3, [r3, #12]
 8010c9a:	899b      	ldrh	r3, [r3, #12]
 8010c9c:	b29b      	uxth	r3, r3
 8010c9e:	4618      	mov	r0, r3
 8010ca0:	f7fb f9b4 	bl	800c00c <lwip_htons>
 8010ca4:	4603      	mov	r3, r0
 8010ca6:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8010caa:	2b00      	cmp	r3, #0
 8010cac:	d12f      	bne.n	8010d0e <tcp_receive+0x986>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 8010cae:	4b10      	ldr	r3, [pc, #64]	; (8010cf0 <tcp_receive+0x968>)
 8010cb0:	68db      	ldr	r3, [r3, #12]
 8010cb2:	899b      	ldrh	r3, [r3, #12]
 8010cb4:	b29c      	uxth	r4, r3
 8010cb6:	2001      	movs	r0, #1
 8010cb8:	f7fb f9a8 	bl	800c00c <lwip_htons>
 8010cbc:	4603      	mov	r3, r0
 8010cbe:	461a      	mov	r2, r3
 8010cc0:	4b0b      	ldr	r3, [pc, #44]	; (8010cf0 <tcp_receive+0x968>)
 8010cc2:	68db      	ldr	r3, [r3, #12]
 8010cc4:	4322      	orrs	r2, r4
 8010cc6:	b292      	uxth	r2, r2
 8010cc8:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 8010cca:	4b09      	ldr	r3, [pc, #36]	; (8010cf0 <tcp_receive+0x968>)
 8010ccc:	891c      	ldrh	r4, [r3, #8]
 8010cce:	4b08      	ldr	r3, [pc, #32]	; (8010cf0 <tcp_receive+0x968>)
 8010cd0:	68db      	ldr	r3, [r3, #12]
 8010cd2:	899b      	ldrh	r3, [r3, #12]
 8010cd4:	b29b      	uxth	r3, r3
 8010cd6:	4618      	mov	r0, r3
 8010cd8:	f7fb f998 	bl	800c00c <lwip_htons>
 8010cdc:	4603      	mov	r3, r0
 8010cde:	f003 0303 	and.w	r3, r3, #3
 8010ce2:	2b00      	cmp	r3, #0
 8010ce4:	d00e      	beq.n	8010d04 <tcp_receive+0x97c>
 8010ce6:	2301      	movs	r3, #1
 8010ce8:	e00d      	b.n	8010d06 <tcp_receive+0x97e>
 8010cea:	bf00      	nop
 8010cec:	20004234 	.word	0x20004234
 8010cf0:	20004214 	.word	0x20004214
 8010cf4:	2000423e 	.word	0x2000423e
 8010cf8:	0801a2c0 	.word	0x0801a2c0
 8010cfc:	0801a58c 	.word	0x0801a58c
 8010d00:	0801a304 	.word	0x0801a304
 8010d04:	2300      	movs	r3, #0
 8010d06:	4423      	add	r3, r4
 8010d08:	b29a      	uxth	r2, r3
 8010d0a:	4b95      	ldr	r3, [pc, #596]	; (8010f60 <tcp_receive+0xbd8>)
 8010d0c:	801a      	strh	r2, [r3, #0]
              }
              prev = next;
 8010d0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010d10:	62bb      	str	r3, [r7, #40]	; 0x28
              next = next->next;
 8010d12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010d14:	681b      	ldr	r3, [r3, #0]
 8010d16:	62fb      	str	r3, [r7, #44]	; 0x2c
              tcp_seg_free(prev);
 8010d18:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010d1a:	f7fd fe0c 	bl	800e936 <tcp_seg_free>
            while (next &&
 8010d1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010d20:	2b00      	cmp	r3, #0
 8010d22:	d00e      	beq.n	8010d42 <tcp_receive+0x9ba>
                   TCP_SEQ_GEQ(seqno + tcplen,
 8010d24:	4b8e      	ldr	r3, [pc, #568]	; (8010f60 <tcp_receive+0xbd8>)
 8010d26:	881b      	ldrh	r3, [r3, #0]
 8010d28:	461a      	mov	r2, r3
 8010d2a:	4b8e      	ldr	r3, [pc, #568]	; (8010f64 <tcp_receive+0xbdc>)
 8010d2c:	681b      	ldr	r3, [r3, #0]
 8010d2e:	441a      	add	r2, r3
 8010d30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010d32:	68db      	ldr	r3, [r3, #12]
 8010d34:	685b      	ldr	r3, [r3, #4]
 8010d36:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8010d38:	8909      	ldrh	r1, [r1, #8]
 8010d3a:	440b      	add	r3, r1
 8010d3c:	1ad3      	subs	r3, r2, r3
            while (next &&
 8010d3e:	2b00      	cmp	r3, #0
 8010d40:	da9d      	bge.n	8010c7e <tcp_receive+0x8f6>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 8010d42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010d44:	2b00      	cmp	r3, #0
 8010d46:	d057      	beq.n	8010df8 <tcp_receive+0xa70>
                TCP_SEQ_GT(seqno + tcplen,
 8010d48:	4b85      	ldr	r3, [pc, #532]	; (8010f60 <tcp_receive+0xbd8>)
 8010d4a:	881b      	ldrh	r3, [r3, #0]
 8010d4c:	461a      	mov	r2, r3
 8010d4e:	4b85      	ldr	r3, [pc, #532]	; (8010f64 <tcp_receive+0xbdc>)
 8010d50:	681b      	ldr	r3, [r3, #0]
 8010d52:	441a      	add	r2, r3
 8010d54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010d56:	68db      	ldr	r3, [r3, #12]
 8010d58:	685b      	ldr	r3, [r3, #4]
 8010d5a:	1ad3      	subs	r3, r2, r3
            if (next &&
 8010d5c:	2b00      	cmp	r3, #0
 8010d5e:	dd4b      	ble.n	8010df8 <tcp_receive+0xa70>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 8010d60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010d62:	68db      	ldr	r3, [r3, #12]
 8010d64:	685b      	ldr	r3, [r3, #4]
 8010d66:	b29a      	uxth	r2, r3
 8010d68:	4b7e      	ldr	r3, [pc, #504]	; (8010f64 <tcp_receive+0xbdc>)
 8010d6a:	681b      	ldr	r3, [r3, #0]
 8010d6c:	b29b      	uxth	r3, r3
 8010d6e:	1ad3      	subs	r3, r2, r3
 8010d70:	b29a      	uxth	r2, r3
 8010d72:	4b7d      	ldr	r3, [pc, #500]	; (8010f68 <tcp_receive+0xbe0>)
 8010d74:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8010d76:	4b7c      	ldr	r3, [pc, #496]	; (8010f68 <tcp_receive+0xbe0>)
 8010d78:	68db      	ldr	r3, [r3, #12]
 8010d7a:	899b      	ldrh	r3, [r3, #12]
 8010d7c:	b29b      	uxth	r3, r3
 8010d7e:	4618      	mov	r0, r3
 8010d80:	f7fb f944 	bl	800c00c <lwip_htons>
 8010d84:	4603      	mov	r3, r0
 8010d86:	f003 0302 	and.w	r3, r3, #2
 8010d8a:	2b00      	cmp	r3, #0
 8010d8c:	d005      	beq.n	8010d9a <tcp_receive+0xa12>
                inseg.len -= 1;
 8010d8e:	4b76      	ldr	r3, [pc, #472]	; (8010f68 <tcp_receive+0xbe0>)
 8010d90:	891b      	ldrh	r3, [r3, #8]
 8010d92:	3b01      	subs	r3, #1
 8010d94:	b29a      	uxth	r2, r3
 8010d96:	4b74      	ldr	r3, [pc, #464]	; (8010f68 <tcp_receive+0xbe0>)
 8010d98:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 8010d9a:	4b73      	ldr	r3, [pc, #460]	; (8010f68 <tcp_receive+0xbe0>)
 8010d9c:	685a      	ldr	r2, [r3, #4]
 8010d9e:	4b72      	ldr	r3, [pc, #456]	; (8010f68 <tcp_receive+0xbe0>)
 8010da0:	891b      	ldrh	r3, [r3, #8]
 8010da2:	4619      	mov	r1, r3
 8010da4:	4610      	mov	r0, r2
 8010da6:	f7fc f95f 	bl	800d068 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 8010daa:	4b6f      	ldr	r3, [pc, #444]	; (8010f68 <tcp_receive+0xbe0>)
 8010dac:	891c      	ldrh	r4, [r3, #8]
 8010dae:	4b6e      	ldr	r3, [pc, #440]	; (8010f68 <tcp_receive+0xbe0>)
 8010db0:	68db      	ldr	r3, [r3, #12]
 8010db2:	899b      	ldrh	r3, [r3, #12]
 8010db4:	b29b      	uxth	r3, r3
 8010db6:	4618      	mov	r0, r3
 8010db8:	f7fb f928 	bl	800c00c <lwip_htons>
 8010dbc:	4603      	mov	r3, r0
 8010dbe:	f003 0303 	and.w	r3, r3, #3
 8010dc2:	2b00      	cmp	r3, #0
 8010dc4:	d001      	beq.n	8010dca <tcp_receive+0xa42>
 8010dc6:	2301      	movs	r3, #1
 8010dc8:	e000      	b.n	8010dcc <tcp_receive+0xa44>
 8010dca:	2300      	movs	r3, #0
 8010dcc:	4423      	add	r3, r4
 8010dce:	b29a      	uxth	r2, r3
 8010dd0:	4b63      	ldr	r3, [pc, #396]	; (8010f60 <tcp_receive+0xbd8>)
 8010dd2:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 8010dd4:	4b62      	ldr	r3, [pc, #392]	; (8010f60 <tcp_receive+0xbd8>)
 8010dd6:	881b      	ldrh	r3, [r3, #0]
 8010dd8:	461a      	mov	r2, r3
 8010dda:	4b62      	ldr	r3, [pc, #392]	; (8010f64 <tcp_receive+0xbdc>)
 8010ddc:	681b      	ldr	r3, [r3, #0]
 8010dde:	441a      	add	r2, r3
 8010de0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010de2:	68db      	ldr	r3, [r3, #12]
 8010de4:	685b      	ldr	r3, [r3, #4]
 8010de6:	429a      	cmp	r2, r3
 8010de8:	d006      	beq.n	8010df8 <tcp_receive+0xa70>
 8010dea:	4b60      	ldr	r3, [pc, #384]	; (8010f6c <tcp_receive+0xbe4>)
 8010dec:	f240 52af 	movw	r2, #1455	; 0x5af
 8010df0:	495f      	ldr	r1, [pc, #380]	; (8010f70 <tcp_receive+0xbe8>)
 8010df2:	4860      	ldr	r0, [pc, #384]	; (8010f74 <tcp_receive+0xbec>)
 8010df4:	f007 fc28 	bl	8018648 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 8010df8:	687b      	ldr	r3, [r7, #4]
 8010dfa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010dfc:	671a      	str	r2, [r3, #112]	; 0x70
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 8010dfe:	4b58      	ldr	r3, [pc, #352]	; (8010f60 <tcp_receive+0xbd8>)
 8010e00:	881b      	ldrh	r3, [r3, #0]
 8010e02:	461a      	mov	r2, r3
 8010e04:	4b57      	ldr	r3, [pc, #348]	; (8010f64 <tcp_receive+0xbdc>)
 8010e06:	681b      	ldr	r3, [r3, #0]
 8010e08:	441a      	add	r2, r3
 8010e0a:	687b      	ldr	r3, [r7, #4]
 8010e0c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 8010e0e:	687b      	ldr	r3, [r7, #4]
 8010e10:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8010e12:	4b53      	ldr	r3, [pc, #332]	; (8010f60 <tcp_receive+0xbd8>)
 8010e14:	881b      	ldrh	r3, [r3, #0]
 8010e16:	429a      	cmp	r2, r3
 8010e18:	d206      	bcs.n	8010e28 <tcp_receive+0xaa0>
 8010e1a:	4b54      	ldr	r3, [pc, #336]	; (8010f6c <tcp_receive+0xbe4>)
 8010e1c:	f240 52b9 	movw	r2, #1465	; 0x5b9
 8010e20:	4955      	ldr	r1, [pc, #340]	; (8010f78 <tcp_receive+0xbf0>)
 8010e22:	4854      	ldr	r0, [pc, #336]	; (8010f74 <tcp_receive+0xbec>)
 8010e24:	f007 fc10 	bl	8018648 <iprintf>
        pcb->rcv_wnd -= tcplen;
 8010e28:	687b      	ldr	r3, [r7, #4]
 8010e2a:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8010e2c:	4b4c      	ldr	r3, [pc, #304]	; (8010f60 <tcp_receive+0xbd8>)
 8010e2e:	881b      	ldrh	r3, [r3, #0]
 8010e30:	1ad3      	subs	r3, r2, r3
 8010e32:	b29a      	uxth	r2, r3
 8010e34:	687b      	ldr	r3, [r7, #4]
 8010e36:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 8010e38:	6878      	ldr	r0, [r7, #4]
 8010e3a:	f7fd f8ef 	bl	800e01c <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 8010e3e:	4b4a      	ldr	r3, [pc, #296]	; (8010f68 <tcp_receive+0xbe0>)
 8010e40:	685b      	ldr	r3, [r3, #4]
 8010e42:	891b      	ldrh	r3, [r3, #8]
 8010e44:	2b00      	cmp	r3, #0
 8010e46:	d006      	beq.n	8010e56 <tcp_receive+0xace>
          recv_data = inseg.p;
 8010e48:	4b47      	ldr	r3, [pc, #284]	; (8010f68 <tcp_receive+0xbe0>)
 8010e4a:	685b      	ldr	r3, [r3, #4]
 8010e4c:	4a4b      	ldr	r2, [pc, #300]	; (8010f7c <tcp_receive+0xbf4>)
 8010e4e:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 8010e50:	4b45      	ldr	r3, [pc, #276]	; (8010f68 <tcp_receive+0xbe0>)
 8010e52:	2200      	movs	r2, #0
 8010e54:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8010e56:	4b44      	ldr	r3, [pc, #272]	; (8010f68 <tcp_receive+0xbe0>)
 8010e58:	68db      	ldr	r3, [r3, #12]
 8010e5a:	899b      	ldrh	r3, [r3, #12]
 8010e5c:	b29b      	uxth	r3, r3
 8010e5e:	4618      	mov	r0, r3
 8010e60:	f7fb f8d4 	bl	800c00c <lwip_htons>
 8010e64:	4603      	mov	r3, r0
 8010e66:	f003 0301 	and.w	r3, r3, #1
 8010e6a:	2b00      	cmp	r3, #0
 8010e6c:	f000 80b4 	beq.w	8010fd8 <tcp_receive+0xc50>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 8010e70:	4b43      	ldr	r3, [pc, #268]	; (8010f80 <tcp_receive+0xbf8>)
 8010e72:	781b      	ldrb	r3, [r3, #0]
 8010e74:	f043 0320 	orr.w	r3, r3, #32
 8010e78:	b2da      	uxtb	r2, r3
 8010e7a:	4b41      	ldr	r3, [pc, #260]	; (8010f80 <tcp_receive+0xbf8>)
 8010e7c:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 8010e7e:	e0ab      	b.n	8010fd8 <tcp_receive+0xc50>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          cseg = pcb->ooseq;
 8010e80:	687b      	ldr	r3, [r7, #4]
 8010e82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010e84:	60fb      	str	r3, [r7, #12]
          seqno = pcb->ooseq->tcphdr->seqno;
 8010e86:	687b      	ldr	r3, [r7, #4]
 8010e88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010e8a:	68db      	ldr	r3, [r3, #12]
 8010e8c:	685b      	ldr	r3, [r3, #4]
 8010e8e:	4a35      	ldr	r2, [pc, #212]	; (8010f64 <tcp_receive+0xbdc>)
 8010e90:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 8010e92:	68fb      	ldr	r3, [r7, #12]
 8010e94:	891b      	ldrh	r3, [r3, #8]
 8010e96:	461c      	mov	r4, r3
 8010e98:	68fb      	ldr	r3, [r7, #12]
 8010e9a:	68db      	ldr	r3, [r3, #12]
 8010e9c:	899b      	ldrh	r3, [r3, #12]
 8010e9e:	b29b      	uxth	r3, r3
 8010ea0:	4618      	mov	r0, r3
 8010ea2:	f7fb f8b3 	bl	800c00c <lwip_htons>
 8010ea6:	4603      	mov	r3, r0
 8010ea8:	f003 0303 	and.w	r3, r3, #3
 8010eac:	2b00      	cmp	r3, #0
 8010eae:	d001      	beq.n	8010eb4 <tcp_receive+0xb2c>
 8010eb0:	2301      	movs	r3, #1
 8010eb2:	e000      	b.n	8010eb6 <tcp_receive+0xb2e>
 8010eb4:	2300      	movs	r3, #0
 8010eb6:	191a      	adds	r2, r3, r4
 8010eb8:	687b      	ldr	r3, [r7, #4]
 8010eba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010ebc:	441a      	add	r2, r3
 8010ebe:	687b      	ldr	r3, [r7, #4]
 8010ec0:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 8010ec2:	687b      	ldr	r3, [r7, #4]
 8010ec4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8010ec6:	461c      	mov	r4, r3
 8010ec8:	68fb      	ldr	r3, [r7, #12]
 8010eca:	891b      	ldrh	r3, [r3, #8]
 8010ecc:	461d      	mov	r5, r3
 8010ece:	68fb      	ldr	r3, [r7, #12]
 8010ed0:	68db      	ldr	r3, [r3, #12]
 8010ed2:	899b      	ldrh	r3, [r3, #12]
 8010ed4:	b29b      	uxth	r3, r3
 8010ed6:	4618      	mov	r0, r3
 8010ed8:	f7fb f898 	bl	800c00c <lwip_htons>
 8010edc:	4603      	mov	r3, r0
 8010ede:	f003 0303 	and.w	r3, r3, #3
 8010ee2:	2b00      	cmp	r3, #0
 8010ee4:	d001      	beq.n	8010eea <tcp_receive+0xb62>
 8010ee6:	2301      	movs	r3, #1
 8010ee8:	e000      	b.n	8010eec <tcp_receive+0xb64>
 8010eea:	2300      	movs	r3, #0
 8010eec:	442b      	add	r3, r5
 8010eee:	429c      	cmp	r4, r3
 8010ef0:	d206      	bcs.n	8010f00 <tcp_receive+0xb78>
 8010ef2:	4b1e      	ldr	r3, [pc, #120]	; (8010f6c <tcp_receive+0xbe4>)
 8010ef4:	f240 52de 	movw	r2, #1502	; 0x5de
 8010ef8:	4922      	ldr	r1, [pc, #136]	; (8010f84 <tcp_receive+0xbfc>)
 8010efa:	481e      	ldr	r0, [pc, #120]	; (8010f74 <tcp_receive+0xbec>)
 8010efc:	f007 fba4 	bl	8018648 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 8010f00:	68fb      	ldr	r3, [r7, #12]
 8010f02:	891b      	ldrh	r3, [r3, #8]
 8010f04:	461c      	mov	r4, r3
 8010f06:	68fb      	ldr	r3, [r7, #12]
 8010f08:	68db      	ldr	r3, [r3, #12]
 8010f0a:	899b      	ldrh	r3, [r3, #12]
 8010f0c:	b29b      	uxth	r3, r3
 8010f0e:	4618      	mov	r0, r3
 8010f10:	f7fb f87c 	bl	800c00c <lwip_htons>
 8010f14:	4603      	mov	r3, r0
 8010f16:	f003 0303 	and.w	r3, r3, #3
 8010f1a:	2b00      	cmp	r3, #0
 8010f1c:	d001      	beq.n	8010f22 <tcp_receive+0xb9a>
 8010f1e:	2301      	movs	r3, #1
 8010f20:	e000      	b.n	8010f24 <tcp_receive+0xb9c>
 8010f22:	2300      	movs	r3, #0
 8010f24:	1919      	adds	r1, r3, r4
 8010f26:	687b      	ldr	r3, [r7, #4]
 8010f28:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8010f2a:	b28b      	uxth	r3, r1
 8010f2c:	1ad3      	subs	r3, r2, r3
 8010f2e:	b29a      	uxth	r2, r3
 8010f30:	687b      	ldr	r3, [r7, #4]
 8010f32:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 8010f34:	6878      	ldr	r0, [r7, #4]
 8010f36:	f7fd f871 	bl	800e01c <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 8010f3a:	68fb      	ldr	r3, [r7, #12]
 8010f3c:	685b      	ldr	r3, [r3, #4]
 8010f3e:	891b      	ldrh	r3, [r3, #8]
 8010f40:	2b00      	cmp	r3, #0
 8010f42:	d028      	beq.n	8010f96 <tcp_receive+0xc0e>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 8010f44:	4b0d      	ldr	r3, [pc, #52]	; (8010f7c <tcp_receive+0xbf4>)
 8010f46:	681b      	ldr	r3, [r3, #0]
 8010f48:	2b00      	cmp	r3, #0
 8010f4a:	d01d      	beq.n	8010f88 <tcp_receive+0xc00>
              pbuf_cat(recv_data, cseg->p);
 8010f4c:	4b0b      	ldr	r3, [pc, #44]	; (8010f7c <tcp_receive+0xbf4>)
 8010f4e:	681a      	ldr	r2, [r3, #0]
 8010f50:	68fb      	ldr	r3, [r7, #12]
 8010f52:	685b      	ldr	r3, [r3, #4]
 8010f54:	4619      	mov	r1, r3
 8010f56:	4610      	mov	r0, r2
 8010f58:	f7fc fad4 	bl	800d504 <pbuf_cat>
 8010f5c:	e018      	b.n	8010f90 <tcp_receive+0xc08>
 8010f5e:	bf00      	nop
 8010f60:	2000423e 	.word	0x2000423e
 8010f64:	20004234 	.word	0x20004234
 8010f68:	20004214 	.word	0x20004214
 8010f6c:	0801a2c0 	.word	0x0801a2c0
 8010f70:	0801a5c4 	.word	0x0801a5c4
 8010f74:	0801a304 	.word	0x0801a304
 8010f78:	0801a600 	.word	0x0801a600
 8010f7c:	20004244 	.word	0x20004244
 8010f80:	20004241 	.word	0x20004241
 8010f84:	0801a620 	.word	0x0801a620
            } else {
              recv_data = cseg->p;
 8010f88:	68fb      	ldr	r3, [r7, #12]
 8010f8a:	685b      	ldr	r3, [r3, #4]
 8010f8c:	4a71      	ldr	r2, [pc, #452]	; (8011154 <tcp_receive+0xdcc>)
 8010f8e:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 8010f90:	68fb      	ldr	r3, [r7, #12]
 8010f92:	2200      	movs	r2, #0
 8010f94:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8010f96:	68fb      	ldr	r3, [r7, #12]
 8010f98:	68db      	ldr	r3, [r3, #12]
 8010f9a:	899b      	ldrh	r3, [r3, #12]
 8010f9c:	b29b      	uxth	r3, r3
 8010f9e:	4618      	mov	r0, r3
 8010fa0:	f7fb f834 	bl	800c00c <lwip_htons>
 8010fa4:	4603      	mov	r3, r0
 8010fa6:	f003 0301 	and.w	r3, r3, #1
 8010faa:	2b00      	cmp	r3, #0
 8010fac:	d00d      	beq.n	8010fca <tcp_receive+0xc42>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 8010fae:	4b6a      	ldr	r3, [pc, #424]	; (8011158 <tcp_receive+0xdd0>)
 8010fb0:	781b      	ldrb	r3, [r3, #0]
 8010fb2:	f043 0320 	orr.w	r3, r3, #32
 8010fb6:	b2da      	uxtb	r2, r3
 8010fb8:	4b67      	ldr	r3, [pc, #412]	; (8011158 <tcp_receive+0xdd0>)
 8010fba:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 8010fbc:	687b      	ldr	r3, [r7, #4]
 8010fbe:	7d1b      	ldrb	r3, [r3, #20]
 8010fc0:	2b04      	cmp	r3, #4
 8010fc2:	d102      	bne.n	8010fca <tcp_receive+0xc42>
              pcb->state = CLOSE_WAIT;
 8010fc4:	687b      	ldr	r3, [r7, #4]
 8010fc6:	2207      	movs	r2, #7
 8010fc8:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 8010fca:	68fb      	ldr	r3, [r7, #12]
 8010fcc:	681a      	ldr	r2, [r3, #0]
 8010fce:	687b      	ldr	r3, [r7, #4]
 8010fd0:	671a      	str	r2, [r3, #112]	; 0x70
          tcp_seg_free(cseg);
 8010fd2:	68f8      	ldr	r0, [r7, #12]
 8010fd4:	f7fd fcaf 	bl	800e936 <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 8010fd8:	687b      	ldr	r3, [r7, #4]
 8010fda:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010fdc:	2b00      	cmp	r3, #0
 8010fde:	d008      	beq.n	8010ff2 <tcp_receive+0xc6a>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 8010fe0:	687b      	ldr	r3, [r7, #4]
 8010fe2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010fe4:	68db      	ldr	r3, [r3, #12]
 8010fe6:	685a      	ldr	r2, [r3, #4]
 8010fe8:	687b      	ldr	r3, [r7, #4]
 8010fea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 8010fec:	429a      	cmp	r2, r3
 8010fee:	f43f af47 	beq.w	8010e80 <tcp_receive+0xaf8>
        }
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 8010ff2:	687b      	ldr	r3, [r7, #4]
 8010ff4:	7e9b      	ldrb	r3, [r3, #26]
 8010ff6:	f003 0301 	and.w	r3, r3, #1
 8010ffa:	2b00      	cmp	r3, #0
 8010ffc:	d00e      	beq.n	801101c <tcp_receive+0xc94>
 8010ffe:	687b      	ldr	r3, [r7, #4]
 8011000:	7e9b      	ldrb	r3, [r3, #26]
 8011002:	f023 0301 	bic.w	r3, r3, #1
 8011006:	b2da      	uxtb	r2, r3
 8011008:	687b      	ldr	r3, [r7, #4]
 801100a:	769a      	strb	r2, [r3, #26]
 801100c:	687b      	ldr	r3, [r7, #4]
 801100e:	7e9b      	ldrb	r3, [r3, #26]
 8011010:	f043 0302 	orr.w	r3, r3, #2
 8011014:	b2da      	uxtb	r2, r3
 8011016:	687b      	ldr	r3, [r7, #4]
 8011018:	769a      	strb	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 801101a:	e181      	b.n	8011320 <tcp_receive+0xf98>
        tcp_ack(pcb);
 801101c:	687b      	ldr	r3, [r7, #4]
 801101e:	7e9b      	ldrb	r3, [r3, #26]
 8011020:	f043 0301 	orr.w	r3, r3, #1
 8011024:	b2da      	uxtb	r2, r3
 8011026:	687b      	ldr	r3, [r7, #4]
 8011028:	769a      	strb	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 801102a:	e179      	b.n	8011320 <tcp_receive+0xf98>
        }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      } else {
        /* We get here if the incoming segment is out-of-sequence. */
        tcp_send_empty_ack(pcb);
 801102c:	6878      	ldr	r0, [r7, #4]
 801102e:	f001 f8c5 	bl	80121bc <tcp_send_empty_ack>
#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 8011032:	687b      	ldr	r3, [r7, #4]
 8011034:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011036:	2b00      	cmp	r3, #0
 8011038:	d106      	bne.n	8011048 <tcp_receive+0xcc0>
          pcb->ooseq = tcp_seg_copy(&inseg);
 801103a:	4848      	ldr	r0, [pc, #288]	; (801115c <tcp_receive+0xdd4>)
 801103c:	f7fd fca2 	bl	800e984 <tcp_seg_copy>
 8011040:	4602      	mov	r2, r0
 8011042:	687b      	ldr	r3, [r7, #4]
 8011044:	671a      	str	r2, [r3, #112]	; 0x70
      if (pcb->rcv_nxt == seqno) {
 8011046:	e16b      	b.n	8011320 <tcp_receive+0xf98>

             If the incoming segment has the same sequence number as a
             segment on the ->ooseq queue, we discard the segment that
             contains less data. */

          prev = NULL;
 8011048:	2300      	movs	r3, #0
 801104a:	62bb      	str	r3, [r7, #40]	; 0x28
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 801104c:	687b      	ldr	r3, [r7, #4]
 801104e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011050:	62fb      	str	r3, [r7, #44]	; 0x2c
 8011052:	e150      	b.n	80112f6 <tcp_receive+0xf6e>
            if (seqno == next->tcphdr->seqno) {
 8011054:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011056:	68db      	ldr	r3, [r3, #12]
 8011058:	685a      	ldr	r2, [r3, #4]
 801105a:	4b41      	ldr	r3, [pc, #260]	; (8011160 <tcp_receive+0xdd8>)
 801105c:	681b      	ldr	r3, [r3, #0]
 801105e:	429a      	cmp	r2, r3
 8011060:	d11d      	bne.n	801109e <tcp_receive+0xd16>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 8011062:	4b3e      	ldr	r3, [pc, #248]	; (801115c <tcp_receive+0xdd4>)
 8011064:	891a      	ldrh	r2, [r3, #8]
 8011066:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011068:	891b      	ldrh	r3, [r3, #8]
 801106a:	429a      	cmp	r2, r3
 801106c:	f240 8148 	bls.w	8011300 <tcp_receive+0xf78>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                cseg = tcp_seg_copy(&inseg);
 8011070:	483a      	ldr	r0, [pc, #232]	; (801115c <tcp_receive+0xdd4>)
 8011072:	f7fd fc87 	bl	800e984 <tcp_seg_copy>
 8011076:	60f8      	str	r0, [r7, #12]
                if (cseg != NULL) {
 8011078:	68fb      	ldr	r3, [r7, #12]
 801107a:	2b00      	cmp	r3, #0
 801107c:	f000 8142 	beq.w	8011304 <tcp_receive+0xf7c>
                  if (prev != NULL) {
 8011080:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011082:	2b00      	cmp	r3, #0
 8011084:	d003      	beq.n	801108e <tcp_receive+0xd06>
                    prev->next = cseg;
 8011086:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011088:	68fa      	ldr	r2, [r7, #12]
 801108a:	601a      	str	r2, [r3, #0]
 801108c:	e002      	b.n	8011094 <tcp_receive+0xd0c>
                  } else {
                    pcb->ooseq = cseg;
 801108e:	687b      	ldr	r3, [r7, #4]
 8011090:	68fa      	ldr	r2, [r7, #12]
 8011092:	671a      	str	r2, [r3, #112]	; 0x70
                  }
                  tcp_oos_insert_segment(cseg, next);
 8011094:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8011096:	68f8      	ldr	r0, [r7, #12]
 8011098:	f7ff f900 	bl	801029c <tcp_oos_insert_segment>
                }
                break;
 801109c:	e132      	b.n	8011304 <tcp_receive+0xf7c>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 801109e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80110a0:	2b00      	cmp	r3, #0
 80110a2:	d117      	bne.n	80110d4 <tcp_receive+0xd4c>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 80110a4:	4b2e      	ldr	r3, [pc, #184]	; (8011160 <tcp_receive+0xdd8>)
 80110a6:	681a      	ldr	r2, [r3, #0]
 80110a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80110aa:	68db      	ldr	r3, [r3, #12]
 80110ac:	685b      	ldr	r3, [r3, #4]
 80110ae:	1ad3      	subs	r3, r2, r3
 80110b0:	2b00      	cmp	r3, #0
 80110b2:	da57      	bge.n	8011164 <tcp_receive+0xddc>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  cseg = tcp_seg_copy(&inseg);
 80110b4:	4829      	ldr	r0, [pc, #164]	; (801115c <tcp_receive+0xdd4>)
 80110b6:	f7fd fc65 	bl	800e984 <tcp_seg_copy>
 80110ba:	60f8      	str	r0, [r7, #12]
                  if (cseg != NULL) {
 80110bc:	68fb      	ldr	r3, [r7, #12]
 80110be:	2b00      	cmp	r3, #0
 80110c0:	f000 8122 	beq.w	8011308 <tcp_receive+0xf80>
                    pcb->ooseq = cseg;
 80110c4:	687b      	ldr	r3, [r7, #4]
 80110c6:	68fa      	ldr	r2, [r7, #12]
 80110c8:	671a      	str	r2, [r3, #112]	; 0x70
                    tcp_oos_insert_segment(cseg, next);
 80110ca:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80110cc:	68f8      	ldr	r0, [r7, #12]
 80110ce:	f7ff f8e5 	bl	801029c <tcp_oos_insert_segment>
                  }
                  break;
 80110d2:	e119      	b.n	8011308 <tcp_receive+0xf80>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno+1, next->tcphdr->seqno-1)) {
 80110d4:	4b22      	ldr	r3, [pc, #136]	; (8011160 <tcp_receive+0xdd8>)
 80110d6:	681a      	ldr	r2, [r3, #0]
 80110d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80110da:	68db      	ldr	r3, [r3, #12]
 80110dc:	685b      	ldr	r3, [r3, #4]
 80110de:	1ad3      	subs	r3, r2, r3
 80110e0:	3b01      	subs	r3, #1
 80110e2:	2b00      	cmp	r3, #0
 80110e4:	db3e      	blt.n	8011164 <tcp_receive+0xddc>
 80110e6:	4b1e      	ldr	r3, [pc, #120]	; (8011160 <tcp_receive+0xdd8>)
 80110e8:	681a      	ldr	r2, [r3, #0]
 80110ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80110ec:	68db      	ldr	r3, [r3, #12]
 80110ee:	685b      	ldr	r3, [r3, #4]
 80110f0:	1ad3      	subs	r3, r2, r3
 80110f2:	3301      	adds	r3, #1
 80110f4:	2b00      	cmp	r3, #0
 80110f6:	dc35      	bgt.n	8011164 <tcp_receive+0xddc>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  cseg = tcp_seg_copy(&inseg);
 80110f8:	4818      	ldr	r0, [pc, #96]	; (801115c <tcp_receive+0xdd4>)
 80110fa:	f7fd fc43 	bl	800e984 <tcp_seg_copy>
 80110fe:	60f8      	str	r0, [r7, #12]
                  if (cseg != NULL) {
 8011100:	68fb      	ldr	r3, [r7, #12]
 8011102:	2b00      	cmp	r3, #0
 8011104:	f000 8102 	beq.w	801130c <tcp_receive+0xf84>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 8011108:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801110a:	68db      	ldr	r3, [r3, #12]
 801110c:	685b      	ldr	r3, [r3, #4]
 801110e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8011110:	8912      	ldrh	r2, [r2, #8]
 8011112:	441a      	add	r2, r3
 8011114:	4b12      	ldr	r3, [pc, #72]	; (8011160 <tcp_receive+0xdd8>)
 8011116:	681b      	ldr	r3, [r3, #0]
 8011118:	1ad3      	subs	r3, r2, r3
 801111a:	2b00      	cmp	r3, #0
 801111c:	dd12      	ble.n	8011144 <tcp_receive+0xdbc>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 801111e:	4b10      	ldr	r3, [pc, #64]	; (8011160 <tcp_receive+0xdd8>)
 8011120:	681b      	ldr	r3, [r3, #0]
 8011122:	b29a      	uxth	r2, r3
 8011124:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011126:	68db      	ldr	r3, [r3, #12]
 8011128:	685b      	ldr	r3, [r3, #4]
 801112a:	b29b      	uxth	r3, r3
 801112c:	1ad3      	subs	r3, r2, r3
 801112e:	b29a      	uxth	r2, r3
 8011130:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011132:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 8011134:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011136:	685a      	ldr	r2, [r3, #4]
 8011138:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801113a:	891b      	ldrh	r3, [r3, #8]
 801113c:	4619      	mov	r1, r3
 801113e:	4610      	mov	r0, r2
 8011140:	f7fb ff92 	bl	800d068 <pbuf_realloc>
                    }
                    prev->next = cseg;
 8011144:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011146:	68fa      	ldr	r2, [r7, #12]
 8011148:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 801114a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801114c:	68f8      	ldr	r0, [r7, #12]
 801114e:	f7ff f8a5 	bl	801029c <tcp_oos_insert_segment>
                  }
                  break;
 8011152:	e0db      	b.n	801130c <tcp_receive+0xf84>
 8011154:	20004244 	.word	0x20004244
 8011158:	20004241 	.word	0x20004241
 801115c:	20004214 	.word	0x20004214
 8011160:	20004234 	.word	0x20004234
                }
              }
              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 8011164:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011166:	681b      	ldr	r3, [r3, #0]
 8011168:	2b00      	cmp	r3, #0
 801116a:	f040 80bf 	bne.w	80112ec <tcp_receive+0xf64>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 801116e:	4b7c      	ldr	r3, [pc, #496]	; (8011360 <tcp_receive+0xfd8>)
 8011170:	681a      	ldr	r2, [r3, #0]
 8011172:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011174:	68db      	ldr	r3, [r3, #12]
 8011176:	685b      	ldr	r3, [r3, #4]
 8011178:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 801117a:	2b00      	cmp	r3, #0
 801117c:	f340 80b6 	ble.w	80112ec <tcp_receive+0xf64>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8011180:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011182:	68db      	ldr	r3, [r3, #12]
 8011184:	899b      	ldrh	r3, [r3, #12]
 8011186:	b29b      	uxth	r3, r3
 8011188:	4618      	mov	r0, r3
 801118a:	f7fa ff3f 	bl	800c00c <lwip_htons>
 801118e:	4603      	mov	r3, r0
 8011190:	f003 0301 	and.w	r3, r3, #1
 8011194:	2b00      	cmp	r3, #0
 8011196:	f040 80bb 	bne.w	8011310 <tcp_receive+0xf88>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 801119a:	4872      	ldr	r0, [pc, #456]	; (8011364 <tcp_receive+0xfdc>)
 801119c:	f7fd fbf2 	bl	800e984 <tcp_seg_copy>
 80111a0:	4602      	mov	r2, r0
 80111a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80111a4:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 80111a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80111a8:	681b      	ldr	r3, [r3, #0]
 80111aa:	2b00      	cmp	r3, #0
 80111ac:	f000 80b2 	beq.w	8011314 <tcp_receive+0xf8c>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 80111b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80111b2:	68db      	ldr	r3, [r3, #12]
 80111b4:	685b      	ldr	r3, [r3, #4]
 80111b6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80111b8:	8912      	ldrh	r2, [r2, #8]
 80111ba:	441a      	add	r2, r3
 80111bc:	4b68      	ldr	r3, [pc, #416]	; (8011360 <tcp_receive+0xfd8>)
 80111be:	681b      	ldr	r3, [r3, #0]
 80111c0:	1ad3      	subs	r3, r2, r3
 80111c2:	2b00      	cmp	r3, #0
 80111c4:	dd12      	ble.n	80111ec <tcp_receive+0xe64>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 80111c6:	4b66      	ldr	r3, [pc, #408]	; (8011360 <tcp_receive+0xfd8>)
 80111c8:	681b      	ldr	r3, [r3, #0]
 80111ca:	b29a      	uxth	r2, r3
 80111cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80111ce:	68db      	ldr	r3, [r3, #12]
 80111d0:	685b      	ldr	r3, [r3, #4]
 80111d2:	b29b      	uxth	r3, r3
 80111d4:	1ad3      	subs	r3, r2, r3
 80111d6:	b29a      	uxth	r2, r3
 80111d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80111da:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 80111dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80111de:	685a      	ldr	r2, [r3, #4]
 80111e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80111e2:	891b      	ldrh	r3, [r3, #8]
 80111e4:	4619      	mov	r1, r3
 80111e6:	4610      	mov	r0, r2
 80111e8:	f7fb ff3e 	bl	800d068 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 80111ec:	4b5e      	ldr	r3, [pc, #376]	; (8011368 <tcp_receive+0xfe0>)
 80111ee:	881b      	ldrh	r3, [r3, #0]
 80111f0:	461a      	mov	r2, r3
 80111f2:	4b5b      	ldr	r3, [pc, #364]	; (8011360 <tcp_receive+0xfd8>)
 80111f4:	681b      	ldr	r3, [r3, #0]
 80111f6:	441a      	add	r2, r3
 80111f8:	687b      	ldr	r3, [r7, #4]
 80111fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80111fc:	6879      	ldr	r1, [r7, #4]
 80111fe:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8011200:	440b      	add	r3, r1
 8011202:	1ad3      	subs	r3, r2, r3
 8011204:	2b00      	cmp	r3, #0
 8011206:	f340 8085 	ble.w	8011314 <tcp_receive+0xf8c>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 801120a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801120c:	681b      	ldr	r3, [r3, #0]
 801120e:	68db      	ldr	r3, [r3, #12]
 8011210:	899b      	ldrh	r3, [r3, #12]
 8011212:	b29b      	uxth	r3, r3
 8011214:	4618      	mov	r0, r3
 8011216:	f7fa fef9 	bl	800c00c <lwip_htons>
 801121a:	4603      	mov	r3, r0
 801121c:	f003 0301 	and.w	r3, r3, #1
 8011220:	2b00      	cmp	r3, #0
 8011222:	d01e      	beq.n	8011262 <tcp_receive+0xeda>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 8011224:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011226:	681b      	ldr	r3, [r3, #0]
 8011228:	68db      	ldr	r3, [r3, #12]
 801122a:	899b      	ldrh	r3, [r3, #12]
 801122c:	b29b      	uxth	r3, r3
 801122e:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8011232:	b29c      	uxth	r4, r3
 8011234:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011236:	681b      	ldr	r3, [r3, #0]
 8011238:	68db      	ldr	r3, [r3, #12]
 801123a:	899b      	ldrh	r3, [r3, #12]
 801123c:	b29b      	uxth	r3, r3
 801123e:	4618      	mov	r0, r3
 8011240:	f7fa fee4 	bl	800c00c <lwip_htons>
 8011244:	4603      	mov	r3, r0
 8011246:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 801124a:	b29b      	uxth	r3, r3
 801124c:	4618      	mov	r0, r3
 801124e:	f7fa fedd 	bl	800c00c <lwip_htons>
 8011252:	4603      	mov	r3, r0
 8011254:	461a      	mov	r2, r3
 8011256:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011258:	681b      	ldr	r3, [r3, #0]
 801125a:	68db      	ldr	r3, [r3, #12]
 801125c:	4322      	orrs	r2, r4
 801125e:	b292      	uxth	r2, r2
 8011260:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 8011262:	687b      	ldr	r3, [r7, #4]
 8011264:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011266:	b29a      	uxth	r2, r3
 8011268:	687b      	ldr	r3, [r7, #4]
 801126a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801126c:	4413      	add	r3, r2
 801126e:	b299      	uxth	r1, r3
 8011270:	4b3b      	ldr	r3, [pc, #236]	; (8011360 <tcp_receive+0xfd8>)
 8011272:	681b      	ldr	r3, [r3, #0]
 8011274:	b29a      	uxth	r2, r3
 8011276:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011278:	681b      	ldr	r3, [r3, #0]
 801127a:	1a8a      	subs	r2, r1, r2
 801127c:	b292      	uxth	r2, r2
 801127e:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 8011280:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011282:	681b      	ldr	r3, [r3, #0]
 8011284:	685a      	ldr	r2, [r3, #4]
 8011286:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011288:	681b      	ldr	r3, [r3, #0]
 801128a:	891b      	ldrh	r3, [r3, #8]
 801128c:	4619      	mov	r1, r3
 801128e:	4610      	mov	r0, r2
 8011290:	f7fb feea 	bl	800d068 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 8011294:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011296:	681b      	ldr	r3, [r3, #0]
 8011298:	891c      	ldrh	r4, [r3, #8]
 801129a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801129c:	681b      	ldr	r3, [r3, #0]
 801129e:	68db      	ldr	r3, [r3, #12]
 80112a0:	899b      	ldrh	r3, [r3, #12]
 80112a2:	b29b      	uxth	r3, r3
 80112a4:	4618      	mov	r0, r3
 80112a6:	f7fa feb1 	bl	800c00c <lwip_htons>
 80112aa:	4603      	mov	r3, r0
 80112ac:	f003 0303 	and.w	r3, r3, #3
 80112b0:	2b00      	cmp	r3, #0
 80112b2:	d001      	beq.n	80112b8 <tcp_receive+0xf30>
 80112b4:	2301      	movs	r3, #1
 80112b6:	e000      	b.n	80112ba <tcp_receive+0xf32>
 80112b8:	2300      	movs	r3, #0
 80112ba:	4423      	add	r3, r4
 80112bc:	b29a      	uxth	r2, r3
 80112be:	4b2a      	ldr	r3, [pc, #168]	; (8011368 <tcp_receive+0xfe0>)
 80112c0:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 80112c2:	4b29      	ldr	r3, [pc, #164]	; (8011368 <tcp_receive+0xfe0>)
 80112c4:	881b      	ldrh	r3, [r3, #0]
 80112c6:	461a      	mov	r2, r3
 80112c8:	4b25      	ldr	r3, [pc, #148]	; (8011360 <tcp_receive+0xfd8>)
 80112ca:	681b      	ldr	r3, [r3, #0]
 80112cc:	441a      	add	r2, r3
 80112ce:	687b      	ldr	r3, [r7, #4]
 80112d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80112d2:	6879      	ldr	r1, [r7, #4]
 80112d4:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80112d6:	440b      	add	r3, r1
 80112d8:	429a      	cmp	r2, r3
 80112da:	d01b      	beq.n	8011314 <tcp_receive+0xf8c>
 80112dc:	4b23      	ldr	r3, [pc, #140]	; (801136c <tcp_receive+0xfe4>)
 80112de:	f240 627b 	movw	r2, #1659	; 0x67b
 80112e2:	4923      	ldr	r1, [pc, #140]	; (8011370 <tcp_receive+0xfe8>)
 80112e4:	4823      	ldr	r0, [pc, #140]	; (8011374 <tcp_receive+0xfec>)
 80112e6:	f007 f9af 	bl	8018648 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 80112ea:	e013      	b.n	8011314 <tcp_receive+0xf8c>
              }
            }
            prev = next;
 80112ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80112ee:	62bb      	str	r3, [r7, #40]	; 0x28
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 80112f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80112f2:	681b      	ldr	r3, [r3, #0]
 80112f4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80112f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80112f8:	2b00      	cmp	r3, #0
 80112fa:	f47f aeab 	bne.w	8011054 <tcp_receive+0xccc>
      if (pcb->rcv_nxt == seqno) {
 80112fe:	e00f      	b.n	8011320 <tcp_receive+0xf98>
                break;
 8011300:	bf00      	nop
 8011302:	e00d      	b.n	8011320 <tcp_receive+0xf98>
                break;
 8011304:	bf00      	nop
 8011306:	e00b      	b.n	8011320 <tcp_receive+0xf98>
                  break;
 8011308:	bf00      	nop
 801130a:	e009      	b.n	8011320 <tcp_receive+0xf98>
                  break;
 801130c:	bf00      	nop
 801130e:	e007      	b.n	8011320 <tcp_receive+0xf98>
                  break;
 8011310:	bf00      	nop
 8011312:	e005      	b.n	8011320 <tcp_receive+0xf98>
                break;
 8011314:	bf00      	nop
      if (pcb->rcv_nxt == seqno) {
 8011316:	e003      	b.n	8011320 <tcp_receive+0xf98>
#endif /* TCP_OOSEQ_MAX_BYTES || TCP_OOSEQ_MAX_PBUFS */
#endif /* TCP_QUEUE_OOSEQ */
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 8011318:	6878      	ldr	r0, [r7, #4]
 801131a:	f000 ff4f 	bl	80121bc <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 801131e:	e01a      	b.n	8011356 <tcp_receive+0xfce>
 8011320:	e019      	b.n	8011356 <tcp_receive+0xfce>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 8011322:	4b0f      	ldr	r3, [pc, #60]	; (8011360 <tcp_receive+0xfd8>)
 8011324:	681a      	ldr	r2, [r3, #0]
 8011326:	687b      	ldr	r3, [r7, #4]
 8011328:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801132a:	1ad3      	subs	r3, r2, r3
 801132c:	2b00      	cmp	r3, #0
 801132e:	db0a      	blt.n	8011346 <tcp_receive+0xfbe>
 8011330:	4b0b      	ldr	r3, [pc, #44]	; (8011360 <tcp_receive+0xfd8>)
 8011332:	681a      	ldr	r2, [r3, #0]
 8011334:	687b      	ldr	r3, [r7, #4]
 8011336:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011338:	6879      	ldr	r1, [r7, #4]
 801133a:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 801133c:	440b      	add	r3, r1
 801133e:	1ad3      	subs	r3, r2, r3
 8011340:	3301      	adds	r3, #1
 8011342:	2b00      	cmp	r3, #0
 8011344:	dd07      	ble.n	8011356 <tcp_receive+0xfce>
      tcp_ack_now(pcb);
 8011346:	687b      	ldr	r3, [r7, #4]
 8011348:	7e9b      	ldrb	r3, [r3, #26]
 801134a:	f043 0302 	orr.w	r3, r3, #2
 801134e:	b2da      	uxtb	r2, r3
 8011350:	687b      	ldr	r3, [r7, #4]
 8011352:	769a      	strb	r2, [r3, #26]
    }
  }
}
 8011354:	e7ff      	b.n	8011356 <tcp_receive+0xfce>
 8011356:	bf00      	nop
 8011358:	3734      	adds	r7, #52	; 0x34
 801135a:	46bd      	mov	sp, r7
 801135c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801135e:	bf00      	nop
 8011360:	20004234 	.word	0x20004234
 8011364:	20004214 	.word	0x20004214
 8011368:	2000423e 	.word	0x2000423e
 801136c:	0801a2c0 	.word	0x0801a2c0
 8011370:	0801a58c 	.word	0x0801a58c
 8011374:	0801a304 	.word	0x0801a304

08011378 <tcp_getoptbyte>:

static u8_t
tcp_getoptbyte(void)
{
 8011378:	b480      	push	{r7}
 801137a:	b083      	sub	sp, #12
 801137c:	af00      	add	r7, sp, #0
  if ((tcphdr_opt2 == NULL) || (tcp_optidx < tcphdr_opt1len)) {
 801137e:	4b18      	ldr	r3, [pc, #96]	; (80113e0 <tcp_getoptbyte+0x68>)
 8011380:	681b      	ldr	r3, [r3, #0]
 8011382:	2b00      	cmp	r3, #0
 8011384:	d005      	beq.n	8011392 <tcp_getoptbyte+0x1a>
 8011386:	4b17      	ldr	r3, [pc, #92]	; (80113e4 <tcp_getoptbyte+0x6c>)
 8011388:	881a      	ldrh	r2, [r3, #0]
 801138a:	4b17      	ldr	r3, [pc, #92]	; (80113e8 <tcp_getoptbyte+0x70>)
 801138c:	881b      	ldrh	r3, [r3, #0]
 801138e:	429a      	cmp	r2, r3
 8011390:	d20e      	bcs.n	80113b0 <tcp_getoptbyte+0x38>
    u8_t* opts = (u8_t *)tcphdr + TCP_HLEN;
 8011392:	4b16      	ldr	r3, [pc, #88]	; (80113ec <tcp_getoptbyte+0x74>)
 8011394:	681b      	ldr	r3, [r3, #0]
 8011396:	3314      	adds	r3, #20
 8011398:	603b      	str	r3, [r7, #0]
    return opts[tcp_optidx++];
 801139a:	4b12      	ldr	r3, [pc, #72]	; (80113e4 <tcp_getoptbyte+0x6c>)
 801139c:	881b      	ldrh	r3, [r3, #0]
 801139e:	1c5a      	adds	r2, r3, #1
 80113a0:	b291      	uxth	r1, r2
 80113a2:	4a10      	ldr	r2, [pc, #64]	; (80113e4 <tcp_getoptbyte+0x6c>)
 80113a4:	8011      	strh	r1, [r2, #0]
 80113a6:	461a      	mov	r2, r3
 80113a8:	683b      	ldr	r3, [r7, #0]
 80113aa:	4413      	add	r3, r2
 80113ac:	781b      	ldrb	r3, [r3, #0]
 80113ae:	e010      	b.n	80113d2 <tcp_getoptbyte+0x5a>
  } else {
    u8_t idx = (u8_t)(tcp_optidx++ - tcphdr_opt1len);
 80113b0:	4b0c      	ldr	r3, [pc, #48]	; (80113e4 <tcp_getoptbyte+0x6c>)
 80113b2:	881b      	ldrh	r3, [r3, #0]
 80113b4:	1c5a      	adds	r2, r3, #1
 80113b6:	b291      	uxth	r1, r2
 80113b8:	4a0a      	ldr	r2, [pc, #40]	; (80113e4 <tcp_getoptbyte+0x6c>)
 80113ba:	8011      	strh	r1, [r2, #0]
 80113bc:	b2da      	uxtb	r2, r3
 80113be:	4b0a      	ldr	r3, [pc, #40]	; (80113e8 <tcp_getoptbyte+0x70>)
 80113c0:	881b      	ldrh	r3, [r3, #0]
 80113c2:	b2db      	uxtb	r3, r3
 80113c4:	1ad3      	subs	r3, r2, r3
 80113c6:	71fb      	strb	r3, [r7, #7]
    return tcphdr_opt2[idx];
 80113c8:	4b05      	ldr	r3, [pc, #20]	; (80113e0 <tcp_getoptbyte+0x68>)
 80113ca:	681a      	ldr	r2, [r3, #0]
 80113cc:	79fb      	ldrb	r3, [r7, #7]
 80113ce:	4413      	add	r3, r2
 80113d0:	781b      	ldrb	r3, [r3, #0]
  }
}
 80113d2:	4618      	mov	r0, r3
 80113d4:	370c      	adds	r7, #12
 80113d6:	46bd      	mov	sp, r7
 80113d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80113dc:	4770      	bx	lr
 80113de:	bf00      	nop
 80113e0:	2000422c 	.word	0x2000422c
 80113e4:	20004230 	.word	0x20004230
 80113e8:	2000422a 	.word	0x2000422a
 80113ec:	20004224 	.word	0x20004224

080113f0 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 80113f0:	b580      	push	{r7, lr}
 80113f2:	b084      	sub	sp, #16
 80113f4:	af00      	add	r7, sp, #0
 80113f6:	6078      	str	r0, [r7, #4]
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 80113f8:	4b2d      	ldr	r3, [pc, #180]	; (80114b0 <tcp_parseopt+0xc0>)
 80113fa:	881b      	ldrh	r3, [r3, #0]
 80113fc:	2b00      	cmp	r3, #0
 80113fe:	d053      	beq.n	80114a8 <tcp_parseopt+0xb8>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8011400:	4b2c      	ldr	r3, [pc, #176]	; (80114b4 <tcp_parseopt+0xc4>)
 8011402:	2200      	movs	r2, #0
 8011404:	801a      	strh	r2, [r3, #0]
 8011406:	e043      	b.n	8011490 <tcp_parseopt+0xa0>
      u8_t opt = tcp_getoptbyte();
 8011408:	f7ff ffb6 	bl	8011378 <tcp_getoptbyte>
 801140c:	4603      	mov	r3, r0
 801140e:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 8011410:	7bfb      	ldrb	r3, [r7, #15]
 8011412:	2b01      	cmp	r3, #1
 8011414:	d03c      	beq.n	8011490 <tcp_parseopt+0xa0>
 8011416:	2b02      	cmp	r3, #2
 8011418:	d002      	beq.n	8011420 <tcp_parseopt+0x30>
 801141a:	2b00      	cmp	r3, #0
 801141c:	d03f      	beq.n	801149e <tcp_parseopt+0xae>
 801141e:	e026      	b.n	801146e <tcp_parseopt+0x7e>
        /* NOP option. */
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
        break;
      case LWIP_TCP_OPT_MSS:
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
        if (tcp_getoptbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 8011420:	f7ff ffaa 	bl	8011378 <tcp_getoptbyte>
 8011424:	4603      	mov	r3, r0
 8011426:	2b04      	cmp	r3, #4
 8011428:	d13b      	bne.n	80114a2 <tcp_parseopt+0xb2>
 801142a:	4b22      	ldr	r3, [pc, #136]	; (80114b4 <tcp_parseopt+0xc4>)
 801142c:	881b      	ldrh	r3, [r3, #0]
 801142e:	3302      	adds	r3, #2
 8011430:	4a1f      	ldr	r2, [pc, #124]	; (80114b0 <tcp_parseopt+0xc0>)
 8011432:	8812      	ldrh	r2, [r2, #0]
 8011434:	4293      	cmp	r3, r2
 8011436:	dc34      	bgt.n	80114a2 <tcp_parseopt+0xb2>
          /* Bad length */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
          return;
        }
        /* An MSS option with the right option length. */
        mss = (tcp_getoptbyte() << 8);
 8011438:	f7ff ff9e 	bl	8011378 <tcp_getoptbyte>
 801143c:	4603      	mov	r3, r0
 801143e:	b29b      	uxth	r3, r3
 8011440:	021b      	lsls	r3, r3, #8
 8011442:	81bb      	strh	r3, [r7, #12]
        mss |= tcp_getoptbyte();
 8011444:	f7ff ff98 	bl	8011378 <tcp_getoptbyte>
 8011448:	4603      	mov	r3, r0
 801144a:	b29a      	uxth	r2, r3
 801144c:	89bb      	ldrh	r3, [r7, #12]
 801144e:	4313      	orrs	r3, r2
 8011450:	81bb      	strh	r3, [r7, #12]
        /* Limit the mss to the configured TCP_MSS and prevent division by zero */
        pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 8011452:	89bb      	ldrh	r3, [r7, #12]
 8011454:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 8011458:	d804      	bhi.n	8011464 <tcp_parseopt+0x74>
 801145a:	89bb      	ldrh	r3, [r7, #12]
 801145c:	2b00      	cmp	r3, #0
 801145e:	d001      	beq.n	8011464 <tcp_parseopt+0x74>
 8011460:	89ba      	ldrh	r2, [r7, #12]
 8011462:	e001      	b.n	8011468 <tcp_parseopt+0x78>
 8011464:	f44f 7206 	mov.w	r2, #536	; 0x218
 8011468:	687b      	ldr	r3, [r7, #4]
 801146a:	865a      	strh	r2, [r3, #50]	; 0x32
        break;
 801146c:	e010      	b.n	8011490 <tcp_parseopt+0xa0>
        tcp_optidx += LWIP_TCP_OPT_LEN_TS - 6;
        break;
#endif
      default:
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
        data = tcp_getoptbyte();
 801146e:	f7ff ff83 	bl	8011378 <tcp_getoptbyte>
 8011472:	4603      	mov	r3, r0
 8011474:	72fb      	strb	r3, [r7, #11]
        if (data < 2) {
 8011476:	7afb      	ldrb	r3, [r7, #11]
 8011478:	2b01      	cmp	r3, #1
 801147a:	d914      	bls.n	80114a6 <tcp_parseopt+0xb6>
             and we don't process them further. */
          return;
        }
        /* All other options have a length field, so that we easily
           can skip past them. */
        tcp_optidx += data - 2;
 801147c:	7afb      	ldrb	r3, [r7, #11]
 801147e:	b29a      	uxth	r2, r3
 8011480:	4b0c      	ldr	r3, [pc, #48]	; (80114b4 <tcp_parseopt+0xc4>)
 8011482:	881b      	ldrh	r3, [r3, #0]
 8011484:	4413      	add	r3, r2
 8011486:	b29b      	uxth	r3, r3
 8011488:	3b02      	subs	r3, #2
 801148a:	b29a      	uxth	r2, r3
 801148c:	4b09      	ldr	r3, [pc, #36]	; (80114b4 <tcp_parseopt+0xc4>)
 801148e:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8011490:	4b08      	ldr	r3, [pc, #32]	; (80114b4 <tcp_parseopt+0xc4>)
 8011492:	881a      	ldrh	r2, [r3, #0]
 8011494:	4b06      	ldr	r3, [pc, #24]	; (80114b0 <tcp_parseopt+0xc0>)
 8011496:	881b      	ldrh	r3, [r3, #0]
 8011498:	429a      	cmp	r2, r3
 801149a:	d3b5      	bcc.n	8011408 <tcp_parseopt+0x18>
 801149c:	e004      	b.n	80114a8 <tcp_parseopt+0xb8>
        return;
 801149e:	bf00      	nop
 80114a0:	e002      	b.n	80114a8 <tcp_parseopt+0xb8>
          return;
 80114a2:	bf00      	nop
 80114a4:	e000      	b.n	80114a8 <tcp_parseopt+0xb8>
          return;
 80114a6:	bf00      	nop
      }
    }
  }
}
 80114a8:	3710      	adds	r7, #16
 80114aa:	46bd      	mov	sp, r7
 80114ac:	bd80      	pop	{r7, pc}
 80114ae:	bf00      	nop
 80114b0:	20004228 	.word	0x20004228
 80114b4:	20004230 	.word	0x20004230

080114b8 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 80114b8:	b480      	push	{r7}
 80114ba:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 80114bc:	4b05      	ldr	r3, [pc, #20]	; (80114d4 <tcp_trigger_input_pcb_close+0x1c>)
 80114be:	781b      	ldrb	r3, [r3, #0]
 80114c0:	f043 0310 	orr.w	r3, r3, #16
 80114c4:	b2da      	uxtb	r2, r3
 80114c6:	4b03      	ldr	r3, [pc, #12]	; (80114d4 <tcp_trigger_input_pcb_close+0x1c>)
 80114c8:	701a      	strb	r2, [r3, #0]
}
 80114ca:	bf00      	nop
 80114cc:	46bd      	mov	sp, r7
 80114ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80114d2:	4770      	bx	lr
 80114d4:	20004241 	.word	0x20004241

080114d8 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                      u32_t seqno_be /* already in network byte order */)
{
 80114d8:	b580      	push	{r7, lr}
 80114da:	b086      	sub	sp, #24
 80114dc:	af00      	add	r7, sp, #0
 80114de:	60f8      	str	r0, [r7, #12]
 80114e0:	607b      	str	r3, [r7, #4]
 80114e2:	460b      	mov	r3, r1
 80114e4:	817b      	strh	r3, [r7, #10]
 80114e6:	4613      	mov	r3, r2
 80114e8:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 80114ea:	897a      	ldrh	r2, [r7, #10]
 80114ec:	893b      	ldrh	r3, [r7, #8]
 80114ee:	4413      	add	r3, r2
 80114f0:	b29b      	uxth	r3, r3
 80114f2:	3314      	adds	r3, #20
 80114f4:	b29b      	uxth	r3, r3
 80114f6:	2200      	movs	r2, #0
 80114f8:	4619      	mov	r1, r3
 80114fa:	2001      	movs	r0, #1
 80114fc:	f7fb fbb6 	bl	800cc6c <pbuf_alloc>
 8011500:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 8011502:	697b      	ldr	r3, [r7, #20]
 8011504:	2b00      	cmp	r3, #0
 8011506:	d057      	beq.n	80115b8 <tcp_output_alloc_header+0xe0>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 8011508:	697b      	ldr	r3, [r7, #20]
 801150a:	895b      	ldrh	r3, [r3, #10]
 801150c:	461a      	mov	r2, r3
 801150e:	897b      	ldrh	r3, [r7, #10]
 8011510:	3314      	adds	r3, #20
 8011512:	429a      	cmp	r2, r3
 8011514:	da05      	bge.n	8011522 <tcp_output_alloc_header+0x4a>
 8011516:	4b2b      	ldr	r3, [pc, #172]	; (80115c4 <tcp_output_alloc_header+0xec>)
 8011518:	2273      	movs	r2, #115	; 0x73
 801151a:	492b      	ldr	r1, [pc, #172]	; (80115c8 <tcp_output_alloc_header+0xf0>)
 801151c:	482b      	ldr	r0, [pc, #172]	; (80115cc <tcp_output_alloc_header+0xf4>)
 801151e:	f007 f893 	bl	8018648 <iprintf>
                 (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 8011522:	697b      	ldr	r3, [r7, #20]
 8011524:	685b      	ldr	r3, [r3, #4]
 8011526:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(pcb->local_port);
 8011528:	68fb      	ldr	r3, [r7, #12]
 801152a:	8adb      	ldrh	r3, [r3, #22]
 801152c:	4618      	mov	r0, r3
 801152e:	f7fa fd6d 	bl	800c00c <lwip_htons>
 8011532:	4603      	mov	r3, r0
 8011534:	461a      	mov	r2, r3
 8011536:	693b      	ldr	r3, [r7, #16]
 8011538:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(pcb->remote_port);
 801153a:	68fb      	ldr	r3, [r7, #12]
 801153c:	8b1b      	ldrh	r3, [r3, #24]
 801153e:	4618      	mov	r0, r3
 8011540:	f7fa fd64 	bl	800c00c <lwip_htons>
 8011544:	4603      	mov	r3, r0
 8011546:	461a      	mov	r2, r3
 8011548:	693b      	ldr	r3, [r7, #16]
 801154a:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 801154c:	693b      	ldr	r3, [r7, #16]
 801154e:	687a      	ldr	r2, [r7, #4]
 8011550:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 8011552:	68fb      	ldr	r3, [r7, #12]
 8011554:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011556:	4618      	mov	r0, r3
 8011558:	f7fa fd66 	bl	800c028 <lwip_htonl>
 801155c:	4602      	mov	r2, r0
 801155e:	693b      	ldr	r3, [r7, #16]
 8011560:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), TCP_ACK);
 8011562:	897b      	ldrh	r3, [r7, #10]
 8011564:	089b      	lsrs	r3, r3, #2
 8011566:	b29b      	uxth	r3, r3
 8011568:	3305      	adds	r3, #5
 801156a:	b29b      	uxth	r3, r3
 801156c:	031b      	lsls	r3, r3, #12
 801156e:	b29b      	uxth	r3, r3
 8011570:	f043 0310 	orr.w	r3, r3, #16
 8011574:	b29b      	uxth	r3, r3
 8011576:	4618      	mov	r0, r3
 8011578:	f7fa fd48 	bl	800c00c <lwip_htons>
 801157c:	4603      	mov	r3, r0
 801157e:	461a      	mov	r2, r3
 8011580:	693b      	ldr	r3, [r7, #16]
 8011582:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 8011584:	68fb      	ldr	r3, [r7, #12]
 8011586:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8011588:	4618      	mov	r0, r3
 801158a:	f7fa fd3f 	bl	800c00c <lwip_htons>
 801158e:	4603      	mov	r3, r0
 8011590:	461a      	mov	r2, r3
 8011592:	693b      	ldr	r3, [r7, #16]
 8011594:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 8011596:	693b      	ldr	r3, [r7, #16]
 8011598:	2200      	movs	r2, #0
 801159a:	741a      	strb	r2, [r3, #16]
 801159c:	2200      	movs	r2, #0
 801159e:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 80115a0:	693b      	ldr	r3, [r7, #16]
 80115a2:	2200      	movs	r2, #0
 80115a4:	749a      	strb	r2, [r3, #18]
 80115a6:	2200      	movs	r2, #0
 80115a8:	74da      	strb	r2, [r3, #19]

    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 80115aa:	68fb      	ldr	r3, [r7, #12]
 80115ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80115ae:	68fa      	ldr	r2, [r7, #12]
 80115b0:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 80115b2:	441a      	add	r2, r3
 80115b4:	68fb      	ldr	r3, [r7, #12]
 80115b6:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 80115b8:	697b      	ldr	r3, [r7, #20]
}
 80115ba:	4618      	mov	r0, r3
 80115bc:	3718      	adds	r7, #24
 80115be:	46bd      	mov	sp, r7
 80115c0:	bd80      	pop	{r7, pc}
 80115c2:	bf00      	nop
 80115c4:	0801a648 	.word	0x0801a648
 80115c8:	0801a67c 	.word	0x0801a67c
 80115cc:	0801a6ac 	.word	0x0801a6ac

080115d0 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 80115d0:	b590      	push	{r4, r7, lr}
 80115d2:	b085      	sub	sp, #20
 80115d4:	af00      	add	r7, sp, #0
 80115d6:	6078      	str	r0, [r7, #4]
  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 80115d8:	687b      	ldr	r3, [r7, #4]
 80115da:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80115dc:	2b00      	cmp	r3, #0
 80115de:	d02d      	beq.n	801163c <tcp_send_fin+0x6c>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 80115e0:	687b      	ldr	r3, [r7, #4]
 80115e2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80115e4:	60fb      	str	r3, [r7, #12]
 80115e6:	e002      	b.n	80115ee <tcp_send_fin+0x1e>
         last_unsent = last_unsent->next);
 80115e8:	68fb      	ldr	r3, [r7, #12]
 80115ea:	681b      	ldr	r3, [r3, #0]
 80115ec:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 80115ee:	68fb      	ldr	r3, [r7, #12]
 80115f0:	681b      	ldr	r3, [r3, #0]
 80115f2:	2b00      	cmp	r3, #0
 80115f4:	d1f8      	bne.n	80115e8 <tcp_send_fin+0x18>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 80115f6:	68fb      	ldr	r3, [r7, #12]
 80115f8:	68db      	ldr	r3, [r3, #12]
 80115fa:	899b      	ldrh	r3, [r3, #12]
 80115fc:	b29b      	uxth	r3, r3
 80115fe:	4618      	mov	r0, r3
 8011600:	f7fa fd04 	bl	800c00c <lwip_htons>
 8011604:	4603      	mov	r3, r0
 8011606:	f003 0307 	and.w	r3, r3, #7
 801160a:	2b00      	cmp	r3, #0
 801160c:	d116      	bne.n	801163c <tcp_send_fin+0x6c>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 801160e:	68fb      	ldr	r3, [r7, #12]
 8011610:	68db      	ldr	r3, [r3, #12]
 8011612:	899b      	ldrh	r3, [r3, #12]
 8011614:	b29c      	uxth	r4, r3
 8011616:	2001      	movs	r0, #1
 8011618:	f7fa fcf8 	bl	800c00c <lwip_htons>
 801161c:	4603      	mov	r3, r0
 801161e:	461a      	mov	r2, r3
 8011620:	68fb      	ldr	r3, [r7, #12]
 8011622:	68db      	ldr	r3, [r3, #12]
 8011624:	4322      	orrs	r2, r4
 8011626:	b292      	uxth	r2, r2
 8011628:	819a      	strh	r2, [r3, #12]
      pcb->flags |= TF_FIN;
 801162a:	687b      	ldr	r3, [r7, #4]
 801162c:	7e9b      	ldrb	r3, [r3, #26]
 801162e:	f043 0320 	orr.w	r3, r3, #32
 8011632:	b2da      	uxtb	r2, r3
 8011634:	687b      	ldr	r3, [r7, #4]
 8011636:	769a      	strb	r2, [r3, #26]
      return ERR_OK;
 8011638:	2300      	movs	r3, #0
 801163a:	e004      	b.n	8011646 <tcp_send_fin+0x76>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 801163c:	2101      	movs	r1, #1
 801163e:	6878      	ldr	r0, [r7, #4]
 8011640:	f000 fcc0 	bl	8011fc4 <tcp_enqueue_flags>
 8011644:	4603      	mov	r3, r0
}
 8011646:	4618      	mov	r0, r3
 8011648:	3714      	adds	r7, #20
 801164a:	46bd      	mov	sp, r7
 801164c:	bd90      	pop	{r4, r7, pc}
	...

08011650 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(struct tcp_pcb *pcb, struct pbuf *p, u8_t flags, u32_t seqno, u8_t optflags)
{
 8011650:	b590      	push	{r4, r7, lr}
 8011652:	b087      	sub	sp, #28
 8011654:	af00      	add	r7, sp, #0
 8011656:	60f8      	str	r0, [r7, #12]
 8011658:	60b9      	str	r1, [r7, #8]
 801165a:	603b      	str	r3, [r7, #0]
 801165c:	4613      	mov	r3, r2
 801165e:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen = LWIP_TCP_OPT_LENGTH(optflags);
 8011660:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8011664:	009b      	lsls	r3, r3, #2
 8011666:	b2db      	uxtb	r3, r3
 8011668:	f003 0304 	and.w	r3, r3, #4
 801166c:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 801166e:	2003      	movs	r0, #3
 8011670:	f7fb f8ba 	bl	800c7e8 <memp_malloc>
 8011674:	6138      	str	r0, [r7, #16]
 8011676:	693b      	ldr	r3, [r7, #16]
 8011678:	2b00      	cmp	r3, #0
 801167a:	d104      	bne.n	8011686 <tcp_create_segment+0x36>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 801167c:	68b8      	ldr	r0, [r7, #8]
 801167e:	f7fb fe67 	bl	800d350 <pbuf_free>
    return NULL;
 8011682:	2300      	movs	r3, #0
 8011684:	e061      	b.n	801174a <tcp_create_segment+0xfa>
  }
  seg->flags = optflags;
 8011686:	693b      	ldr	r3, [r7, #16]
 8011688:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 801168c:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 801168e:	693b      	ldr	r3, [r7, #16]
 8011690:	2200      	movs	r2, #0
 8011692:	601a      	str	r2, [r3, #0]
  seg->p = p;
 8011694:	693b      	ldr	r3, [r7, #16]
 8011696:	68ba      	ldr	r2, [r7, #8]
 8011698:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 801169a:	68bb      	ldr	r3, [r7, #8]
 801169c:	891a      	ldrh	r2, [r3, #8]
 801169e:	7dfb      	ldrb	r3, [r7, #23]
 80116a0:	b29b      	uxth	r3, r3
 80116a2:	429a      	cmp	r2, r3
 80116a4:	d205      	bcs.n	80116b2 <tcp_create_segment+0x62>
 80116a6:	4b2b      	ldr	r3, [pc, #172]	; (8011754 <tcp_create_segment+0x104>)
 80116a8:	22ba      	movs	r2, #186	; 0xba
 80116aa:	492b      	ldr	r1, [pc, #172]	; (8011758 <tcp_create_segment+0x108>)
 80116ac:	482b      	ldr	r0, [pc, #172]	; (801175c <tcp_create_segment+0x10c>)
 80116ae:	f006 ffcb 	bl	8018648 <iprintf>
  seg->len = p->tot_len - optlen;
 80116b2:	68bb      	ldr	r3, [r7, #8]
 80116b4:	891a      	ldrh	r2, [r3, #8]
 80116b6:	7dfb      	ldrb	r3, [r7, #23]
 80116b8:	b29b      	uxth	r3, r3
 80116ba:	1ad3      	subs	r3, r2, r3
 80116bc:	b29a      	uxth	r2, r3
 80116be:	693b      	ldr	r3, [r7, #16]
 80116c0:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_header(p, TCP_HLEN)) {
 80116c2:	2114      	movs	r1, #20
 80116c4:	68b8      	ldr	r0, [r7, #8]
 80116c6:	f7fb fe1f 	bl	800d308 <pbuf_header>
 80116ca:	4603      	mov	r3, r0
 80116cc:	2b00      	cmp	r3, #0
 80116ce:	d004      	beq.n	80116da <tcp_create_segment+0x8a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 80116d0:	6938      	ldr	r0, [r7, #16]
 80116d2:	f7fd f930 	bl	800e936 <tcp_seg_free>
    return NULL;
 80116d6:	2300      	movs	r3, #0
 80116d8:	e037      	b.n	801174a <tcp_create_segment+0xfa>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 80116da:	693b      	ldr	r3, [r7, #16]
 80116dc:	685b      	ldr	r3, [r3, #4]
 80116de:	685a      	ldr	r2, [r3, #4]
 80116e0:	693b      	ldr	r3, [r7, #16]
 80116e2:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 80116e4:	68fb      	ldr	r3, [r7, #12]
 80116e6:	8ada      	ldrh	r2, [r3, #22]
 80116e8:	693b      	ldr	r3, [r7, #16]
 80116ea:	68dc      	ldr	r4, [r3, #12]
 80116ec:	4610      	mov	r0, r2
 80116ee:	f7fa fc8d 	bl	800c00c <lwip_htons>
 80116f2:	4603      	mov	r3, r0
 80116f4:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 80116f6:	68fb      	ldr	r3, [r7, #12]
 80116f8:	8b1a      	ldrh	r2, [r3, #24]
 80116fa:	693b      	ldr	r3, [r7, #16]
 80116fc:	68dc      	ldr	r4, [r3, #12]
 80116fe:	4610      	mov	r0, r2
 8011700:	f7fa fc84 	bl	800c00c <lwip_htons>
 8011704:	4603      	mov	r3, r0
 8011706:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 8011708:	693b      	ldr	r3, [r7, #16]
 801170a:	68dc      	ldr	r4, [r3, #12]
 801170c:	6838      	ldr	r0, [r7, #0]
 801170e:	f7fa fc8b 	bl	800c028 <lwip_htonl>
 8011712:	4603      	mov	r3, r0
 8011714:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), flags);
 8011716:	7dfb      	ldrb	r3, [r7, #23]
 8011718:	089b      	lsrs	r3, r3, #2
 801171a:	b2db      	uxtb	r3, r3
 801171c:	b29b      	uxth	r3, r3
 801171e:	3305      	adds	r3, #5
 8011720:	b29b      	uxth	r3, r3
 8011722:	031b      	lsls	r3, r3, #12
 8011724:	b29a      	uxth	r2, r3
 8011726:	79fb      	ldrb	r3, [r7, #7]
 8011728:	b29b      	uxth	r3, r3
 801172a:	4313      	orrs	r3, r2
 801172c:	b29a      	uxth	r2, r3
 801172e:	693b      	ldr	r3, [r7, #16]
 8011730:	68dc      	ldr	r4, [r3, #12]
 8011732:	4610      	mov	r0, r2
 8011734:	f7fa fc6a 	bl	800c00c <lwip_htons>
 8011738:	4603      	mov	r3, r0
 801173a:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 801173c:	693b      	ldr	r3, [r7, #16]
 801173e:	68db      	ldr	r3, [r3, #12]
 8011740:	2200      	movs	r2, #0
 8011742:	749a      	strb	r2, [r3, #18]
 8011744:	2200      	movs	r2, #0
 8011746:	74da      	strb	r2, [r3, #19]
  return seg;
 8011748:	693b      	ldr	r3, [r7, #16]
}
 801174a:	4618      	mov	r0, r3
 801174c:	371c      	adds	r7, #28
 801174e:	46bd      	mov	sp, r7
 8011750:	bd90      	pop	{r4, r7, pc}
 8011752:	bf00      	nop
 8011754:	0801a648 	.word	0x0801a648
 8011758:	0801a6d4 	.word	0x0801a6d4
 801175c:	0801a6ac 	.word	0x0801a6ac

08011760 <tcp_pbuf_prealloc>:
#if TCP_OVERSIZE
static struct pbuf *
tcp_pbuf_prealloc(pbuf_layer layer, u16_t length, u16_t max_length,
                  u16_t *oversize, struct tcp_pcb *pcb, u8_t apiflags,
                  u8_t first_seg)
{
 8011760:	b580      	push	{r7, lr}
 8011762:	b086      	sub	sp, #24
 8011764:	af00      	add	r7, sp, #0
 8011766:	607b      	str	r3, [r7, #4]
 8011768:	4603      	mov	r3, r0
 801176a:	73fb      	strb	r3, [r7, #15]
 801176c:	460b      	mov	r3, r1
 801176e:	81bb      	strh	r3, [r7, #12]
 8011770:	4613      	mov	r3, r2
 8011772:	817b      	strh	r3, [r7, #10]
  struct pbuf *p;
  u16_t alloc = length;
 8011774:	89bb      	ldrh	r3, [r7, #12]
 8011776:	82fb      	strh	r3, [r7, #22]
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(apiflags);
  LWIP_UNUSED_ARG(first_seg);
  alloc = max_length;
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (length < max_length) {
 8011778:	89ba      	ldrh	r2, [r7, #12]
 801177a:	897b      	ldrh	r3, [r7, #10]
 801177c:	429a      	cmp	r2, r3
 801177e:	d221      	bcs.n	80117c4 <tcp_pbuf_prealloc+0x64>
     *
     * Did the user set TCP_WRITE_FLAG_MORE?
     *
     * Will the Nagle algorithm defer transmission of this segment?
     */
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 8011780:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8011784:	f003 0302 	and.w	r3, r3, #2
 8011788:	2b00      	cmp	r3, #0
 801178a:	d111      	bne.n	80117b0 <tcp_pbuf_prealloc+0x50>
        (!(pcb->flags & TF_NODELAY) &&
 801178c:	6a3b      	ldr	r3, [r7, #32]
 801178e:	7e9b      	ldrb	r3, [r3, #26]
 8011790:	f003 0340 	and.w	r3, r3, #64	; 0x40
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 8011794:	2b00      	cmp	r3, #0
 8011796:	d115      	bne.n	80117c4 <tcp_pbuf_prealloc+0x64>
        (!(pcb->flags & TF_NODELAY) &&
 8011798:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 801179c:	2b00      	cmp	r3, #0
 801179e:	d007      	beq.n	80117b0 <tcp_pbuf_prealloc+0x50>
         (!first_seg ||
          pcb->unsent != NULL ||
 80117a0:	6a3b      	ldr	r3, [r7, #32]
 80117a2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
         (!first_seg ||
 80117a4:	2b00      	cmp	r3, #0
 80117a6:	d103      	bne.n	80117b0 <tcp_pbuf_prealloc+0x50>
          pcb->unacked != NULL))) {
 80117a8:	6a3b      	ldr	r3, [r7, #32]
 80117aa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
          pcb->unsent != NULL ||
 80117ac:	2b00      	cmp	r3, #0
 80117ae:	d009      	beq.n	80117c4 <tcp_pbuf_prealloc+0x64>
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 80117b0:	89bb      	ldrh	r3, [r7, #12]
 80117b2:	f203 231b 	addw	r3, r3, #539	; 0x21b
 80117b6:	f023 0203 	bic.w	r2, r3, #3
 80117ba:	897b      	ldrh	r3, [r7, #10]
 80117bc:	4293      	cmp	r3, r2
 80117be:	bf28      	it	cs
 80117c0:	4613      	movcs	r3, r2
 80117c2:	82fb      	strh	r3, [r7, #22]
    }
  }
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 80117c4:	8af9      	ldrh	r1, [r7, #22]
 80117c6:	7bfb      	ldrb	r3, [r7, #15]
 80117c8:	2200      	movs	r2, #0
 80117ca:	4618      	mov	r0, r3
 80117cc:	f7fb fa4e 	bl	800cc6c <pbuf_alloc>
 80117d0:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 80117d2:	693b      	ldr	r3, [r7, #16]
 80117d4:	2b00      	cmp	r3, #0
 80117d6:	d101      	bne.n	80117dc <tcp_pbuf_prealloc+0x7c>
    return NULL;
 80117d8:	2300      	movs	r3, #0
 80117da:	e019      	b.n	8011810 <tcp_pbuf_prealloc+0xb0>
  }
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 80117dc:	693b      	ldr	r3, [r7, #16]
 80117de:	681b      	ldr	r3, [r3, #0]
 80117e0:	2b00      	cmp	r3, #0
 80117e2:	d006      	beq.n	80117f2 <tcp_pbuf_prealloc+0x92>
 80117e4:	4b0c      	ldr	r3, [pc, #48]	; (8011818 <tcp_pbuf_prealloc+0xb8>)
 80117e6:	f44f 7288 	mov.w	r2, #272	; 0x110
 80117ea:	490c      	ldr	r1, [pc, #48]	; (801181c <tcp_pbuf_prealloc+0xbc>)
 80117ec:	480c      	ldr	r0, [pc, #48]	; (8011820 <tcp_pbuf_prealloc+0xc0>)
 80117ee:	f006 ff2b 	bl	8018648 <iprintf>
  *oversize = p->len - length;
 80117f2:	693b      	ldr	r3, [r7, #16]
 80117f4:	895a      	ldrh	r2, [r3, #10]
 80117f6:	89bb      	ldrh	r3, [r7, #12]
 80117f8:	1ad3      	subs	r3, r2, r3
 80117fa:	b29a      	uxth	r2, r3
 80117fc:	687b      	ldr	r3, [r7, #4]
 80117fe:	801a      	strh	r2, [r3, #0]
  /* trim p->len to the currently used size */
  p->len = p->tot_len = length;
 8011800:	693b      	ldr	r3, [r7, #16]
 8011802:	89ba      	ldrh	r2, [r7, #12]
 8011804:	811a      	strh	r2, [r3, #8]
 8011806:	693b      	ldr	r3, [r7, #16]
 8011808:	891a      	ldrh	r2, [r3, #8]
 801180a:	693b      	ldr	r3, [r7, #16]
 801180c:	815a      	strh	r2, [r3, #10]
  return p;
 801180e:	693b      	ldr	r3, [r7, #16]
}
 8011810:	4618      	mov	r0, r3
 8011812:	3718      	adds	r7, #24
 8011814:	46bd      	mov	sp, r7
 8011816:	bd80      	pop	{r7, pc}
 8011818:	0801a648 	.word	0x0801a648
 801181c:	0801a6ec 	.word	0x0801a6ec
 8011820:	0801a6ac 	.word	0x0801a6ac

08011824 <tcp_write_checks>:
 * @param len length of data to send (checked agains snd_buf)
 * @return ERR_OK if tcp_write is allowed to proceed, another err_t otherwise
 */
static err_t
tcp_write_checks(struct tcp_pcb *pcb, u16_t len)
{
 8011824:	b580      	push	{r7, lr}
 8011826:	b082      	sub	sp, #8
 8011828:	af00      	add	r7, sp, #0
 801182a:	6078      	str	r0, [r7, #4]
 801182c:	460b      	mov	r3, r1
 801182e:	807b      	strh	r3, [r7, #2]
  /* connection is in invalid state for data transmission? */
  if ((pcb->state != ESTABLISHED) &&
 8011830:	687b      	ldr	r3, [r7, #4]
 8011832:	7d1b      	ldrb	r3, [r3, #20]
 8011834:	2b04      	cmp	r3, #4
 8011836:	d00e      	beq.n	8011856 <tcp_write_checks+0x32>
      (pcb->state != CLOSE_WAIT) &&
 8011838:	687b      	ldr	r3, [r7, #4]
 801183a:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != ESTABLISHED) &&
 801183c:	2b07      	cmp	r3, #7
 801183e:	d00a      	beq.n	8011856 <tcp_write_checks+0x32>
      (pcb->state != SYN_SENT) &&
 8011840:	687b      	ldr	r3, [r7, #4]
 8011842:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != CLOSE_WAIT) &&
 8011844:	2b02      	cmp	r3, #2
 8011846:	d006      	beq.n	8011856 <tcp_write_checks+0x32>
      (pcb->state != SYN_RCVD)) {
 8011848:	687b      	ldr	r3, [r7, #4]
 801184a:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != SYN_SENT) &&
 801184c:	2b03      	cmp	r3, #3
 801184e:	d002      	beq.n	8011856 <tcp_write_checks+0x32>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_STATE | LWIP_DBG_LEVEL_SEVERE, ("tcp_write() called in invalid state\n"));
    return ERR_CONN;
 8011850:	f06f 030a 	mvn.w	r3, #10
 8011854:	e04f      	b.n	80118f6 <tcp_write_checks+0xd2>
  } else if (len == 0) {
 8011856:	887b      	ldrh	r3, [r7, #2]
 8011858:	2b00      	cmp	r3, #0
 801185a:	d101      	bne.n	8011860 <tcp_write_checks+0x3c>
    return ERR_OK;
 801185c:	2300      	movs	r3, #0
 801185e:	e04a      	b.n	80118f6 <tcp_write_checks+0xd2>
  }

  /* fail on too much data */
  if (len > pcb->snd_buf) {
 8011860:	687b      	ldr	r3, [r7, #4]
 8011862:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8011866:	887a      	ldrh	r2, [r7, #2]
 8011868:	429a      	cmp	r2, r3
 801186a:	d909      	bls.n	8011880 <tcp_write_checks+0x5c>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too much data (len=%"U16_F" > snd_buf=%"TCPWNDSIZE_F")\n",
      len, pcb->snd_buf));
    pcb->flags |= TF_NAGLEMEMERR;
 801186c:	687b      	ldr	r3, [r7, #4]
 801186e:	7e9b      	ldrb	r3, [r3, #26]
 8011870:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8011874:	b2da      	uxtb	r2, r3
 8011876:	687b      	ldr	r3, [r7, #4]
 8011878:	769a      	strb	r2, [r3, #26]
    return ERR_MEM;
 801187a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801187e:	e03a      	b.n	80118f6 <tcp_write_checks+0xd2>
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: queuelen: %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));

  /* If total number of pbufs on the unsent/unacked queues exceeds the
   * configured maximum, return an error */
  /* check for configured max queuelen and possible overflow */
  if ((pcb->snd_queuelen >= TCP_SND_QUEUELEN) || (pcb->snd_queuelen > TCP_SNDQUEUELEN_OVERFLOW)) {
 8011880:	687b      	ldr	r3, [r7, #4]
 8011882:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8011886:	2b08      	cmp	r3, #8
 8011888:	d806      	bhi.n	8011898 <tcp_write_checks+0x74>
 801188a:	687b      	ldr	r3, [r7, #4]
 801188c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8011890:	f64f 72fc 	movw	r2, #65532	; 0xfffc
 8011894:	4293      	cmp	r3, r2
 8011896:	d909      	bls.n	80118ac <tcp_write_checks+0x88>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too long queue %"U16_F" (max %"U16_F")\n",
      pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    pcb->flags |= TF_NAGLEMEMERR;
 8011898:	687b      	ldr	r3, [r7, #4]
 801189a:	7e9b      	ldrb	r3, [r3, #26]
 801189c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80118a0:	b2da      	uxtb	r2, r3
 80118a2:	687b      	ldr	r3, [r7, #4]
 80118a4:	769a      	strb	r2, [r3, #26]
    return ERR_MEM;
 80118a6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80118aa:	e024      	b.n	80118f6 <tcp_write_checks+0xd2>
  }
  if (pcb->snd_queuelen != 0) {
 80118ac:	687b      	ldr	r3, [r7, #4]
 80118ae:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80118b2:	2b00      	cmp	r3, #0
 80118b4:	d00f      	beq.n	80118d6 <tcp_write_checks+0xb2>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 80118b6:	687b      	ldr	r3, [r7, #4]
 80118b8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80118ba:	2b00      	cmp	r3, #0
 80118bc:	d11a      	bne.n	80118f4 <tcp_write_checks+0xd0>
 80118be:	687b      	ldr	r3, [r7, #4]
 80118c0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80118c2:	2b00      	cmp	r3, #0
 80118c4:	d116      	bne.n	80118f4 <tcp_write_checks+0xd0>
 80118c6:	4b0e      	ldr	r3, [pc, #56]	; (8011900 <tcp_write_checks+0xdc>)
 80118c8:	f44f 72ab 	mov.w	r2, #342	; 0x156
 80118cc:	490d      	ldr	r1, [pc, #52]	; (8011904 <tcp_write_checks+0xe0>)
 80118ce:	480e      	ldr	r0, [pc, #56]	; (8011908 <tcp_write_checks+0xe4>)
 80118d0:	f006 feba 	bl	8018648 <iprintf>
 80118d4:	e00e      	b.n	80118f4 <tcp_write_checks+0xd0>
      pcb->unacked != NULL || pcb->unsent != NULL);
  } else {
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 80118d6:	687b      	ldr	r3, [r7, #4]
 80118d8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80118da:	2b00      	cmp	r3, #0
 80118dc:	d103      	bne.n	80118e6 <tcp_write_checks+0xc2>
 80118de:	687b      	ldr	r3, [r7, #4]
 80118e0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80118e2:	2b00      	cmp	r3, #0
 80118e4:	d006      	beq.n	80118f4 <tcp_write_checks+0xd0>
 80118e6:	4b06      	ldr	r3, [pc, #24]	; (8011900 <tcp_write_checks+0xdc>)
 80118e8:	f240 1259 	movw	r2, #345	; 0x159
 80118ec:	4907      	ldr	r1, [pc, #28]	; (801190c <tcp_write_checks+0xe8>)
 80118ee:	4806      	ldr	r0, [pc, #24]	; (8011908 <tcp_write_checks+0xe4>)
 80118f0:	f006 feaa 	bl	8018648 <iprintf>
      pcb->unacked == NULL && pcb->unsent == NULL);
  }
  return ERR_OK;
 80118f4:	2300      	movs	r3, #0
}
 80118f6:	4618      	mov	r0, r3
 80118f8:	3708      	adds	r7, #8
 80118fa:	46bd      	mov	sp, r7
 80118fc:	bd80      	pop	{r7, pc}
 80118fe:	bf00      	nop
 8011900:	0801a648 	.word	0x0801a648
 8011904:	0801a700 	.word	0x0801a700
 8011908:	0801a6ac 	.word	0x0801a6ac
 801190c:	0801a73c 	.word	0x0801a73c

08011910 <tcp_write>:
 * - TCP_WRITE_FLAG_MORE (0x02) for TCP connection, PSH flag will not be set on last segment sent,
 * @return ERR_OK if enqueued, another err_t on error
 */
err_t
tcp_write(struct tcp_pcb *pcb, const void *arg, u16_t len, u8_t apiflags)
{
 8011910:	b590      	push	{r4, r7, lr}
 8011912:	b09b      	sub	sp, #108	; 0x6c
 8011914:	af04      	add	r7, sp, #16
 8011916:	60f8      	str	r0, [r7, #12]
 8011918:	60b9      	str	r1, [r7, #8]
 801191a:	4611      	mov	r1, r2
 801191c:	461a      	mov	r2, r3
 801191e:	460b      	mov	r3, r1
 8011920:	80fb      	strh	r3, [r7, #6]
 8011922:	4613      	mov	r3, r2
 8011924:	717b      	strb	r3, [r7, #5]
  struct pbuf *concat_p = NULL;
 8011926:	2300      	movs	r3, #0
 8011928:	657b      	str	r3, [r7, #84]	; 0x54
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 801192a:	2300      	movs	r3, #0
 801192c:	653b      	str	r3, [r7, #80]	; 0x50
 801192e:	2300      	movs	r3, #0
 8011930:	64fb      	str	r3, [r7, #76]	; 0x4c
 8011932:	2300      	movs	r3, #0
 8011934:	64bb      	str	r3, [r7, #72]	; 0x48
 8011936:	2300      	movs	r3, #0
 8011938:	647b      	str	r3, [r7, #68]	; 0x44
  u16_t pos = 0; /* position in 'arg' data */
 801193a:	2300      	movs	r3, #0
 801193c:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  u16_t queuelen;
  u8_t optlen = 0;
 8011940:	2300      	movs	r3, #0
 8011942:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  u8_t optflags = 0;
 8011946:	2300      	movs	r3, #0
 8011948:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
#if TCP_OVERSIZE
  u16_t oversize = 0;
 801194c:	2300      	movs	r3, #0
 801194e:	827b      	strh	r3, [r7, #18]
  u16_t oversize_used = 0;
 8011950:	2300      	movs	r3, #0
 8011952:	87fb      	strh	r3, [r7, #62]	; 0x3e
#if TCP_OVERSIZE_DBGCHECK
  u16_t oversize_add = 0;
#endif /* TCP_OVERSIZE_DBGCHECK*/
#endif /* TCP_OVERSIZE */
  u16_t extendlen = 0;
 8011954:	2300      	movs	r3, #0
 8011956:	87bb      	strh	r3, [r7, #60]	; 0x3c
  u8_t concat_chksum_swapped = 0;
  u16_t concat_chksummed = 0;
#endif /* TCP_CHECKSUM_ON_COPY */
  err_t err;
  /* don't allocate segments bigger than half the maximum window we ever received */
  u16_t mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max/2));
 8011958:	68fb      	ldr	r3, [r7, #12]
 801195a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 801195e:	085b      	lsrs	r3, r3, #1
 8011960:	b29a      	uxth	r2, r3
 8011962:	68fb      	ldr	r3, [r7, #12]
 8011964:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011966:	4293      	cmp	r3, r2
 8011968:	bf28      	it	cs
 801196a:	4613      	movcs	r3, r2
 801196c:	84bb      	strh	r3, [r7, #36]	; 0x24
  mss_local = mss_local ? mss_local : pcb->mss;
 801196e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8011970:	2b00      	cmp	r3, #0
 8011972:	d102      	bne.n	801197a <tcp_write+0x6a>
 8011974:	68fb      	ldr	r3, [r7, #12]
 8011976:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011978:	e000      	b.n	801197c <tcp_write+0x6c>
 801197a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801197c:	84bb      	strh	r3, [r7, #36]	; 0x24
  apiflags |= TCP_WRITE_FLAG_COPY;
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_write(pcb=%p, data=%p, len=%"U16_F", apiflags=%"U16_F")\n",
    (void *)pcb, arg, len, (u16_t)apiflags));
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 801197e:	68bb      	ldr	r3, [r7, #8]
 8011980:	2b00      	cmp	r3, #0
 8011982:	d109      	bne.n	8011998 <tcp_write+0x88>
 8011984:	4b92      	ldr	r3, [pc, #584]	; (8011bd0 <tcp_write+0x2c0>)
 8011986:	f44f 72c9 	mov.w	r2, #402	; 0x192
 801198a:	4992      	ldr	r1, [pc, #584]	; (8011bd4 <tcp_write+0x2c4>)
 801198c:	4892      	ldr	r0, [pc, #584]	; (8011bd8 <tcp_write+0x2c8>)
 801198e:	f006 fe5b 	bl	8018648 <iprintf>
 8011992:	f06f 030f 	mvn.w	r3, #15
 8011996:	e30a      	b.n	8011fae <tcp_write+0x69e>
             arg != NULL, return ERR_ARG;);

  err = tcp_write_checks(pcb, len);
 8011998:	88fb      	ldrh	r3, [r7, #6]
 801199a:	4619      	mov	r1, r3
 801199c:	68f8      	ldr	r0, [r7, #12]
 801199e:	f7ff ff41 	bl	8011824 <tcp_write_checks>
 80119a2:	4603      	mov	r3, r0
 80119a4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (err != ERR_OK) {
 80119a8:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 80119ac:	2b00      	cmp	r3, #0
 80119ae:	d002      	beq.n	80119b6 <tcp_write+0xa6>
    return err;
 80119b0:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 80119b4:	e2fb      	b.n	8011fae <tcp_write+0x69e>
  }
  queuelen = pcb->snd_queuelen;
 80119b6:	68fb      	ldr	r3, [r7, #12]
 80119b8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80119bc:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
   *
   * pos records progress as data is segmented.
   */

  /* Find the tail of the unsent queue. */
  if (pcb->unsent != NULL) {
 80119c0:	68fb      	ldr	r3, [r7, #12]
 80119c2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80119c4:	2b00      	cmp	r3, #0
 80119c6:	f000 80f5 	beq.w	8011bb4 <tcp_write+0x2a4>
    u16_t space;
    u16_t unsent_optlen;

    /* @todo: this could be sped up by keeping last_unsent in the pcb */
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 80119ca:	68fb      	ldr	r3, [r7, #12]
 80119cc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80119ce:	653b      	str	r3, [r7, #80]	; 0x50
 80119d0:	e002      	b.n	80119d8 <tcp_write+0xc8>
         last_unsent = last_unsent->next);
 80119d2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80119d4:	681b      	ldr	r3, [r3, #0]
 80119d6:	653b      	str	r3, [r7, #80]	; 0x50
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 80119d8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80119da:	681b      	ldr	r3, [r3, #0]
 80119dc:	2b00      	cmp	r3, #0
 80119de:	d1f8      	bne.n	80119d2 <tcp_write+0xc2>

    /* Usable space at the end of the last unsent segment */
    unsent_optlen = LWIP_TCP_OPT_LENGTH(last_unsent->flags);
 80119e0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80119e2:	7a9b      	ldrb	r3, [r3, #10]
 80119e4:	009b      	lsls	r3, r3, #2
 80119e6:	b29b      	uxth	r3, r3
 80119e8:	f003 0304 	and.w	r3, r3, #4
 80119ec:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 80119ee:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80119f0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80119f2:	891b      	ldrh	r3, [r3, #8]
 80119f4:	4619      	mov	r1, r3
 80119f6:	8c3b      	ldrh	r3, [r7, #32]
 80119f8:	440b      	add	r3, r1
 80119fa:	429a      	cmp	r2, r3
 80119fc:	da06      	bge.n	8011a0c <tcp_write+0xfc>
 80119fe:	4b74      	ldr	r3, [pc, #464]	; (8011bd0 <tcp_write+0x2c0>)
 8011a00:	f240 12c7 	movw	r2, #455	; 0x1c7
 8011a04:	4975      	ldr	r1, [pc, #468]	; (8011bdc <tcp_write+0x2cc>)
 8011a06:	4874      	ldr	r0, [pc, #464]	; (8011bd8 <tcp_write+0x2c8>)
 8011a08:	f006 fe1e 	bl	8018648 <iprintf>
    space = mss_local - (last_unsent->len + unsent_optlen);
 8011a0c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011a0e:	891a      	ldrh	r2, [r3, #8]
 8011a10:	8c3b      	ldrh	r3, [r7, #32]
 8011a12:	4413      	add	r3, r2
 8011a14:	b29b      	uxth	r3, r3
 8011a16:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8011a18:	1ad3      	subs	r3, r2, r3
 8011a1a:	877b      	strh	r3, [r7, #58]	; 0x3a
#if TCP_OVERSIZE_DBGCHECK
    /* check that pcb->unsent_oversize matches last_unsent->oversize_left */
    LWIP_ASSERT("unsent_oversize mismatch (pcb vs. last_unsent)",
                pcb->unsent_oversize == last_unsent->oversize_left);
#endif /* TCP_OVERSIZE_DBGCHECK */
    oversize = pcb->unsent_oversize;
 8011a1c:	68fb      	ldr	r3, [r7, #12]
 8011a1e:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8011a22:	827b      	strh	r3, [r7, #18]
    if (oversize > 0) {
 8011a24:	8a7b      	ldrh	r3, [r7, #18]
 8011a26:	2b00      	cmp	r3, #0
 8011a28:	d027      	beq.n	8011a7a <tcp_write+0x16a>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 8011a2a:	8a7b      	ldrh	r3, [r7, #18]
 8011a2c:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8011a2e:	429a      	cmp	r2, r3
 8011a30:	d206      	bcs.n	8011a40 <tcp_write+0x130>
 8011a32:	4b67      	ldr	r3, [pc, #412]	; (8011bd0 <tcp_write+0x2c0>)
 8011a34:	f240 12d9 	movw	r2, #473	; 0x1d9
 8011a38:	4969      	ldr	r1, [pc, #420]	; (8011be0 <tcp_write+0x2d0>)
 8011a3a:	4867      	ldr	r0, [pc, #412]	; (8011bd8 <tcp_write+0x2c8>)
 8011a3c:	f006 fe04 	bl	8018648 <iprintf>
      seg = last_unsent;
 8011a40:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011a42:	64fb      	str	r3, [r7, #76]	; 0x4c
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 8011a44:	8a7b      	ldrh	r3, [r7, #18]
 8011a46:	88fa      	ldrh	r2, [r7, #6]
 8011a48:	429a      	cmp	r2, r3
 8011a4a:	d901      	bls.n	8011a50 <tcp_write+0x140>
 8011a4c:	8a7b      	ldrh	r3, [r7, #18]
 8011a4e:	e000      	b.n	8011a52 <tcp_write+0x142>
 8011a50:	88fb      	ldrh	r3, [r7, #6]
 8011a52:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8011a54:	4293      	cmp	r3, r2
 8011a56:	bfa8      	it	ge
 8011a58:	4613      	movge	r3, r2
 8011a5a:	87fb      	strh	r3, [r7, #62]	; 0x3e
      pos += oversize_used;
 8011a5c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8011a60:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8011a62:	4413      	add	r3, r2
 8011a64:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      oversize -= oversize_used;
 8011a68:	8a7a      	ldrh	r2, [r7, #18]
 8011a6a:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8011a6c:	1ad3      	subs	r3, r2, r3
 8011a6e:	b29b      	uxth	r3, r3
 8011a70:	827b      	strh	r3, [r7, #18]
      space -= oversize_used;
 8011a72:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8011a74:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8011a76:	1ad3      	subs	r3, r2, r3
 8011a78:	877b      	strh	r3, [r7, #58]	; 0x3a
    }
    /* now we are either finished or oversize is zero */
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 8011a7a:	8a7b      	ldrh	r3, [r7, #18]
 8011a7c:	2b00      	cmp	r3, #0
 8011a7e:	d00b      	beq.n	8011a98 <tcp_write+0x188>
 8011a80:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8011a84:	88fb      	ldrh	r3, [r7, #6]
 8011a86:	429a      	cmp	r2, r3
 8011a88:	d006      	beq.n	8011a98 <tcp_write+0x188>
 8011a8a:	4b51      	ldr	r3, [pc, #324]	; (8011bd0 <tcp_write+0x2c0>)
 8011a8c:	f240 12e1 	movw	r2, #481	; 0x1e1
 8011a90:	4954      	ldr	r1, [pc, #336]	; (8011be4 <tcp_write+0x2d4>)
 8011a92:	4851      	ldr	r0, [pc, #324]	; (8011bd8 <tcp_write+0x2c8>)
 8011a94:	f006 fdd8 	bl	8018648 <iprintf>
     *
     * We don't extend segments containing SYN/FIN flags or options
     * (len==0). The new pbuf is kept in concat_p and pbuf_cat'ed at
     * the end.
     */
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 8011a98:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8011a9c:	88fb      	ldrh	r3, [r7, #6]
 8011a9e:	429a      	cmp	r2, r3
 8011aa0:	f080 8168 	bcs.w	8011d74 <tcp_write+0x464>
 8011aa4:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8011aa6:	2b00      	cmp	r3, #0
 8011aa8:	f000 8164 	beq.w	8011d74 <tcp_write+0x464>
 8011aac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011aae:	891b      	ldrh	r3, [r3, #8]
 8011ab0:	2b00      	cmp	r3, #0
 8011ab2:	f000 815f 	beq.w	8011d74 <tcp_write+0x464>
      u16_t seglen = LWIP_MIN(space, len - pos);
 8011ab6:	88fa      	ldrh	r2, [r7, #6]
 8011ab8:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8011abc:	1ad2      	subs	r2, r2, r3
 8011abe:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8011ac0:	4293      	cmp	r3, r2
 8011ac2:	bfa8      	it	ge
 8011ac4:	4613      	movge	r3, r2
 8011ac6:	83fb      	strh	r3, [r7, #30]
      seg = last_unsent;
 8011ac8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011aca:	64fb      	str	r3, [r7, #76]	; 0x4c

      /* Create a pbuf with a copy or reference to seglen bytes. We
       * can use PBUF_RAW here since the data appears in the middle of
       * a segment. A header will never be prepended. */
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 8011acc:	797b      	ldrb	r3, [r7, #5]
 8011ace:	f003 0301 	and.w	r3, r3, #1
 8011ad2:	2b00      	cmp	r3, #0
 8011ad4:	d027      	beq.n	8011b26 <tcp_write+0x216>
        /* Data is copied */
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 8011ad6:	f107 0012 	add.w	r0, r7, #18
 8011ada:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8011adc:	8bf9      	ldrh	r1, [r7, #30]
 8011ade:	2301      	movs	r3, #1
 8011ae0:	9302      	str	r3, [sp, #8]
 8011ae2:	797b      	ldrb	r3, [r7, #5]
 8011ae4:	9301      	str	r3, [sp, #4]
 8011ae6:	68fb      	ldr	r3, [r7, #12]
 8011ae8:	9300      	str	r3, [sp, #0]
 8011aea:	4603      	mov	r3, r0
 8011aec:	2004      	movs	r0, #4
 8011aee:	f7ff fe37 	bl	8011760 <tcp_pbuf_prealloc>
 8011af2:	6578      	str	r0, [r7, #84]	; 0x54
 8011af4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011af6:	2b00      	cmp	r3, #0
 8011af8:	f000 8227 	beq.w	8011f4a <tcp_write+0x63a>
          goto memerr;
        }
#if TCP_OVERSIZE_DBGCHECK
        oversize_add = oversize;
#endif /* TCP_OVERSIZE_DBGCHECK */
        TCP_DATA_COPY2(concat_p->payload, (const u8_t*)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 8011afc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011afe:	6858      	ldr	r0, [r3, #4]
 8011b00:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8011b04:	68ba      	ldr	r2, [r7, #8]
 8011b06:	4413      	add	r3, r2
 8011b08:	8bfa      	ldrh	r2, [r7, #30]
 8011b0a:	4619      	mov	r1, r3
 8011b0c:	f006 fce1 	bl	80184d2 <memcpy>
#if TCP_CHECKSUM_ON_COPY
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
        queuelen += pbuf_clen(concat_p);
 8011b10:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8011b12:	f7fb fcb7 	bl	800d484 <pbuf_clen>
 8011b16:	4603      	mov	r3, r0
 8011b18:	461a      	mov	r2, r3
 8011b1a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8011b1e:	4413      	add	r3, r2
 8011b20:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8011b24:	e03f      	b.n	8011ba6 <tcp_write+0x296>
      } else {
        /* Data is not copied */
        /* If the last unsent pbuf is of type PBUF_ROM, try to extend it. */
        struct pbuf *p;
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 8011b26:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011b28:	685b      	ldr	r3, [r3, #4]
 8011b2a:	637b      	str	r3, [r7, #52]	; 0x34
 8011b2c:	e002      	b.n	8011b34 <tcp_write+0x224>
 8011b2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011b30:	681b      	ldr	r3, [r3, #0]
 8011b32:	637b      	str	r3, [r7, #52]	; 0x34
 8011b34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011b36:	681b      	ldr	r3, [r3, #0]
 8011b38:	2b00      	cmp	r3, #0
 8011b3a:	d1f8      	bne.n	8011b2e <tcp_write+0x21e>
        if (p->type == PBUF_ROM && (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 8011b3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011b3e:	7b1b      	ldrb	r3, [r3, #12]
 8011b40:	2b01      	cmp	r3, #1
 8011b42:	d115      	bne.n	8011b70 <tcp_write+0x260>
 8011b44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011b46:	685b      	ldr	r3, [r3, #4]
 8011b48:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8011b4a:	8952      	ldrh	r2, [r2, #10]
 8011b4c:	4413      	add	r3, r2
 8011b4e:	68ba      	ldr	r2, [r7, #8]
 8011b50:	429a      	cmp	r2, r3
 8011b52:	d10d      	bne.n	8011b70 <tcp_write+0x260>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 8011b54:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8011b58:	2b00      	cmp	r3, #0
 8011b5a:	d006      	beq.n	8011b6a <tcp_write+0x25a>
 8011b5c:	4b1c      	ldr	r3, [pc, #112]	; (8011bd0 <tcp_write+0x2c0>)
 8011b5e:	f44f 7203 	mov.w	r2, #524	; 0x20c
 8011b62:	4921      	ldr	r1, [pc, #132]	; (8011be8 <tcp_write+0x2d8>)
 8011b64:	481c      	ldr	r0, [pc, #112]	; (8011bd8 <tcp_write+0x2c8>)
 8011b66:	f006 fd6f 	bl	8018648 <iprintf>
          extendlen = seglen;
 8011b6a:	8bfb      	ldrh	r3, [r7, #30]
 8011b6c:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8011b6e:	e01a      	b.n	8011ba6 <tcp_write+0x296>
        } else {
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 8011b70:	8bfb      	ldrh	r3, [r7, #30]
 8011b72:	2201      	movs	r2, #1
 8011b74:	4619      	mov	r1, r3
 8011b76:	2004      	movs	r0, #4
 8011b78:	f7fb f878 	bl	800cc6c <pbuf_alloc>
 8011b7c:	6578      	str	r0, [r7, #84]	; 0x54
 8011b7e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011b80:	2b00      	cmp	r3, #0
 8011b82:	f000 81e4 	beq.w	8011f4e <tcp_write+0x63e>
            LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                        ("tcp_write: could not allocate memory for zero-copy pbuf\n"));
            goto memerr;
          }
          /* reference the non-volatile payload data */
          ((struct pbuf_rom*)concat_p)->payload = (const u8_t*)arg + pos;
 8011b86:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8011b8a:	68ba      	ldr	r2, [r7, #8]
 8011b8c:	441a      	add	r2, r3
 8011b8e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011b90:	605a      	str	r2, [r3, #4]
          queuelen += pbuf_clen(concat_p);
 8011b92:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8011b94:	f7fb fc76 	bl	800d484 <pbuf_clen>
 8011b98:	4603      	mov	r3, r0
 8011b9a:	461a      	mov	r2, r3
 8011b9c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8011ba0:	4413      	add	r3, r2
 8011ba2:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
          &concat_chksum, &concat_chksum_swapped);
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
      }

      pos += seglen;
 8011ba6:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8011baa:	8bfb      	ldrh	r3, [r7, #30]
 8011bac:	4413      	add	r3, r2
 8011bae:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8011bb2:	e0df      	b.n	8011d74 <tcp_write+0x464>
    }
  } else {
#if TCP_OVERSIZE
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 8011bb4:	68fb      	ldr	r3, [r7, #12]
 8011bb6:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8011bba:	2b00      	cmp	r3, #0
 8011bbc:	f000 80da 	beq.w	8011d74 <tcp_write+0x464>
 8011bc0:	4b03      	ldr	r3, [pc, #12]	; (8011bd0 <tcp_write+0x2c0>)
 8011bc2:	f240 2225 	movw	r2, #549	; 0x225
 8011bc6:	4909      	ldr	r1, [pc, #36]	; (8011bec <tcp_write+0x2dc>)
 8011bc8:	4803      	ldr	r0, [pc, #12]	; (8011bd8 <tcp_write+0x2c8>)
 8011bca:	f006 fd3d 	bl	8018648 <iprintf>
   * Phase 3: Create new segments.
   *
   * The new segments are chained together in the local 'queue'
   * variable, ready to be appended to pcb->unsent.
   */
  while (pos < len) {
 8011bce:	e0d1      	b.n	8011d74 <tcp_write+0x464>
 8011bd0:	0801a648 	.word	0x0801a648
 8011bd4:	0801a770 	.word	0x0801a770
 8011bd8:	0801a6ac 	.word	0x0801a6ac
 8011bdc:	0801a7a4 	.word	0x0801a7a4
 8011be0:	0801a7bc 	.word	0x0801a7bc
 8011be4:	0801a7dc 	.word	0x0801a7dc
 8011be8:	0801a7fc 	.word	0x0801a7fc
 8011bec:	0801a828 	.word	0x0801a828
    struct pbuf *p;
    u16_t left = len - pos;
 8011bf0:	88fa      	ldrh	r2, [r7, #6]
 8011bf2:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8011bf6:	1ad3      	subs	r3, r2, r3
 8011bf8:	83bb      	strh	r3, [r7, #28]
    u16_t max_len = mss_local - optlen;
 8011bfa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011bfe:	b29b      	uxth	r3, r3
 8011c00:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8011c02:	1ad3      	subs	r3, r2, r3
 8011c04:	837b      	strh	r3, [r7, #26]
    u16_t seglen = LWIP_MIN(left, max_len);
 8011c06:	8b7a      	ldrh	r2, [r7, #26]
 8011c08:	8bbb      	ldrh	r3, [r7, #28]
 8011c0a:	4293      	cmp	r3, r2
 8011c0c:	bf28      	it	cs
 8011c0e:	4613      	movcs	r3, r2
 8011c10:	833b      	strh	r3, [r7, #24]
#if TCP_CHECKSUM_ON_COPY
    u16_t chksum = 0;
    u8_t chksum_swapped = 0;
#endif /* TCP_CHECKSUM_ON_COPY */

    if (apiflags & TCP_WRITE_FLAG_COPY) {
 8011c12:	797b      	ldrb	r3, [r7, #5]
 8011c14:	f003 0301 	and.w	r3, r3, #1
 8011c18:	2b00      	cmp	r3, #0
 8011c1a:	d036      	beq.n	8011c8a <tcp_write+0x37a>
      /* If copy is set, memory should be allocated and data copied
       * into pbuf */
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 8011c1c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011c20:	b29a      	uxth	r2, r3
 8011c22:	8b3b      	ldrh	r3, [r7, #24]
 8011c24:	4413      	add	r3, r2
 8011c26:	b299      	uxth	r1, r3
 8011c28:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011c2a:	2b00      	cmp	r3, #0
 8011c2c:	bf0c      	ite	eq
 8011c2e:	2301      	moveq	r3, #1
 8011c30:	2300      	movne	r3, #0
 8011c32:	b2db      	uxtb	r3, r3
 8011c34:	f107 0012 	add.w	r0, r7, #18
 8011c38:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8011c3a:	9302      	str	r3, [sp, #8]
 8011c3c:	797b      	ldrb	r3, [r7, #5]
 8011c3e:	9301      	str	r3, [sp, #4]
 8011c40:	68fb      	ldr	r3, [r7, #12]
 8011c42:	9300      	str	r3, [sp, #0]
 8011c44:	4603      	mov	r3, r0
 8011c46:	2000      	movs	r0, #0
 8011c48:	f7ff fd8a 	bl	8011760 <tcp_pbuf_prealloc>
 8011c4c:	6338      	str	r0, [r7, #48]	; 0x30
 8011c4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011c50:	2b00      	cmp	r3, #0
 8011c52:	f000 817e 	beq.w	8011f52 <tcp_write+0x642>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write : could not allocate memory for pbuf copy size %"U16_F"\n", seglen));
        goto memerr;
      }
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 8011c56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011c58:	895b      	ldrh	r3, [r3, #10]
 8011c5a:	8b3a      	ldrh	r2, [r7, #24]
 8011c5c:	429a      	cmp	r2, r3
 8011c5e:	d906      	bls.n	8011c6e <tcp_write+0x35e>
 8011c60:	4b8f      	ldr	r3, [pc, #572]	; (8011ea0 <tcp_write+0x590>)
 8011c62:	f240 2241 	movw	r2, #577	; 0x241
 8011c66:	498f      	ldr	r1, [pc, #572]	; (8011ea4 <tcp_write+0x594>)
 8011c68:	488f      	ldr	r0, [pc, #572]	; (8011ea8 <tcp_write+0x598>)
 8011c6a:	f006 fced 	bl	8018648 <iprintf>
                  (p->len >= seglen));
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t*)arg + pos, seglen, &chksum, &chksum_swapped);
 8011c6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011c70:	685a      	ldr	r2, [r3, #4]
 8011c72:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011c76:	18d0      	adds	r0, r2, r3
 8011c78:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8011c7c:	68ba      	ldr	r2, [r7, #8]
 8011c7e:	4413      	add	r3, r2
 8011c80:	8b3a      	ldrh	r2, [r7, #24]
 8011c82:	4619      	mov	r1, r3
 8011c84:	f006 fc25 	bl	80184d2 <memcpy>
 8011c88:	e02e      	b.n	8011ce8 <tcp_write+0x3d8>
       * sent out on the link (as it has to be ACKed by the remote
       * party) we can safely use PBUF_ROM instead of PBUF_REF here.
       */
      struct pbuf *p2;
#if TCP_OVERSIZE
      LWIP_ASSERT("oversize == 0", oversize == 0);
 8011c8a:	8a7b      	ldrh	r3, [r7, #18]
 8011c8c:	2b00      	cmp	r3, #0
 8011c8e:	d006      	beq.n	8011c9e <tcp_write+0x38e>
 8011c90:	4b83      	ldr	r3, [pc, #524]	; (8011ea0 <tcp_write+0x590>)
 8011c92:	f240 224b 	movw	r2, #587	; 0x24b
 8011c96:	4985      	ldr	r1, [pc, #532]	; (8011eac <tcp_write+0x59c>)
 8011c98:	4883      	ldr	r0, [pc, #524]	; (8011ea8 <tcp_write+0x598>)
 8011c9a:	f006 fcd5 	bl	8018648 <iprintf>
#endif /* TCP_OVERSIZE */
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 8011c9e:	8b3b      	ldrh	r3, [r7, #24]
 8011ca0:	2201      	movs	r2, #1
 8011ca2:	4619      	mov	r1, r3
 8011ca4:	2000      	movs	r0, #0
 8011ca6:	f7fa ffe1 	bl	800cc6c <pbuf_alloc>
 8011caa:	6178      	str	r0, [r7, #20]
 8011cac:	697b      	ldr	r3, [r7, #20]
 8011cae:	2b00      	cmp	r3, #0
 8011cb0:	f000 8151 	beq.w	8011f56 <tcp_write+0x646>
        chksum_swapped = 1;
        chksum = SWAP_BYTES_IN_WORD(chksum);
      }
#endif /* TCP_CHECKSUM_ON_COPY */
      /* reference the non-volatile payload data */
      ((struct pbuf_rom*)p2)->payload = (const u8_t*)arg + pos;
 8011cb4:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8011cb8:	68ba      	ldr	r2, [r7, #8]
 8011cba:	441a      	add	r2, r3
 8011cbc:	697b      	ldr	r3, [r7, #20]
 8011cbe:	605a      	str	r2, [r3, #4]

      /* Second, allocate a pbuf for the headers. */
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8011cc0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011cc4:	b29b      	uxth	r3, r3
 8011cc6:	2200      	movs	r2, #0
 8011cc8:	4619      	mov	r1, r3
 8011cca:	2000      	movs	r0, #0
 8011ccc:	f7fa ffce 	bl	800cc6c <pbuf_alloc>
 8011cd0:	6338      	str	r0, [r7, #48]	; 0x30
 8011cd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011cd4:	2b00      	cmp	r3, #0
 8011cd6:	d103      	bne.n	8011ce0 <tcp_write+0x3d0>
        /* If allocation fails, we have to deallocate the data pbuf as
         * well. */
        pbuf_free(p2);
 8011cd8:	6978      	ldr	r0, [r7, #20]
 8011cda:	f7fb fb39 	bl	800d350 <pbuf_free>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: could not allocate memory for header pbuf\n"));
        goto memerr;
 8011cde:	e13d      	b.n	8011f5c <tcp_write+0x64c>
      }
      /* Concatenate the headers and data pbufs together. */
      pbuf_cat(p/*header*/, p2/*data*/);
 8011ce0:	6979      	ldr	r1, [r7, #20]
 8011ce2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011ce4:	f7fb fc0e 	bl	800d504 <pbuf_cat>
    }

    queuelen += pbuf_clen(p);
 8011ce8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011cea:	f7fb fbcb 	bl	800d484 <pbuf_clen>
 8011cee:	4603      	mov	r3, r0
 8011cf0:	461a      	mov	r2, r3
 8011cf2:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8011cf6:	4413      	add	r3, r2
 8011cf8:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

    /* Now that there are more segments queued, we check again if the
     * length of the queue exceeds the configured maximum or
     * overflows. */
    if ((queuelen > TCP_SND_QUEUELEN) || (queuelen > TCP_SNDQUEUELEN_OVERFLOW)) {
 8011cfc:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8011d00:	2b09      	cmp	r3, #9
 8011d02:	d805      	bhi.n	8011d10 <tcp_write+0x400>
 8011d04:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8011d08:	f64f 72fc 	movw	r2, #65532	; 0xfffc
 8011d0c:	4293      	cmp	r3, r2
 8011d0e:	d903      	bls.n	8011d18 <tcp_write+0x408>
      LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: queue too long %"U16_F" (%d)\n",
        queuelen, (int)TCP_SND_QUEUELEN));
      pbuf_free(p);
 8011d10:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011d12:	f7fb fb1d 	bl	800d350 <pbuf_free>
      goto memerr;
 8011d16:	e121      	b.n	8011f5c <tcp_write+0x64c>
    }

    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 8011d18:	68fb      	ldr	r3, [r7, #12]
 8011d1a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8011d1c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8011d20:	441a      	add	r2, r3
 8011d22:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8011d26:	9300      	str	r3, [sp, #0]
 8011d28:	4613      	mov	r3, r2
 8011d2a:	2200      	movs	r2, #0
 8011d2c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8011d2e:	68f8      	ldr	r0, [r7, #12]
 8011d30:	f7ff fc8e 	bl	8011650 <tcp_create_segment>
 8011d34:	64f8      	str	r0, [r7, #76]	; 0x4c
 8011d36:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011d38:	2b00      	cmp	r3, #0
 8011d3a:	f000 810e 	beq.w	8011f5a <tcp_write+0x64a>
    seg->chksum_swapped = chksum_swapped;
    seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

    /* first segment of to-be-queued data? */
    if (queue == NULL) {
 8011d3e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011d40:	2b00      	cmp	r3, #0
 8011d42:	d102      	bne.n	8011d4a <tcp_write+0x43a>
      queue = seg;
 8011d44:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011d46:	647b      	str	r3, [r7, #68]	; 0x44
 8011d48:	e00c      	b.n	8011d64 <tcp_write+0x454>
    } else {
      /* Attach the segment to the end of the queued segments */
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 8011d4a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011d4c:	2b00      	cmp	r3, #0
 8011d4e:	d106      	bne.n	8011d5e <tcp_write+0x44e>
 8011d50:	4b53      	ldr	r3, [pc, #332]	; (8011ea0 <tcp_write+0x590>)
 8011d52:	f240 2285 	movw	r2, #645	; 0x285
 8011d56:	4956      	ldr	r1, [pc, #344]	; (8011eb0 <tcp_write+0x5a0>)
 8011d58:	4853      	ldr	r0, [pc, #332]	; (8011ea8 <tcp_write+0x598>)
 8011d5a:	f006 fc75 	bl	8018648 <iprintf>
      prev_seg->next = seg;
 8011d5e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011d60:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8011d62:	601a      	str	r2, [r3, #0]
    }
    /* remember last segment of to-be-queued data for next iteration */
    prev_seg = seg;
 8011d64:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011d66:	64bb      	str	r3, [r7, #72]	; 0x48

    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_TRACE, ("tcp_write: queueing %"U32_F":%"U32_F"\n",
      lwip_ntohl(seg->tcphdr->seqno),
      lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg)));

    pos += seglen;
 8011d68:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8011d6c:	8b3b      	ldrh	r3, [r7, #24]
 8011d6e:	4413      	add	r3, r2
 8011d70:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  while (pos < len) {
 8011d74:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8011d78:	88fb      	ldrh	r3, [r7, #6]
 8011d7a:	429a      	cmp	r2, r3
 8011d7c:	f4ff af38 	bcc.w	8011bf0 <tcp_write+0x2e0>
  /*
   * Phase 1: If data has been added to the preallocated tail of
   * last_unsent, we update the length fields of the pbuf chain.
   */
#if TCP_OVERSIZE
  if (oversize_used > 0) {
 8011d80:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8011d82:	2b00      	cmp	r3, #0
 8011d84:	d02c      	beq.n	8011de0 <tcp_write+0x4d0>
    struct pbuf *p;
    /* Bump tot_len of whole chain, len of tail */
    for (p = last_unsent->p; p; p = p->next) {
 8011d86:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011d88:	685b      	ldr	r3, [r3, #4]
 8011d8a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8011d8c:	e01e      	b.n	8011dcc <tcp_write+0x4bc>
      p->tot_len += oversize_used;
 8011d8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011d90:	891a      	ldrh	r2, [r3, #8]
 8011d92:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8011d94:	4413      	add	r3, r2
 8011d96:	b29a      	uxth	r2, r3
 8011d98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011d9a:	811a      	strh	r2, [r3, #8]
      if (p->next == NULL) {
 8011d9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011d9e:	681b      	ldr	r3, [r3, #0]
 8011da0:	2b00      	cmp	r3, #0
 8011da2:	d110      	bne.n	8011dc6 <tcp_write+0x4b6>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 8011da4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011da6:	685b      	ldr	r3, [r3, #4]
 8011da8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011daa:	8952      	ldrh	r2, [r2, #10]
 8011dac:	4413      	add	r3, r2
 8011dae:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8011db0:	68b9      	ldr	r1, [r7, #8]
 8011db2:	4618      	mov	r0, r3
 8011db4:	f006 fb8d 	bl	80184d2 <memcpy>
        p->len += oversize_used;
 8011db8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011dba:	895a      	ldrh	r2, [r3, #10]
 8011dbc:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8011dbe:	4413      	add	r3, r2
 8011dc0:	b29a      	uxth	r2, r3
 8011dc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011dc4:	815a      	strh	r2, [r3, #10]
    for (p = last_unsent->p; p; p = p->next) {
 8011dc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011dc8:	681b      	ldr	r3, [r3, #0]
 8011dca:	62fb      	str	r3, [r7, #44]	; 0x2c
 8011dcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011dce:	2b00      	cmp	r3, #0
 8011dd0:	d1dd      	bne.n	8011d8e <tcp_write+0x47e>
      }
    }
    last_unsent->len += oversize_used;
 8011dd2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011dd4:	891a      	ldrh	r2, [r3, #8]
 8011dd6:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8011dd8:	4413      	add	r3, r2
 8011dda:	b29a      	uxth	r2, r3
 8011ddc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011dde:	811a      	strh	r2, [r3, #8]
    LWIP_ASSERT("last_unsent->oversize_left >= oversize_used",
                last_unsent->oversize_left >= oversize_used);
    last_unsent->oversize_left -= oversize_used;
#endif /* TCP_OVERSIZE_DBGCHECK */
  }
  pcb->unsent_oversize = oversize;
 8011de0:	8a7a      	ldrh	r2, [r7, #18]
 8011de2:	68fb      	ldr	r3, [r7, #12]
 8011de4:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64

  /*
   * Phase 2: concat_p can be concatenated onto last_unsent->p, unless we
   * determined that the last ROM pbuf can be extended to include the new data.
   */
  if (concat_p != NULL) {
 8011de8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011dea:	2b00      	cmp	r3, #0
 8011dec:	d018      	beq.n	8011e20 <tcp_write+0x510>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 8011dee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011df0:	2b00      	cmp	r3, #0
 8011df2:	d106      	bne.n	8011e02 <tcp_write+0x4f2>
 8011df4:	4b2a      	ldr	r3, [pc, #168]	; (8011ea0 <tcp_write+0x590>)
 8011df6:	f240 22bb 	movw	r2, #699	; 0x2bb
 8011dfa:	492e      	ldr	r1, [pc, #184]	; (8011eb4 <tcp_write+0x5a4>)
 8011dfc:	482a      	ldr	r0, [pc, #168]	; (8011ea8 <tcp_write+0x598>)
 8011dfe:	f006 fc23 	bl	8018648 <iprintf>
      (last_unsent != NULL));
    pbuf_cat(last_unsent->p, concat_p);
 8011e02:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011e04:	685b      	ldr	r3, [r3, #4]
 8011e06:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8011e08:	4618      	mov	r0, r3
 8011e0a:	f7fb fb7b 	bl	800d504 <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 8011e0e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011e10:	891a      	ldrh	r2, [r3, #8]
 8011e12:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011e14:	891b      	ldrh	r3, [r3, #8]
 8011e16:	4413      	add	r3, r2
 8011e18:	b29a      	uxth	r2, r3
 8011e1a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011e1c:	811a      	strh	r2, [r3, #8]
 8011e1e:	e037      	b.n	8011e90 <tcp_write+0x580>
  } else if (extendlen > 0) {
 8011e20:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8011e22:	2b00      	cmp	r3, #0
 8011e24:	d034      	beq.n	8011e90 <tcp_write+0x580>
    struct pbuf *p;
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 8011e26:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011e28:	2b00      	cmp	r3, #0
 8011e2a:	d003      	beq.n	8011e34 <tcp_write+0x524>
 8011e2c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011e2e:	685b      	ldr	r3, [r3, #4]
 8011e30:	2b00      	cmp	r3, #0
 8011e32:	d106      	bne.n	8011e42 <tcp_write+0x532>
 8011e34:	4b1a      	ldr	r3, [pc, #104]	; (8011ea0 <tcp_write+0x590>)
 8011e36:	f240 22c1 	movw	r2, #705	; 0x2c1
 8011e3a:	491f      	ldr	r1, [pc, #124]	; (8011eb8 <tcp_write+0x5a8>)
 8011e3c:	481a      	ldr	r0, [pc, #104]	; (8011ea8 <tcp_write+0x598>)
 8011e3e:	f006 fc03 	bl	8018648 <iprintf>
      last_unsent != NULL && last_unsent->p != NULL);
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 8011e42:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011e44:	685b      	ldr	r3, [r3, #4]
 8011e46:	62bb      	str	r3, [r7, #40]	; 0x28
 8011e48:	e009      	b.n	8011e5e <tcp_write+0x54e>
      p->tot_len += extendlen;
 8011e4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011e4c:	891a      	ldrh	r2, [r3, #8]
 8011e4e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8011e50:	4413      	add	r3, r2
 8011e52:	b29a      	uxth	r2, r3
 8011e54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011e56:	811a      	strh	r2, [r3, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 8011e58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011e5a:	681b      	ldr	r3, [r3, #0]
 8011e5c:	62bb      	str	r3, [r7, #40]	; 0x28
 8011e5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011e60:	681b      	ldr	r3, [r3, #0]
 8011e62:	2b00      	cmp	r3, #0
 8011e64:	d1f1      	bne.n	8011e4a <tcp_write+0x53a>
    }
    p->tot_len += extendlen;
 8011e66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011e68:	891a      	ldrh	r2, [r3, #8]
 8011e6a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8011e6c:	4413      	add	r3, r2
 8011e6e:	b29a      	uxth	r2, r3
 8011e70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011e72:	811a      	strh	r2, [r3, #8]
    p->len += extendlen;
 8011e74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011e76:	895a      	ldrh	r2, [r3, #10]
 8011e78:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8011e7a:	4413      	add	r3, r2
 8011e7c:	b29a      	uxth	r2, r3
 8011e7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011e80:	815a      	strh	r2, [r3, #10]
    last_unsent->len += extendlen;
 8011e82:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011e84:	891a      	ldrh	r2, [r3, #8]
 8011e86:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8011e88:	4413      	add	r3, r2
 8011e8a:	b29a      	uxth	r2, r3
 8011e8c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011e8e:	811a      	strh	r2, [r3, #8]

  /*
   * Phase 3: Append queue to pcb->unsent. Queue may be NULL, but that
   * is harmless
   */
  if (last_unsent == NULL) {
 8011e90:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011e92:	2b00      	cmp	r3, #0
 8011e94:	d112      	bne.n	8011ebc <tcp_write+0x5ac>
    pcb->unsent = queue;
 8011e96:	68fb      	ldr	r3, [r7, #12]
 8011e98:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8011e9a:	669a      	str	r2, [r3, #104]	; 0x68
 8011e9c:	e011      	b.n	8011ec2 <tcp_write+0x5b2>
 8011e9e:	bf00      	nop
 8011ea0:	0801a648 	.word	0x0801a648
 8011ea4:	0801a858 	.word	0x0801a858
 8011ea8:	0801a6ac 	.word	0x0801a6ac
 8011eac:	0801a898 	.word	0x0801a898
 8011eb0:	0801a8a8 	.word	0x0801a8a8
 8011eb4:	0801a8bc 	.word	0x0801a8bc
 8011eb8:	0801a8f4 	.word	0x0801a8f4
  } else {
    last_unsent->next = queue;
 8011ebc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011ebe:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8011ec0:	601a      	str	r2, [r3, #0]
  }

  /*
   * Finally update the pcb state.
   */
  pcb->snd_lbb += len;
 8011ec2:	68fb      	ldr	r3, [r7, #12]
 8011ec4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8011ec6:	88fb      	ldrh	r3, [r7, #6]
 8011ec8:	441a      	add	r2, r3
 8011eca:	68fb      	ldr	r3, [r7, #12]
 8011ecc:	659a      	str	r2, [r3, #88]	; 0x58
  pcb->snd_buf -= len;
 8011ece:	68fb      	ldr	r3, [r7, #12]
 8011ed0:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8011ed4:	88fb      	ldrh	r3, [r7, #6]
 8011ed6:	1ad3      	subs	r3, r2, r3
 8011ed8:	b29a      	uxth	r2, r3
 8011eda:	68fb      	ldr	r3, [r7, #12]
 8011edc:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  pcb->snd_queuelen = queuelen;
 8011ee0:	68fb      	ldr	r3, [r7, #12]
 8011ee2:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8011ee6:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: %"S16_F" (after enqueued)\n",
    pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 8011eea:	68fb      	ldr	r3, [r7, #12]
 8011eec:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8011ef0:	2b00      	cmp	r3, #0
 8011ef2:	d00e      	beq.n	8011f12 <tcp_write+0x602>
    LWIP_ASSERT("tcp_write: valid queue length",
 8011ef4:	68fb      	ldr	r3, [r7, #12]
 8011ef6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011ef8:	2b00      	cmp	r3, #0
 8011efa:	d10a      	bne.n	8011f12 <tcp_write+0x602>
 8011efc:	68fb      	ldr	r3, [r7, #12]
 8011efe:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8011f00:	2b00      	cmp	r3, #0
 8011f02:	d106      	bne.n	8011f12 <tcp_write+0x602>
 8011f04:	4b2c      	ldr	r3, [pc, #176]	; (8011fb8 <tcp_write+0x6a8>)
 8011f06:	f240 22ed 	movw	r2, #749	; 0x2ed
 8011f0a:	492c      	ldr	r1, [pc, #176]	; (8011fbc <tcp_write+0x6ac>)
 8011f0c:	482c      	ldr	r0, [pc, #176]	; (8011fc0 <tcp_write+0x6b0>)
 8011f0e:	f006 fb9b 	bl	8018648 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  /* Set the PSH flag in the last segment that we enqueued. */
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE)==0)) {
 8011f12:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011f14:	2b00      	cmp	r3, #0
 8011f16:	d016      	beq.n	8011f46 <tcp_write+0x636>
 8011f18:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011f1a:	68db      	ldr	r3, [r3, #12]
 8011f1c:	2b00      	cmp	r3, #0
 8011f1e:	d012      	beq.n	8011f46 <tcp_write+0x636>
 8011f20:	797b      	ldrb	r3, [r7, #5]
 8011f22:	f003 0302 	and.w	r3, r3, #2
 8011f26:	2b00      	cmp	r3, #0
 8011f28:	d10d      	bne.n	8011f46 <tcp_write+0x636>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 8011f2a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011f2c:	68db      	ldr	r3, [r3, #12]
 8011f2e:	899b      	ldrh	r3, [r3, #12]
 8011f30:	b29c      	uxth	r4, r3
 8011f32:	2008      	movs	r0, #8
 8011f34:	f7fa f86a 	bl	800c00c <lwip_htons>
 8011f38:	4603      	mov	r3, r0
 8011f3a:	461a      	mov	r2, r3
 8011f3c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011f3e:	68db      	ldr	r3, [r3, #12]
 8011f40:	4322      	orrs	r2, r4
 8011f42:	b292      	uxth	r2, r2
 8011f44:	819a      	strh	r2, [r3, #12]
  }

  return ERR_OK;
 8011f46:	2300      	movs	r3, #0
 8011f48:	e031      	b.n	8011fae <tcp_write+0x69e>
          goto memerr;
 8011f4a:	bf00      	nop
 8011f4c:	e006      	b.n	8011f5c <tcp_write+0x64c>
            goto memerr;
 8011f4e:	bf00      	nop
 8011f50:	e004      	b.n	8011f5c <tcp_write+0x64c>
        goto memerr;
 8011f52:	bf00      	nop
 8011f54:	e002      	b.n	8011f5c <tcp_write+0x64c>
        goto memerr;
 8011f56:	bf00      	nop
 8011f58:	e000      	b.n	8011f5c <tcp_write+0x64c>
      goto memerr;
 8011f5a:	bf00      	nop
memerr:
  pcb->flags |= TF_NAGLEMEMERR;
 8011f5c:	68fb      	ldr	r3, [r7, #12]
 8011f5e:	7e9b      	ldrb	r3, [r3, #26]
 8011f60:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8011f64:	b2da      	uxtb	r2, r3
 8011f66:	68fb      	ldr	r3, [r7, #12]
 8011f68:	769a      	strb	r2, [r3, #26]
  TCP_STATS_INC(tcp.memerr);

  if (concat_p != NULL) {
 8011f6a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011f6c:	2b00      	cmp	r3, #0
 8011f6e:	d002      	beq.n	8011f76 <tcp_write+0x666>
    pbuf_free(concat_p);
 8011f70:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8011f72:	f7fb f9ed 	bl	800d350 <pbuf_free>
  }
  if (queue != NULL) {
 8011f76:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011f78:	2b00      	cmp	r3, #0
 8011f7a:	d002      	beq.n	8011f82 <tcp_write+0x672>
    tcp_segs_free(queue);
 8011f7c:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8011f7e:	f7fc fcc6 	bl	800e90e <tcp_segs_free>
  }
  if (pcb->snd_queuelen != 0) {
 8011f82:	68fb      	ldr	r3, [r7, #12]
 8011f84:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8011f88:	2b00      	cmp	r3, #0
 8011f8a:	d00e      	beq.n	8011faa <tcp_write+0x69a>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 8011f8c:	68fb      	ldr	r3, [r7, #12]
 8011f8e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011f90:	2b00      	cmp	r3, #0
 8011f92:	d10a      	bne.n	8011faa <tcp_write+0x69a>
 8011f94:	68fb      	ldr	r3, [r7, #12]
 8011f96:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8011f98:	2b00      	cmp	r3, #0
 8011f9a:	d106      	bne.n	8011faa <tcp_write+0x69a>
 8011f9c:	4b06      	ldr	r3, [pc, #24]	; (8011fb8 <tcp_write+0x6a8>)
 8011f9e:	f240 3202 	movw	r2, #770	; 0x302
 8011fa2:	4906      	ldr	r1, [pc, #24]	; (8011fbc <tcp_write+0x6ac>)
 8011fa4:	4806      	ldr	r0, [pc, #24]	; (8011fc0 <tcp_write+0x6b0>)
 8011fa6:	f006 fb4f 	bl	8018648 <iprintf>
      pcb->unsent != NULL);
  }
  LWIP_DEBUGF(TCP_QLEN_DEBUG | LWIP_DBG_STATE, ("tcp_write: %"S16_F" (with mem err)\n", pcb->snd_queuelen));
  return ERR_MEM;
 8011faa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8011fae:	4618      	mov	r0, r3
 8011fb0:	375c      	adds	r7, #92	; 0x5c
 8011fb2:	46bd      	mov	sp, r7
 8011fb4:	bd90      	pop	{r4, r7, pc}
 8011fb6:	bf00      	nop
 8011fb8:	0801a648 	.word	0x0801a648
 8011fbc:	0801a92c 	.word	0x0801a92c
 8011fc0:	0801a6ac 	.word	0x0801a6ac

08011fc4 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 8011fc4:	b580      	push	{r7, lr}
 8011fc6:	b08a      	sub	sp, #40	; 0x28
 8011fc8:	af02      	add	r7, sp, #8
 8011fca:	6078      	str	r0, [r7, #4]
 8011fcc:	460b      	mov	r3, r1
 8011fce:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 8011fd0:	2300      	movs	r3, #0
 8011fd2:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 8011fd4:	2300      	movs	r3, #0
 8011fd6:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 8011fd8:	78fb      	ldrb	r3, [r7, #3]
 8011fda:	f003 0303 	and.w	r3, r3, #3
 8011fde:	2b00      	cmp	r3, #0
 8011fe0:	d106      	bne.n	8011ff0 <tcp_enqueue_flags+0x2c>
 8011fe2:	4b6f      	ldr	r3, [pc, #444]	; (80121a0 <tcp_enqueue_flags+0x1dc>)
 8011fe4:	f240 321b 	movw	r2, #795	; 0x31b
 8011fe8:	496e      	ldr	r1, [pc, #440]	; (80121a4 <tcp_enqueue_flags+0x1e0>)
 8011fea:	486f      	ldr	r0, [pc, #444]	; (80121a8 <tcp_enqueue_flags+0x1e4>)
 8011fec:	f006 fb2c 	bl	8018648 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);

  /* check for configured max queuelen and possible overflow (FIN flag should always come through!) */
  if (((pcb->snd_queuelen >= TCP_SND_QUEUELEN) || (pcb->snd_queuelen > TCP_SNDQUEUELEN_OVERFLOW)) &&
 8011ff0:	687b      	ldr	r3, [r7, #4]
 8011ff2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8011ff6:	2b08      	cmp	r3, #8
 8011ff8:	d806      	bhi.n	8012008 <tcp_enqueue_flags+0x44>
 8011ffa:	687b      	ldr	r3, [r7, #4]
 8011ffc:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8012000:	f64f 72fc 	movw	r2, #65532	; 0xfffc
 8012004:	4293      	cmp	r3, r2
 8012006:	d90e      	bls.n	8012026 <tcp_enqueue_flags+0x62>
      ((flags & TCP_FIN) == 0)) {
 8012008:	78fb      	ldrb	r3, [r7, #3]
 801200a:	f003 0301 	and.w	r3, r3, #1
  if (((pcb->snd_queuelen >= TCP_SND_QUEUELEN) || (pcb->snd_queuelen > TCP_SNDQUEUELEN_OVERFLOW)) &&
 801200e:	2b00      	cmp	r3, #0
 8012010:	d109      	bne.n	8012026 <tcp_enqueue_flags+0x62>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_enqueue_flags: too long queue %"U16_F" (max %"U16_F")\n",
                                       pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    pcb->flags |= TF_NAGLEMEMERR;
 8012012:	687b      	ldr	r3, [r7, #4]
 8012014:	7e9b      	ldrb	r3, [r3, #26]
 8012016:	f063 037f 	orn	r3, r3, #127	; 0x7f
 801201a:	b2da      	uxtb	r2, r3
 801201c:	687b      	ldr	r3, [r7, #4]
 801201e:	769a      	strb	r2, [r3, #26]
    return ERR_MEM;
 8012020:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8012024:	e0b7      	b.n	8012196 <tcp_enqueue_flags+0x1d2>
  }

  if (flags & TCP_SYN) {
 8012026:	78fb      	ldrb	r3, [r7, #3]
 8012028:	f003 0302 	and.w	r3, r3, #2
 801202c:	2b00      	cmp	r3, #0
 801202e:	d001      	beq.n	8012034 <tcp_enqueue_flags+0x70>
    optflags = TF_SEG_OPTS_MSS;
 8012030:	2301      	movs	r3, #1
 8012032:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host. */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 8012034:	7ffb      	ldrb	r3, [r7, #31]
 8012036:	009b      	lsls	r3, r3, #2
 8012038:	b2db      	uxtb	r3, r3
 801203a:	f003 0304 	and.w	r3, r3, #4
 801203e:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8012040:	7dfb      	ldrb	r3, [r7, #23]
 8012042:	b29b      	uxth	r3, r3
 8012044:	2200      	movs	r2, #0
 8012046:	4619      	mov	r1, r3
 8012048:	2000      	movs	r0, #0
 801204a:	f7fa fe0f 	bl	800cc6c <pbuf_alloc>
 801204e:	6138      	str	r0, [r7, #16]
 8012050:	693b      	ldr	r3, [r7, #16]
 8012052:	2b00      	cmp	r3, #0
 8012054:	d109      	bne.n	801206a <tcp_enqueue_flags+0xa6>
    pcb->flags |= TF_NAGLEMEMERR;
 8012056:	687b      	ldr	r3, [r7, #4]
 8012058:	7e9b      	ldrb	r3, [r3, #26]
 801205a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 801205e:	b2da      	uxtb	r2, r3
 8012060:	687b      	ldr	r3, [r7, #4]
 8012062:	769a      	strb	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8012064:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8012068:	e095      	b.n	8012196 <tcp_enqueue_flags+0x1d2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 801206a:	693b      	ldr	r3, [r7, #16]
 801206c:	895a      	ldrh	r2, [r3, #10]
 801206e:	7dfb      	ldrb	r3, [r7, #23]
 8012070:	b29b      	uxth	r3, r3
 8012072:	429a      	cmp	r2, r3
 8012074:	d206      	bcs.n	8012084 <tcp_enqueue_flags+0xc0>
 8012076:	4b4a      	ldr	r3, [pc, #296]	; (80121a0 <tcp_enqueue_flags+0x1dc>)
 8012078:	f240 3241 	movw	r2, #833	; 0x341
 801207c:	494b      	ldr	r1, [pc, #300]	; (80121ac <tcp_enqueue_flags+0x1e8>)
 801207e:	484a      	ldr	r0, [pc, #296]	; (80121a8 <tcp_enqueue_flags+0x1e4>)
 8012080:	f006 fae2 	bl	8018648 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 8012084:	687b      	ldr	r3, [r7, #4]
 8012086:	6d99      	ldr	r1, [r3, #88]	; 0x58
 8012088:	78fa      	ldrb	r2, [r7, #3]
 801208a:	7ffb      	ldrb	r3, [r7, #31]
 801208c:	9300      	str	r3, [sp, #0]
 801208e:	460b      	mov	r3, r1
 8012090:	6939      	ldr	r1, [r7, #16]
 8012092:	6878      	ldr	r0, [r7, #4]
 8012094:	f7ff fadc 	bl	8011650 <tcp_create_segment>
 8012098:	60f8      	str	r0, [r7, #12]
 801209a:	68fb      	ldr	r3, [r7, #12]
 801209c:	2b00      	cmp	r3, #0
 801209e:	d109      	bne.n	80120b4 <tcp_enqueue_flags+0xf0>
    pcb->flags |= TF_NAGLEMEMERR;
 80120a0:	687b      	ldr	r3, [r7, #4]
 80120a2:	7e9b      	ldrb	r3, [r3, #26]
 80120a4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80120a8:	b2da      	uxtb	r2, r3
 80120aa:	687b      	ldr	r3, [r7, #4]
 80120ac:	769a      	strb	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 80120ae:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80120b2:	e070      	b.n	8012196 <tcp_enqueue_flags+0x1d2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 80120b4:	68fb      	ldr	r3, [r7, #12]
 80120b6:	68db      	ldr	r3, [r3, #12]
 80120b8:	f003 0303 	and.w	r3, r3, #3
 80120bc:	2b00      	cmp	r3, #0
 80120be:	d006      	beq.n	80120ce <tcp_enqueue_flags+0x10a>
 80120c0:	4b37      	ldr	r3, [pc, #220]	; (80121a0 <tcp_enqueue_flags+0x1dc>)
 80120c2:	f240 3249 	movw	r2, #841	; 0x349
 80120c6:	493a      	ldr	r1, [pc, #232]	; (80121b0 <tcp_enqueue_flags+0x1ec>)
 80120c8:	4837      	ldr	r0, [pc, #220]	; (80121a8 <tcp_enqueue_flags+0x1e4>)
 80120ca:	f006 fabd 	bl	8018648 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 80120ce:	68fb      	ldr	r3, [r7, #12]
 80120d0:	891b      	ldrh	r3, [r3, #8]
 80120d2:	2b00      	cmp	r3, #0
 80120d4:	d006      	beq.n	80120e4 <tcp_enqueue_flags+0x120>
 80120d6:	4b32      	ldr	r3, [pc, #200]	; (80121a0 <tcp_enqueue_flags+0x1dc>)
 80120d8:	f240 324a 	movw	r2, #842	; 0x34a
 80120dc:	4935      	ldr	r1, [pc, #212]	; (80121b4 <tcp_enqueue_flags+0x1f0>)
 80120de:	4832      	ldr	r0, [pc, #200]	; (80121a8 <tcp_enqueue_flags+0x1e4>)
 80120e0:	f006 fab2 	bl	8018648 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 80120e4:	687b      	ldr	r3, [r7, #4]
 80120e6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80120e8:	2b00      	cmp	r3, #0
 80120ea:	d103      	bne.n	80120f4 <tcp_enqueue_flags+0x130>
    pcb->unsent = seg;
 80120ec:	687b      	ldr	r3, [r7, #4]
 80120ee:	68fa      	ldr	r2, [r7, #12]
 80120f0:	669a      	str	r2, [r3, #104]	; 0x68
 80120f2:	e00d      	b.n	8012110 <tcp_enqueue_flags+0x14c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 80120f4:	687b      	ldr	r3, [r7, #4]
 80120f6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80120f8:	61bb      	str	r3, [r7, #24]
 80120fa:	e002      	b.n	8012102 <tcp_enqueue_flags+0x13e>
 80120fc:	69bb      	ldr	r3, [r7, #24]
 80120fe:	681b      	ldr	r3, [r3, #0]
 8012100:	61bb      	str	r3, [r7, #24]
 8012102:	69bb      	ldr	r3, [r7, #24]
 8012104:	681b      	ldr	r3, [r3, #0]
 8012106:	2b00      	cmp	r3, #0
 8012108:	d1f8      	bne.n	80120fc <tcp_enqueue_flags+0x138>
    useg->next = seg;
 801210a:	69bb      	ldr	r3, [r7, #24]
 801210c:	68fa      	ldr	r2, [r7, #12]
 801210e:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 8012110:	687b      	ldr	r3, [r7, #4]
 8012112:	2200      	movs	r2, #0
 8012114:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 8012118:	78fb      	ldrb	r3, [r7, #3]
 801211a:	f003 0302 	and.w	r3, r3, #2
 801211e:	2b00      	cmp	r3, #0
 8012120:	d104      	bne.n	801212c <tcp_enqueue_flags+0x168>
 8012122:	78fb      	ldrb	r3, [r7, #3]
 8012124:	f003 0301 	and.w	r3, r3, #1
 8012128:	2b00      	cmp	r3, #0
 801212a:	d004      	beq.n	8012136 <tcp_enqueue_flags+0x172>
    pcb->snd_lbb++;
 801212c:	687b      	ldr	r3, [r7, #4]
 801212e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8012130:	1c5a      	adds	r2, r3, #1
 8012132:	687b      	ldr	r3, [r7, #4]
 8012134:	659a      	str	r2, [r3, #88]	; 0x58
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 8012136:	78fb      	ldrb	r3, [r7, #3]
 8012138:	f003 0301 	and.w	r3, r3, #1
 801213c:	2b00      	cmp	r3, #0
 801213e:	d006      	beq.n	801214e <tcp_enqueue_flags+0x18a>
    pcb->flags |= TF_FIN;
 8012140:	687b      	ldr	r3, [r7, #4]
 8012142:	7e9b      	ldrb	r3, [r3, #26]
 8012144:	f043 0320 	orr.w	r3, r3, #32
 8012148:	b2da      	uxtb	r2, r3
 801214a:	687b      	ldr	r3, [r7, #4]
 801214c:	769a      	strb	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 801214e:	68fb      	ldr	r3, [r7, #12]
 8012150:	685b      	ldr	r3, [r3, #4]
 8012152:	4618      	mov	r0, r3
 8012154:	f7fb f996 	bl	800d484 <pbuf_clen>
 8012158:	4603      	mov	r3, r0
 801215a:	461a      	mov	r2, r3
 801215c:	687b      	ldr	r3, [r7, #4]
 801215e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8012162:	4413      	add	r3, r2
 8012164:	b29a      	uxth	r2, r3
 8012166:	687b      	ldr	r3, [r7, #4]
 8012168:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 801216c:	687b      	ldr	r3, [r7, #4]
 801216e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8012172:	2b00      	cmp	r3, #0
 8012174:	d00e      	beq.n	8012194 <tcp_enqueue_flags+0x1d0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 8012176:	687b      	ldr	r3, [r7, #4]
 8012178:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801217a:	2b00      	cmp	r3, #0
 801217c:	d10a      	bne.n	8012194 <tcp_enqueue_flags+0x1d0>
 801217e:	687b      	ldr	r3, [r7, #4]
 8012180:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8012182:	2b00      	cmp	r3, #0
 8012184:	d106      	bne.n	8012194 <tcp_enqueue_flags+0x1d0>
 8012186:	4b06      	ldr	r3, [pc, #24]	; (80121a0 <tcp_enqueue_flags+0x1dc>)
 8012188:	f240 326d 	movw	r2, #877	; 0x36d
 801218c:	490a      	ldr	r1, [pc, #40]	; (80121b8 <tcp_enqueue_flags+0x1f4>)
 801218e:	4806      	ldr	r0, [pc, #24]	; (80121a8 <tcp_enqueue_flags+0x1e4>)
 8012190:	f006 fa5a 	bl	8018648 <iprintf>
      pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 8012194:	2300      	movs	r3, #0
}
 8012196:	4618      	mov	r0, r3
 8012198:	3720      	adds	r7, #32
 801219a:	46bd      	mov	sp, r7
 801219c:	bd80      	pop	{r7, pc}
 801219e:	bf00      	nop
 80121a0:	0801a648 	.word	0x0801a648
 80121a4:	0801a94c 	.word	0x0801a94c
 80121a8:	0801a6ac 	.word	0x0801a6ac
 80121ac:	0801a9a4 	.word	0x0801a9a4
 80121b0:	0801a9e0 	.word	0x0801a9e0
 80121b4:	0801a9f8 	.word	0x0801a9f8
 80121b8:	0801aa24 	.word	0x0801aa24

080121bc <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 80121bc:	b590      	push	{r4, r7, lr}
 80121be:	b08b      	sub	sp, #44	; 0x2c
 80121c0:	af04      	add	r7, sp, #16
 80121c2:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = 0;
 80121c4:	2300      	movs	r3, #0
 80121c6:	75bb      	strb	r3, [r7, #22]
  if (pcb->flags & TF_TIMESTAMP) {
    optlen = LWIP_TCP_OPT_LENGTH(TF_SEG_OPTS_TS);
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 80121c8:	7dbb      	ldrb	r3, [r7, #22]
 80121ca:	b29c      	uxth	r4, r3
 80121cc:	687b      	ldr	r3, [r7, #4]
 80121ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80121d0:	4618      	mov	r0, r3
 80121d2:	f7f9 ff29 	bl	800c028 <lwip_htonl>
 80121d6:	4603      	mov	r3, r0
 80121d8:	2200      	movs	r2, #0
 80121da:	4621      	mov	r1, r4
 80121dc:	6878      	ldr	r0, [r7, #4]
 80121de:	f7ff f97b 	bl	80114d8 <tcp_output_alloc_header>
 80121e2:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 80121e4:	693b      	ldr	r3, [r7, #16]
 80121e6:	2b00      	cmp	r3, #0
 80121e8:	d109      	bne.n	80121fe <tcp_send_empty_ack+0x42>
    /* let tcp_fasttmr retry sending this ACK */
    pcb->flags |= (TF_ACK_DELAY | TF_ACK_NOW);
 80121ea:	687b      	ldr	r3, [r7, #4]
 80121ec:	7e9b      	ldrb	r3, [r3, #26]
 80121ee:	f043 0303 	orr.w	r3, r3, #3
 80121f2:	b2da      	uxtb	r2, r3
 80121f4:	687b      	ldr	r3, [r7, #4]
 80121f6:	769a      	strb	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 80121f8:	f06f 0301 	mvn.w	r3, #1
 80121fc:	e036      	b.n	801226c <tcp_send_empty_ack+0xb0>
  if (pcb->flags & TF_TIMESTAMP) {
    tcp_build_timestamp_option(pcb, (u32_t *)(tcphdr + 1));
  }
#endif

  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 80121fe:	687b      	ldr	r3, [r7, #4]
 8012200:	3304      	adds	r3, #4
 8012202:	4618      	mov	r0, r3
 8012204:	f004 f99a 	bl	801653c <ip4_route>
 8012208:	60f8      	str	r0, [r7, #12]
  if (netif == NULL) {
 801220a:	68fb      	ldr	r3, [r7, #12]
 801220c:	2b00      	cmp	r3, #0
 801220e:	d102      	bne.n	8012216 <tcp_send_empty_ack+0x5a>
    err = ERR_RTE;
 8012210:	23fc      	movs	r3, #252	; 0xfc
 8012212:	75fb      	strb	r3, [r7, #23]
 8012214:	e012      	b.n	801223c <tcp_send_empty_ack+0x80>
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
        &pcb->local_ip, &pcb->remote_ip);
    }
#endif
    NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
    err = ip_output_if(p, &pcb->local_ip, &pcb->remote_ip,
 8012216:	6879      	ldr	r1, [r7, #4]
 8012218:	687b      	ldr	r3, [r7, #4]
 801221a:	1d18      	adds	r0, r3, #4
 801221c:	687b      	ldr	r3, [r7, #4]
 801221e:	7a9c      	ldrb	r4, [r3, #10]
 8012220:	687b      	ldr	r3, [r7, #4]
 8012222:	7a5b      	ldrb	r3, [r3, #9]
 8012224:	68fa      	ldr	r2, [r7, #12]
 8012226:	9202      	str	r2, [sp, #8]
 8012228:	2206      	movs	r2, #6
 801222a:	9201      	str	r2, [sp, #4]
 801222c:	9300      	str	r3, [sp, #0]
 801222e:	4623      	mov	r3, r4
 8012230:	4602      	mov	r2, r0
 8012232:	6938      	ldr	r0, [r7, #16]
 8012234:	f004 fb48 	bl	80168c8 <ip4_output_if>
 8012238:	4603      	mov	r3, r0
 801223a:	75fb      	strb	r3, [r7, #23]
      pcb->ttl, pcb->tos, IP_PROTO_TCP, netif);
    NETIF_SET_HWADDRHINT(netif, NULL);
  }
  pbuf_free(p);
 801223c:	6938      	ldr	r0, [r7, #16]
 801223e:	f7fb f887 	bl	800d350 <pbuf_free>

  if (err != ERR_OK) {
 8012242:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8012246:	2b00      	cmp	r3, #0
 8012248:	d007      	beq.n	801225a <tcp_send_empty_ack+0x9e>
    /* let tcp_fasttmr retry sending this ACK */
    pcb->flags |= (TF_ACK_DELAY | TF_ACK_NOW);
 801224a:	687b      	ldr	r3, [r7, #4]
 801224c:	7e9b      	ldrb	r3, [r3, #26]
 801224e:	f043 0303 	orr.w	r3, r3, #3
 8012252:	b2da      	uxtb	r2, r3
 8012254:	687b      	ldr	r3, [r7, #4]
 8012256:	769a      	strb	r2, [r3, #26]
 8012258:	e006      	b.n	8012268 <tcp_send_empty_ack+0xac>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    pcb->flags &= ~(TF_ACK_DELAY | TF_ACK_NOW);
 801225a:	687b      	ldr	r3, [r7, #4]
 801225c:	7e9b      	ldrb	r3, [r3, #26]
 801225e:	f023 0303 	bic.w	r3, r3, #3
 8012262:	b2da      	uxtb	r2, r3
 8012264:	687b      	ldr	r3, [r7, #4]
 8012266:	769a      	strb	r2, [r3, #26]
  }

  return err;
 8012268:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801226c:	4618      	mov	r0, r3
 801226e:	371c      	adds	r7, #28
 8012270:	46bd      	mov	sp, r7
 8012272:	bd90      	pop	{r4, r7, pc}

08012274 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 8012274:	b5b0      	push	{r4, r5, r7, lr}
 8012276:	b08a      	sub	sp, #40	; 0x28
 8012278:	af00      	add	r7, sp, #0
 801227a:	6078      	str	r0, [r7, #4]
#if TCP_CWND_DEBUG
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 801227c:	687b      	ldr	r3, [r7, #4]
 801227e:	7d1b      	ldrb	r3, [r3, #20]
 8012280:	2b01      	cmp	r3, #1
 8012282:	d106      	bne.n	8012292 <tcp_output+0x1e>
 8012284:	4b9b      	ldr	r3, [pc, #620]	; (80124f4 <tcp_output+0x280>)
 8012286:	f240 32ed 	movw	r2, #1005	; 0x3ed
 801228a:	499b      	ldr	r1, [pc, #620]	; (80124f8 <tcp_output+0x284>)
 801228c:	489b      	ldr	r0, [pc, #620]	; (80124fc <tcp_output+0x288>)
 801228e:	f006 f9db 	bl	8018648 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 8012292:	4b9b      	ldr	r3, [pc, #620]	; (8012500 <tcp_output+0x28c>)
 8012294:	681b      	ldr	r3, [r3, #0]
 8012296:	687a      	ldr	r2, [r7, #4]
 8012298:	429a      	cmp	r2, r3
 801229a:	d101      	bne.n	80122a0 <tcp_output+0x2c>
    return ERR_OK;
 801229c:	2300      	movs	r3, #0
 801229e:	e1cf      	b.n	8012640 <tcp_output+0x3cc>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 80122a0:	687b      	ldr	r3, [r7, #4]
 80122a2:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 80122a6:	687b      	ldr	r3, [r7, #4]
 80122a8:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80122ac:	429a      	cmp	r2, r3
 80122ae:	d203      	bcs.n	80122b8 <tcp_output+0x44>
 80122b0:	687b      	ldr	r3, [r7, #4]
 80122b2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80122b6:	e002      	b.n	80122be <tcp_output+0x4a>
 80122b8:	687b      	ldr	r3, [r7, #4]
 80122ba:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80122be:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 80122c0:	687b      	ldr	r3, [r7, #4]
 80122c2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80122c4:	627b      	str	r3, [r7, #36]	; 0x24
   * because the ->unsent queue is empty or because the window does
   * not allow it), construct an empty ACK segment and send it.
   *
   * If data is to be sent, we will just piggyback the ACK (see below).
   */
  if (pcb->flags & TF_ACK_NOW &&
 80122c6:	687b      	ldr	r3, [r7, #4]
 80122c8:	7e9b      	ldrb	r3, [r3, #26]
 80122ca:	f003 0302 	and.w	r3, r3, #2
 80122ce:	2b00      	cmp	r3, #0
 80122d0:	d017      	beq.n	8012302 <tcp_output+0x8e>
 80122d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80122d4:	2b00      	cmp	r3, #0
 80122d6:	d00f      	beq.n	80122f8 <tcp_output+0x84>
     (seg == NULL ||
      lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd)) {
 80122d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80122da:	68db      	ldr	r3, [r3, #12]
 80122dc:	685b      	ldr	r3, [r3, #4]
 80122de:	4618      	mov	r0, r3
 80122e0:	f7f9 fea2 	bl	800c028 <lwip_htonl>
 80122e4:	4602      	mov	r2, r0
 80122e6:	687b      	ldr	r3, [r7, #4]
 80122e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80122ea:	1ad3      	subs	r3, r2, r3
 80122ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80122ee:	8912      	ldrh	r2, [r2, #8]
 80122f0:	4413      	add	r3, r2
     (seg == NULL ||
 80122f2:	69ba      	ldr	r2, [r7, #24]
 80122f4:	429a      	cmp	r2, r3
 80122f6:	d204      	bcs.n	8012302 <tcp_output+0x8e>
     return tcp_send_empty_ack(pcb);
 80122f8:	6878      	ldr	r0, [r7, #4]
 80122fa:	f7ff ff5f 	bl	80121bc <tcp_send_empty_ack>
 80122fe:	4603      	mov	r3, r0
 8012300:	e19e      	b.n	8012640 <tcp_output+0x3cc>
  }

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 8012302:	687b      	ldr	r3, [r7, #4]
 8012304:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012306:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 8012308:	6a3b      	ldr	r3, [r7, #32]
 801230a:	2b00      	cmp	r3, #0
 801230c:	d007      	beq.n	801231e <tcp_output+0xaa>
    for (; useg->next != NULL; useg = useg->next);
 801230e:	e002      	b.n	8012316 <tcp_output+0xa2>
 8012310:	6a3b      	ldr	r3, [r7, #32]
 8012312:	681b      	ldr	r3, [r3, #0]
 8012314:	623b      	str	r3, [r7, #32]
 8012316:	6a3b      	ldr	r3, [r7, #32]
 8012318:	681b      	ldr	r3, [r3, #0]
 801231a:	2b00      	cmp	r3, #0
 801231c:	d1f8      	bne.n	8012310 <tcp_output+0x9c>
  }

  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 801231e:	687b      	ldr	r3, [r7, #4]
 8012320:	3304      	adds	r3, #4
 8012322:	4618      	mov	r0, r3
 8012324:	f004 f90a 	bl	801653c <ip4_route>
 8012328:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 801232a:	697b      	ldr	r3, [r7, #20]
 801232c:	2b00      	cmp	r3, #0
 801232e:	d102      	bne.n	8012336 <tcp_output+0xc2>
    return ERR_RTE;
 8012330:	f06f 0303 	mvn.w	r3, #3
 8012334:	e184      	b.n	8012640 <tcp_output+0x3cc>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 8012336:	687b      	ldr	r3, [r7, #4]
 8012338:	2b00      	cmp	r3, #0
 801233a:	d003      	beq.n	8012344 <tcp_output+0xd0>
 801233c:	687b      	ldr	r3, [r7, #4]
 801233e:	681b      	ldr	r3, [r3, #0]
 8012340:	2b00      	cmp	r3, #0
 8012342:	d111      	bne.n	8012368 <tcp_output+0xf4>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 8012344:	697b      	ldr	r3, [r7, #20]
 8012346:	2b00      	cmp	r3, #0
 8012348:	d002      	beq.n	8012350 <tcp_output+0xdc>
 801234a:	697b      	ldr	r3, [r7, #20]
 801234c:	3304      	adds	r3, #4
 801234e:	e000      	b.n	8012352 <tcp_output+0xde>
 8012350:	2300      	movs	r3, #0
 8012352:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 8012354:	693b      	ldr	r3, [r7, #16]
 8012356:	2b00      	cmp	r3, #0
 8012358:	d102      	bne.n	8012360 <tcp_output+0xec>
      return ERR_RTE;
 801235a:	f06f 0303 	mvn.w	r3, #3
 801235e:	e16f      	b.n	8012640 <tcp_output+0x3cc>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 8012360:	693b      	ldr	r3, [r7, #16]
 8012362:	681a      	ldr	r2, [r3, #0]
 8012364:	687b      	ldr	r3, [r7, #4]
 8012366:	601a      	str	r2, [r3, #0]
   * with part of the unsent segment (which will engage zero-window probing upon
   * reception of the zero window update from the receiver). This ensures the
   * subsequent window update is reliably received. With the goal of being lightweight,
   * we avoid splitting the unsent segment and treat the window as already zero.
   */
  if (seg != NULL &&
 8012368:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801236a:	2b00      	cmp	r3, #0
 801236c:	f000 813e 	beq.w	80125ec <tcp_output+0x378>
      lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd &&
 8012370:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012372:	68db      	ldr	r3, [r3, #12]
 8012374:	685b      	ldr	r3, [r3, #4]
 8012376:	4618      	mov	r0, r3
 8012378:	f7f9 fe56 	bl	800c028 <lwip_htonl>
 801237c:	4602      	mov	r2, r0
 801237e:	687b      	ldr	r3, [r7, #4]
 8012380:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8012382:	1ad3      	subs	r3, r2, r3
 8012384:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012386:	8912      	ldrh	r2, [r2, #8]
 8012388:	4413      	add	r3, r2
  if (seg != NULL &&
 801238a:	69ba      	ldr	r2, [r7, #24]
 801238c:	429a      	cmp	r2, r3
 801238e:	f080 812d 	bcs.w	80125ec <tcp_output+0x378>
      lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd &&
 8012392:	69bb      	ldr	r3, [r7, #24]
 8012394:	2b00      	cmp	r3, #0
 8012396:	f000 8129 	beq.w	80125ec <tcp_output+0x378>
      wnd > 0 && wnd == pcb->snd_wnd && pcb->unacked == NULL) {
 801239a:	687b      	ldr	r3, [r7, #4]
 801239c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80123a0:	461a      	mov	r2, r3
 80123a2:	69bb      	ldr	r3, [r7, #24]
 80123a4:	4293      	cmp	r3, r2
 80123a6:	f040 8121 	bne.w	80125ec <tcp_output+0x378>
 80123aa:	687b      	ldr	r3, [r7, #4]
 80123ac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80123ae:	2b00      	cmp	r3, #0
 80123b0:	f040 811c 	bne.w	80125ec <tcp_output+0x378>
    /* Start the persist timer */
    if (pcb->persist_backoff == 0) {
 80123b4:	687b      	ldr	r3, [r7, #4]
 80123b6:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 80123ba:	2b00      	cmp	r3, #0
 80123bc:	f040 812b 	bne.w	8012616 <tcp_output+0x3a2>
      pcb->persist_cnt = 0;
 80123c0:	687b      	ldr	r3, [r7, #4]
 80123c2:	2200      	movs	r2, #0
 80123c4:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
      pcb->persist_backoff = 1;
 80123c8:	687b      	ldr	r3, [r7, #4]
 80123ca:	2201      	movs	r2, #1
 80123cc:	f883 2095 	strb.w	r2, [r3, #149]	; 0x95
    }
    goto output_done;
 80123d0:	e121      	b.n	8012616 <tcp_output+0x3a2>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 80123d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80123d4:	68db      	ldr	r3, [r3, #12]
 80123d6:	899b      	ldrh	r3, [r3, #12]
 80123d8:	b29b      	uxth	r3, r3
 80123da:	4618      	mov	r0, r3
 80123dc:	f7f9 fe16 	bl	800c00c <lwip_htons>
 80123e0:	4603      	mov	r3, r0
 80123e2:	f003 0304 	and.w	r3, r3, #4
 80123e6:	2b00      	cmp	r3, #0
 80123e8:	d006      	beq.n	80123f8 <tcp_output+0x184>
 80123ea:	4b42      	ldr	r3, [pc, #264]	; (80124f4 <tcp_output+0x280>)
 80123ec:	f240 4246 	movw	r2, #1094	; 0x446
 80123f0:	4944      	ldr	r1, [pc, #272]	; (8012504 <tcp_output+0x290>)
 80123f2:	4842      	ldr	r0, [pc, #264]	; (80124fc <tcp_output+0x288>)
 80123f4:	f006 f928 	bl	8018648 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 80123f8:	687b      	ldr	r3, [r7, #4]
 80123fa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80123fc:	2b00      	cmp	r3, #0
 80123fe:	d01f      	beq.n	8012440 <tcp_output+0x1cc>
 8012400:	687b      	ldr	r3, [r7, #4]
 8012402:	7e9b      	ldrb	r3, [r3, #26]
 8012404:	f003 0344 	and.w	r3, r3, #68	; 0x44
 8012408:	2b00      	cmp	r3, #0
 801240a:	d119      	bne.n	8012440 <tcp_output+0x1cc>
 801240c:	687b      	ldr	r3, [r7, #4]
 801240e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8012410:	2b00      	cmp	r3, #0
 8012412:	d00b      	beq.n	801242c <tcp_output+0x1b8>
 8012414:	687b      	ldr	r3, [r7, #4]
 8012416:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8012418:	681b      	ldr	r3, [r3, #0]
 801241a:	2b00      	cmp	r3, #0
 801241c:	d110      	bne.n	8012440 <tcp_output+0x1cc>
 801241e:	687b      	ldr	r3, [r7, #4]
 8012420:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8012422:	891a      	ldrh	r2, [r3, #8]
 8012424:	687b      	ldr	r3, [r7, #4]
 8012426:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8012428:	429a      	cmp	r2, r3
 801242a:	d209      	bcs.n	8012440 <tcp_output+0x1cc>
 801242c:	687b      	ldr	r3, [r7, #4]
 801242e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8012432:	2b00      	cmp	r3, #0
 8012434:	d004      	beq.n	8012440 <tcp_output+0x1cc>
 8012436:	687b      	ldr	r3, [r7, #4]
 8012438:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 801243c:	2b08      	cmp	r3, #8
 801243e:	d901      	bls.n	8012444 <tcp_output+0x1d0>
 8012440:	2301      	movs	r3, #1
 8012442:	e000      	b.n	8012446 <tcp_output+0x1d2>
 8012444:	2300      	movs	r3, #0
 8012446:	2b00      	cmp	r3, #0
 8012448:	d106      	bne.n	8012458 <tcp_output+0x1e4>
      ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 801244a:	687b      	ldr	r3, [r7, #4]
 801244c:	7e9b      	ldrb	r3, [r3, #26]
 801244e:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8012452:	2b00      	cmp	r3, #0
 8012454:	f000 80e1 	beq.w	801261a <tcp_output+0x3a6>
                            pcb->lastack,
                            lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 8012458:	687b      	ldr	r3, [r7, #4]
 801245a:	7d1b      	ldrb	r3, [r3, #20]
 801245c:	2b02      	cmp	r3, #2
 801245e:	d00d      	beq.n	801247c <tcp_output+0x208>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 8012460:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012462:	68db      	ldr	r3, [r3, #12]
 8012464:	899b      	ldrh	r3, [r3, #12]
 8012466:	b29c      	uxth	r4, r3
 8012468:	2010      	movs	r0, #16
 801246a:	f7f9 fdcf 	bl	800c00c <lwip_htons>
 801246e:	4603      	mov	r3, r0
 8012470:	461a      	mov	r2, r3
 8012472:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012474:	68db      	ldr	r3, [r3, #12]
 8012476:	4322      	orrs	r2, r4
 8012478:	b292      	uxth	r2, r2
 801247a:	819a      	strh	r2, [r3, #12]
    }

#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    err = tcp_output_segment(seg, pcb, netif);
 801247c:	697a      	ldr	r2, [r7, #20]
 801247e:	6879      	ldr	r1, [r7, #4]
 8012480:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8012482:	f000 f8e1 	bl	8012648 <tcp_output_segment>
 8012486:	4603      	mov	r3, r0
 8012488:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 801248a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801248e:	2b00      	cmp	r3, #0
 8012490:	d009      	beq.n	80124a6 <tcp_output+0x232>
      /* segment could not be sent, for whatever reason */
      pcb->flags |= TF_NAGLEMEMERR;
 8012492:	687b      	ldr	r3, [r7, #4]
 8012494:	7e9b      	ldrb	r3, [r3, #26]
 8012496:	f063 037f 	orn	r3, r3, #127	; 0x7f
 801249a:	b2da      	uxtb	r2, r3
 801249c:	687b      	ldr	r3, [r7, #4]
 801249e:	769a      	strb	r2, [r3, #26]
      return err;
 80124a0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80124a4:	e0cc      	b.n	8012640 <tcp_output+0x3cc>
    }
    pcb->unsent = seg->next;
 80124a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80124a8:	681a      	ldr	r2, [r3, #0]
 80124aa:	687b      	ldr	r3, [r7, #4]
 80124ac:	669a      	str	r2, [r3, #104]	; 0x68
    if (pcb->state != SYN_SENT) {
 80124ae:	687b      	ldr	r3, [r7, #4]
 80124b0:	7d1b      	ldrb	r3, [r3, #20]
 80124b2:	2b02      	cmp	r3, #2
 80124b4:	d006      	beq.n	80124c4 <tcp_output+0x250>
      pcb->flags &= ~(TF_ACK_DELAY | TF_ACK_NOW);
 80124b6:	687b      	ldr	r3, [r7, #4]
 80124b8:	7e9b      	ldrb	r3, [r3, #26]
 80124ba:	f023 0303 	bic.w	r3, r3, #3
 80124be:	b2da      	uxtb	r2, r3
 80124c0:	687b      	ldr	r3, [r7, #4]
 80124c2:	769a      	strb	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 80124c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80124c6:	68db      	ldr	r3, [r3, #12]
 80124c8:	685b      	ldr	r3, [r3, #4]
 80124ca:	4618      	mov	r0, r3
 80124cc:	f7f9 fdac 	bl	800c028 <lwip_htonl>
 80124d0:	4604      	mov	r4, r0
 80124d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80124d4:	891b      	ldrh	r3, [r3, #8]
 80124d6:	461d      	mov	r5, r3
 80124d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80124da:	68db      	ldr	r3, [r3, #12]
 80124dc:	899b      	ldrh	r3, [r3, #12]
 80124de:	b29b      	uxth	r3, r3
 80124e0:	4618      	mov	r0, r3
 80124e2:	f7f9 fd93 	bl	800c00c <lwip_htons>
 80124e6:	4603      	mov	r3, r0
 80124e8:	f003 0303 	and.w	r3, r3, #3
 80124ec:	2b00      	cmp	r3, #0
 80124ee:	d00b      	beq.n	8012508 <tcp_output+0x294>
 80124f0:	2301      	movs	r3, #1
 80124f2:	e00a      	b.n	801250a <tcp_output+0x296>
 80124f4:	0801a648 	.word	0x0801a648
 80124f8:	0801aa4c 	.word	0x0801aa4c
 80124fc:	0801a6ac 	.word	0x0801a6ac
 8012500:	2000ac48 	.word	0x2000ac48
 8012504:	0801aa74 	.word	0x0801aa74
 8012508:	2300      	movs	r3, #0
 801250a:	442b      	add	r3, r5
 801250c:	4423      	add	r3, r4
 801250e:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8012510:	687b      	ldr	r3, [r7, #4]
 8012512:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8012514:	68bb      	ldr	r3, [r7, #8]
 8012516:	1ad3      	subs	r3, r2, r3
 8012518:	2b00      	cmp	r3, #0
 801251a:	da02      	bge.n	8012522 <tcp_output+0x2ae>
      pcb->snd_nxt = snd_nxt;
 801251c:	687b      	ldr	r3, [r7, #4]
 801251e:	68ba      	ldr	r2, [r7, #8]
 8012520:	64da      	str	r2, [r3, #76]	; 0x4c
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 8012522:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012524:	891b      	ldrh	r3, [r3, #8]
 8012526:	461c      	mov	r4, r3
 8012528:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801252a:	68db      	ldr	r3, [r3, #12]
 801252c:	899b      	ldrh	r3, [r3, #12]
 801252e:	b29b      	uxth	r3, r3
 8012530:	4618      	mov	r0, r3
 8012532:	f7f9 fd6b 	bl	800c00c <lwip_htons>
 8012536:	4603      	mov	r3, r0
 8012538:	f003 0303 	and.w	r3, r3, #3
 801253c:	2b00      	cmp	r3, #0
 801253e:	d001      	beq.n	8012544 <tcp_output+0x2d0>
 8012540:	2301      	movs	r3, #1
 8012542:	e000      	b.n	8012546 <tcp_output+0x2d2>
 8012544:	2300      	movs	r3, #0
 8012546:	4423      	add	r3, r4
 8012548:	2b00      	cmp	r3, #0
 801254a:	d049      	beq.n	80125e0 <tcp_output+0x36c>
      seg->next = NULL;
 801254c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801254e:	2200      	movs	r2, #0
 8012550:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 8012552:	687b      	ldr	r3, [r7, #4]
 8012554:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012556:	2b00      	cmp	r3, #0
 8012558:	d105      	bne.n	8012566 <tcp_output+0x2f2>
        pcb->unacked = seg;
 801255a:	687b      	ldr	r3, [r7, #4]
 801255c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801255e:	66da      	str	r2, [r3, #108]	; 0x6c
        useg = seg;
 8012560:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012562:	623b      	str	r3, [r7, #32]
 8012564:	e03f      	b.n	80125e6 <tcp_output+0x372>
      /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 8012566:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012568:	68db      	ldr	r3, [r3, #12]
 801256a:	685b      	ldr	r3, [r3, #4]
 801256c:	4618      	mov	r0, r3
 801256e:	f7f9 fd5b 	bl	800c028 <lwip_htonl>
 8012572:	4604      	mov	r4, r0
 8012574:	6a3b      	ldr	r3, [r7, #32]
 8012576:	68db      	ldr	r3, [r3, #12]
 8012578:	685b      	ldr	r3, [r3, #4]
 801257a:	4618      	mov	r0, r3
 801257c:	f7f9 fd54 	bl	800c028 <lwip_htonl>
 8012580:	4603      	mov	r3, r0
 8012582:	1ae3      	subs	r3, r4, r3
 8012584:	2b00      	cmp	r3, #0
 8012586:	da24      	bge.n	80125d2 <tcp_output+0x35e>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 8012588:	687b      	ldr	r3, [r7, #4]
 801258a:	336c      	adds	r3, #108	; 0x6c
 801258c:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 801258e:	e002      	b.n	8012596 <tcp_output+0x322>
            TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
              cur_seg = &((*cur_seg)->next );
 8012590:	69fb      	ldr	r3, [r7, #28]
 8012592:	681b      	ldr	r3, [r3, #0]
 8012594:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8012596:	69fb      	ldr	r3, [r7, #28]
 8012598:	681b      	ldr	r3, [r3, #0]
 801259a:	2b00      	cmp	r3, #0
 801259c:	d011      	beq.n	80125c2 <tcp_output+0x34e>
            TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 801259e:	69fb      	ldr	r3, [r7, #28]
 80125a0:	681b      	ldr	r3, [r3, #0]
 80125a2:	68db      	ldr	r3, [r3, #12]
 80125a4:	685b      	ldr	r3, [r3, #4]
 80125a6:	4618      	mov	r0, r3
 80125a8:	f7f9 fd3e 	bl	800c028 <lwip_htonl>
 80125ac:	4604      	mov	r4, r0
 80125ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80125b0:	68db      	ldr	r3, [r3, #12]
 80125b2:	685b      	ldr	r3, [r3, #4]
 80125b4:	4618      	mov	r0, r3
 80125b6:	f7f9 fd37 	bl	800c028 <lwip_htonl>
 80125ba:	4603      	mov	r3, r0
 80125bc:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 80125be:	2b00      	cmp	r3, #0
 80125c0:	dbe6      	blt.n	8012590 <tcp_output+0x31c>
          }
          seg->next = (*cur_seg);
 80125c2:	69fb      	ldr	r3, [r7, #28]
 80125c4:	681a      	ldr	r2, [r3, #0]
 80125c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80125c8:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 80125ca:	69fb      	ldr	r3, [r7, #28]
 80125cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80125ce:	601a      	str	r2, [r3, #0]
 80125d0:	e009      	b.n	80125e6 <tcp_output+0x372>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 80125d2:	6a3b      	ldr	r3, [r7, #32]
 80125d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80125d6:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 80125d8:	6a3b      	ldr	r3, [r7, #32]
 80125da:	681b      	ldr	r3, [r3, #0]
 80125dc:	623b      	str	r3, [r7, #32]
 80125de:	e002      	b.n	80125e6 <tcp_output+0x372>
        }
      }
    /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 80125e0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80125e2:	f7fc f9a8 	bl	800e936 <tcp_seg_free>
    }
    seg = pcb->unsent;
 80125e6:	687b      	ldr	r3, [r7, #4]
 80125e8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80125ea:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 80125ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80125ee:	2b00      	cmp	r3, #0
 80125f0:	d015      	beq.n	801261e <tcp_output+0x3aa>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 80125f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80125f4:	68db      	ldr	r3, [r3, #12]
 80125f6:	685b      	ldr	r3, [r3, #4]
 80125f8:	4618      	mov	r0, r3
 80125fa:	f7f9 fd15 	bl	800c028 <lwip_htonl>
 80125fe:	4602      	mov	r2, r0
 8012600:	687b      	ldr	r3, [r7, #4]
 8012602:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8012604:	1ad3      	subs	r3, r2, r3
 8012606:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012608:	8912      	ldrh	r2, [r2, #8]
 801260a:	4413      	add	r3, r2
  while (seg != NULL &&
 801260c:	69ba      	ldr	r2, [r7, #24]
 801260e:	429a      	cmp	r2, r3
 8012610:	f4bf aedf 	bcs.w	80123d2 <tcp_output+0x15e>
  }
output_done:
 8012614:	e003      	b.n	801261e <tcp_output+0x3aa>
    goto output_done;
 8012616:	bf00      	nop
 8012618:	e002      	b.n	8012620 <tcp_output+0x3ac>
      break;
 801261a:	bf00      	nop
 801261c:	e000      	b.n	8012620 <tcp_output+0x3ac>
output_done:
 801261e:	bf00      	nop
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 8012620:	687b      	ldr	r3, [r7, #4]
 8012622:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8012624:	2b00      	cmp	r3, #0
 8012626:	d103      	bne.n	8012630 <tcp_output+0x3bc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8012628:	687b      	ldr	r3, [r7, #4]
 801262a:	2200      	movs	r2, #0
 801262c:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
  }
#endif /* TCP_OVERSIZE */

  pcb->flags &= ~TF_NAGLEMEMERR;
 8012630:	687b      	ldr	r3, [r7, #4]
 8012632:	7e9b      	ldrb	r3, [r3, #26]
 8012634:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8012638:	b2da      	uxtb	r2, r3
 801263a:	687b      	ldr	r3, [r7, #4]
 801263c:	769a      	strb	r2, [r3, #26]
  return ERR_OK;
 801263e:	2300      	movs	r3, #0
}
 8012640:	4618      	mov	r0, r3
 8012642:	3728      	adds	r7, #40	; 0x28
 8012644:	46bd      	mov	sp, r7
 8012646:	bdb0      	pop	{r4, r5, r7, pc}

08012648 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 8012648:	b5b0      	push	{r4, r5, r7, lr}
 801264a:	b08c      	sub	sp, #48	; 0x30
 801264c:	af04      	add	r7, sp, #16
 801264e:	60f8      	str	r0, [r7, #12]
 8012650:	60b9      	str	r1, [r7, #8]
 8012652:	607a      	str	r2, [r7, #4]
  err_t err;
  u16_t len;
  u32_t *opts;

  if (seg->p->ref != 1) {
 8012654:	68fb      	ldr	r3, [r7, #12]
 8012656:	685b      	ldr	r3, [r3, #4]
 8012658:	89db      	ldrh	r3, [r3, #14]
 801265a:	2b01      	cmp	r3, #1
 801265c:	d001      	beq.n	8012662 <tcp_output_segment+0x1a>
    /* This can happen if the pbuf of this segment is still referenced by the
       netif driver due to deferred transmission. Since this function modifies
       p->len, we must not continue in this case. */
    return ERR_OK;
 801265e:	2300      	movs	r3, #0
 8012660:	e08b      	b.n	801277a <tcp_output_segment+0x132>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 8012662:	68bb      	ldr	r3, [r7, #8]
 8012664:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8012666:	68fb      	ldr	r3, [r7, #12]
 8012668:	68dc      	ldr	r4, [r3, #12]
 801266a:	4610      	mov	r0, r2
 801266c:	f7f9 fcdc 	bl	800c028 <lwip_htonl>
 8012670:	4603      	mov	r3, r0
 8012672:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 8012674:	68bb      	ldr	r3, [r7, #8]
 8012676:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 8012678:	68fb      	ldr	r3, [r7, #12]
 801267a:	68dc      	ldr	r4, [r3, #12]
 801267c:	4610      	mov	r0, r2
 801267e:	f7f9 fcc5 	bl	800c00c <lwip_htons>
 8012682:	4603      	mov	r3, r0
 8012684:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8012686:	68bb      	ldr	r3, [r7, #8]
 8012688:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801268a:	68ba      	ldr	r2, [r7, #8]
 801268c:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 801268e:	441a      	add	r2, r3
 8012690:	68bb      	ldr	r3, [r7, #8]
 8012692:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 8012694:	68fb      	ldr	r3, [r7, #12]
 8012696:	68db      	ldr	r3, [r3, #12]
 8012698:	3314      	adds	r3, #20
 801269a:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 801269c:	68fb      	ldr	r3, [r7, #12]
 801269e:	7a9b      	ldrb	r3, [r3, #10]
 80126a0:	f003 0301 	and.w	r3, r3, #1
 80126a4:	2b00      	cmp	r3, #0
 80126a6:	d014      	beq.n	80126d2 <tcp_output_segment+0x8a>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss(TCP_MSS, &pcb->local_ip, &pcb->remote_ip);
 80126a8:	68bb      	ldr	r3, [r7, #8]
 80126aa:	3304      	adds	r3, #4
 80126ac:	4619      	mov	r1, r3
 80126ae:	f44f 7006 	mov.w	r0, #536	; 0x218
 80126b2:	f7fc fc73 	bl	800ef9c <tcp_eff_send_mss_impl>
 80126b6:	4603      	mov	r3, r0
 80126b8:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 80126ba:	8b7b      	ldrh	r3, [r7, #26]
 80126bc:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 80126c0:	4618      	mov	r0, r3
 80126c2:	f7f9 fcb1 	bl	800c028 <lwip_htonl>
 80126c6:	4602      	mov	r2, r0
 80126c8:	69fb      	ldr	r3, [r7, #28]
 80126ca:	601a      	str	r2, [r3, #0]
    opts += 1;
 80126cc:	69fb      	ldr	r3, [r7, #28]
 80126ce:	3304      	adds	r3, #4
 80126d0:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 80126d2:	68bb      	ldr	r3, [r7, #8]
 80126d4:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 80126d8:	2b00      	cmp	r3, #0
 80126da:	da02      	bge.n	80126e2 <tcp_output_segment+0x9a>
    pcb->rtime = 0;
 80126dc:	68bb      	ldr	r3, [r7, #8]
 80126de:	2200      	movs	r2, #0
 80126e0:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 80126e2:	68bb      	ldr	r3, [r7, #8]
 80126e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80126e6:	2b00      	cmp	r3, #0
 80126e8:	d10c      	bne.n	8012704 <tcp_output_segment+0xbc>
    pcb->rttest = tcp_ticks;
 80126ea:	4b26      	ldr	r3, [pc, #152]	; (8012784 <tcp_output_segment+0x13c>)
 80126ec:	681a      	ldr	r2, [r3, #0]
 80126ee:	68bb      	ldr	r3, [r7, #8]
 80126f0:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 80126f2:	68fb      	ldr	r3, [r7, #12]
 80126f4:	68db      	ldr	r3, [r3, #12]
 80126f6:	685b      	ldr	r3, [r3, #4]
 80126f8:	4618      	mov	r0, r3
 80126fa:	f7f9 fc95 	bl	800c028 <lwip_htonl>
 80126fe:	4602      	mov	r2, r0
 8012700:	68bb      	ldr	r3, [r7, #8]
 8012702:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
          lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
          seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 8012704:	68fb      	ldr	r3, [r7, #12]
 8012706:	68db      	ldr	r3, [r3, #12]
 8012708:	461a      	mov	r2, r3
 801270a:	68fb      	ldr	r3, [r7, #12]
 801270c:	685b      	ldr	r3, [r3, #4]
 801270e:	685b      	ldr	r3, [r3, #4]
 8012710:	1ad3      	subs	r3, r2, r3
 8012712:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 8012714:	68fb      	ldr	r3, [r7, #12]
 8012716:	685b      	ldr	r3, [r3, #4]
 8012718:	8959      	ldrh	r1, [r3, #10]
 801271a:	68fb      	ldr	r3, [r7, #12]
 801271c:	685b      	ldr	r3, [r3, #4]
 801271e:	8b3a      	ldrh	r2, [r7, #24]
 8012720:	1a8a      	subs	r2, r1, r2
 8012722:	b292      	uxth	r2, r2
 8012724:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 8012726:	68fb      	ldr	r3, [r7, #12]
 8012728:	685b      	ldr	r3, [r3, #4]
 801272a:	8919      	ldrh	r1, [r3, #8]
 801272c:	68fb      	ldr	r3, [r7, #12]
 801272e:	685b      	ldr	r3, [r3, #4]
 8012730:	8b3a      	ldrh	r2, [r7, #24]
 8012732:	1a8a      	subs	r2, r1, r2
 8012734:	b292      	uxth	r2, r2
 8012736:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 8012738:	68fb      	ldr	r3, [r7, #12]
 801273a:	685b      	ldr	r3, [r3, #4]
 801273c:	68fa      	ldr	r2, [r7, #12]
 801273e:	68d2      	ldr	r2, [r2, #12]
 8012740:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 8012742:	68fb      	ldr	r3, [r7, #12]
 8012744:	68db      	ldr	r3, [r3, #12]
 8012746:	2200      	movs	r2, #0
 8012748:	741a      	strb	r2, [r3, #16]
 801274a:	2200      	movs	r2, #0
 801274c:	745a      	strb	r2, [r3, #17]
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 801274e:	68fb      	ldr	r3, [r7, #12]
 8012750:	6858      	ldr	r0, [r3, #4]
 8012752:	68b9      	ldr	r1, [r7, #8]
 8012754:	68bb      	ldr	r3, [r7, #8]
 8012756:	1d1c      	adds	r4, r3, #4
 8012758:	68bb      	ldr	r3, [r7, #8]
 801275a:	7a9d      	ldrb	r5, [r3, #10]
 801275c:	68bb      	ldr	r3, [r7, #8]
 801275e:	7a5b      	ldrb	r3, [r3, #9]
 8012760:	687a      	ldr	r2, [r7, #4]
 8012762:	9202      	str	r2, [sp, #8]
 8012764:	2206      	movs	r2, #6
 8012766:	9201      	str	r2, [sp, #4]
 8012768:	9300      	str	r3, [sp, #0]
 801276a:	462b      	mov	r3, r5
 801276c:	4622      	mov	r2, r4
 801276e:	f004 f8ab 	bl	80168c8 <ip4_output_if>
 8012772:	4603      	mov	r3, r0
 8012774:	75fb      	strb	r3, [r7, #23]
    pcb->tos, IP_PROTO_TCP, netif);
  NETIF_SET_HWADDRHINT(netif, NULL);
  return err;
 8012776:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801277a:	4618      	mov	r0, r3
 801277c:	3720      	adds	r7, #32
 801277e:	46bd      	mov	sp, r7
 8012780:	bdb0      	pop	{r4, r5, r7, pc}
 8012782:	bf00      	nop
 8012784:	2000ac38 	.word	0x2000ac38

08012788 <tcp_rst>:
 */
void
tcp_rst(u32_t seqno, u32_t ackno,
  const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
  u16_t local_port, u16_t remote_port)
{
 8012788:	b580      	push	{r7, lr}
 801278a:	b08c      	sub	sp, #48	; 0x30
 801278c:	af04      	add	r7, sp, #16
 801278e:	60f8      	str	r0, [r7, #12]
 8012790:	60b9      	str	r1, [r7, #8]
 8012792:	607a      	str	r2, [r7, #4]
 8012794:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  struct tcp_hdr *tcphdr;
  struct netif *netif;
  p = pbuf_alloc(PBUF_IP, TCP_HLEN, PBUF_RAM);
 8012796:	2200      	movs	r2, #0
 8012798:	2114      	movs	r1, #20
 801279a:	2001      	movs	r0, #1
 801279c:	f7fa fa66 	bl	800cc6c <pbuf_alloc>
 80127a0:	61f8      	str	r0, [r7, #28]
  if (p == NULL) {
 80127a2:	69fb      	ldr	r3, [r7, #28]
 80127a4:	2b00      	cmp	r3, #0
 80127a6:	d05b      	beq.n	8012860 <tcp_rst+0xd8>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 80127a8:	69fb      	ldr	r3, [r7, #28]
 80127aa:	895b      	ldrh	r3, [r3, #10]
 80127ac:	2b13      	cmp	r3, #19
 80127ae:	d806      	bhi.n	80127be <tcp_rst+0x36>
 80127b0:	4b2d      	ldr	r3, [pc, #180]	; (8012868 <tcp_rst+0xe0>)
 80127b2:	f240 524d 	movw	r2, #1357	; 0x54d
 80127b6:	492d      	ldr	r1, [pc, #180]	; (801286c <tcp_rst+0xe4>)
 80127b8:	482d      	ldr	r0, [pc, #180]	; (8012870 <tcp_rst+0xe8>)
 80127ba:	f005 ff45 	bl	8018648 <iprintf>
              (p->len >= sizeof(struct tcp_hdr)));

  tcphdr = (struct tcp_hdr *)p->payload;
 80127be:	69fb      	ldr	r3, [r7, #28]
 80127c0:	685b      	ldr	r3, [r3, #4]
 80127c2:	61bb      	str	r3, [r7, #24]
  tcphdr->src = lwip_htons(local_port);
 80127c4:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80127c6:	4618      	mov	r0, r3
 80127c8:	f7f9 fc20 	bl	800c00c <lwip_htons>
 80127cc:	4603      	mov	r3, r0
 80127ce:	461a      	mov	r2, r3
 80127d0:	69bb      	ldr	r3, [r7, #24]
 80127d2:	801a      	strh	r2, [r3, #0]
  tcphdr->dest = lwip_htons(remote_port);
 80127d4:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80127d6:	4618      	mov	r0, r3
 80127d8:	f7f9 fc18 	bl	800c00c <lwip_htons>
 80127dc:	4603      	mov	r3, r0
 80127de:	461a      	mov	r2, r3
 80127e0:	69bb      	ldr	r3, [r7, #24]
 80127e2:	805a      	strh	r2, [r3, #2]
  tcphdr->seqno = lwip_htonl(seqno);
 80127e4:	68f8      	ldr	r0, [r7, #12]
 80127e6:	f7f9 fc1f 	bl	800c028 <lwip_htonl>
 80127ea:	4602      	mov	r2, r0
 80127ec:	69bb      	ldr	r3, [r7, #24]
 80127ee:	605a      	str	r2, [r3, #4]
  tcphdr->ackno = lwip_htonl(ackno);
 80127f0:	68b8      	ldr	r0, [r7, #8]
 80127f2:	f7f9 fc19 	bl	800c028 <lwip_htonl>
 80127f6:	4602      	mov	r2, r0
 80127f8:	69bb      	ldr	r3, [r7, #24]
 80127fa:	609a      	str	r2, [r3, #8]
  TCPH_HDRLEN_FLAGS_SET(tcphdr, TCP_HLEN/4, TCP_RST | TCP_ACK);
 80127fc:	f245 0014 	movw	r0, #20500	; 0x5014
 8012800:	f7f9 fc04 	bl	800c00c <lwip_htons>
 8012804:	4603      	mov	r3, r0
 8012806:	461a      	mov	r2, r3
 8012808:	69bb      	ldr	r3, [r7, #24]
 801280a:	819a      	strh	r2, [r3, #12]
#if LWIP_WND_SCALE
  tcphdr->wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  tcphdr->wnd = PP_HTONS(TCP_WND);
 801280c:	69bb      	ldr	r3, [r7, #24]
 801280e:	2200      	movs	r2, #0
 8012810:	f042 0208 	orr.w	r2, r2, #8
 8012814:	739a      	strb	r2, [r3, #14]
 8012816:	2200      	movs	r2, #0
 8012818:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 801281c:	73da      	strb	r2, [r3, #15]
#endif
  tcphdr->chksum = 0;
 801281e:	69bb      	ldr	r3, [r7, #24]
 8012820:	2200      	movs	r2, #0
 8012822:	741a      	strb	r2, [r3, #16]
 8012824:	2200      	movs	r2, #0
 8012826:	745a      	strb	r2, [r3, #17]
  tcphdr->urgp = 0;
 8012828:	69bb      	ldr	r3, [r7, #24]
 801282a:	2200      	movs	r2, #0
 801282c:	749a      	strb	r2, [r3, #18]
 801282e:	2200      	movs	r2, #0
 8012830:	74da      	strb	r2, [r3, #19]

  TCP_STATS_INC(tcp.xmit);
  MIB2_STATS_INC(mib2.tcpoutrsts);

  netif = ip_route(local_ip, remote_ip);
 8012832:	6838      	ldr	r0, [r7, #0]
 8012834:	f003 fe82 	bl	801653c <ip4_route>
 8012838:	6178      	str	r0, [r7, #20]
  if (netif != NULL) {
 801283a:	697b      	ldr	r3, [r7, #20]
 801283c:	2b00      	cmp	r3, #0
 801283e:	d00b      	beq.n	8012858 <tcp_rst+0xd0>
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        local_ip, remote_ip);
    }
#endif
    /* Send output with hardcoded TTL/HL since we have no access to the pcb */
    ip_output_if(p, local_ip, remote_ip, TCP_TTL, 0, IP_PROTO_TCP, netif);
 8012840:	697b      	ldr	r3, [r7, #20]
 8012842:	9302      	str	r3, [sp, #8]
 8012844:	2306      	movs	r3, #6
 8012846:	9301      	str	r3, [sp, #4]
 8012848:	2300      	movs	r3, #0
 801284a:	9300      	str	r3, [sp, #0]
 801284c:	23ff      	movs	r3, #255	; 0xff
 801284e:	683a      	ldr	r2, [r7, #0]
 8012850:	6879      	ldr	r1, [r7, #4]
 8012852:	69f8      	ldr	r0, [r7, #28]
 8012854:	f004 f838 	bl	80168c8 <ip4_output_if>
  }
  pbuf_free(p);
 8012858:	69f8      	ldr	r0, [r7, #28]
 801285a:	f7fa fd79 	bl	800d350 <pbuf_free>
 801285e:	e000      	b.n	8012862 <tcp_rst+0xda>
    return;
 8012860:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 8012862:	3720      	adds	r7, #32
 8012864:	46bd      	mov	sp, r7
 8012866:	bd80      	pop	{r7, pc}
 8012868:	0801a648 	.word	0x0801a648
 801286c:	0801a67c 	.word	0x0801a67c
 8012870:	0801a6ac 	.word	0x0801a6ac

08012874 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 8012874:	b580      	push	{r7, lr}
 8012876:	b084      	sub	sp, #16
 8012878:	af00      	add	r7, sp, #0
 801287a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  if (pcb->unacked == NULL) {
 801287c:	687b      	ldr	r3, [r7, #4]
 801287e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012880:	2b00      	cmp	r3, #0
 8012882:	d029      	beq.n	80128d8 <tcp_rexmit_rto+0x64>
    return;
  }

  /* Move all unacked segments to the head of the unsent queue */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next);
 8012884:	687b      	ldr	r3, [r7, #4]
 8012886:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012888:	60fb      	str	r3, [r7, #12]
 801288a:	e002      	b.n	8012892 <tcp_rexmit_rto+0x1e>
 801288c:	68fb      	ldr	r3, [r7, #12]
 801288e:	681b      	ldr	r3, [r3, #0]
 8012890:	60fb      	str	r3, [r7, #12]
 8012892:	68fb      	ldr	r3, [r7, #12]
 8012894:	681b      	ldr	r3, [r3, #0]
 8012896:	2b00      	cmp	r3, #0
 8012898:	d1f8      	bne.n	801288c <tcp_rexmit_rto+0x18>
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 801289a:	687b      	ldr	r3, [r7, #4]
 801289c:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 801289e:	68fb      	ldr	r3, [r7, #12]
 80128a0:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 80128a2:	687b      	ldr	r3, [r7, #4]
 80128a4:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80128a6:	687b      	ldr	r3, [r7, #4]
 80128a8:	669a      	str	r2, [r3, #104]	; 0x68
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 80128aa:	687b      	ldr	r3, [r7, #4]
 80128ac:	2200      	movs	r2, #0
 80128ae:	66da      	str	r2, [r3, #108]	; 0x6c

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 80128b0:	687b      	ldr	r3, [r7, #4]
 80128b2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80128b6:	2bff      	cmp	r3, #255	; 0xff
 80128b8:	d007      	beq.n	80128ca <tcp_rexmit_rto+0x56>
    ++pcb->nrtx;
 80128ba:	687b      	ldr	r3, [r7, #4]
 80128bc:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80128c0:	3301      	adds	r3, #1
 80128c2:	b2da      	uxtb	r2, r3
 80128c4:	687b      	ldr	r3, [r7, #4]
 80128c6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 80128ca:	687b      	ldr	r3, [r7, #4]
 80128cc:	2200      	movs	r2, #0
 80128ce:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission */
  tcp_output(pcb);
 80128d0:	6878      	ldr	r0, [r7, #4]
 80128d2:	f7ff fccf 	bl	8012274 <tcp_output>
 80128d6:	e000      	b.n	80128da <tcp_rexmit_rto+0x66>
    return;
 80128d8:	bf00      	nop
}
 80128da:	3710      	adds	r7, #16
 80128dc:	46bd      	mov	sp, r7
 80128de:	bd80      	pop	{r7, pc}

080128e0 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit(struct tcp_pcb *pcb)
{
 80128e0:	b590      	push	{r4, r7, lr}
 80128e2:	b085      	sub	sp, #20
 80128e4:	af00      	add	r7, sp, #0
 80128e6:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  if (pcb->unacked == NULL) {
 80128e8:	687b      	ldr	r3, [r7, #4]
 80128ea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80128ec:	2b00      	cmp	r3, #0
 80128ee:	d043      	beq.n	8012978 <tcp_rexmit+0x98>
    return;
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  seg = pcb->unacked;
 80128f0:	687b      	ldr	r3, [r7, #4]
 80128f2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80128f4:	60bb      	str	r3, [r7, #8]
  pcb->unacked = seg->next;
 80128f6:	68bb      	ldr	r3, [r7, #8]
 80128f8:	681a      	ldr	r2, [r3, #0]
 80128fa:	687b      	ldr	r3, [r7, #4]
 80128fc:	66da      	str	r2, [r3, #108]	; 0x6c

  cur_seg = &(pcb->unsent);
 80128fe:	687b      	ldr	r3, [r7, #4]
 8012900:	3368      	adds	r3, #104	; 0x68
 8012902:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8012904:	e002      	b.n	801290c <tcp_rexmit+0x2c>
    TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
      cur_seg = &((*cur_seg)->next );
 8012906:	68fb      	ldr	r3, [r7, #12]
 8012908:	681b      	ldr	r3, [r3, #0]
 801290a:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 801290c:	68fb      	ldr	r3, [r7, #12]
 801290e:	681b      	ldr	r3, [r3, #0]
 8012910:	2b00      	cmp	r3, #0
 8012912:	d011      	beq.n	8012938 <tcp_rexmit+0x58>
    TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8012914:	68fb      	ldr	r3, [r7, #12]
 8012916:	681b      	ldr	r3, [r3, #0]
 8012918:	68db      	ldr	r3, [r3, #12]
 801291a:	685b      	ldr	r3, [r3, #4]
 801291c:	4618      	mov	r0, r3
 801291e:	f7f9 fb83 	bl	800c028 <lwip_htonl>
 8012922:	4604      	mov	r4, r0
 8012924:	68bb      	ldr	r3, [r7, #8]
 8012926:	68db      	ldr	r3, [r3, #12]
 8012928:	685b      	ldr	r3, [r3, #4]
 801292a:	4618      	mov	r0, r3
 801292c:	f7f9 fb7c 	bl	800c028 <lwip_htonl>
 8012930:	4603      	mov	r3, r0
 8012932:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 8012934:	2b00      	cmp	r3, #0
 8012936:	dbe6      	blt.n	8012906 <tcp_rexmit+0x26>
  }
  seg->next = *cur_seg;
 8012938:	68fb      	ldr	r3, [r7, #12]
 801293a:	681a      	ldr	r2, [r3, #0]
 801293c:	68bb      	ldr	r3, [r7, #8]
 801293e:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 8012940:	68fb      	ldr	r3, [r7, #12]
 8012942:	68ba      	ldr	r2, [r7, #8]
 8012944:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 8012946:	68bb      	ldr	r3, [r7, #8]
 8012948:	681b      	ldr	r3, [r3, #0]
 801294a:	2b00      	cmp	r3, #0
 801294c:	d103      	bne.n	8012956 <tcp_rexmit+0x76>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 801294e:	687b      	ldr	r3, [r7, #4]
 8012950:	2200      	movs	r2, #0
 8012952:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 8012956:	687b      	ldr	r3, [r7, #4]
 8012958:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801295c:	2bff      	cmp	r3, #255	; 0xff
 801295e:	d007      	beq.n	8012970 <tcp_rexmit+0x90>
    ++pcb->nrtx;
 8012960:	687b      	ldr	r3, [r7, #4]
 8012962:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8012966:	3301      	adds	r3, #1
 8012968:	b2da      	uxtb	r2, r3
 801296a:	687b      	ldr	r3, [r7, #4]
 801296c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 8012970:	687b      	ldr	r3, [r7, #4]
 8012972:	2200      	movs	r2, #0
 8012974:	635a      	str	r2, [r3, #52]	; 0x34
 8012976:	e000      	b.n	801297a <tcp_rexmit+0x9a>
    return;
 8012978:	bf00      	nop

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
}
 801297a:	3714      	adds	r7, #20
 801297c:	46bd      	mov	sp, r7
 801297e:	bd90      	pop	{r4, r7, pc}

08012980 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 8012980:	b580      	push	{r7, lr}
 8012982:	b082      	sub	sp, #8
 8012984:	af00      	add	r7, sp, #0
 8012986:	6078      	str	r0, [r7, #4]
  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 8012988:	687b      	ldr	r3, [r7, #4]
 801298a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801298c:	2b00      	cmp	r3, #0
 801298e:	d04a      	beq.n	8012a26 <tcp_rexmit_fast+0xa6>
 8012990:	687b      	ldr	r3, [r7, #4]
 8012992:	7e9b      	ldrb	r3, [r3, #26]
 8012994:	f003 0304 	and.w	r3, r3, #4
 8012998:	2b00      	cmp	r3, #0
 801299a:	d144      	bne.n	8012a26 <tcp_rexmit_fast+0xa6>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    tcp_rexmit(pcb);
 801299c:	6878      	ldr	r0, [r7, #4]
 801299e:	f7ff ff9f 	bl	80128e0 <tcp_rexmit>

    /* Set ssthresh to half of the minimum of the current
     * cwnd and the advertised window */
    pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 80129a2:	687b      	ldr	r3, [r7, #4]
 80129a4:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80129a8:	687b      	ldr	r3, [r7, #4]
 80129aa:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80129ae:	429a      	cmp	r2, r3
 80129b0:	d207      	bcs.n	80129c2 <tcp_rexmit_fast+0x42>
 80129b2:	687b      	ldr	r3, [r7, #4]
 80129b4:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80129b8:	0fda      	lsrs	r2, r3, #31
 80129ba:	4413      	add	r3, r2
 80129bc:	105b      	asrs	r3, r3, #1
 80129be:	b29b      	uxth	r3, r3
 80129c0:	e006      	b.n	80129d0 <tcp_rexmit_fast+0x50>
 80129c2:	687b      	ldr	r3, [r7, #4]
 80129c4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80129c8:	0fda      	lsrs	r2, r3, #31
 80129ca:	4413      	add	r3, r2
 80129cc:	105b      	asrs	r3, r3, #1
 80129ce:	b29b      	uxth	r3, r3
 80129d0:	687a      	ldr	r2, [r7, #4]
 80129d2:	f8a2 304a 	strh.w	r3, [r2, #74]	; 0x4a

    /* The minimum value for ssthresh should be 2 MSS */
    if (pcb->ssthresh < (2U * pcb->mss)) {
 80129d6:	687b      	ldr	r3, [r7, #4]
 80129d8:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 80129dc:	461a      	mov	r2, r3
 80129de:	687b      	ldr	r3, [r7, #4]
 80129e0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80129e2:	005b      	lsls	r3, r3, #1
 80129e4:	429a      	cmp	r2, r3
 80129e6:	d206      	bcs.n	80129f6 <tcp_rexmit_fast+0x76>
      LWIP_DEBUGF(TCP_FR_DEBUG,
                  ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                   " should be min 2 mss %"U16_F"...\n",
                   pcb->ssthresh, (u16_t)(2*pcb->mss)));
      pcb->ssthresh = 2*pcb->mss;
 80129e8:	687b      	ldr	r3, [r7, #4]
 80129ea:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80129ec:	005b      	lsls	r3, r3, #1
 80129ee:	b29a      	uxth	r2, r3
 80129f0:	687b      	ldr	r3, [r7, #4]
 80129f2:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
    }

    pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 80129f6:	687b      	ldr	r3, [r7, #4]
 80129f8:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 80129fc:	687b      	ldr	r3, [r7, #4]
 80129fe:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8012a00:	4619      	mov	r1, r3
 8012a02:	0049      	lsls	r1, r1, #1
 8012a04:	440b      	add	r3, r1
 8012a06:	b29b      	uxth	r3, r3
 8012a08:	4413      	add	r3, r2
 8012a0a:	b29a      	uxth	r2, r3
 8012a0c:	687b      	ldr	r3, [r7, #4]
 8012a0e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->flags |= TF_INFR;
 8012a12:	687b      	ldr	r3, [r7, #4]
 8012a14:	7e9b      	ldrb	r3, [r3, #26]
 8012a16:	f043 0304 	orr.w	r3, r3, #4
 8012a1a:	b2da      	uxtb	r2, r3
 8012a1c:	687b      	ldr	r3, [r7, #4]
 8012a1e:	769a      	strb	r2, [r3, #26]

    /* Reset the retransmission timer to prevent immediate rto retransmissions */
    pcb->rtime = 0;
 8012a20:	687b      	ldr	r3, [r7, #4]
 8012a22:	2200      	movs	r2, #0
 8012a24:	861a      	strh	r2, [r3, #48]	; 0x30
  }
}
 8012a26:	bf00      	nop
 8012a28:	3708      	adds	r7, #8
 8012a2a:	46bd      	mov	sp, r7
 8012a2c:	bd80      	pop	{r7, pc}

08012a2e <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 8012a2e:	b580      	push	{r7, lr}
 8012a30:	b08a      	sub	sp, #40	; 0x28
 8012a32:	af04      	add	r7, sp, #16
 8012a34:	6078      	str	r0, [r7, #4]
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, 0, 0, lwip_htonl(pcb->snd_nxt - 1));
 8012a36:	687b      	ldr	r3, [r7, #4]
 8012a38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8012a3a:	3b01      	subs	r3, #1
 8012a3c:	4618      	mov	r0, r3
 8012a3e:	f7f9 faf3 	bl	800c028 <lwip_htonl>
 8012a42:	4603      	mov	r3, r0
 8012a44:	2200      	movs	r2, #0
 8012a46:	2100      	movs	r1, #0
 8012a48:	6878      	ldr	r0, [r7, #4]
 8012a4a:	f7fe fd45 	bl	80114d8 <tcp_output_alloc_header>
 8012a4e:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8012a50:	693b      	ldr	r3, [r7, #16]
 8012a52:	2b00      	cmp	r3, #0
 8012a54:	d102      	bne.n	8012a5c <tcp_keepalive+0x2e>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 8012a56:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8012a5a:	e021      	b.n	8012aa0 <tcp_keepalive+0x72>
  }
  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 8012a5c:	687b      	ldr	r3, [r7, #4]
 8012a5e:	3304      	adds	r3, #4
 8012a60:	4618      	mov	r0, r3
 8012a62:	f003 fd6b 	bl	801653c <ip4_route>
 8012a66:	60f8      	str	r0, [r7, #12]
  if (netif == NULL) {
 8012a68:	68fb      	ldr	r3, [r7, #12]
 8012a6a:	2b00      	cmp	r3, #0
 8012a6c:	d102      	bne.n	8012a74 <tcp_keepalive+0x46>
    err = ERR_RTE;
 8012a6e:	23fc      	movs	r3, #252	; 0xfc
 8012a70:	75fb      	strb	r3, [r7, #23]
 8012a72:	e010      	b.n	8012a96 <tcp_keepalive+0x68>
#endif /* CHECKSUM_GEN_TCP */
    TCP_STATS_INC(tcp.xmit);

    /* Send output to IP */
    NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
    err = ip_output_if(p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl, 0, IP_PROTO_TCP, netif);
 8012a74:	6879      	ldr	r1, [r7, #4]
 8012a76:	687b      	ldr	r3, [r7, #4]
 8012a78:	1d1a      	adds	r2, r3, #4
 8012a7a:	687b      	ldr	r3, [r7, #4]
 8012a7c:	7a98      	ldrb	r0, [r3, #10]
 8012a7e:	68fb      	ldr	r3, [r7, #12]
 8012a80:	9302      	str	r3, [sp, #8]
 8012a82:	2306      	movs	r3, #6
 8012a84:	9301      	str	r3, [sp, #4]
 8012a86:	2300      	movs	r3, #0
 8012a88:	9300      	str	r3, [sp, #0]
 8012a8a:	4603      	mov	r3, r0
 8012a8c:	6938      	ldr	r0, [r7, #16]
 8012a8e:	f003 ff1b 	bl	80168c8 <ip4_output_if>
 8012a92:	4603      	mov	r3, r0
 8012a94:	75fb      	strb	r3, [r7, #23]
    NETIF_SET_HWADDRHINT(netif, NULL);
  }
  pbuf_free(p);
 8012a96:	6938      	ldr	r0, [r7, #16]
 8012a98:	f7fa fc5a 	bl	800d350 <pbuf_free>

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8012a9c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8012aa0:	4618      	mov	r0, r3
 8012aa2:	3718      	adds	r7, #24
 8012aa4:	46bd      	mov	sp, r7
 8012aa6:	bd80      	pop	{r7, pc}

08012aa8 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 8012aa8:	b590      	push	{r4, r7, lr}
 8012aaa:	b08f      	sub	sp, #60	; 0x3c
 8012aac:	af04      	add	r7, sp, #16
 8012aae:	6078      	str	r0, [r7, #4]
  LWIP_DEBUGF(TCP_DEBUG,
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  seg = pcb->unacked;
 8012ab0:	687b      	ldr	r3, [r7, #4]
 8012ab2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012ab4:	623b      	str	r3, [r7, #32]

  if (seg == NULL) {
 8012ab6:	6a3b      	ldr	r3, [r7, #32]
 8012ab8:	2b00      	cmp	r3, #0
 8012aba:	d102      	bne.n	8012ac2 <tcp_zero_window_probe+0x1a>
    seg = pcb->unsent;
 8012abc:	687b      	ldr	r3, [r7, #4]
 8012abe:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8012ac0:	623b      	str	r3, [r7, #32]
  }
  if (seg == NULL) {
 8012ac2:	6a3b      	ldr	r3, [r7, #32]
 8012ac4:	2b00      	cmp	r3, #0
 8012ac6:	d101      	bne.n	8012acc <tcp_zero_window_probe+0x24>
    /* nothing to send, zero window probe not needed */
    return ERR_OK;
 8012ac8:	2300      	movs	r3, #0
 8012aca:	e085      	b.n	8012bd8 <tcp_zero_window_probe+0x130>
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 8012acc:	6a3b      	ldr	r3, [r7, #32]
 8012ace:	68db      	ldr	r3, [r3, #12]
 8012ad0:	899b      	ldrh	r3, [r3, #12]
 8012ad2:	b29b      	uxth	r3, r3
 8012ad4:	4618      	mov	r0, r3
 8012ad6:	f7f9 fa99 	bl	800c00c <lwip_htons>
 8012ada:	4603      	mov	r3, r0
 8012adc:	f003 0301 	and.w	r3, r3, #1
 8012ae0:	2b00      	cmp	r3, #0
 8012ae2:	d005      	beq.n	8012af0 <tcp_zero_window_probe+0x48>
 8012ae4:	6a3b      	ldr	r3, [r7, #32]
 8012ae6:	891b      	ldrh	r3, [r3, #8]
 8012ae8:	2b00      	cmp	r3, #0
 8012aea:	d101      	bne.n	8012af0 <tcp_zero_window_probe+0x48>
 8012aec:	2301      	movs	r3, #1
 8012aee:	e000      	b.n	8012af2 <tcp_zero_window_probe+0x4a>
 8012af0:	2300      	movs	r3, #0
 8012af2:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 8012af4:	7ffb      	ldrb	r3, [r7, #31]
 8012af6:	2b00      	cmp	r3, #0
 8012af8:	bf0c      	ite	eq
 8012afa:	2301      	moveq	r3, #1
 8012afc:	2300      	movne	r3, #0
 8012afe:	b2db      	uxtb	r3, r3
 8012b00:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, 0, len, seg->tcphdr->seqno);
 8012b02:	6a3b      	ldr	r3, [r7, #32]
 8012b04:	68db      	ldr	r3, [r3, #12]
 8012b06:	685b      	ldr	r3, [r3, #4]
 8012b08:	8bba      	ldrh	r2, [r7, #28]
 8012b0a:	2100      	movs	r1, #0
 8012b0c:	6878      	ldr	r0, [r7, #4]
 8012b0e:	f7fe fce3 	bl	80114d8 <tcp_output_alloc_header>
 8012b12:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 8012b14:	69bb      	ldr	r3, [r7, #24]
 8012b16:	2b00      	cmp	r3, #0
 8012b18:	d102      	bne.n	8012b20 <tcp_zero_window_probe+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 8012b1a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8012b1e:	e05b      	b.n	8012bd8 <tcp_zero_window_probe+0x130>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 8012b20:	69bb      	ldr	r3, [r7, #24]
 8012b22:	685b      	ldr	r3, [r3, #4]
 8012b24:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 8012b26:	7ffb      	ldrb	r3, [r7, #31]
 8012b28:	2b00      	cmp	r3, #0
 8012b2a:	d00e      	beq.n	8012b4a <tcp_zero_window_probe+0xa2>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 8012b2c:	697b      	ldr	r3, [r7, #20]
 8012b2e:	899b      	ldrh	r3, [r3, #12]
 8012b30:	b29b      	uxth	r3, r3
 8012b32:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8012b36:	b29c      	uxth	r4, r3
 8012b38:	2011      	movs	r0, #17
 8012b3a:	f7f9 fa67 	bl	800c00c <lwip_htons>
 8012b3e:	4603      	mov	r3, r0
 8012b40:	4323      	orrs	r3, r4
 8012b42:	b29a      	uxth	r2, r3
 8012b44:	697b      	ldr	r3, [r7, #20]
 8012b46:	819a      	strh	r2, [r3, #12]
 8012b48:	e010      	b.n	8012b6c <tcp_zero_window_probe+0xc4>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 8012b4a:	69bb      	ldr	r3, [r7, #24]
 8012b4c:	685b      	ldr	r3, [r3, #4]
 8012b4e:	3314      	adds	r3, #20
 8012b50:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 8012b52:	6a3b      	ldr	r3, [r7, #32]
 8012b54:	6858      	ldr	r0, [r3, #4]
 8012b56:	6a3b      	ldr	r3, [r7, #32]
 8012b58:	685b      	ldr	r3, [r3, #4]
 8012b5a:	891a      	ldrh	r2, [r3, #8]
 8012b5c:	6a3b      	ldr	r3, [r7, #32]
 8012b5e:	891b      	ldrh	r3, [r3, #8]
 8012b60:	1ad3      	subs	r3, r2, r3
 8012b62:	b29b      	uxth	r3, r3
 8012b64:	2201      	movs	r2, #1
 8012b66:	6939      	ldr	r1, [r7, #16]
 8012b68:	f7fa fdfe 	bl	800d768 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 8012b6c:	6a3b      	ldr	r3, [r7, #32]
 8012b6e:	68db      	ldr	r3, [r3, #12]
 8012b70:	685b      	ldr	r3, [r3, #4]
 8012b72:	4618      	mov	r0, r3
 8012b74:	f7f9 fa58 	bl	800c028 <lwip_htonl>
 8012b78:	4603      	mov	r3, r0
 8012b7a:	3301      	adds	r3, #1
 8012b7c:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8012b7e:	687b      	ldr	r3, [r7, #4]
 8012b80:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8012b82:	68fb      	ldr	r3, [r7, #12]
 8012b84:	1ad3      	subs	r3, r2, r3
 8012b86:	2b00      	cmp	r3, #0
 8012b88:	da02      	bge.n	8012b90 <tcp_zero_window_probe+0xe8>
    pcb->snd_nxt = snd_nxt;
 8012b8a:	687b      	ldr	r3, [r7, #4]
 8012b8c:	68fa      	ldr	r2, [r7, #12]
 8012b8e:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 8012b90:	687b      	ldr	r3, [r7, #4]
 8012b92:	3304      	adds	r3, #4
 8012b94:	4618      	mov	r0, r3
 8012b96:	f003 fcd1 	bl	801653c <ip4_route>
 8012b9a:	60b8      	str	r0, [r7, #8]
  if (netif == NULL) {
 8012b9c:	68bb      	ldr	r3, [r7, #8]
 8012b9e:	2b00      	cmp	r3, #0
 8012ba0:	d103      	bne.n	8012baa <tcp_zero_window_probe+0x102>
    err = ERR_RTE;
 8012ba2:	23fc      	movs	r3, #252	; 0xfc
 8012ba4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8012ba8:	e011      	b.n	8012bce <tcp_zero_window_probe+0x126>
#endif
    TCP_STATS_INC(tcp.xmit);

    /* Send output to IP */
    NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
    err = ip_output_if(p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 8012baa:	6879      	ldr	r1, [r7, #4]
 8012bac:	687b      	ldr	r3, [r7, #4]
 8012bae:	1d1a      	adds	r2, r3, #4
 8012bb0:	687b      	ldr	r3, [r7, #4]
 8012bb2:	7a98      	ldrb	r0, [r3, #10]
 8012bb4:	68bb      	ldr	r3, [r7, #8]
 8012bb6:	9302      	str	r3, [sp, #8]
 8012bb8:	2306      	movs	r3, #6
 8012bba:	9301      	str	r3, [sp, #4]
 8012bbc:	2300      	movs	r3, #0
 8012bbe:	9300      	str	r3, [sp, #0]
 8012bc0:	4603      	mov	r3, r0
 8012bc2:	69b8      	ldr	r0, [r7, #24]
 8012bc4:	f003 fe80 	bl	80168c8 <ip4_output_if>
 8012bc8:	4603      	mov	r3, r0
 8012bca:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      0, IP_PROTO_TCP, netif);
    NETIF_SET_HWADDRHINT(netif, NULL);
  }

  pbuf_free(p);
 8012bce:	69b8      	ldr	r0, [r7, #24]
 8012bd0:	f7fa fbbe 	bl	800d350 <pbuf_free>

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8012bd4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8012bd8:	4618      	mov	r0, r3
 8012bda:	372c      	adds	r7, #44	; 0x2c
 8012bdc:	46bd      	mov	sp, r7
 8012bde:	bd90      	pop	{r4, r7, pc}

08012be0 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 8012be0:	b580      	push	{r7, lr}
 8012be2:	b082      	sub	sp, #8
 8012be4:	af00      	add	r7, sp, #0
 8012be6:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 8012be8:	f7fa fe40 	bl	800d86c <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 8012bec:	4b0a      	ldr	r3, [pc, #40]	; (8012c18 <tcpip_tcp_timer+0x38>)
 8012bee:	681b      	ldr	r3, [r3, #0]
 8012bf0:	2b00      	cmp	r3, #0
 8012bf2:	d103      	bne.n	8012bfc <tcpip_tcp_timer+0x1c>
 8012bf4:	4b09      	ldr	r3, [pc, #36]	; (8012c1c <tcpip_tcp_timer+0x3c>)
 8012bf6:	681b      	ldr	r3, [r3, #0]
 8012bf8:	2b00      	cmp	r3, #0
 8012bfa:	d005      	beq.n	8012c08 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8012bfc:	2200      	movs	r2, #0
 8012bfe:	4908      	ldr	r1, [pc, #32]	; (8012c20 <tcpip_tcp_timer+0x40>)
 8012c00:	20fa      	movs	r0, #250	; 0xfa
 8012c02:	f000 f86f 	bl	8012ce4 <sys_timeout>
 8012c06:	e002      	b.n	8012c0e <tcpip_tcp_timer+0x2e>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 8012c08:	4b06      	ldr	r3, [pc, #24]	; (8012c24 <tcpip_tcp_timer+0x44>)
 8012c0a:	2200      	movs	r2, #0
 8012c0c:	601a      	str	r2, [r3, #0]
  }
}
 8012c0e:	bf00      	nop
 8012c10:	3708      	adds	r7, #8
 8012c12:	46bd      	mov	sp, r7
 8012c14:	bd80      	pop	{r7, pc}
 8012c16:	bf00      	nop
 8012c18:	2000ac34 	.word	0x2000ac34
 8012c1c:	2000ac44 	.word	0x2000ac44
 8012c20:	08012be1 	.word	0x08012be1
 8012c24:	20004250 	.word	0x20004250

08012c28 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 8012c28:	b580      	push	{r7, lr}
 8012c2a:	af00      	add	r7, sp, #0
  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 8012c2c:	4b0a      	ldr	r3, [pc, #40]	; (8012c58 <tcp_timer_needed+0x30>)
 8012c2e:	681b      	ldr	r3, [r3, #0]
 8012c30:	2b00      	cmp	r3, #0
 8012c32:	d10f      	bne.n	8012c54 <tcp_timer_needed+0x2c>
 8012c34:	4b09      	ldr	r3, [pc, #36]	; (8012c5c <tcp_timer_needed+0x34>)
 8012c36:	681b      	ldr	r3, [r3, #0]
 8012c38:	2b00      	cmp	r3, #0
 8012c3a:	d103      	bne.n	8012c44 <tcp_timer_needed+0x1c>
 8012c3c:	4b08      	ldr	r3, [pc, #32]	; (8012c60 <tcp_timer_needed+0x38>)
 8012c3e:	681b      	ldr	r3, [r3, #0]
 8012c40:	2b00      	cmp	r3, #0
 8012c42:	d007      	beq.n	8012c54 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 8012c44:	4b04      	ldr	r3, [pc, #16]	; (8012c58 <tcp_timer_needed+0x30>)
 8012c46:	2201      	movs	r2, #1
 8012c48:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8012c4a:	2200      	movs	r2, #0
 8012c4c:	4905      	ldr	r1, [pc, #20]	; (8012c64 <tcp_timer_needed+0x3c>)
 8012c4e:	20fa      	movs	r0, #250	; 0xfa
 8012c50:	f000 f848 	bl	8012ce4 <sys_timeout>
  }
}
 8012c54:	bf00      	nop
 8012c56:	bd80      	pop	{r7, pc}
 8012c58:	20004250 	.word	0x20004250
 8012c5c:	2000ac34 	.word	0x2000ac34
 8012c60:	2000ac44 	.word	0x2000ac44
 8012c64:	08012be1 	.word	0x08012be1

08012c68 <cyclic_timer>:
 *
 * @param arg unused argument
 */
static void
cyclic_timer(void *arg)
{
 8012c68:	b580      	push	{r7, lr}
 8012c6a:	b084      	sub	sp, #16
 8012c6c:	af00      	add	r7, sp, #0
 8012c6e:	6078      	str	r0, [r7, #4]
  const struct lwip_cyclic_timer* cyclic = (const struct lwip_cyclic_timer*)arg;
 8012c70:	687b      	ldr	r3, [r7, #4]
 8012c72:	60fb      	str	r3, [r7, #12]
#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 8012c74:	68fb      	ldr	r3, [r7, #12]
 8012c76:	685b      	ldr	r3, [r3, #4]
 8012c78:	4798      	blx	r3
  sys_timeout(cyclic->interval_ms, cyclic_timer, arg);
 8012c7a:	68fb      	ldr	r3, [r7, #12]
 8012c7c:	681b      	ldr	r3, [r3, #0]
 8012c7e:	687a      	ldr	r2, [r7, #4]
 8012c80:	4903      	ldr	r1, [pc, #12]	; (8012c90 <cyclic_timer+0x28>)
 8012c82:	4618      	mov	r0, r3
 8012c84:	f000 f82e 	bl	8012ce4 <sys_timeout>
}
 8012c88:	bf00      	nop
 8012c8a:	3710      	adds	r7, #16
 8012c8c:	46bd      	mov	sp, r7
 8012c8e:	bd80      	pop	{r7, pc}
 8012c90:	08012c69 	.word	0x08012c69

08012c94 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 8012c94:	b580      	push	{r7, lr}
 8012c96:	b082      	sub	sp, #8
 8012c98:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8012c9a:	2301      	movs	r3, #1
 8012c9c:	607b      	str	r3, [r7, #4]
 8012c9e:	e00e      	b.n	8012cbe <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, cyclic_timer, LWIP_CONST_CAST(void*, &lwip_cyclic_timers[i]));
 8012ca0:	4a0d      	ldr	r2, [pc, #52]	; (8012cd8 <sys_timeouts_init+0x44>)
 8012ca2:	687b      	ldr	r3, [r7, #4]
 8012ca4:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8012ca8:	687b      	ldr	r3, [r7, #4]
 8012caa:	00db      	lsls	r3, r3, #3
 8012cac:	4a0a      	ldr	r2, [pc, #40]	; (8012cd8 <sys_timeouts_init+0x44>)
 8012cae:	4413      	add	r3, r2
 8012cb0:	461a      	mov	r2, r3
 8012cb2:	490a      	ldr	r1, [pc, #40]	; (8012cdc <sys_timeouts_init+0x48>)
 8012cb4:	f000 f816 	bl	8012ce4 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8012cb8:	687b      	ldr	r3, [r7, #4]
 8012cba:	3301      	adds	r3, #1
 8012cbc:	607b      	str	r3, [r7, #4]
 8012cbe:	687b      	ldr	r3, [r7, #4]
 8012cc0:	2b04      	cmp	r3, #4
 8012cc2:	d9ed      	bls.n	8012ca0 <sys_timeouts_init+0xc>
  }

  /* Initialise timestamp for sys_check_timeouts */
  timeouts_last_time = sys_now();
 8012cc4:	f7f4 fe8e 	bl	80079e4 <sys_now>
 8012cc8:	4602      	mov	r2, r0
 8012cca:	4b05      	ldr	r3, [pc, #20]	; (8012ce0 <sys_timeouts_init+0x4c>)
 8012ccc:	601a      	str	r2, [r3, #0]
}
 8012cce:	bf00      	nop
 8012cd0:	3708      	adds	r7, #8
 8012cd2:	46bd      	mov	sp, r7
 8012cd4:	bd80      	pop	{r7, pc}
 8012cd6:	bf00      	nop
 8012cd8:	0801b898 	.word	0x0801b898
 8012cdc:	08012c69 	.word	0x08012c69
 8012ce0:	2000424c 	.word	0x2000424c

08012ce4 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char* handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 8012ce4:	b580      	push	{r7, lr}
 8012ce6:	b088      	sub	sp, #32
 8012ce8:	af00      	add	r7, sp, #0
 8012cea:	60f8      	str	r0, [r7, #12]
 8012cec:	60b9      	str	r1, [r7, #8]
 8012cee:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;
  u32_t now, diff;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 8012cf0:	200a      	movs	r0, #10
 8012cf2:	f7f9 fd79 	bl	800c7e8 <memp_malloc>
 8012cf6:	6178      	str	r0, [r7, #20]
  if (timeout == NULL) {
 8012cf8:	697b      	ldr	r3, [r7, #20]
 8012cfa:	2b00      	cmp	r3, #0
 8012cfc:	d10a      	bne.n	8012d14 <sys_timeout+0x30>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 8012cfe:	697b      	ldr	r3, [r7, #20]
 8012d00:	2b00      	cmp	r3, #0
 8012d02:	f040 8084 	bne.w	8012e0e <sys_timeout+0x12a>
 8012d06:	4b44      	ldr	r3, [pc, #272]	; (8012e18 <sys_timeout+0x134>)
 8012d08:	22d4      	movs	r2, #212	; 0xd4
 8012d0a:	4944      	ldr	r1, [pc, #272]	; (8012e1c <sys_timeout+0x138>)
 8012d0c:	4844      	ldr	r0, [pc, #272]	; (8012e20 <sys_timeout+0x13c>)
 8012d0e:	f005 fc9b 	bl	8018648 <iprintf>
    return;
 8012d12:	e07c      	b.n	8012e0e <sys_timeout+0x12a>
  }

  now = sys_now();
 8012d14:	f7f4 fe66 	bl	80079e4 <sys_now>
 8012d18:	6138      	str	r0, [r7, #16]
  if (next_timeout == NULL) {
 8012d1a:	4b42      	ldr	r3, [pc, #264]	; (8012e24 <sys_timeout+0x140>)
 8012d1c:	681b      	ldr	r3, [r3, #0]
 8012d1e:	2b00      	cmp	r3, #0
 8012d20:	d105      	bne.n	8012d2e <sys_timeout+0x4a>
    diff = 0;
 8012d22:	2300      	movs	r3, #0
 8012d24:	61bb      	str	r3, [r7, #24]
    timeouts_last_time = now;
 8012d26:	4a40      	ldr	r2, [pc, #256]	; (8012e28 <sys_timeout+0x144>)
 8012d28:	693b      	ldr	r3, [r7, #16]
 8012d2a:	6013      	str	r3, [r2, #0]
 8012d2c:	e004      	b.n	8012d38 <sys_timeout+0x54>
  } else {
    diff = now - timeouts_last_time;
 8012d2e:	4b3e      	ldr	r3, [pc, #248]	; (8012e28 <sys_timeout+0x144>)
 8012d30:	681b      	ldr	r3, [r3, #0]
 8012d32:	693a      	ldr	r2, [r7, #16]
 8012d34:	1ad3      	subs	r3, r2, r3
 8012d36:	61bb      	str	r3, [r7, #24]
  }

  timeout->next = NULL;
 8012d38:	697b      	ldr	r3, [r7, #20]
 8012d3a:	2200      	movs	r2, #0
 8012d3c:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 8012d3e:	697b      	ldr	r3, [r7, #20]
 8012d40:	68ba      	ldr	r2, [r7, #8]
 8012d42:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 8012d44:	697b      	ldr	r3, [r7, #20]
 8012d46:	687a      	ldr	r2, [r7, #4]
 8012d48:	60da      	str	r2, [r3, #12]
  timeout->time = msecs + diff;
 8012d4a:	68fa      	ldr	r2, [r7, #12]
 8012d4c:	69bb      	ldr	r3, [r7, #24]
 8012d4e:	441a      	add	r2, r3
 8012d50:	697b      	ldr	r3, [r7, #20]
 8012d52:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p msecs=%"U32_F" handler=%s arg=%p\n",
    (void *)timeout, msecs, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 8012d54:	4b33      	ldr	r3, [pc, #204]	; (8012e24 <sys_timeout+0x140>)
 8012d56:	681b      	ldr	r3, [r3, #0]
 8012d58:	2b00      	cmp	r3, #0
 8012d5a:	d103      	bne.n	8012d64 <sys_timeout+0x80>
    next_timeout = timeout;
 8012d5c:	4a31      	ldr	r2, [pc, #196]	; (8012e24 <sys_timeout+0x140>)
 8012d5e:	697b      	ldr	r3, [r7, #20]
 8012d60:	6013      	str	r3, [r2, #0]
    return;
 8012d62:	e055      	b.n	8012e10 <sys_timeout+0x12c>
  }

  if (next_timeout->time > msecs) {
 8012d64:	4b2f      	ldr	r3, [pc, #188]	; (8012e24 <sys_timeout+0x140>)
 8012d66:	681b      	ldr	r3, [r3, #0]
 8012d68:	685b      	ldr	r3, [r3, #4]
 8012d6a:	68fa      	ldr	r2, [r7, #12]
 8012d6c:	429a      	cmp	r2, r3
 8012d6e:	d20f      	bcs.n	8012d90 <sys_timeout+0xac>
    next_timeout->time -= msecs;
 8012d70:	4b2c      	ldr	r3, [pc, #176]	; (8012e24 <sys_timeout+0x140>)
 8012d72:	681b      	ldr	r3, [r3, #0]
 8012d74:	6859      	ldr	r1, [r3, #4]
 8012d76:	4b2b      	ldr	r3, [pc, #172]	; (8012e24 <sys_timeout+0x140>)
 8012d78:	681b      	ldr	r3, [r3, #0]
 8012d7a:	68fa      	ldr	r2, [r7, #12]
 8012d7c:	1a8a      	subs	r2, r1, r2
 8012d7e:	605a      	str	r2, [r3, #4]
    timeout->next = next_timeout;
 8012d80:	4b28      	ldr	r3, [pc, #160]	; (8012e24 <sys_timeout+0x140>)
 8012d82:	681a      	ldr	r2, [r3, #0]
 8012d84:	697b      	ldr	r3, [r7, #20]
 8012d86:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 8012d88:	4a26      	ldr	r2, [pc, #152]	; (8012e24 <sys_timeout+0x140>)
 8012d8a:	697b      	ldr	r3, [r7, #20]
 8012d8c:	6013      	str	r3, [r2, #0]
 8012d8e:	e03f      	b.n	8012e10 <sys_timeout+0x12c>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 8012d90:	4b24      	ldr	r3, [pc, #144]	; (8012e24 <sys_timeout+0x140>)
 8012d92:	681b      	ldr	r3, [r3, #0]
 8012d94:	61fb      	str	r3, [r7, #28]
 8012d96:	e036      	b.n	8012e06 <sys_timeout+0x122>
      timeout->time -= t->time;
 8012d98:	697b      	ldr	r3, [r7, #20]
 8012d9a:	685a      	ldr	r2, [r3, #4]
 8012d9c:	69fb      	ldr	r3, [r7, #28]
 8012d9e:	685b      	ldr	r3, [r3, #4]
 8012da0:	1ad2      	subs	r2, r2, r3
 8012da2:	697b      	ldr	r3, [r7, #20]
 8012da4:	605a      	str	r2, [r3, #4]
      if (t->next == NULL || t->next->time > timeout->time) {
 8012da6:	69fb      	ldr	r3, [r7, #28]
 8012da8:	681b      	ldr	r3, [r3, #0]
 8012daa:	2b00      	cmp	r3, #0
 8012dac:	d006      	beq.n	8012dbc <sys_timeout+0xd8>
 8012dae:	69fb      	ldr	r3, [r7, #28]
 8012db0:	681b      	ldr	r3, [r3, #0]
 8012db2:	685a      	ldr	r2, [r3, #4]
 8012db4:	697b      	ldr	r3, [r7, #20]
 8012db6:	685b      	ldr	r3, [r3, #4]
 8012db8:	429a      	cmp	r2, r3
 8012dba:	d921      	bls.n	8012e00 <sys_timeout+0x11c>
        if (t->next != NULL) {
 8012dbc:	69fb      	ldr	r3, [r7, #28]
 8012dbe:	681b      	ldr	r3, [r3, #0]
 8012dc0:	2b00      	cmp	r3, #0
 8012dc2:	d009      	beq.n	8012dd8 <sys_timeout+0xf4>
          t->next->time -= timeout->time;
 8012dc4:	69fb      	ldr	r3, [r7, #28]
 8012dc6:	681b      	ldr	r3, [r3, #0]
 8012dc8:	6859      	ldr	r1, [r3, #4]
 8012dca:	697b      	ldr	r3, [r7, #20]
 8012dcc:	685a      	ldr	r2, [r3, #4]
 8012dce:	69fb      	ldr	r3, [r7, #28]
 8012dd0:	681b      	ldr	r3, [r3, #0]
 8012dd2:	1a8a      	subs	r2, r1, r2
 8012dd4:	605a      	str	r2, [r3, #4]
 8012dd6:	e00b      	b.n	8012df0 <sys_timeout+0x10c>
        } else if (timeout->time > msecs) {
 8012dd8:	697b      	ldr	r3, [r7, #20]
 8012dda:	685b      	ldr	r3, [r3, #4]
 8012ddc:	68fa      	ldr	r2, [r7, #12]
 8012dde:	429a      	cmp	r2, r3
 8012de0:	d206      	bcs.n	8012df0 <sys_timeout+0x10c>
          /* If this is the case, 'timeouts_last_time' and 'now' differs too much.
             This can be due to sys_check_timeouts() not being called at the right
             times, but also when stopping in a breakpoint. Anyway, let's assume
             this is not wanted, so add the first timer's time instead of 'diff' */
          timeout->time = msecs + next_timeout->time;
 8012de2:	4b10      	ldr	r3, [pc, #64]	; (8012e24 <sys_timeout+0x140>)
 8012de4:	681b      	ldr	r3, [r3, #0]
 8012de6:	685a      	ldr	r2, [r3, #4]
 8012de8:	68fb      	ldr	r3, [r7, #12]
 8012dea:	441a      	add	r2, r3
 8012dec:	697b      	ldr	r3, [r7, #20]
 8012dee:	605a      	str	r2, [r3, #4]
        }
        timeout->next = t->next;
 8012df0:	69fb      	ldr	r3, [r7, #28]
 8012df2:	681a      	ldr	r2, [r3, #0]
 8012df4:	697b      	ldr	r3, [r7, #20]
 8012df6:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 8012df8:	69fb      	ldr	r3, [r7, #28]
 8012dfa:	697a      	ldr	r2, [r7, #20]
 8012dfc:	601a      	str	r2, [r3, #0]
        break;
 8012dfe:	e007      	b.n	8012e10 <sys_timeout+0x12c>
    for (t = next_timeout; t != NULL; t = t->next) {
 8012e00:	69fb      	ldr	r3, [r7, #28]
 8012e02:	681b      	ldr	r3, [r3, #0]
 8012e04:	61fb      	str	r3, [r7, #28]
 8012e06:	69fb      	ldr	r3, [r7, #28]
 8012e08:	2b00      	cmp	r3, #0
 8012e0a:	d1c5      	bne.n	8012d98 <sys_timeout+0xb4>
 8012e0c:	e000      	b.n	8012e10 <sys_timeout+0x12c>
    return;
 8012e0e:	bf00      	nop
      }
    }
  }
}
 8012e10:	3720      	adds	r7, #32
 8012e12:	46bd      	mov	sp, r7
 8012e14:	bd80      	pop	{r7, pc}
 8012e16:	bf00      	nop
 8012e18:	0801aa8c 	.word	0x0801aa8c
 8012e1c:	0801aac0 	.word	0x0801aac0
 8012e20:	0801ab00 	.word	0x0801ab00
 8012e24:	20004248 	.word	0x20004248
 8012e28:	2000424c 	.word	0x2000424c

08012e2c <sys_check_timeouts>:
#if !NO_SYS && !defined __DOXYGEN__
static
#endif /* !NO_SYS */
void
sys_check_timeouts(void)
{
 8012e2c:	b580      	push	{r7, lr}
 8012e2e:	b086      	sub	sp, #24
 8012e30:	af00      	add	r7, sp, #0
  if (next_timeout) {
 8012e32:	4b24      	ldr	r3, [pc, #144]	; (8012ec4 <sys_check_timeouts+0x98>)
 8012e34:	681b      	ldr	r3, [r3, #0]
 8012e36:	2b00      	cmp	r3, #0
 8012e38:	d03f      	beq.n	8012eba <sys_check_timeouts+0x8e>
    sys_timeout_handler handler;
    void *arg;
    u8_t had_one;
    u32_t now;

    now = sys_now();
 8012e3a:	f7f4 fdd3 	bl	80079e4 <sys_now>
 8012e3e:	60f8      	str	r0, [r7, #12]
    /* this cares for wraparounds */
    diff = now - timeouts_last_time;
 8012e40:	4b21      	ldr	r3, [pc, #132]	; (8012ec8 <sys_check_timeouts+0x9c>)
 8012e42:	681b      	ldr	r3, [r3, #0]
 8012e44:	68fa      	ldr	r2, [r7, #12]
 8012e46:	1ad3      	subs	r3, r2, r3
 8012e48:	617b      	str	r3, [r7, #20]
    do {
      PBUF_CHECK_FREE_OOSEQ();
      had_one = 0;
 8012e4a:	2300      	movs	r3, #0
 8012e4c:	74fb      	strb	r3, [r7, #19]
      tmptimeout = next_timeout;
 8012e4e:	4b1d      	ldr	r3, [pc, #116]	; (8012ec4 <sys_check_timeouts+0x98>)
 8012e50:	681b      	ldr	r3, [r3, #0]
 8012e52:	60bb      	str	r3, [r7, #8]
      if (tmptimeout && (tmptimeout->time <= diff)) {
 8012e54:	68bb      	ldr	r3, [r7, #8]
 8012e56:	2b00      	cmp	r3, #0
 8012e58:	d02c      	beq.n	8012eb4 <sys_check_timeouts+0x88>
 8012e5a:	68bb      	ldr	r3, [r7, #8]
 8012e5c:	685b      	ldr	r3, [r3, #4]
 8012e5e:	697a      	ldr	r2, [r7, #20]
 8012e60:	429a      	cmp	r2, r3
 8012e62:	d327      	bcc.n	8012eb4 <sys_check_timeouts+0x88>
        /* timeout has expired */
        had_one = 1;
 8012e64:	2301      	movs	r3, #1
 8012e66:	74fb      	strb	r3, [r7, #19]
        timeouts_last_time += tmptimeout->time;
 8012e68:	68bb      	ldr	r3, [r7, #8]
 8012e6a:	685a      	ldr	r2, [r3, #4]
 8012e6c:	4b16      	ldr	r3, [pc, #88]	; (8012ec8 <sys_check_timeouts+0x9c>)
 8012e6e:	681b      	ldr	r3, [r3, #0]
 8012e70:	4413      	add	r3, r2
 8012e72:	4a15      	ldr	r2, [pc, #84]	; (8012ec8 <sys_check_timeouts+0x9c>)
 8012e74:	6013      	str	r3, [r2, #0]
        diff -= tmptimeout->time;
 8012e76:	68bb      	ldr	r3, [r7, #8]
 8012e78:	685b      	ldr	r3, [r3, #4]
 8012e7a:	697a      	ldr	r2, [r7, #20]
 8012e7c:	1ad3      	subs	r3, r2, r3
 8012e7e:	617b      	str	r3, [r7, #20]
        next_timeout = tmptimeout->next;
 8012e80:	68bb      	ldr	r3, [r7, #8]
 8012e82:	681b      	ldr	r3, [r3, #0]
 8012e84:	4a0f      	ldr	r2, [pc, #60]	; (8012ec4 <sys_check_timeouts+0x98>)
 8012e86:	6013      	str	r3, [r2, #0]
        handler = tmptimeout->h;
 8012e88:	68bb      	ldr	r3, [r7, #8]
 8012e8a:	689b      	ldr	r3, [r3, #8]
 8012e8c:	607b      	str	r3, [r7, #4]
        arg = tmptimeout->arg;
 8012e8e:	68bb      	ldr	r3, [r7, #8]
 8012e90:	68db      	ldr	r3, [r3, #12]
 8012e92:	603b      	str	r3, [r7, #0]
        if (handler != NULL) {
          LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s arg=%p\n",
            tmptimeout->handler_name, arg));
        }
#endif /* LWIP_DEBUG_TIMERNAMES */
        memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 8012e94:	68b9      	ldr	r1, [r7, #8]
 8012e96:	200a      	movs	r0, #10
 8012e98:	f7f9 fcf8 	bl	800c88c <memp_free>
        if (handler != NULL) {
 8012e9c:	687b      	ldr	r3, [r7, #4]
 8012e9e:	2b00      	cmp	r3, #0
 8012ea0:	d008      	beq.n	8012eb4 <sys_check_timeouts+0x88>
#if !NO_SYS
          /* For LWIP_TCPIP_CORE_LOCKING, lock the core before calling the
             timeout handler function. */
          LOCK_TCPIP_CORE();
 8012ea2:	480a      	ldr	r0, [pc, #40]	; (8012ecc <sys_check_timeouts+0xa0>)
 8012ea4:	f004 fd98 	bl	80179d8 <sys_mutex_lock>
#endif /* !NO_SYS */
          handler(arg);
 8012ea8:	687b      	ldr	r3, [r7, #4]
 8012eaa:	6838      	ldr	r0, [r7, #0]
 8012eac:	4798      	blx	r3
#if !NO_SYS
          UNLOCK_TCPIP_CORE();
 8012eae:	4807      	ldr	r0, [pc, #28]	; (8012ecc <sys_check_timeouts+0xa0>)
 8012eb0:	f004 fda1 	bl	80179f6 <sys_mutex_unlock>
#endif /* !NO_SYS */
        }
        LWIP_TCPIP_THREAD_ALIVE();
      }
    /* repeat until all expired timers have been called */
    } while (had_one);
 8012eb4:	7cfb      	ldrb	r3, [r7, #19]
 8012eb6:	2b00      	cmp	r3, #0
 8012eb8:	d1c7      	bne.n	8012e4a <sys_check_timeouts+0x1e>
  }
}
 8012eba:	bf00      	nop
 8012ebc:	3718      	adds	r7, #24
 8012ebe:	46bd      	mov	sp, r7
 8012ec0:	bd80      	pop	{r7, pc}
 8012ec2:	bf00      	nop
 8012ec4:	20004248 	.word	0x20004248
 8012ec8:	2000424c 	.word	0x2000424c
 8012ecc:	20007500 	.word	0x20007500

08012ed0 <sys_timeouts_sleeptime>:
#if !NO_SYS
static
#endif /* !NO_SYS */
u32_t
sys_timeouts_sleeptime(void)
{
 8012ed0:	b580      	push	{r7, lr}
 8012ed2:	b082      	sub	sp, #8
 8012ed4:	af00      	add	r7, sp, #0
  u32_t diff;
  if (next_timeout == NULL) {
 8012ed6:	4b0f      	ldr	r3, [pc, #60]	; (8012f14 <sys_timeouts_sleeptime+0x44>)
 8012ed8:	681b      	ldr	r3, [r3, #0]
 8012eda:	2b00      	cmp	r3, #0
 8012edc:	d102      	bne.n	8012ee4 <sys_timeouts_sleeptime+0x14>
    return 0xffffffff;
 8012ede:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8012ee2:	e013      	b.n	8012f0c <sys_timeouts_sleeptime+0x3c>
  }
  diff = sys_now() - timeouts_last_time;
 8012ee4:	f7f4 fd7e 	bl	80079e4 <sys_now>
 8012ee8:	4602      	mov	r2, r0
 8012eea:	4b0b      	ldr	r3, [pc, #44]	; (8012f18 <sys_timeouts_sleeptime+0x48>)
 8012eec:	681b      	ldr	r3, [r3, #0]
 8012eee:	1ad3      	subs	r3, r2, r3
 8012ef0:	607b      	str	r3, [r7, #4]
  if (diff > next_timeout->time) {
 8012ef2:	4b08      	ldr	r3, [pc, #32]	; (8012f14 <sys_timeouts_sleeptime+0x44>)
 8012ef4:	681b      	ldr	r3, [r3, #0]
 8012ef6:	685b      	ldr	r3, [r3, #4]
 8012ef8:	687a      	ldr	r2, [r7, #4]
 8012efa:	429a      	cmp	r2, r3
 8012efc:	d901      	bls.n	8012f02 <sys_timeouts_sleeptime+0x32>
    return 0;
 8012efe:	2300      	movs	r3, #0
 8012f00:	e004      	b.n	8012f0c <sys_timeouts_sleeptime+0x3c>
  } else {
    return next_timeout->time - diff;
 8012f02:	4b04      	ldr	r3, [pc, #16]	; (8012f14 <sys_timeouts_sleeptime+0x44>)
 8012f04:	681b      	ldr	r3, [r3, #0]
 8012f06:	685a      	ldr	r2, [r3, #4]
 8012f08:	687b      	ldr	r3, [r7, #4]
 8012f0a:	1ad3      	subs	r3, r2, r3
  }
}
 8012f0c:	4618      	mov	r0, r3
 8012f0e:	3708      	adds	r7, #8
 8012f10:	46bd      	mov	sp, r7
 8012f12:	bd80      	pop	{r7, pc}
 8012f14:	20004248 	.word	0x20004248
 8012f18:	2000424c 	.word	0x2000424c

08012f1c <sys_timeouts_mbox_fetch>:
 * @param mbox the mbox to fetch the message from
 * @param msg the place to store the message
 */
void
sys_timeouts_mbox_fetch(sys_mbox_t *mbox, void **msg)
{
 8012f1c:	b580      	push	{r7, lr}
 8012f1e:	b084      	sub	sp, #16
 8012f20:	af00      	add	r7, sp, #0
 8012f22:	6078      	str	r0, [r7, #4]
 8012f24:	6039      	str	r1, [r7, #0]
  u32_t sleeptime;

again:
  if (!next_timeout) {
 8012f26:	4b0f      	ldr	r3, [pc, #60]	; (8012f64 <sys_timeouts_mbox_fetch+0x48>)
 8012f28:	681b      	ldr	r3, [r3, #0]
 8012f2a:	2b00      	cmp	r3, #0
 8012f2c:	d105      	bne.n	8012f3a <sys_timeouts_mbox_fetch+0x1e>
    sys_arch_mbox_fetch(mbox, msg, 0);
 8012f2e:	2200      	movs	r2, #0
 8012f30:	6839      	ldr	r1, [r7, #0]
 8012f32:	6878      	ldr	r0, [r7, #4]
 8012f34:	f004 fcd5 	bl	80178e2 <sys_arch_mbox_fetch>
    return;
 8012f38:	e011      	b.n	8012f5e <sys_timeouts_mbox_fetch+0x42>
  }

  sleeptime = sys_timeouts_sleeptime();
 8012f3a:	f7ff ffc9 	bl	8012ed0 <sys_timeouts_sleeptime>
 8012f3e:	60f8      	str	r0, [r7, #12]
  if (sleeptime == 0 || sys_arch_mbox_fetch(mbox, msg, sleeptime) == SYS_ARCH_TIMEOUT) {
 8012f40:	68fb      	ldr	r3, [r7, #12]
 8012f42:	2b00      	cmp	r3, #0
 8012f44:	d008      	beq.n	8012f58 <sys_timeouts_mbox_fetch+0x3c>
 8012f46:	68fa      	ldr	r2, [r7, #12]
 8012f48:	6839      	ldr	r1, [r7, #0]
 8012f4a:	6878      	ldr	r0, [r7, #4]
 8012f4c:	f004 fcc9 	bl	80178e2 <sys_arch_mbox_fetch>
 8012f50:	4603      	mov	r3, r0
 8012f52:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8012f56:	d102      	bne.n	8012f5e <sys_timeouts_mbox_fetch+0x42>
    /* If a SYS_ARCH_TIMEOUT value is returned, a timeout occurred
       before a message could be fetched. */
    sys_check_timeouts();
 8012f58:	f7ff ff68 	bl	8012e2c <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 8012f5c:	e7e3      	b.n	8012f26 <sys_timeouts_mbox_fetch+0xa>
  }
}
 8012f5e:	3710      	adds	r7, #16
 8012f60:	46bd      	mov	sp, r7
 8012f62:	bd80      	pop	{r7, pc}
 8012f64:	20004248 	.word	0x20004248

08012f68 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 8012f68:	b480      	push	{r7}
 8012f6a:	af00      	add	r7, sp, #0
#if LWIP_RANDOMIZE_INITIAL_LOCAL_PORTS && defined(LWIP_RAND)
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
#endif /* LWIP_RANDOMIZE_INITIAL_LOCAL_PORTS && defined(LWIP_RAND) */
}
 8012f6c:	bf00      	nop
 8012f6e:	46bd      	mov	sp, r7
 8012f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f74:	4770      	bx	lr
	...

08012f78 <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 8012f78:	b480      	push	{r7}
 8012f7a:	b083      	sub	sp, #12
 8012f7c:	af00      	add	r7, sp, #0
  u16_t n = 0;
 8012f7e:	2300      	movs	r3, #0
 8012f80:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 8012f82:	4b17      	ldr	r3, [pc, #92]	; (8012fe0 <udp_new_port+0x68>)
 8012f84:	881b      	ldrh	r3, [r3, #0]
 8012f86:	1c5a      	adds	r2, r3, #1
 8012f88:	b291      	uxth	r1, r2
 8012f8a:	4a15      	ldr	r2, [pc, #84]	; (8012fe0 <udp_new_port+0x68>)
 8012f8c:	8011      	strh	r1, [r2, #0]
 8012f8e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8012f92:	4293      	cmp	r3, r2
 8012f94:	d103      	bne.n	8012f9e <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 8012f96:	4b12      	ldr	r3, [pc, #72]	; (8012fe0 <udp_new_port+0x68>)
 8012f98:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8012f9c:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8012f9e:	4b11      	ldr	r3, [pc, #68]	; (8012fe4 <udp_new_port+0x6c>)
 8012fa0:	681b      	ldr	r3, [r3, #0]
 8012fa2:	603b      	str	r3, [r7, #0]
 8012fa4:	e011      	b.n	8012fca <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 8012fa6:	683b      	ldr	r3, [r7, #0]
 8012fa8:	8a5a      	ldrh	r2, [r3, #18]
 8012faa:	4b0d      	ldr	r3, [pc, #52]	; (8012fe0 <udp_new_port+0x68>)
 8012fac:	881b      	ldrh	r3, [r3, #0]
 8012fae:	429a      	cmp	r2, r3
 8012fb0:	d108      	bne.n	8012fc4 <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 8012fb2:	88fb      	ldrh	r3, [r7, #6]
 8012fb4:	3301      	adds	r3, #1
 8012fb6:	80fb      	strh	r3, [r7, #6]
 8012fb8:	88fb      	ldrh	r3, [r7, #6]
 8012fba:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8012fbe:	d3e0      	bcc.n	8012f82 <udp_new_port+0xa>
        return 0;
 8012fc0:	2300      	movs	r3, #0
 8012fc2:	e007      	b.n	8012fd4 <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8012fc4:	683b      	ldr	r3, [r7, #0]
 8012fc6:	68db      	ldr	r3, [r3, #12]
 8012fc8:	603b      	str	r3, [r7, #0]
 8012fca:	683b      	ldr	r3, [r7, #0]
 8012fcc:	2b00      	cmp	r3, #0
 8012fce:	d1ea      	bne.n	8012fa6 <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 8012fd0:	4b03      	ldr	r3, [pc, #12]	; (8012fe0 <udp_new_port+0x68>)
 8012fd2:	881b      	ldrh	r3, [r3, #0]
}
 8012fd4:	4618      	mov	r0, r3
 8012fd6:	370c      	adds	r7, #12
 8012fd8:	46bd      	mov	sp, r7
 8012fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012fde:	4770      	bx	lr
 8012fe0:	20000124 	.word	0x20000124
 8012fe4:	2000ac4c 	.word	0x2000ac4c

08012fe8 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 8012fe8:	b480      	push	{r7}
 8012fea:	b085      	sub	sp, #20
 8012fec:	af00      	add	r7, sp, #0
 8012fee:	60f8      	str	r0, [r7, #12]
 8012ff0:	60b9      	str	r1, [r7, #8]
 8012ff2:	4613      	mov	r3, r2
 8012ff4:	71fb      	strb	r3, [r7, #7]
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 8012ff6:	79fb      	ldrb	r3, [r7, #7]
 8012ff8:	2b00      	cmp	r3, #0
 8012ffa:	d018      	beq.n	801302e <udp_input_local_match+0x46>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8012ffc:	68fb      	ldr	r3, [r7, #12]
 8012ffe:	2b00      	cmp	r3, #0
 8013000:	d013      	beq.n	801302a <udp_input_local_match+0x42>
 8013002:	68fb      	ldr	r3, [r7, #12]
 8013004:	681b      	ldr	r3, [r3, #0]
 8013006:	2b00      	cmp	r3, #0
 8013008:	d00f      	beq.n	801302a <udp_input_local_match+0x42>
          ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 801300a:	4b14      	ldr	r3, [pc, #80]	; (801305c <udp_input_local_match+0x74>)
 801300c:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801300e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8013012:	d00a      	beq.n	801302a <udp_input_local_match+0x42>
           ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 8013014:	68fb      	ldr	r3, [r7, #12]
 8013016:	681a      	ldr	r2, [r3, #0]
 8013018:	4b10      	ldr	r3, [pc, #64]	; (801305c <udp_input_local_match+0x74>)
 801301a:	695b      	ldr	r3, [r3, #20]
 801301c:	405a      	eors	r2, r3
 801301e:	68bb      	ldr	r3, [r7, #8]
 8013020:	3308      	adds	r3, #8
 8013022:	681b      	ldr	r3, [r3, #0]
 8013024:	4013      	ands	r3, r2
          ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8013026:	2b00      	cmp	r3, #0
 8013028:	d110      	bne.n	801304c <udp_input_local_match+0x64>
          return 1;
 801302a:	2301      	movs	r3, #1
 801302c:	e00f      	b.n	801304e <udp_input_local_match+0x66>
        }
      }
    } else
#endif /* LWIP_IPV4 */
    /* Handle IPv4 and IPv6: all or exact match */
    if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 801302e:	68fb      	ldr	r3, [r7, #12]
 8013030:	2b00      	cmp	r3, #0
 8013032:	d009      	beq.n	8013048 <udp_input_local_match+0x60>
 8013034:	68fb      	ldr	r3, [r7, #12]
 8013036:	681b      	ldr	r3, [r3, #0]
 8013038:	2b00      	cmp	r3, #0
 801303a:	d005      	beq.n	8013048 <udp_input_local_match+0x60>
 801303c:	68fb      	ldr	r3, [r7, #12]
 801303e:	681a      	ldr	r2, [r3, #0]
 8013040:	4b06      	ldr	r3, [pc, #24]	; (801305c <udp_input_local_match+0x74>)
 8013042:	695b      	ldr	r3, [r3, #20]
 8013044:	429a      	cmp	r2, r3
 8013046:	d101      	bne.n	801304c <udp_input_local_match+0x64>
      return 1;
 8013048:	2301      	movs	r3, #1
 801304a:	e000      	b.n	801304e <udp_input_local_match+0x66>
    }
  }

  return 0;
 801304c:	2300      	movs	r3, #0
}
 801304e:	4618      	mov	r0, r3
 8013050:	3714      	adds	r7, #20
 8013052:	46bd      	mov	sp, r7
 8013054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013058:	4770      	bx	lr
 801305a:	bf00      	nop
 801305c:	20007504 	.word	0x20007504

08013060 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 8013060:	b590      	push	{r4, r7, lr}
 8013062:	b08d      	sub	sp, #52	; 0x34
 8013064:	af02      	add	r7, sp, #8
 8013066:	6078      	str	r0, [r7, #4]
 8013068:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 801306a:	2300      	movs	r3, #0
 801306c:	76fb      	strb	r3, [r7, #27]
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 801306e:	687b      	ldr	r3, [r7, #4]
 8013070:	895b      	ldrh	r3, [r3, #10]
 8013072:	2b07      	cmp	r3, #7
 8013074:	d803      	bhi.n	801307e <udp_input+0x1e>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 8013076:	6878      	ldr	r0, [r7, #4]
 8013078:	f7fa f96a 	bl	800d350 <pbuf_free>
    goto end;
 801307c:	e0c6      	b.n	801320c <udp_input+0x1ac>
  }

  udphdr = (struct udp_hdr *)p->payload;
 801307e:	687b      	ldr	r3, [r7, #4]
 8013080:	685b      	ldr	r3, [r3, #4]
 8013082:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 8013084:	4b63      	ldr	r3, [pc, #396]	; (8013214 <udp_input+0x1b4>)
 8013086:	695a      	ldr	r2, [r3, #20]
 8013088:	4b62      	ldr	r3, [pc, #392]	; (8013214 <udp_input+0x1b4>)
 801308a:	681b      	ldr	r3, [r3, #0]
 801308c:	4619      	mov	r1, r3
 801308e:	4610      	mov	r0, r2
 8013090:	f003 fcec 	bl	8016a6c <ip4_addr_isbroadcast_u32>
 8013094:	4603      	mov	r3, r0
 8013096:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 8013098:	697b      	ldr	r3, [r7, #20]
 801309a:	881b      	ldrh	r3, [r3, #0]
 801309c:	b29b      	uxth	r3, r3
 801309e:	4618      	mov	r0, r3
 80130a0:	f7f8 ffb4 	bl	800c00c <lwip_htons>
 80130a4:	4603      	mov	r3, r0
 80130a6:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 80130a8:	697b      	ldr	r3, [r7, #20]
 80130aa:	885b      	ldrh	r3, [r3, #2]
 80130ac:	b29b      	uxth	r3, r3
 80130ae:	4618      	mov	r0, r3
 80130b0:	f7f8 ffac 	bl	800c00c <lwip_htons>
 80130b4:	4603      	mov	r3, r0
 80130b6:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print(UDP_DEBUG, ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print(UDP_DEBUG, ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 80130b8:	2300      	movs	r3, #0
 80130ba:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 80130bc:	2300      	movs	r3, #0
 80130be:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 80130c0:	2300      	movs	r3, #0
 80130c2:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 80130c4:	4b54      	ldr	r3, [pc, #336]	; (8013218 <udp_input+0x1b8>)
 80130c6:	681b      	ldr	r3, [r3, #0]
 80130c8:	627b      	str	r3, [r7, #36]	; 0x24
 80130ca:	e03b      	b.n	8013144 <udp_input+0xe4>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print(UDP_DEBUG, &pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 80130cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80130ce:	8a5b      	ldrh	r3, [r3, #18]
 80130d0:	89fa      	ldrh	r2, [r7, #14]
 80130d2:	429a      	cmp	r2, r3
 80130d4:	d131      	bne.n	801313a <udp_input+0xda>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 80130d6:	7cfb      	ldrb	r3, [r7, #19]
 80130d8:	461a      	mov	r2, r3
 80130da:	6839      	ldr	r1, [r7, #0]
 80130dc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80130de:	f7ff ff83 	bl	8012fe8 <udp_input_local_match>
 80130e2:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 80130e4:	2b00      	cmp	r3, #0
 80130e6:	d028      	beq.n	801313a <udp_input+0xda>
      if (((pcb->flags & UDP_FLAGS_CONNECTED) == 0) &&
 80130e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80130ea:	7c1b      	ldrb	r3, [r3, #16]
 80130ec:	f003 0304 	and.w	r3, r3, #4
 80130f0:	2b00      	cmp	r3, #0
 80130f2:	d104      	bne.n	80130fe <udp_input+0x9e>
 80130f4:	69fb      	ldr	r3, [r7, #28]
 80130f6:	2b00      	cmp	r3, #0
 80130f8:	d101      	bne.n	80130fe <udp_input+0x9e>
          /* prefer specific IPs over cath-all */
          || !ip_addr_isany(&pcb->local_ip)
#endif /* SO_REUSE */
          )) {
        /* the first unconnected matching PCB */
        uncon_pcb = pcb;
 80130fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80130fc:	61fb      	str	r3, [r7, #28]
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 80130fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013100:	8a9b      	ldrh	r3, [r3, #20]
 8013102:	8a3a      	ldrh	r2, [r7, #16]
 8013104:	429a      	cmp	r2, r3
 8013106:	d118      	bne.n	801313a <udp_input+0xda>
          (ip_addr_isany_val(pcb->remote_ip) ||
 8013108:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801310a:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 801310c:	2b00      	cmp	r3, #0
 801310e:	d005      	beq.n	801311c <udp_input+0xbc>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 8013110:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013112:	685a      	ldr	r2, [r3, #4]
 8013114:	4b3f      	ldr	r3, [pc, #252]	; (8013214 <udp_input+0x1b4>)
 8013116:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 8013118:	429a      	cmp	r2, r3
 801311a:	d10e      	bne.n	801313a <udp_input+0xda>
        /* the first fully matching PCB */
        if (prev != NULL) {
 801311c:	6a3b      	ldr	r3, [r7, #32]
 801311e:	2b00      	cmp	r3, #0
 8013120:	d014      	beq.n	801314c <udp_input+0xec>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 8013122:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013124:	68da      	ldr	r2, [r3, #12]
 8013126:	6a3b      	ldr	r3, [r7, #32]
 8013128:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 801312a:	4b3b      	ldr	r3, [pc, #236]	; (8013218 <udp_input+0x1b8>)
 801312c:	681a      	ldr	r2, [r3, #0]
 801312e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013130:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 8013132:	4a39      	ldr	r2, [pc, #228]	; (8013218 <udp_input+0x1b8>)
 8013134:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013136:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 8013138:	e008      	b.n	801314c <udp_input+0xec>
      }
    }

    prev = pcb;
 801313a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801313c:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801313e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013140:	68db      	ldr	r3, [r3, #12]
 8013142:	627b      	str	r3, [r7, #36]	; 0x24
 8013144:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013146:	2b00      	cmp	r3, #0
 8013148:	d1c0      	bne.n	80130cc <udp_input+0x6c>
 801314a:	e000      	b.n	801314e <udp_input+0xee>
        break;
 801314c:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 801314e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013150:	2b00      	cmp	r3, #0
 8013152:	d101      	bne.n	8013158 <udp_input+0xf8>
    pcb = uncon_pcb;
 8013154:	69fb      	ldr	r3, [r7, #28]
 8013156:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 8013158:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801315a:	2b00      	cmp	r3, #0
 801315c:	d002      	beq.n	8013164 <udp_input+0x104>
    for_us = 1;
 801315e:	2301      	movs	r3, #1
 8013160:	76fb      	strb	r3, [r7, #27]
 8013162:	e00a      	b.n	801317a <udp_input+0x11a>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 8013164:	683b      	ldr	r3, [r7, #0]
 8013166:	3304      	adds	r3, #4
 8013168:	681a      	ldr	r2, [r3, #0]
 801316a:	4b2a      	ldr	r3, [pc, #168]	; (8013214 <udp_input+0x1b4>)
 801316c:	695b      	ldr	r3, [r3, #20]
 801316e:	429a      	cmp	r2, r3
 8013170:	bf0c      	ite	eq
 8013172:	2301      	moveq	r3, #1
 8013174:	2300      	movne	r3, #0
 8013176:	b2db      	uxtb	r3, r3
 8013178:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 801317a:	7efb      	ldrb	r3, [r7, #27]
 801317c:	2b00      	cmp	r3, #0
 801317e:	d042      	beq.n	8013206 <udp_input+0x1a6>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_header(p, -UDP_HLEN)) {
 8013180:	f06f 0107 	mvn.w	r1, #7
 8013184:	6878      	ldr	r0, [r7, #4]
 8013186:	f7fa f8bf 	bl	800d308 <pbuf_header>
 801318a:	4603      	mov	r3, r0
 801318c:	2b00      	cmp	r3, #0
 801318e:	d00a      	beq.n	80131a6 <udp_input+0x146>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_header failed\n", 0);
 8013190:	4b22      	ldr	r3, [pc, #136]	; (801321c <udp_input+0x1bc>)
 8013192:	f240 1255 	movw	r2, #341	; 0x155
 8013196:	4922      	ldr	r1, [pc, #136]	; (8013220 <udp_input+0x1c0>)
 8013198:	4822      	ldr	r0, [pc, #136]	; (8013224 <udp_input+0x1c4>)
 801319a:	f005 fa55 	bl	8018648 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 801319e:	6878      	ldr	r0, [r7, #4]
 80131a0:	f7fa f8d6 	bl	800d350 <pbuf_free>
      goto end;
 80131a4:	e032      	b.n	801320c <udp_input+0x1ac>
    }

    if (pcb != NULL) {
 80131a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80131a8:	2b00      	cmp	r3, #0
 80131aa:	d012      	beq.n	80131d2 <udp_input+0x172>
          pbuf_header(p, -hdrs_len);
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 80131ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80131ae:	699b      	ldr	r3, [r3, #24]
 80131b0:	2b00      	cmp	r3, #0
 80131b2:	d00a      	beq.n	80131ca <udp_input+0x16a>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 80131b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80131b6:	699c      	ldr	r4, [r3, #24]
 80131b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80131ba:	69d8      	ldr	r0, [r3, #28]
 80131bc:	8a3b      	ldrh	r3, [r7, #16]
 80131be:	9300      	str	r3, [sp, #0]
 80131c0:	4b19      	ldr	r3, [pc, #100]	; (8013228 <udp_input+0x1c8>)
 80131c2:	687a      	ldr	r2, [r7, #4]
 80131c4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80131c6:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 80131c8:	e021      	b.n	801320e <udp_input+0x1ae>
        pbuf_free(p);
 80131ca:	6878      	ldr	r0, [r7, #4]
 80131cc:	f7fa f8c0 	bl	800d350 <pbuf_free>
        goto end;
 80131d0:	e01c      	b.n	801320c <udp_input+0x1ac>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 80131d2:	7cfb      	ldrb	r3, [r7, #19]
 80131d4:	2b00      	cmp	r3, #0
 80131d6:	d112      	bne.n	80131fe <udp_input+0x19e>
 80131d8:	4b0e      	ldr	r3, [pc, #56]	; (8013214 <udp_input+0x1b4>)
 80131da:	695b      	ldr	r3, [r3, #20]
 80131dc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80131e0:	2be0      	cmp	r3, #224	; 0xe0
 80131e2:	d00c      	beq.n	80131fe <udp_input+0x19e>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 80131e4:	4b0b      	ldr	r3, [pc, #44]	; (8013214 <udp_input+0x1b4>)
 80131e6:	899b      	ldrh	r3, [r3, #12]
 80131e8:	3308      	adds	r3, #8
 80131ea:	b29b      	uxth	r3, r3
 80131ec:	b21b      	sxth	r3, r3
 80131ee:	4619      	mov	r1, r3
 80131f0:	6878      	ldr	r0, [r7, #4]
 80131f2:	f7fa f89b 	bl	800d32c <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 80131f6:	2103      	movs	r1, #3
 80131f8:	6878      	ldr	r0, [r7, #4]
 80131fa:	f003 f917 	bl	801642c <icmp_dest_unreach>
      pbuf_free(p);
 80131fe:	6878      	ldr	r0, [r7, #4]
 8013200:	f7fa f8a6 	bl	800d350 <pbuf_free>
  return;
 8013204:	e003      	b.n	801320e <udp_input+0x1ae>
    pbuf_free(p);
 8013206:	6878      	ldr	r0, [r7, #4]
 8013208:	f7fa f8a2 	bl	800d350 <pbuf_free>
  return;
 801320c:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 801320e:	372c      	adds	r7, #44	; 0x2c
 8013210:	46bd      	mov	sp, r7
 8013212:	bd90      	pop	{r4, r7, pc}
 8013214:	20007504 	.word	0x20007504
 8013218:	2000ac4c 	.word	0x2000ac4c
 801321c:	0801ab28 	.word	0x0801ab28
 8013220:	0801ab58 	.word	0x0801ab58
 8013224:	0801ab6c 	.word	0x0801ab6c
 8013228:	20007514 	.word	0x20007514

0801322c <udp_sendto_if>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto_if(struct udp_pcb *pcb, struct pbuf *p,
  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif)
{
 801322c:	b580      	push	{r7, lr}
 801322e:	b088      	sub	sp, #32
 8013230:	af02      	add	r7, sp, #8
 8013232:	60f8      	str	r0, [r7, #12]
 8013234:	60b9      	str	r1, [r7, #8]
 8013236:	607a      	str	r2, [r7, #4]
 8013238:	807b      	strh	r3, [r7, #2]
                     u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  const ip_addr_t *src_ip;

  if ((pcb == NULL) || (dst_ip == NULL) || !IP_ADDR_PCB_VERSION_MATCH(pcb, dst_ip)) {
 801323a:	68fb      	ldr	r3, [r7, #12]
 801323c:	2b00      	cmp	r3, #0
 801323e:	d002      	beq.n	8013246 <udp_sendto_if+0x1a>
 8013240:	687b      	ldr	r3, [r7, #4]
 8013242:	2b00      	cmp	r3, #0
 8013244:	d102      	bne.n	801324c <udp_sendto_if+0x20>
    return ERR_VAL;
 8013246:	f06f 0305 	mvn.w	r3, #5
 801324a:	e028      	b.n	801329e <udp_sendto_if+0x72>
#endif /* LWIP_IPV6 */
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
  if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801324c:	68fb      	ldr	r3, [r7, #12]
 801324e:	2b00      	cmp	r3, #0
 8013250:	d009      	beq.n	8013266 <udp_sendto_if+0x3a>
 8013252:	68fb      	ldr	r3, [r7, #12]
 8013254:	681b      	ldr	r3, [r3, #0]
 8013256:	2b00      	cmp	r3, #0
 8013258:	d005      	beq.n	8013266 <udp_sendto_if+0x3a>
      ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 801325a:	68fb      	ldr	r3, [r7, #12]
 801325c:	681b      	ldr	r3, [r3, #0]
 801325e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8013262:	2be0      	cmp	r3, #224	; 0xe0
 8013264:	d103      	bne.n	801326e <udp_sendto_if+0x42>
    /* if the local_ip is any or multicast
     * use the outgoing network interface IP address as source address */
    src_ip = netif_ip_addr4(netif);
 8013266:	6a3b      	ldr	r3, [r7, #32]
 8013268:	3304      	adds	r3, #4
 801326a:	617b      	str	r3, [r7, #20]
 801326c:	e00b      	b.n	8013286 <udp_sendto_if+0x5a>
  } else {
    /* check if UDP PCB local IP address is correct
     * this could be an old address if netif->ip_addr has changed */
    if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 801326e:	68fb      	ldr	r3, [r7, #12]
 8013270:	681a      	ldr	r2, [r3, #0]
 8013272:	6a3b      	ldr	r3, [r7, #32]
 8013274:	3304      	adds	r3, #4
 8013276:	681b      	ldr	r3, [r3, #0]
 8013278:	429a      	cmp	r2, r3
 801327a:	d002      	beq.n	8013282 <udp_sendto_if+0x56>
      /* local_ip doesn't match, drop the packet */
      return ERR_RTE;
 801327c:	f06f 0303 	mvn.w	r3, #3
 8013280:	e00d      	b.n	801329e <udp_sendto_if+0x72>
    }
    /* use UDP PCB local IP address as source address */
    src_ip = &pcb->local_ip;
 8013282:	68fb      	ldr	r3, [r7, #12]
 8013284:	617b      	str	r3, [r7, #20]
  }
#endif /* LWIP_IPV4 */
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_src_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum, src_ip);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 8013286:	887a      	ldrh	r2, [r7, #2]
 8013288:	697b      	ldr	r3, [r7, #20]
 801328a:	9301      	str	r3, [sp, #4]
 801328c:	6a3b      	ldr	r3, [r7, #32]
 801328e:	9300      	str	r3, [sp, #0]
 8013290:	4613      	mov	r3, r2
 8013292:	687a      	ldr	r2, [r7, #4]
 8013294:	68b9      	ldr	r1, [r7, #8]
 8013296:	68f8      	ldr	r0, [r7, #12]
 8013298:	f000 f806 	bl	80132a8 <udp_sendto_if_src>
 801329c:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 801329e:	4618      	mov	r0, r3
 80132a0:	3718      	adds	r7, #24
 80132a2:	46bd      	mov	sp, r7
 80132a4:	bd80      	pop	{r7, pc}
	...

080132a8 <udp_sendto_if_src>:
/** @ingroup udp_raw
 * Same as @ref udp_sendto_if, but with source address */
err_t
udp_sendto_if_src(struct udp_pcb *pcb, struct pbuf *p,
  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif, const ip_addr_t *src_ip)
{
 80132a8:	b580      	push	{r7, lr}
 80132aa:	b08c      	sub	sp, #48	; 0x30
 80132ac:	af04      	add	r7, sp, #16
 80132ae:	60f8      	str	r0, [r7, #12]
 80132b0:	60b9      	str	r1, [r7, #8]
 80132b2:	607a      	str	r2, [r7, #4]
 80132b4:	807b      	strh	r3, [r7, #2]
  err_t err;
  struct pbuf *q; /* q will be sent down the stack */
  u8_t ip_proto;
  u8_t ttl;

  if ((pcb == NULL) || (dst_ip == NULL) || !IP_ADDR_PCB_VERSION_MATCH(pcb, src_ip) ||
 80132b6:	68fb      	ldr	r3, [r7, #12]
 80132b8:	2b00      	cmp	r3, #0
 80132ba:	d002      	beq.n	80132c2 <udp_sendto_if_src+0x1a>
 80132bc:	687b      	ldr	r3, [r7, #4]
 80132be:	2b00      	cmp	r3, #0
 80132c0:	d102      	bne.n	80132c8 <udp_sendto_if_src+0x20>
      !IP_ADDR_PCB_VERSION_MATCH(pcb, dst_ip)) {
    return ERR_VAL;
 80132c2:	f06f 0305 	mvn.w	r3, #5
 80132c6:	e07e      	b.n	80133c6 <udp_sendto_if_src+0x11e>
    return ERR_VAL;
  }
#endif /* LWIP_IPV4 && IP_SOF_BROADCAST */

  /* if the PCB is not yet bound to a port, bind it here */
  if (pcb->local_port == 0) {
 80132c8:	68fb      	ldr	r3, [r7, #12]
 80132ca:	8a5b      	ldrh	r3, [r3, #18]
 80132cc:	2b00      	cmp	r3, #0
 80132ce:	d10f      	bne.n	80132f0 <udp_sendto_if_src+0x48>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send: not yet bound to a port, binding now\n"));
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 80132d0:	68f9      	ldr	r1, [r7, #12]
 80132d2:	68fb      	ldr	r3, [r7, #12]
 80132d4:	8a5b      	ldrh	r3, [r3, #18]
 80132d6:	461a      	mov	r2, r3
 80132d8:	68f8      	ldr	r0, [r7, #12]
 80132da:	f000 f87f 	bl	80133dc <udp_bind>
 80132de:	4603      	mov	r3, r0
 80132e0:	76fb      	strb	r3, [r7, #27]
    if (err != ERR_OK) {
 80132e2:	f997 301b 	ldrsb.w	r3, [r7, #27]
 80132e6:	2b00      	cmp	r3, #0
 80132e8:	d002      	beq.n	80132f0 <udp_sendto_if_src+0x48>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: forced port bind failed\n"));
      return err;
 80132ea:	f997 301b 	ldrsb.w	r3, [r7, #27]
 80132ee:	e06a      	b.n	80133c6 <udp_sendto_if_src+0x11e>
    }
  }

  /* not enough space to add an UDP header to first pbuf in given p chain? */
  if (pbuf_header(p, UDP_HLEN)) {
 80132f0:	2108      	movs	r1, #8
 80132f2:	68b8      	ldr	r0, [r7, #8]
 80132f4:	f7fa f808 	bl	800d308 <pbuf_header>
 80132f8:	4603      	mov	r3, r0
 80132fa:	2b00      	cmp	r3, #0
 80132fc:	d014      	beq.n	8013328 <udp_sendto_if_src+0x80>
    /* allocate header in a separate new pbuf */
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 80132fe:	2200      	movs	r2, #0
 8013300:	2108      	movs	r1, #8
 8013302:	2001      	movs	r0, #1
 8013304:	f7f9 fcb2 	bl	800cc6c <pbuf_alloc>
 8013308:	61f8      	str	r0, [r7, #28]
    /* new header pbuf could not be allocated? */
    if (q == NULL) {
 801330a:	69fb      	ldr	r3, [r7, #28]
 801330c:	2b00      	cmp	r3, #0
 801330e:	d102      	bne.n	8013316 <udp_sendto_if_src+0x6e>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: could not allocate header\n"));
      return ERR_MEM;
 8013310:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8013314:	e057      	b.n	80133c6 <udp_sendto_if_src+0x11e>
    }
    if (p->tot_len != 0) {
 8013316:	68bb      	ldr	r3, [r7, #8]
 8013318:	891b      	ldrh	r3, [r3, #8]
 801331a:	2b00      	cmp	r3, #0
 801331c:	d006      	beq.n	801332c <udp_sendto_if_src+0x84>
      /* chain header q in front of given pbuf p (only if p contains data) */
      pbuf_chain(q, p);
 801331e:	68b9      	ldr	r1, [r7, #8]
 8013320:	69f8      	ldr	r0, [r7, #28]
 8013322:	f7fa f945 	bl	800d5b0 <pbuf_chain>
 8013326:	e001      	b.n	801332c <udp_sendto_if_src+0x84>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_send: added header pbuf %p before given pbuf %p\n", (void *)q, (void *)p));
  } else {
    /* adding space for header within p succeeded */
    /* first pbuf q equals given pbuf */
    q = p;
 8013328:	68bb      	ldr	r3, [r7, #8]
 801332a:	61fb      	str	r3, [r7, #28]
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: added header in given pbuf %p\n", (void *)p));
  }
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 801332c:	69fb      	ldr	r3, [r7, #28]
 801332e:	895b      	ldrh	r3, [r3, #10]
 8013330:	2b07      	cmp	r3, #7
 8013332:	d806      	bhi.n	8013342 <udp_sendto_if_src+0x9a>
 8013334:	4b26      	ldr	r3, [pc, #152]	; (80133d0 <udp_sendto_if_src+0x128>)
 8013336:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 801333a:	4926      	ldr	r1, [pc, #152]	; (80133d4 <udp_sendto_if_src+0x12c>)
 801333c:	4826      	ldr	r0, [pc, #152]	; (80133d8 <udp_sendto_if_src+0x130>)
 801333e:	f005 f983 	bl	8018648 <iprintf>
              (q->len >= sizeof(struct udp_hdr)));
  /* q now represents the packet to be sent */
  udphdr = (struct udp_hdr *)q->payload;
 8013342:	69fb      	ldr	r3, [r7, #28]
 8013344:	685b      	ldr	r3, [r3, #4]
 8013346:	617b      	str	r3, [r7, #20]
  udphdr->src = lwip_htons(pcb->local_port);
 8013348:	68fb      	ldr	r3, [r7, #12]
 801334a:	8a5b      	ldrh	r3, [r3, #18]
 801334c:	4618      	mov	r0, r3
 801334e:	f7f8 fe5d 	bl	800c00c <lwip_htons>
 8013352:	4603      	mov	r3, r0
 8013354:	461a      	mov	r2, r3
 8013356:	697b      	ldr	r3, [r7, #20]
 8013358:	801a      	strh	r2, [r3, #0]
  udphdr->dest = lwip_htons(dst_port);
 801335a:	887b      	ldrh	r3, [r7, #2]
 801335c:	4618      	mov	r0, r3
 801335e:	f7f8 fe55 	bl	800c00c <lwip_htons>
 8013362:	4603      	mov	r3, r0
 8013364:	461a      	mov	r2, r3
 8013366:	697b      	ldr	r3, [r7, #20]
 8013368:	805a      	strh	r2, [r3, #2]
  /* in UDP, 0 checksum means 'no checksum' */
  udphdr->chksum = 0x0000;
 801336a:	697b      	ldr	r3, [r7, #20]
 801336c:	2200      	movs	r2, #0
 801336e:	719a      	strb	r2, [r3, #6]
 8013370:	2200      	movs	r2, #0
 8013372:	71da      	strb	r2, [r3, #7]
    ip_proto = IP_PROTO_UDPLITE;
  } else
#endif /* LWIP_UDPLITE */
  {      /* UDP */
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP packet length %"U16_F"\n", q->tot_len));
    udphdr->len = lwip_htons(q->tot_len);
 8013374:	69fb      	ldr	r3, [r7, #28]
 8013376:	891b      	ldrh	r3, [r3, #8]
 8013378:	4618      	mov	r0, r3
 801337a:	f7f8 fe47 	bl	800c00c <lwip_htons>
 801337e:	4603      	mov	r3, r0
 8013380:	461a      	mov	r2, r3
 8013382:	697b      	ldr	r3, [r7, #20]
 8013384:	809a      	strh	r2, [r3, #4]
        }
        udphdr->chksum = udpchksum;
      }
    }
#endif /* CHECKSUM_GEN_UDP */
    ip_proto = IP_PROTO_UDP;
 8013386:	2311      	movs	r3, #17
 8013388:	74fb      	strb	r3, [r7, #19]

  /* Determine TTL to use */
#if LWIP_MULTICAST_TX_OPTIONS
  ttl = (ip_addr_ismulticast(dst_ip) ? udp_get_multicast_ttl(pcb) : pcb->ttl);
#else /* LWIP_MULTICAST_TX_OPTIONS */
  ttl = pcb->ttl;
 801338a:	68fb      	ldr	r3, [r7, #12]
 801338c:	7a9b      	ldrb	r3, [r3, #10]
 801338e:	74bb      	strb	r3, [r7, #18]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP checksum 0x%04"X16_F"\n", udphdr->chksum));
  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: ip_output_if (,,,,0x%02"X16_F",)\n", (u16_t)ip_proto));
  /* output to IP */
  NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 8013390:	68fb      	ldr	r3, [r7, #12]
 8013392:	7a5b      	ldrb	r3, [r3, #9]
 8013394:	7cb9      	ldrb	r1, [r7, #18]
 8013396:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8013398:	9202      	str	r2, [sp, #8]
 801339a:	7cfa      	ldrb	r2, [r7, #19]
 801339c:	9201      	str	r2, [sp, #4]
 801339e:	9300      	str	r3, [sp, #0]
 80133a0:	460b      	mov	r3, r1
 80133a2:	687a      	ldr	r2, [r7, #4]
 80133a4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80133a6:	69f8      	ldr	r0, [r7, #28]
 80133a8:	f003 fab8 	bl	801691c <ip4_output_if_src>
 80133ac:	4603      	mov	r3, r0
 80133ae:	76fb      	strb	r3, [r7, #27]

  /* @todo: must this be increased even if error occurred? */
  MIB2_STATS_INC(mib2.udpoutdatagrams);

  /* did we chain a separate header pbuf earlier? */
  if (q != p) {
 80133b0:	69fa      	ldr	r2, [r7, #28]
 80133b2:	68bb      	ldr	r3, [r7, #8]
 80133b4:	429a      	cmp	r2, r3
 80133b6:	d004      	beq.n	80133c2 <udp_sendto_if_src+0x11a>
    /* free the header pbuf */
    pbuf_free(q);
 80133b8:	69f8      	ldr	r0, [r7, #28]
 80133ba:	f7f9 ffc9 	bl	800d350 <pbuf_free>
    q = NULL;
 80133be:	2300      	movs	r3, #0
 80133c0:	61fb      	str	r3, [r7, #28]
    /* p is still referenced by the caller, and will live on */
  }

  UDP_STATS_INC(udp.xmit);
  return err;
 80133c2:	f997 301b 	ldrsb.w	r3, [r7, #27]
}
 80133c6:	4618      	mov	r0, r3
 80133c8:	3720      	adds	r7, #32
 80133ca:	46bd      	mov	sp, r7
 80133cc:	bd80      	pop	{r7, pc}
 80133ce:	bf00      	nop
 80133d0:	0801ab28 	.word	0x0801ab28
 80133d4:	0801ab94 	.word	0x0801ab94
 80133d8:	0801ab6c 	.word	0x0801ab6c

080133dc <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 80133dc:	b580      	push	{r7, lr}
 80133de:	b086      	sub	sp, #24
 80133e0:	af00      	add	r7, sp, #0
 80133e2:	60f8      	str	r0, [r7, #12]
 80133e4:	60b9      	str	r1, [r7, #8]
 80133e6:	4613      	mov	r3, r2
 80133e8:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *ipcb;
  u8_t rebind;

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 80133ea:	68bb      	ldr	r3, [r7, #8]
 80133ec:	2b00      	cmp	r3, #0
 80133ee:	d101      	bne.n	80133f4 <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 80133f0:	4b30      	ldr	r3, [pc, #192]	; (80134b4 <udp_bind+0xd8>)
 80133f2:	60bb      	str	r3, [r7, #8]
  }
#endif /* LWIP_IPV4 */

  /* still need to check for ipaddr == NULL in IPv6 only case */
  if ((pcb == NULL) || (ipaddr == NULL)) {
 80133f4:	68fb      	ldr	r3, [r7, #12]
 80133f6:	2b00      	cmp	r3, #0
 80133f8:	d002      	beq.n	8013400 <udp_bind+0x24>
 80133fa:	68bb      	ldr	r3, [r7, #8]
 80133fc:	2b00      	cmp	r3, #0
 80133fe:	d102      	bne.n	8013406 <udp_bind+0x2a>
    return ERR_VAL;
 8013400:	f06f 0305 	mvn.w	r3, #5
 8013404:	e052      	b.n	80134ac <udp_bind+0xd0>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 8013406:	2300      	movs	r3, #0
 8013408:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801340a:	4b2b      	ldr	r3, [pc, #172]	; (80134b8 <udp_bind+0xdc>)
 801340c:	681b      	ldr	r3, [r3, #0]
 801340e:	617b      	str	r3, [r7, #20]
 8013410:	e009      	b.n	8013426 <udp_bind+0x4a>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 8013412:	68fa      	ldr	r2, [r7, #12]
 8013414:	697b      	ldr	r3, [r7, #20]
 8013416:	429a      	cmp	r2, r3
 8013418:	d102      	bne.n	8013420 <udp_bind+0x44>
      rebind = 1;
 801341a:	2301      	movs	r3, #1
 801341c:	74fb      	strb	r3, [r7, #19]
      break;
 801341e:	e005      	b.n	801342c <udp_bind+0x50>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8013420:	697b      	ldr	r3, [r7, #20]
 8013422:	68db      	ldr	r3, [r3, #12]
 8013424:	617b      	str	r3, [r7, #20]
 8013426:	697b      	ldr	r3, [r7, #20]
 8013428:	2b00      	cmp	r3, #0
 801342a:	d1f2      	bne.n	8013412 <udp_bind+0x36>
    }
  }

  /* no port specified? */
  if (port == 0) {
 801342c:	88fb      	ldrh	r3, [r7, #6]
 801342e:	2b00      	cmp	r3, #0
 8013430:	d109      	bne.n	8013446 <udp_bind+0x6a>
    port = udp_new_port();
 8013432:	f7ff fda1 	bl	8012f78 <udp_new_port>
 8013436:	4603      	mov	r3, r0
 8013438:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 801343a:	88fb      	ldrh	r3, [r7, #6]
 801343c:	2b00      	cmp	r3, #0
 801343e:	d11e      	bne.n	801347e <udp_bind+0xa2>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 8013440:	f06f 0307 	mvn.w	r3, #7
 8013444:	e032      	b.n	80134ac <udp_bind+0xd0>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8013446:	4b1c      	ldr	r3, [pc, #112]	; (80134b8 <udp_bind+0xdc>)
 8013448:	681b      	ldr	r3, [r3, #0]
 801344a:	617b      	str	r3, [r7, #20]
 801344c:	e014      	b.n	8013478 <udp_bind+0x9c>
      if (pcb != ipcb) {
 801344e:	68fa      	ldr	r2, [r7, #12]
 8013450:	697b      	ldr	r3, [r7, #20]
 8013452:	429a      	cmp	r2, r3
 8013454:	d00d      	beq.n	8013472 <udp_bind+0x96>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 8013456:	697b      	ldr	r3, [r7, #20]
 8013458:	8a5b      	ldrh	r3, [r3, #18]
 801345a:	88fa      	ldrh	r2, [r7, #6]
 801345c:	429a      	cmp	r2, r3
 801345e:	d108      	bne.n	8013472 <udp_bind+0x96>
              /* IP address matches? */
              ip_addr_cmp(&ipcb->local_ip, ipaddr)) {
 8013460:	697b      	ldr	r3, [r7, #20]
 8013462:	681a      	ldr	r2, [r3, #0]
 8013464:	68bb      	ldr	r3, [r7, #8]
 8013466:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 8013468:	429a      	cmp	r2, r3
 801346a:	d102      	bne.n	8013472 <udp_bind+0x96>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 801346c:	f06f 0307 	mvn.w	r3, #7
 8013470:	e01c      	b.n	80134ac <udp_bind+0xd0>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8013472:	697b      	ldr	r3, [r7, #20]
 8013474:	68db      	ldr	r3, [r3, #12]
 8013476:	617b      	str	r3, [r7, #20]
 8013478:	697b      	ldr	r3, [r7, #20]
 801347a:	2b00      	cmp	r3, #0
 801347c:	d1e7      	bne.n	801344e <udp_bind+0x72>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 801347e:	68bb      	ldr	r3, [r7, #8]
 8013480:	2b00      	cmp	r3, #0
 8013482:	d002      	beq.n	801348a <udp_bind+0xae>
 8013484:	68bb      	ldr	r3, [r7, #8]
 8013486:	681b      	ldr	r3, [r3, #0]
 8013488:	e000      	b.n	801348c <udp_bind+0xb0>
 801348a:	2300      	movs	r3, #0
 801348c:	68fa      	ldr	r2, [r7, #12]
 801348e:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 8013490:	68fb      	ldr	r3, [r7, #12]
 8013492:	88fa      	ldrh	r2, [r7, #6]
 8013494:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 8013496:	7cfb      	ldrb	r3, [r7, #19]
 8013498:	2b00      	cmp	r3, #0
 801349a:	d106      	bne.n	80134aa <udp_bind+0xce>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 801349c:	4b06      	ldr	r3, [pc, #24]	; (80134b8 <udp_bind+0xdc>)
 801349e:	681a      	ldr	r2, [r3, #0]
 80134a0:	68fb      	ldr	r3, [r7, #12]
 80134a2:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 80134a4:	4a04      	ldr	r2, [pc, #16]	; (80134b8 <udp_bind+0xdc>)
 80134a6:	68fb      	ldr	r3, [r7, #12]
 80134a8:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, &pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 80134aa:	2300      	movs	r3, #0
}
 80134ac:	4618      	mov	r0, r3
 80134ae:	3718      	adds	r7, #24
 80134b0:	46bd      	mov	sp, r7
 80134b2:	bd80      	pop	{r7, pc}
 80134b4:	0801b8c0 	.word	0x0801b8c0
 80134b8:	2000ac4c 	.word	0x2000ac4c

080134bc <udp_connect>:
 *
 * @see udp_disconnect()
 */
err_t
udp_connect(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 80134bc:	b580      	push	{r7, lr}
 80134be:	b086      	sub	sp, #24
 80134c0:	af00      	add	r7, sp, #0
 80134c2:	60f8      	str	r0, [r7, #12]
 80134c4:	60b9      	str	r1, [r7, #8]
 80134c6:	4613      	mov	r3, r2
 80134c8:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *ipcb;

  if ((pcb == NULL) || (ipaddr == NULL)) {
 80134ca:	68fb      	ldr	r3, [r7, #12]
 80134cc:	2b00      	cmp	r3, #0
 80134ce:	d002      	beq.n	80134d6 <udp_connect+0x1a>
 80134d0:	68bb      	ldr	r3, [r7, #8]
 80134d2:	2b00      	cmp	r3, #0
 80134d4:	d102      	bne.n	80134dc <udp_connect+0x20>
    return ERR_VAL;
 80134d6:	f06f 0305 	mvn.w	r3, #5
 80134da:	e03e      	b.n	801355a <udp_connect+0x9e>
  }

  if (pcb->local_port == 0) {
 80134dc:	68fb      	ldr	r3, [r7, #12]
 80134de:	8a5b      	ldrh	r3, [r3, #18]
 80134e0:	2b00      	cmp	r3, #0
 80134e2:	d10f      	bne.n	8013504 <udp_connect+0x48>
    err_t err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 80134e4:	68f9      	ldr	r1, [r7, #12]
 80134e6:	68fb      	ldr	r3, [r7, #12]
 80134e8:	8a5b      	ldrh	r3, [r3, #18]
 80134ea:	461a      	mov	r2, r3
 80134ec:	68f8      	ldr	r0, [r7, #12]
 80134ee:	f7ff ff75 	bl	80133dc <udp_bind>
 80134f2:	4603      	mov	r3, r0
 80134f4:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 80134f6:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80134fa:	2b00      	cmp	r3, #0
 80134fc:	d002      	beq.n	8013504 <udp_connect+0x48>
      return err;
 80134fe:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8013502:	e02a      	b.n	801355a <udp_connect+0x9e>
    }
  }

  ip_addr_set_ipaddr(&pcb->remote_ip, ipaddr);
 8013504:	68bb      	ldr	r3, [r7, #8]
 8013506:	2b00      	cmp	r3, #0
 8013508:	d002      	beq.n	8013510 <udp_connect+0x54>
 801350a:	68bb      	ldr	r3, [r7, #8]
 801350c:	681b      	ldr	r3, [r3, #0]
 801350e:	e000      	b.n	8013512 <udp_connect+0x56>
 8013510:	2300      	movs	r3, #0
 8013512:	68fa      	ldr	r2, [r7, #12]
 8013514:	6053      	str	r3, [r2, #4]
  pcb->remote_port = port;
 8013516:	68fb      	ldr	r3, [r7, #12]
 8013518:	88fa      	ldrh	r2, [r7, #6]
 801351a:	829a      	strh	r2, [r3, #20]
  pcb->flags |= UDP_FLAGS_CONNECTED;
 801351c:	68fb      	ldr	r3, [r7, #12]
 801351e:	7c1b      	ldrb	r3, [r3, #16]
 8013520:	f043 0304 	orr.w	r3, r3, #4
 8013524:	b2da      	uxtb	r2, r3
 8013526:	68fb      	ldr	r3, [r7, #12]
 8013528:	741a      	strb	r2, [r3, #16]
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                      &pcb->remote_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->remote_port));

  /* Insert UDP PCB into the list of active UDP PCBs. */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801352a:	4b0e      	ldr	r3, [pc, #56]	; (8013564 <udp_connect+0xa8>)
 801352c:	681b      	ldr	r3, [r3, #0]
 801352e:	617b      	str	r3, [r7, #20]
 8013530:	e008      	b.n	8013544 <udp_connect+0x88>
    if (pcb == ipcb) {
 8013532:	68fa      	ldr	r2, [r7, #12]
 8013534:	697b      	ldr	r3, [r7, #20]
 8013536:	429a      	cmp	r2, r3
 8013538:	d101      	bne.n	801353e <udp_connect+0x82>
      /* already on the list, just return */
      return ERR_OK;
 801353a:	2300      	movs	r3, #0
 801353c:	e00d      	b.n	801355a <udp_connect+0x9e>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801353e:	697b      	ldr	r3, [r7, #20]
 8013540:	68db      	ldr	r3, [r3, #12]
 8013542:	617b      	str	r3, [r7, #20]
 8013544:	697b      	ldr	r3, [r7, #20]
 8013546:	2b00      	cmp	r3, #0
 8013548:	d1f3      	bne.n	8013532 <udp_connect+0x76>
    }
  }
  /* PCB not yet on the list, add PCB now */
  pcb->next = udp_pcbs;
 801354a:	4b06      	ldr	r3, [pc, #24]	; (8013564 <udp_connect+0xa8>)
 801354c:	681a      	ldr	r2, [r3, #0]
 801354e:	68fb      	ldr	r3, [r7, #12]
 8013550:	60da      	str	r2, [r3, #12]
  udp_pcbs = pcb;
 8013552:	4a04      	ldr	r2, [pc, #16]	; (8013564 <udp_connect+0xa8>)
 8013554:	68fb      	ldr	r3, [r7, #12]
 8013556:	6013      	str	r3, [r2, #0]
  return ERR_OK;
 8013558:	2300      	movs	r3, #0
}
 801355a:	4618      	mov	r0, r3
 801355c:	3718      	adds	r7, #24
 801355e:	46bd      	mov	sp, r7
 8013560:	bd80      	pop	{r7, pc}
 8013562:	bf00      	nop
 8013564:	2000ac4c 	.word	0x2000ac4c

08013568 <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 8013568:	b480      	push	{r7}
 801356a:	b085      	sub	sp, #20
 801356c:	af00      	add	r7, sp, #0
 801356e:	60f8      	str	r0, [r7, #12]
 8013570:	60b9      	str	r1, [r7, #8]
 8013572:	607a      	str	r2, [r7, #4]
  /* remember recv() callback and user data */
  pcb->recv = recv;
 8013574:	68fb      	ldr	r3, [r7, #12]
 8013576:	68ba      	ldr	r2, [r7, #8]
 8013578:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 801357a:	68fb      	ldr	r3, [r7, #12]
 801357c:	687a      	ldr	r2, [r7, #4]
 801357e:	61da      	str	r2, [r3, #28]
}
 8013580:	bf00      	nop
 8013582:	3714      	adds	r7, #20
 8013584:	46bd      	mov	sp, r7
 8013586:	f85d 7b04 	ldr.w	r7, [sp], #4
 801358a:	4770      	bx	lr

0801358c <udp_remove>:
 *
 * @see udp_new()
 */
void
udp_remove(struct udp_pcb *pcb)
{
 801358c:	b580      	push	{r7, lr}
 801358e:	b084      	sub	sp, #16
 8013590:	af00      	add	r7, sp, #0
 8013592:	6078      	str	r0, [r7, #4]
  struct udp_pcb *pcb2;

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 8013594:	4b15      	ldr	r3, [pc, #84]	; (80135ec <udp_remove+0x60>)
 8013596:	681b      	ldr	r3, [r3, #0]
 8013598:	687a      	ldr	r2, [r7, #4]
 801359a:	429a      	cmp	r2, r3
 801359c:	d105      	bne.n	80135aa <udp_remove+0x1e>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
 801359e:	4b13      	ldr	r3, [pc, #76]	; (80135ec <udp_remove+0x60>)
 80135a0:	681b      	ldr	r3, [r3, #0]
 80135a2:	68db      	ldr	r3, [r3, #12]
 80135a4:	4a11      	ldr	r2, [pc, #68]	; (80135ec <udp_remove+0x60>)
 80135a6:	6013      	str	r3, [r2, #0]
 80135a8:	e017      	b.n	80135da <udp_remove+0x4e>
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 80135aa:	4b10      	ldr	r3, [pc, #64]	; (80135ec <udp_remove+0x60>)
 80135ac:	681b      	ldr	r3, [r3, #0]
 80135ae:	60fb      	str	r3, [r7, #12]
 80135b0:	e010      	b.n	80135d4 <udp_remove+0x48>
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
 80135b2:	68fb      	ldr	r3, [r7, #12]
 80135b4:	68db      	ldr	r3, [r3, #12]
 80135b6:	2b00      	cmp	r3, #0
 80135b8:	d009      	beq.n	80135ce <udp_remove+0x42>
 80135ba:	68fb      	ldr	r3, [r7, #12]
 80135bc:	68db      	ldr	r3, [r3, #12]
 80135be:	687a      	ldr	r2, [r7, #4]
 80135c0:	429a      	cmp	r2, r3
 80135c2:	d104      	bne.n	80135ce <udp_remove+0x42>
        /* remove pcb from list */
        pcb2->next = pcb->next;
 80135c4:	687b      	ldr	r3, [r7, #4]
 80135c6:	68da      	ldr	r2, [r3, #12]
 80135c8:	68fb      	ldr	r3, [r7, #12]
 80135ca:	60da      	str	r2, [r3, #12]
        break;
 80135cc:	e005      	b.n	80135da <udp_remove+0x4e>
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 80135ce:	68fb      	ldr	r3, [r7, #12]
 80135d0:	68db      	ldr	r3, [r3, #12]
 80135d2:	60fb      	str	r3, [r7, #12]
 80135d4:	68fb      	ldr	r3, [r7, #12]
 80135d6:	2b00      	cmp	r3, #0
 80135d8:	d1eb      	bne.n	80135b2 <udp_remove+0x26>
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 80135da:	6879      	ldr	r1, [r7, #4]
 80135dc:	2000      	movs	r0, #0
 80135de:	f7f9 f955 	bl	800c88c <memp_free>
}
 80135e2:	bf00      	nop
 80135e4:	3710      	adds	r7, #16
 80135e6:	46bd      	mov	sp, r7
 80135e8:	bd80      	pop	{r7, pc}
 80135ea:	bf00      	nop
 80135ec:	2000ac4c 	.word	0x2000ac4c

080135f0 <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 80135f0:	b580      	push	{r7, lr}
 80135f2:	b082      	sub	sp, #8
 80135f4:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;
  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 80135f6:	2000      	movs	r0, #0
 80135f8:	f7f9 f8f6 	bl	800c7e8 <memp_malloc>
 80135fc:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 80135fe:	687b      	ldr	r3, [r7, #4]
 8013600:	2b00      	cmp	r3, #0
 8013602:	d007      	beq.n	8013614 <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 8013604:	2220      	movs	r2, #32
 8013606:	2100      	movs	r1, #0
 8013608:	6878      	ldr	r0, [r7, #4]
 801360a:	f004 ff6d 	bl	80184e8 <memset>
    pcb->ttl = UDP_TTL;
 801360e:	687b      	ldr	r3, [r7, #4]
 8013610:	22ff      	movs	r2, #255	; 0xff
 8013612:	729a      	strb	r2, [r3, #10]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 8013614:	687b      	ldr	r3, [r7, #4]
}
 8013616:	4618      	mov	r0, r3
 8013618:	3708      	adds	r7, #8
 801361a:	46bd      	mov	sp, r7
 801361c:	bd80      	pop	{r7, pc}
	...

08013620 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t* old_addr, const ip_addr_t* new_addr)
{
 8013620:	b480      	push	{r7}
 8013622:	b085      	sub	sp, #20
 8013624:	af00      	add	r7, sp, #0
 8013626:	6078      	str	r0, [r7, #4]
 8013628:	6039      	str	r1, [r7, #0]
  struct udp_pcb* upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 801362a:	687b      	ldr	r3, [r7, #4]
 801362c:	2b00      	cmp	r3, #0
 801362e:	d01e      	beq.n	801366e <udp_netif_ip_addr_changed+0x4e>
 8013630:	687b      	ldr	r3, [r7, #4]
 8013632:	681b      	ldr	r3, [r3, #0]
 8013634:	2b00      	cmp	r3, #0
 8013636:	d01a      	beq.n	801366e <udp_netif_ip_addr_changed+0x4e>
 8013638:	683b      	ldr	r3, [r7, #0]
 801363a:	2b00      	cmp	r3, #0
 801363c:	d017      	beq.n	801366e <udp_netif_ip_addr_changed+0x4e>
 801363e:	683b      	ldr	r3, [r7, #0]
 8013640:	681b      	ldr	r3, [r3, #0]
 8013642:	2b00      	cmp	r3, #0
 8013644:	d013      	beq.n	801366e <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8013646:	4b0d      	ldr	r3, [pc, #52]	; (801367c <udp_netif_ip_addr_changed+0x5c>)
 8013648:	681b      	ldr	r3, [r3, #0]
 801364a:	60fb      	str	r3, [r7, #12]
 801364c:	e00c      	b.n	8013668 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 801364e:	68fb      	ldr	r3, [r7, #12]
 8013650:	681a      	ldr	r2, [r3, #0]
 8013652:	687b      	ldr	r3, [r7, #4]
 8013654:	681b      	ldr	r3, [r3, #0]
 8013656:	429a      	cmp	r2, r3
 8013658:	d103      	bne.n	8013662 <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 801365a:	683b      	ldr	r3, [r7, #0]
 801365c:	681a      	ldr	r2, [r3, #0]
 801365e:	68fb      	ldr	r3, [r7, #12]
 8013660:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8013662:	68fb      	ldr	r3, [r7, #12]
 8013664:	68db      	ldr	r3, [r3, #12]
 8013666:	60fb      	str	r3, [r7, #12]
 8013668:	68fb      	ldr	r3, [r7, #12]
 801366a:	2b00      	cmp	r3, #0
 801366c:	d1ef      	bne.n	801364e <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 801366e:	bf00      	nop
 8013670:	3714      	adds	r7, #20
 8013672:	46bd      	mov	sp, r7
 8013674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013678:	4770      	bx	lr
 801367a:	bf00      	nop
 801367c:	2000ac4c 	.word	0x2000ac4c

08013680 <dhcp_inc_pcb_refcount>:
static void dhcp_option_trailer(struct dhcp *dhcp);

/** Ensure DHCP PCB is allocated and bound */
static err_t
dhcp_inc_pcb_refcount(void)
{
 8013680:	b580      	push	{r7, lr}
 8013682:	af00      	add	r7, sp, #0
  if (dhcp_pcb_refcount == 0) {
 8013684:	4b20      	ldr	r3, [pc, #128]	; (8013708 <dhcp_inc_pcb_refcount+0x88>)
 8013686:	781b      	ldrb	r3, [r3, #0]
 8013688:	2b00      	cmp	r3, #0
 801368a:	d133      	bne.n	80136f4 <dhcp_inc_pcb_refcount+0x74>
    LWIP_ASSERT("dhcp_inc_pcb_refcount(): memory leak", dhcp_pcb == NULL);
 801368c:	4b1f      	ldr	r3, [pc, #124]	; (801370c <dhcp_inc_pcb_refcount+0x8c>)
 801368e:	681b      	ldr	r3, [r3, #0]
 8013690:	2b00      	cmp	r3, #0
 8013692:	d005      	beq.n	80136a0 <dhcp_inc_pcb_refcount+0x20>
 8013694:	4b1e      	ldr	r3, [pc, #120]	; (8013710 <dhcp_inc_pcb_refcount+0x90>)
 8013696:	22d9      	movs	r2, #217	; 0xd9
 8013698:	491e      	ldr	r1, [pc, #120]	; (8013714 <dhcp_inc_pcb_refcount+0x94>)
 801369a:	481f      	ldr	r0, [pc, #124]	; (8013718 <dhcp_inc_pcb_refcount+0x98>)
 801369c:	f004 ffd4 	bl	8018648 <iprintf>

    /* allocate UDP PCB */
    dhcp_pcb = udp_new();
 80136a0:	f7ff ffa6 	bl	80135f0 <udp_new>
 80136a4:	4602      	mov	r2, r0
 80136a6:	4b19      	ldr	r3, [pc, #100]	; (801370c <dhcp_inc_pcb_refcount+0x8c>)
 80136a8:	601a      	str	r2, [r3, #0]

    if (dhcp_pcb == NULL) {
 80136aa:	4b18      	ldr	r3, [pc, #96]	; (801370c <dhcp_inc_pcb_refcount+0x8c>)
 80136ac:	681b      	ldr	r3, [r3, #0]
 80136ae:	2b00      	cmp	r3, #0
 80136b0:	d102      	bne.n	80136b8 <dhcp_inc_pcb_refcount+0x38>
      return ERR_MEM;
 80136b2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80136b6:	e024      	b.n	8013702 <dhcp_inc_pcb_refcount+0x82>
    }

    ip_set_option(dhcp_pcb, SOF_BROADCAST);
 80136b8:	4b14      	ldr	r3, [pc, #80]	; (801370c <dhcp_inc_pcb_refcount+0x8c>)
 80136ba:	681b      	ldr	r3, [r3, #0]
 80136bc:	7a1a      	ldrb	r2, [r3, #8]
 80136be:	4b13      	ldr	r3, [pc, #76]	; (801370c <dhcp_inc_pcb_refcount+0x8c>)
 80136c0:	681b      	ldr	r3, [r3, #0]
 80136c2:	f042 0220 	orr.w	r2, r2, #32
 80136c6:	b2d2      	uxtb	r2, r2
 80136c8:	721a      	strb	r2, [r3, #8]

    /* set up local and remote port for the pcb -> listen on all interfaces on all src/dest IPs */
    udp_bind(dhcp_pcb, IP4_ADDR_ANY, DHCP_CLIENT_PORT);
 80136ca:	4b10      	ldr	r3, [pc, #64]	; (801370c <dhcp_inc_pcb_refcount+0x8c>)
 80136cc:	681b      	ldr	r3, [r3, #0]
 80136ce:	2244      	movs	r2, #68	; 0x44
 80136d0:	4912      	ldr	r1, [pc, #72]	; (801371c <dhcp_inc_pcb_refcount+0x9c>)
 80136d2:	4618      	mov	r0, r3
 80136d4:	f7ff fe82 	bl	80133dc <udp_bind>
    udp_connect(dhcp_pcb, IP4_ADDR_ANY, DHCP_SERVER_PORT);
 80136d8:	4b0c      	ldr	r3, [pc, #48]	; (801370c <dhcp_inc_pcb_refcount+0x8c>)
 80136da:	681b      	ldr	r3, [r3, #0]
 80136dc:	2243      	movs	r2, #67	; 0x43
 80136de:	490f      	ldr	r1, [pc, #60]	; (801371c <dhcp_inc_pcb_refcount+0x9c>)
 80136e0:	4618      	mov	r0, r3
 80136e2:	f7ff feeb 	bl	80134bc <udp_connect>
    udp_recv(dhcp_pcb, dhcp_recv, NULL);
 80136e6:	4b09      	ldr	r3, [pc, #36]	; (801370c <dhcp_inc_pcb_refcount+0x8c>)
 80136e8:	681b      	ldr	r3, [r3, #0]
 80136ea:	2200      	movs	r2, #0
 80136ec:	490c      	ldr	r1, [pc, #48]	; (8013720 <dhcp_inc_pcb_refcount+0xa0>)
 80136ee:	4618      	mov	r0, r3
 80136f0:	f7ff ff3a 	bl	8013568 <udp_recv>
  }

  dhcp_pcb_refcount++;
 80136f4:	4b04      	ldr	r3, [pc, #16]	; (8013708 <dhcp_inc_pcb_refcount+0x88>)
 80136f6:	781b      	ldrb	r3, [r3, #0]
 80136f8:	3301      	adds	r3, #1
 80136fa:	b2da      	uxtb	r2, r3
 80136fc:	4b02      	ldr	r3, [pc, #8]	; (8013708 <dhcp_inc_pcb_refcount+0x88>)
 80136fe:	701a      	strb	r2, [r3, #0]

  return ERR_OK;
 8013700:	2300      	movs	r3, #0
}
 8013702:	4618      	mov	r0, r3
 8013704:	bd80      	pop	{r7, pc}
 8013706:	bf00      	nop
 8013708:	20004258 	.word	0x20004258
 801370c:	20004254 	.word	0x20004254
 8013710:	0801abc4 	.word	0x0801abc4
 8013714:	0801abfc 	.word	0x0801abfc
 8013718:	0801ac24 	.word	0x0801ac24
 801371c:	0801b8c0 	.word	0x0801b8c0
 8013720:	08014ddd 	.word	0x08014ddd

08013724 <dhcp_dec_pcb_refcount>:

/** Free DHCP PCB if the last netif stops using it */
static void
dhcp_dec_pcb_refcount(void)
{
 8013724:	b580      	push	{r7, lr}
 8013726:	af00      	add	r7, sp, #0
  LWIP_ASSERT("dhcp_pcb_refcount(): refcount error", (dhcp_pcb_refcount > 0));
 8013728:	4b0e      	ldr	r3, [pc, #56]	; (8013764 <dhcp_dec_pcb_refcount+0x40>)
 801372a:	781b      	ldrb	r3, [r3, #0]
 801372c:	2b00      	cmp	r3, #0
 801372e:	d105      	bne.n	801373c <dhcp_dec_pcb_refcount+0x18>
 8013730:	4b0d      	ldr	r3, [pc, #52]	; (8013768 <dhcp_dec_pcb_refcount+0x44>)
 8013732:	22f3      	movs	r2, #243	; 0xf3
 8013734:	490d      	ldr	r1, [pc, #52]	; (801376c <dhcp_dec_pcb_refcount+0x48>)
 8013736:	480e      	ldr	r0, [pc, #56]	; (8013770 <dhcp_dec_pcb_refcount+0x4c>)
 8013738:	f004 ff86 	bl	8018648 <iprintf>
  dhcp_pcb_refcount--;
 801373c:	4b09      	ldr	r3, [pc, #36]	; (8013764 <dhcp_dec_pcb_refcount+0x40>)
 801373e:	781b      	ldrb	r3, [r3, #0]
 8013740:	3b01      	subs	r3, #1
 8013742:	b2da      	uxtb	r2, r3
 8013744:	4b07      	ldr	r3, [pc, #28]	; (8013764 <dhcp_dec_pcb_refcount+0x40>)
 8013746:	701a      	strb	r2, [r3, #0]

  if (dhcp_pcb_refcount == 0) {
 8013748:	4b06      	ldr	r3, [pc, #24]	; (8013764 <dhcp_dec_pcb_refcount+0x40>)
 801374a:	781b      	ldrb	r3, [r3, #0]
 801374c:	2b00      	cmp	r3, #0
 801374e:	d107      	bne.n	8013760 <dhcp_dec_pcb_refcount+0x3c>
    udp_remove(dhcp_pcb);
 8013750:	4b08      	ldr	r3, [pc, #32]	; (8013774 <dhcp_dec_pcb_refcount+0x50>)
 8013752:	681b      	ldr	r3, [r3, #0]
 8013754:	4618      	mov	r0, r3
 8013756:	f7ff ff19 	bl	801358c <udp_remove>
    dhcp_pcb = NULL;
 801375a:	4b06      	ldr	r3, [pc, #24]	; (8013774 <dhcp_dec_pcb_refcount+0x50>)
 801375c:	2200      	movs	r2, #0
 801375e:	601a      	str	r2, [r3, #0]
  }
}
 8013760:	bf00      	nop
 8013762:	bd80      	pop	{r7, pc}
 8013764:	20004258 	.word	0x20004258
 8013768:	0801abc4 	.word	0x0801abc4
 801376c:	0801ac4c 	.word	0x0801ac4c
 8013770:	0801ac24 	.word	0x0801ac24
 8013774:	20004254 	.word	0x20004254

08013778 <dhcp_handle_nak>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_nak(struct netif *netif)
{
 8013778:	b580      	push	{r7, lr}
 801377a:	b084      	sub	sp, #16
 801377c:	af00      	add	r7, sp, #0
 801377e:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8013780:	687b      	ldr	r3, [r7, #4]
 8013782:	6a1b      	ldr	r3, [r3, #32]
 8013784:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_handle_nak(netif=%p) %c%c%"U16_F"\n",
    (void*)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  /* Change to a defined state - set this before assigning the address
     to ensure the callback can use dhcp_supplied_address() */
  dhcp_set_state(dhcp, DHCP_STATE_BACKING_OFF);
 8013786:	210c      	movs	r1, #12
 8013788:	68f8      	ldr	r0, [r7, #12]
 801378a:	f000 ff85 	bl	8014698 <dhcp_set_state>
  /* remove IP address from interface (must no longer be used, as per RFC2131) */
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 801378e:	4b06      	ldr	r3, [pc, #24]	; (80137a8 <dhcp_handle_nak+0x30>)
 8013790:	4a05      	ldr	r2, [pc, #20]	; (80137a8 <dhcp_handle_nak+0x30>)
 8013792:	4905      	ldr	r1, [pc, #20]	; (80137a8 <dhcp_handle_nak+0x30>)
 8013794:	6878      	ldr	r0, [r7, #4]
 8013796:	f7f9 f907 	bl	800c9a8 <netif_set_addr>
  /* We can immediately restart discovery */
  dhcp_discover(netif);
 801379a:	6878      	ldr	r0, [r7, #4]
 801379c:	f000 fbb6 	bl	8013f0c <dhcp_discover>
}
 80137a0:	bf00      	nop
 80137a2:	3710      	adds	r7, #16
 80137a4:	46bd      	mov	sp, r7
 80137a6:	bd80      	pop	{r7, pc}
 80137a8:	0801b8c0 	.word	0x0801b8c0

080137ac <dhcp_check>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_check(struct netif *netif)
{
 80137ac:	b580      	push	{r7, lr}
 80137ae:	b084      	sub	sp, #16
 80137b0:	af00      	add	r7, sp, #0
 80137b2:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80137b4:	687b      	ldr	r3, [r7, #4]
 80137b6:	6a1b      	ldr	r3, [r3, #32]
 80137b8:	60fb      	str	r3, [r7, #12]
  err_t result;
  u16_t msecs;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_check(netif=%p) %c%c\n", (void *)netif, (s16_t)netif->name[0],
    (s16_t)netif->name[1]));
  dhcp_set_state(dhcp, DHCP_STATE_CHECKING);
 80137ba:	2108      	movs	r1, #8
 80137bc:	68f8      	ldr	r0, [r7, #12]
 80137be:	f000 ff6b 	bl	8014698 <dhcp_set_state>
  /* create an ARP query for the offered IP address, expecting that no host
     responds, as the IP address should not be in use. */
  result = etharp_query(netif, &dhcp->offered_ip_addr, NULL);
 80137c2:	68fb      	ldr	r3, [r7, #12]
 80137c4:	3328      	adds	r3, #40	; 0x28
 80137c6:	2200      	movs	r2, #0
 80137c8:	4619      	mov	r1, r3
 80137ca:	6878      	ldr	r0, [r7, #4]
 80137cc:	f002 fb1e 	bl	8015e0c <etharp_query>
 80137d0:	4603      	mov	r3, r0
 80137d2:	72fb      	strb	r3, [r7, #11]
  if (result != ERR_OK) {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("dhcp_check: could not perform ARP query\n"));
  }
  if (dhcp->tries < 255) {
 80137d4:	68fb      	ldr	r3, [r7, #12]
 80137d6:	7a9b      	ldrb	r3, [r3, #10]
 80137d8:	2bff      	cmp	r3, #255	; 0xff
 80137da:	d005      	beq.n	80137e8 <dhcp_check+0x3c>
    dhcp->tries++;
 80137dc:	68fb      	ldr	r3, [r7, #12]
 80137de:	7a9b      	ldrb	r3, [r3, #10]
 80137e0:	3301      	adds	r3, #1
 80137e2:	b2da      	uxtb	r2, r3
 80137e4:	68fb      	ldr	r3, [r7, #12]
 80137e6:	729a      	strb	r2, [r3, #10]
  }
  msecs = 500;
 80137e8:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80137ec:	813b      	strh	r3, [r7, #8]
  dhcp->request_timeout = (msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS;
 80137ee:	893b      	ldrh	r3, [r7, #8]
 80137f0:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 80137f4:	4a06      	ldr	r2, [pc, #24]	; (8013810 <dhcp_check+0x64>)
 80137f6:	fb82 1203 	smull	r1, r2, r2, r3
 80137fa:	1152      	asrs	r2, r2, #5
 80137fc:	17db      	asrs	r3, r3, #31
 80137fe:	1ad3      	subs	r3, r2, r3
 8013800:	b29a      	uxth	r2, r3
 8013802:	68fb      	ldr	r3, [r7, #12]
 8013804:	82da      	strh	r2, [r3, #22]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_check(): set request timeout %"U16_F" msecs\n", msecs));
}
 8013806:	bf00      	nop
 8013808:	3710      	adds	r7, #16
 801380a:	46bd      	mov	sp, r7
 801380c:	bd80      	pop	{r7, pc}
 801380e:	bf00      	nop
 8013810:	10624dd3 	.word	0x10624dd3

08013814 <dhcp_handle_offer>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_offer(struct netif *netif)
{
 8013814:	b580      	push	{r7, lr}
 8013816:	b084      	sub	sp, #16
 8013818:	af00      	add	r7, sp, #0
 801381a:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801381c:	687b      	ldr	r3, [r7, #4]
 801381e:	6a1b      	ldr	r3, [r3, #32]
 8013820:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_handle_offer(netif=%p) %c%c%"U16_F"\n",
    (void*)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  /* obtain the server address */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SERVER_ID)) {
 8013822:	4b0c      	ldr	r3, [pc, #48]	; (8013854 <dhcp_handle_offer+0x40>)
 8013824:	789b      	ldrb	r3, [r3, #2]
 8013826:	2b00      	cmp	r3, #0
 8013828:	d00f      	beq.n	801384a <dhcp_handle_offer+0x36>
    ip_addr_set_ip4_u32(&dhcp->server_ip_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SERVER_ID)));
 801382a:	4b0b      	ldr	r3, [pc, #44]	; (8013858 <dhcp_handle_offer+0x44>)
 801382c:	689b      	ldr	r3, [r3, #8]
 801382e:	4618      	mov	r0, r3
 8013830:	f7f8 fbfa 	bl	800c028 <lwip_htonl>
 8013834:	4602      	mov	r2, r0
 8013836:	68fb      	ldr	r3, [r7, #12]
 8013838:	625a      	str	r2, [r3, #36]	; 0x24
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_handle_offer(): server 0x%08"X32_F"\n",
      ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
    /* remember offered address */
    ip4_addr_copy(dhcp->offered_ip_addr, dhcp->msg_in->yiaddr);
 801383a:	68fb      	ldr	r3, [r7, #12]
 801383c:	685b      	ldr	r3, [r3, #4]
 801383e:	691a      	ldr	r2, [r3, #16]
 8013840:	68fb      	ldr	r3, [r7, #12]
 8013842:	629a      	str	r2, [r3, #40]	; 0x28
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_handle_offer(): offer for 0x%08"X32_F"\n",
      ip4_addr_get_u32(&dhcp->offered_ip_addr)));

    dhcp_select(netif);
 8013844:	6878      	ldr	r0, [r7, #4]
 8013846:	f000 f809 	bl	801385c <dhcp_select>
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
      ("dhcp_handle_offer(netif=%p) did not get server ID!\n", (void*)netif));
  }
}
 801384a:	bf00      	nop
 801384c:	3710      	adds	r7, #16
 801384e:	46bd      	mov	sp, r7
 8013850:	bd80      	pop	{r7, pc}
 8013852:	bf00      	nop
 8013854:	2000ac50 	.word	0x2000ac50
 8013858:	2000ac58 	.word	0x2000ac58

0801385c <dhcp_select>:
 * @param netif the netif under DHCP control
 * @return lwIP specific error (see error.h)
 */
static err_t
dhcp_select(struct netif *netif)
{
 801385c:	b580      	push	{r7, lr}
 801385e:	b088      	sub	sp, #32
 8013860:	af02      	add	r7, sp, #8
 8013862:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8013864:	687b      	ldr	r3, [r7, #4]
 8013866:	6a1b      	ldr	r3, [r3, #32]
 8013868:	613b      	str	r3, [r7, #16]
  err_t result;
  u16_t msecs;
  u8_t i;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_select(netif=%p) %c%c%"U16_F"\n", (void*)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  dhcp_set_state(dhcp, DHCP_STATE_REQUESTING);
 801386a:	2101      	movs	r1, #1
 801386c:	6938      	ldr	r0, [r7, #16]
 801386e:	f000 ff13 	bl	8014698 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  result = dhcp_create_msg(netif, dhcp, DHCP_REQUEST);
 8013872:	2203      	movs	r2, #3
 8013874:	6939      	ldr	r1, [r7, #16]
 8013876:	6878      	ldr	r0, [r7, #4]
 8013878:	f001 fb94 	bl	8014fa4 <dhcp_create_msg>
 801387c:	4603      	mov	r3, r0
 801387e:	73fb      	strb	r3, [r7, #15]
  if (result == ERR_OK) {
 8013880:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8013884:	2b00      	cmp	r3, #0
 8013886:	d159      	bne.n	801393c <dhcp_select+0xe0>
    dhcp_option(dhcp, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8013888:	2202      	movs	r2, #2
 801388a:	2139      	movs	r1, #57	; 0x39
 801388c:	6938      	ldr	r0, [r7, #16]
 801388e:	f000 ff1d 	bl	80146cc <dhcp_option>
    dhcp_option_short(dhcp, DHCP_MAX_MSG_LEN(netif));
 8013892:	687b      	ldr	r3, [r7, #4]
 8013894:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8013896:	4619      	mov	r1, r3
 8013898:	6938      	ldr	r0, [r7, #16]
 801389a:	f000 ff79 	bl	8014790 <dhcp_option_short>

    /* MUST request the offered IP address */
    dhcp_option(dhcp, DHCP_OPTION_REQUESTED_IP, 4);
 801389e:	2204      	movs	r2, #4
 80138a0:	2132      	movs	r1, #50	; 0x32
 80138a2:	6938      	ldr	r0, [r7, #16]
 80138a4:	f000 ff12 	bl	80146cc <dhcp_option>
    dhcp_option_long(dhcp, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 80138a8:	693b      	ldr	r3, [r7, #16]
 80138aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80138ac:	4618      	mov	r0, r3
 80138ae:	f7f8 fbbb 	bl	800c028 <lwip_htonl>
 80138b2:	4603      	mov	r3, r0
 80138b4:	4619      	mov	r1, r3
 80138b6:	6938      	ldr	r0, [r7, #16]
 80138b8:	f000 ffa4 	bl	8014804 <dhcp_option_long>

    dhcp_option(dhcp, DHCP_OPTION_SERVER_ID, 4);
 80138bc:	2204      	movs	r2, #4
 80138be:	2136      	movs	r1, #54	; 0x36
 80138c0:	6938      	ldr	r0, [r7, #16]
 80138c2:	f000 ff03 	bl	80146cc <dhcp_option>
    dhcp_option_long(dhcp, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
 80138c6:	693b      	ldr	r3, [r7, #16]
 80138c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80138ca:	4618      	mov	r0, r3
 80138cc:	f7f8 fbac 	bl	800c028 <lwip_htonl>
 80138d0:	4603      	mov	r3, r0
 80138d2:	4619      	mov	r1, r3
 80138d4:	6938      	ldr	r0, [r7, #16]
 80138d6:	f000 ff95 	bl	8014804 <dhcp_option_long>

    dhcp_option(dhcp, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 80138da:	2203      	movs	r2, #3
 80138dc:	2137      	movs	r1, #55	; 0x37
 80138de:	6938      	ldr	r0, [r7, #16]
 80138e0:	f000 fef4 	bl	80146cc <dhcp_option>
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 80138e4:	2300      	movs	r3, #0
 80138e6:	75fb      	strb	r3, [r7, #23]
 80138e8:	e009      	b.n	80138fe <dhcp_select+0xa2>
      dhcp_option_byte(dhcp, dhcp_discover_request_options[i]);
 80138ea:	7dfb      	ldrb	r3, [r7, #23]
 80138ec:	4a29      	ldr	r2, [pc, #164]	; (8013994 <dhcp_select+0x138>)
 80138ee:	5cd3      	ldrb	r3, [r2, r3]
 80138f0:	4619      	mov	r1, r3
 80138f2:	6938      	ldr	r0, [r7, #16]
 80138f4:	f000 ff24 	bl	8014740 <dhcp_option_byte>
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 80138f8:	7dfb      	ldrb	r3, [r7, #23]
 80138fa:	3301      	adds	r3, #1
 80138fc:	75fb      	strb	r3, [r7, #23]
 80138fe:	7dfb      	ldrb	r3, [r7, #23]
 8013900:	2b02      	cmp	r3, #2
 8013902:	d9f2      	bls.n	80138ea <dhcp_select+0x8e>

#if LWIP_NETIF_HOSTNAME
    dhcp_option_hostname(dhcp, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    dhcp_option_trailer(dhcp);
 8013904:	6938      	ldr	r0, [r7, #16]
 8013906:	f001 fcf1 	bl	80152ec <dhcp_option_trailer>
    /* shrink the pbuf to the actual content length */
    pbuf_realloc(dhcp->p_out, sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + dhcp->options_out_len);
 801390a:	693b      	ldr	r3, [r7, #16]
 801390c:	68da      	ldr	r2, [r3, #12]
 801390e:	693b      	ldr	r3, [r7, #16]
 8013910:	8a9b      	ldrh	r3, [r3, #20]
 8013912:	33f0      	adds	r3, #240	; 0xf0
 8013914:	b29b      	uxth	r3, r3
 8013916:	4619      	mov	r1, r3
 8013918:	4610      	mov	r0, r2
 801391a:	f7f9 fba5 	bl	800d068 <pbuf_realloc>

    /* send broadcast to any DHCP server */
    udp_sendto_if_src(dhcp_pcb, dhcp->p_out, IP_ADDR_BROADCAST, DHCP_SERVER_PORT, netif, IP4_ADDR_ANY);
 801391e:	4b1e      	ldr	r3, [pc, #120]	; (8013998 <dhcp_select+0x13c>)
 8013920:	6818      	ldr	r0, [r3, #0]
 8013922:	693b      	ldr	r3, [r7, #16]
 8013924:	68d9      	ldr	r1, [r3, #12]
 8013926:	4b1d      	ldr	r3, [pc, #116]	; (801399c <dhcp_select+0x140>)
 8013928:	9301      	str	r3, [sp, #4]
 801392a:	687b      	ldr	r3, [r7, #4]
 801392c:	9300      	str	r3, [sp, #0]
 801392e:	2343      	movs	r3, #67	; 0x43
 8013930:	4a1b      	ldr	r2, [pc, #108]	; (80139a0 <dhcp_select+0x144>)
 8013932:	f7ff fcb9 	bl	80132a8 <udp_sendto_if_src>
    dhcp_delete_msg(dhcp);
 8013936:	6938      	ldr	r0, [r7, #16]
 8013938:	f001 fc96 	bl	8015268 <dhcp_delete_msg>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_select: REQUESTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("dhcp_select: could not allocate DHCP request\n"));
  }
  if (dhcp->tries < 255) {
 801393c:	693b      	ldr	r3, [r7, #16]
 801393e:	7a9b      	ldrb	r3, [r3, #10]
 8013940:	2bff      	cmp	r3, #255	; 0xff
 8013942:	d005      	beq.n	8013950 <dhcp_select+0xf4>
    dhcp->tries++;
 8013944:	693b      	ldr	r3, [r7, #16]
 8013946:	7a9b      	ldrb	r3, [r3, #10]
 8013948:	3301      	adds	r3, #1
 801394a:	b2da      	uxtb	r2, r3
 801394c:	693b      	ldr	r3, [r7, #16]
 801394e:	729a      	strb	r2, [r3, #10]
  }
  msecs = (dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000;
 8013950:	693b      	ldr	r3, [r7, #16]
 8013952:	7a9b      	ldrb	r3, [r3, #10]
 8013954:	2b05      	cmp	r3, #5
 8013956:	d807      	bhi.n	8013968 <dhcp_select+0x10c>
 8013958:	693b      	ldr	r3, [r7, #16]
 801395a:	7a9b      	ldrb	r3, [r3, #10]
 801395c:	461a      	mov	r2, r3
 801395e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8013962:	4093      	lsls	r3, r2
 8013964:	b29b      	uxth	r3, r3
 8013966:	e001      	b.n	801396c <dhcp_select+0x110>
 8013968:	f64e 2360 	movw	r3, #60000	; 0xea60
 801396c:	81bb      	strh	r3, [r7, #12]
  dhcp->request_timeout = (msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS;
 801396e:	89bb      	ldrh	r3, [r7, #12]
 8013970:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8013974:	4a0b      	ldr	r2, [pc, #44]	; (80139a4 <dhcp_select+0x148>)
 8013976:	fb82 1203 	smull	r1, r2, r2, r3
 801397a:	1152      	asrs	r2, r2, #5
 801397c:	17db      	asrs	r3, r3, #31
 801397e:	1ad3      	subs	r3, r2, r3
 8013980:	b29a      	uxth	r2, r3
 8013982:	693b      	ldr	r3, [r7, #16]
 8013984:	82da      	strh	r2, [r3, #22]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_select(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8013986:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801398a:	4618      	mov	r0, r3
 801398c:	3718      	adds	r7, #24
 801398e:	46bd      	mov	sp, r7
 8013990:	bd80      	pop	{r7, pc}
 8013992:	bf00      	nop
 8013994:	20000128 	.word	0x20000128
 8013998:	20004254 	.word	0x20004254
 801399c:	0801b8c0 	.word	0x0801b8c0
 80139a0:	0801b8c4 	.word	0x0801b8c4
 80139a4:	10624dd3 	.word	0x10624dd3

080139a8 <dhcp_coarse_tmr>:
 * The DHCP timer that checks for lease renewal/rebind timeouts.
 * Must be called once a minute (see @ref DHCP_COARSE_TIMER_SECS).
 */
void
dhcp_coarse_tmr(void)
{
 80139a8:	b580      	push	{r7, lr}
 80139aa:	b082      	sub	sp, #8
 80139ac:	af00      	add	r7, sp, #0
  struct netif *netif = netif_list;
 80139ae:	4b27      	ldr	r3, [pc, #156]	; (8013a4c <dhcp_coarse_tmr+0xa4>)
 80139b0:	681b      	ldr	r3, [r3, #0]
 80139b2:	607b      	str	r3, [r7, #4]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_coarse_tmr()\n"));
  /* iterate through all network interfaces */
  while (netif != NULL) {
 80139b4:	e042      	b.n	8013a3c <dhcp_coarse_tmr+0x94>
    /* only act on DHCP configured interfaces */
    struct dhcp *dhcp = netif_dhcp_data(netif);
 80139b6:	687b      	ldr	r3, [r7, #4]
 80139b8:	6a1b      	ldr	r3, [r3, #32]
 80139ba:	603b      	str	r3, [r7, #0]
    if ((dhcp != NULL) && (dhcp->state != DHCP_STATE_OFF)) {
 80139bc:	683b      	ldr	r3, [r7, #0]
 80139be:	2b00      	cmp	r3, #0
 80139c0:	d039      	beq.n	8013a36 <dhcp_coarse_tmr+0x8e>
 80139c2:	683b      	ldr	r3, [r7, #0]
 80139c4:	7a5b      	ldrb	r3, [r3, #9]
 80139c6:	2b00      	cmp	r3, #0
 80139c8:	d035      	beq.n	8013a36 <dhcp_coarse_tmr+0x8e>
      /* compare lease time to expire timeout */
      if (dhcp->t0_timeout && (++dhcp->lease_used == dhcp->t0_timeout)) {
 80139ca:	683b      	ldr	r3, [r7, #0]
 80139cc:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 80139ce:	2b00      	cmp	r3, #0
 80139d0:	d012      	beq.n	80139f8 <dhcp_coarse_tmr+0x50>
 80139d2:	683b      	ldr	r3, [r7, #0]
 80139d4:	8c1b      	ldrh	r3, [r3, #32]
 80139d6:	3301      	adds	r3, #1
 80139d8:	b29a      	uxth	r2, r3
 80139da:	683b      	ldr	r3, [r7, #0]
 80139dc:	841a      	strh	r2, [r3, #32]
 80139de:	683b      	ldr	r3, [r7, #0]
 80139e0:	8c1a      	ldrh	r2, [r3, #32]
 80139e2:	683b      	ldr	r3, [r7, #0]
 80139e4:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 80139e6:	429a      	cmp	r2, r3
 80139e8:	d106      	bne.n	80139f8 <dhcp_coarse_tmr+0x50>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t0 timeout\n"));
        /* this clients' lease time has expired */
        dhcp_release(netif);
 80139ea:	6878      	ldr	r0, [r7, #4]
 80139ec:	f000 fd94 	bl	8014518 <dhcp_release>
        dhcp_discover(netif);
 80139f0:	6878      	ldr	r0, [r7, #4]
 80139f2:	f000 fa8b 	bl	8013f0c <dhcp_discover>
 80139f6:	e01e      	b.n	8013a36 <dhcp_coarse_tmr+0x8e>
      /* timer is active (non zero), and triggers (zeroes) now? */
      } else if (dhcp->t2_rebind_time && (dhcp->t2_rebind_time-- == 1)) {
 80139f8:	683b      	ldr	r3, [r7, #0]
 80139fa:	8bdb      	ldrh	r3, [r3, #30]
 80139fc:	2b00      	cmp	r3, #0
 80139fe:	d00b      	beq.n	8013a18 <dhcp_coarse_tmr+0x70>
 8013a00:	683b      	ldr	r3, [r7, #0]
 8013a02:	8bdb      	ldrh	r3, [r3, #30]
 8013a04:	1e5a      	subs	r2, r3, #1
 8013a06:	b291      	uxth	r1, r2
 8013a08:	683a      	ldr	r2, [r7, #0]
 8013a0a:	83d1      	strh	r1, [r2, #30]
 8013a0c:	2b01      	cmp	r3, #1
 8013a0e:	d103      	bne.n	8013a18 <dhcp_coarse_tmr+0x70>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t2 timeout\n"));
        /* this clients' rebind timeout triggered */
        dhcp_t2_timeout(netif);
 8013a10:	6878      	ldr	r0, [r7, #4]
 8013a12:	f000 f8c6 	bl	8013ba2 <dhcp_t2_timeout>
 8013a16:	e00e      	b.n	8013a36 <dhcp_coarse_tmr+0x8e>
      /* timer is active (non zero), and triggers (zeroes) now */
      } else if (dhcp->t1_renew_time && (dhcp->t1_renew_time-- == 1)) {
 8013a18:	683b      	ldr	r3, [r7, #0]
 8013a1a:	8b9b      	ldrh	r3, [r3, #28]
 8013a1c:	2b00      	cmp	r3, #0
 8013a1e:	d00a      	beq.n	8013a36 <dhcp_coarse_tmr+0x8e>
 8013a20:	683b      	ldr	r3, [r7, #0]
 8013a22:	8b9b      	ldrh	r3, [r3, #28]
 8013a24:	1e5a      	subs	r2, r3, #1
 8013a26:	b291      	uxth	r1, r2
 8013a28:	683a      	ldr	r2, [r7, #0]
 8013a2a:	8391      	strh	r1, [r2, #28]
 8013a2c:	2b01      	cmp	r3, #1
 8013a2e:	d102      	bne.n	8013a36 <dhcp_coarse_tmr+0x8e>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t1 timeout\n"));
        /* this clients' renewal timeout triggered */
        dhcp_t1_timeout(netif);
 8013a30:	6878      	ldr	r0, [r7, #4]
 8013a32:	f000 f888 	bl	8013b46 <dhcp_t1_timeout>
      }
    }
    /* proceed to next netif */
    netif = netif->next;
 8013a36:	687b      	ldr	r3, [r7, #4]
 8013a38:	681b      	ldr	r3, [r3, #0]
 8013a3a:	607b      	str	r3, [r7, #4]
  while (netif != NULL) {
 8013a3c:	687b      	ldr	r3, [r7, #4]
 8013a3e:	2b00      	cmp	r3, #0
 8013a40:	d1b9      	bne.n	80139b6 <dhcp_coarse_tmr+0xe>
  }
}
 8013a42:	bf00      	nop
 8013a44:	3708      	adds	r7, #8
 8013a46:	46bd      	mov	sp, r7
 8013a48:	bd80      	pop	{r7, pc}
 8013a4a:	bf00      	nop
 8013a4c:	2000ac24 	.word	0x2000ac24

08013a50 <dhcp_fine_tmr>:
 * A DHCP server is expected to respond within a short period of time.
 * This timer checks whether an outstanding DHCP request is timed out.
 */
void
dhcp_fine_tmr(void)
{
 8013a50:	b580      	push	{r7, lr}
 8013a52:	b082      	sub	sp, #8
 8013a54:	af00      	add	r7, sp, #0
  struct netif *netif = netif_list;
 8013a56:	4b16      	ldr	r3, [pc, #88]	; (8013ab0 <dhcp_fine_tmr+0x60>)
 8013a58:	681b      	ldr	r3, [r3, #0]
 8013a5a:	607b      	str	r3, [r7, #4]
  /* loop through netif's */
  while (netif != NULL) {
 8013a5c:	e020      	b.n	8013aa0 <dhcp_fine_tmr+0x50>
    struct dhcp *dhcp = netif_dhcp_data(netif);
 8013a5e:	687b      	ldr	r3, [r7, #4]
 8013a60:	6a1b      	ldr	r3, [r3, #32]
 8013a62:	603b      	str	r3, [r7, #0]
    /* only act on DHCP configured interfaces */
    if (dhcp != NULL) {
 8013a64:	683b      	ldr	r3, [r7, #0]
 8013a66:	2b00      	cmp	r3, #0
 8013a68:	d017      	beq.n	8013a9a <dhcp_fine_tmr+0x4a>
      /* timer is active (non zero), and is about to trigger now */
      if (dhcp->request_timeout > 1) {
 8013a6a:	683b      	ldr	r3, [r7, #0]
 8013a6c:	8adb      	ldrh	r3, [r3, #22]
 8013a6e:	2b01      	cmp	r3, #1
 8013a70:	d906      	bls.n	8013a80 <dhcp_fine_tmr+0x30>
        dhcp->request_timeout--;
 8013a72:	683b      	ldr	r3, [r7, #0]
 8013a74:	8adb      	ldrh	r3, [r3, #22]
 8013a76:	3b01      	subs	r3, #1
 8013a78:	b29a      	uxth	r2, r3
 8013a7a:	683b      	ldr	r3, [r7, #0]
 8013a7c:	82da      	strh	r2, [r3, #22]
 8013a7e:	e00c      	b.n	8013a9a <dhcp_fine_tmr+0x4a>
      }
      else if (dhcp->request_timeout == 1) {
 8013a80:	683b      	ldr	r3, [r7, #0]
 8013a82:	8adb      	ldrh	r3, [r3, #22]
 8013a84:	2b01      	cmp	r3, #1
 8013a86:	d108      	bne.n	8013a9a <dhcp_fine_tmr+0x4a>
        dhcp->request_timeout--;
 8013a88:	683b      	ldr	r3, [r7, #0]
 8013a8a:	8adb      	ldrh	r3, [r3, #22]
 8013a8c:	3b01      	subs	r3, #1
 8013a8e:	b29a      	uxth	r2, r3
 8013a90:	683b      	ldr	r3, [r7, #0]
 8013a92:	82da      	strh	r2, [r3, #22]
        /* { netif->dhcp->request_timeout == 0 } */
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_fine_tmr(): request timeout\n"));
        /* this client's request timeout triggered */
        dhcp_timeout(netif);
 8013a94:	6878      	ldr	r0, [r7, #4]
 8013a96:	f000 f80d 	bl	8013ab4 <dhcp_timeout>
      }
    }
    /* proceed to next network interface */
    netif = netif->next;
 8013a9a:	687b      	ldr	r3, [r7, #4]
 8013a9c:	681b      	ldr	r3, [r3, #0]
 8013a9e:	607b      	str	r3, [r7, #4]
  while (netif != NULL) {
 8013aa0:	687b      	ldr	r3, [r7, #4]
 8013aa2:	2b00      	cmp	r3, #0
 8013aa4:	d1db      	bne.n	8013a5e <dhcp_fine_tmr+0xe>
  }
}
 8013aa6:	bf00      	nop
 8013aa8:	3708      	adds	r7, #8
 8013aaa:	46bd      	mov	sp, r7
 8013aac:	bd80      	pop	{r7, pc}
 8013aae:	bf00      	nop
 8013ab0:	2000ac24 	.word	0x2000ac24

08013ab4 <dhcp_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_timeout(struct netif *netif)
{
 8013ab4:	b580      	push	{r7, lr}
 8013ab6:	b084      	sub	sp, #16
 8013ab8:	af00      	add	r7, sp, #0
 8013aba:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8013abc:	687b      	ldr	r3, [r7, #4]
 8013abe:	6a1b      	ldr	r3, [r3, #32]
 8013ac0:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_timeout()\n"));
  /* back-off period has passed, or server selection timed out */
  if ((dhcp->state == DHCP_STATE_BACKING_OFF) || (dhcp->state == DHCP_STATE_SELECTING)) {
 8013ac2:	68fb      	ldr	r3, [r7, #12]
 8013ac4:	7a5b      	ldrb	r3, [r3, #9]
 8013ac6:	2b0c      	cmp	r3, #12
 8013ac8:	d003      	beq.n	8013ad2 <dhcp_timeout+0x1e>
 8013aca:	68fb      	ldr	r3, [r7, #12]
 8013acc:	7a5b      	ldrb	r3, [r3, #9]
 8013ace:	2b06      	cmp	r3, #6
 8013ad0:	d103      	bne.n	8013ada <dhcp_timeout+0x26>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_timeout(): restarting discovery\n"));
    dhcp_discover(netif);
 8013ad2:	6878      	ldr	r0, [r7, #4]
 8013ad4:	f000 fa1a 	bl	8013f0c <dhcp_discover>
      dhcp_reboot(netif);
    } else {
      dhcp_discover(netif);
    }
  }
}
 8013ad8:	e031      	b.n	8013b3e <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_REQUESTING) {
 8013ada:	68fb      	ldr	r3, [r7, #12]
 8013adc:	7a5b      	ldrb	r3, [r3, #9]
 8013ade:	2b01      	cmp	r3, #1
 8013ae0:	d10e      	bne.n	8013b00 <dhcp_timeout+0x4c>
    if (dhcp->tries <= 5) {
 8013ae2:	68fb      	ldr	r3, [r7, #12]
 8013ae4:	7a9b      	ldrb	r3, [r3, #10]
 8013ae6:	2b05      	cmp	r3, #5
 8013ae8:	d803      	bhi.n	8013af2 <dhcp_timeout+0x3e>
      dhcp_select(netif);
 8013aea:	6878      	ldr	r0, [r7, #4]
 8013aec:	f7ff feb6 	bl	801385c <dhcp_select>
}
 8013af0:	e025      	b.n	8013b3e <dhcp_timeout+0x8a>
      dhcp_release(netif);
 8013af2:	6878      	ldr	r0, [r7, #4]
 8013af4:	f000 fd10 	bl	8014518 <dhcp_release>
      dhcp_discover(netif);
 8013af8:	6878      	ldr	r0, [r7, #4]
 8013afa:	f000 fa07 	bl	8013f0c <dhcp_discover>
}
 8013afe:	e01e      	b.n	8013b3e <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_CHECKING) {
 8013b00:	68fb      	ldr	r3, [r7, #12]
 8013b02:	7a5b      	ldrb	r3, [r3, #9]
 8013b04:	2b08      	cmp	r3, #8
 8013b06:	d10b      	bne.n	8013b20 <dhcp_timeout+0x6c>
    if (dhcp->tries <= 1) {
 8013b08:	68fb      	ldr	r3, [r7, #12]
 8013b0a:	7a9b      	ldrb	r3, [r3, #10]
 8013b0c:	2b01      	cmp	r3, #1
 8013b0e:	d803      	bhi.n	8013b18 <dhcp_timeout+0x64>
      dhcp_check(netif);
 8013b10:	6878      	ldr	r0, [r7, #4]
 8013b12:	f7ff fe4b 	bl	80137ac <dhcp_check>
}
 8013b16:	e012      	b.n	8013b3e <dhcp_timeout+0x8a>
      dhcp_bind(netif);
 8013b18:	6878      	ldr	r0, [r7, #4]
 8013b1a:	f000 fa83 	bl	8014024 <dhcp_bind>
}
 8013b1e:	e00e      	b.n	8013b3e <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_REBOOTING) {
 8013b20:	68fb      	ldr	r3, [r7, #12]
 8013b22:	7a5b      	ldrb	r3, [r3, #9]
 8013b24:	2b03      	cmp	r3, #3
 8013b26:	d10a      	bne.n	8013b3e <dhcp_timeout+0x8a>
    if (dhcp->tries < REBOOT_TRIES) {
 8013b28:	68fb      	ldr	r3, [r7, #12]
 8013b2a:	7a9b      	ldrb	r3, [r3, #10]
 8013b2c:	2b01      	cmp	r3, #1
 8013b2e:	d803      	bhi.n	8013b38 <dhcp_timeout+0x84>
      dhcp_reboot(netif);
 8013b30:	6878      	ldr	r0, [r7, #4]
 8013b32:	f000 fc5d 	bl	80143f0 <dhcp_reboot>
}
 8013b36:	e002      	b.n	8013b3e <dhcp_timeout+0x8a>
      dhcp_discover(netif);
 8013b38:	6878      	ldr	r0, [r7, #4]
 8013b3a:	f000 f9e7 	bl	8013f0c <dhcp_discover>
}
 8013b3e:	bf00      	nop
 8013b40:	3710      	adds	r7, #16
 8013b42:	46bd      	mov	sp, r7
 8013b44:	bd80      	pop	{r7, pc}

08013b46 <dhcp_t1_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_t1_timeout(struct netif *netif)
{
 8013b46:	b580      	push	{r7, lr}
 8013b48:	b084      	sub	sp, #16
 8013b4a:	af00      	add	r7, sp, #0
 8013b4c:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8013b4e:	687b      	ldr	r3, [r7, #4]
 8013b50:	6a1b      	ldr	r3, [r3, #32]
 8013b52:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_t1_timeout()\n"));
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 8013b54:	68fb      	ldr	r3, [r7, #12]
 8013b56:	7a5b      	ldrb	r3, [r3, #9]
 8013b58:	2b01      	cmp	r3, #1
 8013b5a:	d007      	beq.n	8013b6c <dhcp_t1_timeout+0x26>
 8013b5c:	68fb      	ldr	r3, [r7, #12]
 8013b5e:	7a5b      	ldrb	r3, [r3, #9]
 8013b60:	2b0a      	cmp	r3, #10
 8013b62:	d003      	beq.n	8013b6c <dhcp_t1_timeout+0x26>
      (dhcp->state == DHCP_STATE_RENEWING)) {
 8013b64:	68fb      	ldr	r3, [r7, #12]
 8013b66:	7a5b      	ldrb	r3, [r3, #9]
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 8013b68:	2b05      	cmp	r3, #5
 8013b6a:	d116      	bne.n	8013b9a <dhcp_t1_timeout+0x54>
     * eventually time-out if renew tries fail. */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                ("dhcp_t1_timeout(): must renew\n"));
    /* This slightly different to RFC2131: DHCPREQUEST will be sent from state
       DHCP_STATE_RENEWING, not DHCP_STATE_BOUND */
    dhcp_renew(netif);
 8013b6c:	6878      	ldr	r0, [r7, #4]
 8013b6e:	f000 fb33 	bl	80141d8 <dhcp_renew>
    /* Calculate next timeout */
    if (((dhcp->t2_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS))
 8013b72:	68fb      	ldr	r3, [r7, #12]
 8013b74:	8b5b      	ldrh	r3, [r3, #26]
 8013b76:	461a      	mov	r2, r3
 8013b78:	68fb      	ldr	r3, [r7, #12]
 8013b7a:	8c1b      	ldrh	r3, [r3, #32]
 8013b7c:	1ad3      	subs	r3, r2, r3
 8013b7e:	2b01      	cmp	r3, #1
 8013b80:	dd0b      	ble.n	8013b9a <dhcp_t1_timeout+0x54>
    {
       dhcp->t1_renew_time = ((dhcp->t2_timeout - dhcp->lease_used) / 2);
 8013b82:	68fb      	ldr	r3, [r7, #12]
 8013b84:	8b5b      	ldrh	r3, [r3, #26]
 8013b86:	461a      	mov	r2, r3
 8013b88:	68fb      	ldr	r3, [r7, #12]
 8013b8a:	8c1b      	ldrh	r3, [r3, #32]
 8013b8c:	1ad3      	subs	r3, r2, r3
 8013b8e:	0fda      	lsrs	r2, r3, #31
 8013b90:	4413      	add	r3, r2
 8013b92:	105b      	asrs	r3, r3, #1
 8013b94:	b29a      	uxth	r2, r3
 8013b96:	68fb      	ldr	r3, [r7, #12]
 8013b98:	839a      	strh	r2, [r3, #28]
    }
  }
}
 8013b9a:	bf00      	nop
 8013b9c:	3710      	adds	r7, #16
 8013b9e:	46bd      	mov	sp, r7
 8013ba0:	bd80      	pop	{r7, pc}

08013ba2 <dhcp_t2_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_t2_timeout(struct netif *netif)
{
 8013ba2:	b580      	push	{r7, lr}
 8013ba4:	b084      	sub	sp, #16
 8013ba6:	af00      	add	r7, sp, #0
 8013ba8:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8013baa:	687b      	ldr	r3, [r7, #4]
 8013bac:	6a1b      	ldr	r3, [r3, #32]
 8013bae:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_t2_timeout()\n"));
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 8013bb0:	68fb      	ldr	r3, [r7, #12]
 8013bb2:	7a5b      	ldrb	r3, [r3, #9]
 8013bb4:	2b01      	cmp	r3, #1
 8013bb6:	d00b      	beq.n	8013bd0 <dhcp_t2_timeout+0x2e>
 8013bb8:	68fb      	ldr	r3, [r7, #12]
 8013bba:	7a5b      	ldrb	r3, [r3, #9]
 8013bbc:	2b0a      	cmp	r3, #10
 8013bbe:	d007      	beq.n	8013bd0 <dhcp_t2_timeout+0x2e>
      (dhcp->state == DHCP_STATE_RENEWING) || (dhcp->state == DHCP_STATE_REBINDING)) {
 8013bc0:	68fb      	ldr	r3, [r7, #12]
 8013bc2:	7a5b      	ldrb	r3, [r3, #9]
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 8013bc4:	2b05      	cmp	r3, #5
 8013bc6:	d003      	beq.n	8013bd0 <dhcp_t2_timeout+0x2e>
      (dhcp->state == DHCP_STATE_RENEWING) || (dhcp->state == DHCP_STATE_REBINDING)) {
 8013bc8:	68fb      	ldr	r3, [r7, #12]
 8013bca:	7a5b      	ldrb	r3, [r3, #9]
 8013bcc:	2b04      	cmp	r3, #4
 8013bce:	d116      	bne.n	8013bfe <dhcp_t2_timeout+0x5c>
    /* just retry to rebind */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                ("dhcp_t2_timeout(): must rebind\n"));
    /* This slightly different to RFC2131: DHCPREQUEST will be sent from state
       DHCP_STATE_REBINDING, not DHCP_STATE_BOUND */
    dhcp_rebind(netif);
 8013bd0:	6878      	ldr	r0, [r7, #4]
 8013bd2:	f000 fb87 	bl	80142e4 <dhcp_rebind>
    /* Calculate next timeout */
    if (((dhcp->t0_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS))
 8013bd6:	68fb      	ldr	r3, [r7, #12]
 8013bd8:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8013bda:	461a      	mov	r2, r3
 8013bdc:	68fb      	ldr	r3, [r7, #12]
 8013bde:	8c1b      	ldrh	r3, [r3, #32]
 8013be0:	1ad3      	subs	r3, r2, r3
 8013be2:	2b01      	cmp	r3, #1
 8013be4:	dd0b      	ble.n	8013bfe <dhcp_t2_timeout+0x5c>
    {
       dhcp->t2_rebind_time = ((dhcp->t0_timeout - dhcp->lease_used) / 2);
 8013be6:	68fb      	ldr	r3, [r7, #12]
 8013be8:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8013bea:	461a      	mov	r2, r3
 8013bec:	68fb      	ldr	r3, [r7, #12]
 8013bee:	8c1b      	ldrh	r3, [r3, #32]
 8013bf0:	1ad3      	subs	r3, r2, r3
 8013bf2:	0fda      	lsrs	r2, r3, #31
 8013bf4:	4413      	add	r3, r2
 8013bf6:	105b      	asrs	r3, r3, #1
 8013bf8:	b29a      	uxth	r2, r3
 8013bfa:	68fb      	ldr	r3, [r7, #12]
 8013bfc:	83da      	strh	r2, [r3, #30]
    }
  }
}
 8013bfe:	bf00      	nop
 8013c00:	3710      	adds	r7, #16
 8013c02:	46bd      	mov	sp, r7
 8013c04:	bd80      	pop	{r7, pc}
	...

08013c08 <dhcp_handle_ack>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_ack(struct netif *netif)
{
 8013c08:	b580      	push	{r7, lr}
 8013c0a:	b084      	sub	sp, #16
 8013c0c:	af00      	add	r7, sp, #0
 8013c0e:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8013c10:	687b      	ldr	r3, [r7, #4]
 8013c12:	6a1b      	ldr	r3, [r3, #32]
 8013c14:	60fb      	str	r3, [r7, #12]
#if LWIP_DHCP_GET_NTP_SRV
  ip4_addr_t ntp_server_addrs[LWIP_DHCP_MAX_NTP_SERVERS];
#endif

  /* clear options we might not get from the ACK */
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
 8013c16:	68fb      	ldr	r3, [r7, #12]
 8013c18:	2200      	movs	r2, #0
 8013c1a:	62da      	str	r2, [r3, #44]	; 0x2c
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 8013c1c:	68fb      	ldr	r3, [r7, #12]
 8013c1e:	2200      	movs	r2, #0
 8013c20:	631a      	str	r2, [r3, #48]	; 0x30
#if LWIP_DHCP_BOOTP_FILE
  ip4_addr_set_zero(&dhcp->offered_si_addr);
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* lease time given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_LEASE_TIME)) {
 8013c22:	4b27      	ldr	r3, [pc, #156]	; (8013cc0 <dhcp_handle_ack+0xb8>)
 8013c24:	78db      	ldrb	r3, [r3, #3]
 8013c26:	2b00      	cmp	r3, #0
 8013c28:	d003      	beq.n	8013c32 <dhcp_handle_ack+0x2a>
    /* remember offered lease time */
    dhcp->offered_t0_lease = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_LEASE_TIME);
 8013c2a:	4b26      	ldr	r3, [pc, #152]	; (8013cc4 <dhcp_handle_ack+0xbc>)
 8013c2c:	68da      	ldr	r2, [r3, #12]
 8013c2e:	68fb      	ldr	r3, [r7, #12]
 8013c30:	635a      	str	r2, [r3, #52]	; 0x34
  }
  /* renewal period given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T1)) {
 8013c32:	4b23      	ldr	r3, [pc, #140]	; (8013cc0 <dhcp_handle_ack+0xb8>)
 8013c34:	791b      	ldrb	r3, [r3, #4]
 8013c36:	2b00      	cmp	r3, #0
 8013c38:	d004      	beq.n	8013c44 <dhcp_handle_ack+0x3c>
    /* remember given renewal period */
    dhcp->offered_t1_renew = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T1);
 8013c3a:	4b22      	ldr	r3, [pc, #136]	; (8013cc4 <dhcp_handle_ack+0xbc>)
 8013c3c:	691a      	ldr	r2, [r3, #16]
 8013c3e:	68fb      	ldr	r3, [r7, #12]
 8013c40:	639a      	str	r2, [r3, #56]	; 0x38
 8013c42:	e004      	b.n	8013c4e <dhcp_handle_ack+0x46>
  } else {
    /* calculate safe periods for renewal */
    dhcp->offered_t1_renew = dhcp->offered_t0_lease / 2;
 8013c44:	68fb      	ldr	r3, [r7, #12]
 8013c46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013c48:	085a      	lsrs	r2, r3, #1
 8013c4a:	68fb      	ldr	r3, [r7, #12]
 8013c4c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* renewal period given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T2)) {
 8013c4e:	4b1c      	ldr	r3, [pc, #112]	; (8013cc0 <dhcp_handle_ack+0xb8>)
 8013c50:	795b      	ldrb	r3, [r3, #5]
 8013c52:	2b00      	cmp	r3, #0
 8013c54:	d004      	beq.n	8013c60 <dhcp_handle_ack+0x58>
    /* remember given rebind period */
    dhcp->offered_t2_rebind = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T2);
 8013c56:	4b1b      	ldr	r3, [pc, #108]	; (8013cc4 <dhcp_handle_ack+0xbc>)
 8013c58:	695a      	ldr	r2, [r3, #20]
 8013c5a:	68fb      	ldr	r3, [r7, #12]
 8013c5c:	63da      	str	r2, [r3, #60]	; 0x3c
 8013c5e:	e007      	b.n	8013c70 <dhcp_handle_ack+0x68>
  } else {
    /* calculate safe periods for rebinding (offered_t0_lease * 0.875 -> 87.5%)*/
    dhcp->offered_t2_rebind = (dhcp->offered_t0_lease * 7U) / 8U;
 8013c60:	68fb      	ldr	r3, [r7, #12]
 8013c62:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8013c64:	4613      	mov	r3, r2
 8013c66:	00db      	lsls	r3, r3, #3
 8013c68:	1a9b      	subs	r3, r3, r2
 8013c6a:	08da      	lsrs	r2, r3, #3
 8013c6c:	68fb      	ldr	r3, [r7, #12]
 8013c6e:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* (y)our internet address */
  ip4_addr_copy(dhcp->offered_ip_addr, dhcp->msg_in->yiaddr);
 8013c70:	68fb      	ldr	r3, [r7, #12]
 8013c72:	685b      	ldr	r3, [r3, #4]
 8013c74:	691a      	ldr	r2, [r3, #16]
 8013c76:	68fb      	ldr	r3, [r7, #12]
 8013c78:	629a      	str	r2, [r3, #40]	; 0x28
     boot file name copied in dhcp_parse_reply if not overloaded */
  ip4_addr_copy(dhcp->offered_si_addr, dhcp->msg_in->siaddr);
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* subnet mask given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)) {
 8013c7a:	4b11      	ldr	r3, [pc, #68]	; (8013cc0 <dhcp_handle_ack+0xb8>)
 8013c7c:	799b      	ldrb	r3, [r3, #6]
 8013c7e:	2b00      	cmp	r3, #0
 8013c80:	d00b      	beq.n	8013c9a <dhcp_handle_ack+0x92>
    /* remember given subnet mask */
    ip4_addr_set_u32(&dhcp->offered_sn_mask, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)));
 8013c82:	4b10      	ldr	r3, [pc, #64]	; (8013cc4 <dhcp_handle_ack+0xbc>)
 8013c84:	699b      	ldr	r3, [r3, #24]
 8013c86:	4618      	mov	r0, r3
 8013c88:	f7f8 f9ce 	bl	800c028 <lwip_htonl>
 8013c8c:	4602      	mov	r2, r0
 8013c8e:	68fb      	ldr	r3, [r7, #12]
 8013c90:	62da      	str	r2, [r3, #44]	; 0x2c
    dhcp->subnet_mask_given = 1;
 8013c92:	68fb      	ldr	r3, [r7, #12]
 8013c94:	2201      	movs	r2, #1
 8013c96:	72da      	strb	r2, [r3, #11]
 8013c98:	e002      	b.n	8013ca0 <dhcp_handle_ack+0x98>
  } else {
    dhcp->subnet_mask_given = 0;
 8013c9a:	68fb      	ldr	r3, [r7, #12]
 8013c9c:	2200      	movs	r2, #0
 8013c9e:	72da      	strb	r2, [r3, #11]
  }

  /* gateway router */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_ROUTER)) {
 8013ca0:	4b07      	ldr	r3, [pc, #28]	; (8013cc0 <dhcp_handle_ack+0xb8>)
 8013ca2:	79db      	ldrb	r3, [r3, #7]
 8013ca4:	2b00      	cmp	r3, #0
 8013ca6:	d007      	beq.n	8013cb8 <dhcp_handle_ack+0xb0>
    ip4_addr_set_u32(&dhcp->offered_gw_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_ROUTER)));
 8013ca8:	4b06      	ldr	r3, [pc, #24]	; (8013cc4 <dhcp_handle_ack+0xbc>)
 8013caa:	69db      	ldr	r3, [r3, #28]
 8013cac:	4618      	mov	r0, r3
 8013cae:	f7f8 f9bb 	bl	800c028 <lwip_htonl>
 8013cb2:	4602      	mov	r2, r0
 8013cb4:	68fb      	ldr	r3, [r7, #12]
 8013cb6:	631a      	str	r2, [r3, #48]	; 0x30
    ip_addr_t dns_addr;
    ip_addr_set_ip4_u32(&dns_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_DNS_SERVER + n)));
    dns_setserver(n, &dns_addr);
  }
#endif /* LWIP_DHCP_PROVIDE_DNS_SERVERS */
}
 8013cb8:	bf00      	nop
 8013cba:	3710      	adds	r7, #16
 8013cbc:	46bd      	mov	sp, r7
 8013cbe:	bd80      	pop	{r7, pc}
 8013cc0:	2000ac50 	.word	0x2000ac50
 8013cc4:	2000ac58 	.word	0x2000ac58

08013cc8 <dhcp_start>:
 * - ERR_OK - No error
 * - ERR_MEM - Out of memory
 */
err_t
dhcp_start(struct netif *netif)
{
 8013cc8:	b580      	push	{r7, lr}
 8013cca:	b084      	sub	sp, #16
 8013ccc:	af00      	add	r7, sp, #0
 8013cce:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp;
  err_t result;

  LWIP_ERROR("netif != NULL", (netif != NULL), return ERR_ARG;);
 8013cd0:	687b      	ldr	r3, [r7, #4]
 8013cd2:	2b00      	cmp	r3, #0
 8013cd4:	d109      	bne.n	8013cea <dhcp_start+0x22>
 8013cd6:	4b3c      	ldr	r3, [pc, #240]	; (8013dc8 <dhcp_start+0x100>)
 8013cd8:	f240 22d6 	movw	r2, #726	; 0x2d6
 8013cdc:	493b      	ldr	r1, [pc, #236]	; (8013dcc <dhcp_start+0x104>)
 8013cde:	483c      	ldr	r0, [pc, #240]	; (8013dd0 <dhcp_start+0x108>)
 8013ce0:	f004 fcb2 	bl	8018648 <iprintf>
 8013ce4:	f06f 030f 	mvn.w	r3, #15
 8013ce8:	e069      	b.n	8013dbe <dhcp_start+0xf6>
  LWIP_ERROR("netif is not up, old style port?", netif_is_up(netif), return ERR_ARG;);
 8013cea:	687b      	ldr	r3, [r7, #4]
 8013cec:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8013cf0:	f003 0301 	and.w	r3, r3, #1
 8013cf4:	2b00      	cmp	r3, #0
 8013cf6:	d109      	bne.n	8013d0c <dhcp_start+0x44>
 8013cf8:	4b33      	ldr	r3, [pc, #204]	; (8013dc8 <dhcp_start+0x100>)
 8013cfa:	f240 22d7 	movw	r2, #727	; 0x2d7
 8013cfe:	4935      	ldr	r1, [pc, #212]	; (8013dd4 <dhcp_start+0x10c>)
 8013d00:	4833      	ldr	r0, [pc, #204]	; (8013dd0 <dhcp_start+0x108>)
 8013d02:	f004 fca1 	bl	8018648 <iprintf>
 8013d06:	f06f 030f 	mvn.w	r3, #15
 8013d0a:	e058      	b.n	8013dbe <dhcp_start+0xf6>
  dhcp = netif_dhcp_data(netif);
 8013d0c:	687b      	ldr	r3, [r7, #4]
 8013d0e:	6a1b      	ldr	r3, [r3, #32]
 8013d10:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_start(netif=%p) %c%c%"U16_F"\n", (void*)netif, netif->name[0], netif->name[1], (u16_t)netif->num));

  /* check MTU of the netif */
  if (netif->mtu < DHCP_MAX_MSG_LEN_MIN_REQUIRED) {
 8013d12:	687b      	ldr	r3, [r7, #4]
 8013d14:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8013d16:	f5b3 7f10 	cmp.w	r3, #576	; 0x240
 8013d1a:	d202      	bcs.n	8013d22 <dhcp_start+0x5a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): Cannot use this netif with DHCP: MTU is too small\n"));
    return ERR_MEM;
 8013d1c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8013d20:	e04d      	b.n	8013dbe <dhcp_start+0xf6>
  }

  /* no DHCP client attached yet? */
  if (dhcp == NULL) {
 8013d22:	68fb      	ldr	r3, [r7, #12]
 8013d24:	2b00      	cmp	r3, #0
 8013d26:	d10d      	bne.n	8013d44 <dhcp_start+0x7c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): mallocing new DHCP client\n"));
    dhcp = (struct dhcp *)mem_malloc(sizeof(struct dhcp));
 8013d28:	2040      	movs	r0, #64	; 0x40
 8013d2a:	f7f8 fbed 	bl	800c508 <mem_malloc>
 8013d2e:	60f8      	str	r0, [r7, #12]
    if (dhcp == NULL) {
 8013d30:	68fb      	ldr	r3, [r7, #12]
 8013d32:	2b00      	cmp	r3, #0
 8013d34:	d102      	bne.n	8013d3c <dhcp_start+0x74>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): could not allocate dhcp\n"));
      return ERR_MEM;
 8013d36:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8013d3a:	e040      	b.n	8013dbe <dhcp_start+0xf6>
    }

    /* store this dhcp client in the netif */
    netif_set_client_data(netif, LWIP_NETIF_CLIENT_DATA_INDEX_DHCP, dhcp);
 8013d3c:	687b      	ldr	r3, [r7, #4]
 8013d3e:	68fa      	ldr	r2, [r7, #12]
 8013d40:	621a      	str	r2, [r3, #32]
 8013d42:	e01b      	b.n	8013d7c <dhcp_start+0xb4>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): allocated dhcp"));
  /* already has DHCP client attached */
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_start(): restarting DHCP configuration\n"));
    LWIP_ASSERT("pbuf p_out wasn't freed", dhcp->p_out == NULL);
 8013d44:	68fb      	ldr	r3, [r7, #12]
 8013d46:	68db      	ldr	r3, [r3, #12]
 8013d48:	2b00      	cmp	r3, #0
 8013d4a:	d006      	beq.n	8013d5a <dhcp_start+0x92>
 8013d4c:	4b1e      	ldr	r3, [pc, #120]	; (8013dc8 <dhcp_start+0x100>)
 8013d4e:	f44f 723c 	mov.w	r2, #752	; 0x2f0
 8013d52:	4921      	ldr	r1, [pc, #132]	; (8013dd8 <dhcp_start+0x110>)
 8013d54:	481e      	ldr	r0, [pc, #120]	; (8013dd0 <dhcp_start+0x108>)
 8013d56:	f004 fc77 	bl	8018648 <iprintf>
    LWIP_ASSERT("reply wasn't freed", dhcp->msg_in == NULL );
 8013d5a:	68fb      	ldr	r3, [r7, #12]
 8013d5c:	685b      	ldr	r3, [r3, #4]
 8013d5e:	2b00      	cmp	r3, #0
 8013d60:	d006      	beq.n	8013d70 <dhcp_start+0xa8>
 8013d62:	4b19      	ldr	r3, [pc, #100]	; (8013dc8 <dhcp_start+0x100>)
 8013d64:	f240 22f1 	movw	r2, #753	; 0x2f1
 8013d68:	491c      	ldr	r1, [pc, #112]	; (8013ddc <dhcp_start+0x114>)
 8013d6a:	4819      	ldr	r0, [pc, #100]	; (8013dd0 <dhcp_start+0x108>)
 8013d6c:	f004 fc6c 	bl	8018648 <iprintf>

    if (dhcp->pcb_allocated != 0) {
 8013d70:	68fb      	ldr	r3, [r7, #12]
 8013d72:	7a1b      	ldrb	r3, [r3, #8]
 8013d74:	2b00      	cmp	r3, #0
 8013d76:	d001      	beq.n	8013d7c <dhcp_start+0xb4>
      dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 8013d78:	f7ff fcd4 	bl	8013724 <dhcp_dec_pcb_refcount>
    }
    /* dhcp is cleared below, no need to reset flag*/
  }

  /* clear data structure */
  memset(dhcp, 0, sizeof(struct dhcp));
 8013d7c:	2240      	movs	r2, #64	; 0x40
 8013d7e:	2100      	movs	r1, #0
 8013d80:	68f8      	ldr	r0, [r7, #12]
 8013d82:	f004 fbb1 	bl	80184e8 <memset>
  /* dhcp_set_state(&dhcp, DHCP_STATE_OFF); */

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): starting DHCP configuration\n"));

  if (dhcp_inc_pcb_refcount() != ERR_OK) { /* ensure DHCP PCB is allocated */
 8013d86:	f7ff fc7b 	bl	8013680 <dhcp_inc_pcb_refcount>
 8013d8a:	4603      	mov	r3, r0
 8013d8c:	2b00      	cmp	r3, #0
 8013d8e:	d002      	beq.n	8013d96 <dhcp_start+0xce>
    return ERR_MEM;
 8013d90:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8013d94:	e013      	b.n	8013dbe <dhcp_start+0xf6>
  }
  dhcp->pcb_allocated = 1;
 8013d96:	68fb      	ldr	r3, [r7, #12]
 8013d98:	2201      	movs	r2, #1
 8013d9a:	721a      	strb	r2, [r3, #8]
  }
#endif /* LWIP_DHCP_CHECK_LINK_UP */


  /* (re)start the DHCP negotiation */
  result = dhcp_discover(netif);
 8013d9c:	6878      	ldr	r0, [r7, #4]
 8013d9e:	f000 f8b5 	bl	8013f0c <dhcp_discover>
 8013da2:	4603      	mov	r3, r0
 8013da4:	72fb      	strb	r3, [r7, #11]
  if (result != ERR_OK) {
 8013da6:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8013daa:	2b00      	cmp	r3, #0
 8013dac:	d005      	beq.n	8013dba <dhcp_start+0xf2>
    /* free resources allocated above */
    dhcp_stop(netif);
 8013dae:	6878      	ldr	r0, [r7, #4]
 8013db0:	f000 fc3a 	bl	8014628 <dhcp_stop>
    return ERR_MEM;
 8013db4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8013db8:	e001      	b.n	8013dbe <dhcp_start+0xf6>
  }
  return result;
 8013dba:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8013dbe:	4618      	mov	r0, r3
 8013dc0:	3710      	adds	r7, #16
 8013dc2:	46bd      	mov	sp, r7
 8013dc4:	bd80      	pop	{r7, pc}
 8013dc6:	bf00      	nop
 8013dc8:	0801abc4 	.word	0x0801abc4
 8013dcc:	0801ac70 	.word	0x0801ac70
 8013dd0:	0801ac24 	.word	0x0801ac24
 8013dd4:	0801acb4 	.word	0x0801acb4
 8013dd8:	0801acd8 	.word	0x0801acd8
 8013ddc:	0801acf0 	.word	0x0801acf0

08013de0 <dhcp_arp_reply>:
 * @param netif the network interface on which the reply was received
 * @param addr The IP address we received a reply from
 */
void
dhcp_arp_reply(struct netif *netif, const ip4_addr_t *addr)
{
 8013de0:	b580      	push	{r7, lr}
 8013de2:	b084      	sub	sp, #16
 8013de4:	af00      	add	r7, sp, #0
 8013de6:	6078      	str	r0, [r7, #4]
 8013de8:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp;

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 8013dea:	687b      	ldr	r3, [r7, #4]
 8013dec:	2b00      	cmp	r3, #0
 8013dee:	d107      	bne.n	8013e00 <dhcp_arp_reply+0x20>
 8013df0:	4b0e      	ldr	r3, [pc, #56]	; (8013e2c <dhcp_arp_reply+0x4c>)
 8013df2:	f240 327b 	movw	r2, #891	; 0x37b
 8013df6:	490e      	ldr	r1, [pc, #56]	; (8013e30 <dhcp_arp_reply+0x50>)
 8013df8:	480e      	ldr	r0, [pc, #56]	; (8013e34 <dhcp_arp_reply+0x54>)
 8013dfa:	f004 fc25 	bl	8018648 <iprintf>
 8013dfe:	e012      	b.n	8013e26 <dhcp_arp_reply+0x46>
  dhcp = netif_dhcp_data(netif);
 8013e00:	687b      	ldr	r3, [r7, #4]
 8013e02:	6a1b      	ldr	r3, [r3, #32]
 8013e04:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_arp_reply()\n"));
  /* is a DHCP client doing an ARP check? */
  if ((dhcp != NULL) && (dhcp->state == DHCP_STATE_CHECKING)) {
 8013e06:	68fb      	ldr	r3, [r7, #12]
 8013e08:	2b00      	cmp	r3, #0
 8013e0a:	d00c      	beq.n	8013e26 <dhcp_arp_reply+0x46>
 8013e0c:	68fb      	ldr	r3, [r7, #12]
 8013e0e:	7a5b      	ldrb	r3, [r3, #9]
 8013e10:	2b08      	cmp	r3, #8
 8013e12:	d108      	bne.n	8013e26 <dhcp_arp_reply+0x46>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_arp_reply(): CHECKING, arp reply for 0x%08"X32_F"\n",
      ip4_addr_get_u32(addr)));
    /* did a host respond with the address we
       were offered by the DHCP server? */
    if (ip4_addr_cmp(addr, &dhcp->offered_ip_addr)) {
 8013e14:	683b      	ldr	r3, [r7, #0]
 8013e16:	681a      	ldr	r2, [r3, #0]
 8013e18:	68fb      	ldr	r3, [r7, #12]
 8013e1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013e1c:	429a      	cmp	r2, r3
 8013e1e:	d102      	bne.n	8013e26 <dhcp_arp_reply+0x46>
      /* we will not accept the offered address */
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE | LWIP_DBG_LEVEL_WARNING,
        ("dhcp_arp_reply(): arp reply matched with offered address, declining\n"));
      dhcp_decline(netif);
 8013e20:	6878      	ldr	r0, [r7, #4]
 8013e22:	f000 f809 	bl	8013e38 <dhcp_decline>
    }
  }
}
 8013e26:	3710      	adds	r7, #16
 8013e28:	46bd      	mov	sp, r7
 8013e2a:	bd80      	pop	{r7, pc}
 8013e2c:	0801abc4 	.word	0x0801abc4
 8013e30:	0801ac70 	.word	0x0801ac70
 8013e34:	0801ac24 	.word	0x0801ac24

08013e38 <dhcp_decline>:
 *
 * @param netif the netif under DHCP control
 */
static err_t
dhcp_decline(struct netif *netif)
{
 8013e38:	b580      	push	{r7, lr}
 8013e3a:	b086      	sub	sp, #24
 8013e3c:	af02      	add	r7, sp, #8
 8013e3e:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8013e40:	687b      	ldr	r3, [r7, #4]
 8013e42:	6a1b      	ldr	r3, [r3, #32]
 8013e44:	60fb      	str	r3, [r7, #12]
  err_t result = ERR_OK;
 8013e46:	2300      	movs	r3, #0
 8013e48:	72fb      	strb	r3, [r7, #11]
  u16_t msecs;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_decline()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_BACKING_OFF);
 8013e4a:	210c      	movs	r1, #12
 8013e4c:	68f8      	ldr	r0, [r7, #12]
 8013e4e:	f000 fc23 	bl	8014698 <dhcp_set_state>
  /* create and initialize the DHCP message header */
  result = dhcp_create_msg(netif, dhcp, DHCP_DECLINE);
 8013e52:	2204      	movs	r2, #4
 8013e54:	68f9      	ldr	r1, [r7, #12]
 8013e56:	6878      	ldr	r0, [r7, #4]
 8013e58:	f001 f8a4 	bl	8014fa4 <dhcp_create_msg>
 8013e5c:	4603      	mov	r3, r0
 8013e5e:	72fb      	strb	r3, [r7, #11]
  if (result == ERR_OK) {
 8013e60:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8013e64:	2b00      	cmp	r3, #0
 8013e66:	d12a      	bne.n	8013ebe <dhcp_decline+0x86>
    dhcp_option(dhcp, DHCP_OPTION_REQUESTED_IP, 4);
 8013e68:	2204      	movs	r2, #4
 8013e6a:	2132      	movs	r1, #50	; 0x32
 8013e6c:	68f8      	ldr	r0, [r7, #12]
 8013e6e:	f000 fc2d 	bl	80146cc <dhcp_option>
    dhcp_option_long(dhcp, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 8013e72:	68fb      	ldr	r3, [r7, #12]
 8013e74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013e76:	4618      	mov	r0, r3
 8013e78:	f7f8 f8d6 	bl	800c028 <lwip_htonl>
 8013e7c:	4603      	mov	r3, r0
 8013e7e:	4619      	mov	r1, r3
 8013e80:	68f8      	ldr	r0, [r7, #12]
 8013e82:	f000 fcbf 	bl	8014804 <dhcp_option_long>

    dhcp_option_trailer(dhcp);
 8013e86:	68f8      	ldr	r0, [r7, #12]
 8013e88:	f001 fa30 	bl	80152ec <dhcp_option_trailer>
    /* resize pbuf to reflect true size of options */
    pbuf_realloc(dhcp->p_out, sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + dhcp->options_out_len);
 8013e8c:	68fb      	ldr	r3, [r7, #12]
 8013e8e:	68da      	ldr	r2, [r3, #12]
 8013e90:	68fb      	ldr	r3, [r7, #12]
 8013e92:	8a9b      	ldrh	r3, [r3, #20]
 8013e94:	33f0      	adds	r3, #240	; 0xf0
 8013e96:	b29b      	uxth	r3, r3
 8013e98:	4619      	mov	r1, r3
 8013e9a:	4610      	mov	r0, r2
 8013e9c:	f7f9 f8e4 	bl	800d068 <pbuf_realloc>

    /* per section 4.4.4, broadcast DECLINE messages */
    udp_sendto_if_src(dhcp_pcb, dhcp->p_out, IP_ADDR_BROADCAST, DHCP_SERVER_PORT, netif, IP4_ADDR_ANY);
 8013ea0:	4b16      	ldr	r3, [pc, #88]	; (8013efc <dhcp_decline+0xc4>)
 8013ea2:	6818      	ldr	r0, [r3, #0]
 8013ea4:	68fb      	ldr	r3, [r7, #12]
 8013ea6:	68d9      	ldr	r1, [r3, #12]
 8013ea8:	4b15      	ldr	r3, [pc, #84]	; (8013f00 <dhcp_decline+0xc8>)
 8013eaa:	9301      	str	r3, [sp, #4]
 8013eac:	687b      	ldr	r3, [r7, #4]
 8013eae:	9300      	str	r3, [sp, #0]
 8013eb0:	2343      	movs	r3, #67	; 0x43
 8013eb2:	4a14      	ldr	r2, [pc, #80]	; (8013f04 <dhcp_decline+0xcc>)
 8013eb4:	f7ff f9f8 	bl	80132a8 <udp_sendto_if_src>
    dhcp_delete_msg(dhcp);
 8013eb8:	68f8      	ldr	r0, [r7, #12]
 8013eba:	f001 f9d5 	bl	8015268 <dhcp_delete_msg>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_decline: BACKING OFF\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
      ("dhcp_decline: could not allocate DHCP request\n"));
  }
  if (dhcp->tries < 255) {
 8013ebe:	68fb      	ldr	r3, [r7, #12]
 8013ec0:	7a9b      	ldrb	r3, [r3, #10]
 8013ec2:	2bff      	cmp	r3, #255	; 0xff
 8013ec4:	d005      	beq.n	8013ed2 <dhcp_decline+0x9a>
    dhcp->tries++;
 8013ec6:	68fb      	ldr	r3, [r7, #12]
 8013ec8:	7a9b      	ldrb	r3, [r3, #10]
 8013eca:	3301      	adds	r3, #1
 8013ecc:	b2da      	uxtb	r2, r3
 8013ece:	68fb      	ldr	r3, [r7, #12]
 8013ed0:	729a      	strb	r2, [r3, #10]
  }
  msecs = 10*1000;
 8013ed2:	f242 7310 	movw	r3, #10000	; 0x2710
 8013ed6:	813b      	strh	r3, [r7, #8]
  dhcp->request_timeout = (msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS;
 8013ed8:	893b      	ldrh	r3, [r7, #8]
 8013eda:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8013ede:	4a0a      	ldr	r2, [pc, #40]	; (8013f08 <dhcp_decline+0xd0>)
 8013ee0:	fb82 1203 	smull	r1, r2, r2, r3
 8013ee4:	1152      	asrs	r2, r2, #5
 8013ee6:	17db      	asrs	r3, r3, #31
 8013ee8:	1ad3      	subs	r3, r2, r3
 8013eea:	b29a      	uxth	r2, r3
 8013eec:	68fb      	ldr	r3, [r7, #12]
 8013eee:	82da      	strh	r2, [r3, #22]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_decline(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8013ef0:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8013ef4:	4618      	mov	r0, r3
 8013ef6:	3710      	adds	r7, #16
 8013ef8:	46bd      	mov	sp, r7
 8013efa:	bd80      	pop	{r7, pc}
 8013efc:	20004254 	.word	0x20004254
 8013f00:	0801b8c0 	.word	0x0801b8c0
 8013f04:	0801b8c4 	.word	0x0801b8c4
 8013f08:	10624dd3 	.word	0x10624dd3

08013f0c <dhcp_discover>:
 *
 * @param netif the netif under DHCP control
 */
static err_t
dhcp_discover(struct netif *netif)
{
 8013f0c:	b580      	push	{r7, lr}
 8013f0e:	b088      	sub	sp, #32
 8013f10:	af02      	add	r7, sp, #8
 8013f12:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8013f14:	687b      	ldr	r3, [r7, #4]
 8013f16:	6a1b      	ldr	r3, [r3, #32]
 8013f18:	613b      	str	r3, [r7, #16]
  err_t result = ERR_OK;
 8013f1a:	2300      	movs	r3, #0
 8013f1c:	73fb      	strb	r3, [r7, #15]
  u16_t msecs;
  u8_t i;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover()\n"));
  ip4_addr_set_any(&dhcp->offered_ip_addr);
 8013f1e:	693b      	ldr	r3, [r7, #16]
 8013f20:	2200      	movs	r2, #0
 8013f22:	629a      	str	r2, [r3, #40]	; 0x28
  dhcp_set_state(dhcp, DHCP_STATE_SELECTING);
 8013f24:	2106      	movs	r1, #6
 8013f26:	6938      	ldr	r0, [r7, #16]
 8013f28:	f000 fbb6 	bl	8014698 <dhcp_set_state>
  /* create and initialize the DHCP message header */
  result = dhcp_create_msg(netif, dhcp, DHCP_DISCOVER);
 8013f2c:	2201      	movs	r2, #1
 8013f2e:	6939      	ldr	r1, [r7, #16]
 8013f30:	6878      	ldr	r0, [r7, #4]
 8013f32:	f001 f837 	bl	8014fa4 <dhcp_create_msg>
 8013f36:	4603      	mov	r3, r0
 8013f38:	73fb      	strb	r3, [r7, #15]
  if (result == ERR_OK) {
 8013f3a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8013f3e:	2b00      	cmp	r3, #0
 8013f40:	d13b      	bne.n	8013fba <dhcp_discover+0xae>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: making request\n"));

    dhcp_option(dhcp, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8013f42:	2202      	movs	r2, #2
 8013f44:	2139      	movs	r1, #57	; 0x39
 8013f46:	6938      	ldr	r0, [r7, #16]
 8013f48:	f000 fbc0 	bl	80146cc <dhcp_option>
    dhcp_option_short(dhcp, DHCP_MAX_MSG_LEN(netif));
 8013f4c:	687b      	ldr	r3, [r7, #4]
 8013f4e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8013f50:	4619      	mov	r1, r3
 8013f52:	6938      	ldr	r0, [r7, #16]
 8013f54:	f000 fc1c 	bl	8014790 <dhcp_option_short>

    dhcp_option(dhcp, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8013f58:	2203      	movs	r2, #3
 8013f5a:	2137      	movs	r1, #55	; 0x37
 8013f5c:	6938      	ldr	r0, [r7, #16]
 8013f5e:	f000 fbb5 	bl	80146cc <dhcp_option>
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8013f62:	2300      	movs	r3, #0
 8013f64:	75fb      	strb	r3, [r7, #23]
 8013f66:	e009      	b.n	8013f7c <dhcp_discover+0x70>
      dhcp_option_byte(dhcp, dhcp_discover_request_options[i]);
 8013f68:	7dfb      	ldrb	r3, [r7, #23]
 8013f6a:	4a29      	ldr	r2, [pc, #164]	; (8014010 <dhcp_discover+0x104>)
 8013f6c:	5cd3      	ldrb	r3, [r2, r3]
 8013f6e:	4619      	mov	r1, r3
 8013f70:	6938      	ldr	r0, [r7, #16]
 8013f72:	f000 fbe5 	bl	8014740 <dhcp_option_byte>
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8013f76:	7dfb      	ldrb	r3, [r7, #23]
 8013f78:	3301      	adds	r3, #1
 8013f7a:	75fb      	strb	r3, [r7, #23]
 8013f7c:	7dfb      	ldrb	r3, [r7, #23]
 8013f7e:	2b02      	cmp	r3, #2
 8013f80:	d9f2      	bls.n	8013f68 <dhcp_discover+0x5c>
    }
    dhcp_option_trailer(dhcp);
 8013f82:	6938      	ldr	r0, [r7, #16]
 8013f84:	f001 f9b2 	bl	80152ec <dhcp_option_trailer>

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: realloc()ing\n"));
    pbuf_realloc(dhcp->p_out, sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + dhcp->options_out_len);
 8013f88:	693b      	ldr	r3, [r7, #16]
 8013f8a:	68da      	ldr	r2, [r3, #12]
 8013f8c:	693b      	ldr	r3, [r7, #16]
 8013f8e:	8a9b      	ldrh	r3, [r3, #20]
 8013f90:	33f0      	adds	r3, #240	; 0xf0
 8013f92:	b29b      	uxth	r3, r3
 8013f94:	4619      	mov	r1, r3
 8013f96:	4610      	mov	r0, r2
 8013f98:	f7f9 f866 	bl	800d068 <pbuf_realloc>

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: sendto(DISCOVER, IP_ADDR_BROADCAST, DHCP_SERVER_PORT)\n"));
    udp_sendto_if_src(dhcp_pcb, dhcp->p_out, IP_ADDR_BROADCAST, DHCP_SERVER_PORT, netif, IP4_ADDR_ANY);
 8013f9c:	4b1d      	ldr	r3, [pc, #116]	; (8014014 <dhcp_discover+0x108>)
 8013f9e:	6818      	ldr	r0, [r3, #0]
 8013fa0:	693b      	ldr	r3, [r7, #16]
 8013fa2:	68d9      	ldr	r1, [r3, #12]
 8013fa4:	4b1c      	ldr	r3, [pc, #112]	; (8014018 <dhcp_discover+0x10c>)
 8013fa6:	9301      	str	r3, [sp, #4]
 8013fa8:	687b      	ldr	r3, [r7, #4]
 8013faa:	9300      	str	r3, [sp, #0]
 8013fac:	2343      	movs	r3, #67	; 0x43
 8013fae:	4a1b      	ldr	r2, [pc, #108]	; (801401c <dhcp_discover+0x110>)
 8013fb0:	f7ff f97a 	bl	80132a8 <udp_sendto_if_src>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: deleting()ing\n"));
    dhcp_delete_msg(dhcp);
 8013fb4:	6938      	ldr	r0, [r7, #16]
 8013fb6:	f001 f957 	bl	8015268 <dhcp_delete_msg>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_discover: SELECTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_discover: could not allocate DHCP request\n"));
  }
  if (dhcp->tries < 255) {
 8013fba:	693b      	ldr	r3, [r7, #16]
 8013fbc:	7a9b      	ldrb	r3, [r3, #10]
 8013fbe:	2bff      	cmp	r3, #255	; 0xff
 8013fc0:	d005      	beq.n	8013fce <dhcp_discover+0xc2>
    dhcp->tries++;
 8013fc2:	693b      	ldr	r3, [r7, #16]
 8013fc4:	7a9b      	ldrb	r3, [r3, #10]
 8013fc6:	3301      	adds	r3, #1
 8013fc8:	b2da      	uxtb	r2, r3
 8013fca:	693b      	ldr	r3, [r7, #16]
 8013fcc:	729a      	strb	r2, [r3, #10]
  if (dhcp->tries >= LWIP_DHCP_AUTOIP_COOP_TRIES && dhcp->autoip_coop_state == DHCP_AUTOIP_COOP_STATE_OFF) {
    dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_ON;
    autoip_start(netif);
  }
#endif /* LWIP_DHCP_AUTOIP_COOP */
  msecs = (dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000;
 8013fce:	693b      	ldr	r3, [r7, #16]
 8013fd0:	7a9b      	ldrb	r3, [r3, #10]
 8013fd2:	2b05      	cmp	r3, #5
 8013fd4:	d807      	bhi.n	8013fe6 <dhcp_discover+0xda>
 8013fd6:	693b      	ldr	r3, [r7, #16]
 8013fd8:	7a9b      	ldrb	r3, [r3, #10]
 8013fda:	461a      	mov	r2, r3
 8013fdc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8013fe0:	4093      	lsls	r3, r2
 8013fe2:	b29b      	uxth	r3, r3
 8013fe4:	e001      	b.n	8013fea <dhcp_discover+0xde>
 8013fe6:	f64e 2360 	movw	r3, #60000	; 0xea60
 8013fea:	81bb      	strh	r3, [r7, #12]
  dhcp->request_timeout = (msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS;
 8013fec:	89bb      	ldrh	r3, [r7, #12]
 8013fee:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8013ff2:	4a0b      	ldr	r2, [pc, #44]	; (8014020 <dhcp_discover+0x114>)
 8013ff4:	fb82 1203 	smull	r1, r2, r2, r3
 8013ff8:	1152      	asrs	r2, r2, #5
 8013ffa:	17db      	asrs	r3, r3, #31
 8013ffc:	1ad3      	subs	r3, r2, r3
 8013ffe:	b29a      	uxth	r2, r3
 8014000:	693b      	ldr	r3, [r7, #16]
 8014002:	82da      	strh	r2, [r3, #22]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_discover(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8014004:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8014008:	4618      	mov	r0, r3
 801400a:	3718      	adds	r7, #24
 801400c:	46bd      	mov	sp, r7
 801400e:	bd80      	pop	{r7, pc}
 8014010:	20000128 	.word	0x20000128
 8014014:	20004254 	.word	0x20004254
 8014018:	0801b8c0 	.word	0x0801b8c0
 801401c:	0801b8c4 	.word	0x0801b8c4
 8014020:	10624dd3 	.word	0x10624dd3

08014024 <dhcp_bind>:
 *
 * @param netif network interface to bind to the offered address
 */
static void
dhcp_bind(struct netif *netif)
{
 8014024:	b580      	push	{r7, lr}
 8014026:	b088      	sub	sp, #32
 8014028:	af00      	add	r7, sp, #0
 801402a:	6078      	str	r0, [r7, #4]
  u32_t timeout;
  struct dhcp *dhcp;
  ip4_addr_t sn_mask, gw_addr;
  LWIP_ERROR("dhcp_bind: netif != NULL", (netif != NULL), return;);
 801402c:	687b      	ldr	r3, [r7, #4]
 801402e:	2b00      	cmp	r3, #0
 8014030:	d107      	bne.n	8014042 <dhcp_bind+0x1e>
 8014032:	4b64      	ldr	r3, [pc, #400]	; (80141c4 <dhcp_bind+0x1a0>)
 8014034:	f240 32fe 	movw	r2, #1022	; 0x3fe
 8014038:	4963      	ldr	r1, [pc, #396]	; (80141c8 <dhcp_bind+0x1a4>)
 801403a:	4864      	ldr	r0, [pc, #400]	; (80141cc <dhcp_bind+0x1a8>)
 801403c:	f004 fb04 	bl	8018648 <iprintf>
 8014040:	e0bc      	b.n	80141bc <dhcp_bind+0x198>
  dhcp = netif_dhcp_data(netif);
 8014042:	687b      	ldr	r3, [r7, #4]
 8014044:	6a1b      	ldr	r3, [r3, #32]
 8014046:	61bb      	str	r3, [r7, #24]
  LWIP_ERROR("dhcp_bind: dhcp != NULL", (dhcp != NULL), return;);
 8014048:	69bb      	ldr	r3, [r7, #24]
 801404a:	2b00      	cmp	r3, #0
 801404c:	d107      	bne.n	801405e <dhcp_bind+0x3a>
 801404e:	4b5d      	ldr	r3, [pc, #372]	; (80141c4 <dhcp_bind+0x1a0>)
 8014050:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8014054:	495e      	ldr	r1, [pc, #376]	; (80141d0 <dhcp_bind+0x1ac>)
 8014056:	485d      	ldr	r0, [pc, #372]	; (80141cc <dhcp_bind+0x1a8>)
 8014058:	f004 faf6 	bl	8018648 <iprintf>
 801405c:	e0ae      	b.n	80141bc <dhcp_bind+0x198>
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(netif=%p) %c%c%"U16_F"\n", (void*)netif, netif->name[0], netif->name[1], (u16_t)netif->num));

  /* reset time used of lease */
  dhcp->lease_used = 0;
 801405e:	69bb      	ldr	r3, [r7, #24]
 8014060:	2200      	movs	r2, #0
 8014062:	841a      	strh	r2, [r3, #32]

  if (dhcp->offered_t0_lease != 0xffffffffUL) {
 8014064:	69bb      	ldr	r3, [r7, #24]
 8014066:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8014068:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801406c:	d019      	beq.n	80140a2 <dhcp_bind+0x7e>
     /* set renewal period timer */
     LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t0 renewal timer %"U32_F" secs\n", dhcp->offered_t0_lease));
     timeout = (dhcp->offered_t0_lease + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 801406e:	69bb      	ldr	r3, [r7, #24]
 8014070:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8014072:	331e      	adds	r3, #30
 8014074:	4a57      	ldr	r2, [pc, #348]	; (80141d4 <dhcp_bind+0x1b0>)
 8014076:	fba2 2303 	umull	r2, r3, r2, r3
 801407a:	095b      	lsrs	r3, r3, #5
 801407c:	61fb      	str	r3, [r7, #28]
     if (timeout > 0xffff) {
 801407e:	69fb      	ldr	r3, [r7, #28]
 8014080:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8014084:	d302      	bcc.n	801408c <dhcp_bind+0x68>
       timeout = 0xffff;
 8014086:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801408a:	61fb      	str	r3, [r7, #28]
     }
     dhcp->t0_timeout = (u16_t)timeout;
 801408c:	69fb      	ldr	r3, [r7, #28]
 801408e:	b29a      	uxth	r2, r3
 8014090:	69bb      	ldr	r3, [r7, #24]
 8014092:	845a      	strh	r2, [r3, #34]	; 0x22
     if (dhcp->t0_timeout == 0) {
 8014094:	69bb      	ldr	r3, [r7, #24]
 8014096:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8014098:	2b00      	cmp	r3, #0
 801409a:	d102      	bne.n	80140a2 <dhcp_bind+0x7e>
       dhcp->t0_timeout = 1;
 801409c:	69bb      	ldr	r3, [r7, #24]
 801409e:	2201      	movs	r2, #1
 80140a0:	845a      	strh	r2, [r3, #34]	; 0x22
     }
     LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t0_lease*1000));
  }

  /* temporary DHCP lease? */
  if (dhcp->offered_t1_renew != 0xffffffffUL) {
 80140a2:	69bb      	ldr	r3, [r7, #24]
 80140a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80140a6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80140aa:	d01d      	beq.n	80140e8 <dhcp_bind+0xc4>
    /* set renewal period timer */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t1 renewal timer %"U32_F" secs\n", dhcp->offered_t1_renew));
    timeout = (dhcp->offered_t1_renew + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 80140ac:	69bb      	ldr	r3, [r7, #24]
 80140ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80140b0:	331e      	adds	r3, #30
 80140b2:	4a48      	ldr	r2, [pc, #288]	; (80141d4 <dhcp_bind+0x1b0>)
 80140b4:	fba2 2303 	umull	r2, r3, r2, r3
 80140b8:	095b      	lsrs	r3, r3, #5
 80140ba:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 80140bc:	69fb      	ldr	r3, [r7, #28]
 80140be:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80140c2:	d302      	bcc.n	80140ca <dhcp_bind+0xa6>
      timeout = 0xffff;
 80140c4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80140c8:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t1_timeout = (u16_t)timeout;
 80140ca:	69fb      	ldr	r3, [r7, #28]
 80140cc:	b29a      	uxth	r2, r3
 80140ce:	69bb      	ldr	r3, [r7, #24]
 80140d0:	831a      	strh	r2, [r3, #24]
    if (dhcp->t1_timeout == 0) {
 80140d2:	69bb      	ldr	r3, [r7, #24]
 80140d4:	8b1b      	ldrh	r3, [r3, #24]
 80140d6:	2b00      	cmp	r3, #0
 80140d8:	d102      	bne.n	80140e0 <dhcp_bind+0xbc>
      dhcp->t1_timeout = 1;
 80140da:	69bb      	ldr	r3, [r7, #24]
 80140dc:	2201      	movs	r2, #1
 80140de:	831a      	strh	r2, [r3, #24]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t1_renew*1000));
    dhcp->t1_renew_time = dhcp->t1_timeout;
 80140e0:	69bb      	ldr	r3, [r7, #24]
 80140e2:	8b1a      	ldrh	r2, [r3, #24]
 80140e4:	69bb      	ldr	r3, [r7, #24]
 80140e6:	839a      	strh	r2, [r3, #28]
  }
  /* set renewal period timer */
  if (dhcp->offered_t2_rebind != 0xffffffffUL) {
 80140e8:	69bb      	ldr	r3, [r7, #24]
 80140ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80140ec:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80140f0:	d01d      	beq.n	801412e <dhcp_bind+0x10a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t2 rebind timer %"U32_F" secs\n", dhcp->offered_t2_rebind));
    timeout = (dhcp->offered_t2_rebind + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 80140f2:	69bb      	ldr	r3, [r7, #24]
 80140f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80140f6:	331e      	adds	r3, #30
 80140f8:	4a36      	ldr	r2, [pc, #216]	; (80141d4 <dhcp_bind+0x1b0>)
 80140fa:	fba2 2303 	umull	r2, r3, r2, r3
 80140fe:	095b      	lsrs	r3, r3, #5
 8014100:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 8014102:	69fb      	ldr	r3, [r7, #28]
 8014104:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8014108:	d302      	bcc.n	8014110 <dhcp_bind+0xec>
      timeout = 0xffff;
 801410a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801410e:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t2_timeout = (u16_t)timeout;
 8014110:	69fb      	ldr	r3, [r7, #28]
 8014112:	b29a      	uxth	r2, r3
 8014114:	69bb      	ldr	r3, [r7, #24]
 8014116:	835a      	strh	r2, [r3, #26]
    if (dhcp->t2_timeout == 0) {
 8014118:	69bb      	ldr	r3, [r7, #24]
 801411a:	8b5b      	ldrh	r3, [r3, #26]
 801411c:	2b00      	cmp	r3, #0
 801411e:	d102      	bne.n	8014126 <dhcp_bind+0x102>
      dhcp->t2_timeout = 1;
 8014120:	69bb      	ldr	r3, [r7, #24]
 8014122:	2201      	movs	r2, #1
 8014124:	835a      	strh	r2, [r3, #26]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t2_rebind*1000));
    dhcp->t2_rebind_time = dhcp->t2_timeout;
 8014126:	69bb      	ldr	r3, [r7, #24]
 8014128:	8b5a      	ldrh	r2, [r3, #26]
 801412a:	69bb      	ldr	r3, [r7, #24]
 801412c:	83da      	strh	r2, [r3, #30]
  }

  /* If we have sub 1 minute lease, t2 and t1 will kick in at the same time. */
  if ((dhcp->t1_timeout >= dhcp->t2_timeout) && (dhcp->t2_timeout > 0)) {
 801412e:	69bb      	ldr	r3, [r7, #24]
 8014130:	8b1a      	ldrh	r2, [r3, #24]
 8014132:	69bb      	ldr	r3, [r7, #24]
 8014134:	8b5b      	ldrh	r3, [r3, #26]
 8014136:	429a      	cmp	r2, r3
 8014138:	d306      	bcc.n	8014148 <dhcp_bind+0x124>
 801413a:	69bb      	ldr	r3, [r7, #24]
 801413c:	8b5b      	ldrh	r3, [r3, #26]
 801413e:	2b00      	cmp	r3, #0
 8014140:	d002      	beq.n	8014148 <dhcp_bind+0x124>
    dhcp->t1_timeout = 0;
 8014142:	69bb      	ldr	r3, [r7, #24]
 8014144:	2200      	movs	r2, #0
 8014146:	831a      	strh	r2, [r3, #24]
  }

  if (dhcp->subnet_mask_given) {
 8014148:	69bb      	ldr	r3, [r7, #24]
 801414a:	7adb      	ldrb	r3, [r3, #11]
 801414c:	2b00      	cmp	r3, #0
 801414e:	d003      	beq.n	8014158 <dhcp_bind+0x134>
    /* copy offered network mask */
    ip4_addr_copy(sn_mask, dhcp->offered_sn_mask);
 8014150:	69bb      	ldr	r3, [r7, #24]
 8014152:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014154:	613b      	str	r3, [r7, #16]
 8014156:	e014      	b.n	8014182 <dhcp_bind+0x15e>
  } else {
    /* subnet mask not given, choose a safe subnet mask given the network class */
    u8_t first_octet = ip4_addr1(&dhcp->offered_ip_addr);
 8014158:	69bb      	ldr	r3, [r7, #24]
 801415a:	3328      	adds	r3, #40	; 0x28
 801415c:	781b      	ldrb	r3, [r3, #0]
 801415e:	75fb      	strb	r3, [r7, #23]
    if (first_octet <= 127) {
 8014160:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8014164:	2b00      	cmp	r3, #0
 8014166:	db02      	blt.n	801416e <dhcp_bind+0x14a>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xff000000UL));
 8014168:	23ff      	movs	r3, #255	; 0xff
 801416a:	613b      	str	r3, [r7, #16]
 801416c:	e009      	b.n	8014182 <dhcp_bind+0x15e>
    } else if (first_octet >= 192) {
 801416e:	7dfb      	ldrb	r3, [r7, #23]
 8014170:	2bbf      	cmp	r3, #191	; 0xbf
 8014172:	d903      	bls.n	801417c <dhcp_bind+0x158>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffffff00UL));
 8014174:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 8014178:	613b      	str	r3, [r7, #16]
 801417a:	e002      	b.n	8014182 <dhcp_bind+0x15e>
    } else {
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffff0000UL));
 801417c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8014180:	613b      	str	r3, [r7, #16]
    }
  }

  ip4_addr_copy(gw_addr, dhcp->offered_gw_addr);
 8014182:	69bb      	ldr	r3, [r7, #24]
 8014184:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014186:	60fb      	str	r3, [r7, #12]
  /* gateway address not given? */
  if (ip4_addr_isany_val(gw_addr)) {
 8014188:	68fb      	ldr	r3, [r7, #12]
 801418a:	2b00      	cmp	r3, #0
 801418c:	d108      	bne.n	80141a0 <dhcp_bind+0x17c>
    /* copy network address */
    ip4_addr_get_network(&gw_addr, &dhcp->offered_ip_addr, &sn_mask);
 801418e:	69bb      	ldr	r3, [r7, #24]
 8014190:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8014192:	693b      	ldr	r3, [r7, #16]
 8014194:	4013      	ands	r3, r2
 8014196:	60fb      	str	r3, [r7, #12]
    /* use first host address on network as gateway */
    ip4_addr_set_u32(&gw_addr, ip4_addr_get_u32(&gw_addr) | PP_HTONL(0x00000001UL));
 8014198:	68fb      	ldr	r3, [r7, #12]
 801419a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 801419e:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_bind(): IP: 0x%08"X32_F" SN: 0x%08"X32_F" GW: 0x%08"X32_F"\n",
    ip4_addr_get_u32(&dhcp->offered_ip_addr), ip4_addr_get_u32(&sn_mask), ip4_addr_get_u32(&gw_addr)));
  /* netif is now bound to DHCP leased address - set this before assigning the address
     to ensure the callback can use dhcp_supplied_address() */
  dhcp_set_state(dhcp, DHCP_STATE_BOUND);
 80141a0:	210a      	movs	r1, #10
 80141a2:	69b8      	ldr	r0, [r7, #24]
 80141a4:	f000 fa78 	bl	8014698 <dhcp_set_state>

  netif_set_addr(netif, &dhcp->offered_ip_addr, &sn_mask, &gw_addr);
 80141a8:	69bb      	ldr	r3, [r7, #24]
 80141aa:	f103 0128 	add.w	r1, r3, #40	; 0x28
 80141ae:	f107 030c 	add.w	r3, r7, #12
 80141b2:	f107 0210 	add.w	r2, r7, #16
 80141b6:	6878      	ldr	r0, [r7, #4]
 80141b8:	f7f8 fbf6 	bl	800c9a8 <netif_set_addr>
  /* interface is used by routing now that an address is set */
}
 80141bc:	3720      	adds	r7, #32
 80141be:	46bd      	mov	sp, r7
 80141c0:	bd80      	pop	{r7, pc}
 80141c2:	bf00      	nop
 80141c4:	0801abc4 	.word	0x0801abc4
 80141c8:	0801ad04 	.word	0x0801ad04
 80141cc:	0801ac24 	.word	0x0801ac24
 80141d0:	0801ad20 	.word	0x0801ad20
 80141d4:	88888889 	.word	0x88888889

080141d8 <dhcp_renew>:
 *
 * @param netif network interface which must renew its lease
 */
err_t
dhcp_renew(struct netif *netif)
{
 80141d8:	b580      	push	{r7, lr}
 80141da:	b088      	sub	sp, #32
 80141dc:	af02      	add	r7, sp, #8
 80141de:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80141e0:	687b      	ldr	r3, [r7, #4]
 80141e2:	6a1b      	ldr	r3, [r3, #32]
 80141e4:	613b      	str	r3, [r7, #16]
  err_t result;
  u16_t msecs;
  u8_t i;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_renew()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_RENEWING);
 80141e6:	2105      	movs	r1, #5
 80141e8:	6938      	ldr	r0, [r7, #16]
 80141ea:	f000 fa55 	bl	8014698 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  result = dhcp_create_msg(netif, dhcp, DHCP_REQUEST);
 80141ee:	2203      	movs	r2, #3
 80141f0:	6939      	ldr	r1, [r7, #16]
 80141f2:	6878      	ldr	r0, [r7, #4]
 80141f4:	f000 fed6 	bl	8014fa4 <dhcp_create_msg>
 80141f8:	4603      	mov	r3, r0
 80141fa:	73fb      	strb	r3, [r7, #15]
  if (result == ERR_OK) {
 80141fc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8014200:	2b00      	cmp	r3, #0
 8014202:	d13b      	bne.n	801427c <dhcp_renew+0xa4>
    dhcp_option(dhcp, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8014204:	2202      	movs	r2, #2
 8014206:	2139      	movs	r1, #57	; 0x39
 8014208:	6938      	ldr	r0, [r7, #16]
 801420a:	f000 fa5f 	bl	80146cc <dhcp_option>
    dhcp_option_short(dhcp, DHCP_MAX_MSG_LEN(netif));
 801420e:	687b      	ldr	r3, [r7, #4]
 8014210:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8014212:	4619      	mov	r1, r3
 8014214:	6938      	ldr	r0, [r7, #16]
 8014216:	f000 fabb 	bl	8014790 <dhcp_option_short>

    dhcp_option(dhcp, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 801421a:	2203      	movs	r2, #3
 801421c:	2137      	movs	r1, #55	; 0x37
 801421e:	6938      	ldr	r0, [r7, #16]
 8014220:	f000 fa54 	bl	80146cc <dhcp_option>
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8014224:	2300      	movs	r3, #0
 8014226:	75fb      	strb	r3, [r7, #23]
 8014228:	e009      	b.n	801423e <dhcp_renew+0x66>
      dhcp_option_byte(dhcp, dhcp_discover_request_options[i]);
 801422a:	7dfb      	ldrb	r3, [r7, #23]
 801422c:	4a2a      	ldr	r2, [pc, #168]	; (80142d8 <dhcp_renew+0x100>)
 801422e:	5cd3      	ldrb	r3, [r2, r3]
 8014230:	4619      	mov	r1, r3
 8014232:	6938      	ldr	r0, [r7, #16]
 8014234:	f000 fa84 	bl	8014740 <dhcp_option_byte>
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8014238:	7dfb      	ldrb	r3, [r7, #23]
 801423a:	3301      	adds	r3, #1
 801423c:	75fb      	strb	r3, [r7, #23]
 801423e:	7dfb      	ldrb	r3, [r7, #23]
 8014240:	2b02      	cmp	r3, #2
 8014242:	d9f2      	bls.n	801422a <dhcp_renew+0x52>
#if LWIP_NETIF_HOSTNAME
    dhcp_option_hostname(dhcp, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    /* append DHCP message trailer */
    dhcp_option_trailer(dhcp);
 8014244:	6938      	ldr	r0, [r7, #16]
 8014246:	f001 f851 	bl	80152ec <dhcp_option_trailer>

    pbuf_realloc(dhcp->p_out, sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + dhcp->options_out_len);
 801424a:	693b      	ldr	r3, [r7, #16]
 801424c:	68da      	ldr	r2, [r3, #12]
 801424e:	693b      	ldr	r3, [r7, #16]
 8014250:	8a9b      	ldrh	r3, [r3, #20]
 8014252:	33f0      	adds	r3, #240	; 0xf0
 8014254:	b29b      	uxth	r3, r3
 8014256:	4619      	mov	r1, r3
 8014258:	4610      	mov	r0, r2
 801425a:	f7f8 ff05 	bl	800d068 <pbuf_realloc>

    udp_sendto_if(dhcp_pcb, dhcp->p_out, &dhcp->server_ip_addr, DHCP_SERVER_PORT, netif);
 801425e:	4b1f      	ldr	r3, [pc, #124]	; (80142dc <dhcp_renew+0x104>)
 8014260:	6818      	ldr	r0, [r3, #0]
 8014262:	693b      	ldr	r3, [r7, #16]
 8014264:	68d9      	ldr	r1, [r3, #12]
 8014266:	693b      	ldr	r3, [r7, #16]
 8014268:	f103 0224 	add.w	r2, r3, #36	; 0x24
 801426c:	687b      	ldr	r3, [r7, #4]
 801426e:	9300      	str	r3, [sp, #0]
 8014270:	2343      	movs	r3, #67	; 0x43
 8014272:	f7fe ffdb 	bl	801322c <udp_sendto_if>
    dhcp_delete_msg(dhcp);
 8014276:	6938      	ldr	r0, [r7, #16]
 8014278:	f000 fff6 	bl	8015268 <dhcp_delete_msg>

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_renew: RENEWING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_renew: could not allocate DHCP request\n"));
  }
  if (dhcp->tries < 255) {
 801427c:	693b      	ldr	r3, [r7, #16]
 801427e:	7a9b      	ldrb	r3, [r3, #10]
 8014280:	2bff      	cmp	r3, #255	; 0xff
 8014282:	d005      	beq.n	8014290 <dhcp_renew+0xb8>
    dhcp->tries++;
 8014284:	693b      	ldr	r3, [r7, #16]
 8014286:	7a9b      	ldrb	r3, [r3, #10]
 8014288:	3301      	adds	r3, #1
 801428a:	b2da      	uxtb	r2, r3
 801428c:	693b      	ldr	r3, [r7, #16]
 801428e:	729a      	strb	r2, [r3, #10]
  }
  /* back-off on retries, but to a maximum of 20 seconds */
  msecs = dhcp->tries < 10 ? dhcp->tries * 2000 : 20 * 1000;
 8014290:	693b      	ldr	r3, [r7, #16]
 8014292:	7a9b      	ldrb	r3, [r3, #10]
 8014294:	2b09      	cmp	r3, #9
 8014296:	d80a      	bhi.n	80142ae <dhcp_renew+0xd6>
 8014298:	693b      	ldr	r3, [r7, #16]
 801429a:	7a9b      	ldrb	r3, [r3, #10]
 801429c:	b29b      	uxth	r3, r3
 801429e:	461a      	mov	r2, r3
 80142a0:	0152      	lsls	r2, r2, #5
 80142a2:	1ad2      	subs	r2, r2, r3
 80142a4:	0092      	lsls	r2, r2, #2
 80142a6:	4413      	add	r3, r2
 80142a8:	011b      	lsls	r3, r3, #4
 80142aa:	b29b      	uxth	r3, r3
 80142ac:	e001      	b.n	80142b2 <dhcp_renew+0xda>
 80142ae:	f644 6320 	movw	r3, #20000	; 0x4e20
 80142b2:	81bb      	strh	r3, [r7, #12]
  dhcp->request_timeout = (msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS;
 80142b4:	89bb      	ldrh	r3, [r7, #12]
 80142b6:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 80142ba:	4a09      	ldr	r2, [pc, #36]	; (80142e0 <dhcp_renew+0x108>)
 80142bc:	fb82 1203 	smull	r1, r2, r2, r3
 80142c0:	1152      	asrs	r2, r2, #5
 80142c2:	17db      	asrs	r3, r3, #31
 80142c4:	1ad3      	subs	r3, r2, r3
 80142c6:	b29a      	uxth	r2, r3
 80142c8:	693b      	ldr	r3, [r7, #16]
 80142ca:	82da      	strh	r2, [r3, #22]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_renew(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 80142cc:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80142d0:	4618      	mov	r0, r3
 80142d2:	3718      	adds	r7, #24
 80142d4:	46bd      	mov	sp, r7
 80142d6:	bd80      	pop	{r7, pc}
 80142d8:	20000128 	.word	0x20000128
 80142dc:	20004254 	.word	0x20004254
 80142e0:	10624dd3 	.word	0x10624dd3

080142e4 <dhcp_rebind>:
 *
 * @param netif network interface which must rebind with a DHCP server
 */
static err_t
dhcp_rebind(struct netif *netif)
{
 80142e4:	b580      	push	{r7, lr}
 80142e6:	b088      	sub	sp, #32
 80142e8:	af02      	add	r7, sp, #8
 80142ea:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80142ec:	687b      	ldr	r3, [r7, #4]
 80142ee:	6a1b      	ldr	r3, [r3, #32]
 80142f0:	613b      	str	r3, [r7, #16]
  err_t result;
  u16_t msecs;
  u8_t i;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_REBINDING);
 80142f2:	2104      	movs	r1, #4
 80142f4:	6938      	ldr	r0, [r7, #16]
 80142f6:	f000 f9cf 	bl	8014698 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  result = dhcp_create_msg(netif, dhcp, DHCP_REQUEST);
 80142fa:	2203      	movs	r2, #3
 80142fc:	6939      	ldr	r1, [r7, #16]
 80142fe:	6878      	ldr	r0, [r7, #4]
 8014300:	f000 fe50 	bl	8014fa4 <dhcp_create_msg>
 8014304:	4603      	mov	r3, r0
 8014306:	73fb      	strb	r3, [r7, #15]
  if (result == ERR_OK) {
 8014308:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801430c:	2b00      	cmp	r3, #0
 801430e:	d139      	bne.n	8014384 <dhcp_rebind+0xa0>
    dhcp_option(dhcp, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8014310:	2202      	movs	r2, #2
 8014312:	2139      	movs	r1, #57	; 0x39
 8014314:	6938      	ldr	r0, [r7, #16]
 8014316:	f000 f9d9 	bl	80146cc <dhcp_option>
    dhcp_option_short(dhcp, DHCP_MAX_MSG_LEN(netif));
 801431a:	687b      	ldr	r3, [r7, #4]
 801431c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 801431e:	4619      	mov	r1, r3
 8014320:	6938      	ldr	r0, [r7, #16]
 8014322:	f000 fa35 	bl	8014790 <dhcp_option_short>

    dhcp_option(dhcp, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8014326:	2203      	movs	r2, #3
 8014328:	2137      	movs	r1, #55	; 0x37
 801432a:	6938      	ldr	r0, [r7, #16]
 801432c:	f000 f9ce 	bl	80146cc <dhcp_option>
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8014330:	2300      	movs	r3, #0
 8014332:	75fb      	strb	r3, [r7, #23]
 8014334:	e009      	b.n	801434a <dhcp_rebind+0x66>
      dhcp_option_byte(dhcp, dhcp_discover_request_options[i]);
 8014336:	7dfb      	ldrb	r3, [r7, #23]
 8014338:	4a29      	ldr	r2, [pc, #164]	; (80143e0 <dhcp_rebind+0xfc>)
 801433a:	5cd3      	ldrb	r3, [r2, r3]
 801433c:	4619      	mov	r1, r3
 801433e:	6938      	ldr	r0, [r7, #16]
 8014340:	f000 f9fe 	bl	8014740 <dhcp_option_byte>
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8014344:	7dfb      	ldrb	r3, [r7, #23]
 8014346:	3301      	adds	r3, #1
 8014348:	75fb      	strb	r3, [r7, #23]
 801434a:	7dfb      	ldrb	r3, [r7, #23]
 801434c:	2b02      	cmp	r3, #2
 801434e:	d9f2      	bls.n	8014336 <dhcp_rebind+0x52>

#if LWIP_NETIF_HOSTNAME
    dhcp_option_hostname(dhcp, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    dhcp_option_trailer(dhcp);
 8014350:	6938      	ldr	r0, [r7, #16]
 8014352:	f000 ffcb 	bl	80152ec <dhcp_option_trailer>

    pbuf_realloc(dhcp->p_out, sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + dhcp->options_out_len);
 8014356:	693b      	ldr	r3, [r7, #16]
 8014358:	68da      	ldr	r2, [r3, #12]
 801435a:	693b      	ldr	r3, [r7, #16]
 801435c:	8a9b      	ldrh	r3, [r3, #20]
 801435e:	33f0      	adds	r3, #240	; 0xf0
 8014360:	b29b      	uxth	r3, r3
 8014362:	4619      	mov	r1, r3
 8014364:	4610      	mov	r0, r2
 8014366:	f7f8 fe7f 	bl	800d068 <pbuf_realloc>

    /* broadcast to server */
    udp_sendto_if(dhcp_pcb, dhcp->p_out, IP_ADDR_BROADCAST, DHCP_SERVER_PORT, netif);
 801436a:	4b1e      	ldr	r3, [pc, #120]	; (80143e4 <dhcp_rebind+0x100>)
 801436c:	6818      	ldr	r0, [r3, #0]
 801436e:	693b      	ldr	r3, [r7, #16]
 8014370:	68d9      	ldr	r1, [r3, #12]
 8014372:	687b      	ldr	r3, [r7, #4]
 8014374:	9300      	str	r3, [sp, #0]
 8014376:	2343      	movs	r3, #67	; 0x43
 8014378:	4a1b      	ldr	r2, [pc, #108]	; (80143e8 <dhcp_rebind+0x104>)
 801437a:	f7fe ff57 	bl	801322c <udp_sendto_if>
    dhcp_delete_msg(dhcp);
 801437e:	6938      	ldr	r0, [r7, #16]
 8014380:	f000 ff72 	bl	8015268 <dhcp_delete_msg>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind: REBINDING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_rebind: could not allocate DHCP request\n"));
  }
  if (dhcp->tries < 255) {
 8014384:	693b      	ldr	r3, [r7, #16]
 8014386:	7a9b      	ldrb	r3, [r3, #10]
 8014388:	2bff      	cmp	r3, #255	; 0xff
 801438a:	d005      	beq.n	8014398 <dhcp_rebind+0xb4>
    dhcp->tries++;
 801438c:	693b      	ldr	r3, [r7, #16]
 801438e:	7a9b      	ldrb	r3, [r3, #10]
 8014390:	3301      	adds	r3, #1
 8014392:	b2da      	uxtb	r2, r3
 8014394:	693b      	ldr	r3, [r7, #16]
 8014396:	729a      	strb	r2, [r3, #10]
  }
  msecs = dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000;
 8014398:	693b      	ldr	r3, [r7, #16]
 801439a:	7a9b      	ldrb	r3, [r3, #10]
 801439c:	2b09      	cmp	r3, #9
 801439e:	d80a      	bhi.n	80143b6 <dhcp_rebind+0xd2>
 80143a0:	693b      	ldr	r3, [r7, #16]
 80143a2:	7a9b      	ldrb	r3, [r3, #10]
 80143a4:	b29b      	uxth	r3, r3
 80143a6:	461a      	mov	r2, r3
 80143a8:	0152      	lsls	r2, r2, #5
 80143aa:	1ad2      	subs	r2, r2, r3
 80143ac:	0092      	lsls	r2, r2, #2
 80143ae:	4413      	add	r3, r2
 80143b0:	00db      	lsls	r3, r3, #3
 80143b2:	b29b      	uxth	r3, r3
 80143b4:	e001      	b.n	80143ba <dhcp_rebind+0xd6>
 80143b6:	f242 7310 	movw	r3, #10000	; 0x2710
 80143ba:	81bb      	strh	r3, [r7, #12]
  dhcp->request_timeout = (msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS;
 80143bc:	89bb      	ldrh	r3, [r7, #12]
 80143be:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 80143c2:	4a0a      	ldr	r2, [pc, #40]	; (80143ec <dhcp_rebind+0x108>)
 80143c4:	fb82 1203 	smull	r1, r2, r2, r3
 80143c8:	1152      	asrs	r2, r2, #5
 80143ca:	17db      	asrs	r3, r3, #31
 80143cc:	1ad3      	subs	r3, r2, r3
 80143ce:	b29a      	uxth	r2, r3
 80143d0:	693b      	ldr	r3, [r7, #16]
 80143d2:	82da      	strh	r2, [r3, #22]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 80143d4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80143d8:	4618      	mov	r0, r3
 80143da:	3718      	adds	r7, #24
 80143dc:	46bd      	mov	sp, r7
 80143de:	bd80      	pop	{r7, pc}
 80143e0:	20000128 	.word	0x20000128
 80143e4:	20004254 	.word	0x20004254
 80143e8:	0801b8c4 	.word	0x0801b8c4
 80143ec:	10624dd3 	.word	0x10624dd3

080143f0 <dhcp_reboot>:
 *
 * @param netif network interface which must reboot
 */
static err_t
dhcp_reboot(struct netif *netif)
{
 80143f0:	b580      	push	{r7, lr}
 80143f2:	b088      	sub	sp, #32
 80143f4:	af02      	add	r7, sp, #8
 80143f6:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80143f8:	687b      	ldr	r3, [r7, #4]
 80143fa:	6a1b      	ldr	r3, [r3, #32]
 80143fc:	613b      	str	r3, [r7, #16]
  err_t result;
  u16_t msecs;
  u8_t i;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_REBOOTING);
 80143fe:	2103      	movs	r1, #3
 8014400:	6938      	ldr	r0, [r7, #16]
 8014402:	f000 f949 	bl	8014698 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  result = dhcp_create_msg(netif, dhcp, DHCP_REQUEST);
 8014406:	2203      	movs	r2, #3
 8014408:	6939      	ldr	r1, [r7, #16]
 801440a:	6878      	ldr	r0, [r7, #4]
 801440c:	f000 fdca 	bl	8014fa4 <dhcp_create_msg>
 8014410:	4603      	mov	r3, r0
 8014412:	73fb      	strb	r3, [r7, #15]
  if (result == ERR_OK) {
 8014414:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8014418:	2b00      	cmp	r3, #0
 801441a:	d147      	bne.n	80144ac <dhcp_reboot+0xbc>
    dhcp_option(dhcp, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 801441c:	2202      	movs	r2, #2
 801441e:	2139      	movs	r1, #57	; 0x39
 8014420:	6938      	ldr	r0, [r7, #16]
 8014422:	f000 f953 	bl	80146cc <dhcp_option>
    dhcp_option_short(dhcp, DHCP_MAX_MSG_LEN_MIN_REQUIRED);
 8014426:	f44f 7110 	mov.w	r1, #576	; 0x240
 801442a:	6938      	ldr	r0, [r7, #16]
 801442c:	f000 f9b0 	bl	8014790 <dhcp_option_short>

    dhcp_option(dhcp, DHCP_OPTION_REQUESTED_IP, 4);
 8014430:	2204      	movs	r2, #4
 8014432:	2132      	movs	r1, #50	; 0x32
 8014434:	6938      	ldr	r0, [r7, #16]
 8014436:	f000 f949 	bl	80146cc <dhcp_option>
    dhcp_option_long(dhcp, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 801443a:	693b      	ldr	r3, [r7, #16]
 801443c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801443e:	4618      	mov	r0, r3
 8014440:	f7f7 fdf2 	bl	800c028 <lwip_htonl>
 8014444:	4603      	mov	r3, r0
 8014446:	4619      	mov	r1, r3
 8014448:	6938      	ldr	r0, [r7, #16]
 801444a:	f000 f9db 	bl	8014804 <dhcp_option_long>

    dhcp_option(dhcp, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 801444e:	2203      	movs	r2, #3
 8014450:	2137      	movs	r1, #55	; 0x37
 8014452:	6938      	ldr	r0, [r7, #16]
 8014454:	f000 f93a 	bl	80146cc <dhcp_option>
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8014458:	2300      	movs	r3, #0
 801445a:	75fb      	strb	r3, [r7, #23]
 801445c:	e009      	b.n	8014472 <dhcp_reboot+0x82>
      dhcp_option_byte(dhcp, dhcp_discover_request_options[i]);
 801445e:	7dfb      	ldrb	r3, [r7, #23]
 8014460:	4a29      	ldr	r2, [pc, #164]	; (8014508 <dhcp_reboot+0x118>)
 8014462:	5cd3      	ldrb	r3, [r2, r3]
 8014464:	4619      	mov	r1, r3
 8014466:	6938      	ldr	r0, [r7, #16]
 8014468:	f000 f96a 	bl	8014740 <dhcp_option_byte>
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 801446c:	7dfb      	ldrb	r3, [r7, #23]
 801446e:	3301      	adds	r3, #1
 8014470:	75fb      	strb	r3, [r7, #23]
 8014472:	7dfb      	ldrb	r3, [r7, #23]
 8014474:	2b02      	cmp	r3, #2
 8014476:	d9f2      	bls.n	801445e <dhcp_reboot+0x6e>
    }

    dhcp_option_trailer(dhcp);
 8014478:	6938      	ldr	r0, [r7, #16]
 801447a:	f000 ff37 	bl	80152ec <dhcp_option_trailer>

    pbuf_realloc(dhcp->p_out, sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + dhcp->options_out_len);
 801447e:	693b      	ldr	r3, [r7, #16]
 8014480:	68da      	ldr	r2, [r3, #12]
 8014482:	693b      	ldr	r3, [r7, #16]
 8014484:	8a9b      	ldrh	r3, [r3, #20]
 8014486:	33f0      	adds	r3, #240	; 0xf0
 8014488:	b29b      	uxth	r3, r3
 801448a:	4619      	mov	r1, r3
 801448c:	4610      	mov	r0, r2
 801448e:	f7f8 fdeb 	bl	800d068 <pbuf_realloc>

    /* broadcast to server */
    udp_sendto_if(dhcp_pcb, dhcp->p_out, IP_ADDR_BROADCAST, DHCP_SERVER_PORT, netif);
 8014492:	4b1e      	ldr	r3, [pc, #120]	; (801450c <dhcp_reboot+0x11c>)
 8014494:	6818      	ldr	r0, [r3, #0]
 8014496:	693b      	ldr	r3, [r7, #16]
 8014498:	68d9      	ldr	r1, [r3, #12]
 801449a:	687b      	ldr	r3, [r7, #4]
 801449c:	9300      	str	r3, [sp, #0]
 801449e:	2343      	movs	r3, #67	; 0x43
 80144a0:	4a1b      	ldr	r2, [pc, #108]	; (8014510 <dhcp_reboot+0x120>)
 80144a2:	f7fe fec3 	bl	801322c <udp_sendto_if>
    dhcp_delete_msg(dhcp);
 80144a6:	6938      	ldr	r0, [r7, #16]
 80144a8:	f000 fede 	bl	8015268 <dhcp_delete_msg>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot: REBOOTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_reboot: could not allocate DHCP request\n"));
  }
  if (dhcp->tries < 255) {
 80144ac:	693b      	ldr	r3, [r7, #16]
 80144ae:	7a9b      	ldrb	r3, [r3, #10]
 80144b0:	2bff      	cmp	r3, #255	; 0xff
 80144b2:	d005      	beq.n	80144c0 <dhcp_reboot+0xd0>
    dhcp->tries++;
 80144b4:	693b      	ldr	r3, [r7, #16]
 80144b6:	7a9b      	ldrb	r3, [r3, #10]
 80144b8:	3301      	adds	r3, #1
 80144ba:	b2da      	uxtb	r2, r3
 80144bc:	693b      	ldr	r3, [r7, #16]
 80144be:	729a      	strb	r2, [r3, #10]
  }
  msecs = dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000;
 80144c0:	693b      	ldr	r3, [r7, #16]
 80144c2:	7a9b      	ldrb	r3, [r3, #10]
 80144c4:	2b09      	cmp	r3, #9
 80144c6:	d80a      	bhi.n	80144de <dhcp_reboot+0xee>
 80144c8:	693b      	ldr	r3, [r7, #16]
 80144ca:	7a9b      	ldrb	r3, [r3, #10]
 80144cc:	b29b      	uxth	r3, r3
 80144ce:	461a      	mov	r2, r3
 80144d0:	0152      	lsls	r2, r2, #5
 80144d2:	1ad2      	subs	r2, r2, r3
 80144d4:	0092      	lsls	r2, r2, #2
 80144d6:	4413      	add	r3, r2
 80144d8:	00db      	lsls	r3, r3, #3
 80144da:	b29b      	uxth	r3, r3
 80144dc:	e001      	b.n	80144e2 <dhcp_reboot+0xf2>
 80144de:	f242 7310 	movw	r3, #10000	; 0x2710
 80144e2:	81bb      	strh	r3, [r7, #12]
  dhcp->request_timeout = (msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS;
 80144e4:	89bb      	ldrh	r3, [r7, #12]
 80144e6:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 80144ea:	4a0a      	ldr	r2, [pc, #40]	; (8014514 <dhcp_reboot+0x124>)
 80144ec:	fb82 1203 	smull	r1, r2, r2, r3
 80144f0:	1152      	asrs	r2, r2, #5
 80144f2:	17db      	asrs	r3, r3, #31
 80144f4:	1ad3      	subs	r3, r2, r3
 80144f6:	b29a      	uxth	r2, r3
 80144f8:	693b      	ldr	r3, [r7, #16]
 80144fa:	82da      	strh	r2, [r3, #22]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 80144fc:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8014500:	4618      	mov	r0, r3
 8014502:	3718      	adds	r7, #24
 8014504:	46bd      	mov	sp, r7
 8014506:	bd80      	pop	{r7, pc}
 8014508:	20000128 	.word	0x20000128
 801450c:	20004254 	.word	0x20004254
 8014510:	0801b8c4 	.word	0x0801b8c4
 8014514:	10624dd3 	.word	0x10624dd3

08014518 <dhcp_release>:
 *
 * @param netif network interface which must release its lease
 */
err_t
dhcp_release(struct netif *netif)
{
 8014518:	b580      	push	{r7, lr}
 801451a:	b088      	sub	sp, #32
 801451c:	af02      	add	r7, sp, #8
 801451e:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8014520:	687b      	ldr	r3, [r7, #4]
 8014522:	6a1b      	ldr	r3, [r3, #32]
 8014524:	617b      	str	r3, [r7, #20]
  err_t result;
  ip_addr_t server_ip_addr;
  u8_t is_dhcp_supplied_address;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_release()\n"));
  if (dhcp == NULL) {
 8014526:	697b      	ldr	r3, [r7, #20]
 8014528:	2b00      	cmp	r3, #0
 801452a:	d102      	bne.n	8014532 <dhcp_release+0x1a>
    return ERR_ARG;
 801452c:	f06f 030f 	mvn.w	r3, #15
 8014530:	e072      	b.n	8014618 <dhcp_release+0x100>
  }
  ip_addr_copy(server_ip_addr, dhcp->server_ip_addr);
 8014532:	697b      	ldr	r3, [r7, #20]
 8014534:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014536:	60fb      	str	r3, [r7, #12]

  is_dhcp_supplied_address = dhcp_supplied_address(netif);
 8014538:	6878      	ldr	r0, [r7, #4]
 801453a:	f000 ff31 	bl	80153a0 <dhcp_supplied_address>
 801453e:	4603      	mov	r3, r0
 8014540:	74fb      	strb	r3, [r7, #19]

  /* idle DHCP client */
  dhcp_set_state(dhcp, DHCP_STATE_OFF);
 8014542:	2100      	movs	r1, #0
 8014544:	6978      	ldr	r0, [r7, #20]
 8014546:	f000 f8a7 	bl	8014698 <dhcp_set_state>
  /* clean old DHCP offer */
  ip_addr_set_zero_ip4(&dhcp->server_ip_addr);
 801454a:	697b      	ldr	r3, [r7, #20]
 801454c:	2200      	movs	r2, #0
 801454e:	625a      	str	r2, [r3, #36]	; 0x24
  ip4_addr_set_zero(&dhcp->offered_ip_addr);
 8014550:	697b      	ldr	r3, [r7, #20]
 8014552:	2200      	movs	r2, #0
 8014554:	629a      	str	r2, [r3, #40]	; 0x28
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
 8014556:	697b      	ldr	r3, [r7, #20]
 8014558:	2200      	movs	r2, #0
 801455a:	62da      	str	r2, [r3, #44]	; 0x2c
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 801455c:	697b      	ldr	r3, [r7, #20]
 801455e:	2200      	movs	r2, #0
 8014560:	631a      	str	r2, [r3, #48]	; 0x30
#if LWIP_DHCP_BOOTP_FILE
  ip4_addr_set_zero(&dhcp->offered_si_addr);
#endif /* LWIP_DHCP_BOOTP_FILE */
  dhcp->offered_t0_lease = dhcp->offered_t1_renew = dhcp->offered_t2_rebind = 0;
 8014562:	697b      	ldr	r3, [r7, #20]
 8014564:	2200      	movs	r2, #0
 8014566:	63da      	str	r2, [r3, #60]	; 0x3c
 8014568:	697b      	ldr	r3, [r7, #20]
 801456a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 801456c:	697b      	ldr	r3, [r7, #20]
 801456e:	639a      	str	r2, [r3, #56]	; 0x38
 8014570:	697b      	ldr	r3, [r7, #20]
 8014572:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8014574:	697b      	ldr	r3, [r7, #20]
 8014576:	635a      	str	r2, [r3, #52]	; 0x34
  dhcp->t1_renew_time = dhcp->t2_rebind_time = dhcp->lease_used = dhcp->t0_timeout = 0;
 8014578:	697b      	ldr	r3, [r7, #20]
 801457a:	2200      	movs	r2, #0
 801457c:	845a      	strh	r2, [r3, #34]	; 0x22
 801457e:	697b      	ldr	r3, [r7, #20]
 8014580:	8c5a      	ldrh	r2, [r3, #34]	; 0x22
 8014582:	697b      	ldr	r3, [r7, #20]
 8014584:	841a      	strh	r2, [r3, #32]
 8014586:	697b      	ldr	r3, [r7, #20]
 8014588:	8c1a      	ldrh	r2, [r3, #32]
 801458a:	697b      	ldr	r3, [r7, #20]
 801458c:	83da      	strh	r2, [r3, #30]
 801458e:	697b      	ldr	r3, [r7, #20]
 8014590:	8bda      	ldrh	r2, [r3, #30]
 8014592:	697b      	ldr	r3, [r7, #20]
 8014594:	839a      	strh	r2, [r3, #28]

  if (!is_dhcp_supplied_address) {
 8014596:	7cfb      	ldrb	r3, [r7, #19]
 8014598:	2b00      	cmp	r3, #0
 801459a:	d101      	bne.n	80145a0 <dhcp_release+0x88>
    /* don't issue release message when address is not dhcp-assigned */
    return ERR_OK;
 801459c:	2300      	movs	r3, #0
 801459e:	e03b      	b.n	8014618 <dhcp_release+0x100>
  }

  /* create and initialize the DHCP message header */
  result = dhcp_create_msg(netif, dhcp, DHCP_RELEASE);
 80145a0:	2207      	movs	r2, #7
 80145a2:	6979      	ldr	r1, [r7, #20]
 80145a4:	6878      	ldr	r0, [r7, #4]
 80145a6:	f000 fcfd 	bl	8014fa4 <dhcp_create_msg>
 80145aa:	4603      	mov	r3, r0
 80145ac:	74bb      	strb	r3, [r7, #18]
  if (result == ERR_OK) {
 80145ae:	f997 3012 	ldrsb.w	r3, [r7, #18]
 80145b2:	2b00      	cmp	r3, #0
 80145b4:	d128      	bne.n	8014608 <dhcp_release+0xf0>
    dhcp_option(dhcp, DHCP_OPTION_SERVER_ID, 4);
 80145b6:	2204      	movs	r2, #4
 80145b8:	2136      	movs	r1, #54	; 0x36
 80145ba:	6978      	ldr	r0, [r7, #20]
 80145bc:	f000 f886 	bl	80146cc <dhcp_option>
    dhcp_option_long(dhcp, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&server_ip_addr))));
 80145c0:	68fb      	ldr	r3, [r7, #12]
 80145c2:	4618      	mov	r0, r3
 80145c4:	f7f7 fd30 	bl	800c028 <lwip_htonl>
 80145c8:	4603      	mov	r3, r0
 80145ca:	4619      	mov	r1, r3
 80145cc:	6978      	ldr	r0, [r7, #20]
 80145ce:	f000 f919 	bl	8014804 <dhcp_option_long>

    dhcp_option_trailer(dhcp);
 80145d2:	6978      	ldr	r0, [r7, #20]
 80145d4:	f000 fe8a 	bl	80152ec <dhcp_option_trailer>

    pbuf_realloc(dhcp->p_out, sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + dhcp->options_out_len);
 80145d8:	697b      	ldr	r3, [r7, #20]
 80145da:	68da      	ldr	r2, [r3, #12]
 80145dc:	697b      	ldr	r3, [r7, #20]
 80145de:	8a9b      	ldrh	r3, [r3, #20]
 80145e0:	33f0      	adds	r3, #240	; 0xf0
 80145e2:	b29b      	uxth	r3, r3
 80145e4:	4619      	mov	r1, r3
 80145e6:	4610      	mov	r0, r2
 80145e8:	f7f8 fd3e 	bl	800d068 <pbuf_realloc>

    udp_sendto_if(dhcp_pcb, dhcp->p_out, &server_ip_addr, DHCP_SERVER_PORT, netif);
 80145ec:	4b0c      	ldr	r3, [pc, #48]	; (8014620 <dhcp_release+0x108>)
 80145ee:	6818      	ldr	r0, [r3, #0]
 80145f0:	697b      	ldr	r3, [r7, #20]
 80145f2:	68d9      	ldr	r1, [r3, #12]
 80145f4:	f107 020c 	add.w	r2, r7, #12
 80145f8:	687b      	ldr	r3, [r7, #4]
 80145fa:	9300      	str	r3, [sp, #0]
 80145fc:	2343      	movs	r3, #67	; 0x43
 80145fe:	f7fe fe15 	bl	801322c <udp_sendto_if>
    dhcp_delete_msg(dhcp);
 8014602:	6978      	ldr	r0, [r7, #20]
 8014604:	f000 fe30 	bl	8015268 <dhcp_delete_msg>
  } else {
    /* sending release failed, but that's not a problem since the correct behaviour of dhcp does not rely on release */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_release: could not allocate DHCP request\n"));
  }
  /* remove IP address from interface (prevents routing from selecting this interface) */
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 8014608:	4b06      	ldr	r3, [pc, #24]	; (8014624 <dhcp_release+0x10c>)
 801460a:	4a06      	ldr	r2, [pc, #24]	; (8014624 <dhcp_release+0x10c>)
 801460c:	4905      	ldr	r1, [pc, #20]	; (8014624 <dhcp_release+0x10c>)
 801460e:	6878      	ldr	r0, [r7, #4]
 8014610:	f7f8 f9ca 	bl	800c9a8 <netif_set_addr>

  return result;
 8014614:	f997 3012 	ldrsb.w	r3, [r7, #18]
}
 8014618:	4618      	mov	r0, r3
 801461a:	3718      	adds	r7, #24
 801461c:	46bd      	mov	sp, r7
 801461e:	bd80      	pop	{r7, pc}
 8014620:	20004254 	.word	0x20004254
 8014624:	0801b8c0 	.word	0x0801b8c0

08014628 <dhcp_stop>:
 *
 * @param netif The network interface to stop DHCP on
 */
void
dhcp_stop(struct netif *netif)
{
 8014628:	b580      	push	{r7, lr}
 801462a:	b084      	sub	sp, #16
 801462c:	af00      	add	r7, sp, #0
 801462e:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp;
  LWIP_ERROR("dhcp_stop: netif != NULL", (netif != NULL), return;);
 8014630:	687b      	ldr	r3, [r7, #4]
 8014632:	2b00      	cmp	r3, #0
 8014634:	d107      	bne.n	8014646 <dhcp_stop+0x1e>
 8014636:	4b14      	ldr	r3, [pc, #80]	; (8014688 <dhcp_stop+0x60>)
 8014638:	f240 5242 	movw	r2, #1346	; 0x542
 801463c:	4913      	ldr	r1, [pc, #76]	; (801468c <dhcp_stop+0x64>)
 801463e:	4814      	ldr	r0, [pc, #80]	; (8014690 <dhcp_stop+0x68>)
 8014640:	f004 f802 	bl	8018648 <iprintf>
 8014644:	e01d      	b.n	8014682 <dhcp_stop+0x5a>
  dhcp = netif_dhcp_data(netif);
 8014646:	687b      	ldr	r3, [r7, #4]
 8014648:	6a1b      	ldr	r3, [r3, #32]
 801464a:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_stop()\n"));
  /* netif is DHCP configured? */
  if (dhcp != NULL) {
 801464c:	68fb      	ldr	r3, [r7, #12]
 801464e:	2b00      	cmp	r3, #0
 8014650:	d017      	beq.n	8014682 <dhcp_stop+0x5a>
      autoip_stop(netif);
      dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_OFF;
    }
#endif /* LWIP_DHCP_AUTOIP_COOP */

    LWIP_ASSERT("reply wasn't freed", dhcp->msg_in == NULL);
 8014652:	68fb      	ldr	r3, [r7, #12]
 8014654:	685b      	ldr	r3, [r3, #4]
 8014656:	2b00      	cmp	r3, #0
 8014658:	d006      	beq.n	8014668 <dhcp_stop+0x40>
 801465a:	4b0b      	ldr	r3, [pc, #44]	; (8014688 <dhcp_stop+0x60>)
 801465c:	f240 524f 	movw	r2, #1359	; 0x54f
 8014660:	490c      	ldr	r1, [pc, #48]	; (8014694 <dhcp_stop+0x6c>)
 8014662:	480b      	ldr	r0, [pc, #44]	; (8014690 <dhcp_stop+0x68>)
 8014664:	f003 fff0 	bl	8018648 <iprintf>
    dhcp_set_state(dhcp, DHCP_STATE_OFF);
 8014668:	2100      	movs	r1, #0
 801466a:	68f8      	ldr	r0, [r7, #12]
 801466c:	f000 f814 	bl	8014698 <dhcp_set_state>

    if (dhcp->pcb_allocated != 0) {
 8014670:	68fb      	ldr	r3, [r7, #12]
 8014672:	7a1b      	ldrb	r3, [r3, #8]
 8014674:	2b00      	cmp	r3, #0
 8014676:	d004      	beq.n	8014682 <dhcp_stop+0x5a>
      dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 8014678:	f7ff f854 	bl	8013724 <dhcp_dec_pcb_refcount>
      dhcp->pcb_allocated = 0;
 801467c:	68fb      	ldr	r3, [r7, #12]
 801467e:	2200      	movs	r2, #0
 8014680:	721a      	strb	r2, [r3, #8]
    }
  }
}
 8014682:	3710      	adds	r7, #16
 8014684:	46bd      	mov	sp, r7
 8014686:	bd80      	pop	{r7, pc}
 8014688:	0801abc4 	.word	0x0801abc4
 801468c:	0801ad38 	.word	0x0801ad38
 8014690:	0801ac24 	.word	0x0801ac24
 8014694:	0801acf0 	.word	0x0801acf0

08014698 <dhcp_set_state>:
 *
 * If the state changed, reset the number of tries.
 */
static void
dhcp_set_state(struct dhcp *dhcp, u8_t new_state)
{
 8014698:	b480      	push	{r7}
 801469a:	b083      	sub	sp, #12
 801469c:	af00      	add	r7, sp, #0
 801469e:	6078      	str	r0, [r7, #4]
 80146a0:	460b      	mov	r3, r1
 80146a2:	70fb      	strb	r3, [r7, #3]
  if (new_state != dhcp->state) {
 80146a4:	687b      	ldr	r3, [r7, #4]
 80146a6:	7a5b      	ldrb	r3, [r3, #9]
 80146a8:	78fa      	ldrb	r2, [r7, #3]
 80146aa:	429a      	cmp	r2, r3
 80146ac:	d008      	beq.n	80146c0 <dhcp_set_state+0x28>
    dhcp->state = new_state;
 80146ae:	687b      	ldr	r3, [r7, #4]
 80146b0:	78fa      	ldrb	r2, [r7, #3]
 80146b2:	725a      	strb	r2, [r3, #9]
    dhcp->tries = 0;
 80146b4:	687b      	ldr	r3, [r7, #4]
 80146b6:	2200      	movs	r2, #0
 80146b8:	729a      	strb	r2, [r3, #10]
    dhcp->request_timeout = 0;
 80146ba:	687b      	ldr	r3, [r7, #4]
 80146bc:	2200      	movs	r2, #0
 80146be:	82da      	strh	r2, [r3, #22]
  }
}
 80146c0:	bf00      	nop
 80146c2:	370c      	adds	r7, #12
 80146c4:	46bd      	mov	sp, r7
 80146c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80146ca:	4770      	bx	lr

080146cc <dhcp_option>:
 * DHCP message.
 *
 */
static void
dhcp_option(struct dhcp *dhcp, u8_t option_type, u8_t option_len)
{
 80146cc:	b580      	push	{r7, lr}
 80146ce:	b082      	sub	sp, #8
 80146d0:	af00      	add	r7, sp, #0
 80146d2:	6078      	str	r0, [r7, #4]
 80146d4:	460b      	mov	r3, r1
 80146d6:	70fb      	strb	r3, [r7, #3]
 80146d8:	4613      	mov	r3, r2
 80146da:	70bb      	strb	r3, [r7, #2]
  LWIP_ASSERT("dhcp_option: dhcp->options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", dhcp->options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 80146dc:	687b      	ldr	r3, [r7, #4]
 80146de:	8a9b      	ldrh	r3, [r3, #20]
 80146e0:	461a      	mov	r2, r3
 80146e2:	78bb      	ldrb	r3, [r7, #2]
 80146e4:	4413      	add	r3, r2
 80146e6:	3302      	adds	r3, #2
 80146e8:	2b44      	cmp	r3, #68	; 0x44
 80146ea:	d906      	bls.n	80146fa <dhcp_option+0x2e>
 80146ec:	4b11      	ldr	r3, [pc, #68]	; (8014734 <dhcp_option+0x68>)
 80146ee:	f44f 62ae 	mov.w	r2, #1392	; 0x570
 80146f2:	4911      	ldr	r1, [pc, #68]	; (8014738 <dhcp_option+0x6c>)
 80146f4:	4811      	ldr	r0, [pc, #68]	; (801473c <dhcp_option+0x70>)
 80146f6:	f003 ffa7 	bl	8018648 <iprintf>
  dhcp->msg_out->options[dhcp->options_out_len++] = option_type;
 80146fa:	687b      	ldr	r3, [r7, #4]
 80146fc:	691a      	ldr	r2, [r3, #16]
 80146fe:	687b      	ldr	r3, [r7, #4]
 8014700:	8a9b      	ldrh	r3, [r3, #20]
 8014702:	1c59      	adds	r1, r3, #1
 8014704:	b288      	uxth	r0, r1
 8014706:	6879      	ldr	r1, [r7, #4]
 8014708:	8288      	strh	r0, [r1, #20]
 801470a:	4413      	add	r3, r2
 801470c:	78fa      	ldrb	r2, [r7, #3]
 801470e:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
  dhcp->msg_out->options[dhcp->options_out_len++] = option_len;
 8014712:	687b      	ldr	r3, [r7, #4]
 8014714:	691a      	ldr	r2, [r3, #16]
 8014716:	687b      	ldr	r3, [r7, #4]
 8014718:	8a9b      	ldrh	r3, [r3, #20]
 801471a:	1c59      	adds	r1, r3, #1
 801471c:	b288      	uxth	r0, r1
 801471e:	6879      	ldr	r1, [r7, #4]
 8014720:	8288      	strh	r0, [r1, #20]
 8014722:	4413      	add	r3, r2
 8014724:	78ba      	ldrb	r2, [r7, #2]
 8014726:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
}
 801472a:	bf00      	nop
 801472c:	3708      	adds	r7, #8
 801472e:	46bd      	mov	sp, r7
 8014730:	bd80      	pop	{r7, pc}
 8014732:	bf00      	nop
 8014734:	0801abc4 	.word	0x0801abc4
 8014738:	0801ad54 	.word	0x0801ad54
 801473c:	0801ac24 	.word	0x0801ac24

08014740 <dhcp_option_byte>:
 * Concatenate a single byte to the outgoing DHCP message.
 *
 */
static void
dhcp_option_byte(struct dhcp *dhcp, u8_t value)
{
 8014740:	b580      	push	{r7, lr}
 8014742:	b082      	sub	sp, #8
 8014744:	af00      	add	r7, sp, #0
 8014746:	6078      	str	r0, [r7, #4]
 8014748:	460b      	mov	r3, r1
 801474a:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("dhcp_option_byte: dhcp->options_out_len < DHCP_OPTIONS_LEN", dhcp->options_out_len < DHCP_OPTIONS_LEN);
 801474c:	687b      	ldr	r3, [r7, #4]
 801474e:	8a9b      	ldrh	r3, [r3, #20]
 8014750:	2b43      	cmp	r3, #67	; 0x43
 8014752:	d906      	bls.n	8014762 <dhcp_option_byte+0x22>
 8014754:	4b0b      	ldr	r3, [pc, #44]	; (8014784 <dhcp_option_byte+0x44>)
 8014756:	f240 527b 	movw	r2, #1403	; 0x57b
 801475a:	490b      	ldr	r1, [pc, #44]	; (8014788 <dhcp_option_byte+0x48>)
 801475c:	480b      	ldr	r0, [pc, #44]	; (801478c <dhcp_option_byte+0x4c>)
 801475e:	f003 ff73 	bl	8018648 <iprintf>
  dhcp->msg_out->options[dhcp->options_out_len++] = value;
 8014762:	687b      	ldr	r3, [r7, #4]
 8014764:	691a      	ldr	r2, [r3, #16]
 8014766:	687b      	ldr	r3, [r7, #4]
 8014768:	8a9b      	ldrh	r3, [r3, #20]
 801476a:	1c59      	adds	r1, r3, #1
 801476c:	b288      	uxth	r0, r1
 801476e:	6879      	ldr	r1, [r7, #4]
 8014770:	8288      	strh	r0, [r1, #20]
 8014772:	4413      	add	r3, r2
 8014774:	78fa      	ldrb	r2, [r7, #3]
 8014776:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
}
 801477a:	bf00      	nop
 801477c:	3708      	adds	r7, #8
 801477e:	46bd      	mov	sp, r7
 8014780:	bd80      	pop	{r7, pc}
 8014782:	bf00      	nop
 8014784:	0801abc4 	.word	0x0801abc4
 8014788:	0801ad9c 	.word	0x0801ad9c
 801478c:	0801ac24 	.word	0x0801ac24

08014790 <dhcp_option_short>:

static void
dhcp_option_short(struct dhcp *dhcp, u16_t value)
{
 8014790:	b590      	push	{r4, r7, lr}
 8014792:	b083      	sub	sp, #12
 8014794:	af00      	add	r7, sp, #0
 8014796:	6078      	str	r0, [r7, #4]
 8014798:	460b      	mov	r3, r1
 801479a:	807b      	strh	r3, [r7, #2]
  LWIP_ASSERT("dhcp_option_short: dhcp->options_out_len + 2 <= DHCP_OPTIONS_LEN", dhcp->options_out_len + 2U <= DHCP_OPTIONS_LEN);
 801479c:	687b      	ldr	r3, [r7, #4]
 801479e:	8a9b      	ldrh	r3, [r3, #20]
 80147a0:	3302      	adds	r3, #2
 80147a2:	2b44      	cmp	r3, #68	; 0x44
 80147a4:	d906      	bls.n	80147b4 <dhcp_option_short+0x24>
 80147a6:	4b14      	ldr	r3, [pc, #80]	; (80147f8 <dhcp_option_short+0x68>)
 80147a8:	f240 5282 	movw	r2, #1410	; 0x582
 80147ac:	4913      	ldr	r1, [pc, #76]	; (80147fc <dhcp_option_short+0x6c>)
 80147ae:	4814      	ldr	r0, [pc, #80]	; (8014800 <dhcp_option_short+0x70>)
 80147b0:	f003 ff4a 	bl	8018648 <iprintf>
  dhcp->msg_out->options[dhcp->options_out_len++] = (u8_t)((value & 0xff00U) >> 8);
 80147b4:	887b      	ldrh	r3, [r7, #2]
 80147b6:	0a1b      	lsrs	r3, r3, #8
 80147b8:	b298      	uxth	r0, r3
 80147ba:	687b      	ldr	r3, [r7, #4]
 80147bc:	691a      	ldr	r2, [r3, #16]
 80147be:	687b      	ldr	r3, [r7, #4]
 80147c0:	8a9b      	ldrh	r3, [r3, #20]
 80147c2:	1c59      	adds	r1, r3, #1
 80147c4:	b28c      	uxth	r4, r1
 80147c6:	6879      	ldr	r1, [r7, #4]
 80147c8:	828c      	strh	r4, [r1, #20]
 80147ca:	b2c1      	uxtb	r1, r0
 80147cc:	4413      	add	r3, r2
 80147ce:	460a      	mov	r2, r1
 80147d0:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
  dhcp->msg_out->options[dhcp->options_out_len++] = (u8_t) (value & 0x00ffU);
 80147d4:	687b      	ldr	r3, [r7, #4]
 80147d6:	691a      	ldr	r2, [r3, #16]
 80147d8:	687b      	ldr	r3, [r7, #4]
 80147da:	8a9b      	ldrh	r3, [r3, #20]
 80147dc:	1c59      	adds	r1, r3, #1
 80147de:	b288      	uxth	r0, r1
 80147e0:	6879      	ldr	r1, [r7, #4]
 80147e2:	8288      	strh	r0, [r1, #20]
 80147e4:	8879      	ldrh	r1, [r7, #2]
 80147e6:	b2c9      	uxtb	r1, r1
 80147e8:	4413      	add	r3, r2
 80147ea:	460a      	mov	r2, r1
 80147ec:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
}
 80147f0:	bf00      	nop
 80147f2:	370c      	adds	r7, #12
 80147f4:	46bd      	mov	sp, r7
 80147f6:	bd90      	pop	{r4, r7, pc}
 80147f8:	0801abc4 	.word	0x0801abc4
 80147fc:	0801add8 	.word	0x0801add8
 8014800:	0801ac24 	.word	0x0801ac24

08014804 <dhcp_option_long>:

static void
dhcp_option_long(struct dhcp *dhcp, u32_t value)
{
 8014804:	b590      	push	{r4, r7, lr}
 8014806:	b083      	sub	sp, #12
 8014808:	af00      	add	r7, sp, #0
 801480a:	6078      	str	r0, [r7, #4]
 801480c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("dhcp_option_long: dhcp->options_out_len + 4 <= DHCP_OPTIONS_LEN", dhcp->options_out_len + 4U <= DHCP_OPTIONS_LEN);
 801480e:	687b      	ldr	r3, [r7, #4]
 8014810:	8a9b      	ldrh	r3, [r3, #20]
 8014812:	3304      	adds	r3, #4
 8014814:	2b44      	cmp	r3, #68	; 0x44
 8014816:	d906      	bls.n	8014826 <dhcp_option_long+0x22>
 8014818:	4b22      	ldr	r3, [pc, #136]	; (80148a4 <dhcp_option_long+0xa0>)
 801481a:	f240 528a 	movw	r2, #1418	; 0x58a
 801481e:	4922      	ldr	r1, [pc, #136]	; (80148a8 <dhcp_option_long+0xa4>)
 8014820:	4822      	ldr	r0, [pc, #136]	; (80148ac <dhcp_option_long+0xa8>)
 8014822:	f003 ff11 	bl	8018648 <iprintf>
  dhcp->msg_out->options[dhcp->options_out_len++] = (u8_t)((value & 0xff000000UL) >> 24);
 8014826:	683b      	ldr	r3, [r7, #0]
 8014828:	0e18      	lsrs	r0, r3, #24
 801482a:	687b      	ldr	r3, [r7, #4]
 801482c:	691a      	ldr	r2, [r3, #16]
 801482e:	687b      	ldr	r3, [r7, #4]
 8014830:	8a9b      	ldrh	r3, [r3, #20]
 8014832:	1c59      	adds	r1, r3, #1
 8014834:	b28c      	uxth	r4, r1
 8014836:	6879      	ldr	r1, [r7, #4]
 8014838:	828c      	strh	r4, [r1, #20]
 801483a:	b2c1      	uxtb	r1, r0
 801483c:	4413      	add	r3, r2
 801483e:	460a      	mov	r2, r1
 8014840:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
  dhcp->msg_out->options[dhcp->options_out_len++] = (u8_t)((value & 0x00ff0000UL) >> 16);
 8014844:	683b      	ldr	r3, [r7, #0]
 8014846:	0c18      	lsrs	r0, r3, #16
 8014848:	687b      	ldr	r3, [r7, #4]
 801484a:	691a      	ldr	r2, [r3, #16]
 801484c:	687b      	ldr	r3, [r7, #4]
 801484e:	8a9b      	ldrh	r3, [r3, #20]
 8014850:	1c59      	adds	r1, r3, #1
 8014852:	b28c      	uxth	r4, r1
 8014854:	6879      	ldr	r1, [r7, #4]
 8014856:	828c      	strh	r4, [r1, #20]
 8014858:	b2c1      	uxtb	r1, r0
 801485a:	4413      	add	r3, r2
 801485c:	460a      	mov	r2, r1
 801485e:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
  dhcp->msg_out->options[dhcp->options_out_len++] = (u8_t)((value & 0x0000ff00UL) >> 8);
 8014862:	683b      	ldr	r3, [r7, #0]
 8014864:	0a18      	lsrs	r0, r3, #8
 8014866:	687b      	ldr	r3, [r7, #4]
 8014868:	691a      	ldr	r2, [r3, #16]
 801486a:	687b      	ldr	r3, [r7, #4]
 801486c:	8a9b      	ldrh	r3, [r3, #20]
 801486e:	1c59      	adds	r1, r3, #1
 8014870:	b28c      	uxth	r4, r1
 8014872:	6879      	ldr	r1, [r7, #4]
 8014874:	828c      	strh	r4, [r1, #20]
 8014876:	b2c1      	uxtb	r1, r0
 8014878:	4413      	add	r3, r2
 801487a:	460a      	mov	r2, r1
 801487c:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
  dhcp->msg_out->options[dhcp->options_out_len++] = (u8_t)((value & 0x000000ffUL));
 8014880:	687b      	ldr	r3, [r7, #4]
 8014882:	691a      	ldr	r2, [r3, #16]
 8014884:	687b      	ldr	r3, [r7, #4]
 8014886:	8a9b      	ldrh	r3, [r3, #20]
 8014888:	1c59      	adds	r1, r3, #1
 801488a:	b288      	uxth	r0, r1
 801488c:	6879      	ldr	r1, [r7, #4]
 801488e:	8288      	strh	r0, [r1, #20]
 8014890:	6839      	ldr	r1, [r7, #0]
 8014892:	b2c9      	uxtb	r1, r1
 8014894:	4413      	add	r3, r2
 8014896:	460a      	mov	r2, r1
 8014898:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
}
 801489c:	bf00      	nop
 801489e:	370c      	adds	r7, #12
 80148a0:	46bd      	mov	sp, r7
 80148a2:	bd90      	pop	{r4, r7, pc}
 80148a4:	0801abc4 	.word	0x0801abc4
 80148a8:	0801ae1c 	.word	0x0801ae1c
 80148ac:	0801ac24 	.word	0x0801ac24

080148b0 <dhcp_parse_reply>:
 * use that further on.
 *
 */
static err_t
dhcp_parse_reply(struct dhcp *dhcp, struct pbuf *p)
{
 80148b0:	b580      	push	{r7, lr}
 80148b2:	b08e      	sub	sp, #56	; 0x38
 80148b4:	af00      	add	r7, sp, #0
 80148b6:	6078      	str	r0, [r7, #4]
 80148b8:	6039      	str	r1, [r7, #0]
  u16_t offset;
  u16_t offset_max;
  u16_t options_idx;
  u16_t options_idx_max;
  struct pbuf *q;
  int parse_file_as_options = 0;
 80148ba:	2300      	movs	r3, #0
 80148bc:	627b      	str	r3, [r7, #36]	; 0x24
  int parse_sname_as_options = 0;
 80148be:	2300      	movs	r3, #0
 80148c0:	623b      	str	r3, [r7, #32]

  /* clear received options */
  dhcp_clear_all_options(dhcp);
 80148c2:	2208      	movs	r2, #8
 80148c4:	2100      	movs	r1, #0
 80148c6:	48b3      	ldr	r0, [pc, #716]	; (8014b94 <dhcp_parse_reply+0x2e4>)
 80148c8:	f003 fe0e 	bl	80184e8 <memset>
  /* check that beginning of dhcp_msg (up to and including chaddr) is in first pbuf */
  if (p->len < DHCP_SNAME_OFS) {
 80148cc:	683b      	ldr	r3, [r7, #0]
 80148ce:	895b      	ldrh	r3, [r3, #10]
 80148d0:	2b2b      	cmp	r3, #43	; 0x2b
 80148d2:	d802      	bhi.n	80148da <dhcp_parse_reply+0x2a>
    return ERR_BUF;
 80148d4:	f06f 0301 	mvn.w	r3, #1
 80148d8:	e26a      	b.n	8014db0 <dhcp_parse_reply+0x500>
  }
  dhcp->msg_in = (struct dhcp_msg *)p->payload;
 80148da:	683b      	ldr	r3, [r7, #0]
 80148dc:	685a      	ldr	r2, [r3, #4]
 80148de:	687b      	ldr	r3, [r7, #4]
 80148e0:	605a      	str	r2, [r3, #4]
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* parse options */

  /* start with options field */
  options_idx = DHCP_OPTIONS_OFS;
 80148e2:	23f0      	movs	r3, #240	; 0xf0
 80148e4:	85fb      	strh	r3, [r7, #46]	; 0x2e
  /* parse options to the end of the received packet */
  options_idx_max = p->tot_len;
 80148e6:	683b      	ldr	r3, [r7, #0]
 80148e8:	891b      	ldrh	r3, [r3, #8]
 80148ea:	85bb      	strh	r3, [r7, #44]	; 0x2c
again:
  q = p;
 80148ec:	683b      	ldr	r3, [r7, #0]
 80148ee:	62bb      	str	r3, [r7, #40]	; 0x28
  while ((q != NULL) && (options_idx >= q->len)) {
 80148f0:	e00c      	b.n	801490c <dhcp_parse_reply+0x5c>
    options_idx -= q->len;
 80148f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80148f4:	895b      	ldrh	r3, [r3, #10]
 80148f6:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80148f8:	1ad3      	subs	r3, r2, r3
 80148fa:	85fb      	strh	r3, [r7, #46]	; 0x2e
    options_idx_max -= q->len;
 80148fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80148fe:	895b      	ldrh	r3, [r3, #10]
 8014900:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 8014902:	1ad3      	subs	r3, r2, r3
 8014904:	85bb      	strh	r3, [r7, #44]	; 0x2c
    q = q->next;
 8014906:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014908:	681b      	ldr	r3, [r3, #0]
 801490a:	62bb      	str	r3, [r7, #40]	; 0x28
  while ((q != NULL) && (options_idx >= q->len)) {
 801490c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801490e:	2b00      	cmp	r3, #0
 8014910:	d004      	beq.n	801491c <dhcp_parse_reply+0x6c>
 8014912:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014914:	895b      	ldrh	r3, [r3, #10]
 8014916:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8014918:	429a      	cmp	r2, r3
 801491a:	d2ea      	bcs.n	80148f2 <dhcp_parse_reply+0x42>
  }
  if (q == NULL) {
 801491c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801491e:	2b00      	cmp	r3, #0
 8014920:	d102      	bne.n	8014928 <dhcp_parse_reply+0x78>
    return ERR_BUF;
 8014922:	f06f 0301 	mvn.w	r3, #1
 8014926:	e243      	b.n	8014db0 <dhcp_parse_reply+0x500>
  }
  offset = options_idx;
 8014928:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 801492a:	867b      	strh	r3, [r7, #50]	; 0x32
  offset_max = options_idx_max;
 801492c:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 801492e:	863b      	strh	r3, [r7, #48]	; 0x30
  options = (u8_t*)q->payload;
 8014930:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014932:	685b      	ldr	r3, [r3, #4]
 8014934:	637b      	str	r3, [r7, #52]	; 0x34
  /* at least 1 byte to read and no end marker, then at least 3 bytes to read? */
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 8014936:	e1fb      	b.n	8014d30 <dhcp_parse_reply+0x480>
    u8_t op = options[offset];
 8014938:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 801493a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801493c:	4413      	add	r3, r2
 801493e:	781b      	ldrb	r3, [r3, #0]
 8014940:	757b      	strb	r3, [r7, #21]
    u8_t len;
    u8_t decode_len = 0;
 8014942:	2300      	movs	r3, #0
 8014944:	77bb      	strb	r3, [r7, #30]
    int decode_idx = -1;
 8014946:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801494a:	61bb      	str	r3, [r7, #24]
    u16_t val_offset = offset + 2;
 801494c:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 801494e:	3302      	adds	r3, #2
 8014950:	82fb      	strh	r3, [r7, #22]
    /* len byte might be in the next pbuf */
    if ((offset + 1) < q->len) {
 8014952:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8014954:	3301      	adds	r3, #1
 8014956:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8014958:	8952      	ldrh	r2, [r2, #10]
 801495a:	4293      	cmp	r3, r2
 801495c:	da06      	bge.n	801496c <dhcp_parse_reply+0xbc>
      len = options[offset + 1];
 801495e:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8014960:	3301      	adds	r3, #1
 8014962:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8014964:	4413      	add	r3, r2
 8014966:	781b      	ldrb	r3, [r3, #0]
 8014968:	77fb      	strb	r3, [r7, #31]
 801496a:	e00a      	b.n	8014982 <dhcp_parse_reply+0xd2>
    } else {
      len = (q->next != NULL ? ((u8_t*)q->next->payload)[0] : 0);
 801496c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801496e:	681b      	ldr	r3, [r3, #0]
 8014970:	2b00      	cmp	r3, #0
 8014972:	d004      	beq.n	801497e <dhcp_parse_reply+0xce>
 8014974:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014976:	681b      	ldr	r3, [r3, #0]
 8014978:	685b      	ldr	r3, [r3, #4]
 801497a:	781b      	ldrb	r3, [r3, #0]
 801497c:	e000      	b.n	8014980 <dhcp_parse_reply+0xd0>
 801497e:	2300      	movs	r3, #0
 8014980:	77fb      	strb	r3, [r7, #31]
    }
    /* LWIP_DEBUGF(DHCP_DEBUG, ("msg_offset=%"U16_F", q->len=%"U16_F, msg_offset, q->len)); */
    decode_len = len;
 8014982:	7ffb      	ldrb	r3, [r7, #31]
 8014984:	77bb      	strb	r3, [r7, #30]
    switch(op) {
 8014986:	7d7b      	ldrb	r3, [r7, #21]
 8014988:	2b3b      	cmp	r3, #59	; 0x3b
 801498a:	f200 8121 	bhi.w	8014bd0 <dhcp_parse_reply+0x320>
 801498e:	a201      	add	r2, pc, #4	; (adr r2, 8014994 <dhcp_parse_reply+0xe4>)
 8014990:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014994:	08014a85 	.word	0x08014a85
 8014998:	08014a95 	.word	0x08014a95
 801499c:	08014bd1 	.word	0x08014bd1
 80149a0:	08014ab5 	.word	0x08014ab5
 80149a4:	08014bd1 	.word	0x08014bd1
 80149a8:	08014bd1 	.word	0x08014bd1
 80149ac:	08014bd1 	.word	0x08014bd1
 80149b0:	08014bd1 	.word	0x08014bd1
 80149b4:	08014bd1 	.word	0x08014bd1
 80149b8:	08014bd1 	.word	0x08014bd1
 80149bc:	08014bd1 	.word	0x08014bd1
 80149c0:	08014bd1 	.word	0x08014bd1
 80149c4:	08014bd1 	.word	0x08014bd1
 80149c8:	08014bd1 	.word	0x08014bd1
 80149cc:	08014bd1 	.word	0x08014bd1
 80149d0:	08014bd1 	.word	0x08014bd1
 80149d4:	08014bd1 	.word	0x08014bd1
 80149d8:	08014bd1 	.word	0x08014bd1
 80149dc:	08014bd1 	.word	0x08014bd1
 80149e0:	08014bd1 	.word	0x08014bd1
 80149e4:	08014bd1 	.word	0x08014bd1
 80149e8:	08014bd1 	.word	0x08014bd1
 80149ec:	08014bd1 	.word	0x08014bd1
 80149f0:	08014bd1 	.word	0x08014bd1
 80149f4:	08014bd1 	.word	0x08014bd1
 80149f8:	08014bd1 	.word	0x08014bd1
 80149fc:	08014bd1 	.word	0x08014bd1
 8014a00:	08014bd1 	.word	0x08014bd1
 8014a04:	08014bd1 	.word	0x08014bd1
 8014a08:	08014bd1 	.word	0x08014bd1
 8014a0c:	08014bd1 	.word	0x08014bd1
 8014a10:	08014bd1 	.word	0x08014bd1
 8014a14:	08014bd1 	.word	0x08014bd1
 8014a18:	08014bd1 	.word	0x08014bd1
 8014a1c:	08014bd1 	.word	0x08014bd1
 8014a20:	08014bd1 	.word	0x08014bd1
 8014a24:	08014bd1 	.word	0x08014bd1
 8014a28:	08014bd1 	.word	0x08014bd1
 8014a2c:	08014bd1 	.word	0x08014bd1
 8014a30:	08014bd1 	.word	0x08014bd1
 8014a34:	08014bd1 	.word	0x08014bd1
 8014a38:	08014bd1 	.word	0x08014bd1
 8014a3c:	08014bd1 	.word	0x08014bd1
 8014a40:	08014bd1 	.word	0x08014bd1
 8014a44:	08014bd1 	.word	0x08014bd1
 8014a48:	08014bd1 	.word	0x08014bd1
 8014a4c:	08014bd1 	.word	0x08014bd1
 8014a50:	08014bd1 	.word	0x08014bd1
 8014a54:	08014bd1 	.word	0x08014bd1
 8014a58:	08014bd1 	.word	0x08014bd1
 8014a5c:	08014bd1 	.word	0x08014bd1
 8014a60:	08014adb 	.word	0x08014adb
 8014a64:	08014afb 	.word	0x08014afb
 8014a68:	08014b35 	.word	0x08014b35
 8014a6c:	08014b55 	.word	0x08014b55
 8014a70:	08014bd1 	.word	0x08014bd1
 8014a74:	08014bd1 	.word	0x08014bd1
 8014a78:	08014bd1 	.word	0x08014bd1
 8014a7c:	08014b75 	.word	0x08014b75
 8014a80:	08014bb1 	.word	0x08014bb1
      /* case(DHCP_OPTION_END): handled above */
      case(DHCP_OPTION_PAD):
        /* special option: no len encoded */
        decode_len = len = 0;
 8014a84:	2300      	movs	r3, #0
 8014a86:	77fb      	strb	r3, [r7, #31]
 8014a88:	7ffb      	ldrb	r3, [r7, #31]
 8014a8a:	77bb      	strb	r3, [r7, #30]
        /* will be increased below */
        offset--;
 8014a8c:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8014a8e:	3b01      	subs	r3, #1
 8014a90:	867b      	strh	r3, [r7, #50]	; 0x32
        break;
 8014a92:	e0a0      	b.n	8014bd6 <dhcp_parse_reply+0x326>
      case(DHCP_OPTION_SUBNET_MASK):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8014a94:	7ffb      	ldrb	r3, [r7, #31]
 8014a96:	2b04      	cmp	r3, #4
 8014a98:	d009      	beq.n	8014aae <dhcp_parse_reply+0x1fe>
 8014a9a:	4b3f      	ldr	r3, [pc, #252]	; (8014b98 <dhcp_parse_reply+0x2e8>)
 8014a9c:	f240 52f6 	movw	r2, #1526	; 0x5f6
 8014aa0:	493e      	ldr	r1, [pc, #248]	; (8014b9c <dhcp_parse_reply+0x2ec>)
 8014aa2:	483f      	ldr	r0, [pc, #252]	; (8014ba0 <dhcp_parse_reply+0x2f0>)
 8014aa4:	f003 fdd0 	bl	8018648 <iprintf>
 8014aa8:	f06f 0305 	mvn.w	r3, #5
 8014aac:	e180      	b.n	8014db0 <dhcp_parse_reply+0x500>
        decode_idx = DHCP_OPTION_IDX_SUBNET_MASK;
 8014aae:	2306      	movs	r3, #6
 8014ab0:	61bb      	str	r3, [r7, #24]
        break;
 8014ab2:	e090      	b.n	8014bd6 <dhcp_parse_reply+0x326>
      case(DHCP_OPTION_ROUTER):
        decode_len = 4; /* only copy the first given router */
 8014ab4:	2304      	movs	r3, #4
 8014ab6:	77bb      	strb	r3, [r7, #30]
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
 8014ab8:	7ffa      	ldrb	r2, [r7, #31]
 8014aba:	7fbb      	ldrb	r3, [r7, #30]
 8014abc:	429a      	cmp	r2, r3
 8014abe:	d209      	bcs.n	8014ad4 <dhcp_parse_reply+0x224>
 8014ac0:	4b35      	ldr	r3, [pc, #212]	; (8014b98 <dhcp_parse_reply+0x2e8>)
 8014ac2:	f240 52fb 	movw	r2, #1531	; 0x5fb
 8014ac6:	4937      	ldr	r1, [pc, #220]	; (8014ba4 <dhcp_parse_reply+0x2f4>)
 8014ac8:	4835      	ldr	r0, [pc, #212]	; (8014ba0 <dhcp_parse_reply+0x2f0>)
 8014aca:	f003 fdbd 	bl	8018648 <iprintf>
 8014ace:	f06f 0305 	mvn.w	r3, #5
 8014ad2:	e16d      	b.n	8014db0 <dhcp_parse_reply+0x500>
        decode_idx = DHCP_OPTION_IDX_ROUTER;
 8014ad4:	2307      	movs	r3, #7
 8014ad6:	61bb      	str	r3, [r7, #24]
        break;
 8014ad8:	e07d      	b.n	8014bd6 <dhcp_parse_reply+0x326>
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
        decode_idx = DHCP_OPTION_IDX_DNS_SERVER;
        break;
#endif /* LWIP_DHCP_PROVIDE_DNS_SERVERS */
      case(DHCP_OPTION_LEASE_TIME):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8014ada:	7ffb      	ldrb	r3, [r7, #31]
 8014adc:	2b04      	cmp	r3, #4
 8014ade:	d009      	beq.n	8014af4 <dhcp_parse_reply+0x244>
 8014ae0:	4b2d      	ldr	r3, [pc, #180]	; (8014b98 <dhcp_parse_reply+0x2e8>)
 8014ae2:	f240 6209 	movw	r2, #1545	; 0x609
 8014ae6:	492d      	ldr	r1, [pc, #180]	; (8014b9c <dhcp_parse_reply+0x2ec>)
 8014ae8:	482d      	ldr	r0, [pc, #180]	; (8014ba0 <dhcp_parse_reply+0x2f0>)
 8014aea:	f003 fdad 	bl	8018648 <iprintf>
 8014aee:	f06f 0305 	mvn.w	r3, #5
 8014af2:	e15d      	b.n	8014db0 <dhcp_parse_reply+0x500>
        decode_idx = DHCP_OPTION_IDX_LEASE_TIME;
 8014af4:	2303      	movs	r3, #3
 8014af6:	61bb      	str	r3, [r7, #24]
        break;
 8014af8:	e06d      	b.n	8014bd6 <dhcp_parse_reply+0x326>
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
        decode_idx = DHCP_OPTION_IDX_NTP_SERVER;
        break;
#endif /* LWIP_DHCP_GET_NTP_SRV*/
      case(DHCP_OPTION_OVERLOAD):
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 8014afa:	7ffb      	ldrb	r3, [r7, #31]
 8014afc:	2b01      	cmp	r3, #1
 8014afe:	d009      	beq.n	8014b14 <dhcp_parse_reply+0x264>
 8014b00:	4b25      	ldr	r3, [pc, #148]	; (8014b98 <dhcp_parse_reply+0x2e8>)
 8014b02:	f240 6217 	movw	r2, #1559	; 0x617
 8014b06:	4928      	ldr	r1, [pc, #160]	; (8014ba8 <dhcp_parse_reply+0x2f8>)
 8014b08:	4825      	ldr	r0, [pc, #148]	; (8014ba0 <dhcp_parse_reply+0x2f0>)
 8014b0a:	f003 fd9d 	bl	8018648 <iprintf>
 8014b0e:	f06f 0305 	mvn.w	r3, #5
 8014b12:	e14d      	b.n	8014db0 <dhcp_parse_reply+0x500>
        /* decode overload only in options, not in file/sname: invalid packet */
        LWIP_ERROR("overload in file/sname", options_idx == DHCP_OPTIONS_OFS, return ERR_VAL;);
 8014b14:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8014b16:	2bf0      	cmp	r3, #240	; 0xf0
 8014b18:	d009      	beq.n	8014b2e <dhcp_parse_reply+0x27e>
 8014b1a:	4b1f      	ldr	r3, [pc, #124]	; (8014b98 <dhcp_parse_reply+0x2e8>)
 8014b1c:	f240 6219 	movw	r2, #1561	; 0x619
 8014b20:	4922      	ldr	r1, [pc, #136]	; (8014bac <dhcp_parse_reply+0x2fc>)
 8014b22:	481f      	ldr	r0, [pc, #124]	; (8014ba0 <dhcp_parse_reply+0x2f0>)
 8014b24:	f003 fd90 	bl	8018648 <iprintf>
 8014b28:	f06f 0305 	mvn.w	r3, #5
 8014b2c:	e140      	b.n	8014db0 <dhcp_parse_reply+0x500>
        decode_idx = DHCP_OPTION_IDX_OVERLOAD;
 8014b2e:	2300      	movs	r3, #0
 8014b30:	61bb      	str	r3, [r7, #24]
        break;
 8014b32:	e050      	b.n	8014bd6 <dhcp_parse_reply+0x326>
      case(DHCP_OPTION_MESSAGE_TYPE):
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 8014b34:	7ffb      	ldrb	r3, [r7, #31]
 8014b36:	2b01      	cmp	r3, #1
 8014b38:	d009      	beq.n	8014b4e <dhcp_parse_reply+0x29e>
 8014b3a:	4b17      	ldr	r3, [pc, #92]	; (8014b98 <dhcp_parse_reply+0x2e8>)
 8014b3c:	f240 621d 	movw	r2, #1565	; 0x61d
 8014b40:	4919      	ldr	r1, [pc, #100]	; (8014ba8 <dhcp_parse_reply+0x2f8>)
 8014b42:	4817      	ldr	r0, [pc, #92]	; (8014ba0 <dhcp_parse_reply+0x2f0>)
 8014b44:	f003 fd80 	bl	8018648 <iprintf>
 8014b48:	f06f 0305 	mvn.w	r3, #5
 8014b4c:	e130      	b.n	8014db0 <dhcp_parse_reply+0x500>
        decode_idx = DHCP_OPTION_IDX_MSG_TYPE;
 8014b4e:	2301      	movs	r3, #1
 8014b50:	61bb      	str	r3, [r7, #24]
        break;
 8014b52:	e040      	b.n	8014bd6 <dhcp_parse_reply+0x326>
      case(DHCP_OPTION_SERVER_ID):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8014b54:	7ffb      	ldrb	r3, [r7, #31]
 8014b56:	2b04      	cmp	r3, #4
 8014b58:	d009      	beq.n	8014b6e <dhcp_parse_reply+0x2be>
 8014b5a:	4b0f      	ldr	r3, [pc, #60]	; (8014b98 <dhcp_parse_reply+0x2e8>)
 8014b5c:	f240 6221 	movw	r2, #1569	; 0x621
 8014b60:	490e      	ldr	r1, [pc, #56]	; (8014b9c <dhcp_parse_reply+0x2ec>)
 8014b62:	480f      	ldr	r0, [pc, #60]	; (8014ba0 <dhcp_parse_reply+0x2f0>)
 8014b64:	f003 fd70 	bl	8018648 <iprintf>
 8014b68:	f06f 0305 	mvn.w	r3, #5
 8014b6c:	e120      	b.n	8014db0 <dhcp_parse_reply+0x500>
        decode_idx = DHCP_OPTION_IDX_SERVER_ID;
 8014b6e:	2302      	movs	r3, #2
 8014b70:	61bb      	str	r3, [r7, #24]
        break;
 8014b72:	e030      	b.n	8014bd6 <dhcp_parse_reply+0x326>
      case(DHCP_OPTION_T1):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8014b74:	7ffb      	ldrb	r3, [r7, #31]
 8014b76:	2b04      	cmp	r3, #4
 8014b78:	d009      	beq.n	8014b8e <dhcp_parse_reply+0x2de>
 8014b7a:	4b07      	ldr	r3, [pc, #28]	; (8014b98 <dhcp_parse_reply+0x2e8>)
 8014b7c:	f240 6225 	movw	r2, #1573	; 0x625
 8014b80:	4906      	ldr	r1, [pc, #24]	; (8014b9c <dhcp_parse_reply+0x2ec>)
 8014b82:	4807      	ldr	r0, [pc, #28]	; (8014ba0 <dhcp_parse_reply+0x2f0>)
 8014b84:	f003 fd60 	bl	8018648 <iprintf>
 8014b88:	f06f 0305 	mvn.w	r3, #5
 8014b8c:	e110      	b.n	8014db0 <dhcp_parse_reply+0x500>
        decode_idx = DHCP_OPTION_IDX_T1;
 8014b8e:	2304      	movs	r3, #4
 8014b90:	61bb      	str	r3, [r7, #24]
        break;
 8014b92:	e020      	b.n	8014bd6 <dhcp_parse_reply+0x326>
 8014b94:	2000ac50 	.word	0x2000ac50
 8014b98:	0801abc4 	.word	0x0801abc4
 8014b9c:	0801ae5c 	.word	0x0801ae5c
 8014ba0:	0801ac24 	.word	0x0801ac24
 8014ba4:	0801ae68 	.word	0x0801ae68
 8014ba8:	0801ae7c 	.word	0x0801ae7c
 8014bac:	0801ae88 	.word	0x0801ae88
      case(DHCP_OPTION_T2):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8014bb0:	7ffb      	ldrb	r3, [r7, #31]
 8014bb2:	2b04      	cmp	r3, #4
 8014bb4:	d009      	beq.n	8014bca <dhcp_parse_reply+0x31a>
 8014bb6:	4b80      	ldr	r3, [pc, #512]	; (8014db8 <dhcp_parse_reply+0x508>)
 8014bb8:	f240 6229 	movw	r2, #1577	; 0x629
 8014bbc:	497f      	ldr	r1, [pc, #508]	; (8014dbc <dhcp_parse_reply+0x50c>)
 8014bbe:	4880      	ldr	r0, [pc, #512]	; (8014dc0 <dhcp_parse_reply+0x510>)
 8014bc0:	f003 fd42 	bl	8018648 <iprintf>
 8014bc4:	f06f 0305 	mvn.w	r3, #5
 8014bc8:	e0f2      	b.n	8014db0 <dhcp_parse_reply+0x500>
        decode_idx = DHCP_OPTION_IDX_T2;
 8014bca:	2305      	movs	r3, #5
 8014bcc:	61bb      	str	r3, [r7, #24]
        break;
 8014bce:	e002      	b.n	8014bd6 <dhcp_parse_reply+0x326>
      default:
        decode_len = 0;
 8014bd0:	2300      	movs	r3, #0
 8014bd2:	77bb      	strb	r3, [r7, #30]
        LWIP_DEBUGF(DHCP_DEBUG, ("skipping option %"U16_F" in options\n", (u16_t)op));
        break;
 8014bd4:	bf00      	nop
    }
    offset += len + 2;
 8014bd6:	7ffb      	ldrb	r3, [r7, #31]
 8014bd8:	b29a      	uxth	r2, r3
 8014bda:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8014bdc:	4413      	add	r3, r2
 8014bde:	b29b      	uxth	r3, r3
 8014be0:	3302      	adds	r3, #2
 8014be2:	867b      	strh	r3, [r7, #50]	; 0x32
    if (decode_len > 0) {
 8014be4:	7fbb      	ldrb	r3, [r7, #30]
 8014be6:	2b00      	cmp	r3, #0
 8014be8:	d079      	beq.n	8014cde <dhcp_parse_reply+0x42e>
      u32_t value = 0;
 8014bea:	2300      	movs	r3, #0
 8014bec:	60bb      	str	r3, [r7, #8]
      u16_t copy_len;
decode_next:
      LWIP_ASSERT("check decode_idx", decode_idx >= 0 && decode_idx < DHCP_OPTION_IDX_MAX);
 8014bee:	69bb      	ldr	r3, [r7, #24]
 8014bf0:	2b00      	cmp	r3, #0
 8014bf2:	db02      	blt.n	8014bfa <dhcp_parse_reply+0x34a>
 8014bf4:	69bb      	ldr	r3, [r7, #24]
 8014bf6:	2b07      	cmp	r3, #7
 8014bf8:	dd06      	ble.n	8014c08 <dhcp_parse_reply+0x358>
 8014bfa:	4b6f      	ldr	r3, [pc, #444]	; (8014db8 <dhcp_parse_reply+0x508>)
 8014bfc:	f240 6236 	movw	r2, #1590	; 0x636
 8014c00:	4970      	ldr	r1, [pc, #448]	; (8014dc4 <dhcp_parse_reply+0x514>)
 8014c02:	486f      	ldr	r0, [pc, #444]	; (8014dc0 <dhcp_parse_reply+0x510>)
 8014c04:	f003 fd20 	bl	8018648 <iprintf>
      if (!dhcp_option_given(dhcp, decode_idx)) {
 8014c08:	4a6f      	ldr	r2, [pc, #444]	; (8014dc8 <dhcp_parse_reply+0x518>)
 8014c0a:	69bb      	ldr	r3, [r7, #24]
 8014c0c:	4413      	add	r3, r2
 8014c0e:	781b      	ldrb	r3, [r3, #0]
 8014c10:	2b00      	cmp	r3, #0
 8014c12:	d164      	bne.n	8014cde <dhcp_parse_reply+0x42e>
        copy_len = LWIP_MIN(decode_len, 4);
 8014c14:	7fbb      	ldrb	r3, [r7, #30]
 8014c16:	2b04      	cmp	r3, #4
 8014c18:	bf28      	it	cs
 8014c1a:	2304      	movcs	r3, #4
 8014c1c:	b2db      	uxtb	r3, r3
 8014c1e:	827b      	strh	r3, [r7, #18]
        if (pbuf_copy_partial(q, &value, copy_len, val_offset) != copy_len) {
 8014c20:	8afb      	ldrh	r3, [r7, #22]
 8014c22:	8a7a      	ldrh	r2, [r7, #18]
 8014c24:	f107 0108 	add.w	r1, r7, #8
 8014c28:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8014c2a:	f7f8 fd9d 	bl	800d768 <pbuf_copy_partial>
 8014c2e:	4603      	mov	r3, r0
 8014c30:	461a      	mov	r2, r3
 8014c32:	8a7b      	ldrh	r3, [r7, #18]
 8014c34:	4293      	cmp	r3, r2
 8014c36:	d002      	beq.n	8014c3e <dhcp_parse_reply+0x38e>
          return ERR_BUF;
 8014c38:	f06f 0301 	mvn.w	r3, #1
 8014c3c:	e0b8      	b.n	8014db0 <dhcp_parse_reply+0x500>
        }
        if (decode_len > 4) {
 8014c3e:	7fbb      	ldrb	r3, [r7, #30]
 8014c40:	2b04      	cmp	r3, #4
 8014c42:	d927      	bls.n	8014c94 <dhcp_parse_reply+0x3e4>
          /* decode more than one u32_t */
          LWIP_ERROR("decode_len %% 4 == 0", decode_len % 4 == 0, return ERR_VAL;);
 8014c44:	7fbb      	ldrb	r3, [r7, #30]
 8014c46:	f003 0303 	and.w	r3, r3, #3
 8014c4a:	b2db      	uxtb	r3, r3
 8014c4c:	2b00      	cmp	r3, #0
 8014c4e:	d009      	beq.n	8014c64 <dhcp_parse_reply+0x3b4>
 8014c50:	4b59      	ldr	r3, [pc, #356]	; (8014db8 <dhcp_parse_reply+0x508>)
 8014c52:	f240 623e 	movw	r2, #1598	; 0x63e
 8014c56:	495d      	ldr	r1, [pc, #372]	; (8014dcc <dhcp_parse_reply+0x51c>)
 8014c58:	4859      	ldr	r0, [pc, #356]	; (8014dc0 <dhcp_parse_reply+0x510>)
 8014c5a:	f003 fcf5 	bl	8018648 <iprintf>
 8014c5e:	f06f 0305 	mvn.w	r3, #5
 8014c62:	e0a5      	b.n	8014db0 <dhcp_parse_reply+0x500>
          dhcp_got_option(dhcp, decode_idx);
 8014c64:	4a58      	ldr	r2, [pc, #352]	; (8014dc8 <dhcp_parse_reply+0x518>)
 8014c66:	69bb      	ldr	r3, [r7, #24]
 8014c68:	4413      	add	r3, r2
 8014c6a:	2201      	movs	r2, #1
 8014c6c:	701a      	strb	r2, [r3, #0]
          dhcp_set_option_value(dhcp, decode_idx, lwip_htonl(value));
 8014c6e:	68bb      	ldr	r3, [r7, #8]
 8014c70:	4618      	mov	r0, r3
 8014c72:	f7f7 f9d9 	bl	800c028 <lwip_htonl>
 8014c76:	4601      	mov	r1, r0
 8014c78:	4a55      	ldr	r2, [pc, #340]	; (8014dd0 <dhcp_parse_reply+0x520>)
 8014c7a:	69bb      	ldr	r3, [r7, #24]
 8014c7c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
          decode_len -= 4;
 8014c80:	7fbb      	ldrb	r3, [r7, #30]
 8014c82:	3b04      	subs	r3, #4
 8014c84:	77bb      	strb	r3, [r7, #30]
          val_offset += 4;
 8014c86:	8afb      	ldrh	r3, [r7, #22]
 8014c88:	3304      	adds	r3, #4
 8014c8a:	82fb      	strh	r3, [r7, #22]
          decode_idx++;
 8014c8c:	69bb      	ldr	r3, [r7, #24]
 8014c8e:	3301      	adds	r3, #1
 8014c90:	61bb      	str	r3, [r7, #24]
          goto decode_next;
 8014c92:	e7ac      	b.n	8014bee <dhcp_parse_reply+0x33e>
        } else if (decode_len == 4) {
 8014c94:	7fbb      	ldrb	r3, [r7, #30]
 8014c96:	2b04      	cmp	r3, #4
 8014c98:	d106      	bne.n	8014ca8 <dhcp_parse_reply+0x3f8>
          value = lwip_ntohl(value);
 8014c9a:	68bb      	ldr	r3, [r7, #8]
 8014c9c:	4618      	mov	r0, r3
 8014c9e:	f7f7 f9c3 	bl	800c028 <lwip_htonl>
 8014ca2:	4603      	mov	r3, r0
 8014ca4:	60bb      	str	r3, [r7, #8]
 8014ca6:	e010      	b.n	8014cca <dhcp_parse_reply+0x41a>
        } else {
          LWIP_ERROR("invalid decode_len", decode_len == 1, return ERR_VAL;);
 8014ca8:	7fbb      	ldrb	r3, [r7, #30]
 8014caa:	2b01      	cmp	r3, #1
 8014cac:	d009      	beq.n	8014cc2 <dhcp_parse_reply+0x412>
 8014cae:	4b42      	ldr	r3, [pc, #264]	; (8014db8 <dhcp_parse_reply+0x508>)
 8014cb0:	f44f 62c9 	mov.w	r2, #1608	; 0x648
 8014cb4:	4947      	ldr	r1, [pc, #284]	; (8014dd4 <dhcp_parse_reply+0x524>)
 8014cb6:	4842      	ldr	r0, [pc, #264]	; (8014dc0 <dhcp_parse_reply+0x510>)
 8014cb8:	f003 fcc6 	bl	8018648 <iprintf>
 8014cbc:	f06f 0305 	mvn.w	r3, #5
 8014cc0:	e076      	b.n	8014db0 <dhcp_parse_reply+0x500>
          value = ((u8_t*)&value)[0];
 8014cc2:	f107 0308 	add.w	r3, r7, #8
 8014cc6:	781b      	ldrb	r3, [r3, #0]
 8014cc8:	60bb      	str	r3, [r7, #8]
        }
        dhcp_got_option(dhcp, decode_idx);
 8014cca:	4a3f      	ldr	r2, [pc, #252]	; (8014dc8 <dhcp_parse_reply+0x518>)
 8014ccc:	69bb      	ldr	r3, [r7, #24]
 8014cce:	4413      	add	r3, r2
 8014cd0:	2201      	movs	r2, #1
 8014cd2:	701a      	strb	r2, [r3, #0]
        dhcp_set_option_value(dhcp, decode_idx, value);
 8014cd4:	68ba      	ldr	r2, [r7, #8]
 8014cd6:	493e      	ldr	r1, [pc, #248]	; (8014dd0 <dhcp_parse_reply+0x520>)
 8014cd8:	69bb      	ldr	r3, [r7, #24]
 8014cda:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      }
    }
    if (offset >= q->len) {
 8014cde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014ce0:	895b      	ldrh	r3, [r3, #10]
 8014ce2:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
 8014ce4:	429a      	cmp	r2, r3
 8014ce6:	d323      	bcc.n	8014d30 <dhcp_parse_reply+0x480>
      offset -= q->len;
 8014ce8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014cea:	895b      	ldrh	r3, [r3, #10]
 8014cec:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
 8014cee:	1ad3      	subs	r3, r2, r3
 8014cf0:	867b      	strh	r3, [r7, #50]	; 0x32
      offset_max -= q->len;
 8014cf2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014cf4:	895b      	ldrh	r3, [r3, #10]
 8014cf6:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 8014cf8:	1ad3      	subs	r3, r2, r3
 8014cfa:	863b      	strh	r3, [r7, #48]	; 0x30
      if ((offset < offset_max) && offset_max) {
 8014cfc:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
 8014cfe:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8014d00:	429a      	cmp	r2, r3
 8014d02:	d223      	bcs.n	8014d4c <dhcp_parse_reply+0x49c>
 8014d04:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8014d06:	2b00      	cmp	r3, #0
 8014d08:	d020      	beq.n	8014d4c <dhcp_parse_reply+0x49c>
        q = q->next;
 8014d0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014d0c:	681b      	ldr	r3, [r3, #0]
 8014d0e:	62bb      	str	r3, [r7, #40]	; 0x28
        LWIP_ERROR("next pbuf was null", q != NULL, return ERR_VAL;);
 8014d10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014d12:	2b00      	cmp	r3, #0
 8014d14:	d109      	bne.n	8014d2a <dhcp_parse_reply+0x47a>
 8014d16:	4b28      	ldr	r3, [pc, #160]	; (8014db8 <dhcp_parse_reply+0x508>)
 8014d18:	f240 6254 	movw	r2, #1620	; 0x654
 8014d1c:	492e      	ldr	r1, [pc, #184]	; (8014dd8 <dhcp_parse_reply+0x528>)
 8014d1e:	4828      	ldr	r0, [pc, #160]	; (8014dc0 <dhcp_parse_reply+0x510>)
 8014d20:	f003 fc92 	bl	8018648 <iprintf>
 8014d24:	f06f 0305 	mvn.w	r3, #5
 8014d28:	e042      	b.n	8014db0 <dhcp_parse_reply+0x500>
        options = (u8_t*)q->payload;
 8014d2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014d2c:	685b      	ldr	r3, [r3, #4]
 8014d2e:	637b      	str	r3, [r7, #52]	; 0x34
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 8014d30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014d32:	2b00      	cmp	r3, #0
 8014d34:	d00a      	beq.n	8014d4c <dhcp_parse_reply+0x49c>
 8014d36:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
 8014d38:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8014d3a:	429a      	cmp	r2, r3
 8014d3c:	d206      	bcs.n	8014d4c <dhcp_parse_reply+0x49c>
 8014d3e:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8014d40:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8014d42:	4413      	add	r3, r2
 8014d44:	781b      	ldrb	r3, [r3, #0]
 8014d46:	2bff      	cmp	r3, #255	; 0xff
 8014d48:	f47f adf6 	bne.w	8014938 <dhcp_parse_reply+0x88>
        break;
      }
    }
  }
  /* is this an overloaded message? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_OVERLOAD)) {
 8014d4c:	4b1e      	ldr	r3, [pc, #120]	; (8014dc8 <dhcp_parse_reply+0x518>)
 8014d4e:	781b      	ldrb	r3, [r3, #0]
 8014d50:	2b00      	cmp	r3, #0
 8014d52:	d018      	beq.n	8014d86 <dhcp_parse_reply+0x4d6>
    u32_t overload = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 8014d54:	4b1e      	ldr	r3, [pc, #120]	; (8014dd0 <dhcp_parse_reply+0x520>)
 8014d56:	681b      	ldr	r3, [r3, #0]
 8014d58:	60fb      	str	r3, [r7, #12]
    dhcp_clear_option(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 8014d5a:	4b1b      	ldr	r3, [pc, #108]	; (8014dc8 <dhcp_parse_reply+0x518>)
 8014d5c:	2200      	movs	r2, #0
 8014d5e:	701a      	strb	r2, [r3, #0]
    if (overload == DHCP_OVERLOAD_FILE) {
 8014d60:	68fb      	ldr	r3, [r7, #12]
 8014d62:	2b01      	cmp	r3, #1
 8014d64:	d102      	bne.n	8014d6c <dhcp_parse_reply+0x4bc>
      parse_file_as_options = 1;
 8014d66:	2301      	movs	r3, #1
 8014d68:	627b      	str	r3, [r7, #36]	; 0x24
 8014d6a:	e00c      	b.n	8014d86 <dhcp_parse_reply+0x4d6>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded file field\n"));
    } else if (overload == DHCP_OVERLOAD_SNAME) {
 8014d6c:	68fb      	ldr	r3, [r7, #12]
 8014d6e:	2b02      	cmp	r3, #2
 8014d70:	d102      	bne.n	8014d78 <dhcp_parse_reply+0x4c8>
      parse_sname_as_options = 1;
 8014d72:	2301      	movs	r3, #1
 8014d74:	623b      	str	r3, [r7, #32]
 8014d76:	e006      	b.n	8014d86 <dhcp_parse_reply+0x4d6>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded sname field\n"));
    } else if (overload == DHCP_OVERLOAD_SNAME_FILE) {
 8014d78:	68fb      	ldr	r3, [r7, #12]
 8014d7a:	2b03      	cmp	r3, #3
 8014d7c:	d103      	bne.n	8014d86 <dhcp_parse_reply+0x4d6>
      parse_sname_as_options = 1;
 8014d7e:	2301      	movs	r3, #1
 8014d80:	623b      	str	r3, [r7, #32]
      parse_file_as_options = 1;
 8014d82:	2301      	movs	r3, #1
 8014d84:	627b      	str	r3, [r7, #36]	; 0x24
      /* make sure the string is really NULL-terminated */
      dhcp->boot_file_name[DHCP_FILE_LEN-1] = 0;
    }
#endif /* LWIP_DHCP_BOOTP_FILE */
  }
  if (parse_file_as_options) {
 8014d86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014d88:	2b00      	cmp	r3, #0
 8014d8a:	d006      	beq.n	8014d9a <dhcp_parse_reply+0x4ea>
    /* if both are overloaded, parse file first and then sname (RFC 2131 ch. 4.1) */
    parse_file_as_options = 0;
 8014d8c:	2300      	movs	r3, #0
 8014d8e:	627b      	str	r3, [r7, #36]	; 0x24
    options_idx = DHCP_FILE_OFS;
 8014d90:	236c      	movs	r3, #108	; 0x6c
 8014d92:	85fb      	strh	r3, [r7, #46]	; 0x2e
    options_idx_max = DHCP_FILE_OFS + DHCP_FILE_LEN;
 8014d94:	23ec      	movs	r3, #236	; 0xec
 8014d96:	85bb      	strh	r3, [r7, #44]	; 0x2c
    goto again;
 8014d98:	e5a8      	b.n	80148ec <dhcp_parse_reply+0x3c>
  } else if (parse_sname_as_options) {
 8014d9a:	6a3b      	ldr	r3, [r7, #32]
 8014d9c:	2b00      	cmp	r3, #0
 8014d9e:	d006      	beq.n	8014dae <dhcp_parse_reply+0x4fe>
    parse_sname_as_options = 0;
 8014da0:	2300      	movs	r3, #0
 8014da2:	623b      	str	r3, [r7, #32]
    options_idx = DHCP_SNAME_OFS;
 8014da4:	232c      	movs	r3, #44	; 0x2c
 8014da6:	85fb      	strh	r3, [r7, #46]	; 0x2e
    options_idx_max = DHCP_SNAME_OFS + DHCP_SNAME_LEN;
 8014da8:	236c      	movs	r3, #108	; 0x6c
 8014daa:	85bb      	strh	r3, [r7, #44]	; 0x2c
    goto again;
 8014dac:	e59e      	b.n	80148ec <dhcp_parse_reply+0x3c>
  }
  return ERR_OK;
 8014dae:	2300      	movs	r3, #0
}
 8014db0:	4618      	mov	r0, r3
 8014db2:	3738      	adds	r7, #56	; 0x38
 8014db4:	46bd      	mov	sp, r7
 8014db6:	bd80      	pop	{r7, pc}
 8014db8:	0801abc4 	.word	0x0801abc4
 8014dbc:	0801ae5c 	.word	0x0801ae5c
 8014dc0:	0801ac24 	.word	0x0801ac24
 8014dc4:	0801aea0 	.word	0x0801aea0
 8014dc8:	2000ac50 	.word	0x2000ac50
 8014dcc:	0801aeb4 	.word	0x0801aeb4
 8014dd0:	2000ac58 	.word	0x2000ac58
 8014dd4:	0801aecc 	.word	0x0801aecc
 8014dd8:	0801aee0 	.word	0x0801aee0

08014ddc <dhcp_recv>:
/**
 * If an incoming DHCP message is in response to us, then trigger the state machine
 */
static void
dhcp_recv(void *arg, struct udp_pcb *pcb, struct pbuf *p, const ip_addr_t *addr, u16_t port)
{
 8014ddc:	b580      	push	{r7, lr}
 8014dde:	b08a      	sub	sp, #40	; 0x28
 8014de0:	af00      	add	r7, sp, #0
 8014de2:	60f8      	str	r0, [r7, #12]
 8014de4:	60b9      	str	r1, [r7, #8]
 8014de6:	607a      	str	r2, [r7, #4]
 8014de8:	603b      	str	r3, [r7, #0]
  struct netif *netif = ip_current_input_netif();
 8014dea:	4b68      	ldr	r3, [pc, #416]	; (8014f8c <dhcp_recv+0x1b0>)
 8014dec:	685b      	ldr	r3, [r3, #4]
 8014dee:	623b      	str	r3, [r7, #32]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8014df0:	6a3b      	ldr	r3, [r7, #32]
 8014df2:	6a1b      	ldr	r3, [r3, #32]
 8014df4:	61fb      	str	r3, [r7, #28]
  struct dhcp_msg *reply_msg = (struct dhcp_msg *)p->payload;
 8014df6:	687b      	ldr	r3, [r7, #4]
 8014df8:	685b      	ldr	r3, [r3, #4]
 8014dfa:	61bb      	str	r3, [r7, #24]
  u8_t i;

  LWIP_UNUSED_ARG(arg);

  /* Caught DHCP message from netif that does not have DHCP enabled? -> not interested */
  if ((dhcp == NULL) || (dhcp->pcb_allocated == 0)) {
 8014dfc:	69fb      	ldr	r3, [r7, #28]
 8014dfe:	2b00      	cmp	r3, #0
 8014e00:	f000 80a9 	beq.w	8014f56 <dhcp_recv+0x17a>
 8014e04:	69fb      	ldr	r3, [r7, #28]
 8014e06:	7a1b      	ldrb	r3, [r3, #8]
 8014e08:	2b00      	cmp	r3, #0
 8014e0a:	f000 80a4 	beq.w	8014f56 <dhcp_recv+0x17a>
  /* prevent warnings about unused arguments */
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(addr);
  LWIP_UNUSED_ARG(port);

  LWIP_ASSERT("reply wasn't freed", dhcp->msg_in == NULL);
 8014e0e:	69fb      	ldr	r3, [r7, #28]
 8014e10:	685b      	ldr	r3, [r3, #4]
 8014e12:	2b00      	cmp	r3, #0
 8014e14:	d006      	beq.n	8014e24 <dhcp_recv+0x48>
 8014e16:	4b5e      	ldr	r3, [pc, #376]	; (8014f90 <dhcp_recv+0x1b4>)
 8014e18:	f44f 62d5 	mov.w	r2, #1704	; 0x6a8
 8014e1c:	495d      	ldr	r1, [pc, #372]	; (8014f94 <dhcp_recv+0x1b8>)
 8014e1e:	485e      	ldr	r0, [pc, #376]	; (8014f98 <dhcp_recv+0x1bc>)
 8014e20:	f003 fc12 	bl	8018648 <iprintf>

  if (p->len < DHCP_MIN_REPLY_LEN) {
 8014e24:	687b      	ldr	r3, [r7, #4]
 8014e26:	895b      	ldrh	r3, [r3, #10]
 8014e28:	2b2b      	cmp	r3, #43	; 0x2b
 8014e2a:	f240 8096 	bls.w	8014f5a <dhcp_recv+0x17e>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("DHCP reply message or pbuf too short\n"));
    goto free_pbuf_and_return;
  }

  if (reply_msg->op != DHCP_BOOTREPLY) {
 8014e2e:	69bb      	ldr	r3, [r7, #24]
 8014e30:	781b      	ldrb	r3, [r3, #0]
 8014e32:	2b02      	cmp	r3, #2
 8014e34:	f040 8093 	bne.w	8014f5e <dhcp_recv+0x182>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("not a DHCP reply message, but type %"U16_F"\n", (u16_t)reply_msg->op));
    goto free_pbuf_and_return;
  }
  /* iterate through hardware address and match against DHCP message */
  for (i = 0; i < netif->hwaddr_len && i < NETIF_MAX_HWADDR_LEN && i < DHCP_CHADDR_LEN; i++) {
 8014e38:	2300      	movs	r3, #0
 8014e3a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8014e3e:	e012      	b.n	8014e66 <dhcp_recv+0x8a>
    if (netif->hwaddr[i] != reply_msg->chaddr[i]) {
 8014e40:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8014e44:	6a3a      	ldr	r2, [r7, #32]
 8014e46:	4413      	add	r3, r2
 8014e48:	f893 2029 	ldrb.w	r2, [r3, #41]	; 0x29
 8014e4c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8014e50:	69b9      	ldr	r1, [r7, #24]
 8014e52:	440b      	add	r3, r1
 8014e54:	7f1b      	ldrb	r3, [r3, #28]
 8014e56:	429a      	cmp	r2, r3
 8014e58:	f040 8083 	bne.w	8014f62 <dhcp_recv+0x186>
  for (i = 0; i < netif->hwaddr_len && i < NETIF_MAX_HWADDR_LEN && i < DHCP_CHADDR_LEN; i++) {
 8014e5c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8014e60:	3301      	adds	r3, #1
 8014e62:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8014e66:	6a3b      	ldr	r3, [r7, #32]
 8014e68:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8014e6c:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8014e70:	429a      	cmp	r2, r3
 8014e72:	d207      	bcs.n	8014e84 <dhcp_recv+0xa8>
 8014e74:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8014e78:	2b05      	cmp	r3, #5
 8014e7a:	d803      	bhi.n	8014e84 <dhcp_recv+0xa8>
 8014e7c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8014e80:	2b0f      	cmp	r3, #15
 8014e82:	d9dd      	bls.n	8014e40 <dhcp_recv+0x64>
        (u16_t)i, (u16_t)netif->hwaddr[i], (u16_t)i, (u16_t)reply_msg->chaddr[i]));
      goto free_pbuf_and_return;
    }
  }
  /* match transaction ID against what we expected */
  if (lwip_ntohl(reply_msg->xid) != dhcp->xid) {
 8014e84:	69bb      	ldr	r3, [r7, #24]
 8014e86:	685b      	ldr	r3, [r3, #4]
 8014e88:	4618      	mov	r0, r3
 8014e8a:	f7f7 f8cd 	bl	800c028 <lwip_htonl>
 8014e8e:	4602      	mov	r2, r0
 8014e90:	69fb      	ldr	r3, [r7, #28]
 8014e92:	681b      	ldr	r3, [r3, #0]
 8014e94:	429a      	cmp	r2, r3
 8014e96:	d166      	bne.n	8014f66 <dhcp_recv+0x18a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
      ("transaction id mismatch reply_msg->xid(%"X32_F")!=dhcp->xid(%"X32_F")\n",lwip_ntohl(reply_msg->xid),dhcp->xid));
    goto free_pbuf_and_return;
  }
  /* option fields could be unfold? */
  if (dhcp_parse_reply(dhcp, p) != ERR_OK) {
 8014e98:	6879      	ldr	r1, [r7, #4]
 8014e9a:	69f8      	ldr	r0, [r7, #28]
 8014e9c:	f7ff fd08 	bl	80148b0 <dhcp_parse_reply>
 8014ea0:	4603      	mov	r3, r0
 8014ea2:	2b00      	cmp	r3, #0
 8014ea4:	d161      	bne.n	8014f6a <dhcp_recv+0x18e>
    goto free_pbuf_and_return;
  }

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("searching DHCP_OPTION_MESSAGE_TYPE\n"));
  /* obtain pointer to DHCP message type */
  if (!dhcp_option_given(dhcp, DHCP_OPTION_IDX_MSG_TYPE)) {
 8014ea6:	4b3d      	ldr	r3, [pc, #244]	; (8014f9c <dhcp_recv+0x1c0>)
 8014ea8:	785b      	ldrb	r3, [r3, #1]
 8014eaa:	2b00      	cmp	r3, #0
 8014eac:	d05f      	beq.n	8014f6e <dhcp_recv+0x192>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("DHCP_OPTION_MESSAGE_TYPE option not found\n"));
    goto free_pbuf_and_return;
  }

  /* read DHCP message type */
  msg_type = (u8_t)dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_MSG_TYPE);
 8014eae:	4b3c      	ldr	r3, [pc, #240]	; (8014fa0 <dhcp_recv+0x1c4>)
 8014eb0:	685b      	ldr	r3, [r3, #4]
 8014eb2:	75fb      	strb	r3, [r7, #23]
  /* message type is DHCP ACK? */
  if (msg_type == DHCP_ACK) {
 8014eb4:	7dfb      	ldrb	r3, [r7, #23]
 8014eb6:	2b05      	cmp	r3, #5
 8014eb8:	d128      	bne.n	8014f0c <dhcp_recv+0x130>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_ACK received\n"));
    /* in requesting state? */
    if (dhcp->state == DHCP_STATE_REQUESTING) {
 8014eba:	69fb      	ldr	r3, [r7, #28]
 8014ebc:	7a5b      	ldrb	r3, [r3, #9]
 8014ebe:	2b01      	cmp	r3, #1
 8014ec0:	d111      	bne.n	8014ee6 <dhcp_recv+0x10a>
      dhcp_handle_ack(netif);
 8014ec2:	6a38      	ldr	r0, [r7, #32]
 8014ec4:	f7fe fea0 	bl	8013c08 <dhcp_handle_ack>
#if DHCP_DOES_ARP_CHECK
      if ((netif->flags & NETIF_FLAG_ETHARP) != 0) {
 8014ec8:	6a3b      	ldr	r3, [r7, #32]
 8014eca:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8014ece:	f003 0308 	and.w	r3, r3, #8
 8014ed2:	2b00      	cmp	r3, #0
 8014ed4:	d003      	beq.n	8014ede <dhcp_recv+0x102>
        /* check if the acknowledged lease address is already in use */
        dhcp_check(netif);
 8014ed6:	6a38      	ldr	r0, [r7, #32]
 8014ed8:	f7fe fc68 	bl	80137ac <dhcp_check>
 8014edc:	e048      	b.n	8014f70 <dhcp_recv+0x194>
      } else {
        /* bind interface to the acknowledged lease address */
        dhcp_bind(netif);
 8014ede:	6a38      	ldr	r0, [r7, #32]
 8014ee0:	f7ff f8a0 	bl	8014024 <dhcp_bind>
 8014ee4:	e044      	b.n	8014f70 <dhcp_recv+0x194>
      /* bind interface to the acknowledged lease address */
      dhcp_bind(netif);
#endif
    }
    /* already bound to the given lease address? */
    else if ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REBINDING) ||
 8014ee6:	69fb      	ldr	r3, [r7, #28]
 8014ee8:	7a5b      	ldrb	r3, [r3, #9]
 8014eea:	2b03      	cmp	r3, #3
 8014eec:	d007      	beq.n	8014efe <dhcp_recv+0x122>
 8014eee:	69fb      	ldr	r3, [r7, #28]
 8014ef0:	7a5b      	ldrb	r3, [r3, #9]
 8014ef2:	2b04      	cmp	r3, #4
 8014ef4:	d003      	beq.n	8014efe <dhcp_recv+0x122>
             (dhcp->state == DHCP_STATE_RENEWING)) {
 8014ef6:	69fb      	ldr	r3, [r7, #28]
 8014ef8:	7a5b      	ldrb	r3, [r3, #9]
    else if ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REBINDING) ||
 8014efa:	2b05      	cmp	r3, #5
 8014efc:	d138      	bne.n	8014f70 <dhcp_recv+0x194>
      dhcp_handle_ack(netif);
 8014efe:	6a38      	ldr	r0, [r7, #32]
 8014f00:	f7fe fe82 	bl	8013c08 <dhcp_handle_ack>
      dhcp_bind(netif);
 8014f04:	6a38      	ldr	r0, [r7, #32]
 8014f06:	f7ff f88d 	bl	8014024 <dhcp_bind>
 8014f0a:	e031      	b.n	8014f70 <dhcp_recv+0x194>
    }
  }
  /* received a DHCP_NAK in appropriate state? */
  else if ((msg_type == DHCP_NAK) &&
 8014f0c:	7dfb      	ldrb	r3, [r7, #23]
 8014f0e:	2b06      	cmp	r3, #6
 8014f10:	d113      	bne.n	8014f3a <dhcp_recv+0x15e>
    ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 8014f12:	69fb      	ldr	r3, [r7, #28]
 8014f14:	7a5b      	ldrb	r3, [r3, #9]
  else if ((msg_type == DHCP_NAK) &&
 8014f16:	2b03      	cmp	r3, #3
 8014f18:	d00b      	beq.n	8014f32 <dhcp_recv+0x156>
    ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 8014f1a:	69fb      	ldr	r3, [r7, #28]
 8014f1c:	7a5b      	ldrb	r3, [r3, #9]
 8014f1e:	2b01      	cmp	r3, #1
 8014f20:	d007      	beq.n	8014f32 <dhcp_recv+0x156>
     (dhcp->state == DHCP_STATE_REBINDING) || (dhcp->state == DHCP_STATE_RENEWING  ))) {
 8014f22:	69fb      	ldr	r3, [r7, #28]
 8014f24:	7a5b      	ldrb	r3, [r3, #9]
    ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 8014f26:	2b04      	cmp	r3, #4
 8014f28:	d003      	beq.n	8014f32 <dhcp_recv+0x156>
     (dhcp->state == DHCP_STATE_REBINDING) || (dhcp->state == DHCP_STATE_RENEWING  ))) {
 8014f2a:	69fb      	ldr	r3, [r7, #28]
 8014f2c:	7a5b      	ldrb	r3, [r3, #9]
 8014f2e:	2b05      	cmp	r3, #5
 8014f30:	d103      	bne.n	8014f3a <dhcp_recv+0x15e>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_NAK received\n"));
    dhcp_handle_nak(netif);
 8014f32:	6a38      	ldr	r0, [r7, #32]
 8014f34:	f7fe fc20 	bl	8013778 <dhcp_handle_nak>
 8014f38:	e01a      	b.n	8014f70 <dhcp_recv+0x194>
  }
  /* received a DHCP_OFFER in DHCP_STATE_SELECTING state? */
  else if ((msg_type == DHCP_OFFER) && (dhcp->state == DHCP_STATE_SELECTING)) {
 8014f3a:	7dfb      	ldrb	r3, [r7, #23]
 8014f3c:	2b02      	cmp	r3, #2
 8014f3e:	d10a      	bne.n	8014f56 <dhcp_recv+0x17a>
 8014f40:	69fb      	ldr	r3, [r7, #28]
 8014f42:	7a5b      	ldrb	r3, [r3, #9]
 8014f44:	2b06      	cmp	r3, #6
 8014f46:	d106      	bne.n	8014f56 <dhcp_recv+0x17a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_OFFER received in DHCP_STATE_SELECTING state\n"));
    dhcp->request_timeout = 0;
 8014f48:	69fb      	ldr	r3, [r7, #28]
 8014f4a:	2200      	movs	r2, #0
 8014f4c:	82da      	strh	r2, [r3, #22]
    /* remember offered lease */
    dhcp_handle_offer(netif);
 8014f4e:	6a38      	ldr	r0, [r7, #32]
 8014f50:	f7fe fc60 	bl	8013814 <dhcp_handle_offer>
 8014f54:	e00c      	b.n	8014f70 <dhcp_recv+0x194>
  }

free_pbuf_and_return:
 8014f56:	bf00      	nop
 8014f58:	e00a      	b.n	8014f70 <dhcp_recv+0x194>
    goto free_pbuf_and_return;
 8014f5a:	bf00      	nop
 8014f5c:	e008      	b.n	8014f70 <dhcp_recv+0x194>
    goto free_pbuf_and_return;
 8014f5e:	bf00      	nop
 8014f60:	e006      	b.n	8014f70 <dhcp_recv+0x194>
      goto free_pbuf_and_return;
 8014f62:	bf00      	nop
 8014f64:	e004      	b.n	8014f70 <dhcp_recv+0x194>
    goto free_pbuf_and_return;
 8014f66:	bf00      	nop
 8014f68:	e002      	b.n	8014f70 <dhcp_recv+0x194>
    goto free_pbuf_and_return;
 8014f6a:	bf00      	nop
 8014f6c:	e000      	b.n	8014f70 <dhcp_recv+0x194>
    goto free_pbuf_and_return;
 8014f6e:	bf00      	nop
  if (dhcp != NULL) {
 8014f70:	69fb      	ldr	r3, [r7, #28]
 8014f72:	2b00      	cmp	r3, #0
 8014f74:	d002      	beq.n	8014f7c <dhcp_recv+0x1a0>
    dhcp->msg_in = NULL;
 8014f76:	69fb      	ldr	r3, [r7, #28]
 8014f78:	2200      	movs	r2, #0
 8014f7a:	605a      	str	r2, [r3, #4]
  }
  pbuf_free(p);
 8014f7c:	6878      	ldr	r0, [r7, #4]
 8014f7e:	f7f8 f9e7 	bl	800d350 <pbuf_free>
}
 8014f82:	bf00      	nop
 8014f84:	3728      	adds	r7, #40	; 0x28
 8014f86:	46bd      	mov	sp, r7
 8014f88:	bd80      	pop	{r7, pc}
 8014f8a:	bf00      	nop
 8014f8c:	20007504 	.word	0x20007504
 8014f90:	0801abc4 	.word	0x0801abc4
 8014f94:	0801acf0 	.word	0x0801acf0
 8014f98:	0801ac24 	.word	0x0801ac24
 8014f9c:	2000ac50 	.word	0x2000ac50
 8014fa0:	2000ac58 	.word	0x2000ac58

08014fa4 <dhcp_create_msg>:
 * @param dhcp dhcp control struct
 * @param message_type message type of the request
 */
static err_t
dhcp_create_msg(struct netif *netif, struct dhcp *dhcp, u8_t message_type)
{
 8014fa4:	b590      	push	{r4, r7, lr}
 8014fa6:	b087      	sub	sp, #28
 8014fa8:	af00      	add	r7, sp, #0
 8014faa:	60f8      	str	r0, [r7, #12]
 8014fac:	60b9      	str	r1, [r7, #8]
 8014fae:	4613      	mov	r3, r2
 8014fb0:	71fb      	strb	r3, [r7, #7]
  if (!xid_initialised) {
    xid = DHCP_GLOBAL_XID;
    xid_initialised = !xid_initialised;
  }
#endif
  LWIP_ERROR("dhcp_create_msg: netif != NULL", (netif != NULL), return ERR_ARG;);
 8014fb2:	68fb      	ldr	r3, [r7, #12]
 8014fb4:	2b00      	cmp	r3, #0
 8014fb6:	d109      	bne.n	8014fcc <dhcp_create_msg+0x28>
 8014fb8:	4ba3      	ldr	r3, [pc, #652]	; (8015248 <dhcp_create_msg+0x2a4>)
 8014fba:	f240 721d 	movw	r2, #1821	; 0x71d
 8014fbe:	49a3      	ldr	r1, [pc, #652]	; (801524c <dhcp_create_msg+0x2a8>)
 8014fc0:	48a3      	ldr	r0, [pc, #652]	; (8015250 <dhcp_create_msg+0x2ac>)
 8014fc2:	f003 fb41 	bl	8018648 <iprintf>
 8014fc6:	f06f 030f 	mvn.w	r3, #15
 8014fca:	e138      	b.n	801523e <dhcp_create_msg+0x29a>
  LWIP_ERROR("dhcp_create_msg: dhcp != NULL", (dhcp != NULL), return ERR_VAL;);
 8014fcc:	68bb      	ldr	r3, [r7, #8]
 8014fce:	2b00      	cmp	r3, #0
 8014fd0:	d109      	bne.n	8014fe6 <dhcp_create_msg+0x42>
 8014fd2:	4b9d      	ldr	r3, [pc, #628]	; (8015248 <dhcp_create_msg+0x2a4>)
 8014fd4:	f240 721e 	movw	r2, #1822	; 0x71e
 8014fd8:	499e      	ldr	r1, [pc, #632]	; (8015254 <dhcp_create_msg+0x2b0>)
 8014fda:	489d      	ldr	r0, [pc, #628]	; (8015250 <dhcp_create_msg+0x2ac>)
 8014fdc:	f003 fb34 	bl	8018648 <iprintf>
 8014fe0:	f06f 0305 	mvn.w	r3, #5
 8014fe4:	e12b      	b.n	801523e <dhcp_create_msg+0x29a>
  LWIP_ASSERT("dhcp_create_msg: dhcp->p_out == NULL", dhcp->p_out == NULL);
 8014fe6:	68bb      	ldr	r3, [r7, #8]
 8014fe8:	68db      	ldr	r3, [r3, #12]
 8014fea:	2b00      	cmp	r3, #0
 8014fec:	d006      	beq.n	8014ffc <dhcp_create_msg+0x58>
 8014fee:	4b96      	ldr	r3, [pc, #600]	; (8015248 <dhcp_create_msg+0x2a4>)
 8014ff0:	f240 721f 	movw	r2, #1823	; 0x71f
 8014ff4:	4998      	ldr	r1, [pc, #608]	; (8015258 <dhcp_create_msg+0x2b4>)
 8014ff6:	4896      	ldr	r0, [pc, #600]	; (8015250 <dhcp_create_msg+0x2ac>)
 8014ff8:	f003 fb26 	bl	8018648 <iprintf>
  LWIP_ASSERT("dhcp_create_msg: dhcp->msg_out == NULL", dhcp->msg_out == NULL);
 8014ffc:	68bb      	ldr	r3, [r7, #8]
 8014ffe:	691b      	ldr	r3, [r3, #16]
 8015000:	2b00      	cmp	r3, #0
 8015002:	d006      	beq.n	8015012 <dhcp_create_msg+0x6e>
 8015004:	4b90      	ldr	r3, [pc, #576]	; (8015248 <dhcp_create_msg+0x2a4>)
 8015006:	f44f 62e4 	mov.w	r2, #1824	; 0x720
 801500a:	4994      	ldr	r1, [pc, #592]	; (801525c <dhcp_create_msg+0x2b8>)
 801500c:	4890      	ldr	r0, [pc, #576]	; (8015250 <dhcp_create_msg+0x2ac>)
 801500e:	f003 fb1b 	bl	8018648 <iprintf>
  dhcp->p_out = pbuf_alloc(PBUF_TRANSPORT, sizeof(struct dhcp_msg), PBUF_RAM);
 8015012:	2200      	movs	r2, #0
 8015014:	f44f 719a 	mov.w	r1, #308	; 0x134
 8015018:	2000      	movs	r0, #0
 801501a:	f7f7 fe27 	bl	800cc6c <pbuf_alloc>
 801501e:	4602      	mov	r2, r0
 8015020:	68bb      	ldr	r3, [r7, #8]
 8015022:	60da      	str	r2, [r3, #12]
  if (dhcp->p_out == NULL) {
 8015024:	68bb      	ldr	r3, [r7, #8]
 8015026:	68db      	ldr	r3, [r3, #12]
 8015028:	2b00      	cmp	r3, #0
 801502a:	d102      	bne.n	8015032 <dhcp_create_msg+0x8e>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
      ("dhcp_create_msg(): could not allocate pbuf\n"));
    return ERR_MEM;
 801502c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8015030:	e105      	b.n	801523e <dhcp_create_msg+0x29a>
  }
  LWIP_ASSERT("dhcp_create_msg: check that first pbuf can hold struct dhcp_msg",
 8015032:	68bb      	ldr	r3, [r7, #8]
 8015034:	68db      	ldr	r3, [r3, #12]
 8015036:	895b      	ldrh	r3, [r3, #10]
 8015038:	f5b3 7f9a 	cmp.w	r3, #308	; 0x134
 801503c:	d206      	bcs.n	801504c <dhcp_create_msg+0xa8>
 801503e:	4b82      	ldr	r3, [pc, #520]	; (8015248 <dhcp_create_msg+0x2a4>)
 8015040:	f44f 62e5 	mov.w	r2, #1832	; 0x728
 8015044:	4986      	ldr	r1, [pc, #536]	; (8015260 <dhcp_create_msg+0x2bc>)
 8015046:	4882      	ldr	r0, [pc, #520]	; (8015250 <dhcp_create_msg+0x2ac>)
 8015048:	f003 fafe 	bl	8018648 <iprintf>
           (dhcp->p_out->len >= sizeof(struct dhcp_msg)));

  /* DHCP_REQUEST should reuse 'xid' from DHCPOFFER */
  if ((message_type != DHCP_REQUEST) || (dhcp->state == DHCP_STATE_REBOOTING)) {
 801504c:	79fb      	ldrb	r3, [r7, #7]
 801504e:	2b03      	cmp	r3, #3
 8015050:	d103      	bne.n	801505a <dhcp_create_msg+0xb6>
 8015052:	68bb      	ldr	r3, [r7, #8]
 8015054:	7a5b      	ldrb	r3, [r3, #9]
 8015056:	2b03      	cmp	r3, #3
 8015058:	d10d      	bne.n	8015076 <dhcp_create_msg+0xd2>
    /* reuse transaction identifier in retransmissions */
    if (dhcp->tries == 0) {
 801505a:	68bb      	ldr	r3, [r7, #8]
 801505c:	7a9b      	ldrb	r3, [r3, #10]
 801505e:	2b00      	cmp	r3, #0
 8015060:	d105      	bne.n	801506e <dhcp_create_msg+0xca>
#if DHCP_CREATE_RAND_XID && defined(LWIP_RAND)
      xid = LWIP_RAND();
 8015062:	f003 fb09 	bl	8018678 <rand>
 8015066:	4603      	mov	r3, r0
 8015068:	461a      	mov	r2, r3
 801506a:	4b7e      	ldr	r3, [pc, #504]	; (8015264 <dhcp_create_msg+0x2c0>)
 801506c:	601a      	str	r2, [r3, #0]
#else /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
      xid++;
#endif /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
    }
    dhcp->xid = xid;
 801506e:	4b7d      	ldr	r3, [pc, #500]	; (8015264 <dhcp_create_msg+0x2c0>)
 8015070:	681a      	ldr	r2, [r3, #0]
 8015072:	68bb      	ldr	r3, [r7, #8]
 8015074:	601a      	str	r2, [r3, #0]
  }
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE,
              ("transaction id xid(%"X32_F")\n", xid));

  dhcp->msg_out = (struct dhcp_msg *)dhcp->p_out->payload;
 8015076:	68bb      	ldr	r3, [r7, #8]
 8015078:	68db      	ldr	r3, [r3, #12]
 801507a:	685a      	ldr	r2, [r3, #4]
 801507c:	68bb      	ldr	r3, [r7, #8]
 801507e:	611a      	str	r2, [r3, #16]

  dhcp->msg_out->op = DHCP_BOOTREQUEST;
 8015080:	68bb      	ldr	r3, [r7, #8]
 8015082:	691b      	ldr	r3, [r3, #16]
 8015084:	2201      	movs	r2, #1
 8015086:	701a      	strb	r2, [r3, #0]
  /* @todo: make link layer independent */
  dhcp->msg_out->htype = DHCP_HTYPE_ETH;
 8015088:	68bb      	ldr	r3, [r7, #8]
 801508a:	691b      	ldr	r3, [r3, #16]
 801508c:	2201      	movs	r2, #1
 801508e:	705a      	strb	r2, [r3, #1]
  dhcp->msg_out->hlen = netif->hwaddr_len;
 8015090:	68bb      	ldr	r3, [r7, #8]
 8015092:	691b      	ldr	r3, [r3, #16]
 8015094:	68fa      	ldr	r2, [r7, #12]
 8015096:	f892 2028 	ldrb.w	r2, [r2, #40]	; 0x28
 801509a:	709a      	strb	r2, [r3, #2]
  dhcp->msg_out->hops = 0;
 801509c:	68bb      	ldr	r3, [r7, #8]
 801509e:	691b      	ldr	r3, [r3, #16]
 80150a0:	2200      	movs	r2, #0
 80150a2:	70da      	strb	r2, [r3, #3]
  dhcp->msg_out->xid = lwip_htonl(dhcp->xid);
 80150a4:	68bb      	ldr	r3, [r7, #8]
 80150a6:	681a      	ldr	r2, [r3, #0]
 80150a8:	68bb      	ldr	r3, [r7, #8]
 80150aa:	691c      	ldr	r4, [r3, #16]
 80150ac:	4610      	mov	r0, r2
 80150ae:	f7f6 ffbb 	bl	800c028 <lwip_htonl>
 80150b2:	4603      	mov	r3, r0
 80150b4:	6063      	str	r3, [r4, #4]
  dhcp->msg_out->secs = 0;
 80150b6:	68bb      	ldr	r3, [r7, #8]
 80150b8:	691b      	ldr	r3, [r3, #16]
 80150ba:	2200      	movs	r2, #0
 80150bc:	721a      	strb	r2, [r3, #8]
 80150be:	2200      	movs	r2, #0
 80150c0:	725a      	strb	r2, [r3, #9]
  /* we don't need the broadcast flag since we can receive unicast traffic
     before being fully configured! */
  dhcp->msg_out->flags = 0;
 80150c2:	68bb      	ldr	r3, [r7, #8]
 80150c4:	691b      	ldr	r3, [r3, #16]
 80150c6:	2200      	movs	r2, #0
 80150c8:	729a      	strb	r2, [r3, #10]
 80150ca:	2200      	movs	r2, #0
 80150cc:	72da      	strb	r2, [r3, #11]
  ip4_addr_set_zero(&dhcp->msg_out->ciaddr);
 80150ce:	68bb      	ldr	r3, [r7, #8]
 80150d0:	691b      	ldr	r3, [r3, #16]
 80150d2:	2200      	movs	r2, #0
 80150d4:	731a      	strb	r2, [r3, #12]
 80150d6:	2200      	movs	r2, #0
 80150d8:	735a      	strb	r2, [r3, #13]
 80150da:	2200      	movs	r2, #0
 80150dc:	739a      	strb	r2, [r3, #14]
 80150de:	2200      	movs	r2, #0
 80150e0:	73da      	strb	r2, [r3, #15]
  /* set ciaddr to netif->ip_addr based on message_type and state */
  if ((message_type == DHCP_INFORM) || (message_type == DHCP_DECLINE) || (message_type == DHCP_RELEASE) ||
 80150e2:	79fb      	ldrb	r3, [r7, #7]
 80150e4:	2b08      	cmp	r3, #8
 80150e6:	d010      	beq.n	801510a <dhcp_create_msg+0x166>
 80150e8:	79fb      	ldrb	r3, [r7, #7]
 80150ea:	2b04      	cmp	r3, #4
 80150ec:	d00d      	beq.n	801510a <dhcp_create_msg+0x166>
 80150ee:	79fb      	ldrb	r3, [r7, #7]
 80150f0:	2b07      	cmp	r3, #7
 80150f2:	d00a      	beq.n	801510a <dhcp_create_msg+0x166>
 80150f4:	79fb      	ldrb	r3, [r7, #7]
 80150f6:	2b03      	cmp	r3, #3
 80150f8:	d10d      	bne.n	8015116 <dhcp_create_msg+0x172>
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
       ((dhcp->state== DHCP_STATE_RENEWING) || dhcp->state== DHCP_STATE_REBINDING))) {
 80150fa:	68bb      	ldr	r3, [r7, #8]
 80150fc:	7a5b      	ldrb	r3, [r3, #9]
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
 80150fe:	2b05      	cmp	r3, #5
 8015100:	d003      	beq.n	801510a <dhcp_create_msg+0x166>
       ((dhcp->state== DHCP_STATE_RENEWING) || dhcp->state== DHCP_STATE_REBINDING))) {
 8015102:	68bb      	ldr	r3, [r7, #8]
 8015104:	7a5b      	ldrb	r3, [r3, #9]
 8015106:	2b04      	cmp	r3, #4
 8015108:	d105      	bne.n	8015116 <dhcp_create_msg+0x172>
    ip4_addr_copy(dhcp->msg_out->ciaddr, *netif_ip4_addr(netif));
 801510a:	68fb      	ldr	r3, [r7, #12]
 801510c:	1d1a      	adds	r2, r3, #4
 801510e:	68bb      	ldr	r3, [r7, #8]
 8015110:	691b      	ldr	r3, [r3, #16]
 8015112:	6812      	ldr	r2, [r2, #0]
 8015114:	60da      	str	r2, [r3, #12]
  }
  ip4_addr_set_zero(&dhcp->msg_out->yiaddr);
 8015116:	68bb      	ldr	r3, [r7, #8]
 8015118:	691b      	ldr	r3, [r3, #16]
 801511a:	2200      	movs	r2, #0
 801511c:	741a      	strb	r2, [r3, #16]
 801511e:	2200      	movs	r2, #0
 8015120:	745a      	strb	r2, [r3, #17]
 8015122:	2200      	movs	r2, #0
 8015124:	749a      	strb	r2, [r3, #18]
 8015126:	2200      	movs	r2, #0
 8015128:	74da      	strb	r2, [r3, #19]
  ip4_addr_set_zero(&dhcp->msg_out->siaddr);
 801512a:	68bb      	ldr	r3, [r7, #8]
 801512c:	691b      	ldr	r3, [r3, #16]
 801512e:	2200      	movs	r2, #0
 8015130:	751a      	strb	r2, [r3, #20]
 8015132:	2200      	movs	r2, #0
 8015134:	755a      	strb	r2, [r3, #21]
 8015136:	2200      	movs	r2, #0
 8015138:	759a      	strb	r2, [r3, #22]
 801513a:	2200      	movs	r2, #0
 801513c:	75da      	strb	r2, [r3, #23]
  ip4_addr_set_zero(&dhcp->msg_out->giaddr);
 801513e:	68bb      	ldr	r3, [r7, #8]
 8015140:	691b      	ldr	r3, [r3, #16]
 8015142:	2200      	movs	r2, #0
 8015144:	761a      	strb	r2, [r3, #24]
 8015146:	2200      	movs	r2, #0
 8015148:	765a      	strb	r2, [r3, #25]
 801514a:	2200      	movs	r2, #0
 801514c:	769a      	strb	r2, [r3, #26]
 801514e:	2200      	movs	r2, #0
 8015150:	76da      	strb	r2, [r3, #27]
  for (i = 0; i < DHCP_CHADDR_LEN; i++) {
 8015152:	2300      	movs	r3, #0
 8015154:	82fb      	strh	r3, [r7, #22]
 8015156:	e019      	b.n	801518c <dhcp_create_msg+0x1e8>
    /* copy netif hardware address, pad with zeroes */
    dhcp->msg_out->chaddr[i] = (i < netif->hwaddr_len && i < NETIF_MAX_HWADDR_LEN) ? netif->hwaddr[i] : 0/* pad byte*/;
 8015158:	68fb      	ldr	r3, [r7, #12]
 801515a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801515e:	b29b      	uxth	r3, r3
 8015160:	8afa      	ldrh	r2, [r7, #22]
 8015162:	429a      	cmp	r2, r3
 8015164:	d208      	bcs.n	8015178 <dhcp_create_msg+0x1d4>
 8015166:	8afb      	ldrh	r3, [r7, #22]
 8015168:	2b05      	cmp	r3, #5
 801516a:	d805      	bhi.n	8015178 <dhcp_create_msg+0x1d4>
 801516c:	8afb      	ldrh	r3, [r7, #22]
 801516e:	68fa      	ldr	r2, [r7, #12]
 8015170:	4413      	add	r3, r2
 8015172:	f893 1029 	ldrb.w	r1, [r3, #41]	; 0x29
 8015176:	e000      	b.n	801517a <dhcp_create_msg+0x1d6>
 8015178:	2100      	movs	r1, #0
 801517a:	68bb      	ldr	r3, [r7, #8]
 801517c:	691a      	ldr	r2, [r3, #16]
 801517e:	8afb      	ldrh	r3, [r7, #22]
 8015180:	4413      	add	r3, r2
 8015182:	460a      	mov	r2, r1
 8015184:	771a      	strb	r2, [r3, #28]
  for (i = 0; i < DHCP_CHADDR_LEN; i++) {
 8015186:	8afb      	ldrh	r3, [r7, #22]
 8015188:	3301      	adds	r3, #1
 801518a:	82fb      	strh	r3, [r7, #22]
 801518c:	8afb      	ldrh	r3, [r7, #22]
 801518e:	2b0f      	cmp	r3, #15
 8015190:	d9e2      	bls.n	8015158 <dhcp_create_msg+0x1b4>
  }
  for (i = 0; i < DHCP_SNAME_LEN; i++) {
 8015192:	2300      	movs	r3, #0
 8015194:	82fb      	strh	r3, [r7, #22]
 8015196:	e009      	b.n	80151ac <dhcp_create_msg+0x208>
    dhcp->msg_out->sname[i] = 0;
 8015198:	68bb      	ldr	r3, [r7, #8]
 801519a:	691a      	ldr	r2, [r3, #16]
 801519c:	8afb      	ldrh	r3, [r7, #22]
 801519e:	4413      	add	r3, r2
 80151a0:	2200      	movs	r2, #0
 80151a2:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  for (i = 0; i < DHCP_SNAME_LEN; i++) {
 80151a6:	8afb      	ldrh	r3, [r7, #22]
 80151a8:	3301      	adds	r3, #1
 80151aa:	82fb      	strh	r3, [r7, #22]
 80151ac:	8afb      	ldrh	r3, [r7, #22]
 80151ae:	2b3f      	cmp	r3, #63	; 0x3f
 80151b0:	d9f2      	bls.n	8015198 <dhcp_create_msg+0x1f4>
  }
  for (i = 0; i < DHCP_FILE_LEN; i++) {
 80151b2:	2300      	movs	r3, #0
 80151b4:	82fb      	strh	r3, [r7, #22]
 80151b6:	e009      	b.n	80151cc <dhcp_create_msg+0x228>
    dhcp->msg_out->file[i] = 0;
 80151b8:	68bb      	ldr	r3, [r7, #8]
 80151ba:	691a      	ldr	r2, [r3, #16]
 80151bc:	8afb      	ldrh	r3, [r7, #22]
 80151be:	4413      	add	r3, r2
 80151c0:	2200      	movs	r2, #0
 80151c2:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
  for (i = 0; i < DHCP_FILE_LEN; i++) {
 80151c6:	8afb      	ldrh	r3, [r7, #22]
 80151c8:	3301      	adds	r3, #1
 80151ca:	82fb      	strh	r3, [r7, #22]
 80151cc:	8afb      	ldrh	r3, [r7, #22]
 80151ce:	2b7f      	cmp	r3, #127	; 0x7f
 80151d0:	d9f2      	bls.n	80151b8 <dhcp_create_msg+0x214>
  }
  dhcp->msg_out->cookie = PP_HTONL(DHCP_MAGIC_COOKIE);
 80151d2:	68bb      	ldr	r3, [r7, #8]
 80151d4:	691b      	ldr	r3, [r3, #16]
 80151d6:	2200      	movs	r2, #0
 80151d8:	f042 0263 	orr.w	r2, r2, #99	; 0x63
 80151dc:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
 80151e0:	2200      	movs	r2, #0
 80151e2:	f062 027d 	orn	r2, r2, #125	; 0x7d
 80151e6:	f883 20ed 	strb.w	r2, [r3, #237]	; 0xed
 80151ea:	2200      	movs	r2, #0
 80151ec:	f042 0253 	orr.w	r2, r2, #83	; 0x53
 80151f0:	f883 20ee 	strb.w	r2, [r3, #238]	; 0xee
 80151f4:	2200      	movs	r2, #0
 80151f6:	f042 0263 	orr.w	r2, r2, #99	; 0x63
 80151fa:	f883 20ef 	strb.w	r2, [r3, #239]	; 0xef
  dhcp->options_out_len = 0;
 80151fe:	68bb      	ldr	r3, [r7, #8]
 8015200:	2200      	movs	r2, #0
 8015202:	829a      	strh	r2, [r3, #20]
  /* fill options field with an incrementing array (for debugging purposes) */
  for (i = 0; i < DHCP_OPTIONS_LEN; i++) {
 8015204:	2300      	movs	r3, #0
 8015206:	82fb      	strh	r3, [r7, #22]
 8015208:	e00b      	b.n	8015222 <dhcp_create_msg+0x27e>
    dhcp->msg_out->options[i] = (u8_t)i; /* for debugging only, no matter if truncated */
 801520a:	68bb      	ldr	r3, [r7, #8]
 801520c:	691a      	ldr	r2, [r3, #16]
 801520e:	8afb      	ldrh	r3, [r7, #22]
 8015210:	8af9      	ldrh	r1, [r7, #22]
 8015212:	b2c9      	uxtb	r1, r1
 8015214:	4413      	add	r3, r2
 8015216:	460a      	mov	r2, r1
 8015218:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
  for (i = 0; i < DHCP_OPTIONS_LEN; i++) {
 801521c:	8afb      	ldrh	r3, [r7, #22]
 801521e:	3301      	adds	r3, #1
 8015220:	82fb      	strh	r3, [r7, #22]
 8015222:	8afb      	ldrh	r3, [r7, #22]
 8015224:	2b43      	cmp	r3, #67	; 0x43
 8015226:	d9f0      	bls.n	801520a <dhcp_create_msg+0x266>
  }
  /* Add option MESSAGE_TYPE */
  dhcp_option(dhcp, DHCP_OPTION_MESSAGE_TYPE, DHCP_OPTION_MESSAGE_TYPE_LEN);
 8015228:	2201      	movs	r2, #1
 801522a:	2135      	movs	r1, #53	; 0x35
 801522c:	68b8      	ldr	r0, [r7, #8]
 801522e:	f7ff fa4d 	bl	80146cc <dhcp_option>
  dhcp_option_byte(dhcp, message_type);
 8015232:	79fb      	ldrb	r3, [r7, #7]
 8015234:	4619      	mov	r1, r3
 8015236:	68b8      	ldr	r0, [r7, #8]
 8015238:	f7ff fa82 	bl	8014740 <dhcp_option_byte>
  return ERR_OK;
 801523c:	2300      	movs	r3, #0
}
 801523e:	4618      	mov	r0, r3
 8015240:	371c      	adds	r7, #28
 8015242:	46bd      	mov	sp, r7
 8015244:	bd90      	pop	{r4, r7, pc}
 8015246:	bf00      	nop
 8015248:	0801abc4 	.word	0x0801abc4
 801524c:	0801aef4 	.word	0x0801aef4
 8015250:	0801ac24 	.word	0x0801ac24
 8015254:	0801af14 	.word	0x0801af14
 8015258:	0801af34 	.word	0x0801af34
 801525c:	0801af5c 	.word	0x0801af5c
 8015260:	0801af84 	.word	0x0801af84
 8015264:	2000425c 	.word	0x2000425c

08015268 <dhcp_delete_msg>:
 *
 * @param dhcp the dhcp struct to free the request from
 */
static void
dhcp_delete_msg(struct dhcp *dhcp)
{
 8015268:	b580      	push	{r7, lr}
 801526a:	b082      	sub	sp, #8
 801526c:	af00      	add	r7, sp, #0
 801526e:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("dhcp_delete_msg: dhcp != NULL", (dhcp != NULL), return;);
 8015270:	687b      	ldr	r3, [r7, #4]
 8015272:	2b00      	cmp	r3, #0
 8015274:	d107      	bne.n	8015286 <dhcp_delete_msg+0x1e>
 8015276:	4b18      	ldr	r3, [pc, #96]	; (80152d8 <dhcp_delete_msg+0x70>)
 8015278:	f240 726d 	movw	r2, #1901	; 0x76d
 801527c:	4917      	ldr	r1, [pc, #92]	; (80152dc <dhcp_delete_msg+0x74>)
 801527e:	4818      	ldr	r0, [pc, #96]	; (80152e0 <dhcp_delete_msg+0x78>)
 8015280:	f003 f9e2 	bl	8018648 <iprintf>
 8015284:	e024      	b.n	80152d0 <dhcp_delete_msg+0x68>
  LWIP_ASSERT("dhcp_delete_msg: dhcp->p_out != NULL", dhcp->p_out != NULL);
 8015286:	687b      	ldr	r3, [r7, #4]
 8015288:	68db      	ldr	r3, [r3, #12]
 801528a:	2b00      	cmp	r3, #0
 801528c:	d106      	bne.n	801529c <dhcp_delete_msg+0x34>
 801528e:	4b12      	ldr	r3, [pc, #72]	; (80152d8 <dhcp_delete_msg+0x70>)
 8015290:	f240 726e 	movw	r2, #1902	; 0x76e
 8015294:	4913      	ldr	r1, [pc, #76]	; (80152e4 <dhcp_delete_msg+0x7c>)
 8015296:	4812      	ldr	r0, [pc, #72]	; (80152e0 <dhcp_delete_msg+0x78>)
 8015298:	f003 f9d6 	bl	8018648 <iprintf>
  LWIP_ASSERT("dhcp_delete_msg: dhcp->msg_out != NULL", dhcp->msg_out != NULL);
 801529c:	687b      	ldr	r3, [r7, #4]
 801529e:	691b      	ldr	r3, [r3, #16]
 80152a0:	2b00      	cmp	r3, #0
 80152a2:	d106      	bne.n	80152b2 <dhcp_delete_msg+0x4a>
 80152a4:	4b0c      	ldr	r3, [pc, #48]	; (80152d8 <dhcp_delete_msg+0x70>)
 80152a6:	f240 726f 	movw	r2, #1903	; 0x76f
 80152aa:	490f      	ldr	r1, [pc, #60]	; (80152e8 <dhcp_delete_msg+0x80>)
 80152ac:	480c      	ldr	r0, [pc, #48]	; (80152e0 <dhcp_delete_msg+0x78>)
 80152ae:	f003 f9cb 	bl	8018648 <iprintf>
  if (dhcp->p_out != NULL) {
 80152b2:	687b      	ldr	r3, [r7, #4]
 80152b4:	68db      	ldr	r3, [r3, #12]
 80152b6:	2b00      	cmp	r3, #0
 80152b8:	d004      	beq.n	80152c4 <dhcp_delete_msg+0x5c>
    pbuf_free(dhcp->p_out);
 80152ba:	687b      	ldr	r3, [r7, #4]
 80152bc:	68db      	ldr	r3, [r3, #12]
 80152be:	4618      	mov	r0, r3
 80152c0:	f7f8 f846 	bl	800d350 <pbuf_free>
  }
  dhcp->p_out = NULL;
 80152c4:	687b      	ldr	r3, [r7, #4]
 80152c6:	2200      	movs	r2, #0
 80152c8:	60da      	str	r2, [r3, #12]
  dhcp->msg_out = NULL;
 80152ca:	687b      	ldr	r3, [r7, #4]
 80152cc:	2200      	movs	r2, #0
 80152ce:	611a      	str	r2, [r3, #16]
}
 80152d0:	3708      	adds	r7, #8
 80152d2:	46bd      	mov	sp, r7
 80152d4:	bd80      	pop	{r7, pc}
 80152d6:	bf00      	nop
 80152d8:	0801abc4 	.word	0x0801abc4
 80152dc:	0801afc4 	.word	0x0801afc4
 80152e0:	0801ac24 	.word	0x0801ac24
 80152e4:	0801afe4 	.word	0x0801afe4
 80152e8:	0801b00c 	.word	0x0801b00c

080152ec <dhcp_option_trailer>:
 *
 * @param dhcp DHCP state structure
 */
static void
dhcp_option_trailer(struct dhcp *dhcp)
{
 80152ec:	b580      	push	{r7, lr}
 80152ee:	b082      	sub	sp, #8
 80152f0:	af00      	add	r7, sp, #0
 80152f2:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("dhcp_option_trailer: dhcp != NULL", (dhcp != NULL), return;);
 80152f4:	687b      	ldr	r3, [r7, #4]
 80152f6:	2b00      	cmp	r3, #0
 80152f8:	d107      	bne.n	801530a <dhcp_option_trailer+0x1e>
 80152fa:	4b24      	ldr	r3, [pc, #144]	; (801538c <dhcp_option_trailer+0xa0>)
 80152fc:	f240 7282 	movw	r2, #1922	; 0x782
 8015300:	4923      	ldr	r1, [pc, #140]	; (8015390 <dhcp_option_trailer+0xa4>)
 8015302:	4824      	ldr	r0, [pc, #144]	; (8015394 <dhcp_option_trailer+0xa8>)
 8015304:	f003 f9a0 	bl	8018648 <iprintf>
 8015308:	e03c      	b.n	8015384 <dhcp_option_trailer+0x98>
  LWIP_ASSERT("dhcp_option_trailer: dhcp->msg_out != NULL\n", dhcp->msg_out != NULL);
 801530a:	687b      	ldr	r3, [r7, #4]
 801530c:	691b      	ldr	r3, [r3, #16]
 801530e:	2b00      	cmp	r3, #0
 8015310:	d106      	bne.n	8015320 <dhcp_option_trailer+0x34>
 8015312:	4b1e      	ldr	r3, [pc, #120]	; (801538c <dhcp_option_trailer+0xa0>)
 8015314:	f240 7283 	movw	r2, #1923	; 0x783
 8015318:	491f      	ldr	r1, [pc, #124]	; (8015398 <dhcp_option_trailer+0xac>)
 801531a:	481e      	ldr	r0, [pc, #120]	; (8015394 <dhcp_option_trailer+0xa8>)
 801531c:	f003 f994 	bl	8018648 <iprintf>
  LWIP_ASSERT("dhcp_option_trailer: dhcp->options_out_len < DHCP_OPTIONS_LEN\n", dhcp->options_out_len < DHCP_OPTIONS_LEN);
 8015320:	687b      	ldr	r3, [r7, #4]
 8015322:	8a9b      	ldrh	r3, [r3, #20]
 8015324:	2b43      	cmp	r3, #67	; 0x43
 8015326:	d906      	bls.n	8015336 <dhcp_option_trailer+0x4a>
 8015328:	4b18      	ldr	r3, [pc, #96]	; (801538c <dhcp_option_trailer+0xa0>)
 801532a:	f240 7284 	movw	r2, #1924	; 0x784
 801532e:	491b      	ldr	r1, [pc, #108]	; (801539c <dhcp_option_trailer+0xb0>)
 8015330:	4818      	ldr	r0, [pc, #96]	; (8015394 <dhcp_option_trailer+0xa8>)
 8015332:	f003 f989 	bl	8018648 <iprintf>
  dhcp->msg_out->options[dhcp->options_out_len++] = DHCP_OPTION_END;
 8015336:	687b      	ldr	r3, [r7, #4]
 8015338:	691a      	ldr	r2, [r3, #16]
 801533a:	687b      	ldr	r3, [r7, #4]
 801533c:	8a9b      	ldrh	r3, [r3, #20]
 801533e:	1c59      	adds	r1, r3, #1
 8015340:	b288      	uxth	r0, r1
 8015342:	6879      	ldr	r1, [r7, #4]
 8015344:	8288      	strh	r0, [r1, #20]
 8015346:	4413      	add	r3, r2
 8015348:	22ff      	movs	r2, #255	; 0xff
 801534a:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
  /* packet is too small, or not 4 byte aligned? */
  while (((dhcp->options_out_len < DHCP_MIN_OPTIONS_LEN) || (dhcp->options_out_len & 3)) &&
 801534e:	e00b      	b.n	8015368 <dhcp_option_trailer+0x7c>
         (dhcp->options_out_len < DHCP_OPTIONS_LEN)) {
    /* add a fill/padding byte */
    dhcp->msg_out->options[dhcp->options_out_len++] = 0;
 8015350:	687b      	ldr	r3, [r7, #4]
 8015352:	691a      	ldr	r2, [r3, #16]
 8015354:	687b      	ldr	r3, [r7, #4]
 8015356:	8a9b      	ldrh	r3, [r3, #20]
 8015358:	1c59      	adds	r1, r3, #1
 801535a:	b288      	uxth	r0, r1
 801535c:	6879      	ldr	r1, [r7, #4]
 801535e:	8288      	strh	r0, [r1, #20]
 8015360:	4413      	add	r3, r2
 8015362:	2200      	movs	r2, #0
 8015364:	f883 20f0 	strb.w	r2, [r3, #240]	; 0xf0
  while (((dhcp->options_out_len < DHCP_MIN_OPTIONS_LEN) || (dhcp->options_out_len & 3)) &&
 8015368:	687b      	ldr	r3, [r7, #4]
 801536a:	8a9b      	ldrh	r3, [r3, #20]
 801536c:	2b43      	cmp	r3, #67	; 0x43
 801536e:	d905      	bls.n	801537c <dhcp_option_trailer+0x90>
 8015370:	687b      	ldr	r3, [r7, #4]
 8015372:	8a9b      	ldrh	r3, [r3, #20]
 8015374:	f003 0303 	and.w	r3, r3, #3
 8015378:	2b00      	cmp	r3, #0
 801537a:	d003      	beq.n	8015384 <dhcp_option_trailer+0x98>
         (dhcp->options_out_len < DHCP_OPTIONS_LEN)) {
 801537c:	687b      	ldr	r3, [r7, #4]
 801537e:	8a9b      	ldrh	r3, [r3, #20]
  while (((dhcp->options_out_len < DHCP_MIN_OPTIONS_LEN) || (dhcp->options_out_len & 3)) &&
 8015380:	2b43      	cmp	r3, #67	; 0x43
 8015382:	d9e5      	bls.n	8015350 <dhcp_option_trailer+0x64>
  }
}
 8015384:	3708      	adds	r7, #8
 8015386:	46bd      	mov	sp, r7
 8015388:	bd80      	pop	{r7, pc}
 801538a:	bf00      	nop
 801538c:	0801abc4 	.word	0x0801abc4
 8015390:	0801b034 	.word	0x0801b034
 8015394:	0801ac24 	.word	0x0801ac24
 8015398:	0801b058 	.word	0x0801b058
 801539c:	0801b084 	.word	0x0801b084

080153a0 <dhcp_supplied_address>:
 * @return 1 if DHCP supplied netif->ip_addr (states BOUND or RENEWING),
 *         0 otherwise
 */
u8_t
dhcp_supplied_address(const struct netif *netif)
{
 80153a0:	b480      	push	{r7}
 80153a2:	b085      	sub	sp, #20
 80153a4:	af00      	add	r7, sp, #0
 80153a6:	6078      	str	r0, [r7, #4]
  if ((netif != NULL) && (netif_dhcp_data(netif) != NULL)) {
 80153a8:	687b      	ldr	r3, [r7, #4]
 80153aa:	2b00      	cmp	r3, #0
 80153ac:	d017      	beq.n	80153de <dhcp_supplied_address+0x3e>
 80153ae:	687b      	ldr	r3, [r7, #4]
 80153b0:	6a1b      	ldr	r3, [r3, #32]
 80153b2:	2b00      	cmp	r3, #0
 80153b4:	d013      	beq.n	80153de <dhcp_supplied_address+0x3e>
    struct dhcp* dhcp = netif_dhcp_data(netif);
 80153b6:	687b      	ldr	r3, [r7, #4]
 80153b8:	6a1b      	ldr	r3, [r3, #32]
 80153ba:	60fb      	str	r3, [r7, #12]
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 80153bc:	68fb      	ldr	r3, [r7, #12]
 80153be:	7a5b      	ldrb	r3, [r3, #9]
 80153c0:	2b0a      	cmp	r3, #10
 80153c2:	d007      	beq.n	80153d4 <dhcp_supplied_address+0x34>
 80153c4:	68fb      	ldr	r3, [r7, #12]
 80153c6:	7a5b      	ldrb	r3, [r3, #9]
 80153c8:	2b05      	cmp	r3, #5
 80153ca:	d003      	beq.n	80153d4 <dhcp_supplied_address+0x34>
           (dhcp->state == DHCP_STATE_REBINDING);
 80153cc:	68fb      	ldr	r3, [r7, #12]
 80153ce:	7a5b      	ldrb	r3, [r3, #9]
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 80153d0:	2b04      	cmp	r3, #4
 80153d2:	d101      	bne.n	80153d8 <dhcp_supplied_address+0x38>
 80153d4:	2301      	movs	r3, #1
 80153d6:	e000      	b.n	80153da <dhcp_supplied_address+0x3a>
 80153d8:	2300      	movs	r3, #0
 80153da:	b2db      	uxtb	r3, r3
 80153dc:	e000      	b.n	80153e0 <dhcp_supplied_address+0x40>
  }
  return 0;
 80153de:	2300      	movs	r3, #0
}
 80153e0:	4618      	mov	r0, r3
 80153e2:	3714      	adds	r7, #20
 80153e4:	46bd      	mov	sp, r7
 80153e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80153ea:	4770      	bx	lr

080153ec <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 80153ec:	b580      	push	{r7, lr}
 80153ee:	b082      	sub	sp, #8
 80153f0:	af00      	add	r7, sp, #0
 80153f2:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 80153f4:	4915      	ldr	r1, [pc, #84]	; (801544c <etharp_free_entry+0x60>)
 80153f6:	687a      	ldr	r2, [r7, #4]
 80153f8:	4613      	mov	r3, r2
 80153fa:	005b      	lsls	r3, r3, #1
 80153fc:	4413      	add	r3, r2
 80153fe:	00db      	lsls	r3, r3, #3
 8015400:	440b      	add	r3, r1
 8015402:	681b      	ldr	r3, [r3, #0]
 8015404:	2b00      	cmp	r3, #0
 8015406:	d013      	beq.n	8015430 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 8015408:	4910      	ldr	r1, [pc, #64]	; (801544c <etharp_free_entry+0x60>)
 801540a:	687a      	ldr	r2, [r7, #4]
 801540c:	4613      	mov	r3, r2
 801540e:	005b      	lsls	r3, r3, #1
 8015410:	4413      	add	r3, r2
 8015412:	00db      	lsls	r3, r3, #3
 8015414:	440b      	add	r3, r1
 8015416:	681b      	ldr	r3, [r3, #0]
 8015418:	4618      	mov	r0, r3
 801541a:	f7f7 ff99 	bl	800d350 <pbuf_free>
    arp_table[i].q = NULL;
 801541e:	490b      	ldr	r1, [pc, #44]	; (801544c <etharp_free_entry+0x60>)
 8015420:	687a      	ldr	r2, [r7, #4]
 8015422:	4613      	mov	r3, r2
 8015424:	005b      	lsls	r3, r3, #1
 8015426:	4413      	add	r3, r2
 8015428:	00db      	lsls	r3, r3, #3
 801542a:	440b      	add	r3, r1
 801542c:	2200      	movs	r2, #0
 801542e:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 8015430:	4906      	ldr	r1, [pc, #24]	; (801544c <etharp_free_entry+0x60>)
 8015432:	687a      	ldr	r2, [r7, #4]
 8015434:	4613      	mov	r3, r2
 8015436:	005b      	lsls	r3, r3, #1
 8015438:	4413      	add	r3, r2
 801543a:	00db      	lsls	r3, r3, #3
 801543c:	440b      	add	r3, r1
 801543e:	3314      	adds	r3, #20
 8015440:	2200      	movs	r2, #0
 8015442:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 8015444:	bf00      	nop
 8015446:	3708      	adds	r7, #8
 8015448:	46bd      	mov	sp, r7
 801544a:	bd80      	pop	{r7, pc}
 801544c:	20004260 	.word	0x20004260

08015450 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 8015450:	b580      	push	{r7, lr}
 8015452:	b082      	sub	sp, #8
 8015454:	af00      	add	r7, sp, #0
  u8_t i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8015456:	2300      	movs	r3, #0
 8015458:	71fb      	strb	r3, [r7, #7]
 801545a:	e096      	b.n	801558a <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 801545c:	79fa      	ldrb	r2, [r7, #7]
 801545e:	494f      	ldr	r1, [pc, #316]	; (801559c <etharp_tmr+0x14c>)
 8015460:	4613      	mov	r3, r2
 8015462:	005b      	lsls	r3, r3, #1
 8015464:	4413      	add	r3, r2
 8015466:	00db      	lsls	r3, r3, #3
 8015468:	440b      	add	r3, r1
 801546a:	3314      	adds	r3, #20
 801546c:	781b      	ldrb	r3, [r3, #0]
 801546e:	71bb      	strb	r3, [r7, #6]
    if (state != ETHARP_STATE_EMPTY
 8015470:	79bb      	ldrb	r3, [r7, #6]
 8015472:	2b00      	cmp	r3, #0
 8015474:	f000 8086 	beq.w	8015584 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
      && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
      ) {
      arp_table[i].ctime++;
 8015478:	79fa      	ldrb	r2, [r7, #7]
 801547a:	4948      	ldr	r1, [pc, #288]	; (801559c <etharp_tmr+0x14c>)
 801547c:	4613      	mov	r3, r2
 801547e:	005b      	lsls	r3, r3, #1
 8015480:	4413      	add	r3, r2
 8015482:	00db      	lsls	r3, r3, #3
 8015484:	440b      	add	r3, r1
 8015486:	3312      	adds	r3, #18
 8015488:	881b      	ldrh	r3, [r3, #0]
 801548a:	3301      	adds	r3, #1
 801548c:	b298      	uxth	r0, r3
 801548e:	4943      	ldr	r1, [pc, #268]	; (801559c <etharp_tmr+0x14c>)
 8015490:	4613      	mov	r3, r2
 8015492:	005b      	lsls	r3, r3, #1
 8015494:	4413      	add	r3, r2
 8015496:	00db      	lsls	r3, r3, #3
 8015498:	440b      	add	r3, r1
 801549a:	3312      	adds	r3, #18
 801549c:	4602      	mov	r2, r0
 801549e:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 80154a0:	79fa      	ldrb	r2, [r7, #7]
 80154a2:	493e      	ldr	r1, [pc, #248]	; (801559c <etharp_tmr+0x14c>)
 80154a4:	4613      	mov	r3, r2
 80154a6:	005b      	lsls	r3, r3, #1
 80154a8:	4413      	add	r3, r2
 80154aa:	00db      	lsls	r3, r3, #3
 80154ac:	440b      	add	r3, r1
 80154ae:	3312      	adds	r3, #18
 80154b0:	881b      	ldrh	r3, [r3, #0]
 80154b2:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 80154b6:	d215      	bcs.n	80154e4 <etharp_tmr+0x94>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 80154b8:	79fa      	ldrb	r2, [r7, #7]
 80154ba:	4938      	ldr	r1, [pc, #224]	; (801559c <etharp_tmr+0x14c>)
 80154bc:	4613      	mov	r3, r2
 80154be:	005b      	lsls	r3, r3, #1
 80154c0:	4413      	add	r3, r2
 80154c2:	00db      	lsls	r3, r3, #3
 80154c4:	440b      	add	r3, r1
 80154c6:	3314      	adds	r3, #20
 80154c8:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 80154ca:	2b01      	cmp	r3, #1
 80154cc:	d10f      	bne.n	80154ee <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 80154ce:	79fa      	ldrb	r2, [r7, #7]
 80154d0:	4932      	ldr	r1, [pc, #200]	; (801559c <etharp_tmr+0x14c>)
 80154d2:	4613      	mov	r3, r2
 80154d4:	005b      	lsls	r3, r3, #1
 80154d6:	4413      	add	r3, r2
 80154d8:	00db      	lsls	r3, r3, #3
 80154da:	440b      	add	r3, r1
 80154dc:	3312      	adds	r3, #18
 80154de:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 80154e0:	2b04      	cmp	r3, #4
 80154e2:	d904      	bls.n	80154ee <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %"U16_F".\n",
             arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", (u16_t)i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 80154e4:	79fb      	ldrb	r3, [r7, #7]
 80154e6:	4618      	mov	r0, r3
 80154e8:	f7ff ff80 	bl	80153ec <etharp_free_entry>
 80154ec:	e04a      	b.n	8015584 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 80154ee:	79fa      	ldrb	r2, [r7, #7]
 80154f0:	492a      	ldr	r1, [pc, #168]	; (801559c <etharp_tmr+0x14c>)
 80154f2:	4613      	mov	r3, r2
 80154f4:	005b      	lsls	r3, r3, #1
 80154f6:	4413      	add	r3, r2
 80154f8:	00db      	lsls	r3, r3, #3
 80154fa:	440b      	add	r3, r1
 80154fc:	3314      	adds	r3, #20
 80154fe:	781b      	ldrb	r3, [r3, #0]
 8015500:	2b03      	cmp	r3, #3
 8015502:	d10a      	bne.n	801551a <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 8015504:	79fa      	ldrb	r2, [r7, #7]
 8015506:	4925      	ldr	r1, [pc, #148]	; (801559c <etharp_tmr+0x14c>)
 8015508:	4613      	mov	r3, r2
 801550a:	005b      	lsls	r3, r3, #1
 801550c:	4413      	add	r3, r2
 801550e:	00db      	lsls	r3, r3, #3
 8015510:	440b      	add	r3, r1
 8015512:	3314      	adds	r3, #20
 8015514:	2204      	movs	r2, #4
 8015516:	701a      	strb	r2, [r3, #0]
 8015518:	e034      	b.n	8015584 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 801551a:	79fa      	ldrb	r2, [r7, #7]
 801551c:	491f      	ldr	r1, [pc, #124]	; (801559c <etharp_tmr+0x14c>)
 801551e:	4613      	mov	r3, r2
 8015520:	005b      	lsls	r3, r3, #1
 8015522:	4413      	add	r3, r2
 8015524:	00db      	lsls	r3, r3, #3
 8015526:	440b      	add	r3, r1
 8015528:	3314      	adds	r3, #20
 801552a:	781b      	ldrb	r3, [r3, #0]
 801552c:	2b04      	cmp	r3, #4
 801552e:	d10a      	bne.n	8015546 <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 8015530:	79fa      	ldrb	r2, [r7, #7]
 8015532:	491a      	ldr	r1, [pc, #104]	; (801559c <etharp_tmr+0x14c>)
 8015534:	4613      	mov	r3, r2
 8015536:	005b      	lsls	r3, r3, #1
 8015538:	4413      	add	r3, r2
 801553a:	00db      	lsls	r3, r3, #3
 801553c:	440b      	add	r3, r1
 801553e:	3314      	adds	r3, #20
 8015540:	2202      	movs	r2, #2
 8015542:	701a      	strb	r2, [r3, #0]
 8015544:	e01e      	b.n	8015584 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8015546:	79fa      	ldrb	r2, [r7, #7]
 8015548:	4914      	ldr	r1, [pc, #80]	; (801559c <etharp_tmr+0x14c>)
 801554a:	4613      	mov	r3, r2
 801554c:	005b      	lsls	r3, r3, #1
 801554e:	4413      	add	r3, r2
 8015550:	00db      	lsls	r3, r3, #3
 8015552:	440b      	add	r3, r1
 8015554:	3314      	adds	r3, #20
 8015556:	781b      	ldrb	r3, [r3, #0]
 8015558:	2b01      	cmp	r3, #1
 801555a:	d113      	bne.n	8015584 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 801555c:	79fa      	ldrb	r2, [r7, #7]
 801555e:	490f      	ldr	r1, [pc, #60]	; (801559c <etharp_tmr+0x14c>)
 8015560:	4613      	mov	r3, r2
 8015562:	005b      	lsls	r3, r3, #1
 8015564:	4413      	add	r3, r2
 8015566:	00db      	lsls	r3, r3, #3
 8015568:	440b      	add	r3, r1
 801556a:	3308      	adds	r3, #8
 801556c:	6818      	ldr	r0, [r3, #0]
 801556e:	79fa      	ldrb	r2, [r7, #7]
 8015570:	4613      	mov	r3, r2
 8015572:	005b      	lsls	r3, r3, #1
 8015574:	4413      	add	r3, r2
 8015576:	00db      	lsls	r3, r3, #3
 8015578:	4a08      	ldr	r2, [pc, #32]	; (801559c <etharp_tmr+0x14c>)
 801557a:	4413      	add	r3, r2
 801557c:	3304      	adds	r3, #4
 801557e:	4619      	mov	r1, r3
 8015580:	f000 fe3c 	bl	80161fc <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8015584:	79fb      	ldrb	r3, [r7, #7]
 8015586:	3301      	adds	r3, #1
 8015588:	71fb      	strb	r3, [r7, #7]
 801558a:	79fb      	ldrb	r3, [r7, #7]
 801558c:	2b09      	cmp	r3, #9
 801558e:	f67f af65 	bls.w	801545c <etharp_tmr+0xc>
      }
    }
  }
}
 8015592:	bf00      	nop
 8015594:	3708      	adds	r7, #8
 8015596:	46bd      	mov	sp, r7
 8015598:	bd80      	pop	{r7, pc}
 801559a:	bf00      	nop
 801559c:	20004260 	.word	0x20004260

080155a0 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s8_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif* netif)
{
 80155a0:	b580      	push	{r7, lr}
 80155a2:	b088      	sub	sp, #32
 80155a4:	af00      	add	r7, sp, #0
 80155a6:	60f8      	str	r0, [r7, #12]
 80155a8:	460b      	mov	r3, r1
 80155aa:	607a      	str	r2, [r7, #4]
 80155ac:	72fb      	strb	r3, [r7, #11]
  s8_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 80155ae:	230a      	movs	r3, #10
 80155b0:	77fb      	strb	r3, [r7, #31]
 80155b2:	230a      	movs	r3, #10
 80155b4:	77bb      	strb	r3, [r7, #30]
  s8_t empty = ARP_TABLE_SIZE;
 80155b6:	230a      	movs	r3, #10
 80155b8:	777b      	strb	r3, [r7, #29]
  u8_t i = 0;
 80155ba:	2300      	movs	r3, #0
 80155bc:	773b      	strb	r3, [r7, #28]
  /* oldest entry with packets on queue */
  s8_t old_queue = ARP_TABLE_SIZE;
 80155be:	230a      	movs	r3, #10
 80155c0:	76fb      	strb	r3, [r7, #27]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 80155c2:	2300      	movs	r3, #0
 80155c4:	833b      	strh	r3, [r7, #24]
 80155c6:	2300      	movs	r3, #0
 80155c8:	82fb      	strh	r3, [r7, #22]
 80155ca:	2300      	movs	r3, #0
 80155cc:	82bb      	strh	r3, [r7, #20]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80155ce:	2300      	movs	r3, #0
 80155d0:	773b      	strb	r3, [r7, #28]
 80155d2:	e093      	b.n	80156fc <etharp_find_entry+0x15c>
    u8_t state = arp_table[i].state;
 80155d4:	7f3a      	ldrb	r2, [r7, #28]
 80155d6:	4990      	ldr	r1, [pc, #576]	; (8015818 <etharp_find_entry+0x278>)
 80155d8:	4613      	mov	r3, r2
 80155da:	005b      	lsls	r3, r3, #1
 80155dc:	4413      	add	r3, r2
 80155de:	00db      	lsls	r3, r3, #3
 80155e0:	440b      	add	r3, r1
 80155e2:	3314      	adds	r3, #20
 80155e4:	781b      	ldrb	r3, [r3, #0]
 80155e6:	74fb      	strb	r3, [r7, #19]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 80155e8:	f997 301d 	ldrsb.w	r3, [r7, #29]
 80155ec:	2b0a      	cmp	r3, #10
 80155ee:	d105      	bne.n	80155fc <etharp_find_entry+0x5c>
 80155f0:	7cfb      	ldrb	r3, [r7, #19]
 80155f2:	2b00      	cmp	r3, #0
 80155f4:	d102      	bne.n	80155fc <etharp_find_entry+0x5c>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %"U16_F"\n", (u16_t)i));
      /* remember first empty entry */
      empty = i;
 80155f6:	7f3b      	ldrb	r3, [r7, #28]
 80155f8:	777b      	strb	r3, [r7, #29]
 80155fa:	e07c      	b.n	80156f6 <etharp_find_entry+0x156>
    } else if (state != ETHARP_STATE_EMPTY) {
 80155fc:	7cfb      	ldrb	r3, [r7, #19]
 80155fe:	2b00      	cmp	r3, #0
 8015600:	d079      	beq.n	80156f6 <etharp_find_entry+0x156>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 8015602:	7cfb      	ldrb	r3, [r7, #19]
 8015604:	2b01      	cmp	r3, #1
 8015606:	d009      	beq.n	801561c <etharp_find_entry+0x7c>
 8015608:	7cfb      	ldrb	r3, [r7, #19]
 801560a:	2b01      	cmp	r3, #1
 801560c:	d806      	bhi.n	801561c <etharp_find_entry+0x7c>
 801560e:	4b83      	ldr	r3, [pc, #524]	; (801581c <etharp_find_entry+0x27c>)
 8015610:	f44f 7293 	mov.w	r2, #294	; 0x126
 8015614:	4982      	ldr	r1, [pc, #520]	; (8015820 <etharp_find_entry+0x280>)
 8015616:	4883      	ldr	r0, [pc, #524]	; (8015824 <etharp_find_entry+0x284>)
 8015618:	f003 f816 	bl	8018648 <iprintf>
        state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 801561c:	68fb      	ldr	r3, [r7, #12]
 801561e:	2b00      	cmp	r3, #0
 8015620:	d00f      	beq.n	8015642 <etharp_find_entry+0xa2>
 8015622:	68fb      	ldr	r3, [r7, #12]
 8015624:	6819      	ldr	r1, [r3, #0]
 8015626:	7f3a      	ldrb	r2, [r7, #28]
 8015628:	487b      	ldr	r0, [pc, #492]	; (8015818 <etharp_find_entry+0x278>)
 801562a:	4613      	mov	r3, r2
 801562c:	005b      	lsls	r3, r3, #1
 801562e:	4413      	add	r3, r2
 8015630:	00db      	lsls	r3, r3, #3
 8015632:	4403      	add	r3, r0
 8015634:	3304      	adds	r3, #4
 8015636:	681b      	ldr	r3, [r3, #0]
 8015638:	4299      	cmp	r1, r3
 801563a:	d102      	bne.n	8015642 <etharp_find_entry+0xa2>
          && ((netif == NULL) || (netif == arp_table[i].netif))
#endif /* ETHARP_TABLE_MATCH_NETIF */
        ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %"U16_F"\n", (u16_t)i));
        /* found exact IP address match, simply bail out */
        return i;
 801563c:	f997 301c 	ldrsb.w	r3, [r7, #28]
 8015640:	e0e5      	b.n	801580e <etharp_find_entry+0x26e>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 8015642:	7cfb      	ldrb	r3, [r7, #19]
 8015644:	2b01      	cmp	r3, #1
 8015646:	d13b      	bne.n	80156c0 <etharp_find_entry+0x120>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 8015648:	7f3a      	ldrb	r2, [r7, #28]
 801564a:	4973      	ldr	r1, [pc, #460]	; (8015818 <etharp_find_entry+0x278>)
 801564c:	4613      	mov	r3, r2
 801564e:	005b      	lsls	r3, r3, #1
 8015650:	4413      	add	r3, r2
 8015652:	00db      	lsls	r3, r3, #3
 8015654:	440b      	add	r3, r1
 8015656:	681b      	ldr	r3, [r3, #0]
 8015658:	2b00      	cmp	r3, #0
 801565a:	d018      	beq.n	801568e <etharp_find_entry+0xee>
          if (arp_table[i].ctime >= age_queue) {
 801565c:	7f3a      	ldrb	r2, [r7, #28]
 801565e:	496e      	ldr	r1, [pc, #440]	; (8015818 <etharp_find_entry+0x278>)
 8015660:	4613      	mov	r3, r2
 8015662:	005b      	lsls	r3, r3, #1
 8015664:	4413      	add	r3, r2
 8015666:	00db      	lsls	r3, r3, #3
 8015668:	440b      	add	r3, r1
 801566a:	3312      	adds	r3, #18
 801566c:	881b      	ldrh	r3, [r3, #0]
 801566e:	8b3a      	ldrh	r2, [r7, #24]
 8015670:	429a      	cmp	r2, r3
 8015672:	d840      	bhi.n	80156f6 <etharp_find_entry+0x156>
            old_queue = i;
 8015674:	7f3b      	ldrb	r3, [r7, #28]
 8015676:	76fb      	strb	r3, [r7, #27]
            age_queue = arp_table[i].ctime;
 8015678:	7f3a      	ldrb	r2, [r7, #28]
 801567a:	4967      	ldr	r1, [pc, #412]	; (8015818 <etharp_find_entry+0x278>)
 801567c:	4613      	mov	r3, r2
 801567e:	005b      	lsls	r3, r3, #1
 8015680:	4413      	add	r3, r2
 8015682:	00db      	lsls	r3, r3, #3
 8015684:	440b      	add	r3, r1
 8015686:	3312      	adds	r3, #18
 8015688:	881b      	ldrh	r3, [r3, #0]
 801568a:	833b      	strh	r3, [r7, #24]
 801568c:	e033      	b.n	80156f6 <etharp_find_entry+0x156>
          }
        } else
        /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 801568e:	7f3a      	ldrb	r2, [r7, #28]
 8015690:	4961      	ldr	r1, [pc, #388]	; (8015818 <etharp_find_entry+0x278>)
 8015692:	4613      	mov	r3, r2
 8015694:	005b      	lsls	r3, r3, #1
 8015696:	4413      	add	r3, r2
 8015698:	00db      	lsls	r3, r3, #3
 801569a:	440b      	add	r3, r1
 801569c:	3312      	adds	r3, #18
 801569e:	881b      	ldrh	r3, [r3, #0]
 80156a0:	8afa      	ldrh	r2, [r7, #22]
 80156a2:	429a      	cmp	r2, r3
 80156a4:	d827      	bhi.n	80156f6 <etharp_find_entry+0x156>
            old_pending = i;
 80156a6:	7f3b      	ldrb	r3, [r7, #28]
 80156a8:	77fb      	strb	r3, [r7, #31]
            age_pending = arp_table[i].ctime;
 80156aa:	7f3a      	ldrb	r2, [r7, #28]
 80156ac:	495a      	ldr	r1, [pc, #360]	; (8015818 <etharp_find_entry+0x278>)
 80156ae:	4613      	mov	r3, r2
 80156b0:	005b      	lsls	r3, r3, #1
 80156b2:	4413      	add	r3, r2
 80156b4:	00db      	lsls	r3, r3, #3
 80156b6:	440b      	add	r3, r1
 80156b8:	3312      	adds	r3, #18
 80156ba:	881b      	ldrh	r3, [r3, #0]
 80156bc:	82fb      	strh	r3, [r7, #22]
 80156be:	e01a      	b.n	80156f6 <etharp_find_entry+0x156>
          }
        }
      /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 80156c0:	7cfb      	ldrb	r3, [r7, #19]
 80156c2:	2b01      	cmp	r3, #1
 80156c4:	d917      	bls.n	80156f6 <etharp_find_entry+0x156>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 80156c6:	7f3a      	ldrb	r2, [r7, #28]
 80156c8:	4953      	ldr	r1, [pc, #332]	; (8015818 <etharp_find_entry+0x278>)
 80156ca:	4613      	mov	r3, r2
 80156cc:	005b      	lsls	r3, r3, #1
 80156ce:	4413      	add	r3, r2
 80156d0:	00db      	lsls	r3, r3, #3
 80156d2:	440b      	add	r3, r1
 80156d4:	3312      	adds	r3, #18
 80156d6:	881b      	ldrh	r3, [r3, #0]
 80156d8:	8aba      	ldrh	r2, [r7, #20]
 80156da:	429a      	cmp	r2, r3
 80156dc:	d80b      	bhi.n	80156f6 <etharp_find_entry+0x156>
            old_stable = i;
 80156de:	7f3b      	ldrb	r3, [r7, #28]
 80156e0:	77bb      	strb	r3, [r7, #30]
            age_stable = arp_table[i].ctime;
 80156e2:	7f3a      	ldrb	r2, [r7, #28]
 80156e4:	494c      	ldr	r1, [pc, #304]	; (8015818 <etharp_find_entry+0x278>)
 80156e6:	4613      	mov	r3, r2
 80156e8:	005b      	lsls	r3, r3, #1
 80156ea:	4413      	add	r3, r2
 80156ec:	00db      	lsls	r3, r3, #3
 80156ee:	440b      	add	r3, r1
 80156f0:	3312      	adds	r3, #18
 80156f2:	881b      	ldrh	r3, [r3, #0]
 80156f4:	82bb      	strh	r3, [r7, #20]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80156f6:	7f3b      	ldrb	r3, [r7, #28]
 80156f8:	3301      	adds	r3, #1
 80156fa:	773b      	strb	r3, [r7, #28]
 80156fc:	7f3b      	ldrb	r3, [r7, #28]
 80156fe:	2b09      	cmp	r3, #9
 8015700:	f67f af68 	bls.w	80155d4 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 8015704:	7afb      	ldrb	r3, [r7, #11]
 8015706:	f003 0302 	and.w	r3, r3, #2
 801570a:	2b00      	cmp	r3, #0
 801570c:	d108      	bne.n	8015720 <etharp_find_entry+0x180>
 801570e:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8015712:	2b0a      	cmp	r3, #10
 8015714:	d107      	bne.n	8015726 <etharp_find_entry+0x186>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 8015716:	7afb      	ldrb	r3, [r7, #11]
 8015718:	f003 0301 	and.w	r3, r3, #1
 801571c:	2b00      	cmp	r3, #0
 801571e:	d102      	bne.n	8015726 <etharp_find_entry+0x186>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s8_t)ERR_MEM;
 8015720:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8015724:	e073      	b.n	801580e <etharp_find_entry+0x26e>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 8015726:	f997 301d 	ldrsb.w	r3, [r7, #29]
 801572a:	2b09      	cmp	r3, #9
 801572c:	dc02      	bgt.n	8015734 <etharp_find_entry+0x194>
    i = empty;
 801572e:	7f7b      	ldrb	r3, [r7, #29]
 8015730:	773b      	strb	r3, [r7, #28]
 8015732:	e036      	b.n	80157a2 <etharp_find_entry+0x202>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %"U16_F"\n", (u16_t)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 8015734:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8015738:	2b09      	cmp	r3, #9
 801573a:	dc13      	bgt.n	8015764 <etharp_find_entry+0x1c4>
      /* recycle oldest stable*/
      i = old_stable;
 801573c:	7fbb      	ldrb	r3, [r7, #30]
 801573e:	773b      	strb	r3, [r7, #28]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %"U16_F"\n", (u16_t)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 8015740:	7f3a      	ldrb	r2, [r7, #28]
 8015742:	4935      	ldr	r1, [pc, #212]	; (8015818 <etharp_find_entry+0x278>)
 8015744:	4613      	mov	r3, r2
 8015746:	005b      	lsls	r3, r3, #1
 8015748:	4413      	add	r3, r2
 801574a:	00db      	lsls	r3, r3, #3
 801574c:	440b      	add	r3, r1
 801574e:	681b      	ldr	r3, [r3, #0]
 8015750:	2b00      	cmp	r3, #0
 8015752:	d018      	beq.n	8015786 <etharp_find_entry+0x1e6>
 8015754:	4b31      	ldr	r3, [pc, #196]	; (801581c <etharp_find_entry+0x27c>)
 8015756:	f240 126f 	movw	r2, #367	; 0x16f
 801575a:	4933      	ldr	r1, [pc, #204]	; (8015828 <etharp_find_entry+0x288>)
 801575c:	4831      	ldr	r0, [pc, #196]	; (8015824 <etharp_find_entry+0x284>)
 801575e:	f002 ff73 	bl	8018648 <iprintf>
 8015762:	e010      	b.n	8015786 <etharp_find_entry+0x1e6>
    /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 8015764:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8015768:	2b09      	cmp	r3, #9
 801576a:	dc02      	bgt.n	8015772 <etharp_find_entry+0x1d2>
      /* recycle oldest pending */
      i = old_pending;
 801576c:	7ffb      	ldrb	r3, [r7, #31]
 801576e:	773b      	strb	r3, [r7, #28]
 8015770:	e009      	b.n	8015786 <etharp_find_entry+0x1e6>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %"U16_F" (without queue)\n", (u16_t)i));
    /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 8015772:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8015776:	2b09      	cmp	r3, #9
 8015778:	dc02      	bgt.n	8015780 <etharp_find_entry+0x1e0>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 801577a:	7efb      	ldrb	r3, [r7, #27]
 801577c:	773b      	strb	r3, [r7, #28]
 801577e:	e002      	b.n	8015786 <etharp_find_entry+0x1e6>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %"U16_F", freeing packet queue %p\n", (u16_t)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s8_t)ERR_MEM;
 8015780:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8015784:	e043      	b.n	801580e <etharp_find_entry+0x26e>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8015786:	7f3b      	ldrb	r3, [r7, #28]
 8015788:	2b09      	cmp	r3, #9
 801578a:	d906      	bls.n	801579a <etharp_find_entry+0x1fa>
 801578c:	4b23      	ldr	r3, [pc, #140]	; (801581c <etharp_find_entry+0x27c>)
 801578e:	f240 1281 	movw	r2, #385	; 0x181
 8015792:	4926      	ldr	r1, [pc, #152]	; (801582c <etharp_find_entry+0x28c>)
 8015794:	4823      	ldr	r0, [pc, #140]	; (8015824 <etharp_find_entry+0x284>)
 8015796:	f002 ff57 	bl	8018648 <iprintf>
    etharp_free_entry(i);
 801579a:	7f3b      	ldrb	r3, [r7, #28]
 801579c:	4618      	mov	r0, r3
 801579e:	f7ff fe25 	bl	80153ec <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 80157a2:	7f3b      	ldrb	r3, [r7, #28]
 80157a4:	2b09      	cmp	r3, #9
 80157a6:	d906      	bls.n	80157b6 <etharp_find_entry+0x216>
 80157a8:	4b1c      	ldr	r3, [pc, #112]	; (801581c <etharp_find_entry+0x27c>)
 80157aa:	f240 1285 	movw	r2, #389	; 0x185
 80157ae:	491f      	ldr	r1, [pc, #124]	; (801582c <etharp_find_entry+0x28c>)
 80157b0:	481c      	ldr	r0, [pc, #112]	; (8015824 <etharp_find_entry+0x284>)
 80157b2:	f002 ff49 	bl	8018648 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 80157b6:	7f3a      	ldrb	r2, [r7, #28]
 80157b8:	4917      	ldr	r1, [pc, #92]	; (8015818 <etharp_find_entry+0x278>)
 80157ba:	4613      	mov	r3, r2
 80157bc:	005b      	lsls	r3, r3, #1
 80157be:	4413      	add	r3, r2
 80157c0:	00db      	lsls	r3, r3, #3
 80157c2:	440b      	add	r3, r1
 80157c4:	3314      	adds	r3, #20
 80157c6:	781b      	ldrb	r3, [r3, #0]
 80157c8:	2b00      	cmp	r3, #0
 80157ca:	d006      	beq.n	80157da <etharp_find_entry+0x23a>
 80157cc:	4b13      	ldr	r3, [pc, #76]	; (801581c <etharp_find_entry+0x27c>)
 80157ce:	f240 1287 	movw	r2, #391	; 0x187
 80157d2:	4917      	ldr	r1, [pc, #92]	; (8015830 <etharp_find_entry+0x290>)
 80157d4:	4813      	ldr	r0, [pc, #76]	; (8015824 <etharp_find_entry+0x284>)
 80157d6:	f002 ff37 	bl	8018648 <iprintf>
    arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 80157da:	68fb      	ldr	r3, [r7, #12]
 80157dc:	2b00      	cmp	r3, #0
 80157de:	d00a      	beq.n	80157f6 <etharp_find_entry+0x256>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 80157e0:	7f3a      	ldrb	r2, [r7, #28]
 80157e2:	68fb      	ldr	r3, [r7, #12]
 80157e4:	6819      	ldr	r1, [r3, #0]
 80157e6:	480c      	ldr	r0, [pc, #48]	; (8015818 <etharp_find_entry+0x278>)
 80157e8:	4613      	mov	r3, r2
 80157ea:	005b      	lsls	r3, r3, #1
 80157ec:	4413      	add	r3, r2
 80157ee:	00db      	lsls	r3, r3, #3
 80157f0:	4403      	add	r3, r0
 80157f2:	3304      	adds	r3, #4
 80157f4:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 80157f6:	7f3a      	ldrb	r2, [r7, #28]
 80157f8:	4907      	ldr	r1, [pc, #28]	; (8015818 <etharp_find_entry+0x278>)
 80157fa:	4613      	mov	r3, r2
 80157fc:	005b      	lsls	r3, r3, #1
 80157fe:	4413      	add	r3, r2
 8015800:	00db      	lsls	r3, r3, #3
 8015802:	440b      	add	r3, r1
 8015804:	3312      	adds	r3, #18
 8015806:	2200      	movs	r2, #0
 8015808:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
#endif /* ETHARP_TABLE_MATCH_NETIF*/
  return (err_t)i;
 801580a:	f997 301c 	ldrsb.w	r3, [r7, #28]
}
 801580e:	4618      	mov	r0, r3
 8015810:	3720      	adds	r7, #32
 8015812:	46bd      	mov	sp, r7
 8015814:	bd80      	pop	{r7, pc}
 8015816:	bf00      	nop
 8015818:	20004260 	.word	0x20004260
 801581c:	0801b0c4 	.word	0x0801b0c4
 8015820:	0801b0fc 	.word	0x0801b0fc
 8015824:	0801b13c 	.word	0x0801b13c
 8015828:	0801b164 	.word	0x0801b164
 801582c:	0801b17c 	.word	0x0801b17c
 8015830:	0801b190 	.word	0x0801b190

08015834 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 8015834:	b580      	push	{r7, lr}
 8015836:	b088      	sub	sp, #32
 8015838:	af02      	add	r7, sp, #8
 801583a:	60f8      	str	r0, [r7, #12]
 801583c:	60b9      	str	r1, [r7, #8]
 801583e:	607a      	str	r2, [r7, #4]
 8015840:	70fb      	strb	r3, [r7, #3]
  s8_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 8015842:	68fb      	ldr	r3, [r7, #12]
 8015844:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8015848:	2b06      	cmp	r3, #6
 801584a:	d006      	beq.n	801585a <etharp_update_arp_entry+0x26>
 801584c:	4b48      	ldr	r3, [pc, #288]	; (8015970 <etharp_update_arp_entry+0x13c>)
 801584e:	f240 12ab 	movw	r2, #427	; 0x1ab
 8015852:	4948      	ldr	r1, [pc, #288]	; (8015974 <etharp_update_arp_entry+0x140>)
 8015854:	4848      	ldr	r0, [pc, #288]	; (8015978 <etharp_update_arp_entry+0x144>)
 8015856:	f002 fef7 	bl	8018648 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
    ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
    (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
    (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 801585a:	68bb      	ldr	r3, [r7, #8]
 801585c:	2b00      	cmp	r3, #0
 801585e:	d012      	beq.n	8015886 <etharp_update_arp_entry+0x52>
 8015860:	68bb      	ldr	r3, [r7, #8]
 8015862:	681b      	ldr	r3, [r3, #0]
 8015864:	2b00      	cmp	r3, #0
 8015866:	d00e      	beq.n	8015886 <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8015868:	68bb      	ldr	r3, [r7, #8]
 801586a:	681b      	ldr	r3, [r3, #0]
 801586c:	68f9      	ldr	r1, [r7, #12]
 801586e:	4618      	mov	r0, r3
 8015870:	f001 f8fc 	bl	8016a6c <ip4_addr_isbroadcast_u32>
 8015874:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 8015876:	2b00      	cmp	r3, #0
 8015878:	d105      	bne.n	8015886 <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 801587a:	68bb      	ldr	r3, [r7, #8]
 801587c:	681b      	ldr	r3, [r3, #0]
 801587e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8015882:	2be0      	cmp	r3, #224	; 0xe0
 8015884:	d102      	bne.n	801588c <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8015886:	f06f 030f 	mvn.w	r3, #15
 801588a:	e06c      	b.n	8015966 <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 801588c:	78fb      	ldrb	r3, [r7, #3]
 801588e:	68fa      	ldr	r2, [r7, #12]
 8015890:	4619      	mov	r1, r3
 8015892:	68b8      	ldr	r0, [r7, #8]
 8015894:	f7ff fe84 	bl	80155a0 <etharp_find_entry>
 8015898:	4603      	mov	r3, r0
 801589a:	75fb      	strb	r3, [r7, #23]
  /* bail out if no entry could be found */
  if (i < 0) {
 801589c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80158a0:	2b00      	cmp	r3, #0
 80158a2:	da02      	bge.n	80158aa <etharp_update_arp_entry+0x76>
    return (err_t)i;
 80158a4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80158a8:	e05d      	b.n	8015966 <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 80158aa:	f997 2017 	ldrsb.w	r2, [r7, #23]
 80158ae:	4933      	ldr	r1, [pc, #204]	; (801597c <etharp_update_arp_entry+0x148>)
 80158b0:	4613      	mov	r3, r2
 80158b2:	005b      	lsls	r3, r3, #1
 80158b4:	4413      	add	r3, r2
 80158b6:	00db      	lsls	r3, r3, #3
 80158b8:	440b      	add	r3, r1
 80158ba:	3314      	adds	r3, #20
 80158bc:	2202      	movs	r2, #2
 80158be:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 80158c0:	f997 2017 	ldrsb.w	r2, [r7, #23]
 80158c4:	492d      	ldr	r1, [pc, #180]	; (801597c <etharp_update_arp_entry+0x148>)
 80158c6:	4613      	mov	r3, r2
 80158c8:	005b      	lsls	r3, r3, #1
 80158ca:	4413      	add	r3, r2
 80158cc:	00db      	lsls	r3, r3, #3
 80158ce:	440b      	add	r3, r1
 80158d0:	3308      	adds	r3, #8
 80158d2:	68fa      	ldr	r2, [r7, #12]
 80158d4:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", (s16_t)i));
  /* update address */
  ETHADDR32_COPY(&arp_table[i].ethaddr, ethaddr);
 80158d6:	f997 2017 	ldrsb.w	r2, [r7, #23]
 80158da:	4613      	mov	r3, r2
 80158dc:	005b      	lsls	r3, r3, #1
 80158de:	4413      	add	r3, r2
 80158e0:	00db      	lsls	r3, r3, #3
 80158e2:	3308      	adds	r3, #8
 80158e4:	4a25      	ldr	r2, [pc, #148]	; (801597c <etharp_update_arp_entry+0x148>)
 80158e6:	4413      	add	r3, r2
 80158e8:	3304      	adds	r3, #4
 80158ea:	2206      	movs	r2, #6
 80158ec:	6879      	ldr	r1, [r7, #4]
 80158ee:	4618      	mov	r0, r3
 80158f0:	f002 fdef 	bl	80184d2 <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 80158f4:	f997 2017 	ldrsb.w	r2, [r7, #23]
 80158f8:	4920      	ldr	r1, [pc, #128]	; (801597c <etharp_update_arp_entry+0x148>)
 80158fa:	4613      	mov	r3, r2
 80158fc:	005b      	lsls	r3, r3, #1
 80158fe:	4413      	add	r3, r2
 8015900:	00db      	lsls	r3, r3, #3
 8015902:	440b      	add	r3, r1
 8015904:	3312      	adds	r3, #18
 8015906:	2200      	movs	r2, #0
 8015908:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 801590a:	f997 2017 	ldrsb.w	r2, [r7, #23]
 801590e:	491b      	ldr	r1, [pc, #108]	; (801597c <etharp_update_arp_entry+0x148>)
 8015910:	4613      	mov	r3, r2
 8015912:	005b      	lsls	r3, r3, #1
 8015914:	4413      	add	r3, r2
 8015916:	00db      	lsls	r3, r3, #3
 8015918:	440b      	add	r3, r1
 801591a:	681b      	ldr	r3, [r3, #0]
 801591c:	2b00      	cmp	r3, #0
 801591e:	d021      	beq.n	8015964 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 8015920:	f997 2017 	ldrsb.w	r2, [r7, #23]
 8015924:	4915      	ldr	r1, [pc, #84]	; (801597c <etharp_update_arp_entry+0x148>)
 8015926:	4613      	mov	r3, r2
 8015928:	005b      	lsls	r3, r3, #1
 801592a:	4413      	add	r3, r2
 801592c:	00db      	lsls	r3, r3, #3
 801592e:	440b      	add	r3, r1
 8015930:	681b      	ldr	r3, [r3, #0]
 8015932:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 8015934:	f997 2017 	ldrsb.w	r2, [r7, #23]
 8015938:	4910      	ldr	r1, [pc, #64]	; (801597c <etharp_update_arp_entry+0x148>)
 801593a:	4613      	mov	r3, r2
 801593c:	005b      	lsls	r3, r3, #1
 801593e:	4413      	add	r3, r2
 8015940:	00db      	lsls	r3, r3, #3
 8015942:	440b      	add	r3, r1
 8015944:	2200      	movs	r2, #0
 8015946:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr*)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 8015948:	68fb      	ldr	r3, [r7, #12]
 801594a:	f103 0229 	add.w	r2, r3, #41	; 0x29
 801594e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8015952:	9300      	str	r3, [sp, #0]
 8015954:	687b      	ldr	r3, [r7, #4]
 8015956:	6939      	ldr	r1, [r7, #16]
 8015958:	68f8      	ldr	r0, [r7, #12]
 801595a:	f001 ff29 	bl	80177b0 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 801595e:	6938      	ldr	r0, [r7, #16]
 8015960:	f7f7 fcf6 	bl	800d350 <pbuf_free>
  }
  return ERR_OK;
 8015964:	2300      	movs	r3, #0
}
 8015966:	4618      	mov	r0, r3
 8015968:	3718      	adds	r7, #24
 801596a:	46bd      	mov	sp, r7
 801596c:	bd80      	pop	{r7, pc}
 801596e:	bf00      	nop
 8015970:	0801b0c4 	.word	0x0801b0c4
 8015974:	0801b1bc 	.word	0x0801b1bc
 8015978:	0801b13c 	.word	0x0801b13c
 801597c:	20004260 	.word	0x20004260

08015980 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 8015980:	b580      	push	{r7, lr}
 8015982:	b084      	sub	sp, #16
 8015984:	af00      	add	r7, sp, #0
 8015986:	6078      	str	r0, [r7, #4]
  u8_t i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8015988:	2300      	movs	r3, #0
 801598a:	73fb      	strb	r3, [r7, #15]
 801598c:	e01f      	b.n	80159ce <etharp_cleanup_netif+0x4e>
    u8_t state = arp_table[i].state;
 801598e:	7bfa      	ldrb	r2, [r7, #15]
 8015990:	4912      	ldr	r1, [pc, #72]	; (80159dc <etharp_cleanup_netif+0x5c>)
 8015992:	4613      	mov	r3, r2
 8015994:	005b      	lsls	r3, r3, #1
 8015996:	4413      	add	r3, r2
 8015998:	00db      	lsls	r3, r3, #3
 801599a:	440b      	add	r3, r1
 801599c:	3314      	adds	r3, #20
 801599e:	781b      	ldrb	r3, [r3, #0]
 80159a0:	73bb      	strb	r3, [r7, #14]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 80159a2:	7bbb      	ldrb	r3, [r7, #14]
 80159a4:	2b00      	cmp	r3, #0
 80159a6:	d00f      	beq.n	80159c8 <etharp_cleanup_netif+0x48>
 80159a8:	7bfa      	ldrb	r2, [r7, #15]
 80159aa:	490c      	ldr	r1, [pc, #48]	; (80159dc <etharp_cleanup_netif+0x5c>)
 80159ac:	4613      	mov	r3, r2
 80159ae:	005b      	lsls	r3, r3, #1
 80159b0:	4413      	add	r3, r2
 80159b2:	00db      	lsls	r3, r3, #3
 80159b4:	440b      	add	r3, r1
 80159b6:	3308      	adds	r3, #8
 80159b8:	681b      	ldr	r3, [r3, #0]
 80159ba:	687a      	ldr	r2, [r7, #4]
 80159bc:	429a      	cmp	r2, r3
 80159be:	d103      	bne.n	80159c8 <etharp_cleanup_netif+0x48>
      etharp_free_entry(i);
 80159c0:	7bfb      	ldrb	r3, [r7, #15]
 80159c2:	4618      	mov	r0, r3
 80159c4:	f7ff fd12 	bl	80153ec <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80159c8:	7bfb      	ldrb	r3, [r7, #15]
 80159ca:	3301      	adds	r3, #1
 80159cc:	73fb      	strb	r3, [r7, #15]
 80159ce:	7bfb      	ldrb	r3, [r7, #15]
 80159d0:	2b09      	cmp	r3, #9
 80159d2:	d9dc      	bls.n	801598e <etharp_cleanup_netif+0xe>
    }
  }
}
 80159d4:	bf00      	nop
 80159d6:	3710      	adds	r7, #16
 80159d8:	46bd      	mov	sp, r7
 80159da:	bd80      	pop	{r7, pc}
 80159dc:	20004260 	.word	0x20004260

080159e0 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 80159e0:	b5b0      	push	{r4, r5, r7, lr}
 80159e2:	b08a      	sub	sp, #40	; 0x28
 80159e4:	af04      	add	r7, sp, #16
 80159e6:	6078      	str	r0, [r7, #4]
 80159e8:	6039      	str	r1, [r7, #0]
  struct etharp_hdr *hdr;
  /* these are aligned properly, whereas the ARP header fields might not be */
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 80159ea:	683b      	ldr	r3, [r7, #0]
 80159ec:	2b00      	cmp	r3, #0
 80159ee:	d107      	bne.n	8015a00 <etharp_input+0x20>
 80159f0:	4b3f      	ldr	r3, [pc, #252]	; (8015af0 <etharp_input+0x110>)
 80159f2:	f44f 7222 	mov.w	r2, #648	; 0x288
 80159f6:	493f      	ldr	r1, [pc, #252]	; (8015af4 <etharp_input+0x114>)
 80159f8:	483f      	ldr	r0, [pc, #252]	; (8015af8 <etharp_input+0x118>)
 80159fa:	f002 fe25 	bl	8018648 <iprintf>
 80159fe:	e074      	b.n	8015aea <etharp_input+0x10a>

  hdr = (struct etharp_hdr *)p->payload;
 8015a00:	687b      	ldr	r3, [r7, #4]
 8015a02:	685b      	ldr	r3, [r3, #4]
 8015a04:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(HWTYPE_ETHERNET)) ||
 8015a06:	693b      	ldr	r3, [r7, #16]
 8015a08:	881b      	ldrh	r3, [r3, #0]
 8015a0a:	b29b      	uxth	r3, r3
 8015a0c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8015a10:	d10c      	bne.n	8015a2c <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8015a12:	693b      	ldr	r3, [r7, #16]
 8015a14:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(HWTYPE_ETHERNET)) ||
 8015a16:	2b06      	cmp	r3, #6
 8015a18:	d108      	bne.n	8015a2c <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8015a1a:	693b      	ldr	r3, [r7, #16]
 8015a1c:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8015a1e:	2b04      	cmp	r3, #4
 8015a20:	d104      	bne.n	8015a2c <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 8015a22:	693b      	ldr	r3, [r7, #16]
 8015a24:	885b      	ldrh	r3, [r3, #2]
 8015a26:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8015a28:	2b08      	cmp	r3, #8
 8015a2a:	d003      	beq.n	8015a34 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
      ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
      hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 8015a2c:	6878      	ldr	r0, [r7, #4]
 8015a2e:	f7f7 fc8f 	bl	800d350 <pbuf_free>
    return;
 8015a32:	e05a      	b.n	8015aea <etharp_input+0x10a>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr2 to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR2_COPY(&sipaddr, &hdr->sipaddr);
 8015a34:	693b      	ldr	r3, [r7, #16]
 8015a36:	330e      	adds	r3, #14
 8015a38:	681b      	ldr	r3, [r3, #0]
 8015a3a:	60fb      	str	r3, [r7, #12]
  IPADDR2_COPY(&dipaddr, &hdr->dipaddr);
 8015a3c:	693b      	ldr	r3, [r7, #16]
 8015a3e:	3318      	adds	r3, #24
 8015a40:	681b      	ldr	r3, [r3, #0]
 8015a42:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8015a44:	683b      	ldr	r3, [r7, #0]
 8015a46:	3304      	adds	r3, #4
 8015a48:	681b      	ldr	r3, [r3, #0]
 8015a4a:	2b00      	cmp	r3, #0
 8015a4c:	d102      	bne.n	8015a54 <etharp_input+0x74>
    for_us = 0;
 8015a4e:	2300      	movs	r3, #0
 8015a50:	75fb      	strb	r3, [r7, #23]
 8015a52:	e009      	b.n	8015a68 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 8015a54:	68ba      	ldr	r2, [r7, #8]
 8015a56:	683b      	ldr	r3, [r7, #0]
 8015a58:	3304      	adds	r3, #4
 8015a5a:	681b      	ldr	r3, [r3, #0]
 8015a5c:	429a      	cmp	r2, r3
 8015a5e:	bf0c      	ite	eq
 8015a60:	2301      	moveq	r3, #1
 8015a62:	2300      	movne	r3, #0
 8015a64:	b2db      	uxtb	r3, r3
 8015a66:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 8015a68:	693b      	ldr	r3, [r7, #16]
 8015a6a:	f103 0208 	add.w	r2, r3, #8
 8015a6e:	7dfb      	ldrb	r3, [r7, #23]
 8015a70:	2b00      	cmp	r3, #0
 8015a72:	d001      	beq.n	8015a78 <etharp_input+0x98>
 8015a74:	2301      	movs	r3, #1
 8015a76:	e000      	b.n	8015a7a <etharp_input+0x9a>
 8015a78:	2302      	movs	r3, #2
 8015a7a:	f107 010c 	add.w	r1, r7, #12
 8015a7e:	6838      	ldr	r0, [r7, #0]
 8015a80:	f7ff fed8 	bl	8015834 <etharp_update_arp_entry>
                   for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 8015a84:	693b      	ldr	r3, [r7, #16]
 8015a86:	88db      	ldrh	r3, [r3, #6]
 8015a88:	b29b      	uxth	r3, r3
 8015a8a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8015a8e:	d003      	beq.n	8015a98 <etharp_input+0xb8>
 8015a90:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8015a94:	d01e      	beq.n	8015ad4 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
    break;
  default:
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
    ETHARP_STATS_INC(etharp.err);
    break;
 8015a96:	e025      	b.n	8015ae4 <etharp_input+0x104>
    if (for_us) {
 8015a98:	7dfb      	ldrb	r3, [r7, #23]
 8015a9a:	2b00      	cmp	r3, #0
 8015a9c:	d021      	beq.n	8015ae2 <etharp_input+0x102>
                 (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 8015a9e:	683b      	ldr	r3, [r7, #0]
 8015aa0:	f103 0029 	add.w	r0, r3, #41	; 0x29
 8015aa4:	693b      	ldr	r3, [r7, #16]
 8015aa6:	f103 0408 	add.w	r4, r3, #8
                 (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 8015aaa:	683b      	ldr	r3, [r7, #0]
 8015aac:	f103 0529 	add.w	r5, r3, #41	; 0x29
 8015ab0:	683b      	ldr	r3, [r7, #0]
 8015ab2:	3304      	adds	r3, #4
                 &hdr->shwaddr, &sipaddr,
 8015ab4:	693a      	ldr	r2, [r7, #16]
 8015ab6:	3208      	adds	r2, #8
      etharp_raw(netif,
 8015ab8:	2102      	movs	r1, #2
 8015aba:	9103      	str	r1, [sp, #12]
 8015abc:	f107 010c 	add.w	r1, r7, #12
 8015ac0:	9102      	str	r1, [sp, #8]
 8015ac2:	9201      	str	r2, [sp, #4]
 8015ac4:	9300      	str	r3, [sp, #0]
 8015ac6:	462b      	mov	r3, r5
 8015ac8:	4622      	mov	r2, r4
 8015aca:	4601      	mov	r1, r0
 8015acc:	6838      	ldr	r0, [r7, #0]
 8015ace:	f000 fae7 	bl	80160a0 <etharp_raw>
    break;
 8015ad2:	e006      	b.n	8015ae2 <etharp_input+0x102>
    dhcp_arp_reply(netif, &sipaddr);
 8015ad4:	f107 030c 	add.w	r3, r7, #12
 8015ad8:	4619      	mov	r1, r3
 8015ada:	6838      	ldr	r0, [r7, #0]
 8015adc:	f7fe f980 	bl	8013de0 <dhcp_arp_reply>
    break;
 8015ae0:	e000      	b.n	8015ae4 <etharp_input+0x104>
    break;
 8015ae2:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 8015ae4:	6878      	ldr	r0, [r7, #4]
 8015ae6:	f7f7 fc33 	bl	800d350 <pbuf_free>
}
 8015aea:	3718      	adds	r7, #24
 8015aec:	46bd      	mov	sp, r7
 8015aee:	bdb0      	pop	{r4, r5, r7, pc}
 8015af0:	0801b0c4 	.word	0x0801b0c4
 8015af4:	0801b214 	.word	0x0801b214
 8015af8:	0801b13c 	.word	0x0801b13c

08015afc <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, u8_t arp_idx)
{
 8015afc:	b580      	push	{r7, lr}
 8015afe:	b086      	sub	sp, #24
 8015b00:	af02      	add	r7, sp, #8
 8015b02:	60f8      	str	r0, [r7, #12]
 8015b04:	60b9      	str	r1, [r7, #8]
 8015b06:	4613      	mov	r3, r2
 8015b08:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 8015b0a:	79fa      	ldrb	r2, [r7, #7]
 8015b0c:	4944      	ldr	r1, [pc, #272]	; (8015c20 <etharp_output_to_arp_index+0x124>)
 8015b0e:	4613      	mov	r3, r2
 8015b10:	005b      	lsls	r3, r3, #1
 8015b12:	4413      	add	r3, r2
 8015b14:	00db      	lsls	r3, r3, #3
 8015b16:	440b      	add	r3, r1
 8015b18:	3314      	adds	r3, #20
 8015b1a:	781b      	ldrb	r3, [r3, #0]
 8015b1c:	2b01      	cmp	r3, #1
 8015b1e:	d806      	bhi.n	8015b2e <etharp_output_to_arp_index+0x32>
 8015b20:	4b40      	ldr	r3, [pc, #256]	; (8015c24 <etharp_output_to_arp_index+0x128>)
 8015b22:	f240 22ed 	movw	r2, #749	; 0x2ed
 8015b26:	4940      	ldr	r1, [pc, #256]	; (8015c28 <etharp_output_to_arp_index+0x12c>)
 8015b28:	4840      	ldr	r0, [pc, #256]	; (8015c2c <etharp_output_to_arp_index+0x130>)
 8015b2a:	f002 fd8d 	bl	8018648 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 8015b2e:	79fa      	ldrb	r2, [r7, #7]
 8015b30:	493b      	ldr	r1, [pc, #236]	; (8015c20 <etharp_output_to_arp_index+0x124>)
 8015b32:	4613      	mov	r3, r2
 8015b34:	005b      	lsls	r3, r3, #1
 8015b36:	4413      	add	r3, r2
 8015b38:	00db      	lsls	r3, r3, #3
 8015b3a:	440b      	add	r3, r1
 8015b3c:	3314      	adds	r3, #20
 8015b3e:	781b      	ldrb	r3, [r3, #0]
 8015b40:	2b02      	cmp	r3, #2
 8015b42:	d153      	bne.n	8015bec <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 8015b44:	79fa      	ldrb	r2, [r7, #7]
 8015b46:	4936      	ldr	r1, [pc, #216]	; (8015c20 <etharp_output_to_arp_index+0x124>)
 8015b48:	4613      	mov	r3, r2
 8015b4a:	005b      	lsls	r3, r3, #1
 8015b4c:	4413      	add	r3, r2
 8015b4e:	00db      	lsls	r3, r3, #3
 8015b50:	440b      	add	r3, r1
 8015b52:	3312      	adds	r3, #18
 8015b54:	881b      	ldrh	r3, [r3, #0]
 8015b56:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 8015b5a:	d919      	bls.n	8015b90 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 8015b5c:	79fa      	ldrb	r2, [r7, #7]
 8015b5e:	4613      	mov	r3, r2
 8015b60:	005b      	lsls	r3, r3, #1
 8015b62:	4413      	add	r3, r2
 8015b64:	00db      	lsls	r3, r3, #3
 8015b66:	4a2e      	ldr	r2, [pc, #184]	; (8015c20 <etharp_output_to_arp_index+0x124>)
 8015b68:	4413      	add	r3, r2
 8015b6a:	3304      	adds	r3, #4
 8015b6c:	4619      	mov	r1, r3
 8015b6e:	68f8      	ldr	r0, [r7, #12]
 8015b70:	f000 fb44 	bl	80161fc <etharp_request>
 8015b74:	4603      	mov	r3, r0
 8015b76:	2b00      	cmp	r3, #0
 8015b78:	d138      	bne.n	8015bec <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8015b7a:	79fa      	ldrb	r2, [r7, #7]
 8015b7c:	4928      	ldr	r1, [pc, #160]	; (8015c20 <etharp_output_to_arp_index+0x124>)
 8015b7e:	4613      	mov	r3, r2
 8015b80:	005b      	lsls	r3, r3, #1
 8015b82:	4413      	add	r3, r2
 8015b84:	00db      	lsls	r3, r3, #3
 8015b86:	440b      	add	r3, r1
 8015b88:	3314      	adds	r3, #20
 8015b8a:	2203      	movs	r2, #3
 8015b8c:	701a      	strb	r2, [r3, #0]
 8015b8e:	e02d      	b.n	8015bec <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 8015b90:	79fa      	ldrb	r2, [r7, #7]
 8015b92:	4923      	ldr	r1, [pc, #140]	; (8015c20 <etharp_output_to_arp_index+0x124>)
 8015b94:	4613      	mov	r3, r2
 8015b96:	005b      	lsls	r3, r3, #1
 8015b98:	4413      	add	r3, r2
 8015b9a:	00db      	lsls	r3, r3, #3
 8015b9c:	440b      	add	r3, r1
 8015b9e:	3312      	adds	r3, #18
 8015ba0:	881b      	ldrh	r3, [r3, #0]
 8015ba2:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 8015ba6:	d321      	bcc.n	8015bec <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 8015ba8:	79fa      	ldrb	r2, [r7, #7]
 8015baa:	4613      	mov	r3, r2
 8015bac:	005b      	lsls	r3, r3, #1
 8015bae:	4413      	add	r3, r2
 8015bb0:	00db      	lsls	r3, r3, #3
 8015bb2:	4a1b      	ldr	r2, [pc, #108]	; (8015c20 <etharp_output_to_arp_index+0x124>)
 8015bb4:	4413      	add	r3, r2
 8015bb6:	1d19      	adds	r1, r3, #4
 8015bb8:	79fa      	ldrb	r2, [r7, #7]
 8015bba:	4613      	mov	r3, r2
 8015bbc:	005b      	lsls	r3, r3, #1
 8015bbe:	4413      	add	r3, r2
 8015bc0:	00db      	lsls	r3, r3, #3
 8015bc2:	3308      	adds	r3, #8
 8015bc4:	4a16      	ldr	r2, [pc, #88]	; (8015c20 <etharp_output_to_arp_index+0x124>)
 8015bc6:	4413      	add	r3, r2
 8015bc8:	3304      	adds	r3, #4
 8015bca:	461a      	mov	r2, r3
 8015bcc:	68f8      	ldr	r0, [r7, #12]
 8015bce:	f000 faf3 	bl	80161b8 <etharp_request_dst>
 8015bd2:	4603      	mov	r3, r0
 8015bd4:	2b00      	cmp	r3, #0
 8015bd6:	d109      	bne.n	8015bec <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8015bd8:	79fa      	ldrb	r2, [r7, #7]
 8015bda:	4911      	ldr	r1, [pc, #68]	; (8015c20 <etharp_output_to_arp_index+0x124>)
 8015bdc:	4613      	mov	r3, r2
 8015bde:	005b      	lsls	r3, r3, #1
 8015be0:	4413      	add	r3, r2
 8015be2:	00db      	lsls	r3, r3, #3
 8015be4:	440b      	add	r3, r1
 8015be6:	3314      	adds	r3, #20
 8015be8:	2203      	movs	r2, #3
 8015bea:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr*)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 8015bec:	68fb      	ldr	r3, [r7, #12]
 8015bee:	f103 0129 	add.w	r1, r3, #41	; 0x29
 8015bf2:	79fa      	ldrb	r2, [r7, #7]
 8015bf4:	4613      	mov	r3, r2
 8015bf6:	005b      	lsls	r3, r3, #1
 8015bf8:	4413      	add	r3, r2
 8015bfa:	00db      	lsls	r3, r3, #3
 8015bfc:	3308      	adds	r3, #8
 8015bfe:	4a08      	ldr	r2, [pc, #32]	; (8015c20 <etharp_output_to_arp_index+0x124>)
 8015c00:	4413      	add	r3, r2
 8015c02:	1d1a      	adds	r2, r3, #4
 8015c04:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8015c08:	9300      	str	r3, [sp, #0]
 8015c0a:	4613      	mov	r3, r2
 8015c0c:	460a      	mov	r2, r1
 8015c0e:	68b9      	ldr	r1, [r7, #8]
 8015c10:	68f8      	ldr	r0, [r7, #12]
 8015c12:	f001 fdcd 	bl	80177b0 <ethernet_output>
 8015c16:	4603      	mov	r3, r0
}
 8015c18:	4618      	mov	r0, r3
 8015c1a:	3710      	adds	r7, #16
 8015c1c:	46bd      	mov	sp, r7
 8015c1e:	bd80      	pop	{r7, pc}
 8015c20:	20004260 	.word	0x20004260
 8015c24:	0801b0c4 	.word	0x0801b0c4
 8015c28:	0801b234 	.word	0x0801b234
 8015c2c:	0801b13c 	.word	0x0801b13c

08015c30 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 8015c30:	b580      	push	{r7, lr}
 8015c32:	b08a      	sub	sp, #40	; 0x28
 8015c34:	af02      	add	r7, sp, #8
 8015c36:	60f8      	str	r0, [r7, #12]
 8015c38:	60b9      	str	r1, [r7, #8]
 8015c3a:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 8015c3c:	687b      	ldr	r3, [r7, #4]
 8015c3e:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT("netif != NULL", netif != NULL);
 8015c40:	68fb      	ldr	r3, [r7, #12]
 8015c42:	2b00      	cmp	r3, #0
 8015c44:	d106      	bne.n	8015c54 <etharp_output+0x24>
 8015c46:	4b69      	ldr	r3, [pc, #420]	; (8015dec <etharp_output+0x1bc>)
 8015c48:	f240 321b 	movw	r2, #795	; 0x31b
 8015c4c:	4968      	ldr	r1, [pc, #416]	; (8015df0 <etharp_output+0x1c0>)
 8015c4e:	4869      	ldr	r0, [pc, #420]	; (8015df4 <etharp_output+0x1c4>)
 8015c50:	f002 fcfa 	bl	8018648 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 8015c54:	68bb      	ldr	r3, [r7, #8]
 8015c56:	2b00      	cmp	r3, #0
 8015c58:	d106      	bne.n	8015c68 <etharp_output+0x38>
 8015c5a:	4b64      	ldr	r3, [pc, #400]	; (8015dec <etharp_output+0x1bc>)
 8015c5c:	f44f 7247 	mov.w	r2, #796	; 0x31c
 8015c60:	4965      	ldr	r1, [pc, #404]	; (8015df8 <etharp_output+0x1c8>)
 8015c62:	4864      	ldr	r0, [pc, #400]	; (8015df4 <etharp_output+0x1c4>)
 8015c64:	f002 fcf0 	bl	8018648 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 8015c68:	687b      	ldr	r3, [r7, #4]
 8015c6a:	2b00      	cmp	r3, #0
 8015c6c:	d106      	bne.n	8015c7c <etharp_output+0x4c>
 8015c6e:	4b5f      	ldr	r3, [pc, #380]	; (8015dec <etharp_output+0x1bc>)
 8015c70:	f240 321d 	movw	r2, #797	; 0x31d
 8015c74:	4961      	ldr	r1, [pc, #388]	; (8015dfc <etharp_output+0x1cc>)
 8015c76:	485f      	ldr	r0, [pc, #380]	; (8015df4 <etharp_output+0x1c4>)
 8015c78:	f002 fce6 	bl	8018648 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 8015c7c:	687b      	ldr	r3, [r7, #4]
 8015c7e:	681b      	ldr	r3, [r3, #0]
 8015c80:	68f9      	ldr	r1, [r7, #12]
 8015c82:	4618      	mov	r0, r3
 8015c84:	f000 fef2 	bl	8016a6c <ip4_addr_isbroadcast_u32>
 8015c88:	4603      	mov	r3, r0
 8015c8a:	2b00      	cmp	r3, #0
 8015c8c:	d002      	beq.n	8015c94 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 8015c8e:	4b5c      	ldr	r3, [pc, #368]	; (8015e00 <etharp_output+0x1d0>)
 8015c90:	61fb      	str	r3, [r7, #28]
 8015c92:	e09b      	b.n	8015dcc <etharp_output+0x19c>
  /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 8015c94:	687b      	ldr	r3, [r7, #4]
 8015c96:	681b      	ldr	r3, [r3, #0]
 8015c98:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8015c9c:	2be0      	cmp	r3, #224	; 0xe0
 8015c9e:	d118      	bne.n	8015cd2 <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 8015ca0:	2301      	movs	r3, #1
 8015ca2:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 8015ca4:	2300      	movs	r3, #0
 8015ca6:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 8015ca8:	235e      	movs	r3, #94	; 0x5e
 8015caa:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 8015cac:	687b      	ldr	r3, [r7, #4]
 8015cae:	3301      	adds	r3, #1
 8015cb0:	781b      	ldrb	r3, [r3, #0]
 8015cb2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8015cb6:	b2db      	uxtb	r3, r3
 8015cb8:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 8015cba:	687b      	ldr	r3, [r7, #4]
 8015cbc:	3302      	adds	r3, #2
 8015cbe:	781b      	ldrb	r3, [r3, #0]
 8015cc0:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 8015cc2:	687b      	ldr	r3, [r7, #4]
 8015cc4:	3303      	adds	r3, #3
 8015cc6:	781b      	ldrb	r3, [r3, #0]
 8015cc8:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 8015cca:	f107 0310 	add.w	r3, r7, #16
 8015cce:	61fb      	str	r3, [r7, #28]
 8015cd0:	e07c      	b.n	8015dcc <etharp_output+0x19c>
  /* unicast destination IP address? */
  } else {
    s8_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8015cd2:	687b      	ldr	r3, [r7, #4]
 8015cd4:	681a      	ldr	r2, [r3, #0]
 8015cd6:	68fb      	ldr	r3, [r7, #12]
 8015cd8:	3304      	adds	r3, #4
 8015cda:	681b      	ldr	r3, [r3, #0]
 8015cdc:	405a      	eors	r2, r3
 8015cde:	68fb      	ldr	r3, [r7, #12]
 8015ce0:	3308      	adds	r3, #8
 8015ce2:	681b      	ldr	r3, [r3, #0]
 8015ce4:	4013      	ands	r3, r2
 8015ce6:	2b00      	cmp	r3, #0
 8015ce8:	d012      	beq.n	8015d10 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 8015cea:	687b      	ldr	r3, [r7, #4]
 8015cec:	681b      	ldr	r3, [r3, #0]
 8015cee:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8015cf0:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 8015cf4:	4293      	cmp	r3, r2
 8015cf6:	d00b      	beq.n	8015d10 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 8015cf8:	68fb      	ldr	r3, [r7, #12]
 8015cfa:	330c      	adds	r3, #12
 8015cfc:	681b      	ldr	r3, [r3, #0]
 8015cfe:	2b00      	cmp	r3, #0
 8015d00:	d003      	beq.n	8015d0a <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 8015d02:	68fb      	ldr	r3, [r7, #12]
 8015d04:	330c      	adds	r3, #12
 8015d06:	61bb      	str	r3, [r7, #24]
 8015d08:	e002      	b.n	8015d10 <etharp_output+0xe0>
          /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 8015d0a:	f06f 0303 	mvn.w	r3, #3
 8015d0e:	e069      	b.n	8015de4 <etharp_output+0x1b4>
    if (netif->addr_hint != NULL) {
      /* per-pcb cached entry was given */
      u8_t etharp_cached_entry = *(netif->addr_hint);
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8015d10:	4b3c      	ldr	r3, [pc, #240]	; (8015e04 <etharp_output+0x1d4>)
 8015d12:	781b      	ldrb	r3, [r3, #0]
 8015d14:	4619      	mov	r1, r3
 8015d16:	4a3c      	ldr	r2, [pc, #240]	; (8015e08 <etharp_output+0x1d8>)
 8015d18:	460b      	mov	r3, r1
 8015d1a:	005b      	lsls	r3, r3, #1
 8015d1c:	440b      	add	r3, r1
 8015d1e:	00db      	lsls	r3, r3, #3
 8015d20:	4413      	add	r3, r2
 8015d22:	3314      	adds	r3, #20
 8015d24:	781b      	ldrb	r3, [r3, #0]
 8015d26:	2b01      	cmp	r3, #1
 8015d28:	d917      	bls.n	8015d5a <etharp_output+0x12a>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 8015d2a:	69bb      	ldr	r3, [r7, #24]
 8015d2c:	681a      	ldr	r2, [r3, #0]
 8015d2e:	4b35      	ldr	r3, [pc, #212]	; (8015e04 <etharp_output+0x1d4>)
 8015d30:	781b      	ldrb	r3, [r3, #0]
 8015d32:	4618      	mov	r0, r3
 8015d34:	4934      	ldr	r1, [pc, #208]	; (8015e08 <etharp_output+0x1d8>)
 8015d36:	4603      	mov	r3, r0
 8015d38:	005b      	lsls	r3, r3, #1
 8015d3a:	4403      	add	r3, r0
 8015d3c:	00db      	lsls	r3, r3, #3
 8015d3e:	440b      	add	r3, r1
 8015d40:	3304      	adds	r3, #4
 8015d42:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8015d44:	429a      	cmp	r2, r3
 8015d46:	d108      	bne.n	8015d5a <etharp_output+0x12a>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 8015d48:	4b2e      	ldr	r3, [pc, #184]	; (8015e04 <etharp_output+0x1d4>)
 8015d4a:	781b      	ldrb	r3, [r3, #0]
 8015d4c:	461a      	mov	r2, r3
 8015d4e:	68b9      	ldr	r1, [r7, #8]
 8015d50:	68f8      	ldr	r0, [r7, #12]
 8015d52:	f7ff fed3 	bl	8015afc <etharp_output_to_arp_index>
 8015d56:	4603      	mov	r3, r0
 8015d58:	e044      	b.n	8015de4 <etharp_output+0x1b4>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8015d5a:	2300      	movs	r3, #0
 8015d5c:	75fb      	strb	r3, [r7, #23]
 8015d5e:	e02a      	b.n	8015db6 <etharp_output+0x186>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8015d60:	f997 2017 	ldrsb.w	r2, [r7, #23]
 8015d64:	4928      	ldr	r1, [pc, #160]	; (8015e08 <etharp_output+0x1d8>)
 8015d66:	4613      	mov	r3, r2
 8015d68:	005b      	lsls	r3, r3, #1
 8015d6a:	4413      	add	r3, r2
 8015d6c:	00db      	lsls	r3, r3, #3
 8015d6e:	440b      	add	r3, r1
 8015d70:	3314      	adds	r3, #20
 8015d72:	781b      	ldrb	r3, [r3, #0]
 8015d74:	2b01      	cmp	r3, #1
 8015d76:	d918      	bls.n	8015daa <etharp_output+0x17a>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 8015d78:	69bb      	ldr	r3, [r7, #24]
 8015d7a:	6819      	ldr	r1, [r3, #0]
 8015d7c:	f997 2017 	ldrsb.w	r2, [r7, #23]
 8015d80:	4821      	ldr	r0, [pc, #132]	; (8015e08 <etharp_output+0x1d8>)
 8015d82:	4613      	mov	r3, r2
 8015d84:	005b      	lsls	r3, r3, #1
 8015d86:	4413      	add	r3, r2
 8015d88:	00db      	lsls	r3, r3, #3
 8015d8a:	4403      	add	r3, r0
 8015d8c:	3304      	adds	r3, #4
 8015d8e:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8015d90:	4299      	cmp	r1, r3
 8015d92:	d10a      	bne.n	8015daa <etharp_output+0x17a>
        /* found an existing, stable entry */
        ETHARP_SET_HINT(netif, i);
 8015d94:	7dfa      	ldrb	r2, [r7, #23]
 8015d96:	4b1b      	ldr	r3, [pc, #108]	; (8015e04 <etharp_output+0x1d4>)
 8015d98:	701a      	strb	r2, [r3, #0]
        return etharp_output_to_arp_index(netif, q, i);
 8015d9a:	7dfb      	ldrb	r3, [r7, #23]
 8015d9c:	461a      	mov	r2, r3
 8015d9e:	68b9      	ldr	r1, [r7, #8]
 8015da0:	68f8      	ldr	r0, [r7, #12]
 8015da2:	f7ff feab 	bl	8015afc <etharp_output_to_arp_index>
 8015da6:	4603      	mov	r3, r0
 8015da8:	e01c      	b.n	8015de4 <etharp_output+0x1b4>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8015daa:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8015dae:	b2db      	uxtb	r3, r3
 8015db0:	3301      	adds	r3, #1
 8015db2:	b2db      	uxtb	r3, r3
 8015db4:	75fb      	strb	r3, [r7, #23]
 8015db6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8015dba:	2b09      	cmp	r3, #9
 8015dbc:	ddd0      	ble.n	8015d60 <etharp_output+0x130>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 8015dbe:	68ba      	ldr	r2, [r7, #8]
 8015dc0:	69b9      	ldr	r1, [r7, #24]
 8015dc2:	68f8      	ldr	r0, [r7, #12]
 8015dc4:	f000 f822 	bl	8015e0c <etharp_query>
 8015dc8:	4603      	mov	r3, r0
 8015dca:	e00b      	b.n	8015de4 <etharp_output+0x1b4>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr*)(netif->hwaddr), dest, ETHTYPE_IP);
 8015dcc:	68fb      	ldr	r3, [r7, #12]
 8015dce:	f103 0229 	add.w	r2, r3, #41	; 0x29
 8015dd2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8015dd6:	9300      	str	r3, [sp, #0]
 8015dd8:	69fb      	ldr	r3, [r7, #28]
 8015dda:	68b9      	ldr	r1, [r7, #8]
 8015ddc:	68f8      	ldr	r0, [r7, #12]
 8015dde:	f001 fce7 	bl	80177b0 <ethernet_output>
 8015de2:	4603      	mov	r3, r0
}
 8015de4:	4618      	mov	r0, r3
 8015de6:	3720      	adds	r7, #32
 8015de8:	46bd      	mov	sp, r7
 8015dea:	bd80      	pop	{r7, pc}
 8015dec:	0801b0c4 	.word	0x0801b0c4
 8015df0:	0801b214 	.word	0x0801b214
 8015df4:	0801b13c 	.word	0x0801b13c
 8015df8:	0801b264 	.word	0x0801b264
 8015dfc:	0801b204 	.word	0x0801b204
 8015e00:	0801b8c8 	.word	0x0801b8c8
 8015e04:	20004350 	.word	0x20004350
 8015e08:	20004260 	.word	0x20004260

08015e0c <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 8015e0c:	b580      	push	{r7, lr}
 8015e0e:	b08c      	sub	sp, #48	; 0x30
 8015e10:	af02      	add	r7, sp, #8
 8015e12:	60f8      	str	r0, [r7, #12]
 8015e14:	60b9      	str	r1, [r7, #8]
 8015e16:	607a      	str	r2, [r7, #4]
  struct eth_addr * srcaddr = (struct eth_addr *)netif->hwaddr;
 8015e18:	68fb      	ldr	r3, [r7, #12]
 8015e1a:	3329      	adds	r3, #41	; 0x29
 8015e1c:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 8015e1e:	23ff      	movs	r3, #255	; 0xff
 8015e20:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 8015e24:	2300      	movs	r3, #0
 8015e26:	623b      	str	r3, [r7, #32]
  s8_t i; /* ARP entry index */

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8015e28:	68bb      	ldr	r3, [r7, #8]
 8015e2a:	681b      	ldr	r3, [r3, #0]
 8015e2c:	68f9      	ldr	r1, [r7, #12]
 8015e2e:	4618      	mov	r0, r3
 8015e30:	f000 fe1c 	bl	8016a6c <ip4_addr_isbroadcast_u32>
 8015e34:	4603      	mov	r3, r0
 8015e36:	2b00      	cmp	r3, #0
 8015e38:	d10c      	bne.n	8015e54 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8015e3a:	68bb      	ldr	r3, [r7, #8]
 8015e3c:	681b      	ldr	r3, [r3, #0]
 8015e3e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8015e42:	2be0      	cmp	r3, #224	; 0xe0
 8015e44:	d006      	beq.n	8015e54 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8015e46:	68bb      	ldr	r3, [r7, #8]
 8015e48:	2b00      	cmp	r3, #0
 8015e4a:	d003      	beq.n	8015e54 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 8015e4c:	68bb      	ldr	r3, [r7, #8]
 8015e4e:	681b      	ldr	r3, [r3, #0]
 8015e50:	2b00      	cmp	r3, #0
 8015e52:	d102      	bne.n	8015e5a <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8015e54:	f06f 030f 	mvn.w	r3, #15
 8015e58:	e10f      	b.n	801607a <etharp_query+0x26e>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 8015e5a:	68fa      	ldr	r2, [r7, #12]
 8015e5c:	2101      	movs	r1, #1
 8015e5e:	68b8      	ldr	r0, [r7, #8]
 8015e60:	f7ff fb9e 	bl	80155a0 <etharp_find_entry>
 8015e64:	4603      	mov	r3, r0
 8015e66:	74fb      	strb	r3, [r7, #19]

  /* could not find or create entry? */
  if (i < 0) {
 8015e68:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8015e6c:	2b00      	cmp	r3, #0
 8015e6e:	da02      	bge.n	8015e76 <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i;
 8015e70:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8015e74:	e101      	b.n	801607a <etharp_query+0x26e>
  }

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 8015e76:	f997 2013 	ldrsb.w	r2, [r7, #19]
 8015e7a:	4982      	ldr	r1, [pc, #520]	; (8016084 <etharp_query+0x278>)
 8015e7c:	4613      	mov	r3, r2
 8015e7e:	005b      	lsls	r3, r3, #1
 8015e80:	4413      	add	r3, r2
 8015e82:	00db      	lsls	r3, r3, #3
 8015e84:	440b      	add	r3, r1
 8015e86:	3314      	adds	r3, #20
 8015e88:	781b      	ldrb	r3, [r3, #0]
 8015e8a:	2b00      	cmp	r3, #0
 8015e8c:	d117      	bne.n	8015ebe <etharp_query+0xb2>
    is_new_entry = 1;
 8015e8e:	2301      	movs	r3, #1
 8015e90:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 8015e92:	f997 2013 	ldrsb.w	r2, [r7, #19]
 8015e96:	497b      	ldr	r1, [pc, #492]	; (8016084 <etharp_query+0x278>)
 8015e98:	4613      	mov	r3, r2
 8015e9a:	005b      	lsls	r3, r3, #1
 8015e9c:	4413      	add	r3, r2
 8015e9e:	00db      	lsls	r3, r3, #3
 8015ea0:	440b      	add	r3, r1
 8015ea2:	3314      	adds	r3, #20
 8015ea4:	2201      	movs	r2, #1
 8015ea6:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 8015ea8:	f997 2013 	ldrsb.w	r2, [r7, #19]
 8015eac:	4975      	ldr	r1, [pc, #468]	; (8016084 <etharp_query+0x278>)
 8015eae:	4613      	mov	r3, r2
 8015eb0:	005b      	lsls	r3, r3, #1
 8015eb2:	4413      	add	r3, r2
 8015eb4:	00db      	lsls	r3, r3, #3
 8015eb6:	440b      	add	r3, r1
 8015eb8:	3308      	adds	r3, #8
 8015eba:	68fa      	ldr	r2, [r7, #12]
 8015ebc:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 8015ebe:	f997 2013 	ldrsb.w	r2, [r7, #19]
 8015ec2:	4970      	ldr	r1, [pc, #448]	; (8016084 <etharp_query+0x278>)
 8015ec4:	4613      	mov	r3, r2
 8015ec6:	005b      	lsls	r3, r3, #1
 8015ec8:	4413      	add	r3, r2
 8015eca:	00db      	lsls	r3, r3, #3
 8015ecc:	440b      	add	r3, r1
 8015ece:	3314      	adds	r3, #20
 8015ed0:	781b      	ldrb	r3, [r3, #0]
 8015ed2:	2b01      	cmp	r3, #1
 8015ed4:	d012      	beq.n	8015efc <etharp_query+0xf0>
 8015ed6:	f997 2013 	ldrsb.w	r2, [r7, #19]
 8015eda:	496a      	ldr	r1, [pc, #424]	; (8016084 <etharp_query+0x278>)
 8015edc:	4613      	mov	r3, r2
 8015ede:	005b      	lsls	r3, r3, #1
 8015ee0:	4413      	add	r3, r2
 8015ee2:	00db      	lsls	r3, r3, #3
 8015ee4:	440b      	add	r3, r1
 8015ee6:	3314      	adds	r3, #20
 8015ee8:	781b      	ldrb	r3, [r3, #0]
 8015eea:	2b01      	cmp	r3, #1
 8015eec:	d806      	bhi.n	8015efc <etharp_query+0xf0>
 8015eee:	4b66      	ldr	r3, [pc, #408]	; (8016088 <etharp_query+0x27c>)
 8015ef0:	f240 32c9 	movw	r2, #969	; 0x3c9
 8015ef4:	4965      	ldr	r1, [pc, #404]	; (801608c <etharp_query+0x280>)
 8015ef6:	4866      	ldr	r0, [pc, #408]	; (8016090 <etharp_query+0x284>)
 8015ef8:	f002 fba6 	bl	8018648 <iprintf>
  ((arp_table[i].state == ETHARP_STATE_PENDING) ||
   (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 8015efc:	6a3b      	ldr	r3, [r7, #32]
 8015efe:	2b00      	cmp	r3, #0
 8015f00:	d102      	bne.n	8015f08 <etharp_query+0xfc>
 8015f02:	687b      	ldr	r3, [r7, #4]
 8015f04:	2b00      	cmp	r3, #0
 8015f06:	d10c      	bne.n	8015f22 <etharp_query+0x116>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 8015f08:	68b9      	ldr	r1, [r7, #8]
 8015f0a:	68f8      	ldr	r0, [r7, #12]
 8015f0c:	f000 f976 	bl	80161fc <etharp_request>
 8015f10:	4603      	mov	r3, r0
 8015f12:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 8015f16:	687b      	ldr	r3, [r7, #4]
 8015f18:	2b00      	cmp	r3, #0
 8015f1a:	d102      	bne.n	8015f22 <etharp_query+0x116>
      return result;
 8015f1c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8015f20:	e0ab      	b.n	801607a <etharp_query+0x26e>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 8015f22:	687b      	ldr	r3, [r7, #4]
 8015f24:	2b00      	cmp	r3, #0
 8015f26:	d106      	bne.n	8015f36 <etharp_query+0x12a>
 8015f28:	4b57      	ldr	r3, [pc, #348]	; (8016088 <etharp_query+0x27c>)
 8015f2a:	f240 32db 	movw	r2, #987	; 0x3db
 8015f2e:	4959      	ldr	r1, [pc, #356]	; (8016094 <etharp_query+0x288>)
 8015f30:	4857      	ldr	r0, [pc, #348]	; (8016090 <etharp_query+0x284>)
 8015f32:	f002 fb89 	bl	8018648 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 8015f36:	f997 2013 	ldrsb.w	r2, [r7, #19]
 8015f3a:	4952      	ldr	r1, [pc, #328]	; (8016084 <etharp_query+0x278>)
 8015f3c:	4613      	mov	r3, r2
 8015f3e:	005b      	lsls	r3, r3, #1
 8015f40:	4413      	add	r3, r2
 8015f42:	00db      	lsls	r3, r3, #3
 8015f44:	440b      	add	r3, r1
 8015f46:	3314      	adds	r3, #20
 8015f48:	781b      	ldrb	r3, [r3, #0]
 8015f4a:	2b01      	cmp	r3, #1
 8015f4c:	d919      	bls.n	8015f82 <etharp_query+0x176>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_HINT(netif, i);
 8015f4e:	7cfa      	ldrb	r2, [r7, #19]
 8015f50:	4b51      	ldr	r3, [pc, #324]	; (8016098 <etharp_query+0x28c>)
 8015f52:	701a      	strb	r2, [r3, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 8015f54:	f997 2013 	ldrsb.w	r2, [r7, #19]
 8015f58:	4613      	mov	r3, r2
 8015f5a:	005b      	lsls	r3, r3, #1
 8015f5c:	4413      	add	r3, r2
 8015f5e:	00db      	lsls	r3, r3, #3
 8015f60:	3308      	adds	r3, #8
 8015f62:	4a48      	ldr	r2, [pc, #288]	; (8016084 <etharp_query+0x278>)
 8015f64:	4413      	add	r3, r2
 8015f66:	1d1a      	adds	r2, r3, #4
 8015f68:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8015f6c:	9300      	str	r3, [sp, #0]
 8015f6e:	4613      	mov	r3, r2
 8015f70:	697a      	ldr	r2, [r7, #20]
 8015f72:	6879      	ldr	r1, [r7, #4]
 8015f74:	68f8      	ldr	r0, [r7, #12]
 8015f76:	f001 fc1b 	bl	80177b0 <ethernet_output>
 8015f7a:	4603      	mov	r3, r0
 8015f7c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8015f80:	e079      	b.n	8016076 <etharp_query+0x26a>
  /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8015f82:	f997 2013 	ldrsb.w	r2, [r7, #19]
 8015f86:	493f      	ldr	r1, [pc, #252]	; (8016084 <etharp_query+0x278>)
 8015f88:	4613      	mov	r3, r2
 8015f8a:	005b      	lsls	r3, r3, #1
 8015f8c:	4413      	add	r3, r2
 8015f8e:	00db      	lsls	r3, r3, #3
 8015f90:	440b      	add	r3, r1
 8015f92:	3314      	adds	r3, #20
 8015f94:	781b      	ldrb	r3, [r3, #0]
 8015f96:	2b01      	cmp	r3, #1
 8015f98:	d16d      	bne.n	8016076 <etharp_query+0x26a>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 8015f9a:	2300      	movs	r3, #0
 8015f9c:	61bb      	str	r3, [r7, #24]
    /* IF q includes a PBUF_REF, PBUF_POOL or PBUF_RAM, we have no choice but
     * to copy the whole queue into a new PBUF_RAM (see bug #11400)
     * PBUF_ROMs can be left as they are, since ROM must not get changed. */
    p = q;
 8015f9e:	687b      	ldr	r3, [r7, #4]
 8015fa0:	61fb      	str	r3, [r7, #28]
    while (p) {
 8015fa2:	e01a      	b.n	8015fda <etharp_query+0x1ce>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 8015fa4:	69fb      	ldr	r3, [r7, #28]
 8015fa6:	895a      	ldrh	r2, [r3, #10]
 8015fa8:	69fb      	ldr	r3, [r7, #28]
 8015faa:	891b      	ldrh	r3, [r3, #8]
 8015fac:	429a      	cmp	r2, r3
 8015fae:	d10a      	bne.n	8015fc6 <etharp_query+0x1ba>
 8015fb0:	69fb      	ldr	r3, [r7, #28]
 8015fb2:	681b      	ldr	r3, [r3, #0]
 8015fb4:	2b00      	cmp	r3, #0
 8015fb6:	d006      	beq.n	8015fc6 <etharp_query+0x1ba>
 8015fb8:	4b33      	ldr	r3, [pc, #204]	; (8016088 <etharp_query+0x27c>)
 8015fba:	f44f 727b 	mov.w	r2, #1004	; 0x3ec
 8015fbe:	4937      	ldr	r1, [pc, #220]	; (801609c <etharp_query+0x290>)
 8015fc0:	4833      	ldr	r0, [pc, #204]	; (8016090 <etharp_query+0x284>)
 8015fc2:	f002 fb41 	bl	8018648 <iprintf>
      if (p->type != PBUF_ROM) {
 8015fc6:	69fb      	ldr	r3, [r7, #28]
 8015fc8:	7b1b      	ldrb	r3, [r3, #12]
 8015fca:	2b01      	cmp	r3, #1
 8015fcc:	d002      	beq.n	8015fd4 <etharp_query+0x1c8>
        copy_needed = 1;
 8015fce:	2301      	movs	r3, #1
 8015fd0:	61bb      	str	r3, [r7, #24]
        break;
 8015fd2:	e005      	b.n	8015fe0 <etharp_query+0x1d4>
      }
      p = p->next;
 8015fd4:	69fb      	ldr	r3, [r7, #28]
 8015fd6:	681b      	ldr	r3, [r3, #0]
 8015fd8:	61fb      	str	r3, [r7, #28]
    while (p) {
 8015fda:	69fb      	ldr	r3, [r7, #28]
 8015fdc:	2b00      	cmp	r3, #0
 8015fde:	d1e1      	bne.n	8015fa4 <etharp_query+0x198>
    }
    if (copy_needed) {
 8015fe0:	69bb      	ldr	r3, [r7, #24]
 8015fe2:	2b00      	cmp	r3, #0
 8015fe4:	d017      	beq.n	8016016 <etharp_query+0x20a>
      /* copy the whole packet into new pbufs */
      p = pbuf_alloc(PBUF_LINK, p->tot_len, PBUF_RAM);
 8015fe6:	69fb      	ldr	r3, [r7, #28]
 8015fe8:	891b      	ldrh	r3, [r3, #8]
 8015fea:	2200      	movs	r2, #0
 8015fec:	4619      	mov	r1, r3
 8015fee:	2002      	movs	r0, #2
 8015ff0:	f7f6 fe3c 	bl	800cc6c <pbuf_alloc>
 8015ff4:	61f8      	str	r0, [r7, #28]
      if (p != NULL) {
 8015ff6:	69fb      	ldr	r3, [r7, #28]
 8015ff8:	2b00      	cmp	r3, #0
 8015ffa:	d011      	beq.n	8016020 <etharp_query+0x214>
        if (pbuf_copy(p, q) != ERR_OK) {
 8015ffc:	6879      	ldr	r1, [r7, #4]
 8015ffe:	69f8      	ldr	r0, [r7, #28]
 8016000:	f7f7 fae6 	bl	800d5d0 <pbuf_copy>
 8016004:	4603      	mov	r3, r0
 8016006:	2b00      	cmp	r3, #0
 8016008:	d00a      	beq.n	8016020 <etharp_query+0x214>
          pbuf_free(p);
 801600a:	69f8      	ldr	r0, [r7, #28]
 801600c:	f7f7 f9a0 	bl	800d350 <pbuf_free>
          p = NULL;
 8016010:	2300      	movs	r3, #0
 8016012:	61fb      	str	r3, [r7, #28]
 8016014:	e004      	b.n	8016020 <etharp_query+0x214>
        }
      }
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 8016016:	687b      	ldr	r3, [r7, #4]
 8016018:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 801601a:	69f8      	ldr	r0, [r7, #28]
 801601c:	f7f7 fa4a 	bl	800d4b4 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 8016020:	69fb      	ldr	r3, [r7, #28]
 8016022:	2b00      	cmp	r3, #0
 8016024:	d024      	beq.n	8016070 <etharp_query+0x264>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 8016026:	f997 2013 	ldrsb.w	r2, [r7, #19]
 801602a:	4916      	ldr	r1, [pc, #88]	; (8016084 <etharp_query+0x278>)
 801602c:	4613      	mov	r3, r2
 801602e:	005b      	lsls	r3, r3, #1
 8016030:	4413      	add	r3, r2
 8016032:	00db      	lsls	r3, r3, #3
 8016034:	440b      	add	r3, r1
 8016036:	681b      	ldr	r3, [r3, #0]
 8016038:	2b00      	cmp	r3, #0
 801603a:	d00b      	beq.n	8016054 <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"S16_F"\n", (void *)q, (s16_t)i));
        pbuf_free(arp_table[i].q);
 801603c:	f997 2013 	ldrsb.w	r2, [r7, #19]
 8016040:	4910      	ldr	r1, [pc, #64]	; (8016084 <etharp_query+0x278>)
 8016042:	4613      	mov	r3, r2
 8016044:	005b      	lsls	r3, r3, #1
 8016046:	4413      	add	r3, r2
 8016048:	00db      	lsls	r3, r3, #3
 801604a:	440b      	add	r3, r1
 801604c:	681b      	ldr	r3, [r3, #0]
 801604e:	4618      	mov	r0, r3
 8016050:	f7f7 f97e 	bl	800d350 <pbuf_free>
      }
      arp_table[i].q = p;
 8016054:	f997 2013 	ldrsb.w	r2, [r7, #19]
 8016058:	490a      	ldr	r1, [pc, #40]	; (8016084 <etharp_query+0x278>)
 801605a:	4613      	mov	r3, r2
 801605c:	005b      	lsls	r3, r3, #1
 801605e:	4413      	add	r3, r2
 8016060:	00db      	lsls	r3, r3, #3
 8016062:	440b      	add	r3, r1
 8016064:	69fa      	ldr	r2, [r7, #28]
 8016066:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 8016068:	2300      	movs	r3, #0
 801606a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801606e:	e002      	b.n	8016076 <etharp_query+0x26a>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"S16_F"\n", (void *)q, (s16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 8016070:	23ff      	movs	r3, #255	; 0xff
 8016072:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 8016076:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 801607a:	4618      	mov	r0, r3
 801607c:	3728      	adds	r7, #40	; 0x28
 801607e:	46bd      	mov	sp, r7
 8016080:	bd80      	pop	{r7, pc}
 8016082:	bf00      	nop
 8016084:	20004260 	.word	0x20004260
 8016088:	0801b0c4 	.word	0x0801b0c4
 801608c:	0801b270 	.word	0x0801b270
 8016090:	0801b13c 	.word	0x0801b13c
 8016094:	0801b264 	.word	0x0801b264
 8016098:	20004350 	.word	0x20004350
 801609c:	0801b298 	.word	0x0801b298

080160a0 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 80160a0:	b580      	push	{r7, lr}
 80160a2:	b08a      	sub	sp, #40	; 0x28
 80160a4:	af02      	add	r7, sp, #8
 80160a6:	60f8      	str	r0, [r7, #12]
 80160a8:	60b9      	str	r1, [r7, #8]
 80160aa:	607a      	str	r2, [r7, #4]
 80160ac:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 80160ae:	2300      	movs	r3, #0
 80160b0:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 80160b2:	68fb      	ldr	r3, [r7, #12]
 80160b4:	2b00      	cmp	r3, #0
 80160b6:	d106      	bne.n	80160c6 <etharp_raw+0x26>
 80160b8:	4b3a      	ldr	r3, [pc, #232]	; (80161a4 <etharp_raw+0x104>)
 80160ba:	f44f 628b 	mov.w	r2, #1112	; 0x458
 80160be:	493a      	ldr	r1, [pc, #232]	; (80161a8 <etharp_raw+0x108>)
 80160c0:	483a      	ldr	r0, [pc, #232]	; (80161ac <etharp_raw+0x10c>)
 80160c2:	f002 fac1 	bl	8018648 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 80160c6:	2200      	movs	r2, #0
 80160c8:	211c      	movs	r1, #28
 80160ca:	2002      	movs	r0, #2
 80160cc:	f7f6 fdce 	bl	800cc6c <pbuf_alloc>
 80160d0:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 80160d2:	69bb      	ldr	r3, [r7, #24]
 80160d4:	2b00      	cmp	r3, #0
 80160d6:	d102      	bne.n	80160de <etharp_raw+0x3e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
      ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 80160d8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80160dc:	e05d      	b.n	801619a <etharp_raw+0xfa>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 80160de:	69bb      	ldr	r3, [r7, #24]
 80160e0:	895b      	ldrh	r3, [r3, #10]
 80160e2:	2b1b      	cmp	r3, #27
 80160e4:	d806      	bhi.n	80160f4 <etharp_raw+0x54>
 80160e6:	4b2f      	ldr	r3, [pc, #188]	; (80161a4 <etharp_raw+0x104>)
 80160e8:	f240 4264 	movw	r2, #1124	; 0x464
 80160ec:	4930      	ldr	r1, [pc, #192]	; (80161b0 <etharp_raw+0x110>)
 80160ee:	482f      	ldr	r0, [pc, #188]	; (80161ac <etharp_raw+0x10c>)
 80160f0:	f002 faaa 	bl	8018648 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 80160f4:	69bb      	ldr	r3, [r7, #24]
 80160f6:	685b      	ldr	r3, [r3, #4]
 80160f8:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 80160fa:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80160fc:	4618      	mov	r0, r3
 80160fe:	f7f5 ff85 	bl	800c00c <lwip_htons>
 8016102:	4603      	mov	r3, r0
 8016104:	461a      	mov	r2, r3
 8016106:	697b      	ldr	r3, [r7, #20]
 8016108:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 801610a:	68fb      	ldr	r3, [r7, #12]
 801610c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8016110:	2b06      	cmp	r3, #6
 8016112:	d006      	beq.n	8016122 <etharp_raw+0x82>
 8016114:	4b23      	ldr	r3, [pc, #140]	; (80161a4 <etharp_raw+0x104>)
 8016116:	f240 426b 	movw	r2, #1131	; 0x46b
 801611a:	4926      	ldr	r1, [pc, #152]	; (80161b4 <etharp_raw+0x114>)
 801611c:	4823      	ldr	r0, [pc, #140]	; (80161ac <etharp_raw+0x10c>)
 801611e:	f002 fa93 	bl	8018648 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  ETHADDR16_COPY(&hdr->shwaddr, hwsrc_addr);
 8016122:	697b      	ldr	r3, [r7, #20]
 8016124:	3308      	adds	r3, #8
 8016126:	2206      	movs	r2, #6
 8016128:	6839      	ldr	r1, [r7, #0]
 801612a:	4618      	mov	r0, r3
 801612c:	f002 f9d1 	bl	80184d2 <memcpy>
  ETHADDR16_COPY(&hdr->dhwaddr, hwdst_addr);
 8016130:	697b      	ldr	r3, [r7, #20]
 8016132:	3312      	adds	r3, #18
 8016134:	2206      	movs	r2, #6
 8016136:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8016138:	4618      	mov	r0, r3
 801613a:	f002 f9ca 	bl	80184d2 <memcpy>
  /* Copy struct ip4_addr2 to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR2_COPY(&hdr->sipaddr, ipsrc_addr);
 801613e:	697b      	ldr	r3, [r7, #20]
 8016140:	330e      	adds	r3, #14
 8016142:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8016144:	6812      	ldr	r2, [r2, #0]
 8016146:	601a      	str	r2, [r3, #0]
  IPADDR2_COPY(&hdr->dipaddr, ipdst_addr);
 8016148:	697b      	ldr	r3, [r7, #20]
 801614a:	3318      	adds	r3, #24
 801614c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801614e:	6812      	ldr	r2, [r2, #0]
 8016150:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(HWTYPE_ETHERNET);
 8016152:	697b      	ldr	r3, [r7, #20]
 8016154:	2200      	movs	r2, #0
 8016156:	701a      	strb	r2, [r3, #0]
 8016158:	2200      	movs	r2, #0
 801615a:	f042 0201 	orr.w	r2, r2, #1
 801615e:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 8016160:	697b      	ldr	r3, [r7, #20]
 8016162:	2200      	movs	r2, #0
 8016164:	f042 0208 	orr.w	r2, r2, #8
 8016168:	709a      	strb	r2, [r3, #2]
 801616a:	2200      	movs	r2, #0
 801616c:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 801616e:	697b      	ldr	r3, [r7, #20]
 8016170:	2206      	movs	r2, #6
 8016172:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 8016174:	697b      	ldr	r3, [r7, #20]
 8016176:	2204      	movs	r2, #4
 8016178:	715a      	strb	r2, [r3, #5]
  if(ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 801617a:	f640 0306 	movw	r3, #2054	; 0x806
 801617e:	9300      	str	r3, [sp, #0]
 8016180:	687b      	ldr	r3, [r7, #4]
 8016182:	68ba      	ldr	r2, [r7, #8]
 8016184:	69b9      	ldr	r1, [r7, #24]
 8016186:	68f8      	ldr	r0, [r7, #12]
 8016188:	f001 fb12 	bl	80177b0 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 801618c:	69b8      	ldr	r0, [r7, #24]
 801618e:	f7f7 f8df 	bl	800d350 <pbuf_free>
  p = NULL;
 8016192:	2300      	movs	r3, #0
 8016194:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 8016196:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 801619a:	4618      	mov	r0, r3
 801619c:	3720      	adds	r7, #32
 801619e:	46bd      	mov	sp, r7
 80161a0:	bd80      	pop	{r7, pc}
 80161a2:	bf00      	nop
 80161a4:	0801b0c4 	.word	0x0801b0c4
 80161a8:	0801b214 	.word	0x0801b214
 80161ac:	0801b13c 	.word	0x0801b13c
 80161b0:	0801b2b4 	.word	0x0801b2b4
 80161b4:	0801b2e8 	.word	0x0801b2e8

080161b8 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr* hw_dst_addr)
{
 80161b8:	b580      	push	{r7, lr}
 80161ba:	b088      	sub	sp, #32
 80161bc:	af04      	add	r7, sp, #16
 80161be:	60f8      	str	r0, [r7, #12]
 80161c0:	60b9      	str	r1, [r7, #8]
 80161c2:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 80161c4:	68fb      	ldr	r3, [r7, #12]
 80161c6:	f103 0129 	add.w	r1, r3, #41	; 0x29
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 80161ca:	68fb      	ldr	r3, [r7, #12]
 80161cc:	f103 0029 	add.w	r0, r3, #41	; 0x29
 80161d0:	68fb      	ldr	r3, [r7, #12]
 80161d2:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 80161d4:	2201      	movs	r2, #1
 80161d6:	9203      	str	r2, [sp, #12]
 80161d8:	68ba      	ldr	r2, [r7, #8]
 80161da:	9202      	str	r2, [sp, #8]
 80161dc:	4a06      	ldr	r2, [pc, #24]	; (80161f8 <etharp_request_dst+0x40>)
 80161de:	9201      	str	r2, [sp, #4]
 80161e0:	9300      	str	r3, [sp, #0]
 80161e2:	4603      	mov	r3, r0
 80161e4:	687a      	ldr	r2, [r7, #4]
 80161e6:	68f8      	ldr	r0, [r7, #12]
 80161e8:	f7ff ff5a 	bl	80160a0 <etharp_raw>
 80161ec:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 80161ee:	4618      	mov	r0, r3
 80161f0:	3710      	adds	r7, #16
 80161f2:	46bd      	mov	sp, r7
 80161f4:	bd80      	pop	{r7, pc}
 80161f6:	bf00      	nop
 80161f8:	0801b8d0 	.word	0x0801b8d0

080161fc <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 80161fc:	b580      	push	{r7, lr}
 80161fe:	b082      	sub	sp, #8
 8016200:	af00      	add	r7, sp, #0
 8016202:	6078      	str	r0, [r7, #4]
 8016204:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 8016206:	4a05      	ldr	r2, [pc, #20]	; (801621c <etharp_request+0x20>)
 8016208:	6839      	ldr	r1, [r7, #0]
 801620a:	6878      	ldr	r0, [r7, #4]
 801620c:	f7ff ffd4 	bl	80161b8 <etharp_request_dst>
 8016210:	4603      	mov	r3, r0
}
 8016212:	4618      	mov	r0, r3
 8016214:	3708      	adds	r7, #8
 8016216:	46bd      	mov	sp, r7
 8016218:	bd80      	pop	{r7, pc}
 801621a:	bf00      	nop
 801621c:	0801b8c8 	.word	0x0801b8c8

08016220 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 8016220:	b580      	push	{r7, lr}
 8016222:	b08e      	sub	sp, #56	; 0x38
 8016224:	af04      	add	r7, sp, #16
 8016226:	6078      	str	r0, [r7, #4]
 8016228:	6039      	str	r1, [r7, #0]
  const ip4_addr_t* src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 801622a:	4b7a      	ldr	r3, [pc, #488]	; (8016414 <icmp_input+0x1f4>)
 801622c:	689b      	ldr	r3, [r3, #8]
 801622e:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL(iphdr_in) * 4;
 8016230:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016232:	781b      	ldrb	r3, [r3, #0]
 8016234:	b29b      	uxth	r3, r3
 8016236:	f003 030f 	and.w	r3, r3, #15
 801623a:	b29b      	uxth	r3, r3
 801623c:	009b      	lsls	r3, r3, #2
 801623e:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 8016240:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8016242:	2b13      	cmp	r3, #19
 8016244:	f240 80d1 	bls.w	80163ea <icmp_input+0x1ca>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t)*2) {
 8016248:	687b      	ldr	r3, [r7, #4]
 801624a:	895b      	ldrh	r3, [r3, #10]
 801624c:	2b03      	cmp	r3, #3
 801624e:	f240 80ce 	bls.w	80163ee <icmp_input+0x1ce>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 8016252:	687b      	ldr	r3, [r7, #4]
 8016254:	685b      	ldr	r3, [r3, #4]
 8016256:	781b      	ldrb	r3, [r3, #0]
 8016258:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload)+1);
#endif /* LWIP_DEBUG */
  switch (type) {
 801625c:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8016260:	2b00      	cmp	r3, #0
 8016262:	f000 80bb 	beq.w	80163dc <icmp_input+0x1bc>
 8016266:	2b08      	cmp	r3, #8
 8016268:	f040 80bb 	bne.w	80163e2 <icmp_input+0x1c2>
       (as obviously, an echo request has been sent, too). */
    MIB2_STATS_INC(mib2.icmpinechoreps);
    break;
  case ICMP_ECHO:
    MIB2_STATS_INC(mib2.icmpinechos);
    src = ip4_current_dest_addr();
 801626c:	4b6a      	ldr	r3, [pc, #424]	; (8016418 <icmp_input+0x1f8>)
 801626e:	61fb      	str	r3, [r7, #28]
    /* multicast destination address? */
    if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8016270:	4b68      	ldr	r3, [pc, #416]	; (8016414 <icmp_input+0x1f4>)
 8016272:	695b      	ldr	r3, [r3, #20]
 8016274:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8016278:	2be0      	cmp	r3, #224	; 0xe0
 801627a:	f000 80bf 	beq.w	80163fc <icmp_input+0x1dc>
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
      goto icmperr;
#endif /* LWIP_MULTICAST_PING */
    }
    /* broadcast destination address? */
    if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 801627e:	4b65      	ldr	r3, [pc, #404]	; (8016414 <icmp_input+0x1f4>)
 8016280:	695a      	ldr	r2, [r3, #20]
 8016282:	4b64      	ldr	r3, [pc, #400]	; (8016414 <icmp_input+0x1f4>)
 8016284:	681b      	ldr	r3, [r3, #0]
 8016286:	4619      	mov	r1, r3
 8016288:	4610      	mov	r0, r2
 801628a:	f000 fbef 	bl	8016a6c <ip4_addr_isbroadcast_u32>
 801628e:	4603      	mov	r3, r0
 8016290:	2b00      	cmp	r3, #0
 8016292:	f040 80b5 	bne.w	8016400 <icmp_input+0x1e0>
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
      goto icmperr;
#endif /* LWIP_BROADCAST_PING */
    }
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
    if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 8016296:	687b      	ldr	r3, [r7, #4]
 8016298:	891b      	ldrh	r3, [r3, #8]
 801629a:	2b07      	cmp	r3, #7
 801629c:	f240 80a9 	bls.w	80163f2 <icmp_input+0x1d2>
        return;
      }
    }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
    if (pbuf_header(p, (s16_t)(hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN))) {
 80162a0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80162a2:	330e      	adds	r3, #14
 80162a4:	b29b      	uxth	r3, r3
 80162a6:	b21b      	sxth	r3, r3
 80162a8:	4619      	mov	r1, r3
 80162aa:	6878      	ldr	r0, [r7, #4]
 80162ac:	f7f7 f82c 	bl	800d308 <pbuf_header>
 80162b0:	4603      	mov	r3, r0
 80162b2:	2b00      	cmp	r3, #0
 80162b4:	d046      	beq.n	8016344 <icmp_input+0x124>
      /* p is not big enough to contain link headers
       * allocate a new one and copy p into it
       */
      struct pbuf *r;
      /* allocate new packet buffer with space for link headers */
      r = pbuf_alloc(PBUF_LINK, p->tot_len + hlen, PBUF_RAM);
 80162b6:	687b      	ldr	r3, [r7, #4]
 80162b8:	891a      	ldrh	r2, [r3, #8]
 80162ba:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80162bc:	4413      	add	r3, r2
 80162be:	b29b      	uxth	r3, r3
 80162c0:	2200      	movs	r2, #0
 80162c2:	4619      	mov	r1, r3
 80162c4:	2002      	movs	r0, #2
 80162c6:	f7f6 fcd1 	bl	800cc6c <pbuf_alloc>
 80162ca:	61b8      	str	r0, [r7, #24]
      if (r == NULL) {
 80162cc:	69bb      	ldr	r3, [r7, #24]
 80162ce:	2b00      	cmp	r3, #0
 80162d0:	f000 8098 	beq.w	8016404 <icmp_input+0x1e4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
        goto icmperr;
      }
      if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 80162d4:	69bb      	ldr	r3, [r7, #24]
 80162d6:	895b      	ldrh	r3, [r3, #10]
 80162d8:	461a      	mov	r2, r3
 80162da:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80162dc:	3308      	adds	r3, #8
 80162de:	429a      	cmp	r2, r3
 80162e0:	d203      	bcs.n	80162ea <icmp_input+0xca>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
        pbuf_free(r);
 80162e2:	69b8      	ldr	r0, [r7, #24]
 80162e4:	f7f7 f834 	bl	800d350 <pbuf_free>
        goto icmperr;
 80162e8:	e08d      	b.n	8016406 <icmp_input+0x1e6>
      }
      /* copy the ip header */
      MEMCPY(r->payload, iphdr_in, hlen);
 80162ea:	69bb      	ldr	r3, [r7, #24]
 80162ec:	685b      	ldr	r3, [r3, #4]
 80162ee:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 80162f0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80162f2:	4618      	mov	r0, r3
 80162f4:	f002 f8ed 	bl	80184d2 <memcpy>
      /* switch r->payload back to icmp header (cannot fail) */
      if (pbuf_header(r, (s16_t)-hlen)) {
 80162f8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80162fa:	425b      	negs	r3, r3
 80162fc:	b29b      	uxth	r3, r3
 80162fe:	b21b      	sxth	r3, r3
 8016300:	4619      	mov	r1, r3
 8016302:	69b8      	ldr	r0, [r7, #24]
 8016304:	f7f7 f800 	bl	800d308 <pbuf_header>
 8016308:	4603      	mov	r3, r0
 801630a:	2b00      	cmp	r3, #0
 801630c:	d009      	beq.n	8016322 <icmp_input+0x102>
        LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 801630e:	4b43      	ldr	r3, [pc, #268]	; (801641c <icmp_input+0x1fc>)
 8016310:	22af      	movs	r2, #175	; 0xaf
 8016312:	4943      	ldr	r1, [pc, #268]	; (8016420 <icmp_input+0x200>)
 8016314:	4843      	ldr	r0, [pc, #268]	; (8016424 <icmp_input+0x204>)
 8016316:	f002 f997 	bl	8018648 <iprintf>
        pbuf_free(r);
 801631a:	69b8      	ldr	r0, [r7, #24]
 801631c:	f7f7 f818 	bl	800d350 <pbuf_free>
        goto icmperr;
 8016320:	e071      	b.n	8016406 <icmp_input+0x1e6>
      }
      /* copy the rest of the packet without ip header */
      if (pbuf_copy(r, p) != ERR_OK) {
 8016322:	6879      	ldr	r1, [r7, #4]
 8016324:	69b8      	ldr	r0, [r7, #24]
 8016326:	f7f7 f953 	bl	800d5d0 <pbuf_copy>
 801632a:	4603      	mov	r3, r0
 801632c:	2b00      	cmp	r3, #0
 801632e:	d003      	beq.n	8016338 <icmp_input+0x118>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
        pbuf_free(r);
 8016330:	69b8      	ldr	r0, [r7, #24]
 8016332:	f7f7 f80d 	bl	800d350 <pbuf_free>
        goto icmperr;
 8016336:	e066      	b.n	8016406 <icmp_input+0x1e6>
      }
      /* free the original p */
      pbuf_free(p);
 8016338:	6878      	ldr	r0, [r7, #4]
 801633a:	f7f7 f809 	bl	800d350 <pbuf_free>
      /* we now have an identical copy of p that has room for link headers */
      p = r;
 801633e:	69bb      	ldr	r3, [r7, #24]
 8016340:	607b      	str	r3, [r7, #4]
 8016342:	e015      	b.n	8016370 <icmp_input+0x150>
    } else {
      /* restore p->payload to point to icmp header (cannot fail) */
      if (pbuf_header(p, -(s16_t)(hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN))) {
 8016344:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8016346:	f1c3 23ff 	rsb	r3, r3, #4278255360	; 0xff00ff00
 801634a:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
 801634e:	33f2      	adds	r3, #242	; 0xf2
 8016350:	b29b      	uxth	r3, r3
 8016352:	b21b      	sxth	r3, r3
 8016354:	4619      	mov	r1, r3
 8016356:	6878      	ldr	r0, [r7, #4]
 8016358:	f7f6 ffd6 	bl	800d308 <pbuf_header>
 801635c:	4603      	mov	r3, r0
 801635e:	2b00      	cmp	r3, #0
 8016360:	d006      	beq.n	8016370 <icmp_input+0x150>
        LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 8016362:	4b2e      	ldr	r3, [pc, #184]	; (801641c <icmp_input+0x1fc>)
 8016364:	22c0      	movs	r2, #192	; 0xc0
 8016366:	4930      	ldr	r1, [pc, #192]	; (8016428 <icmp_input+0x208>)
 8016368:	482e      	ldr	r0, [pc, #184]	; (8016424 <icmp_input+0x204>)
 801636a:	f002 f96d 	bl	8018648 <iprintf>
        goto icmperr;
 801636e:	e04a      	b.n	8016406 <icmp_input+0x1e6>
    }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
    /* At this point, all checks are OK. */
    /* We generate an answer by switching the dest and src ip addresses,
     * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
    iecho = (struct icmp_echo_hdr *)p->payload;
 8016370:	687b      	ldr	r3, [r7, #4]
 8016372:	685b      	ldr	r3, [r3, #4]
 8016374:	617b      	str	r3, [r7, #20]
    if (pbuf_header(p, (s16_t)hlen)) {
 8016376:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 801637a:	4619      	mov	r1, r3
 801637c:	6878      	ldr	r0, [r7, #4]
 801637e:	f7f6 ffc3 	bl	800d308 <pbuf_header>
 8016382:	4603      	mov	r3, r0
 8016384:	2b00      	cmp	r3, #0
 8016386:	d12b      	bne.n	80163e0 <icmp_input+0x1c0>
      LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
    } else {
      err_t ret;
      struct ip_hdr *iphdr = (struct ip_hdr*)p->payload;
 8016388:	687b      	ldr	r3, [r7, #4]
 801638a:	685b      	ldr	r3, [r3, #4]
 801638c:	613b      	str	r3, [r7, #16]
      ip4_addr_copy(iphdr->src, *src);
 801638e:	69fb      	ldr	r3, [r7, #28]
 8016390:	681a      	ldr	r2, [r3, #0]
 8016392:	693b      	ldr	r3, [r7, #16]
 8016394:	60da      	str	r2, [r3, #12]
      ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 8016396:	4b1f      	ldr	r3, [pc, #124]	; (8016414 <icmp_input+0x1f4>)
 8016398:	691a      	ldr	r2, [r3, #16]
 801639a:	693b      	ldr	r3, [r7, #16]
 801639c:	611a      	str	r2, [r3, #16]
      ICMPH_TYPE_SET(iecho, ICMP_ER);
 801639e:	697b      	ldr	r3, [r7, #20]
 80163a0:	2200      	movs	r2, #0
 80163a2:	701a      	strb	r2, [r3, #0]
      else {
        iecho->chksum = 0;
      }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
      iecho->chksum = 0;
 80163a4:	697b      	ldr	r3, [r7, #20]
 80163a6:	2200      	movs	r2, #0
 80163a8:	709a      	strb	r2, [r3, #2]
 80163aa:	2200      	movs	r2, #0
 80163ac:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

      /* Set the correct TTL and recalculate the header checksum. */
      IPH_TTL_SET(iphdr, ICMP_TTL);
 80163ae:	693b      	ldr	r3, [r7, #16]
 80163b0:	22ff      	movs	r2, #255	; 0xff
 80163b2:	721a      	strb	r2, [r3, #8]
      IPH_CHKSUM_SET(iphdr, 0);
 80163b4:	693b      	ldr	r3, [r7, #16]
 80163b6:	2200      	movs	r2, #0
 80163b8:	729a      	strb	r2, [r3, #10]
 80163ba:	2200      	movs	r2, #0
 80163bc:	72da      	strb	r2, [r3, #11]
      MIB2_STATS_INC(mib2.icmpoutmsgs);
      /* increase number of echo replies attempted to send */
      MIB2_STATS_INC(mib2.icmpoutechoreps);

      /* send an ICMP packet */
      ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 80163be:	683b      	ldr	r3, [r7, #0]
 80163c0:	9302      	str	r3, [sp, #8]
 80163c2:	2301      	movs	r3, #1
 80163c4:	9301      	str	r3, [sp, #4]
 80163c6:	2300      	movs	r3, #0
 80163c8:	9300      	str	r3, [sp, #0]
 80163ca:	23ff      	movs	r3, #255	; 0xff
 80163cc:	2200      	movs	r2, #0
 80163ce:	69f9      	ldr	r1, [r7, #28]
 80163d0:	6878      	ldr	r0, [r7, #4]
 80163d2:	f000 fa79 	bl	80168c8 <ip4_output_if>
 80163d6:	4603      	mov	r3, r0
 80163d8:	73fb      	strb	r3, [r7, #15]
                   ICMP_TTL, 0, IP_PROTO_ICMP, inp);
      if (ret != ERR_OK) {
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
      }
    }
    break;
 80163da:	e001      	b.n	80163e0 <icmp_input+0x1c0>
    break;
 80163dc:	bf00      	nop
 80163de:	e000      	b.n	80163e2 <icmp_input+0x1c2>
    break;
 80163e0:	bf00      	nop
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                (s16_t)type, (s16_t)code));
    ICMP_STATS_INC(icmp.proterr);
    ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 80163e2:	6878      	ldr	r0, [r7, #4]
 80163e4:	f7f6 ffb4 	bl	800d350 <pbuf_free>
  return;
 80163e8:	e011      	b.n	801640e <icmp_input+0x1ee>
    goto lenerr;
 80163ea:	bf00      	nop
 80163ec:	e002      	b.n	80163f4 <icmp_input+0x1d4>
    goto lenerr;
 80163ee:	bf00      	nop
 80163f0:	e000      	b.n	80163f4 <icmp_input+0x1d4>
      goto lenerr;
 80163f2:	bf00      	nop
lenerr:
  pbuf_free(p);
 80163f4:	6878      	ldr	r0, [r7, #4]
 80163f6:	f7f6 ffab 	bl	800d350 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 80163fa:	e008      	b.n	801640e <icmp_input+0x1ee>
      goto icmperr;
 80163fc:	bf00      	nop
 80163fe:	e002      	b.n	8016406 <icmp_input+0x1e6>
      goto icmperr;
 8016400:	bf00      	nop
 8016402:	e000      	b.n	8016406 <icmp_input+0x1e6>
        goto icmperr;
 8016404:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 8016406:	6878      	ldr	r0, [r7, #4]
 8016408:	f7f6 ffa2 	bl	800d350 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 801640c:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 801640e:	3728      	adds	r7, #40	; 0x28
 8016410:	46bd      	mov	sp, r7
 8016412:	bd80      	pop	{r7, pc}
 8016414:	20007504 	.word	0x20007504
 8016418:	20007518 	.word	0x20007518
 801641c:	0801b32c 	.word	0x0801b32c
 8016420:	0801b364 	.word	0x0801b364
 8016424:	0801b39c 	.word	0x0801b39c
 8016428:	0801b3c4 	.word	0x0801b3c4

0801642c <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 801642c:	b580      	push	{r7, lr}
 801642e:	b082      	sub	sp, #8
 8016430:	af00      	add	r7, sp, #0
 8016432:	6078      	str	r0, [r7, #4]
 8016434:	460b      	mov	r3, r1
 8016436:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 8016438:	78fb      	ldrb	r3, [r7, #3]
 801643a:	461a      	mov	r2, r3
 801643c:	2103      	movs	r1, #3
 801643e:	6878      	ldr	r0, [r7, #4]
 8016440:	f000 f814 	bl	801646c <icmp_send_response>
}
 8016444:	bf00      	nop
 8016446:	3708      	adds	r7, #8
 8016448:	46bd      	mov	sp, r7
 801644a:	bd80      	pop	{r7, pc}

0801644c <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 801644c:	b580      	push	{r7, lr}
 801644e:	b082      	sub	sp, #8
 8016450:	af00      	add	r7, sp, #0
 8016452:	6078      	str	r0, [r7, #4]
 8016454:	460b      	mov	r3, r1
 8016456:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 8016458:	78fb      	ldrb	r3, [r7, #3]
 801645a:	461a      	mov	r2, r3
 801645c:	210b      	movs	r1, #11
 801645e:	6878      	ldr	r0, [r7, #4]
 8016460:	f000 f804 	bl	801646c <icmp_send_response>
}
 8016464:	bf00      	nop
 8016466:	3708      	adds	r7, #8
 8016468:	46bd      	mov	sp, r7
 801646a:	bd80      	pop	{r7, pc}

0801646c <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 801646c:	b580      	push	{r7, lr}
 801646e:	b08c      	sub	sp, #48	; 0x30
 8016470:	af04      	add	r7, sp, #16
 8016472:	6078      	str	r0, [r7, #4]
 8016474:	460b      	mov	r3, r1
 8016476:	70fb      	strb	r3, [r7, #3]
 8016478:	4613      	mov	r3, r2
 801647a:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 801647c:	2200      	movs	r2, #0
 801647e:	2124      	movs	r1, #36	; 0x24
 8016480:	2001      	movs	r0, #1
 8016482:	f7f6 fbf3 	bl	800cc6c <pbuf_alloc>
 8016486:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 8016488:	69fb      	ldr	r3, [r7, #28]
 801648a:	2b00      	cmp	r3, #0
 801648c:	d04c      	beq.n	8016528 <icmp_send_response+0xbc>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 801648e:	69fb      	ldr	r3, [r7, #28]
 8016490:	895b      	ldrh	r3, [r3, #10]
 8016492:	2b23      	cmp	r3, #35	; 0x23
 8016494:	d806      	bhi.n	80164a4 <icmp_send_response+0x38>
 8016496:	4b26      	ldr	r3, [pc, #152]	; (8016530 <icmp_send_response+0xc4>)
 8016498:	f44f 72b1 	mov.w	r2, #354	; 0x162
 801649c:	4925      	ldr	r1, [pc, #148]	; (8016534 <icmp_send_response+0xc8>)
 801649e:	4826      	ldr	r0, [pc, #152]	; (8016538 <icmp_send_response+0xcc>)
 80164a0:	f002 f8d2 	bl	8018648 <iprintf>
             (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 80164a4:	687b      	ldr	r3, [r7, #4]
 80164a6:	685b      	ldr	r3, [r3, #4]
 80164a8:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 80164aa:	69fb      	ldr	r3, [r7, #28]
 80164ac:	685b      	ldr	r3, [r3, #4]
 80164ae:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 80164b0:	697b      	ldr	r3, [r7, #20]
 80164b2:	78fa      	ldrb	r2, [r7, #3]
 80164b4:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 80164b6:	697b      	ldr	r3, [r7, #20]
 80164b8:	78ba      	ldrb	r2, [r7, #2]
 80164ba:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 80164bc:	697b      	ldr	r3, [r7, #20]
 80164be:	2200      	movs	r2, #0
 80164c0:	711a      	strb	r2, [r3, #4]
 80164c2:	2200      	movs	r2, #0
 80164c4:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 80164c6:	697b      	ldr	r3, [r7, #20]
 80164c8:	2200      	movs	r2, #0
 80164ca:	719a      	strb	r2, [r3, #6]
 80164cc:	2200      	movs	r2, #0
 80164ce:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 80164d0:	69fb      	ldr	r3, [r7, #28]
 80164d2:	685b      	ldr	r3, [r3, #4]
 80164d4:	f103 0008 	add.w	r0, r3, #8
 80164d8:	687b      	ldr	r3, [r7, #4]
 80164da:	685b      	ldr	r3, [r3, #4]
 80164dc:	221c      	movs	r2, #28
 80164de:	4619      	mov	r1, r3
 80164e0:	f001 fff7 	bl	80184d2 <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 80164e4:	69bb      	ldr	r3, [r7, #24]
 80164e6:	68db      	ldr	r3, [r3, #12]
 80164e8:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_src, &iphdr_dst);
  }
#else
  netif = ip4_route(&iphdr_src);
 80164ea:	f107 030c 	add.w	r3, r7, #12
 80164ee:	4618      	mov	r0, r3
 80164f0:	f000 f824 	bl	801653c <ip4_route>
 80164f4:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 80164f6:	693b      	ldr	r3, [r7, #16]
 80164f8:	2b00      	cmp	r3, #0
 80164fa:	d011      	beq.n	8016520 <icmp_send_response+0xb4>
    /* calculate checksum */
    icmphdr->chksum = 0;
 80164fc:	697b      	ldr	r3, [r7, #20]
 80164fe:	2200      	movs	r2, #0
 8016500:	709a      	strb	r2, [r3, #2]
 8016502:	2200      	movs	r2, #0
 8016504:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 8016506:	f107 020c 	add.w	r2, r7, #12
 801650a:	693b      	ldr	r3, [r7, #16]
 801650c:	9302      	str	r3, [sp, #8]
 801650e:	2301      	movs	r3, #1
 8016510:	9301      	str	r3, [sp, #4]
 8016512:	2300      	movs	r3, #0
 8016514:	9300      	str	r3, [sp, #0]
 8016516:	23ff      	movs	r3, #255	; 0xff
 8016518:	2100      	movs	r1, #0
 801651a:	69f8      	ldr	r0, [r7, #28]
 801651c:	f000 f9d4 	bl	80168c8 <ip4_output_if>
  }
  pbuf_free(q);
 8016520:	69f8      	ldr	r0, [r7, #28]
 8016522:	f7f6 ff15 	bl	800d350 <pbuf_free>
 8016526:	e000      	b.n	801652a <icmp_send_response+0xbe>
    return;
 8016528:	bf00      	nop
}
 801652a:	3720      	adds	r7, #32
 801652c:	46bd      	mov	sp, r7
 801652e:	bd80      	pop	{r7, pc}
 8016530:	0801b32c 	.word	0x0801b32c
 8016534:	0801b3f8 	.word	0x0801b3f8
 8016538:	0801b39c 	.word	0x0801b39c

0801653c <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 801653c:	b480      	push	{r7}
 801653e:	b085      	sub	sp, #20
 8016540:	af00      	add	r7, sp, #0
 8016542:	6078      	str	r0, [r7, #4]
    return ip4_default_multicast_netif;
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */

  /* iterate through netifs */
  for (netif = netif_list; netif != NULL; netif = netif->next) {
 8016544:	4b30      	ldr	r3, [pc, #192]	; (8016608 <ip4_route+0xcc>)
 8016546:	681b      	ldr	r3, [r3, #0]
 8016548:	60fb      	str	r3, [r7, #12]
 801654a:	e036      	b.n	80165ba <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 801654c:	68fb      	ldr	r3, [r7, #12]
 801654e:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8016552:	f003 0301 	and.w	r3, r3, #1
 8016556:	b2db      	uxtb	r3, r3
 8016558:	2b00      	cmp	r3, #0
 801655a:	d02b      	beq.n	80165b4 <ip4_route+0x78>
 801655c:	68fb      	ldr	r3, [r7, #12]
 801655e:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8016562:	089b      	lsrs	r3, r3, #2
 8016564:	f003 0301 	and.w	r3, r3, #1
 8016568:	b2db      	uxtb	r3, r3
 801656a:	2b00      	cmp	r3, #0
 801656c:	d022      	beq.n	80165b4 <ip4_route+0x78>
 801656e:	68fb      	ldr	r3, [r7, #12]
 8016570:	3304      	adds	r3, #4
 8016572:	681b      	ldr	r3, [r3, #0]
 8016574:	2b00      	cmp	r3, #0
 8016576:	d01d      	beq.n	80165b4 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 8016578:	687b      	ldr	r3, [r7, #4]
 801657a:	681a      	ldr	r2, [r3, #0]
 801657c:	68fb      	ldr	r3, [r7, #12]
 801657e:	3304      	adds	r3, #4
 8016580:	681b      	ldr	r3, [r3, #0]
 8016582:	405a      	eors	r2, r3
 8016584:	68fb      	ldr	r3, [r7, #12]
 8016586:	3308      	adds	r3, #8
 8016588:	681b      	ldr	r3, [r3, #0]
 801658a:	4013      	ands	r3, r2
 801658c:	2b00      	cmp	r3, #0
 801658e:	d101      	bne.n	8016594 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 8016590:	68fb      	ldr	r3, [r7, #12]
 8016592:	e033      	b.n	80165fc <ip4_route+0xc0>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 8016594:	68fb      	ldr	r3, [r7, #12]
 8016596:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 801659a:	f003 0302 	and.w	r3, r3, #2
 801659e:	2b00      	cmp	r3, #0
 80165a0:	d108      	bne.n	80165b4 <ip4_route+0x78>
 80165a2:	687b      	ldr	r3, [r7, #4]
 80165a4:	681a      	ldr	r2, [r3, #0]
 80165a6:	68fb      	ldr	r3, [r7, #12]
 80165a8:	330c      	adds	r3, #12
 80165aa:	681b      	ldr	r3, [r3, #0]
 80165ac:	429a      	cmp	r2, r3
 80165ae:	d101      	bne.n	80165b4 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 80165b0:	68fb      	ldr	r3, [r7, #12]
 80165b2:	e023      	b.n	80165fc <ip4_route+0xc0>
  for (netif = netif_list; netif != NULL; netif = netif->next) {
 80165b4:	68fb      	ldr	r3, [r7, #12]
 80165b6:	681b      	ldr	r3, [r3, #0]
 80165b8:	60fb      	str	r3, [r7, #12]
 80165ba:	68fb      	ldr	r3, [r7, #12]
 80165bc:	2b00      	cmp	r3, #0
 80165be:	d1c5      	bne.n	801654c <ip4_route+0x10>
  if (netif != NULL) {
    return netif;
  }
#endif

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 80165c0:	4b12      	ldr	r3, [pc, #72]	; (801660c <ip4_route+0xd0>)
 80165c2:	681b      	ldr	r3, [r3, #0]
 80165c4:	2b00      	cmp	r3, #0
 80165c6:	d015      	beq.n	80165f4 <ip4_route+0xb8>
 80165c8:	4b10      	ldr	r3, [pc, #64]	; (801660c <ip4_route+0xd0>)
 80165ca:	681b      	ldr	r3, [r3, #0]
 80165cc:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80165d0:	f003 0301 	and.w	r3, r3, #1
 80165d4:	2b00      	cmp	r3, #0
 80165d6:	d00d      	beq.n	80165f4 <ip4_route+0xb8>
 80165d8:	4b0c      	ldr	r3, [pc, #48]	; (801660c <ip4_route+0xd0>)
 80165da:	681b      	ldr	r3, [r3, #0]
 80165dc:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80165e0:	f003 0304 	and.w	r3, r3, #4
 80165e4:	2b00      	cmp	r3, #0
 80165e6:	d005      	beq.n	80165f4 <ip4_route+0xb8>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default))) {
 80165e8:	4b08      	ldr	r3, [pc, #32]	; (801660c <ip4_route+0xd0>)
 80165ea:	681b      	ldr	r3, [r3, #0]
 80165ec:	3304      	adds	r3, #4
 80165ee:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 80165f0:	2b00      	cmp	r3, #0
 80165f2:	d101      	bne.n	80165f8 <ip4_route+0xbc>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
      ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 80165f4:	2300      	movs	r3, #0
 80165f6:	e001      	b.n	80165fc <ip4_route+0xc0>
  }

  return netif_default;
 80165f8:	4b04      	ldr	r3, [pc, #16]	; (801660c <ip4_route+0xd0>)
 80165fa:	681b      	ldr	r3, [r3, #0]
}
 80165fc:	4618      	mov	r0, r3
 80165fe:	3714      	adds	r7, #20
 8016600:	46bd      	mov	sp, r7
 8016602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016606:	4770      	bx	lr
 8016608:	2000ac24 	.word	0x2000ac24
 801660c:	2000ac28 	.word	0x2000ac28

08016610 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 8016610:	b580      	push	{r7, lr}
 8016612:	b088      	sub	sp, #32
 8016614:	af00      	add	r7, sp, #0
 8016616:	6078      	str	r0, [r7, #4]
 8016618:	6039      	str	r1, [r7, #0]
  struct ip_hdr *iphdr;
  struct netif *netif;
  u16_t iphdr_hlen;
  u16_t iphdr_len;
#if IP_ACCEPT_LINK_LAYER_ADDRESSING || LWIP_IGMP
  int check_ip_src = 1;
 801661a:	2301      	movs	r3, #1
 801661c:	617b      	str	r3, [r7, #20]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 801661e:	687b      	ldr	r3, [r7, #4]
 8016620:	685b      	ldr	r3, [r3, #4]
 8016622:	61fb      	str	r3, [r7, #28]
  if (IPH_V(iphdr) != 4) {
 8016624:	69fb      	ldr	r3, [r7, #28]
 8016626:	781b      	ldrb	r3, [r3, #0]
 8016628:	091b      	lsrs	r3, r3, #4
 801662a:	b2db      	uxtb	r3, r3
 801662c:	2b04      	cmp	r3, #4
 801662e:	d004      	beq.n	801663a <ip4_input+0x2a>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 8016630:	6878      	ldr	r0, [r7, #4]
 8016632:	f7f6 fe8d 	bl	800d350 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 8016636:	2300      	movs	r3, #0
 8016638:	e13e      	b.n	80168b8 <ip4_input+0x2a8>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in number of 32-bit words */
  iphdr_hlen = IPH_HL(iphdr);
 801663a:	69fb      	ldr	r3, [r7, #28]
 801663c:	781b      	ldrb	r3, [r3, #0]
 801663e:	b29b      	uxth	r3, r3
 8016640:	f003 030f 	and.w	r3, r3, #15
 8016644:	81fb      	strh	r3, [r7, #14]
  /* calculate IP header length in bytes */
  iphdr_hlen *= 4;
 8016646:	89fb      	ldrh	r3, [r7, #14]
 8016648:	009b      	lsls	r3, r3, #2
 801664a:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 801664c:	69fb      	ldr	r3, [r7, #28]
 801664e:	885b      	ldrh	r3, [r3, #2]
 8016650:	b29b      	uxth	r3, r3
 8016652:	4618      	mov	r0, r3
 8016654:	f7f5 fcda 	bl	800c00c <lwip_htons>
 8016658:	4603      	mov	r3, r0
 801665a:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 801665c:	687b      	ldr	r3, [r7, #4]
 801665e:	891b      	ldrh	r3, [r3, #8]
 8016660:	89ba      	ldrh	r2, [r7, #12]
 8016662:	429a      	cmp	r2, r3
 8016664:	d204      	bcs.n	8016670 <ip4_input+0x60>
    pbuf_realloc(p, iphdr_len);
 8016666:	89bb      	ldrh	r3, [r7, #12]
 8016668:	4619      	mov	r1, r3
 801666a:	6878      	ldr	r0, [r7, #4]
 801666c:	f7f6 fcfc 	bl	800d068 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 8016670:	687b      	ldr	r3, [r7, #4]
 8016672:	895b      	ldrh	r3, [r3, #10]
 8016674:	89fa      	ldrh	r2, [r7, #14]
 8016676:	429a      	cmp	r2, r3
 8016678:	d807      	bhi.n	801668a <ip4_input+0x7a>
 801667a:	687b      	ldr	r3, [r7, #4]
 801667c:	891b      	ldrh	r3, [r3, #8]
 801667e:	89ba      	ldrh	r2, [r7, #12]
 8016680:	429a      	cmp	r2, r3
 8016682:	d802      	bhi.n	801668a <ip4_input+0x7a>
 8016684:	89fb      	ldrh	r3, [r7, #14]
 8016686:	2b13      	cmp	r3, #19
 8016688:	d804      	bhi.n	8016694 <ip4_input+0x84>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
        ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
        iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 801668a:	6878      	ldr	r0, [r7, #4]
 801668c:	f7f6 fe60 	bl	800d350 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 8016690:	2300      	movs	r3, #0
 8016692:	e111      	b.n	80168b8 <ip4_input+0x2a8>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 8016694:	69fb      	ldr	r3, [r7, #28]
 8016696:	691b      	ldr	r3, [r3, #16]
 8016698:	4a89      	ldr	r2, [pc, #548]	; (80168c0 <ip4_input+0x2b0>)
 801669a:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 801669c:	69fb      	ldr	r3, [r7, #28]
 801669e:	68db      	ldr	r3, [r3, #12]
 80166a0:	4a87      	ldr	r2, [pc, #540]	; (80168c0 <ip4_input+0x2b0>)
 80166a2:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 80166a4:	4b86      	ldr	r3, [pc, #536]	; (80168c0 <ip4_input+0x2b0>)
 80166a6:	695b      	ldr	r3, [r3, #20]
 80166a8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80166ac:	2be0      	cmp	r3, #224	; 0xe0
 80166ae:	d112      	bne.n	80166d6 <ip4_input+0xc6>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 80166b0:	683b      	ldr	r3, [r7, #0]
 80166b2:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80166b6:	f003 0301 	and.w	r3, r3, #1
 80166ba:	b2db      	uxtb	r3, r3
 80166bc:	2b00      	cmp	r3, #0
 80166be:	d007      	beq.n	80166d0 <ip4_input+0xc0>
 80166c0:	683b      	ldr	r3, [r7, #0]
 80166c2:	3304      	adds	r3, #4
 80166c4:	681b      	ldr	r3, [r3, #0]
 80166c6:	2b00      	cmp	r3, #0
 80166c8:	d002      	beq.n	80166d0 <ip4_input+0xc0>
      netif = inp;
 80166ca:	683b      	ldr	r3, [r7, #0]
 80166cc:	61bb      	str	r3, [r7, #24]
 80166ce:	e041      	b.n	8016754 <ip4_input+0x144>
    } else {
      netif = NULL;
 80166d0:	2300      	movs	r3, #0
 80166d2:	61bb      	str	r3, [r7, #24]
 80166d4:	e03e      	b.n	8016754 <ip4_input+0x144>
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs.
       'first' is used as a boolean to mark whether we started walking the list */
    int first = 1;
 80166d6:	2301      	movs	r3, #1
 80166d8:	613b      	str	r3, [r7, #16]
    netif = inp;
 80166da:	683b      	ldr	r3, [r7, #0]
 80166dc:	61bb      	str	r3, [r7, #24]
          ip4_addr_get_u32(&iphdr->dest) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
          ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
          ip4_addr_get_u32(&iphdr->dest) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

      /* interface is up and configured? */
      if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 80166de:	69bb      	ldr	r3, [r7, #24]
 80166e0:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80166e4:	f003 0301 	and.w	r3, r3, #1
 80166e8:	b2db      	uxtb	r3, r3
 80166ea:	2b00      	cmp	r3, #0
 80166ec:	d014      	beq.n	8016718 <ip4_input+0x108>
 80166ee:	69bb      	ldr	r3, [r7, #24]
 80166f0:	3304      	adds	r3, #4
 80166f2:	681b      	ldr	r3, [r3, #0]
 80166f4:	2b00      	cmp	r3, #0
 80166f6:	d00f      	beq.n	8016718 <ip4_input+0x108>
        /* unicast to this interface address? */
        if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 80166f8:	4b71      	ldr	r3, [pc, #452]	; (80168c0 <ip4_input+0x2b0>)
 80166fa:	695a      	ldr	r2, [r3, #20]
 80166fc:	69bb      	ldr	r3, [r7, #24]
 80166fe:	3304      	adds	r3, #4
 8016700:	681b      	ldr	r3, [r3, #0]
 8016702:	429a      	cmp	r2, r3
 8016704:	d026      	beq.n	8016754 <ip4_input+0x144>
            /* or broadcast on this interface network address? */
            ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 8016706:	4b6e      	ldr	r3, [pc, #440]	; (80168c0 <ip4_input+0x2b0>)
 8016708:	695b      	ldr	r3, [r3, #20]
 801670a:	69b9      	ldr	r1, [r7, #24]
 801670c:	4618      	mov	r0, r3
 801670e:	f000 f9ad 	bl	8016a6c <ip4_addr_isbroadcast_u32>
 8016712:	4603      	mov	r3, r0
        if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8016714:	2b00      	cmp	r3, #0
 8016716:	d11d      	bne.n	8016754 <ip4_input+0x144>
          /* break out of for loop */
          break;
        }
#endif /* LWIP_AUTOIP */
      }
      if (first) {
 8016718:	693b      	ldr	r3, [r7, #16]
 801671a:	2b00      	cmp	r3, #0
 801671c:	d00d      	beq.n	801673a <ip4_input+0x12a>
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
        /* Packets sent to the loopback address must not be accepted on an
         * interface that does not have the loopback address assigned to it,
         * unless a non-loopback interface is used for loopback traffic. */
        if (ip4_addr_isloopback(ip4_current_dest_addr())) {
 801671e:	4b68      	ldr	r3, [pc, #416]	; (80168c0 <ip4_input+0x2b0>)
 8016720:	695b      	ldr	r3, [r3, #20]
 8016722:	b2db      	uxtb	r3, r3
 8016724:	2b7f      	cmp	r3, #127	; 0x7f
 8016726:	d102      	bne.n	801672e <ip4_input+0x11e>
          netif = NULL;
 8016728:	2300      	movs	r3, #0
 801672a:	61bb      	str	r3, [r7, #24]
          break;
 801672c:	e012      	b.n	8016754 <ip4_input+0x144>
        }
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
        first = 0;
 801672e:	2300      	movs	r3, #0
 8016730:	613b      	str	r3, [r7, #16]
        netif = netif_list;
 8016732:	4b64      	ldr	r3, [pc, #400]	; (80168c4 <ip4_input+0x2b4>)
 8016734:	681b      	ldr	r3, [r3, #0]
 8016736:	61bb      	str	r3, [r7, #24]
 8016738:	e002      	b.n	8016740 <ip4_input+0x130>
      } else {
        netif = netif->next;
 801673a:	69bb      	ldr	r3, [r7, #24]
 801673c:	681b      	ldr	r3, [r3, #0]
 801673e:	61bb      	str	r3, [r7, #24]
      }
      if (netif == inp) {
 8016740:	69ba      	ldr	r2, [r7, #24]
 8016742:	683b      	ldr	r3, [r7, #0]
 8016744:	429a      	cmp	r2, r3
 8016746:	d102      	bne.n	801674e <ip4_input+0x13e>
        netif = netif->next;
 8016748:	69bb      	ldr	r3, [r7, #24]
 801674a:	681b      	ldr	r3, [r3, #0]
 801674c:	61bb      	str	r3, [r7, #24]
      }
    } while (netif != NULL);
 801674e:	69bb      	ldr	r3, [r7, #24]
 8016750:	2b00      	cmp	r3, #0
 8016752:	d1c4      	bne.n	80166de <ip4_input+0xce>
   * If you want to accept private broadcast communication while a netif is down,
   * define LWIP_IP_ACCEPT_UDP_PORT(dst_port), e.g.:
   *
   * #define LWIP_IP_ACCEPT_UDP_PORT(dst_port) ((dst_port) == PP_NTOHS(12345))
   */
  if (netif == NULL) {
 8016754:	69bb      	ldr	r3, [r7, #24]
 8016756:	2b00      	cmp	r3, #0
 8016758:	d111      	bne.n	801677e <ip4_input+0x16e>
    /* remote port is DHCP server? */
    if (IPH_PROTO(iphdr) == IP_PROTO_UDP) {
 801675a:	69fb      	ldr	r3, [r7, #28]
 801675c:	7a5b      	ldrb	r3, [r3, #9]
 801675e:	2b11      	cmp	r3, #17
 8016760:	d10d      	bne.n	801677e <ip4_input+0x16e>
      struct udp_hdr *udphdr = (struct udp_hdr *)((u8_t *)iphdr + iphdr_hlen);
 8016762:	89fb      	ldrh	r3, [r7, #14]
 8016764:	69fa      	ldr	r2, [r7, #28]
 8016766:	4413      	add	r3, r2
 8016768:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE, ("ip4_input: UDP packet to DHCP client port %"U16_F"\n",
        lwip_ntohs(udphdr->dest)));
      if (IP_ACCEPT_LINK_LAYER_ADDRESSED_PORT(udphdr->dest)) {
 801676a:	68bb      	ldr	r3, [r7, #8]
 801676c:	885b      	ldrh	r3, [r3, #2]
 801676e:	b29b      	uxth	r3, r3
 8016770:	f5b3 4f88 	cmp.w	r3, #17408	; 0x4400
 8016774:	d103      	bne.n	801677e <ip4_input+0x16e>
        LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE, ("ip4_input: DHCP packet accepted.\n"));
        netif = inp;
 8016776:	683b      	ldr	r3, [r7, #0]
 8016778:	61bb      	str	r3, [r7, #24]
        check_ip_src = 0;
 801677a:	2300      	movs	r3, #0
 801677c:	617b      	str	r3, [r7, #20]
  }
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */

  /* broadcast or multicast packet source address? Compliant with RFC 1122: 3.2.1.3 */
#if LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING
  if (check_ip_src
 801677e:	697b      	ldr	r3, [r7, #20]
 8016780:	2b00      	cmp	r3, #0
 8016782:	d017      	beq.n	80167b4 <ip4_input+0x1a4>
#if IP_ACCEPT_LINK_LAYER_ADDRESSING
  /* DHCP servers need 0.0.0.0 to be allowed as source address (RFC 1.1.2.2: 3.2.1.3/a) */
      && !ip4_addr_isany_val(*ip4_current_src_addr())
 8016784:	4b4e      	ldr	r3, [pc, #312]	; (80168c0 <ip4_input+0x2b0>)
 8016786:	691b      	ldr	r3, [r3, #16]
 8016788:	2b00      	cmp	r3, #0
 801678a:	d013      	beq.n	80167b4 <ip4_input+0x1a4>
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 801678c:	4b4c      	ldr	r3, [pc, #304]	; (80168c0 <ip4_input+0x2b0>)
 801678e:	691b      	ldr	r3, [r3, #16]
 8016790:	6839      	ldr	r1, [r7, #0]
 8016792:	4618      	mov	r0, r3
 8016794:	f000 f96a 	bl	8016a6c <ip4_addr_isbroadcast_u32>
 8016798:	4603      	mov	r3, r0
 801679a:	2b00      	cmp	r3, #0
 801679c:	d105      	bne.n	80167aa <ip4_input+0x19a>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 801679e:	4b48      	ldr	r3, [pc, #288]	; (80168c0 <ip4_input+0x2b0>)
 80167a0:	691b      	ldr	r3, [r3, #16]
 80167a2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 80167a6:	2be0      	cmp	r3, #224	; 0xe0
 80167a8:	d104      	bne.n	80167b4 <ip4_input+0x1a4>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 80167aa:	6878      	ldr	r0, [r7, #4]
 80167ac:	f7f6 fdd0 	bl	800d350 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 80167b0:	2300      	movs	r3, #0
 80167b2:	e081      	b.n	80168b8 <ip4_input+0x2a8>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 80167b4:	69bb      	ldr	r3, [r7, #24]
 80167b6:	2b00      	cmp	r3, #0
 80167b8:	d104      	bne.n	80167c4 <ip4_input+0x1b4>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 80167ba:	6878      	ldr	r0, [r7, #4]
 80167bc:	f7f6 fdc8 	bl	800d350 <pbuf_free>
    return ERR_OK;
 80167c0:	2300      	movs	r3, #0
 80167c2:	e079      	b.n	80168b8 <ip4_input+0x2a8>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 80167c4:	69fb      	ldr	r3, [r7, #28]
 80167c6:	88db      	ldrh	r3, [r3, #6]
 80167c8:	b29b      	uxth	r3, r3
 80167ca:	461a      	mov	r2, r3
 80167cc:	f64f 733f 	movw	r3, #65343	; 0xff3f
 80167d0:	4013      	ands	r3, r2
 80167d2:	2b00      	cmp	r3, #0
 80167d4:	d00b      	beq.n	80167ee <ip4_input+0x1de>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
      lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK)*8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 80167d6:	6878      	ldr	r0, [r7, #4]
 80167d8:	f000 fc8e 	bl	80170f8 <ip4_reass>
 80167dc:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 80167de:	687b      	ldr	r3, [r7, #4]
 80167e0:	2b00      	cmp	r3, #0
 80167e2:	d101      	bne.n	80167e8 <ip4_input+0x1d8>
      return ERR_OK;
 80167e4:	2300      	movs	r3, #0
 80167e6:	e067      	b.n	80168b8 <ip4_input+0x2a8>
    }
    iphdr = (struct ip_hdr *)p->payload;
 80167e8:	687b      	ldr	r3, [r7, #4]
 80167ea:	685b      	ldr	r3, [r3, #4]
 80167ec:	61fb      	str	r3, [r7, #28]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 80167ee:	4a34      	ldr	r2, [pc, #208]	; (80168c0 <ip4_input+0x2b0>)
 80167f0:	69bb      	ldr	r3, [r7, #24]
 80167f2:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 80167f4:	4a32      	ldr	r2, [pc, #200]	; (80168c0 <ip4_input+0x2b0>)
 80167f6:	683b      	ldr	r3, [r7, #0]
 80167f8:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 80167fa:	4a31      	ldr	r2, [pc, #196]	; (80168c0 <ip4_input+0x2b0>)
 80167fc:	69fb      	ldr	r3, [r7, #28]
 80167fe:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL(iphdr) * 4;
 8016800:	69fb      	ldr	r3, [r7, #28]
 8016802:	781b      	ldrb	r3, [r3, #0]
 8016804:	b29b      	uxth	r3, r3
 8016806:	f003 030f 	and.w	r3, r3, #15
 801680a:	b29b      	uxth	r3, r3
 801680c:	009b      	lsls	r3, r3, #2
 801680e:	b29a      	uxth	r2, r3
 8016810:	4b2b      	ldr	r3, [pc, #172]	; (80168c0 <ip4_input+0x2b0>)
 8016812:	819a      	strh	r2, [r3, #12]
#if LWIP_RAW
  /* raw input did not eat the packet? */
  if (raw_input(p, inp) == 0)
#endif /* LWIP_RAW */
  {
    pbuf_header(p, -(s16_t)iphdr_hlen); /* Move to payload, no check necessary. */
 8016814:	89fb      	ldrh	r3, [r7, #14]
 8016816:	425b      	negs	r3, r3
 8016818:	b29b      	uxth	r3, r3
 801681a:	b21b      	sxth	r3, r3
 801681c:	4619      	mov	r1, r3
 801681e:	6878      	ldr	r0, [r7, #4]
 8016820:	f7f6 fd72 	bl	800d308 <pbuf_header>

    switch (IPH_PROTO(iphdr)) {
 8016824:	69fb      	ldr	r3, [r7, #28]
 8016826:	7a5b      	ldrb	r3, [r3, #9]
 8016828:	2b06      	cmp	r3, #6
 801682a:	d009      	beq.n	8016840 <ip4_input+0x230>
 801682c:	2b11      	cmp	r3, #17
 801682e:	d002      	beq.n	8016836 <ip4_input+0x226>
 8016830:	2b01      	cmp	r3, #1
 8016832:	d00a      	beq.n	801684a <ip4_input+0x23a>
 8016834:	e00e      	b.n	8016854 <ip4_input+0x244>
    case IP_PROTO_UDP:
#if LWIP_UDPLITE
    case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
      MIB2_STATS_INC(mib2.ipindelivers);
      udp_input(p, inp);
 8016836:	6839      	ldr	r1, [r7, #0]
 8016838:	6878      	ldr	r0, [r7, #4]
 801683a:	f7fc fc11 	bl	8013060 <udp_input>
      break;
 801683e:	e028      	b.n	8016892 <ip4_input+0x282>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case IP_PROTO_TCP:
      MIB2_STATS_INC(mib2.ipindelivers);
      tcp_input(p, inp);
 8016840:	6839      	ldr	r1, [r7, #0]
 8016842:	6878      	ldr	r0, [r7, #4]
 8016844:	f7f8 fc30 	bl	800f0a8 <tcp_input>
      break;
 8016848:	e023      	b.n	8016892 <ip4_input+0x282>
#endif /* LWIP_TCP */
#if LWIP_ICMP
    case IP_PROTO_ICMP:
      MIB2_STATS_INC(mib2.ipindelivers);
      icmp_input(p, inp);
 801684a:	6839      	ldr	r1, [r7, #0]
 801684c:	6878      	ldr	r0, [r7, #4]
 801684e:	f7ff fce7 	bl	8016220 <icmp_input>
      break;
 8016852:	e01e      	b.n	8016892 <ip4_input+0x282>
      break;
#endif /* LWIP_IGMP */
    default:
#if LWIP_ICMP
      /* send ICMP destination protocol unreachable unless is was a broadcast */
      if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8016854:	4b1a      	ldr	r3, [pc, #104]	; (80168c0 <ip4_input+0x2b0>)
 8016856:	695b      	ldr	r3, [r3, #20]
 8016858:	69b9      	ldr	r1, [r7, #24]
 801685a:	4618      	mov	r0, r3
 801685c:	f000 f906 	bl	8016a6c <ip4_addr_isbroadcast_u32>
 8016860:	4603      	mov	r3, r0
 8016862:	2b00      	cmp	r3, #0
 8016864:	d112      	bne.n	801688c <ip4_input+0x27c>
          !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8016866:	4b16      	ldr	r3, [pc, #88]	; (80168c0 <ip4_input+0x2b0>)
 8016868:	695b      	ldr	r3, [r3, #20]
 801686a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 801686e:	2be0      	cmp	r3, #224	; 0xe0
 8016870:	d00c      	beq.n	801688c <ip4_input+0x27c>
        pbuf_header_force(p, iphdr_hlen); /* Move to ip header, no check necessary. */
 8016872:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8016876:	4619      	mov	r1, r3
 8016878:	6878      	ldr	r0, [r7, #4]
 801687a:	f7f6 fd57 	bl	800d32c <pbuf_header_force>
        p->payload = iphdr;
 801687e:	687b      	ldr	r3, [r7, #4]
 8016880:	69fa      	ldr	r2, [r7, #28]
 8016882:	605a      	str	r2, [r3, #4]
        icmp_dest_unreach(p, ICMP_DUR_PROTO);
 8016884:	2102      	movs	r1, #2
 8016886:	6878      	ldr	r0, [r7, #4]
 8016888:	f7ff fdd0 	bl	801642c <icmp_dest_unreach>
      }
#endif /* LWIP_ICMP */
      pbuf_free(p);
 801688c:	6878      	ldr	r0, [r7, #4]
 801688e:	f7f6 fd5f 	bl	800d350 <pbuf_free>
      MIB2_STATS_INC(mib2.ipinunknownprotos);
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 8016892:	4b0b      	ldr	r3, [pc, #44]	; (80168c0 <ip4_input+0x2b0>)
 8016894:	2200      	movs	r2, #0
 8016896:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 8016898:	4b09      	ldr	r3, [pc, #36]	; (80168c0 <ip4_input+0x2b0>)
 801689a:	2200      	movs	r2, #0
 801689c:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 801689e:	4b08      	ldr	r3, [pc, #32]	; (80168c0 <ip4_input+0x2b0>)
 80168a0:	2200      	movs	r2, #0
 80168a2:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 80168a4:	4b06      	ldr	r3, [pc, #24]	; (80168c0 <ip4_input+0x2b0>)
 80168a6:	2200      	movs	r2, #0
 80168a8:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 80168aa:	4b05      	ldr	r3, [pc, #20]	; (80168c0 <ip4_input+0x2b0>)
 80168ac:	2200      	movs	r2, #0
 80168ae:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 80168b0:	4b03      	ldr	r3, [pc, #12]	; (80168c0 <ip4_input+0x2b0>)
 80168b2:	2200      	movs	r2, #0
 80168b4:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 80168b6:	2300      	movs	r3, #0
}
 80168b8:	4618      	mov	r0, r3
 80168ba:	3720      	adds	r7, #32
 80168bc:	46bd      	mov	sp, r7
 80168be:	bd80      	pop	{r7, pc}
 80168c0:	20007504 	.word	0x20007504
 80168c4:	2000ac24 	.word	0x2000ac24

080168c8 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
             u8_t ttl, u8_t tos,
             u8_t proto, struct netif *netif)
{
 80168c8:	b580      	push	{r7, lr}
 80168ca:	b08a      	sub	sp, #40	; 0x28
 80168cc:	af04      	add	r7, sp, #16
 80168ce:	60f8      	str	r0, [r7, #12]
 80168d0:	60b9      	str	r1, [r7, #8]
 80168d2:	607a      	str	r2, [r7, #4]
 80168d4:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
       u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
       u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 80168d6:	68bb      	ldr	r3, [r7, #8]
 80168d8:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 80168da:	687b      	ldr	r3, [r7, #4]
 80168dc:	2b00      	cmp	r3, #0
 80168de:	d009      	beq.n	80168f4 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 80168e0:	68bb      	ldr	r3, [r7, #8]
 80168e2:	2b00      	cmp	r3, #0
 80168e4:	d003      	beq.n	80168ee <ip4_output_if+0x26>
 80168e6:	68bb      	ldr	r3, [r7, #8]
 80168e8:	681b      	ldr	r3, [r3, #0]
 80168ea:	2b00      	cmp	r3, #0
 80168ec:	d102      	bne.n	80168f4 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 80168ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80168f0:	3304      	adds	r3, #4
 80168f2:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
    ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 80168f4:	78fa      	ldrb	r2, [r7, #3]
 80168f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80168f8:	9302      	str	r3, [sp, #8]
 80168fa:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80168fe:	9301      	str	r3, [sp, #4]
 8016900:	f897 3020 	ldrb.w	r3, [r7, #32]
 8016904:	9300      	str	r3, [sp, #0]
 8016906:	4613      	mov	r3, r2
 8016908:	687a      	ldr	r2, [r7, #4]
 801690a:	6979      	ldr	r1, [r7, #20]
 801690c:	68f8      	ldr	r0, [r7, #12]
 801690e:	f000 f805 	bl	801691c <ip4_output_if_src>
 8016912:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 8016914:	4618      	mov	r0, r3
 8016916:	3718      	adds	r7, #24
 8016918:	46bd      	mov	sp, r7
 801691a:	bd80      	pop	{r7, pc}

0801691c <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
             u8_t ttl, u8_t tos,
             u8_t proto, struct netif *netif)
{
 801691c:	b580      	push	{r7, lr}
 801691e:	b088      	sub	sp, #32
 8016920:	af00      	add	r7, sp, #0
 8016922:	60f8      	str	r0, [r7, #12]
 8016924:	60b9      	str	r1, [r7, #8]
 8016926:	607a      	str	r2, [r7, #4]
 8016928:	70fb      	strb	r3, [r7, #3]
  ip4_addr_t dest_addr;
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 801692a:	68fb      	ldr	r3, [r7, #12]
 801692c:	89db      	ldrh	r3, [r3, #14]
 801692e:	2b01      	cmp	r3, #1
 8016930:	d006      	beq.n	8016940 <ip4_output_if_src+0x24>
 8016932:	4b48      	ldr	r3, [pc, #288]	; (8016a54 <ip4_output_if_src+0x138>)
 8016934:	f240 3233 	movw	r2, #819	; 0x333
 8016938:	4947      	ldr	r1, [pc, #284]	; (8016a58 <ip4_output_if_src+0x13c>)
 801693a:	4848      	ldr	r0, [pc, #288]	; (8016a5c <ip4_output_if_src+0x140>)
 801693c:	f001 fe84 	bl	8018648 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 8016940:	687b      	ldr	r3, [r7, #4]
 8016942:	2b00      	cmp	r3, #0
 8016944:	d060      	beq.n	8016a08 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 8016946:	2314      	movs	r3, #20
 8016948:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_header(p, IP_HLEN)) {
 801694a:	2114      	movs	r1, #20
 801694c:	68f8      	ldr	r0, [r7, #12]
 801694e:	f7f6 fcdb 	bl	800d308 <pbuf_header>
 8016952:	4603      	mov	r3, r0
 8016954:	2b00      	cmp	r3, #0
 8016956:	d002      	beq.n	801695e <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8016958:	f06f 0301 	mvn.w	r3, #1
 801695c:	e075      	b.n	8016a4a <ip4_output_if_src+0x12e>
    }

    iphdr = (struct ip_hdr *)p->payload;
 801695e:	68fb      	ldr	r3, [r7, #12]
 8016960:	685b      	ldr	r3, [r3, #4]
 8016962:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 8016964:	68fb      	ldr	r3, [r7, #12]
 8016966:	895b      	ldrh	r3, [r3, #10]
 8016968:	2b13      	cmp	r3, #19
 801696a:	d806      	bhi.n	801697a <ip4_output_if_src+0x5e>
 801696c:	4b39      	ldr	r3, [pc, #228]	; (8016a54 <ip4_output_if_src+0x138>)
 801696e:	f240 3261 	movw	r2, #865	; 0x361
 8016972:	493b      	ldr	r1, [pc, #236]	; (8016a60 <ip4_output_if_src+0x144>)
 8016974:	4839      	ldr	r0, [pc, #228]	; (8016a5c <ip4_output_if_src+0x140>)
 8016976:	f001 fe67 	bl	8018648 <iprintf>
               (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 801697a:	69fb      	ldr	r3, [r7, #28]
 801697c:	78fa      	ldrb	r2, [r7, #3]
 801697e:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 8016980:	69fb      	ldr	r3, [r7, #28]
 8016982:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8016986:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 8016988:	687b      	ldr	r3, [r7, #4]
 801698a:	681a      	ldr	r2, [r3, #0]
 801698c:	69fb      	ldr	r3, [r7, #28]
 801698e:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 8016990:	8b7b      	ldrh	r3, [r7, #26]
 8016992:	089b      	lsrs	r3, r3, #2
 8016994:	b29b      	uxth	r3, r3
 8016996:	b2db      	uxtb	r3, r3
 8016998:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801699c:	b2da      	uxtb	r2, r3
 801699e:	69fb      	ldr	r3, [r7, #28]
 80169a0:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 80169a2:	69fb      	ldr	r3, [r7, #28]
 80169a4:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 80169a8:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 80169aa:	68fb      	ldr	r3, [r7, #12]
 80169ac:	891b      	ldrh	r3, [r3, #8]
 80169ae:	4618      	mov	r0, r3
 80169b0:	f7f5 fb2c 	bl	800c00c <lwip_htons>
 80169b4:	4603      	mov	r3, r0
 80169b6:	461a      	mov	r2, r3
 80169b8:	69fb      	ldr	r3, [r7, #28]
 80169ba:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 80169bc:	69fb      	ldr	r3, [r7, #28]
 80169be:	2200      	movs	r2, #0
 80169c0:	719a      	strb	r2, [r3, #6]
 80169c2:	2200      	movs	r2, #0
 80169c4:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 80169c6:	4b27      	ldr	r3, [pc, #156]	; (8016a64 <ip4_output_if_src+0x148>)
 80169c8:	881b      	ldrh	r3, [r3, #0]
 80169ca:	4618      	mov	r0, r3
 80169cc:	f7f5 fb1e 	bl	800c00c <lwip_htons>
 80169d0:	4603      	mov	r3, r0
 80169d2:	461a      	mov	r2, r3
 80169d4:	69fb      	ldr	r3, [r7, #28]
 80169d6:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 80169d8:	4b22      	ldr	r3, [pc, #136]	; (8016a64 <ip4_output_if_src+0x148>)
 80169da:	881b      	ldrh	r3, [r3, #0]
 80169dc:	3301      	adds	r3, #1
 80169de:	b29a      	uxth	r2, r3
 80169e0:	4b20      	ldr	r3, [pc, #128]	; (8016a64 <ip4_output_if_src+0x148>)
 80169e2:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 80169e4:	68bb      	ldr	r3, [r7, #8]
 80169e6:	2b00      	cmp	r3, #0
 80169e8:	d104      	bne.n	80169f4 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 80169ea:	4b1f      	ldr	r3, [pc, #124]	; (8016a68 <ip4_output_if_src+0x14c>)
 80169ec:	681a      	ldr	r2, [r3, #0]
 80169ee:	69fb      	ldr	r3, [r7, #28]
 80169f0:	60da      	str	r2, [r3, #12]
 80169f2:	e003      	b.n	80169fc <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 80169f4:	68bb      	ldr	r3, [r7, #8]
 80169f6:	681a      	ldr	r2, [r3, #0]
 80169f8:	69fb      	ldr	r3, [r7, #28]
 80169fa:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 80169fc:	69fb      	ldr	r3, [r7, #28]
 80169fe:	2200      	movs	r2, #0
 8016a00:	729a      	strb	r2, [r3, #10]
 8016a02:	2200      	movs	r2, #0
 8016a04:	72da      	strb	r2, [r3, #11]
 8016a06:	e008      	b.n	8016a1a <ip4_output_if_src+0xfe>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    iphdr = (struct ip_hdr *)p->payload;
 8016a08:	68fb      	ldr	r3, [r7, #12]
 8016a0a:	685b      	ldr	r3, [r3, #4]
 8016a0c:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 8016a0e:	69fb      	ldr	r3, [r7, #28]
 8016a10:	691b      	ldr	r3, [r3, #16]
 8016a12:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 8016a14:	f107 0314 	add.w	r3, r7, #20
 8016a18:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 8016a1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016a1c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8016a1e:	2b00      	cmp	r3, #0
 8016a20:	d00c      	beq.n	8016a3c <ip4_output_if_src+0x120>
 8016a22:	68fb      	ldr	r3, [r7, #12]
 8016a24:	891a      	ldrh	r2, [r3, #8]
 8016a26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016a28:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8016a2a:	429a      	cmp	r2, r3
 8016a2c:	d906      	bls.n	8016a3c <ip4_output_if_src+0x120>
    return ip4_frag(p, netif, dest);
 8016a2e:	687a      	ldr	r2, [r7, #4]
 8016a30:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8016a32:	68f8      	ldr	r0, [r7, #12]
 8016a34:	f000 fd0a 	bl	801744c <ip4_frag>
 8016a38:	4603      	mov	r3, r0
 8016a3a:	e006      	b.n	8016a4a <ip4_output_if_src+0x12e>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 8016a3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016a3e:	695b      	ldr	r3, [r3, #20]
 8016a40:	687a      	ldr	r2, [r7, #4]
 8016a42:	68f9      	ldr	r1, [r7, #12]
 8016a44:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8016a46:	4798      	blx	r3
 8016a48:	4603      	mov	r3, r0
}
 8016a4a:	4618      	mov	r0, r3
 8016a4c:	3720      	adds	r7, #32
 8016a4e:	46bd      	mov	sp, r7
 8016a50:	bd80      	pop	{r7, pc}
 8016a52:	bf00      	nop
 8016a54:	0801b424 	.word	0x0801b424
 8016a58:	0801b458 	.word	0x0801b458
 8016a5c:	0801b464 	.word	0x0801b464
 8016a60:	0801b48c 	.word	0x0801b48c
 8016a64:	20004352 	.word	0x20004352
 8016a68:	0801b8c0 	.word	0x0801b8c0

08016a6c <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 8016a6c:	b480      	push	{r7}
 8016a6e:	b085      	sub	sp, #20
 8016a70:	af00      	add	r7, sp, #0
 8016a72:	6078      	str	r0, [r7, #4]
 8016a74:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 8016a76:	687b      	ldr	r3, [r7, #4]
 8016a78:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 8016a7a:	687b      	ldr	r3, [r7, #4]
 8016a7c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8016a80:	d002      	beq.n	8016a88 <ip4_addr_isbroadcast_u32+0x1c>
 8016a82:	687b      	ldr	r3, [r7, #4]
 8016a84:	2b00      	cmp	r3, #0
 8016a86:	d101      	bne.n	8016a8c <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 8016a88:	2301      	movs	r3, #1
 8016a8a:	e02a      	b.n	8016ae2 <ip4_addr_isbroadcast_u32+0x76>
  /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 8016a8c:	683b      	ldr	r3, [r7, #0]
 8016a8e:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8016a92:	f003 0302 	and.w	r3, r3, #2
 8016a96:	2b00      	cmp	r3, #0
 8016a98:	d101      	bne.n	8016a9e <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 8016a9a:	2300      	movs	r3, #0
 8016a9c:	e021      	b.n	8016ae2 <ip4_addr_isbroadcast_u32+0x76>
  /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 8016a9e:	683b      	ldr	r3, [r7, #0]
 8016aa0:	3304      	adds	r3, #4
 8016aa2:	681b      	ldr	r3, [r3, #0]
 8016aa4:	687a      	ldr	r2, [r7, #4]
 8016aa6:	429a      	cmp	r2, r3
 8016aa8:	d101      	bne.n	8016aae <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 8016aaa:	2300      	movs	r3, #0
 8016aac:	e019      	b.n	8016ae2 <ip4_addr_isbroadcast_u32+0x76>
  /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 8016aae:	68fa      	ldr	r2, [r7, #12]
 8016ab0:	683b      	ldr	r3, [r7, #0]
 8016ab2:	3304      	adds	r3, #4
 8016ab4:	681b      	ldr	r3, [r3, #0]
 8016ab6:	405a      	eors	r2, r3
 8016ab8:	683b      	ldr	r3, [r7, #0]
 8016aba:	3308      	adds	r3, #8
 8016abc:	681b      	ldr	r3, [r3, #0]
 8016abe:	4013      	ands	r3, r2
 8016ac0:	2b00      	cmp	r3, #0
 8016ac2:	d10d      	bne.n	8016ae0 <ip4_addr_isbroadcast_u32+0x74>
         /* ...and host identifier bits are all ones? =>... */
          && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8016ac4:	683b      	ldr	r3, [r7, #0]
 8016ac6:	3308      	adds	r3, #8
 8016ac8:	681b      	ldr	r3, [r3, #0]
 8016aca:	43da      	mvns	r2, r3
 8016acc:	687b      	ldr	r3, [r7, #4]
 8016ace:	401a      	ands	r2, r3
           (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 8016ad0:	683b      	ldr	r3, [r7, #0]
 8016ad2:	3308      	adds	r3, #8
 8016ad4:	681b      	ldr	r3, [r3, #0]
 8016ad6:	43db      	mvns	r3, r3
          && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8016ad8:	429a      	cmp	r2, r3
 8016ada:	d101      	bne.n	8016ae0 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 8016adc:	2301      	movs	r3, #1
 8016ade:	e000      	b.n	8016ae2 <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 8016ae0:	2300      	movs	r3, #0
  }
}
 8016ae2:	4618      	mov	r0, r3
 8016ae4:	3714      	adds	r7, #20
 8016ae6:	46bd      	mov	sp, r7
 8016ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016aec:	4770      	bx	lr
	...

08016af0 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 8016af0:	b580      	push	{r7, lr}
 8016af2:	b084      	sub	sp, #16
 8016af4:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 8016af6:	2300      	movs	r3, #0
 8016af8:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 8016afa:	4b12      	ldr	r3, [pc, #72]	; (8016b44 <ip_reass_tmr+0x54>)
 8016afc:	681b      	ldr	r3, [r3, #0]
 8016afe:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 8016b00:	e018      	b.n	8016b34 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 8016b02:	68fb      	ldr	r3, [r7, #12]
 8016b04:	7fdb      	ldrb	r3, [r3, #31]
 8016b06:	2b00      	cmp	r3, #0
 8016b08:	d00b      	beq.n	8016b22 <ip_reass_tmr+0x32>
      r->timer--;
 8016b0a:	68fb      	ldr	r3, [r7, #12]
 8016b0c:	7fdb      	ldrb	r3, [r3, #31]
 8016b0e:	3b01      	subs	r3, #1
 8016b10:	b2da      	uxtb	r2, r3
 8016b12:	68fb      	ldr	r3, [r7, #12]
 8016b14:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n",(u16_t)r->timer));
      prev = r;
 8016b16:	68fb      	ldr	r3, [r7, #12]
 8016b18:	60bb      	str	r3, [r7, #8]
      r = r->next;
 8016b1a:	68fb      	ldr	r3, [r7, #12]
 8016b1c:	681b      	ldr	r3, [r3, #0]
 8016b1e:	60fb      	str	r3, [r7, #12]
 8016b20:	e008      	b.n	8016b34 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 8016b22:	68fb      	ldr	r3, [r7, #12]
 8016b24:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 8016b26:	68fb      	ldr	r3, [r7, #12]
 8016b28:	681b      	ldr	r3, [r3, #0]
 8016b2a:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 8016b2c:	68b9      	ldr	r1, [r7, #8]
 8016b2e:	6878      	ldr	r0, [r7, #4]
 8016b30:	f000 f80a 	bl	8016b48 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 8016b34:	68fb      	ldr	r3, [r7, #12]
 8016b36:	2b00      	cmp	r3, #0
 8016b38:	d1e3      	bne.n	8016b02 <ip_reass_tmr+0x12>
     }
   }
}
 8016b3a:	bf00      	nop
 8016b3c:	3710      	adds	r7, #16
 8016b3e:	46bd      	mov	sp, r7
 8016b40:	bd80      	pop	{r7, pc}
 8016b42:	bf00      	nop
 8016b44:	20004354 	.word	0x20004354

08016b48 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8016b48:	b580      	push	{r7, lr}
 8016b4a:	b088      	sub	sp, #32
 8016b4c:	af00      	add	r7, sp, #0
 8016b4e:	6078      	str	r0, [r7, #4]
 8016b50:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 8016b52:	2300      	movs	r3, #0
 8016b54:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 8016b56:	683a      	ldr	r2, [r7, #0]
 8016b58:	687b      	ldr	r3, [r7, #4]
 8016b5a:	429a      	cmp	r2, r3
 8016b5c:	d105      	bne.n	8016b6a <ip_reass_free_complete_datagram+0x22>
 8016b5e:	4b45      	ldr	r3, [pc, #276]	; (8016c74 <ip_reass_free_complete_datagram+0x12c>)
 8016b60:	22ab      	movs	r2, #171	; 0xab
 8016b62:	4945      	ldr	r1, [pc, #276]	; (8016c78 <ip_reass_free_complete_datagram+0x130>)
 8016b64:	4845      	ldr	r0, [pc, #276]	; (8016c7c <ip_reass_free_complete_datagram+0x134>)
 8016b66:	f001 fd6f 	bl	8018648 <iprintf>
  if (prev != NULL) {
 8016b6a:	683b      	ldr	r3, [r7, #0]
 8016b6c:	2b00      	cmp	r3, #0
 8016b6e:	d00a      	beq.n	8016b86 <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 8016b70:	683b      	ldr	r3, [r7, #0]
 8016b72:	681b      	ldr	r3, [r3, #0]
 8016b74:	687a      	ldr	r2, [r7, #4]
 8016b76:	429a      	cmp	r2, r3
 8016b78:	d005      	beq.n	8016b86 <ip_reass_free_complete_datagram+0x3e>
 8016b7a:	4b3e      	ldr	r3, [pc, #248]	; (8016c74 <ip_reass_free_complete_datagram+0x12c>)
 8016b7c:	22ad      	movs	r2, #173	; 0xad
 8016b7e:	4940      	ldr	r1, [pc, #256]	; (8016c80 <ip_reass_free_complete_datagram+0x138>)
 8016b80:	483e      	ldr	r0, [pc, #248]	; (8016c7c <ip_reass_free_complete_datagram+0x134>)
 8016b82:	f001 fd61 	bl	8018648 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 8016b86:	687b      	ldr	r3, [r7, #4]
 8016b88:	685b      	ldr	r3, [r3, #4]
 8016b8a:	685b      	ldr	r3, [r3, #4]
 8016b8c:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 8016b8e:	697b      	ldr	r3, [r7, #20]
 8016b90:	889b      	ldrh	r3, [r3, #4]
 8016b92:	b29b      	uxth	r3, r3
 8016b94:	2b00      	cmp	r3, #0
 8016b96:	d12a      	bne.n	8016bee <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 8016b98:	687b      	ldr	r3, [r7, #4]
 8016b9a:	685b      	ldr	r3, [r3, #4]
 8016b9c:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 8016b9e:	697b      	ldr	r3, [r7, #20]
 8016ba0:	681a      	ldr	r2, [r3, #0]
 8016ba2:	687b      	ldr	r3, [r7, #4]
 8016ba4:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 8016ba6:	69bb      	ldr	r3, [r7, #24]
 8016ba8:	6858      	ldr	r0, [r3, #4]
 8016baa:	687b      	ldr	r3, [r7, #4]
 8016bac:	3308      	adds	r3, #8
 8016bae:	2214      	movs	r2, #20
 8016bb0:	4619      	mov	r1, r3
 8016bb2:	f001 fc8e 	bl	80184d2 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 8016bb6:	2101      	movs	r1, #1
 8016bb8:	69b8      	ldr	r0, [r7, #24]
 8016bba:	f7ff fc47 	bl	801644c <icmp_time_exceeded>
    clen = pbuf_clen(p);
 8016bbe:	69b8      	ldr	r0, [r7, #24]
 8016bc0:	f7f6 fc60 	bl	800d484 <pbuf_clen>
 8016bc4:	4603      	mov	r3, r0
 8016bc6:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8016bc8:	8bfa      	ldrh	r2, [r7, #30]
 8016bca:	8a7b      	ldrh	r3, [r7, #18]
 8016bcc:	4413      	add	r3, r2
 8016bce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8016bd2:	db05      	blt.n	8016be0 <ip_reass_free_complete_datagram+0x98>
 8016bd4:	4b27      	ldr	r3, [pc, #156]	; (8016c74 <ip_reass_free_complete_datagram+0x12c>)
 8016bd6:	22bc      	movs	r2, #188	; 0xbc
 8016bd8:	492a      	ldr	r1, [pc, #168]	; (8016c84 <ip_reass_free_complete_datagram+0x13c>)
 8016bda:	4828      	ldr	r0, [pc, #160]	; (8016c7c <ip_reass_free_complete_datagram+0x134>)
 8016bdc:	f001 fd34 	bl	8018648 <iprintf>
    pbufs_freed += clen;
 8016be0:	8bfa      	ldrh	r2, [r7, #30]
 8016be2:	8a7b      	ldrh	r3, [r7, #18]
 8016be4:	4413      	add	r3, r2
 8016be6:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 8016be8:	69b8      	ldr	r0, [r7, #24]
 8016bea:	f7f6 fbb1 	bl	800d350 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 8016bee:	687b      	ldr	r3, [r7, #4]
 8016bf0:	685b      	ldr	r3, [r3, #4]
 8016bf2:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 8016bf4:	e01f      	b.n	8016c36 <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 8016bf6:	69bb      	ldr	r3, [r7, #24]
 8016bf8:	685b      	ldr	r3, [r3, #4]
 8016bfa:	617b      	str	r3, [r7, #20]
    pcur = p;
 8016bfc:	69bb      	ldr	r3, [r7, #24]
 8016bfe:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 8016c00:	697b      	ldr	r3, [r7, #20]
 8016c02:	681b      	ldr	r3, [r3, #0]
 8016c04:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 8016c06:	68f8      	ldr	r0, [r7, #12]
 8016c08:	f7f6 fc3c 	bl	800d484 <pbuf_clen>
 8016c0c:	4603      	mov	r3, r0
 8016c0e:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8016c10:	8bfa      	ldrh	r2, [r7, #30]
 8016c12:	8a7b      	ldrh	r3, [r7, #18]
 8016c14:	4413      	add	r3, r2
 8016c16:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8016c1a:	db05      	blt.n	8016c28 <ip_reass_free_complete_datagram+0xe0>
 8016c1c:	4b15      	ldr	r3, [pc, #84]	; (8016c74 <ip_reass_free_complete_datagram+0x12c>)
 8016c1e:	22cc      	movs	r2, #204	; 0xcc
 8016c20:	4918      	ldr	r1, [pc, #96]	; (8016c84 <ip_reass_free_complete_datagram+0x13c>)
 8016c22:	4816      	ldr	r0, [pc, #88]	; (8016c7c <ip_reass_free_complete_datagram+0x134>)
 8016c24:	f001 fd10 	bl	8018648 <iprintf>
    pbufs_freed += clen;
 8016c28:	8bfa      	ldrh	r2, [r7, #30]
 8016c2a:	8a7b      	ldrh	r3, [r7, #18]
 8016c2c:	4413      	add	r3, r2
 8016c2e:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 8016c30:	68f8      	ldr	r0, [r7, #12]
 8016c32:	f7f6 fb8d 	bl	800d350 <pbuf_free>
  while (p != NULL) {
 8016c36:	69bb      	ldr	r3, [r7, #24]
 8016c38:	2b00      	cmp	r3, #0
 8016c3a:	d1dc      	bne.n	8016bf6 <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 8016c3c:	6839      	ldr	r1, [r7, #0]
 8016c3e:	6878      	ldr	r0, [r7, #4]
 8016c40:	f000 f8c2 	bl	8016dc8 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= pbufs_freed);
 8016c44:	4b10      	ldr	r3, [pc, #64]	; (8016c88 <ip_reass_free_complete_datagram+0x140>)
 8016c46:	881b      	ldrh	r3, [r3, #0]
 8016c48:	8bfa      	ldrh	r2, [r7, #30]
 8016c4a:	429a      	cmp	r2, r3
 8016c4c:	d905      	bls.n	8016c5a <ip_reass_free_complete_datagram+0x112>
 8016c4e:	4b09      	ldr	r3, [pc, #36]	; (8016c74 <ip_reass_free_complete_datagram+0x12c>)
 8016c50:	22d2      	movs	r2, #210	; 0xd2
 8016c52:	490e      	ldr	r1, [pc, #56]	; (8016c8c <ip_reass_free_complete_datagram+0x144>)
 8016c54:	4809      	ldr	r0, [pc, #36]	; (8016c7c <ip_reass_free_complete_datagram+0x134>)
 8016c56:	f001 fcf7 	bl	8018648 <iprintf>
  ip_reass_pbufcount -= pbufs_freed;
 8016c5a:	4b0b      	ldr	r3, [pc, #44]	; (8016c88 <ip_reass_free_complete_datagram+0x140>)
 8016c5c:	881a      	ldrh	r2, [r3, #0]
 8016c5e:	8bfb      	ldrh	r3, [r7, #30]
 8016c60:	1ad3      	subs	r3, r2, r3
 8016c62:	b29a      	uxth	r2, r3
 8016c64:	4b08      	ldr	r3, [pc, #32]	; (8016c88 <ip_reass_free_complete_datagram+0x140>)
 8016c66:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 8016c68:	8bfb      	ldrh	r3, [r7, #30]
}
 8016c6a:	4618      	mov	r0, r3
 8016c6c:	3720      	adds	r7, #32
 8016c6e:	46bd      	mov	sp, r7
 8016c70:	bd80      	pop	{r7, pc}
 8016c72:	bf00      	nop
 8016c74:	0801b4bc 	.word	0x0801b4bc
 8016c78:	0801b4f8 	.word	0x0801b4f8
 8016c7c:	0801b504 	.word	0x0801b504
 8016c80:	0801b52c 	.word	0x0801b52c
 8016c84:	0801b540 	.word	0x0801b540
 8016c88:	20004358 	.word	0x20004358
 8016c8c:	0801b560 	.word	0x0801b560

08016c90 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 8016c90:	b580      	push	{r7, lr}
 8016c92:	b08a      	sub	sp, #40	; 0x28
 8016c94:	af00      	add	r7, sp, #0
 8016c96:	6078      	str	r0, [r7, #4]
 8016c98:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 8016c9a:	2300      	movs	r3, #0
 8016c9c:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 8016c9e:	2300      	movs	r3, #0
 8016ca0:	623b      	str	r3, [r7, #32]
    prev = NULL;
 8016ca2:	2300      	movs	r3, #0
 8016ca4:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 8016ca6:	2300      	movs	r3, #0
 8016ca8:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 8016caa:	2300      	movs	r3, #0
 8016cac:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 8016cae:	4b28      	ldr	r3, [pc, #160]	; (8016d50 <ip_reass_remove_oldest_datagram+0xc0>)
 8016cb0:	681b      	ldr	r3, [r3, #0]
 8016cb2:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8016cb4:	e030      	b.n	8016d18 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 8016cb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016cb8:	695a      	ldr	r2, [r3, #20]
 8016cba:	687b      	ldr	r3, [r7, #4]
 8016cbc:	68db      	ldr	r3, [r3, #12]
 8016cbe:	429a      	cmp	r2, r3
 8016cc0:	d10c      	bne.n	8016cdc <ip_reass_remove_oldest_datagram+0x4c>
 8016cc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016cc4:	699a      	ldr	r2, [r3, #24]
 8016cc6:	687b      	ldr	r3, [r7, #4]
 8016cc8:	691b      	ldr	r3, [r3, #16]
 8016cca:	429a      	cmp	r2, r3
 8016ccc:	d106      	bne.n	8016cdc <ip_reass_remove_oldest_datagram+0x4c>
 8016cce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016cd0:	899a      	ldrh	r2, [r3, #12]
 8016cd2:	687b      	ldr	r3, [r7, #4]
 8016cd4:	889b      	ldrh	r3, [r3, #4]
 8016cd6:	b29b      	uxth	r3, r3
 8016cd8:	429a      	cmp	r2, r3
 8016cda:	d014      	beq.n	8016d06 <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 8016cdc:	693b      	ldr	r3, [r7, #16]
 8016cde:	3301      	adds	r3, #1
 8016ce0:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 8016ce2:	6a3b      	ldr	r3, [r7, #32]
 8016ce4:	2b00      	cmp	r3, #0
 8016ce6:	d104      	bne.n	8016cf2 <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 8016ce8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016cea:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8016cec:	69fb      	ldr	r3, [r7, #28]
 8016cee:	61bb      	str	r3, [r7, #24]
 8016cf0:	e009      	b.n	8016d06 <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 8016cf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016cf4:	7fda      	ldrb	r2, [r3, #31]
 8016cf6:	6a3b      	ldr	r3, [r7, #32]
 8016cf8:	7fdb      	ldrb	r3, [r3, #31]
 8016cfa:	429a      	cmp	r2, r3
 8016cfc:	d803      	bhi.n	8016d06 <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 8016cfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016d00:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8016d02:	69fb      	ldr	r3, [r7, #28]
 8016d04:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 8016d06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016d08:	681b      	ldr	r3, [r3, #0]
 8016d0a:	2b00      	cmp	r3, #0
 8016d0c:	d001      	beq.n	8016d12 <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 8016d0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016d10:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 8016d12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016d14:	681b      	ldr	r3, [r3, #0]
 8016d16:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8016d18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016d1a:	2b00      	cmp	r3, #0
 8016d1c:	d1cb      	bne.n	8016cb6 <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 8016d1e:	6a3b      	ldr	r3, [r7, #32]
 8016d20:	2b00      	cmp	r3, #0
 8016d22:	d008      	beq.n	8016d36 <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 8016d24:	69b9      	ldr	r1, [r7, #24]
 8016d26:	6a38      	ldr	r0, [r7, #32]
 8016d28:	f7ff ff0e 	bl	8016b48 <ip_reass_free_complete_datagram>
 8016d2c:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 8016d2e:	697a      	ldr	r2, [r7, #20]
 8016d30:	68fb      	ldr	r3, [r7, #12]
 8016d32:	4413      	add	r3, r2
 8016d34:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 8016d36:	697a      	ldr	r2, [r7, #20]
 8016d38:	683b      	ldr	r3, [r7, #0]
 8016d3a:	429a      	cmp	r2, r3
 8016d3c:	da02      	bge.n	8016d44 <ip_reass_remove_oldest_datagram+0xb4>
 8016d3e:	693b      	ldr	r3, [r7, #16]
 8016d40:	2b01      	cmp	r3, #1
 8016d42:	dcac      	bgt.n	8016c9e <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 8016d44:	697b      	ldr	r3, [r7, #20]
}
 8016d46:	4618      	mov	r0, r3
 8016d48:	3728      	adds	r7, #40	; 0x28
 8016d4a:	46bd      	mov	sp, r7
 8016d4c:	bd80      	pop	{r7, pc}
 8016d4e:	bf00      	nop
 8016d50:	20004354 	.word	0x20004354

08016d54 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata*
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 8016d54:	b580      	push	{r7, lr}
 8016d56:	b084      	sub	sp, #16
 8016d58:	af00      	add	r7, sp, #0
 8016d5a:	6078      	str	r0, [r7, #4]
 8016d5c:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8016d5e:	2004      	movs	r0, #4
 8016d60:	f7f5 fd42 	bl	800c7e8 <memp_malloc>
 8016d64:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 8016d66:	68fb      	ldr	r3, [r7, #12]
 8016d68:	2b00      	cmp	r3, #0
 8016d6a:	d110      	bne.n	8016d8e <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 8016d6c:	6839      	ldr	r1, [r7, #0]
 8016d6e:	6878      	ldr	r0, [r7, #4]
 8016d70:	f7ff ff8e 	bl	8016c90 <ip_reass_remove_oldest_datagram>
 8016d74:	4602      	mov	r2, r0
 8016d76:	683b      	ldr	r3, [r7, #0]
 8016d78:	4293      	cmp	r3, r2
 8016d7a:	dc03      	bgt.n	8016d84 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8016d7c:	2004      	movs	r0, #4
 8016d7e:	f7f5 fd33 	bl	800c7e8 <memp_malloc>
 8016d82:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 8016d84:	68fb      	ldr	r3, [r7, #12]
 8016d86:	2b00      	cmp	r3, #0
 8016d88:	d101      	bne.n	8016d8e <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG,("Failed to alloc reassdata struct\n"));
      return NULL;
 8016d8a:	2300      	movs	r3, #0
 8016d8c:	e016      	b.n	8016dbc <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 8016d8e:	2220      	movs	r2, #32
 8016d90:	2100      	movs	r1, #0
 8016d92:	68f8      	ldr	r0, [r7, #12]
 8016d94:	f001 fba8 	bl	80184e8 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 8016d98:	68fb      	ldr	r3, [r7, #12]
 8016d9a:	2203      	movs	r2, #3
 8016d9c:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 8016d9e:	4b09      	ldr	r3, [pc, #36]	; (8016dc4 <ip_reass_enqueue_new_datagram+0x70>)
 8016da0:	681a      	ldr	r2, [r3, #0]
 8016da2:	68fb      	ldr	r3, [r7, #12]
 8016da4:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 8016da6:	4a07      	ldr	r2, [pc, #28]	; (8016dc4 <ip_reass_enqueue_new_datagram+0x70>)
 8016da8:	68fb      	ldr	r3, [r7, #12]
 8016daa:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 8016dac:	68fb      	ldr	r3, [r7, #12]
 8016dae:	3308      	adds	r3, #8
 8016db0:	2214      	movs	r2, #20
 8016db2:	6879      	ldr	r1, [r7, #4]
 8016db4:	4618      	mov	r0, r3
 8016db6:	f001 fb8c 	bl	80184d2 <memcpy>
  return ipr;
 8016dba:	68fb      	ldr	r3, [r7, #12]
}
 8016dbc:	4618      	mov	r0, r3
 8016dbe:	3710      	adds	r7, #16
 8016dc0:	46bd      	mov	sp, r7
 8016dc2:	bd80      	pop	{r7, pc}
 8016dc4:	20004354 	.word	0x20004354

08016dc8 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8016dc8:	b580      	push	{r7, lr}
 8016dca:	b082      	sub	sp, #8
 8016dcc:	af00      	add	r7, sp, #0
 8016dce:	6078      	str	r0, [r7, #4]
 8016dd0:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 8016dd2:	4b10      	ldr	r3, [pc, #64]	; (8016e14 <ip_reass_dequeue_datagram+0x4c>)
 8016dd4:	681b      	ldr	r3, [r3, #0]
 8016dd6:	687a      	ldr	r2, [r7, #4]
 8016dd8:	429a      	cmp	r2, r3
 8016dda:	d104      	bne.n	8016de6 <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 8016ddc:	687b      	ldr	r3, [r7, #4]
 8016dde:	681b      	ldr	r3, [r3, #0]
 8016de0:	4a0c      	ldr	r2, [pc, #48]	; (8016e14 <ip_reass_dequeue_datagram+0x4c>)
 8016de2:	6013      	str	r3, [r2, #0]
 8016de4:	e00d      	b.n	8016e02 <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 8016de6:	683b      	ldr	r3, [r7, #0]
 8016de8:	2b00      	cmp	r3, #0
 8016dea:	d106      	bne.n	8016dfa <ip_reass_dequeue_datagram+0x32>
 8016dec:	4b0a      	ldr	r3, [pc, #40]	; (8016e18 <ip_reass_dequeue_datagram+0x50>)
 8016dee:	f240 1245 	movw	r2, #325	; 0x145
 8016df2:	490a      	ldr	r1, [pc, #40]	; (8016e1c <ip_reass_dequeue_datagram+0x54>)
 8016df4:	480a      	ldr	r0, [pc, #40]	; (8016e20 <ip_reass_dequeue_datagram+0x58>)
 8016df6:	f001 fc27 	bl	8018648 <iprintf>
    prev->next = ipr->next;
 8016dfa:	687b      	ldr	r3, [r7, #4]
 8016dfc:	681a      	ldr	r2, [r3, #0]
 8016dfe:	683b      	ldr	r3, [r7, #0]
 8016e00:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 8016e02:	6879      	ldr	r1, [r7, #4]
 8016e04:	2004      	movs	r0, #4
 8016e06:	f7f5 fd41 	bl	800c88c <memp_free>
}
 8016e0a:	bf00      	nop
 8016e0c:	3708      	adds	r7, #8
 8016e0e:	46bd      	mov	sp, r7
 8016e10:	bd80      	pop	{r7, pc}
 8016e12:	bf00      	nop
 8016e14:	20004354 	.word	0x20004354
 8016e18:	0801b4bc 	.word	0x0801b4bc
 8016e1c:	0801b57c 	.word	0x0801b57c
 8016e20:	0801b504 	.word	0x0801b504

08016e24 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 8016e24:	b580      	push	{r7, lr}
 8016e26:	b08c      	sub	sp, #48	; 0x30
 8016e28:	af00      	add	r7, sp, #0
 8016e2a:	60f8      	str	r0, [r7, #12]
 8016e2c:	60b9      	str	r1, [r7, #8]
 8016e2e:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev=NULL;
 8016e30:	2300      	movs	r3, #0
 8016e32:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  struct ip_hdr *fraghdr;
  int valid = 1;
 8016e34:	2301      	movs	r3, #1
 8016e36:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr*)new_p->payload;
 8016e38:	68bb      	ldr	r3, [r7, #8]
 8016e3a:	685b      	ldr	r3, [r3, #4]
 8016e3c:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr)) - IPH_HL(fraghdr) * 4;
 8016e3e:	69fb      	ldr	r3, [r7, #28]
 8016e40:	885b      	ldrh	r3, [r3, #2]
 8016e42:	b29b      	uxth	r3, r3
 8016e44:	4618      	mov	r0, r3
 8016e46:	f7f5 f8e1 	bl	800c00c <lwip_htons>
 8016e4a:	4603      	mov	r3, r0
 8016e4c:	461a      	mov	r2, r3
 8016e4e:	69fb      	ldr	r3, [r7, #28]
 8016e50:	781b      	ldrb	r3, [r3, #0]
 8016e52:	b29b      	uxth	r3, r3
 8016e54:	f003 030f 	and.w	r3, r3, #15
 8016e58:	b29b      	uxth	r3, r3
 8016e5a:	009b      	lsls	r3, r3, #2
 8016e5c:	b29b      	uxth	r3, r3
 8016e5e:	1ad3      	subs	r3, r2, r3
 8016e60:	837b      	strh	r3, [r7, #26]
  offset = (lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) * 8;
 8016e62:	69fb      	ldr	r3, [r7, #28]
 8016e64:	88db      	ldrh	r3, [r3, #6]
 8016e66:	b29b      	uxth	r3, r3
 8016e68:	4618      	mov	r0, r3
 8016e6a:	f7f5 f8cf 	bl	800c00c <lwip_htons>
 8016e6e:	4603      	mov	r3, r0
 8016e70:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8016e74:	b29b      	uxth	r3, r3
 8016e76:	00db      	lsls	r3, r3, #3
 8016e78:	833b      	strh	r3, [r7, #24]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper*)new_p->payload;
 8016e7a:	68bb      	ldr	r3, [r7, #8]
 8016e7c:	685b      	ldr	r3, [r3, #4]
 8016e7e:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 8016e80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016e82:	2200      	movs	r2, #0
 8016e84:	701a      	strb	r2, [r3, #0]
 8016e86:	2200      	movs	r2, #0
 8016e88:	705a      	strb	r2, [r3, #1]
 8016e8a:	2200      	movs	r2, #0
 8016e8c:	709a      	strb	r2, [r3, #2]
 8016e8e:	2200      	movs	r2, #0
 8016e90:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 8016e92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016e94:	8b3a      	ldrh	r2, [r7, #24]
 8016e96:	809a      	strh	r2, [r3, #4]
  iprh->end = offset + len;
 8016e98:	8b3a      	ldrh	r2, [r7, #24]
 8016e9a:	8b7b      	ldrh	r3, [r7, #26]
 8016e9c:	4413      	add	r3, r2
 8016e9e:	b29a      	uxth	r2, r3
 8016ea0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016ea2:	80da      	strh	r2, [r3, #6]

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 8016ea4:	68fb      	ldr	r3, [r7, #12]
 8016ea6:	685b      	ldr	r3, [r3, #4]
 8016ea8:	627b      	str	r3, [r7, #36]	; 0x24
 8016eaa:	e061      	b.n	8016f70 <ip_reass_chain_frag_into_datagram_and_validate+0x14c>
    iprh_tmp = (struct ip_reass_helper*)q->payload;
 8016eac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016eae:	685b      	ldr	r3, [r3, #4]
 8016eb0:	617b      	str	r3, [r7, #20]
    if (iprh->start < iprh_tmp->start) {
 8016eb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016eb4:	889b      	ldrh	r3, [r3, #4]
 8016eb6:	b29a      	uxth	r2, r3
 8016eb8:	697b      	ldr	r3, [r7, #20]
 8016eba:	889b      	ldrh	r3, [r3, #4]
 8016ebc:	b29b      	uxth	r3, r3
 8016ebe:	429a      	cmp	r2, r3
 8016ec0:	d232      	bcs.n	8016f28 <ip_reass_chain_frag_into_datagram_and_validate+0x104>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 8016ec2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016ec4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8016ec6:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 8016ec8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016eca:	2b00      	cmp	r3, #0
 8016ecc:	d01f      	beq.n	8016f0e <ip_reass_chain_frag_into_datagram_and_validate+0xea>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 8016ece:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016ed0:	889b      	ldrh	r3, [r3, #4]
 8016ed2:	b29a      	uxth	r2, r3
 8016ed4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016ed6:	88db      	ldrh	r3, [r3, #6]
 8016ed8:	b29b      	uxth	r3, r3
 8016eda:	429a      	cmp	r2, r3
 8016edc:	f0c0 80e3 	bcc.w	80170a6 <ip_reass_chain_frag_into_datagram_and_validate+0x282>
 8016ee0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016ee2:	88db      	ldrh	r3, [r3, #6]
 8016ee4:	b29a      	uxth	r2, r3
 8016ee6:	697b      	ldr	r3, [r7, #20]
 8016ee8:	889b      	ldrh	r3, [r3, #4]
 8016eea:	b29b      	uxth	r3, r3
 8016eec:	429a      	cmp	r2, r3
 8016eee:	f200 80da 	bhi.w	80170a6 <ip_reass_chain_frag_into_datagram_and_validate+0x282>
          /* fragment overlaps with previous or following, throw away */
          goto freepbuf;
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 8016ef2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016ef4:	68ba      	ldr	r2, [r7, #8]
 8016ef6:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 8016ef8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016efa:	88db      	ldrh	r3, [r3, #6]
 8016efc:	b29a      	uxth	r2, r3
 8016efe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016f00:	889b      	ldrh	r3, [r3, #4]
 8016f02:	b29b      	uxth	r3, r3
 8016f04:	429a      	cmp	r2, r3
 8016f06:	d037      	beq.n	8016f78 <ip_reass_chain_frag_into_datagram_and_validate+0x154>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8016f08:	2300      	movs	r3, #0
 8016f0a:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 8016f0c:	e034      	b.n	8016f78 <ip_reass_chain_frag_into_datagram_and_validate+0x154>
        if (iprh->end > iprh_tmp->start) {
 8016f0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016f10:	88db      	ldrh	r3, [r3, #6]
 8016f12:	b29a      	uxth	r2, r3
 8016f14:	697b      	ldr	r3, [r7, #20]
 8016f16:	889b      	ldrh	r3, [r3, #4]
 8016f18:	b29b      	uxth	r3, r3
 8016f1a:	429a      	cmp	r2, r3
 8016f1c:	f200 80c5 	bhi.w	80170aa <ip_reass_chain_frag_into_datagram_and_validate+0x286>
        ipr->p = new_p;
 8016f20:	68fb      	ldr	r3, [r7, #12]
 8016f22:	68ba      	ldr	r2, [r7, #8]
 8016f24:	605a      	str	r2, [r3, #4]
      break;
 8016f26:	e027      	b.n	8016f78 <ip_reass_chain_frag_into_datagram_and_validate+0x154>
    } else if (iprh->start == iprh_tmp->start) {
 8016f28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016f2a:	889b      	ldrh	r3, [r3, #4]
 8016f2c:	b29a      	uxth	r2, r3
 8016f2e:	697b      	ldr	r3, [r7, #20]
 8016f30:	889b      	ldrh	r3, [r3, #4]
 8016f32:	b29b      	uxth	r3, r3
 8016f34:	429a      	cmp	r2, r3
 8016f36:	f000 80ba 	beq.w	80170ae <ip_reass_chain_frag_into_datagram_and_validate+0x28a>
      /* received the same datagram twice: no need to keep the datagram */
      goto freepbuf;
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 8016f3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016f3c:	889b      	ldrh	r3, [r3, #4]
 8016f3e:	b29a      	uxth	r2, r3
 8016f40:	697b      	ldr	r3, [r7, #20]
 8016f42:	88db      	ldrh	r3, [r3, #6]
 8016f44:	b29b      	uxth	r3, r3
 8016f46:	429a      	cmp	r2, r3
 8016f48:	f0c0 80b3 	bcc.w	80170b2 <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
      /* overlap: no need to keep the new datagram */
      goto freepbuf;
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 8016f4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016f4e:	2b00      	cmp	r3, #0
 8016f50:	d009      	beq.n	8016f66 <ip_reass_chain_frag_into_datagram_and_validate+0x142>
        if (iprh_prev->end != iprh_tmp->start) {
 8016f52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016f54:	88db      	ldrh	r3, [r3, #6]
 8016f56:	b29a      	uxth	r2, r3
 8016f58:	697b      	ldr	r3, [r7, #20]
 8016f5a:	889b      	ldrh	r3, [r3, #4]
 8016f5c:	b29b      	uxth	r3, r3
 8016f5e:	429a      	cmp	r2, r3
 8016f60:	d001      	beq.n	8016f66 <ip_reass_chain_frag_into_datagram_and_validate+0x142>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8016f62:	2300      	movs	r3, #0
 8016f64:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 8016f66:	697b      	ldr	r3, [r7, #20]
 8016f68:	681b      	ldr	r3, [r3, #0]
 8016f6a:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 8016f6c:	697b      	ldr	r3, [r7, #20]
 8016f6e:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 8016f70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016f72:	2b00      	cmp	r3, #0
 8016f74:	d19a      	bne.n	8016eac <ip_reass_chain_frag_into_datagram_and_validate+0x88>
 8016f76:	e000      	b.n	8016f7a <ip_reass_chain_frag_into_datagram_and_validate+0x156>
      break;
 8016f78:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 8016f7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016f7c:	2b00      	cmp	r3, #0
 8016f7e:	d12d      	bne.n	8016fdc <ip_reass_chain_frag_into_datagram_and_validate+0x1b8>
    if (iprh_prev != NULL) {
 8016f80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016f82:	2b00      	cmp	r3, #0
 8016f84:	d01c      	beq.n	8016fc0 <ip_reass_chain_frag_into_datagram_and_validate+0x19c>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 8016f86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016f88:	88db      	ldrh	r3, [r3, #6]
 8016f8a:	b29a      	uxth	r2, r3
 8016f8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016f8e:	889b      	ldrh	r3, [r3, #4]
 8016f90:	b29b      	uxth	r3, r3
 8016f92:	429a      	cmp	r2, r3
 8016f94:	d906      	bls.n	8016fa4 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
 8016f96:	4b51      	ldr	r3, [pc, #324]	; (80170dc <ip_reass_chain_frag_into_datagram_and_validate+0x2b8>)
 8016f98:	f240 12ab 	movw	r2, #427	; 0x1ab
 8016f9c:	4950      	ldr	r1, [pc, #320]	; (80170e0 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8016f9e:	4851      	ldr	r0, [pc, #324]	; (80170e4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 8016fa0:	f001 fb52 	bl	8018648 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 8016fa4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016fa6:	68ba      	ldr	r2, [r7, #8]
 8016fa8:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 8016faa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016fac:	88db      	ldrh	r3, [r3, #6]
 8016fae:	b29a      	uxth	r2, r3
 8016fb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016fb2:	889b      	ldrh	r3, [r3, #4]
 8016fb4:	b29b      	uxth	r3, r3
 8016fb6:	429a      	cmp	r2, r3
 8016fb8:	d010      	beq.n	8016fdc <ip_reass_chain_frag_into_datagram_and_validate+0x1b8>
        valid = 0;
 8016fba:	2300      	movs	r3, #0
 8016fbc:	623b      	str	r3, [r7, #32]
 8016fbe:	e00d      	b.n	8016fdc <ip_reass_chain_frag_into_datagram_and_validate+0x1b8>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 8016fc0:	68fb      	ldr	r3, [r7, #12]
 8016fc2:	685b      	ldr	r3, [r3, #4]
 8016fc4:	2b00      	cmp	r3, #0
 8016fc6:	d006      	beq.n	8016fd6 <ip_reass_chain_frag_into_datagram_and_validate+0x1b2>
 8016fc8:	4b44      	ldr	r3, [pc, #272]	; (80170dc <ip_reass_chain_frag_into_datagram_and_validate+0x2b8>)
 8016fca:	f44f 72da 	mov.w	r2, #436	; 0x1b4
 8016fce:	4946      	ldr	r1, [pc, #280]	; (80170e8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8016fd0:	4844      	ldr	r0, [pc, #272]	; (80170e4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 8016fd2:	f001 fb39 	bl	8018648 <iprintf>
        ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 8016fd6:	68fb      	ldr	r3, [r7, #12]
 8016fd8:	68ba      	ldr	r2, [r7, #8]
 8016fda:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 8016fdc:	687b      	ldr	r3, [r7, #4]
 8016fde:	2b00      	cmp	r3, #0
 8016fe0:	d105      	bne.n	8016fee <ip_reass_chain_frag_into_datagram_and_validate+0x1ca>
 8016fe2:	68fb      	ldr	r3, [r7, #12]
 8016fe4:	7f9b      	ldrb	r3, [r3, #30]
 8016fe6:	f003 0301 	and.w	r3, r3, #1
 8016fea:	2b00      	cmp	r3, #0
 8016fec:	d059      	beq.n	80170a2 <ip_reass_chain_frag_into_datagram_and_validate+0x27e>
    /* and had no holes so far */
    if (valid) {
 8016fee:	6a3b      	ldr	r3, [r7, #32]
 8016ff0:	2b00      	cmp	r3, #0
 8016ff2:	d04f      	beq.n	8017094 <ip_reass_chain_frag_into_datagram_and_validate+0x270>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper*)ipr->p->payload)->start != 0)) {
 8016ff4:	68fb      	ldr	r3, [r7, #12]
 8016ff6:	685b      	ldr	r3, [r3, #4]
 8016ff8:	2b00      	cmp	r3, #0
 8016ffa:	d006      	beq.n	801700a <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 8016ffc:	68fb      	ldr	r3, [r7, #12]
 8016ffe:	685b      	ldr	r3, [r3, #4]
 8017000:	685b      	ldr	r3, [r3, #4]
 8017002:	889b      	ldrh	r3, [r3, #4]
 8017004:	b29b      	uxth	r3, r3
 8017006:	2b00      	cmp	r3, #0
 8017008:	d002      	beq.n	8017010 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 801700a:	2300      	movs	r3, #0
 801700c:	623b      	str	r3, [r7, #32]
 801700e:	e041      	b.n	8017094 <ip_reass_chain_frag_into_datagram_and_validate+0x270>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 8017010:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017012:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 8017014:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017016:	681b      	ldr	r3, [r3, #0]
 8017018:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 801701a:	e012      	b.n	8017042 <ip_reass_chain_frag_into_datagram_and_validate+0x21e>
          iprh = (struct ip_reass_helper*)q->payload;
 801701c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801701e:	685b      	ldr	r3, [r3, #4]
 8017020:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 8017022:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017024:	88db      	ldrh	r3, [r3, #6]
 8017026:	b29a      	uxth	r2, r3
 8017028:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801702a:	889b      	ldrh	r3, [r3, #4]
 801702c:	b29b      	uxth	r3, r3
 801702e:	429a      	cmp	r2, r3
 8017030:	d002      	beq.n	8017038 <ip_reass_chain_frag_into_datagram_and_validate+0x214>
            valid = 0;
 8017032:	2300      	movs	r3, #0
 8017034:	623b      	str	r3, [r7, #32]
            break;
 8017036:	e007      	b.n	8017048 <ip_reass_chain_frag_into_datagram_and_validate+0x224>
          }
          iprh_prev = iprh;
 8017038:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801703a:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 801703c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801703e:	681b      	ldr	r3, [r3, #0]
 8017040:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 8017042:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017044:	2b00      	cmp	r3, #0
 8017046:	d1e9      	bne.n	801701c <ip_reass_chain_frag_into_datagram_and_validate+0x1f8>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 8017048:	6a3b      	ldr	r3, [r7, #32]
 801704a:	2b00      	cmp	r3, #0
 801704c:	d022      	beq.n	8017094 <ip_reass_chain_frag_into_datagram_and_validate+0x270>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 801704e:	68fb      	ldr	r3, [r7, #12]
 8017050:	685b      	ldr	r3, [r3, #4]
 8017052:	2b00      	cmp	r3, #0
 8017054:	d106      	bne.n	8017064 <ip_reass_chain_frag_into_datagram_and_validate+0x240>
 8017056:	4b21      	ldr	r3, [pc, #132]	; (80170dc <ip_reass_chain_frag_into_datagram_and_validate+0x2b8>)
 8017058:	f44f 72ea 	mov.w	r2, #468	; 0x1d4
 801705c:	4923      	ldr	r1, [pc, #140]	; (80170ec <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 801705e:	4821      	ldr	r0, [pc, #132]	; (80170e4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 8017060:	f001 faf2 	bl	8018648 <iprintf>
          LWIP_ASSERT("sanity check",
 8017064:	68fb      	ldr	r3, [r7, #12]
 8017066:	685b      	ldr	r3, [r3, #4]
 8017068:	685b      	ldr	r3, [r3, #4]
 801706a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801706c:	429a      	cmp	r2, r3
 801706e:	d106      	bne.n	801707e <ip_reass_chain_frag_into_datagram_and_validate+0x25a>
 8017070:	4b1a      	ldr	r3, [pc, #104]	; (80170dc <ip_reass_chain_frag_into_datagram_and_validate+0x2b8>)
 8017072:	f44f 72eb 	mov.w	r2, #470	; 0x1d6
 8017076:	491d      	ldr	r1, [pc, #116]	; (80170ec <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 8017078:	481a      	ldr	r0, [pc, #104]	; (80170e4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 801707a:	f001 fae5 	bl	8018648 <iprintf>
            ((struct ip_reass_helper*)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 801707e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017080:	681b      	ldr	r3, [r3, #0]
 8017082:	2b00      	cmp	r3, #0
 8017084:	d006      	beq.n	8017094 <ip_reass_chain_frag_into_datagram_and_validate+0x270>
 8017086:	4b15      	ldr	r3, [pc, #84]	; (80170dc <ip_reass_chain_frag_into_datagram_and_validate+0x2b8>)
 8017088:	f44f 72ec 	mov.w	r2, #472	; 0x1d8
 801708c:	4918      	ldr	r1, [pc, #96]	; (80170f0 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 801708e:	4815      	ldr	r0, [pc, #84]	; (80170e4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 8017090:	f001 fada 	bl	8018648 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 8017094:	6a3b      	ldr	r3, [r7, #32]
 8017096:	2b00      	cmp	r3, #0
 8017098:	bf14      	ite	ne
 801709a:	2301      	movne	r3, #1
 801709c:	2300      	moveq	r3, #0
 801709e:	b2db      	uxtb	r3, r3
 80170a0:	e018      	b.n	80170d4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b0>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 80170a2:	2300      	movs	r3, #0
 80170a4:	e016      	b.n	80170d4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b0>
#if IP_REASS_CHECK_OVERLAP
freepbuf:
 80170a6:	bf00      	nop
 80170a8:	e004      	b.n	80170b4 <ip_reass_chain_frag_into_datagram_and_validate+0x290>
          goto freepbuf;
 80170aa:	bf00      	nop
 80170ac:	e002      	b.n	80170b4 <ip_reass_chain_frag_into_datagram_and_validate+0x290>
      goto freepbuf;
 80170ae:	bf00      	nop
 80170b0:	e000      	b.n	80170b4 <ip_reass_chain_frag_into_datagram_and_validate+0x290>
      goto freepbuf;
 80170b2:	bf00      	nop
  ip_reass_pbufcount -= pbuf_clen(new_p);
 80170b4:	68b8      	ldr	r0, [r7, #8]
 80170b6:	f7f6 f9e5 	bl	800d484 <pbuf_clen>
 80170ba:	4603      	mov	r3, r0
 80170bc:	461a      	mov	r2, r3
 80170be:	4b0d      	ldr	r3, [pc, #52]	; (80170f4 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 80170c0:	881b      	ldrh	r3, [r3, #0]
 80170c2:	1a9b      	subs	r3, r3, r2
 80170c4:	b29a      	uxth	r2, r3
 80170c6:	4b0b      	ldr	r3, [pc, #44]	; (80170f4 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 80170c8:	801a      	strh	r2, [r3, #0]
  pbuf_free(new_p);
 80170ca:	68b8      	ldr	r0, [r7, #8]
 80170cc:	f7f6 f940 	bl	800d350 <pbuf_free>
  return IP_REASS_VALIDATE_PBUF_DROPPED;
 80170d0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
#endif /* IP_REASS_CHECK_OVERLAP */
}
 80170d4:	4618      	mov	r0, r3
 80170d6:	3730      	adds	r7, #48	; 0x30
 80170d8:	46bd      	mov	sp, r7
 80170da:	bd80      	pop	{r7, pc}
 80170dc:	0801b4bc 	.word	0x0801b4bc
 80170e0:	0801b598 	.word	0x0801b598
 80170e4:	0801b504 	.word	0x0801b504
 80170e8:	0801b5b8 	.word	0x0801b5b8
 80170ec:	0801b5f0 	.word	0x0801b5f0
 80170f0:	0801b600 	.word	0x0801b600
 80170f4:	20004358 	.word	0x20004358

080170f8 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 80170f8:	b580      	push	{r7, lr}
 80170fa:	b08e      	sub	sp, #56	; 0x38
 80170fc:	af00      	add	r7, sp, #0
 80170fe:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr*)p->payload;
 8017100:	687b      	ldr	r3, [r7, #4]
 8017102:	685b      	ldr	r3, [r3, #4]
 8017104:	62bb      	str	r3, [r7, #40]	; 0x28

  if ((IPH_HL(fraghdr) * 4) != IP_HLEN) {
 8017106:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017108:	781b      	ldrb	r3, [r3, #0]
 801710a:	f003 030f 	and.w	r3, r3, #15
 801710e:	009b      	lsls	r3, r3, #2
 8017110:	2b14      	cmp	r3, #20
 8017112:	f040 8131 	bne.w	8017378 <ip4_reass+0x280>
    LWIP_DEBUGF(IP_REASS_DEBUG,("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = (lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) * 8;
 8017116:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017118:	88db      	ldrh	r3, [r3, #6]
 801711a:	b29b      	uxth	r3, r3
 801711c:	4618      	mov	r0, r3
 801711e:	f7f4 ff75 	bl	800c00c <lwip_htons>
 8017122:	4603      	mov	r3, r0
 8017124:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8017128:	b29b      	uxth	r3, r3
 801712a:	00db      	lsls	r3, r3, #3
 801712c:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr)) - IPH_HL(fraghdr) * 4;
 801712e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017130:	885b      	ldrh	r3, [r3, #2]
 8017132:	b29b      	uxth	r3, r3
 8017134:	4618      	mov	r0, r3
 8017136:	f7f4 ff69 	bl	800c00c <lwip_htons>
 801713a:	4603      	mov	r3, r0
 801713c:	461a      	mov	r2, r3
 801713e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017140:	781b      	ldrb	r3, [r3, #0]
 8017142:	b29b      	uxth	r3, r3
 8017144:	f003 030f 	and.w	r3, r3, #15
 8017148:	b29b      	uxth	r3, r3
 801714a:	009b      	lsls	r3, r3, #2
 801714c:	b29b      	uxth	r3, r3
 801714e:	1ad3      	subs	r3, r2, r3
 8017150:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 8017152:	6878      	ldr	r0, [r7, #4]
 8017154:	f7f6 f996 	bl	800d484 <pbuf_clen>
 8017158:	4603      	mov	r3, r0
 801715a:	847b      	strh	r3, [r7, #34]	; 0x22
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 801715c:	4b8d      	ldr	r3, [pc, #564]	; (8017394 <ip4_reass+0x29c>)
 801715e:	881b      	ldrh	r3, [r3, #0]
 8017160:	461a      	mov	r2, r3
 8017162:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8017164:	4413      	add	r3, r2
 8017166:	2b0a      	cmp	r3, #10
 8017168:	dd10      	ble.n	801718c <ip4_reass+0x94>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 801716a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801716c:	4619      	mov	r1, r3
 801716e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8017170:	f7ff fd8e 	bl	8016c90 <ip_reass_remove_oldest_datagram>
 8017174:	4603      	mov	r3, r0
 8017176:	2b00      	cmp	r3, #0
 8017178:	f000 8100 	beq.w	801737c <ip4_reass+0x284>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 801717c:	4b85      	ldr	r3, [pc, #532]	; (8017394 <ip4_reass+0x29c>)
 801717e:	881b      	ldrh	r3, [r3, #0]
 8017180:	461a      	mov	r2, r3
 8017182:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8017184:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8017186:	2b0a      	cmp	r3, #10
 8017188:	f300 80f8 	bgt.w	801737c <ip4_reass+0x284>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 801718c:	4b82      	ldr	r3, [pc, #520]	; (8017398 <ip4_reass+0x2a0>)
 801718e:	681b      	ldr	r3, [r3, #0]
 8017190:	633b      	str	r3, [r7, #48]	; 0x30
 8017192:	e015      	b.n	80171c0 <ip4_reass+0xc8>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 8017194:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017196:	695a      	ldr	r2, [r3, #20]
 8017198:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801719a:	68db      	ldr	r3, [r3, #12]
 801719c:	429a      	cmp	r2, r3
 801719e:	d10c      	bne.n	80171ba <ip4_reass+0xc2>
 80171a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80171a2:	699a      	ldr	r2, [r3, #24]
 80171a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80171a6:	691b      	ldr	r3, [r3, #16]
 80171a8:	429a      	cmp	r2, r3
 80171aa:	d106      	bne.n	80171ba <ip4_reass+0xc2>
 80171ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80171ae:	899a      	ldrh	r2, [r3, #12]
 80171b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80171b2:	889b      	ldrh	r3, [r3, #4]
 80171b4:	b29b      	uxth	r3, r3
 80171b6:	429a      	cmp	r2, r3
 80171b8:	d006      	beq.n	80171c8 <ip4_reass+0xd0>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 80171ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80171bc:	681b      	ldr	r3, [r3, #0]
 80171be:	633b      	str	r3, [r7, #48]	; 0x30
 80171c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80171c2:	2b00      	cmp	r3, #0
 80171c4:	d1e6      	bne.n	8017194 <ip4_reass+0x9c>
 80171c6:	e000      	b.n	80171ca <ip4_reass+0xd2>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
        lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 80171c8:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 80171ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80171cc:	2b00      	cmp	r3, #0
 80171ce:	d109      	bne.n	80171e4 <ip4_reass+0xec>
  /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 80171d0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80171d2:	4619      	mov	r1, r3
 80171d4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80171d6:	f7ff fdbd 	bl	8016d54 <ip_reass_enqueue_new_datagram>
 80171da:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 80171dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80171de:	2b00      	cmp	r3, #0
 80171e0:	d11c      	bne.n	801721c <ip4_reass+0x124>
      goto nullreturn;
 80171e2:	e0ce      	b.n	8017382 <ip4_reass+0x28a>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 80171e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80171e6:	88db      	ldrh	r3, [r3, #6]
 80171e8:	b29b      	uxth	r3, r3
 80171ea:	4618      	mov	r0, r3
 80171ec:	f7f4 ff0e 	bl	800c00c <lwip_htons>
 80171f0:	4603      	mov	r3, r0
 80171f2:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80171f6:	2b00      	cmp	r3, #0
 80171f8:	d110      	bne.n	801721c <ip4_reass+0x124>
      ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 80171fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80171fc:	89db      	ldrh	r3, [r3, #14]
 80171fe:	4618      	mov	r0, r3
 8017200:	f7f4 ff04 	bl	800c00c <lwip_htons>
 8017204:	4603      	mov	r3, r0
 8017206:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 801720a:	2b00      	cmp	r3, #0
 801720c:	d006      	beq.n	801721c <ip4_reass+0x124>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 801720e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017210:	3308      	adds	r3, #8
 8017212:	2214      	movs	r2, #20
 8017214:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8017216:	4618      	mov	r0, r3
 8017218:	f001 f95b 	bl	80184d2 <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 801721c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801721e:	88db      	ldrh	r3, [r3, #6]
 8017220:	b29b      	uxth	r3, r3
 8017222:	f003 0320 	and.w	r3, r3, #32
 8017226:	2b00      	cmp	r3, #0
 8017228:	bf0c      	ite	eq
 801722a:	2301      	moveq	r3, #1
 801722c:	2300      	movne	r3, #0
 801722e:	b2db      	uxtb	r3, r3
 8017230:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 8017232:	69fb      	ldr	r3, [r7, #28]
 8017234:	2b00      	cmp	r3, #0
 8017236:	d00e      	beq.n	8017256 <ip4_reass+0x15e>
    u16_t datagram_len = (u16_t)(offset + len);
 8017238:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 801723a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801723c:	4413      	add	r3, r2
 801723e:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 8017240:	8b7a      	ldrh	r2, [r7, #26]
 8017242:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8017244:	429a      	cmp	r2, r3
 8017246:	f0c0 8099 	bcc.w	801737c <ip4_reass+0x284>
 801724a:	8b7b      	ldrh	r3, [r7, #26]
 801724c:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 8017250:	4293      	cmp	r3, r2
 8017252:	f200 8093 	bhi.w	801737c <ip4_reass+0x284>
      goto nullreturn;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 8017256:	69fa      	ldr	r2, [r7, #28]
 8017258:	6879      	ldr	r1, [r7, #4]
 801725a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801725c:	f7ff fde2 	bl	8016e24 <ip_reass_chain_frag_into_datagram_and_validate>
 8017260:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 8017262:	697b      	ldr	r3, [r7, #20]
 8017264:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8017268:	f000 808a 	beq.w	8017380 <ip4_reass+0x288>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 801726c:	4b49      	ldr	r3, [pc, #292]	; (8017394 <ip4_reass+0x29c>)
 801726e:	881a      	ldrh	r2, [r3, #0]
 8017270:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8017272:	4413      	add	r3, r2
 8017274:	b29a      	uxth	r2, r3
 8017276:	4b47      	ldr	r3, [pc, #284]	; (8017394 <ip4_reass+0x29c>)
 8017278:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 801727a:	69fb      	ldr	r3, [r7, #28]
 801727c:	2b00      	cmp	r3, #0
 801727e:	d00d      	beq.n	801729c <ip4_reass+0x1a4>
    u16_t datagram_len = (u16_t)(offset + len);
 8017280:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8017282:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8017284:	4413      	add	r3, r2
 8017286:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 8017288:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801728a:	8a7a      	ldrh	r2, [r7, #18]
 801728c:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 801728e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017290:	7f9b      	ldrb	r3, [r3, #30]
 8017292:	f043 0301 	orr.w	r3, r3, #1
 8017296:	b2da      	uxtb	r2, r3
 8017298:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801729a:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
     ("ip4_reass: last fragment seen, total len %"S16_F"\n",
      ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 801729c:	697b      	ldr	r3, [r7, #20]
 801729e:	2b01      	cmp	r3, #1
 80172a0:	d168      	bne.n	8017374 <ip4_reass+0x27c>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    ipr->datagram_len += IP_HLEN;
 80172a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80172a4:	8b9b      	ldrh	r3, [r3, #28]
 80172a6:	3314      	adds	r3, #20
 80172a8:	b29a      	uxth	r2, r3
 80172aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80172ac:	839a      	strh	r2, [r3, #28]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper*)ipr->p->payload)->next_pbuf;
 80172ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80172b0:	685b      	ldr	r3, [r3, #4]
 80172b2:	685b      	ldr	r3, [r3, #4]
 80172b4:	681b      	ldr	r3, [r3, #0]
 80172b6:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr*)(ipr->p->payload);
 80172b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80172ba:	685b      	ldr	r3, [r3, #4]
 80172bc:	685b      	ldr	r3, [r3, #4]
 80172be:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 80172c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80172c2:	3308      	adds	r3, #8
 80172c4:	2214      	movs	r2, #20
 80172c6:	4619      	mov	r1, r3
 80172c8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80172ca:	f001 f902 	bl	80184d2 <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(ipr->datagram_len));
 80172ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80172d0:	8b9b      	ldrh	r3, [r3, #28]
 80172d2:	4618      	mov	r0, r3
 80172d4:	f7f4 fe9a 	bl	800c00c <lwip_htons>
 80172d8:	4603      	mov	r3, r0
 80172da:	461a      	mov	r2, r3
 80172dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80172de:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 80172e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80172e2:	2200      	movs	r2, #0
 80172e4:	719a      	strb	r2, [r3, #6]
 80172e6:	2200      	movs	r2, #0
 80172e8:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 80172ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80172ec:	2200      	movs	r2, #0
 80172ee:	729a      	strb	r2, [r3, #10]
 80172f0:	2200      	movs	r2, #0
 80172f2:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 80172f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80172f6:	685b      	ldr	r3, [r3, #4]
 80172f8:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 80172fa:	e00e      	b.n	801731a <ip4_reass+0x222>
      iprh = (struct ip_reass_helper*)r->payload;
 80172fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80172fe:	685b      	ldr	r3, [r3, #4]
 8017300:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_header(r, -IP_HLEN);
 8017302:	f06f 0113 	mvn.w	r1, #19
 8017306:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8017308:	f7f5 fffe 	bl	800d308 <pbuf_header>
      pbuf_cat(p, r);
 801730c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 801730e:	6878      	ldr	r0, [r7, #4]
 8017310:	f7f6 f8f8 	bl	800d504 <pbuf_cat>
      r = iprh->next_pbuf;
 8017314:	68fb      	ldr	r3, [r7, #12]
 8017316:	681b      	ldr	r3, [r3, #0]
 8017318:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 801731a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801731c:	2b00      	cmp	r3, #0
 801731e:	d1ed      	bne.n	80172fc <ip4_reass+0x204>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 8017320:	4b1d      	ldr	r3, [pc, #116]	; (8017398 <ip4_reass+0x2a0>)
 8017322:	681b      	ldr	r3, [r3, #0]
 8017324:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8017326:	429a      	cmp	r2, r3
 8017328:	d102      	bne.n	8017330 <ip4_reass+0x238>
      ipr_prev = NULL;
 801732a:	2300      	movs	r3, #0
 801732c:	62fb      	str	r3, [r7, #44]	; 0x2c
 801732e:	e010      	b.n	8017352 <ip4_reass+0x25a>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8017330:	4b19      	ldr	r3, [pc, #100]	; (8017398 <ip4_reass+0x2a0>)
 8017332:	681b      	ldr	r3, [r3, #0]
 8017334:	62fb      	str	r3, [r7, #44]	; 0x2c
 8017336:	e007      	b.n	8017348 <ip4_reass+0x250>
        if (ipr_prev->next == ipr) {
 8017338:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801733a:	681b      	ldr	r3, [r3, #0]
 801733c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801733e:	429a      	cmp	r2, r3
 8017340:	d006      	beq.n	8017350 <ip4_reass+0x258>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8017342:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017344:	681b      	ldr	r3, [r3, #0]
 8017346:	62fb      	str	r3, [r7, #44]	; 0x2c
 8017348:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801734a:	2b00      	cmp	r3, #0
 801734c:	d1f4      	bne.n	8017338 <ip4_reass+0x240>
 801734e:	e000      	b.n	8017352 <ip4_reass+0x25a>
          break;
 8017350:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 8017352:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8017354:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8017356:	f7ff fd37 	bl	8016dc8 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    ip_reass_pbufcount -= pbuf_clen(p);
 801735a:	6878      	ldr	r0, [r7, #4]
 801735c:	f7f6 f892 	bl	800d484 <pbuf_clen>
 8017360:	4603      	mov	r3, r0
 8017362:	461a      	mov	r2, r3
 8017364:	4b0b      	ldr	r3, [pc, #44]	; (8017394 <ip4_reass+0x29c>)
 8017366:	881b      	ldrh	r3, [r3, #0]
 8017368:	1a9b      	subs	r3, r3, r2
 801736a:	b29a      	uxth	r2, r3
 801736c:	4b09      	ldr	r3, [pc, #36]	; (8017394 <ip4_reass+0x29c>)
 801736e:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 8017370:	687b      	ldr	r3, [r7, #4]
 8017372:	e00a      	b.n	801738a <ip4_reass+0x292>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG,("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 8017374:	2300      	movs	r3, #0
 8017376:	e008      	b.n	801738a <ip4_reass+0x292>
    goto nullreturn;
 8017378:	bf00      	nop
 801737a:	e002      	b.n	8017382 <ip4_reass+0x28a>

nullreturn:
 801737c:	bf00      	nop
 801737e:	e000      	b.n	8017382 <ip4_reass+0x28a>
    goto nullreturn;
 8017380:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG,("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 8017382:	6878      	ldr	r0, [r7, #4]
 8017384:	f7f5 ffe4 	bl	800d350 <pbuf_free>
  return NULL;
 8017388:	2300      	movs	r3, #0
}
 801738a:	4618      	mov	r0, r3
 801738c:	3738      	adds	r7, #56	; 0x38
 801738e:	46bd      	mov	sp, r7
 8017390:	bd80      	pop	{r7, pc}
 8017392:	bf00      	nop
 8017394:	20004358 	.word	0x20004358
 8017398:	20004354 	.word	0x20004354

0801739c <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref*
ip_frag_alloc_pbuf_custom_ref(void)
{
 801739c:	b580      	push	{r7, lr}
 801739e:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref*)memp_malloc(MEMP_FRAG_PBUF);
 80173a0:	2005      	movs	r0, #5
 80173a2:	f7f5 fa21 	bl	800c7e8 <memp_malloc>
 80173a6:	4603      	mov	r3, r0
}
 80173a8:	4618      	mov	r0, r3
 80173aa:	bd80      	pop	{r7, pc}

080173ac <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref* p)
{
 80173ac:	b580      	push	{r7, lr}
 80173ae:	b082      	sub	sp, #8
 80173b0:	af00      	add	r7, sp, #0
 80173b2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 80173b4:	687b      	ldr	r3, [r7, #4]
 80173b6:	2b00      	cmp	r3, #0
 80173b8:	d106      	bne.n	80173c8 <ip_frag_free_pbuf_custom_ref+0x1c>
 80173ba:	4b07      	ldr	r3, [pc, #28]	; (80173d8 <ip_frag_free_pbuf_custom_ref+0x2c>)
 80173bc:	f240 22ae 	movw	r2, #686	; 0x2ae
 80173c0:	4906      	ldr	r1, [pc, #24]	; (80173dc <ip_frag_free_pbuf_custom_ref+0x30>)
 80173c2:	4807      	ldr	r0, [pc, #28]	; (80173e0 <ip_frag_free_pbuf_custom_ref+0x34>)
 80173c4:	f001 f940 	bl	8018648 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 80173c8:	6879      	ldr	r1, [r7, #4]
 80173ca:	2005      	movs	r0, #5
 80173cc:	f7f5 fa5e 	bl	800c88c <memp_free>
}
 80173d0:	bf00      	nop
 80173d2:	3708      	adds	r7, #8
 80173d4:	46bd      	mov	sp, r7
 80173d6:	bd80      	pop	{r7, pc}
 80173d8:	0801b4bc 	.word	0x0801b4bc
 80173dc:	0801b624 	.word	0x0801b624
 80173e0:	0801b504 	.word	0x0801b504

080173e4 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 80173e4:	b580      	push	{r7, lr}
 80173e6:	b084      	sub	sp, #16
 80173e8:	af00      	add	r7, sp, #0
 80173ea:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref*)p;
 80173ec:	687b      	ldr	r3, [r7, #4]
 80173ee:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 80173f0:	68fb      	ldr	r3, [r7, #12]
 80173f2:	2b00      	cmp	r3, #0
 80173f4:	d106      	bne.n	8017404 <ipfrag_free_pbuf_custom+0x20>
 80173f6:	4b11      	ldr	r3, [pc, #68]	; (801743c <ipfrag_free_pbuf_custom+0x58>)
 80173f8:	f44f 722e 	mov.w	r2, #696	; 0x2b8
 80173fc:	4910      	ldr	r1, [pc, #64]	; (8017440 <ipfrag_free_pbuf_custom+0x5c>)
 80173fe:	4811      	ldr	r0, [pc, #68]	; (8017444 <ipfrag_free_pbuf_custom+0x60>)
 8017400:	f001 f922 	bl	8018648 <iprintf>
  LWIP_ASSERT("pcr == p", (void*)pcr == (void*)p);
 8017404:	68fa      	ldr	r2, [r7, #12]
 8017406:	687b      	ldr	r3, [r7, #4]
 8017408:	429a      	cmp	r2, r3
 801740a:	d006      	beq.n	801741a <ipfrag_free_pbuf_custom+0x36>
 801740c:	4b0b      	ldr	r3, [pc, #44]	; (801743c <ipfrag_free_pbuf_custom+0x58>)
 801740e:	f240 22b9 	movw	r2, #697	; 0x2b9
 8017412:	490d      	ldr	r1, [pc, #52]	; (8017448 <ipfrag_free_pbuf_custom+0x64>)
 8017414:	480b      	ldr	r0, [pc, #44]	; (8017444 <ipfrag_free_pbuf_custom+0x60>)
 8017416:	f001 f917 	bl	8018648 <iprintf>
  if (pcr->original != NULL) {
 801741a:	68fb      	ldr	r3, [r7, #12]
 801741c:	695b      	ldr	r3, [r3, #20]
 801741e:	2b00      	cmp	r3, #0
 8017420:	d004      	beq.n	801742c <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 8017422:	68fb      	ldr	r3, [r7, #12]
 8017424:	695b      	ldr	r3, [r3, #20]
 8017426:	4618      	mov	r0, r3
 8017428:	f7f5 ff92 	bl	800d350 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 801742c:	68f8      	ldr	r0, [r7, #12]
 801742e:	f7ff ffbd 	bl	80173ac <ip_frag_free_pbuf_custom_ref>
}
 8017432:	bf00      	nop
 8017434:	3710      	adds	r7, #16
 8017436:	46bd      	mov	sp, r7
 8017438:	bd80      	pop	{r7, pc}
 801743a:	bf00      	nop
 801743c:	0801b4bc 	.word	0x0801b4bc
 8017440:	0801b630 	.word	0x0801b630
 8017444:	0801b504 	.word	0x0801b504
 8017448:	0801b63c 	.word	0x0801b63c

0801744c <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 801744c:	b580      	push	{r7, lr}
 801744e:	b092      	sub	sp, #72	; 0x48
 8017450:	af02      	add	r7, sp, #8
 8017452:	60f8      	str	r0, [r7, #12]
 8017454:	60b9      	str	r1, [r7, #8]
 8017456:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 8017458:	2300      	movs	r3, #0
 801745a:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (netif->mtu - IP_HLEN) / 8;
 801745c:	68bb      	ldr	r3, [r7, #8]
 801745e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8017460:	3b14      	subs	r3, #20
 8017462:	2b00      	cmp	r3, #0
 8017464:	da00      	bge.n	8017468 <ip4_frag+0x1c>
 8017466:	3307      	adds	r3, #7
 8017468:	10db      	asrs	r3, r3, #3
 801746a:	867b      	strh	r3, [r7, #50]	; 0x32
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 801746c:	2314      	movs	r3, #20
 801746e:	86fb      	strh	r3, [r7, #54]	; 0x36
  u16_t tmp;

  original_iphdr = (struct ip_hdr *)p->payload;
 8017470:	68fb      	ldr	r3, [r7, #12]
 8017472:	685b      	ldr	r3, [r3, #4]
 8017474:	62fb      	str	r3, [r7, #44]	; 0x2c
  iphdr = original_iphdr;
 8017476:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017478:	62bb      	str	r3, [r7, #40]	; 0x28
  LWIP_ERROR("ip4_frag() does not support IP options", IPH_HL(iphdr) * 4 == IP_HLEN, return ERR_VAL);
 801747a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801747c:	781b      	ldrb	r3, [r3, #0]
 801747e:	f003 030f 	and.w	r3, r3, #15
 8017482:	009b      	lsls	r3, r3, #2
 8017484:	2b14      	cmp	r3, #20
 8017486:	d009      	beq.n	801749c <ip4_frag+0x50>
 8017488:	4b79      	ldr	r3, [pc, #484]	; (8017670 <ip4_frag+0x224>)
 801748a:	f240 22e1 	movw	r2, #737	; 0x2e1
 801748e:	4979      	ldr	r1, [pc, #484]	; (8017674 <ip4_frag+0x228>)
 8017490:	4879      	ldr	r0, [pc, #484]	; (8017678 <ip4_frag+0x22c>)
 8017492:	f001 f8d9 	bl	8018648 <iprintf>
 8017496:	f06f 0305 	mvn.w	r3, #5
 801749a:	e0e5      	b.n	8017668 <ip4_frag+0x21c>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 801749c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801749e:	88db      	ldrh	r3, [r3, #6]
 80174a0:	b29b      	uxth	r3, r3
 80174a2:	4618      	mov	r0, r3
 80174a4:	f7f4 fdb2 	bl	800c00c <lwip_htons>
 80174a8:	4603      	mov	r3, r0
 80174aa:	86bb      	strh	r3, [r7, #52]	; 0x34
  ofo = tmp & IP_OFFMASK;
 80174ac:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80174ae:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80174b2:	873b      	strh	r3, [r7, #56]	; 0x38
  LWIP_ERROR("ip_frag(): MF already set", (tmp & IP_MF) == 0, return ERR_VAL);
 80174b4:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80174b6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80174ba:	2b00      	cmp	r3, #0
 80174bc:	d009      	beq.n	80174d2 <ip4_frag+0x86>
 80174be:	4b6c      	ldr	r3, [pc, #432]	; (8017670 <ip4_frag+0x224>)
 80174c0:	f240 22e6 	movw	r2, #742	; 0x2e6
 80174c4:	496d      	ldr	r1, [pc, #436]	; (801767c <ip4_frag+0x230>)
 80174c6:	486c      	ldr	r0, [pc, #432]	; (8017678 <ip4_frag+0x22c>)
 80174c8:	f001 f8be 	bl	8018648 <iprintf>
 80174cc:	f06f 0305 	mvn.w	r3, #5
 80174d0:	e0ca      	b.n	8017668 <ip4_frag+0x21c>

  left = p->tot_len - IP_HLEN;
 80174d2:	68fb      	ldr	r3, [r7, #12]
 80174d4:	891b      	ldrh	r3, [r3, #8]
 80174d6:	3b14      	subs	r3, #20
 80174d8:	877b      	strh	r3, [r7, #58]	; 0x3a

  while (left) {
 80174da:	e0bc      	b.n	8017656 <ip4_frag+0x20a>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, nfb * 8);
 80174dc:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 80174de:	00da      	lsls	r2, r3, #3
 80174e0:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80174e2:	4293      	cmp	r3, r2
 80174e4:	bfa8      	it	ge
 80174e6:	4613      	movge	r3, r2
 80174e8:	84fb      	strh	r3, [r7, #38]	; 0x26
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 80174ea:	2200      	movs	r2, #0
 80174ec:	2114      	movs	r1, #20
 80174ee:	2002      	movs	r0, #2
 80174f0:	f7f5 fbbc 	bl	800cc6c <pbuf_alloc>
 80174f4:	6238      	str	r0, [r7, #32]
    if (rambuf == NULL) {
 80174f6:	6a3b      	ldr	r3, [r7, #32]
 80174f8:	2b00      	cmp	r3, #0
 80174fa:	f000 80b2 	beq.w	8017662 <ip4_frag+0x216>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 80174fe:	68fb      	ldr	r3, [r7, #12]
 8017500:	895b      	ldrh	r3, [r3, #10]
 8017502:	2b13      	cmp	r3, #19
 8017504:	d806      	bhi.n	8017514 <ip4_frag+0xc8>
 8017506:	4b5a      	ldr	r3, [pc, #360]	; (8017670 <ip4_frag+0x224>)
 8017508:	f240 3209 	movw	r2, #777	; 0x309
 801750c:	495c      	ldr	r1, [pc, #368]	; (8017680 <ip4_frag+0x234>)
 801750e:	485a      	ldr	r0, [pc, #360]	; (8017678 <ip4_frag+0x22c>)
 8017510:	f001 f89a 	bl	8018648 <iprintf>
                (p->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 8017514:	6a3b      	ldr	r3, [r7, #32]
 8017516:	685b      	ldr	r3, [r3, #4]
 8017518:	2214      	movs	r2, #20
 801751a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801751c:	4618      	mov	r0, r3
 801751e:	f000 ffd8 	bl	80184d2 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 8017522:	6a3b      	ldr	r3, [r7, #32]
 8017524:	685b      	ldr	r3, [r3, #4]
 8017526:	62bb      	str	r3, [r7, #40]	; 0x28

    left_to_copy = fragsize;
 8017528:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 801752a:	87bb      	strh	r3, [r7, #60]	; 0x3c
    while (left_to_copy) {
 801752c:	e04f      	b.n	80175ce <ip4_frag+0x182>
      struct pbuf_custom_ref *pcr;
      u16_t plen = p->len - poff;
 801752e:	68fb      	ldr	r3, [r7, #12]
 8017530:	895a      	ldrh	r2, [r3, #10]
 8017532:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8017534:	1ad3      	subs	r3, r2, r3
 8017536:	837b      	strh	r3, [r7, #26]
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 8017538:	8b7a      	ldrh	r2, [r7, #26]
 801753a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801753c:	4293      	cmp	r3, r2
 801753e:	bf28      	it	cs
 8017540:	4613      	movcs	r3, r2
 8017542:	87fb      	strh	r3, [r7, #62]	; 0x3e
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 8017544:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8017546:	2b00      	cmp	r3, #0
 8017548:	d105      	bne.n	8017556 <ip4_frag+0x10a>
        poff = 0;
 801754a:	2300      	movs	r3, #0
 801754c:	86fb      	strh	r3, [r7, #54]	; 0x36
        p = p->next;
 801754e:	68fb      	ldr	r3, [r7, #12]
 8017550:	681b      	ldr	r3, [r3, #0]
 8017552:	60fb      	str	r3, [r7, #12]
        continue;
 8017554:	e03b      	b.n	80175ce <ip4_frag+0x182>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 8017556:	f7ff ff21 	bl	801739c <ip_frag_alloc_pbuf_custom_ref>
 801755a:	6178      	str	r0, [r7, #20]
      if (pcr == NULL) {
 801755c:	697b      	ldr	r3, [r7, #20]
 801755e:	2b00      	cmp	r3, #0
 8017560:	d103      	bne.n	801756a <ip4_frag+0x11e>
        pbuf_free(rambuf);
 8017562:	6a38      	ldr	r0, [r7, #32]
 8017564:	f7f5 fef4 	bl	800d350 <pbuf_free>
        goto memerr;
 8017568:	e07c      	b.n	8017664 <ip4_frag+0x218>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 801756a:	6978      	ldr	r0, [r7, #20]
        (u8_t*)p->payload + poff, newpbuflen);
 801756c:	68fb      	ldr	r3, [r7, #12]
 801756e:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8017570:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8017572:	4413      	add	r3, r2
 8017574:	8ff9      	ldrh	r1, [r7, #62]	; 0x3e
 8017576:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8017578:	9201      	str	r2, [sp, #4]
 801757a:	9300      	str	r3, [sp, #0]
 801757c:	4603      	mov	r3, r0
 801757e:	2202      	movs	r2, #2
 8017580:	2004      	movs	r0, #4
 8017582:	f7f5 fd07 	bl	800cf94 <pbuf_alloced_custom>
 8017586:	6138      	str	r0, [r7, #16]
      if (newpbuf == NULL) {
 8017588:	693b      	ldr	r3, [r7, #16]
 801758a:	2b00      	cmp	r3, #0
 801758c:	d106      	bne.n	801759c <ip4_frag+0x150>
        ip_frag_free_pbuf_custom_ref(pcr);
 801758e:	6978      	ldr	r0, [r7, #20]
 8017590:	f7ff ff0c 	bl	80173ac <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 8017594:	6a38      	ldr	r0, [r7, #32]
 8017596:	f7f5 fedb 	bl	800d350 <pbuf_free>
        goto memerr;
 801759a:	e063      	b.n	8017664 <ip4_frag+0x218>
      }
      pbuf_ref(p);
 801759c:	68f8      	ldr	r0, [r7, #12]
 801759e:	f7f5 ff89 	bl	800d4b4 <pbuf_ref>
      pcr->original = p;
 80175a2:	697b      	ldr	r3, [r7, #20]
 80175a4:	68fa      	ldr	r2, [r7, #12]
 80175a6:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 80175a8:	697b      	ldr	r3, [r7, #20]
 80175aa:	4a36      	ldr	r2, [pc, #216]	; (8017684 <ip4_frag+0x238>)
 80175ac:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 80175ae:	6939      	ldr	r1, [r7, #16]
 80175b0:	6a38      	ldr	r0, [r7, #32]
 80175b2:	f7f5 ffa7 	bl	800d504 <pbuf_cat>
      left_to_copy -= newpbuflen;
 80175b6:	8fba      	ldrh	r2, [r7, #60]	; 0x3c
 80175b8:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80175ba:	1ad3      	subs	r3, r2, r3
 80175bc:	87bb      	strh	r3, [r7, #60]	; 0x3c
      if (left_to_copy) {
 80175be:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80175c0:	2b00      	cmp	r3, #0
 80175c2:	d004      	beq.n	80175ce <ip4_frag+0x182>
        poff = 0;
 80175c4:	2300      	movs	r3, #0
 80175c6:	86fb      	strh	r3, [r7, #54]	; 0x36
        p = p->next;
 80175c8:	68fb      	ldr	r3, [r7, #12]
 80175ca:	681b      	ldr	r3, [r3, #0]
 80175cc:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 80175ce:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80175d0:	2b00      	cmp	r3, #0
 80175d2:	d1ac      	bne.n	801752e <ip4_frag+0xe2>
      }
    }
    poff += newpbuflen;
 80175d4:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80175d6:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80175d8:	4413      	add	r3, r2
 80175da:	86fb      	strh	r3, [r7, #54]	; 0x36
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 80175dc:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 80175de:	68bb      	ldr	r3, [r7, #8]
 80175e0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80175e2:	3b14      	subs	r3, #20
 80175e4:	429a      	cmp	r2, r3
 80175e6:	bfd4      	ite	le
 80175e8:	2301      	movle	r3, #1
 80175ea:	2300      	movgt	r3, #0
 80175ec:	b2db      	uxtb	r3, r3
 80175ee:	61fb      	str	r3, [r7, #28]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 80175f0:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80175f2:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80175f6:	86bb      	strh	r3, [r7, #52]	; 0x34
    if (!last) {
 80175f8:	69fb      	ldr	r3, [r7, #28]
 80175fa:	2b00      	cmp	r3, #0
 80175fc:	d103      	bne.n	8017606 <ip4_frag+0x1ba>
      tmp = tmp | IP_MF;
 80175fe:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8017600:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8017604:	86bb      	strh	r3, [r7, #52]	; 0x34
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 8017606:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8017608:	4618      	mov	r0, r3
 801760a:	f7f4 fcff 	bl	800c00c <lwip_htons>
 801760e:	4603      	mov	r3, r0
 8017610:	461a      	mov	r2, r3
 8017612:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017614:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons(fragsize + IP_HLEN));
 8017616:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8017618:	3314      	adds	r3, #20
 801761a:	b29b      	uxth	r3, r3
 801761c:	4618      	mov	r0, r3
 801761e:	f7f4 fcf5 	bl	800c00c <lwip_htons>
 8017622:	4603      	mov	r3, r0
 8017624:	461a      	mov	r2, r3
 8017626:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017628:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 801762a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801762c:	2200      	movs	r2, #0
 801762e:	729a      	strb	r2, [r3, #10]
 8017630:	2200      	movs	r2, #0
 8017632:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 8017634:	68bb      	ldr	r3, [r7, #8]
 8017636:	695b      	ldr	r3, [r3, #20]
 8017638:	687a      	ldr	r2, [r7, #4]
 801763a:	6a39      	ldr	r1, [r7, #32]
 801763c:	68b8      	ldr	r0, [r7, #8]
 801763e:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 8017640:	6a38      	ldr	r0, [r7, #32]
 8017642:	f7f5 fe85 	bl	800d350 <pbuf_free>
    left -= fragsize;
 8017646:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8017648:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 801764a:	1ad3      	subs	r3, r2, r3
 801764c:	877b      	strh	r3, [r7, #58]	; 0x3a
    ofo += nfb;
 801764e:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 8017650:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8017652:	4413      	add	r3, r2
 8017654:	873b      	strh	r3, [r7, #56]	; 0x38
  while (left) {
 8017656:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8017658:	2b00      	cmp	r3, #0
 801765a:	f47f af3f 	bne.w	80174dc <ip4_frag+0x90>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 801765e:	2300      	movs	r3, #0
 8017660:	e002      	b.n	8017668 <ip4_frag+0x21c>
      goto memerr;
 8017662:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 8017664:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8017668:	4618      	mov	r0, r3
 801766a:	3740      	adds	r7, #64	; 0x40
 801766c:	46bd      	mov	sp, r7
 801766e:	bd80      	pop	{r7, pc}
 8017670:	0801b4bc 	.word	0x0801b4bc
 8017674:	0801b648 	.word	0x0801b648
 8017678:	0801b504 	.word	0x0801b504
 801767c:	0801b670 	.word	0x0801b670
 8017680:	0801b68c 	.word	0x0801b68c
 8017684:	080173e5 	.word	0x080173e5

08017688 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 8017688:	b580      	push	{r7, lr}
 801768a:	b086      	sub	sp, #24
 801768c:	af00      	add	r7, sp, #0
 801768e:	6078      	str	r0, [r7, #4]
 8017690:	6039      	str	r1, [r7, #0]
  struct eth_hdr* ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  s16_t ip_hdr_offset = SIZEOF_ETH_HDR;
 8017692:	230e      	movs	r3, #14
 8017694:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  if (p->len <= SIZEOF_ETH_HDR) {
 8017696:	687b      	ldr	r3, [r7, #4]
 8017698:	895b      	ldrh	r3, [r3, #10]
 801769a:	2b0e      	cmp	r3, #14
 801769c:	d977      	bls.n	801778e <ethernet_input+0x106>
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 801769e:	687b      	ldr	r3, [r7, #4]
 80176a0:	685b      	ldr	r3, [r3, #4]
 80176a2:	613b      	str	r3, [r7, #16]
     (unsigned)ethhdr->dest.addr[3], (unsigned)ethhdr->dest.addr[4], (unsigned)ethhdr->dest.addr[5],
     (unsigned)ethhdr->src.addr[0],  (unsigned)ethhdr->src.addr[1],  (unsigned)ethhdr->src.addr[2],
     (unsigned)ethhdr->src.addr[3],  (unsigned)ethhdr->src.addr[4],  (unsigned)ethhdr->src.addr[5],
     lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 80176a4:	693b      	ldr	r3, [r7, #16]
 80176a6:	7b1a      	ldrb	r2, [r3, #12]
 80176a8:	7b5b      	ldrb	r3, [r3, #13]
 80176aa:	021b      	lsls	r3, r3, #8
 80176ac:	4313      	orrs	r3, r2
 80176ae:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 80176b0:	693b      	ldr	r3, [r7, #16]
 80176b2:	781b      	ldrb	r3, [r3, #0]
 80176b4:	f003 0301 	and.w	r3, r3, #1
 80176b8:	2b00      	cmp	r3, #0
 80176ba:	d023      	beq.n	8017704 <ethernet_input+0x7c>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 80176bc:	693b      	ldr	r3, [r7, #16]
 80176be:	781b      	ldrb	r3, [r3, #0]
 80176c0:	2b01      	cmp	r3, #1
 80176c2:	d10f      	bne.n	80176e4 <ethernet_input+0x5c>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 80176c4:	693b      	ldr	r3, [r7, #16]
 80176c6:	785b      	ldrb	r3, [r3, #1]
 80176c8:	2b00      	cmp	r3, #0
 80176ca:	d11b      	bne.n	8017704 <ethernet_input+0x7c>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 80176cc:	693b      	ldr	r3, [r7, #16]
 80176ce:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 80176d0:	2b5e      	cmp	r3, #94	; 0x5e
 80176d2:	d117      	bne.n	8017704 <ethernet_input+0x7c>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 80176d4:	687b      	ldr	r3, [r7, #4]
 80176d6:	7b5b      	ldrb	r3, [r3, #13]
 80176d8:	f043 0310 	orr.w	r3, r3, #16
 80176dc:	b2da      	uxtb	r2, r3
 80176de:	687b      	ldr	r3, [r7, #4]
 80176e0:	735a      	strb	r2, [r3, #13]
 80176e2:	e00f      	b.n	8017704 <ethernet_input+0x7c>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 80176e4:	693b      	ldr	r3, [r7, #16]
 80176e6:	2206      	movs	r2, #6
 80176e8:	4930      	ldr	r1, [pc, #192]	; (80177ac <ethernet_input+0x124>)
 80176ea:	4618      	mov	r0, r3
 80176ec:	f000 fee2 	bl	80184b4 <memcmp>
 80176f0:	4603      	mov	r3, r0
 80176f2:	2b00      	cmp	r3, #0
 80176f4:	d106      	bne.n	8017704 <ethernet_input+0x7c>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 80176f6:	687b      	ldr	r3, [r7, #4]
 80176f8:	7b5b      	ldrb	r3, [r3, #13]
 80176fa:	f043 0308 	orr.w	r3, r3, #8
 80176fe:	b2da      	uxtb	r2, r3
 8017700:	687b      	ldr	r3, [r7, #4]
 8017702:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 8017704:	89fb      	ldrh	r3, [r7, #14]
 8017706:	2b08      	cmp	r3, #8
 8017708:	d003      	beq.n	8017712 <ethernet_input+0x8a>
 801770a:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 801770e:	d01e      	beq.n	801774e <ethernet_input+0xc6>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 8017710:	e044      	b.n	801779c <ethernet_input+0x114>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8017712:	683b      	ldr	r3, [r7, #0]
 8017714:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8017718:	f003 0308 	and.w	r3, r3, #8
 801771c:	2b00      	cmp	r3, #0
 801771e:	d038      	beq.n	8017792 <ethernet_input+0x10a>
      if ((p->len < ip_hdr_offset) || pbuf_header(p, (s16_t)-ip_hdr_offset)) {
 8017720:	687b      	ldr	r3, [r7, #4]
 8017722:	895b      	ldrh	r3, [r3, #10]
 8017724:	461a      	mov	r2, r3
 8017726:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 801772a:	429a      	cmp	r2, r3
 801772c:	db33      	blt.n	8017796 <ethernet_input+0x10e>
 801772e:	8afb      	ldrh	r3, [r7, #22]
 8017730:	425b      	negs	r3, r3
 8017732:	b29b      	uxth	r3, r3
 8017734:	b21b      	sxth	r3, r3
 8017736:	4619      	mov	r1, r3
 8017738:	6878      	ldr	r0, [r7, #4]
 801773a:	f7f5 fde5 	bl	800d308 <pbuf_header>
 801773e:	4603      	mov	r3, r0
 8017740:	2b00      	cmp	r3, #0
 8017742:	d128      	bne.n	8017796 <ethernet_input+0x10e>
        ip4_input(p, netif);
 8017744:	6839      	ldr	r1, [r7, #0]
 8017746:	6878      	ldr	r0, [r7, #4]
 8017748:	f7fe ff62 	bl	8016610 <ip4_input>
      break;
 801774c:	e01d      	b.n	801778a <ethernet_input+0x102>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 801774e:	683b      	ldr	r3, [r7, #0]
 8017750:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8017754:	f003 0308 	and.w	r3, r3, #8
 8017758:	2b00      	cmp	r3, #0
 801775a:	d01e      	beq.n	801779a <ethernet_input+0x112>
      if ((p->len < ip_hdr_offset) || pbuf_header(p, (s16_t)-ip_hdr_offset)) {
 801775c:	687b      	ldr	r3, [r7, #4]
 801775e:	895b      	ldrh	r3, [r3, #10]
 8017760:	461a      	mov	r2, r3
 8017762:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8017766:	429a      	cmp	r2, r3
 8017768:	db15      	blt.n	8017796 <ethernet_input+0x10e>
 801776a:	8afb      	ldrh	r3, [r7, #22]
 801776c:	425b      	negs	r3, r3
 801776e:	b29b      	uxth	r3, r3
 8017770:	b21b      	sxth	r3, r3
 8017772:	4619      	mov	r1, r3
 8017774:	6878      	ldr	r0, [r7, #4]
 8017776:	f7f5 fdc7 	bl	800d308 <pbuf_header>
 801777a:	4603      	mov	r3, r0
 801777c:	2b00      	cmp	r3, #0
 801777e:	d10a      	bne.n	8017796 <ethernet_input+0x10e>
        etharp_input(p, netif);
 8017780:	6839      	ldr	r1, [r7, #0]
 8017782:	6878      	ldr	r0, [r7, #4]
 8017784:	f7fe f92c 	bl	80159e0 <etharp_input>
      break;
 8017788:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 801778a:	2300      	movs	r3, #0
 801778c:	e00a      	b.n	80177a4 <ethernet_input+0x11c>
    goto free_and_return;
 801778e:	bf00      	nop
 8017790:	e004      	b.n	801779c <ethernet_input+0x114>
        goto free_and_return;
 8017792:	bf00      	nop
 8017794:	e002      	b.n	801779c <ethernet_input+0x114>

free_and_return:
 8017796:	bf00      	nop
 8017798:	e000      	b.n	801779c <ethernet_input+0x114>
        goto free_and_return;
 801779a:	bf00      	nop
  pbuf_free(p);
 801779c:	6878      	ldr	r0, [r7, #4]
 801779e:	f7f5 fdd7 	bl	800d350 <pbuf_free>
  return ERR_OK;
 80177a2:	2300      	movs	r3, #0
}
 80177a4:	4618      	mov	r0, r3
 80177a6:	3718      	adds	r7, #24
 80177a8:	46bd      	mov	sp, r7
 80177aa:	bd80      	pop	{r7, pc}
 80177ac:	0801b8c8 	.word	0x0801b8c8

080177b0 <ethernet_output>:
 */
err_t
ethernet_output(struct netif* netif, struct pbuf* p,
                const struct eth_addr* src, const struct eth_addr* dst,
                u16_t eth_type)
{
 80177b0:	b580      	push	{r7, lr}
 80177b2:	b086      	sub	sp, #24
 80177b4:	af00      	add	r7, sp, #0
 80177b6:	60f8      	str	r0, [r7, #12]
 80177b8:	60b9      	str	r1, [r7, #8]
 80177ba:	607a      	str	r2, [r7, #4]
 80177bc:	603b      	str	r3, [r7, #0]
  struct eth_hdr* ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 80177be:	8c3b      	ldrh	r3, [r7, #32]
 80177c0:	4618      	mov	r0, r3
 80177c2:	f7f4 fc23 	bl	800c00c <lwip_htons>
 80177c6:	4603      	mov	r3, r0
 80177c8:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_header(p, SIZEOF_ETH_HDR) != 0) {
 80177ca:	210e      	movs	r1, #14
 80177cc:	68b8      	ldr	r0, [r7, #8]
 80177ce:	f7f5 fd9b 	bl	800d308 <pbuf_header>
 80177d2:	4603      	mov	r3, r0
 80177d4:	2b00      	cmp	r3, #0
 80177d6:	d125      	bne.n	8017824 <ethernet_output+0x74>
      goto pbuf_header_failed;
    }
  }

  ethhdr = (struct eth_hdr*)p->payload;
 80177d8:	68bb      	ldr	r3, [r7, #8]
 80177da:	685b      	ldr	r3, [r3, #4]
 80177dc:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 80177de:	693b      	ldr	r3, [r7, #16]
 80177e0:	8afa      	ldrh	r2, [r7, #22]
 80177e2:	819a      	strh	r2, [r3, #12]
  ETHADDR32_COPY(&ethhdr->dest, dst);
 80177e4:	693b      	ldr	r3, [r7, #16]
 80177e6:	2206      	movs	r2, #6
 80177e8:	6839      	ldr	r1, [r7, #0]
 80177ea:	4618      	mov	r0, r3
 80177ec:	f000 fe71 	bl	80184d2 <memcpy>
  ETHADDR16_COPY(&ethhdr->src,  src);
 80177f0:	693b      	ldr	r3, [r7, #16]
 80177f2:	3306      	adds	r3, #6
 80177f4:	2206      	movs	r2, #6
 80177f6:	6879      	ldr	r1, [r7, #4]
 80177f8:	4618      	mov	r0, r3
 80177fa:	f000 fe6a 	bl	80184d2 <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 80177fe:	68fb      	ldr	r3, [r7, #12]
 8017800:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8017804:	2b06      	cmp	r3, #6
 8017806:	d006      	beq.n	8017816 <ethernet_output+0x66>
 8017808:	4b0a      	ldr	r3, [pc, #40]	; (8017834 <ethernet_output+0x84>)
 801780a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 801780e:	490a      	ldr	r1, [pc, #40]	; (8017838 <ethernet_output+0x88>)
 8017810:	480a      	ldr	r0, [pc, #40]	; (801783c <ethernet_output+0x8c>)
 8017812:	f000 ff19 	bl	8018648 <iprintf>
    (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
    ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 8017816:	68fb      	ldr	r3, [r7, #12]
 8017818:	699b      	ldr	r3, [r3, #24]
 801781a:	68b9      	ldr	r1, [r7, #8]
 801781c:	68f8      	ldr	r0, [r7, #12]
 801781e:	4798      	blx	r3
 8017820:	4603      	mov	r3, r0
 8017822:	e002      	b.n	801782a <ethernet_output+0x7a>
      goto pbuf_header_failed;
 8017824:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
    ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 8017826:	f06f 0301 	mvn.w	r3, #1
}
 801782a:	4618      	mov	r0, r3
 801782c:	3718      	adds	r7, #24
 801782e:	46bd      	mov	sp, r7
 8017830:	bd80      	pop	{r7, pc}
 8017832:	bf00      	nop
 8017834:	0801b6ac 	.word	0x0801b6ac
 8017838:	0801b6e4 	.word	0x0801b6e4
 801783c:	0801b718 	.word	0x0801b718

08017840 <sys_mbox_new>:
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 8017840:	b580      	push	{r7, lr}
 8017842:	b086      	sub	sp, #24
 8017844:	af00      	add	r7, sp, #0
 8017846:	6078      	str	r0, [r7, #4]
 8017848:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osMessageQDef(QUEUE, size, void *);
 801784a:	683b      	ldr	r3, [r7, #0]
 801784c:	60bb      	str	r3, [r7, #8]
 801784e:	2304      	movs	r3, #4
 8017850:	60fb      	str	r3, [r7, #12]
 8017852:	2300      	movs	r3, #0
 8017854:	613b      	str	r3, [r7, #16]
 8017856:	2300      	movs	r3, #0
 8017858:	617b      	str	r3, [r7, #20]
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
 801785a:	f107 0308 	add.w	r3, r7, #8
 801785e:	2100      	movs	r1, #0
 8017860:	4618      	mov	r0, r3
 8017862:	f7f1 fd89 	bl	8009378 <osMessageCreate>
 8017866:	4602      	mov	r2, r0
 8017868:	687b      	ldr	r3, [r7, #4]
 801786a:	601a      	str	r2, [r3, #0]
  if(lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used)
  {
    lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
  }
#endif /* SYS_STATS */
  if(*mbox == NULL)
 801786c:	687b      	ldr	r3, [r7, #4]
 801786e:	681b      	ldr	r3, [r3, #0]
 8017870:	2b00      	cmp	r3, #0
 8017872:	d102      	bne.n	801787a <sys_mbox_new+0x3a>
    return ERR_MEM;
 8017874:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8017878:	e000      	b.n	801787c <sys_mbox_new+0x3c>

  return ERR_OK;
 801787a:	2300      	movs	r3, #0
}
 801787c:	4618      	mov	r0, r3
 801787e:	3718      	adds	r7, #24
 8017880:	46bd      	mov	sp, r7
 8017882:	bd80      	pop	{r7, pc}

08017884 <sys_mbox_post>:
}

/*-----------------------------------------------------------------------------------*/
//   Posts the "msg" to the mailbox.
void sys_mbox_post(sys_mbox_t *mbox, void *data)
{
 8017884:	b580      	push	{r7, lr}
 8017886:	b082      	sub	sp, #8
 8017888:	af00      	add	r7, sp, #0
 801788a:	6078      	str	r0, [r7, #4]
 801788c:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  while(osMessagePut(*mbox, (uint32_t)data, osWaitForever) != osOK);
 801788e:	bf00      	nop
 8017890:	687b      	ldr	r3, [r7, #4]
 8017892:	681b      	ldr	r3, [r3, #0]
 8017894:	6839      	ldr	r1, [r7, #0]
 8017896:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801789a:	4618      	mov	r0, r3
 801789c:	f7f1 fd96 	bl	80093cc <osMessagePut>
 80178a0:	4603      	mov	r3, r0
 80178a2:	2b00      	cmp	r3, #0
 80178a4:	d1f4      	bne.n	8017890 <sys_mbox_post+0xc>
#else
  while(osMessageQueuePut(*mbox, &data, 0, osWaitForever) != osOK);
#endif
}
 80178a6:	bf00      	nop
 80178a8:	3708      	adds	r7, #8
 80178aa:	46bd      	mov	sp, r7
 80178ac:	bd80      	pop	{r7, pc}

080178ae <sys_mbox_trypost>:


/*-----------------------------------------------------------------------------------*/
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
 80178ae:	b580      	push	{r7, lr}
 80178b0:	b084      	sub	sp, #16
 80178b2:	af00      	add	r7, sp, #0
 80178b4:	6078      	str	r0, [r7, #4]
 80178b6:	6039      	str	r1, [r7, #0]
  err_t result;
#if (osCMSIS < 0x20000U)
  if(osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
 80178b8:	687b      	ldr	r3, [r7, #4]
 80178ba:	681b      	ldr	r3, [r3, #0]
 80178bc:	6839      	ldr	r1, [r7, #0]
 80178be:	2200      	movs	r2, #0
 80178c0:	4618      	mov	r0, r3
 80178c2:	f7f1 fd83 	bl	80093cc <osMessagePut>
 80178c6:	4603      	mov	r3, r0
 80178c8:	2b00      	cmp	r3, #0
 80178ca:	d102      	bne.n	80178d2 <sys_mbox_trypost+0x24>
#else
  if(osMessageQueuePut(*mbox, &msg, 0, 0) == osOK)
#endif
  {
    result = ERR_OK;
 80178cc:	2300      	movs	r3, #0
 80178ce:	73fb      	strb	r3, [r7, #15]
 80178d0:	e001      	b.n	80178d6 <sys_mbox_trypost+0x28>
  }
  else
  {
    // could not post, queue must be full
    result = ERR_MEM;
 80178d2:	23ff      	movs	r3, #255	; 0xff
 80178d4:	73fb      	strb	r3, [r7, #15]
#if SYS_STATS
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */
  }

  return result;
 80178d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80178da:	4618      	mov	r0, r3
 80178dc:	3710      	adds	r7, #16
 80178de:	46bd      	mov	sp, r7
 80178e0:	bd80      	pop	{r7, pc}

080178e2 <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 80178e2:	b580      	push	{r7, lr}
 80178e4:	b08c      	sub	sp, #48	; 0x30
 80178e6:	af00      	add	r7, sp, #0
 80178e8:	61f8      	str	r0, [r7, #28]
 80178ea:	61b9      	str	r1, [r7, #24]
 80178ec:	617a      	str	r2, [r7, #20]
#if (osCMSIS < 0x20000U)
  osEvent event;
  uint32_t starttime = osKernelSysTick();
 80178ee:	f7f1 fbb4 	bl	800905a <osKernelSysTick>
 80178f2:	62f8      	str	r0, [r7, #44]	; 0x2c
#else
  osStatus_t status;
  uint32_t starttime = osKernelGetTickCount();
#endif
  if(timeout != 0)
 80178f4:	697b      	ldr	r3, [r7, #20]
 80178f6:	2b00      	cmp	r3, #0
 80178f8:	d017      	beq.n	801792a <sys_arch_mbox_fetch+0x48>
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, timeout);
 80178fa:	69fb      	ldr	r3, [r7, #28]
 80178fc:	6819      	ldr	r1, [r3, #0]
 80178fe:	f107 0320 	add.w	r3, r7, #32
 8017902:	697a      	ldr	r2, [r7, #20]
 8017904:	4618      	mov	r0, r3
 8017906:	f7f1 fda1 	bl	800944c <osMessageGet>

    if(event.status == osEventMessage)
 801790a:	6a3b      	ldr	r3, [r7, #32]
 801790c:	2b10      	cmp	r3, #16
 801790e:	d109      	bne.n	8017924 <sys_arch_mbox_fetch+0x42>
    {
      *msg = (void *)event.value.v;
 8017910:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017912:	461a      	mov	r2, r3
 8017914:	69bb      	ldr	r3, [r7, #24]
 8017916:	601a      	str	r2, [r3, #0]
      return (osKernelSysTick() - starttime);
 8017918:	f7f1 fb9f 	bl	800905a <osKernelSysTick>
 801791c:	4602      	mov	r2, r0
 801791e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017920:	1ad3      	subs	r3, r2, r3
 8017922:	e019      	b.n	8017958 <sys_arch_mbox_fetch+0x76>
      return (osKernelGetTickCount() - starttime);
    }
#endif
    else
    {
      return SYS_ARCH_TIMEOUT;
 8017924:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8017928:	e016      	b.n	8017958 <sys_arch_mbox_fetch+0x76>
    }
  }
  else
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, osWaitForever);
 801792a:	69fb      	ldr	r3, [r7, #28]
 801792c:	6819      	ldr	r1, [r3, #0]
 801792e:	463b      	mov	r3, r7
 8017930:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8017934:	4618      	mov	r0, r3
 8017936:	f7f1 fd89 	bl	800944c <osMessageGet>
 801793a:	f107 0320 	add.w	r3, r7, #32
 801793e:	463a      	mov	r2, r7
 8017940:	ca07      	ldmia	r2, {r0, r1, r2}
 8017942:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    *msg = (void *)event.value.v;
 8017946:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017948:	461a      	mov	r2, r3
 801794a:	69bb      	ldr	r3, [r7, #24]
 801794c:	601a      	str	r2, [r3, #0]
    return (osKernelSysTick() - starttime);
 801794e:	f7f1 fb84 	bl	800905a <osKernelSysTick>
 8017952:	4602      	mov	r2, r0
 8017954:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017956:	1ad3      	subs	r3, r2, r3
#else
    osMessageQueueGet(*mbox, msg, 0, osWaitForever );
    return (osKernelGetTickCount() - starttime);
#endif
  }
}
 8017958:	4618      	mov	r0, r3
 801795a:	3730      	adds	r7, #48	; 0x30
 801795c:	46bd      	mov	sp, r7
 801795e:	bd80      	pop	{r7, pc}

08017960 <sys_mbox_valid>:
    return SYS_MBOX_EMPTY;
  }
}
/*----------------------------------------------------------------------------------*/
int sys_mbox_valid(sys_mbox_t *mbox)
{
 8017960:	b480      	push	{r7}
 8017962:	b083      	sub	sp, #12
 8017964:	af00      	add	r7, sp, #0
 8017966:	6078      	str	r0, [r7, #4]
  if (*mbox == SYS_MBOX_NULL)
 8017968:	687b      	ldr	r3, [r7, #4]
 801796a:	681b      	ldr	r3, [r3, #0]
 801796c:	2b00      	cmp	r3, #0
 801796e:	d101      	bne.n	8017974 <sys_mbox_valid+0x14>
    return 0;
 8017970:	2300      	movs	r3, #0
 8017972:	e000      	b.n	8017976 <sys_mbox_valid+0x16>
  else
    return 1;
 8017974:	2301      	movs	r3, #1
}
 8017976:	4618      	mov	r0, r3
 8017978:	370c      	adds	r7, #12
 801797a:	46bd      	mov	sp, r7
 801797c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017980:	4770      	bx	lr
	...

08017984 <sys_init>:
#else
osMutexId_t lwip_sys_mutex;
#endif
// Initialize sys arch
void sys_init(void)
{
 8017984:	b580      	push	{r7, lr}
 8017986:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
 8017988:	4803      	ldr	r0, [pc, #12]	; (8017998 <sys_init+0x14>)
 801798a:	f7f1 fbd6 	bl	800913a <osMutexCreate>
 801798e:	4602      	mov	r2, r0
 8017990:	4b02      	ldr	r3, [pc, #8]	; (801799c <sys_init+0x18>)
 8017992:	601a      	str	r2, [r3, #0]
#else
  lwip_sys_mutex = osMutexNew(NULL);
#endif
}
 8017994:	bf00      	nop
 8017996:	bd80      	pop	{r7, pc}
 8017998:	0801b8d8 	.word	0x0801b8d8
 801799c:	2000ac7c 	.word	0x2000ac7c

080179a0 <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
 80179a0:	b580      	push	{r7, lr}
 80179a2:	b084      	sub	sp, #16
 80179a4:	af00      	add	r7, sp, #0
 80179a6:	6078      	str	r0, [r7, #4]

#if (osCMSIS < 0x20000U)
  osMutexDef(MUTEX);
 80179a8:	2300      	movs	r3, #0
 80179aa:	60bb      	str	r3, [r7, #8]
 80179ac:	2300      	movs	r3, #0
 80179ae:	60fb      	str	r3, [r7, #12]
  *mutex = osMutexCreate(osMutex(MUTEX));
 80179b0:	f107 0308 	add.w	r3, r7, #8
 80179b4:	4618      	mov	r0, r3
 80179b6:	f7f1 fbc0 	bl	800913a <osMutexCreate>
 80179ba:	4602      	mov	r2, r0
 80179bc:	687b      	ldr	r3, [r7, #4]
 80179be:	601a      	str	r2, [r3, #0]
#else
  *mutex = osMutexNew(NULL);
#endif

  if(*mutex == NULL)
 80179c0:	687b      	ldr	r3, [r7, #4]
 80179c2:	681b      	ldr	r3, [r3, #0]
 80179c4:	2b00      	cmp	r3, #0
 80179c6:	d102      	bne.n	80179ce <sys_mutex_new+0x2e>
  {
#if SYS_STATS
    ++lwip_stats.sys.mutex.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 80179c8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80179cc:	e000      	b.n	80179d0 <sys_mutex_new+0x30>
  ++lwip_stats.sys.mutex.used;
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
  }
#endif /* SYS_STATS */
  return ERR_OK;
 80179ce:	2300      	movs	r3, #0
}
 80179d0:	4618      	mov	r0, r3
 80179d2:	3710      	adds	r7, #16
 80179d4:	46bd      	mov	sp, r7
 80179d6:	bd80      	pop	{r7, pc}

080179d8 <sys_mutex_lock>:
  osMutexDelete(*mutex);
}
/*-----------------------------------------------------------------------------------*/
/* Lock a mutex*/
void sys_mutex_lock(sys_mutex_t *mutex)
{
 80179d8:	b580      	push	{r7, lr}
 80179da:	b082      	sub	sp, #8
 80179dc:	af00      	add	r7, sp, #0
 80179de:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  osMutexWait(*mutex, osWaitForever);
 80179e0:	687b      	ldr	r3, [r7, #4]
 80179e2:	681b      	ldr	r3, [r3, #0]
 80179e4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80179e8:	4618      	mov	r0, r3
 80179ea:	f7f1 fbbf 	bl	800916c <osMutexWait>
#else
  osMutexAcquire(*mutex, osWaitForever);
#endif
}
 80179ee:	bf00      	nop
 80179f0:	3708      	adds	r7, #8
 80179f2:	46bd      	mov	sp, r7
 80179f4:	bd80      	pop	{r7, pc}

080179f6 <sys_mutex_unlock>:

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
 80179f6:	b580      	push	{r7, lr}
 80179f8:	b082      	sub	sp, #8
 80179fa:	af00      	add	r7, sp, #0
 80179fc:	6078      	str	r0, [r7, #4]
  osMutexRelease(*mutex);
 80179fe:	687b      	ldr	r3, [r7, #4]
 8017a00:	681b      	ldr	r3, [r3, #0]
 8017a02:	4618      	mov	r0, r3
 8017a04:	f7f1 fc00 	bl	8009208 <osMutexRelease>
}
 8017a08:	bf00      	nop
 8017a0a:	3708      	adds	r7, #8
 8017a0c:	46bd      	mov	sp, r7
 8017a0e:	bd80      	pop	{r7, pc}

08017a10 <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 8017a10:	b580      	push	{r7, lr}
 8017a12:	b08c      	sub	sp, #48	; 0x30
 8017a14:	af00      	add	r7, sp, #0
 8017a16:	60f8      	str	r0, [r7, #12]
 8017a18:	60b9      	str	r1, [r7, #8]
 8017a1a:	607a      	str	r2, [r7, #4]
 8017a1c:	603b      	str	r3, [r7, #0]
#if (osCMSIS < 0x20000U)
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
 8017a1e:	f107 0314 	add.w	r3, r7, #20
 8017a22:	2200      	movs	r2, #0
 8017a24:	601a      	str	r2, [r3, #0]
 8017a26:	605a      	str	r2, [r3, #4]
 8017a28:	609a      	str	r2, [r3, #8]
 8017a2a:	60da      	str	r2, [r3, #12]
 8017a2c:	611a      	str	r2, [r3, #16]
 8017a2e:	615a      	str	r2, [r3, #20]
 8017a30:	619a      	str	r2, [r3, #24]
 8017a32:	68fb      	ldr	r3, [r7, #12]
 8017a34:	617b      	str	r3, [r7, #20]
 8017a36:	68bb      	ldr	r3, [r7, #8]
 8017a38:	61bb      	str	r3, [r7, #24]
 8017a3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017a3c:	b21b      	sxth	r3, r3
 8017a3e:	83bb      	strh	r3, [r7, #28]
 8017a40:	683b      	ldr	r3, [r7, #0]
 8017a42:	627b      	str	r3, [r7, #36]	; 0x24
  return osThreadCreate(&os_thread_def, arg);
 8017a44:	f107 0314 	add.w	r3, r7, #20
 8017a48:	6879      	ldr	r1, [r7, #4]
 8017a4a:	4618      	mov	r0, r3
 8017a4c:	f7f1 fb15 	bl	800907a <osThreadCreate>
 8017a50:	4603      	mov	r3, r0
                        .stack_size = stacksize,
                        .priority = (osPriority_t)prio,
                      };
  return osThreadNew(thread, arg, &attributes);
#endif
}
 8017a52:	4618      	mov	r0, r3
 8017a54:	3730      	adds	r7, #48	; 0x30
 8017a56:	46bd      	mov	sp, r7
 8017a58:	bd80      	pop	{r7, pc}
	...

08017a5c <sys_arch_protect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
sys_prot_t sys_arch_protect(void)
{
 8017a5c:	b580      	push	{r7, lr}
 8017a5e:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  osMutexWait(lwip_sys_mutex, osWaitForever);
 8017a60:	4b04      	ldr	r3, [pc, #16]	; (8017a74 <sys_arch_protect+0x18>)
 8017a62:	681b      	ldr	r3, [r3, #0]
 8017a64:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8017a68:	4618      	mov	r0, r3
 8017a6a:	f7f1 fb7f 	bl	800916c <osMutexWait>
#else
  osMutexAcquire(lwip_sys_mutex, osWaitForever);
#endif
  return (sys_prot_t)1;
 8017a6e:	2301      	movs	r3, #1
}
 8017a70:	4618      	mov	r0, r3
 8017a72:	bd80      	pop	{r7, pc}
 8017a74:	2000ac7c 	.word	0x2000ac7c

08017a78 <sys_arch_unprotect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
void sys_arch_unprotect(sys_prot_t pval)
{
 8017a78:	b580      	push	{r7, lr}
 8017a7a:	b082      	sub	sp, #8
 8017a7c:	af00      	add	r7, sp, #0
 8017a7e:	6078      	str	r0, [r7, #4]
  ( void ) pval;
  osMutexRelease(lwip_sys_mutex);
 8017a80:	4b04      	ldr	r3, [pc, #16]	; (8017a94 <sys_arch_unprotect+0x1c>)
 8017a82:	681b      	ldr	r3, [r3, #0]
 8017a84:	4618      	mov	r0, r3
 8017a86:	f7f1 fbbf 	bl	8009208 <osMutexRelease>
}
 8017a8a:	bf00      	nop
 8017a8c:	3708      	adds	r7, #8
 8017a8e:	46bd      	mov	sp, r7
 8017a90:	bd80      	pop	{r7, pc}
 8017a92:	bf00      	nop
 8017a94:	2000ac7c 	.word	0x2000ac7c

08017a98 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8017a98:	b580      	push	{r7, lr}
 8017a9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PreTreatment */
  
  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8017a9c:	2200      	movs	r2, #0
 8017a9e:	4912      	ldr	r1, [pc, #72]	; (8017ae8 <MX_USB_DEVICE_Init+0x50>)
 8017aa0:	4812      	ldr	r0, [pc, #72]	; (8017aec <MX_USB_DEVICE_Init+0x54>)
 8017aa2:	f7f0 fa4e 	bl	8007f42 <USBD_Init>
 8017aa6:	4603      	mov	r3, r0
 8017aa8:	2b00      	cmp	r3, #0
 8017aaa:	d001      	beq.n	8017ab0 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8017aac:	f7e9 fc8c 	bl	80013c8 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8017ab0:	490f      	ldr	r1, [pc, #60]	; (8017af0 <MX_USB_DEVICE_Init+0x58>)
 8017ab2:	480e      	ldr	r0, [pc, #56]	; (8017aec <MX_USB_DEVICE_Init+0x54>)
 8017ab4:	f7f0 fa70 	bl	8007f98 <USBD_RegisterClass>
 8017ab8:	4603      	mov	r3, r0
 8017aba:	2b00      	cmp	r3, #0
 8017abc:	d001      	beq.n	8017ac2 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8017abe:	f7e9 fc83 	bl	80013c8 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8017ac2:	490c      	ldr	r1, [pc, #48]	; (8017af4 <MX_USB_DEVICE_Init+0x5c>)
 8017ac4:	4809      	ldr	r0, [pc, #36]	; (8017aec <MX_USB_DEVICE_Init+0x54>)
 8017ac6:	f7f0 f9cd 	bl	8007e64 <USBD_CDC_RegisterInterface>
 8017aca:	4603      	mov	r3, r0
 8017acc:	2b00      	cmp	r3, #0
 8017ace:	d001      	beq.n	8017ad4 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8017ad0:	f7e9 fc7a 	bl	80013c8 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8017ad4:	4805      	ldr	r0, [pc, #20]	; (8017aec <MX_USB_DEVICE_Init+0x54>)
 8017ad6:	f7f0 fa79 	bl	8007fcc <USBD_Start>
 8017ada:	4603      	mov	r3, r0
 8017adc:	2b00      	cmp	r3, #0
 8017ade:	d001      	beq.n	8017ae4 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8017ae0:	f7e9 fc72 	bl	80013c8 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8017ae4:	bf00      	nop
 8017ae6:	bd80      	pop	{r7, pc}
 8017ae8:	2000013c 	.word	0x2000013c
 8017aec:	2000ac80 	.word	0x2000ac80
 8017af0:	20000014 	.word	0x20000014
 8017af4:	2000012c 	.word	0x2000012c

08017af8 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8017af8:	b580      	push	{r7, lr}
 8017afa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8017afc:	2200      	movs	r2, #0
 8017afe:	4905      	ldr	r1, [pc, #20]	; (8017b14 <CDC_Init_FS+0x1c>)
 8017b00:	4805      	ldr	r0, [pc, #20]	; (8017b18 <CDC_Init_FS+0x20>)
 8017b02:	f7f0 f9c6 	bl	8007e92 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8017b06:	4905      	ldr	r1, [pc, #20]	; (8017b1c <CDC_Init_FS+0x24>)
 8017b08:	4803      	ldr	r0, [pc, #12]	; (8017b18 <CDC_Init_FS+0x20>)
 8017b0a:	f7f0 f9dc 	bl	8007ec6 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8017b0e:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8017b10:	4618      	mov	r0, r3
 8017b12:	bd80      	pop	{r7, pc}
 8017b14:	2000b71c 	.word	0x2000b71c
 8017b18:	2000ac80 	.word	0x2000ac80
 8017b1c:	2000af1c 	.word	0x2000af1c

08017b20 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8017b20:	b480      	push	{r7}
 8017b22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8017b24:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8017b26:	4618      	mov	r0, r3
 8017b28:	46bd      	mov	sp, r7
 8017b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017b2e:	4770      	bx	lr

08017b30 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8017b30:	b480      	push	{r7}
 8017b32:	b083      	sub	sp, #12
 8017b34:	af00      	add	r7, sp, #0
 8017b36:	4603      	mov	r3, r0
 8017b38:	6039      	str	r1, [r7, #0]
 8017b3a:	71fb      	strb	r3, [r7, #7]
 8017b3c:	4613      	mov	r3, r2
 8017b3e:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8017b40:	79fb      	ldrb	r3, [r7, #7]
 8017b42:	2b23      	cmp	r3, #35	; 0x23
 8017b44:	d84a      	bhi.n	8017bdc <CDC_Control_FS+0xac>
 8017b46:	a201      	add	r2, pc, #4	; (adr r2, 8017b4c <CDC_Control_FS+0x1c>)
 8017b48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8017b4c:	08017bdd 	.word	0x08017bdd
 8017b50:	08017bdd 	.word	0x08017bdd
 8017b54:	08017bdd 	.word	0x08017bdd
 8017b58:	08017bdd 	.word	0x08017bdd
 8017b5c:	08017bdd 	.word	0x08017bdd
 8017b60:	08017bdd 	.word	0x08017bdd
 8017b64:	08017bdd 	.word	0x08017bdd
 8017b68:	08017bdd 	.word	0x08017bdd
 8017b6c:	08017bdd 	.word	0x08017bdd
 8017b70:	08017bdd 	.word	0x08017bdd
 8017b74:	08017bdd 	.word	0x08017bdd
 8017b78:	08017bdd 	.word	0x08017bdd
 8017b7c:	08017bdd 	.word	0x08017bdd
 8017b80:	08017bdd 	.word	0x08017bdd
 8017b84:	08017bdd 	.word	0x08017bdd
 8017b88:	08017bdd 	.word	0x08017bdd
 8017b8c:	08017bdd 	.word	0x08017bdd
 8017b90:	08017bdd 	.word	0x08017bdd
 8017b94:	08017bdd 	.word	0x08017bdd
 8017b98:	08017bdd 	.word	0x08017bdd
 8017b9c:	08017bdd 	.word	0x08017bdd
 8017ba0:	08017bdd 	.word	0x08017bdd
 8017ba4:	08017bdd 	.word	0x08017bdd
 8017ba8:	08017bdd 	.word	0x08017bdd
 8017bac:	08017bdd 	.word	0x08017bdd
 8017bb0:	08017bdd 	.word	0x08017bdd
 8017bb4:	08017bdd 	.word	0x08017bdd
 8017bb8:	08017bdd 	.word	0x08017bdd
 8017bbc:	08017bdd 	.word	0x08017bdd
 8017bc0:	08017bdd 	.word	0x08017bdd
 8017bc4:	08017bdd 	.word	0x08017bdd
 8017bc8:	08017bdd 	.word	0x08017bdd
 8017bcc:	08017bdd 	.word	0x08017bdd
 8017bd0:	08017bdd 	.word	0x08017bdd
 8017bd4:	08017bdd 	.word	0x08017bdd
 8017bd8:	08017bdd 	.word	0x08017bdd
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8017bdc:	bf00      	nop
  }

  return (USBD_OK);
 8017bde:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8017be0:	4618      	mov	r0, r3
 8017be2:	370c      	adds	r7, #12
 8017be4:	46bd      	mov	sp, r7
 8017be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017bea:	4770      	bx	lr

08017bec <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8017bec:	b580      	push	{r7, lr}
 8017bee:	b082      	sub	sp, #8
 8017bf0:	af00      	add	r7, sp, #0
 8017bf2:	6078      	str	r0, [r7, #4]
 8017bf4:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8017bf6:	6879      	ldr	r1, [r7, #4]
 8017bf8:	4805      	ldr	r0, [pc, #20]	; (8017c10 <CDC_Receive_FS+0x24>)
 8017bfa:	f7f0 f964 	bl	8007ec6 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8017bfe:	4804      	ldr	r0, [pc, #16]	; (8017c10 <CDC_Receive_FS+0x24>)
 8017c00:	f7f0 f975 	bl	8007eee <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8017c04:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8017c06:	4618      	mov	r0, r3
 8017c08:	3708      	adds	r7, #8
 8017c0a:	46bd      	mov	sp, r7
 8017c0c:	bd80      	pop	{r7, pc}
 8017c0e:	bf00      	nop
 8017c10:	2000ac80 	.word	0x2000ac80

08017c14 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8017c14:	b480      	push	{r7}
 8017c16:	b083      	sub	sp, #12
 8017c18:	af00      	add	r7, sp, #0
 8017c1a:	4603      	mov	r3, r0
 8017c1c:	6039      	str	r1, [r7, #0]
 8017c1e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8017c20:	683b      	ldr	r3, [r7, #0]
 8017c22:	2212      	movs	r2, #18
 8017c24:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8017c26:	4b03      	ldr	r3, [pc, #12]	; (8017c34 <USBD_FS_DeviceDescriptor+0x20>)
}
 8017c28:	4618      	mov	r0, r3
 8017c2a:	370c      	adds	r7, #12
 8017c2c:	46bd      	mov	sp, r7
 8017c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017c32:	4770      	bx	lr
 8017c34:	20000158 	.word	0x20000158

08017c38 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8017c38:	b480      	push	{r7}
 8017c3a:	b083      	sub	sp, #12
 8017c3c:	af00      	add	r7, sp, #0
 8017c3e:	4603      	mov	r3, r0
 8017c40:	6039      	str	r1, [r7, #0]
 8017c42:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8017c44:	683b      	ldr	r3, [r7, #0]
 8017c46:	2204      	movs	r2, #4
 8017c48:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8017c4a:	4b03      	ldr	r3, [pc, #12]	; (8017c58 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8017c4c:	4618      	mov	r0, r3
 8017c4e:	370c      	adds	r7, #12
 8017c50:	46bd      	mov	sp, r7
 8017c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017c56:	4770      	bx	lr
 8017c58:	2000016c 	.word	0x2000016c

08017c5c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8017c5c:	b580      	push	{r7, lr}
 8017c5e:	b082      	sub	sp, #8
 8017c60:	af00      	add	r7, sp, #0
 8017c62:	4603      	mov	r3, r0
 8017c64:	6039      	str	r1, [r7, #0]
 8017c66:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8017c68:	79fb      	ldrb	r3, [r7, #7]
 8017c6a:	2b00      	cmp	r3, #0
 8017c6c:	d105      	bne.n	8017c7a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8017c6e:	683a      	ldr	r2, [r7, #0]
 8017c70:	4907      	ldr	r1, [pc, #28]	; (8017c90 <USBD_FS_ProductStrDescriptor+0x34>)
 8017c72:	4808      	ldr	r0, [pc, #32]	; (8017c94 <USBD_FS_ProductStrDescriptor+0x38>)
 8017c74:	f7f1 f8e2 	bl	8008e3c <USBD_GetString>
 8017c78:	e004      	b.n	8017c84 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8017c7a:	683a      	ldr	r2, [r7, #0]
 8017c7c:	4904      	ldr	r1, [pc, #16]	; (8017c90 <USBD_FS_ProductStrDescriptor+0x34>)
 8017c7e:	4805      	ldr	r0, [pc, #20]	; (8017c94 <USBD_FS_ProductStrDescriptor+0x38>)
 8017c80:	f7f1 f8dc 	bl	8008e3c <USBD_GetString>
  }
  return USBD_StrDesc;
 8017c84:	4b02      	ldr	r3, [pc, #8]	; (8017c90 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8017c86:	4618      	mov	r0, r3
 8017c88:	3708      	adds	r7, #8
 8017c8a:	46bd      	mov	sp, r7
 8017c8c:	bd80      	pop	{r7, pc}
 8017c8e:	bf00      	nop
 8017c90:	2000bf1c 	.word	0x2000bf1c
 8017c94:	0801b740 	.word	0x0801b740

08017c98 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8017c98:	b580      	push	{r7, lr}
 8017c9a:	b082      	sub	sp, #8
 8017c9c:	af00      	add	r7, sp, #0
 8017c9e:	4603      	mov	r3, r0
 8017ca0:	6039      	str	r1, [r7, #0]
 8017ca2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8017ca4:	683a      	ldr	r2, [r7, #0]
 8017ca6:	4904      	ldr	r1, [pc, #16]	; (8017cb8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8017ca8:	4804      	ldr	r0, [pc, #16]	; (8017cbc <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8017caa:	f7f1 f8c7 	bl	8008e3c <USBD_GetString>
  return USBD_StrDesc;
 8017cae:	4b02      	ldr	r3, [pc, #8]	; (8017cb8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8017cb0:	4618      	mov	r0, r3
 8017cb2:	3708      	adds	r7, #8
 8017cb4:	46bd      	mov	sp, r7
 8017cb6:	bd80      	pop	{r7, pc}
 8017cb8:	2000bf1c 	.word	0x2000bf1c
 8017cbc:	0801b758 	.word	0x0801b758

08017cc0 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8017cc0:	b580      	push	{r7, lr}
 8017cc2:	b082      	sub	sp, #8
 8017cc4:	af00      	add	r7, sp, #0
 8017cc6:	4603      	mov	r3, r0
 8017cc8:	6039      	str	r1, [r7, #0]
 8017cca:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8017ccc:	683b      	ldr	r3, [r7, #0]
 8017cce:	221a      	movs	r2, #26
 8017cd0:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8017cd2:	f000 f843 	bl	8017d5c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */
  
  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8017cd6:	4b02      	ldr	r3, [pc, #8]	; (8017ce0 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8017cd8:	4618      	mov	r0, r3
 8017cda:	3708      	adds	r7, #8
 8017cdc:	46bd      	mov	sp, r7
 8017cde:	bd80      	pop	{r7, pc}
 8017ce0:	20000170 	.word	0x20000170

08017ce4 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8017ce4:	b580      	push	{r7, lr}
 8017ce6:	b082      	sub	sp, #8
 8017ce8:	af00      	add	r7, sp, #0
 8017cea:	4603      	mov	r3, r0
 8017cec:	6039      	str	r1, [r7, #0]
 8017cee:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8017cf0:	79fb      	ldrb	r3, [r7, #7]
 8017cf2:	2b00      	cmp	r3, #0
 8017cf4:	d105      	bne.n	8017d02 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8017cf6:	683a      	ldr	r2, [r7, #0]
 8017cf8:	4907      	ldr	r1, [pc, #28]	; (8017d18 <USBD_FS_ConfigStrDescriptor+0x34>)
 8017cfa:	4808      	ldr	r0, [pc, #32]	; (8017d1c <USBD_FS_ConfigStrDescriptor+0x38>)
 8017cfc:	f7f1 f89e 	bl	8008e3c <USBD_GetString>
 8017d00:	e004      	b.n	8017d0c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8017d02:	683a      	ldr	r2, [r7, #0]
 8017d04:	4904      	ldr	r1, [pc, #16]	; (8017d18 <USBD_FS_ConfigStrDescriptor+0x34>)
 8017d06:	4805      	ldr	r0, [pc, #20]	; (8017d1c <USBD_FS_ConfigStrDescriptor+0x38>)
 8017d08:	f7f1 f898 	bl	8008e3c <USBD_GetString>
  }
  return USBD_StrDesc;
 8017d0c:	4b02      	ldr	r3, [pc, #8]	; (8017d18 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8017d0e:	4618      	mov	r0, r3
 8017d10:	3708      	adds	r7, #8
 8017d12:	46bd      	mov	sp, r7
 8017d14:	bd80      	pop	{r7, pc}
 8017d16:	bf00      	nop
 8017d18:	2000bf1c 	.word	0x2000bf1c
 8017d1c:	0801b76c 	.word	0x0801b76c

08017d20 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8017d20:	b580      	push	{r7, lr}
 8017d22:	b082      	sub	sp, #8
 8017d24:	af00      	add	r7, sp, #0
 8017d26:	4603      	mov	r3, r0
 8017d28:	6039      	str	r1, [r7, #0]
 8017d2a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8017d2c:	79fb      	ldrb	r3, [r7, #7]
 8017d2e:	2b00      	cmp	r3, #0
 8017d30:	d105      	bne.n	8017d3e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8017d32:	683a      	ldr	r2, [r7, #0]
 8017d34:	4907      	ldr	r1, [pc, #28]	; (8017d54 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8017d36:	4808      	ldr	r0, [pc, #32]	; (8017d58 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8017d38:	f7f1 f880 	bl	8008e3c <USBD_GetString>
 8017d3c:	e004      	b.n	8017d48 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8017d3e:	683a      	ldr	r2, [r7, #0]
 8017d40:	4904      	ldr	r1, [pc, #16]	; (8017d54 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8017d42:	4805      	ldr	r0, [pc, #20]	; (8017d58 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8017d44:	f7f1 f87a 	bl	8008e3c <USBD_GetString>
  }
  return USBD_StrDesc;
 8017d48:	4b02      	ldr	r3, [pc, #8]	; (8017d54 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8017d4a:	4618      	mov	r0, r3
 8017d4c:	3708      	adds	r7, #8
 8017d4e:	46bd      	mov	sp, r7
 8017d50:	bd80      	pop	{r7, pc}
 8017d52:	bf00      	nop
 8017d54:	2000bf1c 	.word	0x2000bf1c
 8017d58:	0801b778 	.word	0x0801b778

08017d5c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor 
  * @param  None 
  * @retval None
  */
static void Get_SerialNum(void)
{
 8017d5c:	b580      	push	{r7, lr}
 8017d5e:	b084      	sub	sp, #16
 8017d60:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8017d62:	4b0f      	ldr	r3, [pc, #60]	; (8017da0 <Get_SerialNum+0x44>)
 8017d64:	681b      	ldr	r3, [r3, #0]
 8017d66:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8017d68:	4b0e      	ldr	r3, [pc, #56]	; (8017da4 <Get_SerialNum+0x48>)
 8017d6a:	681b      	ldr	r3, [r3, #0]
 8017d6c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8017d6e:	4b0e      	ldr	r3, [pc, #56]	; (8017da8 <Get_SerialNum+0x4c>)
 8017d70:	681b      	ldr	r3, [r3, #0]
 8017d72:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8017d74:	68fa      	ldr	r2, [r7, #12]
 8017d76:	687b      	ldr	r3, [r7, #4]
 8017d78:	4413      	add	r3, r2
 8017d7a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8017d7c:	68fb      	ldr	r3, [r7, #12]
 8017d7e:	2b00      	cmp	r3, #0
 8017d80:	d009      	beq.n	8017d96 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8017d82:	2208      	movs	r2, #8
 8017d84:	4909      	ldr	r1, [pc, #36]	; (8017dac <Get_SerialNum+0x50>)
 8017d86:	68f8      	ldr	r0, [r7, #12]
 8017d88:	f000 f814 	bl	8017db4 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8017d8c:	2204      	movs	r2, #4
 8017d8e:	4908      	ldr	r1, [pc, #32]	; (8017db0 <Get_SerialNum+0x54>)
 8017d90:	68b8      	ldr	r0, [r7, #8]
 8017d92:	f000 f80f 	bl	8017db4 <IntToUnicode>
  }
}
 8017d96:	bf00      	nop
 8017d98:	3710      	adds	r7, #16
 8017d9a:	46bd      	mov	sp, r7
 8017d9c:	bd80      	pop	{r7, pc}
 8017d9e:	bf00      	nop
 8017da0:	1fff7a10 	.word	0x1fff7a10
 8017da4:	1fff7a14 	.word	0x1fff7a14
 8017da8:	1fff7a18 	.word	0x1fff7a18
 8017dac:	20000172 	.word	0x20000172
 8017db0:	20000182 	.word	0x20000182

08017db4 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer 
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8017db4:	b480      	push	{r7}
 8017db6:	b087      	sub	sp, #28
 8017db8:	af00      	add	r7, sp, #0
 8017dba:	60f8      	str	r0, [r7, #12]
 8017dbc:	60b9      	str	r1, [r7, #8]
 8017dbe:	4613      	mov	r3, r2
 8017dc0:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8017dc2:	2300      	movs	r3, #0
 8017dc4:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8017dc6:	2300      	movs	r3, #0
 8017dc8:	75fb      	strb	r3, [r7, #23]
 8017dca:	e027      	b.n	8017e1c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8017dcc:	68fb      	ldr	r3, [r7, #12]
 8017dce:	0f1b      	lsrs	r3, r3, #28
 8017dd0:	2b09      	cmp	r3, #9
 8017dd2:	d80b      	bhi.n	8017dec <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8017dd4:	68fb      	ldr	r3, [r7, #12]
 8017dd6:	0f1b      	lsrs	r3, r3, #28
 8017dd8:	b2da      	uxtb	r2, r3
 8017dda:	7dfb      	ldrb	r3, [r7, #23]
 8017ddc:	005b      	lsls	r3, r3, #1
 8017dde:	4619      	mov	r1, r3
 8017de0:	68bb      	ldr	r3, [r7, #8]
 8017de2:	440b      	add	r3, r1
 8017de4:	3230      	adds	r2, #48	; 0x30
 8017de6:	b2d2      	uxtb	r2, r2
 8017de8:	701a      	strb	r2, [r3, #0]
 8017dea:	e00a      	b.n	8017e02 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8017dec:	68fb      	ldr	r3, [r7, #12]
 8017dee:	0f1b      	lsrs	r3, r3, #28
 8017df0:	b2da      	uxtb	r2, r3
 8017df2:	7dfb      	ldrb	r3, [r7, #23]
 8017df4:	005b      	lsls	r3, r3, #1
 8017df6:	4619      	mov	r1, r3
 8017df8:	68bb      	ldr	r3, [r7, #8]
 8017dfa:	440b      	add	r3, r1
 8017dfc:	3237      	adds	r2, #55	; 0x37
 8017dfe:	b2d2      	uxtb	r2, r2
 8017e00:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8017e02:	68fb      	ldr	r3, [r7, #12]
 8017e04:	011b      	lsls	r3, r3, #4
 8017e06:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8017e08:	7dfb      	ldrb	r3, [r7, #23]
 8017e0a:	005b      	lsls	r3, r3, #1
 8017e0c:	3301      	adds	r3, #1
 8017e0e:	68ba      	ldr	r2, [r7, #8]
 8017e10:	4413      	add	r3, r2
 8017e12:	2200      	movs	r2, #0
 8017e14:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8017e16:	7dfb      	ldrb	r3, [r7, #23]
 8017e18:	3301      	adds	r3, #1
 8017e1a:	75fb      	strb	r3, [r7, #23]
 8017e1c:	7dfa      	ldrb	r2, [r7, #23]
 8017e1e:	79fb      	ldrb	r3, [r7, #7]
 8017e20:	429a      	cmp	r2, r3
 8017e22:	d3d3      	bcc.n	8017dcc <IntToUnicode+0x18>
  }
}
 8017e24:	bf00      	nop
 8017e26:	371c      	adds	r7, #28
 8017e28:	46bd      	mov	sp, r7
 8017e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017e2e:	4770      	bx	lr

08017e30 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8017e30:	b580      	push	{r7, lr}
 8017e32:	b08a      	sub	sp, #40	; 0x28
 8017e34:	af00      	add	r7, sp, #0
 8017e36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8017e38:	f107 0314 	add.w	r3, r7, #20
 8017e3c:	2200      	movs	r2, #0
 8017e3e:	601a      	str	r2, [r3, #0]
 8017e40:	605a      	str	r2, [r3, #4]
 8017e42:	609a      	str	r2, [r3, #8]
 8017e44:	60da      	str	r2, [r3, #12]
 8017e46:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8017e48:	687b      	ldr	r3, [r7, #4]
 8017e4a:	681b      	ldr	r3, [r3, #0]
 8017e4c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8017e50:	d147      	bne.n	8017ee2 <HAL_PCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8017e52:	2300      	movs	r3, #0
 8017e54:	613b      	str	r3, [r7, #16]
 8017e56:	4b25      	ldr	r3, [pc, #148]	; (8017eec <HAL_PCD_MspInit+0xbc>)
 8017e58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017e5a:	4a24      	ldr	r2, [pc, #144]	; (8017eec <HAL_PCD_MspInit+0xbc>)
 8017e5c:	f043 0301 	orr.w	r3, r3, #1
 8017e60:	6313      	str	r3, [r2, #48]	; 0x30
 8017e62:	4b22      	ldr	r3, [pc, #136]	; (8017eec <HAL_PCD_MspInit+0xbc>)
 8017e64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017e66:	f003 0301 	and.w	r3, r3, #1
 8017e6a:	613b      	str	r3, [r7, #16]
 8017e6c:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8017e6e:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8017e72:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8017e74:	2302      	movs	r3, #2
 8017e76:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8017e78:	2300      	movs	r3, #0
 8017e7a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8017e7c:	2303      	movs	r3, #3
 8017e7e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8017e80:	230a      	movs	r3, #10
 8017e82:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8017e84:	f107 0314 	add.w	r3, r7, #20
 8017e88:	4619      	mov	r1, r3
 8017e8a:	4819      	ldr	r0, [pc, #100]	; (8017ef0 <HAL_PCD_MspInit+0xc0>)
 8017e8c:	f7ea fffc 	bl	8002e88 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8017e90:	f44f 7300 	mov.w	r3, #512	; 0x200
 8017e94:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8017e96:	2300      	movs	r3, #0
 8017e98:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8017e9a:	2300      	movs	r3, #0
 8017e9c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8017e9e:	f107 0314 	add.w	r3, r7, #20
 8017ea2:	4619      	mov	r1, r3
 8017ea4:	4812      	ldr	r0, [pc, #72]	; (8017ef0 <HAL_PCD_MspInit+0xc0>)
 8017ea6:	f7ea ffef 	bl	8002e88 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8017eaa:	4b10      	ldr	r3, [pc, #64]	; (8017eec <HAL_PCD_MspInit+0xbc>)
 8017eac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8017eae:	4a0f      	ldr	r2, [pc, #60]	; (8017eec <HAL_PCD_MspInit+0xbc>)
 8017eb0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8017eb4:	6353      	str	r3, [r2, #52]	; 0x34
 8017eb6:	2300      	movs	r3, #0
 8017eb8:	60fb      	str	r3, [r7, #12]
 8017eba:	4b0c      	ldr	r3, [pc, #48]	; (8017eec <HAL_PCD_MspInit+0xbc>)
 8017ebc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8017ebe:	4a0b      	ldr	r2, [pc, #44]	; (8017eec <HAL_PCD_MspInit+0xbc>)
 8017ec0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8017ec4:	6453      	str	r3, [r2, #68]	; 0x44
 8017ec6:	4b09      	ldr	r3, [pc, #36]	; (8017eec <HAL_PCD_MspInit+0xbc>)
 8017ec8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8017eca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8017ece:	60fb      	str	r3, [r7, #12]
 8017ed0:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 8017ed2:	2200      	movs	r2, #0
 8017ed4:	2105      	movs	r1, #5
 8017ed6:	2043      	movs	r0, #67	; 0x43
 8017ed8:	f7ea f814 	bl	8001f04 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8017edc:	2043      	movs	r0, #67	; 0x43
 8017ede:	f7ea f82d 	bl	8001f3c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8017ee2:	bf00      	nop
 8017ee4:	3728      	adds	r7, #40	; 0x28
 8017ee6:	46bd      	mov	sp, r7
 8017ee8:	bd80      	pop	{r7, pc}
 8017eea:	bf00      	nop
 8017eec:	40023800 	.word	0x40023800
 8017ef0:	40020000 	.word	0x40020000

08017ef4 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8017ef4:	b580      	push	{r7, lr}
 8017ef6:	b082      	sub	sp, #8
 8017ef8:	af00      	add	r7, sp, #0
 8017efa:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8017efc:	687b      	ldr	r3, [r7, #4]
 8017efe:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8017f02:	687b      	ldr	r3, [r7, #4]
 8017f04:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8017f08:	4619      	mov	r1, r3
 8017f0a:	4610      	mov	r0, r2
 8017f0c:	f7f0 f8a7 	bl	800805e <USBD_LL_SetupStage>
}
 8017f10:	bf00      	nop
 8017f12:	3708      	adds	r7, #8
 8017f14:	46bd      	mov	sp, r7
 8017f16:	bd80      	pop	{r7, pc}

08017f18 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8017f18:	b580      	push	{r7, lr}
 8017f1a:	b082      	sub	sp, #8
 8017f1c:	af00      	add	r7, sp, #0
 8017f1e:	6078      	str	r0, [r7, #4]
 8017f20:	460b      	mov	r3, r1
 8017f22:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8017f24:	687b      	ldr	r3, [r7, #4]
 8017f26:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8017f2a:	78fa      	ldrb	r2, [r7, #3]
 8017f2c:	6879      	ldr	r1, [r7, #4]
 8017f2e:	4613      	mov	r3, r2
 8017f30:	00db      	lsls	r3, r3, #3
 8017f32:	1a9b      	subs	r3, r3, r2
 8017f34:	009b      	lsls	r3, r3, #2
 8017f36:	440b      	add	r3, r1
 8017f38:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8017f3c:	681a      	ldr	r2, [r3, #0]
 8017f3e:	78fb      	ldrb	r3, [r7, #3]
 8017f40:	4619      	mov	r1, r3
 8017f42:	f7f0 f8d7 	bl	80080f4 <USBD_LL_DataOutStage>
}
 8017f46:	bf00      	nop
 8017f48:	3708      	adds	r7, #8
 8017f4a:	46bd      	mov	sp, r7
 8017f4c:	bd80      	pop	{r7, pc}

08017f4e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8017f4e:	b580      	push	{r7, lr}
 8017f50:	b082      	sub	sp, #8
 8017f52:	af00      	add	r7, sp, #0
 8017f54:	6078      	str	r0, [r7, #4]
 8017f56:	460b      	mov	r3, r1
 8017f58:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8017f5a:	687b      	ldr	r3, [r7, #4]
 8017f5c:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8017f60:	78fa      	ldrb	r2, [r7, #3]
 8017f62:	6879      	ldr	r1, [r7, #4]
 8017f64:	4613      	mov	r3, r2
 8017f66:	00db      	lsls	r3, r3, #3
 8017f68:	1a9b      	subs	r3, r3, r2
 8017f6a:	009b      	lsls	r3, r3, #2
 8017f6c:	440b      	add	r3, r1
 8017f6e:	3348      	adds	r3, #72	; 0x48
 8017f70:	681a      	ldr	r2, [r3, #0]
 8017f72:	78fb      	ldrb	r3, [r7, #3]
 8017f74:	4619      	mov	r1, r3
 8017f76:	f7f0 f92e 	bl	80081d6 <USBD_LL_DataInStage>
}
 8017f7a:	bf00      	nop
 8017f7c:	3708      	adds	r7, #8
 8017f7e:	46bd      	mov	sp, r7
 8017f80:	bd80      	pop	{r7, pc}

08017f82 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8017f82:	b580      	push	{r7, lr}
 8017f84:	b082      	sub	sp, #8
 8017f86:	af00      	add	r7, sp, #0
 8017f88:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8017f8a:	687b      	ldr	r3, [r7, #4]
 8017f8c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8017f90:	4618      	mov	r0, r3
 8017f92:	f7f0 fa3c 	bl	800840e <USBD_LL_SOF>
}
 8017f96:	bf00      	nop
 8017f98:	3708      	adds	r7, #8
 8017f9a:	46bd      	mov	sp, r7
 8017f9c:	bd80      	pop	{r7, pc}

08017f9e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{ 
 8017f9e:	b580      	push	{r7, lr}
 8017fa0:	b084      	sub	sp, #16
 8017fa2:	af00      	add	r7, sp, #0
 8017fa4:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8017fa6:	2301      	movs	r3, #1
 8017fa8:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8017faa:	687b      	ldr	r3, [r7, #4]
 8017fac:	68db      	ldr	r3, [r3, #12]
 8017fae:	2b00      	cmp	r3, #0
 8017fb0:	d102      	bne.n	8017fb8 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8017fb2:	2300      	movs	r3, #0
 8017fb4:	73fb      	strb	r3, [r7, #15]
 8017fb6:	e008      	b.n	8017fca <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8017fb8:	687b      	ldr	r3, [r7, #4]
 8017fba:	68db      	ldr	r3, [r3, #12]
 8017fbc:	2b02      	cmp	r3, #2
 8017fbe:	d102      	bne.n	8017fc6 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8017fc0:	2301      	movs	r3, #1
 8017fc2:	73fb      	strb	r3, [r7, #15]
 8017fc4:	e001      	b.n	8017fca <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8017fc6:	f7e9 f9ff 	bl	80013c8 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8017fca:	687b      	ldr	r3, [r7, #4]
 8017fcc:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8017fd0:	7bfa      	ldrb	r2, [r7, #15]
 8017fd2:	4611      	mov	r1, r2
 8017fd4:	4618      	mov	r0, r3
 8017fd6:	f7f0 f9e4 	bl	80083a2 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8017fda:	687b      	ldr	r3, [r7, #4]
 8017fdc:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8017fe0:	4618      	mov	r0, r3
 8017fe2:	f7f0 f99d 	bl	8008320 <USBD_LL_Reset>
}
 8017fe6:	bf00      	nop
 8017fe8:	3710      	adds	r7, #16
 8017fea:	46bd      	mov	sp, r7
 8017fec:	bd80      	pop	{r7, pc}
	...

08017ff0 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8017ff0:	b580      	push	{r7, lr}
 8017ff2:	b082      	sub	sp, #8
 8017ff4:	af00      	add	r7, sp, #0
 8017ff6:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8017ff8:	687b      	ldr	r3, [r7, #4]
 8017ffa:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8017ffe:	4618      	mov	r0, r3
 8018000:	f7f0 f9df 	bl	80083c2 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8018004:	687b      	ldr	r3, [r7, #4]
 8018006:	681b      	ldr	r3, [r3, #0]
 8018008:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 801800c:	681b      	ldr	r3, [r3, #0]
 801800e:	687a      	ldr	r2, [r7, #4]
 8018010:	6812      	ldr	r2, [r2, #0]
 8018012:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8018016:	f043 0301 	orr.w	r3, r3, #1
 801801a:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 801801c:	687b      	ldr	r3, [r7, #4]
 801801e:	6a1b      	ldr	r3, [r3, #32]
 8018020:	2b00      	cmp	r3, #0
 8018022:	d005      	beq.n	8018030 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8018024:	4b04      	ldr	r3, [pc, #16]	; (8018038 <HAL_PCD_SuspendCallback+0x48>)
 8018026:	691b      	ldr	r3, [r3, #16]
 8018028:	4a03      	ldr	r2, [pc, #12]	; (8018038 <HAL_PCD_SuspendCallback+0x48>)
 801802a:	f043 0306 	orr.w	r3, r3, #6
 801802e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8018030:	bf00      	nop
 8018032:	3708      	adds	r7, #8
 8018034:	46bd      	mov	sp, r7
 8018036:	bd80      	pop	{r7, pc}
 8018038:	e000ed00 	.word	0xe000ed00

0801803c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801803c:	b580      	push	{r7, lr}
 801803e:	b082      	sub	sp, #8
 8018040:	af00      	add	r7, sp, #0
 8018042:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8018044:	687b      	ldr	r3, [r7, #4]
 8018046:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801804a:	4618      	mov	r0, r3
 801804c:	f7f0 f9ce 	bl	80083ec <USBD_LL_Resume>
}
 8018050:	bf00      	nop
 8018052:	3708      	adds	r7, #8
 8018054:	46bd      	mov	sp, r7
 8018056:	bd80      	pop	{r7, pc}

08018058 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8018058:	b580      	push	{r7, lr}
 801805a:	b082      	sub	sp, #8
 801805c:	af00      	add	r7, sp, #0
 801805e:	6078      	str	r0, [r7, #4]
 8018060:	460b      	mov	r3, r1
 8018062:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8018064:	687b      	ldr	r3, [r7, #4]
 8018066:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801806a:	78fa      	ldrb	r2, [r7, #3]
 801806c:	4611      	mov	r1, r2
 801806e:	4618      	mov	r0, r3
 8018070:	f7f0 f9f4 	bl	800845c <USBD_LL_IsoOUTIncomplete>
}
 8018074:	bf00      	nop
 8018076:	3708      	adds	r7, #8
 8018078:	46bd      	mov	sp, r7
 801807a:	bd80      	pop	{r7, pc}

0801807c <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801807c:	b580      	push	{r7, lr}
 801807e:	b082      	sub	sp, #8
 8018080:	af00      	add	r7, sp, #0
 8018082:	6078      	str	r0, [r7, #4]
 8018084:	460b      	mov	r3, r1
 8018086:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8018088:	687b      	ldr	r3, [r7, #4]
 801808a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801808e:	78fa      	ldrb	r2, [r7, #3]
 8018090:	4611      	mov	r1, r2
 8018092:	4618      	mov	r0, r3
 8018094:	f7f0 f9d5 	bl	8008442 <USBD_LL_IsoINIncomplete>
}
 8018098:	bf00      	nop
 801809a:	3708      	adds	r7, #8
 801809c:	46bd      	mov	sp, r7
 801809e:	bd80      	pop	{r7, pc}

080180a0 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80180a0:	b580      	push	{r7, lr}
 80180a2:	b082      	sub	sp, #8
 80180a4:	af00      	add	r7, sp, #0
 80180a6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 80180a8:	687b      	ldr	r3, [r7, #4]
 80180aa:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80180ae:	4618      	mov	r0, r3
 80180b0:	f7f0 f9e1 	bl	8008476 <USBD_LL_DevConnected>
}
 80180b4:	bf00      	nop
 80180b6:	3708      	adds	r7, #8
 80180b8:	46bd      	mov	sp, r7
 80180ba:	bd80      	pop	{r7, pc}

080180bc <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80180bc:	b580      	push	{r7, lr}
 80180be:	b082      	sub	sp, #8
 80180c0:	af00      	add	r7, sp, #0
 80180c2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 80180c4:	687b      	ldr	r3, [r7, #4]
 80180c6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80180ca:	4618      	mov	r0, r3
 80180cc:	f7f0 f9de 	bl	800848c <USBD_LL_DevDisconnected>
}
 80180d0:	bf00      	nop
 80180d2:	3708      	adds	r7, #8
 80180d4:	46bd      	mov	sp, r7
 80180d6:	bd80      	pop	{r7, pc}

080180d8 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80180d8:	b580      	push	{r7, lr}
 80180da:	b082      	sub	sp, #8
 80180dc:	af00      	add	r7, sp, #0
 80180de:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 80180e0:	687b      	ldr	r3, [r7, #4]
 80180e2:	781b      	ldrb	r3, [r3, #0]
 80180e4:	2b00      	cmp	r3, #0
 80180e6:	d13c      	bne.n	8018162 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 80180e8:	4a20      	ldr	r2, [pc, #128]	; (801816c <USBD_LL_Init+0x94>)
 80180ea:	687b      	ldr	r3, [r7, #4]
 80180ec:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 80180f0:	687b      	ldr	r3, [r7, #4]
 80180f2:	4a1e      	ldr	r2, [pc, #120]	; (801816c <USBD_LL_Init+0x94>)
 80180f4:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298
  
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80180f8:	4b1c      	ldr	r3, [pc, #112]	; (801816c <USBD_LL_Init+0x94>)
 80180fa:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80180fe:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8018100:	4b1a      	ldr	r3, [pc, #104]	; (801816c <USBD_LL_Init+0x94>)
 8018102:	2204      	movs	r2, #4
 8018104:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8018106:	4b19      	ldr	r3, [pc, #100]	; (801816c <USBD_LL_Init+0x94>)
 8018108:	2202      	movs	r2, #2
 801810a:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 801810c:	4b17      	ldr	r3, [pc, #92]	; (801816c <USBD_LL_Init+0x94>)
 801810e:	2200      	movs	r2, #0
 8018110:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8018112:	4b16      	ldr	r3, [pc, #88]	; (801816c <USBD_LL_Init+0x94>)
 8018114:	2202      	movs	r2, #2
 8018116:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8018118:	4b14      	ldr	r3, [pc, #80]	; (801816c <USBD_LL_Init+0x94>)
 801811a:	2201      	movs	r2, #1
 801811c:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 801811e:	4b13      	ldr	r3, [pc, #76]	; (801816c <USBD_LL_Init+0x94>)
 8018120:	2200      	movs	r2, #0
 8018122:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8018124:	4b11      	ldr	r3, [pc, #68]	; (801816c <USBD_LL_Init+0x94>)
 8018126:	2200      	movs	r2, #0
 8018128:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 801812a:	4b10      	ldr	r3, [pc, #64]	; (801816c <USBD_LL_Init+0x94>)
 801812c:	2201      	movs	r2, #1
 801812e:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8018130:	4b0e      	ldr	r3, [pc, #56]	; (801816c <USBD_LL_Init+0x94>)
 8018132:	2200      	movs	r2, #0
 8018134:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8018136:	480d      	ldr	r0, [pc, #52]	; (801816c <USBD_LL_Init+0x94>)
 8018138:	f7eb f869 	bl	800320e <HAL_PCD_Init>
 801813c:	4603      	mov	r3, r0
 801813e:	2b00      	cmp	r3, #0
 8018140:	d001      	beq.n	8018146 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8018142:	f7e9 f941 	bl	80013c8 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8018146:	2180      	movs	r1, #128	; 0x80
 8018148:	4808      	ldr	r0, [pc, #32]	; (801816c <USBD_LL_Init+0x94>)
 801814a:	f7ec f9ce 	bl	80044ea <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 801814e:	2240      	movs	r2, #64	; 0x40
 8018150:	2100      	movs	r1, #0
 8018152:	4806      	ldr	r0, [pc, #24]	; (801816c <USBD_LL_Init+0x94>)
 8018154:	f7ec f982 	bl	800445c <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8018158:	2280      	movs	r2, #128	; 0x80
 801815a:	2101      	movs	r1, #1
 801815c:	4803      	ldr	r0, [pc, #12]	; (801816c <USBD_LL_Init+0x94>)
 801815e:	f7ec f97d 	bl	800445c <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8018162:	2300      	movs	r3, #0
}
 8018164:	4618      	mov	r0, r3
 8018166:	3708      	adds	r7, #8
 8018168:	46bd      	mov	sp, r7
 801816a:	bd80      	pop	{r7, pc}
 801816c:	2000c11c 	.word	0x2000c11c

08018170 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver. 
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8018170:	b580      	push	{r7, lr}
 8018172:	b084      	sub	sp, #16
 8018174:	af00      	add	r7, sp, #0
 8018176:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8018178:	2300      	movs	r3, #0
 801817a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801817c:	2300      	movs	r3, #0
 801817e:	73bb      	strb	r3, [r7, #14]
 
  hal_status = HAL_PCD_Start(pdev->pData);
 8018180:	687b      	ldr	r3, [r7, #4]
 8018182:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8018186:	4618      	mov	r0, r3
 8018188:	f7eb f95e 	bl	8003448 <HAL_PCD_Start>
 801818c:	4603      	mov	r3, r0
 801818e:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);     
 8018190:	7bfb      	ldrb	r3, [r7, #15]
 8018192:	4618      	mov	r0, r3
 8018194:	f000 f92e 	bl	80183f4 <USBD_Get_USB_Status>
 8018198:	4603      	mov	r3, r0
 801819a:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 801819c:	7bbb      	ldrb	r3, [r7, #14]
}
 801819e:	4618      	mov	r0, r3
 80181a0:	3710      	adds	r7, #16
 80181a2:	46bd      	mov	sp, r7
 80181a4:	bd80      	pop	{r7, pc}

080181a6 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80181a6:	b580      	push	{r7, lr}
 80181a8:	b084      	sub	sp, #16
 80181aa:	af00      	add	r7, sp, #0
 80181ac:	6078      	str	r0, [r7, #4]
 80181ae:	4608      	mov	r0, r1
 80181b0:	4611      	mov	r1, r2
 80181b2:	461a      	mov	r2, r3
 80181b4:	4603      	mov	r3, r0
 80181b6:	70fb      	strb	r3, [r7, #3]
 80181b8:	460b      	mov	r3, r1
 80181ba:	70bb      	strb	r3, [r7, #2]
 80181bc:	4613      	mov	r3, r2
 80181be:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80181c0:	2300      	movs	r3, #0
 80181c2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80181c4:	2300      	movs	r3, #0
 80181c6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80181c8:	687b      	ldr	r3, [r7, #4]
 80181ca:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 80181ce:	78bb      	ldrb	r3, [r7, #2]
 80181d0:	883a      	ldrh	r2, [r7, #0]
 80181d2:	78f9      	ldrb	r1, [r7, #3]
 80181d4:	f7eb fd33 	bl	8003c3e <HAL_PCD_EP_Open>
 80181d8:	4603      	mov	r3, r0
 80181da:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80181dc:	7bfb      	ldrb	r3, [r7, #15]
 80181de:	4618      	mov	r0, r3
 80181e0:	f000 f908 	bl	80183f4 <USBD_Get_USB_Status>
 80181e4:	4603      	mov	r3, r0
 80181e6:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 80181e8:	7bbb      	ldrb	r3, [r7, #14]
}
 80181ea:	4618      	mov	r0, r3
 80181ec:	3710      	adds	r7, #16
 80181ee:	46bd      	mov	sp, r7
 80181f0:	bd80      	pop	{r7, pc}

080181f2 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80181f2:	b580      	push	{r7, lr}
 80181f4:	b084      	sub	sp, #16
 80181f6:	af00      	add	r7, sp, #0
 80181f8:	6078      	str	r0, [r7, #4]
 80181fa:	460b      	mov	r3, r1
 80181fc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80181fe:	2300      	movs	r3, #0
 8018200:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8018202:	2300      	movs	r3, #0
 8018204:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8018206:	687b      	ldr	r3, [r7, #4]
 8018208:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 801820c:	78fa      	ldrb	r2, [r7, #3]
 801820e:	4611      	mov	r1, r2
 8018210:	4618      	mov	r0, r3
 8018212:	f7eb fd7c 	bl	8003d0e <HAL_PCD_EP_Close>
 8018216:	4603      	mov	r3, r0
 8018218:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);    
 801821a:	7bfb      	ldrb	r3, [r7, #15]
 801821c:	4618      	mov	r0, r3
 801821e:	f000 f8e9 	bl	80183f4 <USBD_Get_USB_Status>
 8018222:	4603      	mov	r3, r0
 8018224:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;  
 8018226:	7bbb      	ldrb	r3, [r7, #14]
}
 8018228:	4618      	mov	r0, r3
 801822a:	3710      	adds	r7, #16
 801822c:	46bd      	mov	sp, r7
 801822e:	bd80      	pop	{r7, pc}

08018230 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8018230:	b580      	push	{r7, lr}
 8018232:	b084      	sub	sp, #16
 8018234:	af00      	add	r7, sp, #0
 8018236:	6078      	str	r0, [r7, #4]
 8018238:	460b      	mov	r3, r1
 801823a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801823c:	2300      	movs	r3, #0
 801823e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8018240:	2300      	movs	r3, #0
 8018242:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8018244:	687b      	ldr	r3, [r7, #4]
 8018246:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 801824a:	78fa      	ldrb	r2, [r7, #3]
 801824c:	4611      	mov	r1, r2
 801824e:	4618      	mov	r0, r3
 8018250:	f7eb fe54 	bl	8003efc <HAL_PCD_EP_SetStall>
 8018254:	4603      	mov	r3, r0
 8018256:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8018258:	7bfb      	ldrb	r3, [r7, #15]
 801825a:	4618      	mov	r0, r3
 801825c:	f000 f8ca 	bl	80183f4 <USBD_Get_USB_Status>
 8018260:	4603      	mov	r3, r0
 8018262:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;  
 8018264:	7bbb      	ldrb	r3, [r7, #14]
}
 8018266:	4618      	mov	r0, r3
 8018268:	3710      	adds	r7, #16
 801826a:	46bd      	mov	sp, r7
 801826c:	bd80      	pop	{r7, pc}

0801826e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801826e:	b580      	push	{r7, lr}
 8018270:	b084      	sub	sp, #16
 8018272:	af00      	add	r7, sp, #0
 8018274:	6078      	str	r0, [r7, #4]
 8018276:	460b      	mov	r3, r1
 8018278:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801827a:	2300      	movs	r3, #0
 801827c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801827e:	2300      	movs	r3, #0
 8018280:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8018282:	687b      	ldr	r3, [r7, #4]
 8018284:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8018288:	78fa      	ldrb	r2, [r7, #3]
 801828a:	4611      	mov	r1, r2
 801828c:	4618      	mov	r0, r3
 801828e:	f7eb fe99 	bl	8003fc4 <HAL_PCD_EP_ClrStall>
 8018292:	4603      	mov	r3, r0
 8018294:	73fb      	strb	r3, [r7, #15]
    
  usb_status =  USBD_Get_USB_Status(hal_status);  
 8018296:	7bfb      	ldrb	r3, [r7, #15]
 8018298:	4618      	mov	r0, r3
 801829a:	f000 f8ab 	bl	80183f4 <USBD_Get_USB_Status>
 801829e:	4603      	mov	r3, r0
 80182a0:	73bb      	strb	r3, [r7, #14]
  
  return usb_status; 
 80182a2:	7bbb      	ldrb	r3, [r7, #14]
}
 80182a4:	4618      	mov	r0, r3
 80182a6:	3710      	adds	r7, #16
 80182a8:	46bd      	mov	sp, r7
 80182aa:	bd80      	pop	{r7, pc}

080182ac <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80182ac:	b480      	push	{r7}
 80182ae:	b085      	sub	sp, #20
 80182b0:	af00      	add	r7, sp, #0
 80182b2:	6078      	str	r0, [r7, #4]
 80182b4:	460b      	mov	r3, r1
 80182b6:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80182b8:	687b      	ldr	r3, [r7, #4]
 80182ba:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 80182be:	60fb      	str	r3, [r7, #12]
  
  if((ep_addr & 0x80) == 0x80)
 80182c0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80182c4:	2b00      	cmp	r3, #0
 80182c6:	da0b      	bge.n	80182e0 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 80182c8:	78fb      	ldrb	r3, [r7, #3]
 80182ca:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80182ce:	68f9      	ldr	r1, [r7, #12]
 80182d0:	4613      	mov	r3, r2
 80182d2:	00db      	lsls	r3, r3, #3
 80182d4:	1a9b      	subs	r3, r3, r2
 80182d6:	009b      	lsls	r3, r3, #2
 80182d8:	440b      	add	r3, r1
 80182da:	333e      	adds	r3, #62	; 0x3e
 80182dc:	781b      	ldrb	r3, [r3, #0]
 80182de:	e00b      	b.n	80182f8 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 80182e0:	78fb      	ldrb	r3, [r7, #3]
 80182e2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80182e6:	68f9      	ldr	r1, [r7, #12]
 80182e8:	4613      	mov	r3, r2
 80182ea:	00db      	lsls	r3, r3, #3
 80182ec:	1a9b      	subs	r3, r3, r2
 80182ee:	009b      	lsls	r3, r3, #2
 80182f0:	440b      	add	r3, r1
 80182f2:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80182f6:	781b      	ldrb	r3, [r3, #0]
  }
}
 80182f8:	4618      	mov	r0, r3
 80182fa:	3714      	adds	r7, #20
 80182fc:	46bd      	mov	sp, r7
 80182fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018302:	4770      	bx	lr

08018304 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8018304:	b580      	push	{r7, lr}
 8018306:	b084      	sub	sp, #16
 8018308:	af00      	add	r7, sp, #0
 801830a:	6078      	str	r0, [r7, #4]
 801830c:	460b      	mov	r3, r1
 801830e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8018310:	2300      	movs	r3, #0
 8018312:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8018314:	2300      	movs	r3, #0
 8018316:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8018318:	687b      	ldr	r3, [r7, #4]
 801831a:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 801831e:	78fa      	ldrb	r2, [r7, #3]
 8018320:	4611      	mov	r1, r2
 8018322:	4618      	mov	r0, r3
 8018324:	f7eb fc66 	bl	8003bf4 <HAL_PCD_SetAddress>
 8018328:	4603      	mov	r3, r0
 801832a:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);
 801832c:	7bfb      	ldrb	r3, [r7, #15]
 801832e:	4618      	mov	r0, r3
 8018330:	f000 f860 	bl	80183f4 <USBD_Get_USB_Status>
 8018334:	4603      	mov	r3, r0
 8018336:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;  
 8018338:	7bbb      	ldrb	r3, [r7, #14]
}
 801833a:	4618      	mov	r0, r3
 801833c:	3710      	adds	r7, #16
 801833e:	46bd      	mov	sp, r7
 8018340:	bd80      	pop	{r7, pc}

08018342 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size    
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8018342:	b580      	push	{r7, lr}
 8018344:	b086      	sub	sp, #24
 8018346:	af00      	add	r7, sp, #0
 8018348:	60f8      	str	r0, [r7, #12]
 801834a:	607a      	str	r2, [r7, #4]
 801834c:	461a      	mov	r2, r3
 801834e:	460b      	mov	r3, r1
 8018350:	72fb      	strb	r3, [r7, #11]
 8018352:	4613      	mov	r3, r2
 8018354:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8018356:	2300      	movs	r3, #0
 8018358:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801835a:	2300      	movs	r3, #0
 801835c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 801835e:	68fb      	ldr	r3, [r7, #12]
 8018360:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 8018364:	893b      	ldrh	r3, [r7, #8]
 8018366:	7af9      	ldrb	r1, [r7, #11]
 8018368:	687a      	ldr	r2, [r7, #4]
 801836a:	f7eb fd7d 	bl	8003e68 <HAL_PCD_EP_Transmit>
 801836e:	4603      	mov	r3, r0
 8018370:	75fb      	strb	r3, [r7, #23]
  
  usb_status =  USBD_Get_USB_Status(hal_status); 
 8018372:	7dfb      	ldrb	r3, [r7, #23]
 8018374:	4618      	mov	r0, r3
 8018376:	f000 f83d 	bl	80183f4 <USBD_Get_USB_Status>
 801837a:	4603      	mov	r3, r0
 801837c:	75bb      	strb	r3, [r7, #22]
  
  return usb_status;    
 801837e:	7dbb      	ldrb	r3, [r7, #22]
}
 8018380:	4618      	mov	r0, r3
 8018382:	3718      	adds	r7, #24
 8018384:	46bd      	mov	sp, r7
 8018386:	bd80      	pop	{r7, pc}

08018388 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8018388:	b580      	push	{r7, lr}
 801838a:	b086      	sub	sp, #24
 801838c:	af00      	add	r7, sp, #0
 801838e:	60f8      	str	r0, [r7, #12]
 8018390:	607a      	str	r2, [r7, #4]
 8018392:	461a      	mov	r2, r3
 8018394:	460b      	mov	r3, r1
 8018396:	72fb      	strb	r3, [r7, #11]
 8018398:	4613      	mov	r3, r2
 801839a:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801839c:	2300      	movs	r3, #0
 801839e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80183a0:	2300      	movs	r3, #0
 80183a2:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80183a4:	68fb      	ldr	r3, [r7, #12]
 80183a6:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 80183aa:	893b      	ldrh	r3, [r7, #8]
 80183ac:	7af9      	ldrb	r1, [r7, #11]
 80183ae:	687a      	ldr	r2, [r7, #4]
 80183b0:	f7eb fcf7 	bl	8003da2 <HAL_PCD_EP_Receive>
 80183b4:	4603      	mov	r3, r0
 80183b6:	75fb      	strb	r3, [r7, #23]
  
  usb_status =  USBD_Get_USB_Status(hal_status);   
 80183b8:	7dfb      	ldrb	r3, [r7, #23]
 80183ba:	4618      	mov	r0, r3
 80183bc:	f000 f81a 	bl	80183f4 <USBD_Get_USB_Status>
 80183c0:	4603      	mov	r3, r0
 80183c2:	75bb      	strb	r3, [r7, #22]
  
  return usb_status; 
 80183c4:	7dbb      	ldrb	r3, [r7, #22]
}
 80183c6:	4618      	mov	r0, r3
 80183c8:	3718      	adds	r7, #24
 80183ca:	46bd      	mov	sp, r7
 80183cc:	bd80      	pop	{r7, pc}

080183ce <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80183ce:	b580      	push	{r7, lr}
 80183d0:	b082      	sub	sp, #8
 80183d2:	af00      	add	r7, sp, #0
 80183d4:	6078      	str	r0, [r7, #4]
 80183d6:	460b      	mov	r3, r1
 80183d8:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80183da:	687b      	ldr	r3, [r7, #4]
 80183dc:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 80183e0:	78fa      	ldrb	r2, [r7, #3]
 80183e2:	4611      	mov	r1, r2
 80183e4:	4618      	mov	r0, r3
 80183e6:	f7eb fd27 	bl	8003e38 <HAL_PCD_EP_GetRxCount>
 80183ea:	4603      	mov	r3, r0
}
 80183ec:	4618      	mov	r0, r3
 80183ee:	3708      	adds	r7, #8
 80183f0:	46bd      	mov	sp, r7
 80183f2:	bd80      	pop	{r7, pc}

080183f4 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80183f4:	b480      	push	{r7}
 80183f6:	b085      	sub	sp, #20
 80183f8:	af00      	add	r7, sp, #0
 80183fa:	4603      	mov	r3, r0
 80183fc:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80183fe:	2300      	movs	r3, #0
 8018400:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8018402:	79fb      	ldrb	r3, [r7, #7]
 8018404:	2b03      	cmp	r3, #3
 8018406:	d817      	bhi.n	8018438 <USBD_Get_USB_Status+0x44>
 8018408:	a201      	add	r2, pc, #4	; (adr r2, 8018410 <USBD_Get_USB_Status+0x1c>)
 801840a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801840e:	bf00      	nop
 8018410:	08018421 	.word	0x08018421
 8018414:	08018427 	.word	0x08018427
 8018418:	0801842d 	.word	0x0801842d
 801841c:	08018433 	.word	0x08018433
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8018420:	2300      	movs	r3, #0
 8018422:	73fb      	strb	r3, [r7, #15]
    break;
 8018424:	e00b      	b.n	801843e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8018426:	2302      	movs	r3, #2
 8018428:	73fb      	strb	r3, [r7, #15]
    break;
 801842a:	e008      	b.n	801843e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 801842c:	2301      	movs	r3, #1
 801842e:	73fb      	strb	r3, [r7, #15]
    break;
 8018430:	e005      	b.n	801843e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8018432:	2302      	movs	r3, #2
 8018434:	73fb      	strb	r3, [r7, #15]
    break;
 8018436:	e002      	b.n	801843e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8018438:	2302      	movs	r3, #2
 801843a:	73fb      	strb	r3, [r7, #15]
    break;
 801843c:	bf00      	nop
  }
  return usb_status;
 801843e:	7bfb      	ldrb	r3, [r7, #15]
}
 8018440:	4618      	mov	r0, r3
 8018442:	3714      	adds	r7, #20
 8018444:	46bd      	mov	sp, r7
 8018446:	f85d 7b04 	ldr.w	r7, [sp], #4
 801844a:	4770      	bx	lr

0801844c <__libc_init_array>:
 801844c:	b570      	push	{r4, r5, r6, lr}
 801844e:	4e0d      	ldr	r6, [pc, #52]	; (8018484 <__libc_init_array+0x38>)
 8018450:	4c0d      	ldr	r4, [pc, #52]	; (8018488 <__libc_init_array+0x3c>)
 8018452:	1ba4      	subs	r4, r4, r6
 8018454:	10a4      	asrs	r4, r4, #2
 8018456:	2500      	movs	r5, #0
 8018458:	42a5      	cmp	r5, r4
 801845a:	d109      	bne.n	8018470 <__libc_init_array+0x24>
 801845c:	4e0b      	ldr	r6, [pc, #44]	; (801848c <__libc_init_array+0x40>)
 801845e:	4c0c      	ldr	r4, [pc, #48]	; (8018490 <__libc_init_array+0x44>)
 8018460:	f000 ff62 	bl	8019328 <_init>
 8018464:	1ba4      	subs	r4, r4, r6
 8018466:	10a4      	asrs	r4, r4, #2
 8018468:	2500      	movs	r5, #0
 801846a:	42a5      	cmp	r5, r4
 801846c:	d105      	bne.n	801847a <__libc_init_array+0x2e>
 801846e:	bd70      	pop	{r4, r5, r6, pc}
 8018470:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8018474:	4798      	blx	r3
 8018476:	3501      	adds	r5, #1
 8018478:	e7ee      	b.n	8018458 <__libc_init_array+0xc>
 801847a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 801847e:	4798      	blx	r3
 8018480:	3501      	adds	r5, #1
 8018482:	e7f2      	b.n	801846a <__libc_init_array+0x1e>
 8018484:	0801b980 	.word	0x0801b980
 8018488:	0801b980 	.word	0x0801b980
 801848c:	0801b980 	.word	0x0801b980
 8018490:	0801b984 	.word	0x0801b984

08018494 <malloc>:
 8018494:	4b02      	ldr	r3, [pc, #8]	; (80184a0 <malloc+0xc>)
 8018496:	4601      	mov	r1, r0
 8018498:	6818      	ldr	r0, [r3, #0]
 801849a:	f000 b87b 	b.w	8018594 <_malloc_r>
 801849e:	bf00      	nop
 80184a0:	2000018c 	.word	0x2000018c

080184a4 <free>:
 80184a4:	4b02      	ldr	r3, [pc, #8]	; (80184b0 <free+0xc>)
 80184a6:	4601      	mov	r1, r0
 80184a8:	6818      	ldr	r0, [r3, #0]
 80184aa:	f000 b825 	b.w	80184f8 <_free_r>
 80184ae:	bf00      	nop
 80184b0:	2000018c 	.word	0x2000018c

080184b4 <memcmp>:
 80184b4:	b530      	push	{r4, r5, lr}
 80184b6:	2400      	movs	r4, #0
 80184b8:	42a2      	cmp	r2, r4
 80184ba:	d101      	bne.n	80184c0 <memcmp+0xc>
 80184bc:	2000      	movs	r0, #0
 80184be:	e007      	b.n	80184d0 <memcmp+0x1c>
 80184c0:	5d03      	ldrb	r3, [r0, r4]
 80184c2:	3401      	adds	r4, #1
 80184c4:	190d      	adds	r5, r1, r4
 80184c6:	f815 5c01 	ldrb.w	r5, [r5, #-1]
 80184ca:	42ab      	cmp	r3, r5
 80184cc:	d0f4      	beq.n	80184b8 <memcmp+0x4>
 80184ce:	1b58      	subs	r0, r3, r5
 80184d0:	bd30      	pop	{r4, r5, pc}

080184d2 <memcpy>:
 80184d2:	b510      	push	{r4, lr}
 80184d4:	1e43      	subs	r3, r0, #1
 80184d6:	440a      	add	r2, r1
 80184d8:	4291      	cmp	r1, r2
 80184da:	d100      	bne.n	80184de <memcpy+0xc>
 80184dc:	bd10      	pop	{r4, pc}
 80184de:	f811 4b01 	ldrb.w	r4, [r1], #1
 80184e2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80184e6:	e7f7      	b.n	80184d8 <memcpy+0x6>

080184e8 <memset>:
 80184e8:	4402      	add	r2, r0
 80184ea:	4603      	mov	r3, r0
 80184ec:	4293      	cmp	r3, r2
 80184ee:	d100      	bne.n	80184f2 <memset+0xa>
 80184f0:	4770      	bx	lr
 80184f2:	f803 1b01 	strb.w	r1, [r3], #1
 80184f6:	e7f9      	b.n	80184ec <memset+0x4>

080184f8 <_free_r>:
 80184f8:	b538      	push	{r3, r4, r5, lr}
 80184fa:	4605      	mov	r5, r0
 80184fc:	2900      	cmp	r1, #0
 80184fe:	d045      	beq.n	801858c <_free_r+0x94>
 8018500:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8018504:	1f0c      	subs	r4, r1, #4
 8018506:	2b00      	cmp	r3, #0
 8018508:	bfb8      	it	lt
 801850a:	18e4      	addlt	r4, r4, r3
 801850c:	f000 f9c2 	bl	8018894 <__malloc_lock>
 8018510:	4a1f      	ldr	r2, [pc, #124]	; (8018590 <_free_r+0x98>)
 8018512:	6813      	ldr	r3, [r2, #0]
 8018514:	4610      	mov	r0, r2
 8018516:	b933      	cbnz	r3, 8018526 <_free_r+0x2e>
 8018518:	6063      	str	r3, [r4, #4]
 801851a:	6014      	str	r4, [r2, #0]
 801851c:	4628      	mov	r0, r5
 801851e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8018522:	f000 b9b8 	b.w	8018896 <__malloc_unlock>
 8018526:	42a3      	cmp	r3, r4
 8018528:	d90c      	bls.n	8018544 <_free_r+0x4c>
 801852a:	6821      	ldr	r1, [r4, #0]
 801852c:	1862      	adds	r2, r4, r1
 801852e:	4293      	cmp	r3, r2
 8018530:	bf04      	itt	eq
 8018532:	681a      	ldreq	r2, [r3, #0]
 8018534:	685b      	ldreq	r3, [r3, #4]
 8018536:	6063      	str	r3, [r4, #4]
 8018538:	bf04      	itt	eq
 801853a:	1852      	addeq	r2, r2, r1
 801853c:	6022      	streq	r2, [r4, #0]
 801853e:	6004      	str	r4, [r0, #0]
 8018540:	e7ec      	b.n	801851c <_free_r+0x24>
 8018542:	4613      	mov	r3, r2
 8018544:	685a      	ldr	r2, [r3, #4]
 8018546:	b10a      	cbz	r2, 801854c <_free_r+0x54>
 8018548:	42a2      	cmp	r2, r4
 801854a:	d9fa      	bls.n	8018542 <_free_r+0x4a>
 801854c:	6819      	ldr	r1, [r3, #0]
 801854e:	1858      	adds	r0, r3, r1
 8018550:	42a0      	cmp	r0, r4
 8018552:	d10b      	bne.n	801856c <_free_r+0x74>
 8018554:	6820      	ldr	r0, [r4, #0]
 8018556:	4401      	add	r1, r0
 8018558:	1858      	adds	r0, r3, r1
 801855a:	4282      	cmp	r2, r0
 801855c:	6019      	str	r1, [r3, #0]
 801855e:	d1dd      	bne.n	801851c <_free_r+0x24>
 8018560:	6810      	ldr	r0, [r2, #0]
 8018562:	6852      	ldr	r2, [r2, #4]
 8018564:	605a      	str	r2, [r3, #4]
 8018566:	4401      	add	r1, r0
 8018568:	6019      	str	r1, [r3, #0]
 801856a:	e7d7      	b.n	801851c <_free_r+0x24>
 801856c:	d902      	bls.n	8018574 <_free_r+0x7c>
 801856e:	230c      	movs	r3, #12
 8018570:	602b      	str	r3, [r5, #0]
 8018572:	e7d3      	b.n	801851c <_free_r+0x24>
 8018574:	6820      	ldr	r0, [r4, #0]
 8018576:	1821      	adds	r1, r4, r0
 8018578:	428a      	cmp	r2, r1
 801857a:	bf04      	itt	eq
 801857c:	6811      	ldreq	r1, [r2, #0]
 801857e:	6852      	ldreq	r2, [r2, #4]
 8018580:	6062      	str	r2, [r4, #4]
 8018582:	bf04      	itt	eq
 8018584:	1809      	addeq	r1, r1, r0
 8018586:	6021      	streq	r1, [r4, #0]
 8018588:	605c      	str	r4, [r3, #4]
 801858a:	e7c7      	b.n	801851c <_free_r+0x24>
 801858c:	bd38      	pop	{r3, r4, r5, pc}
 801858e:	bf00      	nop
 8018590:	2000435c 	.word	0x2000435c

08018594 <_malloc_r>:
 8018594:	b570      	push	{r4, r5, r6, lr}
 8018596:	1ccd      	adds	r5, r1, #3
 8018598:	f025 0503 	bic.w	r5, r5, #3
 801859c:	3508      	adds	r5, #8
 801859e:	2d0c      	cmp	r5, #12
 80185a0:	bf38      	it	cc
 80185a2:	250c      	movcc	r5, #12
 80185a4:	2d00      	cmp	r5, #0
 80185a6:	4606      	mov	r6, r0
 80185a8:	db01      	blt.n	80185ae <_malloc_r+0x1a>
 80185aa:	42a9      	cmp	r1, r5
 80185ac:	d903      	bls.n	80185b6 <_malloc_r+0x22>
 80185ae:	230c      	movs	r3, #12
 80185b0:	6033      	str	r3, [r6, #0]
 80185b2:	2000      	movs	r0, #0
 80185b4:	bd70      	pop	{r4, r5, r6, pc}
 80185b6:	f000 f96d 	bl	8018894 <__malloc_lock>
 80185ba:	4a21      	ldr	r2, [pc, #132]	; (8018640 <_malloc_r+0xac>)
 80185bc:	6814      	ldr	r4, [r2, #0]
 80185be:	4621      	mov	r1, r4
 80185c0:	b991      	cbnz	r1, 80185e8 <_malloc_r+0x54>
 80185c2:	4c20      	ldr	r4, [pc, #128]	; (8018644 <_malloc_r+0xb0>)
 80185c4:	6823      	ldr	r3, [r4, #0]
 80185c6:	b91b      	cbnz	r3, 80185d0 <_malloc_r+0x3c>
 80185c8:	4630      	mov	r0, r6
 80185ca:	f000 f889 	bl	80186e0 <_sbrk_r>
 80185ce:	6020      	str	r0, [r4, #0]
 80185d0:	4629      	mov	r1, r5
 80185d2:	4630      	mov	r0, r6
 80185d4:	f000 f884 	bl	80186e0 <_sbrk_r>
 80185d8:	1c43      	adds	r3, r0, #1
 80185da:	d124      	bne.n	8018626 <_malloc_r+0x92>
 80185dc:	230c      	movs	r3, #12
 80185de:	6033      	str	r3, [r6, #0]
 80185e0:	4630      	mov	r0, r6
 80185e2:	f000 f958 	bl	8018896 <__malloc_unlock>
 80185e6:	e7e4      	b.n	80185b2 <_malloc_r+0x1e>
 80185e8:	680b      	ldr	r3, [r1, #0]
 80185ea:	1b5b      	subs	r3, r3, r5
 80185ec:	d418      	bmi.n	8018620 <_malloc_r+0x8c>
 80185ee:	2b0b      	cmp	r3, #11
 80185f0:	d90f      	bls.n	8018612 <_malloc_r+0x7e>
 80185f2:	600b      	str	r3, [r1, #0]
 80185f4:	50cd      	str	r5, [r1, r3]
 80185f6:	18cc      	adds	r4, r1, r3
 80185f8:	4630      	mov	r0, r6
 80185fa:	f000 f94c 	bl	8018896 <__malloc_unlock>
 80185fe:	f104 000b 	add.w	r0, r4, #11
 8018602:	1d23      	adds	r3, r4, #4
 8018604:	f020 0007 	bic.w	r0, r0, #7
 8018608:	1ac3      	subs	r3, r0, r3
 801860a:	d0d3      	beq.n	80185b4 <_malloc_r+0x20>
 801860c:	425a      	negs	r2, r3
 801860e:	50e2      	str	r2, [r4, r3]
 8018610:	e7d0      	b.n	80185b4 <_malloc_r+0x20>
 8018612:	428c      	cmp	r4, r1
 8018614:	684b      	ldr	r3, [r1, #4]
 8018616:	bf16      	itet	ne
 8018618:	6063      	strne	r3, [r4, #4]
 801861a:	6013      	streq	r3, [r2, #0]
 801861c:	460c      	movne	r4, r1
 801861e:	e7eb      	b.n	80185f8 <_malloc_r+0x64>
 8018620:	460c      	mov	r4, r1
 8018622:	6849      	ldr	r1, [r1, #4]
 8018624:	e7cc      	b.n	80185c0 <_malloc_r+0x2c>
 8018626:	1cc4      	adds	r4, r0, #3
 8018628:	f024 0403 	bic.w	r4, r4, #3
 801862c:	42a0      	cmp	r0, r4
 801862e:	d005      	beq.n	801863c <_malloc_r+0xa8>
 8018630:	1a21      	subs	r1, r4, r0
 8018632:	4630      	mov	r0, r6
 8018634:	f000 f854 	bl	80186e0 <_sbrk_r>
 8018638:	3001      	adds	r0, #1
 801863a:	d0cf      	beq.n	80185dc <_malloc_r+0x48>
 801863c:	6025      	str	r5, [r4, #0]
 801863e:	e7db      	b.n	80185f8 <_malloc_r+0x64>
 8018640:	2000435c 	.word	0x2000435c
 8018644:	20004360 	.word	0x20004360

08018648 <iprintf>:
 8018648:	b40f      	push	{r0, r1, r2, r3}
 801864a:	4b0a      	ldr	r3, [pc, #40]	; (8018674 <iprintf+0x2c>)
 801864c:	b513      	push	{r0, r1, r4, lr}
 801864e:	681c      	ldr	r4, [r3, #0]
 8018650:	b124      	cbz	r4, 801865c <iprintf+0x14>
 8018652:	69a3      	ldr	r3, [r4, #24]
 8018654:	b913      	cbnz	r3, 801865c <iprintf+0x14>
 8018656:	4620      	mov	r0, r4
 8018658:	f000 f892 	bl	8018780 <__sinit>
 801865c:	ab05      	add	r3, sp, #20
 801865e:	9a04      	ldr	r2, [sp, #16]
 8018660:	68a1      	ldr	r1, [r4, #8]
 8018662:	9301      	str	r3, [sp, #4]
 8018664:	4620      	mov	r0, r4
 8018666:	f000 f941 	bl	80188ec <_vfiprintf_r>
 801866a:	b002      	add	sp, #8
 801866c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8018670:	b004      	add	sp, #16
 8018672:	4770      	bx	lr
 8018674:	2000018c 	.word	0x2000018c

08018678 <rand>:
 8018678:	b538      	push	{r3, r4, r5, lr}
 801867a:	4b13      	ldr	r3, [pc, #76]	; (80186c8 <rand+0x50>)
 801867c:	681c      	ldr	r4, [r3, #0]
 801867e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8018680:	b97b      	cbnz	r3, 80186a2 <rand+0x2a>
 8018682:	2018      	movs	r0, #24
 8018684:	f7ff ff06 	bl	8018494 <malloc>
 8018688:	4a10      	ldr	r2, [pc, #64]	; (80186cc <rand+0x54>)
 801868a:	4b11      	ldr	r3, [pc, #68]	; (80186d0 <rand+0x58>)
 801868c:	63a0      	str	r0, [r4, #56]	; 0x38
 801868e:	e9c0 2300 	strd	r2, r3, [r0]
 8018692:	4b10      	ldr	r3, [pc, #64]	; (80186d4 <rand+0x5c>)
 8018694:	6083      	str	r3, [r0, #8]
 8018696:	230b      	movs	r3, #11
 8018698:	8183      	strh	r3, [r0, #12]
 801869a:	2201      	movs	r2, #1
 801869c:	2300      	movs	r3, #0
 801869e:	e9c0 2304 	strd	r2, r3, [r0, #16]
 80186a2:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80186a4:	480c      	ldr	r0, [pc, #48]	; (80186d8 <rand+0x60>)
 80186a6:	690a      	ldr	r2, [r1, #16]
 80186a8:	694b      	ldr	r3, [r1, #20]
 80186aa:	4c0c      	ldr	r4, [pc, #48]	; (80186dc <rand+0x64>)
 80186ac:	4350      	muls	r0, r2
 80186ae:	fb04 0003 	mla	r0, r4, r3, r0
 80186b2:	fba2 2304 	umull	r2, r3, r2, r4
 80186b6:	4403      	add	r3, r0
 80186b8:	1c54      	adds	r4, r2, #1
 80186ba:	f143 0500 	adc.w	r5, r3, #0
 80186be:	e9c1 4504 	strd	r4, r5, [r1, #16]
 80186c2:	f025 4000 	bic.w	r0, r5, #2147483648	; 0x80000000
 80186c6:	bd38      	pop	{r3, r4, r5, pc}
 80186c8:	2000018c 	.word	0x2000018c
 80186cc:	abcd330e 	.word	0xabcd330e
 80186d0:	e66d1234 	.word	0xe66d1234
 80186d4:	0005deec 	.word	0x0005deec
 80186d8:	5851f42d 	.word	0x5851f42d
 80186dc:	4c957f2d 	.word	0x4c957f2d

080186e0 <_sbrk_r>:
 80186e0:	b538      	push	{r3, r4, r5, lr}
 80186e2:	4c06      	ldr	r4, [pc, #24]	; (80186fc <_sbrk_r+0x1c>)
 80186e4:	2300      	movs	r3, #0
 80186e6:	4605      	mov	r5, r0
 80186e8:	4608      	mov	r0, r1
 80186ea:	6023      	str	r3, [r4, #0]
 80186ec:	f7e8 ff96 	bl	800161c <_sbrk>
 80186f0:	1c43      	adds	r3, r0, #1
 80186f2:	d102      	bne.n	80186fa <_sbrk_r+0x1a>
 80186f4:	6823      	ldr	r3, [r4, #0]
 80186f6:	b103      	cbz	r3, 80186fa <_sbrk_r+0x1a>
 80186f8:	602b      	str	r3, [r5, #0]
 80186fa:	bd38      	pop	{r3, r4, r5, pc}
 80186fc:	2000ac78 	.word	0x2000ac78

08018700 <std>:
 8018700:	2300      	movs	r3, #0
 8018702:	b510      	push	{r4, lr}
 8018704:	4604      	mov	r4, r0
 8018706:	e9c0 3300 	strd	r3, r3, [r0]
 801870a:	6083      	str	r3, [r0, #8]
 801870c:	8181      	strh	r1, [r0, #12]
 801870e:	6643      	str	r3, [r0, #100]	; 0x64
 8018710:	81c2      	strh	r2, [r0, #14]
 8018712:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8018716:	6183      	str	r3, [r0, #24]
 8018718:	4619      	mov	r1, r3
 801871a:	2208      	movs	r2, #8
 801871c:	305c      	adds	r0, #92	; 0x5c
 801871e:	f7ff fee3 	bl	80184e8 <memset>
 8018722:	4b05      	ldr	r3, [pc, #20]	; (8018738 <std+0x38>)
 8018724:	6263      	str	r3, [r4, #36]	; 0x24
 8018726:	4b05      	ldr	r3, [pc, #20]	; (801873c <std+0x3c>)
 8018728:	62a3      	str	r3, [r4, #40]	; 0x28
 801872a:	4b05      	ldr	r3, [pc, #20]	; (8018740 <std+0x40>)
 801872c:	62e3      	str	r3, [r4, #44]	; 0x2c
 801872e:	4b05      	ldr	r3, [pc, #20]	; (8018744 <std+0x44>)
 8018730:	6224      	str	r4, [r4, #32]
 8018732:	6323      	str	r3, [r4, #48]	; 0x30
 8018734:	bd10      	pop	{r4, pc}
 8018736:	bf00      	nop
 8018738:	08018e29 	.word	0x08018e29
 801873c:	08018e4b 	.word	0x08018e4b
 8018740:	08018e83 	.word	0x08018e83
 8018744:	08018ea7 	.word	0x08018ea7

08018748 <_cleanup_r>:
 8018748:	4901      	ldr	r1, [pc, #4]	; (8018750 <_cleanup_r+0x8>)
 801874a:	f000 b885 	b.w	8018858 <_fwalk_reent>
 801874e:	bf00      	nop
 8018750:	08019181 	.word	0x08019181

08018754 <__sfmoreglue>:
 8018754:	b570      	push	{r4, r5, r6, lr}
 8018756:	1e4a      	subs	r2, r1, #1
 8018758:	2568      	movs	r5, #104	; 0x68
 801875a:	4355      	muls	r5, r2
 801875c:	460e      	mov	r6, r1
 801875e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8018762:	f7ff ff17 	bl	8018594 <_malloc_r>
 8018766:	4604      	mov	r4, r0
 8018768:	b140      	cbz	r0, 801877c <__sfmoreglue+0x28>
 801876a:	2100      	movs	r1, #0
 801876c:	e9c0 1600 	strd	r1, r6, [r0]
 8018770:	300c      	adds	r0, #12
 8018772:	60a0      	str	r0, [r4, #8]
 8018774:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8018778:	f7ff feb6 	bl	80184e8 <memset>
 801877c:	4620      	mov	r0, r4
 801877e:	bd70      	pop	{r4, r5, r6, pc}

08018780 <__sinit>:
 8018780:	6983      	ldr	r3, [r0, #24]
 8018782:	b510      	push	{r4, lr}
 8018784:	4604      	mov	r4, r0
 8018786:	bb33      	cbnz	r3, 80187d6 <__sinit+0x56>
 8018788:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 801878c:	6503      	str	r3, [r0, #80]	; 0x50
 801878e:	4b12      	ldr	r3, [pc, #72]	; (80187d8 <__sinit+0x58>)
 8018790:	4a12      	ldr	r2, [pc, #72]	; (80187dc <__sinit+0x5c>)
 8018792:	681b      	ldr	r3, [r3, #0]
 8018794:	6282      	str	r2, [r0, #40]	; 0x28
 8018796:	4298      	cmp	r0, r3
 8018798:	bf04      	itt	eq
 801879a:	2301      	moveq	r3, #1
 801879c:	6183      	streq	r3, [r0, #24]
 801879e:	f000 f81f 	bl	80187e0 <__sfp>
 80187a2:	6060      	str	r0, [r4, #4]
 80187a4:	4620      	mov	r0, r4
 80187a6:	f000 f81b 	bl	80187e0 <__sfp>
 80187aa:	60a0      	str	r0, [r4, #8]
 80187ac:	4620      	mov	r0, r4
 80187ae:	f000 f817 	bl	80187e0 <__sfp>
 80187b2:	2200      	movs	r2, #0
 80187b4:	60e0      	str	r0, [r4, #12]
 80187b6:	2104      	movs	r1, #4
 80187b8:	6860      	ldr	r0, [r4, #4]
 80187ba:	f7ff ffa1 	bl	8018700 <std>
 80187be:	2201      	movs	r2, #1
 80187c0:	2109      	movs	r1, #9
 80187c2:	68a0      	ldr	r0, [r4, #8]
 80187c4:	f7ff ff9c 	bl	8018700 <std>
 80187c8:	2202      	movs	r2, #2
 80187ca:	2112      	movs	r1, #18
 80187cc:	68e0      	ldr	r0, [r4, #12]
 80187ce:	f7ff ff97 	bl	8018700 <std>
 80187d2:	2301      	movs	r3, #1
 80187d4:	61a3      	str	r3, [r4, #24]
 80187d6:	bd10      	pop	{r4, pc}
 80187d8:	0801b8e0 	.word	0x0801b8e0
 80187dc:	08018749 	.word	0x08018749

080187e0 <__sfp>:
 80187e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80187e2:	4b1b      	ldr	r3, [pc, #108]	; (8018850 <__sfp+0x70>)
 80187e4:	681e      	ldr	r6, [r3, #0]
 80187e6:	69b3      	ldr	r3, [r6, #24]
 80187e8:	4607      	mov	r7, r0
 80187ea:	b913      	cbnz	r3, 80187f2 <__sfp+0x12>
 80187ec:	4630      	mov	r0, r6
 80187ee:	f7ff ffc7 	bl	8018780 <__sinit>
 80187f2:	3648      	adds	r6, #72	; 0x48
 80187f4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80187f8:	3b01      	subs	r3, #1
 80187fa:	d503      	bpl.n	8018804 <__sfp+0x24>
 80187fc:	6833      	ldr	r3, [r6, #0]
 80187fe:	b133      	cbz	r3, 801880e <__sfp+0x2e>
 8018800:	6836      	ldr	r6, [r6, #0]
 8018802:	e7f7      	b.n	80187f4 <__sfp+0x14>
 8018804:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8018808:	b16d      	cbz	r5, 8018826 <__sfp+0x46>
 801880a:	3468      	adds	r4, #104	; 0x68
 801880c:	e7f4      	b.n	80187f8 <__sfp+0x18>
 801880e:	2104      	movs	r1, #4
 8018810:	4638      	mov	r0, r7
 8018812:	f7ff ff9f 	bl	8018754 <__sfmoreglue>
 8018816:	6030      	str	r0, [r6, #0]
 8018818:	2800      	cmp	r0, #0
 801881a:	d1f1      	bne.n	8018800 <__sfp+0x20>
 801881c:	230c      	movs	r3, #12
 801881e:	603b      	str	r3, [r7, #0]
 8018820:	4604      	mov	r4, r0
 8018822:	4620      	mov	r0, r4
 8018824:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8018826:	4b0b      	ldr	r3, [pc, #44]	; (8018854 <__sfp+0x74>)
 8018828:	6665      	str	r5, [r4, #100]	; 0x64
 801882a:	e9c4 5500 	strd	r5, r5, [r4]
 801882e:	60a5      	str	r5, [r4, #8]
 8018830:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8018834:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8018838:	2208      	movs	r2, #8
 801883a:	4629      	mov	r1, r5
 801883c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8018840:	f7ff fe52 	bl	80184e8 <memset>
 8018844:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8018848:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 801884c:	e7e9      	b.n	8018822 <__sfp+0x42>
 801884e:	bf00      	nop
 8018850:	0801b8e0 	.word	0x0801b8e0
 8018854:	ffff0001 	.word	0xffff0001

08018858 <_fwalk_reent>:
 8018858:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801885c:	4680      	mov	r8, r0
 801885e:	4689      	mov	r9, r1
 8018860:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8018864:	2600      	movs	r6, #0
 8018866:	b914      	cbnz	r4, 801886e <_fwalk_reent+0x16>
 8018868:	4630      	mov	r0, r6
 801886a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801886e:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8018872:	3f01      	subs	r7, #1
 8018874:	d501      	bpl.n	801887a <_fwalk_reent+0x22>
 8018876:	6824      	ldr	r4, [r4, #0]
 8018878:	e7f5      	b.n	8018866 <_fwalk_reent+0xe>
 801887a:	89ab      	ldrh	r3, [r5, #12]
 801887c:	2b01      	cmp	r3, #1
 801887e:	d907      	bls.n	8018890 <_fwalk_reent+0x38>
 8018880:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8018884:	3301      	adds	r3, #1
 8018886:	d003      	beq.n	8018890 <_fwalk_reent+0x38>
 8018888:	4629      	mov	r1, r5
 801888a:	4640      	mov	r0, r8
 801888c:	47c8      	blx	r9
 801888e:	4306      	orrs	r6, r0
 8018890:	3568      	adds	r5, #104	; 0x68
 8018892:	e7ee      	b.n	8018872 <_fwalk_reent+0x1a>

08018894 <__malloc_lock>:
 8018894:	4770      	bx	lr

08018896 <__malloc_unlock>:
 8018896:	4770      	bx	lr

08018898 <__sfputc_r>:
 8018898:	6893      	ldr	r3, [r2, #8]
 801889a:	3b01      	subs	r3, #1
 801889c:	2b00      	cmp	r3, #0
 801889e:	b410      	push	{r4}
 80188a0:	6093      	str	r3, [r2, #8]
 80188a2:	da08      	bge.n	80188b6 <__sfputc_r+0x1e>
 80188a4:	6994      	ldr	r4, [r2, #24]
 80188a6:	42a3      	cmp	r3, r4
 80188a8:	db01      	blt.n	80188ae <__sfputc_r+0x16>
 80188aa:	290a      	cmp	r1, #10
 80188ac:	d103      	bne.n	80188b6 <__sfputc_r+0x1e>
 80188ae:	f85d 4b04 	ldr.w	r4, [sp], #4
 80188b2:	f000 bafd 	b.w	8018eb0 <__swbuf_r>
 80188b6:	6813      	ldr	r3, [r2, #0]
 80188b8:	1c58      	adds	r0, r3, #1
 80188ba:	6010      	str	r0, [r2, #0]
 80188bc:	7019      	strb	r1, [r3, #0]
 80188be:	4608      	mov	r0, r1
 80188c0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80188c4:	4770      	bx	lr

080188c6 <__sfputs_r>:
 80188c6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80188c8:	4606      	mov	r6, r0
 80188ca:	460f      	mov	r7, r1
 80188cc:	4614      	mov	r4, r2
 80188ce:	18d5      	adds	r5, r2, r3
 80188d0:	42ac      	cmp	r4, r5
 80188d2:	d101      	bne.n	80188d8 <__sfputs_r+0x12>
 80188d4:	2000      	movs	r0, #0
 80188d6:	e007      	b.n	80188e8 <__sfputs_r+0x22>
 80188d8:	463a      	mov	r2, r7
 80188da:	f814 1b01 	ldrb.w	r1, [r4], #1
 80188de:	4630      	mov	r0, r6
 80188e0:	f7ff ffda 	bl	8018898 <__sfputc_r>
 80188e4:	1c43      	adds	r3, r0, #1
 80188e6:	d1f3      	bne.n	80188d0 <__sfputs_r+0xa>
 80188e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080188ec <_vfiprintf_r>:
 80188ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80188f0:	460c      	mov	r4, r1
 80188f2:	b09d      	sub	sp, #116	; 0x74
 80188f4:	4617      	mov	r7, r2
 80188f6:	461d      	mov	r5, r3
 80188f8:	4606      	mov	r6, r0
 80188fa:	b118      	cbz	r0, 8018904 <_vfiprintf_r+0x18>
 80188fc:	6983      	ldr	r3, [r0, #24]
 80188fe:	b90b      	cbnz	r3, 8018904 <_vfiprintf_r+0x18>
 8018900:	f7ff ff3e 	bl	8018780 <__sinit>
 8018904:	4b7c      	ldr	r3, [pc, #496]	; (8018af8 <_vfiprintf_r+0x20c>)
 8018906:	429c      	cmp	r4, r3
 8018908:	d158      	bne.n	80189bc <_vfiprintf_r+0xd0>
 801890a:	6874      	ldr	r4, [r6, #4]
 801890c:	89a3      	ldrh	r3, [r4, #12]
 801890e:	0718      	lsls	r0, r3, #28
 8018910:	d55e      	bpl.n	80189d0 <_vfiprintf_r+0xe4>
 8018912:	6923      	ldr	r3, [r4, #16]
 8018914:	2b00      	cmp	r3, #0
 8018916:	d05b      	beq.n	80189d0 <_vfiprintf_r+0xe4>
 8018918:	2300      	movs	r3, #0
 801891a:	9309      	str	r3, [sp, #36]	; 0x24
 801891c:	2320      	movs	r3, #32
 801891e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8018922:	2330      	movs	r3, #48	; 0x30
 8018924:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8018928:	9503      	str	r5, [sp, #12]
 801892a:	f04f 0b01 	mov.w	fp, #1
 801892e:	46b8      	mov	r8, r7
 8018930:	4645      	mov	r5, r8
 8018932:	f815 3b01 	ldrb.w	r3, [r5], #1
 8018936:	b10b      	cbz	r3, 801893c <_vfiprintf_r+0x50>
 8018938:	2b25      	cmp	r3, #37	; 0x25
 801893a:	d154      	bne.n	80189e6 <_vfiprintf_r+0xfa>
 801893c:	ebb8 0a07 	subs.w	sl, r8, r7
 8018940:	d00b      	beq.n	801895a <_vfiprintf_r+0x6e>
 8018942:	4653      	mov	r3, sl
 8018944:	463a      	mov	r2, r7
 8018946:	4621      	mov	r1, r4
 8018948:	4630      	mov	r0, r6
 801894a:	f7ff ffbc 	bl	80188c6 <__sfputs_r>
 801894e:	3001      	adds	r0, #1
 8018950:	f000 80c2 	beq.w	8018ad8 <_vfiprintf_r+0x1ec>
 8018954:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018956:	4453      	add	r3, sl
 8018958:	9309      	str	r3, [sp, #36]	; 0x24
 801895a:	f898 3000 	ldrb.w	r3, [r8]
 801895e:	2b00      	cmp	r3, #0
 8018960:	f000 80ba 	beq.w	8018ad8 <_vfiprintf_r+0x1ec>
 8018964:	2300      	movs	r3, #0
 8018966:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801896a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801896e:	9304      	str	r3, [sp, #16]
 8018970:	9307      	str	r3, [sp, #28]
 8018972:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8018976:	931a      	str	r3, [sp, #104]	; 0x68
 8018978:	46a8      	mov	r8, r5
 801897a:	2205      	movs	r2, #5
 801897c:	f818 1b01 	ldrb.w	r1, [r8], #1
 8018980:	485e      	ldr	r0, [pc, #376]	; (8018afc <_vfiprintf_r+0x210>)
 8018982:	f7e7 fc35 	bl	80001f0 <memchr>
 8018986:	9b04      	ldr	r3, [sp, #16]
 8018988:	bb78      	cbnz	r0, 80189ea <_vfiprintf_r+0xfe>
 801898a:	06d9      	lsls	r1, r3, #27
 801898c:	bf44      	itt	mi
 801898e:	2220      	movmi	r2, #32
 8018990:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8018994:	071a      	lsls	r2, r3, #28
 8018996:	bf44      	itt	mi
 8018998:	222b      	movmi	r2, #43	; 0x2b
 801899a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 801899e:	782a      	ldrb	r2, [r5, #0]
 80189a0:	2a2a      	cmp	r2, #42	; 0x2a
 80189a2:	d02a      	beq.n	80189fa <_vfiprintf_r+0x10e>
 80189a4:	9a07      	ldr	r2, [sp, #28]
 80189a6:	46a8      	mov	r8, r5
 80189a8:	2000      	movs	r0, #0
 80189aa:	250a      	movs	r5, #10
 80189ac:	4641      	mov	r1, r8
 80189ae:	f811 3b01 	ldrb.w	r3, [r1], #1
 80189b2:	3b30      	subs	r3, #48	; 0x30
 80189b4:	2b09      	cmp	r3, #9
 80189b6:	d969      	bls.n	8018a8c <_vfiprintf_r+0x1a0>
 80189b8:	b360      	cbz	r0, 8018a14 <_vfiprintf_r+0x128>
 80189ba:	e024      	b.n	8018a06 <_vfiprintf_r+0x11a>
 80189bc:	4b50      	ldr	r3, [pc, #320]	; (8018b00 <_vfiprintf_r+0x214>)
 80189be:	429c      	cmp	r4, r3
 80189c0:	d101      	bne.n	80189c6 <_vfiprintf_r+0xda>
 80189c2:	68b4      	ldr	r4, [r6, #8]
 80189c4:	e7a2      	b.n	801890c <_vfiprintf_r+0x20>
 80189c6:	4b4f      	ldr	r3, [pc, #316]	; (8018b04 <_vfiprintf_r+0x218>)
 80189c8:	429c      	cmp	r4, r3
 80189ca:	bf08      	it	eq
 80189cc:	68f4      	ldreq	r4, [r6, #12]
 80189ce:	e79d      	b.n	801890c <_vfiprintf_r+0x20>
 80189d0:	4621      	mov	r1, r4
 80189d2:	4630      	mov	r0, r6
 80189d4:	f000 fad0 	bl	8018f78 <__swsetup_r>
 80189d8:	2800      	cmp	r0, #0
 80189da:	d09d      	beq.n	8018918 <_vfiprintf_r+0x2c>
 80189dc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80189e0:	b01d      	add	sp, #116	; 0x74
 80189e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80189e6:	46a8      	mov	r8, r5
 80189e8:	e7a2      	b.n	8018930 <_vfiprintf_r+0x44>
 80189ea:	4a44      	ldr	r2, [pc, #272]	; (8018afc <_vfiprintf_r+0x210>)
 80189ec:	1a80      	subs	r0, r0, r2
 80189ee:	fa0b f000 	lsl.w	r0, fp, r0
 80189f2:	4318      	orrs	r0, r3
 80189f4:	9004      	str	r0, [sp, #16]
 80189f6:	4645      	mov	r5, r8
 80189f8:	e7be      	b.n	8018978 <_vfiprintf_r+0x8c>
 80189fa:	9a03      	ldr	r2, [sp, #12]
 80189fc:	1d11      	adds	r1, r2, #4
 80189fe:	6812      	ldr	r2, [r2, #0]
 8018a00:	9103      	str	r1, [sp, #12]
 8018a02:	2a00      	cmp	r2, #0
 8018a04:	db01      	blt.n	8018a0a <_vfiprintf_r+0x11e>
 8018a06:	9207      	str	r2, [sp, #28]
 8018a08:	e004      	b.n	8018a14 <_vfiprintf_r+0x128>
 8018a0a:	4252      	negs	r2, r2
 8018a0c:	f043 0302 	orr.w	r3, r3, #2
 8018a10:	9207      	str	r2, [sp, #28]
 8018a12:	9304      	str	r3, [sp, #16]
 8018a14:	f898 3000 	ldrb.w	r3, [r8]
 8018a18:	2b2e      	cmp	r3, #46	; 0x2e
 8018a1a:	d10e      	bne.n	8018a3a <_vfiprintf_r+0x14e>
 8018a1c:	f898 3001 	ldrb.w	r3, [r8, #1]
 8018a20:	2b2a      	cmp	r3, #42	; 0x2a
 8018a22:	d138      	bne.n	8018a96 <_vfiprintf_r+0x1aa>
 8018a24:	9b03      	ldr	r3, [sp, #12]
 8018a26:	1d1a      	adds	r2, r3, #4
 8018a28:	681b      	ldr	r3, [r3, #0]
 8018a2a:	9203      	str	r2, [sp, #12]
 8018a2c:	2b00      	cmp	r3, #0
 8018a2e:	bfb8      	it	lt
 8018a30:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8018a34:	f108 0802 	add.w	r8, r8, #2
 8018a38:	9305      	str	r3, [sp, #20]
 8018a3a:	4d33      	ldr	r5, [pc, #204]	; (8018b08 <_vfiprintf_r+0x21c>)
 8018a3c:	f898 1000 	ldrb.w	r1, [r8]
 8018a40:	2203      	movs	r2, #3
 8018a42:	4628      	mov	r0, r5
 8018a44:	f7e7 fbd4 	bl	80001f0 <memchr>
 8018a48:	b140      	cbz	r0, 8018a5c <_vfiprintf_r+0x170>
 8018a4a:	2340      	movs	r3, #64	; 0x40
 8018a4c:	1b40      	subs	r0, r0, r5
 8018a4e:	fa03 f000 	lsl.w	r0, r3, r0
 8018a52:	9b04      	ldr	r3, [sp, #16]
 8018a54:	4303      	orrs	r3, r0
 8018a56:	f108 0801 	add.w	r8, r8, #1
 8018a5a:	9304      	str	r3, [sp, #16]
 8018a5c:	f898 1000 	ldrb.w	r1, [r8]
 8018a60:	482a      	ldr	r0, [pc, #168]	; (8018b0c <_vfiprintf_r+0x220>)
 8018a62:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8018a66:	2206      	movs	r2, #6
 8018a68:	f108 0701 	add.w	r7, r8, #1
 8018a6c:	f7e7 fbc0 	bl	80001f0 <memchr>
 8018a70:	2800      	cmp	r0, #0
 8018a72:	d037      	beq.n	8018ae4 <_vfiprintf_r+0x1f8>
 8018a74:	4b26      	ldr	r3, [pc, #152]	; (8018b10 <_vfiprintf_r+0x224>)
 8018a76:	bb1b      	cbnz	r3, 8018ac0 <_vfiprintf_r+0x1d4>
 8018a78:	9b03      	ldr	r3, [sp, #12]
 8018a7a:	3307      	adds	r3, #7
 8018a7c:	f023 0307 	bic.w	r3, r3, #7
 8018a80:	3308      	adds	r3, #8
 8018a82:	9303      	str	r3, [sp, #12]
 8018a84:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018a86:	444b      	add	r3, r9
 8018a88:	9309      	str	r3, [sp, #36]	; 0x24
 8018a8a:	e750      	b.n	801892e <_vfiprintf_r+0x42>
 8018a8c:	fb05 3202 	mla	r2, r5, r2, r3
 8018a90:	2001      	movs	r0, #1
 8018a92:	4688      	mov	r8, r1
 8018a94:	e78a      	b.n	80189ac <_vfiprintf_r+0xc0>
 8018a96:	2300      	movs	r3, #0
 8018a98:	f108 0801 	add.w	r8, r8, #1
 8018a9c:	9305      	str	r3, [sp, #20]
 8018a9e:	4619      	mov	r1, r3
 8018aa0:	250a      	movs	r5, #10
 8018aa2:	4640      	mov	r0, r8
 8018aa4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8018aa8:	3a30      	subs	r2, #48	; 0x30
 8018aaa:	2a09      	cmp	r2, #9
 8018aac:	d903      	bls.n	8018ab6 <_vfiprintf_r+0x1ca>
 8018aae:	2b00      	cmp	r3, #0
 8018ab0:	d0c3      	beq.n	8018a3a <_vfiprintf_r+0x14e>
 8018ab2:	9105      	str	r1, [sp, #20]
 8018ab4:	e7c1      	b.n	8018a3a <_vfiprintf_r+0x14e>
 8018ab6:	fb05 2101 	mla	r1, r5, r1, r2
 8018aba:	2301      	movs	r3, #1
 8018abc:	4680      	mov	r8, r0
 8018abe:	e7f0      	b.n	8018aa2 <_vfiprintf_r+0x1b6>
 8018ac0:	ab03      	add	r3, sp, #12
 8018ac2:	9300      	str	r3, [sp, #0]
 8018ac4:	4622      	mov	r2, r4
 8018ac6:	4b13      	ldr	r3, [pc, #76]	; (8018b14 <_vfiprintf_r+0x228>)
 8018ac8:	a904      	add	r1, sp, #16
 8018aca:	4630      	mov	r0, r6
 8018acc:	f3af 8000 	nop.w
 8018ad0:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8018ad4:	4681      	mov	r9, r0
 8018ad6:	d1d5      	bne.n	8018a84 <_vfiprintf_r+0x198>
 8018ad8:	89a3      	ldrh	r3, [r4, #12]
 8018ada:	065b      	lsls	r3, r3, #25
 8018adc:	f53f af7e 	bmi.w	80189dc <_vfiprintf_r+0xf0>
 8018ae0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8018ae2:	e77d      	b.n	80189e0 <_vfiprintf_r+0xf4>
 8018ae4:	ab03      	add	r3, sp, #12
 8018ae6:	9300      	str	r3, [sp, #0]
 8018ae8:	4622      	mov	r2, r4
 8018aea:	4b0a      	ldr	r3, [pc, #40]	; (8018b14 <_vfiprintf_r+0x228>)
 8018aec:	a904      	add	r1, sp, #16
 8018aee:	4630      	mov	r0, r6
 8018af0:	f000 f888 	bl	8018c04 <_printf_i>
 8018af4:	e7ec      	b.n	8018ad0 <_vfiprintf_r+0x1e4>
 8018af6:	bf00      	nop
 8018af8:	0801b904 	.word	0x0801b904
 8018afc:	0801b944 	.word	0x0801b944
 8018b00:	0801b924 	.word	0x0801b924
 8018b04:	0801b8e4 	.word	0x0801b8e4
 8018b08:	0801b94a 	.word	0x0801b94a
 8018b0c:	0801b94e 	.word	0x0801b94e
 8018b10:	00000000 	.word	0x00000000
 8018b14:	080188c7 	.word	0x080188c7

08018b18 <_printf_common>:
 8018b18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018b1c:	4691      	mov	r9, r2
 8018b1e:	461f      	mov	r7, r3
 8018b20:	688a      	ldr	r2, [r1, #8]
 8018b22:	690b      	ldr	r3, [r1, #16]
 8018b24:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8018b28:	4293      	cmp	r3, r2
 8018b2a:	bfb8      	it	lt
 8018b2c:	4613      	movlt	r3, r2
 8018b2e:	f8c9 3000 	str.w	r3, [r9]
 8018b32:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8018b36:	4606      	mov	r6, r0
 8018b38:	460c      	mov	r4, r1
 8018b3a:	b112      	cbz	r2, 8018b42 <_printf_common+0x2a>
 8018b3c:	3301      	adds	r3, #1
 8018b3e:	f8c9 3000 	str.w	r3, [r9]
 8018b42:	6823      	ldr	r3, [r4, #0]
 8018b44:	0699      	lsls	r1, r3, #26
 8018b46:	bf42      	ittt	mi
 8018b48:	f8d9 3000 	ldrmi.w	r3, [r9]
 8018b4c:	3302      	addmi	r3, #2
 8018b4e:	f8c9 3000 	strmi.w	r3, [r9]
 8018b52:	6825      	ldr	r5, [r4, #0]
 8018b54:	f015 0506 	ands.w	r5, r5, #6
 8018b58:	d107      	bne.n	8018b6a <_printf_common+0x52>
 8018b5a:	f104 0a19 	add.w	sl, r4, #25
 8018b5e:	68e3      	ldr	r3, [r4, #12]
 8018b60:	f8d9 2000 	ldr.w	r2, [r9]
 8018b64:	1a9b      	subs	r3, r3, r2
 8018b66:	42ab      	cmp	r3, r5
 8018b68:	dc28      	bgt.n	8018bbc <_printf_common+0xa4>
 8018b6a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8018b6e:	6822      	ldr	r2, [r4, #0]
 8018b70:	3300      	adds	r3, #0
 8018b72:	bf18      	it	ne
 8018b74:	2301      	movne	r3, #1
 8018b76:	0692      	lsls	r2, r2, #26
 8018b78:	d42d      	bmi.n	8018bd6 <_printf_common+0xbe>
 8018b7a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8018b7e:	4639      	mov	r1, r7
 8018b80:	4630      	mov	r0, r6
 8018b82:	47c0      	blx	r8
 8018b84:	3001      	adds	r0, #1
 8018b86:	d020      	beq.n	8018bca <_printf_common+0xb2>
 8018b88:	6823      	ldr	r3, [r4, #0]
 8018b8a:	68e5      	ldr	r5, [r4, #12]
 8018b8c:	f8d9 2000 	ldr.w	r2, [r9]
 8018b90:	f003 0306 	and.w	r3, r3, #6
 8018b94:	2b04      	cmp	r3, #4
 8018b96:	bf08      	it	eq
 8018b98:	1aad      	subeq	r5, r5, r2
 8018b9a:	68a3      	ldr	r3, [r4, #8]
 8018b9c:	6922      	ldr	r2, [r4, #16]
 8018b9e:	bf0c      	ite	eq
 8018ba0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8018ba4:	2500      	movne	r5, #0
 8018ba6:	4293      	cmp	r3, r2
 8018ba8:	bfc4      	itt	gt
 8018baa:	1a9b      	subgt	r3, r3, r2
 8018bac:	18ed      	addgt	r5, r5, r3
 8018bae:	f04f 0900 	mov.w	r9, #0
 8018bb2:	341a      	adds	r4, #26
 8018bb4:	454d      	cmp	r5, r9
 8018bb6:	d11a      	bne.n	8018bee <_printf_common+0xd6>
 8018bb8:	2000      	movs	r0, #0
 8018bba:	e008      	b.n	8018bce <_printf_common+0xb6>
 8018bbc:	2301      	movs	r3, #1
 8018bbe:	4652      	mov	r2, sl
 8018bc0:	4639      	mov	r1, r7
 8018bc2:	4630      	mov	r0, r6
 8018bc4:	47c0      	blx	r8
 8018bc6:	3001      	adds	r0, #1
 8018bc8:	d103      	bne.n	8018bd2 <_printf_common+0xba>
 8018bca:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8018bce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018bd2:	3501      	adds	r5, #1
 8018bd4:	e7c3      	b.n	8018b5e <_printf_common+0x46>
 8018bd6:	18e1      	adds	r1, r4, r3
 8018bd8:	1c5a      	adds	r2, r3, #1
 8018bda:	2030      	movs	r0, #48	; 0x30
 8018bdc:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8018be0:	4422      	add	r2, r4
 8018be2:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8018be6:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8018bea:	3302      	adds	r3, #2
 8018bec:	e7c5      	b.n	8018b7a <_printf_common+0x62>
 8018bee:	2301      	movs	r3, #1
 8018bf0:	4622      	mov	r2, r4
 8018bf2:	4639      	mov	r1, r7
 8018bf4:	4630      	mov	r0, r6
 8018bf6:	47c0      	blx	r8
 8018bf8:	3001      	adds	r0, #1
 8018bfa:	d0e6      	beq.n	8018bca <_printf_common+0xb2>
 8018bfc:	f109 0901 	add.w	r9, r9, #1
 8018c00:	e7d8      	b.n	8018bb4 <_printf_common+0x9c>
	...

08018c04 <_printf_i>:
 8018c04:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8018c08:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8018c0c:	460c      	mov	r4, r1
 8018c0e:	7e09      	ldrb	r1, [r1, #24]
 8018c10:	b085      	sub	sp, #20
 8018c12:	296e      	cmp	r1, #110	; 0x6e
 8018c14:	4617      	mov	r7, r2
 8018c16:	4606      	mov	r6, r0
 8018c18:	4698      	mov	r8, r3
 8018c1a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8018c1c:	f000 80b3 	beq.w	8018d86 <_printf_i+0x182>
 8018c20:	d822      	bhi.n	8018c68 <_printf_i+0x64>
 8018c22:	2963      	cmp	r1, #99	; 0x63
 8018c24:	d036      	beq.n	8018c94 <_printf_i+0x90>
 8018c26:	d80a      	bhi.n	8018c3e <_printf_i+0x3a>
 8018c28:	2900      	cmp	r1, #0
 8018c2a:	f000 80b9 	beq.w	8018da0 <_printf_i+0x19c>
 8018c2e:	2958      	cmp	r1, #88	; 0x58
 8018c30:	f000 8083 	beq.w	8018d3a <_printf_i+0x136>
 8018c34:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8018c38:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8018c3c:	e032      	b.n	8018ca4 <_printf_i+0xa0>
 8018c3e:	2964      	cmp	r1, #100	; 0x64
 8018c40:	d001      	beq.n	8018c46 <_printf_i+0x42>
 8018c42:	2969      	cmp	r1, #105	; 0x69
 8018c44:	d1f6      	bne.n	8018c34 <_printf_i+0x30>
 8018c46:	6820      	ldr	r0, [r4, #0]
 8018c48:	6813      	ldr	r3, [r2, #0]
 8018c4a:	0605      	lsls	r5, r0, #24
 8018c4c:	f103 0104 	add.w	r1, r3, #4
 8018c50:	d52a      	bpl.n	8018ca8 <_printf_i+0xa4>
 8018c52:	681b      	ldr	r3, [r3, #0]
 8018c54:	6011      	str	r1, [r2, #0]
 8018c56:	2b00      	cmp	r3, #0
 8018c58:	da03      	bge.n	8018c62 <_printf_i+0x5e>
 8018c5a:	222d      	movs	r2, #45	; 0x2d
 8018c5c:	425b      	negs	r3, r3
 8018c5e:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8018c62:	486f      	ldr	r0, [pc, #444]	; (8018e20 <_printf_i+0x21c>)
 8018c64:	220a      	movs	r2, #10
 8018c66:	e039      	b.n	8018cdc <_printf_i+0xd8>
 8018c68:	2973      	cmp	r1, #115	; 0x73
 8018c6a:	f000 809d 	beq.w	8018da8 <_printf_i+0x1a4>
 8018c6e:	d808      	bhi.n	8018c82 <_printf_i+0x7e>
 8018c70:	296f      	cmp	r1, #111	; 0x6f
 8018c72:	d020      	beq.n	8018cb6 <_printf_i+0xb2>
 8018c74:	2970      	cmp	r1, #112	; 0x70
 8018c76:	d1dd      	bne.n	8018c34 <_printf_i+0x30>
 8018c78:	6823      	ldr	r3, [r4, #0]
 8018c7a:	f043 0320 	orr.w	r3, r3, #32
 8018c7e:	6023      	str	r3, [r4, #0]
 8018c80:	e003      	b.n	8018c8a <_printf_i+0x86>
 8018c82:	2975      	cmp	r1, #117	; 0x75
 8018c84:	d017      	beq.n	8018cb6 <_printf_i+0xb2>
 8018c86:	2978      	cmp	r1, #120	; 0x78
 8018c88:	d1d4      	bne.n	8018c34 <_printf_i+0x30>
 8018c8a:	2378      	movs	r3, #120	; 0x78
 8018c8c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8018c90:	4864      	ldr	r0, [pc, #400]	; (8018e24 <_printf_i+0x220>)
 8018c92:	e055      	b.n	8018d40 <_printf_i+0x13c>
 8018c94:	6813      	ldr	r3, [r2, #0]
 8018c96:	1d19      	adds	r1, r3, #4
 8018c98:	681b      	ldr	r3, [r3, #0]
 8018c9a:	6011      	str	r1, [r2, #0]
 8018c9c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8018ca0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8018ca4:	2301      	movs	r3, #1
 8018ca6:	e08c      	b.n	8018dc2 <_printf_i+0x1be>
 8018ca8:	681b      	ldr	r3, [r3, #0]
 8018caa:	6011      	str	r1, [r2, #0]
 8018cac:	f010 0f40 	tst.w	r0, #64	; 0x40
 8018cb0:	bf18      	it	ne
 8018cb2:	b21b      	sxthne	r3, r3
 8018cb4:	e7cf      	b.n	8018c56 <_printf_i+0x52>
 8018cb6:	6813      	ldr	r3, [r2, #0]
 8018cb8:	6825      	ldr	r5, [r4, #0]
 8018cba:	1d18      	adds	r0, r3, #4
 8018cbc:	6010      	str	r0, [r2, #0]
 8018cbe:	0628      	lsls	r0, r5, #24
 8018cc0:	d501      	bpl.n	8018cc6 <_printf_i+0xc2>
 8018cc2:	681b      	ldr	r3, [r3, #0]
 8018cc4:	e002      	b.n	8018ccc <_printf_i+0xc8>
 8018cc6:	0668      	lsls	r0, r5, #25
 8018cc8:	d5fb      	bpl.n	8018cc2 <_printf_i+0xbe>
 8018cca:	881b      	ldrh	r3, [r3, #0]
 8018ccc:	4854      	ldr	r0, [pc, #336]	; (8018e20 <_printf_i+0x21c>)
 8018cce:	296f      	cmp	r1, #111	; 0x6f
 8018cd0:	bf14      	ite	ne
 8018cd2:	220a      	movne	r2, #10
 8018cd4:	2208      	moveq	r2, #8
 8018cd6:	2100      	movs	r1, #0
 8018cd8:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8018cdc:	6865      	ldr	r5, [r4, #4]
 8018cde:	60a5      	str	r5, [r4, #8]
 8018ce0:	2d00      	cmp	r5, #0
 8018ce2:	f2c0 8095 	blt.w	8018e10 <_printf_i+0x20c>
 8018ce6:	6821      	ldr	r1, [r4, #0]
 8018ce8:	f021 0104 	bic.w	r1, r1, #4
 8018cec:	6021      	str	r1, [r4, #0]
 8018cee:	2b00      	cmp	r3, #0
 8018cf0:	d13d      	bne.n	8018d6e <_printf_i+0x16a>
 8018cf2:	2d00      	cmp	r5, #0
 8018cf4:	f040 808e 	bne.w	8018e14 <_printf_i+0x210>
 8018cf8:	4665      	mov	r5, ip
 8018cfa:	2a08      	cmp	r2, #8
 8018cfc:	d10b      	bne.n	8018d16 <_printf_i+0x112>
 8018cfe:	6823      	ldr	r3, [r4, #0]
 8018d00:	07db      	lsls	r3, r3, #31
 8018d02:	d508      	bpl.n	8018d16 <_printf_i+0x112>
 8018d04:	6923      	ldr	r3, [r4, #16]
 8018d06:	6862      	ldr	r2, [r4, #4]
 8018d08:	429a      	cmp	r2, r3
 8018d0a:	bfde      	ittt	le
 8018d0c:	2330      	movle	r3, #48	; 0x30
 8018d0e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8018d12:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8018d16:	ebac 0305 	sub.w	r3, ip, r5
 8018d1a:	6123      	str	r3, [r4, #16]
 8018d1c:	f8cd 8000 	str.w	r8, [sp]
 8018d20:	463b      	mov	r3, r7
 8018d22:	aa03      	add	r2, sp, #12
 8018d24:	4621      	mov	r1, r4
 8018d26:	4630      	mov	r0, r6
 8018d28:	f7ff fef6 	bl	8018b18 <_printf_common>
 8018d2c:	3001      	adds	r0, #1
 8018d2e:	d14d      	bne.n	8018dcc <_printf_i+0x1c8>
 8018d30:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8018d34:	b005      	add	sp, #20
 8018d36:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8018d3a:	4839      	ldr	r0, [pc, #228]	; (8018e20 <_printf_i+0x21c>)
 8018d3c:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8018d40:	6813      	ldr	r3, [r2, #0]
 8018d42:	6821      	ldr	r1, [r4, #0]
 8018d44:	1d1d      	adds	r5, r3, #4
 8018d46:	681b      	ldr	r3, [r3, #0]
 8018d48:	6015      	str	r5, [r2, #0]
 8018d4a:	060a      	lsls	r2, r1, #24
 8018d4c:	d50b      	bpl.n	8018d66 <_printf_i+0x162>
 8018d4e:	07ca      	lsls	r2, r1, #31
 8018d50:	bf44      	itt	mi
 8018d52:	f041 0120 	orrmi.w	r1, r1, #32
 8018d56:	6021      	strmi	r1, [r4, #0]
 8018d58:	b91b      	cbnz	r3, 8018d62 <_printf_i+0x15e>
 8018d5a:	6822      	ldr	r2, [r4, #0]
 8018d5c:	f022 0220 	bic.w	r2, r2, #32
 8018d60:	6022      	str	r2, [r4, #0]
 8018d62:	2210      	movs	r2, #16
 8018d64:	e7b7      	b.n	8018cd6 <_printf_i+0xd2>
 8018d66:	064d      	lsls	r5, r1, #25
 8018d68:	bf48      	it	mi
 8018d6a:	b29b      	uxthmi	r3, r3
 8018d6c:	e7ef      	b.n	8018d4e <_printf_i+0x14a>
 8018d6e:	4665      	mov	r5, ip
 8018d70:	fbb3 f1f2 	udiv	r1, r3, r2
 8018d74:	fb02 3311 	mls	r3, r2, r1, r3
 8018d78:	5cc3      	ldrb	r3, [r0, r3]
 8018d7a:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8018d7e:	460b      	mov	r3, r1
 8018d80:	2900      	cmp	r1, #0
 8018d82:	d1f5      	bne.n	8018d70 <_printf_i+0x16c>
 8018d84:	e7b9      	b.n	8018cfa <_printf_i+0xf6>
 8018d86:	6813      	ldr	r3, [r2, #0]
 8018d88:	6825      	ldr	r5, [r4, #0]
 8018d8a:	6961      	ldr	r1, [r4, #20]
 8018d8c:	1d18      	adds	r0, r3, #4
 8018d8e:	6010      	str	r0, [r2, #0]
 8018d90:	0628      	lsls	r0, r5, #24
 8018d92:	681b      	ldr	r3, [r3, #0]
 8018d94:	d501      	bpl.n	8018d9a <_printf_i+0x196>
 8018d96:	6019      	str	r1, [r3, #0]
 8018d98:	e002      	b.n	8018da0 <_printf_i+0x19c>
 8018d9a:	066a      	lsls	r2, r5, #25
 8018d9c:	d5fb      	bpl.n	8018d96 <_printf_i+0x192>
 8018d9e:	8019      	strh	r1, [r3, #0]
 8018da0:	2300      	movs	r3, #0
 8018da2:	6123      	str	r3, [r4, #16]
 8018da4:	4665      	mov	r5, ip
 8018da6:	e7b9      	b.n	8018d1c <_printf_i+0x118>
 8018da8:	6813      	ldr	r3, [r2, #0]
 8018daa:	1d19      	adds	r1, r3, #4
 8018dac:	6011      	str	r1, [r2, #0]
 8018dae:	681d      	ldr	r5, [r3, #0]
 8018db0:	6862      	ldr	r2, [r4, #4]
 8018db2:	2100      	movs	r1, #0
 8018db4:	4628      	mov	r0, r5
 8018db6:	f7e7 fa1b 	bl	80001f0 <memchr>
 8018dba:	b108      	cbz	r0, 8018dc0 <_printf_i+0x1bc>
 8018dbc:	1b40      	subs	r0, r0, r5
 8018dbe:	6060      	str	r0, [r4, #4]
 8018dc0:	6863      	ldr	r3, [r4, #4]
 8018dc2:	6123      	str	r3, [r4, #16]
 8018dc4:	2300      	movs	r3, #0
 8018dc6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8018dca:	e7a7      	b.n	8018d1c <_printf_i+0x118>
 8018dcc:	6923      	ldr	r3, [r4, #16]
 8018dce:	462a      	mov	r2, r5
 8018dd0:	4639      	mov	r1, r7
 8018dd2:	4630      	mov	r0, r6
 8018dd4:	47c0      	blx	r8
 8018dd6:	3001      	adds	r0, #1
 8018dd8:	d0aa      	beq.n	8018d30 <_printf_i+0x12c>
 8018dda:	6823      	ldr	r3, [r4, #0]
 8018ddc:	079b      	lsls	r3, r3, #30
 8018dde:	d413      	bmi.n	8018e08 <_printf_i+0x204>
 8018de0:	68e0      	ldr	r0, [r4, #12]
 8018de2:	9b03      	ldr	r3, [sp, #12]
 8018de4:	4298      	cmp	r0, r3
 8018de6:	bfb8      	it	lt
 8018de8:	4618      	movlt	r0, r3
 8018dea:	e7a3      	b.n	8018d34 <_printf_i+0x130>
 8018dec:	2301      	movs	r3, #1
 8018dee:	464a      	mov	r2, r9
 8018df0:	4639      	mov	r1, r7
 8018df2:	4630      	mov	r0, r6
 8018df4:	47c0      	blx	r8
 8018df6:	3001      	adds	r0, #1
 8018df8:	d09a      	beq.n	8018d30 <_printf_i+0x12c>
 8018dfa:	3501      	adds	r5, #1
 8018dfc:	68e3      	ldr	r3, [r4, #12]
 8018dfe:	9a03      	ldr	r2, [sp, #12]
 8018e00:	1a9b      	subs	r3, r3, r2
 8018e02:	42ab      	cmp	r3, r5
 8018e04:	dcf2      	bgt.n	8018dec <_printf_i+0x1e8>
 8018e06:	e7eb      	b.n	8018de0 <_printf_i+0x1dc>
 8018e08:	2500      	movs	r5, #0
 8018e0a:	f104 0919 	add.w	r9, r4, #25
 8018e0e:	e7f5      	b.n	8018dfc <_printf_i+0x1f8>
 8018e10:	2b00      	cmp	r3, #0
 8018e12:	d1ac      	bne.n	8018d6e <_printf_i+0x16a>
 8018e14:	7803      	ldrb	r3, [r0, #0]
 8018e16:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8018e1a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8018e1e:	e76c      	b.n	8018cfa <_printf_i+0xf6>
 8018e20:	0801b955 	.word	0x0801b955
 8018e24:	0801b966 	.word	0x0801b966

08018e28 <__sread>:
 8018e28:	b510      	push	{r4, lr}
 8018e2a:	460c      	mov	r4, r1
 8018e2c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8018e30:	f000 fa46 	bl	80192c0 <_read_r>
 8018e34:	2800      	cmp	r0, #0
 8018e36:	bfab      	itete	ge
 8018e38:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8018e3a:	89a3      	ldrhlt	r3, [r4, #12]
 8018e3c:	181b      	addge	r3, r3, r0
 8018e3e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8018e42:	bfac      	ite	ge
 8018e44:	6563      	strge	r3, [r4, #84]	; 0x54
 8018e46:	81a3      	strhlt	r3, [r4, #12]
 8018e48:	bd10      	pop	{r4, pc}

08018e4a <__swrite>:
 8018e4a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018e4e:	461f      	mov	r7, r3
 8018e50:	898b      	ldrh	r3, [r1, #12]
 8018e52:	05db      	lsls	r3, r3, #23
 8018e54:	4605      	mov	r5, r0
 8018e56:	460c      	mov	r4, r1
 8018e58:	4616      	mov	r6, r2
 8018e5a:	d505      	bpl.n	8018e68 <__swrite+0x1e>
 8018e5c:	2302      	movs	r3, #2
 8018e5e:	2200      	movs	r2, #0
 8018e60:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8018e64:	f000 f9b6 	bl	80191d4 <_lseek_r>
 8018e68:	89a3      	ldrh	r3, [r4, #12]
 8018e6a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8018e6e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8018e72:	81a3      	strh	r3, [r4, #12]
 8018e74:	4632      	mov	r2, r6
 8018e76:	463b      	mov	r3, r7
 8018e78:	4628      	mov	r0, r5
 8018e7a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8018e7e:	f000 b869 	b.w	8018f54 <_write_r>

08018e82 <__sseek>:
 8018e82:	b510      	push	{r4, lr}
 8018e84:	460c      	mov	r4, r1
 8018e86:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8018e8a:	f000 f9a3 	bl	80191d4 <_lseek_r>
 8018e8e:	1c43      	adds	r3, r0, #1
 8018e90:	89a3      	ldrh	r3, [r4, #12]
 8018e92:	bf15      	itete	ne
 8018e94:	6560      	strne	r0, [r4, #84]	; 0x54
 8018e96:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8018e9a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8018e9e:	81a3      	strheq	r3, [r4, #12]
 8018ea0:	bf18      	it	ne
 8018ea2:	81a3      	strhne	r3, [r4, #12]
 8018ea4:	bd10      	pop	{r4, pc}

08018ea6 <__sclose>:
 8018ea6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8018eaa:	f000 b8d3 	b.w	8019054 <_close_r>
	...

08018eb0 <__swbuf_r>:
 8018eb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018eb2:	460e      	mov	r6, r1
 8018eb4:	4614      	mov	r4, r2
 8018eb6:	4605      	mov	r5, r0
 8018eb8:	b118      	cbz	r0, 8018ec2 <__swbuf_r+0x12>
 8018eba:	6983      	ldr	r3, [r0, #24]
 8018ebc:	b90b      	cbnz	r3, 8018ec2 <__swbuf_r+0x12>
 8018ebe:	f7ff fc5f 	bl	8018780 <__sinit>
 8018ec2:	4b21      	ldr	r3, [pc, #132]	; (8018f48 <__swbuf_r+0x98>)
 8018ec4:	429c      	cmp	r4, r3
 8018ec6:	d12a      	bne.n	8018f1e <__swbuf_r+0x6e>
 8018ec8:	686c      	ldr	r4, [r5, #4]
 8018eca:	69a3      	ldr	r3, [r4, #24]
 8018ecc:	60a3      	str	r3, [r4, #8]
 8018ece:	89a3      	ldrh	r3, [r4, #12]
 8018ed0:	071a      	lsls	r2, r3, #28
 8018ed2:	d52e      	bpl.n	8018f32 <__swbuf_r+0x82>
 8018ed4:	6923      	ldr	r3, [r4, #16]
 8018ed6:	b363      	cbz	r3, 8018f32 <__swbuf_r+0x82>
 8018ed8:	6923      	ldr	r3, [r4, #16]
 8018eda:	6820      	ldr	r0, [r4, #0]
 8018edc:	1ac0      	subs	r0, r0, r3
 8018ede:	6963      	ldr	r3, [r4, #20]
 8018ee0:	b2f6      	uxtb	r6, r6
 8018ee2:	4283      	cmp	r3, r0
 8018ee4:	4637      	mov	r7, r6
 8018ee6:	dc04      	bgt.n	8018ef2 <__swbuf_r+0x42>
 8018ee8:	4621      	mov	r1, r4
 8018eea:	4628      	mov	r0, r5
 8018eec:	f000 f948 	bl	8019180 <_fflush_r>
 8018ef0:	bb28      	cbnz	r0, 8018f3e <__swbuf_r+0x8e>
 8018ef2:	68a3      	ldr	r3, [r4, #8]
 8018ef4:	3b01      	subs	r3, #1
 8018ef6:	60a3      	str	r3, [r4, #8]
 8018ef8:	6823      	ldr	r3, [r4, #0]
 8018efa:	1c5a      	adds	r2, r3, #1
 8018efc:	6022      	str	r2, [r4, #0]
 8018efe:	701e      	strb	r6, [r3, #0]
 8018f00:	6963      	ldr	r3, [r4, #20]
 8018f02:	3001      	adds	r0, #1
 8018f04:	4283      	cmp	r3, r0
 8018f06:	d004      	beq.n	8018f12 <__swbuf_r+0x62>
 8018f08:	89a3      	ldrh	r3, [r4, #12]
 8018f0a:	07db      	lsls	r3, r3, #31
 8018f0c:	d519      	bpl.n	8018f42 <__swbuf_r+0x92>
 8018f0e:	2e0a      	cmp	r6, #10
 8018f10:	d117      	bne.n	8018f42 <__swbuf_r+0x92>
 8018f12:	4621      	mov	r1, r4
 8018f14:	4628      	mov	r0, r5
 8018f16:	f000 f933 	bl	8019180 <_fflush_r>
 8018f1a:	b190      	cbz	r0, 8018f42 <__swbuf_r+0x92>
 8018f1c:	e00f      	b.n	8018f3e <__swbuf_r+0x8e>
 8018f1e:	4b0b      	ldr	r3, [pc, #44]	; (8018f4c <__swbuf_r+0x9c>)
 8018f20:	429c      	cmp	r4, r3
 8018f22:	d101      	bne.n	8018f28 <__swbuf_r+0x78>
 8018f24:	68ac      	ldr	r4, [r5, #8]
 8018f26:	e7d0      	b.n	8018eca <__swbuf_r+0x1a>
 8018f28:	4b09      	ldr	r3, [pc, #36]	; (8018f50 <__swbuf_r+0xa0>)
 8018f2a:	429c      	cmp	r4, r3
 8018f2c:	bf08      	it	eq
 8018f2e:	68ec      	ldreq	r4, [r5, #12]
 8018f30:	e7cb      	b.n	8018eca <__swbuf_r+0x1a>
 8018f32:	4621      	mov	r1, r4
 8018f34:	4628      	mov	r0, r5
 8018f36:	f000 f81f 	bl	8018f78 <__swsetup_r>
 8018f3a:	2800      	cmp	r0, #0
 8018f3c:	d0cc      	beq.n	8018ed8 <__swbuf_r+0x28>
 8018f3e:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8018f42:	4638      	mov	r0, r7
 8018f44:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8018f46:	bf00      	nop
 8018f48:	0801b904 	.word	0x0801b904
 8018f4c:	0801b924 	.word	0x0801b924
 8018f50:	0801b8e4 	.word	0x0801b8e4

08018f54 <_write_r>:
 8018f54:	b538      	push	{r3, r4, r5, lr}
 8018f56:	4c07      	ldr	r4, [pc, #28]	; (8018f74 <_write_r+0x20>)
 8018f58:	4605      	mov	r5, r0
 8018f5a:	4608      	mov	r0, r1
 8018f5c:	4611      	mov	r1, r2
 8018f5e:	2200      	movs	r2, #0
 8018f60:	6022      	str	r2, [r4, #0]
 8018f62:	461a      	mov	r2, r3
 8018f64:	f7e8 fb09 	bl	800157a <_write>
 8018f68:	1c43      	adds	r3, r0, #1
 8018f6a:	d102      	bne.n	8018f72 <_write_r+0x1e>
 8018f6c:	6823      	ldr	r3, [r4, #0]
 8018f6e:	b103      	cbz	r3, 8018f72 <_write_r+0x1e>
 8018f70:	602b      	str	r3, [r5, #0]
 8018f72:	bd38      	pop	{r3, r4, r5, pc}
 8018f74:	2000ac78 	.word	0x2000ac78

08018f78 <__swsetup_r>:
 8018f78:	4b32      	ldr	r3, [pc, #200]	; (8019044 <__swsetup_r+0xcc>)
 8018f7a:	b570      	push	{r4, r5, r6, lr}
 8018f7c:	681d      	ldr	r5, [r3, #0]
 8018f7e:	4606      	mov	r6, r0
 8018f80:	460c      	mov	r4, r1
 8018f82:	b125      	cbz	r5, 8018f8e <__swsetup_r+0x16>
 8018f84:	69ab      	ldr	r3, [r5, #24]
 8018f86:	b913      	cbnz	r3, 8018f8e <__swsetup_r+0x16>
 8018f88:	4628      	mov	r0, r5
 8018f8a:	f7ff fbf9 	bl	8018780 <__sinit>
 8018f8e:	4b2e      	ldr	r3, [pc, #184]	; (8019048 <__swsetup_r+0xd0>)
 8018f90:	429c      	cmp	r4, r3
 8018f92:	d10f      	bne.n	8018fb4 <__swsetup_r+0x3c>
 8018f94:	686c      	ldr	r4, [r5, #4]
 8018f96:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8018f9a:	b29a      	uxth	r2, r3
 8018f9c:	0715      	lsls	r5, r2, #28
 8018f9e:	d42c      	bmi.n	8018ffa <__swsetup_r+0x82>
 8018fa0:	06d0      	lsls	r0, r2, #27
 8018fa2:	d411      	bmi.n	8018fc8 <__swsetup_r+0x50>
 8018fa4:	2209      	movs	r2, #9
 8018fa6:	6032      	str	r2, [r6, #0]
 8018fa8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8018fac:	81a3      	strh	r3, [r4, #12]
 8018fae:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8018fb2:	e03e      	b.n	8019032 <__swsetup_r+0xba>
 8018fb4:	4b25      	ldr	r3, [pc, #148]	; (801904c <__swsetup_r+0xd4>)
 8018fb6:	429c      	cmp	r4, r3
 8018fb8:	d101      	bne.n	8018fbe <__swsetup_r+0x46>
 8018fba:	68ac      	ldr	r4, [r5, #8]
 8018fbc:	e7eb      	b.n	8018f96 <__swsetup_r+0x1e>
 8018fbe:	4b24      	ldr	r3, [pc, #144]	; (8019050 <__swsetup_r+0xd8>)
 8018fc0:	429c      	cmp	r4, r3
 8018fc2:	bf08      	it	eq
 8018fc4:	68ec      	ldreq	r4, [r5, #12]
 8018fc6:	e7e6      	b.n	8018f96 <__swsetup_r+0x1e>
 8018fc8:	0751      	lsls	r1, r2, #29
 8018fca:	d512      	bpl.n	8018ff2 <__swsetup_r+0x7a>
 8018fcc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8018fce:	b141      	cbz	r1, 8018fe2 <__swsetup_r+0x6a>
 8018fd0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8018fd4:	4299      	cmp	r1, r3
 8018fd6:	d002      	beq.n	8018fde <__swsetup_r+0x66>
 8018fd8:	4630      	mov	r0, r6
 8018fda:	f7ff fa8d 	bl	80184f8 <_free_r>
 8018fde:	2300      	movs	r3, #0
 8018fe0:	6363      	str	r3, [r4, #52]	; 0x34
 8018fe2:	89a3      	ldrh	r3, [r4, #12]
 8018fe4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8018fe8:	81a3      	strh	r3, [r4, #12]
 8018fea:	2300      	movs	r3, #0
 8018fec:	6063      	str	r3, [r4, #4]
 8018fee:	6923      	ldr	r3, [r4, #16]
 8018ff0:	6023      	str	r3, [r4, #0]
 8018ff2:	89a3      	ldrh	r3, [r4, #12]
 8018ff4:	f043 0308 	orr.w	r3, r3, #8
 8018ff8:	81a3      	strh	r3, [r4, #12]
 8018ffa:	6923      	ldr	r3, [r4, #16]
 8018ffc:	b94b      	cbnz	r3, 8019012 <__swsetup_r+0x9a>
 8018ffe:	89a3      	ldrh	r3, [r4, #12]
 8019000:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8019004:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8019008:	d003      	beq.n	8019012 <__swsetup_r+0x9a>
 801900a:	4621      	mov	r1, r4
 801900c:	4630      	mov	r0, r6
 801900e:	f000 f917 	bl	8019240 <__smakebuf_r>
 8019012:	89a2      	ldrh	r2, [r4, #12]
 8019014:	f012 0301 	ands.w	r3, r2, #1
 8019018:	d00c      	beq.n	8019034 <__swsetup_r+0xbc>
 801901a:	2300      	movs	r3, #0
 801901c:	60a3      	str	r3, [r4, #8]
 801901e:	6963      	ldr	r3, [r4, #20]
 8019020:	425b      	negs	r3, r3
 8019022:	61a3      	str	r3, [r4, #24]
 8019024:	6923      	ldr	r3, [r4, #16]
 8019026:	b953      	cbnz	r3, 801903e <__swsetup_r+0xc6>
 8019028:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801902c:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8019030:	d1ba      	bne.n	8018fa8 <__swsetup_r+0x30>
 8019032:	bd70      	pop	{r4, r5, r6, pc}
 8019034:	0792      	lsls	r2, r2, #30
 8019036:	bf58      	it	pl
 8019038:	6963      	ldrpl	r3, [r4, #20]
 801903a:	60a3      	str	r3, [r4, #8]
 801903c:	e7f2      	b.n	8019024 <__swsetup_r+0xac>
 801903e:	2000      	movs	r0, #0
 8019040:	e7f7      	b.n	8019032 <__swsetup_r+0xba>
 8019042:	bf00      	nop
 8019044:	2000018c 	.word	0x2000018c
 8019048:	0801b904 	.word	0x0801b904
 801904c:	0801b924 	.word	0x0801b924
 8019050:	0801b8e4 	.word	0x0801b8e4

08019054 <_close_r>:
 8019054:	b538      	push	{r3, r4, r5, lr}
 8019056:	4c06      	ldr	r4, [pc, #24]	; (8019070 <_close_r+0x1c>)
 8019058:	2300      	movs	r3, #0
 801905a:	4605      	mov	r5, r0
 801905c:	4608      	mov	r0, r1
 801905e:	6023      	str	r3, [r4, #0]
 8019060:	f7e8 faa7 	bl	80015b2 <_close>
 8019064:	1c43      	adds	r3, r0, #1
 8019066:	d102      	bne.n	801906e <_close_r+0x1a>
 8019068:	6823      	ldr	r3, [r4, #0]
 801906a:	b103      	cbz	r3, 801906e <_close_r+0x1a>
 801906c:	602b      	str	r3, [r5, #0]
 801906e:	bd38      	pop	{r3, r4, r5, pc}
 8019070:	2000ac78 	.word	0x2000ac78

08019074 <__sflush_r>:
 8019074:	898a      	ldrh	r2, [r1, #12]
 8019076:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801907a:	4605      	mov	r5, r0
 801907c:	0710      	lsls	r0, r2, #28
 801907e:	460c      	mov	r4, r1
 8019080:	d458      	bmi.n	8019134 <__sflush_r+0xc0>
 8019082:	684b      	ldr	r3, [r1, #4]
 8019084:	2b00      	cmp	r3, #0
 8019086:	dc05      	bgt.n	8019094 <__sflush_r+0x20>
 8019088:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801908a:	2b00      	cmp	r3, #0
 801908c:	dc02      	bgt.n	8019094 <__sflush_r+0x20>
 801908e:	2000      	movs	r0, #0
 8019090:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019094:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8019096:	2e00      	cmp	r6, #0
 8019098:	d0f9      	beq.n	801908e <__sflush_r+0x1a>
 801909a:	2300      	movs	r3, #0
 801909c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80190a0:	682f      	ldr	r7, [r5, #0]
 80190a2:	6a21      	ldr	r1, [r4, #32]
 80190a4:	602b      	str	r3, [r5, #0]
 80190a6:	d032      	beq.n	801910e <__sflush_r+0x9a>
 80190a8:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80190aa:	89a3      	ldrh	r3, [r4, #12]
 80190ac:	075a      	lsls	r2, r3, #29
 80190ae:	d505      	bpl.n	80190bc <__sflush_r+0x48>
 80190b0:	6863      	ldr	r3, [r4, #4]
 80190b2:	1ac0      	subs	r0, r0, r3
 80190b4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80190b6:	b10b      	cbz	r3, 80190bc <__sflush_r+0x48>
 80190b8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80190ba:	1ac0      	subs	r0, r0, r3
 80190bc:	2300      	movs	r3, #0
 80190be:	4602      	mov	r2, r0
 80190c0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80190c2:	6a21      	ldr	r1, [r4, #32]
 80190c4:	4628      	mov	r0, r5
 80190c6:	47b0      	blx	r6
 80190c8:	1c43      	adds	r3, r0, #1
 80190ca:	89a3      	ldrh	r3, [r4, #12]
 80190cc:	d106      	bne.n	80190dc <__sflush_r+0x68>
 80190ce:	6829      	ldr	r1, [r5, #0]
 80190d0:	291d      	cmp	r1, #29
 80190d2:	d848      	bhi.n	8019166 <__sflush_r+0xf2>
 80190d4:	4a29      	ldr	r2, [pc, #164]	; (801917c <__sflush_r+0x108>)
 80190d6:	40ca      	lsrs	r2, r1
 80190d8:	07d6      	lsls	r6, r2, #31
 80190da:	d544      	bpl.n	8019166 <__sflush_r+0xf2>
 80190dc:	2200      	movs	r2, #0
 80190de:	6062      	str	r2, [r4, #4]
 80190e0:	04d9      	lsls	r1, r3, #19
 80190e2:	6922      	ldr	r2, [r4, #16]
 80190e4:	6022      	str	r2, [r4, #0]
 80190e6:	d504      	bpl.n	80190f2 <__sflush_r+0x7e>
 80190e8:	1c42      	adds	r2, r0, #1
 80190ea:	d101      	bne.n	80190f0 <__sflush_r+0x7c>
 80190ec:	682b      	ldr	r3, [r5, #0]
 80190ee:	b903      	cbnz	r3, 80190f2 <__sflush_r+0x7e>
 80190f0:	6560      	str	r0, [r4, #84]	; 0x54
 80190f2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80190f4:	602f      	str	r7, [r5, #0]
 80190f6:	2900      	cmp	r1, #0
 80190f8:	d0c9      	beq.n	801908e <__sflush_r+0x1a>
 80190fa:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80190fe:	4299      	cmp	r1, r3
 8019100:	d002      	beq.n	8019108 <__sflush_r+0x94>
 8019102:	4628      	mov	r0, r5
 8019104:	f7ff f9f8 	bl	80184f8 <_free_r>
 8019108:	2000      	movs	r0, #0
 801910a:	6360      	str	r0, [r4, #52]	; 0x34
 801910c:	e7c0      	b.n	8019090 <__sflush_r+0x1c>
 801910e:	2301      	movs	r3, #1
 8019110:	4628      	mov	r0, r5
 8019112:	47b0      	blx	r6
 8019114:	1c41      	adds	r1, r0, #1
 8019116:	d1c8      	bne.n	80190aa <__sflush_r+0x36>
 8019118:	682b      	ldr	r3, [r5, #0]
 801911a:	2b00      	cmp	r3, #0
 801911c:	d0c5      	beq.n	80190aa <__sflush_r+0x36>
 801911e:	2b1d      	cmp	r3, #29
 8019120:	d001      	beq.n	8019126 <__sflush_r+0xb2>
 8019122:	2b16      	cmp	r3, #22
 8019124:	d101      	bne.n	801912a <__sflush_r+0xb6>
 8019126:	602f      	str	r7, [r5, #0]
 8019128:	e7b1      	b.n	801908e <__sflush_r+0x1a>
 801912a:	89a3      	ldrh	r3, [r4, #12]
 801912c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8019130:	81a3      	strh	r3, [r4, #12]
 8019132:	e7ad      	b.n	8019090 <__sflush_r+0x1c>
 8019134:	690f      	ldr	r7, [r1, #16]
 8019136:	2f00      	cmp	r7, #0
 8019138:	d0a9      	beq.n	801908e <__sflush_r+0x1a>
 801913a:	0793      	lsls	r3, r2, #30
 801913c:	680e      	ldr	r6, [r1, #0]
 801913e:	bf08      	it	eq
 8019140:	694b      	ldreq	r3, [r1, #20]
 8019142:	600f      	str	r7, [r1, #0]
 8019144:	bf18      	it	ne
 8019146:	2300      	movne	r3, #0
 8019148:	eba6 0807 	sub.w	r8, r6, r7
 801914c:	608b      	str	r3, [r1, #8]
 801914e:	f1b8 0f00 	cmp.w	r8, #0
 8019152:	dd9c      	ble.n	801908e <__sflush_r+0x1a>
 8019154:	4643      	mov	r3, r8
 8019156:	463a      	mov	r2, r7
 8019158:	6a21      	ldr	r1, [r4, #32]
 801915a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801915c:	4628      	mov	r0, r5
 801915e:	47b0      	blx	r6
 8019160:	2800      	cmp	r0, #0
 8019162:	dc06      	bgt.n	8019172 <__sflush_r+0xfe>
 8019164:	89a3      	ldrh	r3, [r4, #12]
 8019166:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801916a:	81a3      	strh	r3, [r4, #12]
 801916c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8019170:	e78e      	b.n	8019090 <__sflush_r+0x1c>
 8019172:	4407      	add	r7, r0
 8019174:	eba8 0800 	sub.w	r8, r8, r0
 8019178:	e7e9      	b.n	801914e <__sflush_r+0xda>
 801917a:	bf00      	nop
 801917c:	20400001 	.word	0x20400001

08019180 <_fflush_r>:
 8019180:	b538      	push	{r3, r4, r5, lr}
 8019182:	690b      	ldr	r3, [r1, #16]
 8019184:	4605      	mov	r5, r0
 8019186:	460c      	mov	r4, r1
 8019188:	b1db      	cbz	r3, 80191c2 <_fflush_r+0x42>
 801918a:	b118      	cbz	r0, 8019194 <_fflush_r+0x14>
 801918c:	6983      	ldr	r3, [r0, #24]
 801918e:	b90b      	cbnz	r3, 8019194 <_fflush_r+0x14>
 8019190:	f7ff faf6 	bl	8018780 <__sinit>
 8019194:	4b0c      	ldr	r3, [pc, #48]	; (80191c8 <_fflush_r+0x48>)
 8019196:	429c      	cmp	r4, r3
 8019198:	d109      	bne.n	80191ae <_fflush_r+0x2e>
 801919a:	686c      	ldr	r4, [r5, #4]
 801919c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80191a0:	b17b      	cbz	r3, 80191c2 <_fflush_r+0x42>
 80191a2:	4621      	mov	r1, r4
 80191a4:	4628      	mov	r0, r5
 80191a6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80191aa:	f7ff bf63 	b.w	8019074 <__sflush_r>
 80191ae:	4b07      	ldr	r3, [pc, #28]	; (80191cc <_fflush_r+0x4c>)
 80191b0:	429c      	cmp	r4, r3
 80191b2:	d101      	bne.n	80191b8 <_fflush_r+0x38>
 80191b4:	68ac      	ldr	r4, [r5, #8]
 80191b6:	e7f1      	b.n	801919c <_fflush_r+0x1c>
 80191b8:	4b05      	ldr	r3, [pc, #20]	; (80191d0 <_fflush_r+0x50>)
 80191ba:	429c      	cmp	r4, r3
 80191bc:	bf08      	it	eq
 80191be:	68ec      	ldreq	r4, [r5, #12]
 80191c0:	e7ec      	b.n	801919c <_fflush_r+0x1c>
 80191c2:	2000      	movs	r0, #0
 80191c4:	bd38      	pop	{r3, r4, r5, pc}
 80191c6:	bf00      	nop
 80191c8:	0801b904 	.word	0x0801b904
 80191cc:	0801b924 	.word	0x0801b924
 80191d0:	0801b8e4 	.word	0x0801b8e4

080191d4 <_lseek_r>:
 80191d4:	b538      	push	{r3, r4, r5, lr}
 80191d6:	4c07      	ldr	r4, [pc, #28]	; (80191f4 <_lseek_r+0x20>)
 80191d8:	4605      	mov	r5, r0
 80191da:	4608      	mov	r0, r1
 80191dc:	4611      	mov	r1, r2
 80191de:	2200      	movs	r2, #0
 80191e0:	6022      	str	r2, [r4, #0]
 80191e2:	461a      	mov	r2, r3
 80191e4:	f7e8 fa0c 	bl	8001600 <_lseek>
 80191e8:	1c43      	adds	r3, r0, #1
 80191ea:	d102      	bne.n	80191f2 <_lseek_r+0x1e>
 80191ec:	6823      	ldr	r3, [r4, #0]
 80191ee:	b103      	cbz	r3, 80191f2 <_lseek_r+0x1e>
 80191f0:	602b      	str	r3, [r5, #0]
 80191f2:	bd38      	pop	{r3, r4, r5, pc}
 80191f4:	2000ac78 	.word	0x2000ac78

080191f8 <__swhatbuf_r>:
 80191f8:	b570      	push	{r4, r5, r6, lr}
 80191fa:	460e      	mov	r6, r1
 80191fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8019200:	2900      	cmp	r1, #0
 8019202:	b096      	sub	sp, #88	; 0x58
 8019204:	4614      	mov	r4, r2
 8019206:	461d      	mov	r5, r3
 8019208:	da07      	bge.n	801921a <__swhatbuf_r+0x22>
 801920a:	2300      	movs	r3, #0
 801920c:	602b      	str	r3, [r5, #0]
 801920e:	89b3      	ldrh	r3, [r6, #12]
 8019210:	061a      	lsls	r2, r3, #24
 8019212:	d410      	bmi.n	8019236 <__swhatbuf_r+0x3e>
 8019214:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8019218:	e00e      	b.n	8019238 <__swhatbuf_r+0x40>
 801921a:	466a      	mov	r2, sp
 801921c:	f000 f862 	bl	80192e4 <_fstat_r>
 8019220:	2800      	cmp	r0, #0
 8019222:	dbf2      	blt.n	801920a <__swhatbuf_r+0x12>
 8019224:	9a01      	ldr	r2, [sp, #4]
 8019226:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801922a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801922e:	425a      	negs	r2, r3
 8019230:	415a      	adcs	r2, r3
 8019232:	602a      	str	r2, [r5, #0]
 8019234:	e7ee      	b.n	8019214 <__swhatbuf_r+0x1c>
 8019236:	2340      	movs	r3, #64	; 0x40
 8019238:	2000      	movs	r0, #0
 801923a:	6023      	str	r3, [r4, #0]
 801923c:	b016      	add	sp, #88	; 0x58
 801923e:	bd70      	pop	{r4, r5, r6, pc}

08019240 <__smakebuf_r>:
 8019240:	898b      	ldrh	r3, [r1, #12]
 8019242:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8019244:	079d      	lsls	r5, r3, #30
 8019246:	4606      	mov	r6, r0
 8019248:	460c      	mov	r4, r1
 801924a:	d507      	bpl.n	801925c <__smakebuf_r+0x1c>
 801924c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8019250:	6023      	str	r3, [r4, #0]
 8019252:	6123      	str	r3, [r4, #16]
 8019254:	2301      	movs	r3, #1
 8019256:	6163      	str	r3, [r4, #20]
 8019258:	b002      	add	sp, #8
 801925a:	bd70      	pop	{r4, r5, r6, pc}
 801925c:	ab01      	add	r3, sp, #4
 801925e:	466a      	mov	r2, sp
 8019260:	f7ff ffca 	bl	80191f8 <__swhatbuf_r>
 8019264:	9900      	ldr	r1, [sp, #0]
 8019266:	4605      	mov	r5, r0
 8019268:	4630      	mov	r0, r6
 801926a:	f7ff f993 	bl	8018594 <_malloc_r>
 801926e:	b948      	cbnz	r0, 8019284 <__smakebuf_r+0x44>
 8019270:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8019274:	059a      	lsls	r2, r3, #22
 8019276:	d4ef      	bmi.n	8019258 <__smakebuf_r+0x18>
 8019278:	f023 0303 	bic.w	r3, r3, #3
 801927c:	f043 0302 	orr.w	r3, r3, #2
 8019280:	81a3      	strh	r3, [r4, #12]
 8019282:	e7e3      	b.n	801924c <__smakebuf_r+0xc>
 8019284:	4b0d      	ldr	r3, [pc, #52]	; (80192bc <__smakebuf_r+0x7c>)
 8019286:	62b3      	str	r3, [r6, #40]	; 0x28
 8019288:	89a3      	ldrh	r3, [r4, #12]
 801928a:	6020      	str	r0, [r4, #0]
 801928c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8019290:	81a3      	strh	r3, [r4, #12]
 8019292:	9b00      	ldr	r3, [sp, #0]
 8019294:	6163      	str	r3, [r4, #20]
 8019296:	9b01      	ldr	r3, [sp, #4]
 8019298:	6120      	str	r0, [r4, #16]
 801929a:	b15b      	cbz	r3, 80192b4 <__smakebuf_r+0x74>
 801929c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80192a0:	4630      	mov	r0, r6
 80192a2:	f000 f831 	bl	8019308 <_isatty_r>
 80192a6:	b128      	cbz	r0, 80192b4 <__smakebuf_r+0x74>
 80192a8:	89a3      	ldrh	r3, [r4, #12]
 80192aa:	f023 0303 	bic.w	r3, r3, #3
 80192ae:	f043 0301 	orr.w	r3, r3, #1
 80192b2:	81a3      	strh	r3, [r4, #12]
 80192b4:	89a3      	ldrh	r3, [r4, #12]
 80192b6:	431d      	orrs	r5, r3
 80192b8:	81a5      	strh	r5, [r4, #12]
 80192ba:	e7cd      	b.n	8019258 <__smakebuf_r+0x18>
 80192bc:	08018749 	.word	0x08018749

080192c0 <_read_r>:
 80192c0:	b538      	push	{r3, r4, r5, lr}
 80192c2:	4c07      	ldr	r4, [pc, #28]	; (80192e0 <_read_r+0x20>)
 80192c4:	4605      	mov	r5, r0
 80192c6:	4608      	mov	r0, r1
 80192c8:	4611      	mov	r1, r2
 80192ca:	2200      	movs	r2, #0
 80192cc:	6022      	str	r2, [r4, #0]
 80192ce:	461a      	mov	r2, r3
 80192d0:	f7e8 f936 	bl	8001540 <_read>
 80192d4:	1c43      	adds	r3, r0, #1
 80192d6:	d102      	bne.n	80192de <_read_r+0x1e>
 80192d8:	6823      	ldr	r3, [r4, #0]
 80192da:	b103      	cbz	r3, 80192de <_read_r+0x1e>
 80192dc:	602b      	str	r3, [r5, #0]
 80192de:	bd38      	pop	{r3, r4, r5, pc}
 80192e0:	2000ac78 	.word	0x2000ac78

080192e4 <_fstat_r>:
 80192e4:	b538      	push	{r3, r4, r5, lr}
 80192e6:	4c07      	ldr	r4, [pc, #28]	; (8019304 <_fstat_r+0x20>)
 80192e8:	2300      	movs	r3, #0
 80192ea:	4605      	mov	r5, r0
 80192ec:	4608      	mov	r0, r1
 80192ee:	4611      	mov	r1, r2
 80192f0:	6023      	str	r3, [r4, #0]
 80192f2:	f7e8 f96a 	bl	80015ca <_fstat>
 80192f6:	1c43      	adds	r3, r0, #1
 80192f8:	d102      	bne.n	8019300 <_fstat_r+0x1c>
 80192fa:	6823      	ldr	r3, [r4, #0]
 80192fc:	b103      	cbz	r3, 8019300 <_fstat_r+0x1c>
 80192fe:	602b      	str	r3, [r5, #0]
 8019300:	bd38      	pop	{r3, r4, r5, pc}
 8019302:	bf00      	nop
 8019304:	2000ac78 	.word	0x2000ac78

08019308 <_isatty_r>:
 8019308:	b538      	push	{r3, r4, r5, lr}
 801930a:	4c06      	ldr	r4, [pc, #24]	; (8019324 <_isatty_r+0x1c>)
 801930c:	2300      	movs	r3, #0
 801930e:	4605      	mov	r5, r0
 8019310:	4608      	mov	r0, r1
 8019312:	6023      	str	r3, [r4, #0]
 8019314:	f7e8 f969 	bl	80015ea <_isatty>
 8019318:	1c43      	adds	r3, r0, #1
 801931a:	d102      	bne.n	8019322 <_isatty_r+0x1a>
 801931c:	6823      	ldr	r3, [r4, #0]
 801931e:	b103      	cbz	r3, 8019322 <_isatty_r+0x1a>
 8019320:	602b      	str	r3, [r5, #0]
 8019322:	bd38      	pop	{r3, r4, r5, pc}
 8019324:	2000ac78 	.word	0x2000ac78

08019328 <_init>:
 8019328:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801932a:	bf00      	nop
 801932c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801932e:	bc08      	pop	{r3}
 8019330:	469e      	mov	lr, r3
 8019332:	4770      	bx	lr

08019334 <_fini>:
 8019334:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019336:	bf00      	nop
 8019338:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801933a:	bc08      	pop	{r3}
 801933c:	469e      	mov	lr, r3
 801933e:	4770      	bx	lr
