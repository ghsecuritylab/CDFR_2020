
CDFR_2020.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001bc44  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002ac0  0801bdf4  0801bdf4  0002bdf4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801e8b4  0801e8b4  000301ec  2**0
                  CONTENTS
  4 .ARM          00000008  0801e8b4  0801e8b4  0002e8b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801e8bc  0801e8bc  000301ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801e8bc  0801e8bc  0002e8bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801e8c0  0801e8c0  0002e8c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001ec  20000000  0801e8c4  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000c21c  200001ec  0801eab0  000301ec  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  2000c408  0801eab0  0003c408  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000301ec  2**0
                  CONTENTS, READONLY
 12 .debug_info   00054dce  00000000  00000000  0003021c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000a7eb  00000000  00000000  00084fea  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00002d00  00000000  00000000  0008f7d8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00002988  00000000  00000000  000924d8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0003ef75  00000000  00000000  00094e60  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0003e02f  00000000  00000000  000d3dd5  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0010fe6b  00000000  00000000  00111e04  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00221c6f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000bd8c  00000000  00000000  00221cec  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	200001ec 	.word	0x200001ec
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0801bddc 	.word	0x0801bddc

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	200001f0 	.word	0x200001f0
 80001ec:	0801bddc 	.word	0x0801bddc

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002a4:	f000 b972 	b.w	800058c <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9e08      	ldr	r6, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	4688      	mov	r8, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d14b      	bne.n	8000366 <__udivmoddi4+0xa6>
 80002ce:	428a      	cmp	r2, r1
 80002d0:	4615      	mov	r5, r2
 80002d2:	d967      	bls.n	80003a4 <__udivmoddi4+0xe4>
 80002d4:	fab2 f282 	clz	r2, r2
 80002d8:	b14a      	cbz	r2, 80002ee <__udivmoddi4+0x2e>
 80002da:	f1c2 0720 	rsb	r7, r2, #32
 80002de:	fa01 f302 	lsl.w	r3, r1, r2
 80002e2:	fa20 f707 	lsr.w	r7, r0, r7
 80002e6:	4095      	lsls	r5, r2
 80002e8:	ea47 0803 	orr.w	r8, r7, r3
 80002ec:	4094      	lsls	r4, r2
 80002ee:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002f2:	0c23      	lsrs	r3, r4, #16
 80002f4:	fbb8 f7fe 	udiv	r7, r8, lr
 80002f8:	fa1f fc85 	uxth.w	ip, r5
 80002fc:	fb0e 8817 	mls	r8, lr, r7, r8
 8000300:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000304:	fb07 f10c 	mul.w	r1, r7, ip
 8000308:	4299      	cmp	r1, r3
 800030a:	d909      	bls.n	8000320 <__udivmoddi4+0x60>
 800030c:	18eb      	adds	r3, r5, r3
 800030e:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 8000312:	f080 811b 	bcs.w	800054c <__udivmoddi4+0x28c>
 8000316:	4299      	cmp	r1, r3
 8000318:	f240 8118 	bls.w	800054c <__udivmoddi4+0x28c>
 800031c:	3f02      	subs	r7, #2
 800031e:	442b      	add	r3, r5
 8000320:	1a5b      	subs	r3, r3, r1
 8000322:	b2a4      	uxth	r4, r4
 8000324:	fbb3 f0fe 	udiv	r0, r3, lr
 8000328:	fb0e 3310 	mls	r3, lr, r0, r3
 800032c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000330:	fb00 fc0c 	mul.w	ip, r0, ip
 8000334:	45a4      	cmp	ip, r4
 8000336:	d909      	bls.n	800034c <__udivmoddi4+0x8c>
 8000338:	192c      	adds	r4, r5, r4
 800033a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800033e:	f080 8107 	bcs.w	8000550 <__udivmoddi4+0x290>
 8000342:	45a4      	cmp	ip, r4
 8000344:	f240 8104 	bls.w	8000550 <__udivmoddi4+0x290>
 8000348:	3802      	subs	r0, #2
 800034a:	442c      	add	r4, r5
 800034c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000350:	eba4 040c 	sub.w	r4, r4, ip
 8000354:	2700      	movs	r7, #0
 8000356:	b11e      	cbz	r6, 8000360 <__udivmoddi4+0xa0>
 8000358:	40d4      	lsrs	r4, r2
 800035a:	2300      	movs	r3, #0
 800035c:	e9c6 4300 	strd	r4, r3, [r6]
 8000360:	4639      	mov	r1, r7
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	428b      	cmp	r3, r1
 8000368:	d909      	bls.n	800037e <__udivmoddi4+0xbe>
 800036a:	2e00      	cmp	r6, #0
 800036c:	f000 80eb 	beq.w	8000546 <__udivmoddi4+0x286>
 8000370:	2700      	movs	r7, #0
 8000372:	e9c6 0100 	strd	r0, r1, [r6]
 8000376:	4638      	mov	r0, r7
 8000378:	4639      	mov	r1, r7
 800037a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037e:	fab3 f783 	clz	r7, r3
 8000382:	2f00      	cmp	r7, #0
 8000384:	d147      	bne.n	8000416 <__udivmoddi4+0x156>
 8000386:	428b      	cmp	r3, r1
 8000388:	d302      	bcc.n	8000390 <__udivmoddi4+0xd0>
 800038a:	4282      	cmp	r2, r0
 800038c:	f200 80fa 	bhi.w	8000584 <__udivmoddi4+0x2c4>
 8000390:	1a84      	subs	r4, r0, r2
 8000392:	eb61 0303 	sbc.w	r3, r1, r3
 8000396:	2001      	movs	r0, #1
 8000398:	4698      	mov	r8, r3
 800039a:	2e00      	cmp	r6, #0
 800039c:	d0e0      	beq.n	8000360 <__udivmoddi4+0xa0>
 800039e:	e9c6 4800 	strd	r4, r8, [r6]
 80003a2:	e7dd      	b.n	8000360 <__udivmoddi4+0xa0>
 80003a4:	b902      	cbnz	r2, 80003a8 <__udivmoddi4+0xe8>
 80003a6:	deff      	udf	#255	; 0xff
 80003a8:	fab2 f282 	clz	r2, r2
 80003ac:	2a00      	cmp	r2, #0
 80003ae:	f040 808f 	bne.w	80004d0 <__udivmoddi4+0x210>
 80003b2:	1b49      	subs	r1, r1, r5
 80003b4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003b8:	fa1f f885 	uxth.w	r8, r5
 80003bc:	2701      	movs	r7, #1
 80003be:	fbb1 fcfe 	udiv	ip, r1, lr
 80003c2:	0c23      	lsrs	r3, r4, #16
 80003c4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003c8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003cc:	fb08 f10c 	mul.w	r1, r8, ip
 80003d0:	4299      	cmp	r1, r3
 80003d2:	d907      	bls.n	80003e4 <__udivmoddi4+0x124>
 80003d4:	18eb      	adds	r3, r5, r3
 80003d6:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 80003da:	d202      	bcs.n	80003e2 <__udivmoddi4+0x122>
 80003dc:	4299      	cmp	r1, r3
 80003de:	f200 80cd 	bhi.w	800057c <__udivmoddi4+0x2bc>
 80003e2:	4684      	mov	ip, r0
 80003e4:	1a59      	subs	r1, r3, r1
 80003e6:	b2a3      	uxth	r3, r4
 80003e8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003ec:	fb0e 1410 	mls	r4, lr, r0, r1
 80003f0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003f4:	fb08 f800 	mul.w	r8, r8, r0
 80003f8:	45a0      	cmp	r8, r4
 80003fa:	d907      	bls.n	800040c <__udivmoddi4+0x14c>
 80003fc:	192c      	adds	r4, r5, r4
 80003fe:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x14a>
 8000404:	45a0      	cmp	r8, r4
 8000406:	f200 80b6 	bhi.w	8000576 <__udivmoddi4+0x2b6>
 800040a:	4618      	mov	r0, r3
 800040c:	eba4 0408 	sub.w	r4, r4, r8
 8000410:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000414:	e79f      	b.n	8000356 <__udivmoddi4+0x96>
 8000416:	f1c7 0c20 	rsb	ip, r7, #32
 800041a:	40bb      	lsls	r3, r7
 800041c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000420:	ea4e 0e03 	orr.w	lr, lr, r3
 8000424:	fa01 f407 	lsl.w	r4, r1, r7
 8000428:	fa20 f50c 	lsr.w	r5, r0, ip
 800042c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000430:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000434:	4325      	orrs	r5, r4
 8000436:	fbb3 f9f8 	udiv	r9, r3, r8
 800043a:	0c2c      	lsrs	r4, r5, #16
 800043c:	fb08 3319 	mls	r3, r8, r9, r3
 8000440:	fa1f fa8e 	uxth.w	sl, lr
 8000444:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000448:	fb09 f40a 	mul.w	r4, r9, sl
 800044c:	429c      	cmp	r4, r3
 800044e:	fa02 f207 	lsl.w	r2, r2, r7
 8000452:	fa00 f107 	lsl.w	r1, r0, r7
 8000456:	d90b      	bls.n	8000470 <__udivmoddi4+0x1b0>
 8000458:	eb1e 0303 	adds.w	r3, lr, r3
 800045c:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000460:	f080 8087 	bcs.w	8000572 <__udivmoddi4+0x2b2>
 8000464:	429c      	cmp	r4, r3
 8000466:	f240 8084 	bls.w	8000572 <__udivmoddi4+0x2b2>
 800046a:	f1a9 0902 	sub.w	r9, r9, #2
 800046e:	4473      	add	r3, lr
 8000470:	1b1b      	subs	r3, r3, r4
 8000472:	b2ad      	uxth	r5, r5
 8000474:	fbb3 f0f8 	udiv	r0, r3, r8
 8000478:	fb08 3310 	mls	r3, r8, r0, r3
 800047c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000480:	fb00 fa0a 	mul.w	sl, r0, sl
 8000484:	45a2      	cmp	sl, r4
 8000486:	d908      	bls.n	800049a <__udivmoddi4+0x1da>
 8000488:	eb1e 0404 	adds.w	r4, lr, r4
 800048c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000490:	d26b      	bcs.n	800056a <__udivmoddi4+0x2aa>
 8000492:	45a2      	cmp	sl, r4
 8000494:	d969      	bls.n	800056a <__udivmoddi4+0x2aa>
 8000496:	3802      	subs	r0, #2
 8000498:	4474      	add	r4, lr
 800049a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800049e:	fba0 8902 	umull	r8, r9, r0, r2
 80004a2:	eba4 040a 	sub.w	r4, r4, sl
 80004a6:	454c      	cmp	r4, r9
 80004a8:	46c2      	mov	sl, r8
 80004aa:	464b      	mov	r3, r9
 80004ac:	d354      	bcc.n	8000558 <__udivmoddi4+0x298>
 80004ae:	d051      	beq.n	8000554 <__udivmoddi4+0x294>
 80004b0:	2e00      	cmp	r6, #0
 80004b2:	d069      	beq.n	8000588 <__udivmoddi4+0x2c8>
 80004b4:	ebb1 050a 	subs.w	r5, r1, sl
 80004b8:	eb64 0403 	sbc.w	r4, r4, r3
 80004bc:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004c0:	40fd      	lsrs	r5, r7
 80004c2:	40fc      	lsrs	r4, r7
 80004c4:	ea4c 0505 	orr.w	r5, ip, r5
 80004c8:	e9c6 5400 	strd	r5, r4, [r6]
 80004cc:	2700      	movs	r7, #0
 80004ce:	e747      	b.n	8000360 <__udivmoddi4+0xa0>
 80004d0:	f1c2 0320 	rsb	r3, r2, #32
 80004d4:	fa20 f703 	lsr.w	r7, r0, r3
 80004d8:	4095      	lsls	r5, r2
 80004da:	fa01 f002 	lsl.w	r0, r1, r2
 80004de:	fa21 f303 	lsr.w	r3, r1, r3
 80004e2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004e6:	4338      	orrs	r0, r7
 80004e8:	0c01      	lsrs	r1, r0, #16
 80004ea:	fbb3 f7fe 	udiv	r7, r3, lr
 80004ee:	fa1f f885 	uxth.w	r8, r5
 80004f2:	fb0e 3317 	mls	r3, lr, r7, r3
 80004f6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004fa:	fb07 f308 	mul.w	r3, r7, r8
 80004fe:	428b      	cmp	r3, r1
 8000500:	fa04 f402 	lsl.w	r4, r4, r2
 8000504:	d907      	bls.n	8000516 <__udivmoddi4+0x256>
 8000506:	1869      	adds	r1, r5, r1
 8000508:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 800050c:	d22f      	bcs.n	800056e <__udivmoddi4+0x2ae>
 800050e:	428b      	cmp	r3, r1
 8000510:	d92d      	bls.n	800056e <__udivmoddi4+0x2ae>
 8000512:	3f02      	subs	r7, #2
 8000514:	4429      	add	r1, r5
 8000516:	1acb      	subs	r3, r1, r3
 8000518:	b281      	uxth	r1, r0
 800051a:	fbb3 f0fe 	udiv	r0, r3, lr
 800051e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000522:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000526:	fb00 f308 	mul.w	r3, r0, r8
 800052a:	428b      	cmp	r3, r1
 800052c:	d907      	bls.n	800053e <__udivmoddi4+0x27e>
 800052e:	1869      	adds	r1, r5, r1
 8000530:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000534:	d217      	bcs.n	8000566 <__udivmoddi4+0x2a6>
 8000536:	428b      	cmp	r3, r1
 8000538:	d915      	bls.n	8000566 <__udivmoddi4+0x2a6>
 800053a:	3802      	subs	r0, #2
 800053c:	4429      	add	r1, r5
 800053e:	1ac9      	subs	r1, r1, r3
 8000540:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000544:	e73b      	b.n	80003be <__udivmoddi4+0xfe>
 8000546:	4637      	mov	r7, r6
 8000548:	4630      	mov	r0, r6
 800054a:	e709      	b.n	8000360 <__udivmoddi4+0xa0>
 800054c:	4607      	mov	r7, r0
 800054e:	e6e7      	b.n	8000320 <__udivmoddi4+0x60>
 8000550:	4618      	mov	r0, r3
 8000552:	e6fb      	b.n	800034c <__udivmoddi4+0x8c>
 8000554:	4541      	cmp	r1, r8
 8000556:	d2ab      	bcs.n	80004b0 <__udivmoddi4+0x1f0>
 8000558:	ebb8 0a02 	subs.w	sl, r8, r2
 800055c:	eb69 020e 	sbc.w	r2, r9, lr
 8000560:	3801      	subs	r0, #1
 8000562:	4613      	mov	r3, r2
 8000564:	e7a4      	b.n	80004b0 <__udivmoddi4+0x1f0>
 8000566:	4660      	mov	r0, ip
 8000568:	e7e9      	b.n	800053e <__udivmoddi4+0x27e>
 800056a:	4618      	mov	r0, r3
 800056c:	e795      	b.n	800049a <__udivmoddi4+0x1da>
 800056e:	4667      	mov	r7, ip
 8000570:	e7d1      	b.n	8000516 <__udivmoddi4+0x256>
 8000572:	4681      	mov	r9, r0
 8000574:	e77c      	b.n	8000470 <__udivmoddi4+0x1b0>
 8000576:	3802      	subs	r0, #2
 8000578:	442c      	add	r4, r5
 800057a:	e747      	b.n	800040c <__udivmoddi4+0x14c>
 800057c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000580:	442b      	add	r3, r5
 8000582:	e72f      	b.n	80003e4 <__udivmoddi4+0x124>
 8000584:	4638      	mov	r0, r7
 8000586:	e708      	b.n	800039a <__udivmoddi4+0xda>
 8000588:	4637      	mov	r7, r6
 800058a:	e6e9      	b.n	8000360 <__udivmoddi4+0xa0>

0800058c <__aeabi_idiv0>:
 800058c:	4770      	bx	lr
 800058e:	bf00      	nop

08000590 <tcpecho_thread>:



/*-----------------------------------------------------------------------------------*/
static void tcpecho_thread(void *arg)
{
 8000590:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000592:	b0b9      	sub	sp, #228	; 0xe4
 8000594:	af0c      	add	r7, sp, #48	; 0x30
 8000596:	6078      	str	r0, [r7, #4]
  err_t err, accept_err;
  struct netbuf *buf;
  void *data;
  u16_t len;
  err_t recv_err;
  uint32_t array[NB_OCTETS_CMD_MAX] = {0};
 8000598:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800059c:	2238      	movs	r2, #56	; 0x38
 800059e:	2100      	movs	r1, #0
 80005a0:	4618      	mov	r0, r3
 80005a2:	f01a fb75 	bl	801ac90 <memset>
  struct tcp_command s_cmd_received;

  LWIP_UNUSED_ARG(arg);

  /* Create a new connection identifier. */
  conn = netconn_new(NETCONN_TCP);
 80005a6:	2200      	movs	r2, #0
 80005a8:	2100      	movs	r1, #0
 80005aa:	2010      	movs	r0, #16
 80005ac:	f00d fe5c 	bl	800e268 <netconn_new_with_proto_and_callback>
 80005b0:	f8c7 00a8 	str.w	r0, [r7, #168]	; 0xa8

  if (conn!=NULL)
 80005b4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80005b8:	2b00      	cmp	r3, #0
 80005ba:	f000 809b 	beq.w	80006f4 <tcpecho_thread+0x164>
  {
    /* Bind connection to well known port number 7. */
    err = netconn_bind(conn, NULL, 7);
 80005be:	2207      	movs	r2, #7
 80005c0:	2100      	movs	r1, #0
 80005c2:	f8d7 00a8 	ldr.w	r0, [r7, #168]	; 0xa8
 80005c6:	f00d feef 	bl	800e3a8 <netconn_bind>
 80005ca:	4603      	mov	r3, r0
 80005cc:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7

    if (err == ERR_OK)
 80005d0:	f997 30a7 	ldrsb.w	r3, [r7, #167]	; 0xa7
 80005d4:	2b00      	cmp	r3, #0
 80005d6:	f040 8084 	bne.w	80006e2 <tcpecho_thread+0x152>
    {
      /* Tell connection to go into listening mode. */
      netconn_listen(conn);
 80005da:	21ff      	movs	r1, #255	; 0xff
 80005dc:	f8d7 00a8 	ldr.w	r0, [r7, #168]	; 0xa8
 80005e0:	f00d ff1a 	bl	800e418 <netconn_listen_with_backlog>

      while (1)
      {
        /* Grab new connection. */
         accept_err = netconn_accept(conn, &newconn);
 80005e4:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80005e8:	4619      	mov	r1, r3
 80005ea:	f8d7 00a8 	ldr.w	r0, [r7, #168]	; 0xa8
 80005ee:	f00d ff3f 	bl	800e470 <netconn_accept>
 80005f2:	4603      	mov	r3, r0
 80005f4:	f887 30a6 	strb.w	r3, [r7, #166]	; 0xa6

        /* Process the new connection. */
        if (accept_err == ERR_OK)
 80005f8:	f997 30a6 	ldrsb.w	r3, [r7, #166]	; 0xa6
 80005fc:	2b00      	cmp	r3, #0
 80005fe:	d1f1      	bne.n	80005e4 <tcpecho_thread+0x54>
        {
          recv_err = netconn_recv(newconn, &buf);
 8000600:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8000604:	f107 029c 	add.w	r2, r7, #156	; 0x9c
 8000608:	4611      	mov	r1, r2
 800060a:	4618      	mov	r0, r3
 800060c:	f00e f87e 	bl	800e70c <netconn_recv>
 8000610:	4603      	mov	r3, r0
 8000612:	f887 30af 	strb.w	r3, [r7, #175]	; 0xaf
					while ( recv_err == ERR_OK)
 8000616:	e055      	b.n	80006c4 <tcpecho_thread+0x134>
          {
            do
            {
              netbuf_data(buf, &data, &len);
 8000618:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800061c:	f107 0296 	add.w	r2, r7, #150	; 0x96
 8000620:	f107 0198 	add.w	r1, r7, #152	; 0x98
 8000624:	4618      	mov	r0, r3
 8000626:	f00f fded 	bl	8010204 <netbuf_data>
              F_TCP_paquetTocmd(data,len, &s_cmd_received);
 800062a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800062e:	f8b7 1096 	ldrh.w	r1, [r7, #150]	; 0x96
 8000632:	f107 0208 	add.w	r2, r7, #8
 8000636:	4618      	mov	r0, r3
 8000638:	f000 f950 	bl	80008dc <F_TCP_paquetTocmd>

              F_Process_Command(s_cmd_received,&s_cmd_answer);
 800063c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000640:	9303      	str	r3, [sp, #12]
 8000642:	466c      	mov	r4, sp
 8000644:	f107 0318 	add.w	r3, r7, #24
 8000648:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800064c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8000650:	f107 0308 	add.w	r3, r7, #8
 8000654:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000656:	f000 f86d 	bl	8000734 <F_Process_Command>

        	  F_TCP_answerTotab(array, s_cmd_answer);
 800065a:	f107 065c 	add.w	r6, r7, #92	; 0x5c
 800065e:	466d      	mov	r5, sp
 8000660:	f107 0430 	add.w	r4, r7, #48	; 0x30
 8000664:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000666:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000668:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800066a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800066c:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8000670:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8000674:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000678:	cb0e      	ldmia	r3, {r1, r2, r3}
 800067a:	4630      	mov	r0, r6
 800067c:	f000 f991 	bl	80009a2 <F_TCP_answerTotab>

              netconn_write(newconn, array, sizeof(array), NETCONN_COPY);
 8000680:	f8d7 00a0 	ldr.w	r0, [r7, #160]	; 0xa0
 8000684:	f107 015c 	add.w	r1, r7, #92	; 0x5c
 8000688:	2300      	movs	r3, #0
 800068a:	9300      	str	r3, [sp, #0]
 800068c:	2301      	movs	r3, #1
 800068e:	2238      	movs	r2, #56	; 0x38
 8000690:	f00e f8b4 	bl	800e7fc <netconn_write_partly>

            }
            while (netbuf_next(buf) >= 0);
 8000694:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8000698:	4618      	mov	r0, r3
 800069a:	f00f fdfd 	bl	8010298 <netbuf_next>
 800069e:	4603      	mov	r3, r0
 80006a0:	2b00      	cmp	r3, #0
 80006a2:	dab9      	bge.n	8000618 <tcpecho_thread+0x88>

            netbuf_delete(buf);
 80006a4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80006a8:	4618      	mov	r0, r3
 80006aa:	f00f fd8b 	bl	80101c4 <netbuf_delete>
						recv_err = netconn_recv(newconn, &buf);
 80006ae:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80006b2:	f107 029c 	add.w	r2, r7, #156	; 0x9c
 80006b6:	4611      	mov	r1, r2
 80006b8:	4618      	mov	r0, r3
 80006ba:	f00e f827 	bl	800e70c <netconn_recv>
 80006be:	4603      	mov	r3, r0
 80006c0:	f887 30af 	strb.w	r3, [r7, #175]	; 0xaf
					while ( recv_err == ERR_OK)
 80006c4:	f997 30af 	ldrsb.w	r3, [r7, #175]	; 0xaf
 80006c8:	2b00      	cmp	r3, #0
 80006ca:	d0a5      	beq.n	8000618 <tcpecho_thread+0x88>
          }

          /* Close connection and discard connection identifier. */
          netconn_close(newconn);
 80006cc:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80006d0:	4618      	mov	r0, r3
 80006d2:	f00e f93b 	bl	800e94c <netconn_close>
          netconn_delete(newconn);
 80006d6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80006da:	4618      	mov	r0, r3
 80006dc:	f00d fe3e 	bl	800e35c <netconn_delete>
         accept_err = netconn_accept(conn, &newconn);
 80006e0:	e780      	b.n	80005e4 <tcpecho_thread+0x54>
        }
      }
    }
    else
    {
      netconn_delete(newconn);
 80006e2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80006e6:	4618      	mov	r0, r3
 80006e8:	f00d fe38 	bl	800e35c <netconn_delete>
      printf(" can not bind TCP netconn");
 80006ec:	4805      	ldr	r0, [pc, #20]	; (8000704 <tcpecho_thread+0x174>)
 80006ee:	f01a fb7f 	bl	801adf0 <iprintf>
  }
  else
  {
    printf("can not create TCP netconn");
  }
}
 80006f2:	e002      	b.n	80006fa <tcpecho_thread+0x16a>
    printf("can not create TCP netconn");
 80006f4:	4804      	ldr	r0, [pc, #16]	; (8000708 <tcpecho_thread+0x178>)
 80006f6:	f01a fb7b 	bl	801adf0 <iprintf>
}
 80006fa:	bf00      	nop
 80006fc:	37b4      	adds	r7, #180	; 0xb4
 80006fe:	46bd      	mov	sp, r7
 8000700:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000702:	bf00      	nop
 8000704:	0801bdf4 	.word	0x0801bdf4
 8000708:	0801be10 	.word	0x0801be10

0800070c <tcpecho_init>:
/*-----------------------------------------------------------------------------------*/

void tcpecho_init(void)
{
 800070c:	b580      	push	{r7, lr}
 800070e:	b082      	sub	sp, #8
 8000710:	af02      	add	r7, sp, #8
  sys_thread_new("tcpecho_thread", tcpecho_thread, NULL, DEFAULT_THREAD_STACKSIZE, TCPECHO_THREAD_PRIO);
 8000712:	2305      	movs	r3, #5
 8000714:	9300      	str	r3, [sp, #0]
 8000716:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800071a:	2200      	movs	r2, #0
 800071c:	4903      	ldr	r1, [pc, #12]	; (800072c <tcpecho_init+0x20>)
 800071e:	4804      	ldr	r0, [pc, #16]	; (8000730 <tcpecho_init+0x24>)
 8000720:	f019 fd4a 	bl	801a1b8 <sys_thread_new>
}
 8000724:	bf00      	nop
 8000726:	46bd      	mov	sp, r7
 8000728:	bd80      	pop	{r7, pc}
 800072a:	bf00      	nop
 800072c:	08000591 	.word	0x08000591
 8000730:	0801be2c 	.word	0x0801be2c

08000734 <F_Process_Command>:

/**
 *
 */
void F_Process_Command(struct tcp_command s_cmd_received, struct tcp_answer *s_cmd_answer)
{
 8000734:	b084      	sub	sp, #16
 8000736:	b590      	push	{r4, r7, lr}
 8000738:	b087      	sub	sp, #28
 800073a:	af04      	add	r7, sp, #16
 800073c:	f107 0418 	add.w	r4, r7, #24
 8000740:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	uint8_t status = STATUS_OK;
 8000744:	2300      	movs	r3, #0
 8000746:	71fb      	strb	r3, [r7, #7]

	s_cmd_answer->id = s_cmd_received.id; 	// same ID as the received command
 8000748:	69ba      	ldr	r2, [r7, #24]
 800074a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800074c:	601a      	str	r2, [r3, #0]
	s_cmd_answer->cmd = s_cmd_received.cmd;	// recall the command executed
 800074e:	69fa      	ldr	r2, [r7, #28]
 8000750:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000752:	605a      	str	r2, [r3, #4]

	// Process the command depending on the command number
	switch(s_cmd_received.cmd)
 8000754:	69fb      	ldr	r3, [r7, #28]
 8000756:	3b01      	subs	r3, #1
 8000758:	2b0b      	cmp	r3, #11
 800075a:	d839      	bhi.n	80007d0 <F_Process_Command+0x9c>
 800075c:	a201      	add	r2, pc, #4	; (adr r2, 8000764 <F_Process_Command+0x30>)
 800075e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000762:	bf00      	nop
 8000764:	08000795 	.word	0x08000795
 8000768:	080007b3 	.word	0x080007b3
 800076c:	080007d1 	.word	0x080007d1
 8000770:	080007d1 	.word	0x080007d1
 8000774:	080007d1 	.word	0x080007d1
 8000778:	080007d1 	.word	0x080007d1
 800077c:	080007d1 	.word	0x080007d1
 8000780:	080007d1 	.word	0x080007d1
 8000784:	080007d1 	.word	0x080007d1
 8000788:	080007d1 	.word	0x080007d1
 800078c:	080007d1 	.word	0x080007d1
 8000790:	080007d1 	.word	0x080007d1
	{
		// Get info
		case CMD_INFO:
			F_Cmd_Info(s_cmd_received, s_cmd_answer);
 8000794:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000796:	9303      	str	r3, [sp, #12]
 8000798:	466c      	mov	r4, sp
 800079a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800079e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80007a2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80007a6:	f107 0318 	add.w	r3, r7, #24
 80007aa:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80007ac:	f000 f818 	bl	80007e0 <F_Cmd_Info>
			break;
 80007b0:	e00f      	b.n	80007d2 <F_Process_Command+0x9e>

		// Set LED
		case CMD_SET_LED:
			F_Cmd_Set_LED(s_cmd_received, s_cmd_answer);
 80007b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80007b4:	9303      	str	r3, [sp, #12]
 80007b6:	466c      	mov	r4, sp
 80007b8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80007bc:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80007c0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80007c4:	f107 0318 	add.w	r3, r7, #24
 80007c8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80007ca:	f000 f83e 	bl	800084a <F_Cmd_Set_LED>
			break;
 80007ce:	e000      	b.n	80007d2 <F_Process_Command+0x9e>
			break;


		// Error, unknown command
		default:
			break;
 80007d0:	bf00      	nop

	}


}
 80007d2:	bf00      	nop
 80007d4:	370c      	adds	r7, #12
 80007d6:	46bd      	mov	sp, r7
 80007d8:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 80007dc:	b004      	add	sp, #16
 80007de:	4770      	bx	lr

080007e0 <F_Cmd_Info>:
       - bit 0 : Distance 1 & Distance 2 & Distance 3 ==> = 1 if distance < 30cm otherwise 0


 */
uint8_t F_Cmd_Info(Tcp_command s_cmd_received, Tcp_answer *s_cmd_answer)
{
 80007e0:	b084      	sub	sp, #16
 80007e2:	b480      	push	{r7}
 80007e4:	b083      	sub	sp, #12
 80007e6:	af00      	add	r7, sp, #0
 80007e8:	f107 0c10 	add.w	ip, r7, #16
 80007ec:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	uint8_t status = STATUS_OK;
 80007f0:	2300      	movs	r3, #0
 80007f2:	71fb      	strb	r3, [r7, #7]
	uint8_t distance_warning = 0;
 80007f4:	2300      	movs	r3, #0
 80007f6:	71bb      	strb	r3, [r7, #6]


	s_cmd_answer->code_retour = status;
 80007f8:	79fa      	ldrb	r2, [r7, #7]
 80007fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80007fc:	609a      	str	r2, [r3, #8]
	s_cmd_answer->nb_reponse = 9;
 80007fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000800:	2209      	movs	r2, #9
 8000802:	60da      	str	r2, [r3, #12]
	s_cmd_answer->reponse[0] = (int32_t)0;	// Position X
 8000804:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000806:	2200      	movs	r2, #0
 8000808:	611a      	str	r2, [r3, #16]
	s_cmd_answer->reponse[1] = (int32_t)0;	// Position Y
 800080a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800080c:	2200      	movs	r2, #0
 800080e:	615a      	str	r2, [r3, #20]
	s_cmd_answer->reponse[2] = (int32_t)0;  // Position Theta
 8000810:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000812:	2200      	movs	r2, #0
 8000814:	619a      	str	r2, [r3, #24]
	s_cmd_answer->reponse[3] = (int32_t)0;	// Capteur distance 1
 8000816:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000818:	2200      	movs	r2, #0
 800081a:	61da      	str	r2, [r3, #28]
	s_cmd_answer->reponse[4] = (int32_t)0;	// Capteur distance 2
 800081c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800081e:	2200      	movs	r2, #0
 8000820:	621a      	str	r2, [r3, #32]
	s_cmd_answer->reponse[5] = (int32_t)0;	// Capteur distance 3
 8000822:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000824:	2200      	movs	r2, #0
 8000826:	625a      	str	r2, [r3, #36]	; 0x24
	s_cmd_answer->reponse[6] = (int32_t)0;	// Capteur distance 4
 8000828:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800082a:	2200      	movs	r2, #0
 800082c:	629a      	str	r2, [r3, #40]	; 0x28
	s_cmd_answer->reponse[7] = (int32_t)0;	// Etat LED + Capteurs(Tout ou rien + tirette)
 800082e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000830:	2200      	movs	r2, #0
 8000832:	62da      	str	r2, [r3, #44]	; 0x2c
	s_cmd_answer->reponse[8] = (int32_t)0;	// Etat servo
 8000834:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000836:	2200      	movs	r2, #0
 8000838:	631a      	str	r2, [r3, #48]	; 0x30

	return status;
 800083a:	79fb      	ldrb	r3, [r7, #7]

}
 800083c:	4618      	mov	r0, r3
 800083e:	370c      	adds	r7, #12
 8000840:	46bd      	mov	sp, r7
 8000842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000846:	b004      	add	sp, #16
 8000848:	4770      	bx	lr

0800084a <F_Cmd_Set_LED>:


uint8_t F_Cmd_Set_LED(Tcp_command s_cmd_received, Tcp_answer *s_cmd_answer)
{
 800084a:	b084      	sub	sp, #16
 800084c:	b580      	push	{r7, lr}
 800084e:	b082      	sub	sp, #8
 8000850:	af00      	add	r7, sp, #0
 8000852:	f107 0c10 	add.w	ip, r7, #16
 8000856:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	uint8_t status = STATUS_OK;
 800085a:	2300      	movs	r3, #0
 800085c:	71fb      	strb	r3, [r7, #7]

	// RED LED
	if(((s_cmd_received.params[0]>>16)& 0x00FF) == 1)
 800085e:	69fb      	ldr	r3, [r7, #28]
 8000860:	0c1b      	lsrs	r3, r3, #16
 8000862:	b2db      	uxtb	r3, r3
 8000864:	2b01      	cmp	r3, #1
 8000866:	d103      	bne.n	8000870 <F_Cmd_Set_LED+0x26>
	{
		F_GPIO_setLedRed(1);
 8000868:	2001      	movs	r0, #1
 800086a:	f000 fe45 	bl	80014f8 <F_GPIO_setLedRed>
 800086e:	e007      	b.n	8000880 <F_Cmd_Set_LED+0x36>
	}
	else if(((s_cmd_received.params[0]>>16)& 0x00FF) == 0)
 8000870:	69fb      	ldr	r3, [r7, #28]
 8000872:	0c1b      	lsrs	r3, r3, #16
 8000874:	b2db      	uxtb	r3, r3
 8000876:	2b00      	cmp	r3, #0
 8000878:	d102      	bne.n	8000880 <F_Cmd_Set_LED+0x36>
	{
		F_GPIO_setLedRed(0);
 800087a:	2000      	movs	r0, #0
 800087c:	f000 fe3c 	bl	80014f8 <F_GPIO_setLedRed>
	}

	// BLUE LED
	if(((s_cmd_received.params[0]>>8)& 0x00FF) == 1)
 8000880:	69fb      	ldr	r3, [r7, #28]
 8000882:	0a1b      	lsrs	r3, r3, #8
 8000884:	b2db      	uxtb	r3, r3
 8000886:	2b01      	cmp	r3, #1
 8000888:	d103      	bne.n	8000892 <F_Cmd_Set_LED+0x48>
	{
		F_GPIO_setLedBlue(1);
 800088a:	2001      	movs	r0, #1
 800088c:	f000 fe52 	bl	8001534 <F_GPIO_setLedBlue>
 8000890:	e007      	b.n	80008a2 <F_Cmd_Set_LED+0x58>
	}
	else if(((s_cmd_received.params[0]>>8)& 0x00FF) == 0)
 8000892:	69fb      	ldr	r3, [r7, #28]
 8000894:	0a1b      	lsrs	r3, r3, #8
 8000896:	b2db      	uxtb	r3, r3
 8000898:	2b00      	cmp	r3, #0
 800089a:	d102      	bne.n	80008a2 <F_Cmd_Set_LED+0x58>
	{
		F_GPIO_setLedBlue(0);
 800089c:	2000      	movs	r0, #0
 800089e:	f000 fe49 	bl	8001534 <F_GPIO_setLedBlue>
	}

	// GREEN LED
	if((s_cmd_received.params[0] & 0x00FF) == 1)
 80008a2:	69fb      	ldr	r3, [r7, #28]
 80008a4:	b2db      	uxtb	r3, r3
 80008a6:	2b01      	cmp	r3, #1
 80008a8:	d103      	bne.n	80008b2 <F_Cmd_Set_LED+0x68>
	{
		F_GPIO_setLedGreen(1);
 80008aa:	2001      	movs	r0, #1
 80008ac:	f000 fe60 	bl	8001570 <F_GPIO_setLedGreen>
 80008b0:	e006      	b.n	80008c0 <F_Cmd_Set_LED+0x76>
	}
	else if((s_cmd_received.params[0]& 0x00FF) == 0)
 80008b2:	69fb      	ldr	r3, [r7, #28]
 80008b4:	b2db      	uxtb	r3, r3
 80008b6:	2b00      	cmp	r3, #0
 80008b8:	d102      	bne.n	80008c0 <F_Cmd_Set_LED+0x76>
	{
		F_GPIO_setLedGreen(0);
 80008ba:	2000      	movs	r0, #0
 80008bc:	f000 fe58 	bl	8001570 <F_GPIO_setLedGreen>
	}

	s_cmd_answer->code_retour = status;
 80008c0:	79fa      	ldrb	r2, [r7, #7]
 80008c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80008c4:	609a      	str	r2, [r3, #8]
	s_cmd_answer->nb_reponse = 0;
 80008c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80008c8:	2200      	movs	r2, #0
 80008ca:	60da      	str	r2, [r3, #12]

	return status;
 80008cc:	79fb      	ldrb	r3, [r7, #7]

}
 80008ce:	4618      	mov	r0, r3
 80008d0:	3708      	adds	r7, #8
 80008d2:	46bd      	mov	sp, r7
 80008d4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80008d8:	b004      	add	sp, #16
 80008da:	4770      	bx	lr

080008dc <F_TCP_paquetTocmd>:


void F_TCP_paquetTocmd(void *data,uint16_t data_len, struct tcp_command *s_cmd_received)
{
 80008dc:	b480      	push	{r7}
 80008de:	b08f      	sub	sp, #60	; 0x3c
 80008e0:	af00      	add	r7, sp, #0
 80008e2:	60f8      	str	r0, [r7, #12]
 80008e4:	460b      	mov	r3, r1
 80008e6:	607a      	str	r2, [r7, #4]
 80008e8:	817b      	strh	r3, [r7, #10]
	uint8_t i = 0;
 80008ea:	2300      	movs	r3, #0
 80008ec:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	uint32_t * tempPtr = data;
 80008f0:	68fb      	ldr	r3, [r7, #12]
 80008f2:	633b      	str	r3, [r7, #48]	; 0x30

	volatile uint32_t tab_reveived[3 + SIZE_PARAM_CMD] = {0};
 80008f4:	f107 0314 	add.w	r3, r7, #20
 80008f8:	2200      	movs	r2, #0
 80008fa:	601a      	str	r2, [r3, #0]
 80008fc:	605a      	str	r2, [r3, #4]
 80008fe:	609a      	str	r2, [r3, #8]
 8000900:	60da      	str	r2, [r3, #12]
 8000902:	611a      	str	r2, [r3, #16]
 8000904:	615a      	str	r2, [r3, #20]
 8000906:	619a      	str	r2, [r3, #24]

	for(i=0; i<(data_len/4);i++)
 8000908:	2300      	movs	r3, #0
 800090a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800090e:	e010      	b.n	8000932 <F_TCP_paquetTocmd+0x56>
	{

		tab_reveived[i] = (uint32_t)(*tempPtr++);
 8000910:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000912:	1d1a      	adds	r2, r3, #4
 8000914:	633a      	str	r2, [r7, #48]	; 0x30
 8000916:	f897 1037 	ldrb.w	r1, [r7, #55]	; 0x37
 800091a:	681a      	ldr	r2, [r3, #0]
 800091c:	008b      	lsls	r3, r1, #2
 800091e:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8000922:	440b      	add	r3, r1
 8000924:	f843 2c24 	str.w	r2, [r3, #-36]
	for(i=0; i<(data_len/4);i++)
 8000928:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800092c:	3301      	adds	r3, #1
 800092e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8000932:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8000936:	b29a      	uxth	r2, r3
 8000938:	897b      	ldrh	r3, [r7, #10]
 800093a:	089b      	lsrs	r3, r3, #2
 800093c:	b29b      	uxth	r3, r3
 800093e:	429a      	cmp	r2, r3
 8000940:	d3e6      	bcc.n	8000910 <F_TCP_paquetTocmd+0x34>

	}

	s_cmd_received->id = (uint32_t)(tab_reveived[0]);
 8000942:	697a      	ldr	r2, [r7, #20]
 8000944:	687b      	ldr	r3, [r7, #4]
 8000946:	601a      	str	r2, [r3, #0]
	s_cmd_received->cmd = tab_reveived[1];
 8000948:	69ba      	ldr	r2, [r7, #24]
 800094a:	687b      	ldr	r3, [r7, #4]
 800094c:	605a      	str	r2, [r3, #4]
	s_cmd_received->nb_param = tab_reveived[2];
 800094e:	69fa      	ldr	r2, [r7, #28]
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	609a      	str	r2, [r3, #8]
	for(i=0;i<((data_len/4)-3);i++)
 8000954:	2300      	movs	r3, #0
 8000956:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800095a:	e014      	b.n	8000986 <F_TCP_paquetTocmd+0xaa>
	{
		s_cmd_received->params[i] = (uint32_t)(tab_reveived[3+i]);
 800095c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8000960:	3303      	adds	r3, #3
 8000962:	f897 0037 	ldrb.w	r0, [r7, #55]	; 0x37
 8000966:	009b      	lsls	r3, r3, #2
 8000968:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800096c:	4413      	add	r3, r2
 800096e:	f853 2c24 	ldr.w	r2, [r3, #-36]
 8000972:	6879      	ldr	r1, [r7, #4]
 8000974:	1c83      	adds	r3, r0, #2
 8000976:	009b      	lsls	r3, r3, #2
 8000978:	440b      	add	r3, r1
 800097a:	605a      	str	r2, [r3, #4]
	for(i=0;i<((data_len/4)-3);i++)
 800097c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8000980:	3301      	adds	r3, #1
 8000982:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8000986:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 800098a:	897b      	ldrh	r3, [r7, #10]
 800098c:	089b      	lsrs	r3, r3, #2
 800098e:	b29b      	uxth	r3, r3
 8000990:	3b03      	subs	r3, #3
 8000992:	429a      	cmp	r2, r3
 8000994:	dbe2      	blt.n	800095c <F_TCP_paquetTocmd+0x80>
	}

}
 8000996:	bf00      	nop
 8000998:	373c      	adds	r7, #60	; 0x3c
 800099a:	46bd      	mov	sp, r7
 800099c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a0:	4770      	bx	lr

080009a2 <F_TCP_answerTotab>:

void F_TCP_answerTotab(uint32_t *array, struct tcp_answer s_cmd_answer)
{
 80009a2:	b084      	sub	sp, #16
 80009a4:	b480      	push	{r7}
 80009a6:	b085      	sub	sp, #20
 80009a8:	af00      	add	r7, sp, #0
 80009aa:	6078      	str	r0, [r7, #4]
 80009ac:	f107 001c 	add.w	r0, r7, #28
 80009b0:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	uint8_t i = 0;
 80009b4:	2300      	movs	r3, #0
 80009b6:	73fb      	strb	r3, [r7, #15]
	array[0] = s_cmd_answer.id;
 80009b8:	69fa      	ldr	r2, [r7, #28]
 80009ba:	687b      	ldr	r3, [r7, #4]
 80009bc:	601a      	str	r2, [r3, #0]
	array[1] = s_cmd_answer.code_retour;
 80009be:	687b      	ldr	r3, [r7, #4]
 80009c0:	3304      	adds	r3, #4
 80009c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80009c4:	601a      	str	r2, [r3, #0]
	array[2] = s_cmd_answer.cmd;
 80009c6:	687b      	ldr	r3, [r7, #4]
 80009c8:	3308      	adds	r3, #8
 80009ca:	6a3a      	ldr	r2, [r7, #32]
 80009cc:	601a      	str	r2, [r3, #0]
	array[3] =  s_cmd_answer.nb_reponse;
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	330c      	adds	r3, #12
 80009d2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80009d4:	601a      	str	r2, [r3, #0]

	for(i=0;i< s_cmd_answer.nb_reponse;i++)
 80009d6:	2300      	movs	r3, #0
 80009d8:	73fb      	strb	r3, [r7, #15]
 80009da:	e00f      	b.n	80009fc <F_TCP_answerTotab+0x5a>
	{
		array[4+i] = s_cmd_answer.reponse[i];
 80009dc:	7bfb      	ldrb	r3, [r7, #15]
 80009de:	7bfa      	ldrb	r2, [r7, #15]
 80009e0:	3204      	adds	r2, #4
 80009e2:	0092      	lsls	r2, r2, #2
 80009e4:	6879      	ldr	r1, [r7, #4]
 80009e6:	440a      	add	r2, r1
 80009e8:	3304      	adds	r3, #4
 80009ea:	009b      	lsls	r3, r3, #2
 80009ec:	f107 0118 	add.w	r1, r7, #24
 80009f0:	440b      	add	r3, r1
 80009f2:	685b      	ldr	r3, [r3, #4]
 80009f4:	6013      	str	r3, [r2, #0]
	for(i=0;i< s_cmd_answer.nb_reponse;i++)
 80009f6:	7bfb      	ldrb	r3, [r7, #15]
 80009f8:	3301      	adds	r3, #1
 80009fa:	73fb      	strb	r3, [r7, #15]
 80009fc:	7bfa      	ldrb	r2, [r7, #15]
 80009fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000a00:	429a      	cmp	r2, r3
 8000a02:	d3eb      	bcc.n	80009dc <F_TCP_answerTotab+0x3a>
	}

}
 8000a04:	bf00      	nop
 8000a06:	3714      	adds	r7, #20
 8000a08:	46bd      	mov	sp, r7
 8000a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a0e:	b004      	add	sp, #16
 8000a10:	4770      	bx	lr

08000a12 <LL_I2C_Enable>:
  * @rmtoll CR1          PE            LL_I2C_Enable
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_Enable(I2C_TypeDef *I2Cx)
{
 8000a12:	b480      	push	{r7}
 8000a14:	b083      	sub	sp, #12
 8000a16:	af00      	add	r7, sp, #0
 8000a18:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR1, I2C_CR1_PE);
 8000a1a:	687b      	ldr	r3, [r7, #4]
 8000a1c:	681b      	ldr	r3, [r3, #0]
 8000a1e:	f043 0201 	orr.w	r2, r3, #1
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	601a      	str	r2, [r3, #0]
}
 8000a26:	bf00      	nop
 8000a28:	370c      	adds	r7, #12
 8000a2a:	46bd      	mov	sp, r7
 8000a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a30:	4770      	bx	lr
	...

08000a34 <F_LCD_Init>:
#include "math.h"
#include "cmsis_os.h"
#include "i2c.h"
#include "F_Odometry.h"

void F_LCD_Init(void){
 8000a34:	b580      	push	{r7, lr}
 8000a36:	af00      	add	r7, sp, #0
	g_addr = LCD_ADDR;
 8000a38:	4b0a      	ldr	r3, [pc, #40]	; (8000a64 <F_LCD_Init+0x30>)
 8000a3a:	2227      	movs	r2, #39	; 0x27
 8000a3c:	701a      	strb	r2, [r3, #0]
	g_cols = LCD_COLS;
 8000a3e:	4b0a      	ldr	r3, [pc, #40]	; (8000a68 <F_LCD_Init+0x34>)
 8000a40:	2210      	movs	r2, #16
 8000a42:	701a      	strb	r2, [r3, #0]
	g_rows = LCD_ROWS;
 8000a44:	4b09      	ldr	r3, [pc, #36]	; (8000a6c <F_LCD_Init+0x38>)
 8000a46:	2202      	movs	r2, #2
 8000a48:	701a      	strb	r2, [r3, #0]
	g_charsize = LCD_CHARSIZE;
 8000a4a:	4b09      	ldr	r3, [pc, #36]	; (8000a70 <F_LCD_Init+0x3c>)
 8000a4c:	2204      	movs	r2, #4
 8000a4e:	701a      	strb	r2, [r3, #0]
	g_backlightval = LCD_BACKLIGHT;
 8000a50:	4b08      	ldr	r3, [pc, #32]	; (8000a74 <F_LCD_Init+0x40>)
 8000a52:	2208      	movs	r2, #8
 8000a54:	701a      	strb	r2, [r3, #0]

	LL_I2C_Enable(I2C1);
 8000a56:	4808      	ldr	r0, [pc, #32]	; (8000a78 <F_LCD_Init+0x44>)
 8000a58:	f7ff ffdb 	bl	8000a12 <LL_I2C_Enable>

	F_LCD_begin();
 8000a5c:	f000 f80e 	bl	8000a7c <F_LCD_begin>
}
 8000a60:	bf00      	nop
 8000a62:	bd80      	pop	{r7, pc}
 8000a64:	2000434e 	.word	0x2000434e
 8000a68:	20004353 	.word	0x20004353
 8000a6c:	2000434d 	.word	0x2000434d
 8000a70:	2000434f 	.word	0x2000434f
 8000a74:	20004350 	.word	0x20004350
 8000a78:	40005400 	.word	0x40005400

08000a7c <F_LCD_begin>:
void F_LCD_begin() {
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	af00      	add	r7, sp, #0
	g_displayfunction = LCD_4BITMODE | LCD_1LINE | LCD_5x8DOTS;
 8000a80:	4b2d      	ldr	r3, [pc, #180]	; (8000b38 <F_LCD_begin+0xbc>)
 8000a82:	2200      	movs	r2, #0
 8000a84:	701a      	strb	r2, [r3, #0]

	if (g_rows > 1) {
 8000a86:	4b2d      	ldr	r3, [pc, #180]	; (8000b3c <F_LCD_begin+0xc0>)
 8000a88:	781b      	ldrb	r3, [r3, #0]
 8000a8a:	2b01      	cmp	r3, #1
 8000a8c:	d906      	bls.n	8000a9c <F_LCD_begin+0x20>
		g_displayfunction |= LCD_2LINE;
 8000a8e:	4b2a      	ldr	r3, [pc, #168]	; (8000b38 <F_LCD_begin+0xbc>)
 8000a90:	781b      	ldrb	r3, [r3, #0]
 8000a92:	f043 0308 	orr.w	r3, r3, #8
 8000a96:	b2da      	uxtb	r2, r3
 8000a98:	4b27      	ldr	r3, [pc, #156]	; (8000b38 <F_LCD_begin+0xbc>)
 8000a9a:	701a      	strb	r2, [r3, #0]
	}

	// for some 1 line displays you can select a 10 pixel high font
	if ((g_charsize != 0) && (g_rows == 1)) {
 8000a9c:	4b28      	ldr	r3, [pc, #160]	; (8000b40 <F_LCD_begin+0xc4>)
 8000a9e:	781b      	ldrb	r3, [r3, #0]
 8000aa0:	2b00      	cmp	r3, #0
 8000aa2:	d00a      	beq.n	8000aba <F_LCD_begin+0x3e>
 8000aa4:	4b25      	ldr	r3, [pc, #148]	; (8000b3c <F_LCD_begin+0xc0>)
 8000aa6:	781b      	ldrb	r3, [r3, #0]
 8000aa8:	2b01      	cmp	r3, #1
 8000aaa:	d106      	bne.n	8000aba <F_LCD_begin+0x3e>
		g_displayfunction |= LCD_5x10DOTS;
 8000aac:	4b22      	ldr	r3, [pc, #136]	; (8000b38 <F_LCD_begin+0xbc>)
 8000aae:	781b      	ldrb	r3, [r3, #0]
 8000ab0:	f043 0304 	orr.w	r3, r3, #4
 8000ab4:	b2da      	uxtb	r2, r3
 8000ab6:	4b20      	ldr	r3, [pc, #128]	; (8000b38 <F_LCD_begin+0xbc>)
 8000ab8:	701a      	strb	r2, [r3, #0]
	}

	// SEE PAGE 45/46 FOR INITIALIZATION SPECIFICATION!
	// according to datasheet, we need at least 40ms after power rises above 2.7V
	// before sending commands. Arduino can turn on way befer 4.5V so we'll wait 50
	HAL_Delay(50);
 8000aba:	2032      	movs	r0, #50	; 0x32
 8000abc:	f001 ff08 	bl	80028d0 <HAL_Delay>

	// Now we pull both RS and R/W low to begin commands
	D_LCD_expanderWrite(g_backlightval);	// reset expanderand turn backlight off (Bit 8 =1)
 8000ac0:	4b20      	ldr	r3, [pc, #128]	; (8000b44 <F_LCD_begin+0xc8>)
 8000ac2:	781b      	ldrb	r3, [r3, #0]
 8000ac4:	4618      	mov	r0, r3
 8000ac6:	f000 f90b 	bl	8000ce0 <D_LCD_expanderWrite>
	HAL_Delay(100);
 8000aca:	2064      	movs	r0, #100	; 0x64
 8000acc:	f001 ff00 	bl	80028d0 <HAL_Delay>
	//put the LCD into 4 bit mode
	// this is according to the hitachi HD44780 datasheet
	// figure 24, pg 46

	// we start in 8bit mode, try to set 4 bit mode
	D_LCD_write4bits(0x03 << 4);
 8000ad0:	2030      	movs	r0, #48	; 0x30
 8000ad2:	f000 f8f4 	bl	8000cbe <D_LCD_write4bits>
	HAL_Delay(5); // wait min 4.1ms
 8000ad6:	2005      	movs	r0, #5
 8000ad8:	f001 fefa 	bl	80028d0 <HAL_Delay>

	// second try
	D_LCD_write4bits(0x03 << 4);
 8000adc:	2030      	movs	r0, #48	; 0x30
 8000ade:	f000 f8ee 	bl	8000cbe <D_LCD_write4bits>
	HAL_Delay(5); // wait min 4.1ms
 8000ae2:	2005      	movs	r0, #5
 8000ae4:	f001 fef4 	bl	80028d0 <HAL_Delay>

	// third go!
	D_LCD_write4bits(0x03 << 4);
 8000ae8:	2030      	movs	r0, #48	; 0x30
 8000aea:	f000 f8e8 	bl	8000cbe <D_LCD_write4bits>
	HAL_Delay(5);
 8000aee:	2005      	movs	r0, #5
 8000af0:	f001 feee 	bl	80028d0 <HAL_Delay>

	// finally, set to 4-bit interface
	D_LCD_write4bits(0x02 << 4);
 8000af4:	2020      	movs	r0, #32
 8000af6:	f000 f8e2 	bl	8000cbe <D_LCD_write4bits>

	// set # lines, font size, etc.
	F_LCD_command(LCD_FUNCTIONSET | g_displayfunction);
 8000afa:	4b0f      	ldr	r3, [pc, #60]	; (8000b38 <F_LCD_begin+0xbc>)
 8000afc:	781b      	ldrb	r3, [r3, #0]
 8000afe:	f043 0320 	orr.w	r3, r3, #32
 8000b02:	b2db      	uxtb	r3, r3
 8000b04:	4618      	mov	r0, r3
 8000b06:	f000 f87f 	bl	8000c08 <F_LCD_command>

	// turn the display on with no cursor or blinking default
	g_displaycontrol = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;
 8000b0a:	4b0f      	ldr	r3, [pc, #60]	; (8000b48 <F_LCD_begin+0xcc>)
 8000b0c:	2204      	movs	r2, #4
 8000b0e:	701a      	strb	r2, [r3, #0]
	F_LCD_display();
 8000b10:	f000 f864 	bl	8000bdc <F_LCD_display>

	// clear it off
	F_LCD_clear();
 8000b14:	f000 f81c 	bl	8000b50 <F_LCD_clear>

	// Initialize to default text direction (for roman languages)
	g_displaymode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
 8000b18:	4b0c      	ldr	r3, [pc, #48]	; (8000b4c <F_LCD_begin+0xd0>)
 8000b1a:	2202      	movs	r2, #2
 8000b1c:	701a      	strb	r2, [r3, #0]

	// set the entry mode
	F_LCD_command(LCD_ENTRYMODESET | g_displaymode);
 8000b1e:	4b0b      	ldr	r3, [pc, #44]	; (8000b4c <F_LCD_begin+0xd0>)
 8000b20:	781b      	ldrb	r3, [r3, #0]
 8000b22:	f043 0304 	orr.w	r3, r3, #4
 8000b26:	b2db      	uxtb	r3, r3
 8000b28:	4618      	mov	r0, r3
 8000b2a:	f000 f86d 	bl	8000c08 <F_LCD_command>

	F_LCD_home();
 8000b2e:	f000 f819 	bl	8000b64 <F_LCD_home>
}
 8000b32:	bf00      	nop
 8000b34:	bd80      	pop	{r7, pc}
 8000b36:	bf00      	nop
 8000b38:	20004352 	.word	0x20004352
 8000b3c:	2000434d 	.word	0x2000434d
 8000b40:	2000434f 	.word	0x2000434f
 8000b44:	20004350 	.word	0x20004350
 8000b48:	20004351 	.word	0x20004351
 8000b4c:	2000434c 	.word	0x2000434c

08000b50 <F_LCD_clear>:
/********** high level commands, for the user! */
void F_LCD_clear(){
 8000b50:	b580      	push	{r7, lr}
 8000b52:	af00      	add	r7, sp, #0
	F_LCD_command(LCD_CLEARDISPLAY);// clear display, set cursor position to zero
 8000b54:	2001      	movs	r0, #1
 8000b56:	f000 f857 	bl	8000c08 <F_LCD_command>
	HAL_Delay(50);  // this command takes a long time!
 8000b5a:	2032      	movs	r0, #50	; 0x32
 8000b5c:	f001 feb8 	bl	80028d0 <HAL_Delay>
}
 8000b60:	bf00      	nop
 8000b62:	bd80      	pop	{r7, pc}

08000b64 <F_LCD_home>:
void F_LCD_home(){
 8000b64:	b580      	push	{r7, lr}
 8000b66:	af00      	add	r7, sp, #0
	F_LCD_command(LCD_RETURNHOME);  // set cursor position to zero
 8000b68:	2002      	movs	r0, #2
 8000b6a:	f000 f84d 	bl	8000c08 <F_LCD_command>
	HAL_Delay(50);  // this command takes a long time!
 8000b6e:	2032      	movs	r0, #50	; 0x32
 8000b70:	f001 feae 	bl	80028d0 <HAL_Delay>
}
 8000b74:	bf00      	nop
 8000b76:	bd80      	pop	{r7, pc}

08000b78 <F_LCD_setCursor>:
void F_LCD_setCursor(uint8_t col, uint8_t row){
 8000b78:	b590      	push	{r4, r7, lr}
 8000b7a:	b087      	sub	sp, #28
 8000b7c:	af00      	add	r7, sp, #0
 8000b7e:	4603      	mov	r3, r0
 8000b80:	460a      	mov	r2, r1
 8000b82:	71fb      	strb	r3, [r7, #7]
 8000b84:	4613      	mov	r3, r2
 8000b86:	71bb      	strb	r3, [r7, #6]
	int row_offsets[] = { 0x00, 0x40, 0x14, 0x54 };
 8000b88:	4b12      	ldr	r3, [pc, #72]	; (8000bd4 <F_LCD_setCursor+0x5c>)
 8000b8a:	f107 0408 	add.w	r4, r7, #8
 8000b8e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000b90:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	if (row > g_rows) {
 8000b94:	4b10      	ldr	r3, [pc, #64]	; (8000bd8 <F_LCD_setCursor+0x60>)
 8000b96:	781b      	ldrb	r3, [r3, #0]
 8000b98:	79ba      	ldrb	r2, [r7, #6]
 8000b9a:	429a      	cmp	r2, r3
 8000b9c:	d903      	bls.n	8000ba6 <F_LCD_setCursor+0x2e>
		row = g_rows-1;    // we count rows starting w/0
 8000b9e:	4b0e      	ldr	r3, [pc, #56]	; (8000bd8 <F_LCD_setCursor+0x60>)
 8000ba0:	781b      	ldrb	r3, [r3, #0]
 8000ba2:	3b01      	subs	r3, #1
 8000ba4:	71bb      	strb	r3, [r7, #6]
	}
	F_LCD_command(LCD_SETDDRAMADDR | (col + row_offsets[row]));
 8000ba6:	79bb      	ldrb	r3, [r7, #6]
 8000ba8:	009b      	lsls	r3, r3, #2
 8000baa:	f107 0218 	add.w	r2, r7, #24
 8000bae:	4413      	add	r3, r2
 8000bb0:	f853 3c10 	ldr.w	r3, [r3, #-16]
 8000bb4:	b2da      	uxtb	r2, r3
 8000bb6:	79fb      	ldrb	r3, [r7, #7]
 8000bb8:	4413      	add	r3, r2
 8000bba:	b2db      	uxtb	r3, r3
 8000bbc:	b25b      	sxtb	r3, r3
 8000bbe:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000bc2:	b25b      	sxtb	r3, r3
 8000bc4:	b2db      	uxtb	r3, r3
 8000bc6:	4618      	mov	r0, r3
 8000bc8:	f000 f81e 	bl	8000c08 <F_LCD_command>
}
 8000bcc:	bf00      	nop
 8000bce:	371c      	adds	r7, #28
 8000bd0:	46bd      	mov	sp, r7
 8000bd2:	bd90      	pop	{r4, r7, pc}
 8000bd4:	0801be3c 	.word	0x0801be3c
 8000bd8:	2000434d 	.word	0x2000434d

08000bdc <F_LCD_display>:
// Turn the display on/off (quickly)
void F_LCD_noDisplay() {
	g_displaycontrol &= ~LCD_DISPLAYON;
	F_LCD_command(LCD_DISPLAYCONTROL | g_displaycontrol);
}
void F_LCD_display() {
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	af00      	add	r7, sp, #0
	g_displaycontrol |= LCD_DISPLAYON;
 8000be0:	4b08      	ldr	r3, [pc, #32]	; (8000c04 <F_LCD_display+0x28>)
 8000be2:	781b      	ldrb	r3, [r3, #0]
 8000be4:	f043 0304 	orr.w	r3, r3, #4
 8000be8:	b2da      	uxtb	r2, r3
 8000bea:	4b06      	ldr	r3, [pc, #24]	; (8000c04 <F_LCD_display+0x28>)
 8000bec:	701a      	strb	r2, [r3, #0]
	F_LCD_command(LCD_DISPLAYCONTROL | g_displaycontrol);
 8000bee:	4b05      	ldr	r3, [pc, #20]	; (8000c04 <F_LCD_display+0x28>)
 8000bf0:	781b      	ldrb	r3, [r3, #0]
 8000bf2:	f043 0308 	orr.w	r3, r3, #8
 8000bf6:	b2db      	uxtb	r3, r3
 8000bf8:	4618      	mov	r0, r3
 8000bfa:	f000 f805 	bl	8000c08 <F_LCD_command>
}
 8000bfe:	bf00      	nop
 8000c00:	bd80      	pop	{r7, pc}
 8000c02:	bf00      	nop
 8000c04:	20004351 	.word	0x20004351

08000c08 <F_LCD_command>:
  return g_backlightval == LCD_BACKLIGHT;
}

/*********** mid level commands, for sending data/cmds */

void F_LCD_command(uint8_t value) {
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	b082      	sub	sp, #8
 8000c0c:	af00      	add	r7, sp, #0
 8000c0e:	4603      	mov	r3, r0
 8000c10:	71fb      	strb	r3, [r7, #7]
	D_LCD_send(value, 0);
 8000c12:	79fb      	ldrb	r3, [r7, #7]
 8000c14:	2100      	movs	r1, #0
 8000c16:	4618      	mov	r0, r3
 8000c18:	f000 f830 	bl	8000c7c <D_LCD_send>
}
 8000c1c:	bf00      	nop
 8000c1e:	3708      	adds	r7, #8
 8000c20:	46bd      	mov	sp, r7
 8000c22:	bd80      	pop	{r7, pc}

08000c24 <F_LCD_write>:
void F_LCD_write(uint8_t value) {
 8000c24:	b580      	push	{r7, lr}
 8000c26:	b082      	sub	sp, #8
 8000c28:	af00      	add	r7, sp, #0
 8000c2a:	4603      	mov	r3, r0
 8000c2c:	71fb      	strb	r3, [r7, #7]
	D_LCD_send(value, LCD_RS);
 8000c2e:	79fb      	ldrb	r3, [r7, #7]
 8000c30:	2101      	movs	r1, #1
 8000c32:	4618      	mov	r0, r3
 8000c34:	f000 f822 	bl	8000c7c <D_LCD_send>
}
 8000c38:	bf00      	nop
 8000c3a:	3708      	adds	r7, #8
 8000c3c:	46bd      	mov	sp, r7
 8000c3e:	bd80      	pop	{r7, pc}

08000c40 <F_LCD_printstr>:
void F_LCD_printstr(char *c){
 8000c40:	b580      	push	{r7, lr}
 8000c42:	b084      	sub	sp, #16
 8000c44:	af00      	add	r7, sp, #0
 8000c46:	6078      	str	r0, [r7, #4]
	//This function is not identical to the function used for "real" I2C displays
	//it's here so the user sketch doesn't have to be changed
	int idx=0;
 8000c48:	2300      	movs	r3, #0
 8000c4a:	60fb      	str	r3, [r7, #12]
	while (c[idx] !='\0' && idx<16) {
 8000c4c:	e009      	b.n	8000c62 <F_LCD_printstr+0x22>
		F_LCD_write(c[idx]);
 8000c4e:	68fb      	ldr	r3, [r7, #12]
 8000c50:	687a      	ldr	r2, [r7, #4]
 8000c52:	4413      	add	r3, r2
 8000c54:	781b      	ldrb	r3, [r3, #0]
 8000c56:	4618      	mov	r0, r3
 8000c58:	f7ff ffe4 	bl	8000c24 <F_LCD_write>
		idx++;
 8000c5c:	68fb      	ldr	r3, [r7, #12]
 8000c5e:	3301      	adds	r3, #1
 8000c60:	60fb      	str	r3, [r7, #12]
	while (c[idx] !='\0' && idx<16) {
 8000c62:	68fb      	ldr	r3, [r7, #12]
 8000c64:	687a      	ldr	r2, [r7, #4]
 8000c66:	4413      	add	r3, r2
 8000c68:	781b      	ldrb	r3, [r3, #0]
 8000c6a:	2b00      	cmp	r3, #0
 8000c6c:	d002      	beq.n	8000c74 <F_LCD_printstr+0x34>
 8000c6e:	68fb      	ldr	r3, [r7, #12]
 8000c70:	2b0f      	cmp	r3, #15
 8000c72:	ddec      	ble.n	8000c4e <F_LCD_printstr+0xe>
	}
}
 8000c74:	bf00      	nop
 8000c76:	3710      	adds	r7, #16
 8000c78:	46bd      	mov	sp, r7
 8000c7a:	bd80      	pop	{r7, pc}

08000c7c <D_LCD_send>:
//
//}
/************ low level data pushing commands **********/

// write either command or data
void D_LCD_send(uint8_t value, uint8_t mode) {
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	b084      	sub	sp, #16
 8000c80:	af00      	add	r7, sp, #0
 8000c82:	4603      	mov	r3, r0
 8000c84:	460a      	mov	r2, r1
 8000c86:	71fb      	strb	r3, [r7, #7]
 8000c88:	4613      	mov	r3, r2
 8000c8a:	71bb      	strb	r3, [r7, #6]
	uint8_t highnib=value&0xf0;
 8000c8c:	79fb      	ldrb	r3, [r7, #7]
 8000c8e:	f023 030f 	bic.w	r3, r3, #15
 8000c92:	73fb      	strb	r3, [r7, #15]
	uint8_t lownib=(value<<4)&0xf0;
 8000c94:	79fb      	ldrb	r3, [r7, #7]
 8000c96:	011b      	lsls	r3, r3, #4
 8000c98:	73bb      	strb	r3, [r7, #14]

	D_LCD_write4bits((highnib)|mode);
 8000c9a:	7bfa      	ldrb	r2, [r7, #15]
 8000c9c:	79bb      	ldrb	r3, [r7, #6]
 8000c9e:	4313      	orrs	r3, r2
 8000ca0:	b2db      	uxtb	r3, r3
 8000ca2:	4618      	mov	r0, r3
 8000ca4:	f000 f80b 	bl	8000cbe <D_LCD_write4bits>
	D_LCD_write4bits((lownib)|mode);
 8000ca8:	7bba      	ldrb	r2, [r7, #14]
 8000caa:	79bb      	ldrb	r3, [r7, #6]
 8000cac:	4313      	orrs	r3, r2
 8000cae:	b2db      	uxtb	r3, r3
 8000cb0:	4618      	mov	r0, r3
 8000cb2:	f000 f804 	bl	8000cbe <D_LCD_write4bits>
}
 8000cb6:	bf00      	nop
 8000cb8:	3710      	adds	r7, #16
 8000cba:	46bd      	mov	sp, r7
 8000cbc:	bd80      	pop	{r7, pc}

08000cbe <D_LCD_write4bits>:
void D_LCD_write4bits(uint8_t value) {
 8000cbe:	b580      	push	{r7, lr}
 8000cc0:	b082      	sub	sp, #8
 8000cc2:	af00      	add	r7, sp, #0
 8000cc4:	4603      	mov	r3, r0
 8000cc6:	71fb      	strb	r3, [r7, #7]
	D_LCD_expanderWrite(value);
 8000cc8:	79fb      	ldrb	r3, [r7, #7]
 8000cca:	4618      	mov	r0, r3
 8000ccc:	f000 f808 	bl	8000ce0 <D_LCD_expanderWrite>
	D_LCD_pulseEnable(value);
 8000cd0:	79fb      	ldrb	r3, [r7, #7]
 8000cd2:	4618      	mov	r0, r3
 8000cd4:	f000 f81c 	bl	8000d10 <D_LCD_pulseEnable>
}
 8000cd8:	bf00      	nop
 8000cda:	3708      	adds	r7, #8
 8000cdc:	46bd      	mov	sp, r7
 8000cde:	bd80      	pop	{r7, pc}

08000ce0 <D_LCD_expanderWrite>:
void D_LCD_expanderWrite(uint8_t a_data){
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	b082      	sub	sp, #8
 8000ce4:	af00      	add	r7, sp, #0
 8000ce6:	4603      	mov	r3, r0
 8000ce8:	71fb      	strb	r3, [r7, #7]
	F_I2C1_WriteValue(g_addr,a_data | g_backlightval);
 8000cea:	4b07      	ldr	r3, [pc, #28]	; (8000d08 <D_LCD_expanderWrite+0x28>)
 8000cec:	7818      	ldrb	r0, [r3, #0]
 8000cee:	4b07      	ldr	r3, [pc, #28]	; (8000d0c <D_LCD_expanderWrite+0x2c>)
 8000cf0:	781a      	ldrb	r2, [r3, #0]
 8000cf2:	79fb      	ldrb	r3, [r7, #7]
 8000cf4:	4313      	orrs	r3, r2
 8000cf6:	b2db      	uxtb	r3, r3
 8000cf8:	4619      	mov	r1, r3
 8000cfa:	f000 fecf 	bl	8001a9c <F_I2C1_WriteValue>
}
 8000cfe:	bf00      	nop
 8000d00:	3708      	adds	r7, #8
 8000d02:	46bd      	mov	sp, r7
 8000d04:	bd80      	pop	{r7, pc}
 8000d06:	bf00      	nop
 8000d08:	2000434e 	.word	0x2000434e
 8000d0c:	20004350 	.word	0x20004350

08000d10 <D_LCD_pulseEnable>:
void D_LCD_pulseEnable(uint8_t _data){
 8000d10:	b580      	push	{r7, lr}
 8000d12:	b082      	sub	sp, #8
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	4603      	mov	r3, r0
 8000d18:	71fb      	strb	r3, [r7, #7]
	D_LCD_expanderWrite(_data | LCD_EN);	// En high
 8000d1a:	79fb      	ldrb	r3, [r7, #7]
 8000d1c:	f043 0304 	orr.w	r3, r3, #4
 8000d20:	b2db      	uxtb	r3, r3
 8000d22:	4618      	mov	r0, r3
 8000d24:	f7ff ffdc 	bl	8000ce0 <D_LCD_expanderWrite>
	HAL_Delay(1);		// enable pulse must be >450ns
 8000d28:	2001      	movs	r0, #1
 8000d2a:	f001 fdd1 	bl	80028d0 <HAL_Delay>

	D_LCD_expanderWrite(_data & ~LCD_EN);	// En low
 8000d2e:	79fb      	ldrb	r3, [r7, #7]
 8000d30:	f023 0304 	bic.w	r3, r3, #4
 8000d34:	b2db      	uxtb	r3, r3
 8000d36:	4618      	mov	r0, r3
 8000d38:	f7ff ffd2 	bl	8000ce0 <D_LCD_expanderWrite>
	//HAL_Delay(1);		// commands need > 37us to settle
}
 8000d3c:	bf00      	nop
 8000d3e:	3708      	adds	r7, #8
 8000d40:	46bd      	mov	sp, r7
 8000d42:	bd80      	pop	{r7, pc}

08000d44 <F_LCD_DebugTask_Handler>:
	} else {
		F_LCD_noBacklight();		// turn backlight off
	}
}

void F_LCD_DebugTask_Handler(void const * argument){
 8000d44:	b580      	push	{r7, lr}
 8000d46:	b08a      	sub	sp, #40	; 0x28
 8000d48:	af00      	add	r7, sp, #0
 8000d4a:	6078      	str	r0, [r7, #4]

	// 1. Initialization message
	char line1[16],line2[16];
	sprintf(line1,"Time %s",__TIME__);
 8000d4c:	f107 0318 	add.w	r3, r7, #24
 8000d50:	4a19      	ldr	r2, [pc, #100]	; (8000db8 <F_LCD_DebugTask_Handler+0x74>)
 8000d52:	491a      	ldr	r1, [pc, #104]	; (8000dbc <F_LCD_DebugTask_Handler+0x78>)
 8000d54:	4618      	mov	r0, r3
 8000d56:	f01a f873 	bl	801ae40 <siprintf>
	sprintf(line2,"Date%s",__DATE__);
 8000d5a:	f107 0308 	add.w	r3, r7, #8
 8000d5e:	4a18      	ldr	r2, [pc, #96]	; (8000dc0 <F_LCD_DebugTask_Handler+0x7c>)
 8000d60:	4918      	ldr	r1, [pc, #96]	; (8000dc4 <F_LCD_DebugTask_Handler+0x80>)
 8000d62:	4618      	mov	r0, r3
 8000d64:	f01a f86c 	bl	801ae40 <siprintf>

	F_LCD_Init();
 8000d68:	f7ff fe64 	bl	8000a34 <F_LCD_Init>
	F_LCD_setCursor(0,0);
 8000d6c:	2100      	movs	r1, #0
 8000d6e:	2000      	movs	r0, #0
 8000d70:	f7ff ff02 	bl	8000b78 <F_LCD_setCursor>
	F_LCD_printstr(line1);
 8000d74:	f107 0318 	add.w	r3, r7, #24
 8000d78:	4618      	mov	r0, r3
 8000d7a:	f7ff ff61 	bl	8000c40 <F_LCD_printstr>
	F_LCD_setCursor(0,1);
 8000d7e:	2101      	movs	r1, #1
 8000d80:	2000      	movs	r0, #0
 8000d82:	f7ff fef9 	bl	8000b78 <F_LCD_setCursor>
	F_LCD_printstr(line2);
 8000d86:	f107 0308 	add.w	r3, r7, #8
 8000d8a:	4618      	mov	r0, r3
 8000d8c:	f7ff ff58 	bl	8000c40 <F_LCD_printstr>

	// 2. Wait 1s and clear Initialization message
	osDelay(1000);
 8000d90:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000d94:	f00a fb37 	bl	800b406 <osDelay>
	F_LCD_clear();
 8000d98:	f7ff feda 	bl	8000b50 <F_LCD_clear>

    while(1){
        // 3. Wait until period elapse
    	osDelay(300);
 8000d9c:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000da0:	f00a fb31 	bl	800b406 <osDelay>
    	F_GPIO_SetLed4(TRUE);	// Flag ON
 8000da4:	2000      	movs	r0, #0
 8000da6:	f000 fc71 	bl	800168c <F_GPIO_SetLed4>

    	// 4. Fit data for printing
    	F_Odometry_printCountersLCD();
 8000daa:	f000 f8c1 	bl	8000f30 <F_Odometry_printCountersLCD>

    	// 6. Set flag to LOW.
    	F_GPIO_SetLed4(FALSE);	// Flag OFF
 8000dae:	2001      	movs	r0, #1
 8000db0:	f000 fc6c 	bl	800168c <F_GPIO_SetLed4>
    	osDelay(300);
 8000db4:	e7f2      	b.n	8000d9c <F_LCD_DebugTask_Handler+0x58>
 8000db6:	bf00      	nop
 8000db8:	0801be4c 	.word	0x0801be4c
 8000dbc:	0801be58 	.word	0x0801be58
 8000dc0:	0801be60 	.word	0x0801be60
 8000dc4:	0801be6c 	.word	0x0801be6c

08000dc8 <F_Odometry_Init>:

/*
 * F_Odometry_Init Initialize timers 2 and timer 3 as encoder mode
 * F_Odometry_Init Initialize data to zero
 */
void F_Odometry_Init(void){
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	af00      	add	r7, sp, #0

//	HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL);
//	HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);

	F_Odometry_Reset();
 8000dcc:	f000 f802 	bl	8000dd4 <F_Odometry_Reset>
}
 8000dd0:	bf00      	nop
 8000dd2:	bd80      	pop	{r7, pc}

08000dd4 <F_Odometry_Reset>:
/*
 * F_Odometry_Reset Localization data are reseted to zero;
 */
void F_Odometry_Reset(void){
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	af00      	add	r7, sp, #0
	HAL_TIM_Encoder_Stop(&htim2, TIM_CHANNEL_ALL);
 8000dd8:	213c      	movs	r1, #60	; 0x3c
 8000dda:	480f      	ldr	r0, [pc, #60]	; (8000e18 <F_Odometry_Reset+0x44>)
 8000ddc:	f004 ffad 	bl	8005d3a <HAL_TIM_Encoder_Stop>
	HAL_TIM_Encoder_Stop(&htim3, TIM_CHANNEL_ALL);
 8000de0:	213c      	movs	r1, #60	; 0x3c
 8000de2:	480e      	ldr	r0, [pc, #56]	; (8000e1c <F_Odometry_Reset+0x48>)
 8000de4:	f004 ffa9 	bl	8005d3a <HAL_TIM_Encoder_Stop>

	g_oldLeftCount	= 0;
 8000de8:	4b0d      	ldr	r3, [pc, #52]	; (8000e20 <F_Odometry_Reset+0x4c>)
 8000dea:	2200      	movs	r2, #0
 8000dec:	601a      	str	r2, [r3, #0]
	g_oldRightCount	= 0;
 8000dee:	4b0d      	ldr	r3, [pc, #52]	; (8000e24 <F_Odometry_Reset+0x50>)
 8000df0:	2200      	movs	r2, #0
 8000df2:	601a      	str	r2, [r3, #0]
//
//	g_estimate.x = RBT_OF7_X;
//	g_estimate.y = RBT_OF7_Y;
//	g_estimate.teta = 0;

	TIM2->CNT=0;
 8000df4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000df8:	2200      	movs	r2, #0
 8000dfa:	625a      	str	r2, [r3, #36]	; 0x24
	TIM3->CNT=0;
 8000dfc:	4b0a      	ldr	r3, [pc, #40]	; (8000e28 <F_Odometry_Reset+0x54>)
 8000dfe:	2200      	movs	r2, #0
 8000e00:	625a      	str	r2, [r3, #36]	; 0x24

	HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL);
 8000e02:	213c      	movs	r1, #60	; 0x3c
 8000e04:	4804      	ldr	r0, [pc, #16]	; (8000e18 <F_Odometry_Reset+0x44>)
 8000e06:	f004 ff61 	bl	8005ccc <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 8000e0a:	213c      	movs	r1, #60	; 0x3c
 8000e0c:	4803      	ldr	r0, [pc, #12]	; (8000e1c <F_Odometry_Reset+0x48>)
 8000e0e:	f004 ff5d 	bl	8005ccc <HAL_TIM_Encoder_Start>
}
 8000e12:	bf00      	nop
 8000e14:	bd80      	pop	{r7, pc}
 8000e16:	bf00      	nop
 8000e18:	20004434 	.word	0x20004434
 8000e1c:	200043f4 	.word	0x200043f4
 8000e20:	20004354 	.word	0x20004354
 8000e24:	20004358 	.word	0x20004358
 8000e28:	40000400 	.word	0x40000400

08000e2c <F_Odometry_Read>:
/*
 * F_Odometry_Read get the timers counters and compute forward and rotation speed
 */
void F_Odometry_Read(float *fwrdSpeed, float *rotSpeed){
 8000e2c:	b480      	push	{r7}
 8000e2e:	b087      	sub	sp, #28
 8000e30:	af00      	add	r7, sp, #0
 8000e32:	6078      	str	r0, [r7, #4]
 8000e34:	6039      	str	r1, [r7, #0]
	int l_leftSpeed;
	int l_rightSpeed;

	int l_leftCount  = TIM3->CNT ;
 8000e36:	4b33      	ldr	r3, [pc, #204]	; (8000f04 <F_Odometry_Read+0xd8>)
 8000e38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e3a:	60fb      	str	r3, [r7, #12]
	int l_rightCount = TIM2->CNT ;
 8000e3c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000e40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e42:	60bb      	str	r3, [r7, #8]

	l_leftSpeed  = l_leftCount  - g_oldLeftCount ;
 8000e44:	4b30      	ldr	r3, [pc, #192]	; (8000f08 <F_Odometry_Read+0xdc>)
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	68fa      	ldr	r2, [r7, #12]
 8000e4a:	1ad3      	subs	r3, r2, r3
 8000e4c:	617b      	str	r3, [r7, #20]
	l_rightSpeed = l_rightCount - g_oldRightCount;
 8000e4e:	4b2f      	ldr	r3, [pc, #188]	; (8000f0c <F_Odometry_Read+0xe0>)
 8000e50:	681b      	ldr	r3, [r3, #0]
 8000e52:	68ba      	ldr	r2, [r7, #8]
 8000e54:	1ad3      	subs	r3, r2, r3
 8000e56:	613b      	str	r3, [r7, #16]

	// Si on passe par zero en phase descendante
	if(l_leftSpeed  > 4096) l_leftSpeed = -(g_oldLeftCount  + (65535-l_leftCount));
 8000e58:	697b      	ldr	r3, [r7, #20]
 8000e5a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000e5e:	dd08      	ble.n	8000e72 <F_Odometry_Read+0x46>
 8000e60:	68fb      	ldr	r3, [r7, #12]
 8000e62:	f5c3 437f 	rsb	r3, r3, #65280	; 0xff00
 8000e66:	33ff      	adds	r3, #255	; 0xff
 8000e68:	4a27      	ldr	r2, [pc, #156]	; (8000f08 <F_Odometry_Read+0xdc>)
 8000e6a:	6812      	ldr	r2, [r2, #0]
 8000e6c:	4413      	add	r3, r2
 8000e6e:	425b      	negs	r3, r3
 8000e70:	617b      	str	r3, [r7, #20]
	if(l_rightSpeed > 4096) l_rightSpeed= -(g_oldRightCount + (65535-l_rightCount));
 8000e72:	693b      	ldr	r3, [r7, #16]
 8000e74:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000e78:	dd08      	ble.n	8000e8c <F_Odometry_Read+0x60>
 8000e7a:	68bb      	ldr	r3, [r7, #8]
 8000e7c:	f5c3 437f 	rsb	r3, r3, #65280	; 0xff00
 8000e80:	33ff      	adds	r3, #255	; 0xff
 8000e82:	4a22      	ldr	r2, [pc, #136]	; (8000f0c <F_Odometry_Read+0xe0>)
 8000e84:	6812      	ldr	r2, [r2, #0]
 8000e86:	4413      	add	r3, r2
 8000e88:	425b      	negs	r3, r3
 8000e8a:	613b      	str	r3, [r7, #16]
	// Si on passe par zero en phase montante
	if(l_leftSpeed  < -4096) l_leftSpeed = (l_leftCount + (65535  - g_oldLeftCount));
 8000e8c:	697b      	ldr	r3, [r7, #20]
 8000e8e:	f513 5f80 	cmn.w	r3, #4096	; 0x1000
 8000e92:	da07      	bge.n	8000ea4 <F_Odometry_Read+0x78>
 8000e94:	4b1c      	ldr	r3, [pc, #112]	; (8000f08 <F_Odometry_Read+0xdc>)
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	f5c3 437f 	rsb	r3, r3, #65280	; 0xff00
 8000e9c:	33ff      	adds	r3, #255	; 0xff
 8000e9e:	68fa      	ldr	r2, [r7, #12]
 8000ea0:	4413      	add	r3, r2
 8000ea2:	617b      	str	r3, [r7, #20]
	if(l_rightSpeed < -4096) l_rightSpeed= (l_rightCount + (65535 - g_oldRightCount));
 8000ea4:	693b      	ldr	r3, [r7, #16]
 8000ea6:	f513 5f80 	cmn.w	r3, #4096	; 0x1000
 8000eaa:	da07      	bge.n	8000ebc <F_Odometry_Read+0x90>
 8000eac:	4b17      	ldr	r3, [pc, #92]	; (8000f0c <F_Odometry_Read+0xe0>)
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	f5c3 437f 	rsb	r3, r3, #65280	; 0xff00
 8000eb4:	33ff      	adds	r3, #255	; 0xff
 8000eb6:	68ba      	ldr	r2, [r7, #8]
 8000eb8:	4413      	add	r3, r2
 8000eba:	613b      	str	r3, [r7, #16]

	*fwrdSpeed = (float)( l_leftSpeed + l_rightSpeed ) / 2;
 8000ebc:	697a      	ldr	r2, [r7, #20]
 8000ebe:	693b      	ldr	r3, [r7, #16]
 8000ec0:	4413      	add	r3, r2
 8000ec2:	ee07 3a90 	vmov	s15, r3
 8000ec6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000eca:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8000ece:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	edc3 7a00 	vstr	s15, [r3]
	*rotSpeed =  l_rightSpeed - l_leftSpeed;
 8000ed8:	693a      	ldr	r2, [r7, #16]
 8000eda:	697b      	ldr	r3, [r7, #20]
 8000edc:	1ad3      	subs	r3, r2, r3
 8000ede:	ee07 3a90 	vmov	s15, r3
 8000ee2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000ee6:	683b      	ldr	r3, [r7, #0]
 8000ee8:	edc3 7a00 	vstr	s15, [r3]

	g_oldLeftCount  = l_leftCount ;
 8000eec:	4a06      	ldr	r2, [pc, #24]	; (8000f08 <F_Odometry_Read+0xdc>)
 8000eee:	68fb      	ldr	r3, [r7, #12]
 8000ef0:	6013      	str	r3, [r2, #0]
	g_oldRightCount = l_rightCount;
 8000ef2:	4a06      	ldr	r2, [pc, #24]	; (8000f0c <F_Odometry_Read+0xe0>)
 8000ef4:	68bb      	ldr	r3, [r7, #8]
 8000ef6:	6013      	str	r3, [r2, #0]
	//F_QEI_XYTetaProcessing();
}
 8000ef8:	bf00      	nop
 8000efa:	371c      	adds	r7, #28
 8000efc:	46bd      	mov	sp, r7
 8000efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f02:	4770      	bx	lr
 8000f04:	40000400 	.word	0x40000400
 8000f08:	20004354 	.word	0x20004354
 8000f0c:	20004358 	.word	0x20004358

08000f10 <F_Odometry_Compute>:
	}
}
/*
 * F_Odometry_Compute - Compute the estimate position of the robot from motion capture.
 */
void F_Odometry_Compute(uint32_t period_inTick){
 8000f10:	b580      	push	{r7, lr}
 8000f12:	b084      	sub	sp, #16
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	6078      	str	r0, [r7, #4]
	float l_fwrdSpeed;	// Forward speed
	float l_rotSpeed;	// Angle speed

	F_Odometry_Read(&l_fwrdSpeed,&l_rotSpeed);
 8000f18:	f107 0208 	add.w	r2, r7, #8
 8000f1c:	f107 030c 	add.w	r3, r7, #12
 8000f20:	4611      	mov	r1, r2
 8000f22:	4618      	mov	r0, r3
 8000f24:	f7ff ff82 	bl	8000e2c <F_Odometry_Read>
}
 8000f28:	bf00      	nop
 8000f2a:	3710      	adds	r7, #16
 8000f2c:	46bd      	mov	sp, r7
 8000f2e:	bd80      	pop	{r7, pc}

08000f30 <F_Odometry_printCountersLCD>:
	//printf("RegLeft: %d RegRight: %d \n\r",(int)g_leftCount,(int)g_rightCount);
}
/*
 * F_Odometry_printCountersLCD - Print tick count for each wheel
 */
void F_Odometry_printCountersLCD(void){
 8000f30:	b580      	push	{r7, lr}
 8000f32:	b088      	sub	sp, #32
 8000f34:	af00      	add	r7, sp, #0
	char line1[16];
	char line2[16];
	sprintf(line1,"RegLeft : %5d",(int)g_oldLeftCount);
 8000f36:	4b12      	ldr	r3, [pc, #72]	; (8000f80 <F_Odometry_printCountersLCD+0x50>)
 8000f38:	681a      	ldr	r2, [r3, #0]
 8000f3a:	f107 0310 	add.w	r3, r7, #16
 8000f3e:	4911      	ldr	r1, [pc, #68]	; (8000f84 <F_Odometry_printCountersLCD+0x54>)
 8000f40:	4618      	mov	r0, r3
 8000f42:	f019 ff7d 	bl	801ae40 <siprintf>
	sprintf(line2,"RegRight: %5d",(int)g_oldRightCount);
 8000f46:	4b10      	ldr	r3, [pc, #64]	; (8000f88 <F_Odometry_printCountersLCD+0x58>)
 8000f48:	681a      	ldr	r2, [r3, #0]
 8000f4a:	463b      	mov	r3, r7
 8000f4c:	490f      	ldr	r1, [pc, #60]	; (8000f8c <F_Odometry_printCountersLCD+0x5c>)
 8000f4e:	4618      	mov	r0, r3
 8000f50:	f019 ff76 	bl	801ae40 <siprintf>
	//F_LCD_clear();
	F_LCD_setCursor(0,0);
 8000f54:	2100      	movs	r1, #0
 8000f56:	2000      	movs	r0, #0
 8000f58:	f7ff fe0e 	bl	8000b78 <F_LCD_setCursor>
	F_LCD_printstr(line1);
 8000f5c:	f107 0310 	add.w	r3, r7, #16
 8000f60:	4618      	mov	r0, r3
 8000f62:	f7ff fe6d 	bl	8000c40 <F_LCD_printstr>
	F_LCD_setCursor(0,1);
 8000f66:	2101      	movs	r1, #1
 8000f68:	2000      	movs	r0, #0
 8000f6a:	f7ff fe05 	bl	8000b78 <F_LCD_setCursor>
	F_LCD_printstr(line2);
 8000f6e:	463b      	mov	r3, r7
 8000f70:	4618      	mov	r0, r3
 8000f72:	f7ff fe65 	bl	8000c40 <F_LCD_printstr>
}
 8000f76:	bf00      	nop
 8000f78:	3720      	adds	r7, #32
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	bd80      	pop	{r7, pc}
 8000f7e:	bf00      	nop
 8000f80:	20004354 	.word	0x20004354
 8000f84:	0801be74 	.word	0x0801be74
 8000f88:	20004358 	.word	0x20004358
 8000f8c:	0801be84 	.word	0x0801be84

08000f90 <F_Odometry_RegTask_Handler>:
/*
 * F_Odometry_RegTask_Handler - task in charge of localization based on QEI.
 */
void F_Odometry_RegTask_Handler(void const * argument){
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b086      	sub	sp, #24
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	6078      	str	r0, [r7, #4]
    TickType_t prevTick = 0u;	// Save previous tick
 8000f98:	2300      	movs	r3, #0
 8000f9a:	617b      	str	r3, [r7, #20]
    TickType_t tick = 0u;		// Current tick
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	613b      	str	r3, [r7, #16]

    uint32_t period;

    // 1. Initialize QEI
    F_Odometry_Init();
 8000fa0:	f7ff ff12 	bl	8000dc8 <F_Odometry_Init>

    // 2. Get tick count
    prevTick = osKernelSysTick();
 8000fa4:	f00a f9d3 	bl	800b34e <osKernelSysTick>
 8000fa8:	6178      	str	r0, [r7, #20]

    while(1){
        // 2. Wait until period elapse
    	osDelay(ODO_TECH);
 8000faa:	2005      	movs	r0, #5
 8000fac:	f00a fa2b 	bl	800b406 <osDelay>
    	F_GPIO_SetLed1(TRUE);	// Flag On
 8000fb0:	2000      	movs	r0, #0
 8000fb2:	f000 fafb 	bl	80015ac <F_GPIO_SetLed1>

        // 3. Get tick and compute period
        tick = osKernelSysTick();
 8000fb6:	f00a f9ca 	bl	800b34e <osKernelSysTick>
 8000fba:	6138      	str	r0, [r7, #16]
        period = tick - prevTick;
 8000fbc:	693a      	ldr	r2, [r7, #16]
 8000fbe:	697b      	ldr	r3, [r7, #20]
 8000fc0:	1ad3      	subs	r3, r2, r3
 8000fc2:	60fb      	str	r3, [r7, #12]

        //4. Compute location
        F_Odometry_Compute(period);
 8000fc4:	68f8      	ldr	r0, [r7, #12]
 8000fc6:	f7ff ffa3 	bl	8000f10 <F_Odometry_Compute>

        // 5. Set previous tick
        prevTick = tick;
 8000fca:	693b      	ldr	r3, [r7, #16]
 8000fcc:	617b      	str	r3, [r7, #20]
        F_GPIO_SetLed1(FALSE);	// Flag Off
 8000fce:	2001      	movs	r0, #1
 8000fd0:	f000 faec 	bl	80015ac <F_GPIO_SetLed1>
    	osDelay(ODO_TECH);
 8000fd4:	e7e9      	b.n	8000faa <F_Odometry_RegTask_Handler+0x1a>
	...

08000fd8 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];
  
void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000fd8:	b480      	push	{r7}
 8000fda:	b085      	sub	sp, #20
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	60f8      	str	r0, [r7, #12]
 8000fe0:	60b9      	str	r1, [r7, #8]
 8000fe2:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000fe4:	68fb      	ldr	r3, [r7, #12]
 8000fe6:	4a07      	ldr	r2, [pc, #28]	; (8001004 <vApplicationGetIdleTaskMemory+0x2c>)
 8000fe8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000fea:	68bb      	ldr	r3, [r7, #8]
 8000fec:	4a06      	ldr	r2, [pc, #24]	; (8001008 <vApplicationGetIdleTaskMemory+0x30>)
 8000fee:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	2280      	movs	r2, #128	; 0x80
 8000ff4:	601a      	str	r2, [r3, #0]
  /* place for user code */
}                   
 8000ff6:	bf00      	nop
 8000ff8:	3714      	adds	r7, #20
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001000:	4770      	bx	lr
 8001002:	bf00      	nop
 8001004:	20000208 	.word	0x20000208
 8001008:	2000025c 	.word	0x2000025c

0800100c <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 800100c:	b5b0      	push	{r4, r5, r7, lr}
 800100e:	b0a4      	sub	sp, #144	; 0x90
 8001010:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8001012:	4b30      	ldr	r3, [pc, #192]	; (80010d4 <MX_FREERTOS_Init+0xc8>)
 8001014:	f107 0474 	add.w	r4, r7, #116	; 0x74
 8001018:	461d      	mov	r5, r3
 800101a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800101c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800101e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001022:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8001026:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800102a:	2100      	movs	r1, #0
 800102c:	4618      	mov	r0, r3
 800102e:	f00a f99e 	bl	800b36e <osThreadCreate>
 8001032:	4602      	mov	r2, r0
 8001034:	4b28      	ldr	r3, [pc, #160]	; (80010d8 <MX_FREERTOS_Init+0xcc>)
 8001036:	601a      	str	r2, [r3, #0]

  /* definition and creation of MotionRegTask */
  osThreadDef(MotionRegTask, StartMotionRegTask, osPriorityHigh, 0, 128);
 8001038:	4b28      	ldr	r3, [pc, #160]	; (80010dc <MX_FREERTOS_Init+0xd0>)
 800103a:	f107 0458 	add.w	r4, r7, #88	; 0x58
 800103e:	461d      	mov	r5, r3
 8001040:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001042:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001044:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001048:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  MotionRegTaskHandle = osThreadCreate(osThread(MotionRegTask), NULL);
 800104c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001050:	2100      	movs	r1, #0
 8001052:	4618      	mov	r0, r3
 8001054:	f00a f98b 	bl	800b36e <osThreadCreate>
 8001058:	4602      	mov	r2, r0
 800105a:	4b21      	ldr	r3, [pc, #132]	; (80010e0 <MX_FREERTOS_Init+0xd4>)
 800105c:	601a      	str	r2, [r3, #0]

  /* definition and creation of OdometryRegTask */
  osThreadDef(OdometryRegTask, StartOdometryRegTask, osPriorityRealtime, 0, 128);
 800105e:	4b21      	ldr	r3, [pc, #132]	; (80010e4 <MX_FREERTOS_Init+0xd8>)
 8001060:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 8001064:	461d      	mov	r5, r3
 8001066:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001068:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800106a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800106e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  OdometryRegTaskHandle = osThreadCreate(osThread(OdometryRegTask), NULL);
 8001072:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001076:	2100      	movs	r1, #0
 8001078:	4618      	mov	r0, r3
 800107a:	f00a f978 	bl	800b36e <osThreadCreate>
 800107e:	4602      	mov	r2, r0
 8001080:	4b19      	ldr	r3, [pc, #100]	; (80010e8 <MX_FREERTOS_Init+0xdc>)
 8001082:	601a      	str	r2, [r3, #0]

  /* definition and creation of SensorsTask */
  osThreadDef(SensorsTask, StartSensorsTask, osPriorityNormal, 0, 128);
 8001084:	4b19      	ldr	r3, [pc, #100]	; (80010ec <MX_FREERTOS_Init+0xe0>)
 8001086:	f107 0420 	add.w	r4, r7, #32
 800108a:	461d      	mov	r5, r3
 800108c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800108e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001090:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001094:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  SensorsTaskHandle = osThreadCreate(osThread(SensorsTask), NULL);
 8001098:	f107 0320 	add.w	r3, r7, #32
 800109c:	2100      	movs	r1, #0
 800109e:	4618      	mov	r0, r3
 80010a0:	f00a f965 	bl	800b36e <osThreadCreate>
 80010a4:	4602      	mov	r2, r0
 80010a6:	4b12      	ldr	r3, [pc, #72]	; (80010f0 <MX_FREERTOS_Init+0xe4>)
 80010a8:	601a      	str	r2, [r3, #0]

  /* definition and creation of DebugTask */
  osThreadDef(DebugTask, StartDebugTask, osPriorityNormal, 0, 128);
 80010aa:	4b12      	ldr	r3, [pc, #72]	; (80010f4 <MX_FREERTOS_Init+0xe8>)
 80010ac:	1d3c      	adds	r4, r7, #4
 80010ae:	461d      	mov	r5, r3
 80010b0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80010b2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80010b4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80010b8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  DebugTaskHandle = osThreadCreate(osThread(DebugTask), NULL);
 80010bc:	1d3b      	adds	r3, r7, #4
 80010be:	2100      	movs	r1, #0
 80010c0:	4618      	mov	r0, r3
 80010c2:	f00a f954 	bl	800b36e <osThreadCreate>
 80010c6:	4602      	mov	r2, r0
 80010c8:	4b0b      	ldr	r3, [pc, #44]	; (80010f8 <MX_FREERTOS_Init+0xec>)
 80010ca:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 80010cc:	bf00      	nop
 80010ce:	3790      	adds	r7, #144	; 0x90
 80010d0:	46bd      	mov	sp, r7
 80010d2:	bdb0      	pop	{r4, r5, r7, pc}
 80010d4:	0801bea0 	.word	0x0801bea0
 80010d8:	2000435c 	.word	0x2000435c
 80010dc:	0801becc 	.word	0x0801becc
 80010e0:	2000436c 	.word	0x2000436c
 80010e4:	0801bef8 	.word	0x0801bef8
 80010e8:	20004364 	.word	0x20004364
 80010ec:	0801bf20 	.word	0x0801bf20
 80010f0:	20004368 	.word	0x20004368
 80010f4:	0801bf48 	.word	0x0801bf48
 80010f8:	20004360 	.word	0x20004360

080010fc <StartDefaultTask>:
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b082      	sub	sp, #8
 8001100:	af00      	add	r7, sp, #0
 8001102:	6078      	str	r0, [r7, #4]
  /* init code for LWIP */
  MX_LWIP_Init();
 8001104:	f008 f960 	bl	80093c8 <MX_LWIP_Init>

  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 8001108:	f019 f89a 	bl	801a240 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN StartDefaultTask */
  tcpecho_init();
 800110c:	f7ff fafe 	bl	800070c <tcpecho_init>

  /* Infinite loop */
  for(;;)
  {
	//F_GPIO_ToogleLedRed();
    osDelay(500);
 8001110:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001114:	f00a f977 	bl	800b406 <osDelay>
    F_GPIO_SetLed5(TRUE);	// Flaf OFF
 8001118:	2000      	movs	r0, #0
 800111a:	f000 fad3 	bl	80016c4 <F_GPIO_SetLed5>
    HAL_Delay(2);
 800111e:	2002      	movs	r0, #2
 8001120:	f001 fbd6 	bl	80028d0 <HAL_Delay>
    F_GPIO_SetLed5(FALSE);	// Flaf OFF
 8001124:	2001      	movs	r0, #1
 8001126:	f000 facd 	bl	80016c4 <F_GPIO_SetLed5>
    osDelay(500);
 800112a:	e7f1      	b.n	8001110 <StartDefaultTask+0x14>

0800112c <StartMotionRegTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartMotionRegTask */
void StartMotionRegTask(void const * argument)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	b082      	sub	sp, #8
 8001130:	af00      	add	r7, sp, #0
 8001132:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartMotionRegTask */
	//Init_Motors();
  /* Infinite loop */
  for(;;)
  {
    osDelay(50);
 8001134:	2032      	movs	r0, #50	; 0x32
 8001136:	f00a f966 	bl	800b406 <osDelay>
    F_GPIO_SetLed2(TRUE);	// Flag ON
 800113a:	2000      	movs	r0, #0
 800113c:	f000 fa52 	bl	80015e4 <F_GPIO_SetLed2>
    HAL_Delay(1);
 8001140:	2001      	movs	r0, #1
 8001142:	f001 fbc5 	bl	80028d0 <HAL_Delay>
    F_GPIO_SetLed2(FALSE);	// Flaf OFF
 8001146:	2001      	movs	r0, #1
 8001148:	f000 fa4c 	bl	80015e4 <F_GPIO_SetLed2>
    osDelay(50);
 800114c:	e7f2      	b.n	8001134 <StartMotionRegTask+0x8>

0800114e <StartOdometryRegTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartOdometryRegTask */
void StartOdometryRegTask(void const * argument)
{
 800114e:	b580      	push	{r7, lr}
 8001150:	b082      	sub	sp, #8
 8001152:	af00      	add	r7, sp, #0
 8001154:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartOdometryRegTask */
	F_Odometry_RegTask_Handler(argument);
 8001156:	6878      	ldr	r0, [r7, #4]
 8001158:	f7ff ff1a 	bl	8000f90 <F_Odometry_RegTask_Handler>
  /* Infinite loop */
  for(;;)
  {
    osDelay(10);
 800115c:	200a      	movs	r0, #10
 800115e:	f00a f952 	bl	800b406 <osDelay>
 8001162:	e7fb      	b.n	800115c <StartOdometryRegTask+0xe>

08001164 <StartSensorsTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartSensorsTask */
void StartSensorsTask(void const * argument)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	b082      	sub	sp, #8
 8001168:	af00      	add	r7, sp, #0
 800116a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartSensorsTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(200);
 800116c:	20c8      	movs	r0, #200	; 0xc8
 800116e:	f00a f94a 	bl	800b406 <osDelay>
    F_GPIO_SetLed3(TRUE);	// Flag ON
 8001172:	2000      	movs	r0, #0
 8001174:	f000 fa52 	bl	800161c <F_GPIO_SetLed3>
    HAL_Delay(30);
 8001178:	201e      	movs	r0, #30
 800117a:	f001 fba9 	bl	80028d0 <HAL_Delay>
    F_GPIO_SetLed3(FALSE);
 800117e:	2001      	movs	r0, #1
 8001180:	f000 fa4c 	bl	800161c <F_GPIO_SetLed3>
    osDelay(200);
 8001184:	e7f2      	b.n	800116c <StartSensorsTask+0x8>

08001186 <StartDebugTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartDebugTask */
void StartDebugTask(void const * argument)
{
 8001186:	b580      	push	{r7, lr}
 8001188:	b082      	sub	sp, #8
 800118a:	af00      	add	r7, sp, #0
 800118c:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDebugTask */
	//F_UART_DebugTask_Handler(argument);
	F_LCD_DebugTask_Handler(argument);
 800118e:	6878      	ldr	r0, [r7, #4]
 8001190:	f7ff fdd8 	bl	8000d44 <F_LCD_DebugTask_Handler>
  /* Infinite loop */
  for(;;)
  {
    osDelay(400);
 8001194:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8001198:	f00a f935 	bl	800b406 <osDelay>
 800119c:	e7fa      	b.n	8001194 <StartDebugTask+0xe>
	...

080011a0 <MX_GPIO_Init>:
     PC9   ------> S_TIM8_CH4
     PG9   ------> USART6_RX
     PG14   ------> USART6_TX
*/
void MX_GPIO_Init(void)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	b08e      	sub	sp, #56	; 0x38
 80011a4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011a6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011aa:	2200      	movs	r2, #0
 80011ac:	601a      	str	r2, [r3, #0]
 80011ae:	605a      	str	r2, [r3, #4]
 80011b0:	609a      	str	r2, [r3, #8]
 80011b2:	60da      	str	r2, [r3, #12]
 80011b4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80011b6:	2300      	movs	r3, #0
 80011b8:	623b      	str	r3, [r7, #32]
 80011ba:	4bb3      	ldr	r3, [pc, #716]	; (8001488 <MX_GPIO_Init+0x2e8>)
 80011bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011be:	4ab2      	ldr	r2, [pc, #712]	; (8001488 <MX_GPIO_Init+0x2e8>)
 80011c0:	f043 0310 	orr.w	r3, r3, #16
 80011c4:	6313      	str	r3, [r2, #48]	; 0x30
 80011c6:	4bb0      	ldr	r3, [pc, #704]	; (8001488 <MX_GPIO_Init+0x2e8>)
 80011c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ca:	f003 0310 	and.w	r3, r3, #16
 80011ce:	623b      	str	r3, [r7, #32]
 80011d0:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80011d2:	2300      	movs	r3, #0
 80011d4:	61fb      	str	r3, [r7, #28]
 80011d6:	4bac      	ldr	r3, [pc, #688]	; (8001488 <MX_GPIO_Init+0x2e8>)
 80011d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011da:	4aab      	ldr	r2, [pc, #684]	; (8001488 <MX_GPIO_Init+0x2e8>)
 80011dc:	f043 0304 	orr.w	r3, r3, #4
 80011e0:	6313      	str	r3, [r2, #48]	; 0x30
 80011e2:	4ba9      	ldr	r3, [pc, #676]	; (8001488 <MX_GPIO_Init+0x2e8>)
 80011e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011e6:	f003 0304 	and.w	r3, r3, #4
 80011ea:	61fb      	str	r3, [r7, #28]
 80011ec:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80011ee:	2300      	movs	r3, #0
 80011f0:	61bb      	str	r3, [r7, #24]
 80011f2:	4ba5      	ldr	r3, [pc, #660]	; (8001488 <MX_GPIO_Init+0x2e8>)
 80011f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011f6:	4aa4      	ldr	r2, [pc, #656]	; (8001488 <MX_GPIO_Init+0x2e8>)
 80011f8:	f043 0320 	orr.w	r3, r3, #32
 80011fc:	6313      	str	r3, [r2, #48]	; 0x30
 80011fe:	4ba2      	ldr	r3, [pc, #648]	; (8001488 <MX_GPIO_Init+0x2e8>)
 8001200:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001202:	f003 0320 	and.w	r3, r3, #32
 8001206:	61bb      	str	r3, [r7, #24]
 8001208:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800120a:	2300      	movs	r3, #0
 800120c:	617b      	str	r3, [r7, #20]
 800120e:	4b9e      	ldr	r3, [pc, #632]	; (8001488 <MX_GPIO_Init+0x2e8>)
 8001210:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001212:	4a9d      	ldr	r2, [pc, #628]	; (8001488 <MX_GPIO_Init+0x2e8>)
 8001214:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001218:	6313      	str	r3, [r2, #48]	; 0x30
 800121a:	4b9b      	ldr	r3, [pc, #620]	; (8001488 <MX_GPIO_Init+0x2e8>)
 800121c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800121e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001222:	617b      	str	r3, [r7, #20]
 8001224:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001226:	2300      	movs	r3, #0
 8001228:	613b      	str	r3, [r7, #16]
 800122a:	4b97      	ldr	r3, [pc, #604]	; (8001488 <MX_GPIO_Init+0x2e8>)
 800122c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800122e:	4a96      	ldr	r2, [pc, #600]	; (8001488 <MX_GPIO_Init+0x2e8>)
 8001230:	f043 0301 	orr.w	r3, r3, #1
 8001234:	6313      	str	r3, [r2, #48]	; 0x30
 8001236:	4b94      	ldr	r3, [pc, #592]	; (8001488 <MX_GPIO_Init+0x2e8>)
 8001238:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800123a:	f003 0301 	and.w	r3, r3, #1
 800123e:	613b      	str	r3, [r7, #16]
 8001240:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001242:	2300      	movs	r3, #0
 8001244:	60fb      	str	r3, [r7, #12]
 8001246:	4b90      	ldr	r3, [pc, #576]	; (8001488 <MX_GPIO_Init+0x2e8>)
 8001248:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800124a:	4a8f      	ldr	r2, [pc, #572]	; (8001488 <MX_GPIO_Init+0x2e8>)
 800124c:	f043 0302 	orr.w	r3, r3, #2
 8001250:	6313      	str	r3, [r2, #48]	; 0x30
 8001252:	4b8d      	ldr	r3, [pc, #564]	; (8001488 <MX_GPIO_Init+0x2e8>)
 8001254:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001256:	f003 0302 	and.w	r3, r3, #2
 800125a:	60fb      	str	r3, [r7, #12]
 800125c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800125e:	2300      	movs	r3, #0
 8001260:	60bb      	str	r3, [r7, #8]
 8001262:	4b89      	ldr	r3, [pc, #548]	; (8001488 <MX_GPIO_Init+0x2e8>)
 8001264:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001266:	4a88      	ldr	r2, [pc, #544]	; (8001488 <MX_GPIO_Init+0x2e8>)
 8001268:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800126c:	6313      	str	r3, [r2, #48]	; 0x30
 800126e:	4b86      	ldr	r3, [pc, #536]	; (8001488 <MX_GPIO_Init+0x2e8>)
 8001270:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001272:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001276:	60bb      	str	r3, [r7, #8]
 8001278:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800127a:	2300      	movs	r3, #0
 800127c:	607b      	str	r3, [r7, #4]
 800127e:	4b82      	ldr	r3, [pc, #520]	; (8001488 <MX_GPIO_Init+0x2e8>)
 8001280:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001282:	4a81      	ldr	r2, [pc, #516]	; (8001488 <MX_GPIO_Init+0x2e8>)
 8001284:	f043 0308 	orr.w	r3, r3, #8
 8001288:	6313      	str	r3, [r2, #48]	; 0x30
 800128a:	4b7f      	ldr	r3, [pc, #508]	; (8001488 <MX_GPIO_Init+0x2e8>)
 800128c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800128e:	f003 0308 	and.w	r3, r3, #8
 8001292:	607b      	str	r3, [r7, #4]
 8001294:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, XSHUNT_5_Pin|XSHUNT_4_Pin|XSHUNT_1_Pin|M2_DIR_Pin 
 8001296:	2200      	movs	r2, #0
 8001298:	f247 4130 	movw	r1, #29744	; 0x7430
 800129c:	487b      	ldr	r0, [pc, #492]	; (800148c <MX_GPIO_Init+0x2ec>)
 800129e:	f002 fdf9 	bl	8003e94 <HAL_GPIO_WritePin>
                          |M1_DIR_Pin|ENABLE_MOTORS_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_3_GPIO_Port, LED_3_Pin, GPIO_PIN_RESET);
 80012a2:	2200      	movs	r2, #0
 80012a4:	2108      	movs	r1, #8
 80012a6:	487a      	ldr	r0, [pc, #488]	; (8001490 <MX_GPIO_Init+0x2f0>)
 80012a8:	f002 fdf4 	bl	8003e94 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LED_4_Pin|LD3_Pin|LED_1_Pin 
 80012ac:	2200      	movs	r2, #0
 80012ae:	f244 41c1 	movw	r1, #17601	; 0x44c1
 80012b2:	4878      	ldr	r0, [pc, #480]	; (8001494 <MX_GPIO_Init+0x2f4>)
 80012b4:	f002 fdee 	bl	8003e94 <HAL_GPIO_WritePin>
                          |LD2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, XSHUNT_2_Pin|XSHUNT_6_Pin|LED_2_Pin, GPIO_PIN_RESET);
 80012b8:	2200      	movs	r2, #0
 80012ba:	f44f 61b0 	mov.w	r1, #1408	; 0x580
 80012be:	4876      	ldr	r0, [pc, #472]	; (8001498 <MX_GPIO_Init+0x2f8>)
 80012c0:	f002 fde8 	bl	8003e94 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_5_GPIO_Port, LED_5_Pin, GPIO_PIN_RESET);
 80012c4:	2200      	movs	r2, #0
 80012c6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80012ca:	4874      	ldr	r0, [pc, #464]	; (800149c <MX_GPIO_Init+0x2fc>)
 80012cc:	f002 fde2 	bl	8003e94 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, USB_PowerSwitchOn_Pin|XSHUNT_3_Pin, GPIO_PIN_RESET);
 80012d0:	2200      	movs	r2, #0
 80012d2:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80012d6:	4872      	ldr	r0, [pc, #456]	; (80014a0 <MX_GPIO_Init+0x300>)
 80012d8:	f002 fddc 	bl	8003e94 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE2 PE4 PE5 PE6 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 80012dc:	2374      	movs	r3, #116	; 0x74
 80012de:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012e0:	2302      	movs	r3, #2
 80012e2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012e4:	2300      	movs	r3, #0
 80012e6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012e8:	2303      	movs	r3, #3
 80012ea:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 80012ec:	2305      	movs	r3, #5
 80012ee:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80012f0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012f4:	4619      	mov	r1, r3
 80012f6:	4868      	ldr	r0, [pc, #416]	; (8001498 <MX_GPIO_Init+0x2f8>)
 80012f8:	f002 fc22 	bl	8003b40 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 80012fc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001300:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001302:	4b68      	ldr	r3, [pc, #416]	; (80014a4 <MX_GPIO_Init+0x304>)
 8001304:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001306:	2300      	movs	r3, #0
 8001308:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 800130a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800130e:	4619      	mov	r1, r3
 8001310:	4865      	ldr	r0, [pc, #404]	; (80014a8 <MX_GPIO_Init+0x308>)
 8001312:	f002 fc15 	bl	8003b40 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = M1_FB_Pin;
 8001316:	2308      	movs	r3, #8
 8001318:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800131a:	2303      	movs	r3, #3
 800131c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800131e:	2300      	movs	r3, #0
 8001320:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(M1_FB_GPIO_Port, &GPIO_InitStruct);
 8001322:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001326:	4619      	mov	r1, r3
 8001328:	4858      	ldr	r0, [pc, #352]	; (800148c <MX_GPIO_Init+0x2ec>)
 800132a:	f002 fc09 	bl	8003b40 <HAL_GPIO_Init>

  /*Configure GPIO pins : PFPin PFPin PFPin PFPin 
                           PFPin PFPin */
  GPIO_InitStruct.Pin = XSHUNT_5_Pin|XSHUNT_4_Pin|XSHUNT_1_Pin|M2_DIR_Pin 
 800132e:	f247 4330 	movw	r3, #29744	; 0x7430
 8001332:	627b      	str	r3, [r7, #36]	; 0x24
                          |M1_DIR_Pin|ENABLE_MOTORS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001334:	2301      	movs	r3, #1
 8001336:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001338:	2300      	movs	r3, #0
 800133a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800133c:	2300      	movs	r3, #0
 800133e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001340:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001344:	4619      	mov	r1, r3
 8001346:	4851      	ldr	r0, [pc, #324]	; (800148c <MX_GPIO_Init+0x2ec>)
 8001348:	f002 fbfa 	bl	8003b40 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_3_Pin;
 800134c:	2308      	movs	r3, #8
 800134e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001350:	2301      	movs	r3, #1
 8001352:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001354:	2300      	movs	r3, #0
 8001356:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001358:	2300      	movs	r3, #0
 800135a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LED_3_GPIO_Port, &GPIO_InitStruct);
 800135c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001360:	4619      	mov	r1, r3
 8001362:	484b      	ldr	r0, [pc, #300]	; (8001490 <MX_GPIO_Init+0x2f0>)
 8001364:	f002 fbec 	bl	8003b40 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = TIRETTE_Pin|M_SF_Pin;
 8001368:	2360      	movs	r3, #96	; 0x60
 800136a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800136c:	2300      	movs	r3, #0
 800136e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001370:	2300      	movs	r3, #0
 8001372:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001374:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001378:	4619      	mov	r1, r3
 800137a:	4845      	ldr	r0, [pc, #276]	; (8001490 <MX_GPIO_Init+0x2f0>)
 800137c:	f002 fbe0 	bl	8003b40 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin 
                           PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LED_4_Pin|LD3_Pin|LED_1_Pin 
 8001380:	f244 43c1 	movw	r3, #17601	; 0x44c1
 8001384:	627b      	str	r3, [r7, #36]	; 0x24
                          |LD2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001386:	2301      	movs	r3, #1
 8001388:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800138a:	2300      	movs	r3, #0
 800138c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800138e:	2300      	movs	r3, #0
 8001390:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001392:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001396:	4619      	mov	r1, r3
 8001398:	483e      	ldr	r0, [pc, #248]	; (8001494 <MX_GPIO_Init+0x2f4>)
 800139a:	f002 fbd1 	bl	8003b40 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = M2_FB_Pin;
 800139e:	2302      	movs	r3, #2
 80013a0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80013a2:	2303      	movs	r3, #3
 80013a4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013a6:	2300      	movs	r3, #0
 80013a8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(M2_FB_GPIO_Port, &GPIO_InitStruct);
 80013aa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013ae:	4619      	mov	r1, r3
 80013b0:	4838      	ldr	r0, [pc, #224]	; (8001494 <MX_GPIO_Init+0x2f4>)
 80013b2:	f002 fbc5 	bl	8003b40 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = CONTACT_4_Pin|USB_OverCurrent_Pin;
 80013b6:	2381      	movs	r3, #129	; 0x81
 80013b8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80013ba:	2300      	movs	r3, #0
 80013bc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013be:	2300      	movs	r3, #0
 80013c0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80013c2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013c6:	4619      	mov	r1, r3
 80013c8:	4835      	ldr	r0, [pc, #212]	; (80014a0 <MX_GPIO_Init+0x300>)
 80013ca:	f002 fbb9 	bl	8003b40 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = XSHUNT_2_Pin|XSHUNT_6_Pin|LED_2_Pin;
 80013ce:	f44f 63b0 	mov.w	r3, #1408	; 0x580
 80013d2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013d4:	2301      	movs	r3, #1
 80013d6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013d8:	2300      	movs	r3, #0
 80013da:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013dc:	2300      	movs	r3, #0
 80013de:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80013e0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013e4:	4619      	mov	r1, r3
 80013e6:	482c      	ldr	r0, [pc, #176]	; (8001498 <MX_GPIO_Init+0x2f8>)
 80013e8:	f002 fbaa 	bl	8003b40 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = PWM_SERVO_5_Pin|PWM_SERVO_6_Pin|PWM_SERVO_7_Pin|PWM_SERVO_8_Pin;
 80013ec:	f44f 43d4 	mov.w	r3, #27136	; 0x6a00
 80013f0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013f2:	2302      	movs	r3, #2
 80013f4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013f6:	2300      	movs	r3, #0
 80013f8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013fa:	2300      	movs	r3, #0
 80013fc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80013fe:	2301      	movs	r3, #1
 8001400:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001402:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001406:	4619      	mov	r1, r3
 8001408:	4823      	ldr	r0, [pc, #140]	; (8001498 <MX_GPIO_Init+0x2f8>)
 800140a:	f002 fb99 	bl	8003b40 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_5_Pin;
 800140e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001412:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001414:	2301      	movs	r3, #1
 8001416:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001418:	2300      	movs	r3, #0
 800141a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800141c:	2300      	movs	r3, #0
 800141e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LED_5_GPIO_Port, &GPIO_InitStruct);
 8001420:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001424:	4619      	mov	r1, r3
 8001426:	481d      	ldr	r0, [pc, #116]	; (800149c <MX_GPIO_Init+0x2fc>)
 8001428:	f002 fb8a 	bl	8003b40 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin|XSHUNT_3_Pin;
 800142c:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8001430:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001432:	2301      	movs	r3, #1
 8001434:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001436:	2300      	movs	r3, #0
 8001438:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800143a:	2300      	movs	r3, #0
 800143c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800143e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001442:	4619      	mov	r1, r3
 8001444:	4816      	ldr	r0, [pc, #88]	; (80014a0 <MX_GPIO_Init+0x300>)
 8001446:	f002 fb7b 	bl	8003b40 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = PWM_SERVO_1_Pin|PWM_SERVO_2_Pin|PWM_SERVO_3_Pin|PWM_SERVO_4_Pin;
 800144a:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 800144e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001450:	2302      	movs	r3, #2
 8001452:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001454:	2300      	movs	r3, #0
 8001456:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001458:	2300      	movs	r3, #0
 800145a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 800145c:	2303      	movs	r3, #3
 800145e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001460:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001464:	4619      	mov	r1, r3
 8001466:	4810      	ldr	r0, [pc, #64]	; (80014a8 <MX_GPIO_Init+0x308>)
 8001468:	f002 fb6a 	bl	8003b40 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = CONTACT_5_Pin|CONTACT_1_Pin|CONTACT_2_Pin|CONTACT_3_Pin;
 800146c:	23b1      	movs	r3, #177	; 0xb1
 800146e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001470:	2300      	movs	r3, #0
 8001472:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001474:	2300      	movs	r3, #0
 8001476:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001478:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800147c:	4619      	mov	r1, r3
 800147e:	4807      	ldr	r0, [pc, #28]	; (800149c <MX_GPIO_Init+0x2fc>)
 8001480:	f002 fb5e 	bl	8003b40 <HAL_GPIO_Init>
 8001484:	e012      	b.n	80014ac <MX_GPIO_Init+0x30c>
 8001486:	bf00      	nop
 8001488:	40023800 	.word	0x40023800
 800148c:	40021400 	.word	0x40021400
 8001490:	40020000 	.word	0x40020000
 8001494:	40020400 	.word	0x40020400
 8001498:	40021000 	.word	0x40021000
 800149c:	40020c00 	.word	0x40020c00
 80014a0:	40021800 	.word	0x40021800
 80014a4:	10110000 	.word	0x10110000
 80014a8:	40020800 	.word	0x40020800

  /*Configure GPIO pins : PG9 PG14 */
  GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_14;
 80014ac:	f44f 4384 	mov.w	r3, #16896	; 0x4200
 80014b0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014b2:	2302      	movs	r3, #2
 80014b4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014b6:	2300      	movs	r3, #0
 80014b8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014ba:	2303      	movs	r3, #3
 80014bc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 80014be:	2308      	movs	r3, #8
 80014c0:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80014c2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014c6:	4619      	mov	r1, r3
 80014c8:	4809      	ldr	r0, [pc, #36]	; (80014f0 <MX_GPIO_Init+0x350>)
 80014ca:	f002 fb39 	bl	8003b40 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CONTACT_6_Pin;
 80014ce:	2302      	movs	r3, #2
 80014d0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80014d2:	2300      	movs	r3, #0
 80014d4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014d6:	2300      	movs	r3, #0
 80014d8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CONTACT_6_GPIO_Port, &GPIO_InitStruct);
 80014da:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014de:	4619      	mov	r1, r3
 80014e0:	4804      	ldr	r0, [pc, #16]	; (80014f4 <MX_GPIO_Init+0x354>)
 80014e2:	f002 fb2d 	bl	8003b40 <HAL_GPIO_Init>

}
 80014e6:	bf00      	nop
 80014e8:	3738      	adds	r7, #56	; 0x38
 80014ea:	46bd      	mov	sp, r7
 80014ec:	bd80      	pop	{r7, pc}
 80014ee:	bf00      	nop
 80014f0:	40021800 	.word	0x40021800
 80014f4:	40021000 	.word	0x40021000

080014f8 <F_GPIO_setLedRed>:
		GPIOB->ODR |= LED_RED;
	}
}

void F_GPIO_setLedRed(uint8_t state)
{
 80014f8:	b480      	push	{r7}
 80014fa:	b083      	sub	sp, #12
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	4603      	mov	r3, r0
 8001500:	71fb      	strb	r3, [r7, #7]

	if(state == 1)
 8001502:	79fb      	ldrb	r3, [r7, #7]
 8001504:	2b01      	cmp	r3, #1
 8001506:	d106      	bne.n	8001516 <F_GPIO_setLedRed+0x1e>
	{
		GPIOB->ODR |= LED_RED;
 8001508:	4b09      	ldr	r3, [pc, #36]	; (8001530 <F_GPIO_setLedRed+0x38>)
 800150a:	695b      	ldr	r3, [r3, #20]
 800150c:	4a08      	ldr	r2, [pc, #32]	; (8001530 <F_GPIO_setLedRed+0x38>)
 800150e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001512:	6153      	str	r3, [r2, #20]
	}
	else
	{
		GPIOB->ODR &= ~LED_RED;
	}
}
 8001514:	e005      	b.n	8001522 <F_GPIO_setLedRed+0x2a>
		GPIOB->ODR &= ~LED_RED;
 8001516:	4b06      	ldr	r3, [pc, #24]	; (8001530 <F_GPIO_setLedRed+0x38>)
 8001518:	695b      	ldr	r3, [r3, #20]
 800151a:	4a05      	ldr	r2, [pc, #20]	; (8001530 <F_GPIO_setLedRed+0x38>)
 800151c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001520:	6153      	str	r3, [r2, #20]
}
 8001522:	bf00      	nop
 8001524:	370c      	adds	r7, #12
 8001526:	46bd      	mov	sp, r7
 8001528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800152c:	4770      	bx	lr
 800152e:	bf00      	nop
 8001530:	40020400 	.word	0x40020400

08001534 <F_GPIO_setLedBlue>:

void F_GPIO_setLedBlue(uint8_t state)
{
 8001534:	b480      	push	{r7}
 8001536:	b083      	sub	sp, #12
 8001538:	af00      	add	r7, sp, #0
 800153a:	4603      	mov	r3, r0
 800153c:	71fb      	strb	r3, [r7, #7]

	if(state == 1)
 800153e:	79fb      	ldrb	r3, [r7, #7]
 8001540:	2b01      	cmp	r3, #1
 8001542:	d106      	bne.n	8001552 <F_GPIO_setLedBlue+0x1e>
	{
		GPIOB->ODR |= LED_BLUE;
 8001544:	4b09      	ldr	r3, [pc, #36]	; (800156c <F_GPIO_setLedBlue+0x38>)
 8001546:	695b      	ldr	r3, [r3, #20]
 8001548:	4a08      	ldr	r2, [pc, #32]	; (800156c <F_GPIO_setLedBlue+0x38>)
 800154a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800154e:	6153      	str	r3, [r2, #20]
	}
	else
	{
		GPIOB->ODR &= ~LED_BLUE;
	}
}
 8001550:	e005      	b.n	800155e <F_GPIO_setLedBlue+0x2a>
		GPIOB->ODR &= ~LED_BLUE;
 8001552:	4b06      	ldr	r3, [pc, #24]	; (800156c <F_GPIO_setLedBlue+0x38>)
 8001554:	695b      	ldr	r3, [r3, #20]
 8001556:	4a05      	ldr	r2, [pc, #20]	; (800156c <F_GPIO_setLedBlue+0x38>)
 8001558:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800155c:	6153      	str	r3, [r2, #20]
}
 800155e:	bf00      	nop
 8001560:	370c      	adds	r7, #12
 8001562:	46bd      	mov	sp, r7
 8001564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001568:	4770      	bx	lr
 800156a:	bf00      	nop
 800156c:	40020400 	.word	0x40020400

08001570 <F_GPIO_setLedGreen>:

void F_GPIO_setLedGreen(uint8_t state)
{
 8001570:	b480      	push	{r7}
 8001572:	b083      	sub	sp, #12
 8001574:	af00      	add	r7, sp, #0
 8001576:	4603      	mov	r3, r0
 8001578:	71fb      	strb	r3, [r7, #7]

	if(state == 1)
 800157a:	79fb      	ldrb	r3, [r7, #7]
 800157c:	2b01      	cmp	r3, #1
 800157e:	d106      	bne.n	800158e <F_GPIO_setLedGreen+0x1e>
	{
		GPIOB->ODR |= LED_GREEN;
 8001580:	4b09      	ldr	r3, [pc, #36]	; (80015a8 <F_GPIO_setLedGreen+0x38>)
 8001582:	695b      	ldr	r3, [r3, #20]
 8001584:	4a08      	ldr	r2, [pc, #32]	; (80015a8 <F_GPIO_setLedGreen+0x38>)
 8001586:	f043 0301 	orr.w	r3, r3, #1
 800158a:	6153      	str	r3, [r2, #20]
	}
	else
	{
		GPIOB->ODR &= ~LED_GREEN;
	}
}
 800158c:	e005      	b.n	800159a <F_GPIO_setLedGreen+0x2a>
		GPIOB->ODR &= ~LED_GREEN;
 800158e:	4b06      	ldr	r3, [pc, #24]	; (80015a8 <F_GPIO_setLedGreen+0x38>)
 8001590:	695b      	ldr	r3, [r3, #20]
 8001592:	4a05      	ldr	r2, [pc, #20]	; (80015a8 <F_GPIO_setLedGreen+0x38>)
 8001594:	f023 0301 	bic.w	r3, r3, #1
 8001598:	6153      	str	r3, [r2, #20]
}
 800159a:	bf00      	nop
 800159c:	370c      	adds	r7, #12
 800159e:	46bd      	mov	sp, r7
 80015a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a4:	4770      	bx	lr
 80015a6:	bf00      	nop
 80015a8:	40020400 	.word	0x40020400

080015ac <F_GPIO_SetLed1>:

void F_GPIO_PrintCode(int from0to31){
	// TODO
}
void F_GPIO_SetLed1(int boul){
 80015ac:	b480      	push	{r7}
 80015ae:	b083      	sub	sp, #12
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	6078      	str	r0, [r7, #4]
	if(boul != TRUE){
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d006      	beq.n	80015c8 <F_GPIO_SetLed1+0x1c>
		LED_1_GPIO_Port->ODR &= ~LED_1_Pin;
 80015ba:	4b09      	ldr	r3, [pc, #36]	; (80015e0 <F_GPIO_SetLed1+0x34>)
 80015bc:	695b      	ldr	r3, [r3, #20]
 80015be:	4a08      	ldr	r2, [pc, #32]	; (80015e0 <F_GPIO_SetLed1+0x34>)
 80015c0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80015c4:	6153      	str	r3, [r2, #20]
	}else{
		LED_1_GPIO_Port->ODR |= LED_1_Pin;
	}
}
 80015c6:	e005      	b.n	80015d4 <F_GPIO_SetLed1+0x28>
		LED_1_GPIO_Port->ODR |= LED_1_Pin;
 80015c8:	4b05      	ldr	r3, [pc, #20]	; (80015e0 <F_GPIO_SetLed1+0x34>)
 80015ca:	695b      	ldr	r3, [r3, #20]
 80015cc:	4a04      	ldr	r2, [pc, #16]	; (80015e0 <F_GPIO_SetLed1+0x34>)
 80015ce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80015d2:	6153      	str	r3, [r2, #20]
}
 80015d4:	bf00      	nop
 80015d6:	370c      	adds	r7, #12
 80015d8:	46bd      	mov	sp, r7
 80015da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015de:	4770      	bx	lr
 80015e0:	40020400 	.word	0x40020400

080015e4 <F_GPIO_SetLed2>:
		LED_1_GPIO_Port->ODR &= ~LED_1_Pin;
	}else{
		LED_1_GPIO_Port->ODR |= LED_1_Pin;
	}
}
void F_GPIO_SetLed2(int boul){
 80015e4:	b480      	push	{r7}
 80015e6:	b083      	sub	sp, #12
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	6078      	str	r0, [r7, #4]
	if(boul != TRUE){
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d006      	beq.n	8001600 <F_GPIO_SetLed2+0x1c>
		LED_4_GPIO_Port->ODR &= ~LED_4_Pin;
 80015f2:	4b09      	ldr	r3, [pc, #36]	; (8001618 <F_GPIO_SetLed2+0x34>)
 80015f4:	695b      	ldr	r3, [r3, #20]
 80015f6:	4a08      	ldr	r2, [pc, #32]	; (8001618 <F_GPIO_SetLed2+0x34>)
 80015f8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80015fc:	6153      	str	r3, [r2, #20]
	}else{
		LED_4_GPIO_Port->ODR |= LED_4_Pin;
	}
}
 80015fe:	e005      	b.n	800160c <F_GPIO_SetLed2+0x28>
		LED_4_GPIO_Port->ODR |= LED_4_Pin;
 8001600:	4b05      	ldr	r3, [pc, #20]	; (8001618 <F_GPIO_SetLed2+0x34>)
 8001602:	695b      	ldr	r3, [r3, #20]
 8001604:	4a04      	ldr	r2, [pc, #16]	; (8001618 <F_GPIO_SetLed2+0x34>)
 8001606:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800160a:	6153      	str	r3, [r2, #20]
}
 800160c:	bf00      	nop
 800160e:	370c      	adds	r7, #12
 8001610:	46bd      	mov	sp, r7
 8001612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001616:	4770      	bx	lr
 8001618:	40020400 	.word	0x40020400

0800161c <F_GPIO_SetLed3>:
		LED_4_GPIO_Port->ODR &= ~LED_4_Pin;
	}else{
		LED_4_GPIO_Port->ODR |= LED_4_Pin;
	}
}
void F_GPIO_SetLed3(int boul){
 800161c:	b480      	push	{r7}
 800161e:	b083      	sub	sp, #12
 8001620:	af00      	add	r7, sp, #0
 8001622:	6078      	str	r0, [r7, #4]
	if(boul != TRUE){
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	2b00      	cmp	r3, #0
 8001628:	d006      	beq.n	8001638 <F_GPIO_SetLed3+0x1c>
		LED_3_GPIO_Port->ODR &= ~LED_3_Pin;
 800162a:	4b09      	ldr	r3, [pc, #36]	; (8001650 <F_GPIO_SetLed3+0x34>)
 800162c:	695b      	ldr	r3, [r3, #20]
 800162e:	4a08      	ldr	r2, [pc, #32]	; (8001650 <F_GPIO_SetLed3+0x34>)
 8001630:	f023 0308 	bic.w	r3, r3, #8
 8001634:	6153      	str	r3, [r2, #20]
	}else{
		LED_3_GPIO_Port->ODR |= LED_3_Pin;
	}
}
 8001636:	e005      	b.n	8001644 <F_GPIO_SetLed3+0x28>
		LED_3_GPIO_Port->ODR |= LED_3_Pin;
 8001638:	4b05      	ldr	r3, [pc, #20]	; (8001650 <F_GPIO_SetLed3+0x34>)
 800163a:	695b      	ldr	r3, [r3, #20]
 800163c:	4a04      	ldr	r2, [pc, #16]	; (8001650 <F_GPIO_SetLed3+0x34>)
 800163e:	f043 0308 	orr.w	r3, r3, #8
 8001642:	6153      	str	r3, [r2, #20]
}
 8001644:	bf00      	nop
 8001646:	370c      	adds	r7, #12
 8001648:	46bd      	mov	sp, r7
 800164a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800164e:	4770      	bx	lr
 8001650:	40020000 	.word	0x40020000

08001654 <F_GPIO_ToogleLed3>:
void F_GPIO_ToogleLed3(void){
 8001654:	b480      	push	{r7}
 8001656:	af00      	add	r7, sp, #0
	if((LED_3_GPIO_Port->ODR & LED_3_Pin) > 0){
 8001658:	4b0b      	ldr	r3, [pc, #44]	; (8001688 <F_GPIO_ToogleLed3+0x34>)
 800165a:	695b      	ldr	r3, [r3, #20]
 800165c:	f003 0308 	and.w	r3, r3, #8
 8001660:	2b00      	cmp	r3, #0
 8001662:	d006      	beq.n	8001672 <F_GPIO_ToogleLed3+0x1e>
		LED_3_GPIO_Port->ODR &= ~LED_3_Pin;
 8001664:	4b08      	ldr	r3, [pc, #32]	; (8001688 <F_GPIO_ToogleLed3+0x34>)
 8001666:	695b      	ldr	r3, [r3, #20]
 8001668:	4a07      	ldr	r2, [pc, #28]	; (8001688 <F_GPIO_ToogleLed3+0x34>)
 800166a:	f023 0308 	bic.w	r3, r3, #8
 800166e:	6153      	str	r3, [r2, #20]
	}else{
		LED_3_GPIO_Port->ODR |= LED_3_Pin;
	}
}
 8001670:	e005      	b.n	800167e <F_GPIO_ToogleLed3+0x2a>
		LED_3_GPIO_Port->ODR |= LED_3_Pin;
 8001672:	4b05      	ldr	r3, [pc, #20]	; (8001688 <F_GPIO_ToogleLed3+0x34>)
 8001674:	695b      	ldr	r3, [r3, #20]
 8001676:	4a04      	ldr	r2, [pc, #16]	; (8001688 <F_GPIO_ToogleLed3+0x34>)
 8001678:	f043 0308 	orr.w	r3, r3, #8
 800167c:	6153      	str	r3, [r2, #20]
}
 800167e:	bf00      	nop
 8001680:	46bd      	mov	sp, r7
 8001682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001686:	4770      	bx	lr
 8001688:	40020000 	.word	0x40020000

0800168c <F_GPIO_SetLed4>:
void F_GPIO_SetLed4(int boul){
 800168c:	b480      	push	{r7}
 800168e:	b083      	sub	sp, #12
 8001690:	af00      	add	r7, sp, #0
 8001692:	6078      	str	r0, [r7, #4]
	if(boul != TRUE){
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	2b00      	cmp	r3, #0
 8001698:	d006      	beq.n	80016a8 <F_GPIO_SetLed4+0x1c>
		LED_5_GPIO_Port->ODR &= ~LED_5_Pin;
 800169a:	4b09      	ldr	r3, [pc, #36]	; (80016c0 <F_GPIO_SetLed4+0x34>)
 800169c:	695b      	ldr	r3, [r3, #20]
 800169e:	4a08      	ldr	r2, [pc, #32]	; (80016c0 <F_GPIO_SetLed4+0x34>)
 80016a0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80016a4:	6153      	str	r3, [r2, #20]
	}else{
		LED_5_GPIO_Port->ODR |= LED_5_Pin;
	}
}
 80016a6:	e005      	b.n	80016b4 <F_GPIO_SetLed4+0x28>
		LED_5_GPIO_Port->ODR |= LED_5_Pin;
 80016a8:	4b05      	ldr	r3, [pc, #20]	; (80016c0 <F_GPIO_SetLed4+0x34>)
 80016aa:	695b      	ldr	r3, [r3, #20]
 80016ac:	4a04      	ldr	r2, [pc, #16]	; (80016c0 <F_GPIO_SetLed4+0x34>)
 80016ae:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80016b2:	6153      	str	r3, [r2, #20]
}
 80016b4:	bf00      	nop
 80016b6:	370c      	adds	r7, #12
 80016b8:	46bd      	mov	sp, r7
 80016ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016be:	4770      	bx	lr
 80016c0:	40020c00 	.word	0x40020c00

080016c4 <F_GPIO_SetLed5>:
		LED_5_GPIO_Port->ODR &= ~LED_5_Pin;
	}else{
		LED_5_GPIO_Port->ODR |= LED_5_Pin;
	}
}
void F_GPIO_SetLed5(int boul){
 80016c4:	b480      	push	{r7}
 80016c6:	b083      	sub	sp, #12
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	6078      	str	r0, [r7, #4]
	if(boul != TRUE){
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d006      	beq.n	80016e0 <F_GPIO_SetLed5+0x1c>
		LED_2_GPIO_Port->ODR &= ~LED_2_Pin;
 80016d2:	4b09      	ldr	r3, [pc, #36]	; (80016f8 <F_GPIO_SetLed5+0x34>)
 80016d4:	695b      	ldr	r3, [r3, #20]
 80016d6:	4a08      	ldr	r2, [pc, #32]	; (80016f8 <F_GPIO_SetLed5+0x34>)
 80016d8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80016dc:	6153      	str	r3, [r2, #20]
	}else{
		LED_2_GPIO_Port->ODR |= LED_2_Pin;
	}
}
 80016de:	e005      	b.n	80016ec <F_GPIO_SetLed5+0x28>
		LED_2_GPIO_Port->ODR |= LED_2_Pin;
 80016e0:	4b05      	ldr	r3, [pc, #20]	; (80016f8 <F_GPIO_SetLed5+0x34>)
 80016e2:	695b      	ldr	r3, [r3, #20]
 80016e4:	4a04      	ldr	r2, [pc, #16]	; (80016f8 <F_GPIO_SetLed5+0x34>)
 80016e6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80016ea:	6153      	str	r3, [r2, #20]
}
 80016ec:	bf00      	nop
 80016ee:	370c      	adds	r7, #12
 80016f0:	46bd      	mov	sp, r7
 80016f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f6:	4770      	bx	lr
 80016f8:	40021000 	.word	0x40021000

080016fc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80016fc:	b480      	push	{r7}
 80016fe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001700:	4b04      	ldr	r3, [pc, #16]	; (8001714 <__NVIC_GetPriorityGrouping+0x18>)
 8001702:	68db      	ldr	r3, [r3, #12]
 8001704:	0a1b      	lsrs	r3, r3, #8
 8001706:	f003 0307 	and.w	r3, r3, #7
}
 800170a:	4618      	mov	r0, r3
 800170c:	46bd      	mov	sp, r7
 800170e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001712:	4770      	bx	lr
 8001714:	e000ed00 	.word	0xe000ed00

08001718 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001718:	b480      	push	{r7}
 800171a:	b083      	sub	sp, #12
 800171c:	af00      	add	r7, sp, #0
 800171e:	4603      	mov	r3, r0
 8001720:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001722:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001726:	2b00      	cmp	r3, #0
 8001728:	db0b      	blt.n	8001742 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800172a:	79fb      	ldrb	r3, [r7, #7]
 800172c:	f003 021f 	and.w	r2, r3, #31
 8001730:	4907      	ldr	r1, [pc, #28]	; (8001750 <__NVIC_EnableIRQ+0x38>)
 8001732:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001736:	095b      	lsrs	r3, r3, #5
 8001738:	2001      	movs	r0, #1
 800173a:	fa00 f202 	lsl.w	r2, r0, r2
 800173e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001742:	bf00      	nop
 8001744:	370c      	adds	r7, #12
 8001746:	46bd      	mov	sp, r7
 8001748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800174c:	4770      	bx	lr
 800174e:	bf00      	nop
 8001750:	e000e100 	.word	0xe000e100

08001754 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001754:	b480      	push	{r7}
 8001756:	b083      	sub	sp, #12
 8001758:	af00      	add	r7, sp, #0
 800175a:	4603      	mov	r3, r0
 800175c:	6039      	str	r1, [r7, #0]
 800175e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001760:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001764:	2b00      	cmp	r3, #0
 8001766:	db0a      	blt.n	800177e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001768:	683b      	ldr	r3, [r7, #0]
 800176a:	b2da      	uxtb	r2, r3
 800176c:	490c      	ldr	r1, [pc, #48]	; (80017a0 <__NVIC_SetPriority+0x4c>)
 800176e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001772:	0112      	lsls	r2, r2, #4
 8001774:	b2d2      	uxtb	r2, r2
 8001776:	440b      	add	r3, r1
 8001778:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800177c:	e00a      	b.n	8001794 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800177e:	683b      	ldr	r3, [r7, #0]
 8001780:	b2da      	uxtb	r2, r3
 8001782:	4908      	ldr	r1, [pc, #32]	; (80017a4 <__NVIC_SetPriority+0x50>)
 8001784:	79fb      	ldrb	r3, [r7, #7]
 8001786:	f003 030f 	and.w	r3, r3, #15
 800178a:	3b04      	subs	r3, #4
 800178c:	0112      	lsls	r2, r2, #4
 800178e:	b2d2      	uxtb	r2, r2
 8001790:	440b      	add	r3, r1
 8001792:	761a      	strb	r2, [r3, #24]
}
 8001794:	bf00      	nop
 8001796:	370c      	adds	r7, #12
 8001798:	46bd      	mov	sp, r7
 800179a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179e:	4770      	bx	lr
 80017a0:	e000e100 	.word	0xe000e100
 80017a4:	e000ed00 	.word	0xe000ed00

080017a8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80017a8:	b480      	push	{r7}
 80017aa:	b089      	sub	sp, #36	; 0x24
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	60f8      	str	r0, [r7, #12]
 80017b0:	60b9      	str	r1, [r7, #8]
 80017b2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	f003 0307 	and.w	r3, r3, #7
 80017ba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80017bc:	69fb      	ldr	r3, [r7, #28]
 80017be:	f1c3 0307 	rsb	r3, r3, #7
 80017c2:	2b04      	cmp	r3, #4
 80017c4:	bf28      	it	cs
 80017c6:	2304      	movcs	r3, #4
 80017c8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80017ca:	69fb      	ldr	r3, [r7, #28]
 80017cc:	3304      	adds	r3, #4
 80017ce:	2b06      	cmp	r3, #6
 80017d0:	d902      	bls.n	80017d8 <NVIC_EncodePriority+0x30>
 80017d2:	69fb      	ldr	r3, [r7, #28]
 80017d4:	3b03      	subs	r3, #3
 80017d6:	e000      	b.n	80017da <NVIC_EncodePriority+0x32>
 80017d8:	2300      	movs	r3, #0
 80017da:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017dc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80017e0:	69bb      	ldr	r3, [r7, #24]
 80017e2:	fa02 f303 	lsl.w	r3, r2, r3
 80017e6:	43da      	mvns	r2, r3
 80017e8:	68bb      	ldr	r3, [r7, #8]
 80017ea:	401a      	ands	r2, r3
 80017ec:	697b      	ldr	r3, [r7, #20]
 80017ee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80017f0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80017f4:	697b      	ldr	r3, [r7, #20]
 80017f6:	fa01 f303 	lsl.w	r3, r1, r3
 80017fa:	43d9      	mvns	r1, r3
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001800:	4313      	orrs	r3, r2
         );
}
 8001802:	4618      	mov	r0, r3
 8001804:	3724      	adds	r7, #36	; 0x24
 8001806:	46bd      	mov	sp, r7
 8001808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800180c:	4770      	bx	lr

0800180e <LL_I2C_EnableClockStretching>:
  * @rmtoll CR1          NOSTRETCH     LL_I2C_EnableClockStretching
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_EnableClockStretching(I2C_TypeDef *I2Cx)
{
 800180e:	b480      	push	{r7}
 8001810:	b083      	sub	sp, #12
 8001812:	af00      	add	r7, sp, #0
 8001814:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_NOSTRETCH);
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	601a      	str	r2, [r3, #0]
}
 8001822:	bf00      	nop
 8001824:	370c      	adds	r7, #12
 8001826:	46bd      	mov	sp, r7
 8001828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800182c:	4770      	bx	lr

0800182e <LL_I2C_DisableGeneralCall>:
  * @rmtoll CR1          ENGC          LL_I2C_DisableGeneralCall
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_DisableGeneralCall(I2C_TypeDef *I2Cx)
{
 800182e:	b480      	push	{r7}
 8001830:	b083      	sub	sp, #12
 8001832:	af00      	add	r7, sp, #0
 8001834:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_ENGC);
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	601a      	str	r2, [r3, #0]
}
 8001842:	bf00      	nop
 8001844:	370c      	adds	r7, #12
 8001846:	46bd      	mov	sp, r7
 8001848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800184c:	4770      	bx	lr

0800184e <LL_I2C_SetOwnAddress2>:
  * @param  I2Cx I2C Instance.
  * @param  OwnAddress2 This parameter must be a value between Min_Data=0 and Max_Data=0x7F.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_SetOwnAddress2(I2C_TypeDef *I2Cx, uint32_t OwnAddress2)
{
 800184e:	b480      	push	{r7}
 8001850:	b083      	sub	sp, #12
 8001852:	af00      	add	r7, sp, #0
 8001854:	6078      	str	r0, [r7, #4]
 8001856:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->OAR2, I2C_OAR2_ADD2, OwnAddress2);
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	68db      	ldr	r3, [r3, #12]
 800185c:	f023 02fe 	bic.w	r2, r3, #254	; 0xfe
 8001860:	683b      	ldr	r3, [r7, #0]
 8001862:	431a      	orrs	r2, r3
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	60da      	str	r2, [r3, #12]
}
 8001868:	bf00      	nop
 800186a:	370c      	adds	r7, #12
 800186c:	46bd      	mov	sp, r7
 800186e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001872:	4770      	bx	lr

08001874 <LL_I2C_DisableOwnAddress2>:
  * @rmtoll OAR2         ENDUAL        LL_I2C_DisableOwnAddress2
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_DisableOwnAddress2(I2C_TypeDef *I2Cx)
{
 8001874:	b480      	push	{r7}
 8001876:	b083      	sub	sp, #12
 8001878:	af00      	add	r7, sp, #0
 800187a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->OAR2, I2C_OAR2_ENDUAL);
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	68db      	ldr	r3, [r3, #12]
 8001880:	f023 0201 	bic.w	r2, r3, #1
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	60da      	str	r2, [r3, #12]
}
 8001888:	bf00      	nop
 800188a:	370c      	adds	r7, #12
 800188c:	46bd      	mov	sp, r7
 800188e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001892:	4770      	bx	lr

08001894 <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 8001894:	b480      	push	{r7}
 8001896:	b085      	sub	sp, #20
 8001898:	af00      	add	r7, sp, #0
 800189a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 800189c:	4b08      	ldr	r3, [pc, #32]	; (80018c0 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800189e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80018a0:	4907      	ldr	r1, [pc, #28]	; (80018c0 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	4313      	orrs	r3, r2
 80018a6:	630b      	str	r3, [r1, #48]	; 0x30
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 80018a8:	4b05      	ldr	r3, [pc, #20]	; (80018c0 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80018aa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	4013      	ands	r3, r2
 80018b0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80018b2:	68fb      	ldr	r3, [r7, #12]
}
 80018b4:	bf00      	nop
 80018b6:	3714      	adds	r7, #20
 80018b8:	46bd      	mov	sp, r7
 80018ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018be:	4770      	bx	lr
 80018c0:	40023800 	.word	0x40023800

080018c4 <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 80018c4:	b480      	push	{r7}
 80018c6:	b085      	sub	sp, #20
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 80018cc:	4b08      	ldr	r3, [pc, #32]	; (80018f0 <LL_APB1_GRP1_EnableClock+0x2c>)
 80018ce:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80018d0:	4907      	ldr	r1, [pc, #28]	; (80018f0 <LL_APB1_GRP1_EnableClock+0x2c>)
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	4313      	orrs	r3, r2
 80018d6:	640b      	str	r3, [r1, #64]	; 0x40
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 80018d8:	4b05      	ldr	r3, [pc, #20]	; (80018f0 <LL_APB1_GRP1_EnableClock+0x2c>)
 80018da:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	4013      	ands	r3, r2
 80018e0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80018e2:	68fb      	ldr	r3, [r7, #12]
}
 80018e4:	bf00      	nop
 80018e6:	3714      	adds	r7, #20
 80018e8:	46bd      	mov	sp, r7
 80018ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ee:	4770      	bx	lr
 80018f0:	40023800 	.word	0x40023800

080018f4 <MX_I2C1_Init>:

/* USER CODE END 0 */

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80018f4:	b580      	push	{r7, lr}
 80018f6:	b08e      	sub	sp, #56	; 0x38
 80018f8:	af00      	add	r7, sp, #0
  LL_I2C_InitTypeDef I2C_InitStruct = {0};
 80018fa:	f107 0318 	add.w	r3, r7, #24
 80018fe:	2220      	movs	r2, #32
 8001900:	2100      	movs	r1, #0
 8001902:	4618      	mov	r0, r3
 8001904:	f019 f9c4 	bl	801ac90 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001908:	463b      	mov	r3, r7
 800190a:	2200      	movs	r2, #0
 800190c:	601a      	str	r2, [r3, #0]
 800190e:	605a      	str	r2, [r3, #4]
 8001910:	609a      	str	r2, [r3, #8]
 8001912:	60da      	str	r2, [r3, #12]
 8001914:	611a      	str	r2, [r3, #16]
 8001916:	615a      	str	r2, [r3, #20]

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 8001918:	2002      	movs	r0, #2
 800191a:	f7ff ffbb 	bl	8001894 <LL_AHB1_GRP1_EnableClock>
  /**I2C1 GPIO Configuration  
  PB8   ------> I2C1_SCL
  PB9   ------> I2C1_SDA 
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_8|LL_GPIO_PIN_9;
 800191e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001922:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001924:	2302      	movs	r3, #2
 8001926:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8001928:	2303      	movs	r3, #3
 800192a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_OPENDRAIN;
 800192c:	2301      	movs	r3, #1
 800192e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8001930:	2301      	movs	r3, #1
 8001932:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_4;
 8001934:	2304      	movs	r3, #4
 8001936:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001938:	463b      	mov	r3, r7
 800193a:	4619      	mov	r1, r3
 800193c:	4827      	ldr	r0, [pc, #156]	; (80019dc <MX_I2C1_Init+0xe8>)
 800193e:	f005 fdf2 	bl	8007526 <LL_GPIO_Init>

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_I2C1);
 8001942:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8001946:	f7ff ffbd 	bl	80018c4 <LL_APB1_GRP1_EnableClock>

  /* I2C1 interrupt Init */
  NVIC_SetPriority(I2C1_EV_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),5, 0));
 800194a:	f7ff fed7 	bl	80016fc <__NVIC_GetPriorityGrouping>
 800194e:	4603      	mov	r3, r0
 8001950:	2200      	movs	r2, #0
 8001952:	2105      	movs	r1, #5
 8001954:	4618      	mov	r0, r3
 8001956:	f7ff ff27 	bl	80017a8 <NVIC_EncodePriority>
 800195a:	4603      	mov	r3, r0
 800195c:	4619      	mov	r1, r3
 800195e:	201f      	movs	r0, #31
 8001960:	f7ff fef8 	bl	8001754 <__NVIC_SetPriority>
  NVIC_EnableIRQ(I2C1_EV_IRQn);
 8001964:	201f      	movs	r0, #31
 8001966:	f7ff fed7 	bl	8001718 <__NVIC_EnableIRQ>
  NVIC_SetPriority(I2C1_ER_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),5, 0));
 800196a:	f7ff fec7 	bl	80016fc <__NVIC_GetPriorityGrouping>
 800196e:	4603      	mov	r3, r0
 8001970:	2200      	movs	r2, #0
 8001972:	2105      	movs	r1, #5
 8001974:	4618      	mov	r0, r3
 8001976:	f7ff ff17 	bl	80017a8 <NVIC_EncodePriority>
 800197a:	4603      	mov	r3, r0
 800197c:	4619      	mov	r1, r3
 800197e:	2020      	movs	r0, #32
 8001980:	f7ff fee8 	bl	8001754 <__NVIC_SetPriority>
  NVIC_EnableIRQ(I2C1_ER_IRQn);
 8001984:	2020      	movs	r0, #32
 8001986:	f7ff fec7 	bl	8001718 <__NVIC_EnableIRQ>

  /** I2C Initialization 
  */
  LL_I2C_DisableOwnAddress2(I2C1);
 800198a:	4815      	ldr	r0, [pc, #84]	; (80019e0 <MX_I2C1_Init+0xec>)
 800198c:	f7ff ff72 	bl	8001874 <LL_I2C_DisableOwnAddress2>
  LL_I2C_DisableGeneralCall(I2C1);
 8001990:	4813      	ldr	r0, [pc, #76]	; (80019e0 <MX_I2C1_Init+0xec>)
 8001992:	f7ff ff4c 	bl	800182e <LL_I2C_DisableGeneralCall>
  LL_I2C_EnableClockStretching(I2C1);
 8001996:	4812      	ldr	r0, [pc, #72]	; (80019e0 <MX_I2C1_Init+0xec>)
 8001998:	f7ff ff39 	bl	800180e <LL_I2C_EnableClockStretching>
  I2C_InitStruct.PeripheralMode = LL_I2C_MODE_I2C;
 800199c:	2300      	movs	r3, #0
 800199e:	61bb      	str	r3, [r7, #24]
  I2C_InitStruct.ClockSpeed = 100000;
 80019a0:	4b10      	ldr	r3, [pc, #64]	; (80019e4 <MX_I2C1_Init+0xf0>)
 80019a2:	61fb      	str	r3, [r7, #28]
  I2C_InitStruct.DutyCycle = LL_I2C_DUTYCYCLE_2;
 80019a4:	2300      	movs	r3, #0
 80019a6:	623b      	str	r3, [r7, #32]
  I2C_InitStruct.AnalogFilter = LL_I2C_ANALOGFILTER_ENABLE;
 80019a8:	2300      	movs	r3, #0
 80019aa:	627b      	str	r3, [r7, #36]	; 0x24
  I2C_InitStruct.DigitalFilter = 0;
 80019ac:	2300      	movs	r3, #0
 80019ae:	62bb      	str	r3, [r7, #40]	; 0x28
  I2C_InitStruct.OwnAddress1 = 0;
 80019b0:	2300      	movs	r3, #0
 80019b2:	62fb      	str	r3, [r7, #44]	; 0x2c
  I2C_InitStruct.TypeAcknowledge = LL_I2C_ACK;
 80019b4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80019b8:	633b      	str	r3, [r7, #48]	; 0x30
  I2C_InitStruct.OwnAddrSize = LL_I2C_OWNADDRESS1_7BIT;
 80019ba:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80019be:	637b      	str	r3, [r7, #52]	; 0x34
  LL_I2C_Init(I2C1, &I2C_InitStruct);
 80019c0:	f107 0318 	add.w	r3, r7, #24
 80019c4:	4619      	mov	r1, r3
 80019c6:	4806      	ldr	r0, [pc, #24]	; (80019e0 <MX_I2C1_Init+0xec>)
 80019c8:	f005 ff2e 	bl	8007828 <LL_I2C_Init>
  LL_I2C_SetOwnAddress2(I2C1, 0);
 80019cc:	2100      	movs	r1, #0
 80019ce:	4804      	ldr	r0, [pc, #16]	; (80019e0 <MX_I2C1_Init+0xec>)
 80019d0:	f7ff ff3d 	bl	800184e <LL_I2C_SetOwnAddress2>

}
 80019d4:	bf00      	nop
 80019d6:	3738      	adds	r7, #56	; 0x38
 80019d8:	46bd      	mov	sp, r7
 80019da:	bd80      	pop	{r7, pc}
 80019dc:	40020400 	.word	0x40020400
 80019e0:	40005400 	.word	0x40005400
 80019e4:	000186a0 	.word	0x000186a0

080019e8 <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 80019e8:	b580      	push	{r7, lr}
 80019ea:	b08e      	sub	sp, #56	; 0x38
 80019ec:	af00      	add	r7, sp, #0
  LL_I2C_InitTypeDef I2C_InitStruct = {0};
 80019ee:	f107 0318 	add.w	r3, r7, #24
 80019f2:	2220      	movs	r2, #32
 80019f4:	2100      	movs	r1, #0
 80019f6:	4618      	mov	r0, r3
 80019f8:	f019 f94a 	bl	801ac90 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019fc:	463b      	mov	r3, r7
 80019fe:	2200      	movs	r2, #0
 8001a00:	601a      	str	r2, [r3, #0]
 8001a02:	605a      	str	r2, [r3, #4]
 8001a04:	609a      	str	r2, [r3, #8]
 8001a06:	60da      	str	r2, [r3, #12]
 8001a08:	611a      	str	r2, [r3, #16]
 8001a0a:	615a      	str	r2, [r3, #20]

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOF);
 8001a0c:	2020      	movs	r0, #32
 8001a0e:	f7ff ff41 	bl	8001894 <LL_AHB1_GRP1_EnableClock>
  /**I2C2 GPIO Configuration  
  PF0   ------> I2C2_SDA
  PF1   ------> I2C2_SCL 
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_0|LL_GPIO_PIN_1;
 8001a12:	2303      	movs	r3, #3
 8001a14:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001a16:	2302      	movs	r3, #2
 8001a18:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8001a1a:	2303      	movs	r3, #3
 8001a1c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_OPENDRAIN;
 8001a1e:	2301      	movs	r3, #1
 8001a20:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8001a22:	2301      	movs	r3, #1
 8001a24:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_4;
 8001a26:	2304      	movs	r3, #4
 8001a28:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001a2a:	463b      	mov	r3, r7
 8001a2c:	4619      	mov	r1, r3
 8001a2e:	4818      	ldr	r0, [pc, #96]	; (8001a90 <MX_I2C2_Init+0xa8>)
 8001a30:	f005 fd79 	bl	8007526 <LL_GPIO_Init>

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_I2C2);
 8001a34:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 8001a38:	f7ff ff44 	bl	80018c4 <LL_APB1_GRP1_EnableClock>

  /** I2C Initialization 
  */
  LL_I2C_DisableOwnAddress2(I2C2);
 8001a3c:	4815      	ldr	r0, [pc, #84]	; (8001a94 <MX_I2C2_Init+0xac>)
 8001a3e:	f7ff ff19 	bl	8001874 <LL_I2C_DisableOwnAddress2>
  LL_I2C_DisableGeneralCall(I2C2);
 8001a42:	4814      	ldr	r0, [pc, #80]	; (8001a94 <MX_I2C2_Init+0xac>)
 8001a44:	f7ff fef3 	bl	800182e <LL_I2C_DisableGeneralCall>
  LL_I2C_EnableClockStretching(I2C2);
 8001a48:	4812      	ldr	r0, [pc, #72]	; (8001a94 <MX_I2C2_Init+0xac>)
 8001a4a:	f7ff fee0 	bl	800180e <LL_I2C_EnableClockStretching>
  I2C_InitStruct.PeripheralMode = LL_I2C_MODE_I2C;
 8001a4e:	2300      	movs	r3, #0
 8001a50:	61bb      	str	r3, [r7, #24]
  I2C_InitStruct.ClockSpeed = 100000;
 8001a52:	4b11      	ldr	r3, [pc, #68]	; (8001a98 <MX_I2C2_Init+0xb0>)
 8001a54:	61fb      	str	r3, [r7, #28]
  I2C_InitStruct.DutyCycle = LL_I2C_DUTYCYCLE_2;
 8001a56:	2300      	movs	r3, #0
 8001a58:	623b      	str	r3, [r7, #32]
  I2C_InitStruct.AnalogFilter = LL_I2C_ANALOGFILTER_ENABLE;
 8001a5a:	2300      	movs	r3, #0
 8001a5c:	627b      	str	r3, [r7, #36]	; 0x24
  I2C_InitStruct.DigitalFilter = 0;
 8001a5e:	2300      	movs	r3, #0
 8001a60:	62bb      	str	r3, [r7, #40]	; 0x28
  I2C_InitStruct.OwnAddress1 = 0;
 8001a62:	2300      	movs	r3, #0
 8001a64:	62fb      	str	r3, [r7, #44]	; 0x2c
  I2C_InitStruct.TypeAcknowledge = LL_I2C_ACK;
 8001a66:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001a6a:	633b      	str	r3, [r7, #48]	; 0x30
  I2C_InitStruct.OwnAddrSize = LL_I2C_OWNADDRESS1_7BIT;
 8001a6c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001a70:	637b      	str	r3, [r7, #52]	; 0x34
  LL_I2C_Init(I2C2, &I2C_InitStruct);
 8001a72:	f107 0318 	add.w	r3, r7, #24
 8001a76:	4619      	mov	r1, r3
 8001a78:	4806      	ldr	r0, [pc, #24]	; (8001a94 <MX_I2C2_Init+0xac>)
 8001a7a:	f005 fed5 	bl	8007828 <LL_I2C_Init>
  LL_I2C_SetOwnAddress2(I2C2, 0);
 8001a7e:	2100      	movs	r1, #0
 8001a80:	4804      	ldr	r0, [pc, #16]	; (8001a94 <MX_I2C2_Init+0xac>)
 8001a82:	f7ff fee4 	bl	800184e <LL_I2C_SetOwnAddress2>

}
 8001a86:	bf00      	nop
 8001a88:	3738      	adds	r7, #56	; 0x38
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	bd80      	pop	{r7, pc}
 8001a8e:	bf00      	nop
 8001a90:	40021400 	.word	0x40021400
 8001a94:	40005800 	.word	0x40005800
 8001a98:	000186a0 	.word	0x000186a0

08001a9c <F_I2C1_WriteValue>:
/* USER CODE BEGIN 1 */

/**
 * Write a single value in a slave register
 */
int F_I2C1_WriteValue(uint8_t slave_addr, uint8_t value){
 8001a9c:	b480      	push	{r7}
 8001a9e:	b085      	sub	sp, #20
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	4603      	mov	r3, r0
 8001aa4:	460a      	mov	r2, r1
 8001aa6:	71fb      	strb	r3, [r7, #7]
 8001aa8:	4613      	mov	r3, r2
 8001aaa:	71bb      	strb	r3, [r7, #6]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001aac:	b672      	cpsid	i

	__disable_irq();

	int i2c_status = I2C_STATUS_OK;
 8001aae:	2301      	movs	r3, #1
 8001ab0:	60bb      	str	r3, [r7, #8]
	uint32_t timeout = 0;
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	60fb      	str	r3, [r7, #12]
//	uint16_t i = 0;

	// Send start
	I2C1->CR1 |= I2C_CR1_START; // send START bit
 8001ab6:	4b28      	ldr	r3, [pc, #160]	; (8001b58 <F_I2C1_WriteValue+0xbc>)
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	4a27      	ldr	r2, [pc, #156]	; (8001b58 <F_I2C1_WriteValue+0xbc>)
 8001abc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ac0:	6013      	str	r3, [r2, #0]
	while (!(I2C1->SR1 & I2C_SR1_SB)){	// wait for START condition (SB=1)
 8001ac2:	e008      	b.n	8001ad6 <F_I2C1_WriteValue+0x3a>
		if(timeout > I2C_TIMEOUT){
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	4a25      	ldr	r2, [pc, #148]	; (8001b5c <F_I2C1_WriteValue+0xc0>)
 8001ac8:	4293      	cmp	r3, r2
 8001aca:	d901      	bls.n	8001ad0 <F_I2C1_WriteValue+0x34>
			//printf("Erreur : Start Condition \n");
			return I2C_STATUS_KO;
 8001acc:	2300      	movs	r3, #0
 8001ace:	e03c      	b.n	8001b4a <F_I2C1_WriteValue+0xae>
		}
	timeout++;
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	3301      	adds	r3, #1
 8001ad4:	60fb      	str	r3, [r7, #12]
	while (!(I2C1->SR1 & I2C_SR1_SB)){	// wait for START condition (SB=1)
 8001ad6:	4b20      	ldr	r3, [pc, #128]	; (8001b58 <F_I2C1_WriteValue+0xbc>)
 8001ad8:	695b      	ldr	r3, [r3, #20]
 8001ada:	f003 0301 	and.w	r3, r3, #1
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d0f0      	beq.n	8001ac4 <F_I2C1_WriteValue+0x28>
	}
	timeout=0;
 8001ae2:	2300      	movs	r3, #0
 8001ae4:	60fb      	str	r3, [r7, #12]
	// Send slave address
	I2C1->DR = (slave_addr<<1) & 0xFE  ;	// address + write
 8001ae6:	79fb      	ldrb	r3, [r7, #7]
 8001ae8:	005b      	lsls	r3, r3, #1
 8001aea:	4a1b      	ldr	r2, [pc, #108]	; (8001b58 <F_I2C1_WriteValue+0xbc>)
 8001aec:	b2db      	uxtb	r3, r3
 8001aee:	6113      	str	r3, [r2, #16]
	while (!(I2C1->SR1 & I2C_SR1_ADDR)){// wait for ADDRESS sent (ADDR=1)
 8001af0:	e008      	b.n	8001b04 <F_I2C1_WriteValue+0x68>
		if(timeout > I2C_TIMEOUT){
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	4a19      	ldr	r2, [pc, #100]	; (8001b5c <F_I2C1_WriteValue+0xc0>)
 8001af6:	4293      	cmp	r3, r2
 8001af8:	d901      	bls.n	8001afe <F_I2C1_WriteValue+0x62>
			//printf("Erreur : Send slave address \n");
			return I2C_STATUS_KO;
 8001afa:	2300      	movs	r3, #0
 8001afc:	e025      	b.n	8001b4a <F_I2C1_WriteValue+0xae>
		}
		timeout++;
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	3301      	adds	r3, #1
 8001b02:	60fb      	str	r3, [r7, #12]
	while (!(I2C1->SR1 & I2C_SR1_ADDR)){// wait for ADDRESS sent (ADDR=1)
 8001b04:	4b14      	ldr	r3, [pc, #80]	; (8001b58 <F_I2C1_WriteValue+0xbc>)
 8001b06:	695b      	ldr	r3, [r3, #20]
 8001b08:	f003 0302 	and.w	r3, r3, #2
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d0f0      	beq.n	8001af2 <F_I2C1_WriteValue+0x56>
	}
	timeout=0;
 8001b10:	2300      	movs	r3, #0
 8001b12:	60fb      	str	r3, [r7, #12]
	i2c_status = I2C1->SR2; // read status to clear flag
 8001b14:	4b10      	ldr	r3, [pc, #64]	; (8001b58 <F_I2C1_WriteValue+0xbc>)
 8001b16:	699b      	ldr	r3, [r3, #24]
 8001b18:	60bb      	str	r3, [r7, #8]

	// Send register address
	I2C1->DR = value;
 8001b1a:	4a0f      	ldr	r2, [pc, #60]	; (8001b58 <F_I2C1_WriteValue+0xbc>)
 8001b1c:	79bb      	ldrb	r3, [r7, #6]
 8001b1e:	6113      	str	r3, [r2, #16]
	while ((!(I2C1->SR1 & I2C_SR1_TXE)) && (!(I2C1->SR1 & I2C_SR1_BTF))); // wait for DR empty (TxE)
 8001b20:	bf00      	nop
 8001b22:	4b0d      	ldr	r3, [pc, #52]	; (8001b58 <F_I2C1_WriteValue+0xbc>)
 8001b24:	695b      	ldr	r3, [r3, #20]
 8001b26:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d105      	bne.n	8001b3a <F_I2C1_WriteValue+0x9e>
 8001b2e:	4b0a      	ldr	r3, [pc, #40]	; (8001b58 <F_I2C1_WriteValue+0xbc>)
 8001b30:	695b      	ldr	r3, [r3, #20]
 8001b32:	f003 0304 	and.w	r3, r3, #4
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d0f3      	beq.n	8001b22 <F_I2C1_WriteValue+0x86>


	I2C1->CR1 |= I2C_CR1_STOP; // send STOP bit
 8001b3a:	4b07      	ldr	r3, [pc, #28]	; (8001b58 <F_I2C1_WriteValue+0xbc>)
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	4a06      	ldr	r2, [pc, #24]	; (8001b58 <F_I2C1_WriteValue+0xbc>)
 8001b40:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001b44:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8001b46:	b662      	cpsie	i

	__enable_irq();

	return i2c_status;
 8001b48:	68bb      	ldr	r3, [r7, #8]
}
 8001b4a:	4618      	mov	r0, r3
 8001b4c:	3714      	adds	r7, #20
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b54:	4770      	bx	lr
 8001b56:	bf00      	nop
 8001b58:	40005400 	.word	0x40005400
 8001b5c:	000186a0 	.word	0x000186a0

08001b60 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001b60:	b580      	push	{r7, lr}
 8001b62:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001b64:	f000 fe72 	bl	800284c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001b68:	f000 f816 	bl	8001b98 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001b6c:	f7ff fb18 	bl	80011a0 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8001b70:	f000 fd88 	bl	8002684 <MX_USART3_UART_Init>
  MX_I2C1_Init();
 8001b74:	f7ff febe 	bl	80018f4 <MX_I2C1_Init>
  MX_I2C2_Init();
 8001b78:	f7ff ff36 	bl	80019e8 <MX_I2C2_Init>
  MX_TIM4_Init();
 8001b7c:	f000 fafe 	bl	800217c <MX_TIM4_Init>
  MX_UART4_Init();
 8001b80:	f000 fd56 	bl	8002630 <MX_UART4_Init>
  MX_TIM2_Init();
 8001b84:	f000 fa52 	bl	800202c <MX_TIM2_Init>
  MX_TIM3_Init();
 8001b88:	f000 faa4 	bl	80020d4 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init(); 
 8001b8c:	f7ff fa3e 	bl	800100c <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8001b90:	f009 fbd6 	bl	800b340 <osKernelStart>
  
  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001b94:	e7fe      	b.n	8001b94 <main+0x34>
	...

08001b98 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	b094      	sub	sp, #80	; 0x50
 8001b9c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001b9e:	f107 0320 	add.w	r3, r7, #32
 8001ba2:	2230      	movs	r2, #48	; 0x30
 8001ba4:	2100      	movs	r1, #0
 8001ba6:	4618      	mov	r0, r3
 8001ba8:	f019 f872 	bl	801ac90 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001bac:	f107 030c 	add.w	r3, r7, #12
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	601a      	str	r2, [r3, #0]
 8001bb4:	605a      	str	r2, [r3, #4]
 8001bb6:	609a      	str	r2, [r3, #8]
 8001bb8:	60da      	str	r2, [r3, #12]
 8001bba:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001bbc:	2300      	movs	r3, #0
 8001bbe:	60bb      	str	r3, [r7, #8]
 8001bc0:	4b28      	ldr	r3, [pc, #160]	; (8001c64 <SystemClock_Config+0xcc>)
 8001bc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bc4:	4a27      	ldr	r2, [pc, #156]	; (8001c64 <SystemClock_Config+0xcc>)
 8001bc6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001bca:	6413      	str	r3, [r2, #64]	; 0x40
 8001bcc:	4b25      	ldr	r3, [pc, #148]	; (8001c64 <SystemClock_Config+0xcc>)
 8001bce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bd0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bd4:	60bb      	str	r3, [r7, #8]
 8001bd6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001bd8:	2300      	movs	r3, #0
 8001bda:	607b      	str	r3, [r7, #4]
 8001bdc:	4b22      	ldr	r3, [pc, #136]	; (8001c68 <SystemClock_Config+0xd0>)
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	4a21      	ldr	r2, [pc, #132]	; (8001c68 <SystemClock_Config+0xd0>)
 8001be2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001be6:	6013      	str	r3, [r2, #0]
 8001be8:	4b1f      	ldr	r3, [pc, #124]	; (8001c68 <SystemClock_Config+0xd0>)
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001bf0:	607b      	str	r3, [r7, #4]
 8001bf2:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001bf4:	2301      	movs	r3, #1
 8001bf6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001bf8:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8001bfc:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001bfe:	2302      	movs	r3, #2
 8001c00:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001c02:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001c06:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001c08:	2304      	movs	r3, #4
 8001c0a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001c0c:	23a8      	movs	r3, #168	; 0xa8
 8001c0e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001c10:	2302      	movs	r3, #2
 8001c12:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001c14:	2307      	movs	r3, #7
 8001c16:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001c18:	f107 0320 	add.w	r3, r7, #32
 8001c1c:	4618      	mov	r0, r3
 8001c1e:	f003 fadd 	bl	80051dc <HAL_RCC_OscConfig>
 8001c22:	4603      	mov	r3, r0
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d001      	beq.n	8001c2c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001c28:	f000 f832 	bl	8001c90 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001c2c:	230f      	movs	r3, #15
 8001c2e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001c30:	2302      	movs	r3, #2
 8001c32:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001c34:	2300      	movs	r3, #0
 8001c36:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001c38:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001c3c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001c3e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001c42:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001c44:	f107 030c 	add.w	r3, r7, #12
 8001c48:	2105      	movs	r1, #5
 8001c4a:	4618      	mov	r0, r3
 8001c4c:	f003 fd08 	bl	8005660 <HAL_RCC_ClockConfig>
 8001c50:	4603      	mov	r3, r0
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d001      	beq.n	8001c5a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001c56:	f000 f81b 	bl	8001c90 <Error_Handler>
  }
}
 8001c5a:	bf00      	nop
 8001c5c:	3750      	adds	r7, #80	; 0x50
 8001c5e:	46bd      	mov	sp, r7
 8001c60:	bd80      	pop	{r7, pc}
 8001c62:	bf00      	nop
 8001c64:	40023800 	.word	0x40023800
 8001c68:	40007000 	.word	0x40007000

08001c6c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001c6c:	b580      	push	{r7, lr}
 8001c6e:	b082      	sub	sp, #8
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM10) {
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	4a04      	ldr	r2, [pc, #16]	; (8001c8c <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001c7a:	4293      	cmp	r3, r2
 8001c7c:	d101      	bne.n	8001c82 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001c7e:	f000 fe07 	bl	8002890 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001c82:	bf00      	nop
 8001c84:	3708      	adds	r7, #8
 8001c86:	46bd      	mov	sp, r7
 8001c88:	bd80      	pop	{r7, pc}
 8001c8a:	bf00      	nop
 8001c8c:	40014400 	.word	0x40014400

08001c90 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001c90:	b480      	push	{r7}
 8001c92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001c94:	bf00      	nop
 8001c96:	46bd      	mov	sp, r7
 8001c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c9c:	4770      	bx	lr
	...

08001ca0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001ca0:	b580      	push	{r7, lr}
 8001ca2:	b082      	sub	sp, #8
 8001ca4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ca6:	2300      	movs	r3, #0
 8001ca8:	607b      	str	r3, [r7, #4]
 8001caa:	4b12      	ldr	r3, [pc, #72]	; (8001cf4 <HAL_MspInit+0x54>)
 8001cac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cae:	4a11      	ldr	r2, [pc, #68]	; (8001cf4 <HAL_MspInit+0x54>)
 8001cb0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001cb4:	6453      	str	r3, [r2, #68]	; 0x44
 8001cb6:	4b0f      	ldr	r3, [pc, #60]	; (8001cf4 <HAL_MspInit+0x54>)
 8001cb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001cbe:	607b      	str	r3, [r7, #4]
 8001cc0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001cc2:	2300      	movs	r3, #0
 8001cc4:	603b      	str	r3, [r7, #0]
 8001cc6:	4b0b      	ldr	r3, [pc, #44]	; (8001cf4 <HAL_MspInit+0x54>)
 8001cc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cca:	4a0a      	ldr	r2, [pc, #40]	; (8001cf4 <HAL_MspInit+0x54>)
 8001ccc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001cd0:	6413      	str	r3, [r2, #64]	; 0x40
 8001cd2:	4b08      	ldr	r3, [pc, #32]	; (8001cf4 <HAL_MspInit+0x54>)
 8001cd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cd6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cda:	603b      	str	r3, [r7, #0]
 8001cdc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001cde:	2200      	movs	r2, #0
 8001ce0:	210f      	movs	r1, #15
 8001ce2:	f06f 0001 	mvn.w	r0, #1
 8001ce6:	f000 fecd 	bl	8002a84 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001cea:	bf00      	nop
 8001cec:	3708      	adds	r7, #8
 8001cee:	46bd      	mov	sp, r7
 8001cf0:	bd80      	pop	{r7, pc}
 8001cf2:	bf00      	nop
 8001cf4:	40023800 	.word	0x40023800

08001cf8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	b08c      	sub	sp, #48	; 0x30
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001d00:	2300      	movs	r3, #0
 8001d02:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8001d04:	2300      	movs	r3, #0
 8001d06:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM10 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0); 
 8001d08:	2200      	movs	r2, #0
 8001d0a:	6879      	ldr	r1, [r7, #4]
 8001d0c:	2019      	movs	r0, #25
 8001d0e:	f000 feb9 	bl	8002a84 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM10 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn); 
 8001d12:	2019      	movs	r0, #25
 8001d14:	f000 fed2 	bl	8002abc <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM10 clock */
  __HAL_RCC_TIM10_CLK_ENABLE();
 8001d18:	2300      	movs	r3, #0
 8001d1a:	60fb      	str	r3, [r7, #12]
 8001d1c:	4b1f      	ldr	r3, [pc, #124]	; (8001d9c <HAL_InitTick+0xa4>)
 8001d1e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d20:	4a1e      	ldr	r2, [pc, #120]	; (8001d9c <HAL_InitTick+0xa4>)
 8001d22:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d26:	6453      	str	r3, [r2, #68]	; 0x44
 8001d28:	4b1c      	ldr	r3, [pc, #112]	; (8001d9c <HAL_InitTick+0xa4>)
 8001d2a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d2c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d30:	60fb      	str	r3, [r7, #12]
 8001d32:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001d34:	f107 0210 	add.w	r2, r7, #16
 8001d38:	f107 0314 	add.w	r3, r7, #20
 8001d3c:	4611      	mov	r1, r2
 8001d3e:	4618      	mov	r0, r3
 8001d40:	f003 fe7c 	bl	8005a3c <HAL_RCC_GetClockConfig>
  
  /* Compute TIM10 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8001d44:	f003 fe66 	bl	8005a14 <HAL_RCC_GetPCLK2Freq>
 8001d48:	4603      	mov	r3, r0
 8001d4a:	005b      	lsls	r3, r3, #1
 8001d4c:	62fb      	str	r3, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM10 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8001d4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d50:	4a13      	ldr	r2, [pc, #76]	; (8001da0 <HAL_InitTick+0xa8>)
 8001d52:	fba2 2303 	umull	r2, r3, r2, r3
 8001d56:	0c9b      	lsrs	r3, r3, #18
 8001d58:	3b01      	subs	r3, #1
 8001d5a:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM10 */
  htim10.Instance = TIM10;
 8001d5c:	4b11      	ldr	r3, [pc, #68]	; (8001da4 <HAL_InitTick+0xac>)
 8001d5e:	4a12      	ldr	r2, [pc, #72]	; (8001da8 <HAL_InitTick+0xb0>)
 8001d60:	601a      	str	r2, [r3, #0]
  + Period = [(TIM10CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim10.Init.Period = (1000000 / 1000) - 1;
 8001d62:	4b10      	ldr	r3, [pc, #64]	; (8001da4 <HAL_InitTick+0xac>)
 8001d64:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001d68:	60da      	str	r2, [r3, #12]
  htim10.Init.Prescaler = uwPrescalerValue;
 8001d6a:	4a0e      	ldr	r2, [pc, #56]	; (8001da4 <HAL_InitTick+0xac>)
 8001d6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d6e:	6053      	str	r3, [r2, #4]
  htim10.Init.ClockDivision = 0;
 8001d70:	4b0c      	ldr	r3, [pc, #48]	; (8001da4 <HAL_InitTick+0xac>)
 8001d72:	2200      	movs	r2, #0
 8001d74:	611a      	str	r2, [r3, #16]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d76:	4b0b      	ldr	r3, [pc, #44]	; (8001da4 <HAL_InitTick+0xac>)
 8001d78:	2200      	movs	r2, #0
 8001d7a:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim10) == HAL_OK)
 8001d7c:	4809      	ldr	r0, [pc, #36]	; (8001da4 <HAL_InitTick+0xac>)
 8001d7e:	f003 fe8f 	bl	8005aa0 <HAL_TIM_Base_Init>
 8001d82:	4603      	mov	r3, r0
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d104      	bne.n	8001d92 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim10);
 8001d88:	4806      	ldr	r0, [pc, #24]	; (8001da4 <HAL_InitTick+0xac>)
 8001d8a:	f003 feb4 	bl	8005af6 <HAL_TIM_Base_Start_IT>
 8001d8e:	4603      	mov	r3, r0
 8001d90:	e000      	b.n	8001d94 <HAL_InitTick+0x9c>
  }
  
  /* Return function status */
  return HAL_ERROR;
 8001d92:	2301      	movs	r3, #1
}
 8001d94:	4618      	mov	r0, r3
 8001d96:	3730      	adds	r7, #48	; 0x30
 8001d98:	46bd      	mov	sp, r7
 8001d9a:	bd80      	pop	{r7, pc}
 8001d9c:	40023800 	.word	0x40023800
 8001da0:	431bde83 	.word	0x431bde83
 8001da4:	20004370 	.word	0x20004370
 8001da8:	40014400 	.word	0x40014400

08001dac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001dac:	b480      	push	{r7}
 8001dae:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001db0:	bf00      	nop
 8001db2:	46bd      	mov	sp, r7
 8001db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db8:	4770      	bx	lr

08001dba <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001dba:	b480      	push	{r7}
 8001dbc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001dbe:	e7fe      	b.n	8001dbe <HardFault_Handler+0x4>

08001dc0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001dc0:	b480      	push	{r7}
 8001dc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001dc4:	e7fe      	b.n	8001dc4 <MemManage_Handler+0x4>

08001dc6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001dc6:	b480      	push	{r7}
 8001dc8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001dca:	e7fe      	b.n	8001dca <BusFault_Handler+0x4>

08001dcc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001dcc:	b480      	push	{r7}
 8001dce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001dd0:	e7fe      	b.n	8001dd0 <UsageFault_Handler+0x4>

08001dd2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001dd2:	b480      	push	{r7}
 8001dd4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001dd6:	bf00      	nop
 8001dd8:	46bd      	mov	sp, r7
 8001dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dde:	4770      	bx	lr

08001de0 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8001de0:	b580      	push	{r7, lr}
 8001de2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 8001de4:	4802      	ldr	r0, [pc, #8]	; (8001df0 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8001de6:	f003 ffef 	bl	8005dc8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8001dea:	bf00      	nop
 8001dec:	bd80      	pop	{r7, pc}
 8001dee:	bf00      	nop
 8001df0:	20004370 	.word	0x20004370

08001df4 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8001df4:	b480      	push	{r7}
 8001df6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_EV_IRQn 0 */
  
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8001df8:	bf00      	nop
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e00:	4770      	bx	lr

08001e02 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8001e02:	b480      	push	{r7}
 8001e04:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_ER_IRQn 0 */
  
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8001e06:	bf00      	nop
 8001e08:	46bd      	mov	sp, r7
 8001e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e0e:	4770      	bx	lr

08001e10 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001e10:	b480      	push	{r7}
 8001e12:	af00      	add	r7, sp, #0

  /* USER CODE END USART3_IRQn 0 */
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001e14:	bf00      	nop
 8001e16:	46bd      	mov	sp, r7
 8001e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e1c:	4770      	bx	lr
	...

08001e20 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8001e20:	b580      	push	{r7, lr}
 8001e22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */
	if(UART4->SR & USART_SR_RXNE){
 8001e24:	4b0b      	ldr	r3, [pc, #44]	; (8001e54 <UART4_IRQHandler+0x34>)
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	f003 0320 	and.w	r3, r3, #32
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d00c      	beq.n	8001e4a <UART4_IRQHandler+0x2a>
		UART4->SR &= ~USART_SR_RXNE;
 8001e30:	4b08      	ldr	r3, [pc, #32]	; (8001e54 <UART4_IRQHandler+0x34>)
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	4a07      	ldr	r2, [pc, #28]	; (8001e54 <UART4_IRQHandler+0x34>)
 8001e36:	f023 0320 	bic.w	r3, r3, #32
 8001e3a:	6013      	str	r3, [r2, #0]

		F_GPIO_ToogleLed3();
 8001e3c:	f7ff fc0a 	bl	8001654 <F_GPIO_ToogleLed3>
		g_uart_buff = UART4->DR;
 8001e40:	4b04      	ldr	r3, [pc, #16]	; (8001e54 <UART4_IRQHandler+0x34>)
 8001e42:	685b      	ldr	r3, [r3, #4]
 8001e44:	b2da      	uxtb	r2, r3
 8001e46:	4b04      	ldr	r3, [pc, #16]	; (8001e58 <UART4_IRQHandler+0x38>)
 8001e48:	701a      	strb	r2, [r3, #0]
	}
  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8001e4a:	4804      	ldr	r0, [pc, #16]	; (8001e5c <UART4_IRQHandler+0x3c>)
 8001e4c:	f004 fe20 	bl	8006a90 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8001e50:	bf00      	nop
 8001e52:	bd80      	pop	{r7, pc}
 8001e54:	40004c00 	.word	0x40004c00
 8001e58:	200043b0 	.word	0x200043b0
 8001e5c:	20004474 	.word	0x20004474

08001e60 <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 8001e60:	b580      	push	{r7, lr}
 8001e62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 8001e64:	4802      	ldr	r0, [pc, #8]	; (8001e70 <ETH_IRQHandler+0x10>)
 8001e66:	f001 fa3f 	bl	80032e8 <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 8001e6a:	bf00      	nop
 8001e6c:	bd80      	pop	{r7, pc}
 8001e6e:	bf00      	nop
 8001e70:	20005dd8 	.word	0x20005dd8

08001e74 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001e74:	b580      	push	{r7, lr}
 8001e76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001e78:	4802      	ldr	r0, [pc, #8]	; (8001e84 <OTG_FS_IRQHandler+0x10>)
 8001e7a:	f002 f974 	bl	8004166 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001e7e:	bf00      	nop
 8001e80:	bd80      	pop	{r7, pc}
 8001e82:	bf00      	nop
 8001e84:	2000c000 	.word	0x2000c000

08001e88 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001e88:	b580      	push	{r7, lr}
 8001e8a:	b086      	sub	sp, #24
 8001e8c:	af00      	add	r7, sp, #0
 8001e8e:	60f8      	str	r0, [r7, #12]
 8001e90:	60b9      	str	r1, [r7, #8]
 8001e92:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e94:	2300      	movs	r3, #0
 8001e96:	617b      	str	r3, [r7, #20]
 8001e98:	e00a      	b.n	8001eb0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001e9a:	f3af 8000 	nop.w
 8001e9e:	4601      	mov	r1, r0
 8001ea0:	68bb      	ldr	r3, [r7, #8]
 8001ea2:	1c5a      	adds	r2, r3, #1
 8001ea4:	60ba      	str	r2, [r7, #8]
 8001ea6:	b2ca      	uxtb	r2, r1
 8001ea8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001eaa:	697b      	ldr	r3, [r7, #20]
 8001eac:	3301      	adds	r3, #1
 8001eae:	617b      	str	r3, [r7, #20]
 8001eb0:	697a      	ldr	r2, [r7, #20]
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	429a      	cmp	r2, r3
 8001eb6:	dbf0      	blt.n	8001e9a <_read+0x12>
	}

return len;
 8001eb8:	687b      	ldr	r3, [r7, #4]
}
 8001eba:	4618      	mov	r0, r3
 8001ebc:	3718      	adds	r7, #24
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	bd80      	pop	{r7, pc}

08001ec2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001ec2:	b580      	push	{r7, lr}
 8001ec4:	b086      	sub	sp, #24
 8001ec6:	af00      	add	r7, sp, #0
 8001ec8:	60f8      	str	r0, [r7, #12]
 8001eca:	60b9      	str	r1, [r7, #8]
 8001ecc:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ece:	2300      	movs	r3, #0
 8001ed0:	617b      	str	r3, [r7, #20]
 8001ed2:	e009      	b.n	8001ee8 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001ed4:	68bb      	ldr	r3, [r7, #8]
 8001ed6:	1c5a      	adds	r2, r3, #1
 8001ed8:	60ba      	str	r2, [r7, #8]
 8001eda:	781b      	ldrb	r3, [r3, #0]
 8001edc:	4618      	mov	r0, r3
 8001ede:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ee2:	697b      	ldr	r3, [r7, #20]
 8001ee4:	3301      	adds	r3, #1
 8001ee6:	617b      	str	r3, [r7, #20]
 8001ee8:	697a      	ldr	r2, [r7, #20]
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	429a      	cmp	r2, r3
 8001eee:	dbf1      	blt.n	8001ed4 <_write+0x12>
	}
	return len;
 8001ef0:	687b      	ldr	r3, [r7, #4]
}
 8001ef2:	4618      	mov	r0, r3
 8001ef4:	3718      	adds	r7, #24
 8001ef6:	46bd      	mov	sp, r7
 8001ef8:	bd80      	pop	{r7, pc}

08001efa <_close>:

int _close(int file)
{
 8001efa:	b480      	push	{r7}
 8001efc:	b083      	sub	sp, #12
 8001efe:	af00      	add	r7, sp, #0
 8001f00:	6078      	str	r0, [r7, #4]
	return -1;
 8001f02:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001f06:	4618      	mov	r0, r3
 8001f08:	370c      	adds	r7, #12
 8001f0a:	46bd      	mov	sp, r7
 8001f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f10:	4770      	bx	lr

08001f12 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001f12:	b480      	push	{r7}
 8001f14:	b083      	sub	sp, #12
 8001f16:	af00      	add	r7, sp, #0
 8001f18:	6078      	str	r0, [r7, #4]
 8001f1a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001f1c:	683b      	ldr	r3, [r7, #0]
 8001f1e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001f22:	605a      	str	r2, [r3, #4]
	return 0;
 8001f24:	2300      	movs	r3, #0
}
 8001f26:	4618      	mov	r0, r3
 8001f28:	370c      	adds	r7, #12
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f30:	4770      	bx	lr

08001f32 <_isatty>:

int _isatty(int file)
{
 8001f32:	b480      	push	{r7}
 8001f34:	b083      	sub	sp, #12
 8001f36:	af00      	add	r7, sp, #0
 8001f38:	6078      	str	r0, [r7, #4]
	return 1;
 8001f3a:	2301      	movs	r3, #1
}
 8001f3c:	4618      	mov	r0, r3
 8001f3e:	370c      	adds	r7, #12
 8001f40:	46bd      	mov	sp, r7
 8001f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f46:	4770      	bx	lr

08001f48 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001f48:	b480      	push	{r7}
 8001f4a:	b085      	sub	sp, #20
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	60f8      	str	r0, [r7, #12]
 8001f50:	60b9      	str	r1, [r7, #8]
 8001f52:	607a      	str	r2, [r7, #4]
	return 0;
 8001f54:	2300      	movs	r3, #0
}
 8001f56:	4618      	mov	r0, r3
 8001f58:	3714      	adds	r7, #20
 8001f5a:	46bd      	mov	sp, r7
 8001f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f60:	4770      	bx	lr
	...

08001f64 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8001f64:	b480      	push	{r7}
 8001f66:	b085      	sub	sp, #20
 8001f68:	af00      	add	r7, sp, #0
 8001f6a:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8001f6c:	4b11      	ldr	r3, [pc, #68]	; (8001fb4 <_sbrk+0x50>)
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d102      	bne.n	8001f7a <_sbrk+0x16>
		heap_end = &end;
 8001f74:	4b0f      	ldr	r3, [pc, #60]	; (8001fb4 <_sbrk+0x50>)
 8001f76:	4a10      	ldr	r2, [pc, #64]	; (8001fb8 <_sbrk+0x54>)
 8001f78:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8001f7a:	4b0e      	ldr	r3, [pc, #56]	; (8001fb4 <_sbrk+0x50>)
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8001f80:	4b0c      	ldr	r3, [pc, #48]	; (8001fb4 <_sbrk+0x50>)
 8001f82:	681a      	ldr	r2, [r3, #0]
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	4413      	add	r3, r2
 8001f88:	466a      	mov	r2, sp
 8001f8a:	4293      	cmp	r3, r2
 8001f8c:	d905      	bls.n	8001f9a <_sbrk+0x36>
	{
		errno = ENOMEM;
 8001f8e:	4b0b      	ldr	r3, [pc, #44]	; (8001fbc <_sbrk+0x58>)
 8001f90:	220c      	movs	r2, #12
 8001f92:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 8001f94:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001f98:	e006      	b.n	8001fa8 <_sbrk+0x44>
	}

	heap_end += incr;
 8001f9a:	4b06      	ldr	r3, [pc, #24]	; (8001fb4 <_sbrk+0x50>)
 8001f9c:	681a      	ldr	r2, [r3, #0]
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	4413      	add	r3, r2
 8001fa2:	4a04      	ldr	r2, [pc, #16]	; (8001fb4 <_sbrk+0x50>)
 8001fa4:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8001fa6:	68fb      	ldr	r3, [r7, #12]
}
 8001fa8:	4618      	mov	r0, r3
 8001faa:	3714      	adds	r7, #20
 8001fac:	46bd      	mov	sp, r7
 8001fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb2:	4770      	bx	lr
 8001fb4:	2000045c 	.word	0x2000045c
 8001fb8:	2000c408 	.word	0x2000c408
 8001fbc:	2000ab5c 	.word	0x2000ab5c

08001fc0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001fc0:	b480      	push	{r7}
 8001fc2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001fc4:	4b16      	ldr	r3, [pc, #88]	; (8002020 <SystemInit+0x60>)
 8001fc6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001fca:	4a15      	ldr	r2, [pc, #84]	; (8002020 <SystemInit+0x60>)
 8001fcc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001fd0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8001fd4:	4b13      	ldr	r3, [pc, #76]	; (8002024 <SystemInit+0x64>)
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	4a12      	ldr	r2, [pc, #72]	; (8002024 <SystemInit+0x64>)
 8001fda:	f043 0301 	orr.w	r3, r3, #1
 8001fde:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001fe0:	4b10      	ldr	r3, [pc, #64]	; (8002024 <SystemInit+0x64>)
 8001fe2:	2200      	movs	r2, #0
 8001fe4:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8001fe6:	4b0f      	ldr	r3, [pc, #60]	; (8002024 <SystemInit+0x64>)
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	4a0e      	ldr	r2, [pc, #56]	; (8002024 <SystemInit+0x64>)
 8001fec:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8001ff0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001ff4:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8001ff6:	4b0b      	ldr	r3, [pc, #44]	; (8002024 <SystemInit+0x64>)
 8001ff8:	4a0b      	ldr	r2, [pc, #44]	; (8002028 <SystemInit+0x68>)
 8001ffa:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8001ffc:	4b09      	ldr	r3, [pc, #36]	; (8002024 <SystemInit+0x64>)
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	4a08      	ldr	r2, [pc, #32]	; (8002024 <SystemInit+0x64>)
 8002002:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002006:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8002008:	4b06      	ldr	r3, [pc, #24]	; (8002024 <SystemInit+0x64>)
 800200a:	2200      	movs	r2, #0
 800200c:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800200e:	4b04      	ldr	r3, [pc, #16]	; (8002020 <SystemInit+0x60>)
 8002010:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002014:	609a      	str	r2, [r3, #8]
#endif
}
 8002016:	bf00      	nop
 8002018:	46bd      	mov	sp, r7
 800201a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800201e:	4770      	bx	lr
 8002020:	e000ed00 	.word	0xe000ed00
 8002024:	40023800 	.word	0x40023800
 8002028:	24003010 	.word	0x24003010

0800202c <MX_TIM2_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim4;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 800202c:	b580      	push	{r7, lr}
 800202e:	b08c      	sub	sp, #48	; 0x30
 8002030:	af00      	add	r7, sp, #0
  TIM_Encoder_InitTypeDef sConfig = {0};
 8002032:	f107 030c 	add.w	r3, r7, #12
 8002036:	2224      	movs	r2, #36	; 0x24
 8002038:	2100      	movs	r1, #0
 800203a:	4618      	mov	r0, r3
 800203c:	f018 fe28 	bl	801ac90 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002040:	1d3b      	adds	r3, r7, #4
 8002042:	2200      	movs	r2, #0
 8002044:	601a      	str	r2, [r3, #0]
 8002046:	605a      	str	r2, [r3, #4]

  htim2.Instance = TIM2;
 8002048:	4b21      	ldr	r3, [pc, #132]	; (80020d0 <MX_TIM2_Init+0xa4>)
 800204a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800204e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8002050:	4b1f      	ldr	r3, [pc, #124]	; (80020d0 <MX_TIM2_Init+0xa4>)
 8002052:	2200      	movs	r2, #0
 8002054:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002056:	4b1e      	ldr	r3, [pc, #120]	; (80020d0 <MX_TIM2_Init+0xa4>)
 8002058:	2200      	movs	r2, #0
 800205a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 0xFFFF;
 800205c:	4b1c      	ldr	r3, [pc, #112]	; (80020d0 <MX_TIM2_Init+0xa4>)
 800205e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002062:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002064:	4b1a      	ldr	r3, [pc, #104]	; (80020d0 <MX_TIM2_Init+0xa4>)
 8002066:	2200      	movs	r2, #0
 8002068:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800206a:	4b19      	ldr	r3, [pc, #100]	; (80020d0 <MX_TIM2_Init+0xa4>)
 800206c:	2200      	movs	r2, #0
 800206e:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8002070:	2303      	movs	r3, #3
 8002072:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002074:	2300      	movs	r3, #0
 8002076:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002078:	2301      	movs	r3, #1
 800207a:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800207c:	2300      	movs	r3, #0
 800207e:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8002080:	2300      	movs	r3, #0
 8002082:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002084:	2300      	movs	r3, #0
 8002086:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002088:	2301      	movs	r3, #1
 800208a:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800208c:	2300      	movs	r3, #0
 800208e:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8002090:	2300      	movs	r3, #0
 8002092:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8002094:	f107 030c 	add.w	r3, r7, #12
 8002098:	4619      	mov	r1, r3
 800209a:	480d      	ldr	r0, [pc, #52]	; (80020d0 <MX_TIM2_Init+0xa4>)
 800209c:	f003 fd84 	bl	8005ba8 <HAL_TIM_Encoder_Init>
 80020a0:	4603      	mov	r3, r0
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d001      	beq.n	80020aa <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 80020a6:	f7ff fdf3 	bl	8001c90 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80020aa:	2300      	movs	r3, #0
 80020ac:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80020ae:	2300      	movs	r3, #0
 80020b0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80020b2:	1d3b      	adds	r3, r7, #4
 80020b4:	4619      	mov	r1, r3
 80020b6:	4806      	ldr	r0, [pc, #24]	; (80020d0 <MX_TIM2_Init+0xa4>)
 80020b8:	f004 fc43 	bl	8006942 <HAL_TIMEx_MasterConfigSynchronization>
 80020bc:	4603      	mov	r3, r0
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d001      	beq.n	80020c6 <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 80020c2:	f7ff fde5 	bl	8001c90 <Error_Handler>
  }

}
 80020c6:	bf00      	nop
 80020c8:	3730      	adds	r7, #48	; 0x30
 80020ca:	46bd      	mov	sp, r7
 80020cc:	bd80      	pop	{r7, pc}
 80020ce:	bf00      	nop
 80020d0:	20004434 	.word	0x20004434

080020d4 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80020d4:	b580      	push	{r7, lr}
 80020d6:	b08c      	sub	sp, #48	; 0x30
 80020d8:	af00      	add	r7, sp, #0
  TIM_Encoder_InitTypeDef sConfig = {0};
 80020da:	f107 030c 	add.w	r3, r7, #12
 80020de:	2224      	movs	r2, #36	; 0x24
 80020e0:	2100      	movs	r1, #0
 80020e2:	4618      	mov	r0, r3
 80020e4:	f018 fdd4 	bl	801ac90 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80020e8:	1d3b      	adds	r3, r7, #4
 80020ea:	2200      	movs	r2, #0
 80020ec:	601a      	str	r2, [r3, #0]
 80020ee:	605a      	str	r2, [r3, #4]

  htim3.Instance = TIM3;
 80020f0:	4b20      	ldr	r3, [pc, #128]	; (8002174 <MX_TIM3_Init+0xa0>)
 80020f2:	4a21      	ldr	r2, [pc, #132]	; (8002178 <MX_TIM3_Init+0xa4>)
 80020f4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80020f6:	4b1f      	ldr	r3, [pc, #124]	; (8002174 <MX_TIM3_Init+0xa0>)
 80020f8:	2200      	movs	r2, #0
 80020fa:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80020fc:	4b1d      	ldr	r3, [pc, #116]	; (8002174 <MX_TIM3_Init+0xa0>)
 80020fe:	2200      	movs	r2, #0
 8002100:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 0xFFFF;
 8002102:	4b1c      	ldr	r3, [pc, #112]	; (8002174 <MX_TIM3_Init+0xa0>)
 8002104:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002108:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800210a:	4b1a      	ldr	r3, [pc, #104]	; (8002174 <MX_TIM3_Init+0xa0>)
 800210c:	2200      	movs	r2, #0
 800210e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002110:	4b18      	ldr	r3, [pc, #96]	; (8002174 <MX_TIM3_Init+0xa0>)
 8002112:	2200      	movs	r2, #0
 8002114:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8002116:	2303      	movs	r3, #3
 8002118:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800211a:	2300      	movs	r3, #0
 800211c:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800211e:	2301      	movs	r3, #1
 8002120:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002122:	2300      	movs	r3, #0
 8002124:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8002126:	2300      	movs	r3, #0
 8002128:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800212a:	2300      	movs	r3, #0
 800212c:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800212e:	2301      	movs	r3, #1
 8002130:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002132:	2300      	movs	r3, #0
 8002134:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8002136:	2300      	movs	r3, #0
 8002138:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 800213a:	f107 030c 	add.w	r3, r7, #12
 800213e:	4619      	mov	r1, r3
 8002140:	480c      	ldr	r0, [pc, #48]	; (8002174 <MX_TIM3_Init+0xa0>)
 8002142:	f003 fd31 	bl	8005ba8 <HAL_TIM_Encoder_Init>
 8002146:	4603      	mov	r3, r0
 8002148:	2b00      	cmp	r3, #0
 800214a:	d001      	beq.n	8002150 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 800214c:	f7ff fda0 	bl	8001c90 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002150:	2300      	movs	r3, #0
 8002152:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002154:	2300      	movs	r3, #0
 8002156:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002158:	1d3b      	adds	r3, r7, #4
 800215a:	4619      	mov	r1, r3
 800215c:	4805      	ldr	r0, [pc, #20]	; (8002174 <MX_TIM3_Init+0xa0>)
 800215e:	f004 fbf0 	bl	8006942 <HAL_TIMEx_MasterConfigSynchronization>
 8002162:	4603      	mov	r3, r0
 8002164:	2b00      	cmp	r3, #0
 8002166:	d001      	beq.n	800216c <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8002168:	f7ff fd92 	bl	8001c90 <Error_Handler>
  }

}
 800216c:	bf00      	nop
 800216e:	3730      	adds	r7, #48	; 0x30
 8002170:	46bd      	mov	sp, r7
 8002172:	bd80      	pop	{r7, pc}
 8002174:	200043f4 	.word	0x200043f4
 8002178:	40000400 	.word	0x40000400

0800217c <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 800217c:	b580      	push	{r7, lr}
 800217e:	b08e      	sub	sp, #56	; 0x38
 8002180:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002182:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002186:	2200      	movs	r2, #0
 8002188:	601a      	str	r2, [r3, #0]
 800218a:	605a      	str	r2, [r3, #4]
 800218c:	609a      	str	r2, [r3, #8]
 800218e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002190:	f107 0320 	add.w	r3, r7, #32
 8002194:	2200      	movs	r2, #0
 8002196:	601a      	str	r2, [r3, #0]
 8002198:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800219a:	1d3b      	adds	r3, r7, #4
 800219c:	2200      	movs	r2, #0
 800219e:	601a      	str	r2, [r3, #0]
 80021a0:	605a      	str	r2, [r3, #4]
 80021a2:	609a      	str	r2, [r3, #8]
 80021a4:	60da      	str	r2, [r3, #12]
 80021a6:	611a      	str	r2, [r3, #16]
 80021a8:	615a      	str	r2, [r3, #20]
 80021aa:	619a      	str	r2, [r3, #24]

  htim4.Instance = TIM4;
 80021ac:	4b33      	ldr	r3, [pc, #204]	; (800227c <MX_TIM4_Init+0x100>)
 80021ae:	4a34      	ldr	r2, [pc, #208]	; (8002280 <MX_TIM4_Init+0x104>)
 80021b0:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 1;
 80021b2:	4b32      	ldr	r3, [pc, #200]	; (800227c <MX_TIM4_Init+0x100>)
 80021b4:	2201      	movs	r2, #1
 80021b6:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80021b8:	4b30      	ldr	r3, [pc, #192]	; (800227c <MX_TIM4_Init+0x100>)
 80021ba:	2200      	movs	r2, #0
 80021bc:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 2250;
 80021be:	4b2f      	ldr	r3, [pc, #188]	; (800227c <MX_TIM4_Init+0x100>)
 80021c0:	f640 02ca 	movw	r2, #2250	; 0x8ca
 80021c4:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80021c6:	4b2d      	ldr	r3, [pc, #180]	; (800227c <MX_TIM4_Init+0x100>)
 80021c8:	2200      	movs	r2, #0
 80021ca:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80021cc:	4b2b      	ldr	r3, [pc, #172]	; (800227c <MX_TIM4_Init+0x100>)
 80021ce:	2280      	movs	r2, #128	; 0x80
 80021d0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80021d2:	482a      	ldr	r0, [pc, #168]	; (800227c <MX_TIM4_Init+0x100>)
 80021d4:	f003 fc64 	bl	8005aa0 <HAL_TIM_Base_Init>
 80021d8:	4603      	mov	r3, r0
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d001      	beq.n	80021e2 <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 80021de:	f7ff fd57 	bl	8001c90 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80021e2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80021e6:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80021e8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80021ec:	4619      	mov	r1, r3
 80021ee:	4823      	ldr	r0, [pc, #140]	; (800227c <MX_TIM4_Init+0x100>)
 80021f0:	f003 ffb8 	bl	8006164 <HAL_TIM_ConfigClockSource>
 80021f4:	4603      	mov	r3, r0
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d001      	beq.n	80021fe <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 80021fa:	f7ff fd49 	bl	8001c90 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80021fe:	481f      	ldr	r0, [pc, #124]	; (800227c <MX_TIM4_Init+0x100>)
 8002200:	f003 fc9d 	bl	8005b3e <HAL_TIM_PWM_Init>
 8002204:	4603      	mov	r3, r0
 8002206:	2b00      	cmp	r3, #0
 8002208:	d001      	beq.n	800220e <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 800220a:	f7ff fd41 	bl	8001c90 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800220e:	2300      	movs	r3, #0
 8002210:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002212:	2300      	movs	r3, #0
 8002214:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002216:	f107 0320 	add.w	r3, r7, #32
 800221a:	4619      	mov	r1, r3
 800221c:	4817      	ldr	r0, [pc, #92]	; (800227c <MX_TIM4_Init+0x100>)
 800221e:	f004 fb90 	bl	8006942 <HAL_TIMEx_MasterConfigSynchronization>
 8002222:	4603      	mov	r3, r0
 8002224:	2b00      	cmp	r3, #0
 8002226:	d001      	beq.n	800222c <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 8002228:	f7ff fd32 	bl	8001c90 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800222c:	2360      	movs	r3, #96	; 0x60
 800222e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 20;
 8002230:	2314      	movs	r3, #20
 8002232:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002234:	2300      	movs	r3, #0
 8002236:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002238:	2300      	movs	r3, #0
 800223a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800223c:	1d3b      	adds	r3, r7, #4
 800223e:	2208      	movs	r2, #8
 8002240:	4619      	mov	r1, r3
 8002242:	480e      	ldr	r0, [pc, #56]	; (800227c <MX_TIM4_Init+0x100>)
 8002244:	f003 fec8 	bl	8005fd8 <HAL_TIM_PWM_ConfigChannel>
 8002248:	4603      	mov	r3, r0
 800224a:	2b00      	cmp	r3, #0
 800224c:	d001      	beq.n	8002252 <MX_TIM4_Init+0xd6>
  {
    Error_Handler();
 800224e:	f7ff fd1f 	bl	8001c90 <Error_Handler>
  }
  sConfigOC.Pulse = 0;
 8002252:	2300      	movs	r3, #0
 8002254:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002256:	1d3b      	adds	r3, r7, #4
 8002258:	220c      	movs	r2, #12
 800225a:	4619      	mov	r1, r3
 800225c:	4807      	ldr	r0, [pc, #28]	; (800227c <MX_TIM4_Init+0x100>)
 800225e:	f003 febb 	bl	8005fd8 <HAL_TIM_PWM_ConfigChannel>
 8002262:	4603      	mov	r3, r0
 8002264:	2b00      	cmp	r3, #0
 8002266:	d001      	beq.n	800226c <MX_TIM4_Init+0xf0>
  {
    Error_Handler();
 8002268:	f7ff fd12 	bl	8001c90 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim4);
 800226c:	4803      	ldr	r0, [pc, #12]	; (800227c <MX_TIM4_Init+0x100>)
 800226e:	f000 f8c5 	bl	80023fc <HAL_TIM_MspPostInit>

}
 8002272:	bf00      	nop
 8002274:	3738      	adds	r7, #56	; 0x38
 8002276:	46bd      	mov	sp, r7
 8002278:	bd80      	pop	{r7, pc}
 800227a:	bf00      	nop
 800227c:	200043b4 	.word	0x200043b4
 8002280:	40000800 	.word	0x40000800

08002284 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8002284:	b580      	push	{r7, lr}
 8002286:	b08c      	sub	sp, #48	; 0x30
 8002288:	af00      	add	r7, sp, #0
 800228a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800228c:	f107 031c 	add.w	r3, r7, #28
 8002290:	2200      	movs	r2, #0
 8002292:	601a      	str	r2, [r3, #0]
 8002294:	605a      	str	r2, [r3, #4]
 8002296:	609a      	str	r2, [r3, #8]
 8002298:	60da      	str	r2, [r3, #12]
 800229a:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM2)
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80022a4:	d14b      	bne.n	800233e <HAL_TIM_Encoder_MspInit+0xba>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80022a6:	2300      	movs	r3, #0
 80022a8:	61bb      	str	r3, [r7, #24]
 80022aa:	4b3f      	ldr	r3, [pc, #252]	; (80023a8 <HAL_TIM_Encoder_MspInit+0x124>)
 80022ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022ae:	4a3e      	ldr	r2, [pc, #248]	; (80023a8 <HAL_TIM_Encoder_MspInit+0x124>)
 80022b0:	f043 0301 	orr.w	r3, r3, #1
 80022b4:	6413      	str	r3, [r2, #64]	; 0x40
 80022b6:	4b3c      	ldr	r3, [pc, #240]	; (80023a8 <HAL_TIM_Encoder_MspInit+0x124>)
 80022b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022ba:	f003 0301 	and.w	r3, r3, #1
 80022be:	61bb      	str	r3, [r7, #24]
 80022c0:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80022c2:	2300      	movs	r3, #0
 80022c4:	617b      	str	r3, [r7, #20]
 80022c6:	4b38      	ldr	r3, [pc, #224]	; (80023a8 <HAL_TIM_Encoder_MspInit+0x124>)
 80022c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022ca:	4a37      	ldr	r2, [pc, #220]	; (80023a8 <HAL_TIM_Encoder_MspInit+0x124>)
 80022cc:	f043 0301 	orr.w	r3, r3, #1
 80022d0:	6313      	str	r3, [r2, #48]	; 0x30
 80022d2:	4b35      	ldr	r3, [pc, #212]	; (80023a8 <HAL_TIM_Encoder_MspInit+0x124>)
 80022d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022d6:	f003 0301 	and.w	r3, r3, #1
 80022da:	617b      	str	r3, [r7, #20]
 80022dc:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80022de:	2300      	movs	r3, #0
 80022e0:	613b      	str	r3, [r7, #16]
 80022e2:	4b31      	ldr	r3, [pc, #196]	; (80023a8 <HAL_TIM_Encoder_MspInit+0x124>)
 80022e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022e6:	4a30      	ldr	r2, [pc, #192]	; (80023a8 <HAL_TIM_Encoder_MspInit+0x124>)
 80022e8:	f043 0302 	orr.w	r3, r3, #2
 80022ec:	6313      	str	r3, [r2, #48]	; 0x30
 80022ee:	4b2e      	ldr	r3, [pc, #184]	; (80023a8 <HAL_TIM_Encoder_MspInit+0x124>)
 80022f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022f2:	f003 0302 	and.w	r3, r3, #2
 80022f6:	613b      	str	r3, [r7, #16]
 80022f8:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration    
    PA15     ------> TIM2_CH1
    PB3     ------> TIM2_CH2 
    */
    GPIO_InitStruct.Pin = QEI_M1_CH1_Pin;
 80022fa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80022fe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002300:	2302      	movs	r3, #2
 8002302:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002304:	2301      	movs	r3, #1
 8002306:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002308:	2302      	movs	r3, #2
 800230a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800230c:	2301      	movs	r3, #1
 800230e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(QEI_M1_CH1_GPIO_Port, &GPIO_InitStruct);
 8002310:	f107 031c 	add.w	r3, r7, #28
 8002314:	4619      	mov	r1, r3
 8002316:	4825      	ldr	r0, [pc, #148]	; (80023ac <HAL_TIM_Encoder_MspInit+0x128>)
 8002318:	f001 fc12 	bl	8003b40 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QEI_M1_CH2_Pin;
 800231c:	2308      	movs	r3, #8
 800231e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002320:	2302      	movs	r3, #2
 8002322:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002324:	2301      	movs	r3, #1
 8002326:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002328:	2302      	movs	r3, #2
 800232a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800232c:	2301      	movs	r3, #1
 800232e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(QEI_M1_CH2_GPIO_Port, &GPIO_InitStruct);
 8002330:	f107 031c 	add.w	r3, r7, #28
 8002334:	4619      	mov	r1, r3
 8002336:	481e      	ldr	r0, [pc, #120]	; (80023b0 <HAL_TIM_Encoder_MspInit+0x12c>)
 8002338:	f001 fc02 	bl	8003b40 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 800233c:	e030      	b.n	80023a0 <HAL_TIM_Encoder_MspInit+0x11c>
  else if(tim_encoderHandle->Instance==TIM3)
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	4a1c      	ldr	r2, [pc, #112]	; (80023b4 <HAL_TIM_Encoder_MspInit+0x130>)
 8002344:	4293      	cmp	r3, r2
 8002346:	d12b      	bne.n	80023a0 <HAL_TIM_Encoder_MspInit+0x11c>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002348:	2300      	movs	r3, #0
 800234a:	60fb      	str	r3, [r7, #12]
 800234c:	4b16      	ldr	r3, [pc, #88]	; (80023a8 <HAL_TIM_Encoder_MspInit+0x124>)
 800234e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002350:	4a15      	ldr	r2, [pc, #84]	; (80023a8 <HAL_TIM_Encoder_MspInit+0x124>)
 8002352:	f043 0302 	orr.w	r3, r3, #2
 8002356:	6413      	str	r3, [r2, #64]	; 0x40
 8002358:	4b13      	ldr	r3, [pc, #76]	; (80023a8 <HAL_TIM_Encoder_MspInit+0x124>)
 800235a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800235c:	f003 0302 	and.w	r3, r3, #2
 8002360:	60fb      	str	r3, [r7, #12]
 8002362:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002364:	2300      	movs	r3, #0
 8002366:	60bb      	str	r3, [r7, #8]
 8002368:	4b0f      	ldr	r3, [pc, #60]	; (80023a8 <HAL_TIM_Encoder_MspInit+0x124>)
 800236a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800236c:	4a0e      	ldr	r2, [pc, #56]	; (80023a8 <HAL_TIM_Encoder_MspInit+0x124>)
 800236e:	f043 0302 	orr.w	r3, r3, #2
 8002372:	6313      	str	r3, [r2, #48]	; 0x30
 8002374:	4b0c      	ldr	r3, [pc, #48]	; (80023a8 <HAL_TIM_Encoder_MspInit+0x124>)
 8002376:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002378:	f003 0302 	and.w	r3, r3, #2
 800237c:	60bb      	str	r3, [r7, #8]
 800237e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = QEI_M2_CH1_Pin|QEI_M2_CH2_Pin;
 8002380:	2330      	movs	r3, #48	; 0x30
 8002382:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002384:	2302      	movs	r3, #2
 8002386:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002388:	2301      	movs	r3, #1
 800238a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800238c:	2302      	movs	r3, #2
 800238e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002390:	2302      	movs	r3, #2
 8002392:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002394:	f107 031c 	add.w	r3, r7, #28
 8002398:	4619      	mov	r1, r3
 800239a:	4805      	ldr	r0, [pc, #20]	; (80023b0 <HAL_TIM_Encoder_MspInit+0x12c>)
 800239c:	f001 fbd0 	bl	8003b40 <HAL_GPIO_Init>
}
 80023a0:	bf00      	nop
 80023a2:	3730      	adds	r7, #48	; 0x30
 80023a4:	46bd      	mov	sp, r7
 80023a6:	bd80      	pop	{r7, pc}
 80023a8:	40023800 	.word	0x40023800
 80023ac:	40020000 	.word	0x40020000
 80023b0:	40020400 	.word	0x40020400
 80023b4:	40000400 	.word	0x40000400

080023b8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80023b8:	b480      	push	{r7}
 80023ba:	b085      	sub	sp, #20
 80023bc:	af00      	add	r7, sp, #0
 80023be:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM4)
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	4a0b      	ldr	r2, [pc, #44]	; (80023f4 <HAL_TIM_Base_MspInit+0x3c>)
 80023c6:	4293      	cmp	r3, r2
 80023c8:	d10d      	bne.n	80023e6 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* TIM4 clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 80023ca:	2300      	movs	r3, #0
 80023cc:	60fb      	str	r3, [r7, #12]
 80023ce:	4b0a      	ldr	r3, [pc, #40]	; (80023f8 <HAL_TIM_Base_MspInit+0x40>)
 80023d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023d2:	4a09      	ldr	r2, [pc, #36]	; (80023f8 <HAL_TIM_Base_MspInit+0x40>)
 80023d4:	f043 0304 	orr.w	r3, r3, #4
 80023d8:	6413      	str	r3, [r2, #64]	; 0x40
 80023da:	4b07      	ldr	r3, [pc, #28]	; (80023f8 <HAL_TIM_Base_MspInit+0x40>)
 80023dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023de:	f003 0304 	and.w	r3, r3, #4
 80023e2:	60fb      	str	r3, [r7, #12]
 80023e4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 80023e6:	bf00      	nop
 80023e8:	3714      	adds	r7, #20
 80023ea:	46bd      	mov	sp, r7
 80023ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f0:	4770      	bx	lr
 80023f2:	bf00      	nop
 80023f4:	40000800 	.word	0x40000800
 80023f8:	40023800 	.word	0x40023800

080023fc <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80023fc:	b580      	push	{r7, lr}
 80023fe:	b088      	sub	sp, #32
 8002400:	af00      	add	r7, sp, #0
 8002402:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002404:	f107 030c 	add.w	r3, r7, #12
 8002408:	2200      	movs	r2, #0
 800240a:	601a      	str	r2, [r3, #0]
 800240c:	605a      	str	r2, [r3, #4]
 800240e:	609a      	str	r2, [r3, #8]
 8002410:	60da      	str	r2, [r3, #12]
 8002412:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM4)
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	4a12      	ldr	r2, [pc, #72]	; (8002464 <HAL_TIM_MspPostInit+0x68>)
 800241a:	4293      	cmp	r3, r2
 800241c:	d11e      	bne.n	800245c <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */
  
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800241e:	2300      	movs	r3, #0
 8002420:	60bb      	str	r3, [r7, #8]
 8002422:	4b11      	ldr	r3, [pc, #68]	; (8002468 <HAL_TIM_MspPostInit+0x6c>)
 8002424:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002426:	4a10      	ldr	r2, [pc, #64]	; (8002468 <HAL_TIM_MspPostInit+0x6c>)
 8002428:	f043 0308 	orr.w	r3, r3, #8
 800242c:	6313      	str	r3, [r2, #48]	; 0x30
 800242e:	4b0e      	ldr	r3, [pc, #56]	; (8002468 <HAL_TIM_MspPostInit+0x6c>)
 8002430:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002432:	f003 0308 	and.w	r3, r3, #8
 8002436:	60bb      	str	r3, [r7, #8]
 8002438:	68bb      	ldr	r3, [r7, #8]
    /**TIM4 GPIO Configuration    
    PD14     ------> TIM4_CH3
    PD15     ------> TIM4_CH4 
    */
    GPIO_InitStruct.Pin = CMD_MOTEUR_DROIT_Pin|CMD_MOTEUR_GAUCHE_Pin;
 800243a:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 800243e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002440:	2302      	movs	r3, #2
 8002442:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002444:	2300      	movs	r3, #0
 8002446:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002448:	2300      	movs	r3, #0
 800244a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800244c:	2302      	movs	r3, #2
 800244e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002450:	f107 030c 	add.w	r3, r7, #12
 8002454:	4619      	mov	r1, r3
 8002456:	4805      	ldr	r0, [pc, #20]	; (800246c <HAL_TIM_MspPostInit+0x70>)
 8002458:	f001 fb72 	bl	8003b40 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 800245c:	bf00      	nop
 800245e:	3720      	adds	r7, #32
 8002460:	46bd      	mov	sp, r7
 8002462:	bd80      	pop	{r7, pc}
 8002464:	40000800 	.word	0x40000800
 8002468:	40023800 	.word	0x40023800
 800246c:	40020c00 	.word	0x40020c00

08002470 <__NVIC_GetPriorityGrouping>:
{
 8002470:	b480      	push	{r7}
 8002472:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002474:	4b04      	ldr	r3, [pc, #16]	; (8002488 <__NVIC_GetPriorityGrouping+0x18>)
 8002476:	68db      	ldr	r3, [r3, #12]
 8002478:	0a1b      	lsrs	r3, r3, #8
 800247a:	f003 0307 	and.w	r3, r3, #7
}
 800247e:	4618      	mov	r0, r3
 8002480:	46bd      	mov	sp, r7
 8002482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002486:	4770      	bx	lr
 8002488:	e000ed00 	.word	0xe000ed00

0800248c <__NVIC_EnableIRQ>:
{
 800248c:	b480      	push	{r7}
 800248e:	b083      	sub	sp, #12
 8002490:	af00      	add	r7, sp, #0
 8002492:	4603      	mov	r3, r0
 8002494:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002496:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800249a:	2b00      	cmp	r3, #0
 800249c:	db0b      	blt.n	80024b6 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800249e:	79fb      	ldrb	r3, [r7, #7]
 80024a0:	f003 021f 	and.w	r2, r3, #31
 80024a4:	4907      	ldr	r1, [pc, #28]	; (80024c4 <__NVIC_EnableIRQ+0x38>)
 80024a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024aa:	095b      	lsrs	r3, r3, #5
 80024ac:	2001      	movs	r0, #1
 80024ae:	fa00 f202 	lsl.w	r2, r0, r2
 80024b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80024b6:	bf00      	nop
 80024b8:	370c      	adds	r7, #12
 80024ba:	46bd      	mov	sp, r7
 80024bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c0:	4770      	bx	lr
 80024c2:	bf00      	nop
 80024c4:	e000e100 	.word	0xe000e100

080024c8 <__NVIC_SetPriority>:
{
 80024c8:	b480      	push	{r7}
 80024ca:	b083      	sub	sp, #12
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	4603      	mov	r3, r0
 80024d0:	6039      	str	r1, [r7, #0]
 80024d2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80024d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024d8:	2b00      	cmp	r3, #0
 80024da:	db0a      	blt.n	80024f2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80024dc:	683b      	ldr	r3, [r7, #0]
 80024de:	b2da      	uxtb	r2, r3
 80024e0:	490c      	ldr	r1, [pc, #48]	; (8002514 <__NVIC_SetPriority+0x4c>)
 80024e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024e6:	0112      	lsls	r2, r2, #4
 80024e8:	b2d2      	uxtb	r2, r2
 80024ea:	440b      	add	r3, r1
 80024ec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80024f0:	e00a      	b.n	8002508 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80024f2:	683b      	ldr	r3, [r7, #0]
 80024f4:	b2da      	uxtb	r2, r3
 80024f6:	4908      	ldr	r1, [pc, #32]	; (8002518 <__NVIC_SetPriority+0x50>)
 80024f8:	79fb      	ldrb	r3, [r7, #7]
 80024fa:	f003 030f 	and.w	r3, r3, #15
 80024fe:	3b04      	subs	r3, #4
 8002500:	0112      	lsls	r2, r2, #4
 8002502:	b2d2      	uxtb	r2, r2
 8002504:	440b      	add	r3, r1
 8002506:	761a      	strb	r2, [r3, #24]
}
 8002508:	bf00      	nop
 800250a:	370c      	adds	r7, #12
 800250c:	46bd      	mov	sp, r7
 800250e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002512:	4770      	bx	lr
 8002514:	e000e100 	.word	0xe000e100
 8002518:	e000ed00 	.word	0xe000ed00

0800251c <NVIC_EncodePriority>:
{
 800251c:	b480      	push	{r7}
 800251e:	b089      	sub	sp, #36	; 0x24
 8002520:	af00      	add	r7, sp, #0
 8002522:	60f8      	str	r0, [r7, #12]
 8002524:	60b9      	str	r1, [r7, #8]
 8002526:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	f003 0307 	and.w	r3, r3, #7
 800252e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002530:	69fb      	ldr	r3, [r7, #28]
 8002532:	f1c3 0307 	rsb	r3, r3, #7
 8002536:	2b04      	cmp	r3, #4
 8002538:	bf28      	it	cs
 800253a:	2304      	movcs	r3, #4
 800253c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800253e:	69fb      	ldr	r3, [r7, #28]
 8002540:	3304      	adds	r3, #4
 8002542:	2b06      	cmp	r3, #6
 8002544:	d902      	bls.n	800254c <NVIC_EncodePriority+0x30>
 8002546:	69fb      	ldr	r3, [r7, #28]
 8002548:	3b03      	subs	r3, #3
 800254a:	e000      	b.n	800254e <NVIC_EncodePriority+0x32>
 800254c:	2300      	movs	r3, #0
 800254e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002550:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002554:	69bb      	ldr	r3, [r7, #24]
 8002556:	fa02 f303 	lsl.w	r3, r2, r3
 800255a:	43da      	mvns	r2, r3
 800255c:	68bb      	ldr	r3, [r7, #8]
 800255e:	401a      	ands	r2, r3
 8002560:	697b      	ldr	r3, [r7, #20]
 8002562:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002564:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002568:	697b      	ldr	r3, [r7, #20]
 800256a:	fa01 f303 	lsl.w	r3, r1, r3
 800256e:	43d9      	mvns	r1, r3
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002574:	4313      	orrs	r3, r2
}
 8002576:	4618      	mov	r0, r3
 8002578:	3724      	adds	r7, #36	; 0x24
 800257a:	46bd      	mov	sp, r7
 800257c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002580:	4770      	bx	lr

08002582 <LL_USART_Enable>:
  * @rmtoll CR1          UE            LL_USART_Enable
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_Enable(USART_TypeDef *USARTx)
{
 8002582:	b480      	push	{r7}
 8002584:	b083      	sub	sp, #12
 8002586:	af00      	add	r7, sp, #0
 8002588:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	68db      	ldr	r3, [r3, #12]
 800258e:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	60da      	str	r2, [r3, #12]
}
 8002596:	bf00      	nop
 8002598:	370c      	adds	r7, #12
 800259a:	46bd      	mov	sp, r7
 800259c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a0:	4770      	bx	lr

080025a2 <LL_USART_ConfigAsyncMode>:
  *         CR3          HDSEL         LL_USART_ConfigAsyncMode
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ConfigAsyncMode(USART_TypeDef *USARTx)
{
 80025a2:	b480      	push	{r7}
 80025a4:	b083      	sub	sp, #12
 80025a6:	af00      	add	r7, sp, #0
 80025a8:	6078      	str	r0, [r7, #4]
  /* In Asynchronous mode, the following bits must be kept cleared:
  - LINEN, CLKEN bits in the USART_CR2 register,
  - SCEN, IREN and HDSEL bits in the USART_CR3 register.*/
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	691b      	ldr	r3, [r3, #16]
 80025ae:	f423 4290 	bic.w	r2, r3, #18432	; 0x4800
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	695b      	ldr	r3, [r3, #20]
 80025ba:	f023 022a 	bic.w	r2, r3, #42	; 0x2a
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	615a      	str	r2, [r3, #20]
}
 80025c2:	bf00      	nop
 80025c4:	370c      	adds	r7, #12
 80025c6:	46bd      	mov	sp, r7
 80025c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025cc:	4770      	bx	lr
	...

080025d0 <LL_AHB1_GRP1_EnableClock>:
{
 80025d0:	b480      	push	{r7}
 80025d2:	b085      	sub	sp, #20
 80025d4:	af00      	add	r7, sp, #0
 80025d6:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 80025d8:	4b08      	ldr	r3, [pc, #32]	; (80025fc <LL_AHB1_GRP1_EnableClock+0x2c>)
 80025da:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80025dc:	4907      	ldr	r1, [pc, #28]	; (80025fc <LL_AHB1_GRP1_EnableClock+0x2c>)
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	4313      	orrs	r3, r2
 80025e2:	630b      	str	r3, [r1, #48]	; 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 80025e4:	4b05      	ldr	r3, [pc, #20]	; (80025fc <LL_AHB1_GRP1_EnableClock+0x2c>)
 80025e6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	4013      	ands	r3, r2
 80025ec:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80025ee:	68fb      	ldr	r3, [r7, #12]
}
 80025f0:	bf00      	nop
 80025f2:	3714      	adds	r7, #20
 80025f4:	46bd      	mov	sp, r7
 80025f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025fa:	4770      	bx	lr
 80025fc:	40023800 	.word	0x40023800

08002600 <LL_APB1_GRP1_EnableClock>:
{
 8002600:	b480      	push	{r7}
 8002602:	b085      	sub	sp, #20
 8002604:	af00      	add	r7, sp, #0
 8002606:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 8002608:	4b08      	ldr	r3, [pc, #32]	; (800262c <LL_APB1_GRP1_EnableClock+0x2c>)
 800260a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800260c:	4907      	ldr	r1, [pc, #28]	; (800262c <LL_APB1_GRP1_EnableClock+0x2c>)
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	4313      	orrs	r3, r2
 8002612:	640b      	str	r3, [r1, #64]	; 0x40
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8002614:	4b05      	ldr	r3, [pc, #20]	; (800262c <LL_APB1_GRP1_EnableClock+0x2c>)
 8002616:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	4013      	ands	r3, r2
 800261c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800261e:	68fb      	ldr	r3, [r7, #12]
}
 8002620:	bf00      	nop
 8002622:	3714      	adds	r7, #20
 8002624:	46bd      	mov	sp, r7
 8002626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800262a:	4770      	bx	lr
 800262c:	40023800 	.word	0x40023800

08002630 <MX_UART4_Init>:

UART_HandleTypeDef huart4;

/* UART4 init function */
void MX_UART4_Init(void)
{
 8002630:	b580      	push	{r7, lr}
 8002632:	af00      	add	r7, sp, #0

  huart4.Instance = UART4;
 8002634:	4b11      	ldr	r3, [pc, #68]	; (800267c <MX_UART4_Init+0x4c>)
 8002636:	4a12      	ldr	r2, [pc, #72]	; (8002680 <MX_UART4_Init+0x50>)
 8002638:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 57600;
 800263a:	4b10      	ldr	r3, [pc, #64]	; (800267c <MX_UART4_Init+0x4c>)
 800263c:	f44f 4261 	mov.w	r2, #57600	; 0xe100
 8002640:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8002642:	4b0e      	ldr	r3, [pc, #56]	; (800267c <MX_UART4_Init+0x4c>)
 8002644:	2200      	movs	r2, #0
 8002646:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8002648:	4b0c      	ldr	r3, [pc, #48]	; (800267c <MX_UART4_Init+0x4c>)
 800264a:	2200      	movs	r2, #0
 800264c:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 800264e:	4b0b      	ldr	r3, [pc, #44]	; (800267c <MX_UART4_Init+0x4c>)
 8002650:	2200      	movs	r2, #0
 8002652:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8002654:	4b09      	ldr	r3, [pc, #36]	; (800267c <MX_UART4_Init+0x4c>)
 8002656:	220c      	movs	r2, #12
 8002658:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800265a:	4b08      	ldr	r3, [pc, #32]	; (800267c <MX_UART4_Init+0x4c>)
 800265c:	2200      	movs	r2, #0
 800265e:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8002660:	4b06      	ldr	r3, [pc, #24]	; (800267c <MX_UART4_Init+0x4c>)
 8002662:	2200      	movs	r2, #0
 8002664:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8002666:	4805      	ldr	r0, [pc, #20]	; (800267c <MX_UART4_Init+0x4c>)
 8002668:	f004 f9c4 	bl	80069f4 <HAL_UART_Init>
 800266c:	4603      	mov	r3, r0
 800266e:	2b00      	cmp	r3, #0
 8002670:	d001      	beq.n	8002676 <MX_UART4_Init+0x46>
  {
    Error_Handler();
 8002672:	f7ff fb0d 	bl	8001c90 <Error_Handler>
  }

}
 8002676:	bf00      	nop
 8002678:	bd80      	pop	{r7, pc}
 800267a:	bf00      	nop
 800267c:	20004474 	.word	0x20004474
 8002680:	40004c00 	.word	0x40004c00

08002684 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8002684:	b580      	push	{r7, lr}
 8002686:	b08e      	sub	sp, #56	; 0x38
 8002688:	af00      	add	r7, sp, #0
  LL_USART_InitTypeDef USART_InitStruct = {0};
 800268a:	f107 031c 	add.w	r3, r7, #28
 800268e:	2200      	movs	r2, #0
 8002690:	601a      	str	r2, [r3, #0]
 8002692:	605a      	str	r2, [r3, #4]
 8002694:	609a      	str	r2, [r3, #8]
 8002696:	60da      	str	r2, [r3, #12]
 8002698:	611a      	str	r2, [r3, #16]
 800269a:	615a      	str	r2, [r3, #20]
 800269c:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800269e:	1d3b      	adds	r3, r7, #4
 80026a0:	2200      	movs	r2, #0
 80026a2:	601a      	str	r2, [r3, #0]
 80026a4:	605a      	str	r2, [r3, #4]
 80026a6:	609a      	str	r2, [r3, #8]
 80026a8:	60da      	str	r2, [r3, #12]
 80026aa:	611a      	str	r2, [r3, #16]
 80026ac:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_USART3);
 80026ae:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 80026b2:	f7ff ffa5 	bl	8002600 <LL_APB1_GRP1_EnableClock>
  
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOD);
 80026b6:	2008      	movs	r0, #8
 80026b8:	f7ff ff8a 	bl	80025d0 <LL_AHB1_GRP1_EnableClock>
  /**USART3 GPIO Configuration  
  PD8   ------> USART3_TX
  PD9   ------> USART3_RX 
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_8|LL_GPIO_PIN_9;
 80026bc:	f44f 7340 	mov.w	r3, #768	; 0x300
 80026c0:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80026c2:	2302      	movs	r3, #2
 80026c4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 80026c6:	2303      	movs	r3, #3
 80026c8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80026ca:	2300      	movs	r3, #0
 80026cc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 80026ce:	2301      	movs	r3, #1
 80026d0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 80026d2:	2307      	movs	r3, #7
 80026d4:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80026d6:	1d3b      	adds	r3, r7, #4
 80026d8:	4619      	mov	r1, r3
 80026da:	4819      	ldr	r0, [pc, #100]	; (8002740 <MX_USART3_UART_Init+0xbc>)
 80026dc:	f004 ff23 	bl	8007526 <LL_GPIO_Init>

  /* USART3 interrupt Init */
  NVIC_SetPriority(USART3_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),5, 0));
 80026e0:	f7ff fec6 	bl	8002470 <__NVIC_GetPriorityGrouping>
 80026e4:	4603      	mov	r3, r0
 80026e6:	2200      	movs	r2, #0
 80026e8:	2105      	movs	r1, #5
 80026ea:	4618      	mov	r0, r3
 80026ec:	f7ff ff16 	bl	800251c <NVIC_EncodePriority>
 80026f0:	4603      	mov	r3, r0
 80026f2:	4619      	mov	r1, r3
 80026f4:	2027      	movs	r0, #39	; 0x27
 80026f6:	f7ff fee7 	bl	80024c8 <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART3_IRQn);
 80026fa:	2027      	movs	r0, #39	; 0x27
 80026fc:	f7ff fec6 	bl	800248c <__NVIC_EnableIRQ>

  USART_InitStruct.BaudRate = 57600;
 8002700:	f44f 4361 	mov.w	r3, #57600	; 0xe100
 8002704:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8002706:	2300      	movs	r3, #0
 8002708:	623b      	str	r3, [r7, #32]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 800270a:	2300      	movs	r3, #0
 800270c:	627b      	str	r3, [r7, #36]	; 0x24
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 800270e:	2300      	movs	r3, #0
 8002710:	62bb      	str	r3, [r7, #40]	; 0x28
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8002712:	230c      	movs	r3, #12
 8002714:	62fb      	str	r3, [r7, #44]	; 0x2c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8002716:	2300      	movs	r3, #0
 8002718:	633b      	str	r3, [r7, #48]	; 0x30
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 800271a:	2300      	movs	r3, #0
 800271c:	637b      	str	r3, [r7, #52]	; 0x34
  LL_USART_Init(USART3, &USART_InitStruct);
 800271e:	f107 031c 	add.w	r3, r7, #28
 8002722:	4619      	mov	r1, r3
 8002724:	4807      	ldr	r0, [pc, #28]	; (8002744 <MX_USART3_UART_Init+0xc0>)
 8002726:	f005 fae1 	bl	8007cec <LL_USART_Init>
  LL_USART_ConfigAsyncMode(USART3);
 800272a:	4806      	ldr	r0, [pc, #24]	; (8002744 <MX_USART3_UART_Init+0xc0>)
 800272c:	f7ff ff39 	bl	80025a2 <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART3);
 8002730:	4804      	ldr	r0, [pc, #16]	; (8002744 <MX_USART3_UART_Init+0xc0>)
 8002732:	f7ff ff26 	bl	8002582 <LL_USART_Enable>

}
 8002736:	bf00      	nop
 8002738:	3738      	adds	r7, #56	; 0x38
 800273a:	46bd      	mov	sp, r7
 800273c:	bd80      	pop	{r7, pc}
 800273e:	bf00      	nop
 8002740:	40020c00 	.word	0x40020c00
 8002744:	40004800 	.word	0x40004800

08002748 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002748:	b580      	push	{r7, lr}
 800274a:	b08a      	sub	sp, #40	; 0x28
 800274c:	af00      	add	r7, sp, #0
 800274e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002750:	f107 0314 	add.w	r3, r7, #20
 8002754:	2200      	movs	r2, #0
 8002756:	601a      	str	r2, [r3, #0]
 8002758:	605a      	str	r2, [r3, #4]
 800275a:	609a      	str	r2, [r3, #8]
 800275c:	60da      	str	r2, [r3, #12]
 800275e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==UART4)
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	4a21      	ldr	r2, [pc, #132]	; (80027ec <HAL_UART_MspInit+0xa4>)
 8002766:	4293      	cmp	r3, r2
 8002768:	d13c      	bne.n	80027e4 <HAL_UART_MspInit+0x9c>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 800276a:	2300      	movs	r3, #0
 800276c:	613b      	str	r3, [r7, #16]
 800276e:	4b20      	ldr	r3, [pc, #128]	; (80027f0 <HAL_UART_MspInit+0xa8>)
 8002770:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002772:	4a1f      	ldr	r2, [pc, #124]	; (80027f0 <HAL_UART_MspInit+0xa8>)
 8002774:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8002778:	6413      	str	r3, [r2, #64]	; 0x40
 800277a:	4b1d      	ldr	r3, [pc, #116]	; (80027f0 <HAL_UART_MspInit+0xa8>)
 800277c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800277e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002782:	613b      	str	r3, [r7, #16]
 8002784:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002786:	2300      	movs	r3, #0
 8002788:	60fb      	str	r3, [r7, #12]
 800278a:	4b19      	ldr	r3, [pc, #100]	; (80027f0 <HAL_UART_MspInit+0xa8>)
 800278c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800278e:	4a18      	ldr	r2, [pc, #96]	; (80027f0 <HAL_UART_MspInit+0xa8>)
 8002790:	f043 0304 	orr.w	r3, r3, #4
 8002794:	6313      	str	r3, [r2, #48]	; 0x30
 8002796:	4b16      	ldr	r3, [pc, #88]	; (80027f0 <HAL_UART_MspInit+0xa8>)
 8002798:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800279a:	f003 0304 	and.w	r3, r3, #4
 800279e:	60fb      	str	r3, [r7, #12]
 80027a0:	68fb      	ldr	r3, [r7, #12]
    /**UART4 GPIO Configuration    
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80027a2:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80027a6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027a8:	2302      	movs	r3, #2
 80027aa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80027ac:	2301      	movs	r3, #1
 80027ae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80027b0:	2303      	movs	r3, #3
 80027b2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80027b4:	2308      	movs	r3, #8
 80027b6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80027b8:	f107 0314 	add.w	r3, r7, #20
 80027bc:	4619      	mov	r1, r3
 80027be:	480d      	ldr	r0, [pc, #52]	; (80027f4 <HAL_UART_MspInit+0xac>)
 80027c0:	f001 f9be 	bl	8003b40 <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 5, 0);
 80027c4:	2200      	movs	r2, #0
 80027c6:	2105      	movs	r1, #5
 80027c8:	2034      	movs	r0, #52	; 0x34
 80027ca:	f000 f95b 	bl	8002a84 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 80027ce:	2034      	movs	r0, #52	; 0x34
 80027d0:	f000 f974 	bl	8002abc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN UART4_MspInit 1 */
	UART4->CR1 |= USART_CR1_UE 	// UART Enable
 80027d4:	4b05      	ldr	r3, [pc, #20]	; (80027ec <HAL_UART_MspInit+0xa4>)
 80027d6:	68db      	ldr	r3, [r3, #12]
 80027d8:	4a04      	ldr	r2, [pc, #16]	; (80027ec <HAL_UART_MspInit+0xa4>)
 80027da:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80027de:	f043 0324 	orr.w	r3, r3, #36	; 0x24
 80027e2:	60d3      	str	r3, [r2, #12]
				| USART_CR1_RE		// Rx enbale
				| USART_CR1_RXNEIE;	// Rx enable interrupt
  /* USER CODE END UART4_MspInit 1 */
  }
}
 80027e4:	bf00      	nop
 80027e6:	3728      	adds	r7, #40	; 0x28
 80027e8:	46bd      	mov	sp, r7
 80027ea:	bd80      	pop	{r7, pc}
 80027ec:	40004c00 	.word	0x40004c00
 80027f0:	40023800 	.word	0x40023800
 80027f4:	40020800 	.word	0x40020800

080027f8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 80027f8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002830 <LoopFillZerobss+0x14>
 
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80027fc:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80027fe:	e003      	b.n	8002808 <LoopCopyDataInit>

08002800 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8002800:	4b0c      	ldr	r3, [pc, #48]	; (8002834 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8002802:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002804:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8002806:	3104      	adds	r1, #4

08002808 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002808:	480b      	ldr	r0, [pc, #44]	; (8002838 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800280a:	4b0c      	ldr	r3, [pc, #48]	; (800283c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800280c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800280e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002810:	d3f6      	bcc.n	8002800 <CopyDataInit>
  ldr  r2, =_sbss
 8002812:	4a0b      	ldr	r2, [pc, #44]	; (8002840 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8002814:	e002      	b.n	800281c <LoopFillZerobss>

08002816 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8002816:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002818:	f842 3b04 	str.w	r3, [r2], #4

0800281c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800281c:	4b09      	ldr	r3, [pc, #36]	; (8002844 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800281e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002820:	d3f9      	bcc.n	8002816 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002822:	f7ff fbcd 	bl	8001fc0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002826:	f018 f9e5 	bl	801abf4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800282a:	f7ff f999 	bl	8001b60 <main>
  bx  lr    
 800282e:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8002830:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 8002834:	0801e8c4 	.word	0x0801e8c4
  ldr  r0, =_sdata
 8002838:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800283c:	200001ec 	.word	0x200001ec
  ldr  r2, =_sbss
 8002840:	200001ec 	.word	0x200001ec
  ldr  r3, = _ebss
 8002844:	2000c408 	.word	0x2000c408

08002848 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002848:	e7fe      	b.n	8002848 <ADC_IRQHandler>
	...

0800284c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800284c:	b580      	push	{r7, lr}
 800284e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002850:	4b0e      	ldr	r3, [pc, #56]	; (800288c <HAL_Init+0x40>)
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	4a0d      	ldr	r2, [pc, #52]	; (800288c <HAL_Init+0x40>)
 8002856:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800285a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800285c:	4b0b      	ldr	r3, [pc, #44]	; (800288c <HAL_Init+0x40>)
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	4a0a      	ldr	r2, [pc, #40]	; (800288c <HAL_Init+0x40>)
 8002862:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002866:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002868:	4b08      	ldr	r3, [pc, #32]	; (800288c <HAL_Init+0x40>)
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	4a07      	ldr	r2, [pc, #28]	; (800288c <HAL_Init+0x40>)
 800286e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002872:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002874:	2003      	movs	r0, #3
 8002876:	f000 f8fa 	bl	8002a6e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800287a:	2000      	movs	r0, #0
 800287c:	f7ff fa3c 	bl	8001cf8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002880:	f7ff fa0e 	bl	8001ca0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002884:	2300      	movs	r3, #0
}
 8002886:	4618      	mov	r0, r3
 8002888:	bd80      	pop	{r7, pc}
 800288a:	bf00      	nop
 800288c:	40023c00 	.word	0x40023c00

08002890 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002890:	b480      	push	{r7}
 8002892:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002894:	4b06      	ldr	r3, [pc, #24]	; (80028b0 <HAL_IncTick+0x20>)
 8002896:	781b      	ldrb	r3, [r3, #0]
 8002898:	461a      	mov	r2, r3
 800289a:	4b06      	ldr	r3, [pc, #24]	; (80028b4 <HAL_IncTick+0x24>)
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	4413      	add	r3, r2
 80028a0:	4a04      	ldr	r2, [pc, #16]	; (80028b4 <HAL_IncTick+0x24>)
 80028a2:	6013      	str	r3, [r2, #0]
}
 80028a4:	bf00      	nop
 80028a6:	46bd      	mov	sp, r7
 80028a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ac:	4770      	bx	lr
 80028ae:	bf00      	nop
 80028b0:	20000004 	.word	0x20000004
 80028b4:	200044b4 	.word	0x200044b4

080028b8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80028b8:	b480      	push	{r7}
 80028ba:	af00      	add	r7, sp, #0
  return uwTick;
 80028bc:	4b03      	ldr	r3, [pc, #12]	; (80028cc <HAL_GetTick+0x14>)
 80028be:	681b      	ldr	r3, [r3, #0]
}
 80028c0:	4618      	mov	r0, r3
 80028c2:	46bd      	mov	sp, r7
 80028c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c8:	4770      	bx	lr
 80028ca:	bf00      	nop
 80028cc:	200044b4 	.word	0x200044b4

080028d0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80028d0:	b580      	push	{r7, lr}
 80028d2:	b084      	sub	sp, #16
 80028d4:	af00      	add	r7, sp, #0
 80028d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80028d8:	f7ff ffee 	bl	80028b8 <HAL_GetTick>
 80028dc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80028e8:	d005      	beq.n	80028f6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80028ea:	4b09      	ldr	r3, [pc, #36]	; (8002910 <HAL_Delay+0x40>)
 80028ec:	781b      	ldrb	r3, [r3, #0]
 80028ee:	461a      	mov	r2, r3
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	4413      	add	r3, r2
 80028f4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80028f6:	bf00      	nop
 80028f8:	f7ff ffde 	bl	80028b8 <HAL_GetTick>
 80028fc:	4602      	mov	r2, r0
 80028fe:	68bb      	ldr	r3, [r7, #8]
 8002900:	1ad3      	subs	r3, r2, r3
 8002902:	68fa      	ldr	r2, [r7, #12]
 8002904:	429a      	cmp	r2, r3
 8002906:	d8f7      	bhi.n	80028f8 <HAL_Delay+0x28>
  {
  }
}
 8002908:	bf00      	nop
 800290a:	3710      	adds	r7, #16
 800290c:	46bd      	mov	sp, r7
 800290e:	bd80      	pop	{r7, pc}
 8002910:	20000004 	.word	0x20000004

08002914 <__NVIC_SetPriorityGrouping>:
{
 8002914:	b480      	push	{r7}
 8002916:	b085      	sub	sp, #20
 8002918:	af00      	add	r7, sp, #0
 800291a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	f003 0307 	and.w	r3, r3, #7
 8002922:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002924:	4b0c      	ldr	r3, [pc, #48]	; (8002958 <__NVIC_SetPriorityGrouping+0x44>)
 8002926:	68db      	ldr	r3, [r3, #12]
 8002928:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800292a:	68ba      	ldr	r2, [r7, #8]
 800292c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002930:	4013      	ands	r3, r2
 8002932:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002938:	68bb      	ldr	r3, [r7, #8]
 800293a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800293c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002940:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002944:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002946:	4a04      	ldr	r2, [pc, #16]	; (8002958 <__NVIC_SetPriorityGrouping+0x44>)
 8002948:	68bb      	ldr	r3, [r7, #8]
 800294a:	60d3      	str	r3, [r2, #12]
}
 800294c:	bf00      	nop
 800294e:	3714      	adds	r7, #20
 8002950:	46bd      	mov	sp, r7
 8002952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002956:	4770      	bx	lr
 8002958:	e000ed00 	.word	0xe000ed00

0800295c <__NVIC_GetPriorityGrouping>:
{
 800295c:	b480      	push	{r7}
 800295e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002960:	4b04      	ldr	r3, [pc, #16]	; (8002974 <__NVIC_GetPriorityGrouping+0x18>)
 8002962:	68db      	ldr	r3, [r3, #12]
 8002964:	0a1b      	lsrs	r3, r3, #8
 8002966:	f003 0307 	and.w	r3, r3, #7
}
 800296a:	4618      	mov	r0, r3
 800296c:	46bd      	mov	sp, r7
 800296e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002972:	4770      	bx	lr
 8002974:	e000ed00 	.word	0xe000ed00

08002978 <__NVIC_EnableIRQ>:
{
 8002978:	b480      	push	{r7}
 800297a:	b083      	sub	sp, #12
 800297c:	af00      	add	r7, sp, #0
 800297e:	4603      	mov	r3, r0
 8002980:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002982:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002986:	2b00      	cmp	r3, #0
 8002988:	db0b      	blt.n	80029a2 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800298a:	79fb      	ldrb	r3, [r7, #7]
 800298c:	f003 021f 	and.w	r2, r3, #31
 8002990:	4907      	ldr	r1, [pc, #28]	; (80029b0 <__NVIC_EnableIRQ+0x38>)
 8002992:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002996:	095b      	lsrs	r3, r3, #5
 8002998:	2001      	movs	r0, #1
 800299a:	fa00 f202 	lsl.w	r2, r0, r2
 800299e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80029a2:	bf00      	nop
 80029a4:	370c      	adds	r7, #12
 80029a6:	46bd      	mov	sp, r7
 80029a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ac:	4770      	bx	lr
 80029ae:	bf00      	nop
 80029b0:	e000e100 	.word	0xe000e100

080029b4 <__NVIC_SetPriority>:
{
 80029b4:	b480      	push	{r7}
 80029b6:	b083      	sub	sp, #12
 80029b8:	af00      	add	r7, sp, #0
 80029ba:	4603      	mov	r3, r0
 80029bc:	6039      	str	r1, [r7, #0]
 80029be:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80029c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	db0a      	blt.n	80029de <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80029c8:	683b      	ldr	r3, [r7, #0]
 80029ca:	b2da      	uxtb	r2, r3
 80029cc:	490c      	ldr	r1, [pc, #48]	; (8002a00 <__NVIC_SetPriority+0x4c>)
 80029ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029d2:	0112      	lsls	r2, r2, #4
 80029d4:	b2d2      	uxtb	r2, r2
 80029d6:	440b      	add	r3, r1
 80029d8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80029dc:	e00a      	b.n	80029f4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80029de:	683b      	ldr	r3, [r7, #0]
 80029e0:	b2da      	uxtb	r2, r3
 80029e2:	4908      	ldr	r1, [pc, #32]	; (8002a04 <__NVIC_SetPriority+0x50>)
 80029e4:	79fb      	ldrb	r3, [r7, #7]
 80029e6:	f003 030f 	and.w	r3, r3, #15
 80029ea:	3b04      	subs	r3, #4
 80029ec:	0112      	lsls	r2, r2, #4
 80029ee:	b2d2      	uxtb	r2, r2
 80029f0:	440b      	add	r3, r1
 80029f2:	761a      	strb	r2, [r3, #24]
}
 80029f4:	bf00      	nop
 80029f6:	370c      	adds	r7, #12
 80029f8:	46bd      	mov	sp, r7
 80029fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029fe:	4770      	bx	lr
 8002a00:	e000e100 	.word	0xe000e100
 8002a04:	e000ed00 	.word	0xe000ed00

08002a08 <NVIC_EncodePriority>:
{
 8002a08:	b480      	push	{r7}
 8002a0a:	b089      	sub	sp, #36	; 0x24
 8002a0c:	af00      	add	r7, sp, #0
 8002a0e:	60f8      	str	r0, [r7, #12]
 8002a10:	60b9      	str	r1, [r7, #8]
 8002a12:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	f003 0307 	and.w	r3, r3, #7
 8002a1a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002a1c:	69fb      	ldr	r3, [r7, #28]
 8002a1e:	f1c3 0307 	rsb	r3, r3, #7
 8002a22:	2b04      	cmp	r3, #4
 8002a24:	bf28      	it	cs
 8002a26:	2304      	movcs	r3, #4
 8002a28:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002a2a:	69fb      	ldr	r3, [r7, #28]
 8002a2c:	3304      	adds	r3, #4
 8002a2e:	2b06      	cmp	r3, #6
 8002a30:	d902      	bls.n	8002a38 <NVIC_EncodePriority+0x30>
 8002a32:	69fb      	ldr	r3, [r7, #28]
 8002a34:	3b03      	subs	r3, #3
 8002a36:	e000      	b.n	8002a3a <NVIC_EncodePriority+0x32>
 8002a38:	2300      	movs	r3, #0
 8002a3a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a3c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002a40:	69bb      	ldr	r3, [r7, #24]
 8002a42:	fa02 f303 	lsl.w	r3, r2, r3
 8002a46:	43da      	mvns	r2, r3
 8002a48:	68bb      	ldr	r3, [r7, #8]
 8002a4a:	401a      	ands	r2, r3
 8002a4c:	697b      	ldr	r3, [r7, #20]
 8002a4e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002a50:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002a54:	697b      	ldr	r3, [r7, #20]
 8002a56:	fa01 f303 	lsl.w	r3, r1, r3
 8002a5a:	43d9      	mvns	r1, r3
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a60:	4313      	orrs	r3, r2
}
 8002a62:	4618      	mov	r0, r3
 8002a64:	3724      	adds	r7, #36	; 0x24
 8002a66:	46bd      	mov	sp, r7
 8002a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a6c:	4770      	bx	lr

08002a6e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a6e:	b580      	push	{r7, lr}
 8002a70:	b082      	sub	sp, #8
 8002a72:	af00      	add	r7, sp, #0
 8002a74:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002a76:	6878      	ldr	r0, [r7, #4]
 8002a78:	f7ff ff4c 	bl	8002914 <__NVIC_SetPriorityGrouping>
}
 8002a7c:	bf00      	nop
 8002a7e:	3708      	adds	r7, #8
 8002a80:	46bd      	mov	sp, r7
 8002a82:	bd80      	pop	{r7, pc}

08002a84 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002a84:	b580      	push	{r7, lr}
 8002a86:	b086      	sub	sp, #24
 8002a88:	af00      	add	r7, sp, #0
 8002a8a:	4603      	mov	r3, r0
 8002a8c:	60b9      	str	r1, [r7, #8]
 8002a8e:	607a      	str	r2, [r7, #4]
 8002a90:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002a92:	2300      	movs	r3, #0
 8002a94:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002a96:	f7ff ff61 	bl	800295c <__NVIC_GetPriorityGrouping>
 8002a9a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002a9c:	687a      	ldr	r2, [r7, #4]
 8002a9e:	68b9      	ldr	r1, [r7, #8]
 8002aa0:	6978      	ldr	r0, [r7, #20]
 8002aa2:	f7ff ffb1 	bl	8002a08 <NVIC_EncodePriority>
 8002aa6:	4602      	mov	r2, r0
 8002aa8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002aac:	4611      	mov	r1, r2
 8002aae:	4618      	mov	r0, r3
 8002ab0:	f7ff ff80 	bl	80029b4 <__NVIC_SetPriority>
}
 8002ab4:	bf00      	nop
 8002ab6:	3718      	adds	r7, #24
 8002ab8:	46bd      	mov	sp, r7
 8002aba:	bd80      	pop	{r7, pc}

08002abc <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002abc:	b580      	push	{r7, lr}
 8002abe:	b082      	sub	sp, #8
 8002ac0:	af00      	add	r7, sp, #0
 8002ac2:	4603      	mov	r3, r0
 8002ac4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002ac6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002aca:	4618      	mov	r0, r3
 8002acc:	f7ff ff54 	bl	8002978 <__NVIC_EnableIRQ>
}
 8002ad0:	bf00      	nop
 8002ad2:	3708      	adds	r7, #8
 8002ad4:	46bd      	mov	sp, r7
 8002ad6:	bd80      	pop	{r7, pc}

08002ad8 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002ad8:	b480      	push	{r7}
 8002ada:	b083      	sub	sp, #12
 8002adc:	af00      	add	r7, sp, #0
 8002ade:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002ae6:	b2db      	uxtb	r3, r3
 8002ae8:	2b02      	cmp	r3, #2
 8002aea:	d004      	beq.n	8002af6 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	2280      	movs	r2, #128	; 0x80
 8002af0:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002af2:	2301      	movs	r3, #1
 8002af4:	e00c      	b.n	8002b10 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	2205      	movs	r2, #5
 8002afa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	681a      	ldr	r2, [r3, #0]
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	f022 0201 	bic.w	r2, r2, #1
 8002b0c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002b0e:	2300      	movs	r3, #0
}
 8002b10:	4618      	mov	r0, r3
 8002b12:	370c      	adds	r7, #12
 8002b14:	46bd      	mov	sp, r7
 8002b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b1a:	4770      	bx	lr

08002b1c <HAL_ETH_Init>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8002b1c:	b580      	push	{r7, lr}
 8002b1e:	b088      	sub	sp, #32
 8002b20:	af00      	add	r7, sp, #0
 8002b22:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1 = 0U, phyreg = 0U;
 8002b24:	2300      	movs	r3, #0
 8002b26:	61fb      	str	r3, [r7, #28]
 8002b28:	2300      	movs	r3, #0
 8002b2a:	60fb      	str	r3, [r7, #12]
  uint32_t hclk = 60000000U;
 8002b2c:	4baa      	ldr	r3, [pc, #680]	; (8002dd8 <HAL_ETH_Init+0x2bc>)
 8002b2e:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart = 0U;
 8002b30:	2300      	movs	r3, #0
 8002b32:	617b      	str	r3, [r7, #20]
  uint32_t err = ETH_SUCCESS;
 8002b34:	2300      	movs	r3, #0
 8002b36:	613b      	str	r3, [r7, #16]
  
  /* Check the ETH peripheral state */
  if(heth == NULL)
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d101      	bne.n	8002b42 <HAL_ETH_Init+0x26>
  {
    return HAL_ERROR;
 8002b3e:	2301      	movs	r3, #1
 8002b40:	e185      	b.n	8002e4e <HAL_ETH_Init+0x332>
  assert_param(IS_ETH_AUTONEGOTIATION(heth->Init.AutoNegotiation));
  assert_param(IS_ETH_RX_MODE(heth->Init.RxMode));
  assert_param(IS_ETH_CHECKSUM_MODE(heth->Init.ChecksumMode));
  assert_param(IS_ETH_MEDIA_INTERFACE(heth->Init.MediaInterface));  
  
  if(heth->State == HAL_ETH_STATE_RESET)
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002b48:	b2db      	uxtb	r3, r3
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d106      	bne.n	8002b5c <HAL_ETH_Init+0x40>
  {
    /* Allocate lock resource and initialize it */
    heth->Lock = HAL_UNLOCKED;
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	2200      	movs	r2, #0
 8002b52:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    heth->MspInitCallback(heth);

#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8002b56:	6878      	ldr	r0, [r7, #4]
 8002b58:	f006 fd64 	bl	8009624 <HAL_ETH_MspInit>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
  
  /* Enable SYSCFG Clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002b5c:	2300      	movs	r3, #0
 8002b5e:	60bb      	str	r3, [r7, #8]
 8002b60:	4b9e      	ldr	r3, [pc, #632]	; (8002ddc <HAL_ETH_Init+0x2c0>)
 8002b62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b64:	4a9d      	ldr	r2, [pc, #628]	; (8002ddc <HAL_ETH_Init+0x2c0>)
 8002b66:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002b6a:	6453      	str	r3, [r2, #68]	; 0x44
 8002b6c:	4b9b      	ldr	r3, [pc, #620]	; (8002ddc <HAL_ETH_Init+0x2c0>)
 8002b6e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b70:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002b74:	60bb      	str	r3, [r7, #8]
 8002b76:	68bb      	ldr	r3, [r7, #8]
  
  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8002b78:	4b99      	ldr	r3, [pc, #612]	; (8002de0 <HAL_ETH_Init+0x2c4>)
 8002b7a:	685b      	ldr	r3, [r3, #4]
 8002b7c:	4a98      	ldr	r2, [pc, #608]	; (8002de0 <HAL_ETH_Init+0x2c4>)
 8002b7e:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002b82:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8002b84:	4b96      	ldr	r3, [pc, #600]	; (8002de0 <HAL_ETH_Init+0x2c4>)
 8002b86:	685a      	ldr	r2, [r3, #4]
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	6a1b      	ldr	r3, [r3, #32]
 8002b8c:	4994      	ldr	r1, [pc, #592]	; (8002de0 <HAL_ETH_Init+0x2c4>)
 8002b8e:	4313      	orrs	r3, r2
 8002b90:	604b      	str	r3, [r1, #4]
  
  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002b9a:	681a      	ldr	r2, [r3, #0]
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	f042 0201 	orr.w	r2, r2, #1
 8002ba4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002ba8:	601a      	str	r2, [r3, #0]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8002baa:	f7ff fe85 	bl	80028b8 <HAL_GetTick>
 8002bae:	6178      	str	r0, [r7, #20]
  
  /* Wait for software reset */
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8002bb0:	e011      	b.n	8002bd6 <HAL_ETH_Init+0xba>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_SWRESET)
 8002bb2:	f7ff fe81 	bl	80028b8 <HAL_GetTick>
 8002bb6:	4602      	mov	r2, r0
 8002bb8:	697b      	ldr	r3, [r7, #20]
 8002bba:	1ad3      	subs	r3, r2, r3
 8002bbc:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002bc0:	d909      	bls.n	8002bd6 <HAL_ETH_Init+0xba>
    {     
      heth->State= HAL_ETH_STATE_TIMEOUT;
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	2203      	movs	r2, #3
 8002bc6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	2200      	movs	r2, #0
 8002bce:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      /* Note: The SWR is not performed if the ETH_RX_CLK or the ETH_TX_CLK are  
         not available, please check your external PHY or the IO configuration */
      return HAL_TIMEOUT;
 8002bd2:	2303      	movs	r3, #3
 8002bd4:	e13b      	b.n	8002e4e <HAL_ETH_Init+0x332>
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	f003 0301 	and.w	r3, r3, #1
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d1e4      	bne.n	8002bb2 <HAL_ETH_Init+0x96>
    }
  }
  
  /*-------------------------------- MAC Initialization ----------------------*/
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = (heth->Instance)->MACMIIAR;
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	691b      	ldr	r3, [r3, #16]
 8002bee:	61fb      	str	r3, [r7, #28]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg1 &= ETH_MACMIIAR_CR_MASK;
 8002bf0:	69fb      	ldr	r3, [r7, #28]
 8002bf2:	f023 031c 	bic.w	r3, r3, #28
 8002bf6:	61fb      	str	r3, [r7, #28]
  
  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8002bf8:	f002 feec 	bl	80059d4 <HAL_RCC_GetHCLKFreq>
 8002bfc:	61b8      	str	r0, [r7, #24]
  
  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 8002bfe:	69bb      	ldr	r3, [r7, #24]
 8002c00:	4a78      	ldr	r2, [pc, #480]	; (8002de4 <HAL_ETH_Init+0x2c8>)
 8002c02:	4293      	cmp	r3, r2
 8002c04:	d908      	bls.n	8002c18 <HAL_ETH_Init+0xfc>
 8002c06:	69bb      	ldr	r3, [r7, #24]
 8002c08:	4a77      	ldr	r2, [pc, #476]	; (8002de8 <HAL_ETH_Init+0x2cc>)
 8002c0a:	4293      	cmp	r3, r2
 8002c0c:	d804      	bhi.n	8002c18 <HAL_ETH_Init+0xfc>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 8002c0e:	69fb      	ldr	r3, [r7, #28]
 8002c10:	f043 0308 	orr.w	r3, r3, #8
 8002c14:	61fb      	str	r3, [r7, #28]
 8002c16:	e027      	b.n	8002c68 <HAL_ETH_Init+0x14c>
  }
  else if((hclk >= 35000000U)&&(hclk < 60000000U))
 8002c18:	69bb      	ldr	r3, [r7, #24]
 8002c1a:	4a73      	ldr	r2, [pc, #460]	; (8002de8 <HAL_ETH_Init+0x2cc>)
 8002c1c:	4293      	cmp	r3, r2
 8002c1e:	d908      	bls.n	8002c32 <HAL_ETH_Init+0x116>
 8002c20:	69bb      	ldr	r3, [r7, #24]
 8002c22:	4a72      	ldr	r2, [pc, #456]	; (8002dec <HAL_ETH_Init+0x2d0>)
 8002c24:	4293      	cmp	r3, r2
 8002c26:	d804      	bhi.n	8002c32 <HAL_ETH_Init+0x116>
  {
    /* CSR Clock Range between 35-60 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 8002c28:	69fb      	ldr	r3, [r7, #28]
 8002c2a:	f043 030c 	orr.w	r3, r3, #12
 8002c2e:	61fb      	str	r3, [r7, #28]
 8002c30:	e01a      	b.n	8002c68 <HAL_ETH_Init+0x14c>
  }  
  else if((hclk >= 60000000U)&&(hclk < 100000000U))
 8002c32:	69bb      	ldr	r3, [r7, #24]
 8002c34:	4a6d      	ldr	r2, [pc, #436]	; (8002dec <HAL_ETH_Init+0x2d0>)
 8002c36:	4293      	cmp	r3, r2
 8002c38:	d903      	bls.n	8002c42 <HAL_ETH_Init+0x126>
 8002c3a:	69bb      	ldr	r3, [r7, #24]
 8002c3c:	4a6c      	ldr	r2, [pc, #432]	; (8002df0 <HAL_ETH_Init+0x2d4>)
 8002c3e:	4293      	cmp	r3, r2
 8002c40:	d911      	bls.n	8002c66 <HAL_ETH_Init+0x14a>
  {
    /* CSR Clock Range between 60-100 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }  
  else if((hclk >= 100000000U)&&(hclk < 150000000U))
 8002c42:	69bb      	ldr	r3, [r7, #24]
 8002c44:	4a6a      	ldr	r2, [pc, #424]	; (8002df0 <HAL_ETH_Init+0x2d4>)
 8002c46:	4293      	cmp	r3, r2
 8002c48:	d908      	bls.n	8002c5c <HAL_ETH_Init+0x140>
 8002c4a:	69bb      	ldr	r3, [r7, #24]
 8002c4c:	4a69      	ldr	r2, [pc, #420]	; (8002df4 <HAL_ETH_Init+0x2d8>)
 8002c4e:	4293      	cmp	r3, r2
 8002c50:	d804      	bhi.n	8002c5c <HAL_ETH_Init+0x140>
  {
    /* CSR Clock Range between 100-150 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 8002c52:	69fb      	ldr	r3, [r7, #28]
 8002c54:	f043 0304 	orr.w	r3, r3, #4
 8002c58:	61fb      	str	r3, [r7, #28]
 8002c5a:	e005      	b.n	8002c68 <HAL_ETH_Init+0x14c>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 183000000)) */
  {
    /* CSR Clock Range between 150-183 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div102;    
 8002c5c:	69fb      	ldr	r3, [r7, #28]
 8002c5e:	f043 0310 	orr.w	r3, r3, #16
 8002c62:	61fb      	str	r3, [r7, #28]
 8002c64:	e000      	b.n	8002c68 <HAL_ETH_Init+0x14c>
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 8002c66:	bf00      	nop
  }
  
  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg1;
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	69fa      	ldr	r2, [r7, #28]
 8002c6e:	611a      	str	r2, [r3, #16]
  
  /*-------------------- PHY initialization and configuration ----------------*/
  /* Put the PHY in reset mode */
  if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 8002c70:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8002c74:	2100      	movs	r1, #0
 8002c76:	6878      	ldr	r0, [r7, #4]
 8002c78:	f000 fc19 	bl	80034ae <HAL_ETH_WritePHYRegister>
 8002c7c:	4603      	mov	r3, r0
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d00b      	beq.n	8002c9a <HAL_ETH_Init+0x17e>
  {
    /* In case of write timeout */
    err = ETH_ERROR;
 8002c82:	2301      	movs	r3, #1
 8002c84:	613b      	str	r3, [r7, #16]
    
    /* Config MAC and DMA */
    ETH_MACDMAConfig(heth, err);
 8002c86:	6939      	ldr	r1, [r7, #16]
 8002c88:	6878      	ldr	r0, [r7, #4]
 8002c8a:	f000 fca5 	bl	80035d8 <ETH_MACDMAConfig>
    
    /* Set the ETH peripheral state to READY */
    heth->State = HAL_ETH_STATE_READY;
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	2201      	movs	r2, #1
 8002c92:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Return HAL_ERROR */
    return HAL_ERROR;
 8002c96:	2301      	movs	r3, #1
 8002c98:	e0d9      	b.n	8002e4e <HAL_ETH_Init+0x332>
  }
  
  /* Delay to assure PHY reset */
  HAL_Delay(PHY_RESET_DELAY);
 8002c9a:	20ff      	movs	r0, #255	; 0xff
 8002c9c:	f7ff fe18 	bl	80028d0 <HAL_Delay>
  
  if((heth->Init).AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	685b      	ldr	r3, [r3, #4]
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	f000 80a7 	beq.w	8002df8 <HAL_ETH_Init+0x2dc>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8002caa:	f7ff fe05 	bl	80028b8 <HAL_GetTick>
 8002cae:	6178      	str	r0, [r7, #20]
    
    /* We wait for linked status */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8002cb0:	f107 030c 	add.w	r3, r7, #12
 8002cb4:	461a      	mov	r2, r3
 8002cb6:	2101      	movs	r1, #1
 8002cb8:	6878      	ldr	r0, [r7, #4]
 8002cba:	f000 fb90 	bl	80033de <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
 8002cbe:	f7ff fdfb 	bl	80028b8 <HAL_GetTick>
 8002cc2:	4602      	mov	r2, r0
 8002cc4:	697b      	ldr	r3, [r7, #20]
 8002cc6:	1ad3      	subs	r3, r2, r3
 8002cc8:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ccc:	4293      	cmp	r3, r2
 8002cce:	d90f      	bls.n	8002cf0 <HAL_ETH_Init+0x1d4>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 8002cd0:	2301      	movs	r3, #1
 8002cd2:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 8002cd4:	6939      	ldr	r1, [r7, #16]
 8002cd6:	6878      	ldr	r0, [r7, #4]
 8002cd8:	f000 fc7e 	bl	80035d8 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	2201      	movs	r2, #1
 8002ce0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	2200      	movs	r2, #0
 8002ce8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 8002cec:	2303      	movs	r3, #3
 8002cee:	e0ae      	b.n	8002e4e <HAL_ETH_Init+0x332>
      }
    } while (((phyreg & PHY_LINKED_STATUS) != PHY_LINKED_STATUS));
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	f003 0304 	and.w	r3, r3, #4
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d0da      	beq.n	8002cb0 <HAL_ETH_Init+0x194>

    
    /* Enable Auto-Negotiation */
    if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_AUTONEGOTIATION)) != HAL_OK)
 8002cfa:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002cfe:	2100      	movs	r1, #0
 8002d00:	6878      	ldr	r0, [r7, #4]
 8002d02:	f000 fbd4 	bl	80034ae <HAL_ETH_WritePHYRegister>
 8002d06:	4603      	mov	r3, r0
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d00b      	beq.n	8002d24 <HAL_ETH_Init+0x208>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8002d0c:	2301      	movs	r3, #1
 8002d0e:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8002d10:	6939      	ldr	r1, [r7, #16]
 8002d12:	6878      	ldr	r0, [r7, #4]
 8002d14:	f000 fc60 	bl	80035d8 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	2201      	movs	r2, #1
 8002d1c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 8002d20:	2301      	movs	r3, #1
 8002d22:	e094      	b.n	8002e4e <HAL_ETH_Init+0x332>
    }
    
    /* Get tick */
    tickstart = HAL_GetTick();
 8002d24:	f7ff fdc8 	bl	80028b8 <HAL_GetTick>
 8002d28:	6178      	str	r0, [r7, #20]
    
    /* Wait until the auto-negotiation will be completed */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8002d2a:	f107 030c 	add.w	r3, r7, #12
 8002d2e:	461a      	mov	r2, r3
 8002d30:	2101      	movs	r1, #1
 8002d32:	6878      	ldr	r0, [r7, #4]
 8002d34:	f000 fb53 	bl	80033de <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 8002d38:	f7ff fdbe 	bl	80028b8 <HAL_GetTick>
 8002d3c:	4602      	mov	r2, r0
 8002d3e:	697b      	ldr	r3, [r7, #20]
 8002d40:	1ad3      	subs	r3, r2, r3
 8002d42:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d46:	4293      	cmp	r3, r2
 8002d48:	d90f      	bls.n	8002d6a <HAL_ETH_Init+0x24e>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 8002d4a:	2301      	movs	r3, #1
 8002d4c:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 8002d4e:	6939      	ldr	r1, [r7, #16]
 8002d50:	6878      	ldr	r0, [r7, #4]
 8002d52:	f000 fc41 	bl	80035d8 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	2201      	movs	r2, #1
 8002d5a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	2200      	movs	r2, #0
 8002d62:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 8002d66:	2303      	movs	r3, #3
 8002d68:	e071      	b.n	8002e4e <HAL_ETH_Init+0x332>
      }
      
    } while (((phyreg & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	f003 0320 	and.w	r3, r3, #32
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d0da      	beq.n	8002d2a <HAL_ETH_Init+0x20e>
    
    /* Read the result of the auto-negotiation */
    if((HAL_ETH_ReadPHYRegister(heth, PHY_SR, &phyreg)) != HAL_OK)
 8002d74:	f107 030c 	add.w	r3, r7, #12
 8002d78:	461a      	mov	r2, r3
 8002d7a:	211f      	movs	r1, #31
 8002d7c:	6878      	ldr	r0, [r7, #4]
 8002d7e:	f000 fb2e 	bl	80033de <HAL_ETH_ReadPHYRegister>
 8002d82:	4603      	mov	r3, r0
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d00b      	beq.n	8002da0 <HAL_ETH_Init+0x284>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8002d88:	2301      	movs	r3, #1
 8002d8a:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8002d8c:	6939      	ldr	r1, [r7, #16]
 8002d8e:	6878      	ldr	r0, [r7, #4]
 8002d90:	f000 fc22 	bl	80035d8 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	2201      	movs	r2, #1
 8002d98:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 8002d9c:	2301      	movs	r3, #1
 8002d9e:	e056      	b.n	8002e4e <HAL_ETH_Init+0x332>
    }
    
    /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
    if((phyreg & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	f003 0310 	and.w	r3, r3, #16
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d004      	beq.n	8002db4 <HAL_ETH_Init+0x298>
    {
      /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;  
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002db0:	60da      	str	r2, [r3, #12]
 8002db2:	e002      	b.n	8002dba <HAL_ETH_Init+0x29e>
    }
    else
    {
      /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_HALFDUPLEX;           
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	2200      	movs	r2, #0
 8002db8:	60da      	str	r2, [r3, #12]
    }
    /* Configure the MAC with the speed fixed by the auto-negotiation process */
    if((phyreg & PHY_SPEED_STATUS) == PHY_SPEED_STATUS)
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	f003 0304 	and.w	r3, r3, #4
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d003      	beq.n	8002dcc <HAL_ETH_Init+0x2b0>
    {  
      /* Set Ethernet speed to 10M following the auto-negotiation */
      (heth->Init).Speed = ETH_SPEED_10M; 
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	2200      	movs	r2, #0
 8002dc8:	609a      	str	r2, [r3, #8]
 8002dca:	e037      	b.n	8002e3c <HAL_ETH_Init+0x320>
    }
    else
    {   
      /* Set Ethernet speed to 100M following the auto-negotiation */ 
      (heth->Init).Speed = ETH_SPEED_100M;
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002dd2:	609a      	str	r2, [r3, #8]
 8002dd4:	e032      	b.n	8002e3c <HAL_ETH_Init+0x320>
 8002dd6:	bf00      	nop
 8002dd8:	03938700 	.word	0x03938700
 8002ddc:	40023800 	.word	0x40023800
 8002de0:	40013800 	.word	0x40013800
 8002de4:	01312cff 	.word	0x01312cff
 8002de8:	02160ebf 	.word	0x02160ebf
 8002dec:	039386ff 	.word	0x039386ff
 8002df0:	05f5e0ff 	.word	0x05f5e0ff
 8002df4:	08f0d17f 	.word	0x08f0d17f
    /* Check parameters */
    assert_param(IS_ETH_SPEED(heth->Init.Speed));
    assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode));
    
    /* Set MAC Speed and Duplex Mode */
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3U) |
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	68db      	ldr	r3, [r3, #12]
 8002dfc:	08db      	lsrs	r3, r3, #3
 8002dfe:	b29a      	uxth	r2, r3
                                                (uint16_t)((heth->Init).Speed >> 1U))) != HAL_OK)
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	689b      	ldr	r3, [r3, #8]
 8002e04:	085b      	lsrs	r3, r3, #1
 8002e06:	b29b      	uxth	r3, r3
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3U) |
 8002e08:	4313      	orrs	r3, r2
 8002e0a:	b29b      	uxth	r3, r3
 8002e0c:	461a      	mov	r2, r3
 8002e0e:	2100      	movs	r1, #0
 8002e10:	6878      	ldr	r0, [r7, #4]
 8002e12:	f000 fb4c 	bl	80034ae <HAL_ETH_WritePHYRegister>
 8002e16:	4603      	mov	r3, r0
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d00b      	beq.n	8002e34 <HAL_ETH_Init+0x318>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8002e1c:	2301      	movs	r3, #1
 8002e1e:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8002e20:	6939      	ldr	r1, [r7, #16]
 8002e22:	6878      	ldr	r0, [r7, #4]
 8002e24:	f000 fbd8 	bl	80035d8 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	2201      	movs	r2, #1
 8002e2c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;
 8002e30:	2301      	movs	r3, #1
 8002e32:	e00c      	b.n	8002e4e <HAL_ETH_Init+0x332>
    }  
    
    /* Delay to assure PHY configuration */
    HAL_Delay(PHY_CONFIG_DELAY);
 8002e34:	f640 70ff 	movw	r0, #4095	; 0xfff
 8002e38:	f7ff fd4a 	bl	80028d0 <HAL_Delay>
  }
  
  /* Config MAC and DMA */
  ETH_MACDMAConfig(heth, err);
 8002e3c:	6939      	ldr	r1, [r7, #16]
 8002e3e:	6878      	ldr	r0, [r7, #4]
 8002e40:	f000 fbca 	bl	80035d8 <ETH_MACDMAConfig>
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	2201      	movs	r2, #1
 8002e48:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 8002e4c:	2300      	movs	r3, #0
}
 8002e4e:	4618      	mov	r0, r3
 8002e50:	3720      	adds	r7, #32
 8002e52:	46bd      	mov	sp, r7
 8002e54:	bd80      	pop	{r7, pc}
 8002e56:	bf00      	nop

08002e58 <HAL_ETH_DMATxDescListInit>:
  * @param  TxBuff Pointer to the first TxBuffer list
  * @param  TxBuffCount Number of the used Tx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMATxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMATxDescTab, uint8_t *TxBuff, uint32_t TxBuffCount)
{
 8002e58:	b480      	push	{r7}
 8002e5a:	b087      	sub	sp, #28
 8002e5c:	af00      	add	r7, sp, #0
 8002e5e:	60f8      	str	r0, [r7, #12]
 8002e60:	60b9      	str	r1, [r7, #8]
 8002e62:	607a      	str	r2, [r7, #4]
 8002e64:	603b      	str	r3, [r7, #0]
  uint32_t i = 0U;
 8002e66:	2300      	movs	r3, #0
 8002e68:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *dmatxdesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002e70:	2b01      	cmp	r3, #1
 8002e72:	d101      	bne.n	8002e78 <HAL_ETH_DMATxDescListInit+0x20>
 8002e74:	2302      	movs	r3, #2
 8002e76:	e052      	b.n	8002f1e <HAL_ETH_DMATxDescListInit+0xc6>
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	2201      	movs	r2, #1
 8002e7c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	2202      	movs	r2, #2
 8002e84:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the DMATxDescToSet pointer with the first one of the DMATxDescTab list */
  heth->TxDesc = DMATxDescTab;
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	68ba      	ldr	r2, [r7, #8]
 8002e8c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Fill each DMATxDesc descriptor with the right values */   
  for(i=0U; i < TxBuffCount; i++)
 8002e8e:	2300      	movs	r3, #0
 8002e90:	617b      	str	r3, [r7, #20]
 8002e92:	e030      	b.n	8002ef6 <HAL_ETH_DMATxDescListInit+0x9e>
  {
    /* Get the pointer on the ith member of the Tx Desc list */
    dmatxdesc = DMATxDescTab + i;
 8002e94:	697b      	ldr	r3, [r7, #20]
 8002e96:	015b      	lsls	r3, r3, #5
 8002e98:	68ba      	ldr	r2, [r7, #8]
 8002e9a:	4413      	add	r3, r2
 8002e9c:	613b      	str	r3, [r7, #16]
    
    /* Set Second Address Chained bit */
    dmatxdesc->Status = ETH_DMATXDESC_TCH;  
 8002e9e:	693b      	ldr	r3, [r7, #16]
 8002ea0:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002ea4:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 address pointer */
    dmatxdesc->Buffer1Addr = (uint32_t)(&TxBuff[i*ETH_TX_BUF_SIZE]);
 8002ea6:	697b      	ldr	r3, [r7, #20]
 8002ea8:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8002eac:	fb02 f303 	mul.w	r3, r2, r3
 8002eb0:	687a      	ldr	r2, [r7, #4]
 8002eb2:	4413      	add	r3, r2
 8002eb4:	461a      	mov	r2, r3
 8002eb6:	693b      	ldr	r3, [r7, #16]
 8002eb8:	609a      	str	r2, [r3, #8]
    
    if ((heth->Init).ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	69db      	ldr	r3, [r3, #28]
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d105      	bne.n	8002ece <HAL_ETH_DMATxDescListInit+0x76>
    {
      /* Set the DMA Tx descriptors checksum insertion */
      dmatxdesc->Status |= ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL;
 8002ec2:	693b      	ldr	r3, [r7, #16]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 8002eca:	693b      	ldr	r3, [r7, #16]
 8002ecc:	601a      	str	r2, [r3, #0]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (TxBuffCount-1U))
 8002ece:	683b      	ldr	r3, [r7, #0]
 8002ed0:	3b01      	subs	r3, #1
 8002ed2:	697a      	ldr	r2, [r7, #20]
 8002ed4:	429a      	cmp	r2, r3
 8002ed6:	d208      	bcs.n	8002eea <HAL_ETH_DMATxDescListInit+0x92>
    {
      /* Set next descriptor address register with next descriptor base address */
      dmatxdesc->Buffer2NextDescAddr = (uint32_t)(DMATxDescTab+i+1U);
 8002ed8:	697b      	ldr	r3, [r7, #20]
 8002eda:	3301      	adds	r3, #1
 8002edc:	015b      	lsls	r3, r3, #5
 8002ede:	68ba      	ldr	r2, [r7, #8]
 8002ee0:	4413      	add	r3, r2
 8002ee2:	461a      	mov	r2, r3
 8002ee4:	693b      	ldr	r3, [r7, #16]
 8002ee6:	60da      	str	r2, [r3, #12]
 8002ee8:	e002      	b.n	8002ef0 <HAL_ETH_DMATxDescListInit+0x98>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      dmatxdesc->Buffer2NextDescAddr = (uint32_t) DMATxDescTab;  
 8002eea:	68ba      	ldr	r2, [r7, #8]
 8002eec:	693b      	ldr	r3, [r7, #16]
 8002eee:	60da      	str	r2, [r3, #12]
  for(i=0U; i < TxBuffCount; i++)
 8002ef0:	697b      	ldr	r3, [r7, #20]
 8002ef2:	3301      	adds	r3, #1
 8002ef4:	617b      	str	r3, [r7, #20]
 8002ef6:	697a      	ldr	r2, [r7, #20]
 8002ef8:	683b      	ldr	r3, [r7, #0]
 8002efa:	429a      	cmp	r2, r3
 8002efc:	d3ca      	bcc.n	8002e94 <HAL_ETH_DMATxDescListInit+0x3c>
    }
  }
  
  /* Set Transmit Descriptor List Address Register */
  (heth->Instance)->DMATDLAR = (uint32_t) DMATxDescTab;
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	68ba      	ldr	r2, [r7, #8]
 8002f04:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002f08:	3310      	adds	r3, #16
 8002f0a:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	2201      	movs	r2, #1
 8002f10:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	2200      	movs	r2, #0
 8002f18:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8002f1c:	2300      	movs	r3, #0
}
 8002f1e:	4618      	mov	r0, r3
 8002f20:	371c      	adds	r7, #28
 8002f22:	46bd      	mov	sp, r7
 8002f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f28:	4770      	bx	lr

08002f2a <HAL_ETH_DMARxDescListInit>:
  * @param  RxBuff Pointer to the first RxBuffer list
  * @param  RxBuffCount Number of the used Rx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMARxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMARxDescTab, uint8_t *RxBuff, uint32_t RxBuffCount)
{
 8002f2a:	b480      	push	{r7}
 8002f2c:	b087      	sub	sp, #28
 8002f2e:	af00      	add	r7, sp, #0
 8002f30:	60f8      	str	r0, [r7, #12]
 8002f32:	60b9      	str	r1, [r7, #8]
 8002f34:	607a      	str	r2, [r7, #4]
 8002f36:	603b      	str	r3, [r7, #0]
  uint32_t i = 0U;
 8002f38:	2300      	movs	r3, #0
 8002f3a:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *DMARxDesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002f42:	2b01      	cmp	r3, #1
 8002f44:	d101      	bne.n	8002f4a <HAL_ETH_DMARxDescListInit+0x20>
 8002f46:	2302      	movs	r3, #2
 8002f48:	e056      	b.n	8002ff8 <HAL_ETH_DMARxDescListInit+0xce>
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	2201      	movs	r2, #1
 8002f4e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	2202      	movs	r2, #2
 8002f56:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the Ethernet RxDesc pointer with the first one of the DMARxDescTab list */
  heth->RxDesc = DMARxDescTab; 
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	68ba      	ldr	r2, [r7, #8]
 8002f5e:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Fill each DMARxDesc descriptor with the right values */
  for(i=0U; i < RxBuffCount; i++)
 8002f60:	2300      	movs	r3, #0
 8002f62:	617b      	str	r3, [r7, #20]
 8002f64:	e034      	b.n	8002fd0 <HAL_ETH_DMARxDescListInit+0xa6>
  {
    /* Get the pointer on the ith member of the Rx Desc list */
    DMARxDesc = DMARxDescTab+i;
 8002f66:	697b      	ldr	r3, [r7, #20]
 8002f68:	015b      	lsls	r3, r3, #5
 8002f6a:	68ba      	ldr	r2, [r7, #8]
 8002f6c:	4413      	add	r3, r2
 8002f6e:	613b      	str	r3, [r7, #16]
    
    /* Set Own bit of the Rx descriptor Status */
    DMARxDesc->Status = ETH_DMARXDESC_OWN;
 8002f70:	693b      	ldr	r3, [r7, #16]
 8002f72:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8002f76:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 size and Second Address Chained bit */
    DMARxDesc->ControlBufferSize = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;  
 8002f78:	693b      	ldr	r3, [r7, #16]
 8002f7a:	f244 52f4 	movw	r2, #17908	; 0x45f4
 8002f7e:	605a      	str	r2, [r3, #4]
    
    /* Set Buffer1 address pointer */
    DMARxDesc->Buffer1Addr = (uint32_t)(&RxBuff[i*ETH_RX_BUF_SIZE]);
 8002f80:	697b      	ldr	r3, [r7, #20]
 8002f82:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8002f86:	fb02 f303 	mul.w	r3, r2, r3
 8002f8a:	687a      	ldr	r2, [r7, #4]
 8002f8c:	4413      	add	r3, r2
 8002f8e:	461a      	mov	r2, r3
 8002f90:	693b      	ldr	r3, [r7, #16]
 8002f92:	609a      	str	r2, [r3, #8]
    
    if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	699b      	ldr	r3, [r3, #24]
 8002f98:	2b01      	cmp	r3, #1
 8002f9a:	d105      	bne.n	8002fa8 <HAL_ETH_DMARxDescListInit+0x7e>
    {
      /* Enable Ethernet DMA Rx Descriptor interrupt */
      DMARxDesc->ControlBufferSize &= ~ETH_DMARXDESC_DIC;
 8002f9c:	693b      	ldr	r3, [r7, #16]
 8002f9e:	685b      	ldr	r3, [r3, #4]
 8002fa0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002fa4:	693b      	ldr	r3, [r7, #16]
 8002fa6:	605a      	str	r2, [r3, #4]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (RxBuffCount-1U))
 8002fa8:	683b      	ldr	r3, [r7, #0]
 8002faa:	3b01      	subs	r3, #1
 8002fac:	697a      	ldr	r2, [r7, #20]
 8002fae:	429a      	cmp	r2, r3
 8002fb0:	d208      	bcs.n	8002fc4 <HAL_ETH_DMARxDescListInit+0x9a>
    {
      /* Set next descriptor address register with next descriptor base address */
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab+i+1U); 
 8002fb2:	697b      	ldr	r3, [r7, #20]
 8002fb4:	3301      	adds	r3, #1
 8002fb6:	015b      	lsls	r3, r3, #5
 8002fb8:	68ba      	ldr	r2, [r7, #8]
 8002fba:	4413      	add	r3, r2
 8002fbc:	461a      	mov	r2, r3
 8002fbe:	693b      	ldr	r3, [r7, #16]
 8002fc0:	60da      	str	r2, [r3, #12]
 8002fc2:	e002      	b.n	8002fca <HAL_ETH_DMARxDescListInit+0xa0>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab); 
 8002fc4:	68ba      	ldr	r2, [r7, #8]
 8002fc6:	693b      	ldr	r3, [r7, #16]
 8002fc8:	60da      	str	r2, [r3, #12]
  for(i=0U; i < RxBuffCount; i++)
 8002fca:	697b      	ldr	r3, [r7, #20]
 8002fcc:	3301      	adds	r3, #1
 8002fce:	617b      	str	r3, [r7, #20]
 8002fd0:	697a      	ldr	r2, [r7, #20]
 8002fd2:	683b      	ldr	r3, [r7, #0]
 8002fd4:	429a      	cmp	r2, r3
 8002fd6:	d3c6      	bcc.n	8002f66 <HAL_ETH_DMARxDescListInit+0x3c>
    }
  }
  
  /* Set Receive Descriptor List Address Register */
  (heth->Instance)->DMARDLAR = (uint32_t) DMARxDescTab;
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	68ba      	ldr	r2, [r7, #8]
 8002fde:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002fe2:	330c      	adds	r3, #12
 8002fe4:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	2201      	movs	r2, #1
 8002fea:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	2200      	movs	r2, #0
 8002ff2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8002ff6:	2300      	movs	r3, #0
}
 8002ff8:	4618      	mov	r0, r3
 8002ffa:	371c      	adds	r7, #28
 8002ffc:	46bd      	mov	sp, r7
 8002ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003002:	4770      	bx	lr

08003004 <HAL_ETH_TransmitFrame>:
  *         the configuration information for ETHERNET module
  * @param  FrameLength Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_TransmitFrame(ETH_HandleTypeDef *heth, uint32_t FrameLength)
{
 8003004:	b480      	push	{r7}
 8003006:	b087      	sub	sp, #28
 8003008:	af00      	add	r7, sp, #0
 800300a:	6078      	str	r0, [r7, #4]
 800300c:	6039      	str	r1, [r7, #0]
  uint32_t bufcount = 0U, size = 0U, i = 0U;
 800300e:	2300      	movs	r3, #0
 8003010:	617b      	str	r3, [r7, #20]
 8003012:	2300      	movs	r3, #0
 8003014:	60fb      	str	r3, [r7, #12]
 8003016:	2300      	movs	r3, #0
 8003018:	613b      	str	r3, [r7, #16]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003020:	2b01      	cmp	r3, #1
 8003022:	d101      	bne.n	8003028 <HAL_ETH_TransmitFrame+0x24>
 8003024:	2302      	movs	r3, #2
 8003026:	e0cd      	b.n	80031c4 <HAL_ETH_TransmitFrame+0x1c0>
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	2201      	movs	r2, #1
 800302c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	2202      	movs	r2, #2
 8003034:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  if (FrameLength == 0U) 
 8003038:	683b      	ldr	r3, [r7, #0]
 800303a:	2b00      	cmp	r3, #0
 800303c:	d109      	bne.n	8003052 <HAL_ETH_TransmitFrame+0x4e>
  {
    /* Set ETH HAL state to READY */
    heth->State = HAL_ETH_STATE_READY;
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	2201      	movs	r2, #1
 8003042:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	2200      	movs	r2, #0
 800304a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return  HAL_ERROR;                                    
 800304e:	2301      	movs	r3, #1
 8003050:	e0b8      	b.n	80031c4 <HAL_ETH_TransmitFrame+0x1c0>
  }  
  
  /* Check if the descriptor is owned by the ETHERNET DMA (when set) or CPU (when reset) */
  if(((heth->TxDesc)->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	2b00      	cmp	r3, #0
 800305a:	da09      	bge.n	8003070 <HAL_ETH_TransmitFrame+0x6c>
  {  
    /* OWN bit set */
    heth->State = HAL_ETH_STATE_BUSY_TX;
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	2212      	movs	r2, #18
 8003060:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	2200      	movs	r2, #0
 8003068:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return HAL_ERROR;
 800306c:	2301      	movs	r3, #1
 800306e:	e0a9      	b.n	80031c4 <HAL_ETH_TransmitFrame+0x1c0>
  }
  
  /* Get the number of needed Tx buffers for the current frame */
  if (FrameLength > ETH_TX_BUF_SIZE)
 8003070:	683b      	ldr	r3, [r7, #0]
 8003072:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8003076:	4293      	cmp	r3, r2
 8003078:	d915      	bls.n	80030a6 <HAL_ETH_TransmitFrame+0xa2>
  {
    bufcount = FrameLength/ETH_TX_BUF_SIZE;
 800307a:	683b      	ldr	r3, [r7, #0]
 800307c:	4a54      	ldr	r2, [pc, #336]	; (80031d0 <HAL_ETH_TransmitFrame+0x1cc>)
 800307e:	fba2 2303 	umull	r2, r3, r2, r3
 8003082:	0a9b      	lsrs	r3, r3, #10
 8003084:	617b      	str	r3, [r7, #20]
    if (FrameLength % ETH_TX_BUF_SIZE) 
 8003086:	683a      	ldr	r2, [r7, #0]
 8003088:	4b51      	ldr	r3, [pc, #324]	; (80031d0 <HAL_ETH_TransmitFrame+0x1cc>)
 800308a:	fba3 1302 	umull	r1, r3, r3, r2
 800308e:	0a9b      	lsrs	r3, r3, #10
 8003090:	f240 51f4 	movw	r1, #1524	; 0x5f4
 8003094:	fb01 f303 	mul.w	r3, r1, r3
 8003098:	1ad3      	subs	r3, r2, r3
 800309a:	2b00      	cmp	r3, #0
 800309c:	d005      	beq.n	80030aa <HAL_ETH_TransmitFrame+0xa6>
    {
      bufcount++;
 800309e:	697b      	ldr	r3, [r7, #20]
 80030a0:	3301      	adds	r3, #1
 80030a2:	617b      	str	r3, [r7, #20]
 80030a4:	e001      	b.n	80030aa <HAL_ETH_TransmitFrame+0xa6>
    }
  }
  else 
  {  
    bufcount = 1U;
 80030a6:	2301      	movs	r3, #1
 80030a8:	617b      	str	r3, [r7, #20]
  }
  if (bufcount == 1U)
 80030aa:	697b      	ldr	r3, [r7, #20]
 80030ac:	2b01      	cmp	r3, #1
 80030ae:	d11c      	bne.n	80030ea <HAL_ETH_TransmitFrame+0xe6>
  {
    /* Set LAST and FIRST segment */
    heth->TxDesc->Status |=ETH_DMATXDESC_FS|ETH_DMATXDESC_LS;
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030b4:	681a      	ldr	r2, [r3, #0]
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030ba:	f042 5240 	orr.w	r2, r2, #805306368	; 0x30000000
 80030be:	601a      	str	r2, [r3, #0]
    /* Set frame size */
    heth->TxDesc->ControlBufferSize = (FrameLength & ETH_DMATXDESC_TBS1);
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030c4:	683a      	ldr	r2, [r7, #0]
 80030c6:	f3c2 020c 	ubfx	r2, r2, #0, #13
 80030ca:	605a      	str	r2, [r3, #4]
    /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
    heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030d0:	681a      	ldr	r2, [r3, #0]
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030d6:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80030da:	601a      	str	r2, [r3, #0]
    /* Point to next descriptor */
    heth->TxDesc= (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030e0:	68db      	ldr	r3, [r3, #12]
 80030e2:	461a      	mov	r2, r3
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	62da      	str	r2, [r3, #44]	; 0x2c
 80030e8:	e04b      	b.n	8003182 <HAL_ETH_TransmitFrame+0x17e>
  }
  else
  {
    for (i=0U; i< bufcount; i++)
 80030ea:	2300      	movs	r3, #0
 80030ec:	613b      	str	r3, [r7, #16]
 80030ee:	e044      	b.n	800317a <HAL_ETH_TransmitFrame+0x176>
    {
      /* Clear FIRST and LAST segment bits */
      heth->TxDesc->Status &= ~(ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030f4:	681a      	ldr	r2, [r3, #0]
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030fa:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80030fe:	601a      	str	r2, [r3, #0]
      
      if (i == 0U) 
 8003100:	693b      	ldr	r3, [r7, #16]
 8003102:	2b00      	cmp	r3, #0
 8003104:	d107      	bne.n	8003116 <HAL_ETH_TransmitFrame+0x112>
      {
        /* Setting the first segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_FS;  
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800310a:	681a      	ldr	r2, [r3, #0]
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003110:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8003114:	601a      	str	r2, [r3, #0]
      }
      
      /* Program size */
      heth->TxDesc->ControlBufferSize = (ETH_TX_BUF_SIZE & ETH_DMATXDESC_TBS1);
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800311a:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800311e:	605a      	str	r2, [r3, #4]
      
      if (i == (bufcount-1U))
 8003120:	697b      	ldr	r3, [r7, #20]
 8003122:	3b01      	subs	r3, #1
 8003124:	693a      	ldr	r2, [r7, #16]
 8003126:	429a      	cmp	r2, r3
 8003128:	d116      	bne.n	8003158 <HAL_ETH_TransmitFrame+0x154>
      {
        /* Setting the last segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_LS;
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800312e:	681a      	ldr	r2, [r3, #0]
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003134:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8003138:	601a      	str	r2, [r3, #0]
        size = FrameLength - (bufcount-1U)*ETH_TX_BUF_SIZE;
 800313a:	697b      	ldr	r3, [r7, #20]
 800313c:	4a25      	ldr	r2, [pc, #148]	; (80031d4 <HAL_ETH_TransmitFrame+0x1d0>)
 800313e:	fb02 f203 	mul.w	r2, r2, r3
 8003142:	683b      	ldr	r3, [r7, #0]
 8003144:	4413      	add	r3, r2
 8003146:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 800314a:	60fb      	str	r3, [r7, #12]
        heth->TxDesc->ControlBufferSize = (size & ETH_DMATXDESC_TBS1);
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003150:	68fa      	ldr	r2, [r7, #12]
 8003152:	f3c2 020c 	ubfx	r2, r2, #0, #13
 8003156:	605a      	str	r2, [r3, #4]
      }
      
      /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
      heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800315c:	681a      	ldr	r2, [r3, #0]
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003162:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8003166:	601a      	str	r2, [r3, #0]
      /* point to next descriptor */
      heth->TxDesc = (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800316c:	68db      	ldr	r3, [r3, #12]
 800316e:	461a      	mov	r2, r3
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	62da      	str	r2, [r3, #44]	; 0x2c
    for (i=0U; i< bufcount; i++)
 8003174:	693b      	ldr	r3, [r7, #16]
 8003176:	3301      	adds	r3, #1
 8003178:	613b      	str	r3, [r7, #16]
 800317a:	693a      	ldr	r2, [r7, #16]
 800317c:	697b      	ldr	r3, [r7, #20]
 800317e:	429a      	cmp	r2, r3
 8003180:	d3b6      	bcc.n	80030f0 <HAL_ETH_TransmitFrame+0xec>
    }
  }
  
  /* When Tx Buffer unavailable flag is set: clear it and resume transmission */
  if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800318a:	3314      	adds	r3, #20
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	f003 0304 	and.w	r3, r3, #4
 8003192:	2b00      	cmp	r3, #0
 8003194:	d00d      	beq.n	80031b2 <HAL_ETH_TransmitFrame+0x1ae>
  {
    /* Clear TBUS ETHERNET DMA flag */
    (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800319e:	3314      	adds	r3, #20
 80031a0:	2204      	movs	r2, #4
 80031a2:	601a      	str	r2, [r3, #0]
    /* Resume DMA transmission*/
    (heth->Instance)->DMATPDR = 0U;
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80031ac:	3304      	adds	r3, #4
 80031ae:	2200      	movs	r2, #0
 80031b0:	601a      	str	r2, [r3, #0]
  }
  
  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	2201      	movs	r2, #1
 80031b6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	2200      	movs	r2, #0
 80031be:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 80031c2:	2300      	movs	r3, #0
}
 80031c4:	4618      	mov	r0, r3
 80031c6:	371c      	adds	r7, #28
 80031c8:	46bd      	mov	sp, r7
 80031ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ce:	4770      	bx	lr
 80031d0:	ac02b00b 	.word	0xac02b00b
 80031d4:	fffffa0c 	.word	0xfffffa0c

080031d8 <HAL_ETH_GetReceivedFrame_IT>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_GetReceivedFrame_IT(ETH_HandleTypeDef *heth)
{
 80031d8:	b480      	push	{r7}
 80031da:	b085      	sub	sp, #20
 80031dc:	af00      	add	r7, sp, #0
 80031de:	6078      	str	r0, [r7, #4]
  uint32_t descriptorscancounter = 0U;
 80031e0:	2300      	movs	r3, #0
 80031e2:	60fb      	str	r3, [r7, #12]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80031ea:	2b01      	cmp	r3, #1
 80031ec:	d101      	bne.n	80031f2 <HAL_ETH_GetReceivedFrame_IT+0x1a>
 80031ee:	2302      	movs	r3, #2
 80031f0:	e074      	b.n	80032dc <HAL_ETH_GetReceivedFrame_IT+0x104>
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	2201      	movs	r2, #1
 80031f6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set ETH HAL State to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	2202      	movs	r2, #2
 80031fe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Scan descriptors owned by CPU */
  while (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (descriptorscancounter < ETH_RXBUFNB))
 8003202:	e05a      	b.n	80032ba <HAL_ETH_GetReceivedFrame_IT+0xe2>
  {
    /* Just for security */
    descriptorscancounter++;
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	3301      	adds	r3, #1
 8003208:	60fb      	str	r3, [r7, #12]
    
    /* Check if first segment in frame */
    /* ((heth->RxDesc->Status & ETH_DMARXDESC_FS) != (uint32_t)RESET) && ((heth->RxDesc->Status & ETH_DMARXDESC_LS) == (uint32_t)RESET)) */  
    if((heth->RxDesc->Status & (ETH_DMARXDESC_FS | ETH_DMARXDESC_LS)) == (uint32_t)ETH_DMARXDESC_FS)
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003214:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003218:	d10d      	bne.n	8003236 <HAL_ETH_GetReceivedFrame_IT+0x5e>
    { 
      heth->RxFrameInfos.FSRxDesc = heth->RxDesc;
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	631a      	str	r2, [r3, #48]	; 0x30
      heth->RxFrameInfos.SegCount = 1U;   
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	2201      	movs	r2, #1
 8003226:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800322c:	68db      	ldr	r3, [r3, #12]
 800322e:	461a      	mov	r2, r3
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	629a      	str	r2, [r3, #40]	; 0x28
 8003234:	e041      	b.n	80032ba <HAL_ETH_GetReceivedFrame_IT+0xe2>
    }
    /* Check if intermediate segment */
    /* ((heth->RxDesc->Status & ETH_DMARXDESC_LS) == (uint32_t)RESET)&& ((heth->RxDesc->Status & ETH_DMARXDESC_FS) == (uint32_t)RESET)) */
    else if ((heth->RxDesc->Status & (ETH_DMARXDESC_LS | ETH_DMARXDESC_FS)) == (uint32_t)RESET)
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003240:	2b00      	cmp	r3, #0
 8003242:	d10b      	bne.n	800325c <HAL_ETH_GetReceivedFrame_IT+0x84>
    {
      /* Increment segment count */
      (heth->RxFrameInfos.SegCount)++;
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003248:	1c5a      	adds	r2, r3, #1
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*)(heth->RxDesc->Buffer2NextDescAddr);
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003252:	68db      	ldr	r3, [r3, #12]
 8003254:	461a      	mov	r2, r3
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	629a      	str	r2, [r3, #40]	; 0x28
 800325a:	e02e      	b.n	80032ba <HAL_ETH_GetReceivedFrame_IT+0xe2>
    }
    /* Should be last segment */
    else
    { 
      /* Last segment */
      heth->RxFrameInfos.LSRxDesc = heth->RxDesc;
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	635a      	str	r2, [r3, #52]	; 0x34
      
      /* Increment segment count */
      (heth->RxFrameInfos.SegCount)++;
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003268:	1c5a      	adds	r2, r3, #1
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	639a      	str	r2, [r3, #56]	; 0x38
      
      /* Check if last segment is first segment: one segment contains the frame */
      if ((heth->RxFrameInfos.SegCount) == 1U)
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003272:	2b01      	cmp	r3, #1
 8003274:	d103      	bne.n	800327e <HAL_ETH_GetReceivedFrame_IT+0xa6>
      {
        heth->RxFrameInfos.FSRxDesc = heth->RxDesc;
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	631a      	str	r2, [r3, #48]	; 0x30
      }
      
      /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
      heth->RxFrameInfos.length = (((heth->RxDesc)->Status & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4U;
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	0c1b      	lsrs	r3, r3, #16
 8003286:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800328a:	1f1a      	subs	r2, r3, #4
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Get the address of the buffer start address */ 
      heth->RxFrameInfos.buffer =((heth->RxFrameInfos).FSRxDesc)->Buffer1Addr;
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003294:	689a      	ldr	r2, [r3, #8]
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Point to next descriptor */      
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800329e:	68db      	ldr	r3, [r3, #12]
 80032a0:	461a      	mov	r2, r3
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Set HAL State to Ready */
      heth->State = HAL_ETH_STATE_READY;
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	2201      	movs	r2, #1
 80032aa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	2200      	movs	r2, #0
 80032b2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
      /* Return function status */
      return HAL_OK;
 80032b6:	2300      	movs	r3, #0
 80032b8:	e010      	b.n	80032dc <HAL_ETH_GetReceivedFrame_IT+0x104>
  while (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (descriptorscancounter < ETH_RXBUFNB))
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	db02      	blt.n	80032ca <HAL_ETH_GetReceivedFrame_IT+0xf2>
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	2b03      	cmp	r3, #3
 80032c8:	d99c      	bls.n	8003204 <HAL_ETH_GetReceivedFrame_IT+0x2c>
    }
  }

  /* Set HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	2201      	movs	r2, #1
 80032ce:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	2200      	movs	r2, #0
 80032d6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_ERROR;
 80032da:	2301      	movs	r3, #1
}
 80032dc:	4618      	mov	r0, r3
 80032de:	3714      	adds	r7, #20
 80032e0:	46bd      	mov	sp, r7
 80032e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e6:	4770      	bx	lr

080032e8 <HAL_ETH_IRQHandler>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 80032e8:	b580      	push	{r7, lr}
 80032ea:	b082      	sub	sp, #8
 80032ec:	af00      	add	r7, sp, #0
 80032ee:	6078      	str	r0, [r7, #4]
  /* Frame received */
  if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_R)) 
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80032f8:	3314      	adds	r3, #20
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003300:	2b40      	cmp	r3, #64	; 0x40
 8003302:	d112      	bne.n	800332a <HAL_ETH_IRQHandler+0x42>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*Call registered Receive complete callback*/
    heth->RxCpltCallback(heth);
#else
    /* Receive complete callback */
    HAL_ETH_RxCpltCallback(heth);
 8003304:	6878      	ldr	r0, [r7, #4]
 8003306:	f006 fa5b 	bl	80097c0 <HAL_ETH_RxCpltCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */

     /* Clear the Eth DMA Rx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_R);
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003312:	3314      	adds	r3, #20
 8003314:	2240      	movs	r2, #64	; 0x40
 8003316:	601a      	str	r2, [r3, #0]

    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	2201      	movs	r2, #1
 800331c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	2200      	movs	r2, #0
 8003324:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003328:	e01b      	b.n	8003362 <HAL_ETH_IRQHandler+0x7a>

  }
  /* Frame transmitted */
  else if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_T)) 
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003332:	3314      	adds	r3, #20
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	f003 0301 	and.w	r3, r3, #1
 800333a:	2b01      	cmp	r3, #1
 800333c:	d111      	bne.n	8003362 <HAL_ETH_IRQHandler+0x7a>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*  Call resgistered Transfer complete callback*/
    heth->TxCpltCallback(heth);
#else
    /* Transfer complete callback */
    HAL_ETH_TxCpltCallback(heth);
 800333e:	6878      	ldr	r0, [r7, #4]
 8003340:	f000 f839 	bl	80033b6 <HAL_ETH_TxCpltCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */

    /* Clear the Eth DMA Tx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_T);
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800334c:	3314      	adds	r3, #20
 800334e:	2201      	movs	r2, #1
 8003350:	601a      	str	r2, [r3, #0]

    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	2201      	movs	r2, #1
 8003356:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	2200      	movs	r2, #0
 800335e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }
  
  /* Clear the interrupt flags */
  __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_NIS);
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800336a:	3314      	adds	r3, #20
 800336c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8003370:	601a      	str	r2, [r3, #0]
  
  /* ETH DMA Error */
  if(__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_AIS))
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800337a:	3314      	adds	r3, #20
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003382:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003386:	d112      	bne.n	80033ae <HAL_ETH_IRQHandler+0xc6>
  {
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    heth->DMAErrorCallback(heth);
#else
    /* Ethernet Error callback */
    HAL_ETH_ErrorCallback(heth);
 8003388:	6878      	ldr	r0, [r7, #4]
 800338a:	f000 f81e 	bl	80033ca <HAL_ETH_ErrorCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */

    /* Clear the interrupt flags */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_FLAG_AIS);
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003396:	3314      	adds	r3, #20
 8003398:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800339c:	601a      	str	r2, [r3, #0]
  
    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	2201      	movs	r2, #1
 80033a2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	2200      	movs	r2, #0
 80033aa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }
}
 80033ae:	bf00      	nop
 80033b0:	3708      	adds	r7, #8
 80033b2:	46bd      	mov	sp, r7
 80033b4:	bd80      	pop	{r7, pc}

080033b6 <HAL_ETH_TxCpltCallback>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *heth)
{
 80033b6:	b480      	push	{r7}
 80033b8:	b083      	sub	sp, #12
 80033ba:	af00      	add	r7, sp, #0
 80033bc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_TxCpltCallback could be implemented in the user file
  */ 
}
 80033be:	bf00      	nop
 80033c0:	370c      	adds	r7, #12
 80033c2:	46bd      	mov	sp, r7
 80033c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c8:	4770      	bx	lr

080033ca <HAL_ETH_ErrorCallback>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *heth)
{
 80033ca:	b480      	push	{r7}
 80033cc:	b083      	sub	sp, #12
 80033ce:	af00      	add	r7, sp, #0
 80033d0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_TxCpltCallback could be implemented in the user file
  */ 
}
 80033d2:	bf00      	nop
 80033d4:	370c      	adds	r7, #12
 80033d6:	46bd      	mov	sp, r7
 80033d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033dc:	4770      	bx	lr

080033de <HAL_ETH_ReadPHYRegister>:
  *                   More PHY register could be read depending on the used PHY
  * @param RegValue PHY register value                  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t *RegValue)
{
 80033de:	b580      	push	{r7, lr}
 80033e0:	b086      	sub	sp, #24
 80033e2:	af00      	add	r7, sp, #0
 80033e4:	60f8      	str	r0, [r7, #12]
 80033e6:	460b      	mov	r3, r1
 80033e8:	607a      	str	r2, [r7, #4]
 80033ea:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg1 = 0U;     
 80033ec:	2300      	movs	r3, #0
 80033ee:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 80033f0:	2300      	movs	r3, #0
 80033f2:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80033fa:	b2db      	uxtb	r3, r3
 80033fc:	2b82      	cmp	r3, #130	; 0x82
 80033fe:	d101      	bne.n	8003404 <HAL_ETH_ReadPHYRegister+0x26>
  {
    return HAL_BUSY;
 8003400:	2302      	movs	r3, #2
 8003402:	e050      	b.n	80034a6 <HAL_ETH_ReadPHYRegister+0xc8>
  }
  /* Set ETH HAL State to BUSY_RD */
  heth->State = HAL_ETH_STATE_BUSY_RD;
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	2282      	movs	r2, #130	; 0x82
 8003408:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	691b      	ldr	r3, [r3, #16]
 8003412:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8003414:	697b      	ldr	r3, [r7, #20]
 8003416:	f003 031c 	and.w	r3, r3, #28
 800341a:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII address register value */
  tmpreg1 |=(((uint32_t)heth->Init.PhyAddress << 11U) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	8a1b      	ldrh	r3, [r3, #16]
 8003420:	02db      	lsls	r3, r3, #11
 8003422:	b29b      	uxth	r3, r3
 8003424:	697a      	ldr	r2, [r7, #20]
 8003426:	4313      	orrs	r3, r2
 8003428:	617b      	str	r3, [r7, #20]
  tmpreg1 |=(((uint32_t)PHYReg<<6U) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
 800342a:	897b      	ldrh	r3, [r7, #10]
 800342c:	019b      	lsls	r3, r3, #6
 800342e:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8003432:	697a      	ldr	r2, [r7, #20]
 8003434:	4313      	orrs	r3, r2
 8003436:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 8003438:	697b      	ldr	r3, [r7, #20]
 800343a:	f023 0302 	bic.w	r3, r3, #2
 800343e:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 8003440:	697b      	ldr	r3, [r7, #20]
 8003442:	f043 0301 	orr.w	r3, r3, #1
 8003446:	617b      	str	r3, [r7, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	697a      	ldr	r2, [r7, #20]
 800344e:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8003450:	f7ff fa32 	bl	80028b8 <HAL_GetTick>
 8003454:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8003456:	e015      	b.n	8003484 <HAL_ETH_ReadPHYRegister+0xa6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_READ_TO)
 8003458:	f7ff fa2e 	bl	80028b8 <HAL_GetTick>
 800345c:	4602      	mov	r2, r0
 800345e:	693b      	ldr	r3, [r7, #16]
 8003460:	1ad3      	subs	r3, r2, r3
 8003462:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003466:	d309      	bcc.n	800347c <HAL_ETH_ReadPHYRegister+0x9e>
    {
      heth->State= HAL_ETH_STATE_READY;
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	2201      	movs	r2, #1
 800346c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	2200      	movs	r2, #0
 8003474:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 8003478:	2303      	movs	r3, #3
 800347a:	e014      	b.n	80034a6 <HAL_ETH_ReadPHYRegister+0xc8>
    }
    
    tmpreg1 = heth->Instance->MACMIIAR;
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	691b      	ldr	r3, [r3, #16]
 8003482:	617b      	str	r3, [r7, #20]
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8003484:	697b      	ldr	r3, [r7, #20]
 8003486:	f003 0301 	and.w	r3, r3, #1
 800348a:	2b00      	cmp	r3, #0
 800348c:	d1e4      	bne.n	8003458 <HAL_ETH_ReadPHYRegister+0x7a>
  }
  
  /* Get MACMIIDR value */
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	695b      	ldr	r3, [r3, #20]
 8003494:	b29b      	uxth	r3, r3
 8003496:	461a      	mov	r2, r3
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	2201      	movs	r2, #1
 80034a0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 80034a4:	2300      	movs	r3, #0
}
 80034a6:	4618      	mov	r0, r3
 80034a8:	3718      	adds	r7, #24
 80034aa:	46bd      	mov	sp, r7
 80034ac:	bd80      	pop	{r7, pc}

080034ae <HAL_ETH_WritePHYRegister>:
  *             More PHY register could be written depending on the used PHY
  * @param  RegValue the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t RegValue)
{
 80034ae:	b580      	push	{r7, lr}
 80034b0:	b086      	sub	sp, #24
 80034b2:	af00      	add	r7, sp, #0
 80034b4:	60f8      	str	r0, [r7, #12]
 80034b6:	460b      	mov	r3, r1
 80034b8:	607a      	str	r2, [r7, #4]
 80034ba:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg1 = 0U;
 80034bc:	2300      	movs	r3, #0
 80034be:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 80034c0:	2300      	movs	r3, #0
 80034c2:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80034ca:	b2db      	uxtb	r3, r3
 80034cc:	2b42      	cmp	r3, #66	; 0x42
 80034ce:	d101      	bne.n	80034d4 <HAL_ETH_WritePHYRegister+0x26>
  {
    return HAL_BUSY;
 80034d0:	2302      	movs	r3, #2
 80034d2:	e04e      	b.n	8003572 <HAL_ETH_WritePHYRegister+0xc4>
  }
  /* Set ETH HAL State to BUSY_WR */
  heth->State = HAL_ETH_STATE_BUSY_WR;
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	2242      	movs	r2, #66	; 0x42
 80034d8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	691b      	ldr	r3, [r3, #16]
 80034e2:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 80034e4:	697b      	ldr	r3, [r7, #20]
 80034e6:	f003 031c 	and.w	r3, r3, #28
 80034ea:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII register address value */
  tmpreg1 |=(((uint32_t)heth->Init.PhyAddress<<11U) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	8a1b      	ldrh	r3, [r3, #16]
 80034f0:	02db      	lsls	r3, r3, #11
 80034f2:	b29b      	uxth	r3, r3
 80034f4:	697a      	ldr	r2, [r7, #20]
 80034f6:	4313      	orrs	r3, r2
 80034f8:	617b      	str	r3, [r7, #20]
  tmpreg1 |=(((uint32_t)PHYReg<<6U) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 80034fa:	897b      	ldrh	r3, [r7, #10]
 80034fc:	019b      	lsls	r3, r3, #6
 80034fe:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8003502:	697a      	ldr	r2, [r7, #20]
 8003504:	4313      	orrs	r3, r2
 8003506:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 8003508:	697b      	ldr	r3, [r7, #20]
 800350a:	f043 0302 	orr.w	r3, r3, #2
 800350e:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 8003510:	697b      	ldr	r3, [r7, #20]
 8003512:	f043 0301 	orr.w	r3, r3, #1
 8003516:	617b      	str	r3, [r7, #20]
  
  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	b29a      	uxth	r2, r3
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	615a      	str	r2, [r3, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	697a      	ldr	r2, [r7, #20]
 8003528:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 800352a:	f7ff f9c5 	bl	80028b8 <HAL_GetTick>
 800352e:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8003530:	e015      	b.n	800355e <HAL_ETH_WritePHYRegister+0xb0>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_WRITE_TO)
 8003532:	f7ff f9c1 	bl	80028b8 <HAL_GetTick>
 8003536:	4602      	mov	r2, r0
 8003538:	693b      	ldr	r3, [r7, #16]
 800353a:	1ad3      	subs	r3, r2, r3
 800353c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003540:	d309      	bcc.n	8003556 <HAL_ETH_WritePHYRegister+0xa8>
    {
      heth->State= HAL_ETH_STATE_READY;
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	2201      	movs	r2, #1
 8003546:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	2200      	movs	r2, #0
 800354e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 8003552:	2303      	movs	r3, #3
 8003554:	e00d      	b.n	8003572 <HAL_ETH_WritePHYRegister+0xc4>
    }
    
    tmpreg1 = heth->Instance->MACMIIAR;
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	691b      	ldr	r3, [r3, #16]
 800355c:	617b      	str	r3, [r7, #20]
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 800355e:	697b      	ldr	r3, [r7, #20]
 8003560:	f003 0301 	and.w	r3, r3, #1
 8003564:	2b00      	cmp	r3, #0
 8003566:	d1e4      	bne.n	8003532 <HAL_ETH_WritePHYRegister+0x84>
  }
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	2201      	movs	r2, #1
 800356c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK; 
 8003570:	2300      	movs	r3, #0
}
 8003572:	4618      	mov	r0, r3
 8003574:	3718      	adds	r7, #24
 8003576:	46bd      	mov	sp, r7
 8003578:	bd80      	pop	{r7, pc}

0800357a <HAL_ETH_Start>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{  
 800357a:	b580      	push	{r7, lr}
 800357c:	b082      	sub	sp, #8
 800357e:	af00      	add	r7, sp, #0
 8003580:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003588:	2b01      	cmp	r3, #1
 800358a:	d101      	bne.n	8003590 <HAL_ETH_Start+0x16>
 800358c:	2302      	movs	r3, #2
 800358e:	e01f      	b.n	80035d0 <HAL_ETH_Start+0x56>
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	2201      	movs	r2, #1
 8003594:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	2202      	movs	r2, #2
 800359c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Enable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionEnable(heth);
 80035a0:	6878      	ldr	r0, [r7, #4]
 80035a2:	f000 fa1b 	bl	80039dc <ETH_MACTransmissionEnable>
  
  /* Enable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionEnable(heth);
 80035a6:	6878      	ldr	r0, [r7, #4]
 80035a8:	f000 fa35 	bl	8003a16 <ETH_MACReceptionEnable>
  
  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 80035ac:	6878      	ldr	r0, [r7, #4]
 80035ae:	f000 fa7f 	bl	8003ab0 <ETH_FlushTransmitFIFO>
  
  /* Start DMA transmission */
  ETH_DMATransmissionEnable(heth);
 80035b2:	6878      	ldr	r0, [r7, #4]
 80035b4:	f000 fa4c 	bl	8003a50 <ETH_DMATransmissionEnable>
  
  /* Start DMA reception */
  ETH_DMAReceptionEnable(heth);
 80035b8:	6878      	ldr	r0, [r7, #4]
 80035ba:	f000 fa61 	bl	8003a80 <ETH_DMAReceptionEnable>
  
  /* Set the ETH state to READY*/
  heth->State= HAL_ETH_STATE_READY;
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	2201      	movs	r2, #1
 80035c2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	2200      	movs	r2, #0
 80035ca:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 80035ce:	2300      	movs	r3, #0
}
 80035d0:	4618      	mov	r0, r3
 80035d2:	3708      	adds	r7, #8
 80035d4:	46bd      	mov	sp, r7
 80035d6:	bd80      	pop	{r7, pc}

080035d8 <ETH_MACDMAConfig>:
  *         the configuration information for ETHERNET module
  * @param  err Ethernet Init error
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth, uint32_t err)
{
 80035d8:	b580      	push	{r7, lr}
 80035da:	b0b0      	sub	sp, #192	; 0xc0
 80035dc:	af00      	add	r7, sp, #0
 80035de:	6078      	str	r0, [r7, #4]
 80035e0:	6039      	str	r1, [r7, #0]
  ETH_MACInitTypeDef macinit;
  ETH_DMAInitTypeDef dmainit;
  uint32_t tmpreg1 = 0U;
 80035e2:	2300      	movs	r3, #0
 80035e4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  if (err != ETH_SUCCESS) /* Auto-negotiation failed */
 80035e8:	683b      	ldr	r3, [r7, #0]
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d007      	beq.n	80035fe <ETH_MACDMAConfig+0x26>
  {
    /* Set Ethernet duplex mode to Full-duplex */
    (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80035f4:	60da      	str	r2, [r3, #12]
    
    /* Set Ethernet speed to 100M */
    (heth->Init).Speed = ETH_SPEED_100M;
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80035fc:	609a      	str	r2, [r3, #8]
  }
  
  /* Ethernet MAC default initialization **************************************/
  macinit.Watchdog = ETH_WATCHDOG_ENABLE;
 80035fe:	2300      	movs	r3, #0
 8003600:	64bb      	str	r3, [r7, #72]	; 0x48
  macinit.Jabber = ETH_JABBER_ENABLE;
 8003602:	2300      	movs	r3, #0
 8003604:	64fb      	str	r3, [r7, #76]	; 0x4c
  macinit.InterFrameGap = ETH_INTERFRAMEGAP_96BIT;
 8003606:	2300      	movs	r3, #0
 8003608:	653b      	str	r3, [r7, #80]	; 0x50
  macinit.CarrierSense = ETH_CARRIERSENCE_ENABLE;
 800360a:	2300      	movs	r3, #0
 800360c:	657b      	str	r3, [r7, #84]	; 0x54
  macinit.ReceiveOwn = ETH_RECEIVEOWN_ENABLE;
 800360e:	2300      	movs	r3, #0
 8003610:	65bb      	str	r3, [r7, #88]	; 0x58
  macinit.LoopbackMode = ETH_LOOPBACKMODE_DISABLE;
 8003612:	2300      	movs	r3, #0
 8003614:	65fb      	str	r3, [r7, #92]	; 0x5c
  if(heth->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	69db      	ldr	r3, [r3, #28]
 800361a:	2b00      	cmp	r3, #0
 800361c:	d103      	bne.n	8003626 <ETH_MACDMAConfig+0x4e>
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_ENABLE;
 800361e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003622:	663b      	str	r3, [r7, #96]	; 0x60
 8003624:	e001      	b.n	800362a <ETH_MACDMAConfig+0x52>
  }
  else
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 8003626:	2300      	movs	r3, #0
 8003628:	663b      	str	r3, [r7, #96]	; 0x60
  }
  macinit.RetryTransmission = ETH_RETRYTRANSMISSION_DISABLE;
 800362a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800362e:	667b      	str	r3, [r7, #100]	; 0x64
  macinit.AutomaticPadCRCStrip = ETH_AUTOMATICPADCRCSTRIP_DISABLE;
 8003630:	2300      	movs	r3, #0
 8003632:	66bb      	str	r3, [r7, #104]	; 0x68
  macinit.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8003634:	2300      	movs	r3, #0
 8003636:	66fb      	str	r3, [r7, #108]	; 0x6c
  macinit.DeferralCheck = ETH_DEFFERRALCHECK_DISABLE;
 8003638:	2300      	movs	r3, #0
 800363a:	673b      	str	r3, [r7, #112]	; 0x70
  macinit.ReceiveAll = ETH_RECEIVEAll_DISABLE;
 800363c:	2300      	movs	r3, #0
 800363e:	677b      	str	r3, [r7, #116]	; 0x74
  macinit.SourceAddrFilter = ETH_SOURCEADDRFILTER_DISABLE;
 8003640:	2300      	movs	r3, #0
 8003642:	67bb      	str	r3, [r7, #120]	; 0x78
  macinit.PassControlFrames = ETH_PASSCONTROLFRAMES_BLOCKALL;
 8003644:	2340      	movs	r3, #64	; 0x40
 8003646:	67fb      	str	r3, [r7, #124]	; 0x7c
  macinit.BroadcastFramesReception = ETH_BROADCASTFRAMESRECEPTION_ENABLE;
 8003648:	2300      	movs	r3, #0
 800364a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  macinit.DestinationAddrFilter = ETH_DESTINATIONADDRFILTER_NORMAL;
 800364e:	2300      	movs	r3, #0
 8003650:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macinit.PromiscuousMode = ETH_PROMISCUOUS_MODE_DISABLE;
 8003654:	2300      	movs	r3, #0
 8003656:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macinit.MulticastFramesFilter = ETH_MULTICASTFRAMESFILTER_PERFECT;
 800365a:	2300      	movs	r3, #0
 800365c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  macinit.UnicastFramesFilter = ETH_UNICASTFRAMESFILTER_PERFECT;
 8003660:	2300      	movs	r3, #0
 8003662:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  macinit.HashTableHigh = 0x0U;
 8003666:	2300      	movs	r3, #0
 8003668:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  macinit.HashTableLow = 0x0U;
 800366c:	2300      	movs	r3, #0
 800366e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  macinit.PauseTime = 0x0U;
 8003672:	2300      	movs	r3, #0
 8003674:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  macinit.ZeroQuantaPause = ETH_ZEROQUANTAPAUSE_DISABLE;
 8003678:	2380      	movs	r3, #128	; 0x80
 800367a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  macinit.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 800367e:	2300      	movs	r3, #0
 8003680:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  macinit.UnicastPauseFrameDetect = ETH_UNICASTPAUSEFRAMEDETECT_DISABLE;
 8003684:	2300      	movs	r3, #0
 8003686:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  macinit.ReceiveFlowControl = ETH_RECEIVEFLOWCONTROL_DISABLE;
 800368a:	2300      	movs	r3, #0
 800368c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  macinit.TransmitFlowControl = ETH_TRANSMITFLOWCONTROL_DISABLE;
 8003690:	2300      	movs	r3, #0
 8003692:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  macinit.VLANTagComparison = ETH_VLANTAGCOMPARISON_16BIT;
 8003696:	2300      	movs	r3, #0
 8003698:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  macinit.VLANTagIdentifier = 0x0U;
 800369c:	2300      	movs	r3, #0
 800369e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  
  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 80036ac:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80036b0:	4bac      	ldr	r3, [pc, #688]	; (8003964 <ETH_MACDMAConfig+0x38c>)
 80036b2:	4013      	ands	r3, r2
 80036b4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Set the IPCO bit according to ETH ChecksumOffload value */
  /* Set the DR bit according to ETH RetryTransmission value */
  /* Set the ACS bit according to ETH AutomaticPadCRCStrip value */
  /* Set the BL bit according to ETH BackOffLimit value */
  /* Set the DC bit according to ETH DeferralCheck value */
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 80036b8:	6cba      	ldr	r2, [r7, #72]	; 0x48
                       macinit.Jabber | 
 80036ba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 80036bc:	431a      	orrs	r2, r3
                       macinit.InterFrameGap |
 80036be:	6d3b      	ldr	r3, [r7, #80]	; 0x50
                       macinit.Jabber | 
 80036c0:	431a      	orrs	r2, r3
                       macinit.CarrierSense |
 80036c2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
                       macinit.InterFrameGap |
 80036c4:	431a      	orrs	r2, r3
                       (heth->Init).Speed | 
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	689b      	ldr	r3, [r3, #8]
                       macinit.CarrierSense |
 80036ca:	431a      	orrs	r2, r3
                       macinit.ReceiveOwn |
 80036cc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
                       (heth->Init).Speed | 
 80036ce:	431a      	orrs	r2, r3
                       macinit.LoopbackMode |
 80036d0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
                       macinit.ReceiveOwn |
 80036d2:	431a      	orrs	r2, r3
                       (heth->Init).DuplexMode | 
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	68db      	ldr	r3, [r3, #12]
                       macinit.LoopbackMode |
 80036d8:	431a      	orrs	r2, r3
                       macinit.ChecksumOffload |    
 80036da:	6e3b      	ldr	r3, [r7, #96]	; 0x60
                       (heth->Init).DuplexMode | 
 80036dc:	431a      	orrs	r2, r3
                       macinit.RetryTransmission | 
 80036de:	6e7b      	ldr	r3, [r7, #100]	; 0x64
                       macinit.ChecksumOffload |    
 80036e0:	431a      	orrs	r2, r3
                       macinit.AutomaticPadCRCStrip | 
 80036e2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
                       macinit.RetryTransmission | 
 80036e4:	431a      	orrs	r2, r3
                       macinit.BackOffLimit | 
 80036e6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
                       macinit.AutomaticPadCRCStrip | 
 80036e8:	431a      	orrs	r2, r3
                       macinit.DeferralCheck);
 80036ea:	6f3b      	ldr	r3, [r7, #112]	; 0x70
                       macinit.BackOffLimit | 
 80036ec:	4313      	orrs	r3, r2
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 80036ee:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80036f2:	4313      	orrs	r3, r2
 80036f4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8003700:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800370c:	2001      	movs	r0, #1
 800370e:	f7ff f8df 	bl	80028d0 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1; 
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800371a:	601a      	str	r2, [r3, #0]
  /* Set the DAIF bit according to ETH DestinationAddrFilter value */
  /* Set the PR bit according to ETH PromiscuousMode value */
  /* Set the PM, HMC and HPF bits according to ETH MulticastFramesFilter value */
  /* Set the HUC and HPF bits according to ETH UnicastFramesFilter value */
  /* Write to ETHERNET MACFFR */  
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 800371c:	6f7a      	ldr	r2, [r7, #116]	; 0x74
                                        macinit.SourceAddrFilter |
 800371e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8003720:	431a      	orrs	r2, r3
                                        macinit.PassControlFrames |
 8003722:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
                                        macinit.SourceAddrFilter |
 8003724:	431a      	orrs	r2, r3
                                        macinit.BroadcastFramesReception | 
 8003726:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
                                        macinit.PassControlFrames |
 800372a:	431a      	orrs	r2, r3
                                        macinit.DestinationAddrFilter |
 800372c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
                                        macinit.BroadcastFramesReception | 
 8003730:	431a      	orrs	r2, r3
                                        macinit.PromiscuousMode |
 8003732:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
                                        macinit.DestinationAddrFilter |
 8003736:	431a      	orrs	r2, r3
                                        macinit.MulticastFramesFilter |
 8003738:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
                                        macinit.PromiscuousMode |
 800373c:	ea42 0103 	orr.w	r1, r2, r3
                                        macinit.UnicastFramesFilter);
 8003740:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
                                        macinit.MulticastFramesFilter |
 8003748:	430a      	orrs	r2, r1
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 800374a:	605a      	str	r2, [r3, #4]
   
   /* Wait until the write operation will be taken into account:
      at least four TX_CLK/RX_CLK clock cycles */
   tmpreg1 = (heth->Instance)->MACFFR;
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	685b      	ldr	r3, [r3, #4]
 8003752:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8003756:	2001      	movs	r0, #1
 8003758:	f7ff f8ba 	bl	80028d0 <HAL_Delay>
   (heth->Instance)->MACFFR = tmpreg1;
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8003764:	605a      	str	r2, [r3, #4]
   
   /*--------------- ETHERNET MACHTHR and MACHTLR Configuration --------------*/
   /* Write to ETHERNET MACHTHR */
   (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800376e:	609a      	str	r2, [r3, #8]
   
   /* Write to ETHERNET MACHTLR */
   (heth->Instance)->MACHTLR = (uint32_t)macinit.HashTableLow;
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8003778:	60da      	str	r2, [r3, #12]
   /*----------------------- ETHERNET MACFCR Configuration -------------------*/
   
   /* Get the ETHERNET MACFCR value */  
   tmpreg1 = (heth->Instance)->MACFCR;
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	699b      	ldr	r3, [r3, #24]
 8003780:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Clear xx bits */
   tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8003784:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8003788:	f64f 7341 	movw	r3, #65345	; 0xff41
 800378c:	4013      	ands	r3, r2
 800378e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Set the DZPQ bit according to ETH ZeroQuantaPause value */
   /* Set the PLT bit according to ETH PauseLowThreshold value */
   /* Set the UP bit according to ETH UnicastPauseFrameDetect value */
   /* Set the RFE bit according to ETH ReceiveFlowControl value */
   /* Set the TFE bit according to ETH TransmitFlowControl value */ 
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 8003792:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003796:	041a      	lsls	r2, r3, #16
                        macinit.ZeroQuantaPause |
 8003798:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 800379c:	431a      	orrs	r2, r3
                        macinit.PauseLowThreshold |
 800379e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
                        macinit.ZeroQuantaPause |
 80037a2:	431a      	orrs	r2, r3
                        macinit.UnicastPauseFrameDetect | 
 80037a4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
                        macinit.PauseLowThreshold |
 80037a8:	431a      	orrs	r2, r3
                        macinit.ReceiveFlowControl |
 80037aa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
                        macinit.UnicastPauseFrameDetect | 
 80037ae:	431a      	orrs	r2, r3
                        macinit.TransmitFlowControl); 
 80037b0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
                        macinit.ReceiveFlowControl |
 80037b4:	4313      	orrs	r3, r2
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 80037b6:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80037ba:	4313      	orrs	r3, r2
 80037bc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   
   /* Write to ETHERNET MACFCR */
   (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80037c8:	619a      	str	r2, [r3, #24]
   
   /* Wait until the write operation will be taken into account:
   at least four TX_CLK/RX_CLK clock cycles */
   tmpreg1 = (heth->Instance)->MACFCR;
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	699b      	ldr	r3, [r3, #24]
 80037d0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 80037d4:	2001      	movs	r0, #1
 80037d6:	f7ff f87b 	bl	80028d0 <HAL_Delay>
   (heth->Instance)->MACFCR = tmpreg1;
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80037e2:	619a      	str	r2, [r3, #24]
   
   /*----------------------- ETHERNET MACVLANTR Configuration ----------------*/
   /* Set the ETV bit according to ETH VLANTagComparison value */
   /* Set the VL bit according to ETH VLANTagIdentifier value */  
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 80037e4:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
                                            macinit.VLANTagIdentifier);
 80037e8:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	430a      	orrs	r2, r1
 80037f2:	61da      	str	r2, [r3, #28]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACVLANTR;
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	69db      	ldr	r3, [r3, #28]
 80037fa:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80037fe:	2001      	movs	r0, #1
 8003800:	f7ff f866 	bl	80028d0 <HAL_Delay>
    (heth->Instance)->MACVLANTR = tmpreg1;
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800380c:	61da      	str	r2, [r3, #28]
    
    /* Ethernet DMA default initialization ************************************/
    dmainit.DropTCPIPChecksumErrorFrame = ETH_DROPTCPIPCHECKSUMERRORFRAME_ENABLE;
 800380e:	2300      	movs	r3, #0
 8003810:	60bb      	str	r3, [r7, #8]
    dmainit.ReceiveStoreForward = ETH_RECEIVESTOREFORWARD_ENABLE;
 8003812:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003816:	60fb      	str	r3, [r7, #12]
    dmainit.FlushReceivedFrame = ETH_FLUSHRECEIVEDFRAME_ENABLE;
 8003818:	2300      	movs	r3, #0
 800381a:	613b      	str	r3, [r7, #16]
    dmainit.TransmitStoreForward = ETH_TRANSMITSTOREFORWARD_ENABLE;  
 800381c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8003820:	617b      	str	r3, [r7, #20]
    dmainit.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8003822:	2300      	movs	r3, #0
 8003824:	61bb      	str	r3, [r7, #24]
    dmainit.ForwardErrorFrames = ETH_FORWARDERRORFRAMES_DISABLE;
 8003826:	2300      	movs	r3, #0
 8003828:	61fb      	str	r3, [r7, #28]
    dmainit.ForwardUndersizedGoodFrames = ETH_FORWARDUNDERSIZEDGOODFRAMES_DISABLE;
 800382a:	2300      	movs	r3, #0
 800382c:	623b      	str	r3, [r7, #32]
    dmainit.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 800382e:	2300      	movs	r3, #0
 8003830:	627b      	str	r3, [r7, #36]	; 0x24
    dmainit.SecondFrameOperate = ETH_SECONDFRAMEOPERARTE_ENABLE;
 8003832:	2304      	movs	r3, #4
 8003834:	62bb      	str	r3, [r7, #40]	; 0x28
    dmainit.AddressAlignedBeats = ETH_ADDRESSALIGNEDBEATS_ENABLE;
 8003836:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800383a:	62fb      	str	r3, [r7, #44]	; 0x2c
    dmainit.FixedBurst = ETH_FIXEDBURST_ENABLE;
 800383c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003840:	633b      	str	r3, [r7, #48]	; 0x30
    dmainit.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8003842:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003846:	637b      	str	r3, [r7, #52]	; 0x34
    dmainit.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8003848:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800384c:	63bb      	str	r3, [r7, #56]	; 0x38
    dmainit.EnhancedDescriptorFormat = ETH_DMAENHANCEDDESCRIPTOR_ENABLE;
 800384e:	2380      	movs	r3, #128	; 0x80
 8003850:	63fb      	str	r3, [r7, #60]	; 0x3c
    dmainit.DescriptorSkipLength = 0x0U;
 8003852:	2300      	movs	r3, #0
 8003854:	643b      	str	r3, [r7, #64]	; 0x40
    dmainit.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8003856:	2300      	movs	r3, #0
 8003858:	647b      	str	r3, [r7, #68]	; 0x44
    
    /* Get the ETHERNET DMAOMR value */
    tmpreg1 = (heth->Instance)->DMAOMR;
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003862:	3318      	adds	r3, #24
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Clear xx bits */
    tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 800386a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800386e:	4b3e      	ldr	r3, [pc, #248]	; (8003968 <ETH_MACDMAConfig+0x390>)
 8003870:	4013      	ands	r3, r2
 8003872:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Set the TTC bit according to ETH TransmitThresholdControl value */
    /* Set the FEF bit according to ETH ForwardErrorFrames value */
    /* Set the FUF bit according to ETH ForwardUndersizedGoodFrames value */
    /* Set the RTC bit according to ETH ReceiveThresholdControl value */
    /* Set the OSF bit according to ETH SecondFrameOperate value */
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8003876:	68ba      	ldr	r2, [r7, #8]
                         dmainit.ReceiveStoreForward |
 8003878:	68fb      	ldr	r3, [r7, #12]
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 800387a:	431a      	orrs	r2, r3
                         dmainit.FlushReceivedFrame |
 800387c:	693b      	ldr	r3, [r7, #16]
                         dmainit.ReceiveStoreForward |
 800387e:	431a      	orrs	r2, r3
                         dmainit.TransmitStoreForward | 
 8003880:	697b      	ldr	r3, [r7, #20]
                         dmainit.FlushReceivedFrame |
 8003882:	431a      	orrs	r2, r3
                         dmainit.TransmitThresholdControl |
 8003884:	69bb      	ldr	r3, [r7, #24]
                         dmainit.TransmitStoreForward | 
 8003886:	431a      	orrs	r2, r3
                         dmainit.ForwardErrorFrames |
 8003888:	69fb      	ldr	r3, [r7, #28]
                         dmainit.TransmitThresholdControl |
 800388a:	431a      	orrs	r2, r3
                         dmainit.ForwardUndersizedGoodFrames |
 800388c:	6a3b      	ldr	r3, [r7, #32]
                         dmainit.ForwardErrorFrames |
 800388e:	431a      	orrs	r2, r3
                         dmainit.ReceiveThresholdControl |
 8003890:	6a7b      	ldr	r3, [r7, #36]	; 0x24
                         dmainit.ForwardUndersizedGoodFrames |
 8003892:	431a      	orrs	r2, r3
                         dmainit.SecondFrameOperate);
 8003894:	6abb      	ldr	r3, [r7, #40]	; 0x28
                         dmainit.ReceiveThresholdControl |
 8003896:	4313      	orrs	r3, r2
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8003898:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800389c:	4313      	orrs	r3, r2
 800389e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    
    /* Write to ETHERNET DMAOMR */
    (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80038aa:	3318      	adds	r3, #24
 80038ac:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80038b0:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->DMAOMR;
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80038ba:	3318      	adds	r3, #24
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80038c2:	2001      	movs	r0, #1
 80038c4:	f7ff f804 	bl	80028d0 <HAL_Delay>
    (heth->Instance)->DMAOMR = tmpreg1;
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80038d0:	3318      	adds	r3, #24
 80038d2:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80038d6:	601a      	str	r2, [r3, #0]
    /* Set the RPBL and 4*PBL bits according to ETH RxDMABurstLength value */
    /* Set the PBL and 4*PBL bits according to ETH TxDMABurstLength value */
    /* Set the Enhanced DMA descriptors bit according to ETH EnhancedDescriptorFormat value*/
    /* Set the DSL bit according to ETH DesciptorSkipLength value */
    /* Set the PR and DA bits according to ETH DMAArbitration value */
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 80038d8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
                                          dmainit.FixedBurst |
 80038da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 80038dc:	431a      	orrs	r2, r3
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 80038de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                          dmainit.FixedBurst |
 80038e0:	431a      	orrs	r2, r3
                                          dmainit.TxDMABurstLength |
 80038e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 80038e4:	431a      	orrs	r2, r3
                                          dmainit.EnhancedDescriptorFormat |
 80038e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
                                          dmainit.TxDMABurstLength |
 80038e8:	431a      	orrs	r2, r3
                                          (dmainit.DescriptorSkipLength << 2U) |
 80038ea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80038ec:	009b      	lsls	r3, r3, #2
                                          dmainit.EnhancedDescriptorFormat |
 80038ee:	431a      	orrs	r2, r3
                                          dmainit.DMAArbitration |
 80038f0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
                                          (dmainit.DescriptorSkipLength << 2U) |
 80038f2:	431a      	orrs	r2, r3
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80038fc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003900:	601a      	str	r2, [r3, #0]
                                          ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */
     
     /* Wait until the write operation will be taken into account:
        at least four TX_CLK/RX_CLK clock cycles */
     tmpreg1 = (heth->Instance)->DMABMR;
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8003910:	2001      	movs	r0, #1
 8003912:	f7fe ffdd 	bl	80028d0 <HAL_Delay>
     (heth->Instance)->DMABMR = tmpreg1;
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800391e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8003922:	601a      	str	r2, [r3, #0]

     if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	699b      	ldr	r3, [r3, #24]
 8003928:	2b01      	cmp	r3, #1
 800392a:	d10f      	bne.n	800394c <ETH_MACDMAConfig+0x374>
     {
       /* Enable the Ethernet Rx Interrupt */
       __HAL_ETH_DMA_ENABLE_IT((heth), ETH_DMA_IT_NIS | ETH_DMA_IT_R);
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003934:	331c      	adds	r3, #28
 8003936:	681a      	ldr	r2, [r3, #0]
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8003940:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003944:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003948:	331c      	adds	r3, #28
 800394a:	601a      	str	r2, [r3, #0]
     }

     /* Initialize MAC address in ethernet MAC */ 
     ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	695b      	ldr	r3, [r3, #20]
 8003950:	461a      	mov	r2, r3
 8003952:	2100      	movs	r1, #0
 8003954:	6878      	ldr	r0, [r7, #4]
 8003956:	f000 f809 	bl	800396c <ETH_MACAddressConfig>
}
 800395a:	bf00      	nop
 800395c:	37c0      	adds	r7, #192	; 0xc0
 800395e:	46bd      	mov	sp, r7
 8003960:	bd80      	pop	{r7, pc}
 8003962:	bf00      	nop
 8003964:	ff20810f 	.word	0xff20810f
 8003968:	f8de3f23 	.word	0xf8de3f23

0800396c <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 800396c:	b480      	push	{r7}
 800396e:	b087      	sub	sp, #28
 8003970:	af00      	add	r7, sp, #0
 8003972:	60f8      	str	r0, [r7, #12]
 8003974:	60b9      	str	r1, [r7, #8]
 8003976:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ETH_MAC_ADDRESS0123(MacAddr));
  
  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	3305      	adds	r3, #5
 800397c:	781b      	ldrb	r3, [r3, #0]
 800397e:	021b      	lsls	r3, r3, #8
 8003980:	687a      	ldr	r2, [r7, #4]
 8003982:	3204      	adds	r2, #4
 8003984:	7812      	ldrb	r2, [r2, #0]
 8003986:	4313      	orrs	r3, r2
 8003988:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 800398a:	68ba      	ldr	r2, [r7, #8]
 800398c:	4b11      	ldr	r3, [pc, #68]	; (80039d4 <ETH_MACAddressConfig+0x68>)
 800398e:	4413      	add	r3, r2
 8003990:	461a      	mov	r2, r3
 8003992:	697b      	ldr	r3, [r7, #20]
 8003994:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	3303      	adds	r3, #3
 800399a:	781b      	ldrb	r3, [r3, #0]
 800399c:	061a      	lsls	r2, r3, #24
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	3302      	adds	r3, #2
 80039a2:	781b      	ldrb	r3, [r3, #0]
 80039a4:	041b      	lsls	r3, r3, #16
 80039a6:	431a      	orrs	r2, r3
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	3301      	adds	r3, #1
 80039ac:	781b      	ldrb	r3, [r3, #0]
 80039ae:	021b      	lsls	r3, r3, #8
 80039b0:	4313      	orrs	r3, r2
 80039b2:	687a      	ldr	r2, [r7, #4]
 80039b4:	7812      	ldrb	r2, [r2, #0]
 80039b6:	4313      	orrs	r3, r2
 80039b8:	617b      	str	r3, [r7, #20]
  
  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 80039ba:	68ba      	ldr	r2, [r7, #8]
 80039bc:	4b06      	ldr	r3, [pc, #24]	; (80039d8 <ETH_MACAddressConfig+0x6c>)
 80039be:	4413      	add	r3, r2
 80039c0:	461a      	mov	r2, r3
 80039c2:	697b      	ldr	r3, [r7, #20]
 80039c4:	6013      	str	r3, [r2, #0]
}
 80039c6:	bf00      	nop
 80039c8:	371c      	adds	r7, #28
 80039ca:	46bd      	mov	sp, r7
 80039cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d0:	4770      	bx	lr
 80039d2:	bf00      	nop
 80039d4:	40028040 	.word	0x40028040
 80039d8:	40028044 	.word	0x40028044

080039dc <ETH_MACTransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module  
  * @retval None
  */
static void ETH_MACTransmissionEnable(ETH_HandleTypeDef *heth)
{ 
 80039dc:	b580      	push	{r7, lr}
 80039de:	b084      	sub	sp, #16
 80039e0:	af00      	add	r7, sp, #0
 80039e2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 80039e4:	2300      	movs	r3, #0
 80039e6:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC transmission */
  (heth->Instance)->MACCR |= ETH_MACCR_TE;
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	681a      	ldr	r2, [r3, #0]
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	f042 0208 	orr.w	r2, r2, #8
 80039f6:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8003a00:	2001      	movs	r0, #1
 8003a02:	f000 f87f 	bl	8003b04 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	68fa      	ldr	r2, [r7, #12]
 8003a0c:	601a      	str	r2, [r3, #0]
}
 8003a0e:	bf00      	nop
 8003a10:	3710      	adds	r7, #16
 8003a12:	46bd      	mov	sp, r7
 8003a14:	bd80      	pop	{r7, pc}

08003a16 <ETH_MACReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_MACReceptionEnable(ETH_HandleTypeDef *heth)
{ 
 8003a16:	b580      	push	{r7, lr}
 8003a18:	b084      	sub	sp, #16
 8003a1a:	af00      	add	r7, sp, #0
 8003a1c:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8003a1e:	2300      	movs	r3, #0
 8003a20:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC reception */
  (heth->Instance)->MACCR |= ETH_MACCR_RE;
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	681a      	ldr	r2, [r3, #0]
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	f042 0204 	orr.w	r2, r2, #4
 8003a30:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8003a3a:	2001      	movs	r0, #1
 8003a3c:	f000 f862 	bl	8003b04 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	68fa      	ldr	r2, [r7, #12]
 8003a46:	601a      	str	r2, [r3, #0]
}
 8003a48:	bf00      	nop
 8003a4a:	3710      	adds	r7, #16
 8003a4c:	46bd      	mov	sp, r7
 8003a4e:	bd80      	pop	{r7, pc}

08003a50 <ETH_DMATransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_DMATransmissionEnable(ETH_HandleTypeDef *heth)
{
 8003a50:	b480      	push	{r7}
 8003a52:	b083      	sub	sp, #12
 8003a54:	af00      	add	r7, sp, #0
 8003a56:	6078      	str	r0, [r7, #4]
  /* Enable the DMA transmission */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_ST;  
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003a60:	3318      	adds	r3, #24
 8003a62:	681a      	ldr	r2, [r3, #0]
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003a6c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003a70:	3318      	adds	r3, #24
 8003a72:	601a      	str	r2, [r3, #0]
}
 8003a74:	bf00      	nop
 8003a76:	370c      	adds	r7, #12
 8003a78:	46bd      	mov	sp, r7
 8003a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a7e:	4770      	bx	lr

08003a80 <ETH_DMAReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module 
  * @retval None
  */
static void ETH_DMAReceptionEnable(ETH_HandleTypeDef *heth)
{  
 8003a80:	b480      	push	{r7}
 8003a82:	b083      	sub	sp, #12
 8003a84:	af00      	add	r7, sp, #0
 8003a86:	6078      	str	r0, [r7, #4]
  /* Enable the DMA reception */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_SR;  
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003a90:	3318      	adds	r3, #24
 8003a92:	681a      	ldr	r2, [r3, #0]
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	f042 0202 	orr.w	r2, r2, #2
 8003a9c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003aa0:	3318      	adds	r3, #24
 8003aa2:	601a      	str	r2, [r3, #0]
}
 8003aa4:	bf00      	nop
 8003aa6:	370c      	adds	r7, #12
 8003aa8:	46bd      	mov	sp, r7
 8003aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aae:	4770      	bx	lr

08003ab0 <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 8003ab0:	b580      	push	{r7, lr}
 8003ab2:	b084      	sub	sp, #16
 8003ab4:	af00      	add	r7, sp, #0
 8003ab6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8003ab8:	2300      	movs	r3, #0
 8003aba:	60fb      	str	r3, [r7, #12]
  
  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003ac4:	3318      	adds	r3, #24
 8003ac6:	681a      	ldr	r2, [r3, #0]
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8003ad0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003ad4:	3318      	adds	r3, #24
 8003ad6:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003ae0:	3318      	adds	r3, #24
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8003ae6:	2001      	movs	r0, #1
 8003ae8:	f000 f80c 	bl	8003b04 <ETH_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	68fa      	ldr	r2, [r7, #12]
 8003af2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003af6:	3318      	adds	r3, #24
 8003af8:	601a      	str	r2, [r3, #0]
}
 8003afa:	bf00      	nop
 8003afc:	3710      	adds	r7, #16
 8003afe:	46bd      	mov	sp, r7
 8003b00:	bd80      	pop	{r7, pc}
	...

08003b04 <ETH_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay specifies the delay time length, in milliseconds.
  * @retval None
  */
static void ETH_Delay(uint32_t mdelay)
{
 8003b04:	b480      	push	{r7}
 8003b06:	b085      	sub	sp, #20
 8003b08:	af00      	add	r7, sp, #0
 8003b0a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003b0c:	4b0a      	ldr	r3, [pc, #40]	; (8003b38 <ETH_Delay+0x34>)
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	4a0a      	ldr	r2, [pc, #40]	; (8003b3c <ETH_Delay+0x38>)
 8003b12:	fba2 2303 	umull	r2, r3, r2, r3
 8003b16:	0a5b      	lsrs	r3, r3, #9
 8003b18:	687a      	ldr	r2, [r7, #4]
 8003b1a:	fb02 f303 	mul.w	r3, r2, r3
 8003b1e:	60fb      	str	r3, [r7, #12]
  do 
  {
    __NOP();
 8003b20:	bf00      	nop
  } 
  while (Delay --);
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	1e5a      	subs	r2, r3, #1
 8003b26:	60fa      	str	r2, [r7, #12]
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d1f9      	bne.n	8003b20 <ETH_Delay+0x1c>
}
 8003b2c:	bf00      	nop
 8003b2e:	3714      	adds	r7, #20
 8003b30:	46bd      	mov	sp, r7
 8003b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b36:	4770      	bx	lr
 8003b38:	20000000 	.word	0x20000000
 8003b3c:	10624dd3 	.word	0x10624dd3

08003b40 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003b40:	b480      	push	{r7}
 8003b42:	b089      	sub	sp, #36	; 0x24
 8003b44:	af00      	add	r7, sp, #0
 8003b46:	6078      	str	r0, [r7, #4]
 8003b48:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003b4a:	2300      	movs	r3, #0
 8003b4c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003b4e:	2300      	movs	r3, #0
 8003b50:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003b52:	2300      	movs	r3, #0
 8003b54:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003b56:	2300      	movs	r3, #0
 8003b58:	61fb      	str	r3, [r7, #28]
 8003b5a:	e177      	b.n	8003e4c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003b5c:	2201      	movs	r2, #1
 8003b5e:	69fb      	ldr	r3, [r7, #28]
 8003b60:	fa02 f303 	lsl.w	r3, r2, r3
 8003b64:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003b66:	683b      	ldr	r3, [r7, #0]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	697a      	ldr	r2, [r7, #20]
 8003b6c:	4013      	ands	r3, r2
 8003b6e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003b70:	693a      	ldr	r2, [r7, #16]
 8003b72:	697b      	ldr	r3, [r7, #20]
 8003b74:	429a      	cmp	r2, r3
 8003b76:	f040 8166 	bne.w	8003e46 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003b7a:	683b      	ldr	r3, [r7, #0]
 8003b7c:	685b      	ldr	r3, [r3, #4]
 8003b7e:	2b02      	cmp	r3, #2
 8003b80:	d003      	beq.n	8003b8a <HAL_GPIO_Init+0x4a>
 8003b82:	683b      	ldr	r3, [r7, #0]
 8003b84:	685b      	ldr	r3, [r3, #4]
 8003b86:	2b12      	cmp	r3, #18
 8003b88:	d123      	bne.n	8003bd2 <HAL_GPIO_Init+0x92>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003b8a:	69fb      	ldr	r3, [r7, #28]
 8003b8c:	08da      	lsrs	r2, r3, #3
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	3208      	adds	r2, #8
 8003b92:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003b96:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003b98:	69fb      	ldr	r3, [r7, #28]
 8003b9a:	f003 0307 	and.w	r3, r3, #7
 8003b9e:	009b      	lsls	r3, r3, #2
 8003ba0:	220f      	movs	r2, #15
 8003ba2:	fa02 f303 	lsl.w	r3, r2, r3
 8003ba6:	43db      	mvns	r3, r3
 8003ba8:	69ba      	ldr	r2, [r7, #24]
 8003baa:	4013      	ands	r3, r2
 8003bac:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003bae:	683b      	ldr	r3, [r7, #0]
 8003bb0:	691a      	ldr	r2, [r3, #16]
 8003bb2:	69fb      	ldr	r3, [r7, #28]
 8003bb4:	f003 0307 	and.w	r3, r3, #7
 8003bb8:	009b      	lsls	r3, r3, #2
 8003bba:	fa02 f303 	lsl.w	r3, r2, r3
 8003bbe:	69ba      	ldr	r2, [r7, #24]
 8003bc0:	4313      	orrs	r3, r2
 8003bc2:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003bc4:	69fb      	ldr	r3, [r7, #28]
 8003bc6:	08da      	lsrs	r2, r3, #3
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	3208      	adds	r2, #8
 8003bcc:	69b9      	ldr	r1, [r7, #24]
 8003bce:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003bd8:	69fb      	ldr	r3, [r7, #28]
 8003bda:	005b      	lsls	r3, r3, #1
 8003bdc:	2203      	movs	r2, #3
 8003bde:	fa02 f303 	lsl.w	r3, r2, r3
 8003be2:	43db      	mvns	r3, r3
 8003be4:	69ba      	ldr	r2, [r7, #24]
 8003be6:	4013      	ands	r3, r2
 8003be8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003bea:	683b      	ldr	r3, [r7, #0]
 8003bec:	685b      	ldr	r3, [r3, #4]
 8003bee:	f003 0203 	and.w	r2, r3, #3
 8003bf2:	69fb      	ldr	r3, [r7, #28]
 8003bf4:	005b      	lsls	r3, r3, #1
 8003bf6:	fa02 f303 	lsl.w	r3, r2, r3
 8003bfa:	69ba      	ldr	r2, [r7, #24]
 8003bfc:	4313      	orrs	r3, r2
 8003bfe:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	69ba      	ldr	r2, [r7, #24]
 8003c04:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003c06:	683b      	ldr	r3, [r7, #0]
 8003c08:	685b      	ldr	r3, [r3, #4]
 8003c0a:	2b01      	cmp	r3, #1
 8003c0c:	d00b      	beq.n	8003c26 <HAL_GPIO_Init+0xe6>
 8003c0e:	683b      	ldr	r3, [r7, #0]
 8003c10:	685b      	ldr	r3, [r3, #4]
 8003c12:	2b02      	cmp	r3, #2
 8003c14:	d007      	beq.n	8003c26 <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003c16:	683b      	ldr	r3, [r7, #0]
 8003c18:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003c1a:	2b11      	cmp	r3, #17
 8003c1c:	d003      	beq.n	8003c26 <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003c1e:	683b      	ldr	r3, [r7, #0]
 8003c20:	685b      	ldr	r3, [r3, #4]
 8003c22:	2b12      	cmp	r3, #18
 8003c24:	d130      	bne.n	8003c88 <HAL_GPIO_Init+0x148>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	689b      	ldr	r3, [r3, #8]
 8003c2a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003c2c:	69fb      	ldr	r3, [r7, #28]
 8003c2e:	005b      	lsls	r3, r3, #1
 8003c30:	2203      	movs	r2, #3
 8003c32:	fa02 f303 	lsl.w	r3, r2, r3
 8003c36:	43db      	mvns	r3, r3
 8003c38:	69ba      	ldr	r2, [r7, #24]
 8003c3a:	4013      	ands	r3, r2
 8003c3c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003c3e:	683b      	ldr	r3, [r7, #0]
 8003c40:	68da      	ldr	r2, [r3, #12]
 8003c42:	69fb      	ldr	r3, [r7, #28]
 8003c44:	005b      	lsls	r3, r3, #1
 8003c46:	fa02 f303 	lsl.w	r3, r2, r3
 8003c4a:	69ba      	ldr	r2, [r7, #24]
 8003c4c:	4313      	orrs	r3, r2
 8003c4e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	69ba      	ldr	r2, [r7, #24]
 8003c54:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	685b      	ldr	r3, [r3, #4]
 8003c5a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003c5c:	2201      	movs	r2, #1
 8003c5e:	69fb      	ldr	r3, [r7, #28]
 8003c60:	fa02 f303 	lsl.w	r3, r2, r3
 8003c64:	43db      	mvns	r3, r3
 8003c66:	69ba      	ldr	r2, [r7, #24]
 8003c68:	4013      	ands	r3, r2
 8003c6a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8003c6c:	683b      	ldr	r3, [r7, #0]
 8003c6e:	685b      	ldr	r3, [r3, #4]
 8003c70:	091b      	lsrs	r3, r3, #4
 8003c72:	f003 0201 	and.w	r2, r3, #1
 8003c76:	69fb      	ldr	r3, [r7, #28]
 8003c78:	fa02 f303 	lsl.w	r3, r2, r3
 8003c7c:	69ba      	ldr	r2, [r7, #24]
 8003c7e:	4313      	orrs	r3, r2
 8003c80:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	69ba      	ldr	r2, [r7, #24]
 8003c86:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	68db      	ldr	r3, [r3, #12]
 8003c8c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003c8e:	69fb      	ldr	r3, [r7, #28]
 8003c90:	005b      	lsls	r3, r3, #1
 8003c92:	2203      	movs	r2, #3
 8003c94:	fa02 f303 	lsl.w	r3, r2, r3
 8003c98:	43db      	mvns	r3, r3
 8003c9a:	69ba      	ldr	r2, [r7, #24]
 8003c9c:	4013      	ands	r3, r2
 8003c9e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003ca0:	683b      	ldr	r3, [r7, #0]
 8003ca2:	689a      	ldr	r2, [r3, #8]
 8003ca4:	69fb      	ldr	r3, [r7, #28]
 8003ca6:	005b      	lsls	r3, r3, #1
 8003ca8:	fa02 f303 	lsl.w	r3, r2, r3
 8003cac:	69ba      	ldr	r2, [r7, #24]
 8003cae:	4313      	orrs	r3, r2
 8003cb0:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	69ba      	ldr	r2, [r7, #24]
 8003cb6:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003cb8:	683b      	ldr	r3, [r7, #0]
 8003cba:	685b      	ldr	r3, [r3, #4]
 8003cbc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	f000 80c0 	beq.w	8003e46 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003cc6:	2300      	movs	r3, #0
 8003cc8:	60fb      	str	r3, [r7, #12]
 8003cca:	4b65      	ldr	r3, [pc, #404]	; (8003e60 <HAL_GPIO_Init+0x320>)
 8003ccc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cce:	4a64      	ldr	r2, [pc, #400]	; (8003e60 <HAL_GPIO_Init+0x320>)
 8003cd0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003cd4:	6453      	str	r3, [r2, #68]	; 0x44
 8003cd6:	4b62      	ldr	r3, [pc, #392]	; (8003e60 <HAL_GPIO_Init+0x320>)
 8003cd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cda:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003cde:	60fb      	str	r3, [r7, #12]
 8003ce0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003ce2:	4a60      	ldr	r2, [pc, #384]	; (8003e64 <HAL_GPIO_Init+0x324>)
 8003ce4:	69fb      	ldr	r3, [r7, #28]
 8003ce6:	089b      	lsrs	r3, r3, #2
 8003ce8:	3302      	adds	r3, #2
 8003cea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003cee:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003cf0:	69fb      	ldr	r3, [r7, #28]
 8003cf2:	f003 0303 	and.w	r3, r3, #3
 8003cf6:	009b      	lsls	r3, r3, #2
 8003cf8:	220f      	movs	r2, #15
 8003cfa:	fa02 f303 	lsl.w	r3, r2, r3
 8003cfe:	43db      	mvns	r3, r3
 8003d00:	69ba      	ldr	r2, [r7, #24]
 8003d02:	4013      	ands	r3, r2
 8003d04:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	4a57      	ldr	r2, [pc, #348]	; (8003e68 <HAL_GPIO_Init+0x328>)
 8003d0a:	4293      	cmp	r3, r2
 8003d0c:	d037      	beq.n	8003d7e <HAL_GPIO_Init+0x23e>
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	4a56      	ldr	r2, [pc, #344]	; (8003e6c <HAL_GPIO_Init+0x32c>)
 8003d12:	4293      	cmp	r3, r2
 8003d14:	d031      	beq.n	8003d7a <HAL_GPIO_Init+0x23a>
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	4a55      	ldr	r2, [pc, #340]	; (8003e70 <HAL_GPIO_Init+0x330>)
 8003d1a:	4293      	cmp	r3, r2
 8003d1c:	d02b      	beq.n	8003d76 <HAL_GPIO_Init+0x236>
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	4a54      	ldr	r2, [pc, #336]	; (8003e74 <HAL_GPIO_Init+0x334>)
 8003d22:	4293      	cmp	r3, r2
 8003d24:	d025      	beq.n	8003d72 <HAL_GPIO_Init+0x232>
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	4a53      	ldr	r2, [pc, #332]	; (8003e78 <HAL_GPIO_Init+0x338>)
 8003d2a:	4293      	cmp	r3, r2
 8003d2c:	d01f      	beq.n	8003d6e <HAL_GPIO_Init+0x22e>
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	4a52      	ldr	r2, [pc, #328]	; (8003e7c <HAL_GPIO_Init+0x33c>)
 8003d32:	4293      	cmp	r3, r2
 8003d34:	d019      	beq.n	8003d6a <HAL_GPIO_Init+0x22a>
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	4a51      	ldr	r2, [pc, #324]	; (8003e80 <HAL_GPIO_Init+0x340>)
 8003d3a:	4293      	cmp	r3, r2
 8003d3c:	d013      	beq.n	8003d66 <HAL_GPIO_Init+0x226>
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	4a50      	ldr	r2, [pc, #320]	; (8003e84 <HAL_GPIO_Init+0x344>)
 8003d42:	4293      	cmp	r3, r2
 8003d44:	d00d      	beq.n	8003d62 <HAL_GPIO_Init+0x222>
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	4a4f      	ldr	r2, [pc, #316]	; (8003e88 <HAL_GPIO_Init+0x348>)
 8003d4a:	4293      	cmp	r3, r2
 8003d4c:	d007      	beq.n	8003d5e <HAL_GPIO_Init+0x21e>
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	4a4e      	ldr	r2, [pc, #312]	; (8003e8c <HAL_GPIO_Init+0x34c>)
 8003d52:	4293      	cmp	r3, r2
 8003d54:	d101      	bne.n	8003d5a <HAL_GPIO_Init+0x21a>
 8003d56:	2309      	movs	r3, #9
 8003d58:	e012      	b.n	8003d80 <HAL_GPIO_Init+0x240>
 8003d5a:	230a      	movs	r3, #10
 8003d5c:	e010      	b.n	8003d80 <HAL_GPIO_Init+0x240>
 8003d5e:	2308      	movs	r3, #8
 8003d60:	e00e      	b.n	8003d80 <HAL_GPIO_Init+0x240>
 8003d62:	2307      	movs	r3, #7
 8003d64:	e00c      	b.n	8003d80 <HAL_GPIO_Init+0x240>
 8003d66:	2306      	movs	r3, #6
 8003d68:	e00a      	b.n	8003d80 <HAL_GPIO_Init+0x240>
 8003d6a:	2305      	movs	r3, #5
 8003d6c:	e008      	b.n	8003d80 <HAL_GPIO_Init+0x240>
 8003d6e:	2304      	movs	r3, #4
 8003d70:	e006      	b.n	8003d80 <HAL_GPIO_Init+0x240>
 8003d72:	2303      	movs	r3, #3
 8003d74:	e004      	b.n	8003d80 <HAL_GPIO_Init+0x240>
 8003d76:	2302      	movs	r3, #2
 8003d78:	e002      	b.n	8003d80 <HAL_GPIO_Init+0x240>
 8003d7a:	2301      	movs	r3, #1
 8003d7c:	e000      	b.n	8003d80 <HAL_GPIO_Init+0x240>
 8003d7e:	2300      	movs	r3, #0
 8003d80:	69fa      	ldr	r2, [r7, #28]
 8003d82:	f002 0203 	and.w	r2, r2, #3
 8003d86:	0092      	lsls	r2, r2, #2
 8003d88:	4093      	lsls	r3, r2
 8003d8a:	69ba      	ldr	r2, [r7, #24]
 8003d8c:	4313      	orrs	r3, r2
 8003d8e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003d90:	4934      	ldr	r1, [pc, #208]	; (8003e64 <HAL_GPIO_Init+0x324>)
 8003d92:	69fb      	ldr	r3, [r7, #28]
 8003d94:	089b      	lsrs	r3, r3, #2
 8003d96:	3302      	adds	r3, #2
 8003d98:	69ba      	ldr	r2, [r7, #24]
 8003d9a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003d9e:	4b3c      	ldr	r3, [pc, #240]	; (8003e90 <HAL_GPIO_Init+0x350>)
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003da4:	693b      	ldr	r3, [r7, #16]
 8003da6:	43db      	mvns	r3, r3
 8003da8:	69ba      	ldr	r2, [r7, #24]
 8003daa:	4013      	ands	r3, r2
 8003dac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003dae:	683b      	ldr	r3, [r7, #0]
 8003db0:	685b      	ldr	r3, [r3, #4]
 8003db2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d003      	beq.n	8003dc2 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8003dba:	69ba      	ldr	r2, [r7, #24]
 8003dbc:	693b      	ldr	r3, [r7, #16]
 8003dbe:	4313      	orrs	r3, r2
 8003dc0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003dc2:	4a33      	ldr	r2, [pc, #204]	; (8003e90 <HAL_GPIO_Init+0x350>)
 8003dc4:	69bb      	ldr	r3, [r7, #24]
 8003dc6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003dc8:	4b31      	ldr	r3, [pc, #196]	; (8003e90 <HAL_GPIO_Init+0x350>)
 8003dca:	685b      	ldr	r3, [r3, #4]
 8003dcc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003dce:	693b      	ldr	r3, [r7, #16]
 8003dd0:	43db      	mvns	r3, r3
 8003dd2:	69ba      	ldr	r2, [r7, #24]
 8003dd4:	4013      	ands	r3, r2
 8003dd6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003dd8:	683b      	ldr	r3, [r7, #0]
 8003dda:	685b      	ldr	r3, [r3, #4]
 8003ddc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d003      	beq.n	8003dec <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003de4:	69ba      	ldr	r2, [r7, #24]
 8003de6:	693b      	ldr	r3, [r7, #16]
 8003de8:	4313      	orrs	r3, r2
 8003dea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003dec:	4a28      	ldr	r2, [pc, #160]	; (8003e90 <HAL_GPIO_Init+0x350>)
 8003dee:	69bb      	ldr	r3, [r7, #24]
 8003df0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003df2:	4b27      	ldr	r3, [pc, #156]	; (8003e90 <HAL_GPIO_Init+0x350>)
 8003df4:	689b      	ldr	r3, [r3, #8]
 8003df6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003df8:	693b      	ldr	r3, [r7, #16]
 8003dfa:	43db      	mvns	r3, r3
 8003dfc:	69ba      	ldr	r2, [r7, #24]
 8003dfe:	4013      	ands	r3, r2
 8003e00:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003e02:	683b      	ldr	r3, [r7, #0]
 8003e04:	685b      	ldr	r3, [r3, #4]
 8003e06:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d003      	beq.n	8003e16 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8003e0e:	69ba      	ldr	r2, [r7, #24]
 8003e10:	693b      	ldr	r3, [r7, #16]
 8003e12:	4313      	orrs	r3, r2
 8003e14:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003e16:	4a1e      	ldr	r2, [pc, #120]	; (8003e90 <HAL_GPIO_Init+0x350>)
 8003e18:	69bb      	ldr	r3, [r7, #24]
 8003e1a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003e1c:	4b1c      	ldr	r3, [pc, #112]	; (8003e90 <HAL_GPIO_Init+0x350>)
 8003e1e:	68db      	ldr	r3, [r3, #12]
 8003e20:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003e22:	693b      	ldr	r3, [r7, #16]
 8003e24:	43db      	mvns	r3, r3
 8003e26:	69ba      	ldr	r2, [r7, #24]
 8003e28:	4013      	ands	r3, r2
 8003e2a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003e2c:	683b      	ldr	r3, [r7, #0]
 8003e2e:	685b      	ldr	r3, [r3, #4]
 8003e30:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d003      	beq.n	8003e40 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003e38:	69ba      	ldr	r2, [r7, #24]
 8003e3a:	693b      	ldr	r3, [r7, #16]
 8003e3c:	4313      	orrs	r3, r2
 8003e3e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003e40:	4a13      	ldr	r2, [pc, #76]	; (8003e90 <HAL_GPIO_Init+0x350>)
 8003e42:	69bb      	ldr	r3, [r7, #24]
 8003e44:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003e46:	69fb      	ldr	r3, [r7, #28]
 8003e48:	3301      	adds	r3, #1
 8003e4a:	61fb      	str	r3, [r7, #28]
 8003e4c:	69fb      	ldr	r3, [r7, #28]
 8003e4e:	2b0f      	cmp	r3, #15
 8003e50:	f67f ae84 	bls.w	8003b5c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003e54:	bf00      	nop
 8003e56:	3724      	adds	r7, #36	; 0x24
 8003e58:	46bd      	mov	sp, r7
 8003e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e5e:	4770      	bx	lr
 8003e60:	40023800 	.word	0x40023800
 8003e64:	40013800 	.word	0x40013800
 8003e68:	40020000 	.word	0x40020000
 8003e6c:	40020400 	.word	0x40020400
 8003e70:	40020800 	.word	0x40020800
 8003e74:	40020c00 	.word	0x40020c00
 8003e78:	40021000 	.word	0x40021000
 8003e7c:	40021400 	.word	0x40021400
 8003e80:	40021800 	.word	0x40021800
 8003e84:	40021c00 	.word	0x40021c00
 8003e88:	40022000 	.word	0x40022000
 8003e8c:	40022400 	.word	0x40022400
 8003e90:	40013c00 	.word	0x40013c00

08003e94 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003e94:	b480      	push	{r7}
 8003e96:	b083      	sub	sp, #12
 8003e98:	af00      	add	r7, sp, #0
 8003e9a:	6078      	str	r0, [r7, #4]
 8003e9c:	460b      	mov	r3, r1
 8003e9e:	807b      	strh	r3, [r7, #2]
 8003ea0:	4613      	mov	r3, r2
 8003ea2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003ea4:	787b      	ldrb	r3, [r7, #1]
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d003      	beq.n	8003eb2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003eaa:	887a      	ldrh	r2, [r7, #2]
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003eb0:	e003      	b.n	8003eba <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003eb2:	887b      	ldrh	r3, [r7, #2]
 8003eb4:	041a      	lsls	r2, r3, #16
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	619a      	str	r2, [r3, #24]
}
 8003eba:	bf00      	nop
 8003ebc:	370c      	adds	r7, #12
 8003ebe:	46bd      	mov	sp, r7
 8003ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec4:	4770      	bx	lr

08003ec6 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003ec6:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003ec8:	b08f      	sub	sp, #60	; 0x3c
 8003eca:	af0a      	add	r7, sp, #40	; 0x28
 8003ecc:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d101      	bne.n	8003ed8 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003ed4:	2301      	movs	r3, #1
 8003ed6:	e10f      	b.n	80040f8 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8003ee4:	b2db      	uxtb	r3, r3
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d106      	bne.n	8003ef8 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	2200      	movs	r2, #0
 8003eee:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003ef2:	6878      	ldr	r0, [r7, #4]
 8003ef4:	f016 fb70 	bl	801a5d8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	2203      	movs	r2, #3
 8003efc:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8003f00:	68bb      	ldr	r3, [r7, #8]
 8003f02:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f04:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d102      	bne.n	8003f12 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	2200      	movs	r2, #0
 8003f10:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	4618      	mov	r0, r3
 8003f18:	f004 f88f 	bl	800803a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	603b      	str	r3, [r7, #0]
 8003f22:	687e      	ldr	r6, [r7, #4]
 8003f24:	466d      	mov	r5, sp
 8003f26:	f106 0410 	add.w	r4, r6, #16
 8003f2a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003f2c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003f2e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003f30:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003f32:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003f36:	e885 0003 	stmia.w	r5, {r0, r1}
 8003f3a:	1d33      	adds	r3, r6, #4
 8003f3c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003f3e:	6838      	ldr	r0, [r7, #0]
 8003f40:	f003 ff66 	bl	8007e10 <USB_CoreInit>
 8003f44:	4603      	mov	r3, r0
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d005      	beq.n	8003f56 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	2202      	movs	r2, #2
 8003f4e:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8003f52:	2301      	movs	r3, #1
 8003f54:	e0d0      	b.n	80040f8 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	2100      	movs	r1, #0
 8003f5c:	4618      	mov	r0, r3
 8003f5e:	f004 f87d 	bl	800805c <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003f62:	2300      	movs	r3, #0
 8003f64:	73fb      	strb	r3, [r7, #15]
 8003f66:	e04a      	b.n	8003ffe <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003f68:	7bfa      	ldrb	r2, [r7, #15]
 8003f6a:	6879      	ldr	r1, [r7, #4]
 8003f6c:	4613      	mov	r3, r2
 8003f6e:	00db      	lsls	r3, r3, #3
 8003f70:	1a9b      	subs	r3, r3, r2
 8003f72:	009b      	lsls	r3, r3, #2
 8003f74:	440b      	add	r3, r1
 8003f76:	333d      	adds	r3, #61	; 0x3d
 8003f78:	2201      	movs	r2, #1
 8003f7a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003f7c:	7bfa      	ldrb	r2, [r7, #15]
 8003f7e:	6879      	ldr	r1, [r7, #4]
 8003f80:	4613      	mov	r3, r2
 8003f82:	00db      	lsls	r3, r3, #3
 8003f84:	1a9b      	subs	r3, r3, r2
 8003f86:	009b      	lsls	r3, r3, #2
 8003f88:	440b      	add	r3, r1
 8003f8a:	333c      	adds	r3, #60	; 0x3c
 8003f8c:	7bfa      	ldrb	r2, [r7, #15]
 8003f8e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003f90:	7bfa      	ldrb	r2, [r7, #15]
 8003f92:	7bfb      	ldrb	r3, [r7, #15]
 8003f94:	b298      	uxth	r0, r3
 8003f96:	6879      	ldr	r1, [r7, #4]
 8003f98:	4613      	mov	r3, r2
 8003f9a:	00db      	lsls	r3, r3, #3
 8003f9c:	1a9b      	subs	r3, r3, r2
 8003f9e:	009b      	lsls	r3, r3, #2
 8003fa0:	440b      	add	r3, r1
 8003fa2:	3342      	adds	r3, #66	; 0x42
 8003fa4:	4602      	mov	r2, r0
 8003fa6:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003fa8:	7bfa      	ldrb	r2, [r7, #15]
 8003faa:	6879      	ldr	r1, [r7, #4]
 8003fac:	4613      	mov	r3, r2
 8003fae:	00db      	lsls	r3, r3, #3
 8003fb0:	1a9b      	subs	r3, r3, r2
 8003fb2:	009b      	lsls	r3, r3, #2
 8003fb4:	440b      	add	r3, r1
 8003fb6:	333f      	adds	r3, #63	; 0x3f
 8003fb8:	2200      	movs	r2, #0
 8003fba:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003fbc:	7bfa      	ldrb	r2, [r7, #15]
 8003fbe:	6879      	ldr	r1, [r7, #4]
 8003fc0:	4613      	mov	r3, r2
 8003fc2:	00db      	lsls	r3, r3, #3
 8003fc4:	1a9b      	subs	r3, r3, r2
 8003fc6:	009b      	lsls	r3, r3, #2
 8003fc8:	440b      	add	r3, r1
 8003fca:	3344      	adds	r3, #68	; 0x44
 8003fcc:	2200      	movs	r2, #0
 8003fce:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003fd0:	7bfa      	ldrb	r2, [r7, #15]
 8003fd2:	6879      	ldr	r1, [r7, #4]
 8003fd4:	4613      	mov	r3, r2
 8003fd6:	00db      	lsls	r3, r3, #3
 8003fd8:	1a9b      	subs	r3, r3, r2
 8003fda:	009b      	lsls	r3, r3, #2
 8003fdc:	440b      	add	r3, r1
 8003fde:	3348      	adds	r3, #72	; 0x48
 8003fe0:	2200      	movs	r2, #0
 8003fe2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003fe4:	7bfa      	ldrb	r2, [r7, #15]
 8003fe6:	6879      	ldr	r1, [r7, #4]
 8003fe8:	4613      	mov	r3, r2
 8003fea:	00db      	lsls	r3, r3, #3
 8003fec:	1a9b      	subs	r3, r3, r2
 8003fee:	009b      	lsls	r3, r3, #2
 8003ff0:	440b      	add	r3, r1
 8003ff2:	3350      	adds	r3, #80	; 0x50
 8003ff4:	2200      	movs	r2, #0
 8003ff6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003ff8:	7bfb      	ldrb	r3, [r7, #15]
 8003ffa:	3301      	adds	r3, #1
 8003ffc:	73fb      	strb	r3, [r7, #15]
 8003ffe:	7bfa      	ldrb	r2, [r7, #15]
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	685b      	ldr	r3, [r3, #4]
 8004004:	429a      	cmp	r2, r3
 8004006:	d3af      	bcc.n	8003f68 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004008:	2300      	movs	r3, #0
 800400a:	73fb      	strb	r3, [r7, #15]
 800400c:	e044      	b.n	8004098 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800400e:	7bfa      	ldrb	r2, [r7, #15]
 8004010:	6879      	ldr	r1, [r7, #4]
 8004012:	4613      	mov	r3, r2
 8004014:	00db      	lsls	r3, r3, #3
 8004016:	1a9b      	subs	r3, r3, r2
 8004018:	009b      	lsls	r3, r3, #2
 800401a:	440b      	add	r3, r1
 800401c:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8004020:	2200      	movs	r2, #0
 8004022:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8004024:	7bfa      	ldrb	r2, [r7, #15]
 8004026:	6879      	ldr	r1, [r7, #4]
 8004028:	4613      	mov	r3, r2
 800402a:	00db      	lsls	r3, r3, #3
 800402c:	1a9b      	subs	r3, r3, r2
 800402e:	009b      	lsls	r3, r3, #2
 8004030:	440b      	add	r3, r1
 8004032:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8004036:	7bfa      	ldrb	r2, [r7, #15]
 8004038:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800403a:	7bfa      	ldrb	r2, [r7, #15]
 800403c:	6879      	ldr	r1, [r7, #4]
 800403e:	4613      	mov	r3, r2
 8004040:	00db      	lsls	r3, r3, #3
 8004042:	1a9b      	subs	r3, r3, r2
 8004044:	009b      	lsls	r3, r3, #2
 8004046:	440b      	add	r3, r1
 8004048:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800404c:	2200      	movs	r2, #0
 800404e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8004050:	7bfa      	ldrb	r2, [r7, #15]
 8004052:	6879      	ldr	r1, [r7, #4]
 8004054:	4613      	mov	r3, r2
 8004056:	00db      	lsls	r3, r3, #3
 8004058:	1a9b      	subs	r3, r3, r2
 800405a:	009b      	lsls	r3, r3, #2
 800405c:	440b      	add	r3, r1
 800405e:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8004062:	2200      	movs	r2, #0
 8004064:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8004066:	7bfa      	ldrb	r2, [r7, #15]
 8004068:	6879      	ldr	r1, [r7, #4]
 800406a:	4613      	mov	r3, r2
 800406c:	00db      	lsls	r3, r3, #3
 800406e:	1a9b      	subs	r3, r3, r2
 8004070:	009b      	lsls	r3, r3, #2
 8004072:	440b      	add	r3, r1
 8004074:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8004078:	2200      	movs	r2, #0
 800407a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800407c:	7bfa      	ldrb	r2, [r7, #15]
 800407e:	6879      	ldr	r1, [r7, #4]
 8004080:	4613      	mov	r3, r2
 8004082:	00db      	lsls	r3, r3, #3
 8004084:	1a9b      	subs	r3, r3, r2
 8004086:	009b      	lsls	r3, r3, #2
 8004088:	440b      	add	r3, r1
 800408a:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800408e:	2200      	movs	r2, #0
 8004090:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004092:	7bfb      	ldrb	r3, [r7, #15]
 8004094:	3301      	adds	r3, #1
 8004096:	73fb      	strb	r3, [r7, #15]
 8004098:	7bfa      	ldrb	r2, [r7, #15]
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	685b      	ldr	r3, [r3, #4]
 800409e:	429a      	cmp	r2, r3
 80040a0:	d3b5      	bcc.n	800400e <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	603b      	str	r3, [r7, #0]
 80040a8:	687e      	ldr	r6, [r7, #4]
 80040aa:	466d      	mov	r5, sp
 80040ac:	f106 0410 	add.w	r4, r6, #16
 80040b0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80040b2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80040b4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80040b6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80040b8:	e894 0003 	ldmia.w	r4, {r0, r1}
 80040bc:	e885 0003 	stmia.w	r5, {r0, r1}
 80040c0:	1d33      	adds	r3, r6, #4
 80040c2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80040c4:	6838      	ldr	r0, [r7, #0]
 80040c6:	f003 fff3 	bl	80080b0 <USB_DevInit>
 80040ca:	4603      	mov	r3, r0
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d005      	beq.n	80040dc <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	2202      	movs	r2, #2
 80040d4:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80040d8:	2301      	movs	r3, #1
 80040da:	e00d      	b.n	80040f8 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	2200      	movs	r2, #0
 80040e0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	2201      	movs	r2, #1
 80040e8:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
  #endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	4618      	mov	r0, r3
 80040f2:	f004 ffe8 	bl	80090c6 <USB_DevDisconnect>

  return HAL_OK;
 80040f6:	2300      	movs	r3, #0
}
 80040f8:	4618      	mov	r0, r3
 80040fa:	3714      	adds	r7, #20
 80040fc:	46bd      	mov	sp, r7
 80040fe:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004100 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8004100:	b580      	push	{r7, lr}
 8004102:	b084      	sub	sp, #16
 8004104:	af00      	add	r7, sp, #0
 8004106:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */

  __HAL_LOCK(hpcd);
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8004114:	2b01      	cmp	r3, #1
 8004116:	d101      	bne.n	800411c <HAL_PCD_Start+0x1c>
 8004118:	2302      	movs	r3, #2
 800411a:	e020      	b.n	800415e <HAL_PCD_Start+0x5e>
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	2201      	movs	r2, #1
 8004120:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004128:	2b01      	cmp	r3, #1
 800412a:	d109      	bne.n	8004140 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8004130:	2b01      	cmp	r3, #1
 8004132:	d005      	beq.n	8004140 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004138:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */
  (void)USB_DevConnect(hpcd->Instance);
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	4618      	mov	r0, r3
 8004146:	f004 ffa6 	bl	8009096 <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	4618      	mov	r0, r3
 8004150:	f003 ff62 	bl	8008018 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	2200      	movs	r2, #0
 8004158:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 800415c:	2300      	movs	r3, #0
}
 800415e:	4618      	mov	r0, r3
 8004160:	3710      	adds	r7, #16
 8004162:	46bd      	mov	sp, r7
 8004164:	bd80      	pop	{r7, pc}

08004166 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8004166:	b590      	push	{r4, r7, lr}
 8004168:	b08d      	sub	sp, #52	; 0x34
 800416a:	af00      	add	r7, sp, #0
 800416c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004174:	6a3b      	ldr	r3, [r7, #32]
 8004176:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	4618      	mov	r0, r3
 800417e:	f005 f84d 	bl	800921c <USB_GetMode>
 8004182:	4603      	mov	r3, r0
 8004184:	2b00      	cmp	r3, #0
 8004186:	f040 838e 	bne.w	80048a6 <HAL_PCD_IRQHandler+0x740>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	4618      	mov	r0, r3
 8004190:	f004 ffb1 	bl	80090f6 <USB_ReadInterrupts>
 8004194:	4603      	mov	r3, r0
 8004196:	2b00      	cmp	r3, #0
 8004198:	f000 8384 	beq.w	80048a4 <HAL_PCD_IRQHandler+0x73e>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	4618      	mov	r0, r3
 80041a2:	f004 ffa8 	bl	80090f6 <USB_ReadInterrupts>
 80041a6:	4603      	mov	r3, r0
 80041a8:	f003 0302 	and.w	r3, r3, #2
 80041ac:	2b02      	cmp	r3, #2
 80041ae:	d107      	bne.n	80041c0 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	695a      	ldr	r2, [r3, #20]
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	f002 0202 	and.w	r2, r2, #2
 80041be:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	4618      	mov	r0, r3
 80041c6:	f004 ff96 	bl	80090f6 <USB_ReadInterrupts>
 80041ca:	4603      	mov	r3, r0
 80041cc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80041d0:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80041d4:	d17b      	bne.n	80042ce <HAL_PCD_IRQHandler+0x168>
    {
      epnum = 0U;
 80041d6:	2300      	movs	r3, #0
 80041d8:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	4618      	mov	r0, r3
 80041e0:	f004 ff9c 	bl	800911c <USB_ReadDevAllOutEpInterrupt>
 80041e4:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 80041e6:	e06f      	b.n	80042c8 <HAL_PCD_IRQHandler+0x162>
      {
        if ((ep_intr & 0x1U) != 0U)
 80041e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041ea:	f003 0301 	and.w	r3, r3, #1
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d064      	beq.n	80042bc <HAL_PCD_IRQHandler+0x156>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80041f8:	b2d2      	uxtb	r2, r2
 80041fa:	4611      	mov	r1, r2
 80041fc:	4618      	mov	r0, r3
 80041fe:	f004 ffc1 	bl	8009184 <USB_ReadDevOutEPInterrupt>
 8004202:	61b8      	str	r0, [r7, #24]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8004204:	69bb      	ldr	r3, [r7, #24]
 8004206:	f003 0301 	and.w	r3, r3, #1
 800420a:	2b00      	cmp	r3, #0
 800420c:	d00c      	beq.n	8004228 <HAL_PCD_IRQHandler+0xc2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800420e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004210:	015a      	lsls	r2, r3, #5
 8004212:	69fb      	ldr	r3, [r7, #28]
 8004214:	4413      	add	r3, r2
 8004216:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800421a:	461a      	mov	r2, r3
 800421c:	2301      	movs	r3, #1
 800421e:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8004220:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004222:	6878      	ldr	r0, [r7, #4]
 8004224:	f000 fe0e 	bl	8004e44 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8004228:	69bb      	ldr	r3, [r7, #24]
 800422a:	f003 0308 	and.w	r3, r3, #8
 800422e:	2b00      	cmp	r3, #0
 8004230:	d00c      	beq.n	800424c <HAL_PCD_IRQHandler+0xe6>
          {
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8004232:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004234:	6878      	ldr	r0, [r7, #4]
 8004236:	f000 ff0d 	bl	8005054 <PCD_EP_OutSetupPacket_int>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800423a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800423c:	015a      	lsls	r2, r3, #5
 800423e:	69fb      	ldr	r3, [r7, #28]
 8004240:	4413      	add	r3, r2
 8004242:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004246:	461a      	mov	r2, r3
 8004248:	2308      	movs	r3, #8
 800424a:	6093      	str	r3, [r2, #8]
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800424c:	69bb      	ldr	r3, [r7, #24]
 800424e:	f003 0310 	and.w	r3, r3, #16
 8004252:	2b00      	cmp	r3, #0
 8004254:	d008      	beq.n	8004268 <HAL_PCD_IRQHandler+0x102>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8004256:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004258:	015a      	lsls	r2, r3, #5
 800425a:	69fb      	ldr	r3, [r7, #28]
 800425c:	4413      	add	r3, r2
 800425e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004262:	461a      	mov	r2, r3
 8004264:	2310      	movs	r3, #16
 8004266:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8004268:	69bb      	ldr	r3, [r7, #24]
 800426a:	f003 0320 	and.w	r3, r3, #32
 800426e:	2b00      	cmp	r3, #0
 8004270:	d015      	beq.n	800429e <HAL_PCD_IRQHandler+0x138>
          {
            if (hpcd->Init.dma_enable == 1U)
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	691b      	ldr	r3, [r3, #16]
 8004276:	2b01      	cmp	r3, #1
 8004278:	d108      	bne.n	800428c <HAL_PCD_IRQHandler+0x126>
            {
              (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	6818      	ldr	r0, [r3, #0]
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8004284:	461a      	mov	r2, r3
 8004286:	2101      	movs	r1, #1
 8004288:	f005 f80c 	bl	80092a4 <USB_EP0_OutStart>
            }
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800428c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800428e:	015a      	lsls	r2, r3, #5
 8004290:	69fb      	ldr	r3, [r7, #28]
 8004292:	4413      	add	r3, r2
 8004294:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004298:	461a      	mov	r2, r3
 800429a:	2320      	movs	r3, #32
 800429c:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800429e:	69bb      	ldr	r3, [r7, #24]
 80042a0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d009      	beq.n	80042bc <HAL_PCD_IRQHandler+0x156>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80042a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042aa:	015a      	lsls	r2, r3, #5
 80042ac:	69fb      	ldr	r3, [r7, #28]
 80042ae:	4413      	add	r3, r2
 80042b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80042b4:	461a      	mov	r2, r3
 80042b6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80042ba:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80042bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042be:	3301      	adds	r3, #1
 80042c0:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80042c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042c4:	085b      	lsrs	r3, r3, #1
 80042c6:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80042c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d18c      	bne.n	80041e8 <HAL_PCD_IRQHandler+0x82>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	4618      	mov	r0, r3
 80042d4:	f004 ff0f 	bl	80090f6 <USB_ReadInterrupts>
 80042d8:	4603      	mov	r3, r0
 80042da:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80042de:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80042e2:	f040 80c4 	bne.w	800446e <HAL_PCD_IRQHandler+0x308>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	4618      	mov	r0, r3
 80042ec:	f004 ff30 	bl	8009150 <USB_ReadDevAllInEpInterrupt>
 80042f0:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 80042f2:	2300      	movs	r3, #0
 80042f4:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 80042f6:	e0b6      	b.n	8004466 <HAL_PCD_IRQHandler+0x300>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80042f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042fa:	f003 0301 	and.w	r3, r3, #1
 80042fe:	2b00      	cmp	r3, #0
 8004300:	f000 80ab 	beq.w	800445a <HAL_PCD_IRQHandler+0x2f4>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800430a:	b2d2      	uxtb	r2, r2
 800430c:	4611      	mov	r1, r2
 800430e:	4618      	mov	r0, r3
 8004310:	f004 ff56 	bl	80091c0 <USB_ReadDevInEPInterrupt>
 8004314:	61b8      	str	r0, [r7, #24]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8004316:	69bb      	ldr	r3, [r7, #24]
 8004318:	f003 0301 	and.w	r3, r3, #1
 800431c:	2b00      	cmp	r3, #0
 800431e:	d05b      	beq.n	80043d8 <HAL_PCD_IRQHandler+0x272>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8004320:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004322:	f003 030f 	and.w	r3, r3, #15
 8004326:	2201      	movs	r2, #1
 8004328:	fa02 f303 	lsl.w	r3, r2, r3
 800432c:	617b      	str	r3, [r7, #20]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800432e:	69fb      	ldr	r3, [r7, #28]
 8004330:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004334:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004336:	697b      	ldr	r3, [r7, #20]
 8004338:	43db      	mvns	r3, r3
 800433a:	69f9      	ldr	r1, [r7, #28]
 800433c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004340:	4013      	ands	r3, r2
 8004342:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8004344:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004346:	015a      	lsls	r2, r3, #5
 8004348:	69fb      	ldr	r3, [r7, #28]
 800434a:	4413      	add	r3, r2
 800434c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004350:	461a      	mov	r2, r3
 8004352:	2301      	movs	r3, #1
 8004354:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	691b      	ldr	r3, [r3, #16]
 800435a:	2b01      	cmp	r3, #1
 800435c:	d11b      	bne.n	8004396 <HAL_PCD_IRQHandler+0x230>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800435e:	6879      	ldr	r1, [r7, #4]
 8004360:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004362:	4613      	mov	r3, r2
 8004364:	00db      	lsls	r3, r3, #3
 8004366:	1a9b      	subs	r3, r3, r2
 8004368:	009b      	lsls	r3, r3, #2
 800436a:	440b      	add	r3, r1
 800436c:	3348      	adds	r3, #72	; 0x48
 800436e:	6819      	ldr	r1, [r3, #0]
 8004370:	6878      	ldr	r0, [r7, #4]
 8004372:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004374:	4613      	mov	r3, r2
 8004376:	00db      	lsls	r3, r3, #3
 8004378:	1a9b      	subs	r3, r3, r2
 800437a:	009b      	lsls	r3, r3, #2
 800437c:	4403      	add	r3, r0
 800437e:	3344      	adds	r3, #68	; 0x44
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	4419      	add	r1, r3
 8004384:	6878      	ldr	r0, [r7, #4]
 8004386:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004388:	4613      	mov	r3, r2
 800438a:	00db      	lsls	r3, r3, #3
 800438c:	1a9b      	subs	r3, r3, r2
 800438e:	009b      	lsls	r3, r3, #2
 8004390:	4403      	add	r3, r0
 8004392:	3348      	adds	r3, #72	; 0x48
 8004394:	6019      	str	r1, [r3, #0]
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8004396:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004398:	b2db      	uxtb	r3, r3
 800439a:	4619      	mov	r1, r3
 800439c:	6878      	ldr	r0, [r7, #4]
 800439e:	f016 f9aa 	bl	801a6f6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

            if (hpcd->Init.dma_enable == 1U)
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	691b      	ldr	r3, [r3, #16]
 80043a6:	2b01      	cmp	r3, #1
 80043a8:	d116      	bne.n	80043d8 <HAL_PCD_IRQHandler+0x272>
            {
              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80043aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d113      	bne.n	80043d8 <HAL_PCD_IRQHandler+0x272>
 80043b0:	6879      	ldr	r1, [r7, #4]
 80043b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80043b4:	4613      	mov	r3, r2
 80043b6:	00db      	lsls	r3, r3, #3
 80043b8:	1a9b      	subs	r3, r3, r2
 80043ba:	009b      	lsls	r3, r3, #2
 80043bc:	440b      	add	r3, r1
 80043be:	3350      	adds	r3, #80	; 0x50
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d108      	bne.n	80043d8 <HAL_PCD_IRQHandler+0x272>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	6818      	ldr	r0, [r3, #0]
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80043d0:	461a      	mov	r2, r3
 80043d2:	2101      	movs	r1, #1
 80043d4:	f004 ff66 	bl	80092a4 <USB_EP0_OutStart>
              }
            }
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80043d8:	69bb      	ldr	r3, [r7, #24]
 80043da:	f003 0308 	and.w	r3, r3, #8
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d008      	beq.n	80043f4 <HAL_PCD_IRQHandler+0x28e>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80043e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043e4:	015a      	lsls	r2, r3, #5
 80043e6:	69fb      	ldr	r3, [r7, #28]
 80043e8:	4413      	add	r3, r2
 80043ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80043ee:	461a      	mov	r2, r3
 80043f0:	2308      	movs	r3, #8
 80043f2:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80043f4:	69bb      	ldr	r3, [r7, #24]
 80043f6:	f003 0310 	and.w	r3, r3, #16
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d008      	beq.n	8004410 <HAL_PCD_IRQHandler+0x2aa>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80043fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004400:	015a      	lsls	r2, r3, #5
 8004402:	69fb      	ldr	r3, [r7, #28]
 8004404:	4413      	add	r3, r2
 8004406:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800440a:	461a      	mov	r2, r3
 800440c:	2310      	movs	r3, #16
 800440e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8004410:	69bb      	ldr	r3, [r7, #24]
 8004412:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004416:	2b00      	cmp	r3, #0
 8004418:	d008      	beq.n	800442c <HAL_PCD_IRQHandler+0x2c6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800441a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800441c:	015a      	lsls	r2, r3, #5
 800441e:	69fb      	ldr	r3, [r7, #28]
 8004420:	4413      	add	r3, r2
 8004422:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004426:	461a      	mov	r2, r3
 8004428:	2340      	movs	r3, #64	; 0x40
 800442a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800442c:	69bb      	ldr	r3, [r7, #24]
 800442e:	f003 0302 	and.w	r3, r3, #2
 8004432:	2b00      	cmp	r3, #0
 8004434:	d008      	beq.n	8004448 <HAL_PCD_IRQHandler+0x2e2>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8004436:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004438:	015a      	lsls	r2, r3, #5
 800443a:	69fb      	ldr	r3, [r7, #28]
 800443c:	4413      	add	r3, r2
 800443e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004442:	461a      	mov	r2, r3
 8004444:	2302      	movs	r3, #2
 8004446:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8004448:	69bb      	ldr	r3, [r7, #24]
 800444a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800444e:	2b00      	cmp	r3, #0
 8004450:	d003      	beq.n	800445a <HAL_PCD_IRQHandler+0x2f4>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8004452:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004454:	6878      	ldr	r0, [r7, #4]
 8004456:	f000 fc67 	bl	8004d28 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800445a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800445c:	3301      	adds	r3, #1
 800445e:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8004460:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004462:	085b      	lsrs	r3, r3, #1
 8004464:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8004466:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004468:	2b00      	cmp	r3, #0
 800446a:	f47f af45 	bne.w	80042f8 <HAL_PCD_IRQHandler+0x192>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	4618      	mov	r0, r3
 8004474:	f004 fe3f 	bl	80090f6 <USB_ReadInterrupts>
 8004478:	4603      	mov	r3, r0
 800447a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800447e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004482:	d122      	bne.n	80044ca <HAL_PCD_IRQHandler+0x364>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8004484:	69fb      	ldr	r3, [r7, #28]
 8004486:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800448a:	685b      	ldr	r3, [r3, #4]
 800448c:	69fa      	ldr	r2, [r7, #28]
 800448e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004492:	f023 0301 	bic.w	r3, r3, #1
 8004496:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 800449e:	2b01      	cmp	r3, #1
 80044a0:	d108      	bne.n	80044b4 <HAL_PCD_IRQHandler+0x34e>
      {
        hpcd->LPM_State = LPM_L0;
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	2200      	movs	r2, #0
 80044a6:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80044aa:	2100      	movs	r1, #0
 80044ac:	6878      	ldr	r0, [r7, #4]
 80044ae:	f000 fe89 	bl	80051c4 <HAL_PCDEx_LPM_Callback>
 80044b2:	e002      	b.n	80044ba <HAL_PCD_IRQHandler+0x354>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80044b4:	6878      	ldr	r0, [r7, #4]
 80044b6:	f016 f995 	bl	801a7e4 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	695a      	ldr	r2, [r3, #20]
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80044c8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	4618      	mov	r0, r3
 80044d0:	f004 fe11 	bl	80090f6 <USB_ReadInterrupts>
 80044d4:	4603      	mov	r3, r0
 80044d6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80044da:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80044de:	d112      	bne.n	8004506 <HAL_PCD_IRQHandler+0x3a0>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80044e0:	69fb      	ldr	r3, [r7, #28]
 80044e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80044e6:	689b      	ldr	r3, [r3, #8]
 80044e8:	f003 0301 	and.w	r3, r3, #1
 80044ec:	2b01      	cmp	r3, #1
 80044ee:	d102      	bne.n	80044f6 <HAL_PCD_IRQHandler+0x390>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80044f0:	6878      	ldr	r0, [r7, #4]
 80044f2:	f016 f951 	bl	801a798 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	695a      	ldr	r2, [r3, #20]
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8004504:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    #endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	4618      	mov	r0, r3
 800450c:	f004 fdf3 	bl	80090f6 <USB_ReadInterrupts>
 8004510:	4603      	mov	r3, r0
 8004512:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004516:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800451a:	f040 80a7 	bne.w	800466c <HAL_PCD_IRQHandler+0x506>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800451e:	69fb      	ldr	r3, [r7, #28]
 8004520:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004524:	685b      	ldr	r3, [r3, #4]
 8004526:	69fa      	ldr	r2, [r7, #28]
 8004528:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800452c:	f023 0301 	bic.w	r3, r3, #1
 8004530:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	2110      	movs	r1, #16
 8004538:	4618      	mov	r0, r3
 800453a:	f003 ff2b 	bl	8008394 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800453e:	2300      	movs	r3, #0
 8004540:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004542:	e036      	b.n	80045b2 <HAL_PCD_IRQHandler+0x44c>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8004544:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004546:	015a      	lsls	r2, r3, #5
 8004548:	69fb      	ldr	r3, [r7, #28]
 800454a:	4413      	add	r3, r2
 800454c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004550:	461a      	mov	r2, r3
 8004552:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004556:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8004558:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800455a:	015a      	lsls	r2, r3, #5
 800455c:	69fb      	ldr	r3, [r7, #28]
 800455e:	4413      	add	r3, r2
 8004560:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004568:	0151      	lsls	r1, r2, #5
 800456a:	69fa      	ldr	r2, [r7, #28]
 800456c:	440a      	add	r2, r1
 800456e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004572:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004576:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8004578:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800457a:	015a      	lsls	r2, r3, #5
 800457c:	69fb      	ldr	r3, [r7, #28]
 800457e:	4413      	add	r3, r2
 8004580:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004584:	461a      	mov	r2, r3
 8004586:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800458a:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800458c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800458e:	015a      	lsls	r2, r3, #5
 8004590:	69fb      	ldr	r3, [r7, #28]
 8004592:	4413      	add	r3, r2
 8004594:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800459c:	0151      	lsls	r1, r2, #5
 800459e:	69fa      	ldr	r2, [r7, #28]
 80045a0:	440a      	add	r2, r1
 80045a2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80045a6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80045aa:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80045ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045ae:	3301      	adds	r3, #1
 80045b0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	685b      	ldr	r3, [r3, #4]
 80045b6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80045b8:	429a      	cmp	r2, r3
 80045ba:	d3c3      	bcc.n	8004544 <HAL_PCD_IRQHandler+0x3de>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80045bc:	69fb      	ldr	r3, [r7, #28]
 80045be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80045c2:	69db      	ldr	r3, [r3, #28]
 80045c4:	69fa      	ldr	r2, [r7, #28]
 80045c6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80045ca:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 80045ce:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d016      	beq.n	8004606 <HAL_PCD_IRQHandler+0x4a0>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80045d8:	69fb      	ldr	r3, [r7, #28]
 80045da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80045de:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80045e2:	69fa      	ldr	r2, [r7, #28]
 80045e4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80045e8:	f043 030b 	orr.w	r3, r3, #11
 80045ec:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80045f0:	69fb      	ldr	r3, [r7, #28]
 80045f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80045f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045f8:	69fa      	ldr	r2, [r7, #28]
 80045fa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80045fe:	f043 030b 	orr.w	r3, r3, #11
 8004602:	6453      	str	r3, [r2, #68]	; 0x44
 8004604:	e015      	b.n	8004632 <HAL_PCD_IRQHandler+0x4cc>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8004606:	69fb      	ldr	r3, [r7, #28]
 8004608:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800460c:	695b      	ldr	r3, [r3, #20]
 800460e:	69fa      	ldr	r2, [r7, #28]
 8004610:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004614:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8004618:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 800461c:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800461e:	69fb      	ldr	r3, [r7, #28]
 8004620:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004624:	691b      	ldr	r3, [r3, #16]
 8004626:	69fa      	ldr	r2, [r7, #28]
 8004628:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800462c:	f043 030b 	orr.w	r3, r3, #11
 8004630:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8004632:	69fb      	ldr	r3, [r7, #28]
 8004634:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	69fa      	ldr	r2, [r7, #28]
 800463c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004640:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8004644:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	6818      	ldr	r0, [r3, #0]
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	691b      	ldr	r3, [r3, #16]
 800464e:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8004656:	461a      	mov	r2, r3
 8004658:	f004 fe24 	bl	80092a4 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	695a      	ldr	r2, [r3, #20]
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 800466a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	4618      	mov	r0, r3
 8004672:	f004 fd40 	bl	80090f6 <USB_ReadInterrupts>
 8004676:	4603      	mov	r3, r0
 8004678:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800467c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004680:	d124      	bne.n	80046cc <HAL_PCD_IRQHandler+0x566>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	4618      	mov	r0, r3
 8004688:	f004 fdd6 	bl	8009238 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	4618      	mov	r0, r3
 8004692:	f003 fee0 	bl	8008456 <USB_GetDevSpeed>
 8004696:	4603      	mov	r3, r0
 8004698:	461a      	mov	r2, r3
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681c      	ldr	r4, [r3, #0]
 80046a2:	f001 f997 	bl	80059d4 <HAL_RCC_GetHCLKFreq>
 80046a6:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80046ac:	b2db      	uxtb	r3, r3
 80046ae:	461a      	mov	r2, r3
 80046b0:	4620      	mov	r0, r4
 80046b2:	f003 fc0f 	bl	8007ed4 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80046b6:	6878      	ldr	r0, [r7, #4]
 80046b8:	f016 f845 	bl	801a746 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	695a      	ldr	r2, [r3, #20]
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 80046ca:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	4618      	mov	r0, r3
 80046d2:	f004 fd10 	bl	80090f6 <USB_ReadInterrupts>
 80046d6:	4603      	mov	r3, r0
 80046d8:	f003 0310 	and.w	r3, r3, #16
 80046dc:	2b10      	cmp	r3, #16
 80046de:	d161      	bne.n	80047a4 <HAL_PCD_IRQHandler+0x63e>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	699a      	ldr	r2, [r3, #24]
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	f022 0210 	bic.w	r2, r2, #16
 80046ee:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 80046f0:	6a3b      	ldr	r3, [r7, #32]
 80046f2:	6a1b      	ldr	r3, [r3, #32]
 80046f4:	613b      	str	r3, [r7, #16]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 80046f6:	693b      	ldr	r3, [r7, #16]
 80046f8:	f003 020f 	and.w	r2, r3, #15
 80046fc:	4613      	mov	r3, r2
 80046fe:	00db      	lsls	r3, r3, #3
 8004700:	1a9b      	subs	r3, r3, r2
 8004702:	009b      	lsls	r3, r3, #2
 8004704:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8004708:	687a      	ldr	r2, [r7, #4]
 800470a:	4413      	add	r3, r2
 800470c:	3304      	adds	r3, #4
 800470e:	60fb      	str	r3, [r7, #12]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8004710:	693b      	ldr	r3, [r7, #16]
 8004712:	0c5b      	lsrs	r3, r3, #17
 8004714:	f003 030f 	and.w	r3, r3, #15
 8004718:	2b02      	cmp	r3, #2
 800471a:	d124      	bne.n	8004766 <HAL_PCD_IRQHandler+0x600>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 800471c:	693a      	ldr	r2, [r7, #16]
 800471e:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8004722:	4013      	ands	r3, r2
 8004724:	2b00      	cmp	r3, #0
 8004726:	d035      	beq.n	8004794 <HAL_PCD_IRQHandler+0x62e>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 800472c:	693b      	ldr	r3, [r7, #16]
 800472e:	091b      	lsrs	r3, r3, #4
 8004730:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8004732:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004736:	b29b      	uxth	r3, r3
 8004738:	461a      	mov	r2, r3
 800473a:	6a38      	ldr	r0, [r7, #32]
 800473c:	f004 fb88 	bl	8008e50 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	68da      	ldr	r2, [r3, #12]
 8004744:	693b      	ldr	r3, [r7, #16]
 8004746:	091b      	lsrs	r3, r3, #4
 8004748:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800474c:	441a      	add	r2, r3
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	699a      	ldr	r2, [r3, #24]
 8004756:	693b      	ldr	r3, [r7, #16]
 8004758:	091b      	lsrs	r3, r3, #4
 800475a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800475e:	441a      	add	r2, r3
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	619a      	str	r2, [r3, #24]
 8004764:	e016      	b.n	8004794 <HAL_PCD_IRQHandler+0x62e>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8004766:	693b      	ldr	r3, [r7, #16]
 8004768:	0c5b      	lsrs	r3, r3, #17
 800476a:	f003 030f 	and.w	r3, r3, #15
 800476e:	2b06      	cmp	r3, #6
 8004770:	d110      	bne.n	8004794 <HAL_PCD_IRQHandler+0x62e>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8004778:	2208      	movs	r2, #8
 800477a:	4619      	mov	r1, r3
 800477c:	6a38      	ldr	r0, [r7, #32]
 800477e:	f004 fb67 	bl	8008e50 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	699a      	ldr	r2, [r3, #24]
 8004786:	693b      	ldr	r3, [r7, #16]
 8004788:	091b      	lsrs	r3, r3, #4
 800478a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800478e:	441a      	add	r2, r3
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	699a      	ldr	r2, [r3, #24]
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	f042 0210 	orr.w	r2, r2, #16
 80047a2:	619a      	str	r2, [r3, #24]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	4618      	mov	r0, r3
 80047aa:	f004 fca4 	bl	80090f6 <USB_ReadInterrupts>
 80047ae:	4603      	mov	r3, r0
 80047b0:	f003 0308 	and.w	r3, r3, #8
 80047b4:	2b08      	cmp	r3, #8
 80047b6:	d10a      	bne.n	80047ce <HAL_PCD_IRQHandler+0x668>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80047b8:	6878      	ldr	r0, [r7, #4]
 80047ba:	f015 ffb6 	bl	801a72a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	695a      	ldr	r2, [r3, #20]
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	f002 0208 	and.w	r2, r2, #8
 80047cc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	4618      	mov	r0, r3
 80047d4:	f004 fc8f 	bl	80090f6 <USB_ReadInterrupts>
 80047d8:	4603      	mov	r3, r0
 80047da:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80047de:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80047e2:	d10f      	bne.n	8004804 <HAL_PCD_IRQHandler+0x69e>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 80047e4:	2300      	movs	r3, #0
 80047e6:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80047e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047ea:	b2db      	uxtb	r3, r3
 80047ec:	4619      	mov	r1, r3
 80047ee:	6878      	ldr	r0, [r7, #4]
 80047f0:	f016 f818 	bl	801a824 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	695a      	ldr	r2, [r3, #20]
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8004802:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	4618      	mov	r0, r3
 800480a:	f004 fc74 	bl	80090f6 <USB_ReadInterrupts>
 800480e:	4603      	mov	r3, r0
 8004810:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004814:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004818:	d10f      	bne.n	800483a <HAL_PCD_IRQHandler+0x6d4>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 800481a:	2300      	movs	r3, #0
 800481c:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800481e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004820:	b2db      	uxtb	r3, r3
 8004822:	4619      	mov	r1, r3
 8004824:	6878      	ldr	r0, [r7, #4]
 8004826:	f015 ffeb 	bl	801a800 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	695a      	ldr	r2, [r3, #20]
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8004838:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	4618      	mov	r0, r3
 8004840:	f004 fc59 	bl	80090f6 <USB_ReadInterrupts>
 8004844:	4603      	mov	r3, r0
 8004846:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800484a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800484e:	d10a      	bne.n	8004866 <HAL_PCD_IRQHandler+0x700>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8004850:	6878      	ldr	r0, [r7, #4]
 8004852:	f015 fff9 	bl	801a848 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	695a      	ldr	r2, [r3, #20]
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8004864:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	4618      	mov	r0, r3
 800486c:	f004 fc43 	bl	80090f6 <USB_ReadInterrupts>
 8004870:	4603      	mov	r3, r0
 8004872:	f003 0304 	and.w	r3, r3, #4
 8004876:	2b04      	cmp	r3, #4
 8004878:	d115      	bne.n	80048a6 <HAL_PCD_IRQHandler+0x740>
    {
      temp = hpcd->Instance->GOTGINT;
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	685b      	ldr	r3, [r3, #4]
 8004880:	613b      	str	r3, [r7, #16]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8004882:	693b      	ldr	r3, [r7, #16]
 8004884:	f003 0304 	and.w	r3, r3, #4
 8004888:	2b00      	cmp	r3, #0
 800488a:	d002      	beq.n	8004892 <HAL_PCD_IRQHandler+0x72c>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800488c:	6878      	ldr	r0, [r7, #4]
 800488e:	f015 ffe9 	bl	801a864 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	6859      	ldr	r1, [r3, #4]
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	693a      	ldr	r2, [r7, #16]
 800489e:	430a      	orrs	r2, r1
 80048a0:	605a      	str	r2, [r3, #4]
 80048a2:	e000      	b.n	80048a6 <HAL_PCD_IRQHandler+0x740>
      return;
 80048a4:	bf00      	nop
    }
  }
}
 80048a6:	3734      	adds	r7, #52	; 0x34
 80048a8:	46bd      	mov	sp, r7
 80048aa:	bd90      	pop	{r4, r7, pc}

080048ac <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80048ac:	b580      	push	{r7, lr}
 80048ae:	b082      	sub	sp, #8
 80048b0:	af00      	add	r7, sp, #0
 80048b2:	6078      	str	r0, [r7, #4]
 80048b4:	460b      	mov	r3, r1
 80048b6:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80048be:	2b01      	cmp	r3, #1
 80048c0:	d101      	bne.n	80048c6 <HAL_PCD_SetAddress+0x1a>
 80048c2:	2302      	movs	r3, #2
 80048c4:	e013      	b.n	80048ee <HAL_PCD_SetAddress+0x42>
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	2201      	movs	r2, #1
 80048ca:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	78fa      	ldrb	r2, [r7, #3]
 80048d2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	78fa      	ldrb	r2, [r7, #3]
 80048dc:	4611      	mov	r1, r2
 80048de:	4618      	mov	r0, r3
 80048e0:	f004 fbb3 	bl	800904a <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	2200      	movs	r2, #0
 80048e8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 80048ec:	2300      	movs	r3, #0
}
 80048ee:	4618      	mov	r0, r3
 80048f0:	3708      	adds	r7, #8
 80048f2:	46bd      	mov	sp, r7
 80048f4:	bd80      	pop	{r7, pc}

080048f6 <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 80048f6:	b580      	push	{r7, lr}
 80048f8:	b084      	sub	sp, #16
 80048fa:	af00      	add	r7, sp, #0
 80048fc:	6078      	str	r0, [r7, #4]
 80048fe:	4608      	mov	r0, r1
 8004900:	4611      	mov	r1, r2
 8004902:	461a      	mov	r2, r3
 8004904:	4603      	mov	r3, r0
 8004906:	70fb      	strb	r3, [r7, #3]
 8004908:	460b      	mov	r3, r1
 800490a:	803b      	strh	r3, [r7, #0]
 800490c:	4613      	mov	r3, r2
 800490e:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8004910:	2300      	movs	r3, #0
 8004912:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004914:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004918:	2b00      	cmp	r3, #0
 800491a:	da0f      	bge.n	800493c <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800491c:	78fb      	ldrb	r3, [r7, #3]
 800491e:	f003 020f 	and.w	r2, r3, #15
 8004922:	4613      	mov	r3, r2
 8004924:	00db      	lsls	r3, r3, #3
 8004926:	1a9b      	subs	r3, r3, r2
 8004928:	009b      	lsls	r3, r3, #2
 800492a:	3338      	adds	r3, #56	; 0x38
 800492c:	687a      	ldr	r2, [r7, #4]
 800492e:	4413      	add	r3, r2
 8004930:	3304      	adds	r3, #4
 8004932:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	2201      	movs	r2, #1
 8004938:	705a      	strb	r2, [r3, #1]
 800493a:	e00f      	b.n	800495c <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800493c:	78fb      	ldrb	r3, [r7, #3]
 800493e:	f003 020f 	and.w	r2, r3, #15
 8004942:	4613      	mov	r3, r2
 8004944:	00db      	lsls	r3, r3, #3
 8004946:	1a9b      	subs	r3, r3, r2
 8004948:	009b      	lsls	r3, r3, #2
 800494a:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800494e:	687a      	ldr	r2, [r7, #4]
 8004950:	4413      	add	r3, r2
 8004952:	3304      	adds	r3, #4
 8004954:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	2200      	movs	r2, #0
 800495a:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800495c:	78fb      	ldrb	r3, [r7, #3]
 800495e:	f003 030f 	and.w	r3, r3, #15
 8004962:	b2da      	uxtb	r2, r3
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8004968:	883a      	ldrh	r2, [r7, #0]
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	78ba      	ldrb	r2, [r7, #2]
 8004972:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	785b      	ldrb	r3, [r3, #1]
 8004978:	2b00      	cmp	r3, #0
 800497a:	d004      	beq.n	8004986 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	781b      	ldrb	r3, [r3, #0]
 8004980:	b29a      	uxth	r2, r3
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8004986:	78bb      	ldrb	r3, [r7, #2]
 8004988:	2b02      	cmp	r3, #2
 800498a:	d102      	bne.n	8004992 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	2200      	movs	r2, #0
 8004990:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8004998:	2b01      	cmp	r3, #1
 800499a:	d101      	bne.n	80049a0 <HAL_PCD_EP_Open+0xaa>
 800499c:	2302      	movs	r3, #2
 800499e:	e00e      	b.n	80049be <HAL_PCD_EP_Open+0xc8>
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	2201      	movs	r2, #1
 80049a4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	68f9      	ldr	r1, [r7, #12]
 80049ae:	4618      	mov	r0, r3
 80049b0:	f003 fd76 	bl	80084a0 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	2200      	movs	r2, #0
 80049b8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 80049bc:	7afb      	ldrb	r3, [r7, #11]
}
 80049be:	4618      	mov	r0, r3
 80049c0:	3710      	adds	r7, #16
 80049c2:	46bd      	mov	sp, r7
 80049c4:	bd80      	pop	{r7, pc}

080049c6 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80049c6:	b580      	push	{r7, lr}
 80049c8:	b084      	sub	sp, #16
 80049ca:	af00      	add	r7, sp, #0
 80049cc:	6078      	str	r0, [r7, #4]
 80049ce:	460b      	mov	r3, r1
 80049d0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80049d2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	da0f      	bge.n	80049fa <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80049da:	78fb      	ldrb	r3, [r7, #3]
 80049dc:	f003 020f 	and.w	r2, r3, #15
 80049e0:	4613      	mov	r3, r2
 80049e2:	00db      	lsls	r3, r3, #3
 80049e4:	1a9b      	subs	r3, r3, r2
 80049e6:	009b      	lsls	r3, r3, #2
 80049e8:	3338      	adds	r3, #56	; 0x38
 80049ea:	687a      	ldr	r2, [r7, #4]
 80049ec:	4413      	add	r3, r2
 80049ee:	3304      	adds	r3, #4
 80049f0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	2201      	movs	r2, #1
 80049f6:	705a      	strb	r2, [r3, #1]
 80049f8:	e00f      	b.n	8004a1a <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80049fa:	78fb      	ldrb	r3, [r7, #3]
 80049fc:	f003 020f 	and.w	r2, r3, #15
 8004a00:	4613      	mov	r3, r2
 8004a02:	00db      	lsls	r3, r3, #3
 8004a04:	1a9b      	subs	r3, r3, r2
 8004a06:	009b      	lsls	r3, r3, #2
 8004a08:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8004a0c:	687a      	ldr	r2, [r7, #4]
 8004a0e:	4413      	add	r3, r2
 8004a10:	3304      	adds	r3, #4
 8004a12:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	2200      	movs	r2, #0
 8004a18:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8004a1a:	78fb      	ldrb	r3, [r7, #3]
 8004a1c:	f003 030f 	and.w	r3, r3, #15
 8004a20:	b2da      	uxtb	r2, r3
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8004a2c:	2b01      	cmp	r3, #1
 8004a2e:	d101      	bne.n	8004a34 <HAL_PCD_EP_Close+0x6e>
 8004a30:	2302      	movs	r3, #2
 8004a32:	e00e      	b.n	8004a52 <HAL_PCD_EP_Close+0x8c>
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	2201      	movs	r2, #1
 8004a38:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	68f9      	ldr	r1, [r7, #12]
 8004a42:	4618      	mov	r0, r3
 8004a44:	f003 fdb4 	bl	80085b0 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	2200      	movs	r2, #0
 8004a4c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8004a50:	2300      	movs	r3, #0
}
 8004a52:	4618      	mov	r0, r3
 8004a54:	3710      	adds	r7, #16
 8004a56:	46bd      	mov	sp, r7
 8004a58:	bd80      	pop	{r7, pc}

08004a5a <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004a5a:	b580      	push	{r7, lr}
 8004a5c:	b086      	sub	sp, #24
 8004a5e:	af00      	add	r7, sp, #0
 8004a60:	60f8      	str	r0, [r7, #12]
 8004a62:	607a      	str	r2, [r7, #4]
 8004a64:	603b      	str	r3, [r7, #0]
 8004a66:	460b      	mov	r3, r1
 8004a68:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004a6a:	7afb      	ldrb	r3, [r7, #11]
 8004a6c:	f003 020f 	and.w	r2, r3, #15
 8004a70:	4613      	mov	r3, r2
 8004a72:	00db      	lsls	r3, r3, #3
 8004a74:	1a9b      	subs	r3, r3, r2
 8004a76:	009b      	lsls	r3, r3, #2
 8004a78:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8004a7c:	68fa      	ldr	r2, [r7, #12]
 8004a7e:	4413      	add	r3, r2
 8004a80:	3304      	adds	r3, #4
 8004a82:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004a84:	697b      	ldr	r3, [r7, #20]
 8004a86:	687a      	ldr	r2, [r7, #4]
 8004a88:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8004a8a:	697b      	ldr	r3, [r7, #20]
 8004a8c:	683a      	ldr	r2, [r7, #0]
 8004a8e:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8004a90:	697b      	ldr	r3, [r7, #20]
 8004a92:	2200      	movs	r2, #0
 8004a94:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8004a96:	697b      	ldr	r3, [r7, #20]
 8004a98:	2200      	movs	r2, #0
 8004a9a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004a9c:	7afb      	ldrb	r3, [r7, #11]
 8004a9e:	f003 030f 	and.w	r3, r3, #15
 8004aa2:	b2da      	uxtb	r2, r3
 8004aa4:	697b      	ldr	r3, [r7, #20]
 8004aa6:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	691b      	ldr	r3, [r3, #16]
 8004aac:	2b01      	cmp	r3, #1
 8004aae:	d102      	bne.n	8004ab6 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8004ab0:	687a      	ldr	r2, [r7, #4]
 8004ab2:	697b      	ldr	r3, [r7, #20]
 8004ab4:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004ab6:	7afb      	ldrb	r3, [r7, #11]
 8004ab8:	f003 030f 	and.w	r3, r3, #15
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d109      	bne.n	8004ad4 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	6818      	ldr	r0, [r3, #0]
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	691b      	ldr	r3, [r3, #16]
 8004ac8:	b2db      	uxtb	r3, r3
 8004aca:	461a      	mov	r2, r3
 8004acc:	6979      	ldr	r1, [r7, #20]
 8004ace:	f004 f837 	bl	8008b40 <USB_EP0StartXfer>
 8004ad2:	e008      	b.n	8004ae6 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	6818      	ldr	r0, [r3, #0]
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	691b      	ldr	r3, [r3, #16]
 8004adc:	b2db      	uxtb	r3, r3
 8004ade:	461a      	mov	r2, r3
 8004ae0:	6979      	ldr	r1, [r7, #20]
 8004ae2:	f003 fde9 	bl	80086b8 <USB_EPStartXfer>
  }

  return HAL_OK;
 8004ae6:	2300      	movs	r3, #0
}
 8004ae8:	4618      	mov	r0, r3
 8004aea:	3718      	adds	r7, #24
 8004aec:	46bd      	mov	sp, r7
 8004aee:	bd80      	pop	{r7, pc}

08004af0 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004af0:	b480      	push	{r7}
 8004af2:	b083      	sub	sp, #12
 8004af4:	af00      	add	r7, sp, #0
 8004af6:	6078      	str	r0, [r7, #4]
 8004af8:	460b      	mov	r3, r1
 8004afa:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8004afc:	78fb      	ldrb	r3, [r7, #3]
 8004afe:	f003 020f 	and.w	r2, r3, #15
 8004b02:	6879      	ldr	r1, [r7, #4]
 8004b04:	4613      	mov	r3, r2
 8004b06:	00db      	lsls	r3, r3, #3
 8004b08:	1a9b      	subs	r3, r3, r2
 8004b0a:	009b      	lsls	r3, r3, #2
 8004b0c:	440b      	add	r3, r1
 8004b0e:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8004b12:	681b      	ldr	r3, [r3, #0]
}
 8004b14:	4618      	mov	r0, r3
 8004b16:	370c      	adds	r7, #12
 8004b18:	46bd      	mov	sp, r7
 8004b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b1e:	4770      	bx	lr

08004b20 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004b20:	b580      	push	{r7, lr}
 8004b22:	b086      	sub	sp, #24
 8004b24:	af00      	add	r7, sp, #0
 8004b26:	60f8      	str	r0, [r7, #12]
 8004b28:	607a      	str	r2, [r7, #4]
 8004b2a:	603b      	str	r3, [r7, #0]
 8004b2c:	460b      	mov	r3, r1
 8004b2e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004b30:	7afb      	ldrb	r3, [r7, #11]
 8004b32:	f003 020f 	and.w	r2, r3, #15
 8004b36:	4613      	mov	r3, r2
 8004b38:	00db      	lsls	r3, r3, #3
 8004b3a:	1a9b      	subs	r3, r3, r2
 8004b3c:	009b      	lsls	r3, r3, #2
 8004b3e:	3338      	adds	r3, #56	; 0x38
 8004b40:	68fa      	ldr	r2, [r7, #12]
 8004b42:	4413      	add	r3, r2
 8004b44:	3304      	adds	r3, #4
 8004b46:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004b48:	697b      	ldr	r3, [r7, #20]
 8004b4a:	687a      	ldr	r2, [r7, #4]
 8004b4c:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8004b4e:	697b      	ldr	r3, [r7, #20]
 8004b50:	683a      	ldr	r2, [r7, #0]
 8004b52:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8004b54:	697b      	ldr	r3, [r7, #20]
 8004b56:	2200      	movs	r2, #0
 8004b58:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8004b5a:	697b      	ldr	r3, [r7, #20]
 8004b5c:	2201      	movs	r2, #1
 8004b5e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004b60:	7afb      	ldrb	r3, [r7, #11]
 8004b62:	f003 030f 	and.w	r3, r3, #15
 8004b66:	b2da      	uxtb	r2, r3
 8004b68:	697b      	ldr	r3, [r7, #20]
 8004b6a:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	691b      	ldr	r3, [r3, #16]
 8004b70:	2b01      	cmp	r3, #1
 8004b72:	d102      	bne.n	8004b7a <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8004b74:	687a      	ldr	r2, [r7, #4]
 8004b76:	697b      	ldr	r3, [r7, #20]
 8004b78:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004b7a:	7afb      	ldrb	r3, [r7, #11]
 8004b7c:	f003 030f 	and.w	r3, r3, #15
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d109      	bne.n	8004b98 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	6818      	ldr	r0, [r3, #0]
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	691b      	ldr	r3, [r3, #16]
 8004b8c:	b2db      	uxtb	r3, r3
 8004b8e:	461a      	mov	r2, r3
 8004b90:	6979      	ldr	r1, [r7, #20]
 8004b92:	f003 ffd5 	bl	8008b40 <USB_EP0StartXfer>
 8004b96:	e008      	b.n	8004baa <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	6818      	ldr	r0, [r3, #0]
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	691b      	ldr	r3, [r3, #16]
 8004ba0:	b2db      	uxtb	r3, r3
 8004ba2:	461a      	mov	r2, r3
 8004ba4:	6979      	ldr	r1, [r7, #20]
 8004ba6:	f003 fd87 	bl	80086b8 <USB_EPStartXfer>
  }

  return HAL_OK;
 8004baa:	2300      	movs	r3, #0
}
 8004bac:	4618      	mov	r0, r3
 8004bae:	3718      	adds	r7, #24
 8004bb0:	46bd      	mov	sp, r7
 8004bb2:	bd80      	pop	{r7, pc}

08004bb4 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004bb4:	b580      	push	{r7, lr}
 8004bb6:	b084      	sub	sp, #16
 8004bb8:	af00      	add	r7, sp, #0
 8004bba:	6078      	str	r0, [r7, #4]
 8004bbc:	460b      	mov	r3, r1
 8004bbe:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8004bc0:	78fb      	ldrb	r3, [r7, #3]
 8004bc2:	f003 020f 	and.w	r2, r3, #15
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	685b      	ldr	r3, [r3, #4]
 8004bca:	429a      	cmp	r2, r3
 8004bcc:	d901      	bls.n	8004bd2 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8004bce:	2301      	movs	r3, #1
 8004bd0:	e050      	b.n	8004c74 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004bd2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	da0f      	bge.n	8004bfa <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004bda:	78fb      	ldrb	r3, [r7, #3]
 8004bdc:	f003 020f 	and.w	r2, r3, #15
 8004be0:	4613      	mov	r3, r2
 8004be2:	00db      	lsls	r3, r3, #3
 8004be4:	1a9b      	subs	r3, r3, r2
 8004be6:	009b      	lsls	r3, r3, #2
 8004be8:	3338      	adds	r3, #56	; 0x38
 8004bea:	687a      	ldr	r2, [r7, #4]
 8004bec:	4413      	add	r3, r2
 8004bee:	3304      	adds	r3, #4
 8004bf0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	2201      	movs	r2, #1
 8004bf6:	705a      	strb	r2, [r3, #1]
 8004bf8:	e00d      	b.n	8004c16 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004bfa:	78fa      	ldrb	r2, [r7, #3]
 8004bfc:	4613      	mov	r3, r2
 8004bfe:	00db      	lsls	r3, r3, #3
 8004c00:	1a9b      	subs	r3, r3, r2
 8004c02:	009b      	lsls	r3, r3, #2
 8004c04:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8004c08:	687a      	ldr	r2, [r7, #4]
 8004c0a:	4413      	add	r3, r2
 8004c0c:	3304      	adds	r3, #4
 8004c0e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	2200      	movs	r2, #0
 8004c14:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	2201      	movs	r2, #1
 8004c1a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004c1c:	78fb      	ldrb	r3, [r7, #3]
 8004c1e:	f003 030f 	and.w	r3, r3, #15
 8004c22:	b2da      	uxtb	r2, r3
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8004c2e:	2b01      	cmp	r3, #1
 8004c30:	d101      	bne.n	8004c36 <HAL_PCD_EP_SetStall+0x82>
 8004c32:	2302      	movs	r3, #2
 8004c34:	e01e      	b.n	8004c74 <HAL_PCD_EP_SetStall+0xc0>
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	2201      	movs	r2, #1
 8004c3a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	68f9      	ldr	r1, [r7, #12]
 8004c44:	4618      	mov	r0, r3
 8004c46:	f004 f92c 	bl	8008ea2 <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004c4a:	78fb      	ldrb	r3, [r7, #3]
 8004c4c:	f003 030f 	and.w	r3, r3, #15
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d10a      	bne.n	8004c6a <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	6818      	ldr	r0, [r3, #0]
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	691b      	ldr	r3, [r3, #16]
 8004c5c:	b2d9      	uxtb	r1, r3
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8004c64:	461a      	mov	r2, r3
 8004c66:	f004 fb1d 	bl	80092a4 <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd);
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	2200      	movs	r2, #0
 8004c6e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8004c72:	2300      	movs	r3, #0
}
 8004c74:	4618      	mov	r0, r3
 8004c76:	3710      	adds	r7, #16
 8004c78:	46bd      	mov	sp, r7
 8004c7a:	bd80      	pop	{r7, pc}

08004c7c <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004c7c:	b580      	push	{r7, lr}
 8004c7e:	b084      	sub	sp, #16
 8004c80:	af00      	add	r7, sp, #0
 8004c82:	6078      	str	r0, [r7, #4]
 8004c84:	460b      	mov	r3, r1
 8004c86:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8004c88:	78fb      	ldrb	r3, [r7, #3]
 8004c8a:	f003 020f 	and.w	r2, r3, #15
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	685b      	ldr	r3, [r3, #4]
 8004c92:	429a      	cmp	r2, r3
 8004c94:	d901      	bls.n	8004c9a <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8004c96:	2301      	movs	r3, #1
 8004c98:	e042      	b.n	8004d20 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004c9a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	da0f      	bge.n	8004cc2 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004ca2:	78fb      	ldrb	r3, [r7, #3]
 8004ca4:	f003 020f 	and.w	r2, r3, #15
 8004ca8:	4613      	mov	r3, r2
 8004caa:	00db      	lsls	r3, r3, #3
 8004cac:	1a9b      	subs	r3, r3, r2
 8004cae:	009b      	lsls	r3, r3, #2
 8004cb0:	3338      	adds	r3, #56	; 0x38
 8004cb2:	687a      	ldr	r2, [r7, #4]
 8004cb4:	4413      	add	r3, r2
 8004cb6:	3304      	adds	r3, #4
 8004cb8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	2201      	movs	r2, #1
 8004cbe:	705a      	strb	r2, [r3, #1]
 8004cc0:	e00f      	b.n	8004ce2 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004cc2:	78fb      	ldrb	r3, [r7, #3]
 8004cc4:	f003 020f 	and.w	r2, r3, #15
 8004cc8:	4613      	mov	r3, r2
 8004cca:	00db      	lsls	r3, r3, #3
 8004ccc:	1a9b      	subs	r3, r3, r2
 8004cce:	009b      	lsls	r3, r3, #2
 8004cd0:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8004cd4:	687a      	ldr	r2, [r7, #4]
 8004cd6:	4413      	add	r3, r2
 8004cd8:	3304      	adds	r3, #4
 8004cda:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	2200      	movs	r2, #0
 8004ce0:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	2200      	movs	r2, #0
 8004ce6:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004ce8:	78fb      	ldrb	r3, [r7, #3]
 8004cea:	f003 030f 	and.w	r3, r3, #15
 8004cee:	b2da      	uxtb	r2, r3
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8004cfa:	2b01      	cmp	r3, #1
 8004cfc:	d101      	bne.n	8004d02 <HAL_PCD_EP_ClrStall+0x86>
 8004cfe:	2302      	movs	r3, #2
 8004d00:	e00e      	b.n	8004d20 <HAL_PCD_EP_ClrStall+0xa4>
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	2201      	movs	r2, #1
 8004d06:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	68f9      	ldr	r1, [r7, #12]
 8004d10:	4618      	mov	r0, r3
 8004d12:	f004 f934 	bl	8008f7e <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	2200      	movs	r2, #0
 8004d1a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8004d1e:	2300      	movs	r3, #0
}
 8004d20:	4618      	mov	r0, r3
 8004d22:	3710      	adds	r7, #16
 8004d24:	46bd      	mov	sp, r7
 8004d26:	bd80      	pop	{r7, pc}

08004d28 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004d28:	b580      	push	{r7, lr}
 8004d2a:	b08a      	sub	sp, #40	; 0x28
 8004d2c:	af02      	add	r7, sp, #8
 8004d2e:	6078      	str	r0, [r7, #4]
 8004d30:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d38:	697b      	ldr	r3, [r7, #20]
 8004d3a:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8004d3c:	683a      	ldr	r2, [r7, #0]
 8004d3e:	4613      	mov	r3, r2
 8004d40:	00db      	lsls	r3, r3, #3
 8004d42:	1a9b      	subs	r3, r3, r2
 8004d44:	009b      	lsls	r3, r3, #2
 8004d46:	3338      	adds	r3, #56	; 0x38
 8004d48:	687a      	ldr	r2, [r7, #4]
 8004d4a:	4413      	add	r3, r2
 8004d4c:	3304      	adds	r3, #4
 8004d4e:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	699a      	ldr	r2, [r3, #24]
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	695b      	ldr	r3, [r3, #20]
 8004d58:	429a      	cmp	r2, r3
 8004d5a:	d901      	bls.n	8004d60 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8004d5c:	2301      	movs	r3, #1
 8004d5e:	e06c      	b.n	8004e3a <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	695a      	ldr	r2, [r3, #20]
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	699b      	ldr	r3, [r3, #24]
 8004d68:	1ad3      	subs	r3, r2, r3
 8004d6a:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	689b      	ldr	r3, [r3, #8]
 8004d70:	69fa      	ldr	r2, [r7, #28]
 8004d72:	429a      	cmp	r2, r3
 8004d74:	d902      	bls.n	8004d7c <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	689b      	ldr	r3, [r3, #8]
 8004d7a:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8004d7c:	69fb      	ldr	r3, [r7, #28]
 8004d7e:	3303      	adds	r3, #3
 8004d80:	089b      	lsrs	r3, r3, #2
 8004d82:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004d84:	e02b      	b.n	8004dde <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	695a      	ldr	r2, [r3, #20]
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	699b      	ldr	r3, [r3, #24]
 8004d8e:	1ad3      	subs	r3, r2, r3
 8004d90:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	689b      	ldr	r3, [r3, #8]
 8004d96:	69fa      	ldr	r2, [r7, #28]
 8004d98:	429a      	cmp	r2, r3
 8004d9a:	d902      	bls.n	8004da2 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	689b      	ldr	r3, [r3, #8]
 8004da0:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8004da2:	69fb      	ldr	r3, [r7, #28]
 8004da4:	3303      	adds	r3, #3
 8004da6:	089b      	lsrs	r3, r3, #2
 8004da8:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	68d9      	ldr	r1, [r3, #12]
 8004dae:	683b      	ldr	r3, [r7, #0]
 8004db0:	b2da      	uxtb	r2, r3
 8004db2:	69fb      	ldr	r3, [r7, #28]
 8004db4:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8004dba:	b2db      	uxtb	r3, r3
 8004dbc:	9300      	str	r3, [sp, #0]
 8004dbe:	4603      	mov	r3, r0
 8004dc0:	6978      	ldr	r0, [r7, #20]
 8004dc2:	f004 f810 	bl	8008de6 <USB_WritePacket>

    ep->xfer_buff  += len;
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	68da      	ldr	r2, [r3, #12]
 8004dca:	69fb      	ldr	r3, [r7, #28]
 8004dcc:	441a      	add	r2, r3
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	699a      	ldr	r2, [r3, #24]
 8004dd6:	69fb      	ldr	r3, [r7, #28]
 8004dd8:	441a      	add	r2, r3
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004dde:	683b      	ldr	r3, [r7, #0]
 8004de0:	015a      	lsls	r2, r3, #5
 8004de2:	693b      	ldr	r3, [r7, #16]
 8004de4:	4413      	add	r3, r2
 8004de6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004dea:	699b      	ldr	r3, [r3, #24]
 8004dec:	b29b      	uxth	r3, r3
 8004dee:	69ba      	ldr	r2, [r7, #24]
 8004df0:	429a      	cmp	r2, r3
 8004df2:	d809      	bhi.n	8004e08 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	699a      	ldr	r2, [r3, #24]
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004dfc:	429a      	cmp	r2, r3
 8004dfe:	d203      	bcs.n	8004e08 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	695b      	ldr	r3, [r3, #20]
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d1be      	bne.n	8004d86 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	695a      	ldr	r2, [r3, #20]
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	699b      	ldr	r3, [r3, #24]
 8004e10:	429a      	cmp	r2, r3
 8004e12:	d811      	bhi.n	8004e38 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8004e14:	683b      	ldr	r3, [r7, #0]
 8004e16:	f003 030f 	and.w	r3, r3, #15
 8004e1a:	2201      	movs	r2, #1
 8004e1c:	fa02 f303 	lsl.w	r3, r2, r3
 8004e20:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8004e22:	693b      	ldr	r3, [r7, #16]
 8004e24:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004e28:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004e2a:	68bb      	ldr	r3, [r7, #8]
 8004e2c:	43db      	mvns	r3, r3
 8004e2e:	6939      	ldr	r1, [r7, #16]
 8004e30:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004e34:	4013      	ands	r3, r2
 8004e36:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8004e38:	2300      	movs	r3, #0
}
 8004e3a:	4618      	mov	r0, r3
 8004e3c:	3720      	adds	r7, #32
 8004e3e:	46bd      	mov	sp, r7
 8004e40:	bd80      	pop	{r7, pc}
	...

08004e44 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004e44:	b580      	push	{r7, lr}
 8004e46:	b086      	sub	sp, #24
 8004e48:	af00      	add	r7, sp, #0
 8004e4a:	6078      	str	r0, [r7, #4]
 8004e4c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004e54:	697b      	ldr	r3, [r7, #20]
 8004e56:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004e58:	697b      	ldr	r3, [r7, #20]
 8004e5a:	333c      	adds	r3, #60	; 0x3c
 8004e5c:	3304      	adds	r3, #4
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8004e62:	683b      	ldr	r3, [r7, #0]
 8004e64:	015a      	lsls	r2, r3, #5
 8004e66:	693b      	ldr	r3, [r7, #16]
 8004e68:	4413      	add	r3, r2
 8004e6a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e6e:	689b      	ldr	r3, [r3, #8]
 8004e70:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	691b      	ldr	r3, [r3, #16]
 8004e76:	2b01      	cmp	r3, #1
 8004e78:	f040 80b3 	bne.w	8004fe2 <PCD_EP_OutXfrComplete_int+0x19e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8004e7c:	68bb      	ldr	r3, [r7, #8]
 8004e7e:	f003 0308 	and.w	r3, r3, #8
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d028      	beq.n	8004ed8 <PCD_EP_OutXfrComplete_int+0x94>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	4a70      	ldr	r2, [pc, #448]	; (800504c <PCD_EP_OutXfrComplete_int+0x208>)
 8004e8a:	4293      	cmp	r3, r2
 8004e8c:	d90e      	bls.n	8004eac <PCD_EP_OutXfrComplete_int+0x68>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004e8e:	68bb      	ldr	r3, [r7, #8]
 8004e90:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d009      	beq.n	8004eac <PCD_EP_OutXfrComplete_int+0x68>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004e98:	683b      	ldr	r3, [r7, #0]
 8004e9a:	015a      	lsls	r2, r3, #5
 8004e9c:	693b      	ldr	r3, [r7, #16]
 8004e9e:	4413      	add	r3, r2
 8004ea0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ea4:	461a      	mov	r2, r3
 8004ea6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004eaa:	6093      	str	r3, [r2, #8]

      /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SetupStageCallback(hpcd);
#else
      HAL_PCD_SetupStageCallback(hpcd);
 8004eac:	6878      	ldr	r0, [r7, #4]
 8004eae:	f015 fbf5 	bl	801a69c <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	6818      	ldr	r0, [r3, #0]
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8004ebc:	461a      	mov	r2, r3
 8004ebe:	2101      	movs	r1, #1
 8004ec0:	f004 f9f0 	bl	80092a4 <USB_EP0_OutStart>
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8004ec4:	683b      	ldr	r3, [r7, #0]
 8004ec6:	015a      	lsls	r2, r3, #5
 8004ec8:	693b      	ldr	r3, [r7, #16]
 8004eca:	4413      	add	r3, r2
 8004ecc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ed0:	461a      	mov	r2, r3
 8004ed2:	2308      	movs	r3, #8
 8004ed4:	6093      	str	r3, [r2, #8]
 8004ed6:	e0b3      	b.n	8005040 <PCD_EP_OutXfrComplete_int+0x1fc>
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8004ed8:	68bb      	ldr	r3, [r7, #8]
 8004eda:	f003 0320 	and.w	r3, r3, #32
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d009      	beq.n	8004ef6 <PCD_EP_OutXfrComplete_int+0xb2>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004ee2:	683b      	ldr	r3, [r7, #0]
 8004ee4:	015a      	lsls	r2, r3, #5
 8004ee6:	693b      	ldr	r3, [r7, #16]
 8004ee8:	4413      	add	r3, r2
 8004eea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004eee:	461a      	mov	r2, r3
 8004ef0:	2320      	movs	r3, #32
 8004ef2:	6093      	str	r3, [r2, #8]
 8004ef4:	e0a4      	b.n	8005040 <PCD_EP_OutXfrComplete_int+0x1fc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8004ef6:	68bb      	ldr	r3, [r7, #8]
 8004ef8:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	f040 809f 	bne.w	8005040 <PCD_EP_OutXfrComplete_int+0x1fc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	4a51      	ldr	r2, [pc, #324]	; (800504c <PCD_EP_OutXfrComplete_int+0x208>)
 8004f06:	4293      	cmp	r3, r2
 8004f08:	d90f      	bls.n	8004f2a <PCD_EP_OutXfrComplete_int+0xe6>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004f0a:	68bb      	ldr	r3, [r7, #8]
 8004f0c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d00a      	beq.n	8004f2a <PCD_EP_OutXfrComplete_int+0xe6>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004f14:	683b      	ldr	r3, [r7, #0]
 8004f16:	015a      	lsls	r2, r3, #5
 8004f18:	693b      	ldr	r3, [r7, #16]
 8004f1a:	4413      	add	r3, r2
 8004f1c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f20:	461a      	mov	r2, r3
 8004f22:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004f26:	6093      	str	r3, [r2, #8]
 8004f28:	e08a      	b.n	8005040 <PCD_EP_OutXfrComplete_int+0x1fc>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8004f2a:	6879      	ldr	r1, [r7, #4]
 8004f2c:	683a      	ldr	r2, [r7, #0]
 8004f2e:	4613      	mov	r3, r2
 8004f30:	00db      	lsls	r3, r3, #3
 8004f32:	1a9b      	subs	r3, r3, r2
 8004f34:	009b      	lsls	r3, r3, #2
 8004f36:	440b      	add	r3, r1
 8004f38:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8004f3c:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8004f3e:	683b      	ldr	r3, [r7, #0]
 8004f40:	0159      	lsls	r1, r3, #5
 8004f42:	693b      	ldr	r3, [r7, #16]
 8004f44:	440b      	add	r3, r1
 8004f46:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f4a:	691b      	ldr	r3, [r3, #16]
 8004f4c:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 8004f50:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8004f52:	6878      	ldr	r0, [r7, #4]
 8004f54:	683a      	ldr	r2, [r7, #0]
 8004f56:	4613      	mov	r3, r2
 8004f58:	00db      	lsls	r3, r3, #3
 8004f5a:	1a9b      	subs	r3, r3, r2
 8004f5c:	009b      	lsls	r3, r3, #2
 8004f5e:	4403      	add	r3, r0
 8004f60:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8004f64:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8004f66:	6879      	ldr	r1, [r7, #4]
 8004f68:	683a      	ldr	r2, [r7, #0]
 8004f6a:	4613      	mov	r3, r2
 8004f6c:	00db      	lsls	r3, r3, #3
 8004f6e:	1a9b      	subs	r3, r3, r2
 8004f70:	009b      	lsls	r3, r3, #2
 8004f72:	440b      	add	r3, r1
 8004f74:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8004f78:	6819      	ldr	r1, [r3, #0]
 8004f7a:	6878      	ldr	r0, [r7, #4]
 8004f7c:	683a      	ldr	r2, [r7, #0]
 8004f7e:	4613      	mov	r3, r2
 8004f80:	00db      	lsls	r3, r3, #3
 8004f82:	1a9b      	subs	r3, r3, r2
 8004f84:	009b      	lsls	r3, r3, #2
 8004f86:	4403      	add	r3, r0
 8004f88:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	4419      	add	r1, r3
 8004f90:	6878      	ldr	r0, [r7, #4]
 8004f92:	683a      	ldr	r2, [r7, #0]
 8004f94:	4613      	mov	r3, r2
 8004f96:	00db      	lsls	r3, r3, #3
 8004f98:	1a9b      	subs	r3, r3, r2
 8004f9a:	009b      	lsls	r3, r3, #2
 8004f9c:	4403      	add	r3, r0
 8004f9e:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8004fa2:	6019      	str	r1, [r3, #0]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004fa4:	683b      	ldr	r3, [r7, #0]
 8004fa6:	b2db      	uxtb	r3, r3
 8004fa8:	4619      	mov	r1, r3
 8004faa:	6878      	ldr	r0, [r7, #4]
 8004fac:	f015 fb88 	bl	801a6c0 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8004fb0:	683b      	ldr	r3, [r7, #0]
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d144      	bne.n	8005040 <PCD_EP_OutXfrComplete_int+0x1fc>
 8004fb6:	6879      	ldr	r1, [r7, #4]
 8004fb8:	683a      	ldr	r2, [r7, #0]
 8004fba:	4613      	mov	r3, r2
 8004fbc:	00db      	lsls	r3, r3, #3
 8004fbe:	1a9b      	subs	r3, r3, r2
 8004fc0:	009b      	lsls	r3, r3, #2
 8004fc2:	440b      	add	r3, r1
 8004fc4:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d138      	bne.n	8005040 <PCD_EP_OutXfrComplete_int+0x1fc>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	6818      	ldr	r0, [r3, #0]
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8004fd8:	461a      	mov	r2, r3
 8004fda:	2101      	movs	r1, #1
 8004fdc:	f004 f962 	bl	80092a4 <USB_EP0_OutStart>
 8004fe0:	e02e      	b.n	8005040 <PCD_EP_OutXfrComplete_int+0x1fc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	4a1a      	ldr	r2, [pc, #104]	; (8005050 <PCD_EP_OutXfrComplete_int+0x20c>)
 8004fe6:	4293      	cmp	r3, r2
 8004fe8:	d124      	bne.n	8005034 <PCD_EP_OutXfrComplete_int+0x1f0>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8004fea:	68bb      	ldr	r3, [r7, #8]
 8004fec:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d00a      	beq.n	800500a <PCD_EP_OutXfrComplete_int+0x1c6>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004ff4:	683b      	ldr	r3, [r7, #0]
 8004ff6:	015a      	lsls	r2, r3, #5
 8004ff8:	693b      	ldr	r3, [r7, #16]
 8004ffa:	4413      	add	r3, r2
 8004ffc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005000:	461a      	mov	r2, r3
 8005002:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005006:	6093      	str	r3, [r2, #8]
 8005008:	e01a      	b.n	8005040 <PCD_EP_OutXfrComplete_int+0x1fc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800500a:	68bb      	ldr	r3, [r7, #8]
 800500c:	f003 0320 	and.w	r3, r3, #32
 8005010:	2b00      	cmp	r3, #0
 8005012:	d008      	beq.n	8005026 <PCD_EP_OutXfrComplete_int+0x1e2>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8005014:	683b      	ldr	r3, [r7, #0]
 8005016:	015a      	lsls	r2, r3, #5
 8005018:	693b      	ldr	r3, [r7, #16]
 800501a:	4413      	add	r3, r2
 800501c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005020:	461a      	mov	r2, r3
 8005022:	2320      	movs	r3, #32
 8005024:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005026:	683b      	ldr	r3, [r7, #0]
 8005028:	b2db      	uxtb	r3, r3
 800502a:	4619      	mov	r1, r3
 800502c:	6878      	ldr	r0, [r7, #4]
 800502e:	f015 fb47 	bl	801a6c0 <HAL_PCD_DataOutStageCallback>
 8005032:	e005      	b.n	8005040 <PCD_EP_OutXfrComplete_int+0x1fc>
    else
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005034:	683b      	ldr	r3, [r7, #0]
 8005036:	b2db      	uxtb	r3, r3
 8005038:	4619      	mov	r1, r3
 800503a:	6878      	ldr	r0, [r7, #4]
 800503c:	f015 fb40 	bl	801a6c0 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8005040:	2300      	movs	r3, #0
}
 8005042:	4618      	mov	r0, r3
 8005044:	3718      	adds	r7, #24
 8005046:	46bd      	mov	sp, r7
 8005048:	bd80      	pop	{r7, pc}
 800504a:	bf00      	nop
 800504c:	4f54300a 	.word	0x4f54300a
 8005050:	4f54310a 	.word	0x4f54310a

08005054 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005054:	b580      	push	{r7, lr}
 8005056:	b086      	sub	sp, #24
 8005058:	af00      	add	r7, sp, #0
 800505a:	6078      	str	r0, [r7, #4]
 800505c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005064:	697b      	ldr	r3, [r7, #20]
 8005066:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8005068:	697b      	ldr	r3, [r7, #20]
 800506a:	333c      	adds	r3, #60	; 0x3c
 800506c:	3304      	adds	r3, #4
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8005072:	683b      	ldr	r3, [r7, #0]
 8005074:	015a      	lsls	r2, r3, #5
 8005076:	693b      	ldr	r3, [r7, #16]
 8005078:	4413      	add	r3, r2
 800507a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800507e:	689b      	ldr	r3, [r3, #8]
 8005080:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	691b      	ldr	r3, [r3, #16]
 8005086:	2b01      	cmp	r3, #1
 8005088:	d113      	bne.n	80050b2 <PCD_EP_OutSetupPacket_int+0x5e>
  {
    /* StupPktRcvd = 1 pending setup packet int */
    if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	4a1f      	ldr	r2, [pc, #124]	; (800510c <PCD_EP_OutSetupPacket_int+0xb8>)
 800508e:	4293      	cmp	r3, r2
 8005090:	d922      	bls.n	80050d8 <PCD_EP_OutSetupPacket_int+0x84>
        ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8005092:	68bb      	ldr	r3, [r7, #8]
 8005094:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
    if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005098:	2b00      	cmp	r3, #0
 800509a:	d01d      	beq.n	80050d8 <PCD_EP_OutSetupPacket_int+0x84>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800509c:	683b      	ldr	r3, [r7, #0]
 800509e:	015a      	lsls	r2, r3, #5
 80050a0:	693b      	ldr	r3, [r7, #16]
 80050a2:	4413      	add	r3, r2
 80050a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80050a8:	461a      	mov	r2, r3
 80050aa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80050ae:	6093      	str	r3, [r2, #8]
 80050b0:	e012      	b.n	80050d8 <PCD_EP_OutSetupPacket_int+0x84>
    }
  }
  else
  {
    if ((gSNPSiD == USB_OTG_CORE_ID_310A) &&
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	4a16      	ldr	r2, [pc, #88]	; (8005110 <PCD_EP_OutSetupPacket_int+0xbc>)
 80050b6:	4293      	cmp	r3, r2
 80050b8:	d10e      	bne.n	80050d8 <PCD_EP_OutSetupPacket_int+0x84>
        ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80050ba:	68bb      	ldr	r3, [r7, #8]
 80050bc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
    if ((gSNPSiD == USB_OTG_CORE_ID_310A) &&
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d009      	beq.n	80050d8 <PCD_EP_OutSetupPacket_int+0x84>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80050c4:	683b      	ldr	r3, [r7, #0]
 80050c6:	015a      	lsls	r2, r3, #5
 80050c8:	693b      	ldr	r3, [r7, #16]
 80050ca:	4413      	add	r3, r2
 80050cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80050d0:	461a      	mov	r2, r3
 80050d2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80050d6:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80050d8:	6878      	ldr	r0, [r7, #4]
 80050da:	f015 fadf 	bl	801a69c <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	4a0a      	ldr	r2, [pc, #40]	; (800510c <PCD_EP_OutSetupPacket_int+0xb8>)
 80050e2:	4293      	cmp	r3, r2
 80050e4:	d90c      	bls.n	8005100 <PCD_EP_OutSetupPacket_int+0xac>
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	691b      	ldr	r3, [r3, #16]
 80050ea:	2b01      	cmp	r3, #1
 80050ec:	d108      	bne.n	8005100 <PCD_EP_OutSetupPacket_int+0xac>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	6818      	ldr	r0, [r3, #0]
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80050f8:	461a      	mov	r2, r3
 80050fa:	2101      	movs	r1, #1
 80050fc:	f004 f8d2 	bl	80092a4 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8005100:	2300      	movs	r3, #0
}
 8005102:	4618      	mov	r0, r3
 8005104:	3718      	adds	r7, #24
 8005106:	46bd      	mov	sp, r7
 8005108:	bd80      	pop	{r7, pc}
 800510a:	bf00      	nop
 800510c:	4f54300a 	.word	0x4f54300a
 8005110:	4f54310a 	.word	0x4f54310a

08005114 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8005114:	b480      	push	{r7}
 8005116:	b085      	sub	sp, #20
 8005118:	af00      	add	r7, sp, #0
 800511a:	6078      	str	r0, [r7, #4]
 800511c:	460b      	mov	r3, r1
 800511e:	70fb      	strb	r3, [r7, #3]
 8005120:	4613      	mov	r3, r2
 8005122:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800512a:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 800512c:	78fb      	ldrb	r3, [r7, #3]
 800512e:	2b00      	cmp	r3, #0
 8005130:	d107      	bne.n	8005142 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8005132:	883b      	ldrh	r3, [r7, #0]
 8005134:	0419      	lsls	r1, r3, #16
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	68ba      	ldr	r2, [r7, #8]
 800513c:	430a      	orrs	r2, r1
 800513e:	629a      	str	r2, [r3, #40]	; 0x28
 8005140:	e028      	b.n	8005194 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005148:	0c1b      	lsrs	r3, r3, #16
 800514a:	68ba      	ldr	r2, [r7, #8]
 800514c:	4413      	add	r3, r2
 800514e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8005150:	2300      	movs	r3, #0
 8005152:	73fb      	strb	r3, [r7, #15]
 8005154:	e00d      	b.n	8005172 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	681a      	ldr	r2, [r3, #0]
 800515a:	7bfb      	ldrb	r3, [r7, #15]
 800515c:	3340      	adds	r3, #64	; 0x40
 800515e:	009b      	lsls	r3, r3, #2
 8005160:	4413      	add	r3, r2
 8005162:	685b      	ldr	r3, [r3, #4]
 8005164:	0c1b      	lsrs	r3, r3, #16
 8005166:	68ba      	ldr	r2, [r7, #8]
 8005168:	4413      	add	r3, r2
 800516a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800516c:	7bfb      	ldrb	r3, [r7, #15]
 800516e:	3301      	adds	r3, #1
 8005170:	73fb      	strb	r3, [r7, #15]
 8005172:	7bfa      	ldrb	r2, [r7, #15]
 8005174:	78fb      	ldrb	r3, [r7, #3]
 8005176:	3b01      	subs	r3, #1
 8005178:	429a      	cmp	r2, r3
 800517a:	d3ec      	bcc.n	8005156 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 800517c:	883b      	ldrh	r3, [r7, #0]
 800517e:	0418      	lsls	r0, r3, #16
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	6819      	ldr	r1, [r3, #0]
 8005184:	78fb      	ldrb	r3, [r7, #3]
 8005186:	3b01      	subs	r3, #1
 8005188:	68ba      	ldr	r2, [r7, #8]
 800518a:	4302      	orrs	r2, r0
 800518c:	3340      	adds	r3, #64	; 0x40
 800518e:	009b      	lsls	r3, r3, #2
 8005190:	440b      	add	r3, r1
 8005192:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8005194:	2300      	movs	r3, #0
}
 8005196:	4618      	mov	r0, r3
 8005198:	3714      	adds	r7, #20
 800519a:	46bd      	mov	sp, r7
 800519c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051a0:	4770      	bx	lr

080051a2 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80051a2:	b480      	push	{r7}
 80051a4:	b083      	sub	sp, #12
 80051a6:	af00      	add	r7, sp, #0
 80051a8:	6078      	str	r0, [r7, #4]
 80051aa:	460b      	mov	r3, r1
 80051ac:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	887a      	ldrh	r2, [r7, #2]
 80051b4:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80051b6:	2300      	movs	r3, #0
}
 80051b8:	4618      	mov	r0, r3
 80051ba:	370c      	adds	r7, #12
 80051bc:	46bd      	mov	sp, r7
 80051be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051c2:	4770      	bx	lr

080051c4 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80051c4:	b480      	push	{r7}
 80051c6:	b083      	sub	sp, #12
 80051c8:	af00      	add	r7, sp, #0
 80051ca:	6078      	str	r0, [r7, #4]
 80051cc:	460b      	mov	r3, r1
 80051ce:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80051d0:	bf00      	nop
 80051d2:	370c      	adds	r7, #12
 80051d4:	46bd      	mov	sp, r7
 80051d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051da:	4770      	bx	lr

080051dc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80051dc:	b580      	push	{r7, lr}
 80051de:	b086      	sub	sp, #24
 80051e0:	af00      	add	r7, sp, #0
 80051e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d101      	bne.n	80051ee <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80051ea:	2301      	movs	r3, #1
 80051ec:	e22d      	b.n	800564a <HAL_RCC_OscConfig+0x46e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	f003 0301 	and.w	r3, r3, #1
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d075      	beq.n	80052e6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80051fa:	4ba3      	ldr	r3, [pc, #652]	; (8005488 <HAL_RCC_OscConfig+0x2ac>)
 80051fc:	689b      	ldr	r3, [r3, #8]
 80051fe:	f003 030c 	and.w	r3, r3, #12
 8005202:	2b04      	cmp	r3, #4
 8005204:	d00c      	beq.n	8005220 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005206:	4ba0      	ldr	r3, [pc, #640]	; (8005488 <HAL_RCC_OscConfig+0x2ac>)
 8005208:	689b      	ldr	r3, [r3, #8]
 800520a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800520e:	2b08      	cmp	r3, #8
 8005210:	d112      	bne.n	8005238 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005212:	4b9d      	ldr	r3, [pc, #628]	; (8005488 <HAL_RCC_OscConfig+0x2ac>)
 8005214:	685b      	ldr	r3, [r3, #4]
 8005216:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800521a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800521e:	d10b      	bne.n	8005238 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005220:	4b99      	ldr	r3, [pc, #612]	; (8005488 <HAL_RCC_OscConfig+0x2ac>)
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005228:	2b00      	cmp	r3, #0
 800522a:	d05b      	beq.n	80052e4 <HAL_RCC_OscConfig+0x108>
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	685b      	ldr	r3, [r3, #4]
 8005230:	2b00      	cmp	r3, #0
 8005232:	d157      	bne.n	80052e4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005234:	2301      	movs	r3, #1
 8005236:	e208      	b.n	800564a <HAL_RCC_OscConfig+0x46e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	685b      	ldr	r3, [r3, #4]
 800523c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005240:	d106      	bne.n	8005250 <HAL_RCC_OscConfig+0x74>
 8005242:	4b91      	ldr	r3, [pc, #580]	; (8005488 <HAL_RCC_OscConfig+0x2ac>)
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	4a90      	ldr	r2, [pc, #576]	; (8005488 <HAL_RCC_OscConfig+0x2ac>)
 8005248:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800524c:	6013      	str	r3, [r2, #0]
 800524e:	e01d      	b.n	800528c <HAL_RCC_OscConfig+0xb0>
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	685b      	ldr	r3, [r3, #4]
 8005254:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005258:	d10c      	bne.n	8005274 <HAL_RCC_OscConfig+0x98>
 800525a:	4b8b      	ldr	r3, [pc, #556]	; (8005488 <HAL_RCC_OscConfig+0x2ac>)
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	4a8a      	ldr	r2, [pc, #552]	; (8005488 <HAL_RCC_OscConfig+0x2ac>)
 8005260:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005264:	6013      	str	r3, [r2, #0]
 8005266:	4b88      	ldr	r3, [pc, #544]	; (8005488 <HAL_RCC_OscConfig+0x2ac>)
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	4a87      	ldr	r2, [pc, #540]	; (8005488 <HAL_RCC_OscConfig+0x2ac>)
 800526c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005270:	6013      	str	r3, [r2, #0]
 8005272:	e00b      	b.n	800528c <HAL_RCC_OscConfig+0xb0>
 8005274:	4b84      	ldr	r3, [pc, #528]	; (8005488 <HAL_RCC_OscConfig+0x2ac>)
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	4a83      	ldr	r2, [pc, #524]	; (8005488 <HAL_RCC_OscConfig+0x2ac>)
 800527a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800527e:	6013      	str	r3, [r2, #0]
 8005280:	4b81      	ldr	r3, [pc, #516]	; (8005488 <HAL_RCC_OscConfig+0x2ac>)
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	4a80      	ldr	r2, [pc, #512]	; (8005488 <HAL_RCC_OscConfig+0x2ac>)
 8005286:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800528a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	685b      	ldr	r3, [r3, #4]
 8005290:	2b00      	cmp	r3, #0
 8005292:	d013      	beq.n	80052bc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005294:	f7fd fb10 	bl	80028b8 <HAL_GetTick>
 8005298:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800529a:	e008      	b.n	80052ae <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800529c:	f7fd fb0c 	bl	80028b8 <HAL_GetTick>
 80052a0:	4602      	mov	r2, r0
 80052a2:	693b      	ldr	r3, [r7, #16]
 80052a4:	1ad3      	subs	r3, r2, r3
 80052a6:	2b64      	cmp	r3, #100	; 0x64
 80052a8:	d901      	bls.n	80052ae <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80052aa:	2303      	movs	r3, #3
 80052ac:	e1cd      	b.n	800564a <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80052ae:	4b76      	ldr	r3, [pc, #472]	; (8005488 <HAL_RCC_OscConfig+0x2ac>)
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d0f0      	beq.n	800529c <HAL_RCC_OscConfig+0xc0>
 80052ba:	e014      	b.n	80052e6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80052bc:	f7fd fafc 	bl	80028b8 <HAL_GetTick>
 80052c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80052c2:	e008      	b.n	80052d6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80052c4:	f7fd faf8 	bl	80028b8 <HAL_GetTick>
 80052c8:	4602      	mov	r2, r0
 80052ca:	693b      	ldr	r3, [r7, #16]
 80052cc:	1ad3      	subs	r3, r2, r3
 80052ce:	2b64      	cmp	r3, #100	; 0x64
 80052d0:	d901      	bls.n	80052d6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80052d2:	2303      	movs	r3, #3
 80052d4:	e1b9      	b.n	800564a <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80052d6:	4b6c      	ldr	r3, [pc, #432]	; (8005488 <HAL_RCC_OscConfig+0x2ac>)
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d1f0      	bne.n	80052c4 <HAL_RCC_OscConfig+0xe8>
 80052e2:	e000      	b.n	80052e6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80052e4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	f003 0302 	and.w	r3, r3, #2
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d063      	beq.n	80053ba <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80052f2:	4b65      	ldr	r3, [pc, #404]	; (8005488 <HAL_RCC_OscConfig+0x2ac>)
 80052f4:	689b      	ldr	r3, [r3, #8]
 80052f6:	f003 030c 	and.w	r3, r3, #12
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d00b      	beq.n	8005316 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80052fe:	4b62      	ldr	r3, [pc, #392]	; (8005488 <HAL_RCC_OscConfig+0x2ac>)
 8005300:	689b      	ldr	r3, [r3, #8]
 8005302:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005306:	2b08      	cmp	r3, #8
 8005308:	d11c      	bne.n	8005344 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800530a:	4b5f      	ldr	r3, [pc, #380]	; (8005488 <HAL_RCC_OscConfig+0x2ac>)
 800530c:	685b      	ldr	r3, [r3, #4]
 800530e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005312:	2b00      	cmp	r3, #0
 8005314:	d116      	bne.n	8005344 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005316:	4b5c      	ldr	r3, [pc, #368]	; (8005488 <HAL_RCC_OscConfig+0x2ac>)
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	f003 0302 	and.w	r3, r3, #2
 800531e:	2b00      	cmp	r3, #0
 8005320:	d005      	beq.n	800532e <HAL_RCC_OscConfig+0x152>
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	68db      	ldr	r3, [r3, #12]
 8005326:	2b01      	cmp	r3, #1
 8005328:	d001      	beq.n	800532e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800532a:	2301      	movs	r3, #1
 800532c:	e18d      	b.n	800564a <HAL_RCC_OscConfig+0x46e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800532e:	4b56      	ldr	r3, [pc, #344]	; (8005488 <HAL_RCC_OscConfig+0x2ac>)
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	691b      	ldr	r3, [r3, #16]
 800533a:	00db      	lsls	r3, r3, #3
 800533c:	4952      	ldr	r1, [pc, #328]	; (8005488 <HAL_RCC_OscConfig+0x2ac>)
 800533e:	4313      	orrs	r3, r2
 8005340:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005342:	e03a      	b.n	80053ba <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	68db      	ldr	r3, [r3, #12]
 8005348:	2b00      	cmp	r3, #0
 800534a:	d020      	beq.n	800538e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800534c:	4b4f      	ldr	r3, [pc, #316]	; (800548c <HAL_RCC_OscConfig+0x2b0>)
 800534e:	2201      	movs	r2, #1
 8005350:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005352:	f7fd fab1 	bl	80028b8 <HAL_GetTick>
 8005356:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005358:	e008      	b.n	800536c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800535a:	f7fd faad 	bl	80028b8 <HAL_GetTick>
 800535e:	4602      	mov	r2, r0
 8005360:	693b      	ldr	r3, [r7, #16]
 8005362:	1ad3      	subs	r3, r2, r3
 8005364:	2b02      	cmp	r3, #2
 8005366:	d901      	bls.n	800536c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005368:	2303      	movs	r3, #3
 800536a:	e16e      	b.n	800564a <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800536c:	4b46      	ldr	r3, [pc, #280]	; (8005488 <HAL_RCC_OscConfig+0x2ac>)
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	f003 0302 	and.w	r3, r3, #2
 8005374:	2b00      	cmp	r3, #0
 8005376:	d0f0      	beq.n	800535a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005378:	4b43      	ldr	r3, [pc, #268]	; (8005488 <HAL_RCC_OscConfig+0x2ac>)
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	691b      	ldr	r3, [r3, #16]
 8005384:	00db      	lsls	r3, r3, #3
 8005386:	4940      	ldr	r1, [pc, #256]	; (8005488 <HAL_RCC_OscConfig+0x2ac>)
 8005388:	4313      	orrs	r3, r2
 800538a:	600b      	str	r3, [r1, #0]
 800538c:	e015      	b.n	80053ba <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800538e:	4b3f      	ldr	r3, [pc, #252]	; (800548c <HAL_RCC_OscConfig+0x2b0>)
 8005390:	2200      	movs	r2, #0
 8005392:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005394:	f7fd fa90 	bl	80028b8 <HAL_GetTick>
 8005398:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800539a:	e008      	b.n	80053ae <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800539c:	f7fd fa8c 	bl	80028b8 <HAL_GetTick>
 80053a0:	4602      	mov	r2, r0
 80053a2:	693b      	ldr	r3, [r7, #16]
 80053a4:	1ad3      	subs	r3, r2, r3
 80053a6:	2b02      	cmp	r3, #2
 80053a8:	d901      	bls.n	80053ae <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80053aa:	2303      	movs	r3, #3
 80053ac:	e14d      	b.n	800564a <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80053ae:	4b36      	ldr	r3, [pc, #216]	; (8005488 <HAL_RCC_OscConfig+0x2ac>)
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	f003 0302 	and.w	r3, r3, #2
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d1f0      	bne.n	800539c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	f003 0308 	and.w	r3, r3, #8
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d030      	beq.n	8005428 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	695b      	ldr	r3, [r3, #20]
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d016      	beq.n	80053fc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80053ce:	4b30      	ldr	r3, [pc, #192]	; (8005490 <HAL_RCC_OscConfig+0x2b4>)
 80053d0:	2201      	movs	r2, #1
 80053d2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80053d4:	f7fd fa70 	bl	80028b8 <HAL_GetTick>
 80053d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80053da:	e008      	b.n	80053ee <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80053dc:	f7fd fa6c 	bl	80028b8 <HAL_GetTick>
 80053e0:	4602      	mov	r2, r0
 80053e2:	693b      	ldr	r3, [r7, #16]
 80053e4:	1ad3      	subs	r3, r2, r3
 80053e6:	2b02      	cmp	r3, #2
 80053e8:	d901      	bls.n	80053ee <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80053ea:	2303      	movs	r3, #3
 80053ec:	e12d      	b.n	800564a <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80053ee:	4b26      	ldr	r3, [pc, #152]	; (8005488 <HAL_RCC_OscConfig+0x2ac>)
 80053f0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80053f2:	f003 0302 	and.w	r3, r3, #2
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d0f0      	beq.n	80053dc <HAL_RCC_OscConfig+0x200>
 80053fa:	e015      	b.n	8005428 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80053fc:	4b24      	ldr	r3, [pc, #144]	; (8005490 <HAL_RCC_OscConfig+0x2b4>)
 80053fe:	2200      	movs	r2, #0
 8005400:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005402:	f7fd fa59 	bl	80028b8 <HAL_GetTick>
 8005406:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005408:	e008      	b.n	800541c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800540a:	f7fd fa55 	bl	80028b8 <HAL_GetTick>
 800540e:	4602      	mov	r2, r0
 8005410:	693b      	ldr	r3, [r7, #16]
 8005412:	1ad3      	subs	r3, r2, r3
 8005414:	2b02      	cmp	r3, #2
 8005416:	d901      	bls.n	800541c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8005418:	2303      	movs	r3, #3
 800541a:	e116      	b.n	800564a <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800541c:	4b1a      	ldr	r3, [pc, #104]	; (8005488 <HAL_RCC_OscConfig+0x2ac>)
 800541e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005420:	f003 0302 	and.w	r3, r3, #2
 8005424:	2b00      	cmp	r3, #0
 8005426:	d1f0      	bne.n	800540a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	f003 0304 	and.w	r3, r3, #4
 8005430:	2b00      	cmp	r3, #0
 8005432:	f000 80a0 	beq.w	8005576 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005436:	2300      	movs	r3, #0
 8005438:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800543a:	4b13      	ldr	r3, [pc, #76]	; (8005488 <HAL_RCC_OscConfig+0x2ac>)
 800543c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800543e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005442:	2b00      	cmp	r3, #0
 8005444:	d10f      	bne.n	8005466 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005446:	2300      	movs	r3, #0
 8005448:	60fb      	str	r3, [r7, #12]
 800544a:	4b0f      	ldr	r3, [pc, #60]	; (8005488 <HAL_RCC_OscConfig+0x2ac>)
 800544c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800544e:	4a0e      	ldr	r2, [pc, #56]	; (8005488 <HAL_RCC_OscConfig+0x2ac>)
 8005450:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005454:	6413      	str	r3, [r2, #64]	; 0x40
 8005456:	4b0c      	ldr	r3, [pc, #48]	; (8005488 <HAL_RCC_OscConfig+0x2ac>)
 8005458:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800545a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800545e:	60fb      	str	r3, [r7, #12]
 8005460:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8005462:	2301      	movs	r3, #1
 8005464:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005466:	4b0b      	ldr	r3, [pc, #44]	; (8005494 <HAL_RCC_OscConfig+0x2b8>)
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800546e:	2b00      	cmp	r3, #0
 8005470:	d121      	bne.n	80054b6 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005472:	4b08      	ldr	r3, [pc, #32]	; (8005494 <HAL_RCC_OscConfig+0x2b8>)
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	4a07      	ldr	r2, [pc, #28]	; (8005494 <HAL_RCC_OscConfig+0x2b8>)
 8005478:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800547c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800547e:	f7fd fa1b 	bl	80028b8 <HAL_GetTick>
 8005482:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005484:	e011      	b.n	80054aa <HAL_RCC_OscConfig+0x2ce>
 8005486:	bf00      	nop
 8005488:	40023800 	.word	0x40023800
 800548c:	42470000 	.word	0x42470000
 8005490:	42470e80 	.word	0x42470e80
 8005494:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005498:	f7fd fa0e 	bl	80028b8 <HAL_GetTick>
 800549c:	4602      	mov	r2, r0
 800549e:	693b      	ldr	r3, [r7, #16]
 80054a0:	1ad3      	subs	r3, r2, r3
 80054a2:	2b02      	cmp	r3, #2
 80054a4:	d901      	bls.n	80054aa <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80054a6:	2303      	movs	r3, #3
 80054a8:	e0cf      	b.n	800564a <HAL_RCC_OscConfig+0x46e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80054aa:	4b6a      	ldr	r3, [pc, #424]	; (8005654 <HAL_RCC_OscConfig+0x478>)
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d0f0      	beq.n	8005498 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	689b      	ldr	r3, [r3, #8]
 80054ba:	2b01      	cmp	r3, #1
 80054bc:	d106      	bne.n	80054cc <HAL_RCC_OscConfig+0x2f0>
 80054be:	4b66      	ldr	r3, [pc, #408]	; (8005658 <HAL_RCC_OscConfig+0x47c>)
 80054c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80054c2:	4a65      	ldr	r2, [pc, #404]	; (8005658 <HAL_RCC_OscConfig+0x47c>)
 80054c4:	f043 0301 	orr.w	r3, r3, #1
 80054c8:	6713      	str	r3, [r2, #112]	; 0x70
 80054ca:	e01c      	b.n	8005506 <HAL_RCC_OscConfig+0x32a>
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	689b      	ldr	r3, [r3, #8]
 80054d0:	2b05      	cmp	r3, #5
 80054d2:	d10c      	bne.n	80054ee <HAL_RCC_OscConfig+0x312>
 80054d4:	4b60      	ldr	r3, [pc, #384]	; (8005658 <HAL_RCC_OscConfig+0x47c>)
 80054d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80054d8:	4a5f      	ldr	r2, [pc, #380]	; (8005658 <HAL_RCC_OscConfig+0x47c>)
 80054da:	f043 0304 	orr.w	r3, r3, #4
 80054de:	6713      	str	r3, [r2, #112]	; 0x70
 80054e0:	4b5d      	ldr	r3, [pc, #372]	; (8005658 <HAL_RCC_OscConfig+0x47c>)
 80054e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80054e4:	4a5c      	ldr	r2, [pc, #368]	; (8005658 <HAL_RCC_OscConfig+0x47c>)
 80054e6:	f043 0301 	orr.w	r3, r3, #1
 80054ea:	6713      	str	r3, [r2, #112]	; 0x70
 80054ec:	e00b      	b.n	8005506 <HAL_RCC_OscConfig+0x32a>
 80054ee:	4b5a      	ldr	r3, [pc, #360]	; (8005658 <HAL_RCC_OscConfig+0x47c>)
 80054f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80054f2:	4a59      	ldr	r2, [pc, #356]	; (8005658 <HAL_RCC_OscConfig+0x47c>)
 80054f4:	f023 0301 	bic.w	r3, r3, #1
 80054f8:	6713      	str	r3, [r2, #112]	; 0x70
 80054fa:	4b57      	ldr	r3, [pc, #348]	; (8005658 <HAL_RCC_OscConfig+0x47c>)
 80054fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80054fe:	4a56      	ldr	r2, [pc, #344]	; (8005658 <HAL_RCC_OscConfig+0x47c>)
 8005500:	f023 0304 	bic.w	r3, r3, #4
 8005504:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	689b      	ldr	r3, [r3, #8]
 800550a:	2b00      	cmp	r3, #0
 800550c:	d015      	beq.n	800553a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800550e:	f7fd f9d3 	bl	80028b8 <HAL_GetTick>
 8005512:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005514:	e00a      	b.n	800552c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005516:	f7fd f9cf 	bl	80028b8 <HAL_GetTick>
 800551a:	4602      	mov	r2, r0
 800551c:	693b      	ldr	r3, [r7, #16]
 800551e:	1ad3      	subs	r3, r2, r3
 8005520:	f241 3288 	movw	r2, #5000	; 0x1388
 8005524:	4293      	cmp	r3, r2
 8005526:	d901      	bls.n	800552c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8005528:	2303      	movs	r3, #3
 800552a:	e08e      	b.n	800564a <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800552c:	4b4a      	ldr	r3, [pc, #296]	; (8005658 <HAL_RCC_OscConfig+0x47c>)
 800552e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005530:	f003 0302 	and.w	r3, r3, #2
 8005534:	2b00      	cmp	r3, #0
 8005536:	d0ee      	beq.n	8005516 <HAL_RCC_OscConfig+0x33a>
 8005538:	e014      	b.n	8005564 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800553a:	f7fd f9bd 	bl	80028b8 <HAL_GetTick>
 800553e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005540:	e00a      	b.n	8005558 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005542:	f7fd f9b9 	bl	80028b8 <HAL_GetTick>
 8005546:	4602      	mov	r2, r0
 8005548:	693b      	ldr	r3, [r7, #16]
 800554a:	1ad3      	subs	r3, r2, r3
 800554c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005550:	4293      	cmp	r3, r2
 8005552:	d901      	bls.n	8005558 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8005554:	2303      	movs	r3, #3
 8005556:	e078      	b.n	800564a <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005558:	4b3f      	ldr	r3, [pc, #252]	; (8005658 <HAL_RCC_OscConfig+0x47c>)
 800555a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800555c:	f003 0302 	and.w	r3, r3, #2
 8005560:	2b00      	cmp	r3, #0
 8005562:	d1ee      	bne.n	8005542 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005564:	7dfb      	ldrb	r3, [r7, #23]
 8005566:	2b01      	cmp	r3, #1
 8005568:	d105      	bne.n	8005576 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800556a:	4b3b      	ldr	r3, [pc, #236]	; (8005658 <HAL_RCC_OscConfig+0x47c>)
 800556c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800556e:	4a3a      	ldr	r2, [pc, #232]	; (8005658 <HAL_RCC_OscConfig+0x47c>)
 8005570:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005574:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	699b      	ldr	r3, [r3, #24]
 800557a:	2b00      	cmp	r3, #0
 800557c:	d064      	beq.n	8005648 <HAL_RCC_OscConfig+0x46c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800557e:	4b36      	ldr	r3, [pc, #216]	; (8005658 <HAL_RCC_OscConfig+0x47c>)
 8005580:	689b      	ldr	r3, [r3, #8]
 8005582:	f003 030c 	and.w	r3, r3, #12
 8005586:	2b08      	cmp	r3, #8
 8005588:	d05c      	beq.n	8005644 <HAL_RCC_OscConfig+0x468>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	699b      	ldr	r3, [r3, #24]
 800558e:	2b02      	cmp	r3, #2
 8005590:	d141      	bne.n	8005616 <HAL_RCC_OscConfig+0x43a>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005592:	4b32      	ldr	r3, [pc, #200]	; (800565c <HAL_RCC_OscConfig+0x480>)
 8005594:	2200      	movs	r2, #0
 8005596:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005598:	f7fd f98e 	bl	80028b8 <HAL_GetTick>
 800559c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800559e:	e008      	b.n	80055b2 <HAL_RCC_OscConfig+0x3d6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80055a0:	f7fd f98a 	bl	80028b8 <HAL_GetTick>
 80055a4:	4602      	mov	r2, r0
 80055a6:	693b      	ldr	r3, [r7, #16]
 80055a8:	1ad3      	subs	r3, r2, r3
 80055aa:	2b02      	cmp	r3, #2
 80055ac:	d901      	bls.n	80055b2 <HAL_RCC_OscConfig+0x3d6>
          {
            return HAL_TIMEOUT;
 80055ae:	2303      	movs	r3, #3
 80055b0:	e04b      	b.n	800564a <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80055b2:	4b29      	ldr	r3, [pc, #164]	; (8005658 <HAL_RCC_OscConfig+0x47c>)
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d1f0      	bne.n	80055a0 <HAL_RCC_OscConfig+0x3c4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	69da      	ldr	r2, [r3, #28]
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	6a1b      	ldr	r3, [r3, #32]
 80055c6:	431a      	orrs	r2, r3
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055cc:	019b      	lsls	r3, r3, #6
 80055ce:	431a      	orrs	r2, r3
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055d4:	085b      	lsrs	r3, r3, #1
 80055d6:	3b01      	subs	r3, #1
 80055d8:	041b      	lsls	r3, r3, #16
 80055da:	431a      	orrs	r2, r3
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055e0:	061b      	lsls	r3, r3, #24
 80055e2:	491d      	ldr	r1, [pc, #116]	; (8005658 <HAL_RCC_OscConfig+0x47c>)
 80055e4:	4313      	orrs	r3, r2
 80055e6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80055e8:	4b1c      	ldr	r3, [pc, #112]	; (800565c <HAL_RCC_OscConfig+0x480>)
 80055ea:	2201      	movs	r2, #1
 80055ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80055ee:	f7fd f963 	bl	80028b8 <HAL_GetTick>
 80055f2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80055f4:	e008      	b.n	8005608 <HAL_RCC_OscConfig+0x42c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80055f6:	f7fd f95f 	bl	80028b8 <HAL_GetTick>
 80055fa:	4602      	mov	r2, r0
 80055fc:	693b      	ldr	r3, [r7, #16]
 80055fe:	1ad3      	subs	r3, r2, r3
 8005600:	2b02      	cmp	r3, #2
 8005602:	d901      	bls.n	8005608 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 8005604:	2303      	movs	r3, #3
 8005606:	e020      	b.n	800564a <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005608:	4b13      	ldr	r3, [pc, #76]	; (8005658 <HAL_RCC_OscConfig+0x47c>)
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005610:	2b00      	cmp	r3, #0
 8005612:	d0f0      	beq.n	80055f6 <HAL_RCC_OscConfig+0x41a>
 8005614:	e018      	b.n	8005648 <HAL_RCC_OscConfig+0x46c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005616:	4b11      	ldr	r3, [pc, #68]	; (800565c <HAL_RCC_OscConfig+0x480>)
 8005618:	2200      	movs	r2, #0
 800561a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800561c:	f7fd f94c 	bl	80028b8 <HAL_GetTick>
 8005620:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005622:	e008      	b.n	8005636 <HAL_RCC_OscConfig+0x45a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005624:	f7fd f948 	bl	80028b8 <HAL_GetTick>
 8005628:	4602      	mov	r2, r0
 800562a:	693b      	ldr	r3, [r7, #16]
 800562c:	1ad3      	subs	r3, r2, r3
 800562e:	2b02      	cmp	r3, #2
 8005630:	d901      	bls.n	8005636 <HAL_RCC_OscConfig+0x45a>
          {
            return HAL_TIMEOUT;
 8005632:	2303      	movs	r3, #3
 8005634:	e009      	b.n	800564a <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005636:	4b08      	ldr	r3, [pc, #32]	; (8005658 <HAL_RCC_OscConfig+0x47c>)
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800563e:	2b00      	cmp	r3, #0
 8005640:	d1f0      	bne.n	8005624 <HAL_RCC_OscConfig+0x448>
 8005642:	e001      	b.n	8005648 <HAL_RCC_OscConfig+0x46c>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8005644:	2301      	movs	r3, #1
 8005646:	e000      	b.n	800564a <HAL_RCC_OscConfig+0x46e>
    }
  }
  return HAL_OK;
 8005648:	2300      	movs	r3, #0
}
 800564a:	4618      	mov	r0, r3
 800564c:	3718      	adds	r7, #24
 800564e:	46bd      	mov	sp, r7
 8005650:	bd80      	pop	{r7, pc}
 8005652:	bf00      	nop
 8005654:	40007000 	.word	0x40007000
 8005658:	40023800 	.word	0x40023800
 800565c:	42470060 	.word	0x42470060

08005660 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005660:	b580      	push	{r7, lr}
 8005662:	b084      	sub	sp, #16
 8005664:	af00      	add	r7, sp, #0
 8005666:	6078      	str	r0, [r7, #4]
 8005668:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	2b00      	cmp	r3, #0
 800566e:	d101      	bne.n	8005674 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005670:	2301      	movs	r3, #1
 8005672:	e0ca      	b.n	800580a <HAL_RCC_ClockConfig+0x1aa>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005674:	4b67      	ldr	r3, [pc, #412]	; (8005814 <HAL_RCC_ClockConfig+0x1b4>)
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	f003 030f 	and.w	r3, r3, #15
 800567c:	683a      	ldr	r2, [r7, #0]
 800567e:	429a      	cmp	r2, r3
 8005680:	d90c      	bls.n	800569c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005682:	4b64      	ldr	r3, [pc, #400]	; (8005814 <HAL_RCC_ClockConfig+0x1b4>)
 8005684:	683a      	ldr	r2, [r7, #0]
 8005686:	b2d2      	uxtb	r2, r2
 8005688:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800568a:	4b62      	ldr	r3, [pc, #392]	; (8005814 <HAL_RCC_ClockConfig+0x1b4>)
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	f003 030f 	and.w	r3, r3, #15
 8005692:	683a      	ldr	r2, [r7, #0]
 8005694:	429a      	cmp	r2, r3
 8005696:	d001      	beq.n	800569c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005698:	2301      	movs	r3, #1
 800569a:	e0b6      	b.n	800580a <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	f003 0302 	and.w	r3, r3, #2
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d020      	beq.n	80056ea <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	f003 0304 	and.w	r3, r3, #4
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d005      	beq.n	80056c0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80056b4:	4b58      	ldr	r3, [pc, #352]	; (8005818 <HAL_RCC_ClockConfig+0x1b8>)
 80056b6:	689b      	ldr	r3, [r3, #8]
 80056b8:	4a57      	ldr	r2, [pc, #348]	; (8005818 <HAL_RCC_ClockConfig+0x1b8>)
 80056ba:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80056be:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	f003 0308 	and.w	r3, r3, #8
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d005      	beq.n	80056d8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80056cc:	4b52      	ldr	r3, [pc, #328]	; (8005818 <HAL_RCC_ClockConfig+0x1b8>)
 80056ce:	689b      	ldr	r3, [r3, #8]
 80056d0:	4a51      	ldr	r2, [pc, #324]	; (8005818 <HAL_RCC_ClockConfig+0x1b8>)
 80056d2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80056d6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80056d8:	4b4f      	ldr	r3, [pc, #316]	; (8005818 <HAL_RCC_ClockConfig+0x1b8>)
 80056da:	689b      	ldr	r3, [r3, #8]
 80056dc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	689b      	ldr	r3, [r3, #8]
 80056e4:	494c      	ldr	r1, [pc, #304]	; (8005818 <HAL_RCC_ClockConfig+0x1b8>)
 80056e6:	4313      	orrs	r3, r2
 80056e8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	f003 0301 	and.w	r3, r3, #1
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d044      	beq.n	8005780 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	685b      	ldr	r3, [r3, #4]
 80056fa:	2b01      	cmp	r3, #1
 80056fc:	d107      	bne.n	800570e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80056fe:	4b46      	ldr	r3, [pc, #280]	; (8005818 <HAL_RCC_ClockConfig+0x1b8>)
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005706:	2b00      	cmp	r3, #0
 8005708:	d119      	bne.n	800573e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800570a:	2301      	movs	r3, #1
 800570c:	e07d      	b.n	800580a <HAL_RCC_ClockConfig+0x1aa>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	685b      	ldr	r3, [r3, #4]
 8005712:	2b02      	cmp	r3, #2
 8005714:	d003      	beq.n	800571e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800571a:	2b03      	cmp	r3, #3
 800571c:	d107      	bne.n	800572e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800571e:	4b3e      	ldr	r3, [pc, #248]	; (8005818 <HAL_RCC_ClockConfig+0x1b8>)
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005726:	2b00      	cmp	r3, #0
 8005728:	d109      	bne.n	800573e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800572a:	2301      	movs	r3, #1
 800572c:	e06d      	b.n	800580a <HAL_RCC_ClockConfig+0x1aa>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800572e:	4b3a      	ldr	r3, [pc, #232]	; (8005818 <HAL_RCC_ClockConfig+0x1b8>)
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	f003 0302 	and.w	r3, r3, #2
 8005736:	2b00      	cmp	r3, #0
 8005738:	d101      	bne.n	800573e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800573a:	2301      	movs	r3, #1
 800573c:	e065      	b.n	800580a <HAL_RCC_ClockConfig+0x1aa>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800573e:	4b36      	ldr	r3, [pc, #216]	; (8005818 <HAL_RCC_ClockConfig+0x1b8>)
 8005740:	689b      	ldr	r3, [r3, #8]
 8005742:	f023 0203 	bic.w	r2, r3, #3
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	685b      	ldr	r3, [r3, #4]
 800574a:	4933      	ldr	r1, [pc, #204]	; (8005818 <HAL_RCC_ClockConfig+0x1b8>)
 800574c:	4313      	orrs	r3, r2
 800574e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005750:	f7fd f8b2 	bl	80028b8 <HAL_GetTick>
 8005754:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005756:	e00a      	b.n	800576e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005758:	f7fd f8ae 	bl	80028b8 <HAL_GetTick>
 800575c:	4602      	mov	r2, r0
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	1ad3      	subs	r3, r2, r3
 8005762:	f241 3288 	movw	r2, #5000	; 0x1388
 8005766:	4293      	cmp	r3, r2
 8005768:	d901      	bls.n	800576e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800576a:	2303      	movs	r3, #3
 800576c:	e04d      	b.n	800580a <HAL_RCC_ClockConfig+0x1aa>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800576e:	4b2a      	ldr	r3, [pc, #168]	; (8005818 <HAL_RCC_ClockConfig+0x1b8>)
 8005770:	689b      	ldr	r3, [r3, #8]
 8005772:	f003 020c 	and.w	r2, r3, #12
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	685b      	ldr	r3, [r3, #4]
 800577a:	009b      	lsls	r3, r3, #2
 800577c:	429a      	cmp	r2, r3
 800577e:	d1eb      	bne.n	8005758 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005780:	4b24      	ldr	r3, [pc, #144]	; (8005814 <HAL_RCC_ClockConfig+0x1b4>)
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	f003 030f 	and.w	r3, r3, #15
 8005788:	683a      	ldr	r2, [r7, #0]
 800578a:	429a      	cmp	r2, r3
 800578c:	d20c      	bcs.n	80057a8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800578e:	4b21      	ldr	r3, [pc, #132]	; (8005814 <HAL_RCC_ClockConfig+0x1b4>)
 8005790:	683a      	ldr	r2, [r7, #0]
 8005792:	b2d2      	uxtb	r2, r2
 8005794:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005796:	4b1f      	ldr	r3, [pc, #124]	; (8005814 <HAL_RCC_ClockConfig+0x1b4>)
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	f003 030f 	and.w	r3, r3, #15
 800579e:	683a      	ldr	r2, [r7, #0]
 80057a0:	429a      	cmp	r2, r3
 80057a2:	d001      	beq.n	80057a8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80057a4:	2301      	movs	r3, #1
 80057a6:	e030      	b.n	800580a <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	f003 0304 	and.w	r3, r3, #4
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	d008      	beq.n	80057c6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80057b4:	4b18      	ldr	r3, [pc, #96]	; (8005818 <HAL_RCC_ClockConfig+0x1b8>)
 80057b6:	689b      	ldr	r3, [r3, #8]
 80057b8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	68db      	ldr	r3, [r3, #12]
 80057c0:	4915      	ldr	r1, [pc, #84]	; (8005818 <HAL_RCC_ClockConfig+0x1b8>)
 80057c2:	4313      	orrs	r3, r2
 80057c4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	f003 0308 	and.w	r3, r3, #8
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d009      	beq.n	80057e6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80057d2:	4b11      	ldr	r3, [pc, #68]	; (8005818 <HAL_RCC_ClockConfig+0x1b8>)
 80057d4:	689b      	ldr	r3, [r3, #8]
 80057d6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	691b      	ldr	r3, [r3, #16]
 80057de:	00db      	lsls	r3, r3, #3
 80057e0:	490d      	ldr	r1, [pc, #52]	; (8005818 <HAL_RCC_ClockConfig+0x1b8>)
 80057e2:	4313      	orrs	r3, r2
 80057e4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80057e6:	f000 f81d 	bl	8005824 <HAL_RCC_GetSysClockFreq>
 80057ea:	4601      	mov	r1, r0
 80057ec:	4b0a      	ldr	r3, [pc, #40]	; (8005818 <HAL_RCC_ClockConfig+0x1b8>)
 80057ee:	689b      	ldr	r3, [r3, #8]
 80057f0:	091b      	lsrs	r3, r3, #4
 80057f2:	f003 030f 	and.w	r3, r3, #15
 80057f6:	4a09      	ldr	r2, [pc, #36]	; (800581c <HAL_RCC_ClockConfig+0x1bc>)
 80057f8:	5cd3      	ldrb	r3, [r2, r3]
 80057fa:	fa21 f303 	lsr.w	r3, r1, r3
 80057fe:	4a08      	ldr	r2, [pc, #32]	; (8005820 <HAL_RCC_ClockConfig+0x1c0>)
 8005800:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (TICK_INT_PRIORITY);
 8005802:	2000      	movs	r0, #0
 8005804:	f7fc fa78 	bl	8001cf8 <HAL_InitTick>

  return HAL_OK;
 8005808:	2300      	movs	r3, #0
}
 800580a:	4618      	mov	r0, r3
 800580c:	3710      	adds	r7, #16
 800580e:	46bd      	mov	sp, r7
 8005810:	bd80      	pop	{r7, pc}
 8005812:	bf00      	nop
 8005814:	40023c00 	.word	0x40023c00
 8005818:	40023800 	.word	0x40023800
 800581c:	0801e6d8 	.word	0x0801e6d8
 8005820:	20000000 	.word	0x20000000

08005824 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005824:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005826:	b085      	sub	sp, #20
 8005828:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800582a:	2300      	movs	r3, #0
 800582c:	607b      	str	r3, [r7, #4]
 800582e:	2300      	movs	r3, #0
 8005830:	60fb      	str	r3, [r7, #12]
 8005832:	2300      	movs	r3, #0
 8005834:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8005836:	2300      	movs	r3, #0
 8005838:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800583a:	4b63      	ldr	r3, [pc, #396]	; (80059c8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800583c:	689b      	ldr	r3, [r3, #8]
 800583e:	f003 030c 	and.w	r3, r3, #12
 8005842:	2b04      	cmp	r3, #4
 8005844:	d007      	beq.n	8005856 <HAL_RCC_GetSysClockFreq+0x32>
 8005846:	2b08      	cmp	r3, #8
 8005848:	d008      	beq.n	800585c <HAL_RCC_GetSysClockFreq+0x38>
 800584a:	2b00      	cmp	r3, #0
 800584c:	f040 80b4 	bne.w	80059b8 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005850:	4b5e      	ldr	r3, [pc, #376]	; (80059cc <HAL_RCC_GetSysClockFreq+0x1a8>)
 8005852:	60bb      	str	r3, [r7, #8]
       break;
 8005854:	e0b3      	b.n	80059be <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005856:	4b5e      	ldr	r3, [pc, #376]	; (80059d0 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8005858:	60bb      	str	r3, [r7, #8]
      break;
 800585a:	e0b0      	b.n	80059be <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800585c:	4b5a      	ldr	r3, [pc, #360]	; (80059c8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800585e:	685b      	ldr	r3, [r3, #4]
 8005860:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005864:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005866:	4b58      	ldr	r3, [pc, #352]	; (80059c8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8005868:	685b      	ldr	r3, [r3, #4]
 800586a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800586e:	2b00      	cmp	r3, #0
 8005870:	d04a      	beq.n	8005908 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005872:	4b55      	ldr	r3, [pc, #340]	; (80059c8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8005874:	685b      	ldr	r3, [r3, #4]
 8005876:	099b      	lsrs	r3, r3, #6
 8005878:	f04f 0400 	mov.w	r4, #0
 800587c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8005880:	f04f 0200 	mov.w	r2, #0
 8005884:	ea03 0501 	and.w	r5, r3, r1
 8005888:	ea04 0602 	and.w	r6, r4, r2
 800588c:	4629      	mov	r1, r5
 800588e:	4632      	mov	r2, r6
 8005890:	f04f 0300 	mov.w	r3, #0
 8005894:	f04f 0400 	mov.w	r4, #0
 8005898:	0154      	lsls	r4, r2, #5
 800589a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800589e:	014b      	lsls	r3, r1, #5
 80058a0:	4619      	mov	r1, r3
 80058a2:	4622      	mov	r2, r4
 80058a4:	1b49      	subs	r1, r1, r5
 80058a6:	eb62 0206 	sbc.w	r2, r2, r6
 80058aa:	f04f 0300 	mov.w	r3, #0
 80058ae:	f04f 0400 	mov.w	r4, #0
 80058b2:	0194      	lsls	r4, r2, #6
 80058b4:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80058b8:	018b      	lsls	r3, r1, #6
 80058ba:	1a5b      	subs	r3, r3, r1
 80058bc:	eb64 0402 	sbc.w	r4, r4, r2
 80058c0:	f04f 0100 	mov.w	r1, #0
 80058c4:	f04f 0200 	mov.w	r2, #0
 80058c8:	00e2      	lsls	r2, r4, #3
 80058ca:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80058ce:	00d9      	lsls	r1, r3, #3
 80058d0:	460b      	mov	r3, r1
 80058d2:	4614      	mov	r4, r2
 80058d4:	195b      	adds	r3, r3, r5
 80058d6:	eb44 0406 	adc.w	r4, r4, r6
 80058da:	f04f 0100 	mov.w	r1, #0
 80058de:	f04f 0200 	mov.w	r2, #0
 80058e2:	0262      	lsls	r2, r4, #9
 80058e4:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 80058e8:	0259      	lsls	r1, r3, #9
 80058ea:	460b      	mov	r3, r1
 80058ec:	4614      	mov	r4, r2
 80058ee:	4618      	mov	r0, r3
 80058f0:	4621      	mov	r1, r4
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	f04f 0400 	mov.w	r4, #0
 80058f8:	461a      	mov	r2, r3
 80058fa:	4623      	mov	r3, r4
 80058fc:	f7fa fcc8 	bl	8000290 <__aeabi_uldivmod>
 8005900:	4603      	mov	r3, r0
 8005902:	460c      	mov	r4, r1
 8005904:	60fb      	str	r3, [r7, #12]
 8005906:	e049      	b.n	800599c <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005908:	4b2f      	ldr	r3, [pc, #188]	; (80059c8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800590a:	685b      	ldr	r3, [r3, #4]
 800590c:	099b      	lsrs	r3, r3, #6
 800590e:	f04f 0400 	mov.w	r4, #0
 8005912:	f240 11ff 	movw	r1, #511	; 0x1ff
 8005916:	f04f 0200 	mov.w	r2, #0
 800591a:	ea03 0501 	and.w	r5, r3, r1
 800591e:	ea04 0602 	and.w	r6, r4, r2
 8005922:	4629      	mov	r1, r5
 8005924:	4632      	mov	r2, r6
 8005926:	f04f 0300 	mov.w	r3, #0
 800592a:	f04f 0400 	mov.w	r4, #0
 800592e:	0154      	lsls	r4, r2, #5
 8005930:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8005934:	014b      	lsls	r3, r1, #5
 8005936:	4619      	mov	r1, r3
 8005938:	4622      	mov	r2, r4
 800593a:	1b49      	subs	r1, r1, r5
 800593c:	eb62 0206 	sbc.w	r2, r2, r6
 8005940:	f04f 0300 	mov.w	r3, #0
 8005944:	f04f 0400 	mov.w	r4, #0
 8005948:	0194      	lsls	r4, r2, #6
 800594a:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800594e:	018b      	lsls	r3, r1, #6
 8005950:	1a5b      	subs	r3, r3, r1
 8005952:	eb64 0402 	sbc.w	r4, r4, r2
 8005956:	f04f 0100 	mov.w	r1, #0
 800595a:	f04f 0200 	mov.w	r2, #0
 800595e:	00e2      	lsls	r2, r4, #3
 8005960:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8005964:	00d9      	lsls	r1, r3, #3
 8005966:	460b      	mov	r3, r1
 8005968:	4614      	mov	r4, r2
 800596a:	195b      	adds	r3, r3, r5
 800596c:	eb44 0406 	adc.w	r4, r4, r6
 8005970:	f04f 0100 	mov.w	r1, #0
 8005974:	f04f 0200 	mov.w	r2, #0
 8005978:	02a2      	lsls	r2, r4, #10
 800597a:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800597e:	0299      	lsls	r1, r3, #10
 8005980:	460b      	mov	r3, r1
 8005982:	4614      	mov	r4, r2
 8005984:	4618      	mov	r0, r3
 8005986:	4621      	mov	r1, r4
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	f04f 0400 	mov.w	r4, #0
 800598e:	461a      	mov	r2, r3
 8005990:	4623      	mov	r3, r4
 8005992:	f7fa fc7d 	bl	8000290 <__aeabi_uldivmod>
 8005996:	4603      	mov	r3, r0
 8005998:	460c      	mov	r4, r1
 800599a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800599c:	4b0a      	ldr	r3, [pc, #40]	; (80059c8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800599e:	685b      	ldr	r3, [r3, #4]
 80059a0:	0c1b      	lsrs	r3, r3, #16
 80059a2:	f003 0303 	and.w	r3, r3, #3
 80059a6:	3301      	adds	r3, #1
 80059a8:	005b      	lsls	r3, r3, #1
 80059aa:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80059ac:	68fa      	ldr	r2, [r7, #12]
 80059ae:	683b      	ldr	r3, [r7, #0]
 80059b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80059b4:	60bb      	str	r3, [r7, #8]
      break;
 80059b6:	e002      	b.n	80059be <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80059b8:	4b04      	ldr	r3, [pc, #16]	; (80059cc <HAL_RCC_GetSysClockFreq+0x1a8>)
 80059ba:	60bb      	str	r3, [r7, #8]
      break;
 80059bc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80059be:	68bb      	ldr	r3, [r7, #8]
}
 80059c0:	4618      	mov	r0, r3
 80059c2:	3714      	adds	r7, #20
 80059c4:	46bd      	mov	sp, r7
 80059c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80059c8:	40023800 	.word	0x40023800
 80059cc:	00f42400 	.word	0x00f42400
 80059d0:	007a1200 	.word	0x007a1200

080059d4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80059d4:	b480      	push	{r7}
 80059d6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80059d8:	4b03      	ldr	r3, [pc, #12]	; (80059e8 <HAL_RCC_GetHCLKFreq+0x14>)
 80059da:	681b      	ldr	r3, [r3, #0]
}
 80059dc:	4618      	mov	r0, r3
 80059de:	46bd      	mov	sp, r7
 80059e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059e4:	4770      	bx	lr
 80059e6:	bf00      	nop
 80059e8:	20000000 	.word	0x20000000

080059ec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80059ec:	b580      	push	{r7, lr}
 80059ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80059f0:	f7ff fff0 	bl	80059d4 <HAL_RCC_GetHCLKFreq>
 80059f4:	4601      	mov	r1, r0
 80059f6:	4b05      	ldr	r3, [pc, #20]	; (8005a0c <HAL_RCC_GetPCLK1Freq+0x20>)
 80059f8:	689b      	ldr	r3, [r3, #8]
 80059fa:	0a9b      	lsrs	r3, r3, #10
 80059fc:	f003 0307 	and.w	r3, r3, #7
 8005a00:	4a03      	ldr	r2, [pc, #12]	; (8005a10 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005a02:	5cd3      	ldrb	r3, [r2, r3]
 8005a04:	fa21 f303 	lsr.w	r3, r1, r3
}
 8005a08:	4618      	mov	r0, r3
 8005a0a:	bd80      	pop	{r7, pc}
 8005a0c:	40023800 	.word	0x40023800
 8005a10:	0801e6e8 	.word	0x0801e6e8

08005a14 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005a14:	b580      	push	{r7, lr}
 8005a16:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005a18:	f7ff ffdc 	bl	80059d4 <HAL_RCC_GetHCLKFreq>
 8005a1c:	4601      	mov	r1, r0
 8005a1e:	4b05      	ldr	r3, [pc, #20]	; (8005a34 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005a20:	689b      	ldr	r3, [r3, #8]
 8005a22:	0b5b      	lsrs	r3, r3, #13
 8005a24:	f003 0307 	and.w	r3, r3, #7
 8005a28:	4a03      	ldr	r2, [pc, #12]	; (8005a38 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005a2a:	5cd3      	ldrb	r3, [r2, r3]
 8005a2c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8005a30:	4618      	mov	r0, r3
 8005a32:	bd80      	pop	{r7, pc}
 8005a34:	40023800 	.word	0x40023800
 8005a38:	0801e6e8 	.word	0x0801e6e8

08005a3c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8005a3c:	b480      	push	{r7}
 8005a3e:	b083      	sub	sp, #12
 8005a40:	af00      	add	r7, sp, #0
 8005a42:	6078      	str	r0, [r7, #4]
 8005a44:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	220f      	movs	r2, #15
 8005a4a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8005a4c:	4b12      	ldr	r3, [pc, #72]	; (8005a98 <HAL_RCC_GetClockConfig+0x5c>)
 8005a4e:	689b      	ldr	r3, [r3, #8]
 8005a50:	f003 0203 	and.w	r2, r3, #3
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8005a58:	4b0f      	ldr	r3, [pc, #60]	; (8005a98 <HAL_RCC_GetClockConfig+0x5c>)
 8005a5a:	689b      	ldr	r3, [r3, #8]
 8005a5c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8005a64:	4b0c      	ldr	r3, [pc, #48]	; (8005a98 <HAL_RCC_GetClockConfig+0x5c>)
 8005a66:	689b      	ldr	r3, [r3, #8]
 8005a68:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8005a70:	4b09      	ldr	r3, [pc, #36]	; (8005a98 <HAL_RCC_GetClockConfig+0x5c>)
 8005a72:	689b      	ldr	r3, [r3, #8]
 8005a74:	08db      	lsrs	r3, r3, #3
 8005a76:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8005a7e:	4b07      	ldr	r3, [pc, #28]	; (8005a9c <HAL_RCC_GetClockConfig+0x60>)
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	f003 020f 	and.w	r2, r3, #15
 8005a86:	683b      	ldr	r3, [r7, #0]
 8005a88:	601a      	str	r2, [r3, #0]
}
 8005a8a:	bf00      	nop
 8005a8c:	370c      	adds	r7, #12
 8005a8e:	46bd      	mov	sp, r7
 8005a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a94:	4770      	bx	lr
 8005a96:	bf00      	nop
 8005a98:	40023800 	.word	0x40023800
 8005a9c:	40023c00 	.word	0x40023c00

08005aa0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005aa0:	b580      	push	{r7, lr}
 8005aa2:	b082      	sub	sp, #8
 8005aa4:	af00      	add	r7, sp, #0
 8005aa6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d101      	bne.n	8005ab2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005aae:	2301      	movs	r3, #1
 8005ab0:	e01d      	b.n	8005aee <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005ab8:	b2db      	uxtb	r3, r3
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d106      	bne.n	8005acc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	2200      	movs	r2, #0
 8005ac2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005ac6:	6878      	ldr	r0, [r7, #4]
 8005ac8:	f7fc fc76 	bl	80023b8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	2202      	movs	r2, #2
 8005ad0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	681a      	ldr	r2, [r3, #0]
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	3304      	adds	r3, #4
 8005adc:	4619      	mov	r1, r3
 8005ade:	4610      	mov	r0, r2
 8005ae0:	f000 fc20 	bl	8006324 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	2201      	movs	r2, #1
 8005ae8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005aec:	2300      	movs	r3, #0
}
 8005aee:	4618      	mov	r0, r3
 8005af0:	3708      	adds	r7, #8
 8005af2:	46bd      	mov	sp, r7
 8005af4:	bd80      	pop	{r7, pc}

08005af6 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005af6:	b480      	push	{r7}
 8005af8:	b085      	sub	sp, #20
 8005afa:	af00      	add	r7, sp, #0
 8005afc:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	68da      	ldr	r2, [r3, #12]
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	f042 0201 	orr.w	r2, r2, #1
 8005b0c:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	689b      	ldr	r3, [r3, #8]
 8005b14:	f003 0307 	and.w	r3, r3, #7
 8005b18:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	2b06      	cmp	r3, #6
 8005b1e:	d007      	beq.n	8005b30 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	681a      	ldr	r2, [r3, #0]
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	f042 0201 	orr.w	r2, r2, #1
 8005b2e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005b30:	2300      	movs	r3, #0
}
 8005b32:	4618      	mov	r0, r3
 8005b34:	3714      	adds	r7, #20
 8005b36:	46bd      	mov	sp, r7
 8005b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b3c:	4770      	bx	lr

08005b3e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005b3e:	b580      	push	{r7, lr}
 8005b40:	b082      	sub	sp, #8
 8005b42:	af00      	add	r7, sp, #0
 8005b44:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d101      	bne.n	8005b50 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005b4c:	2301      	movs	r3, #1
 8005b4e:	e01d      	b.n	8005b8c <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005b56:	b2db      	uxtb	r3, r3
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	d106      	bne.n	8005b6a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	2200      	movs	r2, #0
 8005b60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005b64:	6878      	ldr	r0, [r7, #4]
 8005b66:	f000 f815 	bl	8005b94 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	2202      	movs	r2, #2
 8005b6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	681a      	ldr	r2, [r3, #0]
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	3304      	adds	r3, #4
 8005b7a:	4619      	mov	r1, r3
 8005b7c:	4610      	mov	r0, r2
 8005b7e:	f000 fbd1 	bl	8006324 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	2201      	movs	r2, #1
 8005b86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005b8a:	2300      	movs	r3, #0
}
 8005b8c:	4618      	mov	r0, r3
 8005b8e:	3708      	adds	r7, #8
 8005b90:	46bd      	mov	sp, r7
 8005b92:	bd80      	pop	{r7, pc}

08005b94 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005b94:	b480      	push	{r7}
 8005b96:	b083      	sub	sp, #12
 8005b98:	af00      	add	r7, sp, #0
 8005b9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005b9c:	bf00      	nop
 8005b9e:	370c      	adds	r7, #12
 8005ba0:	46bd      	mov	sp, r7
 8005ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ba6:	4770      	bx	lr

08005ba8 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8005ba8:	b580      	push	{r7, lr}
 8005baa:	b086      	sub	sp, #24
 8005bac:	af00      	add	r7, sp, #0
 8005bae:	6078      	str	r0, [r7, #4]
 8005bb0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	d101      	bne.n	8005bbc <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8005bb8:	2301      	movs	r3, #1
 8005bba:	e083      	b.n	8005cc4 <HAL_TIM_Encoder_Init+0x11c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005bc2:	b2db      	uxtb	r3, r3
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	d106      	bne.n	8005bd6 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	2200      	movs	r2, #0
 8005bcc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8005bd0:	6878      	ldr	r0, [r7, #4]
 8005bd2:	f7fc fb57 	bl	8002284 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	2202      	movs	r2, #2
 8005bda:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	689b      	ldr	r3, [r3, #8]
 8005be4:	687a      	ldr	r2, [r7, #4]
 8005be6:	6812      	ldr	r2, [r2, #0]
 8005be8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005bec:	f023 0307 	bic.w	r3, r3, #7
 8005bf0:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	681a      	ldr	r2, [r3, #0]
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	3304      	adds	r3, #4
 8005bfa:	4619      	mov	r1, r3
 8005bfc:	4610      	mov	r0, r2
 8005bfe:	f000 fb91 	bl	8006324 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	689b      	ldr	r3, [r3, #8]
 8005c08:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	699b      	ldr	r3, [r3, #24]
 8005c10:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	6a1b      	ldr	r3, [r3, #32]
 8005c18:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8005c1a:	683b      	ldr	r3, [r7, #0]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	697a      	ldr	r2, [r7, #20]
 8005c20:	4313      	orrs	r3, r2
 8005c22:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8005c24:	693b      	ldr	r3, [r7, #16]
 8005c26:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005c2a:	f023 0303 	bic.w	r3, r3, #3
 8005c2e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8005c30:	683b      	ldr	r3, [r7, #0]
 8005c32:	689a      	ldr	r2, [r3, #8]
 8005c34:	683b      	ldr	r3, [r7, #0]
 8005c36:	699b      	ldr	r3, [r3, #24]
 8005c38:	021b      	lsls	r3, r3, #8
 8005c3a:	4313      	orrs	r3, r2
 8005c3c:	693a      	ldr	r2, [r7, #16]
 8005c3e:	4313      	orrs	r3, r2
 8005c40:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8005c42:	693b      	ldr	r3, [r7, #16]
 8005c44:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8005c48:	f023 030c 	bic.w	r3, r3, #12
 8005c4c:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8005c4e:	693b      	ldr	r3, [r7, #16]
 8005c50:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005c54:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005c58:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8005c5a:	683b      	ldr	r3, [r7, #0]
 8005c5c:	68da      	ldr	r2, [r3, #12]
 8005c5e:	683b      	ldr	r3, [r7, #0]
 8005c60:	69db      	ldr	r3, [r3, #28]
 8005c62:	021b      	lsls	r3, r3, #8
 8005c64:	4313      	orrs	r3, r2
 8005c66:	693a      	ldr	r2, [r7, #16]
 8005c68:	4313      	orrs	r3, r2
 8005c6a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8005c6c:	683b      	ldr	r3, [r7, #0]
 8005c6e:	691b      	ldr	r3, [r3, #16]
 8005c70:	011a      	lsls	r2, r3, #4
 8005c72:	683b      	ldr	r3, [r7, #0]
 8005c74:	6a1b      	ldr	r3, [r3, #32]
 8005c76:	031b      	lsls	r3, r3, #12
 8005c78:	4313      	orrs	r3, r2
 8005c7a:	693a      	ldr	r2, [r7, #16]
 8005c7c:	4313      	orrs	r3, r2
 8005c7e:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8005c86:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8005c8e:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8005c90:	683b      	ldr	r3, [r7, #0]
 8005c92:	685a      	ldr	r2, [r3, #4]
 8005c94:	683b      	ldr	r3, [r7, #0]
 8005c96:	695b      	ldr	r3, [r3, #20]
 8005c98:	011b      	lsls	r3, r3, #4
 8005c9a:	4313      	orrs	r3, r2
 8005c9c:	68fa      	ldr	r2, [r7, #12]
 8005c9e:	4313      	orrs	r3, r2
 8005ca0:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	697a      	ldr	r2, [r7, #20]
 8005ca8:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	693a      	ldr	r2, [r7, #16]
 8005cb0:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	68fa      	ldr	r2, [r7, #12]
 8005cb8:	621a      	str	r2, [r3, #32]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	2201      	movs	r2, #1
 8005cbe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005cc2:	2300      	movs	r3, #0
}
 8005cc4:	4618      	mov	r0, r3
 8005cc6:	3718      	adds	r7, #24
 8005cc8:	46bd      	mov	sp, r7
 8005cca:	bd80      	pop	{r7, pc}

08005ccc <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005ccc:	b580      	push	{r7, lr}
 8005cce:	b082      	sub	sp, #8
 8005cd0:	af00      	add	r7, sp, #0
 8005cd2:	6078      	str	r0, [r7, #4]
 8005cd4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

  /* Enable the encoder interface channels */
  switch (Channel)
 8005cd6:	683b      	ldr	r3, [r7, #0]
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d002      	beq.n	8005ce2 <HAL_TIM_Encoder_Start+0x16>
 8005cdc:	2b04      	cmp	r3, #4
 8005cde:	d008      	beq.n	8005cf2 <HAL_TIM_Encoder_Start+0x26>
 8005ce0:	e00f      	b.n	8005d02 <HAL_TIM_Encoder_Start+0x36>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	2201      	movs	r2, #1
 8005ce8:	2100      	movs	r1, #0
 8005cea:	4618      	mov	r0, r3
 8005cec:	f000 fe04 	bl	80068f8 <TIM_CCxChannelCmd>
      break;
 8005cf0:	e016      	b.n	8005d20 <HAL_TIM_Encoder_Start+0x54>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	2201      	movs	r2, #1
 8005cf8:	2104      	movs	r1, #4
 8005cfa:	4618      	mov	r0, r3
 8005cfc:	f000 fdfc 	bl	80068f8 <TIM_CCxChannelCmd>
      break;
 8005d00:	e00e      	b.n	8005d20 <HAL_TIM_Encoder_Start+0x54>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	2201      	movs	r2, #1
 8005d08:	2100      	movs	r1, #0
 8005d0a:	4618      	mov	r0, r3
 8005d0c:	f000 fdf4 	bl	80068f8 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	2201      	movs	r2, #1
 8005d16:	2104      	movs	r1, #4
 8005d18:	4618      	mov	r0, r3
 8005d1a:	f000 fded 	bl	80068f8 <TIM_CCxChannelCmd>
      break;
 8005d1e:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	681a      	ldr	r2, [r3, #0]
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	f042 0201 	orr.w	r2, r2, #1
 8005d2e:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8005d30:	2300      	movs	r3, #0
}
 8005d32:	4618      	mov	r0, r3
 8005d34:	3708      	adds	r7, #8
 8005d36:	46bd      	mov	sp, r7
 8005d38:	bd80      	pop	{r7, pc}

08005d3a <HAL_TIM_Encoder_Stop>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005d3a:	b580      	push	{r7, lr}
 8005d3c:	b082      	sub	sp, #8
 8005d3e:	af00      	add	r7, sp, #0
 8005d40:	6078      	str	r0, [r7, #4]
 8005d42:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

  /* Disable the Input Capture channels 1 and 2
    (in the EncoderInterface the two possible channels that can be used are TIM_CHANNEL_1 and TIM_CHANNEL_2) */
  switch (Channel)
 8005d44:	683b      	ldr	r3, [r7, #0]
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d002      	beq.n	8005d50 <HAL_TIM_Encoder_Stop+0x16>
 8005d4a:	2b04      	cmp	r3, #4
 8005d4c:	d008      	beq.n	8005d60 <HAL_TIM_Encoder_Stop+0x26>
 8005d4e:	e00f      	b.n	8005d70 <HAL_TIM_Encoder_Stop+0x36>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE);
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	2200      	movs	r2, #0
 8005d56:	2100      	movs	r1, #0
 8005d58:	4618      	mov	r0, r3
 8005d5a:	f000 fdcd 	bl	80068f8 <TIM_CCxChannelCmd>
      break;
 8005d5e:	e016      	b.n	8005d8e <HAL_TIM_Encoder_Stop+0x54>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_DISABLE);
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	2200      	movs	r2, #0
 8005d66:	2104      	movs	r1, #4
 8005d68:	4618      	mov	r0, r3
 8005d6a:	f000 fdc5 	bl	80068f8 <TIM_CCxChannelCmd>
      break;
 8005d6e:	e00e      	b.n	8005d8e <HAL_TIM_Encoder_Stop+0x54>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_DISABLE);
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	2200      	movs	r2, #0
 8005d76:	2100      	movs	r1, #0
 8005d78:	4618      	mov	r0, r3
 8005d7a:	f000 fdbd 	bl	80068f8 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_DISABLE);
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	2200      	movs	r2, #0
 8005d84:	2104      	movs	r1, #4
 8005d86:	4618      	mov	r0, r3
 8005d88:	f000 fdb6 	bl	80068f8 <TIM_CCxChannelCmd>
      break;
 8005d8c:	bf00      	nop
    }
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	6a1a      	ldr	r2, [r3, #32]
 8005d94:	f241 1311 	movw	r3, #4369	; 0x1111
 8005d98:	4013      	ands	r3, r2
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d10f      	bne.n	8005dbe <HAL_TIM_Encoder_Stop+0x84>
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	6a1a      	ldr	r2, [r3, #32]
 8005da4:	f240 4344 	movw	r3, #1092	; 0x444
 8005da8:	4013      	ands	r3, r2
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d107      	bne.n	8005dbe <HAL_TIM_Encoder_Stop+0x84>
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	681a      	ldr	r2, [r3, #0]
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	f022 0201 	bic.w	r2, r2, #1
 8005dbc:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8005dbe:	2300      	movs	r3, #0
}
 8005dc0:	4618      	mov	r0, r3
 8005dc2:	3708      	adds	r7, #8
 8005dc4:	46bd      	mov	sp, r7
 8005dc6:	bd80      	pop	{r7, pc}

08005dc8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005dc8:	b580      	push	{r7, lr}
 8005dca:	b082      	sub	sp, #8
 8005dcc:	af00      	add	r7, sp, #0
 8005dce:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	691b      	ldr	r3, [r3, #16]
 8005dd6:	f003 0302 	and.w	r3, r3, #2
 8005dda:	2b02      	cmp	r3, #2
 8005ddc:	d122      	bne.n	8005e24 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	68db      	ldr	r3, [r3, #12]
 8005de4:	f003 0302 	and.w	r3, r3, #2
 8005de8:	2b02      	cmp	r3, #2
 8005dea:	d11b      	bne.n	8005e24 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	f06f 0202 	mvn.w	r2, #2
 8005df4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	2201      	movs	r2, #1
 8005dfa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	699b      	ldr	r3, [r3, #24]
 8005e02:	f003 0303 	and.w	r3, r3, #3
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d003      	beq.n	8005e12 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005e0a:	6878      	ldr	r0, [r7, #4]
 8005e0c:	f000 fa6b 	bl	80062e6 <HAL_TIM_IC_CaptureCallback>
 8005e10:	e005      	b.n	8005e1e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005e12:	6878      	ldr	r0, [r7, #4]
 8005e14:	f000 fa5d 	bl	80062d2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005e18:	6878      	ldr	r0, [r7, #4]
 8005e1a:	f000 fa6e 	bl	80062fa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	2200      	movs	r2, #0
 8005e22:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	691b      	ldr	r3, [r3, #16]
 8005e2a:	f003 0304 	and.w	r3, r3, #4
 8005e2e:	2b04      	cmp	r3, #4
 8005e30:	d122      	bne.n	8005e78 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	68db      	ldr	r3, [r3, #12]
 8005e38:	f003 0304 	and.w	r3, r3, #4
 8005e3c:	2b04      	cmp	r3, #4
 8005e3e:	d11b      	bne.n	8005e78 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	f06f 0204 	mvn.w	r2, #4
 8005e48:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	2202      	movs	r2, #2
 8005e4e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	699b      	ldr	r3, [r3, #24]
 8005e56:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d003      	beq.n	8005e66 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005e5e:	6878      	ldr	r0, [r7, #4]
 8005e60:	f000 fa41 	bl	80062e6 <HAL_TIM_IC_CaptureCallback>
 8005e64:	e005      	b.n	8005e72 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005e66:	6878      	ldr	r0, [r7, #4]
 8005e68:	f000 fa33 	bl	80062d2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005e6c:	6878      	ldr	r0, [r7, #4]
 8005e6e:	f000 fa44 	bl	80062fa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	2200      	movs	r2, #0
 8005e76:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	691b      	ldr	r3, [r3, #16]
 8005e7e:	f003 0308 	and.w	r3, r3, #8
 8005e82:	2b08      	cmp	r3, #8
 8005e84:	d122      	bne.n	8005ecc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	68db      	ldr	r3, [r3, #12]
 8005e8c:	f003 0308 	and.w	r3, r3, #8
 8005e90:	2b08      	cmp	r3, #8
 8005e92:	d11b      	bne.n	8005ecc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	f06f 0208 	mvn.w	r2, #8
 8005e9c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	2204      	movs	r2, #4
 8005ea2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	69db      	ldr	r3, [r3, #28]
 8005eaa:	f003 0303 	and.w	r3, r3, #3
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d003      	beq.n	8005eba <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005eb2:	6878      	ldr	r0, [r7, #4]
 8005eb4:	f000 fa17 	bl	80062e6 <HAL_TIM_IC_CaptureCallback>
 8005eb8:	e005      	b.n	8005ec6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005eba:	6878      	ldr	r0, [r7, #4]
 8005ebc:	f000 fa09 	bl	80062d2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005ec0:	6878      	ldr	r0, [r7, #4]
 8005ec2:	f000 fa1a 	bl	80062fa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	2200      	movs	r2, #0
 8005eca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	691b      	ldr	r3, [r3, #16]
 8005ed2:	f003 0310 	and.w	r3, r3, #16
 8005ed6:	2b10      	cmp	r3, #16
 8005ed8:	d122      	bne.n	8005f20 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	68db      	ldr	r3, [r3, #12]
 8005ee0:	f003 0310 	and.w	r3, r3, #16
 8005ee4:	2b10      	cmp	r3, #16
 8005ee6:	d11b      	bne.n	8005f20 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	f06f 0210 	mvn.w	r2, #16
 8005ef0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	2208      	movs	r2, #8
 8005ef6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	69db      	ldr	r3, [r3, #28]
 8005efe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d003      	beq.n	8005f0e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005f06:	6878      	ldr	r0, [r7, #4]
 8005f08:	f000 f9ed 	bl	80062e6 <HAL_TIM_IC_CaptureCallback>
 8005f0c:	e005      	b.n	8005f1a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005f0e:	6878      	ldr	r0, [r7, #4]
 8005f10:	f000 f9df 	bl	80062d2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005f14:	6878      	ldr	r0, [r7, #4]
 8005f16:	f000 f9f0 	bl	80062fa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	2200      	movs	r2, #0
 8005f1e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	691b      	ldr	r3, [r3, #16]
 8005f26:	f003 0301 	and.w	r3, r3, #1
 8005f2a:	2b01      	cmp	r3, #1
 8005f2c:	d10e      	bne.n	8005f4c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	68db      	ldr	r3, [r3, #12]
 8005f34:	f003 0301 	and.w	r3, r3, #1
 8005f38:	2b01      	cmp	r3, #1
 8005f3a:	d107      	bne.n	8005f4c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	f06f 0201 	mvn.w	r2, #1
 8005f44:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005f46:	6878      	ldr	r0, [r7, #4]
 8005f48:	f7fb fe90 	bl	8001c6c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	691b      	ldr	r3, [r3, #16]
 8005f52:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f56:	2b80      	cmp	r3, #128	; 0x80
 8005f58:	d10e      	bne.n	8005f78 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	68db      	ldr	r3, [r3, #12]
 8005f60:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f64:	2b80      	cmp	r3, #128	; 0x80
 8005f66:	d107      	bne.n	8005f78 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005f70:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005f72:	6878      	ldr	r0, [r7, #4]
 8005f74:	f000 fd34 	bl	80069e0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	691b      	ldr	r3, [r3, #16]
 8005f7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f82:	2b40      	cmp	r3, #64	; 0x40
 8005f84:	d10e      	bne.n	8005fa4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	68db      	ldr	r3, [r3, #12]
 8005f8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f90:	2b40      	cmp	r3, #64	; 0x40
 8005f92:	d107      	bne.n	8005fa4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005f9c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005f9e:	6878      	ldr	r0, [r7, #4]
 8005fa0:	f000 f9b5 	bl	800630e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	691b      	ldr	r3, [r3, #16]
 8005faa:	f003 0320 	and.w	r3, r3, #32
 8005fae:	2b20      	cmp	r3, #32
 8005fb0:	d10e      	bne.n	8005fd0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	68db      	ldr	r3, [r3, #12]
 8005fb8:	f003 0320 	and.w	r3, r3, #32
 8005fbc:	2b20      	cmp	r3, #32
 8005fbe:	d107      	bne.n	8005fd0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	f06f 0220 	mvn.w	r2, #32
 8005fc8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005fca:	6878      	ldr	r0, [r7, #4]
 8005fcc:	f000 fcfe 	bl	80069cc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005fd0:	bf00      	nop
 8005fd2:	3708      	adds	r7, #8
 8005fd4:	46bd      	mov	sp, r7
 8005fd6:	bd80      	pop	{r7, pc}

08005fd8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005fd8:	b580      	push	{r7, lr}
 8005fda:	b084      	sub	sp, #16
 8005fdc:	af00      	add	r7, sp, #0
 8005fde:	60f8      	str	r0, [r7, #12]
 8005fe0:	60b9      	str	r1, [r7, #8]
 8005fe2:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005fea:	2b01      	cmp	r3, #1
 8005fec:	d101      	bne.n	8005ff2 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8005fee:	2302      	movs	r3, #2
 8005ff0:	e0b4      	b.n	800615c <HAL_TIM_PWM_ConfigChannel+0x184>
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	2201      	movs	r2, #1
 8005ff6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	2202      	movs	r2, #2
 8005ffe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	2b0c      	cmp	r3, #12
 8006006:	f200 809f 	bhi.w	8006148 <HAL_TIM_PWM_ConfigChannel+0x170>
 800600a:	a201      	add	r2, pc, #4	; (adr r2, 8006010 <HAL_TIM_PWM_ConfigChannel+0x38>)
 800600c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006010:	08006045 	.word	0x08006045
 8006014:	08006149 	.word	0x08006149
 8006018:	08006149 	.word	0x08006149
 800601c:	08006149 	.word	0x08006149
 8006020:	08006085 	.word	0x08006085
 8006024:	08006149 	.word	0x08006149
 8006028:	08006149 	.word	0x08006149
 800602c:	08006149 	.word	0x08006149
 8006030:	080060c7 	.word	0x080060c7
 8006034:	08006149 	.word	0x08006149
 8006038:	08006149 	.word	0x08006149
 800603c:	08006149 	.word	0x08006149
 8006040:	08006107 	.word	0x08006107
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	68b9      	ldr	r1, [r7, #8]
 800604a:	4618      	mov	r0, r3
 800604c:	f000 fa0a 	bl	8006464 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	699a      	ldr	r2, [r3, #24]
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	f042 0208 	orr.w	r2, r2, #8
 800605e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	699a      	ldr	r2, [r3, #24]
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	f022 0204 	bic.w	r2, r2, #4
 800606e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	6999      	ldr	r1, [r3, #24]
 8006076:	68bb      	ldr	r3, [r7, #8]
 8006078:	691a      	ldr	r2, [r3, #16]
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	430a      	orrs	r2, r1
 8006080:	619a      	str	r2, [r3, #24]
      break;
 8006082:	e062      	b.n	800614a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	68b9      	ldr	r1, [r7, #8]
 800608a:	4618      	mov	r0, r3
 800608c:	f000 fa5a 	bl	8006544 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	699a      	ldr	r2, [r3, #24]
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800609e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	699a      	ldr	r2, [r3, #24]
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80060ae:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	6999      	ldr	r1, [r3, #24]
 80060b6:	68bb      	ldr	r3, [r7, #8]
 80060b8:	691b      	ldr	r3, [r3, #16]
 80060ba:	021a      	lsls	r2, r3, #8
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	430a      	orrs	r2, r1
 80060c2:	619a      	str	r2, [r3, #24]
      break;
 80060c4:	e041      	b.n	800614a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	68b9      	ldr	r1, [r7, #8]
 80060cc:	4618      	mov	r0, r3
 80060ce:	f000 faaf 	bl	8006630 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	69da      	ldr	r2, [r3, #28]
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	f042 0208 	orr.w	r2, r2, #8
 80060e0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	69da      	ldr	r2, [r3, #28]
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	f022 0204 	bic.w	r2, r2, #4
 80060f0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	69d9      	ldr	r1, [r3, #28]
 80060f8:	68bb      	ldr	r3, [r7, #8]
 80060fa:	691a      	ldr	r2, [r3, #16]
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	430a      	orrs	r2, r1
 8006102:	61da      	str	r2, [r3, #28]
      break;
 8006104:	e021      	b.n	800614a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	68b9      	ldr	r1, [r7, #8]
 800610c:	4618      	mov	r0, r3
 800610e:	f000 fb03 	bl	8006718 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	69da      	ldr	r2, [r3, #28]
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006120:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	69da      	ldr	r2, [r3, #28]
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006130:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	69d9      	ldr	r1, [r3, #28]
 8006138:	68bb      	ldr	r3, [r7, #8]
 800613a:	691b      	ldr	r3, [r3, #16]
 800613c:	021a      	lsls	r2, r3, #8
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	430a      	orrs	r2, r1
 8006144:	61da      	str	r2, [r3, #28]
      break;
 8006146:	e000      	b.n	800614a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8006148:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	2201      	movs	r2, #1
 800614e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	2200      	movs	r2, #0
 8006156:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800615a:	2300      	movs	r3, #0
}
 800615c:	4618      	mov	r0, r3
 800615e:	3710      	adds	r7, #16
 8006160:	46bd      	mov	sp, r7
 8006162:	bd80      	pop	{r7, pc}

08006164 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006164:	b580      	push	{r7, lr}
 8006166:	b084      	sub	sp, #16
 8006168:	af00      	add	r7, sp, #0
 800616a:	6078      	str	r0, [r7, #4]
 800616c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006174:	2b01      	cmp	r3, #1
 8006176:	d101      	bne.n	800617c <HAL_TIM_ConfigClockSource+0x18>
 8006178:	2302      	movs	r3, #2
 800617a:	e0a6      	b.n	80062ca <HAL_TIM_ConfigClockSource+0x166>
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	2201      	movs	r2, #1
 8006180:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	2202      	movs	r2, #2
 8006188:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	689b      	ldr	r3, [r3, #8]
 8006192:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800619a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80061a2:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	68fa      	ldr	r2, [r7, #12]
 80061aa:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80061ac:	683b      	ldr	r3, [r7, #0]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	2b40      	cmp	r3, #64	; 0x40
 80061b2:	d067      	beq.n	8006284 <HAL_TIM_ConfigClockSource+0x120>
 80061b4:	2b40      	cmp	r3, #64	; 0x40
 80061b6:	d80b      	bhi.n	80061d0 <HAL_TIM_ConfigClockSource+0x6c>
 80061b8:	2b10      	cmp	r3, #16
 80061ba:	d073      	beq.n	80062a4 <HAL_TIM_ConfigClockSource+0x140>
 80061bc:	2b10      	cmp	r3, #16
 80061be:	d802      	bhi.n	80061c6 <HAL_TIM_ConfigClockSource+0x62>
 80061c0:	2b00      	cmp	r3, #0
 80061c2:	d06f      	beq.n	80062a4 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 80061c4:	e078      	b.n	80062b8 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80061c6:	2b20      	cmp	r3, #32
 80061c8:	d06c      	beq.n	80062a4 <HAL_TIM_ConfigClockSource+0x140>
 80061ca:	2b30      	cmp	r3, #48	; 0x30
 80061cc:	d06a      	beq.n	80062a4 <HAL_TIM_ConfigClockSource+0x140>
      break;
 80061ce:	e073      	b.n	80062b8 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80061d0:	2b70      	cmp	r3, #112	; 0x70
 80061d2:	d00d      	beq.n	80061f0 <HAL_TIM_ConfigClockSource+0x8c>
 80061d4:	2b70      	cmp	r3, #112	; 0x70
 80061d6:	d804      	bhi.n	80061e2 <HAL_TIM_ConfigClockSource+0x7e>
 80061d8:	2b50      	cmp	r3, #80	; 0x50
 80061da:	d033      	beq.n	8006244 <HAL_TIM_ConfigClockSource+0xe0>
 80061dc:	2b60      	cmp	r3, #96	; 0x60
 80061de:	d041      	beq.n	8006264 <HAL_TIM_ConfigClockSource+0x100>
      break;
 80061e0:	e06a      	b.n	80062b8 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80061e2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80061e6:	d066      	beq.n	80062b6 <HAL_TIM_ConfigClockSource+0x152>
 80061e8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80061ec:	d017      	beq.n	800621e <HAL_TIM_ConfigClockSource+0xba>
      break;
 80061ee:	e063      	b.n	80062b8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	6818      	ldr	r0, [r3, #0]
 80061f4:	683b      	ldr	r3, [r7, #0]
 80061f6:	6899      	ldr	r1, [r3, #8]
 80061f8:	683b      	ldr	r3, [r7, #0]
 80061fa:	685a      	ldr	r2, [r3, #4]
 80061fc:	683b      	ldr	r3, [r7, #0]
 80061fe:	68db      	ldr	r3, [r3, #12]
 8006200:	f000 fb5a 	bl	80068b8 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	689b      	ldr	r3, [r3, #8]
 800620a:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006212:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	68fa      	ldr	r2, [r7, #12]
 800621a:	609a      	str	r2, [r3, #8]
      break;
 800621c:	e04c      	b.n	80062b8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	6818      	ldr	r0, [r3, #0]
 8006222:	683b      	ldr	r3, [r7, #0]
 8006224:	6899      	ldr	r1, [r3, #8]
 8006226:	683b      	ldr	r3, [r7, #0]
 8006228:	685a      	ldr	r2, [r3, #4]
 800622a:	683b      	ldr	r3, [r7, #0]
 800622c:	68db      	ldr	r3, [r3, #12]
 800622e:	f000 fb43 	bl	80068b8 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	689a      	ldr	r2, [r3, #8]
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006240:	609a      	str	r2, [r3, #8]
      break;
 8006242:	e039      	b.n	80062b8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	6818      	ldr	r0, [r3, #0]
 8006248:	683b      	ldr	r3, [r7, #0]
 800624a:	6859      	ldr	r1, [r3, #4]
 800624c:	683b      	ldr	r3, [r7, #0]
 800624e:	68db      	ldr	r3, [r3, #12]
 8006250:	461a      	mov	r2, r3
 8006252:	f000 fab7 	bl	80067c4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	2150      	movs	r1, #80	; 0x50
 800625c:	4618      	mov	r0, r3
 800625e:	f000 fb10 	bl	8006882 <TIM_ITRx_SetConfig>
      break;
 8006262:	e029      	b.n	80062b8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	6818      	ldr	r0, [r3, #0]
 8006268:	683b      	ldr	r3, [r7, #0]
 800626a:	6859      	ldr	r1, [r3, #4]
 800626c:	683b      	ldr	r3, [r7, #0]
 800626e:	68db      	ldr	r3, [r3, #12]
 8006270:	461a      	mov	r2, r3
 8006272:	f000 fad6 	bl	8006822 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	2160      	movs	r1, #96	; 0x60
 800627c:	4618      	mov	r0, r3
 800627e:	f000 fb00 	bl	8006882 <TIM_ITRx_SetConfig>
      break;
 8006282:	e019      	b.n	80062b8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	6818      	ldr	r0, [r3, #0]
 8006288:	683b      	ldr	r3, [r7, #0]
 800628a:	6859      	ldr	r1, [r3, #4]
 800628c:	683b      	ldr	r3, [r7, #0]
 800628e:	68db      	ldr	r3, [r3, #12]
 8006290:	461a      	mov	r2, r3
 8006292:	f000 fa97 	bl	80067c4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	2140      	movs	r1, #64	; 0x40
 800629c:	4618      	mov	r0, r3
 800629e:	f000 faf0 	bl	8006882 <TIM_ITRx_SetConfig>
      break;
 80062a2:	e009      	b.n	80062b8 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	681a      	ldr	r2, [r3, #0]
 80062a8:	683b      	ldr	r3, [r7, #0]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	4619      	mov	r1, r3
 80062ae:	4610      	mov	r0, r2
 80062b0:	f000 fae7 	bl	8006882 <TIM_ITRx_SetConfig>
      break;
 80062b4:	e000      	b.n	80062b8 <HAL_TIM_ConfigClockSource+0x154>
      break;
 80062b6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	2201      	movs	r2, #1
 80062bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	2200      	movs	r2, #0
 80062c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80062c8:	2300      	movs	r3, #0
}
 80062ca:	4618      	mov	r0, r3
 80062cc:	3710      	adds	r7, #16
 80062ce:	46bd      	mov	sp, r7
 80062d0:	bd80      	pop	{r7, pc}

080062d2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80062d2:	b480      	push	{r7}
 80062d4:	b083      	sub	sp, #12
 80062d6:	af00      	add	r7, sp, #0
 80062d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80062da:	bf00      	nop
 80062dc:	370c      	adds	r7, #12
 80062de:	46bd      	mov	sp, r7
 80062e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062e4:	4770      	bx	lr

080062e6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80062e6:	b480      	push	{r7}
 80062e8:	b083      	sub	sp, #12
 80062ea:	af00      	add	r7, sp, #0
 80062ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80062ee:	bf00      	nop
 80062f0:	370c      	adds	r7, #12
 80062f2:	46bd      	mov	sp, r7
 80062f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062f8:	4770      	bx	lr

080062fa <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80062fa:	b480      	push	{r7}
 80062fc:	b083      	sub	sp, #12
 80062fe:	af00      	add	r7, sp, #0
 8006300:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006302:	bf00      	nop
 8006304:	370c      	adds	r7, #12
 8006306:	46bd      	mov	sp, r7
 8006308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800630c:	4770      	bx	lr

0800630e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800630e:	b480      	push	{r7}
 8006310:	b083      	sub	sp, #12
 8006312:	af00      	add	r7, sp, #0
 8006314:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006316:	bf00      	nop
 8006318:	370c      	adds	r7, #12
 800631a:	46bd      	mov	sp, r7
 800631c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006320:	4770      	bx	lr
	...

08006324 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006324:	b480      	push	{r7}
 8006326:	b085      	sub	sp, #20
 8006328:	af00      	add	r7, sp, #0
 800632a:	6078      	str	r0, [r7, #4]
 800632c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	4a40      	ldr	r2, [pc, #256]	; (8006438 <TIM_Base_SetConfig+0x114>)
 8006338:	4293      	cmp	r3, r2
 800633a:	d013      	beq.n	8006364 <TIM_Base_SetConfig+0x40>
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006342:	d00f      	beq.n	8006364 <TIM_Base_SetConfig+0x40>
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	4a3d      	ldr	r2, [pc, #244]	; (800643c <TIM_Base_SetConfig+0x118>)
 8006348:	4293      	cmp	r3, r2
 800634a:	d00b      	beq.n	8006364 <TIM_Base_SetConfig+0x40>
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	4a3c      	ldr	r2, [pc, #240]	; (8006440 <TIM_Base_SetConfig+0x11c>)
 8006350:	4293      	cmp	r3, r2
 8006352:	d007      	beq.n	8006364 <TIM_Base_SetConfig+0x40>
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	4a3b      	ldr	r2, [pc, #236]	; (8006444 <TIM_Base_SetConfig+0x120>)
 8006358:	4293      	cmp	r3, r2
 800635a:	d003      	beq.n	8006364 <TIM_Base_SetConfig+0x40>
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	4a3a      	ldr	r2, [pc, #232]	; (8006448 <TIM_Base_SetConfig+0x124>)
 8006360:	4293      	cmp	r3, r2
 8006362:	d108      	bne.n	8006376 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800636a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800636c:	683b      	ldr	r3, [r7, #0]
 800636e:	685b      	ldr	r3, [r3, #4]
 8006370:	68fa      	ldr	r2, [r7, #12]
 8006372:	4313      	orrs	r3, r2
 8006374:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	4a2f      	ldr	r2, [pc, #188]	; (8006438 <TIM_Base_SetConfig+0x114>)
 800637a:	4293      	cmp	r3, r2
 800637c:	d02b      	beq.n	80063d6 <TIM_Base_SetConfig+0xb2>
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006384:	d027      	beq.n	80063d6 <TIM_Base_SetConfig+0xb2>
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	4a2c      	ldr	r2, [pc, #176]	; (800643c <TIM_Base_SetConfig+0x118>)
 800638a:	4293      	cmp	r3, r2
 800638c:	d023      	beq.n	80063d6 <TIM_Base_SetConfig+0xb2>
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	4a2b      	ldr	r2, [pc, #172]	; (8006440 <TIM_Base_SetConfig+0x11c>)
 8006392:	4293      	cmp	r3, r2
 8006394:	d01f      	beq.n	80063d6 <TIM_Base_SetConfig+0xb2>
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	4a2a      	ldr	r2, [pc, #168]	; (8006444 <TIM_Base_SetConfig+0x120>)
 800639a:	4293      	cmp	r3, r2
 800639c:	d01b      	beq.n	80063d6 <TIM_Base_SetConfig+0xb2>
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	4a29      	ldr	r2, [pc, #164]	; (8006448 <TIM_Base_SetConfig+0x124>)
 80063a2:	4293      	cmp	r3, r2
 80063a4:	d017      	beq.n	80063d6 <TIM_Base_SetConfig+0xb2>
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	4a28      	ldr	r2, [pc, #160]	; (800644c <TIM_Base_SetConfig+0x128>)
 80063aa:	4293      	cmp	r3, r2
 80063ac:	d013      	beq.n	80063d6 <TIM_Base_SetConfig+0xb2>
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	4a27      	ldr	r2, [pc, #156]	; (8006450 <TIM_Base_SetConfig+0x12c>)
 80063b2:	4293      	cmp	r3, r2
 80063b4:	d00f      	beq.n	80063d6 <TIM_Base_SetConfig+0xb2>
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	4a26      	ldr	r2, [pc, #152]	; (8006454 <TIM_Base_SetConfig+0x130>)
 80063ba:	4293      	cmp	r3, r2
 80063bc:	d00b      	beq.n	80063d6 <TIM_Base_SetConfig+0xb2>
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	4a25      	ldr	r2, [pc, #148]	; (8006458 <TIM_Base_SetConfig+0x134>)
 80063c2:	4293      	cmp	r3, r2
 80063c4:	d007      	beq.n	80063d6 <TIM_Base_SetConfig+0xb2>
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	4a24      	ldr	r2, [pc, #144]	; (800645c <TIM_Base_SetConfig+0x138>)
 80063ca:	4293      	cmp	r3, r2
 80063cc:	d003      	beq.n	80063d6 <TIM_Base_SetConfig+0xb2>
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	4a23      	ldr	r2, [pc, #140]	; (8006460 <TIM_Base_SetConfig+0x13c>)
 80063d2:	4293      	cmp	r3, r2
 80063d4:	d108      	bne.n	80063e8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80063dc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80063de:	683b      	ldr	r3, [r7, #0]
 80063e0:	68db      	ldr	r3, [r3, #12]
 80063e2:	68fa      	ldr	r2, [r7, #12]
 80063e4:	4313      	orrs	r3, r2
 80063e6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80063ee:	683b      	ldr	r3, [r7, #0]
 80063f0:	695b      	ldr	r3, [r3, #20]
 80063f2:	4313      	orrs	r3, r2
 80063f4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	68fa      	ldr	r2, [r7, #12]
 80063fa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80063fc:	683b      	ldr	r3, [r7, #0]
 80063fe:	689a      	ldr	r2, [r3, #8]
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006404:	683b      	ldr	r3, [r7, #0]
 8006406:	681a      	ldr	r2, [r3, #0]
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	4a0a      	ldr	r2, [pc, #40]	; (8006438 <TIM_Base_SetConfig+0x114>)
 8006410:	4293      	cmp	r3, r2
 8006412:	d003      	beq.n	800641c <TIM_Base_SetConfig+0xf8>
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	4a0c      	ldr	r2, [pc, #48]	; (8006448 <TIM_Base_SetConfig+0x124>)
 8006418:	4293      	cmp	r3, r2
 800641a:	d103      	bne.n	8006424 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800641c:	683b      	ldr	r3, [r7, #0]
 800641e:	691a      	ldr	r2, [r3, #16]
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	2201      	movs	r2, #1
 8006428:	615a      	str	r2, [r3, #20]
}
 800642a:	bf00      	nop
 800642c:	3714      	adds	r7, #20
 800642e:	46bd      	mov	sp, r7
 8006430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006434:	4770      	bx	lr
 8006436:	bf00      	nop
 8006438:	40010000 	.word	0x40010000
 800643c:	40000400 	.word	0x40000400
 8006440:	40000800 	.word	0x40000800
 8006444:	40000c00 	.word	0x40000c00
 8006448:	40010400 	.word	0x40010400
 800644c:	40014000 	.word	0x40014000
 8006450:	40014400 	.word	0x40014400
 8006454:	40014800 	.word	0x40014800
 8006458:	40001800 	.word	0x40001800
 800645c:	40001c00 	.word	0x40001c00
 8006460:	40002000 	.word	0x40002000

08006464 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006464:	b480      	push	{r7}
 8006466:	b087      	sub	sp, #28
 8006468:	af00      	add	r7, sp, #0
 800646a:	6078      	str	r0, [r7, #4]
 800646c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	6a1b      	ldr	r3, [r3, #32]
 8006472:	f023 0201 	bic.w	r2, r3, #1
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	6a1b      	ldr	r3, [r3, #32]
 800647e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	685b      	ldr	r3, [r3, #4]
 8006484:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	699b      	ldr	r3, [r3, #24]
 800648a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006492:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	f023 0303 	bic.w	r3, r3, #3
 800649a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800649c:	683b      	ldr	r3, [r7, #0]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	68fa      	ldr	r2, [r7, #12]
 80064a2:	4313      	orrs	r3, r2
 80064a4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80064a6:	697b      	ldr	r3, [r7, #20]
 80064a8:	f023 0302 	bic.w	r3, r3, #2
 80064ac:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80064ae:	683b      	ldr	r3, [r7, #0]
 80064b0:	689b      	ldr	r3, [r3, #8]
 80064b2:	697a      	ldr	r2, [r7, #20]
 80064b4:	4313      	orrs	r3, r2
 80064b6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	4a20      	ldr	r2, [pc, #128]	; (800653c <TIM_OC1_SetConfig+0xd8>)
 80064bc:	4293      	cmp	r3, r2
 80064be:	d003      	beq.n	80064c8 <TIM_OC1_SetConfig+0x64>
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	4a1f      	ldr	r2, [pc, #124]	; (8006540 <TIM_OC1_SetConfig+0xdc>)
 80064c4:	4293      	cmp	r3, r2
 80064c6:	d10c      	bne.n	80064e2 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80064c8:	697b      	ldr	r3, [r7, #20]
 80064ca:	f023 0308 	bic.w	r3, r3, #8
 80064ce:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80064d0:	683b      	ldr	r3, [r7, #0]
 80064d2:	68db      	ldr	r3, [r3, #12]
 80064d4:	697a      	ldr	r2, [r7, #20]
 80064d6:	4313      	orrs	r3, r2
 80064d8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80064da:	697b      	ldr	r3, [r7, #20]
 80064dc:	f023 0304 	bic.w	r3, r3, #4
 80064e0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	4a15      	ldr	r2, [pc, #84]	; (800653c <TIM_OC1_SetConfig+0xd8>)
 80064e6:	4293      	cmp	r3, r2
 80064e8:	d003      	beq.n	80064f2 <TIM_OC1_SetConfig+0x8e>
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	4a14      	ldr	r2, [pc, #80]	; (8006540 <TIM_OC1_SetConfig+0xdc>)
 80064ee:	4293      	cmp	r3, r2
 80064f0:	d111      	bne.n	8006516 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80064f2:	693b      	ldr	r3, [r7, #16]
 80064f4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80064f8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80064fa:	693b      	ldr	r3, [r7, #16]
 80064fc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006500:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006502:	683b      	ldr	r3, [r7, #0]
 8006504:	695b      	ldr	r3, [r3, #20]
 8006506:	693a      	ldr	r2, [r7, #16]
 8006508:	4313      	orrs	r3, r2
 800650a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800650c:	683b      	ldr	r3, [r7, #0]
 800650e:	699b      	ldr	r3, [r3, #24]
 8006510:	693a      	ldr	r2, [r7, #16]
 8006512:	4313      	orrs	r3, r2
 8006514:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	693a      	ldr	r2, [r7, #16]
 800651a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	68fa      	ldr	r2, [r7, #12]
 8006520:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006522:	683b      	ldr	r3, [r7, #0]
 8006524:	685a      	ldr	r2, [r3, #4]
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	697a      	ldr	r2, [r7, #20]
 800652e:	621a      	str	r2, [r3, #32]
}
 8006530:	bf00      	nop
 8006532:	371c      	adds	r7, #28
 8006534:	46bd      	mov	sp, r7
 8006536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800653a:	4770      	bx	lr
 800653c:	40010000 	.word	0x40010000
 8006540:	40010400 	.word	0x40010400

08006544 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006544:	b480      	push	{r7}
 8006546:	b087      	sub	sp, #28
 8006548:	af00      	add	r7, sp, #0
 800654a:	6078      	str	r0, [r7, #4]
 800654c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	6a1b      	ldr	r3, [r3, #32]
 8006552:	f023 0210 	bic.w	r2, r3, #16
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	6a1b      	ldr	r3, [r3, #32]
 800655e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	685b      	ldr	r3, [r3, #4]
 8006564:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	699b      	ldr	r3, [r3, #24]
 800656a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006572:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800657a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800657c:	683b      	ldr	r3, [r7, #0]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	021b      	lsls	r3, r3, #8
 8006582:	68fa      	ldr	r2, [r7, #12]
 8006584:	4313      	orrs	r3, r2
 8006586:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006588:	697b      	ldr	r3, [r7, #20]
 800658a:	f023 0320 	bic.w	r3, r3, #32
 800658e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006590:	683b      	ldr	r3, [r7, #0]
 8006592:	689b      	ldr	r3, [r3, #8]
 8006594:	011b      	lsls	r3, r3, #4
 8006596:	697a      	ldr	r2, [r7, #20]
 8006598:	4313      	orrs	r3, r2
 800659a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	4a22      	ldr	r2, [pc, #136]	; (8006628 <TIM_OC2_SetConfig+0xe4>)
 80065a0:	4293      	cmp	r3, r2
 80065a2:	d003      	beq.n	80065ac <TIM_OC2_SetConfig+0x68>
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	4a21      	ldr	r2, [pc, #132]	; (800662c <TIM_OC2_SetConfig+0xe8>)
 80065a8:	4293      	cmp	r3, r2
 80065aa:	d10d      	bne.n	80065c8 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80065ac:	697b      	ldr	r3, [r7, #20]
 80065ae:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80065b2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80065b4:	683b      	ldr	r3, [r7, #0]
 80065b6:	68db      	ldr	r3, [r3, #12]
 80065b8:	011b      	lsls	r3, r3, #4
 80065ba:	697a      	ldr	r2, [r7, #20]
 80065bc:	4313      	orrs	r3, r2
 80065be:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80065c0:	697b      	ldr	r3, [r7, #20]
 80065c2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80065c6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	4a17      	ldr	r2, [pc, #92]	; (8006628 <TIM_OC2_SetConfig+0xe4>)
 80065cc:	4293      	cmp	r3, r2
 80065ce:	d003      	beq.n	80065d8 <TIM_OC2_SetConfig+0x94>
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	4a16      	ldr	r2, [pc, #88]	; (800662c <TIM_OC2_SetConfig+0xe8>)
 80065d4:	4293      	cmp	r3, r2
 80065d6:	d113      	bne.n	8006600 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80065d8:	693b      	ldr	r3, [r7, #16]
 80065da:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80065de:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80065e0:	693b      	ldr	r3, [r7, #16]
 80065e2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80065e6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80065e8:	683b      	ldr	r3, [r7, #0]
 80065ea:	695b      	ldr	r3, [r3, #20]
 80065ec:	009b      	lsls	r3, r3, #2
 80065ee:	693a      	ldr	r2, [r7, #16]
 80065f0:	4313      	orrs	r3, r2
 80065f2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80065f4:	683b      	ldr	r3, [r7, #0]
 80065f6:	699b      	ldr	r3, [r3, #24]
 80065f8:	009b      	lsls	r3, r3, #2
 80065fa:	693a      	ldr	r2, [r7, #16]
 80065fc:	4313      	orrs	r3, r2
 80065fe:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	693a      	ldr	r2, [r7, #16]
 8006604:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	68fa      	ldr	r2, [r7, #12]
 800660a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800660c:	683b      	ldr	r3, [r7, #0]
 800660e:	685a      	ldr	r2, [r3, #4]
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	697a      	ldr	r2, [r7, #20]
 8006618:	621a      	str	r2, [r3, #32]
}
 800661a:	bf00      	nop
 800661c:	371c      	adds	r7, #28
 800661e:	46bd      	mov	sp, r7
 8006620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006624:	4770      	bx	lr
 8006626:	bf00      	nop
 8006628:	40010000 	.word	0x40010000
 800662c:	40010400 	.word	0x40010400

08006630 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006630:	b480      	push	{r7}
 8006632:	b087      	sub	sp, #28
 8006634:	af00      	add	r7, sp, #0
 8006636:	6078      	str	r0, [r7, #4]
 8006638:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	6a1b      	ldr	r3, [r3, #32]
 800663e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	6a1b      	ldr	r3, [r3, #32]
 800664a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	685b      	ldr	r3, [r3, #4]
 8006650:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	69db      	ldr	r3, [r3, #28]
 8006656:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800665e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	f023 0303 	bic.w	r3, r3, #3
 8006666:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006668:	683b      	ldr	r3, [r7, #0]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	68fa      	ldr	r2, [r7, #12]
 800666e:	4313      	orrs	r3, r2
 8006670:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006672:	697b      	ldr	r3, [r7, #20]
 8006674:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006678:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800667a:	683b      	ldr	r3, [r7, #0]
 800667c:	689b      	ldr	r3, [r3, #8]
 800667e:	021b      	lsls	r3, r3, #8
 8006680:	697a      	ldr	r2, [r7, #20]
 8006682:	4313      	orrs	r3, r2
 8006684:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	4a21      	ldr	r2, [pc, #132]	; (8006710 <TIM_OC3_SetConfig+0xe0>)
 800668a:	4293      	cmp	r3, r2
 800668c:	d003      	beq.n	8006696 <TIM_OC3_SetConfig+0x66>
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	4a20      	ldr	r2, [pc, #128]	; (8006714 <TIM_OC3_SetConfig+0xe4>)
 8006692:	4293      	cmp	r3, r2
 8006694:	d10d      	bne.n	80066b2 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006696:	697b      	ldr	r3, [r7, #20]
 8006698:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800669c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800669e:	683b      	ldr	r3, [r7, #0]
 80066a0:	68db      	ldr	r3, [r3, #12]
 80066a2:	021b      	lsls	r3, r3, #8
 80066a4:	697a      	ldr	r2, [r7, #20]
 80066a6:	4313      	orrs	r3, r2
 80066a8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80066aa:	697b      	ldr	r3, [r7, #20]
 80066ac:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80066b0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	4a16      	ldr	r2, [pc, #88]	; (8006710 <TIM_OC3_SetConfig+0xe0>)
 80066b6:	4293      	cmp	r3, r2
 80066b8:	d003      	beq.n	80066c2 <TIM_OC3_SetConfig+0x92>
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	4a15      	ldr	r2, [pc, #84]	; (8006714 <TIM_OC3_SetConfig+0xe4>)
 80066be:	4293      	cmp	r3, r2
 80066c0:	d113      	bne.n	80066ea <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80066c2:	693b      	ldr	r3, [r7, #16]
 80066c4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80066c8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80066ca:	693b      	ldr	r3, [r7, #16]
 80066cc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80066d0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80066d2:	683b      	ldr	r3, [r7, #0]
 80066d4:	695b      	ldr	r3, [r3, #20]
 80066d6:	011b      	lsls	r3, r3, #4
 80066d8:	693a      	ldr	r2, [r7, #16]
 80066da:	4313      	orrs	r3, r2
 80066dc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80066de:	683b      	ldr	r3, [r7, #0]
 80066e0:	699b      	ldr	r3, [r3, #24]
 80066e2:	011b      	lsls	r3, r3, #4
 80066e4:	693a      	ldr	r2, [r7, #16]
 80066e6:	4313      	orrs	r3, r2
 80066e8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	693a      	ldr	r2, [r7, #16]
 80066ee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	68fa      	ldr	r2, [r7, #12]
 80066f4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80066f6:	683b      	ldr	r3, [r7, #0]
 80066f8:	685a      	ldr	r2, [r3, #4]
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	697a      	ldr	r2, [r7, #20]
 8006702:	621a      	str	r2, [r3, #32]
}
 8006704:	bf00      	nop
 8006706:	371c      	adds	r7, #28
 8006708:	46bd      	mov	sp, r7
 800670a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800670e:	4770      	bx	lr
 8006710:	40010000 	.word	0x40010000
 8006714:	40010400 	.word	0x40010400

08006718 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006718:	b480      	push	{r7}
 800671a:	b087      	sub	sp, #28
 800671c:	af00      	add	r7, sp, #0
 800671e:	6078      	str	r0, [r7, #4]
 8006720:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	6a1b      	ldr	r3, [r3, #32]
 8006726:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	6a1b      	ldr	r3, [r3, #32]
 8006732:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	685b      	ldr	r3, [r3, #4]
 8006738:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	69db      	ldr	r3, [r3, #28]
 800673e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006746:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800674e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006750:	683b      	ldr	r3, [r7, #0]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	021b      	lsls	r3, r3, #8
 8006756:	68fa      	ldr	r2, [r7, #12]
 8006758:	4313      	orrs	r3, r2
 800675a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800675c:	693b      	ldr	r3, [r7, #16]
 800675e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006762:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006764:	683b      	ldr	r3, [r7, #0]
 8006766:	689b      	ldr	r3, [r3, #8]
 8006768:	031b      	lsls	r3, r3, #12
 800676a:	693a      	ldr	r2, [r7, #16]
 800676c:	4313      	orrs	r3, r2
 800676e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	4a12      	ldr	r2, [pc, #72]	; (80067bc <TIM_OC4_SetConfig+0xa4>)
 8006774:	4293      	cmp	r3, r2
 8006776:	d003      	beq.n	8006780 <TIM_OC4_SetConfig+0x68>
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	4a11      	ldr	r2, [pc, #68]	; (80067c0 <TIM_OC4_SetConfig+0xa8>)
 800677c:	4293      	cmp	r3, r2
 800677e:	d109      	bne.n	8006794 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006780:	697b      	ldr	r3, [r7, #20]
 8006782:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006786:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006788:	683b      	ldr	r3, [r7, #0]
 800678a:	695b      	ldr	r3, [r3, #20]
 800678c:	019b      	lsls	r3, r3, #6
 800678e:	697a      	ldr	r2, [r7, #20]
 8006790:	4313      	orrs	r3, r2
 8006792:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	697a      	ldr	r2, [r7, #20]
 8006798:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	68fa      	ldr	r2, [r7, #12]
 800679e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80067a0:	683b      	ldr	r3, [r7, #0]
 80067a2:	685a      	ldr	r2, [r3, #4]
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	693a      	ldr	r2, [r7, #16]
 80067ac:	621a      	str	r2, [r3, #32]
}
 80067ae:	bf00      	nop
 80067b0:	371c      	adds	r7, #28
 80067b2:	46bd      	mov	sp, r7
 80067b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067b8:	4770      	bx	lr
 80067ba:	bf00      	nop
 80067bc:	40010000 	.word	0x40010000
 80067c0:	40010400 	.word	0x40010400

080067c4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80067c4:	b480      	push	{r7}
 80067c6:	b087      	sub	sp, #28
 80067c8:	af00      	add	r7, sp, #0
 80067ca:	60f8      	str	r0, [r7, #12]
 80067cc:	60b9      	str	r1, [r7, #8]
 80067ce:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	6a1b      	ldr	r3, [r3, #32]
 80067d4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	6a1b      	ldr	r3, [r3, #32]
 80067da:	f023 0201 	bic.w	r2, r3, #1
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	699b      	ldr	r3, [r3, #24]
 80067e6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80067e8:	693b      	ldr	r3, [r7, #16]
 80067ea:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80067ee:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	011b      	lsls	r3, r3, #4
 80067f4:	693a      	ldr	r2, [r7, #16]
 80067f6:	4313      	orrs	r3, r2
 80067f8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80067fa:	697b      	ldr	r3, [r7, #20]
 80067fc:	f023 030a 	bic.w	r3, r3, #10
 8006800:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006802:	697a      	ldr	r2, [r7, #20]
 8006804:	68bb      	ldr	r3, [r7, #8]
 8006806:	4313      	orrs	r3, r2
 8006808:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	693a      	ldr	r2, [r7, #16]
 800680e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	697a      	ldr	r2, [r7, #20]
 8006814:	621a      	str	r2, [r3, #32]
}
 8006816:	bf00      	nop
 8006818:	371c      	adds	r7, #28
 800681a:	46bd      	mov	sp, r7
 800681c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006820:	4770      	bx	lr

08006822 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006822:	b480      	push	{r7}
 8006824:	b087      	sub	sp, #28
 8006826:	af00      	add	r7, sp, #0
 8006828:	60f8      	str	r0, [r7, #12]
 800682a:	60b9      	str	r1, [r7, #8]
 800682c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	6a1b      	ldr	r3, [r3, #32]
 8006832:	f023 0210 	bic.w	r2, r3, #16
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	699b      	ldr	r3, [r3, #24]
 800683e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	6a1b      	ldr	r3, [r3, #32]
 8006844:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006846:	697b      	ldr	r3, [r7, #20]
 8006848:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800684c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	031b      	lsls	r3, r3, #12
 8006852:	697a      	ldr	r2, [r7, #20]
 8006854:	4313      	orrs	r3, r2
 8006856:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006858:	693b      	ldr	r3, [r7, #16]
 800685a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800685e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006860:	68bb      	ldr	r3, [r7, #8]
 8006862:	011b      	lsls	r3, r3, #4
 8006864:	693a      	ldr	r2, [r7, #16]
 8006866:	4313      	orrs	r3, r2
 8006868:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	697a      	ldr	r2, [r7, #20]
 800686e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	693a      	ldr	r2, [r7, #16]
 8006874:	621a      	str	r2, [r3, #32]
}
 8006876:	bf00      	nop
 8006878:	371c      	adds	r7, #28
 800687a:	46bd      	mov	sp, r7
 800687c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006880:	4770      	bx	lr

08006882 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006882:	b480      	push	{r7}
 8006884:	b085      	sub	sp, #20
 8006886:	af00      	add	r7, sp, #0
 8006888:	6078      	str	r0, [r7, #4]
 800688a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	689b      	ldr	r3, [r3, #8]
 8006890:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006898:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800689a:	683a      	ldr	r2, [r7, #0]
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	4313      	orrs	r3, r2
 80068a0:	f043 0307 	orr.w	r3, r3, #7
 80068a4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	68fa      	ldr	r2, [r7, #12]
 80068aa:	609a      	str	r2, [r3, #8]
}
 80068ac:	bf00      	nop
 80068ae:	3714      	adds	r7, #20
 80068b0:	46bd      	mov	sp, r7
 80068b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068b6:	4770      	bx	lr

080068b8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80068b8:	b480      	push	{r7}
 80068ba:	b087      	sub	sp, #28
 80068bc:	af00      	add	r7, sp, #0
 80068be:	60f8      	str	r0, [r7, #12]
 80068c0:	60b9      	str	r1, [r7, #8]
 80068c2:	607a      	str	r2, [r7, #4]
 80068c4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	689b      	ldr	r3, [r3, #8]
 80068ca:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80068cc:	697b      	ldr	r3, [r7, #20]
 80068ce:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80068d2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80068d4:	683b      	ldr	r3, [r7, #0]
 80068d6:	021a      	lsls	r2, r3, #8
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	431a      	orrs	r2, r3
 80068dc:	68bb      	ldr	r3, [r7, #8]
 80068de:	4313      	orrs	r3, r2
 80068e0:	697a      	ldr	r2, [r7, #20]
 80068e2:	4313      	orrs	r3, r2
 80068e4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	697a      	ldr	r2, [r7, #20]
 80068ea:	609a      	str	r2, [r3, #8]
}
 80068ec:	bf00      	nop
 80068ee:	371c      	adds	r7, #28
 80068f0:	46bd      	mov	sp, r7
 80068f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068f6:	4770      	bx	lr

080068f8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80068f8:	b480      	push	{r7}
 80068fa:	b087      	sub	sp, #28
 80068fc:	af00      	add	r7, sp, #0
 80068fe:	60f8      	str	r0, [r7, #12]
 8006900:	60b9      	str	r1, [r7, #8]
 8006902:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006904:	68bb      	ldr	r3, [r7, #8]
 8006906:	f003 031f 	and.w	r3, r3, #31
 800690a:	2201      	movs	r2, #1
 800690c:	fa02 f303 	lsl.w	r3, r2, r3
 8006910:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	6a1a      	ldr	r2, [r3, #32]
 8006916:	697b      	ldr	r3, [r7, #20]
 8006918:	43db      	mvns	r3, r3
 800691a:	401a      	ands	r2, r3
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	6a1a      	ldr	r2, [r3, #32]
 8006924:	68bb      	ldr	r3, [r7, #8]
 8006926:	f003 031f 	and.w	r3, r3, #31
 800692a:	6879      	ldr	r1, [r7, #4]
 800692c:	fa01 f303 	lsl.w	r3, r1, r3
 8006930:	431a      	orrs	r2, r3
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	621a      	str	r2, [r3, #32]
}
 8006936:	bf00      	nop
 8006938:	371c      	adds	r7, #28
 800693a:	46bd      	mov	sp, r7
 800693c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006940:	4770      	bx	lr

08006942 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006942:	b480      	push	{r7}
 8006944:	b085      	sub	sp, #20
 8006946:	af00      	add	r7, sp, #0
 8006948:	6078      	str	r0, [r7, #4]
 800694a:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006952:	2b01      	cmp	r3, #1
 8006954:	d101      	bne.n	800695a <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006956:	2302      	movs	r3, #2
 8006958:	e032      	b.n	80069c0 <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	2201      	movs	r2, #1
 800695e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	2202      	movs	r2, #2
 8006966:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	685b      	ldr	r3, [r3, #4]
 8006970:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	689b      	ldr	r3, [r3, #8]
 8006978:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006980:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006982:	683b      	ldr	r3, [r7, #0]
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	68fa      	ldr	r2, [r7, #12]
 8006988:	4313      	orrs	r3, r2
 800698a:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 800698c:	68bb      	ldr	r3, [r7, #8]
 800698e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006992:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006994:	683b      	ldr	r3, [r7, #0]
 8006996:	685b      	ldr	r3, [r3, #4]
 8006998:	68ba      	ldr	r2, [r7, #8]
 800699a:	4313      	orrs	r3, r2
 800699c:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	68fa      	ldr	r2, [r7, #12]
 80069a4:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	68ba      	ldr	r2, [r7, #8]
 80069ac:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	2201      	movs	r2, #1
 80069b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	2200      	movs	r2, #0
 80069ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80069be:	2300      	movs	r3, #0
}
 80069c0:	4618      	mov	r0, r3
 80069c2:	3714      	adds	r7, #20
 80069c4:	46bd      	mov	sp, r7
 80069c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ca:	4770      	bx	lr

080069cc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80069cc:	b480      	push	{r7}
 80069ce:	b083      	sub	sp, #12
 80069d0:	af00      	add	r7, sp, #0
 80069d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80069d4:	bf00      	nop
 80069d6:	370c      	adds	r7, #12
 80069d8:	46bd      	mov	sp, r7
 80069da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069de:	4770      	bx	lr

080069e0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80069e0:	b480      	push	{r7}
 80069e2:	b083      	sub	sp, #12
 80069e4:	af00      	add	r7, sp, #0
 80069e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80069e8:	bf00      	nop
 80069ea:	370c      	adds	r7, #12
 80069ec:	46bd      	mov	sp, r7
 80069ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069f2:	4770      	bx	lr

080069f4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80069f4:	b580      	push	{r7, lr}
 80069f6:	b082      	sub	sp, #8
 80069f8:	af00      	add	r7, sp, #0
 80069fa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	d101      	bne.n	8006a06 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006a02:	2301      	movs	r3, #1
 8006a04:	e03f      	b.n	8006a86 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8006a0c:	b2db      	uxtb	r3, r3
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	d106      	bne.n	8006a20 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	2200      	movs	r2, #0
 8006a16:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006a1a:	6878      	ldr	r0, [r7, #4]
 8006a1c:	f7fb fe94 	bl	8002748 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	2224      	movs	r2, #36	; 0x24
 8006a24:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	68da      	ldr	r2, [r3, #12]
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006a36:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006a38:	6878      	ldr	r0, [r7, #4]
 8006a3a:	f000 fa65 	bl	8006f08 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	691a      	ldr	r2, [r3, #16]
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006a4c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	695a      	ldr	r2, [r3, #20]
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006a5c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	68da      	ldr	r2, [r3, #12]
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006a6c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	2200      	movs	r2, #0
 8006a72:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	2220      	movs	r2, #32
 8006a78:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	2220      	movs	r2, #32
 8006a80:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8006a84:	2300      	movs	r3, #0
}
 8006a86:	4618      	mov	r0, r3
 8006a88:	3708      	adds	r7, #8
 8006a8a:	46bd      	mov	sp, r7
 8006a8c:	bd80      	pop	{r7, pc}
	...

08006a90 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006a90:	b580      	push	{r7, lr}
 8006a92:	b088      	sub	sp, #32
 8006a94:	af00      	add	r7, sp, #0
 8006a96:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	68db      	ldr	r3, [r3, #12]
 8006aa6:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	695b      	ldr	r3, [r3, #20]
 8006aae:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8006ab0:	2300      	movs	r3, #0
 8006ab2:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8006ab4:	2300      	movs	r3, #0
 8006ab6:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8006ab8:	69fb      	ldr	r3, [r7, #28]
 8006aba:	f003 030f 	and.w	r3, r3, #15
 8006abe:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8006ac0:	693b      	ldr	r3, [r7, #16]
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	d10d      	bne.n	8006ae2 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006ac6:	69fb      	ldr	r3, [r7, #28]
 8006ac8:	f003 0320 	and.w	r3, r3, #32
 8006acc:	2b00      	cmp	r3, #0
 8006ace:	d008      	beq.n	8006ae2 <HAL_UART_IRQHandler+0x52>
 8006ad0:	69bb      	ldr	r3, [r7, #24]
 8006ad2:	f003 0320 	and.w	r3, r3, #32
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	d003      	beq.n	8006ae2 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8006ada:	6878      	ldr	r0, [r7, #4]
 8006adc:	f000 f992 	bl	8006e04 <UART_Receive_IT>
      return;
 8006ae0:	e0cc      	b.n	8006c7c <HAL_UART_IRQHandler+0x1ec>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8006ae2:	693b      	ldr	r3, [r7, #16]
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	f000 80ab 	beq.w	8006c40 <HAL_UART_IRQHandler+0x1b0>
 8006aea:	697b      	ldr	r3, [r7, #20]
 8006aec:	f003 0301 	and.w	r3, r3, #1
 8006af0:	2b00      	cmp	r3, #0
 8006af2:	d105      	bne.n	8006b00 <HAL_UART_IRQHandler+0x70>
 8006af4:	69bb      	ldr	r3, [r7, #24]
 8006af6:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	f000 80a0 	beq.w	8006c40 <HAL_UART_IRQHandler+0x1b0>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8006b00:	69fb      	ldr	r3, [r7, #28]
 8006b02:	f003 0301 	and.w	r3, r3, #1
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	d00a      	beq.n	8006b20 <HAL_UART_IRQHandler+0x90>
 8006b0a:	69bb      	ldr	r3, [r7, #24]
 8006b0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006b10:	2b00      	cmp	r3, #0
 8006b12:	d005      	beq.n	8006b20 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b18:	f043 0201 	orr.w	r2, r3, #1
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006b20:	69fb      	ldr	r3, [r7, #28]
 8006b22:	f003 0304 	and.w	r3, r3, #4
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	d00a      	beq.n	8006b40 <HAL_UART_IRQHandler+0xb0>
 8006b2a:	697b      	ldr	r3, [r7, #20]
 8006b2c:	f003 0301 	and.w	r3, r3, #1
 8006b30:	2b00      	cmp	r3, #0
 8006b32:	d005      	beq.n	8006b40 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b38:	f043 0202 	orr.w	r2, r3, #2
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006b40:	69fb      	ldr	r3, [r7, #28]
 8006b42:	f003 0302 	and.w	r3, r3, #2
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	d00a      	beq.n	8006b60 <HAL_UART_IRQHandler+0xd0>
 8006b4a:	697b      	ldr	r3, [r7, #20]
 8006b4c:	f003 0301 	and.w	r3, r3, #1
 8006b50:	2b00      	cmp	r3, #0
 8006b52:	d005      	beq.n	8006b60 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b58:	f043 0204 	orr.w	r2, r3, #4
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006b60:	69fb      	ldr	r3, [r7, #28]
 8006b62:	f003 0308 	and.w	r3, r3, #8
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	d00a      	beq.n	8006b80 <HAL_UART_IRQHandler+0xf0>
 8006b6a:	697b      	ldr	r3, [r7, #20]
 8006b6c:	f003 0301 	and.w	r3, r3, #1
 8006b70:	2b00      	cmp	r3, #0
 8006b72:	d005      	beq.n	8006b80 <HAL_UART_IRQHandler+0xf0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b78:	f043 0208 	orr.w	r2, r3, #8
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b84:	2b00      	cmp	r3, #0
 8006b86:	d078      	beq.n	8006c7a <HAL_UART_IRQHandler+0x1ea>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006b88:	69fb      	ldr	r3, [r7, #28]
 8006b8a:	f003 0320 	and.w	r3, r3, #32
 8006b8e:	2b00      	cmp	r3, #0
 8006b90:	d007      	beq.n	8006ba2 <HAL_UART_IRQHandler+0x112>
 8006b92:	69bb      	ldr	r3, [r7, #24]
 8006b94:	f003 0320 	and.w	r3, r3, #32
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	d002      	beq.n	8006ba2 <HAL_UART_IRQHandler+0x112>
      {
        UART_Receive_IT(huart);
 8006b9c:	6878      	ldr	r0, [r7, #4]
 8006b9e:	f000 f931 	bl	8006e04 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	695b      	ldr	r3, [r3, #20]
 8006ba8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006bac:	2b40      	cmp	r3, #64	; 0x40
 8006bae:	bf0c      	ite	eq
 8006bb0:	2301      	moveq	r3, #1
 8006bb2:	2300      	movne	r3, #0
 8006bb4:	b2db      	uxtb	r3, r3
 8006bb6:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006bbc:	f003 0308 	and.w	r3, r3, #8
 8006bc0:	2b00      	cmp	r3, #0
 8006bc2:	d102      	bne.n	8006bca <HAL_UART_IRQHandler+0x13a>
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	d031      	beq.n	8006c2e <HAL_UART_IRQHandler+0x19e>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006bca:	6878      	ldr	r0, [r7, #4]
 8006bcc:	f000 f87a 	bl	8006cc4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	695b      	ldr	r3, [r3, #20]
 8006bd6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006bda:	2b40      	cmp	r3, #64	; 0x40
 8006bdc:	d123      	bne.n	8006c26 <HAL_UART_IRQHandler+0x196>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	695a      	ldr	r2, [r3, #20]
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006bec:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	d013      	beq.n	8006c1e <HAL_UART_IRQHandler+0x18e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006bfa:	4a22      	ldr	r2, [pc, #136]	; (8006c84 <HAL_UART_IRQHandler+0x1f4>)
 8006bfc:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006c02:	4618      	mov	r0, r3
 8006c04:	f7fb ff68 	bl	8002ad8 <HAL_DMA_Abort_IT>
 8006c08:	4603      	mov	r3, r0
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	d016      	beq.n	8006c3c <HAL_UART_IRQHandler+0x1ac>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006c12:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006c14:	687a      	ldr	r2, [r7, #4]
 8006c16:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8006c18:	4610      	mov	r0, r2
 8006c1a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006c1c:	e00e      	b.n	8006c3c <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006c1e:	6878      	ldr	r0, [r7, #4]
 8006c20:	f000 f846 	bl	8006cb0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006c24:	e00a      	b.n	8006c3c <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006c26:	6878      	ldr	r0, [r7, #4]
 8006c28:	f000 f842 	bl	8006cb0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006c2c:	e006      	b.n	8006c3c <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006c2e:	6878      	ldr	r0, [r7, #4]
 8006c30:	f000 f83e 	bl	8006cb0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	2200      	movs	r2, #0
 8006c38:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8006c3a:	e01e      	b.n	8006c7a <HAL_UART_IRQHandler+0x1ea>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006c3c:	bf00      	nop
    return;
 8006c3e:	e01c      	b.n	8006c7a <HAL_UART_IRQHandler+0x1ea>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006c40:	69fb      	ldr	r3, [r7, #28]
 8006c42:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	d008      	beq.n	8006c5c <HAL_UART_IRQHandler+0x1cc>
 8006c4a:	69bb      	ldr	r3, [r7, #24]
 8006c4c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006c50:	2b00      	cmp	r3, #0
 8006c52:	d003      	beq.n	8006c5c <HAL_UART_IRQHandler+0x1cc>
  {
    UART_Transmit_IT(huart);
 8006c54:	6878      	ldr	r0, [r7, #4]
 8006c56:	f000 f867 	bl	8006d28 <UART_Transmit_IT>
    return;
 8006c5a:	e00f      	b.n	8006c7c <HAL_UART_IRQHandler+0x1ec>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006c5c:	69fb      	ldr	r3, [r7, #28]
 8006c5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	d00a      	beq.n	8006c7c <HAL_UART_IRQHandler+0x1ec>
 8006c66:	69bb      	ldr	r3, [r7, #24]
 8006c68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c6c:	2b00      	cmp	r3, #0
 8006c6e:	d005      	beq.n	8006c7c <HAL_UART_IRQHandler+0x1ec>
  {
    UART_EndTransmit_IT(huart);
 8006c70:	6878      	ldr	r0, [r7, #4]
 8006c72:	f000 f8af 	bl	8006dd4 <UART_EndTransmit_IT>
    return;
 8006c76:	bf00      	nop
 8006c78:	e000      	b.n	8006c7c <HAL_UART_IRQHandler+0x1ec>
    return;
 8006c7a:	bf00      	nop
  }
}
 8006c7c:	3720      	adds	r7, #32
 8006c7e:	46bd      	mov	sp, r7
 8006c80:	bd80      	pop	{r7, pc}
 8006c82:	bf00      	nop
 8006c84:	08006d01 	.word	0x08006d01

08006c88 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006c88:	b480      	push	{r7}
 8006c8a:	b083      	sub	sp, #12
 8006c8c:	af00      	add	r7, sp, #0
 8006c8e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8006c90:	bf00      	nop
 8006c92:	370c      	adds	r7, #12
 8006c94:	46bd      	mov	sp, r7
 8006c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c9a:	4770      	bx	lr

08006c9c <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8006c9c:	b480      	push	{r7}
 8006c9e:	b083      	sub	sp, #12
 8006ca0:	af00      	add	r7, sp, #0
 8006ca2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8006ca4:	bf00      	nop
 8006ca6:	370c      	adds	r7, #12
 8006ca8:	46bd      	mov	sp, r7
 8006caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cae:	4770      	bx	lr

08006cb0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006cb0:	b480      	push	{r7}
 8006cb2:	b083      	sub	sp, #12
 8006cb4:	af00      	add	r7, sp, #0
 8006cb6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006cb8:	bf00      	nop
 8006cba:	370c      	adds	r7, #12
 8006cbc:	46bd      	mov	sp, r7
 8006cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cc2:	4770      	bx	lr

08006cc4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006cc4:	b480      	push	{r7}
 8006cc6:	b083      	sub	sp, #12
 8006cc8:	af00      	add	r7, sp, #0
 8006cca:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	68da      	ldr	r2, [r3, #12]
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8006cda:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	695a      	ldr	r2, [r3, #20]
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	f022 0201 	bic.w	r2, r2, #1
 8006cea:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	2220      	movs	r2, #32
 8006cf0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8006cf4:	bf00      	nop
 8006cf6:	370c      	adds	r7, #12
 8006cf8:	46bd      	mov	sp, r7
 8006cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cfe:	4770      	bx	lr

08006d00 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006d00:	b580      	push	{r7, lr}
 8006d02:	b084      	sub	sp, #16
 8006d04:	af00      	add	r7, sp, #0
 8006d06:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d0c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006d0e:	68fb      	ldr	r3, [r7, #12]
 8006d10:	2200      	movs	r2, #0
 8006d12:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	2200      	movs	r2, #0
 8006d18:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006d1a:	68f8      	ldr	r0, [r7, #12]
 8006d1c:	f7ff ffc8 	bl	8006cb0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006d20:	bf00      	nop
 8006d22:	3710      	adds	r7, #16
 8006d24:	46bd      	mov	sp, r7
 8006d26:	bd80      	pop	{r7, pc}

08006d28 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006d28:	b480      	push	{r7}
 8006d2a:	b085      	sub	sp, #20
 8006d2c:	af00      	add	r7, sp, #0
 8006d2e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8006d36:	b2db      	uxtb	r3, r3
 8006d38:	2b21      	cmp	r3, #33	; 0x21
 8006d3a:	d144      	bne.n	8006dc6 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	689b      	ldr	r3, [r3, #8]
 8006d40:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006d44:	d11a      	bne.n	8006d7c <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	6a1b      	ldr	r3, [r3, #32]
 8006d4a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	881b      	ldrh	r3, [r3, #0]
 8006d50:	461a      	mov	r2, r3
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006d5a:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	691b      	ldr	r3, [r3, #16]
 8006d60:	2b00      	cmp	r3, #0
 8006d62:	d105      	bne.n	8006d70 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	6a1b      	ldr	r3, [r3, #32]
 8006d68:	1c9a      	adds	r2, r3, #2
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	621a      	str	r2, [r3, #32]
 8006d6e:	e00e      	b.n	8006d8e <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	6a1b      	ldr	r3, [r3, #32]
 8006d74:	1c5a      	adds	r2, r3, #1
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	621a      	str	r2, [r3, #32]
 8006d7a:	e008      	b.n	8006d8e <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	6a1b      	ldr	r3, [r3, #32]
 8006d80:	1c59      	adds	r1, r3, #1
 8006d82:	687a      	ldr	r2, [r7, #4]
 8006d84:	6211      	str	r1, [r2, #32]
 8006d86:	781a      	ldrb	r2, [r3, #0]
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006d92:	b29b      	uxth	r3, r3
 8006d94:	3b01      	subs	r3, #1
 8006d96:	b29b      	uxth	r3, r3
 8006d98:	687a      	ldr	r2, [r7, #4]
 8006d9a:	4619      	mov	r1, r3
 8006d9c:	84d1      	strh	r1, [r2, #38]	; 0x26
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	d10f      	bne.n	8006dc2 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	68da      	ldr	r2, [r3, #12]
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006db0:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	68da      	ldr	r2, [r3, #12]
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006dc0:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006dc2:	2300      	movs	r3, #0
 8006dc4:	e000      	b.n	8006dc8 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8006dc6:	2302      	movs	r3, #2
  }
}
 8006dc8:	4618      	mov	r0, r3
 8006dca:	3714      	adds	r7, #20
 8006dcc:	46bd      	mov	sp, r7
 8006dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dd2:	4770      	bx	lr

08006dd4 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006dd4:	b580      	push	{r7, lr}
 8006dd6:	b082      	sub	sp, #8
 8006dd8:	af00      	add	r7, sp, #0
 8006dda:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	68da      	ldr	r2, [r3, #12]
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006dea:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	2220      	movs	r2, #32
 8006df0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006df4:	6878      	ldr	r0, [r7, #4]
 8006df6:	f7ff ff47 	bl	8006c88 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006dfa:	2300      	movs	r3, #0
}
 8006dfc:	4618      	mov	r0, r3
 8006dfe:	3708      	adds	r7, #8
 8006e00:	46bd      	mov	sp, r7
 8006e02:	bd80      	pop	{r7, pc}

08006e04 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006e04:	b580      	push	{r7, lr}
 8006e06:	b084      	sub	sp, #16
 8006e08:	af00      	add	r7, sp, #0
 8006e0a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8006e12:	b2db      	uxtb	r3, r3
 8006e14:	2b22      	cmp	r3, #34	; 0x22
 8006e16:	d171      	bne.n	8006efc <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	689b      	ldr	r3, [r3, #8]
 8006e1c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006e20:	d123      	bne.n	8006e6a <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e26:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	691b      	ldr	r3, [r3, #16]
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	d10e      	bne.n	8006e4e <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	685b      	ldr	r3, [r3, #4]
 8006e36:	b29b      	uxth	r3, r3
 8006e38:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006e3c:	b29a      	uxth	r2, r3
 8006e3e:	68fb      	ldr	r3, [r7, #12]
 8006e40:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e46:	1c9a      	adds	r2, r3, #2
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	629a      	str	r2, [r3, #40]	; 0x28
 8006e4c:	e029      	b.n	8006ea2 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	685b      	ldr	r3, [r3, #4]
 8006e54:	b29b      	uxth	r3, r3
 8006e56:	b2db      	uxtb	r3, r3
 8006e58:	b29a      	uxth	r2, r3
 8006e5a:	68fb      	ldr	r3, [r7, #12]
 8006e5c:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e62:	1c5a      	adds	r2, r3, #1
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	629a      	str	r2, [r3, #40]	; 0x28
 8006e68:	e01b      	b.n	8006ea2 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	691b      	ldr	r3, [r3, #16]
 8006e6e:	2b00      	cmp	r3, #0
 8006e70:	d10a      	bne.n	8006e88 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	6858      	ldr	r0, [r3, #4]
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e7c:	1c59      	adds	r1, r3, #1
 8006e7e:	687a      	ldr	r2, [r7, #4]
 8006e80:	6291      	str	r1, [r2, #40]	; 0x28
 8006e82:	b2c2      	uxtb	r2, r0
 8006e84:	701a      	strb	r2, [r3, #0]
 8006e86:	e00c      	b.n	8006ea2 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	685b      	ldr	r3, [r3, #4]
 8006e8e:	b2da      	uxtb	r2, r3
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e94:	1c58      	adds	r0, r3, #1
 8006e96:	6879      	ldr	r1, [r7, #4]
 8006e98:	6288      	str	r0, [r1, #40]	; 0x28
 8006e9a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8006e9e:	b2d2      	uxtb	r2, r2
 8006ea0:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006ea6:	b29b      	uxth	r3, r3
 8006ea8:	3b01      	subs	r3, #1
 8006eaa:	b29b      	uxth	r3, r3
 8006eac:	687a      	ldr	r2, [r7, #4]
 8006eae:	4619      	mov	r1, r3
 8006eb0:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8006eb2:	2b00      	cmp	r3, #0
 8006eb4:	d120      	bne.n	8006ef8 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	68da      	ldr	r2, [r3, #12]
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	f022 0220 	bic.w	r2, r2, #32
 8006ec4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	68da      	ldr	r2, [r3, #12]
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006ed4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	695a      	ldr	r2, [r3, #20]
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	f022 0201 	bic.w	r2, r2, #1
 8006ee4:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	2220      	movs	r2, #32
 8006eea:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8006eee:	6878      	ldr	r0, [r7, #4]
 8006ef0:	f7ff fed4 	bl	8006c9c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8006ef4:	2300      	movs	r3, #0
 8006ef6:	e002      	b.n	8006efe <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8006ef8:	2300      	movs	r3, #0
 8006efa:	e000      	b.n	8006efe <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8006efc:	2302      	movs	r3, #2
  }
}
 8006efe:	4618      	mov	r0, r3
 8006f00:	3710      	adds	r7, #16
 8006f02:	46bd      	mov	sp, r7
 8006f04:	bd80      	pop	{r7, pc}
	...

08006f08 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006f08:	b5b0      	push	{r4, r5, r7, lr}
 8006f0a:	b084      	sub	sp, #16
 8006f0c:	af00      	add	r7, sp, #0
 8006f0e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	691b      	ldr	r3, [r3, #16]
 8006f16:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	68da      	ldr	r2, [r3, #12]
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	430a      	orrs	r2, r1
 8006f24:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	689a      	ldr	r2, [r3, #8]
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	691b      	ldr	r3, [r3, #16]
 8006f2e:	431a      	orrs	r2, r3
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	695b      	ldr	r3, [r3, #20]
 8006f34:	431a      	orrs	r2, r3
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	69db      	ldr	r3, [r3, #28]
 8006f3a:	4313      	orrs	r3, r2
 8006f3c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	68db      	ldr	r3, [r3, #12]
 8006f44:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8006f48:	f023 030c 	bic.w	r3, r3, #12
 8006f4c:	687a      	ldr	r2, [r7, #4]
 8006f4e:	6812      	ldr	r2, [r2, #0]
 8006f50:	68f9      	ldr	r1, [r7, #12]
 8006f52:	430b      	orrs	r3, r1
 8006f54:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	695b      	ldr	r3, [r3, #20]
 8006f5c:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	699a      	ldr	r2, [r3, #24]
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	430a      	orrs	r2, r1
 8006f6a:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	69db      	ldr	r3, [r3, #28]
 8006f70:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006f74:	f040 80e4 	bne.w	8007140 <UART_SetConfig+0x238>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	4aab      	ldr	r2, [pc, #684]	; (800722c <UART_SetConfig+0x324>)
 8006f7e:	4293      	cmp	r3, r2
 8006f80:	d004      	beq.n	8006f8c <UART_SetConfig+0x84>
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	4aaa      	ldr	r2, [pc, #680]	; (8007230 <UART_SetConfig+0x328>)
 8006f88:	4293      	cmp	r3, r2
 8006f8a:	d16c      	bne.n	8007066 <UART_SetConfig+0x15e>
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8006f8c:	f7fe fd42 	bl	8005a14 <HAL_RCC_GetPCLK2Freq>
 8006f90:	4602      	mov	r2, r0
 8006f92:	4613      	mov	r3, r2
 8006f94:	009b      	lsls	r3, r3, #2
 8006f96:	4413      	add	r3, r2
 8006f98:	009a      	lsls	r2, r3, #2
 8006f9a:	441a      	add	r2, r3
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	685b      	ldr	r3, [r3, #4]
 8006fa0:	005b      	lsls	r3, r3, #1
 8006fa2:	fbb2 f3f3 	udiv	r3, r2, r3
 8006fa6:	4aa3      	ldr	r2, [pc, #652]	; (8007234 <UART_SetConfig+0x32c>)
 8006fa8:	fba2 2303 	umull	r2, r3, r2, r3
 8006fac:	095b      	lsrs	r3, r3, #5
 8006fae:	011c      	lsls	r4, r3, #4
 8006fb0:	f7fe fd30 	bl	8005a14 <HAL_RCC_GetPCLK2Freq>
 8006fb4:	4602      	mov	r2, r0
 8006fb6:	4613      	mov	r3, r2
 8006fb8:	009b      	lsls	r3, r3, #2
 8006fba:	4413      	add	r3, r2
 8006fbc:	009a      	lsls	r2, r3, #2
 8006fbe:	441a      	add	r2, r3
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	685b      	ldr	r3, [r3, #4]
 8006fc4:	005b      	lsls	r3, r3, #1
 8006fc6:	fbb2 f5f3 	udiv	r5, r2, r3
 8006fca:	f7fe fd23 	bl	8005a14 <HAL_RCC_GetPCLK2Freq>
 8006fce:	4602      	mov	r2, r0
 8006fd0:	4613      	mov	r3, r2
 8006fd2:	009b      	lsls	r3, r3, #2
 8006fd4:	4413      	add	r3, r2
 8006fd6:	009a      	lsls	r2, r3, #2
 8006fd8:	441a      	add	r2, r3
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	685b      	ldr	r3, [r3, #4]
 8006fde:	005b      	lsls	r3, r3, #1
 8006fe0:	fbb2 f3f3 	udiv	r3, r2, r3
 8006fe4:	4a93      	ldr	r2, [pc, #588]	; (8007234 <UART_SetConfig+0x32c>)
 8006fe6:	fba2 2303 	umull	r2, r3, r2, r3
 8006fea:	095b      	lsrs	r3, r3, #5
 8006fec:	2264      	movs	r2, #100	; 0x64
 8006fee:	fb02 f303 	mul.w	r3, r2, r3
 8006ff2:	1aeb      	subs	r3, r5, r3
 8006ff4:	00db      	lsls	r3, r3, #3
 8006ff6:	3332      	adds	r3, #50	; 0x32
 8006ff8:	4a8e      	ldr	r2, [pc, #568]	; (8007234 <UART_SetConfig+0x32c>)
 8006ffa:	fba2 2303 	umull	r2, r3, r2, r3
 8006ffe:	095b      	lsrs	r3, r3, #5
 8007000:	005b      	lsls	r3, r3, #1
 8007002:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8007006:	441c      	add	r4, r3
 8007008:	f7fe fd04 	bl	8005a14 <HAL_RCC_GetPCLK2Freq>
 800700c:	4602      	mov	r2, r0
 800700e:	4613      	mov	r3, r2
 8007010:	009b      	lsls	r3, r3, #2
 8007012:	4413      	add	r3, r2
 8007014:	009a      	lsls	r2, r3, #2
 8007016:	441a      	add	r2, r3
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	685b      	ldr	r3, [r3, #4]
 800701c:	005b      	lsls	r3, r3, #1
 800701e:	fbb2 f5f3 	udiv	r5, r2, r3
 8007022:	f7fe fcf7 	bl	8005a14 <HAL_RCC_GetPCLK2Freq>
 8007026:	4602      	mov	r2, r0
 8007028:	4613      	mov	r3, r2
 800702a:	009b      	lsls	r3, r3, #2
 800702c:	4413      	add	r3, r2
 800702e:	009a      	lsls	r2, r3, #2
 8007030:	441a      	add	r2, r3
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	685b      	ldr	r3, [r3, #4]
 8007036:	005b      	lsls	r3, r3, #1
 8007038:	fbb2 f3f3 	udiv	r3, r2, r3
 800703c:	4a7d      	ldr	r2, [pc, #500]	; (8007234 <UART_SetConfig+0x32c>)
 800703e:	fba2 2303 	umull	r2, r3, r2, r3
 8007042:	095b      	lsrs	r3, r3, #5
 8007044:	2264      	movs	r2, #100	; 0x64
 8007046:	fb02 f303 	mul.w	r3, r2, r3
 800704a:	1aeb      	subs	r3, r5, r3
 800704c:	00db      	lsls	r3, r3, #3
 800704e:	3332      	adds	r3, #50	; 0x32
 8007050:	4a78      	ldr	r2, [pc, #480]	; (8007234 <UART_SetConfig+0x32c>)
 8007052:	fba2 2303 	umull	r2, r3, r2, r3
 8007056:	095b      	lsrs	r3, r3, #5
 8007058:	f003 0207 	and.w	r2, r3, #7
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	4422      	add	r2, r4
 8007062:	609a      	str	r2, [r3, #8]
 8007064:	e154      	b.n	8007310 <UART_SetConfig+0x408>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8007066:	f7fe fcc1 	bl	80059ec <HAL_RCC_GetPCLK1Freq>
 800706a:	4602      	mov	r2, r0
 800706c:	4613      	mov	r3, r2
 800706e:	009b      	lsls	r3, r3, #2
 8007070:	4413      	add	r3, r2
 8007072:	009a      	lsls	r2, r3, #2
 8007074:	441a      	add	r2, r3
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	685b      	ldr	r3, [r3, #4]
 800707a:	005b      	lsls	r3, r3, #1
 800707c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007080:	4a6c      	ldr	r2, [pc, #432]	; (8007234 <UART_SetConfig+0x32c>)
 8007082:	fba2 2303 	umull	r2, r3, r2, r3
 8007086:	095b      	lsrs	r3, r3, #5
 8007088:	011c      	lsls	r4, r3, #4
 800708a:	f7fe fcaf 	bl	80059ec <HAL_RCC_GetPCLK1Freq>
 800708e:	4602      	mov	r2, r0
 8007090:	4613      	mov	r3, r2
 8007092:	009b      	lsls	r3, r3, #2
 8007094:	4413      	add	r3, r2
 8007096:	009a      	lsls	r2, r3, #2
 8007098:	441a      	add	r2, r3
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	685b      	ldr	r3, [r3, #4]
 800709e:	005b      	lsls	r3, r3, #1
 80070a0:	fbb2 f5f3 	udiv	r5, r2, r3
 80070a4:	f7fe fca2 	bl	80059ec <HAL_RCC_GetPCLK1Freq>
 80070a8:	4602      	mov	r2, r0
 80070aa:	4613      	mov	r3, r2
 80070ac:	009b      	lsls	r3, r3, #2
 80070ae:	4413      	add	r3, r2
 80070b0:	009a      	lsls	r2, r3, #2
 80070b2:	441a      	add	r2, r3
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	685b      	ldr	r3, [r3, #4]
 80070b8:	005b      	lsls	r3, r3, #1
 80070ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80070be:	4a5d      	ldr	r2, [pc, #372]	; (8007234 <UART_SetConfig+0x32c>)
 80070c0:	fba2 2303 	umull	r2, r3, r2, r3
 80070c4:	095b      	lsrs	r3, r3, #5
 80070c6:	2264      	movs	r2, #100	; 0x64
 80070c8:	fb02 f303 	mul.w	r3, r2, r3
 80070cc:	1aeb      	subs	r3, r5, r3
 80070ce:	00db      	lsls	r3, r3, #3
 80070d0:	3332      	adds	r3, #50	; 0x32
 80070d2:	4a58      	ldr	r2, [pc, #352]	; (8007234 <UART_SetConfig+0x32c>)
 80070d4:	fba2 2303 	umull	r2, r3, r2, r3
 80070d8:	095b      	lsrs	r3, r3, #5
 80070da:	005b      	lsls	r3, r3, #1
 80070dc:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80070e0:	441c      	add	r4, r3
 80070e2:	f7fe fc83 	bl	80059ec <HAL_RCC_GetPCLK1Freq>
 80070e6:	4602      	mov	r2, r0
 80070e8:	4613      	mov	r3, r2
 80070ea:	009b      	lsls	r3, r3, #2
 80070ec:	4413      	add	r3, r2
 80070ee:	009a      	lsls	r2, r3, #2
 80070f0:	441a      	add	r2, r3
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	685b      	ldr	r3, [r3, #4]
 80070f6:	005b      	lsls	r3, r3, #1
 80070f8:	fbb2 f5f3 	udiv	r5, r2, r3
 80070fc:	f7fe fc76 	bl	80059ec <HAL_RCC_GetPCLK1Freq>
 8007100:	4602      	mov	r2, r0
 8007102:	4613      	mov	r3, r2
 8007104:	009b      	lsls	r3, r3, #2
 8007106:	4413      	add	r3, r2
 8007108:	009a      	lsls	r2, r3, #2
 800710a:	441a      	add	r2, r3
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	685b      	ldr	r3, [r3, #4]
 8007110:	005b      	lsls	r3, r3, #1
 8007112:	fbb2 f3f3 	udiv	r3, r2, r3
 8007116:	4a47      	ldr	r2, [pc, #284]	; (8007234 <UART_SetConfig+0x32c>)
 8007118:	fba2 2303 	umull	r2, r3, r2, r3
 800711c:	095b      	lsrs	r3, r3, #5
 800711e:	2264      	movs	r2, #100	; 0x64
 8007120:	fb02 f303 	mul.w	r3, r2, r3
 8007124:	1aeb      	subs	r3, r5, r3
 8007126:	00db      	lsls	r3, r3, #3
 8007128:	3332      	adds	r3, #50	; 0x32
 800712a:	4a42      	ldr	r2, [pc, #264]	; (8007234 <UART_SetConfig+0x32c>)
 800712c:	fba2 2303 	umull	r2, r3, r2, r3
 8007130:	095b      	lsrs	r3, r3, #5
 8007132:	f003 0207 	and.w	r2, r3, #7
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	4422      	add	r2, r4
 800713c:	609a      	str	r2, [r3, #8]
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
    }
  }
}
 800713e:	e0e7      	b.n	8007310 <UART_SetConfig+0x408>
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	4a39      	ldr	r2, [pc, #228]	; (800722c <UART_SetConfig+0x324>)
 8007146:	4293      	cmp	r3, r2
 8007148:	d004      	beq.n	8007154 <UART_SetConfig+0x24c>
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	4a38      	ldr	r2, [pc, #224]	; (8007230 <UART_SetConfig+0x328>)
 8007150:	4293      	cmp	r3, r2
 8007152:	d171      	bne.n	8007238 <UART_SetConfig+0x330>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8007154:	f7fe fc5e 	bl	8005a14 <HAL_RCC_GetPCLK2Freq>
 8007158:	4602      	mov	r2, r0
 800715a:	4613      	mov	r3, r2
 800715c:	009b      	lsls	r3, r3, #2
 800715e:	4413      	add	r3, r2
 8007160:	009a      	lsls	r2, r3, #2
 8007162:	441a      	add	r2, r3
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	685b      	ldr	r3, [r3, #4]
 8007168:	009b      	lsls	r3, r3, #2
 800716a:	fbb2 f3f3 	udiv	r3, r2, r3
 800716e:	4a31      	ldr	r2, [pc, #196]	; (8007234 <UART_SetConfig+0x32c>)
 8007170:	fba2 2303 	umull	r2, r3, r2, r3
 8007174:	095b      	lsrs	r3, r3, #5
 8007176:	011c      	lsls	r4, r3, #4
 8007178:	f7fe fc4c 	bl	8005a14 <HAL_RCC_GetPCLK2Freq>
 800717c:	4602      	mov	r2, r0
 800717e:	4613      	mov	r3, r2
 8007180:	009b      	lsls	r3, r3, #2
 8007182:	4413      	add	r3, r2
 8007184:	009a      	lsls	r2, r3, #2
 8007186:	441a      	add	r2, r3
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	685b      	ldr	r3, [r3, #4]
 800718c:	009b      	lsls	r3, r3, #2
 800718e:	fbb2 f5f3 	udiv	r5, r2, r3
 8007192:	f7fe fc3f 	bl	8005a14 <HAL_RCC_GetPCLK2Freq>
 8007196:	4602      	mov	r2, r0
 8007198:	4613      	mov	r3, r2
 800719a:	009b      	lsls	r3, r3, #2
 800719c:	4413      	add	r3, r2
 800719e:	009a      	lsls	r2, r3, #2
 80071a0:	441a      	add	r2, r3
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	685b      	ldr	r3, [r3, #4]
 80071a6:	009b      	lsls	r3, r3, #2
 80071a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80071ac:	4a21      	ldr	r2, [pc, #132]	; (8007234 <UART_SetConfig+0x32c>)
 80071ae:	fba2 2303 	umull	r2, r3, r2, r3
 80071b2:	095b      	lsrs	r3, r3, #5
 80071b4:	2264      	movs	r2, #100	; 0x64
 80071b6:	fb02 f303 	mul.w	r3, r2, r3
 80071ba:	1aeb      	subs	r3, r5, r3
 80071bc:	011b      	lsls	r3, r3, #4
 80071be:	3332      	adds	r3, #50	; 0x32
 80071c0:	4a1c      	ldr	r2, [pc, #112]	; (8007234 <UART_SetConfig+0x32c>)
 80071c2:	fba2 2303 	umull	r2, r3, r2, r3
 80071c6:	095b      	lsrs	r3, r3, #5
 80071c8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80071cc:	441c      	add	r4, r3
 80071ce:	f7fe fc21 	bl	8005a14 <HAL_RCC_GetPCLK2Freq>
 80071d2:	4602      	mov	r2, r0
 80071d4:	4613      	mov	r3, r2
 80071d6:	009b      	lsls	r3, r3, #2
 80071d8:	4413      	add	r3, r2
 80071da:	009a      	lsls	r2, r3, #2
 80071dc:	441a      	add	r2, r3
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	685b      	ldr	r3, [r3, #4]
 80071e2:	009b      	lsls	r3, r3, #2
 80071e4:	fbb2 f5f3 	udiv	r5, r2, r3
 80071e8:	f7fe fc14 	bl	8005a14 <HAL_RCC_GetPCLK2Freq>
 80071ec:	4602      	mov	r2, r0
 80071ee:	4613      	mov	r3, r2
 80071f0:	009b      	lsls	r3, r3, #2
 80071f2:	4413      	add	r3, r2
 80071f4:	009a      	lsls	r2, r3, #2
 80071f6:	441a      	add	r2, r3
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	685b      	ldr	r3, [r3, #4]
 80071fc:	009b      	lsls	r3, r3, #2
 80071fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8007202:	4a0c      	ldr	r2, [pc, #48]	; (8007234 <UART_SetConfig+0x32c>)
 8007204:	fba2 2303 	umull	r2, r3, r2, r3
 8007208:	095b      	lsrs	r3, r3, #5
 800720a:	2264      	movs	r2, #100	; 0x64
 800720c:	fb02 f303 	mul.w	r3, r2, r3
 8007210:	1aeb      	subs	r3, r5, r3
 8007212:	011b      	lsls	r3, r3, #4
 8007214:	3332      	adds	r3, #50	; 0x32
 8007216:	4a07      	ldr	r2, [pc, #28]	; (8007234 <UART_SetConfig+0x32c>)
 8007218:	fba2 2303 	umull	r2, r3, r2, r3
 800721c:	095b      	lsrs	r3, r3, #5
 800721e:	f003 020f 	and.w	r2, r3, #15
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	4422      	add	r2, r4
 8007228:	609a      	str	r2, [r3, #8]
 800722a:	e071      	b.n	8007310 <UART_SetConfig+0x408>
 800722c:	40011000 	.word	0x40011000
 8007230:	40011400 	.word	0x40011400
 8007234:	51eb851f 	.word	0x51eb851f
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8007238:	f7fe fbd8 	bl	80059ec <HAL_RCC_GetPCLK1Freq>
 800723c:	4602      	mov	r2, r0
 800723e:	4613      	mov	r3, r2
 8007240:	009b      	lsls	r3, r3, #2
 8007242:	4413      	add	r3, r2
 8007244:	009a      	lsls	r2, r3, #2
 8007246:	441a      	add	r2, r3
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	685b      	ldr	r3, [r3, #4]
 800724c:	009b      	lsls	r3, r3, #2
 800724e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007252:	4a31      	ldr	r2, [pc, #196]	; (8007318 <UART_SetConfig+0x410>)
 8007254:	fba2 2303 	umull	r2, r3, r2, r3
 8007258:	095b      	lsrs	r3, r3, #5
 800725a:	011c      	lsls	r4, r3, #4
 800725c:	f7fe fbc6 	bl	80059ec <HAL_RCC_GetPCLK1Freq>
 8007260:	4602      	mov	r2, r0
 8007262:	4613      	mov	r3, r2
 8007264:	009b      	lsls	r3, r3, #2
 8007266:	4413      	add	r3, r2
 8007268:	009a      	lsls	r2, r3, #2
 800726a:	441a      	add	r2, r3
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	685b      	ldr	r3, [r3, #4]
 8007270:	009b      	lsls	r3, r3, #2
 8007272:	fbb2 f5f3 	udiv	r5, r2, r3
 8007276:	f7fe fbb9 	bl	80059ec <HAL_RCC_GetPCLK1Freq>
 800727a:	4602      	mov	r2, r0
 800727c:	4613      	mov	r3, r2
 800727e:	009b      	lsls	r3, r3, #2
 8007280:	4413      	add	r3, r2
 8007282:	009a      	lsls	r2, r3, #2
 8007284:	441a      	add	r2, r3
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	685b      	ldr	r3, [r3, #4]
 800728a:	009b      	lsls	r3, r3, #2
 800728c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007290:	4a21      	ldr	r2, [pc, #132]	; (8007318 <UART_SetConfig+0x410>)
 8007292:	fba2 2303 	umull	r2, r3, r2, r3
 8007296:	095b      	lsrs	r3, r3, #5
 8007298:	2264      	movs	r2, #100	; 0x64
 800729a:	fb02 f303 	mul.w	r3, r2, r3
 800729e:	1aeb      	subs	r3, r5, r3
 80072a0:	011b      	lsls	r3, r3, #4
 80072a2:	3332      	adds	r3, #50	; 0x32
 80072a4:	4a1c      	ldr	r2, [pc, #112]	; (8007318 <UART_SetConfig+0x410>)
 80072a6:	fba2 2303 	umull	r2, r3, r2, r3
 80072aa:	095b      	lsrs	r3, r3, #5
 80072ac:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80072b0:	441c      	add	r4, r3
 80072b2:	f7fe fb9b 	bl	80059ec <HAL_RCC_GetPCLK1Freq>
 80072b6:	4602      	mov	r2, r0
 80072b8:	4613      	mov	r3, r2
 80072ba:	009b      	lsls	r3, r3, #2
 80072bc:	4413      	add	r3, r2
 80072be:	009a      	lsls	r2, r3, #2
 80072c0:	441a      	add	r2, r3
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	685b      	ldr	r3, [r3, #4]
 80072c6:	009b      	lsls	r3, r3, #2
 80072c8:	fbb2 f5f3 	udiv	r5, r2, r3
 80072cc:	f7fe fb8e 	bl	80059ec <HAL_RCC_GetPCLK1Freq>
 80072d0:	4602      	mov	r2, r0
 80072d2:	4613      	mov	r3, r2
 80072d4:	009b      	lsls	r3, r3, #2
 80072d6:	4413      	add	r3, r2
 80072d8:	009a      	lsls	r2, r3, #2
 80072da:	441a      	add	r2, r3
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	685b      	ldr	r3, [r3, #4]
 80072e0:	009b      	lsls	r3, r3, #2
 80072e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80072e6:	4a0c      	ldr	r2, [pc, #48]	; (8007318 <UART_SetConfig+0x410>)
 80072e8:	fba2 2303 	umull	r2, r3, r2, r3
 80072ec:	095b      	lsrs	r3, r3, #5
 80072ee:	2264      	movs	r2, #100	; 0x64
 80072f0:	fb02 f303 	mul.w	r3, r2, r3
 80072f4:	1aeb      	subs	r3, r5, r3
 80072f6:	011b      	lsls	r3, r3, #4
 80072f8:	3332      	adds	r3, #50	; 0x32
 80072fa:	4a07      	ldr	r2, [pc, #28]	; (8007318 <UART_SetConfig+0x410>)
 80072fc:	fba2 2303 	umull	r2, r3, r2, r3
 8007300:	095b      	lsrs	r3, r3, #5
 8007302:	f003 020f 	and.w	r2, r3, #15
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	4422      	add	r2, r4
 800730c:	609a      	str	r2, [r3, #8]
}
 800730e:	e7ff      	b.n	8007310 <UART_SetConfig+0x408>
 8007310:	bf00      	nop
 8007312:	3710      	adds	r7, #16
 8007314:	46bd      	mov	sp, r7
 8007316:	bdb0      	pop	{r4, r5, r7, pc}
 8007318:	51eb851f 	.word	0x51eb851f

0800731c <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 800731c:	b480      	push	{r7}
 800731e:	b089      	sub	sp, #36	; 0x24
 8007320:	af00      	add	r7, sp, #0
 8007322:	60f8      	str	r0, [r7, #12]
 8007324:	60b9      	str	r1, [r7, #8]
 8007326:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8007328:	68fb      	ldr	r3, [r7, #12]
 800732a:	681a      	ldr	r2, [r3, #0]
 800732c:	68bb      	ldr	r3, [r7, #8]
 800732e:	617b      	str	r3, [r7, #20]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007330:	697b      	ldr	r3, [r7, #20]
 8007332:	fa93 f3a3 	rbit	r3, r3
 8007336:	613b      	str	r3, [r7, #16]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8007338:	693b      	ldr	r3, [r7, #16]
 800733a:	fab3 f383 	clz	r3, r3
 800733e:	b2db      	uxtb	r3, r3
 8007340:	005b      	lsls	r3, r3, #1
 8007342:	2103      	movs	r1, #3
 8007344:	fa01 f303 	lsl.w	r3, r1, r3
 8007348:	43db      	mvns	r3, r3
 800734a:	401a      	ands	r2, r3
 800734c:	68bb      	ldr	r3, [r7, #8]
 800734e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007350:	69fb      	ldr	r3, [r7, #28]
 8007352:	fa93 f3a3 	rbit	r3, r3
 8007356:	61bb      	str	r3, [r7, #24]
  return result;
 8007358:	69bb      	ldr	r3, [r7, #24]
 800735a:	fab3 f383 	clz	r3, r3
 800735e:	b2db      	uxtb	r3, r3
 8007360:	005b      	lsls	r3, r3, #1
 8007362:	6879      	ldr	r1, [r7, #4]
 8007364:	fa01 f303 	lsl.w	r3, r1, r3
 8007368:	431a      	orrs	r2, r3
 800736a:	68fb      	ldr	r3, [r7, #12]
 800736c:	601a      	str	r2, [r3, #0]
}
 800736e:	bf00      	nop
 8007370:	3724      	adds	r7, #36	; 0x24
 8007372:	46bd      	mov	sp, r7
 8007374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007378:	4770      	bx	lr

0800737a <LL_GPIO_SetPinOutputType>:
  *         @arg @ref LL_GPIO_OUTPUT_PUSHPULL
  *         @arg @ref LL_GPIO_OUTPUT_OPENDRAIN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinOutputType(GPIO_TypeDef *GPIOx, uint32_t PinMask, uint32_t OutputType)
{
 800737a:	b480      	push	{r7}
 800737c:	b085      	sub	sp, #20
 800737e:	af00      	add	r7, sp, #0
 8007380:	60f8      	str	r0, [r7, #12]
 8007382:	60b9      	str	r1, [r7, #8]
 8007384:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8007386:	68fb      	ldr	r3, [r7, #12]
 8007388:	685a      	ldr	r2, [r3, #4]
 800738a:	68bb      	ldr	r3, [r7, #8]
 800738c:	43db      	mvns	r3, r3
 800738e:	401a      	ands	r2, r3
 8007390:	68bb      	ldr	r3, [r7, #8]
 8007392:	6879      	ldr	r1, [r7, #4]
 8007394:	fb01 f303 	mul.w	r3, r1, r3
 8007398:	431a      	orrs	r2, r3
 800739a:	68fb      	ldr	r3, [r7, #12]
 800739c:	605a      	str	r2, [r3, #4]
}
 800739e:	bf00      	nop
 80073a0:	3714      	adds	r7, #20
 80073a2:	46bd      	mov	sp, r7
 80073a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073a8:	4770      	bx	lr

080073aa <LL_GPIO_SetPinSpeed>:
  *         @arg @ref LL_GPIO_SPEED_FREQ_HIGH
  *         @arg @ref LL_GPIO_SPEED_FREQ_VERY_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
{
 80073aa:	b480      	push	{r7}
 80073ac:	b089      	sub	sp, #36	; 0x24
 80073ae:	af00      	add	r7, sp, #0
 80073b0:	60f8      	str	r0, [r7, #12]
 80073b2:	60b9      	str	r1, [r7, #8]
 80073b4:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 80073b6:	68fb      	ldr	r3, [r7, #12]
 80073b8:	689a      	ldr	r2, [r3, #8]
 80073ba:	68bb      	ldr	r3, [r7, #8]
 80073bc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80073be:	697b      	ldr	r3, [r7, #20]
 80073c0:	fa93 f3a3 	rbit	r3, r3
 80073c4:	613b      	str	r3, [r7, #16]
  return result;
 80073c6:	693b      	ldr	r3, [r7, #16]
 80073c8:	fab3 f383 	clz	r3, r3
 80073cc:	b2db      	uxtb	r3, r3
 80073ce:	005b      	lsls	r3, r3, #1
 80073d0:	2103      	movs	r1, #3
 80073d2:	fa01 f303 	lsl.w	r3, r1, r3
 80073d6:	43db      	mvns	r3, r3
 80073d8:	401a      	ands	r2, r3
 80073da:	68bb      	ldr	r3, [r7, #8]
 80073dc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80073de:	69fb      	ldr	r3, [r7, #28]
 80073e0:	fa93 f3a3 	rbit	r3, r3
 80073e4:	61bb      	str	r3, [r7, #24]
  return result;
 80073e6:	69bb      	ldr	r3, [r7, #24]
 80073e8:	fab3 f383 	clz	r3, r3
 80073ec:	b2db      	uxtb	r3, r3
 80073ee:	005b      	lsls	r3, r3, #1
 80073f0:	6879      	ldr	r1, [r7, #4]
 80073f2:	fa01 f303 	lsl.w	r3, r1, r3
 80073f6:	431a      	orrs	r2, r3
 80073f8:	68fb      	ldr	r3, [r7, #12]
 80073fa:	609a      	str	r2, [r3, #8]
             (Speed << (POSITION_VAL(Pin) * 2U)));
}
 80073fc:	bf00      	nop
 80073fe:	3724      	adds	r7, #36	; 0x24
 8007400:	46bd      	mov	sp, r7
 8007402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007406:	4770      	bx	lr

08007408 <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 8007408:	b480      	push	{r7}
 800740a:	b089      	sub	sp, #36	; 0x24
 800740c:	af00      	add	r7, sp, #0
 800740e:	60f8      	str	r0, [r7, #12]
 8007410:	60b9      	str	r1, [r7, #8]
 8007412:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8007414:	68fb      	ldr	r3, [r7, #12]
 8007416:	68da      	ldr	r2, [r3, #12]
 8007418:	68bb      	ldr	r3, [r7, #8]
 800741a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800741c:	697b      	ldr	r3, [r7, #20]
 800741e:	fa93 f3a3 	rbit	r3, r3
 8007422:	613b      	str	r3, [r7, #16]
  return result;
 8007424:	693b      	ldr	r3, [r7, #16]
 8007426:	fab3 f383 	clz	r3, r3
 800742a:	b2db      	uxtb	r3, r3
 800742c:	005b      	lsls	r3, r3, #1
 800742e:	2103      	movs	r1, #3
 8007430:	fa01 f303 	lsl.w	r3, r1, r3
 8007434:	43db      	mvns	r3, r3
 8007436:	401a      	ands	r2, r3
 8007438:	68bb      	ldr	r3, [r7, #8]
 800743a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800743c:	69fb      	ldr	r3, [r7, #28]
 800743e:	fa93 f3a3 	rbit	r3, r3
 8007442:	61bb      	str	r3, [r7, #24]
  return result;
 8007444:	69bb      	ldr	r3, [r7, #24]
 8007446:	fab3 f383 	clz	r3, r3
 800744a:	b2db      	uxtb	r3, r3
 800744c:	005b      	lsls	r3, r3, #1
 800744e:	6879      	ldr	r1, [r7, #4]
 8007450:	fa01 f303 	lsl.w	r3, r1, r3
 8007454:	431a      	orrs	r2, r3
 8007456:	68fb      	ldr	r3, [r7, #12]
 8007458:	60da      	str	r2, [r3, #12]
}
 800745a:	bf00      	nop
 800745c:	3724      	adds	r7, #36	; 0x24
 800745e:	46bd      	mov	sp, r7
 8007460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007464:	4770      	bx	lr

08007466 <LL_GPIO_SetAFPin_0_7>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_0_7(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 8007466:	b480      	push	{r7}
 8007468:	b089      	sub	sp, #36	; 0x24
 800746a:	af00      	add	r7, sp, #0
 800746c:	60f8      	str	r0, [r7, #12]
 800746e:	60b9      	str	r1, [r7, #8]
 8007470:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 8007472:	68fb      	ldr	r3, [r7, #12]
 8007474:	6a1a      	ldr	r2, [r3, #32]
 8007476:	68bb      	ldr	r3, [r7, #8]
 8007478:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800747a:	697b      	ldr	r3, [r7, #20]
 800747c:	fa93 f3a3 	rbit	r3, r3
 8007480:	613b      	str	r3, [r7, #16]
  return result;
 8007482:	693b      	ldr	r3, [r7, #16]
 8007484:	fab3 f383 	clz	r3, r3
 8007488:	b2db      	uxtb	r3, r3
 800748a:	009b      	lsls	r3, r3, #2
 800748c:	210f      	movs	r1, #15
 800748e:	fa01 f303 	lsl.w	r3, r1, r3
 8007492:	43db      	mvns	r3, r3
 8007494:	401a      	ands	r2, r3
 8007496:	68bb      	ldr	r3, [r7, #8]
 8007498:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800749a:	69fb      	ldr	r3, [r7, #28]
 800749c:	fa93 f3a3 	rbit	r3, r3
 80074a0:	61bb      	str	r3, [r7, #24]
  return result;
 80074a2:	69bb      	ldr	r3, [r7, #24]
 80074a4:	fab3 f383 	clz	r3, r3
 80074a8:	b2db      	uxtb	r3, r3
 80074aa:	009b      	lsls	r3, r3, #2
 80074ac:	6879      	ldr	r1, [r7, #4]
 80074ae:	fa01 f303 	lsl.w	r3, r1, r3
 80074b2:	431a      	orrs	r2, r3
 80074b4:	68fb      	ldr	r3, [r7, #12]
 80074b6:	621a      	str	r2, [r3, #32]
             (Alternate << (POSITION_VAL(Pin) * 4U)));
}
 80074b8:	bf00      	nop
 80074ba:	3724      	adds	r7, #36	; 0x24
 80074bc:	46bd      	mov	sp, r7
 80074be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074c2:	4770      	bx	lr

080074c4 <LL_GPIO_SetAFPin_8_15>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_8_15(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 80074c4:	b480      	push	{r7}
 80074c6:	b089      	sub	sp, #36	; 0x24
 80074c8:	af00      	add	r7, sp, #0
 80074ca:	60f8      	str	r0, [r7, #12]
 80074cc:	60b9      	str	r1, [r7, #8]
 80074ce:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 80074d0:	68fb      	ldr	r3, [r7, #12]
 80074d2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80074d4:	68bb      	ldr	r3, [r7, #8]
 80074d6:	0a1b      	lsrs	r3, r3, #8
 80074d8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80074da:	697b      	ldr	r3, [r7, #20]
 80074dc:	fa93 f3a3 	rbit	r3, r3
 80074e0:	613b      	str	r3, [r7, #16]
  return result;
 80074e2:	693b      	ldr	r3, [r7, #16]
 80074e4:	fab3 f383 	clz	r3, r3
 80074e8:	b2db      	uxtb	r3, r3
 80074ea:	009b      	lsls	r3, r3, #2
 80074ec:	210f      	movs	r1, #15
 80074ee:	fa01 f303 	lsl.w	r3, r1, r3
 80074f2:	43db      	mvns	r3, r3
 80074f4:	401a      	ands	r2, r3
 80074f6:	68bb      	ldr	r3, [r7, #8]
 80074f8:	0a1b      	lsrs	r3, r3, #8
 80074fa:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80074fc:	69fb      	ldr	r3, [r7, #28]
 80074fe:	fa93 f3a3 	rbit	r3, r3
 8007502:	61bb      	str	r3, [r7, #24]
  return result;
 8007504:	69bb      	ldr	r3, [r7, #24]
 8007506:	fab3 f383 	clz	r3, r3
 800750a:	b2db      	uxtb	r3, r3
 800750c:	009b      	lsls	r3, r3, #2
 800750e:	6879      	ldr	r1, [r7, #4]
 8007510:	fa01 f303 	lsl.w	r3, r1, r3
 8007514:	431a      	orrs	r2, r3
 8007516:	68fb      	ldr	r3, [r7, #12]
 8007518:	625a      	str	r2, [r3, #36]	; 0x24
             (Alternate << (POSITION_VAL(Pin >> 8U) * 4U)));
}
 800751a:	bf00      	nop
 800751c:	3724      	adds	r7, #36	; 0x24
 800751e:	46bd      	mov	sp, r7
 8007520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007524:	4770      	bx	lr

08007526 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8007526:	b580      	push	{r7, lr}
 8007528:	b088      	sub	sp, #32
 800752a:	af00      	add	r7, sp, #0
 800752c:	6078      	str	r0, [r7, #4]
 800752e:	6039      	str	r1, [r7, #0]
  uint32_t pinpos     = 0x00000000U;
 8007530:	2300      	movs	r3, #0
 8007532:	61fb      	str	r3, [r7, #28]
  uint32_t currentpin = 0x00000000U;
 8007534:	2300      	movs	r3, #0
 8007536:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8007538:	683b      	ldr	r3, [r7, #0]
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800753e:	697b      	ldr	r3, [r7, #20]
 8007540:	fa93 f3a3 	rbit	r3, r3
 8007544:	613b      	str	r3, [r7, #16]
  return result;
 8007546:	693b      	ldr	r3, [r7, #16]
 8007548:	fab3 f383 	clz	r3, r3
 800754c:	b2db      	uxtb	r3, r3
 800754e:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8007550:	e049      	b.n	80075e6 <LL_GPIO_Init+0xc0>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001U << pinpos);
 8007552:	683b      	ldr	r3, [r7, #0]
 8007554:	681a      	ldr	r2, [r3, #0]
 8007556:	2101      	movs	r1, #1
 8007558:	69fb      	ldr	r3, [r7, #28]
 800755a:	fa01 f303 	lsl.w	r3, r1, r3
 800755e:	4013      	ands	r3, r2
 8007560:	61bb      	str	r3, [r7, #24]

    if (currentpin)
 8007562:	69bb      	ldr	r3, [r7, #24]
 8007564:	2b00      	cmp	r3, #0
 8007566:	d03b      	beq.n	80075e0 <LL_GPIO_Init+0xba>
    {
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8007568:	683b      	ldr	r3, [r7, #0]
 800756a:	685b      	ldr	r3, [r3, #4]
 800756c:	461a      	mov	r2, r3
 800756e:	69b9      	ldr	r1, [r7, #24]
 8007570:	6878      	ldr	r0, [r7, #4]
 8007572:	f7ff fed3 	bl	800731c <LL_GPIO_SetPinMode>

      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8007576:	683b      	ldr	r3, [r7, #0]
 8007578:	685b      	ldr	r3, [r3, #4]
 800757a:	2b01      	cmp	r3, #1
 800757c:	d003      	beq.n	8007586 <LL_GPIO_Init+0x60>
 800757e:	683b      	ldr	r3, [r7, #0]
 8007580:	685b      	ldr	r3, [r3, #4]
 8007582:	2b02      	cmp	r3, #2
 8007584:	d106      	bne.n	8007594 <LL_GPIO_Init+0x6e>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8007586:	683b      	ldr	r3, [r7, #0]
 8007588:	689b      	ldr	r3, [r3, #8]
 800758a:	461a      	mov	r2, r3
 800758c:	69b9      	ldr	r1, [r7, #24]
 800758e:	6878      	ldr	r0, [r7, #4]
 8007590:	f7ff ff0b 	bl	80073aa <LL_GPIO_SetPinSpeed>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8007594:	683b      	ldr	r3, [r7, #0]
 8007596:	691b      	ldr	r3, [r3, #16]
 8007598:	461a      	mov	r2, r3
 800759a:	69b9      	ldr	r1, [r7, #24]
 800759c:	6878      	ldr	r0, [r7, #4]
 800759e:	f7ff ff33 	bl	8007408 <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 80075a2:	683b      	ldr	r3, [r7, #0]
 80075a4:	685b      	ldr	r3, [r3, #4]
 80075a6:	2b02      	cmp	r3, #2
 80075a8:	d11a      	bne.n	80075e0 <LL_GPIO_Init+0xba>
 80075aa:	69bb      	ldr	r3, [r7, #24]
 80075ac:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80075ae:	68fb      	ldr	r3, [r7, #12]
 80075b0:	fa93 f3a3 	rbit	r3, r3
 80075b4:	60bb      	str	r3, [r7, #8]
  return result;
 80075b6:	68bb      	ldr	r3, [r7, #8]
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 0x00000008U)
 80075b8:	fab3 f383 	clz	r3, r3
 80075bc:	b2db      	uxtb	r3, r3
 80075be:	2b07      	cmp	r3, #7
 80075c0:	d807      	bhi.n	80075d2 <LL_GPIO_Init+0xac>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 80075c2:	683b      	ldr	r3, [r7, #0]
 80075c4:	695b      	ldr	r3, [r3, #20]
 80075c6:	461a      	mov	r2, r3
 80075c8:	69b9      	ldr	r1, [r7, #24]
 80075ca:	6878      	ldr	r0, [r7, #4]
 80075cc:	f7ff ff4b 	bl	8007466 <LL_GPIO_SetAFPin_0_7>
 80075d0:	e006      	b.n	80075e0 <LL_GPIO_Init+0xba>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 80075d2:	683b      	ldr	r3, [r7, #0]
 80075d4:	695b      	ldr	r3, [r3, #20]
 80075d6:	461a      	mov	r2, r3
 80075d8:	69b9      	ldr	r1, [r7, #24]
 80075da:	6878      	ldr	r0, [r7, #4]
 80075dc:	f7ff ff72 	bl	80074c4 <LL_GPIO_SetAFPin_8_15>
        }
      }
    }
    pinpos++;
 80075e0:	69fb      	ldr	r3, [r7, #28]
 80075e2:	3301      	adds	r3, #1
 80075e4:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 80075e6:	683b      	ldr	r3, [r7, #0]
 80075e8:	681a      	ldr	r2, [r3, #0]
 80075ea:	69fb      	ldr	r3, [r7, #28]
 80075ec:	fa22 f303 	lsr.w	r3, r2, r3
 80075f0:	2b00      	cmp	r3, #0
 80075f2:	d1ae      	bne.n	8007552 <LL_GPIO_Init+0x2c>
  }

  if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 80075f4:	683b      	ldr	r3, [r7, #0]
 80075f6:	685b      	ldr	r3, [r3, #4]
 80075f8:	2b01      	cmp	r3, #1
 80075fa:	d003      	beq.n	8007604 <LL_GPIO_Init+0xde>
 80075fc:	683b      	ldr	r3, [r7, #0]
 80075fe:	685b      	ldr	r3, [r3, #4]
 8007600:	2b02      	cmp	r3, #2
 8007602:	d107      	bne.n	8007614 <LL_GPIO_Init+0xee>
  {
    /* Check Output mode parameters */
    assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

    /* Output mode configuration*/
    LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 8007604:	683b      	ldr	r3, [r7, #0]
 8007606:	6819      	ldr	r1, [r3, #0]
 8007608:	683b      	ldr	r3, [r7, #0]
 800760a:	68db      	ldr	r3, [r3, #12]
 800760c:	461a      	mov	r2, r3
 800760e:	6878      	ldr	r0, [r7, #4]
 8007610:	f7ff feb3 	bl	800737a <LL_GPIO_SetPinOutputType>

  }
  return (SUCCESS);
 8007614:	2300      	movs	r3, #0
}
 8007616:	4618      	mov	r0, r3
 8007618:	3720      	adds	r7, #32
 800761a:	46bd      	mov	sp, r7
 800761c:	bd80      	pop	{r7, pc}

0800761e <LL_I2C_Enable>:
{
 800761e:	b480      	push	{r7}
 8007620:	b083      	sub	sp, #12
 8007622:	af00      	add	r7, sp, #0
 8007624:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR1, I2C_CR1_PE);
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	f043 0201 	orr.w	r2, r3, #1
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	601a      	str	r2, [r3, #0]
}
 8007632:	bf00      	nop
 8007634:	370c      	adds	r7, #12
 8007636:	46bd      	mov	sp, r7
 8007638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800763c:	4770      	bx	lr

0800763e <LL_I2C_Disable>:
{
 800763e:	b480      	push	{r7}
 8007640:	b083      	sub	sp, #12
 8007642:	af00      	add	r7, sp, #0
 8007644:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_PE);
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	f023 0201 	bic.w	r2, r3, #1
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	601a      	str	r2, [r3, #0]
}
 8007652:	bf00      	nop
 8007654:	370c      	adds	r7, #12
 8007656:	46bd      	mov	sp, r7
 8007658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800765c:	4770      	bx	lr

0800765e <LL_I2C_ConfigFilters>:
{
 800765e:	b480      	push	{r7}
 8007660:	b085      	sub	sp, #20
 8007662:	af00      	add	r7, sp, #0
 8007664:	60f8      	str	r0, [r7, #12]
 8007666:	60b9      	str	r1, [r7, #8]
 8007668:	607a      	str	r2, [r7, #4]
  MODIFY_REG(I2Cx->FLTR, I2C_FLTR_ANOFF | I2C_FLTR_DNF, AnalogFilter | DigitalFilter);
 800766a:	68fb      	ldr	r3, [r7, #12]
 800766c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800766e:	f023 021f 	bic.w	r2, r3, #31
 8007672:	68b9      	ldr	r1, [r7, #8]
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	430b      	orrs	r3, r1
 8007678:	431a      	orrs	r2, r3
 800767a:	68fb      	ldr	r3, [r7, #12]
 800767c:	625a      	str	r2, [r3, #36]	; 0x24
}
 800767e:	bf00      	nop
 8007680:	3714      	adds	r7, #20
 8007682:	46bd      	mov	sp, r7
 8007684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007688:	4770      	bx	lr

0800768a <LL_I2C_SetOwnAddress1>:
{
 800768a:	b480      	push	{r7}
 800768c:	b085      	sub	sp, #20
 800768e:	af00      	add	r7, sp, #0
 8007690:	60f8      	str	r0, [r7, #12]
 8007692:	60b9      	str	r1, [r7, #8]
 8007694:	607a      	str	r2, [r7, #4]
  MODIFY_REG(I2Cx->OAR1, I2C_OAR1_ADD0 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD8_9 | I2C_OAR1_ADDMODE, OwnAddress1 | OwnAddrSize);
 8007696:	68fb      	ldr	r3, [r7, #12]
 8007698:	689b      	ldr	r3, [r3, #8]
 800769a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800769e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80076a2:	68b9      	ldr	r1, [r7, #8]
 80076a4:	687a      	ldr	r2, [r7, #4]
 80076a6:	430a      	orrs	r2, r1
 80076a8:	431a      	orrs	r2, r3
 80076aa:	68fb      	ldr	r3, [r7, #12]
 80076ac:	609a      	str	r2, [r3, #8]
}
 80076ae:	bf00      	nop
 80076b0:	3714      	adds	r7, #20
 80076b2:	46bd      	mov	sp, r7
 80076b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076b8:	4770      	bx	lr
	...

080076bc <LL_I2C_ConfigSpeed>:
  *         @arg @ref LL_I2C_DUTYCYCLE_16_9
  * @retval None
  */
__STATIC_INLINE void LL_I2C_ConfigSpeed(I2C_TypeDef *I2Cx, uint32_t PeriphClock, uint32_t ClockSpeed,
                                        uint32_t DutyCycle)
{
 80076bc:	b490      	push	{r4, r7}
 80076be:	b084      	sub	sp, #16
 80076c0:	af00      	add	r7, sp, #0
 80076c2:	60f8      	str	r0, [r7, #12]
 80076c4:	60b9      	str	r1, [r7, #8]
 80076c6:	607a      	str	r2, [r7, #4]
 80076c8:	603b      	str	r3, [r7, #0]
  register uint32_t freqrange = 0x0U;
 80076ca:	2400      	movs	r4, #0
  register uint32_t clockconfig = 0x0U;
 80076cc:	2400      	movs	r4, #0

  /* Compute frequency range */
  freqrange = __LL_I2C_FREQ_HZ_TO_MHZ(PeriphClock);
 80076ce:	68bb      	ldr	r3, [r7, #8]
 80076d0:	4a3f      	ldr	r2, [pc, #252]	; (80077d0 <LL_I2C_ConfigSpeed+0x114>)
 80076d2:	fba2 2303 	umull	r2, r3, r2, r3
 80076d6:	0c9c      	lsrs	r4, r3, #18

  /* Configure I2Cx: Frequency range register */
  MODIFY_REG(I2Cx->CR2, I2C_CR2_FREQ, freqrange);
 80076d8:	68fb      	ldr	r3, [r7, #12]
 80076da:	685b      	ldr	r3, [r3, #4]
 80076dc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80076e0:	ea44 0203 	orr.w	r2, r4, r3
 80076e4:	68fb      	ldr	r3, [r7, #12]
 80076e6:	605a      	str	r2, [r3, #4]

  /* Configure I2Cx: Rise Time register */
  MODIFY_REG(I2Cx->TRISE, I2C_TRISE_TRISE, __LL_I2C_RISE_TIME(freqrange, ClockSpeed));
 80076e8:	68fb      	ldr	r3, [r7, #12]
 80076ea:	6a1b      	ldr	r3, [r3, #32]
 80076ec:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	4938      	ldr	r1, [pc, #224]	; (80077d4 <LL_I2C_ConfigSpeed+0x118>)
 80076f4:	428b      	cmp	r3, r1
 80076f6:	d801      	bhi.n	80076fc <LL_I2C_ConfigSpeed+0x40>
 80076f8:	1c63      	adds	r3, r4, #1
 80076fa:	e008      	b.n	800770e <LL_I2C_ConfigSpeed+0x52>
 80076fc:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8007700:	fb03 f304 	mul.w	r3, r3, r4
 8007704:	4934      	ldr	r1, [pc, #208]	; (80077d8 <LL_I2C_ConfigSpeed+0x11c>)
 8007706:	fba1 1303 	umull	r1, r3, r1, r3
 800770a:	099b      	lsrs	r3, r3, #6
 800770c:	3301      	adds	r3, #1
 800770e:	431a      	orrs	r2, r3
 8007710:	68fb      	ldr	r3, [r7, #12]
 8007712:	621a      	str	r2, [r3, #32]

  /* Configure Speed mode, Duty Cycle and Clock control register value */
  if (ClockSpeed > LL_I2C_MAX_SPEED_STANDARD)
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	4a2f      	ldr	r2, [pc, #188]	; (80077d4 <LL_I2C_ConfigSpeed+0x118>)
 8007718:	4293      	cmp	r3, r2
 800771a:	d939      	bls.n	8007790 <LL_I2C_ConfigSpeed+0xd4>
  {
    /* Set Speed mode at fast and duty cycle for Clock Speed request in fast clock range */
    clockconfig = LL_I2C_CLOCK_SPEED_FAST_MODE                                          | \
 800771c:	683b      	ldr	r3, [r7, #0]
 800771e:	2b00      	cmp	r3, #0
 8007720:	d117      	bne.n	8007752 <LL_I2C_ConfigSpeed+0x96>
                  __LL_I2C_SPEED_FAST_TO_CCR(PeriphClock, ClockSpeed, DutyCycle)        | \
 8007722:	687a      	ldr	r2, [r7, #4]
 8007724:	4613      	mov	r3, r2
 8007726:	005b      	lsls	r3, r3, #1
 8007728:	4413      	add	r3, r2
 800772a:	68ba      	ldr	r2, [r7, #8]
 800772c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007730:	f3c3 030b 	ubfx	r3, r3, #0, #12
    clockconfig = LL_I2C_CLOCK_SPEED_FAST_MODE                                          | \
 8007734:	2b00      	cmp	r3, #0
 8007736:	d009      	beq.n	800774c <LL_I2C_ConfigSpeed+0x90>
                  __LL_I2C_SPEED_FAST_TO_CCR(PeriphClock, ClockSpeed, DutyCycle)        | \
 8007738:	687a      	ldr	r2, [r7, #4]
 800773a:	4613      	mov	r3, r2
 800773c:	005b      	lsls	r3, r3, #1
 800773e:	4413      	add	r3, r2
 8007740:	68ba      	ldr	r2, [r7, #8]
 8007742:	fbb2 f3f3 	udiv	r3, r2, r3
    clockconfig = LL_I2C_CLOCK_SPEED_FAST_MODE                                          | \
 8007746:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800774a:	e01d      	b.n	8007788 <LL_I2C_ConfigSpeed+0xcc>
 800774c:	f248 0301 	movw	r3, #32769	; 0x8001
 8007750:	e01a      	b.n	8007788 <LL_I2C_ConfigSpeed+0xcc>
                  __LL_I2C_SPEED_FAST_TO_CCR(PeriphClock, ClockSpeed, DutyCycle)        | \
 8007752:	687a      	ldr	r2, [r7, #4]
 8007754:	4613      	mov	r3, r2
 8007756:	009b      	lsls	r3, r3, #2
 8007758:	4413      	add	r3, r2
 800775a:	009a      	lsls	r2, r3, #2
 800775c:	4413      	add	r3, r2
 800775e:	68ba      	ldr	r2, [r7, #8]
 8007760:	fbb2 f3f3 	udiv	r3, r2, r3
 8007764:	f3c3 030b 	ubfx	r3, r3, #0, #12
    clockconfig = LL_I2C_CLOCK_SPEED_FAST_MODE                                          | \
 8007768:	2b00      	cmp	r3, #0
 800776a:	d00b      	beq.n	8007784 <LL_I2C_ConfigSpeed+0xc8>
                  __LL_I2C_SPEED_FAST_TO_CCR(PeriphClock, ClockSpeed, DutyCycle)        | \
 800776c:	687a      	ldr	r2, [r7, #4]
 800776e:	4613      	mov	r3, r2
 8007770:	009b      	lsls	r3, r3, #2
 8007772:	4413      	add	r3, r2
 8007774:	009a      	lsls	r2, r3, #2
 8007776:	4413      	add	r3, r2
 8007778:	68ba      	ldr	r2, [r7, #8]
 800777a:	fbb2 f3f3 	udiv	r3, r2, r3
    clockconfig = LL_I2C_CLOCK_SPEED_FAST_MODE                                          | \
 800777e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007782:	e001      	b.n	8007788 <LL_I2C_ConfigSpeed+0xcc>
 8007784:	f248 0301 	movw	r3, #32769	; 0x8001
 8007788:	683a      	ldr	r2, [r7, #0]
 800778a:	ea43 0402 	orr.w	r4, r3, r2
 800778e:	e010      	b.n	80077b2 <LL_I2C_ConfigSpeed+0xf6>
  }
  else
  {
    /* Set Speed mode at standard for Clock Speed request in standard clock range */
    clockconfig = LL_I2C_CLOCK_SPEED_STANDARD_MODE                                      | \
                  __LL_I2C_SPEED_STANDARD_TO_CCR(PeriphClock, ClockSpeed);
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	005b      	lsls	r3, r3, #1
 8007794:	68ba      	ldr	r2, [r7, #8]
 8007796:	fbb2 f3f3 	udiv	r3, r2, r3
 800779a:	f3c3 030b 	ubfx	r3, r3, #0, #12
    clockconfig = LL_I2C_CLOCK_SPEED_STANDARD_MODE                                      | \
 800779e:	2b03      	cmp	r3, #3
 80077a0:	d905      	bls.n	80077ae <LL_I2C_ConfigSpeed+0xf2>
                  __LL_I2C_SPEED_STANDARD_TO_CCR(PeriphClock, ClockSpeed);
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	005b      	lsls	r3, r3, #1
    clockconfig = LL_I2C_CLOCK_SPEED_STANDARD_MODE                                      | \
 80077a6:	68ba      	ldr	r2, [r7, #8]
 80077a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80077ac:	e000      	b.n	80077b0 <LL_I2C_ConfigSpeed+0xf4>
 80077ae:	2304      	movs	r3, #4
 80077b0:	461c      	mov	r4, r3
  }

  /* Configure I2Cx: Clock control register */
  MODIFY_REG(I2Cx->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), clockconfig);
 80077b2:	68fb      	ldr	r3, [r7, #12]
 80077b4:	69db      	ldr	r3, [r3, #28]
 80077b6:	f423 434f 	bic.w	r3, r3, #52992	; 0xcf00
 80077ba:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80077be:	ea44 0203 	orr.w	r2, r4, r3
 80077c2:	68fb      	ldr	r3, [r7, #12]
 80077c4:	61da      	str	r2, [r3, #28]
}
 80077c6:	bf00      	nop
 80077c8:	3710      	adds	r7, #16
 80077ca:	46bd      	mov	sp, r7
 80077cc:	bc90      	pop	{r4, r7}
 80077ce:	4770      	bx	lr
 80077d0:	431bde83 	.word	0x431bde83
 80077d4:	000186a0 	.word	0x000186a0
 80077d8:	10624dd3 	.word	0x10624dd3

080077dc <LL_I2C_SetMode>:
  *         @arg @ref LL_I2C_MODE_SMBUS_DEVICE
  *         @arg @ref LL_I2C_MODE_SMBUS_DEVICE_ARP
  * @retval None
  */
__STATIC_INLINE void LL_I2C_SetMode(I2C_TypeDef *I2Cx, uint32_t PeripheralMode)
{
 80077dc:	b480      	push	{r7}
 80077de:	b083      	sub	sp, #12
 80077e0:	af00      	add	r7, sp, #0
 80077e2:	6078      	str	r0, [r7, #4]
 80077e4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->CR1, I2C_CR1_SMBUS | I2C_CR1_SMBTYPE | I2C_CR1_ENARP, PeripheralMode);
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	f023 021a 	bic.w	r2, r3, #26
 80077ee:	683b      	ldr	r3, [r7, #0]
 80077f0:	431a      	orrs	r2, r3
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	601a      	str	r2, [r3, #0]
}
 80077f6:	bf00      	nop
 80077f8:	370c      	adds	r7, #12
 80077fa:	46bd      	mov	sp, r7
 80077fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007800:	4770      	bx	lr

08007802 <LL_I2C_AcknowledgeNextData>:
  *         @arg @ref LL_I2C_ACK
  *         @arg @ref LL_I2C_NACK
  * @retval None
  */
__STATIC_INLINE void LL_I2C_AcknowledgeNextData(I2C_TypeDef *I2Cx, uint32_t TypeAcknowledge)
{
 8007802:	b480      	push	{r7}
 8007804:	b083      	sub	sp, #12
 8007806:	af00      	add	r7, sp, #0
 8007808:	6078      	str	r0, [r7, #4]
 800780a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->CR1, I2C_CR1_ACK, TypeAcknowledge);
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8007814:	683b      	ldr	r3, [r7, #0]
 8007816:	431a      	orrs	r2, r3
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	601a      	str	r2, [r3, #0]
}
 800781c:	bf00      	nop
 800781e:	370c      	adds	r7, #12
 8007820:	46bd      	mov	sp, r7
 8007822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007826:	4770      	bx	lr

08007828 <LL_I2C_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS  I2C registers are initialized
  *          - ERROR  Not applicable
  */
uint32_t LL_I2C_Init(I2C_TypeDef *I2Cx, LL_I2C_InitTypeDef *I2C_InitStruct)
{
 8007828:	b580      	push	{r7, lr}
 800782a:	b086      	sub	sp, #24
 800782c:	af00      	add	r7, sp, #0
 800782e:	6078      	str	r0, [r7, #4]
 8007830:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_I2C_OWN_ADDRESS1(I2C_InitStruct->OwnAddress1));
  assert_param(IS_LL_I2C_TYPE_ACKNOWLEDGE(I2C_InitStruct->TypeAcknowledge));
  assert_param(IS_LL_I2C_OWN_ADDRSIZE(I2C_InitStruct->OwnAddrSize));

  /* Disable the selected I2Cx Peripheral */
  LL_I2C_Disable(I2Cx);
 8007832:	6878      	ldr	r0, [r7, #4]
 8007834:	f7ff ff03 	bl	800763e <LL_I2C_Disable>

  /* Retrieve Clock frequencies */
  LL_RCC_GetSystemClocksFreq(&rcc_clocks);
 8007838:	f107 0308 	add.w	r3, r7, #8
 800783c:	4618      	mov	r0, r3
 800783e:	f000 f89d 	bl	800797c <LL_RCC_GetSystemClocksFreq>
  /*---------------------------- I2Cx FLTR Configuration -----------------------
   * Configure the analog and digital noise filters with parameters :
   * - AnalogFilter: I2C_FLTR_ANFOFF bit
   * - DigitalFilter: I2C_FLTR_DNF[3:0] bits
   */
  LL_I2C_ConfigFilters(I2Cx, I2C_InitStruct->AnalogFilter, I2C_InitStruct->DigitalFilter);
 8007842:	683b      	ldr	r3, [r7, #0]
 8007844:	68d9      	ldr	r1, [r3, #12]
 8007846:	683b      	ldr	r3, [r7, #0]
 8007848:	691b      	ldr	r3, [r3, #16]
 800784a:	461a      	mov	r2, r3
 800784c:	6878      	ldr	r0, [r7, #4]
 800784e:	f7ff ff06 	bl	800765e <LL_I2C_ConfigFilters>
   * Configure the SCL speed :
   * - ClockSpeed: I2C_CR2_FREQ[5:0], I2C_TRISE_TRISE[5:0], I2C_CCR_FS,
   *           and I2C_CCR_CCR[11:0] bits
   * - DutyCycle: I2C_CCR_DUTY[7:0] bits
   */
  LL_I2C_ConfigSpeed(I2Cx, rcc_clocks.PCLK1_Frequency, I2C_InitStruct->ClockSpeed, I2C_InitStruct->DutyCycle);
 8007852:	6939      	ldr	r1, [r7, #16]
 8007854:	683b      	ldr	r3, [r7, #0]
 8007856:	685a      	ldr	r2, [r3, #4]
 8007858:	683b      	ldr	r3, [r7, #0]
 800785a:	689b      	ldr	r3, [r3, #8]
 800785c:	6878      	ldr	r0, [r7, #4]
 800785e:	f7ff ff2d 	bl	80076bc <LL_I2C_ConfigSpeed>
  /*---------------------------- I2Cx OAR1 Configuration -----------------------
   * Disable, Configure and Enable I2Cx device own address 1 with parameters :
   * - OwnAddress1:  I2C_OAR1_ADD[9:8], I2C_OAR1_ADD[7:1] and I2C_OAR1_ADD0 bits
   * - OwnAddrSize:  I2C_OAR1_ADDMODE bit
   */
  LL_I2C_SetOwnAddress1(I2Cx, I2C_InitStruct->OwnAddress1, I2C_InitStruct->OwnAddrSize);
 8007862:	683b      	ldr	r3, [r7, #0]
 8007864:	6959      	ldr	r1, [r3, #20]
 8007866:	683b      	ldr	r3, [r7, #0]
 8007868:	69db      	ldr	r3, [r3, #28]
 800786a:	461a      	mov	r2, r3
 800786c:	6878      	ldr	r0, [r7, #4]
 800786e:	f7ff ff0c 	bl	800768a <LL_I2C_SetOwnAddress1>

  /*---------------------------- I2Cx MODE Configuration -----------------------
  * Configure I2Cx peripheral mode with parameter :
   * - PeripheralMode: I2C_CR1_SMBUS, I2C_CR1_SMBTYPE and I2C_CR1_ENARP bits
   */
  LL_I2C_SetMode(I2Cx, I2C_InitStruct->PeripheralMode);
 8007872:	683b      	ldr	r3, [r7, #0]
 8007874:	681b      	ldr	r3, [r3, #0]
 8007876:	4619      	mov	r1, r3
 8007878:	6878      	ldr	r0, [r7, #4]
 800787a:	f7ff ffaf 	bl	80077dc <LL_I2C_SetMode>

  /* Enable the selected I2Cx Peripheral */
  LL_I2C_Enable(I2Cx);
 800787e:	6878      	ldr	r0, [r7, #4]
 8007880:	f7ff fecd 	bl	800761e <LL_I2C_Enable>
  /*---------------------------- I2Cx CR2 Configuration ------------------------
   * Configure the ACKnowledge or Non ACKnowledge condition
   * after the address receive match code or next received byte with parameter :
   * - TypeAcknowledge: I2C_CR2_NACK bit
   */
  LL_I2C_AcknowledgeNextData(I2Cx, I2C_InitStruct->TypeAcknowledge);
 8007884:	683b      	ldr	r3, [r7, #0]
 8007886:	699b      	ldr	r3, [r3, #24]
 8007888:	4619      	mov	r1, r3
 800788a:	6878      	ldr	r0, [r7, #4]
 800788c:	f7ff ffb9 	bl	8007802 <LL_I2C_AcknowledgeNextData>

  return SUCCESS;
 8007890:	2300      	movs	r3, #0
}
 8007892:	4618      	mov	r0, r3
 8007894:	3718      	adds	r7, #24
 8007896:	46bd      	mov	sp, r7
 8007898:	bd80      	pop	{r7, pc}
	...

0800789c <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLLR (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 800789c:	b480      	push	{r7}
 800789e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80078a0:	4b04      	ldr	r3, [pc, #16]	; (80078b4 <LL_RCC_GetSysClkSource+0x18>)
 80078a2:	689b      	ldr	r3, [r3, #8]
 80078a4:	f003 030c 	and.w	r3, r3, #12
}
 80078a8:	4618      	mov	r0, r3
 80078aa:	46bd      	mov	sp, r7
 80078ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078b0:	4770      	bx	lr
 80078b2:	bf00      	nop
 80078b4:	40023800 	.word	0x40023800

080078b8 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 80078b8:	b480      	push	{r7}
 80078ba:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 80078bc:	4b04      	ldr	r3, [pc, #16]	; (80078d0 <LL_RCC_GetAHBPrescaler+0x18>)
 80078be:	689b      	ldr	r3, [r3, #8]
 80078c0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 80078c4:	4618      	mov	r0, r3
 80078c6:	46bd      	mov	sp, r7
 80078c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078cc:	4770      	bx	lr
 80078ce:	bf00      	nop
 80078d0:	40023800 	.word	0x40023800

080078d4 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 80078d4:	b480      	push	{r7}
 80078d6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 80078d8:	4b04      	ldr	r3, [pc, #16]	; (80078ec <LL_RCC_GetAPB1Prescaler+0x18>)
 80078da:	689b      	ldr	r3, [r3, #8]
 80078dc:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
}
 80078e0:	4618      	mov	r0, r3
 80078e2:	46bd      	mov	sp, r7
 80078e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078e8:	4770      	bx	lr
 80078ea:	bf00      	nop
 80078ec:	40023800 	.word	0x40023800

080078f0 <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 80078f0:	b480      	push	{r7}
 80078f2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 80078f4:	4b04      	ldr	r3, [pc, #16]	; (8007908 <LL_RCC_GetAPB2Prescaler+0x18>)
 80078f6:	689b      	ldr	r3, [r3, #8]
 80078f8:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 80078fc:	4618      	mov	r0, r3
 80078fe:	46bd      	mov	sp, r7
 8007900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007904:	4770      	bx	lr
 8007906:	bf00      	nop
 8007908:	40023800 	.word	0x40023800

0800790c <LL_RCC_PLL_GetMainSource>:
  * @retval Returned value can be one of the following values:
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 800790c:	b480      	push	{r7}
 800790e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8007910:	4b04      	ldr	r3, [pc, #16]	; (8007924 <LL_RCC_PLL_GetMainSource+0x18>)
 8007912:	685b      	ldr	r3, [r3, #4]
 8007914:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
}
 8007918:	4618      	mov	r0, r3
 800791a:	46bd      	mov	sp, r7
 800791c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007920:	4770      	bx	lr
 8007922:	bf00      	nop
 8007924:	40023800 	.word	0x40023800

08007928 <LL_RCC_PLL_GetN>:
  * @retval Between 50/192(*) and 432
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8007928:	b480      	push	{r7}
 800792a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 800792c:	4b04      	ldr	r3, [pc, #16]	; (8007940 <LL_RCC_PLL_GetN+0x18>)
 800792e:	685b      	ldr	r3, [r3, #4]
 8007930:	099b      	lsrs	r3, r3, #6
 8007932:	f3c3 0308 	ubfx	r3, r3, #0, #9
}
 8007936:	4618      	mov	r0, r3
 8007938:	46bd      	mov	sp, r7
 800793a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800793e:	4770      	bx	lr
 8007940:	40023800 	.word	0x40023800

08007944 <LL_RCC_PLL_GetP>:
  *         @arg @ref LL_RCC_PLLP_DIV_4
  *         @arg @ref LL_RCC_PLLP_DIV_6
  *         @arg @ref LL_RCC_PLLP_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetP(void)
{
 8007944:	b480      	push	{r7}
 8007946:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP));
 8007948:	4b04      	ldr	r3, [pc, #16]	; (800795c <LL_RCC_PLL_GetP+0x18>)
 800794a:	685b      	ldr	r3, [r3, #4]
 800794c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
}
 8007950:	4618      	mov	r0, r3
 8007952:	46bd      	mov	sp, r7
 8007954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007958:	4770      	bx	lr
 800795a:	bf00      	nop
 800795c:	40023800 	.word	0x40023800

08007960 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_61
  *         @arg @ref LL_RCC_PLLM_DIV_62
  *         @arg @ref LL_RCC_PLLM_DIV_63
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8007960:	b480      	push	{r7}
 8007962:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8007964:	4b04      	ldr	r3, [pc, #16]	; (8007978 <LL_RCC_PLL_GetDivider+0x18>)
 8007966:	685b      	ldr	r3, [r3, #4]
 8007968:	f003 033f 	and.w	r3, r3, #63	; 0x3f
}
 800796c:	4618      	mov	r0, r3
 800796e:	46bd      	mov	sp, r7
 8007970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007974:	4770      	bx	lr
 8007976:	bf00      	nop
 8007978:	40023800 	.word	0x40023800

0800797c <LL_RCC_GetSystemClocksFreq>:
  *         configuration based on this function will be incorrect.
  * @param  RCC_Clocks pointer to a @ref LL_RCC_ClocksTypeDef structure which will hold the clocks frequencies
  * @retval None
  */
void LL_RCC_GetSystemClocksFreq(LL_RCC_ClocksTypeDef *RCC_Clocks)
{
 800797c:	b580      	push	{r7, lr}
 800797e:	b082      	sub	sp, #8
 8007980:	af00      	add	r7, sp, #0
 8007982:	6078      	str	r0, [r7, #4]
  /* Get SYSCLK frequency */
  RCC_Clocks->SYSCLK_Frequency = RCC_GetSystemClockFreq();
 8007984:	f000 f820 	bl	80079c8 <RCC_GetSystemClockFreq>
 8007988:	4602      	mov	r2, r0
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	601a      	str	r2, [r3, #0]

  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency   = RCC_GetHCLKClockFreq(RCC_Clocks->SYSCLK_Frequency);
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	4618      	mov	r0, r3
 8007994:	f000 f83e 	bl	8007a14 <RCC_GetHCLKClockFreq>
 8007998:	4602      	mov	r2, r0
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	605a      	str	r2, [r3, #4]

  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency  = RCC_GetPCLK1ClockFreq(RCC_Clocks->HCLK_Frequency);
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	685b      	ldr	r3, [r3, #4]
 80079a2:	4618      	mov	r0, r3
 80079a4:	f000 f84c 	bl	8007a40 <RCC_GetPCLK1ClockFreq>
 80079a8:	4602      	mov	r2, r0
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	609a      	str	r2, [r3, #8]

  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency  = RCC_GetPCLK2ClockFreq(RCC_Clocks->HCLK_Frequency);
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	685b      	ldr	r3, [r3, #4]
 80079b2:	4618      	mov	r0, r3
 80079b4:	f000 f858 	bl	8007a68 <RCC_GetPCLK2ClockFreq>
 80079b8:	4602      	mov	r2, r0
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	60da      	str	r2, [r3, #12]
}
 80079be:	bf00      	nop
 80079c0:	3708      	adds	r7, #8
 80079c2:	46bd      	mov	sp, r7
 80079c4:	bd80      	pop	{r7, pc}
	...

080079c8 <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
uint32_t RCC_GetSystemClockFreq(void)
{
 80079c8:	b580      	push	{r7, lr}
 80079ca:	b082      	sub	sp, #8
 80079cc:	af00      	add	r7, sp, #0
  uint32_t frequency = 0U;
 80079ce:	2300      	movs	r3, #0
 80079d0:	607b      	str	r3, [r7, #4]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 80079d2:	f7ff ff63 	bl	800789c <LL_RCC_GetSysClkSource>
 80079d6:	4603      	mov	r3, r0
 80079d8:	2b04      	cmp	r3, #4
 80079da:	d006      	beq.n	80079ea <RCC_GetSystemClockFreq+0x22>
 80079dc:	2b08      	cmp	r3, #8
 80079de:	d007      	beq.n	80079f0 <RCC_GetSystemClockFreq+0x28>
 80079e0:	2b00      	cmp	r3, #0
 80079e2:	d10a      	bne.n	80079fa <RCC_GetSystemClockFreq+0x32>
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 80079e4:	4b09      	ldr	r3, [pc, #36]	; (8007a0c <RCC_GetSystemClockFreq+0x44>)
 80079e6:	607b      	str	r3, [r7, #4]
      break;
 80079e8:	e00a      	b.n	8007a00 <RCC_GetSystemClockFreq+0x38>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 80079ea:	4b09      	ldr	r3, [pc, #36]	; (8007a10 <RCC_GetSystemClockFreq+0x48>)
 80079ec:	607b      	str	r3, [r7, #4]
      break;
 80079ee:	e007      	b.n	8007a00 <RCC_GetSystemClockFreq+0x38>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS(LL_RCC_SYS_CLKSOURCE_STATUS_PLL);
 80079f0:	2008      	movs	r0, #8
 80079f2:	f000 f84d 	bl	8007a90 <RCC_PLL_GetFreqDomain_SYS>
 80079f6:	6078      	str	r0, [r7, #4]
      break;
 80079f8:	e002      	b.n	8007a00 <RCC_GetSystemClockFreq+0x38>
      frequency = RCC_PLL_GetFreqDomain_SYS(LL_RCC_SYS_CLKSOURCE_STATUS_PLLR);
      break;
#endif /* RCC_PLLR_SYSCLK_SUPPORT */

    default:
      frequency = HSI_VALUE;
 80079fa:	4b04      	ldr	r3, [pc, #16]	; (8007a0c <RCC_GetSystemClockFreq+0x44>)
 80079fc:	607b      	str	r3, [r7, #4]
      break;
 80079fe:	bf00      	nop
  }

  return frequency;
 8007a00:	687b      	ldr	r3, [r7, #4]
}
 8007a02:	4618      	mov	r0, r3
 8007a04:	3708      	adds	r7, #8
 8007a06:	46bd      	mov	sp, r7
 8007a08:	bd80      	pop	{r7, pc}
 8007a0a:	bf00      	nop
 8007a0c:	00f42400 	.word	0x00f42400
 8007a10:	007a1200 	.word	0x007a1200

08007a14 <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 8007a14:	b580      	push	{r7, lr}
 8007a16:	b082      	sub	sp, #8
 8007a18:	af00      	add	r7, sp, #0
 8007a1a:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 8007a1c:	f7ff ff4c 	bl	80078b8 <LL_RCC_GetAHBPrescaler>
 8007a20:	4603      	mov	r3, r0
 8007a22:	091b      	lsrs	r3, r3, #4
 8007a24:	f003 030f 	and.w	r3, r3, #15
 8007a28:	4a04      	ldr	r2, [pc, #16]	; (8007a3c <RCC_GetHCLKClockFreq+0x28>)
 8007a2a:	5cd3      	ldrb	r3, [r2, r3]
 8007a2c:	461a      	mov	r2, r3
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	40d3      	lsrs	r3, r2
}
 8007a32:	4618      	mov	r0, r3
 8007a34:	3708      	adds	r7, #8
 8007a36:	46bd      	mov	sp, r7
 8007a38:	bd80      	pop	{r7, pc}
 8007a3a:	bf00      	nop
 8007a3c:	0801e6d8 	.word	0x0801e6d8

08007a40 <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 8007a40:	b580      	push	{r7, lr}
 8007a42:	b082      	sub	sp, #8
 8007a44:	af00      	add	r7, sp, #0
 8007a46:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 8007a48:	f7ff ff44 	bl	80078d4 <LL_RCC_GetAPB1Prescaler>
 8007a4c:	4603      	mov	r3, r0
 8007a4e:	0a9b      	lsrs	r3, r3, #10
 8007a50:	4a04      	ldr	r2, [pc, #16]	; (8007a64 <RCC_GetPCLK1ClockFreq+0x24>)
 8007a52:	5cd3      	ldrb	r3, [r2, r3]
 8007a54:	461a      	mov	r2, r3
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	40d3      	lsrs	r3, r2
}
 8007a5a:	4618      	mov	r0, r3
 8007a5c:	3708      	adds	r7, #8
 8007a5e:	46bd      	mov	sp, r7
 8007a60:	bd80      	pop	{r7, pc}
 8007a62:	bf00      	nop
 8007a64:	0801e6e8 	.word	0x0801e6e8

08007a68 <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 8007a68:	b580      	push	{r7, lr}
 8007a6a:	b082      	sub	sp, #8
 8007a6c:	af00      	add	r7, sp, #0
 8007a6e:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 8007a70:	f7ff ff3e 	bl	80078f0 <LL_RCC_GetAPB2Prescaler>
 8007a74:	4603      	mov	r3, r0
 8007a76:	0b5b      	lsrs	r3, r3, #13
 8007a78:	4a04      	ldr	r2, [pc, #16]	; (8007a8c <RCC_GetPCLK2ClockFreq+0x24>)
 8007a7a:	5cd3      	ldrb	r3, [r2, r3]
 8007a7c:	461a      	mov	r2, r3
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	40d3      	lsrs	r3, r2
}
 8007a82:	4618      	mov	r0, r3
 8007a84:	3708      	adds	r7, #8
 8007a86:	46bd      	mov	sp, r7
 8007a88:	bd80      	pop	{r7, pc}
 8007a8a:	bf00      	nop
 8007a8c:	0801e6e8 	.word	0x0801e6e8

08007a90 <RCC_PLL_GetFreqDomain_SYS>:
  * @brief  Return PLL clock frequency used for system domain
  * @param  SYSCLK_Source System clock source
  * @retval PLL clock frequency (in Hz)
  */
uint32_t RCC_PLL_GetFreqDomain_SYS(uint32_t SYSCLK_Source)
{
 8007a90:	b590      	push	{r4, r7, lr}
 8007a92:	b087      	sub	sp, #28
 8007a94:	af00      	add	r7, sp, #0
 8007a96:	6078      	str	r0, [r7, #4]
  uint32_t pllinputfreq = 0U, pllsource = 0U, plloutputfreq = 0U;
 8007a98:	2300      	movs	r3, #0
 8007a9a:	617b      	str	r3, [r7, #20]
 8007a9c:	2300      	movs	r3, #0
 8007a9e:	60fb      	str	r3, [r7, #12]
 8007aa0:	2300      	movs	r3, #0
 8007aa2:	613b      	str	r3, [r7, #16]

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
     SYSCLK = PLL_VCO / (PLLP or PLLR)
  */
  pllsource = LL_RCC_PLL_GetMainSource();
 8007aa4:	f7ff ff32 	bl	800790c <LL_RCC_PLL_GetMainSource>
 8007aa8:	60f8      	str	r0, [r7, #12]

  switch (pllsource)
 8007aaa:	68fb      	ldr	r3, [r7, #12]
 8007aac:	2b00      	cmp	r3, #0
 8007aae:	d003      	beq.n	8007ab8 <RCC_PLL_GetFreqDomain_SYS+0x28>
 8007ab0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007ab4:	d003      	beq.n	8007abe <RCC_PLL_GetFreqDomain_SYS+0x2e>
 8007ab6:	e005      	b.n	8007ac4 <RCC_PLL_GetFreqDomain_SYS+0x34>
  {
    case LL_RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
 8007ab8:	4b12      	ldr	r3, [pc, #72]	; (8007b04 <RCC_PLL_GetFreqDomain_SYS+0x74>)
 8007aba:	617b      	str	r3, [r7, #20]
      break;
 8007abc:	e005      	b.n	8007aca <RCC_PLL_GetFreqDomain_SYS+0x3a>

    case LL_RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 8007abe:	4b12      	ldr	r3, [pc, #72]	; (8007b08 <RCC_PLL_GetFreqDomain_SYS+0x78>)
 8007ac0:	617b      	str	r3, [r7, #20]
      break;
 8007ac2:	e002      	b.n	8007aca <RCC_PLL_GetFreqDomain_SYS+0x3a>

    default:
      pllinputfreq = HSI_VALUE;
 8007ac4:	4b0f      	ldr	r3, [pc, #60]	; (8007b04 <RCC_PLL_GetFreqDomain_SYS+0x74>)
 8007ac6:	617b      	str	r3, [r7, #20]
      break;
 8007ac8:	bf00      	nop
  }

  if (SYSCLK_Source == LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	2b08      	cmp	r3, #8
 8007ace:	d113      	bne.n	8007af8 <RCC_PLL_GetFreqDomain_SYS+0x68>
  {
    plloutputfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8007ad0:	f7ff ff46 	bl	8007960 <LL_RCC_PLL_GetDivider>
 8007ad4:	4602      	mov	r2, r0
 8007ad6:	697b      	ldr	r3, [r7, #20]
 8007ad8:	fbb3 f4f2 	udiv	r4, r3, r2
 8007adc:	f7ff ff24 	bl	8007928 <LL_RCC_PLL_GetN>
 8007ae0:	4603      	mov	r3, r0
 8007ae2:	fb03 f404 	mul.w	r4, r3, r4
 8007ae6:	f7ff ff2d 	bl	8007944 <LL_RCC_PLL_GetP>
 8007aea:	4603      	mov	r3, r0
 8007aec:	0c1b      	lsrs	r3, r3, #16
 8007aee:	3301      	adds	r3, #1
 8007af0:	005b      	lsls	r3, r3, #1
 8007af2:	fbb4 f3f3 	udiv	r3, r4, r3
 8007af6:	613b      	str	r3, [r7, #16]
    plloutputfreq = __LL_RCC_CALC_PLLRCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
                                        LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }
#endif /* RCC_PLLR_SYSCLK_SUPPORT */

  return plloutputfreq;
 8007af8:	693b      	ldr	r3, [r7, #16]
}
 8007afa:	4618      	mov	r0, r3
 8007afc:	371c      	adds	r7, #28
 8007afe:	46bd      	mov	sp, r7
 8007b00:	bd90      	pop	{r4, r7, pc}
 8007b02:	bf00      	nop
 8007b04:	00f42400 	.word	0x00f42400
 8007b08:	007a1200 	.word	0x007a1200

08007b0c <LL_USART_IsEnabled>:
{
 8007b0c:	b480      	push	{r7}
 8007b0e:	b083      	sub	sp, #12
 8007b10:	af00      	add	r7, sp, #0
 8007b12:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE));
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	68db      	ldr	r3, [r3, #12]
 8007b18:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007b1c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007b20:	bf0c      	ite	eq
 8007b22:	2301      	moveq	r3, #1
 8007b24:	2300      	movne	r3, #0
 8007b26:	b2db      	uxtb	r3, r3
}
 8007b28:	4618      	mov	r0, r3
 8007b2a:	370c      	adds	r7, #12
 8007b2c:	46bd      	mov	sp, r7
 8007b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b32:	4770      	bx	lr

08007b34 <LL_USART_SetStopBitsLength>:
{
 8007b34:	b480      	push	{r7}
 8007b36:	b083      	sub	sp, #12
 8007b38:	af00      	add	r7, sp, #0
 8007b3a:	6078      	str	r0, [r7, #4]
 8007b3c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	691b      	ldr	r3, [r3, #16]
 8007b42:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8007b46:	683b      	ldr	r3, [r7, #0]
 8007b48:	431a      	orrs	r2, r3
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	611a      	str	r2, [r3, #16]
}
 8007b4e:	bf00      	nop
 8007b50:	370c      	adds	r7, #12
 8007b52:	46bd      	mov	sp, r7
 8007b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b58:	4770      	bx	lr

08007b5a <LL_USART_SetHWFlowCtrl>:
{
 8007b5a:	b480      	push	{r7}
 8007b5c:	b083      	sub	sp, #12
 8007b5e:	af00      	add	r7, sp, #0
 8007b60:	6078      	str	r0, [r7, #4]
 8007b62:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	695b      	ldr	r3, [r3, #20]
 8007b68:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007b6c:	683b      	ldr	r3, [r7, #0]
 8007b6e:	431a      	orrs	r2, r3
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	615a      	str	r2, [r3, #20]
}
 8007b74:	bf00      	nop
 8007b76:	370c      	adds	r7, #12
 8007b78:	46bd      	mov	sp, r7
 8007b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b7e:	4770      	bx	lr

08007b80 <LL_USART_SetBaudRate>:
{
 8007b80:	b480      	push	{r7}
 8007b82:	b085      	sub	sp, #20
 8007b84:	af00      	add	r7, sp, #0
 8007b86:	60f8      	str	r0, [r7, #12]
 8007b88:	60b9      	str	r1, [r7, #8]
 8007b8a:	607a      	str	r2, [r7, #4]
 8007b8c:	603b      	str	r3, [r7, #0]
  if (OverSampling == LL_USART_OVERSAMPLING_8)
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007b94:	d152      	bne.n	8007c3c <LL_USART_SetBaudRate+0xbc>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
 8007b96:	68ba      	ldr	r2, [r7, #8]
 8007b98:	4613      	mov	r3, r2
 8007b9a:	009b      	lsls	r3, r3, #2
 8007b9c:	4413      	add	r3, r2
 8007b9e:	009a      	lsls	r2, r3, #2
 8007ba0:	441a      	add	r2, r3
 8007ba2:	683b      	ldr	r3, [r7, #0]
 8007ba4:	005b      	lsls	r3, r3, #1
 8007ba6:	fbb2 f3f3 	udiv	r3, r2, r3
 8007baa:	4a4f      	ldr	r2, [pc, #316]	; (8007ce8 <LL_USART_SetBaudRate+0x168>)
 8007bac:	fba2 2303 	umull	r2, r3, r2, r3
 8007bb0:	095b      	lsrs	r3, r3, #5
 8007bb2:	b29b      	uxth	r3, r3
 8007bb4:	011b      	lsls	r3, r3, #4
 8007bb6:	b299      	uxth	r1, r3
 8007bb8:	68ba      	ldr	r2, [r7, #8]
 8007bba:	4613      	mov	r3, r2
 8007bbc:	009b      	lsls	r3, r3, #2
 8007bbe:	4413      	add	r3, r2
 8007bc0:	009a      	lsls	r2, r3, #2
 8007bc2:	441a      	add	r2, r3
 8007bc4:	683b      	ldr	r3, [r7, #0]
 8007bc6:	005b      	lsls	r3, r3, #1
 8007bc8:	fbb2 f2f3 	udiv	r2, r2, r3
 8007bcc:	4b46      	ldr	r3, [pc, #280]	; (8007ce8 <LL_USART_SetBaudRate+0x168>)
 8007bce:	fba3 0302 	umull	r0, r3, r3, r2
 8007bd2:	095b      	lsrs	r3, r3, #5
 8007bd4:	2064      	movs	r0, #100	; 0x64
 8007bd6:	fb00 f303 	mul.w	r3, r0, r3
 8007bda:	1ad3      	subs	r3, r2, r3
 8007bdc:	00db      	lsls	r3, r3, #3
 8007bde:	3332      	adds	r3, #50	; 0x32
 8007be0:	4a41      	ldr	r2, [pc, #260]	; (8007ce8 <LL_USART_SetBaudRate+0x168>)
 8007be2:	fba2 2303 	umull	r2, r3, r2, r3
 8007be6:	095b      	lsrs	r3, r3, #5
 8007be8:	b29b      	uxth	r3, r3
 8007bea:	005b      	lsls	r3, r3, #1
 8007bec:	b29b      	uxth	r3, r3
 8007bee:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8007bf2:	b29b      	uxth	r3, r3
 8007bf4:	440b      	add	r3, r1
 8007bf6:	b299      	uxth	r1, r3
 8007bf8:	68ba      	ldr	r2, [r7, #8]
 8007bfa:	4613      	mov	r3, r2
 8007bfc:	009b      	lsls	r3, r3, #2
 8007bfe:	4413      	add	r3, r2
 8007c00:	009a      	lsls	r2, r3, #2
 8007c02:	441a      	add	r2, r3
 8007c04:	683b      	ldr	r3, [r7, #0]
 8007c06:	005b      	lsls	r3, r3, #1
 8007c08:	fbb2 f2f3 	udiv	r2, r2, r3
 8007c0c:	4b36      	ldr	r3, [pc, #216]	; (8007ce8 <LL_USART_SetBaudRate+0x168>)
 8007c0e:	fba3 0302 	umull	r0, r3, r3, r2
 8007c12:	095b      	lsrs	r3, r3, #5
 8007c14:	2064      	movs	r0, #100	; 0x64
 8007c16:	fb00 f303 	mul.w	r3, r0, r3
 8007c1a:	1ad3      	subs	r3, r2, r3
 8007c1c:	00db      	lsls	r3, r3, #3
 8007c1e:	3332      	adds	r3, #50	; 0x32
 8007c20:	4a31      	ldr	r2, [pc, #196]	; (8007ce8 <LL_USART_SetBaudRate+0x168>)
 8007c22:	fba2 2303 	umull	r2, r3, r2, r3
 8007c26:	095b      	lsrs	r3, r3, #5
 8007c28:	b29b      	uxth	r3, r3
 8007c2a:	f003 0307 	and.w	r3, r3, #7
 8007c2e:	b29b      	uxth	r3, r3
 8007c30:	440b      	add	r3, r1
 8007c32:	b29b      	uxth	r3, r3
 8007c34:	461a      	mov	r2, r3
 8007c36:	68fb      	ldr	r3, [r7, #12]
 8007c38:	609a      	str	r2, [r3, #8]
}
 8007c3a:	e04f      	b.n	8007cdc <LL_USART_SetBaudRate+0x15c>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 8007c3c:	68ba      	ldr	r2, [r7, #8]
 8007c3e:	4613      	mov	r3, r2
 8007c40:	009b      	lsls	r3, r3, #2
 8007c42:	4413      	add	r3, r2
 8007c44:	009a      	lsls	r2, r3, #2
 8007c46:	441a      	add	r2, r3
 8007c48:	683b      	ldr	r3, [r7, #0]
 8007c4a:	009b      	lsls	r3, r3, #2
 8007c4c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007c50:	4a25      	ldr	r2, [pc, #148]	; (8007ce8 <LL_USART_SetBaudRate+0x168>)
 8007c52:	fba2 2303 	umull	r2, r3, r2, r3
 8007c56:	095b      	lsrs	r3, r3, #5
 8007c58:	b29b      	uxth	r3, r3
 8007c5a:	011b      	lsls	r3, r3, #4
 8007c5c:	b299      	uxth	r1, r3
 8007c5e:	68ba      	ldr	r2, [r7, #8]
 8007c60:	4613      	mov	r3, r2
 8007c62:	009b      	lsls	r3, r3, #2
 8007c64:	4413      	add	r3, r2
 8007c66:	009a      	lsls	r2, r3, #2
 8007c68:	441a      	add	r2, r3
 8007c6a:	683b      	ldr	r3, [r7, #0]
 8007c6c:	009b      	lsls	r3, r3, #2
 8007c6e:	fbb2 f2f3 	udiv	r2, r2, r3
 8007c72:	4b1d      	ldr	r3, [pc, #116]	; (8007ce8 <LL_USART_SetBaudRate+0x168>)
 8007c74:	fba3 0302 	umull	r0, r3, r3, r2
 8007c78:	095b      	lsrs	r3, r3, #5
 8007c7a:	2064      	movs	r0, #100	; 0x64
 8007c7c:	fb00 f303 	mul.w	r3, r0, r3
 8007c80:	1ad3      	subs	r3, r2, r3
 8007c82:	011b      	lsls	r3, r3, #4
 8007c84:	3332      	adds	r3, #50	; 0x32
 8007c86:	4a18      	ldr	r2, [pc, #96]	; (8007ce8 <LL_USART_SetBaudRate+0x168>)
 8007c88:	fba2 2303 	umull	r2, r3, r2, r3
 8007c8c:	095b      	lsrs	r3, r3, #5
 8007c8e:	b29b      	uxth	r3, r3
 8007c90:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007c94:	b29b      	uxth	r3, r3
 8007c96:	440b      	add	r3, r1
 8007c98:	b299      	uxth	r1, r3
 8007c9a:	68ba      	ldr	r2, [r7, #8]
 8007c9c:	4613      	mov	r3, r2
 8007c9e:	009b      	lsls	r3, r3, #2
 8007ca0:	4413      	add	r3, r2
 8007ca2:	009a      	lsls	r2, r3, #2
 8007ca4:	441a      	add	r2, r3
 8007ca6:	683b      	ldr	r3, [r7, #0]
 8007ca8:	009b      	lsls	r3, r3, #2
 8007caa:	fbb2 f2f3 	udiv	r2, r2, r3
 8007cae:	4b0e      	ldr	r3, [pc, #56]	; (8007ce8 <LL_USART_SetBaudRate+0x168>)
 8007cb0:	fba3 0302 	umull	r0, r3, r3, r2
 8007cb4:	095b      	lsrs	r3, r3, #5
 8007cb6:	2064      	movs	r0, #100	; 0x64
 8007cb8:	fb00 f303 	mul.w	r3, r0, r3
 8007cbc:	1ad3      	subs	r3, r2, r3
 8007cbe:	011b      	lsls	r3, r3, #4
 8007cc0:	3332      	adds	r3, #50	; 0x32
 8007cc2:	4a09      	ldr	r2, [pc, #36]	; (8007ce8 <LL_USART_SetBaudRate+0x168>)
 8007cc4:	fba2 2303 	umull	r2, r3, r2, r3
 8007cc8:	095b      	lsrs	r3, r3, #5
 8007cca:	b29b      	uxth	r3, r3
 8007ccc:	f003 030f 	and.w	r3, r3, #15
 8007cd0:	b29b      	uxth	r3, r3
 8007cd2:	440b      	add	r3, r1
 8007cd4:	b29b      	uxth	r3, r3
 8007cd6:	461a      	mov	r2, r3
 8007cd8:	68fb      	ldr	r3, [r7, #12]
 8007cda:	609a      	str	r2, [r3, #8]
}
 8007cdc:	bf00      	nop
 8007cde:	3714      	adds	r7, #20
 8007ce0:	46bd      	mov	sp, r7
 8007ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ce6:	4770      	bx	lr
 8007ce8:	51eb851f 	.word	0x51eb851f

08007cec <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, LL_USART_InitTypeDef *USART_InitStruct)
{
 8007cec:	b580      	push	{r7, lr}
 8007cee:	b088      	sub	sp, #32
 8007cf0:	af00      	add	r7, sp, #0
 8007cf2:	6078      	str	r0, [r7, #4]
 8007cf4:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 8007cf6:	2301      	movs	r3, #1
 8007cf8:	77fb      	strb	r3, [r7, #31]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 8007cfa:	2300      	movs	r3, #0
 8007cfc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 8007cfe:	6878      	ldr	r0, [r7, #4]
 8007d00:	f7ff ff04 	bl	8007b0c <LL_USART_IsEnabled>
 8007d04:	4603      	mov	r3, r0
 8007d06:	2b00      	cmp	r3, #0
 8007d08:	d16c      	bne.n	8007de4 <LL_USART_Init+0xf8>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	68db      	ldr	r3, [r3, #12]
 8007d0e:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8007d12:	f023 030c 	bic.w	r3, r3, #12
 8007d16:	683a      	ldr	r2, [r7, #0]
 8007d18:	6851      	ldr	r1, [r2, #4]
 8007d1a:	683a      	ldr	r2, [r7, #0]
 8007d1c:	68d2      	ldr	r2, [r2, #12]
 8007d1e:	4311      	orrs	r1, r2
 8007d20:	683a      	ldr	r2, [r7, #0]
 8007d22:	6912      	ldr	r2, [r2, #16]
 8007d24:	4311      	orrs	r1, r2
 8007d26:	683a      	ldr	r2, [r7, #0]
 8007d28:	6992      	ldr	r2, [r2, #24]
 8007d2a:	430a      	orrs	r2, r1
 8007d2c:	431a      	orrs	r2, r3
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	60da      	str	r2, [r3, #12]
    /*---------------------------- USART CR2 Configuration -----------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 8007d32:	683b      	ldr	r3, [r7, #0]
 8007d34:	689b      	ldr	r3, [r3, #8]
 8007d36:	4619      	mov	r1, r3
 8007d38:	6878      	ldr	r0, [r7, #4]
 8007d3a:	f7ff fefb 	bl	8007b34 <LL_USART_SetStopBitsLength>

    /*---------------------------- USART CR3 Configuration -----------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 8007d3e:	683b      	ldr	r3, [r7, #0]
 8007d40:	695b      	ldr	r3, [r3, #20]
 8007d42:	4619      	mov	r1, r3
 8007d44:	6878      	ldr	r0, [r7, #4]
 8007d46:	f7ff ff08 	bl	8007b5a <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration -----------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    LL_RCC_GetSystemClocksFreq(&rcc_clocks);
 8007d4a:	f107 0308 	add.w	r3, r7, #8
 8007d4e:	4618      	mov	r0, r3
 8007d50:	f7ff fe14 	bl	800797c <LL_RCC_GetSystemClocksFreq>
    if (USARTx == USART1)
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	4a26      	ldr	r2, [pc, #152]	; (8007df0 <LL_USART_Init+0x104>)
 8007d58:	4293      	cmp	r3, r2
 8007d5a:	d102      	bne.n	8007d62 <LL_USART_Init+0x76>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 8007d5c:	697b      	ldr	r3, [r7, #20]
 8007d5e:	61bb      	str	r3, [r7, #24]
 8007d60:	e02f      	b.n	8007dc2 <LL_USART_Init+0xd6>
    }
    else if (USARTx == USART2)
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	4a23      	ldr	r2, [pc, #140]	; (8007df4 <LL_USART_Init+0x108>)
 8007d66:	4293      	cmp	r3, r2
 8007d68:	d102      	bne.n	8007d70 <LL_USART_Init+0x84>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8007d6a:	693b      	ldr	r3, [r7, #16]
 8007d6c:	61bb      	str	r3, [r7, #24]
 8007d6e:	e028      	b.n	8007dc2 <LL_USART_Init+0xd6>
    }
#if defined(USART3)
    else if (USARTx == USART3)
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	4a21      	ldr	r2, [pc, #132]	; (8007df8 <LL_USART_Init+0x10c>)
 8007d74:	4293      	cmp	r3, r2
 8007d76:	d102      	bne.n	8007d7e <LL_USART_Init+0x92>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8007d78:	693b      	ldr	r3, [r7, #16]
 8007d7a:	61bb      	str	r3, [r7, #24]
 8007d7c:	e021      	b.n	8007dc2 <LL_USART_Init+0xd6>
    }
#endif /* USART3 */
#if defined(USART6)
    else if (USARTx == USART6)
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	4a1e      	ldr	r2, [pc, #120]	; (8007dfc <LL_USART_Init+0x110>)
 8007d82:	4293      	cmp	r3, r2
 8007d84:	d102      	bne.n	8007d8c <LL_USART_Init+0xa0>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 8007d86:	697b      	ldr	r3, [r7, #20]
 8007d88:	61bb      	str	r3, [r7, #24]
 8007d8a:	e01a      	b.n	8007dc2 <LL_USART_Init+0xd6>
    }
#endif /* USART6 */
#if defined(UART4)
    else if (USARTx == UART4)
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	4a1c      	ldr	r2, [pc, #112]	; (8007e00 <LL_USART_Init+0x114>)
 8007d90:	4293      	cmp	r3, r2
 8007d92:	d102      	bne.n	8007d9a <LL_USART_Init+0xae>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8007d94:	693b      	ldr	r3, [r7, #16]
 8007d96:	61bb      	str	r3, [r7, #24]
 8007d98:	e013      	b.n	8007dc2 <LL_USART_Init+0xd6>
    }
#endif /* UART4 */
#if defined(UART5)
    else if (USARTx == UART5)
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	4a19      	ldr	r2, [pc, #100]	; (8007e04 <LL_USART_Init+0x118>)
 8007d9e:	4293      	cmp	r3, r2
 8007da0:	d102      	bne.n	8007da8 <LL_USART_Init+0xbc>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8007da2:	693b      	ldr	r3, [r7, #16]
 8007da4:	61bb      	str	r3, [r7, #24]
 8007da6:	e00c      	b.n	8007dc2 <LL_USART_Init+0xd6>
    }
#endif /* UART5 */
#if defined(UART7)
    else if (USARTx == UART7)
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	4a17      	ldr	r2, [pc, #92]	; (8007e08 <LL_USART_Init+0x11c>)
 8007dac:	4293      	cmp	r3, r2
 8007dae:	d102      	bne.n	8007db6 <LL_USART_Init+0xca>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8007db0:	693b      	ldr	r3, [r7, #16]
 8007db2:	61bb      	str	r3, [r7, #24]
 8007db4:	e005      	b.n	8007dc2 <LL_USART_Init+0xd6>
    }
#endif /* UART7 */
#if defined(UART8)
    else if (USARTx == UART8)
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	4a14      	ldr	r2, [pc, #80]	; (8007e0c <LL_USART_Init+0x120>)
 8007dba:	4293      	cmp	r3, r2
 8007dbc:	d101      	bne.n	8007dc2 <LL_USART_Init+0xd6>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8007dbe:	693b      	ldr	r3, [r7, #16]
 8007dc0:	61bb      	str	r3, [r7, #24]

    /* Configure the USART Baud Rate :
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 8007dc2:	69bb      	ldr	r3, [r7, #24]
 8007dc4:	2b00      	cmp	r3, #0
 8007dc6:	d00d      	beq.n	8007de4 <LL_USART_Init+0xf8>
        && (USART_InitStruct->BaudRate != 0U))
 8007dc8:	683b      	ldr	r3, [r7, #0]
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	2b00      	cmp	r3, #0
 8007dce:	d009      	beq.n	8007de4 <LL_USART_Init+0xf8>
    {
      status = SUCCESS;
 8007dd0:	2300      	movs	r3, #0
 8007dd2:	77fb      	strb	r3, [r7, #31]
      LL_USART_SetBaudRate(USARTx,
 8007dd4:	683b      	ldr	r3, [r7, #0]
 8007dd6:	699a      	ldr	r2, [r3, #24]
 8007dd8:	683b      	ldr	r3, [r7, #0]
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	69b9      	ldr	r1, [r7, #24]
 8007dde:	6878      	ldr	r0, [r7, #4]
 8007de0:	f7ff fece 	bl	8007b80 <LL_USART_SetBaudRate>
      assert_param(IS_LL_USART_BRR_MAX(USARTx->BRR));
    }
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 8007de4:	7ffb      	ldrb	r3, [r7, #31]
}
 8007de6:	4618      	mov	r0, r3
 8007de8:	3720      	adds	r7, #32
 8007dea:	46bd      	mov	sp, r7
 8007dec:	bd80      	pop	{r7, pc}
 8007dee:	bf00      	nop
 8007df0:	40011000 	.word	0x40011000
 8007df4:	40004400 	.word	0x40004400
 8007df8:	40004800 	.word	0x40004800
 8007dfc:	40011400 	.word	0x40011400
 8007e00:	40004c00 	.word	0x40004c00
 8007e04:	40005000 	.word	0x40005000
 8007e08:	40007800 	.word	0x40007800
 8007e0c:	40007c00 	.word	0x40007c00

08007e10 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007e10:	b084      	sub	sp, #16
 8007e12:	b580      	push	{r7, lr}
 8007e14:	b084      	sub	sp, #16
 8007e16:	af00      	add	r7, sp, #0
 8007e18:	6078      	str	r0, [r7, #4]
 8007e1a:	f107 001c 	add.w	r0, r7, #28
 8007e1e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007e22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e24:	2b01      	cmp	r3, #1
 8007e26:	d122      	bne.n	8007e6e <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e2c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	68db      	ldr	r3, [r3, #12]
 8007e38:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8007e3c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007e40:	687a      	ldr	r2, [r7, #4]
 8007e42:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	68db      	ldr	r3, [r3, #12]
 8007e48:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8007e50:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007e52:	2b01      	cmp	r3, #1
 8007e54:	d105      	bne.n	8007e62 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	68db      	ldr	r3, [r3, #12]
 8007e5a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8007e62:	6878      	ldr	r0, [r7, #4]
 8007e64:	f001 fa7c 	bl	8009360 <USB_CoreReset>
 8007e68:	4603      	mov	r3, r0
 8007e6a:	73fb      	strb	r3, [r7, #15]
 8007e6c:	e01a      	b.n	8007ea4 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	68db      	ldr	r3, [r3, #12]
 8007e72:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 8007e7a:	6878      	ldr	r0, [r7, #4]
 8007e7c:	f001 fa70 	bl	8009360 <USB_CoreReset>
 8007e80:	4603      	mov	r3, r0
 8007e82:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8007e84:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007e86:	2b00      	cmp	r3, #0
 8007e88:	d106      	bne.n	8007e98 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e8e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	639a      	str	r2, [r3, #56]	; 0x38
 8007e96:	e005      	b.n	8007ea4 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e9c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8007ea4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ea6:	2b01      	cmp	r3, #1
 8007ea8:	d10b      	bne.n	8007ec2 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	689b      	ldr	r3, [r3, #8]
 8007eae:	f043 0206 	orr.w	r2, r3, #6
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	689b      	ldr	r3, [r3, #8]
 8007eba:	f043 0220 	orr.w	r2, r3, #32
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8007ec2:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ec4:	4618      	mov	r0, r3
 8007ec6:	3710      	adds	r7, #16
 8007ec8:	46bd      	mov	sp, r7
 8007eca:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007ece:	b004      	add	sp, #16
 8007ed0:	4770      	bx	lr
	...

08007ed4 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8007ed4:	b480      	push	{r7}
 8007ed6:	b087      	sub	sp, #28
 8007ed8:	af00      	add	r7, sp, #0
 8007eda:	60f8      	str	r0, [r7, #12]
 8007edc:	60b9      	str	r1, [r7, #8]
 8007ede:	4613      	mov	r3, r2
 8007ee0:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8007ee2:	79fb      	ldrb	r3, [r7, #7]
 8007ee4:	2b02      	cmp	r3, #2
 8007ee6:	d165      	bne.n	8007fb4 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8007ee8:	68bb      	ldr	r3, [r7, #8]
 8007eea:	4a41      	ldr	r2, [pc, #260]	; (8007ff0 <USB_SetTurnaroundTime+0x11c>)
 8007eec:	4293      	cmp	r3, r2
 8007eee:	d906      	bls.n	8007efe <USB_SetTurnaroundTime+0x2a>
 8007ef0:	68bb      	ldr	r3, [r7, #8]
 8007ef2:	4a40      	ldr	r2, [pc, #256]	; (8007ff4 <USB_SetTurnaroundTime+0x120>)
 8007ef4:	4293      	cmp	r3, r2
 8007ef6:	d802      	bhi.n	8007efe <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8007ef8:	230f      	movs	r3, #15
 8007efa:	617b      	str	r3, [r7, #20]
 8007efc:	e062      	b.n	8007fc4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8007efe:	68bb      	ldr	r3, [r7, #8]
 8007f00:	4a3c      	ldr	r2, [pc, #240]	; (8007ff4 <USB_SetTurnaroundTime+0x120>)
 8007f02:	4293      	cmp	r3, r2
 8007f04:	d906      	bls.n	8007f14 <USB_SetTurnaroundTime+0x40>
 8007f06:	68bb      	ldr	r3, [r7, #8]
 8007f08:	4a3b      	ldr	r2, [pc, #236]	; (8007ff8 <USB_SetTurnaroundTime+0x124>)
 8007f0a:	4293      	cmp	r3, r2
 8007f0c:	d802      	bhi.n	8007f14 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8007f0e:	230e      	movs	r3, #14
 8007f10:	617b      	str	r3, [r7, #20]
 8007f12:	e057      	b.n	8007fc4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8007f14:	68bb      	ldr	r3, [r7, #8]
 8007f16:	4a38      	ldr	r2, [pc, #224]	; (8007ff8 <USB_SetTurnaroundTime+0x124>)
 8007f18:	4293      	cmp	r3, r2
 8007f1a:	d906      	bls.n	8007f2a <USB_SetTurnaroundTime+0x56>
 8007f1c:	68bb      	ldr	r3, [r7, #8]
 8007f1e:	4a37      	ldr	r2, [pc, #220]	; (8007ffc <USB_SetTurnaroundTime+0x128>)
 8007f20:	4293      	cmp	r3, r2
 8007f22:	d802      	bhi.n	8007f2a <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8007f24:	230d      	movs	r3, #13
 8007f26:	617b      	str	r3, [r7, #20]
 8007f28:	e04c      	b.n	8007fc4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8007f2a:	68bb      	ldr	r3, [r7, #8]
 8007f2c:	4a33      	ldr	r2, [pc, #204]	; (8007ffc <USB_SetTurnaroundTime+0x128>)
 8007f2e:	4293      	cmp	r3, r2
 8007f30:	d906      	bls.n	8007f40 <USB_SetTurnaroundTime+0x6c>
 8007f32:	68bb      	ldr	r3, [r7, #8]
 8007f34:	4a32      	ldr	r2, [pc, #200]	; (8008000 <USB_SetTurnaroundTime+0x12c>)
 8007f36:	4293      	cmp	r3, r2
 8007f38:	d802      	bhi.n	8007f40 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8007f3a:	230c      	movs	r3, #12
 8007f3c:	617b      	str	r3, [r7, #20]
 8007f3e:	e041      	b.n	8007fc4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8007f40:	68bb      	ldr	r3, [r7, #8]
 8007f42:	4a2f      	ldr	r2, [pc, #188]	; (8008000 <USB_SetTurnaroundTime+0x12c>)
 8007f44:	4293      	cmp	r3, r2
 8007f46:	d906      	bls.n	8007f56 <USB_SetTurnaroundTime+0x82>
 8007f48:	68bb      	ldr	r3, [r7, #8]
 8007f4a:	4a2e      	ldr	r2, [pc, #184]	; (8008004 <USB_SetTurnaroundTime+0x130>)
 8007f4c:	4293      	cmp	r3, r2
 8007f4e:	d802      	bhi.n	8007f56 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8007f50:	230b      	movs	r3, #11
 8007f52:	617b      	str	r3, [r7, #20]
 8007f54:	e036      	b.n	8007fc4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8007f56:	68bb      	ldr	r3, [r7, #8]
 8007f58:	4a2a      	ldr	r2, [pc, #168]	; (8008004 <USB_SetTurnaroundTime+0x130>)
 8007f5a:	4293      	cmp	r3, r2
 8007f5c:	d906      	bls.n	8007f6c <USB_SetTurnaroundTime+0x98>
 8007f5e:	68bb      	ldr	r3, [r7, #8]
 8007f60:	4a29      	ldr	r2, [pc, #164]	; (8008008 <USB_SetTurnaroundTime+0x134>)
 8007f62:	4293      	cmp	r3, r2
 8007f64:	d802      	bhi.n	8007f6c <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8007f66:	230a      	movs	r3, #10
 8007f68:	617b      	str	r3, [r7, #20]
 8007f6a:	e02b      	b.n	8007fc4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8007f6c:	68bb      	ldr	r3, [r7, #8]
 8007f6e:	4a26      	ldr	r2, [pc, #152]	; (8008008 <USB_SetTurnaroundTime+0x134>)
 8007f70:	4293      	cmp	r3, r2
 8007f72:	d906      	bls.n	8007f82 <USB_SetTurnaroundTime+0xae>
 8007f74:	68bb      	ldr	r3, [r7, #8]
 8007f76:	4a25      	ldr	r2, [pc, #148]	; (800800c <USB_SetTurnaroundTime+0x138>)
 8007f78:	4293      	cmp	r3, r2
 8007f7a:	d802      	bhi.n	8007f82 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8007f7c:	2309      	movs	r3, #9
 8007f7e:	617b      	str	r3, [r7, #20]
 8007f80:	e020      	b.n	8007fc4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8007f82:	68bb      	ldr	r3, [r7, #8]
 8007f84:	4a21      	ldr	r2, [pc, #132]	; (800800c <USB_SetTurnaroundTime+0x138>)
 8007f86:	4293      	cmp	r3, r2
 8007f88:	d906      	bls.n	8007f98 <USB_SetTurnaroundTime+0xc4>
 8007f8a:	68bb      	ldr	r3, [r7, #8]
 8007f8c:	4a20      	ldr	r2, [pc, #128]	; (8008010 <USB_SetTurnaroundTime+0x13c>)
 8007f8e:	4293      	cmp	r3, r2
 8007f90:	d802      	bhi.n	8007f98 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8007f92:	2308      	movs	r3, #8
 8007f94:	617b      	str	r3, [r7, #20]
 8007f96:	e015      	b.n	8007fc4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8007f98:	68bb      	ldr	r3, [r7, #8]
 8007f9a:	4a1d      	ldr	r2, [pc, #116]	; (8008010 <USB_SetTurnaroundTime+0x13c>)
 8007f9c:	4293      	cmp	r3, r2
 8007f9e:	d906      	bls.n	8007fae <USB_SetTurnaroundTime+0xda>
 8007fa0:	68bb      	ldr	r3, [r7, #8]
 8007fa2:	4a1c      	ldr	r2, [pc, #112]	; (8008014 <USB_SetTurnaroundTime+0x140>)
 8007fa4:	4293      	cmp	r3, r2
 8007fa6:	d802      	bhi.n	8007fae <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8007fa8:	2307      	movs	r3, #7
 8007faa:	617b      	str	r3, [r7, #20]
 8007fac:	e00a      	b.n	8007fc4 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8007fae:	2306      	movs	r3, #6
 8007fb0:	617b      	str	r3, [r7, #20]
 8007fb2:	e007      	b.n	8007fc4 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8007fb4:	79fb      	ldrb	r3, [r7, #7]
 8007fb6:	2b00      	cmp	r3, #0
 8007fb8:	d102      	bne.n	8007fc0 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8007fba:	2309      	movs	r3, #9
 8007fbc:	617b      	str	r3, [r7, #20]
 8007fbe:	e001      	b.n	8007fc4 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8007fc0:	2309      	movs	r3, #9
 8007fc2:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8007fc4:	68fb      	ldr	r3, [r7, #12]
 8007fc6:	68db      	ldr	r3, [r3, #12]
 8007fc8:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8007fcc:	68fb      	ldr	r3, [r7, #12]
 8007fce:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8007fd0:	68fb      	ldr	r3, [r7, #12]
 8007fd2:	68da      	ldr	r2, [r3, #12]
 8007fd4:	697b      	ldr	r3, [r7, #20]
 8007fd6:	029b      	lsls	r3, r3, #10
 8007fd8:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8007fdc:	431a      	orrs	r2, r3
 8007fde:	68fb      	ldr	r3, [r7, #12]
 8007fe0:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8007fe2:	2300      	movs	r3, #0
}
 8007fe4:	4618      	mov	r0, r3
 8007fe6:	371c      	adds	r7, #28
 8007fe8:	46bd      	mov	sp, r7
 8007fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fee:	4770      	bx	lr
 8007ff0:	00d8acbf 	.word	0x00d8acbf
 8007ff4:	00e4e1bf 	.word	0x00e4e1bf
 8007ff8:	00f423ff 	.word	0x00f423ff
 8007ffc:	0106737f 	.word	0x0106737f
 8008000:	011a499f 	.word	0x011a499f
 8008004:	01312cff 	.word	0x01312cff
 8008008:	014ca43f 	.word	0x014ca43f
 800800c:	016e35ff 	.word	0x016e35ff
 8008010:	01a6ab1f 	.word	0x01a6ab1f
 8008014:	01e847ff 	.word	0x01e847ff

08008018 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8008018:	b480      	push	{r7}
 800801a:	b083      	sub	sp, #12
 800801c:	af00      	add	r7, sp, #0
 800801e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	689b      	ldr	r3, [r3, #8]
 8008024:	f043 0201 	orr.w	r2, r3, #1
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800802c:	2300      	movs	r3, #0
}
 800802e:	4618      	mov	r0, r3
 8008030:	370c      	adds	r7, #12
 8008032:	46bd      	mov	sp, r7
 8008034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008038:	4770      	bx	lr

0800803a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800803a:	b480      	push	{r7}
 800803c:	b083      	sub	sp, #12
 800803e:	af00      	add	r7, sp, #0
 8008040:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	689b      	ldr	r3, [r3, #8]
 8008046:	f023 0201 	bic.w	r2, r3, #1
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800804e:	2300      	movs	r3, #0
}
 8008050:	4618      	mov	r0, r3
 8008052:	370c      	adds	r7, #12
 8008054:	46bd      	mov	sp, r7
 8008056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800805a:	4770      	bx	lr

0800805c <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800805c:	b580      	push	{r7, lr}
 800805e:	b082      	sub	sp, #8
 8008060:	af00      	add	r7, sp, #0
 8008062:	6078      	str	r0, [r7, #4]
 8008064:	460b      	mov	r3, r1
 8008066:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	68db      	ldr	r3, [r3, #12]
 800806c:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8008074:	78fb      	ldrb	r3, [r7, #3]
 8008076:	2b01      	cmp	r3, #1
 8008078:	d106      	bne.n	8008088 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	68db      	ldr	r3, [r3, #12]
 800807e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	60da      	str	r2, [r3, #12]
 8008086:	e00b      	b.n	80080a0 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8008088:	78fb      	ldrb	r3, [r7, #3]
 800808a:	2b00      	cmp	r3, #0
 800808c:	d106      	bne.n	800809c <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	68db      	ldr	r3, [r3, #12]
 8008092:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	60da      	str	r2, [r3, #12]
 800809a:	e001      	b.n	80080a0 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 800809c:	2301      	movs	r3, #1
 800809e:	e003      	b.n	80080a8 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 80080a0:	2032      	movs	r0, #50	; 0x32
 80080a2:	f7fa fc15 	bl	80028d0 <HAL_Delay>

  return HAL_OK;
 80080a6:	2300      	movs	r3, #0
}
 80080a8:	4618      	mov	r0, r3
 80080aa:	3708      	adds	r7, #8
 80080ac:	46bd      	mov	sp, r7
 80080ae:	bd80      	pop	{r7, pc}

080080b0 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80080b0:	b084      	sub	sp, #16
 80080b2:	b580      	push	{r7, lr}
 80080b4:	b086      	sub	sp, #24
 80080b6:	af00      	add	r7, sp, #0
 80080b8:	6078      	str	r0, [r7, #4]
 80080ba:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80080be:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80080c2:	2300      	movs	r3, #0
 80080c4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80080ca:	2300      	movs	r3, #0
 80080cc:	613b      	str	r3, [r7, #16]
 80080ce:	e009      	b.n	80080e4 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80080d0:	687a      	ldr	r2, [r7, #4]
 80080d2:	693b      	ldr	r3, [r7, #16]
 80080d4:	3340      	adds	r3, #64	; 0x40
 80080d6:	009b      	lsls	r3, r3, #2
 80080d8:	4413      	add	r3, r2
 80080da:	2200      	movs	r2, #0
 80080dc:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80080de:	693b      	ldr	r3, [r7, #16]
 80080e0:	3301      	adds	r3, #1
 80080e2:	613b      	str	r3, [r7, #16]
 80080e4:	693b      	ldr	r3, [r7, #16]
 80080e6:	2b0e      	cmp	r3, #14
 80080e8:	d9f2      	bls.n	80080d0 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80080ea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80080ec:	2b00      	cmp	r3, #0
 80080ee:	d112      	bne.n	8008116 <USB_DevInit+0x66>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80080f4:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008100:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800810c:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	639a      	str	r2, [r3, #56]	; 0x38
 8008114:	e00b      	b.n	800812e <USB_DevInit+0x7e>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GOTGCTL &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	681b      	ldr	r3, [r3, #0]
 800811a:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	601a      	str	r2, [r3, #0]
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008126:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800812e:	68fb      	ldr	r3, [r7, #12]
 8008130:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008134:	461a      	mov	r2, r3
 8008136:	2300      	movs	r3, #0
 8008138:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800813a:	68fb      	ldr	r3, [r7, #12]
 800813c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008140:	4619      	mov	r1, r3
 8008142:	68fb      	ldr	r3, [r7, #12]
 8008144:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008148:	461a      	mov	r2, r3
 800814a:	680b      	ldr	r3, [r1, #0]
 800814c:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800814e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008150:	2b01      	cmp	r3, #1
 8008152:	d10c      	bne.n	800816e <USB_DevInit+0xbe>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8008154:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008156:	2b00      	cmp	r3, #0
 8008158:	d104      	bne.n	8008164 <USB_DevInit+0xb4>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800815a:	2100      	movs	r1, #0
 800815c:	6878      	ldr	r0, [r7, #4]
 800815e:	f000 f961 	bl	8008424 <USB_SetDevSpeed>
 8008162:	e008      	b.n	8008176 <USB_DevInit+0xc6>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8008164:	2101      	movs	r1, #1
 8008166:	6878      	ldr	r0, [r7, #4]
 8008168:	f000 f95c 	bl	8008424 <USB_SetDevSpeed>
 800816c:	e003      	b.n	8008176 <USB_DevInit+0xc6>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800816e:	2103      	movs	r1, #3
 8008170:	6878      	ldr	r0, [r7, #4]
 8008172:	f000 f957 	bl	8008424 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8008176:	2110      	movs	r1, #16
 8008178:	6878      	ldr	r0, [r7, #4]
 800817a:	f000 f90b 	bl	8008394 <USB_FlushTxFifo>
 800817e:	4603      	mov	r3, r0
 8008180:	2b00      	cmp	r3, #0
 8008182:	d001      	beq.n	8008188 <USB_DevInit+0xd8>
  {
    ret = HAL_ERROR;
 8008184:	2301      	movs	r3, #1
 8008186:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8008188:	6878      	ldr	r0, [r7, #4]
 800818a:	f000 f929 	bl	80083e0 <USB_FlushRxFifo>
 800818e:	4603      	mov	r3, r0
 8008190:	2b00      	cmp	r3, #0
 8008192:	d001      	beq.n	8008198 <USB_DevInit+0xe8>
  {
    ret = HAL_ERROR;
 8008194:	2301      	movs	r3, #1
 8008196:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8008198:	68fb      	ldr	r3, [r7, #12]
 800819a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800819e:	461a      	mov	r2, r3
 80081a0:	2300      	movs	r3, #0
 80081a2:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80081a4:	68fb      	ldr	r3, [r7, #12]
 80081a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80081aa:	461a      	mov	r2, r3
 80081ac:	2300      	movs	r3, #0
 80081ae:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80081b0:	68fb      	ldr	r3, [r7, #12]
 80081b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80081b6:	461a      	mov	r2, r3
 80081b8:	2300      	movs	r3, #0
 80081ba:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80081bc:	2300      	movs	r3, #0
 80081be:	613b      	str	r3, [r7, #16]
 80081c0:	e043      	b.n	800824a <USB_DevInit+0x19a>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80081c2:	693b      	ldr	r3, [r7, #16]
 80081c4:	015a      	lsls	r2, r3, #5
 80081c6:	68fb      	ldr	r3, [r7, #12]
 80081c8:	4413      	add	r3, r2
 80081ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80081ce:	681b      	ldr	r3, [r3, #0]
 80081d0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80081d4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80081d8:	d118      	bne.n	800820c <USB_DevInit+0x15c>
    {
      if (i == 0U)
 80081da:	693b      	ldr	r3, [r7, #16]
 80081dc:	2b00      	cmp	r3, #0
 80081de:	d10a      	bne.n	80081f6 <USB_DevInit+0x146>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80081e0:	693b      	ldr	r3, [r7, #16]
 80081e2:	015a      	lsls	r2, r3, #5
 80081e4:	68fb      	ldr	r3, [r7, #12]
 80081e6:	4413      	add	r3, r2
 80081e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80081ec:	461a      	mov	r2, r3
 80081ee:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80081f2:	6013      	str	r3, [r2, #0]
 80081f4:	e013      	b.n	800821e <USB_DevInit+0x16e>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80081f6:	693b      	ldr	r3, [r7, #16]
 80081f8:	015a      	lsls	r2, r3, #5
 80081fa:	68fb      	ldr	r3, [r7, #12]
 80081fc:	4413      	add	r3, r2
 80081fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008202:	461a      	mov	r2, r3
 8008204:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8008208:	6013      	str	r3, [r2, #0]
 800820a:	e008      	b.n	800821e <USB_DevInit+0x16e>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800820c:	693b      	ldr	r3, [r7, #16]
 800820e:	015a      	lsls	r2, r3, #5
 8008210:	68fb      	ldr	r3, [r7, #12]
 8008212:	4413      	add	r3, r2
 8008214:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008218:	461a      	mov	r2, r3
 800821a:	2300      	movs	r3, #0
 800821c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800821e:	693b      	ldr	r3, [r7, #16]
 8008220:	015a      	lsls	r2, r3, #5
 8008222:	68fb      	ldr	r3, [r7, #12]
 8008224:	4413      	add	r3, r2
 8008226:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800822a:	461a      	mov	r2, r3
 800822c:	2300      	movs	r3, #0
 800822e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8008230:	693b      	ldr	r3, [r7, #16]
 8008232:	015a      	lsls	r2, r3, #5
 8008234:	68fb      	ldr	r3, [r7, #12]
 8008236:	4413      	add	r3, r2
 8008238:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800823c:	461a      	mov	r2, r3
 800823e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8008242:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008244:	693b      	ldr	r3, [r7, #16]
 8008246:	3301      	adds	r3, #1
 8008248:	613b      	str	r3, [r7, #16]
 800824a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800824c:	693a      	ldr	r2, [r7, #16]
 800824e:	429a      	cmp	r2, r3
 8008250:	d3b7      	bcc.n	80081c2 <USB_DevInit+0x112>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008252:	2300      	movs	r3, #0
 8008254:	613b      	str	r3, [r7, #16]
 8008256:	e043      	b.n	80082e0 <USB_DevInit+0x230>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008258:	693b      	ldr	r3, [r7, #16]
 800825a:	015a      	lsls	r2, r3, #5
 800825c:	68fb      	ldr	r3, [r7, #12]
 800825e:	4413      	add	r3, r2
 8008260:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008264:	681b      	ldr	r3, [r3, #0]
 8008266:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800826a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800826e:	d118      	bne.n	80082a2 <USB_DevInit+0x1f2>
    {
      if (i == 0U)
 8008270:	693b      	ldr	r3, [r7, #16]
 8008272:	2b00      	cmp	r3, #0
 8008274:	d10a      	bne.n	800828c <USB_DevInit+0x1dc>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8008276:	693b      	ldr	r3, [r7, #16]
 8008278:	015a      	lsls	r2, r3, #5
 800827a:	68fb      	ldr	r3, [r7, #12]
 800827c:	4413      	add	r3, r2
 800827e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008282:	461a      	mov	r2, r3
 8008284:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8008288:	6013      	str	r3, [r2, #0]
 800828a:	e013      	b.n	80082b4 <USB_DevInit+0x204>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800828c:	693b      	ldr	r3, [r7, #16]
 800828e:	015a      	lsls	r2, r3, #5
 8008290:	68fb      	ldr	r3, [r7, #12]
 8008292:	4413      	add	r3, r2
 8008294:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008298:	461a      	mov	r2, r3
 800829a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800829e:	6013      	str	r3, [r2, #0]
 80082a0:	e008      	b.n	80082b4 <USB_DevInit+0x204>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80082a2:	693b      	ldr	r3, [r7, #16]
 80082a4:	015a      	lsls	r2, r3, #5
 80082a6:	68fb      	ldr	r3, [r7, #12]
 80082a8:	4413      	add	r3, r2
 80082aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80082ae:	461a      	mov	r2, r3
 80082b0:	2300      	movs	r3, #0
 80082b2:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80082b4:	693b      	ldr	r3, [r7, #16]
 80082b6:	015a      	lsls	r2, r3, #5
 80082b8:	68fb      	ldr	r3, [r7, #12]
 80082ba:	4413      	add	r3, r2
 80082bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80082c0:	461a      	mov	r2, r3
 80082c2:	2300      	movs	r3, #0
 80082c4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80082c6:	693b      	ldr	r3, [r7, #16]
 80082c8:	015a      	lsls	r2, r3, #5
 80082ca:	68fb      	ldr	r3, [r7, #12]
 80082cc:	4413      	add	r3, r2
 80082ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80082d2:	461a      	mov	r2, r3
 80082d4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80082d8:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80082da:	693b      	ldr	r3, [r7, #16]
 80082dc:	3301      	adds	r3, #1
 80082de:	613b      	str	r3, [r7, #16]
 80082e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082e2:	693a      	ldr	r2, [r7, #16]
 80082e4:	429a      	cmp	r2, r3
 80082e6:	d3b7      	bcc.n	8008258 <USB_DevInit+0x1a8>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80082e8:	68fb      	ldr	r3, [r7, #12]
 80082ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80082ee:	691b      	ldr	r3, [r3, #16]
 80082f0:	68fa      	ldr	r2, [r7, #12]
 80082f2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80082f6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80082fa:	6113      	str	r3, [r2, #16]

  if (cfg.dma_enable == 1U)
 80082fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082fe:	2b01      	cmp	r3, #1
 8008300:	d111      	bne.n	8008326 <USB_DevInit+0x276>
  {
    /*Set threshold parameters */
    USBx_DEVICE->DTHRCTL = USB_OTG_DTHRCTL_TXTHRLEN_6 |
 8008302:	68fb      	ldr	r3, [r7, #12]
 8008304:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008308:	461a      	mov	r2, r3
 800830a:	4b20      	ldr	r3, [pc, #128]	; (800838c <USB_DevInit+0x2dc>)
 800830c:	6313      	str	r3, [r2, #48]	; 0x30
                           USB_OTG_DTHRCTL_RXTHRLEN_6;

    USBx_DEVICE->DTHRCTL |= USB_OTG_DTHRCTL_RXTHREN |
 800830e:	68fb      	ldr	r3, [r7, #12]
 8008310:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008314:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008316:	68fa      	ldr	r2, [r7, #12]
 8008318:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800831c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008320:	f043 0303 	orr.w	r3, r3, #3
 8008324:	6313      	str	r3, [r2, #48]	; 0x30
                            USB_OTG_DTHRCTL_ISOTHREN |
                            USB_OTG_DTHRCTL_NONISOTHREN;
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	2200      	movs	r2, #0
 800832a:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8008332:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8008334:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008336:	2b00      	cmp	r3, #0
 8008338:	d105      	bne.n	8008346 <USB_DevInit+0x296>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	699b      	ldr	r3, [r3, #24]
 800833e:	f043 0210 	orr.w	r2, r3, #16
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	699a      	ldr	r2, [r3, #24]
 800834a:	4b11      	ldr	r3, [pc, #68]	; (8008390 <USB_DevInit+0x2e0>)
 800834c:	4313      	orrs	r3, r2
 800834e:	687a      	ldr	r2, [r7, #4]
 8008350:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8008352:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008354:	2b00      	cmp	r3, #0
 8008356:	d005      	beq.n	8008364 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	699b      	ldr	r3, [r3, #24]
 800835c:	f043 0208 	orr.w	r2, r3, #8
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8008364:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008366:	2b01      	cmp	r3, #1
 8008368:	d107      	bne.n	800837a <USB_DevInit+0x2ca>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	699b      	ldr	r3, [r3, #24]
 800836e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008372:	f043 0304 	orr.w	r3, r3, #4
 8008376:	687a      	ldr	r2, [r7, #4]
 8008378:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800837a:	7dfb      	ldrb	r3, [r7, #23]
}
 800837c:	4618      	mov	r0, r3
 800837e:	3718      	adds	r7, #24
 8008380:	46bd      	mov	sp, r7
 8008382:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008386:	b004      	add	sp, #16
 8008388:	4770      	bx	lr
 800838a:	bf00      	nop
 800838c:	00800100 	.word	0x00800100
 8008390:	803c3800 	.word	0x803c3800

08008394 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8008394:	b480      	push	{r7}
 8008396:	b085      	sub	sp, #20
 8008398:	af00      	add	r7, sp, #0
 800839a:	6078      	str	r0, [r7, #4]
 800839c:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800839e:	2300      	movs	r3, #0
 80083a0:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80083a2:	683b      	ldr	r3, [r7, #0]
 80083a4:	019b      	lsls	r3, r3, #6
 80083a6:	f043 0220 	orr.w	r2, r3, #32
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80083ae:	68fb      	ldr	r3, [r7, #12]
 80083b0:	3301      	adds	r3, #1
 80083b2:	60fb      	str	r3, [r7, #12]
 80083b4:	68fb      	ldr	r3, [r7, #12]
 80083b6:	4a09      	ldr	r2, [pc, #36]	; (80083dc <USB_FlushTxFifo+0x48>)
 80083b8:	4293      	cmp	r3, r2
 80083ba:	d901      	bls.n	80083c0 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 80083bc:	2303      	movs	r3, #3
 80083be:	e006      	b.n	80083ce <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	691b      	ldr	r3, [r3, #16]
 80083c4:	f003 0320 	and.w	r3, r3, #32
 80083c8:	2b20      	cmp	r3, #32
 80083ca:	d0f0      	beq.n	80083ae <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 80083cc:	2300      	movs	r3, #0
}
 80083ce:	4618      	mov	r0, r3
 80083d0:	3714      	adds	r7, #20
 80083d2:	46bd      	mov	sp, r7
 80083d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083d8:	4770      	bx	lr
 80083da:	bf00      	nop
 80083dc:	00030d40 	.word	0x00030d40

080083e0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80083e0:	b480      	push	{r7}
 80083e2:	b085      	sub	sp, #20
 80083e4:	af00      	add	r7, sp, #0
 80083e6:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 80083e8:	2300      	movs	r3, #0
 80083ea:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	2210      	movs	r2, #16
 80083f0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80083f2:	68fb      	ldr	r3, [r7, #12]
 80083f4:	3301      	adds	r3, #1
 80083f6:	60fb      	str	r3, [r7, #12]
 80083f8:	68fb      	ldr	r3, [r7, #12]
 80083fa:	4a09      	ldr	r2, [pc, #36]	; (8008420 <USB_FlushRxFifo+0x40>)
 80083fc:	4293      	cmp	r3, r2
 80083fe:	d901      	bls.n	8008404 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8008400:	2303      	movs	r3, #3
 8008402:	e006      	b.n	8008412 <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	691b      	ldr	r3, [r3, #16]
 8008408:	f003 0310 	and.w	r3, r3, #16
 800840c:	2b10      	cmp	r3, #16
 800840e:	d0f0      	beq.n	80083f2 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8008410:	2300      	movs	r3, #0
}
 8008412:	4618      	mov	r0, r3
 8008414:	3714      	adds	r7, #20
 8008416:	46bd      	mov	sp, r7
 8008418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800841c:	4770      	bx	lr
 800841e:	bf00      	nop
 8008420:	00030d40 	.word	0x00030d40

08008424 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8008424:	b480      	push	{r7}
 8008426:	b085      	sub	sp, #20
 8008428:	af00      	add	r7, sp, #0
 800842a:	6078      	str	r0, [r7, #4]
 800842c:	460b      	mov	r3, r1
 800842e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8008434:	68fb      	ldr	r3, [r7, #12]
 8008436:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800843a:	681a      	ldr	r2, [r3, #0]
 800843c:	78fb      	ldrb	r3, [r7, #3]
 800843e:	68f9      	ldr	r1, [r7, #12]
 8008440:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008444:	4313      	orrs	r3, r2
 8008446:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8008448:	2300      	movs	r3, #0
}
 800844a:	4618      	mov	r0, r3
 800844c:	3714      	adds	r7, #20
 800844e:	46bd      	mov	sp, r7
 8008450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008454:	4770      	bx	lr

08008456 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg PCD_SPEED_HIGH: High speed mode
  *            @arg PCD_SPEED_FULL: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8008456:	b480      	push	{r7}
 8008458:	b087      	sub	sp, #28
 800845a:	af00      	add	r7, sp, #0
 800845c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8008462:	693b      	ldr	r3, [r7, #16]
 8008464:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008468:	689b      	ldr	r3, [r3, #8]
 800846a:	f003 0306 	and.w	r3, r3, #6
 800846e:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8008470:	68fb      	ldr	r3, [r7, #12]
 8008472:	2b00      	cmp	r3, #0
 8008474:	d102      	bne.n	800847c <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8008476:	2300      	movs	r3, #0
 8008478:	75fb      	strb	r3, [r7, #23]
 800847a:	e00a      	b.n	8008492 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800847c:	68fb      	ldr	r3, [r7, #12]
 800847e:	2b02      	cmp	r3, #2
 8008480:	d002      	beq.n	8008488 <USB_GetDevSpeed+0x32>
 8008482:	68fb      	ldr	r3, [r7, #12]
 8008484:	2b06      	cmp	r3, #6
 8008486:	d102      	bne.n	800848e <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8008488:	2302      	movs	r3, #2
 800848a:	75fb      	strb	r3, [r7, #23]
 800848c:	e001      	b.n	8008492 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800848e:	230f      	movs	r3, #15
 8008490:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8008492:	7dfb      	ldrb	r3, [r7, #23]
}
 8008494:	4618      	mov	r0, r3
 8008496:	371c      	adds	r7, #28
 8008498:	46bd      	mov	sp, r7
 800849a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800849e:	4770      	bx	lr

080084a0 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80084a0:	b480      	push	{r7}
 80084a2:	b085      	sub	sp, #20
 80084a4:	af00      	add	r7, sp, #0
 80084a6:	6078      	str	r0, [r7, #4]
 80084a8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80084ae:	683b      	ldr	r3, [r7, #0]
 80084b0:	781b      	ldrb	r3, [r3, #0]
 80084b2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80084b4:	683b      	ldr	r3, [r7, #0]
 80084b6:	785b      	ldrb	r3, [r3, #1]
 80084b8:	2b01      	cmp	r3, #1
 80084ba:	d13a      	bne.n	8008532 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80084bc:	68fb      	ldr	r3, [r7, #12]
 80084be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80084c2:	69da      	ldr	r2, [r3, #28]
 80084c4:	683b      	ldr	r3, [r7, #0]
 80084c6:	781b      	ldrb	r3, [r3, #0]
 80084c8:	f003 030f 	and.w	r3, r3, #15
 80084cc:	2101      	movs	r1, #1
 80084ce:	fa01 f303 	lsl.w	r3, r1, r3
 80084d2:	b29b      	uxth	r3, r3
 80084d4:	68f9      	ldr	r1, [r7, #12]
 80084d6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80084da:	4313      	orrs	r3, r2
 80084dc:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80084de:	68bb      	ldr	r3, [r7, #8]
 80084e0:	015a      	lsls	r2, r3, #5
 80084e2:	68fb      	ldr	r3, [r7, #12]
 80084e4:	4413      	add	r3, r2
 80084e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80084ea:	681b      	ldr	r3, [r3, #0]
 80084ec:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80084f0:	2b00      	cmp	r3, #0
 80084f2:	d155      	bne.n	80085a0 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80084f4:	68bb      	ldr	r3, [r7, #8]
 80084f6:	015a      	lsls	r2, r3, #5
 80084f8:	68fb      	ldr	r3, [r7, #12]
 80084fa:	4413      	add	r3, r2
 80084fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008500:	681a      	ldr	r2, [r3, #0]
 8008502:	683b      	ldr	r3, [r7, #0]
 8008504:	689b      	ldr	r3, [r3, #8]
 8008506:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800850a:	683b      	ldr	r3, [r7, #0]
 800850c:	78db      	ldrb	r3, [r3, #3]
 800850e:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8008510:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8008512:	68bb      	ldr	r3, [r7, #8]
 8008514:	059b      	lsls	r3, r3, #22
 8008516:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8008518:	4313      	orrs	r3, r2
 800851a:	68ba      	ldr	r2, [r7, #8]
 800851c:	0151      	lsls	r1, r2, #5
 800851e:	68fa      	ldr	r2, [r7, #12]
 8008520:	440a      	add	r2, r1
 8008522:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008526:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800852a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800852e:	6013      	str	r3, [r2, #0]
 8008530:	e036      	b.n	80085a0 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8008532:	68fb      	ldr	r3, [r7, #12]
 8008534:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008538:	69da      	ldr	r2, [r3, #28]
 800853a:	683b      	ldr	r3, [r7, #0]
 800853c:	781b      	ldrb	r3, [r3, #0]
 800853e:	f003 030f 	and.w	r3, r3, #15
 8008542:	2101      	movs	r1, #1
 8008544:	fa01 f303 	lsl.w	r3, r1, r3
 8008548:	041b      	lsls	r3, r3, #16
 800854a:	68f9      	ldr	r1, [r7, #12]
 800854c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008550:	4313      	orrs	r3, r2
 8008552:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8008554:	68bb      	ldr	r3, [r7, #8]
 8008556:	015a      	lsls	r2, r3, #5
 8008558:	68fb      	ldr	r3, [r7, #12]
 800855a:	4413      	add	r3, r2
 800855c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008560:	681b      	ldr	r3, [r3, #0]
 8008562:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008566:	2b00      	cmp	r3, #0
 8008568:	d11a      	bne.n	80085a0 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800856a:	68bb      	ldr	r3, [r7, #8]
 800856c:	015a      	lsls	r2, r3, #5
 800856e:	68fb      	ldr	r3, [r7, #12]
 8008570:	4413      	add	r3, r2
 8008572:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008576:	681a      	ldr	r2, [r3, #0]
 8008578:	683b      	ldr	r3, [r7, #0]
 800857a:	689b      	ldr	r3, [r3, #8]
 800857c:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8008580:	683b      	ldr	r3, [r7, #0]
 8008582:	78db      	ldrb	r3, [r3, #3]
 8008584:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8008586:	430b      	orrs	r3, r1
 8008588:	4313      	orrs	r3, r2
 800858a:	68ba      	ldr	r2, [r7, #8]
 800858c:	0151      	lsls	r1, r2, #5
 800858e:	68fa      	ldr	r2, [r7, #12]
 8008590:	440a      	add	r2, r1
 8008592:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008596:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800859a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800859e:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80085a0:	2300      	movs	r3, #0
}
 80085a2:	4618      	mov	r0, r3
 80085a4:	3714      	adds	r7, #20
 80085a6:	46bd      	mov	sp, r7
 80085a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085ac:	4770      	bx	lr
	...

080085b0 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80085b0:	b480      	push	{r7}
 80085b2:	b085      	sub	sp, #20
 80085b4:	af00      	add	r7, sp, #0
 80085b6:	6078      	str	r0, [r7, #4]
 80085b8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80085be:	683b      	ldr	r3, [r7, #0]
 80085c0:	781b      	ldrb	r3, [r3, #0]
 80085c2:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80085c4:	683b      	ldr	r3, [r7, #0]
 80085c6:	785b      	ldrb	r3, [r3, #1]
 80085c8:	2b01      	cmp	r3, #1
 80085ca:	d135      	bne.n	8008638 <USB_DeactivateEndpoint+0x88>
  {
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80085cc:	68fb      	ldr	r3, [r7, #12]
 80085ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80085d2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80085d4:	683b      	ldr	r3, [r7, #0]
 80085d6:	781b      	ldrb	r3, [r3, #0]
 80085d8:	f003 030f 	and.w	r3, r3, #15
 80085dc:	2101      	movs	r1, #1
 80085de:	fa01 f303 	lsl.w	r3, r1, r3
 80085e2:	b29b      	uxth	r3, r3
 80085e4:	43db      	mvns	r3, r3
 80085e6:	68f9      	ldr	r1, [r7, #12]
 80085e8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80085ec:	4013      	ands	r3, r2
 80085ee:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80085f0:	68fb      	ldr	r3, [r7, #12]
 80085f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80085f6:	69da      	ldr	r2, [r3, #28]
 80085f8:	683b      	ldr	r3, [r7, #0]
 80085fa:	781b      	ldrb	r3, [r3, #0]
 80085fc:	f003 030f 	and.w	r3, r3, #15
 8008600:	2101      	movs	r1, #1
 8008602:	fa01 f303 	lsl.w	r3, r1, r3
 8008606:	b29b      	uxth	r3, r3
 8008608:	43db      	mvns	r3, r3
 800860a:	68f9      	ldr	r1, [r7, #12]
 800860c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008610:	4013      	ands	r3, r2
 8008612:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8008614:	68bb      	ldr	r3, [r7, #8]
 8008616:	015a      	lsls	r2, r3, #5
 8008618:	68fb      	ldr	r3, [r7, #12]
 800861a:	4413      	add	r3, r2
 800861c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008620:	681a      	ldr	r2, [r3, #0]
 8008622:	68bb      	ldr	r3, [r7, #8]
 8008624:	0159      	lsls	r1, r3, #5
 8008626:	68fb      	ldr	r3, [r7, #12]
 8008628:	440b      	add	r3, r1
 800862a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800862e:	4619      	mov	r1, r3
 8008630:	4b1f      	ldr	r3, [pc, #124]	; (80086b0 <USB_DeactivateEndpoint+0x100>)
 8008632:	4013      	ands	r3, r2
 8008634:	600b      	str	r3, [r1, #0]
 8008636:	e034      	b.n	80086a2 <USB_DeactivateEndpoint+0xf2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8008638:	68fb      	ldr	r3, [r7, #12]
 800863a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800863e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008640:	683b      	ldr	r3, [r7, #0]
 8008642:	781b      	ldrb	r3, [r3, #0]
 8008644:	f003 030f 	and.w	r3, r3, #15
 8008648:	2101      	movs	r1, #1
 800864a:	fa01 f303 	lsl.w	r3, r1, r3
 800864e:	041b      	lsls	r3, r3, #16
 8008650:	43db      	mvns	r3, r3
 8008652:	68f9      	ldr	r1, [r7, #12]
 8008654:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008658:	4013      	ands	r3, r2
 800865a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800865c:	68fb      	ldr	r3, [r7, #12]
 800865e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008662:	69da      	ldr	r2, [r3, #28]
 8008664:	683b      	ldr	r3, [r7, #0]
 8008666:	781b      	ldrb	r3, [r3, #0]
 8008668:	f003 030f 	and.w	r3, r3, #15
 800866c:	2101      	movs	r1, #1
 800866e:	fa01 f303 	lsl.w	r3, r1, r3
 8008672:	041b      	lsls	r3, r3, #16
 8008674:	43db      	mvns	r3, r3
 8008676:	68f9      	ldr	r1, [r7, #12]
 8008678:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800867c:	4013      	ands	r3, r2
 800867e:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8008680:	68bb      	ldr	r3, [r7, #8]
 8008682:	015a      	lsls	r2, r3, #5
 8008684:	68fb      	ldr	r3, [r7, #12]
 8008686:	4413      	add	r3, r2
 8008688:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800868c:	681a      	ldr	r2, [r3, #0]
 800868e:	68bb      	ldr	r3, [r7, #8]
 8008690:	0159      	lsls	r1, r3, #5
 8008692:	68fb      	ldr	r3, [r7, #12]
 8008694:	440b      	add	r3, r1
 8008696:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800869a:	4619      	mov	r1, r3
 800869c:	4b05      	ldr	r3, [pc, #20]	; (80086b4 <USB_DeactivateEndpoint+0x104>)
 800869e:	4013      	ands	r3, r2
 80086a0:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80086a2:	2300      	movs	r3, #0
}
 80086a4:	4618      	mov	r0, r3
 80086a6:	3714      	adds	r7, #20
 80086a8:	46bd      	mov	sp, r7
 80086aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086ae:	4770      	bx	lr
 80086b0:	ec337800 	.word	0xec337800
 80086b4:	eff37800 	.word	0xeff37800

080086b8 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80086b8:	b580      	push	{r7, lr}
 80086ba:	b08a      	sub	sp, #40	; 0x28
 80086bc:	af02      	add	r7, sp, #8
 80086be:	60f8      	str	r0, [r7, #12]
 80086c0:	60b9      	str	r1, [r7, #8]
 80086c2:	4613      	mov	r3, r2
 80086c4:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80086c6:	68fb      	ldr	r3, [r7, #12]
 80086c8:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80086ca:	68bb      	ldr	r3, [r7, #8]
 80086cc:	781b      	ldrb	r3, [r3, #0]
 80086ce:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80086d0:	68bb      	ldr	r3, [r7, #8]
 80086d2:	785b      	ldrb	r3, [r3, #1]
 80086d4:	2b01      	cmp	r3, #1
 80086d6:	f040 815c 	bne.w	8008992 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80086da:	68bb      	ldr	r3, [r7, #8]
 80086dc:	695b      	ldr	r3, [r3, #20]
 80086de:	2b00      	cmp	r3, #0
 80086e0:	d132      	bne.n	8008748 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80086e2:	69bb      	ldr	r3, [r7, #24]
 80086e4:	015a      	lsls	r2, r3, #5
 80086e6:	69fb      	ldr	r3, [r7, #28]
 80086e8:	4413      	add	r3, r2
 80086ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80086ee:	691b      	ldr	r3, [r3, #16]
 80086f0:	69ba      	ldr	r2, [r7, #24]
 80086f2:	0151      	lsls	r1, r2, #5
 80086f4:	69fa      	ldr	r2, [r7, #28]
 80086f6:	440a      	add	r2, r1
 80086f8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80086fc:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8008700:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8008704:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8008706:	69bb      	ldr	r3, [r7, #24]
 8008708:	015a      	lsls	r2, r3, #5
 800870a:	69fb      	ldr	r3, [r7, #28]
 800870c:	4413      	add	r3, r2
 800870e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008712:	691b      	ldr	r3, [r3, #16]
 8008714:	69ba      	ldr	r2, [r7, #24]
 8008716:	0151      	lsls	r1, r2, #5
 8008718:	69fa      	ldr	r2, [r7, #28]
 800871a:	440a      	add	r2, r1
 800871c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008720:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008724:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8008726:	69bb      	ldr	r3, [r7, #24]
 8008728:	015a      	lsls	r2, r3, #5
 800872a:	69fb      	ldr	r3, [r7, #28]
 800872c:	4413      	add	r3, r2
 800872e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008732:	691b      	ldr	r3, [r3, #16]
 8008734:	69ba      	ldr	r2, [r7, #24]
 8008736:	0151      	lsls	r1, r2, #5
 8008738:	69fa      	ldr	r2, [r7, #28]
 800873a:	440a      	add	r2, r1
 800873c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008740:	0cdb      	lsrs	r3, r3, #19
 8008742:	04db      	lsls	r3, r3, #19
 8008744:	6113      	str	r3, [r2, #16]
 8008746:	e074      	b.n	8008832 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8008748:	69bb      	ldr	r3, [r7, #24]
 800874a:	015a      	lsls	r2, r3, #5
 800874c:	69fb      	ldr	r3, [r7, #28]
 800874e:	4413      	add	r3, r2
 8008750:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008754:	691b      	ldr	r3, [r3, #16]
 8008756:	69ba      	ldr	r2, [r7, #24]
 8008758:	0151      	lsls	r1, r2, #5
 800875a:	69fa      	ldr	r2, [r7, #28]
 800875c:	440a      	add	r2, r1
 800875e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008762:	0cdb      	lsrs	r3, r3, #19
 8008764:	04db      	lsls	r3, r3, #19
 8008766:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8008768:	69bb      	ldr	r3, [r7, #24]
 800876a:	015a      	lsls	r2, r3, #5
 800876c:	69fb      	ldr	r3, [r7, #28]
 800876e:	4413      	add	r3, r2
 8008770:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008774:	691b      	ldr	r3, [r3, #16]
 8008776:	69ba      	ldr	r2, [r7, #24]
 8008778:	0151      	lsls	r1, r2, #5
 800877a:	69fa      	ldr	r2, [r7, #28]
 800877c:	440a      	add	r2, r1
 800877e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008782:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8008786:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800878a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800878c:	69bb      	ldr	r3, [r7, #24]
 800878e:	015a      	lsls	r2, r3, #5
 8008790:	69fb      	ldr	r3, [r7, #28]
 8008792:	4413      	add	r3, r2
 8008794:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008798:	691a      	ldr	r2, [r3, #16]
 800879a:	68bb      	ldr	r3, [r7, #8]
 800879c:	6959      	ldr	r1, [r3, #20]
 800879e:	68bb      	ldr	r3, [r7, #8]
 80087a0:	689b      	ldr	r3, [r3, #8]
 80087a2:	440b      	add	r3, r1
 80087a4:	1e59      	subs	r1, r3, #1
 80087a6:	68bb      	ldr	r3, [r7, #8]
 80087a8:	689b      	ldr	r3, [r3, #8]
 80087aa:	fbb1 f3f3 	udiv	r3, r1, r3
 80087ae:	04d9      	lsls	r1, r3, #19
 80087b0:	4b9d      	ldr	r3, [pc, #628]	; (8008a28 <USB_EPStartXfer+0x370>)
 80087b2:	400b      	ands	r3, r1
 80087b4:	69b9      	ldr	r1, [r7, #24]
 80087b6:	0148      	lsls	r0, r1, #5
 80087b8:	69f9      	ldr	r1, [r7, #28]
 80087ba:	4401      	add	r1, r0
 80087bc:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80087c0:	4313      	orrs	r3, r2
 80087c2:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80087c4:	69bb      	ldr	r3, [r7, #24]
 80087c6:	015a      	lsls	r2, r3, #5
 80087c8:	69fb      	ldr	r3, [r7, #28]
 80087ca:	4413      	add	r3, r2
 80087cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80087d0:	691a      	ldr	r2, [r3, #16]
 80087d2:	68bb      	ldr	r3, [r7, #8]
 80087d4:	695b      	ldr	r3, [r3, #20]
 80087d6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80087da:	69b9      	ldr	r1, [r7, #24]
 80087dc:	0148      	lsls	r0, r1, #5
 80087de:	69f9      	ldr	r1, [r7, #28]
 80087e0:	4401      	add	r1, r0
 80087e2:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80087e6:	4313      	orrs	r3, r2
 80087e8:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 80087ea:	68bb      	ldr	r3, [r7, #8]
 80087ec:	78db      	ldrb	r3, [r3, #3]
 80087ee:	2b01      	cmp	r3, #1
 80087f0:	d11f      	bne.n	8008832 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80087f2:	69bb      	ldr	r3, [r7, #24]
 80087f4:	015a      	lsls	r2, r3, #5
 80087f6:	69fb      	ldr	r3, [r7, #28]
 80087f8:	4413      	add	r3, r2
 80087fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80087fe:	691b      	ldr	r3, [r3, #16]
 8008800:	69ba      	ldr	r2, [r7, #24]
 8008802:	0151      	lsls	r1, r2, #5
 8008804:	69fa      	ldr	r2, [r7, #28]
 8008806:	440a      	add	r2, r1
 8008808:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800880c:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8008810:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8008812:	69bb      	ldr	r3, [r7, #24]
 8008814:	015a      	lsls	r2, r3, #5
 8008816:	69fb      	ldr	r3, [r7, #28]
 8008818:	4413      	add	r3, r2
 800881a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800881e:	691b      	ldr	r3, [r3, #16]
 8008820:	69ba      	ldr	r2, [r7, #24]
 8008822:	0151      	lsls	r1, r2, #5
 8008824:	69fa      	ldr	r2, [r7, #28]
 8008826:	440a      	add	r2, r1
 8008828:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800882c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8008830:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8008832:	79fb      	ldrb	r3, [r7, #7]
 8008834:	2b01      	cmp	r3, #1
 8008836:	d14b      	bne.n	80088d0 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8008838:	68bb      	ldr	r3, [r7, #8]
 800883a:	691b      	ldr	r3, [r3, #16]
 800883c:	2b00      	cmp	r3, #0
 800883e:	d009      	beq.n	8008854 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8008840:	69bb      	ldr	r3, [r7, #24]
 8008842:	015a      	lsls	r2, r3, #5
 8008844:	69fb      	ldr	r3, [r7, #28]
 8008846:	4413      	add	r3, r2
 8008848:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800884c:	461a      	mov	r2, r3
 800884e:	68bb      	ldr	r3, [r7, #8]
 8008850:	691b      	ldr	r3, [r3, #16]
 8008852:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8008854:	68bb      	ldr	r3, [r7, #8]
 8008856:	78db      	ldrb	r3, [r3, #3]
 8008858:	2b01      	cmp	r3, #1
 800885a:	d128      	bne.n	80088ae <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800885c:	69fb      	ldr	r3, [r7, #28]
 800885e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008862:	689b      	ldr	r3, [r3, #8]
 8008864:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008868:	2b00      	cmp	r3, #0
 800886a:	d110      	bne.n	800888e <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800886c:	69bb      	ldr	r3, [r7, #24]
 800886e:	015a      	lsls	r2, r3, #5
 8008870:	69fb      	ldr	r3, [r7, #28]
 8008872:	4413      	add	r3, r2
 8008874:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008878:	681b      	ldr	r3, [r3, #0]
 800887a:	69ba      	ldr	r2, [r7, #24]
 800887c:	0151      	lsls	r1, r2, #5
 800887e:	69fa      	ldr	r2, [r7, #28]
 8008880:	440a      	add	r2, r1
 8008882:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008886:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800888a:	6013      	str	r3, [r2, #0]
 800888c:	e00f      	b.n	80088ae <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800888e:	69bb      	ldr	r3, [r7, #24]
 8008890:	015a      	lsls	r2, r3, #5
 8008892:	69fb      	ldr	r3, [r7, #28]
 8008894:	4413      	add	r3, r2
 8008896:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800889a:	681b      	ldr	r3, [r3, #0]
 800889c:	69ba      	ldr	r2, [r7, #24]
 800889e:	0151      	lsls	r1, r2, #5
 80088a0:	69fa      	ldr	r2, [r7, #28]
 80088a2:	440a      	add	r2, r1
 80088a4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80088a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80088ac:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80088ae:	69bb      	ldr	r3, [r7, #24]
 80088b0:	015a      	lsls	r2, r3, #5
 80088b2:	69fb      	ldr	r3, [r7, #28]
 80088b4:	4413      	add	r3, r2
 80088b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80088ba:	681b      	ldr	r3, [r3, #0]
 80088bc:	69ba      	ldr	r2, [r7, #24]
 80088be:	0151      	lsls	r1, r2, #5
 80088c0:	69fa      	ldr	r2, [r7, #28]
 80088c2:	440a      	add	r2, r1
 80088c4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80088c8:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80088cc:	6013      	str	r3, [r2, #0]
 80088ce:	e12f      	b.n	8008b30 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80088d0:	69bb      	ldr	r3, [r7, #24]
 80088d2:	015a      	lsls	r2, r3, #5
 80088d4:	69fb      	ldr	r3, [r7, #28]
 80088d6:	4413      	add	r3, r2
 80088d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80088dc:	681b      	ldr	r3, [r3, #0]
 80088de:	69ba      	ldr	r2, [r7, #24]
 80088e0:	0151      	lsls	r1, r2, #5
 80088e2:	69fa      	ldr	r2, [r7, #28]
 80088e4:	440a      	add	r2, r1
 80088e6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80088ea:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80088ee:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80088f0:	68bb      	ldr	r3, [r7, #8]
 80088f2:	78db      	ldrb	r3, [r3, #3]
 80088f4:	2b01      	cmp	r3, #1
 80088f6:	d015      	beq.n	8008924 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 80088f8:	68bb      	ldr	r3, [r7, #8]
 80088fa:	695b      	ldr	r3, [r3, #20]
 80088fc:	2b00      	cmp	r3, #0
 80088fe:	f000 8117 	beq.w	8008b30 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8008902:	69fb      	ldr	r3, [r7, #28]
 8008904:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008908:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800890a:	68bb      	ldr	r3, [r7, #8]
 800890c:	781b      	ldrb	r3, [r3, #0]
 800890e:	f003 030f 	and.w	r3, r3, #15
 8008912:	2101      	movs	r1, #1
 8008914:	fa01 f303 	lsl.w	r3, r1, r3
 8008918:	69f9      	ldr	r1, [r7, #28]
 800891a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800891e:	4313      	orrs	r3, r2
 8008920:	634b      	str	r3, [r1, #52]	; 0x34
 8008922:	e105      	b.n	8008b30 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8008924:	69fb      	ldr	r3, [r7, #28]
 8008926:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800892a:	689b      	ldr	r3, [r3, #8]
 800892c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008930:	2b00      	cmp	r3, #0
 8008932:	d110      	bne.n	8008956 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8008934:	69bb      	ldr	r3, [r7, #24]
 8008936:	015a      	lsls	r2, r3, #5
 8008938:	69fb      	ldr	r3, [r7, #28]
 800893a:	4413      	add	r3, r2
 800893c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008940:	681b      	ldr	r3, [r3, #0]
 8008942:	69ba      	ldr	r2, [r7, #24]
 8008944:	0151      	lsls	r1, r2, #5
 8008946:	69fa      	ldr	r2, [r7, #28]
 8008948:	440a      	add	r2, r1
 800894a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800894e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8008952:	6013      	str	r3, [r2, #0]
 8008954:	e00f      	b.n	8008976 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8008956:	69bb      	ldr	r3, [r7, #24]
 8008958:	015a      	lsls	r2, r3, #5
 800895a:	69fb      	ldr	r3, [r7, #28]
 800895c:	4413      	add	r3, r2
 800895e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008962:	681b      	ldr	r3, [r3, #0]
 8008964:	69ba      	ldr	r2, [r7, #24]
 8008966:	0151      	lsls	r1, r2, #5
 8008968:	69fa      	ldr	r2, [r7, #28]
 800896a:	440a      	add	r2, r1
 800896c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008970:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008974:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8008976:	68bb      	ldr	r3, [r7, #8]
 8008978:	68d9      	ldr	r1, [r3, #12]
 800897a:	68bb      	ldr	r3, [r7, #8]
 800897c:	781a      	ldrb	r2, [r3, #0]
 800897e:	68bb      	ldr	r3, [r7, #8]
 8008980:	695b      	ldr	r3, [r3, #20]
 8008982:	b298      	uxth	r0, r3
 8008984:	79fb      	ldrb	r3, [r7, #7]
 8008986:	9300      	str	r3, [sp, #0]
 8008988:	4603      	mov	r3, r0
 800898a:	68f8      	ldr	r0, [r7, #12]
 800898c:	f000 fa2b 	bl	8008de6 <USB_WritePacket>
 8008990:	e0ce      	b.n	8008b30 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8008992:	69bb      	ldr	r3, [r7, #24]
 8008994:	015a      	lsls	r2, r3, #5
 8008996:	69fb      	ldr	r3, [r7, #28]
 8008998:	4413      	add	r3, r2
 800899a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800899e:	691b      	ldr	r3, [r3, #16]
 80089a0:	69ba      	ldr	r2, [r7, #24]
 80089a2:	0151      	lsls	r1, r2, #5
 80089a4:	69fa      	ldr	r2, [r7, #28]
 80089a6:	440a      	add	r2, r1
 80089a8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80089ac:	0cdb      	lsrs	r3, r3, #19
 80089ae:	04db      	lsls	r3, r3, #19
 80089b0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80089b2:	69bb      	ldr	r3, [r7, #24]
 80089b4:	015a      	lsls	r2, r3, #5
 80089b6:	69fb      	ldr	r3, [r7, #28]
 80089b8:	4413      	add	r3, r2
 80089ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80089be:	691b      	ldr	r3, [r3, #16]
 80089c0:	69ba      	ldr	r2, [r7, #24]
 80089c2:	0151      	lsls	r1, r2, #5
 80089c4:	69fa      	ldr	r2, [r7, #28]
 80089c6:	440a      	add	r2, r1
 80089c8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80089cc:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80089d0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80089d4:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 80089d6:	68bb      	ldr	r3, [r7, #8]
 80089d8:	695b      	ldr	r3, [r3, #20]
 80089da:	2b00      	cmp	r3, #0
 80089dc:	d126      	bne.n	8008a2c <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80089de:	69bb      	ldr	r3, [r7, #24]
 80089e0:	015a      	lsls	r2, r3, #5
 80089e2:	69fb      	ldr	r3, [r7, #28]
 80089e4:	4413      	add	r3, r2
 80089e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80089ea:	691a      	ldr	r2, [r3, #16]
 80089ec:	68bb      	ldr	r3, [r7, #8]
 80089ee:	689b      	ldr	r3, [r3, #8]
 80089f0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80089f4:	69b9      	ldr	r1, [r7, #24]
 80089f6:	0148      	lsls	r0, r1, #5
 80089f8:	69f9      	ldr	r1, [r7, #28]
 80089fa:	4401      	add	r1, r0
 80089fc:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8008a00:	4313      	orrs	r3, r2
 8008a02:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8008a04:	69bb      	ldr	r3, [r7, #24]
 8008a06:	015a      	lsls	r2, r3, #5
 8008a08:	69fb      	ldr	r3, [r7, #28]
 8008a0a:	4413      	add	r3, r2
 8008a0c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008a10:	691b      	ldr	r3, [r3, #16]
 8008a12:	69ba      	ldr	r2, [r7, #24]
 8008a14:	0151      	lsls	r1, r2, #5
 8008a16:	69fa      	ldr	r2, [r7, #28]
 8008a18:	440a      	add	r2, r1
 8008a1a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008a1e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008a22:	6113      	str	r3, [r2, #16]
 8008a24:	e036      	b.n	8008a94 <USB_EPStartXfer+0x3dc>
 8008a26:	bf00      	nop
 8008a28:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8008a2c:	68bb      	ldr	r3, [r7, #8]
 8008a2e:	695a      	ldr	r2, [r3, #20]
 8008a30:	68bb      	ldr	r3, [r7, #8]
 8008a32:	689b      	ldr	r3, [r3, #8]
 8008a34:	4413      	add	r3, r2
 8008a36:	1e5a      	subs	r2, r3, #1
 8008a38:	68bb      	ldr	r3, [r7, #8]
 8008a3a:	689b      	ldr	r3, [r3, #8]
 8008a3c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008a40:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8008a42:	69bb      	ldr	r3, [r7, #24]
 8008a44:	015a      	lsls	r2, r3, #5
 8008a46:	69fb      	ldr	r3, [r7, #28]
 8008a48:	4413      	add	r3, r2
 8008a4a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008a4e:	691a      	ldr	r2, [r3, #16]
 8008a50:	8afb      	ldrh	r3, [r7, #22]
 8008a52:	04d9      	lsls	r1, r3, #19
 8008a54:	4b39      	ldr	r3, [pc, #228]	; (8008b3c <USB_EPStartXfer+0x484>)
 8008a56:	400b      	ands	r3, r1
 8008a58:	69b9      	ldr	r1, [r7, #24]
 8008a5a:	0148      	lsls	r0, r1, #5
 8008a5c:	69f9      	ldr	r1, [r7, #28]
 8008a5e:	4401      	add	r1, r0
 8008a60:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8008a64:	4313      	orrs	r3, r2
 8008a66:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8008a68:	69bb      	ldr	r3, [r7, #24]
 8008a6a:	015a      	lsls	r2, r3, #5
 8008a6c:	69fb      	ldr	r3, [r7, #28]
 8008a6e:	4413      	add	r3, r2
 8008a70:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008a74:	691a      	ldr	r2, [r3, #16]
 8008a76:	68bb      	ldr	r3, [r7, #8]
 8008a78:	689b      	ldr	r3, [r3, #8]
 8008a7a:	8af9      	ldrh	r1, [r7, #22]
 8008a7c:	fb01 f303 	mul.w	r3, r1, r3
 8008a80:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008a84:	69b9      	ldr	r1, [r7, #24]
 8008a86:	0148      	lsls	r0, r1, #5
 8008a88:	69f9      	ldr	r1, [r7, #28]
 8008a8a:	4401      	add	r1, r0
 8008a8c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8008a90:	4313      	orrs	r3, r2
 8008a92:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8008a94:	79fb      	ldrb	r3, [r7, #7]
 8008a96:	2b01      	cmp	r3, #1
 8008a98:	d10d      	bne.n	8008ab6 <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8008a9a:	68bb      	ldr	r3, [r7, #8]
 8008a9c:	68db      	ldr	r3, [r3, #12]
 8008a9e:	2b00      	cmp	r3, #0
 8008aa0:	d009      	beq.n	8008ab6 <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8008aa2:	68bb      	ldr	r3, [r7, #8]
 8008aa4:	68d9      	ldr	r1, [r3, #12]
 8008aa6:	69bb      	ldr	r3, [r7, #24]
 8008aa8:	015a      	lsls	r2, r3, #5
 8008aaa:	69fb      	ldr	r3, [r7, #28]
 8008aac:	4413      	add	r3, r2
 8008aae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008ab2:	460a      	mov	r2, r1
 8008ab4:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8008ab6:	68bb      	ldr	r3, [r7, #8]
 8008ab8:	78db      	ldrb	r3, [r3, #3]
 8008aba:	2b01      	cmp	r3, #1
 8008abc:	d128      	bne.n	8008b10 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8008abe:	69fb      	ldr	r3, [r7, #28]
 8008ac0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008ac4:	689b      	ldr	r3, [r3, #8]
 8008ac6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008aca:	2b00      	cmp	r3, #0
 8008acc:	d110      	bne.n	8008af0 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8008ace:	69bb      	ldr	r3, [r7, #24]
 8008ad0:	015a      	lsls	r2, r3, #5
 8008ad2:	69fb      	ldr	r3, [r7, #28]
 8008ad4:	4413      	add	r3, r2
 8008ad6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008ada:	681b      	ldr	r3, [r3, #0]
 8008adc:	69ba      	ldr	r2, [r7, #24]
 8008ade:	0151      	lsls	r1, r2, #5
 8008ae0:	69fa      	ldr	r2, [r7, #28]
 8008ae2:	440a      	add	r2, r1
 8008ae4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008ae8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8008aec:	6013      	str	r3, [r2, #0]
 8008aee:	e00f      	b.n	8008b10 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8008af0:	69bb      	ldr	r3, [r7, #24]
 8008af2:	015a      	lsls	r2, r3, #5
 8008af4:	69fb      	ldr	r3, [r7, #28]
 8008af6:	4413      	add	r3, r2
 8008af8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008afc:	681b      	ldr	r3, [r3, #0]
 8008afe:	69ba      	ldr	r2, [r7, #24]
 8008b00:	0151      	lsls	r1, r2, #5
 8008b02:	69fa      	ldr	r2, [r7, #28]
 8008b04:	440a      	add	r2, r1
 8008b06:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008b0a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008b0e:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8008b10:	69bb      	ldr	r3, [r7, #24]
 8008b12:	015a      	lsls	r2, r3, #5
 8008b14:	69fb      	ldr	r3, [r7, #28]
 8008b16:	4413      	add	r3, r2
 8008b18:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008b1c:	681b      	ldr	r3, [r3, #0]
 8008b1e:	69ba      	ldr	r2, [r7, #24]
 8008b20:	0151      	lsls	r1, r2, #5
 8008b22:	69fa      	ldr	r2, [r7, #28]
 8008b24:	440a      	add	r2, r1
 8008b26:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008b2a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8008b2e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008b30:	2300      	movs	r3, #0
}
 8008b32:	4618      	mov	r0, r3
 8008b34:	3720      	adds	r7, #32
 8008b36:	46bd      	mov	sp, r7
 8008b38:	bd80      	pop	{r7, pc}
 8008b3a:	bf00      	nop
 8008b3c:	1ff80000 	.word	0x1ff80000

08008b40 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8008b40:	b480      	push	{r7}
 8008b42:	b087      	sub	sp, #28
 8008b44:	af00      	add	r7, sp, #0
 8008b46:	60f8      	str	r0, [r7, #12]
 8008b48:	60b9      	str	r1, [r7, #8]
 8008b4a:	4613      	mov	r3, r2
 8008b4c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008b4e:	68fb      	ldr	r3, [r7, #12]
 8008b50:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8008b52:	68bb      	ldr	r3, [r7, #8]
 8008b54:	781b      	ldrb	r3, [r3, #0]
 8008b56:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8008b58:	68bb      	ldr	r3, [r7, #8]
 8008b5a:	785b      	ldrb	r3, [r3, #1]
 8008b5c:	2b01      	cmp	r3, #1
 8008b5e:	f040 80cd 	bne.w	8008cfc <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8008b62:	68bb      	ldr	r3, [r7, #8]
 8008b64:	695b      	ldr	r3, [r3, #20]
 8008b66:	2b00      	cmp	r3, #0
 8008b68:	d132      	bne.n	8008bd0 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8008b6a:	693b      	ldr	r3, [r7, #16]
 8008b6c:	015a      	lsls	r2, r3, #5
 8008b6e:	697b      	ldr	r3, [r7, #20]
 8008b70:	4413      	add	r3, r2
 8008b72:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008b76:	691b      	ldr	r3, [r3, #16]
 8008b78:	693a      	ldr	r2, [r7, #16]
 8008b7a:	0151      	lsls	r1, r2, #5
 8008b7c:	697a      	ldr	r2, [r7, #20]
 8008b7e:	440a      	add	r2, r1
 8008b80:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008b84:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8008b88:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8008b8c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8008b8e:	693b      	ldr	r3, [r7, #16]
 8008b90:	015a      	lsls	r2, r3, #5
 8008b92:	697b      	ldr	r3, [r7, #20]
 8008b94:	4413      	add	r3, r2
 8008b96:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008b9a:	691b      	ldr	r3, [r3, #16]
 8008b9c:	693a      	ldr	r2, [r7, #16]
 8008b9e:	0151      	lsls	r1, r2, #5
 8008ba0:	697a      	ldr	r2, [r7, #20]
 8008ba2:	440a      	add	r2, r1
 8008ba4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008ba8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008bac:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8008bae:	693b      	ldr	r3, [r7, #16]
 8008bb0:	015a      	lsls	r2, r3, #5
 8008bb2:	697b      	ldr	r3, [r7, #20]
 8008bb4:	4413      	add	r3, r2
 8008bb6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008bba:	691b      	ldr	r3, [r3, #16]
 8008bbc:	693a      	ldr	r2, [r7, #16]
 8008bbe:	0151      	lsls	r1, r2, #5
 8008bc0:	697a      	ldr	r2, [r7, #20]
 8008bc2:	440a      	add	r2, r1
 8008bc4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008bc8:	0cdb      	lsrs	r3, r3, #19
 8008bca:	04db      	lsls	r3, r3, #19
 8008bcc:	6113      	str	r3, [r2, #16]
 8008bce:	e04e      	b.n	8008c6e <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8008bd0:	693b      	ldr	r3, [r7, #16]
 8008bd2:	015a      	lsls	r2, r3, #5
 8008bd4:	697b      	ldr	r3, [r7, #20]
 8008bd6:	4413      	add	r3, r2
 8008bd8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008bdc:	691b      	ldr	r3, [r3, #16]
 8008bde:	693a      	ldr	r2, [r7, #16]
 8008be0:	0151      	lsls	r1, r2, #5
 8008be2:	697a      	ldr	r2, [r7, #20]
 8008be4:	440a      	add	r2, r1
 8008be6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008bea:	0cdb      	lsrs	r3, r3, #19
 8008bec:	04db      	lsls	r3, r3, #19
 8008bee:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8008bf0:	693b      	ldr	r3, [r7, #16]
 8008bf2:	015a      	lsls	r2, r3, #5
 8008bf4:	697b      	ldr	r3, [r7, #20]
 8008bf6:	4413      	add	r3, r2
 8008bf8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008bfc:	691b      	ldr	r3, [r3, #16]
 8008bfe:	693a      	ldr	r2, [r7, #16]
 8008c00:	0151      	lsls	r1, r2, #5
 8008c02:	697a      	ldr	r2, [r7, #20]
 8008c04:	440a      	add	r2, r1
 8008c06:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008c0a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8008c0e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8008c12:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8008c14:	68bb      	ldr	r3, [r7, #8]
 8008c16:	695a      	ldr	r2, [r3, #20]
 8008c18:	68bb      	ldr	r3, [r7, #8]
 8008c1a:	689b      	ldr	r3, [r3, #8]
 8008c1c:	429a      	cmp	r2, r3
 8008c1e:	d903      	bls.n	8008c28 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8008c20:	68bb      	ldr	r3, [r7, #8]
 8008c22:	689a      	ldr	r2, [r3, #8]
 8008c24:	68bb      	ldr	r3, [r7, #8]
 8008c26:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8008c28:	693b      	ldr	r3, [r7, #16]
 8008c2a:	015a      	lsls	r2, r3, #5
 8008c2c:	697b      	ldr	r3, [r7, #20]
 8008c2e:	4413      	add	r3, r2
 8008c30:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008c34:	691b      	ldr	r3, [r3, #16]
 8008c36:	693a      	ldr	r2, [r7, #16]
 8008c38:	0151      	lsls	r1, r2, #5
 8008c3a:	697a      	ldr	r2, [r7, #20]
 8008c3c:	440a      	add	r2, r1
 8008c3e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008c42:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008c46:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8008c48:	693b      	ldr	r3, [r7, #16]
 8008c4a:	015a      	lsls	r2, r3, #5
 8008c4c:	697b      	ldr	r3, [r7, #20]
 8008c4e:	4413      	add	r3, r2
 8008c50:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008c54:	691a      	ldr	r2, [r3, #16]
 8008c56:	68bb      	ldr	r3, [r7, #8]
 8008c58:	695b      	ldr	r3, [r3, #20]
 8008c5a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008c5e:	6939      	ldr	r1, [r7, #16]
 8008c60:	0148      	lsls	r0, r1, #5
 8008c62:	6979      	ldr	r1, [r7, #20]
 8008c64:	4401      	add	r1, r0
 8008c66:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8008c6a:	4313      	orrs	r3, r2
 8008c6c:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8008c6e:	79fb      	ldrb	r3, [r7, #7]
 8008c70:	2b01      	cmp	r3, #1
 8008c72:	d11e      	bne.n	8008cb2 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8008c74:	68bb      	ldr	r3, [r7, #8]
 8008c76:	691b      	ldr	r3, [r3, #16]
 8008c78:	2b00      	cmp	r3, #0
 8008c7a:	d009      	beq.n	8008c90 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8008c7c:	693b      	ldr	r3, [r7, #16]
 8008c7e:	015a      	lsls	r2, r3, #5
 8008c80:	697b      	ldr	r3, [r7, #20]
 8008c82:	4413      	add	r3, r2
 8008c84:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008c88:	461a      	mov	r2, r3
 8008c8a:	68bb      	ldr	r3, [r7, #8]
 8008c8c:	691b      	ldr	r3, [r3, #16]
 8008c8e:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8008c90:	693b      	ldr	r3, [r7, #16]
 8008c92:	015a      	lsls	r2, r3, #5
 8008c94:	697b      	ldr	r3, [r7, #20]
 8008c96:	4413      	add	r3, r2
 8008c98:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008c9c:	681b      	ldr	r3, [r3, #0]
 8008c9e:	693a      	ldr	r2, [r7, #16]
 8008ca0:	0151      	lsls	r1, r2, #5
 8008ca2:	697a      	ldr	r2, [r7, #20]
 8008ca4:	440a      	add	r2, r1
 8008ca6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008caa:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8008cae:	6013      	str	r3, [r2, #0]
 8008cb0:	e092      	b.n	8008dd8 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8008cb2:	693b      	ldr	r3, [r7, #16]
 8008cb4:	015a      	lsls	r2, r3, #5
 8008cb6:	697b      	ldr	r3, [r7, #20]
 8008cb8:	4413      	add	r3, r2
 8008cba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008cbe:	681b      	ldr	r3, [r3, #0]
 8008cc0:	693a      	ldr	r2, [r7, #16]
 8008cc2:	0151      	lsls	r1, r2, #5
 8008cc4:	697a      	ldr	r2, [r7, #20]
 8008cc6:	440a      	add	r2, r1
 8008cc8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008ccc:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8008cd0:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8008cd2:	68bb      	ldr	r3, [r7, #8]
 8008cd4:	695b      	ldr	r3, [r3, #20]
 8008cd6:	2b00      	cmp	r3, #0
 8008cd8:	d07e      	beq.n	8008dd8 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8008cda:	697b      	ldr	r3, [r7, #20]
 8008cdc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008ce0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008ce2:	68bb      	ldr	r3, [r7, #8]
 8008ce4:	781b      	ldrb	r3, [r3, #0]
 8008ce6:	f003 030f 	and.w	r3, r3, #15
 8008cea:	2101      	movs	r1, #1
 8008cec:	fa01 f303 	lsl.w	r3, r1, r3
 8008cf0:	6979      	ldr	r1, [r7, #20]
 8008cf2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008cf6:	4313      	orrs	r3, r2
 8008cf8:	634b      	str	r3, [r1, #52]	; 0x34
 8008cfa:	e06d      	b.n	8008dd8 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8008cfc:	693b      	ldr	r3, [r7, #16]
 8008cfe:	015a      	lsls	r2, r3, #5
 8008d00:	697b      	ldr	r3, [r7, #20]
 8008d02:	4413      	add	r3, r2
 8008d04:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008d08:	691b      	ldr	r3, [r3, #16]
 8008d0a:	693a      	ldr	r2, [r7, #16]
 8008d0c:	0151      	lsls	r1, r2, #5
 8008d0e:	697a      	ldr	r2, [r7, #20]
 8008d10:	440a      	add	r2, r1
 8008d12:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008d16:	0cdb      	lsrs	r3, r3, #19
 8008d18:	04db      	lsls	r3, r3, #19
 8008d1a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8008d1c:	693b      	ldr	r3, [r7, #16]
 8008d1e:	015a      	lsls	r2, r3, #5
 8008d20:	697b      	ldr	r3, [r7, #20]
 8008d22:	4413      	add	r3, r2
 8008d24:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008d28:	691b      	ldr	r3, [r3, #16]
 8008d2a:	693a      	ldr	r2, [r7, #16]
 8008d2c:	0151      	lsls	r1, r2, #5
 8008d2e:	697a      	ldr	r2, [r7, #20]
 8008d30:	440a      	add	r2, r1
 8008d32:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008d36:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8008d3a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8008d3e:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8008d40:	68bb      	ldr	r3, [r7, #8]
 8008d42:	695b      	ldr	r3, [r3, #20]
 8008d44:	2b00      	cmp	r3, #0
 8008d46:	d003      	beq.n	8008d50 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 8008d48:	68bb      	ldr	r3, [r7, #8]
 8008d4a:	689a      	ldr	r2, [r3, #8]
 8008d4c:	68bb      	ldr	r3, [r7, #8]
 8008d4e:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8008d50:	693b      	ldr	r3, [r7, #16]
 8008d52:	015a      	lsls	r2, r3, #5
 8008d54:	697b      	ldr	r3, [r7, #20]
 8008d56:	4413      	add	r3, r2
 8008d58:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008d5c:	691b      	ldr	r3, [r3, #16]
 8008d5e:	693a      	ldr	r2, [r7, #16]
 8008d60:	0151      	lsls	r1, r2, #5
 8008d62:	697a      	ldr	r2, [r7, #20]
 8008d64:	440a      	add	r2, r1
 8008d66:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008d6a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008d6e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8008d70:	693b      	ldr	r3, [r7, #16]
 8008d72:	015a      	lsls	r2, r3, #5
 8008d74:	697b      	ldr	r3, [r7, #20]
 8008d76:	4413      	add	r3, r2
 8008d78:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008d7c:	691a      	ldr	r2, [r3, #16]
 8008d7e:	68bb      	ldr	r3, [r7, #8]
 8008d80:	689b      	ldr	r3, [r3, #8]
 8008d82:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008d86:	6939      	ldr	r1, [r7, #16]
 8008d88:	0148      	lsls	r0, r1, #5
 8008d8a:	6979      	ldr	r1, [r7, #20]
 8008d8c:	4401      	add	r1, r0
 8008d8e:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8008d92:	4313      	orrs	r3, r2
 8008d94:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8008d96:	79fb      	ldrb	r3, [r7, #7]
 8008d98:	2b01      	cmp	r3, #1
 8008d9a:	d10d      	bne.n	8008db8 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8008d9c:	68bb      	ldr	r3, [r7, #8]
 8008d9e:	68db      	ldr	r3, [r3, #12]
 8008da0:	2b00      	cmp	r3, #0
 8008da2:	d009      	beq.n	8008db8 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8008da4:	68bb      	ldr	r3, [r7, #8]
 8008da6:	68d9      	ldr	r1, [r3, #12]
 8008da8:	693b      	ldr	r3, [r7, #16]
 8008daa:	015a      	lsls	r2, r3, #5
 8008dac:	697b      	ldr	r3, [r7, #20]
 8008dae:	4413      	add	r3, r2
 8008db0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008db4:	460a      	mov	r2, r1
 8008db6:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8008db8:	693b      	ldr	r3, [r7, #16]
 8008dba:	015a      	lsls	r2, r3, #5
 8008dbc:	697b      	ldr	r3, [r7, #20]
 8008dbe:	4413      	add	r3, r2
 8008dc0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008dc4:	681b      	ldr	r3, [r3, #0]
 8008dc6:	693a      	ldr	r2, [r7, #16]
 8008dc8:	0151      	lsls	r1, r2, #5
 8008dca:	697a      	ldr	r2, [r7, #20]
 8008dcc:	440a      	add	r2, r1
 8008dce:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008dd2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8008dd6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008dd8:	2300      	movs	r3, #0
}
 8008dda:	4618      	mov	r0, r3
 8008ddc:	371c      	adds	r7, #28
 8008dde:	46bd      	mov	sp, r7
 8008de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008de4:	4770      	bx	lr

08008de6 <USB_WritePacket>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src, uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8008de6:	b480      	push	{r7}
 8008de8:	b089      	sub	sp, #36	; 0x24
 8008dea:	af00      	add	r7, sp, #0
 8008dec:	60f8      	str	r0, [r7, #12]
 8008dee:	60b9      	str	r1, [r7, #8]
 8008df0:	4611      	mov	r1, r2
 8008df2:	461a      	mov	r2, r3
 8008df4:	460b      	mov	r3, r1
 8008df6:	71fb      	strb	r3, [r7, #7]
 8008df8:	4613      	mov	r3, r2
 8008dfa:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008dfc:	68fb      	ldr	r3, [r7, #12]
 8008dfe:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 8008e00:	68bb      	ldr	r3, [r7, #8]
 8008e02:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 8008e04:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8008e08:	2b00      	cmp	r3, #0
 8008e0a:	d11a      	bne.n	8008e42 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8008e0c:	88bb      	ldrh	r3, [r7, #4]
 8008e0e:	3303      	adds	r3, #3
 8008e10:	089b      	lsrs	r3, r3, #2
 8008e12:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8008e14:	2300      	movs	r3, #0
 8008e16:	61bb      	str	r3, [r7, #24]
 8008e18:	e00f      	b.n	8008e3a <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8008e1a:	79fb      	ldrb	r3, [r7, #7]
 8008e1c:	031a      	lsls	r2, r3, #12
 8008e1e:	697b      	ldr	r3, [r7, #20]
 8008e20:	4413      	add	r3, r2
 8008e22:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008e26:	461a      	mov	r2, r3
 8008e28:	69fb      	ldr	r3, [r7, #28]
 8008e2a:	681b      	ldr	r3, [r3, #0]
 8008e2c:	6013      	str	r3, [r2, #0]
      pSrc++;
 8008e2e:	69fb      	ldr	r3, [r7, #28]
 8008e30:	3304      	adds	r3, #4
 8008e32:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8008e34:	69bb      	ldr	r3, [r7, #24]
 8008e36:	3301      	adds	r3, #1
 8008e38:	61bb      	str	r3, [r7, #24]
 8008e3a:	69ba      	ldr	r2, [r7, #24]
 8008e3c:	693b      	ldr	r3, [r7, #16]
 8008e3e:	429a      	cmp	r2, r3
 8008e40:	d3eb      	bcc.n	8008e1a <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8008e42:	2300      	movs	r3, #0
}
 8008e44:	4618      	mov	r0, r3
 8008e46:	3724      	adds	r7, #36	; 0x24
 8008e48:	46bd      	mov	sp, r7
 8008e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e4e:	4770      	bx	lr

08008e50 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8008e50:	b480      	push	{r7}
 8008e52:	b089      	sub	sp, #36	; 0x24
 8008e54:	af00      	add	r7, sp, #0
 8008e56:	60f8      	str	r0, [r7, #12]
 8008e58:	60b9      	str	r1, [r7, #8]
 8008e5a:	4613      	mov	r3, r2
 8008e5c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008e5e:	68fb      	ldr	r3, [r7, #12]
 8008e60:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 8008e62:	68bb      	ldr	r3, [r7, #8]
 8008e64:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8008e66:	88fb      	ldrh	r3, [r7, #6]
 8008e68:	3303      	adds	r3, #3
 8008e6a:	089b      	lsrs	r3, r3, #2
 8008e6c:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 8008e6e:	2300      	movs	r3, #0
 8008e70:	61bb      	str	r3, [r7, #24]
 8008e72:	e00b      	b.n	8008e8c <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8008e74:	697b      	ldr	r3, [r7, #20]
 8008e76:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008e7a:	681a      	ldr	r2, [r3, #0]
 8008e7c:	69fb      	ldr	r3, [r7, #28]
 8008e7e:	601a      	str	r2, [r3, #0]
    pDest++;
 8008e80:	69fb      	ldr	r3, [r7, #28]
 8008e82:	3304      	adds	r3, #4
 8008e84:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8008e86:	69bb      	ldr	r3, [r7, #24]
 8008e88:	3301      	adds	r3, #1
 8008e8a:	61bb      	str	r3, [r7, #24]
 8008e8c:	69ba      	ldr	r2, [r7, #24]
 8008e8e:	693b      	ldr	r3, [r7, #16]
 8008e90:	429a      	cmp	r2, r3
 8008e92:	d3ef      	bcc.n	8008e74 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 8008e94:	69fb      	ldr	r3, [r7, #28]
}
 8008e96:	4618      	mov	r0, r3
 8008e98:	3724      	adds	r7, #36	; 0x24
 8008e9a:	46bd      	mov	sp, r7
 8008e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ea0:	4770      	bx	lr

08008ea2 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008ea2:	b480      	push	{r7}
 8008ea4:	b085      	sub	sp, #20
 8008ea6:	af00      	add	r7, sp, #0
 8008ea8:	6078      	str	r0, [r7, #4]
 8008eaa:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008eb0:	683b      	ldr	r3, [r7, #0]
 8008eb2:	781b      	ldrb	r3, [r3, #0]
 8008eb4:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8008eb6:	683b      	ldr	r3, [r7, #0]
 8008eb8:	785b      	ldrb	r3, [r3, #1]
 8008eba:	2b01      	cmp	r3, #1
 8008ebc:	d12c      	bne.n	8008f18 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8008ebe:	68bb      	ldr	r3, [r7, #8]
 8008ec0:	015a      	lsls	r2, r3, #5
 8008ec2:	68fb      	ldr	r3, [r7, #12]
 8008ec4:	4413      	add	r3, r2
 8008ec6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008eca:	681b      	ldr	r3, [r3, #0]
 8008ecc:	2b00      	cmp	r3, #0
 8008ece:	db12      	blt.n	8008ef6 <USB_EPSetStall+0x54>
 8008ed0:	68bb      	ldr	r3, [r7, #8]
 8008ed2:	2b00      	cmp	r3, #0
 8008ed4:	d00f      	beq.n	8008ef6 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8008ed6:	68bb      	ldr	r3, [r7, #8]
 8008ed8:	015a      	lsls	r2, r3, #5
 8008eda:	68fb      	ldr	r3, [r7, #12]
 8008edc:	4413      	add	r3, r2
 8008ede:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008ee2:	681b      	ldr	r3, [r3, #0]
 8008ee4:	68ba      	ldr	r2, [r7, #8]
 8008ee6:	0151      	lsls	r1, r2, #5
 8008ee8:	68fa      	ldr	r2, [r7, #12]
 8008eea:	440a      	add	r2, r1
 8008eec:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008ef0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8008ef4:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8008ef6:	68bb      	ldr	r3, [r7, #8]
 8008ef8:	015a      	lsls	r2, r3, #5
 8008efa:	68fb      	ldr	r3, [r7, #12]
 8008efc:	4413      	add	r3, r2
 8008efe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008f02:	681b      	ldr	r3, [r3, #0]
 8008f04:	68ba      	ldr	r2, [r7, #8]
 8008f06:	0151      	lsls	r1, r2, #5
 8008f08:	68fa      	ldr	r2, [r7, #12]
 8008f0a:	440a      	add	r2, r1
 8008f0c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008f10:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8008f14:	6013      	str	r3, [r2, #0]
 8008f16:	e02b      	b.n	8008f70 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8008f18:	68bb      	ldr	r3, [r7, #8]
 8008f1a:	015a      	lsls	r2, r3, #5
 8008f1c:	68fb      	ldr	r3, [r7, #12]
 8008f1e:	4413      	add	r3, r2
 8008f20:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008f24:	681b      	ldr	r3, [r3, #0]
 8008f26:	2b00      	cmp	r3, #0
 8008f28:	db12      	blt.n	8008f50 <USB_EPSetStall+0xae>
 8008f2a:	68bb      	ldr	r3, [r7, #8]
 8008f2c:	2b00      	cmp	r3, #0
 8008f2e:	d00f      	beq.n	8008f50 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8008f30:	68bb      	ldr	r3, [r7, #8]
 8008f32:	015a      	lsls	r2, r3, #5
 8008f34:	68fb      	ldr	r3, [r7, #12]
 8008f36:	4413      	add	r3, r2
 8008f38:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008f3c:	681b      	ldr	r3, [r3, #0]
 8008f3e:	68ba      	ldr	r2, [r7, #8]
 8008f40:	0151      	lsls	r1, r2, #5
 8008f42:	68fa      	ldr	r2, [r7, #12]
 8008f44:	440a      	add	r2, r1
 8008f46:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008f4a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8008f4e:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8008f50:	68bb      	ldr	r3, [r7, #8]
 8008f52:	015a      	lsls	r2, r3, #5
 8008f54:	68fb      	ldr	r3, [r7, #12]
 8008f56:	4413      	add	r3, r2
 8008f58:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008f5c:	681b      	ldr	r3, [r3, #0]
 8008f5e:	68ba      	ldr	r2, [r7, #8]
 8008f60:	0151      	lsls	r1, r2, #5
 8008f62:	68fa      	ldr	r2, [r7, #12]
 8008f64:	440a      	add	r2, r1
 8008f66:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008f6a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8008f6e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008f70:	2300      	movs	r3, #0
}
 8008f72:	4618      	mov	r0, r3
 8008f74:	3714      	adds	r7, #20
 8008f76:	46bd      	mov	sp, r7
 8008f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f7c:	4770      	bx	lr

08008f7e <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008f7e:	b480      	push	{r7}
 8008f80:	b085      	sub	sp, #20
 8008f82:	af00      	add	r7, sp, #0
 8008f84:	6078      	str	r0, [r7, #4]
 8008f86:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008f8c:	683b      	ldr	r3, [r7, #0]
 8008f8e:	781b      	ldrb	r3, [r3, #0]
 8008f90:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8008f92:	683b      	ldr	r3, [r7, #0]
 8008f94:	785b      	ldrb	r3, [r3, #1]
 8008f96:	2b01      	cmp	r3, #1
 8008f98:	d128      	bne.n	8008fec <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8008f9a:	68bb      	ldr	r3, [r7, #8]
 8008f9c:	015a      	lsls	r2, r3, #5
 8008f9e:	68fb      	ldr	r3, [r7, #12]
 8008fa0:	4413      	add	r3, r2
 8008fa2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008fa6:	681b      	ldr	r3, [r3, #0]
 8008fa8:	68ba      	ldr	r2, [r7, #8]
 8008faa:	0151      	lsls	r1, r2, #5
 8008fac:	68fa      	ldr	r2, [r7, #12]
 8008fae:	440a      	add	r2, r1
 8008fb0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008fb4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008fb8:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8008fba:	683b      	ldr	r3, [r7, #0]
 8008fbc:	78db      	ldrb	r3, [r3, #3]
 8008fbe:	2b03      	cmp	r3, #3
 8008fc0:	d003      	beq.n	8008fca <USB_EPClearStall+0x4c>
 8008fc2:	683b      	ldr	r3, [r7, #0]
 8008fc4:	78db      	ldrb	r3, [r3, #3]
 8008fc6:	2b02      	cmp	r3, #2
 8008fc8:	d138      	bne.n	800903c <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8008fca:	68bb      	ldr	r3, [r7, #8]
 8008fcc:	015a      	lsls	r2, r3, #5
 8008fce:	68fb      	ldr	r3, [r7, #12]
 8008fd0:	4413      	add	r3, r2
 8008fd2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008fd6:	681b      	ldr	r3, [r3, #0]
 8008fd8:	68ba      	ldr	r2, [r7, #8]
 8008fda:	0151      	lsls	r1, r2, #5
 8008fdc:	68fa      	ldr	r2, [r7, #12]
 8008fde:	440a      	add	r2, r1
 8008fe0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008fe4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008fe8:	6013      	str	r3, [r2, #0]
 8008fea:	e027      	b.n	800903c <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8008fec:	68bb      	ldr	r3, [r7, #8]
 8008fee:	015a      	lsls	r2, r3, #5
 8008ff0:	68fb      	ldr	r3, [r7, #12]
 8008ff2:	4413      	add	r3, r2
 8008ff4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008ff8:	681b      	ldr	r3, [r3, #0]
 8008ffa:	68ba      	ldr	r2, [r7, #8]
 8008ffc:	0151      	lsls	r1, r2, #5
 8008ffe:	68fa      	ldr	r2, [r7, #12]
 8009000:	440a      	add	r2, r1
 8009002:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009006:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800900a:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800900c:	683b      	ldr	r3, [r7, #0]
 800900e:	78db      	ldrb	r3, [r3, #3]
 8009010:	2b03      	cmp	r3, #3
 8009012:	d003      	beq.n	800901c <USB_EPClearStall+0x9e>
 8009014:	683b      	ldr	r3, [r7, #0]
 8009016:	78db      	ldrb	r3, [r3, #3]
 8009018:	2b02      	cmp	r3, #2
 800901a:	d10f      	bne.n	800903c <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800901c:	68bb      	ldr	r3, [r7, #8]
 800901e:	015a      	lsls	r2, r3, #5
 8009020:	68fb      	ldr	r3, [r7, #12]
 8009022:	4413      	add	r3, r2
 8009024:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009028:	681b      	ldr	r3, [r3, #0]
 800902a:	68ba      	ldr	r2, [r7, #8]
 800902c:	0151      	lsls	r1, r2, #5
 800902e:	68fa      	ldr	r2, [r7, #12]
 8009030:	440a      	add	r2, r1
 8009032:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009036:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800903a:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800903c:	2300      	movs	r3, #0
}
 800903e:	4618      	mov	r0, r3
 8009040:	3714      	adds	r7, #20
 8009042:	46bd      	mov	sp, r7
 8009044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009048:	4770      	bx	lr

0800904a <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800904a:	b480      	push	{r7}
 800904c:	b085      	sub	sp, #20
 800904e:	af00      	add	r7, sp, #0
 8009050:	6078      	str	r0, [r7, #4]
 8009052:	460b      	mov	r3, r1
 8009054:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800905a:	68fb      	ldr	r3, [r7, #12]
 800905c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009060:	681b      	ldr	r3, [r3, #0]
 8009062:	68fa      	ldr	r2, [r7, #12]
 8009064:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009068:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800906c:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800906e:	68fb      	ldr	r3, [r7, #12]
 8009070:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009074:	681a      	ldr	r2, [r3, #0]
 8009076:	78fb      	ldrb	r3, [r7, #3]
 8009078:	011b      	lsls	r3, r3, #4
 800907a:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800907e:	68f9      	ldr	r1, [r7, #12]
 8009080:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009084:	4313      	orrs	r3, r2
 8009086:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8009088:	2300      	movs	r3, #0
}
 800908a:	4618      	mov	r0, r3
 800908c:	3714      	adds	r7, #20
 800908e:	46bd      	mov	sp, r7
 8009090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009094:	4770      	bx	lr

08009096 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8009096:	b580      	push	{r7, lr}
 8009098:	b084      	sub	sp, #16
 800909a:	af00      	add	r7, sp, #0
 800909c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80090a2:	68fb      	ldr	r3, [r7, #12]
 80090a4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80090a8:	685b      	ldr	r3, [r3, #4]
 80090aa:	68fa      	ldr	r2, [r7, #12]
 80090ac:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80090b0:	f023 0302 	bic.w	r3, r3, #2
 80090b4:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 80090b6:	2003      	movs	r0, #3
 80090b8:	f7f9 fc0a 	bl	80028d0 <HAL_Delay>

  return HAL_OK;
 80090bc:	2300      	movs	r3, #0
}
 80090be:	4618      	mov	r0, r3
 80090c0:	3710      	adds	r7, #16
 80090c2:	46bd      	mov	sp, r7
 80090c4:	bd80      	pop	{r7, pc}

080090c6 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80090c6:	b580      	push	{r7, lr}
 80090c8:	b084      	sub	sp, #16
 80090ca:	af00      	add	r7, sp, #0
 80090cc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80090d2:	68fb      	ldr	r3, [r7, #12]
 80090d4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80090d8:	685b      	ldr	r3, [r3, #4]
 80090da:	68fa      	ldr	r2, [r7, #12]
 80090dc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80090e0:	f043 0302 	orr.w	r3, r3, #2
 80090e4:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 80090e6:	2003      	movs	r0, #3
 80090e8:	f7f9 fbf2 	bl	80028d0 <HAL_Delay>

  return HAL_OK;
 80090ec:	2300      	movs	r3, #0
}
 80090ee:	4618      	mov	r0, r3
 80090f0:	3710      	adds	r7, #16
 80090f2:	46bd      	mov	sp, r7
 80090f4:	bd80      	pop	{r7, pc}

080090f6 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80090f6:	b480      	push	{r7}
 80090f8:	b085      	sub	sp, #20
 80090fa:	af00      	add	r7, sp, #0
 80090fc:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	695b      	ldr	r3, [r3, #20]
 8009102:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	699b      	ldr	r3, [r3, #24]
 8009108:	68fa      	ldr	r2, [r7, #12]
 800910a:	4013      	ands	r3, r2
 800910c:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800910e:	68fb      	ldr	r3, [r7, #12]
}
 8009110:	4618      	mov	r0, r3
 8009112:	3714      	adds	r7, #20
 8009114:	46bd      	mov	sp, r7
 8009116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800911a:	4770      	bx	lr

0800911c <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800911c:	b480      	push	{r7}
 800911e:	b085      	sub	sp, #20
 8009120:	af00      	add	r7, sp, #0
 8009122:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8009128:	68fb      	ldr	r3, [r7, #12]
 800912a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800912e:	699b      	ldr	r3, [r3, #24]
 8009130:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8009132:	68fb      	ldr	r3, [r7, #12]
 8009134:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009138:	69db      	ldr	r3, [r3, #28]
 800913a:	68ba      	ldr	r2, [r7, #8]
 800913c:	4013      	ands	r3, r2
 800913e:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8009140:	68bb      	ldr	r3, [r7, #8]
 8009142:	0c1b      	lsrs	r3, r3, #16
}
 8009144:	4618      	mov	r0, r3
 8009146:	3714      	adds	r7, #20
 8009148:	46bd      	mov	sp, r7
 800914a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800914e:	4770      	bx	lr

08009150 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8009150:	b480      	push	{r7}
 8009152:	b085      	sub	sp, #20
 8009154:	af00      	add	r7, sp, #0
 8009156:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800915c:	68fb      	ldr	r3, [r7, #12]
 800915e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009162:	699b      	ldr	r3, [r3, #24]
 8009164:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8009166:	68fb      	ldr	r3, [r7, #12]
 8009168:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800916c:	69db      	ldr	r3, [r3, #28]
 800916e:	68ba      	ldr	r2, [r7, #8]
 8009170:	4013      	ands	r3, r2
 8009172:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8009174:	68bb      	ldr	r3, [r7, #8]
 8009176:	b29b      	uxth	r3, r3
}
 8009178:	4618      	mov	r0, r3
 800917a:	3714      	adds	r7, #20
 800917c:	46bd      	mov	sp, r7
 800917e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009182:	4770      	bx	lr

08009184 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8009184:	b480      	push	{r7}
 8009186:	b085      	sub	sp, #20
 8009188:	af00      	add	r7, sp, #0
 800918a:	6078      	str	r0, [r7, #4]
 800918c:	460b      	mov	r3, r1
 800918e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8009194:	78fb      	ldrb	r3, [r7, #3]
 8009196:	015a      	lsls	r2, r3, #5
 8009198:	68fb      	ldr	r3, [r7, #12]
 800919a:	4413      	add	r3, r2
 800919c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80091a0:	689b      	ldr	r3, [r3, #8]
 80091a2:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80091a4:	68fb      	ldr	r3, [r7, #12]
 80091a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80091aa:	695b      	ldr	r3, [r3, #20]
 80091ac:	68ba      	ldr	r2, [r7, #8]
 80091ae:	4013      	ands	r3, r2
 80091b0:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80091b2:	68bb      	ldr	r3, [r7, #8]
}
 80091b4:	4618      	mov	r0, r3
 80091b6:	3714      	adds	r7, #20
 80091b8:	46bd      	mov	sp, r7
 80091ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091be:	4770      	bx	lr

080091c0 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80091c0:	b480      	push	{r7}
 80091c2:	b087      	sub	sp, #28
 80091c4:	af00      	add	r7, sp, #0
 80091c6:	6078      	str	r0, [r7, #4]
 80091c8:	460b      	mov	r3, r1
 80091ca:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 80091d0:	697b      	ldr	r3, [r7, #20]
 80091d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80091d6:	691b      	ldr	r3, [r3, #16]
 80091d8:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 80091da:	697b      	ldr	r3, [r7, #20]
 80091dc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80091e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80091e2:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80091e4:	78fb      	ldrb	r3, [r7, #3]
 80091e6:	f003 030f 	and.w	r3, r3, #15
 80091ea:	68fa      	ldr	r2, [r7, #12]
 80091ec:	fa22 f303 	lsr.w	r3, r2, r3
 80091f0:	01db      	lsls	r3, r3, #7
 80091f2:	b2db      	uxtb	r3, r3
 80091f4:	693a      	ldr	r2, [r7, #16]
 80091f6:	4313      	orrs	r3, r2
 80091f8:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80091fa:	78fb      	ldrb	r3, [r7, #3]
 80091fc:	015a      	lsls	r2, r3, #5
 80091fe:	697b      	ldr	r3, [r7, #20]
 8009200:	4413      	add	r3, r2
 8009202:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009206:	689b      	ldr	r3, [r3, #8]
 8009208:	693a      	ldr	r2, [r7, #16]
 800920a:	4013      	ands	r3, r2
 800920c:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800920e:	68bb      	ldr	r3, [r7, #8]
}
 8009210:	4618      	mov	r0, r3
 8009212:	371c      	adds	r7, #28
 8009214:	46bd      	mov	sp, r7
 8009216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800921a:	4770      	bx	lr

0800921c <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800921c:	b480      	push	{r7}
 800921e:	b083      	sub	sp, #12
 8009220:	af00      	add	r7, sp, #0
 8009222:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	695b      	ldr	r3, [r3, #20]
 8009228:	f003 0301 	and.w	r3, r3, #1
}
 800922c:	4618      	mov	r0, r3
 800922e:	370c      	adds	r7, #12
 8009230:	46bd      	mov	sp, r7
 8009232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009236:	4770      	bx	lr

08009238 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8009238:	b480      	push	{r7}
 800923a:	b085      	sub	sp, #20
 800923c:	af00      	add	r7, sp, #0
 800923e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP based on the enumeration speed */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8009244:	68fb      	ldr	r3, [r7, #12]
 8009246:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800924a:	681b      	ldr	r3, [r3, #0]
 800924c:	68fa      	ldr	r2, [r7, #12]
 800924e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009252:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8009256:	f023 0307 	bic.w	r3, r3, #7
 800925a:	6013      	str	r3, [r2, #0]

  if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD) == DSTS_ENUMSPD_LS_PHY_6MHZ)
 800925c:	68fb      	ldr	r3, [r7, #12]
 800925e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009262:	689b      	ldr	r3, [r3, #8]
 8009264:	f003 0306 	and.w	r3, r3, #6
 8009268:	2b04      	cmp	r3, #4
 800926a:	d109      	bne.n	8009280 <USB_ActivateSetup+0x48>
  {
    USBx_INEP(0U)->DIEPCTL |= 3U;
 800926c:	68fb      	ldr	r3, [r7, #12]
 800926e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009272:	681b      	ldr	r3, [r3, #0]
 8009274:	68fa      	ldr	r2, [r7, #12]
 8009276:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800927a:	f043 0303 	orr.w	r3, r3, #3
 800927e:	6013      	str	r3, [r2, #0]
  }
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8009280:	68fb      	ldr	r3, [r7, #12]
 8009282:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009286:	685b      	ldr	r3, [r3, #4]
 8009288:	68fa      	ldr	r2, [r7, #12]
 800928a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800928e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009292:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8009294:	2300      	movs	r3, #0
}
 8009296:	4618      	mov	r0, r3
 8009298:	3714      	adds	r7, #20
 800929a:	46bd      	mov	sp, r7
 800929c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092a0:	4770      	bx	lr
	...

080092a4 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 80092a4:	b480      	push	{r7}
 80092a6:	b087      	sub	sp, #28
 80092a8:	af00      	add	r7, sp, #0
 80092aa:	60f8      	str	r0, [r7, #12]
 80092ac:	460b      	mov	r3, r1
 80092ae:	607a      	str	r2, [r7, #4]
 80092b0:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80092b2:	68fb      	ldr	r3, [r7, #12]
 80092b4:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80092b6:	68fb      	ldr	r3, [r7, #12]
 80092b8:	333c      	adds	r3, #60	; 0x3c
 80092ba:	3304      	adds	r3, #4
 80092bc:	681b      	ldr	r3, [r3, #0]
 80092be:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80092c0:	693b      	ldr	r3, [r7, #16]
 80092c2:	4a26      	ldr	r2, [pc, #152]	; (800935c <USB_EP0_OutStart+0xb8>)
 80092c4:	4293      	cmp	r3, r2
 80092c6:	d90a      	bls.n	80092de <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80092c8:	697b      	ldr	r3, [r7, #20]
 80092ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80092ce:	681b      	ldr	r3, [r3, #0]
 80092d0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80092d4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80092d8:	d101      	bne.n	80092de <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 80092da:	2300      	movs	r3, #0
 80092dc:	e037      	b.n	800934e <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80092de:	697b      	ldr	r3, [r7, #20]
 80092e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80092e4:	461a      	mov	r2, r3
 80092e6:	2300      	movs	r3, #0
 80092e8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80092ea:	697b      	ldr	r3, [r7, #20]
 80092ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80092f0:	691b      	ldr	r3, [r3, #16]
 80092f2:	697a      	ldr	r2, [r7, #20]
 80092f4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80092f8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80092fc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 80092fe:	697b      	ldr	r3, [r7, #20]
 8009300:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009304:	691b      	ldr	r3, [r3, #16]
 8009306:	697a      	ldr	r2, [r7, #20]
 8009308:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800930c:	f043 0318 	orr.w	r3, r3, #24
 8009310:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8009312:	697b      	ldr	r3, [r7, #20]
 8009314:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009318:	691b      	ldr	r3, [r3, #16]
 800931a:	697a      	ldr	r2, [r7, #20]
 800931c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009320:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8009324:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8009326:	7afb      	ldrb	r3, [r7, #11]
 8009328:	2b01      	cmp	r3, #1
 800932a:	d10f      	bne.n	800934c <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800932c:	697b      	ldr	r3, [r7, #20]
 800932e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009332:	461a      	mov	r2, r3
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8009338:	697b      	ldr	r3, [r7, #20]
 800933a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800933e:	681b      	ldr	r3, [r3, #0]
 8009340:	697a      	ldr	r2, [r7, #20]
 8009342:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009346:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800934a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800934c:	2300      	movs	r3, #0
}
 800934e:	4618      	mov	r0, r3
 8009350:	371c      	adds	r7, #28
 8009352:	46bd      	mov	sp, r7
 8009354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009358:	4770      	bx	lr
 800935a:	bf00      	nop
 800935c:	4f54300a 	.word	0x4f54300a

08009360 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8009360:	b480      	push	{r7}
 8009362:	b085      	sub	sp, #20
 8009364:	af00      	add	r7, sp, #0
 8009366:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8009368:	2300      	movs	r3, #0
 800936a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800936c:	68fb      	ldr	r3, [r7, #12]
 800936e:	3301      	adds	r3, #1
 8009370:	60fb      	str	r3, [r7, #12]
 8009372:	68fb      	ldr	r3, [r7, #12]
 8009374:	4a13      	ldr	r2, [pc, #76]	; (80093c4 <USB_CoreReset+0x64>)
 8009376:	4293      	cmp	r3, r2
 8009378:	d901      	bls.n	800937e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800937a:	2303      	movs	r3, #3
 800937c:	e01b      	b.n	80093b6 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	691b      	ldr	r3, [r3, #16]
 8009382:	2b00      	cmp	r3, #0
 8009384:	daf2      	bge.n	800936c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8009386:	2300      	movs	r3, #0
 8009388:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	691b      	ldr	r3, [r3, #16]
 800938e:	f043 0201 	orr.w	r2, r3, #1
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8009396:	68fb      	ldr	r3, [r7, #12]
 8009398:	3301      	adds	r3, #1
 800939a:	60fb      	str	r3, [r7, #12]
 800939c:	68fb      	ldr	r3, [r7, #12]
 800939e:	4a09      	ldr	r2, [pc, #36]	; (80093c4 <USB_CoreReset+0x64>)
 80093a0:	4293      	cmp	r3, r2
 80093a2:	d901      	bls.n	80093a8 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80093a4:	2303      	movs	r3, #3
 80093a6:	e006      	b.n	80093b6 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	691b      	ldr	r3, [r3, #16]
 80093ac:	f003 0301 	and.w	r3, r3, #1
 80093b0:	2b01      	cmp	r3, #1
 80093b2:	d0f0      	beq.n	8009396 <USB_CoreReset+0x36>

  return HAL_OK;
 80093b4:	2300      	movs	r3, #0
}
 80093b6:	4618      	mov	r0, r3
 80093b8:	3714      	adds	r7, #20
 80093ba:	46bd      	mov	sp, r7
 80093bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093c0:	4770      	bx	lr
 80093c2:	bf00      	nop
 80093c4:	00030d40 	.word	0x00030d40

080093c8 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 80093c8:	b580      	push	{r7, lr}
 80093ca:	b084      	sub	sp, #16
 80093cc:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 192;
 80093ce:	4b8c      	ldr	r3, [pc, #560]	; (8009600 <MX_LWIP_Init+0x238>)
 80093d0:	22c0      	movs	r2, #192	; 0xc0
 80093d2:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 168;
 80093d4:	4b8a      	ldr	r3, [pc, #552]	; (8009600 <MX_LWIP_Init+0x238>)
 80093d6:	22a8      	movs	r2, #168	; 0xa8
 80093d8:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 0;
 80093da:	4b89      	ldr	r3, [pc, #548]	; (8009600 <MX_LWIP_Init+0x238>)
 80093dc:	2200      	movs	r2, #0
 80093de:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 50;
 80093e0:	4b87      	ldr	r3, [pc, #540]	; (8009600 <MX_LWIP_Init+0x238>)
 80093e2:	2232      	movs	r2, #50	; 0x32
 80093e4:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 80093e6:	4b87      	ldr	r3, [pc, #540]	; (8009604 <MX_LWIP_Init+0x23c>)
 80093e8:	22ff      	movs	r2, #255	; 0xff
 80093ea:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 80093ec:	4b85      	ldr	r3, [pc, #532]	; (8009604 <MX_LWIP_Init+0x23c>)
 80093ee:	22ff      	movs	r2, #255	; 0xff
 80093f0:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 80093f2:	4b84      	ldr	r3, [pc, #528]	; (8009604 <MX_LWIP_Init+0x23c>)
 80093f4:	22ff      	movs	r2, #255	; 0xff
 80093f6:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 80093f8:	4b82      	ldr	r3, [pc, #520]	; (8009604 <MX_LWIP_Init+0x23c>)
 80093fa:	2200      	movs	r2, #0
 80093fc:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 192;
 80093fe:	4b82      	ldr	r3, [pc, #520]	; (8009608 <MX_LWIP_Init+0x240>)
 8009400:	22c0      	movs	r2, #192	; 0xc0
 8009402:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 168;
 8009404:	4b80      	ldr	r3, [pc, #512]	; (8009608 <MX_LWIP_Init+0x240>)
 8009406:	22a8      	movs	r2, #168	; 0xa8
 8009408:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 0;
 800940a:	4b7f      	ldr	r3, [pc, #508]	; (8009608 <MX_LWIP_Init+0x240>)
 800940c:	2200      	movs	r2, #0
 800940e:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 1;
 8009410:	4b7d      	ldr	r3, [pc, #500]	; (8009608 <MX_LWIP_Init+0x240>)
 8009412:	2201      	movs	r2, #1
 8009414:	70da      	strb	r2, [r3, #3]
  
  /* Initilialize the LwIP stack with RTOS */
  tcpip_init( NULL, NULL );
 8009416:	2100      	movs	r1, #0
 8009418:	2000      	movs	r0, #0
 800941a:	f007 f899 	bl	8010550 <tcpip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 800941e:	4b78      	ldr	r3, [pc, #480]	; (8009600 <MX_LWIP_Init+0x238>)
 8009420:	781b      	ldrb	r3, [r3, #0]
 8009422:	061a      	lsls	r2, r3, #24
 8009424:	4b76      	ldr	r3, [pc, #472]	; (8009600 <MX_LWIP_Init+0x238>)
 8009426:	785b      	ldrb	r3, [r3, #1]
 8009428:	041b      	lsls	r3, r3, #16
 800942a:	431a      	orrs	r2, r3
 800942c:	4b74      	ldr	r3, [pc, #464]	; (8009600 <MX_LWIP_Init+0x238>)
 800942e:	789b      	ldrb	r3, [r3, #2]
 8009430:	021b      	lsls	r3, r3, #8
 8009432:	4313      	orrs	r3, r2
 8009434:	4a72      	ldr	r2, [pc, #456]	; (8009600 <MX_LWIP_Init+0x238>)
 8009436:	78d2      	ldrb	r2, [r2, #3]
 8009438:	4313      	orrs	r3, r2
 800943a:	061a      	lsls	r2, r3, #24
 800943c:	4b70      	ldr	r3, [pc, #448]	; (8009600 <MX_LWIP_Init+0x238>)
 800943e:	781b      	ldrb	r3, [r3, #0]
 8009440:	0619      	lsls	r1, r3, #24
 8009442:	4b6f      	ldr	r3, [pc, #444]	; (8009600 <MX_LWIP_Init+0x238>)
 8009444:	785b      	ldrb	r3, [r3, #1]
 8009446:	041b      	lsls	r3, r3, #16
 8009448:	4319      	orrs	r1, r3
 800944a:	4b6d      	ldr	r3, [pc, #436]	; (8009600 <MX_LWIP_Init+0x238>)
 800944c:	789b      	ldrb	r3, [r3, #2]
 800944e:	021b      	lsls	r3, r3, #8
 8009450:	430b      	orrs	r3, r1
 8009452:	496b      	ldr	r1, [pc, #428]	; (8009600 <MX_LWIP_Init+0x238>)
 8009454:	78c9      	ldrb	r1, [r1, #3]
 8009456:	430b      	orrs	r3, r1
 8009458:	021b      	lsls	r3, r3, #8
 800945a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800945e:	431a      	orrs	r2, r3
 8009460:	4b67      	ldr	r3, [pc, #412]	; (8009600 <MX_LWIP_Init+0x238>)
 8009462:	781b      	ldrb	r3, [r3, #0]
 8009464:	0619      	lsls	r1, r3, #24
 8009466:	4b66      	ldr	r3, [pc, #408]	; (8009600 <MX_LWIP_Init+0x238>)
 8009468:	785b      	ldrb	r3, [r3, #1]
 800946a:	041b      	lsls	r3, r3, #16
 800946c:	4319      	orrs	r1, r3
 800946e:	4b64      	ldr	r3, [pc, #400]	; (8009600 <MX_LWIP_Init+0x238>)
 8009470:	789b      	ldrb	r3, [r3, #2]
 8009472:	021b      	lsls	r3, r3, #8
 8009474:	430b      	orrs	r3, r1
 8009476:	4962      	ldr	r1, [pc, #392]	; (8009600 <MX_LWIP_Init+0x238>)
 8009478:	78c9      	ldrb	r1, [r1, #3]
 800947a:	430b      	orrs	r3, r1
 800947c:	0a1b      	lsrs	r3, r3, #8
 800947e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8009482:	431a      	orrs	r2, r3
 8009484:	4b5e      	ldr	r3, [pc, #376]	; (8009600 <MX_LWIP_Init+0x238>)
 8009486:	781b      	ldrb	r3, [r3, #0]
 8009488:	0619      	lsls	r1, r3, #24
 800948a:	4b5d      	ldr	r3, [pc, #372]	; (8009600 <MX_LWIP_Init+0x238>)
 800948c:	785b      	ldrb	r3, [r3, #1]
 800948e:	041b      	lsls	r3, r3, #16
 8009490:	4319      	orrs	r1, r3
 8009492:	4b5b      	ldr	r3, [pc, #364]	; (8009600 <MX_LWIP_Init+0x238>)
 8009494:	789b      	ldrb	r3, [r3, #2]
 8009496:	021b      	lsls	r3, r3, #8
 8009498:	430b      	orrs	r3, r1
 800949a:	4959      	ldr	r1, [pc, #356]	; (8009600 <MX_LWIP_Init+0x238>)
 800949c:	78c9      	ldrb	r1, [r1, #3]
 800949e:	430b      	orrs	r3, r1
 80094a0:	0e1b      	lsrs	r3, r3, #24
 80094a2:	4313      	orrs	r3, r2
 80094a4:	4a59      	ldr	r2, [pc, #356]	; (800960c <MX_LWIP_Init+0x244>)
 80094a6:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 80094a8:	4b56      	ldr	r3, [pc, #344]	; (8009604 <MX_LWIP_Init+0x23c>)
 80094aa:	781b      	ldrb	r3, [r3, #0]
 80094ac:	061a      	lsls	r2, r3, #24
 80094ae:	4b55      	ldr	r3, [pc, #340]	; (8009604 <MX_LWIP_Init+0x23c>)
 80094b0:	785b      	ldrb	r3, [r3, #1]
 80094b2:	041b      	lsls	r3, r3, #16
 80094b4:	431a      	orrs	r2, r3
 80094b6:	4b53      	ldr	r3, [pc, #332]	; (8009604 <MX_LWIP_Init+0x23c>)
 80094b8:	789b      	ldrb	r3, [r3, #2]
 80094ba:	021b      	lsls	r3, r3, #8
 80094bc:	4313      	orrs	r3, r2
 80094be:	4a51      	ldr	r2, [pc, #324]	; (8009604 <MX_LWIP_Init+0x23c>)
 80094c0:	78d2      	ldrb	r2, [r2, #3]
 80094c2:	4313      	orrs	r3, r2
 80094c4:	061a      	lsls	r2, r3, #24
 80094c6:	4b4f      	ldr	r3, [pc, #316]	; (8009604 <MX_LWIP_Init+0x23c>)
 80094c8:	781b      	ldrb	r3, [r3, #0]
 80094ca:	0619      	lsls	r1, r3, #24
 80094cc:	4b4d      	ldr	r3, [pc, #308]	; (8009604 <MX_LWIP_Init+0x23c>)
 80094ce:	785b      	ldrb	r3, [r3, #1]
 80094d0:	041b      	lsls	r3, r3, #16
 80094d2:	4319      	orrs	r1, r3
 80094d4:	4b4b      	ldr	r3, [pc, #300]	; (8009604 <MX_LWIP_Init+0x23c>)
 80094d6:	789b      	ldrb	r3, [r3, #2]
 80094d8:	021b      	lsls	r3, r3, #8
 80094da:	430b      	orrs	r3, r1
 80094dc:	4949      	ldr	r1, [pc, #292]	; (8009604 <MX_LWIP_Init+0x23c>)
 80094de:	78c9      	ldrb	r1, [r1, #3]
 80094e0:	430b      	orrs	r3, r1
 80094e2:	021b      	lsls	r3, r3, #8
 80094e4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80094e8:	431a      	orrs	r2, r3
 80094ea:	4b46      	ldr	r3, [pc, #280]	; (8009604 <MX_LWIP_Init+0x23c>)
 80094ec:	781b      	ldrb	r3, [r3, #0]
 80094ee:	0619      	lsls	r1, r3, #24
 80094f0:	4b44      	ldr	r3, [pc, #272]	; (8009604 <MX_LWIP_Init+0x23c>)
 80094f2:	785b      	ldrb	r3, [r3, #1]
 80094f4:	041b      	lsls	r3, r3, #16
 80094f6:	4319      	orrs	r1, r3
 80094f8:	4b42      	ldr	r3, [pc, #264]	; (8009604 <MX_LWIP_Init+0x23c>)
 80094fa:	789b      	ldrb	r3, [r3, #2]
 80094fc:	021b      	lsls	r3, r3, #8
 80094fe:	430b      	orrs	r3, r1
 8009500:	4940      	ldr	r1, [pc, #256]	; (8009604 <MX_LWIP_Init+0x23c>)
 8009502:	78c9      	ldrb	r1, [r1, #3]
 8009504:	430b      	orrs	r3, r1
 8009506:	0a1b      	lsrs	r3, r3, #8
 8009508:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800950c:	431a      	orrs	r2, r3
 800950e:	4b3d      	ldr	r3, [pc, #244]	; (8009604 <MX_LWIP_Init+0x23c>)
 8009510:	781b      	ldrb	r3, [r3, #0]
 8009512:	0619      	lsls	r1, r3, #24
 8009514:	4b3b      	ldr	r3, [pc, #236]	; (8009604 <MX_LWIP_Init+0x23c>)
 8009516:	785b      	ldrb	r3, [r3, #1]
 8009518:	041b      	lsls	r3, r3, #16
 800951a:	4319      	orrs	r1, r3
 800951c:	4b39      	ldr	r3, [pc, #228]	; (8009604 <MX_LWIP_Init+0x23c>)
 800951e:	789b      	ldrb	r3, [r3, #2]
 8009520:	021b      	lsls	r3, r3, #8
 8009522:	430b      	orrs	r3, r1
 8009524:	4937      	ldr	r1, [pc, #220]	; (8009604 <MX_LWIP_Init+0x23c>)
 8009526:	78c9      	ldrb	r1, [r1, #3]
 8009528:	430b      	orrs	r3, r1
 800952a:	0e1b      	lsrs	r3, r3, #24
 800952c:	4313      	orrs	r3, r2
 800952e:	4a38      	ldr	r2, [pc, #224]	; (8009610 <MX_LWIP_Init+0x248>)
 8009530:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 8009532:	4b35      	ldr	r3, [pc, #212]	; (8009608 <MX_LWIP_Init+0x240>)
 8009534:	781b      	ldrb	r3, [r3, #0]
 8009536:	061a      	lsls	r2, r3, #24
 8009538:	4b33      	ldr	r3, [pc, #204]	; (8009608 <MX_LWIP_Init+0x240>)
 800953a:	785b      	ldrb	r3, [r3, #1]
 800953c:	041b      	lsls	r3, r3, #16
 800953e:	431a      	orrs	r2, r3
 8009540:	4b31      	ldr	r3, [pc, #196]	; (8009608 <MX_LWIP_Init+0x240>)
 8009542:	789b      	ldrb	r3, [r3, #2]
 8009544:	021b      	lsls	r3, r3, #8
 8009546:	4313      	orrs	r3, r2
 8009548:	4a2f      	ldr	r2, [pc, #188]	; (8009608 <MX_LWIP_Init+0x240>)
 800954a:	78d2      	ldrb	r2, [r2, #3]
 800954c:	4313      	orrs	r3, r2
 800954e:	061a      	lsls	r2, r3, #24
 8009550:	4b2d      	ldr	r3, [pc, #180]	; (8009608 <MX_LWIP_Init+0x240>)
 8009552:	781b      	ldrb	r3, [r3, #0]
 8009554:	0619      	lsls	r1, r3, #24
 8009556:	4b2c      	ldr	r3, [pc, #176]	; (8009608 <MX_LWIP_Init+0x240>)
 8009558:	785b      	ldrb	r3, [r3, #1]
 800955a:	041b      	lsls	r3, r3, #16
 800955c:	4319      	orrs	r1, r3
 800955e:	4b2a      	ldr	r3, [pc, #168]	; (8009608 <MX_LWIP_Init+0x240>)
 8009560:	789b      	ldrb	r3, [r3, #2]
 8009562:	021b      	lsls	r3, r3, #8
 8009564:	430b      	orrs	r3, r1
 8009566:	4928      	ldr	r1, [pc, #160]	; (8009608 <MX_LWIP_Init+0x240>)
 8009568:	78c9      	ldrb	r1, [r1, #3]
 800956a:	430b      	orrs	r3, r1
 800956c:	021b      	lsls	r3, r3, #8
 800956e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8009572:	431a      	orrs	r2, r3
 8009574:	4b24      	ldr	r3, [pc, #144]	; (8009608 <MX_LWIP_Init+0x240>)
 8009576:	781b      	ldrb	r3, [r3, #0]
 8009578:	0619      	lsls	r1, r3, #24
 800957a:	4b23      	ldr	r3, [pc, #140]	; (8009608 <MX_LWIP_Init+0x240>)
 800957c:	785b      	ldrb	r3, [r3, #1]
 800957e:	041b      	lsls	r3, r3, #16
 8009580:	4319      	orrs	r1, r3
 8009582:	4b21      	ldr	r3, [pc, #132]	; (8009608 <MX_LWIP_Init+0x240>)
 8009584:	789b      	ldrb	r3, [r3, #2]
 8009586:	021b      	lsls	r3, r3, #8
 8009588:	430b      	orrs	r3, r1
 800958a:	491f      	ldr	r1, [pc, #124]	; (8009608 <MX_LWIP_Init+0x240>)
 800958c:	78c9      	ldrb	r1, [r1, #3]
 800958e:	430b      	orrs	r3, r1
 8009590:	0a1b      	lsrs	r3, r3, #8
 8009592:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8009596:	431a      	orrs	r2, r3
 8009598:	4b1b      	ldr	r3, [pc, #108]	; (8009608 <MX_LWIP_Init+0x240>)
 800959a:	781b      	ldrb	r3, [r3, #0]
 800959c:	0619      	lsls	r1, r3, #24
 800959e:	4b1a      	ldr	r3, [pc, #104]	; (8009608 <MX_LWIP_Init+0x240>)
 80095a0:	785b      	ldrb	r3, [r3, #1]
 80095a2:	041b      	lsls	r3, r3, #16
 80095a4:	4319      	orrs	r1, r3
 80095a6:	4b18      	ldr	r3, [pc, #96]	; (8009608 <MX_LWIP_Init+0x240>)
 80095a8:	789b      	ldrb	r3, [r3, #2]
 80095aa:	021b      	lsls	r3, r3, #8
 80095ac:	430b      	orrs	r3, r1
 80095ae:	4916      	ldr	r1, [pc, #88]	; (8009608 <MX_LWIP_Init+0x240>)
 80095b0:	78c9      	ldrb	r1, [r1, #3]
 80095b2:	430b      	orrs	r3, r1
 80095b4:	0e1b      	lsrs	r3, r3, #24
 80095b6:	4313      	orrs	r3, r2
 80095b8:	4a16      	ldr	r2, [pc, #88]	; (8009614 <MX_LWIP_Init+0x24c>)
 80095ba:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) with RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 80095bc:	4b16      	ldr	r3, [pc, #88]	; (8009618 <MX_LWIP_Init+0x250>)
 80095be:	9302      	str	r3, [sp, #8]
 80095c0:	4b16      	ldr	r3, [pc, #88]	; (800961c <MX_LWIP_Init+0x254>)
 80095c2:	9301      	str	r3, [sp, #4]
 80095c4:	2300      	movs	r3, #0
 80095c6:	9300      	str	r3, [sp, #0]
 80095c8:	4b12      	ldr	r3, [pc, #72]	; (8009614 <MX_LWIP_Init+0x24c>)
 80095ca:	4a11      	ldr	r2, [pc, #68]	; (8009610 <MX_LWIP_Init+0x248>)
 80095cc:	490f      	ldr	r1, [pc, #60]	; (800960c <MX_LWIP_Init+0x244>)
 80095ce:	4814      	ldr	r0, [pc, #80]	; (8009620 <MX_LWIP_Init+0x258>)
 80095d0:	f007 fc7a 	bl	8010ec8 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 80095d4:	4812      	ldr	r0, [pc, #72]	; (8009620 <MX_LWIP_Init+0x258>)
 80095d6:	f007 fd57 	bl	8011088 <netif_set_default>

  if (netif_is_link_up(&gnetif))
 80095da:	4b11      	ldr	r3, [pc, #68]	; (8009620 <MX_LWIP_Init+0x258>)
 80095dc:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80095e0:	089b      	lsrs	r3, r3, #2
 80095e2:	f003 0301 	and.w	r3, r3, #1
 80095e6:	b2db      	uxtb	r3, r3
 80095e8:	2b00      	cmp	r3, #0
 80095ea:	d003      	beq.n	80095f4 <MX_LWIP_Init+0x22c>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 80095ec:	480c      	ldr	r0, [pc, #48]	; (8009620 <MX_LWIP_Init+0x258>)
 80095ee:	f007 fd5b 	bl	80110a8 <netif_set_up>
  }

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 80095f2:	e002      	b.n	80095fa <MX_LWIP_Init+0x232>
    netif_set_down(&gnetif);
 80095f4:	480a      	ldr	r0, [pc, #40]	; (8009620 <MX_LWIP_Init+0x258>)
 80095f6:	f007 fd9b 	bl	8011130 <netif_set_down>
}
 80095fa:	bf00      	nop
 80095fc:	46bd      	mov	sp, r7
 80095fe:	bd80      	pop	{r7, pc}
 8009600:	200044fc 	.word	0x200044fc
 8009604:	200044f8 	.word	0x200044f8
 8009608:	200044b8 	.word	0x200044b8
 800960c:	200044f4 	.word	0x200044f4
 8009610:	20004500 	.word	0x20004500
 8009614:	20004504 	.word	0x20004504
 8009618:	0801044d 	.word	0x0801044d
 800961c:	08009c71 	.word	0x08009c71
 8009620:	200044bc 	.word	0x200044bc

08009624 <HAL_ETH_MspInit>:
/* USER CODE END 3 */

/* Private functions ---------------------------------------------------------*/

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8009624:	b580      	push	{r7, lr}
 8009626:	b08e      	sub	sp, #56	; 0x38
 8009628:	af00      	add	r7, sp, #0
 800962a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800962c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009630:	2200      	movs	r2, #0
 8009632:	601a      	str	r2, [r3, #0]
 8009634:	605a      	str	r2, [r3, #4]
 8009636:	609a      	str	r2, [r3, #8]
 8009638:	60da      	str	r2, [r3, #12]
 800963a:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	681b      	ldr	r3, [r3, #0]
 8009640:	4a59      	ldr	r2, [pc, #356]	; (80097a8 <HAL_ETH_MspInit+0x184>)
 8009642:	4293      	cmp	r3, r2
 8009644:	f040 80ac 	bne.w	80097a0 <HAL_ETH_MspInit+0x17c>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 8009648:	2300      	movs	r3, #0
 800964a:	623b      	str	r3, [r7, #32]
 800964c:	4b57      	ldr	r3, [pc, #348]	; (80097ac <HAL_ETH_MspInit+0x188>)
 800964e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009650:	4a56      	ldr	r2, [pc, #344]	; (80097ac <HAL_ETH_MspInit+0x188>)
 8009652:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8009656:	6313      	str	r3, [r2, #48]	; 0x30
 8009658:	4b54      	ldr	r3, [pc, #336]	; (80097ac <HAL_ETH_MspInit+0x188>)
 800965a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800965c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009660:	623b      	str	r3, [r7, #32]
 8009662:	6a3b      	ldr	r3, [r7, #32]
 8009664:	2300      	movs	r3, #0
 8009666:	61fb      	str	r3, [r7, #28]
 8009668:	4b50      	ldr	r3, [pc, #320]	; (80097ac <HAL_ETH_MspInit+0x188>)
 800966a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800966c:	4a4f      	ldr	r2, [pc, #316]	; (80097ac <HAL_ETH_MspInit+0x188>)
 800966e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8009672:	6313      	str	r3, [r2, #48]	; 0x30
 8009674:	4b4d      	ldr	r3, [pc, #308]	; (80097ac <HAL_ETH_MspInit+0x188>)
 8009676:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009678:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800967c:	61fb      	str	r3, [r7, #28]
 800967e:	69fb      	ldr	r3, [r7, #28]
 8009680:	2300      	movs	r3, #0
 8009682:	61bb      	str	r3, [r7, #24]
 8009684:	4b49      	ldr	r3, [pc, #292]	; (80097ac <HAL_ETH_MspInit+0x188>)
 8009686:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009688:	4a48      	ldr	r2, [pc, #288]	; (80097ac <HAL_ETH_MspInit+0x188>)
 800968a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800968e:	6313      	str	r3, [r2, #48]	; 0x30
 8009690:	4b46      	ldr	r3, [pc, #280]	; (80097ac <HAL_ETH_MspInit+0x188>)
 8009692:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009694:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009698:	61bb      	str	r3, [r7, #24]
 800969a:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800969c:	2300      	movs	r3, #0
 800969e:	617b      	str	r3, [r7, #20]
 80096a0:	4b42      	ldr	r3, [pc, #264]	; (80097ac <HAL_ETH_MspInit+0x188>)
 80096a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80096a4:	4a41      	ldr	r2, [pc, #260]	; (80097ac <HAL_ETH_MspInit+0x188>)
 80096a6:	f043 0304 	orr.w	r3, r3, #4
 80096aa:	6313      	str	r3, [r2, #48]	; 0x30
 80096ac:	4b3f      	ldr	r3, [pc, #252]	; (80097ac <HAL_ETH_MspInit+0x188>)
 80096ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80096b0:	f003 0304 	and.w	r3, r3, #4
 80096b4:	617b      	str	r3, [r7, #20]
 80096b6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80096b8:	2300      	movs	r3, #0
 80096ba:	613b      	str	r3, [r7, #16]
 80096bc:	4b3b      	ldr	r3, [pc, #236]	; (80097ac <HAL_ETH_MspInit+0x188>)
 80096be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80096c0:	4a3a      	ldr	r2, [pc, #232]	; (80097ac <HAL_ETH_MspInit+0x188>)
 80096c2:	f043 0301 	orr.w	r3, r3, #1
 80096c6:	6313      	str	r3, [r2, #48]	; 0x30
 80096c8:	4b38      	ldr	r3, [pc, #224]	; (80097ac <HAL_ETH_MspInit+0x188>)
 80096ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80096cc:	f003 0301 	and.w	r3, r3, #1
 80096d0:	613b      	str	r3, [r7, #16]
 80096d2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80096d4:	2300      	movs	r3, #0
 80096d6:	60fb      	str	r3, [r7, #12]
 80096d8:	4b34      	ldr	r3, [pc, #208]	; (80097ac <HAL_ETH_MspInit+0x188>)
 80096da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80096dc:	4a33      	ldr	r2, [pc, #204]	; (80097ac <HAL_ETH_MspInit+0x188>)
 80096de:	f043 0302 	orr.w	r3, r3, #2
 80096e2:	6313      	str	r3, [r2, #48]	; 0x30
 80096e4:	4b31      	ldr	r3, [pc, #196]	; (80097ac <HAL_ETH_MspInit+0x188>)
 80096e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80096e8:	f003 0302 	and.w	r3, r3, #2
 80096ec:	60fb      	str	r3, [r7, #12]
 80096ee:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80096f0:	2300      	movs	r3, #0
 80096f2:	60bb      	str	r3, [r7, #8]
 80096f4:	4b2d      	ldr	r3, [pc, #180]	; (80097ac <HAL_ETH_MspInit+0x188>)
 80096f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80096f8:	4a2c      	ldr	r2, [pc, #176]	; (80097ac <HAL_ETH_MspInit+0x188>)
 80096fa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80096fe:	6313      	str	r3, [r2, #48]	; 0x30
 8009700:	4b2a      	ldr	r3, [pc, #168]	; (80097ac <HAL_ETH_MspInit+0x188>)
 8009702:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009704:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009708:	60bb      	str	r3, [r7, #8]
 800970a:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0 
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 800970c:	2332      	movs	r3, #50	; 0x32
 800970e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009710:	2302      	movs	r3, #2
 8009712:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009714:	2300      	movs	r3, #0
 8009716:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009718:	2303      	movs	r3, #3
 800971a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800971c:	230b      	movs	r3, #11
 800971e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8009720:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009724:	4619      	mov	r1, r3
 8009726:	4822      	ldr	r0, [pc, #136]	; (80097b0 <HAL_ETH_MspInit+0x18c>)
 8009728:	f7fa fa0a 	bl	8003b40 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 800972c:	2386      	movs	r3, #134	; 0x86
 800972e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009730:	2302      	movs	r3, #2
 8009732:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009734:	2300      	movs	r3, #0
 8009736:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009738:	2303      	movs	r3, #3
 800973a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800973c:	230b      	movs	r3, #11
 800973e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009740:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009744:	4619      	mov	r1, r3
 8009746:	481b      	ldr	r0, [pc, #108]	; (80097b4 <HAL_ETH_MspInit+0x190>)
 8009748:	f7fa f9fa 	bl	8003b40 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 800974c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8009750:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009752:	2302      	movs	r3, #2
 8009754:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009756:	2300      	movs	r3, #0
 8009758:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800975a:	2303      	movs	r3, #3
 800975c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800975e:	230b      	movs	r3, #11
 8009760:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8009762:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009766:	4619      	mov	r1, r3
 8009768:	4813      	ldr	r0, [pc, #76]	; (80097b8 <HAL_ETH_MspInit+0x194>)
 800976a:	f7fa f9e9 	bl	8003b40 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 800976e:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8009772:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009774:	2302      	movs	r3, #2
 8009776:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009778:	2300      	movs	r3, #0
 800977a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800977c:	2303      	movs	r3, #3
 800977e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8009780:	230b      	movs	r3, #11
 8009782:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8009784:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009788:	4619      	mov	r1, r3
 800978a:	480c      	ldr	r0, [pc, #48]	; (80097bc <HAL_ETH_MspInit+0x198>)
 800978c:	f7fa f9d8 	bl	8003b40 <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(ETH_IRQn, 5, 0);
 8009790:	2200      	movs	r2, #0
 8009792:	2105      	movs	r1, #5
 8009794:	203d      	movs	r0, #61	; 0x3d
 8009796:	f7f9 f975 	bl	8002a84 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 800979a:	203d      	movs	r0, #61	; 0x3d
 800979c:	f7f9 f98e 	bl	8002abc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 80097a0:	bf00      	nop
 80097a2:	3738      	adds	r7, #56	; 0x38
 80097a4:	46bd      	mov	sp, r7
 80097a6:	bd80      	pop	{r7, pc}
 80097a8:	40028000 	.word	0x40028000
 80097ac:	40023800 	.word	0x40023800
 80097b0:	40020800 	.word	0x40020800
 80097b4:	40020000 	.word	0x40020000
 80097b8:	40020400 	.word	0x40020400
 80097bc:	40021800 	.word	0x40021800

080097c0 <HAL_ETH_RxCpltCallback>:
  * @brief  Ethernet Rx Transfer completed callback
  * @param  heth: ETH handle
  * @retval None
  */
void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *heth)
{
 80097c0:	b580      	push	{r7, lr}
 80097c2:	b082      	sub	sp, #8
 80097c4:	af00      	add	r7, sp, #0
 80097c6:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(s_xSemaphore);
 80097c8:	4b04      	ldr	r3, [pc, #16]	; (80097dc <HAL_ETH_RxCpltCallback+0x1c>)
 80097ca:	681b      	ldr	r3, [r3, #0]
 80097cc:	4618      	mov	r0, r3
 80097ce:	f001 ff4d 	bl	800b66c <osSemaphoreRelease>
}
 80097d2:	bf00      	nop
 80097d4:	3708      	adds	r7, #8
 80097d6:	46bd      	mov	sp, r7
 80097d8:	bd80      	pop	{r7, pc}
 80097da:	bf00      	nop
 80097dc:	20000460 	.word	0x20000460

080097e0 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{ 
 80097e0:	b5b0      	push	{r4, r5, r7, lr}
 80097e2:	b090      	sub	sp, #64	; 0x40
 80097e4:	af00      	add	r7, sp, #0
 80097e6:	6078      	str	r0, [r7, #4]
  uint32_t regvalue = 0;
 80097e8:	2300      	movs	r3, #0
 80097ea:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_StatusTypeDef hal_eth_init_status;
  
/* Init ETH */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 80097ec:	4b5c      	ldr	r3, [pc, #368]	; (8009960 <low_level_init+0x180>)
 80097ee:	4a5d      	ldr	r2, [pc, #372]	; (8009964 <low_level_init+0x184>)
 80097f0:	601a      	str	r2, [r3, #0]
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 80097f2:	4b5b      	ldr	r3, [pc, #364]	; (8009960 <low_level_init+0x180>)
 80097f4:	2201      	movs	r2, #1
 80097f6:	605a      	str	r2, [r3, #4]
  heth.Init.PhyAddress = LAN8742A_PHY_ADDRESS;
 80097f8:	4b59      	ldr	r3, [pc, #356]	; (8009960 <low_level_init+0x180>)
 80097fa:	2200      	movs	r2, #0
 80097fc:	821a      	strh	r2, [r3, #16]
  MACAddr[0] = 0x00;
 80097fe:	2300      	movs	r3, #0
 8009800:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  MACAddr[1] = 0x80;
 8009804:	2380      	movs	r3, #128	; 0x80
 8009806:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  MACAddr[2] = 0xE1;
 800980a:	23e1      	movs	r3, #225	; 0xe1
 800980c:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  MACAddr[3] = 0x00;
 8009810:	2300      	movs	r3, #0
 8009812:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  MACAddr[4] = 0x00;
 8009816:	2300      	movs	r3, #0
 8009818:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  MACAddr[5] = 0x00;
 800981c:	2300      	movs	r3, #0
 800981e:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  heth.Init.MACAddr = &MACAddr[0];
 8009822:	4a4f      	ldr	r2, [pc, #316]	; (8009960 <low_level_init+0x180>)
 8009824:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8009828:	6153      	str	r3, [r2, #20]
  heth.Init.RxMode = ETH_RXINTERRUPT_MODE;
 800982a:	4b4d      	ldr	r3, [pc, #308]	; (8009960 <low_level_init+0x180>)
 800982c:	2201      	movs	r2, #1
 800982e:	619a      	str	r2, [r3, #24]
  heth.Init.ChecksumMode = ETH_CHECKSUM_BY_HARDWARE;
 8009830:	4b4b      	ldr	r3, [pc, #300]	; (8009960 <low_level_init+0x180>)
 8009832:	2200      	movs	r2, #0
 8009834:	61da      	str	r2, [r3, #28]
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 8009836:	4b4a      	ldr	r3, [pc, #296]	; (8009960 <low_level_init+0x180>)
 8009838:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800983c:	621a      	str	r2, [r3, #32]

  /* USER CODE BEGIN MACADDRESS */
    
  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 800983e:	4848      	ldr	r0, [pc, #288]	; (8009960 <low_level_init+0x180>)
 8009840:	f7f9 f96c 	bl	8002b1c <HAL_ETH_Init>
 8009844:	4603      	mov	r3, r0
 8009846:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

  if (hal_eth_init_status == HAL_OK)
 800984a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800984e:	2b00      	cmp	r3, #0
 8009850:	d108      	bne.n	8009864 <low_level_init+0x84>
  {
    /* Set netif link flag */  
    netif->flags |= NETIF_FLAG_LINK_UP;
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8009858:	f043 0304 	orr.w	r3, r3, #4
 800985c:	b2da      	uxtb	r2, r3
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
  }
  /* Initialize Tx Descriptors list: Chain Mode */
  HAL_ETH_DMATxDescListInit(&heth, DMATxDscrTab, &Tx_Buff[0][0], ETH_TXBUFNB);
 8009864:	2304      	movs	r3, #4
 8009866:	4a40      	ldr	r2, [pc, #256]	; (8009968 <low_level_init+0x188>)
 8009868:	4940      	ldr	r1, [pc, #256]	; (800996c <low_level_init+0x18c>)
 800986a:	483d      	ldr	r0, [pc, #244]	; (8009960 <low_level_init+0x180>)
 800986c:	f7f9 faf4 	bl	8002e58 <HAL_ETH_DMATxDescListInit>
     
  /* Initialize Rx Descriptors list: Chain Mode  */
  HAL_ETH_DMARxDescListInit(&heth, DMARxDscrTab, &Rx_Buff[0][0], ETH_RXBUFNB);
 8009870:	2304      	movs	r3, #4
 8009872:	4a3f      	ldr	r2, [pc, #252]	; (8009970 <low_level_init+0x190>)
 8009874:	493f      	ldr	r1, [pc, #252]	; (8009974 <low_level_init+0x194>)
 8009876:	483a      	ldr	r0, [pc, #232]	; (8009960 <low_level_init+0x180>)
 8009878:	f7f9 fb57 	bl	8002f2a <HAL_ETH_DMARxDescListInit>
 
#if LWIP_ARP || LWIP_ETHERNET 

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	2206      	movs	r2, #6
 8009880:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  
  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 8009884:	4b36      	ldr	r3, [pc, #216]	; (8009960 <low_level_init+0x180>)
 8009886:	695b      	ldr	r3, [r3, #20]
 8009888:	781a      	ldrb	r2, [r3, #0]
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 8009890:	4b33      	ldr	r3, [pc, #204]	; (8009960 <low_level_init+0x180>)
 8009892:	695b      	ldr	r3, [r3, #20]
 8009894:	785a      	ldrb	r2, [r3, #1]
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 800989c:	4b30      	ldr	r3, [pc, #192]	; (8009960 <low_level_init+0x180>)
 800989e:	695b      	ldr	r3, [r3, #20]
 80098a0:	789a      	ldrb	r2, [r3, #2]
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 80098a8:	4b2d      	ldr	r3, [pc, #180]	; (8009960 <low_level_init+0x180>)
 80098aa:	695b      	ldr	r3, [r3, #20]
 80098ac:	78da      	ldrb	r2, [r3, #3]
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 80098b4:	4b2a      	ldr	r3, [pc, #168]	; (8009960 <low_level_init+0x180>)
 80098b6:	695b      	ldr	r3, [r3, #20]
 80098b8:	791a      	ldrb	r2, [r3, #4]
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 80098c0:	4b27      	ldr	r3, [pc, #156]	; (8009960 <low_level_init+0x180>)
 80098c2:	695b      	ldr	r3, [r3, #20]
 80098c4:	795a      	ldrb	r2, [r3, #5]
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  
  /* maximum transfer unit */
  netif->mtu = 1500;
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	f240 52dc 	movw	r2, #1500	; 0x5dc
 80098d2:	851a      	strh	r2, [r3, #40]	; 0x28
  
  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80098da:	f043 030a 	orr.w	r3, r3, #10
 80098de:	b2da      	uxtb	r2, r3
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
  #else 
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */
  
/* create a binary semaphore used for informing ethernetif of frame reception */
  osSemaphoreDef(SEM);
 80098e6:	2300      	movs	r3, #0
 80098e8:	62bb      	str	r3, [r7, #40]	; 0x28
 80098ea:	2300      	movs	r3, #0
 80098ec:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_xSemaphore = osSemaphoreCreate(osSemaphore(SEM), 1);
 80098ee:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80098f2:	2101      	movs	r1, #1
 80098f4:	4618      	mov	r0, r3
 80098f6:	f001 fe37 	bl	800b568 <osSemaphoreCreate>
 80098fa:	4602      	mov	r2, r0
 80098fc:	4b1e      	ldr	r3, [pc, #120]	; (8009978 <low_level_init+0x198>)
 80098fe:	601a      	str	r2, [r3, #0]

/* create the task that handles the ETH_MAC */
  osThreadDef(EthIf, ethernetif_input, osPriorityRealtime, 0, INTERFACE_THREAD_STACK_SIZE);
 8009900:	4b1e      	ldr	r3, [pc, #120]	; (800997c <low_level_init+0x19c>)
 8009902:	f107 040c 	add.w	r4, r7, #12
 8009906:	461d      	mov	r5, r3
 8009908:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800990a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800990c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8009910:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  osThreadCreate (osThread(EthIf), netif);
 8009914:	f107 030c 	add.w	r3, r7, #12
 8009918:	6879      	ldr	r1, [r7, #4]
 800991a:	4618      	mov	r0, r3
 800991c:	f001 fd27 	bl	800b36e <osThreadCreate>
  /* Enable MAC and DMA transmission and reception */
  HAL_ETH_Start(&heth);
 8009920:	480f      	ldr	r0, [pc, #60]	; (8009960 <low_level_init+0x180>)
 8009922:	f7f9 fe2a 	bl	800357a <HAL_ETH_Start>
    
/* USER CODE END PHY_PRE_CONFIG */
  

  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR, &regvalue);
 8009926:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800992a:	461a      	mov	r2, r3
 800992c:	211d      	movs	r1, #29
 800992e:	480c      	ldr	r0, [pc, #48]	; (8009960 <low_level_init+0x180>)
 8009930:	f7f9 fd55 	bl	80033de <HAL_ETH_ReadPHYRegister>
  regvalue |= (PHY_ISFR_INT4);
 8009934:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009936:	f043 030b 	orr.w	r3, r3, #11
 800993a:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Enable Interrupt on change of link status */ 
  HAL_ETH_WritePHYRegister(&heth, PHY_ISFR , regvalue );
 800993c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800993e:	461a      	mov	r2, r3
 8009940:	211d      	movs	r1, #29
 8009942:	4807      	ldr	r0, [pc, #28]	; (8009960 <low_level_init+0x180>)
 8009944:	f7f9 fdb3 	bl	80034ae <HAL_ETH_WritePHYRegister>
  
  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR , &regvalue);
 8009948:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800994c:	461a      	mov	r2, r3
 800994e:	211d      	movs	r1, #29
 8009950:	4803      	ldr	r0, [pc, #12]	; (8009960 <low_level_init+0x180>)
 8009952:	f7f9 fd44 	bl	80033de <HAL_ETH_ReadPHYRegister>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */ 
    
/* USER CODE END LOW_LEVEL_INIT */
}
 8009956:	bf00      	nop
 8009958:	3740      	adds	r7, #64	; 0x40
 800995a:	46bd      	mov	sp, r7
 800995c:	bdb0      	pop	{r4, r5, r7, pc}
 800995e:	bf00      	nop
 8009960:	20005dd8 	.word	0x20005dd8
 8009964:	40028000 	.word	0x40028000
 8009968:	20005e20 	.word	0x20005e20
 800996c:	20004508 	.word	0x20004508
 8009970:	20004588 	.word	0x20004588
 8009974:	20005d58 	.word	0x20005d58
 8009978:	20000460 	.word	0x20000460
 800997c:	0801bf6c 	.word	0x0801bf6c

08009980 <low_level_output>:
 *       to become availale since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 8009980:	b580      	push	{r7, lr}
 8009982:	b08a      	sub	sp, #40	; 0x28
 8009984:	af00      	add	r7, sp, #0
 8009986:	6078      	str	r0, [r7, #4]
 8009988:	6039      	str	r1, [r7, #0]
  err_t errval;
  struct pbuf *q;
  uint8_t *buffer = (uint8_t *)(heth.TxDesc->Buffer1Addr);
 800998a:	4b4b      	ldr	r3, [pc, #300]	; (8009ab8 <low_level_output+0x138>)
 800998c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800998e:	689b      	ldr	r3, [r3, #8]
 8009990:	61fb      	str	r3, [r7, #28]
  __IO ETH_DMADescTypeDef *DmaTxDesc;
  uint32_t framelength = 0;
 8009992:	2300      	movs	r3, #0
 8009994:	617b      	str	r3, [r7, #20]
  uint32_t bufferoffset = 0;
 8009996:	2300      	movs	r3, #0
 8009998:	613b      	str	r3, [r7, #16]
  uint32_t byteslefttocopy = 0;
 800999a:	2300      	movs	r3, #0
 800999c:	60fb      	str	r3, [r7, #12]
  uint32_t payloadoffset = 0;
 800999e:	2300      	movs	r3, #0
 80099a0:	60bb      	str	r3, [r7, #8]
  DmaTxDesc = heth.TxDesc;
 80099a2:	4b45      	ldr	r3, [pc, #276]	; (8009ab8 <low_level_output+0x138>)
 80099a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80099a6:	61bb      	str	r3, [r7, #24]
  bufferoffset = 0;
 80099a8:	2300      	movs	r3, #0
 80099aa:	613b      	str	r3, [r7, #16]
  
  /* copy frame from pbufs to driver buffers */
  for(q = p; q != NULL; q = q->next)
 80099ac:	683b      	ldr	r3, [r7, #0]
 80099ae:	623b      	str	r3, [r7, #32]
 80099b0:	e05a      	b.n	8009a68 <low_level_output+0xe8>
    {
      /* Is this buffer available? If not, goto error */
      if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 80099b2:	69bb      	ldr	r3, [r7, #24]
 80099b4:	681b      	ldr	r3, [r3, #0]
 80099b6:	2b00      	cmp	r3, #0
 80099b8:	da03      	bge.n	80099c2 <low_level_output+0x42>
      {
        errval = ERR_USE;
 80099ba:	23f8      	movs	r3, #248	; 0xf8
 80099bc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        goto error;
 80099c0:	e05c      	b.n	8009a7c <low_level_output+0xfc>
      }
    
      /* Get bytes in current lwIP buffer */
      byteslefttocopy = q->len;
 80099c2:	6a3b      	ldr	r3, [r7, #32]
 80099c4:	895b      	ldrh	r3, [r3, #10]
 80099c6:	60fb      	str	r3, [r7, #12]
      payloadoffset = 0;
 80099c8:	2300      	movs	r3, #0
 80099ca:	60bb      	str	r3, [r7, #8]
    
      /* Check if the length of data to copy is bigger than Tx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 80099cc:	e02f      	b.n	8009a2e <low_level_output+0xae>
      {
        /* Copy data to Tx buffer*/
        memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), (ETH_TX_BUF_SIZE - bufferoffset) );
 80099ce:	69fa      	ldr	r2, [r7, #28]
 80099d0:	693b      	ldr	r3, [r7, #16]
 80099d2:	18d0      	adds	r0, r2, r3
 80099d4:	6a3b      	ldr	r3, [r7, #32]
 80099d6:	685a      	ldr	r2, [r3, #4]
 80099d8:	68bb      	ldr	r3, [r7, #8]
 80099da:	18d1      	adds	r1, r2, r3
 80099dc:	693b      	ldr	r3, [r7, #16]
 80099de:	f5c3 63be 	rsb	r3, r3, #1520	; 0x5f0
 80099e2:	3304      	adds	r3, #4
 80099e4:	461a      	mov	r2, r3
 80099e6:	f011 f948 	bl	801ac7a <memcpy>
      
        /* Point to next descriptor */
        DmaTxDesc = (ETH_DMADescTypeDef *)(DmaTxDesc->Buffer2NextDescAddr);
 80099ea:	69bb      	ldr	r3, [r7, #24]
 80099ec:	68db      	ldr	r3, [r3, #12]
 80099ee:	61bb      	str	r3, [r7, #24]
      
        /* Check if the buffer is available */
        if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 80099f0:	69bb      	ldr	r3, [r7, #24]
 80099f2:	681b      	ldr	r3, [r3, #0]
 80099f4:	2b00      	cmp	r3, #0
 80099f6:	da03      	bge.n	8009a00 <low_level_output+0x80>
        {
          errval = ERR_USE;
 80099f8:	23f8      	movs	r3, #248	; 0xf8
 80099fa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          goto error;
 80099fe:	e03d      	b.n	8009a7c <low_level_output+0xfc>
        }
      
        buffer = (uint8_t *)(DmaTxDesc->Buffer1Addr);
 8009a00:	69bb      	ldr	r3, [r7, #24]
 8009a02:	689b      	ldr	r3, [r3, #8]
 8009a04:	61fb      	str	r3, [r7, #28]
      
        byteslefttocopy = byteslefttocopy - (ETH_TX_BUF_SIZE - bufferoffset);
 8009a06:	693a      	ldr	r2, [r7, #16]
 8009a08:	68fb      	ldr	r3, [r7, #12]
 8009a0a:	4413      	add	r3, r2
 8009a0c:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 8009a10:	60fb      	str	r3, [r7, #12]
        payloadoffset = payloadoffset + (ETH_TX_BUF_SIZE - bufferoffset);
 8009a12:	68ba      	ldr	r2, [r7, #8]
 8009a14:	693b      	ldr	r3, [r7, #16]
 8009a16:	1ad3      	subs	r3, r2, r3
 8009a18:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8009a1c:	60bb      	str	r3, [r7, #8]
        framelength = framelength + (ETH_TX_BUF_SIZE - bufferoffset);
 8009a1e:	697a      	ldr	r2, [r7, #20]
 8009a20:	693b      	ldr	r3, [r7, #16]
 8009a22:	1ad3      	subs	r3, r2, r3
 8009a24:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8009a28:	617b      	str	r3, [r7, #20]
        bufferoffset = 0;
 8009a2a:	2300      	movs	r3, #0
 8009a2c:	613b      	str	r3, [r7, #16]
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 8009a2e:	68fa      	ldr	r2, [r7, #12]
 8009a30:	693b      	ldr	r3, [r7, #16]
 8009a32:	4413      	add	r3, r2
 8009a34:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8009a38:	4293      	cmp	r3, r2
 8009a3a:	d8c8      	bhi.n	80099ce <low_level_output+0x4e>
      }
    
      /* Copy the remaining bytes */
      memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), byteslefttocopy );
 8009a3c:	69fa      	ldr	r2, [r7, #28]
 8009a3e:	693b      	ldr	r3, [r7, #16]
 8009a40:	18d0      	adds	r0, r2, r3
 8009a42:	6a3b      	ldr	r3, [r7, #32]
 8009a44:	685a      	ldr	r2, [r3, #4]
 8009a46:	68bb      	ldr	r3, [r7, #8]
 8009a48:	4413      	add	r3, r2
 8009a4a:	68fa      	ldr	r2, [r7, #12]
 8009a4c:	4619      	mov	r1, r3
 8009a4e:	f011 f914 	bl	801ac7a <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 8009a52:	693a      	ldr	r2, [r7, #16]
 8009a54:	68fb      	ldr	r3, [r7, #12]
 8009a56:	4413      	add	r3, r2
 8009a58:	613b      	str	r3, [r7, #16]
      framelength = framelength + byteslefttocopy;
 8009a5a:	697a      	ldr	r2, [r7, #20]
 8009a5c:	68fb      	ldr	r3, [r7, #12]
 8009a5e:	4413      	add	r3, r2
 8009a60:	617b      	str	r3, [r7, #20]
  for(q = p; q != NULL; q = q->next)
 8009a62:	6a3b      	ldr	r3, [r7, #32]
 8009a64:	681b      	ldr	r3, [r3, #0]
 8009a66:	623b      	str	r3, [r7, #32]
 8009a68:	6a3b      	ldr	r3, [r7, #32]
 8009a6a:	2b00      	cmp	r3, #0
 8009a6c:	d1a1      	bne.n	80099b2 <low_level_output+0x32>
    }
  
  /* Prepare transmit descriptors to give to DMA */ 
  HAL_ETH_TransmitFrame(&heth, framelength);
 8009a6e:	6979      	ldr	r1, [r7, #20]
 8009a70:	4811      	ldr	r0, [pc, #68]	; (8009ab8 <low_level_output+0x138>)
 8009a72:	f7f9 fac7 	bl	8003004 <HAL_ETH_TransmitFrame>
  
  errval = ERR_OK;
 8009a76:	2300      	movs	r3, #0
 8009a78:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  
error:
  
  /* When Transmit Underflow flag is set, clear it and issue a Transmit Poll Demand to resume transmission */
  if ((heth.Instance->DMASR & ETH_DMASR_TUS) != (uint32_t)RESET)
 8009a7c:	4b0e      	ldr	r3, [pc, #56]	; (8009ab8 <low_level_output+0x138>)
 8009a7e:	681b      	ldr	r3, [r3, #0]
 8009a80:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009a84:	3314      	adds	r3, #20
 8009a86:	681b      	ldr	r3, [r3, #0]
 8009a88:	f003 0320 	and.w	r3, r3, #32
 8009a8c:	2b00      	cmp	r3, #0
 8009a8e:	d00d      	beq.n	8009aac <low_level_output+0x12c>
  {
    /* Clear TUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_TUS;
 8009a90:	4b09      	ldr	r3, [pc, #36]	; (8009ab8 <low_level_output+0x138>)
 8009a92:	681b      	ldr	r3, [r3, #0]
 8009a94:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009a98:	3314      	adds	r3, #20
 8009a9a:	2220      	movs	r2, #32
 8009a9c:	601a      	str	r2, [r3, #0]

    /* Resume DMA transmission*/
    heth.Instance->DMATPDR = 0;
 8009a9e:	4b06      	ldr	r3, [pc, #24]	; (8009ab8 <low_level_output+0x138>)
 8009aa0:	681b      	ldr	r3, [r3, #0]
 8009aa2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009aa6:	3304      	adds	r3, #4
 8009aa8:	2200      	movs	r2, #0
 8009aaa:	601a      	str	r2, [r3, #0]
  }
  return errval;
 8009aac:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8009ab0:	4618      	mov	r0, r3
 8009ab2:	3728      	adds	r7, #40	; 0x28
 8009ab4:	46bd      	mov	sp, r7
 8009ab6:	bd80      	pop	{r7, pc}
 8009ab8:	20005dd8 	.word	0x20005dd8

08009abc <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 8009abc:	b580      	push	{r7, lr}
 8009abe:	b08c      	sub	sp, #48	; 0x30
 8009ac0:	af00      	add	r7, sp, #0
 8009ac2:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8009ac4:	2300      	movs	r3, #0
 8009ac6:	62fb      	str	r3, [r7, #44]	; 0x2c
  struct pbuf *q = NULL;
 8009ac8:	2300      	movs	r3, #0
 8009aca:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t len = 0;
 8009acc:	2300      	movs	r3, #0
 8009ace:	81fb      	strh	r3, [r7, #14]
  uint8_t *buffer;
  __IO ETH_DMADescTypeDef *dmarxdesc;
  uint32_t bufferoffset = 0;
 8009ad0:	2300      	movs	r3, #0
 8009ad2:	61fb      	str	r3, [r7, #28]
  uint32_t payloadoffset = 0;
 8009ad4:	2300      	movs	r3, #0
 8009ad6:	61bb      	str	r3, [r7, #24]
  uint32_t byteslefttocopy = 0;
 8009ad8:	2300      	movs	r3, #0
 8009ada:	617b      	str	r3, [r7, #20]
  uint32_t i=0;
 8009adc:	2300      	movs	r3, #0
 8009ade:	613b      	str	r3, [r7, #16]
  

  /* get received frame */
  if (HAL_ETH_GetReceivedFrame_IT(&heth) != HAL_OK)
 8009ae0:	484e      	ldr	r0, [pc, #312]	; (8009c1c <low_level_input+0x160>)
 8009ae2:	f7f9 fb79 	bl	80031d8 <HAL_ETH_GetReceivedFrame_IT>
 8009ae6:	4603      	mov	r3, r0
 8009ae8:	2b00      	cmp	r3, #0
 8009aea:	d001      	beq.n	8009af0 <low_level_input+0x34>
    return NULL;
 8009aec:	2300      	movs	r3, #0
 8009aee:	e091      	b.n	8009c14 <low_level_input+0x158>
  
  /* Obtain the size of the packet and put it into the "len" variable. */
  len = heth.RxFrameInfos.length;
 8009af0:	4b4a      	ldr	r3, [pc, #296]	; (8009c1c <low_level_input+0x160>)
 8009af2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009af4:	81fb      	strh	r3, [r7, #14]
  buffer = (uint8_t *)heth.RxFrameInfos.buffer;
 8009af6:	4b49      	ldr	r3, [pc, #292]	; (8009c1c <low_level_input+0x160>)
 8009af8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009afa:	627b      	str	r3, [r7, #36]	; 0x24
  
  if (len > 0)
 8009afc:	89fb      	ldrh	r3, [r7, #14]
 8009afe:	2b00      	cmp	r3, #0
 8009b00:	d006      	beq.n	8009b10 <low_level_input+0x54>
  {
    /* We allocate a pbuf chain of pbufs from the Lwip buffer pool */
    p = pbuf_alloc(PBUF_RAW, len, PBUF_POOL);
 8009b02:	89fb      	ldrh	r3, [r7, #14]
 8009b04:	2203      	movs	r2, #3
 8009b06:	4619      	mov	r1, r3
 8009b08:	2004      	movs	r0, #4
 8009b0a:	f007 fb93 	bl	8011234 <pbuf_alloc>
 8009b0e:	62f8      	str	r0, [r7, #44]	; 0x2c
  }
  
  if (p != NULL)
 8009b10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b12:	2b00      	cmp	r3, #0
 8009b14:	d04b      	beq.n	8009bae <low_level_input+0xf2>
  {
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 8009b16:	4b41      	ldr	r3, [pc, #260]	; (8009c1c <low_level_input+0x160>)
 8009b18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009b1a:	623b      	str	r3, [r7, #32]
    bufferoffset = 0;
 8009b1c:	2300      	movs	r3, #0
 8009b1e:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 8009b20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b22:	62bb      	str	r3, [r7, #40]	; 0x28
 8009b24:	e040      	b.n	8009ba8 <low_level_input+0xec>
    {
      byteslefttocopy = q->len;
 8009b26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b28:	895b      	ldrh	r3, [r3, #10]
 8009b2a:	617b      	str	r3, [r7, #20]
      payloadoffset = 0;
 8009b2c:	2300      	movs	r3, #0
 8009b2e:	61bb      	str	r3, [r7, #24]
      
      /* Check if the length of bytes to copy in current pbuf is bigger than Rx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 8009b30:	e021      	b.n	8009b76 <low_level_input+0xba>
      {
        /* Copy data to pbuf */
        memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), (ETH_RX_BUF_SIZE - bufferoffset));
 8009b32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b34:	685a      	ldr	r2, [r3, #4]
 8009b36:	69bb      	ldr	r3, [r7, #24]
 8009b38:	18d0      	adds	r0, r2, r3
 8009b3a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009b3c:	69fb      	ldr	r3, [r7, #28]
 8009b3e:	18d1      	adds	r1, r2, r3
 8009b40:	69fb      	ldr	r3, [r7, #28]
 8009b42:	f5c3 63be 	rsb	r3, r3, #1520	; 0x5f0
 8009b46:	3304      	adds	r3, #4
 8009b48:	461a      	mov	r2, r3
 8009b4a:	f011 f896 	bl	801ac7a <memcpy>
        
        /* Point to next descriptor */
        dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 8009b4e:	6a3b      	ldr	r3, [r7, #32]
 8009b50:	68db      	ldr	r3, [r3, #12]
 8009b52:	623b      	str	r3, [r7, #32]
        buffer = (uint8_t *)(dmarxdesc->Buffer1Addr);
 8009b54:	6a3b      	ldr	r3, [r7, #32]
 8009b56:	689b      	ldr	r3, [r3, #8]
 8009b58:	627b      	str	r3, [r7, #36]	; 0x24
        
        byteslefttocopy = byteslefttocopy - (ETH_RX_BUF_SIZE - bufferoffset);
 8009b5a:	69fa      	ldr	r2, [r7, #28]
 8009b5c:	697b      	ldr	r3, [r7, #20]
 8009b5e:	4413      	add	r3, r2
 8009b60:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 8009b64:	617b      	str	r3, [r7, #20]
        payloadoffset = payloadoffset + (ETH_RX_BUF_SIZE - bufferoffset);
 8009b66:	69ba      	ldr	r2, [r7, #24]
 8009b68:	69fb      	ldr	r3, [r7, #28]
 8009b6a:	1ad3      	subs	r3, r2, r3
 8009b6c:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8009b70:	61bb      	str	r3, [r7, #24]
        bufferoffset = 0;
 8009b72:	2300      	movs	r3, #0
 8009b74:	61fb      	str	r3, [r7, #28]
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 8009b76:	697a      	ldr	r2, [r7, #20]
 8009b78:	69fb      	ldr	r3, [r7, #28]
 8009b7a:	4413      	add	r3, r2
 8009b7c:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8009b80:	4293      	cmp	r3, r2
 8009b82:	d8d6      	bhi.n	8009b32 <low_level_input+0x76>
      }
      /* Copy remaining data in pbuf */
      memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), byteslefttocopy);
 8009b84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b86:	685a      	ldr	r2, [r3, #4]
 8009b88:	69bb      	ldr	r3, [r7, #24]
 8009b8a:	18d0      	adds	r0, r2, r3
 8009b8c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009b8e:	69fb      	ldr	r3, [r7, #28]
 8009b90:	4413      	add	r3, r2
 8009b92:	697a      	ldr	r2, [r7, #20]
 8009b94:	4619      	mov	r1, r3
 8009b96:	f011 f870 	bl	801ac7a <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 8009b9a:	69fa      	ldr	r2, [r7, #28]
 8009b9c:	697b      	ldr	r3, [r7, #20]
 8009b9e:	4413      	add	r3, r2
 8009ba0:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 8009ba2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ba4:	681b      	ldr	r3, [r3, #0]
 8009ba6:	62bb      	str	r3, [r7, #40]	; 0x28
 8009ba8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009baa:	2b00      	cmp	r3, #0
 8009bac:	d1bb      	bne.n	8009b26 <low_level_input+0x6a>
    }
  }  
  
    /* Release descriptors to DMA */
    /* Point to first descriptor */
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 8009bae:	4b1b      	ldr	r3, [pc, #108]	; (8009c1c <low_level_input+0x160>)
 8009bb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009bb2:	623b      	str	r3, [r7, #32]
    /* Set Own bit in Rx descriptors: gives the buffers back to DMA */
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 8009bb4:	2300      	movs	r3, #0
 8009bb6:	613b      	str	r3, [r7, #16]
 8009bb8:	e00b      	b.n	8009bd2 <low_level_input+0x116>
    {  
      dmarxdesc->Status |= ETH_DMARXDESC_OWN;
 8009bba:	6a3b      	ldr	r3, [r7, #32]
 8009bbc:	681b      	ldr	r3, [r3, #0]
 8009bbe:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8009bc2:	6a3b      	ldr	r3, [r7, #32]
 8009bc4:	601a      	str	r2, [r3, #0]
      dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 8009bc6:	6a3b      	ldr	r3, [r7, #32]
 8009bc8:	68db      	ldr	r3, [r3, #12]
 8009bca:	623b      	str	r3, [r7, #32]
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 8009bcc:	693b      	ldr	r3, [r7, #16]
 8009bce:	3301      	adds	r3, #1
 8009bd0:	613b      	str	r3, [r7, #16]
 8009bd2:	4b12      	ldr	r3, [pc, #72]	; (8009c1c <low_level_input+0x160>)
 8009bd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009bd6:	693a      	ldr	r2, [r7, #16]
 8009bd8:	429a      	cmp	r2, r3
 8009bda:	d3ee      	bcc.n	8009bba <low_level_input+0xfe>
    }
    
    /* Clear Segment_Count */
    heth.RxFrameInfos.SegCount =0;  
 8009bdc:	4b0f      	ldr	r3, [pc, #60]	; (8009c1c <low_level_input+0x160>)
 8009bde:	2200      	movs	r2, #0
 8009be0:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* When Rx Buffer unavailable flag is set: clear it and resume reception */
  if ((heth.Instance->DMASR & ETH_DMASR_RBUS) != (uint32_t)RESET)  
 8009be2:	4b0e      	ldr	r3, [pc, #56]	; (8009c1c <low_level_input+0x160>)
 8009be4:	681b      	ldr	r3, [r3, #0]
 8009be6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009bea:	3314      	adds	r3, #20
 8009bec:	681b      	ldr	r3, [r3, #0]
 8009bee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009bf2:	2b00      	cmp	r3, #0
 8009bf4:	d00d      	beq.n	8009c12 <low_level_input+0x156>
  {
    /* Clear RBUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_RBUS;
 8009bf6:	4b09      	ldr	r3, [pc, #36]	; (8009c1c <low_level_input+0x160>)
 8009bf8:	681b      	ldr	r3, [r3, #0]
 8009bfa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009bfe:	3314      	adds	r3, #20
 8009c00:	2280      	movs	r2, #128	; 0x80
 8009c02:	601a      	str	r2, [r3, #0]
    /* Resume DMA reception */
    heth.Instance->DMARPDR = 0;
 8009c04:	4b05      	ldr	r3, [pc, #20]	; (8009c1c <low_level_input+0x160>)
 8009c06:	681b      	ldr	r3, [r3, #0]
 8009c08:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009c0c:	3308      	adds	r3, #8
 8009c0e:	2200      	movs	r2, #0
 8009c10:	601a      	str	r2, [r3, #0]
  }
  return p;
 8009c12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8009c14:	4618      	mov	r0, r3
 8009c16:	3730      	adds	r7, #48	; 0x30
 8009c18:	46bd      	mov	sp, r7
 8009c1a:	bd80      	pop	{r7, pc}
 8009c1c:	20005dd8 	.word	0x20005dd8

08009c20 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(void const * argument)
{
 8009c20:	b580      	push	{r7, lr}
 8009c22:	b084      	sub	sp, #16
 8009c24:	af00      	add	r7, sp, #0
 8009c26:	6078      	str	r0, [r7, #4]
  struct pbuf *p;
  struct netif *netif = (struct netif *) argument;
 8009c28:	687b      	ldr	r3, [r7, #4]
 8009c2a:	60fb      	str	r3, [r7, #12]
  
  for( ;; )
  {
    if (osSemaphoreWait(s_xSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 8009c2c:	4b0f      	ldr	r3, [pc, #60]	; (8009c6c <ethernetif_input+0x4c>)
 8009c2e:	681b      	ldr	r3, [r3, #0]
 8009c30:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8009c34:	4618      	mov	r0, r3
 8009c36:	f001 fccb 	bl	800b5d0 <osSemaphoreWait>
 8009c3a:	4603      	mov	r3, r0
 8009c3c:	2b00      	cmp	r3, #0
 8009c3e:	d1f5      	bne.n	8009c2c <ethernetif_input+0xc>
    {
      do
      {   
        p = low_level_input( netif );
 8009c40:	68f8      	ldr	r0, [r7, #12]
 8009c42:	f7ff ff3b 	bl	8009abc <low_level_input>
 8009c46:	60b8      	str	r0, [r7, #8]
        if   (p != NULL)
 8009c48:	68bb      	ldr	r3, [r7, #8]
 8009c4a:	2b00      	cmp	r3, #0
 8009c4c:	d00a      	beq.n	8009c64 <ethernetif_input+0x44>
        {
          if (netif->input( p, netif) != ERR_OK )
 8009c4e:	68fb      	ldr	r3, [r7, #12]
 8009c50:	691b      	ldr	r3, [r3, #16]
 8009c52:	68f9      	ldr	r1, [r7, #12]
 8009c54:	68b8      	ldr	r0, [r7, #8]
 8009c56:	4798      	blx	r3
 8009c58:	4603      	mov	r3, r0
 8009c5a:	2b00      	cmp	r3, #0
 8009c5c:	d002      	beq.n	8009c64 <ethernetif_input+0x44>
          {
            pbuf_free(p);
 8009c5e:	68b8      	ldr	r0, [r7, #8]
 8009c60:	f007 fe5a 	bl	8011918 <pbuf_free>
          }
        }
      } while(p!=NULL);
 8009c64:	68bb      	ldr	r3, [r7, #8]
 8009c66:	2b00      	cmp	r3, #0
 8009c68:	d1ea      	bne.n	8009c40 <ethernetif_input+0x20>
    if (osSemaphoreWait(s_xSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 8009c6a:	e7df      	b.n	8009c2c <ethernetif_input+0xc>
 8009c6c:	20000460 	.word	0x20000460

08009c70 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 8009c70:	b580      	push	{r7, lr}
 8009c72:	b082      	sub	sp, #8
 8009c74:	af00      	add	r7, sp, #0
 8009c76:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	2b00      	cmp	r3, #0
 8009c7c:	d106      	bne.n	8009c8c <ethernetif_init+0x1c>
 8009c7e:	4b10      	ldr	r3, [pc, #64]	; (8009cc0 <ethernetif_init+0x50>)
 8009c80:	f240 222d 	movw	r2, #557	; 0x22d
 8009c84:	490f      	ldr	r1, [pc, #60]	; (8009cc4 <ethernetif_init+0x54>)
 8009c86:	4810      	ldr	r0, [pc, #64]	; (8009cc8 <ethernetif_init+0x58>)
 8009c88:	f011 f8b2 	bl	801adf0 <iprintf>
  
#if LWIP_NETIF_HOSTNAME
  /* Initialize interface hostname */
  netif->hostname = "lwip";
 8009c8c:	687b      	ldr	r3, [r7, #4]
 8009c8e:	4a0f      	ldr	r2, [pc, #60]	; (8009ccc <ethernetif_init+0x5c>)
 8009c90:	625a      	str	r2, [r3, #36]	; 0x24
#endif /* LWIP_NETIF_HOSTNAME */

  netif->name[0] = IFNAME0;
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	2273      	movs	r2, #115	; 0x73
 8009c96:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
  netif->name[1] = IFNAME1;
 8009c9a:	687b      	ldr	r3, [r7, #4]
 8009c9c:	2274      	movs	r2, #116	; 0x74
 8009c9e:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 8009ca2:	687b      	ldr	r3, [r7, #4]
 8009ca4:	4a0a      	ldr	r2, [pc, #40]	; (8009cd0 <ethernetif_init+0x60>)
 8009ca6:	615a      	str	r2, [r3, #20]
 
#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	4a0a      	ldr	r2, [pc, #40]	; (8009cd4 <ethernetif_init+0x64>)
 8009cac:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 8009cae:	6878      	ldr	r0, [r7, #4]
 8009cb0:	f7ff fd96 	bl	80097e0 <low_level_init>

  return ERR_OK;
 8009cb4:	2300      	movs	r3, #0
}
 8009cb6:	4618      	mov	r0, r3
 8009cb8:	3708      	adds	r7, #8
 8009cba:	46bd      	mov	sp, r7
 8009cbc:	bd80      	pop	{r7, pc}
 8009cbe:	bf00      	nop
 8009cc0:	0801bf88 	.word	0x0801bf88
 8009cc4:	0801bfa4 	.word	0x0801bfa4
 8009cc8:	0801bfb4 	.word	0x0801bfb4
 8009ccc:	0801bfdc 	.word	0x0801bfdc
 8009cd0:	0801827d 	.word	0x0801827d
 8009cd4:	08009981 	.word	0x08009981

08009cd8 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Time
*/
u32_t sys_now(void)
{
 8009cd8:	b580      	push	{r7, lr}
 8009cda:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8009cdc:	f7f8 fdec 	bl	80028b8 <HAL_GetTick>
 8009ce0:	4603      	mov	r3, r0
}
 8009ce2:	4618      	mov	r0, r3
 8009ce4:	bd80      	pop	{r7, pc}

08009ce6 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init (USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009ce6:	b580      	push	{r7, lr}
 8009ce8:	b084      	sub	sp, #16
 8009cea:	af00      	add	r7, sp, #0
 8009cec:	6078      	str	r0, [r7, #4]
 8009cee:	460b      	mov	r3, r1
 8009cf0:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8009cf2:	2300      	movs	r3, #0
 8009cf4:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if(pdev->dev_speed == USBD_SPEED_HIGH)
 8009cf6:	687b      	ldr	r3, [r7, #4]
 8009cf8:	7c1b      	ldrb	r3, [r3, #16]
 8009cfa:	2b00      	cmp	r3, #0
 8009cfc:	d115      	bne.n	8009d2a <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8009cfe:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009d02:	2202      	movs	r2, #2
 8009d04:	2181      	movs	r1, #129	; 0x81
 8009d06:	6878      	ldr	r0, [r7, #4]
 8009d08:	f010 fe21 	bl	801a94e <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8009d0c:	687b      	ldr	r3, [r7, #4]
 8009d0e:	2201      	movs	r2, #1
 8009d10:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8009d12:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009d16:	2202      	movs	r2, #2
 8009d18:	2101      	movs	r1, #1
 8009d1a:	6878      	ldr	r0, [r7, #4]
 8009d1c:	f010 fe17 	bl	801a94e <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	2201      	movs	r2, #1
 8009d24:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
 8009d28:	e012      	b.n	8009d50 <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8009d2a:	2340      	movs	r3, #64	; 0x40
 8009d2c:	2202      	movs	r2, #2
 8009d2e:	2181      	movs	r1, #129	; 0x81
 8009d30:	6878      	ldr	r0, [r7, #4]
 8009d32:	f010 fe0c 	bl	801a94e <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8009d36:	687b      	ldr	r3, [r7, #4]
 8009d38:	2201      	movs	r2, #1
 8009d3a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8009d3c:	2340      	movs	r3, #64	; 0x40
 8009d3e:	2202      	movs	r2, #2
 8009d40:	2101      	movs	r1, #1
 8009d42:	6878      	ldr	r0, [r7, #4]
 8009d44:	f010 fe03 	bl	801a94e <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8009d48:	687b      	ldr	r3, [r7, #4]
 8009d4a:	2201      	movs	r2, #1
 8009d4c:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8009d50:	2308      	movs	r3, #8
 8009d52:	2203      	movs	r2, #3
 8009d54:	2182      	movs	r1, #130	; 0x82
 8009d56:	6878      	ldr	r0, [r7, #4]
 8009d58:	f010 fdf9 	bl	801a94e <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8009d5c:	687b      	ldr	r3, [r7, #4]
 8009d5e:	2201      	movs	r2, #1
 8009d60:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof (USBD_CDC_HandleTypeDef));
 8009d62:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8009d66:	f010 ff69 	bl	801ac3c <malloc>
 8009d6a:	4603      	mov	r3, r0
 8009d6c:	461a      	mov	r2, r3
 8009d6e:	687b      	ldr	r3, [r7, #4]
 8009d70:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290

  if(pdev->pClassData == NULL)
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8009d7a:	2b00      	cmp	r3, #0
 8009d7c:	d102      	bne.n	8009d84 <USBD_CDC_Init+0x9e>
  {
    ret = 1U;
 8009d7e:	2301      	movs	r3, #1
 8009d80:	73fb      	strb	r3, [r7, #15]
 8009d82:	e026      	b.n	8009dd2 <USBD_CDC_Init+0xec>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8009d8a:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8009d92:	681b      	ldr	r3, [r3, #0]
 8009d94:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 8009d96:	68bb      	ldr	r3, [r7, #8]
 8009d98:	2200      	movs	r2, #0
 8009d9a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 8009d9e:	68bb      	ldr	r3, [r7, #8]
 8009da0:	2200      	movs	r2, #0
 8009da2:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if(pdev->dev_speed == USBD_SPEED_HIGH)
 8009da6:	687b      	ldr	r3, [r7, #4]
 8009da8:	7c1b      	ldrb	r3, [r3, #16]
 8009daa:	2b00      	cmp	r3, #0
 8009dac:	d109      	bne.n	8009dc2 <USBD_CDC_Init+0xdc>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8009dae:	68bb      	ldr	r3, [r7, #8]
 8009db0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009db4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009db8:	2101      	movs	r1, #1
 8009dba:	6878      	ldr	r0, [r7, #4]
 8009dbc:	f010 feb8 	bl	801ab30 <USBD_LL_PrepareReceive>
 8009dc0:	e007      	b.n	8009dd2 <USBD_CDC_Init+0xec>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8009dc2:	68bb      	ldr	r3, [r7, #8]
 8009dc4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8009dc8:	2340      	movs	r3, #64	; 0x40
 8009dca:	2101      	movs	r1, #1
 8009dcc:	6878      	ldr	r0, [r7, #4]
 8009dce:	f010 feaf 	bl	801ab30 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 8009dd2:	7bfb      	ldrb	r3, [r7, #15]
}
 8009dd4:	4618      	mov	r0, r3
 8009dd6:	3710      	adds	r7, #16
 8009dd8:	46bd      	mov	sp, r7
 8009dda:	bd80      	pop	{r7, pc}

08009ddc <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit (USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009ddc:	b580      	push	{r7, lr}
 8009dde:	b084      	sub	sp, #16
 8009de0:	af00      	add	r7, sp, #0
 8009de2:	6078      	str	r0, [r7, #4]
 8009de4:	460b      	mov	r3, r1
 8009de6:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8009de8:	2300      	movs	r3, #0
 8009dea:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8009dec:	2181      	movs	r1, #129	; 0x81
 8009dee:	6878      	ldr	r0, [r7, #4]
 8009df0:	f010 fdd3 	bl	801a99a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	2200      	movs	r2, #0
 8009df8:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8009dfa:	2101      	movs	r1, #1
 8009dfc:	6878      	ldr	r0, [r7, #4]
 8009dfe:	f010 fdcc 	bl	801a99a <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	2200      	movs	r2, #0
 8009e06:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8009e0a:	2182      	movs	r1, #130	; 0x82
 8009e0c:	6878      	ldr	r0, [r7, #4]
 8009e0e:	f010 fdc4 	bl	801a99a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8009e12:	687b      	ldr	r3, [r7, #4]
 8009e14:	2200      	movs	r2, #0
 8009e16:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if(pdev->pClassData != NULL)
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8009e1e:	2b00      	cmp	r3, #0
 8009e20:	d00e      	beq.n	8009e40 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8009e28:	685b      	ldr	r3, [r3, #4]
 8009e2a:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8009e32:	4618      	mov	r0, r3
 8009e34:	f010 ff0a 	bl	801ac4c <free>
    pdev->pClassData = NULL;
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	2200      	movs	r2, #0
 8009e3c:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290
  }

  return ret;
 8009e40:	7bfb      	ldrb	r3, [r7, #15]
}
 8009e42:	4618      	mov	r0, r3
 8009e44:	3710      	adds	r7, #16
 8009e46:	46bd      	mov	sp, r7
 8009e48:	bd80      	pop	{r7, pc}

08009e4a <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup (USBD_HandleTypeDef *pdev,
                                USBD_SetupReqTypedef *req)
{
 8009e4a:	b580      	push	{r7, lr}
 8009e4c:	b086      	sub	sp, #24
 8009e4e:	af00      	add	r7, sp, #0
 8009e50:	6078      	str	r0, [r7, #4]
 8009e52:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8009e5a:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8009e5c:	2300      	movs	r3, #0
 8009e5e:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8009e60:	2300      	movs	r3, #0
 8009e62:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 8009e64:	2300      	movs	r3, #0
 8009e66:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009e68:	683b      	ldr	r3, [r7, #0]
 8009e6a:	781b      	ldrb	r3, [r3, #0]
 8009e6c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009e70:	2b00      	cmp	r3, #0
 8009e72:	d039      	beq.n	8009ee8 <USBD_CDC_Setup+0x9e>
 8009e74:	2b20      	cmp	r3, #32
 8009e76:	d17c      	bne.n	8009f72 <USBD_CDC_Setup+0x128>
  {
  case USB_REQ_TYPE_CLASS :
    if (req->wLength)
 8009e78:	683b      	ldr	r3, [r7, #0]
 8009e7a:	88db      	ldrh	r3, [r3, #6]
 8009e7c:	2b00      	cmp	r3, #0
 8009e7e:	d029      	beq.n	8009ed4 <USBD_CDC_Setup+0x8a>
    {
      if (req->bmRequest & 0x80U)
 8009e80:	683b      	ldr	r3, [r7, #0]
 8009e82:	781b      	ldrb	r3, [r3, #0]
 8009e84:	b25b      	sxtb	r3, r3
 8009e86:	2b00      	cmp	r3, #0
 8009e88:	da11      	bge.n	8009eae <USBD_CDC_Setup+0x64>
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8009e8a:	687b      	ldr	r3, [r7, #4]
 8009e8c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8009e90:	689b      	ldr	r3, [r3, #8]
 8009e92:	683a      	ldr	r2, [r7, #0]
 8009e94:	7850      	ldrb	r0, [r2, #1]
                                                          (uint8_t *)(void *)hcdc->data,
 8009e96:	6939      	ldr	r1, [r7, #16]
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8009e98:	683a      	ldr	r2, [r7, #0]
 8009e9a:	88d2      	ldrh	r2, [r2, #6]
 8009e9c:	4798      	blx	r3
                                                          req->wLength);

          USBD_CtlSendData (pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8009e9e:	6939      	ldr	r1, [r7, #16]
 8009ea0:	683b      	ldr	r3, [r7, #0]
 8009ea2:	88db      	ldrh	r3, [r3, #6]
 8009ea4:	461a      	mov	r2, r3
 8009ea6:	6878      	ldr	r0, [r7, #4]
 8009ea8:	f001 f99c 	bl	800b1e4 <USBD_CtlSendData>
    else
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                        (uint8_t *)(void *)req, 0U);
    }
    break;
 8009eac:	e068      	b.n	8009f80 <USBD_CDC_Setup+0x136>
        hcdc->CmdOpCode = req->bRequest;
 8009eae:	683b      	ldr	r3, [r7, #0]
 8009eb0:	785a      	ldrb	r2, [r3, #1]
 8009eb2:	693b      	ldr	r3, [r7, #16]
 8009eb4:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
        hcdc->CmdLength = (uint8_t)req->wLength;
 8009eb8:	683b      	ldr	r3, [r7, #0]
 8009eba:	88db      	ldrh	r3, [r3, #6]
 8009ebc:	b2da      	uxtb	r2, r3
 8009ebe:	693b      	ldr	r3, [r7, #16]
 8009ec0:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
        USBD_CtlPrepareRx (pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8009ec4:	6939      	ldr	r1, [r7, #16]
 8009ec6:	683b      	ldr	r3, [r7, #0]
 8009ec8:	88db      	ldrh	r3, [r3, #6]
 8009eca:	461a      	mov	r2, r3
 8009ecc:	6878      	ldr	r0, [r7, #4]
 8009ece:	f001 f9b7 	bl	800b240 <USBD_CtlPrepareRx>
    break;
 8009ed2:	e055      	b.n	8009f80 <USBD_CDC_Setup+0x136>
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8009eda:	689b      	ldr	r3, [r3, #8]
 8009edc:	683a      	ldr	r2, [r7, #0]
 8009ede:	7850      	ldrb	r0, [r2, #1]
 8009ee0:	2200      	movs	r2, #0
 8009ee2:	6839      	ldr	r1, [r7, #0]
 8009ee4:	4798      	blx	r3
    break;
 8009ee6:	e04b      	b.n	8009f80 <USBD_CDC_Setup+0x136>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8009ee8:	683b      	ldr	r3, [r7, #0]
 8009eea:	785b      	ldrb	r3, [r3, #1]
 8009eec:	2b0a      	cmp	r3, #10
 8009eee:	d017      	beq.n	8009f20 <USBD_CDC_Setup+0xd6>
 8009ef0:	2b0b      	cmp	r3, #11
 8009ef2:	d029      	beq.n	8009f48 <USBD_CDC_Setup+0xfe>
 8009ef4:	2b00      	cmp	r3, #0
 8009ef6:	d133      	bne.n	8009f60 <USBD_CDC_Setup+0x116>
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009ef8:	687b      	ldr	r3, [r7, #4]
 8009efa:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8009efe:	2b03      	cmp	r3, #3
 8009f00:	d107      	bne.n	8009f12 <USBD_CDC_Setup+0xc8>
      {
        USBD_CtlSendData (pdev, (uint8_t *)(void *)&status_info, 2U);
 8009f02:	f107 030c 	add.w	r3, r7, #12
 8009f06:	2202      	movs	r2, #2
 8009f08:	4619      	mov	r1, r3
 8009f0a:	6878      	ldr	r0, [r7, #4]
 8009f0c:	f001 f96a 	bl	800b1e4 <USBD_CtlSendData>
      else
      {
        USBD_CtlError (pdev, req);
			  ret = USBD_FAIL;
      }
      break;
 8009f10:	e02e      	b.n	8009f70 <USBD_CDC_Setup+0x126>
        USBD_CtlError (pdev, req);
 8009f12:	6839      	ldr	r1, [r7, #0]
 8009f14:	6878      	ldr	r0, [r7, #4]
 8009f16:	f001 f8fa 	bl	800b10e <USBD_CtlError>
			  ret = USBD_FAIL;
 8009f1a:	2302      	movs	r3, #2
 8009f1c:	75fb      	strb	r3, [r7, #23]
      break;
 8009f1e:	e027      	b.n	8009f70 <USBD_CDC_Setup+0x126>

    case USB_REQ_GET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8009f26:	2b03      	cmp	r3, #3
 8009f28:	d107      	bne.n	8009f3a <USBD_CDC_Setup+0xf0>
      {
        USBD_CtlSendData (pdev, &ifalt, 1U);
 8009f2a:	f107 030f 	add.w	r3, r7, #15
 8009f2e:	2201      	movs	r2, #1
 8009f30:	4619      	mov	r1, r3
 8009f32:	6878      	ldr	r0, [r7, #4]
 8009f34:	f001 f956 	bl	800b1e4 <USBD_CtlSendData>
      else
      {
        USBD_CtlError (pdev, req);
			  ret = USBD_FAIL;
      }
      break;
 8009f38:	e01a      	b.n	8009f70 <USBD_CDC_Setup+0x126>
        USBD_CtlError (pdev, req);
 8009f3a:	6839      	ldr	r1, [r7, #0]
 8009f3c:	6878      	ldr	r0, [r7, #4]
 8009f3e:	f001 f8e6 	bl	800b10e <USBD_CtlError>
			  ret = USBD_FAIL;
 8009f42:	2302      	movs	r3, #2
 8009f44:	75fb      	strb	r3, [r7, #23]
      break;
 8009f46:	e013      	b.n	8009f70 <USBD_CDC_Setup+0x126>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8009f4e:	2b03      	cmp	r3, #3
 8009f50:	d00d      	beq.n	8009f6e <USBD_CDC_Setup+0x124>
      {
        USBD_CtlError (pdev, req);
 8009f52:	6839      	ldr	r1, [r7, #0]
 8009f54:	6878      	ldr	r0, [r7, #4]
 8009f56:	f001 f8da 	bl	800b10e <USBD_CtlError>
			  ret = USBD_FAIL;
 8009f5a:	2302      	movs	r3, #2
 8009f5c:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8009f5e:	e006      	b.n	8009f6e <USBD_CDC_Setup+0x124>

    default:
      USBD_CtlError (pdev, req);
 8009f60:	6839      	ldr	r1, [r7, #0]
 8009f62:	6878      	ldr	r0, [r7, #4]
 8009f64:	f001 f8d3 	bl	800b10e <USBD_CtlError>
      ret = USBD_FAIL;
 8009f68:	2302      	movs	r3, #2
 8009f6a:	75fb      	strb	r3, [r7, #23]
      break;
 8009f6c:	e000      	b.n	8009f70 <USBD_CDC_Setup+0x126>
      break;
 8009f6e:	bf00      	nop
    }
    break;
 8009f70:	e006      	b.n	8009f80 <USBD_CDC_Setup+0x136>

  default:
    USBD_CtlError (pdev, req);
 8009f72:	6839      	ldr	r1, [r7, #0]
 8009f74:	6878      	ldr	r0, [r7, #4]
 8009f76:	f001 f8ca 	bl	800b10e <USBD_CtlError>
    ret = USBD_FAIL;
 8009f7a:	2302      	movs	r3, #2
 8009f7c:	75fb      	strb	r3, [r7, #23]
    break;
 8009f7e:	bf00      	nop
  }

  return ret;
 8009f80:	7dfb      	ldrb	r3, [r7, #23]
}
 8009f82:	4618      	mov	r0, r3
 8009f84:	3718      	adds	r7, #24
 8009f86:	46bd      	mov	sp, r7
 8009f88:	bd80      	pop	{r7, pc}

08009f8a <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn (USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8009f8a:	b580      	push	{r7, lr}
 8009f8c:	b084      	sub	sp, #16
 8009f8e:	af00      	add	r7, sp, #0
 8009f90:	6078      	str	r0, [r7, #4]
 8009f92:	460b      	mov	r3, r1
 8009f94:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)pdev->pClassData;
 8009f96:	687b      	ldr	r3, [r7, #4]
 8009f98:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8009f9c:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8009f9e:	687b      	ldr	r3, [r7, #4]
 8009fa0:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8009fa4:	60bb      	str	r3, [r7, #8]

  if(pdev->pClassData != NULL)
 8009fa6:	687b      	ldr	r3, [r7, #4]
 8009fa8:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8009fac:	2b00      	cmp	r3, #0
 8009fae:	d03a      	beq.n	800a026 <USBD_CDC_DataIn+0x9c>
  {
    if((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8009fb0:	78fa      	ldrb	r2, [r7, #3]
 8009fb2:	6879      	ldr	r1, [r7, #4]
 8009fb4:	4613      	mov	r3, r2
 8009fb6:	009b      	lsls	r3, r3, #2
 8009fb8:	4413      	add	r3, r2
 8009fba:	009b      	lsls	r3, r3, #2
 8009fbc:	440b      	add	r3, r1
 8009fbe:	331c      	adds	r3, #28
 8009fc0:	681b      	ldr	r3, [r3, #0]
 8009fc2:	2b00      	cmp	r3, #0
 8009fc4:	d029      	beq.n	800a01a <USBD_CDC_DataIn+0x90>
 8009fc6:	78fa      	ldrb	r2, [r7, #3]
 8009fc8:	6879      	ldr	r1, [r7, #4]
 8009fca:	4613      	mov	r3, r2
 8009fcc:	009b      	lsls	r3, r3, #2
 8009fce:	4413      	add	r3, r2
 8009fd0:	009b      	lsls	r3, r3, #2
 8009fd2:	440b      	add	r3, r1
 8009fd4:	331c      	adds	r3, #28
 8009fd6:	681a      	ldr	r2, [r3, #0]
 8009fd8:	78f9      	ldrb	r1, [r7, #3]
 8009fda:	68b8      	ldr	r0, [r7, #8]
 8009fdc:	460b      	mov	r3, r1
 8009fde:	00db      	lsls	r3, r3, #3
 8009fe0:	1a5b      	subs	r3, r3, r1
 8009fe2:	009b      	lsls	r3, r3, #2
 8009fe4:	4403      	add	r3, r0
 8009fe6:	3344      	adds	r3, #68	; 0x44
 8009fe8:	681b      	ldr	r3, [r3, #0]
 8009fea:	fbb2 f1f3 	udiv	r1, r2, r3
 8009fee:	fb03 f301 	mul.w	r3, r3, r1
 8009ff2:	1ad3      	subs	r3, r2, r3
 8009ff4:	2b00      	cmp	r3, #0
 8009ff6:	d110      	bne.n	800a01a <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 8009ff8:	78fa      	ldrb	r2, [r7, #3]
 8009ffa:	6879      	ldr	r1, [r7, #4]
 8009ffc:	4613      	mov	r3, r2
 8009ffe:	009b      	lsls	r3, r3, #2
 800a000:	4413      	add	r3, r2
 800a002:	009b      	lsls	r3, r3, #2
 800a004:	440b      	add	r3, r1
 800a006:	331c      	adds	r3, #28
 800a008:	2200      	movs	r2, #0
 800a00a:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit (pdev, epnum, NULL, 0U);
 800a00c:	78f9      	ldrb	r1, [r7, #3]
 800a00e:	2300      	movs	r3, #0
 800a010:	2200      	movs	r2, #0
 800a012:	6878      	ldr	r0, [r7, #4]
 800a014:	f010 fd69 	bl	801aaea <USBD_LL_Transmit>
 800a018:	e003      	b.n	800a022 <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 800a01a:	68fb      	ldr	r3, [r7, #12]
 800a01c:	2200      	movs	r2, #0
 800a01e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 800a022:	2300      	movs	r3, #0
 800a024:	e000      	b.n	800a028 <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 800a026:	2302      	movs	r3, #2
  }
}
 800a028:	4618      	mov	r0, r3
 800a02a:	3710      	adds	r7, #16
 800a02c:	46bd      	mov	sp, r7
 800a02e:	bd80      	pop	{r7, pc}

0800a030 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut (USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800a030:	b580      	push	{r7, lr}
 800a032:	b084      	sub	sp, #16
 800a034:	af00      	add	r7, sp, #0
 800a036:	6078      	str	r0, [r7, #4]
 800a038:	460b      	mov	r3, r1
 800a03a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800a03c:	687b      	ldr	r3, [r7, #4]
 800a03e:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800a042:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize (pdev, epnum);
 800a044:	78fb      	ldrb	r3, [r7, #3]
 800a046:	4619      	mov	r1, r3
 800a048:	6878      	ldr	r0, [r7, #4]
 800a04a:	f010 fd94 	bl	801ab76 <USBD_LL_GetRxDataSize>
 800a04e:	4602      	mov	r2, r0
 800a050:	68fb      	ldr	r3, [r7, #12]
 800a052:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if(pdev->pClassData != NULL)
 800a056:	687b      	ldr	r3, [r7, #4]
 800a058:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800a05c:	2b00      	cmp	r3, #0
 800a05e:	d00d      	beq.n	800a07c <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800a060:	687b      	ldr	r3, [r7, #4]
 800a062:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800a066:	68db      	ldr	r3, [r3, #12]
 800a068:	68fa      	ldr	r2, [r7, #12]
 800a06a:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800a06e:	68fa      	ldr	r2, [r7, #12]
 800a070:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800a074:	4611      	mov	r1, r2
 800a076:	4798      	blx	r3

    return USBD_OK;
 800a078:	2300      	movs	r3, #0
 800a07a:	e000      	b.n	800a07e <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 800a07c:	2302      	movs	r3, #2
  }
}
 800a07e:	4618      	mov	r0, r3
 800a080:	3710      	adds	r7, #16
 800a082:	46bd      	mov	sp, r7
 800a084:	bd80      	pop	{r7, pc}

0800a086 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady (USBD_HandleTypeDef *pdev)
{
 800a086:	b580      	push	{r7, lr}
 800a088:	b084      	sub	sp, #16
 800a08a:	af00      	add	r7, sp, #0
 800a08c:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800a08e:	687b      	ldr	r3, [r7, #4]
 800a090:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800a094:	60fb      	str	r3, [r7, #12]

  if((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800a096:	687b      	ldr	r3, [r7, #4]
 800a098:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800a09c:	2b00      	cmp	r3, #0
 800a09e:	d015      	beq.n	800a0cc <USBD_CDC_EP0_RxReady+0x46>
 800a0a0:	68fb      	ldr	r3, [r7, #12]
 800a0a2:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800a0a6:	2bff      	cmp	r3, #255	; 0xff
 800a0a8:	d010      	beq.n	800a0cc <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800a0aa:	687b      	ldr	r3, [r7, #4]
 800a0ac:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800a0b0:	689b      	ldr	r3, [r3, #8]
 800a0b2:	68fa      	ldr	r2, [r7, #12]
 800a0b4:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 800a0b8:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800a0ba:	68fa      	ldr	r2, [r7, #12]
 800a0bc:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800a0c0:	b292      	uxth	r2, r2
 800a0c2:	4798      	blx	r3
      hcdc->CmdOpCode = 0xFFU;
 800a0c4:	68fb      	ldr	r3, [r7, #12]
 800a0c6:	22ff      	movs	r2, #255	; 0xff
 800a0c8:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 800a0cc:	2300      	movs	r3, #0
}
 800a0ce:	4618      	mov	r0, r3
 800a0d0:	3710      	adds	r7, #16
 800a0d2:	46bd      	mov	sp, r7
 800a0d4:	bd80      	pop	{r7, pc}
	...

0800a0d8 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc (uint16_t *length)
{
 800a0d8:	b480      	push	{r7}
 800a0da:	b083      	sub	sp, #12
 800a0dc:	af00      	add	r7, sp, #0
 800a0de:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_CfgFSDesc);
 800a0e0:	687b      	ldr	r3, [r7, #4]
 800a0e2:	2243      	movs	r2, #67	; 0x43
 800a0e4:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 800a0e6:	4b03      	ldr	r3, [pc, #12]	; (800a0f4 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800a0e8:	4618      	mov	r0, r3
 800a0ea:	370c      	adds	r7, #12
 800a0ec:	46bd      	mov	sp, r7
 800a0ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0f2:	4770      	bx	lr
 800a0f4:	20000090 	.word	0x20000090

0800a0f8 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc (uint16_t *length)
{
 800a0f8:	b480      	push	{r7}
 800a0fa:	b083      	sub	sp, #12
 800a0fc:	af00      	add	r7, sp, #0
 800a0fe:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_CfgHSDesc);
 800a100:	687b      	ldr	r3, [r7, #4]
 800a102:	2243      	movs	r2, #67	; 0x43
 800a104:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 800a106:	4b03      	ldr	r3, [pc, #12]	; (800a114 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800a108:	4618      	mov	r0, r3
 800a10a:	370c      	adds	r7, #12
 800a10c:	46bd      	mov	sp, r7
 800a10e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a112:	4770      	bx	lr
 800a114:	2000004c 	.word	0x2000004c

0800a118 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc (uint16_t *length)
{
 800a118:	b480      	push	{r7}
 800a11a:	b083      	sub	sp, #12
 800a11c:	af00      	add	r7, sp, #0
 800a11e:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_OtherSpeedCfgDesc);
 800a120:	687b      	ldr	r3, [r7, #4]
 800a122:	2243      	movs	r2, #67	; 0x43
 800a124:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 800a126:	4b03      	ldr	r3, [pc, #12]	; (800a134 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800a128:	4618      	mov	r0, r3
 800a12a:	370c      	adds	r7, #12
 800a12c:	46bd      	mov	sp, r7
 800a12e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a132:	4770      	bx	lr
 800a134:	200000d4 	.word	0x200000d4

0800a138 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor (uint16_t *length)
{
 800a138:	b480      	push	{r7}
 800a13a:	b083      	sub	sp, #12
 800a13c:	af00      	add	r7, sp, #0
 800a13e:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_DeviceQualifierDesc);
 800a140:	687b      	ldr	r3, [r7, #4]
 800a142:	220a      	movs	r2, #10
 800a144:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 800a146:	4b03      	ldr	r3, [pc, #12]	; (800a154 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800a148:	4618      	mov	r0, r3
 800a14a:	370c      	adds	r7, #12
 800a14c:	46bd      	mov	sp, r7
 800a14e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a152:	4770      	bx	lr
 800a154:	20000008 	.word	0x20000008

0800a158 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface  (USBD_HandleTypeDef   *pdev,
                                      USBD_CDC_ItfTypeDef *fops)
{
 800a158:	b480      	push	{r7}
 800a15a:	b085      	sub	sp, #20
 800a15c:	af00      	add	r7, sp, #0
 800a15e:	6078      	str	r0, [r7, #4]
 800a160:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 800a162:	2302      	movs	r3, #2
 800a164:	73fb      	strb	r3, [r7, #15]

  if(fops != NULL)
 800a166:	683b      	ldr	r3, [r7, #0]
 800a168:	2b00      	cmp	r3, #0
 800a16a:	d005      	beq.n	800a178 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData= fops;
 800a16c:	687b      	ldr	r3, [r7, #4]
 800a16e:	683a      	ldr	r2, [r7, #0]
 800a170:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
    ret = USBD_OK;
 800a174:	2300      	movs	r3, #0
 800a176:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800a178:	7bfb      	ldrb	r3, [r7, #15]
}
 800a17a:	4618      	mov	r0, r3
 800a17c:	3714      	adds	r7, #20
 800a17e:	46bd      	mov	sp, r7
 800a180:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a184:	4770      	bx	lr

0800a186 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer  (USBD_HandleTypeDef   *pdev,
                                uint8_t  *pbuff,
                                uint16_t length)
{
 800a186:	b480      	push	{r7}
 800a188:	b087      	sub	sp, #28
 800a18a:	af00      	add	r7, sp, #0
 800a18c:	60f8      	str	r0, [r7, #12]
 800a18e:	60b9      	str	r1, [r7, #8]
 800a190:	4613      	mov	r3, r2
 800a192:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800a194:	68fb      	ldr	r3, [r7, #12]
 800a196:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800a19a:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 800a19c:	697b      	ldr	r3, [r7, #20]
 800a19e:	68ba      	ldr	r2, [r7, #8]
 800a1a0:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800a1a4:	88fa      	ldrh	r2, [r7, #6]
 800a1a6:	697b      	ldr	r3, [r7, #20]
 800a1a8:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 800a1ac:	2300      	movs	r3, #0
}
 800a1ae:	4618      	mov	r0, r3
 800a1b0:	371c      	adds	r7, #28
 800a1b2:	46bd      	mov	sp, r7
 800a1b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1b8:	4770      	bx	lr

0800a1ba <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer  (USBD_HandleTypeDef   *pdev,
                                   uint8_t  *pbuff)
{
 800a1ba:	b480      	push	{r7}
 800a1bc:	b085      	sub	sp, #20
 800a1be:	af00      	add	r7, sp, #0
 800a1c0:	6078      	str	r0, [r7, #4]
 800a1c2:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800a1c4:	687b      	ldr	r3, [r7, #4]
 800a1c6:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800a1ca:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 800a1cc:	68fb      	ldr	r3, [r7, #12]
 800a1ce:	683a      	ldr	r2, [r7, #0]
 800a1d0:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 800a1d4:	2300      	movs	r3, #0
}
 800a1d6:	4618      	mov	r0, r3
 800a1d8:	3714      	adds	r7, #20
 800a1da:	46bd      	mov	sp, r7
 800a1dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1e0:	4770      	bx	lr

0800a1e2 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800a1e2:	b580      	push	{r7, lr}
 800a1e4:	b084      	sub	sp, #16
 800a1e6:	af00      	add	r7, sp, #0
 800a1e8:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800a1ea:	687b      	ldr	r3, [r7, #4]
 800a1ec:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800a1f0:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if(pdev->pClassData != NULL)
 800a1f2:	687b      	ldr	r3, [r7, #4]
 800a1f4:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800a1f8:	2b00      	cmp	r3, #0
 800a1fa:	d017      	beq.n	800a22c <USBD_CDC_ReceivePacket+0x4a>
  {
    if(pdev->dev_speed == USBD_SPEED_HIGH  )
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	7c1b      	ldrb	r3, [r3, #16]
 800a200:	2b00      	cmp	r3, #0
 800a202:	d109      	bne.n	800a218 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800a204:	68fb      	ldr	r3, [r7, #12]
 800a206:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800a20a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a20e:	2101      	movs	r1, #1
 800a210:	6878      	ldr	r0, [r7, #4]
 800a212:	f010 fc8d 	bl	801ab30 <USBD_LL_PrepareReceive>
 800a216:	e007      	b.n	800a228 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800a218:	68fb      	ldr	r3, [r7, #12]
 800a21a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800a21e:	2340      	movs	r3, #64	; 0x40
 800a220:	2101      	movs	r1, #1
 800a222:	6878      	ldr	r0, [r7, #4]
 800a224:	f010 fc84 	bl	801ab30 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 800a228:	2300      	movs	r3, #0
 800a22a:	e000      	b.n	800a22e <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 800a22c:	2302      	movs	r3, #2
  }
}
 800a22e:	4618      	mov	r0, r3
 800a230:	3710      	adds	r7, #16
 800a232:	46bd      	mov	sp, r7
 800a234:	bd80      	pop	{r7, pc}

0800a236 <USBD_Init>:
* @param  pdesc: Descriptor structure address
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev, USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800a236:	b580      	push	{r7, lr}
 800a238:	b084      	sub	sp, #16
 800a23a:	af00      	add	r7, sp, #0
 800a23c:	60f8      	str	r0, [r7, #12]
 800a23e:	60b9      	str	r1, [r7, #8]
 800a240:	4613      	mov	r3, r2
 800a242:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if(pdev == NULL)
 800a244:	68fb      	ldr	r3, [r7, #12]
 800a246:	2b00      	cmp	r3, #0
 800a248:	d101      	bne.n	800a24e <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800a24a:	2302      	movs	r3, #2
 800a24c:	e01a      	b.n	800a284 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if(pdev->pClass != NULL)
 800a24e:	68fb      	ldr	r3, [r7, #12]
 800a250:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800a254:	2b00      	cmp	r3, #0
 800a256:	d003      	beq.n	800a260 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 800a258:	68fb      	ldr	r3, [r7, #12]
 800a25a:	2200      	movs	r2, #0
 800a25c:	f8c3 228c 	str.w	r2, [r3, #652]	; 0x28c
  }

  /* Assign USBD Descriptors */
  if(pdesc != NULL)
 800a260:	68bb      	ldr	r3, [r7, #8]
 800a262:	2b00      	cmp	r3, #0
 800a264:	d003      	beq.n	800a26e <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 800a266:	68fb      	ldr	r3, [r7, #12]
 800a268:	68ba      	ldr	r2, [r7, #8]
 800a26a:	f8c3 2288 	str.w	r2, [r3, #648]	; 0x288
  }

  /* Set Device initial State */
  pdev->dev_state  = USBD_STATE_DEFAULT;
 800a26e:	68fb      	ldr	r3, [r7, #12]
 800a270:	2201      	movs	r2, #1
 800a272:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  pdev->id = id;
 800a276:	68fb      	ldr	r3, [r7, #12]
 800a278:	79fa      	ldrb	r2, [r7, #7]
 800a27a:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 800a27c:	68f8      	ldr	r0, [r7, #12]
 800a27e:	f010 faff 	bl	801a880 <USBD_LL_Init>

  return USBD_OK;
 800a282:	2300      	movs	r3, #0
}
 800a284:	4618      	mov	r0, r3
 800a286:	3710      	adds	r7, #16
 800a288:	46bd      	mov	sp, r7
 800a28a:	bd80      	pop	{r7, pc}

0800a28c <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800a28c:	b480      	push	{r7}
 800a28e:	b085      	sub	sp, #20
 800a290:	af00      	add	r7, sp, #0
 800a292:	6078      	str	r0, [r7, #4]
 800a294:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef   status = USBD_OK;
 800a296:	2300      	movs	r3, #0
 800a298:	73fb      	strb	r3, [r7, #15]
  if(pclass != 0)
 800a29a:	683b      	ldr	r3, [r7, #0]
 800a29c:	2b00      	cmp	r3, #0
 800a29e:	d006      	beq.n	800a2ae <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 800a2a0:	687b      	ldr	r3, [r7, #4]
 800a2a2:	683a      	ldr	r2, [r7, #0]
 800a2a4:	f8c3 228c 	str.w	r2, [r3, #652]	; 0x28c
    status = USBD_OK;
 800a2a8:	2300      	movs	r3, #0
 800a2aa:	73fb      	strb	r3, [r7, #15]
 800a2ac:	e001      	b.n	800a2b2 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 800a2ae:	2302      	movs	r3, #2
 800a2b0:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800a2b2:	7bfb      	ldrb	r3, [r7, #15]
}
 800a2b4:	4618      	mov	r0, r3
 800a2b6:	3714      	adds	r7, #20
 800a2b8:	46bd      	mov	sp, r7
 800a2ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2be:	4770      	bx	lr

0800a2c0 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start  (USBD_HandleTypeDef *pdev)
{
 800a2c0:	b580      	push	{r7, lr}
 800a2c2:	b082      	sub	sp, #8
 800a2c4:	af00      	add	r7, sp, #0
 800a2c6:	6078      	str	r0, [r7, #4]

  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 800a2c8:	6878      	ldr	r0, [r7, #4]
 800a2ca:	f010 fb25 	bl	801a918 <USBD_LL_Start>

  return USBD_OK;
 800a2ce:	2300      	movs	r3, #0
}
 800a2d0:	4618      	mov	r0, r3
 800a2d2:	3708      	adds	r7, #8
 800a2d4:	46bd      	mov	sp, r7
 800a2d6:	bd80      	pop	{r7, pc}

0800a2d8 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode (USBD_HandleTypeDef  *pdev)
{
 800a2d8:	b480      	push	{r7}
 800a2da:	b083      	sub	sp, #12
 800a2dc:	af00      	add	r7, sp, #0
 800a2de:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800a2e0:	2300      	movs	r3, #0
}
 800a2e2:	4618      	mov	r0, r3
 800a2e4:	370c      	adds	r7, #12
 800a2e6:	46bd      	mov	sp, r7
 800a2e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2ec:	4770      	bx	lr

0800a2ee <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800a2ee:	b580      	push	{r7, lr}
 800a2f0:	b084      	sub	sp, #16
 800a2f2:	af00      	add	r7, sp, #0
 800a2f4:	6078      	str	r0, [r7, #4]
 800a2f6:	460b      	mov	r3, r1
 800a2f8:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef   ret = USBD_FAIL;
 800a2fa:	2302      	movs	r3, #2
 800a2fc:	73fb      	strb	r3, [r7, #15]

  if(pdev->pClass != NULL)
 800a2fe:	687b      	ldr	r3, [r7, #4]
 800a300:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800a304:	2b00      	cmp	r3, #0
 800a306:	d00c      	beq.n	800a322 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if(pdev->pClass->Init(pdev, cfgidx) == 0U)
 800a308:	687b      	ldr	r3, [r7, #4]
 800a30a:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800a30e:	681b      	ldr	r3, [r3, #0]
 800a310:	78fa      	ldrb	r2, [r7, #3]
 800a312:	4611      	mov	r1, r2
 800a314:	6878      	ldr	r0, [r7, #4]
 800a316:	4798      	blx	r3
 800a318:	4603      	mov	r3, r0
 800a31a:	2b00      	cmp	r3, #0
 800a31c:	d101      	bne.n	800a322 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 800a31e:	2300      	movs	r3, #0
 800a320:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 800a322:	7bfb      	ldrb	r3, [r7, #15]
}
 800a324:	4618      	mov	r0, r3
 800a326:	3710      	adds	r7, #16
 800a328:	46bd      	mov	sp, r7
 800a32a:	bd80      	pop	{r7, pc}

0800a32c <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800a32c:	b580      	push	{r7, lr}
 800a32e:	b082      	sub	sp, #8
 800a330:	af00      	add	r7, sp, #0
 800a332:	6078      	str	r0, [r7, #4]
 800a334:	460b      	mov	r3, r1
 800a336:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 800a338:	687b      	ldr	r3, [r7, #4]
 800a33a:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800a33e:	685b      	ldr	r3, [r3, #4]
 800a340:	78fa      	ldrb	r2, [r7, #3]
 800a342:	4611      	mov	r1, r2
 800a344:	6878      	ldr	r0, [r7, #4]
 800a346:	4798      	blx	r3
  return USBD_OK;
 800a348:	2300      	movs	r3, #0
}
 800a34a:	4618      	mov	r0, r3
 800a34c:	3708      	adds	r7, #8
 800a34e:	46bd      	mov	sp, r7
 800a350:	bd80      	pop	{r7, pc}

0800a352 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800a352:	b580      	push	{r7, lr}
 800a354:	b082      	sub	sp, #8
 800a356:	af00      	add	r7, sp, #0
 800a358:	6078      	str	r0, [r7, #4]
 800a35a:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 800a35c:	687b      	ldr	r3, [r7, #4]
 800a35e:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800a362:	6839      	ldr	r1, [r7, #0]
 800a364:	4618      	mov	r0, r3
 800a366:	f000 fe95 	bl	800b094 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800a36a:	687b      	ldr	r3, [r7, #4]
 800a36c:	2201      	movs	r2, #1
 800a36e:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

  pdev->ep0_data_len = pdev->request.wLength;
 800a372:	687b      	ldr	r3, [r7, #4]
 800a374:	f8b3 3286 	ldrh.w	r3, [r3, #646]	; 0x286
 800a378:	461a      	mov	r2, r3
 800a37a:	687b      	ldr	r3, [r7, #4]
 800a37c:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

  switch (pdev->request.bmRequest & 0x1FU)
 800a380:	687b      	ldr	r3, [r7, #4]
 800a382:	f893 3280 	ldrb.w	r3, [r3, #640]	; 0x280
 800a386:	f003 031f 	and.w	r3, r3, #31
 800a38a:	2b01      	cmp	r3, #1
 800a38c:	d00c      	beq.n	800a3a8 <USBD_LL_SetupStage+0x56>
 800a38e:	2b01      	cmp	r3, #1
 800a390:	d302      	bcc.n	800a398 <USBD_LL_SetupStage+0x46>
 800a392:	2b02      	cmp	r3, #2
 800a394:	d010      	beq.n	800a3b8 <USBD_LL_SetupStage+0x66>
 800a396:	e017      	b.n	800a3c8 <USBD_LL_SetupStage+0x76>
  {
  case USB_REQ_RECIPIENT_DEVICE:
    USBD_StdDevReq (pdev, &pdev->request);
 800a398:	687b      	ldr	r3, [r7, #4]
 800a39a:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800a39e:	4619      	mov	r1, r3
 800a3a0:	6878      	ldr	r0, [r7, #4]
 800a3a2:	f000 fa05 	bl	800a7b0 <USBD_StdDevReq>
    break;
 800a3a6:	e01a      	b.n	800a3de <USBD_LL_SetupStage+0x8c>

  case USB_REQ_RECIPIENT_INTERFACE:
    USBD_StdItfReq(pdev, &pdev->request);
 800a3a8:	687b      	ldr	r3, [r7, #4]
 800a3aa:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800a3ae:	4619      	mov	r1, r3
 800a3b0:	6878      	ldr	r0, [r7, #4]
 800a3b2:	f000 fa67 	bl	800a884 <USBD_StdItfReq>
    break;
 800a3b6:	e012      	b.n	800a3de <USBD_LL_SetupStage+0x8c>

  case USB_REQ_RECIPIENT_ENDPOINT:
    USBD_StdEPReq(pdev, &pdev->request);
 800a3b8:	687b      	ldr	r3, [r7, #4]
 800a3ba:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800a3be:	4619      	mov	r1, r3
 800a3c0:	6878      	ldr	r0, [r7, #4]
 800a3c2:	f000 faa5 	bl	800a910 <USBD_StdEPReq>
    break;
 800a3c6:	e00a      	b.n	800a3de <USBD_LL_SetupStage+0x8c>

  default:
    USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800a3c8:	687b      	ldr	r3, [r7, #4]
 800a3ca:	f893 3280 	ldrb.w	r3, [r3, #640]	; 0x280
 800a3ce:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800a3d2:	b2db      	uxtb	r3, r3
 800a3d4:	4619      	mov	r1, r3
 800a3d6:	6878      	ldr	r0, [r7, #4]
 800a3d8:	f010 fafe 	bl	801a9d8 <USBD_LL_StallEP>
    break;
 800a3dc:	bf00      	nop
  }

  return USBD_OK;
 800a3de:	2300      	movs	r3, #0
}
 800a3e0:	4618      	mov	r0, r3
 800a3e2:	3708      	adds	r7, #8
 800a3e4:	46bd      	mov	sp, r7
 800a3e6:	bd80      	pop	{r7, pc}

0800a3e8 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800a3e8:	b580      	push	{r7, lr}
 800a3ea:	b086      	sub	sp, #24
 800a3ec:	af00      	add	r7, sp, #0
 800a3ee:	60f8      	str	r0, [r7, #12]
 800a3f0:	460b      	mov	r3, r1
 800a3f2:	607a      	str	r2, [r7, #4]
 800a3f4:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef    *pep;

  if(epnum == 0U)
 800a3f6:	7afb      	ldrb	r3, [r7, #11]
 800a3f8:	2b00      	cmp	r3, #0
 800a3fa:	d14b      	bne.n	800a494 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 800a3fc:	68fb      	ldr	r3, [r7, #12]
 800a3fe:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 800a402:	617b      	str	r3, [r7, #20]

    if ( pdev->ep0_state == USBD_EP0_DATA_OUT)
 800a404:	68fb      	ldr	r3, [r7, #12]
 800a406:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 800a40a:	2b03      	cmp	r3, #3
 800a40c:	d134      	bne.n	800a478 <USBD_LL_DataOutStage+0x90>
    {
      if(pep->rem_length > pep->maxpacket)
 800a40e:	697b      	ldr	r3, [r7, #20]
 800a410:	68da      	ldr	r2, [r3, #12]
 800a412:	697b      	ldr	r3, [r7, #20]
 800a414:	691b      	ldr	r3, [r3, #16]
 800a416:	429a      	cmp	r2, r3
 800a418:	d919      	bls.n	800a44e <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -=  pep->maxpacket;
 800a41a:	697b      	ldr	r3, [r7, #20]
 800a41c:	68da      	ldr	r2, [r3, #12]
 800a41e:	697b      	ldr	r3, [r7, #20]
 800a420:	691b      	ldr	r3, [r3, #16]
 800a422:	1ad2      	subs	r2, r2, r3
 800a424:	697b      	ldr	r3, [r7, #20]
 800a426:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx (pdev,
                            pdata,
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800a428:	697b      	ldr	r3, [r7, #20]
 800a42a:	68da      	ldr	r2, [r3, #12]
 800a42c:	697b      	ldr	r3, [r7, #20]
 800a42e:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx (pdev,
 800a430:	429a      	cmp	r2, r3
 800a432:	d203      	bcs.n	800a43c <USBD_LL_DataOutStage+0x54>
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800a434:	697b      	ldr	r3, [r7, #20]
 800a436:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx (pdev,
 800a438:	b29b      	uxth	r3, r3
 800a43a:	e002      	b.n	800a442 <USBD_LL_DataOutStage+0x5a>
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800a43c:	697b      	ldr	r3, [r7, #20]
 800a43e:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx (pdev,
 800a440:	b29b      	uxth	r3, r3
 800a442:	461a      	mov	r2, r3
 800a444:	6879      	ldr	r1, [r7, #4]
 800a446:	68f8      	ldr	r0, [r7, #12]
 800a448:	f000 ff18 	bl	800b27c <USBD_CtlContinueRx>
 800a44c:	e038      	b.n	800a4c0 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if((pdev->pClass->EP0_RxReady != NULL)&&
 800a44e:	68fb      	ldr	r3, [r7, #12]
 800a450:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800a454:	691b      	ldr	r3, [r3, #16]
 800a456:	2b00      	cmp	r3, #0
 800a458:	d00a      	beq.n	800a470 <USBD_LL_DataOutStage+0x88>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800a45a:	68fb      	ldr	r3, [r7, #12]
 800a45c:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
        if((pdev->pClass->EP0_RxReady != NULL)&&
 800a460:	2b03      	cmp	r3, #3
 800a462:	d105      	bne.n	800a470 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 800a464:	68fb      	ldr	r3, [r7, #12]
 800a466:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800a46a:	691b      	ldr	r3, [r3, #16]
 800a46c:	68f8      	ldr	r0, [r7, #12]
 800a46e:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 800a470:	68f8      	ldr	r0, [r7, #12]
 800a472:	f000 ff15 	bl	800b2a0 <USBD_CtlSendStatus>
 800a476:	e023      	b.n	800a4c0 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 800a478:	68fb      	ldr	r3, [r7, #12]
 800a47a:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 800a47e:	2b05      	cmp	r3, #5
 800a480:	d11e      	bne.n	800a4c0 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 800a482:	68fb      	ldr	r3, [r7, #12]
 800a484:	2200      	movs	r2, #0
 800a486:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
        USBD_LL_StallEP(pdev, 0U);
 800a48a:	2100      	movs	r1, #0
 800a48c:	68f8      	ldr	r0, [r7, #12]
 800a48e:	f010 faa3 	bl	801a9d8 <USBD_LL_StallEP>
 800a492:	e015      	b.n	800a4c0 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if((pdev->pClass->DataOut != NULL) &&
 800a494:	68fb      	ldr	r3, [r7, #12]
 800a496:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800a49a:	699b      	ldr	r3, [r3, #24]
 800a49c:	2b00      	cmp	r3, #0
 800a49e:	d00d      	beq.n	800a4bc <USBD_LL_DataOutStage+0xd4>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
 800a4a0:	68fb      	ldr	r3, [r7, #12]
 800a4a2:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
  else if((pdev->pClass->DataOut != NULL) &&
 800a4a6:	2b03      	cmp	r3, #3
 800a4a8:	d108      	bne.n	800a4bc <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 800a4aa:	68fb      	ldr	r3, [r7, #12]
 800a4ac:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800a4b0:	699b      	ldr	r3, [r3, #24]
 800a4b2:	7afa      	ldrb	r2, [r7, #11]
 800a4b4:	4611      	mov	r1, r2
 800a4b6:	68f8      	ldr	r0, [r7, #12]
 800a4b8:	4798      	blx	r3
 800a4ba:	e001      	b.n	800a4c0 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800a4bc:	2302      	movs	r3, #2
 800a4be:	e000      	b.n	800a4c2 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 800a4c0:	2300      	movs	r3, #0
}
 800a4c2:	4618      	mov	r0, r3
 800a4c4:	3718      	adds	r7, #24
 800a4c6:	46bd      	mov	sp, r7
 800a4c8:	bd80      	pop	{r7, pc}

0800a4ca <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev, uint8_t epnum,
                                       uint8_t *pdata)
{
 800a4ca:	b580      	push	{r7, lr}
 800a4cc:	b086      	sub	sp, #24
 800a4ce:	af00      	add	r7, sp, #0
 800a4d0:	60f8      	str	r0, [r7, #12]
 800a4d2:	460b      	mov	r3, r1
 800a4d4:	607a      	str	r2, [r7, #4]
 800a4d6:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if(epnum == 0U)
 800a4d8:	7afb      	ldrb	r3, [r7, #11]
 800a4da:	2b00      	cmp	r3, #0
 800a4dc:	d17f      	bne.n	800a5de <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 800a4de:	68fb      	ldr	r3, [r7, #12]
 800a4e0:	3314      	adds	r3, #20
 800a4e2:	617b      	str	r3, [r7, #20]

    if ( pdev->ep0_state == USBD_EP0_DATA_IN)
 800a4e4:	68fb      	ldr	r3, [r7, #12]
 800a4e6:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 800a4ea:	2b02      	cmp	r3, #2
 800a4ec:	d15c      	bne.n	800a5a8 <USBD_LL_DataInStage+0xde>
    {
      if(pep->rem_length > pep->maxpacket)
 800a4ee:	697b      	ldr	r3, [r7, #20]
 800a4f0:	68da      	ldr	r2, [r3, #12]
 800a4f2:	697b      	ldr	r3, [r7, #20]
 800a4f4:	691b      	ldr	r3, [r3, #16]
 800a4f6:	429a      	cmp	r2, r3
 800a4f8:	d915      	bls.n	800a526 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 800a4fa:	697b      	ldr	r3, [r7, #20]
 800a4fc:	68da      	ldr	r2, [r3, #12]
 800a4fe:	697b      	ldr	r3, [r7, #20]
 800a500:	691b      	ldr	r3, [r3, #16]
 800a502:	1ad2      	subs	r2, r2, r3
 800a504:	697b      	ldr	r3, [r7, #20]
 800a506:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData (pdev, pdata, (uint16_t)pep->rem_length);
 800a508:	697b      	ldr	r3, [r7, #20]
 800a50a:	68db      	ldr	r3, [r3, #12]
 800a50c:	b29b      	uxth	r3, r3
 800a50e:	461a      	mov	r2, r3
 800a510:	6879      	ldr	r1, [r7, #4]
 800a512:	68f8      	ldr	r0, [r7, #12]
 800a514:	f000 fe82 	bl	800b21c <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 800a518:	2300      	movs	r3, #0
 800a51a:	2200      	movs	r2, #0
 800a51c:	2100      	movs	r1, #0
 800a51e:	68f8      	ldr	r0, [r7, #12]
 800a520:	f010 fb06 	bl	801ab30 <USBD_LL_PrepareReceive>
 800a524:	e04e      	b.n	800a5c4 <USBD_LL_DataInStage+0xfa>
      }
      else
      { /* last packet is MPS multiple, so send ZLP packet */
        if((pep->total_length % pep->maxpacket == 0U) &&
 800a526:	697b      	ldr	r3, [r7, #20]
 800a528:	689b      	ldr	r3, [r3, #8]
 800a52a:	697a      	ldr	r2, [r7, #20]
 800a52c:	6912      	ldr	r2, [r2, #16]
 800a52e:	fbb3 f1f2 	udiv	r1, r3, r2
 800a532:	fb02 f201 	mul.w	r2, r2, r1
 800a536:	1a9b      	subs	r3, r3, r2
 800a538:	2b00      	cmp	r3, #0
 800a53a:	d11c      	bne.n	800a576 <USBD_LL_DataInStage+0xac>
           (pep->total_length >= pep->maxpacket) &&
 800a53c:	697b      	ldr	r3, [r7, #20]
 800a53e:	689a      	ldr	r2, [r3, #8]
 800a540:	697b      	ldr	r3, [r7, #20]
 800a542:	691b      	ldr	r3, [r3, #16]
        if((pep->total_length % pep->maxpacket == 0U) &&
 800a544:	429a      	cmp	r2, r3
 800a546:	d316      	bcc.n	800a576 <USBD_LL_DataInStage+0xac>
           (pep->total_length < pdev->ep0_data_len))
 800a548:	697b      	ldr	r3, [r7, #20]
 800a54a:	689a      	ldr	r2, [r3, #8]
 800a54c:	68fb      	ldr	r3, [r7, #12]
 800a54e:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
           (pep->total_length >= pep->maxpacket) &&
 800a552:	429a      	cmp	r2, r3
 800a554:	d20f      	bcs.n	800a576 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 800a556:	2200      	movs	r2, #0
 800a558:	2100      	movs	r1, #0
 800a55a:	68f8      	ldr	r0, [r7, #12]
 800a55c:	f000 fe5e 	bl	800b21c <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800a560:	68fb      	ldr	r3, [r7, #12]
 800a562:	2200      	movs	r2, #0
 800a564:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 800a568:	2300      	movs	r3, #0
 800a56a:	2200      	movs	r2, #0
 800a56c:	2100      	movs	r1, #0
 800a56e:	68f8      	ldr	r0, [r7, #12]
 800a570:	f010 fade 	bl	801ab30 <USBD_LL_PrepareReceive>
 800a574:	e026      	b.n	800a5c4 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if((pdev->pClass->EP0_TxSent != NULL)&&
 800a576:	68fb      	ldr	r3, [r7, #12]
 800a578:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800a57c:	68db      	ldr	r3, [r3, #12]
 800a57e:	2b00      	cmp	r3, #0
 800a580:	d00a      	beq.n	800a598 <USBD_LL_DataInStage+0xce>
             (pdev->dev_state == USBD_STATE_CONFIGURED))
 800a582:	68fb      	ldr	r3, [r7, #12]
 800a584:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
          if((pdev->pClass->EP0_TxSent != NULL)&&
 800a588:	2b03      	cmp	r3, #3
 800a58a:	d105      	bne.n	800a598 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800a58c:	68fb      	ldr	r3, [r7, #12]
 800a58e:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800a592:	68db      	ldr	r3, [r3, #12]
 800a594:	68f8      	ldr	r0, [r7, #12]
 800a596:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 800a598:	2180      	movs	r1, #128	; 0x80
 800a59a:	68f8      	ldr	r0, [r7, #12]
 800a59c:	f010 fa1c 	bl	801a9d8 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 800a5a0:	68f8      	ldr	r0, [r7, #12]
 800a5a2:	f000 fe90 	bl	800b2c6 <USBD_CtlReceiveStatus>
 800a5a6:	e00d      	b.n	800a5c4 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800a5a8:	68fb      	ldr	r3, [r7, #12]
 800a5aa:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 800a5ae:	2b04      	cmp	r3, #4
 800a5b0:	d004      	beq.n	800a5bc <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 800a5b2:	68fb      	ldr	r3, [r7, #12]
 800a5b4:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800a5b8:	2b00      	cmp	r3, #0
 800a5ba:	d103      	bne.n	800a5c4 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 800a5bc:	2180      	movs	r1, #128	; 0x80
 800a5be:	68f8      	ldr	r0, [r7, #12]
 800a5c0:	f010 fa0a 	bl	801a9d8 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 800a5c4:	68fb      	ldr	r3, [r7, #12]
 800a5c6:	f893 3278 	ldrb.w	r3, [r3, #632]	; 0x278
 800a5ca:	2b01      	cmp	r3, #1
 800a5cc:	d11d      	bne.n	800a60a <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 800a5ce:	68f8      	ldr	r0, [r7, #12]
 800a5d0:	f7ff fe82 	bl	800a2d8 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800a5d4:	68fb      	ldr	r3, [r7, #12]
 800a5d6:	2200      	movs	r2, #0
 800a5d8:	f883 2278 	strb.w	r2, [r3, #632]	; 0x278
 800a5dc:	e015      	b.n	800a60a <USBD_LL_DataInStage+0x140>
    }
  }
  else if((pdev->pClass->DataIn != NULL) &&
 800a5de:	68fb      	ldr	r3, [r7, #12]
 800a5e0:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800a5e4:	695b      	ldr	r3, [r3, #20]
 800a5e6:	2b00      	cmp	r3, #0
 800a5e8:	d00d      	beq.n	800a606 <USBD_LL_DataInStage+0x13c>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
 800a5ea:	68fb      	ldr	r3, [r7, #12]
 800a5ec:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
  else if((pdev->pClass->DataIn != NULL) &&
 800a5f0:	2b03      	cmp	r3, #3
 800a5f2:	d108      	bne.n	800a606 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 800a5f4:	68fb      	ldr	r3, [r7, #12]
 800a5f6:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800a5fa:	695b      	ldr	r3, [r3, #20]
 800a5fc:	7afa      	ldrb	r2, [r7, #11]
 800a5fe:	4611      	mov	r1, r2
 800a600:	68f8      	ldr	r0, [r7, #12]
 800a602:	4798      	blx	r3
 800a604:	e001      	b.n	800a60a <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800a606:	2302      	movs	r3, #2
 800a608:	e000      	b.n	800a60c <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 800a60a:	2300      	movs	r3, #0
}
 800a60c:	4618      	mov	r0, r3
 800a60e:	3718      	adds	r7, #24
 800a610:	46bd      	mov	sp, r7
 800a612:	bd80      	pop	{r7, pc}

0800a614 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef  *pdev)
{
 800a614:	b580      	push	{r7, lr}
 800a616:	b082      	sub	sp, #8
 800a618:	af00      	add	r7, sp, #0
 800a61a:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800a61c:	2340      	movs	r3, #64	; 0x40
 800a61e:	2200      	movs	r2, #0
 800a620:	2100      	movs	r1, #0
 800a622:	6878      	ldr	r0, [r7, #4]
 800a624:	f010 f993 	bl	801a94e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800a628:	687b      	ldr	r3, [r7, #4]
 800a62a:	2201      	movs	r2, #1
 800a62c:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800a630:	687b      	ldr	r3, [r7, #4]
 800a632:	2240      	movs	r2, #64	; 0x40
 800a634:	f8c3 2150 	str.w	r2, [r3, #336]	; 0x150

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800a638:	2340      	movs	r3, #64	; 0x40
 800a63a:	2200      	movs	r2, #0
 800a63c:	2180      	movs	r1, #128	; 0x80
 800a63e:	6878      	ldr	r0, [r7, #4]
 800a640:	f010 f985 	bl	801a94e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800a644:	687b      	ldr	r3, [r7, #4]
 800a646:	2201      	movs	r2, #1
 800a648:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800a64a:	687b      	ldr	r3, [r7, #4]
 800a64c:	2240      	movs	r2, #64	; 0x40
 800a64e:	625a      	str	r2, [r3, #36]	; 0x24
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a650:	687b      	ldr	r3, [r7, #4]
 800a652:	2201      	movs	r2, #1
 800a654:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  pdev->ep0_state = USBD_EP0_IDLE;
 800a658:	687b      	ldr	r3, [r7, #4]
 800a65a:	2200      	movs	r2, #0
 800a65c:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  pdev->dev_config= 0U;
 800a660:	687b      	ldr	r3, [r7, #4]
 800a662:	2200      	movs	r2, #0
 800a664:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800a666:	687b      	ldr	r3, [r7, #4]
 800a668:	2200      	movs	r2, #0
 800a66a:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c

  if (pdev->pClassData)
 800a66e:	687b      	ldr	r3, [r7, #4]
 800a670:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800a674:	2b00      	cmp	r3, #0
 800a676:	d009      	beq.n	800a68c <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800a678:	687b      	ldr	r3, [r7, #4]
 800a67a:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800a67e:	685b      	ldr	r3, [r3, #4]
 800a680:	687a      	ldr	r2, [r7, #4]
 800a682:	6852      	ldr	r2, [r2, #4]
 800a684:	b2d2      	uxtb	r2, r2
 800a686:	4611      	mov	r1, r2
 800a688:	6878      	ldr	r0, [r7, #4]
 800a68a:	4798      	blx	r3
  }

  return USBD_OK;
 800a68c:	2300      	movs	r3, #0
}
 800a68e:	4618      	mov	r0, r3
 800a690:	3708      	adds	r7, #8
 800a692:	46bd      	mov	sp, r7
 800a694:	bd80      	pop	{r7, pc}

0800a696 <USBD_LL_SetSpeed>:
*         Handle Reset event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef  *pdev, USBD_SpeedTypeDef speed)
{
 800a696:	b480      	push	{r7}
 800a698:	b083      	sub	sp, #12
 800a69a:	af00      	add	r7, sp, #0
 800a69c:	6078      	str	r0, [r7, #4]
 800a69e:	460b      	mov	r3, r1
 800a6a0:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800a6a2:	687b      	ldr	r3, [r7, #4]
 800a6a4:	78fa      	ldrb	r2, [r7, #3]
 800a6a6:	741a      	strb	r2, [r3, #16]
  return USBD_OK;
 800a6a8:	2300      	movs	r3, #0
}
 800a6aa:	4618      	mov	r0, r3
 800a6ac:	370c      	adds	r7, #12
 800a6ae:	46bd      	mov	sp, r7
 800a6b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6b4:	4770      	bx	lr

0800a6b6 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef  *pdev)
{
 800a6b6:	b480      	push	{r7}
 800a6b8:	b083      	sub	sp, #12
 800a6ba:	af00      	add	r7, sp, #0
 800a6bc:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 800a6be:	687b      	ldr	r3, [r7, #4]
 800a6c0:	f893 2274 	ldrb.w	r2, [r3, #628]	; 0x274
 800a6c4:	687b      	ldr	r3, [r7, #4]
 800a6c6:	f883 2275 	strb.w	r2, [r3, #629]	; 0x275
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 800a6ca:	687b      	ldr	r3, [r7, #4]
 800a6cc:	2204      	movs	r2, #4
 800a6ce:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  return USBD_OK;
 800a6d2:	2300      	movs	r3, #0
}
 800a6d4:	4618      	mov	r0, r3
 800a6d6:	370c      	adds	r7, #12
 800a6d8:	46bd      	mov	sp, r7
 800a6da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6de:	4770      	bx	lr

0800a6e0 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef  *pdev)
{
 800a6e0:	b480      	push	{r7}
 800a6e2:	b083      	sub	sp, #12
 800a6e4:	af00      	add	r7, sp, #0
 800a6e6:	6078      	str	r0, [r7, #4]
  pdev->dev_state = pdev->dev_old_state;
 800a6e8:	687b      	ldr	r3, [r7, #4]
 800a6ea:	f893 2275 	ldrb.w	r2, [r3, #629]	; 0x275
 800a6ee:	687b      	ldr	r3, [r7, #4]
 800a6f0:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  return USBD_OK;
 800a6f4:	2300      	movs	r3, #0
}
 800a6f6:	4618      	mov	r0, r3
 800a6f8:	370c      	adds	r7, #12
 800a6fa:	46bd      	mov	sp, r7
 800a6fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a700:	4770      	bx	lr

0800a702 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef  *pdev)
{
 800a702:	b580      	push	{r7, lr}
 800a704:	b082      	sub	sp, #8
 800a706:	af00      	add	r7, sp, #0
 800a708:	6078      	str	r0, [r7, #4]
  if(pdev->dev_state == USBD_STATE_CONFIGURED)
 800a70a:	687b      	ldr	r3, [r7, #4]
 800a70c:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800a710:	2b03      	cmp	r3, #3
 800a712:	d10b      	bne.n	800a72c <USBD_LL_SOF+0x2a>
  {
    if(pdev->pClass->SOF != NULL)
 800a714:	687b      	ldr	r3, [r7, #4]
 800a716:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800a71a:	69db      	ldr	r3, [r3, #28]
 800a71c:	2b00      	cmp	r3, #0
 800a71e:	d005      	beq.n	800a72c <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 800a720:	687b      	ldr	r3, [r7, #4]
 800a722:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800a726:	69db      	ldr	r3, [r3, #28]
 800a728:	6878      	ldr	r0, [r7, #4]
 800a72a:	4798      	blx	r3
    }
  }
  return USBD_OK;
 800a72c:	2300      	movs	r3, #0
}
 800a72e:	4618      	mov	r0, r3
 800a730:	3708      	adds	r7, #8
 800a732:	46bd      	mov	sp, r7
 800a734:	bd80      	pop	{r7, pc}

0800a736 <USBD_LL_IsoINIncomplete>:
*         Handle iso in incomplete event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef  *pdev, uint8_t epnum)
{
 800a736:	b480      	push	{r7}
 800a738:	b083      	sub	sp, #12
 800a73a:	af00      	add	r7, sp, #0
 800a73c:	6078      	str	r0, [r7, #4]
 800a73e:	460b      	mov	r3, r1
 800a740:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 800a742:	2300      	movs	r3, #0
}
 800a744:	4618      	mov	r0, r3
 800a746:	370c      	adds	r7, #12
 800a748:	46bd      	mov	sp, r7
 800a74a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a74e:	4770      	bx	lr

0800a750 <USBD_LL_IsoOUTIncomplete>:
*         Handle iso out incomplete event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef  *pdev, uint8_t epnum)
{
 800a750:	b480      	push	{r7}
 800a752:	b083      	sub	sp, #12
 800a754:	af00      	add	r7, sp, #0
 800a756:	6078      	str	r0, [r7, #4]
 800a758:	460b      	mov	r3, r1
 800a75a:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 800a75c:	2300      	movs	r3, #0
}
 800a75e:	4618      	mov	r0, r3
 800a760:	370c      	adds	r7, #12
 800a762:	46bd      	mov	sp, r7
 800a764:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a768:	4770      	bx	lr

0800a76a <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef  *pdev)
{
 800a76a:	b480      	push	{r7}
 800a76c:	b083      	sub	sp, #12
 800a76e:	af00      	add	r7, sp, #0
 800a770:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800a772:	2300      	movs	r3, #0
}
 800a774:	4618      	mov	r0, r3
 800a776:	370c      	adds	r7, #12
 800a778:	46bd      	mov	sp, r7
 800a77a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a77e:	4770      	bx	lr

0800a780 <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef  *pdev)
{
 800a780:	b580      	push	{r7, lr}
 800a782:	b082      	sub	sp, #8
 800a784:	af00      	add	r7, sp, #0
 800a786:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a788:	687b      	ldr	r3, [r7, #4]
 800a78a:	2201      	movs	r2, #1
 800a78c:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800a790:	687b      	ldr	r3, [r7, #4]
 800a792:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800a796:	685b      	ldr	r3, [r3, #4]
 800a798:	687a      	ldr	r2, [r7, #4]
 800a79a:	6852      	ldr	r2, [r2, #4]
 800a79c:	b2d2      	uxtb	r2, r2
 800a79e:	4611      	mov	r1, r2
 800a7a0:	6878      	ldr	r0, [r7, #4]
 800a7a2:	4798      	blx	r3

  return USBD_OK;
 800a7a4:	2300      	movs	r3, #0
}
 800a7a6:	4618      	mov	r0, r3
 800a7a8:	3708      	adds	r7, #8
 800a7aa:	46bd      	mov	sp, r7
 800a7ac:	bd80      	pop	{r7, pc}
	...

0800a7b0 <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 800a7b0:	b580      	push	{r7, lr}
 800a7b2:	b084      	sub	sp, #16
 800a7b4:	af00      	add	r7, sp, #0
 800a7b6:	6078      	str	r0, [r7, #4]
 800a7b8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a7ba:	2300      	movs	r3, #0
 800a7bc:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a7be:	683b      	ldr	r3, [r7, #0]
 800a7c0:	781b      	ldrb	r3, [r3, #0]
 800a7c2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a7c6:	2b20      	cmp	r3, #32
 800a7c8:	d004      	beq.n	800a7d4 <USBD_StdDevReq+0x24>
 800a7ca:	2b40      	cmp	r3, #64	; 0x40
 800a7cc:	d002      	beq.n	800a7d4 <USBD_StdDevReq+0x24>
 800a7ce:	2b00      	cmp	r3, #0
 800a7d0:	d008      	beq.n	800a7e4 <USBD_StdDevReq+0x34>
 800a7d2:	e04c      	b.n	800a86e <USBD_StdDevReq+0xbe>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    pdev->pClass->Setup(pdev, req);
 800a7d4:	687b      	ldr	r3, [r7, #4]
 800a7d6:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800a7da:	689b      	ldr	r3, [r3, #8]
 800a7dc:	6839      	ldr	r1, [r7, #0]
 800a7de:	6878      	ldr	r0, [r7, #4]
 800a7e0:	4798      	blx	r3
    break;
 800a7e2:	e049      	b.n	800a878 <USBD_StdDevReq+0xc8>

  case USB_REQ_TYPE_STANDARD:

    switch (req->bRequest)
 800a7e4:	683b      	ldr	r3, [r7, #0]
 800a7e6:	785b      	ldrb	r3, [r3, #1]
 800a7e8:	2b09      	cmp	r3, #9
 800a7ea:	d83a      	bhi.n	800a862 <USBD_StdDevReq+0xb2>
 800a7ec:	a201      	add	r2, pc, #4	; (adr r2, 800a7f4 <USBD_StdDevReq+0x44>)
 800a7ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a7f2:	bf00      	nop
 800a7f4:	0800a845 	.word	0x0800a845
 800a7f8:	0800a859 	.word	0x0800a859
 800a7fc:	0800a863 	.word	0x0800a863
 800a800:	0800a84f 	.word	0x0800a84f
 800a804:	0800a863 	.word	0x0800a863
 800a808:	0800a827 	.word	0x0800a827
 800a80c:	0800a81d 	.word	0x0800a81d
 800a810:	0800a863 	.word	0x0800a863
 800a814:	0800a83b 	.word	0x0800a83b
 800a818:	0800a831 	.word	0x0800a831
    {
    case USB_REQ_GET_DESCRIPTOR:

      USBD_GetDescriptor (pdev, req);
 800a81c:	6839      	ldr	r1, [r7, #0]
 800a81e:	6878      	ldr	r0, [r7, #4]
 800a820:	f000 f9d2 	bl	800abc8 <USBD_GetDescriptor>
      break;
 800a824:	e022      	b.n	800a86c <USBD_StdDevReq+0xbc>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress (pdev, req);
 800a826:	6839      	ldr	r1, [r7, #0]
 800a828:	6878      	ldr	r0, [r7, #4]
 800a82a:	f000 fac7 	bl	800adbc <USBD_SetAddress>
      break;
 800a82e:	e01d      	b.n	800a86c <USBD_StdDevReq+0xbc>

    case USB_REQ_SET_CONFIGURATION:
      USBD_SetConfig (pdev, req);
 800a830:	6839      	ldr	r1, [r7, #0]
 800a832:	6878      	ldr	r0, [r7, #4]
 800a834:	f000 fb04 	bl	800ae40 <USBD_SetConfig>
      break;
 800a838:	e018      	b.n	800a86c <USBD_StdDevReq+0xbc>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig (pdev, req);
 800a83a:	6839      	ldr	r1, [r7, #0]
 800a83c:	6878      	ldr	r0, [r7, #4]
 800a83e:	f000 fb8d 	bl	800af5c <USBD_GetConfig>
      break;
 800a842:	e013      	b.n	800a86c <USBD_StdDevReq+0xbc>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus (pdev, req);
 800a844:	6839      	ldr	r1, [r7, #0]
 800a846:	6878      	ldr	r0, [r7, #4]
 800a848:	f000 fbbc 	bl	800afc4 <USBD_GetStatus>
      break;
 800a84c:	e00e      	b.n	800a86c <USBD_StdDevReq+0xbc>


    case USB_REQ_SET_FEATURE:
      USBD_SetFeature (pdev, req);
 800a84e:	6839      	ldr	r1, [r7, #0]
 800a850:	6878      	ldr	r0, [r7, #4]
 800a852:	f000 fbea 	bl	800b02a <USBD_SetFeature>
      break;
 800a856:	e009      	b.n	800a86c <USBD_StdDevReq+0xbc>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature (pdev, req);
 800a858:	6839      	ldr	r1, [r7, #0]
 800a85a:	6878      	ldr	r0, [r7, #4]
 800a85c:	f000 fbf9 	bl	800b052 <USBD_ClrFeature>
      break;
 800a860:	e004      	b.n	800a86c <USBD_StdDevReq+0xbc>

    default:
      USBD_CtlError(pdev, req);
 800a862:	6839      	ldr	r1, [r7, #0]
 800a864:	6878      	ldr	r0, [r7, #4]
 800a866:	f000 fc52 	bl	800b10e <USBD_CtlError>
      break;
 800a86a:	bf00      	nop
    }
    break;
 800a86c:	e004      	b.n	800a878 <USBD_StdDevReq+0xc8>

  default:
    USBD_CtlError(pdev, req);
 800a86e:	6839      	ldr	r1, [r7, #0]
 800a870:	6878      	ldr	r0, [r7, #4]
 800a872:	f000 fc4c 	bl	800b10e <USBD_CtlError>
    break;
 800a876:	bf00      	nop
  }

  return ret;
 800a878:	7bfb      	ldrb	r3, [r7, #15]
}
 800a87a:	4618      	mov	r0, r3
 800a87c:	3710      	adds	r7, #16
 800a87e:	46bd      	mov	sp, r7
 800a880:	bd80      	pop	{r7, pc}
 800a882:	bf00      	nop

0800a884 <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 800a884:	b580      	push	{r7, lr}
 800a886:	b084      	sub	sp, #16
 800a888:	af00      	add	r7, sp, #0
 800a88a:	6078      	str	r0, [r7, #4]
 800a88c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a88e:	2300      	movs	r3, #0
 800a890:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a892:	683b      	ldr	r3, [r7, #0]
 800a894:	781b      	ldrb	r3, [r3, #0]
 800a896:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a89a:	2b20      	cmp	r3, #32
 800a89c:	d003      	beq.n	800a8a6 <USBD_StdItfReq+0x22>
 800a89e:	2b40      	cmp	r3, #64	; 0x40
 800a8a0:	d001      	beq.n	800a8a6 <USBD_StdItfReq+0x22>
 800a8a2:	2b00      	cmp	r3, #0
 800a8a4:	d12a      	bne.n	800a8fc <USBD_StdItfReq+0x78>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 800a8a6:	687b      	ldr	r3, [r7, #4]
 800a8a8:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800a8ac:	3b01      	subs	r3, #1
 800a8ae:	2b02      	cmp	r3, #2
 800a8b0:	d81d      	bhi.n	800a8ee <USBD_StdItfReq+0x6a>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800a8b2:	683b      	ldr	r3, [r7, #0]
 800a8b4:	889b      	ldrh	r3, [r3, #4]
 800a8b6:	b2db      	uxtb	r3, r3
 800a8b8:	2b01      	cmp	r3, #1
 800a8ba:	d813      	bhi.n	800a8e4 <USBD_StdItfReq+0x60>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup (pdev, req);
 800a8bc:	687b      	ldr	r3, [r7, #4]
 800a8be:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800a8c2:	689b      	ldr	r3, [r3, #8]
 800a8c4:	6839      	ldr	r1, [r7, #0]
 800a8c6:	6878      	ldr	r0, [r7, #4]
 800a8c8:	4798      	blx	r3
 800a8ca:	4603      	mov	r3, r0
 800a8cc:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 800a8ce:	683b      	ldr	r3, [r7, #0]
 800a8d0:	88db      	ldrh	r3, [r3, #6]
 800a8d2:	2b00      	cmp	r3, #0
 800a8d4:	d110      	bne.n	800a8f8 <USBD_StdItfReq+0x74>
 800a8d6:	7bfb      	ldrb	r3, [r7, #15]
 800a8d8:	2b00      	cmp	r3, #0
 800a8da:	d10d      	bne.n	800a8f8 <USBD_StdItfReq+0x74>
        {
          USBD_CtlSendStatus(pdev);
 800a8dc:	6878      	ldr	r0, [r7, #4]
 800a8de:	f000 fcdf 	bl	800b2a0 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 800a8e2:	e009      	b.n	800a8f8 <USBD_StdItfReq+0x74>
        USBD_CtlError(pdev, req);
 800a8e4:	6839      	ldr	r1, [r7, #0]
 800a8e6:	6878      	ldr	r0, [r7, #4]
 800a8e8:	f000 fc11 	bl	800b10e <USBD_CtlError>
      break;
 800a8ec:	e004      	b.n	800a8f8 <USBD_StdItfReq+0x74>

    default:
      USBD_CtlError(pdev, req);
 800a8ee:	6839      	ldr	r1, [r7, #0]
 800a8f0:	6878      	ldr	r0, [r7, #4]
 800a8f2:	f000 fc0c 	bl	800b10e <USBD_CtlError>
      break;
 800a8f6:	e000      	b.n	800a8fa <USBD_StdItfReq+0x76>
      break;
 800a8f8:	bf00      	nop
    }
    break;
 800a8fa:	e004      	b.n	800a906 <USBD_StdItfReq+0x82>

  default:
    USBD_CtlError(pdev, req);
 800a8fc:	6839      	ldr	r1, [r7, #0]
 800a8fe:	6878      	ldr	r0, [r7, #4]
 800a900:	f000 fc05 	bl	800b10e <USBD_CtlError>
    break;
 800a904:	bf00      	nop
  }

  return USBD_OK;
 800a906:	2300      	movs	r3, #0
}
 800a908:	4618      	mov	r0, r3
 800a90a:	3710      	adds	r7, #16
 800a90c:	46bd      	mov	sp, r7
 800a90e:	bd80      	pop	{r7, pc}

0800a910 <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 800a910:	b580      	push	{r7, lr}
 800a912:	b084      	sub	sp, #16
 800a914:	af00      	add	r7, sp, #0
 800a916:	6078      	str	r0, [r7, #4]
 800a918:	6039      	str	r1, [r7, #0]

  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800a91a:	2300      	movs	r3, #0
 800a91c:	73fb      	strb	r3, [r7, #15]
  USBD_EndpointTypeDef   *pep;
  ep_addr  = LOBYTE(req->wIndex);
 800a91e:	683b      	ldr	r3, [r7, #0]
 800a920:	889b      	ldrh	r3, [r3, #4]
 800a922:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a924:	683b      	ldr	r3, [r7, #0]
 800a926:	781b      	ldrb	r3, [r3, #0]
 800a928:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a92c:	2b20      	cmp	r3, #32
 800a92e:	d004      	beq.n	800a93a <USBD_StdEPReq+0x2a>
 800a930:	2b40      	cmp	r3, #64	; 0x40
 800a932:	d002      	beq.n	800a93a <USBD_StdEPReq+0x2a>
 800a934:	2b00      	cmp	r3, #0
 800a936:	d008      	beq.n	800a94a <USBD_StdEPReq+0x3a>
 800a938:	e13b      	b.n	800abb2 <USBD_StdEPReq+0x2a2>
  {

  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    pdev->pClass->Setup (pdev, req);
 800a93a:	687b      	ldr	r3, [r7, #4]
 800a93c:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800a940:	689b      	ldr	r3, [r3, #8]
 800a942:	6839      	ldr	r1, [r7, #0]
 800a944:	6878      	ldr	r0, [r7, #4]
 800a946:	4798      	blx	r3
    break;
 800a948:	e138      	b.n	800abbc <USBD_StdEPReq+0x2ac>

  case USB_REQ_TYPE_STANDARD:
    /* Check if it is a class request */
    if ((req->bmRequest & 0x60U) == 0x20U)
 800a94a:	683b      	ldr	r3, [r7, #0]
 800a94c:	781b      	ldrb	r3, [r3, #0]
 800a94e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a952:	2b20      	cmp	r3, #32
 800a954:	d10a      	bne.n	800a96c <USBD_StdEPReq+0x5c>
    {
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup (pdev, req);
 800a956:	687b      	ldr	r3, [r7, #4]
 800a958:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800a95c:	689b      	ldr	r3, [r3, #8]
 800a95e:	6839      	ldr	r1, [r7, #0]
 800a960:	6878      	ldr	r0, [r7, #4]
 800a962:	4798      	blx	r3
 800a964:	4603      	mov	r3, r0
 800a966:	73fb      	strb	r3, [r7, #15]

      return ret;
 800a968:	7bfb      	ldrb	r3, [r7, #15]
 800a96a:	e128      	b.n	800abbe <USBD_StdEPReq+0x2ae>
    }

    switch (req->bRequest)
 800a96c:	683b      	ldr	r3, [r7, #0]
 800a96e:	785b      	ldrb	r3, [r3, #1]
 800a970:	2b01      	cmp	r3, #1
 800a972:	d03e      	beq.n	800a9f2 <USBD_StdEPReq+0xe2>
 800a974:	2b03      	cmp	r3, #3
 800a976:	d002      	beq.n	800a97e <USBD_StdEPReq+0x6e>
 800a978:	2b00      	cmp	r3, #0
 800a97a:	d070      	beq.n	800aa5e <USBD_StdEPReq+0x14e>
 800a97c:	e113      	b.n	800aba6 <USBD_StdEPReq+0x296>
    {

    case USB_REQ_SET_FEATURE :

      switch (pdev->dev_state)
 800a97e:	687b      	ldr	r3, [r7, #4]
 800a980:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800a984:	2b02      	cmp	r3, #2
 800a986:	d002      	beq.n	800a98e <USBD_StdEPReq+0x7e>
 800a988:	2b03      	cmp	r3, #3
 800a98a:	d015      	beq.n	800a9b8 <USBD_StdEPReq+0xa8>
 800a98c:	e02b      	b.n	800a9e6 <USBD_StdEPReq+0xd6>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a98e:	7bbb      	ldrb	r3, [r7, #14]
 800a990:	2b00      	cmp	r3, #0
 800a992:	d00c      	beq.n	800a9ae <USBD_StdEPReq+0x9e>
 800a994:	7bbb      	ldrb	r3, [r7, #14]
 800a996:	2b80      	cmp	r3, #128	; 0x80
 800a998:	d009      	beq.n	800a9ae <USBD_StdEPReq+0x9e>
        {
          USBD_LL_StallEP(pdev, ep_addr);
 800a99a:	7bbb      	ldrb	r3, [r7, #14]
 800a99c:	4619      	mov	r1, r3
 800a99e:	6878      	ldr	r0, [r7, #4]
 800a9a0:	f010 f81a 	bl	801a9d8 <USBD_LL_StallEP>
          USBD_LL_StallEP(pdev, 0x80U);
 800a9a4:	2180      	movs	r1, #128	; 0x80
 800a9a6:	6878      	ldr	r0, [r7, #4]
 800a9a8:	f010 f816 	bl	801a9d8 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 800a9ac:	e020      	b.n	800a9f0 <USBD_StdEPReq+0xe0>
          USBD_CtlError(pdev, req);
 800a9ae:	6839      	ldr	r1, [r7, #0]
 800a9b0:	6878      	ldr	r0, [r7, #4]
 800a9b2:	f000 fbac 	bl	800b10e <USBD_CtlError>
        break;
 800a9b6:	e01b      	b.n	800a9f0 <USBD_StdEPReq+0xe0>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 800a9b8:	683b      	ldr	r3, [r7, #0]
 800a9ba:	885b      	ldrh	r3, [r3, #2]
 800a9bc:	2b00      	cmp	r3, #0
 800a9be:	d10e      	bne.n	800a9de <USBD_StdEPReq+0xce>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800a9c0:	7bbb      	ldrb	r3, [r7, #14]
 800a9c2:	2b00      	cmp	r3, #0
 800a9c4:	d00b      	beq.n	800a9de <USBD_StdEPReq+0xce>
 800a9c6:	7bbb      	ldrb	r3, [r7, #14]
 800a9c8:	2b80      	cmp	r3, #128	; 0x80
 800a9ca:	d008      	beq.n	800a9de <USBD_StdEPReq+0xce>
 800a9cc:	683b      	ldr	r3, [r7, #0]
 800a9ce:	88db      	ldrh	r3, [r3, #6]
 800a9d0:	2b00      	cmp	r3, #0
 800a9d2:	d104      	bne.n	800a9de <USBD_StdEPReq+0xce>
          {
            USBD_LL_StallEP(pdev, ep_addr);
 800a9d4:	7bbb      	ldrb	r3, [r7, #14]
 800a9d6:	4619      	mov	r1, r3
 800a9d8:	6878      	ldr	r0, [r7, #4]
 800a9da:	f00f fffd 	bl	801a9d8 <USBD_LL_StallEP>
          }
        }
        USBD_CtlSendStatus(pdev);
 800a9de:	6878      	ldr	r0, [r7, #4]
 800a9e0:	f000 fc5e 	bl	800b2a0 <USBD_CtlSendStatus>

        break;
 800a9e4:	e004      	b.n	800a9f0 <USBD_StdEPReq+0xe0>

      default:
        USBD_CtlError(pdev, req);
 800a9e6:	6839      	ldr	r1, [r7, #0]
 800a9e8:	6878      	ldr	r0, [r7, #4]
 800a9ea:	f000 fb90 	bl	800b10e <USBD_CtlError>
        break;
 800a9ee:	bf00      	nop
      }
      break;
 800a9f0:	e0de      	b.n	800abb0 <USBD_StdEPReq+0x2a0>

    case USB_REQ_CLEAR_FEATURE :

      switch (pdev->dev_state)
 800a9f2:	687b      	ldr	r3, [r7, #4]
 800a9f4:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800a9f8:	2b02      	cmp	r3, #2
 800a9fa:	d002      	beq.n	800aa02 <USBD_StdEPReq+0xf2>
 800a9fc:	2b03      	cmp	r3, #3
 800a9fe:	d015      	beq.n	800aa2c <USBD_StdEPReq+0x11c>
 800aa00:	e026      	b.n	800aa50 <USBD_StdEPReq+0x140>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800aa02:	7bbb      	ldrb	r3, [r7, #14]
 800aa04:	2b00      	cmp	r3, #0
 800aa06:	d00c      	beq.n	800aa22 <USBD_StdEPReq+0x112>
 800aa08:	7bbb      	ldrb	r3, [r7, #14]
 800aa0a:	2b80      	cmp	r3, #128	; 0x80
 800aa0c:	d009      	beq.n	800aa22 <USBD_StdEPReq+0x112>
        {
          USBD_LL_StallEP(pdev, ep_addr);
 800aa0e:	7bbb      	ldrb	r3, [r7, #14]
 800aa10:	4619      	mov	r1, r3
 800aa12:	6878      	ldr	r0, [r7, #4]
 800aa14:	f00f ffe0 	bl	801a9d8 <USBD_LL_StallEP>
          USBD_LL_StallEP(pdev, 0x80U);
 800aa18:	2180      	movs	r1, #128	; 0x80
 800aa1a:	6878      	ldr	r0, [r7, #4]
 800aa1c:	f00f ffdc 	bl	801a9d8 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 800aa20:	e01c      	b.n	800aa5c <USBD_StdEPReq+0x14c>
          USBD_CtlError(pdev, req);
 800aa22:	6839      	ldr	r1, [r7, #0]
 800aa24:	6878      	ldr	r0, [r7, #4]
 800aa26:	f000 fb72 	bl	800b10e <USBD_CtlError>
        break;
 800aa2a:	e017      	b.n	800aa5c <USBD_StdEPReq+0x14c>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 800aa2c:	683b      	ldr	r3, [r7, #0]
 800aa2e:	885b      	ldrh	r3, [r3, #2]
 800aa30:	2b00      	cmp	r3, #0
 800aa32:	d112      	bne.n	800aa5a <USBD_StdEPReq+0x14a>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 800aa34:	7bbb      	ldrb	r3, [r7, #14]
 800aa36:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800aa3a:	2b00      	cmp	r3, #0
 800aa3c:	d004      	beq.n	800aa48 <USBD_StdEPReq+0x138>
          {
            USBD_LL_ClearStallEP(pdev, ep_addr);
 800aa3e:	7bbb      	ldrb	r3, [r7, #14]
 800aa40:	4619      	mov	r1, r3
 800aa42:	6878      	ldr	r0, [r7, #4]
 800aa44:	f00f ffe7 	bl	801aa16 <USBD_LL_ClearStallEP>
          }
          USBD_CtlSendStatus(pdev);
 800aa48:	6878      	ldr	r0, [r7, #4]
 800aa4a:	f000 fc29 	bl	800b2a0 <USBD_CtlSendStatus>
        }
        break;
 800aa4e:	e004      	b.n	800aa5a <USBD_StdEPReq+0x14a>

      default:
        USBD_CtlError(pdev, req);
 800aa50:	6839      	ldr	r1, [r7, #0]
 800aa52:	6878      	ldr	r0, [r7, #4]
 800aa54:	f000 fb5b 	bl	800b10e <USBD_CtlError>
        break;
 800aa58:	e000      	b.n	800aa5c <USBD_StdEPReq+0x14c>
        break;
 800aa5a:	bf00      	nop
      }
      break;
 800aa5c:	e0a8      	b.n	800abb0 <USBD_StdEPReq+0x2a0>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 800aa5e:	687b      	ldr	r3, [r7, #4]
 800aa60:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800aa64:	2b02      	cmp	r3, #2
 800aa66:	d002      	beq.n	800aa6e <USBD_StdEPReq+0x15e>
 800aa68:	2b03      	cmp	r3, #3
 800aa6a:	d031      	beq.n	800aad0 <USBD_StdEPReq+0x1c0>
 800aa6c:	e095      	b.n	800ab9a <USBD_StdEPReq+0x28a>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800aa6e:	7bbb      	ldrb	r3, [r7, #14]
 800aa70:	2b00      	cmp	r3, #0
 800aa72:	d007      	beq.n	800aa84 <USBD_StdEPReq+0x174>
 800aa74:	7bbb      	ldrb	r3, [r7, #14]
 800aa76:	2b80      	cmp	r3, #128	; 0x80
 800aa78:	d004      	beq.n	800aa84 <USBD_StdEPReq+0x174>
        {
          USBD_CtlError(pdev, req);
 800aa7a:	6839      	ldr	r1, [r7, #0]
 800aa7c:	6878      	ldr	r0, [r7, #4]
 800aa7e:	f000 fb46 	bl	800b10e <USBD_CtlError>
          break;
 800aa82:	e08f      	b.n	800aba4 <USBD_StdEPReq+0x294>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 800aa84:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800aa88:	2b00      	cmp	r3, #0
 800aa8a:	da0b      	bge.n	800aaa4 <USBD_StdEPReq+0x194>
 800aa8c:	7bbb      	ldrb	r3, [r7, #14]
 800aa8e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800aa92:	4613      	mov	r3, r2
 800aa94:	009b      	lsls	r3, r3, #2
 800aa96:	4413      	add	r3, r2
 800aa98:	009b      	lsls	r3, r3, #2
 800aa9a:	3310      	adds	r3, #16
 800aa9c:	687a      	ldr	r2, [r7, #4]
 800aa9e:	4413      	add	r3, r2
 800aaa0:	3304      	adds	r3, #4
 800aaa2:	e00a      	b.n	800aaba <USBD_StdEPReq+0x1aa>
          &pdev->ep_out[ep_addr & 0x7FU];
 800aaa4:	7bbb      	ldrb	r3, [r7, #14]
 800aaa6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 800aaaa:	4613      	mov	r3, r2
 800aaac:	009b      	lsls	r3, r3, #2
 800aaae:	4413      	add	r3, r2
 800aab0:	009b      	lsls	r3, r3, #2
 800aab2:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 800aab6:	687a      	ldr	r2, [r7, #4]
 800aab8:	4413      	add	r3, r2
 800aaba:	60bb      	str	r3, [r7, #8]

          pep->status = 0x0000U;
 800aabc:	68bb      	ldr	r3, [r7, #8]
 800aabe:	2200      	movs	r2, #0
 800aac0:	601a      	str	r2, [r3, #0]

          USBD_CtlSendData (pdev, (uint8_t *)(void *)&pep->status, 2U);
 800aac2:	68bb      	ldr	r3, [r7, #8]
 800aac4:	2202      	movs	r2, #2
 800aac6:	4619      	mov	r1, r3
 800aac8:	6878      	ldr	r0, [r7, #4]
 800aaca:	f000 fb8b 	bl	800b1e4 <USBD_CtlSendData>
          break;
 800aace:	e069      	b.n	800aba4 <USBD_StdEPReq+0x294>

      case USBD_STATE_CONFIGURED:
        if((ep_addr & 0x80U) == 0x80U)
 800aad0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800aad4:	2b00      	cmp	r3, #0
 800aad6:	da11      	bge.n	800aafc <USBD_StdEPReq+0x1ec>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800aad8:	7bbb      	ldrb	r3, [r7, #14]
 800aada:	f003 020f 	and.w	r2, r3, #15
 800aade:	6879      	ldr	r1, [r7, #4]
 800aae0:	4613      	mov	r3, r2
 800aae2:	009b      	lsls	r3, r3, #2
 800aae4:	4413      	add	r3, r2
 800aae6:	009b      	lsls	r3, r3, #2
 800aae8:	440b      	add	r3, r1
 800aaea:	3318      	adds	r3, #24
 800aaec:	681b      	ldr	r3, [r3, #0]
 800aaee:	2b00      	cmp	r3, #0
 800aaf0:	d117      	bne.n	800ab22 <USBD_StdEPReq+0x212>
          {
            USBD_CtlError(pdev, req);
 800aaf2:	6839      	ldr	r1, [r7, #0]
 800aaf4:	6878      	ldr	r0, [r7, #4]
 800aaf6:	f000 fb0a 	bl	800b10e <USBD_CtlError>
            break;
 800aafa:	e053      	b.n	800aba4 <USBD_StdEPReq+0x294>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800aafc:	7bbb      	ldrb	r3, [r7, #14]
 800aafe:	f003 020f 	and.w	r2, r3, #15
 800ab02:	6879      	ldr	r1, [r7, #4]
 800ab04:	4613      	mov	r3, r2
 800ab06:	009b      	lsls	r3, r3, #2
 800ab08:	4413      	add	r3, r2
 800ab0a:	009b      	lsls	r3, r3, #2
 800ab0c:	440b      	add	r3, r1
 800ab0e:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800ab12:	681b      	ldr	r3, [r3, #0]
 800ab14:	2b00      	cmp	r3, #0
 800ab16:	d104      	bne.n	800ab22 <USBD_StdEPReq+0x212>
          {
            USBD_CtlError(pdev, req);
 800ab18:	6839      	ldr	r1, [r7, #0]
 800ab1a:	6878      	ldr	r0, [r7, #4]
 800ab1c:	f000 faf7 	bl	800b10e <USBD_CtlError>
            break;
 800ab20:	e040      	b.n	800aba4 <USBD_StdEPReq+0x294>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 800ab22:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ab26:	2b00      	cmp	r3, #0
 800ab28:	da0b      	bge.n	800ab42 <USBD_StdEPReq+0x232>
 800ab2a:	7bbb      	ldrb	r3, [r7, #14]
 800ab2c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800ab30:	4613      	mov	r3, r2
 800ab32:	009b      	lsls	r3, r3, #2
 800ab34:	4413      	add	r3, r2
 800ab36:	009b      	lsls	r3, r3, #2
 800ab38:	3310      	adds	r3, #16
 800ab3a:	687a      	ldr	r2, [r7, #4]
 800ab3c:	4413      	add	r3, r2
 800ab3e:	3304      	adds	r3, #4
 800ab40:	e00a      	b.n	800ab58 <USBD_StdEPReq+0x248>
          &pdev->ep_out[ep_addr & 0x7FU];
 800ab42:	7bbb      	ldrb	r3, [r7, #14]
 800ab44:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 800ab48:	4613      	mov	r3, r2
 800ab4a:	009b      	lsls	r3, r3, #2
 800ab4c:	4413      	add	r3, r2
 800ab4e:	009b      	lsls	r3, r3, #2
 800ab50:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 800ab54:	687a      	ldr	r2, [r7, #4]
 800ab56:	4413      	add	r3, r2
 800ab58:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800ab5a:	7bbb      	ldrb	r3, [r7, #14]
 800ab5c:	2b00      	cmp	r3, #0
 800ab5e:	d002      	beq.n	800ab66 <USBD_StdEPReq+0x256>
 800ab60:	7bbb      	ldrb	r3, [r7, #14]
 800ab62:	2b80      	cmp	r3, #128	; 0x80
 800ab64:	d103      	bne.n	800ab6e <USBD_StdEPReq+0x25e>
          {
            pep->status = 0x0000U;
 800ab66:	68bb      	ldr	r3, [r7, #8]
 800ab68:	2200      	movs	r2, #0
 800ab6a:	601a      	str	r2, [r3, #0]
 800ab6c:	e00e      	b.n	800ab8c <USBD_StdEPReq+0x27c>
          }
          else if(USBD_LL_IsStallEP(pdev, ep_addr))
 800ab6e:	7bbb      	ldrb	r3, [r7, #14]
 800ab70:	4619      	mov	r1, r3
 800ab72:	6878      	ldr	r0, [r7, #4]
 800ab74:	f00f ff6e 	bl	801aa54 <USBD_LL_IsStallEP>
 800ab78:	4603      	mov	r3, r0
 800ab7a:	2b00      	cmp	r3, #0
 800ab7c:	d003      	beq.n	800ab86 <USBD_StdEPReq+0x276>
          {
            pep->status = 0x0001U;
 800ab7e:	68bb      	ldr	r3, [r7, #8]
 800ab80:	2201      	movs	r2, #1
 800ab82:	601a      	str	r2, [r3, #0]
 800ab84:	e002      	b.n	800ab8c <USBD_StdEPReq+0x27c>
          }
          else
          {
            pep->status = 0x0000U;
 800ab86:	68bb      	ldr	r3, [r7, #8]
 800ab88:	2200      	movs	r2, #0
 800ab8a:	601a      	str	r2, [r3, #0]
          }

          USBD_CtlSendData (pdev, (uint8_t *)(void *)&pep->status, 2U);
 800ab8c:	68bb      	ldr	r3, [r7, #8]
 800ab8e:	2202      	movs	r2, #2
 800ab90:	4619      	mov	r1, r3
 800ab92:	6878      	ldr	r0, [r7, #4]
 800ab94:	f000 fb26 	bl	800b1e4 <USBD_CtlSendData>
          break;
 800ab98:	e004      	b.n	800aba4 <USBD_StdEPReq+0x294>

      default:
        USBD_CtlError(pdev, req);
 800ab9a:	6839      	ldr	r1, [r7, #0]
 800ab9c:	6878      	ldr	r0, [r7, #4]
 800ab9e:	f000 fab6 	bl	800b10e <USBD_CtlError>
        break;
 800aba2:	bf00      	nop
      }
      break;
 800aba4:	e004      	b.n	800abb0 <USBD_StdEPReq+0x2a0>

    default:
      USBD_CtlError(pdev, req);
 800aba6:	6839      	ldr	r1, [r7, #0]
 800aba8:	6878      	ldr	r0, [r7, #4]
 800abaa:	f000 fab0 	bl	800b10e <USBD_CtlError>
      break;
 800abae:	bf00      	nop
    }
    break;
 800abb0:	e004      	b.n	800abbc <USBD_StdEPReq+0x2ac>

  default:
    USBD_CtlError(pdev, req);
 800abb2:	6839      	ldr	r1, [r7, #0]
 800abb4:	6878      	ldr	r0, [r7, #4]
 800abb6:	f000 faaa 	bl	800b10e <USBD_CtlError>
    break;
 800abba:	bf00      	nop
  }

  return ret;
 800abbc:	7bfb      	ldrb	r3, [r7, #15]
}
 800abbe:	4618      	mov	r0, r3
 800abc0:	3710      	adds	r7, #16
 800abc2:	46bd      	mov	sp, r7
 800abc4:	bd80      	pop	{r7, pc}
	...

0800abc8 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev ,
                               USBD_SetupReqTypedef *req)
{
 800abc8:	b580      	push	{r7, lr}
 800abca:	b084      	sub	sp, #16
 800abcc:	af00      	add	r7, sp, #0
 800abce:	6078      	str	r0, [r7, #4]
 800abd0:	6039      	str	r1, [r7, #0]
  uint16_t len;
  uint8_t *pbuf;


  switch (req->wValue >> 8)
 800abd2:	683b      	ldr	r3, [r7, #0]
 800abd4:	885b      	ldrh	r3, [r3, #2]
 800abd6:	0a1b      	lsrs	r3, r3, #8
 800abd8:	b29b      	uxth	r3, r3
 800abda:	3b01      	subs	r3, #1
 800abdc:	2b06      	cmp	r3, #6
 800abde:	f200 80c9 	bhi.w	800ad74 <USBD_GetDescriptor+0x1ac>
 800abe2:	a201      	add	r2, pc, #4	; (adr r2, 800abe8 <USBD_GetDescriptor+0x20>)
 800abe4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800abe8:	0800ac05 	.word	0x0800ac05
 800abec:	0800ac1d 	.word	0x0800ac1d
 800abf0:	0800ac5d 	.word	0x0800ac5d
 800abf4:	0800ad75 	.word	0x0800ad75
 800abf8:	0800ad75 	.word	0x0800ad75
 800abfc:	0800ad21 	.word	0x0800ad21
 800ac00:	0800ad47 	.word	0x0800ad47
  case USB_DESC_TYPE_BOS:
    pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
    break;
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800ac04:	687b      	ldr	r3, [r7, #4]
 800ac06:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 800ac0a:	681b      	ldr	r3, [r3, #0]
 800ac0c:	687a      	ldr	r2, [r7, #4]
 800ac0e:	7c12      	ldrb	r2, [r2, #16]
 800ac10:	f107 010a 	add.w	r1, r7, #10
 800ac14:	4610      	mov	r0, r2
 800ac16:	4798      	blx	r3
 800ac18:	60f8      	str	r0, [r7, #12]
    break;
 800ac1a:	e0b0      	b.n	800ad7e <USBD_GetDescriptor+0x1b6>

  case USB_DESC_TYPE_CONFIGURATION:
    if(pdev->dev_speed == USBD_SPEED_HIGH )
 800ac1c:	687b      	ldr	r3, [r7, #4]
 800ac1e:	7c1b      	ldrb	r3, [r3, #16]
 800ac20:	2b00      	cmp	r3, #0
 800ac22:	d10d      	bne.n	800ac40 <USBD_GetDescriptor+0x78>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetHSConfigDescriptor(&len);
 800ac24:	687b      	ldr	r3, [r7, #4]
 800ac26:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800ac2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ac2c:	f107 020a 	add.w	r2, r7, #10
 800ac30:	4610      	mov	r0, r2
 800ac32:	4798      	blx	r3
 800ac34:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800ac36:	68fb      	ldr	r3, [r7, #12]
 800ac38:	3301      	adds	r3, #1
 800ac3a:	2202      	movs	r2, #2
 800ac3c:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 800ac3e:	e09e      	b.n	800ad7e <USBD_GetDescriptor+0x1b6>
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
 800ac40:	687b      	ldr	r3, [r7, #4]
 800ac42:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800ac46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ac48:	f107 020a 	add.w	r2, r7, #10
 800ac4c:	4610      	mov	r0, r2
 800ac4e:	4798      	blx	r3
 800ac50:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800ac52:	68fb      	ldr	r3, [r7, #12]
 800ac54:	3301      	adds	r3, #1
 800ac56:	2202      	movs	r2, #2
 800ac58:	701a      	strb	r2, [r3, #0]
    break;
 800ac5a:	e090      	b.n	800ad7e <USBD_GetDescriptor+0x1b6>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 800ac5c:	683b      	ldr	r3, [r7, #0]
 800ac5e:	885b      	ldrh	r3, [r3, #2]
 800ac60:	b2db      	uxtb	r3, r3
 800ac62:	2b05      	cmp	r3, #5
 800ac64:	d856      	bhi.n	800ad14 <USBD_GetDescriptor+0x14c>
 800ac66:	a201      	add	r2, pc, #4	; (adr r2, 800ac6c <USBD_GetDescriptor+0xa4>)
 800ac68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ac6c:	0800ac85 	.word	0x0800ac85
 800ac70:	0800ac9d 	.word	0x0800ac9d
 800ac74:	0800acb5 	.word	0x0800acb5
 800ac78:	0800accd 	.word	0x0800accd
 800ac7c:	0800ace5 	.word	0x0800ace5
 800ac80:	0800acfd 	.word	0x0800acfd
    {
    case USBD_IDX_LANGID_STR:
     pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800ac84:	687b      	ldr	r3, [r7, #4]
 800ac86:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 800ac8a:	685b      	ldr	r3, [r3, #4]
 800ac8c:	687a      	ldr	r2, [r7, #4]
 800ac8e:	7c12      	ldrb	r2, [r2, #16]
 800ac90:	f107 010a 	add.w	r1, r7, #10
 800ac94:	4610      	mov	r0, r2
 800ac96:	4798      	blx	r3
 800ac98:	60f8      	str	r0, [r7, #12]
      break;
 800ac9a:	e040      	b.n	800ad1e <USBD_GetDescriptor+0x156>

    case USBD_IDX_MFC_STR:
      pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800ac9c:	687b      	ldr	r3, [r7, #4]
 800ac9e:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 800aca2:	689b      	ldr	r3, [r3, #8]
 800aca4:	687a      	ldr	r2, [r7, #4]
 800aca6:	7c12      	ldrb	r2, [r2, #16]
 800aca8:	f107 010a 	add.w	r1, r7, #10
 800acac:	4610      	mov	r0, r2
 800acae:	4798      	blx	r3
 800acb0:	60f8      	str	r0, [r7, #12]
      break;
 800acb2:	e034      	b.n	800ad1e <USBD_GetDescriptor+0x156>

    case USBD_IDX_PRODUCT_STR:
      pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800acb4:	687b      	ldr	r3, [r7, #4]
 800acb6:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 800acba:	68db      	ldr	r3, [r3, #12]
 800acbc:	687a      	ldr	r2, [r7, #4]
 800acbe:	7c12      	ldrb	r2, [r2, #16]
 800acc0:	f107 010a 	add.w	r1, r7, #10
 800acc4:	4610      	mov	r0, r2
 800acc6:	4798      	blx	r3
 800acc8:	60f8      	str	r0, [r7, #12]
      break;
 800acca:	e028      	b.n	800ad1e <USBD_GetDescriptor+0x156>

    case USBD_IDX_SERIAL_STR:
      pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800accc:	687b      	ldr	r3, [r7, #4]
 800acce:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 800acd2:	691b      	ldr	r3, [r3, #16]
 800acd4:	687a      	ldr	r2, [r7, #4]
 800acd6:	7c12      	ldrb	r2, [r2, #16]
 800acd8:	f107 010a 	add.w	r1, r7, #10
 800acdc:	4610      	mov	r0, r2
 800acde:	4798      	blx	r3
 800ace0:	60f8      	str	r0, [r7, #12]
      break;
 800ace2:	e01c      	b.n	800ad1e <USBD_GetDescriptor+0x156>

    case USBD_IDX_CONFIG_STR:
      pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800ace4:	687b      	ldr	r3, [r7, #4]
 800ace6:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 800acea:	695b      	ldr	r3, [r3, #20]
 800acec:	687a      	ldr	r2, [r7, #4]
 800acee:	7c12      	ldrb	r2, [r2, #16]
 800acf0:	f107 010a 	add.w	r1, r7, #10
 800acf4:	4610      	mov	r0, r2
 800acf6:	4798      	blx	r3
 800acf8:	60f8      	str	r0, [r7, #12]
      break;
 800acfa:	e010      	b.n	800ad1e <USBD_GetDescriptor+0x156>

    case USBD_IDX_INTERFACE_STR:
      pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800acfc:	687b      	ldr	r3, [r7, #4]
 800acfe:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 800ad02:	699b      	ldr	r3, [r3, #24]
 800ad04:	687a      	ldr	r2, [r7, #4]
 800ad06:	7c12      	ldrb	r2, [r2, #16]
 800ad08:	f107 010a 	add.w	r1, r7, #10
 800ad0c:	4610      	mov	r0, r2
 800ad0e:	4798      	blx	r3
 800ad10:	60f8      	str	r0, [r7, #12]
      break;
 800ad12:	e004      	b.n	800ad1e <USBD_GetDescriptor+0x156>
    default:
#if (USBD_SUPPORT_USER_STRING == 1U)
      pbuf = pdev->pClass->GetUsrStrDescriptor(pdev, (req->wValue) , &len);
      break;
#else
       USBD_CtlError(pdev , req);
 800ad14:	6839      	ldr	r1, [r7, #0]
 800ad16:	6878      	ldr	r0, [r7, #4]
 800ad18:	f000 f9f9 	bl	800b10e <USBD_CtlError>
      return;
 800ad1c:	e04b      	b.n	800adb6 <USBD_GetDescriptor+0x1ee>
#endif
    }
    break;
 800ad1e:	e02e      	b.n	800ad7e <USBD_GetDescriptor+0x1b6>
  case USB_DESC_TYPE_DEVICE_QUALIFIER:

    if(pdev->dev_speed == USBD_SPEED_HIGH)
 800ad20:	687b      	ldr	r3, [r7, #4]
 800ad22:	7c1b      	ldrb	r3, [r3, #16]
 800ad24:	2b00      	cmp	r3, #0
 800ad26:	d109      	bne.n	800ad3c <USBD_GetDescriptor+0x174>
    {
      pbuf = (uint8_t *)pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800ad28:	687b      	ldr	r3, [r7, #4]
 800ad2a:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800ad2e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ad30:	f107 020a 	add.w	r2, r7, #10
 800ad34:	4610      	mov	r0, r2
 800ad36:	4798      	blx	r3
 800ad38:	60f8      	str	r0, [r7, #12]
      break;
 800ad3a:	e020      	b.n	800ad7e <USBD_GetDescriptor+0x1b6>
    }
    else
    {
      USBD_CtlError(pdev , req);
 800ad3c:	6839      	ldr	r1, [r7, #0]
 800ad3e:	6878      	ldr	r0, [r7, #4]
 800ad40:	f000 f9e5 	bl	800b10e <USBD_CtlError>
      return;
 800ad44:	e037      	b.n	800adb6 <USBD_GetDescriptor+0x1ee>
    }

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if(pdev->dev_speed == USBD_SPEED_HIGH  )
 800ad46:	687b      	ldr	r3, [r7, #4]
 800ad48:	7c1b      	ldrb	r3, [r3, #16]
 800ad4a:	2b00      	cmp	r3, #0
 800ad4c:	d10d      	bne.n	800ad6a <USBD_GetDescriptor+0x1a2>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800ad4e:	687b      	ldr	r3, [r7, #4]
 800ad50:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800ad54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ad56:	f107 020a 	add.w	r2, r7, #10
 800ad5a:	4610      	mov	r0, r2
 800ad5c:	4798      	blx	r3
 800ad5e:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800ad60:	68fb      	ldr	r3, [r7, #12]
 800ad62:	3301      	adds	r3, #1
 800ad64:	2207      	movs	r2, #7
 800ad66:	701a      	strb	r2, [r3, #0]
      break;
 800ad68:	e009      	b.n	800ad7e <USBD_GetDescriptor+0x1b6>
    }
    else
    {
      USBD_CtlError(pdev , req);
 800ad6a:	6839      	ldr	r1, [r7, #0]
 800ad6c:	6878      	ldr	r0, [r7, #4]
 800ad6e:	f000 f9ce 	bl	800b10e <USBD_CtlError>
      return;
 800ad72:	e020      	b.n	800adb6 <USBD_GetDescriptor+0x1ee>
    }

  default:
     USBD_CtlError(pdev , req);
 800ad74:	6839      	ldr	r1, [r7, #0]
 800ad76:	6878      	ldr	r0, [r7, #4]
 800ad78:	f000 f9c9 	bl	800b10e <USBD_CtlError>
    return;
 800ad7c:	e01b      	b.n	800adb6 <USBD_GetDescriptor+0x1ee>
  }

  if((len != 0U) && (req->wLength != 0U))
 800ad7e:	897b      	ldrh	r3, [r7, #10]
 800ad80:	2b00      	cmp	r3, #0
 800ad82:	d011      	beq.n	800ada8 <USBD_GetDescriptor+0x1e0>
 800ad84:	683b      	ldr	r3, [r7, #0]
 800ad86:	88db      	ldrh	r3, [r3, #6]
 800ad88:	2b00      	cmp	r3, #0
 800ad8a:	d00d      	beq.n	800ada8 <USBD_GetDescriptor+0x1e0>
  {

    len = MIN(len, req->wLength);
 800ad8c:	683b      	ldr	r3, [r7, #0]
 800ad8e:	88da      	ldrh	r2, [r3, #6]
 800ad90:	897b      	ldrh	r3, [r7, #10]
 800ad92:	4293      	cmp	r3, r2
 800ad94:	bf28      	it	cs
 800ad96:	4613      	movcs	r3, r2
 800ad98:	b29b      	uxth	r3, r3
 800ad9a:	817b      	strh	r3, [r7, #10]

    USBD_CtlSendData (pdev, pbuf, len);
 800ad9c:	897b      	ldrh	r3, [r7, #10]
 800ad9e:	461a      	mov	r2, r3
 800ada0:	68f9      	ldr	r1, [r7, #12]
 800ada2:	6878      	ldr	r0, [r7, #4]
 800ada4:	f000 fa1e 	bl	800b1e4 <USBD_CtlSendData>
  }

  if(req->wLength == 0U)
 800ada8:	683b      	ldr	r3, [r7, #0]
 800adaa:	88db      	ldrh	r3, [r3, #6]
 800adac:	2b00      	cmp	r3, #0
 800adae:	d102      	bne.n	800adb6 <USBD_GetDescriptor+0x1ee>
  {
   USBD_CtlSendStatus(pdev);
 800adb0:	6878      	ldr	r0, [r7, #4]
 800adb2:	f000 fa75 	bl	800b2a0 <USBD_CtlSendStatus>
  }
}
 800adb6:	3710      	adds	r7, #16
 800adb8:	46bd      	mov	sp, r7
 800adba:	bd80      	pop	{r7, pc}

0800adbc <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 800adbc:	b580      	push	{r7, lr}
 800adbe:	b084      	sub	sp, #16
 800adc0:	af00      	add	r7, sp, #0
 800adc2:	6078      	str	r0, [r7, #4]
 800adc4:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800adc6:	683b      	ldr	r3, [r7, #0]
 800adc8:	889b      	ldrh	r3, [r3, #4]
 800adca:	2b00      	cmp	r3, #0
 800adcc:	d130      	bne.n	800ae30 <USBD_SetAddress+0x74>
 800adce:	683b      	ldr	r3, [r7, #0]
 800add0:	88db      	ldrh	r3, [r3, #6]
 800add2:	2b00      	cmp	r3, #0
 800add4:	d12c      	bne.n	800ae30 <USBD_SetAddress+0x74>
 800add6:	683b      	ldr	r3, [r7, #0]
 800add8:	885b      	ldrh	r3, [r3, #2]
 800adda:	2b7f      	cmp	r3, #127	; 0x7f
 800addc:	d828      	bhi.n	800ae30 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800adde:	683b      	ldr	r3, [r7, #0]
 800ade0:	885b      	ldrh	r3, [r3, #2]
 800ade2:	b2db      	uxtb	r3, r3
 800ade4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ade8:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800adea:	687b      	ldr	r3, [r7, #4]
 800adec:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800adf0:	2b03      	cmp	r3, #3
 800adf2:	d104      	bne.n	800adfe <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev , req);
 800adf4:	6839      	ldr	r1, [r7, #0]
 800adf6:	6878      	ldr	r0, [r7, #4]
 800adf8:	f000 f989 	bl	800b10e <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800adfc:	e01c      	b.n	800ae38 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800adfe:	687b      	ldr	r3, [r7, #4]
 800ae00:	7bfa      	ldrb	r2, [r7, #15]
 800ae02:	f883 2276 	strb.w	r2, [r3, #630]	; 0x276
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 800ae06:	7bfb      	ldrb	r3, [r7, #15]
 800ae08:	4619      	mov	r1, r3
 800ae0a:	6878      	ldr	r0, [r7, #4]
 800ae0c:	f00f fe4e 	bl	801aaac <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 800ae10:	6878      	ldr	r0, [r7, #4]
 800ae12:	f000 fa45 	bl	800b2a0 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800ae16:	7bfb      	ldrb	r3, [r7, #15]
 800ae18:	2b00      	cmp	r3, #0
 800ae1a:	d004      	beq.n	800ae26 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800ae1c:	687b      	ldr	r3, [r7, #4]
 800ae1e:	2202      	movs	r2, #2
 800ae20:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ae24:	e008      	b.n	800ae38 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800ae26:	687b      	ldr	r3, [r7, #4]
 800ae28:	2201      	movs	r2, #1
 800ae2a:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ae2e:	e003      	b.n	800ae38 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800ae30:	6839      	ldr	r1, [r7, #0]
 800ae32:	6878      	ldr	r0, [r7, #4]
 800ae34:	f000 f96b 	bl	800b10e <USBD_CtlError>
  }
}
 800ae38:	bf00      	nop
 800ae3a:	3710      	adds	r7, #16
 800ae3c:	46bd      	mov	sp, r7
 800ae3e:	bd80      	pop	{r7, pc}

0800ae40 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ae40:	b580      	push	{r7, lr}
 800ae42:	b082      	sub	sp, #8
 800ae44:	af00      	add	r7, sp, #0
 800ae46:	6078      	str	r0, [r7, #4]
 800ae48:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800ae4a:	683b      	ldr	r3, [r7, #0]
 800ae4c:	885b      	ldrh	r3, [r3, #2]
 800ae4e:	b2da      	uxtb	r2, r3
 800ae50:	4b41      	ldr	r3, [pc, #260]	; (800af58 <USBD_SetConfig+0x118>)
 800ae52:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800ae54:	4b40      	ldr	r3, [pc, #256]	; (800af58 <USBD_SetConfig+0x118>)
 800ae56:	781b      	ldrb	r3, [r3, #0]
 800ae58:	2b01      	cmp	r3, #1
 800ae5a:	d904      	bls.n	800ae66 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 800ae5c:	6839      	ldr	r1, [r7, #0]
 800ae5e:	6878      	ldr	r0, [r7, #4]
 800ae60:	f000 f955 	bl	800b10e <USBD_CtlError>
 800ae64:	e075      	b.n	800af52 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 800ae66:	687b      	ldr	r3, [r7, #4]
 800ae68:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800ae6c:	2b02      	cmp	r3, #2
 800ae6e:	d002      	beq.n	800ae76 <USBD_SetConfig+0x36>
 800ae70:	2b03      	cmp	r3, #3
 800ae72:	d023      	beq.n	800aebc <USBD_SetConfig+0x7c>
 800ae74:	e062      	b.n	800af3c <USBD_SetConfig+0xfc>
    {
    case USBD_STATE_ADDRESSED:
      if (cfgidx)
 800ae76:	4b38      	ldr	r3, [pc, #224]	; (800af58 <USBD_SetConfig+0x118>)
 800ae78:	781b      	ldrb	r3, [r3, #0]
 800ae7a:	2b00      	cmp	r3, #0
 800ae7c:	d01a      	beq.n	800aeb4 <USBD_SetConfig+0x74>
      {
        pdev->dev_config = cfgidx;
 800ae7e:	4b36      	ldr	r3, [pc, #216]	; (800af58 <USBD_SetConfig+0x118>)
 800ae80:	781b      	ldrb	r3, [r3, #0]
 800ae82:	461a      	mov	r2, r3
 800ae84:	687b      	ldr	r3, [r7, #4]
 800ae86:	605a      	str	r2, [r3, #4]
        pdev->dev_state = USBD_STATE_CONFIGURED;
 800ae88:	687b      	ldr	r3, [r7, #4]
 800ae8a:	2203      	movs	r2, #3
 800ae8c:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
        if(USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800ae90:	4b31      	ldr	r3, [pc, #196]	; (800af58 <USBD_SetConfig+0x118>)
 800ae92:	781b      	ldrb	r3, [r3, #0]
 800ae94:	4619      	mov	r1, r3
 800ae96:	6878      	ldr	r0, [r7, #4]
 800ae98:	f7ff fa29 	bl	800a2ee <USBD_SetClassConfig>
 800ae9c:	4603      	mov	r3, r0
 800ae9e:	2b02      	cmp	r3, #2
 800aea0:	d104      	bne.n	800aeac <USBD_SetConfig+0x6c>
        {
          USBD_CtlError(pdev, req);
 800aea2:	6839      	ldr	r1, [r7, #0]
 800aea4:	6878      	ldr	r0, [r7, #4]
 800aea6:	f000 f932 	bl	800b10e <USBD_CtlError>
          return;
 800aeaa:	e052      	b.n	800af52 <USBD_SetConfig+0x112>
        }
        USBD_CtlSendStatus(pdev);
 800aeac:	6878      	ldr	r0, [r7, #4]
 800aeae:	f000 f9f7 	bl	800b2a0 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlSendStatus(pdev);
      }
      break;
 800aeb2:	e04e      	b.n	800af52 <USBD_SetConfig+0x112>
        USBD_CtlSendStatus(pdev);
 800aeb4:	6878      	ldr	r0, [r7, #4]
 800aeb6:	f000 f9f3 	bl	800b2a0 <USBD_CtlSendStatus>
      break;
 800aeba:	e04a      	b.n	800af52 <USBD_SetConfig+0x112>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800aebc:	4b26      	ldr	r3, [pc, #152]	; (800af58 <USBD_SetConfig+0x118>)
 800aebe:	781b      	ldrb	r3, [r3, #0]
 800aec0:	2b00      	cmp	r3, #0
 800aec2:	d112      	bne.n	800aeea <USBD_SetConfig+0xaa>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800aec4:	687b      	ldr	r3, [r7, #4]
 800aec6:	2202      	movs	r2, #2
 800aec8:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
        pdev->dev_config = cfgidx;
 800aecc:	4b22      	ldr	r3, [pc, #136]	; (800af58 <USBD_SetConfig+0x118>)
 800aece:	781b      	ldrb	r3, [r3, #0]
 800aed0:	461a      	mov	r2, r3
 800aed2:	687b      	ldr	r3, [r7, #4]
 800aed4:	605a      	str	r2, [r3, #4]
        USBD_ClrClassConfig(pdev, cfgidx);
 800aed6:	4b20      	ldr	r3, [pc, #128]	; (800af58 <USBD_SetConfig+0x118>)
 800aed8:	781b      	ldrb	r3, [r3, #0]
 800aeda:	4619      	mov	r1, r3
 800aedc:	6878      	ldr	r0, [r7, #4]
 800aede:	f7ff fa25 	bl	800a32c <USBD_ClrClassConfig>
        USBD_CtlSendStatus(pdev);
 800aee2:	6878      	ldr	r0, [r7, #4]
 800aee4:	f000 f9dc 	bl	800b2a0 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlSendStatus(pdev);
      }
      break;
 800aee8:	e033      	b.n	800af52 <USBD_SetConfig+0x112>
      else if (cfgidx != pdev->dev_config)
 800aeea:	4b1b      	ldr	r3, [pc, #108]	; (800af58 <USBD_SetConfig+0x118>)
 800aeec:	781b      	ldrb	r3, [r3, #0]
 800aeee:	461a      	mov	r2, r3
 800aef0:	687b      	ldr	r3, [r7, #4]
 800aef2:	685b      	ldr	r3, [r3, #4]
 800aef4:	429a      	cmp	r2, r3
 800aef6:	d01d      	beq.n	800af34 <USBD_SetConfig+0xf4>
        USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800aef8:	687b      	ldr	r3, [r7, #4]
 800aefa:	685b      	ldr	r3, [r3, #4]
 800aefc:	b2db      	uxtb	r3, r3
 800aefe:	4619      	mov	r1, r3
 800af00:	6878      	ldr	r0, [r7, #4]
 800af02:	f7ff fa13 	bl	800a32c <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800af06:	4b14      	ldr	r3, [pc, #80]	; (800af58 <USBD_SetConfig+0x118>)
 800af08:	781b      	ldrb	r3, [r3, #0]
 800af0a:	461a      	mov	r2, r3
 800af0c:	687b      	ldr	r3, [r7, #4]
 800af0e:	605a      	str	r2, [r3, #4]
        if(USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800af10:	4b11      	ldr	r3, [pc, #68]	; (800af58 <USBD_SetConfig+0x118>)
 800af12:	781b      	ldrb	r3, [r3, #0]
 800af14:	4619      	mov	r1, r3
 800af16:	6878      	ldr	r0, [r7, #4]
 800af18:	f7ff f9e9 	bl	800a2ee <USBD_SetClassConfig>
 800af1c:	4603      	mov	r3, r0
 800af1e:	2b02      	cmp	r3, #2
 800af20:	d104      	bne.n	800af2c <USBD_SetConfig+0xec>
          USBD_CtlError(pdev, req);
 800af22:	6839      	ldr	r1, [r7, #0]
 800af24:	6878      	ldr	r0, [r7, #4]
 800af26:	f000 f8f2 	bl	800b10e <USBD_CtlError>
          return;
 800af2a:	e012      	b.n	800af52 <USBD_SetConfig+0x112>
        USBD_CtlSendStatus(pdev);
 800af2c:	6878      	ldr	r0, [r7, #4]
 800af2e:	f000 f9b7 	bl	800b2a0 <USBD_CtlSendStatus>
      break;
 800af32:	e00e      	b.n	800af52 <USBD_SetConfig+0x112>
        USBD_CtlSendStatus(pdev);
 800af34:	6878      	ldr	r0, [r7, #4]
 800af36:	f000 f9b3 	bl	800b2a0 <USBD_CtlSendStatus>
      break;
 800af3a:	e00a      	b.n	800af52 <USBD_SetConfig+0x112>

    default:
      USBD_CtlError(pdev, req);
 800af3c:	6839      	ldr	r1, [r7, #0]
 800af3e:	6878      	ldr	r0, [r7, #4]
 800af40:	f000 f8e5 	bl	800b10e <USBD_CtlError>
      USBD_ClrClassConfig(pdev, cfgidx);
 800af44:	4b04      	ldr	r3, [pc, #16]	; (800af58 <USBD_SetConfig+0x118>)
 800af46:	781b      	ldrb	r3, [r3, #0]
 800af48:	4619      	mov	r1, r3
 800af4a:	6878      	ldr	r0, [r7, #4]
 800af4c:	f7ff f9ee 	bl	800a32c <USBD_ClrClassConfig>
      break;
 800af50:	bf00      	nop
    }
  }
}
 800af52:	3708      	adds	r7, #8
 800af54:	46bd      	mov	sp, r7
 800af56:	bd80      	pop	{r7, pc}
 800af58:	20000464 	.word	0x20000464

0800af5c <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800af5c:	b580      	push	{r7, lr}
 800af5e:	b082      	sub	sp, #8
 800af60:	af00      	add	r7, sp, #0
 800af62:	6078      	str	r0, [r7, #4]
 800af64:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800af66:	683b      	ldr	r3, [r7, #0]
 800af68:	88db      	ldrh	r3, [r3, #6]
 800af6a:	2b01      	cmp	r3, #1
 800af6c:	d004      	beq.n	800af78 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev , req);
 800af6e:	6839      	ldr	r1, [r7, #0]
 800af70:	6878      	ldr	r0, [r7, #4]
 800af72:	f000 f8cc 	bl	800b10e <USBD_CtlError>
    default:
      USBD_CtlError(pdev , req);
      break;
    }
  }
}
 800af76:	e021      	b.n	800afbc <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 800af78:	687b      	ldr	r3, [r7, #4]
 800af7a:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800af7e:	2b01      	cmp	r3, #1
 800af80:	db17      	blt.n	800afb2 <USBD_GetConfig+0x56>
 800af82:	2b02      	cmp	r3, #2
 800af84:	dd02      	ble.n	800af8c <USBD_GetConfig+0x30>
 800af86:	2b03      	cmp	r3, #3
 800af88:	d00b      	beq.n	800afa2 <USBD_GetConfig+0x46>
 800af8a:	e012      	b.n	800afb2 <USBD_GetConfig+0x56>
      pdev->dev_default_config = 0U;
 800af8c:	687b      	ldr	r3, [r7, #4]
 800af8e:	2200      	movs	r2, #0
 800af90:	609a      	str	r2, [r3, #8]
      USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 800af92:	687b      	ldr	r3, [r7, #4]
 800af94:	3308      	adds	r3, #8
 800af96:	2201      	movs	r2, #1
 800af98:	4619      	mov	r1, r3
 800af9a:	6878      	ldr	r0, [r7, #4]
 800af9c:	f000 f922 	bl	800b1e4 <USBD_CtlSendData>
      break;
 800afa0:	e00c      	b.n	800afbc <USBD_GetConfig+0x60>
      USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 800afa2:	687b      	ldr	r3, [r7, #4]
 800afa4:	3304      	adds	r3, #4
 800afa6:	2201      	movs	r2, #1
 800afa8:	4619      	mov	r1, r3
 800afaa:	6878      	ldr	r0, [r7, #4]
 800afac:	f000 f91a 	bl	800b1e4 <USBD_CtlSendData>
      break;
 800afb0:	e004      	b.n	800afbc <USBD_GetConfig+0x60>
      USBD_CtlError(pdev , req);
 800afb2:	6839      	ldr	r1, [r7, #0]
 800afb4:	6878      	ldr	r0, [r7, #4]
 800afb6:	f000 f8aa 	bl	800b10e <USBD_CtlError>
      break;
 800afba:	bf00      	nop
}
 800afbc:	bf00      	nop
 800afbe:	3708      	adds	r7, #8
 800afc0:	46bd      	mov	sp, r7
 800afc2:	bd80      	pop	{r7, pc}

0800afc4 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800afc4:	b580      	push	{r7, lr}
 800afc6:	b082      	sub	sp, #8
 800afc8:	af00      	add	r7, sp, #0
 800afca:	6078      	str	r0, [r7, #4]
 800afcc:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800afce:	687b      	ldr	r3, [r7, #4]
 800afd0:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800afd4:	3b01      	subs	r3, #1
 800afd6:	2b02      	cmp	r3, #2
 800afd8:	d81e      	bhi.n	800b018 <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if(req->wLength != 0x2U)
 800afda:	683b      	ldr	r3, [r7, #0]
 800afdc:	88db      	ldrh	r3, [r3, #6]
 800afde:	2b02      	cmp	r3, #2
 800afe0:	d004      	beq.n	800afec <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 800afe2:	6839      	ldr	r1, [r7, #0]
 800afe4:	6878      	ldr	r0, [r7, #4]
 800afe6:	f000 f892 	bl	800b10e <USBD_CtlError>
      break;
 800afea:	e01a      	b.n	800b022 <USBD_GetStatus+0x5e>
    }

#if ( USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800afec:	687b      	ldr	r3, [r7, #4]
 800afee:	2201      	movs	r2, #1
 800aff0:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup)
 800aff2:	687b      	ldr	r3, [r7, #4]
 800aff4:	f8d3 327c 	ldr.w	r3, [r3, #636]	; 0x27c
 800aff8:	2b00      	cmp	r3, #0
 800affa:	d005      	beq.n	800b008 <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800affc:	687b      	ldr	r3, [r7, #4]
 800affe:	68db      	ldr	r3, [r3, #12]
 800b000:	f043 0202 	orr.w	r2, r3, #2
 800b004:	687b      	ldr	r3, [r7, #4]
 800b006:	60da      	str	r2, [r3, #12]
    }

    USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 800b008:	687b      	ldr	r3, [r7, #4]
 800b00a:	330c      	adds	r3, #12
 800b00c:	2202      	movs	r2, #2
 800b00e:	4619      	mov	r1, r3
 800b010:	6878      	ldr	r0, [r7, #4]
 800b012:	f000 f8e7 	bl	800b1e4 <USBD_CtlSendData>
    break;
 800b016:	e004      	b.n	800b022 <USBD_GetStatus+0x5e>

  default :
    USBD_CtlError(pdev , req);
 800b018:	6839      	ldr	r1, [r7, #0]
 800b01a:	6878      	ldr	r0, [r7, #4]
 800b01c:	f000 f877 	bl	800b10e <USBD_CtlError>
    break;
 800b020:	bf00      	nop
  }
}
 800b022:	bf00      	nop
 800b024:	3708      	adds	r7, #8
 800b026:	46bd      	mov	sp, r7
 800b028:	bd80      	pop	{r7, pc}

0800b02a <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 800b02a:	b580      	push	{r7, lr}
 800b02c:	b082      	sub	sp, #8
 800b02e:	af00      	add	r7, sp, #0
 800b030:	6078      	str	r0, [r7, #4]
 800b032:	6039      	str	r1, [r7, #0]

  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800b034:	683b      	ldr	r3, [r7, #0]
 800b036:	885b      	ldrh	r3, [r3, #2]
 800b038:	2b01      	cmp	r3, #1
 800b03a:	d106      	bne.n	800b04a <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800b03c:	687b      	ldr	r3, [r7, #4]
 800b03e:	2201      	movs	r2, #1
 800b040:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c
    USBD_CtlSendStatus(pdev);
 800b044:	6878      	ldr	r0, [r7, #4]
 800b046:	f000 f92b 	bl	800b2a0 <USBD_CtlSendStatus>
  }

}
 800b04a:	bf00      	nop
 800b04c:	3708      	adds	r7, #8
 800b04e:	46bd      	mov	sp, r7
 800b050:	bd80      	pop	{r7, pc}

0800b052 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 800b052:	b580      	push	{r7, lr}
 800b054:	b082      	sub	sp, #8
 800b056:	af00      	add	r7, sp, #0
 800b058:	6078      	str	r0, [r7, #4]
 800b05a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800b05c:	687b      	ldr	r3, [r7, #4]
 800b05e:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800b062:	3b01      	subs	r3, #1
 800b064:	2b02      	cmp	r3, #2
 800b066:	d80b      	bhi.n	800b080 <USBD_ClrFeature+0x2e>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800b068:	683b      	ldr	r3, [r7, #0]
 800b06a:	885b      	ldrh	r3, [r3, #2]
 800b06c:	2b01      	cmp	r3, #1
 800b06e:	d10c      	bne.n	800b08a <USBD_ClrFeature+0x38>
    {
      pdev->dev_remote_wakeup = 0U;
 800b070:	687b      	ldr	r3, [r7, #4]
 800b072:	2200      	movs	r2, #0
 800b074:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c
      USBD_CtlSendStatus(pdev);
 800b078:	6878      	ldr	r0, [r7, #4]
 800b07a:	f000 f911 	bl	800b2a0 <USBD_CtlSendStatus>
    }
    break;
 800b07e:	e004      	b.n	800b08a <USBD_ClrFeature+0x38>

  default :
     USBD_CtlError(pdev , req);
 800b080:	6839      	ldr	r1, [r7, #0]
 800b082:	6878      	ldr	r0, [r7, #4]
 800b084:	f000 f843 	bl	800b10e <USBD_CtlError>
    break;
 800b088:	e000      	b.n	800b08c <USBD_ClrFeature+0x3a>
    break;
 800b08a:	bf00      	nop
  }
}
 800b08c:	bf00      	nop
 800b08e:	3708      	adds	r7, #8
 800b090:	46bd      	mov	sp, r7
 800b092:	bd80      	pop	{r7, pc}

0800b094 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800b094:	b480      	push	{r7}
 800b096:	b083      	sub	sp, #12
 800b098:	af00      	add	r7, sp, #0
 800b09a:	6078      	str	r0, [r7, #4]
 800b09c:	6039      	str	r1, [r7, #0]
  req->bmRequest     = *(uint8_t *)  (pdata);
 800b09e:	683b      	ldr	r3, [r7, #0]
 800b0a0:	781a      	ldrb	r2, [r3, #0]
 800b0a2:	687b      	ldr	r3, [r7, #4]
 800b0a4:	701a      	strb	r2, [r3, #0]
  req->bRequest      = *(uint8_t *)  (pdata +  1);
 800b0a6:	683b      	ldr	r3, [r7, #0]
 800b0a8:	785a      	ldrb	r2, [r3, #1]
 800b0aa:	687b      	ldr	r3, [r7, #4]
 800b0ac:	705a      	strb	r2, [r3, #1]
  req->wValue        = SWAPBYTE      (pdata +  2);
 800b0ae:	683b      	ldr	r3, [r7, #0]
 800b0b0:	3302      	adds	r3, #2
 800b0b2:	781b      	ldrb	r3, [r3, #0]
 800b0b4:	b29a      	uxth	r2, r3
 800b0b6:	683b      	ldr	r3, [r7, #0]
 800b0b8:	3303      	adds	r3, #3
 800b0ba:	781b      	ldrb	r3, [r3, #0]
 800b0bc:	b29b      	uxth	r3, r3
 800b0be:	021b      	lsls	r3, r3, #8
 800b0c0:	b29b      	uxth	r3, r3
 800b0c2:	4413      	add	r3, r2
 800b0c4:	b29a      	uxth	r2, r3
 800b0c6:	687b      	ldr	r3, [r7, #4]
 800b0c8:	805a      	strh	r2, [r3, #2]
  req->wIndex        = SWAPBYTE      (pdata +  4);
 800b0ca:	683b      	ldr	r3, [r7, #0]
 800b0cc:	3304      	adds	r3, #4
 800b0ce:	781b      	ldrb	r3, [r3, #0]
 800b0d0:	b29a      	uxth	r2, r3
 800b0d2:	683b      	ldr	r3, [r7, #0]
 800b0d4:	3305      	adds	r3, #5
 800b0d6:	781b      	ldrb	r3, [r3, #0]
 800b0d8:	b29b      	uxth	r3, r3
 800b0da:	021b      	lsls	r3, r3, #8
 800b0dc:	b29b      	uxth	r3, r3
 800b0de:	4413      	add	r3, r2
 800b0e0:	b29a      	uxth	r2, r3
 800b0e2:	687b      	ldr	r3, [r7, #4]
 800b0e4:	809a      	strh	r2, [r3, #4]
  req->wLength       = SWAPBYTE      (pdata +  6);
 800b0e6:	683b      	ldr	r3, [r7, #0]
 800b0e8:	3306      	adds	r3, #6
 800b0ea:	781b      	ldrb	r3, [r3, #0]
 800b0ec:	b29a      	uxth	r2, r3
 800b0ee:	683b      	ldr	r3, [r7, #0]
 800b0f0:	3307      	adds	r3, #7
 800b0f2:	781b      	ldrb	r3, [r3, #0]
 800b0f4:	b29b      	uxth	r3, r3
 800b0f6:	021b      	lsls	r3, r3, #8
 800b0f8:	b29b      	uxth	r3, r3
 800b0fa:	4413      	add	r3, r2
 800b0fc:	b29a      	uxth	r2, r3
 800b0fe:	687b      	ldr	r3, [r7, #4]
 800b100:	80da      	strh	r2, [r3, #6]

}
 800b102:	bf00      	nop
 800b104:	370c      	adds	r7, #12
 800b106:	46bd      	mov	sp, r7
 800b108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b10c:	4770      	bx	lr

0800b10e <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError( USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 800b10e:	b580      	push	{r7, lr}
 800b110:	b082      	sub	sp, #8
 800b112:	af00      	add	r7, sp, #0
 800b114:	6078      	str	r0, [r7, #4]
 800b116:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev , 0x80U);
 800b118:	2180      	movs	r1, #128	; 0x80
 800b11a:	6878      	ldr	r0, [r7, #4]
 800b11c:	f00f fc5c 	bl	801a9d8 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev , 0U);
 800b120:	2100      	movs	r1, #0
 800b122:	6878      	ldr	r0, [r7, #4]
 800b124:	f00f fc58 	bl	801a9d8 <USBD_LL_StallEP>
}
 800b128:	bf00      	nop
 800b12a:	3708      	adds	r7, #8
 800b12c:	46bd      	mov	sp, r7
 800b12e:	bd80      	pop	{r7, pc}

0800b130 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800b130:	b580      	push	{r7, lr}
 800b132:	b086      	sub	sp, #24
 800b134:	af00      	add	r7, sp, #0
 800b136:	60f8      	str	r0, [r7, #12]
 800b138:	60b9      	str	r1, [r7, #8]
 800b13a:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800b13c:	2300      	movs	r3, #0
 800b13e:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 800b140:	68fb      	ldr	r3, [r7, #12]
 800b142:	2b00      	cmp	r3, #0
 800b144:	d032      	beq.n	800b1ac <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 800b146:	68f8      	ldr	r0, [r7, #12]
 800b148:	f000 f834 	bl	800b1b4 <USBD_GetLen>
 800b14c:	4603      	mov	r3, r0
 800b14e:	3301      	adds	r3, #1
 800b150:	b29b      	uxth	r3, r3
 800b152:	005b      	lsls	r3, r3, #1
 800b154:	b29a      	uxth	r2, r3
 800b156:	687b      	ldr	r3, [r7, #4]
 800b158:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 800b15a:	7dfb      	ldrb	r3, [r7, #23]
 800b15c:	1c5a      	adds	r2, r3, #1
 800b15e:	75fa      	strb	r2, [r7, #23]
 800b160:	461a      	mov	r2, r3
 800b162:	68bb      	ldr	r3, [r7, #8]
 800b164:	4413      	add	r3, r2
 800b166:	687a      	ldr	r2, [r7, #4]
 800b168:	7812      	ldrb	r2, [r2, #0]
 800b16a:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 800b16c:	7dfb      	ldrb	r3, [r7, #23]
 800b16e:	1c5a      	adds	r2, r3, #1
 800b170:	75fa      	strb	r2, [r7, #23]
 800b172:	461a      	mov	r2, r3
 800b174:	68bb      	ldr	r3, [r7, #8]
 800b176:	4413      	add	r3, r2
 800b178:	2203      	movs	r2, #3
 800b17a:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 800b17c:	e012      	b.n	800b1a4 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 800b17e:	68fb      	ldr	r3, [r7, #12]
 800b180:	1c5a      	adds	r2, r3, #1
 800b182:	60fa      	str	r2, [r7, #12]
 800b184:	7dfa      	ldrb	r2, [r7, #23]
 800b186:	1c51      	adds	r1, r2, #1
 800b188:	75f9      	strb	r1, [r7, #23]
 800b18a:	4611      	mov	r1, r2
 800b18c:	68ba      	ldr	r2, [r7, #8]
 800b18e:	440a      	add	r2, r1
 800b190:	781b      	ldrb	r3, [r3, #0]
 800b192:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 800b194:	7dfb      	ldrb	r3, [r7, #23]
 800b196:	1c5a      	adds	r2, r3, #1
 800b198:	75fa      	strb	r2, [r7, #23]
 800b19a:	461a      	mov	r2, r3
 800b19c:	68bb      	ldr	r3, [r7, #8]
 800b19e:	4413      	add	r3, r2
 800b1a0:	2200      	movs	r2, #0
 800b1a2:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 800b1a4:	68fb      	ldr	r3, [r7, #12]
 800b1a6:	781b      	ldrb	r3, [r3, #0]
 800b1a8:	2b00      	cmp	r3, #0
 800b1aa:	d1e8      	bne.n	800b17e <USBD_GetString+0x4e>
    }
  }
}
 800b1ac:	bf00      	nop
 800b1ae:	3718      	adds	r7, #24
 800b1b0:	46bd      	mov	sp, r7
 800b1b2:	bd80      	pop	{r7, pc}

0800b1b4 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800b1b4:	b480      	push	{r7}
 800b1b6:	b085      	sub	sp, #20
 800b1b8:	af00      	add	r7, sp, #0
 800b1ba:	6078      	str	r0, [r7, #4]
    uint8_t  len = 0U;
 800b1bc:	2300      	movs	r3, #0
 800b1be:	73fb      	strb	r3, [r7, #15]

    while (*buf != '\0')
 800b1c0:	e005      	b.n	800b1ce <USBD_GetLen+0x1a>
    {
        len++;
 800b1c2:	7bfb      	ldrb	r3, [r7, #15]
 800b1c4:	3301      	adds	r3, #1
 800b1c6:	73fb      	strb	r3, [r7, #15]
        buf++;
 800b1c8:	687b      	ldr	r3, [r7, #4]
 800b1ca:	3301      	adds	r3, #1
 800b1cc:	607b      	str	r3, [r7, #4]
    while (*buf != '\0')
 800b1ce:	687b      	ldr	r3, [r7, #4]
 800b1d0:	781b      	ldrb	r3, [r3, #0]
 800b1d2:	2b00      	cmp	r3, #0
 800b1d4:	d1f5      	bne.n	800b1c2 <USBD_GetLen+0xe>
    }

    return len;
 800b1d6:	7bfb      	ldrb	r3, [r7, #15]
}
 800b1d8:	4618      	mov	r0, r3
 800b1da:	3714      	adds	r7, #20
 800b1dc:	46bd      	mov	sp, r7
 800b1de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1e2:	4770      	bx	lr

0800b1e4 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                     uint16_t len)
{
 800b1e4:	b580      	push	{r7, lr}
 800b1e6:	b084      	sub	sp, #16
 800b1e8:	af00      	add	r7, sp, #0
 800b1ea:	60f8      	str	r0, [r7, #12]
 800b1ec:	60b9      	str	r1, [r7, #8]
 800b1ee:	4613      	mov	r3, r2
 800b1f0:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800b1f2:	68fb      	ldr	r3, [r7, #12]
 800b1f4:	2202      	movs	r2, #2
 800b1f6:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  pdev->ep_in[0].total_length = len;
 800b1fa:	88fa      	ldrh	r2, [r7, #6]
 800b1fc:	68fb      	ldr	r3, [r7, #12]
 800b1fe:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 800b200:	88fa      	ldrh	r2, [r7, #6]
 800b202:	68fb      	ldr	r3, [r7, #12]
 800b204:	621a      	str	r2, [r3, #32]

 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00U, pbuf, len);
 800b206:	88fb      	ldrh	r3, [r7, #6]
 800b208:	68ba      	ldr	r2, [r7, #8]
 800b20a:	2100      	movs	r1, #0
 800b20c:	68f8      	ldr	r0, [r7, #12]
 800b20e:	f00f fc6c 	bl	801aaea <USBD_LL_Transmit>

  return USBD_OK;
 800b212:	2300      	movs	r3, #0
}
 800b214:	4618      	mov	r0, r3
 800b216:	3710      	adds	r7, #16
 800b218:	46bd      	mov	sp, r7
 800b21a:	bd80      	pop	{r7, pc}

0800b21c <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData (USBD_HandleTypeDef *pdev,
                                             uint8_t *pbuf, uint16_t len)
{
 800b21c:	b580      	push	{r7, lr}
 800b21e:	b084      	sub	sp, #16
 800b220:	af00      	add	r7, sp, #0
 800b222:	60f8      	str	r0, [r7, #12]
 800b224:	60b9      	str	r1, [r7, #8]
 800b226:	4613      	mov	r3, r2
 800b228:	80fb      	strh	r3, [r7, #6]
 /* Start the next transfer */
  USBD_LL_Transmit (pdev, 0x00U, pbuf, len);
 800b22a:	88fb      	ldrh	r3, [r7, #6]
 800b22c:	68ba      	ldr	r2, [r7, #8]
 800b22e:	2100      	movs	r1, #0
 800b230:	68f8      	ldr	r0, [r7, #12]
 800b232:	f00f fc5a 	bl	801aaea <USBD_LL_Transmit>

  return USBD_OK;
 800b236:	2300      	movs	r3, #0
}
 800b238:	4618      	mov	r0, r3
 800b23a:	3710      	adds	r7, #16
 800b23c:	46bd      	mov	sp, r7
 800b23e:	bd80      	pop	{r7, pc}

0800b240 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                      uint16_t len)
{
 800b240:	b580      	push	{r7, lr}
 800b242:	b084      	sub	sp, #16
 800b244:	af00      	add	r7, sp, #0
 800b246:	60f8      	str	r0, [r7, #12]
 800b248:	60b9      	str	r1, [r7, #8]
 800b24a:	4613      	mov	r3, r2
 800b24c:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800b24e:	68fb      	ldr	r3, [r7, #12]
 800b250:	2203      	movs	r2, #3
 800b252:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  pdev->ep_out[0].total_length = len;
 800b256:	88fa      	ldrh	r2, [r7, #6]
 800b258:	68fb      	ldr	r3, [r7, #12]
 800b25a:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
  pdev->ep_out[0].rem_length   = len;
 800b25e:	88fa      	ldrh	r2, [r7, #6]
 800b260:	68fb      	ldr	r3, [r7, #12]
 800b262:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c

  /* Start the transfer */
  USBD_LL_PrepareReceive (pdev, 0U, pbuf, len);
 800b266:	88fb      	ldrh	r3, [r7, #6]
 800b268:	68ba      	ldr	r2, [r7, #8]
 800b26a:	2100      	movs	r1, #0
 800b26c:	68f8      	ldr	r0, [r7, #12]
 800b26e:	f00f fc5f 	bl	801ab30 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b272:	2300      	movs	r3, #0
}
 800b274:	4618      	mov	r0, r3
 800b276:	3710      	adds	r7, #16
 800b278:	46bd      	mov	sp, r7
 800b27a:	bd80      	pop	{r7, pc}

0800b27c <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                       uint16_t len)
{
 800b27c:	b580      	push	{r7, lr}
 800b27e:	b084      	sub	sp, #16
 800b280:	af00      	add	r7, sp, #0
 800b282:	60f8      	str	r0, [r7, #12]
 800b284:	60b9      	str	r1, [r7, #8]
 800b286:	4613      	mov	r3, r2
 800b288:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800b28a:	88fb      	ldrh	r3, [r7, #6]
 800b28c:	68ba      	ldr	r2, [r7, #8]
 800b28e:	2100      	movs	r1, #0
 800b290:	68f8      	ldr	r0, [r7, #12]
 800b292:	f00f fc4d 	bl	801ab30 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b296:	2300      	movs	r3, #0
}
 800b298:	4618      	mov	r0, r3
 800b29a:	3710      	adds	r7, #16
 800b29c:	46bd      	mov	sp, r7
 800b29e:	bd80      	pop	{r7, pc}

0800b2a0 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus (USBD_HandleTypeDef *pdev)
{
 800b2a0:	b580      	push	{r7, lr}
 800b2a2:	b082      	sub	sp, #8
 800b2a4:	af00      	add	r7, sp, #0
 800b2a6:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800b2a8:	687b      	ldr	r3, [r7, #4]
 800b2aa:	2204      	movs	r2, #4
 800b2ac:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800b2b0:	2300      	movs	r3, #0
 800b2b2:	2200      	movs	r2, #0
 800b2b4:	2100      	movs	r1, #0
 800b2b6:	6878      	ldr	r0, [r7, #4]
 800b2b8:	f00f fc17 	bl	801aaea <USBD_LL_Transmit>

  return USBD_OK;
 800b2bc:	2300      	movs	r3, #0
}
 800b2be:	4618      	mov	r0, r3
 800b2c0:	3708      	adds	r7, #8
 800b2c2:	46bd      	mov	sp, r7
 800b2c4:	bd80      	pop	{r7, pc}

0800b2c6 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus (USBD_HandleTypeDef *pdev)
{
 800b2c6:	b580      	push	{r7, lr}
 800b2c8:	b082      	sub	sp, #8
 800b2ca:	af00      	add	r7, sp, #0
 800b2cc:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800b2ce:	687b      	ldr	r3, [r7, #4]
 800b2d0:	2205      	movs	r2, #5
 800b2d2:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

 /* Start the transfer */
  USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 800b2d6:	2300      	movs	r3, #0
 800b2d8:	2200      	movs	r2, #0
 800b2da:	2100      	movs	r1, #0
 800b2dc:	6878      	ldr	r0, [r7, #4]
 800b2de:	f00f fc27 	bl	801ab30 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b2e2:	2300      	movs	r3, #0
}
 800b2e4:	4618      	mov	r0, r3
 800b2e6:	3708      	adds	r7, #8
 800b2e8:	46bd      	mov	sp, r7
 800b2ea:	bd80      	pop	{r7, pc}

0800b2ec <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800b2ec:	b480      	push	{r7}
 800b2ee:	b085      	sub	sp, #20
 800b2f0:	af00      	add	r7, sp, #0
 800b2f2:	4603      	mov	r3, r0
 800b2f4:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800b2f6:	2300      	movs	r3, #0
 800b2f8:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800b2fa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800b2fe:	2b84      	cmp	r3, #132	; 0x84
 800b300:	d005      	beq.n	800b30e <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800b302:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800b306:	68fb      	ldr	r3, [r7, #12]
 800b308:	4413      	add	r3, r2
 800b30a:	3303      	adds	r3, #3
 800b30c:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800b30e:	68fb      	ldr	r3, [r7, #12]
}
 800b310:	4618      	mov	r0, r3
 800b312:	3714      	adds	r7, #20
 800b314:	46bd      	mov	sp, r7
 800b316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b31a:	4770      	bx	lr

0800b31c <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 800b31c:	b480      	push	{r7}
 800b31e:	b083      	sub	sp, #12
 800b320:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b322:	f3ef 8305 	mrs	r3, IPSR
 800b326:	607b      	str	r3, [r7, #4]
  return(result);
 800b328:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 800b32a:	2b00      	cmp	r3, #0
 800b32c:	bf14      	ite	ne
 800b32e:	2301      	movne	r3, #1
 800b330:	2300      	moveq	r3, #0
 800b332:	b2db      	uxtb	r3, r3
}
 800b334:	4618      	mov	r0, r3
 800b336:	370c      	adds	r7, #12
 800b338:	46bd      	mov	sp, r7
 800b33a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b33e:	4770      	bx	lr

0800b340 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800b340:	b580      	push	{r7, lr}
 800b342:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800b344:	f001 fcfa 	bl	800cd3c <vTaskStartScheduler>
  
  return osOK;
 800b348:	2300      	movs	r3, #0
}
 800b34a:	4618      	mov	r0, r3
 800b34c:	bd80      	pop	{r7, pc}

0800b34e <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 800b34e:	b580      	push	{r7, lr}
 800b350:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 800b352:	f7ff ffe3 	bl	800b31c <inHandlerMode>
 800b356:	4603      	mov	r3, r0
 800b358:	2b00      	cmp	r3, #0
 800b35a:	d003      	beq.n	800b364 <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 800b35c:	f001 fe06 	bl	800cf6c <xTaskGetTickCountFromISR>
 800b360:	4603      	mov	r3, r0
 800b362:	e002      	b.n	800b36a <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 800b364:	f001 fdf2 	bl	800cf4c <xTaskGetTickCount>
 800b368:	4603      	mov	r3, r0
  }
}
 800b36a:	4618      	mov	r0, r3
 800b36c:	bd80      	pop	{r7, pc}

0800b36e <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800b36e:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b370:	b089      	sub	sp, #36	; 0x24
 800b372:	af04      	add	r7, sp, #16
 800b374:	6078      	str	r0, [r7, #4]
 800b376:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800b378:	687b      	ldr	r3, [r7, #4]
 800b37a:	695b      	ldr	r3, [r3, #20]
 800b37c:	2b00      	cmp	r3, #0
 800b37e:	d020      	beq.n	800b3c2 <osThreadCreate+0x54>
 800b380:	687b      	ldr	r3, [r7, #4]
 800b382:	699b      	ldr	r3, [r3, #24]
 800b384:	2b00      	cmp	r3, #0
 800b386:	d01c      	beq.n	800b3c2 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800b388:	687b      	ldr	r3, [r7, #4]
 800b38a:	685c      	ldr	r4, [r3, #4]
 800b38c:	687b      	ldr	r3, [r7, #4]
 800b38e:	681d      	ldr	r5, [r3, #0]
 800b390:	687b      	ldr	r3, [r7, #4]
 800b392:	691e      	ldr	r6, [r3, #16]
 800b394:	687b      	ldr	r3, [r7, #4]
 800b396:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800b39a:	4618      	mov	r0, r3
 800b39c:	f7ff ffa6 	bl	800b2ec <makeFreeRtosPriority>
 800b3a0:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 800b3a2:	687b      	ldr	r3, [r7, #4]
 800b3a4:	695b      	ldr	r3, [r3, #20]
 800b3a6:	687a      	ldr	r2, [r7, #4]
 800b3a8:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800b3aa:	9202      	str	r2, [sp, #8]
 800b3ac:	9301      	str	r3, [sp, #4]
 800b3ae:	9100      	str	r1, [sp, #0]
 800b3b0:	683b      	ldr	r3, [r7, #0]
 800b3b2:	4632      	mov	r2, r6
 800b3b4:	4629      	mov	r1, r5
 800b3b6:	4620      	mov	r0, r4
 800b3b8:	f001 fb06 	bl	800c9c8 <xTaskCreateStatic>
 800b3bc:	4603      	mov	r3, r0
 800b3be:	60fb      	str	r3, [r7, #12]
 800b3c0:	e01c      	b.n	800b3fc <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800b3c2:	687b      	ldr	r3, [r7, #4]
 800b3c4:	685c      	ldr	r4, [r3, #4]
 800b3c6:	687b      	ldr	r3, [r7, #4]
 800b3c8:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800b3ca:	687b      	ldr	r3, [r7, #4]
 800b3cc:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800b3ce:	b29e      	uxth	r6, r3
 800b3d0:	687b      	ldr	r3, [r7, #4]
 800b3d2:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800b3d6:	4618      	mov	r0, r3
 800b3d8:	f7ff ff88 	bl	800b2ec <makeFreeRtosPriority>
 800b3dc:	4602      	mov	r2, r0
 800b3de:	f107 030c 	add.w	r3, r7, #12
 800b3e2:	9301      	str	r3, [sp, #4]
 800b3e4:	9200      	str	r2, [sp, #0]
 800b3e6:	683b      	ldr	r3, [r7, #0]
 800b3e8:	4632      	mov	r2, r6
 800b3ea:	4629      	mov	r1, r5
 800b3ec:	4620      	mov	r0, r4
 800b3ee:	f001 fb44 	bl	800ca7a <xTaskCreate>
 800b3f2:	4603      	mov	r3, r0
 800b3f4:	2b01      	cmp	r3, #1
 800b3f6:	d001      	beq.n	800b3fc <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800b3f8:	2300      	movs	r3, #0
 800b3fa:	e000      	b.n	800b3fe <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800b3fc:	68fb      	ldr	r3, [r7, #12]
}
 800b3fe:	4618      	mov	r0, r3
 800b400:	3714      	adds	r7, #20
 800b402:	46bd      	mov	sp, r7
 800b404:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800b406 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800b406:	b580      	push	{r7, lr}
 800b408:	b084      	sub	sp, #16
 800b40a:	af00      	add	r7, sp, #0
 800b40c:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800b40e:	687b      	ldr	r3, [r7, #4]
 800b410:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800b412:	68fb      	ldr	r3, [r7, #12]
 800b414:	2b00      	cmp	r3, #0
 800b416:	d001      	beq.n	800b41c <osDelay+0x16>
 800b418:	68fb      	ldr	r3, [r7, #12]
 800b41a:	e000      	b.n	800b41e <osDelay+0x18>
 800b41c:	2301      	movs	r3, #1
 800b41e:	4618      	mov	r0, r3
 800b420:	f001 fc58 	bl	800ccd4 <vTaskDelay>
  
  return osOK;
 800b424:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800b426:	4618      	mov	r0, r3
 800b428:	3710      	adds	r7, #16
 800b42a:	46bd      	mov	sp, r7
 800b42c:	bd80      	pop	{r7, pc}

0800b42e <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 800b42e:	b580      	push	{r7, lr}
 800b430:	b082      	sub	sp, #8
 800b432:	af00      	add	r7, sp, #0
 800b434:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 800b436:	687b      	ldr	r3, [r7, #4]
 800b438:	685b      	ldr	r3, [r3, #4]
 800b43a:	2b00      	cmp	r3, #0
 800b43c:	d007      	beq.n	800b44e <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 800b43e:	687b      	ldr	r3, [r7, #4]
 800b440:	685b      	ldr	r3, [r3, #4]
 800b442:	4619      	mov	r1, r3
 800b444:	2001      	movs	r0, #1
 800b446:	f000 fc7d 	bl	800bd44 <xQueueCreateMutexStatic>
 800b44a:	4603      	mov	r3, r0
 800b44c:	e003      	b.n	800b456 <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 800b44e:	2001      	movs	r0, #1
 800b450:	f000 fc60 	bl	800bd14 <xQueueCreateMutex>
 800b454:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 800b456:	4618      	mov	r0, r3
 800b458:	3708      	adds	r7, #8
 800b45a:	46bd      	mov	sp, r7
 800b45c:	bd80      	pop	{r7, pc}
	...

0800b460 <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 800b460:	b580      	push	{r7, lr}
 800b462:	b084      	sub	sp, #16
 800b464:	af00      	add	r7, sp, #0
 800b466:	6078      	str	r0, [r7, #4]
 800b468:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 800b46a:	2300      	movs	r3, #0
 800b46c:	60bb      	str	r3, [r7, #8]
  
  
  if (mutex_id == NULL) {
 800b46e:	687b      	ldr	r3, [r7, #4]
 800b470:	2b00      	cmp	r3, #0
 800b472:	d101      	bne.n	800b478 <osMutexWait+0x18>
    return osErrorParameter;
 800b474:	2380      	movs	r3, #128	; 0x80
 800b476:	e03a      	b.n	800b4ee <osMutexWait+0x8e>
  }
  
  ticks = 0;
 800b478:	2300      	movs	r3, #0
 800b47a:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 800b47c:	683b      	ldr	r3, [r7, #0]
 800b47e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b482:	d103      	bne.n	800b48c <osMutexWait+0x2c>
    ticks = portMAX_DELAY;
 800b484:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b488:	60fb      	str	r3, [r7, #12]
 800b48a:	e009      	b.n	800b4a0 <osMutexWait+0x40>
  }
  else if (millisec != 0) {
 800b48c:	683b      	ldr	r3, [r7, #0]
 800b48e:	2b00      	cmp	r3, #0
 800b490:	d006      	beq.n	800b4a0 <osMutexWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 800b492:	683b      	ldr	r3, [r7, #0]
 800b494:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 800b496:	68fb      	ldr	r3, [r7, #12]
 800b498:	2b00      	cmp	r3, #0
 800b49a:	d101      	bne.n	800b4a0 <osMutexWait+0x40>
      ticks = 1;
 800b49c:	2301      	movs	r3, #1
 800b49e:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 800b4a0:	f7ff ff3c 	bl	800b31c <inHandlerMode>
 800b4a4:	4603      	mov	r3, r0
 800b4a6:	2b00      	cmp	r3, #0
 800b4a8:	d017      	beq.n	800b4da <osMutexWait+0x7a>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 800b4aa:	f107 0308 	add.w	r3, r7, #8
 800b4ae:	461a      	mov	r2, r3
 800b4b0:	2100      	movs	r1, #0
 800b4b2:	6878      	ldr	r0, [r7, #4]
 800b4b4:	f001 f85e 	bl	800c574 <xQueueReceiveFromISR>
 800b4b8:	4603      	mov	r3, r0
 800b4ba:	2b01      	cmp	r3, #1
 800b4bc:	d001      	beq.n	800b4c2 <osMutexWait+0x62>
      return osErrorOS;
 800b4be:	23ff      	movs	r3, #255	; 0xff
 800b4c0:	e015      	b.n	800b4ee <osMutexWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 800b4c2:	68bb      	ldr	r3, [r7, #8]
 800b4c4:	2b00      	cmp	r3, #0
 800b4c6:	d011      	beq.n	800b4ec <osMutexWait+0x8c>
 800b4c8:	4b0b      	ldr	r3, [pc, #44]	; (800b4f8 <osMutexWait+0x98>)
 800b4ca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b4ce:	601a      	str	r2, [r3, #0]
 800b4d0:	f3bf 8f4f 	dsb	sy
 800b4d4:	f3bf 8f6f 	isb	sy
 800b4d8:	e008      	b.n	800b4ec <osMutexWait+0x8c>
  } 
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 800b4da:	68f9      	ldr	r1, [r7, #12]
 800b4dc:	6878      	ldr	r0, [r7, #4]
 800b4de:	f000 ff41 	bl	800c364 <xQueueSemaphoreTake>
 800b4e2:	4603      	mov	r3, r0
 800b4e4:	2b01      	cmp	r3, #1
 800b4e6:	d001      	beq.n	800b4ec <osMutexWait+0x8c>
    return osErrorOS;
 800b4e8:	23ff      	movs	r3, #255	; 0xff
 800b4ea:	e000      	b.n	800b4ee <osMutexWait+0x8e>
  }
  
  return osOK;
 800b4ec:	2300      	movs	r3, #0
}
 800b4ee:	4618      	mov	r0, r3
 800b4f0:	3710      	adds	r7, #16
 800b4f2:	46bd      	mov	sp, r7
 800b4f4:	bd80      	pop	{r7, pc}
 800b4f6:	bf00      	nop
 800b4f8:	e000ed04 	.word	0xe000ed04

0800b4fc <osMutexRelease>:
* @param mutex_id      mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
 800b4fc:	b580      	push	{r7, lr}
 800b4fe:	b084      	sub	sp, #16
 800b500:	af00      	add	r7, sp, #0
 800b502:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 800b504:	2300      	movs	r3, #0
 800b506:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 800b508:	2300      	movs	r3, #0
 800b50a:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode()) {
 800b50c:	f7ff ff06 	bl	800b31c <inHandlerMode>
 800b510:	4603      	mov	r3, r0
 800b512:	2b00      	cmp	r3, #0
 800b514:	d016      	beq.n	800b544 <osMutexRelease+0x48>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 800b516:	f107 0308 	add.w	r3, r7, #8
 800b51a:	4619      	mov	r1, r3
 800b51c:	6878      	ldr	r0, [r7, #4]
 800b51e:	f000 fdbb 	bl	800c098 <xQueueGiveFromISR>
 800b522:	4603      	mov	r3, r0
 800b524:	2b01      	cmp	r3, #1
 800b526:	d001      	beq.n	800b52c <osMutexRelease+0x30>
      return osErrorOS;
 800b528:	23ff      	movs	r3, #255	; 0xff
 800b52a:	e017      	b.n	800b55c <osMutexRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800b52c:	68bb      	ldr	r3, [r7, #8]
 800b52e:	2b00      	cmp	r3, #0
 800b530:	d013      	beq.n	800b55a <osMutexRelease+0x5e>
 800b532:	4b0c      	ldr	r3, [pc, #48]	; (800b564 <osMutexRelease+0x68>)
 800b534:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b538:	601a      	str	r2, [r3, #0]
 800b53a:	f3bf 8f4f 	dsb	sy
 800b53e:	f3bf 8f6f 	isb	sy
 800b542:	e00a      	b.n	800b55a <osMutexRelease+0x5e>
  }
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 800b544:	2300      	movs	r3, #0
 800b546:	2200      	movs	r2, #0
 800b548:	2100      	movs	r1, #0
 800b54a:	6878      	ldr	r0, [r7, #4]
 800b54c:	f000 fc16 	bl	800bd7c <xQueueGenericSend>
 800b550:	4603      	mov	r3, r0
 800b552:	2b01      	cmp	r3, #1
 800b554:	d001      	beq.n	800b55a <osMutexRelease+0x5e>
  {
    result = osErrorOS;
 800b556:	23ff      	movs	r3, #255	; 0xff
 800b558:	60fb      	str	r3, [r7, #12]
  }
  return result;
 800b55a:	68fb      	ldr	r3, [r7, #12]
}
 800b55c:	4618      	mov	r0, r3
 800b55e:	3710      	adds	r7, #16
 800b560:	46bd      	mov	sp, r7
 800b562:	bd80      	pop	{r7, pc}
 800b564:	e000ed04 	.word	0xe000ed04

0800b568 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 800b568:	b580      	push	{r7, lr}
 800b56a:	b086      	sub	sp, #24
 800b56c:	af02      	add	r7, sp, #8
 800b56e:	6078      	str	r0, [r7, #4]
 800b570:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 800b572:	687b      	ldr	r3, [r7, #4]
 800b574:	685b      	ldr	r3, [r3, #4]
 800b576:	2b00      	cmp	r3, #0
 800b578:	d010      	beq.n	800b59c <osSemaphoreCreate+0x34>
    if (count == 1) {
 800b57a:	683b      	ldr	r3, [r7, #0]
 800b57c:	2b01      	cmp	r3, #1
 800b57e:	d10b      	bne.n	800b598 <osSemaphoreCreate+0x30>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 800b580:	687b      	ldr	r3, [r7, #4]
 800b582:	685a      	ldr	r2, [r3, #4]
 800b584:	2303      	movs	r3, #3
 800b586:	9300      	str	r3, [sp, #0]
 800b588:	4613      	mov	r3, r2
 800b58a:	2200      	movs	r2, #0
 800b58c:	2100      	movs	r1, #0
 800b58e:	2001      	movs	r0, #1
 800b590:	f000 fad8 	bl	800bb44 <xQueueGenericCreateStatic>
 800b594:	4603      	mov	r3, r0
 800b596:	e016      	b.n	800b5c6 <osSemaphoreCreate+0x5e>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 800b598:	2300      	movs	r3, #0
 800b59a:	e014      	b.n	800b5c6 <osSemaphoreCreate+0x5e>
#endif
    }
  }
  else {
    if (count == 1) {
 800b59c:	683b      	ldr	r3, [r7, #0]
 800b59e:	2b01      	cmp	r3, #1
 800b5a0:	d110      	bne.n	800b5c4 <osSemaphoreCreate+0x5c>
      vSemaphoreCreateBinary(sema);
 800b5a2:	2203      	movs	r2, #3
 800b5a4:	2100      	movs	r1, #0
 800b5a6:	2001      	movs	r0, #1
 800b5a8:	f000 fb3e 	bl	800bc28 <xQueueGenericCreate>
 800b5ac:	60f8      	str	r0, [r7, #12]
 800b5ae:	68fb      	ldr	r3, [r7, #12]
 800b5b0:	2b00      	cmp	r3, #0
 800b5b2:	d005      	beq.n	800b5c0 <osSemaphoreCreate+0x58>
 800b5b4:	2300      	movs	r3, #0
 800b5b6:	2200      	movs	r2, #0
 800b5b8:	2100      	movs	r1, #0
 800b5ba:	68f8      	ldr	r0, [r7, #12]
 800b5bc:	f000 fbde 	bl	800bd7c <xQueueGenericSend>
      return sema;
 800b5c0:	68fb      	ldr	r3, [r7, #12]
 800b5c2:	e000      	b.n	800b5c6 <osSemaphoreCreate+0x5e>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 800b5c4:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 800b5c6:	4618      	mov	r0, r3
 800b5c8:	3710      	adds	r7, #16
 800b5ca:	46bd      	mov	sp, r7
 800b5cc:	bd80      	pop	{r7, pc}
	...

0800b5d0 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 800b5d0:	b580      	push	{r7, lr}
 800b5d2:	b084      	sub	sp, #16
 800b5d4:	af00      	add	r7, sp, #0
 800b5d6:	6078      	str	r0, [r7, #4]
 800b5d8:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 800b5da:	2300      	movs	r3, #0
 800b5dc:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 800b5de:	687b      	ldr	r3, [r7, #4]
 800b5e0:	2b00      	cmp	r3, #0
 800b5e2:	d101      	bne.n	800b5e8 <osSemaphoreWait+0x18>
    return osErrorParameter;
 800b5e4:	2380      	movs	r3, #128	; 0x80
 800b5e6:	e03a      	b.n	800b65e <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 800b5e8:	2300      	movs	r3, #0
 800b5ea:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 800b5ec:	683b      	ldr	r3, [r7, #0]
 800b5ee:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b5f2:	d103      	bne.n	800b5fc <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 800b5f4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b5f8:	60fb      	str	r3, [r7, #12]
 800b5fa:	e009      	b.n	800b610 <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 800b5fc:	683b      	ldr	r3, [r7, #0]
 800b5fe:	2b00      	cmp	r3, #0
 800b600:	d006      	beq.n	800b610 <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 800b602:	683b      	ldr	r3, [r7, #0]
 800b604:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 800b606:	68fb      	ldr	r3, [r7, #12]
 800b608:	2b00      	cmp	r3, #0
 800b60a:	d101      	bne.n	800b610 <osSemaphoreWait+0x40>
      ticks = 1;
 800b60c:	2301      	movs	r3, #1
 800b60e:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 800b610:	f7ff fe84 	bl	800b31c <inHandlerMode>
 800b614:	4603      	mov	r3, r0
 800b616:	2b00      	cmp	r3, #0
 800b618:	d017      	beq.n	800b64a <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800b61a:	f107 0308 	add.w	r3, r7, #8
 800b61e:	461a      	mov	r2, r3
 800b620:	2100      	movs	r1, #0
 800b622:	6878      	ldr	r0, [r7, #4]
 800b624:	f000 ffa6 	bl	800c574 <xQueueReceiveFromISR>
 800b628:	4603      	mov	r3, r0
 800b62a:	2b01      	cmp	r3, #1
 800b62c:	d001      	beq.n	800b632 <osSemaphoreWait+0x62>
      return osErrorOS;
 800b62e:	23ff      	movs	r3, #255	; 0xff
 800b630:	e015      	b.n	800b65e <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 800b632:	68bb      	ldr	r3, [r7, #8]
 800b634:	2b00      	cmp	r3, #0
 800b636:	d011      	beq.n	800b65c <osSemaphoreWait+0x8c>
 800b638:	4b0b      	ldr	r3, [pc, #44]	; (800b668 <osSemaphoreWait+0x98>)
 800b63a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b63e:	601a      	str	r2, [r3, #0]
 800b640:	f3bf 8f4f 	dsb	sy
 800b644:	f3bf 8f6f 	isb	sy
 800b648:	e008      	b.n	800b65c <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 800b64a:	68f9      	ldr	r1, [r7, #12]
 800b64c:	6878      	ldr	r0, [r7, #4]
 800b64e:	f000 fe89 	bl	800c364 <xQueueSemaphoreTake>
 800b652:	4603      	mov	r3, r0
 800b654:	2b01      	cmp	r3, #1
 800b656:	d001      	beq.n	800b65c <osSemaphoreWait+0x8c>
    return osErrorOS;
 800b658:	23ff      	movs	r3, #255	; 0xff
 800b65a:	e000      	b.n	800b65e <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 800b65c:	2300      	movs	r3, #0
}
 800b65e:	4618      	mov	r0, r3
 800b660:	3710      	adds	r7, #16
 800b662:	46bd      	mov	sp, r7
 800b664:	bd80      	pop	{r7, pc}
 800b666:	bf00      	nop
 800b668:	e000ed04 	.word	0xe000ed04

0800b66c <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 800b66c:	b580      	push	{r7, lr}
 800b66e:	b084      	sub	sp, #16
 800b670:	af00      	add	r7, sp, #0
 800b672:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 800b674:	2300      	movs	r3, #0
 800b676:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 800b678:	2300      	movs	r3, #0
 800b67a:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 800b67c:	f7ff fe4e 	bl	800b31c <inHandlerMode>
 800b680:	4603      	mov	r3, r0
 800b682:	2b00      	cmp	r3, #0
 800b684:	d016      	beq.n	800b6b4 <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800b686:	f107 0308 	add.w	r3, r7, #8
 800b68a:	4619      	mov	r1, r3
 800b68c:	6878      	ldr	r0, [r7, #4]
 800b68e:	f000 fd03 	bl	800c098 <xQueueGiveFromISR>
 800b692:	4603      	mov	r3, r0
 800b694:	2b01      	cmp	r3, #1
 800b696:	d001      	beq.n	800b69c <osSemaphoreRelease+0x30>
      return osErrorOS;
 800b698:	23ff      	movs	r3, #255	; 0xff
 800b69a:	e017      	b.n	800b6cc <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800b69c:	68bb      	ldr	r3, [r7, #8]
 800b69e:	2b00      	cmp	r3, #0
 800b6a0:	d013      	beq.n	800b6ca <osSemaphoreRelease+0x5e>
 800b6a2:	4b0c      	ldr	r3, [pc, #48]	; (800b6d4 <osSemaphoreRelease+0x68>)
 800b6a4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b6a8:	601a      	str	r2, [r3, #0]
 800b6aa:	f3bf 8f4f 	dsb	sy
 800b6ae:	f3bf 8f6f 	isb	sy
 800b6b2:	e00a      	b.n	800b6ca <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 800b6b4:	2300      	movs	r3, #0
 800b6b6:	2200      	movs	r2, #0
 800b6b8:	2100      	movs	r1, #0
 800b6ba:	6878      	ldr	r0, [r7, #4]
 800b6bc:	f000 fb5e 	bl	800bd7c <xQueueGenericSend>
 800b6c0:	4603      	mov	r3, r0
 800b6c2:	2b01      	cmp	r3, #1
 800b6c4:	d001      	beq.n	800b6ca <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 800b6c6:	23ff      	movs	r3, #255	; 0xff
 800b6c8:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 800b6ca:	68fb      	ldr	r3, [r7, #12]
}
 800b6cc:	4618      	mov	r0, r3
 800b6ce:	3710      	adds	r7, #16
 800b6d0:	46bd      	mov	sp, r7
 800b6d2:	bd80      	pop	{r7, pc}
 800b6d4:	e000ed04 	.word	0xe000ed04

0800b6d8 <osSemaphoreDelete>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreDelete shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreDelete (osSemaphoreId semaphore_id)
{
 800b6d8:	b580      	push	{r7, lr}
 800b6da:	b082      	sub	sp, #8
 800b6dc:	af00      	add	r7, sp, #0
 800b6de:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 800b6e0:	f7ff fe1c 	bl	800b31c <inHandlerMode>
 800b6e4:	4603      	mov	r3, r0
 800b6e6:	2b00      	cmp	r3, #0
 800b6e8:	d001      	beq.n	800b6ee <osSemaphoreDelete+0x16>
    return osErrorISR;
 800b6ea:	2382      	movs	r3, #130	; 0x82
 800b6ec:	e003      	b.n	800b6f6 <osSemaphoreDelete+0x1e>
  }

  vSemaphoreDelete(semaphore_id);
 800b6ee:	6878      	ldr	r0, [r7, #4]
 800b6f0:	f000 fff5 	bl	800c6de <vQueueDelete>

  return osOK; 
 800b6f4:	2300      	movs	r3, #0
}
 800b6f6:	4618      	mov	r0, r3
 800b6f8:	3708      	adds	r7, #8
 800b6fa:	46bd      	mov	sp, r7
 800b6fc:	bd80      	pop	{r7, pc}

0800b6fe <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 800b6fe:	b590      	push	{r4, r7, lr}
 800b700:	b085      	sub	sp, #20
 800b702:	af02      	add	r7, sp, #8
 800b704:	6078      	str	r0, [r7, #4]
 800b706:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 800b708:	687b      	ldr	r3, [r7, #4]
 800b70a:	689b      	ldr	r3, [r3, #8]
 800b70c:	2b00      	cmp	r3, #0
 800b70e:	d012      	beq.n	800b736 <osMessageCreate+0x38>
 800b710:	687b      	ldr	r3, [r7, #4]
 800b712:	68db      	ldr	r3, [r3, #12]
 800b714:	2b00      	cmp	r3, #0
 800b716:	d00e      	beq.n	800b736 <osMessageCreate+0x38>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 800b718:	687b      	ldr	r3, [r7, #4]
 800b71a:	6818      	ldr	r0, [r3, #0]
 800b71c:	687b      	ldr	r3, [r7, #4]
 800b71e:	6859      	ldr	r1, [r3, #4]
 800b720:	687b      	ldr	r3, [r7, #4]
 800b722:	689a      	ldr	r2, [r3, #8]
 800b724:	687b      	ldr	r3, [r7, #4]
 800b726:	68dc      	ldr	r4, [r3, #12]
 800b728:	2300      	movs	r3, #0
 800b72a:	9300      	str	r3, [sp, #0]
 800b72c:	4623      	mov	r3, r4
 800b72e:	f000 fa09 	bl	800bb44 <xQueueGenericCreateStatic>
 800b732:	4603      	mov	r3, r0
 800b734:	e008      	b.n	800b748 <osMessageCreate+0x4a>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 800b736:	687b      	ldr	r3, [r7, #4]
 800b738:	6818      	ldr	r0, [r3, #0]
 800b73a:	687b      	ldr	r3, [r7, #4]
 800b73c:	685b      	ldr	r3, [r3, #4]
 800b73e:	2200      	movs	r2, #0
 800b740:	4619      	mov	r1, r3
 800b742:	f000 fa71 	bl	800bc28 <xQueueGenericCreate>
 800b746:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 800b748:	4618      	mov	r0, r3
 800b74a:	370c      	adds	r7, #12
 800b74c:	46bd      	mov	sp, r7
 800b74e:	bd90      	pop	{r4, r7, pc}

0800b750 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 800b750:	b580      	push	{r7, lr}
 800b752:	b086      	sub	sp, #24
 800b754:	af00      	add	r7, sp, #0
 800b756:	60f8      	str	r0, [r7, #12]
 800b758:	60b9      	str	r1, [r7, #8]
 800b75a:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 800b75c:	2300      	movs	r3, #0
 800b75e:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 800b760:	687b      	ldr	r3, [r7, #4]
 800b762:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 800b764:	697b      	ldr	r3, [r7, #20]
 800b766:	2b00      	cmp	r3, #0
 800b768:	d101      	bne.n	800b76e <osMessagePut+0x1e>
    ticks = 1;
 800b76a:	2301      	movs	r3, #1
 800b76c:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 800b76e:	f7ff fdd5 	bl	800b31c <inHandlerMode>
 800b772:	4603      	mov	r3, r0
 800b774:	2b00      	cmp	r3, #0
 800b776:	d018      	beq.n	800b7aa <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 800b778:	f107 0210 	add.w	r2, r7, #16
 800b77c:	f107 0108 	add.w	r1, r7, #8
 800b780:	2300      	movs	r3, #0
 800b782:	68f8      	ldr	r0, [r7, #12]
 800b784:	f000 fbf4 	bl	800bf70 <xQueueGenericSendFromISR>
 800b788:	4603      	mov	r3, r0
 800b78a:	2b01      	cmp	r3, #1
 800b78c:	d001      	beq.n	800b792 <osMessagePut+0x42>
      return osErrorOS;
 800b78e:	23ff      	movs	r3, #255	; 0xff
 800b790:	e018      	b.n	800b7c4 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800b792:	693b      	ldr	r3, [r7, #16]
 800b794:	2b00      	cmp	r3, #0
 800b796:	d014      	beq.n	800b7c2 <osMessagePut+0x72>
 800b798:	4b0c      	ldr	r3, [pc, #48]	; (800b7cc <osMessagePut+0x7c>)
 800b79a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b79e:	601a      	str	r2, [r3, #0]
 800b7a0:	f3bf 8f4f 	dsb	sy
 800b7a4:	f3bf 8f6f 	isb	sy
 800b7a8:	e00b      	b.n	800b7c2 <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 800b7aa:	f107 0108 	add.w	r1, r7, #8
 800b7ae:	2300      	movs	r3, #0
 800b7b0:	697a      	ldr	r2, [r7, #20]
 800b7b2:	68f8      	ldr	r0, [r7, #12]
 800b7b4:	f000 fae2 	bl	800bd7c <xQueueGenericSend>
 800b7b8:	4603      	mov	r3, r0
 800b7ba:	2b01      	cmp	r3, #1
 800b7bc:	d001      	beq.n	800b7c2 <osMessagePut+0x72>
      return osErrorOS;
 800b7be:	23ff      	movs	r3, #255	; 0xff
 800b7c0:	e000      	b.n	800b7c4 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 800b7c2:	2300      	movs	r3, #0
}
 800b7c4:	4618      	mov	r0, r3
 800b7c6:	3718      	adds	r7, #24
 800b7c8:	46bd      	mov	sp, r7
 800b7ca:	bd80      	pop	{r7, pc}
 800b7cc:	e000ed04 	.word	0xe000ed04

0800b7d0 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 800b7d0:	b590      	push	{r4, r7, lr}
 800b7d2:	b08b      	sub	sp, #44	; 0x2c
 800b7d4:	af00      	add	r7, sp, #0
 800b7d6:	60f8      	str	r0, [r7, #12]
 800b7d8:	60b9      	str	r1, [r7, #8]
 800b7da:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 800b7dc:	68bb      	ldr	r3, [r7, #8]
 800b7de:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 800b7e0:	2300      	movs	r3, #0
 800b7e2:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 800b7e4:	68bb      	ldr	r3, [r7, #8]
 800b7e6:	2b00      	cmp	r3, #0
 800b7e8:	d10a      	bne.n	800b800 <osMessageGet+0x30>
    event.status = osErrorParameter;
 800b7ea:	2380      	movs	r3, #128	; 0x80
 800b7ec:	617b      	str	r3, [r7, #20]
    return event;
 800b7ee:	68fb      	ldr	r3, [r7, #12]
 800b7f0:	461c      	mov	r4, r3
 800b7f2:	f107 0314 	add.w	r3, r7, #20
 800b7f6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800b7fa:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800b7fe:	e054      	b.n	800b8aa <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 800b800:	2300      	movs	r3, #0
 800b802:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 800b804:	2300      	movs	r3, #0
 800b806:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 800b808:	687b      	ldr	r3, [r7, #4]
 800b80a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b80e:	d103      	bne.n	800b818 <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 800b810:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b814:	627b      	str	r3, [r7, #36]	; 0x24
 800b816:	e009      	b.n	800b82c <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 800b818:	687b      	ldr	r3, [r7, #4]
 800b81a:	2b00      	cmp	r3, #0
 800b81c:	d006      	beq.n	800b82c <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 800b81e:	687b      	ldr	r3, [r7, #4]
 800b820:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 800b822:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b824:	2b00      	cmp	r3, #0
 800b826:	d101      	bne.n	800b82c <osMessageGet+0x5c>
      ticks = 1;
 800b828:	2301      	movs	r3, #1
 800b82a:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 800b82c:	f7ff fd76 	bl	800b31c <inHandlerMode>
 800b830:	4603      	mov	r3, r0
 800b832:	2b00      	cmp	r3, #0
 800b834:	d01c      	beq.n	800b870 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 800b836:	f107 0220 	add.w	r2, r7, #32
 800b83a:	f107 0314 	add.w	r3, r7, #20
 800b83e:	3304      	adds	r3, #4
 800b840:	4619      	mov	r1, r3
 800b842:	68b8      	ldr	r0, [r7, #8]
 800b844:	f000 fe96 	bl	800c574 <xQueueReceiveFromISR>
 800b848:	4603      	mov	r3, r0
 800b84a:	2b01      	cmp	r3, #1
 800b84c:	d102      	bne.n	800b854 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 800b84e:	2310      	movs	r3, #16
 800b850:	617b      	str	r3, [r7, #20]
 800b852:	e001      	b.n	800b858 <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 800b854:	2300      	movs	r3, #0
 800b856:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 800b858:	6a3b      	ldr	r3, [r7, #32]
 800b85a:	2b00      	cmp	r3, #0
 800b85c:	d01d      	beq.n	800b89a <osMessageGet+0xca>
 800b85e:	4b15      	ldr	r3, [pc, #84]	; (800b8b4 <osMessageGet+0xe4>)
 800b860:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b864:	601a      	str	r2, [r3, #0]
 800b866:	f3bf 8f4f 	dsb	sy
 800b86a:	f3bf 8f6f 	isb	sy
 800b86e:	e014      	b.n	800b89a <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 800b870:	f107 0314 	add.w	r3, r7, #20
 800b874:	3304      	adds	r3, #4
 800b876:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b878:	4619      	mov	r1, r3
 800b87a:	68b8      	ldr	r0, [r7, #8]
 800b87c:	f000 fc96 	bl	800c1ac <xQueueReceive>
 800b880:	4603      	mov	r3, r0
 800b882:	2b01      	cmp	r3, #1
 800b884:	d102      	bne.n	800b88c <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 800b886:	2310      	movs	r3, #16
 800b888:	617b      	str	r3, [r7, #20]
 800b88a:	e006      	b.n	800b89a <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 800b88c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b88e:	2b00      	cmp	r3, #0
 800b890:	d101      	bne.n	800b896 <osMessageGet+0xc6>
 800b892:	2300      	movs	r3, #0
 800b894:	e000      	b.n	800b898 <osMessageGet+0xc8>
 800b896:	2340      	movs	r3, #64	; 0x40
 800b898:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 800b89a:	68fb      	ldr	r3, [r7, #12]
 800b89c:	461c      	mov	r4, r3
 800b89e:	f107 0314 	add.w	r3, r7, #20
 800b8a2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800b8a6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 800b8aa:	68f8      	ldr	r0, [r7, #12]
 800b8ac:	372c      	adds	r7, #44	; 0x2c
 800b8ae:	46bd      	mov	sp, r7
 800b8b0:	bd90      	pop	{r4, r7, pc}
 800b8b2:	bf00      	nop
 800b8b4:	e000ed04 	.word	0xe000ed04

0800b8b8 <osMessageWaiting>:
* @brief  Get the number of messaged stored in a queue.
* @param  queue_id  message queue ID obtained with \ref osMessageCreate.
* @retval number of messages stored in a queue.
*/
uint32_t osMessageWaiting(osMessageQId queue_id)
{
 800b8b8:	b580      	push	{r7, lr}
 800b8ba:	b082      	sub	sp, #8
 800b8bc:	af00      	add	r7, sp, #0
 800b8be:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 800b8c0:	f7ff fd2c 	bl	800b31c <inHandlerMode>
 800b8c4:	4603      	mov	r3, r0
 800b8c6:	2b00      	cmp	r3, #0
 800b8c8:	d004      	beq.n	800b8d4 <osMessageWaiting+0x1c>
    return uxQueueMessagesWaitingFromISR(queue_id);
 800b8ca:	6878      	ldr	r0, [r7, #4]
 800b8cc:	f000 feec 	bl	800c6a8 <uxQueueMessagesWaitingFromISR>
 800b8d0:	4603      	mov	r3, r0
 800b8d2:	e003      	b.n	800b8dc <osMessageWaiting+0x24>
  }
  else
  {
    return uxQueueMessagesWaiting(queue_id);
 800b8d4:	6878      	ldr	r0, [r7, #4]
 800b8d6:	f000 feca 	bl	800c66e <uxQueueMessagesWaiting>
 800b8da:	4603      	mov	r3, r0
  }
}
 800b8dc:	4618      	mov	r0, r3
 800b8de:	3708      	adds	r7, #8
 800b8e0:	46bd      	mov	sp, r7
 800b8e2:	bd80      	pop	{r7, pc}

0800b8e4 <osMessageDelete>:
* @brief Delete a Message Queue
* @param  queue_id  message queue ID obtained with \ref osMessageCreate.
* @retval  status code that indicates the execution status of the function.
*/
osStatus osMessageDelete (osMessageQId queue_id)
{
 800b8e4:	b580      	push	{r7, lr}
 800b8e6:	b082      	sub	sp, #8
 800b8e8:	af00      	add	r7, sp, #0
 800b8ea:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 800b8ec:	f7ff fd16 	bl	800b31c <inHandlerMode>
 800b8f0:	4603      	mov	r3, r0
 800b8f2:	2b00      	cmp	r3, #0
 800b8f4:	d001      	beq.n	800b8fa <osMessageDelete+0x16>
    return osErrorISR;
 800b8f6:	2382      	movs	r3, #130	; 0x82
 800b8f8:	e003      	b.n	800b902 <osMessageDelete+0x1e>
  }

  vQueueDelete(queue_id);
 800b8fa:	6878      	ldr	r0, [r7, #4]
 800b8fc:	f000 feef 	bl	800c6de <vQueueDelete>

  return osOK; 
 800b900:	2300      	movs	r3, #0
}
 800b902:	4618      	mov	r0, r3
 800b904:	3708      	adds	r7, #8
 800b906:	46bd      	mov	sp, r7
 800b908:	bd80      	pop	{r7, pc}

0800b90a <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800b90a:	b480      	push	{r7}
 800b90c:	b083      	sub	sp, #12
 800b90e:	af00      	add	r7, sp, #0
 800b910:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b912:	687b      	ldr	r3, [r7, #4]
 800b914:	f103 0208 	add.w	r2, r3, #8
 800b918:	687b      	ldr	r3, [r7, #4]
 800b91a:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800b91c:	687b      	ldr	r3, [r7, #4]
 800b91e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b922:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b924:	687b      	ldr	r3, [r7, #4]
 800b926:	f103 0208 	add.w	r2, r3, #8
 800b92a:	687b      	ldr	r3, [r7, #4]
 800b92c:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b92e:	687b      	ldr	r3, [r7, #4]
 800b930:	f103 0208 	add.w	r2, r3, #8
 800b934:	687b      	ldr	r3, [r7, #4]
 800b936:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800b938:	687b      	ldr	r3, [r7, #4]
 800b93a:	2200      	movs	r2, #0
 800b93c:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800b93e:	bf00      	nop
 800b940:	370c      	adds	r7, #12
 800b942:	46bd      	mov	sp, r7
 800b944:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b948:	4770      	bx	lr

0800b94a <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800b94a:	b480      	push	{r7}
 800b94c:	b083      	sub	sp, #12
 800b94e:	af00      	add	r7, sp, #0
 800b950:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 800b952:	687b      	ldr	r3, [r7, #4]
 800b954:	2200      	movs	r2, #0
 800b956:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800b958:	bf00      	nop
 800b95a:	370c      	adds	r7, #12
 800b95c:	46bd      	mov	sp, r7
 800b95e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b962:	4770      	bx	lr

0800b964 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800b964:	b480      	push	{r7}
 800b966:	b085      	sub	sp, #20
 800b968:	af00      	add	r7, sp, #0
 800b96a:	6078      	str	r0, [r7, #4]
 800b96c:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800b96e:	687b      	ldr	r3, [r7, #4]
 800b970:	685b      	ldr	r3, [r3, #4]
 800b972:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800b974:	683b      	ldr	r3, [r7, #0]
 800b976:	68fa      	ldr	r2, [r7, #12]
 800b978:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800b97a:	68fb      	ldr	r3, [r7, #12]
 800b97c:	689a      	ldr	r2, [r3, #8]
 800b97e:	683b      	ldr	r3, [r7, #0]
 800b980:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800b982:	68fb      	ldr	r3, [r7, #12]
 800b984:	689b      	ldr	r3, [r3, #8]
 800b986:	683a      	ldr	r2, [r7, #0]
 800b988:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800b98a:	68fb      	ldr	r3, [r7, #12]
 800b98c:	683a      	ldr	r2, [r7, #0]
 800b98e:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800b990:	683b      	ldr	r3, [r7, #0]
 800b992:	687a      	ldr	r2, [r7, #4]
 800b994:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800b996:	687b      	ldr	r3, [r7, #4]
 800b998:	681b      	ldr	r3, [r3, #0]
 800b99a:	1c5a      	adds	r2, r3, #1
 800b99c:	687b      	ldr	r3, [r7, #4]
 800b99e:	601a      	str	r2, [r3, #0]
}
 800b9a0:	bf00      	nop
 800b9a2:	3714      	adds	r7, #20
 800b9a4:	46bd      	mov	sp, r7
 800b9a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9aa:	4770      	bx	lr

0800b9ac <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800b9ac:	b480      	push	{r7}
 800b9ae:	b085      	sub	sp, #20
 800b9b0:	af00      	add	r7, sp, #0
 800b9b2:	6078      	str	r0, [r7, #4]
 800b9b4:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800b9b6:	683b      	ldr	r3, [r7, #0]
 800b9b8:	681b      	ldr	r3, [r3, #0]
 800b9ba:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800b9bc:	68bb      	ldr	r3, [r7, #8]
 800b9be:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b9c2:	d103      	bne.n	800b9cc <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800b9c4:	687b      	ldr	r3, [r7, #4]
 800b9c6:	691b      	ldr	r3, [r3, #16]
 800b9c8:	60fb      	str	r3, [r7, #12]
 800b9ca:	e00c      	b.n	800b9e6 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b9cc:	687b      	ldr	r3, [r7, #4]
 800b9ce:	3308      	adds	r3, #8
 800b9d0:	60fb      	str	r3, [r7, #12]
 800b9d2:	e002      	b.n	800b9da <vListInsert+0x2e>
 800b9d4:	68fb      	ldr	r3, [r7, #12]
 800b9d6:	685b      	ldr	r3, [r3, #4]
 800b9d8:	60fb      	str	r3, [r7, #12]
 800b9da:	68fb      	ldr	r3, [r7, #12]
 800b9dc:	685b      	ldr	r3, [r3, #4]
 800b9de:	681b      	ldr	r3, [r3, #0]
 800b9e0:	68ba      	ldr	r2, [r7, #8]
 800b9e2:	429a      	cmp	r2, r3
 800b9e4:	d2f6      	bcs.n	800b9d4 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800b9e6:	68fb      	ldr	r3, [r7, #12]
 800b9e8:	685a      	ldr	r2, [r3, #4]
 800b9ea:	683b      	ldr	r3, [r7, #0]
 800b9ec:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800b9ee:	683b      	ldr	r3, [r7, #0]
 800b9f0:	685b      	ldr	r3, [r3, #4]
 800b9f2:	683a      	ldr	r2, [r7, #0]
 800b9f4:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800b9f6:	683b      	ldr	r3, [r7, #0]
 800b9f8:	68fa      	ldr	r2, [r7, #12]
 800b9fa:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800b9fc:	68fb      	ldr	r3, [r7, #12]
 800b9fe:	683a      	ldr	r2, [r7, #0]
 800ba00:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800ba02:	683b      	ldr	r3, [r7, #0]
 800ba04:	687a      	ldr	r2, [r7, #4]
 800ba06:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800ba08:	687b      	ldr	r3, [r7, #4]
 800ba0a:	681b      	ldr	r3, [r3, #0]
 800ba0c:	1c5a      	adds	r2, r3, #1
 800ba0e:	687b      	ldr	r3, [r7, #4]
 800ba10:	601a      	str	r2, [r3, #0]
}
 800ba12:	bf00      	nop
 800ba14:	3714      	adds	r7, #20
 800ba16:	46bd      	mov	sp, r7
 800ba18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba1c:	4770      	bx	lr

0800ba1e <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800ba1e:	b480      	push	{r7}
 800ba20:	b085      	sub	sp, #20
 800ba22:	af00      	add	r7, sp, #0
 800ba24:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 800ba26:	687b      	ldr	r3, [r7, #4]
 800ba28:	691b      	ldr	r3, [r3, #16]
 800ba2a:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800ba2c:	687b      	ldr	r3, [r7, #4]
 800ba2e:	685b      	ldr	r3, [r3, #4]
 800ba30:	687a      	ldr	r2, [r7, #4]
 800ba32:	6892      	ldr	r2, [r2, #8]
 800ba34:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800ba36:	687b      	ldr	r3, [r7, #4]
 800ba38:	689b      	ldr	r3, [r3, #8]
 800ba3a:	687a      	ldr	r2, [r7, #4]
 800ba3c:	6852      	ldr	r2, [r2, #4]
 800ba3e:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800ba40:	68fb      	ldr	r3, [r7, #12]
 800ba42:	685b      	ldr	r3, [r3, #4]
 800ba44:	687a      	ldr	r2, [r7, #4]
 800ba46:	429a      	cmp	r2, r3
 800ba48:	d103      	bne.n	800ba52 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800ba4a:	687b      	ldr	r3, [r7, #4]
 800ba4c:	689a      	ldr	r2, [r3, #8]
 800ba4e:	68fb      	ldr	r3, [r7, #12]
 800ba50:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 800ba52:	687b      	ldr	r3, [r7, #4]
 800ba54:	2200      	movs	r2, #0
 800ba56:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800ba58:	68fb      	ldr	r3, [r7, #12]
 800ba5a:	681b      	ldr	r3, [r3, #0]
 800ba5c:	1e5a      	subs	r2, r3, #1
 800ba5e:	68fb      	ldr	r3, [r7, #12]
 800ba60:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800ba62:	68fb      	ldr	r3, [r7, #12]
 800ba64:	681b      	ldr	r3, [r3, #0]
}
 800ba66:	4618      	mov	r0, r3
 800ba68:	3714      	adds	r7, #20
 800ba6a:	46bd      	mov	sp, r7
 800ba6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba70:	4770      	bx	lr
	...

0800ba74 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800ba74:	b580      	push	{r7, lr}
 800ba76:	b084      	sub	sp, #16
 800ba78:	af00      	add	r7, sp, #0
 800ba7a:	6078      	str	r0, [r7, #4]
 800ba7c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800ba7e:	687b      	ldr	r3, [r7, #4]
 800ba80:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800ba82:	68fb      	ldr	r3, [r7, #12]
 800ba84:	2b00      	cmp	r3, #0
 800ba86:	d109      	bne.n	800ba9c <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800ba88:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba8c:	f383 8811 	msr	BASEPRI, r3
 800ba90:	f3bf 8f6f 	isb	sy
 800ba94:	f3bf 8f4f 	dsb	sy
 800ba98:	60bb      	str	r3, [r7, #8]
 800ba9a:	e7fe      	b.n	800ba9a <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 800ba9c:	f002 f8d6 	bl	800dc4c <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 800baa0:	68fb      	ldr	r3, [r7, #12]
 800baa2:	681a      	ldr	r2, [r3, #0]
 800baa4:	68fb      	ldr	r3, [r7, #12]
 800baa6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800baa8:	68f9      	ldr	r1, [r7, #12]
 800baaa:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800baac:	fb01 f303 	mul.w	r3, r1, r3
 800bab0:	441a      	add	r2, r3
 800bab2:	68fb      	ldr	r3, [r7, #12]
 800bab4:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800bab6:	68fb      	ldr	r3, [r7, #12]
 800bab8:	2200      	movs	r2, #0
 800baba:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800babc:	68fb      	ldr	r3, [r7, #12]
 800babe:	681a      	ldr	r2, [r3, #0]
 800bac0:	68fb      	ldr	r3, [r7, #12]
 800bac2:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 800bac4:	68fb      	ldr	r3, [r7, #12]
 800bac6:	681a      	ldr	r2, [r3, #0]
 800bac8:	68fb      	ldr	r3, [r7, #12]
 800baca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bacc:	3b01      	subs	r3, #1
 800bace:	68f9      	ldr	r1, [r7, #12]
 800bad0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800bad2:	fb01 f303 	mul.w	r3, r1, r3
 800bad6:	441a      	add	r2, r3
 800bad8:	68fb      	ldr	r3, [r7, #12]
 800bada:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800badc:	68fb      	ldr	r3, [r7, #12]
 800bade:	22ff      	movs	r2, #255	; 0xff
 800bae0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800bae4:	68fb      	ldr	r3, [r7, #12]
 800bae6:	22ff      	movs	r2, #255	; 0xff
 800bae8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800baec:	683b      	ldr	r3, [r7, #0]
 800baee:	2b00      	cmp	r3, #0
 800baf0:	d114      	bne.n	800bb1c <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800baf2:	68fb      	ldr	r3, [r7, #12]
 800baf4:	691b      	ldr	r3, [r3, #16]
 800baf6:	2b00      	cmp	r3, #0
 800baf8:	d01a      	beq.n	800bb30 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800bafa:	68fb      	ldr	r3, [r7, #12]
 800bafc:	3310      	adds	r3, #16
 800bafe:	4618      	mov	r0, r3
 800bb00:	f001 fb80 	bl	800d204 <xTaskRemoveFromEventList>
 800bb04:	4603      	mov	r3, r0
 800bb06:	2b00      	cmp	r3, #0
 800bb08:	d012      	beq.n	800bb30 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800bb0a:	4b0d      	ldr	r3, [pc, #52]	; (800bb40 <xQueueGenericReset+0xcc>)
 800bb0c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bb10:	601a      	str	r2, [r3, #0]
 800bb12:	f3bf 8f4f 	dsb	sy
 800bb16:	f3bf 8f6f 	isb	sy
 800bb1a:	e009      	b.n	800bb30 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800bb1c:	68fb      	ldr	r3, [r7, #12]
 800bb1e:	3310      	adds	r3, #16
 800bb20:	4618      	mov	r0, r3
 800bb22:	f7ff fef2 	bl	800b90a <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800bb26:	68fb      	ldr	r3, [r7, #12]
 800bb28:	3324      	adds	r3, #36	; 0x24
 800bb2a:	4618      	mov	r0, r3
 800bb2c:	f7ff feed 	bl	800b90a <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800bb30:	f002 f8ba 	bl	800dca8 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800bb34:	2301      	movs	r3, #1
}
 800bb36:	4618      	mov	r0, r3
 800bb38:	3710      	adds	r7, #16
 800bb3a:	46bd      	mov	sp, r7
 800bb3c:	bd80      	pop	{r7, pc}
 800bb3e:	bf00      	nop
 800bb40:	e000ed04 	.word	0xe000ed04

0800bb44 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800bb44:	b580      	push	{r7, lr}
 800bb46:	b08e      	sub	sp, #56	; 0x38
 800bb48:	af02      	add	r7, sp, #8
 800bb4a:	60f8      	str	r0, [r7, #12]
 800bb4c:	60b9      	str	r1, [r7, #8]
 800bb4e:	607a      	str	r2, [r7, #4]
 800bb50:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800bb52:	68fb      	ldr	r3, [r7, #12]
 800bb54:	2b00      	cmp	r3, #0
 800bb56:	d109      	bne.n	800bb6c <xQueueGenericCreateStatic+0x28>
 800bb58:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb5c:	f383 8811 	msr	BASEPRI, r3
 800bb60:	f3bf 8f6f 	isb	sy
 800bb64:	f3bf 8f4f 	dsb	sy
 800bb68:	62bb      	str	r3, [r7, #40]	; 0x28
 800bb6a:	e7fe      	b.n	800bb6a <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800bb6c:	683b      	ldr	r3, [r7, #0]
 800bb6e:	2b00      	cmp	r3, #0
 800bb70:	d109      	bne.n	800bb86 <xQueueGenericCreateStatic+0x42>
 800bb72:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb76:	f383 8811 	msr	BASEPRI, r3
 800bb7a:	f3bf 8f6f 	isb	sy
 800bb7e:	f3bf 8f4f 	dsb	sy
 800bb82:	627b      	str	r3, [r7, #36]	; 0x24
 800bb84:	e7fe      	b.n	800bb84 <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800bb86:	687b      	ldr	r3, [r7, #4]
 800bb88:	2b00      	cmp	r3, #0
 800bb8a:	d002      	beq.n	800bb92 <xQueueGenericCreateStatic+0x4e>
 800bb8c:	68bb      	ldr	r3, [r7, #8]
 800bb8e:	2b00      	cmp	r3, #0
 800bb90:	d001      	beq.n	800bb96 <xQueueGenericCreateStatic+0x52>
 800bb92:	2301      	movs	r3, #1
 800bb94:	e000      	b.n	800bb98 <xQueueGenericCreateStatic+0x54>
 800bb96:	2300      	movs	r3, #0
 800bb98:	2b00      	cmp	r3, #0
 800bb9a:	d109      	bne.n	800bbb0 <xQueueGenericCreateStatic+0x6c>
 800bb9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bba0:	f383 8811 	msr	BASEPRI, r3
 800bba4:	f3bf 8f6f 	isb	sy
 800bba8:	f3bf 8f4f 	dsb	sy
 800bbac:	623b      	str	r3, [r7, #32]
 800bbae:	e7fe      	b.n	800bbae <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800bbb0:	687b      	ldr	r3, [r7, #4]
 800bbb2:	2b00      	cmp	r3, #0
 800bbb4:	d102      	bne.n	800bbbc <xQueueGenericCreateStatic+0x78>
 800bbb6:	68bb      	ldr	r3, [r7, #8]
 800bbb8:	2b00      	cmp	r3, #0
 800bbba:	d101      	bne.n	800bbc0 <xQueueGenericCreateStatic+0x7c>
 800bbbc:	2301      	movs	r3, #1
 800bbbe:	e000      	b.n	800bbc2 <xQueueGenericCreateStatic+0x7e>
 800bbc0:	2300      	movs	r3, #0
 800bbc2:	2b00      	cmp	r3, #0
 800bbc4:	d109      	bne.n	800bbda <xQueueGenericCreateStatic+0x96>
 800bbc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bbca:	f383 8811 	msr	BASEPRI, r3
 800bbce:	f3bf 8f6f 	isb	sy
 800bbd2:	f3bf 8f4f 	dsb	sy
 800bbd6:	61fb      	str	r3, [r7, #28]
 800bbd8:	e7fe      	b.n	800bbd8 <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800bbda:	2348      	movs	r3, #72	; 0x48
 800bbdc:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800bbde:	697b      	ldr	r3, [r7, #20]
 800bbe0:	2b48      	cmp	r3, #72	; 0x48
 800bbe2:	d009      	beq.n	800bbf8 <xQueueGenericCreateStatic+0xb4>
 800bbe4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bbe8:	f383 8811 	msr	BASEPRI, r3
 800bbec:	f3bf 8f6f 	isb	sy
 800bbf0:	f3bf 8f4f 	dsb	sy
 800bbf4:	61bb      	str	r3, [r7, #24]
 800bbf6:	e7fe      	b.n	800bbf6 <xQueueGenericCreateStatic+0xb2>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800bbf8:	683b      	ldr	r3, [r7, #0]
 800bbfa:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800bbfc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bbfe:	2b00      	cmp	r3, #0
 800bc00:	d00d      	beq.n	800bc1e <xQueueGenericCreateStatic+0xda>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800bc02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bc04:	2201      	movs	r2, #1
 800bc06:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800bc0a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800bc0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bc10:	9300      	str	r3, [sp, #0]
 800bc12:	4613      	mov	r3, r2
 800bc14:	687a      	ldr	r2, [r7, #4]
 800bc16:	68b9      	ldr	r1, [r7, #8]
 800bc18:	68f8      	ldr	r0, [r7, #12]
 800bc1a:	f000 f842 	bl	800bca2 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 800bc1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800bc20:	4618      	mov	r0, r3
 800bc22:	3730      	adds	r7, #48	; 0x30
 800bc24:	46bd      	mov	sp, r7
 800bc26:	bd80      	pop	{r7, pc}

0800bc28 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800bc28:	b580      	push	{r7, lr}
 800bc2a:	b08a      	sub	sp, #40	; 0x28
 800bc2c:	af02      	add	r7, sp, #8
 800bc2e:	60f8      	str	r0, [r7, #12]
 800bc30:	60b9      	str	r1, [r7, #8]
 800bc32:	4613      	mov	r3, r2
 800bc34:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800bc36:	68fb      	ldr	r3, [r7, #12]
 800bc38:	2b00      	cmp	r3, #0
 800bc3a:	d109      	bne.n	800bc50 <xQueueGenericCreate+0x28>
 800bc3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc40:	f383 8811 	msr	BASEPRI, r3
 800bc44:	f3bf 8f6f 	isb	sy
 800bc48:	f3bf 8f4f 	dsb	sy
 800bc4c:	613b      	str	r3, [r7, #16]
 800bc4e:	e7fe      	b.n	800bc4e <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800bc50:	68bb      	ldr	r3, [r7, #8]
 800bc52:	2b00      	cmp	r3, #0
 800bc54:	d102      	bne.n	800bc5c <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800bc56:	2300      	movs	r3, #0
 800bc58:	61fb      	str	r3, [r7, #28]
 800bc5a:	e004      	b.n	800bc66 <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bc5c:	68fb      	ldr	r3, [r7, #12]
 800bc5e:	68ba      	ldr	r2, [r7, #8]
 800bc60:	fb02 f303 	mul.w	r3, r2, r3
 800bc64:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 800bc66:	69fb      	ldr	r3, [r7, #28]
 800bc68:	3348      	adds	r3, #72	; 0x48
 800bc6a:	4618      	mov	r0, r3
 800bc6c:	f002 f908 	bl	800de80 <pvPortMalloc>
 800bc70:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800bc72:	69bb      	ldr	r3, [r7, #24]
 800bc74:	2b00      	cmp	r3, #0
 800bc76:	d00f      	beq.n	800bc98 <xQueueGenericCreate+0x70>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 800bc78:	69bb      	ldr	r3, [r7, #24]
 800bc7a:	3348      	adds	r3, #72	; 0x48
 800bc7c:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800bc7e:	69bb      	ldr	r3, [r7, #24]
 800bc80:	2200      	movs	r2, #0
 800bc82:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800bc86:	79fa      	ldrb	r2, [r7, #7]
 800bc88:	69bb      	ldr	r3, [r7, #24]
 800bc8a:	9300      	str	r3, [sp, #0]
 800bc8c:	4613      	mov	r3, r2
 800bc8e:	697a      	ldr	r2, [r7, #20]
 800bc90:	68b9      	ldr	r1, [r7, #8]
 800bc92:	68f8      	ldr	r0, [r7, #12]
 800bc94:	f000 f805 	bl	800bca2 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 800bc98:	69bb      	ldr	r3, [r7, #24]
	}
 800bc9a:	4618      	mov	r0, r3
 800bc9c:	3720      	adds	r7, #32
 800bc9e:	46bd      	mov	sp, r7
 800bca0:	bd80      	pop	{r7, pc}

0800bca2 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800bca2:	b580      	push	{r7, lr}
 800bca4:	b084      	sub	sp, #16
 800bca6:	af00      	add	r7, sp, #0
 800bca8:	60f8      	str	r0, [r7, #12]
 800bcaa:	60b9      	str	r1, [r7, #8]
 800bcac:	607a      	str	r2, [r7, #4]
 800bcae:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800bcb0:	68bb      	ldr	r3, [r7, #8]
 800bcb2:	2b00      	cmp	r3, #0
 800bcb4:	d103      	bne.n	800bcbe <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800bcb6:	69bb      	ldr	r3, [r7, #24]
 800bcb8:	69ba      	ldr	r2, [r7, #24]
 800bcba:	601a      	str	r2, [r3, #0]
 800bcbc:	e002      	b.n	800bcc4 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800bcbe:	69bb      	ldr	r3, [r7, #24]
 800bcc0:	687a      	ldr	r2, [r7, #4]
 800bcc2:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800bcc4:	69bb      	ldr	r3, [r7, #24]
 800bcc6:	68fa      	ldr	r2, [r7, #12]
 800bcc8:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800bcca:	69bb      	ldr	r3, [r7, #24]
 800bccc:	68ba      	ldr	r2, [r7, #8]
 800bcce:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800bcd0:	2101      	movs	r1, #1
 800bcd2:	69b8      	ldr	r0, [r7, #24]
 800bcd4:	f7ff fece 	bl	800ba74 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800bcd8:	bf00      	nop
 800bcda:	3710      	adds	r7, #16
 800bcdc:	46bd      	mov	sp, r7
 800bcde:	bd80      	pop	{r7, pc}

0800bce0 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800bce0:	b580      	push	{r7, lr}
 800bce2:	b082      	sub	sp, #8
 800bce4:	af00      	add	r7, sp, #0
 800bce6:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800bce8:	687b      	ldr	r3, [r7, #4]
 800bcea:	2b00      	cmp	r3, #0
 800bcec:	d00e      	beq.n	800bd0c <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->pxMutexHolder = NULL;
 800bcee:	687b      	ldr	r3, [r7, #4]
 800bcf0:	2200      	movs	r2, #0
 800bcf2:	605a      	str	r2, [r3, #4]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800bcf4:	687b      	ldr	r3, [r7, #4]
 800bcf6:	2200      	movs	r2, #0
 800bcf8:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.uxRecursiveCallCount = 0;
 800bcfa:	687b      	ldr	r3, [r7, #4]
 800bcfc:	2200      	movs	r2, #0
 800bcfe:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800bd00:	2300      	movs	r3, #0
 800bd02:	2200      	movs	r2, #0
 800bd04:	2100      	movs	r1, #0
 800bd06:	6878      	ldr	r0, [r7, #4]
 800bd08:	f000 f838 	bl	800bd7c <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800bd0c:	bf00      	nop
 800bd0e:	3708      	adds	r7, #8
 800bd10:	46bd      	mov	sp, r7
 800bd12:	bd80      	pop	{r7, pc}

0800bd14 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800bd14:	b580      	push	{r7, lr}
 800bd16:	b086      	sub	sp, #24
 800bd18:	af00      	add	r7, sp, #0
 800bd1a:	4603      	mov	r3, r0
 800bd1c:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800bd1e:	2301      	movs	r3, #1
 800bd20:	617b      	str	r3, [r7, #20]
 800bd22:	2300      	movs	r3, #0
 800bd24:	613b      	str	r3, [r7, #16]

		pxNewQueue = ( Queue_t * ) xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800bd26:	79fb      	ldrb	r3, [r7, #7]
 800bd28:	461a      	mov	r2, r3
 800bd2a:	6939      	ldr	r1, [r7, #16]
 800bd2c:	6978      	ldr	r0, [r7, #20]
 800bd2e:	f7ff ff7b 	bl	800bc28 <xQueueGenericCreate>
 800bd32:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( pxNewQueue );
 800bd34:	68f8      	ldr	r0, [r7, #12]
 800bd36:	f7ff ffd3 	bl	800bce0 <prvInitialiseMutex>

		return pxNewQueue;
 800bd3a:	68fb      	ldr	r3, [r7, #12]
	}
 800bd3c:	4618      	mov	r0, r3
 800bd3e:	3718      	adds	r7, #24
 800bd40:	46bd      	mov	sp, r7
 800bd42:	bd80      	pop	{r7, pc}

0800bd44 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800bd44:	b580      	push	{r7, lr}
 800bd46:	b088      	sub	sp, #32
 800bd48:	af02      	add	r7, sp, #8
 800bd4a:	4603      	mov	r3, r0
 800bd4c:	6039      	str	r1, [r7, #0]
 800bd4e:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800bd50:	2301      	movs	r3, #1
 800bd52:	617b      	str	r3, [r7, #20]
 800bd54:	2300      	movs	r3, #0
 800bd56:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		pxNewQueue = ( Queue_t * ) xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800bd58:	79fb      	ldrb	r3, [r7, #7]
 800bd5a:	9300      	str	r3, [sp, #0]
 800bd5c:	683b      	ldr	r3, [r7, #0]
 800bd5e:	2200      	movs	r2, #0
 800bd60:	6939      	ldr	r1, [r7, #16]
 800bd62:	6978      	ldr	r0, [r7, #20]
 800bd64:	f7ff feee 	bl	800bb44 <xQueueGenericCreateStatic>
 800bd68:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( pxNewQueue );
 800bd6a:	68f8      	ldr	r0, [r7, #12]
 800bd6c:	f7ff ffb8 	bl	800bce0 <prvInitialiseMutex>

		return pxNewQueue;
 800bd70:	68fb      	ldr	r3, [r7, #12]
	}
 800bd72:	4618      	mov	r0, r3
 800bd74:	3718      	adds	r7, #24
 800bd76:	46bd      	mov	sp, r7
 800bd78:	bd80      	pop	{r7, pc}
	...

0800bd7c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800bd7c:	b580      	push	{r7, lr}
 800bd7e:	b08e      	sub	sp, #56	; 0x38
 800bd80:	af00      	add	r7, sp, #0
 800bd82:	60f8      	str	r0, [r7, #12]
 800bd84:	60b9      	str	r1, [r7, #8]
 800bd86:	607a      	str	r2, [r7, #4]
 800bd88:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800bd8a:	2300      	movs	r3, #0
 800bd8c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800bd8e:	68fb      	ldr	r3, [r7, #12]
 800bd90:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800bd92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd94:	2b00      	cmp	r3, #0
 800bd96:	d109      	bne.n	800bdac <xQueueGenericSend+0x30>
 800bd98:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd9c:	f383 8811 	msr	BASEPRI, r3
 800bda0:	f3bf 8f6f 	isb	sy
 800bda4:	f3bf 8f4f 	dsb	sy
 800bda8:	62bb      	str	r3, [r7, #40]	; 0x28
 800bdaa:	e7fe      	b.n	800bdaa <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800bdac:	68bb      	ldr	r3, [r7, #8]
 800bdae:	2b00      	cmp	r3, #0
 800bdb0:	d103      	bne.n	800bdba <xQueueGenericSend+0x3e>
 800bdb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bdb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bdb6:	2b00      	cmp	r3, #0
 800bdb8:	d101      	bne.n	800bdbe <xQueueGenericSend+0x42>
 800bdba:	2301      	movs	r3, #1
 800bdbc:	e000      	b.n	800bdc0 <xQueueGenericSend+0x44>
 800bdbe:	2300      	movs	r3, #0
 800bdc0:	2b00      	cmp	r3, #0
 800bdc2:	d109      	bne.n	800bdd8 <xQueueGenericSend+0x5c>
 800bdc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bdc8:	f383 8811 	msr	BASEPRI, r3
 800bdcc:	f3bf 8f6f 	isb	sy
 800bdd0:	f3bf 8f4f 	dsb	sy
 800bdd4:	627b      	str	r3, [r7, #36]	; 0x24
 800bdd6:	e7fe      	b.n	800bdd6 <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800bdd8:	683b      	ldr	r3, [r7, #0]
 800bdda:	2b02      	cmp	r3, #2
 800bddc:	d103      	bne.n	800bde6 <xQueueGenericSend+0x6a>
 800bdde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bde0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bde2:	2b01      	cmp	r3, #1
 800bde4:	d101      	bne.n	800bdea <xQueueGenericSend+0x6e>
 800bde6:	2301      	movs	r3, #1
 800bde8:	e000      	b.n	800bdec <xQueueGenericSend+0x70>
 800bdea:	2300      	movs	r3, #0
 800bdec:	2b00      	cmp	r3, #0
 800bdee:	d109      	bne.n	800be04 <xQueueGenericSend+0x88>
 800bdf0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bdf4:	f383 8811 	msr	BASEPRI, r3
 800bdf8:	f3bf 8f6f 	isb	sy
 800bdfc:	f3bf 8f4f 	dsb	sy
 800be00:	623b      	str	r3, [r7, #32]
 800be02:	e7fe      	b.n	800be02 <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800be04:	f001 fbba 	bl	800d57c <xTaskGetSchedulerState>
 800be08:	4603      	mov	r3, r0
 800be0a:	2b00      	cmp	r3, #0
 800be0c:	d102      	bne.n	800be14 <xQueueGenericSend+0x98>
 800be0e:	687b      	ldr	r3, [r7, #4]
 800be10:	2b00      	cmp	r3, #0
 800be12:	d101      	bne.n	800be18 <xQueueGenericSend+0x9c>
 800be14:	2301      	movs	r3, #1
 800be16:	e000      	b.n	800be1a <xQueueGenericSend+0x9e>
 800be18:	2300      	movs	r3, #0
 800be1a:	2b00      	cmp	r3, #0
 800be1c:	d109      	bne.n	800be32 <xQueueGenericSend+0xb6>
 800be1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be22:	f383 8811 	msr	BASEPRI, r3
 800be26:	f3bf 8f6f 	isb	sy
 800be2a:	f3bf 8f4f 	dsb	sy
 800be2e:	61fb      	str	r3, [r7, #28]
 800be30:	e7fe      	b.n	800be30 <xQueueGenericSend+0xb4>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800be32:	f001 ff0b 	bl	800dc4c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800be36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be38:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800be3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800be3e:	429a      	cmp	r2, r3
 800be40:	d302      	bcc.n	800be48 <xQueueGenericSend+0xcc>
 800be42:	683b      	ldr	r3, [r7, #0]
 800be44:	2b02      	cmp	r3, #2
 800be46:	d129      	bne.n	800be9c <xQueueGenericSend+0x120>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800be48:	683a      	ldr	r2, [r7, #0]
 800be4a:	68b9      	ldr	r1, [r7, #8]
 800be4c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800be4e:	f000 fc80 	bl	800c752 <prvCopyDataToQueue>
 800be52:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800be54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800be58:	2b00      	cmp	r3, #0
 800be5a:	d010      	beq.n	800be7e <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800be5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be5e:	3324      	adds	r3, #36	; 0x24
 800be60:	4618      	mov	r0, r3
 800be62:	f001 f9cf 	bl	800d204 <xTaskRemoveFromEventList>
 800be66:	4603      	mov	r3, r0
 800be68:	2b00      	cmp	r3, #0
 800be6a:	d013      	beq.n	800be94 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800be6c:	4b3f      	ldr	r3, [pc, #252]	; (800bf6c <xQueueGenericSend+0x1f0>)
 800be6e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800be72:	601a      	str	r2, [r3, #0]
 800be74:	f3bf 8f4f 	dsb	sy
 800be78:	f3bf 8f6f 	isb	sy
 800be7c:	e00a      	b.n	800be94 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800be7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800be80:	2b00      	cmp	r3, #0
 800be82:	d007      	beq.n	800be94 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800be84:	4b39      	ldr	r3, [pc, #228]	; (800bf6c <xQueueGenericSend+0x1f0>)
 800be86:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800be8a:	601a      	str	r2, [r3, #0]
 800be8c:	f3bf 8f4f 	dsb	sy
 800be90:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800be94:	f001 ff08 	bl	800dca8 <vPortExitCritical>
				return pdPASS;
 800be98:	2301      	movs	r3, #1
 800be9a:	e063      	b.n	800bf64 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800be9c:	687b      	ldr	r3, [r7, #4]
 800be9e:	2b00      	cmp	r3, #0
 800bea0:	d103      	bne.n	800beaa <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800bea2:	f001 ff01 	bl	800dca8 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800bea6:	2300      	movs	r3, #0
 800bea8:	e05c      	b.n	800bf64 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800beaa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800beac:	2b00      	cmp	r3, #0
 800beae:	d106      	bne.n	800bebe <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800beb0:	f107 0314 	add.w	r3, r7, #20
 800beb4:	4618      	mov	r0, r3
 800beb6:	f001 fa07 	bl	800d2c8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800beba:	2301      	movs	r3, #1
 800bebc:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800bebe:	f001 fef3 	bl	800dca8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800bec2:	f000 ff99 	bl	800cdf8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800bec6:	f001 fec1 	bl	800dc4c <vPortEnterCritical>
 800beca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800becc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800bed0:	b25b      	sxtb	r3, r3
 800bed2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800bed6:	d103      	bne.n	800bee0 <xQueueGenericSend+0x164>
 800bed8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800beda:	2200      	movs	r2, #0
 800bedc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800bee0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bee2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800bee6:	b25b      	sxtb	r3, r3
 800bee8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800beec:	d103      	bne.n	800bef6 <xQueueGenericSend+0x17a>
 800beee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bef0:	2200      	movs	r2, #0
 800bef2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800bef6:	f001 fed7 	bl	800dca8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800befa:	1d3a      	adds	r2, r7, #4
 800befc:	f107 0314 	add.w	r3, r7, #20
 800bf00:	4611      	mov	r1, r2
 800bf02:	4618      	mov	r0, r3
 800bf04:	f001 f9f6 	bl	800d2f4 <xTaskCheckForTimeOut>
 800bf08:	4603      	mov	r3, r0
 800bf0a:	2b00      	cmp	r3, #0
 800bf0c:	d124      	bne.n	800bf58 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800bf0e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800bf10:	f000 fd17 	bl	800c942 <prvIsQueueFull>
 800bf14:	4603      	mov	r3, r0
 800bf16:	2b00      	cmp	r3, #0
 800bf18:	d018      	beq.n	800bf4c <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800bf1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf1c:	3310      	adds	r3, #16
 800bf1e:	687a      	ldr	r2, [r7, #4]
 800bf20:	4611      	mov	r1, r2
 800bf22:	4618      	mov	r0, r3
 800bf24:	f001 f94a 	bl	800d1bc <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800bf28:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800bf2a:	f000 fca2 	bl	800c872 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800bf2e:	f000 ff71 	bl	800ce14 <xTaskResumeAll>
 800bf32:	4603      	mov	r3, r0
 800bf34:	2b00      	cmp	r3, #0
 800bf36:	f47f af7c 	bne.w	800be32 <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 800bf3a:	4b0c      	ldr	r3, [pc, #48]	; (800bf6c <xQueueGenericSend+0x1f0>)
 800bf3c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bf40:	601a      	str	r2, [r3, #0]
 800bf42:	f3bf 8f4f 	dsb	sy
 800bf46:	f3bf 8f6f 	isb	sy
 800bf4a:	e772      	b.n	800be32 <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800bf4c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800bf4e:	f000 fc90 	bl	800c872 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800bf52:	f000 ff5f 	bl	800ce14 <xTaskResumeAll>
 800bf56:	e76c      	b.n	800be32 <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800bf58:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800bf5a:	f000 fc8a 	bl	800c872 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800bf5e:	f000 ff59 	bl	800ce14 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800bf62:	2300      	movs	r3, #0
		}
	}
}
 800bf64:	4618      	mov	r0, r3
 800bf66:	3738      	adds	r7, #56	; 0x38
 800bf68:	46bd      	mov	sp, r7
 800bf6a:	bd80      	pop	{r7, pc}
 800bf6c:	e000ed04 	.word	0xe000ed04

0800bf70 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800bf70:	b580      	push	{r7, lr}
 800bf72:	b08e      	sub	sp, #56	; 0x38
 800bf74:	af00      	add	r7, sp, #0
 800bf76:	60f8      	str	r0, [r7, #12]
 800bf78:	60b9      	str	r1, [r7, #8]
 800bf7a:	607a      	str	r2, [r7, #4]
 800bf7c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800bf7e:	68fb      	ldr	r3, [r7, #12]
 800bf80:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800bf82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf84:	2b00      	cmp	r3, #0
 800bf86:	d109      	bne.n	800bf9c <xQueueGenericSendFromISR+0x2c>
 800bf88:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf8c:	f383 8811 	msr	BASEPRI, r3
 800bf90:	f3bf 8f6f 	isb	sy
 800bf94:	f3bf 8f4f 	dsb	sy
 800bf98:	627b      	str	r3, [r7, #36]	; 0x24
 800bf9a:	e7fe      	b.n	800bf9a <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800bf9c:	68bb      	ldr	r3, [r7, #8]
 800bf9e:	2b00      	cmp	r3, #0
 800bfa0:	d103      	bne.n	800bfaa <xQueueGenericSendFromISR+0x3a>
 800bfa2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bfa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bfa6:	2b00      	cmp	r3, #0
 800bfa8:	d101      	bne.n	800bfae <xQueueGenericSendFromISR+0x3e>
 800bfaa:	2301      	movs	r3, #1
 800bfac:	e000      	b.n	800bfb0 <xQueueGenericSendFromISR+0x40>
 800bfae:	2300      	movs	r3, #0
 800bfb0:	2b00      	cmp	r3, #0
 800bfb2:	d109      	bne.n	800bfc8 <xQueueGenericSendFromISR+0x58>
 800bfb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bfb8:	f383 8811 	msr	BASEPRI, r3
 800bfbc:	f3bf 8f6f 	isb	sy
 800bfc0:	f3bf 8f4f 	dsb	sy
 800bfc4:	623b      	str	r3, [r7, #32]
 800bfc6:	e7fe      	b.n	800bfc6 <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800bfc8:	683b      	ldr	r3, [r7, #0]
 800bfca:	2b02      	cmp	r3, #2
 800bfcc:	d103      	bne.n	800bfd6 <xQueueGenericSendFromISR+0x66>
 800bfce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bfd0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bfd2:	2b01      	cmp	r3, #1
 800bfd4:	d101      	bne.n	800bfda <xQueueGenericSendFromISR+0x6a>
 800bfd6:	2301      	movs	r3, #1
 800bfd8:	e000      	b.n	800bfdc <xQueueGenericSendFromISR+0x6c>
 800bfda:	2300      	movs	r3, #0
 800bfdc:	2b00      	cmp	r3, #0
 800bfde:	d109      	bne.n	800bff4 <xQueueGenericSendFromISR+0x84>
 800bfe0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bfe4:	f383 8811 	msr	BASEPRI, r3
 800bfe8:	f3bf 8f6f 	isb	sy
 800bfec:	f3bf 8f4f 	dsb	sy
 800bff0:	61fb      	str	r3, [r7, #28]
 800bff2:	e7fe      	b.n	800bff2 <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800bff4:	f001 ff06 	bl	800de04 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800bff8:	f3ef 8211 	mrs	r2, BASEPRI
 800bffc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c000:	f383 8811 	msr	BASEPRI, r3
 800c004:	f3bf 8f6f 	isb	sy
 800c008:	f3bf 8f4f 	dsb	sy
 800c00c:	61ba      	str	r2, [r7, #24]
 800c00e:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800c010:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800c012:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800c014:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c016:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c018:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c01a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c01c:	429a      	cmp	r2, r3
 800c01e:	d302      	bcc.n	800c026 <xQueueGenericSendFromISR+0xb6>
 800c020:	683b      	ldr	r3, [r7, #0]
 800c022:	2b02      	cmp	r3, #2
 800c024:	d12c      	bne.n	800c080 <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800c026:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c028:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c02c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800c030:	683a      	ldr	r2, [r7, #0]
 800c032:	68b9      	ldr	r1, [r7, #8]
 800c034:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c036:	f000 fb8c 	bl	800c752 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800c03a:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800c03e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c042:	d112      	bne.n	800c06a <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c044:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c046:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c048:	2b00      	cmp	r3, #0
 800c04a:	d016      	beq.n	800c07a <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c04c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c04e:	3324      	adds	r3, #36	; 0x24
 800c050:	4618      	mov	r0, r3
 800c052:	f001 f8d7 	bl	800d204 <xTaskRemoveFromEventList>
 800c056:	4603      	mov	r3, r0
 800c058:	2b00      	cmp	r3, #0
 800c05a:	d00e      	beq.n	800c07a <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800c05c:	687b      	ldr	r3, [r7, #4]
 800c05e:	2b00      	cmp	r3, #0
 800c060:	d00b      	beq.n	800c07a <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800c062:	687b      	ldr	r3, [r7, #4]
 800c064:	2201      	movs	r2, #1
 800c066:	601a      	str	r2, [r3, #0]
 800c068:	e007      	b.n	800c07a <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800c06a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800c06e:	3301      	adds	r3, #1
 800c070:	b2db      	uxtb	r3, r3
 800c072:	b25a      	sxtb	r2, r3
 800c074:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c076:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800c07a:	2301      	movs	r3, #1
 800c07c:	637b      	str	r3, [r7, #52]	; 0x34
		{
 800c07e:	e001      	b.n	800c084 <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800c080:	2300      	movs	r3, #0
 800c082:	637b      	str	r3, [r7, #52]	; 0x34
 800c084:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c086:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800c088:	693b      	ldr	r3, [r7, #16]
 800c08a:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800c08e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800c090:	4618      	mov	r0, r3
 800c092:	3738      	adds	r7, #56	; 0x38
 800c094:	46bd      	mov	sp, r7
 800c096:	bd80      	pop	{r7, pc}

0800c098 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800c098:	b580      	push	{r7, lr}
 800c09a:	b08e      	sub	sp, #56	; 0x38
 800c09c:	af00      	add	r7, sp, #0
 800c09e:	6078      	str	r0, [r7, #4]
 800c0a0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800c0a2:	687b      	ldr	r3, [r7, #4]
 800c0a4:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800c0a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c0a8:	2b00      	cmp	r3, #0
 800c0aa:	d109      	bne.n	800c0c0 <xQueueGiveFromISR+0x28>
	__asm volatile
 800c0ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c0b0:	f383 8811 	msr	BASEPRI, r3
 800c0b4:	f3bf 8f6f 	isb	sy
 800c0b8:	f3bf 8f4f 	dsb	sy
 800c0bc:	623b      	str	r3, [r7, #32]
 800c0be:	e7fe      	b.n	800c0be <xQueueGiveFromISR+0x26>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800c0c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c0c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c0c4:	2b00      	cmp	r3, #0
 800c0c6:	d009      	beq.n	800c0dc <xQueueGiveFromISR+0x44>
 800c0c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c0cc:	f383 8811 	msr	BASEPRI, r3
 800c0d0:	f3bf 8f6f 	isb	sy
 800c0d4:	f3bf 8f4f 	dsb	sy
 800c0d8:	61fb      	str	r3, [r7, #28]
 800c0da:	e7fe      	b.n	800c0da <xQueueGiveFromISR+0x42>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
 800c0dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c0de:	681b      	ldr	r3, [r3, #0]
 800c0e0:	2b00      	cmp	r3, #0
 800c0e2:	d103      	bne.n	800c0ec <xQueueGiveFromISR+0x54>
 800c0e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c0e6:	685b      	ldr	r3, [r3, #4]
 800c0e8:	2b00      	cmp	r3, #0
 800c0ea:	d101      	bne.n	800c0f0 <xQueueGiveFromISR+0x58>
 800c0ec:	2301      	movs	r3, #1
 800c0ee:	e000      	b.n	800c0f2 <xQueueGiveFromISR+0x5a>
 800c0f0:	2300      	movs	r3, #0
 800c0f2:	2b00      	cmp	r3, #0
 800c0f4:	d109      	bne.n	800c10a <xQueueGiveFromISR+0x72>
 800c0f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c0fa:	f383 8811 	msr	BASEPRI, r3
 800c0fe:	f3bf 8f6f 	isb	sy
 800c102:	f3bf 8f4f 	dsb	sy
 800c106:	61bb      	str	r3, [r7, #24]
 800c108:	e7fe      	b.n	800c108 <xQueueGiveFromISR+0x70>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800c10a:	f001 fe7b 	bl	800de04 <vPortValidateInterruptPriority>
	__asm volatile
 800c10e:	f3ef 8211 	mrs	r2, BASEPRI
 800c112:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c116:	f383 8811 	msr	BASEPRI, r3
 800c11a:	f3bf 8f6f 	isb	sy
 800c11e:	f3bf 8f4f 	dsb	sy
 800c122:	617a      	str	r2, [r7, #20]
 800c124:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800c126:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800c128:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c12a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c12c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c12e:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800c130:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c132:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c134:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c136:	429a      	cmp	r2, r3
 800c138:	d22b      	bcs.n	800c192 <xQueueGiveFromISR+0xfa>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800c13a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c13c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c140:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800c144:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c146:	1c5a      	adds	r2, r3, #1
 800c148:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c14a:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800c14c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800c150:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c154:	d112      	bne.n	800c17c <xQueueGiveFromISR+0xe4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c156:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c158:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c15a:	2b00      	cmp	r3, #0
 800c15c:	d016      	beq.n	800c18c <xQueueGiveFromISR+0xf4>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c15e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c160:	3324      	adds	r3, #36	; 0x24
 800c162:	4618      	mov	r0, r3
 800c164:	f001 f84e 	bl	800d204 <xTaskRemoveFromEventList>
 800c168:	4603      	mov	r3, r0
 800c16a:	2b00      	cmp	r3, #0
 800c16c:	d00e      	beq.n	800c18c <xQueueGiveFromISR+0xf4>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800c16e:	683b      	ldr	r3, [r7, #0]
 800c170:	2b00      	cmp	r3, #0
 800c172:	d00b      	beq.n	800c18c <xQueueGiveFromISR+0xf4>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800c174:	683b      	ldr	r3, [r7, #0]
 800c176:	2201      	movs	r2, #1
 800c178:	601a      	str	r2, [r3, #0]
 800c17a:	e007      	b.n	800c18c <xQueueGiveFromISR+0xf4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800c17c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c180:	3301      	adds	r3, #1
 800c182:	b2db      	uxtb	r3, r3
 800c184:	b25a      	sxtb	r2, r3
 800c186:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c188:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800c18c:	2301      	movs	r3, #1
 800c18e:	637b      	str	r3, [r7, #52]	; 0x34
 800c190:	e001      	b.n	800c196 <xQueueGiveFromISR+0xfe>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800c192:	2300      	movs	r3, #0
 800c194:	637b      	str	r3, [r7, #52]	; 0x34
 800c196:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c198:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800c19a:	68fb      	ldr	r3, [r7, #12]
 800c19c:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800c1a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800c1a2:	4618      	mov	r0, r3
 800c1a4:	3738      	adds	r7, #56	; 0x38
 800c1a6:	46bd      	mov	sp, r7
 800c1a8:	bd80      	pop	{r7, pc}
	...

0800c1ac <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800c1ac:	b580      	push	{r7, lr}
 800c1ae:	b08c      	sub	sp, #48	; 0x30
 800c1b0:	af00      	add	r7, sp, #0
 800c1b2:	60f8      	str	r0, [r7, #12]
 800c1b4:	60b9      	str	r1, [r7, #8]
 800c1b6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800c1b8:	2300      	movs	r3, #0
 800c1ba:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800c1bc:	68fb      	ldr	r3, [r7, #12]
 800c1be:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800c1c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c1c2:	2b00      	cmp	r3, #0
 800c1c4:	d109      	bne.n	800c1da <xQueueReceive+0x2e>
	__asm volatile
 800c1c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c1ca:	f383 8811 	msr	BASEPRI, r3
 800c1ce:	f3bf 8f6f 	isb	sy
 800c1d2:	f3bf 8f4f 	dsb	sy
 800c1d6:	623b      	str	r3, [r7, #32]
 800c1d8:	e7fe      	b.n	800c1d8 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c1da:	68bb      	ldr	r3, [r7, #8]
 800c1dc:	2b00      	cmp	r3, #0
 800c1de:	d103      	bne.n	800c1e8 <xQueueReceive+0x3c>
 800c1e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c1e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c1e4:	2b00      	cmp	r3, #0
 800c1e6:	d101      	bne.n	800c1ec <xQueueReceive+0x40>
 800c1e8:	2301      	movs	r3, #1
 800c1ea:	e000      	b.n	800c1ee <xQueueReceive+0x42>
 800c1ec:	2300      	movs	r3, #0
 800c1ee:	2b00      	cmp	r3, #0
 800c1f0:	d109      	bne.n	800c206 <xQueueReceive+0x5a>
 800c1f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c1f6:	f383 8811 	msr	BASEPRI, r3
 800c1fa:	f3bf 8f6f 	isb	sy
 800c1fe:	f3bf 8f4f 	dsb	sy
 800c202:	61fb      	str	r3, [r7, #28]
 800c204:	e7fe      	b.n	800c204 <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800c206:	f001 f9b9 	bl	800d57c <xTaskGetSchedulerState>
 800c20a:	4603      	mov	r3, r0
 800c20c:	2b00      	cmp	r3, #0
 800c20e:	d102      	bne.n	800c216 <xQueueReceive+0x6a>
 800c210:	687b      	ldr	r3, [r7, #4]
 800c212:	2b00      	cmp	r3, #0
 800c214:	d101      	bne.n	800c21a <xQueueReceive+0x6e>
 800c216:	2301      	movs	r3, #1
 800c218:	e000      	b.n	800c21c <xQueueReceive+0x70>
 800c21a:	2300      	movs	r3, #0
 800c21c:	2b00      	cmp	r3, #0
 800c21e:	d109      	bne.n	800c234 <xQueueReceive+0x88>
 800c220:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c224:	f383 8811 	msr	BASEPRI, r3
 800c228:	f3bf 8f6f 	isb	sy
 800c22c:	f3bf 8f4f 	dsb	sy
 800c230:	61bb      	str	r3, [r7, #24]
 800c232:	e7fe      	b.n	800c232 <xQueueReceive+0x86>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 800c234:	f001 fd0a 	bl	800dc4c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c238:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c23a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c23c:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800c23e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c240:	2b00      	cmp	r3, #0
 800c242:	d01f      	beq.n	800c284 <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800c244:	68b9      	ldr	r1, [r7, #8]
 800c246:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c248:	f000 faed 	bl	800c826 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800c24c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c24e:	1e5a      	subs	r2, r3, #1
 800c250:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c252:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c254:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c256:	691b      	ldr	r3, [r3, #16]
 800c258:	2b00      	cmp	r3, #0
 800c25a:	d00f      	beq.n	800c27c <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c25c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c25e:	3310      	adds	r3, #16
 800c260:	4618      	mov	r0, r3
 800c262:	f000 ffcf 	bl	800d204 <xTaskRemoveFromEventList>
 800c266:	4603      	mov	r3, r0
 800c268:	2b00      	cmp	r3, #0
 800c26a:	d007      	beq.n	800c27c <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800c26c:	4b3c      	ldr	r3, [pc, #240]	; (800c360 <xQueueReceive+0x1b4>)
 800c26e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c272:	601a      	str	r2, [r3, #0]
 800c274:	f3bf 8f4f 	dsb	sy
 800c278:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800c27c:	f001 fd14 	bl	800dca8 <vPortExitCritical>
				return pdPASS;
 800c280:	2301      	movs	r3, #1
 800c282:	e069      	b.n	800c358 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800c284:	687b      	ldr	r3, [r7, #4]
 800c286:	2b00      	cmp	r3, #0
 800c288:	d103      	bne.n	800c292 <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800c28a:	f001 fd0d 	bl	800dca8 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800c28e:	2300      	movs	r3, #0
 800c290:	e062      	b.n	800c358 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 800c292:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c294:	2b00      	cmp	r3, #0
 800c296:	d106      	bne.n	800c2a6 <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800c298:	f107 0310 	add.w	r3, r7, #16
 800c29c:	4618      	mov	r0, r3
 800c29e:	f001 f813 	bl	800d2c8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800c2a2:	2301      	movs	r3, #1
 800c2a4:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800c2a6:	f001 fcff 	bl	800dca8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800c2aa:	f000 fda5 	bl	800cdf8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800c2ae:	f001 fccd 	bl	800dc4c <vPortEnterCritical>
 800c2b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c2b4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c2b8:	b25b      	sxtb	r3, r3
 800c2ba:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c2be:	d103      	bne.n	800c2c8 <xQueueReceive+0x11c>
 800c2c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c2c2:	2200      	movs	r2, #0
 800c2c4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c2c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c2ca:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c2ce:	b25b      	sxtb	r3, r3
 800c2d0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c2d4:	d103      	bne.n	800c2de <xQueueReceive+0x132>
 800c2d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c2d8:	2200      	movs	r2, #0
 800c2da:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c2de:	f001 fce3 	bl	800dca8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800c2e2:	1d3a      	adds	r2, r7, #4
 800c2e4:	f107 0310 	add.w	r3, r7, #16
 800c2e8:	4611      	mov	r1, r2
 800c2ea:	4618      	mov	r0, r3
 800c2ec:	f001 f802 	bl	800d2f4 <xTaskCheckForTimeOut>
 800c2f0:	4603      	mov	r3, r0
 800c2f2:	2b00      	cmp	r3, #0
 800c2f4:	d123      	bne.n	800c33e <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c2f6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c2f8:	f000 fb0d 	bl	800c916 <prvIsQueueEmpty>
 800c2fc:	4603      	mov	r3, r0
 800c2fe:	2b00      	cmp	r3, #0
 800c300:	d017      	beq.n	800c332 <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800c302:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c304:	3324      	adds	r3, #36	; 0x24
 800c306:	687a      	ldr	r2, [r7, #4]
 800c308:	4611      	mov	r1, r2
 800c30a:	4618      	mov	r0, r3
 800c30c:	f000 ff56 	bl	800d1bc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800c310:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c312:	f000 faae 	bl	800c872 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800c316:	f000 fd7d 	bl	800ce14 <xTaskResumeAll>
 800c31a:	4603      	mov	r3, r0
 800c31c:	2b00      	cmp	r3, #0
 800c31e:	d189      	bne.n	800c234 <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 800c320:	4b0f      	ldr	r3, [pc, #60]	; (800c360 <xQueueReceive+0x1b4>)
 800c322:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c326:	601a      	str	r2, [r3, #0]
 800c328:	f3bf 8f4f 	dsb	sy
 800c32c:	f3bf 8f6f 	isb	sy
 800c330:	e780      	b.n	800c234 <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800c332:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c334:	f000 fa9d 	bl	800c872 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800c338:	f000 fd6c 	bl	800ce14 <xTaskResumeAll>
 800c33c:	e77a      	b.n	800c234 <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800c33e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c340:	f000 fa97 	bl	800c872 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800c344:	f000 fd66 	bl	800ce14 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c348:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c34a:	f000 fae4 	bl	800c916 <prvIsQueueEmpty>
 800c34e:	4603      	mov	r3, r0
 800c350:	2b00      	cmp	r3, #0
 800c352:	f43f af6f 	beq.w	800c234 <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800c356:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 800c358:	4618      	mov	r0, r3
 800c35a:	3730      	adds	r7, #48	; 0x30
 800c35c:	46bd      	mov	sp, r7
 800c35e:	bd80      	pop	{r7, pc}
 800c360:	e000ed04 	.word	0xe000ed04

0800c364 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800c364:	b580      	push	{r7, lr}
 800c366:	b08e      	sub	sp, #56	; 0x38
 800c368:	af00      	add	r7, sp, #0
 800c36a:	6078      	str	r0, [r7, #4]
 800c36c:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800c36e:	2300      	movs	r3, #0
 800c370:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800c372:	687b      	ldr	r3, [r7, #4]
 800c374:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800c376:	2300      	movs	r3, #0
 800c378:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800c37a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c37c:	2b00      	cmp	r3, #0
 800c37e:	d109      	bne.n	800c394 <xQueueSemaphoreTake+0x30>
 800c380:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c384:	f383 8811 	msr	BASEPRI, r3
 800c388:	f3bf 8f6f 	isb	sy
 800c38c:	f3bf 8f4f 	dsb	sy
 800c390:	623b      	str	r3, [r7, #32]
 800c392:	e7fe      	b.n	800c392 <xQueueSemaphoreTake+0x2e>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800c394:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c396:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c398:	2b00      	cmp	r3, #0
 800c39a:	d009      	beq.n	800c3b0 <xQueueSemaphoreTake+0x4c>
 800c39c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c3a0:	f383 8811 	msr	BASEPRI, r3
 800c3a4:	f3bf 8f6f 	isb	sy
 800c3a8:	f3bf 8f4f 	dsb	sy
 800c3ac:	61fb      	str	r3, [r7, #28]
 800c3ae:	e7fe      	b.n	800c3ae <xQueueSemaphoreTake+0x4a>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800c3b0:	f001 f8e4 	bl	800d57c <xTaskGetSchedulerState>
 800c3b4:	4603      	mov	r3, r0
 800c3b6:	2b00      	cmp	r3, #0
 800c3b8:	d102      	bne.n	800c3c0 <xQueueSemaphoreTake+0x5c>
 800c3ba:	683b      	ldr	r3, [r7, #0]
 800c3bc:	2b00      	cmp	r3, #0
 800c3be:	d101      	bne.n	800c3c4 <xQueueSemaphoreTake+0x60>
 800c3c0:	2301      	movs	r3, #1
 800c3c2:	e000      	b.n	800c3c6 <xQueueSemaphoreTake+0x62>
 800c3c4:	2300      	movs	r3, #0
 800c3c6:	2b00      	cmp	r3, #0
 800c3c8:	d109      	bne.n	800c3de <xQueueSemaphoreTake+0x7a>
 800c3ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c3ce:	f383 8811 	msr	BASEPRI, r3
 800c3d2:	f3bf 8f6f 	isb	sy
 800c3d6:	f3bf 8f4f 	dsb	sy
 800c3da:	61bb      	str	r3, [r7, #24]
 800c3dc:	e7fe      	b.n	800c3dc <xQueueSemaphoreTake+0x78>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 800c3de:	f001 fc35 	bl	800dc4c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800c3e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c3e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c3e6:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800c3e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c3ea:	2b00      	cmp	r3, #0
 800c3ec:	d024      	beq.n	800c438 <xQueueSemaphoreTake+0xd4>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800c3ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c3f0:	1e5a      	subs	r2, r3, #1
 800c3f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c3f4:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800c3f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c3f8:	681b      	ldr	r3, [r3, #0]
 800c3fa:	2b00      	cmp	r3, #0
 800c3fc:	d104      	bne.n	800c408 <xQueueSemaphoreTake+0xa4>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 800c3fe:	f001 fa83 	bl	800d908 <pvTaskIncrementMutexHeldCount>
 800c402:	4602      	mov	r2, r0
 800c404:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c406:	605a      	str	r2, [r3, #4]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c408:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c40a:	691b      	ldr	r3, [r3, #16]
 800c40c:	2b00      	cmp	r3, #0
 800c40e:	d00f      	beq.n	800c430 <xQueueSemaphoreTake+0xcc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c410:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c412:	3310      	adds	r3, #16
 800c414:	4618      	mov	r0, r3
 800c416:	f000 fef5 	bl	800d204 <xTaskRemoveFromEventList>
 800c41a:	4603      	mov	r3, r0
 800c41c:	2b00      	cmp	r3, #0
 800c41e:	d007      	beq.n	800c430 <xQueueSemaphoreTake+0xcc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800c420:	4b53      	ldr	r3, [pc, #332]	; (800c570 <xQueueSemaphoreTake+0x20c>)
 800c422:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c426:	601a      	str	r2, [r3, #0]
 800c428:	f3bf 8f4f 	dsb	sy
 800c42c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800c430:	f001 fc3a 	bl	800dca8 <vPortExitCritical>
				return pdPASS;
 800c434:	2301      	movs	r3, #1
 800c436:	e096      	b.n	800c566 <xQueueSemaphoreTake+0x202>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800c438:	683b      	ldr	r3, [r7, #0]
 800c43a:	2b00      	cmp	r3, #0
 800c43c:	d110      	bne.n	800c460 <xQueueSemaphoreTake+0xfc>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800c43e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c440:	2b00      	cmp	r3, #0
 800c442:	d009      	beq.n	800c458 <xQueueSemaphoreTake+0xf4>
 800c444:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c448:	f383 8811 	msr	BASEPRI, r3
 800c44c:	f3bf 8f6f 	isb	sy
 800c450:	f3bf 8f4f 	dsb	sy
 800c454:	617b      	str	r3, [r7, #20]
 800c456:	e7fe      	b.n	800c456 <xQueueSemaphoreTake+0xf2>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800c458:	f001 fc26 	bl	800dca8 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800c45c:	2300      	movs	r3, #0
 800c45e:	e082      	b.n	800c566 <xQueueSemaphoreTake+0x202>
				}
				else if( xEntryTimeSet == pdFALSE )
 800c460:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c462:	2b00      	cmp	r3, #0
 800c464:	d106      	bne.n	800c474 <xQueueSemaphoreTake+0x110>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800c466:	f107 030c 	add.w	r3, r7, #12
 800c46a:	4618      	mov	r0, r3
 800c46c:	f000 ff2c 	bl	800d2c8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800c470:	2301      	movs	r3, #1
 800c472:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800c474:	f001 fc18 	bl	800dca8 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800c478:	f000 fcbe 	bl	800cdf8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800c47c:	f001 fbe6 	bl	800dc4c <vPortEnterCritical>
 800c480:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c482:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c486:	b25b      	sxtb	r3, r3
 800c488:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c48c:	d103      	bne.n	800c496 <xQueueSemaphoreTake+0x132>
 800c48e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c490:	2200      	movs	r2, #0
 800c492:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c496:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c498:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c49c:	b25b      	sxtb	r3, r3
 800c49e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c4a2:	d103      	bne.n	800c4ac <xQueueSemaphoreTake+0x148>
 800c4a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c4a6:	2200      	movs	r2, #0
 800c4a8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c4ac:	f001 fbfc 	bl	800dca8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800c4b0:	463a      	mov	r2, r7
 800c4b2:	f107 030c 	add.w	r3, r7, #12
 800c4b6:	4611      	mov	r1, r2
 800c4b8:	4618      	mov	r0, r3
 800c4ba:	f000 ff1b 	bl	800d2f4 <xTaskCheckForTimeOut>
 800c4be:	4603      	mov	r3, r0
 800c4c0:	2b00      	cmp	r3, #0
 800c4c2:	d132      	bne.n	800c52a <xQueueSemaphoreTake+0x1c6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c4c4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c4c6:	f000 fa26 	bl	800c916 <prvIsQueueEmpty>
 800c4ca:	4603      	mov	r3, r0
 800c4cc:	2b00      	cmp	r3, #0
 800c4ce:	d026      	beq.n	800c51e <xQueueSemaphoreTake+0x1ba>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800c4d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c4d2:	681b      	ldr	r3, [r3, #0]
 800c4d4:	2b00      	cmp	r3, #0
 800c4d6:	d109      	bne.n	800c4ec <xQueueSemaphoreTake+0x188>
					{
						taskENTER_CRITICAL();
 800c4d8:	f001 fbb8 	bl	800dc4c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 800c4dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c4de:	685b      	ldr	r3, [r3, #4]
 800c4e0:	4618      	mov	r0, r3
 800c4e2:	f001 f869 	bl	800d5b8 <xTaskPriorityInherit>
 800c4e6:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800c4e8:	f001 fbde 	bl	800dca8 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800c4ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c4ee:	3324      	adds	r3, #36	; 0x24
 800c4f0:	683a      	ldr	r2, [r7, #0]
 800c4f2:	4611      	mov	r1, r2
 800c4f4:	4618      	mov	r0, r3
 800c4f6:	f000 fe61 	bl	800d1bc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800c4fa:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c4fc:	f000 f9b9 	bl	800c872 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800c500:	f000 fc88 	bl	800ce14 <xTaskResumeAll>
 800c504:	4603      	mov	r3, r0
 800c506:	2b00      	cmp	r3, #0
 800c508:	f47f af69 	bne.w	800c3de <xQueueSemaphoreTake+0x7a>
				{
					portYIELD_WITHIN_API();
 800c50c:	4b18      	ldr	r3, [pc, #96]	; (800c570 <xQueueSemaphoreTake+0x20c>)
 800c50e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c512:	601a      	str	r2, [r3, #0]
 800c514:	f3bf 8f4f 	dsb	sy
 800c518:	f3bf 8f6f 	isb	sy
 800c51c:	e75f      	b.n	800c3de <xQueueSemaphoreTake+0x7a>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800c51e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c520:	f000 f9a7 	bl	800c872 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800c524:	f000 fc76 	bl	800ce14 <xTaskResumeAll>
 800c528:	e759      	b.n	800c3de <xQueueSemaphoreTake+0x7a>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800c52a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c52c:	f000 f9a1 	bl	800c872 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800c530:	f000 fc70 	bl	800ce14 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c534:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c536:	f000 f9ee 	bl	800c916 <prvIsQueueEmpty>
 800c53a:	4603      	mov	r3, r0
 800c53c:	2b00      	cmp	r3, #0
 800c53e:	f43f af4e 	beq.w	800c3de <xQueueSemaphoreTake+0x7a>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800c542:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c544:	2b00      	cmp	r3, #0
 800c546:	d00d      	beq.n	800c564 <xQueueSemaphoreTake+0x200>
					{
						taskENTER_CRITICAL();
 800c548:	f001 fb80 	bl	800dc4c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800c54c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c54e:	f000 f8e8 	bl	800c722 <prvGetDisinheritPriorityAfterTimeout>
 800c552:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
 800c554:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c556:	685b      	ldr	r3, [r3, #4]
 800c558:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800c55a:	4618      	mov	r0, r3
 800c55c:	f001 f936 	bl	800d7cc <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800c560:	f001 fba2 	bl	800dca8 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800c564:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 800c566:	4618      	mov	r0, r3
 800c568:	3738      	adds	r7, #56	; 0x38
 800c56a:	46bd      	mov	sp, r7
 800c56c:	bd80      	pop	{r7, pc}
 800c56e:	bf00      	nop
 800c570:	e000ed04 	.word	0xe000ed04

0800c574 <xQueueReceiveFromISR>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800c574:	b580      	push	{r7, lr}
 800c576:	b08e      	sub	sp, #56	; 0x38
 800c578:	af00      	add	r7, sp, #0
 800c57a:	60f8      	str	r0, [r7, #12]
 800c57c:	60b9      	str	r1, [r7, #8]
 800c57e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800c580:	68fb      	ldr	r3, [r7, #12]
 800c582:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800c584:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c586:	2b00      	cmp	r3, #0
 800c588:	d109      	bne.n	800c59e <xQueueReceiveFromISR+0x2a>
 800c58a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c58e:	f383 8811 	msr	BASEPRI, r3
 800c592:	f3bf 8f6f 	isb	sy
 800c596:	f3bf 8f4f 	dsb	sy
 800c59a:	623b      	str	r3, [r7, #32]
 800c59c:	e7fe      	b.n	800c59c <xQueueReceiveFromISR+0x28>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c59e:	68bb      	ldr	r3, [r7, #8]
 800c5a0:	2b00      	cmp	r3, #0
 800c5a2:	d103      	bne.n	800c5ac <xQueueReceiveFromISR+0x38>
 800c5a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c5a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c5a8:	2b00      	cmp	r3, #0
 800c5aa:	d101      	bne.n	800c5b0 <xQueueReceiveFromISR+0x3c>
 800c5ac:	2301      	movs	r3, #1
 800c5ae:	e000      	b.n	800c5b2 <xQueueReceiveFromISR+0x3e>
 800c5b0:	2300      	movs	r3, #0
 800c5b2:	2b00      	cmp	r3, #0
 800c5b4:	d109      	bne.n	800c5ca <xQueueReceiveFromISR+0x56>
 800c5b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c5ba:	f383 8811 	msr	BASEPRI, r3
 800c5be:	f3bf 8f6f 	isb	sy
 800c5c2:	f3bf 8f4f 	dsb	sy
 800c5c6:	61fb      	str	r3, [r7, #28]
 800c5c8:	e7fe      	b.n	800c5c8 <xQueueReceiveFromISR+0x54>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800c5ca:	f001 fc1b 	bl	800de04 <vPortValidateInterruptPriority>
	__asm volatile
 800c5ce:	f3ef 8211 	mrs	r2, BASEPRI
 800c5d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c5d6:	f383 8811 	msr	BASEPRI, r3
 800c5da:	f3bf 8f6f 	isb	sy
 800c5de:	f3bf 8f4f 	dsb	sy
 800c5e2:	61ba      	str	r2, [r7, #24]
 800c5e4:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800c5e6:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800c5e8:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c5ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c5ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c5ee:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800c5f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c5f2:	2b00      	cmp	r3, #0
 800c5f4:	d02f      	beq.n	800c656 <xQueueReceiveFromISR+0xe2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800c5f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c5f8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c5fc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800c600:	68b9      	ldr	r1, [r7, #8]
 800c602:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c604:	f000 f90f 	bl	800c826 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800c608:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c60a:	1e5a      	subs	r2, r3, #1
 800c60c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c60e:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800c610:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800c614:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c618:	d112      	bne.n	800c640 <xQueueReceiveFromISR+0xcc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c61a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c61c:	691b      	ldr	r3, [r3, #16]
 800c61e:	2b00      	cmp	r3, #0
 800c620:	d016      	beq.n	800c650 <xQueueReceiveFromISR+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c622:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c624:	3310      	adds	r3, #16
 800c626:	4618      	mov	r0, r3
 800c628:	f000 fdec 	bl	800d204 <xTaskRemoveFromEventList>
 800c62c:	4603      	mov	r3, r0
 800c62e:	2b00      	cmp	r3, #0
 800c630:	d00e      	beq.n	800c650 <xQueueReceiveFromISR+0xdc>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800c632:	687b      	ldr	r3, [r7, #4]
 800c634:	2b00      	cmp	r3, #0
 800c636:	d00b      	beq.n	800c650 <xQueueReceiveFromISR+0xdc>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800c638:	687b      	ldr	r3, [r7, #4]
 800c63a:	2201      	movs	r2, #1
 800c63c:	601a      	str	r2, [r3, #0]
 800c63e:	e007      	b.n	800c650 <xQueueReceiveFromISR+0xdc>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800c640:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c644:	3301      	adds	r3, #1
 800c646:	b2db      	uxtb	r3, r3
 800c648:	b25a      	sxtb	r2, r3
 800c64a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c64c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800c650:	2301      	movs	r3, #1
 800c652:	637b      	str	r3, [r7, #52]	; 0x34
 800c654:	e001      	b.n	800c65a <xQueueReceiveFromISR+0xe6>
		}
		else
		{
			xReturn = pdFAIL;
 800c656:	2300      	movs	r3, #0
 800c658:	637b      	str	r3, [r7, #52]	; 0x34
 800c65a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c65c:	613b      	str	r3, [r7, #16]
	__asm volatile
 800c65e:	693b      	ldr	r3, [r7, #16]
 800c660:	f383 8811 	msr	BASEPRI, r3
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800c664:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800c666:	4618      	mov	r0, r3
 800c668:	3738      	adds	r7, #56	; 0x38
 800c66a:	46bd      	mov	sp, r7
 800c66c:	bd80      	pop	{r7, pc}

0800c66e <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 800c66e:	b580      	push	{r7, lr}
 800c670:	b084      	sub	sp, #16
 800c672:	af00      	add	r7, sp, #0
 800c674:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 800c676:	687b      	ldr	r3, [r7, #4]
 800c678:	2b00      	cmp	r3, #0
 800c67a:	d109      	bne.n	800c690 <uxQueueMessagesWaiting+0x22>
	__asm volatile
 800c67c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c680:	f383 8811 	msr	BASEPRI, r3
 800c684:	f3bf 8f6f 	isb	sy
 800c688:	f3bf 8f4f 	dsb	sy
 800c68c:	60bb      	str	r3, [r7, #8]
 800c68e:	e7fe      	b.n	800c68e <uxQueueMessagesWaiting+0x20>

	taskENTER_CRITICAL();
 800c690:	f001 fadc 	bl	800dc4c <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 800c694:	687b      	ldr	r3, [r7, #4]
 800c696:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c698:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 800c69a:	f001 fb05 	bl	800dca8 <vPortExitCritical>

	return uxReturn;
 800c69e:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 800c6a0:	4618      	mov	r0, r3
 800c6a2:	3710      	adds	r7, #16
 800c6a4:	46bd      	mov	sp, r7
 800c6a6:	bd80      	pop	{r7, pc}

0800c6a8 <uxQueueMessagesWaitingFromISR>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
{
 800c6a8:	b480      	push	{r7}
 800c6aa:	b085      	sub	sp, #20
 800c6ac:	af00      	add	r7, sp, #0
 800c6ae:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 800c6b0:	687b      	ldr	r3, [r7, #4]
 800c6b2:	2b00      	cmp	r3, #0
 800c6b4:	d109      	bne.n	800c6ca <uxQueueMessagesWaitingFromISR+0x22>
 800c6b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c6ba:	f383 8811 	msr	BASEPRI, r3
 800c6be:	f3bf 8f6f 	isb	sy
 800c6c2:	f3bf 8f4f 	dsb	sy
 800c6c6:	60bb      	str	r3, [r7, #8]
 800c6c8:	e7fe      	b.n	800c6c8 <uxQueueMessagesWaitingFromISR+0x20>

	uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 800c6ca:	687b      	ldr	r3, [r7, #4]
 800c6cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c6ce:	60fb      	str	r3, [r7, #12]

	return uxReturn;
 800c6d0:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 800c6d2:	4618      	mov	r0, r3
 800c6d4:	3714      	adds	r7, #20
 800c6d6:	46bd      	mov	sp, r7
 800c6d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6dc:	4770      	bx	lr

0800c6de <vQueueDelete>:
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800c6de:	b580      	push	{r7, lr}
 800c6e0:	b084      	sub	sp, #16
 800c6e2:	af00      	add	r7, sp, #0
 800c6e4:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800c6e6:	687b      	ldr	r3, [r7, #4]
 800c6e8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800c6ea:	68fb      	ldr	r3, [r7, #12]
 800c6ec:	2b00      	cmp	r3, #0
 800c6ee:	d109      	bne.n	800c704 <vQueueDelete+0x26>
 800c6f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c6f4:	f383 8811 	msr	BASEPRI, r3
 800c6f8:	f3bf 8f6f 	isb	sy
 800c6fc:	f3bf 8f4f 	dsb	sy
 800c700:	60bb      	str	r3, [r7, #8]
 800c702:	e7fe      	b.n	800c702 <vQueueDelete+0x24>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800c704:	68f8      	ldr	r0, [r7, #12]
 800c706:	f000 f935 	bl	800c974 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800c70a:	68fb      	ldr	r3, [r7, #12]
 800c70c:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800c710:	2b00      	cmp	r3, #0
 800c712:	d102      	bne.n	800c71a <vQueueDelete+0x3c>
		{
			vPortFree( pxQueue );
 800c714:	68f8      	ldr	r0, [r7, #12]
 800c716:	f001 fc75 	bl	800e004 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800c71a:	bf00      	nop
 800c71c:	3710      	adds	r7, #16
 800c71e:	46bd      	mov	sp, r7
 800c720:	bd80      	pop	{r7, pc}

0800c722 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800c722:	b480      	push	{r7}
 800c724:	b085      	sub	sp, #20
 800c726:	af00      	add	r7, sp, #0
 800c728:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
 800c72a:	687b      	ldr	r3, [r7, #4]
 800c72c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c72e:	2b00      	cmp	r3, #0
 800c730:	d006      	beq.n	800c740 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800c732:	687b      	ldr	r3, [r7, #4]
 800c734:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c736:	681b      	ldr	r3, [r3, #0]
 800c738:	f1c3 0307 	rsb	r3, r3, #7
 800c73c:	60fb      	str	r3, [r7, #12]
 800c73e:	e001      	b.n	800c744 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800c740:	2300      	movs	r3, #0
 800c742:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800c744:	68fb      	ldr	r3, [r7, #12]
	}
 800c746:	4618      	mov	r0, r3
 800c748:	3714      	adds	r7, #20
 800c74a:	46bd      	mov	sp, r7
 800c74c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c750:	4770      	bx	lr

0800c752 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800c752:	b580      	push	{r7, lr}
 800c754:	b086      	sub	sp, #24
 800c756:	af00      	add	r7, sp, #0
 800c758:	60f8      	str	r0, [r7, #12]
 800c75a:	60b9      	str	r1, [r7, #8]
 800c75c:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800c75e:	2300      	movs	r3, #0
 800c760:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c762:	68fb      	ldr	r3, [r7, #12]
 800c764:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c766:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800c768:	68fb      	ldr	r3, [r7, #12]
 800c76a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c76c:	2b00      	cmp	r3, #0
 800c76e:	d10d      	bne.n	800c78c <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800c770:	68fb      	ldr	r3, [r7, #12]
 800c772:	681b      	ldr	r3, [r3, #0]
 800c774:	2b00      	cmp	r3, #0
 800c776:	d14d      	bne.n	800c814 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 800c778:	68fb      	ldr	r3, [r7, #12]
 800c77a:	685b      	ldr	r3, [r3, #4]
 800c77c:	4618      	mov	r0, r3
 800c77e:	f000 ffa1 	bl	800d6c4 <xTaskPriorityDisinherit>
 800c782:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 800c784:	68fb      	ldr	r3, [r7, #12]
 800c786:	2200      	movs	r2, #0
 800c788:	605a      	str	r2, [r3, #4]
 800c78a:	e043      	b.n	800c814 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800c78c:	687b      	ldr	r3, [r7, #4]
 800c78e:	2b00      	cmp	r3, #0
 800c790:	d119      	bne.n	800c7c6 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 800c792:	68fb      	ldr	r3, [r7, #12]
 800c794:	6898      	ldr	r0, [r3, #8]
 800c796:	68fb      	ldr	r3, [r7, #12]
 800c798:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c79a:	461a      	mov	r2, r3
 800c79c:	68b9      	ldr	r1, [r7, #8]
 800c79e:	f00e fa6c 	bl	801ac7a <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 800c7a2:	68fb      	ldr	r3, [r7, #12]
 800c7a4:	689a      	ldr	r2, [r3, #8]
 800c7a6:	68fb      	ldr	r3, [r7, #12]
 800c7a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c7aa:	441a      	add	r2, r3
 800c7ac:	68fb      	ldr	r3, [r7, #12]
 800c7ae:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800c7b0:	68fb      	ldr	r3, [r7, #12]
 800c7b2:	689a      	ldr	r2, [r3, #8]
 800c7b4:	68fb      	ldr	r3, [r7, #12]
 800c7b6:	685b      	ldr	r3, [r3, #4]
 800c7b8:	429a      	cmp	r2, r3
 800c7ba:	d32b      	bcc.n	800c814 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800c7bc:	68fb      	ldr	r3, [r7, #12]
 800c7be:	681a      	ldr	r2, [r3, #0]
 800c7c0:	68fb      	ldr	r3, [r7, #12]
 800c7c2:	609a      	str	r2, [r3, #8]
 800c7c4:	e026      	b.n	800c814 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c7c6:	68fb      	ldr	r3, [r7, #12]
 800c7c8:	68d8      	ldr	r0, [r3, #12]
 800c7ca:	68fb      	ldr	r3, [r7, #12]
 800c7cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c7ce:	461a      	mov	r2, r3
 800c7d0:	68b9      	ldr	r1, [r7, #8]
 800c7d2:	f00e fa52 	bl	801ac7a <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 800c7d6:	68fb      	ldr	r3, [r7, #12]
 800c7d8:	68da      	ldr	r2, [r3, #12]
 800c7da:	68fb      	ldr	r3, [r7, #12]
 800c7dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c7de:	425b      	negs	r3, r3
 800c7e0:	441a      	add	r2, r3
 800c7e2:	68fb      	ldr	r3, [r7, #12]
 800c7e4:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800c7e6:	68fb      	ldr	r3, [r7, #12]
 800c7e8:	68da      	ldr	r2, [r3, #12]
 800c7ea:	68fb      	ldr	r3, [r7, #12]
 800c7ec:	681b      	ldr	r3, [r3, #0]
 800c7ee:	429a      	cmp	r2, r3
 800c7f0:	d207      	bcs.n	800c802 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 800c7f2:	68fb      	ldr	r3, [r7, #12]
 800c7f4:	685a      	ldr	r2, [r3, #4]
 800c7f6:	68fb      	ldr	r3, [r7, #12]
 800c7f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c7fa:	425b      	negs	r3, r3
 800c7fc:	441a      	add	r2, r3
 800c7fe:	68fb      	ldr	r3, [r7, #12]
 800c800:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800c802:	687b      	ldr	r3, [r7, #4]
 800c804:	2b02      	cmp	r3, #2
 800c806:	d105      	bne.n	800c814 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800c808:	693b      	ldr	r3, [r7, #16]
 800c80a:	2b00      	cmp	r3, #0
 800c80c:	d002      	beq.n	800c814 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800c80e:	693b      	ldr	r3, [r7, #16]
 800c810:	3b01      	subs	r3, #1
 800c812:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800c814:	693b      	ldr	r3, [r7, #16]
 800c816:	1c5a      	adds	r2, r3, #1
 800c818:	68fb      	ldr	r3, [r7, #12]
 800c81a:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800c81c:	697b      	ldr	r3, [r7, #20]
}
 800c81e:	4618      	mov	r0, r3
 800c820:	3718      	adds	r7, #24
 800c822:	46bd      	mov	sp, r7
 800c824:	bd80      	pop	{r7, pc}

0800c826 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800c826:	b580      	push	{r7, lr}
 800c828:	b082      	sub	sp, #8
 800c82a:	af00      	add	r7, sp, #0
 800c82c:	6078      	str	r0, [r7, #4]
 800c82e:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800c830:	687b      	ldr	r3, [r7, #4]
 800c832:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c834:	2b00      	cmp	r3, #0
 800c836:	d018      	beq.n	800c86a <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 800c838:	687b      	ldr	r3, [r7, #4]
 800c83a:	68da      	ldr	r2, [r3, #12]
 800c83c:	687b      	ldr	r3, [r7, #4]
 800c83e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c840:	441a      	add	r2, r3
 800c842:	687b      	ldr	r3, [r7, #4]
 800c844:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800c846:	687b      	ldr	r3, [r7, #4]
 800c848:	68da      	ldr	r2, [r3, #12]
 800c84a:	687b      	ldr	r3, [r7, #4]
 800c84c:	685b      	ldr	r3, [r3, #4]
 800c84e:	429a      	cmp	r2, r3
 800c850:	d303      	bcc.n	800c85a <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 800c852:	687b      	ldr	r3, [r7, #4]
 800c854:	681a      	ldr	r2, [r3, #0]
 800c856:	687b      	ldr	r3, [r7, #4]
 800c858:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 800c85a:	687b      	ldr	r3, [r7, #4]
 800c85c:	68d9      	ldr	r1, [r3, #12]
 800c85e:	687b      	ldr	r3, [r7, #4]
 800c860:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c862:	461a      	mov	r2, r3
 800c864:	6838      	ldr	r0, [r7, #0]
 800c866:	f00e fa08 	bl	801ac7a <memcpy>
	}
}
 800c86a:	bf00      	nop
 800c86c:	3708      	adds	r7, #8
 800c86e:	46bd      	mov	sp, r7
 800c870:	bd80      	pop	{r7, pc}

0800c872 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800c872:	b580      	push	{r7, lr}
 800c874:	b084      	sub	sp, #16
 800c876:	af00      	add	r7, sp, #0
 800c878:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800c87a:	f001 f9e7 	bl	800dc4c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800c87e:	687b      	ldr	r3, [r7, #4]
 800c880:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c884:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800c886:	e011      	b.n	800c8ac <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c888:	687b      	ldr	r3, [r7, #4]
 800c88a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c88c:	2b00      	cmp	r3, #0
 800c88e:	d012      	beq.n	800c8b6 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c890:	687b      	ldr	r3, [r7, #4]
 800c892:	3324      	adds	r3, #36	; 0x24
 800c894:	4618      	mov	r0, r3
 800c896:	f000 fcb5 	bl	800d204 <xTaskRemoveFromEventList>
 800c89a:	4603      	mov	r3, r0
 800c89c:	2b00      	cmp	r3, #0
 800c89e:	d001      	beq.n	800c8a4 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800c8a0:	f000 fd88 	bl	800d3b4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800c8a4:	7bfb      	ldrb	r3, [r7, #15]
 800c8a6:	3b01      	subs	r3, #1
 800c8a8:	b2db      	uxtb	r3, r3
 800c8aa:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800c8ac:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c8b0:	2b00      	cmp	r3, #0
 800c8b2:	dce9      	bgt.n	800c888 <prvUnlockQueue+0x16>
 800c8b4:	e000      	b.n	800c8b8 <prvUnlockQueue+0x46>
					break;
 800c8b6:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800c8b8:	687b      	ldr	r3, [r7, #4]
 800c8ba:	22ff      	movs	r2, #255	; 0xff
 800c8bc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800c8c0:	f001 f9f2 	bl	800dca8 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800c8c4:	f001 f9c2 	bl	800dc4c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800c8c8:	687b      	ldr	r3, [r7, #4]
 800c8ca:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c8ce:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800c8d0:	e011      	b.n	800c8f6 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c8d2:	687b      	ldr	r3, [r7, #4]
 800c8d4:	691b      	ldr	r3, [r3, #16]
 800c8d6:	2b00      	cmp	r3, #0
 800c8d8:	d012      	beq.n	800c900 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c8da:	687b      	ldr	r3, [r7, #4]
 800c8dc:	3310      	adds	r3, #16
 800c8de:	4618      	mov	r0, r3
 800c8e0:	f000 fc90 	bl	800d204 <xTaskRemoveFromEventList>
 800c8e4:	4603      	mov	r3, r0
 800c8e6:	2b00      	cmp	r3, #0
 800c8e8:	d001      	beq.n	800c8ee <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800c8ea:	f000 fd63 	bl	800d3b4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800c8ee:	7bbb      	ldrb	r3, [r7, #14]
 800c8f0:	3b01      	subs	r3, #1
 800c8f2:	b2db      	uxtb	r3, r3
 800c8f4:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800c8f6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c8fa:	2b00      	cmp	r3, #0
 800c8fc:	dce9      	bgt.n	800c8d2 <prvUnlockQueue+0x60>
 800c8fe:	e000      	b.n	800c902 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800c900:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800c902:	687b      	ldr	r3, [r7, #4]
 800c904:	22ff      	movs	r2, #255	; 0xff
 800c906:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800c90a:	f001 f9cd 	bl	800dca8 <vPortExitCritical>
}
 800c90e:	bf00      	nop
 800c910:	3710      	adds	r7, #16
 800c912:	46bd      	mov	sp, r7
 800c914:	bd80      	pop	{r7, pc}

0800c916 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800c916:	b580      	push	{r7, lr}
 800c918:	b084      	sub	sp, #16
 800c91a:	af00      	add	r7, sp, #0
 800c91c:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800c91e:	f001 f995 	bl	800dc4c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800c922:	687b      	ldr	r3, [r7, #4]
 800c924:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c926:	2b00      	cmp	r3, #0
 800c928:	d102      	bne.n	800c930 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800c92a:	2301      	movs	r3, #1
 800c92c:	60fb      	str	r3, [r7, #12]
 800c92e:	e001      	b.n	800c934 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800c930:	2300      	movs	r3, #0
 800c932:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800c934:	f001 f9b8 	bl	800dca8 <vPortExitCritical>

	return xReturn;
 800c938:	68fb      	ldr	r3, [r7, #12]
}
 800c93a:	4618      	mov	r0, r3
 800c93c:	3710      	adds	r7, #16
 800c93e:	46bd      	mov	sp, r7
 800c940:	bd80      	pop	{r7, pc}

0800c942 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800c942:	b580      	push	{r7, lr}
 800c944:	b084      	sub	sp, #16
 800c946:	af00      	add	r7, sp, #0
 800c948:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800c94a:	f001 f97f 	bl	800dc4c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800c94e:	687b      	ldr	r3, [r7, #4]
 800c950:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c952:	687b      	ldr	r3, [r7, #4]
 800c954:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c956:	429a      	cmp	r2, r3
 800c958:	d102      	bne.n	800c960 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800c95a:	2301      	movs	r3, #1
 800c95c:	60fb      	str	r3, [r7, #12]
 800c95e:	e001      	b.n	800c964 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800c960:	2300      	movs	r3, #0
 800c962:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800c964:	f001 f9a0 	bl	800dca8 <vPortExitCritical>

	return xReturn;
 800c968:	68fb      	ldr	r3, [r7, #12]
}
 800c96a:	4618      	mov	r0, r3
 800c96c:	3710      	adds	r7, #16
 800c96e:	46bd      	mov	sp, r7
 800c970:	bd80      	pop	{r7, pc}
	...

0800c974 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800c974:	b480      	push	{r7}
 800c976:	b085      	sub	sp, #20
 800c978:	af00      	add	r7, sp, #0
 800c97a:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800c97c:	2300      	movs	r3, #0
 800c97e:	60fb      	str	r3, [r7, #12]
 800c980:	e016      	b.n	800c9b0 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800c982:	4a10      	ldr	r2, [pc, #64]	; (800c9c4 <vQueueUnregisterQueue+0x50>)
 800c984:	68fb      	ldr	r3, [r7, #12]
 800c986:	00db      	lsls	r3, r3, #3
 800c988:	4413      	add	r3, r2
 800c98a:	685b      	ldr	r3, [r3, #4]
 800c98c:	687a      	ldr	r2, [r7, #4]
 800c98e:	429a      	cmp	r2, r3
 800c990:	d10b      	bne.n	800c9aa <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800c992:	4a0c      	ldr	r2, [pc, #48]	; (800c9c4 <vQueueUnregisterQueue+0x50>)
 800c994:	68fb      	ldr	r3, [r7, #12]
 800c996:	2100      	movs	r1, #0
 800c998:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800c99c:	4a09      	ldr	r2, [pc, #36]	; (800c9c4 <vQueueUnregisterQueue+0x50>)
 800c99e:	68fb      	ldr	r3, [r7, #12]
 800c9a0:	00db      	lsls	r3, r3, #3
 800c9a2:	4413      	add	r3, r2
 800c9a4:	2200      	movs	r2, #0
 800c9a6:	605a      	str	r2, [r3, #4]
				break;
 800c9a8:	e005      	b.n	800c9b6 <vQueueUnregisterQueue+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800c9aa:	68fb      	ldr	r3, [r7, #12]
 800c9ac:	3301      	adds	r3, #1
 800c9ae:	60fb      	str	r3, [r7, #12]
 800c9b0:	68fb      	ldr	r3, [r7, #12]
 800c9b2:	2b07      	cmp	r3, #7
 800c9b4:	d9e5      	bls.n	800c982 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800c9b6:	bf00      	nop
 800c9b8:	3714      	adds	r7, #20
 800c9ba:	46bd      	mov	sp, r7
 800c9bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9c0:	4770      	bx	lr
 800c9c2:	bf00      	nop
 800c9c4:	200075f0 	.word	0x200075f0

0800c9c8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800c9c8:	b580      	push	{r7, lr}
 800c9ca:	b08e      	sub	sp, #56	; 0x38
 800c9cc:	af04      	add	r7, sp, #16
 800c9ce:	60f8      	str	r0, [r7, #12]
 800c9d0:	60b9      	str	r1, [r7, #8]
 800c9d2:	607a      	str	r2, [r7, #4]
 800c9d4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800c9d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c9d8:	2b00      	cmp	r3, #0
 800c9da:	d109      	bne.n	800c9f0 <xTaskCreateStatic+0x28>
 800c9dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c9e0:	f383 8811 	msr	BASEPRI, r3
 800c9e4:	f3bf 8f6f 	isb	sy
 800c9e8:	f3bf 8f4f 	dsb	sy
 800c9ec:	623b      	str	r3, [r7, #32]
 800c9ee:	e7fe      	b.n	800c9ee <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 800c9f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c9f2:	2b00      	cmp	r3, #0
 800c9f4:	d109      	bne.n	800ca0a <xTaskCreateStatic+0x42>
 800c9f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c9fa:	f383 8811 	msr	BASEPRI, r3
 800c9fe:	f3bf 8f6f 	isb	sy
 800ca02:	f3bf 8f4f 	dsb	sy
 800ca06:	61fb      	str	r3, [r7, #28]
 800ca08:	e7fe      	b.n	800ca08 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800ca0a:	2354      	movs	r3, #84	; 0x54
 800ca0c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800ca0e:	693b      	ldr	r3, [r7, #16]
 800ca10:	2b54      	cmp	r3, #84	; 0x54
 800ca12:	d009      	beq.n	800ca28 <xTaskCreateStatic+0x60>
 800ca14:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca18:	f383 8811 	msr	BASEPRI, r3
 800ca1c:	f3bf 8f6f 	isb	sy
 800ca20:	f3bf 8f4f 	dsb	sy
 800ca24:	61bb      	str	r3, [r7, #24]
 800ca26:	e7fe      	b.n	800ca26 <xTaskCreateStatic+0x5e>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800ca28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca2a:	2b00      	cmp	r3, #0
 800ca2c:	d01e      	beq.n	800ca6c <xTaskCreateStatic+0xa4>
 800ca2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ca30:	2b00      	cmp	r3, #0
 800ca32:	d01b      	beq.n	800ca6c <xTaskCreateStatic+0xa4>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800ca34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca36:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800ca38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca3a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ca3c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800ca3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca40:	2202      	movs	r2, #2
 800ca42:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800ca46:	2300      	movs	r3, #0
 800ca48:	9303      	str	r3, [sp, #12]
 800ca4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca4c:	9302      	str	r3, [sp, #8]
 800ca4e:	f107 0314 	add.w	r3, r7, #20
 800ca52:	9301      	str	r3, [sp, #4]
 800ca54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca56:	9300      	str	r3, [sp, #0]
 800ca58:	683b      	ldr	r3, [r7, #0]
 800ca5a:	687a      	ldr	r2, [r7, #4]
 800ca5c:	68b9      	ldr	r1, [r7, #8]
 800ca5e:	68f8      	ldr	r0, [r7, #12]
 800ca60:	f000 f850 	bl	800cb04 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800ca64:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ca66:	f000 f8cb 	bl	800cc00 <prvAddNewTaskToReadyList>
 800ca6a:	e001      	b.n	800ca70 <xTaskCreateStatic+0xa8>
		}
		else
		{
			xReturn = NULL;
 800ca6c:	2300      	movs	r3, #0
 800ca6e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800ca70:	697b      	ldr	r3, [r7, #20]
	}
 800ca72:	4618      	mov	r0, r3
 800ca74:	3728      	adds	r7, #40	; 0x28
 800ca76:	46bd      	mov	sp, r7
 800ca78:	bd80      	pop	{r7, pc}

0800ca7a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800ca7a:	b580      	push	{r7, lr}
 800ca7c:	b08c      	sub	sp, #48	; 0x30
 800ca7e:	af04      	add	r7, sp, #16
 800ca80:	60f8      	str	r0, [r7, #12]
 800ca82:	60b9      	str	r1, [r7, #8]
 800ca84:	603b      	str	r3, [r7, #0]
 800ca86:	4613      	mov	r3, r2
 800ca88:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ca8a:	88fb      	ldrh	r3, [r7, #6]
 800ca8c:	009b      	lsls	r3, r3, #2
 800ca8e:	4618      	mov	r0, r3
 800ca90:	f001 f9f6 	bl	800de80 <pvPortMalloc>
 800ca94:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800ca96:	697b      	ldr	r3, [r7, #20]
 800ca98:	2b00      	cmp	r3, #0
 800ca9a:	d00e      	beq.n	800caba <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 800ca9c:	2054      	movs	r0, #84	; 0x54
 800ca9e:	f001 f9ef 	bl	800de80 <pvPortMalloc>
 800caa2:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800caa4:	69fb      	ldr	r3, [r7, #28]
 800caa6:	2b00      	cmp	r3, #0
 800caa8:	d003      	beq.n	800cab2 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800caaa:	69fb      	ldr	r3, [r7, #28]
 800caac:	697a      	ldr	r2, [r7, #20]
 800caae:	631a      	str	r2, [r3, #48]	; 0x30
 800cab0:	e005      	b.n	800cabe <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800cab2:	6978      	ldr	r0, [r7, #20]
 800cab4:	f001 faa6 	bl	800e004 <vPortFree>
 800cab8:	e001      	b.n	800cabe <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800caba:	2300      	movs	r3, #0
 800cabc:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800cabe:	69fb      	ldr	r3, [r7, #28]
 800cac0:	2b00      	cmp	r3, #0
 800cac2:	d017      	beq.n	800caf4 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800cac4:	69fb      	ldr	r3, [r7, #28]
 800cac6:	2200      	movs	r2, #0
 800cac8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800cacc:	88fa      	ldrh	r2, [r7, #6]
 800cace:	2300      	movs	r3, #0
 800cad0:	9303      	str	r3, [sp, #12]
 800cad2:	69fb      	ldr	r3, [r7, #28]
 800cad4:	9302      	str	r3, [sp, #8]
 800cad6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cad8:	9301      	str	r3, [sp, #4]
 800cada:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cadc:	9300      	str	r3, [sp, #0]
 800cade:	683b      	ldr	r3, [r7, #0]
 800cae0:	68b9      	ldr	r1, [r7, #8]
 800cae2:	68f8      	ldr	r0, [r7, #12]
 800cae4:	f000 f80e 	bl	800cb04 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800cae8:	69f8      	ldr	r0, [r7, #28]
 800caea:	f000 f889 	bl	800cc00 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800caee:	2301      	movs	r3, #1
 800caf0:	61bb      	str	r3, [r7, #24]
 800caf2:	e002      	b.n	800cafa <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800caf4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800caf8:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800cafa:	69bb      	ldr	r3, [r7, #24]
	}
 800cafc:	4618      	mov	r0, r3
 800cafe:	3720      	adds	r7, #32
 800cb00:	46bd      	mov	sp, r7
 800cb02:	bd80      	pop	{r7, pc}

0800cb04 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800cb04:	b580      	push	{r7, lr}
 800cb06:	b088      	sub	sp, #32
 800cb08:	af00      	add	r7, sp, #0
 800cb0a:	60f8      	str	r0, [r7, #12]
 800cb0c:	60b9      	str	r1, [r7, #8]
 800cb0e:	607a      	str	r2, [r7, #4]
 800cb10:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 800cb12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb14:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800cb16:	687b      	ldr	r3, [r7, #4]
 800cb18:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800cb1c:	3b01      	subs	r3, #1
 800cb1e:	009b      	lsls	r3, r3, #2
 800cb20:	4413      	add	r3, r2
 800cb22:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 800cb24:	69bb      	ldr	r3, [r7, #24]
 800cb26:	f023 0307 	bic.w	r3, r3, #7
 800cb2a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800cb2c:	69bb      	ldr	r3, [r7, #24]
 800cb2e:	f003 0307 	and.w	r3, r3, #7
 800cb32:	2b00      	cmp	r3, #0
 800cb34:	d009      	beq.n	800cb4a <prvInitialiseNewTask+0x46>
 800cb36:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb3a:	f383 8811 	msr	BASEPRI, r3
 800cb3e:	f3bf 8f6f 	isb	sy
 800cb42:	f3bf 8f4f 	dsb	sy
 800cb46:	617b      	str	r3, [r7, #20]
 800cb48:	e7fe      	b.n	800cb48 <prvInitialiseNewTask+0x44>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800cb4a:	2300      	movs	r3, #0
 800cb4c:	61fb      	str	r3, [r7, #28]
 800cb4e:	e012      	b.n	800cb76 <prvInitialiseNewTask+0x72>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800cb50:	68ba      	ldr	r2, [r7, #8]
 800cb52:	69fb      	ldr	r3, [r7, #28]
 800cb54:	4413      	add	r3, r2
 800cb56:	7819      	ldrb	r1, [r3, #0]
 800cb58:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cb5a:	69fb      	ldr	r3, [r7, #28]
 800cb5c:	4413      	add	r3, r2
 800cb5e:	3334      	adds	r3, #52	; 0x34
 800cb60:	460a      	mov	r2, r1
 800cb62:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 800cb64:	68ba      	ldr	r2, [r7, #8]
 800cb66:	69fb      	ldr	r3, [r7, #28]
 800cb68:	4413      	add	r3, r2
 800cb6a:	781b      	ldrb	r3, [r3, #0]
 800cb6c:	2b00      	cmp	r3, #0
 800cb6e:	d006      	beq.n	800cb7e <prvInitialiseNewTask+0x7a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800cb70:	69fb      	ldr	r3, [r7, #28]
 800cb72:	3301      	adds	r3, #1
 800cb74:	61fb      	str	r3, [r7, #28]
 800cb76:	69fb      	ldr	r3, [r7, #28]
 800cb78:	2b0f      	cmp	r3, #15
 800cb7a:	d9e9      	bls.n	800cb50 <prvInitialiseNewTask+0x4c>
 800cb7c:	e000      	b.n	800cb80 <prvInitialiseNewTask+0x7c>
		{
			break;
 800cb7e:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800cb80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb82:	2200      	movs	r2, #0
 800cb84:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800cb88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb8a:	2b06      	cmp	r3, #6
 800cb8c:	d901      	bls.n	800cb92 <prvInitialiseNewTask+0x8e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800cb8e:	2306      	movs	r3, #6
 800cb90:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800cb92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb94:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800cb96:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800cb98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb9a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800cb9c:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800cb9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cba0:	2200      	movs	r2, #0
 800cba2:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800cba4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cba6:	3304      	adds	r3, #4
 800cba8:	4618      	mov	r0, r3
 800cbaa:	f7fe fece 	bl	800b94a <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800cbae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cbb0:	3318      	adds	r3, #24
 800cbb2:	4618      	mov	r0, r3
 800cbb4:	f7fe fec9 	bl	800b94a <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800cbb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cbba:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cbbc:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800cbbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cbc0:	f1c3 0207 	rsb	r2, r3, #7
 800cbc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cbc6:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800cbc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cbca:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cbcc:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800cbce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cbd0:	2200      	movs	r2, #0
 800cbd2:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800cbd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cbd6:	2200      	movs	r2, #0
 800cbd8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800cbdc:	683a      	ldr	r2, [r7, #0]
 800cbde:	68f9      	ldr	r1, [r7, #12]
 800cbe0:	69b8      	ldr	r0, [r7, #24]
 800cbe2:	f000 ff0b 	bl	800d9fc <pxPortInitialiseStack>
 800cbe6:	4602      	mov	r2, r0
 800cbe8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cbea:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 800cbec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cbee:	2b00      	cmp	r3, #0
 800cbf0:	d002      	beq.n	800cbf8 <prvInitialiseNewTask+0xf4>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800cbf2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cbf4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cbf6:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800cbf8:	bf00      	nop
 800cbfa:	3720      	adds	r7, #32
 800cbfc:	46bd      	mov	sp, r7
 800cbfe:	bd80      	pop	{r7, pc}

0800cc00 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800cc00:	b580      	push	{r7, lr}
 800cc02:	b082      	sub	sp, #8
 800cc04:	af00      	add	r7, sp, #0
 800cc06:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800cc08:	f001 f820 	bl	800dc4c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800cc0c:	4b2a      	ldr	r3, [pc, #168]	; (800ccb8 <prvAddNewTaskToReadyList+0xb8>)
 800cc0e:	681b      	ldr	r3, [r3, #0]
 800cc10:	3301      	adds	r3, #1
 800cc12:	4a29      	ldr	r2, [pc, #164]	; (800ccb8 <prvAddNewTaskToReadyList+0xb8>)
 800cc14:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800cc16:	4b29      	ldr	r3, [pc, #164]	; (800ccbc <prvAddNewTaskToReadyList+0xbc>)
 800cc18:	681b      	ldr	r3, [r3, #0]
 800cc1a:	2b00      	cmp	r3, #0
 800cc1c:	d109      	bne.n	800cc32 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800cc1e:	4a27      	ldr	r2, [pc, #156]	; (800ccbc <prvAddNewTaskToReadyList+0xbc>)
 800cc20:	687b      	ldr	r3, [r7, #4]
 800cc22:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800cc24:	4b24      	ldr	r3, [pc, #144]	; (800ccb8 <prvAddNewTaskToReadyList+0xb8>)
 800cc26:	681b      	ldr	r3, [r3, #0]
 800cc28:	2b01      	cmp	r3, #1
 800cc2a:	d110      	bne.n	800cc4e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800cc2c:	f000 fbe6 	bl	800d3fc <prvInitialiseTaskLists>
 800cc30:	e00d      	b.n	800cc4e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800cc32:	4b23      	ldr	r3, [pc, #140]	; (800ccc0 <prvAddNewTaskToReadyList+0xc0>)
 800cc34:	681b      	ldr	r3, [r3, #0]
 800cc36:	2b00      	cmp	r3, #0
 800cc38:	d109      	bne.n	800cc4e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800cc3a:	4b20      	ldr	r3, [pc, #128]	; (800ccbc <prvAddNewTaskToReadyList+0xbc>)
 800cc3c:	681b      	ldr	r3, [r3, #0]
 800cc3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cc40:	687b      	ldr	r3, [r7, #4]
 800cc42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cc44:	429a      	cmp	r2, r3
 800cc46:	d802      	bhi.n	800cc4e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800cc48:	4a1c      	ldr	r2, [pc, #112]	; (800ccbc <prvAddNewTaskToReadyList+0xbc>)
 800cc4a:	687b      	ldr	r3, [r7, #4]
 800cc4c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800cc4e:	4b1d      	ldr	r3, [pc, #116]	; (800ccc4 <prvAddNewTaskToReadyList+0xc4>)
 800cc50:	681b      	ldr	r3, [r3, #0]
 800cc52:	3301      	adds	r3, #1
 800cc54:	4a1b      	ldr	r2, [pc, #108]	; (800ccc4 <prvAddNewTaskToReadyList+0xc4>)
 800cc56:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800cc58:	687b      	ldr	r3, [r7, #4]
 800cc5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cc5c:	2201      	movs	r2, #1
 800cc5e:	409a      	lsls	r2, r3
 800cc60:	4b19      	ldr	r3, [pc, #100]	; (800ccc8 <prvAddNewTaskToReadyList+0xc8>)
 800cc62:	681b      	ldr	r3, [r3, #0]
 800cc64:	4313      	orrs	r3, r2
 800cc66:	4a18      	ldr	r2, [pc, #96]	; (800ccc8 <prvAddNewTaskToReadyList+0xc8>)
 800cc68:	6013      	str	r3, [r2, #0]
 800cc6a:	687b      	ldr	r3, [r7, #4]
 800cc6c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cc6e:	4613      	mov	r3, r2
 800cc70:	009b      	lsls	r3, r3, #2
 800cc72:	4413      	add	r3, r2
 800cc74:	009b      	lsls	r3, r3, #2
 800cc76:	4a15      	ldr	r2, [pc, #84]	; (800cccc <prvAddNewTaskToReadyList+0xcc>)
 800cc78:	441a      	add	r2, r3
 800cc7a:	687b      	ldr	r3, [r7, #4]
 800cc7c:	3304      	adds	r3, #4
 800cc7e:	4619      	mov	r1, r3
 800cc80:	4610      	mov	r0, r2
 800cc82:	f7fe fe6f 	bl	800b964 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800cc86:	f001 f80f 	bl	800dca8 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800cc8a:	4b0d      	ldr	r3, [pc, #52]	; (800ccc0 <prvAddNewTaskToReadyList+0xc0>)
 800cc8c:	681b      	ldr	r3, [r3, #0]
 800cc8e:	2b00      	cmp	r3, #0
 800cc90:	d00e      	beq.n	800ccb0 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800cc92:	4b0a      	ldr	r3, [pc, #40]	; (800ccbc <prvAddNewTaskToReadyList+0xbc>)
 800cc94:	681b      	ldr	r3, [r3, #0]
 800cc96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cc98:	687b      	ldr	r3, [r7, #4]
 800cc9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cc9c:	429a      	cmp	r2, r3
 800cc9e:	d207      	bcs.n	800ccb0 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800cca0:	4b0b      	ldr	r3, [pc, #44]	; (800ccd0 <prvAddNewTaskToReadyList+0xd0>)
 800cca2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cca6:	601a      	str	r2, [r3, #0]
 800cca8:	f3bf 8f4f 	dsb	sy
 800ccac:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ccb0:	bf00      	nop
 800ccb2:	3708      	adds	r7, #8
 800ccb4:	46bd      	mov	sp, r7
 800ccb6:	bd80      	pop	{r7, pc}
 800ccb8:	20000568 	.word	0x20000568
 800ccbc:	20000468 	.word	0x20000468
 800ccc0:	20000574 	.word	0x20000574
 800ccc4:	20000584 	.word	0x20000584
 800ccc8:	20000570 	.word	0x20000570
 800cccc:	2000046c 	.word	0x2000046c
 800ccd0:	e000ed04 	.word	0xe000ed04

0800ccd4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800ccd4:	b580      	push	{r7, lr}
 800ccd6:	b084      	sub	sp, #16
 800ccd8:	af00      	add	r7, sp, #0
 800ccda:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800ccdc:	2300      	movs	r3, #0
 800ccde:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800cce0:	687b      	ldr	r3, [r7, #4]
 800cce2:	2b00      	cmp	r3, #0
 800cce4:	d016      	beq.n	800cd14 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800cce6:	4b13      	ldr	r3, [pc, #76]	; (800cd34 <vTaskDelay+0x60>)
 800cce8:	681b      	ldr	r3, [r3, #0]
 800ccea:	2b00      	cmp	r3, #0
 800ccec:	d009      	beq.n	800cd02 <vTaskDelay+0x2e>
 800ccee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ccf2:	f383 8811 	msr	BASEPRI, r3
 800ccf6:	f3bf 8f6f 	isb	sy
 800ccfa:	f3bf 8f4f 	dsb	sy
 800ccfe:	60bb      	str	r3, [r7, #8]
 800cd00:	e7fe      	b.n	800cd00 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 800cd02:	f000 f879 	bl	800cdf8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800cd06:	2100      	movs	r1, #0
 800cd08:	6878      	ldr	r0, [r7, #4]
 800cd0a:	f000 fe11 	bl	800d930 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800cd0e:	f000 f881 	bl	800ce14 <xTaskResumeAll>
 800cd12:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800cd14:	68fb      	ldr	r3, [r7, #12]
 800cd16:	2b00      	cmp	r3, #0
 800cd18:	d107      	bne.n	800cd2a <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 800cd1a:	4b07      	ldr	r3, [pc, #28]	; (800cd38 <vTaskDelay+0x64>)
 800cd1c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cd20:	601a      	str	r2, [r3, #0]
 800cd22:	f3bf 8f4f 	dsb	sy
 800cd26:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800cd2a:	bf00      	nop
 800cd2c:	3710      	adds	r7, #16
 800cd2e:	46bd      	mov	sp, r7
 800cd30:	bd80      	pop	{r7, pc}
 800cd32:	bf00      	nop
 800cd34:	20000590 	.word	0x20000590
 800cd38:	e000ed04 	.word	0xe000ed04

0800cd3c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800cd3c:	b580      	push	{r7, lr}
 800cd3e:	b08a      	sub	sp, #40	; 0x28
 800cd40:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800cd42:	2300      	movs	r3, #0
 800cd44:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800cd46:	2300      	movs	r3, #0
 800cd48:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800cd4a:	463a      	mov	r2, r7
 800cd4c:	1d39      	adds	r1, r7, #4
 800cd4e:	f107 0308 	add.w	r3, r7, #8
 800cd52:	4618      	mov	r0, r3
 800cd54:	f7f4 f940 	bl	8000fd8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800cd58:	6839      	ldr	r1, [r7, #0]
 800cd5a:	687b      	ldr	r3, [r7, #4]
 800cd5c:	68ba      	ldr	r2, [r7, #8]
 800cd5e:	9202      	str	r2, [sp, #8]
 800cd60:	9301      	str	r3, [sp, #4]
 800cd62:	2300      	movs	r3, #0
 800cd64:	9300      	str	r3, [sp, #0]
 800cd66:	2300      	movs	r3, #0
 800cd68:	460a      	mov	r2, r1
 800cd6a:	491d      	ldr	r1, [pc, #116]	; (800cde0 <vTaskStartScheduler+0xa4>)
 800cd6c:	481d      	ldr	r0, [pc, #116]	; (800cde4 <vTaskStartScheduler+0xa8>)
 800cd6e:	f7ff fe2b 	bl	800c9c8 <xTaskCreateStatic>
 800cd72:	4602      	mov	r2, r0
 800cd74:	4b1c      	ldr	r3, [pc, #112]	; (800cde8 <vTaskStartScheduler+0xac>)
 800cd76:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800cd78:	4b1b      	ldr	r3, [pc, #108]	; (800cde8 <vTaskStartScheduler+0xac>)
 800cd7a:	681b      	ldr	r3, [r3, #0]
 800cd7c:	2b00      	cmp	r3, #0
 800cd7e:	d002      	beq.n	800cd86 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800cd80:	2301      	movs	r3, #1
 800cd82:	617b      	str	r3, [r7, #20]
 800cd84:	e001      	b.n	800cd8a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800cd86:	2300      	movs	r3, #0
 800cd88:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800cd8a:	697b      	ldr	r3, [r7, #20]
 800cd8c:	2b01      	cmp	r3, #1
 800cd8e:	d115      	bne.n	800cdbc <vTaskStartScheduler+0x80>
 800cd90:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd94:	f383 8811 	msr	BASEPRI, r3
 800cd98:	f3bf 8f6f 	isb	sy
 800cd9c:	f3bf 8f4f 	dsb	sy
 800cda0:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800cda2:	4b12      	ldr	r3, [pc, #72]	; (800cdec <vTaskStartScheduler+0xb0>)
 800cda4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800cda8:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800cdaa:	4b11      	ldr	r3, [pc, #68]	; (800cdf0 <vTaskStartScheduler+0xb4>)
 800cdac:	2201      	movs	r2, #1
 800cdae:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 800cdb0:	4b10      	ldr	r3, [pc, #64]	; (800cdf4 <vTaskStartScheduler+0xb8>)
 800cdb2:	2200      	movs	r2, #0
 800cdb4:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800cdb6:	f000 feab 	bl	800db10 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800cdba:	e00d      	b.n	800cdd8 <vTaskStartScheduler+0x9c>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800cdbc:	697b      	ldr	r3, [r7, #20]
 800cdbe:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800cdc2:	d109      	bne.n	800cdd8 <vTaskStartScheduler+0x9c>
 800cdc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cdc8:	f383 8811 	msr	BASEPRI, r3
 800cdcc:	f3bf 8f6f 	isb	sy
 800cdd0:	f3bf 8f4f 	dsb	sy
 800cdd4:	60fb      	str	r3, [r7, #12]
 800cdd6:	e7fe      	b.n	800cdd6 <vTaskStartScheduler+0x9a>
}
 800cdd8:	bf00      	nop
 800cdda:	3718      	adds	r7, #24
 800cddc:	46bd      	mov	sp, r7
 800cdde:	bd80      	pop	{r7, pc}
 800cde0:	0801bfe4 	.word	0x0801bfe4
 800cde4:	0800d3cd 	.word	0x0800d3cd
 800cde8:	2000058c 	.word	0x2000058c
 800cdec:	20000588 	.word	0x20000588
 800cdf0:	20000574 	.word	0x20000574
 800cdf4:	2000056c 	.word	0x2000056c

0800cdf8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800cdf8:	b480      	push	{r7}
 800cdfa:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800cdfc:	4b04      	ldr	r3, [pc, #16]	; (800ce10 <vTaskSuspendAll+0x18>)
 800cdfe:	681b      	ldr	r3, [r3, #0]
 800ce00:	3301      	adds	r3, #1
 800ce02:	4a03      	ldr	r2, [pc, #12]	; (800ce10 <vTaskSuspendAll+0x18>)
 800ce04:	6013      	str	r3, [r2, #0]
}
 800ce06:	bf00      	nop
 800ce08:	46bd      	mov	sp, r7
 800ce0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce0e:	4770      	bx	lr
 800ce10:	20000590 	.word	0x20000590

0800ce14 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800ce14:	b580      	push	{r7, lr}
 800ce16:	b084      	sub	sp, #16
 800ce18:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800ce1a:	2300      	movs	r3, #0
 800ce1c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800ce1e:	2300      	movs	r3, #0
 800ce20:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800ce22:	4b41      	ldr	r3, [pc, #260]	; (800cf28 <xTaskResumeAll+0x114>)
 800ce24:	681b      	ldr	r3, [r3, #0]
 800ce26:	2b00      	cmp	r3, #0
 800ce28:	d109      	bne.n	800ce3e <xTaskResumeAll+0x2a>
 800ce2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ce2e:	f383 8811 	msr	BASEPRI, r3
 800ce32:	f3bf 8f6f 	isb	sy
 800ce36:	f3bf 8f4f 	dsb	sy
 800ce3a:	603b      	str	r3, [r7, #0]
 800ce3c:	e7fe      	b.n	800ce3c <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800ce3e:	f000 ff05 	bl	800dc4c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800ce42:	4b39      	ldr	r3, [pc, #228]	; (800cf28 <xTaskResumeAll+0x114>)
 800ce44:	681b      	ldr	r3, [r3, #0]
 800ce46:	3b01      	subs	r3, #1
 800ce48:	4a37      	ldr	r2, [pc, #220]	; (800cf28 <xTaskResumeAll+0x114>)
 800ce4a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ce4c:	4b36      	ldr	r3, [pc, #216]	; (800cf28 <xTaskResumeAll+0x114>)
 800ce4e:	681b      	ldr	r3, [r3, #0]
 800ce50:	2b00      	cmp	r3, #0
 800ce52:	d161      	bne.n	800cf18 <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800ce54:	4b35      	ldr	r3, [pc, #212]	; (800cf2c <xTaskResumeAll+0x118>)
 800ce56:	681b      	ldr	r3, [r3, #0]
 800ce58:	2b00      	cmp	r3, #0
 800ce5a:	d05d      	beq.n	800cf18 <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800ce5c:	e02e      	b.n	800cebc <xTaskResumeAll+0xa8>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 800ce5e:	4b34      	ldr	r3, [pc, #208]	; (800cf30 <xTaskResumeAll+0x11c>)
 800ce60:	68db      	ldr	r3, [r3, #12]
 800ce62:	68db      	ldr	r3, [r3, #12]
 800ce64:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800ce66:	68fb      	ldr	r3, [r7, #12]
 800ce68:	3318      	adds	r3, #24
 800ce6a:	4618      	mov	r0, r3
 800ce6c:	f7fe fdd7 	bl	800ba1e <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ce70:	68fb      	ldr	r3, [r7, #12]
 800ce72:	3304      	adds	r3, #4
 800ce74:	4618      	mov	r0, r3
 800ce76:	f7fe fdd2 	bl	800ba1e <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800ce7a:	68fb      	ldr	r3, [r7, #12]
 800ce7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ce7e:	2201      	movs	r2, #1
 800ce80:	409a      	lsls	r2, r3
 800ce82:	4b2c      	ldr	r3, [pc, #176]	; (800cf34 <xTaskResumeAll+0x120>)
 800ce84:	681b      	ldr	r3, [r3, #0]
 800ce86:	4313      	orrs	r3, r2
 800ce88:	4a2a      	ldr	r2, [pc, #168]	; (800cf34 <xTaskResumeAll+0x120>)
 800ce8a:	6013      	str	r3, [r2, #0]
 800ce8c:	68fb      	ldr	r3, [r7, #12]
 800ce8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ce90:	4613      	mov	r3, r2
 800ce92:	009b      	lsls	r3, r3, #2
 800ce94:	4413      	add	r3, r2
 800ce96:	009b      	lsls	r3, r3, #2
 800ce98:	4a27      	ldr	r2, [pc, #156]	; (800cf38 <xTaskResumeAll+0x124>)
 800ce9a:	441a      	add	r2, r3
 800ce9c:	68fb      	ldr	r3, [r7, #12]
 800ce9e:	3304      	adds	r3, #4
 800cea0:	4619      	mov	r1, r3
 800cea2:	4610      	mov	r0, r2
 800cea4:	f7fe fd5e 	bl	800b964 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800cea8:	68fb      	ldr	r3, [r7, #12]
 800ceaa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ceac:	4b23      	ldr	r3, [pc, #140]	; (800cf3c <xTaskResumeAll+0x128>)
 800ceae:	681b      	ldr	r3, [r3, #0]
 800ceb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ceb2:	429a      	cmp	r2, r3
 800ceb4:	d302      	bcc.n	800cebc <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 800ceb6:	4b22      	ldr	r3, [pc, #136]	; (800cf40 <xTaskResumeAll+0x12c>)
 800ceb8:	2201      	movs	r2, #1
 800ceba:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800cebc:	4b1c      	ldr	r3, [pc, #112]	; (800cf30 <xTaskResumeAll+0x11c>)
 800cebe:	681b      	ldr	r3, [r3, #0]
 800cec0:	2b00      	cmp	r3, #0
 800cec2:	d1cc      	bne.n	800ce5e <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800cec4:	68fb      	ldr	r3, [r7, #12]
 800cec6:	2b00      	cmp	r3, #0
 800cec8:	d001      	beq.n	800cece <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800ceca:	f000 fb31 	bl	800d530 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800cece:	4b1d      	ldr	r3, [pc, #116]	; (800cf44 <xTaskResumeAll+0x130>)
 800ced0:	681b      	ldr	r3, [r3, #0]
 800ced2:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800ced4:	687b      	ldr	r3, [r7, #4]
 800ced6:	2b00      	cmp	r3, #0
 800ced8:	d010      	beq.n	800cefc <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800ceda:	f000 f859 	bl	800cf90 <xTaskIncrementTick>
 800cede:	4603      	mov	r3, r0
 800cee0:	2b00      	cmp	r3, #0
 800cee2:	d002      	beq.n	800ceea <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 800cee4:	4b16      	ldr	r3, [pc, #88]	; (800cf40 <xTaskResumeAll+0x12c>)
 800cee6:	2201      	movs	r2, #1
 800cee8:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800ceea:	687b      	ldr	r3, [r7, #4]
 800ceec:	3b01      	subs	r3, #1
 800ceee:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800cef0:	687b      	ldr	r3, [r7, #4]
 800cef2:	2b00      	cmp	r3, #0
 800cef4:	d1f1      	bne.n	800ceda <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 800cef6:	4b13      	ldr	r3, [pc, #76]	; (800cf44 <xTaskResumeAll+0x130>)
 800cef8:	2200      	movs	r2, #0
 800cefa:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800cefc:	4b10      	ldr	r3, [pc, #64]	; (800cf40 <xTaskResumeAll+0x12c>)
 800cefe:	681b      	ldr	r3, [r3, #0]
 800cf00:	2b00      	cmp	r3, #0
 800cf02:	d009      	beq.n	800cf18 <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800cf04:	2301      	movs	r3, #1
 800cf06:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800cf08:	4b0f      	ldr	r3, [pc, #60]	; (800cf48 <xTaskResumeAll+0x134>)
 800cf0a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cf0e:	601a      	str	r2, [r3, #0]
 800cf10:	f3bf 8f4f 	dsb	sy
 800cf14:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800cf18:	f000 fec6 	bl	800dca8 <vPortExitCritical>

	return xAlreadyYielded;
 800cf1c:	68bb      	ldr	r3, [r7, #8]
}
 800cf1e:	4618      	mov	r0, r3
 800cf20:	3710      	adds	r7, #16
 800cf22:	46bd      	mov	sp, r7
 800cf24:	bd80      	pop	{r7, pc}
 800cf26:	bf00      	nop
 800cf28:	20000590 	.word	0x20000590
 800cf2c:	20000568 	.word	0x20000568
 800cf30:	20000528 	.word	0x20000528
 800cf34:	20000570 	.word	0x20000570
 800cf38:	2000046c 	.word	0x2000046c
 800cf3c:	20000468 	.word	0x20000468
 800cf40:	2000057c 	.word	0x2000057c
 800cf44:	20000578 	.word	0x20000578
 800cf48:	e000ed04 	.word	0xe000ed04

0800cf4c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800cf4c:	b480      	push	{r7}
 800cf4e:	b083      	sub	sp, #12
 800cf50:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800cf52:	4b05      	ldr	r3, [pc, #20]	; (800cf68 <xTaskGetTickCount+0x1c>)
 800cf54:	681b      	ldr	r3, [r3, #0]
 800cf56:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800cf58:	687b      	ldr	r3, [r7, #4]
}
 800cf5a:	4618      	mov	r0, r3
 800cf5c:	370c      	adds	r7, #12
 800cf5e:	46bd      	mov	sp, r7
 800cf60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf64:	4770      	bx	lr
 800cf66:	bf00      	nop
 800cf68:	2000056c 	.word	0x2000056c

0800cf6c <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 800cf6c:	b580      	push	{r7, lr}
 800cf6e:	b082      	sub	sp, #8
 800cf70:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800cf72:	f000 ff47 	bl	800de04 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800cf76:	2300      	movs	r3, #0
 800cf78:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800cf7a:	4b04      	ldr	r3, [pc, #16]	; (800cf8c <xTaskGetTickCountFromISR+0x20>)
 800cf7c:	681b      	ldr	r3, [r3, #0]
 800cf7e:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800cf80:	683b      	ldr	r3, [r7, #0]
}
 800cf82:	4618      	mov	r0, r3
 800cf84:	3708      	adds	r7, #8
 800cf86:	46bd      	mov	sp, r7
 800cf88:	bd80      	pop	{r7, pc}
 800cf8a:	bf00      	nop
 800cf8c:	2000056c 	.word	0x2000056c

0800cf90 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800cf90:	b580      	push	{r7, lr}
 800cf92:	b086      	sub	sp, #24
 800cf94:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800cf96:	2300      	movs	r3, #0
 800cf98:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800cf9a:	4b50      	ldr	r3, [pc, #320]	; (800d0dc <xTaskIncrementTick+0x14c>)
 800cf9c:	681b      	ldr	r3, [r3, #0]
 800cf9e:	2b00      	cmp	r3, #0
 800cfa0:	f040 808c 	bne.w	800d0bc <xTaskIncrementTick+0x12c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800cfa4:	4b4e      	ldr	r3, [pc, #312]	; (800d0e0 <xTaskIncrementTick+0x150>)
 800cfa6:	681b      	ldr	r3, [r3, #0]
 800cfa8:	3301      	adds	r3, #1
 800cfaa:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800cfac:	4a4c      	ldr	r2, [pc, #304]	; (800d0e0 <xTaskIncrementTick+0x150>)
 800cfae:	693b      	ldr	r3, [r7, #16]
 800cfb0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800cfb2:	693b      	ldr	r3, [r7, #16]
 800cfb4:	2b00      	cmp	r3, #0
 800cfb6:	d11f      	bne.n	800cff8 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 800cfb8:	4b4a      	ldr	r3, [pc, #296]	; (800d0e4 <xTaskIncrementTick+0x154>)
 800cfba:	681b      	ldr	r3, [r3, #0]
 800cfbc:	681b      	ldr	r3, [r3, #0]
 800cfbe:	2b00      	cmp	r3, #0
 800cfc0:	d009      	beq.n	800cfd6 <xTaskIncrementTick+0x46>
 800cfc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cfc6:	f383 8811 	msr	BASEPRI, r3
 800cfca:	f3bf 8f6f 	isb	sy
 800cfce:	f3bf 8f4f 	dsb	sy
 800cfd2:	603b      	str	r3, [r7, #0]
 800cfd4:	e7fe      	b.n	800cfd4 <xTaskIncrementTick+0x44>
 800cfd6:	4b43      	ldr	r3, [pc, #268]	; (800d0e4 <xTaskIncrementTick+0x154>)
 800cfd8:	681b      	ldr	r3, [r3, #0]
 800cfda:	60fb      	str	r3, [r7, #12]
 800cfdc:	4b42      	ldr	r3, [pc, #264]	; (800d0e8 <xTaskIncrementTick+0x158>)
 800cfde:	681b      	ldr	r3, [r3, #0]
 800cfe0:	4a40      	ldr	r2, [pc, #256]	; (800d0e4 <xTaskIncrementTick+0x154>)
 800cfe2:	6013      	str	r3, [r2, #0]
 800cfe4:	4a40      	ldr	r2, [pc, #256]	; (800d0e8 <xTaskIncrementTick+0x158>)
 800cfe6:	68fb      	ldr	r3, [r7, #12]
 800cfe8:	6013      	str	r3, [r2, #0]
 800cfea:	4b40      	ldr	r3, [pc, #256]	; (800d0ec <xTaskIncrementTick+0x15c>)
 800cfec:	681b      	ldr	r3, [r3, #0]
 800cfee:	3301      	adds	r3, #1
 800cff0:	4a3e      	ldr	r2, [pc, #248]	; (800d0ec <xTaskIncrementTick+0x15c>)
 800cff2:	6013      	str	r3, [r2, #0]
 800cff4:	f000 fa9c 	bl	800d530 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800cff8:	4b3d      	ldr	r3, [pc, #244]	; (800d0f0 <xTaskIncrementTick+0x160>)
 800cffa:	681b      	ldr	r3, [r3, #0]
 800cffc:	693a      	ldr	r2, [r7, #16]
 800cffe:	429a      	cmp	r2, r3
 800d000:	d34d      	bcc.n	800d09e <xTaskIncrementTick+0x10e>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d002:	4b38      	ldr	r3, [pc, #224]	; (800d0e4 <xTaskIncrementTick+0x154>)
 800d004:	681b      	ldr	r3, [r3, #0]
 800d006:	681b      	ldr	r3, [r3, #0]
 800d008:	2b00      	cmp	r3, #0
 800d00a:	d101      	bne.n	800d010 <xTaskIncrementTick+0x80>
 800d00c:	2301      	movs	r3, #1
 800d00e:	e000      	b.n	800d012 <xTaskIncrementTick+0x82>
 800d010:	2300      	movs	r3, #0
 800d012:	2b00      	cmp	r3, #0
 800d014:	d004      	beq.n	800d020 <xTaskIncrementTick+0x90>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d016:	4b36      	ldr	r3, [pc, #216]	; (800d0f0 <xTaskIncrementTick+0x160>)
 800d018:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800d01c:	601a      	str	r2, [r3, #0]
					break;
 800d01e:	e03e      	b.n	800d09e <xTaskIncrementTick+0x10e>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800d020:	4b30      	ldr	r3, [pc, #192]	; (800d0e4 <xTaskIncrementTick+0x154>)
 800d022:	681b      	ldr	r3, [r3, #0]
 800d024:	68db      	ldr	r3, [r3, #12]
 800d026:	68db      	ldr	r3, [r3, #12]
 800d028:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800d02a:	68bb      	ldr	r3, [r7, #8]
 800d02c:	685b      	ldr	r3, [r3, #4]
 800d02e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800d030:	693a      	ldr	r2, [r7, #16]
 800d032:	687b      	ldr	r3, [r7, #4]
 800d034:	429a      	cmp	r2, r3
 800d036:	d203      	bcs.n	800d040 <xTaskIncrementTick+0xb0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800d038:	4a2d      	ldr	r2, [pc, #180]	; (800d0f0 <xTaskIncrementTick+0x160>)
 800d03a:	687b      	ldr	r3, [r7, #4]
 800d03c:	6013      	str	r3, [r2, #0]
						break;
 800d03e:	e02e      	b.n	800d09e <xTaskIncrementTick+0x10e>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d040:	68bb      	ldr	r3, [r7, #8]
 800d042:	3304      	adds	r3, #4
 800d044:	4618      	mov	r0, r3
 800d046:	f7fe fcea 	bl	800ba1e <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800d04a:	68bb      	ldr	r3, [r7, #8]
 800d04c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d04e:	2b00      	cmp	r3, #0
 800d050:	d004      	beq.n	800d05c <xTaskIncrementTick+0xcc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800d052:	68bb      	ldr	r3, [r7, #8]
 800d054:	3318      	adds	r3, #24
 800d056:	4618      	mov	r0, r3
 800d058:	f7fe fce1 	bl	800ba1e <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800d05c:	68bb      	ldr	r3, [r7, #8]
 800d05e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d060:	2201      	movs	r2, #1
 800d062:	409a      	lsls	r2, r3
 800d064:	4b23      	ldr	r3, [pc, #140]	; (800d0f4 <xTaskIncrementTick+0x164>)
 800d066:	681b      	ldr	r3, [r3, #0]
 800d068:	4313      	orrs	r3, r2
 800d06a:	4a22      	ldr	r2, [pc, #136]	; (800d0f4 <xTaskIncrementTick+0x164>)
 800d06c:	6013      	str	r3, [r2, #0]
 800d06e:	68bb      	ldr	r3, [r7, #8]
 800d070:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d072:	4613      	mov	r3, r2
 800d074:	009b      	lsls	r3, r3, #2
 800d076:	4413      	add	r3, r2
 800d078:	009b      	lsls	r3, r3, #2
 800d07a:	4a1f      	ldr	r2, [pc, #124]	; (800d0f8 <xTaskIncrementTick+0x168>)
 800d07c:	441a      	add	r2, r3
 800d07e:	68bb      	ldr	r3, [r7, #8]
 800d080:	3304      	adds	r3, #4
 800d082:	4619      	mov	r1, r3
 800d084:	4610      	mov	r0, r2
 800d086:	f7fe fc6d 	bl	800b964 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800d08a:	68bb      	ldr	r3, [r7, #8]
 800d08c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d08e:	4b1b      	ldr	r3, [pc, #108]	; (800d0fc <xTaskIncrementTick+0x16c>)
 800d090:	681b      	ldr	r3, [r3, #0]
 800d092:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d094:	429a      	cmp	r2, r3
 800d096:	d3b4      	bcc.n	800d002 <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 800d098:	2301      	movs	r3, #1
 800d09a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d09c:	e7b1      	b.n	800d002 <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800d09e:	4b17      	ldr	r3, [pc, #92]	; (800d0fc <xTaskIncrementTick+0x16c>)
 800d0a0:	681b      	ldr	r3, [r3, #0]
 800d0a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d0a4:	4914      	ldr	r1, [pc, #80]	; (800d0f8 <xTaskIncrementTick+0x168>)
 800d0a6:	4613      	mov	r3, r2
 800d0a8:	009b      	lsls	r3, r3, #2
 800d0aa:	4413      	add	r3, r2
 800d0ac:	009b      	lsls	r3, r3, #2
 800d0ae:	440b      	add	r3, r1
 800d0b0:	681b      	ldr	r3, [r3, #0]
 800d0b2:	2b01      	cmp	r3, #1
 800d0b4:	d907      	bls.n	800d0c6 <xTaskIncrementTick+0x136>
			{
				xSwitchRequired = pdTRUE;
 800d0b6:	2301      	movs	r3, #1
 800d0b8:	617b      	str	r3, [r7, #20]
 800d0ba:	e004      	b.n	800d0c6 <xTaskIncrementTick+0x136>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800d0bc:	4b10      	ldr	r3, [pc, #64]	; (800d100 <xTaskIncrementTick+0x170>)
 800d0be:	681b      	ldr	r3, [r3, #0]
 800d0c0:	3301      	adds	r3, #1
 800d0c2:	4a0f      	ldr	r2, [pc, #60]	; (800d100 <xTaskIncrementTick+0x170>)
 800d0c4:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800d0c6:	4b0f      	ldr	r3, [pc, #60]	; (800d104 <xTaskIncrementTick+0x174>)
 800d0c8:	681b      	ldr	r3, [r3, #0]
 800d0ca:	2b00      	cmp	r3, #0
 800d0cc:	d001      	beq.n	800d0d2 <xTaskIncrementTick+0x142>
		{
			xSwitchRequired = pdTRUE;
 800d0ce:	2301      	movs	r3, #1
 800d0d0:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800d0d2:	697b      	ldr	r3, [r7, #20]
}
 800d0d4:	4618      	mov	r0, r3
 800d0d6:	3718      	adds	r7, #24
 800d0d8:	46bd      	mov	sp, r7
 800d0da:	bd80      	pop	{r7, pc}
 800d0dc:	20000590 	.word	0x20000590
 800d0e0:	2000056c 	.word	0x2000056c
 800d0e4:	20000520 	.word	0x20000520
 800d0e8:	20000524 	.word	0x20000524
 800d0ec:	20000580 	.word	0x20000580
 800d0f0:	20000588 	.word	0x20000588
 800d0f4:	20000570 	.word	0x20000570
 800d0f8:	2000046c 	.word	0x2000046c
 800d0fc:	20000468 	.word	0x20000468
 800d100:	20000578 	.word	0x20000578
 800d104:	2000057c 	.word	0x2000057c

0800d108 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800d108:	b480      	push	{r7}
 800d10a:	b087      	sub	sp, #28
 800d10c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800d10e:	4b26      	ldr	r3, [pc, #152]	; (800d1a8 <vTaskSwitchContext+0xa0>)
 800d110:	681b      	ldr	r3, [r3, #0]
 800d112:	2b00      	cmp	r3, #0
 800d114:	d003      	beq.n	800d11e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800d116:	4b25      	ldr	r3, [pc, #148]	; (800d1ac <vTaskSwitchContext+0xa4>)
 800d118:	2201      	movs	r2, #1
 800d11a:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800d11c:	e03e      	b.n	800d19c <vTaskSwitchContext+0x94>
		xYieldPending = pdFALSE;
 800d11e:	4b23      	ldr	r3, [pc, #140]	; (800d1ac <vTaskSwitchContext+0xa4>)
 800d120:	2200      	movs	r2, #0
 800d122:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 800d124:	4b22      	ldr	r3, [pc, #136]	; (800d1b0 <vTaskSwitchContext+0xa8>)
 800d126:	681b      	ldr	r3, [r3, #0]
 800d128:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800d12a:	68fb      	ldr	r3, [r7, #12]
 800d12c:	fab3 f383 	clz	r3, r3
 800d130:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800d132:	7afb      	ldrb	r3, [r7, #11]
 800d134:	f1c3 031f 	rsb	r3, r3, #31
 800d138:	617b      	str	r3, [r7, #20]
 800d13a:	491e      	ldr	r1, [pc, #120]	; (800d1b4 <vTaskSwitchContext+0xac>)
 800d13c:	697a      	ldr	r2, [r7, #20]
 800d13e:	4613      	mov	r3, r2
 800d140:	009b      	lsls	r3, r3, #2
 800d142:	4413      	add	r3, r2
 800d144:	009b      	lsls	r3, r3, #2
 800d146:	440b      	add	r3, r1
 800d148:	681b      	ldr	r3, [r3, #0]
 800d14a:	2b00      	cmp	r3, #0
 800d14c:	d109      	bne.n	800d162 <vTaskSwitchContext+0x5a>
	__asm volatile
 800d14e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d152:	f383 8811 	msr	BASEPRI, r3
 800d156:	f3bf 8f6f 	isb	sy
 800d15a:	f3bf 8f4f 	dsb	sy
 800d15e:	607b      	str	r3, [r7, #4]
 800d160:	e7fe      	b.n	800d160 <vTaskSwitchContext+0x58>
 800d162:	697a      	ldr	r2, [r7, #20]
 800d164:	4613      	mov	r3, r2
 800d166:	009b      	lsls	r3, r3, #2
 800d168:	4413      	add	r3, r2
 800d16a:	009b      	lsls	r3, r3, #2
 800d16c:	4a11      	ldr	r2, [pc, #68]	; (800d1b4 <vTaskSwitchContext+0xac>)
 800d16e:	4413      	add	r3, r2
 800d170:	613b      	str	r3, [r7, #16]
 800d172:	693b      	ldr	r3, [r7, #16]
 800d174:	685b      	ldr	r3, [r3, #4]
 800d176:	685a      	ldr	r2, [r3, #4]
 800d178:	693b      	ldr	r3, [r7, #16]
 800d17a:	605a      	str	r2, [r3, #4]
 800d17c:	693b      	ldr	r3, [r7, #16]
 800d17e:	685a      	ldr	r2, [r3, #4]
 800d180:	693b      	ldr	r3, [r7, #16]
 800d182:	3308      	adds	r3, #8
 800d184:	429a      	cmp	r2, r3
 800d186:	d104      	bne.n	800d192 <vTaskSwitchContext+0x8a>
 800d188:	693b      	ldr	r3, [r7, #16]
 800d18a:	685b      	ldr	r3, [r3, #4]
 800d18c:	685a      	ldr	r2, [r3, #4]
 800d18e:	693b      	ldr	r3, [r7, #16]
 800d190:	605a      	str	r2, [r3, #4]
 800d192:	693b      	ldr	r3, [r7, #16]
 800d194:	685b      	ldr	r3, [r3, #4]
 800d196:	68db      	ldr	r3, [r3, #12]
 800d198:	4a07      	ldr	r2, [pc, #28]	; (800d1b8 <vTaskSwitchContext+0xb0>)
 800d19a:	6013      	str	r3, [r2, #0]
}
 800d19c:	bf00      	nop
 800d19e:	371c      	adds	r7, #28
 800d1a0:	46bd      	mov	sp, r7
 800d1a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1a6:	4770      	bx	lr
 800d1a8:	20000590 	.word	0x20000590
 800d1ac:	2000057c 	.word	0x2000057c
 800d1b0:	20000570 	.word	0x20000570
 800d1b4:	2000046c 	.word	0x2000046c
 800d1b8:	20000468 	.word	0x20000468

0800d1bc <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800d1bc:	b580      	push	{r7, lr}
 800d1be:	b084      	sub	sp, #16
 800d1c0:	af00      	add	r7, sp, #0
 800d1c2:	6078      	str	r0, [r7, #4]
 800d1c4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800d1c6:	687b      	ldr	r3, [r7, #4]
 800d1c8:	2b00      	cmp	r3, #0
 800d1ca:	d109      	bne.n	800d1e0 <vTaskPlaceOnEventList+0x24>
 800d1cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d1d0:	f383 8811 	msr	BASEPRI, r3
 800d1d4:	f3bf 8f6f 	isb	sy
 800d1d8:	f3bf 8f4f 	dsb	sy
 800d1dc:	60fb      	str	r3, [r7, #12]
 800d1de:	e7fe      	b.n	800d1de <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800d1e0:	4b07      	ldr	r3, [pc, #28]	; (800d200 <vTaskPlaceOnEventList+0x44>)
 800d1e2:	681b      	ldr	r3, [r3, #0]
 800d1e4:	3318      	adds	r3, #24
 800d1e6:	4619      	mov	r1, r3
 800d1e8:	6878      	ldr	r0, [r7, #4]
 800d1ea:	f7fe fbdf 	bl	800b9ac <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800d1ee:	2101      	movs	r1, #1
 800d1f0:	6838      	ldr	r0, [r7, #0]
 800d1f2:	f000 fb9d 	bl	800d930 <prvAddCurrentTaskToDelayedList>
}
 800d1f6:	bf00      	nop
 800d1f8:	3710      	adds	r7, #16
 800d1fa:	46bd      	mov	sp, r7
 800d1fc:	bd80      	pop	{r7, pc}
 800d1fe:	bf00      	nop
 800d200:	20000468 	.word	0x20000468

0800d204 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800d204:	b580      	push	{r7, lr}
 800d206:	b086      	sub	sp, #24
 800d208:	af00      	add	r7, sp, #0
 800d20a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 800d20c:	687b      	ldr	r3, [r7, #4]
 800d20e:	68db      	ldr	r3, [r3, #12]
 800d210:	68db      	ldr	r3, [r3, #12]
 800d212:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800d214:	693b      	ldr	r3, [r7, #16]
 800d216:	2b00      	cmp	r3, #0
 800d218:	d109      	bne.n	800d22e <xTaskRemoveFromEventList+0x2a>
 800d21a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d21e:	f383 8811 	msr	BASEPRI, r3
 800d222:	f3bf 8f6f 	isb	sy
 800d226:	f3bf 8f4f 	dsb	sy
 800d22a:	60fb      	str	r3, [r7, #12]
 800d22c:	e7fe      	b.n	800d22c <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800d22e:	693b      	ldr	r3, [r7, #16]
 800d230:	3318      	adds	r3, #24
 800d232:	4618      	mov	r0, r3
 800d234:	f7fe fbf3 	bl	800ba1e <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d238:	4b1d      	ldr	r3, [pc, #116]	; (800d2b0 <xTaskRemoveFromEventList+0xac>)
 800d23a:	681b      	ldr	r3, [r3, #0]
 800d23c:	2b00      	cmp	r3, #0
 800d23e:	d11c      	bne.n	800d27a <xTaskRemoveFromEventList+0x76>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800d240:	693b      	ldr	r3, [r7, #16]
 800d242:	3304      	adds	r3, #4
 800d244:	4618      	mov	r0, r3
 800d246:	f7fe fbea 	bl	800ba1e <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800d24a:	693b      	ldr	r3, [r7, #16]
 800d24c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d24e:	2201      	movs	r2, #1
 800d250:	409a      	lsls	r2, r3
 800d252:	4b18      	ldr	r3, [pc, #96]	; (800d2b4 <xTaskRemoveFromEventList+0xb0>)
 800d254:	681b      	ldr	r3, [r3, #0]
 800d256:	4313      	orrs	r3, r2
 800d258:	4a16      	ldr	r2, [pc, #88]	; (800d2b4 <xTaskRemoveFromEventList+0xb0>)
 800d25a:	6013      	str	r3, [r2, #0]
 800d25c:	693b      	ldr	r3, [r7, #16]
 800d25e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d260:	4613      	mov	r3, r2
 800d262:	009b      	lsls	r3, r3, #2
 800d264:	4413      	add	r3, r2
 800d266:	009b      	lsls	r3, r3, #2
 800d268:	4a13      	ldr	r2, [pc, #76]	; (800d2b8 <xTaskRemoveFromEventList+0xb4>)
 800d26a:	441a      	add	r2, r3
 800d26c:	693b      	ldr	r3, [r7, #16]
 800d26e:	3304      	adds	r3, #4
 800d270:	4619      	mov	r1, r3
 800d272:	4610      	mov	r0, r2
 800d274:	f7fe fb76 	bl	800b964 <vListInsertEnd>
 800d278:	e005      	b.n	800d286 <xTaskRemoveFromEventList+0x82>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800d27a:	693b      	ldr	r3, [r7, #16]
 800d27c:	3318      	adds	r3, #24
 800d27e:	4619      	mov	r1, r3
 800d280:	480e      	ldr	r0, [pc, #56]	; (800d2bc <xTaskRemoveFromEventList+0xb8>)
 800d282:	f7fe fb6f 	bl	800b964 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800d286:	693b      	ldr	r3, [r7, #16]
 800d288:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d28a:	4b0d      	ldr	r3, [pc, #52]	; (800d2c0 <xTaskRemoveFromEventList+0xbc>)
 800d28c:	681b      	ldr	r3, [r3, #0]
 800d28e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d290:	429a      	cmp	r2, r3
 800d292:	d905      	bls.n	800d2a0 <xTaskRemoveFromEventList+0x9c>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800d294:	2301      	movs	r3, #1
 800d296:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800d298:	4b0a      	ldr	r3, [pc, #40]	; (800d2c4 <xTaskRemoveFromEventList+0xc0>)
 800d29a:	2201      	movs	r2, #1
 800d29c:	601a      	str	r2, [r3, #0]
 800d29e:	e001      	b.n	800d2a4 <xTaskRemoveFromEventList+0xa0>
	}
	else
	{
		xReturn = pdFALSE;
 800d2a0:	2300      	movs	r3, #0
 800d2a2:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 800d2a4:	697b      	ldr	r3, [r7, #20]
}
 800d2a6:	4618      	mov	r0, r3
 800d2a8:	3718      	adds	r7, #24
 800d2aa:	46bd      	mov	sp, r7
 800d2ac:	bd80      	pop	{r7, pc}
 800d2ae:	bf00      	nop
 800d2b0:	20000590 	.word	0x20000590
 800d2b4:	20000570 	.word	0x20000570
 800d2b8:	2000046c 	.word	0x2000046c
 800d2bc:	20000528 	.word	0x20000528
 800d2c0:	20000468 	.word	0x20000468
 800d2c4:	2000057c 	.word	0x2000057c

0800d2c8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800d2c8:	b480      	push	{r7}
 800d2ca:	b083      	sub	sp, #12
 800d2cc:	af00      	add	r7, sp, #0
 800d2ce:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800d2d0:	4b06      	ldr	r3, [pc, #24]	; (800d2ec <vTaskInternalSetTimeOutState+0x24>)
 800d2d2:	681a      	ldr	r2, [r3, #0]
 800d2d4:	687b      	ldr	r3, [r7, #4]
 800d2d6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800d2d8:	4b05      	ldr	r3, [pc, #20]	; (800d2f0 <vTaskInternalSetTimeOutState+0x28>)
 800d2da:	681a      	ldr	r2, [r3, #0]
 800d2dc:	687b      	ldr	r3, [r7, #4]
 800d2de:	605a      	str	r2, [r3, #4]
}
 800d2e0:	bf00      	nop
 800d2e2:	370c      	adds	r7, #12
 800d2e4:	46bd      	mov	sp, r7
 800d2e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2ea:	4770      	bx	lr
 800d2ec:	20000580 	.word	0x20000580
 800d2f0:	2000056c 	.word	0x2000056c

0800d2f4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800d2f4:	b580      	push	{r7, lr}
 800d2f6:	b088      	sub	sp, #32
 800d2f8:	af00      	add	r7, sp, #0
 800d2fa:	6078      	str	r0, [r7, #4]
 800d2fc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800d2fe:	687b      	ldr	r3, [r7, #4]
 800d300:	2b00      	cmp	r3, #0
 800d302:	d109      	bne.n	800d318 <xTaskCheckForTimeOut+0x24>
 800d304:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d308:	f383 8811 	msr	BASEPRI, r3
 800d30c:	f3bf 8f6f 	isb	sy
 800d310:	f3bf 8f4f 	dsb	sy
 800d314:	613b      	str	r3, [r7, #16]
 800d316:	e7fe      	b.n	800d316 <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 800d318:	683b      	ldr	r3, [r7, #0]
 800d31a:	2b00      	cmp	r3, #0
 800d31c:	d109      	bne.n	800d332 <xTaskCheckForTimeOut+0x3e>
 800d31e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d322:	f383 8811 	msr	BASEPRI, r3
 800d326:	f3bf 8f6f 	isb	sy
 800d32a:	f3bf 8f4f 	dsb	sy
 800d32e:	60fb      	str	r3, [r7, #12]
 800d330:	e7fe      	b.n	800d330 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 800d332:	f000 fc8b 	bl	800dc4c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800d336:	4b1d      	ldr	r3, [pc, #116]	; (800d3ac <xTaskCheckForTimeOut+0xb8>)
 800d338:	681b      	ldr	r3, [r3, #0]
 800d33a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800d33c:	687b      	ldr	r3, [r7, #4]
 800d33e:	685b      	ldr	r3, [r3, #4]
 800d340:	69ba      	ldr	r2, [r7, #24]
 800d342:	1ad3      	subs	r3, r2, r3
 800d344:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800d346:	683b      	ldr	r3, [r7, #0]
 800d348:	681b      	ldr	r3, [r3, #0]
 800d34a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d34e:	d102      	bne.n	800d356 <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800d350:	2300      	movs	r3, #0
 800d352:	61fb      	str	r3, [r7, #28]
 800d354:	e023      	b.n	800d39e <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800d356:	687b      	ldr	r3, [r7, #4]
 800d358:	681a      	ldr	r2, [r3, #0]
 800d35a:	4b15      	ldr	r3, [pc, #84]	; (800d3b0 <xTaskCheckForTimeOut+0xbc>)
 800d35c:	681b      	ldr	r3, [r3, #0]
 800d35e:	429a      	cmp	r2, r3
 800d360:	d007      	beq.n	800d372 <xTaskCheckForTimeOut+0x7e>
 800d362:	687b      	ldr	r3, [r7, #4]
 800d364:	685b      	ldr	r3, [r3, #4]
 800d366:	69ba      	ldr	r2, [r7, #24]
 800d368:	429a      	cmp	r2, r3
 800d36a:	d302      	bcc.n	800d372 <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800d36c:	2301      	movs	r3, #1
 800d36e:	61fb      	str	r3, [r7, #28]
 800d370:	e015      	b.n	800d39e <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800d372:	683b      	ldr	r3, [r7, #0]
 800d374:	681b      	ldr	r3, [r3, #0]
 800d376:	697a      	ldr	r2, [r7, #20]
 800d378:	429a      	cmp	r2, r3
 800d37a:	d20b      	bcs.n	800d394 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800d37c:	683b      	ldr	r3, [r7, #0]
 800d37e:	681a      	ldr	r2, [r3, #0]
 800d380:	697b      	ldr	r3, [r7, #20]
 800d382:	1ad2      	subs	r2, r2, r3
 800d384:	683b      	ldr	r3, [r7, #0]
 800d386:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800d388:	6878      	ldr	r0, [r7, #4]
 800d38a:	f7ff ff9d 	bl	800d2c8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800d38e:	2300      	movs	r3, #0
 800d390:	61fb      	str	r3, [r7, #28]
 800d392:	e004      	b.n	800d39e <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 800d394:	683b      	ldr	r3, [r7, #0]
 800d396:	2200      	movs	r2, #0
 800d398:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800d39a:	2301      	movs	r3, #1
 800d39c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800d39e:	f000 fc83 	bl	800dca8 <vPortExitCritical>

	return xReturn;
 800d3a2:	69fb      	ldr	r3, [r7, #28]
}
 800d3a4:	4618      	mov	r0, r3
 800d3a6:	3720      	adds	r7, #32
 800d3a8:	46bd      	mov	sp, r7
 800d3aa:	bd80      	pop	{r7, pc}
 800d3ac:	2000056c 	.word	0x2000056c
 800d3b0:	20000580 	.word	0x20000580

0800d3b4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800d3b4:	b480      	push	{r7}
 800d3b6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800d3b8:	4b03      	ldr	r3, [pc, #12]	; (800d3c8 <vTaskMissedYield+0x14>)
 800d3ba:	2201      	movs	r2, #1
 800d3bc:	601a      	str	r2, [r3, #0]
}
 800d3be:	bf00      	nop
 800d3c0:	46bd      	mov	sp, r7
 800d3c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3c6:	4770      	bx	lr
 800d3c8:	2000057c 	.word	0x2000057c

0800d3cc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800d3cc:	b580      	push	{r7, lr}
 800d3ce:	b082      	sub	sp, #8
 800d3d0:	af00      	add	r7, sp, #0
 800d3d2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800d3d4:	f000 f852 	bl	800d47c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800d3d8:	4b06      	ldr	r3, [pc, #24]	; (800d3f4 <prvIdleTask+0x28>)
 800d3da:	681b      	ldr	r3, [r3, #0]
 800d3dc:	2b01      	cmp	r3, #1
 800d3de:	d9f9      	bls.n	800d3d4 <prvIdleTask+0x8>
			{
				taskYIELD();
 800d3e0:	4b05      	ldr	r3, [pc, #20]	; (800d3f8 <prvIdleTask+0x2c>)
 800d3e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d3e6:	601a      	str	r2, [r3, #0]
 800d3e8:	f3bf 8f4f 	dsb	sy
 800d3ec:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800d3f0:	e7f0      	b.n	800d3d4 <prvIdleTask+0x8>
 800d3f2:	bf00      	nop
 800d3f4:	2000046c 	.word	0x2000046c
 800d3f8:	e000ed04 	.word	0xe000ed04

0800d3fc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800d3fc:	b580      	push	{r7, lr}
 800d3fe:	b082      	sub	sp, #8
 800d400:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800d402:	2300      	movs	r3, #0
 800d404:	607b      	str	r3, [r7, #4]
 800d406:	e00c      	b.n	800d422 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800d408:	687a      	ldr	r2, [r7, #4]
 800d40a:	4613      	mov	r3, r2
 800d40c:	009b      	lsls	r3, r3, #2
 800d40e:	4413      	add	r3, r2
 800d410:	009b      	lsls	r3, r3, #2
 800d412:	4a12      	ldr	r2, [pc, #72]	; (800d45c <prvInitialiseTaskLists+0x60>)
 800d414:	4413      	add	r3, r2
 800d416:	4618      	mov	r0, r3
 800d418:	f7fe fa77 	bl	800b90a <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800d41c:	687b      	ldr	r3, [r7, #4]
 800d41e:	3301      	adds	r3, #1
 800d420:	607b      	str	r3, [r7, #4]
 800d422:	687b      	ldr	r3, [r7, #4]
 800d424:	2b06      	cmp	r3, #6
 800d426:	d9ef      	bls.n	800d408 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800d428:	480d      	ldr	r0, [pc, #52]	; (800d460 <prvInitialiseTaskLists+0x64>)
 800d42a:	f7fe fa6e 	bl	800b90a <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800d42e:	480d      	ldr	r0, [pc, #52]	; (800d464 <prvInitialiseTaskLists+0x68>)
 800d430:	f7fe fa6b 	bl	800b90a <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800d434:	480c      	ldr	r0, [pc, #48]	; (800d468 <prvInitialiseTaskLists+0x6c>)
 800d436:	f7fe fa68 	bl	800b90a <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800d43a:	480c      	ldr	r0, [pc, #48]	; (800d46c <prvInitialiseTaskLists+0x70>)
 800d43c:	f7fe fa65 	bl	800b90a <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800d440:	480b      	ldr	r0, [pc, #44]	; (800d470 <prvInitialiseTaskLists+0x74>)
 800d442:	f7fe fa62 	bl	800b90a <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800d446:	4b0b      	ldr	r3, [pc, #44]	; (800d474 <prvInitialiseTaskLists+0x78>)
 800d448:	4a05      	ldr	r2, [pc, #20]	; (800d460 <prvInitialiseTaskLists+0x64>)
 800d44a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800d44c:	4b0a      	ldr	r3, [pc, #40]	; (800d478 <prvInitialiseTaskLists+0x7c>)
 800d44e:	4a05      	ldr	r2, [pc, #20]	; (800d464 <prvInitialiseTaskLists+0x68>)
 800d450:	601a      	str	r2, [r3, #0]
}
 800d452:	bf00      	nop
 800d454:	3708      	adds	r7, #8
 800d456:	46bd      	mov	sp, r7
 800d458:	bd80      	pop	{r7, pc}
 800d45a:	bf00      	nop
 800d45c:	2000046c 	.word	0x2000046c
 800d460:	200004f8 	.word	0x200004f8
 800d464:	2000050c 	.word	0x2000050c
 800d468:	20000528 	.word	0x20000528
 800d46c:	2000053c 	.word	0x2000053c
 800d470:	20000554 	.word	0x20000554
 800d474:	20000520 	.word	0x20000520
 800d478:	20000524 	.word	0x20000524

0800d47c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800d47c:	b580      	push	{r7, lr}
 800d47e:	b082      	sub	sp, #8
 800d480:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800d482:	e019      	b.n	800d4b8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800d484:	f000 fbe2 	bl	800dc4c <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 800d488:	4b0f      	ldr	r3, [pc, #60]	; (800d4c8 <prvCheckTasksWaitingTermination+0x4c>)
 800d48a:	68db      	ldr	r3, [r3, #12]
 800d48c:	68db      	ldr	r3, [r3, #12]
 800d48e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d490:	687b      	ldr	r3, [r7, #4]
 800d492:	3304      	adds	r3, #4
 800d494:	4618      	mov	r0, r3
 800d496:	f7fe fac2 	bl	800ba1e <uxListRemove>
				--uxCurrentNumberOfTasks;
 800d49a:	4b0c      	ldr	r3, [pc, #48]	; (800d4cc <prvCheckTasksWaitingTermination+0x50>)
 800d49c:	681b      	ldr	r3, [r3, #0]
 800d49e:	3b01      	subs	r3, #1
 800d4a0:	4a0a      	ldr	r2, [pc, #40]	; (800d4cc <prvCheckTasksWaitingTermination+0x50>)
 800d4a2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800d4a4:	4b0a      	ldr	r3, [pc, #40]	; (800d4d0 <prvCheckTasksWaitingTermination+0x54>)
 800d4a6:	681b      	ldr	r3, [r3, #0]
 800d4a8:	3b01      	subs	r3, #1
 800d4aa:	4a09      	ldr	r2, [pc, #36]	; (800d4d0 <prvCheckTasksWaitingTermination+0x54>)
 800d4ac:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800d4ae:	f000 fbfb 	bl	800dca8 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800d4b2:	6878      	ldr	r0, [r7, #4]
 800d4b4:	f000 f80e 	bl	800d4d4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800d4b8:	4b05      	ldr	r3, [pc, #20]	; (800d4d0 <prvCheckTasksWaitingTermination+0x54>)
 800d4ba:	681b      	ldr	r3, [r3, #0]
 800d4bc:	2b00      	cmp	r3, #0
 800d4be:	d1e1      	bne.n	800d484 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800d4c0:	bf00      	nop
 800d4c2:	3708      	adds	r7, #8
 800d4c4:	46bd      	mov	sp, r7
 800d4c6:	bd80      	pop	{r7, pc}
 800d4c8:	2000053c 	.word	0x2000053c
 800d4cc:	20000568 	.word	0x20000568
 800d4d0:	20000550 	.word	0x20000550

0800d4d4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800d4d4:	b580      	push	{r7, lr}
 800d4d6:	b084      	sub	sp, #16
 800d4d8:	af00      	add	r7, sp, #0
 800d4da:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800d4dc:	687b      	ldr	r3, [r7, #4]
 800d4de:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800d4e2:	2b00      	cmp	r3, #0
 800d4e4:	d108      	bne.n	800d4f8 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800d4e6:	687b      	ldr	r3, [r7, #4]
 800d4e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d4ea:	4618      	mov	r0, r3
 800d4ec:	f000 fd8a 	bl	800e004 <vPortFree>
				vPortFree( pxTCB );
 800d4f0:	6878      	ldr	r0, [r7, #4]
 800d4f2:	f000 fd87 	bl	800e004 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800d4f6:	e017      	b.n	800d528 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800d4f8:	687b      	ldr	r3, [r7, #4]
 800d4fa:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800d4fe:	2b01      	cmp	r3, #1
 800d500:	d103      	bne.n	800d50a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800d502:	6878      	ldr	r0, [r7, #4]
 800d504:	f000 fd7e 	bl	800e004 <vPortFree>
	}
 800d508:	e00e      	b.n	800d528 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800d50a:	687b      	ldr	r3, [r7, #4]
 800d50c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800d510:	2b02      	cmp	r3, #2
 800d512:	d009      	beq.n	800d528 <prvDeleteTCB+0x54>
 800d514:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d518:	f383 8811 	msr	BASEPRI, r3
 800d51c:	f3bf 8f6f 	isb	sy
 800d520:	f3bf 8f4f 	dsb	sy
 800d524:	60fb      	str	r3, [r7, #12]
 800d526:	e7fe      	b.n	800d526 <prvDeleteTCB+0x52>
	}
 800d528:	bf00      	nop
 800d52a:	3710      	adds	r7, #16
 800d52c:	46bd      	mov	sp, r7
 800d52e:	bd80      	pop	{r7, pc}

0800d530 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800d530:	b480      	push	{r7}
 800d532:	b083      	sub	sp, #12
 800d534:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d536:	4b0f      	ldr	r3, [pc, #60]	; (800d574 <prvResetNextTaskUnblockTime+0x44>)
 800d538:	681b      	ldr	r3, [r3, #0]
 800d53a:	681b      	ldr	r3, [r3, #0]
 800d53c:	2b00      	cmp	r3, #0
 800d53e:	d101      	bne.n	800d544 <prvResetNextTaskUnblockTime+0x14>
 800d540:	2301      	movs	r3, #1
 800d542:	e000      	b.n	800d546 <prvResetNextTaskUnblockTime+0x16>
 800d544:	2300      	movs	r3, #0
 800d546:	2b00      	cmp	r3, #0
 800d548:	d004      	beq.n	800d554 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800d54a:	4b0b      	ldr	r3, [pc, #44]	; (800d578 <prvResetNextTaskUnblockTime+0x48>)
 800d54c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800d550:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800d552:	e008      	b.n	800d566 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800d554:	4b07      	ldr	r3, [pc, #28]	; (800d574 <prvResetNextTaskUnblockTime+0x44>)
 800d556:	681b      	ldr	r3, [r3, #0]
 800d558:	68db      	ldr	r3, [r3, #12]
 800d55a:	68db      	ldr	r3, [r3, #12]
 800d55c:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800d55e:	687b      	ldr	r3, [r7, #4]
 800d560:	685b      	ldr	r3, [r3, #4]
 800d562:	4a05      	ldr	r2, [pc, #20]	; (800d578 <prvResetNextTaskUnblockTime+0x48>)
 800d564:	6013      	str	r3, [r2, #0]
}
 800d566:	bf00      	nop
 800d568:	370c      	adds	r7, #12
 800d56a:	46bd      	mov	sp, r7
 800d56c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d570:	4770      	bx	lr
 800d572:	bf00      	nop
 800d574:	20000520 	.word	0x20000520
 800d578:	20000588 	.word	0x20000588

0800d57c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800d57c:	b480      	push	{r7}
 800d57e:	b083      	sub	sp, #12
 800d580:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800d582:	4b0b      	ldr	r3, [pc, #44]	; (800d5b0 <xTaskGetSchedulerState+0x34>)
 800d584:	681b      	ldr	r3, [r3, #0]
 800d586:	2b00      	cmp	r3, #0
 800d588:	d102      	bne.n	800d590 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800d58a:	2301      	movs	r3, #1
 800d58c:	607b      	str	r3, [r7, #4]
 800d58e:	e008      	b.n	800d5a2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d590:	4b08      	ldr	r3, [pc, #32]	; (800d5b4 <xTaskGetSchedulerState+0x38>)
 800d592:	681b      	ldr	r3, [r3, #0]
 800d594:	2b00      	cmp	r3, #0
 800d596:	d102      	bne.n	800d59e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800d598:	2302      	movs	r3, #2
 800d59a:	607b      	str	r3, [r7, #4]
 800d59c:	e001      	b.n	800d5a2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800d59e:	2300      	movs	r3, #0
 800d5a0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800d5a2:	687b      	ldr	r3, [r7, #4]
	}
 800d5a4:	4618      	mov	r0, r3
 800d5a6:	370c      	adds	r7, #12
 800d5a8:	46bd      	mov	sp, r7
 800d5aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5ae:	4770      	bx	lr
 800d5b0:	20000574 	.word	0x20000574
 800d5b4:	20000590 	.word	0x20000590

0800d5b8 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800d5b8:	b580      	push	{r7, lr}
 800d5ba:	b084      	sub	sp, #16
 800d5bc:	af00      	add	r7, sp, #0
 800d5be:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = ( TCB_t * ) pxMutexHolder;
 800d5c0:	687b      	ldr	r3, [r7, #4]
 800d5c2:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800d5c4:	2300      	movs	r3, #0
 800d5c6:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800d5c8:	687b      	ldr	r3, [r7, #4]
 800d5ca:	2b00      	cmp	r3, #0
 800d5cc:	d06e      	beq.n	800d6ac <xTaskPriorityInherit+0xf4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800d5ce:	68bb      	ldr	r3, [r7, #8]
 800d5d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d5d2:	4b39      	ldr	r3, [pc, #228]	; (800d6b8 <xTaskPriorityInherit+0x100>)
 800d5d4:	681b      	ldr	r3, [r3, #0]
 800d5d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d5d8:	429a      	cmp	r2, r3
 800d5da:	d25e      	bcs.n	800d69a <xTaskPriorityInherit+0xe2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800d5dc:	68bb      	ldr	r3, [r7, #8]
 800d5de:	699b      	ldr	r3, [r3, #24]
 800d5e0:	2b00      	cmp	r3, #0
 800d5e2:	db06      	blt.n	800d5f2 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d5e4:	4b34      	ldr	r3, [pc, #208]	; (800d6b8 <xTaskPriorityInherit+0x100>)
 800d5e6:	681b      	ldr	r3, [r3, #0]
 800d5e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d5ea:	f1c3 0207 	rsb	r2, r3, #7
 800d5ee:	68bb      	ldr	r3, [r7, #8]
 800d5f0:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800d5f2:	68bb      	ldr	r3, [r7, #8]
 800d5f4:	6959      	ldr	r1, [r3, #20]
 800d5f6:	68bb      	ldr	r3, [r7, #8]
 800d5f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d5fa:	4613      	mov	r3, r2
 800d5fc:	009b      	lsls	r3, r3, #2
 800d5fe:	4413      	add	r3, r2
 800d600:	009b      	lsls	r3, r3, #2
 800d602:	4a2e      	ldr	r2, [pc, #184]	; (800d6bc <xTaskPriorityInherit+0x104>)
 800d604:	4413      	add	r3, r2
 800d606:	4299      	cmp	r1, r3
 800d608:	d101      	bne.n	800d60e <xTaskPriorityInherit+0x56>
 800d60a:	2301      	movs	r3, #1
 800d60c:	e000      	b.n	800d610 <xTaskPriorityInherit+0x58>
 800d60e:	2300      	movs	r3, #0
 800d610:	2b00      	cmp	r3, #0
 800d612:	d03a      	beq.n	800d68a <xTaskPriorityInherit+0xd2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d614:	68bb      	ldr	r3, [r7, #8]
 800d616:	3304      	adds	r3, #4
 800d618:	4618      	mov	r0, r3
 800d61a:	f7fe fa00 	bl	800ba1e <uxListRemove>
 800d61e:	4603      	mov	r3, r0
 800d620:	2b00      	cmp	r3, #0
 800d622:	d115      	bne.n	800d650 <xTaskPriorityInherit+0x98>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 800d624:	68bb      	ldr	r3, [r7, #8]
 800d626:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d628:	4924      	ldr	r1, [pc, #144]	; (800d6bc <xTaskPriorityInherit+0x104>)
 800d62a:	4613      	mov	r3, r2
 800d62c:	009b      	lsls	r3, r3, #2
 800d62e:	4413      	add	r3, r2
 800d630:	009b      	lsls	r3, r3, #2
 800d632:	440b      	add	r3, r1
 800d634:	681b      	ldr	r3, [r3, #0]
 800d636:	2b00      	cmp	r3, #0
 800d638:	d10a      	bne.n	800d650 <xTaskPriorityInherit+0x98>
 800d63a:	68bb      	ldr	r3, [r7, #8]
 800d63c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d63e:	2201      	movs	r2, #1
 800d640:	fa02 f303 	lsl.w	r3, r2, r3
 800d644:	43da      	mvns	r2, r3
 800d646:	4b1e      	ldr	r3, [pc, #120]	; (800d6c0 <xTaskPriorityInherit+0x108>)
 800d648:	681b      	ldr	r3, [r3, #0]
 800d64a:	4013      	ands	r3, r2
 800d64c:	4a1c      	ldr	r2, [pc, #112]	; (800d6c0 <xTaskPriorityInherit+0x108>)
 800d64e:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800d650:	4b19      	ldr	r3, [pc, #100]	; (800d6b8 <xTaskPriorityInherit+0x100>)
 800d652:	681b      	ldr	r3, [r3, #0]
 800d654:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d656:	68bb      	ldr	r3, [r7, #8]
 800d658:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800d65a:	68bb      	ldr	r3, [r7, #8]
 800d65c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d65e:	2201      	movs	r2, #1
 800d660:	409a      	lsls	r2, r3
 800d662:	4b17      	ldr	r3, [pc, #92]	; (800d6c0 <xTaskPriorityInherit+0x108>)
 800d664:	681b      	ldr	r3, [r3, #0]
 800d666:	4313      	orrs	r3, r2
 800d668:	4a15      	ldr	r2, [pc, #84]	; (800d6c0 <xTaskPriorityInherit+0x108>)
 800d66a:	6013      	str	r3, [r2, #0]
 800d66c:	68bb      	ldr	r3, [r7, #8]
 800d66e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d670:	4613      	mov	r3, r2
 800d672:	009b      	lsls	r3, r3, #2
 800d674:	4413      	add	r3, r2
 800d676:	009b      	lsls	r3, r3, #2
 800d678:	4a10      	ldr	r2, [pc, #64]	; (800d6bc <xTaskPriorityInherit+0x104>)
 800d67a:	441a      	add	r2, r3
 800d67c:	68bb      	ldr	r3, [r7, #8]
 800d67e:	3304      	adds	r3, #4
 800d680:	4619      	mov	r1, r3
 800d682:	4610      	mov	r0, r2
 800d684:	f7fe f96e 	bl	800b964 <vListInsertEnd>
 800d688:	e004      	b.n	800d694 <xTaskPriorityInherit+0xdc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800d68a:	4b0b      	ldr	r3, [pc, #44]	; (800d6b8 <xTaskPriorityInherit+0x100>)
 800d68c:	681b      	ldr	r3, [r3, #0]
 800d68e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d690:	68bb      	ldr	r3, [r7, #8]
 800d692:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800d694:	2301      	movs	r3, #1
 800d696:	60fb      	str	r3, [r7, #12]
 800d698:	e008      	b.n	800d6ac <xTaskPriorityInherit+0xf4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800d69a:	68bb      	ldr	r3, [r7, #8]
 800d69c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d69e:	4b06      	ldr	r3, [pc, #24]	; (800d6b8 <xTaskPriorityInherit+0x100>)
 800d6a0:	681b      	ldr	r3, [r3, #0]
 800d6a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d6a4:	429a      	cmp	r2, r3
 800d6a6:	d201      	bcs.n	800d6ac <xTaskPriorityInherit+0xf4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800d6a8:	2301      	movs	r3, #1
 800d6aa:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800d6ac:	68fb      	ldr	r3, [r7, #12]
	}
 800d6ae:	4618      	mov	r0, r3
 800d6b0:	3710      	adds	r7, #16
 800d6b2:	46bd      	mov	sp, r7
 800d6b4:	bd80      	pop	{r7, pc}
 800d6b6:	bf00      	nop
 800d6b8:	20000468 	.word	0x20000468
 800d6bc:	2000046c 	.word	0x2000046c
 800d6c0:	20000570 	.word	0x20000570

0800d6c4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800d6c4:	b580      	push	{r7, lr}
 800d6c6:	b086      	sub	sp, #24
 800d6c8:	af00      	add	r7, sp, #0
 800d6ca:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 800d6cc:	687b      	ldr	r3, [r7, #4]
 800d6ce:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800d6d0:	2300      	movs	r3, #0
 800d6d2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800d6d4:	687b      	ldr	r3, [r7, #4]
 800d6d6:	2b00      	cmp	r3, #0
 800d6d8:	d06c      	beq.n	800d7b4 <xTaskPriorityDisinherit+0xf0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800d6da:	4b39      	ldr	r3, [pc, #228]	; (800d7c0 <xTaskPriorityDisinherit+0xfc>)
 800d6dc:	681b      	ldr	r3, [r3, #0]
 800d6de:	693a      	ldr	r2, [r7, #16]
 800d6e0:	429a      	cmp	r2, r3
 800d6e2:	d009      	beq.n	800d6f8 <xTaskPriorityDisinherit+0x34>
 800d6e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d6e8:	f383 8811 	msr	BASEPRI, r3
 800d6ec:	f3bf 8f6f 	isb	sy
 800d6f0:	f3bf 8f4f 	dsb	sy
 800d6f4:	60fb      	str	r3, [r7, #12]
 800d6f6:	e7fe      	b.n	800d6f6 <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 800d6f8:	693b      	ldr	r3, [r7, #16]
 800d6fa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d6fc:	2b00      	cmp	r3, #0
 800d6fe:	d109      	bne.n	800d714 <xTaskPriorityDisinherit+0x50>
 800d700:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d704:	f383 8811 	msr	BASEPRI, r3
 800d708:	f3bf 8f6f 	isb	sy
 800d70c:	f3bf 8f4f 	dsb	sy
 800d710:	60bb      	str	r3, [r7, #8]
 800d712:	e7fe      	b.n	800d712 <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 800d714:	693b      	ldr	r3, [r7, #16]
 800d716:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d718:	1e5a      	subs	r2, r3, #1
 800d71a:	693b      	ldr	r3, [r7, #16]
 800d71c:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800d71e:	693b      	ldr	r3, [r7, #16]
 800d720:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d722:	693b      	ldr	r3, [r7, #16]
 800d724:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d726:	429a      	cmp	r2, r3
 800d728:	d044      	beq.n	800d7b4 <xTaskPriorityDisinherit+0xf0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800d72a:	693b      	ldr	r3, [r7, #16]
 800d72c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d72e:	2b00      	cmp	r3, #0
 800d730:	d140      	bne.n	800d7b4 <xTaskPriorityDisinherit+0xf0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d732:	693b      	ldr	r3, [r7, #16]
 800d734:	3304      	adds	r3, #4
 800d736:	4618      	mov	r0, r3
 800d738:	f7fe f971 	bl	800ba1e <uxListRemove>
 800d73c:	4603      	mov	r3, r0
 800d73e:	2b00      	cmp	r3, #0
 800d740:	d115      	bne.n	800d76e <xTaskPriorityDisinherit+0xaa>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800d742:	693b      	ldr	r3, [r7, #16]
 800d744:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d746:	491f      	ldr	r1, [pc, #124]	; (800d7c4 <xTaskPriorityDisinherit+0x100>)
 800d748:	4613      	mov	r3, r2
 800d74a:	009b      	lsls	r3, r3, #2
 800d74c:	4413      	add	r3, r2
 800d74e:	009b      	lsls	r3, r3, #2
 800d750:	440b      	add	r3, r1
 800d752:	681b      	ldr	r3, [r3, #0]
 800d754:	2b00      	cmp	r3, #0
 800d756:	d10a      	bne.n	800d76e <xTaskPriorityDisinherit+0xaa>
 800d758:	693b      	ldr	r3, [r7, #16]
 800d75a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d75c:	2201      	movs	r2, #1
 800d75e:	fa02 f303 	lsl.w	r3, r2, r3
 800d762:	43da      	mvns	r2, r3
 800d764:	4b18      	ldr	r3, [pc, #96]	; (800d7c8 <xTaskPriorityDisinherit+0x104>)
 800d766:	681b      	ldr	r3, [r3, #0]
 800d768:	4013      	ands	r3, r2
 800d76a:	4a17      	ldr	r2, [pc, #92]	; (800d7c8 <xTaskPriorityDisinherit+0x104>)
 800d76c:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800d76e:	693b      	ldr	r3, [r7, #16]
 800d770:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d772:	693b      	ldr	r3, [r7, #16]
 800d774:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d776:	693b      	ldr	r3, [r7, #16]
 800d778:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d77a:	f1c3 0207 	rsb	r2, r3, #7
 800d77e:	693b      	ldr	r3, [r7, #16]
 800d780:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800d782:	693b      	ldr	r3, [r7, #16]
 800d784:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d786:	2201      	movs	r2, #1
 800d788:	409a      	lsls	r2, r3
 800d78a:	4b0f      	ldr	r3, [pc, #60]	; (800d7c8 <xTaskPriorityDisinherit+0x104>)
 800d78c:	681b      	ldr	r3, [r3, #0]
 800d78e:	4313      	orrs	r3, r2
 800d790:	4a0d      	ldr	r2, [pc, #52]	; (800d7c8 <xTaskPriorityDisinherit+0x104>)
 800d792:	6013      	str	r3, [r2, #0]
 800d794:	693b      	ldr	r3, [r7, #16]
 800d796:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d798:	4613      	mov	r3, r2
 800d79a:	009b      	lsls	r3, r3, #2
 800d79c:	4413      	add	r3, r2
 800d79e:	009b      	lsls	r3, r3, #2
 800d7a0:	4a08      	ldr	r2, [pc, #32]	; (800d7c4 <xTaskPriorityDisinherit+0x100>)
 800d7a2:	441a      	add	r2, r3
 800d7a4:	693b      	ldr	r3, [r7, #16]
 800d7a6:	3304      	adds	r3, #4
 800d7a8:	4619      	mov	r1, r3
 800d7aa:	4610      	mov	r0, r2
 800d7ac:	f7fe f8da 	bl	800b964 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800d7b0:	2301      	movs	r3, #1
 800d7b2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800d7b4:	697b      	ldr	r3, [r7, #20]
	}
 800d7b6:	4618      	mov	r0, r3
 800d7b8:	3718      	adds	r7, #24
 800d7ba:	46bd      	mov	sp, r7
 800d7bc:	bd80      	pop	{r7, pc}
 800d7be:	bf00      	nop
 800d7c0:	20000468 	.word	0x20000468
 800d7c4:	2000046c 	.word	0x2000046c
 800d7c8:	20000570 	.word	0x20000570

0800d7cc <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800d7cc:	b580      	push	{r7, lr}
 800d7ce:	b088      	sub	sp, #32
 800d7d0:	af00      	add	r7, sp, #0
 800d7d2:	6078      	str	r0, [r7, #4]
 800d7d4:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 800d7d6:	687b      	ldr	r3, [r7, #4]
 800d7d8:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800d7da:	2301      	movs	r3, #1
 800d7dc:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800d7de:	687b      	ldr	r3, [r7, #4]
 800d7e0:	2b00      	cmp	r3, #0
 800d7e2:	f000 8086 	beq.w	800d8f2 <vTaskPriorityDisinheritAfterTimeout+0x126>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800d7e6:	69bb      	ldr	r3, [r7, #24]
 800d7e8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d7ea:	2b00      	cmp	r3, #0
 800d7ec:	d109      	bne.n	800d802 <vTaskPriorityDisinheritAfterTimeout+0x36>
 800d7ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d7f2:	f383 8811 	msr	BASEPRI, r3
 800d7f6:	f3bf 8f6f 	isb	sy
 800d7fa:	f3bf 8f4f 	dsb	sy
 800d7fe:	60fb      	str	r3, [r7, #12]
 800d800:	e7fe      	b.n	800d800 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800d802:	69bb      	ldr	r3, [r7, #24]
 800d804:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d806:	683a      	ldr	r2, [r7, #0]
 800d808:	429a      	cmp	r2, r3
 800d80a:	d902      	bls.n	800d812 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800d80c:	683b      	ldr	r3, [r7, #0]
 800d80e:	61fb      	str	r3, [r7, #28]
 800d810:	e002      	b.n	800d818 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800d812:	69bb      	ldr	r3, [r7, #24]
 800d814:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d816:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800d818:	69bb      	ldr	r3, [r7, #24]
 800d81a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d81c:	69fa      	ldr	r2, [r7, #28]
 800d81e:	429a      	cmp	r2, r3
 800d820:	d067      	beq.n	800d8f2 <vTaskPriorityDisinheritAfterTimeout+0x126>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800d822:	69bb      	ldr	r3, [r7, #24]
 800d824:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d826:	697a      	ldr	r2, [r7, #20]
 800d828:	429a      	cmp	r2, r3
 800d82a:	d162      	bne.n	800d8f2 <vTaskPriorityDisinheritAfterTimeout+0x126>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800d82c:	4b33      	ldr	r3, [pc, #204]	; (800d8fc <vTaskPriorityDisinheritAfterTimeout+0x130>)
 800d82e:	681b      	ldr	r3, [r3, #0]
 800d830:	69ba      	ldr	r2, [r7, #24]
 800d832:	429a      	cmp	r2, r3
 800d834:	d109      	bne.n	800d84a <vTaskPriorityDisinheritAfterTimeout+0x7e>
 800d836:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d83a:	f383 8811 	msr	BASEPRI, r3
 800d83e:	f3bf 8f6f 	isb	sy
 800d842:	f3bf 8f4f 	dsb	sy
 800d846:	60bb      	str	r3, [r7, #8]
 800d848:	e7fe      	b.n	800d848 <vTaskPriorityDisinheritAfterTimeout+0x7c>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800d84a:	69bb      	ldr	r3, [r7, #24]
 800d84c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d84e:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800d850:	69bb      	ldr	r3, [r7, #24]
 800d852:	69fa      	ldr	r2, [r7, #28]
 800d854:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800d856:	69bb      	ldr	r3, [r7, #24]
 800d858:	699b      	ldr	r3, [r3, #24]
 800d85a:	2b00      	cmp	r3, #0
 800d85c:	db04      	blt.n	800d868 <vTaskPriorityDisinheritAfterTimeout+0x9c>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d85e:	69fb      	ldr	r3, [r7, #28]
 800d860:	f1c3 0207 	rsb	r2, r3, #7
 800d864:	69bb      	ldr	r3, [r7, #24]
 800d866:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800d868:	69bb      	ldr	r3, [r7, #24]
 800d86a:	6959      	ldr	r1, [r3, #20]
 800d86c:	693a      	ldr	r2, [r7, #16]
 800d86e:	4613      	mov	r3, r2
 800d870:	009b      	lsls	r3, r3, #2
 800d872:	4413      	add	r3, r2
 800d874:	009b      	lsls	r3, r3, #2
 800d876:	4a22      	ldr	r2, [pc, #136]	; (800d900 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 800d878:	4413      	add	r3, r2
 800d87a:	4299      	cmp	r1, r3
 800d87c:	d101      	bne.n	800d882 <vTaskPriorityDisinheritAfterTimeout+0xb6>
 800d87e:	2301      	movs	r3, #1
 800d880:	e000      	b.n	800d884 <vTaskPriorityDisinheritAfterTimeout+0xb8>
 800d882:	2300      	movs	r3, #0
 800d884:	2b00      	cmp	r3, #0
 800d886:	d034      	beq.n	800d8f2 <vTaskPriorityDisinheritAfterTimeout+0x126>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d888:	69bb      	ldr	r3, [r7, #24]
 800d88a:	3304      	adds	r3, #4
 800d88c:	4618      	mov	r0, r3
 800d88e:	f7fe f8c6 	bl	800ba1e <uxListRemove>
 800d892:	4603      	mov	r3, r0
 800d894:	2b00      	cmp	r3, #0
 800d896:	d115      	bne.n	800d8c4 <vTaskPriorityDisinheritAfterTimeout+0xf8>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800d898:	69bb      	ldr	r3, [r7, #24]
 800d89a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d89c:	4918      	ldr	r1, [pc, #96]	; (800d900 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 800d89e:	4613      	mov	r3, r2
 800d8a0:	009b      	lsls	r3, r3, #2
 800d8a2:	4413      	add	r3, r2
 800d8a4:	009b      	lsls	r3, r3, #2
 800d8a6:	440b      	add	r3, r1
 800d8a8:	681b      	ldr	r3, [r3, #0]
 800d8aa:	2b00      	cmp	r3, #0
 800d8ac:	d10a      	bne.n	800d8c4 <vTaskPriorityDisinheritAfterTimeout+0xf8>
 800d8ae:	69bb      	ldr	r3, [r7, #24]
 800d8b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d8b2:	2201      	movs	r2, #1
 800d8b4:	fa02 f303 	lsl.w	r3, r2, r3
 800d8b8:	43da      	mvns	r2, r3
 800d8ba:	4b12      	ldr	r3, [pc, #72]	; (800d904 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 800d8bc:	681b      	ldr	r3, [r3, #0]
 800d8be:	4013      	ands	r3, r2
 800d8c0:	4a10      	ldr	r2, [pc, #64]	; (800d904 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 800d8c2:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800d8c4:	69bb      	ldr	r3, [r7, #24]
 800d8c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d8c8:	2201      	movs	r2, #1
 800d8ca:	409a      	lsls	r2, r3
 800d8cc:	4b0d      	ldr	r3, [pc, #52]	; (800d904 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 800d8ce:	681b      	ldr	r3, [r3, #0]
 800d8d0:	4313      	orrs	r3, r2
 800d8d2:	4a0c      	ldr	r2, [pc, #48]	; (800d904 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 800d8d4:	6013      	str	r3, [r2, #0]
 800d8d6:	69bb      	ldr	r3, [r7, #24]
 800d8d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d8da:	4613      	mov	r3, r2
 800d8dc:	009b      	lsls	r3, r3, #2
 800d8de:	4413      	add	r3, r2
 800d8e0:	009b      	lsls	r3, r3, #2
 800d8e2:	4a07      	ldr	r2, [pc, #28]	; (800d900 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 800d8e4:	441a      	add	r2, r3
 800d8e6:	69bb      	ldr	r3, [r7, #24]
 800d8e8:	3304      	adds	r3, #4
 800d8ea:	4619      	mov	r1, r3
 800d8ec:	4610      	mov	r0, r2
 800d8ee:	f7fe f839 	bl	800b964 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800d8f2:	bf00      	nop
 800d8f4:	3720      	adds	r7, #32
 800d8f6:	46bd      	mov	sp, r7
 800d8f8:	bd80      	pop	{r7, pc}
 800d8fa:	bf00      	nop
 800d8fc:	20000468 	.word	0x20000468
 800d900:	2000046c 	.word	0x2000046c
 800d904:	20000570 	.word	0x20000570

0800d908 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
 800d908:	b480      	push	{r7}
 800d90a:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800d90c:	4b07      	ldr	r3, [pc, #28]	; (800d92c <pvTaskIncrementMutexHeldCount+0x24>)
 800d90e:	681b      	ldr	r3, [r3, #0]
 800d910:	2b00      	cmp	r3, #0
 800d912:	d004      	beq.n	800d91e <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800d914:	4b05      	ldr	r3, [pc, #20]	; (800d92c <pvTaskIncrementMutexHeldCount+0x24>)
 800d916:	681b      	ldr	r3, [r3, #0]
 800d918:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800d91a:	3201      	adds	r2, #1
 800d91c:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 800d91e:	4b03      	ldr	r3, [pc, #12]	; (800d92c <pvTaskIncrementMutexHeldCount+0x24>)
 800d920:	681b      	ldr	r3, [r3, #0]
	}
 800d922:	4618      	mov	r0, r3
 800d924:	46bd      	mov	sp, r7
 800d926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d92a:	4770      	bx	lr
 800d92c:	20000468 	.word	0x20000468

0800d930 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800d930:	b580      	push	{r7, lr}
 800d932:	b084      	sub	sp, #16
 800d934:	af00      	add	r7, sp, #0
 800d936:	6078      	str	r0, [r7, #4]
 800d938:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800d93a:	4b29      	ldr	r3, [pc, #164]	; (800d9e0 <prvAddCurrentTaskToDelayedList+0xb0>)
 800d93c:	681b      	ldr	r3, [r3, #0]
 800d93e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d940:	4b28      	ldr	r3, [pc, #160]	; (800d9e4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800d942:	681b      	ldr	r3, [r3, #0]
 800d944:	3304      	adds	r3, #4
 800d946:	4618      	mov	r0, r3
 800d948:	f7fe f869 	bl	800ba1e <uxListRemove>
 800d94c:	4603      	mov	r3, r0
 800d94e:	2b00      	cmp	r3, #0
 800d950:	d10b      	bne.n	800d96a <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 800d952:	4b24      	ldr	r3, [pc, #144]	; (800d9e4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800d954:	681b      	ldr	r3, [r3, #0]
 800d956:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d958:	2201      	movs	r2, #1
 800d95a:	fa02 f303 	lsl.w	r3, r2, r3
 800d95e:	43da      	mvns	r2, r3
 800d960:	4b21      	ldr	r3, [pc, #132]	; (800d9e8 <prvAddCurrentTaskToDelayedList+0xb8>)
 800d962:	681b      	ldr	r3, [r3, #0]
 800d964:	4013      	ands	r3, r2
 800d966:	4a20      	ldr	r2, [pc, #128]	; (800d9e8 <prvAddCurrentTaskToDelayedList+0xb8>)
 800d968:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800d96a:	687b      	ldr	r3, [r7, #4]
 800d96c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d970:	d10a      	bne.n	800d988 <prvAddCurrentTaskToDelayedList+0x58>
 800d972:	683b      	ldr	r3, [r7, #0]
 800d974:	2b00      	cmp	r3, #0
 800d976:	d007      	beq.n	800d988 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d978:	4b1a      	ldr	r3, [pc, #104]	; (800d9e4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800d97a:	681b      	ldr	r3, [r3, #0]
 800d97c:	3304      	adds	r3, #4
 800d97e:	4619      	mov	r1, r3
 800d980:	481a      	ldr	r0, [pc, #104]	; (800d9ec <prvAddCurrentTaskToDelayedList+0xbc>)
 800d982:	f7fd ffef 	bl	800b964 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800d986:	e026      	b.n	800d9d6 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800d988:	68fa      	ldr	r2, [r7, #12]
 800d98a:	687b      	ldr	r3, [r7, #4]
 800d98c:	4413      	add	r3, r2
 800d98e:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800d990:	4b14      	ldr	r3, [pc, #80]	; (800d9e4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800d992:	681b      	ldr	r3, [r3, #0]
 800d994:	68ba      	ldr	r2, [r7, #8]
 800d996:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800d998:	68ba      	ldr	r2, [r7, #8]
 800d99a:	68fb      	ldr	r3, [r7, #12]
 800d99c:	429a      	cmp	r2, r3
 800d99e:	d209      	bcs.n	800d9b4 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d9a0:	4b13      	ldr	r3, [pc, #76]	; (800d9f0 <prvAddCurrentTaskToDelayedList+0xc0>)
 800d9a2:	681a      	ldr	r2, [r3, #0]
 800d9a4:	4b0f      	ldr	r3, [pc, #60]	; (800d9e4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800d9a6:	681b      	ldr	r3, [r3, #0]
 800d9a8:	3304      	adds	r3, #4
 800d9aa:	4619      	mov	r1, r3
 800d9ac:	4610      	mov	r0, r2
 800d9ae:	f7fd fffd 	bl	800b9ac <vListInsert>
}
 800d9b2:	e010      	b.n	800d9d6 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d9b4:	4b0f      	ldr	r3, [pc, #60]	; (800d9f4 <prvAddCurrentTaskToDelayedList+0xc4>)
 800d9b6:	681a      	ldr	r2, [r3, #0]
 800d9b8:	4b0a      	ldr	r3, [pc, #40]	; (800d9e4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800d9ba:	681b      	ldr	r3, [r3, #0]
 800d9bc:	3304      	adds	r3, #4
 800d9be:	4619      	mov	r1, r3
 800d9c0:	4610      	mov	r0, r2
 800d9c2:	f7fd fff3 	bl	800b9ac <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800d9c6:	4b0c      	ldr	r3, [pc, #48]	; (800d9f8 <prvAddCurrentTaskToDelayedList+0xc8>)
 800d9c8:	681b      	ldr	r3, [r3, #0]
 800d9ca:	68ba      	ldr	r2, [r7, #8]
 800d9cc:	429a      	cmp	r2, r3
 800d9ce:	d202      	bcs.n	800d9d6 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800d9d0:	4a09      	ldr	r2, [pc, #36]	; (800d9f8 <prvAddCurrentTaskToDelayedList+0xc8>)
 800d9d2:	68bb      	ldr	r3, [r7, #8]
 800d9d4:	6013      	str	r3, [r2, #0]
}
 800d9d6:	bf00      	nop
 800d9d8:	3710      	adds	r7, #16
 800d9da:	46bd      	mov	sp, r7
 800d9dc:	bd80      	pop	{r7, pc}
 800d9de:	bf00      	nop
 800d9e0:	2000056c 	.word	0x2000056c
 800d9e4:	20000468 	.word	0x20000468
 800d9e8:	20000570 	.word	0x20000570
 800d9ec:	20000554 	.word	0x20000554
 800d9f0:	20000524 	.word	0x20000524
 800d9f4:	20000520 	.word	0x20000520
 800d9f8:	20000588 	.word	0x20000588

0800d9fc <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800d9fc:	b480      	push	{r7}
 800d9fe:	b085      	sub	sp, #20
 800da00:	af00      	add	r7, sp, #0
 800da02:	60f8      	str	r0, [r7, #12]
 800da04:	60b9      	str	r1, [r7, #8]
 800da06:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800da08:	68fb      	ldr	r3, [r7, #12]
 800da0a:	3b04      	subs	r3, #4
 800da0c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800da0e:	68fb      	ldr	r3, [r7, #12]
 800da10:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800da14:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800da16:	68fb      	ldr	r3, [r7, #12]
 800da18:	3b04      	subs	r3, #4
 800da1a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800da1c:	68bb      	ldr	r3, [r7, #8]
 800da1e:	f023 0201 	bic.w	r2, r3, #1
 800da22:	68fb      	ldr	r3, [r7, #12]
 800da24:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800da26:	68fb      	ldr	r3, [r7, #12]
 800da28:	3b04      	subs	r3, #4
 800da2a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800da2c:	4a0c      	ldr	r2, [pc, #48]	; (800da60 <pxPortInitialiseStack+0x64>)
 800da2e:	68fb      	ldr	r3, [r7, #12]
 800da30:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800da32:	68fb      	ldr	r3, [r7, #12]
 800da34:	3b14      	subs	r3, #20
 800da36:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800da38:	687a      	ldr	r2, [r7, #4]
 800da3a:	68fb      	ldr	r3, [r7, #12]
 800da3c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800da3e:	68fb      	ldr	r3, [r7, #12]
 800da40:	3b04      	subs	r3, #4
 800da42:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800da44:	68fb      	ldr	r3, [r7, #12]
 800da46:	f06f 0202 	mvn.w	r2, #2
 800da4a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800da4c:	68fb      	ldr	r3, [r7, #12]
 800da4e:	3b20      	subs	r3, #32
 800da50:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800da52:	68fb      	ldr	r3, [r7, #12]
}
 800da54:	4618      	mov	r0, r3
 800da56:	3714      	adds	r7, #20
 800da58:	46bd      	mov	sp, r7
 800da5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da5e:	4770      	bx	lr
 800da60:	0800da65 	.word	0x0800da65

0800da64 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800da64:	b480      	push	{r7}
 800da66:	b085      	sub	sp, #20
 800da68:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800da6a:	2300      	movs	r3, #0
 800da6c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800da6e:	4b11      	ldr	r3, [pc, #68]	; (800dab4 <prvTaskExitError+0x50>)
 800da70:	681b      	ldr	r3, [r3, #0]
 800da72:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800da76:	d009      	beq.n	800da8c <prvTaskExitError+0x28>
 800da78:	f04f 0350 	mov.w	r3, #80	; 0x50
 800da7c:	f383 8811 	msr	BASEPRI, r3
 800da80:	f3bf 8f6f 	isb	sy
 800da84:	f3bf 8f4f 	dsb	sy
 800da88:	60fb      	str	r3, [r7, #12]
 800da8a:	e7fe      	b.n	800da8a <prvTaskExitError+0x26>
 800da8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800da90:	f383 8811 	msr	BASEPRI, r3
 800da94:	f3bf 8f6f 	isb	sy
 800da98:	f3bf 8f4f 	dsb	sy
 800da9c:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800da9e:	bf00      	nop
 800daa0:	687b      	ldr	r3, [r7, #4]
 800daa2:	2b00      	cmp	r3, #0
 800daa4:	d0fc      	beq.n	800daa0 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800daa6:	bf00      	nop
 800daa8:	3714      	adds	r7, #20
 800daaa:	46bd      	mov	sp, r7
 800daac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dab0:	4770      	bx	lr
 800dab2:	bf00      	nop
 800dab4:	20000118 	.word	0x20000118
	...

0800dac0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800dac0:	4b07      	ldr	r3, [pc, #28]	; (800dae0 <pxCurrentTCBConst2>)
 800dac2:	6819      	ldr	r1, [r3, #0]
 800dac4:	6808      	ldr	r0, [r1, #0]
 800dac6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800daca:	f380 8809 	msr	PSP, r0
 800dace:	f3bf 8f6f 	isb	sy
 800dad2:	f04f 0000 	mov.w	r0, #0
 800dad6:	f380 8811 	msr	BASEPRI, r0
 800dada:	4770      	bx	lr
 800dadc:	f3af 8000 	nop.w

0800dae0 <pxCurrentTCBConst2>:
 800dae0:	20000468 	.word	0x20000468
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800dae4:	bf00      	nop
 800dae6:	bf00      	nop

0800dae8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800dae8:	4808      	ldr	r0, [pc, #32]	; (800db0c <prvPortStartFirstTask+0x24>)
 800daea:	6800      	ldr	r0, [r0, #0]
 800daec:	6800      	ldr	r0, [r0, #0]
 800daee:	f380 8808 	msr	MSP, r0
 800daf2:	f04f 0000 	mov.w	r0, #0
 800daf6:	f380 8814 	msr	CONTROL, r0
 800dafa:	b662      	cpsie	i
 800dafc:	b661      	cpsie	f
 800dafe:	f3bf 8f4f 	dsb	sy
 800db02:	f3bf 8f6f 	isb	sy
 800db06:	df00      	svc	0
 800db08:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800db0a:	bf00      	nop
 800db0c:	e000ed08 	.word	0xe000ed08

0800db10 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800db10:	b580      	push	{r7, lr}
 800db12:	b086      	sub	sp, #24
 800db14:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800db16:	4b44      	ldr	r3, [pc, #272]	; (800dc28 <xPortStartScheduler+0x118>)
 800db18:	681b      	ldr	r3, [r3, #0]
 800db1a:	4a44      	ldr	r2, [pc, #272]	; (800dc2c <xPortStartScheduler+0x11c>)
 800db1c:	4293      	cmp	r3, r2
 800db1e:	d109      	bne.n	800db34 <xPortStartScheduler+0x24>
 800db20:	f04f 0350 	mov.w	r3, #80	; 0x50
 800db24:	f383 8811 	msr	BASEPRI, r3
 800db28:	f3bf 8f6f 	isb	sy
 800db2c:	f3bf 8f4f 	dsb	sy
 800db30:	613b      	str	r3, [r7, #16]
 800db32:	e7fe      	b.n	800db32 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800db34:	4b3c      	ldr	r3, [pc, #240]	; (800dc28 <xPortStartScheduler+0x118>)
 800db36:	681b      	ldr	r3, [r3, #0]
 800db38:	4a3d      	ldr	r2, [pc, #244]	; (800dc30 <xPortStartScheduler+0x120>)
 800db3a:	4293      	cmp	r3, r2
 800db3c:	d109      	bne.n	800db52 <xPortStartScheduler+0x42>
 800db3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800db42:	f383 8811 	msr	BASEPRI, r3
 800db46:	f3bf 8f6f 	isb	sy
 800db4a:	f3bf 8f4f 	dsb	sy
 800db4e:	60fb      	str	r3, [r7, #12]
 800db50:	e7fe      	b.n	800db50 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800db52:	4b38      	ldr	r3, [pc, #224]	; (800dc34 <xPortStartScheduler+0x124>)
 800db54:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800db56:	697b      	ldr	r3, [r7, #20]
 800db58:	781b      	ldrb	r3, [r3, #0]
 800db5a:	b2db      	uxtb	r3, r3
 800db5c:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800db5e:	697b      	ldr	r3, [r7, #20]
 800db60:	22ff      	movs	r2, #255	; 0xff
 800db62:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800db64:	697b      	ldr	r3, [r7, #20]
 800db66:	781b      	ldrb	r3, [r3, #0]
 800db68:	b2db      	uxtb	r3, r3
 800db6a:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800db6c:	78fb      	ldrb	r3, [r7, #3]
 800db6e:	b2db      	uxtb	r3, r3
 800db70:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800db74:	b2da      	uxtb	r2, r3
 800db76:	4b30      	ldr	r3, [pc, #192]	; (800dc38 <xPortStartScheduler+0x128>)
 800db78:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800db7a:	4b30      	ldr	r3, [pc, #192]	; (800dc3c <xPortStartScheduler+0x12c>)
 800db7c:	2207      	movs	r2, #7
 800db7e:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800db80:	e009      	b.n	800db96 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 800db82:	4b2e      	ldr	r3, [pc, #184]	; (800dc3c <xPortStartScheduler+0x12c>)
 800db84:	681b      	ldr	r3, [r3, #0]
 800db86:	3b01      	subs	r3, #1
 800db88:	4a2c      	ldr	r2, [pc, #176]	; (800dc3c <xPortStartScheduler+0x12c>)
 800db8a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800db8c:	78fb      	ldrb	r3, [r7, #3]
 800db8e:	b2db      	uxtb	r3, r3
 800db90:	005b      	lsls	r3, r3, #1
 800db92:	b2db      	uxtb	r3, r3
 800db94:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800db96:	78fb      	ldrb	r3, [r7, #3]
 800db98:	b2db      	uxtb	r3, r3
 800db9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800db9e:	2b80      	cmp	r3, #128	; 0x80
 800dba0:	d0ef      	beq.n	800db82 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800dba2:	4b26      	ldr	r3, [pc, #152]	; (800dc3c <xPortStartScheduler+0x12c>)
 800dba4:	681b      	ldr	r3, [r3, #0]
 800dba6:	f1c3 0307 	rsb	r3, r3, #7
 800dbaa:	2b04      	cmp	r3, #4
 800dbac:	d009      	beq.n	800dbc2 <xPortStartScheduler+0xb2>
 800dbae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dbb2:	f383 8811 	msr	BASEPRI, r3
 800dbb6:	f3bf 8f6f 	isb	sy
 800dbba:	f3bf 8f4f 	dsb	sy
 800dbbe:	60bb      	str	r3, [r7, #8]
 800dbc0:	e7fe      	b.n	800dbc0 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800dbc2:	4b1e      	ldr	r3, [pc, #120]	; (800dc3c <xPortStartScheduler+0x12c>)
 800dbc4:	681b      	ldr	r3, [r3, #0]
 800dbc6:	021b      	lsls	r3, r3, #8
 800dbc8:	4a1c      	ldr	r2, [pc, #112]	; (800dc3c <xPortStartScheduler+0x12c>)
 800dbca:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800dbcc:	4b1b      	ldr	r3, [pc, #108]	; (800dc3c <xPortStartScheduler+0x12c>)
 800dbce:	681b      	ldr	r3, [r3, #0]
 800dbd0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800dbd4:	4a19      	ldr	r2, [pc, #100]	; (800dc3c <xPortStartScheduler+0x12c>)
 800dbd6:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800dbd8:	687b      	ldr	r3, [r7, #4]
 800dbda:	b2da      	uxtb	r2, r3
 800dbdc:	697b      	ldr	r3, [r7, #20]
 800dbde:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800dbe0:	4b17      	ldr	r3, [pc, #92]	; (800dc40 <xPortStartScheduler+0x130>)
 800dbe2:	681b      	ldr	r3, [r3, #0]
 800dbe4:	4a16      	ldr	r2, [pc, #88]	; (800dc40 <xPortStartScheduler+0x130>)
 800dbe6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800dbea:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800dbec:	4b14      	ldr	r3, [pc, #80]	; (800dc40 <xPortStartScheduler+0x130>)
 800dbee:	681b      	ldr	r3, [r3, #0]
 800dbf0:	4a13      	ldr	r2, [pc, #76]	; (800dc40 <xPortStartScheduler+0x130>)
 800dbf2:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800dbf6:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800dbf8:	f000 f8d6 	bl	800dda8 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800dbfc:	4b11      	ldr	r3, [pc, #68]	; (800dc44 <xPortStartScheduler+0x134>)
 800dbfe:	2200      	movs	r2, #0
 800dc00:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800dc02:	f000 f8f5 	bl	800ddf0 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800dc06:	4b10      	ldr	r3, [pc, #64]	; (800dc48 <xPortStartScheduler+0x138>)
 800dc08:	681b      	ldr	r3, [r3, #0]
 800dc0a:	4a0f      	ldr	r2, [pc, #60]	; (800dc48 <xPortStartScheduler+0x138>)
 800dc0c:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800dc10:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800dc12:	f7ff ff69 	bl	800dae8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800dc16:	f7ff fa77 	bl	800d108 <vTaskSwitchContext>
	prvTaskExitError();
 800dc1a:	f7ff ff23 	bl	800da64 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800dc1e:	2300      	movs	r3, #0
}
 800dc20:	4618      	mov	r0, r3
 800dc22:	3718      	adds	r7, #24
 800dc24:	46bd      	mov	sp, r7
 800dc26:	bd80      	pop	{r7, pc}
 800dc28:	e000ed00 	.word	0xe000ed00
 800dc2c:	410fc271 	.word	0x410fc271
 800dc30:	410fc270 	.word	0x410fc270
 800dc34:	e000e400 	.word	0xe000e400
 800dc38:	20000594 	.word	0x20000594
 800dc3c:	20000598 	.word	0x20000598
 800dc40:	e000ed20 	.word	0xe000ed20
 800dc44:	20000118 	.word	0x20000118
 800dc48:	e000ef34 	.word	0xe000ef34

0800dc4c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800dc4c:	b480      	push	{r7}
 800dc4e:	b083      	sub	sp, #12
 800dc50:	af00      	add	r7, sp, #0
 800dc52:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dc56:	f383 8811 	msr	BASEPRI, r3
 800dc5a:	f3bf 8f6f 	isb	sy
 800dc5e:	f3bf 8f4f 	dsb	sy
 800dc62:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800dc64:	4b0e      	ldr	r3, [pc, #56]	; (800dca0 <vPortEnterCritical+0x54>)
 800dc66:	681b      	ldr	r3, [r3, #0]
 800dc68:	3301      	adds	r3, #1
 800dc6a:	4a0d      	ldr	r2, [pc, #52]	; (800dca0 <vPortEnterCritical+0x54>)
 800dc6c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800dc6e:	4b0c      	ldr	r3, [pc, #48]	; (800dca0 <vPortEnterCritical+0x54>)
 800dc70:	681b      	ldr	r3, [r3, #0]
 800dc72:	2b01      	cmp	r3, #1
 800dc74:	d10e      	bne.n	800dc94 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800dc76:	4b0b      	ldr	r3, [pc, #44]	; (800dca4 <vPortEnterCritical+0x58>)
 800dc78:	681b      	ldr	r3, [r3, #0]
 800dc7a:	b2db      	uxtb	r3, r3
 800dc7c:	2b00      	cmp	r3, #0
 800dc7e:	d009      	beq.n	800dc94 <vPortEnterCritical+0x48>
 800dc80:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dc84:	f383 8811 	msr	BASEPRI, r3
 800dc88:	f3bf 8f6f 	isb	sy
 800dc8c:	f3bf 8f4f 	dsb	sy
 800dc90:	603b      	str	r3, [r7, #0]
 800dc92:	e7fe      	b.n	800dc92 <vPortEnterCritical+0x46>
	}
}
 800dc94:	bf00      	nop
 800dc96:	370c      	adds	r7, #12
 800dc98:	46bd      	mov	sp, r7
 800dc9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc9e:	4770      	bx	lr
 800dca0:	20000118 	.word	0x20000118
 800dca4:	e000ed04 	.word	0xe000ed04

0800dca8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800dca8:	b480      	push	{r7}
 800dcaa:	b083      	sub	sp, #12
 800dcac:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800dcae:	4b11      	ldr	r3, [pc, #68]	; (800dcf4 <vPortExitCritical+0x4c>)
 800dcb0:	681b      	ldr	r3, [r3, #0]
 800dcb2:	2b00      	cmp	r3, #0
 800dcb4:	d109      	bne.n	800dcca <vPortExitCritical+0x22>
 800dcb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dcba:	f383 8811 	msr	BASEPRI, r3
 800dcbe:	f3bf 8f6f 	isb	sy
 800dcc2:	f3bf 8f4f 	dsb	sy
 800dcc6:	607b      	str	r3, [r7, #4]
 800dcc8:	e7fe      	b.n	800dcc8 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 800dcca:	4b0a      	ldr	r3, [pc, #40]	; (800dcf4 <vPortExitCritical+0x4c>)
 800dccc:	681b      	ldr	r3, [r3, #0]
 800dcce:	3b01      	subs	r3, #1
 800dcd0:	4a08      	ldr	r2, [pc, #32]	; (800dcf4 <vPortExitCritical+0x4c>)
 800dcd2:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800dcd4:	4b07      	ldr	r3, [pc, #28]	; (800dcf4 <vPortExitCritical+0x4c>)
 800dcd6:	681b      	ldr	r3, [r3, #0]
 800dcd8:	2b00      	cmp	r3, #0
 800dcda:	d104      	bne.n	800dce6 <vPortExitCritical+0x3e>
 800dcdc:	2300      	movs	r3, #0
 800dcde:	603b      	str	r3, [r7, #0]
	__asm volatile
 800dce0:	683b      	ldr	r3, [r7, #0]
 800dce2:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 800dce6:	bf00      	nop
 800dce8:	370c      	adds	r7, #12
 800dcea:	46bd      	mov	sp, r7
 800dcec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcf0:	4770      	bx	lr
 800dcf2:	bf00      	nop
 800dcf4:	20000118 	.word	0x20000118
	...

0800dd00 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800dd00:	f3ef 8009 	mrs	r0, PSP
 800dd04:	f3bf 8f6f 	isb	sy
 800dd08:	4b15      	ldr	r3, [pc, #84]	; (800dd60 <pxCurrentTCBConst>)
 800dd0a:	681a      	ldr	r2, [r3, #0]
 800dd0c:	f01e 0f10 	tst.w	lr, #16
 800dd10:	bf08      	it	eq
 800dd12:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800dd16:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dd1a:	6010      	str	r0, [r2, #0]
 800dd1c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800dd20:	f04f 0050 	mov.w	r0, #80	; 0x50
 800dd24:	f380 8811 	msr	BASEPRI, r0
 800dd28:	f3bf 8f4f 	dsb	sy
 800dd2c:	f3bf 8f6f 	isb	sy
 800dd30:	f7ff f9ea 	bl	800d108 <vTaskSwitchContext>
 800dd34:	f04f 0000 	mov.w	r0, #0
 800dd38:	f380 8811 	msr	BASEPRI, r0
 800dd3c:	bc09      	pop	{r0, r3}
 800dd3e:	6819      	ldr	r1, [r3, #0]
 800dd40:	6808      	ldr	r0, [r1, #0]
 800dd42:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dd46:	f01e 0f10 	tst.w	lr, #16
 800dd4a:	bf08      	it	eq
 800dd4c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800dd50:	f380 8809 	msr	PSP, r0
 800dd54:	f3bf 8f6f 	isb	sy
 800dd58:	4770      	bx	lr
 800dd5a:	bf00      	nop
 800dd5c:	f3af 8000 	nop.w

0800dd60 <pxCurrentTCBConst>:
 800dd60:	20000468 	.word	0x20000468
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800dd64:	bf00      	nop
 800dd66:	bf00      	nop

0800dd68 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800dd68:	b580      	push	{r7, lr}
 800dd6a:	b082      	sub	sp, #8
 800dd6c:	af00      	add	r7, sp, #0
	__asm volatile
 800dd6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dd72:	f383 8811 	msr	BASEPRI, r3
 800dd76:	f3bf 8f6f 	isb	sy
 800dd7a:	f3bf 8f4f 	dsb	sy
 800dd7e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800dd80:	f7ff f906 	bl	800cf90 <xTaskIncrementTick>
 800dd84:	4603      	mov	r3, r0
 800dd86:	2b00      	cmp	r3, #0
 800dd88:	d003      	beq.n	800dd92 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800dd8a:	4b06      	ldr	r3, [pc, #24]	; (800dda4 <SysTick_Handler+0x3c>)
 800dd8c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800dd90:	601a      	str	r2, [r3, #0]
 800dd92:	2300      	movs	r3, #0
 800dd94:	603b      	str	r3, [r7, #0]
	__asm volatile
 800dd96:	683b      	ldr	r3, [r7, #0]
 800dd98:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800dd9c:	bf00      	nop
 800dd9e:	3708      	adds	r7, #8
 800dda0:	46bd      	mov	sp, r7
 800dda2:	bd80      	pop	{r7, pc}
 800dda4:	e000ed04 	.word	0xe000ed04

0800dda8 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800dda8:	b480      	push	{r7}
 800ddaa:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800ddac:	4b0b      	ldr	r3, [pc, #44]	; (800dddc <vPortSetupTimerInterrupt+0x34>)
 800ddae:	2200      	movs	r2, #0
 800ddb0:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800ddb2:	4b0b      	ldr	r3, [pc, #44]	; (800dde0 <vPortSetupTimerInterrupt+0x38>)
 800ddb4:	2200      	movs	r2, #0
 800ddb6:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800ddb8:	4b0a      	ldr	r3, [pc, #40]	; (800dde4 <vPortSetupTimerInterrupt+0x3c>)
 800ddba:	681b      	ldr	r3, [r3, #0]
 800ddbc:	4a0a      	ldr	r2, [pc, #40]	; (800dde8 <vPortSetupTimerInterrupt+0x40>)
 800ddbe:	fba2 2303 	umull	r2, r3, r2, r3
 800ddc2:	099b      	lsrs	r3, r3, #6
 800ddc4:	4a09      	ldr	r2, [pc, #36]	; (800ddec <vPortSetupTimerInterrupt+0x44>)
 800ddc6:	3b01      	subs	r3, #1
 800ddc8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800ddca:	4b04      	ldr	r3, [pc, #16]	; (800dddc <vPortSetupTimerInterrupt+0x34>)
 800ddcc:	2207      	movs	r2, #7
 800ddce:	601a      	str	r2, [r3, #0]
}
 800ddd0:	bf00      	nop
 800ddd2:	46bd      	mov	sp, r7
 800ddd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddd8:	4770      	bx	lr
 800ddda:	bf00      	nop
 800dddc:	e000e010 	.word	0xe000e010
 800dde0:	e000e018 	.word	0xe000e018
 800dde4:	20000000 	.word	0x20000000
 800dde8:	10624dd3 	.word	0x10624dd3
 800ddec:	e000e014 	.word	0xe000e014

0800ddf0 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800ddf0:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800de00 <vPortEnableVFP+0x10>
 800ddf4:	6801      	ldr	r1, [r0, #0]
 800ddf6:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800ddfa:	6001      	str	r1, [r0, #0]
 800ddfc:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800ddfe:	bf00      	nop
 800de00:	e000ed88 	.word	0xe000ed88

0800de04 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800de04:	b480      	push	{r7}
 800de06:	b085      	sub	sp, #20
 800de08:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800de0a:	f3ef 8305 	mrs	r3, IPSR
 800de0e:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800de10:	68fb      	ldr	r3, [r7, #12]
 800de12:	2b0f      	cmp	r3, #15
 800de14:	d913      	bls.n	800de3e <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800de16:	4a16      	ldr	r2, [pc, #88]	; (800de70 <vPortValidateInterruptPriority+0x6c>)
 800de18:	68fb      	ldr	r3, [r7, #12]
 800de1a:	4413      	add	r3, r2
 800de1c:	781b      	ldrb	r3, [r3, #0]
 800de1e:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800de20:	4b14      	ldr	r3, [pc, #80]	; (800de74 <vPortValidateInterruptPriority+0x70>)
 800de22:	781b      	ldrb	r3, [r3, #0]
 800de24:	7afa      	ldrb	r2, [r7, #11]
 800de26:	429a      	cmp	r2, r3
 800de28:	d209      	bcs.n	800de3e <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 800de2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800de2e:	f383 8811 	msr	BASEPRI, r3
 800de32:	f3bf 8f6f 	isb	sy
 800de36:	f3bf 8f4f 	dsb	sy
 800de3a:	607b      	str	r3, [r7, #4]
 800de3c:	e7fe      	b.n	800de3c <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800de3e:	4b0e      	ldr	r3, [pc, #56]	; (800de78 <vPortValidateInterruptPriority+0x74>)
 800de40:	681b      	ldr	r3, [r3, #0]
 800de42:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800de46:	4b0d      	ldr	r3, [pc, #52]	; (800de7c <vPortValidateInterruptPriority+0x78>)
 800de48:	681b      	ldr	r3, [r3, #0]
 800de4a:	429a      	cmp	r2, r3
 800de4c:	d909      	bls.n	800de62 <vPortValidateInterruptPriority+0x5e>
 800de4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800de52:	f383 8811 	msr	BASEPRI, r3
 800de56:	f3bf 8f6f 	isb	sy
 800de5a:	f3bf 8f4f 	dsb	sy
 800de5e:	603b      	str	r3, [r7, #0]
 800de60:	e7fe      	b.n	800de60 <vPortValidateInterruptPriority+0x5c>
	}
 800de62:	bf00      	nop
 800de64:	3714      	adds	r7, #20
 800de66:	46bd      	mov	sp, r7
 800de68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de6c:	4770      	bx	lr
 800de6e:	bf00      	nop
 800de70:	e000e3f0 	.word	0xe000e3f0
 800de74:	20000594 	.word	0x20000594
 800de78:	e000ed0c 	.word	0xe000ed0c
 800de7c:	20000598 	.word	0x20000598

0800de80 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800de80:	b580      	push	{r7, lr}
 800de82:	b08a      	sub	sp, #40	; 0x28
 800de84:	af00      	add	r7, sp, #0
 800de86:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800de88:	2300      	movs	r3, #0
 800de8a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800de8c:	f7fe ffb4 	bl	800cdf8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800de90:	4b57      	ldr	r3, [pc, #348]	; (800dff0 <pvPortMalloc+0x170>)
 800de92:	681b      	ldr	r3, [r3, #0]
 800de94:	2b00      	cmp	r3, #0
 800de96:	d101      	bne.n	800de9c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800de98:	f000 f90c 	bl	800e0b4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800de9c:	4b55      	ldr	r3, [pc, #340]	; (800dff4 <pvPortMalloc+0x174>)
 800de9e:	681a      	ldr	r2, [r3, #0]
 800dea0:	687b      	ldr	r3, [r7, #4]
 800dea2:	4013      	ands	r3, r2
 800dea4:	2b00      	cmp	r3, #0
 800dea6:	f040 808c 	bne.w	800dfc2 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800deaa:	687b      	ldr	r3, [r7, #4]
 800deac:	2b00      	cmp	r3, #0
 800deae:	d01c      	beq.n	800deea <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 800deb0:	2208      	movs	r2, #8
 800deb2:	687b      	ldr	r3, [r7, #4]
 800deb4:	4413      	add	r3, r2
 800deb6:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800deb8:	687b      	ldr	r3, [r7, #4]
 800deba:	f003 0307 	and.w	r3, r3, #7
 800debe:	2b00      	cmp	r3, #0
 800dec0:	d013      	beq.n	800deea <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800dec2:	687b      	ldr	r3, [r7, #4]
 800dec4:	f023 0307 	bic.w	r3, r3, #7
 800dec8:	3308      	adds	r3, #8
 800deca:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800decc:	687b      	ldr	r3, [r7, #4]
 800dece:	f003 0307 	and.w	r3, r3, #7
 800ded2:	2b00      	cmp	r3, #0
 800ded4:	d009      	beq.n	800deea <pvPortMalloc+0x6a>
 800ded6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800deda:	f383 8811 	msr	BASEPRI, r3
 800dede:	f3bf 8f6f 	isb	sy
 800dee2:	f3bf 8f4f 	dsb	sy
 800dee6:	617b      	str	r3, [r7, #20]
 800dee8:	e7fe      	b.n	800dee8 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800deea:	687b      	ldr	r3, [r7, #4]
 800deec:	2b00      	cmp	r3, #0
 800deee:	d068      	beq.n	800dfc2 <pvPortMalloc+0x142>
 800def0:	4b41      	ldr	r3, [pc, #260]	; (800dff8 <pvPortMalloc+0x178>)
 800def2:	681b      	ldr	r3, [r3, #0]
 800def4:	687a      	ldr	r2, [r7, #4]
 800def6:	429a      	cmp	r2, r3
 800def8:	d863      	bhi.n	800dfc2 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800defa:	4b40      	ldr	r3, [pc, #256]	; (800dffc <pvPortMalloc+0x17c>)
 800defc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800defe:	4b3f      	ldr	r3, [pc, #252]	; (800dffc <pvPortMalloc+0x17c>)
 800df00:	681b      	ldr	r3, [r3, #0]
 800df02:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800df04:	e004      	b.n	800df10 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 800df06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df08:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800df0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df0c:	681b      	ldr	r3, [r3, #0]
 800df0e:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800df10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df12:	685b      	ldr	r3, [r3, #4]
 800df14:	687a      	ldr	r2, [r7, #4]
 800df16:	429a      	cmp	r2, r3
 800df18:	d903      	bls.n	800df22 <pvPortMalloc+0xa2>
 800df1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df1c:	681b      	ldr	r3, [r3, #0]
 800df1e:	2b00      	cmp	r3, #0
 800df20:	d1f1      	bne.n	800df06 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800df22:	4b33      	ldr	r3, [pc, #204]	; (800dff0 <pvPortMalloc+0x170>)
 800df24:	681b      	ldr	r3, [r3, #0]
 800df26:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800df28:	429a      	cmp	r2, r3
 800df2a:	d04a      	beq.n	800dfc2 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800df2c:	6a3b      	ldr	r3, [r7, #32]
 800df2e:	681b      	ldr	r3, [r3, #0]
 800df30:	2208      	movs	r2, #8
 800df32:	4413      	add	r3, r2
 800df34:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800df36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df38:	681a      	ldr	r2, [r3, #0]
 800df3a:	6a3b      	ldr	r3, [r7, #32]
 800df3c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800df3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df40:	685a      	ldr	r2, [r3, #4]
 800df42:	687b      	ldr	r3, [r7, #4]
 800df44:	1ad2      	subs	r2, r2, r3
 800df46:	2308      	movs	r3, #8
 800df48:	005b      	lsls	r3, r3, #1
 800df4a:	429a      	cmp	r2, r3
 800df4c:	d91e      	bls.n	800df8c <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800df4e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800df50:	687b      	ldr	r3, [r7, #4]
 800df52:	4413      	add	r3, r2
 800df54:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800df56:	69bb      	ldr	r3, [r7, #24]
 800df58:	f003 0307 	and.w	r3, r3, #7
 800df5c:	2b00      	cmp	r3, #0
 800df5e:	d009      	beq.n	800df74 <pvPortMalloc+0xf4>
 800df60:	f04f 0350 	mov.w	r3, #80	; 0x50
 800df64:	f383 8811 	msr	BASEPRI, r3
 800df68:	f3bf 8f6f 	isb	sy
 800df6c:	f3bf 8f4f 	dsb	sy
 800df70:	613b      	str	r3, [r7, #16]
 800df72:	e7fe      	b.n	800df72 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800df74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df76:	685a      	ldr	r2, [r3, #4]
 800df78:	687b      	ldr	r3, [r7, #4]
 800df7a:	1ad2      	subs	r2, r2, r3
 800df7c:	69bb      	ldr	r3, [r7, #24]
 800df7e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800df80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df82:	687a      	ldr	r2, [r7, #4]
 800df84:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800df86:	69b8      	ldr	r0, [r7, #24]
 800df88:	f000 f8f6 	bl	800e178 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800df8c:	4b1a      	ldr	r3, [pc, #104]	; (800dff8 <pvPortMalloc+0x178>)
 800df8e:	681a      	ldr	r2, [r3, #0]
 800df90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df92:	685b      	ldr	r3, [r3, #4]
 800df94:	1ad3      	subs	r3, r2, r3
 800df96:	4a18      	ldr	r2, [pc, #96]	; (800dff8 <pvPortMalloc+0x178>)
 800df98:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800df9a:	4b17      	ldr	r3, [pc, #92]	; (800dff8 <pvPortMalloc+0x178>)
 800df9c:	681a      	ldr	r2, [r3, #0]
 800df9e:	4b18      	ldr	r3, [pc, #96]	; (800e000 <pvPortMalloc+0x180>)
 800dfa0:	681b      	ldr	r3, [r3, #0]
 800dfa2:	429a      	cmp	r2, r3
 800dfa4:	d203      	bcs.n	800dfae <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800dfa6:	4b14      	ldr	r3, [pc, #80]	; (800dff8 <pvPortMalloc+0x178>)
 800dfa8:	681b      	ldr	r3, [r3, #0]
 800dfaa:	4a15      	ldr	r2, [pc, #84]	; (800e000 <pvPortMalloc+0x180>)
 800dfac:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800dfae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dfb0:	685a      	ldr	r2, [r3, #4]
 800dfb2:	4b10      	ldr	r3, [pc, #64]	; (800dff4 <pvPortMalloc+0x174>)
 800dfb4:	681b      	ldr	r3, [r3, #0]
 800dfb6:	431a      	orrs	r2, r3
 800dfb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dfba:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800dfbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dfbe:	2200      	movs	r2, #0
 800dfc0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800dfc2:	f7fe ff27 	bl	800ce14 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800dfc6:	69fb      	ldr	r3, [r7, #28]
 800dfc8:	f003 0307 	and.w	r3, r3, #7
 800dfcc:	2b00      	cmp	r3, #0
 800dfce:	d009      	beq.n	800dfe4 <pvPortMalloc+0x164>
 800dfd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dfd4:	f383 8811 	msr	BASEPRI, r3
 800dfd8:	f3bf 8f6f 	isb	sy
 800dfdc:	f3bf 8f4f 	dsb	sy
 800dfe0:	60fb      	str	r3, [r7, #12]
 800dfe2:	e7fe      	b.n	800dfe2 <pvPortMalloc+0x162>
	return pvReturn;
 800dfe4:	69fb      	ldr	r3, [r7, #28]
}
 800dfe6:	4618      	mov	r0, r3
 800dfe8:	3728      	adds	r7, #40	; 0x28
 800dfea:	46bd      	mov	sp, r7
 800dfec:	bd80      	pop	{r7, pc}
 800dfee:	bf00      	nop
 800dff0:	200041a4 	.word	0x200041a4
 800dff4:	200041b0 	.word	0x200041b0
 800dff8:	200041a8 	.word	0x200041a8
 800dffc:	2000419c 	.word	0x2000419c
 800e000:	200041ac 	.word	0x200041ac

0800e004 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800e004:	b580      	push	{r7, lr}
 800e006:	b086      	sub	sp, #24
 800e008:	af00      	add	r7, sp, #0
 800e00a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800e00c:	687b      	ldr	r3, [r7, #4]
 800e00e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800e010:	687b      	ldr	r3, [r7, #4]
 800e012:	2b00      	cmp	r3, #0
 800e014:	d046      	beq.n	800e0a4 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800e016:	2308      	movs	r3, #8
 800e018:	425b      	negs	r3, r3
 800e01a:	697a      	ldr	r2, [r7, #20]
 800e01c:	4413      	add	r3, r2
 800e01e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800e020:	697b      	ldr	r3, [r7, #20]
 800e022:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800e024:	693b      	ldr	r3, [r7, #16]
 800e026:	685a      	ldr	r2, [r3, #4]
 800e028:	4b20      	ldr	r3, [pc, #128]	; (800e0ac <vPortFree+0xa8>)
 800e02a:	681b      	ldr	r3, [r3, #0]
 800e02c:	4013      	ands	r3, r2
 800e02e:	2b00      	cmp	r3, #0
 800e030:	d109      	bne.n	800e046 <vPortFree+0x42>
 800e032:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e036:	f383 8811 	msr	BASEPRI, r3
 800e03a:	f3bf 8f6f 	isb	sy
 800e03e:	f3bf 8f4f 	dsb	sy
 800e042:	60fb      	str	r3, [r7, #12]
 800e044:	e7fe      	b.n	800e044 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800e046:	693b      	ldr	r3, [r7, #16]
 800e048:	681b      	ldr	r3, [r3, #0]
 800e04a:	2b00      	cmp	r3, #0
 800e04c:	d009      	beq.n	800e062 <vPortFree+0x5e>
 800e04e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e052:	f383 8811 	msr	BASEPRI, r3
 800e056:	f3bf 8f6f 	isb	sy
 800e05a:	f3bf 8f4f 	dsb	sy
 800e05e:	60bb      	str	r3, [r7, #8]
 800e060:	e7fe      	b.n	800e060 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800e062:	693b      	ldr	r3, [r7, #16]
 800e064:	685a      	ldr	r2, [r3, #4]
 800e066:	4b11      	ldr	r3, [pc, #68]	; (800e0ac <vPortFree+0xa8>)
 800e068:	681b      	ldr	r3, [r3, #0]
 800e06a:	4013      	ands	r3, r2
 800e06c:	2b00      	cmp	r3, #0
 800e06e:	d019      	beq.n	800e0a4 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800e070:	693b      	ldr	r3, [r7, #16]
 800e072:	681b      	ldr	r3, [r3, #0]
 800e074:	2b00      	cmp	r3, #0
 800e076:	d115      	bne.n	800e0a4 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800e078:	693b      	ldr	r3, [r7, #16]
 800e07a:	685a      	ldr	r2, [r3, #4]
 800e07c:	4b0b      	ldr	r3, [pc, #44]	; (800e0ac <vPortFree+0xa8>)
 800e07e:	681b      	ldr	r3, [r3, #0]
 800e080:	43db      	mvns	r3, r3
 800e082:	401a      	ands	r2, r3
 800e084:	693b      	ldr	r3, [r7, #16]
 800e086:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800e088:	f7fe feb6 	bl	800cdf8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800e08c:	693b      	ldr	r3, [r7, #16]
 800e08e:	685a      	ldr	r2, [r3, #4]
 800e090:	4b07      	ldr	r3, [pc, #28]	; (800e0b0 <vPortFree+0xac>)
 800e092:	681b      	ldr	r3, [r3, #0]
 800e094:	4413      	add	r3, r2
 800e096:	4a06      	ldr	r2, [pc, #24]	; (800e0b0 <vPortFree+0xac>)
 800e098:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800e09a:	6938      	ldr	r0, [r7, #16]
 800e09c:	f000 f86c 	bl	800e178 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800e0a0:	f7fe feb8 	bl	800ce14 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800e0a4:	bf00      	nop
 800e0a6:	3718      	adds	r7, #24
 800e0a8:	46bd      	mov	sp, r7
 800e0aa:	bd80      	pop	{r7, pc}
 800e0ac:	200041b0 	.word	0x200041b0
 800e0b0:	200041a8 	.word	0x200041a8

0800e0b4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800e0b4:	b480      	push	{r7}
 800e0b6:	b085      	sub	sp, #20
 800e0b8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800e0ba:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800e0be:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800e0c0:	4b27      	ldr	r3, [pc, #156]	; (800e160 <prvHeapInit+0xac>)
 800e0c2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800e0c4:	68fb      	ldr	r3, [r7, #12]
 800e0c6:	f003 0307 	and.w	r3, r3, #7
 800e0ca:	2b00      	cmp	r3, #0
 800e0cc:	d00c      	beq.n	800e0e8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800e0ce:	68fb      	ldr	r3, [r7, #12]
 800e0d0:	3307      	adds	r3, #7
 800e0d2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800e0d4:	68fb      	ldr	r3, [r7, #12]
 800e0d6:	f023 0307 	bic.w	r3, r3, #7
 800e0da:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800e0dc:	68ba      	ldr	r2, [r7, #8]
 800e0de:	68fb      	ldr	r3, [r7, #12]
 800e0e0:	1ad3      	subs	r3, r2, r3
 800e0e2:	4a1f      	ldr	r2, [pc, #124]	; (800e160 <prvHeapInit+0xac>)
 800e0e4:	4413      	add	r3, r2
 800e0e6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800e0e8:	68fb      	ldr	r3, [r7, #12]
 800e0ea:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800e0ec:	4a1d      	ldr	r2, [pc, #116]	; (800e164 <prvHeapInit+0xb0>)
 800e0ee:	687b      	ldr	r3, [r7, #4]
 800e0f0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800e0f2:	4b1c      	ldr	r3, [pc, #112]	; (800e164 <prvHeapInit+0xb0>)
 800e0f4:	2200      	movs	r2, #0
 800e0f6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800e0f8:	687b      	ldr	r3, [r7, #4]
 800e0fa:	68ba      	ldr	r2, [r7, #8]
 800e0fc:	4413      	add	r3, r2
 800e0fe:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800e100:	2208      	movs	r2, #8
 800e102:	68fb      	ldr	r3, [r7, #12]
 800e104:	1a9b      	subs	r3, r3, r2
 800e106:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800e108:	68fb      	ldr	r3, [r7, #12]
 800e10a:	f023 0307 	bic.w	r3, r3, #7
 800e10e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800e110:	68fb      	ldr	r3, [r7, #12]
 800e112:	4a15      	ldr	r2, [pc, #84]	; (800e168 <prvHeapInit+0xb4>)
 800e114:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800e116:	4b14      	ldr	r3, [pc, #80]	; (800e168 <prvHeapInit+0xb4>)
 800e118:	681b      	ldr	r3, [r3, #0]
 800e11a:	2200      	movs	r2, #0
 800e11c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800e11e:	4b12      	ldr	r3, [pc, #72]	; (800e168 <prvHeapInit+0xb4>)
 800e120:	681b      	ldr	r3, [r3, #0]
 800e122:	2200      	movs	r2, #0
 800e124:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800e126:	687b      	ldr	r3, [r7, #4]
 800e128:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800e12a:	683b      	ldr	r3, [r7, #0]
 800e12c:	68fa      	ldr	r2, [r7, #12]
 800e12e:	1ad2      	subs	r2, r2, r3
 800e130:	683b      	ldr	r3, [r7, #0]
 800e132:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800e134:	4b0c      	ldr	r3, [pc, #48]	; (800e168 <prvHeapInit+0xb4>)
 800e136:	681a      	ldr	r2, [r3, #0]
 800e138:	683b      	ldr	r3, [r7, #0]
 800e13a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800e13c:	683b      	ldr	r3, [r7, #0]
 800e13e:	685b      	ldr	r3, [r3, #4]
 800e140:	4a0a      	ldr	r2, [pc, #40]	; (800e16c <prvHeapInit+0xb8>)
 800e142:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800e144:	683b      	ldr	r3, [r7, #0]
 800e146:	685b      	ldr	r3, [r3, #4]
 800e148:	4a09      	ldr	r2, [pc, #36]	; (800e170 <prvHeapInit+0xbc>)
 800e14a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800e14c:	4b09      	ldr	r3, [pc, #36]	; (800e174 <prvHeapInit+0xc0>)
 800e14e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800e152:	601a      	str	r2, [r3, #0]
}
 800e154:	bf00      	nop
 800e156:	3714      	adds	r7, #20
 800e158:	46bd      	mov	sp, r7
 800e15a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e15e:	4770      	bx	lr
 800e160:	2000059c 	.word	0x2000059c
 800e164:	2000419c 	.word	0x2000419c
 800e168:	200041a4 	.word	0x200041a4
 800e16c:	200041ac 	.word	0x200041ac
 800e170:	200041a8 	.word	0x200041a8
 800e174:	200041b0 	.word	0x200041b0

0800e178 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800e178:	b480      	push	{r7}
 800e17a:	b085      	sub	sp, #20
 800e17c:	af00      	add	r7, sp, #0
 800e17e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800e180:	4b28      	ldr	r3, [pc, #160]	; (800e224 <prvInsertBlockIntoFreeList+0xac>)
 800e182:	60fb      	str	r3, [r7, #12]
 800e184:	e002      	b.n	800e18c <prvInsertBlockIntoFreeList+0x14>
 800e186:	68fb      	ldr	r3, [r7, #12]
 800e188:	681b      	ldr	r3, [r3, #0]
 800e18a:	60fb      	str	r3, [r7, #12]
 800e18c:	68fb      	ldr	r3, [r7, #12]
 800e18e:	681b      	ldr	r3, [r3, #0]
 800e190:	687a      	ldr	r2, [r7, #4]
 800e192:	429a      	cmp	r2, r3
 800e194:	d8f7      	bhi.n	800e186 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800e196:	68fb      	ldr	r3, [r7, #12]
 800e198:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800e19a:	68fb      	ldr	r3, [r7, #12]
 800e19c:	685b      	ldr	r3, [r3, #4]
 800e19e:	68ba      	ldr	r2, [r7, #8]
 800e1a0:	4413      	add	r3, r2
 800e1a2:	687a      	ldr	r2, [r7, #4]
 800e1a4:	429a      	cmp	r2, r3
 800e1a6:	d108      	bne.n	800e1ba <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800e1a8:	68fb      	ldr	r3, [r7, #12]
 800e1aa:	685a      	ldr	r2, [r3, #4]
 800e1ac:	687b      	ldr	r3, [r7, #4]
 800e1ae:	685b      	ldr	r3, [r3, #4]
 800e1b0:	441a      	add	r2, r3
 800e1b2:	68fb      	ldr	r3, [r7, #12]
 800e1b4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800e1b6:	68fb      	ldr	r3, [r7, #12]
 800e1b8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800e1ba:	687b      	ldr	r3, [r7, #4]
 800e1bc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800e1be:	687b      	ldr	r3, [r7, #4]
 800e1c0:	685b      	ldr	r3, [r3, #4]
 800e1c2:	68ba      	ldr	r2, [r7, #8]
 800e1c4:	441a      	add	r2, r3
 800e1c6:	68fb      	ldr	r3, [r7, #12]
 800e1c8:	681b      	ldr	r3, [r3, #0]
 800e1ca:	429a      	cmp	r2, r3
 800e1cc:	d118      	bne.n	800e200 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800e1ce:	68fb      	ldr	r3, [r7, #12]
 800e1d0:	681a      	ldr	r2, [r3, #0]
 800e1d2:	4b15      	ldr	r3, [pc, #84]	; (800e228 <prvInsertBlockIntoFreeList+0xb0>)
 800e1d4:	681b      	ldr	r3, [r3, #0]
 800e1d6:	429a      	cmp	r2, r3
 800e1d8:	d00d      	beq.n	800e1f6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800e1da:	687b      	ldr	r3, [r7, #4]
 800e1dc:	685a      	ldr	r2, [r3, #4]
 800e1de:	68fb      	ldr	r3, [r7, #12]
 800e1e0:	681b      	ldr	r3, [r3, #0]
 800e1e2:	685b      	ldr	r3, [r3, #4]
 800e1e4:	441a      	add	r2, r3
 800e1e6:	687b      	ldr	r3, [r7, #4]
 800e1e8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800e1ea:	68fb      	ldr	r3, [r7, #12]
 800e1ec:	681b      	ldr	r3, [r3, #0]
 800e1ee:	681a      	ldr	r2, [r3, #0]
 800e1f0:	687b      	ldr	r3, [r7, #4]
 800e1f2:	601a      	str	r2, [r3, #0]
 800e1f4:	e008      	b.n	800e208 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800e1f6:	4b0c      	ldr	r3, [pc, #48]	; (800e228 <prvInsertBlockIntoFreeList+0xb0>)
 800e1f8:	681a      	ldr	r2, [r3, #0]
 800e1fa:	687b      	ldr	r3, [r7, #4]
 800e1fc:	601a      	str	r2, [r3, #0]
 800e1fe:	e003      	b.n	800e208 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800e200:	68fb      	ldr	r3, [r7, #12]
 800e202:	681a      	ldr	r2, [r3, #0]
 800e204:	687b      	ldr	r3, [r7, #4]
 800e206:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800e208:	68fa      	ldr	r2, [r7, #12]
 800e20a:	687b      	ldr	r3, [r7, #4]
 800e20c:	429a      	cmp	r2, r3
 800e20e:	d002      	beq.n	800e216 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800e210:	68fb      	ldr	r3, [r7, #12]
 800e212:	687a      	ldr	r2, [r7, #4]
 800e214:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800e216:	bf00      	nop
 800e218:	3714      	adds	r7, #20
 800e21a:	46bd      	mov	sp, r7
 800e21c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e220:	4770      	bx	lr
 800e222:	bf00      	nop
 800e224:	2000419c 	.word	0x2000419c
 800e228:	200041a4 	.word	0x200041a4

0800e22c <netconn_apimsg>:
 * @param apimsg a struct containing the function to call and its parameters
 * @return ERR_OK if the function was called, another err_t if not
 */
static err_t
netconn_apimsg(tcpip_callback_fn fn, struct api_msg *apimsg)
{
 800e22c:	b580      	push	{r7, lr}
 800e22e:	b084      	sub	sp, #16
 800e230:	af00      	add	r7, sp, #0
 800e232:	6078      	str	r0, [r7, #4]
 800e234:	6039      	str	r1, [r7, #0]

#if LWIP_NETCONN_SEM_PER_THREAD
  apimsg->op_completed_sem = LWIP_NETCONN_THREAD_SEM_GET();
#endif /* LWIP_NETCONN_SEM_PER_THREAD */

  err = tcpip_send_msg_wait_sem(fn, apimsg, LWIP_API_MSG_SEM(apimsg));
 800e236:	683b      	ldr	r3, [r7, #0]
 800e238:	681b      	ldr	r3, [r3, #0]
 800e23a:	330c      	adds	r3, #12
 800e23c:	461a      	mov	r2, r3
 800e23e:	6839      	ldr	r1, [r7, #0]
 800e240:	6878      	ldr	r0, [r7, #4]
 800e242:	f002 f96f 	bl	8010524 <tcpip_send_msg_wait_sem>
 800e246:	4603      	mov	r3, r0
 800e248:	73fb      	strb	r3, [r7, #15]
  if (err == ERR_OK) {
 800e24a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e24e:	2b00      	cmp	r3, #0
 800e250:	d103      	bne.n	800e25a <netconn_apimsg+0x2e>
    return apimsg->err;
 800e252:	683b      	ldr	r3, [r7, #0]
 800e254:	f993 3004 	ldrsb.w	r3, [r3, #4]
 800e258:	e001      	b.n	800e25e <netconn_apimsg+0x32>
  }
  return err;
 800e25a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800e25e:	4618      	mov	r0, r3
 800e260:	3710      	adds	r7, #16
 800e262:	46bd      	mov	sp, r7
 800e264:	bd80      	pop	{r7, pc}
	...

0800e268 <netconn_new_with_proto_and_callback>:
 * @return a newly allocated struct netconn or
 *         NULL on memory error
 */
struct netconn*
netconn_new_with_proto_and_callback(enum netconn_type t, u8_t proto, netconn_callback callback)
{
 800e268:	b580      	push	{r7, lr}
 800e26a:	b08a      	sub	sp, #40	; 0x28
 800e26c:	af00      	add	r7, sp, #0
 800e26e:	4603      	mov	r3, r0
 800e270:	603a      	str	r2, [r7, #0]
 800e272:	71fb      	strb	r3, [r7, #7]
 800e274:	460b      	mov	r3, r1
 800e276:	71bb      	strb	r3, [r7, #6]
  struct netconn *conn;
  API_MSG_VAR_DECLARE(msg);
  API_MSG_VAR_ALLOC_RETURN_NULL(msg);

  conn = netconn_alloc(t, callback);
 800e278:	79fb      	ldrb	r3, [r7, #7]
 800e27a:	6839      	ldr	r1, [r7, #0]
 800e27c:	4618      	mov	r0, r3
 800e27e:	f000 ff83 	bl	800f188 <netconn_alloc>
 800e282:	6278      	str	r0, [r7, #36]	; 0x24
  if (conn != NULL) {
 800e284:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e286:	2b00      	cmp	r3, #0
 800e288:	d054      	beq.n	800e334 <netconn_new_with_proto_and_callback+0xcc>
    err_t err;

    API_MSG_VAR_REF(msg).msg.n.proto = proto;
 800e28a:	79bb      	ldrb	r3, [r7, #6]
 800e28c:	753b      	strb	r3, [r7, #20]
    API_MSG_VAR_REF(msg).conn = conn;
 800e28e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e290:	60fb      	str	r3, [r7, #12]
    err = netconn_apimsg(lwip_netconn_do_newconn, &API_MSG_VAR_REF(msg));
 800e292:	f107 030c 	add.w	r3, r7, #12
 800e296:	4619      	mov	r1, r3
 800e298:	4829      	ldr	r0, [pc, #164]	; (800e340 <netconn_new_with_proto_and_callback+0xd8>)
 800e29a:	f7ff ffc7 	bl	800e22c <netconn_apimsg>
 800e29e:	4603      	mov	r3, r0
 800e2a0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    if (err != ERR_OK) {
 800e2a4:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 800e2a8:	2b00      	cmp	r3, #0
 800e2aa:	d043      	beq.n	800e334 <netconn_new_with_proto_and_callback+0xcc>
      LWIP_ASSERT("freeing conn without freeing pcb", conn->pcb.tcp == NULL);
 800e2ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e2ae:	685b      	ldr	r3, [r3, #4]
 800e2b0:	2b00      	cmp	r3, #0
 800e2b2:	d005      	beq.n	800e2c0 <netconn_new_with_proto_and_callback+0x58>
 800e2b4:	4b23      	ldr	r3, [pc, #140]	; (800e344 <netconn_new_with_proto_and_callback+0xdc>)
 800e2b6:	2289      	movs	r2, #137	; 0x89
 800e2b8:	4923      	ldr	r1, [pc, #140]	; (800e348 <netconn_new_with_proto_and_callback+0xe0>)
 800e2ba:	4824      	ldr	r0, [pc, #144]	; (800e34c <netconn_new_with_proto_and_callback+0xe4>)
 800e2bc:	f00c fd98 	bl	801adf0 <iprintf>
      LWIP_ASSERT("conn has no recvmbox", sys_mbox_valid(&conn->recvmbox));
 800e2c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e2c2:	3310      	adds	r3, #16
 800e2c4:	4618      	mov	r0, r3
 800e2c6:	f00b fe81 	bl	8019fcc <sys_mbox_valid>
 800e2ca:	4603      	mov	r3, r0
 800e2cc:	2b00      	cmp	r3, #0
 800e2ce:	d105      	bne.n	800e2dc <netconn_new_with_proto_and_callback+0x74>
 800e2d0:	4b1c      	ldr	r3, [pc, #112]	; (800e344 <netconn_new_with_proto_and_callback+0xdc>)
 800e2d2:	228a      	movs	r2, #138	; 0x8a
 800e2d4:	491e      	ldr	r1, [pc, #120]	; (800e350 <netconn_new_with_proto_and_callback+0xe8>)
 800e2d6:	481d      	ldr	r0, [pc, #116]	; (800e34c <netconn_new_with_proto_and_callback+0xe4>)
 800e2d8:	f00c fd8a 	bl	801adf0 <iprintf>
#if LWIP_TCP
      LWIP_ASSERT("conn->acceptmbox shouldn't exist", !sys_mbox_valid(&conn->acceptmbox));
 800e2dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e2de:	3314      	adds	r3, #20
 800e2e0:	4618      	mov	r0, r3
 800e2e2:	f00b fe73 	bl	8019fcc <sys_mbox_valid>
 800e2e6:	4603      	mov	r3, r0
 800e2e8:	2b00      	cmp	r3, #0
 800e2ea:	d005      	beq.n	800e2f8 <netconn_new_with_proto_and_callback+0x90>
 800e2ec:	4b15      	ldr	r3, [pc, #84]	; (800e344 <netconn_new_with_proto_and_callback+0xdc>)
 800e2ee:	228c      	movs	r2, #140	; 0x8c
 800e2f0:	4918      	ldr	r1, [pc, #96]	; (800e354 <netconn_new_with_proto_and_callback+0xec>)
 800e2f2:	4816      	ldr	r0, [pc, #88]	; (800e34c <netconn_new_with_proto_and_callback+0xe4>)
 800e2f4:	f00c fd7c 	bl	801adf0 <iprintf>
#endif /* LWIP_TCP */
#if !LWIP_NETCONN_SEM_PER_THREAD
      LWIP_ASSERT("conn has no op_completed", sys_sem_valid(&conn->op_completed));
 800e2f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e2fa:	330c      	adds	r3, #12
 800e2fc:	4618      	mov	r0, r3
 800e2fe:	f00b fef6 	bl	801a0ee <sys_sem_valid>
 800e302:	4603      	mov	r3, r0
 800e304:	2b00      	cmp	r3, #0
 800e306:	d105      	bne.n	800e314 <netconn_new_with_proto_and_callback+0xac>
 800e308:	4b0e      	ldr	r3, [pc, #56]	; (800e344 <netconn_new_with_proto_and_callback+0xdc>)
 800e30a:	228f      	movs	r2, #143	; 0x8f
 800e30c:	4912      	ldr	r1, [pc, #72]	; (800e358 <netconn_new_with_proto_and_callback+0xf0>)
 800e30e:	480f      	ldr	r0, [pc, #60]	; (800e34c <netconn_new_with_proto_and_callback+0xe4>)
 800e310:	f00c fd6e 	bl	801adf0 <iprintf>
      sys_sem_free(&conn->op_completed);
 800e314:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e316:	330c      	adds	r3, #12
 800e318:	4618      	mov	r0, r3
 800e31a:	f00b fedb 	bl	801a0d4 <sys_sem_free>
#endif /* !LWIP_NETCONN_SEM_PER_THREAD */
      sys_mbox_free(&conn->recvmbox);
 800e31e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e320:	3310      	adds	r3, #16
 800e322:	4618      	mov	r0, r3
 800e324:	f00b fdb6 	bl	8019e94 <sys_mbox_free>
      memp_free(MEMP_NETCONN, conn);
 800e328:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800e32a:	2007      	movs	r0, #7
 800e32c:	f002 fd9a 	bl	8010e64 <memp_free>
      API_MSG_VAR_FREE(msg);
      return NULL;
 800e330:	2300      	movs	r3, #0
 800e332:	e000      	b.n	800e336 <netconn_new_with_proto_and_callback+0xce>
    }
  }
  API_MSG_VAR_FREE(msg);
  return conn;
 800e334:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800e336:	4618      	mov	r0, r3
 800e338:	3728      	adds	r7, #40	; 0x28
 800e33a:	46bd      	mov	sp, r7
 800e33c:	bd80      	pop	{r7, pc}
 800e33e:	bf00      	nop
 800e340:	0800f131 	.word	0x0800f131
 800e344:	0801bfec 	.word	0x0801bfec
 800e348:	0801c020 	.word	0x0801c020
 800e34c:	0801c044 	.word	0x0801c044
 800e350:	0801c06c 	.word	0x0801c06c
 800e354:	0801c084 	.word	0x0801c084
 800e358:	0801c0a8 	.word	0x0801c0a8

0800e35c <netconn_delete>:
 * @param conn the netconn to delete
 * @return ERR_OK if the connection was deleted
 */
err_t
netconn_delete(struct netconn *conn)
{
 800e35c:	b580      	push	{r7, lr}
 800e35e:	b088      	sub	sp, #32
 800e360:	af00      	add	r7, sp, #0
 800e362:	6078      	str	r0, [r7, #4]
  err_t err;
  API_MSG_VAR_DECLARE(msg);

  /* No ASSERT here because possible to get a (conn == NULL) if we got an accept error */
  if (conn == NULL) {
 800e364:	687b      	ldr	r3, [r7, #4]
 800e366:	2b00      	cmp	r3, #0
 800e368:	d101      	bne.n	800e36e <netconn_delete+0x12>
    return ERR_OK;
 800e36a:	2300      	movs	r3, #0
 800e36c:	e016      	b.n	800e39c <netconn_delete+0x40>
  }

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 800e36e:	687b      	ldr	r3, [r7, #4]
 800e370:	60bb      	str	r3, [r7, #8]
  /* get the time we started, which is later compared to
     sys_now() + conn->send_timeout */
  API_MSG_VAR_REF(msg).msg.sd.time_started = sys_now();
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
#if LWIP_TCP
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 800e372:	2329      	movs	r3, #41	; 0x29
 800e374:	747b      	strb	r3, [r7, #17]
    ((LWIP_TCP_CLOSE_TIMEOUT_MS_DEFAULT + TCP_SLOW_INTERVAL - 1) / TCP_SLOW_INTERVAL) + 1;
#endif /* LWIP_TCP */
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
  err = netconn_apimsg(lwip_netconn_do_delconn, &API_MSG_VAR_REF(msg));
 800e376:	f107 0308 	add.w	r3, r7, #8
 800e37a:	4619      	mov	r1, r3
 800e37c:	4809      	ldr	r0, [pc, #36]	; (800e3a4 <netconn_delete+0x48>)
 800e37e:	f7ff ff55 	bl	800e22c <netconn_apimsg>
 800e382:	4603      	mov	r3, r0
 800e384:	77fb      	strb	r3, [r7, #31]
  API_MSG_VAR_FREE(msg);

  if (err != ERR_OK) {
 800e386:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800e38a:	2b00      	cmp	r3, #0
 800e38c:	d002      	beq.n	800e394 <netconn_delete+0x38>
    return err;
 800e38e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800e392:	e003      	b.n	800e39c <netconn_delete+0x40>
  }

  netconn_free(conn);
 800e394:	6878      	ldr	r0, [r7, #4]
 800e396:	f000 ff67 	bl	800f268 <netconn_free>

  return ERR_OK;
 800e39a:	2300      	movs	r3, #0
}
 800e39c:	4618      	mov	r0, r3
 800e39e:	3720      	adds	r7, #32
 800e3a0:	46bd      	mov	sp, r7
 800e3a2:	bd80      	pop	{r7, pc}
 800e3a4:	0800f6ed 	.word	0x0800f6ed

0800e3a8 <netconn_bind>:
 * @param port the local port to bind the netconn to (not used for RAW)
 * @return ERR_OK if bound, any other err_t on failure
 */
err_t
netconn_bind(struct netconn *conn, const ip_addr_t *addr, u16_t port)
{
 800e3a8:	b580      	push	{r7, lr}
 800e3aa:	b08a      	sub	sp, #40	; 0x28
 800e3ac:	af00      	add	r7, sp, #0
 800e3ae:	60f8      	str	r0, [r7, #12]
 800e3b0:	60b9      	str	r1, [r7, #8]
 800e3b2:	4613      	mov	r3, r2
 800e3b4:	80fb      	strh	r3, [r7, #6]
  API_MSG_VAR_DECLARE(msg);
  err_t err;
  
  LWIP_ERROR("netconn_bind: invalid conn", (conn != NULL), return ERR_ARG;);
 800e3b6:	68fb      	ldr	r3, [r7, #12]
 800e3b8:	2b00      	cmp	r3, #0
 800e3ba:	d108      	bne.n	800e3ce <netconn_bind+0x26>
 800e3bc:	4b11      	ldr	r3, [pc, #68]	; (800e404 <netconn_bind+0x5c>)
 800e3be:	22ff      	movs	r2, #255	; 0xff
 800e3c0:	4911      	ldr	r1, [pc, #68]	; (800e408 <netconn_bind+0x60>)
 800e3c2:	4812      	ldr	r0, [pc, #72]	; (800e40c <netconn_bind+0x64>)
 800e3c4:	f00c fd14 	bl	801adf0 <iprintf>
 800e3c8:	f06f 030f 	mvn.w	r3, #15
 800e3cc:	e015      	b.n	800e3fa <netconn_bind+0x52>

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IP_ADDR_ANY alias) to subsequent functions */
  if (addr == NULL) {
 800e3ce:	68bb      	ldr	r3, [r7, #8]
 800e3d0:	2b00      	cmp	r3, #0
 800e3d2:	d101      	bne.n	800e3d8 <netconn_bind+0x30>
    addr = IP4_ADDR_ANY;
 800e3d4:	4b0e      	ldr	r3, [pc, #56]	; (800e410 <netconn_bind+0x68>)
 800e3d6:	60bb      	str	r3, [r7, #8]
    addr = IP_ANY_TYPE;
  }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 800e3d8:	68fb      	ldr	r3, [r7, #12]
 800e3da:	613b      	str	r3, [r7, #16]
  API_MSG_VAR_REF(msg).msg.bc.ipaddr = API_MSG_VAR_REF(addr);
 800e3dc:	68bb      	ldr	r3, [r7, #8]
 800e3de:	61bb      	str	r3, [r7, #24]
  API_MSG_VAR_REF(msg).msg.bc.port = port;
 800e3e0:	88fb      	ldrh	r3, [r7, #6]
 800e3e2:	83bb      	strh	r3, [r7, #28]
  err = netconn_apimsg(lwip_netconn_do_bind, &API_MSG_VAR_REF(msg));
 800e3e4:	f107 0310 	add.w	r3, r7, #16
 800e3e8:	4619      	mov	r1, r3
 800e3ea:	480a      	ldr	r0, [pc, #40]	; (800e414 <netconn_bind+0x6c>)
 800e3ec:	f7ff ff1e 	bl	800e22c <netconn_apimsg>
 800e3f0:	4603      	mov	r3, r0
 800e3f2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  API_MSG_VAR_FREE(msg);

  return err;
 800e3f6:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800e3fa:	4618      	mov	r0, r3
 800e3fc:	3728      	adds	r7, #40	; 0x28
 800e3fe:	46bd      	mov	sp, r7
 800e400:	bd80      	pop	{r7, pc}
 800e402:	bf00      	nop
 800e404:	0801bfec 	.word	0x0801bfec
 800e408:	0801c124 	.word	0x0801c124
 800e40c:	0801c044 	.word	0x0801c044
 800e410:	0801e800 	.word	0x0801e800
 800e414:	0800f8f1 	.word	0x0800f8f1

0800e418 <netconn_listen_with_backlog>:
 * @return ERR_OK if the netconn was set to listen (UDP and RAW netconns
 *         don't return any error (yet?))
 */
err_t
netconn_listen_with_backlog(struct netconn *conn, u8_t backlog)
{
 800e418:	b580      	push	{r7, lr}
 800e41a:	b088      	sub	sp, #32
 800e41c:	af00      	add	r7, sp, #0
 800e41e:	6078      	str	r0, [r7, #4]
 800e420:	460b      	mov	r3, r1
 800e422:	70fb      	strb	r3, [r7, #3]
  err_t err;

  /* This does no harm. If TCP_LISTEN_BACKLOG is off, backlog is unused. */
  LWIP_UNUSED_ARG(backlog);

  LWIP_ERROR("netconn_listen: invalid conn", (conn != NULL), return ERR_ARG;);
 800e424:	687b      	ldr	r3, [r7, #4]
 800e426:	2b00      	cmp	r3, #0
 800e428:	d109      	bne.n	800e43e <netconn_listen_with_backlog+0x26>
 800e42a:	4b0d      	ldr	r3, [pc, #52]	; (800e460 <netconn_listen_with_backlog+0x48>)
 800e42c:	f44f 72b4 	mov.w	r2, #360	; 0x168
 800e430:	490c      	ldr	r1, [pc, #48]	; (800e464 <netconn_listen_with_backlog+0x4c>)
 800e432:	480d      	ldr	r0, [pc, #52]	; (800e468 <netconn_listen_with_backlog+0x50>)
 800e434:	f00c fcdc 	bl	801adf0 <iprintf>
 800e438:	f06f 030f 	mvn.w	r3, #15
 800e43c:	e00b      	b.n	800e456 <netconn_listen_with_backlog+0x3e>

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 800e43e:	687b      	ldr	r3, [r7, #4]
 800e440:	60bb      	str	r3, [r7, #8]
#if TCP_LISTEN_BACKLOG
  API_MSG_VAR_REF(msg).msg.lb.backlog = backlog;
#endif /* TCP_LISTEN_BACKLOG */
  err = netconn_apimsg(lwip_netconn_do_listen, &API_MSG_VAR_REF(msg));
 800e442:	f107 0308 	add.w	r3, r7, #8
 800e446:	4619      	mov	r1, r3
 800e448:	4808      	ldr	r0, [pc, #32]	; (800e46c <netconn_listen_with_backlog+0x54>)
 800e44a:	f7ff feef 	bl	800e22c <netconn_apimsg>
 800e44e:	4603      	mov	r3, r0
 800e450:	77fb      	strb	r3, [r7, #31]
  API_MSG_VAR_FREE(msg);

  return err;
 800e452:	f997 301f 	ldrsb.w	r3, [r7, #31]
#else /* LWIP_TCP */
  LWIP_UNUSED_ARG(conn);
  LWIP_UNUSED_ARG(backlog);
  return ERR_ARG;
#endif /* LWIP_TCP */
}
 800e456:	4618      	mov	r0, r3
 800e458:	3720      	adds	r7, #32
 800e45a:	46bd      	mov	sp, r7
 800e45c:	bd80      	pop	{r7, pc}
 800e45e:	bf00      	nop
 800e460:	0801bfec 	.word	0x0801bfec
 800e464:	0801c184 	.word	0x0801c184
 800e468:	0801c044 	.word	0x0801c044
 800e46c:	0800f9b1 	.word	0x0800f9b1

0800e470 <netconn_accept>:
 * @return ERR_OK if a new connection has been received or an error
 *                code otherwise
 */
err_t
netconn_accept(struct netconn *conn, struct netconn **new_conn)
{
 800e470:	b580      	push	{r7, lr}
 800e472:	b086      	sub	sp, #24
 800e474:	af00      	add	r7, sp, #0
 800e476:	6078      	str	r0, [r7, #4]
 800e478:	6039      	str	r1, [r7, #0]
  struct netconn *newconn;
#if TCP_LISTEN_BACKLOG
  API_MSG_VAR_DECLARE(msg);
#endif /* TCP_LISTEN_BACKLOG */

  LWIP_ERROR("netconn_accept: invalid pointer",    (new_conn != NULL),                  return ERR_ARG;);
 800e47a:	683b      	ldr	r3, [r7, #0]
 800e47c:	2b00      	cmp	r3, #0
 800e47e:	d109      	bne.n	800e494 <netconn_accept+0x24>
 800e480:	4b34      	ldr	r3, [pc, #208]	; (800e554 <netconn_accept+0xe4>)
 800e482:	f240 128d 	movw	r2, #397	; 0x18d
 800e486:	4934      	ldr	r1, [pc, #208]	; (800e558 <netconn_accept+0xe8>)
 800e488:	4834      	ldr	r0, [pc, #208]	; (800e55c <netconn_accept+0xec>)
 800e48a:	f00c fcb1 	bl	801adf0 <iprintf>
 800e48e:	f06f 030f 	mvn.w	r3, #15
 800e492:	e05b      	b.n	800e54c <netconn_accept+0xdc>
  *new_conn = NULL;
 800e494:	683b      	ldr	r3, [r7, #0]
 800e496:	2200      	movs	r2, #0
 800e498:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_accept: invalid conn",       (conn != NULL),                      return ERR_ARG;);
 800e49a:	687b      	ldr	r3, [r7, #4]
 800e49c:	2b00      	cmp	r3, #0
 800e49e:	d109      	bne.n	800e4b4 <netconn_accept+0x44>
 800e4a0:	4b2c      	ldr	r3, [pc, #176]	; (800e554 <netconn_accept+0xe4>)
 800e4a2:	f240 128f 	movw	r2, #399	; 0x18f
 800e4a6:	492e      	ldr	r1, [pc, #184]	; (800e560 <netconn_accept+0xf0>)
 800e4a8:	482c      	ldr	r0, [pc, #176]	; (800e55c <netconn_accept+0xec>)
 800e4aa:	f00c fca1 	bl	801adf0 <iprintf>
 800e4ae:	f06f 030f 	mvn.w	r3, #15
 800e4b2:	e04b      	b.n	800e54c <netconn_accept+0xdc>

  if (ERR_IS_FATAL(conn->last_err)) {
 800e4b4:	687b      	ldr	r3, [r7, #4]
 800e4b6:	f993 3008 	ldrsb.w	r3, [r3, #8]
 800e4ba:	f113 0f0c 	cmn.w	r3, #12
 800e4be:	da03      	bge.n	800e4c8 <netconn_accept+0x58>
    /* don't recv on fatal errors: this might block the application task
       waiting on acceptmbox forever! */
    return conn->last_err;
 800e4c0:	687b      	ldr	r3, [r7, #4]
 800e4c2:	f993 3008 	ldrsb.w	r3, [r3, #8]
 800e4c6:	e041      	b.n	800e54c <netconn_accept+0xdc>
  }
  if (!sys_mbox_valid(&conn->acceptmbox)) {
 800e4c8:	687b      	ldr	r3, [r7, #4]
 800e4ca:	3314      	adds	r3, #20
 800e4cc:	4618      	mov	r0, r3
 800e4ce:	f00b fd7d 	bl	8019fcc <sys_mbox_valid>
 800e4d2:	4603      	mov	r3, r0
 800e4d4:	2b00      	cmp	r3, #0
 800e4d6:	d102      	bne.n	800e4de <netconn_accept+0x6e>
    return ERR_CLSD;
 800e4d8:	f06f 030e 	mvn.w	r3, #14
 800e4dc:	e036      	b.n	800e54c <netconn_accept+0xdc>
    API_MSG_VAR_FREE(msg);
#endif /* TCP_LISTEN_BACKLOG */
    return ERR_TIMEOUT;
  }
#else
  sys_arch_mbox_fetch(&conn->acceptmbox, &accept_ptr, 0);
 800e4de:	687b      	ldr	r3, [r7, #4]
 800e4e0:	3314      	adds	r3, #20
 800e4e2:	f107 010c 	add.w	r1, r7, #12
 800e4e6:	2200      	movs	r2, #0
 800e4e8:	4618      	mov	r0, r3
 800e4ea:	f00b fd14 	bl	8019f16 <sys_arch_mbox_fetch>
#endif /* LWIP_SO_RCVTIMEO*/
  newconn = (struct netconn *)accept_ptr;
 800e4ee:	68fb      	ldr	r3, [r7, #12]
 800e4f0:	617b      	str	r3, [r7, #20]
  /* Register event with callback */
  API_EVENT(conn, NETCONN_EVT_RCVMINUS, 0);
 800e4f2:	687b      	ldr	r3, [r7, #4]
 800e4f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e4f6:	2b00      	cmp	r3, #0
 800e4f8:	d005      	beq.n	800e506 <netconn_accept+0x96>
 800e4fa:	687b      	ldr	r3, [r7, #4]
 800e4fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e4fe:	2200      	movs	r2, #0
 800e500:	2101      	movs	r1, #1
 800e502:	6878      	ldr	r0, [r7, #4]
 800e504:	4798      	blx	r3

  if (accept_ptr == &netconn_aborted) {
 800e506:	68fb      	ldr	r3, [r7, #12]
 800e508:	4a16      	ldr	r2, [pc, #88]	; (800e564 <netconn_accept+0xf4>)
 800e50a:	4293      	cmp	r3, r2
 800e50c:	d102      	bne.n	800e514 <netconn_accept+0xa4>
    /* a connection has been aborted: out of pcbs or out of netconns during accept */
    /* @todo: set netconn error, but this would be fatal and thus block further accepts */
#if TCP_LISTEN_BACKLOG
    API_MSG_VAR_FREE(msg);
#endif /* TCP_LISTEN_BACKLOG */
    return ERR_ABRT;
 800e50e:	f06f 030c 	mvn.w	r3, #12
 800e512:	e01b      	b.n	800e54c <netconn_accept+0xdc>
  }
  if (newconn == NULL) {
 800e514:	697b      	ldr	r3, [r7, #20]
 800e516:	2b00      	cmp	r3, #0
 800e518:	d114      	bne.n	800e544 <netconn_accept+0xd4>
    /* connection has been aborted */
    /* in this special case, we set the netconn error from application thread, as
       on a ready-to-accept listening netconn, there should not be anything running
       in tcpip_thread */
    NETCONN_SET_SAFE_ERR(conn, ERR_CLSD);
 800e51a:	687b      	ldr	r3, [r7, #4]
 800e51c:	2b00      	cmp	r3, #0
 800e51e:	d00e      	beq.n	800e53e <netconn_accept+0xce>
 800e520:	f00b fe70 	bl	801a204 <sys_arch_protect>
 800e524:	6138      	str	r0, [r7, #16]
 800e526:	687b      	ldr	r3, [r7, #4]
 800e528:	f993 3008 	ldrsb.w	r3, [r3, #8]
 800e52c:	f113 0f0c 	cmn.w	r3, #12
 800e530:	db02      	blt.n	800e538 <netconn_accept+0xc8>
 800e532:	687b      	ldr	r3, [r7, #4]
 800e534:	22f1      	movs	r2, #241	; 0xf1
 800e536:	721a      	strb	r2, [r3, #8]
 800e538:	6938      	ldr	r0, [r7, #16]
 800e53a:	f00b fe71 	bl	801a220 <sys_arch_unprotect>
#if TCP_LISTEN_BACKLOG
    API_MSG_VAR_FREE(msg);
#endif /* TCP_LISTEN_BACKLOG */
    return ERR_CLSD;
 800e53e:	f06f 030e 	mvn.w	r3, #14
 800e542:	e003      	b.n	800e54c <netconn_accept+0xdc>
  /* don't care for the return value of lwip_netconn_do_recv */
  netconn_apimsg(lwip_netconn_do_accepted, &API_MSG_VAR_REF(msg));
  API_MSG_VAR_FREE(msg);
#endif /* TCP_LISTEN_BACKLOG */

  *new_conn = newconn;
 800e544:	683b      	ldr	r3, [r7, #0]
 800e546:	697a      	ldr	r2, [r7, #20]
 800e548:	601a      	str	r2, [r3, #0]
  /* don't set conn->last_err: it's only ERR_OK, anyway */
  return ERR_OK;
 800e54a:	2300      	movs	r3, #0
#else /* LWIP_TCP */
  LWIP_UNUSED_ARG(conn);
  LWIP_UNUSED_ARG(new_conn);
  return ERR_ARG;
#endif /* LWIP_TCP */
}
 800e54c:	4618      	mov	r0, r3
 800e54e:	3718      	adds	r7, #24
 800e550:	46bd      	mov	sp, r7
 800e552:	bd80      	pop	{r7, pc}
 800e554:	0801bfec 	.word	0x0801bfec
 800e558:	0801c1a4 	.word	0x0801c1a4
 800e55c:	0801c044 	.word	0x0801c044
 800e560:	0801c1c4 	.word	0x0801c1c4
 800e564:	20007630 	.word	0x20007630

0800e568 <netconn_recv_data>:
 * @return ERR_OK if data has been received, an error code otherwise (timeout,
 *                memory error or another error)
 */
static err_t
netconn_recv_data(struct netconn *conn, void **new_buf)
{
 800e568:	b580      	push	{r7, lr}
 800e56a:	b08a      	sub	sp, #40	; 0x28
 800e56c:	af00      	add	r7, sp, #0
 800e56e:	6078      	str	r0, [r7, #4]
 800e570:	6039      	str	r1, [r7, #0]
  void *buf = NULL;
 800e572:	2300      	movs	r3, #0
 800e574:	623b      	str	r3, [r7, #32]
#if LWIP_MPU_COMPATIBLE
  msg = NULL;
#endif
#endif /* LWIP_TCP */

  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
 800e576:	683b      	ldr	r3, [r7, #0]
 800e578:	2b00      	cmp	r3, #0
 800e57a:	d109      	bne.n	800e590 <netconn_recv_data+0x28>
 800e57c:	4b5c      	ldr	r3, [pc, #368]	; (800e6f0 <netconn_recv_data+0x188>)
 800e57e:	f240 12e7 	movw	r2, #487	; 0x1e7
 800e582:	495c      	ldr	r1, [pc, #368]	; (800e6f4 <netconn_recv_data+0x18c>)
 800e584:	485c      	ldr	r0, [pc, #368]	; (800e6f8 <netconn_recv_data+0x190>)
 800e586:	f00c fc33 	bl	801adf0 <iprintf>
 800e58a:	f06f 030f 	mvn.w	r3, #15
 800e58e:	e0aa      	b.n	800e6e6 <netconn_recv_data+0x17e>
  *new_buf = NULL;
 800e590:	683b      	ldr	r3, [r7, #0]
 800e592:	2200      	movs	r2, #0
 800e594:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
 800e596:	687b      	ldr	r3, [r7, #4]
 800e598:	2b00      	cmp	r3, #0
 800e59a:	d109      	bne.n	800e5b0 <netconn_recv_data+0x48>
 800e59c:	4b54      	ldr	r3, [pc, #336]	; (800e6f0 <netconn_recv_data+0x188>)
 800e59e:	f240 12e9 	movw	r2, #489	; 0x1e9
 800e5a2:	4956      	ldr	r1, [pc, #344]	; (800e6fc <netconn_recv_data+0x194>)
 800e5a4:	4854      	ldr	r0, [pc, #336]	; (800e6f8 <netconn_recv_data+0x190>)
 800e5a6:	f00c fc23 	bl	801adf0 <iprintf>
 800e5aa:	f06f 030f 	mvn.w	r3, #15
 800e5ae:	e09a      	b.n	800e6e6 <netconn_recv_data+0x17e>
#if LWIP_TCP
#if (LWIP_UDP || LWIP_RAW)
  if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP)
 800e5b0:	687b      	ldr	r3, [r7, #4]
 800e5b2:	781b      	ldrb	r3, [r3, #0]
 800e5b4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800e5b8:	2b10      	cmp	r3, #16
 800e5ba:	d115      	bne.n	800e5e8 <netconn_recv_data+0x80>
#endif /* (LWIP_UDP || LWIP_RAW) */
  {
    if (!sys_mbox_valid(&conn->recvmbox)) {
 800e5bc:	687b      	ldr	r3, [r7, #4]
 800e5be:	3310      	adds	r3, #16
 800e5c0:	4618      	mov	r0, r3
 800e5c2:	f00b fd03 	bl	8019fcc <sys_mbox_valid>
 800e5c6:	4603      	mov	r3, r0
 800e5c8:	2b00      	cmp	r3, #0
 800e5ca:	d10d      	bne.n	800e5e8 <netconn_recv_data+0x80>
      /* This happens when calling this function after receiving FIN */
      return sys_mbox_valid(&conn->acceptmbox) ? ERR_CONN : ERR_CLSD;
 800e5cc:	687b      	ldr	r3, [r7, #4]
 800e5ce:	3314      	adds	r3, #20
 800e5d0:	4618      	mov	r0, r3
 800e5d2:	f00b fcfb 	bl	8019fcc <sys_mbox_valid>
 800e5d6:	4603      	mov	r3, r0
 800e5d8:	2b00      	cmp	r3, #0
 800e5da:	d002      	beq.n	800e5e2 <netconn_recv_data+0x7a>
 800e5dc:	f06f 030a 	mvn.w	r3, #10
 800e5e0:	e081      	b.n	800e6e6 <netconn_recv_data+0x17e>
 800e5e2:	f06f 030e 	mvn.w	r3, #14
 800e5e6:	e07e      	b.n	800e6e6 <netconn_recv_data+0x17e>
    }
  }
#endif /* LWIP_TCP */
  LWIP_ERROR("netconn_recv: invalid recvmbox", sys_mbox_valid(&conn->recvmbox), return ERR_CONN;);
 800e5e8:	687b      	ldr	r3, [r7, #4]
 800e5ea:	3310      	adds	r3, #16
 800e5ec:	4618      	mov	r0, r3
 800e5ee:	f00b fced 	bl	8019fcc <sys_mbox_valid>
 800e5f2:	4603      	mov	r3, r0
 800e5f4:	2b00      	cmp	r3, #0
 800e5f6:	d109      	bne.n	800e60c <netconn_recv_data+0xa4>
 800e5f8:	4b3d      	ldr	r3, [pc, #244]	; (800e6f0 <netconn_recv_data+0x188>)
 800e5fa:	f240 12f5 	movw	r2, #501	; 0x1f5
 800e5fe:	4940      	ldr	r1, [pc, #256]	; (800e700 <netconn_recv_data+0x198>)
 800e600:	483d      	ldr	r0, [pc, #244]	; (800e6f8 <netconn_recv_data+0x190>)
 800e602:	f00c fbf5 	bl	801adf0 <iprintf>
 800e606:	f06f 030a 	mvn.w	r3, #10
 800e60a:	e06c      	b.n	800e6e6 <netconn_recv_data+0x17e>

  if (ERR_IS_FATAL(conn->last_err)) {
 800e60c:	687b      	ldr	r3, [r7, #4]
 800e60e:	f993 3008 	ldrsb.w	r3, [r3, #8]
 800e612:	f113 0f0c 	cmn.w	r3, #12
 800e616:	da03      	bge.n	800e620 <netconn_recv_data+0xb8>
    /* don't recv on fatal errors: this might block the application task
       waiting on recvmbox forever! */
    /* @todo: this does not allow us to fetch data that has been put into recvmbox
       before the fatal error occurred - is that a problem? */
    return conn->last_err;
 800e618:	687b      	ldr	r3, [r7, #4]
 800e61a:	f993 3008 	ldrsb.w	r3, [r3, #8]
 800e61e:	e062      	b.n	800e6e6 <netconn_recv_data+0x17e>
    }
#endif /* LWIP_TCP */
    return ERR_TIMEOUT;
  }
#else
  sys_arch_mbox_fetch(&conn->recvmbox, &buf, 0);
 800e620:	687b      	ldr	r3, [r7, #4]
 800e622:	3310      	adds	r3, #16
 800e624:	f107 0120 	add.w	r1, r7, #32
 800e628:	2200      	movs	r2, #0
 800e62a:	4618      	mov	r0, r3
 800e62c:	f00b fc73 	bl	8019f16 <sys_arch_mbox_fetch>
#endif /* LWIP_SO_RCVTIMEO*/

#if LWIP_TCP
#if (LWIP_UDP || LWIP_RAW)
  if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP)
 800e630:	687b      	ldr	r3, [r7, #4]
 800e632:	781b      	ldrb	r3, [r3, #0]
 800e634:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800e638:	2b10      	cmp	r3, #16
 800e63a:	d138      	bne.n	800e6ae <netconn_recv_data+0x146>
#endif /* (LWIP_UDP || LWIP_RAW) */
  {
    /* Let the stack know that we have taken the data. */
    /* @todo: Speedup: Don't block and wait for the answer here
       (to prevent multiple thread-switches). */
    API_MSG_VAR_REF(msg).conn = conn;
 800e63c:	687b      	ldr	r3, [r7, #4]
 800e63e:	60fb      	str	r3, [r7, #12]
    if (buf != NULL) {
 800e640:	6a3b      	ldr	r3, [r7, #32]
 800e642:	2b00      	cmp	r3, #0
 800e644:	d003      	beq.n	800e64e <netconn_recv_data+0xe6>
      API_MSG_VAR_REF(msg).msg.r.len = ((struct pbuf *)buf)->tot_len;
 800e646:	6a3b      	ldr	r3, [r7, #32]
 800e648:	891b      	ldrh	r3, [r3, #8]
 800e64a:	617b      	str	r3, [r7, #20]
 800e64c:	e001      	b.n	800e652 <netconn_recv_data+0xea>
    } else {
      API_MSG_VAR_REF(msg).msg.r.len = 1;
 800e64e:	2301      	movs	r3, #1
 800e650:	617b      	str	r3, [r7, #20]
    }

    /* don't care for the return value of lwip_netconn_do_recv */
    netconn_apimsg(lwip_netconn_do_recv, &API_MSG_VAR_REF(msg));
 800e652:	f107 030c 	add.w	r3, r7, #12
 800e656:	4619      	mov	r1, r3
 800e658:	482a      	ldr	r0, [pc, #168]	; (800e704 <netconn_recv_data+0x19c>)
 800e65a:	f7ff fde7 	bl	800e22c <netconn_apimsg>
    API_MSG_VAR_FREE(msg);

    /* If we are closed, we indicate that we no longer wish to use the socket */
    if (buf == NULL) {
 800e65e:	6a3b      	ldr	r3, [r7, #32]
 800e660:	2b00      	cmp	r3, #0
 800e662:	d120      	bne.n	800e6a6 <netconn_recv_data+0x13e>
      API_EVENT(conn, NETCONN_EVT_RCVMINUS, 0);
 800e664:	687b      	ldr	r3, [r7, #4]
 800e666:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e668:	2b00      	cmp	r3, #0
 800e66a:	d005      	beq.n	800e678 <netconn_recv_data+0x110>
 800e66c:	687b      	ldr	r3, [r7, #4]
 800e66e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e670:	2200      	movs	r2, #0
 800e672:	2101      	movs	r1, #1
 800e674:	6878      	ldr	r0, [r7, #4]
 800e676:	4798      	blx	r3
      if (conn->pcb.ip == NULL) {
 800e678:	687b      	ldr	r3, [r7, #4]
 800e67a:	685b      	ldr	r3, [r3, #4]
 800e67c:	2b00      	cmp	r3, #0
 800e67e:	d10b      	bne.n	800e698 <netconn_recv_data+0x130>
        /* race condition: RST during recv */
        return conn->last_err == ERR_OK ? ERR_RST : conn->last_err;
 800e680:	687b      	ldr	r3, [r7, #4]
 800e682:	f993 3008 	ldrsb.w	r3, [r3, #8]
 800e686:	2b00      	cmp	r3, #0
 800e688:	d003      	beq.n	800e692 <netconn_recv_data+0x12a>
 800e68a:	687b      	ldr	r3, [r7, #4]
 800e68c:	f993 3008 	ldrsb.w	r3, [r3, #8]
 800e690:	e029      	b.n	800e6e6 <netconn_recv_data+0x17e>
 800e692:	f06f 030d 	mvn.w	r3, #13
 800e696:	e026      	b.n	800e6e6 <netconn_recv_data+0x17e>
      }
      /* RX side is closed, so deallocate the recvmbox */
      netconn_close_shutdown(conn, NETCONN_SHUT_RD);
 800e698:	2101      	movs	r1, #1
 800e69a:	6878      	ldr	r0, [r7, #4]
 800e69c:	f000 f926 	bl	800e8ec <netconn_close_shutdown>
      /* Don' store ERR_CLSD as conn->err since we are only half-closed */
      return ERR_CLSD;
 800e6a0:	f06f 030e 	mvn.w	r3, #14
 800e6a4:	e01f      	b.n	800e6e6 <netconn_recv_data+0x17e>
    }
    len = ((struct pbuf *)buf)->tot_len;
 800e6a6:	6a3b      	ldr	r3, [r7, #32]
 800e6a8:	891b      	ldrh	r3, [r3, #8]
 800e6aa:	84fb      	strh	r3, [r7, #38]	; 0x26
 800e6ac:	e00d      	b.n	800e6ca <netconn_recv_data+0x162>
#if LWIP_TCP && (LWIP_UDP || LWIP_RAW)
  else
#endif /* LWIP_TCP && (LWIP_UDP || LWIP_RAW) */
#if (LWIP_UDP || LWIP_RAW)
  {
    LWIP_ASSERT("buf != NULL", buf != NULL);
 800e6ae:	6a3b      	ldr	r3, [r7, #32]
 800e6b0:	2b00      	cmp	r3, #0
 800e6b2:	d106      	bne.n	800e6c2 <netconn_recv_data+0x15a>
 800e6b4:	4b0e      	ldr	r3, [pc, #56]	; (800e6f0 <netconn_recv_data+0x188>)
 800e6b6:	f240 223e 	movw	r2, #574	; 0x23e
 800e6ba:	4913      	ldr	r1, [pc, #76]	; (800e708 <netconn_recv_data+0x1a0>)
 800e6bc:	480e      	ldr	r0, [pc, #56]	; (800e6f8 <netconn_recv_data+0x190>)
 800e6be:	f00c fb97 	bl	801adf0 <iprintf>
    len = netbuf_len((struct netbuf*)buf);
 800e6c2:	6a3b      	ldr	r3, [r7, #32]
 800e6c4:	681b      	ldr	r3, [r3, #0]
 800e6c6:	891b      	ldrh	r3, [r3, #8]
 800e6c8:	84fb      	strh	r3, [r7, #38]	; 0x26

#if LWIP_SO_RCVBUF
  SYS_ARCH_DEC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
  /* Register event with callback */
  API_EVENT(conn, NETCONN_EVT_RCVMINUS, len);
 800e6ca:	687b      	ldr	r3, [r7, #4]
 800e6cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e6ce:	2b00      	cmp	r3, #0
 800e6d0:	d005      	beq.n	800e6de <netconn_recv_data+0x176>
 800e6d2:	687b      	ldr	r3, [r7, #4]
 800e6d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e6d6:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800e6d8:	2101      	movs	r1, #1
 800e6da:	6878      	ldr	r0, [r7, #4]
 800e6dc:	4798      	blx	r3

  LWIP_DEBUGF(API_LIB_DEBUG, ("netconn_recv_data: received %p, len=%"U16_F"\n", buf, len));

  *new_buf = buf;
 800e6de:	6a3a      	ldr	r2, [r7, #32]
 800e6e0:	683b      	ldr	r3, [r7, #0]
 800e6e2:	601a      	str	r2, [r3, #0]
  /* don't set conn->last_err: it's only ERR_OK, anyway */
  return ERR_OK;
 800e6e4:	2300      	movs	r3, #0
}
 800e6e6:	4618      	mov	r0, r3
 800e6e8:	3728      	adds	r7, #40	; 0x28
 800e6ea:	46bd      	mov	sp, r7
 800e6ec:	bd80      	pop	{r7, pc}
 800e6ee:	bf00      	nop
 800e6f0:	0801bfec 	.word	0x0801bfec
 800e6f4:	0801c1e4 	.word	0x0801c1e4
 800e6f8:	0801c044 	.word	0x0801c044
 800e6fc:	0801c204 	.word	0x0801c204
 800e700:	0801c220 	.word	0x0801c220
 800e704:	0800fb35 	.word	0x0800fb35
 800e708:	0801c240 	.word	0x0801c240

0800e70c <netconn_recv>:
 * @return ERR_OK if data has been received, an error code otherwise (timeout,
 *                memory error or another error)
 */
err_t
netconn_recv(struct netconn *conn, struct netbuf **new_buf)
{
 800e70c:	b580      	push	{r7, lr}
 800e70e:	b086      	sub	sp, #24
 800e710:	af00      	add	r7, sp, #0
 800e712:	6078      	str	r0, [r7, #4]
 800e714:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  struct netbuf *buf = NULL;
 800e716:	2300      	movs	r3, #0
 800e718:	617b      	str	r3, [r7, #20]
  err_t err;
#endif /* LWIP_TCP */

  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
 800e71a:	683b      	ldr	r3, [r7, #0]
 800e71c:	2b00      	cmp	r3, #0
 800e71e:	d109      	bne.n	800e734 <netconn_recv+0x28>
 800e720:	4b31      	ldr	r3, [pc, #196]	; (800e7e8 <netconn_recv+0xdc>)
 800e722:	f44f 721d 	mov.w	r2, #628	; 0x274
 800e726:	4931      	ldr	r1, [pc, #196]	; (800e7ec <netconn_recv+0xe0>)
 800e728:	4831      	ldr	r0, [pc, #196]	; (800e7f0 <netconn_recv+0xe4>)
 800e72a:	f00c fb61 	bl	801adf0 <iprintf>
 800e72e:	f06f 030f 	mvn.w	r3, #15
 800e732:	e054      	b.n	800e7de <netconn_recv+0xd2>
  *new_buf = NULL;
 800e734:	683b      	ldr	r3, [r7, #0]
 800e736:	2200      	movs	r2, #0
 800e738:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
 800e73a:	687b      	ldr	r3, [r7, #4]
 800e73c:	2b00      	cmp	r3, #0
 800e73e:	d109      	bne.n	800e754 <netconn_recv+0x48>
 800e740:	4b29      	ldr	r3, [pc, #164]	; (800e7e8 <netconn_recv+0xdc>)
 800e742:	f240 2276 	movw	r2, #630	; 0x276
 800e746:	492b      	ldr	r1, [pc, #172]	; (800e7f4 <netconn_recv+0xe8>)
 800e748:	4829      	ldr	r0, [pc, #164]	; (800e7f0 <netconn_recv+0xe4>)
 800e74a:	f00c fb51 	bl	801adf0 <iprintf>
 800e74e:	f06f 030f 	mvn.w	r3, #15
 800e752:	e044      	b.n	800e7de <netconn_recv+0xd2>

#if LWIP_TCP
#if (LWIP_UDP || LWIP_RAW)
  if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP)
 800e754:	687b      	ldr	r3, [r7, #4]
 800e756:	781b      	ldrb	r3, [r3, #0]
 800e758:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800e75c:	2b10      	cmp	r3, #16
 800e75e:	d139      	bne.n	800e7d4 <netconn_recv+0xc8>
#endif /* (LWIP_UDP || LWIP_RAW) */
  {
    struct pbuf *p = NULL;
 800e760:	2300      	movs	r3, #0
 800e762:	60fb      	str	r3, [r7, #12]
    /* This is not a listening netconn, since recvmbox is set */

    buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 800e764:	2006      	movs	r0, #6
 800e766:	f002 fb2b 	bl	8010dc0 <memp_malloc>
 800e76a:	6178      	str	r0, [r7, #20]
    if (buf == NULL) {
 800e76c:	697b      	ldr	r3, [r7, #20]
 800e76e:	2b00      	cmp	r3, #0
 800e770:	d102      	bne.n	800e778 <netconn_recv+0x6c>
      return ERR_MEM;
 800e772:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800e776:	e032      	b.n	800e7de <netconn_recv+0xd2>
    }

    err = netconn_recv_data(conn, (void **)&p);
 800e778:	f107 030c 	add.w	r3, r7, #12
 800e77c:	4619      	mov	r1, r3
 800e77e:	6878      	ldr	r0, [r7, #4]
 800e780:	f7ff fef2 	bl	800e568 <netconn_recv_data>
 800e784:	4603      	mov	r3, r0
 800e786:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 800e788:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800e78c:	2b00      	cmp	r3, #0
 800e78e:	d006      	beq.n	800e79e <netconn_recv+0x92>
      memp_free(MEMP_NETBUF, buf);
 800e790:	6979      	ldr	r1, [r7, #20]
 800e792:	2006      	movs	r0, #6
 800e794:	f002 fb66 	bl	8010e64 <memp_free>
      return err;
 800e798:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800e79c:	e01f      	b.n	800e7de <netconn_recv+0xd2>
    }
    LWIP_ASSERT("p != NULL", p != NULL);
 800e79e:	68fb      	ldr	r3, [r7, #12]
 800e7a0:	2b00      	cmp	r3, #0
 800e7a2:	d106      	bne.n	800e7b2 <netconn_recv+0xa6>
 800e7a4:	4b10      	ldr	r3, [pc, #64]	; (800e7e8 <netconn_recv+0xdc>)
 800e7a6:	f240 228a 	movw	r2, #650	; 0x28a
 800e7aa:	4913      	ldr	r1, [pc, #76]	; (800e7f8 <netconn_recv+0xec>)
 800e7ac:	4810      	ldr	r0, [pc, #64]	; (800e7f0 <netconn_recv+0xe4>)
 800e7ae:	f00c fb1f 	bl	801adf0 <iprintf>

    buf->p = p;
 800e7b2:	68fa      	ldr	r2, [r7, #12]
 800e7b4:	697b      	ldr	r3, [r7, #20]
 800e7b6:	601a      	str	r2, [r3, #0]
    buf->ptr = p;
 800e7b8:	68fa      	ldr	r2, [r7, #12]
 800e7ba:	697b      	ldr	r3, [r7, #20]
 800e7bc:	605a      	str	r2, [r3, #4]
    buf->port = 0;
 800e7be:	697b      	ldr	r3, [r7, #20]
 800e7c0:	2200      	movs	r2, #0
 800e7c2:	819a      	strh	r2, [r3, #12]
    ip_addr_set_zero(&buf->addr);
 800e7c4:	697b      	ldr	r3, [r7, #20]
 800e7c6:	2200      	movs	r2, #0
 800e7c8:	609a      	str	r2, [r3, #8]
    *new_buf = buf;
 800e7ca:	683b      	ldr	r3, [r7, #0]
 800e7cc:	697a      	ldr	r2, [r7, #20]
 800e7ce:	601a      	str	r2, [r3, #0]
    /* don't set conn->last_err: it's only ERR_OK, anyway */
    return ERR_OK;
 800e7d0:	2300      	movs	r3, #0
 800e7d2:	e004      	b.n	800e7de <netconn_recv+0xd2>
#if LWIP_TCP && (LWIP_UDP || LWIP_RAW)
  else
#endif /* LWIP_TCP && (LWIP_UDP || LWIP_RAW) */
  {
#if (LWIP_UDP || LWIP_RAW)
    return netconn_recv_data(conn, (void **)new_buf);
 800e7d4:	6839      	ldr	r1, [r7, #0]
 800e7d6:	6878      	ldr	r0, [r7, #4]
 800e7d8:	f7ff fec6 	bl	800e568 <netconn_recv_data>
 800e7dc:	4603      	mov	r3, r0
#endif /* (LWIP_UDP || LWIP_RAW) */
  }
}
 800e7de:	4618      	mov	r0, r3
 800e7e0:	3718      	adds	r7, #24
 800e7e2:	46bd      	mov	sp, r7
 800e7e4:	bd80      	pop	{r7, pc}
 800e7e6:	bf00      	nop
 800e7e8:	0801bfec 	.word	0x0801bfec
 800e7ec:	0801c1e4 	.word	0x0801c1e4
 800e7f0:	0801c044 	.word	0x0801c044
 800e7f4:	0801c204 	.word	0x0801c204
 800e7f8:	0801c24c 	.word	0x0801c24c

0800e7fc <netconn_write_partly>:
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t
netconn_write_partly(struct netconn *conn, const void *dataptr, size_t size,
                     u8_t apiflags, size_t *bytes_written)
{
 800e7fc:	b580      	push	{r7, lr}
 800e7fe:	b08a      	sub	sp, #40	; 0x28
 800e800:	af00      	add	r7, sp, #0
 800e802:	60f8      	str	r0, [r7, #12]
 800e804:	60b9      	str	r1, [r7, #8]
 800e806:	607a      	str	r2, [r7, #4]
 800e808:	70fb      	strb	r3, [r7, #3]
  API_MSG_VAR_DECLARE(msg);
  err_t err;
  u8_t dontblock;

  LWIP_ERROR("netconn_write: invalid conn",  (conn != NULL), return ERR_ARG;);
 800e80a:	68fb      	ldr	r3, [r7, #12]
 800e80c:	2b00      	cmp	r3, #0
 800e80e:	d109      	bne.n	800e824 <netconn_write_partly+0x28>
 800e810:	4b31      	ldr	r3, [pc, #196]	; (800e8d8 <netconn_write_partly+0xdc>)
 800e812:	f240 22e6 	movw	r2, #742	; 0x2e6
 800e816:	4931      	ldr	r1, [pc, #196]	; (800e8dc <netconn_write_partly+0xe0>)
 800e818:	4831      	ldr	r0, [pc, #196]	; (800e8e0 <netconn_write_partly+0xe4>)
 800e81a:	f00c fae9 	bl	801adf0 <iprintf>
 800e81e:	f06f 030f 	mvn.w	r3, #15
 800e822:	e054      	b.n	800e8ce <netconn_write_partly+0xd2>
  LWIP_ERROR("netconn_write: invalid conn->type",  (NETCONNTYPE_GROUP(conn->type)== NETCONN_TCP), return ERR_VAL;);
 800e824:	68fb      	ldr	r3, [r7, #12]
 800e826:	781b      	ldrb	r3, [r3, #0]
 800e828:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800e82c:	2b10      	cmp	r3, #16
 800e82e:	d009      	beq.n	800e844 <netconn_write_partly+0x48>
 800e830:	4b29      	ldr	r3, [pc, #164]	; (800e8d8 <netconn_write_partly+0xdc>)
 800e832:	f240 22e7 	movw	r2, #743	; 0x2e7
 800e836:	492b      	ldr	r1, [pc, #172]	; (800e8e4 <netconn_write_partly+0xe8>)
 800e838:	4829      	ldr	r0, [pc, #164]	; (800e8e0 <netconn_write_partly+0xe4>)
 800e83a:	f00c fad9 	bl	801adf0 <iprintf>
 800e83e:	f06f 0305 	mvn.w	r3, #5
 800e842:	e044      	b.n	800e8ce <netconn_write_partly+0xd2>
  if (size == 0) {
 800e844:	687b      	ldr	r3, [r7, #4]
 800e846:	2b00      	cmp	r3, #0
 800e848:	d101      	bne.n	800e84e <netconn_write_partly+0x52>
    return ERR_OK;
 800e84a:	2300      	movs	r3, #0
 800e84c:	e03f      	b.n	800e8ce <netconn_write_partly+0xd2>
  }
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 800e84e:	68fb      	ldr	r3, [r7, #12]
 800e850:	7f1b      	ldrb	r3, [r3, #28]
 800e852:	f003 0302 	and.w	r3, r3, #2
 800e856:	2b00      	cmp	r3, #0
 800e858:	d104      	bne.n	800e864 <netconn_write_partly+0x68>
 800e85a:	78fb      	ldrb	r3, [r7, #3]
 800e85c:	f003 0304 	and.w	r3, r3, #4
 800e860:	2b00      	cmp	r3, #0
 800e862:	d001      	beq.n	800e868 <netconn_write_partly+0x6c>
 800e864:	2301      	movs	r3, #1
 800e866:	e000      	b.n	800e86a <netconn_write_partly+0x6e>
 800e868:	2300      	movs	r3, #0
 800e86a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#if LWIP_SO_SNDTIMEO
  if (conn->send_timeout != 0) {
    dontblock = 1;
  }
#endif /* LWIP_SO_SNDTIMEO */
  if (dontblock && !bytes_written) {
 800e86e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e872:	2b00      	cmp	r3, #0
 800e874:	d005      	beq.n	800e882 <netconn_write_partly+0x86>
 800e876:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e878:	2b00      	cmp	r3, #0
 800e87a:	d102      	bne.n	800e882 <netconn_write_partly+0x86>
    /* This implies netconn_write() cannot be used for non-blocking send, since
       it has no way to return the number of bytes written. */
    return ERR_VAL;
 800e87c:	f06f 0305 	mvn.w	r3, #5
 800e880:	e025      	b.n	800e8ce <netconn_write_partly+0xd2>
  }

  API_MSG_VAR_ALLOC(msg);
  /* non-blocking write sends as much  */
  API_MSG_VAR_REF(msg).conn = conn;
 800e882:	68fb      	ldr	r3, [r7, #12]
 800e884:	613b      	str	r3, [r7, #16]
  API_MSG_VAR_REF(msg).msg.w.dataptr = dataptr;
 800e886:	68bb      	ldr	r3, [r7, #8]
 800e888:	61bb      	str	r3, [r7, #24]
  API_MSG_VAR_REF(msg).msg.w.apiflags = apiflags;
 800e88a:	78fb      	ldrb	r3, [r7, #3]
 800e88c:	f887 3020 	strb.w	r3, [r7, #32]
  API_MSG_VAR_REF(msg).msg.w.len = size;
 800e890:	687b      	ldr	r3, [r7, #4]
 800e892:	61fb      	str	r3, [r7, #28]
#endif /* LWIP_SO_SNDTIMEO */

  /* For locking the core: this _can_ be delayed on low memory/low send buffer,
     but if it is, this is done inside api_msg.c:do_write(), so we can use the
     non-blocking version here. */
  err = netconn_apimsg(lwip_netconn_do_write, &API_MSG_VAR_REF(msg));
 800e894:	f107 0310 	add.w	r3, r7, #16
 800e898:	4619      	mov	r1, r3
 800e89a:	4813      	ldr	r0, [pc, #76]	; (800e8e8 <netconn_write_partly+0xec>)
 800e89c:	f7ff fcc6 	bl	800e22c <netconn_apimsg>
 800e8a0:	4603      	mov	r3, r0
 800e8a2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  if ((err == ERR_OK) && (bytes_written != NULL)) {
 800e8a6:	f997 3026 	ldrsb.w	r3, [r7, #38]	; 0x26
 800e8aa:	2b00      	cmp	r3, #0
 800e8ac:	d10d      	bne.n	800e8ca <netconn_write_partly+0xce>
 800e8ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e8b0:	2b00      	cmp	r3, #0
 800e8b2:	d00a      	beq.n	800e8ca <netconn_write_partly+0xce>
    if (dontblock) {
 800e8b4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e8b8:	2b00      	cmp	r3, #0
 800e8ba:	d003      	beq.n	800e8c4 <netconn_write_partly+0xc8>
      /* nonblocking write: maybe the data has been sent partly */
      *bytes_written = API_MSG_VAR_REF(msg).msg.w.len;
 800e8bc:	69fa      	ldr	r2, [r7, #28]
 800e8be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e8c0:	601a      	str	r2, [r3, #0]
 800e8c2:	e002      	b.n	800e8ca <netconn_write_partly+0xce>
    } else {
      /* blocking call succeeded: all data has been sent if it */
      *bytes_written = size;
 800e8c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e8c6:	687a      	ldr	r2, [r7, #4]
 800e8c8:	601a      	str	r2, [r3, #0]
    }
  }
  API_MSG_VAR_FREE(msg);

  return err;
 800e8ca:	f997 3026 	ldrsb.w	r3, [r7, #38]	; 0x26
}
 800e8ce:	4618      	mov	r0, r3
 800e8d0:	3728      	adds	r7, #40	; 0x28
 800e8d2:	46bd      	mov	sp, r7
 800e8d4:	bd80      	pop	{r7, pc}
 800e8d6:	bf00      	nop
 800e8d8:	0801bfec 	.word	0x0801bfec
 800e8dc:	0801c274 	.word	0x0801c274
 800e8e0:	0801c044 	.word	0x0801c044
 800e8e4:	0801c290 	.word	0x0801c290
 800e8e8:	0800ff15 	.word	0x0800ff15

0800e8ec <netconn_close_shutdown>:
 * @param how fully close or only shutdown one side?
 * @return ERR_OK if the netconn was closed, any other err_t on error
 */
static err_t
netconn_close_shutdown(struct netconn *conn, u8_t how)
{
 800e8ec:	b580      	push	{r7, lr}
 800e8ee:	b088      	sub	sp, #32
 800e8f0:	af00      	add	r7, sp, #0
 800e8f2:	6078      	str	r0, [r7, #4]
 800e8f4:	460b      	mov	r3, r1
 800e8f6:	70fb      	strb	r3, [r7, #3]
  API_MSG_VAR_DECLARE(msg);
  err_t err;
  LWIP_UNUSED_ARG(how);

  LWIP_ERROR("netconn_close: invalid conn",  (conn != NULL), return ERR_ARG;);
 800e8f8:	687b      	ldr	r3, [r7, #4]
 800e8fa:	2b00      	cmp	r3, #0
 800e8fc:	d109      	bne.n	800e912 <netconn_close_shutdown+0x26>
 800e8fe:	4b0f      	ldr	r3, [pc, #60]	; (800e93c <netconn_close_shutdown+0x50>)
 800e900:	f44f 724a 	mov.w	r2, #808	; 0x328
 800e904:	490e      	ldr	r1, [pc, #56]	; (800e940 <netconn_close_shutdown+0x54>)
 800e906:	480f      	ldr	r0, [pc, #60]	; (800e944 <netconn_close_shutdown+0x58>)
 800e908:	f00c fa72 	bl	801adf0 <iprintf>
 800e90c:	f06f 030f 	mvn.w	r3, #15
 800e910:	e00f      	b.n	800e932 <netconn_close_shutdown+0x46>

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 800e912:	687b      	ldr	r3, [r7, #4]
 800e914:	60bb      	str	r3, [r7, #8]
#if LWIP_TCP
  /* shutting down both ends is the same as closing */
  API_MSG_VAR_REF(msg).msg.sd.shut = how;
 800e916:	78fb      	ldrb	r3, [r7, #3]
 800e918:	743b      	strb	r3, [r7, #16]
#if LWIP_SO_SNDTIMEO || LWIP_SO_LINGER
  /* get the time we started, which is later compared to
     sys_now() + conn->send_timeout */
  API_MSG_VAR_REF(msg).msg.sd.time_started = sys_now();
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 800e91a:	2329      	movs	r3, #41	; 0x29
 800e91c:	747b      	strb	r3, [r7, #17]
    ((LWIP_TCP_CLOSE_TIMEOUT_MS_DEFAULT + TCP_SLOW_INTERVAL - 1) / TCP_SLOW_INTERVAL) + 1;
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
#endif /* LWIP_TCP */
  err = netconn_apimsg(lwip_netconn_do_close, &API_MSG_VAR_REF(msg));
 800e91e:	f107 0308 	add.w	r3, r7, #8
 800e922:	4619      	mov	r1, r3
 800e924:	4808      	ldr	r0, [pc, #32]	; (800e948 <netconn_close_shutdown+0x5c>)
 800e926:	f7ff fc81 	bl	800e22c <netconn_apimsg>
 800e92a:	4603      	mov	r3, r0
 800e92c:	77fb      	strb	r3, [r7, #31]
  API_MSG_VAR_FREE(msg);

  return err;
 800e92e:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800e932:	4618      	mov	r0, r3
 800e934:	3720      	adds	r7, #32
 800e936:	46bd      	mov	sp, r7
 800e938:	bd80      	pop	{r7, pc}
 800e93a:	bf00      	nop
 800e93c:	0801bfec 	.word	0x0801bfec
 800e940:	0801c2b4 	.word	0x0801c2b4
 800e944:	0801c044 	.word	0x0801c044
 800e948:	08010075 	.word	0x08010075

0800e94c <netconn_close>:
 * @param conn the TCP netconn to close
 * @return ERR_OK if the netconn was closed, any other err_t on error
 */
err_t
netconn_close(struct netconn *conn)
{
 800e94c:	b580      	push	{r7, lr}
 800e94e:	b082      	sub	sp, #8
 800e950:	af00      	add	r7, sp, #0
 800e952:	6078      	str	r0, [r7, #4]
  /* shutting down both ends is the same as closing */
  return netconn_close_shutdown(conn, NETCONN_SHUT_RDWR);
 800e954:	2103      	movs	r1, #3
 800e956:	6878      	ldr	r0, [r7, #4]
 800e958:	f7ff ffc8 	bl	800e8ec <netconn_close_shutdown>
 800e95c:	4603      	mov	r3, r0
}
 800e95e:	4618      	mov	r0, r3
 800e960:	3708      	adds	r7, #8
 800e962:	46bd      	mov	sp, r7
 800e964:	bd80      	pop	{r7, pc}
	...

0800e968 <recv_udp>:
 * @see udp.h (struct udp_pcb.recv) for parameters
 */
static void
recv_udp(void *arg, struct udp_pcb *pcb, struct pbuf *p,
   const ip_addr_t *addr, u16_t port)
{
 800e968:	b580      	push	{r7, lr}
 800e96a:	b088      	sub	sp, #32
 800e96c:	af00      	add	r7, sp, #0
 800e96e:	60f8      	str	r0, [r7, #12]
 800e970:	60b9      	str	r1, [r7, #8]
 800e972:	607a      	str	r2, [r7, #4]
 800e974:	603b      	str	r3, [r7, #0]
#if LWIP_SO_RCVBUF
  int recv_avail;
#endif /* LWIP_SO_RCVBUF */

  LWIP_UNUSED_ARG(pcb); /* only used for asserts... */
  LWIP_ASSERT("recv_udp must have a pcb argument", pcb != NULL);
 800e976:	68bb      	ldr	r3, [r7, #8]
 800e978:	2b00      	cmp	r3, #0
 800e97a:	d105      	bne.n	800e988 <recv_udp+0x20>
 800e97c:	4b34      	ldr	r3, [pc, #208]	; (800ea50 <recv_udp+0xe8>)
 800e97e:	22b1      	movs	r2, #177	; 0xb1
 800e980:	4934      	ldr	r1, [pc, #208]	; (800ea54 <recv_udp+0xec>)
 800e982:	4835      	ldr	r0, [pc, #212]	; (800ea58 <recv_udp+0xf0>)
 800e984:	f00c fa34 	bl	801adf0 <iprintf>
  LWIP_ASSERT("recv_udp must have an argument", arg != NULL);
 800e988:	68fb      	ldr	r3, [r7, #12]
 800e98a:	2b00      	cmp	r3, #0
 800e98c:	d105      	bne.n	800e99a <recv_udp+0x32>
 800e98e:	4b30      	ldr	r3, [pc, #192]	; (800ea50 <recv_udp+0xe8>)
 800e990:	22b2      	movs	r2, #178	; 0xb2
 800e992:	4932      	ldr	r1, [pc, #200]	; (800ea5c <recv_udp+0xf4>)
 800e994:	4830      	ldr	r0, [pc, #192]	; (800ea58 <recv_udp+0xf0>)
 800e996:	f00c fa2b 	bl	801adf0 <iprintf>
  conn = (struct netconn *)arg;
 800e99a:	68fb      	ldr	r3, [r7, #12]
 800e99c:	61fb      	str	r3, [r7, #28]

  if (conn == NULL) {
 800e99e:	69fb      	ldr	r3, [r7, #28]
 800e9a0:	2b00      	cmp	r3, #0
 800e9a2:	d103      	bne.n	800e9ac <recv_udp+0x44>
    pbuf_free(p);
 800e9a4:	6878      	ldr	r0, [r7, #4]
 800e9a6:	f002 ffb7 	bl	8011918 <pbuf_free>
    return;
 800e9aa:	e04d      	b.n	800ea48 <recv_udp+0xe0>
  }

  LWIP_ASSERT("recv_udp: recv for wrong pcb!", conn->pcb.udp == pcb);
 800e9ac:	69fb      	ldr	r3, [r7, #28]
 800e9ae:	685b      	ldr	r3, [r3, #4]
 800e9b0:	68ba      	ldr	r2, [r7, #8]
 800e9b2:	429a      	cmp	r2, r3
 800e9b4:	d005      	beq.n	800e9c2 <recv_udp+0x5a>
 800e9b6:	4b26      	ldr	r3, [pc, #152]	; (800ea50 <recv_udp+0xe8>)
 800e9b8:	22ba      	movs	r2, #186	; 0xba
 800e9ba:	4929      	ldr	r1, [pc, #164]	; (800ea60 <recv_udp+0xf8>)
 800e9bc:	4826      	ldr	r0, [pc, #152]	; (800ea58 <recv_udp+0xf0>)
 800e9be:	f00c fa17 	bl	801adf0 <iprintf>
#if LWIP_SO_RCVBUF
  SYS_ARCH_GET(conn->recv_avail, recv_avail);
  if (!sys_mbox_valid(&conn->recvmbox) ||
      ((recv_avail + (int)(p->tot_len)) > conn->recv_bufsize)) {
#else  /* LWIP_SO_RCVBUF */
  if (!sys_mbox_valid(&conn->recvmbox)) {
 800e9c2:	69fb      	ldr	r3, [r7, #28]
 800e9c4:	3310      	adds	r3, #16
 800e9c6:	4618      	mov	r0, r3
 800e9c8:	f00b fb00 	bl	8019fcc <sys_mbox_valid>
 800e9cc:	4603      	mov	r3, r0
 800e9ce:	2b00      	cmp	r3, #0
 800e9d0:	d103      	bne.n	800e9da <recv_udp+0x72>
#endif /* LWIP_SO_RCVBUF */
    pbuf_free(p);
 800e9d2:	6878      	ldr	r0, [r7, #4]
 800e9d4:	f002 ffa0 	bl	8011918 <pbuf_free>
    return;
 800e9d8:	e036      	b.n	800ea48 <recv_udp+0xe0>
  }

  buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 800e9da:	2006      	movs	r0, #6
 800e9dc:	f002 f9f0 	bl	8010dc0 <memp_malloc>
 800e9e0:	61b8      	str	r0, [r7, #24]
  if (buf == NULL) {
 800e9e2:	69bb      	ldr	r3, [r7, #24]
 800e9e4:	2b00      	cmp	r3, #0
 800e9e6:	d103      	bne.n	800e9f0 <recv_udp+0x88>
    pbuf_free(p);
 800e9e8:	6878      	ldr	r0, [r7, #4]
 800e9ea:	f002 ff95 	bl	8011918 <pbuf_free>
    return;
 800e9ee:	e02b      	b.n	800ea48 <recv_udp+0xe0>
  } else {
    buf->p = p;
 800e9f0:	69bb      	ldr	r3, [r7, #24]
 800e9f2:	687a      	ldr	r2, [r7, #4]
 800e9f4:	601a      	str	r2, [r3, #0]
    buf->ptr = p;
 800e9f6:	69bb      	ldr	r3, [r7, #24]
 800e9f8:	687a      	ldr	r2, [r7, #4]
 800e9fa:	605a      	str	r2, [r3, #4]
    ip_addr_set(&buf->addr, addr);
 800e9fc:	683b      	ldr	r3, [r7, #0]
 800e9fe:	2b00      	cmp	r3, #0
 800ea00:	d002      	beq.n	800ea08 <recv_udp+0xa0>
 800ea02:	683b      	ldr	r3, [r7, #0]
 800ea04:	681b      	ldr	r3, [r3, #0]
 800ea06:	e000      	b.n	800ea0a <recv_udp+0xa2>
 800ea08:	2300      	movs	r3, #0
 800ea0a:	69ba      	ldr	r2, [r7, #24]
 800ea0c:	6093      	str	r3, [r2, #8]
    buf->port = port;
 800ea0e:	69bb      	ldr	r3, [r7, #24]
 800ea10:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800ea12:	819a      	strh	r2, [r3, #12]
      buf->toport_chksum = udphdr->dest;
    }
#endif /* LWIP_NETBUF_RECVINFO */
  }

  len = p->tot_len;
 800ea14:	687b      	ldr	r3, [r7, #4]
 800ea16:	891b      	ldrh	r3, [r3, #8]
 800ea18:	82fb      	strh	r3, [r7, #22]
  if (sys_mbox_trypost(&conn->recvmbox, buf) != ERR_OK) {
 800ea1a:	69fb      	ldr	r3, [r7, #28]
 800ea1c:	3310      	adds	r3, #16
 800ea1e:	69b9      	ldr	r1, [r7, #24]
 800ea20:	4618      	mov	r0, r3
 800ea22:	f00b fa5e 	bl	8019ee2 <sys_mbox_trypost>
 800ea26:	4603      	mov	r3, r0
 800ea28:	2b00      	cmp	r3, #0
 800ea2a:	d003      	beq.n	800ea34 <recv_udp+0xcc>
    netbuf_delete(buf);
 800ea2c:	69b8      	ldr	r0, [r7, #24]
 800ea2e:	f001 fbc9 	bl	80101c4 <netbuf_delete>
    return;
 800ea32:	e009      	b.n	800ea48 <recv_udp+0xe0>
  } else {
#if LWIP_SO_RCVBUF
    SYS_ARCH_INC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 800ea34:	69fb      	ldr	r3, [r7, #28]
 800ea36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ea38:	2b00      	cmp	r3, #0
 800ea3a:	d005      	beq.n	800ea48 <recv_udp+0xe0>
 800ea3c:	69fb      	ldr	r3, [r7, #28]
 800ea3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ea40:	8afa      	ldrh	r2, [r7, #22]
 800ea42:	2100      	movs	r1, #0
 800ea44:	69f8      	ldr	r0, [r7, #28]
 800ea46:	4798      	blx	r3
  }
}
 800ea48:	3720      	adds	r7, #32
 800ea4a:	46bd      	mov	sp, r7
 800ea4c:	bd80      	pop	{r7, pc}
 800ea4e:	bf00      	nop
 800ea50:	0801c2d0 	.word	0x0801c2d0
 800ea54:	0801c304 	.word	0x0801c304
 800ea58:	0801c328 	.word	0x0801c328
 800ea5c:	0801c350 	.word	0x0801c350
 800ea60:	0801c370 	.word	0x0801c370

0800ea64 <recv_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.recv) for parameters and return value
 */
static err_t
recv_tcp(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 800ea64:	b580      	push	{r7, lr}
 800ea66:	b088      	sub	sp, #32
 800ea68:	af00      	add	r7, sp, #0
 800ea6a:	60f8      	str	r0, [r7, #12]
 800ea6c:	60b9      	str	r1, [r7, #8]
 800ea6e:	607a      	str	r2, [r7, #4]
 800ea70:	70fb      	strb	r3, [r7, #3]
  struct netconn *conn;
  u16_t len;

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("recv_tcp must have a pcb argument", pcb != NULL);
 800ea72:	68bb      	ldr	r3, [r7, #8]
 800ea74:	2b00      	cmp	r3, #0
 800ea76:	d105      	bne.n	800ea84 <recv_tcp+0x20>
 800ea78:	4b39      	ldr	r3, [pc, #228]	; (800eb60 <recv_tcp+0xfc>)
 800ea7a:	22f9      	movs	r2, #249	; 0xf9
 800ea7c:	4939      	ldr	r1, [pc, #228]	; (800eb64 <recv_tcp+0x100>)
 800ea7e:	483a      	ldr	r0, [pc, #232]	; (800eb68 <recv_tcp+0x104>)
 800ea80:	f00c f9b6 	bl	801adf0 <iprintf>
  LWIP_ASSERT("recv_tcp must have an argument", arg != NULL);
 800ea84:	68fb      	ldr	r3, [r7, #12]
 800ea86:	2b00      	cmp	r3, #0
 800ea88:	d105      	bne.n	800ea96 <recv_tcp+0x32>
 800ea8a:	4b35      	ldr	r3, [pc, #212]	; (800eb60 <recv_tcp+0xfc>)
 800ea8c:	22fa      	movs	r2, #250	; 0xfa
 800ea8e:	4937      	ldr	r1, [pc, #220]	; (800eb6c <recv_tcp+0x108>)
 800ea90:	4835      	ldr	r0, [pc, #212]	; (800eb68 <recv_tcp+0x104>)
 800ea92:	f00c f9ad 	bl	801adf0 <iprintf>
  conn = (struct netconn *)arg;
 800ea96:	68fb      	ldr	r3, [r7, #12]
 800ea98:	61bb      	str	r3, [r7, #24]

  if (conn == NULL) {
 800ea9a:	69bb      	ldr	r3, [r7, #24]
 800ea9c:	2b00      	cmp	r3, #0
 800ea9e:	d102      	bne.n	800eaa6 <recv_tcp+0x42>
    return ERR_VAL;
 800eaa0:	f06f 0305 	mvn.w	r3, #5
 800eaa4:	e057      	b.n	800eb56 <recv_tcp+0xf2>
  }
  LWIP_ASSERT("recv_tcp: recv for wrong pcb!", conn->pcb.tcp == pcb);
 800eaa6:	69bb      	ldr	r3, [r7, #24]
 800eaa8:	685b      	ldr	r3, [r3, #4]
 800eaaa:	68ba      	ldr	r2, [r7, #8]
 800eaac:	429a      	cmp	r2, r3
 800eaae:	d006      	beq.n	800eabe <recv_tcp+0x5a>
 800eab0:	4b2b      	ldr	r3, [pc, #172]	; (800eb60 <recv_tcp+0xfc>)
 800eab2:	f44f 7280 	mov.w	r2, #256	; 0x100
 800eab6:	492e      	ldr	r1, [pc, #184]	; (800eb70 <recv_tcp+0x10c>)
 800eab8:	482b      	ldr	r0, [pc, #172]	; (800eb68 <recv_tcp+0x104>)
 800eaba:	f00c f999 	bl	801adf0 <iprintf>

  if (!sys_mbox_valid(&conn->recvmbox)) {
 800eabe:	69bb      	ldr	r3, [r7, #24]
 800eac0:	3310      	adds	r3, #16
 800eac2:	4618      	mov	r0, r3
 800eac4:	f00b fa82 	bl	8019fcc <sys_mbox_valid>
 800eac8:	4603      	mov	r3, r0
 800eaca:	2b00      	cmp	r3, #0
 800eacc:	d10d      	bne.n	800eaea <recv_tcp+0x86>
    /* recvmbox already deleted */
    if (p != NULL) {
 800eace:	687b      	ldr	r3, [r7, #4]
 800ead0:	2b00      	cmp	r3, #0
 800ead2:	d008      	beq.n	800eae6 <recv_tcp+0x82>
      tcp_recved(pcb, p->tot_len);
 800ead4:	687b      	ldr	r3, [r7, #4]
 800ead6:	891b      	ldrh	r3, [r3, #8]
 800ead8:	4619      	mov	r1, r3
 800eada:	68b8      	ldr	r0, [r7, #8]
 800eadc:	f003 fdf6 	bl	80126cc <tcp_recved>
      pbuf_free(p);
 800eae0:	6878      	ldr	r0, [r7, #4]
 800eae2:	f002 ff19 	bl	8011918 <pbuf_free>
    }
    return ERR_OK;
 800eae6:	2300      	movs	r3, #0
 800eae8:	e035      	b.n	800eb56 <recv_tcp+0xf2>
  /* Unlike for UDP or RAW pcbs, don't check for available space
     using recv_avail since that could break the connection
     (data is already ACKed) */

  /* don't overwrite fatal errors! */
  if (err != ERR_OK) {
 800eaea:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800eaee:	2b00      	cmp	r3, #0
 800eaf0:	d011      	beq.n	800eb16 <recv_tcp+0xb2>
    NETCONN_SET_SAFE_ERR(conn, err);
 800eaf2:	69bb      	ldr	r3, [r7, #24]
 800eaf4:	2b00      	cmp	r3, #0
 800eaf6:	d00e      	beq.n	800eb16 <recv_tcp+0xb2>
 800eaf8:	f00b fb84 	bl	801a204 <sys_arch_protect>
 800eafc:	6178      	str	r0, [r7, #20]
 800eafe:	69bb      	ldr	r3, [r7, #24]
 800eb00:	f993 3008 	ldrsb.w	r3, [r3, #8]
 800eb04:	f113 0f0c 	cmn.w	r3, #12
 800eb08:	db02      	blt.n	800eb10 <recv_tcp+0xac>
 800eb0a:	69bb      	ldr	r3, [r7, #24]
 800eb0c:	78fa      	ldrb	r2, [r7, #3]
 800eb0e:	721a      	strb	r2, [r3, #8]
 800eb10:	6978      	ldr	r0, [r7, #20]
 800eb12:	f00b fb85 	bl	801a220 <sys_arch_unprotect>
  }

  if (p != NULL) {
 800eb16:	687b      	ldr	r3, [r7, #4]
 800eb18:	2b00      	cmp	r3, #0
 800eb1a:	d003      	beq.n	800eb24 <recv_tcp+0xc0>
    len = p->tot_len;
 800eb1c:	687b      	ldr	r3, [r7, #4]
 800eb1e:	891b      	ldrh	r3, [r3, #8]
 800eb20:	83fb      	strh	r3, [r7, #30]
 800eb22:	e001      	b.n	800eb28 <recv_tcp+0xc4>
  } else {
    len = 0;
 800eb24:	2300      	movs	r3, #0
 800eb26:	83fb      	strh	r3, [r7, #30]
  }

  if (sys_mbox_trypost(&conn->recvmbox, p) != ERR_OK) {
 800eb28:	69bb      	ldr	r3, [r7, #24]
 800eb2a:	3310      	adds	r3, #16
 800eb2c:	6879      	ldr	r1, [r7, #4]
 800eb2e:	4618      	mov	r0, r3
 800eb30:	f00b f9d7 	bl	8019ee2 <sys_mbox_trypost>
 800eb34:	4603      	mov	r3, r0
 800eb36:	2b00      	cmp	r3, #0
 800eb38:	d002      	beq.n	800eb40 <recv_tcp+0xdc>
    /* don't deallocate p: it is presented to us later again from tcp_fasttmr! */
    return ERR_MEM;
 800eb3a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800eb3e:	e00a      	b.n	800eb56 <recv_tcp+0xf2>
  } else {
#if LWIP_SO_RCVBUF
    SYS_ARCH_INC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 800eb40:	69bb      	ldr	r3, [r7, #24]
 800eb42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800eb44:	2b00      	cmp	r3, #0
 800eb46:	d005      	beq.n	800eb54 <recv_tcp+0xf0>
 800eb48:	69bb      	ldr	r3, [r7, #24]
 800eb4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800eb4c:	8bfa      	ldrh	r2, [r7, #30]
 800eb4e:	2100      	movs	r1, #0
 800eb50:	69b8      	ldr	r0, [r7, #24]
 800eb52:	4798      	blx	r3
  }

  return ERR_OK;
 800eb54:	2300      	movs	r3, #0
}
 800eb56:	4618      	mov	r0, r3
 800eb58:	3720      	adds	r7, #32
 800eb5a:	46bd      	mov	sp, r7
 800eb5c:	bd80      	pop	{r7, pc}
 800eb5e:	bf00      	nop
 800eb60:	0801c2d0 	.word	0x0801c2d0
 800eb64:	0801c390 	.word	0x0801c390
 800eb68:	0801c328 	.word	0x0801c328
 800eb6c:	0801c3b4 	.word	0x0801c3b4
 800eb70:	0801c3d4 	.word	0x0801c3d4

0800eb74 <poll_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.poll) for parameters and return value
 */
static err_t
poll_tcp(void *arg, struct tcp_pcb *pcb)
{
 800eb74:	b580      	push	{r7, lr}
 800eb76:	b084      	sub	sp, #16
 800eb78:	af00      	add	r7, sp, #0
 800eb7a:	6078      	str	r0, [r7, #4]
 800eb7c:	6039      	str	r1, [r7, #0]
  struct netconn *conn = (struct netconn *)arg;
 800eb7e:	687b      	ldr	r3, [r7, #4]
 800eb80:	60fb      	str	r3, [r7, #12]

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 800eb82:	68fb      	ldr	r3, [r7, #12]
 800eb84:	2b00      	cmp	r3, #0
 800eb86:	d106      	bne.n	800eb96 <poll_tcp+0x22>
 800eb88:	4b29      	ldr	r3, [pc, #164]	; (800ec30 <poll_tcp+0xbc>)
 800eb8a:	f44f 729c 	mov.w	r2, #312	; 0x138
 800eb8e:	4929      	ldr	r1, [pc, #164]	; (800ec34 <poll_tcp+0xc0>)
 800eb90:	4829      	ldr	r0, [pc, #164]	; (800ec38 <poll_tcp+0xc4>)
 800eb92:	f00c f92d 	bl	801adf0 <iprintf>

  if (conn->state == NETCONN_WRITE) {
 800eb96:	68fb      	ldr	r3, [r7, #12]
 800eb98:	785b      	ldrb	r3, [r3, #1]
 800eb9a:	2b01      	cmp	r3, #1
 800eb9c:	d104      	bne.n	800eba8 <poll_tcp+0x34>
    lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 800eb9e:	2101      	movs	r1, #1
 800eba0:	68f8      	ldr	r0, [r7, #12]
 800eba2:	f001 f813 	bl	800fbcc <lwip_netconn_do_writemore>
 800eba6:	e016      	b.n	800ebd6 <poll_tcp+0x62>
  } else if (conn->state == NETCONN_CLOSE) {
 800eba8:	68fb      	ldr	r3, [r7, #12]
 800ebaa:	785b      	ldrb	r3, [r3, #1]
 800ebac:	2b04      	cmp	r3, #4
 800ebae:	d112      	bne.n	800ebd6 <poll_tcp+0x62>
#if !LWIP_SO_SNDTIMEO && !LWIP_SO_LINGER
    if (conn->current_msg && conn->current_msg->msg.sd.polls_left) {
 800ebb0:	68fb      	ldr	r3, [r7, #12]
 800ebb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ebb4:	2b00      	cmp	r3, #0
 800ebb6:	d00a      	beq.n	800ebce <poll_tcp+0x5a>
 800ebb8:	68fb      	ldr	r3, [r7, #12]
 800ebba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ebbc:	7a5b      	ldrb	r3, [r3, #9]
 800ebbe:	2b00      	cmp	r3, #0
 800ebc0:	d005      	beq.n	800ebce <poll_tcp+0x5a>
      conn->current_msg->msg.sd.polls_left--;
 800ebc2:	68fb      	ldr	r3, [r7, #12]
 800ebc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ebc6:	7a5a      	ldrb	r2, [r3, #9]
 800ebc8:	3a01      	subs	r2, #1
 800ebca:	b2d2      	uxtb	r2, r2
 800ebcc:	725a      	strb	r2, [r3, #9]
    }
#endif /* !LWIP_SO_SNDTIMEO && !LWIP_SO_LINGER */
    lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 800ebce:	2101      	movs	r1, #1
 800ebd0:	68f8      	ldr	r0, [r7, #12]
 800ebd2:	f000 fc13 	bl	800f3fc <lwip_netconn_do_close_internal>
  }
  /* @todo: implement connect timeout here? */

  /* Did a nonblocking write fail before? Then check available write-space. */
  if (conn->flags & NETCONN_FLAG_CHECK_WRITESPACE) {
 800ebd6:	68fb      	ldr	r3, [r7, #12]
 800ebd8:	7f1b      	ldrb	r3, [r3, #28]
 800ebda:	f003 0310 	and.w	r3, r3, #16
 800ebde:	2b00      	cmp	r3, #0
 800ebe0:	d021      	beq.n	800ec26 <poll_tcp+0xb2>
    /* If the queued byte- or pbuf-count drops below the configured low-water limit,
       let select mark this pcb as writable again. */
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 800ebe2:	68fb      	ldr	r3, [r7, #12]
 800ebe4:	685b      	ldr	r3, [r3, #4]
 800ebe6:	2b00      	cmp	r3, #0
 800ebe8:	d01d      	beq.n	800ec26 <poll_tcp+0xb2>
 800ebea:	68fb      	ldr	r3, [r7, #12]
 800ebec:	685b      	ldr	r3, [r3, #4]
 800ebee:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800ebf2:	f5b3 6f86 	cmp.w	r3, #1072	; 0x430
 800ebf6:	d316      	bcc.n	800ec26 <poll_tcp+0xb2>
      (tcp_sndqueuelen(conn->pcb.tcp) < TCP_SNDQUEUELOWAT)) {
 800ebf8:	68fb      	ldr	r3, [r7, #12]
 800ebfa:	685b      	ldr	r3, [r3, #4]
 800ebfc:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 800ec00:	2b04      	cmp	r3, #4
 800ec02:	d810      	bhi.n	800ec26 <poll_tcp+0xb2>
      conn->flags &= ~NETCONN_FLAG_CHECK_WRITESPACE;
 800ec04:	68fb      	ldr	r3, [r7, #12]
 800ec06:	7f1b      	ldrb	r3, [r3, #28]
 800ec08:	f023 0310 	bic.w	r3, r3, #16
 800ec0c:	b2da      	uxtb	r2, r3
 800ec0e:	68fb      	ldr	r3, [r7, #12]
 800ec10:	771a      	strb	r2, [r3, #28]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 800ec12:	68fb      	ldr	r3, [r7, #12]
 800ec14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ec16:	2b00      	cmp	r3, #0
 800ec18:	d005      	beq.n	800ec26 <poll_tcp+0xb2>
 800ec1a:	68fb      	ldr	r3, [r7, #12]
 800ec1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ec1e:	2200      	movs	r2, #0
 800ec20:	2102      	movs	r1, #2
 800ec22:	68f8      	ldr	r0, [r7, #12]
 800ec24:	4798      	blx	r3
    }
  }

  return ERR_OK;
 800ec26:	2300      	movs	r3, #0
}
 800ec28:	4618      	mov	r0, r3
 800ec2a:	3710      	adds	r7, #16
 800ec2c:	46bd      	mov	sp, r7
 800ec2e:	bd80      	pop	{r7, pc}
 800ec30:	0801c2d0 	.word	0x0801c2d0
 800ec34:	0801c3f4 	.word	0x0801c3f4
 800ec38:	0801c328 	.word	0x0801c328

0800ec3c <sent_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.sent) for parameters and return value
 */
static err_t
sent_tcp(void *arg, struct tcp_pcb *pcb, u16_t len)
{
 800ec3c:	b580      	push	{r7, lr}
 800ec3e:	b086      	sub	sp, #24
 800ec40:	af00      	add	r7, sp, #0
 800ec42:	60f8      	str	r0, [r7, #12]
 800ec44:	60b9      	str	r1, [r7, #8]
 800ec46:	4613      	mov	r3, r2
 800ec48:	80fb      	strh	r3, [r7, #6]
  struct netconn *conn = (struct netconn *)arg;
 800ec4a:	68fb      	ldr	r3, [r7, #12]
 800ec4c:	617b      	str	r3, [r7, #20]

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 800ec4e:	697b      	ldr	r3, [r7, #20]
 800ec50:	2b00      	cmp	r3, #0
 800ec52:	d106      	bne.n	800ec62 <sent_tcp+0x26>
 800ec54:	4b20      	ldr	r3, [pc, #128]	; (800ecd8 <sent_tcp+0x9c>)
 800ec56:	f240 1261 	movw	r2, #353	; 0x161
 800ec5a:	4920      	ldr	r1, [pc, #128]	; (800ecdc <sent_tcp+0xa0>)
 800ec5c:	4820      	ldr	r0, [pc, #128]	; (800ece0 <sent_tcp+0xa4>)
 800ec5e:	f00c f8c7 	bl	801adf0 <iprintf>

  if (conn) {
 800ec62:	697b      	ldr	r3, [r7, #20]
 800ec64:	2b00      	cmp	r3, #0
 800ec66:	d032      	beq.n	800ecce <sent_tcp+0x92>
    if (conn->state == NETCONN_WRITE) {
 800ec68:	697b      	ldr	r3, [r7, #20]
 800ec6a:	785b      	ldrb	r3, [r3, #1]
 800ec6c:	2b01      	cmp	r3, #1
 800ec6e:	d104      	bne.n	800ec7a <sent_tcp+0x3e>
      lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 800ec70:	2101      	movs	r1, #1
 800ec72:	6978      	ldr	r0, [r7, #20]
 800ec74:	f000 ffaa 	bl	800fbcc <lwip_netconn_do_writemore>
 800ec78:	e007      	b.n	800ec8a <sent_tcp+0x4e>
    } else if (conn->state == NETCONN_CLOSE) {
 800ec7a:	697b      	ldr	r3, [r7, #20]
 800ec7c:	785b      	ldrb	r3, [r3, #1]
 800ec7e:	2b04      	cmp	r3, #4
 800ec80:	d103      	bne.n	800ec8a <sent_tcp+0x4e>
      lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 800ec82:	2101      	movs	r1, #1
 800ec84:	6978      	ldr	r0, [r7, #20]
 800ec86:	f000 fbb9 	bl	800f3fc <lwip_netconn_do_close_internal>
    }

    /* If the queued byte- or pbuf-count drops below the configured low-water limit,
       let select mark this pcb as writable again. */
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 800ec8a:	697b      	ldr	r3, [r7, #20]
 800ec8c:	685b      	ldr	r3, [r3, #4]
 800ec8e:	2b00      	cmp	r3, #0
 800ec90:	d01d      	beq.n	800ecce <sent_tcp+0x92>
 800ec92:	697b      	ldr	r3, [r7, #20]
 800ec94:	685b      	ldr	r3, [r3, #4]
 800ec96:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800ec9a:	f5b3 6f86 	cmp.w	r3, #1072	; 0x430
 800ec9e:	d316      	bcc.n	800ecce <sent_tcp+0x92>
      (tcp_sndqueuelen(conn->pcb.tcp) < TCP_SNDQUEUELOWAT)) {
 800eca0:	697b      	ldr	r3, [r7, #20]
 800eca2:	685b      	ldr	r3, [r3, #4]
 800eca4:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 800eca8:	2b04      	cmp	r3, #4
 800ecaa:	d810      	bhi.n	800ecce <sent_tcp+0x92>
      conn->flags &= ~NETCONN_FLAG_CHECK_WRITESPACE;
 800ecac:	697b      	ldr	r3, [r7, #20]
 800ecae:	7f1b      	ldrb	r3, [r3, #28]
 800ecb0:	f023 0310 	bic.w	r3, r3, #16
 800ecb4:	b2da      	uxtb	r2, r3
 800ecb6:	697b      	ldr	r3, [r7, #20]
 800ecb8:	771a      	strb	r2, [r3, #28]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, len);
 800ecba:	697b      	ldr	r3, [r7, #20]
 800ecbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ecbe:	2b00      	cmp	r3, #0
 800ecc0:	d005      	beq.n	800ecce <sent_tcp+0x92>
 800ecc2:	697b      	ldr	r3, [r7, #20]
 800ecc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ecc6:	88fa      	ldrh	r2, [r7, #6]
 800ecc8:	2102      	movs	r1, #2
 800ecca:	6978      	ldr	r0, [r7, #20]
 800eccc:	4798      	blx	r3
    }
  }

  return ERR_OK;
 800ecce:	2300      	movs	r3, #0
}
 800ecd0:	4618      	mov	r0, r3
 800ecd2:	3718      	adds	r7, #24
 800ecd4:	46bd      	mov	sp, r7
 800ecd6:	bd80      	pop	{r7, pc}
 800ecd8:	0801c2d0 	.word	0x0801c2d0
 800ecdc:	0801c3f4 	.word	0x0801c3f4
 800ece0:	0801c328 	.word	0x0801c328

0800ece4 <err_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.err) for parameters
 */
static void
err_tcp(void *arg, err_t err)
{
 800ece4:	b580      	push	{r7, lr}
 800ece6:	b08a      	sub	sp, #40	; 0x28
 800ece8:	af00      	add	r7, sp, #0
 800ecea:	6078      	str	r0, [r7, #4]
 800ecec:	460b      	mov	r3, r1
 800ecee:	70fb      	strb	r3, [r7, #3]
  struct netconn *conn;
  enum netconn_state old_state;

  conn = (struct netconn *)arg;
 800ecf0:	687b      	ldr	r3, [r7, #4]
 800ecf2:	627b      	str	r3, [r7, #36]	; 0x24
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 800ecf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ecf6:	2b00      	cmp	r3, #0
 800ecf8:	d106      	bne.n	800ed08 <err_tcp+0x24>
 800ecfa:	4b6c      	ldr	r3, [pc, #432]	; (800eeac <err_tcp+0x1c8>)
 800ecfc:	f44f 72c2 	mov.w	r2, #388	; 0x184
 800ed00:	496b      	ldr	r1, [pc, #428]	; (800eeb0 <err_tcp+0x1cc>)
 800ed02:	486c      	ldr	r0, [pc, #432]	; (800eeb4 <err_tcp+0x1d0>)
 800ed04:	f00c f874 	bl	801adf0 <iprintf>

  conn->pcb.tcp = NULL;
 800ed08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ed0a:	2200      	movs	r2, #0
 800ed0c:	605a      	str	r2, [r3, #4]

  /* reset conn->state now before waking up other threads */
  old_state = conn->state;
 800ed0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ed10:	785b      	ldrb	r3, [r3, #1]
 800ed12:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  conn->state = NETCONN_NONE;
 800ed16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ed18:	2200      	movs	r2, #0
 800ed1a:	705a      	strb	r2, [r3, #1]

  if (old_state == NETCONN_CLOSE) {
 800ed1c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800ed20:	2b04      	cmp	r3, #4
 800ed22:	d114      	bne.n	800ed4e <err_tcp+0x6a>
    /* RST during close: let close return success & dealloc the netconn */
    err = ERR_OK;
 800ed24:	2300      	movs	r3, #0
 800ed26:	70fb      	strb	r3, [r7, #3]
    NETCONN_SET_SAFE_ERR(conn, ERR_OK);
 800ed28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ed2a:	2b00      	cmp	r3, #0
 800ed2c:	d018      	beq.n	800ed60 <err_tcp+0x7c>
 800ed2e:	f00b fa69 	bl	801a204 <sys_arch_protect>
 800ed32:	61b8      	str	r0, [r7, #24]
 800ed34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ed36:	f993 3008 	ldrsb.w	r3, [r3, #8]
 800ed3a:	f113 0f0c 	cmn.w	r3, #12
 800ed3e:	db02      	blt.n	800ed46 <err_tcp+0x62>
 800ed40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ed42:	2200      	movs	r2, #0
 800ed44:	721a      	strb	r2, [r3, #8]
 800ed46:	69b8      	ldr	r0, [r7, #24]
 800ed48:	f00b fa6a 	bl	801a220 <sys_arch_unprotect>
 800ed4c:	e008      	b.n	800ed60 <err_tcp+0x7c>
  } else {
    /* no check since this is always fatal! */
    SYS_ARCH_SET(conn->last_err, err);
 800ed4e:	f00b fa59 	bl	801a204 <sys_arch_protect>
 800ed52:	61f8      	str	r0, [r7, #28]
 800ed54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ed56:	78fa      	ldrb	r2, [r7, #3]
 800ed58:	721a      	strb	r2, [r3, #8]
 800ed5a:	69f8      	ldr	r0, [r7, #28]
 800ed5c:	f00b fa60 	bl	801a220 <sys_arch_unprotect>
  }

  /* @todo: the type of NETCONN_EVT created should depend on 'old_state' */

  /* Notify the user layer about a connection error. Used to signal select. */
  API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 800ed60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ed62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ed64:	2b00      	cmp	r3, #0
 800ed66:	d005      	beq.n	800ed74 <err_tcp+0x90>
 800ed68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ed6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ed6c:	2200      	movs	r2, #0
 800ed6e:	2104      	movs	r1, #4
 800ed70:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ed72:	4798      	blx	r3
  /* Try to release selects pending on 'read' or 'write', too.
     They will get an error if they actually try to read or write. */
  API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 800ed74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ed76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ed78:	2b00      	cmp	r3, #0
 800ed7a:	d005      	beq.n	800ed88 <err_tcp+0xa4>
 800ed7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ed7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ed80:	2200      	movs	r2, #0
 800ed82:	2100      	movs	r1, #0
 800ed84:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ed86:	4798      	blx	r3
  API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 800ed88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ed8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ed8c:	2b00      	cmp	r3, #0
 800ed8e:	d005      	beq.n	800ed9c <err_tcp+0xb8>
 800ed90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ed92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ed94:	2200      	movs	r2, #0
 800ed96:	2102      	movs	r1, #2
 800ed98:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ed9a:	4798      	blx	r3

  /* pass NULL-message to recvmbox to wake up pending recv */
  if (sys_mbox_valid(&conn->recvmbox)) {
 800ed9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ed9e:	3310      	adds	r3, #16
 800eda0:	4618      	mov	r0, r3
 800eda2:	f00b f913 	bl	8019fcc <sys_mbox_valid>
 800eda6:	4603      	mov	r3, r0
 800eda8:	2b00      	cmp	r3, #0
 800edaa:	d005      	beq.n	800edb8 <err_tcp+0xd4>
    /* use trypost to prevent deadlock */
    sys_mbox_trypost(&conn->recvmbox, NULL);
 800edac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800edae:	3310      	adds	r3, #16
 800edb0:	2100      	movs	r1, #0
 800edb2:	4618      	mov	r0, r3
 800edb4:	f00b f895 	bl	8019ee2 <sys_mbox_trypost>
  }
  /* pass NULL-message to acceptmbox to wake up pending accept */
  if (sys_mbox_valid(&conn->acceptmbox)) {
 800edb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800edba:	3314      	adds	r3, #20
 800edbc:	4618      	mov	r0, r3
 800edbe:	f00b f905 	bl	8019fcc <sys_mbox_valid>
 800edc2:	4603      	mov	r3, r0
 800edc4:	2b00      	cmp	r3, #0
 800edc6:	d005      	beq.n	800edd4 <err_tcp+0xf0>
    /* use trypost to preven deadlock */
    sys_mbox_trypost(&conn->acceptmbox, NULL);
 800edc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800edca:	3314      	adds	r3, #20
 800edcc:	2100      	movs	r1, #0
 800edce:	4618      	mov	r0, r3
 800edd0:	f00b f887 	bl	8019ee2 <sys_mbox_trypost>
  }

  if ((old_state == NETCONN_WRITE) || (old_state == NETCONN_CLOSE) ||
 800edd4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800edd8:	2b01      	cmp	r3, #1
 800edda:	d007      	beq.n	800edec <err_tcp+0x108>
 800eddc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800ede0:	2b04      	cmp	r3, #4
 800ede2:	d003      	beq.n	800edec <err_tcp+0x108>
 800ede4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800ede8:	2b03      	cmp	r3, #3
 800edea:	d14d      	bne.n	800ee88 <err_tcp+0x1a4>
      (old_state == NETCONN_CONNECT)) {
    /* calling lwip_netconn_do_writemore/lwip_netconn_do_close_internal is not necessary
       since the pcb has already been deleted! */
    int was_nonblocking_connect = IN_NONBLOCKING_CONNECT(conn);
 800edec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800edee:	7f1b      	ldrb	r3, [r3, #28]
 800edf0:	f003 0304 	and.w	r3, r3, #4
 800edf4:	2b00      	cmp	r3, #0
 800edf6:	bf14      	ite	ne
 800edf8:	2301      	movne	r3, #1
 800edfa:	2300      	moveq	r3, #0
 800edfc:	b2db      	uxtb	r3, r3
 800edfe:	617b      	str	r3, [r7, #20]
    SET_NONBLOCKING_CONNECT(conn, 0);
 800ee00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ee02:	7f1b      	ldrb	r3, [r3, #28]
 800ee04:	f023 0304 	bic.w	r3, r3, #4
 800ee08:	b2da      	uxtb	r2, r3
 800ee0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ee0c:	771a      	strb	r2, [r3, #28]

    if (!was_nonblocking_connect) {
 800ee0e:	697b      	ldr	r3, [r7, #20]
 800ee10:	2b00      	cmp	r3, #0
 800ee12:	d145      	bne.n	800eea0 <err_tcp+0x1bc>
      sys_sem_t* op_completed_sem;
      /* set error return code */
      LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 800ee14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ee16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ee18:	2b00      	cmp	r3, #0
 800ee1a:	d106      	bne.n	800ee2a <err_tcp+0x146>
 800ee1c:	4b23      	ldr	r3, [pc, #140]	; (800eeac <err_tcp+0x1c8>)
 800ee1e:	f240 12b3 	movw	r2, #435	; 0x1b3
 800ee22:	4925      	ldr	r1, [pc, #148]	; (800eeb8 <err_tcp+0x1d4>)
 800ee24:	4823      	ldr	r0, [pc, #140]	; (800eeb4 <err_tcp+0x1d0>)
 800ee26:	f00b ffe3 	bl	801adf0 <iprintf>
      conn->current_msg->err = err;
 800ee2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ee2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ee2e:	78fa      	ldrb	r2, [r7, #3]
 800ee30:	711a      	strb	r2, [r3, #4]
      op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 800ee32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ee34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ee36:	681b      	ldr	r3, [r3, #0]
 800ee38:	330c      	adds	r3, #12
 800ee3a:	613b      	str	r3, [r7, #16]
      LWIP_ASSERT("inavlid op_completed_sem", sys_sem_valid(op_completed_sem));
 800ee3c:	6938      	ldr	r0, [r7, #16]
 800ee3e:	f00b f956 	bl	801a0ee <sys_sem_valid>
 800ee42:	4603      	mov	r3, r0
 800ee44:	2b00      	cmp	r3, #0
 800ee46:	d106      	bne.n	800ee56 <err_tcp+0x172>
 800ee48:	4b18      	ldr	r3, [pc, #96]	; (800eeac <err_tcp+0x1c8>)
 800ee4a:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 800ee4e:	491b      	ldr	r1, [pc, #108]	; (800eebc <err_tcp+0x1d8>)
 800ee50:	4818      	ldr	r0, [pc, #96]	; (800eeb4 <err_tcp+0x1d0>)
 800ee52:	f00b ffcd 	bl	801adf0 <iprintf>
      conn->current_msg = NULL;
 800ee56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ee58:	2200      	movs	r2, #0
 800ee5a:	625a      	str	r2, [r3, #36]	; 0x24
      /* wake up the waiting task */
      NETCONN_SET_SAFE_ERR(conn, err);
 800ee5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ee5e:	2b00      	cmp	r3, #0
 800ee60:	d00e      	beq.n	800ee80 <err_tcp+0x19c>
 800ee62:	f00b f9cf 	bl	801a204 <sys_arch_protect>
 800ee66:	60f8      	str	r0, [r7, #12]
 800ee68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ee6a:	f993 3008 	ldrsb.w	r3, [r3, #8]
 800ee6e:	f113 0f0c 	cmn.w	r3, #12
 800ee72:	db02      	blt.n	800ee7a <err_tcp+0x196>
 800ee74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ee76:	78fa      	ldrb	r2, [r7, #3]
 800ee78:	721a      	strb	r2, [r3, #8]
 800ee7a:	68f8      	ldr	r0, [r7, #12]
 800ee7c:	f00b f9d0 	bl	801a220 <sys_arch_unprotect>
      sys_sem_signal(op_completed_sem);
 800ee80:	6938      	ldr	r0, [r7, #16]
 800ee82:	f00b f91a 	bl	801a0ba <sys_sem_signal>
      (old_state == NETCONN_CONNECT)) {
 800ee86:	e00b      	b.n	800eea0 <err_tcp+0x1bc>
    }
  } else {
    LWIP_ASSERT("conn->current_msg == NULL", conn->current_msg == NULL);
 800ee88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ee8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ee8c:	2b00      	cmp	r3, #0
 800ee8e:	d008      	beq.n	800eea2 <err_tcp+0x1be>
 800ee90:	4b06      	ldr	r3, [pc, #24]	; (800eeac <err_tcp+0x1c8>)
 800ee92:	f240 12bd 	movw	r2, #445	; 0x1bd
 800ee96:	490a      	ldr	r1, [pc, #40]	; (800eec0 <err_tcp+0x1dc>)
 800ee98:	4806      	ldr	r0, [pc, #24]	; (800eeb4 <err_tcp+0x1d0>)
 800ee9a:	f00b ffa9 	bl	801adf0 <iprintf>
  }
}
 800ee9e:	e000      	b.n	800eea2 <err_tcp+0x1be>
      (old_state == NETCONN_CONNECT)) {
 800eea0:	bf00      	nop
}
 800eea2:	bf00      	nop
 800eea4:	3728      	adds	r7, #40	; 0x28
 800eea6:	46bd      	mov	sp, r7
 800eea8:	bd80      	pop	{r7, pc}
 800eeaa:	bf00      	nop
 800eeac:	0801c2d0 	.word	0x0801c2d0
 800eeb0:	0801c3f4 	.word	0x0801c3f4
 800eeb4:	0801c328 	.word	0x0801c328
 800eeb8:	0801c404 	.word	0x0801c404
 800eebc:	0801c420 	.word	0x0801c420
 800eec0:	0801c43c 	.word	0x0801c43c

0800eec4 <setup_tcp>:
 *
 * @param conn the TCP netconn to setup
 */
static void
setup_tcp(struct netconn *conn)
{
 800eec4:	b580      	push	{r7, lr}
 800eec6:	b084      	sub	sp, #16
 800eec8:	af00      	add	r7, sp, #0
 800eeca:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *pcb;

  pcb = conn->pcb.tcp;
 800eecc:	687b      	ldr	r3, [r7, #4]
 800eece:	685b      	ldr	r3, [r3, #4]
 800eed0:	60fb      	str	r3, [r7, #12]
  tcp_arg(pcb, conn);
 800eed2:	6879      	ldr	r1, [r7, #4]
 800eed4:	68f8      	ldr	r0, [r7, #12]
 800eed6:	f004 f9db 	bl	8013290 <tcp_arg>
  tcp_recv(pcb, recv_tcp);
 800eeda:	490a      	ldr	r1, [pc, #40]	; (800ef04 <setup_tcp+0x40>)
 800eedc:	68f8      	ldr	r0, [r7, #12]
 800eede:	f004 f9e9 	bl	80132b4 <tcp_recv>
  tcp_sent(pcb, sent_tcp);
 800eee2:	4909      	ldr	r1, [pc, #36]	; (800ef08 <setup_tcp+0x44>)
 800eee4:	68f8      	ldr	r0, [r7, #12]
 800eee6:	f004 fa07 	bl	80132f8 <tcp_sent>
  tcp_poll(pcb, poll_tcp, NETCONN_TCP_POLL_INTERVAL);
 800eeea:	2202      	movs	r2, #2
 800eeec:	4907      	ldr	r1, [pc, #28]	; (800ef0c <setup_tcp+0x48>)
 800eeee:	68f8      	ldr	r0, [r7, #12]
 800eef0:	f004 fa5c 	bl	80133ac <tcp_poll>
  tcp_err(pcb, err_tcp);
 800eef4:	4906      	ldr	r1, [pc, #24]	; (800ef10 <setup_tcp+0x4c>)
 800eef6:	68f8      	ldr	r0, [r7, #12]
 800eef8:	f004 fa1e 	bl	8013338 <tcp_err>
}
 800eefc:	bf00      	nop
 800eefe:	3710      	adds	r7, #16
 800ef00:	46bd      	mov	sp, r7
 800ef02:	bd80      	pop	{r7, pc}
 800ef04:	0800ea65 	.word	0x0800ea65
 800ef08:	0800ec3d 	.word	0x0800ec3d
 800ef0c:	0800eb75 	.word	0x0800eb75
 800ef10:	0800ece5 	.word	0x0800ece5

0800ef14 <accept_function>:
 *
 * @see tcp.h (struct tcp_pcb_listen.accept) for parameters and return value
 */
static err_t
accept_function(void *arg, struct tcp_pcb *newpcb, err_t err)
{
 800ef14:	b580      	push	{r7, lr}
 800ef16:	b088      	sub	sp, #32
 800ef18:	af00      	add	r7, sp, #0
 800ef1a:	60f8      	str	r0, [r7, #12]
 800ef1c:	60b9      	str	r1, [r7, #8]
 800ef1e:	4613      	mov	r3, r2
 800ef20:	71fb      	strb	r3, [r7, #7]
  struct netconn *newconn;
  struct netconn *conn = (struct netconn *)arg;
 800ef22:	68fb      	ldr	r3, [r7, #12]
 800ef24:	61fb      	str	r3, [r7, #28]

  if (conn == NULL) {
 800ef26:	69fb      	ldr	r3, [r7, #28]
 800ef28:	2b00      	cmp	r3, #0
 800ef2a:	d102      	bne.n	800ef32 <accept_function+0x1e>
    return ERR_VAL;
 800ef2c:	f06f 0305 	mvn.w	r3, #5
 800ef30:	e08d      	b.n	800f04e <accept_function+0x13a>
  }
  if (!sys_mbox_valid(&conn->acceptmbox)) {
 800ef32:	69fb      	ldr	r3, [r7, #28]
 800ef34:	3314      	adds	r3, #20
 800ef36:	4618      	mov	r0, r3
 800ef38:	f00b f848 	bl	8019fcc <sys_mbox_valid>
 800ef3c:	4603      	mov	r3, r0
 800ef3e:	2b00      	cmp	r3, #0
 800ef40:	d102      	bne.n	800ef48 <accept_function+0x34>
    LWIP_DEBUGF(API_MSG_DEBUG, ("accept_function: acceptmbox already deleted\n"));
    return ERR_VAL;
 800ef42:	f06f 0305 	mvn.w	r3, #5
 800ef46:	e082      	b.n	800f04e <accept_function+0x13a>
  }

  if (newpcb == NULL) {
 800ef48:	68bb      	ldr	r3, [r7, #8]
 800ef4a:	2b00      	cmp	r3, #0
 800ef4c:	d115      	bne.n	800ef7a <accept_function+0x66>
    /* out-of-pcbs during connect: pass on this error to the application */
    if (sys_mbox_trypost(&conn->acceptmbox, &netconn_aborted) == ERR_OK) {
 800ef4e:	69fb      	ldr	r3, [r7, #28]
 800ef50:	3314      	adds	r3, #20
 800ef52:	4941      	ldr	r1, [pc, #260]	; (800f058 <accept_function+0x144>)
 800ef54:	4618      	mov	r0, r3
 800ef56:	f00a ffc4 	bl	8019ee2 <sys_mbox_trypost>
 800ef5a:	4603      	mov	r3, r0
 800ef5c:	2b00      	cmp	r3, #0
 800ef5e:	d109      	bne.n	800ef74 <accept_function+0x60>
      /* Register event with callback */
      API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 800ef60:	69fb      	ldr	r3, [r7, #28]
 800ef62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ef64:	2b00      	cmp	r3, #0
 800ef66:	d005      	beq.n	800ef74 <accept_function+0x60>
 800ef68:	69fb      	ldr	r3, [r7, #28]
 800ef6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ef6c:	2200      	movs	r2, #0
 800ef6e:	2100      	movs	r1, #0
 800ef70:	69f8      	ldr	r0, [r7, #28]
 800ef72:	4798      	blx	r3
    }
    return ERR_VAL;
 800ef74:	f06f 0305 	mvn.w	r3, #5
 800ef78:	e069      	b.n	800f04e <accept_function+0x13a>

  LWIP_DEBUGF(API_MSG_DEBUG, ("accept_function: newpcb->tate: %s\n", tcp_debug_state_str(newpcb->state)));

  /* We have to set the callback here even though
   * the new socket is unknown. newconn->socket is marked as -1. */
  newconn = netconn_alloc(conn->type, conn->callback);
 800ef7a:	69fb      	ldr	r3, [r7, #28]
 800ef7c:	781a      	ldrb	r2, [r3, #0]
 800ef7e:	69fb      	ldr	r3, [r7, #28]
 800ef80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ef82:	4619      	mov	r1, r3
 800ef84:	4610      	mov	r0, r2
 800ef86:	f000 f8ff 	bl	800f188 <netconn_alloc>
 800ef8a:	61b8      	str	r0, [r7, #24]
  if (newconn == NULL) {
 800ef8c:	69bb      	ldr	r3, [r7, #24]
 800ef8e:	2b00      	cmp	r3, #0
 800ef90:	d115      	bne.n	800efbe <accept_function+0xaa>
    /* outof netconns: pass on this error to the application */
    if (sys_mbox_trypost(&conn->acceptmbox, &netconn_aborted) == ERR_OK) {
 800ef92:	69fb      	ldr	r3, [r7, #28]
 800ef94:	3314      	adds	r3, #20
 800ef96:	4930      	ldr	r1, [pc, #192]	; (800f058 <accept_function+0x144>)
 800ef98:	4618      	mov	r0, r3
 800ef9a:	f00a ffa2 	bl	8019ee2 <sys_mbox_trypost>
 800ef9e:	4603      	mov	r3, r0
 800efa0:	2b00      	cmp	r3, #0
 800efa2:	d109      	bne.n	800efb8 <accept_function+0xa4>
      /* Register event with callback */
      API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 800efa4:	69fb      	ldr	r3, [r7, #28]
 800efa6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800efa8:	2b00      	cmp	r3, #0
 800efaa:	d005      	beq.n	800efb8 <accept_function+0xa4>
 800efac:	69fb      	ldr	r3, [r7, #28]
 800efae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800efb0:	2200      	movs	r2, #0
 800efb2:	2100      	movs	r1, #0
 800efb4:	69f8      	ldr	r0, [r7, #28]
 800efb6:	4798      	blx	r3
    }
    return ERR_MEM;
 800efb8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800efbc:	e047      	b.n	800f04e <accept_function+0x13a>
  }
  newconn->pcb.tcp = newpcb;
 800efbe:	69bb      	ldr	r3, [r7, #24]
 800efc0:	68ba      	ldr	r2, [r7, #8]
 800efc2:	605a      	str	r2, [r3, #4]
  setup_tcp(newconn);
 800efc4:	69b8      	ldr	r0, [r7, #24]
 800efc6:	f7ff ff7d 	bl	800eec4 <setup_tcp>
  /* no protection: when creating the pcb, the netconn is not yet known
     to the application thread */
  newconn->last_err = err;
 800efca:	69bb      	ldr	r3, [r7, #24]
 800efcc:	79fa      	ldrb	r2, [r7, #7]
 800efce:	721a      	strb	r2, [r3, #8]

  /* handle backlog counter */
  tcp_backlog_delayed(newpcb);

  if (sys_mbox_trypost(&conn->acceptmbox, newconn) != ERR_OK) {
 800efd0:	69fb      	ldr	r3, [r7, #28]
 800efd2:	3314      	adds	r3, #20
 800efd4:	69b9      	ldr	r1, [r7, #24]
 800efd6:	4618      	mov	r0, r3
 800efd8:	f00a ff83 	bl	8019ee2 <sys_mbox_trypost>
 800efdc:	4603      	mov	r3, r0
 800efde:	2b00      	cmp	r3, #0
 800efe0:	d02a      	beq.n	800f038 <accept_function+0x124>
    /* When returning != ERR_OK, the pcb is aborted in tcp_process(),
       so do nothing here! */
    /* remove all references to this netconn from the pcb */
    struct tcp_pcb* pcb = newconn->pcb.tcp;
 800efe2:	69bb      	ldr	r3, [r7, #24]
 800efe4:	685b      	ldr	r3, [r3, #4]
 800efe6:	617b      	str	r3, [r7, #20]
    tcp_arg(pcb, NULL);
 800efe8:	2100      	movs	r1, #0
 800efea:	6978      	ldr	r0, [r7, #20]
 800efec:	f004 f950 	bl	8013290 <tcp_arg>
    tcp_recv(pcb, NULL);
 800eff0:	2100      	movs	r1, #0
 800eff2:	6978      	ldr	r0, [r7, #20]
 800eff4:	f004 f95e 	bl	80132b4 <tcp_recv>
    tcp_sent(pcb, NULL);
 800eff8:	2100      	movs	r1, #0
 800effa:	6978      	ldr	r0, [r7, #20]
 800effc:	f004 f97c 	bl	80132f8 <tcp_sent>
    tcp_poll(pcb, NULL, 0);
 800f000:	2200      	movs	r2, #0
 800f002:	2100      	movs	r1, #0
 800f004:	6978      	ldr	r0, [r7, #20]
 800f006:	f004 f9d1 	bl	80133ac <tcp_poll>
    tcp_err(pcb, NULL);
 800f00a:	2100      	movs	r1, #0
 800f00c:	6978      	ldr	r0, [r7, #20]
 800f00e:	f004 f993 	bl	8013338 <tcp_err>
    /* remove reference from to the pcb from this netconn */
    newconn->pcb.tcp = NULL;
 800f012:	69bb      	ldr	r3, [r7, #24]
 800f014:	2200      	movs	r2, #0
 800f016:	605a      	str	r2, [r3, #4]
    /* no need to drain since we know the recvmbox is empty. */
    sys_mbox_free(&newconn->recvmbox);
 800f018:	69bb      	ldr	r3, [r7, #24]
 800f01a:	3310      	adds	r3, #16
 800f01c:	4618      	mov	r0, r3
 800f01e:	f00a ff39 	bl	8019e94 <sys_mbox_free>
    sys_mbox_set_invalid(&newconn->recvmbox);
 800f022:	69bb      	ldr	r3, [r7, #24]
 800f024:	3310      	adds	r3, #16
 800f026:	4618      	mov	r0, r3
 800f028:	f00a ffe1 	bl	8019fee <sys_mbox_set_invalid>
    netconn_free(newconn);
 800f02c:	69b8      	ldr	r0, [r7, #24]
 800f02e:	f000 f91b 	bl	800f268 <netconn_free>
    return ERR_MEM;
 800f032:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800f036:	e00a      	b.n	800f04e <accept_function+0x13a>
  } else {
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 800f038:	69fb      	ldr	r3, [r7, #28]
 800f03a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f03c:	2b00      	cmp	r3, #0
 800f03e:	d005      	beq.n	800f04c <accept_function+0x138>
 800f040:	69fb      	ldr	r3, [r7, #28]
 800f042:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f044:	2200      	movs	r2, #0
 800f046:	2100      	movs	r1, #0
 800f048:	69f8      	ldr	r0, [r7, #28]
 800f04a:	4798      	blx	r3
  }

  return ERR_OK;
 800f04c:	2300      	movs	r3, #0
}
 800f04e:	4618      	mov	r0, r3
 800f050:	3720      	adds	r7, #32
 800f052:	46bd      	mov	sp, r7
 800f054:	bd80      	pop	{r7, pc}
 800f056:	bf00      	nop
 800f058:	20007630 	.word	0x20007630

0800f05c <pcb_new>:
 *
 * @param msg the api_msg_msg describing the connection type
 */
static void
pcb_new(struct api_msg *msg)
{
 800f05c:	b590      	push	{r4, r7, lr}
 800f05e:	b085      	sub	sp, #20
 800f060:	af00      	add	r7, sp, #0
 800f062:	6078      	str	r0, [r7, #4]
  enum lwip_ip_addr_type iptype = IPADDR_TYPE_V4;
 800f064:	2300      	movs	r3, #0
 800f066:	73fb      	strb	r3, [r7, #15]

  LWIP_ASSERT("pcb_new: pcb already allocated", msg->conn->pcb.tcp == NULL);
 800f068:	687b      	ldr	r3, [r7, #4]
 800f06a:	681b      	ldr	r3, [r3, #0]
 800f06c:	685b      	ldr	r3, [r3, #4]
 800f06e:	2b00      	cmp	r3, #0
 800f070:	d006      	beq.n	800f080 <pcb_new+0x24>
 800f072:	4b2b      	ldr	r3, [pc, #172]	; (800f120 <pcb_new+0xc4>)
 800f074:	f44f 720b 	mov.w	r2, #556	; 0x22c
 800f078:	492a      	ldr	r1, [pc, #168]	; (800f124 <pcb_new+0xc8>)
 800f07a:	482b      	ldr	r0, [pc, #172]	; (800f128 <pcb_new+0xcc>)
 800f07c:	f00b feb8 	bl	801adf0 <iprintf>
    iptype = IPADDR_TYPE_ANY;
  }
#endif
  
  /* Allocate a PCB for this connection */
  switch(NETCONNTYPE_GROUP(msg->conn->type)) {
 800f080:	687b      	ldr	r3, [r7, #4]
 800f082:	681b      	ldr	r3, [r3, #0]
 800f084:	781b      	ldrb	r3, [r3, #0]
 800f086:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800f08a:	2b10      	cmp	r3, #16
 800f08c:	d022      	beq.n	800f0d4 <pcb_new+0x78>
 800f08e:	2b20      	cmp	r3, #32
 800f090:	d133      	bne.n	800f0fa <pcb_new+0x9e>
    }
    break;
#endif /* LWIP_RAW */
#if LWIP_UDP
  case NETCONN_UDP:
    msg->conn->pcb.udp = udp_new_ip_type(iptype);
 800f092:	687b      	ldr	r3, [r7, #4]
 800f094:	681c      	ldr	r4, [r3, #0]
 800f096:	7bfb      	ldrb	r3, [r7, #15]
 800f098:	4618      	mov	r0, r3
 800f09a:	f008 fc94 	bl	80179c6 <udp_new_ip_type>
 800f09e:	4603      	mov	r3, r0
 800f0a0:	6063      	str	r3, [r4, #4]
    if (msg->conn->pcb.udp != NULL) {
 800f0a2:	687b      	ldr	r3, [r7, #4]
 800f0a4:	681b      	ldr	r3, [r3, #0]
 800f0a6:	685b      	ldr	r3, [r3, #4]
 800f0a8:	2b00      	cmp	r3, #0
 800f0aa:	d02a      	beq.n	800f102 <pcb_new+0xa6>
#if LWIP_UDPLITE
      if (NETCONNTYPE_ISUDPLITE(msg->conn->type)) {
        udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_UDPLITE);
      }
#endif /* LWIP_UDPLITE */
      if (NETCONNTYPE_ISUDPNOCHKSUM(msg->conn->type)) {
 800f0ac:	687b      	ldr	r3, [r7, #4]
 800f0ae:	681b      	ldr	r3, [r3, #0]
 800f0b0:	781b      	ldrb	r3, [r3, #0]
 800f0b2:	2b22      	cmp	r3, #34	; 0x22
 800f0b4:	d104      	bne.n	800f0c0 <pcb_new+0x64>
        udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_NOCHKSUM);
 800f0b6:	687b      	ldr	r3, [r7, #4]
 800f0b8:	681b      	ldr	r3, [r3, #0]
 800f0ba:	685b      	ldr	r3, [r3, #4]
 800f0bc:	2201      	movs	r2, #1
 800f0be:	741a      	strb	r2, [r3, #16]
      }
      udp_recv(msg->conn->pcb.udp, recv_udp, msg->conn);
 800f0c0:	687b      	ldr	r3, [r7, #4]
 800f0c2:	681b      	ldr	r3, [r3, #0]
 800f0c4:	6858      	ldr	r0, [r3, #4]
 800f0c6:	687b      	ldr	r3, [r7, #4]
 800f0c8:	681b      	ldr	r3, [r3, #0]
 800f0ca:	461a      	mov	r2, r3
 800f0cc:	4917      	ldr	r1, [pc, #92]	; (800f12c <pcb_new+0xd0>)
 800f0ce:	f008 fc1f 	bl	8017910 <udp_recv>
    }
    break;
 800f0d2:	e016      	b.n	800f102 <pcb_new+0xa6>
#endif /* LWIP_UDP */
#if LWIP_TCP
  case NETCONN_TCP:
    msg->conn->pcb.tcp = tcp_new_ip_type(iptype);
 800f0d4:	687b      	ldr	r3, [r7, #4]
 800f0d6:	681c      	ldr	r4, [r3, #0]
 800f0d8:	7bfb      	ldrb	r3, [r7, #15]
 800f0da:	4618      	mov	r0, r3
 800f0dc:	f004 f8ca 	bl	8013274 <tcp_new_ip_type>
 800f0e0:	4603      	mov	r3, r0
 800f0e2:	6063      	str	r3, [r4, #4]
    if (msg->conn->pcb.tcp != NULL) {
 800f0e4:	687b      	ldr	r3, [r7, #4]
 800f0e6:	681b      	ldr	r3, [r3, #0]
 800f0e8:	685b      	ldr	r3, [r3, #4]
 800f0ea:	2b00      	cmp	r3, #0
 800f0ec:	d00b      	beq.n	800f106 <pcb_new+0xaa>
      setup_tcp(msg->conn);
 800f0ee:	687b      	ldr	r3, [r7, #4]
 800f0f0:	681b      	ldr	r3, [r3, #0]
 800f0f2:	4618      	mov	r0, r3
 800f0f4:	f7ff fee6 	bl	800eec4 <setup_tcp>
    }
    break;
 800f0f8:	e005      	b.n	800f106 <pcb_new+0xaa>
#endif /* LWIP_TCP */
  default:
    /* Unsupported netconn type, e.g. protocol disabled */
    msg->err = ERR_VAL;
 800f0fa:	687b      	ldr	r3, [r7, #4]
 800f0fc:	22fa      	movs	r2, #250	; 0xfa
 800f0fe:	711a      	strb	r2, [r3, #4]
    return;
 800f100:	e00a      	b.n	800f118 <pcb_new+0xbc>
    break;
 800f102:	bf00      	nop
 800f104:	e000      	b.n	800f108 <pcb_new+0xac>
    break;
 800f106:	bf00      	nop
  }
  if (msg->conn->pcb.ip == NULL) {
 800f108:	687b      	ldr	r3, [r7, #4]
 800f10a:	681b      	ldr	r3, [r3, #0]
 800f10c:	685b      	ldr	r3, [r3, #4]
 800f10e:	2b00      	cmp	r3, #0
 800f110:	d102      	bne.n	800f118 <pcb_new+0xbc>
    msg->err = ERR_MEM;
 800f112:	687b      	ldr	r3, [r7, #4]
 800f114:	22ff      	movs	r2, #255	; 0xff
 800f116:	711a      	strb	r2, [r3, #4]
  }
}
 800f118:	3714      	adds	r7, #20
 800f11a:	46bd      	mov	sp, r7
 800f11c:	bd90      	pop	{r4, r7, pc}
 800f11e:	bf00      	nop
 800f120:	0801c2d0 	.word	0x0801c2d0
 800f124:	0801c458 	.word	0x0801c458
 800f128:	0801c328 	.word	0x0801c328
 800f12c:	0800e969 	.word	0x0800e969

0800f130 <lwip_netconn_do_newconn>:
 *
 * @param m the api_msg_msg describing the connection type
 */
void
lwip_netconn_do_newconn(void *m)
{
 800f130:	b580      	push	{r7, lr}
 800f132:	b084      	sub	sp, #16
 800f134:	af00      	add	r7, sp, #0
 800f136:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg*)m;
 800f138:	687b      	ldr	r3, [r7, #4]
 800f13a:	60fb      	str	r3, [r7, #12]

  msg->err = ERR_OK;
 800f13c:	68fb      	ldr	r3, [r7, #12]
 800f13e:	2200      	movs	r2, #0
 800f140:	711a      	strb	r2, [r3, #4]
  if (msg->conn->pcb.tcp == NULL) {
 800f142:	68fb      	ldr	r3, [r7, #12]
 800f144:	681b      	ldr	r3, [r3, #0]
 800f146:	685b      	ldr	r3, [r3, #4]
 800f148:	2b00      	cmp	r3, #0
 800f14a:	d102      	bne.n	800f152 <lwip_netconn_do_newconn+0x22>
    pcb_new(msg);
 800f14c:	68f8      	ldr	r0, [r7, #12]
 800f14e:	f7ff ff85 	bl	800f05c <pcb_new>
  }
  /* Else? This "new" connection already has a PCB allocated. */
  /* Is this an error condition? Should it be deleted? */
  /* We currently just are happy and return. */

  TCPIP_APIMSG_ACK(msg);
 800f152:	68fb      	ldr	r3, [r7, #12]
 800f154:	681b      	ldr	r3, [r3, #0]
 800f156:	2b00      	cmp	r3, #0
 800f158:	d012      	beq.n	800f180 <lwip_netconn_do_newconn+0x50>
 800f15a:	f00b f853 	bl	801a204 <sys_arch_protect>
 800f15e:	60b8      	str	r0, [r7, #8]
 800f160:	68fb      	ldr	r3, [r7, #12]
 800f162:	681b      	ldr	r3, [r3, #0]
 800f164:	f993 3008 	ldrsb.w	r3, [r3, #8]
 800f168:	f113 0f0c 	cmn.w	r3, #12
 800f16c:	db05      	blt.n	800f17a <lwip_netconn_do_newconn+0x4a>
 800f16e:	68fb      	ldr	r3, [r7, #12]
 800f170:	681b      	ldr	r3, [r3, #0]
 800f172:	68fa      	ldr	r2, [r7, #12]
 800f174:	f992 2004 	ldrsb.w	r2, [r2, #4]
 800f178:	721a      	strb	r2, [r3, #8]
 800f17a:	68b8      	ldr	r0, [r7, #8]
 800f17c:	f00b f850 	bl	801a220 <sys_arch_unprotect>
}
 800f180:	bf00      	nop
 800f182:	3710      	adds	r7, #16
 800f184:	46bd      	mov	sp, r7
 800f186:	bd80      	pop	{r7, pc}

0800f188 <netconn_alloc>:
 * @return a newly allocated struct netconn or
 *         NULL on memory error
 */
struct netconn*
netconn_alloc(enum netconn_type t, netconn_callback callback)
{
 800f188:	b580      	push	{r7, lr}
 800f18a:	b084      	sub	sp, #16
 800f18c:	af00      	add	r7, sp, #0
 800f18e:	4603      	mov	r3, r0
 800f190:	6039      	str	r1, [r7, #0]
 800f192:	71fb      	strb	r3, [r7, #7]
  struct netconn *conn;
  int size;

  conn = (struct netconn *)memp_malloc(MEMP_NETCONN);
 800f194:	2007      	movs	r0, #7
 800f196:	f001 fe13 	bl	8010dc0 <memp_malloc>
 800f19a:	60b8      	str	r0, [r7, #8]
  if (conn == NULL) {
 800f19c:	68bb      	ldr	r3, [r7, #8]
 800f19e:	2b00      	cmp	r3, #0
 800f1a0:	d101      	bne.n	800f1a6 <netconn_alloc+0x1e>
    return NULL;
 800f1a2:	2300      	movs	r3, #0
 800f1a4:	e055      	b.n	800f252 <netconn_alloc+0xca>
  }

  conn->last_err = ERR_OK;
 800f1a6:	68bb      	ldr	r3, [r7, #8]
 800f1a8:	2200      	movs	r2, #0
 800f1aa:	721a      	strb	r2, [r3, #8]
  conn->type = t;
 800f1ac:	68bb      	ldr	r3, [r7, #8]
 800f1ae:	79fa      	ldrb	r2, [r7, #7]
 800f1b0:	701a      	strb	r2, [r3, #0]
  conn->pcb.tcp = NULL;
 800f1b2:	68bb      	ldr	r3, [r7, #8]
 800f1b4:	2200      	movs	r2, #0
 800f1b6:	605a      	str	r2, [r3, #4]

  /* If all sizes are the same, every compiler should optimize this switch to nothing */
  switch(NETCONNTYPE_GROUP(t)) {
 800f1b8:	79fb      	ldrb	r3, [r7, #7]
 800f1ba:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800f1be:	2b10      	cmp	r3, #16
 800f1c0:	d004      	beq.n	800f1cc <netconn_alloc+0x44>
 800f1c2:	2b20      	cmp	r3, #32
 800f1c4:	d105      	bne.n	800f1d2 <netconn_alloc+0x4a>
    size = DEFAULT_RAW_RECVMBOX_SIZE;
    break;
#endif /* LWIP_RAW */
#if LWIP_UDP
  case NETCONN_UDP:
    size = DEFAULT_UDP_RECVMBOX_SIZE;
 800f1c6:	2306      	movs	r3, #6
 800f1c8:	60fb      	str	r3, [r7, #12]
    break;
 800f1ca:	e00a      	b.n	800f1e2 <netconn_alloc+0x5a>
#endif /* LWIP_UDP */
#if LWIP_TCP
  case NETCONN_TCP:
    size = DEFAULT_TCP_RECVMBOX_SIZE;
 800f1cc:	2306      	movs	r3, #6
 800f1ce:	60fb      	str	r3, [r7, #12]
    break;
 800f1d0:	e007      	b.n	800f1e2 <netconn_alloc+0x5a>
#endif /* LWIP_TCP */
  default:
    LWIP_ASSERT("netconn_alloc: undefined netconn_type", 0);
 800f1d2:	4b22      	ldr	r3, [pc, #136]	; (800f25c <netconn_alloc+0xd4>)
 800f1d4:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 800f1d8:	4921      	ldr	r1, [pc, #132]	; (800f260 <netconn_alloc+0xd8>)
 800f1da:	4822      	ldr	r0, [pc, #136]	; (800f264 <netconn_alloc+0xdc>)
 800f1dc:	f00b fe08 	bl	801adf0 <iprintf>
    goto free_and_return;
 800f1e0:	e032      	b.n	800f248 <netconn_alloc+0xc0>
  }

  if (sys_mbox_new(&conn->recvmbox, size) != ERR_OK) {
 800f1e2:	68bb      	ldr	r3, [r7, #8]
 800f1e4:	3310      	adds	r3, #16
 800f1e6:	68f9      	ldr	r1, [r7, #12]
 800f1e8:	4618      	mov	r0, r3
 800f1ea:	f00a fe31 	bl	8019e50 <sys_mbox_new>
 800f1ee:	4603      	mov	r3, r0
 800f1f0:	2b00      	cmp	r3, #0
 800f1f2:	d128      	bne.n	800f246 <netconn_alloc+0xbe>
    goto free_and_return;
  }
#if !LWIP_NETCONN_SEM_PER_THREAD
  if (sys_sem_new(&conn->op_completed, 0) != ERR_OK) {
 800f1f4:	68bb      	ldr	r3, [r7, #8]
 800f1f6:	330c      	adds	r3, #12
 800f1f8:	2100      	movs	r1, #0
 800f1fa:	4618      	mov	r0, r3
 800f1fc:	f00a ff04 	bl	801a008 <sys_sem_new>
 800f200:	4603      	mov	r3, r0
 800f202:	2b00      	cmp	r3, #0
 800f204:	d005      	beq.n	800f212 <netconn_alloc+0x8a>
    sys_mbox_free(&conn->recvmbox);
 800f206:	68bb      	ldr	r3, [r7, #8]
 800f208:	3310      	adds	r3, #16
 800f20a:	4618      	mov	r0, r3
 800f20c:	f00a fe42 	bl	8019e94 <sys_mbox_free>
    goto free_and_return;
 800f210:	e01a      	b.n	800f248 <netconn_alloc+0xc0>
  }
#endif

#if LWIP_TCP
  sys_mbox_set_invalid(&conn->acceptmbox);
 800f212:	68bb      	ldr	r3, [r7, #8]
 800f214:	3314      	adds	r3, #20
 800f216:	4618      	mov	r0, r3
 800f218:	f00a fee9 	bl	8019fee <sys_mbox_set_invalid>
#endif
  conn->state        = NETCONN_NONE;
 800f21c:	68bb      	ldr	r3, [r7, #8]
 800f21e:	2200      	movs	r2, #0
 800f220:	705a      	strb	r2, [r3, #1]
#if LWIP_SOCKET
  /* initialize socket to -1 since 0 is a valid socket */
  conn->socket       = -1;
 800f222:	68bb      	ldr	r3, [r7, #8]
 800f224:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800f228:	619a      	str	r2, [r3, #24]
#endif /* LWIP_SOCKET */
  conn->callback     = callback;
 800f22a:	68bb      	ldr	r3, [r7, #8]
 800f22c:	683a      	ldr	r2, [r7, #0]
 800f22e:	629a      	str	r2, [r3, #40]	; 0x28
#if LWIP_TCP
  conn->current_msg  = NULL;
 800f230:	68bb      	ldr	r3, [r7, #8]
 800f232:	2200      	movs	r2, #0
 800f234:	625a      	str	r2, [r3, #36]	; 0x24
  conn->write_offset = 0;
 800f236:	68bb      	ldr	r3, [r7, #8]
 800f238:	2200      	movs	r2, #0
 800f23a:	621a      	str	r2, [r3, #32]
  conn->recv_avail   = 0;
#endif /* LWIP_SO_RCVBUF */
#if LWIP_SO_LINGER
  conn->linger = -1;
#endif /* LWIP_SO_LINGER */
  conn->flags = 0;
 800f23c:	68bb      	ldr	r3, [r7, #8]
 800f23e:	2200      	movs	r2, #0
 800f240:	771a      	strb	r2, [r3, #28]
  return conn;
 800f242:	68bb      	ldr	r3, [r7, #8]
 800f244:	e005      	b.n	800f252 <netconn_alloc+0xca>
    goto free_and_return;
 800f246:	bf00      	nop
free_and_return:
  memp_free(MEMP_NETCONN, conn);
 800f248:	68b9      	ldr	r1, [r7, #8]
 800f24a:	2007      	movs	r0, #7
 800f24c:	f001 fe0a 	bl	8010e64 <memp_free>
  return NULL;
 800f250:	2300      	movs	r3, #0
}
 800f252:	4618      	mov	r0, r3
 800f254:	3710      	adds	r7, #16
 800f256:	46bd      	mov	sp, r7
 800f258:	bd80      	pop	{r7, pc}
 800f25a:	bf00      	nop
 800f25c:	0801c2d0 	.word	0x0801c2d0
 800f260:	0801c478 	.word	0x0801c478
 800f264:	0801c328 	.word	0x0801c328

0800f268 <netconn_free>:
 *
 * @param conn the netconn to free
 */
void
netconn_free(struct netconn *conn)
{
 800f268:	b580      	push	{r7, lr}
 800f26a:	b082      	sub	sp, #8
 800f26c:	af00      	add	r7, sp, #0
 800f26e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("PCB must be deallocated outside this function", conn->pcb.tcp == NULL);
 800f270:	687b      	ldr	r3, [r7, #4]
 800f272:	685b      	ldr	r3, [r3, #4]
 800f274:	2b00      	cmp	r3, #0
 800f276:	d006      	beq.n	800f286 <netconn_free+0x1e>
 800f278:	4b1b      	ldr	r3, [pc, #108]	; (800f2e8 <netconn_free+0x80>)
 800f27a:	f44f 7238 	mov.w	r2, #736	; 0x2e0
 800f27e:	491b      	ldr	r1, [pc, #108]	; (800f2ec <netconn_free+0x84>)
 800f280:	481b      	ldr	r0, [pc, #108]	; (800f2f0 <netconn_free+0x88>)
 800f282:	f00b fdb5 	bl	801adf0 <iprintf>
  LWIP_ASSERT("recvmbox must be deallocated before calling this function",
 800f286:	687b      	ldr	r3, [r7, #4]
 800f288:	3310      	adds	r3, #16
 800f28a:	4618      	mov	r0, r3
 800f28c:	f00a fe9e 	bl	8019fcc <sys_mbox_valid>
 800f290:	4603      	mov	r3, r0
 800f292:	2b00      	cmp	r3, #0
 800f294:	d006      	beq.n	800f2a4 <netconn_free+0x3c>
 800f296:	4b14      	ldr	r3, [pc, #80]	; (800f2e8 <netconn_free+0x80>)
 800f298:	f240 22e2 	movw	r2, #738	; 0x2e2
 800f29c:	4915      	ldr	r1, [pc, #84]	; (800f2f4 <netconn_free+0x8c>)
 800f29e:	4814      	ldr	r0, [pc, #80]	; (800f2f0 <netconn_free+0x88>)
 800f2a0:	f00b fda6 	bl	801adf0 <iprintf>
    !sys_mbox_valid(&conn->recvmbox));
#if LWIP_TCP
  LWIP_ASSERT("acceptmbox must be deallocated before calling this function",
 800f2a4:	687b      	ldr	r3, [r7, #4]
 800f2a6:	3314      	adds	r3, #20
 800f2a8:	4618      	mov	r0, r3
 800f2aa:	f00a fe8f 	bl	8019fcc <sys_mbox_valid>
 800f2ae:	4603      	mov	r3, r0
 800f2b0:	2b00      	cmp	r3, #0
 800f2b2:	d006      	beq.n	800f2c2 <netconn_free+0x5a>
 800f2b4:	4b0c      	ldr	r3, [pc, #48]	; (800f2e8 <netconn_free+0x80>)
 800f2b6:	f240 22e5 	movw	r2, #741	; 0x2e5
 800f2ba:	490f      	ldr	r1, [pc, #60]	; (800f2f8 <netconn_free+0x90>)
 800f2bc:	480c      	ldr	r0, [pc, #48]	; (800f2f0 <netconn_free+0x88>)
 800f2be:	f00b fd97 	bl	801adf0 <iprintf>
    !sys_mbox_valid(&conn->acceptmbox));
#endif /* LWIP_TCP */

#if !LWIP_NETCONN_SEM_PER_THREAD
  sys_sem_free(&conn->op_completed);
 800f2c2:	687b      	ldr	r3, [r7, #4]
 800f2c4:	330c      	adds	r3, #12
 800f2c6:	4618      	mov	r0, r3
 800f2c8:	f00a ff04 	bl	801a0d4 <sys_sem_free>
  sys_sem_set_invalid(&conn->op_completed);
 800f2cc:	687b      	ldr	r3, [r7, #4]
 800f2ce:	330c      	adds	r3, #12
 800f2d0:	4618      	mov	r0, r3
 800f2d2:	f00a ff1d 	bl	801a110 <sys_sem_set_invalid>
#endif

  memp_free(MEMP_NETCONN, conn);
 800f2d6:	6879      	ldr	r1, [r7, #4]
 800f2d8:	2007      	movs	r0, #7
 800f2da:	f001 fdc3 	bl	8010e64 <memp_free>
}
 800f2de:	bf00      	nop
 800f2e0:	3708      	adds	r7, #8
 800f2e2:	46bd      	mov	sp, r7
 800f2e4:	bd80      	pop	{r7, pc}
 800f2e6:	bf00      	nop
 800f2e8:	0801c2d0 	.word	0x0801c2d0
 800f2ec:	0801c4a0 	.word	0x0801c4a0
 800f2f0:	0801c328 	.word	0x0801c328
 800f2f4:	0801c4d0 	.word	0x0801c4d0
 800f2f8:	0801c50c 	.word	0x0801c50c

0800f2fc <netconn_drain>:
 * @bytes_drained bytes drained from recvmbox
 * @accepts_drained pending connections drained from acceptmbox
 */
static void
netconn_drain(struct netconn *conn)
{
 800f2fc:	b580      	push	{r7, lr}
 800f2fe:	b086      	sub	sp, #24
 800f300:	af00      	add	r7, sp, #0
 800f302:	6078      	str	r0, [r7, #4]
#endif /* LWIP_TCP */

  /* This runs in tcpip_thread, so we don't need to lock against rx packets */

  /* Delete and drain the recvmbox. */
  if (sys_mbox_valid(&conn->recvmbox)) {
 800f304:	687b      	ldr	r3, [r7, #4]
 800f306:	3310      	adds	r3, #16
 800f308:	4618      	mov	r0, r3
 800f30a:	f00a fe5f 	bl	8019fcc <sys_mbox_valid>
 800f30e:	4603      	mov	r3, r0
 800f310:	2b00      	cmp	r3, #0
 800f312:	d035      	beq.n	800f380 <netconn_drain+0x84>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
 800f314:	e01e      	b.n	800f354 <netconn_drain+0x58>
#if LWIP_TCP
      if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP) {
 800f316:	687b      	ldr	r3, [r7, #4]
 800f318:	781b      	ldrb	r3, [r3, #0]
 800f31a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800f31e:	2b10      	cmp	r3, #16
 800f320:	d114      	bne.n	800f34c <netconn_drain+0x50>
        if (mem != NULL) {
 800f322:	68fb      	ldr	r3, [r7, #12]
 800f324:	2b00      	cmp	r3, #0
 800f326:	d015      	beq.n	800f354 <netconn_drain+0x58>
          p = (struct pbuf*)mem;
 800f328:	68fb      	ldr	r3, [r7, #12]
 800f32a:	617b      	str	r3, [r7, #20]
          /* pcb might be set to NULL already by err_tcp() */
          if (conn->pcb.tcp != NULL) {
 800f32c:	687b      	ldr	r3, [r7, #4]
 800f32e:	685b      	ldr	r3, [r3, #4]
 800f330:	2b00      	cmp	r3, #0
 800f332:	d007      	beq.n	800f344 <netconn_drain+0x48>
            tcp_recved(conn->pcb.tcp, p->tot_len);
 800f334:	687b      	ldr	r3, [r7, #4]
 800f336:	685a      	ldr	r2, [r3, #4]
 800f338:	697b      	ldr	r3, [r7, #20]
 800f33a:	891b      	ldrh	r3, [r3, #8]
 800f33c:	4619      	mov	r1, r3
 800f33e:	4610      	mov	r0, r2
 800f340:	f003 f9c4 	bl	80126cc <tcp_recved>
          }
          pbuf_free(p);
 800f344:	6978      	ldr	r0, [r7, #20]
 800f346:	f002 fae7 	bl	8011918 <pbuf_free>
 800f34a:	e003      	b.n	800f354 <netconn_drain+0x58>
        }
      } else
#endif /* LWIP_TCP */
      {
        netbuf_delete((struct netbuf *)mem);
 800f34c:	68fb      	ldr	r3, [r7, #12]
 800f34e:	4618      	mov	r0, r3
 800f350:	f000 ff38 	bl	80101c4 <netbuf_delete>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
 800f354:	687b      	ldr	r3, [r7, #4]
 800f356:	3310      	adds	r3, #16
 800f358:	f107 020c 	add.w	r2, r7, #12
 800f35c:	4611      	mov	r1, r2
 800f35e:	4618      	mov	r0, r3
 800f360:	f00a fe18 	bl	8019f94 <sys_arch_mbox_tryfetch>
 800f364:	4603      	mov	r3, r0
 800f366:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800f36a:	d1d4      	bne.n	800f316 <netconn_drain+0x1a>
      }
    }
    sys_mbox_free(&conn->recvmbox);
 800f36c:	687b      	ldr	r3, [r7, #4]
 800f36e:	3310      	adds	r3, #16
 800f370:	4618      	mov	r0, r3
 800f372:	f00a fd8f 	bl	8019e94 <sys_mbox_free>
    sys_mbox_set_invalid(&conn->recvmbox);
 800f376:	687b      	ldr	r3, [r7, #4]
 800f378:	3310      	adds	r3, #16
 800f37a:	4618      	mov	r0, r3
 800f37c:	f00a fe37 	bl	8019fee <sys_mbox_set_invalid>
  }

  /* Delete and drain the acceptmbox. */
#if LWIP_TCP
  if (sys_mbox_valid(&conn->acceptmbox)) {
 800f380:	687b      	ldr	r3, [r7, #4]
 800f382:	3314      	adds	r3, #20
 800f384:	4618      	mov	r0, r3
 800f386:	f00a fe21 	bl	8019fcc <sys_mbox_valid>
 800f38a:	4603      	mov	r3, r0
 800f38c:	2b00      	cmp	r3, #0
 800f38e:	d02e      	beq.n	800f3ee <netconn_drain+0xf2>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
 800f390:	e017      	b.n	800f3c2 <netconn_drain+0xc6>
      if (mem != &netconn_aborted) {
 800f392:	68fb      	ldr	r3, [r7, #12]
 800f394:	4a18      	ldr	r2, [pc, #96]	; (800f3f8 <netconn_drain+0xfc>)
 800f396:	4293      	cmp	r3, r2
 800f398:	d013      	beq.n	800f3c2 <netconn_drain+0xc6>
        struct netconn *newconn = (struct netconn *)mem;
 800f39a:	68fb      	ldr	r3, [r7, #12]
 800f39c:	613b      	str	r3, [r7, #16]
        /* Only tcp pcbs have an acceptmbox, so no need to check conn->type */
        /* pcb might be set to NULL already by err_tcp() */
        /* drain recvmbox */
        netconn_drain(newconn);
 800f39e:	6938      	ldr	r0, [r7, #16]
 800f3a0:	f7ff ffac 	bl	800f2fc <netconn_drain>
        if (newconn->pcb.tcp != NULL) {
 800f3a4:	693b      	ldr	r3, [r7, #16]
 800f3a6:	685b      	ldr	r3, [r3, #4]
 800f3a8:	2b00      	cmp	r3, #0
 800f3aa:	d007      	beq.n	800f3bc <netconn_drain+0xc0>
          tcp_abort(newconn->pcb.tcp);
 800f3ac:	693b      	ldr	r3, [r7, #16]
 800f3ae:	685b      	ldr	r3, [r3, #4]
 800f3b0:	4618      	mov	r0, r3
 800f3b2:	f002 fff7 	bl	80123a4 <tcp_abort>
          newconn->pcb.tcp = NULL;
 800f3b6:	693b      	ldr	r3, [r7, #16]
 800f3b8:	2200      	movs	r2, #0
 800f3ba:	605a      	str	r2, [r3, #4]
        }
        netconn_free(newconn);
 800f3bc:	6938      	ldr	r0, [r7, #16]
 800f3be:	f7ff ff53 	bl	800f268 <netconn_free>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
 800f3c2:	687b      	ldr	r3, [r7, #4]
 800f3c4:	3314      	adds	r3, #20
 800f3c6:	f107 020c 	add.w	r2, r7, #12
 800f3ca:	4611      	mov	r1, r2
 800f3cc:	4618      	mov	r0, r3
 800f3ce:	f00a fde1 	bl	8019f94 <sys_arch_mbox_tryfetch>
 800f3d2:	4603      	mov	r3, r0
 800f3d4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800f3d8:	d1db      	bne.n	800f392 <netconn_drain+0x96>
      }
    }
    sys_mbox_free(&conn->acceptmbox);
 800f3da:	687b      	ldr	r3, [r7, #4]
 800f3dc:	3314      	adds	r3, #20
 800f3de:	4618      	mov	r0, r3
 800f3e0:	f00a fd58 	bl	8019e94 <sys_mbox_free>
    sys_mbox_set_invalid(&conn->acceptmbox);
 800f3e4:	687b      	ldr	r3, [r7, #4]
 800f3e6:	3314      	adds	r3, #20
 800f3e8:	4618      	mov	r0, r3
 800f3ea:	f00a fe00 	bl	8019fee <sys_mbox_set_invalid>
  }
#endif /* LWIP_TCP */
}
 800f3ee:	bf00      	nop
 800f3f0:	3718      	adds	r7, #24
 800f3f2:	46bd      	mov	sp, r7
 800f3f4:	bd80      	pop	{r7, pc}
 800f3f6:	bf00      	nop
 800f3f8:	20007630 	.word	0x20007630

0800f3fc <lwip_netconn_do_close_internal>:
 *
 * @param conn the TCP netconn to close
 */
static err_t
lwip_netconn_do_close_internal(struct netconn *conn  WRITE_DELAYED_PARAM)
{
 800f3fc:	b580      	push	{r7, lr}
 800f3fe:	b088      	sub	sp, #32
 800f400:	af00      	add	r7, sp, #0
 800f402:	6078      	str	r0, [r7, #4]
 800f404:	460b      	mov	r3, r1
 800f406:	70fb      	strb	r3, [r7, #3]
  err_t err;
  u8_t shut, shut_rx, shut_tx, close;
  u8_t close_finished = 0;
 800f408:	2300      	movs	r3, #0
 800f40a:	777b      	strb	r3, [r7, #29]
  struct tcp_pcb* tpcb;
#if LWIP_SO_LINGER
  u8_t linger_wait_required = 0;
#endif /* LWIP_SO_LINGER */

  LWIP_ASSERT("invalid conn", (conn != NULL));
 800f40c:	687b      	ldr	r3, [r7, #4]
 800f40e:	2b00      	cmp	r3, #0
 800f410:	d106      	bne.n	800f420 <lwip_netconn_do_close_internal+0x24>
 800f412:	4baa      	ldr	r3, [pc, #680]	; (800f6bc <lwip_netconn_do_close_internal+0x2c0>)
 800f414:	f240 3243 	movw	r2, #835	; 0x343
 800f418:	49a9      	ldr	r1, [pc, #676]	; (800f6c0 <lwip_netconn_do_close_internal+0x2c4>)
 800f41a:	48aa      	ldr	r0, [pc, #680]	; (800f6c4 <lwip_netconn_do_close_internal+0x2c8>)
 800f41c:	f00b fce8 	bl	801adf0 <iprintf>
  LWIP_ASSERT("this is for tcp netconns only", (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP));
 800f420:	687b      	ldr	r3, [r7, #4]
 800f422:	781b      	ldrb	r3, [r3, #0]
 800f424:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800f428:	2b10      	cmp	r3, #16
 800f42a:	d006      	beq.n	800f43a <lwip_netconn_do_close_internal+0x3e>
 800f42c:	4ba3      	ldr	r3, [pc, #652]	; (800f6bc <lwip_netconn_do_close_internal+0x2c0>)
 800f42e:	f44f 7251 	mov.w	r2, #836	; 0x344
 800f432:	49a5      	ldr	r1, [pc, #660]	; (800f6c8 <lwip_netconn_do_close_internal+0x2cc>)
 800f434:	48a3      	ldr	r0, [pc, #652]	; (800f6c4 <lwip_netconn_do_close_internal+0x2c8>)
 800f436:	f00b fcdb 	bl	801adf0 <iprintf>
  LWIP_ASSERT("conn must be in state NETCONN_CLOSE", (conn->state == NETCONN_CLOSE));
 800f43a:	687b      	ldr	r3, [r7, #4]
 800f43c:	785b      	ldrb	r3, [r3, #1]
 800f43e:	2b04      	cmp	r3, #4
 800f440:	d006      	beq.n	800f450 <lwip_netconn_do_close_internal+0x54>
 800f442:	4b9e      	ldr	r3, [pc, #632]	; (800f6bc <lwip_netconn_do_close_internal+0x2c0>)
 800f444:	f240 3245 	movw	r2, #837	; 0x345
 800f448:	49a0      	ldr	r1, [pc, #640]	; (800f6cc <lwip_netconn_do_close_internal+0x2d0>)
 800f44a:	489e      	ldr	r0, [pc, #632]	; (800f6c4 <lwip_netconn_do_close_internal+0x2c8>)
 800f44c:	f00b fcd0 	bl	801adf0 <iprintf>
  LWIP_ASSERT("pcb already closed", (conn->pcb.tcp != NULL));
 800f450:	687b      	ldr	r3, [r7, #4]
 800f452:	685b      	ldr	r3, [r3, #4]
 800f454:	2b00      	cmp	r3, #0
 800f456:	d106      	bne.n	800f466 <lwip_netconn_do_close_internal+0x6a>
 800f458:	4b98      	ldr	r3, [pc, #608]	; (800f6bc <lwip_netconn_do_close_internal+0x2c0>)
 800f45a:	f240 3246 	movw	r2, #838	; 0x346
 800f45e:	499c      	ldr	r1, [pc, #624]	; (800f6d0 <lwip_netconn_do_close_internal+0x2d4>)
 800f460:	4898      	ldr	r0, [pc, #608]	; (800f6c4 <lwip_netconn_do_close_internal+0x2c8>)
 800f462:	f00b fcc5 	bl	801adf0 <iprintf>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 800f466:	687b      	ldr	r3, [r7, #4]
 800f468:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f46a:	2b00      	cmp	r3, #0
 800f46c:	d106      	bne.n	800f47c <lwip_netconn_do_close_internal+0x80>
 800f46e:	4b93      	ldr	r3, [pc, #588]	; (800f6bc <lwip_netconn_do_close_internal+0x2c0>)
 800f470:	f240 3247 	movw	r2, #839	; 0x347
 800f474:	4997      	ldr	r1, [pc, #604]	; (800f6d4 <lwip_netconn_do_close_internal+0x2d8>)
 800f476:	4893      	ldr	r0, [pc, #588]	; (800f6c4 <lwip_netconn_do_close_internal+0x2c8>)
 800f478:	f00b fcba 	bl	801adf0 <iprintf>

  tpcb = conn->pcb.tcp;
 800f47c:	687b      	ldr	r3, [r7, #4]
 800f47e:	685b      	ldr	r3, [r3, #4]
 800f480:	61bb      	str	r3, [r7, #24]
  shut = conn->current_msg->msg.sd.shut;
 800f482:	687b      	ldr	r3, [r7, #4]
 800f484:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f486:	7a1b      	ldrb	r3, [r3, #8]
 800f488:	75fb      	strb	r3, [r7, #23]
  shut_rx = shut & NETCONN_SHUT_RD;
 800f48a:	7dfb      	ldrb	r3, [r7, #23]
 800f48c:	f003 0301 	and.w	r3, r3, #1
 800f490:	75bb      	strb	r3, [r7, #22]
  shut_tx = shut & NETCONN_SHUT_WR;
 800f492:	7dfb      	ldrb	r3, [r7, #23]
 800f494:	f003 0302 	and.w	r3, r3, #2
 800f498:	757b      	strb	r3, [r7, #21]
  /* shutting down both ends is the same as closing
     (also if RD or WR side was shut down before already) */
  if (shut == NETCONN_SHUT_RDWR) {
 800f49a:	7dfb      	ldrb	r3, [r7, #23]
 800f49c:	2b03      	cmp	r3, #3
 800f49e:	d102      	bne.n	800f4a6 <lwip_netconn_do_close_internal+0xaa>
    close = 1;
 800f4a0:	2301      	movs	r3, #1
 800f4a2:	77bb      	strb	r3, [r7, #30]
 800f4a4:	e01f      	b.n	800f4e6 <lwip_netconn_do_close_internal+0xea>
  } else if (shut_rx &&
 800f4a6:	7dbb      	ldrb	r3, [r7, #22]
 800f4a8:	2b00      	cmp	r3, #0
 800f4aa:	d00e      	beq.n	800f4ca <lwip_netconn_do_close_internal+0xce>
             ((tpcb->state == FIN_WAIT_1) ||
 800f4ac:	69bb      	ldr	r3, [r7, #24]
 800f4ae:	7d1b      	ldrb	r3, [r3, #20]
  } else if (shut_rx &&
 800f4b0:	2b05      	cmp	r3, #5
 800f4b2:	d007      	beq.n	800f4c4 <lwip_netconn_do_close_internal+0xc8>
              (tpcb->state == FIN_WAIT_2) ||
 800f4b4:	69bb      	ldr	r3, [r7, #24]
 800f4b6:	7d1b      	ldrb	r3, [r3, #20]
             ((tpcb->state == FIN_WAIT_1) ||
 800f4b8:	2b06      	cmp	r3, #6
 800f4ba:	d003      	beq.n	800f4c4 <lwip_netconn_do_close_internal+0xc8>
              (tpcb->state == CLOSING))) {
 800f4bc:	69bb      	ldr	r3, [r7, #24]
 800f4be:	7d1b      	ldrb	r3, [r3, #20]
              (tpcb->state == FIN_WAIT_2) ||
 800f4c0:	2b08      	cmp	r3, #8
 800f4c2:	d102      	bne.n	800f4ca <lwip_netconn_do_close_internal+0xce>
    close = 1;
 800f4c4:	2301      	movs	r3, #1
 800f4c6:	77bb      	strb	r3, [r7, #30]
 800f4c8:	e00d      	b.n	800f4e6 <lwip_netconn_do_close_internal+0xea>
  } else if (shut_tx && ((tpcb->flags & TF_RXCLOSED) != 0)) {
 800f4ca:	7d7b      	ldrb	r3, [r7, #21]
 800f4cc:	2b00      	cmp	r3, #0
 800f4ce:	d008      	beq.n	800f4e2 <lwip_netconn_do_close_internal+0xe6>
 800f4d0:	69bb      	ldr	r3, [r7, #24]
 800f4d2:	7e9b      	ldrb	r3, [r3, #26]
 800f4d4:	f003 0310 	and.w	r3, r3, #16
 800f4d8:	2b00      	cmp	r3, #0
 800f4da:	d002      	beq.n	800f4e2 <lwip_netconn_do_close_internal+0xe6>
    close = 1;
 800f4dc:	2301      	movs	r3, #1
 800f4de:	77bb      	strb	r3, [r7, #30]
 800f4e0:	e001      	b.n	800f4e6 <lwip_netconn_do_close_internal+0xea>
  } else {
    close = 0;
 800f4e2:	2300      	movs	r3, #0
 800f4e4:	77bb      	strb	r3, [r7, #30]
  }

  /* Set back some callback pointers */
  if (close) {
 800f4e6:	7fbb      	ldrb	r3, [r7, #30]
 800f4e8:	2b00      	cmp	r3, #0
 800f4ea:	d003      	beq.n	800f4f4 <lwip_netconn_do_close_internal+0xf8>
    tcp_arg(tpcb, NULL);
 800f4ec:	2100      	movs	r1, #0
 800f4ee:	69b8      	ldr	r0, [r7, #24]
 800f4f0:	f003 fece 	bl	8013290 <tcp_arg>
  }
  if (tpcb->state == LISTEN) {
 800f4f4:	69bb      	ldr	r3, [r7, #24]
 800f4f6:	7d1b      	ldrb	r3, [r3, #20]
 800f4f8:	2b01      	cmp	r3, #1
 800f4fa:	d104      	bne.n	800f506 <lwip_netconn_do_close_internal+0x10a>
    tcp_accept(tpcb, NULL);
 800f4fc:	2100      	movs	r1, #0
 800f4fe:	69b8      	ldr	r0, [r7, #24]
 800f500:	f003 ff3c 	bl	801337c <tcp_accept>
 800f504:	e01d      	b.n	800f542 <lwip_netconn_do_close_internal+0x146>
  } else {
    /* some callbacks have to be reset if tcp_close is not successful */
    if (shut_rx) {
 800f506:	7dbb      	ldrb	r3, [r7, #22]
 800f508:	2b00      	cmp	r3, #0
 800f50a:	d007      	beq.n	800f51c <lwip_netconn_do_close_internal+0x120>
      tcp_recv(tpcb, NULL);
 800f50c:	2100      	movs	r1, #0
 800f50e:	69b8      	ldr	r0, [r7, #24]
 800f510:	f003 fed0 	bl	80132b4 <tcp_recv>
      tcp_accept(tpcb, NULL);
 800f514:	2100      	movs	r1, #0
 800f516:	69b8      	ldr	r0, [r7, #24]
 800f518:	f003 ff30 	bl	801337c <tcp_accept>
    }
    if (shut_tx) {
 800f51c:	7d7b      	ldrb	r3, [r7, #21]
 800f51e:	2b00      	cmp	r3, #0
 800f520:	d003      	beq.n	800f52a <lwip_netconn_do_close_internal+0x12e>
      tcp_sent(tpcb, NULL);
 800f522:	2100      	movs	r1, #0
 800f524:	69b8      	ldr	r0, [r7, #24]
 800f526:	f003 fee7 	bl	80132f8 <tcp_sent>
    }
    if (close) {
 800f52a:	7fbb      	ldrb	r3, [r7, #30]
 800f52c:	2b00      	cmp	r3, #0
 800f52e:	d008      	beq.n	800f542 <lwip_netconn_do_close_internal+0x146>
      tcp_poll(tpcb, NULL, 0);
 800f530:	2200      	movs	r2, #0
 800f532:	2100      	movs	r1, #0
 800f534:	69b8      	ldr	r0, [r7, #24]
 800f536:	f003 ff39 	bl	80133ac <tcp_poll>
      tcp_err(tpcb, NULL);
 800f53a:	2100      	movs	r1, #0
 800f53c:	69b8      	ldr	r0, [r7, #24]
 800f53e:	f003 fefb 	bl	8013338 <tcp_err>
    }
  }
  /* Try to close the connection */
  if (close) {
 800f542:	7fbb      	ldrb	r3, [r7, #30]
 800f544:	2b00      	cmp	r3, #0
 800f546:	d005      	beq.n	800f554 <lwip_netconn_do_close_internal+0x158>
      }
    }
    if ((err == ERR_OK) && (tpcb != NULL))
#endif /* LWIP_SO_LINGER */
    {
      err = tcp_close(tpcb);
 800f548:	69b8      	ldr	r0, [r7, #24]
 800f54a:	f002 fe19 	bl	8012180 <tcp_close>
 800f54e:	4603      	mov	r3, r0
 800f550:	77fb      	strb	r3, [r7, #31]
 800f552:	e007      	b.n	800f564 <lwip_netconn_do_close_internal+0x168>
    }
  } else {
    err = tcp_shutdown(tpcb, shut_rx, shut_tx);
 800f554:	7dbb      	ldrb	r3, [r7, #22]
 800f556:	7d7a      	ldrb	r2, [r7, #21]
 800f558:	4619      	mov	r1, r3
 800f55a:	69b8      	ldr	r0, [r7, #24]
 800f55c:	f002 fe28 	bl	80121b0 <tcp_shutdown>
 800f560:	4603      	mov	r3, r0
 800f562:	77fb      	strb	r3, [r7, #31]
  }
  if (err == ERR_OK) {
 800f564:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800f568:	2b00      	cmp	r3, #0
 800f56a:	d102      	bne.n	800f572 <lwip_netconn_do_close_internal+0x176>
    close_finished = 1;
 800f56c:	2301      	movs	r3, #1
 800f56e:	777b      	strb	r3, [r7, #29]
 800f570:	e016      	b.n	800f5a0 <lwip_netconn_do_close_internal+0x1a4>
      close_finished = 0;
      err = ERR_INPROGRESS;
    }
#endif /* LWIP_SO_LINGER */
  } else {
    if (err == ERR_MEM) {
 800f572:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800f576:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800f57a:	d10f      	bne.n	800f59c <lwip_netconn_do_close_internal+0x1a0>
        close_timeout = conn->linger * 1000U;
      }
#endif
      if ((s32_t)(sys_now() - conn->current_msg->msg.sd.time_started) >= close_timeout) {
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
      if (conn->current_msg->msg.sd.polls_left == 0) {
 800f57c:	687b      	ldr	r3, [r7, #4]
 800f57e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f580:	7a5b      	ldrb	r3, [r3, #9]
 800f582:	2b00      	cmp	r3, #0
 800f584:	d10c      	bne.n	800f5a0 <lwip_netconn_do_close_internal+0x1a4>
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
        close_finished = 1;
 800f586:	2301      	movs	r3, #1
 800f588:	777b      	strb	r3, [r7, #29]
        if (close) {
 800f58a:	7fbb      	ldrb	r3, [r7, #30]
 800f58c:	2b00      	cmp	r3, #0
 800f58e:	d007      	beq.n	800f5a0 <lwip_netconn_do_close_internal+0x1a4>
          /* in this case, we want to RST the connection */
          tcp_abort(tpcb);
 800f590:	69b8      	ldr	r0, [r7, #24]
 800f592:	f002 ff07 	bl	80123a4 <tcp_abort>
          err = ERR_OK;
 800f596:	2300      	movs	r3, #0
 800f598:	77fb      	strb	r3, [r7, #31]
 800f59a:	e001      	b.n	800f5a0 <lwip_netconn_do_close_internal+0x1a4>
        }
      }
    } else {
      /* Closing failed for a non-memory error: give up */
      close_finished = 1;
 800f59c:	2301      	movs	r3, #1
 800f59e:	777b      	strb	r3, [r7, #29]
    }
  }
  if (close_finished) {
 800f5a0:	7f7b      	ldrb	r3, [r7, #29]
 800f5a2:	2b00      	cmp	r3, #0
 800f5a4:	d056      	beq.n	800f654 <lwip_netconn_do_close_internal+0x258>
    /* Closing done (succeeded, non-memory error, nonblocking error or timeout) */
    sys_sem_t* op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 800f5a6:	687b      	ldr	r3, [r7, #4]
 800f5a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f5aa:	681b      	ldr	r3, [r3, #0]
 800f5ac:	330c      	adds	r3, #12
 800f5ae:	613b      	str	r3, [r7, #16]
    conn->current_msg->err = err;
 800f5b0:	687b      	ldr	r3, [r7, #4]
 800f5b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f5b4:	7ffa      	ldrb	r2, [r7, #31]
 800f5b6:	711a      	strb	r2, [r3, #4]
    conn->current_msg = NULL;
 800f5b8:	687b      	ldr	r3, [r7, #4]
 800f5ba:	2200      	movs	r2, #0
 800f5bc:	625a      	str	r2, [r3, #36]	; 0x24
    conn->state = NETCONN_NONE;
 800f5be:	687b      	ldr	r3, [r7, #4]
 800f5c0:	2200      	movs	r2, #0
 800f5c2:	705a      	strb	r2, [r3, #1]
    if (err == ERR_OK) {
 800f5c4:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800f5c8:	2b00      	cmp	r3, #0
 800f5ca:	d129      	bne.n	800f620 <lwip_netconn_do_close_internal+0x224>
      if (close) {
 800f5cc:	7fbb      	ldrb	r3, [r7, #30]
 800f5ce:	2b00      	cmp	r3, #0
 800f5d0:	d00c      	beq.n	800f5ec <lwip_netconn_do_close_internal+0x1f0>
        /* Set back some callback pointers as conn is going away */
        conn->pcb.tcp = NULL;
 800f5d2:	687b      	ldr	r3, [r7, #4]
 800f5d4:	2200      	movs	r2, #0
 800f5d6:	605a      	str	r2, [r3, #4]
        /* Trigger select() in socket layer. Make sure everybody notices activity
         on the connection, error first! */
        API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 800f5d8:	687b      	ldr	r3, [r7, #4]
 800f5da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f5dc:	2b00      	cmp	r3, #0
 800f5de:	d005      	beq.n	800f5ec <lwip_netconn_do_close_internal+0x1f0>
 800f5e0:	687b      	ldr	r3, [r7, #4]
 800f5e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f5e4:	2200      	movs	r2, #0
 800f5e6:	2104      	movs	r1, #4
 800f5e8:	6878      	ldr	r0, [r7, #4]
 800f5ea:	4798      	blx	r3
      }
      if (shut_rx) {
 800f5ec:	7dbb      	ldrb	r3, [r7, #22]
 800f5ee:	2b00      	cmp	r3, #0
 800f5f0:	d009      	beq.n	800f606 <lwip_netconn_do_close_internal+0x20a>
        API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 800f5f2:	687b      	ldr	r3, [r7, #4]
 800f5f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f5f6:	2b00      	cmp	r3, #0
 800f5f8:	d005      	beq.n	800f606 <lwip_netconn_do_close_internal+0x20a>
 800f5fa:	687b      	ldr	r3, [r7, #4]
 800f5fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f5fe:	2200      	movs	r2, #0
 800f600:	2100      	movs	r1, #0
 800f602:	6878      	ldr	r0, [r7, #4]
 800f604:	4798      	blx	r3
      }
      if (shut_tx) {
 800f606:	7d7b      	ldrb	r3, [r7, #21]
 800f608:	2b00      	cmp	r3, #0
 800f60a:	d009      	beq.n	800f620 <lwip_netconn_do_close_internal+0x224>
        API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 800f60c:	687b      	ldr	r3, [r7, #4]
 800f60e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f610:	2b00      	cmp	r3, #0
 800f612:	d005      	beq.n	800f620 <lwip_netconn_do_close_internal+0x224>
 800f614:	687b      	ldr	r3, [r7, #4]
 800f616:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f618:	2200      	movs	r2, #0
 800f61a:	2102      	movs	r1, #2
 800f61c:	6878      	ldr	r0, [r7, #4]
 800f61e:	4798      	blx	r3
      }
    }
    NETCONN_SET_SAFE_ERR(conn, err);
 800f620:	687b      	ldr	r3, [r7, #4]
 800f622:	2b00      	cmp	r3, #0
 800f624:	d00e      	beq.n	800f644 <lwip_netconn_do_close_internal+0x248>
 800f626:	f00a fded 	bl	801a204 <sys_arch_protect>
 800f62a:	60f8      	str	r0, [r7, #12]
 800f62c:	687b      	ldr	r3, [r7, #4]
 800f62e:	f993 3008 	ldrsb.w	r3, [r3, #8]
 800f632:	f113 0f0c 	cmn.w	r3, #12
 800f636:	db02      	blt.n	800f63e <lwip_netconn_do_close_internal+0x242>
 800f638:	687b      	ldr	r3, [r7, #4]
 800f63a:	7ffa      	ldrb	r2, [r7, #31]
 800f63c:	721a      	strb	r2, [r3, #8]
 800f63e:	68f8      	ldr	r0, [r7, #12]
 800f640:	f00a fdee 	bl	801a220 <sys_arch_unprotect>
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
 800f644:	78fb      	ldrb	r3, [r7, #3]
 800f646:	2b00      	cmp	r3, #0
 800f648:	d002      	beq.n	800f650 <lwip_netconn_do_close_internal+0x254>
#endif
    {
      /* wake up the application task */
      sys_sem_signal(op_completed_sem);
 800f64a:	6938      	ldr	r0, [r7, #16]
 800f64c:	f00a fd35 	bl	801a0ba <sys_sem_signal>
    }
    return ERR_OK;
 800f650:	2300      	movs	r3, #0
 800f652:	e02e      	b.n	800f6b2 <lwip_netconn_do_close_internal+0x2b6>
  }
  if (!close_finished) {
 800f654:	7f7b      	ldrb	r3, [r7, #29]
 800f656:	2b00      	cmp	r3, #0
 800f658:	d11e      	bne.n	800f698 <lwip_netconn_do_close_internal+0x29c>
    /* Closing failed and we want to wait: restore some of the callbacks */
    /* Closing of listen pcb will never fail! */
    LWIP_ASSERT("Closing a listen pcb may not fail!", (tpcb->state != LISTEN));
 800f65a:	69bb      	ldr	r3, [r7, #24]
 800f65c:	7d1b      	ldrb	r3, [r3, #20]
 800f65e:	2b01      	cmp	r3, #1
 800f660:	d106      	bne.n	800f670 <lwip_netconn_do_close_internal+0x274>
 800f662:	4b16      	ldr	r3, [pc, #88]	; (800f6bc <lwip_netconn_do_close_internal+0x2c0>)
 800f664:	f240 32e3 	movw	r2, #995	; 0x3e3
 800f668:	491b      	ldr	r1, [pc, #108]	; (800f6d8 <lwip_netconn_do_close_internal+0x2dc>)
 800f66a:	4816      	ldr	r0, [pc, #88]	; (800f6c4 <lwip_netconn_do_close_internal+0x2c8>)
 800f66c:	f00b fbc0 	bl	801adf0 <iprintf>
    if (shut_tx) {
 800f670:	7d7b      	ldrb	r3, [r7, #21]
 800f672:	2b00      	cmp	r3, #0
 800f674:	d003      	beq.n	800f67e <lwip_netconn_do_close_internal+0x282>
      tcp_sent(tpcb, sent_tcp);
 800f676:	4919      	ldr	r1, [pc, #100]	; (800f6dc <lwip_netconn_do_close_internal+0x2e0>)
 800f678:	69b8      	ldr	r0, [r7, #24]
 800f67a:	f003 fe3d 	bl	80132f8 <tcp_sent>
    }
    /* when waiting for close, set up poll interval to 500ms */
    tcp_poll(tpcb, poll_tcp, 1);
 800f67e:	2201      	movs	r2, #1
 800f680:	4917      	ldr	r1, [pc, #92]	; (800f6e0 <lwip_netconn_do_close_internal+0x2e4>)
 800f682:	69b8      	ldr	r0, [r7, #24]
 800f684:	f003 fe92 	bl	80133ac <tcp_poll>
    tcp_err(tpcb, err_tcp);
 800f688:	4916      	ldr	r1, [pc, #88]	; (800f6e4 <lwip_netconn_do_close_internal+0x2e8>)
 800f68a:	69b8      	ldr	r0, [r7, #24]
 800f68c:	f003 fe54 	bl	8013338 <tcp_err>
    tcp_arg(tpcb, conn);
 800f690:	6879      	ldr	r1, [r7, #4]
 800f692:	69b8      	ldr	r0, [r7, #24]
 800f694:	f003 fdfc 	bl	8013290 <tcp_arg>
    /* don't restore recv callback: we don't want to receive any more data */
  }
  /* If closing didn't succeed, we get called again either
     from poll_tcp or from sent_tcp */
  LWIP_ASSERT("err != ERR_OK", err != ERR_OK);
 800f698:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800f69c:	2b00      	cmp	r3, #0
 800f69e:	d106      	bne.n	800f6ae <lwip_netconn_do_close_internal+0x2b2>
 800f6a0:	4b06      	ldr	r3, [pc, #24]	; (800f6bc <lwip_netconn_do_close_internal+0x2c0>)
 800f6a2:	f240 32ef 	movw	r2, #1007	; 0x3ef
 800f6a6:	4910      	ldr	r1, [pc, #64]	; (800f6e8 <lwip_netconn_do_close_internal+0x2ec>)
 800f6a8:	4806      	ldr	r0, [pc, #24]	; (800f6c4 <lwip_netconn_do_close_internal+0x2c8>)
 800f6aa:	f00b fba1 	bl	801adf0 <iprintf>
  return err;
 800f6ae:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800f6b2:	4618      	mov	r0, r3
 800f6b4:	3720      	adds	r7, #32
 800f6b6:	46bd      	mov	sp, r7
 800f6b8:	bd80      	pop	{r7, pc}
 800f6ba:	bf00      	nop
 800f6bc:	0801c2d0 	.word	0x0801c2d0
 800f6c0:	0801c548 	.word	0x0801c548
 800f6c4:	0801c328 	.word	0x0801c328
 800f6c8:	0801c558 	.word	0x0801c558
 800f6cc:	0801c578 	.word	0x0801c578
 800f6d0:	0801c59c 	.word	0x0801c59c
 800f6d4:	0801c404 	.word	0x0801c404
 800f6d8:	0801c5b0 	.word	0x0801c5b0
 800f6dc:	0800ec3d 	.word	0x0800ec3d
 800f6e0:	0800eb75 	.word	0x0800eb75
 800f6e4:	0800ece5 	.word	0x0800ece5
 800f6e8:	0801c5d4 	.word	0x0801c5d4

0800f6ec <lwip_netconn_do_delconn>:
 *
 * @param m the api_msg_msg pointing to the connection
 */
void
lwip_netconn_do_delconn(void *m)
{
 800f6ec:	b580      	push	{r7, lr}
 800f6ee:	b086      	sub	sp, #24
 800f6f0:	af00      	add	r7, sp, #0
 800f6f2:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg*)m;
 800f6f4:	687b      	ldr	r3, [r7, #4]
 800f6f6:	617b      	str	r3, [r7, #20]

  enum netconn_state state = msg->conn->state;
 800f6f8:	697b      	ldr	r3, [r7, #20]
 800f6fa:	681b      	ldr	r3, [r3, #0]
 800f6fc:	785b      	ldrb	r3, [r3, #1]
 800f6fe:	74fb      	strb	r3, [r7, #19]
  LWIP_ASSERT("netconn state error", /* this only happens for TCP netconns */
 800f700:	7cfb      	ldrb	r3, [r7, #19]
 800f702:	2b00      	cmp	r3, #0
 800f704:	d00d      	beq.n	800f722 <lwip_netconn_do_delconn+0x36>
 800f706:	697b      	ldr	r3, [r7, #20]
 800f708:	681b      	ldr	r3, [r3, #0]
 800f70a:	781b      	ldrb	r3, [r3, #0]
 800f70c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800f710:	2b10      	cmp	r3, #16
 800f712:	d006      	beq.n	800f722 <lwip_netconn_do_delconn+0x36>
 800f714:	4b6f      	ldr	r3, [pc, #444]	; (800f8d4 <lwip_netconn_do_delconn+0x1e8>)
 800f716:	f240 4201 	movw	r2, #1025	; 0x401
 800f71a:	496f      	ldr	r1, [pc, #444]	; (800f8d8 <lwip_netconn_do_delconn+0x1ec>)
 800f71c:	486f      	ldr	r0, [pc, #444]	; (800f8dc <lwip_netconn_do_delconn+0x1f0>)
 800f71e:	f00b fb67 	bl	801adf0 <iprintf>
      NETCONN_SET_SAFE_ERR(msg->conn, ERR_CLSD);
      sys_sem_signal(op_completed_sem);
    }
  }
#else /* LWIP_NETCONN_FULLDUPLEX */
  if (((state != NETCONN_NONE) &&
 800f722:	7cfb      	ldrb	r3, [r7, #19]
 800f724:	2b00      	cmp	r3, #0
 800f726:	d005      	beq.n	800f734 <lwip_netconn_do_delconn+0x48>
 800f728:	7cfb      	ldrb	r3, [r7, #19]
 800f72a:	2b02      	cmp	r3, #2
 800f72c:	d002      	beq.n	800f734 <lwip_netconn_do_delconn+0x48>
       (state != NETCONN_LISTEN) &&
 800f72e:	7cfb      	ldrb	r3, [r7, #19]
 800f730:	2b03      	cmp	r3, #3
 800f732:	d109      	bne.n	800f748 <lwip_netconn_do_delconn+0x5c>
       (state != NETCONN_CONNECT)) ||
 800f734:	7cfb      	ldrb	r3, [r7, #19]
 800f736:	2b03      	cmp	r3, #3
 800f738:	d10a      	bne.n	800f750 <lwip_netconn_do_delconn+0x64>
      ((state == NETCONN_CONNECT) && !IN_NONBLOCKING_CONNECT(msg->conn))) {
 800f73a:	697b      	ldr	r3, [r7, #20]
 800f73c:	681b      	ldr	r3, [r3, #0]
 800f73e:	7f1b      	ldrb	r3, [r3, #28]
 800f740:	f003 0304 	and.w	r3, r3, #4
 800f744:	2b00      	cmp	r3, #0
 800f746:	d103      	bne.n	800f750 <lwip_netconn_do_delconn+0x64>
    /* This means either a blocking write or blocking connect is running
       (nonblocking write returns and sets state to NONE) */
    msg->err = ERR_INPROGRESS;
 800f748:	697b      	ldr	r3, [r7, #20]
 800f74a:	22fb      	movs	r2, #251	; 0xfb
 800f74c:	711a      	strb	r2, [r3, #4]
 800f74e:	e09c      	b.n	800f88a <lwip_netconn_do_delconn+0x19e>
  } else
#endif /* LWIP_NETCONN_FULLDUPLEX */
  {
    LWIP_ASSERT("blocking connect in progress",
 800f750:	7cfb      	ldrb	r3, [r7, #19]
 800f752:	2b03      	cmp	r3, #3
 800f754:	d10d      	bne.n	800f772 <lwip_netconn_do_delconn+0x86>
 800f756:	697b      	ldr	r3, [r7, #20]
 800f758:	681b      	ldr	r3, [r3, #0]
 800f75a:	7f1b      	ldrb	r3, [r3, #28]
 800f75c:	f003 0304 	and.w	r3, r3, #4
 800f760:	2b00      	cmp	r3, #0
 800f762:	d106      	bne.n	800f772 <lwip_netconn_do_delconn+0x86>
 800f764:	4b5b      	ldr	r3, [pc, #364]	; (800f8d4 <lwip_netconn_do_delconn+0x1e8>)
 800f766:	f240 421f 	movw	r2, #1055	; 0x41f
 800f76a:	495d      	ldr	r1, [pc, #372]	; (800f8e0 <lwip_netconn_do_delconn+0x1f4>)
 800f76c:	485b      	ldr	r0, [pc, #364]	; (800f8dc <lwip_netconn_do_delconn+0x1f0>)
 800f76e:	f00b fb3f 	bl	801adf0 <iprintf>
      (state != NETCONN_CONNECT) || IN_NONBLOCKING_CONNECT(msg->conn));
    msg->err = ERR_OK;
 800f772:	697b      	ldr	r3, [r7, #20]
 800f774:	2200      	movs	r2, #0
 800f776:	711a      	strb	r2, [r3, #4]
    /* Drain and delete mboxes */
    netconn_drain(msg->conn);
 800f778:	697b      	ldr	r3, [r7, #20]
 800f77a:	681b      	ldr	r3, [r3, #0]
 800f77c:	4618      	mov	r0, r3
 800f77e:	f7ff fdbd 	bl	800f2fc <netconn_drain>

    if (msg->conn->pcb.tcp != NULL) {
 800f782:	697b      	ldr	r3, [r7, #20]
 800f784:	681b      	ldr	r3, [r3, #0]
 800f786:	685b      	ldr	r3, [r3, #4]
 800f788:	2b00      	cmp	r3, #0
 800f78a:	d064      	beq.n	800f856 <lwip_netconn_do_delconn+0x16a>

      switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 800f78c:	697b      	ldr	r3, [r7, #20]
 800f78e:	681b      	ldr	r3, [r3, #0]
 800f790:	781b      	ldrb	r3, [r3, #0]
 800f792:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800f796:	2b10      	cmp	r3, #16
 800f798:	d00e      	beq.n	800f7b8 <lwip_netconn_do_delconn+0xcc>
 800f79a:	2b20      	cmp	r3, #32
 800f79c:	d000      	beq.n	800f7a0 <lwip_netconn_do_delconn+0xb4>
        /* API_EVENT is called inside lwip_netconn_do_close_internal, before releasing
           the application thread, so we can return at this point! */
        return;
#endif /* LWIP_TCP */
      default:
        break;
 800f79e:	e056      	b.n	800f84e <lwip_netconn_do_delconn+0x162>
        msg->conn->pcb.udp->recv_arg = NULL;
 800f7a0:	697b      	ldr	r3, [r7, #20]
 800f7a2:	681b      	ldr	r3, [r3, #0]
 800f7a4:	685b      	ldr	r3, [r3, #4]
 800f7a6:	2200      	movs	r2, #0
 800f7a8:	61da      	str	r2, [r3, #28]
        udp_remove(msg->conn->pcb.udp);
 800f7aa:	697b      	ldr	r3, [r7, #20]
 800f7ac:	681b      	ldr	r3, [r3, #0]
 800f7ae:	685b      	ldr	r3, [r3, #4]
 800f7b0:	4618      	mov	r0, r3
 800f7b2:	f008 f8bf 	bl	8017934 <udp_remove>
        break;
 800f7b6:	e04a      	b.n	800f84e <lwip_netconn_do_delconn+0x162>
        LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL &&
 800f7b8:	697b      	ldr	r3, [r7, #20]
 800f7ba:	681b      	ldr	r3, [r3, #0]
 800f7bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f7be:	2b00      	cmp	r3, #0
 800f7c0:	d104      	bne.n	800f7cc <lwip_netconn_do_delconn+0xe0>
 800f7c2:	697b      	ldr	r3, [r7, #20]
 800f7c4:	681b      	ldr	r3, [r3, #0]
 800f7c6:	6a1b      	ldr	r3, [r3, #32]
 800f7c8:	2b00      	cmp	r3, #0
 800f7ca:	d006      	beq.n	800f7da <lwip_netconn_do_delconn+0xee>
 800f7cc:	4b41      	ldr	r3, [pc, #260]	; (800f8d4 <lwip_netconn_do_delconn+0x1e8>)
 800f7ce:	f240 4235 	movw	r2, #1077	; 0x435
 800f7d2:	4944      	ldr	r1, [pc, #272]	; (800f8e4 <lwip_netconn_do_delconn+0x1f8>)
 800f7d4:	4841      	ldr	r0, [pc, #260]	; (800f8dc <lwip_netconn_do_delconn+0x1f0>)
 800f7d6:	f00b fb0b 	bl	801adf0 <iprintf>
        msg->conn->state = NETCONN_CLOSE;
 800f7da:	697b      	ldr	r3, [r7, #20]
 800f7dc:	681b      	ldr	r3, [r3, #0]
 800f7de:	2204      	movs	r2, #4
 800f7e0:	705a      	strb	r2, [r3, #1]
        msg->msg.sd.shut = NETCONN_SHUT_RDWR;
 800f7e2:	697b      	ldr	r3, [r7, #20]
 800f7e4:	2203      	movs	r2, #3
 800f7e6:	721a      	strb	r2, [r3, #8]
        msg->conn->current_msg = msg;
 800f7e8:	697b      	ldr	r3, [r7, #20]
 800f7ea:	681b      	ldr	r3, [r3, #0]
 800f7ec:	697a      	ldr	r2, [r7, #20]
 800f7ee:	625a      	str	r2, [r3, #36]	; 0x24
        if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 800f7f0:	697b      	ldr	r3, [r7, #20]
 800f7f2:	681b      	ldr	r3, [r3, #0]
 800f7f4:	2100      	movs	r1, #0
 800f7f6:	4618      	mov	r0, r3
 800f7f8:	f7ff fe00 	bl	800f3fc <lwip_netconn_do_close_internal>
 800f7fc:	4603      	mov	r3, r0
 800f7fe:	2b00      	cmp	r3, #0
 800f800:	d064      	beq.n	800f8cc <lwip_netconn_do_delconn+0x1e0>
          LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 800f802:	697b      	ldr	r3, [r7, #20]
 800f804:	681b      	ldr	r3, [r3, #0]
 800f806:	785b      	ldrb	r3, [r3, #1]
 800f808:	2b04      	cmp	r3, #4
 800f80a:	d006      	beq.n	800f81a <lwip_netconn_do_delconn+0x12e>
 800f80c:	4b31      	ldr	r3, [pc, #196]	; (800f8d4 <lwip_netconn_do_delconn+0x1e8>)
 800f80e:	f240 423b 	movw	r2, #1083	; 0x43b
 800f812:	4935      	ldr	r1, [pc, #212]	; (800f8e8 <lwip_netconn_do_delconn+0x1fc>)
 800f814:	4831      	ldr	r0, [pc, #196]	; (800f8dc <lwip_netconn_do_delconn+0x1f0>)
 800f816:	f00b faeb 	bl	801adf0 <iprintf>
          UNLOCK_TCPIP_CORE();
 800f81a:	4834      	ldr	r0, [pc, #208]	; (800f8ec <lwip_netconn_do_delconn+0x200>)
 800f81c:	f00a fcbf 	bl	801a19e <sys_mutex_unlock>
          sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 800f820:	697b      	ldr	r3, [r7, #20]
 800f822:	681b      	ldr	r3, [r3, #0]
 800f824:	330c      	adds	r3, #12
 800f826:	2100      	movs	r1, #0
 800f828:	4618      	mov	r0, r3
 800f82a:	f00a fc15 	bl	801a058 <sys_arch_sem_wait>
          LOCK_TCPIP_CORE();
 800f82e:	482f      	ldr	r0, [pc, #188]	; (800f8ec <lwip_netconn_do_delconn+0x200>)
 800f830:	f00a fca6 	bl	801a180 <sys_mutex_lock>
          LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 800f834:	697b      	ldr	r3, [r7, #20]
 800f836:	681b      	ldr	r3, [r3, #0]
 800f838:	785b      	ldrb	r3, [r3, #1]
 800f83a:	2b00      	cmp	r3, #0
 800f83c:	d046      	beq.n	800f8cc <lwip_netconn_do_delconn+0x1e0>
 800f83e:	4b25      	ldr	r3, [pc, #148]	; (800f8d4 <lwip_netconn_do_delconn+0x1e8>)
 800f840:	f240 423f 	movw	r2, #1087	; 0x43f
 800f844:	4928      	ldr	r1, [pc, #160]	; (800f8e8 <lwip_netconn_do_delconn+0x1fc>)
 800f846:	4825      	ldr	r0, [pc, #148]	; (800f8dc <lwip_netconn_do_delconn+0x1f0>)
 800f848:	f00b fad2 	bl	801adf0 <iprintf>
        return;
 800f84c:	e03e      	b.n	800f8cc <lwip_netconn_do_delconn+0x1e0>
      }
      msg->conn->pcb.tcp = NULL;
 800f84e:	697b      	ldr	r3, [r7, #20]
 800f850:	681b      	ldr	r3, [r3, #0]
 800f852:	2200      	movs	r2, #0
 800f854:	605a      	str	r2, [r3, #4]
    }
    /* tcp netconns don't come here! */

    /* @todo: this lets select make the socket readable and writable,
       which is wrong! errfd instead? */
    API_EVENT(msg->conn, NETCONN_EVT_RCVPLUS, 0);
 800f856:	697b      	ldr	r3, [r7, #20]
 800f858:	681b      	ldr	r3, [r3, #0]
 800f85a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f85c:	2b00      	cmp	r3, #0
 800f85e:	d007      	beq.n	800f870 <lwip_netconn_do_delconn+0x184>
 800f860:	697b      	ldr	r3, [r7, #20]
 800f862:	681b      	ldr	r3, [r3, #0]
 800f864:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f866:	697a      	ldr	r2, [r7, #20]
 800f868:	6810      	ldr	r0, [r2, #0]
 800f86a:	2200      	movs	r2, #0
 800f86c:	2100      	movs	r1, #0
 800f86e:	4798      	blx	r3
    API_EVENT(msg->conn, NETCONN_EVT_SENDPLUS, 0);
 800f870:	697b      	ldr	r3, [r7, #20]
 800f872:	681b      	ldr	r3, [r3, #0]
 800f874:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f876:	2b00      	cmp	r3, #0
 800f878:	d007      	beq.n	800f88a <lwip_netconn_do_delconn+0x19e>
 800f87a:	697b      	ldr	r3, [r7, #20]
 800f87c:	681b      	ldr	r3, [r3, #0]
 800f87e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f880:	697a      	ldr	r2, [r7, #20]
 800f882:	6810      	ldr	r0, [r2, #0]
 800f884:	2200      	movs	r2, #0
 800f886:	2102      	movs	r1, #2
 800f888:	4798      	blx	r3
  }
  if (sys_sem_valid(LWIP_API_MSG_SEM(msg))) {
 800f88a:	697b      	ldr	r3, [r7, #20]
 800f88c:	681b      	ldr	r3, [r3, #0]
 800f88e:	330c      	adds	r3, #12
 800f890:	4618      	mov	r0, r3
 800f892:	f00a fc2c 	bl	801a0ee <sys_sem_valid>
 800f896:	4603      	mov	r3, r0
 800f898:	2b00      	cmp	r3, #0
 800f89a:	d018      	beq.n	800f8ce <lwip_netconn_do_delconn+0x1e2>
    TCPIP_APIMSG_ACK(msg);
 800f89c:	697b      	ldr	r3, [r7, #20]
 800f89e:	681b      	ldr	r3, [r3, #0]
 800f8a0:	2b00      	cmp	r3, #0
 800f8a2:	d014      	beq.n	800f8ce <lwip_netconn_do_delconn+0x1e2>
 800f8a4:	f00a fcae 	bl	801a204 <sys_arch_protect>
 800f8a8:	60f8      	str	r0, [r7, #12]
 800f8aa:	697b      	ldr	r3, [r7, #20]
 800f8ac:	681b      	ldr	r3, [r3, #0]
 800f8ae:	f993 3008 	ldrsb.w	r3, [r3, #8]
 800f8b2:	f113 0f0c 	cmn.w	r3, #12
 800f8b6:	db05      	blt.n	800f8c4 <lwip_netconn_do_delconn+0x1d8>
 800f8b8:	697b      	ldr	r3, [r7, #20]
 800f8ba:	681b      	ldr	r3, [r3, #0]
 800f8bc:	697a      	ldr	r2, [r7, #20]
 800f8be:	f992 2004 	ldrsb.w	r2, [r2, #4]
 800f8c2:	721a      	strb	r2, [r3, #8]
 800f8c4:	68f8      	ldr	r0, [r7, #12]
 800f8c6:	f00a fcab 	bl	801a220 <sys_arch_unprotect>
 800f8ca:	e000      	b.n	800f8ce <lwip_netconn_do_delconn+0x1e2>
        return;
 800f8cc:	bf00      	nop
  }
}
 800f8ce:	3718      	adds	r7, #24
 800f8d0:	46bd      	mov	sp, r7
 800f8d2:	bd80      	pop	{r7, pc}
 800f8d4:	0801c2d0 	.word	0x0801c2d0
 800f8d8:	0801c5e4 	.word	0x0801c5e4
 800f8dc:	0801c328 	.word	0x0801c328
 800f8e0:	0801c5f8 	.word	0x0801c5f8
 800f8e4:	0801c618 	.word	0x0801c618
 800f8e8:	0801c634 	.word	0x0801c634
 800f8ec:	20007634 	.word	0x20007634

0800f8f0 <lwip_netconn_do_bind>:
 * @param m the api_msg_msg pointing to the connection and containing
 *          the IP address and port to bind to
 */
void
lwip_netconn_do_bind(void *m)
{
 800f8f0:	b580      	push	{r7, lr}
 800f8f2:	b084      	sub	sp, #16
 800f8f4:	af00      	add	r7, sp, #0
 800f8f6:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg*)m;
 800f8f8:	687b      	ldr	r3, [r7, #4]
 800f8fa:	60fb      	str	r3, [r7, #12]

  if (ERR_IS_FATAL(msg->conn->last_err)) {
 800f8fc:	68fb      	ldr	r3, [r7, #12]
 800f8fe:	681b      	ldr	r3, [r3, #0]
 800f900:	f993 3008 	ldrsb.w	r3, [r3, #8]
 800f904:	f113 0f0c 	cmn.w	r3, #12
 800f908:	da06      	bge.n	800f918 <lwip_netconn_do_bind+0x28>
    msg->err = msg->conn->last_err;
 800f90a:	68fb      	ldr	r3, [r7, #12]
 800f90c:	681b      	ldr	r3, [r3, #0]
 800f90e:	f993 2008 	ldrsb.w	r2, [r3, #8]
 800f912:	68fb      	ldr	r3, [r7, #12]
 800f914:	711a      	strb	r2, [r3, #4]
 800f916:	e030      	b.n	800f97a <lwip_netconn_do_bind+0x8a>
  } else {
    msg->err = ERR_VAL;
 800f918:	68fb      	ldr	r3, [r7, #12]
 800f91a:	22fa      	movs	r2, #250	; 0xfa
 800f91c:	711a      	strb	r2, [r3, #4]
    if (msg->conn->pcb.tcp != NULL) {
 800f91e:	68fb      	ldr	r3, [r7, #12]
 800f920:	681b      	ldr	r3, [r3, #0]
 800f922:	685b      	ldr	r3, [r3, #4]
 800f924:	2b00      	cmp	r3, #0
 800f926:	d027      	beq.n	800f978 <lwip_netconn_do_bind+0x88>
      switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 800f928:	68fb      	ldr	r3, [r7, #12]
 800f92a:	681b      	ldr	r3, [r3, #0]
 800f92c:	781b      	ldrb	r3, [r3, #0]
 800f92e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800f932:	2b10      	cmp	r3, #16
 800f934:	d011      	beq.n	800f95a <lwip_netconn_do_bind+0x6a>
 800f936:	2b20      	cmp	r3, #32
 800f938:	d000      	beq.n	800f93c <lwip_netconn_do_bind+0x4c>
      case NETCONN_TCP:
        msg->err = tcp_bind(msg->conn->pcb.tcp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
        break;
#endif /* LWIP_TCP */
      default:
        break;
 800f93a:	e01e      	b.n	800f97a <lwip_netconn_do_bind+0x8a>
        msg->err = udp_bind(msg->conn->pcb.udp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 800f93c:	68fb      	ldr	r3, [r7, #12]
 800f93e:	681b      	ldr	r3, [r3, #0]
 800f940:	6858      	ldr	r0, [r3, #4]
 800f942:	68fb      	ldr	r3, [r7, #12]
 800f944:	6899      	ldr	r1, [r3, #8]
 800f946:	68fb      	ldr	r3, [r7, #12]
 800f948:	899b      	ldrh	r3, [r3, #12]
 800f94a:	461a      	mov	r2, r3
 800f94c:	f007 ff70 	bl	8017830 <udp_bind>
 800f950:	4603      	mov	r3, r0
 800f952:	461a      	mov	r2, r3
 800f954:	68fb      	ldr	r3, [r7, #12]
 800f956:	711a      	strb	r2, [r3, #4]
        break;
 800f958:	e00f      	b.n	800f97a <lwip_netconn_do_bind+0x8a>
        msg->err = tcp_bind(msg->conn->pcb.tcp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 800f95a:	68fb      	ldr	r3, [r7, #12]
 800f95c:	681b      	ldr	r3, [r3, #0]
 800f95e:	6858      	ldr	r0, [r3, #4]
 800f960:	68fb      	ldr	r3, [r7, #12]
 800f962:	6899      	ldr	r1, [r3, #8]
 800f964:	68fb      	ldr	r3, [r7, #12]
 800f966:	899b      	ldrh	r3, [r3, #12]
 800f968:	461a      	mov	r2, r3
 800f96a:	f002 fd27 	bl	80123bc <tcp_bind>
 800f96e:	4603      	mov	r3, r0
 800f970:	461a      	mov	r2, r3
 800f972:	68fb      	ldr	r3, [r7, #12]
 800f974:	711a      	strb	r2, [r3, #4]
        break;
 800f976:	e000      	b.n	800f97a <lwip_netconn_do_bind+0x8a>
      }
    }
 800f978:	bf00      	nop
  }
  TCPIP_APIMSG_ACK(msg);
 800f97a:	68fb      	ldr	r3, [r7, #12]
 800f97c:	681b      	ldr	r3, [r3, #0]
 800f97e:	2b00      	cmp	r3, #0
 800f980:	d012      	beq.n	800f9a8 <lwip_netconn_do_bind+0xb8>
 800f982:	f00a fc3f 	bl	801a204 <sys_arch_protect>
 800f986:	60b8      	str	r0, [r7, #8]
 800f988:	68fb      	ldr	r3, [r7, #12]
 800f98a:	681b      	ldr	r3, [r3, #0]
 800f98c:	f993 3008 	ldrsb.w	r3, [r3, #8]
 800f990:	f113 0f0c 	cmn.w	r3, #12
 800f994:	db05      	blt.n	800f9a2 <lwip_netconn_do_bind+0xb2>
 800f996:	68fb      	ldr	r3, [r7, #12]
 800f998:	681b      	ldr	r3, [r3, #0]
 800f99a:	68fa      	ldr	r2, [r7, #12]
 800f99c:	f992 2004 	ldrsb.w	r2, [r2, #4]
 800f9a0:	721a      	strb	r2, [r3, #8]
 800f9a2:	68b8      	ldr	r0, [r7, #8]
 800f9a4:	f00a fc3c 	bl	801a220 <sys_arch_unprotect>
}
 800f9a8:	bf00      	nop
 800f9aa:	3710      	adds	r7, #16
 800f9ac:	46bd      	mov	sp, r7
 800f9ae:	bd80      	pop	{r7, pc}

0800f9b0 <lwip_netconn_do_listen>:
 *
 * @param m the api_msg_msg pointing to the connection
 */
void
lwip_netconn_do_listen(void *m)
{
 800f9b0:	b580      	push	{r7, lr}
 800f9b2:	b088      	sub	sp, #32
 800f9b4:	af00      	add	r7, sp, #0
 800f9b6:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg*)m;
 800f9b8:	687b      	ldr	r3, [r7, #4]
 800f9ba:	61fb      	str	r3, [r7, #28]

  if (ERR_IS_FATAL(msg->conn->last_err)) {
 800f9bc:	69fb      	ldr	r3, [r7, #28]
 800f9be:	681b      	ldr	r3, [r3, #0]
 800f9c0:	f993 3008 	ldrsb.w	r3, [r3, #8]
 800f9c4:	f113 0f0c 	cmn.w	r3, #12
 800f9c8:	da06      	bge.n	800f9d8 <lwip_netconn_do_listen+0x28>
    msg->err = msg->conn->last_err;
 800f9ca:	69fb      	ldr	r3, [r7, #28]
 800f9cc:	681b      	ldr	r3, [r3, #0]
 800f9ce:	f993 2008 	ldrsb.w	r2, [r3, #8]
 800f9d2:	69fb      	ldr	r3, [r7, #28]
 800f9d4:	711a      	strb	r2, [r3, #4]
 800f9d6:	e090      	b.n	800fafa <lwip_netconn_do_listen+0x14a>
  } else {
    msg->err = ERR_CONN;
 800f9d8:	69fb      	ldr	r3, [r7, #28]
 800f9da:	22f5      	movs	r2, #245	; 0xf5
 800f9dc:	711a      	strb	r2, [r3, #4]
    if (msg->conn->pcb.tcp != NULL) {
 800f9de:	69fb      	ldr	r3, [r7, #28]
 800f9e0:	681b      	ldr	r3, [r3, #0]
 800f9e2:	685b      	ldr	r3, [r3, #4]
 800f9e4:	2b00      	cmp	r3, #0
 800f9e6:	f000 8088 	beq.w	800fafa <lwip_netconn_do_listen+0x14a>
      if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 800f9ea:	69fb      	ldr	r3, [r7, #28]
 800f9ec:	681b      	ldr	r3, [r3, #0]
 800f9ee:	781b      	ldrb	r3, [r3, #0]
 800f9f0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800f9f4:	2b10      	cmp	r3, #16
 800f9f6:	d17d      	bne.n	800faf4 <lwip_netconn_do_listen+0x144>
        if (msg->conn->state == NETCONN_NONE) {
 800f9f8:	69fb      	ldr	r3, [r7, #28]
 800f9fa:	681b      	ldr	r3, [r3, #0]
 800f9fc:	785b      	ldrb	r3, [r3, #1]
 800f9fe:	2b00      	cmp	r3, #0
 800fa00:	d16f      	bne.n	800fae2 <lwip_netconn_do_listen+0x132>
          struct tcp_pcb* lpcb;
          if (msg->conn->pcb.tcp->state != CLOSED) {
 800fa02:	69fb      	ldr	r3, [r7, #28]
 800fa04:	681b      	ldr	r3, [r3, #0]
 800fa06:	685b      	ldr	r3, [r3, #4]
 800fa08:	7d1b      	ldrb	r3, [r3, #20]
 800fa0a:	2b00      	cmp	r3, #0
 800fa0c:	d003      	beq.n	800fa16 <lwip_netconn_do_listen+0x66>
            /* connection is not closed, cannot listen */
            msg->err = ERR_VAL;
 800fa0e:	69fb      	ldr	r3, [r7, #28]
 800fa10:	22fa      	movs	r2, #250	; 0xfa
 800fa12:	711a      	strb	r2, [r3, #4]
 800fa14:	e071      	b.n	800fafa <lwip_netconn_do_listen+0x14a>
            err_t err;
            u8_t backlog;
#if TCP_LISTEN_BACKLOG
            backlog = msg->msg.lb.backlog;
#else  /* TCP_LISTEN_BACKLOG */
            backlog = TCP_DEFAULT_LISTEN_BACKLOG;
 800fa16:	23ff      	movs	r3, #255	; 0xff
 800fa18:	76fb      	strb	r3, [r7, #27]
              IP_SET_TYPE_VAL(msg->conn->pcb.tcp->local_ip,  IPADDR_TYPE_ANY);
              IP_SET_TYPE_VAL(msg->conn->pcb.tcp->remote_ip, IPADDR_TYPE_ANY);
            }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

            lpcb = tcp_listen_with_backlog_and_err(msg->conn->pcb.tcp, backlog, &err);
 800fa1a:	69fb      	ldr	r3, [r7, #28]
 800fa1c:	681b      	ldr	r3, [r3, #0]
 800fa1e:	685b      	ldr	r3, [r3, #4]
 800fa20:	f107 020f 	add.w	r2, r7, #15
 800fa24:	7ef9      	ldrb	r1, [r7, #27]
 800fa26:	4618      	mov	r0, r3
 800fa28:	f002 fd6a 	bl	8012500 <tcp_listen_with_backlog_and_err>
 800fa2c:	6178      	str	r0, [r7, #20]

            if (lpcb == NULL) {
 800fa2e:	697b      	ldr	r3, [r7, #20]
 800fa30:	2b00      	cmp	r3, #0
 800fa32:	d104      	bne.n	800fa3e <lwip_netconn_do_listen+0x8e>
              /* in this case, the old pcb is still allocated */
              msg->err = err;
 800fa34:	f997 200f 	ldrsb.w	r2, [r7, #15]
 800fa38:	69fb      	ldr	r3, [r7, #28]
 800fa3a:	711a      	strb	r2, [r3, #4]
 800fa3c:	e05d      	b.n	800fafa <lwip_netconn_do_listen+0x14a>
            } else {
              /* delete the recvmbox and allocate the acceptmbox */
              if (sys_mbox_valid(&msg->conn->recvmbox)) {
 800fa3e:	69fb      	ldr	r3, [r7, #28]
 800fa40:	681b      	ldr	r3, [r3, #0]
 800fa42:	3310      	adds	r3, #16
 800fa44:	4618      	mov	r0, r3
 800fa46:	f00a fac1 	bl	8019fcc <sys_mbox_valid>
 800fa4a:	4603      	mov	r3, r0
 800fa4c:	2b00      	cmp	r3, #0
 800fa4e:	d00b      	beq.n	800fa68 <lwip_netconn_do_listen+0xb8>
                /** @todo: should we drain the recvmbox here? */
                sys_mbox_free(&msg->conn->recvmbox);
 800fa50:	69fb      	ldr	r3, [r7, #28]
 800fa52:	681b      	ldr	r3, [r3, #0]
 800fa54:	3310      	adds	r3, #16
 800fa56:	4618      	mov	r0, r3
 800fa58:	f00a fa1c 	bl	8019e94 <sys_mbox_free>
                sys_mbox_set_invalid(&msg->conn->recvmbox);
 800fa5c:	69fb      	ldr	r3, [r7, #28]
 800fa5e:	681b      	ldr	r3, [r3, #0]
 800fa60:	3310      	adds	r3, #16
 800fa62:	4618      	mov	r0, r3
 800fa64:	f00a fac3 	bl	8019fee <sys_mbox_set_invalid>
              }
              msg->err = ERR_OK;
 800fa68:	69fb      	ldr	r3, [r7, #28]
 800fa6a:	2200      	movs	r2, #0
 800fa6c:	711a      	strb	r2, [r3, #4]
              if (!sys_mbox_valid(&msg->conn->acceptmbox)) {
 800fa6e:	69fb      	ldr	r3, [r7, #28]
 800fa70:	681b      	ldr	r3, [r3, #0]
 800fa72:	3314      	adds	r3, #20
 800fa74:	4618      	mov	r0, r3
 800fa76:	f00a faa9 	bl	8019fcc <sys_mbox_valid>
 800fa7a:	4603      	mov	r3, r0
 800fa7c:	2b00      	cmp	r3, #0
 800fa7e:	d10a      	bne.n	800fa96 <lwip_netconn_do_listen+0xe6>
                msg->err = sys_mbox_new(&msg->conn->acceptmbox, DEFAULT_ACCEPTMBOX_SIZE);
 800fa80:	69fb      	ldr	r3, [r7, #28]
 800fa82:	681b      	ldr	r3, [r3, #0]
 800fa84:	3314      	adds	r3, #20
 800fa86:	2106      	movs	r1, #6
 800fa88:	4618      	mov	r0, r3
 800fa8a:	f00a f9e1 	bl	8019e50 <sys_mbox_new>
 800fa8e:	4603      	mov	r3, r0
 800fa90:	461a      	mov	r2, r3
 800fa92:	69fb      	ldr	r3, [r7, #28]
 800fa94:	711a      	strb	r2, [r3, #4]
              }
              if (msg->err == ERR_OK) {
 800fa96:	69fb      	ldr	r3, [r7, #28]
 800fa98:	f993 3004 	ldrsb.w	r3, [r3, #4]
 800fa9c:	2b00      	cmp	r3, #0
 800fa9e:	d118      	bne.n	800fad2 <lwip_netconn_do_listen+0x122>
                msg->conn->state = NETCONN_LISTEN;
 800faa0:	69fb      	ldr	r3, [r7, #28]
 800faa2:	681b      	ldr	r3, [r3, #0]
 800faa4:	2202      	movs	r2, #2
 800faa6:	705a      	strb	r2, [r3, #1]
                msg->conn->pcb.tcp = lpcb;
 800faa8:	69fb      	ldr	r3, [r7, #28]
 800faaa:	681b      	ldr	r3, [r3, #0]
 800faac:	697a      	ldr	r2, [r7, #20]
 800faae:	605a      	str	r2, [r3, #4]
                tcp_arg(msg->conn->pcb.tcp, msg->conn);
 800fab0:	69fb      	ldr	r3, [r7, #28]
 800fab2:	681b      	ldr	r3, [r3, #0]
 800fab4:	685a      	ldr	r2, [r3, #4]
 800fab6:	69fb      	ldr	r3, [r7, #28]
 800fab8:	681b      	ldr	r3, [r3, #0]
 800faba:	4619      	mov	r1, r3
 800fabc:	4610      	mov	r0, r2
 800fabe:	f003 fbe7 	bl	8013290 <tcp_arg>
                tcp_accept(msg->conn->pcb.tcp, accept_function);
 800fac2:	69fb      	ldr	r3, [r7, #28]
 800fac4:	681b      	ldr	r3, [r3, #0]
 800fac6:	685b      	ldr	r3, [r3, #4]
 800fac8:	4919      	ldr	r1, [pc, #100]	; (800fb30 <lwip_netconn_do_listen+0x180>)
 800faca:	4618      	mov	r0, r3
 800facc:	f003 fc56 	bl	801337c <tcp_accept>
 800fad0:	e013      	b.n	800fafa <lwip_netconn_do_listen+0x14a>
              } else {
                /* since the old pcb is already deallocated, free lpcb now */
                tcp_close(lpcb);
 800fad2:	6978      	ldr	r0, [r7, #20]
 800fad4:	f002 fb54 	bl	8012180 <tcp_close>
                msg->conn->pcb.tcp = NULL;
 800fad8:	69fb      	ldr	r3, [r7, #28]
 800fada:	681b      	ldr	r3, [r3, #0]
 800fadc:	2200      	movs	r2, #0
 800fade:	605a      	str	r2, [r3, #4]
 800fae0:	e00b      	b.n	800fafa <lwip_netconn_do_listen+0x14a>
              }
            }
          }
        } else if (msg->conn->state == NETCONN_LISTEN) {
 800fae2:	69fb      	ldr	r3, [r7, #28]
 800fae4:	681b      	ldr	r3, [r3, #0]
 800fae6:	785b      	ldrb	r3, [r3, #1]
 800fae8:	2b02      	cmp	r3, #2
 800faea:	d106      	bne.n	800fafa <lwip_netconn_do_listen+0x14a>
          /* already listening, allow updating of the backlog */
          msg->err = ERR_OK;
 800faec:	69fb      	ldr	r3, [r7, #28]
 800faee:	2200      	movs	r2, #0
 800faf0:	711a      	strb	r2, [r3, #4]
 800faf2:	e002      	b.n	800fafa <lwip_netconn_do_listen+0x14a>
          tcp_backlog_set(msg->conn->pcb.tcp, msg->msg.lb.backlog);
        }
      } else {
        msg->err = ERR_ARG;
 800faf4:	69fb      	ldr	r3, [r7, #28]
 800faf6:	22f0      	movs	r2, #240	; 0xf0
 800faf8:	711a      	strb	r2, [r3, #4]
      }
    }
  }
  TCPIP_APIMSG_ACK(msg);
 800fafa:	69fb      	ldr	r3, [r7, #28]
 800fafc:	681b      	ldr	r3, [r3, #0]
 800fafe:	2b00      	cmp	r3, #0
 800fb00:	d012      	beq.n	800fb28 <lwip_netconn_do_listen+0x178>
 800fb02:	f00a fb7f 	bl	801a204 <sys_arch_protect>
 800fb06:	6138      	str	r0, [r7, #16]
 800fb08:	69fb      	ldr	r3, [r7, #28]
 800fb0a:	681b      	ldr	r3, [r3, #0]
 800fb0c:	f993 3008 	ldrsb.w	r3, [r3, #8]
 800fb10:	f113 0f0c 	cmn.w	r3, #12
 800fb14:	db05      	blt.n	800fb22 <lwip_netconn_do_listen+0x172>
 800fb16:	69fb      	ldr	r3, [r7, #28]
 800fb18:	681b      	ldr	r3, [r3, #0]
 800fb1a:	69fa      	ldr	r2, [r7, #28]
 800fb1c:	f992 2004 	ldrsb.w	r2, [r2, #4]
 800fb20:	721a      	strb	r2, [r3, #8]
 800fb22:	6938      	ldr	r0, [r7, #16]
 800fb24:	f00a fb7c 	bl	801a220 <sys_arch_unprotect>
}
 800fb28:	bf00      	nop
 800fb2a:	3720      	adds	r7, #32
 800fb2c:	46bd      	mov	sp, r7
 800fb2e:	bd80      	pop	{r7, pc}
 800fb30:	0800ef15 	.word	0x0800ef15

0800fb34 <lwip_netconn_do_recv>:
 *
 * @param m the api_msg_msg pointing to the connection
 */
void
lwip_netconn_do_recv(void *m)
{
 800fb34:	b580      	push	{r7, lr}
 800fb36:	b086      	sub	sp, #24
 800fb38:	af00      	add	r7, sp, #0
 800fb3a:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg*)m;
 800fb3c:	687b      	ldr	r3, [r7, #4]
 800fb3e:	613b      	str	r3, [r7, #16]

  msg->err = ERR_OK;
 800fb40:	693b      	ldr	r3, [r7, #16]
 800fb42:	2200      	movs	r2, #0
 800fb44:	711a      	strb	r2, [r3, #4]
  if (msg->conn->pcb.tcp != NULL) {
 800fb46:	693b      	ldr	r3, [r7, #16]
 800fb48:	681b      	ldr	r3, [r3, #0]
 800fb4a:	685b      	ldr	r3, [r3, #4]
 800fb4c:	2b00      	cmp	r3, #0
 800fb4e:	d022      	beq.n	800fb96 <lwip_netconn_do_recv+0x62>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 800fb50:	693b      	ldr	r3, [r7, #16]
 800fb52:	681b      	ldr	r3, [r3, #0]
 800fb54:	781b      	ldrb	r3, [r3, #0]
 800fb56:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800fb5a:	2b10      	cmp	r3, #16
 800fb5c:	d11b      	bne.n	800fb96 <lwip_netconn_do_recv+0x62>
      u32_t remaining = msg->msg.r.len;
 800fb5e:	693b      	ldr	r3, [r7, #16]
 800fb60:	689b      	ldr	r3, [r3, #8]
 800fb62:	617b      	str	r3, [r7, #20]
      do {
        u16_t recved = (remaining > 0xffff) ? 0xffff : (u16_t)remaining;
 800fb64:	697b      	ldr	r3, [r7, #20]
 800fb66:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800fb6a:	d202      	bcs.n	800fb72 <lwip_netconn_do_recv+0x3e>
 800fb6c:	697b      	ldr	r3, [r7, #20]
 800fb6e:	b29b      	uxth	r3, r3
 800fb70:	e001      	b.n	800fb76 <lwip_netconn_do_recv+0x42>
 800fb72:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800fb76:	81fb      	strh	r3, [r7, #14]
        tcp_recved(msg->conn->pcb.tcp, recved);
 800fb78:	693b      	ldr	r3, [r7, #16]
 800fb7a:	681b      	ldr	r3, [r3, #0]
 800fb7c:	685b      	ldr	r3, [r3, #4]
 800fb7e:	89fa      	ldrh	r2, [r7, #14]
 800fb80:	4611      	mov	r1, r2
 800fb82:	4618      	mov	r0, r3
 800fb84:	f002 fda2 	bl	80126cc <tcp_recved>
        remaining -= recved;
 800fb88:	89fb      	ldrh	r3, [r7, #14]
 800fb8a:	697a      	ldr	r2, [r7, #20]
 800fb8c:	1ad3      	subs	r3, r2, r3
 800fb8e:	617b      	str	r3, [r7, #20]
      } while (remaining != 0);
 800fb90:	697b      	ldr	r3, [r7, #20]
 800fb92:	2b00      	cmp	r3, #0
 800fb94:	d1e6      	bne.n	800fb64 <lwip_netconn_do_recv+0x30>
    }
  }
  TCPIP_APIMSG_ACK(msg);
 800fb96:	693b      	ldr	r3, [r7, #16]
 800fb98:	681b      	ldr	r3, [r3, #0]
 800fb9a:	2b00      	cmp	r3, #0
 800fb9c:	d012      	beq.n	800fbc4 <lwip_netconn_do_recv+0x90>
 800fb9e:	f00a fb31 	bl	801a204 <sys_arch_protect>
 800fba2:	60b8      	str	r0, [r7, #8]
 800fba4:	693b      	ldr	r3, [r7, #16]
 800fba6:	681b      	ldr	r3, [r3, #0]
 800fba8:	f993 3008 	ldrsb.w	r3, [r3, #8]
 800fbac:	f113 0f0c 	cmn.w	r3, #12
 800fbb0:	db05      	blt.n	800fbbe <lwip_netconn_do_recv+0x8a>
 800fbb2:	693b      	ldr	r3, [r7, #16]
 800fbb4:	681b      	ldr	r3, [r3, #0]
 800fbb6:	693a      	ldr	r2, [r7, #16]
 800fbb8:	f992 2004 	ldrsb.w	r2, [r2, #4]
 800fbbc:	721a      	strb	r2, [r3, #8]
 800fbbe:	68b8      	ldr	r0, [r7, #8]
 800fbc0:	f00a fb2e 	bl	801a220 <sys_arch_unprotect>
}
 800fbc4:	bf00      	nop
 800fbc6:	3718      	adds	r7, #24
 800fbc8:	46bd      	mov	sp, r7
 800fbca:	bd80      	pop	{r7, pc}

0800fbcc <lwip_netconn_do_writemore>:
 * @return ERR_OK
 *         ERR_MEM if LWIP_TCPIP_CORE_LOCKING=1 and sending hasn't yet finished
 */
static err_t
lwip_netconn_do_writemore(struct netconn *conn  WRITE_DELAYED_PARAM)
{
 800fbcc:	b580      	push	{r7, lr}
 800fbce:	b08a      	sub	sp, #40	; 0x28
 800fbd0:	af00      	add	r7, sp, #0
 800fbd2:	6078      	str	r0, [r7, #4]
 800fbd4:	460b      	mov	r3, r1
 800fbd6:	70fb      	strb	r3, [r7, #3]
  err_t err;
  const void *dataptr;
  u16_t len, available;
  u8_t write_finished = 0;
 800fbd8:	2300      	movs	r3, #0
 800fbda:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  size_t diff;
  u8_t dontblock;
  u8_t apiflags;

  LWIP_ASSERT("conn != NULL", conn != NULL);
 800fbde:	687b      	ldr	r3, [r7, #4]
 800fbe0:	2b00      	cmp	r3, #0
 800fbe2:	d106      	bne.n	800fbf2 <lwip_netconn_do_writemore+0x26>
 800fbe4:	4ba3      	ldr	r3, [pc, #652]	; (800fe74 <lwip_netconn_do_writemore+0x2a8>)
 800fbe6:	f240 52e3 	movw	r2, #1507	; 0x5e3
 800fbea:	49a3      	ldr	r1, [pc, #652]	; (800fe78 <lwip_netconn_do_writemore+0x2ac>)
 800fbec:	48a3      	ldr	r0, [pc, #652]	; (800fe7c <lwip_netconn_do_writemore+0x2b0>)
 800fbee:	f00b f8ff 	bl	801adf0 <iprintf>
  LWIP_ASSERT("conn->state == NETCONN_WRITE", (conn->state == NETCONN_WRITE));
 800fbf2:	687b      	ldr	r3, [r7, #4]
 800fbf4:	785b      	ldrb	r3, [r3, #1]
 800fbf6:	2b01      	cmp	r3, #1
 800fbf8:	d006      	beq.n	800fc08 <lwip_netconn_do_writemore+0x3c>
 800fbfa:	4b9e      	ldr	r3, [pc, #632]	; (800fe74 <lwip_netconn_do_writemore+0x2a8>)
 800fbfc:	f240 52e4 	movw	r2, #1508	; 0x5e4
 800fc00:	499f      	ldr	r1, [pc, #636]	; (800fe80 <lwip_netconn_do_writemore+0x2b4>)
 800fc02:	489e      	ldr	r0, [pc, #632]	; (800fe7c <lwip_netconn_do_writemore+0x2b0>)
 800fc04:	f00b f8f4 	bl	801adf0 <iprintf>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 800fc08:	687b      	ldr	r3, [r7, #4]
 800fc0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fc0c:	2b00      	cmp	r3, #0
 800fc0e:	d106      	bne.n	800fc1e <lwip_netconn_do_writemore+0x52>
 800fc10:	4b98      	ldr	r3, [pc, #608]	; (800fe74 <lwip_netconn_do_writemore+0x2a8>)
 800fc12:	f240 52e5 	movw	r2, #1509	; 0x5e5
 800fc16:	499b      	ldr	r1, [pc, #620]	; (800fe84 <lwip_netconn_do_writemore+0x2b8>)
 800fc18:	4898      	ldr	r0, [pc, #608]	; (800fe7c <lwip_netconn_do_writemore+0x2b0>)
 800fc1a:	f00b f8e9 	bl	801adf0 <iprintf>
  LWIP_ASSERT("conn->pcb.tcp != NULL", conn->pcb.tcp != NULL);
 800fc1e:	687b      	ldr	r3, [r7, #4]
 800fc20:	685b      	ldr	r3, [r3, #4]
 800fc22:	2b00      	cmp	r3, #0
 800fc24:	d106      	bne.n	800fc34 <lwip_netconn_do_writemore+0x68>
 800fc26:	4b93      	ldr	r3, [pc, #588]	; (800fe74 <lwip_netconn_do_writemore+0x2a8>)
 800fc28:	f240 52e6 	movw	r2, #1510	; 0x5e6
 800fc2c:	4996      	ldr	r1, [pc, #600]	; (800fe88 <lwip_netconn_do_writemore+0x2bc>)
 800fc2e:	4893      	ldr	r0, [pc, #588]	; (800fe7c <lwip_netconn_do_writemore+0x2b0>)
 800fc30:	f00b f8de 	bl	801adf0 <iprintf>
  LWIP_ASSERT("conn->write_offset < conn->current_msg->msg.w.len",
 800fc34:	687b      	ldr	r3, [r7, #4]
 800fc36:	6a1a      	ldr	r2, [r3, #32]
 800fc38:	687b      	ldr	r3, [r7, #4]
 800fc3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fc3c:	68db      	ldr	r3, [r3, #12]
 800fc3e:	429a      	cmp	r2, r3
 800fc40:	d306      	bcc.n	800fc50 <lwip_netconn_do_writemore+0x84>
 800fc42:	4b8c      	ldr	r3, [pc, #560]	; (800fe74 <lwip_netconn_do_writemore+0x2a8>)
 800fc44:	f44f 62bd 	mov.w	r2, #1512	; 0x5e8
 800fc48:	4990      	ldr	r1, [pc, #576]	; (800fe8c <lwip_netconn_do_writemore+0x2c0>)
 800fc4a:	488c      	ldr	r0, [pc, #560]	; (800fe7c <lwip_netconn_do_writemore+0x2b0>)
 800fc4c:	f00b f8d0 	bl	801adf0 <iprintf>
    conn->write_offset < conn->current_msg->msg.w.len);

  apiflags = conn->current_msg->msg.w.apiflags;
 800fc50:	687b      	ldr	r3, [r7, #4]
 800fc52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fc54:	7c1b      	ldrb	r3, [r3, #16]
 800fc56:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 800fc5a:	687b      	ldr	r3, [r7, #4]
 800fc5c:	7f1b      	ldrb	r3, [r3, #28]
 800fc5e:	f003 0302 	and.w	r3, r3, #2
 800fc62:	2b00      	cmp	r3, #0
 800fc64:	d105      	bne.n	800fc72 <lwip_netconn_do_writemore+0xa6>
 800fc66:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800fc6a:	f003 0304 	and.w	r3, r3, #4
 800fc6e:	2b00      	cmp	r3, #0
 800fc70:	d001      	beq.n	800fc76 <lwip_netconn_do_writemore+0xaa>
 800fc72:	2301      	movs	r3, #1
 800fc74:	e000      	b.n	800fc78 <lwip_netconn_do_writemore+0xac>
 800fc76:	2300      	movs	r3, #0
 800fc78:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
      conn->write_offset = 0;
    }
  } else
#endif /* LWIP_SO_SNDTIMEO */
  {
    dataptr = (const u8_t*)conn->current_msg->msg.w.dataptr + conn->write_offset;
 800fc7c:	687b      	ldr	r3, [r7, #4]
 800fc7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fc80:	689a      	ldr	r2, [r3, #8]
 800fc82:	687b      	ldr	r3, [r7, #4]
 800fc84:	6a1b      	ldr	r3, [r3, #32]
 800fc86:	4413      	add	r3, r2
 800fc88:	61fb      	str	r3, [r7, #28]
    diff = conn->current_msg->msg.w.len - conn->write_offset;
 800fc8a:	687b      	ldr	r3, [r7, #4]
 800fc8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fc8e:	68da      	ldr	r2, [r3, #12]
 800fc90:	687b      	ldr	r3, [r7, #4]
 800fc92:	6a1b      	ldr	r3, [r3, #32]
 800fc94:	1ad3      	subs	r3, r2, r3
 800fc96:	61bb      	str	r3, [r7, #24]
    if (diff > 0xffffUL) { /* max_u16_t */
 800fc98:	69bb      	ldr	r3, [r7, #24]
 800fc9a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800fc9e:	d309      	bcc.n	800fcb4 <lwip_netconn_do_writemore+0xe8>
      len = 0xffff;
 800fca0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800fca4:	84bb      	strh	r3, [r7, #36]	; 0x24
      apiflags |= TCP_WRITE_FLAG_MORE;
 800fca6:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800fcaa:	f043 0302 	orr.w	r3, r3, #2
 800fcae:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800fcb2:	e001      	b.n	800fcb8 <lwip_netconn_do_writemore+0xec>
    } else {
      len = (u16_t)diff;
 800fcb4:	69bb      	ldr	r3, [r7, #24]
 800fcb6:	84bb      	strh	r3, [r7, #36]	; 0x24
    }
    available = tcp_sndbuf(conn->pcb.tcp);
 800fcb8:	687b      	ldr	r3, [r7, #4]
 800fcba:	685b      	ldr	r3, [r3, #4]
 800fcbc:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800fcc0:	82fb      	strh	r3, [r7, #22]
    if (available < len) {
 800fcc2:	8afa      	ldrh	r2, [r7, #22]
 800fcc4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800fcc6:	429a      	cmp	r2, r3
 800fcc8:	d212      	bcs.n	800fcf0 <lwip_netconn_do_writemore+0x124>
      /* don't try to write more than sendbuf */
      len = available;
 800fcca:	8afb      	ldrh	r3, [r7, #22]
 800fccc:	84bb      	strh	r3, [r7, #36]	; 0x24
      if (dontblock) {
 800fcce:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800fcd2:	2b00      	cmp	r3, #0
 800fcd4:	d006      	beq.n	800fce4 <lwip_netconn_do_writemore+0x118>
        if (!len) {
 800fcd6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800fcd8:	2b00      	cmp	r3, #0
 800fcda:	d109      	bne.n	800fcf0 <lwip_netconn_do_writemore+0x124>
          err = ERR_WOULDBLOCK;
 800fcdc:	23f9      	movs	r3, #249	; 0xf9
 800fcde:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          goto err_mem;
 800fce2:	e02a      	b.n	800fd3a <lwip_netconn_do_writemore+0x16e>
        }
      } else {
        apiflags |= TCP_WRITE_FLAG_MORE;
 800fce4:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800fce8:	f043 0302 	orr.w	r3, r3, #2
 800fcec:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
      }
    }
    LWIP_ASSERT("lwip_netconn_do_writemore: invalid length!", ((conn->write_offset + len) <= conn->current_msg->msg.w.len));
 800fcf0:	687b      	ldr	r3, [r7, #4]
 800fcf2:	6a1a      	ldr	r2, [r3, #32]
 800fcf4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800fcf6:	441a      	add	r2, r3
 800fcf8:	687b      	ldr	r3, [r7, #4]
 800fcfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fcfc:	68db      	ldr	r3, [r3, #12]
 800fcfe:	429a      	cmp	r2, r3
 800fd00:	d906      	bls.n	800fd10 <lwip_netconn_do_writemore+0x144>
 800fd02:	4b5c      	ldr	r3, [pc, #368]	; (800fe74 <lwip_netconn_do_writemore+0x2a8>)
 800fd04:	f240 6213 	movw	r2, #1555	; 0x613
 800fd08:	4961      	ldr	r1, [pc, #388]	; (800fe90 <lwip_netconn_do_writemore+0x2c4>)
 800fd0a:	485c      	ldr	r0, [pc, #368]	; (800fe7c <lwip_netconn_do_writemore+0x2b0>)
 800fd0c:	f00b f870 	bl	801adf0 <iprintf>
    err = tcp_write(conn->pcb.tcp, dataptr, len, apiflags);
 800fd10:	687b      	ldr	r3, [r7, #4]
 800fd12:	6858      	ldr	r0, [r3, #4]
 800fd14:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800fd18:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800fd1a:	69f9      	ldr	r1, [r7, #28]
 800fd1c:	f006 f8fa 	bl	8015f14 <tcp_write>
 800fd20:	4603      	mov	r3, r0
 800fd22:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    /* if OK or memory error, check available space */
    if ((err == ERR_OK) || (err == ERR_MEM)) {
 800fd26:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800fd2a:	2b00      	cmp	r3, #0
 800fd2c:	d004      	beq.n	800fd38 <lwip_netconn_do_writemore+0x16c>
 800fd2e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800fd32:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800fd36:	d133      	bne.n	800fda0 <lwip_netconn_do_writemore+0x1d4>
err_mem:
 800fd38:	bf00      	nop
      if (dontblock && (len < conn->current_msg->msg.w.len)) {
 800fd3a:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800fd3e:	2b00      	cmp	r3, #0
 800fd40:	d017      	beq.n	800fd72 <lwip_netconn_do_writemore+0x1a6>
 800fd42:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800fd44:	687b      	ldr	r3, [r7, #4]
 800fd46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fd48:	68db      	ldr	r3, [r3, #12]
 800fd4a:	429a      	cmp	r2, r3
 800fd4c:	d211      	bcs.n	800fd72 <lwip_netconn_do_writemore+0x1a6>
        /* non-blocking write did not write everything: mark the pcb non-writable
           and let poll_tcp check writable space to mark the pcb writable again */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, len);
 800fd4e:	687b      	ldr	r3, [r7, #4]
 800fd50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fd52:	2b00      	cmp	r3, #0
 800fd54:	d005      	beq.n	800fd62 <lwip_netconn_do_writemore+0x196>
 800fd56:	687b      	ldr	r3, [r7, #4]
 800fd58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fd5a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800fd5c:	2103      	movs	r1, #3
 800fd5e:	6878      	ldr	r0, [r7, #4]
 800fd60:	4798      	blx	r3
        conn->flags |= NETCONN_FLAG_CHECK_WRITESPACE;
 800fd62:	687b      	ldr	r3, [r7, #4]
 800fd64:	7f1b      	ldrb	r3, [r3, #28]
 800fd66:	f043 0310 	orr.w	r3, r3, #16
 800fd6a:	b2da      	uxtb	r2, r3
 800fd6c:	687b      	ldr	r3, [r7, #4]
 800fd6e:	771a      	strb	r2, [r3, #28]
 800fd70:	e016      	b.n	800fda0 <lwip_netconn_do_writemore+0x1d4>
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
 800fd72:	687b      	ldr	r3, [r7, #4]
 800fd74:	685b      	ldr	r3, [r3, #4]
 800fd76:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800fd7a:	f5b3 6f86 	cmp.w	r3, #1072	; 0x430
 800fd7e:	d305      	bcc.n	800fd8c <lwip_netconn_do_writemore+0x1c0>
                 (tcp_sndqueuelen(conn->pcb.tcp) >= TCP_SNDQUEUELOWAT)) {
 800fd80:	687b      	ldr	r3, [r7, #4]
 800fd82:	685b      	ldr	r3, [r3, #4]
 800fd84:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
 800fd88:	2b04      	cmp	r3, #4
 800fd8a:	d909      	bls.n	800fda0 <lwip_netconn_do_writemore+0x1d4>
        /* The queued byte- or pbuf-count exceeds the configured low-water limit,
           let select mark this pcb as non-writable. */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, len);
 800fd8c:	687b      	ldr	r3, [r7, #4]
 800fd8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fd90:	2b00      	cmp	r3, #0
 800fd92:	d005      	beq.n	800fda0 <lwip_netconn_do_writemore+0x1d4>
 800fd94:	687b      	ldr	r3, [r7, #4]
 800fd96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fd98:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800fd9a:	2103      	movs	r1, #3
 800fd9c:	6878      	ldr	r0, [r7, #4]
 800fd9e:	4798      	blx	r3
      }
    }

    if (err == ERR_OK) {
 800fda0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800fda4:	2b00      	cmp	r3, #0
 800fda6:	d134      	bne.n	800fe12 <lwip_netconn_do_writemore+0x246>
      err_t out_err;
      conn->write_offset += len;
 800fda8:	687b      	ldr	r3, [r7, #4]
 800fdaa:	6a1a      	ldr	r2, [r3, #32]
 800fdac:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800fdae:	441a      	add	r2, r3
 800fdb0:	687b      	ldr	r3, [r7, #4]
 800fdb2:	621a      	str	r2, [r3, #32]
      if ((conn->write_offset == conn->current_msg->msg.w.len) || dontblock) {
 800fdb4:	687b      	ldr	r3, [r7, #4]
 800fdb6:	6a1a      	ldr	r2, [r3, #32]
 800fdb8:	687b      	ldr	r3, [r7, #4]
 800fdba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fdbc:	68db      	ldr	r3, [r3, #12]
 800fdbe:	429a      	cmp	r2, r3
 800fdc0:	d003      	beq.n	800fdca <lwip_netconn_do_writemore+0x1fe>
 800fdc2:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800fdc6:	2b00      	cmp	r3, #0
 800fdc8:	d007      	beq.n	800fdda <lwip_netconn_do_writemore+0x20e>
        /* return sent length */
        conn->current_msg->msg.w.len = conn->write_offset;
 800fdca:	687b      	ldr	r3, [r7, #4]
 800fdcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fdce:	687a      	ldr	r2, [r7, #4]
 800fdd0:	6a12      	ldr	r2, [r2, #32]
 800fdd2:	60da      	str	r2, [r3, #12]
        /* everything was written */
        write_finished = 1;
 800fdd4:	2301      	movs	r3, #1
 800fdd6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
      }
      out_err = tcp_output(conn->pcb.tcp);
 800fdda:	687b      	ldr	r3, [r7, #4]
 800fddc:	685b      	ldr	r3, [r3, #4]
 800fdde:	4618      	mov	r0, r3
 800fde0:	f006 fd4a 	bl	8016878 <tcp_output>
 800fde4:	4603      	mov	r3, r0
 800fde6:	753b      	strb	r3, [r7, #20]
      if (ERR_IS_FATAL(out_err) || (out_err == ERR_RTE)) {
 800fde8:	f997 3014 	ldrsb.w	r3, [r7, #20]
 800fdec:	f113 0f0c 	cmn.w	r3, #12
 800fdf0:	db04      	blt.n	800fdfc <lwip_netconn_do_writemore+0x230>
 800fdf2:	f997 3014 	ldrsb.w	r3, [r7, #20]
 800fdf6:	f113 0f04 	cmn.w	r3, #4
 800fdfa:	d152      	bne.n	800fea2 <lwip_netconn_do_writemore+0x2d6>
        /* If tcp_output fails with fatal error or no route is found,
           don't try writing any more but return the error
           to the application thread. */
        err = out_err;
 800fdfc:	7d3b      	ldrb	r3, [r7, #20]
 800fdfe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        write_finished = 1;
 800fe02:	2301      	movs	r3, #1
 800fe04:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        conn->current_msg->msg.w.len = 0;
 800fe08:	687b      	ldr	r3, [r7, #4]
 800fe0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fe0c:	2200      	movs	r2, #0
 800fe0e:	60da      	str	r2, [r3, #12]
 800fe10:	e047      	b.n	800fea2 <lwip_netconn_do_writemore+0x2d6>
      }
    } else if (err == ERR_MEM) {
 800fe12:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800fe16:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800fe1a:	d13b      	bne.n	800fe94 <lwip_netconn_do_writemore+0x2c8>
         For blocking sockets, we do NOT return to the application
         thread, since ERR_MEM is only a temporary error! Non-blocking
         will remain non-writable until sent_tcp/poll_tcp is called */

      /* tcp_write returned ERR_MEM, try tcp_output anyway */
      err_t out_err = tcp_output(conn->pcb.tcp);
 800fe1c:	687b      	ldr	r3, [r7, #4]
 800fe1e:	685b      	ldr	r3, [r3, #4]
 800fe20:	4618      	mov	r0, r3
 800fe22:	f006 fd29 	bl	8016878 <tcp_output>
 800fe26:	4603      	mov	r3, r0
 800fe28:	757b      	strb	r3, [r7, #21]
      if (ERR_IS_FATAL(out_err) || (out_err == ERR_RTE)) {
 800fe2a:	f997 3015 	ldrsb.w	r3, [r7, #21]
 800fe2e:	f113 0f0c 	cmn.w	r3, #12
 800fe32:	db04      	blt.n	800fe3e <lwip_netconn_do_writemore+0x272>
 800fe34:	f997 3015 	ldrsb.w	r3, [r7, #21]
 800fe38:	f113 0f04 	cmn.w	r3, #4
 800fe3c:	d10a      	bne.n	800fe54 <lwip_netconn_do_writemore+0x288>
        /* If tcp_output fails with fatal error or no route is found,
           don't try writing any more but return the error
           to the application thread. */
        err = out_err;
 800fe3e:	7d7b      	ldrb	r3, [r7, #21]
 800fe40:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        write_finished = 1;
 800fe44:	2301      	movs	r3, #1
 800fe46:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        conn->current_msg->msg.w.len = 0;
 800fe4a:	687b      	ldr	r3, [r7, #4]
 800fe4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fe4e:	2200      	movs	r2, #0
 800fe50:	60da      	str	r2, [r3, #12]
 800fe52:	e026      	b.n	800fea2 <lwip_netconn_do_writemore+0x2d6>
      } else if (dontblock) {
 800fe54:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800fe58:	2b00      	cmp	r3, #0
 800fe5a:	d022      	beq.n	800fea2 <lwip_netconn_do_writemore+0x2d6>
        /* non-blocking write is done on ERR_MEM */
        err = ERR_WOULDBLOCK;
 800fe5c:	23f9      	movs	r3, #249	; 0xf9
 800fe5e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        write_finished = 1;
 800fe62:	2301      	movs	r3, #1
 800fe64:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        conn->current_msg->msg.w.len = 0;
 800fe68:	687b      	ldr	r3, [r7, #4]
 800fe6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fe6c:	2200      	movs	r2, #0
 800fe6e:	60da      	str	r2, [r3, #12]
 800fe70:	e017      	b.n	800fea2 <lwip_netconn_do_writemore+0x2d6>
 800fe72:	bf00      	nop
 800fe74:	0801c2d0 	.word	0x0801c2d0
 800fe78:	0801c3f4 	.word	0x0801c3f4
 800fe7c:	0801c328 	.word	0x0801c328
 800fe80:	0801c6d4 	.word	0x0801c6d4
 800fe84:	0801c404 	.word	0x0801c404
 800fe88:	0801c6f4 	.word	0x0801c6f4
 800fe8c:	0801c70c 	.word	0x0801c70c
 800fe90:	0801c740 	.word	0x0801c740
      }
    } else {
      /* On errors != ERR_MEM, we don't try writing any more but return
         the error to the application thread. */
      write_finished = 1;
 800fe94:	2301      	movs	r3, #1
 800fe96:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
      conn->current_msg->msg.w.len = 0;
 800fe9a:	687b      	ldr	r3, [r7, #4]
 800fe9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fe9e:	2200      	movs	r2, #0
 800fea0:	60da      	str	r2, [r3, #12]
    }
  }
  if (write_finished) {
 800fea2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800fea6:	2b00      	cmp	r3, #0
 800fea8:	d02c      	beq.n	800ff04 <lwip_netconn_do_writemore+0x338>
    /* everything was written: set back connection state
       and back to application task */
    sys_sem_t* op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 800feaa:	687b      	ldr	r3, [r7, #4]
 800feac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800feae:	681b      	ldr	r3, [r3, #0]
 800feb0:	330c      	adds	r3, #12
 800feb2:	613b      	str	r3, [r7, #16]
    conn->current_msg->err = err;
 800feb4:	687b      	ldr	r3, [r7, #4]
 800feb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800feb8:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800febc:	711a      	strb	r2, [r3, #4]
    conn->current_msg = NULL;
 800febe:	687b      	ldr	r3, [r7, #4]
 800fec0:	2200      	movs	r2, #0
 800fec2:	625a      	str	r2, [r3, #36]	; 0x24
    conn->write_offset = 0;
 800fec4:	687b      	ldr	r3, [r7, #4]
 800fec6:	2200      	movs	r2, #0
 800fec8:	621a      	str	r2, [r3, #32]
    conn->state = NETCONN_NONE;
 800feca:	687b      	ldr	r3, [r7, #4]
 800fecc:	2200      	movs	r2, #0
 800fece:	705a      	strb	r2, [r3, #1]
    NETCONN_SET_SAFE_ERR(conn, err);
 800fed0:	687b      	ldr	r3, [r7, #4]
 800fed2:	2b00      	cmp	r3, #0
 800fed4:	d00f      	beq.n	800fef6 <lwip_netconn_do_writemore+0x32a>
 800fed6:	f00a f995 	bl	801a204 <sys_arch_protect>
 800feda:	60f8      	str	r0, [r7, #12]
 800fedc:	687b      	ldr	r3, [r7, #4]
 800fede:	f993 3008 	ldrsb.w	r3, [r3, #8]
 800fee2:	f113 0f0c 	cmn.w	r3, #12
 800fee6:	db03      	blt.n	800fef0 <lwip_netconn_do_writemore+0x324>
 800fee8:	687b      	ldr	r3, [r7, #4]
 800feea:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800feee:	721a      	strb	r2, [r3, #8]
 800fef0:	68f8      	ldr	r0, [r7, #12]
 800fef2:	f00a f995 	bl	801a220 <sys_arch_unprotect>
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
 800fef6:	78fb      	ldrb	r3, [r7, #3]
 800fef8:	2b00      	cmp	r3, #0
 800fefa:	d006      	beq.n	800ff0a <lwip_netconn_do_writemore+0x33e>
#endif
    {
      sys_sem_signal(op_completed_sem);
 800fefc:	6938      	ldr	r0, [r7, #16]
 800fefe:	f00a f8dc 	bl	801a0ba <sys_sem_signal>
 800ff02:	e002      	b.n	800ff0a <lwip_netconn_do_writemore+0x33e>
    }
  }
#if LWIP_TCPIP_CORE_LOCKING
  else {
    return ERR_MEM;
 800ff04:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ff08:	e000      	b.n	800ff0c <lwip_netconn_do_writemore+0x340>
  }
#endif
  return ERR_OK;
 800ff0a:	2300      	movs	r3, #0
}
 800ff0c:	4618      	mov	r0, r3
 800ff0e:	3728      	adds	r7, #40	; 0x28
 800ff10:	46bd      	mov	sp, r7
 800ff12:	bd80      	pop	{r7, pc}

0800ff14 <lwip_netconn_do_write>:
 *
 * @param m the api_msg_msg pointing to the connection
 */
void
lwip_netconn_do_write(void *m)
{
 800ff14:	b580      	push	{r7, lr}
 800ff16:	b084      	sub	sp, #16
 800ff18:	af00      	add	r7, sp, #0
 800ff1a:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg*)m;
 800ff1c:	687b      	ldr	r3, [r7, #4]
 800ff1e:	60fb      	str	r3, [r7, #12]

  if (ERR_IS_FATAL(msg->conn->last_err)) {
 800ff20:	68fb      	ldr	r3, [r7, #12]
 800ff22:	681b      	ldr	r3, [r3, #0]
 800ff24:	f993 3008 	ldrsb.w	r3, [r3, #8]
 800ff28:	f113 0f0c 	cmn.w	r3, #12
 800ff2c:	da06      	bge.n	800ff3c <lwip_netconn_do_write+0x28>
    msg->err = msg->conn->last_err;
 800ff2e:	68fb      	ldr	r3, [r7, #12]
 800ff30:	681b      	ldr	r3, [r3, #0]
 800ff32:	f993 2008 	ldrsb.w	r2, [r3, #8]
 800ff36:	68fb      	ldr	r3, [r7, #12]
 800ff38:	711a      	strb	r2, [r3, #4]
 800ff3a:	e072      	b.n	8010022 <lwip_netconn_do_write+0x10e>
  } else {
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 800ff3c:	68fb      	ldr	r3, [r7, #12]
 800ff3e:	681b      	ldr	r3, [r3, #0]
 800ff40:	781b      	ldrb	r3, [r3, #0]
 800ff42:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800ff46:	2b10      	cmp	r3, #16
 800ff48:	d168      	bne.n	801001c <lwip_netconn_do_write+0x108>
#if LWIP_TCP
      if (msg->conn->state != NETCONN_NONE) {
 800ff4a:	68fb      	ldr	r3, [r7, #12]
 800ff4c:	681b      	ldr	r3, [r3, #0]
 800ff4e:	785b      	ldrb	r3, [r3, #1]
 800ff50:	2b00      	cmp	r3, #0
 800ff52:	d003      	beq.n	800ff5c <lwip_netconn_do_write+0x48>
        /* netconn is connecting, closing or in blocking write */
        msg->err = ERR_INPROGRESS;
 800ff54:	68fb      	ldr	r3, [r7, #12]
 800ff56:	22fb      	movs	r2, #251	; 0xfb
 800ff58:	711a      	strb	r2, [r3, #4]
 800ff5a:	e062      	b.n	8010022 <lwip_netconn_do_write+0x10e>
      } else if (msg->conn->pcb.tcp != NULL) {
 800ff5c:	68fb      	ldr	r3, [r7, #12]
 800ff5e:	681b      	ldr	r3, [r3, #0]
 800ff60:	685b      	ldr	r3, [r3, #4]
 800ff62:	2b00      	cmp	r3, #0
 800ff64:	d056      	beq.n	8010014 <lwip_netconn_do_write+0x100>
        msg->conn->state = NETCONN_WRITE;
 800ff66:	68fb      	ldr	r3, [r7, #12]
 800ff68:	681b      	ldr	r3, [r3, #0]
 800ff6a:	2201      	movs	r2, #1
 800ff6c:	705a      	strb	r2, [r3, #1]
        /* set all the variables used by lwip_netconn_do_writemore */
        LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL &&
 800ff6e:	68fb      	ldr	r3, [r7, #12]
 800ff70:	681b      	ldr	r3, [r3, #0]
 800ff72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ff74:	2b00      	cmp	r3, #0
 800ff76:	d104      	bne.n	800ff82 <lwip_netconn_do_write+0x6e>
 800ff78:	68fb      	ldr	r3, [r7, #12]
 800ff7a:	681b      	ldr	r3, [r3, #0]
 800ff7c:	6a1b      	ldr	r3, [r3, #32]
 800ff7e:	2b00      	cmp	r3, #0
 800ff80:	d006      	beq.n	800ff90 <lwip_netconn_do_write+0x7c>
 800ff82:	4b36      	ldr	r3, [pc, #216]	; (801005c <lwip_netconn_do_write+0x148>)
 800ff84:	f240 6283 	movw	r2, #1667	; 0x683
 800ff88:	4935      	ldr	r1, [pc, #212]	; (8010060 <lwip_netconn_do_write+0x14c>)
 800ff8a:	4836      	ldr	r0, [pc, #216]	; (8010064 <lwip_netconn_do_write+0x150>)
 800ff8c:	f00a ff30 	bl	801adf0 <iprintf>
          msg->conn->write_offset == 0);
        LWIP_ASSERT("msg->msg.w.len != 0", msg->msg.w.len != 0);
 800ff90:	68fb      	ldr	r3, [r7, #12]
 800ff92:	68db      	ldr	r3, [r3, #12]
 800ff94:	2b00      	cmp	r3, #0
 800ff96:	d106      	bne.n	800ffa6 <lwip_netconn_do_write+0x92>
 800ff98:	4b30      	ldr	r3, [pc, #192]	; (801005c <lwip_netconn_do_write+0x148>)
 800ff9a:	f240 6284 	movw	r2, #1668	; 0x684
 800ff9e:	4932      	ldr	r1, [pc, #200]	; (8010068 <lwip_netconn_do_write+0x154>)
 800ffa0:	4830      	ldr	r0, [pc, #192]	; (8010064 <lwip_netconn_do_write+0x150>)
 800ffa2:	f00a ff25 	bl	801adf0 <iprintf>
        msg->conn->current_msg = msg;
 800ffa6:	68fb      	ldr	r3, [r7, #12]
 800ffa8:	681b      	ldr	r3, [r3, #0]
 800ffaa:	68fa      	ldr	r2, [r7, #12]
 800ffac:	625a      	str	r2, [r3, #36]	; 0x24
        msg->conn->write_offset = 0;
 800ffae:	68fb      	ldr	r3, [r7, #12]
 800ffb0:	681b      	ldr	r3, [r3, #0]
 800ffb2:	2200      	movs	r2, #0
 800ffb4:	621a      	str	r2, [r3, #32]
#if LWIP_TCPIP_CORE_LOCKING
        if (lwip_netconn_do_writemore(msg->conn, 0) != ERR_OK) {
 800ffb6:	68fb      	ldr	r3, [r7, #12]
 800ffb8:	681b      	ldr	r3, [r3, #0]
 800ffba:	2100      	movs	r1, #0
 800ffbc:	4618      	mov	r0, r3
 800ffbe:	f7ff fe05 	bl	800fbcc <lwip_netconn_do_writemore>
 800ffc2:	4603      	mov	r3, r0
 800ffc4:	2b00      	cmp	r3, #0
 800ffc6:	d044      	beq.n	8010052 <lwip_netconn_do_write+0x13e>
          LWIP_ASSERT("state!", msg->conn->state == NETCONN_WRITE);
 800ffc8:	68fb      	ldr	r3, [r7, #12]
 800ffca:	681b      	ldr	r3, [r3, #0]
 800ffcc:	785b      	ldrb	r3, [r3, #1]
 800ffce:	2b01      	cmp	r3, #1
 800ffd0:	d006      	beq.n	800ffe0 <lwip_netconn_do_write+0xcc>
 800ffd2:	4b22      	ldr	r3, [pc, #136]	; (801005c <lwip_netconn_do_write+0x148>)
 800ffd4:	f240 6289 	movw	r2, #1673	; 0x689
 800ffd8:	4924      	ldr	r1, [pc, #144]	; (801006c <lwip_netconn_do_write+0x158>)
 800ffda:	4822      	ldr	r0, [pc, #136]	; (8010064 <lwip_netconn_do_write+0x150>)
 800ffdc:	f00a ff08 	bl	801adf0 <iprintf>
          UNLOCK_TCPIP_CORE();
 800ffe0:	4823      	ldr	r0, [pc, #140]	; (8010070 <lwip_netconn_do_write+0x15c>)
 800ffe2:	f00a f8dc 	bl	801a19e <sys_mutex_unlock>
          sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 800ffe6:	68fb      	ldr	r3, [r7, #12]
 800ffe8:	681b      	ldr	r3, [r3, #0]
 800ffea:	330c      	adds	r3, #12
 800ffec:	2100      	movs	r1, #0
 800ffee:	4618      	mov	r0, r3
 800fff0:	f00a f832 	bl	801a058 <sys_arch_sem_wait>
          LOCK_TCPIP_CORE();
 800fff4:	481e      	ldr	r0, [pc, #120]	; (8010070 <lwip_netconn_do_write+0x15c>)
 800fff6:	f00a f8c3 	bl	801a180 <sys_mutex_lock>
          LWIP_ASSERT("state!", msg->conn->state != NETCONN_WRITE);
 800fffa:	68fb      	ldr	r3, [r7, #12]
 800fffc:	681b      	ldr	r3, [r3, #0]
 800fffe:	785b      	ldrb	r3, [r3, #1]
 8010000:	2b01      	cmp	r3, #1
 8010002:	d126      	bne.n	8010052 <lwip_netconn_do_write+0x13e>
 8010004:	4b15      	ldr	r3, [pc, #84]	; (801005c <lwip_netconn_do_write+0x148>)
 8010006:	f240 628d 	movw	r2, #1677	; 0x68d
 801000a:	4918      	ldr	r1, [pc, #96]	; (801006c <lwip_netconn_do_write+0x158>)
 801000c:	4815      	ldr	r0, [pc, #84]	; (8010064 <lwip_netconn_do_write+0x150>)
 801000e:	f00a feef 	bl	801adf0 <iprintf>
#else /* LWIP_TCPIP_CORE_LOCKING */
        lwip_netconn_do_writemore(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
        /* for both cases: if lwip_netconn_do_writemore was called, don't ACK the APIMSG
           since lwip_netconn_do_writemore ACKs it! */
        return;
 8010012:	e01e      	b.n	8010052 <lwip_netconn_do_write+0x13e>
      } else {
        msg->err = ERR_CONN;
 8010014:	68fb      	ldr	r3, [r7, #12]
 8010016:	22f5      	movs	r2, #245	; 0xf5
 8010018:	711a      	strb	r2, [r3, #4]
 801001a:	e002      	b.n	8010022 <lwip_netconn_do_write+0x10e>
#else /* LWIP_TCP */
      msg->err = ERR_VAL;
#endif /* LWIP_TCP */
#if (LWIP_UDP || LWIP_RAW)
    } else {
      msg->err = ERR_VAL;
 801001c:	68fb      	ldr	r3, [r7, #12]
 801001e:	22fa      	movs	r2, #250	; 0xfa
 8010020:	711a      	strb	r2, [r3, #4]
#endif /* (LWIP_UDP || LWIP_RAW) */
    }
  }
  TCPIP_APIMSG_ACK(msg);
 8010022:	68fb      	ldr	r3, [r7, #12]
 8010024:	681b      	ldr	r3, [r3, #0]
 8010026:	2b00      	cmp	r3, #0
 8010028:	d014      	beq.n	8010054 <lwip_netconn_do_write+0x140>
 801002a:	f00a f8eb 	bl	801a204 <sys_arch_protect>
 801002e:	60b8      	str	r0, [r7, #8]
 8010030:	68fb      	ldr	r3, [r7, #12]
 8010032:	681b      	ldr	r3, [r3, #0]
 8010034:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8010038:	f113 0f0c 	cmn.w	r3, #12
 801003c:	db05      	blt.n	801004a <lwip_netconn_do_write+0x136>
 801003e:	68fb      	ldr	r3, [r7, #12]
 8010040:	681b      	ldr	r3, [r3, #0]
 8010042:	68fa      	ldr	r2, [r7, #12]
 8010044:	f992 2004 	ldrsb.w	r2, [r2, #4]
 8010048:	721a      	strb	r2, [r3, #8]
 801004a:	68b8      	ldr	r0, [r7, #8]
 801004c:	f00a f8e8 	bl	801a220 <sys_arch_unprotect>
 8010050:	e000      	b.n	8010054 <lwip_netconn_do_write+0x140>
        return;
 8010052:	bf00      	nop
}
 8010054:	3710      	adds	r7, #16
 8010056:	46bd      	mov	sp, r7
 8010058:	bd80      	pop	{r7, pc}
 801005a:	bf00      	nop
 801005c:	0801c2d0 	.word	0x0801c2d0
 8010060:	0801c618 	.word	0x0801c618
 8010064:	0801c328 	.word	0x0801c328
 8010068:	0801c76c 	.word	0x0801c76c
 801006c:	0801c634 	.word	0x0801c634
 8010070:	20007634 	.word	0x20007634

08010074 <lwip_netconn_do_close>:
 *
 * @param m the api_msg_msg pointing to the connection
 */
void
lwip_netconn_do_close(void *m)
{
 8010074:	b580      	push	{r7, lr}
 8010076:	b086      	sub	sp, #24
 8010078:	af00      	add	r7, sp, #0
 801007a:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg*)m;
 801007c:	687b      	ldr	r3, [r7, #4]
 801007e:	617b      	str	r3, [r7, #20]

#if LWIP_TCP
  enum netconn_state state = msg->conn->state;
 8010080:	697b      	ldr	r3, [r7, #20]
 8010082:	681b      	ldr	r3, [r3, #0]
 8010084:	785b      	ldrb	r3, [r3, #1]
 8010086:	74fb      	strb	r3, [r7, #19]
  /* First check if this is a TCP netconn and if it is in a correct state
      (LISTEN doesn't support half shutdown) */
  if ((msg->conn->pcb.tcp != NULL) &&
 8010088:	697b      	ldr	r3, [r7, #20]
 801008a:	681b      	ldr	r3, [r3, #0]
 801008c:	685b      	ldr	r3, [r3, #4]
 801008e:	2b00      	cmp	r3, #0
 8010090:	d06e      	beq.n	8010170 <lwip_netconn_do_close+0xfc>
      (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) &&
 8010092:	697b      	ldr	r3, [r7, #20]
 8010094:	681b      	ldr	r3, [r3, #0]
 8010096:	781b      	ldrb	r3, [r3, #0]
 8010098:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if ((msg->conn->pcb.tcp != NULL) &&
 801009c:	2b10      	cmp	r3, #16
 801009e:	d167      	bne.n	8010170 <lwip_netconn_do_close+0xfc>
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
 80100a0:	697b      	ldr	r3, [r7, #20]
 80100a2:	7a1b      	ldrb	r3, [r3, #8]
      (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) &&
 80100a4:	2b03      	cmp	r3, #3
 80100a6:	d002      	beq.n	80100ae <lwip_netconn_do_close+0x3a>
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
 80100a8:	7cfb      	ldrb	r3, [r7, #19]
 80100aa:	2b02      	cmp	r3, #2
 80100ac:	d060      	beq.n	8010170 <lwip_netconn_do_close+0xfc>
    /* Check if we are in a connected state */
    if (state == NETCONN_CONNECT) {
 80100ae:	7cfb      	ldrb	r3, [r7, #19]
 80100b0:	2b03      	cmp	r3, #3
 80100b2:	d103      	bne.n	80100bc <lwip_netconn_do_close+0x48>
      /* TCP connect in progress: cannot shutdown */
      msg->err = ERR_CONN;
 80100b4:	697b      	ldr	r3, [r7, #20]
 80100b6:	22f5      	movs	r2, #245	; 0xf5
 80100b8:	711a      	strb	r2, [r3, #4]
    if (state == NETCONN_CONNECT) {
 80100ba:	e05c      	b.n	8010176 <lwip_netconn_do_close+0x102>
    } else if (state == NETCONN_WRITE) {
 80100bc:	7cfb      	ldrb	r3, [r7, #19]
 80100be:	2b01      	cmp	r3, #1
 80100c0:	d103      	bne.n	80100ca <lwip_netconn_do_close+0x56>
        msg->err = tcp_shutdown(msg->conn->pcb.tcp, 1, 0);
      }
    }
    if (state == NETCONN_NONE) {
#else /* LWIP_NETCONN_FULLDUPLEX */
      msg->err = ERR_INPROGRESS;
 80100c2:	697b      	ldr	r3, [r7, #20]
 80100c4:	22fb      	movs	r2, #251	; 0xfb
 80100c6:	711a      	strb	r2, [r3, #4]
    if (state == NETCONN_CONNECT) {
 80100c8:	e055      	b.n	8010176 <lwip_netconn_do_close+0x102>
    } else {
#endif /* LWIP_NETCONN_FULLDUPLEX */
      if (msg->msg.sd.shut & NETCONN_SHUT_RD) {
 80100ca:	697b      	ldr	r3, [r7, #20]
 80100cc:	7a1b      	ldrb	r3, [r3, #8]
 80100ce:	f003 0301 	and.w	r3, r3, #1
 80100d2:	2b00      	cmp	r3, #0
 80100d4:	d004      	beq.n	80100e0 <lwip_netconn_do_close+0x6c>
        /* Drain and delete mboxes */
        netconn_drain(msg->conn);
 80100d6:	697b      	ldr	r3, [r7, #20]
 80100d8:	681b      	ldr	r3, [r3, #0]
 80100da:	4618      	mov	r0, r3
 80100dc:	f7ff f90e 	bl	800f2fc <netconn_drain>
      }
      LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL &&
 80100e0:	697b      	ldr	r3, [r7, #20]
 80100e2:	681b      	ldr	r3, [r3, #0]
 80100e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80100e6:	2b00      	cmp	r3, #0
 80100e8:	d104      	bne.n	80100f4 <lwip_netconn_do_close+0x80>
 80100ea:	697b      	ldr	r3, [r7, #20]
 80100ec:	681b      	ldr	r3, [r3, #0]
 80100ee:	6a1b      	ldr	r3, [r3, #32]
 80100f0:	2b00      	cmp	r3, #0
 80100f2:	d006      	beq.n	8010102 <lwip_netconn_do_close+0x8e>
 80100f4:	4b2e      	ldr	r3, [pc, #184]	; (80101b0 <lwip_netconn_do_close+0x13c>)
 80100f6:	f240 721c 	movw	r2, #1820	; 0x71c
 80100fa:	492e      	ldr	r1, [pc, #184]	; (80101b4 <lwip_netconn_do_close+0x140>)
 80100fc:	482e      	ldr	r0, [pc, #184]	; (80101b8 <lwip_netconn_do_close+0x144>)
 80100fe:	f00a fe77 	bl	801adf0 <iprintf>
        msg->conn->write_offset == 0);
      msg->conn->state = NETCONN_CLOSE;
 8010102:	697b      	ldr	r3, [r7, #20]
 8010104:	681b      	ldr	r3, [r3, #0]
 8010106:	2204      	movs	r2, #4
 8010108:	705a      	strb	r2, [r3, #1]
      msg->conn->current_msg = msg;
 801010a:	697b      	ldr	r3, [r7, #20]
 801010c:	681b      	ldr	r3, [r3, #0]
 801010e:	697a      	ldr	r2, [r7, #20]
 8010110:	625a      	str	r2, [r3, #36]	; 0x24
#if LWIP_TCPIP_CORE_LOCKING
      if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 8010112:	697b      	ldr	r3, [r7, #20]
 8010114:	681b      	ldr	r3, [r3, #0]
 8010116:	2100      	movs	r1, #0
 8010118:	4618      	mov	r0, r3
 801011a:	f7ff f96f 	bl	800f3fc <lwip_netconn_do_close_internal>
 801011e:	4603      	mov	r3, r0
 8010120:	2b00      	cmp	r3, #0
 8010122:	d040      	beq.n	80101a6 <lwip_netconn_do_close+0x132>
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 8010124:	697b      	ldr	r3, [r7, #20]
 8010126:	681b      	ldr	r3, [r3, #0]
 8010128:	785b      	ldrb	r3, [r3, #1]
 801012a:	2b04      	cmp	r3, #4
 801012c:	d006      	beq.n	801013c <lwip_netconn_do_close+0xc8>
 801012e:	4b20      	ldr	r3, [pc, #128]	; (80101b0 <lwip_netconn_do_close+0x13c>)
 8010130:	f240 7221 	movw	r2, #1825	; 0x721
 8010134:	4921      	ldr	r1, [pc, #132]	; (80101bc <lwip_netconn_do_close+0x148>)
 8010136:	4820      	ldr	r0, [pc, #128]	; (80101b8 <lwip_netconn_do_close+0x144>)
 8010138:	f00a fe5a 	bl	801adf0 <iprintf>
        UNLOCK_TCPIP_CORE();
 801013c:	4820      	ldr	r0, [pc, #128]	; (80101c0 <lwip_netconn_do_close+0x14c>)
 801013e:	f00a f82e 	bl	801a19e <sys_mutex_unlock>
        sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 8010142:	697b      	ldr	r3, [r7, #20]
 8010144:	681b      	ldr	r3, [r3, #0]
 8010146:	330c      	adds	r3, #12
 8010148:	2100      	movs	r1, #0
 801014a:	4618      	mov	r0, r3
 801014c:	f009 ff84 	bl	801a058 <sys_arch_sem_wait>
        LOCK_TCPIP_CORE();
 8010150:	481b      	ldr	r0, [pc, #108]	; (80101c0 <lwip_netconn_do_close+0x14c>)
 8010152:	f00a f815 	bl	801a180 <sys_mutex_lock>
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 8010156:	697b      	ldr	r3, [r7, #20]
 8010158:	681b      	ldr	r3, [r3, #0]
 801015a:	785b      	ldrb	r3, [r3, #1]
 801015c:	2b00      	cmp	r3, #0
 801015e:	d022      	beq.n	80101a6 <lwip_netconn_do_close+0x132>
 8010160:	4b13      	ldr	r3, [pc, #76]	; (80101b0 <lwip_netconn_do_close+0x13c>)
 8010162:	f240 7225 	movw	r2, #1829	; 0x725
 8010166:	4915      	ldr	r1, [pc, #84]	; (80101bc <lwip_netconn_do_close+0x148>)
 8010168:	4813      	ldr	r0, [pc, #76]	; (80101b8 <lwip_netconn_do_close+0x144>)
 801016a:	f00a fe41 	bl	801adf0 <iprintf>
      }
#else /* LWIP_TCPIP_CORE_LOCKING */
      lwip_netconn_do_close_internal(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
      /* for tcp netconns, lwip_netconn_do_close_internal ACKs the message */
      return;
 801016e:	e01a      	b.n	80101a6 <lwip_netconn_do_close+0x132>
    }
  } else
#endif /* LWIP_TCP */
  {
    msg->err = ERR_CONN;
 8010170:	697b      	ldr	r3, [r7, #20]
 8010172:	22f5      	movs	r2, #245	; 0xf5
 8010174:	711a      	strb	r2, [r3, #4]
  }
  TCPIP_APIMSG_ACK(msg);
 8010176:	697b      	ldr	r3, [r7, #20]
 8010178:	681b      	ldr	r3, [r3, #0]
 801017a:	2b00      	cmp	r3, #0
 801017c:	d014      	beq.n	80101a8 <lwip_netconn_do_close+0x134>
 801017e:	f00a f841 	bl	801a204 <sys_arch_protect>
 8010182:	60f8      	str	r0, [r7, #12]
 8010184:	697b      	ldr	r3, [r7, #20]
 8010186:	681b      	ldr	r3, [r3, #0]
 8010188:	f993 3008 	ldrsb.w	r3, [r3, #8]
 801018c:	f113 0f0c 	cmn.w	r3, #12
 8010190:	db05      	blt.n	801019e <lwip_netconn_do_close+0x12a>
 8010192:	697b      	ldr	r3, [r7, #20]
 8010194:	681b      	ldr	r3, [r3, #0]
 8010196:	697a      	ldr	r2, [r7, #20]
 8010198:	f992 2004 	ldrsb.w	r2, [r2, #4]
 801019c:	721a      	strb	r2, [r3, #8]
 801019e:	68f8      	ldr	r0, [r7, #12]
 80101a0:	f00a f83e 	bl	801a220 <sys_arch_unprotect>
 80101a4:	e000      	b.n	80101a8 <lwip_netconn_do_close+0x134>
      return;
 80101a6:	bf00      	nop
}
 80101a8:	3718      	adds	r7, #24
 80101aa:	46bd      	mov	sp, r7
 80101ac:	bd80      	pop	{r7, pc}
 80101ae:	bf00      	nop
 80101b0:	0801c2d0 	.word	0x0801c2d0
 80101b4:	0801c618 	.word	0x0801c618
 80101b8:	0801c328 	.word	0x0801c328
 80101bc:	0801c634 	.word	0x0801c634
 80101c0:	20007634 	.word	0x20007634

080101c4 <netbuf_delete>:
 *
 * @param buf pointer to a netbuf allocated by netbuf_new()
 */
void
netbuf_delete(struct netbuf *buf)
{
 80101c4:	b580      	push	{r7, lr}
 80101c6:	b082      	sub	sp, #8
 80101c8:	af00      	add	r7, sp, #0
 80101ca:	6078      	str	r0, [r7, #4]
  if (buf != NULL) {
 80101cc:	687b      	ldr	r3, [r7, #4]
 80101ce:	2b00      	cmp	r3, #0
 80101d0:	d013      	beq.n	80101fa <netbuf_delete+0x36>
    if (buf->p != NULL) {
 80101d2:	687b      	ldr	r3, [r7, #4]
 80101d4:	681b      	ldr	r3, [r3, #0]
 80101d6:	2b00      	cmp	r3, #0
 80101d8:	d00b      	beq.n	80101f2 <netbuf_delete+0x2e>
      pbuf_free(buf->p);
 80101da:	687b      	ldr	r3, [r7, #4]
 80101dc:	681b      	ldr	r3, [r3, #0]
 80101de:	4618      	mov	r0, r3
 80101e0:	f001 fb9a 	bl	8011918 <pbuf_free>
      buf->p = buf->ptr = NULL;
 80101e4:	687b      	ldr	r3, [r7, #4]
 80101e6:	2200      	movs	r2, #0
 80101e8:	605a      	str	r2, [r3, #4]
 80101ea:	687b      	ldr	r3, [r7, #4]
 80101ec:	685a      	ldr	r2, [r3, #4]
 80101ee:	687b      	ldr	r3, [r7, #4]
 80101f0:	601a      	str	r2, [r3, #0]
    }
    memp_free(MEMP_NETBUF, buf);
 80101f2:	6879      	ldr	r1, [r7, #4]
 80101f4:	2006      	movs	r0, #6
 80101f6:	f000 fe35 	bl	8010e64 <memp_free>
  }
}
 80101fa:	bf00      	nop
 80101fc:	3708      	adds	r7, #8
 80101fe:	46bd      	mov	sp, r7
 8010200:	bd80      	pop	{r7, pc}
	...

08010204 <netbuf_data>:
 * @return ERR_OK if the information was retrieved,
 *         ERR_BUF on error.
 */
err_t
netbuf_data(struct netbuf *buf, void **dataptr, u16_t *len)
{
 8010204:	b580      	push	{r7, lr}
 8010206:	b084      	sub	sp, #16
 8010208:	af00      	add	r7, sp, #0
 801020a:	60f8      	str	r0, [r7, #12]
 801020c:	60b9      	str	r1, [r7, #8]
 801020e:	607a      	str	r2, [r7, #4]
  LWIP_ERROR("netbuf_data: invalid buf", (buf != NULL), return ERR_ARG;);
 8010210:	68fb      	ldr	r3, [r7, #12]
 8010212:	2b00      	cmp	r3, #0
 8010214:	d108      	bne.n	8010228 <netbuf_data+0x24>
 8010216:	4b1b      	ldr	r3, [pc, #108]	; (8010284 <netbuf_data+0x80>)
 8010218:	22c2      	movs	r2, #194	; 0xc2
 801021a:	491b      	ldr	r1, [pc, #108]	; (8010288 <netbuf_data+0x84>)
 801021c:	481b      	ldr	r0, [pc, #108]	; (801028c <netbuf_data+0x88>)
 801021e:	f00a fde7 	bl	801adf0 <iprintf>
 8010222:	f06f 030f 	mvn.w	r3, #15
 8010226:	e029      	b.n	801027c <netbuf_data+0x78>
  LWIP_ERROR("netbuf_data: invalid dataptr", (dataptr != NULL), return ERR_ARG;);
 8010228:	68bb      	ldr	r3, [r7, #8]
 801022a:	2b00      	cmp	r3, #0
 801022c:	d108      	bne.n	8010240 <netbuf_data+0x3c>
 801022e:	4b15      	ldr	r3, [pc, #84]	; (8010284 <netbuf_data+0x80>)
 8010230:	22c3      	movs	r2, #195	; 0xc3
 8010232:	4917      	ldr	r1, [pc, #92]	; (8010290 <netbuf_data+0x8c>)
 8010234:	4815      	ldr	r0, [pc, #84]	; (801028c <netbuf_data+0x88>)
 8010236:	f00a fddb 	bl	801adf0 <iprintf>
 801023a:	f06f 030f 	mvn.w	r3, #15
 801023e:	e01d      	b.n	801027c <netbuf_data+0x78>
  LWIP_ERROR("netbuf_data: invalid len", (len != NULL), return ERR_ARG;);
 8010240:	687b      	ldr	r3, [r7, #4]
 8010242:	2b00      	cmp	r3, #0
 8010244:	d108      	bne.n	8010258 <netbuf_data+0x54>
 8010246:	4b0f      	ldr	r3, [pc, #60]	; (8010284 <netbuf_data+0x80>)
 8010248:	22c4      	movs	r2, #196	; 0xc4
 801024a:	4912      	ldr	r1, [pc, #72]	; (8010294 <netbuf_data+0x90>)
 801024c:	480f      	ldr	r0, [pc, #60]	; (801028c <netbuf_data+0x88>)
 801024e:	f00a fdcf 	bl	801adf0 <iprintf>
 8010252:	f06f 030f 	mvn.w	r3, #15
 8010256:	e011      	b.n	801027c <netbuf_data+0x78>

  if (buf->ptr == NULL) {
 8010258:	68fb      	ldr	r3, [r7, #12]
 801025a:	685b      	ldr	r3, [r3, #4]
 801025c:	2b00      	cmp	r3, #0
 801025e:	d102      	bne.n	8010266 <netbuf_data+0x62>
    return ERR_BUF;
 8010260:	f06f 0301 	mvn.w	r3, #1
 8010264:	e00a      	b.n	801027c <netbuf_data+0x78>
  }
  *dataptr = buf->ptr->payload;
 8010266:	68fb      	ldr	r3, [r7, #12]
 8010268:	685b      	ldr	r3, [r3, #4]
 801026a:	685a      	ldr	r2, [r3, #4]
 801026c:	68bb      	ldr	r3, [r7, #8]
 801026e:	601a      	str	r2, [r3, #0]
  *len = buf->ptr->len;
 8010270:	68fb      	ldr	r3, [r7, #12]
 8010272:	685b      	ldr	r3, [r3, #4]
 8010274:	895a      	ldrh	r2, [r3, #10]
 8010276:	687b      	ldr	r3, [r7, #4]
 8010278:	801a      	strh	r2, [r3, #0]
  return ERR_OK;
 801027a:	2300      	movs	r3, #0
}
 801027c:	4618      	mov	r0, r3
 801027e:	3710      	adds	r7, #16
 8010280:	46bd      	mov	sp, r7
 8010282:	bd80      	pop	{r7, pc}
 8010284:	0801c798 	.word	0x0801c798
 8010288:	0801c8a0 	.word	0x0801c8a0
 801028c:	0801c7e8 	.word	0x0801c7e8
 8010290:	0801c8bc 	.word	0x0801c8bc
 8010294:	0801c8dc 	.word	0x0801c8dc

08010298 <netbuf_next>:
 *         1  if moved to the next part but now there is no next part
 *         0  if moved to the next part and there are still more parts
 */
s8_t
netbuf_next(struct netbuf *buf)
{
 8010298:	b580      	push	{r7, lr}
 801029a:	b082      	sub	sp, #8
 801029c:	af00      	add	r7, sp, #0
 801029e:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("netbuf_next: invalid buf", (buf != NULL), return -1;);
 80102a0:	687b      	ldr	r3, [r7, #4]
 80102a2:	2b00      	cmp	r3, #0
 80102a4:	d108      	bne.n	80102b8 <netbuf_next+0x20>
 80102a6:	4b11      	ldr	r3, [pc, #68]	; (80102ec <netbuf_next+0x54>)
 80102a8:	22dc      	movs	r2, #220	; 0xdc
 80102aa:	4911      	ldr	r1, [pc, #68]	; (80102f0 <netbuf_next+0x58>)
 80102ac:	4811      	ldr	r0, [pc, #68]	; (80102f4 <netbuf_next+0x5c>)
 80102ae:	f00a fd9f 	bl	801adf0 <iprintf>
 80102b2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80102b6:	e014      	b.n	80102e2 <netbuf_next+0x4a>
  if (buf->ptr->next == NULL) {
 80102b8:	687b      	ldr	r3, [r7, #4]
 80102ba:	685b      	ldr	r3, [r3, #4]
 80102bc:	681b      	ldr	r3, [r3, #0]
 80102be:	2b00      	cmp	r3, #0
 80102c0:	d102      	bne.n	80102c8 <netbuf_next+0x30>
    return -1;
 80102c2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80102c6:	e00c      	b.n	80102e2 <netbuf_next+0x4a>
  }
  buf->ptr = buf->ptr->next;
 80102c8:	687b      	ldr	r3, [r7, #4]
 80102ca:	685b      	ldr	r3, [r3, #4]
 80102cc:	681a      	ldr	r2, [r3, #0]
 80102ce:	687b      	ldr	r3, [r7, #4]
 80102d0:	605a      	str	r2, [r3, #4]
  if (buf->ptr->next == NULL) {
 80102d2:	687b      	ldr	r3, [r7, #4]
 80102d4:	685b      	ldr	r3, [r3, #4]
 80102d6:	681b      	ldr	r3, [r3, #0]
 80102d8:	2b00      	cmp	r3, #0
 80102da:	d101      	bne.n	80102e0 <netbuf_next+0x48>
    return 1;
 80102dc:	2301      	movs	r3, #1
 80102de:	e000      	b.n	80102e2 <netbuf_next+0x4a>
  }
  return 0;
 80102e0:	2300      	movs	r3, #0
}
 80102e2:	4618      	mov	r0, r3
 80102e4:	3708      	adds	r7, #8
 80102e6:	46bd      	mov	sp, r7
 80102e8:	bd80      	pop	{r7, pc}
 80102ea:	bf00      	nop
 80102ec:	0801c798 	.word	0x0801c798
 80102f0:	0801c8f8 	.word	0x0801c8f8
 80102f4:	0801c7e8 	.word	0x0801c7e8

080102f8 <tcpip_thread>:
 *
 * @param arg unused argument
 */
static void
tcpip_thread(void *arg)
{
 80102f8:	b580      	push	{r7, lr}
 80102fa:	b084      	sub	sp, #16
 80102fc:	af00      	add	r7, sp, #0
 80102fe:	6078      	str	r0, [r7, #4]
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  if (tcpip_init_done != NULL) {
 8010300:	4b29      	ldr	r3, [pc, #164]	; (80103a8 <tcpip_thread+0xb0>)
 8010302:	681b      	ldr	r3, [r3, #0]
 8010304:	2b00      	cmp	r3, #0
 8010306:	d005      	beq.n	8010314 <tcpip_thread+0x1c>
    tcpip_init_done(tcpip_init_done_arg);
 8010308:	4b27      	ldr	r3, [pc, #156]	; (80103a8 <tcpip_thread+0xb0>)
 801030a:	681b      	ldr	r3, [r3, #0]
 801030c:	4a27      	ldr	r2, [pc, #156]	; (80103ac <tcpip_thread+0xb4>)
 801030e:	6812      	ldr	r2, [r2, #0]
 8010310:	4610      	mov	r0, r2
 8010312:	4798      	blx	r3
  }

  LOCK_TCPIP_CORE();
 8010314:	4826      	ldr	r0, [pc, #152]	; (80103b0 <tcpip_thread+0xb8>)
 8010316:	f009 ff33 	bl	801a180 <sys_mutex_lock>
  while (1) {                          /* MAIN Loop */
    UNLOCK_TCPIP_CORE();
 801031a:	4825      	ldr	r0, [pc, #148]	; (80103b0 <tcpip_thread+0xb8>)
 801031c:	f009 ff3f 	bl	801a19e <sys_mutex_unlock>
    LWIP_TCPIP_THREAD_ALIVE();
    /* wait for a message, timeouts are processed while waiting */
    TCPIP_MBOX_FETCH(&mbox, (void **)&msg);
 8010320:	f107 030c 	add.w	r3, r7, #12
 8010324:	4619      	mov	r1, r3
 8010326:	4823      	ldr	r0, [pc, #140]	; (80103b4 <tcpip_thread+0xbc>)
 8010328:	f007 f8fa 	bl	8017520 <sys_timeouts_mbox_fetch>
    LOCK_TCPIP_CORE();
 801032c:	4820      	ldr	r0, [pc, #128]	; (80103b0 <tcpip_thread+0xb8>)
 801032e:	f009 ff27 	bl	801a180 <sys_mutex_lock>
    if (msg == NULL) {
 8010332:	68fb      	ldr	r3, [r7, #12]
 8010334:	2b00      	cmp	r3, #0
 8010336:	d106      	bne.n	8010346 <tcpip_thread+0x4e>
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: NULL\n"));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 8010338:	4b1f      	ldr	r3, [pc, #124]	; (80103b8 <tcpip_thread+0xc0>)
 801033a:	2269      	movs	r2, #105	; 0x69
 801033c:	491f      	ldr	r1, [pc, #124]	; (80103bc <tcpip_thread+0xc4>)
 801033e:	4820      	ldr	r0, [pc, #128]	; (80103c0 <tcpip_thread+0xc8>)
 8010340:	f00a fd56 	bl	801adf0 <iprintf>
      continue;
 8010344:	e02f      	b.n	80103a6 <tcpip_thread+0xae>
    }
    switch (msg->type) {
 8010346:	68fb      	ldr	r3, [r7, #12]
 8010348:	781b      	ldrb	r3, [r3, #0]
 801034a:	2b03      	cmp	r3, #3
 801034c:	d011      	beq.n	8010372 <tcpip_thread+0x7a>
 801034e:	2b04      	cmp	r3, #4
 8010350:	d01b      	beq.n	801038a <tcpip_thread+0x92>
 8010352:	2b02      	cmp	r3, #2
 8010354:	d120      	bne.n	8010398 <tcpip_thread+0xa0>
#endif /* !LWIP_TCPIP_CORE_LOCKING */

#if !LWIP_TCPIP_CORE_LOCKING_INPUT
    case TCPIP_MSG_INPKT:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: PACKET %p\n", (void *)msg));
      msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif);
 8010356:	68fb      	ldr	r3, [r7, #12]
 8010358:	68db      	ldr	r3, [r3, #12]
 801035a:	68fa      	ldr	r2, [r7, #12]
 801035c:	6850      	ldr	r0, [r2, #4]
 801035e:	68fa      	ldr	r2, [r7, #12]
 8010360:	6892      	ldr	r2, [r2, #8]
 8010362:	4611      	mov	r1, r2
 8010364:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 8010366:	68fb      	ldr	r3, [r7, #12]
 8010368:	4619      	mov	r1, r3
 801036a:	2009      	movs	r0, #9
 801036c:	f000 fd7a 	bl	8010e64 <memp_free>
      break;
 8010370:	e019      	b.n	80103a6 <tcpip_thread+0xae>
      break;
#endif /* LWIP_TCPIP_TIMEOUT && LWIP_TIMERS */

    case TCPIP_MSG_CALLBACK:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 8010372:	68fb      	ldr	r3, [r7, #12]
 8010374:	685b      	ldr	r3, [r3, #4]
 8010376:	68fa      	ldr	r2, [r7, #12]
 8010378:	6892      	ldr	r2, [r2, #8]
 801037a:	4610      	mov	r0, r2
 801037c:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_API, msg);
 801037e:	68fb      	ldr	r3, [r7, #12]
 8010380:	4619      	mov	r1, r3
 8010382:	2008      	movs	r0, #8
 8010384:	f000 fd6e 	bl	8010e64 <memp_free>
      break;
 8010388:	e00d      	b.n	80103a6 <tcpip_thread+0xae>

    case TCPIP_MSG_CALLBACK_STATIC:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK_STATIC %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 801038a:	68fb      	ldr	r3, [r7, #12]
 801038c:	685b      	ldr	r3, [r3, #4]
 801038e:	68fa      	ldr	r2, [r7, #12]
 8010390:	6892      	ldr	r2, [r2, #8]
 8010392:	4610      	mov	r0, r2
 8010394:	4798      	blx	r3
      break;
 8010396:	e006      	b.n	80103a6 <tcpip_thread+0xae>

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 8010398:	4b07      	ldr	r3, [pc, #28]	; (80103b8 <tcpip_thread+0xc0>)
 801039a:	229b      	movs	r2, #155	; 0x9b
 801039c:	4907      	ldr	r1, [pc, #28]	; (80103bc <tcpip_thread+0xc4>)
 801039e:	4808      	ldr	r0, [pc, #32]	; (80103c0 <tcpip_thread+0xc8>)
 80103a0:	f00a fd26 	bl	801adf0 <iprintf>
      break;
 80103a4:	bf00      	nop
    UNLOCK_TCPIP_CORE();
 80103a6:	e7b8      	b.n	801031a <tcpip_thread+0x22>
 80103a8:	200041b4 	.word	0x200041b4
 80103ac:	200041b8 	.word	0x200041b8
 80103b0:	20007634 	.word	0x20007634
 80103b4:	200041bc 	.word	0x200041bc
 80103b8:	0801c930 	.word	0x0801c930
 80103bc:	0801c960 	.word	0x0801c960
 80103c0:	0801c980 	.word	0x0801c980

080103c4 <tcpip_inpkt>:
 * @param inp the network interface on which the packet was received
 * @param input_fn input function to call
 */
err_t
tcpip_inpkt(struct pbuf *p, struct netif *inp, netif_input_fn input_fn)
{
 80103c4:	b580      	push	{r7, lr}
 80103c6:	b086      	sub	sp, #24
 80103c8:	af00      	add	r7, sp, #0
 80103ca:	60f8      	str	r0, [r7, #12]
 80103cc:	60b9      	str	r1, [r7, #8]
 80103ce:	607a      	str	r2, [r7, #4]
  UNLOCK_TCPIP_CORE();
  return ret;
#else /* LWIP_TCPIP_CORE_LOCKING_INPUT */
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(mbox));
 80103d0:	481a      	ldr	r0, [pc, #104]	; (801043c <tcpip_inpkt+0x78>)
 80103d2:	f009 fdfb 	bl	8019fcc <sys_mbox_valid>
 80103d6:	4603      	mov	r3, r0
 80103d8:	2b00      	cmp	r3, #0
 80103da:	d105      	bne.n	80103e8 <tcpip_inpkt+0x24>
 80103dc:	4b18      	ldr	r3, [pc, #96]	; (8010440 <tcpip_inpkt+0x7c>)
 80103de:	22b5      	movs	r2, #181	; 0xb5
 80103e0:	4918      	ldr	r1, [pc, #96]	; (8010444 <tcpip_inpkt+0x80>)
 80103e2:	4819      	ldr	r0, [pc, #100]	; (8010448 <tcpip_inpkt+0x84>)
 80103e4:	f00a fd04 	bl	801adf0 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
 80103e8:	2009      	movs	r0, #9
 80103ea:	f000 fce9 	bl	8010dc0 <memp_malloc>
 80103ee:	6178      	str	r0, [r7, #20]
  if (msg == NULL) {
 80103f0:	697b      	ldr	r3, [r7, #20]
 80103f2:	2b00      	cmp	r3, #0
 80103f4:	d102      	bne.n	80103fc <tcpip_inpkt+0x38>
    return ERR_MEM;
 80103f6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80103fa:	e01a      	b.n	8010432 <tcpip_inpkt+0x6e>
  }

  msg->type = TCPIP_MSG_INPKT;
 80103fc:	697b      	ldr	r3, [r7, #20]
 80103fe:	2202      	movs	r2, #2
 8010400:	701a      	strb	r2, [r3, #0]
  msg->msg.inp.p = p;
 8010402:	697b      	ldr	r3, [r7, #20]
 8010404:	68fa      	ldr	r2, [r7, #12]
 8010406:	605a      	str	r2, [r3, #4]
  msg->msg.inp.netif = inp;
 8010408:	697b      	ldr	r3, [r7, #20]
 801040a:	68ba      	ldr	r2, [r7, #8]
 801040c:	609a      	str	r2, [r3, #8]
  msg->msg.inp.input_fn = input_fn;
 801040e:	697b      	ldr	r3, [r7, #20]
 8010410:	687a      	ldr	r2, [r7, #4]
 8010412:	60da      	str	r2, [r3, #12]
  if (sys_mbox_trypost(&mbox, msg) != ERR_OK) {
 8010414:	6979      	ldr	r1, [r7, #20]
 8010416:	4809      	ldr	r0, [pc, #36]	; (801043c <tcpip_inpkt+0x78>)
 8010418:	f009 fd63 	bl	8019ee2 <sys_mbox_trypost>
 801041c:	4603      	mov	r3, r0
 801041e:	2b00      	cmp	r3, #0
 8010420:	d006      	beq.n	8010430 <tcpip_inpkt+0x6c>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 8010422:	6979      	ldr	r1, [r7, #20]
 8010424:	2009      	movs	r0, #9
 8010426:	f000 fd1d 	bl	8010e64 <memp_free>
    return ERR_MEM;
 801042a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801042e:	e000      	b.n	8010432 <tcpip_inpkt+0x6e>
  }
  return ERR_OK;
 8010430:	2300      	movs	r3, #0
#endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
}
 8010432:	4618      	mov	r0, r3
 8010434:	3718      	adds	r7, #24
 8010436:	46bd      	mov	sp, r7
 8010438:	bd80      	pop	{r7, pc}
 801043a:	bf00      	nop
 801043c:	200041bc 	.word	0x200041bc
 8010440:	0801c930 	.word	0x0801c930
 8010444:	0801c9a8 	.word	0x0801c9a8
 8010448:	0801c980 	.word	0x0801c980

0801044c <tcpip_input>:
 *          NETIF_FLAG_ETHERNET flags)
 * @param inp the network interface on which the packet was received
 */
err_t
tcpip_input(struct pbuf *p, struct netif *inp)
{
 801044c:	b580      	push	{r7, lr}
 801044e:	b082      	sub	sp, #8
 8010450:	af00      	add	r7, sp, #0
 8010452:	6078      	str	r0, [r7, #4]
 8010454:	6039      	str	r1, [r7, #0]
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 8010456:	683b      	ldr	r3, [r7, #0]
 8010458:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801045c:	f003 0318 	and.w	r3, r3, #24
 8010460:	2b00      	cmp	r3, #0
 8010462:	d006      	beq.n	8010472 <tcpip_input+0x26>
    return tcpip_inpkt(p, inp, ethernet_input);
 8010464:	4a08      	ldr	r2, [pc, #32]	; (8010488 <tcpip_input+0x3c>)
 8010466:	6839      	ldr	r1, [r7, #0]
 8010468:	6878      	ldr	r0, [r7, #4]
 801046a:	f7ff ffab 	bl	80103c4 <tcpip_inpkt>
 801046e:	4603      	mov	r3, r0
 8010470:	e005      	b.n	801047e <tcpip_input+0x32>
  } else
#endif /* LWIP_ETHERNET */
  return tcpip_inpkt(p, inp, ip_input);
 8010472:	4a06      	ldr	r2, [pc, #24]	; (801048c <tcpip_input+0x40>)
 8010474:	6839      	ldr	r1, [r7, #0]
 8010476:	6878      	ldr	r0, [r7, #4]
 8010478:	f7ff ffa4 	bl	80103c4 <tcpip_inpkt>
 801047c:	4603      	mov	r3, r0
}
 801047e:	4618      	mov	r0, r3
 8010480:	3708      	adds	r7, #8
 8010482:	46bd      	mov	sp, r7
 8010484:	bd80      	pop	{r7, pc}
 8010486:	bf00      	nop
 8010488:	08019c99 	.word	0x08019c99
 801048c:	08018c5d 	.word	0x08018c5d

08010490 <tcpip_callback_with_block>:
 * @param block 1 to block until the request is posted, 0 to non-blocking mode
 * @return ERR_OK if the function was called, another err_t if not
 */
err_t
tcpip_callback_with_block(tcpip_callback_fn function, void *ctx, u8_t block)
{
 8010490:	b580      	push	{r7, lr}
 8010492:	b086      	sub	sp, #24
 8010494:	af00      	add	r7, sp, #0
 8010496:	60f8      	str	r0, [r7, #12]
 8010498:	60b9      	str	r1, [r7, #8]
 801049a:	4613      	mov	r3, r2
 801049c:	71fb      	strb	r3, [r7, #7]
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(mbox));
 801049e:	481d      	ldr	r0, [pc, #116]	; (8010514 <tcpip_callback_with_block+0x84>)
 80104a0:	f009 fd94 	bl	8019fcc <sys_mbox_valid>
 80104a4:	4603      	mov	r3, r0
 80104a6:	2b00      	cmp	r3, #0
 80104a8:	d105      	bne.n	80104b6 <tcpip_callback_with_block+0x26>
 80104aa:	4b1b      	ldr	r3, [pc, #108]	; (8010518 <tcpip_callback_with_block+0x88>)
 80104ac:	22ee      	movs	r2, #238	; 0xee
 80104ae:	491b      	ldr	r1, [pc, #108]	; (801051c <tcpip_callback_with_block+0x8c>)
 80104b0:	481b      	ldr	r0, [pc, #108]	; (8010520 <tcpip_callback_with_block+0x90>)
 80104b2:	f00a fc9d 	bl	801adf0 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
 80104b6:	2008      	movs	r0, #8
 80104b8:	f000 fc82 	bl	8010dc0 <memp_malloc>
 80104bc:	6178      	str	r0, [r7, #20]
  if (msg == NULL) {
 80104be:	697b      	ldr	r3, [r7, #20]
 80104c0:	2b00      	cmp	r3, #0
 80104c2:	d102      	bne.n	80104ca <tcpip_callback_with_block+0x3a>
    return ERR_MEM;
 80104c4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80104c8:	e01f      	b.n	801050a <tcpip_callback_with_block+0x7a>
  }

  msg->type = TCPIP_MSG_CALLBACK;
 80104ca:	697b      	ldr	r3, [r7, #20]
 80104cc:	2203      	movs	r2, #3
 80104ce:	701a      	strb	r2, [r3, #0]
  msg->msg.cb.function = function;
 80104d0:	697b      	ldr	r3, [r7, #20]
 80104d2:	68fa      	ldr	r2, [r7, #12]
 80104d4:	605a      	str	r2, [r3, #4]
  msg->msg.cb.ctx = ctx;
 80104d6:	697b      	ldr	r3, [r7, #20]
 80104d8:	68ba      	ldr	r2, [r7, #8]
 80104da:	609a      	str	r2, [r3, #8]
  if (block) {
 80104dc:	79fb      	ldrb	r3, [r7, #7]
 80104de:	2b00      	cmp	r3, #0
 80104e0:	d004      	beq.n	80104ec <tcpip_callback_with_block+0x5c>
    sys_mbox_post(&mbox, msg);
 80104e2:	6979      	ldr	r1, [r7, #20]
 80104e4:	480b      	ldr	r0, [pc, #44]	; (8010514 <tcpip_callback_with_block+0x84>)
 80104e6:	f009 fce7 	bl	8019eb8 <sys_mbox_post>
 80104ea:	e00d      	b.n	8010508 <tcpip_callback_with_block+0x78>
  } else {
    if (sys_mbox_trypost(&mbox, msg) != ERR_OK) {
 80104ec:	6979      	ldr	r1, [r7, #20]
 80104ee:	4809      	ldr	r0, [pc, #36]	; (8010514 <tcpip_callback_with_block+0x84>)
 80104f0:	f009 fcf7 	bl	8019ee2 <sys_mbox_trypost>
 80104f4:	4603      	mov	r3, r0
 80104f6:	2b00      	cmp	r3, #0
 80104f8:	d006      	beq.n	8010508 <tcpip_callback_with_block+0x78>
      memp_free(MEMP_TCPIP_MSG_API, msg);
 80104fa:	6979      	ldr	r1, [r7, #20]
 80104fc:	2008      	movs	r0, #8
 80104fe:	f000 fcb1 	bl	8010e64 <memp_free>
      return ERR_MEM;
 8010502:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8010506:	e000      	b.n	801050a <tcpip_callback_with_block+0x7a>
    }
  }
  return ERR_OK;
 8010508:	2300      	movs	r3, #0
}
 801050a:	4618      	mov	r0, r3
 801050c:	3718      	adds	r7, #24
 801050e:	46bd      	mov	sp, r7
 8010510:	bd80      	pop	{r7, pc}
 8010512:	bf00      	nop
 8010514:	200041bc 	.word	0x200041bc
 8010518:	0801c930 	.word	0x0801c930
 801051c:	0801c9a8 	.word	0x0801c9a8
 8010520:	0801c980 	.word	0x0801c980

08010524 <tcpip_send_msg_wait_sem>:
 * @param sem semaphore to wait on
 * @return ERR_OK if the function was called, another err_t if not
 */
err_t
tcpip_send_msg_wait_sem(tcpip_callback_fn fn, void *apimsg, sys_sem_t* sem)
{
 8010524:	b580      	push	{r7, lr}
 8010526:	b084      	sub	sp, #16
 8010528:	af00      	add	r7, sp, #0
 801052a:	60f8      	str	r0, [r7, #12]
 801052c:	60b9      	str	r1, [r7, #8]
 801052e:	607a      	str	r2, [r7, #4]
#if LWIP_TCPIP_CORE_LOCKING
  LWIP_UNUSED_ARG(sem);
  LOCK_TCPIP_CORE();
 8010530:	4806      	ldr	r0, [pc, #24]	; (801054c <tcpip_send_msg_wait_sem+0x28>)
 8010532:	f009 fe25 	bl	801a180 <sys_mutex_lock>
  fn(apimsg);
 8010536:	68fb      	ldr	r3, [r7, #12]
 8010538:	68b8      	ldr	r0, [r7, #8]
 801053a:	4798      	blx	r3
  UNLOCK_TCPIP_CORE();
 801053c:	4803      	ldr	r0, [pc, #12]	; (801054c <tcpip_send_msg_wait_sem+0x28>)
 801053e:	f009 fe2e 	bl	801a19e <sys_mutex_unlock>
  return ERR_OK;
 8010542:	2300      	movs	r3, #0
  sys_mbox_post(&mbox, &TCPIP_MSG_VAR_REF(msg));
  sys_arch_sem_wait(sem, 0);
  TCPIP_MSG_VAR_FREE(msg);
  return ERR_OK;
#endif /* LWIP_TCPIP_CORE_LOCKING */
}
 8010544:	4618      	mov	r0, r3
 8010546:	3710      	adds	r7, #16
 8010548:	46bd      	mov	sp, r7
 801054a:	bd80      	pop	{r7, pc}
 801054c:	20007634 	.word	0x20007634

08010550 <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
 8010550:	b580      	push	{r7, lr}
 8010552:	b084      	sub	sp, #16
 8010554:	af02      	add	r7, sp, #8
 8010556:	6078      	str	r0, [r7, #4]
 8010558:	6039      	str	r1, [r7, #0]
  lwip_init();
 801055a:	f000 f86a 	bl	8010632 <lwip_init>

  tcpip_init_done = initfunc;
 801055e:	4a17      	ldr	r2, [pc, #92]	; (80105bc <tcpip_init+0x6c>)
 8010560:	687b      	ldr	r3, [r7, #4]
 8010562:	6013      	str	r3, [r2, #0]
  tcpip_init_done_arg = arg;
 8010564:	4a16      	ldr	r2, [pc, #88]	; (80105c0 <tcpip_init+0x70>)
 8010566:	683b      	ldr	r3, [r7, #0]
 8010568:	6013      	str	r3, [r2, #0]
  if (sys_mbox_new(&mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 801056a:	2106      	movs	r1, #6
 801056c:	4815      	ldr	r0, [pc, #84]	; (80105c4 <tcpip_init+0x74>)
 801056e:	f009 fc6f 	bl	8019e50 <sys_mbox_new>
 8010572:	4603      	mov	r3, r0
 8010574:	2b00      	cmp	r3, #0
 8010576:	d006      	beq.n	8010586 <tcpip_init+0x36>
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 8010578:	4b13      	ldr	r3, [pc, #76]	; (80105c8 <tcpip_init+0x78>)
 801057a:	f240 12d5 	movw	r2, #469	; 0x1d5
 801057e:	4913      	ldr	r1, [pc, #76]	; (80105cc <tcpip_init+0x7c>)
 8010580:	4813      	ldr	r0, [pc, #76]	; (80105d0 <tcpip_init+0x80>)
 8010582:	f00a fc35 	bl	801adf0 <iprintf>
  }
#if LWIP_TCPIP_CORE_LOCKING
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 8010586:	4813      	ldr	r0, [pc, #76]	; (80105d4 <tcpip_init+0x84>)
 8010588:	f009 fdde 	bl	801a148 <sys_mutex_new>
 801058c:	4603      	mov	r3, r0
 801058e:	2b00      	cmp	r3, #0
 8010590:	d006      	beq.n	80105a0 <tcpip_init+0x50>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
 8010592:	4b0d      	ldr	r3, [pc, #52]	; (80105c8 <tcpip_init+0x78>)
 8010594:	f240 12d9 	movw	r2, #473	; 0x1d9
 8010598:	490f      	ldr	r1, [pc, #60]	; (80105d8 <tcpip_init+0x88>)
 801059a:	480d      	ldr	r0, [pc, #52]	; (80105d0 <tcpip_init+0x80>)
 801059c:	f00a fc28 	bl	801adf0 <iprintf>
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 80105a0:	2303      	movs	r3, #3
 80105a2:	9300      	str	r3, [sp, #0]
 80105a4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80105a8:	2200      	movs	r2, #0
 80105aa:	490c      	ldr	r1, [pc, #48]	; (80105dc <tcpip_init+0x8c>)
 80105ac:	480c      	ldr	r0, [pc, #48]	; (80105e0 <tcpip_init+0x90>)
 80105ae:	f009 fe03 	bl	801a1b8 <sys_thread_new>
}
 80105b2:	bf00      	nop
 80105b4:	3708      	adds	r7, #8
 80105b6:	46bd      	mov	sp, r7
 80105b8:	bd80      	pop	{r7, pc}
 80105ba:	bf00      	nop
 80105bc:	200041b4 	.word	0x200041b4
 80105c0:	200041b8 	.word	0x200041b8
 80105c4:	200041bc 	.word	0x200041bc
 80105c8:	0801c930 	.word	0x0801c930
 80105cc:	0801c9b8 	.word	0x0801c9b8
 80105d0:	0801c980 	.word	0x0801c980
 80105d4:	20007634 	.word	0x20007634
 80105d8:	0801c9dc 	.word	0x0801c9dc
 80105dc:	080102f9 	.word	0x080102f9
 80105e0:	0801ca00 	.word	0x0801ca00

080105e4 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 80105e4:	b480      	push	{r7}
 80105e6:	b083      	sub	sp, #12
 80105e8:	af00      	add	r7, sp, #0
 80105ea:	4603      	mov	r3, r0
 80105ec:	80fb      	strh	r3, [r7, #6]
  return (u16_t)PP_HTONS(n);
 80105ee:	88fb      	ldrh	r3, [r7, #6]
 80105f0:	ba5b      	rev16	r3, r3
 80105f2:	b29b      	uxth	r3, r3
}
 80105f4:	4618      	mov	r0, r3
 80105f6:	370c      	adds	r7, #12
 80105f8:	46bd      	mov	sp, r7
 80105fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105fe:	4770      	bx	lr

08010600 <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 8010600:	b480      	push	{r7}
 8010602:	b083      	sub	sp, #12
 8010604:	af00      	add	r7, sp, #0
 8010606:	6078      	str	r0, [r7, #4]
  return (u32_t)PP_HTONL(n);
 8010608:	687b      	ldr	r3, [r7, #4]
 801060a:	061a      	lsls	r2, r3, #24
 801060c:	687b      	ldr	r3, [r7, #4]
 801060e:	021b      	lsls	r3, r3, #8
 8010610:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8010614:	431a      	orrs	r2, r3
 8010616:	687b      	ldr	r3, [r7, #4]
 8010618:	0a1b      	lsrs	r3, r3, #8
 801061a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801061e:	431a      	orrs	r2, r3
 8010620:	687b      	ldr	r3, [r7, #4]
 8010622:	0e1b      	lsrs	r3, r3, #24
 8010624:	4313      	orrs	r3, r2
}
 8010626:	4618      	mov	r0, r3
 8010628:	370c      	adds	r7, #12
 801062a:	46bd      	mov	sp, r7
 801062c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010630:	4770      	bx	lr

08010632 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 8010632:	b580      	push	{r7, lr}
 8010634:	b082      	sub	sp, #8
 8010636:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 8010638:	2300      	movs	r3, #0
 801063a:	607b      	str	r3, [r7, #4]
#endif

  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
 801063c:	f009 fd76 	bl	801a12c <sys_init>
#endif /* !NO_SYS */
  mem_init();
 8010640:	f000 f8a6 	bl	8010790 <mem_init>
  memp_init();
 8010644:	f000 fb70 	bl	8010d28 <memp_init>
  pbuf_init();
  netif_init();
 8010648:	f000 fc36 	bl	8010eb8 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 801064c:	f006 ff8e 	bl	801756c <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 8010650:	f001 fbd8 	bl	8011e04 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif
 
#if LWIP_TIMERS
  sys_timeouts_init();
 8010654:	f006 fe20 	bl	8017298 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 8010658:	bf00      	nop
 801065a:	3708      	adds	r7, #8
 801065c:	46bd      	mov	sp, r7
 801065e:	bd80      	pop	{r7, pc}

08010660 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 8010660:	b580      	push	{r7, lr}
 8010662:	b084      	sub	sp, #16
 8010664:	af00      	add	r7, sp, #0
 8010666:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 8010668:	4b40      	ldr	r3, [pc, #256]	; (801076c <plug_holes+0x10c>)
 801066a:	681b      	ldr	r3, [r3, #0]
 801066c:	687a      	ldr	r2, [r7, #4]
 801066e:	429a      	cmp	r2, r3
 8010670:	d206      	bcs.n	8010680 <plug_holes+0x20>
 8010672:	4b3f      	ldr	r3, [pc, #252]	; (8010770 <plug_holes+0x110>)
 8010674:	f240 125d 	movw	r2, #349	; 0x15d
 8010678:	493e      	ldr	r1, [pc, #248]	; (8010774 <plug_holes+0x114>)
 801067a:	483f      	ldr	r0, [pc, #252]	; (8010778 <plug_holes+0x118>)
 801067c:	f00a fbb8 	bl	801adf0 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 8010680:	4b3e      	ldr	r3, [pc, #248]	; (801077c <plug_holes+0x11c>)
 8010682:	681b      	ldr	r3, [r3, #0]
 8010684:	687a      	ldr	r2, [r7, #4]
 8010686:	429a      	cmp	r2, r3
 8010688:	d306      	bcc.n	8010698 <plug_holes+0x38>
 801068a:	4b39      	ldr	r3, [pc, #228]	; (8010770 <plug_holes+0x110>)
 801068c:	f44f 72af 	mov.w	r2, #350	; 0x15e
 8010690:	493b      	ldr	r1, [pc, #236]	; (8010780 <plug_holes+0x120>)
 8010692:	4839      	ldr	r0, [pc, #228]	; (8010778 <plug_holes+0x118>)
 8010694:	f00a fbac 	bl	801adf0 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 8010698:	687b      	ldr	r3, [r7, #4]
 801069a:	791b      	ldrb	r3, [r3, #4]
 801069c:	2b00      	cmp	r3, #0
 801069e:	d006      	beq.n	80106ae <plug_holes+0x4e>
 80106a0:	4b33      	ldr	r3, [pc, #204]	; (8010770 <plug_holes+0x110>)
 80106a2:	f240 125f 	movw	r2, #351	; 0x15f
 80106a6:	4937      	ldr	r1, [pc, #220]	; (8010784 <plug_holes+0x124>)
 80106a8:	4833      	ldr	r0, [pc, #204]	; (8010778 <plug_holes+0x118>)
 80106aa:	f00a fba1 	bl	801adf0 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 80106ae:	687b      	ldr	r3, [r7, #4]
 80106b0:	881b      	ldrh	r3, [r3, #0]
 80106b2:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 80106b6:	d906      	bls.n	80106c6 <plug_holes+0x66>
 80106b8:	4b2d      	ldr	r3, [pc, #180]	; (8010770 <plug_holes+0x110>)
 80106ba:	f44f 72b1 	mov.w	r2, #354	; 0x162
 80106be:	4932      	ldr	r1, [pc, #200]	; (8010788 <plug_holes+0x128>)
 80106c0:	482d      	ldr	r0, [pc, #180]	; (8010778 <plug_holes+0x118>)
 80106c2:	f00a fb95 	bl	801adf0 <iprintf>

  nmem = (struct mem *)(void *)&ram[mem->next];
 80106c6:	4b29      	ldr	r3, [pc, #164]	; (801076c <plug_holes+0x10c>)
 80106c8:	681b      	ldr	r3, [r3, #0]
 80106ca:	687a      	ldr	r2, [r7, #4]
 80106cc:	8812      	ldrh	r2, [r2, #0]
 80106ce:	4413      	add	r3, r2
 80106d0:	60fb      	str	r3, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 80106d2:	687a      	ldr	r2, [r7, #4]
 80106d4:	68fb      	ldr	r3, [r7, #12]
 80106d6:	429a      	cmp	r2, r3
 80106d8:	d01f      	beq.n	801071a <plug_holes+0xba>
 80106da:	68fb      	ldr	r3, [r7, #12]
 80106dc:	791b      	ldrb	r3, [r3, #4]
 80106de:	2b00      	cmp	r3, #0
 80106e0:	d11b      	bne.n	801071a <plug_holes+0xba>
 80106e2:	4b26      	ldr	r3, [pc, #152]	; (801077c <plug_holes+0x11c>)
 80106e4:	681b      	ldr	r3, [r3, #0]
 80106e6:	68fa      	ldr	r2, [r7, #12]
 80106e8:	429a      	cmp	r2, r3
 80106ea:	d016      	beq.n	801071a <plug_holes+0xba>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 80106ec:	4b27      	ldr	r3, [pc, #156]	; (801078c <plug_holes+0x12c>)
 80106ee:	681b      	ldr	r3, [r3, #0]
 80106f0:	68fa      	ldr	r2, [r7, #12]
 80106f2:	429a      	cmp	r2, r3
 80106f4:	d102      	bne.n	80106fc <plug_holes+0x9c>
      lfree = mem;
 80106f6:	4a25      	ldr	r2, [pc, #148]	; (801078c <plug_holes+0x12c>)
 80106f8:	687b      	ldr	r3, [r7, #4]
 80106fa:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 80106fc:	68fb      	ldr	r3, [r7, #12]
 80106fe:	881a      	ldrh	r2, [r3, #0]
 8010700:	687b      	ldr	r3, [r7, #4]
 8010702:	801a      	strh	r2, [r3, #0]
    ((struct mem *)(void *)&ram[nmem->next])->prev = (mem_size_t)((u8_t *)mem - ram);
 8010704:	687b      	ldr	r3, [r7, #4]
 8010706:	4a19      	ldr	r2, [pc, #100]	; (801076c <plug_holes+0x10c>)
 8010708:	6812      	ldr	r2, [r2, #0]
 801070a:	1a99      	subs	r1, r3, r2
 801070c:	4b17      	ldr	r3, [pc, #92]	; (801076c <plug_holes+0x10c>)
 801070e:	681b      	ldr	r3, [r3, #0]
 8010710:	68fa      	ldr	r2, [r7, #12]
 8010712:	8812      	ldrh	r2, [r2, #0]
 8010714:	4413      	add	r3, r2
 8010716:	b28a      	uxth	r2, r1
 8010718:	805a      	strh	r2, [r3, #2]
  }

  /* plug hole backward */
  pmem = (struct mem *)(void *)&ram[mem->prev];
 801071a:	4b14      	ldr	r3, [pc, #80]	; (801076c <plug_holes+0x10c>)
 801071c:	681b      	ldr	r3, [r3, #0]
 801071e:	687a      	ldr	r2, [r7, #4]
 8010720:	8852      	ldrh	r2, [r2, #2]
 8010722:	4413      	add	r3, r2
 8010724:	60bb      	str	r3, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 8010726:	68ba      	ldr	r2, [r7, #8]
 8010728:	687b      	ldr	r3, [r7, #4]
 801072a:	429a      	cmp	r2, r3
 801072c:	d01a      	beq.n	8010764 <plug_holes+0x104>
 801072e:	68bb      	ldr	r3, [r7, #8]
 8010730:	791b      	ldrb	r3, [r3, #4]
 8010732:	2b00      	cmp	r3, #0
 8010734:	d116      	bne.n	8010764 <plug_holes+0x104>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 8010736:	4b15      	ldr	r3, [pc, #84]	; (801078c <plug_holes+0x12c>)
 8010738:	681b      	ldr	r3, [r3, #0]
 801073a:	687a      	ldr	r2, [r7, #4]
 801073c:	429a      	cmp	r2, r3
 801073e:	d102      	bne.n	8010746 <plug_holes+0xe6>
      lfree = pmem;
 8010740:	4a12      	ldr	r2, [pc, #72]	; (801078c <plug_holes+0x12c>)
 8010742:	68bb      	ldr	r3, [r7, #8]
 8010744:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 8010746:	687b      	ldr	r3, [r7, #4]
 8010748:	881a      	ldrh	r2, [r3, #0]
 801074a:	68bb      	ldr	r3, [r7, #8]
 801074c:	801a      	strh	r2, [r3, #0]
    ((struct mem *)(void *)&ram[mem->next])->prev = (mem_size_t)((u8_t *)pmem - ram);
 801074e:	68bb      	ldr	r3, [r7, #8]
 8010750:	4a06      	ldr	r2, [pc, #24]	; (801076c <plug_holes+0x10c>)
 8010752:	6812      	ldr	r2, [r2, #0]
 8010754:	1a99      	subs	r1, r3, r2
 8010756:	4b05      	ldr	r3, [pc, #20]	; (801076c <plug_holes+0x10c>)
 8010758:	681b      	ldr	r3, [r3, #0]
 801075a:	687a      	ldr	r2, [r7, #4]
 801075c:	8812      	ldrh	r2, [r2, #0]
 801075e:	4413      	add	r3, r2
 8010760:	b28a      	uxth	r2, r1
 8010762:	805a      	strh	r2, [r3, #2]
  }
}
 8010764:	bf00      	nop
 8010766:	3710      	adds	r7, #16
 8010768:	46bd      	mov	sp, r7
 801076a:	bd80      	pop	{r7, pc}
 801076c:	200041c0 	.word	0x200041c0
 8010770:	0801ca10 	.word	0x0801ca10
 8010774:	0801ca40 	.word	0x0801ca40
 8010778:	0801ca58 	.word	0x0801ca58
 801077c:	200041c4 	.word	0x200041c4
 8010780:	0801ca80 	.word	0x0801ca80
 8010784:	0801ca9c 	.word	0x0801ca9c
 8010788:	0801cab8 	.word	0x0801cab8
 801078c:	200041c8 	.word	0x200041c8

08010790 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 8010790:	b580      	push	{r7, lr}
 8010792:	b082      	sub	sp, #8
 8010794:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
    (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT-1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 8010796:	4b1e      	ldr	r3, [pc, #120]	; (8010810 <mem_init+0x80>)
 8010798:	3303      	adds	r3, #3
 801079a:	f023 0303 	bic.w	r3, r3, #3
 801079e:	461a      	mov	r2, r3
 80107a0:	4b1c      	ldr	r3, [pc, #112]	; (8010814 <mem_init+0x84>)
 80107a2:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 80107a4:	4b1b      	ldr	r3, [pc, #108]	; (8010814 <mem_init+0x84>)
 80107a6:	681b      	ldr	r3, [r3, #0]
 80107a8:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 80107aa:	687b      	ldr	r3, [r7, #4]
 80107ac:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 80107b0:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 80107b2:	687b      	ldr	r3, [r7, #4]
 80107b4:	2200      	movs	r2, #0
 80107b6:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 80107b8:	687b      	ldr	r3, [r7, #4]
 80107ba:	2200      	movs	r2, #0
 80107bc:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = (struct mem *)(void *)&ram[MEM_SIZE_ALIGNED];
 80107be:	4b15      	ldr	r3, [pc, #84]	; (8010814 <mem_init+0x84>)
 80107c0:	681b      	ldr	r3, [r3, #0]
 80107c2:	f503 63c8 	add.w	r3, r3, #1600	; 0x640
 80107c6:	4a14      	ldr	r2, [pc, #80]	; (8010818 <mem_init+0x88>)
 80107c8:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 80107ca:	4b13      	ldr	r3, [pc, #76]	; (8010818 <mem_init+0x88>)
 80107cc:	681b      	ldr	r3, [r3, #0]
 80107ce:	2201      	movs	r2, #1
 80107d0:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 80107d2:	4b11      	ldr	r3, [pc, #68]	; (8010818 <mem_init+0x88>)
 80107d4:	681b      	ldr	r3, [r3, #0]
 80107d6:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 80107da:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 80107dc:	4b0e      	ldr	r3, [pc, #56]	; (8010818 <mem_init+0x88>)
 80107de:	681b      	ldr	r3, [r3, #0]
 80107e0:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 80107e4:	805a      	strh	r2, [r3, #2]

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 80107e6:	4b0b      	ldr	r3, [pc, #44]	; (8010814 <mem_init+0x84>)
 80107e8:	681b      	ldr	r3, [r3, #0]
 80107ea:	4a0c      	ldr	r2, [pc, #48]	; (801081c <mem_init+0x8c>)
 80107ec:	6013      	str	r3, [r2, #0]

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 80107ee:	480c      	ldr	r0, [pc, #48]	; (8010820 <mem_init+0x90>)
 80107f0:	f009 fcaa 	bl	801a148 <sys_mutex_new>
 80107f4:	4603      	mov	r3, r0
 80107f6:	2b00      	cmp	r3, #0
 80107f8:	d006      	beq.n	8010808 <mem_init+0x78>
    LWIP_ASSERT("failed to create mem_mutex", 0);
 80107fa:	4b0a      	ldr	r3, [pc, #40]	; (8010824 <mem_init+0x94>)
 80107fc:	f44f 72cc 	mov.w	r2, #408	; 0x198
 8010800:	4909      	ldr	r1, [pc, #36]	; (8010828 <mem_init+0x98>)
 8010802:	480a      	ldr	r0, [pc, #40]	; (801082c <mem_init+0x9c>)
 8010804:	f00a faf4 	bl	801adf0 <iprintf>
  }
}
 8010808:	bf00      	nop
 801080a:	3708      	adds	r7, #8
 801080c:	46bd      	mov	sp, r7
 801080e:	bd80      	pop	{r7, pc}
 8010810:	20007650 	.word	0x20007650
 8010814:	200041c0 	.word	0x200041c0
 8010818:	200041c4 	.word	0x200041c4
 801081c:	200041c8 	.word	0x200041c8
 8010820:	200041cc 	.word	0x200041cc
 8010824:	0801ca10 	.word	0x0801ca10
 8010828:	0801cae4 	.word	0x0801cae4
 801082c:	0801ca58 	.word	0x0801ca58

08010830 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 8010830:	b580      	push	{r7, lr}
 8010832:	b084      	sub	sp, #16
 8010834:	af00      	add	r7, sp, #0
 8010836:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 8010838:	687b      	ldr	r3, [r7, #4]
 801083a:	2b00      	cmp	r3, #0
 801083c:	d050      	beq.n	80108e0 <mem_free+0xb0>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  LWIP_ASSERT("mem_free: sanity check alignment", (((mem_ptr_t)rmem) & (MEM_ALIGNMENT-1)) == 0);
 801083e:	687b      	ldr	r3, [r7, #4]
 8010840:	f003 0303 	and.w	r3, r3, #3
 8010844:	2b00      	cmp	r3, #0
 8010846:	d006      	beq.n	8010856 <mem_free+0x26>
 8010848:	4b27      	ldr	r3, [pc, #156]	; (80108e8 <mem_free+0xb8>)
 801084a:	f44f 72d6 	mov.w	r2, #428	; 0x1ac
 801084e:	4927      	ldr	r1, [pc, #156]	; (80108ec <mem_free+0xbc>)
 8010850:	4827      	ldr	r0, [pc, #156]	; (80108f0 <mem_free+0xc0>)
 8010852:	f00a facd 	bl	801adf0 <iprintf>

  LWIP_ASSERT("mem_free: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 8010856:	4b27      	ldr	r3, [pc, #156]	; (80108f4 <mem_free+0xc4>)
 8010858:	681b      	ldr	r3, [r3, #0]
 801085a:	687a      	ldr	r2, [r7, #4]
 801085c:	429a      	cmp	r2, r3
 801085e:	d304      	bcc.n	801086a <mem_free+0x3a>
 8010860:	4b25      	ldr	r3, [pc, #148]	; (80108f8 <mem_free+0xc8>)
 8010862:	681b      	ldr	r3, [r3, #0]
 8010864:	687a      	ldr	r2, [r7, #4]
 8010866:	429a      	cmp	r2, r3
 8010868:	d306      	bcc.n	8010878 <mem_free+0x48>
 801086a:	4b1f      	ldr	r3, [pc, #124]	; (80108e8 <mem_free+0xb8>)
 801086c:	f240 12af 	movw	r2, #431	; 0x1af
 8010870:	4922      	ldr	r1, [pc, #136]	; (80108fc <mem_free+0xcc>)
 8010872:	481f      	ldr	r0, [pc, #124]	; (80108f0 <mem_free+0xc0>)
 8010874:	f00a fabc 	bl	801adf0 <iprintf>
    (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 8010878:	4b1e      	ldr	r3, [pc, #120]	; (80108f4 <mem_free+0xc4>)
 801087a:	681b      	ldr	r3, [r3, #0]
 801087c:	687a      	ldr	r2, [r7, #4]
 801087e:	429a      	cmp	r2, r3
 8010880:	d304      	bcc.n	801088c <mem_free+0x5c>
 8010882:	4b1d      	ldr	r3, [pc, #116]	; (80108f8 <mem_free+0xc8>)
 8010884:	681b      	ldr	r3, [r3, #0]
 8010886:	687a      	ldr	r2, [r7, #4]
 8010888:	429a      	cmp	r2, r3
 801088a:	d306      	bcc.n	801089a <mem_free+0x6a>
    SYS_ARCH_DECL_PROTECT(lev);
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    SYS_ARCH_PROTECT(lev);
 801088c:	f009 fcba 	bl	801a204 <sys_arch_protect>
 8010890:	60b8      	str	r0, [r7, #8]
    MEM_STATS_INC(illegal);
    SYS_ARCH_UNPROTECT(lev);
 8010892:	68b8      	ldr	r0, [r7, #8]
 8010894:	f009 fcc4 	bl	801a220 <sys_arch_unprotect>
    return;
 8010898:	e023      	b.n	80108e2 <mem_free+0xb2>
  }
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 801089a:	4819      	ldr	r0, [pc, #100]	; (8010900 <mem_free+0xd0>)
 801089c:	f009 fc70 	bl	801a180 <sys_mutex_lock>
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - SIZEOF_STRUCT_MEM);
 80108a0:	687b      	ldr	r3, [r7, #4]
 80108a2:	3b08      	subs	r3, #8
 80108a4:	60fb      	str	r3, [r7, #12]
  /* ... which has to be in a used state ... */
  LWIP_ASSERT("mem_free: mem->used", mem->used);
 80108a6:	68fb      	ldr	r3, [r7, #12]
 80108a8:	791b      	ldrb	r3, [r3, #4]
 80108aa:	2b00      	cmp	r3, #0
 80108ac:	d106      	bne.n	80108bc <mem_free+0x8c>
 80108ae:	4b0e      	ldr	r3, [pc, #56]	; (80108e8 <mem_free+0xb8>)
 80108b0:	f44f 72e0 	mov.w	r2, #448	; 0x1c0
 80108b4:	4913      	ldr	r1, [pc, #76]	; (8010904 <mem_free+0xd4>)
 80108b6:	480e      	ldr	r0, [pc, #56]	; (80108f0 <mem_free+0xc0>)
 80108b8:	f00a fa9a 	bl	801adf0 <iprintf>
  /* ... and is now unused. */
  mem->used = 0;
 80108bc:	68fb      	ldr	r3, [r7, #12]
 80108be:	2200      	movs	r2, #0
 80108c0:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 80108c2:	4b11      	ldr	r3, [pc, #68]	; (8010908 <mem_free+0xd8>)
 80108c4:	681b      	ldr	r3, [r3, #0]
 80108c6:	68fa      	ldr	r2, [r7, #12]
 80108c8:	429a      	cmp	r2, r3
 80108ca:	d202      	bcs.n	80108d2 <mem_free+0xa2>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 80108cc:	4a0e      	ldr	r2, [pc, #56]	; (8010908 <mem_free+0xd8>)
 80108ce:	68fb      	ldr	r3, [r7, #12]
 80108d0:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 80108d2:	68f8      	ldr	r0, [r7, #12]
 80108d4:	f7ff fec4 	bl	8010660 <plug_holes>
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 80108d8:	4809      	ldr	r0, [pc, #36]	; (8010900 <mem_free+0xd0>)
 80108da:	f009 fc60 	bl	801a19e <sys_mutex_unlock>
 80108de:	e000      	b.n	80108e2 <mem_free+0xb2>
    return;
 80108e0:	bf00      	nop
}
 80108e2:	3710      	adds	r7, #16
 80108e4:	46bd      	mov	sp, r7
 80108e6:	bd80      	pop	{r7, pc}
 80108e8:	0801ca10 	.word	0x0801ca10
 80108ec:	0801cb00 	.word	0x0801cb00
 80108f0:	0801ca58 	.word	0x0801ca58
 80108f4:	200041c0 	.word	0x200041c0
 80108f8:	200041c4 	.word	0x200041c4
 80108fc:	0801cb24 	.word	0x0801cb24
 8010900:	200041cc 	.word	0x200041cc
 8010904:	0801cb3c 	.word	0x0801cb3c
 8010908:	200041c8 	.word	0x200041c8

0801090c <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t newsize)
{
 801090c:	b580      	push	{r7, lr}
 801090e:	b088      	sub	sp, #32
 8010910:	af00      	add	r7, sp, #0
 8010912:	6078      	str	r0, [r7, #4]
 8010914:	460b      	mov	r3, r1
 8010916:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = LWIP_MEM_ALIGN_SIZE(newsize);
 8010918:	887b      	ldrh	r3, [r7, #2]
 801091a:	3303      	adds	r3, #3
 801091c:	b29b      	uxth	r3, r3
 801091e:	f023 0303 	bic.w	r3, r3, #3
 8010922:	807b      	strh	r3, [r7, #2]

  if (newsize < MIN_SIZE_ALIGNED) {
 8010924:	887b      	ldrh	r3, [r7, #2]
 8010926:	2b0b      	cmp	r3, #11
 8010928:	d801      	bhi.n	801092e <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 801092a:	230c      	movs	r3, #12
 801092c:	807b      	strh	r3, [r7, #2]
  }

  if (newsize > MEM_SIZE_ALIGNED) {
 801092e:	887b      	ldrh	r3, [r7, #2]
 8010930:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8010934:	d901      	bls.n	801093a <mem_trim+0x2e>
    return NULL;
 8010936:	2300      	movs	r3, #0
 8010938:	e0bd      	b.n	8010ab6 <mem_trim+0x1aa>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 801093a:	4b61      	ldr	r3, [pc, #388]	; (8010ac0 <mem_trim+0x1b4>)
 801093c:	681b      	ldr	r3, [r3, #0]
 801093e:	687a      	ldr	r2, [r7, #4]
 8010940:	429a      	cmp	r2, r3
 8010942:	d304      	bcc.n	801094e <mem_trim+0x42>
 8010944:	4b5f      	ldr	r3, [pc, #380]	; (8010ac4 <mem_trim+0x1b8>)
 8010946:	681b      	ldr	r3, [r3, #0]
 8010948:	687a      	ldr	r2, [r7, #4]
 801094a:	429a      	cmp	r2, r3
 801094c:	d306      	bcc.n	801095c <mem_trim+0x50>
 801094e:	4b5e      	ldr	r3, [pc, #376]	; (8010ac8 <mem_trim+0x1bc>)
 8010950:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8010954:	495d      	ldr	r1, [pc, #372]	; (8010acc <mem_trim+0x1c0>)
 8010956:	485e      	ldr	r0, [pc, #376]	; (8010ad0 <mem_trim+0x1c4>)
 8010958:	f00a fa4a 	bl	801adf0 <iprintf>
   (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 801095c:	4b58      	ldr	r3, [pc, #352]	; (8010ac0 <mem_trim+0x1b4>)
 801095e:	681b      	ldr	r3, [r3, #0]
 8010960:	687a      	ldr	r2, [r7, #4]
 8010962:	429a      	cmp	r2, r3
 8010964:	d304      	bcc.n	8010970 <mem_trim+0x64>
 8010966:	4b57      	ldr	r3, [pc, #348]	; (8010ac4 <mem_trim+0x1b8>)
 8010968:	681b      	ldr	r3, [r3, #0]
 801096a:	687a      	ldr	r2, [r7, #4]
 801096c:	429a      	cmp	r2, r3
 801096e:	d307      	bcc.n	8010980 <mem_trim+0x74>
    SYS_ARCH_DECL_PROTECT(lev);
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    SYS_ARCH_PROTECT(lev);
 8010970:	f009 fc48 	bl	801a204 <sys_arch_protect>
 8010974:	60f8      	str	r0, [r7, #12]
    MEM_STATS_INC(illegal);
    SYS_ARCH_UNPROTECT(lev);
 8010976:	68f8      	ldr	r0, [r7, #12]
 8010978:	f009 fc52 	bl	801a220 <sys_arch_unprotect>
    return rmem;
 801097c:	687b      	ldr	r3, [r7, #4]
 801097e:	e09a      	b.n	8010ab6 <mem_trim+0x1aa>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - SIZEOF_STRUCT_MEM);
 8010980:	687b      	ldr	r3, [r7, #4]
 8010982:	3b08      	subs	r3, #8
 8010984:	61fb      	str	r3, [r7, #28]
  /* ... and its offset pointer */
  ptr = (mem_size_t)((u8_t *)mem - ram);
 8010986:	69fb      	ldr	r3, [r7, #28]
 8010988:	4a4d      	ldr	r2, [pc, #308]	; (8010ac0 <mem_trim+0x1b4>)
 801098a:	6812      	ldr	r2, [r2, #0]
 801098c:	1a9b      	subs	r3, r3, r2
 801098e:	837b      	strh	r3, [r7, #26]

  size = mem->next - ptr - SIZEOF_STRUCT_MEM;
 8010990:	69fb      	ldr	r3, [r7, #28]
 8010992:	881a      	ldrh	r2, [r3, #0]
 8010994:	8b7b      	ldrh	r3, [r7, #26]
 8010996:	1ad3      	subs	r3, r2, r3
 8010998:	b29b      	uxth	r3, r3
 801099a:	3b08      	subs	r3, #8
 801099c:	833b      	strh	r3, [r7, #24]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 801099e:	887a      	ldrh	r2, [r7, #2]
 80109a0:	8b3b      	ldrh	r3, [r7, #24]
 80109a2:	429a      	cmp	r2, r3
 80109a4:	d906      	bls.n	80109b4 <mem_trim+0xa8>
 80109a6:	4b48      	ldr	r3, [pc, #288]	; (8010ac8 <mem_trim+0x1bc>)
 80109a8:	f240 2206 	movw	r2, #518	; 0x206
 80109ac:	4949      	ldr	r1, [pc, #292]	; (8010ad4 <mem_trim+0x1c8>)
 80109ae:	4848      	ldr	r0, [pc, #288]	; (8010ad0 <mem_trim+0x1c4>)
 80109b0:	f00a fa1e 	bl	801adf0 <iprintf>
  if (newsize > size) {
 80109b4:	887a      	ldrh	r2, [r7, #2]
 80109b6:	8b3b      	ldrh	r3, [r7, #24]
 80109b8:	429a      	cmp	r2, r3
 80109ba:	d901      	bls.n	80109c0 <mem_trim+0xb4>
    /* not supported */
    return NULL;
 80109bc:	2300      	movs	r3, #0
 80109be:	e07a      	b.n	8010ab6 <mem_trim+0x1aa>
  }
  if (newsize == size) {
 80109c0:	887a      	ldrh	r2, [r7, #2]
 80109c2:	8b3b      	ldrh	r3, [r7, #24]
 80109c4:	429a      	cmp	r2, r3
 80109c6:	d101      	bne.n	80109cc <mem_trim+0xc0>
    /* No change in size, simply return */
    return rmem;
 80109c8:	687b      	ldr	r3, [r7, #4]
 80109ca:	e074      	b.n	8010ab6 <mem_trim+0x1aa>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 80109cc:	4842      	ldr	r0, [pc, #264]	; (8010ad8 <mem_trim+0x1cc>)
 80109ce:	f009 fbd7 	bl	801a180 <sys_mutex_lock>

  mem2 = (struct mem *)(void *)&ram[mem->next];
 80109d2:	4b3b      	ldr	r3, [pc, #236]	; (8010ac0 <mem_trim+0x1b4>)
 80109d4:	681b      	ldr	r3, [r3, #0]
 80109d6:	69fa      	ldr	r2, [r7, #28]
 80109d8:	8812      	ldrh	r2, [r2, #0]
 80109da:	4413      	add	r3, r2
 80109dc:	617b      	str	r3, [r7, #20]
  if (mem2->used == 0) {
 80109de:	697b      	ldr	r3, [r7, #20]
 80109e0:	791b      	ldrb	r3, [r3, #4]
 80109e2:	2b00      	cmp	r3, #0
 80109e4:	d131      	bne.n	8010a4a <mem_trim+0x13e>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    /* remember the old next pointer */
    next = mem2->next;
 80109e6:	697b      	ldr	r3, [r7, #20]
 80109e8:	881b      	ldrh	r3, [r3, #0]
 80109ea:	823b      	strh	r3, [r7, #16]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = ptr + SIZEOF_STRUCT_MEM + newsize;
 80109ec:	8b7a      	ldrh	r2, [r7, #26]
 80109ee:	887b      	ldrh	r3, [r7, #2]
 80109f0:	4413      	add	r3, r2
 80109f2:	b29b      	uxth	r3, r3
 80109f4:	3308      	adds	r3, #8
 80109f6:	827b      	strh	r3, [r7, #18]
    if (lfree == mem2) {
 80109f8:	4b38      	ldr	r3, [pc, #224]	; (8010adc <mem_trim+0x1d0>)
 80109fa:	681b      	ldr	r3, [r3, #0]
 80109fc:	697a      	ldr	r2, [r7, #20]
 80109fe:	429a      	cmp	r2, r3
 8010a00:	d105      	bne.n	8010a0e <mem_trim+0x102>
      lfree = (struct mem *)(void *)&ram[ptr2];
 8010a02:	4b2f      	ldr	r3, [pc, #188]	; (8010ac0 <mem_trim+0x1b4>)
 8010a04:	681a      	ldr	r2, [r3, #0]
 8010a06:	8a7b      	ldrh	r3, [r7, #18]
 8010a08:	4413      	add	r3, r2
 8010a0a:	4a34      	ldr	r2, [pc, #208]	; (8010adc <mem_trim+0x1d0>)
 8010a0c:	6013      	str	r3, [r2, #0]
    }
    mem2 = (struct mem *)(void *)&ram[ptr2];
 8010a0e:	4b2c      	ldr	r3, [pc, #176]	; (8010ac0 <mem_trim+0x1b4>)
 8010a10:	681a      	ldr	r2, [r3, #0]
 8010a12:	8a7b      	ldrh	r3, [r7, #18]
 8010a14:	4413      	add	r3, r2
 8010a16:	617b      	str	r3, [r7, #20]
    mem2->used = 0;
 8010a18:	697b      	ldr	r3, [r7, #20]
 8010a1a:	2200      	movs	r2, #0
 8010a1c:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 8010a1e:	697b      	ldr	r3, [r7, #20]
 8010a20:	8a3a      	ldrh	r2, [r7, #16]
 8010a22:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 8010a24:	697b      	ldr	r3, [r7, #20]
 8010a26:	8b7a      	ldrh	r2, [r7, #26]
 8010a28:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 8010a2a:	69fb      	ldr	r3, [r7, #28]
 8010a2c:	8a7a      	ldrh	r2, [r7, #18]
 8010a2e:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8010a30:	697b      	ldr	r3, [r7, #20]
 8010a32:	881b      	ldrh	r3, [r3, #0]
 8010a34:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8010a38:	d039      	beq.n	8010aae <mem_trim+0x1a2>
      ((struct mem *)(void *)&ram[mem2->next])->prev = ptr2;
 8010a3a:	4b21      	ldr	r3, [pc, #132]	; (8010ac0 <mem_trim+0x1b4>)
 8010a3c:	681b      	ldr	r3, [r3, #0]
 8010a3e:	697a      	ldr	r2, [r7, #20]
 8010a40:	8812      	ldrh	r2, [r2, #0]
 8010a42:	4413      	add	r3, r2
 8010a44:	8a7a      	ldrh	r2, [r7, #18]
 8010a46:	805a      	strh	r2, [r3, #2]
 8010a48:	e031      	b.n	8010aae <mem_trim+0x1a2>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 8010a4a:	887b      	ldrh	r3, [r7, #2]
 8010a4c:	f103 0214 	add.w	r2, r3, #20
 8010a50:	8b3b      	ldrh	r3, [r7, #24]
 8010a52:	429a      	cmp	r2, r3
 8010a54:	d82b      	bhi.n	8010aae <mem_trim+0x1a2>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = ptr + SIZEOF_STRUCT_MEM + newsize;
 8010a56:	8b7a      	ldrh	r2, [r7, #26]
 8010a58:	887b      	ldrh	r3, [r7, #2]
 8010a5a:	4413      	add	r3, r2
 8010a5c:	b29b      	uxth	r3, r3
 8010a5e:	3308      	adds	r3, #8
 8010a60:	827b      	strh	r3, [r7, #18]
    mem2 = (struct mem *)(void *)&ram[ptr2];
 8010a62:	4b17      	ldr	r3, [pc, #92]	; (8010ac0 <mem_trim+0x1b4>)
 8010a64:	681a      	ldr	r2, [r3, #0]
 8010a66:	8a7b      	ldrh	r3, [r7, #18]
 8010a68:	4413      	add	r3, r2
 8010a6a:	617b      	str	r3, [r7, #20]
    if (mem2 < lfree) {
 8010a6c:	4b1b      	ldr	r3, [pc, #108]	; (8010adc <mem_trim+0x1d0>)
 8010a6e:	681b      	ldr	r3, [r3, #0]
 8010a70:	697a      	ldr	r2, [r7, #20]
 8010a72:	429a      	cmp	r2, r3
 8010a74:	d202      	bcs.n	8010a7c <mem_trim+0x170>
      lfree = mem2;
 8010a76:	4a19      	ldr	r2, [pc, #100]	; (8010adc <mem_trim+0x1d0>)
 8010a78:	697b      	ldr	r3, [r7, #20]
 8010a7a:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 8010a7c:	697b      	ldr	r3, [r7, #20]
 8010a7e:	2200      	movs	r2, #0
 8010a80:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 8010a82:	69fb      	ldr	r3, [r7, #28]
 8010a84:	881a      	ldrh	r2, [r3, #0]
 8010a86:	697b      	ldr	r3, [r7, #20]
 8010a88:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 8010a8a:	697b      	ldr	r3, [r7, #20]
 8010a8c:	8b7a      	ldrh	r2, [r7, #26]
 8010a8e:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 8010a90:	69fb      	ldr	r3, [r7, #28]
 8010a92:	8a7a      	ldrh	r2, [r7, #18]
 8010a94:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8010a96:	697b      	ldr	r3, [r7, #20]
 8010a98:	881b      	ldrh	r3, [r3, #0]
 8010a9a:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8010a9e:	d006      	beq.n	8010aae <mem_trim+0x1a2>
      ((struct mem *)(void *)&ram[mem2->next])->prev = ptr2;
 8010aa0:	4b07      	ldr	r3, [pc, #28]	; (8010ac0 <mem_trim+0x1b4>)
 8010aa2:	681b      	ldr	r3, [r3, #0]
 8010aa4:	697a      	ldr	r2, [r7, #20]
 8010aa6:	8812      	ldrh	r2, [r2, #0]
 8010aa8:	4413      	add	r3, r2
 8010aaa:	8a7a      	ldrh	r2, [r7, #18]
 8010aac:	805a      	strh	r2, [r3, #2]
    -> the remaining space stays unused since it is too small
  } */
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 8010aae:	480a      	ldr	r0, [pc, #40]	; (8010ad8 <mem_trim+0x1cc>)
 8010ab0:	f009 fb75 	bl	801a19e <sys_mutex_unlock>
  return rmem;
 8010ab4:	687b      	ldr	r3, [r7, #4]
}
 8010ab6:	4618      	mov	r0, r3
 8010ab8:	3720      	adds	r7, #32
 8010aba:	46bd      	mov	sp, r7
 8010abc:	bd80      	pop	{r7, pc}
 8010abe:	bf00      	nop
 8010ac0:	200041c0 	.word	0x200041c0
 8010ac4:	200041c4 	.word	0x200041c4
 8010ac8:	0801ca10 	.word	0x0801ca10
 8010acc:	0801cb50 	.word	0x0801cb50
 8010ad0:	0801ca58 	.word	0x0801ca58
 8010ad4:	0801cb68 	.word	0x0801cb68
 8010ad8:	200041cc 	.word	0x200041cc
 8010adc:	200041c8 	.word	0x200041c8

08010ae0 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size)
{
 8010ae0:	b580      	push	{r7, lr}
 8010ae2:	b088      	sub	sp, #32
 8010ae4:	af00      	add	r7, sp, #0
 8010ae6:	4603      	mov	r3, r0
 8010ae8:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size == 0) {
 8010aea:	88fb      	ldrh	r3, [r7, #6]
 8010aec:	2b00      	cmp	r3, #0
 8010aee:	d101      	bne.n	8010af4 <mem_malloc+0x14>
    return NULL;
 8010af0:	2300      	movs	r3, #0
 8010af2:	e0d1      	b.n	8010c98 <mem_malloc+0x1b8>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = LWIP_MEM_ALIGN_SIZE(size);
 8010af4:	88fb      	ldrh	r3, [r7, #6]
 8010af6:	3303      	adds	r3, #3
 8010af8:	b29b      	uxth	r3, r3
 8010afa:	f023 0303 	bic.w	r3, r3, #3
 8010afe:	80fb      	strh	r3, [r7, #6]

  if (size < MIN_SIZE_ALIGNED) {
 8010b00:	88fb      	ldrh	r3, [r7, #6]
 8010b02:	2b0b      	cmp	r3, #11
 8010b04:	d801      	bhi.n	8010b0a <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 8010b06:	230c      	movs	r3, #12
 8010b08:	80fb      	strh	r3, [r7, #6]
  }

  if (size > MEM_SIZE_ALIGNED) {
 8010b0a:	88fb      	ldrh	r3, [r7, #6]
 8010b0c:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8010b10:	d901      	bls.n	8010b16 <mem_malloc+0x36>
    return NULL;
 8010b12:	2300      	movs	r3, #0
 8010b14:	e0c0      	b.n	8010c98 <mem_malloc+0x1b8>
  }

  /* protect the heap from concurrent access */
  sys_mutex_lock(&mem_mutex);
 8010b16:	4862      	ldr	r0, [pc, #392]	; (8010ca0 <mem_malloc+0x1c0>)
 8010b18:	f009 fb32 	bl	801a180 <sys_mutex_lock>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = (mem_size_t)((u8_t *)lfree - ram); ptr < MEM_SIZE_ALIGNED - size;
 8010b1c:	4b61      	ldr	r3, [pc, #388]	; (8010ca4 <mem_malloc+0x1c4>)
 8010b1e:	681b      	ldr	r3, [r3, #0]
 8010b20:	461a      	mov	r2, r3
 8010b22:	4b61      	ldr	r3, [pc, #388]	; (8010ca8 <mem_malloc+0x1c8>)
 8010b24:	681b      	ldr	r3, [r3, #0]
 8010b26:	1ad3      	subs	r3, r2, r3
 8010b28:	83fb      	strh	r3, [r7, #30]
 8010b2a:	e0aa      	b.n	8010c82 <mem_malloc+0x1a2>
         ptr = ((struct mem *)(void *)&ram[ptr])->next) {
      mem = (struct mem *)(void *)&ram[ptr];
 8010b2c:	4b5e      	ldr	r3, [pc, #376]	; (8010ca8 <mem_malloc+0x1c8>)
 8010b2e:	681a      	ldr	r2, [r3, #0]
 8010b30:	8bfb      	ldrh	r3, [r7, #30]
 8010b32:	4413      	add	r3, r2
 8010b34:	617b      	str	r3, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 8010b36:	697b      	ldr	r3, [r7, #20]
 8010b38:	791b      	ldrb	r3, [r3, #4]
 8010b3a:	2b00      	cmp	r3, #0
 8010b3c:	f040 809b 	bne.w	8010c76 <mem_malloc+0x196>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 8010b40:	697b      	ldr	r3, [r7, #20]
 8010b42:	881b      	ldrh	r3, [r3, #0]
 8010b44:	461a      	mov	r2, r3
 8010b46:	8bfb      	ldrh	r3, [r7, #30]
 8010b48:	1ad3      	subs	r3, r2, r3
 8010b4a:	f1a3 0208 	sub.w	r2, r3, #8
 8010b4e:	88fb      	ldrh	r3, [r7, #6]
      if ((!mem->used) &&
 8010b50:	429a      	cmp	r2, r3
 8010b52:	f0c0 8090 	bcc.w	8010c76 <mem_malloc+0x196>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 8010b56:	697b      	ldr	r3, [r7, #20]
 8010b58:	881b      	ldrh	r3, [r3, #0]
 8010b5a:	461a      	mov	r2, r3
 8010b5c:	8bfb      	ldrh	r3, [r7, #30]
 8010b5e:	1ad3      	subs	r3, r2, r3
 8010b60:	f1a3 0208 	sub.w	r2, r3, #8
 8010b64:	88fb      	ldrh	r3, [r7, #6]
 8010b66:	3314      	adds	r3, #20
 8010b68:	429a      	cmp	r2, r3
 8010b6a:	d327      	bcc.n	8010bbc <mem_malloc+0xdc>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = ptr + SIZEOF_STRUCT_MEM + size;
 8010b6c:	8bfa      	ldrh	r2, [r7, #30]
 8010b6e:	88fb      	ldrh	r3, [r7, #6]
 8010b70:	4413      	add	r3, r2
 8010b72:	b29b      	uxth	r3, r3
 8010b74:	3308      	adds	r3, #8
 8010b76:	827b      	strh	r3, [r7, #18]
          /* create mem2 struct */
          mem2 = (struct mem *)(void *)&ram[ptr2];
 8010b78:	4b4b      	ldr	r3, [pc, #300]	; (8010ca8 <mem_malloc+0x1c8>)
 8010b7a:	681a      	ldr	r2, [r3, #0]
 8010b7c:	8a7b      	ldrh	r3, [r7, #18]
 8010b7e:	4413      	add	r3, r2
 8010b80:	60fb      	str	r3, [r7, #12]
          mem2->used = 0;
 8010b82:	68fb      	ldr	r3, [r7, #12]
 8010b84:	2200      	movs	r2, #0
 8010b86:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 8010b88:	697b      	ldr	r3, [r7, #20]
 8010b8a:	881a      	ldrh	r2, [r3, #0]
 8010b8c:	68fb      	ldr	r3, [r7, #12]
 8010b8e:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 8010b90:	68fb      	ldr	r3, [r7, #12]
 8010b92:	8bfa      	ldrh	r2, [r7, #30]
 8010b94:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 8010b96:	697b      	ldr	r3, [r7, #20]
 8010b98:	8a7a      	ldrh	r2, [r7, #18]
 8010b9a:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 8010b9c:	697b      	ldr	r3, [r7, #20]
 8010b9e:	2201      	movs	r2, #1
 8010ba0:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 8010ba2:	68fb      	ldr	r3, [r7, #12]
 8010ba4:	881b      	ldrh	r3, [r3, #0]
 8010ba6:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8010baa:	d00a      	beq.n	8010bc2 <mem_malloc+0xe2>
            ((struct mem *)(void *)&ram[mem2->next])->prev = ptr2;
 8010bac:	4b3e      	ldr	r3, [pc, #248]	; (8010ca8 <mem_malloc+0x1c8>)
 8010bae:	681b      	ldr	r3, [r3, #0]
 8010bb0:	68fa      	ldr	r2, [r7, #12]
 8010bb2:	8812      	ldrh	r2, [r2, #0]
 8010bb4:	4413      	add	r3, r2
 8010bb6:	8a7a      	ldrh	r2, [r7, #18]
 8010bb8:	805a      	strh	r2, [r3, #2]
 8010bba:	e002      	b.n	8010bc2 <mem_malloc+0xe2>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 8010bbc:	697b      	ldr	r3, [r7, #20]
 8010bbe:	2201      	movs	r2, #1
 8010bc0:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - (mem_size_t)((u8_t *)mem - ram));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 8010bc2:	4b38      	ldr	r3, [pc, #224]	; (8010ca4 <mem_malloc+0x1c4>)
 8010bc4:	681b      	ldr	r3, [r3, #0]
 8010bc6:	697a      	ldr	r2, [r7, #20]
 8010bc8:	429a      	cmp	r2, r3
 8010bca:	d127      	bne.n	8010c1c <mem_malloc+0x13c>
          struct mem *cur = lfree;
 8010bcc:	4b35      	ldr	r3, [pc, #212]	; (8010ca4 <mem_malloc+0x1c4>)
 8010bce:	681b      	ldr	r3, [r3, #0]
 8010bd0:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 8010bd2:	e005      	b.n	8010be0 <mem_malloc+0x100>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = (struct mem *)(void *)&ram[cur->next];
 8010bd4:	4b34      	ldr	r3, [pc, #208]	; (8010ca8 <mem_malloc+0x1c8>)
 8010bd6:	681b      	ldr	r3, [r3, #0]
 8010bd8:	69ba      	ldr	r2, [r7, #24]
 8010bda:	8812      	ldrh	r2, [r2, #0]
 8010bdc:	4413      	add	r3, r2
 8010bde:	61bb      	str	r3, [r7, #24]
          while (cur->used && cur != ram_end) {
 8010be0:	69bb      	ldr	r3, [r7, #24]
 8010be2:	791b      	ldrb	r3, [r3, #4]
 8010be4:	2b00      	cmp	r3, #0
 8010be6:	d004      	beq.n	8010bf2 <mem_malloc+0x112>
 8010be8:	4b30      	ldr	r3, [pc, #192]	; (8010cac <mem_malloc+0x1cc>)
 8010bea:	681b      	ldr	r3, [r3, #0]
 8010bec:	69ba      	ldr	r2, [r7, #24]
 8010bee:	429a      	cmp	r2, r3
 8010bf0:	d1f0      	bne.n	8010bd4 <mem_malloc+0xf4>
          }
          lfree = cur;
 8010bf2:	4a2c      	ldr	r2, [pc, #176]	; (8010ca4 <mem_malloc+0x1c4>)
 8010bf4:	69bb      	ldr	r3, [r7, #24]
 8010bf6:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 8010bf8:	4b2a      	ldr	r3, [pc, #168]	; (8010ca4 <mem_malloc+0x1c4>)
 8010bfa:	681a      	ldr	r2, [r3, #0]
 8010bfc:	4b2b      	ldr	r3, [pc, #172]	; (8010cac <mem_malloc+0x1cc>)
 8010bfe:	681b      	ldr	r3, [r3, #0]
 8010c00:	429a      	cmp	r2, r3
 8010c02:	d00b      	beq.n	8010c1c <mem_malloc+0x13c>
 8010c04:	4b27      	ldr	r3, [pc, #156]	; (8010ca4 <mem_malloc+0x1c4>)
 8010c06:	681b      	ldr	r3, [r3, #0]
 8010c08:	791b      	ldrb	r3, [r3, #4]
 8010c0a:	2b00      	cmp	r3, #0
 8010c0c:	d006      	beq.n	8010c1c <mem_malloc+0x13c>
 8010c0e:	4b28      	ldr	r3, [pc, #160]	; (8010cb0 <mem_malloc+0x1d0>)
 8010c10:	f240 22cf 	movw	r2, #719	; 0x2cf
 8010c14:	4927      	ldr	r1, [pc, #156]	; (8010cb4 <mem_malloc+0x1d4>)
 8010c16:	4828      	ldr	r0, [pc, #160]	; (8010cb8 <mem_malloc+0x1d8>)
 8010c18:	f00a f8ea 	bl	801adf0 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
 8010c1c:	4820      	ldr	r0, [pc, #128]	; (8010ca0 <mem_malloc+0x1c0>)
 8010c1e:	f009 fabe 	bl	801a19e <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 8010c22:	88fa      	ldrh	r2, [r7, #6]
 8010c24:	697b      	ldr	r3, [r7, #20]
 8010c26:	4413      	add	r3, r2
 8010c28:	3308      	adds	r3, #8
 8010c2a:	4a20      	ldr	r2, [pc, #128]	; (8010cac <mem_malloc+0x1cc>)
 8010c2c:	6812      	ldr	r2, [r2, #0]
 8010c2e:	4293      	cmp	r3, r2
 8010c30:	d906      	bls.n	8010c40 <mem_malloc+0x160>
 8010c32:	4b1f      	ldr	r3, [pc, #124]	; (8010cb0 <mem_malloc+0x1d0>)
 8010c34:	f44f 7235 	mov.w	r2, #724	; 0x2d4
 8010c38:	4920      	ldr	r1, [pc, #128]	; (8010cbc <mem_malloc+0x1dc>)
 8010c3a:	481f      	ldr	r0, [pc, #124]	; (8010cb8 <mem_malloc+0x1d8>)
 8010c3c:	f00a f8d8 	bl	801adf0 <iprintf>
         (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 8010c40:	697b      	ldr	r3, [r7, #20]
 8010c42:	f003 0303 	and.w	r3, r3, #3
 8010c46:	2b00      	cmp	r3, #0
 8010c48:	d006      	beq.n	8010c58 <mem_malloc+0x178>
 8010c4a:	4b19      	ldr	r3, [pc, #100]	; (8010cb0 <mem_malloc+0x1d0>)
 8010c4c:	f240 22d6 	movw	r2, #726	; 0x2d6
 8010c50:	491b      	ldr	r1, [pc, #108]	; (8010cc0 <mem_malloc+0x1e0>)
 8010c52:	4819      	ldr	r0, [pc, #100]	; (8010cb8 <mem_malloc+0x1d8>)
 8010c54:	f00a f8cc 	bl	801adf0 <iprintf>
         ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 8010c58:	697b      	ldr	r3, [r7, #20]
 8010c5a:	f003 0303 	and.w	r3, r3, #3
 8010c5e:	2b00      	cmp	r3, #0
 8010c60:	d006      	beq.n	8010c70 <mem_malloc+0x190>
 8010c62:	4b13      	ldr	r3, [pc, #76]	; (8010cb0 <mem_malloc+0x1d0>)
 8010c64:	f44f 7236 	mov.w	r2, #728	; 0x2d8
 8010c68:	4916      	ldr	r1, [pc, #88]	; (8010cc4 <mem_malloc+0x1e4>)
 8010c6a:	4813      	ldr	r0, [pc, #76]	; (8010cb8 <mem_malloc+0x1d8>)
 8010c6c:	f00a f8c0 	bl	801adf0 <iprintf>
          (((mem_ptr_t)mem) & (MEM_ALIGNMENT-1)) == 0);

        return (u8_t *)mem + SIZEOF_STRUCT_MEM;
 8010c70:	697b      	ldr	r3, [r7, #20]
 8010c72:	3308      	adds	r3, #8
 8010c74:	e010      	b.n	8010c98 <mem_malloc+0x1b8>
         ptr = ((struct mem *)(void *)&ram[ptr])->next) {
 8010c76:	4b0c      	ldr	r3, [pc, #48]	; (8010ca8 <mem_malloc+0x1c8>)
 8010c78:	681a      	ldr	r2, [r3, #0]
 8010c7a:	8bfb      	ldrh	r3, [r7, #30]
 8010c7c:	4413      	add	r3, r2
 8010c7e:	881b      	ldrh	r3, [r3, #0]
 8010c80:	83fb      	strh	r3, [r7, #30]
    for (ptr = (mem_size_t)((u8_t *)lfree - ram); ptr < MEM_SIZE_ALIGNED - size;
 8010c82:	8bfa      	ldrh	r2, [r7, #30]
 8010c84:	88fb      	ldrh	r3, [r7, #6]
 8010c86:	f5c3 63c8 	rsb	r3, r3, #1600	; 0x640
 8010c8a:	429a      	cmp	r2, r3
 8010c8c:	f4ff af4e 	bcc.w	8010b2c <mem_malloc+0x4c>
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
 8010c90:	4803      	ldr	r0, [pc, #12]	; (8010ca0 <mem_malloc+0x1c0>)
 8010c92:	f009 fa84 	bl	801a19e <sys_mutex_unlock>
  return NULL;
 8010c96:	2300      	movs	r3, #0
}
 8010c98:	4618      	mov	r0, r3
 8010c9a:	3720      	adds	r7, #32
 8010c9c:	46bd      	mov	sp, r7
 8010c9e:	bd80      	pop	{r7, pc}
 8010ca0:	200041cc 	.word	0x200041cc
 8010ca4:	200041c8 	.word	0x200041c8
 8010ca8:	200041c0 	.word	0x200041c0
 8010cac:	200041c4 	.word	0x200041c4
 8010cb0:	0801ca10 	.word	0x0801ca10
 8010cb4:	0801cb88 	.word	0x0801cb88
 8010cb8:	0801ca58 	.word	0x0801ca58
 8010cbc:	0801cba4 	.word	0x0801cba4
 8010cc0:	0801cbd4 	.word	0x0801cbd4
 8010cc4:	0801cc04 	.word	0x0801cc04

08010cc8 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 8010cc8:	b480      	push	{r7}
 8010cca:	b085      	sub	sp, #20
 8010ccc:	af00      	add	r7, sp, #0
 8010cce:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 8010cd0:	687b      	ldr	r3, [r7, #4]
 8010cd2:	689b      	ldr	r3, [r3, #8]
 8010cd4:	2200      	movs	r2, #0
 8010cd6:	601a      	str	r2, [r3, #0]
  memp = (struct memp*)LWIP_MEM_ALIGN(desc->base);
 8010cd8:	687b      	ldr	r3, [r7, #4]
 8010cda:	685b      	ldr	r3, [r3, #4]
 8010cdc:	3303      	adds	r3, #3
 8010cde:	f023 0303 	bic.w	r3, r3, #3
 8010ce2:	60bb      	str	r3, [r7, #8]
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 8010ce4:	2300      	movs	r3, #0
 8010ce6:	60fb      	str	r3, [r7, #12]
 8010ce8:	e011      	b.n	8010d0e <memp_init_pool+0x46>
    memp->next = *desc->tab;
 8010cea:	687b      	ldr	r3, [r7, #4]
 8010cec:	689b      	ldr	r3, [r3, #8]
 8010cee:	681a      	ldr	r2, [r3, #0]
 8010cf0:	68bb      	ldr	r3, [r7, #8]
 8010cf2:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 8010cf4:	687b      	ldr	r3, [r7, #4]
 8010cf6:	689b      	ldr	r3, [r3, #8]
 8010cf8:	68ba      	ldr	r2, [r7, #8]
 8010cfa:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
   /* cast through void* to get rid of alignment warnings */
   memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 8010cfc:	687b      	ldr	r3, [r7, #4]
 8010cfe:	881b      	ldrh	r3, [r3, #0]
 8010d00:	461a      	mov	r2, r3
 8010d02:	68bb      	ldr	r3, [r7, #8]
 8010d04:	4413      	add	r3, r2
 8010d06:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 8010d08:	68fb      	ldr	r3, [r7, #12]
 8010d0a:	3301      	adds	r3, #1
 8010d0c:	60fb      	str	r3, [r7, #12]
 8010d0e:	687b      	ldr	r3, [r7, #4]
 8010d10:	885b      	ldrh	r3, [r3, #2]
 8010d12:	461a      	mov	r2, r3
 8010d14:	68fb      	ldr	r3, [r7, #12]
 8010d16:	4293      	cmp	r3, r2
 8010d18:	dbe7      	blt.n	8010cea <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 8010d1a:	bf00      	nop
 8010d1c:	3714      	adds	r7, #20
 8010d1e:	46bd      	mov	sp, r7
 8010d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d24:	4770      	bx	lr
	...

08010d28 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 8010d28:	b580      	push	{r7, lr}
 8010d2a:	b082      	sub	sp, #8
 8010d2c:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8010d2e:	2300      	movs	r3, #0
 8010d30:	80fb      	strh	r3, [r7, #6]
 8010d32:	e009      	b.n	8010d48 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 8010d34:	88fb      	ldrh	r3, [r7, #6]
 8010d36:	4a08      	ldr	r2, [pc, #32]	; (8010d58 <memp_init+0x30>)
 8010d38:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010d3c:	4618      	mov	r0, r3
 8010d3e:	f7ff ffc3 	bl	8010cc8 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8010d42:	88fb      	ldrh	r3, [r7, #6]
 8010d44:	3301      	adds	r3, #1
 8010d46:	80fb      	strh	r3, [r7, #6]
 8010d48:	88fb      	ldrh	r3, [r7, #6]
 8010d4a:	2b0c      	cmp	r3, #12
 8010d4c:	d9f2      	bls.n	8010d34 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 8010d4e:	bf00      	nop
 8010d50:	3708      	adds	r7, #8
 8010d52:	46bd      	mov	sp, r7
 8010d54:	bd80      	pop	{r7, pc}
 8010d56:	bf00      	nop
 8010d58:	0801e78c 	.word	0x0801e78c

08010d5c <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char* file, const int line)
#endif
{
 8010d5c:	b580      	push	{r7, lr}
 8010d5e:	b084      	sub	sp, #16
 8010d60:	af00      	add	r7, sp, #0
 8010d62:	6078      	str	r0, [r7, #4]

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
 8010d64:	f009 fa4e 	bl	801a204 <sys_arch_protect>
 8010d68:	60f8      	str	r0, [r7, #12]

  memp = *desc->tab;
 8010d6a:	687b      	ldr	r3, [r7, #4]
 8010d6c:	689b      	ldr	r3, [r3, #8]
 8010d6e:	681b      	ldr	r3, [r3, #0]
 8010d70:	60bb      	str	r3, [r7, #8]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 8010d72:	68bb      	ldr	r3, [r7, #8]
 8010d74:	2b00      	cmp	r3, #0
 8010d76:	d015      	beq.n	8010da4 <do_memp_malloc_pool+0x48>
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element_overflow(memp, desc);
    memp_overflow_check_element_underflow(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 8010d78:	687b      	ldr	r3, [r7, #4]
 8010d7a:	689b      	ldr	r3, [r3, #8]
 8010d7c:	68ba      	ldr	r2, [r7, #8]
 8010d7e:	6812      	ldr	r2, [r2, #0]
 8010d80:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 8010d82:	68bb      	ldr	r3, [r7, #8]
 8010d84:	f003 0303 	and.w	r3, r3, #3
 8010d88:	2b00      	cmp	r3, #0
 8010d8a:	d006      	beq.n	8010d9a <do_memp_malloc_pool+0x3e>
 8010d8c:	4b09      	ldr	r3, [pc, #36]	; (8010db4 <do_memp_malloc_pool+0x58>)
 8010d8e:	f240 1249 	movw	r2, #329	; 0x149
 8010d92:	4909      	ldr	r1, [pc, #36]	; (8010db8 <do_memp_malloc_pool+0x5c>)
 8010d94:	4809      	ldr	r0, [pc, #36]	; (8010dbc <do_memp_malloc_pool+0x60>)
 8010d96:	f00a f82b 	bl	801adf0 <iprintf>
    desc->stats->used++;
    if (desc->stats->used > desc->stats->max) {
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
 8010d9a:	68f8      	ldr	r0, [r7, #12]
 8010d9c:	f009 fa40 	bl	801a220 <sys_arch_unprotect>
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t*)memp + MEMP_SIZE);
 8010da0:	68bb      	ldr	r3, [r7, #8]
 8010da2:	e003      	b.n	8010dac <do_memp_malloc_pool+0x50>
#if MEMP_STATS
    desc->stats->err++;
#endif
  }

  SYS_ARCH_UNPROTECT(old_level);
 8010da4:	68f8      	ldr	r0, [r7, #12]
 8010da6:	f009 fa3b 	bl	801a220 <sys_arch_unprotect>
  return NULL;
 8010daa:	2300      	movs	r3, #0
}
 8010dac:	4618      	mov	r0, r3
 8010dae:	3710      	adds	r7, #16
 8010db0:	46bd      	mov	sp, r7
 8010db2:	bd80      	pop	{r7, pc}
 8010db4:	0801cc28 	.word	0x0801cc28
 8010db8:	0801cc58 	.word	0x0801cc58
 8010dbc:	0801cc7c 	.word	0x0801cc7c

08010dc0 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char* file, const int line)
#endif
{
 8010dc0:	b580      	push	{r7, lr}
 8010dc2:	b084      	sub	sp, #16
 8010dc4:	af00      	add	r7, sp, #0
 8010dc6:	4603      	mov	r3, r0
 8010dc8:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 8010dca:	79fb      	ldrb	r3, [r7, #7]
 8010dcc:	2b0c      	cmp	r3, #12
 8010dce:	d908      	bls.n	8010de2 <memp_malloc+0x22>
 8010dd0:	4b0a      	ldr	r3, [pc, #40]	; (8010dfc <memp_malloc+0x3c>)
 8010dd2:	f240 1287 	movw	r2, #391	; 0x187
 8010dd6:	490a      	ldr	r1, [pc, #40]	; (8010e00 <memp_malloc+0x40>)
 8010dd8:	480a      	ldr	r0, [pc, #40]	; (8010e04 <memp_malloc+0x44>)
 8010dda:	f00a f809 	bl	801adf0 <iprintf>
 8010dde:	2300      	movs	r3, #0
 8010de0:	e008      	b.n	8010df4 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 8010de2:	79fb      	ldrb	r3, [r7, #7]
 8010de4:	4a08      	ldr	r2, [pc, #32]	; (8010e08 <memp_malloc+0x48>)
 8010de6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010dea:	4618      	mov	r0, r3
 8010dec:	f7ff ffb6 	bl	8010d5c <do_memp_malloc_pool>
 8010df0:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 8010df2:	68fb      	ldr	r3, [r7, #12]
}
 8010df4:	4618      	mov	r0, r3
 8010df6:	3710      	adds	r7, #16
 8010df8:	46bd      	mov	sp, r7
 8010dfa:	bd80      	pop	{r7, pc}
 8010dfc:	0801cc28 	.word	0x0801cc28
 8010e00:	0801ccb8 	.word	0x0801ccb8
 8010e04:	0801cc7c 	.word	0x0801cc7c
 8010e08:	0801e78c 	.word	0x0801e78c

08010e0c <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc* desc, void *mem)
{
 8010e0c:	b580      	push	{r7, lr}
 8010e0e:	b084      	sub	sp, #16
 8010e10:	af00      	add	r7, sp, #0
 8010e12:	6078      	str	r0, [r7, #4]
 8010e14:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 8010e16:	683b      	ldr	r3, [r7, #0]
 8010e18:	f003 0303 	and.w	r3, r3, #3
 8010e1c:	2b00      	cmp	r3, #0
 8010e1e:	d006      	beq.n	8010e2e <do_memp_free_pool+0x22>
 8010e20:	4b0d      	ldr	r3, [pc, #52]	; (8010e58 <do_memp_free_pool+0x4c>)
 8010e22:	f240 129d 	movw	r2, #413	; 0x19d
 8010e26:	490d      	ldr	r1, [pc, #52]	; (8010e5c <do_memp_free_pool+0x50>)
 8010e28:	480d      	ldr	r0, [pc, #52]	; (8010e60 <do_memp_free_pool+0x54>)
 8010e2a:	f009 ffe1 	bl	801adf0 <iprintf>
                ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t*)mem - MEMP_SIZE);
 8010e2e:	683b      	ldr	r3, [r7, #0]
 8010e30:	60fb      	str	r3, [r7, #12]

  SYS_ARCH_PROTECT(old_level);
 8010e32:	f009 f9e7 	bl	801a204 <sys_arch_protect>
 8010e36:	60b8      	str	r0, [r7, #8]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 8010e38:	687b      	ldr	r3, [r7, #4]
 8010e3a:	689b      	ldr	r3, [r3, #8]
 8010e3c:	681a      	ldr	r2, [r3, #0]
 8010e3e:	68fb      	ldr	r3, [r7, #12]
 8010e40:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 8010e42:	687b      	ldr	r3, [r7, #4]
 8010e44:	689b      	ldr	r3, [r3, #8]
 8010e46:	68fa      	ldr	r2, [r7, #12]
 8010e48:	601a      	str	r2, [r3, #0]

#if MEMP_SANITY_CHECK
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
 8010e4a:	68b8      	ldr	r0, [r7, #8]
 8010e4c:	f009 f9e8 	bl	801a220 <sys_arch_unprotect>
#endif /* !MEMP_MEM_MALLOC */
}
 8010e50:	bf00      	nop
 8010e52:	3710      	adds	r7, #16
 8010e54:	46bd      	mov	sp, r7
 8010e56:	bd80      	pop	{r7, pc}
 8010e58:	0801cc28 	.word	0x0801cc28
 8010e5c:	0801ccd8 	.word	0x0801ccd8
 8010e60:	0801cc7c 	.word	0x0801cc7c

08010e64 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 8010e64:	b580      	push	{r7, lr}
 8010e66:	b082      	sub	sp, #8
 8010e68:	af00      	add	r7, sp, #0
 8010e6a:	4603      	mov	r3, r0
 8010e6c:	6039      	str	r1, [r7, #0]
 8010e6e:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 8010e70:	79fb      	ldrb	r3, [r7, #7]
 8010e72:	2b0c      	cmp	r3, #12
 8010e74:	d907      	bls.n	8010e86 <memp_free+0x22>
 8010e76:	4b0c      	ldr	r3, [pc, #48]	; (8010ea8 <memp_free+0x44>)
 8010e78:	f240 12db 	movw	r2, #475	; 0x1db
 8010e7c:	490b      	ldr	r1, [pc, #44]	; (8010eac <memp_free+0x48>)
 8010e7e:	480c      	ldr	r0, [pc, #48]	; (8010eb0 <memp_free+0x4c>)
 8010e80:	f009 ffb6 	bl	801adf0 <iprintf>
 8010e84:	e00c      	b.n	8010ea0 <memp_free+0x3c>

  if (mem == NULL) {
 8010e86:	683b      	ldr	r3, [r7, #0]
 8010e88:	2b00      	cmp	r3, #0
 8010e8a:	d008      	beq.n	8010e9e <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 8010e8c:	79fb      	ldrb	r3, [r7, #7]
 8010e8e:	4a09      	ldr	r2, [pc, #36]	; (8010eb4 <memp_free+0x50>)
 8010e90:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010e94:	6839      	ldr	r1, [r7, #0]
 8010e96:	4618      	mov	r0, r3
 8010e98:	f7ff ffb8 	bl	8010e0c <do_memp_free_pool>
 8010e9c:	e000      	b.n	8010ea0 <memp_free+0x3c>
    return;
 8010e9e:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 8010ea0:	3708      	adds	r7, #8
 8010ea2:	46bd      	mov	sp, r7
 8010ea4:	bd80      	pop	{r7, pc}
 8010ea6:	bf00      	nop
 8010ea8:	0801cc28 	.word	0x0801cc28
 8010eac:	0801ccf8 	.word	0x0801ccf8
 8010eb0:	0801cc7c 	.word	0x0801cc7c
 8010eb4:	0801e78c 	.word	0x0801e78c

08010eb8 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 8010eb8:	b480      	push	{r7}
 8010eba:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 8010ebc:	bf00      	nop
 8010ebe:	46bd      	mov	sp, r7
 8010ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ec4:	4770      	bx	lr
	...

08010ec8 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 8010ec8:	b580      	push	{r7, lr}
 8010eca:	b084      	sub	sp, #16
 8010ecc:	af00      	add	r7, sp, #0
 8010ece:	60f8      	str	r0, [r7, #12]
 8010ed0:	60b9      	str	r1, [r7, #8]
 8010ed2:	607a      	str	r2, [r7, #4]
 8010ed4:	603b      	str	r3, [r7, #0]
#if LWIP_IPV6
  s8_t i;
#endif

  LWIP_ASSERT("No init function given", init != NULL);
 8010ed6:	69fb      	ldr	r3, [r7, #28]
 8010ed8:	2b00      	cmp	r3, #0
 8010eda:	d105      	bne.n	8010ee8 <netif_add+0x20>
 8010edc:	4b1f      	ldr	r3, [pc, #124]	; (8010f5c <netif_add+0x94>)
 8010ede:	22fb      	movs	r2, #251	; 0xfb
 8010ee0:	491f      	ldr	r1, [pc, #124]	; (8010f60 <netif_add+0x98>)
 8010ee2:	4820      	ldr	r0, [pc, #128]	; (8010f64 <netif_add+0x9c>)
 8010ee4:	f009 ff84 	bl	801adf0 <iprintf>

  /* reset new interface configuration state */
#if LWIP_IPV4
  ip_addr_set_zero_ip4(&netif->ip_addr);
 8010ee8:	68fb      	ldr	r3, [r7, #12]
 8010eea:	2200      	movs	r2, #0
 8010eec:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 8010eee:	68fb      	ldr	r3, [r7, #12]
 8010ef0:	2200      	movs	r2, #0
 8010ef2:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 8010ef4:	68fb      	ldr	r3, [r7, #12]
 8010ef6:	2200      	movs	r2, #0
 8010ef8:	60da      	str	r2, [r3, #12]
    netif->ip6_addr_state[i] = IP6_ADDR_INVALID;
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->flags = 0;
 8010efa:	68fb      	ldr	r3, [r7, #12]
 8010efc:	2200      	movs	r2, #0
 8010efe:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
#if LWIP_IPV6_AUTOCONFIG
  /* IPv6 address autoconfiguration not enabled by default */
  netif->ip6_autoconfig_enabled = 0;
#endif /* LWIP_IPV6_AUTOCONFIG */
#if LWIP_IPV6_SEND_ROUTER_SOLICIT
  netif->rs_count = LWIP_ND6_MAX_MULTICAST_SOLICIT;
 8010f02:	68fb      	ldr	r3, [r7, #12]
 8010f04:	2203      	movs	r2, #3
 8010f06:	f883 2020 	strb.w	r2, [r3, #32]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 8010f0a:	68fb      	ldr	r3, [r7, #12]
 8010f0c:	69ba      	ldr	r2, [r7, #24]
 8010f0e:	61da      	str	r2, [r3, #28]
  netif->num = netif_num++;
 8010f10:	4b15      	ldr	r3, [pc, #84]	; (8010f68 <netif_add+0xa0>)
 8010f12:	781b      	ldrb	r3, [r3, #0]
 8010f14:	1c5a      	adds	r2, r3, #1
 8010f16:	b2d1      	uxtb	r1, r2
 8010f18:	4a13      	ldr	r2, [pc, #76]	; (8010f68 <netif_add+0xa0>)
 8010f1a:	7011      	strb	r1, [r2, #0]
 8010f1c:	68fa      	ldr	r2, [r7, #12]
 8010f1e:	f882 3034 	strb.w	r3, [r2, #52]	; 0x34
  netif->input = input;
 8010f22:	68fb      	ldr	r3, [r7, #12]
 8010f24:	6a3a      	ldr	r2, [r7, #32]
 8010f26:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 8010f28:	683b      	ldr	r3, [r7, #0]
 8010f2a:	687a      	ldr	r2, [r7, #4]
 8010f2c:	68b9      	ldr	r1, [r7, #8]
 8010f2e:	68f8      	ldr	r0, [r7, #12]
 8010f30:	f000 f81e 	bl	8010f70 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 8010f34:	69fb      	ldr	r3, [r7, #28]
 8010f36:	68f8      	ldr	r0, [r7, #12]
 8010f38:	4798      	blx	r3
 8010f3a:	4603      	mov	r3, r0
 8010f3c:	2b00      	cmp	r3, #0
 8010f3e:	d001      	beq.n	8010f44 <netif_add+0x7c>
    return NULL;
 8010f40:	2300      	movs	r3, #0
 8010f42:	e007      	b.n	8010f54 <netif_add+0x8c>
  }

  /* add this netif to the list */
  netif->next = netif_list;
 8010f44:	4b09      	ldr	r3, [pc, #36]	; (8010f6c <netif_add+0xa4>)
 8010f46:	681a      	ldr	r2, [r3, #0]
 8010f48:	68fb      	ldr	r3, [r7, #12]
 8010f4a:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 8010f4c:	4a07      	ldr	r2, [pc, #28]	; (8010f6c <netif_add+0xa4>)
 8010f4e:	68fb      	ldr	r3, [r7, #12]
 8010f50:	6013      	str	r3, [r2, #0]
  ip4_addr_debug_print(NETIF_DEBUG, netmask);
  LWIP_DEBUGF(NETIF_DEBUG, (" gw "));
  ip4_addr_debug_print(NETIF_DEBUG, gw);
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));
  return netif;
 8010f52:	68fb      	ldr	r3, [r7, #12]
}
 8010f54:	4618      	mov	r0, r3
 8010f56:	3710      	adds	r7, #16
 8010f58:	46bd      	mov	sp, r7
 8010f5a:	bd80      	pop	{r7, pc}
 8010f5c:	0801cd14 	.word	0x0801cd14
 8010f60:	0801cd48 	.word	0x0801cd48
 8010f64:	0801cd60 	.word	0x0801cd60
 8010f68:	20004204 	.word	0x20004204
 8010f6c:	2000ab30 	.word	0x2000ab30

08010f70 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
    const ip4_addr_t *gw)
{
 8010f70:	b580      	push	{r7, lr}
 8010f72:	b084      	sub	sp, #16
 8010f74:	af00      	add	r7, sp, #0
 8010f76:	60f8      	str	r0, [r7, #12]
 8010f78:	60b9      	str	r1, [r7, #8]
 8010f7a:	607a      	str	r2, [r7, #4]
 8010f7c:	603b      	str	r3, [r7, #0]
  if (ip4_addr_isany(ipaddr)) {
 8010f7e:	68bb      	ldr	r3, [r7, #8]
 8010f80:	2b00      	cmp	r3, #0
 8010f82:	d003      	beq.n	8010f8c <netif_set_addr+0x1c>
 8010f84:	68bb      	ldr	r3, [r7, #8]
 8010f86:	681b      	ldr	r3, [r3, #0]
 8010f88:	2b00      	cmp	r3, #0
 8010f8a:	d10c      	bne.n	8010fa6 <netif_set_addr+0x36>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    netif_set_ipaddr(netif, ipaddr);
 8010f8c:	68b9      	ldr	r1, [r7, #8]
 8010f8e:	68f8      	ldr	r0, [r7, #12]
 8010f90:	f000 f81a 	bl	8010fc8 <netif_set_ipaddr>
    netif_set_netmask(netif, netmask);
 8010f94:	6879      	ldr	r1, [r7, #4]
 8010f96:	68f8      	ldr	r0, [r7, #12]
 8010f98:	f000 f862 	bl	8011060 <netif_set_netmask>
    netif_set_gw(netif, gw);
 8010f9c:	6839      	ldr	r1, [r7, #0]
 8010f9e:	68f8      	ldr	r0, [r7, #12]
 8010fa0:	f000 f84a 	bl	8011038 <netif_set_gw>
 8010fa4:	e00b      	b.n	8010fbe <netif_set_addr+0x4e>
  } else {
    netif_set_netmask(netif, netmask);
 8010fa6:	6879      	ldr	r1, [r7, #4]
 8010fa8:	68f8      	ldr	r0, [r7, #12]
 8010faa:	f000 f859 	bl	8011060 <netif_set_netmask>
    netif_set_gw(netif, gw);
 8010fae:	6839      	ldr	r1, [r7, #0]
 8010fb0:	68f8      	ldr	r0, [r7, #12]
 8010fb2:	f000 f841 	bl	8011038 <netif_set_gw>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    netif_set_ipaddr(netif, ipaddr);
 8010fb6:	68b9      	ldr	r1, [r7, #8]
 8010fb8:	68f8      	ldr	r0, [r7, #12]
 8010fba:	f000 f805 	bl	8010fc8 <netif_set_ipaddr>
  }
}
 8010fbe:	bf00      	nop
 8010fc0:	3710      	adds	r7, #16
 8010fc2:	46bd      	mov	sp, r7
 8010fc4:	bd80      	pop	{r7, pc}
	...

08010fc8 <netif_set_ipaddr>:
 * @note call netif_set_addr() if you also want to change netmask and
 * default gateway
 */
void
netif_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr)
{
 8010fc8:	b580      	push	{r7, lr}
 8010fca:	b084      	sub	sp, #16
 8010fcc:	af00      	add	r7, sp, #0
 8010fce:	6078      	str	r0, [r7, #4]
 8010fd0:	6039      	str	r1, [r7, #0]
  ip_addr_t new_addr;
  *ip_2_ip4(&new_addr) = (ipaddr ? *ipaddr : *IP4_ADDR_ANY4);
 8010fd2:	683b      	ldr	r3, [r7, #0]
 8010fd4:	2b00      	cmp	r3, #0
 8010fd6:	d003      	beq.n	8010fe0 <netif_set_ipaddr+0x18>
 8010fd8:	683b      	ldr	r3, [r7, #0]
 8010fda:	681b      	ldr	r3, [r3, #0]
 8010fdc:	60fb      	str	r3, [r7, #12]
 8010fde:	e002      	b.n	8010fe6 <netif_set_ipaddr+0x1e>
 8010fe0:	4b14      	ldr	r3, [pc, #80]	; (8011034 <netif_set_ipaddr+0x6c>)
 8010fe2:	681b      	ldr	r3, [r3, #0]
 8010fe4:	60fb      	str	r3, [r7, #12]
  IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

  /* address is actually being changed? */
  if (ip4_addr_cmp(ip_2_ip4(&new_addr), netif_ip4_addr(netif)) == 0) {
 8010fe6:	68fa      	ldr	r2, [r7, #12]
 8010fe8:	687b      	ldr	r3, [r7, #4]
 8010fea:	3304      	adds	r3, #4
 8010fec:	681b      	ldr	r3, [r3, #0]
 8010fee:	429a      	cmp	r2, r3
 8010ff0:	d01c      	beq.n	801102c <netif_set_ipaddr+0x64>
    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
#if LWIP_TCP
    tcp_netif_ip_addr_changed(netif_ip_addr4(netif), &new_addr);
 8010ff2:	687b      	ldr	r3, [r7, #4]
 8010ff4:	3304      	adds	r3, #4
 8010ff6:	f107 020c 	add.w	r2, r7, #12
 8010ffa:	4611      	mov	r1, r2
 8010ffc:	4618      	mov	r0, r3
 8010ffe:	f002 fb15 	bl	801362c <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
    udp_netif_ip_addr_changed(netif_ip_addr4(netif), &new_addr);
 8011002:	687b      	ldr	r3, [r7, #4]
 8011004:	3304      	adds	r3, #4
 8011006:	f107 020c 	add.w	r2, r7, #12
 801100a:	4611      	mov	r1, r2
 801100c:	4618      	mov	r0, r3
 801100e:	f006 fce7 	bl	80179e0 <udp_netif_ip_addr_changed>
#endif /* LWIP_RAW */

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 8011012:	683b      	ldr	r3, [r7, #0]
 8011014:	2b00      	cmp	r3, #0
 8011016:	d002      	beq.n	801101e <netif_set_ipaddr+0x56>
 8011018:	683b      	ldr	r3, [r7, #0]
 801101a:	681b      	ldr	r3, [r3, #0]
 801101c:	e000      	b.n	8011020 <netif_set_ipaddr+0x58>
 801101e:	2300      	movs	r3, #0
 8011020:	687a      	ldr	r2, [r7, #4]
 8011022:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 8011024:	2101      	movs	r1, #1
 8011026:	6878      	ldr	r0, [r7, #4]
 8011028:	f000 f861 	bl	80110ee <netif_issue_reports>
    netif->name[0], netif->name[1],
    ip4_addr1_16(netif_ip4_addr(netif)),
    ip4_addr2_16(netif_ip4_addr(netif)),
    ip4_addr3_16(netif_ip4_addr(netif)),
    ip4_addr4_16(netif_ip4_addr(netif))));
}
 801102c:	bf00      	nop
 801102e:	3710      	adds	r7, #16
 8011030:	46bd      	mov	sp, r7
 8011032:	bd80      	pop	{r7, pc}
 8011034:	0801e800 	.word	0x0801e800

08011038 <netif_set_gw>:
 *
 * @note call netif_set_addr() if you also want to change ip address and netmask
 */
void
netif_set_gw(struct netif *netif, const ip4_addr_t *gw)
{
 8011038:	b480      	push	{r7}
 801103a:	b083      	sub	sp, #12
 801103c:	af00      	add	r7, sp, #0
 801103e:	6078      	str	r0, [r7, #4]
 8011040:	6039      	str	r1, [r7, #0]
  ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 8011042:	683b      	ldr	r3, [r7, #0]
 8011044:	2b00      	cmp	r3, #0
 8011046:	d002      	beq.n	801104e <netif_set_gw+0x16>
 8011048:	683b      	ldr	r3, [r7, #0]
 801104a:	681b      	ldr	r3, [r3, #0]
 801104c:	e000      	b.n	8011050 <netif_set_gw+0x18>
 801104e:	2300      	movs	r3, #0
 8011050:	687a      	ldr	r2, [r7, #4]
 8011052:	60d3      	str	r3, [r2, #12]
    netif->name[0], netif->name[1],
    ip4_addr1_16(netif_ip4_gw(netif)),
    ip4_addr2_16(netif_ip4_gw(netif)),
    ip4_addr3_16(netif_ip4_gw(netif)),
    ip4_addr4_16(netif_ip4_gw(netif))));
}
 8011054:	bf00      	nop
 8011056:	370c      	adds	r7, #12
 8011058:	46bd      	mov	sp, r7
 801105a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801105e:	4770      	bx	lr

08011060 <netif_set_netmask>:
 * @note call netif_set_addr() if you also want to change ip address and
 * default gateway
 */
void
netif_set_netmask(struct netif *netif, const ip4_addr_t *netmask)
{
 8011060:	b480      	push	{r7}
 8011062:	b083      	sub	sp, #12
 8011064:	af00      	add	r7, sp, #0
 8011066:	6078      	str	r0, [r7, #4]
 8011068:	6039      	str	r1, [r7, #0]
  mib2_remove_route_ip4(0, netif);
  /* set new netmask to netif */
  ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 801106a:	683b      	ldr	r3, [r7, #0]
 801106c:	2b00      	cmp	r3, #0
 801106e:	d002      	beq.n	8011076 <netif_set_netmask+0x16>
 8011070:	683b      	ldr	r3, [r7, #0]
 8011072:	681b      	ldr	r3, [r3, #0]
 8011074:	e000      	b.n	8011078 <netif_set_netmask+0x18>
 8011076:	2300      	movs	r3, #0
 8011078:	687a      	ldr	r2, [r7, #4]
 801107a:	6093      	str	r3, [r2, #8]
    netif->name[0], netif->name[1],
    ip4_addr1_16(netif_ip4_netmask(netif)),
    ip4_addr2_16(netif_ip4_netmask(netif)),
    ip4_addr3_16(netif_ip4_netmask(netif)),
    ip4_addr4_16(netif_ip4_netmask(netif))));
}
 801107c:	bf00      	nop
 801107e:	370c      	adds	r7, #12
 8011080:	46bd      	mov	sp, r7
 8011082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011086:	4770      	bx	lr

08011088 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 8011088:	b480      	push	{r7}
 801108a:	b083      	sub	sp, #12
 801108c:	af00      	add	r7, sp, #0
 801108e:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 8011090:	4a04      	ldr	r2, [pc, #16]	; (80110a4 <netif_set_default+0x1c>)
 8011092:	687b      	ldr	r3, [r7, #4]
 8011094:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
           netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 8011096:	bf00      	nop
 8011098:	370c      	adds	r7, #12
 801109a:	46bd      	mov	sp, r7
 801109c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80110a0:	4770      	bx	lr
 80110a2:	bf00      	nop
 80110a4:	2000ab34 	.word	0x2000ab34

080110a8 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 80110a8:	b580      	push	{r7, lr}
 80110aa:	b082      	sub	sp, #8
 80110ac:	af00      	add	r7, sp, #0
 80110ae:	6078      	str	r0, [r7, #4]
  if (!(netif->flags & NETIF_FLAG_UP)) {
 80110b0:	687b      	ldr	r3, [r7, #4]
 80110b2:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80110b6:	f003 0301 	and.w	r3, r3, #1
 80110ba:	2b00      	cmp	r3, #0
 80110bc:	d113      	bne.n	80110e6 <netif_set_up+0x3e>
    netif->flags |= NETIF_FLAG_UP;
 80110be:	687b      	ldr	r3, [r7, #4]
 80110c0:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80110c4:	f043 0301 	orr.w	r3, r3, #1
 80110c8:	b2da      	uxtb	r2, r3
 80110ca:	687b      	ldr	r3, [r7, #4]
 80110cc:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

    NETIF_STATUS_CALLBACK(netif);

    if (netif->flags & NETIF_FLAG_LINK_UP) {
 80110d0:	687b      	ldr	r3, [r7, #4]
 80110d2:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80110d6:	f003 0304 	and.w	r3, r3, #4
 80110da:	2b00      	cmp	r3, #0
 80110dc:	d003      	beq.n	80110e6 <netif_set_up+0x3e>
      netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4|NETIF_REPORT_TYPE_IPV6);
 80110de:	2103      	movs	r1, #3
 80110e0:	6878      	ldr	r0, [r7, #4]
 80110e2:	f000 f804 	bl	80110ee <netif_issue_reports>
    }
  }
}
 80110e6:	bf00      	nop
 80110e8:	3708      	adds	r7, #8
 80110ea:	46bd      	mov	sp, r7
 80110ec:	bd80      	pop	{r7, pc}

080110ee <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif* netif, u8_t report_type)
{
 80110ee:	b580      	push	{r7, lr}
 80110f0:	b082      	sub	sp, #8
 80110f2:	af00      	add	r7, sp, #0
 80110f4:	6078      	str	r0, [r7, #4]
 80110f6:	460b      	mov	r3, r1
 80110f8:	70fb      	strb	r3, [r7, #3]
#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 80110fa:	78fb      	ldrb	r3, [r7, #3]
 80110fc:	f003 0301 	and.w	r3, r3, #1
 8011100:	2b00      	cmp	r3, #0
 8011102:	d011      	beq.n	8011128 <netif_issue_reports+0x3a>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8011104:	687b      	ldr	r3, [r7, #4]
 8011106:	3304      	adds	r3, #4
 8011108:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 801110a:	2b00      	cmp	r3, #0
 801110c:	d00c      	beq.n	8011128 <netif_issue_reports+0x3a>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 801110e:	687b      	ldr	r3, [r7, #4]
 8011110:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8011114:	f003 0308 	and.w	r3, r3, #8
 8011118:	2b00      	cmp	r3, #0
 801111a:	d005      	beq.n	8011128 <netif_issue_reports+0x3a>
      etharp_gratuitous(netif);
 801111c:	687b      	ldr	r3, [r7, #4]
 801111e:	3304      	adds	r3, #4
 8011120:	4619      	mov	r1, r3
 8011122:	6878      	ldr	r0, [r7, #4]
 8011124:	f007 fb90 	bl	8018848 <etharp_request>
    /* Send Router Solicitation messages. */
    netif->rs_count = LWIP_ND6_MAX_MULTICAST_SOLICIT;
#endif /* LWIP_IPV6_SEND_ROUTER_SOLICIT */
  }
#endif /* LWIP_IPV6 */
}
 8011128:	bf00      	nop
 801112a:	3708      	adds	r7, #8
 801112c:	46bd      	mov	sp, r7
 801112e:	bd80      	pop	{r7, pc}

08011130 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 8011130:	b580      	push	{r7, lr}
 8011132:	b082      	sub	sp, #8
 8011134:	af00      	add	r7, sp, #0
 8011136:	6078      	str	r0, [r7, #4]
  if (netif->flags & NETIF_FLAG_UP) {
 8011138:	687b      	ldr	r3, [r7, #4]
 801113a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801113e:	f003 0301 	and.w	r3, r3, #1
 8011142:	2b00      	cmp	r3, #0
 8011144:	d012      	beq.n	801116c <netif_set_down+0x3c>
    netif->flags &= ~NETIF_FLAG_UP;
 8011146:	687b      	ldr	r3, [r7, #4]
 8011148:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801114c:	f023 0301 	bic.w	r3, r3, #1
 8011150:	b2da      	uxtb	r2, r3
 8011152:	687b      	ldr	r3, [r7, #4]
 8011154:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 8011158:	687b      	ldr	r3, [r7, #4]
 801115a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801115e:	f003 0308 	and.w	r3, r3, #8
 8011162:	2b00      	cmp	r3, #0
 8011164:	d002      	beq.n	801116c <netif_set_down+0x3c>
      etharp_cleanup_netif(netif);
 8011166:	6878      	ldr	r0, [r7, #4]
 8011168:	f006 ff34 	bl	8017fd4 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 801116c:	bf00      	nop
 801116e:	3708      	adds	r7, #8
 8011170:	46bd      	mov	sp, r7
 8011172:	bd80      	pop	{r7, pc}

08011174 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 8011174:	b580      	push	{r7, lr}
 8011176:	b082      	sub	sp, #8
 8011178:	af00      	add	r7, sp, #0
  struct tcp_pcb* pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 801117a:	f009 f843 	bl	801a204 <sys_arch_protect>
 801117e:	6038      	str	r0, [r7, #0]
 8011180:	4b0f      	ldr	r3, [pc, #60]	; (80111c0 <pbuf_free_ooseq+0x4c>)
 8011182:	2200      	movs	r2, #0
 8011184:	701a      	strb	r2, [r3, #0]
 8011186:	6838      	ldr	r0, [r7, #0]
 8011188:	f009 f84a 	bl	801a220 <sys_arch_unprotect>

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 801118c:	4b0d      	ldr	r3, [pc, #52]	; (80111c4 <pbuf_free_ooseq+0x50>)
 801118e:	681b      	ldr	r3, [r3, #0]
 8011190:	607b      	str	r3, [r7, #4]
 8011192:	e00f      	b.n	80111b4 <pbuf_free_ooseq+0x40>
    if (NULL != pcb->ooseq) {
 8011194:	687b      	ldr	r3, [r7, #4]
 8011196:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011198:	2b00      	cmp	r3, #0
 801119a:	d008      	beq.n	80111ae <pbuf_free_ooseq+0x3a>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_segs_free(pcb->ooseq);
 801119c:	687b      	ldr	r3, [r7, #4]
 801119e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80111a0:	4618      	mov	r0, r3
 80111a2:	f001 febe 	bl	8012f22 <tcp_segs_free>
      pcb->ooseq = NULL;
 80111a6:	687b      	ldr	r3, [r7, #4]
 80111a8:	2200      	movs	r2, #0
 80111aa:	671a      	str	r2, [r3, #112]	; 0x70
      return;
 80111ac:	e005      	b.n	80111ba <pbuf_free_ooseq+0x46>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 80111ae:	687b      	ldr	r3, [r7, #4]
 80111b0:	68db      	ldr	r3, [r3, #12]
 80111b2:	607b      	str	r3, [r7, #4]
 80111b4:	687b      	ldr	r3, [r7, #4]
 80111b6:	2b00      	cmp	r3, #0
 80111b8:	d1ec      	bne.n	8011194 <pbuf_free_ooseq+0x20>
    }
  }
}
 80111ba:	3708      	adds	r7, #8
 80111bc:	46bd      	mov	sp, r7
 80111be:	bd80      	pop	{r7, pc}
 80111c0:	2000ab38 	.word	0x2000ab38
 80111c4:	2000ab40 	.word	0x2000ab40

080111c8 <pbuf_free_ooseq_callback>:
/**
 * Just a callback function for tcpip_callback() that calls pbuf_free_ooseq().
 */
static void
pbuf_free_ooseq_callback(void *arg)
{
 80111c8:	b580      	push	{r7, lr}
 80111ca:	b082      	sub	sp, #8
 80111cc:	af00      	add	r7, sp, #0
 80111ce:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);
  pbuf_free_ooseq();
 80111d0:	f7ff ffd0 	bl	8011174 <pbuf_free_ooseq>
}
 80111d4:	bf00      	nop
 80111d6:	3708      	adds	r7, #8
 80111d8:	46bd      	mov	sp, r7
 80111da:	bd80      	pop	{r7, pc}

080111dc <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 80111dc:	b580      	push	{r7, lr}
 80111de:	b082      	sub	sp, #8
 80111e0:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
#else /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
  u8_t queued;
  SYS_ARCH_DECL_PROTECT(old_level);
  SYS_ARCH_PROTECT(old_level);
 80111e2:	f009 f80f 	bl	801a204 <sys_arch_protect>
 80111e6:	6078      	str	r0, [r7, #4]
  queued = pbuf_free_ooseq_pending;
 80111e8:	4b10      	ldr	r3, [pc, #64]	; (801122c <pbuf_pool_is_empty+0x50>)
 80111ea:	781b      	ldrb	r3, [r3, #0]
 80111ec:	70fb      	strb	r3, [r7, #3]
  pbuf_free_ooseq_pending = 1;
 80111ee:	4b0f      	ldr	r3, [pc, #60]	; (801122c <pbuf_pool_is_empty+0x50>)
 80111f0:	2201      	movs	r2, #1
 80111f2:	701a      	strb	r2, [r3, #0]
  SYS_ARCH_UNPROTECT(old_level);
 80111f4:	6878      	ldr	r0, [r7, #4]
 80111f6:	f009 f813 	bl	801a220 <sys_arch_unprotect>

  if (!queued) {
 80111fa:	78fb      	ldrb	r3, [r7, #3]
 80111fc:	2b00      	cmp	r3, #0
 80111fe:	d110      	bne.n	8011222 <pbuf_pool_is_empty+0x46>
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
 8011200:	2200      	movs	r2, #0
 8011202:	2100      	movs	r1, #0
 8011204:	480a      	ldr	r0, [pc, #40]	; (8011230 <pbuf_pool_is_empty+0x54>)
 8011206:	f7ff f943 	bl	8010490 <tcpip_callback_with_block>
 801120a:	4603      	mov	r3, r0
 801120c:	2b00      	cmp	r3, #0
 801120e:	d008      	beq.n	8011222 <pbuf_pool_is_empty+0x46>
 8011210:	f008 fff8 	bl	801a204 <sys_arch_protect>
 8011214:	6078      	str	r0, [r7, #4]
 8011216:	4b05      	ldr	r3, [pc, #20]	; (801122c <pbuf_pool_is_empty+0x50>)
 8011218:	2200      	movs	r2, #0
 801121a:	701a      	strb	r2, [r3, #0]
 801121c:	6878      	ldr	r0, [r7, #4]
 801121e:	f008 ffff 	bl	801a220 <sys_arch_unprotect>
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 8011222:	bf00      	nop
 8011224:	3708      	adds	r7, #8
 8011226:	46bd      	mov	sp, r7
 8011228:	bd80      	pop	{r7, pc}
 801122a:	bf00      	nop
 801122c:	2000ab38 	.word	0x2000ab38
 8011230:	080111c9 	.word	0x080111c9

08011234 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 8011234:	b580      	push	{r7, lr}
 8011236:	b088      	sub	sp, #32
 8011238:	af00      	add	r7, sp, #0
 801123a:	4603      	mov	r3, r0
 801123c:	71fb      	strb	r3, [r7, #7]
 801123e:	460b      	mov	r3, r1
 8011240:	80bb      	strh	r3, [r7, #4]
 8011242:	4613      	mov	r3, r2
 8011244:	71bb      	strb	r3, [r7, #6]
  u16_t offset;
  s32_t rem_len; /* remaining length */
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  /* determine header offset */
  switch (layer) {
 8011246:	79fb      	ldrb	r3, [r7, #7]
 8011248:	2b04      	cmp	r3, #4
 801124a:	d81c      	bhi.n	8011286 <pbuf_alloc+0x52>
 801124c:	a201      	add	r2, pc, #4	; (adr r2, 8011254 <pbuf_alloc+0x20>)
 801124e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011252:	bf00      	nop
 8011254:	08011269 	.word	0x08011269
 8011258:	0801126f 	.word	0x0801126f
 801125c:	08011275 	.word	0x08011275
 8011260:	0801127b 	.word	0x0801127b
 8011264:	08011281 	.word	0x08011281
  case PBUF_TRANSPORT:
    /* add room for transport (often TCP) layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN + PBUF_IP_HLEN + PBUF_TRANSPORT_HLEN;
 8011268:	2336      	movs	r3, #54	; 0x36
 801126a:	82fb      	strh	r3, [r7, #22]
    break;
 801126c:	e014      	b.n	8011298 <pbuf_alloc+0x64>
  case PBUF_IP:
    /* add room for IP layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN + PBUF_IP_HLEN;
 801126e:	2322      	movs	r3, #34	; 0x22
 8011270:	82fb      	strh	r3, [r7, #22]
    break;
 8011272:	e011      	b.n	8011298 <pbuf_alloc+0x64>
  case PBUF_LINK:
    /* add room for link layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN;
 8011274:	230e      	movs	r3, #14
 8011276:	82fb      	strh	r3, [r7, #22]
    break;
 8011278:	e00e      	b.n	8011298 <pbuf_alloc+0x64>
  case PBUF_RAW_TX:
    /* add room for encapsulating link layer headers (e.g. 802.11) */
    offset = PBUF_LINK_ENCAPSULATION_HLEN;
 801127a:	2300      	movs	r3, #0
 801127c:	82fb      	strh	r3, [r7, #22]
    break;
 801127e:	e00b      	b.n	8011298 <pbuf_alloc+0x64>
  case PBUF_RAW:
    /* no offset (e.g. RX buffers or chain successors) */
    offset = 0;
 8011280:	2300      	movs	r3, #0
 8011282:	82fb      	strh	r3, [r7, #22]
    break;
 8011284:	e008      	b.n	8011298 <pbuf_alloc+0x64>
  default:
    LWIP_ASSERT("pbuf_alloc: bad pbuf layer", 0);
 8011286:	4ba5      	ldr	r3, [pc, #660]	; (801151c <pbuf_alloc+0x2e8>)
 8011288:	f44f 728b 	mov.w	r2, #278	; 0x116
 801128c:	49a4      	ldr	r1, [pc, #656]	; (8011520 <pbuf_alloc+0x2ec>)
 801128e:	48a5      	ldr	r0, [pc, #660]	; (8011524 <pbuf_alloc+0x2f0>)
 8011290:	f009 fdae 	bl	801adf0 <iprintf>
    return NULL;
 8011294:	2300      	movs	r3, #0
 8011296:	e15d      	b.n	8011554 <pbuf_alloc+0x320>
  }

  switch (type) {
 8011298:	79bb      	ldrb	r3, [r7, #6]
 801129a:	2b03      	cmp	r3, #3
 801129c:	f200 8134 	bhi.w	8011508 <pbuf_alloc+0x2d4>
 80112a0:	a201      	add	r2, pc, #4	; (adr r2, 80112a8 <pbuf_alloc+0x74>)
 80112a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80112a6:	bf00      	nop
 80112a8:	08011449 	.word	0x08011449
 80112ac:	080114d5 	.word	0x080114d5
 80112b0:	080114d5 	.word	0x080114d5
 80112b4:	080112b9 	.word	0x080112b9
  case PBUF_POOL:
    /* allocate head of pbuf chain into p */
    p = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 80112b8:	200c      	movs	r0, #12
 80112ba:	f7ff fd81 	bl	8010dc0 <memp_malloc>
 80112be:	61f8      	str	r0, [r7, #28]
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc: allocated pbuf %p\n", (void *)p));
    if (p == NULL) {
 80112c0:	69fb      	ldr	r3, [r7, #28]
 80112c2:	2b00      	cmp	r3, #0
 80112c4:	d103      	bne.n	80112ce <pbuf_alloc+0x9a>
      PBUF_POOL_IS_EMPTY();
 80112c6:	f7ff ff89 	bl	80111dc <pbuf_pool_is_empty>
      return NULL;
 80112ca:	2300      	movs	r3, #0
 80112cc:	e142      	b.n	8011554 <pbuf_alloc+0x320>
    }
    p->type = type;
 80112ce:	69fb      	ldr	r3, [r7, #28]
 80112d0:	79ba      	ldrb	r2, [r7, #6]
 80112d2:	731a      	strb	r2, [r3, #12]
    p->next = NULL;
 80112d4:	69fb      	ldr	r3, [r7, #28]
 80112d6:	2200      	movs	r2, #0
 80112d8:	601a      	str	r2, [r3, #0]

    /* make the payload pointer point 'offset' bytes into pbuf data memory */
    p->payload = LWIP_MEM_ALIGN((void *)((u8_t *)p + (SIZEOF_STRUCT_PBUF + offset)));
 80112da:	8afb      	ldrh	r3, [r7, #22]
 80112dc:	3310      	adds	r3, #16
 80112de:	69fa      	ldr	r2, [r7, #28]
 80112e0:	4413      	add	r3, r2
 80112e2:	3303      	adds	r3, #3
 80112e4:	f023 0303 	bic.w	r3, r3, #3
 80112e8:	461a      	mov	r2, r3
 80112ea:	69fb      	ldr	r3, [r7, #28]
 80112ec:	605a      	str	r2, [r3, #4]
    LWIP_ASSERT("pbuf_alloc: pbuf p->payload properly aligned",
 80112ee:	69fb      	ldr	r3, [r7, #28]
 80112f0:	685b      	ldr	r3, [r3, #4]
 80112f2:	f003 0303 	and.w	r3, r3, #3
 80112f6:	2b00      	cmp	r3, #0
 80112f8:	d006      	beq.n	8011308 <pbuf_alloc+0xd4>
 80112fa:	4b88      	ldr	r3, [pc, #544]	; (801151c <pbuf_alloc+0x2e8>)
 80112fc:	f240 1229 	movw	r2, #297	; 0x129
 8011300:	4989      	ldr	r1, [pc, #548]	; (8011528 <pbuf_alloc+0x2f4>)
 8011302:	4888      	ldr	r0, [pc, #544]	; (8011524 <pbuf_alloc+0x2f0>)
 8011304:	f009 fd74 	bl	801adf0 <iprintf>
            ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
    /* the total length of the pbuf chain is the requested size */
    p->tot_len = length;
 8011308:	69fb      	ldr	r3, [r7, #28]
 801130a:	88ba      	ldrh	r2, [r7, #4]
 801130c:	811a      	strh	r2, [r3, #8]
    /* set the length of the first pbuf in the chain */
    p->len = LWIP_MIN(length, PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset));
 801130e:	8afb      	ldrh	r3, [r7, #22]
 8011310:	3303      	adds	r3, #3
 8011312:	f023 0303 	bic.w	r3, r3, #3
 8011316:	f5c3 7214 	rsb	r2, r3, #592	; 0x250
 801131a:	88bb      	ldrh	r3, [r7, #4]
 801131c:	4293      	cmp	r3, r2
 801131e:	bf28      	it	cs
 8011320:	4613      	movcs	r3, r2
 8011322:	b29a      	uxth	r2, r3
 8011324:	69fb      	ldr	r3, [r7, #28]
 8011326:	815a      	strh	r2, [r3, #10]
    LWIP_ASSERT("check p->payload + p->len does not overflow pbuf",
 8011328:	69fb      	ldr	r3, [r7, #28]
 801132a:	685b      	ldr	r3, [r3, #4]
 801132c:	69fa      	ldr	r2, [r7, #28]
 801132e:	8952      	ldrh	r2, [r2, #10]
 8011330:	441a      	add	r2, r3
 8011332:	69fb      	ldr	r3, [r7, #28]
 8011334:	f503 7318 	add.w	r3, r3, #608	; 0x260
 8011338:	429a      	cmp	r2, r3
 801133a:	d906      	bls.n	801134a <pbuf_alloc+0x116>
 801133c:	4b77      	ldr	r3, [pc, #476]	; (801151c <pbuf_alloc+0x2e8>)
 801133e:	f44f 7298 	mov.w	r2, #304	; 0x130
 8011342:	497a      	ldr	r1, [pc, #488]	; (801152c <pbuf_alloc+0x2f8>)
 8011344:	4877      	ldr	r0, [pc, #476]	; (8011524 <pbuf_alloc+0x2f0>)
 8011346:	f009 fd53 	bl	801adf0 <iprintf>
                ((u8_t*)p->payload + p->len <=
                 (u8_t*)p + SIZEOF_STRUCT_PBUF + PBUF_POOL_BUFSIZE_ALIGNED));
    LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 801134a:	8afb      	ldrh	r3, [r7, #22]
 801134c:	3303      	adds	r3, #3
 801134e:	f023 0303 	bic.w	r3, r3, #3
 8011352:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 8011356:	d106      	bne.n	8011366 <pbuf_alloc+0x132>
 8011358:	4b70      	ldr	r3, [pc, #448]	; (801151c <pbuf_alloc+0x2e8>)
 801135a:	f44f 7299 	mov.w	r2, #306	; 0x132
 801135e:	4974      	ldr	r1, [pc, #464]	; (8011530 <pbuf_alloc+0x2fc>)
 8011360:	4870      	ldr	r0, [pc, #448]	; (8011524 <pbuf_alloc+0x2f0>)
 8011362:	f009 fd45 	bl	801adf0 <iprintf>
      (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
    /* set reference count (needed here in case we fail) */
    p->ref = 1;
 8011366:	69fb      	ldr	r3, [r7, #28]
 8011368:	2201      	movs	r2, #1
 801136a:	81da      	strh	r2, [r3, #14]

    /* now allocate the tail of the pbuf chain */

    /* remember first pbuf for linkage in next iteration */
    r = p;
 801136c:	69fb      	ldr	r3, [r7, #28]
 801136e:	61bb      	str	r3, [r7, #24]
    /* remaining length to be allocated */
    rem_len = length - p->len;
 8011370:	88bb      	ldrh	r3, [r7, #4]
 8011372:	69fa      	ldr	r2, [r7, #28]
 8011374:	8952      	ldrh	r2, [r2, #10]
 8011376:	1a9b      	subs	r3, r3, r2
 8011378:	613b      	str	r3, [r7, #16]
    /* any remaining pbufs to be allocated? */
    while (rem_len > 0) {
 801137a:	e061      	b.n	8011440 <pbuf_alloc+0x20c>
      q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 801137c:	200c      	movs	r0, #12
 801137e:	f7ff fd1f 	bl	8010dc0 <memp_malloc>
 8011382:	60f8      	str	r0, [r7, #12]
      if (q == NULL) {
 8011384:	68fb      	ldr	r3, [r7, #12]
 8011386:	2b00      	cmp	r3, #0
 8011388:	d106      	bne.n	8011398 <pbuf_alloc+0x164>
        PBUF_POOL_IS_EMPTY();
 801138a:	f7ff ff27 	bl	80111dc <pbuf_pool_is_empty>
        /* free chain so far allocated */
        pbuf_free(p);
 801138e:	69f8      	ldr	r0, [r7, #28]
 8011390:	f000 fac2 	bl	8011918 <pbuf_free>
        /* bail out unsuccessfully */
        return NULL;
 8011394:	2300      	movs	r3, #0
 8011396:	e0dd      	b.n	8011554 <pbuf_alloc+0x320>
      }
      q->type = type;
 8011398:	68fb      	ldr	r3, [r7, #12]
 801139a:	79ba      	ldrb	r2, [r7, #6]
 801139c:	731a      	strb	r2, [r3, #12]
      q->flags = 0;
 801139e:	68fb      	ldr	r3, [r7, #12]
 80113a0:	2200      	movs	r2, #0
 80113a2:	735a      	strb	r2, [r3, #13]
      q->next = NULL;
 80113a4:	68fb      	ldr	r3, [r7, #12]
 80113a6:	2200      	movs	r2, #0
 80113a8:	601a      	str	r2, [r3, #0]
      /* make previous pbuf point to this pbuf */
      r->next = q;
 80113aa:	69bb      	ldr	r3, [r7, #24]
 80113ac:	68fa      	ldr	r2, [r7, #12]
 80113ae:	601a      	str	r2, [r3, #0]
      /* set total length of this pbuf and next in chain */
      LWIP_ASSERT("rem_len < max_u16_t", rem_len < 0xffff);
 80113b0:	693b      	ldr	r3, [r7, #16]
 80113b2:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80113b6:	4293      	cmp	r3, r2
 80113b8:	dd06      	ble.n	80113c8 <pbuf_alloc+0x194>
 80113ba:	4b58      	ldr	r3, [pc, #352]	; (801151c <pbuf_alloc+0x2e8>)
 80113bc:	f44f 72a6 	mov.w	r2, #332	; 0x14c
 80113c0:	495c      	ldr	r1, [pc, #368]	; (8011534 <pbuf_alloc+0x300>)
 80113c2:	4858      	ldr	r0, [pc, #352]	; (8011524 <pbuf_alloc+0x2f0>)
 80113c4:	f009 fd14 	bl	801adf0 <iprintf>
      q->tot_len = (u16_t)rem_len;
 80113c8:	693b      	ldr	r3, [r7, #16]
 80113ca:	b29a      	uxth	r2, r3
 80113cc:	68fb      	ldr	r3, [r7, #12]
 80113ce:	811a      	strh	r2, [r3, #8]
      /* this pbuf length is pool size, unless smaller sized tail */
      q->len = LWIP_MIN((u16_t)rem_len, PBUF_POOL_BUFSIZE_ALIGNED);
 80113d0:	693b      	ldr	r3, [r7, #16]
 80113d2:	b29b      	uxth	r3, r3
 80113d4:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 80113d8:	bf28      	it	cs
 80113da:	f44f 7314 	movcs.w	r3, #592	; 0x250
 80113de:	b29a      	uxth	r2, r3
 80113e0:	68fb      	ldr	r3, [r7, #12]
 80113e2:	815a      	strh	r2, [r3, #10]
      q->payload = (void *)((u8_t *)q + SIZEOF_STRUCT_PBUF);
 80113e4:	68fb      	ldr	r3, [r7, #12]
 80113e6:	f103 0210 	add.w	r2, r3, #16
 80113ea:	68fb      	ldr	r3, [r7, #12]
 80113ec:	605a      	str	r2, [r3, #4]
      LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 80113ee:	68fb      	ldr	r3, [r7, #12]
 80113f0:	685b      	ldr	r3, [r3, #4]
 80113f2:	f003 0303 	and.w	r3, r3, #3
 80113f6:	2b00      	cmp	r3, #0
 80113f8:	d006      	beq.n	8011408 <pbuf_alloc+0x1d4>
 80113fa:	4b48      	ldr	r3, [pc, #288]	; (801151c <pbuf_alloc+0x2e8>)
 80113fc:	f44f 72a9 	mov.w	r2, #338	; 0x152
 8011400:	494d      	ldr	r1, [pc, #308]	; (8011538 <pbuf_alloc+0x304>)
 8011402:	4848      	ldr	r0, [pc, #288]	; (8011524 <pbuf_alloc+0x2f0>)
 8011404:	f009 fcf4 	bl	801adf0 <iprintf>
              ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
      LWIP_ASSERT("check p->payload + p->len does not overflow pbuf",
 8011408:	69fb      	ldr	r3, [r7, #28]
 801140a:	685b      	ldr	r3, [r3, #4]
 801140c:	69fa      	ldr	r2, [r7, #28]
 801140e:	8952      	ldrh	r2, [r2, #10]
 8011410:	441a      	add	r2, r3
 8011412:	69fb      	ldr	r3, [r7, #28]
 8011414:	f503 7318 	add.w	r3, r3, #608	; 0x260
 8011418:	429a      	cmp	r2, r3
 801141a:	d906      	bls.n	801142a <pbuf_alloc+0x1f6>
 801141c:	4b3f      	ldr	r3, [pc, #252]	; (801151c <pbuf_alloc+0x2e8>)
 801141e:	f240 1255 	movw	r2, #341	; 0x155
 8011422:	4942      	ldr	r1, [pc, #264]	; (801152c <pbuf_alloc+0x2f8>)
 8011424:	483f      	ldr	r0, [pc, #252]	; (8011524 <pbuf_alloc+0x2f0>)
 8011426:	f009 fce3 	bl	801adf0 <iprintf>
                  ((u8_t*)p->payload + p->len <=
                   (u8_t*)p + SIZEOF_STRUCT_PBUF + PBUF_POOL_BUFSIZE_ALIGNED));
      q->ref = 1;
 801142a:	68fb      	ldr	r3, [r7, #12]
 801142c:	2201      	movs	r2, #1
 801142e:	81da      	strh	r2, [r3, #14]
      /* calculate remaining length to be allocated */
      rem_len -= q->len;
 8011430:	68fb      	ldr	r3, [r7, #12]
 8011432:	895b      	ldrh	r3, [r3, #10]
 8011434:	461a      	mov	r2, r3
 8011436:	693b      	ldr	r3, [r7, #16]
 8011438:	1a9b      	subs	r3, r3, r2
 801143a:	613b      	str	r3, [r7, #16]
      /* remember this pbuf for linkage in next iteration */
      r = q;
 801143c:	68fb      	ldr	r3, [r7, #12]
 801143e:	61bb      	str	r3, [r7, #24]
    while (rem_len > 0) {
 8011440:	693b      	ldr	r3, [r7, #16]
 8011442:	2b00      	cmp	r3, #0
 8011444:	dc9a      	bgt.n	801137c <pbuf_alloc+0x148>
    }
    /* end of chain */
    /*r->next = NULL;*/

    break;
 8011446:	e07e      	b.n	8011546 <pbuf_alloc+0x312>
  case PBUF_RAM:
    {
      mem_size_t alloc_len = LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF + offset) + LWIP_MEM_ALIGN_SIZE(length);
 8011448:	8afb      	ldrh	r3, [r7, #22]
 801144a:	3313      	adds	r3, #19
 801144c:	b29b      	uxth	r3, r3
 801144e:	f023 0303 	bic.w	r3, r3, #3
 8011452:	b29a      	uxth	r2, r3
 8011454:	88bb      	ldrh	r3, [r7, #4]
 8011456:	3303      	adds	r3, #3
 8011458:	b29b      	uxth	r3, r3
 801145a:	f023 0303 	bic.w	r3, r3, #3
 801145e:	b29b      	uxth	r3, r3
 8011460:	4413      	add	r3, r2
 8011462:	817b      	strh	r3, [r7, #10]
      
      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if (alloc_len < LWIP_MEM_ALIGN_SIZE(length)) {
 8011464:	897a      	ldrh	r2, [r7, #10]
 8011466:	88bb      	ldrh	r3, [r7, #4]
 8011468:	3303      	adds	r3, #3
 801146a:	f023 0303 	bic.w	r3, r3, #3
 801146e:	429a      	cmp	r2, r3
 8011470:	d201      	bcs.n	8011476 <pbuf_alloc+0x242>
        return NULL;
 8011472:	2300      	movs	r3, #0
 8011474:	e06e      	b.n	8011554 <pbuf_alloc+0x320>
      }
    
      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf*)mem_malloc(alloc_len);
 8011476:	897b      	ldrh	r3, [r7, #10]
 8011478:	4618      	mov	r0, r3
 801147a:	f7ff fb31 	bl	8010ae0 <mem_malloc>
 801147e:	61f8      	str	r0, [r7, #28]
    }

    if (p == NULL) {
 8011480:	69fb      	ldr	r3, [r7, #28]
 8011482:	2b00      	cmp	r3, #0
 8011484:	d101      	bne.n	801148a <pbuf_alloc+0x256>
      return NULL;
 8011486:	2300      	movs	r3, #0
 8011488:	e064      	b.n	8011554 <pbuf_alloc+0x320>
    }
    /* Set up internal structure of the pbuf. */
    p->payload = LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset));
 801148a:	8afb      	ldrh	r3, [r7, #22]
 801148c:	3310      	adds	r3, #16
 801148e:	69fa      	ldr	r2, [r7, #28]
 8011490:	4413      	add	r3, r2
 8011492:	3303      	adds	r3, #3
 8011494:	f023 0303 	bic.w	r3, r3, #3
 8011498:	461a      	mov	r2, r3
 801149a:	69fb      	ldr	r3, [r7, #28]
 801149c:	605a      	str	r2, [r3, #4]
    p->len = p->tot_len = length;
 801149e:	69fb      	ldr	r3, [r7, #28]
 80114a0:	88ba      	ldrh	r2, [r7, #4]
 80114a2:	811a      	strh	r2, [r3, #8]
 80114a4:	69fb      	ldr	r3, [r7, #28]
 80114a6:	891a      	ldrh	r2, [r3, #8]
 80114a8:	69fb      	ldr	r3, [r7, #28]
 80114aa:	815a      	strh	r2, [r3, #10]
    p->next = NULL;
 80114ac:	69fb      	ldr	r3, [r7, #28]
 80114ae:	2200      	movs	r2, #0
 80114b0:	601a      	str	r2, [r3, #0]
    p->type = type;
 80114b2:	69fb      	ldr	r3, [r7, #28]
 80114b4:	79ba      	ldrb	r2, [r7, #6]
 80114b6:	731a      	strb	r2, [r3, #12]

    LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 80114b8:	69fb      	ldr	r3, [r7, #28]
 80114ba:	685b      	ldr	r3, [r3, #4]
 80114bc:	f003 0303 	and.w	r3, r3, #3
 80114c0:	2b00      	cmp	r3, #0
 80114c2:	d03f      	beq.n	8011544 <pbuf_alloc+0x310>
 80114c4:	4b15      	ldr	r3, [pc, #84]	; (801151c <pbuf_alloc+0x2e8>)
 80114c6:	f240 1277 	movw	r2, #375	; 0x177
 80114ca:	491c      	ldr	r1, [pc, #112]	; (801153c <pbuf_alloc+0x308>)
 80114cc:	4815      	ldr	r0, [pc, #84]	; (8011524 <pbuf_alloc+0x2f0>)
 80114ce:	f009 fc8f 	bl	801adf0 <iprintf>
           ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
    break;
 80114d2:	e037      	b.n	8011544 <pbuf_alloc+0x310>
  /* pbuf references existing (non-volatile static constant) ROM payload? */
  case PBUF_ROM:
  /* pbuf references existing (externally allocated) RAM payload? */
  case PBUF_REF:
    /* only allocate memory for the pbuf structure */
    p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 80114d4:	200b      	movs	r0, #11
 80114d6:	f7ff fc73 	bl	8010dc0 <memp_malloc>
 80114da:	61f8      	str	r0, [r7, #28]
    if (p == NULL) {
 80114dc:	69fb      	ldr	r3, [r7, #28]
 80114de:	2b00      	cmp	r3, #0
 80114e0:	d101      	bne.n	80114e6 <pbuf_alloc+0x2b2>
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("pbuf_alloc: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                  (type == PBUF_ROM) ? "ROM" : "REF"));
      return NULL;
 80114e2:	2300      	movs	r3, #0
 80114e4:	e036      	b.n	8011554 <pbuf_alloc+0x320>
    }
    /* caller must set this field properly, afterwards */
    p->payload = NULL;
 80114e6:	69fb      	ldr	r3, [r7, #28]
 80114e8:	2200      	movs	r2, #0
 80114ea:	605a      	str	r2, [r3, #4]
    p->len = p->tot_len = length;
 80114ec:	69fb      	ldr	r3, [r7, #28]
 80114ee:	88ba      	ldrh	r2, [r7, #4]
 80114f0:	811a      	strh	r2, [r3, #8]
 80114f2:	69fb      	ldr	r3, [r7, #28]
 80114f4:	891a      	ldrh	r2, [r3, #8]
 80114f6:	69fb      	ldr	r3, [r7, #28]
 80114f8:	815a      	strh	r2, [r3, #10]
    p->next = NULL;
 80114fa:	69fb      	ldr	r3, [r7, #28]
 80114fc:	2200      	movs	r2, #0
 80114fe:	601a      	str	r2, [r3, #0]
    p->type = type;
 8011500:	69fb      	ldr	r3, [r7, #28]
 8011502:	79ba      	ldrb	r2, [r7, #6]
 8011504:	731a      	strb	r2, [r3, #12]
    break;
 8011506:	e01e      	b.n	8011546 <pbuf_alloc+0x312>
  default:
    LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 8011508:	4b04      	ldr	r3, [pc, #16]	; (801151c <pbuf_alloc+0x2e8>)
 801150a:	f44f 72c6 	mov.w	r2, #396	; 0x18c
 801150e:	490c      	ldr	r1, [pc, #48]	; (8011540 <pbuf_alloc+0x30c>)
 8011510:	4804      	ldr	r0, [pc, #16]	; (8011524 <pbuf_alloc+0x2f0>)
 8011512:	f009 fc6d 	bl	801adf0 <iprintf>
    return NULL;
 8011516:	2300      	movs	r3, #0
 8011518:	e01c      	b.n	8011554 <pbuf_alloc+0x320>
 801151a:	bf00      	nop
 801151c:	0801cd88 	.word	0x0801cd88
 8011520:	0801cdb8 	.word	0x0801cdb8
 8011524:	0801cdd4 	.word	0x0801cdd4
 8011528:	0801cdfc 	.word	0x0801cdfc
 801152c:	0801ce2c 	.word	0x0801ce2c
 8011530:	0801ce60 	.word	0x0801ce60
 8011534:	0801ce94 	.word	0x0801ce94
 8011538:	0801cea8 	.word	0x0801cea8
 801153c:	0801ced8 	.word	0x0801ced8
 8011540:	0801cf04 	.word	0x0801cf04
    break;
 8011544:	bf00      	nop
  }
  /* set reference count */
  p->ref = 1;
 8011546:	69fb      	ldr	r3, [r7, #28]
 8011548:	2201      	movs	r2, #1
 801154a:	81da      	strh	r2, [r3, #14]
  /* set flags */
  p->flags = 0;
 801154c:	69fb      	ldr	r3, [r7, #28]
 801154e:	2200      	movs	r2, #0
 8011550:	735a      	strb	r2, [r3, #13]
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 8011552:	69fb      	ldr	r3, [r7, #28]
}
 8011554:	4618      	mov	r0, r3
 8011556:	3720      	adds	r7, #32
 8011558:	46bd      	mov	sp, r7
 801155a:	bd80      	pop	{r7, pc}

0801155c <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf*
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 801155c:	b580      	push	{r7, lr}
 801155e:	b084      	sub	sp, #16
 8011560:	af00      	add	r7, sp, #0
 8011562:	603b      	str	r3, [r7, #0]
 8011564:	4603      	mov	r3, r0
 8011566:	71fb      	strb	r3, [r7, #7]
 8011568:	460b      	mov	r3, r1
 801156a:	80bb      	strh	r3, [r7, #4]
 801156c:	4613      	mov	r3, r2
 801156e:	71bb      	strb	r3, [r7, #6]
  u16_t offset;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  /* determine header offset */
  switch (l) {
 8011570:	79fb      	ldrb	r3, [r7, #7]
 8011572:	2b04      	cmp	r3, #4
 8011574:	d81b      	bhi.n	80115ae <pbuf_alloced_custom+0x52>
 8011576:	a201      	add	r2, pc, #4	; (adr r2, 801157c <pbuf_alloced_custom+0x20>)
 8011578:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801157c:	08011591 	.word	0x08011591
 8011580:	08011597 	.word	0x08011597
 8011584:	0801159d 	.word	0x0801159d
 8011588:	080115a3 	.word	0x080115a3
 801158c:	080115a9 	.word	0x080115a9
  case PBUF_TRANSPORT:
    /* add room for transport (often TCP) layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN + PBUF_IP_HLEN + PBUF_TRANSPORT_HLEN;
 8011590:	2336      	movs	r3, #54	; 0x36
 8011592:	81fb      	strh	r3, [r7, #14]
    break;
 8011594:	e014      	b.n	80115c0 <pbuf_alloced_custom+0x64>
  case PBUF_IP:
    /* add room for IP layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN + PBUF_IP_HLEN;
 8011596:	2322      	movs	r3, #34	; 0x22
 8011598:	81fb      	strh	r3, [r7, #14]
    break;
 801159a:	e011      	b.n	80115c0 <pbuf_alloced_custom+0x64>
  case PBUF_LINK:
    /* add room for link layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN;
 801159c:	230e      	movs	r3, #14
 801159e:	81fb      	strh	r3, [r7, #14]
    break;
 80115a0:	e00e      	b.n	80115c0 <pbuf_alloced_custom+0x64>
  case PBUF_RAW_TX:
    /* add room for encapsulating link layer headers (e.g. 802.11) */
    offset = PBUF_LINK_ENCAPSULATION_HLEN;
 80115a2:	2300      	movs	r3, #0
 80115a4:	81fb      	strh	r3, [r7, #14]
    break;
 80115a6:	e00b      	b.n	80115c0 <pbuf_alloced_custom+0x64>
  case PBUF_RAW:
    offset = 0;
 80115a8:	2300      	movs	r3, #0
 80115aa:	81fb      	strh	r3, [r7, #14]
    break;
 80115ac:	e008      	b.n	80115c0 <pbuf_alloced_custom+0x64>
  default:
    LWIP_ASSERT("pbuf_alloced_custom: bad pbuf layer", 0);
 80115ae:	4b1d      	ldr	r3, [pc, #116]	; (8011624 <pbuf_alloced_custom+0xc8>)
 80115b0:	f240 12c5 	movw	r2, #453	; 0x1c5
 80115b4:	491c      	ldr	r1, [pc, #112]	; (8011628 <pbuf_alloced_custom+0xcc>)
 80115b6:	481d      	ldr	r0, [pc, #116]	; (801162c <pbuf_alloced_custom+0xd0>)
 80115b8:	f009 fc1a 	bl	801adf0 <iprintf>
    return NULL;
 80115bc:	2300      	movs	r3, #0
 80115be:	e02d      	b.n	801161c <pbuf_alloced_custom+0xc0>
  }

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 80115c0:	89fb      	ldrh	r3, [r7, #14]
 80115c2:	3303      	adds	r3, #3
 80115c4:	f023 0203 	bic.w	r2, r3, #3
 80115c8:	88bb      	ldrh	r3, [r7, #4]
 80115ca:	441a      	add	r2, r3
 80115cc:	8bbb      	ldrh	r3, [r7, #28]
 80115ce:	429a      	cmp	r2, r3
 80115d0:	d901      	bls.n	80115d6 <pbuf_alloced_custom+0x7a>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 80115d2:	2300      	movs	r3, #0
 80115d4:	e022      	b.n	801161c <pbuf_alloced_custom+0xc0>
  }

  p->pbuf.next = NULL;
 80115d6:	683b      	ldr	r3, [r7, #0]
 80115d8:	2200      	movs	r2, #0
 80115da:	601a      	str	r2, [r3, #0]
  if (payload_mem != NULL) {
 80115dc:	69bb      	ldr	r3, [r7, #24]
 80115de:	2b00      	cmp	r3, #0
 80115e0:	d008      	beq.n	80115f4 <pbuf_alloced_custom+0x98>
    p->pbuf.payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 80115e2:	89fb      	ldrh	r3, [r7, #14]
 80115e4:	3303      	adds	r3, #3
 80115e6:	f023 0303 	bic.w	r3, r3, #3
 80115ea:	69ba      	ldr	r2, [r7, #24]
 80115ec:	441a      	add	r2, r3
 80115ee:	683b      	ldr	r3, [r7, #0]
 80115f0:	605a      	str	r2, [r3, #4]
 80115f2:	e002      	b.n	80115fa <pbuf_alloced_custom+0x9e>
  } else {
    p->pbuf.payload = NULL;
 80115f4:	683b      	ldr	r3, [r7, #0]
 80115f6:	2200      	movs	r2, #0
 80115f8:	605a      	str	r2, [r3, #4]
  }
  p->pbuf.flags = PBUF_FLAG_IS_CUSTOM;
 80115fa:	683b      	ldr	r3, [r7, #0]
 80115fc:	2202      	movs	r2, #2
 80115fe:	735a      	strb	r2, [r3, #13]
  p->pbuf.len = p->pbuf.tot_len = length;
 8011600:	683b      	ldr	r3, [r7, #0]
 8011602:	88ba      	ldrh	r2, [r7, #4]
 8011604:	811a      	strh	r2, [r3, #8]
 8011606:	683b      	ldr	r3, [r7, #0]
 8011608:	891a      	ldrh	r2, [r3, #8]
 801160a:	683b      	ldr	r3, [r7, #0]
 801160c:	815a      	strh	r2, [r3, #10]
  p->pbuf.type = type;
 801160e:	683b      	ldr	r3, [r7, #0]
 8011610:	79ba      	ldrb	r2, [r7, #6]
 8011612:	731a      	strb	r2, [r3, #12]
  p->pbuf.ref = 1;
 8011614:	683b      	ldr	r3, [r7, #0]
 8011616:	2201      	movs	r2, #1
 8011618:	81da      	strh	r2, [r3, #14]
  return &p->pbuf;
 801161a:	683b      	ldr	r3, [r7, #0]
}
 801161c:	4618      	mov	r0, r3
 801161e:	3710      	adds	r7, #16
 8011620:	46bd      	mov	sp, r7
 8011622:	bd80      	pop	{r7, pc}
 8011624:	0801cd88 	.word	0x0801cd88
 8011628:	0801cf20 	.word	0x0801cf20
 801162c:	0801cdd4 	.word	0x0801cdd4

08011630 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 8011630:	b580      	push	{r7, lr}
 8011632:	b086      	sub	sp, #24
 8011634:	af00      	add	r7, sp, #0
 8011636:	6078      	str	r0, [r7, #4]
 8011638:	460b      	mov	r3, r1
 801163a:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  s32_t grow;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 801163c:	687b      	ldr	r3, [r7, #4]
 801163e:	2b00      	cmp	r3, #0
 8011640:	d106      	bne.n	8011650 <pbuf_realloc+0x20>
 8011642:	4b4b      	ldr	r3, [pc, #300]	; (8011770 <pbuf_realloc+0x140>)
 8011644:	f240 12f3 	movw	r2, #499	; 0x1f3
 8011648:	494a      	ldr	r1, [pc, #296]	; (8011774 <pbuf_realloc+0x144>)
 801164a:	484b      	ldr	r0, [pc, #300]	; (8011778 <pbuf_realloc+0x148>)
 801164c:	f009 fbd0 	bl	801adf0 <iprintf>
  LWIP_ASSERT("pbuf_realloc: sane p->type", p->type == PBUF_POOL ||
 8011650:	687b      	ldr	r3, [r7, #4]
 8011652:	7b1b      	ldrb	r3, [r3, #12]
 8011654:	2b03      	cmp	r3, #3
 8011656:	d012      	beq.n	801167e <pbuf_realloc+0x4e>
 8011658:	687b      	ldr	r3, [r7, #4]
 801165a:	7b1b      	ldrb	r3, [r3, #12]
 801165c:	2b01      	cmp	r3, #1
 801165e:	d00e      	beq.n	801167e <pbuf_realloc+0x4e>
 8011660:	687b      	ldr	r3, [r7, #4]
 8011662:	7b1b      	ldrb	r3, [r3, #12]
 8011664:	2b00      	cmp	r3, #0
 8011666:	d00a      	beq.n	801167e <pbuf_realloc+0x4e>
 8011668:	687b      	ldr	r3, [r7, #4]
 801166a:	7b1b      	ldrb	r3, [r3, #12]
 801166c:	2b02      	cmp	r3, #2
 801166e:	d006      	beq.n	801167e <pbuf_realloc+0x4e>
 8011670:	4b3f      	ldr	r3, [pc, #252]	; (8011770 <pbuf_realloc+0x140>)
 8011672:	f240 12f7 	movw	r2, #503	; 0x1f7
 8011676:	4941      	ldr	r1, [pc, #260]	; (801177c <pbuf_realloc+0x14c>)
 8011678:	483f      	ldr	r0, [pc, #252]	; (8011778 <pbuf_realloc+0x148>)
 801167a:	f009 fbb9 	bl	801adf0 <iprintf>
              p->type == PBUF_ROM ||
              p->type == PBUF_RAM ||
              p->type == PBUF_REF);

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 801167e:	687b      	ldr	r3, [r7, #4]
 8011680:	891b      	ldrh	r3, [r3, #8]
 8011682:	887a      	ldrh	r2, [r7, #2]
 8011684:	429a      	cmp	r2, r3
 8011686:	d26f      	bcs.n	8011768 <pbuf_realloc+0x138>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  grow = new_len - p->tot_len;
 8011688:	887b      	ldrh	r3, [r7, #2]
 801168a:	687a      	ldr	r2, [r7, #4]
 801168c:	8912      	ldrh	r2, [r2, #8]
 801168e:	1a9b      	subs	r3, r3, r2
 8011690:	60fb      	str	r3, [r7, #12]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 8011692:	887b      	ldrh	r3, [r7, #2]
 8011694:	827b      	strh	r3, [r7, #18]
  q = p;
 8011696:	687b      	ldr	r3, [r7, #4]
 8011698:	617b      	str	r3, [r7, #20]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 801169a:	e025      	b.n	80116e8 <pbuf_realloc+0xb8>
    /* decrease remaining length by pbuf length */
    rem_len -= q->len;
 801169c:	697b      	ldr	r3, [r7, #20]
 801169e:	895b      	ldrh	r3, [r3, #10]
 80116a0:	8a7a      	ldrh	r2, [r7, #18]
 80116a2:	1ad3      	subs	r3, r2, r3
 80116a4:	827b      	strh	r3, [r7, #18]
    /* decrease total length indicator */
    LWIP_ASSERT("grow < max_u16_t", grow < 0xffff);
 80116a6:	68fb      	ldr	r3, [r7, #12]
 80116a8:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80116ac:	4293      	cmp	r3, r2
 80116ae:	dd06      	ble.n	80116be <pbuf_realloc+0x8e>
 80116b0:	4b2f      	ldr	r3, [pc, #188]	; (8011770 <pbuf_realloc+0x140>)
 80116b2:	f240 220b 	movw	r2, #523	; 0x20b
 80116b6:	4932      	ldr	r1, [pc, #200]	; (8011780 <pbuf_realloc+0x150>)
 80116b8:	482f      	ldr	r0, [pc, #188]	; (8011778 <pbuf_realloc+0x148>)
 80116ba:	f009 fb99 	bl	801adf0 <iprintf>
    q->tot_len += (u16_t)grow;
 80116be:	697b      	ldr	r3, [r7, #20]
 80116c0:	891a      	ldrh	r2, [r3, #8]
 80116c2:	68fb      	ldr	r3, [r7, #12]
 80116c4:	b29b      	uxth	r3, r3
 80116c6:	4413      	add	r3, r2
 80116c8:	b29a      	uxth	r2, r3
 80116ca:	697b      	ldr	r3, [r7, #20]
 80116cc:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 80116ce:	697b      	ldr	r3, [r7, #20]
 80116d0:	681b      	ldr	r3, [r3, #0]
 80116d2:	617b      	str	r3, [r7, #20]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 80116d4:	697b      	ldr	r3, [r7, #20]
 80116d6:	2b00      	cmp	r3, #0
 80116d8:	d106      	bne.n	80116e8 <pbuf_realloc+0xb8>
 80116da:	4b25      	ldr	r3, [pc, #148]	; (8011770 <pbuf_realloc+0x140>)
 80116dc:	f240 220f 	movw	r2, #527	; 0x20f
 80116e0:	4928      	ldr	r1, [pc, #160]	; (8011784 <pbuf_realloc+0x154>)
 80116e2:	4825      	ldr	r0, [pc, #148]	; (8011778 <pbuf_realloc+0x148>)
 80116e4:	f009 fb84 	bl	801adf0 <iprintf>
  while (rem_len > q->len) {
 80116e8:	697b      	ldr	r3, [r7, #20]
 80116ea:	895b      	ldrh	r3, [r3, #10]
 80116ec:	8a7a      	ldrh	r2, [r7, #18]
 80116ee:	429a      	cmp	r2, r3
 80116f0:	d8d4      	bhi.n	801169c <pbuf_realloc+0x6c>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if ((q->type == PBUF_RAM) && (rem_len != q->len)
 80116f2:	697b      	ldr	r3, [r7, #20]
 80116f4:	7b1b      	ldrb	r3, [r3, #12]
 80116f6:	2b00      	cmp	r3, #0
 80116f8:	d122      	bne.n	8011740 <pbuf_realloc+0x110>
 80116fa:	697b      	ldr	r3, [r7, #20]
 80116fc:	895b      	ldrh	r3, [r3, #10]
 80116fe:	8a7a      	ldrh	r2, [r7, #18]
 8011700:	429a      	cmp	r2, r3
 8011702:	d01d      	beq.n	8011740 <pbuf_realloc+0x110>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 8011704:	697b      	ldr	r3, [r7, #20]
 8011706:	7b5b      	ldrb	r3, [r3, #13]
 8011708:	f003 0302 	and.w	r3, r3, #2
 801170c:	2b00      	cmp	r3, #0
 801170e:	d117      	bne.n	8011740 <pbuf_realloc+0x110>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (u16_t)((u8_t *)q->payload - (u8_t *)q) + rem_len);
 8011710:	697b      	ldr	r3, [r7, #20]
 8011712:	685b      	ldr	r3, [r3, #4]
 8011714:	461a      	mov	r2, r3
 8011716:	697b      	ldr	r3, [r7, #20]
 8011718:	1ad3      	subs	r3, r2, r3
 801171a:	b29a      	uxth	r2, r3
 801171c:	8a7b      	ldrh	r3, [r7, #18]
 801171e:	4413      	add	r3, r2
 8011720:	b29b      	uxth	r3, r3
 8011722:	4619      	mov	r1, r3
 8011724:	6978      	ldr	r0, [r7, #20]
 8011726:	f7ff f8f1 	bl	801090c <mem_trim>
 801172a:	6178      	str	r0, [r7, #20]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 801172c:	697b      	ldr	r3, [r7, #20]
 801172e:	2b00      	cmp	r3, #0
 8011730:	d106      	bne.n	8011740 <pbuf_realloc+0x110>
 8011732:	4b0f      	ldr	r3, [pc, #60]	; (8011770 <pbuf_realloc+0x140>)
 8011734:	f240 221d 	movw	r2, #541	; 0x21d
 8011738:	4913      	ldr	r1, [pc, #76]	; (8011788 <pbuf_realloc+0x158>)
 801173a:	480f      	ldr	r0, [pc, #60]	; (8011778 <pbuf_realloc+0x148>)
 801173c:	f009 fb58 	bl	801adf0 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 8011740:	697b      	ldr	r3, [r7, #20]
 8011742:	8a7a      	ldrh	r2, [r7, #18]
 8011744:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 8011746:	697b      	ldr	r3, [r7, #20]
 8011748:	895a      	ldrh	r2, [r3, #10]
 801174a:	697b      	ldr	r3, [r7, #20]
 801174c:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 801174e:	697b      	ldr	r3, [r7, #20]
 8011750:	681b      	ldr	r3, [r3, #0]
 8011752:	2b00      	cmp	r3, #0
 8011754:	d004      	beq.n	8011760 <pbuf_realloc+0x130>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 8011756:	697b      	ldr	r3, [r7, #20]
 8011758:	681b      	ldr	r3, [r3, #0]
 801175a:	4618      	mov	r0, r3
 801175c:	f000 f8dc 	bl	8011918 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 8011760:	697b      	ldr	r3, [r7, #20]
 8011762:	2200      	movs	r2, #0
 8011764:	601a      	str	r2, [r3, #0]
 8011766:	e000      	b.n	801176a <pbuf_realloc+0x13a>
    return;
 8011768:	bf00      	nop

}
 801176a:	3718      	adds	r7, #24
 801176c:	46bd      	mov	sp, r7
 801176e:	bd80      	pop	{r7, pc}
 8011770:	0801cd88 	.word	0x0801cd88
 8011774:	0801cf44 	.word	0x0801cf44
 8011778:	0801cdd4 	.word	0x0801cdd4
 801177c:	0801cf5c 	.word	0x0801cf5c
 8011780:	0801cf78 	.word	0x0801cf78
 8011784:	0801cf8c 	.word	0x0801cf8c
 8011788:	0801cfa4 	.word	0x0801cfa4

0801178c <pbuf_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 801178c:	b580      	push	{r7, lr}
 801178e:	b084      	sub	sp, #16
 8011790:	af00      	add	r7, sp, #0
 8011792:	6078      	str	r0, [r7, #4]
 8011794:	460b      	mov	r3, r1
 8011796:	807b      	strh	r3, [r7, #2]
 8011798:	4613      	mov	r3, r2
 801179a:	707b      	strb	r3, [r7, #1]
  u16_t type;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 801179c:	687b      	ldr	r3, [r7, #4]
 801179e:	2b00      	cmp	r3, #0
 80117a0:	d106      	bne.n	80117b0 <pbuf_header_impl+0x24>
 80117a2:	4b46      	ldr	r3, [pc, #280]	; (80118bc <pbuf_header_impl+0x130>)
 80117a4:	f240 223f 	movw	r2, #575	; 0x23f
 80117a8:	4945      	ldr	r1, [pc, #276]	; (80118c0 <pbuf_header_impl+0x134>)
 80117aa:	4846      	ldr	r0, [pc, #280]	; (80118c4 <pbuf_header_impl+0x138>)
 80117ac:	f009 fb20 	bl	801adf0 <iprintf>
  if ((header_size_increment == 0) || (p == NULL)) {
 80117b0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80117b4:	2b00      	cmp	r3, #0
 80117b6:	d002      	beq.n	80117be <pbuf_header_impl+0x32>
 80117b8:	687b      	ldr	r3, [r7, #4]
 80117ba:	2b00      	cmp	r3, #0
 80117bc:	d101      	bne.n	80117c2 <pbuf_header_impl+0x36>
    return 0;
 80117be:	2300      	movs	r3, #0
 80117c0:	e078      	b.n	80118b4 <pbuf_header_impl+0x128>
  }

  if (header_size_increment < 0) {
 80117c2:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80117c6:	2b00      	cmp	r3, #0
 80117c8:	da10      	bge.n	80117ec <pbuf_header_impl+0x60>
    increment_magnitude = (u16_t)-header_size_increment;
 80117ca:	887b      	ldrh	r3, [r7, #2]
 80117cc:	425b      	negs	r3, r3
 80117ce:	81fb      	strh	r3, [r7, #14]
    /* Check that we aren't going to move off the end of the pbuf */
    LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 80117d0:	687b      	ldr	r3, [r7, #4]
 80117d2:	895b      	ldrh	r3, [r3, #10]
 80117d4:	89fa      	ldrh	r2, [r7, #14]
 80117d6:	429a      	cmp	r2, r3
 80117d8:	d90a      	bls.n	80117f0 <pbuf_header_impl+0x64>
 80117da:	4b38      	ldr	r3, [pc, #224]	; (80118bc <pbuf_header_impl+0x130>)
 80117dc:	f240 2247 	movw	r2, #583	; 0x247
 80117e0:	4939      	ldr	r1, [pc, #228]	; (80118c8 <pbuf_header_impl+0x13c>)
 80117e2:	4838      	ldr	r0, [pc, #224]	; (80118c4 <pbuf_header_impl+0x138>)
 80117e4:	f009 fb04 	bl	801adf0 <iprintf>
 80117e8:	2301      	movs	r3, #1
 80117ea:	e063      	b.n	80118b4 <pbuf_header_impl+0x128>
  } else {
    increment_magnitude = (u16_t)header_size_increment;
 80117ec:	887b      	ldrh	r3, [r7, #2]
 80117ee:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("p->payload - increment_magnitude >= p + SIZEOF_STRUCT_PBUF",
                (u8_t *)p->payload - increment_magnitude >= (u8_t *)p + SIZEOF_STRUCT_PBUF);
#endif
  }

  type = p->type;
 80117f0:	687b      	ldr	r3, [r7, #4]
 80117f2:	7b1b      	ldrb	r3, [r3, #12]
 80117f4:	81bb      	strh	r3, [r7, #12]
  /* remember current payload pointer */
  payload = p->payload;
 80117f6:	687b      	ldr	r3, [r7, #4]
 80117f8:	685b      	ldr	r3, [r3, #4]
 80117fa:	60bb      	str	r3, [r7, #8]

  /* pbuf types containing payloads? */
  if (type == PBUF_RAM || type == PBUF_POOL) {
 80117fc:	89bb      	ldrh	r3, [r7, #12]
 80117fe:	2b00      	cmp	r3, #0
 8011800:	d002      	beq.n	8011808 <pbuf_header_impl+0x7c>
 8011802:	89bb      	ldrh	r3, [r7, #12]
 8011804:	2b03      	cmp	r3, #3
 8011806:	d112      	bne.n	801182e <pbuf_header_impl+0xa2>
    /* set new payload pointer */
    p->payload = (u8_t *)p->payload - header_size_increment;
 8011808:	687b      	ldr	r3, [r7, #4]
 801180a:	685a      	ldr	r2, [r3, #4]
 801180c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8011810:	425b      	negs	r3, r3
 8011812:	441a      	add	r2, r3
 8011814:	687b      	ldr	r3, [r7, #4]
 8011816:	605a      	str	r2, [r3, #4]
    /* boundary check fails? */
    if ((u8_t *)p->payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 8011818:	687b      	ldr	r3, [r7, #4]
 801181a:	685a      	ldr	r2, [r3, #4]
 801181c:	687b      	ldr	r3, [r7, #4]
 801181e:	3310      	adds	r3, #16
 8011820:	429a      	cmp	r2, r3
 8011822:	d238      	bcs.n	8011896 <pbuf_header_impl+0x10a>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
        ("pbuf_header: failed as %p < %p (not enough space for new header size)\n",
        (void *)p->payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* restore old payload pointer */
      p->payload = payload;
 8011824:	687b      	ldr	r3, [r7, #4]
 8011826:	68ba      	ldr	r2, [r7, #8]
 8011828:	605a      	str	r2, [r3, #4]
      /* bail out unsuccessfully */
      return 1;
 801182a:	2301      	movs	r3, #1
 801182c:	e042      	b.n	80118b4 <pbuf_header_impl+0x128>
    }
  /* pbuf types referring to external payloads? */
  } else if (type == PBUF_REF || type == PBUF_ROM) {
 801182e:	89bb      	ldrh	r3, [r7, #12]
 8011830:	2b02      	cmp	r3, #2
 8011832:	d002      	beq.n	801183a <pbuf_header_impl+0xae>
 8011834:	89bb      	ldrh	r3, [r7, #12]
 8011836:	2b01      	cmp	r3, #1
 8011838:	d124      	bne.n	8011884 <pbuf_header_impl+0xf8>
    /* hide a header in the payload? */
    if ((header_size_increment < 0) && (increment_magnitude <= p->len)) {
 801183a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 801183e:	2b00      	cmp	r3, #0
 8011840:	da0d      	bge.n	801185e <pbuf_header_impl+0xd2>
 8011842:	687b      	ldr	r3, [r7, #4]
 8011844:	895b      	ldrh	r3, [r3, #10]
 8011846:	89fa      	ldrh	r2, [r7, #14]
 8011848:	429a      	cmp	r2, r3
 801184a:	d808      	bhi.n	801185e <pbuf_header_impl+0xd2>
      /* increase payload pointer */
      p->payload = (u8_t *)p->payload - header_size_increment;
 801184c:	687b      	ldr	r3, [r7, #4]
 801184e:	685a      	ldr	r2, [r3, #4]
 8011850:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8011854:	425b      	negs	r3, r3
 8011856:	441a      	add	r2, r3
 8011858:	687b      	ldr	r3, [r7, #4]
 801185a:	605a      	str	r2, [r3, #4]
 801185c:	e011      	b.n	8011882 <pbuf_header_impl+0xf6>
    } else if ((header_size_increment > 0) && force) {
 801185e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8011862:	2b00      	cmp	r3, #0
 8011864:	dd0b      	ble.n	801187e <pbuf_header_impl+0xf2>
 8011866:	787b      	ldrb	r3, [r7, #1]
 8011868:	2b00      	cmp	r3, #0
 801186a:	d008      	beq.n	801187e <pbuf_header_impl+0xf2>
      p->payload = (u8_t *)p->payload - header_size_increment;
 801186c:	687b      	ldr	r3, [r7, #4]
 801186e:	685a      	ldr	r2, [r3, #4]
 8011870:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8011874:	425b      	negs	r3, r3
 8011876:	441a      	add	r2, r3
 8011878:	687b      	ldr	r3, [r7, #4]
 801187a:	605a      	str	r2, [r3, #4]
 801187c:	e001      	b.n	8011882 <pbuf_header_impl+0xf6>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 801187e:	2301      	movs	r3, #1
 8011880:	e018      	b.n	80118b4 <pbuf_header_impl+0x128>
    if ((header_size_increment < 0) && (increment_magnitude <= p->len)) {
 8011882:	e008      	b.n	8011896 <pbuf_header_impl+0x10a>
    }
  } else {
    /* Unknown type */
    LWIP_ASSERT("bad pbuf type", 0);
 8011884:	4b0d      	ldr	r3, [pc, #52]	; (80118bc <pbuf_header_impl+0x130>)
 8011886:	f240 2277 	movw	r2, #631	; 0x277
 801188a:	4910      	ldr	r1, [pc, #64]	; (80118cc <pbuf_header_impl+0x140>)
 801188c:	480d      	ldr	r0, [pc, #52]	; (80118c4 <pbuf_header_impl+0x138>)
 801188e:	f009 faaf 	bl	801adf0 <iprintf>
    return 1;
 8011892:	2301      	movs	r3, #1
 8011894:	e00e      	b.n	80118b4 <pbuf_header_impl+0x128>
  }
  /* modify pbuf length fields */
  p->len += header_size_increment;
 8011896:	687b      	ldr	r3, [r7, #4]
 8011898:	895a      	ldrh	r2, [r3, #10]
 801189a:	887b      	ldrh	r3, [r7, #2]
 801189c:	4413      	add	r3, r2
 801189e:	b29a      	uxth	r2, r3
 80118a0:	687b      	ldr	r3, [r7, #4]
 80118a2:	815a      	strh	r2, [r3, #10]
  p->tot_len += header_size_increment;
 80118a4:	687b      	ldr	r3, [r7, #4]
 80118a6:	891a      	ldrh	r2, [r3, #8]
 80118a8:	887b      	ldrh	r3, [r7, #2]
 80118aa:	4413      	add	r3, r2
 80118ac:	b29a      	uxth	r2, r3
 80118ae:	687b      	ldr	r3, [r7, #4]
 80118b0:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_header: old %p new %p (%"S16_F")\n",
    (void *)payload, (void *)p->payload, header_size_increment));

  return 0;
 80118b2:	2300      	movs	r3, #0
}
 80118b4:	4618      	mov	r0, r3
 80118b6:	3710      	adds	r7, #16
 80118b8:	46bd      	mov	sp, r7
 80118ba:	bd80      	pop	{r7, pc}
 80118bc:	0801cd88 	.word	0x0801cd88
 80118c0:	0801cfc0 	.word	0x0801cfc0
 80118c4:	0801cdd4 	.word	0x0801cdd4
 80118c8:	0801cfcc 	.word	0x0801cfcc
 80118cc:	0801cfec 	.word	0x0801cfec

080118d0 <pbuf_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_header(struct pbuf *p, s16_t header_size_increment)
{
 80118d0:	b580      	push	{r7, lr}
 80118d2:	b082      	sub	sp, #8
 80118d4:	af00      	add	r7, sp, #0
 80118d6:	6078      	str	r0, [r7, #4]
 80118d8:	460b      	mov	r3, r1
 80118da:	807b      	strh	r3, [r7, #2]
   return pbuf_header_impl(p, header_size_increment, 0);
 80118dc:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80118e0:	2200      	movs	r2, #0
 80118e2:	4619      	mov	r1, r3
 80118e4:	6878      	ldr	r0, [r7, #4]
 80118e6:	f7ff ff51 	bl	801178c <pbuf_header_impl>
 80118ea:	4603      	mov	r3, r0
}
 80118ec:	4618      	mov	r0, r3
 80118ee:	3708      	adds	r7, #8
 80118f0:	46bd      	mov	sp, r7
 80118f2:	bd80      	pop	{r7, pc}

080118f4 <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 80118f4:	b580      	push	{r7, lr}
 80118f6:	b082      	sub	sp, #8
 80118f8:	af00      	add	r7, sp, #0
 80118fa:	6078      	str	r0, [r7, #4]
 80118fc:	460b      	mov	r3, r1
 80118fe:	807b      	strh	r3, [r7, #2]
   return pbuf_header_impl(p, header_size_increment, 1);
 8011900:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8011904:	2201      	movs	r2, #1
 8011906:	4619      	mov	r1, r3
 8011908:	6878      	ldr	r0, [r7, #4]
 801190a:	f7ff ff3f 	bl	801178c <pbuf_header_impl>
 801190e:	4603      	mov	r3, r0
}
 8011910:	4618      	mov	r0, r3
 8011912:	3708      	adds	r7, #8
 8011914:	46bd      	mov	sp, r7
 8011916:	bd80      	pop	{r7, pc}

08011918 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 8011918:	b580      	push	{r7, lr}
 801191a:	b088      	sub	sp, #32
 801191c:	af00      	add	r7, sp, #0
 801191e:	6078      	str	r0, [r7, #4]
  u16_t type;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 8011920:	687b      	ldr	r3, [r7, #4]
 8011922:	2b00      	cmp	r3, #0
 8011924:	d10b      	bne.n	801193e <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 8011926:	687b      	ldr	r3, [r7, #4]
 8011928:	2b00      	cmp	r3, #0
 801192a:	d106      	bne.n	801193a <pbuf_free+0x22>
 801192c:	4b41      	ldr	r3, [pc, #260]	; (8011a34 <pbuf_free+0x11c>)
 801192e:	f240 22d2 	movw	r2, #722	; 0x2d2
 8011932:	4941      	ldr	r1, [pc, #260]	; (8011a38 <pbuf_free+0x120>)
 8011934:	4841      	ldr	r0, [pc, #260]	; (8011a3c <pbuf_free+0x124>)
 8011936:	f009 fa5b 	bl	801adf0 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
      ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 801193a:	2300      	movs	r3, #0
 801193c:	e076      	b.n	8011a2c <pbuf_free+0x114>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  LWIP_ASSERT("pbuf_free: sane type",
 801193e:	687b      	ldr	r3, [r7, #4]
 8011940:	7b1b      	ldrb	r3, [r3, #12]
 8011942:	2b00      	cmp	r3, #0
 8011944:	d012      	beq.n	801196c <pbuf_free+0x54>
 8011946:	687b      	ldr	r3, [r7, #4]
 8011948:	7b1b      	ldrb	r3, [r3, #12]
 801194a:	2b01      	cmp	r3, #1
 801194c:	d00e      	beq.n	801196c <pbuf_free+0x54>
 801194e:	687b      	ldr	r3, [r7, #4]
 8011950:	7b1b      	ldrb	r3, [r3, #12]
 8011952:	2b02      	cmp	r3, #2
 8011954:	d00a      	beq.n	801196c <pbuf_free+0x54>
 8011956:	687b      	ldr	r3, [r7, #4]
 8011958:	7b1b      	ldrb	r3, [r3, #12]
 801195a:	2b03      	cmp	r3, #3
 801195c:	d006      	beq.n	801196c <pbuf_free+0x54>
 801195e:	4b35      	ldr	r3, [pc, #212]	; (8011a34 <pbuf_free+0x11c>)
 8011960:	f240 22de 	movw	r2, #734	; 0x2de
 8011964:	4936      	ldr	r1, [pc, #216]	; (8011a40 <pbuf_free+0x128>)
 8011966:	4835      	ldr	r0, [pc, #212]	; (8011a3c <pbuf_free+0x124>)
 8011968:	f009 fa42 	bl	801adf0 <iprintf>
    p->type == PBUF_RAM || p->type == PBUF_ROM ||
    p->type == PBUF_REF || p->type == PBUF_POOL);

  count = 0;
 801196c:	2300      	movs	r3, #0
 801196e:	77fb      	strb	r3, [r7, #31]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 8011970:	e058      	b.n	8011a24 <pbuf_free+0x10c>
    u16_t ref;
    SYS_ARCH_DECL_PROTECT(old_level);
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
 8011972:	f008 fc47 	bl	801a204 <sys_arch_protect>
 8011976:	61b8      	str	r0, [r7, #24]
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 8011978:	687b      	ldr	r3, [r7, #4]
 801197a:	89db      	ldrh	r3, [r3, #14]
 801197c:	2b00      	cmp	r3, #0
 801197e:	d106      	bne.n	801198e <pbuf_free+0x76>
 8011980:	4b2c      	ldr	r3, [pc, #176]	; (8011a34 <pbuf_free+0x11c>)
 8011982:	f240 22eb 	movw	r2, #747	; 0x2eb
 8011986:	492f      	ldr	r1, [pc, #188]	; (8011a44 <pbuf_free+0x12c>)
 8011988:	482c      	ldr	r0, [pc, #176]	; (8011a3c <pbuf_free+0x124>)
 801198a:	f009 fa31 	bl	801adf0 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 801198e:	687b      	ldr	r3, [r7, #4]
 8011990:	89db      	ldrh	r3, [r3, #14]
 8011992:	3b01      	subs	r3, #1
 8011994:	b29a      	uxth	r2, r3
 8011996:	687b      	ldr	r3, [r7, #4]
 8011998:	81da      	strh	r2, [r3, #14]
 801199a:	687b      	ldr	r3, [r7, #4]
 801199c:	89db      	ldrh	r3, [r3, #14]
 801199e:	82fb      	strh	r3, [r7, #22]
    SYS_ARCH_UNPROTECT(old_level);
 80119a0:	69b8      	ldr	r0, [r7, #24]
 80119a2:	f008 fc3d 	bl	801a220 <sys_arch_unprotect>
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 80119a6:	8afb      	ldrh	r3, [r7, #22]
 80119a8:	2b00      	cmp	r3, #0
 80119aa:	d139      	bne.n	8011a20 <pbuf_free+0x108>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 80119ac:	687b      	ldr	r3, [r7, #4]
 80119ae:	681b      	ldr	r3, [r3, #0]
 80119b0:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      type = p->type;
 80119b2:	687b      	ldr	r3, [r7, #4]
 80119b4:	7b1b      	ldrb	r3, [r3, #12]
 80119b6:	81fb      	strh	r3, [r7, #14]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 80119b8:	687b      	ldr	r3, [r7, #4]
 80119ba:	7b5b      	ldrb	r3, [r3, #13]
 80119bc:	f003 0302 	and.w	r3, r3, #2
 80119c0:	2b00      	cmp	r3, #0
 80119c2:	d011      	beq.n	80119e8 <pbuf_free+0xd0>
        struct pbuf_custom *pc = (struct pbuf_custom*)p;
 80119c4:	687b      	ldr	r3, [r7, #4]
 80119c6:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 80119c8:	68bb      	ldr	r3, [r7, #8]
 80119ca:	691b      	ldr	r3, [r3, #16]
 80119cc:	2b00      	cmp	r3, #0
 80119ce:	d106      	bne.n	80119de <pbuf_free+0xc6>
 80119d0:	4b18      	ldr	r3, [pc, #96]	; (8011a34 <pbuf_free+0x11c>)
 80119d2:	f240 22f9 	movw	r2, #761	; 0x2f9
 80119d6:	491c      	ldr	r1, [pc, #112]	; (8011a48 <pbuf_free+0x130>)
 80119d8:	4818      	ldr	r0, [pc, #96]	; (8011a3c <pbuf_free+0x124>)
 80119da:	f009 fa09 	bl	801adf0 <iprintf>
        pc->custom_free_function(p);
 80119de:	68bb      	ldr	r3, [r7, #8]
 80119e0:	691b      	ldr	r3, [r3, #16]
 80119e2:	6878      	ldr	r0, [r7, #4]
 80119e4:	4798      	blx	r3
 80119e6:	e015      	b.n	8011a14 <pbuf_free+0xfc>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (type == PBUF_POOL) {
 80119e8:	89fb      	ldrh	r3, [r7, #14]
 80119ea:	2b03      	cmp	r3, #3
 80119ec:	d104      	bne.n	80119f8 <pbuf_free+0xe0>
          memp_free(MEMP_PBUF_POOL, p);
 80119ee:	6879      	ldr	r1, [r7, #4]
 80119f0:	200c      	movs	r0, #12
 80119f2:	f7ff fa37 	bl	8010e64 <memp_free>
 80119f6:	e00d      	b.n	8011a14 <pbuf_free+0xfc>
        /* is this a ROM or RAM referencing pbuf? */
        } else if (type == PBUF_ROM || type == PBUF_REF) {
 80119f8:	89fb      	ldrh	r3, [r7, #14]
 80119fa:	2b01      	cmp	r3, #1
 80119fc:	d002      	beq.n	8011a04 <pbuf_free+0xec>
 80119fe:	89fb      	ldrh	r3, [r7, #14]
 8011a00:	2b02      	cmp	r3, #2
 8011a02:	d104      	bne.n	8011a0e <pbuf_free+0xf6>
          memp_free(MEMP_PBUF, p);
 8011a04:	6879      	ldr	r1, [r7, #4]
 8011a06:	200b      	movs	r0, #11
 8011a08:	f7ff fa2c 	bl	8010e64 <memp_free>
 8011a0c:	e002      	b.n	8011a14 <pbuf_free+0xfc>
        /* type == PBUF_RAM */
        } else {
          mem_free(p);
 8011a0e:	6878      	ldr	r0, [r7, #4]
 8011a10:	f7fe ff0e 	bl	8010830 <mem_free>
        }
      }
      count++;
 8011a14:	7ffb      	ldrb	r3, [r7, #31]
 8011a16:	3301      	adds	r3, #1
 8011a18:	77fb      	strb	r3, [r7, #31]
      /* proceed to next pbuf */
      p = q;
 8011a1a:	693b      	ldr	r3, [r7, #16]
 8011a1c:	607b      	str	r3, [r7, #4]
 8011a1e:	e001      	b.n	8011a24 <pbuf_free+0x10c>
    /* p->ref > 0, this pbuf is still referenced to */
    /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, ref));
      /* stop walking through the chain */
      p = NULL;
 8011a20:	2300      	movs	r3, #0
 8011a22:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8011a24:	687b      	ldr	r3, [r7, #4]
 8011a26:	2b00      	cmp	r3, #0
 8011a28:	d1a3      	bne.n	8011972 <pbuf_free+0x5a>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 8011a2a:	7ffb      	ldrb	r3, [r7, #31]
}
 8011a2c:	4618      	mov	r0, r3
 8011a2e:	3720      	adds	r7, #32
 8011a30:	46bd      	mov	sp, r7
 8011a32:	bd80      	pop	{r7, pc}
 8011a34:	0801cd88 	.word	0x0801cd88
 8011a38:	0801cfc0 	.word	0x0801cfc0
 8011a3c:	0801cdd4 	.word	0x0801cdd4
 8011a40:	0801cffc 	.word	0x0801cffc
 8011a44:	0801d014 	.word	0x0801d014
 8011a48:	0801d02c 	.word	0x0801d02c

08011a4c <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 8011a4c:	b480      	push	{r7}
 8011a4e:	b085      	sub	sp, #20
 8011a50:	af00      	add	r7, sp, #0
 8011a52:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 8011a54:	2300      	movs	r3, #0
 8011a56:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 8011a58:	e005      	b.n	8011a66 <pbuf_clen+0x1a>
    ++len;
 8011a5a:	89fb      	ldrh	r3, [r7, #14]
 8011a5c:	3301      	adds	r3, #1
 8011a5e:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 8011a60:	687b      	ldr	r3, [r7, #4]
 8011a62:	681b      	ldr	r3, [r3, #0]
 8011a64:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8011a66:	687b      	ldr	r3, [r7, #4]
 8011a68:	2b00      	cmp	r3, #0
 8011a6a:	d1f6      	bne.n	8011a5a <pbuf_clen+0xe>
  }
  return len;
 8011a6c:	89fb      	ldrh	r3, [r7, #14]
}
 8011a6e:	4618      	mov	r0, r3
 8011a70:	3714      	adds	r7, #20
 8011a72:	46bd      	mov	sp, r7
 8011a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a78:	4770      	bx	lr
	...

08011a7c <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 8011a7c:	b580      	push	{r7, lr}
 8011a7e:	b084      	sub	sp, #16
 8011a80:	af00      	add	r7, sp, #0
 8011a82:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 8011a84:	687b      	ldr	r3, [r7, #4]
 8011a86:	2b00      	cmp	r3, #0
 8011a88:	d016      	beq.n	8011ab8 <pbuf_ref+0x3c>
    SYS_ARCH_INC(p->ref, 1);
 8011a8a:	f008 fbbb 	bl	801a204 <sys_arch_protect>
 8011a8e:	60f8      	str	r0, [r7, #12]
 8011a90:	687b      	ldr	r3, [r7, #4]
 8011a92:	89db      	ldrh	r3, [r3, #14]
 8011a94:	3301      	adds	r3, #1
 8011a96:	b29a      	uxth	r2, r3
 8011a98:	687b      	ldr	r3, [r7, #4]
 8011a9a:	81da      	strh	r2, [r3, #14]
 8011a9c:	68f8      	ldr	r0, [r7, #12]
 8011a9e:	f008 fbbf 	bl	801a220 <sys_arch_unprotect>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 8011aa2:	687b      	ldr	r3, [r7, #4]
 8011aa4:	89db      	ldrh	r3, [r3, #14]
 8011aa6:	2b00      	cmp	r3, #0
 8011aa8:	d106      	bne.n	8011ab8 <pbuf_ref+0x3c>
 8011aaa:	4b05      	ldr	r3, [pc, #20]	; (8011ac0 <pbuf_ref+0x44>)
 8011aac:	f240 3239 	movw	r2, #825	; 0x339
 8011ab0:	4904      	ldr	r1, [pc, #16]	; (8011ac4 <pbuf_ref+0x48>)
 8011ab2:	4805      	ldr	r0, [pc, #20]	; (8011ac8 <pbuf_ref+0x4c>)
 8011ab4:	f009 f99c 	bl	801adf0 <iprintf>
  }
}
 8011ab8:	bf00      	nop
 8011aba:	3710      	adds	r7, #16
 8011abc:	46bd      	mov	sp, r7
 8011abe:	bd80      	pop	{r7, pc}
 8011ac0:	0801cd88 	.word	0x0801cd88
 8011ac4:	0801d050 	.word	0x0801d050
 8011ac8:	0801cdd4 	.word	0x0801cdd4

08011acc <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 8011acc:	b580      	push	{r7, lr}
 8011ace:	b084      	sub	sp, #16
 8011ad0:	af00      	add	r7, sp, #0
 8011ad2:	6078      	str	r0, [r7, #4]
 8011ad4:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 8011ad6:	687b      	ldr	r3, [r7, #4]
 8011ad8:	2b00      	cmp	r3, #0
 8011ada:	d002      	beq.n	8011ae2 <pbuf_cat+0x16>
 8011adc:	683b      	ldr	r3, [r7, #0]
 8011ade:	2b00      	cmp	r3, #0
 8011ae0:	d107      	bne.n	8011af2 <pbuf_cat+0x26>
 8011ae2:	4b20      	ldr	r3, [pc, #128]	; (8011b64 <pbuf_cat+0x98>)
 8011ae4:	f240 324d 	movw	r2, #845	; 0x34d
 8011ae8:	491f      	ldr	r1, [pc, #124]	; (8011b68 <pbuf_cat+0x9c>)
 8011aea:	4820      	ldr	r0, [pc, #128]	; (8011b6c <pbuf_cat+0xa0>)
 8011aec:	f009 f980 	bl	801adf0 <iprintf>
 8011af0:	e034      	b.n	8011b5c <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 8011af2:	687b      	ldr	r3, [r7, #4]
 8011af4:	60fb      	str	r3, [r7, #12]
 8011af6:	e00a      	b.n	8011b0e <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len += t->tot_len;
 8011af8:	68fb      	ldr	r3, [r7, #12]
 8011afa:	891a      	ldrh	r2, [r3, #8]
 8011afc:	683b      	ldr	r3, [r7, #0]
 8011afe:	891b      	ldrh	r3, [r3, #8]
 8011b00:	4413      	add	r3, r2
 8011b02:	b29a      	uxth	r2, r3
 8011b04:	68fb      	ldr	r3, [r7, #12]
 8011b06:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 8011b08:	68fb      	ldr	r3, [r7, #12]
 8011b0a:	681b      	ldr	r3, [r3, #0]
 8011b0c:	60fb      	str	r3, [r7, #12]
 8011b0e:	68fb      	ldr	r3, [r7, #12]
 8011b10:	681b      	ldr	r3, [r3, #0]
 8011b12:	2b00      	cmp	r3, #0
 8011b14:	d1f0      	bne.n	8011af8 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 8011b16:	68fb      	ldr	r3, [r7, #12]
 8011b18:	891a      	ldrh	r2, [r3, #8]
 8011b1a:	68fb      	ldr	r3, [r7, #12]
 8011b1c:	895b      	ldrh	r3, [r3, #10]
 8011b1e:	429a      	cmp	r2, r3
 8011b20:	d006      	beq.n	8011b30 <pbuf_cat+0x64>
 8011b22:	4b10      	ldr	r3, [pc, #64]	; (8011b64 <pbuf_cat+0x98>)
 8011b24:	f240 3255 	movw	r2, #853	; 0x355
 8011b28:	4911      	ldr	r1, [pc, #68]	; (8011b70 <pbuf_cat+0xa4>)
 8011b2a:	4810      	ldr	r0, [pc, #64]	; (8011b6c <pbuf_cat+0xa0>)
 8011b2c:	f009 f960 	bl	801adf0 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 8011b30:	68fb      	ldr	r3, [r7, #12]
 8011b32:	681b      	ldr	r3, [r3, #0]
 8011b34:	2b00      	cmp	r3, #0
 8011b36:	d006      	beq.n	8011b46 <pbuf_cat+0x7a>
 8011b38:	4b0a      	ldr	r3, [pc, #40]	; (8011b64 <pbuf_cat+0x98>)
 8011b3a:	f240 3256 	movw	r2, #854	; 0x356
 8011b3e:	490d      	ldr	r1, [pc, #52]	; (8011b74 <pbuf_cat+0xa8>)
 8011b40:	480a      	ldr	r0, [pc, #40]	; (8011b6c <pbuf_cat+0xa0>)
 8011b42:	f009 f955 	bl	801adf0 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len += t->tot_len;
 8011b46:	68fb      	ldr	r3, [r7, #12]
 8011b48:	891a      	ldrh	r2, [r3, #8]
 8011b4a:	683b      	ldr	r3, [r7, #0]
 8011b4c:	891b      	ldrh	r3, [r3, #8]
 8011b4e:	4413      	add	r3, r2
 8011b50:	b29a      	uxth	r2, r3
 8011b52:	68fb      	ldr	r3, [r7, #12]
 8011b54:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 8011b56:	68fb      	ldr	r3, [r7, #12]
 8011b58:	683a      	ldr	r2, [r7, #0]
 8011b5a:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 8011b5c:	3710      	adds	r7, #16
 8011b5e:	46bd      	mov	sp, r7
 8011b60:	bd80      	pop	{r7, pc}
 8011b62:	bf00      	nop
 8011b64:	0801cd88 	.word	0x0801cd88
 8011b68:	0801d064 	.word	0x0801d064
 8011b6c:	0801cdd4 	.word	0x0801cdd4
 8011b70:	0801d09c 	.word	0x0801d09c
 8011b74:	0801d0cc 	.word	0x0801d0cc

08011b78 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 8011b78:	b580      	push	{r7, lr}
 8011b7a:	b084      	sub	sp, #16
 8011b7c:	af00      	add	r7, sp, #0
 8011b7e:	6078      	str	r0, [r7, #4]
 8011b80:	6039      	str	r1, [r7, #0]
  u16_t offset_to=0, offset_from=0, len;
 8011b82:	2300      	movs	r3, #0
 8011b84:	81fb      	strh	r3, [r7, #14]
 8011b86:	2300      	movs	r3, #0
 8011b88:	81bb      	strh	r3, [r7, #12]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
    (const void*)p_to, (const void*)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 8011b8a:	687b      	ldr	r3, [r7, #4]
 8011b8c:	2b00      	cmp	r3, #0
 8011b8e:	d008      	beq.n	8011ba2 <pbuf_copy+0x2a>
 8011b90:	683b      	ldr	r3, [r7, #0]
 8011b92:	2b00      	cmp	r3, #0
 8011b94:	d005      	beq.n	8011ba2 <pbuf_copy+0x2a>
 8011b96:	687b      	ldr	r3, [r7, #4]
 8011b98:	891a      	ldrh	r2, [r3, #8]
 8011b9a:	683b      	ldr	r3, [r7, #0]
 8011b9c:	891b      	ldrh	r3, [r3, #8]
 8011b9e:	429a      	cmp	r2, r3
 8011ba0:	d209      	bcs.n	8011bb6 <pbuf_copy+0x3e>
 8011ba2:	4b54      	ldr	r3, [pc, #336]	; (8011cf4 <pbuf_copy+0x17c>)
 8011ba4:	f240 32bd 	movw	r2, #957	; 0x3bd
 8011ba8:	4953      	ldr	r1, [pc, #332]	; (8011cf8 <pbuf_copy+0x180>)
 8011baa:	4854      	ldr	r0, [pc, #336]	; (8011cfc <pbuf_copy+0x184>)
 8011bac:	f009 f920 	bl	801adf0 <iprintf>
 8011bb0:	f06f 030f 	mvn.w	r3, #15
 8011bb4:	e099      	b.n	8011cea <pbuf_copy+0x172>

  /* iterate through pbuf chain */
  do
  {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 8011bb6:	687b      	ldr	r3, [r7, #4]
 8011bb8:	895b      	ldrh	r3, [r3, #10]
 8011bba:	461a      	mov	r2, r3
 8011bbc:	89fb      	ldrh	r3, [r7, #14]
 8011bbe:	1ad2      	subs	r2, r2, r3
 8011bc0:	683b      	ldr	r3, [r7, #0]
 8011bc2:	895b      	ldrh	r3, [r3, #10]
 8011bc4:	4619      	mov	r1, r3
 8011bc6:	89bb      	ldrh	r3, [r7, #12]
 8011bc8:	1acb      	subs	r3, r1, r3
 8011bca:	429a      	cmp	r2, r3
 8011bcc:	db05      	blt.n	8011bda <pbuf_copy+0x62>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 8011bce:	683b      	ldr	r3, [r7, #0]
 8011bd0:	895a      	ldrh	r2, [r3, #10]
 8011bd2:	89bb      	ldrh	r3, [r7, #12]
 8011bd4:	1ad3      	subs	r3, r2, r3
 8011bd6:	817b      	strh	r3, [r7, #10]
 8011bd8:	e004      	b.n	8011be4 <pbuf_copy+0x6c>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 8011bda:	687b      	ldr	r3, [r7, #4]
 8011bdc:	895a      	ldrh	r2, [r3, #10]
 8011bde:	89fb      	ldrh	r3, [r7, #14]
 8011be0:	1ad3      	subs	r3, r2, r3
 8011be2:	817b      	strh	r3, [r7, #10]
    }
    MEMCPY((u8_t*)p_to->payload + offset_to, (u8_t*)p_from->payload + offset_from, len);
 8011be4:	687b      	ldr	r3, [r7, #4]
 8011be6:	685a      	ldr	r2, [r3, #4]
 8011be8:	89fb      	ldrh	r3, [r7, #14]
 8011bea:	18d0      	adds	r0, r2, r3
 8011bec:	683b      	ldr	r3, [r7, #0]
 8011bee:	685a      	ldr	r2, [r3, #4]
 8011bf0:	89bb      	ldrh	r3, [r7, #12]
 8011bf2:	4413      	add	r3, r2
 8011bf4:	897a      	ldrh	r2, [r7, #10]
 8011bf6:	4619      	mov	r1, r3
 8011bf8:	f009 f83f 	bl	801ac7a <memcpy>
    offset_to += len;
 8011bfc:	89fa      	ldrh	r2, [r7, #14]
 8011bfe:	897b      	ldrh	r3, [r7, #10]
 8011c00:	4413      	add	r3, r2
 8011c02:	81fb      	strh	r3, [r7, #14]
    offset_from += len;
 8011c04:	89ba      	ldrh	r2, [r7, #12]
 8011c06:	897b      	ldrh	r3, [r7, #10]
 8011c08:	4413      	add	r3, r2
 8011c0a:	81bb      	strh	r3, [r7, #12]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 8011c0c:	687b      	ldr	r3, [r7, #4]
 8011c0e:	895b      	ldrh	r3, [r3, #10]
 8011c10:	89fa      	ldrh	r2, [r7, #14]
 8011c12:	429a      	cmp	r2, r3
 8011c14:	d906      	bls.n	8011c24 <pbuf_copy+0xac>
 8011c16:	4b37      	ldr	r3, [pc, #220]	; (8011cf4 <pbuf_copy+0x17c>)
 8011c18:	f240 32cd 	movw	r2, #973	; 0x3cd
 8011c1c:	4938      	ldr	r1, [pc, #224]	; (8011d00 <pbuf_copy+0x188>)
 8011c1e:	4837      	ldr	r0, [pc, #220]	; (8011cfc <pbuf_copy+0x184>)
 8011c20:	f009 f8e6 	bl	801adf0 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 8011c24:	683b      	ldr	r3, [r7, #0]
 8011c26:	895b      	ldrh	r3, [r3, #10]
 8011c28:	89ba      	ldrh	r2, [r7, #12]
 8011c2a:	429a      	cmp	r2, r3
 8011c2c:	d906      	bls.n	8011c3c <pbuf_copy+0xc4>
 8011c2e:	4b31      	ldr	r3, [pc, #196]	; (8011cf4 <pbuf_copy+0x17c>)
 8011c30:	f240 32ce 	movw	r2, #974	; 0x3ce
 8011c34:	4933      	ldr	r1, [pc, #204]	; (8011d04 <pbuf_copy+0x18c>)
 8011c36:	4831      	ldr	r0, [pc, #196]	; (8011cfc <pbuf_copy+0x184>)
 8011c38:	f009 f8da 	bl	801adf0 <iprintf>
    if (offset_from >= p_from->len) {
 8011c3c:	683b      	ldr	r3, [r7, #0]
 8011c3e:	895b      	ldrh	r3, [r3, #10]
 8011c40:	89ba      	ldrh	r2, [r7, #12]
 8011c42:	429a      	cmp	r2, r3
 8011c44:	d304      	bcc.n	8011c50 <pbuf_copy+0xd8>
      /* on to next p_from (if any) */
      offset_from = 0;
 8011c46:	2300      	movs	r3, #0
 8011c48:	81bb      	strh	r3, [r7, #12]
      p_from = p_from->next;
 8011c4a:	683b      	ldr	r3, [r7, #0]
 8011c4c:	681b      	ldr	r3, [r3, #0]
 8011c4e:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 8011c50:	687b      	ldr	r3, [r7, #4]
 8011c52:	895b      	ldrh	r3, [r3, #10]
 8011c54:	89fa      	ldrh	r2, [r7, #14]
 8011c56:	429a      	cmp	r2, r3
 8011c58:	d114      	bne.n	8011c84 <pbuf_copy+0x10c>
      /* on to next p_to (if any) */
      offset_to = 0;
 8011c5a:	2300      	movs	r3, #0
 8011c5c:	81fb      	strh	r3, [r7, #14]
      p_to = p_to->next;
 8011c5e:	687b      	ldr	r3, [r7, #4]
 8011c60:	681b      	ldr	r3, [r3, #0]
 8011c62:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL) , return ERR_ARG;);
 8011c64:	687b      	ldr	r3, [r7, #4]
 8011c66:	2b00      	cmp	r3, #0
 8011c68:	d10c      	bne.n	8011c84 <pbuf_copy+0x10c>
 8011c6a:	683b      	ldr	r3, [r7, #0]
 8011c6c:	2b00      	cmp	r3, #0
 8011c6e:	d009      	beq.n	8011c84 <pbuf_copy+0x10c>
 8011c70:	4b20      	ldr	r3, [pc, #128]	; (8011cf4 <pbuf_copy+0x17c>)
 8011c72:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 8011c76:	4924      	ldr	r1, [pc, #144]	; (8011d08 <pbuf_copy+0x190>)
 8011c78:	4820      	ldr	r0, [pc, #128]	; (8011cfc <pbuf_copy+0x184>)
 8011c7a:	f009 f8b9 	bl	801adf0 <iprintf>
 8011c7e:	f06f 030f 	mvn.w	r3, #15
 8011c82:	e032      	b.n	8011cea <pbuf_copy+0x172>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 8011c84:	683b      	ldr	r3, [r7, #0]
 8011c86:	2b00      	cmp	r3, #0
 8011c88:	d013      	beq.n	8011cb2 <pbuf_copy+0x13a>
 8011c8a:	683b      	ldr	r3, [r7, #0]
 8011c8c:	895a      	ldrh	r2, [r3, #10]
 8011c8e:	683b      	ldr	r3, [r7, #0]
 8011c90:	891b      	ldrh	r3, [r3, #8]
 8011c92:	429a      	cmp	r2, r3
 8011c94:	d10d      	bne.n	8011cb2 <pbuf_copy+0x13a>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8011c96:	683b      	ldr	r3, [r7, #0]
 8011c98:	681b      	ldr	r3, [r3, #0]
 8011c9a:	2b00      	cmp	r3, #0
 8011c9c:	d009      	beq.n	8011cb2 <pbuf_copy+0x13a>
 8011c9e:	4b15      	ldr	r3, [pc, #84]	; (8011cf4 <pbuf_copy+0x17c>)
 8011ca0:	f240 32de 	movw	r2, #990	; 0x3de
 8011ca4:	4919      	ldr	r1, [pc, #100]	; (8011d0c <pbuf_copy+0x194>)
 8011ca6:	4815      	ldr	r0, [pc, #84]	; (8011cfc <pbuf_copy+0x184>)
 8011ca8:	f009 f8a2 	bl	801adf0 <iprintf>
 8011cac:	f06f 0305 	mvn.w	r3, #5
 8011cb0:	e01b      	b.n	8011cea <pbuf_copy+0x172>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 8011cb2:	687b      	ldr	r3, [r7, #4]
 8011cb4:	2b00      	cmp	r3, #0
 8011cb6:	d013      	beq.n	8011ce0 <pbuf_copy+0x168>
 8011cb8:	687b      	ldr	r3, [r7, #4]
 8011cba:	895a      	ldrh	r2, [r3, #10]
 8011cbc:	687b      	ldr	r3, [r7, #4]
 8011cbe:	891b      	ldrh	r3, [r3, #8]
 8011cc0:	429a      	cmp	r2, r3
 8011cc2:	d10d      	bne.n	8011ce0 <pbuf_copy+0x168>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8011cc4:	687b      	ldr	r3, [r7, #4]
 8011cc6:	681b      	ldr	r3, [r3, #0]
 8011cc8:	2b00      	cmp	r3, #0
 8011cca:	d009      	beq.n	8011ce0 <pbuf_copy+0x168>
 8011ccc:	4b09      	ldr	r3, [pc, #36]	; (8011cf4 <pbuf_copy+0x17c>)
 8011cce:	f240 32e3 	movw	r2, #995	; 0x3e3
 8011cd2:	490e      	ldr	r1, [pc, #56]	; (8011d0c <pbuf_copy+0x194>)
 8011cd4:	4809      	ldr	r0, [pc, #36]	; (8011cfc <pbuf_copy+0x184>)
 8011cd6:	f009 f88b 	bl	801adf0 <iprintf>
 8011cda:	f06f 0305 	mvn.w	r3, #5
 8011cde:	e004      	b.n	8011cea <pbuf_copy+0x172>
                  (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 8011ce0:	683b      	ldr	r3, [r7, #0]
 8011ce2:	2b00      	cmp	r3, #0
 8011ce4:	f47f af67 	bne.w	8011bb6 <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 8011ce8:	2300      	movs	r3, #0
}
 8011cea:	4618      	mov	r0, r3
 8011cec:	3710      	adds	r7, #16
 8011cee:	46bd      	mov	sp, r7
 8011cf0:	bd80      	pop	{r7, pc}
 8011cf2:	bf00      	nop
 8011cf4:	0801cd88 	.word	0x0801cd88
 8011cf8:	0801d118 	.word	0x0801d118
 8011cfc:	0801cdd4 	.word	0x0801cdd4
 8011d00:	0801d148 	.word	0x0801d148
 8011d04:	0801d160 	.word	0x0801d160
 8011d08:	0801d17c 	.word	0x0801d17c
 8011d0c:	0801d18c 	.word	0x0801d18c

08011d10 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 8011d10:	b580      	push	{r7, lr}
 8011d12:	b088      	sub	sp, #32
 8011d14:	af00      	add	r7, sp, #0
 8011d16:	60f8      	str	r0, [r7, #12]
 8011d18:	60b9      	str	r1, [r7, #8]
 8011d1a:	4611      	mov	r1, r2
 8011d1c:	461a      	mov	r2, r3
 8011d1e:	460b      	mov	r3, r1
 8011d20:	80fb      	strh	r3, [r7, #6]
 8011d22:	4613      	mov	r3, r2
 8011d24:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left;
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 8011d26:	2300      	movs	r3, #0
 8011d28:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 8011d2a:	68fb      	ldr	r3, [r7, #12]
 8011d2c:	2b00      	cmp	r3, #0
 8011d2e:	d108      	bne.n	8011d42 <pbuf_copy_partial+0x32>
 8011d30:	4b30      	ldr	r3, [pc, #192]	; (8011df4 <pbuf_copy_partial+0xe4>)
 8011d32:	f240 32fe 	movw	r2, #1022	; 0x3fe
 8011d36:	4930      	ldr	r1, [pc, #192]	; (8011df8 <pbuf_copy_partial+0xe8>)
 8011d38:	4830      	ldr	r0, [pc, #192]	; (8011dfc <pbuf_copy_partial+0xec>)
 8011d3a:	f009 f859 	bl	801adf0 <iprintf>
 8011d3e:	2300      	movs	r3, #0
 8011d40:	e054      	b.n	8011dec <pbuf_copy_partial+0xdc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 8011d42:	68bb      	ldr	r3, [r7, #8]
 8011d44:	2b00      	cmp	r3, #0
 8011d46:	d108      	bne.n	8011d5a <pbuf_copy_partial+0x4a>
 8011d48:	4b2a      	ldr	r3, [pc, #168]	; (8011df4 <pbuf_copy_partial+0xe4>)
 8011d4a:	f240 32ff 	movw	r2, #1023	; 0x3ff
 8011d4e:	492c      	ldr	r1, [pc, #176]	; (8011e00 <pbuf_copy_partial+0xf0>)
 8011d50:	482a      	ldr	r0, [pc, #168]	; (8011dfc <pbuf_copy_partial+0xec>)
 8011d52:	f009 f84d 	bl	801adf0 <iprintf>
 8011d56:	2300      	movs	r3, #0
 8011d58:	e048      	b.n	8011dec <pbuf_copy_partial+0xdc>

  left = 0;
 8011d5a:	2300      	movs	r3, #0
 8011d5c:	837b      	strh	r3, [r7, #26]

  if ((buf == NULL) || (dataptr == NULL)) {
 8011d5e:	68fb      	ldr	r3, [r7, #12]
 8011d60:	2b00      	cmp	r3, #0
 8011d62:	d002      	beq.n	8011d6a <pbuf_copy_partial+0x5a>
 8011d64:	68bb      	ldr	r3, [r7, #8]
 8011d66:	2b00      	cmp	r3, #0
 8011d68:	d101      	bne.n	8011d6e <pbuf_copy_partial+0x5e>
    return 0;
 8011d6a:	2300      	movs	r3, #0
 8011d6c:	e03e      	b.n	8011dec <pbuf_copy_partial+0xdc>
  }

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8011d6e:	68fb      	ldr	r3, [r7, #12]
 8011d70:	61fb      	str	r3, [r7, #28]
 8011d72:	e034      	b.n	8011dde <pbuf_copy_partial+0xce>
    if ((offset != 0) && (offset >= p->len)) {
 8011d74:	88bb      	ldrh	r3, [r7, #4]
 8011d76:	2b00      	cmp	r3, #0
 8011d78:	d00a      	beq.n	8011d90 <pbuf_copy_partial+0x80>
 8011d7a:	69fb      	ldr	r3, [r7, #28]
 8011d7c:	895b      	ldrh	r3, [r3, #10]
 8011d7e:	88ba      	ldrh	r2, [r7, #4]
 8011d80:	429a      	cmp	r2, r3
 8011d82:	d305      	bcc.n	8011d90 <pbuf_copy_partial+0x80>
      /* don't copy from this buffer -> on to the next */
      offset -= p->len;
 8011d84:	69fb      	ldr	r3, [r7, #28]
 8011d86:	895b      	ldrh	r3, [r3, #10]
 8011d88:	88ba      	ldrh	r2, [r7, #4]
 8011d8a:	1ad3      	subs	r3, r2, r3
 8011d8c:	80bb      	strh	r3, [r7, #4]
 8011d8e:	e023      	b.n	8011dd8 <pbuf_copy_partial+0xc8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = p->len - offset;
 8011d90:	69fb      	ldr	r3, [r7, #28]
 8011d92:	895a      	ldrh	r2, [r3, #10]
 8011d94:	88bb      	ldrh	r3, [r7, #4]
 8011d96:	1ad3      	subs	r3, r2, r3
 8011d98:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 8011d9a:	8b3a      	ldrh	r2, [r7, #24]
 8011d9c:	88fb      	ldrh	r3, [r7, #6]
 8011d9e:	429a      	cmp	r2, r3
 8011da0:	d901      	bls.n	8011da6 <pbuf_copy_partial+0x96>
        buf_copy_len = len;
 8011da2:	88fb      	ldrh	r3, [r7, #6]
 8011da4:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char*)dataptr)[left], &((char*)p->payload)[offset], buf_copy_len);
 8011da6:	8b7b      	ldrh	r3, [r7, #26]
 8011da8:	68ba      	ldr	r2, [r7, #8]
 8011daa:	18d0      	adds	r0, r2, r3
 8011dac:	69fb      	ldr	r3, [r7, #28]
 8011dae:	685a      	ldr	r2, [r3, #4]
 8011db0:	88bb      	ldrh	r3, [r7, #4]
 8011db2:	4413      	add	r3, r2
 8011db4:	8b3a      	ldrh	r2, [r7, #24]
 8011db6:	4619      	mov	r1, r3
 8011db8:	f008 ff5f 	bl	801ac7a <memcpy>
      copied_total += buf_copy_len;
 8011dbc:	8afa      	ldrh	r2, [r7, #22]
 8011dbe:	8b3b      	ldrh	r3, [r7, #24]
 8011dc0:	4413      	add	r3, r2
 8011dc2:	82fb      	strh	r3, [r7, #22]
      left += buf_copy_len;
 8011dc4:	8b7a      	ldrh	r2, [r7, #26]
 8011dc6:	8b3b      	ldrh	r3, [r7, #24]
 8011dc8:	4413      	add	r3, r2
 8011dca:	837b      	strh	r3, [r7, #26]
      len -= buf_copy_len;
 8011dcc:	88fa      	ldrh	r2, [r7, #6]
 8011dce:	8b3b      	ldrh	r3, [r7, #24]
 8011dd0:	1ad3      	subs	r3, r2, r3
 8011dd2:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 8011dd4:	2300      	movs	r3, #0
 8011dd6:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8011dd8:	69fb      	ldr	r3, [r7, #28]
 8011dda:	681b      	ldr	r3, [r3, #0]
 8011ddc:	61fb      	str	r3, [r7, #28]
 8011dde:	88fb      	ldrh	r3, [r7, #6]
 8011de0:	2b00      	cmp	r3, #0
 8011de2:	d002      	beq.n	8011dea <pbuf_copy_partial+0xda>
 8011de4:	69fb      	ldr	r3, [r7, #28]
 8011de6:	2b00      	cmp	r3, #0
 8011de8:	d1c4      	bne.n	8011d74 <pbuf_copy_partial+0x64>
    }
  }
  return copied_total;
 8011dea:	8afb      	ldrh	r3, [r7, #22]
}
 8011dec:	4618      	mov	r0, r3
 8011dee:	3720      	adds	r7, #32
 8011df0:	46bd      	mov	sp, r7
 8011df2:	bd80      	pop	{r7, pc}
 8011df4:	0801cd88 	.word	0x0801cd88
 8011df8:	0801d1b8 	.word	0x0801d1b8
 8011dfc:	0801cdd4 	.word	0x0801cdd4
 8011e00:	0801d1d8 	.word	0x0801d1d8

08011e04 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 8011e04:	b480      	push	{r7}
 8011e06:	af00      	add	r7, sp, #0
#if LWIP_RANDOMIZE_INITIAL_LOCAL_PORTS && defined(LWIP_RAND)
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
#endif /* LWIP_RANDOMIZE_INITIAL_LOCAL_PORTS && defined(LWIP_RAND) */
}
 8011e08:	bf00      	nop
 8011e0a:	46bd      	mov	sp, r7
 8011e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e10:	4770      	bx	lr
	...

08011e14 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 8011e14:	b580      	push	{r7, lr}
 8011e16:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 8011e18:	f000 ffb6 	bl	8012d88 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 8011e1c:	4b07      	ldr	r3, [pc, #28]	; (8011e3c <tcp_tmr+0x28>)
 8011e1e:	781b      	ldrb	r3, [r3, #0]
 8011e20:	3301      	adds	r3, #1
 8011e22:	b2da      	uxtb	r2, r3
 8011e24:	4b05      	ldr	r3, [pc, #20]	; (8011e3c <tcp_tmr+0x28>)
 8011e26:	701a      	strb	r2, [r3, #0]
 8011e28:	4b04      	ldr	r3, [pc, #16]	; (8011e3c <tcp_tmr+0x28>)
 8011e2a:	781b      	ldrb	r3, [r3, #0]
 8011e2c:	f003 0301 	and.w	r3, r3, #1
 8011e30:	2b00      	cmp	r3, #0
 8011e32:	d001      	beq.n	8011e38 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 8011e34:	f000 fce8 	bl	8012808 <tcp_slowtmr>
  }
}
 8011e38:	bf00      	nop
 8011e3a:	bd80      	pop	{r7, pc}
 8011e3c:	20004205 	.word	0x20004205

08011e40 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 8011e40:	b480      	push	{r7}
 8011e42:	b085      	sub	sp, #20
 8011e44:	af00      	add	r7, sp, #0
 8011e46:	6078      	str	r0, [r7, #4]
 8011e48:	6039      	str	r1, [r7, #0]
   struct tcp_pcb *pcb;
   for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8011e4a:	687b      	ldr	r3, [r7, #4]
 8011e4c:	60fb      	str	r3, [r7, #12]
 8011e4e:	e00a      	b.n	8011e66 <tcp_remove_listener+0x26>
      if (pcb->listener == lpcb) {
 8011e50:	68fb      	ldr	r3, [r7, #12]
 8011e52:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8011e54:	683a      	ldr	r2, [r7, #0]
 8011e56:	429a      	cmp	r2, r3
 8011e58:	d102      	bne.n	8011e60 <tcp_remove_listener+0x20>
         pcb->listener = NULL;
 8011e5a:	68fb      	ldr	r3, [r7, #12]
 8011e5c:	2200      	movs	r2, #0
 8011e5e:	679a      	str	r2, [r3, #120]	; 0x78
   for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8011e60:	68fb      	ldr	r3, [r7, #12]
 8011e62:	68db      	ldr	r3, [r3, #12]
 8011e64:	60fb      	str	r3, [r7, #12]
 8011e66:	68fb      	ldr	r3, [r7, #12]
 8011e68:	2b00      	cmp	r3, #0
 8011e6a:	d1f1      	bne.n	8011e50 <tcp_remove_listener+0x10>
      }
   }
}
 8011e6c:	bf00      	nop
 8011e6e:	3714      	adds	r7, #20
 8011e70:	46bd      	mov	sp, r7
 8011e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e76:	4770      	bx	lr

08011e78 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 8011e78:	b580      	push	{r7, lr}
 8011e7a:	b084      	sub	sp, #16
 8011e7c:	af00      	add	r7, sp, #0
 8011e7e:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8011e80:	687b      	ldr	r3, [r7, #4]
 8011e82:	2b00      	cmp	r3, #0
 8011e84:	d105      	bne.n	8011e92 <tcp_listen_closed+0x1a>
 8011e86:	4b13      	ldr	r3, [pc, #76]	; (8011ed4 <tcp_listen_closed+0x5c>)
 8011e88:	22c0      	movs	r2, #192	; 0xc0
 8011e8a:	4913      	ldr	r1, [pc, #76]	; (8011ed8 <tcp_listen_closed+0x60>)
 8011e8c:	4813      	ldr	r0, [pc, #76]	; (8011edc <tcp_listen_closed+0x64>)
 8011e8e:	f008 ffaf 	bl	801adf0 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 8011e92:	687b      	ldr	r3, [r7, #4]
 8011e94:	7d1b      	ldrb	r3, [r3, #20]
 8011e96:	2b01      	cmp	r3, #1
 8011e98:	d005      	beq.n	8011ea6 <tcp_listen_closed+0x2e>
 8011e9a:	4b0e      	ldr	r3, [pc, #56]	; (8011ed4 <tcp_listen_closed+0x5c>)
 8011e9c:	22c1      	movs	r2, #193	; 0xc1
 8011e9e:	4910      	ldr	r1, [pc, #64]	; (8011ee0 <tcp_listen_closed+0x68>)
 8011ea0:	480e      	ldr	r0, [pc, #56]	; (8011edc <tcp_listen_closed+0x64>)
 8011ea2:	f008 ffa5 	bl	801adf0 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8011ea6:	2301      	movs	r3, #1
 8011ea8:	60fb      	str	r3, [r7, #12]
 8011eaa:	e00b      	b.n	8011ec4 <tcp_listen_closed+0x4c>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen*)pcb);
 8011eac:	4a0d      	ldr	r2, [pc, #52]	; (8011ee4 <tcp_listen_closed+0x6c>)
 8011eae:	68fb      	ldr	r3, [r7, #12]
 8011eb0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8011eb4:	681b      	ldr	r3, [r3, #0]
 8011eb6:	6879      	ldr	r1, [r7, #4]
 8011eb8:	4618      	mov	r0, r3
 8011eba:	f7ff ffc1 	bl	8011e40 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8011ebe:	68fb      	ldr	r3, [r7, #12]
 8011ec0:	3301      	adds	r3, #1
 8011ec2:	60fb      	str	r3, [r7, #12]
 8011ec4:	68fb      	ldr	r3, [r7, #12]
 8011ec6:	2b03      	cmp	r3, #3
 8011ec8:	d9f0      	bls.n	8011eac <tcp_listen_closed+0x34>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 8011eca:	bf00      	nop
 8011ecc:	3710      	adds	r7, #16
 8011ece:	46bd      	mov	sp, r7
 8011ed0:	bd80      	pop	{r7, pc}
 8011ed2:	bf00      	nop
 8011ed4:	0801d30c 	.word	0x0801d30c
 8011ed8:	0801d33c 	.word	0x0801d33c
 8011edc:	0801d348 	.word	0x0801d348
 8011ee0:	0801d370 	.word	0x0801d370
 8011ee4:	0801e7d8 	.word	0x0801e7d8

08011ee8 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 8011ee8:	b5b0      	push	{r4, r5, r7, lr}
 8011eea:	b086      	sub	sp, #24
 8011eec:	af02      	add	r7, sp, #8
 8011eee:	6078      	str	r0, [r7, #4]
 8011ef0:	460b      	mov	r3, r1
 8011ef2:	70fb      	strb	r3, [r7, #3]
  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 8011ef4:	78fb      	ldrb	r3, [r7, #3]
 8011ef6:	2b00      	cmp	r3, #0
 8011ef8:	d075      	beq.n	8011fe6 <tcp_close_shutdown+0xfe>
 8011efa:	687b      	ldr	r3, [r7, #4]
 8011efc:	7d1b      	ldrb	r3, [r3, #20]
 8011efe:	2b04      	cmp	r3, #4
 8011f00:	d003      	beq.n	8011f0a <tcp_close_shutdown+0x22>
 8011f02:	687b      	ldr	r3, [r7, #4]
 8011f04:	7d1b      	ldrb	r3, [r3, #20]
 8011f06:	2b07      	cmp	r3, #7
 8011f08:	d16d      	bne.n	8011fe6 <tcp_close_shutdown+0xfe>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 8011f0a:	687b      	ldr	r3, [r7, #4]
 8011f0c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011f0e:	2b00      	cmp	r3, #0
 8011f10:	d104      	bne.n	8011f1c <tcp_close_shutdown+0x34>
 8011f12:	687b      	ldr	r3, [r7, #4]
 8011f14:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8011f16:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8011f1a:	d064      	beq.n	8011fe6 <tcp_close_shutdown+0xfe>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 8011f1c:	687b      	ldr	r3, [r7, #4]
 8011f1e:	7e9b      	ldrb	r3, [r3, #26]
 8011f20:	f003 0310 	and.w	r3, r3, #16
 8011f24:	2b00      	cmp	r3, #0
 8011f26:	d106      	bne.n	8011f36 <tcp_close_shutdown+0x4e>
 8011f28:	4b59      	ldr	r3, [pc, #356]	; (8012090 <tcp_close_shutdown+0x1a8>)
 8011f2a:	f240 120f 	movw	r2, #271	; 0x10f
 8011f2e:	4959      	ldr	r1, [pc, #356]	; (8012094 <tcp_close_shutdown+0x1ac>)
 8011f30:	4859      	ldr	r0, [pc, #356]	; (8012098 <tcp_close_shutdown+0x1b0>)
 8011f32:	f008 ff5d 	bl	801adf0 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8011f36:	687b      	ldr	r3, [r7, #4]
 8011f38:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8011f3a:	687b      	ldr	r3, [r7, #4]
 8011f3c:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8011f3e:	687c      	ldr	r4, [r7, #4]
 8011f40:	687b      	ldr	r3, [r7, #4]
 8011f42:	1d1d      	adds	r5, r3, #4
 8011f44:	687b      	ldr	r3, [r7, #4]
 8011f46:	8adb      	ldrh	r3, [r3, #22]
 8011f48:	687a      	ldr	r2, [r7, #4]
 8011f4a:	8b12      	ldrh	r2, [r2, #24]
 8011f4c:	9201      	str	r2, [sp, #4]
 8011f4e:	9300      	str	r3, [sp, #0]
 8011f50:	462b      	mov	r3, r5
 8011f52:	4622      	mov	r2, r4
 8011f54:	f004 ff1a 	bl	8016d8c <tcp_rst>
               pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 8011f58:	6878      	ldr	r0, [r7, #4]
 8011f5a:	f001 fa4b 	bl	80133f4 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 8011f5e:	4b4f      	ldr	r3, [pc, #316]	; (801209c <tcp_close_shutdown+0x1b4>)
 8011f60:	681b      	ldr	r3, [r3, #0]
 8011f62:	687a      	ldr	r2, [r7, #4]
 8011f64:	429a      	cmp	r2, r3
 8011f66:	d105      	bne.n	8011f74 <tcp_close_shutdown+0x8c>
 8011f68:	4b4c      	ldr	r3, [pc, #304]	; (801209c <tcp_close_shutdown+0x1b4>)
 8011f6a:	681b      	ldr	r3, [r3, #0]
 8011f6c:	68db      	ldr	r3, [r3, #12]
 8011f6e:	4a4b      	ldr	r2, [pc, #300]	; (801209c <tcp_close_shutdown+0x1b4>)
 8011f70:	6013      	str	r3, [r2, #0]
 8011f72:	e013      	b.n	8011f9c <tcp_close_shutdown+0xb4>
 8011f74:	4b49      	ldr	r3, [pc, #292]	; (801209c <tcp_close_shutdown+0x1b4>)
 8011f76:	681b      	ldr	r3, [r3, #0]
 8011f78:	60fb      	str	r3, [r7, #12]
 8011f7a:	e00c      	b.n	8011f96 <tcp_close_shutdown+0xae>
 8011f7c:	68fb      	ldr	r3, [r7, #12]
 8011f7e:	68db      	ldr	r3, [r3, #12]
 8011f80:	687a      	ldr	r2, [r7, #4]
 8011f82:	429a      	cmp	r2, r3
 8011f84:	d104      	bne.n	8011f90 <tcp_close_shutdown+0xa8>
 8011f86:	687b      	ldr	r3, [r7, #4]
 8011f88:	68da      	ldr	r2, [r3, #12]
 8011f8a:	68fb      	ldr	r3, [r7, #12]
 8011f8c:	60da      	str	r2, [r3, #12]
 8011f8e:	e005      	b.n	8011f9c <tcp_close_shutdown+0xb4>
 8011f90:	68fb      	ldr	r3, [r7, #12]
 8011f92:	68db      	ldr	r3, [r3, #12]
 8011f94:	60fb      	str	r3, [r7, #12]
 8011f96:	68fb      	ldr	r3, [r7, #12]
 8011f98:	2b00      	cmp	r3, #0
 8011f9a:	d1ef      	bne.n	8011f7c <tcp_close_shutdown+0x94>
 8011f9c:	687b      	ldr	r3, [r7, #4]
 8011f9e:	2200      	movs	r2, #0
 8011fa0:	60da      	str	r2, [r3, #12]
 8011fa2:	4b3f      	ldr	r3, [pc, #252]	; (80120a0 <tcp_close_shutdown+0x1b8>)
 8011fa4:	2201      	movs	r2, #1
 8011fa6:	701a      	strb	r2, [r3, #0]
      if (pcb->state == ESTABLISHED) {
 8011fa8:	687b      	ldr	r3, [r7, #4]
 8011faa:	7d1b      	ldrb	r3, [r3, #20]
 8011fac:	2b04      	cmp	r3, #4
 8011fae:	d10c      	bne.n	8011fca <tcp_close_shutdown+0xe2>
        /* move to TIME_WAIT since we close actively */
        pcb->state = TIME_WAIT;
 8011fb0:	687b      	ldr	r3, [r7, #4]
 8011fb2:	220a      	movs	r2, #10
 8011fb4:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8011fb6:	4b3b      	ldr	r3, [pc, #236]	; (80120a4 <tcp_close_shutdown+0x1bc>)
 8011fb8:	681a      	ldr	r2, [r3, #0]
 8011fba:	687b      	ldr	r3, [r7, #4]
 8011fbc:	60da      	str	r2, [r3, #12]
 8011fbe:	4a39      	ldr	r2, [pc, #228]	; (80120a4 <tcp_close_shutdown+0x1bc>)
 8011fc0:	687b      	ldr	r3, [r7, #4]
 8011fc2:	6013      	str	r3, [r2, #0]
 8011fc4:	f005 f932 	bl	801722c <tcp_timer_needed>
 8011fc8:	e00b      	b.n	8011fe2 <tcp_close_shutdown+0xfa>
      } else {
        /* CLOSE_WAIT: deallocate the pcb since we already sent a RST for it */
        if (tcp_input_pcb == pcb) {
 8011fca:	4b37      	ldr	r3, [pc, #220]	; (80120a8 <tcp_close_shutdown+0x1c0>)
 8011fcc:	681b      	ldr	r3, [r3, #0]
 8011fce:	687a      	ldr	r2, [r7, #4]
 8011fd0:	429a      	cmp	r2, r3
 8011fd2:	d102      	bne.n	8011fda <tcp_close_shutdown+0xf2>
          /* prevent using a deallocated pcb: free it from tcp_input later */
          tcp_trigger_input_pcb_close();
 8011fd4:	f003 fd72 	bl	8015abc <tcp_trigger_input_pcb_close>
 8011fd8:	e003      	b.n	8011fe2 <tcp_close_shutdown+0xfa>
        } else {
          memp_free(MEMP_TCP_PCB, pcb);
 8011fda:	6879      	ldr	r1, [r7, #4]
 8011fdc:	2001      	movs	r0, #1
 8011fde:	f7fe ff41 	bl	8010e64 <memp_free>
        }
      }
      return ERR_OK;
 8011fe2:	2300      	movs	r3, #0
 8011fe4:	e050      	b.n	8012088 <tcp_close_shutdown+0x1a0>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 8011fe6:	687b      	ldr	r3, [r7, #4]
 8011fe8:	7d1b      	ldrb	r3, [r3, #20]
 8011fea:	2b01      	cmp	r3, #1
 8011fec:	d02e      	beq.n	801204c <tcp_close_shutdown+0x164>
 8011fee:	2b02      	cmp	r3, #2
 8011ff0:	d038      	beq.n	8012064 <tcp_close_shutdown+0x17c>
 8011ff2:	2b00      	cmp	r3, #0
 8011ff4:	d142      	bne.n	801207c <tcp_close_shutdown+0x194>
     * and the user needs some way to free it should the need arise.
     * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
     * or for a pcb that has been used and then entered the CLOSED state
     * is erroneous, but this should never happen as the pcb has in those cases
     * been freed, and so any remaining handles are bogus. */
    if (pcb->local_port != 0) {
 8011ff6:	687b      	ldr	r3, [r7, #4]
 8011ff8:	8adb      	ldrh	r3, [r3, #22]
 8011ffa:	2b00      	cmp	r3, #0
 8011ffc:	d021      	beq.n	8012042 <tcp_close_shutdown+0x15a>
      TCP_RMV(&tcp_bound_pcbs, pcb);
 8011ffe:	4b2b      	ldr	r3, [pc, #172]	; (80120ac <tcp_close_shutdown+0x1c4>)
 8012000:	681b      	ldr	r3, [r3, #0]
 8012002:	687a      	ldr	r2, [r7, #4]
 8012004:	429a      	cmp	r2, r3
 8012006:	d105      	bne.n	8012014 <tcp_close_shutdown+0x12c>
 8012008:	4b28      	ldr	r3, [pc, #160]	; (80120ac <tcp_close_shutdown+0x1c4>)
 801200a:	681b      	ldr	r3, [r3, #0]
 801200c:	68db      	ldr	r3, [r3, #12]
 801200e:	4a27      	ldr	r2, [pc, #156]	; (80120ac <tcp_close_shutdown+0x1c4>)
 8012010:	6013      	str	r3, [r2, #0]
 8012012:	e013      	b.n	801203c <tcp_close_shutdown+0x154>
 8012014:	4b25      	ldr	r3, [pc, #148]	; (80120ac <tcp_close_shutdown+0x1c4>)
 8012016:	681b      	ldr	r3, [r3, #0]
 8012018:	60bb      	str	r3, [r7, #8]
 801201a:	e00c      	b.n	8012036 <tcp_close_shutdown+0x14e>
 801201c:	68bb      	ldr	r3, [r7, #8]
 801201e:	68db      	ldr	r3, [r3, #12]
 8012020:	687a      	ldr	r2, [r7, #4]
 8012022:	429a      	cmp	r2, r3
 8012024:	d104      	bne.n	8012030 <tcp_close_shutdown+0x148>
 8012026:	687b      	ldr	r3, [r7, #4]
 8012028:	68da      	ldr	r2, [r3, #12]
 801202a:	68bb      	ldr	r3, [r7, #8]
 801202c:	60da      	str	r2, [r3, #12]
 801202e:	e005      	b.n	801203c <tcp_close_shutdown+0x154>
 8012030:	68bb      	ldr	r3, [r7, #8]
 8012032:	68db      	ldr	r3, [r3, #12]
 8012034:	60bb      	str	r3, [r7, #8]
 8012036:	68bb      	ldr	r3, [r7, #8]
 8012038:	2b00      	cmp	r3, #0
 801203a:	d1ef      	bne.n	801201c <tcp_close_shutdown+0x134>
 801203c:	687b      	ldr	r3, [r7, #4]
 801203e:	2200      	movs	r2, #0
 8012040:	60da      	str	r2, [r3, #12]
    }
    memp_free(MEMP_TCP_PCB, pcb);
 8012042:	6879      	ldr	r1, [r7, #4]
 8012044:	2001      	movs	r0, #1
 8012046:	f7fe ff0d 	bl	8010e64 <memp_free>
    break;
 801204a:	e01c      	b.n	8012086 <tcp_close_shutdown+0x19e>
  case LISTEN:
    tcp_listen_closed(pcb);
 801204c:	6878      	ldr	r0, [r7, #4]
 801204e:	f7ff ff13 	bl	8011e78 <tcp_listen_closed>
    tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 8012052:	6879      	ldr	r1, [r7, #4]
 8012054:	4816      	ldr	r0, [pc, #88]	; (80120b0 <tcp_close_shutdown+0x1c8>)
 8012056:	f001 fa0f 	bl	8013478 <tcp_pcb_remove>
    memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 801205a:	6879      	ldr	r1, [r7, #4]
 801205c:	2002      	movs	r0, #2
 801205e:	f7fe ff01 	bl	8010e64 <memp_free>
    break;
 8012062:	e010      	b.n	8012086 <tcp_close_shutdown+0x19e>
  case SYN_SENT:
    TCP_PCB_REMOVE_ACTIVE(pcb);
 8012064:	6879      	ldr	r1, [r7, #4]
 8012066:	480d      	ldr	r0, [pc, #52]	; (801209c <tcp_close_shutdown+0x1b4>)
 8012068:	f001 fa06 	bl	8013478 <tcp_pcb_remove>
 801206c:	4b0c      	ldr	r3, [pc, #48]	; (80120a0 <tcp_close_shutdown+0x1b8>)
 801206e:	2201      	movs	r2, #1
 8012070:	701a      	strb	r2, [r3, #0]
    memp_free(MEMP_TCP_PCB, pcb);
 8012072:	6879      	ldr	r1, [r7, #4]
 8012074:	2001      	movs	r0, #1
 8012076:	f7fe fef5 	bl	8010e64 <memp_free>
    MIB2_STATS_INC(mib2.tcpattemptfails);
    break;
 801207a:	e004      	b.n	8012086 <tcp_close_shutdown+0x19e>
  default:
    return tcp_close_shutdown_fin(pcb);
 801207c:	6878      	ldr	r0, [r7, #4]
 801207e:	f000 f819 	bl	80120b4 <tcp_close_shutdown_fin>
 8012082:	4603      	mov	r3, r0
 8012084:	e000      	b.n	8012088 <tcp_close_shutdown+0x1a0>
  }
  return ERR_OK;
 8012086:	2300      	movs	r3, #0
}
 8012088:	4618      	mov	r0, r3
 801208a:	3710      	adds	r7, #16
 801208c:	46bd      	mov	sp, r7
 801208e:	bdb0      	pop	{r4, r5, r7, pc}
 8012090:	0801d30c 	.word	0x0801d30c
 8012094:	0801d388 	.word	0x0801d388
 8012098:	0801d348 	.word	0x0801d348
 801209c:	2000ab40 	.word	0x2000ab40
 80120a0:	2000ab3c 	.word	0x2000ab3c
 80120a4:	2000ab50 	.word	0x2000ab50
 80120a8:	2000ab54 	.word	0x2000ab54
 80120ac:	2000ab4c 	.word	0x2000ab4c
 80120b0:	2000ab48 	.word	0x2000ab48

080120b4 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 80120b4:	b580      	push	{r7, lr}
 80120b6:	b084      	sub	sp, #16
 80120b8:	af00      	add	r7, sp, #0
 80120ba:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 80120bc:	687b      	ldr	r3, [r7, #4]
 80120be:	2b00      	cmp	r3, #0
 80120c0:	d106      	bne.n	80120d0 <tcp_close_shutdown_fin+0x1c>
 80120c2:	4b2c      	ldr	r3, [pc, #176]	; (8012174 <tcp_close_shutdown_fin+0xc0>)
 80120c4:	f240 124d 	movw	r2, #333	; 0x14d
 80120c8:	492b      	ldr	r1, [pc, #172]	; (8012178 <tcp_close_shutdown_fin+0xc4>)
 80120ca:	482c      	ldr	r0, [pc, #176]	; (801217c <tcp_close_shutdown_fin+0xc8>)
 80120cc:	f008 fe90 	bl	801adf0 <iprintf>

  switch (pcb->state) {
 80120d0:	687b      	ldr	r3, [r7, #4]
 80120d2:	7d1b      	ldrb	r3, [r3, #20]
 80120d4:	2b04      	cmp	r3, #4
 80120d6:	d010      	beq.n	80120fa <tcp_close_shutdown_fin+0x46>
 80120d8:	2b07      	cmp	r3, #7
 80120da:	d01b      	beq.n	8012114 <tcp_close_shutdown_fin+0x60>
 80120dc:	2b03      	cmp	r3, #3
 80120de:	d126      	bne.n	801212e <tcp_close_shutdown_fin+0x7a>
  case SYN_RCVD:
    err = tcp_send_fin(pcb);
 80120e0:	6878      	ldr	r0, [r7, #4]
 80120e2:	f003 fd77 	bl	8015bd4 <tcp_send_fin>
 80120e6:	4603      	mov	r3, r0
 80120e8:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 80120ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80120ee:	2b00      	cmp	r3, #0
 80120f0:	d11f      	bne.n	8012132 <tcp_close_shutdown_fin+0x7e>
      tcp_backlog_accepted(pcb);
      MIB2_STATS_INC(mib2.tcpattemptfails);
      pcb->state = FIN_WAIT_1;
 80120f2:	687b      	ldr	r3, [r7, #4]
 80120f4:	2205      	movs	r2, #5
 80120f6:	751a      	strb	r2, [r3, #20]
    }
    break;
 80120f8:	e01b      	b.n	8012132 <tcp_close_shutdown_fin+0x7e>
  case ESTABLISHED:
    err = tcp_send_fin(pcb);
 80120fa:	6878      	ldr	r0, [r7, #4]
 80120fc:	f003 fd6a 	bl	8015bd4 <tcp_send_fin>
 8012100:	4603      	mov	r3, r0
 8012102:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 8012104:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8012108:	2b00      	cmp	r3, #0
 801210a:	d114      	bne.n	8012136 <tcp_close_shutdown_fin+0x82>
      MIB2_STATS_INC(mib2.tcpestabresets);
      pcb->state = FIN_WAIT_1;
 801210c:	687b      	ldr	r3, [r7, #4]
 801210e:	2205      	movs	r2, #5
 8012110:	751a      	strb	r2, [r3, #20]
    }
    break;
 8012112:	e010      	b.n	8012136 <tcp_close_shutdown_fin+0x82>
  case CLOSE_WAIT:
    err = tcp_send_fin(pcb);
 8012114:	6878      	ldr	r0, [r7, #4]
 8012116:	f003 fd5d 	bl	8015bd4 <tcp_send_fin>
 801211a:	4603      	mov	r3, r0
 801211c:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 801211e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8012122:	2b00      	cmp	r3, #0
 8012124:	d109      	bne.n	801213a <tcp_close_shutdown_fin+0x86>
      MIB2_STATS_INC(mib2.tcpestabresets);
      pcb->state = LAST_ACK;
 8012126:	687b      	ldr	r3, [r7, #4]
 8012128:	2209      	movs	r2, #9
 801212a:	751a      	strb	r2, [r3, #20]
    }
    break;
 801212c:	e005      	b.n	801213a <tcp_close_shutdown_fin+0x86>
  default:
    /* Has already been closed, do nothing. */
    return ERR_OK;
 801212e:	2300      	movs	r3, #0
 8012130:	e01c      	b.n	801216c <tcp_close_shutdown_fin+0xb8>
    break;
 8012132:	bf00      	nop
 8012134:	e002      	b.n	801213c <tcp_close_shutdown_fin+0x88>
    break;
 8012136:	bf00      	nop
 8012138:	e000      	b.n	801213c <tcp_close_shutdown_fin+0x88>
    break;
 801213a:	bf00      	nop
  }

  if (err == ERR_OK) {
 801213c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8012140:	2b00      	cmp	r3, #0
 8012142:	d103      	bne.n	801214c <tcp_close_shutdown_fin+0x98>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 8012144:	6878      	ldr	r0, [r7, #4]
 8012146:	f004 fb97 	bl	8016878 <tcp_output>
 801214a:	e00d      	b.n	8012168 <tcp_close_shutdown_fin+0xb4>
  } else if (err == ERR_MEM) {
 801214c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8012150:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8012154:	d108      	bne.n	8012168 <tcp_close_shutdown_fin+0xb4>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    pcb->flags |= TF_CLOSEPEND;
 8012156:	687b      	ldr	r3, [r7, #4]
 8012158:	7e9b      	ldrb	r3, [r3, #26]
 801215a:	f043 0308 	orr.w	r3, r3, #8
 801215e:	b2da      	uxtb	r2, r3
 8012160:	687b      	ldr	r3, [r7, #4]
 8012162:	769a      	strb	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 8012164:	2300      	movs	r3, #0
 8012166:	e001      	b.n	801216c <tcp_close_shutdown_fin+0xb8>
  }
  return err;
 8012168:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801216c:	4618      	mov	r0, r3
 801216e:	3710      	adds	r7, #16
 8012170:	46bd      	mov	sp, r7
 8012172:	bd80      	pop	{r7, pc}
 8012174:	0801d30c 	.word	0x0801d30c
 8012178:	0801d33c 	.word	0x0801d33c
 801217c:	0801d348 	.word	0x0801d348

08012180 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 8012180:	b580      	push	{r7, lr}
 8012182:	b082      	sub	sp, #8
 8012184:	af00      	add	r7, sp, #0
 8012186:	6078      	str	r0, [r7, #4]
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));
  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 8012188:	687b      	ldr	r3, [r7, #4]
 801218a:	7d1b      	ldrb	r3, [r3, #20]
 801218c:	2b01      	cmp	r3, #1
 801218e:	d006      	beq.n	801219e <tcp_close+0x1e>
    /* Set a flag not to receive any more data... */
    pcb->flags |= TF_RXCLOSED;
 8012190:	687b      	ldr	r3, [r7, #4]
 8012192:	7e9b      	ldrb	r3, [r3, #26]
 8012194:	f043 0310 	orr.w	r3, r3, #16
 8012198:	b2da      	uxtb	r2, r3
 801219a:	687b      	ldr	r3, [r7, #4]
 801219c:	769a      	strb	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 801219e:	2101      	movs	r1, #1
 80121a0:	6878      	ldr	r0, [r7, #4]
 80121a2:	f7ff fea1 	bl	8011ee8 <tcp_close_shutdown>
 80121a6:	4603      	mov	r3, r0
}
 80121a8:	4618      	mov	r0, r3
 80121aa:	3708      	adds	r7, #8
 80121ac:	46bd      	mov	sp, r7
 80121ae:	bd80      	pop	{r7, pc}

080121b0 <tcp_shutdown>:
 * @return ERR_OK if shutdown succeeded (or the PCB has already been shut down)
 *         another err_t on error.
 */
err_t
tcp_shutdown(struct tcp_pcb *pcb, int shut_rx, int shut_tx)
{
 80121b0:	b580      	push	{r7, lr}
 80121b2:	b084      	sub	sp, #16
 80121b4:	af00      	add	r7, sp, #0
 80121b6:	60f8      	str	r0, [r7, #12]
 80121b8:	60b9      	str	r1, [r7, #8]
 80121ba:	607a      	str	r2, [r7, #4]
  if (pcb->state == LISTEN) {
 80121bc:	68fb      	ldr	r3, [r7, #12]
 80121be:	7d1b      	ldrb	r3, [r3, #20]
 80121c0:	2b01      	cmp	r3, #1
 80121c2:	d102      	bne.n	80121ca <tcp_shutdown+0x1a>
    return ERR_CONN;
 80121c4:	f06f 030a 	mvn.w	r3, #10
 80121c8:	e035      	b.n	8012236 <tcp_shutdown+0x86>
  }
  if (shut_rx) {
 80121ca:	68bb      	ldr	r3, [r7, #8]
 80121cc:	2b00      	cmp	r3, #0
 80121ce:	d01b      	beq.n	8012208 <tcp_shutdown+0x58>
    /* shut down the receive side: set a flag not to receive any more data... */
    pcb->flags |= TF_RXCLOSED;
 80121d0:	68fb      	ldr	r3, [r7, #12]
 80121d2:	7e9b      	ldrb	r3, [r3, #26]
 80121d4:	f043 0310 	orr.w	r3, r3, #16
 80121d8:	b2da      	uxtb	r2, r3
 80121da:	68fb      	ldr	r3, [r7, #12]
 80121dc:	769a      	strb	r2, [r3, #26]
    if (shut_tx) {
 80121de:	687b      	ldr	r3, [r7, #4]
 80121e0:	2b00      	cmp	r3, #0
 80121e2:	d005      	beq.n	80121f0 <tcp_shutdown+0x40>
      /* shutting down the tx AND rx side is the same as closing for the raw API */
      return tcp_close_shutdown(pcb, 1);
 80121e4:	2101      	movs	r1, #1
 80121e6:	68f8      	ldr	r0, [r7, #12]
 80121e8:	f7ff fe7e 	bl	8011ee8 <tcp_close_shutdown>
 80121ec:	4603      	mov	r3, r0
 80121ee:	e022      	b.n	8012236 <tcp_shutdown+0x86>
    }
    /* ... and free buffered data */
    if (pcb->refused_data != NULL) {
 80121f0:	68fb      	ldr	r3, [r7, #12]
 80121f2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80121f4:	2b00      	cmp	r3, #0
 80121f6:	d007      	beq.n	8012208 <tcp_shutdown+0x58>
      pbuf_free(pcb->refused_data);
 80121f8:	68fb      	ldr	r3, [r7, #12]
 80121fa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80121fc:	4618      	mov	r0, r3
 80121fe:	f7ff fb8b 	bl	8011918 <pbuf_free>
      pcb->refused_data = NULL;
 8012202:	68fb      	ldr	r3, [r7, #12]
 8012204:	2200      	movs	r2, #0
 8012206:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }
  if (shut_tx) {
 8012208:	687b      	ldr	r3, [r7, #4]
 801220a:	2b00      	cmp	r3, #0
 801220c:	d012      	beq.n	8012234 <tcp_shutdown+0x84>
    /* This can't happen twice since if it succeeds, the pcb's state is changed.
       Only close in these states as the others directly deallocate the PCB */
    switch (pcb->state) {
 801220e:	68fb      	ldr	r3, [r7, #12]
 8012210:	7d1b      	ldrb	r3, [r3, #20]
 8012212:	2b03      	cmp	r3, #3
 8012214:	db0b      	blt.n	801222e <tcp_shutdown+0x7e>
 8012216:	2b04      	cmp	r3, #4
 8012218:	dd01      	ble.n	801221e <tcp_shutdown+0x6e>
 801221a:	2b07      	cmp	r3, #7
 801221c:	d107      	bne.n	801222e <tcp_shutdown+0x7e>
    case SYN_RCVD:
    case ESTABLISHED:
    case CLOSE_WAIT:
      return tcp_close_shutdown(pcb, (u8_t)shut_rx);
 801221e:	68bb      	ldr	r3, [r7, #8]
 8012220:	b2db      	uxtb	r3, r3
 8012222:	4619      	mov	r1, r3
 8012224:	68f8      	ldr	r0, [r7, #12]
 8012226:	f7ff fe5f 	bl	8011ee8 <tcp_close_shutdown>
 801222a:	4603      	mov	r3, r0
 801222c:	e003      	b.n	8012236 <tcp_shutdown+0x86>
    default:
      /* Not (yet?) connected, cannot shutdown the TX side as that would bring us
        into CLOSED state, where the PCB is deallocated. */
      return ERR_CONN;
 801222e:	f06f 030a 	mvn.w	r3, #10
 8012232:	e000      	b.n	8012236 <tcp_shutdown+0x86>
    }
  }
  return ERR_OK;
 8012234:	2300      	movs	r3, #0
}
 8012236:	4618      	mov	r0, r3
 8012238:	3710      	adds	r7, #16
 801223a:	46bd      	mov	sp, r7
 801223c:	bd80      	pop	{r7, pc}
	...

08012240 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 8012240:	b580      	push	{r7, lr}
 8012242:	b08c      	sub	sp, #48	; 0x30
 8012244:	af02      	add	r7, sp, #8
 8012246:	6078      	str	r0, [r7, #4]
 8012248:	6039      	str	r1, [r7, #0]
  tcp_err_fn errf;
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 801224a:	687b      	ldr	r3, [r7, #4]
 801224c:	7d1b      	ldrb	r3, [r3, #20]
 801224e:	2b01      	cmp	r3, #1
 8012250:	d106      	bne.n	8012260 <tcp_abandon+0x20>
 8012252:	4b4d      	ldr	r3, [pc, #308]	; (8012388 <tcp_abandon+0x148>)
 8012254:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8012258:	494c      	ldr	r1, [pc, #304]	; (801238c <tcp_abandon+0x14c>)
 801225a:	484d      	ldr	r0, [pc, #308]	; (8012390 <tcp_abandon+0x150>)
 801225c:	f008 fdc8 	bl	801adf0 <iprintf>
    pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 8012260:	687b      	ldr	r3, [r7, #4]
 8012262:	7d1b      	ldrb	r3, [r3, #20]
 8012264:	2b0a      	cmp	r3, #10
 8012266:	d108      	bne.n	801227a <tcp_abandon+0x3a>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 8012268:	6879      	ldr	r1, [r7, #4]
 801226a:	484a      	ldr	r0, [pc, #296]	; (8012394 <tcp_abandon+0x154>)
 801226c:	f001 f904 	bl	8013478 <tcp_pcb_remove>
    memp_free(MEMP_TCP_PCB, pcb);
 8012270:	6879      	ldr	r1, [r7, #4]
 8012272:	2001      	movs	r0, #1
 8012274:	f7fe fdf6 	bl	8010e64 <memp_free>
    }
    last_state = pcb->state;
    memp_free(MEMP_TCP_PCB, pcb);
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
  }
}
 8012278:	e081      	b.n	801237e <tcp_abandon+0x13e>
    int send_rst = 0;
 801227a:	2300      	movs	r3, #0
 801227c:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 801227e:	2300      	movs	r3, #0
 8012280:	847b      	strh	r3, [r7, #34]	; 0x22
    seqno = pcb->snd_nxt;
 8012282:	687b      	ldr	r3, [r7, #4]
 8012284:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8012286:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 8012288:	687b      	ldr	r3, [r7, #4]
 801228a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801228c:	617b      	str	r3, [r7, #20]
    errf = pcb->errf;
 801228e:	687b      	ldr	r3, [r7, #4]
 8012290:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8012294:	613b      	str	r3, [r7, #16]
    errf_arg = pcb->callback_arg;
 8012296:	687b      	ldr	r3, [r7, #4]
 8012298:	691b      	ldr	r3, [r3, #16]
 801229a:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 801229c:	687b      	ldr	r3, [r7, #4]
 801229e:	7d1b      	ldrb	r3, [r3, #20]
 80122a0:	2b00      	cmp	r3, #0
 80122a2:	d126      	bne.n	80122f2 <tcp_abandon+0xb2>
      if (pcb->local_port != 0) {
 80122a4:	687b      	ldr	r3, [r7, #4]
 80122a6:	8adb      	ldrh	r3, [r3, #22]
 80122a8:	2b00      	cmp	r3, #0
 80122aa:	d02e      	beq.n	801230a <tcp_abandon+0xca>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 80122ac:	4b3a      	ldr	r3, [pc, #232]	; (8012398 <tcp_abandon+0x158>)
 80122ae:	681b      	ldr	r3, [r3, #0]
 80122b0:	687a      	ldr	r2, [r7, #4]
 80122b2:	429a      	cmp	r2, r3
 80122b4:	d105      	bne.n	80122c2 <tcp_abandon+0x82>
 80122b6:	4b38      	ldr	r3, [pc, #224]	; (8012398 <tcp_abandon+0x158>)
 80122b8:	681b      	ldr	r3, [r3, #0]
 80122ba:	68db      	ldr	r3, [r3, #12]
 80122bc:	4a36      	ldr	r2, [pc, #216]	; (8012398 <tcp_abandon+0x158>)
 80122be:	6013      	str	r3, [r2, #0]
 80122c0:	e013      	b.n	80122ea <tcp_abandon+0xaa>
 80122c2:	4b35      	ldr	r3, [pc, #212]	; (8012398 <tcp_abandon+0x158>)
 80122c4:	681b      	ldr	r3, [r3, #0]
 80122c6:	61fb      	str	r3, [r7, #28]
 80122c8:	e00c      	b.n	80122e4 <tcp_abandon+0xa4>
 80122ca:	69fb      	ldr	r3, [r7, #28]
 80122cc:	68db      	ldr	r3, [r3, #12]
 80122ce:	687a      	ldr	r2, [r7, #4]
 80122d0:	429a      	cmp	r2, r3
 80122d2:	d104      	bne.n	80122de <tcp_abandon+0x9e>
 80122d4:	687b      	ldr	r3, [r7, #4]
 80122d6:	68da      	ldr	r2, [r3, #12]
 80122d8:	69fb      	ldr	r3, [r7, #28]
 80122da:	60da      	str	r2, [r3, #12]
 80122dc:	e005      	b.n	80122ea <tcp_abandon+0xaa>
 80122de:	69fb      	ldr	r3, [r7, #28]
 80122e0:	68db      	ldr	r3, [r3, #12]
 80122e2:	61fb      	str	r3, [r7, #28]
 80122e4:	69fb      	ldr	r3, [r7, #28]
 80122e6:	2b00      	cmp	r3, #0
 80122e8:	d1ef      	bne.n	80122ca <tcp_abandon+0x8a>
 80122ea:	687b      	ldr	r3, [r7, #4]
 80122ec:	2200      	movs	r2, #0
 80122ee:	60da      	str	r2, [r3, #12]
 80122f0:	e00b      	b.n	801230a <tcp_abandon+0xca>
      send_rst = reset;
 80122f2:	683b      	ldr	r3, [r7, #0]
 80122f4:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 80122f6:	687b      	ldr	r3, [r7, #4]
 80122f8:	8adb      	ldrh	r3, [r3, #22]
 80122fa:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 80122fc:	6879      	ldr	r1, [r7, #4]
 80122fe:	4827      	ldr	r0, [pc, #156]	; (801239c <tcp_abandon+0x15c>)
 8012300:	f001 f8ba 	bl	8013478 <tcp_pcb_remove>
 8012304:	4b26      	ldr	r3, [pc, #152]	; (80123a0 <tcp_abandon+0x160>)
 8012306:	2201      	movs	r2, #1
 8012308:	701a      	strb	r2, [r3, #0]
    if (pcb->unacked != NULL) {
 801230a:	687b      	ldr	r3, [r7, #4]
 801230c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801230e:	2b00      	cmp	r3, #0
 8012310:	d004      	beq.n	801231c <tcp_abandon+0xdc>
      tcp_segs_free(pcb->unacked);
 8012312:	687b      	ldr	r3, [r7, #4]
 8012314:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012316:	4618      	mov	r0, r3
 8012318:	f000 fe03 	bl	8012f22 <tcp_segs_free>
    if (pcb->unsent != NULL) {
 801231c:	687b      	ldr	r3, [r7, #4]
 801231e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8012320:	2b00      	cmp	r3, #0
 8012322:	d004      	beq.n	801232e <tcp_abandon+0xee>
      tcp_segs_free(pcb->unsent);
 8012324:	687b      	ldr	r3, [r7, #4]
 8012326:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8012328:	4618      	mov	r0, r3
 801232a:	f000 fdfa 	bl	8012f22 <tcp_segs_free>
    if (pcb->ooseq != NULL) {
 801232e:	687b      	ldr	r3, [r7, #4]
 8012330:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012332:	2b00      	cmp	r3, #0
 8012334:	d004      	beq.n	8012340 <tcp_abandon+0x100>
      tcp_segs_free(pcb->ooseq);
 8012336:	687b      	ldr	r3, [r7, #4]
 8012338:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801233a:	4618      	mov	r0, r3
 801233c:	f000 fdf1 	bl	8012f22 <tcp_segs_free>
    if (send_rst) {
 8012340:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012342:	2b00      	cmp	r3, #0
 8012344:	d00c      	beq.n	8012360 <tcp_abandon+0x120>
      tcp_rst(seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 8012346:	687a      	ldr	r2, [r7, #4]
 8012348:	687b      	ldr	r3, [r7, #4]
 801234a:	1d19      	adds	r1, r3, #4
 801234c:	687b      	ldr	r3, [r7, #4]
 801234e:	8b1b      	ldrh	r3, [r3, #24]
 8012350:	9301      	str	r3, [sp, #4]
 8012352:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8012354:	9300      	str	r3, [sp, #0]
 8012356:	460b      	mov	r3, r1
 8012358:	6979      	ldr	r1, [r7, #20]
 801235a:	69b8      	ldr	r0, [r7, #24]
 801235c:	f004 fd16 	bl	8016d8c <tcp_rst>
    last_state = pcb->state;
 8012360:	687b      	ldr	r3, [r7, #4]
 8012362:	7d1b      	ldrb	r3, [r3, #20]
 8012364:	72fb      	strb	r3, [r7, #11]
    memp_free(MEMP_TCP_PCB, pcb);
 8012366:	6879      	ldr	r1, [r7, #4]
 8012368:	2001      	movs	r0, #1
 801236a:	f7fe fd7b 	bl	8010e64 <memp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 801236e:	693b      	ldr	r3, [r7, #16]
 8012370:	2b00      	cmp	r3, #0
 8012372:	d004      	beq.n	801237e <tcp_abandon+0x13e>
 8012374:	693b      	ldr	r3, [r7, #16]
 8012376:	f06f 010c 	mvn.w	r1, #12
 801237a:	68f8      	ldr	r0, [r7, #12]
 801237c:	4798      	blx	r3
}
 801237e:	bf00      	nop
 8012380:	3728      	adds	r7, #40	; 0x28
 8012382:	46bd      	mov	sp, r7
 8012384:	bd80      	pop	{r7, pc}
 8012386:	bf00      	nop
 8012388:	0801d30c 	.word	0x0801d30c
 801238c:	0801d3a4 	.word	0x0801d3a4
 8012390:	0801d348 	.word	0x0801d348
 8012394:	2000ab50 	.word	0x2000ab50
 8012398:	2000ab4c 	.word	0x2000ab4c
 801239c:	2000ab40 	.word	0x2000ab40
 80123a0:	2000ab3c 	.word	0x2000ab3c

080123a4 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 80123a4:	b580      	push	{r7, lr}
 80123a6:	b082      	sub	sp, #8
 80123a8:	af00      	add	r7, sp, #0
 80123aa:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 80123ac:	2101      	movs	r1, #1
 80123ae:	6878      	ldr	r0, [r7, #4]
 80123b0:	f7ff ff46 	bl	8012240 <tcp_abandon>
}
 80123b4:	bf00      	nop
 80123b6:	3708      	adds	r7, #8
 80123b8:	46bd      	mov	sp, r7
 80123ba:	bd80      	pop	{r7, pc}

080123bc <tcp_bind>:
 *         ERR_VAL if bind failed because the PCB is not in a valid state
 *         ERR_OK if bound
 */
err_t
tcp_bind(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 80123bc:	b580      	push	{r7, lr}
 80123be:	b088      	sub	sp, #32
 80123c0:	af00      	add	r7, sp, #0
 80123c2:	60f8      	str	r0, [r7, #12]
 80123c4:	60b9      	str	r1, [r7, #8]
 80123c6:	4613      	mov	r3, r2
 80123c8:	80fb      	strh	r3, [r7, #6]
  int i;
  int max_pcb_list = NUM_TCP_PCB_LISTS;
 80123ca:	2304      	movs	r3, #4
 80123cc:	617b      	str	r3, [r7, #20]
  struct tcp_pcb *cpcb;

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 80123ce:	68bb      	ldr	r3, [r7, #8]
 80123d0:	2b00      	cmp	r3, #0
 80123d2:	d101      	bne.n	80123d8 <tcp_bind+0x1c>
    ipaddr = IP4_ADDR_ANY;
 80123d4:	4b3c      	ldr	r3, [pc, #240]	; (80124c8 <tcp_bind+0x10c>)
 80123d6:	60bb      	str	r3, [r7, #8]
  }
#endif /* LWIP_IPV4 */

  /* still need to check for ipaddr == NULL in IPv6 only case */
  if ((pcb == NULL) || (ipaddr == NULL)) {
 80123d8:	68fb      	ldr	r3, [r7, #12]
 80123da:	2b00      	cmp	r3, #0
 80123dc:	d002      	beq.n	80123e4 <tcp_bind+0x28>
 80123de:	68bb      	ldr	r3, [r7, #8]
 80123e0:	2b00      	cmp	r3, #0
 80123e2:	d102      	bne.n	80123ea <tcp_bind+0x2e>
    return ERR_VAL;
 80123e4:	f06f 0305 	mvn.w	r3, #5
 80123e8:	e06a      	b.n	80124c0 <tcp_bind+0x104>
  }

  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
 80123ea:	68fb      	ldr	r3, [r7, #12]
 80123ec:	7d1b      	ldrb	r3, [r3, #20]
 80123ee:	2b00      	cmp	r3, #0
 80123f0:	d009      	beq.n	8012406 <tcp_bind+0x4a>
 80123f2:	4b36      	ldr	r3, [pc, #216]	; (80124cc <tcp_bind+0x110>)
 80123f4:	f44f 7211 	mov.w	r2, #580	; 0x244
 80123f8:	4935      	ldr	r1, [pc, #212]	; (80124d0 <tcp_bind+0x114>)
 80123fa:	4836      	ldr	r0, [pc, #216]	; (80124d4 <tcp_bind+0x118>)
 80123fc:	f008 fcf8 	bl	801adf0 <iprintf>
 8012400:	f06f 0305 	mvn.w	r3, #5
 8012404:	e05c      	b.n	80124c0 <tcp_bind+0x104>
  if (ip_get_option(pcb, SOF_REUSEADDR)) {
    max_pcb_list = NUM_TCP_PCB_LISTS_NO_TIME_WAIT;
  }
#endif /* SO_REUSE */

  if (port == 0) {
 8012406:	88fb      	ldrh	r3, [r7, #6]
 8012408:	2b00      	cmp	r3, #0
 801240a:	d109      	bne.n	8012420 <tcp_bind+0x64>
    port = tcp_new_port();
 801240c:	f000 f9b8 	bl	8012780 <tcp_new_port>
 8012410:	4603      	mov	r3, r0
 8012412:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 8012414:	88fb      	ldrh	r3, [r7, #6]
 8012416:	2b00      	cmp	r3, #0
 8012418:	d135      	bne.n	8012486 <tcp_bind+0xca>
      return ERR_BUF;
 801241a:	f06f 0301 	mvn.w	r3, #1
 801241e:	e04f      	b.n	80124c0 <tcp_bind+0x104>
    }
  } else {
    /* Check if the address already is in use (on all lists) */
    for (i = 0; i < max_pcb_list; i++) {
 8012420:	2300      	movs	r3, #0
 8012422:	61fb      	str	r3, [r7, #28]
 8012424:	e02b      	b.n	801247e <tcp_bind+0xc2>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 8012426:	4a2c      	ldr	r2, [pc, #176]	; (80124d8 <tcp_bind+0x11c>)
 8012428:	69fb      	ldr	r3, [r7, #28]
 801242a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801242e:	681b      	ldr	r3, [r3, #0]
 8012430:	61bb      	str	r3, [r7, #24]
 8012432:	e01e      	b.n	8012472 <tcp_bind+0xb6>
        if (cpcb->local_port == port) {
 8012434:	69bb      	ldr	r3, [r7, #24]
 8012436:	8adb      	ldrh	r3, [r3, #22]
 8012438:	88fa      	ldrh	r2, [r7, #6]
 801243a:	429a      	cmp	r2, r3
 801243c:	d116      	bne.n	801246c <tcp_bind+0xb0>
              !ip_get_option(cpcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
          {
            /* @todo: check accept_any_ip_version */
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
                (ip_addr_isany(&cpcb->local_ip) ||
 801243e:	69bb      	ldr	r3, [r7, #24]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 8012440:	2b00      	cmp	r3, #0
 8012442:	d010      	beq.n	8012466 <tcp_bind+0xaa>
                (ip_addr_isany(&cpcb->local_ip) ||
 8012444:	69bb      	ldr	r3, [r7, #24]
 8012446:	681b      	ldr	r3, [r3, #0]
 8012448:	2b00      	cmp	r3, #0
 801244a:	d00c      	beq.n	8012466 <tcp_bind+0xaa>
 801244c:	68bb      	ldr	r3, [r7, #8]
 801244e:	2b00      	cmp	r3, #0
 8012450:	d009      	beq.n	8012466 <tcp_bind+0xaa>
                ip_addr_isany(ipaddr) ||
 8012452:	68bb      	ldr	r3, [r7, #8]
 8012454:	681b      	ldr	r3, [r3, #0]
 8012456:	2b00      	cmp	r3, #0
 8012458:	d005      	beq.n	8012466 <tcp_bind+0xaa>
                ip_addr_cmp(&cpcb->local_ip, ipaddr))) {
 801245a:	69bb      	ldr	r3, [r7, #24]
 801245c:	681a      	ldr	r2, [r3, #0]
 801245e:	68bb      	ldr	r3, [r7, #8]
 8012460:	681b      	ldr	r3, [r3, #0]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 8012462:	429a      	cmp	r2, r3
 8012464:	d102      	bne.n	801246c <tcp_bind+0xb0>
              return ERR_USE;
 8012466:	f06f 0307 	mvn.w	r3, #7
 801246a:	e029      	b.n	80124c0 <tcp_bind+0x104>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 801246c:	69bb      	ldr	r3, [r7, #24]
 801246e:	68db      	ldr	r3, [r3, #12]
 8012470:	61bb      	str	r3, [r7, #24]
 8012472:	69bb      	ldr	r3, [r7, #24]
 8012474:	2b00      	cmp	r3, #0
 8012476:	d1dd      	bne.n	8012434 <tcp_bind+0x78>
    for (i = 0; i < max_pcb_list; i++) {
 8012478:	69fb      	ldr	r3, [r7, #28]
 801247a:	3301      	adds	r3, #1
 801247c:	61fb      	str	r3, [r7, #28]
 801247e:	69fa      	ldr	r2, [r7, #28]
 8012480:	697b      	ldr	r3, [r7, #20]
 8012482:	429a      	cmp	r2, r3
 8012484:	dbcf      	blt.n	8012426 <tcp_bind+0x6a>
        }
      }
    }
  }

  if (!ip_addr_isany(ipaddr)) {
 8012486:	68bb      	ldr	r3, [r7, #8]
 8012488:	2b00      	cmp	r3, #0
 801248a:	d00c      	beq.n	80124a6 <tcp_bind+0xea>
 801248c:	68bb      	ldr	r3, [r7, #8]
 801248e:	681b      	ldr	r3, [r3, #0]
 8012490:	2b00      	cmp	r3, #0
 8012492:	d008      	beq.n	80124a6 <tcp_bind+0xea>
    ip_addr_set(&pcb->local_ip, ipaddr);
 8012494:	68bb      	ldr	r3, [r7, #8]
 8012496:	2b00      	cmp	r3, #0
 8012498:	d002      	beq.n	80124a0 <tcp_bind+0xe4>
 801249a:	68bb      	ldr	r3, [r7, #8]
 801249c:	681b      	ldr	r3, [r3, #0]
 801249e:	e000      	b.n	80124a2 <tcp_bind+0xe6>
 80124a0:	2300      	movs	r3, #0
 80124a2:	68fa      	ldr	r2, [r7, #12]
 80124a4:	6013      	str	r3, [r2, #0]
  }
  pcb->local_port = port;
 80124a6:	68fb      	ldr	r3, [r7, #12]
 80124a8:	88fa      	ldrh	r2, [r7, #6]
 80124aa:	82da      	strh	r2, [r3, #22]
  TCP_REG(&tcp_bound_pcbs, pcb);
 80124ac:	4b0b      	ldr	r3, [pc, #44]	; (80124dc <tcp_bind+0x120>)
 80124ae:	681a      	ldr	r2, [r3, #0]
 80124b0:	68fb      	ldr	r3, [r7, #12]
 80124b2:	60da      	str	r2, [r3, #12]
 80124b4:	4a09      	ldr	r2, [pc, #36]	; (80124dc <tcp_bind+0x120>)
 80124b6:	68fb      	ldr	r3, [r7, #12]
 80124b8:	6013      	str	r3, [r2, #0]
 80124ba:	f004 feb7 	bl	801722c <tcp_timer_needed>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_bind: bind to port %"U16_F"\n", port));
  return ERR_OK;
 80124be:	2300      	movs	r3, #0
}
 80124c0:	4618      	mov	r0, r3
 80124c2:	3720      	adds	r7, #32
 80124c4:	46bd      	mov	sp, r7
 80124c6:	bd80      	pop	{r7, pc}
 80124c8:	0801e800 	.word	0x0801e800
 80124cc:	0801d30c 	.word	0x0801d30c
 80124d0:	0801d3d8 	.word	0x0801d3d8
 80124d4:	0801d348 	.word	0x0801d348
 80124d8:	0801e7d8 	.word	0x0801e7d8
 80124dc:	2000ab4c 	.word	0x2000ab4c

080124e0 <tcp_accept_null>:
/**
 * Default accept callback if no accept callback is specified by the user.
 */
static err_t
tcp_accept_null(void *arg, struct tcp_pcb *pcb, err_t err)
{
 80124e0:	b580      	push	{r7, lr}
 80124e2:	b084      	sub	sp, #16
 80124e4:	af00      	add	r7, sp, #0
 80124e6:	60f8      	str	r0, [r7, #12]
 80124e8:	60b9      	str	r1, [r7, #8]
 80124ea:	4613      	mov	r3, r2
 80124ec:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(arg);
  LWIP_UNUSED_ARG(err);

  tcp_abort(pcb);
 80124ee:	68b8      	ldr	r0, [r7, #8]
 80124f0:	f7ff ff58 	bl	80123a4 <tcp_abort>

  return ERR_ABRT;
 80124f4:	f06f 030c 	mvn.w	r3, #12
}
 80124f8:	4618      	mov	r0, r3
 80124fa:	3710      	adds	r7, #16
 80124fc:	46bd      	mov	sp, r7
 80124fe:	bd80      	pop	{r7, pc}

08012500 <tcp_listen_with_backlog_and_err>:
 *       called like this:
 *             tpcb = tcp_listen_with_backlog_and_err(tpcb, backlog, &err);
 */
struct tcp_pcb *
tcp_listen_with_backlog_and_err(struct tcp_pcb *pcb, u8_t backlog, err_t *err)
{
 8012500:	b580      	push	{r7, lr}
 8012502:	b088      	sub	sp, #32
 8012504:	af00      	add	r7, sp, #0
 8012506:	60f8      	str	r0, [r7, #12]
 8012508:	460b      	mov	r3, r1
 801250a:	607a      	str	r2, [r7, #4]
 801250c:	72fb      	strb	r3, [r7, #11]
  struct tcp_pcb_listen *lpcb = NULL;
 801250e:	2300      	movs	r3, #0
 8012510:	61fb      	str	r3, [r7, #28]
  err_t res;

  LWIP_UNUSED_ARG(backlog);
  LWIP_ERROR("tcp_listen: pcb already connected", pcb->state == CLOSED, res = ERR_CLSD; goto done);
 8012512:	68fb      	ldr	r3, [r7, #12]
 8012514:	7d1b      	ldrb	r3, [r3, #20]
 8012516:	2b00      	cmp	r3, #0
 8012518:	d009      	beq.n	801252e <tcp_listen_with_backlog_and_err+0x2e>
 801251a:	4b3f      	ldr	r3, [pc, #252]	; (8012618 <tcp_listen_with_backlog_and_err+0x118>)
 801251c:	f44f 722d 	mov.w	r2, #692	; 0x2b4
 8012520:	493e      	ldr	r1, [pc, #248]	; (801261c <tcp_listen_with_backlog_and_err+0x11c>)
 8012522:	483f      	ldr	r0, [pc, #252]	; (8012620 <tcp_listen_with_backlog_and_err+0x120>)
 8012524:	f008 fc64 	bl	801adf0 <iprintf>
 8012528:	23f1      	movs	r3, #241	; 0xf1
 801252a:	76fb      	strb	r3, [r7, #27]
 801252c:	e069      	b.n	8012602 <tcp_listen_with_backlog_and_err+0x102>

  /* already listening? */
  if (pcb->state == LISTEN) {
 801252e:	68fb      	ldr	r3, [r7, #12]
 8012530:	7d1b      	ldrb	r3, [r3, #20]
 8012532:	2b01      	cmp	r3, #1
 8012534:	d104      	bne.n	8012540 <tcp_listen_with_backlog_and_err+0x40>
    lpcb = (struct tcp_pcb_listen*)pcb;
 8012536:	68fb      	ldr	r3, [r7, #12]
 8012538:	61fb      	str	r3, [r7, #28]
    res = ERR_ALREADY;
 801253a:	23f7      	movs	r3, #247	; 0xf7
 801253c:	76fb      	strb	r3, [r7, #27]
    goto done;
 801253e:	e060      	b.n	8012602 <tcp_listen_with_backlog_and_err+0x102>
        goto done;
      }
    }
  }
#endif /* SO_REUSE */
  lpcb = (struct tcp_pcb_listen *)memp_malloc(MEMP_TCP_PCB_LISTEN);
 8012540:	2002      	movs	r0, #2
 8012542:	f7fe fc3d 	bl	8010dc0 <memp_malloc>
 8012546:	61f8      	str	r0, [r7, #28]
  if (lpcb == NULL) {
 8012548:	69fb      	ldr	r3, [r7, #28]
 801254a:	2b00      	cmp	r3, #0
 801254c:	d102      	bne.n	8012554 <tcp_listen_with_backlog_and_err+0x54>
    res = ERR_MEM;
 801254e:	23ff      	movs	r3, #255	; 0xff
 8012550:	76fb      	strb	r3, [r7, #27]
    goto done;
 8012552:	e056      	b.n	8012602 <tcp_listen_with_backlog_and_err+0x102>
  }
  lpcb->callback_arg = pcb->callback_arg;
 8012554:	68fb      	ldr	r3, [r7, #12]
 8012556:	691a      	ldr	r2, [r3, #16]
 8012558:	69fb      	ldr	r3, [r7, #28]
 801255a:	611a      	str	r2, [r3, #16]
  lpcb->local_port = pcb->local_port;
 801255c:	68fb      	ldr	r3, [r7, #12]
 801255e:	8ada      	ldrh	r2, [r3, #22]
 8012560:	69fb      	ldr	r3, [r7, #28]
 8012562:	82da      	strh	r2, [r3, #22]
  lpcb->state = LISTEN;
 8012564:	69fb      	ldr	r3, [r7, #28]
 8012566:	2201      	movs	r2, #1
 8012568:	751a      	strb	r2, [r3, #20]
  lpcb->prio = pcb->prio;
 801256a:	68fb      	ldr	r3, [r7, #12]
 801256c:	7d5a      	ldrb	r2, [r3, #21]
 801256e:	69fb      	ldr	r3, [r7, #28]
 8012570:	755a      	strb	r2, [r3, #21]
  lpcb->so_options = pcb->so_options;
 8012572:	68fb      	ldr	r3, [r7, #12]
 8012574:	7a1a      	ldrb	r2, [r3, #8]
 8012576:	69fb      	ldr	r3, [r7, #28]
 8012578:	721a      	strb	r2, [r3, #8]
  lpcb->ttl = pcb->ttl;
 801257a:	68fb      	ldr	r3, [r7, #12]
 801257c:	7a9a      	ldrb	r2, [r3, #10]
 801257e:	69fb      	ldr	r3, [r7, #28]
 8012580:	729a      	strb	r2, [r3, #10]
  lpcb->tos = pcb->tos;
 8012582:	68fb      	ldr	r3, [r7, #12]
 8012584:	7a5a      	ldrb	r2, [r3, #9]
 8012586:	69fb      	ldr	r3, [r7, #28]
 8012588:	725a      	strb	r2, [r3, #9]
#if LWIP_IPV4 && LWIP_IPV6
  IP_SET_TYPE_VAL(lpcb->remote_ip, pcb->local_ip.type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  ip_addr_copy(lpcb->local_ip, pcb->local_ip);
 801258a:	68fb      	ldr	r3, [r7, #12]
 801258c:	681a      	ldr	r2, [r3, #0]
 801258e:	69fb      	ldr	r3, [r7, #28]
 8012590:	601a      	str	r2, [r3, #0]
  if (pcb->local_port != 0) {
 8012592:	68fb      	ldr	r3, [r7, #12]
 8012594:	8adb      	ldrh	r3, [r3, #22]
 8012596:	2b00      	cmp	r3, #0
 8012598:	d021      	beq.n	80125de <tcp_listen_with_backlog_and_err+0xde>
    TCP_RMV(&tcp_bound_pcbs, pcb);
 801259a:	4b22      	ldr	r3, [pc, #136]	; (8012624 <tcp_listen_with_backlog_and_err+0x124>)
 801259c:	681b      	ldr	r3, [r3, #0]
 801259e:	68fa      	ldr	r2, [r7, #12]
 80125a0:	429a      	cmp	r2, r3
 80125a2:	d105      	bne.n	80125b0 <tcp_listen_with_backlog_and_err+0xb0>
 80125a4:	4b1f      	ldr	r3, [pc, #124]	; (8012624 <tcp_listen_with_backlog_and_err+0x124>)
 80125a6:	681b      	ldr	r3, [r3, #0]
 80125a8:	68db      	ldr	r3, [r3, #12]
 80125aa:	4a1e      	ldr	r2, [pc, #120]	; (8012624 <tcp_listen_with_backlog_and_err+0x124>)
 80125ac:	6013      	str	r3, [r2, #0]
 80125ae:	e013      	b.n	80125d8 <tcp_listen_with_backlog_and_err+0xd8>
 80125b0:	4b1c      	ldr	r3, [pc, #112]	; (8012624 <tcp_listen_with_backlog_and_err+0x124>)
 80125b2:	681b      	ldr	r3, [r3, #0]
 80125b4:	617b      	str	r3, [r7, #20]
 80125b6:	e00c      	b.n	80125d2 <tcp_listen_with_backlog_and_err+0xd2>
 80125b8:	697b      	ldr	r3, [r7, #20]
 80125ba:	68db      	ldr	r3, [r3, #12]
 80125bc:	68fa      	ldr	r2, [r7, #12]
 80125be:	429a      	cmp	r2, r3
 80125c0:	d104      	bne.n	80125cc <tcp_listen_with_backlog_and_err+0xcc>
 80125c2:	68fb      	ldr	r3, [r7, #12]
 80125c4:	68da      	ldr	r2, [r3, #12]
 80125c6:	697b      	ldr	r3, [r7, #20]
 80125c8:	60da      	str	r2, [r3, #12]
 80125ca:	e005      	b.n	80125d8 <tcp_listen_with_backlog_and_err+0xd8>
 80125cc:	697b      	ldr	r3, [r7, #20]
 80125ce:	68db      	ldr	r3, [r3, #12]
 80125d0:	617b      	str	r3, [r7, #20]
 80125d2:	697b      	ldr	r3, [r7, #20]
 80125d4:	2b00      	cmp	r3, #0
 80125d6:	d1ef      	bne.n	80125b8 <tcp_listen_with_backlog_and_err+0xb8>
 80125d8:	68fb      	ldr	r3, [r7, #12]
 80125da:	2200      	movs	r2, #0
 80125dc:	60da      	str	r2, [r3, #12]
  }
  memp_free(MEMP_TCP_PCB, pcb);
 80125de:	68f9      	ldr	r1, [r7, #12]
 80125e0:	2001      	movs	r0, #1
 80125e2:	f7fe fc3f 	bl	8010e64 <memp_free>
#if LWIP_CALLBACK_API
  lpcb->accept = tcp_accept_null;
 80125e6:	69fb      	ldr	r3, [r7, #28]
 80125e8:	4a0f      	ldr	r2, [pc, #60]	; (8012628 <tcp_listen_with_backlog_and_err+0x128>)
 80125ea:	619a      	str	r2, [r3, #24]
#endif /* LWIP_CALLBACK_API */
#if TCP_LISTEN_BACKLOG
  lpcb->accepts_pending = 0;
  tcp_backlog_set(lpcb, backlog);
#endif /* TCP_LISTEN_BACKLOG */
  TCP_REG(&tcp_listen_pcbs.pcbs, (struct tcp_pcb *)lpcb);
 80125ec:	4b0f      	ldr	r3, [pc, #60]	; (801262c <tcp_listen_with_backlog_and_err+0x12c>)
 80125ee:	681a      	ldr	r2, [r3, #0]
 80125f0:	69fb      	ldr	r3, [r7, #28]
 80125f2:	60da      	str	r2, [r3, #12]
 80125f4:	4a0d      	ldr	r2, [pc, #52]	; (801262c <tcp_listen_with_backlog_and_err+0x12c>)
 80125f6:	69fb      	ldr	r3, [r7, #28]
 80125f8:	6013      	str	r3, [r2, #0]
 80125fa:	f004 fe17 	bl	801722c <tcp_timer_needed>
  res = ERR_OK;
 80125fe:	2300      	movs	r3, #0
 8012600:	76fb      	strb	r3, [r7, #27]
done:
  if (err != NULL) {
 8012602:	687b      	ldr	r3, [r7, #4]
 8012604:	2b00      	cmp	r3, #0
 8012606:	d002      	beq.n	801260e <tcp_listen_with_backlog_and_err+0x10e>
    *err = res;
 8012608:	687b      	ldr	r3, [r7, #4]
 801260a:	7efa      	ldrb	r2, [r7, #27]
 801260c:	701a      	strb	r2, [r3, #0]
  }
  return (struct tcp_pcb *)lpcb;
 801260e:	69fb      	ldr	r3, [r7, #28]
}
 8012610:	4618      	mov	r0, r3
 8012612:	3720      	adds	r7, #32
 8012614:	46bd      	mov	sp, r7
 8012616:	bd80      	pop	{r7, pc}
 8012618:	0801d30c 	.word	0x0801d30c
 801261c:	0801d400 	.word	0x0801d400
 8012620:	0801d348 	.word	0x0801d348
 8012624:	2000ab4c 	.word	0x2000ab4c
 8012628:	080124e1 	.word	0x080124e1
 801262c:	2000ab48 	.word	0x2000ab48

08012630 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 8012630:	b580      	push	{r7, lr}
 8012632:	b084      	sub	sp, #16
 8012634:	af00      	add	r7, sp, #0
 8012636:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 8012638:	687b      	ldr	r3, [r7, #4]
 801263a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801263c:	687a      	ldr	r2, [r7, #4]
 801263e:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 8012640:	4413      	add	r3, r2
 8012642:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 8012644:	687b      	ldr	r3, [r7, #4]
 8012646:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012648:	687a      	ldr	r2, [r7, #4]
 801264a:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 801264c:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 8012650:	bf28      	it	cs
 8012652:	f44f 6286 	movcs.w	r2, #1072	; 0x430
 8012656:	b292      	uxth	r2, r2
 8012658:	4413      	add	r3, r2
 801265a:	68fa      	ldr	r2, [r7, #12]
 801265c:	1ad3      	subs	r3, r2, r3
 801265e:	2b00      	cmp	r3, #0
 8012660:	db08      	blt.n	8012674 <tcp_update_rcv_ann_wnd+0x44>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 8012662:	687b      	ldr	r3, [r7, #4]
 8012664:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8012666:	687b      	ldr	r3, [r7, #4]
 8012668:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 801266a:	687b      	ldr	r3, [r7, #4]
 801266c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801266e:	68fa      	ldr	r2, [r7, #12]
 8012670:	1ad3      	subs	r3, r2, r3
 8012672:	e020      	b.n	80126b6 <tcp_update_rcv_ann_wnd+0x86>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 8012674:	687b      	ldr	r3, [r7, #4]
 8012676:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8012678:	687b      	ldr	r3, [r7, #4]
 801267a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801267c:	1ad3      	subs	r3, r2, r3
 801267e:	2b00      	cmp	r3, #0
 8012680:	dd03      	ble.n	801268a <tcp_update_rcv_ann_wnd+0x5a>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 8012682:	687b      	ldr	r3, [r7, #4]
 8012684:	2200      	movs	r2, #0
 8012686:	855a      	strh	r2, [r3, #42]	; 0x2a
 8012688:	e014      	b.n	80126b4 <tcp_update_rcv_ann_wnd+0x84>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 801268a:	687b      	ldr	r3, [r7, #4]
 801268c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801268e:	687b      	ldr	r3, [r7, #4]
 8012690:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012692:	1ad3      	subs	r3, r2, r3
 8012694:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 8012696:	68bb      	ldr	r3, [r7, #8]
 8012698:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801269c:	d306      	bcc.n	80126ac <tcp_update_rcv_ann_wnd+0x7c>
 801269e:	4b08      	ldr	r3, [pc, #32]	; (80126c0 <tcp_update_rcv_ann_wnd+0x90>)
 80126a0:	f44f 7242 	mov.w	r2, #776	; 0x308
 80126a4:	4907      	ldr	r1, [pc, #28]	; (80126c4 <tcp_update_rcv_ann_wnd+0x94>)
 80126a6:	4808      	ldr	r0, [pc, #32]	; (80126c8 <tcp_update_rcv_ann_wnd+0x98>)
 80126a8:	f008 fba2 	bl	801adf0 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 80126ac:	68bb      	ldr	r3, [r7, #8]
 80126ae:	b29a      	uxth	r2, r3
 80126b0:	687b      	ldr	r3, [r7, #4]
 80126b2:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 80126b4:	2300      	movs	r3, #0
  }
}
 80126b6:	4618      	mov	r0, r3
 80126b8:	3710      	adds	r7, #16
 80126ba:	46bd      	mov	sp, r7
 80126bc:	bd80      	pop	{r7, pc}
 80126be:	bf00      	nop
 80126c0:	0801d30c 	.word	0x0801d30c
 80126c4:	0801d424 	.word	0x0801d424
 80126c8:	0801d348 	.word	0x0801d348

080126cc <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 80126cc:	b580      	push	{r7, lr}
 80126ce:	b084      	sub	sp, #16
 80126d0:	af00      	add	r7, sp, #0
 80126d2:	6078      	str	r0, [r7, #4]
 80126d4:	460b      	mov	r3, r1
 80126d6:	807b      	strh	r3, [r7, #2]
  int wnd_inflation;

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 80126d8:	687b      	ldr	r3, [r7, #4]
 80126da:	7d1b      	ldrb	r3, [r3, #20]
 80126dc:	2b01      	cmp	r3, #1
 80126de:	d106      	bne.n	80126ee <tcp_recved+0x22>
 80126e0:	4b23      	ldr	r3, [pc, #140]	; (8012770 <tcp_recved+0xa4>)
 80126e2:	f44f 7248 	mov.w	r2, #800	; 0x320
 80126e6:	4923      	ldr	r1, [pc, #140]	; (8012774 <tcp_recved+0xa8>)
 80126e8:	4823      	ldr	r0, [pc, #140]	; (8012778 <tcp_recved+0xac>)
 80126ea:	f008 fb81 	bl	801adf0 <iprintf>
    pcb->state != LISTEN);

  pcb->rcv_wnd += len;
 80126ee:	687b      	ldr	r3, [r7, #4]
 80126f0:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80126f2:	887b      	ldrh	r3, [r7, #2]
 80126f4:	4413      	add	r3, r2
 80126f6:	b29a      	uxth	r2, r3
 80126f8:	687b      	ldr	r3, [r7, #4]
 80126fa:	851a      	strh	r2, [r3, #40]	; 0x28
  if (pcb->rcv_wnd > TCP_WND_MAX(pcb)) {
 80126fc:	687b      	ldr	r3, [r7, #4]
 80126fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8012700:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8012704:	d904      	bls.n	8012710 <tcp_recved+0x44>
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 8012706:	687b      	ldr	r3, [r7, #4]
 8012708:	f44f 6206 	mov.w	r2, #2144	; 0x860
 801270c:	851a      	strh	r2, [r3, #40]	; 0x28
 801270e:	e017      	b.n	8012740 <tcp_recved+0x74>
  } else if (pcb->rcv_wnd == 0) {
 8012710:	687b      	ldr	r3, [r7, #4]
 8012712:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8012714:	2b00      	cmp	r3, #0
 8012716:	d113      	bne.n	8012740 <tcp_recved+0x74>
    /* rcv_wnd overflowed */
    if ((pcb->state == CLOSE_WAIT) || (pcb->state == LAST_ACK)) {
 8012718:	687b      	ldr	r3, [r7, #4]
 801271a:	7d1b      	ldrb	r3, [r3, #20]
 801271c:	2b07      	cmp	r3, #7
 801271e:	d003      	beq.n	8012728 <tcp_recved+0x5c>
 8012720:	687b      	ldr	r3, [r7, #4]
 8012722:	7d1b      	ldrb	r3, [r3, #20]
 8012724:	2b09      	cmp	r3, #9
 8012726:	d104      	bne.n	8012732 <tcp_recved+0x66>
      /* In passive close, we allow this, since the FIN bit is added to rcv_wnd
         by the stack itself, since it is not mandatory for an application
         to call tcp_recved() for the FIN bit, but e.g. the netconn API does so. */
      pcb->rcv_wnd = TCP_WND_MAX(pcb);
 8012728:	687b      	ldr	r3, [r7, #4]
 801272a:	f44f 6206 	mov.w	r2, #2144	; 0x860
 801272e:	851a      	strh	r2, [r3, #40]	; 0x28
 8012730:	e006      	b.n	8012740 <tcp_recved+0x74>
    } else {
      LWIP_ASSERT("tcp_recved: len wrapped rcv_wnd\n", 0);
 8012732:	4b0f      	ldr	r3, [pc, #60]	; (8012770 <tcp_recved+0xa4>)
 8012734:	f240 322d 	movw	r2, #813	; 0x32d
 8012738:	4910      	ldr	r1, [pc, #64]	; (801277c <tcp_recved+0xb0>)
 801273a:	480f      	ldr	r0, [pc, #60]	; (8012778 <tcp_recved+0xac>)
 801273c:	f008 fb58 	bl	801adf0 <iprintf>
    }
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 8012740:	6878      	ldr	r0, [r7, #4]
 8012742:	f7ff ff75 	bl	8012630 <tcp_update_rcv_ann_wnd>
 8012746:	4603      	mov	r3, r0
 8012748:	60fb      	str	r3, [r7, #12]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 801274a:	68fb      	ldr	r3, [r7, #12]
 801274c:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 8012750:	db09      	blt.n	8012766 <tcp_recved+0x9a>
    tcp_ack_now(pcb);
 8012752:	687b      	ldr	r3, [r7, #4]
 8012754:	7e9b      	ldrb	r3, [r3, #26]
 8012756:	f043 0302 	orr.w	r3, r3, #2
 801275a:	b2da      	uxtb	r2, r3
 801275c:	687b      	ldr	r3, [r7, #4]
 801275e:	769a      	strb	r2, [r3, #26]
    tcp_output(pcb);
 8012760:	6878      	ldr	r0, [r7, #4]
 8012762:	f004 f889 	bl	8016878 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
         len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 8012766:	bf00      	nop
 8012768:	3710      	adds	r7, #16
 801276a:	46bd      	mov	sp, r7
 801276c:	bd80      	pop	{r7, pc}
 801276e:	bf00      	nop
 8012770:	0801d30c 	.word	0x0801d30c
 8012774:	0801d440 	.word	0x0801d440
 8012778:	0801d348 	.word	0x0801d348
 801277c:	0801d468 	.word	0x0801d468

08012780 <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 8012780:	b480      	push	{r7}
 8012782:	b083      	sub	sp, #12
 8012784:	af00      	add	r7, sp, #0
  u8_t i;
  u16_t n = 0;
 8012786:	2300      	movs	r3, #0
 8012788:	80bb      	strh	r3, [r7, #4]
  struct tcp_pcb *pcb;

again:
  if (tcp_port++ == TCP_LOCAL_PORT_RANGE_END) {
 801278a:	4b1d      	ldr	r3, [pc, #116]	; (8012800 <tcp_new_port+0x80>)
 801278c:	881b      	ldrh	r3, [r3, #0]
 801278e:	1c5a      	adds	r2, r3, #1
 8012790:	b291      	uxth	r1, r2
 8012792:	4a1b      	ldr	r2, [pc, #108]	; (8012800 <tcp_new_port+0x80>)
 8012794:	8011      	strh	r1, [r2, #0]
 8012796:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801279a:	4293      	cmp	r3, r2
 801279c:	d103      	bne.n	80127a6 <tcp_new_port+0x26>
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 801279e:	4b18      	ldr	r3, [pc, #96]	; (8012800 <tcp_new_port+0x80>)
 80127a0:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 80127a4:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 80127a6:	2300      	movs	r3, #0
 80127a8:	71fb      	strb	r3, [r7, #7]
 80127aa:	e01e      	b.n	80127ea <tcp_new_port+0x6a>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 80127ac:	79fb      	ldrb	r3, [r7, #7]
 80127ae:	4a15      	ldr	r2, [pc, #84]	; (8012804 <tcp_new_port+0x84>)
 80127b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80127b4:	681b      	ldr	r3, [r3, #0]
 80127b6:	603b      	str	r3, [r7, #0]
 80127b8:	e011      	b.n	80127de <tcp_new_port+0x5e>
      if (pcb->local_port == tcp_port) {
 80127ba:	683b      	ldr	r3, [r7, #0]
 80127bc:	8ada      	ldrh	r2, [r3, #22]
 80127be:	4b10      	ldr	r3, [pc, #64]	; (8012800 <tcp_new_port+0x80>)
 80127c0:	881b      	ldrh	r3, [r3, #0]
 80127c2:	429a      	cmp	r2, r3
 80127c4:	d108      	bne.n	80127d8 <tcp_new_port+0x58>
        if (++n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 80127c6:	88bb      	ldrh	r3, [r7, #4]
 80127c8:	3301      	adds	r3, #1
 80127ca:	80bb      	strh	r3, [r7, #4]
 80127cc:	88bb      	ldrh	r3, [r7, #4]
 80127ce:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80127d2:	d3da      	bcc.n	801278a <tcp_new_port+0xa>
          return 0;
 80127d4:	2300      	movs	r3, #0
 80127d6:	e00d      	b.n	80127f4 <tcp_new_port+0x74>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 80127d8:	683b      	ldr	r3, [r7, #0]
 80127da:	68db      	ldr	r3, [r3, #12]
 80127dc:	603b      	str	r3, [r7, #0]
 80127de:	683b      	ldr	r3, [r7, #0]
 80127e0:	2b00      	cmp	r3, #0
 80127e2:	d1ea      	bne.n	80127ba <tcp_new_port+0x3a>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 80127e4:	79fb      	ldrb	r3, [r7, #7]
 80127e6:	3301      	adds	r3, #1
 80127e8:	71fb      	strb	r3, [r7, #7]
 80127ea:	79fb      	ldrb	r3, [r7, #7]
 80127ec:	2b03      	cmp	r3, #3
 80127ee:	d9dd      	bls.n	80127ac <tcp_new_port+0x2c>
        }
        goto again;
      }
    }
  }
  return tcp_port;
 80127f0:	4b03      	ldr	r3, [pc, #12]	; (8012800 <tcp_new_port+0x80>)
 80127f2:	881b      	ldrh	r3, [r3, #0]
}
 80127f4:	4618      	mov	r0, r3
 80127f6:	370c      	adds	r7, #12
 80127f8:	46bd      	mov	sp, r7
 80127fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80127fe:	4770      	bx	lr
 8012800:	2000011c 	.word	0x2000011c
 8012804:	0801e7d8 	.word	0x0801e7d8

08012808 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 8012808:	b5b0      	push	{r4, r5, r7, lr}
 801280a:	b08c      	sub	sp, #48	; 0x30
 801280c:	af02      	add	r7, sp, #8
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 801280e:	2300      	movs	r3, #0
 8012810:	777b      	strb	r3, [r7, #29]

  ++tcp_ticks;
 8012812:	4b97      	ldr	r3, [pc, #604]	; (8012a70 <tcp_slowtmr+0x268>)
 8012814:	681b      	ldr	r3, [r3, #0]
 8012816:	3301      	adds	r3, #1
 8012818:	4a95      	ldr	r2, [pc, #596]	; (8012a70 <tcp_slowtmr+0x268>)
 801281a:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 801281c:	4b95      	ldr	r3, [pc, #596]	; (8012a74 <tcp_slowtmr+0x26c>)
 801281e:	781b      	ldrb	r3, [r3, #0]
 8012820:	3301      	adds	r3, #1
 8012822:	b2da      	uxtb	r2, r3
 8012824:	4b93      	ldr	r3, [pc, #588]	; (8012a74 <tcp_slowtmr+0x26c>)
 8012826:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 8012828:	2300      	movs	r3, #0
 801282a:	623b      	str	r3, [r7, #32]
  pcb = tcp_active_pcbs;
 801282c:	4b92      	ldr	r3, [pc, #584]	; (8012a78 <tcp_slowtmr+0x270>)
 801282e:	681b      	ldr	r3, [r3, #0]
 8012830:	627b      	str	r3, [r7, #36]	; 0x24
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 8012832:	e227      	b.n	8012c84 <tcp_slowtmr+0x47c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 8012834:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012836:	7d1b      	ldrb	r3, [r3, #20]
 8012838:	2b00      	cmp	r3, #0
 801283a:	d106      	bne.n	801284a <tcp_slowtmr+0x42>
 801283c:	4b8f      	ldr	r3, [pc, #572]	; (8012a7c <tcp_slowtmr+0x274>)
 801283e:	f44f 727c 	mov.w	r2, #1008	; 0x3f0
 8012842:	498f      	ldr	r1, [pc, #572]	; (8012a80 <tcp_slowtmr+0x278>)
 8012844:	488f      	ldr	r0, [pc, #572]	; (8012a84 <tcp_slowtmr+0x27c>)
 8012846:	f008 fad3 	bl	801adf0 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 801284a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801284c:	7d1b      	ldrb	r3, [r3, #20]
 801284e:	2b01      	cmp	r3, #1
 8012850:	d106      	bne.n	8012860 <tcp_slowtmr+0x58>
 8012852:	4b8a      	ldr	r3, [pc, #552]	; (8012a7c <tcp_slowtmr+0x274>)
 8012854:	f240 32f1 	movw	r2, #1009	; 0x3f1
 8012858:	498b      	ldr	r1, [pc, #556]	; (8012a88 <tcp_slowtmr+0x280>)
 801285a:	488a      	ldr	r0, [pc, #552]	; (8012a84 <tcp_slowtmr+0x27c>)
 801285c:	f008 fac8 	bl	801adf0 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 8012860:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012862:	7d1b      	ldrb	r3, [r3, #20]
 8012864:	2b0a      	cmp	r3, #10
 8012866:	d106      	bne.n	8012876 <tcp_slowtmr+0x6e>
 8012868:	4b84      	ldr	r3, [pc, #528]	; (8012a7c <tcp_slowtmr+0x274>)
 801286a:	f240 32f2 	movw	r2, #1010	; 0x3f2
 801286e:	4987      	ldr	r1, [pc, #540]	; (8012a8c <tcp_slowtmr+0x284>)
 8012870:	4884      	ldr	r0, [pc, #528]	; (8012a84 <tcp_slowtmr+0x27c>)
 8012872:	f008 fabd 	bl	801adf0 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 8012876:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012878:	7f5a      	ldrb	r2, [r3, #29]
 801287a:	4b7e      	ldr	r3, [pc, #504]	; (8012a74 <tcp_slowtmr+0x26c>)
 801287c:	781b      	ldrb	r3, [r3, #0]
 801287e:	429a      	cmp	r2, r3
 8012880:	d103      	bne.n	801288a <tcp_slowtmr+0x82>
      /* skip this pcb, we have already processed it */
      pcb = pcb->next;
 8012882:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012884:	68db      	ldr	r3, [r3, #12]
 8012886:	627b      	str	r3, [r7, #36]	; 0x24
      continue;
 8012888:	e1fc      	b.n	8012c84 <tcp_slowtmr+0x47c>
    }
    pcb->last_timer = tcp_timer_ctr;
 801288a:	4b7a      	ldr	r3, [pc, #488]	; (8012a74 <tcp_slowtmr+0x26c>)
 801288c:	781a      	ldrb	r2, [r3, #0]
 801288e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012890:	775a      	strb	r2, [r3, #29]

    pcb_remove = 0;
 8012892:	2300      	movs	r3, #0
 8012894:	77fb      	strb	r3, [r7, #31]
    pcb_reset = 0;
 8012896:	2300      	movs	r3, #0
 8012898:	77bb      	strb	r3, [r7, #30]

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 801289a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801289c:	7d1b      	ldrb	r3, [r3, #20]
 801289e:	2b02      	cmp	r3, #2
 80128a0:	d108      	bne.n	80128b4 <tcp_slowtmr+0xac>
 80128a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80128a4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80128a8:	2b05      	cmp	r3, #5
 80128aa:	d903      	bls.n	80128b4 <tcp_slowtmr+0xac>
      ++pcb_remove;
 80128ac:	7ffb      	ldrb	r3, [r7, #31]
 80128ae:	3301      	adds	r3, #1
 80128b0:	77fb      	strb	r3, [r7, #31]
 80128b2:	e0a2      	b.n	80129fa <tcp_slowtmr+0x1f2>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    }
    else if (pcb->nrtx >= TCP_MAXRTX) {
 80128b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80128b6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80128ba:	2b0b      	cmp	r3, #11
 80128bc:	d903      	bls.n	80128c6 <tcp_slowtmr+0xbe>
      ++pcb_remove;
 80128be:	7ffb      	ldrb	r3, [r7, #31]
 80128c0:	3301      	adds	r3, #1
 80128c2:	77fb      	strb	r3, [r7, #31]
 80128c4:	e099      	b.n	80129fa <tcp_slowtmr+0x1f2>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 80128c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80128c8:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 80128cc:	2b00      	cmp	r3, #0
 80128ce:	d032      	beq.n	8012936 <tcp_slowtmr+0x12e>
        /* If snd_wnd is zero, use persist timer to send 1 byte probes
         * instead of using the standard retransmission mechanism. */
        u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff-1];
 80128d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80128d2:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 80128d6:	3b01      	subs	r3, #1
 80128d8:	4a6d      	ldr	r2, [pc, #436]	; (8012a90 <tcp_slowtmr+0x288>)
 80128da:	5cd3      	ldrb	r3, [r2, r3]
 80128dc:	74fb      	strb	r3, [r7, #19]
        if (pcb->persist_cnt < backoff_cnt) {
 80128de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80128e0:	f893 3094 	ldrb.w	r3, [r3, #148]	; 0x94
 80128e4:	7cfa      	ldrb	r2, [r7, #19]
 80128e6:	429a      	cmp	r2, r3
 80128e8:	d907      	bls.n	80128fa <tcp_slowtmr+0xf2>
          pcb->persist_cnt++;
 80128ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80128ec:	f893 3094 	ldrb.w	r3, [r3, #148]	; 0x94
 80128f0:	3301      	adds	r3, #1
 80128f2:	b2da      	uxtb	r2, r3
 80128f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80128f6:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
        }
        if (pcb->persist_cnt >= backoff_cnt) {
 80128fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80128fc:	f893 3094 	ldrb.w	r3, [r3, #148]	; 0x94
 8012900:	7cfa      	ldrb	r2, [r7, #19]
 8012902:	429a      	cmp	r2, r3
 8012904:	d879      	bhi.n	80129fa <tcp_slowtmr+0x1f2>
          if (tcp_zero_window_probe(pcb) == ERR_OK) {
 8012906:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8012908:	f004 fbd0 	bl	80170ac <tcp_zero_window_probe>
 801290c:	4603      	mov	r3, r0
 801290e:	2b00      	cmp	r3, #0
 8012910:	d173      	bne.n	80129fa <tcp_slowtmr+0x1f2>
            pcb->persist_cnt = 0;
 8012912:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012914:	2200      	movs	r2, #0
 8012916:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
            if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 801291a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801291c:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 8012920:	2b06      	cmp	r3, #6
 8012922:	d86a      	bhi.n	80129fa <tcp_slowtmr+0x1f2>
              pcb->persist_backoff++;
 8012924:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012926:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 801292a:	3301      	adds	r3, #1
 801292c:	b2da      	uxtb	r2, r3
 801292e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012930:	f883 2095 	strb.w	r2, [r3, #149]	; 0x95
 8012934:	e061      	b.n	80129fa <tcp_slowtmr+0x1f2>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if (pcb->rtime >= 0) {
 8012936:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012938:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 801293c:	2b00      	cmp	r3, #0
 801293e:	db08      	blt.n	8012952 <tcp_slowtmr+0x14a>
          ++pcb->rtime;
 8012940:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012942:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8012946:	b29b      	uxth	r3, r3
 8012948:	3301      	adds	r3, #1
 801294a:	b29b      	uxth	r3, r3
 801294c:	b21a      	sxth	r2, r3
 801294e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012950:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->unacked != NULL && pcb->rtime >= pcb->rto) {
 8012952:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012954:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012956:	2b00      	cmp	r3, #0
 8012958:	d04f      	beq.n	80129fa <tcp_slowtmr+0x1f2>
 801295a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801295c:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 8012960:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012962:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 8012966:	429a      	cmp	r2, r3
 8012968:	db47      	blt.n	80129fa <tcp_slowtmr+0x1f2>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));

          /* Double retransmission time-out unless we are trying to
           * connect to somebody (i.e., we are in SYN_SENT). */
          if (pcb->state != SYN_SENT) {
 801296a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801296c:	7d1b      	ldrb	r3, [r3, #20]
 801296e:	2b02      	cmp	r3, #2
 8012970:	d018      	beq.n	80129a4 <tcp_slowtmr+0x19c>
            u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff)-1);
 8012972:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012974:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8012978:	2b0c      	cmp	r3, #12
 801297a:	bf28      	it	cs
 801297c:	230c      	movcs	r3, #12
 801297e:	75fb      	strb	r3, [r7, #23]
            pcb->rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 8012980:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012982:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8012986:	10db      	asrs	r3, r3, #3
 8012988:	b21b      	sxth	r3, r3
 801298a:	461a      	mov	r2, r3
 801298c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801298e:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8012992:	4413      	add	r3, r2
 8012994:	7dfa      	ldrb	r2, [r7, #23]
 8012996:	493f      	ldr	r1, [pc, #252]	; (8012a94 <tcp_slowtmr+0x28c>)
 8012998:	5c8a      	ldrb	r2, [r1, r2]
 801299a:	4093      	lsls	r3, r2
 801299c:	b21a      	sxth	r2, r3
 801299e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80129a0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
          }

          /* Reset the retransmission timer. */
          pcb->rtime = 0;
 80129a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80129a6:	2200      	movs	r2, #0
 80129a8:	861a      	strh	r2, [r3, #48]	; 0x30

          /* Reduce congestion window and ssthresh. */
          eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 80129aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80129ac:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 80129b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80129b2:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80129b6:	4293      	cmp	r3, r2
 80129b8:	bf28      	it	cs
 80129ba:	4613      	movcs	r3, r2
 80129bc:	82bb      	strh	r3, [r7, #20]
          pcb->ssthresh = eff_wnd >> 1;
 80129be:	8abb      	ldrh	r3, [r7, #20]
 80129c0:	085b      	lsrs	r3, r3, #1
 80129c2:	b29a      	uxth	r2, r3
 80129c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80129c6:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
          if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 80129ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80129cc:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 80129d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80129d2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80129d4:	005b      	lsls	r3, r3, #1
 80129d6:	b29b      	uxth	r3, r3
 80129d8:	429a      	cmp	r2, r3
 80129da:	d206      	bcs.n	80129ea <tcp_slowtmr+0x1e2>
            pcb->ssthresh = (pcb->mss << 1);
 80129dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80129de:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80129e0:	005b      	lsls	r3, r3, #1
 80129e2:	b29a      	uxth	r2, r3
 80129e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80129e6:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
          }
          pcb->cwnd = pcb->mss;
 80129ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80129ec:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 80129ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80129f0:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          /* The following needs to be called AFTER cwnd is set to one
             mss - STJ */
          tcp_rexmit_rto(pcb);
 80129f4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80129f6:	f004 fa3f 	bl	8016e78 <tcp_rexmit_rto>
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 80129fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80129fc:	7d1b      	ldrb	r3, [r3, #20]
 80129fe:	2b06      	cmp	r3, #6
 8012a00:	d10f      	bne.n	8012a22 <tcp_slowtmr+0x21a>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 8012a02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012a04:	7e9b      	ldrb	r3, [r3, #26]
 8012a06:	f003 0310 	and.w	r3, r3, #16
 8012a0a:	2b00      	cmp	r3, #0
 8012a0c:	d009      	beq.n	8012a22 <tcp_slowtmr+0x21a>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 8012a0e:	4b18      	ldr	r3, [pc, #96]	; (8012a70 <tcp_slowtmr+0x268>)
 8012a10:	681a      	ldr	r2, [r3, #0]
 8012a12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012a14:	6a1b      	ldr	r3, [r3, #32]
 8012a16:	1ad3      	subs	r3, r2, r3
 8012a18:	2b28      	cmp	r3, #40	; 0x28
 8012a1a:	d902      	bls.n	8012a22 <tcp_slowtmr+0x21a>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 8012a1c:	7ffb      	ldrb	r3, [r7, #31]
 8012a1e:	3301      	adds	r3, #1
 8012a20:	77fb      	strb	r3, [r7, #31]
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8012a22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012a24:	7a1b      	ldrb	r3, [r3, #8]
 8012a26:	f003 0308 	and.w	r3, r3, #8
 8012a2a:	2b00      	cmp	r3, #0
 8012a2c:	d05d      	beq.n	8012aea <tcp_slowtmr+0x2e2>
       ((pcb->state == ESTABLISHED) ||
 8012a2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012a30:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8012a32:	2b04      	cmp	r3, #4
 8012a34:	d003      	beq.n	8012a3e <tcp_slowtmr+0x236>
        (pcb->state == CLOSE_WAIT))) {
 8012a36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012a38:	7d1b      	ldrb	r3, [r3, #20]
       ((pcb->state == ESTABLISHED) ||
 8012a3a:	2b07      	cmp	r3, #7
 8012a3c:	d155      	bne.n	8012aea <tcp_slowtmr+0x2e2>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8012a3e:	4b0c      	ldr	r3, [pc, #48]	; (8012a70 <tcp_slowtmr+0x268>)
 8012a40:	681a      	ldr	r2, [r3, #0]
 8012a42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012a44:	6a1b      	ldr	r3, [r3, #32]
 8012a46:	1ad2      	subs	r2, r2, r3
         (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL)
 8012a48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012a4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8012a4e:	f503 2324 	add.w	r3, r3, #671744	; 0xa4000
 8012a52:	f603 43b8 	addw	r3, r3, #3256	; 0xcb8
 8012a56:	4910      	ldr	r1, [pc, #64]	; (8012a98 <tcp_slowtmr+0x290>)
 8012a58:	fba1 1303 	umull	r1, r3, r1, r3
 8012a5c:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8012a5e:	429a      	cmp	r2, r3
 8012a60:	d91c      	bls.n	8012a9c <tcp_slowtmr+0x294>
      {
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print(TCP_DEBUG, &pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 8012a62:	7ffb      	ldrb	r3, [r7, #31]
 8012a64:	3301      	adds	r3, #1
 8012a66:	77fb      	strb	r3, [r7, #31]
        ++pcb_reset;
 8012a68:	7fbb      	ldrb	r3, [r7, #30]
 8012a6a:	3301      	adds	r3, #1
 8012a6c:	77bb      	strb	r3, [r7, #30]
 8012a6e:	e03c      	b.n	8012aea <tcp_slowtmr+0x2e2>
 8012a70:	2000ab44 	.word	0x2000ab44
 8012a74:	20004206 	.word	0x20004206
 8012a78:	2000ab40 	.word	0x2000ab40
 8012a7c:	0801d30c 	.word	0x0801d30c
 8012a80:	0801d4bc 	.word	0x0801d4bc
 8012a84:	0801d348 	.word	0x0801d348
 8012a88:	0801d4e8 	.word	0x0801d4e8
 8012a8c:	0801d514 	.word	0x0801d514
 8012a90:	0801e7d0 	.word	0x0801e7d0
 8012a94:	0801e7c0 	.word	0x0801e7c0
 8012a98:	10624dd3 	.word	0x10624dd3
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8012a9c:	4b97      	ldr	r3, [pc, #604]	; (8012cfc <tcp_slowtmr+0x4f4>)
 8012a9e:	681a      	ldr	r2, [r3, #0]
 8012aa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012aa2:	6a1b      	ldr	r3, [r3, #32]
 8012aa4:	1ad2      	subs	r2, r2, r3
                (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 8012aa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012aa8:	f8d3 1090 	ldr.w	r1, [r3, #144]	; 0x90
 8012aac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012aae:	f893 3096 	ldrb.w	r3, [r3, #150]	; 0x96
 8012ab2:	4618      	mov	r0, r3
 8012ab4:	4b92      	ldr	r3, [pc, #584]	; (8012d00 <tcp_slowtmr+0x4f8>)
 8012ab6:	fb03 f300 	mul.w	r3, r3, r0
 8012aba:	440b      	add	r3, r1
                / TCP_SLOW_INTERVAL)
 8012abc:	4991      	ldr	r1, [pc, #580]	; (8012d04 <tcp_slowtmr+0x4fc>)
 8012abe:	fba1 1303 	umull	r1, r3, r1, r3
 8012ac2:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8012ac4:	429a      	cmp	r2, r3
 8012ac6:	d910      	bls.n	8012aea <tcp_slowtmr+0x2e2>
      {
        err = tcp_keepalive(pcb);
 8012ac8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8012aca:	f004 fab2 	bl	8017032 <tcp_keepalive>
 8012ace:	4603      	mov	r3, r0
 8012ad0:	777b      	strb	r3, [r7, #29]
        if (err == ERR_OK) {
 8012ad2:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8012ad6:	2b00      	cmp	r3, #0
 8012ad8:	d107      	bne.n	8012aea <tcp_slowtmr+0x2e2>
          pcb->keep_cnt_sent++;
 8012ada:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012adc:	f893 3096 	ldrb.w	r3, [r3, #150]	; 0x96
 8012ae0:	3301      	adds	r3, #1
 8012ae2:	b2da      	uxtb	r2, r3
 8012ae4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012ae6:	f883 2096 	strb.w	r2, [r3, #150]	; 0x96

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 8012aea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012aec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012aee:	2b00      	cmp	r3, #0
 8012af0:	d016      	beq.n	8012b20 <tcp_slowtmr+0x318>
        (u32_t)tcp_ticks - pcb->tmr >= pcb->rto * TCP_OOSEQ_TIMEOUT) {
 8012af2:	4b82      	ldr	r3, [pc, #520]	; (8012cfc <tcp_slowtmr+0x4f4>)
 8012af4:	681a      	ldr	r2, [r3, #0]
 8012af6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012af8:	6a1b      	ldr	r3, [r3, #32]
 8012afa:	1ad2      	subs	r2, r2, r3
 8012afc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012afe:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 8012b02:	4619      	mov	r1, r3
 8012b04:	460b      	mov	r3, r1
 8012b06:	005b      	lsls	r3, r3, #1
 8012b08:	440b      	add	r3, r1
 8012b0a:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 8012b0c:	429a      	cmp	r2, r3
 8012b0e:	d307      	bcc.n	8012b20 <tcp_slowtmr+0x318>
      tcp_segs_free(pcb->ooseq);
 8012b10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012b12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012b14:	4618      	mov	r0, r3
 8012b16:	f000 fa04 	bl	8012f22 <tcp_segs_free>
      pcb->ooseq = NULL;
 8012b1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012b1c:	2200      	movs	r2, #0
 8012b1e:	671a      	str	r2, [r3, #112]	; 0x70
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 8012b20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012b22:	7d1b      	ldrb	r3, [r3, #20]
 8012b24:	2b03      	cmp	r3, #3
 8012b26:	d109      	bne.n	8012b3c <tcp_slowtmr+0x334>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8012b28:	4b74      	ldr	r3, [pc, #464]	; (8012cfc <tcp_slowtmr+0x4f4>)
 8012b2a:	681a      	ldr	r2, [r3, #0]
 8012b2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012b2e:	6a1b      	ldr	r3, [r3, #32]
 8012b30:	1ad3      	subs	r3, r2, r3
 8012b32:	2b28      	cmp	r3, #40	; 0x28
 8012b34:	d902      	bls.n	8012b3c <tcp_slowtmr+0x334>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 8012b36:	7ffb      	ldrb	r3, [r7, #31]
 8012b38:	3301      	adds	r3, #1
 8012b3a:	77fb      	strb	r3, [r7, #31]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 8012b3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012b3e:	7d1b      	ldrb	r3, [r3, #20]
 8012b40:	2b09      	cmp	r3, #9
 8012b42:	d109      	bne.n	8012b58 <tcp_slowtmr+0x350>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8012b44:	4b6d      	ldr	r3, [pc, #436]	; (8012cfc <tcp_slowtmr+0x4f4>)
 8012b46:	681a      	ldr	r2, [r3, #0]
 8012b48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012b4a:	6a1b      	ldr	r3, [r3, #32]
 8012b4c:	1ad3      	subs	r3, r2, r3
 8012b4e:	2bf0      	cmp	r3, #240	; 0xf0
 8012b50:	d902      	bls.n	8012b58 <tcp_slowtmr+0x350>
        ++pcb_remove;
 8012b52:	7ffb      	ldrb	r3, [r7, #31]
 8012b54:	3301      	adds	r3, #1
 8012b56:	77fb      	strb	r3, [r7, #31]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 8012b58:	7ffb      	ldrb	r3, [r7, #31]
 8012b5a:	2b00      	cmp	r3, #0
 8012b5c:	d05d      	beq.n	8012c1a <tcp_slowtmr+0x412>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 8012b5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012b60:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8012b64:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 8012b66:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8012b68:	f000 fc44 	bl	80133f4 <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 8012b6c:	6a3b      	ldr	r3, [r7, #32]
 8012b6e:	2b00      	cmp	r3, #0
 8012b70:	d010      	beq.n	8012b94 <tcp_slowtmr+0x38c>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 8012b72:	4b65      	ldr	r3, [pc, #404]	; (8012d08 <tcp_slowtmr+0x500>)
 8012b74:	681b      	ldr	r3, [r3, #0]
 8012b76:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012b78:	429a      	cmp	r2, r3
 8012b7a:	d106      	bne.n	8012b8a <tcp_slowtmr+0x382>
 8012b7c:	4b63      	ldr	r3, [pc, #396]	; (8012d0c <tcp_slowtmr+0x504>)
 8012b7e:	f240 4289 	movw	r2, #1161	; 0x489
 8012b82:	4963      	ldr	r1, [pc, #396]	; (8012d10 <tcp_slowtmr+0x508>)
 8012b84:	4863      	ldr	r0, [pc, #396]	; (8012d14 <tcp_slowtmr+0x50c>)
 8012b86:	f008 f933 	bl	801adf0 <iprintf>
        prev->next = pcb->next;
 8012b8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012b8c:	68da      	ldr	r2, [r3, #12]
 8012b8e:	6a3b      	ldr	r3, [r7, #32]
 8012b90:	60da      	str	r2, [r3, #12]
 8012b92:	e00f      	b.n	8012bb4 <tcp_slowtmr+0x3ac>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 8012b94:	4b5c      	ldr	r3, [pc, #368]	; (8012d08 <tcp_slowtmr+0x500>)
 8012b96:	681b      	ldr	r3, [r3, #0]
 8012b98:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012b9a:	429a      	cmp	r2, r3
 8012b9c:	d006      	beq.n	8012bac <tcp_slowtmr+0x3a4>
 8012b9e:	4b5b      	ldr	r3, [pc, #364]	; (8012d0c <tcp_slowtmr+0x504>)
 8012ba0:	f240 428d 	movw	r2, #1165	; 0x48d
 8012ba4:	495c      	ldr	r1, [pc, #368]	; (8012d18 <tcp_slowtmr+0x510>)
 8012ba6:	485b      	ldr	r0, [pc, #364]	; (8012d14 <tcp_slowtmr+0x50c>)
 8012ba8:	f008 f922 	bl	801adf0 <iprintf>
        tcp_active_pcbs = pcb->next;
 8012bac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012bae:	68db      	ldr	r3, [r3, #12]
 8012bb0:	4a55      	ldr	r2, [pc, #340]	; (8012d08 <tcp_slowtmr+0x500>)
 8012bb2:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 8012bb4:	7fbb      	ldrb	r3, [r7, #30]
 8012bb6:	2b00      	cmp	r3, #0
 8012bb8:	d010      	beq.n	8012bdc <tcp_slowtmr+0x3d4>
        tcp_rst(pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8012bba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012bbc:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8012bbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012bc0:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8012bc2:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 8012bc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012bc6:	1d1d      	adds	r5, r3, #4
 8012bc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012bca:	8adb      	ldrh	r3, [r3, #22]
 8012bcc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012bce:	8b12      	ldrh	r2, [r2, #24]
 8012bd0:	9201      	str	r2, [sp, #4]
 8012bd2:	9300      	str	r3, [sp, #0]
 8012bd4:	462b      	mov	r3, r5
 8012bd6:	4622      	mov	r2, r4
 8012bd8:	f004 f8d8 	bl	8016d8c <tcp_rst>
                 pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 8012bdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012bde:	691b      	ldr	r3, [r3, #16]
 8012be0:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 8012be2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012be4:	7d1b      	ldrb	r3, [r3, #20]
 8012be6:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 8012be8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012bea:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 8012bec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012bee:	68db      	ldr	r3, [r3, #12]
 8012bf0:	627b      	str	r3, [r7, #36]	; 0x24
      memp_free(MEMP_TCP_PCB, pcb2);
 8012bf2:	6839      	ldr	r1, [r7, #0]
 8012bf4:	2001      	movs	r0, #1
 8012bf6:	f7fe f935 	bl	8010e64 <memp_free>

      tcp_active_pcbs_changed = 0;
 8012bfa:	4b48      	ldr	r3, [pc, #288]	; (8012d1c <tcp_slowtmr+0x514>)
 8012bfc:	2200      	movs	r2, #0
 8012bfe:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 8012c00:	68fb      	ldr	r3, [r7, #12]
 8012c02:	2b00      	cmp	r3, #0
 8012c04:	d004      	beq.n	8012c10 <tcp_slowtmr+0x408>
 8012c06:	68fb      	ldr	r3, [r7, #12]
 8012c08:	f06f 010c 	mvn.w	r1, #12
 8012c0c:	68b8      	ldr	r0, [r7, #8]
 8012c0e:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 8012c10:	4b42      	ldr	r3, [pc, #264]	; (8012d1c <tcp_slowtmr+0x514>)
 8012c12:	781b      	ldrb	r3, [r3, #0]
 8012c14:	2b00      	cmp	r3, #0
 8012c16:	d035      	beq.n	8012c84 <tcp_slowtmr+0x47c>
        goto tcp_slowtmr_start;
 8012c18:	e606      	b.n	8012828 <tcp_slowtmr+0x20>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 8012c1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012c1c:	623b      	str	r3, [r7, #32]
      pcb = pcb->next;
 8012c1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012c20:	68db      	ldr	r3, [r3, #12]
 8012c22:	627b      	str	r3, [r7, #36]	; 0x24

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 8012c24:	6a3b      	ldr	r3, [r7, #32]
 8012c26:	7edb      	ldrb	r3, [r3, #27]
 8012c28:	3301      	adds	r3, #1
 8012c2a:	b2da      	uxtb	r2, r3
 8012c2c:	6a3b      	ldr	r3, [r7, #32]
 8012c2e:	76da      	strb	r2, [r3, #27]
      if (prev->polltmr >= prev->pollinterval) {
 8012c30:	6a3b      	ldr	r3, [r7, #32]
 8012c32:	7eda      	ldrb	r2, [r3, #27]
 8012c34:	6a3b      	ldr	r3, [r7, #32]
 8012c36:	7f1b      	ldrb	r3, [r3, #28]
 8012c38:	429a      	cmp	r2, r3
 8012c3a:	d323      	bcc.n	8012c84 <tcp_slowtmr+0x47c>
        prev->polltmr = 0;
 8012c3c:	6a3b      	ldr	r3, [r7, #32]
 8012c3e:	2200      	movs	r2, #0
 8012c40:	76da      	strb	r2, [r3, #27]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 8012c42:	4b36      	ldr	r3, [pc, #216]	; (8012d1c <tcp_slowtmr+0x514>)
 8012c44:	2200      	movs	r2, #0
 8012c46:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 8012c48:	6a3b      	ldr	r3, [r7, #32]
 8012c4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8012c4e:	2b00      	cmp	r3, #0
 8012c50:	d00a      	beq.n	8012c68 <tcp_slowtmr+0x460>
 8012c52:	6a3b      	ldr	r3, [r7, #32]
 8012c54:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8012c58:	6a3a      	ldr	r2, [r7, #32]
 8012c5a:	6912      	ldr	r2, [r2, #16]
 8012c5c:	6a39      	ldr	r1, [r7, #32]
 8012c5e:	4610      	mov	r0, r2
 8012c60:	4798      	blx	r3
 8012c62:	4603      	mov	r3, r0
 8012c64:	777b      	strb	r3, [r7, #29]
 8012c66:	e001      	b.n	8012c6c <tcp_slowtmr+0x464>
 8012c68:	2300      	movs	r3, #0
 8012c6a:	777b      	strb	r3, [r7, #29]
        if (tcp_active_pcbs_changed) {
 8012c6c:	4b2b      	ldr	r3, [pc, #172]	; (8012d1c <tcp_slowtmr+0x514>)
 8012c6e:	781b      	ldrb	r3, [r3, #0]
 8012c70:	2b00      	cmp	r3, #0
 8012c72:	d000      	beq.n	8012c76 <tcp_slowtmr+0x46e>
          goto tcp_slowtmr_start;
 8012c74:	e5d8      	b.n	8012828 <tcp_slowtmr+0x20>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 8012c76:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8012c7a:	2b00      	cmp	r3, #0
 8012c7c:	d102      	bne.n	8012c84 <tcp_slowtmr+0x47c>
          tcp_output(prev);
 8012c7e:	6a38      	ldr	r0, [r7, #32]
 8012c80:	f003 fdfa 	bl	8016878 <tcp_output>
  while (pcb != NULL) {
 8012c84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012c86:	2b00      	cmp	r3, #0
 8012c88:	f47f add4 	bne.w	8012834 <tcp_slowtmr+0x2c>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 8012c8c:	2300      	movs	r3, #0
 8012c8e:	623b      	str	r3, [r7, #32]
  pcb = tcp_tw_pcbs;
 8012c90:	4b23      	ldr	r3, [pc, #140]	; (8012d20 <tcp_slowtmr+0x518>)
 8012c92:	681b      	ldr	r3, [r3, #0]
 8012c94:	627b      	str	r3, [r7, #36]	; 0x24
  while (pcb != NULL) {
 8012c96:	e068      	b.n	8012d6a <tcp_slowtmr+0x562>
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8012c98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012c9a:	7d1b      	ldrb	r3, [r3, #20]
 8012c9c:	2b0a      	cmp	r3, #10
 8012c9e:	d006      	beq.n	8012cae <tcp_slowtmr+0x4a6>
 8012ca0:	4b1a      	ldr	r3, [pc, #104]	; (8012d0c <tcp_slowtmr+0x504>)
 8012ca2:	f240 42bd 	movw	r2, #1213	; 0x4bd
 8012ca6:	491f      	ldr	r1, [pc, #124]	; (8012d24 <tcp_slowtmr+0x51c>)
 8012ca8:	481a      	ldr	r0, [pc, #104]	; (8012d14 <tcp_slowtmr+0x50c>)
 8012caa:	f008 f8a1 	bl	801adf0 <iprintf>
    pcb_remove = 0;
 8012cae:	2300      	movs	r3, #0
 8012cb0:	77fb      	strb	r3, [r7, #31]

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8012cb2:	4b12      	ldr	r3, [pc, #72]	; (8012cfc <tcp_slowtmr+0x4f4>)
 8012cb4:	681a      	ldr	r2, [r3, #0]
 8012cb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012cb8:	6a1b      	ldr	r3, [r3, #32]
 8012cba:	1ad3      	subs	r3, r2, r3
 8012cbc:	2bf0      	cmp	r3, #240	; 0xf0
 8012cbe:	d902      	bls.n	8012cc6 <tcp_slowtmr+0x4be>
      ++pcb_remove;
 8012cc0:	7ffb      	ldrb	r3, [r7, #31]
 8012cc2:	3301      	adds	r3, #1
 8012cc4:	77fb      	strb	r3, [r7, #31]
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 8012cc6:	7ffb      	ldrb	r3, [r7, #31]
 8012cc8:	2b00      	cmp	r3, #0
 8012cca:	d049      	beq.n	8012d60 <tcp_slowtmr+0x558>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 8012ccc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8012cce:	f000 fb91 	bl	80133f4 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 8012cd2:	6a3b      	ldr	r3, [r7, #32]
 8012cd4:	2b00      	cmp	r3, #0
 8012cd6:	d029      	beq.n	8012d2c <tcp_slowtmr+0x524>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 8012cd8:	4b11      	ldr	r3, [pc, #68]	; (8012d20 <tcp_slowtmr+0x518>)
 8012cda:	681b      	ldr	r3, [r3, #0]
 8012cdc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012cde:	429a      	cmp	r2, r3
 8012ce0:	d106      	bne.n	8012cf0 <tcp_slowtmr+0x4e8>
 8012ce2:	4b0a      	ldr	r3, [pc, #40]	; (8012d0c <tcp_slowtmr+0x504>)
 8012ce4:	f240 42cb 	movw	r2, #1227	; 0x4cb
 8012ce8:	490f      	ldr	r1, [pc, #60]	; (8012d28 <tcp_slowtmr+0x520>)
 8012cea:	480a      	ldr	r0, [pc, #40]	; (8012d14 <tcp_slowtmr+0x50c>)
 8012cec:	f008 f880 	bl	801adf0 <iprintf>
        prev->next = pcb->next;
 8012cf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012cf2:	68da      	ldr	r2, [r3, #12]
 8012cf4:	6a3b      	ldr	r3, [r7, #32]
 8012cf6:	60da      	str	r2, [r3, #12]
 8012cf8:	e028      	b.n	8012d4c <tcp_slowtmr+0x544>
 8012cfa:	bf00      	nop
 8012cfc:	2000ab44 	.word	0x2000ab44
 8012d00:	000124f8 	.word	0x000124f8
 8012d04:	10624dd3 	.word	0x10624dd3
 8012d08:	2000ab40 	.word	0x2000ab40
 8012d0c:	0801d30c 	.word	0x0801d30c
 8012d10:	0801d544 	.word	0x0801d544
 8012d14:	0801d348 	.word	0x0801d348
 8012d18:	0801d570 	.word	0x0801d570
 8012d1c:	2000ab3c 	.word	0x2000ab3c
 8012d20:	2000ab50 	.word	0x2000ab50
 8012d24:	0801d59c 	.word	0x0801d59c
 8012d28:	0801d5cc 	.word	0x0801d5cc
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 8012d2c:	4b12      	ldr	r3, [pc, #72]	; (8012d78 <tcp_slowtmr+0x570>)
 8012d2e:	681b      	ldr	r3, [r3, #0]
 8012d30:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012d32:	429a      	cmp	r2, r3
 8012d34:	d006      	beq.n	8012d44 <tcp_slowtmr+0x53c>
 8012d36:	4b11      	ldr	r3, [pc, #68]	; (8012d7c <tcp_slowtmr+0x574>)
 8012d38:	f240 42cf 	movw	r2, #1231	; 0x4cf
 8012d3c:	4910      	ldr	r1, [pc, #64]	; (8012d80 <tcp_slowtmr+0x578>)
 8012d3e:	4811      	ldr	r0, [pc, #68]	; (8012d84 <tcp_slowtmr+0x57c>)
 8012d40:	f008 f856 	bl	801adf0 <iprintf>
        tcp_tw_pcbs = pcb->next;
 8012d44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012d46:	68db      	ldr	r3, [r3, #12]
 8012d48:	4a0b      	ldr	r2, [pc, #44]	; (8012d78 <tcp_slowtmr+0x570>)
 8012d4a:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 8012d4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012d4e:	61bb      	str	r3, [r7, #24]
      pcb = pcb->next;
 8012d50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012d52:	68db      	ldr	r3, [r3, #12]
 8012d54:	627b      	str	r3, [r7, #36]	; 0x24
      memp_free(MEMP_TCP_PCB, pcb2);
 8012d56:	69b9      	ldr	r1, [r7, #24]
 8012d58:	2001      	movs	r0, #1
 8012d5a:	f7fe f883 	bl	8010e64 <memp_free>
 8012d5e:	e004      	b.n	8012d6a <tcp_slowtmr+0x562>
    } else {
      prev = pcb;
 8012d60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012d62:	623b      	str	r3, [r7, #32]
      pcb = pcb->next;
 8012d64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012d66:	68db      	ldr	r3, [r3, #12]
 8012d68:	627b      	str	r3, [r7, #36]	; 0x24
  while (pcb != NULL) {
 8012d6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012d6c:	2b00      	cmp	r3, #0
 8012d6e:	d193      	bne.n	8012c98 <tcp_slowtmr+0x490>
    }
  }
}
 8012d70:	bf00      	nop
 8012d72:	3728      	adds	r7, #40	; 0x28
 8012d74:	46bd      	mov	sp, r7
 8012d76:	bdb0      	pop	{r4, r5, r7, pc}
 8012d78:	2000ab50 	.word	0x2000ab50
 8012d7c:	0801d30c 	.word	0x0801d30c
 8012d80:	0801d5f4 	.word	0x0801d5f4
 8012d84:	0801d348 	.word	0x0801d348

08012d88 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 8012d88:	b580      	push	{r7, lr}
 8012d8a:	b082      	sub	sp, #8
 8012d8c:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 8012d8e:	4b2d      	ldr	r3, [pc, #180]	; (8012e44 <tcp_fasttmr+0xbc>)
 8012d90:	781b      	ldrb	r3, [r3, #0]
 8012d92:	3301      	adds	r3, #1
 8012d94:	b2da      	uxtb	r2, r3
 8012d96:	4b2b      	ldr	r3, [pc, #172]	; (8012e44 <tcp_fasttmr+0xbc>)
 8012d98:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 8012d9a:	4b2b      	ldr	r3, [pc, #172]	; (8012e48 <tcp_fasttmr+0xc0>)
 8012d9c:	681b      	ldr	r3, [r3, #0]
 8012d9e:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8012da0:	e048      	b.n	8012e34 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 8012da2:	687b      	ldr	r3, [r7, #4]
 8012da4:	7f5a      	ldrb	r2, [r3, #29]
 8012da6:	4b27      	ldr	r3, [pc, #156]	; (8012e44 <tcp_fasttmr+0xbc>)
 8012da8:	781b      	ldrb	r3, [r3, #0]
 8012daa:	429a      	cmp	r2, r3
 8012dac:	d03f      	beq.n	8012e2e <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 8012dae:	4b25      	ldr	r3, [pc, #148]	; (8012e44 <tcp_fasttmr+0xbc>)
 8012db0:	781a      	ldrb	r2, [r3, #0]
 8012db2:	687b      	ldr	r3, [r7, #4]
 8012db4:	775a      	strb	r2, [r3, #29]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 8012db6:	687b      	ldr	r3, [r7, #4]
 8012db8:	7e9b      	ldrb	r3, [r3, #26]
 8012dba:	f003 0301 	and.w	r3, r3, #1
 8012dbe:	2b00      	cmp	r3, #0
 8012dc0:	d010      	beq.n	8012de4 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 8012dc2:	687b      	ldr	r3, [r7, #4]
 8012dc4:	7e9b      	ldrb	r3, [r3, #26]
 8012dc6:	f043 0302 	orr.w	r3, r3, #2
 8012dca:	b2da      	uxtb	r2, r3
 8012dcc:	687b      	ldr	r3, [r7, #4]
 8012dce:	769a      	strb	r2, [r3, #26]
        tcp_output(pcb);
 8012dd0:	6878      	ldr	r0, [r7, #4]
 8012dd2:	f003 fd51 	bl	8016878 <tcp_output>
        pcb->flags &= ~(TF_ACK_DELAY | TF_ACK_NOW);
 8012dd6:	687b      	ldr	r3, [r7, #4]
 8012dd8:	7e9b      	ldrb	r3, [r3, #26]
 8012dda:	f023 0303 	bic.w	r3, r3, #3
 8012dde:	b2da      	uxtb	r2, r3
 8012de0:	687b      	ldr	r3, [r7, #4]
 8012de2:	769a      	strb	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 8012de4:	687b      	ldr	r3, [r7, #4]
 8012de6:	7e9b      	ldrb	r3, [r3, #26]
 8012de8:	f003 0308 	and.w	r3, r3, #8
 8012dec:	2b00      	cmp	r3, #0
 8012dee:	d009      	beq.n	8012e04 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        pcb->flags &= ~(TF_CLOSEPEND);
 8012df0:	687b      	ldr	r3, [r7, #4]
 8012df2:	7e9b      	ldrb	r3, [r3, #26]
 8012df4:	f023 0308 	bic.w	r3, r3, #8
 8012df8:	b2da      	uxtb	r2, r3
 8012dfa:	687b      	ldr	r3, [r7, #4]
 8012dfc:	769a      	strb	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 8012dfe:	6878      	ldr	r0, [r7, #4]
 8012e00:	f7ff f958 	bl	80120b4 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 8012e04:	687b      	ldr	r3, [r7, #4]
 8012e06:	68db      	ldr	r3, [r3, #12]
 8012e08:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 8012e0a:	687b      	ldr	r3, [r7, #4]
 8012e0c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012e0e:	2b00      	cmp	r3, #0
 8012e10:	d00a      	beq.n	8012e28 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 8012e12:	4b0e      	ldr	r3, [pc, #56]	; (8012e4c <tcp_fasttmr+0xc4>)
 8012e14:	2200      	movs	r2, #0
 8012e16:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 8012e18:	6878      	ldr	r0, [r7, #4]
 8012e1a:	f000 f819 	bl	8012e50 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 8012e1e:	4b0b      	ldr	r3, [pc, #44]	; (8012e4c <tcp_fasttmr+0xc4>)
 8012e20:	781b      	ldrb	r3, [r3, #0]
 8012e22:	2b00      	cmp	r3, #0
 8012e24:	d000      	beq.n	8012e28 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 8012e26:	e7b8      	b.n	8012d9a <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 8012e28:	683b      	ldr	r3, [r7, #0]
 8012e2a:	607b      	str	r3, [r7, #4]
 8012e2c:	e002      	b.n	8012e34 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 8012e2e:	687b      	ldr	r3, [r7, #4]
 8012e30:	68db      	ldr	r3, [r3, #12]
 8012e32:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8012e34:	687b      	ldr	r3, [r7, #4]
 8012e36:	2b00      	cmp	r3, #0
 8012e38:	d1b3      	bne.n	8012da2 <tcp_fasttmr+0x1a>
    }
  }
}
 8012e3a:	bf00      	nop
 8012e3c:	3708      	adds	r7, #8
 8012e3e:	46bd      	mov	sp, r7
 8012e40:	bd80      	pop	{r7, pc}
 8012e42:	bf00      	nop
 8012e44:	20004206 	.word	0x20004206
 8012e48:	2000ab40 	.word	0x2000ab40
 8012e4c:	2000ab3c 	.word	0x2000ab3c

08012e50 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 8012e50:	b590      	push	{r4, r7, lr}
 8012e52:	b085      	sub	sp, #20
 8012e54:	af00      	add	r7, sp, #0
 8012e56:	6078      	str	r0, [r7, #4]
  struct pbuf *rest;
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 8012e58:	687b      	ldr	r3, [r7, #4]
 8012e5a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012e5c:	7b5b      	ldrb	r3, [r3, #13]
 8012e5e:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 8012e60:	687b      	ldr	r3, [r7, #4]
 8012e62:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012e64:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 8012e66:	687b      	ldr	r3, [r7, #4]
 8012e68:	2200      	movs	r2, #0
 8012e6a:	675a      	str	r2, [r3, #116]	; 0x74
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 8012e6c:	687b      	ldr	r3, [r7, #4]
 8012e6e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8012e72:	2b00      	cmp	r3, #0
 8012e74:	d00b      	beq.n	8012e8e <tcp_process_refused_data+0x3e>
 8012e76:	687b      	ldr	r3, [r7, #4]
 8012e78:	f8d3 4080 	ldr.w	r4, [r3, #128]	; 0x80
 8012e7c:	687b      	ldr	r3, [r7, #4]
 8012e7e:	6918      	ldr	r0, [r3, #16]
 8012e80:	2300      	movs	r3, #0
 8012e82:	68ba      	ldr	r2, [r7, #8]
 8012e84:	6879      	ldr	r1, [r7, #4]
 8012e86:	47a0      	blx	r4
 8012e88:	4603      	mov	r3, r0
 8012e8a:	73fb      	strb	r3, [r7, #15]
 8012e8c:	e007      	b.n	8012e9e <tcp_process_refused_data+0x4e>
 8012e8e:	2300      	movs	r3, #0
 8012e90:	68ba      	ldr	r2, [r7, #8]
 8012e92:	6879      	ldr	r1, [r7, #4]
 8012e94:	2000      	movs	r0, #0
 8012e96:	f000 f88c 	bl	8012fb2 <tcp_recv_null>
 8012e9a:	4603      	mov	r3, r0
 8012e9c:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 8012e9e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8012ea2:	2b00      	cmp	r3, #0
 8012ea4:	d12a      	bne.n	8012efc <tcp_process_refused_data+0xac>
      /* did refused_data include a FIN? */
      if (refused_flags & PBUF_FLAG_TCP_FIN
 8012ea6:	7bbb      	ldrb	r3, [r7, #14]
 8012ea8:	f003 0320 	and.w	r3, r3, #32
 8012eac:	2b00      	cmp	r3, #0
 8012eae:	d033      	beq.n	8012f18 <tcp_process_refused_data+0xc8>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8012eb0:	687b      	ldr	r3, [r7, #4]
 8012eb2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8012eb4:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8012eb8:	d005      	beq.n	8012ec6 <tcp_process_refused_data+0x76>
          pcb->rcv_wnd++;
 8012eba:	687b      	ldr	r3, [r7, #4]
 8012ebc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8012ebe:	3301      	adds	r3, #1
 8012ec0:	b29a      	uxth	r2, r3
 8012ec2:	687b      	ldr	r3, [r7, #4]
 8012ec4:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 8012ec6:	687b      	ldr	r3, [r7, #4]
 8012ec8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8012ecc:	2b00      	cmp	r3, #0
 8012ece:	d00b      	beq.n	8012ee8 <tcp_process_refused_data+0x98>
 8012ed0:	687b      	ldr	r3, [r7, #4]
 8012ed2:	f8d3 4080 	ldr.w	r4, [r3, #128]	; 0x80
 8012ed6:	687b      	ldr	r3, [r7, #4]
 8012ed8:	6918      	ldr	r0, [r3, #16]
 8012eda:	2300      	movs	r3, #0
 8012edc:	2200      	movs	r2, #0
 8012ede:	6879      	ldr	r1, [r7, #4]
 8012ee0:	47a0      	blx	r4
 8012ee2:	4603      	mov	r3, r0
 8012ee4:	73fb      	strb	r3, [r7, #15]
 8012ee6:	e001      	b.n	8012eec <tcp_process_refused_data+0x9c>
 8012ee8:	2300      	movs	r3, #0
 8012eea:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 8012eec:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8012ef0:	f113 0f0d 	cmn.w	r3, #13
 8012ef4:	d110      	bne.n	8012f18 <tcp_process_refused_data+0xc8>
          return ERR_ABRT;
 8012ef6:	f06f 030c 	mvn.w	r3, #12
 8012efa:	e00e      	b.n	8012f1a <tcp_process_refused_data+0xca>
        }
      }
    } else if (err == ERR_ABRT) {
 8012efc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8012f00:	f113 0f0d 	cmn.w	r3, #13
 8012f04:	d102      	bne.n	8012f0c <tcp_process_refused_data+0xbc>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 8012f06:	f06f 030c 	mvn.w	r3, #12
 8012f0a:	e006      	b.n	8012f1a <tcp_process_refused_data+0xca>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 8012f0c:	687b      	ldr	r3, [r7, #4]
 8012f0e:	68ba      	ldr	r2, [r7, #8]
 8012f10:	675a      	str	r2, [r3, #116]	; 0x74
      return ERR_INPROGRESS;
 8012f12:	f06f 0304 	mvn.w	r3, #4
 8012f16:	e000      	b.n	8012f1a <tcp_process_refused_data+0xca>
    }
  }
  return ERR_OK;
 8012f18:	2300      	movs	r3, #0
}
 8012f1a:	4618      	mov	r0, r3
 8012f1c:	3714      	adds	r7, #20
 8012f1e:	46bd      	mov	sp, r7
 8012f20:	bd90      	pop	{r4, r7, pc}

08012f22 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 8012f22:	b580      	push	{r7, lr}
 8012f24:	b084      	sub	sp, #16
 8012f26:	af00      	add	r7, sp, #0
 8012f28:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 8012f2a:	e007      	b.n	8012f3c <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 8012f2c:	687b      	ldr	r3, [r7, #4]
 8012f2e:	681b      	ldr	r3, [r3, #0]
 8012f30:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 8012f32:	6878      	ldr	r0, [r7, #4]
 8012f34:	f000 f809 	bl	8012f4a <tcp_seg_free>
    seg = next;
 8012f38:	68fb      	ldr	r3, [r7, #12]
 8012f3a:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 8012f3c:	687b      	ldr	r3, [r7, #4]
 8012f3e:	2b00      	cmp	r3, #0
 8012f40:	d1f4      	bne.n	8012f2c <tcp_segs_free+0xa>
  }
}
 8012f42:	bf00      	nop
 8012f44:	3710      	adds	r7, #16
 8012f46:	46bd      	mov	sp, r7
 8012f48:	bd80      	pop	{r7, pc}

08012f4a <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 8012f4a:	b580      	push	{r7, lr}
 8012f4c:	b082      	sub	sp, #8
 8012f4e:	af00      	add	r7, sp, #0
 8012f50:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 8012f52:	687b      	ldr	r3, [r7, #4]
 8012f54:	2b00      	cmp	r3, #0
 8012f56:	d00c      	beq.n	8012f72 <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 8012f58:	687b      	ldr	r3, [r7, #4]
 8012f5a:	685b      	ldr	r3, [r3, #4]
 8012f5c:	2b00      	cmp	r3, #0
 8012f5e:	d004      	beq.n	8012f6a <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 8012f60:	687b      	ldr	r3, [r7, #4]
 8012f62:	685b      	ldr	r3, [r3, #4]
 8012f64:	4618      	mov	r0, r3
 8012f66:	f7fe fcd7 	bl	8011918 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 8012f6a:	6879      	ldr	r1, [r7, #4]
 8012f6c:	2003      	movs	r0, #3
 8012f6e:	f7fd ff79 	bl	8010e64 <memp_free>
  }
}
 8012f72:	bf00      	nop
 8012f74:	3708      	adds	r7, #8
 8012f76:	46bd      	mov	sp, r7
 8012f78:	bd80      	pop	{r7, pc}

08012f7a <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 8012f7a:	b580      	push	{r7, lr}
 8012f7c:	b084      	sub	sp, #16
 8012f7e:	af00      	add	r7, sp, #0
 8012f80:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 8012f82:	2003      	movs	r0, #3
 8012f84:	f7fd ff1c 	bl	8010dc0 <memp_malloc>
 8012f88:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 8012f8a:	68fb      	ldr	r3, [r7, #12]
 8012f8c:	2b00      	cmp	r3, #0
 8012f8e:	d101      	bne.n	8012f94 <tcp_seg_copy+0x1a>
    return NULL;
 8012f90:	2300      	movs	r3, #0
 8012f92:	e00a      	b.n	8012faa <tcp_seg_copy+0x30>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 8012f94:	2210      	movs	r2, #16
 8012f96:	6879      	ldr	r1, [r7, #4]
 8012f98:	68f8      	ldr	r0, [r7, #12]
 8012f9a:	f007 fe6e 	bl	801ac7a <memcpy>
  pbuf_ref(cseg->p);
 8012f9e:	68fb      	ldr	r3, [r7, #12]
 8012fa0:	685b      	ldr	r3, [r3, #4]
 8012fa2:	4618      	mov	r0, r3
 8012fa4:	f7fe fd6a 	bl	8011a7c <pbuf_ref>
  return cseg;
 8012fa8:	68fb      	ldr	r3, [r7, #12]
}
 8012faa:	4618      	mov	r0, r3
 8012fac:	3710      	adds	r7, #16
 8012fae:	46bd      	mov	sp, r7
 8012fb0:	bd80      	pop	{r7, pc}

08012fb2 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 8012fb2:	b580      	push	{r7, lr}
 8012fb4:	b084      	sub	sp, #16
 8012fb6:	af00      	add	r7, sp, #0
 8012fb8:	60f8      	str	r0, [r7, #12]
 8012fba:	60b9      	str	r1, [r7, #8]
 8012fbc:	607a      	str	r2, [r7, #4]
 8012fbe:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);
  if (p != NULL) {
 8012fc0:	687b      	ldr	r3, [r7, #4]
 8012fc2:	2b00      	cmp	r3, #0
 8012fc4:	d009      	beq.n	8012fda <tcp_recv_null+0x28>
    tcp_recved(pcb, p->tot_len);
 8012fc6:	687b      	ldr	r3, [r7, #4]
 8012fc8:	891b      	ldrh	r3, [r3, #8]
 8012fca:	4619      	mov	r1, r3
 8012fcc:	68b8      	ldr	r0, [r7, #8]
 8012fce:	f7ff fb7d 	bl	80126cc <tcp_recved>
    pbuf_free(p);
 8012fd2:	6878      	ldr	r0, [r7, #4]
 8012fd4:	f7fe fca0 	bl	8011918 <pbuf_free>
 8012fd8:	e008      	b.n	8012fec <tcp_recv_null+0x3a>
  } else if (err == ERR_OK) {
 8012fda:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8012fde:	2b00      	cmp	r3, #0
 8012fe0:	d104      	bne.n	8012fec <tcp_recv_null+0x3a>
    return tcp_close(pcb);
 8012fe2:	68b8      	ldr	r0, [r7, #8]
 8012fe4:	f7ff f8cc 	bl	8012180 <tcp_close>
 8012fe8:	4603      	mov	r3, r0
 8012fea:	e000      	b.n	8012fee <tcp_recv_null+0x3c>
  }
  return ERR_OK;
 8012fec:	2300      	movs	r3, #0
}
 8012fee:	4618      	mov	r0, r3
 8012ff0:	3710      	adds	r7, #16
 8012ff2:	46bd      	mov	sp, r7
 8012ff4:	bd80      	pop	{r7, pc}
	...

08012ff8 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 8012ff8:	b580      	push	{r7, lr}
 8012ffa:	b086      	sub	sp, #24
 8012ffc:	af00      	add	r7, sp, #0
 8012ffe:	4603      	mov	r3, r0
 8013000:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 8013002:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8013006:	2b00      	cmp	r3, #0
 8013008:	db01      	blt.n	801300e <tcp_kill_prio+0x16>
 801300a:	79fb      	ldrb	r3, [r7, #7]
 801300c:	e000      	b.n	8013010 <tcp_kill_prio+0x18>
 801300e:	237f      	movs	r3, #127	; 0x7f
 8013010:	72fb      	strb	r3, [r7, #11]

  /* We kill the oldest active connection that has lower priority than prio. */
  inactivity = 0;
 8013012:	2300      	movs	r3, #0
 8013014:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8013016:	2300      	movs	r3, #0
 8013018:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 801301a:	4b16      	ldr	r3, [pc, #88]	; (8013074 <tcp_kill_prio+0x7c>)
 801301c:	681b      	ldr	r3, [r3, #0]
 801301e:	617b      	str	r3, [r7, #20]
 8013020:	e01a      	b.n	8013058 <tcp_kill_prio+0x60>
    if (pcb->prio <= mprio &&
 8013022:	697b      	ldr	r3, [r7, #20]
 8013024:	7d5b      	ldrb	r3, [r3, #21]
 8013026:	7afa      	ldrb	r2, [r7, #11]
 8013028:	429a      	cmp	r2, r3
 801302a:	d312      	bcc.n	8013052 <tcp_kill_prio+0x5a>
       (u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 801302c:	4b12      	ldr	r3, [pc, #72]	; (8013078 <tcp_kill_prio+0x80>)
 801302e:	681a      	ldr	r2, [r3, #0]
 8013030:	697b      	ldr	r3, [r7, #20]
 8013032:	6a1b      	ldr	r3, [r3, #32]
 8013034:	1ad3      	subs	r3, r2, r3
    if (pcb->prio <= mprio &&
 8013036:	68fa      	ldr	r2, [r7, #12]
 8013038:	429a      	cmp	r2, r3
 801303a:	d80a      	bhi.n	8013052 <tcp_kill_prio+0x5a>
      inactivity = tcp_ticks - pcb->tmr;
 801303c:	4b0e      	ldr	r3, [pc, #56]	; (8013078 <tcp_kill_prio+0x80>)
 801303e:	681a      	ldr	r2, [r3, #0]
 8013040:	697b      	ldr	r3, [r7, #20]
 8013042:	6a1b      	ldr	r3, [r3, #32]
 8013044:	1ad3      	subs	r3, r2, r3
 8013046:	60fb      	str	r3, [r7, #12]
      inactive = pcb;
 8013048:	697b      	ldr	r3, [r7, #20]
 801304a:	613b      	str	r3, [r7, #16]
      mprio = pcb->prio;
 801304c:	697b      	ldr	r3, [r7, #20]
 801304e:	7d5b      	ldrb	r3, [r3, #21]
 8013050:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8013052:	697b      	ldr	r3, [r7, #20]
 8013054:	68db      	ldr	r3, [r3, #12]
 8013056:	617b      	str	r3, [r7, #20]
 8013058:	697b      	ldr	r3, [r7, #20]
 801305a:	2b00      	cmp	r3, #0
 801305c:	d1e1      	bne.n	8013022 <tcp_kill_prio+0x2a>
    }
  }
  if (inactive != NULL) {
 801305e:	693b      	ldr	r3, [r7, #16]
 8013060:	2b00      	cmp	r3, #0
 8013062:	d002      	beq.n	801306a <tcp_kill_prio+0x72>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
           (void *)inactive, inactivity));
    tcp_abort(inactive);
 8013064:	6938      	ldr	r0, [r7, #16]
 8013066:	f7ff f99d 	bl	80123a4 <tcp_abort>
  }
}
 801306a:	bf00      	nop
 801306c:	3718      	adds	r7, #24
 801306e:	46bd      	mov	sp, r7
 8013070:	bd80      	pop	{r7, pc}
 8013072:	bf00      	nop
 8013074:	2000ab40 	.word	0x2000ab40
 8013078:	2000ab44 	.word	0x2000ab44

0801307c <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 801307c:	b580      	push	{r7, lr}
 801307e:	b086      	sub	sp, #24
 8013080:	af00      	add	r7, sp, #0
 8013082:	4603      	mov	r3, r0
 8013084:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 8013086:	79fb      	ldrb	r3, [r7, #7]
 8013088:	2b08      	cmp	r3, #8
 801308a:	d009      	beq.n	80130a0 <tcp_kill_state+0x24>
 801308c:	79fb      	ldrb	r3, [r7, #7]
 801308e:	2b09      	cmp	r3, #9
 8013090:	d006      	beq.n	80130a0 <tcp_kill_state+0x24>
 8013092:	4b1a      	ldr	r3, [pc, #104]	; (80130fc <tcp_kill_state+0x80>)
 8013094:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8013098:	4919      	ldr	r1, [pc, #100]	; (8013100 <tcp_kill_state+0x84>)
 801309a:	481a      	ldr	r0, [pc, #104]	; (8013104 <tcp_kill_state+0x88>)
 801309c:	f007 fea8 	bl	801adf0 <iprintf>

  inactivity = 0;
 80130a0:	2300      	movs	r3, #0
 80130a2:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 80130a4:	2300      	movs	r3, #0
 80130a6:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80130a8:	4b17      	ldr	r3, [pc, #92]	; (8013108 <tcp_kill_state+0x8c>)
 80130aa:	681b      	ldr	r3, [r3, #0]
 80130ac:	617b      	str	r3, [r7, #20]
 80130ae:	e017      	b.n	80130e0 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 80130b0:	697b      	ldr	r3, [r7, #20]
 80130b2:	7d1b      	ldrb	r3, [r3, #20]
 80130b4:	79fa      	ldrb	r2, [r7, #7]
 80130b6:	429a      	cmp	r2, r3
 80130b8:	d10f      	bne.n	80130da <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 80130ba:	4b14      	ldr	r3, [pc, #80]	; (801310c <tcp_kill_state+0x90>)
 80130bc:	681a      	ldr	r2, [r3, #0]
 80130be:	697b      	ldr	r3, [r7, #20]
 80130c0:	6a1b      	ldr	r3, [r3, #32]
 80130c2:	1ad3      	subs	r3, r2, r3
 80130c4:	68fa      	ldr	r2, [r7, #12]
 80130c6:	429a      	cmp	r2, r3
 80130c8:	d807      	bhi.n	80130da <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 80130ca:	4b10      	ldr	r3, [pc, #64]	; (801310c <tcp_kill_state+0x90>)
 80130cc:	681a      	ldr	r2, [r3, #0]
 80130ce:	697b      	ldr	r3, [r7, #20]
 80130d0:	6a1b      	ldr	r3, [r3, #32]
 80130d2:	1ad3      	subs	r3, r2, r3
 80130d4:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 80130d6:	697b      	ldr	r3, [r7, #20]
 80130d8:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80130da:	697b      	ldr	r3, [r7, #20]
 80130dc:	68db      	ldr	r3, [r3, #12]
 80130de:	617b      	str	r3, [r7, #20]
 80130e0:	697b      	ldr	r3, [r7, #20]
 80130e2:	2b00      	cmp	r3, #0
 80130e4:	d1e4      	bne.n	80130b0 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 80130e6:	693b      	ldr	r3, [r7, #16]
 80130e8:	2b00      	cmp	r3, #0
 80130ea:	d003      	beq.n	80130f4 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
           tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 80130ec:	2100      	movs	r1, #0
 80130ee:	6938      	ldr	r0, [r7, #16]
 80130f0:	f7ff f8a6 	bl	8012240 <tcp_abandon>
  }
}
 80130f4:	bf00      	nop
 80130f6:	3718      	adds	r7, #24
 80130f8:	46bd      	mov	sp, r7
 80130fa:	bd80      	pop	{r7, pc}
 80130fc:	0801d30c 	.word	0x0801d30c
 8013100:	0801d61c 	.word	0x0801d61c
 8013104:	0801d348 	.word	0x0801d348
 8013108:	2000ab40 	.word	0x2000ab40
 801310c:	2000ab44 	.word	0x2000ab44

08013110 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 8013110:	b580      	push	{r7, lr}
 8013112:	b084      	sub	sp, #16
 8013114:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 8013116:	2300      	movs	r3, #0
 8013118:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 801311a:	2300      	movs	r3, #0
 801311c:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 801311e:	4b12      	ldr	r3, [pc, #72]	; (8013168 <tcp_kill_timewait+0x58>)
 8013120:	681b      	ldr	r3, [r3, #0]
 8013122:	60fb      	str	r3, [r7, #12]
 8013124:	e012      	b.n	801314c <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8013126:	4b11      	ldr	r3, [pc, #68]	; (801316c <tcp_kill_timewait+0x5c>)
 8013128:	681a      	ldr	r2, [r3, #0]
 801312a:	68fb      	ldr	r3, [r7, #12]
 801312c:	6a1b      	ldr	r3, [r3, #32]
 801312e:	1ad3      	subs	r3, r2, r3
 8013130:	687a      	ldr	r2, [r7, #4]
 8013132:	429a      	cmp	r2, r3
 8013134:	d807      	bhi.n	8013146 <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 8013136:	4b0d      	ldr	r3, [pc, #52]	; (801316c <tcp_kill_timewait+0x5c>)
 8013138:	681a      	ldr	r2, [r3, #0]
 801313a:	68fb      	ldr	r3, [r7, #12]
 801313c:	6a1b      	ldr	r3, [r3, #32]
 801313e:	1ad3      	subs	r3, r2, r3
 8013140:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 8013142:	68fb      	ldr	r3, [r7, #12]
 8013144:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8013146:	68fb      	ldr	r3, [r7, #12]
 8013148:	68db      	ldr	r3, [r3, #12]
 801314a:	60fb      	str	r3, [r7, #12]
 801314c:	68fb      	ldr	r3, [r7, #12]
 801314e:	2b00      	cmp	r3, #0
 8013150:	d1e9      	bne.n	8013126 <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 8013152:	68bb      	ldr	r3, [r7, #8]
 8013154:	2b00      	cmp	r3, #0
 8013156:	d002      	beq.n	801315e <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
           (void *)inactive, inactivity));
    tcp_abort(inactive);
 8013158:	68b8      	ldr	r0, [r7, #8]
 801315a:	f7ff f923 	bl	80123a4 <tcp_abort>
  }
}
 801315e:	bf00      	nop
 8013160:	3710      	adds	r7, #16
 8013162:	46bd      	mov	sp, r7
 8013164:	bd80      	pop	{r7, pc}
 8013166:	bf00      	nop
 8013168:	2000ab50 	.word	0x2000ab50
 801316c:	2000ab44 	.word	0x2000ab44

08013170 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 8013170:	b580      	push	{r7, lr}
 8013172:	b084      	sub	sp, #16
 8013174:	af00      	add	r7, sp, #0
 8013176:	4603      	mov	r3, r0
 8013178:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 801317a:	2001      	movs	r0, #1
 801317c:	f7fd fe20 	bl	8010dc0 <memp_malloc>
 8013180:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 8013182:	68fb      	ldr	r3, [r7, #12]
 8013184:	2b00      	cmp	r3, #0
 8013186:	d124      	bne.n	80131d2 <tcp_alloc+0x62>
    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 8013188:	f7ff ffc2 	bl	8013110 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 801318c:	2001      	movs	r0, #1
 801318e:	f7fd fe17 	bl	8010dc0 <memp_malloc>
 8013192:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 8013194:	68fb      	ldr	r3, [r7, #12]
 8013196:	2b00      	cmp	r3, #0
 8013198:	d11b      	bne.n	80131d2 <tcp_alloc+0x62>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 801319a:	2009      	movs	r0, #9
 801319c:	f7ff ff6e 	bl	801307c <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80131a0:	2001      	movs	r0, #1
 80131a2:	f7fd fe0d 	bl	8010dc0 <memp_malloc>
 80131a6:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 80131a8:	68fb      	ldr	r3, [r7, #12]
 80131aa:	2b00      	cmp	r3, #0
 80131ac:	d111      	bne.n	80131d2 <tcp_alloc+0x62>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 80131ae:	2008      	movs	r0, #8
 80131b0:	f7ff ff64 	bl	801307c <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80131b4:	2001      	movs	r0, #1
 80131b6:	f7fd fe03 	bl	8010dc0 <memp_malloc>
 80131ba:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 80131bc:	68fb      	ldr	r3, [r7, #12]
 80131be:	2b00      	cmp	r3, #0
 80131c0:	d107      	bne.n	80131d2 <tcp_alloc+0x62>
          /* Try killing active connections with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 80131c2:	79fb      	ldrb	r3, [r7, #7]
 80131c4:	4618      	mov	r0, r3
 80131c6:	f7ff ff17 	bl	8012ff8 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80131ca:	2001      	movs	r0, #1
 80131cc:	f7fd fdf8 	bl	8010dc0 <memp_malloc>
 80131d0:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 80131d2:	68fb      	ldr	r3, [r7, #12]
 80131d4:	2b00      	cmp	r3, #0
 80131d6:	d03f      	beq.n	8013258 <tcp_alloc+0xe8>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 80131d8:	2298      	movs	r2, #152	; 0x98
 80131da:	2100      	movs	r1, #0
 80131dc:	68f8      	ldr	r0, [r7, #12]
 80131de:	f007 fd57 	bl	801ac90 <memset>
    pcb->prio = prio;
 80131e2:	68fb      	ldr	r3, [r7, #12]
 80131e4:	79fa      	ldrb	r2, [r7, #7]
 80131e6:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 80131e8:	68fb      	ldr	r3, [r7, #12]
 80131ea:	f44f 6286 	mov.w	r2, #1072	; 0x430
 80131ee:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 80131f2:	68fb      	ldr	r3, [r7, #12]
 80131f4:	f44f 6206 	mov.w	r2, #2144	; 0x860
 80131f8:	855a      	strh	r2, [r3, #42]	; 0x2a
 80131fa:	68fb      	ldr	r3, [r7, #12]
 80131fc:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 80131fe:	68fb      	ldr	r3, [r7, #12]
 8013200:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 8013202:	68fb      	ldr	r3, [r7, #12]
 8013204:	22ff      	movs	r2, #255	; 0xff
 8013206:	729a      	strb	r2, [r3, #10]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 8013208:	68fb      	ldr	r3, [r7, #12]
 801320a:	f44f 7206 	mov.w	r2, #536	; 0x218
 801320e:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 8013210:	68fb      	ldr	r3, [r7, #12]
 8013212:	2206      	movs	r2, #6
 8013214:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 8013218:	68fb      	ldr	r3, [r7, #12]
 801321a:	2206      	movs	r2, #6
 801321c:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 801321e:	68fb      	ldr	r3, [r7, #12]
 8013220:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8013224:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 8013226:	68fb      	ldr	r3, [r7, #12]
 8013228:	2201      	movs	r2, #1
 801322a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 801322e:	4b0d      	ldr	r3, [pc, #52]	; (8013264 <tcp_alloc+0xf4>)
 8013230:	681a      	ldr	r2, [r3, #0]
 8013232:	68fb      	ldr	r3, [r7, #12]
 8013234:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 8013236:	4b0c      	ldr	r3, [pc, #48]	; (8013268 <tcp_alloc+0xf8>)
 8013238:	781a      	ldrb	r2, [r3, #0]
 801323a:	68fb      	ldr	r3, [r7, #12]
 801323c:	775a      	strb	r2, [r3, #29]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 801323e:	68fb      	ldr	r3, [r7, #12]
 8013240:	f44f 6286 	mov.w	r2, #1072	; 0x430
 8013244:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 8013248:	68fb      	ldr	r3, [r7, #12]
 801324a:	4a08      	ldr	r2, [pc, #32]	; (801326c <tcp_alloc+0xfc>)
 801324c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 8013250:	68fb      	ldr	r3, [r7, #12]
 8013252:	4a07      	ldr	r2, [pc, #28]	; (8013270 <tcp_alloc+0x100>)
 8013254:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 8013258:	68fb      	ldr	r3, [r7, #12]
}
 801325a:	4618      	mov	r0, r3
 801325c:	3710      	adds	r7, #16
 801325e:	46bd      	mov	sp, r7
 8013260:	bd80      	pop	{r7, pc}
 8013262:	bf00      	nop
 8013264:	2000ab44 	.word	0x2000ab44
 8013268:	20004206 	.word	0x20004206
 801326c:	08012fb3 	.word	0x08012fb3
 8013270:	006ddd00 	.word	0x006ddd00

08013274 <tcp_new_ip_type>:
 * supply @ref IPADDR_TYPE_ANY as argument and bind to @ref IP_ANY_TYPE.
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_new_ip_type(u8_t type)
{
 8013274:	b580      	push	{r7, lr}
 8013276:	b084      	sub	sp, #16
 8013278:	af00      	add	r7, sp, #0
 801327a:	4603      	mov	r3, r0
 801327c:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb * pcb;
  pcb = tcp_alloc(TCP_PRIO_NORMAL);
 801327e:	2040      	movs	r0, #64	; 0x40
 8013280:	f7ff ff76 	bl	8013170 <tcp_alloc>
 8013284:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 8013286:	68fb      	ldr	r3, [r7, #12]
}
 8013288:	4618      	mov	r0, r3
 801328a:	3710      	adds	r7, #16
 801328c:	46bd      	mov	sp, r7
 801328e:	bd80      	pop	{r7, pc}

08013290 <tcp_arg>:
 * @param pcb tcp_pcb to set the callback argument
 * @param arg void pointer argument to pass to callback functions
 */
void
tcp_arg(struct tcp_pcb *pcb, void *arg)
{
 8013290:	b480      	push	{r7}
 8013292:	b083      	sub	sp, #12
 8013294:	af00      	add	r7, sp, #0
 8013296:	6078      	str	r0, [r7, #4]
 8013298:	6039      	str	r1, [r7, #0]
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  if (pcb != NULL) {
 801329a:	687b      	ldr	r3, [r7, #4]
 801329c:	2b00      	cmp	r3, #0
 801329e:	d002      	beq.n	80132a6 <tcp_arg+0x16>
    pcb->callback_arg = arg;
 80132a0:	687b      	ldr	r3, [r7, #4]
 80132a2:	683a      	ldr	r2, [r7, #0]
 80132a4:	611a      	str	r2, [r3, #16]
  }
}
 80132a6:	bf00      	nop
 80132a8:	370c      	adds	r7, #12
 80132aa:	46bd      	mov	sp, r7
 80132ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80132b0:	4770      	bx	lr
	...

080132b4 <tcp_recv>:
 * @param pcb tcp_pcb to set the recv callback
 * @param recv callback function to call for this pcb when data is received
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
 80132b4:	b580      	push	{r7, lr}
 80132b6:	b082      	sub	sp, #8
 80132b8:	af00      	add	r7, sp, #0
 80132ba:	6078      	str	r0, [r7, #4]
 80132bc:	6039      	str	r1, [r7, #0]
  if (pcb != NULL) {
 80132be:	687b      	ldr	r3, [r7, #4]
 80132c0:	2b00      	cmp	r3, #0
 80132c2:	d00e      	beq.n	80132e2 <tcp_recv+0x2e>
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 80132c4:	687b      	ldr	r3, [r7, #4]
 80132c6:	7d1b      	ldrb	r3, [r3, #20]
 80132c8:	2b01      	cmp	r3, #1
 80132ca:	d106      	bne.n	80132da <tcp_recv+0x26>
 80132cc:	4b07      	ldr	r3, [pc, #28]	; (80132ec <tcp_recv+0x38>)
 80132ce:	f240 62bb 	movw	r2, #1723	; 0x6bb
 80132d2:	4907      	ldr	r1, [pc, #28]	; (80132f0 <tcp_recv+0x3c>)
 80132d4:	4807      	ldr	r0, [pc, #28]	; (80132f4 <tcp_recv+0x40>)
 80132d6:	f007 fd8b 	bl	801adf0 <iprintf>
    pcb->recv = recv;
 80132da:	687b      	ldr	r3, [r7, #4]
 80132dc:	683a      	ldr	r2, [r7, #0]
 80132de:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  }
}
 80132e2:	bf00      	nop
 80132e4:	3708      	adds	r7, #8
 80132e6:	46bd      	mov	sp, r7
 80132e8:	bd80      	pop	{r7, pc}
 80132ea:	bf00      	nop
 80132ec:	0801d30c 	.word	0x0801d30c
 80132f0:	0801d62c 	.word	0x0801d62c
 80132f4:	0801d348 	.word	0x0801d348

080132f8 <tcp_sent>:
 * @param pcb tcp_pcb to set the sent callback
 * @param sent callback function to call for this pcb when data is successfully sent
 */
void
tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)
{
 80132f8:	b580      	push	{r7, lr}
 80132fa:	b082      	sub	sp, #8
 80132fc:	af00      	add	r7, sp, #0
 80132fe:	6078      	str	r0, [r7, #4]
 8013300:	6039      	str	r1, [r7, #0]
  if (pcb != NULL) {
 8013302:	687b      	ldr	r3, [r7, #4]
 8013304:	2b00      	cmp	r3, #0
 8013306:	d00d      	beq.n	8013324 <tcp_sent+0x2c>
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 8013308:	687b      	ldr	r3, [r7, #4]
 801330a:	7d1b      	ldrb	r3, [r3, #20]
 801330c:	2b01      	cmp	r3, #1
 801330e:	d106      	bne.n	801331e <tcp_sent+0x26>
 8013310:	4b06      	ldr	r3, [pc, #24]	; (801332c <tcp_sent+0x34>)
 8013312:	f240 62cc 	movw	r2, #1740	; 0x6cc
 8013316:	4906      	ldr	r1, [pc, #24]	; (8013330 <tcp_sent+0x38>)
 8013318:	4806      	ldr	r0, [pc, #24]	; (8013334 <tcp_sent+0x3c>)
 801331a:	f007 fd69 	bl	801adf0 <iprintf>
    pcb->sent = sent;
 801331e:	687b      	ldr	r3, [r7, #4]
 8013320:	683a      	ldr	r2, [r7, #0]
 8013322:	67da      	str	r2, [r3, #124]	; 0x7c
  }
}
 8013324:	bf00      	nop
 8013326:	3708      	adds	r7, #8
 8013328:	46bd      	mov	sp, r7
 801332a:	bd80      	pop	{r7, pc}
 801332c:	0801d30c 	.word	0x0801d30c
 8013330:	0801d654 	.word	0x0801d654
 8013334:	0801d348 	.word	0x0801d348

08013338 <tcp_err>:
 * @param err callback function to call for this pcb when a fatal error
 *        has occurred on the connection
 */
void
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
 8013338:	b580      	push	{r7, lr}
 801333a:	b082      	sub	sp, #8
 801333c:	af00      	add	r7, sp, #0
 801333e:	6078      	str	r0, [r7, #4]
 8013340:	6039      	str	r1, [r7, #0]
  if (pcb != NULL) {
 8013342:	687b      	ldr	r3, [r7, #4]
 8013344:	2b00      	cmp	r3, #0
 8013346:	d00e      	beq.n	8013366 <tcp_err+0x2e>
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 8013348:	687b      	ldr	r3, [r7, #4]
 801334a:	7d1b      	ldrb	r3, [r3, #20]
 801334c:	2b01      	cmp	r3, #1
 801334e:	d106      	bne.n	801335e <tcp_err+0x26>
 8013350:	4b07      	ldr	r3, [pc, #28]	; (8013370 <tcp_err+0x38>)
 8013352:	f44f 62dc 	mov.w	r2, #1760	; 0x6e0
 8013356:	4907      	ldr	r1, [pc, #28]	; (8013374 <tcp_err+0x3c>)
 8013358:	4807      	ldr	r0, [pc, #28]	; (8013378 <tcp_err+0x40>)
 801335a:	f007 fd49 	bl	801adf0 <iprintf>
    pcb->errf = err;
 801335e:	687b      	ldr	r3, [r7, #4]
 8013360:	683a      	ldr	r2, [r7, #0]
 8013362:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  }
}
 8013366:	bf00      	nop
 8013368:	3708      	adds	r7, #8
 801336a:	46bd      	mov	sp, r7
 801336c:	bd80      	pop	{r7, pc}
 801336e:	bf00      	nop
 8013370:	0801d30c 	.word	0x0801d30c
 8013374:	0801d67c 	.word	0x0801d67c
 8013378:	0801d348 	.word	0x0801d348

0801337c <tcp_accept>:
 * @param accept callback function to call for this pcb when LISTENing
 *        connection has been connected to another host
 */
void
tcp_accept(struct tcp_pcb *pcb, tcp_accept_fn accept)
{
 801337c:	b480      	push	{r7}
 801337e:	b085      	sub	sp, #20
 8013380:	af00      	add	r7, sp, #0
 8013382:	6078      	str	r0, [r7, #4]
 8013384:	6039      	str	r1, [r7, #0]
  if ((pcb != NULL) && (pcb->state == LISTEN)) {
 8013386:	687b      	ldr	r3, [r7, #4]
 8013388:	2b00      	cmp	r3, #0
 801338a:	d008      	beq.n	801339e <tcp_accept+0x22>
 801338c:	687b      	ldr	r3, [r7, #4]
 801338e:	7d1b      	ldrb	r3, [r3, #20]
 8013390:	2b01      	cmp	r3, #1
 8013392:	d104      	bne.n	801339e <tcp_accept+0x22>
    struct tcp_pcb_listen *lpcb = (struct tcp_pcb_listen*)pcb;
 8013394:	687b      	ldr	r3, [r7, #4]
 8013396:	60fb      	str	r3, [r7, #12]
    lpcb->accept = accept;
 8013398:	68fb      	ldr	r3, [r7, #12]
 801339a:	683a      	ldr	r2, [r7, #0]
 801339c:	619a      	str	r2, [r3, #24]
  }
}
 801339e:	bf00      	nop
 80133a0:	3714      	adds	r7, #20
 80133a2:	46bd      	mov	sp, r7
 80133a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80133a8:	4770      	bx	lr
	...

080133ac <tcp_poll>:
 * timer interval, which is called twice a second.
 *
 */
void
tcp_poll(struct tcp_pcb *pcb, tcp_poll_fn poll, u8_t interval)
{
 80133ac:	b580      	push	{r7, lr}
 80133ae:	b084      	sub	sp, #16
 80133b0:	af00      	add	r7, sp, #0
 80133b2:	60f8      	str	r0, [r7, #12]
 80133b4:	60b9      	str	r1, [r7, #8]
 80133b6:	4613      	mov	r3, r2
 80133b8:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 80133ba:	68fb      	ldr	r3, [r7, #12]
 80133bc:	7d1b      	ldrb	r3, [r3, #20]
 80133be:	2b01      	cmp	r3, #1
 80133c0:	d106      	bne.n	80133d0 <tcp_poll+0x24>
 80133c2:	4b09      	ldr	r3, [pc, #36]	; (80133e8 <tcp_poll+0x3c>)
 80133c4:	f240 7203 	movw	r2, #1795	; 0x703
 80133c8:	4908      	ldr	r1, [pc, #32]	; (80133ec <tcp_poll+0x40>)
 80133ca:	4809      	ldr	r0, [pc, #36]	; (80133f0 <tcp_poll+0x44>)
 80133cc:	f007 fd10 	bl	801adf0 <iprintf>
#if LWIP_CALLBACK_API
  pcb->poll = poll;
 80133d0:	68fb      	ldr	r3, [r7, #12]
 80133d2:	68ba      	ldr	r2, [r7, #8]
 80133d4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(poll);
#endif /* LWIP_CALLBACK_API */
  pcb->pollinterval = interval;
 80133d8:	68fb      	ldr	r3, [r7, #12]
 80133da:	79fa      	ldrb	r2, [r7, #7]
 80133dc:	771a      	strb	r2, [r3, #28]
}
 80133de:	bf00      	nop
 80133e0:	3710      	adds	r7, #16
 80133e2:	46bd      	mov	sp, r7
 80133e4:	bd80      	pop	{r7, pc}
 80133e6:	bf00      	nop
 80133e8:	0801d30c 	.word	0x0801d30c
 80133ec:	0801d6a4 	.word	0x0801d6a4
 80133f0:	0801d348 	.word	0x0801d348

080133f4 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 80133f4:	b580      	push	{r7, lr}
 80133f6:	b082      	sub	sp, #8
 80133f8:	af00      	add	r7, sp, #0
 80133fa:	6078      	str	r0, [r7, #4]
  if (pcb->state != CLOSED &&
 80133fc:	687b      	ldr	r3, [r7, #4]
 80133fe:	7d1b      	ldrb	r3, [r3, #20]
 8013400:	2b00      	cmp	r3, #0
 8013402:	d034      	beq.n	801346e <tcp_pcb_purge+0x7a>
     pcb->state != TIME_WAIT &&
 8013404:	687b      	ldr	r3, [r7, #4]
 8013406:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 8013408:	2b0a      	cmp	r3, #10
 801340a:	d030      	beq.n	801346e <tcp_pcb_purge+0x7a>
     pcb->state != LISTEN) {
 801340c:	687b      	ldr	r3, [r7, #4]
 801340e:	7d1b      	ldrb	r3, [r3, #20]
     pcb->state != TIME_WAIT &&
 8013410:	2b01      	cmp	r3, #1
 8013412:	d02c      	beq.n	801346e <tcp_pcb_purge+0x7a>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 8013414:	687b      	ldr	r3, [r7, #4]
 8013416:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8013418:	2b00      	cmp	r3, #0
 801341a:	d007      	beq.n	801342c <tcp_pcb_purge+0x38>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 801341c:	687b      	ldr	r3, [r7, #4]
 801341e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8013420:	4618      	mov	r0, r3
 8013422:	f7fe fa79 	bl	8011918 <pbuf_free>
      pcb->refused_data = NULL;
 8013426:	687b      	ldr	r3, [r7, #4]
 8013428:	2200      	movs	r2, #0
 801342a:	675a      	str	r2, [r3, #116]	; 0x74
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
    }
    tcp_segs_free(pcb->ooseq);
 801342c:	687b      	ldr	r3, [r7, #4]
 801342e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013430:	4618      	mov	r0, r3
 8013432:	f7ff fd76 	bl	8012f22 <tcp_segs_free>
    pcb->ooseq = NULL;
 8013436:	687b      	ldr	r3, [r7, #4]
 8013438:	2200      	movs	r2, #0
 801343a:	671a      	str	r2, [r3, #112]	; 0x70
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 801343c:	687b      	ldr	r3, [r7, #4]
 801343e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8013442:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 8013444:	687b      	ldr	r3, [r7, #4]
 8013446:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8013448:	4618      	mov	r0, r3
 801344a:	f7ff fd6a 	bl	8012f22 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 801344e:	687b      	ldr	r3, [r7, #4]
 8013450:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013452:	4618      	mov	r0, r3
 8013454:	f7ff fd65 	bl	8012f22 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 8013458:	687b      	ldr	r3, [r7, #4]
 801345a:	2200      	movs	r2, #0
 801345c:	669a      	str	r2, [r3, #104]	; 0x68
 801345e:	687b      	ldr	r3, [r7, #4]
 8013460:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8013462:	687b      	ldr	r3, [r7, #4]
 8013464:	66da      	str	r2, [r3, #108]	; 0x6c
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 8013466:	687b      	ldr	r3, [r7, #4]
 8013468:	2200      	movs	r2, #0
 801346a:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
#endif /* TCP_OVERSIZE */
  }
}
 801346e:	bf00      	nop
 8013470:	3708      	adds	r7, #8
 8013472:	46bd      	mov	sp, r7
 8013474:	bd80      	pop	{r7, pc}
	...

08013478 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 8013478:	b580      	push	{r7, lr}
 801347a:	b084      	sub	sp, #16
 801347c:	af00      	add	r7, sp, #0
 801347e:	6078      	str	r0, [r7, #4]
 8013480:	6039      	str	r1, [r7, #0]
  TCP_RMV(pcblist, pcb);
 8013482:	687b      	ldr	r3, [r7, #4]
 8013484:	681b      	ldr	r3, [r3, #0]
 8013486:	683a      	ldr	r2, [r7, #0]
 8013488:	429a      	cmp	r2, r3
 801348a:	d105      	bne.n	8013498 <tcp_pcb_remove+0x20>
 801348c:	687b      	ldr	r3, [r7, #4]
 801348e:	681b      	ldr	r3, [r3, #0]
 8013490:	68da      	ldr	r2, [r3, #12]
 8013492:	687b      	ldr	r3, [r7, #4]
 8013494:	601a      	str	r2, [r3, #0]
 8013496:	e013      	b.n	80134c0 <tcp_pcb_remove+0x48>
 8013498:	687b      	ldr	r3, [r7, #4]
 801349a:	681b      	ldr	r3, [r3, #0]
 801349c:	60fb      	str	r3, [r7, #12]
 801349e:	e00c      	b.n	80134ba <tcp_pcb_remove+0x42>
 80134a0:	68fb      	ldr	r3, [r7, #12]
 80134a2:	68db      	ldr	r3, [r3, #12]
 80134a4:	683a      	ldr	r2, [r7, #0]
 80134a6:	429a      	cmp	r2, r3
 80134a8:	d104      	bne.n	80134b4 <tcp_pcb_remove+0x3c>
 80134aa:	683b      	ldr	r3, [r7, #0]
 80134ac:	68da      	ldr	r2, [r3, #12]
 80134ae:	68fb      	ldr	r3, [r7, #12]
 80134b0:	60da      	str	r2, [r3, #12]
 80134b2:	e005      	b.n	80134c0 <tcp_pcb_remove+0x48>
 80134b4:	68fb      	ldr	r3, [r7, #12]
 80134b6:	68db      	ldr	r3, [r3, #12]
 80134b8:	60fb      	str	r3, [r7, #12]
 80134ba:	68fb      	ldr	r3, [r7, #12]
 80134bc:	2b00      	cmp	r3, #0
 80134be:	d1ef      	bne.n	80134a0 <tcp_pcb_remove+0x28>
 80134c0:	683b      	ldr	r3, [r7, #0]
 80134c2:	2200      	movs	r2, #0
 80134c4:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 80134c6:	6838      	ldr	r0, [r7, #0]
 80134c8:	f7ff ff94 	bl	80133f4 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if (pcb->state != TIME_WAIT &&
 80134cc:	683b      	ldr	r3, [r7, #0]
 80134ce:	7d1b      	ldrb	r3, [r3, #20]
 80134d0:	2b0a      	cmp	r3, #10
 80134d2:	d013      	beq.n	80134fc <tcp_pcb_remove+0x84>
     pcb->state != LISTEN &&
 80134d4:	683b      	ldr	r3, [r7, #0]
 80134d6:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != TIME_WAIT &&
 80134d8:	2b01      	cmp	r3, #1
 80134da:	d00f      	beq.n	80134fc <tcp_pcb_remove+0x84>
     pcb->flags & TF_ACK_DELAY) {
 80134dc:	683b      	ldr	r3, [r7, #0]
 80134de:	7e9b      	ldrb	r3, [r3, #26]
 80134e0:	f003 0301 	and.w	r3, r3, #1
     pcb->state != LISTEN &&
 80134e4:	2b00      	cmp	r3, #0
 80134e6:	d009      	beq.n	80134fc <tcp_pcb_remove+0x84>
    pcb->flags |= TF_ACK_NOW;
 80134e8:	683b      	ldr	r3, [r7, #0]
 80134ea:	7e9b      	ldrb	r3, [r3, #26]
 80134ec:	f043 0302 	orr.w	r3, r3, #2
 80134f0:	b2da      	uxtb	r2, r3
 80134f2:	683b      	ldr	r3, [r7, #0]
 80134f4:	769a      	strb	r2, [r3, #26]
    tcp_output(pcb);
 80134f6:	6838      	ldr	r0, [r7, #0]
 80134f8:	f003 f9be 	bl	8016878 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 80134fc:	683b      	ldr	r3, [r7, #0]
 80134fe:	7d1b      	ldrb	r3, [r3, #20]
 8013500:	2b01      	cmp	r3, #1
 8013502:	d020      	beq.n	8013546 <tcp_pcb_remove+0xce>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 8013504:	683b      	ldr	r3, [r7, #0]
 8013506:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8013508:	2b00      	cmp	r3, #0
 801350a:	d006      	beq.n	801351a <tcp_pcb_remove+0xa2>
 801350c:	4b13      	ldr	r3, [pc, #76]	; (801355c <tcp_pcb_remove+0xe4>)
 801350e:	f240 7253 	movw	r2, #1875	; 0x753
 8013512:	4913      	ldr	r1, [pc, #76]	; (8013560 <tcp_pcb_remove+0xe8>)
 8013514:	4813      	ldr	r0, [pc, #76]	; (8013564 <tcp_pcb_remove+0xec>)
 8013516:	f007 fc6b 	bl	801adf0 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 801351a:	683b      	ldr	r3, [r7, #0]
 801351c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801351e:	2b00      	cmp	r3, #0
 8013520:	d006      	beq.n	8013530 <tcp_pcb_remove+0xb8>
 8013522:	4b0e      	ldr	r3, [pc, #56]	; (801355c <tcp_pcb_remove+0xe4>)
 8013524:	f240 7254 	movw	r2, #1876	; 0x754
 8013528:	490f      	ldr	r1, [pc, #60]	; (8013568 <tcp_pcb_remove+0xf0>)
 801352a:	480e      	ldr	r0, [pc, #56]	; (8013564 <tcp_pcb_remove+0xec>)
 801352c:	f007 fc60 	bl	801adf0 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 8013530:	683b      	ldr	r3, [r7, #0]
 8013532:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013534:	2b00      	cmp	r3, #0
 8013536:	d006      	beq.n	8013546 <tcp_pcb_remove+0xce>
 8013538:	4b08      	ldr	r3, [pc, #32]	; (801355c <tcp_pcb_remove+0xe4>)
 801353a:	f240 7256 	movw	r2, #1878	; 0x756
 801353e:	490b      	ldr	r1, [pc, #44]	; (801356c <tcp_pcb_remove+0xf4>)
 8013540:	4808      	ldr	r0, [pc, #32]	; (8013564 <tcp_pcb_remove+0xec>)
 8013542:	f007 fc55 	bl	801adf0 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 8013546:	683b      	ldr	r3, [r7, #0]
 8013548:	2200      	movs	r2, #0
 801354a:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 801354c:	683b      	ldr	r3, [r7, #0]
 801354e:	2200      	movs	r2, #0
 8013550:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 8013552:	bf00      	nop
 8013554:	3710      	adds	r7, #16
 8013556:	46bd      	mov	sp, r7
 8013558:	bd80      	pop	{r7, pc}
 801355a:	bf00      	nop
 801355c:	0801d30c 	.word	0x0801d30c
 8013560:	0801d6c4 	.word	0x0801d6c4
 8013564:	0801d348 	.word	0x0801d348
 8013568:	0801d6dc 	.word	0x0801d6dc
 801356c:	0801d6f8 	.word	0x0801d6f8

08013570 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 8013570:	b480      	push	{r7}
 8013572:	b083      	sub	sp, #12
 8013574:	af00      	add	r7, sp, #0
 8013576:	6078      	str	r0, [r7, #4]
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 8013578:	4b07      	ldr	r3, [pc, #28]	; (8013598 <tcp_next_iss+0x28>)
 801357a:	681a      	ldr	r2, [r3, #0]
 801357c:	4b07      	ldr	r3, [pc, #28]	; (801359c <tcp_next_iss+0x2c>)
 801357e:	681b      	ldr	r3, [r3, #0]
 8013580:	4413      	add	r3, r2
 8013582:	4a05      	ldr	r2, [pc, #20]	; (8013598 <tcp_next_iss+0x28>)
 8013584:	6013      	str	r3, [r2, #0]
  return iss;
 8013586:	4b04      	ldr	r3, [pc, #16]	; (8013598 <tcp_next_iss+0x28>)
 8013588:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 801358a:	4618      	mov	r0, r3
 801358c:	370c      	adds	r7, #12
 801358e:	46bd      	mov	sp, r7
 8013590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013594:	4770      	bx	lr
 8013596:	bf00      	nop
 8013598:	20000120 	.word	0x20000120
 801359c:	2000ab44 	.word	0x2000ab44

080135a0 <tcp_eff_send_mss_impl>:
tcp_eff_send_mss_impl(u16_t sendmss, const ip_addr_t *dest
#if LWIP_IPV6 || LWIP_IPV4_SRC_ROUTING
                     , const ip_addr_t *src
#endif /* LWIP_IPV6 || LWIP_IPV4_SRC_ROUTING */
                     )
{
 80135a0:	b580      	push	{r7, lr}
 80135a2:	b084      	sub	sp, #16
 80135a4:	af00      	add	r7, sp, #0
 80135a6:	4603      	mov	r3, r0
 80135a8:	6039      	str	r1, [r7, #0]
 80135aa:	80fb      	strh	r3, [r7, #6]
  u16_t mss_s;
  struct netif *outif;
  s16_t mtu;

  outif = ip_route(src, dest);
 80135ac:	6838      	ldr	r0, [r7, #0]
 80135ae:	f005 faeb 	bl	8018b88 <ip4_route>
 80135b2:	60f8      	str	r0, [r7, #12]
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 80135b4:	68fb      	ldr	r3, [r7, #12]
 80135b6:	2b00      	cmp	r3, #0
 80135b8:	d101      	bne.n	80135be <tcp_eff_send_mss_impl+0x1e>
      return sendmss;
 80135ba:	88fb      	ldrh	r3, [r7, #6]
 80135bc:	e010      	b.n	80135e0 <tcp_eff_send_mss_impl+0x40>
    }
    mtu = outif->mtu;
 80135be:	68fb      	ldr	r3, [r7, #12]
 80135c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80135c2:	817b      	strh	r3, [r7, #10]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 80135c4:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80135c8:	2b00      	cmp	r3, #0
 80135ca:	d008      	beq.n	80135de <tcp_eff_send_mss_impl+0x3e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      mss_s = mtu - IP_HLEN - TCP_HLEN;
 80135cc:	897b      	ldrh	r3, [r7, #10]
 80135ce:	3b28      	subs	r3, #40	; 0x28
 80135d0:	813b      	strh	r3, [r7, #8]
#endif /* LWIP_IPV4 */
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 80135d2:	893a      	ldrh	r2, [r7, #8]
 80135d4:	88fb      	ldrh	r3, [r7, #6]
 80135d6:	4293      	cmp	r3, r2
 80135d8:	bf28      	it	cs
 80135da:	4613      	movcs	r3, r2
 80135dc:	80fb      	strh	r3, [r7, #6]
  }
  return sendmss;
 80135de:	88fb      	ldrh	r3, [r7, #6]
}
 80135e0:	4618      	mov	r0, r3
 80135e2:	3710      	adds	r7, #16
 80135e4:	46bd      	mov	sp, r7
 80135e6:	bd80      	pop	{r7, pc}

080135e8 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t* old_addr, struct tcp_pcb* pcb_list)
{
 80135e8:	b580      	push	{r7, lr}
 80135ea:	b084      	sub	sp, #16
 80135ec:	af00      	add	r7, sp, #0
 80135ee:	6078      	str	r0, [r7, #4]
 80135f0:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 80135f2:	683b      	ldr	r3, [r7, #0]
 80135f4:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 80135f6:	e011      	b.n	801361c <tcp_netif_ip_addr_changed_pcblist+0x34>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 80135f8:	68fb      	ldr	r3, [r7, #12]
 80135fa:	681a      	ldr	r2, [r3, #0]
 80135fc:	687b      	ldr	r3, [r7, #4]
 80135fe:	681b      	ldr	r3, [r3, #0]
 8013600:	429a      	cmp	r2, r3
 8013602:	d108      	bne.n	8013616 <tcp_netif_ip_addr_changed_pcblist+0x2e>
      /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
      && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
      ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 8013604:	68fb      	ldr	r3, [r7, #12]
 8013606:	68db      	ldr	r3, [r3, #12]
 8013608:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 801360a:	68f8      	ldr	r0, [r7, #12]
 801360c:	f7fe feca 	bl	80123a4 <tcp_abort>
      pcb = next;
 8013610:	68bb      	ldr	r3, [r7, #8]
 8013612:	60fb      	str	r3, [r7, #12]
 8013614:	e002      	b.n	801361c <tcp_netif_ip_addr_changed_pcblist+0x34>
    } else {
      pcb = pcb->next;
 8013616:	68fb      	ldr	r3, [r7, #12]
 8013618:	68db      	ldr	r3, [r3, #12]
 801361a:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 801361c:	68fb      	ldr	r3, [r7, #12]
 801361e:	2b00      	cmp	r3, #0
 8013620:	d1ea      	bne.n	80135f8 <tcp_netif_ip_addr_changed_pcblist+0x10>
    }
  }
}
 8013622:	bf00      	nop
 8013624:	3710      	adds	r7, #16
 8013626:	46bd      	mov	sp, r7
 8013628:	bd80      	pop	{r7, pc}
	...

0801362c <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t* old_addr, const ip_addr_t* new_addr)
{
 801362c:	b580      	push	{r7, lr}
 801362e:	b084      	sub	sp, #16
 8013630:	af00      	add	r7, sp, #0
 8013632:	6078      	str	r0, [r7, #4]
 8013634:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb, *next;

  if (!ip_addr_isany(old_addr)) {
 8013636:	687b      	ldr	r3, [r7, #4]
 8013638:	2b00      	cmp	r3, #0
 801363a:	d02c      	beq.n	8013696 <tcp_netif_ip_addr_changed+0x6a>
 801363c:	687b      	ldr	r3, [r7, #4]
 801363e:	681b      	ldr	r3, [r3, #0]
 8013640:	2b00      	cmp	r3, #0
 8013642:	d028      	beq.n	8013696 <tcp_netif_ip_addr_changed+0x6a>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 8013644:	4b16      	ldr	r3, [pc, #88]	; (80136a0 <tcp_netif_ip_addr_changed+0x74>)
 8013646:	681b      	ldr	r3, [r3, #0]
 8013648:	4619      	mov	r1, r3
 801364a:	6878      	ldr	r0, [r7, #4]
 801364c:	f7ff ffcc 	bl	80135e8 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 8013650:	4b14      	ldr	r3, [pc, #80]	; (80136a4 <tcp_netif_ip_addr_changed+0x78>)
 8013652:	681b      	ldr	r3, [r3, #0]
 8013654:	4619      	mov	r1, r3
 8013656:	6878      	ldr	r0, [r7, #4]
 8013658:	f7ff ffc6 	bl	80135e8 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 801365c:	683b      	ldr	r3, [r7, #0]
 801365e:	2b00      	cmp	r3, #0
 8013660:	d019      	beq.n	8013696 <tcp_netif_ip_addr_changed+0x6a>
 8013662:	683b      	ldr	r3, [r7, #0]
 8013664:	681b      	ldr	r3, [r3, #0]
 8013666:	2b00      	cmp	r3, #0
 8013668:	d015      	beq.n	8013696 <tcp_netif_ip_addr_changed+0x6a>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = next) {
 801366a:	4b0f      	ldr	r3, [pc, #60]	; (80136a8 <tcp_netif_ip_addr_changed+0x7c>)
 801366c:	681b      	ldr	r3, [r3, #0]
 801366e:	60fb      	str	r3, [r7, #12]
 8013670:	e00e      	b.n	8013690 <tcp_netif_ip_addr_changed+0x64>
        next = lpcb->next;
 8013672:	68fb      	ldr	r3, [r7, #12]
 8013674:	68db      	ldr	r3, [r3, #12]
 8013676:	60bb      	str	r3, [r7, #8]
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 8013678:	68fb      	ldr	r3, [r7, #12]
 801367a:	681a      	ldr	r2, [r3, #0]
 801367c:	687b      	ldr	r3, [r7, #4]
 801367e:	681b      	ldr	r3, [r3, #0]
 8013680:	429a      	cmp	r2, r3
 8013682:	d103      	bne.n	801368c <tcp_netif_ip_addr_changed+0x60>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 8013684:	683b      	ldr	r3, [r7, #0]
 8013686:	681a      	ldr	r2, [r3, #0]
 8013688:	68fb      	ldr	r3, [r7, #12]
 801368a:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = next) {
 801368c:	68bb      	ldr	r3, [r7, #8]
 801368e:	60fb      	str	r3, [r7, #12]
 8013690:	68fb      	ldr	r3, [r7, #12]
 8013692:	2b00      	cmp	r3, #0
 8013694:	d1ed      	bne.n	8013672 <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 8013696:	bf00      	nop
 8013698:	3710      	adds	r7, #16
 801369a:	46bd      	mov	sp, r7
 801369c:	bd80      	pop	{r7, pc}
 801369e:	bf00      	nop
 80136a0:	2000ab40 	.word	0x2000ab40
 80136a4:	2000ab4c 	.word	0x2000ab4c
 80136a8:	2000ab48 	.word	0x2000ab48

080136ac <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 80136ac:	b590      	push	{r4, r7, lr}
 80136ae:	b08b      	sub	sp, #44	; 0x2c
 80136b0:	af02      	add	r7, sp, #8
 80136b2:	6078      	str	r0, [r7, #4]
 80136b4:	6039      	str	r1, [r7, #0]
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 80136b6:	687b      	ldr	r3, [r7, #4]
 80136b8:	685b      	ldr	r3, [r3, #4]
 80136ba:	4a82      	ldr	r2, [pc, #520]	; (80138c4 <tcp_input+0x218>)
 80136bc:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 80136be:	687b      	ldr	r3, [r7, #4]
 80136c0:	895b      	ldrh	r3, [r3, #10]
 80136c2:	2b13      	cmp	r3, #19
 80136c4:	f240 838a 	bls.w	8013ddc <tcp_input+0x730>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 80136c8:	4b7f      	ldr	r3, [pc, #508]	; (80138c8 <tcp_input+0x21c>)
 80136ca:	695a      	ldr	r2, [r3, #20]
 80136cc:	4b7e      	ldr	r3, [pc, #504]	; (80138c8 <tcp_input+0x21c>)
 80136ce:	681b      	ldr	r3, [r3, #0]
 80136d0:	4619      	mov	r1, r3
 80136d2:	4610      	mov	r0, r2
 80136d4:	f005 fcd2 	bl	801907c <ip4_addr_isbroadcast_u32>
 80136d8:	4603      	mov	r3, r0
 80136da:	2b00      	cmp	r3, #0
 80136dc:	f040 8380 	bne.w	8013de0 <tcp_input+0x734>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 80136e0:	4b79      	ldr	r3, [pc, #484]	; (80138c8 <tcp_input+0x21c>)
 80136e2:	695b      	ldr	r3, [r3, #20]
 80136e4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 80136e8:	2be0      	cmp	r3, #224	; 0xe0
 80136ea:	f000 8379 	beq.w	8013de0 <tcp_input+0x734>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN(tcphdr) * 4;
 80136ee:	4b75      	ldr	r3, [pc, #468]	; (80138c4 <tcp_input+0x218>)
 80136f0:	681b      	ldr	r3, [r3, #0]
 80136f2:	899b      	ldrh	r3, [r3, #12]
 80136f4:	b29b      	uxth	r3, r3
 80136f6:	4618      	mov	r0, r3
 80136f8:	f7fc ff74 	bl	80105e4 <lwip_htons>
 80136fc:	4603      	mov	r3, r0
 80136fe:	0b1b      	lsrs	r3, r3, #12
 8013700:	b29b      	uxth	r3, r3
 8013702:	b2db      	uxtb	r3, r3
 8013704:	009b      	lsls	r3, r3, #2
 8013706:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 8013708:	7cbb      	ldrb	r3, [r7, #18]
 801370a:	2b13      	cmp	r3, #19
 801370c:	f240 8368 	bls.w	8013de0 <tcp_input+0x734>
 8013710:	7cbb      	ldrb	r3, [r7, #18]
 8013712:	b29a      	uxth	r2, r3
 8013714:	687b      	ldr	r3, [r7, #4]
 8013716:	891b      	ldrh	r3, [r3, #8]
 8013718:	429a      	cmp	r2, r3
 801371a:	f200 8361 	bhi.w	8013de0 <tcp_input+0x734>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = hdrlen_bytes - TCP_HLEN;
 801371e:	7cbb      	ldrb	r3, [r7, #18]
 8013720:	b29b      	uxth	r3, r3
 8013722:	3b14      	subs	r3, #20
 8013724:	b29a      	uxth	r2, r3
 8013726:	4b69      	ldr	r3, [pc, #420]	; (80138cc <tcp_input+0x220>)
 8013728:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 801372a:	4b69      	ldr	r3, [pc, #420]	; (80138d0 <tcp_input+0x224>)
 801372c:	2200      	movs	r2, #0
 801372e:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 8013730:	687b      	ldr	r3, [r7, #4]
 8013732:	895a      	ldrh	r2, [r3, #10]
 8013734:	7cbb      	ldrb	r3, [r7, #18]
 8013736:	b29b      	uxth	r3, r3
 8013738:	429a      	cmp	r2, r3
 801373a:	d30d      	bcc.n	8013758 <tcp_input+0xac>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 801373c:	4b63      	ldr	r3, [pc, #396]	; (80138cc <tcp_input+0x220>)
 801373e:	881a      	ldrh	r2, [r3, #0]
 8013740:	4b64      	ldr	r3, [pc, #400]	; (80138d4 <tcp_input+0x228>)
 8013742:	801a      	strh	r2, [r3, #0]
    pbuf_header(p, -(s16_t)hdrlen_bytes); /* cannot fail */
 8013744:	7cbb      	ldrb	r3, [r7, #18]
 8013746:	b29b      	uxth	r3, r3
 8013748:	425b      	negs	r3, r3
 801374a:	b29b      	uxth	r3, r3
 801374c:	b21b      	sxth	r3, r3
 801374e:	4619      	mov	r1, r3
 8013750:	6878      	ldr	r0, [r7, #4]
 8013752:	f7fe f8bd 	bl	80118d0 <pbuf_header>
 8013756:	e055      	b.n	8013804 <tcp_input+0x158>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 8013758:	687b      	ldr	r3, [r7, #4]
 801375a:	681b      	ldr	r3, [r3, #0]
 801375c:	2b00      	cmp	r3, #0
 801375e:	d105      	bne.n	801376c <tcp_input+0xc0>
 8013760:	4b5d      	ldr	r3, [pc, #372]	; (80138d8 <tcp_input+0x22c>)
 8013762:	22b2      	movs	r2, #178	; 0xb2
 8013764:	495d      	ldr	r1, [pc, #372]	; (80138dc <tcp_input+0x230>)
 8013766:	485e      	ldr	r0, [pc, #376]	; (80138e0 <tcp_input+0x234>)
 8013768:	f007 fb42 	bl	801adf0 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_header(p, -TCP_HLEN);
 801376c:	f06f 0113 	mvn.w	r1, #19
 8013770:	6878      	ldr	r0, [r7, #4]
 8013772:	f7fe f8ad 	bl	80118d0 <pbuf_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 8013776:	687b      	ldr	r3, [r7, #4]
 8013778:	895a      	ldrh	r2, [r3, #10]
 801377a:	4b56      	ldr	r3, [pc, #344]	; (80138d4 <tcp_input+0x228>)
 801377c:	801a      	strh	r2, [r3, #0]
    opt2len = tcphdr_optlen - tcphdr_opt1len;
 801377e:	4b53      	ldr	r3, [pc, #332]	; (80138cc <tcp_input+0x220>)
 8013780:	881a      	ldrh	r2, [r3, #0]
 8013782:	4b54      	ldr	r3, [pc, #336]	; (80138d4 <tcp_input+0x228>)
 8013784:	881b      	ldrh	r3, [r3, #0]
 8013786:	1ad3      	subs	r3, r2, r3
 8013788:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_header(p, -(s16_t)tcphdr_opt1len);
 801378a:	4b52      	ldr	r3, [pc, #328]	; (80138d4 <tcp_input+0x228>)
 801378c:	881b      	ldrh	r3, [r3, #0]
 801378e:	425b      	negs	r3, r3
 8013790:	b29b      	uxth	r3, r3
 8013792:	b21b      	sxth	r3, r3
 8013794:	4619      	mov	r1, r3
 8013796:	6878      	ldr	r0, [r7, #4]
 8013798:	f7fe f89a 	bl	80118d0 <pbuf_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 801379c:	687b      	ldr	r3, [r7, #4]
 801379e:	681b      	ldr	r3, [r3, #0]
 80137a0:	895b      	ldrh	r3, [r3, #10]
 80137a2:	8a3a      	ldrh	r2, [r7, #16]
 80137a4:	429a      	cmp	r2, r3
 80137a6:	f200 831d 	bhi.w	8013de4 <tcp_input+0x738>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t*)p->next->payload;
 80137aa:	687b      	ldr	r3, [r7, #4]
 80137ac:	681b      	ldr	r3, [r3, #0]
 80137ae:	685b      	ldr	r3, [r3, #4]
 80137b0:	4a47      	ldr	r2, [pc, #284]	; (80138d0 <tcp_input+0x224>)
 80137b2:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_header(p->next, -(s16_t)opt2len);
 80137b4:	687b      	ldr	r3, [r7, #4]
 80137b6:	681a      	ldr	r2, [r3, #0]
 80137b8:	8a3b      	ldrh	r3, [r7, #16]
 80137ba:	425b      	negs	r3, r3
 80137bc:	b29b      	uxth	r3, r3
 80137be:	b21b      	sxth	r3, r3
 80137c0:	4619      	mov	r1, r3
 80137c2:	4610      	mov	r0, r2
 80137c4:	f7fe f884 	bl	80118d0 <pbuf_header>
    p->tot_len -= opt2len;
 80137c8:	687b      	ldr	r3, [r7, #4]
 80137ca:	891a      	ldrh	r2, [r3, #8]
 80137cc:	8a3b      	ldrh	r3, [r7, #16]
 80137ce:	1ad3      	subs	r3, r2, r3
 80137d0:	b29a      	uxth	r2, r3
 80137d2:	687b      	ldr	r3, [r7, #4]
 80137d4:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 80137d6:	687b      	ldr	r3, [r7, #4]
 80137d8:	895b      	ldrh	r3, [r3, #10]
 80137da:	2b00      	cmp	r3, #0
 80137dc:	d005      	beq.n	80137ea <tcp_input+0x13e>
 80137de:	4b3e      	ldr	r3, [pc, #248]	; (80138d8 <tcp_input+0x22c>)
 80137e0:	22cf      	movs	r2, #207	; 0xcf
 80137e2:	4940      	ldr	r1, [pc, #256]	; (80138e4 <tcp_input+0x238>)
 80137e4:	483e      	ldr	r0, [pc, #248]	; (80138e0 <tcp_input+0x234>)
 80137e6:	f007 fb03 	bl	801adf0 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 80137ea:	687b      	ldr	r3, [r7, #4]
 80137ec:	891a      	ldrh	r2, [r3, #8]
 80137ee:	687b      	ldr	r3, [r7, #4]
 80137f0:	681b      	ldr	r3, [r3, #0]
 80137f2:	891b      	ldrh	r3, [r3, #8]
 80137f4:	429a      	cmp	r2, r3
 80137f6:	d005      	beq.n	8013804 <tcp_input+0x158>
 80137f8:	4b37      	ldr	r3, [pc, #220]	; (80138d8 <tcp_input+0x22c>)
 80137fa:	22d0      	movs	r2, #208	; 0xd0
 80137fc:	493a      	ldr	r1, [pc, #232]	; (80138e8 <tcp_input+0x23c>)
 80137fe:	4838      	ldr	r0, [pc, #224]	; (80138e0 <tcp_input+0x234>)
 8013800:	f007 faf6 	bl	801adf0 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 8013804:	4b2f      	ldr	r3, [pc, #188]	; (80138c4 <tcp_input+0x218>)
 8013806:	681b      	ldr	r3, [r3, #0]
 8013808:	881b      	ldrh	r3, [r3, #0]
 801380a:	b29a      	uxth	r2, r3
 801380c:	4b2d      	ldr	r3, [pc, #180]	; (80138c4 <tcp_input+0x218>)
 801380e:	681c      	ldr	r4, [r3, #0]
 8013810:	4610      	mov	r0, r2
 8013812:	f7fc fee7 	bl	80105e4 <lwip_htons>
 8013816:	4603      	mov	r3, r0
 8013818:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 801381a:	4b2a      	ldr	r3, [pc, #168]	; (80138c4 <tcp_input+0x218>)
 801381c:	681b      	ldr	r3, [r3, #0]
 801381e:	885b      	ldrh	r3, [r3, #2]
 8013820:	b29a      	uxth	r2, r3
 8013822:	4b28      	ldr	r3, [pc, #160]	; (80138c4 <tcp_input+0x218>)
 8013824:	681c      	ldr	r4, [r3, #0]
 8013826:	4610      	mov	r0, r2
 8013828:	f7fc fedc 	bl	80105e4 <lwip_htons>
 801382c:	4603      	mov	r3, r0
 801382e:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 8013830:	4b24      	ldr	r3, [pc, #144]	; (80138c4 <tcp_input+0x218>)
 8013832:	681b      	ldr	r3, [r3, #0]
 8013834:	685a      	ldr	r2, [r3, #4]
 8013836:	4b23      	ldr	r3, [pc, #140]	; (80138c4 <tcp_input+0x218>)
 8013838:	681c      	ldr	r4, [r3, #0]
 801383a:	4610      	mov	r0, r2
 801383c:	f7fc fee0 	bl	8010600 <lwip_htonl>
 8013840:	4603      	mov	r3, r0
 8013842:	6063      	str	r3, [r4, #4]
 8013844:	6863      	ldr	r3, [r4, #4]
 8013846:	4a29      	ldr	r2, [pc, #164]	; (80138ec <tcp_input+0x240>)
 8013848:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 801384a:	4b1e      	ldr	r3, [pc, #120]	; (80138c4 <tcp_input+0x218>)
 801384c:	681b      	ldr	r3, [r3, #0]
 801384e:	689a      	ldr	r2, [r3, #8]
 8013850:	4b1c      	ldr	r3, [pc, #112]	; (80138c4 <tcp_input+0x218>)
 8013852:	681c      	ldr	r4, [r3, #0]
 8013854:	4610      	mov	r0, r2
 8013856:	f7fc fed3 	bl	8010600 <lwip_htonl>
 801385a:	4603      	mov	r3, r0
 801385c:	60a3      	str	r3, [r4, #8]
 801385e:	68a3      	ldr	r3, [r4, #8]
 8013860:	4a23      	ldr	r2, [pc, #140]	; (80138f0 <tcp_input+0x244>)
 8013862:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 8013864:	4b17      	ldr	r3, [pc, #92]	; (80138c4 <tcp_input+0x218>)
 8013866:	681b      	ldr	r3, [r3, #0]
 8013868:	89db      	ldrh	r3, [r3, #14]
 801386a:	b29a      	uxth	r2, r3
 801386c:	4b15      	ldr	r3, [pc, #84]	; (80138c4 <tcp_input+0x218>)
 801386e:	681c      	ldr	r4, [r3, #0]
 8013870:	4610      	mov	r0, r2
 8013872:	f7fc feb7 	bl	80105e4 <lwip_htons>
 8013876:	4603      	mov	r3, r0
 8013878:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 801387a:	4b12      	ldr	r3, [pc, #72]	; (80138c4 <tcp_input+0x218>)
 801387c:	681b      	ldr	r3, [r3, #0]
 801387e:	899b      	ldrh	r3, [r3, #12]
 8013880:	b29b      	uxth	r3, r3
 8013882:	4618      	mov	r0, r3
 8013884:	f7fc feae 	bl	80105e4 <lwip_htons>
 8013888:	4603      	mov	r3, r0
 801388a:	b2db      	uxtb	r3, r3
 801388c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8013890:	b2da      	uxtb	r2, r3
 8013892:	4b18      	ldr	r3, [pc, #96]	; (80138f4 <tcp_input+0x248>)
 8013894:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len + ((flags & (TCP_FIN | TCP_SYN)) ? 1 : 0);
 8013896:	687b      	ldr	r3, [r7, #4]
 8013898:	891a      	ldrh	r2, [r3, #8]
 801389a:	4b16      	ldr	r3, [pc, #88]	; (80138f4 <tcp_input+0x248>)
 801389c:	781b      	ldrb	r3, [r3, #0]
 801389e:	f003 0303 	and.w	r3, r3, #3
 80138a2:	2b00      	cmp	r3, #0
 80138a4:	bf14      	ite	ne
 80138a6:	2301      	movne	r3, #1
 80138a8:	2300      	moveq	r3, #0
 80138aa:	b2db      	uxtb	r3, r3
 80138ac:	b29b      	uxth	r3, r3
 80138ae:	4413      	add	r3, r2
 80138b0:	b29a      	uxth	r2, r3
 80138b2:	4b11      	ldr	r3, [pc, #68]	; (80138f8 <tcp_input+0x24c>)
 80138b4:	801a      	strh	r2, [r3, #0]

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 80138b6:	2300      	movs	r3, #0
 80138b8:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80138ba:	4b10      	ldr	r3, [pc, #64]	; (80138fc <tcp_input+0x250>)
 80138bc:	681b      	ldr	r3, [r3, #0]
 80138be:	61fb      	str	r3, [r7, #28]
 80138c0:	e082      	b.n	80139c8 <tcp_input+0x31c>
 80138c2:	bf00      	nop
 80138c4:	20004218 	.word	0x20004218
 80138c8:	20007638 	.word	0x20007638
 80138cc:	2000421c 	.word	0x2000421c
 80138d0:	20004220 	.word	0x20004220
 80138d4:	2000421e 	.word	0x2000421e
 80138d8:	0801d710 	.word	0x0801d710
 80138dc:	0801d744 	.word	0x0801d744
 80138e0:	0801d754 	.word	0x0801d754
 80138e4:	0801d77c 	.word	0x0801d77c
 80138e8:	0801d788 	.word	0x0801d788
 80138ec:	20004228 	.word	0x20004228
 80138f0:	2000422c 	.word	0x2000422c
 80138f4:	20004234 	.word	0x20004234
 80138f8:	20004232 	.word	0x20004232
 80138fc:	2000ab40 	.word	0x2000ab40
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 8013900:	69fb      	ldr	r3, [r7, #28]
 8013902:	7d1b      	ldrb	r3, [r3, #20]
 8013904:	2b00      	cmp	r3, #0
 8013906:	d105      	bne.n	8013914 <tcp_input+0x268>
 8013908:	4b8f      	ldr	r3, [pc, #572]	; (8013b48 <tcp_input+0x49c>)
 801390a:	22e2      	movs	r2, #226	; 0xe2
 801390c:	498f      	ldr	r1, [pc, #572]	; (8013b4c <tcp_input+0x4a0>)
 801390e:	4890      	ldr	r0, [pc, #576]	; (8013b50 <tcp_input+0x4a4>)
 8013910:	f007 fa6e 	bl	801adf0 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 8013914:	69fb      	ldr	r3, [r7, #28]
 8013916:	7d1b      	ldrb	r3, [r3, #20]
 8013918:	2b0a      	cmp	r3, #10
 801391a:	d105      	bne.n	8013928 <tcp_input+0x27c>
 801391c:	4b8a      	ldr	r3, [pc, #552]	; (8013b48 <tcp_input+0x49c>)
 801391e:	22e3      	movs	r2, #227	; 0xe3
 8013920:	498c      	ldr	r1, [pc, #560]	; (8013b54 <tcp_input+0x4a8>)
 8013922:	488b      	ldr	r0, [pc, #556]	; (8013b50 <tcp_input+0x4a4>)
 8013924:	f007 fa64 	bl	801adf0 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 8013928:	69fb      	ldr	r3, [r7, #28]
 801392a:	7d1b      	ldrb	r3, [r3, #20]
 801392c:	2b01      	cmp	r3, #1
 801392e:	d105      	bne.n	801393c <tcp_input+0x290>
 8013930:	4b85      	ldr	r3, [pc, #532]	; (8013b48 <tcp_input+0x49c>)
 8013932:	22e4      	movs	r2, #228	; 0xe4
 8013934:	4988      	ldr	r1, [pc, #544]	; (8013b58 <tcp_input+0x4ac>)
 8013936:	4886      	ldr	r0, [pc, #536]	; (8013b50 <tcp_input+0x4a4>)
 8013938:	f007 fa5a 	bl	801adf0 <iprintf>
    if (pcb->remote_port == tcphdr->src &&
 801393c:	69fb      	ldr	r3, [r7, #28]
 801393e:	8b1a      	ldrh	r2, [r3, #24]
 8013940:	4b86      	ldr	r3, [pc, #536]	; (8013b5c <tcp_input+0x4b0>)
 8013942:	681b      	ldr	r3, [r3, #0]
 8013944:	881b      	ldrh	r3, [r3, #0]
 8013946:	b29b      	uxth	r3, r3
 8013948:	429a      	cmp	r2, r3
 801394a:	d138      	bne.n	80139be <tcp_input+0x312>
        pcb->local_port == tcphdr->dest &&
 801394c:	69fb      	ldr	r3, [r7, #28]
 801394e:	8ada      	ldrh	r2, [r3, #22]
 8013950:	4b82      	ldr	r3, [pc, #520]	; (8013b5c <tcp_input+0x4b0>)
 8013952:	681b      	ldr	r3, [r3, #0]
 8013954:	885b      	ldrh	r3, [r3, #2]
 8013956:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 8013958:	429a      	cmp	r2, r3
 801395a:	d130      	bne.n	80139be <tcp_input+0x312>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 801395c:	69fb      	ldr	r3, [r7, #28]
 801395e:	685a      	ldr	r2, [r3, #4]
 8013960:	4b7f      	ldr	r3, [pc, #508]	; (8013b60 <tcp_input+0x4b4>)
 8013962:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 8013964:	429a      	cmp	r2, r3
 8013966:	d12a      	bne.n	80139be <tcp_input+0x312>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8013968:	69fb      	ldr	r3, [r7, #28]
 801396a:	681a      	ldr	r2, [r3, #0]
 801396c:	4b7c      	ldr	r3, [pc, #496]	; (8013b60 <tcp_input+0x4b4>)
 801396e:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8013970:	429a      	cmp	r2, r3
 8013972:	d124      	bne.n	80139be <tcp_input+0x312>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 8013974:	69fb      	ldr	r3, [r7, #28]
 8013976:	68db      	ldr	r3, [r3, #12]
 8013978:	69fa      	ldr	r2, [r7, #28]
 801397a:	429a      	cmp	r2, r3
 801397c:	d105      	bne.n	801398a <tcp_input+0x2de>
 801397e:	4b72      	ldr	r3, [pc, #456]	; (8013b48 <tcp_input+0x49c>)
 8013980:	22ec      	movs	r2, #236	; 0xec
 8013982:	4978      	ldr	r1, [pc, #480]	; (8013b64 <tcp_input+0x4b8>)
 8013984:	4872      	ldr	r0, [pc, #456]	; (8013b50 <tcp_input+0x4a4>)
 8013986:	f007 fa33 	bl	801adf0 <iprintf>
      if (prev != NULL) {
 801398a:	69bb      	ldr	r3, [r7, #24]
 801398c:	2b00      	cmp	r3, #0
 801398e:	d00a      	beq.n	80139a6 <tcp_input+0x2fa>
        prev->next = pcb->next;
 8013990:	69fb      	ldr	r3, [r7, #28]
 8013992:	68da      	ldr	r2, [r3, #12]
 8013994:	69bb      	ldr	r3, [r7, #24]
 8013996:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 8013998:	4b73      	ldr	r3, [pc, #460]	; (8013b68 <tcp_input+0x4bc>)
 801399a:	681a      	ldr	r2, [r3, #0]
 801399c:	69fb      	ldr	r3, [r7, #28]
 801399e:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 80139a0:	4a71      	ldr	r2, [pc, #452]	; (8013b68 <tcp_input+0x4bc>)
 80139a2:	69fb      	ldr	r3, [r7, #28]
 80139a4:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 80139a6:	69fb      	ldr	r3, [r7, #28]
 80139a8:	68db      	ldr	r3, [r3, #12]
 80139aa:	69fa      	ldr	r2, [r7, #28]
 80139ac:	429a      	cmp	r2, r3
 80139ae:	d10f      	bne.n	80139d0 <tcp_input+0x324>
 80139b0:	4b65      	ldr	r3, [pc, #404]	; (8013b48 <tcp_input+0x49c>)
 80139b2:	22f4      	movs	r2, #244	; 0xf4
 80139b4:	496d      	ldr	r1, [pc, #436]	; (8013b6c <tcp_input+0x4c0>)
 80139b6:	4866      	ldr	r0, [pc, #408]	; (8013b50 <tcp_input+0x4a4>)
 80139b8:	f007 fa1a 	bl	801adf0 <iprintf>
      break;
 80139bc:	e008      	b.n	80139d0 <tcp_input+0x324>
    }
    prev = pcb;
 80139be:	69fb      	ldr	r3, [r7, #28]
 80139c0:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80139c2:	69fb      	ldr	r3, [r7, #28]
 80139c4:	68db      	ldr	r3, [r3, #12]
 80139c6:	61fb      	str	r3, [r7, #28]
 80139c8:	69fb      	ldr	r3, [r7, #28]
 80139ca:	2b00      	cmp	r3, #0
 80139cc:	d198      	bne.n	8013900 <tcp_input+0x254>
 80139ce:	e000      	b.n	80139d2 <tcp_input+0x326>
      break;
 80139d0:	bf00      	nop
  }

  if (pcb == NULL) {
 80139d2:	69fb      	ldr	r3, [r7, #28]
 80139d4:	2b00      	cmp	r3, #0
 80139d6:	d173      	bne.n	8013ac0 <tcp_input+0x414>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 80139d8:	4b65      	ldr	r3, [pc, #404]	; (8013b70 <tcp_input+0x4c4>)
 80139da:	681b      	ldr	r3, [r3, #0]
 80139dc:	61fb      	str	r3, [r7, #28]
 80139de:	e02f      	b.n	8013a40 <tcp_input+0x394>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 80139e0:	69fb      	ldr	r3, [r7, #28]
 80139e2:	7d1b      	ldrb	r3, [r3, #20]
 80139e4:	2b0a      	cmp	r3, #10
 80139e6:	d005      	beq.n	80139f4 <tcp_input+0x348>
 80139e8:	4b57      	ldr	r3, [pc, #348]	; (8013b48 <tcp_input+0x49c>)
 80139ea:	22fe      	movs	r2, #254	; 0xfe
 80139ec:	4961      	ldr	r1, [pc, #388]	; (8013b74 <tcp_input+0x4c8>)
 80139ee:	4858      	ldr	r0, [pc, #352]	; (8013b50 <tcp_input+0x4a4>)
 80139f0:	f007 f9fe 	bl	801adf0 <iprintf>
      if (pcb->remote_port == tcphdr->src &&
 80139f4:	69fb      	ldr	r3, [r7, #28]
 80139f6:	8b1a      	ldrh	r2, [r3, #24]
 80139f8:	4b58      	ldr	r3, [pc, #352]	; (8013b5c <tcp_input+0x4b0>)
 80139fa:	681b      	ldr	r3, [r3, #0]
 80139fc:	881b      	ldrh	r3, [r3, #0]
 80139fe:	b29b      	uxth	r3, r3
 8013a00:	429a      	cmp	r2, r3
 8013a02:	d11a      	bne.n	8013a3a <tcp_input+0x38e>
          pcb->local_port == tcphdr->dest &&
 8013a04:	69fb      	ldr	r3, [r7, #28]
 8013a06:	8ada      	ldrh	r2, [r3, #22]
 8013a08:	4b54      	ldr	r3, [pc, #336]	; (8013b5c <tcp_input+0x4b0>)
 8013a0a:	681b      	ldr	r3, [r3, #0]
 8013a0c:	885b      	ldrh	r3, [r3, #2]
 8013a0e:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 8013a10:	429a      	cmp	r2, r3
 8013a12:	d112      	bne.n	8013a3a <tcp_input+0x38e>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8013a14:	69fb      	ldr	r3, [r7, #28]
 8013a16:	685a      	ldr	r2, [r3, #4]
 8013a18:	4b51      	ldr	r3, [pc, #324]	; (8013b60 <tcp_input+0x4b4>)
 8013a1a:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 8013a1c:	429a      	cmp	r2, r3
 8013a1e:	d10c      	bne.n	8013a3a <tcp_input+0x38e>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8013a20:	69fb      	ldr	r3, [r7, #28]
 8013a22:	681a      	ldr	r2, [r3, #0]
 8013a24:	4b4e      	ldr	r3, [pc, #312]	; (8013b60 <tcp_input+0x4b4>)
 8013a26:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8013a28:	429a      	cmp	r2, r3
 8013a2a:	d106      	bne.n	8013a3a <tcp_input+0x38e>
        /* We don't really care enough to move this PCB to the front
           of the list since we are not very likely to receive that
           many segments for connections in TIME-WAIT. */
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: packed for TIME_WAITing connection.\n"));
        tcp_timewait_input(pcb);
 8013a2c:	69f8      	ldr	r0, [r7, #28]
 8013a2e:	f000 fb15 	bl	801405c <tcp_timewait_input>
        pbuf_free(p);
 8013a32:	6878      	ldr	r0, [r7, #4]
 8013a34:	f7fd ff70 	bl	8011918 <pbuf_free>
        return;
 8013a38:	e1da      	b.n	8013df0 <tcp_input+0x744>
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8013a3a:	69fb      	ldr	r3, [r7, #28]
 8013a3c:	68db      	ldr	r3, [r3, #12]
 8013a3e:	61fb      	str	r3, [r7, #28]
 8013a40:	69fb      	ldr	r3, [r7, #28]
 8013a42:	2b00      	cmp	r3, #0
 8013a44:	d1cc      	bne.n	80139e0 <tcp_input+0x334>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 8013a46:	2300      	movs	r3, #0
 8013a48:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8013a4a:	4b4b      	ldr	r3, [pc, #300]	; (8013b78 <tcp_input+0x4cc>)
 8013a4c:	681b      	ldr	r3, [r3, #0]
 8013a4e:	617b      	str	r3, [r7, #20]
 8013a50:	e019      	b.n	8013a86 <tcp_input+0x3da>
      if (lpcb->local_port == tcphdr->dest) {
 8013a52:	697b      	ldr	r3, [r7, #20]
 8013a54:	8ada      	ldrh	r2, [r3, #22]
 8013a56:	4b41      	ldr	r3, [pc, #260]	; (8013b5c <tcp_input+0x4b0>)
 8013a58:	681b      	ldr	r3, [r3, #0]
 8013a5a:	885b      	ldrh	r3, [r3, #2]
 8013a5c:	b29b      	uxth	r3, r3
 8013a5e:	429a      	cmp	r2, r3
 8013a60:	d10c      	bne.n	8013a7c <tcp_input+0x3d0>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 8013a62:	697b      	ldr	r3, [r7, #20]
 8013a64:	681a      	ldr	r2, [r3, #0]
 8013a66:	4b3e      	ldr	r3, [pc, #248]	; (8013b60 <tcp_input+0x4b4>)
 8013a68:	695b      	ldr	r3, [r3, #20]
 8013a6a:	429a      	cmp	r2, r3
 8013a6c:	d00f      	beq.n	8013a8e <tcp_input+0x3e2>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 8013a6e:	697b      	ldr	r3, [r7, #20]
 8013a70:	2b00      	cmp	r3, #0
 8013a72:	d00d      	beq.n	8013a90 <tcp_input+0x3e4>
 8013a74:	697b      	ldr	r3, [r7, #20]
 8013a76:	681b      	ldr	r3, [r3, #0]
 8013a78:	2b00      	cmp	r3, #0
 8013a7a:	d009      	beq.n	8013a90 <tcp_input+0x3e4>
            break;
 #endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 8013a7c:	697b      	ldr	r3, [r7, #20]
 8013a7e:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8013a80:	697b      	ldr	r3, [r7, #20]
 8013a82:	68db      	ldr	r3, [r3, #12]
 8013a84:	617b      	str	r3, [r7, #20]
 8013a86:	697b      	ldr	r3, [r7, #20]
 8013a88:	2b00      	cmp	r3, #0
 8013a8a:	d1e2      	bne.n	8013a52 <tcp_input+0x3a6>
 8013a8c:	e000      	b.n	8013a90 <tcp_input+0x3e4>
            break;
 8013a8e:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 8013a90:	697b      	ldr	r3, [r7, #20]
 8013a92:	2b00      	cmp	r3, #0
 8013a94:	d014      	beq.n	8013ac0 <tcp_input+0x414>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 8013a96:	69bb      	ldr	r3, [r7, #24]
 8013a98:	2b00      	cmp	r3, #0
 8013a9a:	d00a      	beq.n	8013ab2 <tcp_input+0x406>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 8013a9c:	697b      	ldr	r3, [r7, #20]
 8013a9e:	68da      	ldr	r2, [r3, #12]
 8013aa0:	69bb      	ldr	r3, [r7, #24]
 8013aa2:	60da      	str	r2, [r3, #12]
              /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 8013aa4:	4b34      	ldr	r3, [pc, #208]	; (8013b78 <tcp_input+0x4cc>)
 8013aa6:	681a      	ldr	r2, [r3, #0]
 8013aa8:	697b      	ldr	r3, [r7, #20]
 8013aaa:	60da      	str	r2, [r3, #12]
              /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 8013aac:	4a32      	ldr	r2, [pc, #200]	; (8013b78 <tcp_input+0x4cc>)
 8013aae:	697b      	ldr	r3, [r7, #20]
 8013ab0:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }

      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: packed for LISTENing connection.\n"));
      tcp_listen_input(lpcb);
 8013ab2:	6978      	ldr	r0, [r7, #20]
 8013ab4:	f000 f9f0 	bl	8013e98 <tcp_listen_input>
      pbuf_free(p);
 8013ab8:	6878      	ldr	r0, [r7, #4]
 8013aba:	f7fd ff2d 	bl	8011918 <pbuf_free>
      return;
 8013abe:	e197      	b.n	8013df0 <tcp_input+0x744>
  tcp_debug_print_flags(TCPH_FLAGS(tcphdr));
  LWIP_DEBUGF(TCP_INPUT_DEBUG, ("-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n"));
#endif /* TCP_INPUT_DEBUG */


  if (pcb != NULL) {
 8013ac0:	69fb      	ldr	r3, [r7, #28]
 8013ac2:	2b00      	cmp	r3, #0
 8013ac4:	f000 8164 	beq.w	8013d90 <tcp_input+0x6e4>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 8013ac8:	4b2c      	ldr	r3, [pc, #176]	; (8013b7c <tcp_input+0x4d0>)
 8013aca:	2200      	movs	r2, #0
 8013acc:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 8013ace:	687b      	ldr	r3, [r7, #4]
 8013ad0:	891a      	ldrh	r2, [r3, #8]
 8013ad2:	4b2a      	ldr	r3, [pc, #168]	; (8013b7c <tcp_input+0x4d0>)
 8013ad4:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 8013ad6:	4a29      	ldr	r2, [pc, #164]	; (8013b7c <tcp_input+0x4d0>)
 8013ad8:	687b      	ldr	r3, [r7, #4]
 8013ada:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 8013adc:	4b1f      	ldr	r3, [pc, #124]	; (8013b5c <tcp_input+0x4b0>)
 8013ade:	681b      	ldr	r3, [r3, #0]
 8013ae0:	4a26      	ldr	r2, [pc, #152]	; (8013b7c <tcp_input+0x4d0>)
 8013ae2:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 8013ae4:	4b26      	ldr	r3, [pc, #152]	; (8013b80 <tcp_input+0x4d4>)
 8013ae6:	2200      	movs	r2, #0
 8013ae8:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 8013aea:	4b26      	ldr	r3, [pc, #152]	; (8013b84 <tcp_input+0x4d8>)
 8013aec:	2200      	movs	r2, #0
 8013aee:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 8013af0:	4b25      	ldr	r3, [pc, #148]	; (8013b88 <tcp_input+0x4dc>)
 8013af2:	2200      	movs	r2, #0
 8013af4:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 8013af6:	4b25      	ldr	r3, [pc, #148]	; (8013b8c <tcp_input+0x4e0>)
 8013af8:	781b      	ldrb	r3, [r3, #0]
 8013afa:	f003 0308 	and.w	r3, r3, #8
 8013afe:	2b00      	cmp	r3, #0
 8013b00:	d006      	beq.n	8013b10 <tcp_input+0x464>
      p->flags |= PBUF_FLAG_PUSH;
 8013b02:	687b      	ldr	r3, [r7, #4]
 8013b04:	7b5b      	ldrb	r3, [r3, #13]
 8013b06:	f043 0301 	orr.w	r3, r3, #1
 8013b0a:	b2da      	uxtb	r2, r3
 8013b0c:	687b      	ldr	r3, [r7, #4]
 8013b0e:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 8013b10:	69fb      	ldr	r3, [r7, #28]
 8013b12:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8013b14:	2b00      	cmp	r3, #0
 8013b16:	d03d      	beq.n	8013b94 <tcp_input+0x4e8>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8013b18:	69f8      	ldr	r0, [r7, #28]
 8013b1a:	f7ff f999 	bl	8012e50 <tcp_process_refused_data>
 8013b1e:	4603      	mov	r3, r0
 8013b20:	f113 0f0d 	cmn.w	r3, #13
 8013b24:	d007      	beq.n	8013b36 <tcp_input+0x48a>
        ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8013b26:	69fb      	ldr	r3, [r7, #28]
 8013b28:	6f5b      	ldr	r3, [r3, #116]	; 0x74
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8013b2a:	2b00      	cmp	r3, #0
 8013b2c:	d032      	beq.n	8013b94 <tcp_input+0x4e8>
        ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8013b2e:	4b18      	ldr	r3, [pc, #96]	; (8013b90 <tcp_input+0x4e4>)
 8013b30:	881b      	ldrh	r3, [r3, #0]
 8013b32:	2b00      	cmp	r3, #0
 8013b34:	d02e      	beq.n	8013b94 <tcp_input+0x4e8>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 8013b36:	69fb      	ldr	r3, [r7, #28]
 8013b38:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8013b3a:	2b00      	cmp	r3, #0
 8013b3c:	f040 8108 	bne.w	8013d50 <tcp_input+0x6a4>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 8013b40:	69f8      	ldr	r0, [r7, #28]
 8013b42:	f002 fe3d 	bl	80167c0 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 8013b46:	e103      	b.n	8013d50 <tcp_input+0x6a4>
 8013b48:	0801d710 	.word	0x0801d710
 8013b4c:	0801d7a8 	.word	0x0801d7a8
 8013b50:	0801d754 	.word	0x0801d754
 8013b54:	0801d7d0 	.word	0x0801d7d0
 8013b58:	0801d7fc 	.word	0x0801d7fc
 8013b5c:	20004218 	.word	0x20004218
 8013b60:	20007638 	.word	0x20007638
 8013b64:	0801d824 	.word	0x0801d824
 8013b68:	2000ab40 	.word	0x2000ab40
 8013b6c:	0801d850 	.word	0x0801d850
 8013b70:	2000ab50 	.word	0x2000ab50
 8013b74:	0801d87c 	.word	0x0801d87c
 8013b78:	2000ab48 	.word	0x2000ab48
 8013b7c:	20004208 	.word	0x20004208
 8013b80:	20004238 	.word	0x20004238
 8013b84:	20004235 	.word	0x20004235
 8013b88:	20004230 	.word	0x20004230
 8013b8c:	20004234 	.word	0x20004234
 8013b90:	20004232 	.word	0x20004232
      }
    }
    tcp_input_pcb = pcb;
 8013b94:	4a98      	ldr	r2, [pc, #608]	; (8013df8 <tcp_input+0x74c>)
 8013b96:	69fb      	ldr	r3, [r7, #28]
 8013b98:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 8013b9a:	69f8      	ldr	r0, [r7, #28]
 8013b9c:	f000 fac6 	bl	801412c <tcp_process>
 8013ba0:	4603      	mov	r3, r0
 8013ba2:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 8013ba4:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8013ba8:	f113 0f0d 	cmn.w	r3, #13
 8013bac:	f000 80d2 	beq.w	8013d54 <tcp_input+0x6a8>
      if (recv_flags & TF_RESET) {
 8013bb0:	4b92      	ldr	r3, [pc, #584]	; (8013dfc <tcp_input+0x750>)
 8013bb2:	781b      	ldrb	r3, [r3, #0]
 8013bb4:	f003 0308 	and.w	r3, r3, #8
 8013bb8:	2b00      	cmp	r3, #0
 8013bba:	d016      	beq.n	8013bea <tcp_input+0x53e>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 8013bbc:	69fb      	ldr	r3, [r7, #28]
 8013bbe:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8013bc2:	2b00      	cmp	r3, #0
 8013bc4:	d008      	beq.n	8013bd8 <tcp_input+0x52c>
 8013bc6:	69fb      	ldr	r3, [r7, #28]
 8013bc8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8013bcc:	69fa      	ldr	r2, [r7, #28]
 8013bce:	6912      	ldr	r2, [r2, #16]
 8013bd0:	f06f 010d 	mvn.w	r1, #13
 8013bd4:	4610      	mov	r0, r2
 8013bd6:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8013bd8:	69f9      	ldr	r1, [r7, #28]
 8013bda:	4889      	ldr	r0, [pc, #548]	; (8013e00 <tcp_input+0x754>)
 8013bdc:	f7ff fc4c 	bl	8013478 <tcp_pcb_remove>
        memp_free(MEMP_TCP_PCB, pcb);
 8013be0:	69f9      	ldr	r1, [r7, #28]
 8013be2:	2001      	movs	r0, #1
 8013be4:	f7fd f93e 	bl	8010e64 <memp_free>
 8013be8:	e0bf      	b.n	8013d6a <tcp_input+0x6be>
      } else {
        err = ERR_OK;
 8013bea:	2300      	movs	r3, #0
 8013bec:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 8013bee:	4b85      	ldr	r3, [pc, #532]	; (8013e04 <tcp_input+0x758>)
 8013bf0:	881b      	ldrh	r3, [r3, #0]
 8013bf2:	2b00      	cmp	r3, #0
 8013bf4:	d01b      	beq.n	8013c2e <tcp_input+0x582>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 8013bf6:	4b83      	ldr	r3, [pc, #524]	; (8013e04 <tcp_input+0x758>)
 8013bf8:	881b      	ldrh	r3, [r3, #0]
 8013bfa:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 8013bfc:	69fb      	ldr	r3, [r7, #28]
 8013bfe:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8013c00:	2b00      	cmp	r3, #0
 8013c02:	d009      	beq.n	8013c18 <tcp_input+0x56c>
 8013c04:	69fb      	ldr	r3, [r7, #28]
 8013c06:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8013c08:	69fa      	ldr	r2, [r7, #28]
 8013c0a:	6910      	ldr	r0, [r2, #16]
 8013c0c:	89fa      	ldrh	r2, [r7, #14]
 8013c0e:	69f9      	ldr	r1, [r7, #28]
 8013c10:	4798      	blx	r3
 8013c12:	4603      	mov	r3, r0
 8013c14:	74fb      	strb	r3, [r7, #19]
 8013c16:	e001      	b.n	8013c1c <tcp_input+0x570>
 8013c18:	2300      	movs	r3, #0
 8013c1a:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 8013c1c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8013c20:	f113 0f0d 	cmn.w	r3, #13
 8013c24:	f000 8098 	beq.w	8013d58 <tcp_input+0x6ac>
              goto aborted;
            }
          }
          recv_acked = 0;
 8013c28:	4b76      	ldr	r3, [pc, #472]	; (8013e04 <tcp_input+0x758>)
 8013c2a:	2200      	movs	r2, #0
 8013c2c:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 8013c2e:	69f8      	ldr	r0, [r7, #28]
 8013c30:	f000 f900 	bl	8013e34 <tcp_input_delayed_close>
 8013c34:	4603      	mov	r3, r0
 8013c36:	2b00      	cmp	r3, #0
 8013c38:	f040 8090 	bne.w	8013d5c <tcp_input+0x6b0>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 8013c3c:	4b72      	ldr	r3, [pc, #456]	; (8013e08 <tcp_input+0x75c>)
 8013c3e:	681b      	ldr	r3, [r3, #0]
 8013c40:	2b00      	cmp	r3, #0
 8013c42:	d041      	beq.n	8013cc8 <tcp_input+0x61c>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 8013c44:	69fb      	ldr	r3, [r7, #28]
 8013c46:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8013c48:	2b00      	cmp	r3, #0
 8013c4a:	d006      	beq.n	8013c5a <tcp_input+0x5ae>
 8013c4c:	4b6f      	ldr	r3, [pc, #444]	; (8013e0c <tcp_input+0x760>)
 8013c4e:	f44f 72d2 	mov.w	r2, #420	; 0x1a4
 8013c52:	496f      	ldr	r1, [pc, #444]	; (8013e10 <tcp_input+0x764>)
 8013c54:	486f      	ldr	r0, [pc, #444]	; (8013e14 <tcp_input+0x768>)
 8013c56:	f007 f8cb 	bl	801adf0 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 8013c5a:	69fb      	ldr	r3, [r7, #28]
 8013c5c:	7e9b      	ldrb	r3, [r3, #26]
 8013c5e:	f003 0310 	and.w	r3, r3, #16
 8013c62:	2b00      	cmp	r3, #0
 8013c64:	d008      	beq.n	8013c78 <tcp_input+0x5cc>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 8013c66:	4b68      	ldr	r3, [pc, #416]	; (8013e08 <tcp_input+0x75c>)
 8013c68:	681b      	ldr	r3, [r3, #0]
 8013c6a:	4618      	mov	r0, r3
 8013c6c:	f7fd fe54 	bl	8011918 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 8013c70:	69f8      	ldr	r0, [r7, #28]
 8013c72:	f7fe fb97 	bl	80123a4 <tcp_abort>
            goto aborted;
 8013c76:	e078      	b.n	8013d6a <tcp_input+0x6be>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 8013c78:	69fb      	ldr	r3, [r7, #28]
 8013c7a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8013c7e:	2b00      	cmp	r3, #0
 8013c80:	d00c      	beq.n	8013c9c <tcp_input+0x5f0>
 8013c82:	69fb      	ldr	r3, [r7, #28]
 8013c84:	f8d3 4080 	ldr.w	r4, [r3, #128]	; 0x80
 8013c88:	69fb      	ldr	r3, [r7, #28]
 8013c8a:	6918      	ldr	r0, [r3, #16]
 8013c8c:	4b5e      	ldr	r3, [pc, #376]	; (8013e08 <tcp_input+0x75c>)
 8013c8e:	681a      	ldr	r2, [r3, #0]
 8013c90:	2300      	movs	r3, #0
 8013c92:	69f9      	ldr	r1, [r7, #28]
 8013c94:	47a0      	blx	r4
 8013c96:	4603      	mov	r3, r0
 8013c98:	74fb      	strb	r3, [r7, #19]
 8013c9a:	e008      	b.n	8013cae <tcp_input+0x602>
 8013c9c:	4b5a      	ldr	r3, [pc, #360]	; (8013e08 <tcp_input+0x75c>)
 8013c9e:	681a      	ldr	r2, [r3, #0]
 8013ca0:	2300      	movs	r3, #0
 8013ca2:	69f9      	ldr	r1, [r7, #28]
 8013ca4:	2000      	movs	r0, #0
 8013ca6:	f7ff f984 	bl	8012fb2 <tcp_recv_null>
 8013caa:	4603      	mov	r3, r0
 8013cac:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 8013cae:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8013cb2:	f113 0f0d 	cmn.w	r3, #13
 8013cb6:	d053      	beq.n	8013d60 <tcp_input+0x6b4>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 8013cb8:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8013cbc:	2b00      	cmp	r3, #0
 8013cbe:	d003      	beq.n	8013cc8 <tcp_input+0x61c>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 8013cc0:	4b51      	ldr	r3, [pc, #324]	; (8013e08 <tcp_input+0x75c>)
 8013cc2:	681a      	ldr	r2, [r3, #0]
 8013cc4:	69fb      	ldr	r3, [r7, #28]
 8013cc6:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 8013cc8:	4b4c      	ldr	r3, [pc, #304]	; (8013dfc <tcp_input+0x750>)
 8013cca:	781b      	ldrb	r3, [r3, #0]
 8013ccc:	f003 0320 	and.w	r3, r3, #32
 8013cd0:	2b00      	cmp	r3, #0
 8013cd2:	d030      	beq.n	8013d36 <tcp_input+0x68a>
          if (pcb->refused_data != NULL) {
 8013cd4:	69fb      	ldr	r3, [r7, #28]
 8013cd6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8013cd8:	2b00      	cmp	r3, #0
 8013cda:	d009      	beq.n	8013cf0 <tcp_input+0x644>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 8013cdc:	69fb      	ldr	r3, [r7, #28]
 8013cde:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8013ce0:	7b5a      	ldrb	r2, [r3, #13]
 8013ce2:	69fb      	ldr	r3, [r7, #28]
 8013ce4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8013ce6:	f042 0220 	orr.w	r2, r2, #32
 8013cea:	b2d2      	uxtb	r2, r2
 8013cec:	735a      	strb	r2, [r3, #13]
 8013cee:	e022      	b.n	8013d36 <tcp_input+0x68a>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8013cf0:	69fb      	ldr	r3, [r7, #28]
 8013cf2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8013cf4:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8013cf8:	d005      	beq.n	8013d06 <tcp_input+0x65a>
              pcb->rcv_wnd++;
 8013cfa:	69fb      	ldr	r3, [r7, #28]
 8013cfc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8013cfe:	3301      	adds	r3, #1
 8013d00:	b29a      	uxth	r2, r3
 8013d02:	69fb      	ldr	r3, [r7, #28]
 8013d04:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 8013d06:	69fb      	ldr	r3, [r7, #28]
 8013d08:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8013d0c:	2b00      	cmp	r3, #0
 8013d0e:	d00b      	beq.n	8013d28 <tcp_input+0x67c>
 8013d10:	69fb      	ldr	r3, [r7, #28]
 8013d12:	f8d3 4080 	ldr.w	r4, [r3, #128]	; 0x80
 8013d16:	69fb      	ldr	r3, [r7, #28]
 8013d18:	6918      	ldr	r0, [r3, #16]
 8013d1a:	2300      	movs	r3, #0
 8013d1c:	2200      	movs	r2, #0
 8013d1e:	69f9      	ldr	r1, [r7, #28]
 8013d20:	47a0      	blx	r4
 8013d22:	4603      	mov	r3, r0
 8013d24:	74fb      	strb	r3, [r7, #19]
 8013d26:	e001      	b.n	8013d2c <tcp_input+0x680>
 8013d28:	2300      	movs	r3, #0
 8013d2a:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 8013d2c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8013d30:	f113 0f0d 	cmn.w	r3, #13
 8013d34:	d016      	beq.n	8013d64 <tcp_input+0x6b8>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 8013d36:	4b30      	ldr	r3, [pc, #192]	; (8013df8 <tcp_input+0x74c>)
 8013d38:	2200      	movs	r2, #0
 8013d3a:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 8013d3c:	69f8      	ldr	r0, [r7, #28]
 8013d3e:	f000 f879 	bl	8013e34 <tcp_input_delayed_close>
 8013d42:	4603      	mov	r3, r0
 8013d44:	2b00      	cmp	r3, #0
 8013d46:	d10f      	bne.n	8013d68 <tcp_input+0x6bc>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 8013d48:	69f8      	ldr	r0, [r7, #28]
 8013d4a:	f002 fd95 	bl	8016878 <tcp_output>
 8013d4e:	e00c      	b.n	8013d6a <tcp_input+0x6be>
        goto aborted;
 8013d50:	bf00      	nop
 8013d52:	e00a      	b.n	8013d6a <tcp_input+0x6be>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 8013d54:	bf00      	nop
 8013d56:	e008      	b.n	8013d6a <tcp_input+0x6be>
              goto aborted;
 8013d58:	bf00      	nop
 8013d5a:	e006      	b.n	8013d6a <tcp_input+0x6be>
          goto aborted;
 8013d5c:	bf00      	nop
 8013d5e:	e004      	b.n	8013d6a <tcp_input+0x6be>
            goto aborted;
 8013d60:	bf00      	nop
 8013d62:	e002      	b.n	8013d6a <tcp_input+0x6be>
              goto aborted;
 8013d64:	bf00      	nop
 8013d66:	e000      	b.n	8013d6a <tcp_input+0x6be>
          goto aborted;
 8013d68:	bf00      	nop
    tcp_input_pcb = NULL;
 8013d6a:	4b23      	ldr	r3, [pc, #140]	; (8013df8 <tcp_input+0x74c>)
 8013d6c:	2200      	movs	r2, #0
 8013d6e:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 8013d70:	4b25      	ldr	r3, [pc, #148]	; (8013e08 <tcp_input+0x75c>)
 8013d72:	2200      	movs	r2, #0
 8013d74:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL)
 8013d76:	4b28      	ldr	r3, [pc, #160]	; (8013e18 <tcp_input+0x76c>)
 8013d78:	685b      	ldr	r3, [r3, #4]
 8013d7a:	2b00      	cmp	r3, #0
 8013d7c:	d037      	beq.n	8013dee <tcp_input+0x742>
    {
      pbuf_free(inseg.p);
 8013d7e:	4b26      	ldr	r3, [pc, #152]	; (8013e18 <tcp_input+0x76c>)
 8013d80:	685b      	ldr	r3, [r3, #4]
 8013d82:	4618      	mov	r0, r3
 8013d84:	f7fd fdc8 	bl	8011918 <pbuf_free>
      inseg.p = NULL;
 8013d88:	4b23      	ldr	r3, [pc, #140]	; (8013e18 <tcp_input+0x76c>)
 8013d8a:	2200      	movs	r2, #0
 8013d8c:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 8013d8e:	e02e      	b.n	8013dee <tcp_input+0x742>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 8013d90:	4b22      	ldr	r3, [pc, #136]	; (8013e1c <tcp_input+0x770>)
 8013d92:	681b      	ldr	r3, [r3, #0]
 8013d94:	899b      	ldrh	r3, [r3, #12]
 8013d96:	b29b      	uxth	r3, r3
 8013d98:	4618      	mov	r0, r3
 8013d9a:	f7fc fc23 	bl	80105e4 <lwip_htons>
 8013d9e:	4603      	mov	r3, r0
 8013da0:	f003 0304 	and.w	r3, r3, #4
 8013da4:	2b00      	cmp	r3, #0
 8013da6:	d115      	bne.n	8013dd4 <tcp_input+0x728>
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 8013da8:	4b1d      	ldr	r3, [pc, #116]	; (8013e20 <tcp_input+0x774>)
 8013daa:	6818      	ldr	r0, [r3, #0]
 8013dac:	4b1d      	ldr	r3, [pc, #116]	; (8013e24 <tcp_input+0x778>)
 8013dae:	881b      	ldrh	r3, [r3, #0]
 8013db0:	461a      	mov	r2, r3
 8013db2:	4b1d      	ldr	r3, [pc, #116]	; (8013e28 <tcp_input+0x77c>)
 8013db4:	681b      	ldr	r3, [r3, #0]
 8013db6:	18d1      	adds	r1, r2, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8013db8:	4b18      	ldr	r3, [pc, #96]	; (8013e1c <tcp_input+0x770>)
 8013dba:	681b      	ldr	r3, [r3, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 8013dbc:	885b      	ldrh	r3, [r3, #2]
 8013dbe:	b29b      	uxth	r3, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8013dc0:	4a16      	ldr	r2, [pc, #88]	; (8013e1c <tcp_input+0x770>)
 8013dc2:	6812      	ldr	r2, [r2, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 8013dc4:	8812      	ldrh	r2, [r2, #0]
 8013dc6:	b292      	uxth	r2, r2
 8013dc8:	9201      	str	r2, [sp, #4]
 8013dca:	9300      	str	r3, [sp, #0]
 8013dcc:	4b17      	ldr	r3, [pc, #92]	; (8013e2c <tcp_input+0x780>)
 8013dce:	4a18      	ldr	r2, [pc, #96]	; (8013e30 <tcp_input+0x784>)
 8013dd0:	f002 ffdc 	bl	8016d8c <tcp_rst>
    pbuf_free(p);
 8013dd4:	6878      	ldr	r0, [r7, #4]
 8013dd6:	f7fd fd9f 	bl	8011918 <pbuf_free>
  return;
 8013dda:	e008      	b.n	8013dee <tcp_input+0x742>
    goto dropped;
 8013ddc:	bf00      	nop
 8013dde:	e002      	b.n	8013de6 <tcp_input+0x73a>
dropped:
 8013de0:	bf00      	nop
 8013de2:	e000      	b.n	8013de6 <tcp_input+0x73a>
      goto dropped;
 8013de4:	bf00      	nop
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 8013de6:	6878      	ldr	r0, [r7, #4]
 8013de8:	f7fd fd96 	bl	8011918 <pbuf_free>
 8013dec:	e000      	b.n	8013df0 <tcp_input+0x744>
  return;
 8013dee:	bf00      	nop
}
 8013df0:	3724      	adds	r7, #36	; 0x24
 8013df2:	46bd      	mov	sp, r7
 8013df4:	bd90      	pop	{r4, r7, pc}
 8013df6:	bf00      	nop
 8013df8:	2000ab54 	.word	0x2000ab54
 8013dfc:	20004235 	.word	0x20004235
 8013e00:	2000ab40 	.word	0x2000ab40
 8013e04:	20004230 	.word	0x20004230
 8013e08:	20004238 	.word	0x20004238
 8013e0c:	0801d710 	.word	0x0801d710
 8013e10:	0801d8ac 	.word	0x0801d8ac
 8013e14:	0801d754 	.word	0x0801d754
 8013e18:	20004208 	.word	0x20004208
 8013e1c:	20004218 	.word	0x20004218
 8013e20:	2000422c 	.word	0x2000422c
 8013e24:	20004232 	.word	0x20004232
 8013e28:	20004228 	.word	0x20004228
 8013e2c:	20007648 	.word	0x20007648
 8013e30:	2000764c 	.word	0x2000764c

08013e34 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 8013e34:	b580      	push	{r7, lr}
 8013e36:	b082      	sub	sp, #8
 8013e38:	af00      	add	r7, sp, #0
 8013e3a:	6078      	str	r0, [r7, #4]
  if (recv_flags & TF_CLOSED) {
 8013e3c:	4b14      	ldr	r3, [pc, #80]	; (8013e90 <tcp_input_delayed_close+0x5c>)
 8013e3e:	781b      	ldrb	r3, [r3, #0]
 8013e40:	f003 0310 	and.w	r3, r3, #16
 8013e44:	2b00      	cmp	r3, #0
 8013e46:	d01d      	beq.n	8013e84 <tcp_input_delayed_close+0x50>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 8013e48:	687b      	ldr	r3, [r7, #4]
 8013e4a:	7e9b      	ldrb	r3, [r3, #26]
 8013e4c:	f003 0310 	and.w	r3, r3, #16
 8013e50:	2b00      	cmp	r3, #0
 8013e52:	d10d      	bne.n	8013e70 <tcp_input_delayed_close+0x3c>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 8013e54:	687b      	ldr	r3, [r7, #4]
 8013e56:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8013e5a:	2b00      	cmp	r3, #0
 8013e5c:	d008      	beq.n	8013e70 <tcp_input_delayed_close+0x3c>
 8013e5e:	687b      	ldr	r3, [r7, #4]
 8013e60:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8013e64:	687a      	ldr	r2, [r7, #4]
 8013e66:	6912      	ldr	r2, [r2, #16]
 8013e68:	f06f 010e 	mvn.w	r1, #14
 8013e6c:	4610      	mov	r0, r2
 8013e6e:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8013e70:	6879      	ldr	r1, [r7, #4]
 8013e72:	4808      	ldr	r0, [pc, #32]	; (8013e94 <tcp_input_delayed_close+0x60>)
 8013e74:	f7ff fb00 	bl	8013478 <tcp_pcb_remove>
    memp_free(MEMP_TCP_PCB, pcb);
 8013e78:	6879      	ldr	r1, [r7, #4]
 8013e7a:	2001      	movs	r0, #1
 8013e7c:	f7fc fff2 	bl	8010e64 <memp_free>
    return 1;
 8013e80:	2301      	movs	r3, #1
 8013e82:	e000      	b.n	8013e86 <tcp_input_delayed_close+0x52>
  }
  return 0;
 8013e84:	2300      	movs	r3, #0
}
 8013e86:	4618      	mov	r0, r3
 8013e88:	3708      	adds	r7, #8
 8013e8a:	46bd      	mov	sp, r7
 8013e8c:	bd80      	pop	{r7, pc}
 8013e8e:	bf00      	nop
 8013e90:	20004235 	.word	0x20004235
 8013e94:	2000ab40 	.word	0x2000ab40

08013e98 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 8013e98:	b580      	push	{r7, lr}
 8013e9a:	b088      	sub	sp, #32
 8013e9c:	af02      	add	r7, sp, #8
 8013e9e:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 8013ea0:	4b64      	ldr	r3, [pc, #400]	; (8014034 <tcp_listen_input+0x19c>)
 8013ea2:	781b      	ldrb	r3, [r3, #0]
 8013ea4:	f003 0304 	and.w	r3, r3, #4
 8013ea8:	2b00      	cmp	r3, #0
 8013eaa:	f040 80bc 	bne.w	8014026 <tcp_listen_input+0x18e>
    return;
  }

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 8013eae:	4b61      	ldr	r3, [pc, #388]	; (8014034 <tcp_listen_input+0x19c>)
 8013eb0:	781b      	ldrb	r3, [r3, #0]
 8013eb2:	f003 0310 	and.w	r3, r3, #16
 8013eb6:	2b00      	cmp	r3, #0
 8013eb8:	d016      	beq.n	8013ee8 <tcp_listen_input+0x50>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 8013eba:	4b5f      	ldr	r3, [pc, #380]	; (8014038 <tcp_listen_input+0x1a0>)
 8013ebc:	6818      	ldr	r0, [r3, #0]
 8013ebe:	4b5f      	ldr	r3, [pc, #380]	; (801403c <tcp_listen_input+0x1a4>)
 8013ec0:	881b      	ldrh	r3, [r3, #0]
 8013ec2:	461a      	mov	r2, r3
 8013ec4:	4b5e      	ldr	r3, [pc, #376]	; (8014040 <tcp_listen_input+0x1a8>)
 8013ec6:	681b      	ldr	r3, [r3, #0]
 8013ec8:	18d1      	adds	r1, r2, r3
      ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8013eca:	4b5e      	ldr	r3, [pc, #376]	; (8014044 <tcp_listen_input+0x1ac>)
 8013ecc:	681b      	ldr	r3, [r3, #0]
    tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 8013ece:	885b      	ldrh	r3, [r3, #2]
 8013ed0:	b29b      	uxth	r3, r3
      ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8013ed2:	4a5c      	ldr	r2, [pc, #368]	; (8014044 <tcp_listen_input+0x1ac>)
 8013ed4:	6812      	ldr	r2, [r2, #0]
    tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 8013ed6:	8812      	ldrh	r2, [r2, #0]
 8013ed8:	b292      	uxth	r2, r2
 8013eda:	9201      	str	r2, [sp, #4]
 8013edc:	9300      	str	r3, [sp, #0]
 8013ede:	4b5a      	ldr	r3, [pc, #360]	; (8014048 <tcp_listen_input+0x1b0>)
 8013ee0:	4a5a      	ldr	r2, [pc, #360]	; (801404c <tcp_listen_input+0x1b4>)
 8013ee2:	f002 ff53 	bl	8016d8c <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 8013ee6:	e0a0      	b.n	801402a <tcp_listen_input+0x192>
  } else if (flags & TCP_SYN) {
 8013ee8:	4b52      	ldr	r3, [pc, #328]	; (8014034 <tcp_listen_input+0x19c>)
 8013eea:	781b      	ldrb	r3, [r3, #0]
 8013eec:	f003 0302 	and.w	r3, r3, #2
 8013ef0:	2b00      	cmp	r3, #0
 8013ef2:	f000 809a 	beq.w	801402a <tcp_listen_input+0x192>
    npcb = tcp_alloc(pcb->prio);
 8013ef6:	687b      	ldr	r3, [r7, #4]
 8013ef8:	7d5b      	ldrb	r3, [r3, #21]
 8013efa:	4618      	mov	r0, r3
 8013efc:	f7ff f938 	bl	8013170 <tcp_alloc>
 8013f00:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 8013f02:	697b      	ldr	r3, [r7, #20]
 8013f04:	2b00      	cmp	r3, #0
 8013f06:	d111      	bne.n	8013f2c <tcp_listen_input+0x94>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8013f08:	687b      	ldr	r3, [r7, #4]
 8013f0a:	699b      	ldr	r3, [r3, #24]
 8013f0c:	2b00      	cmp	r3, #0
 8013f0e:	d00a      	beq.n	8013f26 <tcp_listen_input+0x8e>
 8013f10:	687b      	ldr	r3, [r7, #4]
 8013f12:	699b      	ldr	r3, [r3, #24]
 8013f14:	687a      	ldr	r2, [r7, #4]
 8013f16:	6910      	ldr	r0, [r2, #16]
 8013f18:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8013f1c:	2100      	movs	r1, #0
 8013f1e:	4798      	blx	r3
 8013f20:	4603      	mov	r3, r0
 8013f22:	73bb      	strb	r3, [r7, #14]
      return;
 8013f24:	e082      	b.n	801402c <tcp_listen_input+0x194>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8013f26:	23f0      	movs	r3, #240	; 0xf0
 8013f28:	73bb      	strb	r3, [r7, #14]
      return;
 8013f2a:	e07f      	b.n	801402c <tcp_listen_input+0x194>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 8013f2c:	4b48      	ldr	r3, [pc, #288]	; (8014050 <tcp_listen_input+0x1b8>)
 8013f2e:	695a      	ldr	r2, [r3, #20]
 8013f30:	697b      	ldr	r3, [r7, #20]
 8013f32:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 8013f34:	4b46      	ldr	r3, [pc, #280]	; (8014050 <tcp_listen_input+0x1b8>)
 8013f36:	691a      	ldr	r2, [r3, #16]
 8013f38:	697b      	ldr	r3, [r7, #20]
 8013f3a:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 8013f3c:	687b      	ldr	r3, [r7, #4]
 8013f3e:	8ada      	ldrh	r2, [r3, #22]
 8013f40:	697b      	ldr	r3, [r7, #20]
 8013f42:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 8013f44:	4b3f      	ldr	r3, [pc, #252]	; (8014044 <tcp_listen_input+0x1ac>)
 8013f46:	681b      	ldr	r3, [r3, #0]
 8013f48:	881b      	ldrh	r3, [r3, #0]
 8013f4a:	b29a      	uxth	r2, r3
 8013f4c:	697b      	ldr	r3, [r7, #20]
 8013f4e:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 8013f50:	697b      	ldr	r3, [r7, #20]
 8013f52:	2203      	movs	r2, #3
 8013f54:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 8013f56:	4b3a      	ldr	r3, [pc, #232]	; (8014040 <tcp_listen_input+0x1a8>)
 8013f58:	681b      	ldr	r3, [r3, #0]
 8013f5a:	1c5a      	adds	r2, r3, #1
 8013f5c:	697b      	ldr	r3, [r7, #20]
 8013f5e:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 8013f60:	697b      	ldr	r3, [r7, #20]
 8013f62:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8013f64:	697b      	ldr	r3, [r7, #20]
 8013f66:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 8013f68:	6978      	ldr	r0, [r7, #20]
 8013f6a:	f7ff fb01 	bl	8013570 <tcp_next_iss>
 8013f6e:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 8013f70:	697b      	ldr	r3, [r7, #20]
 8013f72:	693a      	ldr	r2, [r7, #16]
 8013f74:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->snd_nxt = iss;
 8013f76:	697b      	ldr	r3, [r7, #20]
 8013f78:	693a      	ldr	r2, [r7, #16]
 8013f7a:	64da      	str	r2, [r3, #76]	; 0x4c
    npcb->lastack = iss;
 8013f7c:	697b      	ldr	r3, [r7, #20]
 8013f7e:	693a      	ldr	r2, [r7, #16]
 8013f80:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 8013f82:	697b      	ldr	r3, [r7, #20]
 8013f84:	693a      	ldr	r2, [r7, #16]
 8013f86:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 8013f88:	4b2d      	ldr	r3, [pc, #180]	; (8014040 <tcp_listen_input+0x1a8>)
 8013f8a:	681b      	ldr	r3, [r3, #0]
 8013f8c:	1e5a      	subs	r2, r3, #1
 8013f8e:	697b      	ldr	r3, [r7, #20]
 8013f90:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->callback_arg = pcb->callback_arg;
 8013f92:	687b      	ldr	r3, [r7, #4]
 8013f94:	691a      	ldr	r2, [r3, #16]
 8013f96:	697b      	ldr	r3, [r7, #20]
 8013f98:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 8013f9a:	697b      	ldr	r3, [r7, #20]
 8013f9c:	687a      	ldr	r2, [r7, #4]
 8013f9e:	679a      	str	r2, [r3, #120]	; 0x78
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 8013fa0:	687b      	ldr	r3, [r7, #4]
 8013fa2:	7a1b      	ldrb	r3, [r3, #8]
 8013fa4:	f003 030c 	and.w	r3, r3, #12
 8013fa8:	b2da      	uxtb	r2, r3
 8013faa:	697b      	ldr	r3, [r7, #20]
 8013fac:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 8013fae:	4b29      	ldr	r3, [pc, #164]	; (8014054 <tcp_listen_input+0x1bc>)
 8013fb0:	681a      	ldr	r2, [r3, #0]
 8013fb2:	697b      	ldr	r3, [r7, #20]
 8013fb4:	60da      	str	r2, [r3, #12]
 8013fb6:	4a27      	ldr	r2, [pc, #156]	; (8014054 <tcp_listen_input+0x1bc>)
 8013fb8:	697b      	ldr	r3, [r7, #20]
 8013fba:	6013      	str	r3, [r2, #0]
 8013fbc:	f003 f936 	bl	801722c <tcp_timer_needed>
 8013fc0:	4b25      	ldr	r3, [pc, #148]	; (8014058 <tcp_listen_input+0x1c0>)
 8013fc2:	2201      	movs	r2, #1
 8013fc4:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 8013fc6:	6978      	ldr	r0, [r7, #20]
 8013fc8:	f001 fd14 	bl	80159f4 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 8013fcc:	4b1d      	ldr	r3, [pc, #116]	; (8014044 <tcp_listen_input+0x1ac>)
 8013fce:	681b      	ldr	r3, [r3, #0]
 8013fd0:	89db      	ldrh	r3, [r3, #14]
 8013fd2:	b29a      	uxth	r2, r3
 8013fd4:	697b      	ldr	r3, [r7, #20]
 8013fd6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    npcb->snd_wnd_max = npcb->snd_wnd;
 8013fda:	697b      	ldr	r3, [r7, #20]
 8013fdc:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8013fe0:	697b      	ldr	r3, [r7, #20]
 8013fe2:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 8013fe6:	697b      	ldr	r3, [r7, #20]
 8013fe8:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 8013fea:	697b      	ldr	r3, [r7, #20]
 8013fec:	3304      	adds	r3, #4
 8013fee:	4619      	mov	r1, r3
 8013ff0:	4610      	mov	r0, r2
 8013ff2:	f7ff fad5 	bl	80135a0 <tcp_eff_send_mss_impl>
 8013ff6:	4603      	mov	r3, r0
 8013ff8:	461a      	mov	r2, r3
 8013ffa:	697b      	ldr	r3, [r7, #20]
 8013ffc:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 8013ffe:	2112      	movs	r1, #18
 8014000:	6978      	ldr	r0, [r7, #20]
 8014002:	f002 fae1 	bl	80165c8 <tcp_enqueue_flags>
 8014006:	4603      	mov	r3, r0
 8014008:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 801400a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801400e:	2b00      	cmp	r3, #0
 8014010:	d004      	beq.n	801401c <tcp_listen_input+0x184>
      tcp_abandon(npcb, 0);
 8014012:	2100      	movs	r1, #0
 8014014:	6978      	ldr	r0, [r7, #20]
 8014016:	f7fe f913 	bl	8012240 <tcp_abandon>
      return;
 801401a:	e007      	b.n	801402c <tcp_listen_input+0x194>
    tcp_output(npcb);
 801401c:	6978      	ldr	r0, [r7, #20]
 801401e:	f002 fc2b 	bl	8016878 <tcp_output>
  return;
 8014022:	bf00      	nop
 8014024:	e001      	b.n	801402a <tcp_listen_input+0x192>
    return;
 8014026:	bf00      	nop
 8014028:	e000      	b.n	801402c <tcp_listen_input+0x194>
  return;
 801402a:	bf00      	nop
}
 801402c:	3718      	adds	r7, #24
 801402e:	46bd      	mov	sp, r7
 8014030:	bd80      	pop	{r7, pc}
 8014032:	bf00      	nop
 8014034:	20004234 	.word	0x20004234
 8014038:	2000422c 	.word	0x2000422c
 801403c:	20004232 	.word	0x20004232
 8014040:	20004228 	.word	0x20004228
 8014044:	20004218 	.word	0x20004218
 8014048:	20007648 	.word	0x20007648
 801404c:	2000764c 	.word	0x2000764c
 8014050:	20007638 	.word	0x20007638
 8014054:	2000ab40 	.word	0x2000ab40
 8014058:	2000ab3c 	.word	0x2000ab3c

0801405c <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 801405c:	b580      	push	{r7, lr}
 801405e:	b084      	sub	sp, #16
 8014060:	af02      	add	r7, sp, #8
 8014062:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 8014064:	4b29      	ldr	r3, [pc, #164]	; (801410c <tcp_timewait_input+0xb0>)
 8014066:	781b      	ldrb	r3, [r3, #0]
 8014068:	f003 0304 	and.w	r3, r3, #4
 801406c:	2b00      	cmp	r3, #0
 801406e:	d147      	bne.n	8014100 <tcp_timewait_input+0xa4>
    return;
  }
  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 8014070:	4b26      	ldr	r3, [pc, #152]	; (801410c <tcp_timewait_input+0xb0>)
 8014072:	781b      	ldrb	r3, [r3, #0]
 8014074:	f003 0302 	and.w	r3, r3, #2
 8014078:	2b00      	cmp	r3, #0
 801407a:	d027      	beq.n	80140cc <tcp_timewait_input+0x70>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 801407c:	4b24      	ldr	r3, [pc, #144]	; (8014110 <tcp_timewait_input+0xb4>)
 801407e:	681a      	ldr	r2, [r3, #0]
 8014080:	687b      	ldr	r3, [r7, #4]
 8014082:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014084:	1ad3      	subs	r3, r2, r3
 8014086:	2b00      	cmp	r3, #0
 8014088:	db2a      	blt.n	80140e0 <tcp_timewait_input+0x84>
 801408a:	4b21      	ldr	r3, [pc, #132]	; (8014110 <tcp_timewait_input+0xb4>)
 801408c:	681a      	ldr	r2, [r3, #0]
 801408e:	687b      	ldr	r3, [r7, #4]
 8014090:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014092:	6879      	ldr	r1, [r7, #4]
 8014094:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8014096:	440b      	add	r3, r1
 8014098:	1ad3      	subs	r3, r2, r3
 801409a:	2b00      	cmp	r3, #0
 801409c:	dc20      	bgt.n	80140e0 <tcp_timewait_input+0x84>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 801409e:	4b1d      	ldr	r3, [pc, #116]	; (8014114 <tcp_timewait_input+0xb8>)
 80140a0:	6818      	ldr	r0, [r3, #0]
 80140a2:	4b1d      	ldr	r3, [pc, #116]	; (8014118 <tcp_timewait_input+0xbc>)
 80140a4:	881b      	ldrh	r3, [r3, #0]
 80140a6:	461a      	mov	r2, r3
 80140a8:	4b19      	ldr	r3, [pc, #100]	; (8014110 <tcp_timewait_input+0xb4>)
 80140aa:	681b      	ldr	r3, [r3, #0]
 80140ac:	18d1      	adds	r1, r2, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80140ae:	4b1b      	ldr	r3, [pc, #108]	; (801411c <tcp_timewait_input+0xc0>)
 80140b0:	681b      	ldr	r3, [r3, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 80140b2:	885b      	ldrh	r3, [r3, #2]
 80140b4:	b29b      	uxth	r3, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80140b6:	4a19      	ldr	r2, [pc, #100]	; (801411c <tcp_timewait_input+0xc0>)
 80140b8:	6812      	ldr	r2, [r2, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 80140ba:	8812      	ldrh	r2, [r2, #0]
 80140bc:	b292      	uxth	r2, r2
 80140be:	9201      	str	r2, [sp, #4]
 80140c0:	9300      	str	r3, [sp, #0]
 80140c2:	4b17      	ldr	r3, [pc, #92]	; (8014120 <tcp_timewait_input+0xc4>)
 80140c4:	4a17      	ldr	r2, [pc, #92]	; (8014124 <tcp_timewait_input+0xc8>)
 80140c6:	f002 fe61 	bl	8016d8c <tcp_rst>
      return;
 80140ca:	e01c      	b.n	8014106 <tcp_timewait_input+0xaa>
    }
  } else if (flags & TCP_FIN) {
 80140cc:	4b0f      	ldr	r3, [pc, #60]	; (801410c <tcp_timewait_input+0xb0>)
 80140ce:	781b      	ldrb	r3, [r3, #0]
 80140d0:	f003 0301 	and.w	r3, r3, #1
 80140d4:	2b00      	cmp	r3, #0
 80140d6:	d003      	beq.n	80140e0 <tcp_timewait_input+0x84>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 80140d8:	4b13      	ldr	r3, [pc, #76]	; (8014128 <tcp_timewait_input+0xcc>)
 80140da:	681a      	ldr	r2, [r3, #0]
 80140dc:	687b      	ldr	r3, [r7, #4]
 80140de:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 80140e0:	4b0d      	ldr	r3, [pc, #52]	; (8014118 <tcp_timewait_input+0xbc>)
 80140e2:	881b      	ldrh	r3, [r3, #0]
 80140e4:	2b00      	cmp	r3, #0
 80140e6:	d00d      	beq.n	8014104 <tcp_timewait_input+0xa8>
    /* Acknowledge data, FIN or out-of-window SYN */
    pcb->flags |= TF_ACK_NOW;
 80140e8:	687b      	ldr	r3, [r7, #4]
 80140ea:	7e9b      	ldrb	r3, [r3, #26]
 80140ec:	f043 0302 	orr.w	r3, r3, #2
 80140f0:	b2da      	uxtb	r2, r3
 80140f2:	687b      	ldr	r3, [r7, #4]
 80140f4:	769a      	strb	r2, [r3, #26]
    tcp_output(pcb);
 80140f6:	6878      	ldr	r0, [r7, #4]
 80140f8:	f002 fbbe 	bl	8016878 <tcp_output>
  }
  return;
 80140fc:	bf00      	nop
 80140fe:	e001      	b.n	8014104 <tcp_timewait_input+0xa8>
    return;
 8014100:	bf00      	nop
 8014102:	e000      	b.n	8014106 <tcp_timewait_input+0xaa>
  return;
 8014104:	bf00      	nop
}
 8014106:	3708      	adds	r7, #8
 8014108:	46bd      	mov	sp, r7
 801410a:	bd80      	pop	{r7, pc}
 801410c:	20004234 	.word	0x20004234
 8014110:	20004228 	.word	0x20004228
 8014114:	2000422c 	.word	0x2000422c
 8014118:	20004232 	.word	0x20004232
 801411c:	20004218 	.word	0x20004218
 8014120:	20007648 	.word	0x20007648
 8014124:	2000764c 	.word	0x2000764c
 8014128:	2000ab44 	.word	0x2000ab44

0801412c <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 801412c:	b580      	push	{r7, lr}
 801412e:	b08a      	sub	sp, #40	; 0x28
 8014130:	af02      	add	r7, sp, #8
 8014132:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 8014134:	2300      	movs	r3, #0
 8014136:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 8014138:	2300      	movs	r3, #0
 801413a:	76bb      	strb	r3, [r7, #26]

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 801413c:	4ba4      	ldr	r3, [pc, #656]	; (80143d0 <tcp_process+0x2a4>)
 801413e:	781b      	ldrb	r3, [r3, #0]
 8014140:	f003 0304 	and.w	r3, r3, #4
 8014144:	2b00      	cmp	r3, #0
 8014146:	d04e      	beq.n	80141e6 <tcp_process+0xba>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 8014148:	687b      	ldr	r3, [r7, #4]
 801414a:	7d1b      	ldrb	r3, [r3, #20]
 801414c:	2b02      	cmp	r3, #2
 801414e:	d108      	bne.n	8014162 <tcp_process+0x36>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 8014150:	687b      	ldr	r3, [r7, #4]
 8014152:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8014154:	4b9f      	ldr	r3, [pc, #636]	; (80143d4 <tcp_process+0x2a8>)
 8014156:	681b      	ldr	r3, [r3, #0]
 8014158:	429a      	cmp	r2, r3
 801415a:	d123      	bne.n	80141a4 <tcp_process+0x78>
        acceptable = 1;
 801415c:	2301      	movs	r3, #1
 801415e:	76fb      	strb	r3, [r7, #27]
 8014160:	e020      	b.n	80141a4 <tcp_process+0x78>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 8014162:	687b      	ldr	r3, [r7, #4]
 8014164:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8014166:	4b9c      	ldr	r3, [pc, #624]	; (80143d8 <tcp_process+0x2ac>)
 8014168:	681b      	ldr	r3, [r3, #0]
 801416a:	429a      	cmp	r2, r3
 801416c:	d102      	bne.n	8014174 <tcp_process+0x48>
        acceptable = 1;
 801416e:	2301      	movs	r3, #1
 8014170:	76fb      	strb	r3, [r7, #27]
 8014172:	e017      	b.n	80141a4 <tcp_process+0x78>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8014174:	4b98      	ldr	r3, [pc, #608]	; (80143d8 <tcp_process+0x2ac>)
 8014176:	681a      	ldr	r2, [r3, #0]
 8014178:	687b      	ldr	r3, [r7, #4]
 801417a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801417c:	1ad3      	subs	r3, r2, r3
 801417e:	2b00      	cmp	r3, #0
 8014180:	db10      	blt.n	80141a4 <tcp_process+0x78>
 8014182:	4b95      	ldr	r3, [pc, #596]	; (80143d8 <tcp_process+0x2ac>)
 8014184:	681a      	ldr	r2, [r3, #0]
 8014186:	687b      	ldr	r3, [r7, #4]
 8014188:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801418a:	6879      	ldr	r1, [r7, #4]
 801418c:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 801418e:	440b      	add	r3, r1
 8014190:	1ad3      	subs	r3, r2, r3
 8014192:	2b00      	cmp	r3, #0
 8014194:	dc06      	bgt.n	80141a4 <tcp_process+0x78>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we only send an ACK
           and wait for a re-send with matching sequence number.
           This violates RFC 793, but is required to protection against
           CVE-2004-0230 (RST spoofing attack). */
        tcp_ack_now(pcb);
 8014196:	687b      	ldr	r3, [r7, #4]
 8014198:	7e9b      	ldrb	r3, [r3, #26]
 801419a:	f043 0302 	orr.w	r3, r3, #2
 801419e:	b2da      	uxtb	r2, r3
 80141a0:	687b      	ldr	r3, [r7, #4]
 80141a2:	769a      	strb	r2, [r3, #26]
      }
    }

    if (acceptable) {
 80141a4:	7efb      	ldrb	r3, [r7, #27]
 80141a6:	2b00      	cmp	r3, #0
 80141a8:	d01b      	beq.n	80141e2 <tcp_process+0xb6>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 80141aa:	687b      	ldr	r3, [r7, #4]
 80141ac:	7d1b      	ldrb	r3, [r3, #20]
 80141ae:	2b00      	cmp	r3, #0
 80141b0:	d106      	bne.n	80141c0 <tcp_process+0x94>
 80141b2:	4b8a      	ldr	r3, [pc, #552]	; (80143dc <tcp_process+0x2b0>)
 80141b4:	f240 22e7 	movw	r2, #743	; 0x2e7
 80141b8:	4989      	ldr	r1, [pc, #548]	; (80143e0 <tcp_process+0x2b4>)
 80141ba:	488a      	ldr	r0, [pc, #552]	; (80143e4 <tcp_process+0x2b8>)
 80141bc:	f006 fe18 	bl	801adf0 <iprintf>
      recv_flags |= TF_RESET;
 80141c0:	4b89      	ldr	r3, [pc, #548]	; (80143e8 <tcp_process+0x2bc>)
 80141c2:	781b      	ldrb	r3, [r3, #0]
 80141c4:	f043 0308 	orr.w	r3, r3, #8
 80141c8:	b2da      	uxtb	r2, r3
 80141ca:	4b87      	ldr	r3, [pc, #540]	; (80143e8 <tcp_process+0x2bc>)
 80141cc:	701a      	strb	r2, [r3, #0]
      pcb->flags &= ~TF_ACK_DELAY;
 80141ce:	687b      	ldr	r3, [r7, #4]
 80141d0:	7e9b      	ldrb	r3, [r3, #26]
 80141d2:	f023 0301 	bic.w	r3, r3, #1
 80141d6:	b2da      	uxtb	r2, r3
 80141d8:	687b      	ldr	r3, [r7, #4]
 80141da:	769a      	strb	r2, [r3, #26]
      return ERR_RST;
 80141dc:	f06f 030d 	mvn.w	r3, #13
 80141e0:	e34d      	b.n	801487e <tcp_process+0x752>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
       seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
       seqno, pcb->rcv_nxt));
      return ERR_OK;
 80141e2:	2300      	movs	r3, #0
 80141e4:	e34b      	b.n	801487e <tcp_process+0x752>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 80141e6:	4b7a      	ldr	r3, [pc, #488]	; (80143d0 <tcp_process+0x2a4>)
 80141e8:	781b      	ldrb	r3, [r3, #0]
 80141ea:	f003 0302 	and.w	r3, r3, #2
 80141ee:	2b00      	cmp	r3, #0
 80141f0:	d010      	beq.n	8014214 <tcp_process+0xe8>
 80141f2:	687b      	ldr	r3, [r7, #4]
 80141f4:	7d1b      	ldrb	r3, [r3, #20]
 80141f6:	2b02      	cmp	r3, #2
 80141f8:	d00c      	beq.n	8014214 <tcp_process+0xe8>
 80141fa:	687b      	ldr	r3, [r7, #4]
 80141fc:	7d1b      	ldrb	r3, [r3, #20]
 80141fe:	2b03      	cmp	r3, #3
 8014200:	d008      	beq.n	8014214 <tcp_process+0xe8>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 8014202:	687b      	ldr	r3, [r7, #4]
 8014204:	7e9b      	ldrb	r3, [r3, #26]
 8014206:	f043 0302 	orr.w	r3, r3, #2
 801420a:	b2da      	uxtb	r2, r3
 801420c:	687b      	ldr	r3, [r7, #4]
 801420e:	769a      	strb	r2, [r3, #26]
    return ERR_OK;
 8014210:	2300      	movs	r3, #0
 8014212:	e334      	b.n	801487e <tcp_process+0x752>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 8014214:	687b      	ldr	r3, [r7, #4]
 8014216:	7e9b      	ldrb	r3, [r3, #26]
 8014218:	f003 0310 	and.w	r3, r3, #16
 801421c:	2b00      	cmp	r3, #0
 801421e:	d103      	bne.n	8014228 <tcp_process+0xfc>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 8014220:	4b72      	ldr	r3, [pc, #456]	; (80143ec <tcp_process+0x2c0>)
 8014222:	681a      	ldr	r2, [r3, #0]
 8014224:	687b      	ldr	r3, [r7, #4]
 8014226:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 8014228:	687b      	ldr	r3, [r7, #4]
 801422a:	2200      	movs	r2, #0
 801422c:	f883 2096 	strb.w	r2, [r3, #150]	; 0x96

  tcp_parseopt(pcb);
 8014230:	6878      	ldr	r0, [r7, #4]
 8014232:	f001 fbdf 	bl	80159f4 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 8014236:	687b      	ldr	r3, [r7, #4]
 8014238:	7d1b      	ldrb	r3, [r3, #20]
 801423a:	3b02      	subs	r3, #2
 801423c:	2b07      	cmp	r3, #7
 801423e:	f200 830e 	bhi.w	801485e <tcp_process+0x732>
 8014242:	a201      	add	r2, pc, #4	; (adr r2, 8014248 <tcp_process+0x11c>)
 8014244:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014248:	08014269 	.word	0x08014269
 801424c:	08014461 	.word	0x08014461
 8014250:	080145b9 	.word	0x080145b9
 8014254:	080145e3 	.word	0x080145e3
 8014258:	0801470d 	.word	0x0801470d
 801425c:	080145b9 	.word	0x080145b9
 8014260:	08014799 	.word	0x08014799
 8014264:	08014829 	.word	0x08014829
  case SYN_SENT:
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
     pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    /* received SYN ACK with expected sequence number? */
    if ((flags & TCP_ACK) && (flags & TCP_SYN)
 8014268:	4b59      	ldr	r3, [pc, #356]	; (80143d0 <tcp_process+0x2a4>)
 801426a:	781b      	ldrb	r3, [r3, #0]
 801426c:	f003 0310 	and.w	r3, r3, #16
 8014270:	2b00      	cmp	r3, #0
 8014272:	f000 80cb 	beq.w	801440c <tcp_process+0x2e0>
 8014276:	4b56      	ldr	r3, [pc, #344]	; (80143d0 <tcp_process+0x2a4>)
 8014278:	781b      	ldrb	r3, [r3, #0]
 801427a:	f003 0302 	and.w	r3, r3, #2
 801427e:	2b00      	cmp	r3, #0
 8014280:	f000 80c4 	beq.w	801440c <tcp_process+0x2e0>
        && (ackno == pcb->lastack + 1)) {
 8014284:	687b      	ldr	r3, [r7, #4]
 8014286:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8014288:	1c5a      	adds	r2, r3, #1
 801428a:	4b52      	ldr	r3, [pc, #328]	; (80143d4 <tcp_process+0x2a8>)
 801428c:	681b      	ldr	r3, [r3, #0]
 801428e:	429a      	cmp	r2, r3
 8014290:	f040 80bc 	bne.w	801440c <tcp_process+0x2e0>
      pcb->rcv_nxt = seqno + 1;
 8014294:	4b50      	ldr	r3, [pc, #320]	; (80143d8 <tcp_process+0x2ac>)
 8014296:	681b      	ldr	r3, [r3, #0]
 8014298:	1c5a      	adds	r2, r3, #1
 801429a:	687b      	ldr	r3, [r7, #4]
 801429c:	625a      	str	r2, [r3, #36]	; 0x24
      pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 801429e:	687b      	ldr	r3, [r7, #4]
 80142a0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80142a2:	687b      	ldr	r3, [r7, #4]
 80142a4:	62da      	str	r2, [r3, #44]	; 0x2c
      pcb->lastack = ackno;
 80142a6:	4b4b      	ldr	r3, [pc, #300]	; (80143d4 <tcp_process+0x2a8>)
 80142a8:	681a      	ldr	r2, [r3, #0]
 80142aa:	687b      	ldr	r3, [r7, #4]
 80142ac:	645a      	str	r2, [r3, #68]	; 0x44
      pcb->snd_wnd = tcphdr->wnd;
 80142ae:	4b50      	ldr	r3, [pc, #320]	; (80143f0 <tcp_process+0x2c4>)
 80142b0:	681b      	ldr	r3, [r3, #0]
 80142b2:	89db      	ldrh	r3, [r3, #14]
 80142b4:	b29a      	uxth	r2, r3
 80142b6:	687b      	ldr	r3, [r7, #4]
 80142b8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
      pcb->snd_wnd_max = pcb->snd_wnd;
 80142bc:	687b      	ldr	r3, [r7, #4]
 80142be:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 80142c2:	687b      	ldr	r3, [r7, #4]
 80142c4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 80142c8:	4b43      	ldr	r3, [pc, #268]	; (80143d8 <tcp_process+0x2ac>)
 80142ca:	681b      	ldr	r3, [r3, #0]
 80142cc:	1e5a      	subs	r2, r3, #1
 80142ce:	687b      	ldr	r3, [r7, #4]
 80142d0:	651a      	str	r2, [r3, #80]	; 0x50
      pcb->state = ESTABLISHED;
 80142d2:	687b      	ldr	r3, [r7, #4]
 80142d4:	2204      	movs	r2, #4
 80142d6:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
      pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 80142d8:	687b      	ldr	r3, [r7, #4]
 80142da:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 80142dc:	687b      	ldr	r3, [r7, #4]
 80142de:	3304      	adds	r3, #4
 80142e0:	4619      	mov	r1, r3
 80142e2:	4610      	mov	r0, r2
 80142e4:	f7ff f95c 	bl	80135a0 <tcp_eff_send_mss_impl>
 80142e8:	4603      	mov	r3, r0
 80142ea:	461a      	mov	r2, r3
 80142ec:	687b      	ldr	r3, [r7, #4]
 80142ee:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

      pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 80142f0:	687b      	ldr	r3, [r7, #4]
 80142f2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80142f4:	005b      	lsls	r3, r3, #1
 80142f6:	f241 121c 	movw	r2, #4380	; 0x111c
 80142fa:	429a      	cmp	r2, r3
 80142fc:	bf38      	it	cc
 80142fe:	461a      	movcc	r2, r3
 8014300:	687b      	ldr	r3, [r7, #4]
 8014302:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8014304:	009b      	lsls	r3, r3, #2
 8014306:	4293      	cmp	r3, r2
 8014308:	bf28      	it	cs
 801430a:	4613      	movcs	r3, r2
 801430c:	b29a      	uxth	r2, r3
 801430e:	687b      	ldr	r3, [r7, #4]
 8014310:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                   " ssthresh %"TCPWNDSIZE_F"\n",
                                   pcb->cwnd, pcb->ssthresh));
      LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 8014314:	687b      	ldr	r3, [r7, #4]
 8014316:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 801431a:	2b00      	cmp	r3, #0
 801431c:	d106      	bne.n	801432c <tcp_process+0x200>
 801431e:	4b2f      	ldr	r3, [pc, #188]	; (80143dc <tcp_process+0x2b0>)
 8014320:	f240 321a 	movw	r2, #794	; 0x31a
 8014324:	4933      	ldr	r1, [pc, #204]	; (80143f4 <tcp_process+0x2c8>)
 8014326:	482f      	ldr	r0, [pc, #188]	; (80143e4 <tcp_process+0x2b8>)
 8014328:	f006 fd62 	bl	801adf0 <iprintf>
      --pcb->snd_queuelen;
 801432c:	687b      	ldr	r3, [r7, #4]
 801432e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8014332:	3b01      	subs	r3, #1
 8014334:	b29a      	uxth	r2, r3
 8014336:	687b      	ldr	r3, [r7, #4]
 8014338:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
      rseg = pcb->unacked;
 801433c:	687b      	ldr	r3, [r7, #4]
 801433e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014340:	61fb      	str	r3, [r7, #28]
      if (rseg == NULL) {
 8014342:	69fb      	ldr	r3, [r7, #28]
 8014344:	2b00      	cmp	r3, #0
 8014346:	d111      	bne.n	801436c <tcp_process+0x240>
        /* might happen if tcp_output fails in tcp_rexmit_rto()
           in which case the segment is on the unsent list */
        rseg = pcb->unsent;
 8014348:	687b      	ldr	r3, [r7, #4]
 801434a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801434c:	61fb      	str	r3, [r7, #28]
        LWIP_ASSERT("no segment to free", rseg != NULL);
 801434e:	69fb      	ldr	r3, [r7, #28]
 8014350:	2b00      	cmp	r3, #0
 8014352:	d106      	bne.n	8014362 <tcp_process+0x236>
 8014354:	4b21      	ldr	r3, [pc, #132]	; (80143dc <tcp_process+0x2b0>)
 8014356:	f240 3222 	movw	r2, #802	; 0x322
 801435a:	4927      	ldr	r1, [pc, #156]	; (80143f8 <tcp_process+0x2cc>)
 801435c:	4821      	ldr	r0, [pc, #132]	; (80143e4 <tcp_process+0x2b8>)
 801435e:	f006 fd47 	bl	801adf0 <iprintf>
        pcb->unsent = rseg->next;
 8014362:	69fb      	ldr	r3, [r7, #28]
 8014364:	681a      	ldr	r2, [r3, #0]
 8014366:	687b      	ldr	r3, [r7, #4]
 8014368:	669a      	str	r2, [r3, #104]	; 0x68
 801436a:	e003      	b.n	8014374 <tcp_process+0x248>
      } else {
        pcb->unacked = rseg->next;
 801436c:	69fb      	ldr	r3, [r7, #28]
 801436e:	681a      	ldr	r2, [r3, #0]
 8014370:	687b      	ldr	r3, [r7, #4]
 8014372:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      tcp_seg_free(rseg);
 8014374:	69f8      	ldr	r0, [r7, #28]
 8014376:	f7fe fde8 	bl	8012f4a <tcp_seg_free>

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 801437a:	687b      	ldr	r3, [r7, #4]
 801437c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801437e:	2b00      	cmp	r3, #0
 8014380:	d104      	bne.n	801438c <tcp_process+0x260>
        pcb->rtime = -1;
 8014382:	687b      	ldr	r3, [r7, #4]
 8014384:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8014388:	861a      	strh	r2, [r3, #48]	; 0x30
 801438a:	e006      	b.n	801439a <tcp_process+0x26e>
      } else {
        pcb->rtime = 0;
 801438c:	687b      	ldr	r3, [r7, #4]
 801438e:	2200      	movs	r2, #0
 8014390:	861a      	strh	r2, [r3, #48]	; 0x30
        pcb->nrtx = 0;
 8014392:	687b      	ldr	r3, [r7, #4]
 8014394:	2200      	movs	r2, #0
 8014396:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      }

      /* Call the user specified function to call when successfully
       * connected. */
      TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 801439a:	687b      	ldr	r3, [r7, #4]
 801439c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80143a0:	2b00      	cmp	r3, #0
 80143a2:	d00a      	beq.n	80143ba <tcp_process+0x28e>
 80143a4:	687b      	ldr	r3, [r7, #4]
 80143a6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80143aa:	687a      	ldr	r2, [r7, #4]
 80143ac:	6910      	ldr	r0, [r2, #16]
 80143ae:	2200      	movs	r2, #0
 80143b0:	6879      	ldr	r1, [r7, #4]
 80143b2:	4798      	blx	r3
 80143b4:	4603      	mov	r3, r0
 80143b6:	76bb      	strb	r3, [r7, #26]
 80143b8:	e001      	b.n	80143be <tcp_process+0x292>
 80143ba:	2300      	movs	r3, #0
 80143bc:	76bb      	strb	r3, [r7, #26]
      if (err == ERR_ABRT) {
 80143be:	f997 301a 	ldrsb.w	r3, [r7, #26]
 80143c2:	f113 0f0d 	cmn.w	r3, #13
 80143c6:	d119      	bne.n	80143fc <tcp_process+0x2d0>
        return ERR_ABRT;
 80143c8:	f06f 030c 	mvn.w	r3, #12
 80143cc:	e257      	b.n	801487e <tcp_process+0x752>
 80143ce:	bf00      	nop
 80143d0:	20004234 	.word	0x20004234
 80143d4:	2000422c 	.word	0x2000422c
 80143d8:	20004228 	.word	0x20004228
 80143dc:	0801d710 	.word	0x0801d710
 80143e0:	0801d8c8 	.word	0x0801d8c8
 80143e4:	0801d754 	.word	0x0801d754
 80143e8:	20004235 	.word	0x20004235
 80143ec:	2000ab44 	.word	0x2000ab44
 80143f0:	20004218 	.word	0x20004218
 80143f4:	0801d8e8 	.word	0x0801d8e8
 80143f8:	0801d900 	.word	0x0801d900
      }
      tcp_ack_now(pcb);
 80143fc:	687b      	ldr	r3, [r7, #4]
 80143fe:	7e9b      	ldrb	r3, [r3, #26]
 8014400:	f043 0302 	orr.w	r3, r3, #2
 8014404:	b2da      	uxtb	r2, r3
 8014406:	687b      	ldr	r3, [r7, #4]
 8014408:	769a      	strb	r2, [r3, #26]
      if (pcb->nrtx < TCP_SYNMAXRTX) {
        pcb->rtime = 0;
        tcp_rexmit_rto(pcb);
      }
    }
    break;
 801440a:	e22a      	b.n	8014862 <tcp_process+0x736>
    else if (flags & TCP_ACK) {
 801440c:	4b9f      	ldr	r3, [pc, #636]	; (801468c <tcp_process+0x560>)
 801440e:	781b      	ldrb	r3, [r3, #0]
 8014410:	f003 0310 	and.w	r3, r3, #16
 8014414:	2b00      	cmp	r3, #0
 8014416:	f000 8224 	beq.w	8014862 <tcp_process+0x736>
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 801441a:	4b9d      	ldr	r3, [pc, #628]	; (8014690 <tcp_process+0x564>)
 801441c:	6818      	ldr	r0, [r3, #0]
 801441e:	4b9d      	ldr	r3, [pc, #628]	; (8014694 <tcp_process+0x568>)
 8014420:	881b      	ldrh	r3, [r3, #0]
 8014422:	461a      	mov	r2, r3
 8014424:	4b9c      	ldr	r3, [pc, #624]	; (8014698 <tcp_process+0x56c>)
 8014426:	681b      	ldr	r3, [r3, #0]
 8014428:	18d1      	adds	r1, r2, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801442a:	4b9c      	ldr	r3, [pc, #624]	; (801469c <tcp_process+0x570>)
 801442c:	681b      	ldr	r3, [r3, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 801442e:	885b      	ldrh	r3, [r3, #2]
 8014430:	b29b      	uxth	r3, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8014432:	4a9a      	ldr	r2, [pc, #616]	; (801469c <tcp_process+0x570>)
 8014434:	6812      	ldr	r2, [r2, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 8014436:	8812      	ldrh	r2, [r2, #0]
 8014438:	b292      	uxth	r2, r2
 801443a:	9201      	str	r2, [sp, #4]
 801443c:	9300      	str	r3, [sp, #0]
 801443e:	4b98      	ldr	r3, [pc, #608]	; (80146a0 <tcp_process+0x574>)
 8014440:	4a98      	ldr	r2, [pc, #608]	; (80146a4 <tcp_process+0x578>)
 8014442:	f002 fca3 	bl	8016d8c <tcp_rst>
      if (pcb->nrtx < TCP_SYNMAXRTX) {
 8014446:	687b      	ldr	r3, [r7, #4]
 8014448:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801444c:	2b05      	cmp	r3, #5
 801444e:	f200 8208 	bhi.w	8014862 <tcp_process+0x736>
        pcb->rtime = 0;
 8014452:	687b      	ldr	r3, [r7, #4]
 8014454:	2200      	movs	r2, #0
 8014456:	861a      	strh	r2, [r3, #48]	; 0x30
        tcp_rexmit_rto(pcb);
 8014458:	6878      	ldr	r0, [r7, #4]
 801445a:	f002 fd0d 	bl	8016e78 <tcp_rexmit_rto>
    break;
 801445e:	e200      	b.n	8014862 <tcp_process+0x736>
  case SYN_RCVD:
    if (flags & TCP_ACK) {
 8014460:	4b8a      	ldr	r3, [pc, #552]	; (801468c <tcp_process+0x560>)
 8014462:	781b      	ldrb	r3, [r3, #0]
 8014464:	f003 0310 	and.w	r3, r3, #16
 8014468:	2b00      	cmp	r3, #0
 801446a:	f000 8091 	beq.w	8014590 <tcp_process+0x464>
      /* expected ACK number? */
      if (TCP_SEQ_BETWEEN(ackno, pcb->lastack+1, pcb->snd_nxt)) {
 801446e:	4b88      	ldr	r3, [pc, #544]	; (8014690 <tcp_process+0x564>)
 8014470:	681a      	ldr	r2, [r3, #0]
 8014472:	687b      	ldr	r3, [r7, #4]
 8014474:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8014476:	1ad3      	subs	r3, r2, r3
 8014478:	3b01      	subs	r3, #1
 801447a:	2b00      	cmp	r3, #0
 801447c:	db71      	blt.n	8014562 <tcp_process+0x436>
 801447e:	4b84      	ldr	r3, [pc, #528]	; (8014690 <tcp_process+0x564>)
 8014480:	681a      	ldr	r2, [r3, #0]
 8014482:	687b      	ldr	r3, [r7, #4]
 8014484:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8014486:	1ad3      	subs	r3, r2, r3
 8014488:	2b00      	cmp	r3, #0
 801448a:	dc6a      	bgt.n	8014562 <tcp_process+0x436>
        pcb->state = ESTABLISHED;
 801448c:	687b      	ldr	r3, [r7, #4]
 801448e:	2204      	movs	r2, #4
 8014490:	751a      	strb	r2, [r3, #20]
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
#if LWIP_CALLBACK_API
        LWIP_ASSERT("pcb->listener->accept != NULL",
 8014492:	687b      	ldr	r3, [r7, #4]
 8014494:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8014496:	2b00      	cmp	r3, #0
 8014498:	d00b      	beq.n	80144b2 <tcp_process+0x386>
 801449a:	687b      	ldr	r3, [r7, #4]
 801449c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801449e:	699b      	ldr	r3, [r3, #24]
 80144a0:	2b00      	cmp	r3, #0
 80144a2:	d106      	bne.n	80144b2 <tcp_process+0x386>
 80144a4:	4b80      	ldr	r3, [pc, #512]	; (80146a8 <tcp_process+0x57c>)
 80144a6:	f240 3251 	movw	r2, #849	; 0x351
 80144aa:	4980      	ldr	r1, [pc, #512]	; (80146ac <tcp_process+0x580>)
 80144ac:	4880      	ldr	r0, [pc, #512]	; (80146b0 <tcp_process+0x584>)
 80144ae:	f006 fc9f 	bl	801adf0 <iprintf>
          (pcb->listener == NULL) || (pcb->listener->accept != NULL));
#endif
        if (pcb->listener == NULL) {
 80144b2:	687b      	ldr	r3, [r7, #4]
 80144b4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80144b6:	2b00      	cmp	r3, #0
 80144b8:	d102      	bne.n	80144c0 <tcp_process+0x394>
          /* listen pcb might be closed by now */
          err = ERR_VAL;
 80144ba:	23fa      	movs	r3, #250	; 0xfa
 80144bc:	76bb      	strb	r3, [r7, #26]
 80144be:	e011      	b.n	80144e4 <tcp_process+0x3b8>
        } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
        {
          tcp_backlog_accepted(pcb);
          /* Call the accept function. */
          TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 80144c0:	687b      	ldr	r3, [r7, #4]
 80144c2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80144c4:	699b      	ldr	r3, [r3, #24]
 80144c6:	2b00      	cmp	r3, #0
 80144c8:	d00a      	beq.n	80144e0 <tcp_process+0x3b4>
 80144ca:	687b      	ldr	r3, [r7, #4]
 80144cc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80144ce:	699b      	ldr	r3, [r3, #24]
 80144d0:	687a      	ldr	r2, [r7, #4]
 80144d2:	6910      	ldr	r0, [r2, #16]
 80144d4:	2200      	movs	r2, #0
 80144d6:	6879      	ldr	r1, [r7, #4]
 80144d8:	4798      	blx	r3
 80144da:	4603      	mov	r3, r0
 80144dc:	76bb      	strb	r3, [r7, #26]
 80144de:	e001      	b.n	80144e4 <tcp_process+0x3b8>
 80144e0:	23f0      	movs	r3, #240	; 0xf0
 80144e2:	76bb      	strb	r3, [r7, #26]
        }
        if (err != ERR_OK) {
 80144e4:	f997 301a 	ldrsb.w	r3, [r7, #26]
 80144e8:	2b00      	cmp	r3, #0
 80144ea:	d00a      	beq.n	8014502 <tcp_process+0x3d6>
          /* If the accept function returns with an error, we abort
           * the connection. */
          /* Already aborted? */
          if (err != ERR_ABRT) {
 80144ec:	f997 301a 	ldrsb.w	r3, [r7, #26]
 80144f0:	f113 0f0d 	cmn.w	r3, #13
 80144f4:	d002      	beq.n	80144fc <tcp_process+0x3d0>
            tcp_abort(pcb);
 80144f6:	6878      	ldr	r0, [r7, #4]
 80144f8:	f7fd ff54 	bl	80123a4 <tcp_abort>
          }
          return ERR_ABRT;
 80144fc:	f06f 030c 	mvn.w	r3, #12
 8014500:	e1bd      	b.n	801487e <tcp_process+0x752>
        }
        /* If there was any data contained within this ACK,
         * we'd better pass it on to the application as well. */
        tcp_receive(pcb);
 8014502:	6878      	ldr	r0, [r7, #4]
 8014504:	f000 fa42 	bl	801498c <tcp_receive>

        /* Prevent ACK for SYN to generate a sent event */
        if (recv_acked != 0) {
 8014508:	4b6a      	ldr	r3, [pc, #424]	; (80146b4 <tcp_process+0x588>)
 801450a:	881b      	ldrh	r3, [r3, #0]
 801450c:	2b00      	cmp	r3, #0
 801450e:	d005      	beq.n	801451c <tcp_process+0x3f0>
          recv_acked--;
 8014510:	4b68      	ldr	r3, [pc, #416]	; (80146b4 <tcp_process+0x588>)
 8014512:	881b      	ldrh	r3, [r3, #0]
 8014514:	3b01      	subs	r3, #1
 8014516:	b29a      	uxth	r2, r3
 8014518:	4b66      	ldr	r3, [pc, #408]	; (80146b4 <tcp_process+0x588>)
 801451a:	801a      	strh	r2, [r3, #0]
        }

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 801451c:	687b      	ldr	r3, [r7, #4]
 801451e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8014520:	005b      	lsls	r3, r3, #1
 8014522:	f241 121c 	movw	r2, #4380	; 0x111c
 8014526:	429a      	cmp	r2, r3
 8014528:	bf38      	it	cc
 801452a:	461a      	movcc	r2, r3
 801452c:	687b      	ldr	r3, [r7, #4]
 801452e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8014530:	009b      	lsls	r3, r3, #2
 8014532:	4293      	cmp	r3, r2
 8014534:	bf28      	it	cs
 8014536:	4613      	movcs	r3, r2
 8014538:	b29a      	uxth	r2, r3
 801453a:	687b      	ldr	r3, [r7, #4]
 801453c:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));

        if (recv_flags & TF_GOT_FIN) {
 8014540:	4b5d      	ldr	r3, [pc, #372]	; (80146b8 <tcp_process+0x58c>)
 8014542:	781b      	ldrb	r3, [r3, #0]
 8014544:	f003 0320 	and.w	r3, r3, #32
 8014548:	2b00      	cmp	r3, #0
 801454a:	d034      	beq.n	80145b6 <tcp_process+0x48a>
          tcp_ack_now(pcb);
 801454c:	687b      	ldr	r3, [r7, #4]
 801454e:	7e9b      	ldrb	r3, [r3, #26]
 8014550:	f043 0302 	orr.w	r3, r3, #2
 8014554:	b2da      	uxtb	r2, r3
 8014556:	687b      	ldr	r3, [r7, #4]
 8014558:	769a      	strb	r2, [r3, #26]
          pcb->state = CLOSE_WAIT;
 801455a:	687b      	ldr	r3, [r7, #4]
 801455c:	2207      	movs	r2, #7
 801455e:	751a      	strb	r2, [r3, #20]
        if (recv_flags & TF_GOT_FIN) {
 8014560:	e029      	b.n	80145b6 <tcp_process+0x48a>
        }
      } else {
        /* incorrect ACK number, send RST */
        tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 8014562:	4b4b      	ldr	r3, [pc, #300]	; (8014690 <tcp_process+0x564>)
 8014564:	6818      	ldr	r0, [r3, #0]
 8014566:	4b4b      	ldr	r3, [pc, #300]	; (8014694 <tcp_process+0x568>)
 8014568:	881b      	ldrh	r3, [r3, #0]
 801456a:	461a      	mov	r2, r3
 801456c:	4b4a      	ldr	r3, [pc, #296]	; (8014698 <tcp_process+0x56c>)
 801456e:	681b      	ldr	r3, [r3, #0]
 8014570:	18d1      	adds	r1, r2, r3
          ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8014572:	4b4a      	ldr	r3, [pc, #296]	; (801469c <tcp_process+0x570>)
 8014574:	681b      	ldr	r3, [r3, #0]
        tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 8014576:	885b      	ldrh	r3, [r3, #2]
 8014578:	b29b      	uxth	r3, r3
          ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801457a:	4a48      	ldr	r2, [pc, #288]	; (801469c <tcp_process+0x570>)
 801457c:	6812      	ldr	r2, [r2, #0]
        tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 801457e:	8812      	ldrh	r2, [r2, #0]
 8014580:	b292      	uxth	r2, r2
 8014582:	9201      	str	r2, [sp, #4]
 8014584:	9300      	str	r3, [sp, #0]
 8014586:	4b46      	ldr	r3, [pc, #280]	; (80146a0 <tcp_process+0x574>)
 8014588:	4a46      	ldr	r2, [pc, #280]	; (80146a4 <tcp_process+0x578>)
 801458a:	f002 fbff 	bl	8016d8c <tcp_rst>
      }
    } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
      /* Looks like another copy of the SYN - retransmit our SYN-ACK */
      tcp_rexmit(pcb);
    }
    break;
 801458e:	e16a      	b.n	8014866 <tcp_process+0x73a>
    } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 8014590:	4b3e      	ldr	r3, [pc, #248]	; (801468c <tcp_process+0x560>)
 8014592:	781b      	ldrb	r3, [r3, #0]
 8014594:	f003 0302 	and.w	r3, r3, #2
 8014598:	2b00      	cmp	r3, #0
 801459a:	f000 8164 	beq.w	8014866 <tcp_process+0x73a>
 801459e:	687b      	ldr	r3, [r7, #4]
 80145a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80145a2:	1e5a      	subs	r2, r3, #1
 80145a4:	4b3c      	ldr	r3, [pc, #240]	; (8014698 <tcp_process+0x56c>)
 80145a6:	681b      	ldr	r3, [r3, #0]
 80145a8:	429a      	cmp	r2, r3
 80145aa:	f040 815c 	bne.w	8014866 <tcp_process+0x73a>
      tcp_rexmit(pcb);
 80145ae:	6878      	ldr	r0, [r7, #4]
 80145b0:	f002 fc98 	bl	8016ee4 <tcp_rexmit>
    break;
 80145b4:	e157      	b.n	8014866 <tcp_process+0x73a>
 80145b6:	e156      	b.n	8014866 <tcp_process+0x73a>
  case CLOSE_WAIT:
    /* FALLTHROUGH */
  case ESTABLISHED:
    tcp_receive(pcb);
 80145b8:	6878      	ldr	r0, [r7, #4]
 80145ba:	f000 f9e7 	bl	801498c <tcp_receive>
    if (recv_flags & TF_GOT_FIN) { /* passive close */
 80145be:	4b3e      	ldr	r3, [pc, #248]	; (80146b8 <tcp_process+0x58c>)
 80145c0:	781b      	ldrb	r3, [r3, #0]
 80145c2:	f003 0320 	and.w	r3, r3, #32
 80145c6:	2b00      	cmp	r3, #0
 80145c8:	f000 814f 	beq.w	801486a <tcp_process+0x73e>
      tcp_ack_now(pcb);
 80145cc:	687b      	ldr	r3, [r7, #4]
 80145ce:	7e9b      	ldrb	r3, [r3, #26]
 80145d0:	f043 0302 	orr.w	r3, r3, #2
 80145d4:	b2da      	uxtb	r2, r3
 80145d6:	687b      	ldr	r3, [r7, #4]
 80145d8:	769a      	strb	r2, [r3, #26]
      pcb->state = CLOSE_WAIT;
 80145da:	687b      	ldr	r3, [r7, #4]
 80145dc:	2207      	movs	r2, #7
 80145de:	751a      	strb	r2, [r3, #20]
    }
    break;
 80145e0:	e143      	b.n	801486a <tcp_process+0x73e>
  case FIN_WAIT_1:
    tcp_receive(pcb);
 80145e2:	6878      	ldr	r0, [r7, #4]
 80145e4:	f000 f9d2 	bl	801498c <tcp_receive>
    if (recv_flags & TF_GOT_FIN) {
 80145e8:	4b33      	ldr	r3, [pc, #204]	; (80146b8 <tcp_process+0x58c>)
 80145ea:	781b      	ldrb	r3, [r3, #0]
 80145ec:	f003 0320 	and.w	r3, r3, #32
 80145f0:	2b00      	cmp	r3, #0
 80145f2:	d074      	beq.n	80146de <tcp_process+0x5b2>
      if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 80145f4:	4b25      	ldr	r3, [pc, #148]	; (801468c <tcp_process+0x560>)
 80145f6:	781b      	ldrb	r3, [r3, #0]
 80145f8:	f003 0310 	and.w	r3, r3, #16
 80145fc:	2b00      	cmp	r3, #0
 80145fe:	d063      	beq.n	80146c8 <tcp_process+0x59c>
 8014600:	687b      	ldr	r3, [r7, #4]
 8014602:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8014604:	4b22      	ldr	r3, [pc, #136]	; (8014690 <tcp_process+0x564>)
 8014606:	681b      	ldr	r3, [r3, #0]
 8014608:	429a      	cmp	r2, r3
 801460a:	d15d      	bne.n	80146c8 <tcp_process+0x59c>
          pcb->unsent == NULL) {
 801460c:	687b      	ldr	r3, [r7, #4]
 801460e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
      if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8014610:	2b00      	cmp	r3, #0
 8014612:	d159      	bne.n	80146c8 <tcp_process+0x59c>
        LWIP_DEBUGF(TCP_DEBUG,
          ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 8014614:	687b      	ldr	r3, [r7, #4]
 8014616:	7e9b      	ldrb	r3, [r3, #26]
 8014618:	f043 0302 	orr.w	r3, r3, #2
 801461c:	b2da      	uxtb	r2, r3
 801461e:	687b      	ldr	r3, [r7, #4]
 8014620:	769a      	strb	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 8014622:	6878      	ldr	r0, [r7, #4]
 8014624:	f7fe fee6 	bl	80133f4 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8014628:	4b24      	ldr	r3, [pc, #144]	; (80146bc <tcp_process+0x590>)
 801462a:	681b      	ldr	r3, [r3, #0]
 801462c:	687a      	ldr	r2, [r7, #4]
 801462e:	429a      	cmp	r2, r3
 8014630:	d105      	bne.n	801463e <tcp_process+0x512>
 8014632:	4b22      	ldr	r3, [pc, #136]	; (80146bc <tcp_process+0x590>)
 8014634:	681b      	ldr	r3, [r3, #0]
 8014636:	68db      	ldr	r3, [r3, #12]
 8014638:	4a20      	ldr	r2, [pc, #128]	; (80146bc <tcp_process+0x590>)
 801463a:	6013      	str	r3, [r2, #0]
 801463c:	e013      	b.n	8014666 <tcp_process+0x53a>
 801463e:	4b1f      	ldr	r3, [pc, #124]	; (80146bc <tcp_process+0x590>)
 8014640:	681b      	ldr	r3, [r3, #0]
 8014642:	617b      	str	r3, [r7, #20]
 8014644:	e00c      	b.n	8014660 <tcp_process+0x534>
 8014646:	697b      	ldr	r3, [r7, #20]
 8014648:	68db      	ldr	r3, [r3, #12]
 801464a:	687a      	ldr	r2, [r7, #4]
 801464c:	429a      	cmp	r2, r3
 801464e:	d104      	bne.n	801465a <tcp_process+0x52e>
 8014650:	687b      	ldr	r3, [r7, #4]
 8014652:	68da      	ldr	r2, [r3, #12]
 8014654:	697b      	ldr	r3, [r7, #20]
 8014656:	60da      	str	r2, [r3, #12]
 8014658:	e005      	b.n	8014666 <tcp_process+0x53a>
 801465a:	697b      	ldr	r3, [r7, #20]
 801465c:	68db      	ldr	r3, [r3, #12]
 801465e:	617b      	str	r3, [r7, #20]
 8014660:	697b      	ldr	r3, [r7, #20]
 8014662:	2b00      	cmp	r3, #0
 8014664:	d1ef      	bne.n	8014646 <tcp_process+0x51a>
 8014666:	687b      	ldr	r3, [r7, #4]
 8014668:	2200      	movs	r2, #0
 801466a:	60da      	str	r2, [r3, #12]
 801466c:	4b14      	ldr	r3, [pc, #80]	; (80146c0 <tcp_process+0x594>)
 801466e:	2201      	movs	r2, #1
 8014670:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8014672:	687b      	ldr	r3, [r7, #4]
 8014674:	220a      	movs	r2, #10
 8014676:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8014678:	4b12      	ldr	r3, [pc, #72]	; (80146c4 <tcp_process+0x598>)
 801467a:	681a      	ldr	r2, [r3, #0]
 801467c:	687b      	ldr	r3, [r7, #4]
 801467e:	60da      	str	r2, [r3, #12]
 8014680:	4a10      	ldr	r2, [pc, #64]	; (80146c4 <tcp_process+0x598>)
 8014682:	687b      	ldr	r3, [r7, #4]
 8014684:	6013      	str	r3, [r2, #0]
 8014686:	f002 fdd1 	bl	801722c <tcp_timer_needed>
      }
    } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
               pcb->unsent == NULL) {
      pcb->state = FIN_WAIT_2;
    }
    break;
 801468a:	e0f0      	b.n	801486e <tcp_process+0x742>
 801468c:	20004234 	.word	0x20004234
 8014690:	2000422c 	.word	0x2000422c
 8014694:	20004232 	.word	0x20004232
 8014698:	20004228 	.word	0x20004228
 801469c:	20004218 	.word	0x20004218
 80146a0:	20007648 	.word	0x20007648
 80146a4:	2000764c 	.word	0x2000764c
 80146a8:	0801d710 	.word	0x0801d710
 80146ac:	0801d914 	.word	0x0801d914
 80146b0:	0801d754 	.word	0x0801d754
 80146b4:	20004230 	.word	0x20004230
 80146b8:	20004235 	.word	0x20004235
 80146bc:	2000ab40 	.word	0x2000ab40
 80146c0:	2000ab3c 	.word	0x2000ab3c
 80146c4:	2000ab50 	.word	0x2000ab50
        tcp_ack_now(pcb);
 80146c8:	687b      	ldr	r3, [r7, #4]
 80146ca:	7e9b      	ldrb	r3, [r3, #26]
 80146cc:	f043 0302 	orr.w	r3, r3, #2
 80146d0:	b2da      	uxtb	r2, r3
 80146d2:	687b      	ldr	r3, [r7, #4]
 80146d4:	769a      	strb	r2, [r3, #26]
        pcb->state = CLOSING;
 80146d6:	687b      	ldr	r3, [r7, #4]
 80146d8:	2208      	movs	r2, #8
 80146da:	751a      	strb	r2, [r3, #20]
    break;
 80146dc:	e0c7      	b.n	801486e <tcp_process+0x742>
    } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 80146de:	4b6a      	ldr	r3, [pc, #424]	; (8014888 <tcp_process+0x75c>)
 80146e0:	781b      	ldrb	r3, [r3, #0]
 80146e2:	f003 0310 	and.w	r3, r3, #16
 80146e6:	2b00      	cmp	r3, #0
 80146e8:	f000 80c1 	beq.w	801486e <tcp_process+0x742>
 80146ec:	687b      	ldr	r3, [r7, #4]
 80146ee:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80146f0:	4b66      	ldr	r3, [pc, #408]	; (801488c <tcp_process+0x760>)
 80146f2:	681b      	ldr	r3, [r3, #0]
 80146f4:	429a      	cmp	r2, r3
 80146f6:	f040 80ba 	bne.w	801486e <tcp_process+0x742>
               pcb->unsent == NULL) {
 80146fa:	687b      	ldr	r3, [r7, #4]
 80146fc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
    } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 80146fe:	2b00      	cmp	r3, #0
 8014700:	f040 80b5 	bne.w	801486e <tcp_process+0x742>
      pcb->state = FIN_WAIT_2;
 8014704:	687b      	ldr	r3, [r7, #4]
 8014706:	2206      	movs	r2, #6
 8014708:	751a      	strb	r2, [r3, #20]
    break;
 801470a:	e0b0      	b.n	801486e <tcp_process+0x742>
  case FIN_WAIT_2:
    tcp_receive(pcb);
 801470c:	6878      	ldr	r0, [r7, #4]
 801470e:	f000 f93d 	bl	801498c <tcp_receive>
    if (recv_flags & TF_GOT_FIN) {
 8014712:	4b5f      	ldr	r3, [pc, #380]	; (8014890 <tcp_process+0x764>)
 8014714:	781b      	ldrb	r3, [r3, #0]
 8014716:	f003 0320 	and.w	r3, r3, #32
 801471a:	2b00      	cmp	r3, #0
 801471c:	f000 80a9 	beq.w	8014872 <tcp_process+0x746>
      LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
      tcp_ack_now(pcb);
 8014720:	687b      	ldr	r3, [r7, #4]
 8014722:	7e9b      	ldrb	r3, [r3, #26]
 8014724:	f043 0302 	orr.w	r3, r3, #2
 8014728:	b2da      	uxtb	r2, r3
 801472a:	687b      	ldr	r3, [r7, #4]
 801472c:	769a      	strb	r2, [r3, #26]
      tcp_pcb_purge(pcb);
 801472e:	6878      	ldr	r0, [r7, #4]
 8014730:	f7fe fe60 	bl	80133f4 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 8014734:	4b57      	ldr	r3, [pc, #348]	; (8014894 <tcp_process+0x768>)
 8014736:	681b      	ldr	r3, [r3, #0]
 8014738:	687a      	ldr	r2, [r7, #4]
 801473a:	429a      	cmp	r2, r3
 801473c:	d105      	bne.n	801474a <tcp_process+0x61e>
 801473e:	4b55      	ldr	r3, [pc, #340]	; (8014894 <tcp_process+0x768>)
 8014740:	681b      	ldr	r3, [r3, #0]
 8014742:	68db      	ldr	r3, [r3, #12]
 8014744:	4a53      	ldr	r2, [pc, #332]	; (8014894 <tcp_process+0x768>)
 8014746:	6013      	str	r3, [r2, #0]
 8014748:	e013      	b.n	8014772 <tcp_process+0x646>
 801474a:	4b52      	ldr	r3, [pc, #328]	; (8014894 <tcp_process+0x768>)
 801474c:	681b      	ldr	r3, [r3, #0]
 801474e:	613b      	str	r3, [r7, #16]
 8014750:	e00c      	b.n	801476c <tcp_process+0x640>
 8014752:	693b      	ldr	r3, [r7, #16]
 8014754:	68db      	ldr	r3, [r3, #12]
 8014756:	687a      	ldr	r2, [r7, #4]
 8014758:	429a      	cmp	r2, r3
 801475a:	d104      	bne.n	8014766 <tcp_process+0x63a>
 801475c:	687b      	ldr	r3, [r7, #4]
 801475e:	68da      	ldr	r2, [r3, #12]
 8014760:	693b      	ldr	r3, [r7, #16]
 8014762:	60da      	str	r2, [r3, #12]
 8014764:	e005      	b.n	8014772 <tcp_process+0x646>
 8014766:	693b      	ldr	r3, [r7, #16]
 8014768:	68db      	ldr	r3, [r3, #12]
 801476a:	613b      	str	r3, [r7, #16]
 801476c:	693b      	ldr	r3, [r7, #16]
 801476e:	2b00      	cmp	r3, #0
 8014770:	d1ef      	bne.n	8014752 <tcp_process+0x626>
 8014772:	687b      	ldr	r3, [r7, #4]
 8014774:	2200      	movs	r2, #0
 8014776:	60da      	str	r2, [r3, #12]
 8014778:	4b47      	ldr	r3, [pc, #284]	; (8014898 <tcp_process+0x76c>)
 801477a:	2201      	movs	r2, #1
 801477c:	701a      	strb	r2, [r3, #0]
      pcb->state = TIME_WAIT;
 801477e:	687b      	ldr	r3, [r7, #4]
 8014780:	220a      	movs	r2, #10
 8014782:	751a      	strb	r2, [r3, #20]
      TCP_REG(&tcp_tw_pcbs, pcb);
 8014784:	4b45      	ldr	r3, [pc, #276]	; (801489c <tcp_process+0x770>)
 8014786:	681a      	ldr	r2, [r3, #0]
 8014788:	687b      	ldr	r3, [r7, #4]
 801478a:	60da      	str	r2, [r3, #12]
 801478c:	4a43      	ldr	r2, [pc, #268]	; (801489c <tcp_process+0x770>)
 801478e:	687b      	ldr	r3, [r7, #4]
 8014790:	6013      	str	r3, [r2, #0]
 8014792:	f002 fd4b 	bl	801722c <tcp_timer_needed>
    }
    break;
 8014796:	e06c      	b.n	8014872 <tcp_process+0x746>
  case CLOSING:
    tcp_receive(pcb);
 8014798:	6878      	ldr	r0, [r7, #4]
 801479a:	f000 f8f7 	bl	801498c <tcp_receive>
    if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 801479e:	4b3a      	ldr	r3, [pc, #232]	; (8014888 <tcp_process+0x75c>)
 80147a0:	781b      	ldrb	r3, [r3, #0]
 80147a2:	f003 0310 	and.w	r3, r3, #16
 80147a6:	2b00      	cmp	r3, #0
 80147a8:	d065      	beq.n	8014876 <tcp_process+0x74a>
 80147aa:	687b      	ldr	r3, [r7, #4]
 80147ac:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80147ae:	4b37      	ldr	r3, [pc, #220]	; (801488c <tcp_process+0x760>)
 80147b0:	681b      	ldr	r3, [r3, #0]
 80147b2:	429a      	cmp	r2, r3
 80147b4:	d15f      	bne.n	8014876 <tcp_process+0x74a>
 80147b6:	687b      	ldr	r3, [r7, #4]
 80147b8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80147ba:	2b00      	cmp	r3, #0
 80147bc:	d15b      	bne.n	8014876 <tcp_process+0x74a>
      LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
      tcp_pcb_purge(pcb);
 80147be:	6878      	ldr	r0, [r7, #4]
 80147c0:	f7fe fe18 	bl	80133f4 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 80147c4:	4b33      	ldr	r3, [pc, #204]	; (8014894 <tcp_process+0x768>)
 80147c6:	681b      	ldr	r3, [r3, #0]
 80147c8:	687a      	ldr	r2, [r7, #4]
 80147ca:	429a      	cmp	r2, r3
 80147cc:	d105      	bne.n	80147da <tcp_process+0x6ae>
 80147ce:	4b31      	ldr	r3, [pc, #196]	; (8014894 <tcp_process+0x768>)
 80147d0:	681b      	ldr	r3, [r3, #0]
 80147d2:	68db      	ldr	r3, [r3, #12]
 80147d4:	4a2f      	ldr	r2, [pc, #188]	; (8014894 <tcp_process+0x768>)
 80147d6:	6013      	str	r3, [r2, #0]
 80147d8:	e013      	b.n	8014802 <tcp_process+0x6d6>
 80147da:	4b2e      	ldr	r3, [pc, #184]	; (8014894 <tcp_process+0x768>)
 80147dc:	681b      	ldr	r3, [r3, #0]
 80147de:	60fb      	str	r3, [r7, #12]
 80147e0:	e00c      	b.n	80147fc <tcp_process+0x6d0>
 80147e2:	68fb      	ldr	r3, [r7, #12]
 80147e4:	68db      	ldr	r3, [r3, #12]
 80147e6:	687a      	ldr	r2, [r7, #4]
 80147e8:	429a      	cmp	r2, r3
 80147ea:	d104      	bne.n	80147f6 <tcp_process+0x6ca>
 80147ec:	687b      	ldr	r3, [r7, #4]
 80147ee:	68da      	ldr	r2, [r3, #12]
 80147f0:	68fb      	ldr	r3, [r7, #12]
 80147f2:	60da      	str	r2, [r3, #12]
 80147f4:	e005      	b.n	8014802 <tcp_process+0x6d6>
 80147f6:	68fb      	ldr	r3, [r7, #12]
 80147f8:	68db      	ldr	r3, [r3, #12]
 80147fa:	60fb      	str	r3, [r7, #12]
 80147fc:	68fb      	ldr	r3, [r7, #12]
 80147fe:	2b00      	cmp	r3, #0
 8014800:	d1ef      	bne.n	80147e2 <tcp_process+0x6b6>
 8014802:	687b      	ldr	r3, [r7, #4]
 8014804:	2200      	movs	r2, #0
 8014806:	60da      	str	r2, [r3, #12]
 8014808:	4b23      	ldr	r3, [pc, #140]	; (8014898 <tcp_process+0x76c>)
 801480a:	2201      	movs	r2, #1
 801480c:	701a      	strb	r2, [r3, #0]
      pcb->state = TIME_WAIT;
 801480e:	687b      	ldr	r3, [r7, #4]
 8014810:	220a      	movs	r2, #10
 8014812:	751a      	strb	r2, [r3, #20]
      TCP_REG(&tcp_tw_pcbs, pcb);
 8014814:	4b21      	ldr	r3, [pc, #132]	; (801489c <tcp_process+0x770>)
 8014816:	681a      	ldr	r2, [r3, #0]
 8014818:	687b      	ldr	r3, [r7, #4]
 801481a:	60da      	str	r2, [r3, #12]
 801481c:	4a1f      	ldr	r2, [pc, #124]	; (801489c <tcp_process+0x770>)
 801481e:	687b      	ldr	r3, [r7, #4]
 8014820:	6013      	str	r3, [r2, #0]
 8014822:	f002 fd03 	bl	801722c <tcp_timer_needed>
    }
    break;
 8014826:	e026      	b.n	8014876 <tcp_process+0x74a>
  case LAST_ACK:
    tcp_receive(pcb);
 8014828:	6878      	ldr	r0, [r7, #4]
 801482a:	f000 f8af 	bl	801498c <tcp_receive>
    if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 801482e:	4b16      	ldr	r3, [pc, #88]	; (8014888 <tcp_process+0x75c>)
 8014830:	781b      	ldrb	r3, [r3, #0]
 8014832:	f003 0310 	and.w	r3, r3, #16
 8014836:	2b00      	cmp	r3, #0
 8014838:	d01f      	beq.n	801487a <tcp_process+0x74e>
 801483a:	687b      	ldr	r3, [r7, #4]
 801483c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 801483e:	4b13      	ldr	r3, [pc, #76]	; (801488c <tcp_process+0x760>)
 8014840:	681b      	ldr	r3, [r3, #0]
 8014842:	429a      	cmp	r2, r3
 8014844:	d119      	bne.n	801487a <tcp_process+0x74e>
 8014846:	687b      	ldr	r3, [r7, #4]
 8014848:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801484a:	2b00      	cmp	r3, #0
 801484c:	d115      	bne.n	801487a <tcp_process+0x74e>
      LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
      /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
      recv_flags |= TF_CLOSED;
 801484e:	4b10      	ldr	r3, [pc, #64]	; (8014890 <tcp_process+0x764>)
 8014850:	781b      	ldrb	r3, [r3, #0]
 8014852:	f043 0310 	orr.w	r3, r3, #16
 8014856:	b2da      	uxtb	r2, r3
 8014858:	4b0d      	ldr	r3, [pc, #52]	; (8014890 <tcp_process+0x764>)
 801485a:	701a      	strb	r2, [r3, #0]
    }
    break;
 801485c:	e00d      	b.n	801487a <tcp_process+0x74e>
  default:
    break;
 801485e:	bf00      	nop
 8014860:	e00c      	b.n	801487c <tcp_process+0x750>
    break;
 8014862:	bf00      	nop
 8014864:	e00a      	b.n	801487c <tcp_process+0x750>
    break;
 8014866:	bf00      	nop
 8014868:	e008      	b.n	801487c <tcp_process+0x750>
    break;
 801486a:	bf00      	nop
 801486c:	e006      	b.n	801487c <tcp_process+0x750>
    break;
 801486e:	bf00      	nop
 8014870:	e004      	b.n	801487c <tcp_process+0x750>
    break;
 8014872:	bf00      	nop
 8014874:	e002      	b.n	801487c <tcp_process+0x750>
    break;
 8014876:	bf00      	nop
 8014878:	e000      	b.n	801487c <tcp_process+0x750>
    break;
 801487a:	bf00      	nop
  }
  return ERR_OK;
 801487c:	2300      	movs	r3, #0
}
 801487e:	4618      	mov	r0, r3
 8014880:	3720      	adds	r7, #32
 8014882:	46bd      	mov	sp, r7
 8014884:	bd80      	pop	{r7, pc}
 8014886:	bf00      	nop
 8014888:	20004234 	.word	0x20004234
 801488c:	2000422c 	.word	0x2000422c
 8014890:	20004235 	.word	0x20004235
 8014894:	2000ab40 	.word	0x2000ab40
 8014898:	2000ab3c 	.word	0x2000ab3c
 801489c:	2000ab50 	.word	0x2000ab50

080148a0 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 80148a0:	b590      	push	{r4, r7, lr}
 80148a2:	b085      	sub	sp, #20
 80148a4:	af00      	add	r7, sp, #0
 80148a6:	6078      	str	r0, [r7, #4]
 80148a8:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 80148aa:	687b      	ldr	r3, [r7, #4]
 80148ac:	68db      	ldr	r3, [r3, #12]
 80148ae:	899b      	ldrh	r3, [r3, #12]
 80148b0:	b29b      	uxth	r3, r3
 80148b2:	4618      	mov	r0, r3
 80148b4:	f7fb fe96 	bl	80105e4 <lwip_htons>
 80148b8:	4603      	mov	r3, r0
 80148ba:	f003 0301 	and.w	r3, r3, #1
 80148be:	2b00      	cmp	r3, #0
 80148c0:	d027      	beq.n	8014912 <tcp_oos_insert_segment+0x72>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 80148c2:	6838      	ldr	r0, [r7, #0]
 80148c4:	f7fe fb2d 	bl	8012f22 <tcp_segs_free>
    next = NULL;
 80148c8:	2300      	movs	r3, #0
 80148ca:	603b      	str	r3, [r7, #0]
 80148cc:	e055      	b.n	801497a <tcp_oos_insert_segment+0xda>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                      (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 80148ce:	683b      	ldr	r3, [r7, #0]
 80148d0:	68db      	ldr	r3, [r3, #12]
 80148d2:	899b      	ldrh	r3, [r3, #12]
 80148d4:	b29b      	uxth	r3, r3
 80148d6:	4618      	mov	r0, r3
 80148d8:	f7fb fe84 	bl	80105e4 <lwip_htons>
 80148dc:	4603      	mov	r3, r0
 80148de:	f003 0301 	and.w	r3, r3, #1
 80148e2:	2b00      	cmp	r3, #0
 80148e4:	d00d      	beq.n	8014902 <tcp_oos_insert_segment+0x62>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 80148e6:	687b      	ldr	r3, [r7, #4]
 80148e8:	68db      	ldr	r3, [r3, #12]
 80148ea:	899b      	ldrh	r3, [r3, #12]
 80148ec:	b29c      	uxth	r4, r3
 80148ee:	2001      	movs	r0, #1
 80148f0:	f7fb fe78 	bl	80105e4 <lwip_htons>
 80148f4:	4603      	mov	r3, r0
 80148f6:	461a      	mov	r2, r3
 80148f8:	687b      	ldr	r3, [r7, #4]
 80148fa:	68db      	ldr	r3, [r3, #12]
 80148fc:	4322      	orrs	r2, r4
 80148fe:	b292      	uxth	r2, r2
 8014900:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 8014902:	683b      	ldr	r3, [r7, #0]
 8014904:	60fb      	str	r3, [r7, #12]
      next = next->next;
 8014906:	683b      	ldr	r3, [r7, #0]
 8014908:	681b      	ldr	r3, [r3, #0]
 801490a:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 801490c:	68f8      	ldr	r0, [r7, #12]
 801490e:	f7fe fb1c 	bl	8012f4a <tcp_seg_free>
    while (next &&
 8014912:	683b      	ldr	r3, [r7, #0]
 8014914:	2b00      	cmp	r3, #0
 8014916:	d00e      	beq.n	8014936 <tcp_oos_insert_segment+0x96>
           TCP_SEQ_GEQ((seqno + cseg->len),
 8014918:	687b      	ldr	r3, [r7, #4]
 801491a:	891b      	ldrh	r3, [r3, #8]
 801491c:	461a      	mov	r2, r3
 801491e:	4b1a      	ldr	r3, [pc, #104]	; (8014988 <tcp_oos_insert_segment+0xe8>)
 8014920:	681b      	ldr	r3, [r3, #0]
 8014922:	441a      	add	r2, r3
 8014924:	683b      	ldr	r3, [r7, #0]
 8014926:	68db      	ldr	r3, [r3, #12]
 8014928:	685b      	ldr	r3, [r3, #4]
 801492a:	6839      	ldr	r1, [r7, #0]
 801492c:	8909      	ldrh	r1, [r1, #8]
 801492e:	440b      	add	r3, r1
 8014930:	1ad3      	subs	r3, r2, r3
    while (next &&
 8014932:	2b00      	cmp	r3, #0
 8014934:	dacb      	bge.n	80148ce <tcp_oos_insert_segment+0x2e>
    }
    if (next &&
 8014936:	683b      	ldr	r3, [r7, #0]
 8014938:	2b00      	cmp	r3, #0
 801493a:	d01e      	beq.n	801497a <tcp_oos_insert_segment+0xda>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 801493c:	687b      	ldr	r3, [r7, #4]
 801493e:	891b      	ldrh	r3, [r3, #8]
 8014940:	461a      	mov	r2, r3
 8014942:	4b11      	ldr	r3, [pc, #68]	; (8014988 <tcp_oos_insert_segment+0xe8>)
 8014944:	681b      	ldr	r3, [r3, #0]
 8014946:	441a      	add	r2, r3
 8014948:	683b      	ldr	r3, [r7, #0]
 801494a:	68db      	ldr	r3, [r3, #12]
 801494c:	685b      	ldr	r3, [r3, #4]
 801494e:	1ad3      	subs	r3, r2, r3
    if (next &&
 8014950:	2b00      	cmp	r3, #0
 8014952:	dd12      	ble.n	801497a <tcp_oos_insert_segment+0xda>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 8014954:	683b      	ldr	r3, [r7, #0]
 8014956:	68db      	ldr	r3, [r3, #12]
 8014958:	685b      	ldr	r3, [r3, #4]
 801495a:	b29a      	uxth	r2, r3
 801495c:	4b0a      	ldr	r3, [pc, #40]	; (8014988 <tcp_oos_insert_segment+0xe8>)
 801495e:	681b      	ldr	r3, [r3, #0]
 8014960:	b29b      	uxth	r3, r3
 8014962:	1ad3      	subs	r3, r2, r3
 8014964:	b29a      	uxth	r2, r3
 8014966:	687b      	ldr	r3, [r7, #4]
 8014968:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 801496a:	687b      	ldr	r3, [r7, #4]
 801496c:	685a      	ldr	r2, [r3, #4]
 801496e:	687b      	ldr	r3, [r7, #4]
 8014970:	891b      	ldrh	r3, [r3, #8]
 8014972:	4619      	mov	r1, r3
 8014974:	4610      	mov	r0, r2
 8014976:	f7fc fe5b 	bl	8011630 <pbuf_realloc>
    }
  }
  cseg->next = next;
 801497a:	687b      	ldr	r3, [r7, #4]
 801497c:	683a      	ldr	r2, [r7, #0]
 801497e:	601a      	str	r2, [r3, #0]
}
 8014980:	bf00      	nop
 8014982:	3714      	adds	r7, #20
 8014984:	46bd      	mov	sp, r7
 8014986:	bd90      	pop	{r4, r7, pc}
 8014988:	20004228 	.word	0x20004228

0801498c <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 801498c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801498e:	b08d      	sub	sp, #52	; 0x34
 8014990:	af00      	add	r7, sp, #0
 8014992:	6078      	str	r0, [r7, #4]
#endif /* TCP_QUEUE_OOSEQ */
  s32_t off;
  s16_t m;
  u32_t right_wnd_edge;
  u16_t new_tot_len;
  int found_dupack = 0;
 8014994:	2300      	movs	r3, #0
 8014996:	61fb      	str	r3, [r7, #28]
#if TCP_OOSEQ_MAX_BYTES || TCP_OOSEQ_MAX_PBUFS
  u32_t ooseq_blen;
  u16_t ooseq_qlen;
#endif /* TCP_OOSEQ_MAX_BYTES || TCP_OOSEQ_MAX_PBUFS */

  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 8014998:	687b      	ldr	r3, [r7, #4]
 801499a:	7d1b      	ldrb	r3, [r3, #20]
 801499c:	2b03      	cmp	r3, #3
 801499e:	d806      	bhi.n	80149ae <tcp_receive+0x22>
 80149a0:	4ba6      	ldr	r3, [pc, #664]	; (8014c3c <tcp_receive+0x2b0>)
 80149a2:	f44f 6281 	mov.w	r2, #1032	; 0x408
 80149a6:	49a6      	ldr	r1, [pc, #664]	; (8014c40 <tcp_receive+0x2b4>)
 80149a8:	48a6      	ldr	r0, [pc, #664]	; (8014c44 <tcp_receive+0x2b8>)
 80149aa:	f006 fa21 	bl	801adf0 <iprintf>

  if (flags & TCP_ACK) {
 80149ae:	4ba6      	ldr	r3, [pc, #664]	; (8014c48 <tcp_receive+0x2bc>)
 80149b0:	781b      	ldrb	r3, [r3, #0]
 80149b2:	f003 0310 	and.w	r3, r3, #16
 80149b6:	2b00      	cmp	r3, #0
 80149b8:	f000 82bf 	beq.w	8014f3a <tcp_receive+0x5ae>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 80149bc:	687b      	ldr	r3, [r7, #4]
 80149be:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80149c2:	461a      	mov	r2, r3
 80149c4:	687b      	ldr	r3, [r7, #4]
 80149c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80149c8:	4413      	add	r3, r2
 80149ca:	617b      	str	r3, [r7, #20]

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 80149cc:	687b      	ldr	r3, [r7, #4]
 80149ce:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80149d0:	4b9e      	ldr	r3, [pc, #632]	; (8014c4c <tcp_receive+0x2c0>)
 80149d2:	681b      	ldr	r3, [r3, #0]
 80149d4:	1ad3      	subs	r3, r2, r3
 80149d6:	2b00      	cmp	r3, #0
 80149d8:	db1b      	blt.n	8014a12 <tcp_receive+0x86>
       (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 80149da:	687b      	ldr	r3, [r7, #4]
 80149dc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80149de:	4b9b      	ldr	r3, [pc, #620]	; (8014c4c <tcp_receive+0x2c0>)
 80149e0:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 80149e2:	429a      	cmp	r2, r3
 80149e4:	d106      	bne.n	80149f4 <tcp_receive+0x68>
       (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 80149e6:	687b      	ldr	r3, [r7, #4]
 80149e8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80149ea:	4b99      	ldr	r3, [pc, #612]	; (8014c50 <tcp_receive+0x2c4>)
 80149ec:	681b      	ldr	r3, [r3, #0]
 80149ee:	1ad3      	subs	r3, r2, r3
 80149f0:	2b00      	cmp	r3, #0
 80149f2:	db0e      	blt.n	8014a12 <tcp_receive+0x86>
       (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 80149f4:	687b      	ldr	r3, [r7, #4]
 80149f6:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80149f8:	4b95      	ldr	r3, [pc, #596]	; (8014c50 <tcp_receive+0x2c4>)
 80149fa:	681b      	ldr	r3, [r3, #0]
       (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 80149fc:	429a      	cmp	r2, r3
 80149fe:	d141      	bne.n	8014a84 <tcp_receive+0xf8>
       (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8014a00:	4b94      	ldr	r3, [pc, #592]	; (8014c54 <tcp_receive+0x2c8>)
 8014a02:	681b      	ldr	r3, [r3, #0]
 8014a04:	89db      	ldrh	r3, [r3, #14]
 8014a06:	b29a      	uxth	r2, r3
 8014a08:	687b      	ldr	r3, [r7, #4]
 8014a0a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8014a0e:	429a      	cmp	r2, r3
 8014a10:	d938      	bls.n	8014a84 <tcp_receive+0xf8>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 8014a12:	4b90      	ldr	r3, [pc, #576]	; (8014c54 <tcp_receive+0x2c8>)
 8014a14:	681b      	ldr	r3, [r3, #0]
 8014a16:	89db      	ldrh	r3, [r3, #14]
 8014a18:	b29a      	uxth	r2, r3
 8014a1a:	687b      	ldr	r3, [r7, #4]
 8014a1c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 8014a20:	687b      	ldr	r3, [r7, #4]
 8014a22:	f8b3 205e 	ldrh.w	r2, [r3, #94]	; 0x5e
 8014a26:	687b      	ldr	r3, [r7, #4]
 8014a28:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8014a2c:	429a      	cmp	r2, r3
 8014a2e:	d205      	bcs.n	8014a3c <tcp_receive+0xb0>
        pcb->snd_wnd_max = pcb->snd_wnd;
 8014a30:	687b      	ldr	r3, [r7, #4]
 8014a32:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8014a36:	687b      	ldr	r3, [r7, #4]
 8014a38:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      }
      pcb->snd_wl1 = seqno;
 8014a3c:	4b83      	ldr	r3, [pc, #524]	; (8014c4c <tcp_receive+0x2c0>)
 8014a3e:	681a      	ldr	r2, [r3, #0]
 8014a40:	687b      	ldr	r3, [r7, #4]
 8014a42:	651a      	str	r2, [r3, #80]	; 0x50
      pcb->snd_wl2 = ackno;
 8014a44:	4b82      	ldr	r3, [pc, #520]	; (8014c50 <tcp_receive+0x2c4>)
 8014a46:	681a      	ldr	r2, [r3, #0]
 8014a48:	687b      	ldr	r3, [r7, #4]
 8014a4a:	655a      	str	r2, [r3, #84]	; 0x54
      if (pcb->snd_wnd == 0) {
 8014a4c:	687b      	ldr	r3, [r7, #4]
 8014a4e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8014a52:	2b00      	cmp	r3, #0
 8014a54:	d10d      	bne.n	8014a72 <tcp_receive+0xe6>
        if (pcb->persist_backoff == 0) {
 8014a56:	687b      	ldr	r3, [r7, #4]
 8014a58:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 8014a5c:	2b00      	cmp	r3, #0
 8014a5e:	d111      	bne.n	8014a84 <tcp_receive+0xf8>
          /* start persist timer */
          pcb->persist_cnt = 0;
 8014a60:	687b      	ldr	r3, [r7, #4]
 8014a62:	2200      	movs	r2, #0
 8014a64:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
          pcb->persist_backoff = 1;
 8014a68:	687b      	ldr	r3, [r7, #4]
 8014a6a:	2201      	movs	r2, #1
 8014a6c:	f883 2095 	strb.w	r2, [r3, #149]	; 0x95
 8014a70:	e008      	b.n	8014a84 <tcp_receive+0xf8>
        }
      } else if (pcb->persist_backoff > 0) {
 8014a72:	687b      	ldr	r3, [r7, #4]
 8014a74:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 8014a78:	2b00      	cmp	r3, #0
 8014a7a:	d003      	beq.n	8014a84 <tcp_receive+0xf8>
        /* stop persist timer */
          pcb->persist_backoff = 0;
 8014a7c:	687b      	ldr	r3, [r7, #4]
 8014a7e:	2200      	movs	r2, #0
 8014a80:	f883 2095 	strb.w	r2, [r3, #149]	; 0x95
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 8014a84:	4b72      	ldr	r3, [pc, #456]	; (8014c50 <tcp_receive+0x2c4>)
 8014a86:	681a      	ldr	r2, [r3, #0]
 8014a88:	687b      	ldr	r3, [r7, #4]
 8014a8a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8014a8c:	1ad3      	subs	r3, r2, r3
 8014a8e:	2b00      	cmp	r3, #0
 8014a90:	dc53      	bgt.n	8014b3a <tcp_receive+0x1ae>
      /* Clause 2 */
      if (tcplen == 0) {
 8014a92:	4b71      	ldr	r3, [pc, #452]	; (8014c58 <tcp_receive+0x2cc>)
 8014a94:	881b      	ldrh	r3, [r3, #0]
 8014a96:	2b00      	cmp	r3, #0
 8014a98:	d146      	bne.n	8014b28 <tcp_receive+0x19c>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 8014a9a:	687b      	ldr	r3, [r7, #4]
 8014a9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8014a9e:	687a      	ldr	r2, [r7, #4]
 8014aa0:	f8b2 205c 	ldrh.w	r2, [r2, #92]	; 0x5c
 8014aa4:	4413      	add	r3, r2
 8014aa6:	697a      	ldr	r2, [r7, #20]
 8014aa8:	429a      	cmp	r2, r3
 8014aaa:	d13d      	bne.n	8014b28 <tcp_receive+0x19c>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 8014aac:	687b      	ldr	r3, [r7, #4]
 8014aae:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8014ab2:	2b00      	cmp	r3, #0
 8014ab4:	db38      	blt.n	8014b28 <tcp_receive+0x19c>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 8014ab6:	687b      	ldr	r3, [r7, #4]
 8014ab8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8014aba:	4b65      	ldr	r3, [pc, #404]	; (8014c50 <tcp_receive+0x2c4>)
 8014abc:	681b      	ldr	r3, [r3, #0]
 8014abe:	429a      	cmp	r2, r3
 8014ac0:	d132      	bne.n	8014b28 <tcp_receive+0x19c>
              found_dupack = 1;
 8014ac2:	2301      	movs	r3, #1
 8014ac4:	61fb      	str	r3, [r7, #28]
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 8014ac6:	687b      	ldr	r3, [r7, #4]
 8014ac8:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8014acc:	2bff      	cmp	r3, #255	; 0xff
 8014ace:	d007      	beq.n	8014ae0 <tcp_receive+0x154>
                ++pcb->dupacks;
 8014ad0:	687b      	ldr	r3, [r7, #4]
 8014ad2:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8014ad6:	3301      	adds	r3, #1
 8014ad8:	b2da      	uxtb	r2, r3
 8014ada:	687b      	ldr	r3, [r7, #4]
 8014adc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 8014ae0:	687b      	ldr	r3, [r7, #4]
 8014ae2:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8014ae6:	2b03      	cmp	r3, #3
 8014ae8:	d916      	bls.n	8014b18 <tcp_receive+0x18c>
                /* Inflate the congestion window, but not if it means that
                   the value overflows. */
                if ((tcpwnd_size_t)(pcb->cwnd + pcb->mss) > pcb->cwnd) {
 8014aea:	687b      	ldr	r3, [r7, #4]
 8014aec:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8014af0:	687b      	ldr	r3, [r7, #4]
 8014af2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8014af4:	4413      	add	r3, r2
 8014af6:	b29a      	uxth	r2, r3
 8014af8:	687b      	ldr	r3, [r7, #4]
 8014afa:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8014afe:	429a      	cmp	r2, r3
 8014b00:	d912      	bls.n	8014b28 <tcp_receive+0x19c>
                  pcb->cwnd += pcb->mss;
 8014b02:	687b      	ldr	r3, [r7, #4]
 8014b04:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8014b08:	687b      	ldr	r3, [r7, #4]
 8014b0a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8014b0c:	4413      	add	r3, r2
 8014b0e:	b29a      	uxth	r2, r3
 8014b10:	687b      	ldr	r3, [r7, #4]
 8014b12:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8014b16:	e007      	b.n	8014b28 <tcp_receive+0x19c>
                }
              } else if (pcb->dupacks == 3) {
 8014b18:	687b      	ldr	r3, [r7, #4]
 8014b1a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8014b1e:	2b03      	cmp	r3, #3
 8014b20:	d102      	bne.n	8014b28 <tcp_receive+0x19c>
                /* Do fast retransmit */
                tcp_rexmit_fast(pcb);
 8014b22:	6878      	ldr	r0, [r7, #4]
 8014b24:	f002 fa2e 	bl	8016f84 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 8014b28:	69fb      	ldr	r3, [r7, #28]
 8014b2a:	2b00      	cmp	r3, #0
 8014b2c:	f040 8169 	bne.w	8014e02 <tcp_receive+0x476>
        pcb->dupacks = 0;
 8014b30:	687b      	ldr	r3, [r7, #4]
 8014b32:	2200      	movs	r2, #0
 8014b34:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8014b38:	e163      	b.n	8014e02 <tcp_receive+0x476>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack+1, pcb->snd_nxt)) {
 8014b3a:	4b45      	ldr	r3, [pc, #276]	; (8014c50 <tcp_receive+0x2c4>)
 8014b3c:	681a      	ldr	r2, [r3, #0]
 8014b3e:	687b      	ldr	r3, [r7, #4]
 8014b40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8014b42:	1ad3      	subs	r3, r2, r3
 8014b44:	3b01      	subs	r3, #1
 8014b46:	2b00      	cmp	r3, #0
 8014b48:	f2c0 8107 	blt.w	8014d5a <tcp_receive+0x3ce>
 8014b4c:	4b40      	ldr	r3, [pc, #256]	; (8014c50 <tcp_receive+0x2c4>)
 8014b4e:	681a      	ldr	r2, [r3, #0]
 8014b50:	687b      	ldr	r3, [r7, #4]
 8014b52:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8014b54:	1ad3      	subs	r3, r2, r3
 8014b56:	2b00      	cmp	r3, #0
 8014b58:	f300 80ff 	bgt.w	8014d5a <tcp_receive+0x3ce>
      /* We come here when the ACK acknowledges new data. */

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 8014b5c:	687b      	ldr	r3, [r7, #4]
 8014b5e:	7e9b      	ldrb	r3, [r3, #26]
 8014b60:	f003 0304 	and.w	r3, r3, #4
 8014b64:	2b00      	cmp	r3, #0
 8014b66:	d00c      	beq.n	8014b82 <tcp_receive+0x1f6>
        pcb->flags &= ~TF_INFR;
 8014b68:	687b      	ldr	r3, [r7, #4]
 8014b6a:	7e9b      	ldrb	r3, [r3, #26]
 8014b6c:	f023 0304 	bic.w	r3, r3, #4
 8014b70:	b2da      	uxtb	r2, r3
 8014b72:	687b      	ldr	r3, [r7, #4]
 8014b74:	769a      	strb	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 8014b76:	687b      	ldr	r3, [r7, #4]
 8014b78:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8014b7c:	687b      	ldr	r3, [r7, #4]
 8014b7e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 8014b82:	687b      	ldr	r3, [r7, #4]
 8014b84:	2200      	movs	r2, #0
 8014b86:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (pcb->sa >> 3) + pcb->sv;
 8014b8a:	687b      	ldr	r3, [r7, #4]
 8014b8c:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8014b90:	10db      	asrs	r3, r3, #3
 8014b92:	b21b      	sxth	r3, r3
 8014b94:	b29a      	uxth	r2, r3
 8014b96:	687b      	ldr	r3, [r7, #4]
 8014b98:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8014b9c:	b29b      	uxth	r3, r3
 8014b9e:	4413      	add	r3, r2
 8014ba0:	b29b      	uxth	r3, r3
 8014ba2:	b21a      	sxth	r2, r3
 8014ba4:	687b      	ldr	r3, [r7, #4]
 8014ba6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 8014baa:	687b      	ldr	r3, [r7, #4]
 8014bac:	2200      	movs	r2, #0
 8014bae:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 8014bb2:	4b27      	ldr	r3, [pc, #156]	; (8014c50 <tcp_receive+0x2c4>)
 8014bb4:	681a      	ldr	r2, [r3, #0]
 8014bb6:	687b      	ldr	r3, [r7, #4]
 8014bb8:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 8014bba:	687b      	ldr	r3, [r7, #4]
 8014bbc:	7d1b      	ldrb	r3, [r3, #20]
 8014bbe:	2b03      	cmp	r3, #3
 8014bc0:	f240 8094 	bls.w	8014cec <tcp_receive+0x360>
        if (pcb->cwnd < pcb->ssthresh) {
 8014bc4:	687b      	ldr	r3, [r7, #4]
 8014bc6:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8014bca:	687b      	ldr	r3, [r7, #4]
 8014bcc:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8014bd0:	429a      	cmp	r2, r3
 8014bd2:	d216      	bcs.n	8014c02 <tcp_receive+0x276>
          if ((tcpwnd_size_t)(pcb->cwnd + pcb->mss) > pcb->cwnd) {
 8014bd4:	687b      	ldr	r3, [r7, #4]
 8014bd6:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8014bda:	687b      	ldr	r3, [r7, #4]
 8014bdc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8014bde:	4413      	add	r3, r2
 8014be0:	b29a      	uxth	r2, r3
 8014be2:	687b      	ldr	r3, [r7, #4]
 8014be4:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8014be8:	429a      	cmp	r2, r3
 8014bea:	d97f      	bls.n	8014cec <tcp_receive+0x360>
            pcb->cwnd += pcb->mss;
 8014bec:	687b      	ldr	r3, [r7, #4]
 8014bee:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8014bf2:	687b      	ldr	r3, [r7, #4]
 8014bf4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8014bf6:	4413      	add	r3, r2
 8014bf8:	b29a      	uxth	r2, r3
 8014bfa:	687b      	ldr	r3, [r7, #4]
 8014bfc:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8014c00:	e074      	b.n	8014cec <tcp_receive+0x360>
          }
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          tcpwnd_size_t new_cwnd = (pcb->cwnd + pcb->mss * pcb->mss / pcb->cwnd);
 8014c02:	687b      	ldr	r3, [r7, #4]
 8014c04:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8014c08:	687b      	ldr	r3, [r7, #4]
 8014c0a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8014c0c:	4619      	mov	r1, r3
 8014c0e:	687b      	ldr	r3, [r7, #4]
 8014c10:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8014c12:	fb03 f301 	mul.w	r3, r3, r1
 8014c16:	6879      	ldr	r1, [r7, #4]
 8014c18:	f8b1 1048 	ldrh.w	r1, [r1, #72]	; 0x48
 8014c1c:	fb93 f3f1 	sdiv	r3, r3, r1
 8014c20:	b29b      	uxth	r3, r3
 8014c22:	4413      	add	r3, r2
 8014c24:	827b      	strh	r3, [r7, #18]
          if (new_cwnd > pcb->cwnd) {
 8014c26:	687b      	ldr	r3, [r7, #4]
 8014c28:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8014c2c:	8a7a      	ldrh	r2, [r7, #18]
 8014c2e:	429a      	cmp	r2, r3
 8014c30:	d95c      	bls.n	8014cec <tcp_receive+0x360>
            pcb->cwnd = new_cwnd;
 8014c32:	687b      	ldr	r3, [r7, #4]
 8014c34:	8a7a      	ldrh	r2, [r7, #18]
 8014c36:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked): 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      while (pcb->unacked != NULL &&
 8014c3a:	e057      	b.n	8014cec <tcp_receive+0x360>
 8014c3c:	0801d710 	.word	0x0801d710
 8014c40:	0801d934 	.word	0x0801d934
 8014c44:	0801d754 	.word	0x0801d754
 8014c48:	20004234 	.word	0x20004234
 8014c4c:	20004228 	.word	0x20004228
 8014c50:	2000422c 	.word	0x2000422c
 8014c54:	20004218 	.word	0x20004218
 8014c58:	20004232 	.word	0x20004232
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->unacked\n",
                                      lwip_ntohl(pcb->unacked->tcphdr->seqno),
                                      lwip_ntohl(pcb->unacked->tcphdr->seqno) +
                                      TCP_TCPLEN(pcb->unacked)));

        next = pcb->unacked;
 8014c5c:	687b      	ldr	r3, [r7, #4]
 8014c5e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014c60:	62fb      	str	r3, [r7, #44]	; 0x2c
        pcb->unacked = pcb->unacked->next;
 8014c62:	687b      	ldr	r3, [r7, #4]
 8014c64:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014c66:	681a      	ldr	r2, [r3, #0]
 8014c68:	687b      	ldr	r3, [r7, #4]
 8014c6a:	66da      	str	r2, [r3, #108]	; 0x6c

        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ", (tcpwnd_size_t)pcb->snd_queuelen));
        LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= pbuf_clen(next->p)));
 8014c6c:	687b      	ldr	r3, [r7, #4]
 8014c6e:	f8b3 4062 	ldrh.w	r4, [r3, #98]	; 0x62
 8014c72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014c74:	685b      	ldr	r3, [r3, #4]
 8014c76:	4618      	mov	r0, r3
 8014c78:	f7fc fee8 	bl	8011a4c <pbuf_clen>
 8014c7c:	4603      	mov	r3, r0
 8014c7e:	429c      	cmp	r4, r3
 8014c80:	d206      	bcs.n	8014c90 <tcp_receive+0x304>
 8014c82:	4b70      	ldr	r3, [pc, #448]	; (8014e44 <tcp_receive+0x4b8>)
 8014c84:	f240 429e 	movw	r2, #1182	; 0x49e
 8014c88:	496f      	ldr	r1, [pc, #444]	; (8014e48 <tcp_receive+0x4bc>)
 8014c8a:	4870      	ldr	r0, [pc, #448]	; (8014e4c <tcp_receive+0x4c0>)
 8014c8c:	f006 f8b0 	bl	801adf0 <iprintf>

        pcb->snd_queuelen -= pbuf_clen(next->p);
 8014c90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014c92:	685b      	ldr	r3, [r3, #4]
 8014c94:	4618      	mov	r0, r3
 8014c96:	f7fc fed9 	bl	8011a4c <pbuf_clen>
 8014c9a:	4603      	mov	r3, r0
 8014c9c:	461a      	mov	r2, r3
 8014c9e:	687b      	ldr	r3, [r7, #4]
 8014ca0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8014ca4:	1a9b      	subs	r3, r3, r2
 8014ca6:	b29a      	uxth	r2, r3
 8014ca8:	687b      	ldr	r3, [r7, #4]
 8014caa:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        recv_acked += next->len;
 8014cae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014cb0:	891a      	ldrh	r2, [r3, #8]
 8014cb2:	4b67      	ldr	r3, [pc, #412]	; (8014e50 <tcp_receive+0x4c4>)
 8014cb4:	881b      	ldrh	r3, [r3, #0]
 8014cb6:	4413      	add	r3, r2
 8014cb8:	b29a      	uxth	r2, r3
 8014cba:	4b65      	ldr	r3, [pc, #404]	; (8014e50 <tcp_receive+0x4c4>)
 8014cbc:	801a      	strh	r2, [r3, #0]
        tcp_seg_free(next);
 8014cbe:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8014cc0:	f7fe f943 	bl	8012f4a <tcp_seg_free>

        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing unacked)\n", (tcpwnd_size_t)pcb->snd_queuelen));
        if (pcb->snd_queuelen != 0) {
 8014cc4:	687b      	ldr	r3, [r7, #4]
 8014cc6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8014cca:	2b00      	cmp	r3, #0
 8014ccc:	d00e      	beq.n	8014cec <tcp_receive+0x360>
          LWIP_ASSERT("tcp_receive: valid queue length", pcb->unacked != NULL ||
 8014cce:	687b      	ldr	r3, [r7, #4]
 8014cd0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014cd2:	2b00      	cmp	r3, #0
 8014cd4:	d10a      	bne.n	8014cec <tcp_receive+0x360>
 8014cd6:	687b      	ldr	r3, [r7, #4]
 8014cd8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8014cda:	2b00      	cmp	r3, #0
 8014cdc:	d106      	bne.n	8014cec <tcp_receive+0x360>
 8014cde:	4b59      	ldr	r3, [pc, #356]	; (8014e44 <tcp_receive+0x4b8>)
 8014ce0:	f240 42a7 	movw	r2, #1191	; 0x4a7
 8014ce4:	495b      	ldr	r1, [pc, #364]	; (8014e54 <tcp_receive+0x4c8>)
 8014ce6:	4859      	ldr	r0, [pc, #356]	; (8014e4c <tcp_receive+0x4c0>)
 8014ce8:	f006 f882 	bl	801adf0 <iprintf>
      while (pcb->unacked != NULL &&
 8014cec:	687b      	ldr	r3, [r7, #4]
 8014cee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014cf0:	2b00      	cmp	r3, #0
 8014cf2:	d022      	beq.n	8014d3a <tcp_receive+0x3ae>
             TCP_SEQ_LEQ(lwip_ntohl(pcb->unacked->tcphdr->seqno) +
 8014cf4:	687b      	ldr	r3, [r7, #4]
 8014cf6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014cf8:	68db      	ldr	r3, [r3, #12]
 8014cfa:	685b      	ldr	r3, [r3, #4]
 8014cfc:	4618      	mov	r0, r3
 8014cfe:	f7fb fc7f 	bl	8010600 <lwip_htonl>
 8014d02:	4604      	mov	r4, r0
 8014d04:	687b      	ldr	r3, [r7, #4]
 8014d06:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014d08:	891b      	ldrh	r3, [r3, #8]
 8014d0a:	461d      	mov	r5, r3
 8014d0c:	687b      	ldr	r3, [r7, #4]
 8014d0e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014d10:	68db      	ldr	r3, [r3, #12]
 8014d12:	899b      	ldrh	r3, [r3, #12]
 8014d14:	b29b      	uxth	r3, r3
 8014d16:	4618      	mov	r0, r3
 8014d18:	f7fb fc64 	bl	80105e4 <lwip_htons>
 8014d1c:	4603      	mov	r3, r0
 8014d1e:	f003 0303 	and.w	r3, r3, #3
 8014d22:	2b00      	cmp	r3, #0
 8014d24:	d001      	beq.n	8014d2a <tcp_receive+0x39e>
 8014d26:	2301      	movs	r3, #1
 8014d28:	e000      	b.n	8014d2c <tcp_receive+0x3a0>
 8014d2a:	2300      	movs	r3, #0
 8014d2c:	442b      	add	r3, r5
 8014d2e:	18e2      	adds	r2, r4, r3
 8014d30:	4b49      	ldr	r3, [pc, #292]	; (8014e58 <tcp_receive+0x4cc>)
 8014d32:	681b      	ldr	r3, [r3, #0]
 8014d34:	1ad3      	subs	r3, r2, r3
      while (pcb->unacked != NULL &&
 8014d36:	2b00      	cmp	r3, #0
 8014d38:	dd90      	ble.n	8014c5c <tcp_receive+0x2d0>
        }
      }

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 8014d3a:	687b      	ldr	r3, [r7, #4]
 8014d3c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014d3e:	2b00      	cmp	r3, #0
 8014d40:	d104      	bne.n	8014d4c <tcp_receive+0x3c0>
        pcb->rtime = -1;
 8014d42:	687b      	ldr	r3, [r7, #4]
 8014d44:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8014d48:	861a      	strh	r2, [r3, #48]	; 0x30
 8014d4a:	e002      	b.n	8014d52 <tcp_receive+0x3c6>
      } else {
        pcb->rtime = 0;
 8014d4c:	687b      	ldr	r3, [r7, #4]
 8014d4e:	2200      	movs	r2, #0
 8014d50:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 8014d52:	687b      	ldr	r3, [r7, #4]
 8014d54:	2200      	movs	r2, #0
 8014d56:	76da      	strb	r2, [r3, #27]
 8014d58:	e002      	b.n	8014d60 <tcp_receive+0x3d4>
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 8014d5a:	6878      	ldr	r0, [r7, #4]
 8014d5c:	f001 fd30 	bl	80167c0 <tcp_send_empty_ack>
       on the list are acknowledged by the ACK. This may seem
       strange since an "unsent" segment shouldn't be acked. The
       rationale is that lwIP puts all outstanding segments on the
       ->unsent list after a retransmission, so these segments may
       in fact have been sent once. */
    while (pcb->unsent != NULL &&
 8014d60:	e04f      	b.n	8014e02 <tcp_receive+0x476>
                           TCP_TCPLEN(pcb->unsent), pcb->snd_nxt)) {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->unsent\n",
                                    lwip_ntohl(pcb->unsent->tcphdr->seqno), lwip_ntohl(pcb->unsent->tcphdr->seqno) +
                                    TCP_TCPLEN(pcb->unsent)));

      next = pcb->unsent;
 8014d62:	687b      	ldr	r3, [r7, #4]
 8014d64:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8014d66:	62fb      	str	r3, [r7, #44]	; 0x2c
      pcb->unsent = pcb->unsent->next;
 8014d68:	687b      	ldr	r3, [r7, #4]
 8014d6a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8014d6c:	681a      	ldr	r2, [r3, #0]
 8014d6e:	687b      	ldr	r3, [r7, #4]
 8014d70:	669a      	str	r2, [r3, #104]	; 0x68
#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 8014d72:	687b      	ldr	r3, [r7, #4]
 8014d74:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8014d76:	2b00      	cmp	r3, #0
 8014d78:	d103      	bne.n	8014d82 <tcp_receive+0x3f6>
        pcb->unsent_oversize = 0;
 8014d7a:	687b      	ldr	r3, [r7, #4]
 8014d7c:	2200      	movs	r2, #0
 8014d7e:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      }
#endif /* TCP_OVERSIZE */
      LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ", (tcpwnd_size_t)pcb->snd_queuelen));
      LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= pbuf_clen(next->p)));
 8014d82:	687b      	ldr	r3, [r7, #4]
 8014d84:	f8b3 4062 	ldrh.w	r4, [r3, #98]	; 0x62
 8014d88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014d8a:	685b      	ldr	r3, [r3, #4]
 8014d8c:	4618      	mov	r0, r3
 8014d8e:	f7fc fe5d 	bl	8011a4c <pbuf_clen>
 8014d92:	4603      	mov	r3, r0
 8014d94:	429c      	cmp	r4, r3
 8014d96:	d206      	bcs.n	8014da6 <tcp_receive+0x41a>
 8014d98:	4b2a      	ldr	r3, [pc, #168]	; (8014e44 <tcp_receive+0x4b8>)
 8014d9a:	f240 42d5 	movw	r2, #1237	; 0x4d5
 8014d9e:	492a      	ldr	r1, [pc, #168]	; (8014e48 <tcp_receive+0x4bc>)
 8014da0:	482a      	ldr	r0, [pc, #168]	; (8014e4c <tcp_receive+0x4c0>)
 8014da2:	f006 f825 	bl	801adf0 <iprintf>
      /* Prevent ACK for FIN to generate a sent event */
      pcb->snd_queuelen -= pbuf_clen(next->p);
 8014da6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014da8:	685b      	ldr	r3, [r3, #4]
 8014daa:	4618      	mov	r0, r3
 8014dac:	f7fc fe4e 	bl	8011a4c <pbuf_clen>
 8014db0:	4603      	mov	r3, r0
 8014db2:	461a      	mov	r2, r3
 8014db4:	687b      	ldr	r3, [r7, #4]
 8014db6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8014dba:	1a9b      	subs	r3, r3, r2
 8014dbc:	b29a      	uxth	r2, r3
 8014dbe:	687b      	ldr	r3, [r7, #4]
 8014dc0:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      recv_acked += next->len;
 8014dc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014dc6:	891a      	ldrh	r2, [r3, #8]
 8014dc8:	4b21      	ldr	r3, [pc, #132]	; (8014e50 <tcp_receive+0x4c4>)
 8014dca:	881b      	ldrh	r3, [r3, #0]
 8014dcc:	4413      	add	r3, r2
 8014dce:	b29a      	uxth	r2, r3
 8014dd0:	4b1f      	ldr	r3, [pc, #124]	; (8014e50 <tcp_receive+0x4c4>)
 8014dd2:	801a      	strh	r2, [r3, #0]
      tcp_seg_free(next);
 8014dd4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8014dd6:	f7fe f8b8 	bl	8012f4a <tcp_seg_free>
      LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing unsent)\n", (tcpwnd_size_t)pcb->snd_queuelen));
      if (pcb->snd_queuelen != 0) {
 8014dda:	687b      	ldr	r3, [r7, #4]
 8014ddc:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8014de0:	2b00      	cmp	r3, #0
 8014de2:	d00e      	beq.n	8014e02 <tcp_receive+0x476>
        LWIP_ASSERT("tcp_receive: valid queue length",
 8014de4:	687b      	ldr	r3, [r7, #4]
 8014de6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014de8:	2b00      	cmp	r3, #0
 8014dea:	d10a      	bne.n	8014e02 <tcp_receive+0x476>
 8014dec:	687b      	ldr	r3, [r7, #4]
 8014dee:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8014df0:	2b00      	cmp	r3, #0
 8014df2:	d106      	bne.n	8014e02 <tcp_receive+0x476>
 8014df4:	4b13      	ldr	r3, [pc, #76]	; (8014e44 <tcp_receive+0x4b8>)
 8014df6:	f240 42dd 	movw	r2, #1245	; 0x4dd
 8014dfa:	4916      	ldr	r1, [pc, #88]	; (8014e54 <tcp_receive+0x4c8>)
 8014dfc:	4813      	ldr	r0, [pc, #76]	; (8014e4c <tcp_receive+0x4c0>)
 8014dfe:	f005 fff7 	bl	801adf0 <iprintf>
    while (pcb->unsent != NULL &&
 8014e02:	687b      	ldr	r3, [r7, #4]
 8014e04:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8014e06:	2b00      	cmp	r3, #0
 8014e08:	d036      	beq.n	8014e78 <tcp_receive+0x4ec>
           TCP_SEQ_BETWEEN(ackno, lwip_ntohl(pcb->unsent->tcphdr->seqno) +
 8014e0a:	4b13      	ldr	r3, [pc, #76]	; (8014e58 <tcp_receive+0x4cc>)
 8014e0c:	681c      	ldr	r4, [r3, #0]
 8014e0e:	687b      	ldr	r3, [r7, #4]
 8014e10:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8014e12:	68db      	ldr	r3, [r3, #12]
 8014e14:	685b      	ldr	r3, [r3, #4]
 8014e16:	4618      	mov	r0, r3
 8014e18:	f7fb fbf2 	bl	8010600 <lwip_htonl>
 8014e1c:	4605      	mov	r5, r0
 8014e1e:	687b      	ldr	r3, [r7, #4]
 8014e20:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8014e22:	891b      	ldrh	r3, [r3, #8]
 8014e24:	461e      	mov	r6, r3
 8014e26:	687b      	ldr	r3, [r7, #4]
 8014e28:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8014e2a:	68db      	ldr	r3, [r3, #12]
 8014e2c:	899b      	ldrh	r3, [r3, #12]
 8014e2e:	b29b      	uxth	r3, r3
 8014e30:	4618      	mov	r0, r3
 8014e32:	f7fb fbd7 	bl	80105e4 <lwip_htons>
 8014e36:	4603      	mov	r3, r0
 8014e38:	f003 0303 	and.w	r3, r3, #3
 8014e3c:	2b00      	cmp	r3, #0
 8014e3e:	d00d      	beq.n	8014e5c <tcp_receive+0x4d0>
 8014e40:	2301      	movs	r3, #1
 8014e42:	e00c      	b.n	8014e5e <tcp_receive+0x4d2>
 8014e44:	0801d710 	.word	0x0801d710
 8014e48:	0801d950 	.word	0x0801d950
 8014e4c:	0801d754 	.word	0x0801d754
 8014e50:	20004230 	.word	0x20004230
 8014e54:	0801d978 	.word	0x0801d978
 8014e58:	2000422c 	.word	0x2000422c
 8014e5c:	2300      	movs	r3, #0
 8014e5e:	4433      	add	r3, r6
 8014e60:	442b      	add	r3, r5
 8014e62:	1ae3      	subs	r3, r4, r3
    while (pcb->unsent != NULL &&
 8014e64:	2b00      	cmp	r3, #0
 8014e66:	db07      	blt.n	8014e78 <tcp_receive+0x4ec>
           TCP_SEQ_BETWEEN(ackno, lwip_ntohl(pcb->unsent->tcphdr->seqno) +
 8014e68:	4b8d      	ldr	r3, [pc, #564]	; (80150a0 <tcp_receive+0x714>)
 8014e6a:	681a      	ldr	r2, [r3, #0]
 8014e6c:	687b      	ldr	r3, [r7, #4]
 8014e6e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8014e70:	1ad3      	subs	r3, r2, r3
 8014e72:	2b00      	cmp	r3, #0
 8014e74:	f77f af75 	ble.w	8014d62 <tcp_receive+0x3d6>
          pcb->unacked != NULL || pcb->unsent != NULL);
      }
    }
    pcb->snd_buf += recv_acked;
 8014e78:	687b      	ldr	r3, [r7, #4]
 8014e7a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8014e7e:	4b89      	ldr	r3, [pc, #548]	; (80150a4 <tcp_receive+0x718>)
 8014e80:	881b      	ldrh	r3, [r3, #0]
 8014e82:	4413      	add	r3, r2
 8014e84:	b29a      	uxth	r2, r3
 8014e86:	687b      	ldr	r3, [r7, #4]
 8014e88:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 8014e8c:	687b      	ldr	r3, [r7, #4]
 8014e8e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8014e90:	2b00      	cmp	r3, #0
 8014e92:	d052      	beq.n	8014f3a <tcp_receive+0x5ae>
 8014e94:	687b      	ldr	r3, [r7, #4]
 8014e96:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8014e98:	4b81      	ldr	r3, [pc, #516]	; (80150a0 <tcp_receive+0x714>)
 8014e9a:	681b      	ldr	r3, [r3, #0]
 8014e9c:	1ad3      	subs	r3, r2, r3
 8014e9e:	2b00      	cmp	r3, #0
 8014ea0:	da4b      	bge.n	8014f3a <tcp_receive+0x5ae>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 8014ea2:	4b81      	ldr	r3, [pc, #516]	; (80150a8 <tcp_receive+0x71c>)
 8014ea4:	681b      	ldr	r3, [r3, #0]
 8014ea6:	b29a      	uxth	r2, r3
 8014ea8:	687b      	ldr	r3, [r7, #4]
 8014eaa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8014eac:	b29b      	uxth	r3, r3
 8014eae:	1ad3      	subs	r3, r2, r3
 8014eb0:	b29b      	uxth	r3, r3
 8014eb2:	847b      	strh	r3, [r7, #34]	; 0x22

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = m - (pcb->sa >> 3);
 8014eb4:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8014eb6:	687b      	ldr	r3, [r7, #4]
 8014eb8:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8014ebc:	10db      	asrs	r3, r3, #3
 8014ebe:	b21b      	sxth	r3, r3
 8014ec0:	b29b      	uxth	r3, r3
 8014ec2:	1ad3      	subs	r3, r2, r3
 8014ec4:	b29b      	uxth	r3, r3
 8014ec6:	847b      	strh	r3, [r7, #34]	; 0x22
      pcb->sa += m;
 8014ec8:	687b      	ldr	r3, [r7, #4]
 8014eca:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8014ece:	b29a      	uxth	r2, r3
 8014ed0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8014ed2:	4413      	add	r3, r2
 8014ed4:	b29b      	uxth	r3, r3
 8014ed6:	b21a      	sxth	r2, r3
 8014ed8:	687b      	ldr	r3, [r7, #4]
 8014eda:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 8014edc:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8014ee0:	2b00      	cmp	r3, #0
 8014ee2:	da03      	bge.n	8014eec <tcp_receive+0x560>
        m = -m;
 8014ee4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8014ee6:	425b      	negs	r3, r3
 8014ee8:	b29b      	uxth	r3, r3
 8014eea:	847b      	strh	r3, [r7, #34]	; 0x22
      }
      m = m - (pcb->sv >> 2);
 8014eec:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8014eee:	687b      	ldr	r3, [r7, #4]
 8014ef0:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8014ef4:	109b      	asrs	r3, r3, #2
 8014ef6:	b21b      	sxth	r3, r3
 8014ef8:	b29b      	uxth	r3, r3
 8014efa:	1ad3      	subs	r3, r2, r3
 8014efc:	b29b      	uxth	r3, r3
 8014efe:	847b      	strh	r3, [r7, #34]	; 0x22
      pcb->sv += m;
 8014f00:	687b      	ldr	r3, [r7, #4]
 8014f02:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8014f06:	b29a      	uxth	r2, r3
 8014f08:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8014f0a:	4413      	add	r3, r2
 8014f0c:	b29b      	uxth	r3, r3
 8014f0e:	b21a      	sxth	r2, r3
 8014f10:	687b      	ldr	r3, [r7, #4]
 8014f12:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (pcb->sa >> 3) + pcb->sv;
 8014f14:	687b      	ldr	r3, [r7, #4]
 8014f16:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8014f1a:	10db      	asrs	r3, r3, #3
 8014f1c:	b21b      	sxth	r3, r3
 8014f1e:	b29a      	uxth	r2, r3
 8014f20:	687b      	ldr	r3, [r7, #4]
 8014f22:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8014f26:	b29b      	uxth	r3, r3
 8014f28:	4413      	add	r3, r2
 8014f2a:	b29b      	uxth	r3, r3
 8014f2c:	b21a      	sxth	r2, r3
 8014f2e:	687b      	ldr	r3, [r7, #4]
 8014f30:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 8014f34:	687b      	ldr	r3, [r7, #4]
 8014f36:	2200      	movs	r2, #0
 8014f38:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 8014f3a:	4b5c      	ldr	r3, [pc, #368]	; (80150ac <tcp_receive+0x720>)
 8014f3c:	881b      	ldrh	r3, [r3, #0]
 8014f3e:	2b00      	cmp	r3, #0
 8014f40:	f000 84f1 	beq.w	8015926 <tcp_receive+0xf9a>
 8014f44:	687b      	ldr	r3, [r7, #4]
 8014f46:	7d1b      	ldrb	r3, [r3, #20]
 8014f48:	2b06      	cmp	r3, #6
 8014f4a:	f200 84ec 	bhi.w	8015926 <tcp_receive+0xf9a>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8014f4e:	687b      	ldr	r3, [r7, #4]
 8014f50:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8014f52:	4b57      	ldr	r3, [pc, #348]	; (80150b0 <tcp_receive+0x724>)
 8014f54:	681b      	ldr	r3, [r3, #0]
 8014f56:	1ad3      	subs	r3, r2, r3
 8014f58:	3b01      	subs	r3, #1
 8014f5a:	2b00      	cmp	r3, #0
 8014f5c:	f2c0 80b8 	blt.w	80150d0 <tcp_receive+0x744>
 8014f60:	687b      	ldr	r3, [r7, #4]
 8014f62:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8014f64:	4b51      	ldr	r3, [pc, #324]	; (80150ac <tcp_receive+0x720>)
 8014f66:	881b      	ldrh	r3, [r3, #0]
 8014f68:	4619      	mov	r1, r3
 8014f6a:	4b51      	ldr	r3, [pc, #324]	; (80150b0 <tcp_receive+0x724>)
 8014f6c:	681b      	ldr	r3, [r3, #0]
 8014f6e:	440b      	add	r3, r1
 8014f70:	1ad3      	subs	r3, r2, r3
 8014f72:	3301      	adds	r3, #1
 8014f74:	2b00      	cmp	r3, #0
 8014f76:	f300 80ab 	bgt.w	80150d0 <tcp_receive+0x744>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 8014f7a:	4b4e      	ldr	r3, [pc, #312]	; (80150b4 <tcp_receive+0x728>)
 8014f7c:	685b      	ldr	r3, [r3, #4]
 8014f7e:	61bb      	str	r3, [r7, #24]
      off = pcb->rcv_nxt - seqno;
 8014f80:	687b      	ldr	r3, [r7, #4]
 8014f82:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8014f84:	4b4a      	ldr	r3, [pc, #296]	; (80150b0 <tcp_receive+0x724>)
 8014f86:	681b      	ldr	r3, [r3, #0]
 8014f88:	1ad3      	subs	r3, r2, r3
 8014f8a:	627b      	str	r3, [r7, #36]	; 0x24
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 8014f8c:	4b49      	ldr	r3, [pc, #292]	; (80150b4 <tcp_receive+0x728>)
 8014f8e:	685b      	ldr	r3, [r3, #4]
 8014f90:	2b00      	cmp	r3, #0
 8014f92:	d106      	bne.n	8014fa2 <tcp_receive+0x616>
 8014f94:	4b48      	ldr	r3, [pc, #288]	; (80150b8 <tcp_receive+0x72c>)
 8014f96:	f240 523c 	movw	r2, #1340	; 0x53c
 8014f9a:	4948      	ldr	r1, [pc, #288]	; (80150bc <tcp_receive+0x730>)
 8014f9c:	4848      	ldr	r0, [pc, #288]	; (80150c0 <tcp_receive+0x734>)
 8014f9e:	f005 ff27 	bl	801adf0 <iprintf>
      LWIP_ASSERT("insane offset!", (off < 0x7fff));
 8014fa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014fa4:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 8014fa8:	4293      	cmp	r3, r2
 8014faa:	dd06      	ble.n	8014fba <tcp_receive+0x62e>
 8014fac:	4b42      	ldr	r3, [pc, #264]	; (80150b8 <tcp_receive+0x72c>)
 8014fae:	f240 523d 	movw	r2, #1341	; 0x53d
 8014fb2:	4944      	ldr	r1, [pc, #272]	; (80150c4 <tcp_receive+0x738>)
 8014fb4:	4842      	ldr	r0, [pc, #264]	; (80150c0 <tcp_receive+0x734>)
 8014fb6:	f005 ff1b 	bl	801adf0 <iprintf>
      if (inseg.p->len < off) {
 8014fba:	4b3e      	ldr	r3, [pc, #248]	; (80150b4 <tcp_receive+0x728>)
 8014fbc:	685b      	ldr	r3, [r3, #4]
 8014fbe:	895b      	ldrh	r3, [r3, #10]
 8014fc0:	461a      	mov	r2, r3
 8014fc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014fc4:	4293      	cmp	r3, r2
 8014fc6:	dd3e      	ble.n	8015046 <tcp_receive+0x6ba>
        LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 8014fc8:	4b3a      	ldr	r3, [pc, #232]	; (80150b4 <tcp_receive+0x728>)
 8014fca:	685b      	ldr	r3, [r3, #4]
 8014fcc:	891b      	ldrh	r3, [r3, #8]
 8014fce:	461a      	mov	r2, r3
 8014fd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014fd2:	4293      	cmp	r3, r2
 8014fd4:	dd06      	ble.n	8014fe4 <tcp_receive+0x658>
 8014fd6:	4b38      	ldr	r3, [pc, #224]	; (80150b8 <tcp_receive+0x72c>)
 8014fd8:	f240 523f 	movw	r2, #1343	; 0x53f
 8014fdc:	493a      	ldr	r1, [pc, #232]	; (80150c8 <tcp_receive+0x73c>)
 8014fde:	4838      	ldr	r0, [pc, #224]	; (80150c0 <tcp_receive+0x734>)
 8014fe0:	f005 ff06 	bl	801adf0 <iprintf>
        new_tot_len = (u16_t)(inseg.p->tot_len - off);
 8014fe4:	4b33      	ldr	r3, [pc, #204]	; (80150b4 <tcp_receive+0x728>)
 8014fe6:	685b      	ldr	r3, [r3, #4]
 8014fe8:	891a      	ldrh	r2, [r3, #8]
 8014fea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014fec:	b29b      	uxth	r3, r3
 8014fee:	1ad3      	subs	r3, r2, r3
 8014ff0:	823b      	strh	r3, [r7, #16]
        while (p->len < off) {
 8014ff2:	e00e      	b.n	8015012 <tcp_receive+0x686>
          off -= p->len;
 8014ff4:	69bb      	ldr	r3, [r7, #24]
 8014ff6:	895b      	ldrh	r3, [r3, #10]
 8014ff8:	461a      	mov	r2, r3
 8014ffa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014ffc:	1a9b      	subs	r3, r3, r2
 8014ffe:	627b      	str	r3, [r7, #36]	; 0x24
          /* KJM following line changed (with addition of new_tot_len var)
             to fix bug #9076
             inseg.p->tot_len -= p->len; */
          p->tot_len = new_tot_len;
 8015000:	69bb      	ldr	r3, [r7, #24]
 8015002:	8a3a      	ldrh	r2, [r7, #16]
 8015004:	811a      	strh	r2, [r3, #8]
          p->len = 0;
 8015006:	69bb      	ldr	r3, [r7, #24]
 8015008:	2200      	movs	r2, #0
 801500a:	815a      	strh	r2, [r3, #10]
          p = p->next;
 801500c:	69bb      	ldr	r3, [r7, #24]
 801500e:	681b      	ldr	r3, [r3, #0]
 8015010:	61bb      	str	r3, [r7, #24]
        while (p->len < off) {
 8015012:	69bb      	ldr	r3, [r7, #24]
 8015014:	895b      	ldrh	r3, [r3, #10]
 8015016:	461a      	mov	r2, r3
 8015018:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801501a:	4293      	cmp	r3, r2
 801501c:	dcea      	bgt.n	8014ff4 <tcp_receive+0x668>
        }
        if (pbuf_header(p, (s16_t)-off)) {
 801501e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015020:	b29b      	uxth	r3, r3
 8015022:	425b      	negs	r3, r3
 8015024:	b29b      	uxth	r3, r3
 8015026:	b21b      	sxth	r3, r3
 8015028:	4619      	mov	r1, r3
 801502a:	69b8      	ldr	r0, [r7, #24]
 801502c:	f7fc fc50 	bl	80118d0 <pbuf_header>
 8015030:	4603      	mov	r3, r0
 8015032:	2b00      	cmp	r3, #0
 8015034:	d01c      	beq.n	8015070 <tcp_receive+0x6e4>
          /* Do we need to cope with this failing?  Assert for now */
          LWIP_ASSERT("pbuf_header failed", 0);
 8015036:	4b20      	ldr	r3, [pc, #128]	; (80150b8 <tcp_receive+0x72c>)
 8015038:	f240 524c 	movw	r2, #1356	; 0x54c
 801503c:	4923      	ldr	r1, [pc, #140]	; (80150cc <tcp_receive+0x740>)
 801503e:	4820      	ldr	r0, [pc, #128]	; (80150c0 <tcp_receive+0x734>)
 8015040:	f005 fed6 	bl	801adf0 <iprintf>
 8015044:	e014      	b.n	8015070 <tcp_receive+0x6e4>
        }
      } else {
        if (pbuf_header(inseg.p, (s16_t)-off)) {
 8015046:	4b1b      	ldr	r3, [pc, #108]	; (80150b4 <tcp_receive+0x728>)
 8015048:	685b      	ldr	r3, [r3, #4]
 801504a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801504c:	b292      	uxth	r2, r2
 801504e:	4252      	negs	r2, r2
 8015050:	b292      	uxth	r2, r2
 8015052:	b212      	sxth	r2, r2
 8015054:	4611      	mov	r1, r2
 8015056:	4618      	mov	r0, r3
 8015058:	f7fc fc3a 	bl	80118d0 <pbuf_header>
 801505c:	4603      	mov	r3, r0
 801505e:	2b00      	cmp	r3, #0
 8015060:	d006      	beq.n	8015070 <tcp_receive+0x6e4>
          /* Do we need to cope with this failing?  Assert for now */
          LWIP_ASSERT("pbuf_header failed", 0);
 8015062:	4b15      	ldr	r3, [pc, #84]	; (80150b8 <tcp_receive+0x72c>)
 8015064:	f240 5251 	movw	r2, #1361	; 0x551
 8015068:	4918      	ldr	r1, [pc, #96]	; (80150cc <tcp_receive+0x740>)
 801506a:	4815      	ldr	r0, [pc, #84]	; (80150c0 <tcp_receive+0x734>)
 801506c:	f005 fec0 	bl	801adf0 <iprintf>
        }
      }
      inseg.len -= (u16_t)(pcb->rcv_nxt - seqno);
 8015070:	4b10      	ldr	r3, [pc, #64]	; (80150b4 <tcp_receive+0x728>)
 8015072:	891a      	ldrh	r2, [r3, #8]
 8015074:	4b0e      	ldr	r3, [pc, #56]	; (80150b0 <tcp_receive+0x724>)
 8015076:	681b      	ldr	r3, [r3, #0]
 8015078:	b299      	uxth	r1, r3
 801507a:	687b      	ldr	r3, [r7, #4]
 801507c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801507e:	b29b      	uxth	r3, r3
 8015080:	1acb      	subs	r3, r1, r3
 8015082:	b29b      	uxth	r3, r3
 8015084:	4413      	add	r3, r2
 8015086:	b29a      	uxth	r2, r3
 8015088:	4b0a      	ldr	r3, [pc, #40]	; (80150b4 <tcp_receive+0x728>)
 801508a:	811a      	strh	r2, [r3, #8]
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 801508c:	687b      	ldr	r3, [r7, #4]
 801508e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015090:	4a07      	ldr	r2, [pc, #28]	; (80150b0 <tcp_receive+0x724>)
 8015092:	6013      	str	r3, [r2, #0]
 8015094:	4b07      	ldr	r3, [pc, #28]	; (80150b4 <tcp_receive+0x728>)
 8015096:	68db      	ldr	r3, [r3, #12]
 8015098:	4a05      	ldr	r2, [pc, #20]	; (80150b0 <tcp_receive+0x724>)
 801509a:	6812      	ldr	r2, [r2, #0]
 801509c:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 801509e:	e025      	b.n	80150ec <tcp_receive+0x760>
 80150a0:	2000422c 	.word	0x2000422c
 80150a4:	20004230 	.word	0x20004230
 80150a8:	2000ab44 	.word	0x2000ab44
 80150ac:	20004232 	.word	0x20004232
 80150b0:	20004228 	.word	0x20004228
 80150b4:	20004208 	.word	0x20004208
 80150b8:	0801d710 	.word	0x0801d710
 80150bc:	0801d998 	.word	0x0801d998
 80150c0:	0801d754 	.word	0x0801d754
 80150c4:	0801d9a8 	.word	0x0801d9a8
 80150c8:	0801d9b8 	.word	0x0801d9b8
 80150cc:	0801d9c8 	.word	0x0801d9c8
    }
    else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 80150d0:	4b87      	ldr	r3, [pc, #540]	; (80152f0 <tcp_receive+0x964>)
 80150d2:	681a      	ldr	r2, [r3, #0]
 80150d4:	687b      	ldr	r3, [r7, #4]
 80150d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80150d8:	1ad3      	subs	r3, r2, r3
 80150da:	2b00      	cmp	r3, #0
 80150dc:	da06      	bge.n	80150ec <tcp_receive+0x760>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 80150de:	687b      	ldr	r3, [r7, #4]
 80150e0:	7e9b      	ldrb	r3, [r3, #26]
 80150e2:	f043 0302 	orr.w	r3, r3, #2
 80150e6:	b2da      	uxtb	r2, r3
 80150e8:	687b      	ldr	r3, [r7, #4]
 80150ea:	769a      	strb	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 80150ec:	4b80      	ldr	r3, [pc, #512]	; (80152f0 <tcp_receive+0x964>)
 80150ee:	681a      	ldr	r2, [r3, #0]
 80150f0:	687b      	ldr	r3, [r7, #4]
 80150f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80150f4:	1ad3      	subs	r3, r2, r3
 80150f6:	2b00      	cmp	r3, #0
 80150f8:	f2c0 8410 	blt.w	801591c <tcp_receive+0xf90>
 80150fc:	4b7c      	ldr	r3, [pc, #496]	; (80152f0 <tcp_receive+0x964>)
 80150fe:	681a      	ldr	r2, [r3, #0]
 8015100:	687b      	ldr	r3, [r7, #4]
 8015102:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015104:	6879      	ldr	r1, [r7, #4]
 8015106:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8015108:	440b      	add	r3, r1
 801510a:	1ad3      	subs	r3, r2, r3
 801510c:	3301      	adds	r3, #1
 801510e:	2b00      	cmp	r3, #0
 8015110:	f300 8404 	bgt.w	801591c <tcp_receive+0xf90>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 8015114:	687b      	ldr	r3, [r7, #4]
 8015116:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8015118:	4b75      	ldr	r3, [pc, #468]	; (80152f0 <tcp_receive+0x964>)
 801511a:	681b      	ldr	r3, [r3, #0]
 801511c:	429a      	cmp	r2, r3
 801511e:	f040 8287 	bne.w	8015630 <tcp_receive+0xca4>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 8015122:	4b74      	ldr	r3, [pc, #464]	; (80152f4 <tcp_receive+0x968>)
 8015124:	891c      	ldrh	r4, [r3, #8]
 8015126:	4b73      	ldr	r3, [pc, #460]	; (80152f4 <tcp_receive+0x968>)
 8015128:	68db      	ldr	r3, [r3, #12]
 801512a:	899b      	ldrh	r3, [r3, #12]
 801512c:	b29b      	uxth	r3, r3
 801512e:	4618      	mov	r0, r3
 8015130:	f7fb fa58 	bl	80105e4 <lwip_htons>
 8015134:	4603      	mov	r3, r0
 8015136:	f003 0303 	and.w	r3, r3, #3
 801513a:	2b00      	cmp	r3, #0
 801513c:	d001      	beq.n	8015142 <tcp_receive+0x7b6>
 801513e:	2301      	movs	r3, #1
 8015140:	e000      	b.n	8015144 <tcp_receive+0x7b8>
 8015142:	2300      	movs	r3, #0
 8015144:	4423      	add	r3, r4
 8015146:	b29a      	uxth	r2, r3
 8015148:	4b6b      	ldr	r3, [pc, #428]	; (80152f8 <tcp_receive+0x96c>)
 801514a:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 801514c:	687b      	ldr	r3, [r7, #4]
 801514e:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8015150:	4b69      	ldr	r3, [pc, #420]	; (80152f8 <tcp_receive+0x96c>)
 8015152:	881b      	ldrh	r3, [r3, #0]
 8015154:	429a      	cmp	r2, r3
 8015156:	d26e      	bcs.n	8015236 <tcp_receive+0x8aa>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8015158:	4b66      	ldr	r3, [pc, #408]	; (80152f4 <tcp_receive+0x968>)
 801515a:	68db      	ldr	r3, [r3, #12]
 801515c:	899b      	ldrh	r3, [r3, #12]
 801515e:	b29b      	uxth	r3, r3
 8015160:	4618      	mov	r0, r3
 8015162:	f7fb fa3f 	bl	80105e4 <lwip_htons>
 8015166:	4603      	mov	r3, r0
 8015168:	f003 0301 	and.w	r3, r3, #1
 801516c:	2b00      	cmp	r3, #0
 801516e:	d01b      	beq.n	80151a8 <tcp_receive+0x81c>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 8015170:	4b60      	ldr	r3, [pc, #384]	; (80152f4 <tcp_receive+0x968>)
 8015172:	68db      	ldr	r3, [r3, #12]
 8015174:	899b      	ldrh	r3, [r3, #12]
 8015176:	b29b      	uxth	r3, r3
 8015178:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 801517c:	b29c      	uxth	r4, r3
 801517e:	4b5d      	ldr	r3, [pc, #372]	; (80152f4 <tcp_receive+0x968>)
 8015180:	68db      	ldr	r3, [r3, #12]
 8015182:	899b      	ldrh	r3, [r3, #12]
 8015184:	b29b      	uxth	r3, r3
 8015186:	4618      	mov	r0, r3
 8015188:	f7fb fa2c 	bl	80105e4 <lwip_htons>
 801518c:	4603      	mov	r3, r0
 801518e:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8015192:	b29b      	uxth	r3, r3
 8015194:	4618      	mov	r0, r3
 8015196:	f7fb fa25 	bl	80105e4 <lwip_htons>
 801519a:	4603      	mov	r3, r0
 801519c:	461a      	mov	r2, r3
 801519e:	4b55      	ldr	r3, [pc, #340]	; (80152f4 <tcp_receive+0x968>)
 80151a0:	68db      	ldr	r3, [r3, #12]
 80151a2:	4322      	orrs	r2, r4
 80151a4:	b292      	uxth	r2, r2
 80151a6:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 80151a8:	687b      	ldr	r3, [r7, #4]
 80151aa:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80151ac:	4b51      	ldr	r3, [pc, #324]	; (80152f4 <tcp_receive+0x968>)
 80151ae:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 80151b0:	4b50      	ldr	r3, [pc, #320]	; (80152f4 <tcp_receive+0x968>)
 80151b2:	68db      	ldr	r3, [r3, #12]
 80151b4:	899b      	ldrh	r3, [r3, #12]
 80151b6:	b29b      	uxth	r3, r3
 80151b8:	4618      	mov	r0, r3
 80151ba:	f7fb fa13 	bl	80105e4 <lwip_htons>
 80151be:	4603      	mov	r3, r0
 80151c0:	f003 0302 	and.w	r3, r3, #2
 80151c4:	2b00      	cmp	r3, #0
 80151c6:	d005      	beq.n	80151d4 <tcp_receive+0x848>
            inseg.len -= 1;
 80151c8:	4b4a      	ldr	r3, [pc, #296]	; (80152f4 <tcp_receive+0x968>)
 80151ca:	891b      	ldrh	r3, [r3, #8]
 80151cc:	3b01      	subs	r3, #1
 80151ce:	b29a      	uxth	r2, r3
 80151d0:	4b48      	ldr	r3, [pc, #288]	; (80152f4 <tcp_receive+0x968>)
 80151d2:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 80151d4:	4b47      	ldr	r3, [pc, #284]	; (80152f4 <tcp_receive+0x968>)
 80151d6:	685a      	ldr	r2, [r3, #4]
 80151d8:	4b46      	ldr	r3, [pc, #280]	; (80152f4 <tcp_receive+0x968>)
 80151da:	891b      	ldrh	r3, [r3, #8]
 80151dc:	4619      	mov	r1, r3
 80151de:	4610      	mov	r0, r2
 80151e0:	f7fc fa26 	bl	8011630 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 80151e4:	4b43      	ldr	r3, [pc, #268]	; (80152f4 <tcp_receive+0x968>)
 80151e6:	891c      	ldrh	r4, [r3, #8]
 80151e8:	4b42      	ldr	r3, [pc, #264]	; (80152f4 <tcp_receive+0x968>)
 80151ea:	68db      	ldr	r3, [r3, #12]
 80151ec:	899b      	ldrh	r3, [r3, #12]
 80151ee:	b29b      	uxth	r3, r3
 80151f0:	4618      	mov	r0, r3
 80151f2:	f7fb f9f7 	bl	80105e4 <lwip_htons>
 80151f6:	4603      	mov	r3, r0
 80151f8:	f003 0303 	and.w	r3, r3, #3
 80151fc:	2b00      	cmp	r3, #0
 80151fe:	d001      	beq.n	8015204 <tcp_receive+0x878>
 8015200:	2301      	movs	r3, #1
 8015202:	e000      	b.n	8015206 <tcp_receive+0x87a>
 8015204:	2300      	movs	r3, #0
 8015206:	4423      	add	r3, r4
 8015208:	b29a      	uxth	r2, r3
 801520a:	4b3b      	ldr	r3, [pc, #236]	; (80152f8 <tcp_receive+0x96c>)
 801520c:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 801520e:	4b3a      	ldr	r3, [pc, #232]	; (80152f8 <tcp_receive+0x96c>)
 8015210:	881b      	ldrh	r3, [r3, #0]
 8015212:	461a      	mov	r2, r3
 8015214:	4b36      	ldr	r3, [pc, #216]	; (80152f0 <tcp_receive+0x964>)
 8015216:	681b      	ldr	r3, [r3, #0]
 8015218:	441a      	add	r2, r3
 801521a:	687b      	ldr	r3, [r7, #4]
 801521c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801521e:	6879      	ldr	r1, [r7, #4]
 8015220:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8015222:	440b      	add	r3, r1
 8015224:	429a      	cmp	r2, r3
 8015226:	d006      	beq.n	8015236 <tcp_receive+0x8aa>
 8015228:	4b34      	ldr	r3, [pc, #208]	; (80152fc <tcp_receive+0x970>)
 801522a:	f240 527f 	movw	r2, #1407	; 0x57f
 801522e:	4934      	ldr	r1, [pc, #208]	; (8015300 <tcp_receive+0x974>)
 8015230:	4834      	ldr	r0, [pc, #208]	; (8015304 <tcp_receive+0x978>)
 8015232:	f005 fddd 	bl	801adf0 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 8015236:	687b      	ldr	r3, [r7, #4]
 8015238:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801523a:	2b00      	cmp	r3, #0
 801523c:	f000 80e1 	beq.w	8015402 <tcp_receive+0xa76>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8015240:	4b2c      	ldr	r3, [pc, #176]	; (80152f4 <tcp_receive+0x968>)
 8015242:	68db      	ldr	r3, [r3, #12]
 8015244:	899b      	ldrh	r3, [r3, #12]
 8015246:	b29b      	uxth	r3, r3
 8015248:	4618      	mov	r0, r3
 801524a:	f7fb f9cb 	bl	80105e4 <lwip_htons>
 801524e:	4603      	mov	r3, r0
 8015250:	f003 0301 	and.w	r3, r3, #1
 8015254:	2b00      	cmp	r3, #0
 8015256:	d010      	beq.n	801527a <tcp_receive+0x8ee>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 8015258:	e00a      	b.n	8015270 <tcp_receive+0x8e4>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 801525a:	687b      	ldr	r3, [r7, #4]
 801525c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801525e:	60bb      	str	r3, [r7, #8]
              pcb->ooseq = pcb->ooseq->next;
 8015260:	687b      	ldr	r3, [r7, #4]
 8015262:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8015264:	681a      	ldr	r2, [r3, #0]
 8015266:	687b      	ldr	r3, [r7, #4]
 8015268:	671a      	str	r2, [r3, #112]	; 0x70
              tcp_seg_free(old_ooseq);
 801526a:	68b8      	ldr	r0, [r7, #8]
 801526c:	f7fd fe6d 	bl	8012f4a <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 8015270:	687b      	ldr	r3, [r7, #4]
 8015272:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8015274:	2b00      	cmp	r3, #0
 8015276:	d1f0      	bne.n	801525a <tcp_receive+0x8ce>
 8015278:	e0c3      	b.n	8015402 <tcp_receive+0xa76>
            }
          } else {
            next = pcb->ooseq;
 801527a:	687b      	ldr	r3, [r7, #4]
 801527c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801527e:	62fb      	str	r3, [r7, #44]	; 0x2c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 8015280:	e04f      	b.n	8015322 <tcp_receive+0x996>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8015282:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015284:	68db      	ldr	r3, [r3, #12]
 8015286:	899b      	ldrh	r3, [r3, #12]
 8015288:	b29b      	uxth	r3, r3
 801528a:	4618      	mov	r0, r3
 801528c:	f7fb f9aa 	bl	80105e4 <lwip_htons>
 8015290:	4603      	mov	r3, r0
 8015292:	f003 0301 	and.w	r3, r3, #1
 8015296:	2b00      	cmp	r3, #0
 8015298:	d03b      	beq.n	8015312 <tcp_receive+0x986>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 801529a:	4b16      	ldr	r3, [pc, #88]	; (80152f4 <tcp_receive+0x968>)
 801529c:	68db      	ldr	r3, [r3, #12]
 801529e:	899b      	ldrh	r3, [r3, #12]
 80152a0:	b29b      	uxth	r3, r3
 80152a2:	4618      	mov	r0, r3
 80152a4:	f7fb f99e 	bl	80105e4 <lwip_htons>
 80152a8:	4603      	mov	r3, r0
 80152aa:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 80152ae:	2b00      	cmp	r3, #0
 80152b0:	d12f      	bne.n	8015312 <tcp_receive+0x986>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 80152b2:	4b10      	ldr	r3, [pc, #64]	; (80152f4 <tcp_receive+0x968>)
 80152b4:	68db      	ldr	r3, [r3, #12]
 80152b6:	899b      	ldrh	r3, [r3, #12]
 80152b8:	b29c      	uxth	r4, r3
 80152ba:	2001      	movs	r0, #1
 80152bc:	f7fb f992 	bl	80105e4 <lwip_htons>
 80152c0:	4603      	mov	r3, r0
 80152c2:	461a      	mov	r2, r3
 80152c4:	4b0b      	ldr	r3, [pc, #44]	; (80152f4 <tcp_receive+0x968>)
 80152c6:	68db      	ldr	r3, [r3, #12]
 80152c8:	4322      	orrs	r2, r4
 80152ca:	b292      	uxth	r2, r2
 80152cc:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 80152ce:	4b09      	ldr	r3, [pc, #36]	; (80152f4 <tcp_receive+0x968>)
 80152d0:	891c      	ldrh	r4, [r3, #8]
 80152d2:	4b08      	ldr	r3, [pc, #32]	; (80152f4 <tcp_receive+0x968>)
 80152d4:	68db      	ldr	r3, [r3, #12]
 80152d6:	899b      	ldrh	r3, [r3, #12]
 80152d8:	b29b      	uxth	r3, r3
 80152da:	4618      	mov	r0, r3
 80152dc:	f7fb f982 	bl	80105e4 <lwip_htons>
 80152e0:	4603      	mov	r3, r0
 80152e2:	f003 0303 	and.w	r3, r3, #3
 80152e6:	2b00      	cmp	r3, #0
 80152e8:	d00e      	beq.n	8015308 <tcp_receive+0x97c>
 80152ea:	2301      	movs	r3, #1
 80152ec:	e00d      	b.n	801530a <tcp_receive+0x97e>
 80152ee:	bf00      	nop
 80152f0:	20004228 	.word	0x20004228
 80152f4:	20004208 	.word	0x20004208
 80152f8:	20004232 	.word	0x20004232
 80152fc:	0801d710 	.word	0x0801d710
 8015300:	0801d9dc 	.word	0x0801d9dc
 8015304:	0801d754 	.word	0x0801d754
 8015308:	2300      	movs	r3, #0
 801530a:	4423      	add	r3, r4
 801530c:	b29a      	uxth	r2, r3
 801530e:	4b95      	ldr	r3, [pc, #596]	; (8015564 <tcp_receive+0xbd8>)
 8015310:	801a      	strh	r2, [r3, #0]
              }
              prev = next;
 8015312:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015314:	62bb      	str	r3, [r7, #40]	; 0x28
              next = next->next;
 8015316:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015318:	681b      	ldr	r3, [r3, #0]
 801531a:	62fb      	str	r3, [r7, #44]	; 0x2c
              tcp_seg_free(prev);
 801531c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801531e:	f7fd fe14 	bl	8012f4a <tcp_seg_free>
            while (next &&
 8015322:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015324:	2b00      	cmp	r3, #0
 8015326:	d00e      	beq.n	8015346 <tcp_receive+0x9ba>
                   TCP_SEQ_GEQ(seqno + tcplen,
 8015328:	4b8e      	ldr	r3, [pc, #568]	; (8015564 <tcp_receive+0xbd8>)
 801532a:	881b      	ldrh	r3, [r3, #0]
 801532c:	461a      	mov	r2, r3
 801532e:	4b8e      	ldr	r3, [pc, #568]	; (8015568 <tcp_receive+0xbdc>)
 8015330:	681b      	ldr	r3, [r3, #0]
 8015332:	441a      	add	r2, r3
 8015334:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015336:	68db      	ldr	r3, [r3, #12]
 8015338:	685b      	ldr	r3, [r3, #4]
 801533a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801533c:	8909      	ldrh	r1, [r1, #8]
 801533e:	440b      	add	r3, r1
 8015340:	1ad3      	subs	r3, r2, r3
            while (next &&
 8015342:	2b00      	cmp	r3, #0
 8015344:	da9d      	bge.n	8015282 <tcp_receive+0x8f6>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 8015346:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015348:	2b00      	cmp	r3, #0
 801534a:	d057      	beq.n	80153fc <tcp_receive+0xa70>
                TCP_SEQ_GT(seqno + tcplen,
 801534c:	4b85      	ldr	r3, [pc, #532]	; (8015564 <tcp_receive+0xbd8>)
 801534e:	881b      	ldrh	r3, [r3, #0]
 8015350:	461a      	mov	r2, r3
 8015352:	4b85      	ldr	r3, [pc, #532]	; (8015568 <tcp_receive+0xbdc>)
 8015354:	681b      	ldr	r3, [r3, #0]
 8015356:	441a      	add	r2, r3
 8015358:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801535a:	68db      	ldr	r3, [r3, #12]
 801535c:	685b      	ldr	r3, [r3, #4]
 801535e:	1ad3      	subs	r3, r2, r3
            if (next &&
 8015360:	2b00      	cmp	r3, #0
 8015362:	dd4b      	ble.n	80153fc <tcp_receive+0xa70>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 8015364:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015366:	68db      	ldr	r3, [r3, #12]
 8015368:	685b      	ldr	r3, [r3, #4]
 801536a:	b29a      	uxth	r2, r3
 801536c:	4b7e      	ldr	r3, [pc, #504]	; (8015568 <tcp_receive+0xbdc>)
 801536e:	681b      	ldr	r3, [r3, #0]
 8015370:	b29b      	uxth	r3, r3
 8015372:	1ad3      	subs	r3, r2, r3
 8015374:	b29a      	uxth	r2, r3
 8015376:	4b7d      	ldr	r3, [pc, #500]	; (801556c <tcp_receive+0xbe0>)
 8015378:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 801537a:	4b7c      	ldr	r3, [pc, #496]	; (801556c <tcp_receive+0xbe0>)
 801537c:	68db      	ldr	r3, [r3, #12]
 801537e:	899b      	ldrh	r3, [r3, #12]
 8015380:	b29b      	uxth	r3, r3
 8015382:	4618      	mov	r0, r3
 8015384:	f7fb f92e 	bl	80105e4 <lwip_htons>
 8015388:	4603      	mov	r3, r0
 801538a:	f003 0302 	and.w	r3, r3, #2
 801538e:	2b00      	cmp	r3, #0
 8015390:	d005      	beq.n	801539e <tcp_receive+0xa12>
                inseg.len -= 1;
 8015392:	4b76      	ldr	r3, [pc, #472]	; (801556c <tcp_receive+0xbe0>)
 8015394:	891b      	ldrh	r3, [r3, #8]
 8015396:	3b01      	subs	r3, #1
 8015398:	b29a      	uxth	r2, r3
 801539a:	4b74      	ldr	r3, [pc, #464]	; (801556c <tcp_receive+0xbe0>)
 801539c:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 801539e:	4b73      	ldr	r3, [pc, #460]	; (801556c <tcp_receive+0xbe0>)
 80153a0:	685a      	ldr	r2, [r3, #4]
 80153a2:	4b72      	ldr	r3, [pc, #456]	; (801556c <tcp_receive+0xbe0>)
 80153a4:	891b      	ldrh	r3, [r3, #8]
 80153a6:	4619      	mov	r1, r3
 80153a8:	4610      	mov	r0, r2
 80153aa:	f7fc f941 	bl	8011630 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 80153ae:	4b6f      	ldr	r3, [pc, #444]	; (801556c <tcp_receive+0xbe0>)
 80153b0:	891c      	ldrh	r4, [r3, #8]
 80153b2:	4b6e      	ldr	r3, [pc, #440]	; (801556c <tcp_receive+0xbe0>)
 80153b4:	68db      	ldr	r3, [r3, #12]
 80153b6:	899b      	ldrh	r3, [r3, #12]
 80153b8:	b29b      	uxth	r3, r3
 80153ba:	4618      	mov	r0, r3
 80153bc:	f7fb f912 	bl	80105e4 <lwip_htons>
 80153c0:	4603      	mov	r3, r0
 80153c2:	f003 0303 	and.w	r3, r3, #3
 80153c6:	2b00      	cmp	r3, #0
 80153c8:	d001      	beq.n	80153ce <tcp_receive+0xa42>
 80153ca:	2301      	movs	r3, #1
 80153cc:	e000      	b.n	80153d0 <tcp_receive+0xa44>
 80153ce:	2300      	movs	r3, #0
 80153d0:	4423      	add	r3, r4
 80153d2:	b29a      	uxth	r2, r3
 80153d4:	4b63      	ldr	r3, [pc, #396]	; (8015564 <tcp_receive+0xbd8>)
 80153d6:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 80153d8:	4b62      	ldr	r3, [pc, #392]	; (8015564 <tcp_receive+0xbd8>)
 80153da:	881b      	ldrh	r3, [r3, #0]
 80153dc:	461a      	mov	r2, r3
 80153de:	4b62      	ldr	r3, [pc, #392]	; (8015568 <tcp_receive+0xbdc>)
 80153e0:	681b      	ldr	r3, [r3, #0]
 80153e2:	441a      	add	r2, r3
 80153e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80153e6:	68db      	ldr	r3, [r3, #12]
 80153e8:	685b      	ldr	r3, [r3, #4]
 80153ea:	429a      	cmp	r2, r3
 80153ec:	d006      	beq.n	80153fc <tcp_receive+0xa70>
 80153ee:	4b60      	ldr	r3, [pc, #384]	; (8015570 <tcp_receive+0xbe4>)
 80153f0:	f240 52af 	movw	r2, #1455	; 0x5af
 80153f4:	495f      	ldr	r1, [pc, #380]	; (8015574 <tcp_receive+0xbe8>)
 80153f6:	4860      	ldr	r0, [pc, #384]	; (8015578 <tcp_receive+0xbec>)
 80153f8:	f005 fcfa 	bl	801adf0 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 80153fc:	687b      	ldr	r3, [r7, #4]
 80153fe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8015400:	671a      	str	r2, [r3, #112]	; 0x70
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 8015402:	4b58      	ldr	r3, [pc, #352]	; (8015564 <tcp_receive+0xbd8>)
 8015404:	881b      	ldrh	r3, [r3, #0]
 8015406:	461a      	mov	r2, r3
 8015408:	4b57      	ldr	r3, [pc, #348]	; (8015568 <tcp_receive+0xbdc>)
 801540a:	681b      	ldr	r3, [r3, #0]
 801540c:	441a      	add	r2, r3
 801540e:	687b      	ldr	r3, [r7, #4]
 8015410:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 8015412:	687b      	ldr	r3, [r7, #4]
 8015414:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8015416:	4b53      	ldr	r3, [pc, #332]	; (8015564 <tcp_receive+0xbd8>)
 8015418:	881b      	ldrh	r3, [r3, #0]
 801541a:	429a      	cmp	r2, r3
 801541c:	d206      	bcs.n	801542c <tcp_receive+0xaa0>
 801541e:	4b54      	ldr	r3, [pc, #336]	; (8015570 <tcp_receive+0xbe4>)
 8015420:	f240 52b9 	movw	r2, #1465	; 0x5b9
 8015424:	4955      	ldr	r1, [pc, #340]	; (801557c <tcp_receive+0xbf0>)
 8015426:	4854      	ldr	r0, [pc, #336]	; (8015578 <tcp_receive+0xbec>)
 8015428:	f005 fce2 	bl	801adf0 <iprintf>
        pcb->rcv_wnd -= tcplen;
 801542c:	687b      	ldr	r3, [r7, #4]
 801542e:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8015430:	4b4c      	ldr	r3, [pc, #304]	; (8015564 <tcp_receive+0xbd8>)
 8015432:	881b      	ldrh	r3, [r3, #0]
 8015434:	1ad3      	subs	r3, r2, r3
 8015436:	b29a      	uxth	r2, r3
 8015438:	687b      	ldr	r3, [r7, #4]
 801543a:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 801543c:	6878      	ldr	r0, [r7, #4]
 801543e:	f7fd f8f7 	bl	8012630 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 8015442:	4b4a      	ldr	r3, [pc, #296]	; (801556c <tcp_receive+0xbe0>)
 8015444:	685b      	ldr	r3, [r3, #4]
 8015446:	891b      	ldrh	r3, [r3, #8]
 8015448:	2b00      	cmp	r3, #0
 801544a:	d006      	beq.n	801545a <tcp_receive+0xace>
          recv_data = inseg.p;
 801544c:	4b47      	ldr	r3, [pc, #284]	; (801556c <tcp_receive+0xbe0>)
 801544e:	685b      	ldr	r3, [r3, #4]
 8015450:	4a4b      	ldr	r2, [pc, #300]	; (8015580 <tcp_receive+0xbf4>)
 8015452:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 8015454:	4b45      	ldr	r3, [pc, #276]	; (801556c <tcp_receive+0xbe0>)
 8015456:	2200      	movs	r2, #0
 8015458:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 801545a:	4b44      	ldr	r3, [pc, #272]	; (801556c <tcp_receive+0xbe0>)
 801545c:	68db      	ldr	r3, [r3, #12]
 801545e:	899b      	ldrh	r3, [r3, #12]
 8015460:	b29b      	uxth	r3, r3
 8015462:	4618      	mov	r0, r3
 8015464:	f7fb f8be 	bl	80105e4 <lwip_htons>
 8015468:	4603      	mov	r3, r0
 801546a:	f003 0301 	and.w	r3, r3, #1
 801546e:	2b00      	cmp	r3, #0
 8015470:	f000 80b4 	beq.w	80155dc <tcp_receive+0xc50>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 8015474:	4b43      	ldr	r3, [pc, #268]	; (8015584 <tcp_receive+0xbf8>)
 8015476:	781b      	ldrb	r3, [r3, #0]
 8015478:	f043 0320 	orr.w	r3, r3, #32
 801547c:	b2da      	uxtb	r2, r3
 801547e:	4b41      	ldr	r3, [pc, #260]	; (8015584 <tcp_receive+0xbf8>)
 8015480:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 8015482:	e0ab      	b.n	80155dc <tcp_receive+0xc50>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          cseg = pcb->ooseq;
 8015484:	687b      	ldr	r3, [r7, #4]
 8015486:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8015488:	60fb      	str	r3, [r7, #12]
          seqno = pcb->ooseq->tcphdr->seqno;
 801548a:	687b      	ldr	r3, [r7, #4]
 801548c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801548e:	68db      	ldr	r3, [r3, #12]
 8015490:	685b      	ldr	r3, [r3, #4]
 8015492:	4a35      	ldr	r2, [pc, #212]	; (8015568 <tcp_receive+0xbdc>)
 8015494:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 8015496:	68fb      	ldr	r3, [r7, #12]
 8015498:	891b      	ldrh	r3, [r3, #8]
 801549a:	461c      	mov	r4, r3
 801549c:	68fb      	ldr	r3, [r7, #12]
 801549e:	68db      	ldr	r3, [r3, #12]
 80154a0:	899b      	ldrh	r3, [r3, #12]
 80154a2:	b29b      	uxth	r3, r3
 80154a4:	4618      	mov	r0, r3
 80154a6:	f7fb f89d 	bl	80105e4 <lwip_htons>
 80154aa:	4603      	mov	r3, r0
 80154ac:	f003 0303 	and.w	r3, r3, #3
 80154b0:	2b00      	cmp	r3, #0
 80154b2:	d001      	beq.n	80154b8 <tcp_receive+0xb2c>
 80154b4:	2301      	movs	r3, #1
 80154b6:	e000      	b.n	80154ba <tcp_receive+0xb2e>
 80154b8:	2300      	movs	r3, #0
 80154ba:	191a      	adds	r2, r3, r4
 80154bc:	687b      	ldr	r3, [r7, #4]
 80154be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80154c0:	441a      	add	r2, r3
 80154c2:	687b      	ldr	r3, [r7, #4]
 80154c4:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 80154c6:	687b      	ldr	r3, [r7, #4]
 80154c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80154ca:	461c      	mov	r4, r3
 80154cc:	68fb      	ldr	r3, [r7, #12]
 80154ce:	891b      	ldrh	r3, [r3, #8]
 80154d0:	461d      	mov	r5, r3
 80154d2:	68fb      	ldr	r3, [r7, #12]
 80154d4:	68db      	ldr	r3, [r3, #12]
 80154d6:	899b      	ldrh	r3, [r3, #12]
 80154d8:	b29b      	uxth	r3, r3
 80154da:	4618      	mov	r0, r3
 80154dc:	f7fb f882 	bl	80105e4 <lwip_htons>
 80154e0:	4603      	mov	r3, r0
 80154e2:	f003 0303 	and.w	r3, r3, #3
 80154e6:	2b00      	cmp	r3, #0
 80154e8:	d001      	beq.n	80154ee <tcp_receive+0xb62>
 80154ea:	2301      	movs	r3, #1
 80154ec:	e000      	b.n	80154f0 <tcp_receive+0xb64>
 80154ee:	2300      	movs	r3, #0
 80154f0:	442b      	add	r3, r5
 80154f2:	429c      	cmp	r4, r3
 80154f4:	d206      	bcs.n	8015504 <tcp_receive+0xb78>
 80154f6:	4b1e      	ldr	r3, [pc, #120]	; (8015570 <tcp_receive+0xbe4>)
 80154f8:	f240 52de 	movw	r2, #1502	; 0x5de
 80154fc:	4922      	ldr	r1, [pc, #136]	; (8015588 <tcp_receive+0xbfc>)
 80154fe:	481e      	ldr	r0, [pc, #120]	; (8015578 <tcp_receive+0xbec>)
 8015500:	f005 fc76 	bl	801adf0 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 8015504:	68fb      	ldr	r3, [r7, #12]
 8015506:	891b      	ldrh	r3, [r3, #8]
 8015508:	461c      	mov	r4, r3
 801550a:	68fb      	ldr	r3, [r7, #12]
 801550c:	68db      	ldr	r3, [r3, #12]
 801550e:	899b      	ldrh	r3, [r3, #12]
 8015510:	b29b      	uxth	r3, r3
 8015512:	4618      	mov	r0, r3
 8015514:	f7fb f866 	bl	80105e4 <lwip_htons>
 8015518:	4603      	mov	r3, r0
 801551a:	f003 0303 	and.w	r3, r3, #3
 801551e:	2b00      	cmp	r3, #0
 8015520:	d001      	beq.n	8015526 <tcp_receive+0xb9a>
 8015522:	2301      	movs	r3, #1
 8015524:	e000      	b.n	8015528 <tcp_receive+0xb9c>
 8015526:	2300      	movs	r3, #0
 8015528:	1919      	adds	r1, r3, r4
 801552a:	687b      	ldr	r3, [r7, #4]
 801552c:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 801552e:	b28b      	uxth	r3, r1
 8015530:	1ad3      	subs	r3, r2, r3
 8015532:	b29a      	uxth	r2, r3
 8015534:	687b      	ldr	r3, [r7, #4]
 8015536:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 8015538:	6878      	ldr	r0, [r7, #4]
 801553a:	f7fd f879 	bl	8012630 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 801553e:	68fb      	ldr	r3, [r7, #12]
 8015540:	685b      	ldr	r3, [r3, #4]
 8015542:	891b      	ldrh	r3, [r3, #8]
 8015544:	2b00      	cmp	r3, #0
 8015546:	d028      	beq.n	801559a <tcp_receive+0xc0e>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 8015548:	4b0d      	ldr	r3, [pc, #52]	; (8015580 <tcp_receive+0xbf4>)
 801554a:	681b      	ldr	r3, [r3, #0]
 801554c:	2b00      	cmp	r3, #0
 801554e:	d01d      	beq.n	801558c <tcp_receive+0xc00>
              pbuf_cat(recv_data, cseg->p);
 8015550:	4b0b      	ldr	r3, [pc, #44]	; (8015580 <tcp_receive+0xbf4>)
 8015552:	681a      	ldr	r2, [r3, #0]
 8015554:	68fb      	ldr	r3, [r7, #12]
 8015556:	685b      	ldr	r3, [r3, #4]
 8015558:	4619      	mov	r1, r3
 801555a:	4610      	mov	r0, r2
 801555c:	f7fc fab6 	bl	8011acc <pbuf_cat>
 8015560:	e018      	b.n	8015594 <tcp_receive+0xc08>
 8015562:	bf00      	nop
 8015564:	20004232 	.word	0x20004232
 8015568:	20004228 	.word	0x20004228
 801556c:	20004208 	.word	0x20004208
 8015570:	0801d710 	.word	0x0801d710
 8015574:	0801da14 	.word	0x0801da14
 8015578:	0801d754 	.word	0x0801d754
 801557c:	0801da50 	.word	0x0801da50
 8015580:	20004238 	.word	0x20004238
 8015584:	20004235 	.word	0x20004235
 8015588:	0801da70 	.word	0x0801da70
            } else {
              recv_data = cseg->p;
 801558c:	68fb      	ldr	r3, [r7, #12]
 801558e:	685b      	ldr	r3, [r3, #4]
 8015590:	4a71      	ldr	r2, [pc, #452]	; (8015758 <tcp_receive+0xdcc>)
 8015592:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 8015594:	68fb      	ldr	r3, [r7, #12]
 8015596:	2200      	movs	r2, #0
 8015598:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 801559a:	68fb      	ldr	r3, [r7, #12]
 801559c:	68db      	ldr	r3, [r3, #12]
 801559e:	899b      	ldrh	r3, [r3, #12]
 80155a0:	b29b      	uxth	r3, r3
 80155a2:	4618      	mov	r0, r3
 80155a4:	f7fb f81e 	bl	80105e4 <lwip_htons>
 80155a8:	4603      	mov	r3, r0
 80155aa:	f003 0301 	and.w	r3, r3, #1
 80155ae:	2b00      	cmp	r3, #0
 80155b0:	d00d      	beq.n	80155ce <tcp_receive+0xc42>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 80155b2:	4b6a      	ldr	r3, [pc, #424]	; (801575c <tcp_receive+0xdd0>)
 80155b4:	781b      	ldrb	r3, [r3, #0]
 80155b6:	f043 0320 	orr.w	r3, r3, #32
 80155ba:	b2da      	uxtb	r2, r3
 80155bc:	4b67      	ldr	r3, [pc, #412]	; (801575c <tcp_receive+0xdd0>)
 80155be:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 80155c0:	687b      	ldr	r3, [r7, #4]
 80155c2:	7d1b      	ldrb	r3, [r3, #20]
 80155c4:	2b04      	cmp	r3, #4
 80155c6:	d102      	bne.n	80155ce <tcp_receive+0xc42>
              pcb->state = CLOSE_WAIT;
 80155c8:	687b      	ldr	r3, [r7, #4]
 80155ca:	2207      	movs	r2, #7
 80155cc:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 80155ce:	68fb      	ldr	r3, [r7, #12]
 80155d0:	681a      	ldr	r2, [r3, #0]
 80155d2:	687b      	ldr	r3, [r7, #4]
 80155d4:	671a      	str	r2, [r3, #112]	; 0x70
          tcp_seg_free(cseg);
 80155d6:	68f8      	ldr	r0, [r7, #12]
 80155d8:	f7fd fcb7 	bl	8012f4a <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 80155dc:	687b      	ldr	r3, [r7, #4]
 80155de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80155e0:	2b00      	cmp	r3, #0
 80155e2:	d008      	beq.n	80155f6 <tcp_receive+0xc6a>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 80155e4:	687b      	ldr	r3, [r7, #4]
 80155e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80155e8:	68db      	ldr	r3, [r3, #12]
 80155ea:	685a      	ldr	r2, [r3, #4]
 80155ec:	687b      	ldr	r3, [r7, #4]
 80155ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 80155f0:	429a      	cmp	r2, r3
 80155f2:	f43f af47 	beq.w	8015484 <tcp_receive+0xaf8>
        }
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 80155f6:	687b      	ldr	r3, [r7, #4]
 80155f8:	7e9b      	ldrb	r3, [r3, #26]
 80155fa:	f003 0301 	and.w	r3, r3, #1
 80155fe:	2b00      	cmp	r3, #0
 8015600:	d00e      	beq.n	8015620 <tcp_receive+0xc94>
 8015602:	687b      	ldr	r3, [r7, #4]
 8015604:	7e9b      	ldrb	r3, [r3, #26]
 8015606:	f023 0301 	bic.w	r3, r3, #1
 801560a:	b2da      	uxtb	r2, r3
 801560c:	687b      	ldr	r3, [r7, #4]
 801560e:	769a      	strb	r2, [r3, #26]
 8015610:	687b      	ldr	r3, [r7, #4]
 8015612:	7e9b      	ldrb	r3, [r3, #26]
 8015614:	f043 0302 	orr.w	r3, r3, #2
 8015618:	b2da      	uxtb	r2, r3
 801561a:	687b      	ldr	r3, [r7, #4]
 801561c:	769a      	strb	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 801561e:	e181      	b.n	8015924 <tcp_receive+0xf98>
        tcp_ack(pcb);
 8015620:	687b      	ldr	r3, [r7, #4]
 8015622:	7e9b      	ldrb	r3, [r3, #26]
 8015624:	f043 0301 	orr.w	r3, r3, #1
 8015628:	b2da      	uxtb	r2, r3
 801562a:	687b      	ldr	r3, [r7, #4]
 801562c:	769a      	strb	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 801562e:	e179      	b.n	8015924 <tcp_receive+0xf98>
        }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      } else {
        /* We get here if the incoming segment is out-of-sequence. */
        tcp_send_empty_ack(pcb);
 8015630:	6878      	ldr	r0, [r7, #4]
 8015632:	f001 f8c5 	bl	80167c0 <tcp_send_empty_ack>
#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 8015636:	687b      	ldr	r3, [r7, #4]
 8015638:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801563a:	2b00      	cmp	r3, #0
 801563c:	d106      	bne.n	801564c <tcp_receive+0xcc0>
          pcb->ooseq = tcp_seg_copy(&inseg);
 801563e:	4848      	ldr	r0, [pc, #288]	; (8015760 <tcp_receive+0xdd4>)
 8015640:	f7fd fc9b 	bl	8012f7a <tcp_seg_copy>
 8015644:	4602      	mov	r2, r0
 8015646:	687b      	ldr	r3, [r7, #4]
 8015648:	671a      	str	r2, [r3, #112]	; 0x70
      if (pcb->rcv_nxt == seqno) {
 801564a:	e16b      	b.n	8015924 <tcp_receive+0xf98>

             If the incoming segment has the same sequence number as a
             segment on the ->ooseq queue, we discard the segment that
             contains less data. */

          prev = NULL;
 801564c:	2300      	movs	r3, #0
 801564e:	62bb      	str	r3, [r7, #40]	; 0x28
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8015650:	687b      	ldr	r3, [r7, #4]
 8015652:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8015654:	62fb      	str	r3, [r7, #44]	; 0x2c
 8015656:	e150      	b.n	80158fa <tcp_receive+0xf6e>
            if (seqno == next->tcphdr->seqno) {
 8015658:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801565a:	68db      	ldr	r3, [r3, #12]
 801565c:	685a      	ldr	r2, [r3, #4]
 801565e:	4b41      	ldr	r3, [pc, #260]	; (8015764 <tcp_receive+0xdd8>)
 8015660:	681b      	ldr	r3, [r3, #0]
 8015662:	429a      	cmp	r2, r3
 8015664:	d11d      	bne.n	80156a2 <tcp_receive+0xd16>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 8015666:	4b3e      	ldr	r3, [pc, #248]	; (8015760 <tcp_receive+0xdd4>)
 8015668:	891a      	ldrh	r2, [r3, #8]
 801566a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801566c:	891b      	ldrh	r3, [r3, #8]
 801566e:	429a      	cmp	r2, r3
 8015670:	f240 8148 	bls.w	8015904 <tcp_receive+0xf78>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                cseg = tcp_seg_copy(&inseg);
 8015674:	483a      	ldr	r0, [pc, #232]	; (8015760 <tcp_receive+0xdd4>)
 8015676:	f7fd fc80 	bl	8012f7a <tcp_seg_copy>
 801567a:	60f8      	str	r0, [r7, #12]
                if (cseg != NULL) {
 801567c:	68fb      	ldr	r3, [r7, #12]
 801567e:	2b00      	cmp	r3, #0
 8015680:	f000 8142 	beq.w	8015908 <tcp_receive+0xf7c>
                  if (prev != NULL) {
 8015684:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015686:	2b00      	cmp	r3, #0
 8015688:	d003      	beq.n	8015692 <tcp_receive+0xd06>
                    prev->next = cseg;
 801568a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801568c:	68fa      	ldr	r2, [r7, #12]
 801568e:	601a      	str	r2, [r3, #0]
 8015690:	e002      	b.n	8015698 <tcp_receive+0xd0c>
                  } else {
                    pcb->ooseq = cseg;
 8015692:	687b      	ldr	r3, [r7, #4]
 8015694:	68fa      	ldr	r2, [r7, #12]
 8015696:	671a      	str	r2, [r3, #112]	; 0x70
                  }
                  tcp_oos_insert_segment(cseg, next);
 8015698:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801569a:	68f8      	ldr	r0, [r7, #12]
 801569c:	f7ff f900 	bl	80148a0 <tcp_oos_insert_segment>
                }
                break;
 80156a0:	e132      	b.n	8015908 <tcp_receive+0xf7c>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 80156a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80156a4:	2b00      	cmp	r3, #0
 80156a6:	d117      	bne.n	80156d8 <tcp_receive+0xd4c>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 80156a8:	4b2e      	ldr	r3, [pc, #184]	; (8015764 <tcp_receive+0xdd8>)
 80156aa:	681a      	ldr	r2, [r3, #0]
 80156ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80156ae:	68db      	ldr	r3, [r3, #12]
 80156b0:	685b      	ldr	r3, [r3, #4]
 80156b2:	1ad3      	subs	r3, r2, r3
 80156b4:	2b00      	cmp	r3, #0
 80156b6:	da57      	bge.n	8015768 <tcp_receive+0xddc>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  cseg = tcp_seg_copy(&inseg);
 80156b8:	4829      	ldr	r0, [pc, #164]	; (8015760 <tcp_receive+0xdd4>)
 80156ba:	f7fd fc5e 	bl	8012f7a <tcp_seg_copy>
 80156be:	60f8      	str	r0, [r7, #12]
                  if (cseg != NULL) {
 80156c0:	68fb      	ldr	r3, [r7, #12]
 80156c2:	2b00      	cmp	r3, #0
 80156c4:	f000 8122 	beq.w	801590c <tcp_receive+0xf80>
                    pcb->ooseq = cseg;
 80156c8:	687b      	ldr	r3, [r7, #4]
 80156ca:	68fa      	ldr	r2, [r7, #12]
 80156cc:	671a      	str	r2, [r3, #112]	; 0x70
                    tcp_oos_insert_segment(cseg, next);
 80156ce:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80156d0:	68f8      	ldr	r0, [r7, #12]
 80156d2:	f7ff f8e5 	bl	80148a0 <tcp_oos_insert_segment>
                  }
                  break;
 80156d6:	e119      	b.n	801590c <tcp_receive+0xf80>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno+1, next->tcphdr->seqno-1)) {
 80156d8:	4b22      	ldr	r3, [pc, #136]	; (8015764 <tcp_receive+0xdd8>)
 80156da:	681a      	ldr	r2, [r3, #0]
 80156dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80156de:	68db      	ldr	r3, [r3, #12]
 80156e0:	685b      	ldr	r3, [r3, #4]
 80156e2:	1ad3      	subs	r3, r2, r3
 80156e4:	3b01      	subs	r3, #1
 80156e6:	2b00      	cmp	r3, #0
 80156e8:	db3e      	blt.n	8015768 <tcp_receive+0xddc>
 80156ea:	4b1e      	ldr	r3, [pc, #120]	; (8015764 <tcp_receive+0xdd8>)
 80156ec:	681a      	ldr	r2, [r3, #0]
 80156ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80156f0:	68db      	ldr	r3, [r3, #12]
 80156f2:	685b      	ldr	r3, [r3, #4]
 80156f4:	1ad3      	subs	r3, r2, r3
 80156f6:	3301      	adds	r3, #1
 80156f8:	2b00      	cmp	r3, #0
 80156fa:	dc35      	bgt.n	8015768 <tcp_receive+0xddc>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  cseg = tcp_seg_copy(&inseg);
 80156fc:	4818      	ldr	r0, [pc, #96]	; (8015760 <tcp_receive+0xdd4>)
 80156fe:	f7fd fc3c 	bl	8012f7a <tcp_seg_copy>
 8015702:	60f8      	str	r0, [r7, #12]
                  if (cseg != NULL) {
 8015704:	68fb      	ldr	r3, [r7, #12]
 8015706:	2b00      	cmp	r3, #0
 8015708:	f000 8102 	beq.w	8015910 <tcp_receive+0xf84>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 801570c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801570e:	68db      	ldr	r3, [r3, #12]
 8015710:	685b      	ldr	r3, [r3, #4]
 8015712:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8015714:	8912      	ldrh	r2, [r2, #8]
 8015716:	441a      	add	r2, r3
 8015718:	4b12      	ldr	r3, [pc, #72]	; (8015764 <tcp_receive+0xdd8>)
 801571a:	681b      	ldr	r3, [r3, #0]
 801571c:	1ad3      	subs	r3, r2, r3
 801571e:	2b00      	cmp	r3, #0
 8015720:	dd12      	ble.n	8015748 <tcp_receive+0xdbc>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 8015722:	4b10      	ldr	r3, [pc, #64]	; (8015764 <tcp_receive+0xdd8>)
 8015724:	681b      	ldr	r3, [r3, #0]
 8015726:	b29a      	uxth	r2, r3
 8015728:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801572a:	68db      	ldr	r3, [r3, #12]
 801572c:	685b      	ldr	r3, [r3, #4]
 801572e:	b29b      	uxth	r3, r3
 8015730:	1ad3      	subs	r3, r2, r3
 8015732:	b29a      	uxth	r2, r3
 8015734:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015736:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 8015738:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801573a:	685a      	ldr	r2, [r3, #4]
 801573c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801573e:	891b      	ldrh	r3, [r3, #8]
 8015740:	4619      	mov	r1, r3
 8015742:	4610      	mov	r0, r2
 8015744:	f7fb ff74 	bl	8011630 <pbuf_realloc>
                    }
                    prev->next = cseg;
 8015748:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801574a:	68fa      	ldr	r2, [r7, #12]
 801574c:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 801574e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8015750:	68f8      	ldr	r0, [r7, #12]
 8015752:	f7ff f8a5 	bl	80148a0 <tcp_oos_insert_segment>
                  }
                  break;
 8015756:	e0db      	b.n	8015910 <tcp_receive+0xf84>
 8015758:	20004238 	.word	0x20004238
 801575c:	20004235 	.word	0x20004235
 8015760:	20004208 	.word	0x20004208
 8015764:	20004228 	.word	0x20004228
                }
              }
              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 8015768:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801576a:	681b      	ldr	r3, [r3, #0]
 801576c:	2b00      	cmp	r3, #0
 801576e:	f040 80bf 	bne.w	80158f0 <tcp_receive+0xf64>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 8015772:	4b7c      	ldr	r3, [pc, #496]	; (8015964 <tcp_receive+0xfd8>)
 8015774:	681a      	ldr	r2, [r3, #0]
 8015776:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015778:	68db      	ldr	r3, [r3, #12]
 801577a:	685b      	ldr	r3, [r3, #4]
 801577c:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 801577e:	2b00      	cmp	r3, #0
 8015780:	f340 80b6 	ble.w	80158f0 <tcp_receive+0xf64>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8015784:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015786:	68db      	ldr	r3, [r3, #12]
 8015788:	899b      	ldrh	r3, [r3, #12]
 801578a:	b29b      	uxth	r3, r3
 801578c:	4618      	mov	r0, r3
 801578e:	f7fa ff29 	bl	80105e4 <lwip_htons>
 8015792:	4603      	mov	r3, r0
 8015794:	f003 0301 	and.w	r3, r3, #1
 8015798:	2b00      	cmp	r3, #0
 801579a:	f040 80bb 	bne.w	8015914 <tcp_receive+0xf88>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 801579e:	4872      	ldr	r0, [pc, #456]	; (8015968 <tcp_receive+0xfdc>)
 80157a0:	f7fd fbeb 	bl	8012f7a <tcp_seg_copy>
 80157a4:	4602      	mov	r2, r0
 80157a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80157a8:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 80157aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80157ac:	681b      	ldr	r3, [r3, #0]
 80157ae:	2b00      	cmp	r3, #0
 80157b0:	f000 80b2 	beq.w	8015918 <tcp_receive+0xf8c>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 80157b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80157b6:	68db      	ldr	r3, [r3, #12]
 80157b8:	685b      	ldr	r3, [r3, #4]
 80157ba:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80157bc:	8912      	ldrh	r2, [r2, #8]
 80157be:	441a      	add	r2, r3
 80157c0:	4b68      	ldr	r3, [pc, #416]	; (8015964 <tcp_receive+0xfd8>)
 80157c2:	681b      	ldr	r3, [r3, #0]
 80157c4:	1ad3      	subs	r3, r2, r3
 80157c6:	2b00      	cmp	r3, #0
 80157c8:	dd12      	ble.n	80157f0 <tcp_receive+0xe64>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 80157ca:	4b66      	ldr	r3, [pc, #408]	; (8015964 <tcp_receive+0xfd8>)
 80157cc:	681b      	ldr	r3, [r3, #0]
 80157ce:	b29a      	uxth	r2, r3
 80157d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80157d2:	68db      	ldr	r3, [r3, #12]
 80157d4:	685b      	ldr	r3, [r3, #4]
 80157d6:	b29b      	uxth	r3, r3
 80157d8:	1ad3      	subs	r3, r2, r3
 80157da:	b29a      	uxth	r2, r3
 80157dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80157de:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 80157e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80157e2:	685a      	ldr	r2, [r3, #4]
 80157e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80157e6:	891b      	ldrh	r3, [r3, #8]
 80157e8:	4619      	mov	r1, r3
 80157ea:	4610      	mov	r0, r2
 80157ec:	f7fb ff20 	bl	8011630 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 80157f0:	4b5e      	ldr	r3, [pc, #376]	; (801596c <tcp_receive+0xfe0>)
 80157f2:	881b      	ldrh	r3, [r3, #0]
 80157f4:	461a      	mov	r2, r3
 80157f6:	4b5b      	ldr	r3, [pc, #364]	; (8015964 <tcp_receive+0xfd8>)
 80157f8:	681b      	ldr	r3, [r3, #0]
 80157fa:	441a      	add	r2, r3
 80157fc:	687b      	ldr	r3, [r7, #4]
 80157fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015800:	6879      	ldr	r1, [r7, #4]
 8015802:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8015804:	440b      	add	r3, r1
 8015806:	1ad3      	subs	r3, r2, r3
 8015808:	2b00      	cmp	r3, #0
 801580a:	f340 8085 	ble.w	8015918 <tcp_receive+0xf8c>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 801580e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015810:	681b      	ldr	r3, [r3, #0]
 8015812:	68db      	ldr	r3, [r3, #12]
 8015814:	899b      	ldrh	r3, [r3, #12]
 8015816:	b29b      	uxth	r3, r3
 8015818:	4618      	mov	r0, r3
 801581a:	f7fa fee3 	bl	80105e4 <lwip_htons>
 801581e:	4603      	mov	r3, r0
 8015820:	f003 0301 	and.w	r3, r3, #1
 8015824:	2b00      	cmp	r3, #0
 8015826:	d01e      	beq.n	8015866 <tcp_receive+0xeda>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 8015828:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801582a:	681b      	ldr	r3, [r3, #0]
 801582c:	68db      	ldr	r3, [r3, #12]
 801582e:	899b      	ldrh	r3, [r3, #12]
 8015830:	b29b      	uxth	r3, r3
 8015832:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8015836:	b29c      	uxth	r4, r3
 8015838:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801583a:	681b      	ldr	r3, [r3, #0]
 801583c:	68db      	ldr	r3, [r3, #12]
 801583e:	899b      	ldrh	r3, [r3, #12]
 8015840:	b29b      	uxth	r3, r3
 8015842:	4618      	mov	r0, r3
 8015844:	f7fa fece 	bl	80105e4 <lwip_htons>
 8015848:	4603      	mov	r3, r0
 801584a:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 801584e:	b29b      	uxth	r3, r3
 8015850:	4618      	mov	r0, r3
 8015852:	f7fa fec7 	bl	80105e4 <lwip_htons>
 8015856:	4603      	mov	r3, r0
 8015858:	461a      	mov	r2, r3
 801585a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801585c:	681b      	ldr	r3, [r3, #0]
 801585e:	68db      	ldr	r3, [r3, #12]
 8015860:	4322      	orrs	r2, r4
 8015862:	b292      	uxth	r2, r2
 8015864:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 8015866:	687b      	ldr	r3, [r7, #4]
 8015868:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801586a:	b29a      	uxth	r2, r3
 801586c:	687b      	ldr	r3, [r7, #4]
 801586e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8015870:	4413      	add	r3, r2
 8015872:	b299      	uxth	r1, r3
 8015874:	4b3b      	ldr	r3, [pc, #236]	; (8015964 <tcp_receive+0xfd8>)
 8015876:	681b      	ldr	r3, [r3, #0]
 8015878:	b29a      	uxth	r2, r3
 801587a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801587c:	681b      	ldr	r3, [r3, #0]
 801587e:	1a8a      	subs	r2, r1, r2
 8015880:	b292      	uxth	r2, r2
 8015882:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 8015884:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015886:	681b      	ldr	r3, [r3, #0]
 8015888:	685a      	ldr	r2, [r3, #4]
 801588a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801588c:	681b      	ldr	r3, [r3, #0]
 801588e:	891b      	ldrh	r3, [r3, #8]
 8015890:	4619      	mov	r1, r3
 8015892:	4610      	mov	r0, r2
 8015894:	f7fb fecc 	bl	8011630 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 8015898:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801589a:	681b      	ldr	r3, [r3, #0]
 801589c:	891c      	ldrh	r4, [r3, #8]
 801589e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80158a0:	681b      	ldr	r3, [r3, #0]
 80158a2:	68db      	ldr	r3, [r3, #12]
 80158a4:	899b      	ldrh	r3, [r3, #12]
 80158a6:	b29b      	uxth	r3, r3
 80158a8:	4618      	mov	r0, r3
 80158aa:	f7fa fe9b 	bl	80105e4 <lwip_htons>
 80158ae:	4603      	mov	r3, r0
 80158b0:	f003 0303 	and.w	r3, r3, #3
 80158b4:	2b00      	cmp	r3, #0
 80158b6:	d001      	beq.n	80158bc <tcp_receive+0xf30>
 80158b8:	2301      	movs	r3, #1
 80158ba:	e000      	b.n	80158be <tcp_receive+0xf32>
 80158bc:	2300      	movs	r3, #0
 80158be:	4423      	add	r3, r4
 80158c0:	b29a      	uxth	r2, r3
 80158c2:	4b2a      	ldr	r3, [pc, #168]	; (801596c <tcp_receive+0xfe0>)
 80158c4:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 80158c6:	4b29      	ldr	r3, [pc, #164]	; (801596c <tcp_receive+0xfe0>)
 80158c8:	881b      	ldrh	r3, [r3, #0]
 80158ca:	461a      	mov	r2, r3
 80158cc:	4b25      	ldr	r3, [pc, #148]	; (8015964 <tcp_receive+0xfd8>)
 80158ce:	681b      	ldr	r3, [r3, #0]
 80158d0:	441a      	add	r2, r3
 80158d2:	687b      	ldr	r3, [r7, #4]
 80158d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80158d6:	6879      	ldr	r1, [r7, #4]
 80158d8:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80158da:	440b      	add	r3, r1
 80158dc:	429a      	cmp	r2, r3
 80158de:	d01b      	beq.n	8015918 <tcp_receive+0xf8c>
 80158e0:	4b23      	ldr	r3, [pc, #140]	; (8015970 <tcp_receive+0xfe4>)
 80158e2:	f240 627b 	movw	r2, #1659	; 0x67b
 80158e6:	4923      	ldr	r1, [pc, #140]	; (8015974 <tcp_receive+0xfe8>)
 80158e8:	4823      	ldr	r0, [pc, #140]	; (8015978 <tcp_receive+0xfec>)
 80158ea:	f005 fa81 	bl	801adf0 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 80158ee:	e013      	b.n	8015918 <tcp_receive+0xf8c>
              }
            }
            prev = next;
 80158f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80158f2:	62bb      	str	r3, [r7, #40]	; 0x28
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 80158f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80158f6:	681b      	ldr	r3, [r3, #0]
 80158f8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80158fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80158fc:	2b00      	cmp	r3, #0
 80158fe:	f47f aeab 	bne.w	8015658 <tcp_receive+0xccc>
      if (pcb->rcv_nxt == seqno) {
 8015902:	e00f      	b.n	8015924 <tcp_receive+0xf98>
                break;
 8015904:	bf00      	nop
 8015906:	e00d      	b.n	8015924 <tcp_receive+0xf98>
                break;
 8015908:	bf00      	nop
 801590a:	e00b      	b.n	8015924 <tcp_receive+0xf98>
                  break;
 801590c:	bf00      	nop
 801590e:	e009      	b.n	8015924 <tcp_receive+0xf98>
                  break;
 8015910:	bf00      	nop
 8015912:	e007      	b.n	8015924 <tcp_receive+0xf98>
                  break;
 8015914:	bf00      	nop
 8015916:	e005      	b.n	8015924 <tcp_receive+0xf98>
                break;
 8015918:	bf00      	nop
      if (pcb->rcv_nxt == seqno) {
 801591a:	e003      	b.n	8015924 <tcp_receive+0xf98>
#endif /* TCP_OOSEQ_MAX_BYTES || TCP_OOSEQ_MAX_PBUFS */
#endif /* TCP_QUEUE_OOSEQ */
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 801591c:	6878      	ldr	r0, [r7, #4]
 801591e:	f000 ff4f 	bl	80167c0 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8015922:	e01a      	b.n	801595a <tcp_receive+0xfce>
 8015924:	e019      	b.n	801595a <tcp_receive+0xfce>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 8015926:	4b0f      	ldr	r3, [pc, #60]	; (8015964 <tcp_receive+0xfd8>)
 8015928:	681a      	ldr	r2, [r3, #0]
 801592a:	687b      	ldr	r3, [r7, #4]
 801592c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801592e:	1ad3      	subs	r3, r2, r3
 8015930:	2b00      	cmp	r3, #0
 8015932:	db0a      	blt.n	801594a <tcp_receive+0xfbe>
 8015934:	4b0b      	ldr	r3, [pc, #44]	; (8015964 <tcp_receive+0xfd8>)
 8015936:	681a      	ldr	r2, [r3, #0]
 8015938:	687b      	ldr	r3, [r7, #4]
 801593a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801593c:	6879      	ldr	r1, [r7, #4]
 801593e:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8015940:	440b      	add	r3, r1
 8015942:	1ad3      	subs	r3, r2, r3
 8015944:	3301      	adds	r3, #1
 8015946:	2b00      	cmp	r3, #0
 8015948:	dd07      	ble.n	801595a <tcp_receive+0xfce>
      tcp_ack_now(pcb);
 801594a:	687b      	ldr	r3, [r7, #4]
 801594c:	7e9b      	ldrb	r3, [r3, #26]
 801594e:	f043 0302 	orr.w	r3, r3, #2
 8015952:	b2da      	uxtb	r2, r3
 8015954:	687b      	ldr	r3, [r7, #4]
 8015956:	769a      	strb	r2, [r3, #26]
    }
  }
}
 8015958:	e7ff      	b.n	801595a <tcp_receive+0xfce>
 801595a:	bf00      	nop
 801595c:	3734      	adds	r7, #52	; 0x34
 801595e:	46bd      	mov	sp, r7
 8015960:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015962:	bf00      	nop
 8015964:	20004228 	.word	0x20004228
 8015968:	20004208 	.word	0x20004208
 801596c:	20004232 	.word	0x20004232
 8015970:	0801d710 	.word	0x0801d710
 8015974:	0801d9dc 	.word	0x0801d9dc
 8015978:	0801d754 	.word	0x0801d754

0801597c <tcp_getoptbyte>:

static u8_t
tcp_getoptbyte(void)
{
 801597c:	b480      	push	{r7}
 801597e:	b083      	sub	sp, #12
 8015980:	af00      	add	r7, sp, #0
  if ((tcphdr_opt2 == NULL) || (tcp_optidx < tcphdr_opt1len)) {
 8015982:	4b18      	ldr	r3, [pc, #96]	; (80159e4 <tcp_getoptbyte+0x68>)
 8015984:	681b      	ldr	r3, [r3, #0]
 8015986:	2b00      	cmp	r3, #0
 8015988:	d005      	beq.n	8015996 <tcp_getoptbyte+0x1a>
 801598a:	4b17      	ldr	r3, [pc, #92]	; (80159e8 <tcp_getoptbyte+0x6c>)
 801598c:	881a      	ldrh	r2, [r3, #0]
 801598e:	4b17      	ldr	r3, [pc, #92]	; (80159ec <tcp_getoptbyte+0x70>)
 8015990:	881b      	ldrh	r3, [r3, #0]
 8015992:	429a      	cmp	r2, r3
 8015994:	d20e      	bcs.n	80159b4 <tcp_getoptbyte+0x38>
    u8_t* opts = (u8_t *)tcphdr + TCP_HLEN;
 8015996:	4b16      	ldr	r3, [pc, #88]	; (80159f0 <tcp_getoptbyte+0x74>)
 8015998:	681b      	ldr	r3, [r3, #0]
 801599a:	3314      	adds	r3, #20
 801599c:	603b      	str	r3, [r7, #0]
    return opts[tcp_optidx++];
 801599e:	4b12      	ldr	r3, [pc, #72]	; (80159e8 <tcp_getoptbyte+0x6c>)
 80159a0:	881b      	ldrh	r3, [r3, #0]
 80159a2:	1c5a      	adds	r2, r3, #1
 80159a4:	b291      	uxth	r1, r2
 80159a6:	4a10      	ldr	r2, [pc, #64]	; (80159e8 <tcp_getoptbyte+0x6c>)
 80159a8:	8011      	strh	r1, [r2, #0]
 80159aa:	461a      	mov	r2, r3
 80159ac:	683b      	ldr	r3, [r7, #0]
 80159ae:	4413      	add	r3, r2
 80159b0:	781b      	ldrb	r3, [r3, #0]
 80159b2:	e010      	b.n	80159d6 <tcp_getoptbyte+0x5a>
  } else {
    u8_t idx = (u8_t)(tcp_optidx++ - tcphdr_opt1len);
 80159b4:	4b0c      	ldr	r3, [pc, #48]	; (80159e8 <tcp_getoptbyte+0x6c>)
 80159b6:	881b      	ldrh	r3, [r3, #0]
 80159b8:	1c5a      	adds	r2, r3, #1
 80159ba:	b291      	uxth	r1, r2
 80159bc:	4a0a      	ldr	r2, [pc, #40]	; (80159e8 <tcp_getoptbyte+0x6c>)
 80159be:	8011      	strh	r1, [r2, #0]
 80159c0:	b2da      	uxtb	r2, r3
 80159c2:	4b0a      	ldr	r3, [pc, #40]	; (80159ec <tcp_getoptbyte+0x70>)
 80159c4:	881b      	ldrh	r3, [r3, #0]
 80159c6:	b2db      	uxtb	r3, r3
 80159c8:	1ad3      	subs	r3, r2, r3
 80159ca:	71fb      	strb	r3, [r7, #7]
    return tcphdr_opt2[idx];
 80159cc:	4b05      	ldr	r3, [pc, #20]	; (80159e4 <tcp_getoptbyte+0x68>)
 80159ce:	681a      	ldr	r2, [r3, #0]
 80159d0:	79fb      	ldrb	r3, [r7, #7]
 80159d2:	4413      	add	r3, r2
 80159d4:	781b      	ldrb	r3, [r3, #0]
  }
}
 80159d6:	4618      	mov	r0, r3
 80159d8:	370c      	adds	r7, #12
 80159da:	46bd      	mov	sp, r7
 80159dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80159e0:	4770      	bx	lr
 80159e2:	bf00      	nop
 80159e4:	20004220 	.word	0x20004220
 80159e8:	20004224 	.word	0x20004224
 80159ec:	2000421e 	.word	0x2000421e
 80159f0:	20004218 	.word	0x20004218

080159f4 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 80159f4:	b580      	push	{r7, lr}
 80159f6:	b084      	sub	sp, #16
 80159f8:	af00      	add	r7, sp, #0
 80159fa:	6078      	str	r0, [r7, #4]
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 80159fc:	4b2d      	ldr	r3, [pc, #180]	; (8015ab4 <tcp_parseopt+0xc0>)
 80159fe:	881b      	ldrh	r3, [r3, #0]
 8015a00:	2b00      	cmp	r3, #0
 8015a02:	d053      	beq.n	8015aac <tcp_parseopt+0xb8>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8015a04:	4b2c      	ldr	r3, [pc, #176]	; (8015ab8 <tcp_parseopt+0xc4>)
 8015a06:	2200      	movs	r2, #0
 8015a08:	801a      	strh	r2, [r3, #0]
 8015a0a:	e043      	b.n	8015a94 <tcp_parseopt+0xa0>
      u8_t opt = tcp_getoptbyte();
 8015a0c:	f7ff ffb6 	bl	801597c <tcp_getoptbyte>
 8015a10:	4603      	mov	r3, r0
 8015a12:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 8015a14:	7bfb      	ldrb	r3, [r7, #15]
 8015a16:	2b01      	cmp	r3, #1
 8015a18:	d03c      	beq.n	8015a94 <tcp_parseopt+0xa0>
 8015a1a:	2b02      	cmp	r3, #2
 8015a1c:	d002      	beq.n	8015a24 <tcp_parseopt+0x30>
 8015a1e:	2b00      	cmp	r3, #0
 8015a20:	d03f      	beq.n	8015aa2 <tcp_parseopt+0xae>
 8015a22:	e026      	b.n	8015a72 <tcp_parseopt+0x7e>
        /* NOP option. */
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
        break;
      case LWIP_TCP_OPT_MSS:
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
        if (tcp_getoptbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 8015a24:	f7ff ffaa 	bl	801597c <tcp_getoptbyte>
 8015a28:	4603      	mov	r3, r0
 8015a2a:	2b04      	cmp	r3, #4
 8015a2c:	d13b      	bne.n	8015aa6 <tcp_parseopt+0xb2>
 8015a2e:	4b22      	ldr	r3, [pc, #136]	; (8015ab8 <tcp_parseopt+0xc4>)
 8015a30:	881b      	ldrh	r3, [r3, #0]
 8015a32:	3302      	adds	r3, #2
 8015a34:	4a1f      	ldr	r2, [pc, #124]	; (8015ab4 <tcp_parseopt+0xc0>)
 8015a36:	8812      	ldrh	r2, [r2, #0]
 8015a38:	4293      	cmp	r3, r2
 8015a3a:	dc34      	bgt.n	8015aa6 <tcp_parseopt+0xb2>
          /* Bad length */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
          return;
        }
        /* An MSS option with the right option length. */
        mss = (tcp_getoptbyte() << 8);
 8015a3c:	f7ff ff9e 	bl	801597c <tcp_getoptbyte>
 8015a40:	4603      	mov	r3, r0
 8015a42:	b29b      	uxth	r3, r3
 8015a44:	021b      	lsls	r3, r3, #8
 8015a46:	81bb      	strh	r3, [r7, #12]
        mss |= tcp_getoptbyte();
 8015a48:	f7ff ff98 	bl	801597c <tcp_getoptbyte>
 8015a4c:	4603      	mov	r3, r0
 8015a4e:	b29a      	uxth	r2, r3
 8015a50:	89bb      	ldrh	r3, [r7, #12]
 8015a52:	4313      	orrs	r3, r2
 8015a54:	81bb      	strh	r3, [r7, #12]
        /* Limit the mss to the configured TCP_MSS and prevent division by zero */
        pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 8015a56:	89bb      	ldrh	r3, [r7, #12]
 8015a58:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 8015a5c:	d804      	bhi.n	8015a68 <tcp_parseopt+0x74>
 8015a5e:	89bb      	ldrh	r3, [r7, #12]
 8015a60:	2b00      	cmp	r3, #0
 8015a62:	d001      	beq.n	8015a68 <tcp_parseopt+0x74>
 8015a64:	89ba      	ldrh	r2, [r7, #12]
 8015a66:	e001      	b.n	8015a6c <tcp_parseopt+0x78>
 8015a68:	f44f 7206 	mov.w	r2, #536	; 0x218
 8015a6c:	687b      	ldr	r3, [r7, #4]
 8015a6e:	865a      	strh	r2, [r3, #50]	; 0x32
        break;
 8015a70:	e010      	b.n	8015a94 <tcp_parseopt+0xa0>
        tcp_optidx += LWIP_TCP_OPT_LEN_TS - 6;
        break;
#endif
      default:
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
        data = tcp_getoptbyte();
 8015a72:	f7ff ff83 	bl	801597c <tcp_getoptbyte>
 8015a76:	4603      	mov	r3, r0
 8015a78:	72fb      	strb	r3, [r7, #11]
        if (data < 2) {
 8015a7a:	7afb      	ldrb	r3, [r7, #11]
 8015a7c:	2b01      	cmp	r3, #1
 8015a7e:	d914      	bls.n	8015aaa <tcp_parseopt+0xb6>
             and we don't process them further. */
          return;
        }
        /* All other options have a length field, so that we easily
           can skip past them. */
        tcp_optidx += data - 2;
 8015a80:	7afb      	ldrb	r3, [r7, #11]
 8015a82:	b29a      	uxth	r2, r3
 8015a84:	4b0c      	ldr	r3, [pc, #48]	; (8015ab8 <tcp_parseopt+0xc4>)
 8015a86:	881b      	ldrh	r3, [r3, #0]
 8015a88:	4413      	add	r3, r2
 8015a8a:	b29b      	uxth	r3, r3
 8015a8c:	3b02      	subs	r3, #2
 8015a8e:	b29a      	uxth	r2, r3
 8015a90:	4b09      	ldr	r3, [pc, #36]	; (8015ab8 <tcp_parseopt+0xc4>)
 8015a92:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8015a94:	4b08      	ldr	r3, [pc, #32]	; (8015ab8 <tcp_parseopt+0xc4>)
 8015a96:	881a      	ldrh	r2, [r3, #0]
 8015a98:	4b06      	ldr	r3, [pc, #24]	; (8015ab4 <tcp_parseopt+0xc0>)
 8015a9a:	881b      	ldrh	r3, [r3, #0]
 8015a9c:	429a      	cmp	r2, r3
 8015a9e:	d3b5      	bcc.n	8015a0c <tcp_parseopt+0x18>
 8015aa0:	e004      	b.n	8015aac <tcp_parseopt+0xb8>
        return;
 8015aa2:	bf00      	nop
 8015aa4:	e002      	b.n	8015aac <tcp_parseopt+0xb8>
          return;
 8015aa6:	bf00      	nop
 8015aa8:	e000      	b.n	8015aac <tcp_parseopt+0xb8>
          return;
 8015aaa:	bf00      	nop
      }
    }
  }
}
 8015aac:	3710      	adds	r7, #16
 8015aae:	46bd      	mov	sp, r7
 8015ab0:	bd80      	pop	{r7, pc}
 8015ab2:	bf00      	nop
 8015ab4:	2000421c 	.word	0x2000421c
 8015ab8:	20004224 	.word	0x20004224

08015abc <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 8015abc:	b480      	push	{r7}
 8015abe:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 8015ac0:	4b05      	ldr	r3, [pc, #20]	; (8015ad8 <tcp_trigger_input_pcb_close+0x1c>)
 8015ac2:	781b      	ldrb	r3, [r3, #0]
 8015ac4:	f043 0310 	orr.w	r3, r3, #16
 8015ac8:	b2da      	uxtb	r2, r3
 8015aca:	4b03      	ldr	r3, [pc, #12]	; (8015ad8 <tcp_trigger_input_pcb_close+0x1c>)
 8015acc:	701a      	strb	r2, [r3, #0]
}
 8015ace:	bf00      	nop
 8015ad0:	46bd      	mov	sp, r7
 8015ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015ad6:	4770      	bx	lr
 8015ad8:	20004235 	.word	0x20004235

08015adc <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                      u32_t seqno_be /* already in network byte order */)
{
 8015adc:	b580      	push	{r7, lr}
 8015ade:	b086      	sub	sp, #24
 8015ae0:	af00      	add	r7, sp, #0
 8015ae2:	60f8      	str	r0, [r7, #12]
 8015ae4:	607b      	str	r3, [r7, #4]
 8015ae6:	460b      	mov	r3, r1
 8015ae8:	817b      	strh	r3, [r7, #10]
 8015aea:	4613      	mov	r3, r2
 8015aec:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 8015aee:	897a      	ldrh	r2, [r7, #10]
 8015af0:	893b      	ldrh	r3, [r7, #8]
 8015af2:	4413      	add	r3, r2
 8015af4:	b29b      	uxth	r3, r3
 8015af6:	3314      	adds	r3, #20
 8015af8:	b29b      	uxth	r3, r3
 8015afa:	2200      	movs	r2, #0
 8015afc:	4619      	mov	r1, r3
 8015afe:	2001      	movs	r0, #1
 8015b00:	f7fb fb98 	bl	8011234 <pbuf_alloc>
 8015b04:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 8015b06:	697b      	ldr	r3, [r7, #20]
 8015b08:	2b00      	cmp	r3, #0
 8015b0a:	d057      	beq.n	8015bbc <tcp_output_alloc_header+0xe0>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 8015b0c:	697b      	ldr	r3, [r7, #20]
 8015b0e:	895b      	ldrh	r3, [r3, #10]
 8015b10:	461a      	mov	r2, r3
 8015b12:	897b      	ldrh	r3, [r7, #10]
 8015b14:	3314      	adds	r3, #20
 8015b16:	429a      	cmp	r2, r3
 8015b18:	da05      	bge.n	8015b26 <tcp_output_alloc_header+0x4a>
 8015b1a:	4b2b      	ldr	r3, [pc, #172]	; (8015bc8 <tcp_output_alloc_header+0xec>)
 8015b1c:	2273      	movs	r2, #115	; 0x73
 8015b1e:	492b      	ldr	r1, [pc, #172]	; (8015bcc <tcp_output_alloc_header+0xf0>)
 8015b20:	482b      	ldr	r0, [pc, #172]	; (8015bd0 <tcp_output_alloc_header+0xf4>)
 8015b22:	f005 f965 	bl	801adf0 <iprintf>
                 (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 8015b26:	697b      	ldr	r3, [r7, #20]
 8015b28:	685b      	ldr	r3, [r3, #4]
 8015b2a:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(pcb->local_port);
 8015b2c:	68fb      	ldr	r3, [r7, #12]
 8015b2e:	8adb      	ldrh	r3, [r3, #22]
 8015b30:	4618      	mov	r0, r3
 8015b32:	f7fa fd57 	bl	80105e4 <lwip_htons>
 8015b36:	4603      	mov	r3, r0
 8015b38:	461a      	mov	r2, r3
 8015b3a:	693b      	ldr	r3, [r7, #16]
 8015b3c:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(pcb->remote_port);
 8015b3e:	68fb      	ldr	r3, [r7, #12]
 8015b40:	8b1b      	ldrh	r3, [r3, #24]
 8015b42:	4618      	mov	r0, r3
 8015b44:	f7fa fd4e 	bl	80105e4 <lwip_htons>
 8015b48:	4603      	mov	r3, r0
 8015b4a:	461a      	mov	r2, r3
 8015b4c:	693b      	ldr	r3, [r7, #16]
 8015b4e:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 8015b50:	693b      	ldr	r3, [r7, #16]
 8015b52:	687a      	ldr	r2, [r7, #4]
 8015b54:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 8015b56:	68fb      	ldr	r3, [r7, #12]
 8015b58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015b5a:	4618      	mov	r0, r3
 8015b5c:	f7fa fd50 	bl	8010600 <lwip_htonl>
 8015b60:	4602      	mov	r2, r0
 8015b62:	693b      	ldr	r3, [r7, #16]
 8015b64:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), TCP_ACK);
 8015b66:	897b      	ldrh	r3, [r7, #10]
 8015b68:	089b      	lsrs	r3, r3, #2
 8015b6a:	b29b      	uxth	r3, r3
 8015b6c:	3305      	adds	r3, #5
 8015b6e:	b29b      	uxth	r3, r3
 8015b70:	031b      	lsls	r3, r3, #12
 8015b72:	b29b      	uxth	r3, r3
 8015b74:	f043 0310 	orr.w	r3, r3, #16
 8015b78:	b29b      	uxth	r3, r3
 8015b7a:	4618      	mov	r0, r3
 8015b7c:	f7fa fd32 	bl	80105e4 <lwip_htons>
 8015b80:	4603      	mov	r3, r0
 8015b82:	461a      	mov	r2, r3
 8015b84:	693b      	ldr	r3, [r7, #16]
 8015b86:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 8015b88:	68fb      	ldr	r3, [r7, #12]
 8015b8a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8015b8c:	4618      	mov	r0, r3
 8015b8e:	f7fa fd29 	bl	80105e4 <lwip_htons>
 8015b92:	4603      	mov	r3, r0
 8015b94:	461a      	mov	r2, r3
 8015b96:	693b      	ldr	r3, [r7, #16]
 8015b98:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 8015b9a:	693b      	ldr	r3, [r7, #16]
 8015b9c:	2200      	movs	r2, #0
 8015b9e:	741a      	strb	r2, [r3, #16]
 8015ba0:	2200      	movs	r2, #0
 8015ba2:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 8015ba4:	693b      	ldr	r3, [r7, #16]
 8015ba6:	2200      	movs	r2, #0
 8015ba8:	749a      	strb	r2, [r3, #18]
 8015baa:	2200      	movs	r2, #0
 8015bac:	74da      	strb	r2, [r3, #19]

    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8015bae:	68fb      	ldr	r3, [r7, #12]
 8015bb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015bb2:	68fa      	ldr	r2, [r7, #12]
 8015bb4:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 8015bb6:	441a      	add	r2, r3
 8015bb8:	68fb      	ldr	r3, [r7, #12]
 8015bba:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 8015bbc:	697b      	ldr	r3, [r7, #20]
}
 8015bbe:	4618      	mov	r0, r3
 8015bc0:	3718      	adds	r7, #24
 8015bc2:	46bd      	mov	sp, r7
 8015bc4:	bd80      	pop	{r7, pc}
 8015bc6:	bf00      	nop
 8015bc8:	0801da98 	.word	0x0801da98
 8015bcc:	0801dacc 	.word	0x0801dacc
 8015bd0:	0801dafc 	.word	0x0801dafc

08015bd4 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 8015bd4:	b590      	push	{r4, r7, lr}
 8015bd6:	b085      	sub	sp, #20
 8015bd8:	af00      	add	r7, sp, #0
 8015bda:	6078      	str	r0, [r7, #4]
  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 8015bdc:	687b      	ldr	r3, [r7, #4]
 8015bde:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8015be0:	2b00      	cmp	r3, #0
 8015be2:	d02d      	beq.n	8015c40 <tcp_send_fin+0x6c>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8015be4:	687b      	ldr	r3, [r7, #4]
 8015be6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8015be8:	60fb      	str	r3, [r7, #12]
 8015bea:	e002      	b.n	8015bf2 <tcp_send_fin+0x1e>
         last_unsent = last_unsent->next);
 8015bec:	68fb      	ldr	r3, [r7, #12]
 8015bee:	681b      	ldr	r3, [r3, #0]
 8015bf0:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8015bf2:	68fb      	ldr	r3, [r7, #12]
 8015bf4:	681b      	ldr	r3, [r3, #0]
 8015bf6:	2b00      	cmp	r3, #0
 8015bf8:	d1f8      	bne.n	8015bec <tcp_send_fin+0x18>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 8015bfa:	68fb      	ldr	r3, [r7, #12]
 8015bfc:	68db      	ldr	r3, [r3, #12]
 8015bfe:	899b      	ldrh	r3, [r3, #12]
 8015c00:	b29b      	uxth	r3, r3
 8015c02:	4618      	mov	r0, r3
 8015c04:	f7fa fcee 	bl	80105e4 <lwip_htons>
 8015c08:	4603      	mov	r3, r0
 8015c0a:	f003 0307 	and.w	r3, r3, #7
 8015c0e:	2b00      	cmp	r3, #0
 8015c10:	d116      	bne.n	8015c40 <tcp_send_fin+0x6c>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 8015c12:	68fb      	ldr	r3, [r7, #12]
 8015c14:	68db      	ldr	r3, [r3, #12]
 8015c16:	899b      	ldrh	r3, [r3, #12]
 8015c18:	b29c      	uxth	r4, r3
 8015c1a:	2001      	movs	r0, #1
 8015c1c:	f7fa fce2 	bl	80105e4 <lwip_htons>
 8015c20:	4603      	mov	r3, r0
 8015c22:	461a      	mov	r2, r3
 8015c24:	68fb      	ldr	r3, [r7, #12]
 8015c26:	68db      	ldr	r3, [r3, #12]
 8015c28:	4322      	orrs	r2, r4
 8015c2a:	b292      	uxth	r2, r2
 8015c2c:	819a      	strh	r2, [r3, #12]
      pcb->flags |= TF_FIN;
 8015c2e:	687b      	ldr	r3, [r7, #4]
 8015c30:	7e9b      	ldrb	r3, [r3, #26]
 8015c32:	f043 0320 	orr.w	r3, r3, #32
 8015c36:	b2da      	uxtb	r2, r3
 8015c38:	687b      	ldr	r3, [r7, #4]
 8015c3a:	769a      	strb	r2, [r3, #26]
      return ERR_OK;
 8015c3c:	2300      	movs	r3, #0
 8015c3e:	e004      	b.n	8015c4a <tcp_send_fin+0x76>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 8015c40:	2101      	movs	r1, #1
 8015c42:	6878      	ldr	r0, [r7, #4]
 8015c44:	f000 fcc0 	bl	80165c8 <tcp_enqueue_flags>
 8015c48:	4603      	mov	r3, r0
}
 8015c4a:	4618      	mov	r0, r3
 8015c4c:	3714      	adds	r7, #20
 8015c4e:	46bd      	mov	sp, r7
 8015c50:	bd90      	pop	{r4, r7, pc}
	...

08015c54 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(struct tcp_pcb *pcb, struct pbuf *p, u8_t flags, u32_t seqno, u8_t optflags)
{
 8015c54:	b590      	push	{r4, r7, lr}
 8015c56:	b087      	sub	sp, #28
 8015c58:	af00      	add	r7, sp, #0
 8015c5a:	60f8      	str	r0, [r7, #12]
 8015c5c:	60b9      	str	r1, [r7, #8]
 8015c5e:	603b      	str	r3, [r7, #0]
 8015c60:	4613      	mov	r3, r2
 8015c62:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen = LWIP_TCP_OPT_LENGTH(optflags);
 8015c64:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8015c68:	009b      	lsls	r3, r3, #2
 8015c6a:	b2db      	uxtb	r3, r3
 8015c6c:	f003 0304 	and.w	r3, r3, #4
 8015c70:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 8015c72:	2003      	movs	r0, #3
 8015c74:	f7fb f8a4 	bl	8010dc0 <memp_malloc>
 8015c78:	6138      	str	r0, [r7, #16]
 8015c7a:	693b      	ldr	r3, [r7, #16]
 8015c7c:	2b00      	cmp	r3, #0
 8015c7e:	d104      	bne.n	8015c8a <tcp_create_segment+0x36>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 8015c80:	68b8      	ldr	r0, [r7, #8]
 8015c82:	f7fb fe49 	bl	8011918 <pbuf_free>
    return NULL;
 8015c86:	2300      	movs	r3, #0
 8015c88:	e061      	b.n	8015d4e <tcp_create_segment+0xfa>
  }
  seg->flags = optflags;
 8015c8a:	693b      	ldr	r3, [r7, #16]
 8015c8c:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8015c90:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 8015c92:	693b      	ldr	r3, [r7, #16]
 8015c94:	2200      	movs	r2, #0
 8015c96:	601a      	str	r2, [r3, #0]
  seg->p = p;
 8015c98:	693b      	ldr	r3, [r7, #16]
 8015c9a:	68ba      	ldr	r2, [r7, #8]
 8015c9c:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 8015c9e:	68bb      	ldr	r3, [r7, #8]
 8015ca0:	891a      	ldrh	r2, [r3, #8]
 8015ca2:	7dfb      	ldrb	r3, [r7, #23]
 8015ca4:	b29b      	uxth	r3, r3
 8015ca6:	429a      	cmp	r2, r3
 8015ca8:	d205      	bcs.n	8015cb6 <tcp_create_segment+0x62>
 8015caa:	4b2b      	ldr	r3, [pc, #172]	; (8015d58 <tcp_create_segment+0x104>)
 8015cac:	22ba      	movs	r2, #186	; 0xba
 8015cae:	492b      	ldr	r1, [pc, #172]	; (8015d5c <tcp_create_segment+0x108>)
 8015cb0:	482b      	ldr	r0, [pc, #172]	; (8015d60 <tcp_create_segment+0x10c>)
 8015cb2:	f005 f89d 	bl	801adf0 <iprintf>
  seg->len = p->tot_len - optlen;
 8015cb6:	68bb      	ldr	r3, [r7, #8]
 8015cb8:	891a      	ldrh	r2, [r3, #8]
 8015cba:	7dfb      	ldrb	r3, [r7, #23]
 8015cbc:	b29b      	uxth	r3, r3
 8015cbe:	1ad3      	subs	r3, r2, r3
 8015cc0:	b29a      	uxth	r2, r3
 8015cc2:	693b      	ldr	r3, [r7, #16]
 8015cc4:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_header(p, TCP_HLEN)) {
 8015cc6:	2114      	movs	r1, #20
 8015cc8:	68b8      	ldr	r0, [r7, #8]
 8015cca:	f7fb fe01 	bl	80118d0 <pbuf_header>
 8015cce:	4603      	mov	r3, r0
 8015cd0:	2b00      	cmp	r3, #0
 8015cd2:	d004      	beq.n	8015cde <tcp_create_segment+0x8a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 8015cd4:	6938      	ldr	r0, [r7, #16]
 8015cd6:	f7fd f938 	bl	8012f4a <tcp_seg_free>
    return NULL;
 8015cda:	2300      	movs	r3, #0
 8015cdc:	e037      	b.n	8015d4e <tcp_create_segment+0xfa>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 8015cde:	693b      	ldr	r3, [r7, #16]
 8015ce0:	685b      	ldr	r3, [r3, #4]
 8015ce2:	685a      	ldr	r2, [r3, #4]
 8015ce4:	693b      	ldr	r3, [r7, #16]
 8015ce6:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 8015ce8:	68fb      	ldr	r3, [r7, #12]
 8015cea:	8ada      	ldrh	r2, [r3, #22]
 8015cec:	693b      	ldr	r3, [r7, #16]
 8015cee:	68dc      	ldr	r4, [r3, #12]
 8015cf0:	4610      	mov	r0, r2
 8015cf2:	f7fa fc77 	bl	80105e4 <lwip_htons>
 8015cf6:	4603      	mov	r3, r0
 8015cf8:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 8015cfa:	68fb      	ldr	r3, [r7, #12]
 8015cfc:	8b1a      	ldrh	r2, [r3, #24]
 8015cfe:	693b      	ldr	r3, [r7, #16]
 8015d00:	68dc      	ldr	r4, [r3, #12]
 8015d02:	4610      	mov	r0, r2
 8015d04:	f7fa fc6e 	bl	80105e4 <lwip_htons>
 8015d08:	4603      	mov	r3, r0
 8015d0a:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 8015d0c:	693b      	ldr	r3, [r7, #16]
 8015d0e:	68dc      	ldr	r4, [r3, #12]
 8015d10:	6838      	ldr	r0, [r7, #0]
 8015d12:	f7fa fc75 	bl	8010600 <lwip_htonl>
 8015d16:	4603      	mov	r3, r0
 8015d18:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), flags);
 8015d1a:	7dfb      	ldrb	r3, [r7, #23]
 8015d1c:	089b      	lsrs	r3, r3, #2
 8015d1e:	b2db      	uxtb	r3, r3
 8015d20:	b29b      	uxth	r3, r3
 8015d22:	3305      	adds	r3, #5
 8015d24:	b29b      	uxth	r3, r3
 8015d26:	031b      	lsls	r3, r3, #12
 8015d28:	b29a      	uxth	r2, r3
 8015d2a:	79fb      	ldrb	r3, [r7, #7]
 8015d2c:	b29b      	uxth	r3, r3
 8015d2e:	4313      	orrs	r3, r2
 8015d30:	b29a      	uxth	r2, r3
 8015d32:	693b      	ldr	r3, [r7, #16]
 8015d34:	68dc      	ldr	r4, [r3, #12]
 8015d36:	4610      	mov	r0, r2
 8015d38:	f7fa fc54 	bl	80105e4 <lwip_htons>
 8015d3c:	4603      	mov	r3, r0
 8015d3e:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 8015d40:	693b      	ldr	r3, [r7, #16]
 8015d42:	68db      	ldr	r3, [r3, #12]
 8015d44:	2200      	movs	r2, #0
 8015d46:	749a      	strb	r2, [r3, #18]
 8015d48:	2200      	movs	r2, #0
 8015d4a:	74da      	strb	r2, [r3, #19]
  return seg;
 8015d4c:	693b      	ldr	r3, [r7, #16]
}
 8015d4e:	4618      	mov	r0, r3
 8015d50:	371c      	adds	r7, #28
 8015d52:	46bd      	mov	sp, r7
 8015d54:	bd90      	pop	{r4, r7, pc}
 8015d56:	bf00      	nop
 8015d58:	0801da98 	.word	0x0801da98
 8015d5c:	0801db24 	.word	0x0801db24
 8015d60:	0801dafc 	.word	0x0801dafc

08015d64 <tcp_pbuf_prealloc>:
#if TCP_OVERSIZE
static struct pbuf *
tcp_pbuf_prealloc(pbuf_layer layer, u16_t length, u16_t max_length,
                  u16_t *oversize, struct tcp_pcb *pcb, u8_t apiflags,
                  u8_t first_seg)
{
 8015d64:	b580      	push	{r7, lr}
 8015d66:	b086      	sub	sp, #24
 8015d68:	af00      	add	r7, sp, #0
 8015d6a:	607b      	str	r3, [r7, #4]
 8015d6c:	4603      	mov	r3, r0
 8015d6e:	73fb      	strb	r3, [r7, #15]
 8015d70:	460b      	mov	r3, r1
 8015d72:	81bb      	strh	r3, [r7, #12]
 8015d74:	4613      	mov	r3, r2
 8015d76:	817b      	strh	r3, [r7, #10]
  struct pbuf *p;
  u16_t alloc = length;
 8015d78:	89bb      	ldrh	r3, [r7, #12]
 8015d7a:	82fb      	strh	r3, [r7, #22]
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(apiflags);
  LWIP_UNUSED_ARG(first_seg);
  alloc = max_length;
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (length < max_length) {
 8015d7c:	89ba      	ldrh	r2, [r7, #12]
 8015d7e:	897b      	ldrh	r3, [r7, #10]
 8015d80:	429a      	cmp	r2, r3
 8015d82:	d221      	bcs.n	8015dc8 <tcp_pbuf_prealloc+0x64>
     *
     * Did the user set TCP_WRITE_FLAG_MORE?
     *
     * Will the Nagle algorithm defer transmission of this segment?
     */
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 8015d84:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8015d88:	f003 0302 	and.w	r3, r3, #2
 8015d8c:	2b00      	cmp	r3, #0
 8015d8e:	d111      	bne.n	8015db4 <tcp_pbuf_prealloc+0x50>
        (!(pcb->flags & TF_NODELAY) &&
 8015d90:	6a3b      	ldr	r3, [r7, #32]
 8015d92:	7e9b      	ldrb	r3, [r3, #26]
 8015d94:	f003 0340 	and.w	r3, r3, #64	; 0x40
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 8015d98:	2b00      	cmp	r3, #0
 8015d9a:	d115      	bne.n	8015dc8 <tcp_pbuf_prealloc+0x64>
        (!(pcb->flags & TF_NODELAY) &&
 8015d9c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8015da0:	2b00      	cmp	r3, #0
 8015da2:	d007      	beq.n	8015db4 <tcp_pbuf_prealloc+0x50>
         (!first_seg ||
          pcb->unsent != NULL ||
 8015da4:	6a3b      	ldr	r3, [r7, #32]
 8015da6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
         (!first_seg ||
 8015da8:	2b00      	cmp	r3, #0
 8015daa:	d103      	bne.n	8015db4 <tcp_pbuf_prealloc+0x50>
          pcb->unacked != NULL))) {
 8015dac:	6a3b      	ldr	r3, [r7, #32]
 8015dae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
          pcb->unsent != NULL ||
 8015db0:	2b00      	cmp	r3, #0
 8015db2:	d009      	beq.n	8015dc8 <tcp_pbuf_prealloc+0x64>
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 8015db4:	89bb      	ldrh	r3, [r7, #12]
 8015db6:	f203 231b 	addw	r3, r3, #539	; 0x21b
 8015dba:	f023 0203 	bic.w	r2, r3, #3
 8015dbe:	897b      	ldrh	r3, [r7, #10]
 8015dc0:	4293      	cmp	r3, r2
 8015dc2:	bf28      	it	cs
 8015dc4:	4613      	movcs	r3, r2
 8015dc6:	82fb      	strh	r3, [r7, #22]
    }
  }
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 8015dc8:	8af9      	ldrh	r1, [r7, #22]
 8015dca:	7bfb      	ldrb	r3, [r7, #15]
 8015dcc:	2200      	movs	r2, #0
 8015dce:	4618      	mov	r0, r3
 8015dd0:	f7fb fa30 	bl	8011234 <pbuf_alloc>
 8015dd4:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8015dd6:	693b      	ldr	r3, [r7, #16]
 8015dd8:	2b00      	cmp	r3, #0
 8015dda:	d101      	bne.n	8015de0 <tcp_pbuf_prealloc+0x7c>
    return NULL;
 8015ddc:	2300      	movs	r3, #0
 8015dde:	e019      	b.n	8015e14 <tcp_pbuf_prealloc+0xb0>
  }
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 8015de0:	693b      	ldr	r3, [r7, #16]
 8015de2:	681b      	ldr	r3, [r3, #0]
 8015de4:	2b00      	cmp	r3, #0
 8015de6:	d006      	beq.n	8015df6 <tcp_pbuf_prealloc+0x92>
 8015de8:	4b0c      	ldr	r3, [pc, #48]	; (8015e1c <tcp_pbuf_prealloc+0xb8>)
 8015dea:	f44f 7288 	mov.w	r2, #272	; 0x110
 8015dee:	490c      	ldr	r1, [pc, #48]	; (8015e20 <tcp_pbuf_prealloc+0xbc>)
 8015df0:	480c      	ldr	r0, [pc, #48]	; (8015e24 <tcp_pbuf_prealloc+0xc0>)
 8015df2:	f004 fffd 	bl	801adf0 <iprintf>
  *oversize = p->len - length;
 8015df6:	693b      	ldr	r3, [r7, #16]
 8015df8:	895a      	ldrh	r2, [r3, #10]
 8015dfa:	89bb      	ldrh	r3, [r7, #12]
 8015dfc:	1ad3      	subs	r3, r2, r3
 8015dfe:	b29a      	uxth	r2, r3
 8015e00:	687b      	ldr	r3, [r7, #4]
 8015e02:	801a      	strh	r2, [r3, #0]
  /* trim p->len to the currently used size */
  p->len = p->tot_len = length;
 8015e04:	693b      	ldr	r3, [r7, #16]
 8015e06:	89ba      	ldrh	r2, [r7, #12]
 8015e08:	811a      	strh	r2, [r3, #8]
 8015e0a:	693b      	ldr	r3, [r7, #16]
 8015e0c:	891a      	ldrh	r2, [r3, #8]
 8015e0e:	693b      	ldr	r3, [r7, #16]
 8015e10:	815a      	strh	r2, [r3, #10]
  return p;
 8015e12:	693b      	ldr	r3, [r7, #16]
}
 8015e14:	4618      	mov	r0, r3
 8015e16:	3718      	adds	r7, #24
 8015e18:	46bd      	mov	sp, r7
 8015e1a:	bd80      	pop	{r7, pc}
 8015e1c:	0801da98 	.word	0x0801da98
 8015e20:	0801db3c 	.word	0x0801db3c
 8015e24:	0801dafc 	.word	0x0801dafc

08015e28 <tcp_write_checks>:
 * @param len length of data to send (checked agains snd_buf)
 * @return ERR_OK if tcp_write is allowed to proceed, another err_t otherwise
 */
static err_t
tcp_write_checks(struct tcp_pcb *pcb, u16_t len)
{
 8015e28:	b580      	push	{r7, lr}
 8015e2a:	b082      	sub	sp, #8
 8015e2c:	af00      	add	r7, sp, #0
 8015e2e:	6078      	str	r0, [r7, #4]
 8015e30:	460b      	mov	r3, r1
 8015e32:	807b      	strh	r3, [r7, #2]
  /* connection is in invalid state for data transmission? */
  if ((pcb->state != ESTABLISHED) &&
 8015e34:	687b      	ldr	r3, [r7, #4]
 8015e36:	7d1b      	ldrb	r3, [r3, #20]
 8015e38:	2b04      	cmp	r3, #4
 8015e3a:	d00e      	beq.n	8015e5a <tcp_write_checks+0x32>
      (pcb->state != CLOSE_WAIT) &&
 8015e3c:	687b      	ldr	r3, [r7, #4]
 8015e3e:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != ESTABLISHED) &&
 8015e40:	2b07      	cmp	r3, #7
 8015e42:	d00a      	beq.n	8015e5a <tcp_write_checks+0x32>
      (pcb->state != SYN_SENT) &&
 8015e44:	687b      	ldr	r3, [r7, #4]
 8015e46:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != CLOSE_WAIT) &&
 8015e48:	2b02      	cmp	r3, #2
 8015e4a:	d006      	beq.n	8015e5a <tcp_write_checks+0x32>
      (pcb->state != SYN_RCVD)) {
 8015e4c:	687b      	ldr	r3, [r7, #4]
 8015e4e:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != SYN_SENT) &&
 8015e50:	2b03      	cmp	r3, #3
 8015e52:	d002      	beq.n	8015e5a <tcp_write_checks+0x32>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_STATE | LWIP_DBG_LEVEL_SEVERE, ("tcp_write() called in invalid state\n"));
    return ERR_CONN;
 8015e54:	f06f 030a 	mvn.w	r3, #10
 8015e58:	e04f      	b.n	8015efa <tcp_write_checks+0xd2>
  } else if (len == 0) {
 8015e5a:	887b      	ldrh	r3, [r7, #2]
 8015e5c:	2b00      	cmp	r3, #0
 8015e5e:	d101      	bne.n	8015e64 <tcp_write_checks+0x3c>
    return ERR_OK;
 8015e60:	2300      	movs	r3, #0
 8015e62:	e04a      	b.n	8015efa <tcp_write_checks+0xd2>
  }

  /* fail on too much data */
  if (len > pcb->snd_buf) {
 8015e64:	687b      	ldr	r3, [r7, #4]
 8015e66:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8015e6a:	887a      	ldrh	r2, [r7, #2]
 8015e6c:	429a      	cmp	r2, r3
 8015e6e:	d909      	bls.n	8015e84 <tcp_write_checks+0x5c>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too much data (len=%"U16_F" > snd_buf=%"TCPWNDSIZE_F")\n",
      len, pcb->snd_buf));
    pcb->flags |= TF_NAGLEMEMERR;
 8015e70:	687b      	ldr	r3, [r7, #4]
 8015e72:	7e9b      	ldrb	r3, [r3, #26]
 8015e74:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8015e78:	b2da      	uxtb	r2, r3
 8015e7a:	687b      	ldr	r3, [r7, #4]
 8015e7c:	769a      	strb	r2, [r3, #26]
    return ERR_MEM;
 8015e7e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8015e82:	e03a      	b.n	8015efa <tcp_write_checks+0xd2>
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: queuelen: %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));

  /* If total number of pbufs on the unsent/unacked queues exceeds the
   * configured maximum, return an error */
  /* check for configured max queuelen and possible overflow */
  if ((pcb->snd_queuelen >= TCP_SND_QUEUELEN) || (pcb->snd_queuelen > TCP_SNDQUEUELEN_OVERFLOW)) {
 8015e84:	687b      	ldr	r3, [r7, #4]
 8015e86:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8015e8a:	2b08      	cmp	r3, #8
 8015e8c:	d806      	bhi.n	8015e9c <tcp_write_checks+0x74>
 8015e8e:	687b      	ldr	r3, [r7, #4]
 8015e90:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8015e94:	f64f 72fc 	movw	r2, #65532	; 0xfffc
 8015e98:	4293      	cmp	r3, r2
 8015e9a:	d909      	bls.n	8015eb0 <tcp_write_checks+0x88>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too long queue %"U16_F" (max %"U16_F")\n",
      pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    pcb->flags |= TF_NAGLEMEMERR;
 8015e9c:	687b      	ldr	r3, [r7, #4]
 8015e9e:	7e9b      	ldrb	r3, [r3, #26]
 8015ea0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8015ea4:	b2da      	uxtb	r2, r3
 8015ea6:	687b      	ldr	r3, [r7, #4]
 8015ea8:	769a      	strb	r2, [r3, #26]
    return ERR_MEM;
 8015eaa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8015eae:	e024      	b.n	8015efa <tcp_write_checks+0xd2>
  }
  if (pcb->snd_queuelen != 0) {
 8015eb0:	687b      	ldr	r3, [r7, #4]
 8015eb2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8015eb6:	2b00      	cmp	r3, #0
 8015eb8:	d00f      	beq.n	8015eda <tcp_write_checks+0xb2>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 8015eba:	687b      	ldr	r3, [r7, #4]
 8015ebc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8015ebe:	2b00      	cmp	r3, #0
 8015ec0:	d11a      	bne.n	8015ef8 <tcp_write_checks+0xd0>
 8015ec2:	687b      	ldr	r3, [r7, #4]
 8015ec4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8015ec6:	2b00      	cmp	r3, #0
 8015ec8:	d116      	bne.n	8015ef8 <tcp_write_checks+0xd0>
 8015eca:	4b0e      	ldr	r3, [pc, #56]	; (8015f04 <tcp_write_checks+0xdc>)
 8015ecc:	f44f 72ab 	mov.w	r2, #342	; 0x156
 8015ed0:	490d      	ldr	r1, [pc, #52]	; (8015f08 <tcp_write_checks+0xe0>)
 8015ed2:	480e      	ldr	r0, [pc, #56]	; (8015f0c <tcp_write_checks+0xe4>)
 8015ed4:	f004 ff8c 	bl	801adf0 <iprintf>
 8015ed8:	e00e      	b.n	8015ef8 <tcp_write_checks+0xd0>
      pcb->unacked != NULL || pcb->unsent != NULL);
  } else {
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 8015eda:	687b      	ldr	r3, [r7, #4]
 8015edc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8015ede:	2b00      	cmp	r3, #0
 8015ee0:	d103      	bne.n	8015eea <tcp_write_checks+0xc2>
 8015ee2:	687b      	ldr	r3, [r7, #4]
 8015ee4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8015ee6:	2b00      	cmp	r3, #0
 8015ee8:	d006      	beq.n	8015ef8 <tcp_write_checks+0xd0>
 8015eea:	4b06      	ldr	r3, [pc, #24]	; (8015f04 <tcp_write_checks+0xdc>)
 8015eec:	f240 1259 	movw	r2, #345	; 0x159
 8015ef0:	4907      	ldr	r1, [pc, #28]	; (8015f10 <tcp_write_checks+0xe8>)
 8015ef2:	4806      	ldr	r0, [pc, #24]	; (8015f0c <tcp_write_checks+0xe4>)
 8015ef4:	f004 ff7c 	bl	801adf0 <iprintf>
      pcb->unacked == NULL && pcb->unsent == NULL);
  }
  return ERR_OK;
 8015ef8:	2300      	movs	r3, #0
}
 8015efa:	4618      	mov	r0, r3
 8015efc:	3708      	adds	r7, #8
 8015efe:	46bd      	mov	sp, r7
 8015f00:	bd80      	pop	{r7, pc}
 8015f02:	bf00      	nop
 8015f04:	0801da98 	.word	0x0801da98
 8015f08:	0801db50 	.word	0x0801db50
 8015f0c:	0801dafc 	.word	0x0801dafc
 8015f10:	0801db8c 	.word	0x0801db8c

08015f14 <tcp_write>:
 * - TCP_WRITE_FLAG_MORE (0x02) for TCP connection, PSH flag will not be set on last segment sent,
 * @return ERR_OK if enqueued, another err_t on error
 */
err_t
tcp_write(struct tcp_pcb *pcb, const void *arg, u16_t len, u8_t apiflags)
{
 8015f14:	b590      	push	{r4, r7, lr}
 8015f16:	b09b      	sub	sp, #108	; 0x6c
 8015f18:	af04      	add	r7, sp, #16
 8015f1a:	60f8      	str	r0, [r7, #12]
 8015f1c:	60b9      	str	r1, [r7, #8]
 8015f1e:	4611      	mov	r1, r2
 8015f20:	461a      	mov	r2, r3
 8015f22:	460b      	mov	r3, r1
 8015f24:	80fb      	strh	r3, [r7, #6]
 8015f26:	4613      	mov	r3, r2
 8015f28:	717b      	strb	r3, [r7, #5]
  struct pbuf *concat_p = NULL;
 8015f2a:	2300      	movs	r3, #0
 8015f2c:	657b      	str	r3, [r7, #84]	; 0x54
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 8015f2e:	2300      	movs	r3, #0
 8015f30:	653b      	str	r3, [r7, #80]	; 0x50
 8015f32:	2300      	movs	r3, #0
 8015f34:	64fb      	str	r3, [r7, #76]	; 0x4c
 8015f36:	2300      	movs	r3, #0
 8015f38:	64bb      	str	r3, [r7, #72]	; 0x48
 8015f3a:	2300      	movs	r3, #0
 8015f3c:	647b      	str	r3, [r7, #68]	; 0x44
  u16_t pos = 0; /* position in 'arg' data */
 8015f3e:	2300      	movs	r3, #0
 8015f40:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  u16_t queuelen;
  u8_t optlen = 0;
 8015f44:	2300      	movs	r3, #0
 8015f46:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  u8_t optflags = 0;
 8015f4a:	2300      	movs	r3, #0
 8015f4c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
#if TCP_OVERSIZE
  u16_t oversize = 0;
 8015f50:	2300      	movs	r3, #0
 8015f52:	827b      	strh	r3, [r7, #18]
  u16_t oversize_used = 0;
 8015f54:	2300      	movs	r3, #0
 8015f56:	87fb      	strh	r3, [r7, #62]	; 0x3e
#if TCP_OVERSIZE_DBGCHECK
  u16_t oversize_add = 0;
#endif /* TCP_OVERSIZE_DBGCHECK*/
#endif /* TCP_OVERSIZE */
  u16_t extendlen = 0;
 8015f58:	2300      	movs	r3, #0
 8015f5a:	87bb      	strh	r3, [r7, #60]	; 0x3c
  u8_t concat_chksum_swapped = 0;
  u16_t concat_chksummed = 0;
#endif /* TCP_CHECKSUM_ON_COPY */
  err_t err;
  /* don't allocate segments bigger than half the maximum window we ever received */
  u16_t mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max/2));
 8015f5c:	68fb      	ldr	r3, [r7, #12]
 8015f5e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8015f62:	085b      	lsrs	r3, r3, #1
 8015f64:	b29a      	uxth	r2, r3
 8015f66:	68fb      	ldr	r3, [r7, #12]
 8015f68:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8015f6a:	4293      	cmp	r3, r2
 8015f6c:	bf28      	it	cs
 8015f6e:	4613      	movcs	r3, r2
 8015f70:	84bb      	strh	r3, [r7, #36]	; 0x24
  mss_local = mss_local ? mss_local : pcb->mss;
 8015f72:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8015f74:	2b00      	cmp	r3, #0
 8015f76:	d102      	bne.n	8015f7e <tcp_write+0x6a>
 8015f78:	68fb      	ldr	r3, [r7, #12]
 8015f7a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8015f7c:	e000      	b.n	8015f80 <tcp_write+0x6c>
 8015f7e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8015f80:	84bb      	strh	r3, [r7, #36]	; 0x24
  apiflags |= TCP_WRITE_FLAG_COPY;
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_write(pcb=%p, data=%p, len=%"U16_F", apiflags=%"U16_F")\n",
    (void *)pcb, arg, len, (u16_t)apiflags));
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 8015f82:	68bb      	ldr	r3, [r7, #8]
 8015f84:	2b00      	cmp	r3, #0
 8015f86:	d109      	bne.n	8015f9c <tcp_write+0x88>
 8015f88:	4b92      	ldr	r3, [pc, #584]	; (80161d4 <tcp_write+0x2c0>)
 8015f8a:	f44f 72c9 	mov.w	r2, #402	; 0x192
 8015f8e:	4992      	ldr	r1, [pc, #584]	; (80161d8 <tcp_write+0x2c4>)
 8015f90:	4892      	ldr	r0, [pc, #584]	; (80161dc <tcp_write+0x2c8>)
 8015f92:	f004 ff2d 	bl	801adf0 <iprintf>
 8015f96:	f06f 030f 	mvn.w	r3, #15
 8015f9a:	e30a      	b.n	80165b2 <tcp_write+0x69e>
             arg != NULL, return ERR_ARG;);

  err = tcp_write_checks(pcb, len);
 8015f9c:	88fb      	ldrh	r3, [r7, #6]
 8015f9e:	4619      	mov	r1, r3
 8015fa0:	68f8      	ldr	r0, [r7, #12]
 8015fa2:	f7ff ff41 	bl	8015e28 <tcp_write_checks>
 8015fa6:	4603      	mov	r3, r0
 8015fa8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (err != ERR_OK) {
 8015fac:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 8015fb0:	2b00      	cmp	r3, #0
 8015fb2:	d002      	beq.n	8015fba <tcp_write+0xa6>
    return err;
 8015fb4:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 8015fb8:	e2fb      	b.n	80165b2 <tcp_write+0x69e>
  }
  queuelen = pcb->snd_queuelen;
 8015fba:	68fb      	ldr	r3, [r7, #12]
 8015fbc:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8015fc0:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
   *
   * pos records progress as data is segmented.
   */

  /* Find the tail of the unsent queue. */
  if (pcb->unsent != NULL) {
 8015fc4:	68fb      	ldr	r3, [r7, #12]
 8015fc6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8015fc8:	2b00      	cmp	r3, #0
 8015fca:	f000 80f5 	beq.w	80161b8 <tcp_write+0x2a4>
    u16_t space;
    u16_t unsent_optlen;

    /* @todo: this could be sped up by keeping last_unsent in the pcb */
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8015fce:	68fb      	ldr	r3, [r7, #12]
 8015fd0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8015fd2:	653b      	str	r3, [r7, #80]	; 0x50
 8015fd4:	e002      	b.n	8015fdc <tcp_write+0xc8>
         last_unsent = last_unsent->next);
 8015fd6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8015fd8:	681b      	ldr	r3, [r3, #0]
 8015fda:	653b      	str	r3, [r7, #80]	; 0x50
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8015fdc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8015fde:	681b      	ldr	r3, [r3, #0]
 8015fe0:	2b00      	cmp	r3, #0
 8015fe2:	d1f8      	bne.n	8015fd6 <tcp_write+0xc2>

    /* Usable space at the end of the last unsent segment */
    unsent_optlen = LWIP_TCP_OPT_LENGTH(last_unsent->flags);
 8015fe4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8015fe6:	7a9b      	ldrb	r3, [r3, #10]
 8015fe8:	009b      	lsls	r3, r3, #2
 8015fea:	b29b      	uxth	r3, r3
 8015fec:	f003 0304 	and.w	r3, r3, #4
 8015ff0:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 8015ff2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8015ff4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8015ff6:	891b      	ldrh	r3, [r3, #8]
 8015ff8:	4619      	mov	r1, r3
 8015ffa:	8c3b      	ldrh	r3, [r7, #32]
 8015ffc:	440b      	add	r3, r1
 8015ffe:	429a      	cmp	r2, r3
 8016000:	da06      	bge.n	8016010 <tcp_write+0xfc>
 8016002:	4b74      	ldr	r3, [pc, #464]	; (80161d4 <tcp_write+0x2c0>)
 8016004:	f240 12c7 	movw	r2, #455	; 0x1c7
 8016008:	4975      	ldr	r1, [pc, #468]	; (80161e0 <tcp_write+0x2cc>)
 801600a:	4874      	ldr	r0, [pc, #464]	; (80161dc <tcp_write+0x2c8>)
 801600c:	f004 fef0 	bl	801adf0 <iprintf>
    space = mss_local - (last_unsent->len + unsent_optlen);
 8016010:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8016012:	891a      	ldrh	r2, [r3, #8]
 8016014:	8c3b      	ldrh	r3, [r7, #32]
 8016016:	4413      	add	r3, r2
 8016018:	b29b      	uxth	r3, r3
 801601a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801601c:	1ad3      	subs	r3, r2, r3
 801601e:	877b      	strh	r3, [r7, #58]	; 0x3a
#if TCP_OVERSIZE_DBGCHECK
    /* check that pcb->unsent_oversize matches last_unsent->oversize_left */
    LWIP_ASSERT("unsent_oversize mismatch (pcb vs. last_unsent)",
                pcb->unsent_oversize == last_unsent->oversize_left);
#endif /* TCP_OVERSIZE_DBGCHECK */
    oversize = pcb->unsent_oversize;
 8016020:	68fb      	ldr	r3, [r7, #12]
 8016022:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8016026:	827b      	strh	r3, [r7, #18]
    if (oversize > 0) {
 8016028:	8a7b      	ldrh	r3, [r7, #18]
 801602a:	2b00      	cmp	r3, #0
 801602c:	d027      	beq.n	801607e <tcp_write+0x16a>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 801602e:	8a7b      	ldrh	r3, [r7, #18]
 8016030:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8016032:	429a      	cmp	r2, r3
 8016034:	d206      	bcs.n	8016044 <tcp_write+0x130>
 8016036:	4b67      	ldr	r3, [pc, #412]	; (80161d4 <tcp_write+0x2c0>)
 8016038:	f240 12d9 	movw	r2, #473	; 0x1d9
 801603c:	4969      	ldr	r1, [pc, #420]	; (80161e4 <tcp_write+0x2d0>)
 801603e:	4867      	ldr	r0, [pc, #412]	; (80161dc <tcp_write+0x2c8>)
 8016040:	f004 fed6 	bl	801adf0 <iprintf>
      seg = last_unsent;
 8016044:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8016046:	64fb      	str	r3, [r7, #76]	; 0x4c
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 8016048:	8a7b      	ldrh	r3, [r7, #18]
 801604a:	88fa      	ldrh	r2, [r7, #6]
 801604c:	429a      	cmp	r2, r3
 801604e:	d901      	bls.n	8016054 <tcp_write+0x140>
 8016050:	8a7b      	ldrh	r3, [r7, #18]
 8016052:	e000      	b.n	8016056 <tcp_write+0x142>
 8016054:	88fb      	ldrh	r3, [r7, #6]
 8016056:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8016058:	4293      	cmp	r3, r2
 801605a:	bfa8      	it	ge
 801605c:	4613      	movge	r3, r2
 801605e:	87fb      	strh	r3, [r7, #62]	; 0x3e
      pos += oversize_used;
 8016060:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8016064:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8016066:	4413      	add	r3, r2
 8016068:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      oversize -= oversize_used;
 801606c:	8a7a      	ldrh	r2, [r7, #18]
 801606e:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8016070:	1ad3      	subs	r3, r2, r3
 8016072:	b29b      	uxth	r3, r3
 8016074:	827b      	strh	r3, [r7, #18]
      space -= oversize_used;
 8016076:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8016078:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801607a:	1ad3      	subs	r3, r2, r3
 801607c:	877b      	strh	r3, [r7, #58]	; 0x3a
    }
    /* now we are either finished or oversize is zero */
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 801607e:	8a7b      	ldrh	r3, [r7, #18]
 8016080:	2b00      	cmp	r3, #0
 8016082:	d00b      	beq.n	801609c <tcp_write+0x188>
 8016084:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8016088:	88fb      	ldrh	r3, [r7, #6]
 801608a:	429a      	cmp	r2, r3
 801608c:	d006      	beq.n	801609c <tcp_write+0x188>
 801608e:	4b51      	ldr	r3, [pc, #324]	; (80161d4 <tcp_write+0x2c0>)
 8016090:	f240 12e1 	movw	r2, #481	; 0x1e1
 8016094:	4954      	ldr	r1, [pc, #336]	; (80161e8 <tcp_write+0x2d4>)
 8016096:	4851      	ldr	r0, [pc, #324]	; (80161dc <tcp_write+0x2c8>)
 8016098:	f004 feaa 	bl	801adf0 <iprintf>
     *
     * We don't extend segments containing SYN/FIN flags or options
     * (len==0). The new pbuf is kept in concat_p and pbuf_cat'ed at
     * the end.
     */
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 801609c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80160a0:	88fb      	ldrh	r3, [r7, #6]
 80160a2:	429a      	cmp	r2, r3
 80160a4:	f080 8168 	bcs.w	8016378 <tcp_write+0x464>
 80160a8:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80160aa:	2b00      	cmp	r3, #0
 80160ac:	f000 8164 	beq.w	8016378 <tcp_write+0x464>
 80160b0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80160b2:	891b      	ldrh	r3, [r3, #8]
 80160b4:	2b00      	cmp	r3, #0
 80160b6:	f000 815f 	beq.w	8016378 <tcp_write+0x464>
      u16_t seglen = LWIP_MIN(space, len - pos);
 80160ba:	88fa      	ldrh	r2, [r7, #6]
 80160bc:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80160c0:	1ad2      	subs	r2, r2, r3
 80160c2:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80160c4:	4293      	cmp	r3, r2
 80160c6:	bfa8      	it	ge
 80160c8:	4613      	movge	r3, r2
 80160ca:	83fb      	strh	r3, [r7, #30]
      seg = last_unsent;
 80160cc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80160ce:	64fb      	str	r3, [r7, #76]	; 0x4c

      /* Create a pbuf with a copy or reference to seglen bytes. We
       * can use PBUF_RAW here since the data appears in the middle of
       * a segment. A header will never be prepended. */
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 80160d0:	797b      	ldrb	r3, [r7, #5]
 80160d2:	f003 0301 	and.w	r3, r3, #1
 80160d6:	2b00      	cmp	r3, #0
 80160d8:	d027      	beq.n	801612a <tcp_write+0x216>
        /* Data is copied */
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 80160da:	f107 0012 	add.w	r0, r7, #18
 80160de:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 80160e0:	8bf9      	ldrh	r1, [r7, #30]
 80160e2:	2301      	movs	r3, #1
 80160e4:	9302      	str	r3, [sp, #8]
 80160e6:	797b      	ldrb	r3, [r7, #5]
 80160e8:	9301      	str	r3, [sp, #4]
 80160ea:	68fb      	ldr	r3, [r7, #12]
 80160ec:	9300      	str	r3, [sp, #0]
 80160ee:	4603      	mov	r3, r0
 80160f0:	2004      	movs	r0, #4
 80160f2:	f7ff fe37 	bl	8015d64 <tcp_pbuf_prealloc>
 80160f6:	6578      	str	r0, [r7, #84]	; 0x54
 80160f8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80160fa:	2b00      	cmp	r3, #0
 80160fc:	f000 8227 	beq.w	801654e <tcp_write+0x63a>
          goto memerr;
        }
#if TCP_OVERSIZE_DBGCHECK
        oversize_add = oversize;
#endif /* TCP_OVERSIZE_DBGCHECK */
        TCP_DATA_COPY2(concat_p->payload, (const u8_t*)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 8016100:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8016102:	6858      	ldr	r0, [r3, #4]
 8016104:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8016108:	68ba      	ldr	r2, [r7, #8]
 801610a:	4413      	add	r3, r2
 801610c:	8bfa      	ldrh	r2, [r7, #30]
 801610e:	4619      	mov	r1, r3
 8016110:	f004 fdb3 	bl	801ac7a <memcpy>
#if TCP_CHECKSUM_ON_COPY
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
        queuelen += pbuf_clen(concat_p);
 8016114:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8016116:	f7fb fc99 	bl	8011a4c <pbuf_clen>
 801611a:	4603      	mov	r3, r0
 801611c:	461a      	mov	r2, r3
 801611e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8016122:	4413      	add	r3, r2
 8016124:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8016128:	e03f      	b.n	80161aa <tcp_write+0x296>
      } else {
        /* Data is not copied */
        /* If the last unsent pbuf is of type PBUF_ROM, try to extend it. */
        struct pbuf *p;
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 801612a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801612c:	685b      	ldr	r3, [r3, #4]
 801612e:	637b      	str	r3, [r7, #52]	; 0x34
 8016130:	e002      	b.n	8016138 <tcp_write+0x224>
 8016132:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016134:	681b      	ldr	r3, [r3, #0]
 8016136:	637b      	str	r3, [r7, #52]	; 0x34
 8016138:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801613a:	681b      	ldr	r3, [r3, #0]
 801613c:	2b00      	cmp	r3, #0
 801613e:	d1f8      	bne.n	8016132 <tcp_write+0x21e>
        if (p->type == PBUF_ROM && (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 8016140:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016142:	7b1b      	ldrb	r3, [r3, #12]
 8016144:	2b01      	cmp	r3, #1
 8016146:	d115      	bne.n	8016174 <tcp_write+0x260>
 8016148:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801614a:	685b      	ldr	r3, [r3, #4]
 801614c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801614e:	8952      	ldrh	r2, [r2, #10]
 8016150:	4413      	add	r3, r2
 8016152:	68ba      	ldr	r2, [r7, #8]
 8016154:	429a      	cmp	r2, r3
 8016156:	d10d      	bne.n	8016174 <tcp_write+0x260>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 8016158:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801615c:	2b00      	cmp	r3, #0
 801615e:	d006      	beq.n	801616e <tcp_write+0x25a>
 8016160:	4b1c      	ldr	r3, [pc, #112]	; (80161d4 <tcp_write+0x2c0>)
 8016162:	f44f 7203 	mov.w	r2, #524	; 0x20c
 8016166:	4921      	ldr	r1, [pc, #132]	; (80161ec <tcp_write+0x2d8>)
 8016168:	481c      	ldr	r0, [pc, #112]	; (80161dc <tcp_write+0x2c8>)
 801616a:	f004 fe41 	bl	801adf0 <iprintf>
          extendlen = seglen;
 801616e:	8bfb      	ldrh	r3, [r7, #30]
 8016170:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8016172:	e01a      	b.n	80161aa <tcp_write+0x296>
        } else {
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 8016174:	8bfb      	ldrh	r3, [r7, #30]
 8016176:	2201      	movs	r2, #1
 8016178:	4619      	mov	r1, r3
 801617a:	2004      	movs	r0, #4
 801617c:	f7fb f85a 	bl	8011234 <pbuf_alloc>
 8016180:	6578      	str	r0, [r7, #84]	; 0x54
 8016182:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8016184:	2b00      	cmp	r3, #0
 8016186:	f000 81e4 	beq.w	8016552 <tcp_write+0x63e>
            LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                        ("tcp_write: could not allocate memory for zero-copy pbuf\n"));
            goto memerr;
          }
          /* reference the non-volatile payload data */
          ((struct pbuf_rom*)concat_p)->payload = (const u8_t*)arg + pos;
 801618a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801618e:	68ba      	ldr	r2, [r7, #8]
 8016190:	441a      	add	r2, r3
 8016192:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8016194:	605a      	str	r2, [r3, #4]
          queuelen += pbuf_clen(concat_p);
 8016196:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8016198:	f7fb fc58 	bl	8011a4c <pbuf_clen>
 801619c:	4603      	mov	r3, r0
 801619e:	461a      	mov	r2, r3
 80161a0:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80161a4:	4413      	add	r3, r2
 80161a6:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
          &concat_chksum, &concat_chksum_swapped);
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
      }

      pos += seglen;
 80161aa:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80161ae:	8bfb      	ldrh	r3, [r7, #30]
 80161b0:	4413      	add	r3, r2
 80161b2:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 80161b6:	e0df      	b.n	8016378 <tcp_write+0x464>
    }
  } else {
#if TCP_OVERSIZE
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 80161b8:	68fb      	ldr	r3, [r7, #12]
 80161ba:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 80161be:	2b00      	cmp	r3, #0
 80161c0:	f000 80da 	beq.w	8016378 <tcp_write+0x464>
 80161c4:	4b03      	ldr	r3, [pc, #12]	; (80161d4 <tcp_write+0x2c0>)
 80161c6:	f240 2225 	movw	r2, #549	; 0x225
 80161ca:	4909      	ldr	r1, [pc, #36]	; (80161f0 <tcp_write+0x2dc>)
 80161cc:	4803      	ldr	r0, [pc, #12]	; (80161dc <tcp_write+0x2c8>)
 80161ce:	f004 fe0f 	bl	801adf0 <iprintf>
   * Phase 3: Create new segments.
   *
   * The new segments are chained together in the local 'queue'
   * variable, ready to be appended to pcb->unsent.
   */
  while (pos < len) {
 80161d2:	e0d1      	b.n	8016378 <tcp_write+0x464>
 80161d4:	0801da98 	.word	0x0801da98
 80161d8:	0801dbc0 	.word	0x0801dbc0
 80161dc:	0801dafc 	.word	0x0801dafc
 80161e0:	0801dbf4 	.word	0x0801dbf4
 80161e4:	0801dc0c 	.word	0x0801dc0c
 80161e8:	0801dc2c 	.word	0x0801dc2c
 80161ec:	0801dc4c 	.word	0x0801dc4c
 80161f0:	0801dc78 	.word	0x0801dc78
    struct pbuf *p;
    u16_t left = len - pos;
 80161f4:	88fa      	ldrh	r2, [r7, #6]
 80161f6:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80161fa:	1ad3      	subs	r3, r2, r3
 80161fc:	83bb      	strh	r3, [r7, #28]
    u16_t max_len = mss_local - optlen;
 80161fe:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8016202:	b29b      	uxth	r3, r3
 8016204:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8016206:	1ad3      	subs	r3, r2, r3
 8016208:	837b      	strh	r3, [r7, #26]
    u16_t seglen = LWIP_MIN(left, max_len);
 801620a:	8b7a      	ldrh	r2, [r7, #26]
 801620c:	8bbb      	ldrh	r3, [r7, #28]
 801620e:	4293      	cmp	r3, r2
 8016210:	bf28      	it	cs
 8016212:	4613      	movcs	r3, r2
 8016214:	833b      	strh	r3, [r7, #24]
#if TCP_CHECKSUM_ON_COPY
    u16_t chksum = 0;
    u8_t chksum_swapped = 0;
#endif /* TCP_CHECKSUM_ON_COPY */

    if (apiflags & TCP_WRITE_FLAG_COPY) {
 8016216:	797b      	ldrb	r3, [r7, #5]
 8016218:	f003 0301 	and.w	r3, r3, #1
 801621c:	2b00      	cmp	r3, #0
 801621e:	d036      	beq.n	801628e <tcp_write+0x37a>
      /* If copy is set, memory should be allocated and data copied
       * into pbuf */
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 8016220:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8016224:	b29a      	uxth	r2, r3
 8016226:	8b3b      	ldrh	r3, [r7, #24]
 8016228:	4413      	add	r3, r2
 801622a:	b299      	uxth	r1, r3
 801622c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801622e:	2b00      	cmp	r3, #0
 8016230:	bf0c      	ite	eq
 8016232:	2301      	moveq	r3, #1
 8016234:	2300      	movne	r3, #0
 8016236:	b2db      	uxtb	r3, r3
 8016238:	f107 0012 	add.w	r0, r7, #18
 801623c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801623e:	9302      	str	r3, [sp, #8]
 8016240:	797b      	ldrb	r3, [r7, #5]
 8016242:	9301      	str	r3, [sp, #4]
 8016244:	68fb      	ldr	r3, [r7, #12]
 8016246:	9300      	str	r3, [sp, #0]
 8016248:	4603      	mov	r3, r0
 801624a:	2000      	movs	r0, #0
 801624c:	f7ff fd8a 	bl	8015d64 <tcp_pbuf_prealloc>
 8016250:	6338      	str	r0, [r7, #48]	; 0x30
 8016252:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016254:	2b00      	cmp	r3, #0
 8016256:	f000 817e 	beq.w	8016556 <tcp_write+0x642>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write : could not allocate memory for pbuf copy size %"U16_F"\n", seglen));
        goto memerr;
      }
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 801625a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801625c:	895b      	ldrh	r3, [r3, #10]
 801625e:	8b3a      	ldrh	r2, [r7, #24]
 8016260:	429a      	cmp	r2, r3
 8016262:	d906      	bls.n	8016272 <tcp_write+0x35e>
 8016264:	4b8f      	ldr	r3, [pc, #572]	; (80164a4 <tcp_write+0x590>)
 8016266:	f240 2241 	movw	r2, #577	; 0x241
 801626a:	498f      	ldr	r1, [pc, #572]	; (80164a8 <tcp_write+0x594>)
 801626c:	488f      	ldr	r0, [pc, #572]	; (80164ac <tcp_write+0x598>)
 801626e:	f004 fdbf 	bl	801adf0 <iprintf>
                  (p->len >= seglen));
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t*)arg + pos, seglen, &chksum, &chksum_swapped);
 8016272:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016274:	685a      	ldr	r2, [r3, #4]
 8016276:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801627a:	18d0      	adds	r0, r2, r3
 801627c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8016280:	68ba      	ldr	r2, [r7, #8]
 8016282:	4413      	add	r3, r2
 8016284:	8b3a      	ldrh	r2, [r7, #24]
 8016286:	4619      	mov	r1, r3
 8016288:	f004 fcf7 	bl	801ac7a <memcpy>
 801628c:	e02e      	b.n	80162ec <tcp_write+0x3d8>
       * sent out on the link (as it has to be ACKed by the remote
       * party) we can safely use PBUF_ROM instead of PBUF_REF here.
       */
      struct pbuf *p2;
#if TCP_OVERSIZE
      LWIP_ASSERT("oversize == 0", oversize == 0);
 801628e:	8a7b      	ldrh	r3, [r7, #18]
 8016290:	2b00      	cmp	r3, #0
 8016292:	d006      	beq.n	80162a2 <tcp_write+0x38e>
 8016294:	4b83      	ldr	r3, [pc, #524]	; (80164a4 <tcp_write+0x590>)
 8016296:	f240 224b 	movw	r2, #587	; 0x24b
 801629a:	4985      	ldr	r1, [pc, #532]	; (80164b0 <tcp_write+0x59c>)
 801629c:	4883      	ldr	r0, [pc, #524]	; (80164ac <tcp_write+0x598>)
 801629e:	f004 fda7 	bl	801adf0 <iprintf>
#endif /* TCP_OVERSIZE */
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 80162a2:	8b3b      	ldrh	r3, [r7, #24]
 80162a4:	2201      	movs	r2, #1
 80162a6:	4619      	mov	r1, r3
 80162a8:	2000      	movs	r0, #0
 80162aa:	f7fa ffc3 	bl	8011234 <pbuf_alloc>
 80162ae:	6178      	str	r0, [r7, #20]
 80162b0:	697b      	ldr	r3, [r7, #20]
 80162b2:	2b00      	cmp	r3, #0
 80162b4:	f000 8151 	beq.w	801655a <tcp_write+0x646>
        chksum_swapped = 1;
        chksum = SWAP_BYTES_IN_WORD(chksum);
      }
#endif /* TCP_CHECKSUM_ON_COPY */
      /* reference the non-volatile payload data */
      ((struct pbuf_rom*)p2)->payload = (const u8_t*)arg + pos;
 80162b8:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80162bc:	68ba      	ldr	r2, [r7, #8]
 80162be:	441a      	add	r2, r3
 80162c0:	697b      	ldr	r3, [r7, #20]
 80162c2:	605a      	str	r2, [r3, #4]

      /* Second, allocate a pbuf for the headers. */
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 80162c4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80162c8:	b29b      	uxth	r3, r3
 80162ca:	2200      	movs	r2, #0
 80162cc:	4619      	mov	r1, r3
 80162ce:	2000      	movs	r0, #0
 80162d0:	f7fa ffb0 	bl	8011234 <pbuf_alloc>
 80162d4:	6338      	str	r0, [r7, #48]	; 0x30
 80162d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80162d8:	2b00      	cmp	r3, #0
 80162da:	d103      	bne.n	80162e4 <tcp_write+0x3d0>
        /* If allocation fails, we have to deallocate the data pbuf as
         * well. */
        pbuf_free(p2);
 80162dc:	6978      	ldr	r0, [r7, #20]
 80162de:	f7fb fb1b 	bl	8011918 <pbuf_free>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: could not allocate memory for header pbuf\n"));
        goto memerr;
 80162e2:	e13d      	b.n	8016560 <tcp_write+0x64c>
      }
      /* Concatenate the headers and data pbufs together. */
      pbuf_cat(p/*header*/, p2/*data*/);
 80162e4:	6979      	ldr	r1, [r7, #20]
 80162e6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80162e8:	f7fb fbf0 	bl	8011acc <pbuf_cat>
    }

    queuelen += pbuf_clen(p);
 80162ec:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80162ee:	f7fb fbad 	bl	8011a4c <pbuf_clen>
 80162f2:	4603      	mov	r3, r0
 80162f4:	461a      	mov	r2, r3
 80162f6:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80162fa:	4413      	add	r3, r2
 80162fc:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

    /* Now that there are more segments queued, we check again if the
     * length of the queue exceeds the configured maximum or
     * overflows. */
    if ((queuelen > TCP_SND_QUEUELEN) || (queuelen > TCP_SNDQUEUELEN_OVERFLOW)) {
 8016300:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8016304:	2b09      	cmp	r3, #9
 8016306:	d805      	bhi.n	8016314 <tcp_write+0x400>
 8016308:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 801630c:	f64f 72fc 	movw	r2, #65532	; 0xfffc
 8016310:	4293      	cmp	r3, r2
 8016312:	d903      	bls.n	801631c <tcp_write+0x408>
      LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: queue too long %"U16_F" (%d)\n",
        queuelen, (int)TCP_SND_QUEUELEN));
      pbuf_free(p);
 8016314:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8016316:	f7fb faff 	bl	8011918 <pbuf_free>
      goto memerr;
 801631a:	e121      	b.n	8016560 <tcp_write+0x64c>
    }

    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 801631c:	68fb      	ldr	r3, [r7, #12]
 801631e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8016320:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8016324:	441a      	add	r2, r3
 8016326:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801632a:	9300      	str	r3, [sp, #0]
 801632c:	4613      	mov	r3, r2
 801632e:	2200      	movs	r2, #0
 8016330:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8016332:	68f8      	ldr	r0, [r7, #12]
 8016334:	f7ff fc8e 	bl	8015c54 <tcp_create_segment>
 8016338:	64f8      	str	r0, [r7, #76]	; 0x4c
 801633a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801633c:	2b00      	cmp	r3, #0
 801633e:	f000 810e 	beq.w	801655e <tcp_write+0x64a>
    seg->chksum_swapped = chksum_swapped;
    seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

    /* first segment of to-be-queued data? */
    if (queue == NULL) {
 8016342:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8016344:	2b00      	cmp	r3, #0
 8016346:	d102      	bne.n	801634e <tcp_write+0x43a>
      queue = seg;
 8016348:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801634a:	647b      	str	r3, [r7, #68]	; 0x44
 801634c:	e00c      	b.n	8016368 <tcp_write+0x454>
    } else {
      /* Attach the segment to the end of the queued segments */
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 801634e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8016350:	2b00      	cmp	r3, #0
 8016352:	d106      	bne.n	8016362 <tcp_write+0x44e>
 8016354:	4b53      	ldr	r3, [pc, #332]	; (80164a4 <tcp_write+0x590>)
 8016356:	f240 2285 	movw	r2, #645	; 0x285
 801635a:	4956      	ldr	r1, [pc, #344]	; (80164b4 <tcp_write+0x5a0>)
 801635c:	4853      	ldr	r0, [pc, #332]	; (80164ac <tcp_write+0x598>)
 801635e:	f004 fd47 	bl	801adf0 <iprintf>
      prev_seg->next = seg;
 8016362:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8016364:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8016366:	601a      	str	r2, [r3, #0]
    }
    /* remember last segment of to-be-queued data for next iteration */
    prev_seg = seg;
 8016368:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801636a:	64bb      	str	r3, [r7, #72]	; 0x48

    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_TRACE, ("tcp_write: queueing %"U32_F":%"U32_F"\n",
      lwip_ntohl(seg->tcphdr->seqno),
      lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg)));

    pos += seglen;
 801636c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8016370:	8b3b      	ldrh	r3, [r7, #24]
 8016372:	4413      	add	r3, r2
 8016374:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  while (pos < len) {
 8016378:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801637c:	88fb      	ldrh	r3, [r7, #6]
 801637e:	429a      	cmp	r2, r3
 8016380:	f4ff af38 	bcc.w	80161f4 <tcp_write+0x2e0>
  /*
   * Phase 1: If data has been added to the preallocated tail of
   * last_unsent, we update the length fields of the pbuf chain.
   */
#if TCP_OVERSIZE
  if (oversize_used > 0) {
 8016384:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8016386:	2b00      	cmp	r3, #0
 8016388:	d02c      	beq.n	80163e4 <tcp_write+0x4d0>
    struct pbuf *p;
    /* Bump tot_len of whole chain, len of tail */
    for (p = last_unsent->p; p; p = p->next) {
 801638a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801638c:	685b      	ldr	r3, [r3, #4]
 801638e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8016390:	e01e      	b.n	80163d0 <tcp_write+0x4bc>
      p->tot_len += oversize_used;
 8016392:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016394:	891a      	ldrh	r2, [r3, #8]
 8016396:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8016398:	4413      	add	r3, r2
 801639a:	b29a      	uxth	r2, r3
 801639c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801639e:	811a      	strh	r2, [r3, #8]
      if (p->next == NULL) {
 80163a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80163a2:	681b      	ldr	r3, [r3, #0]
 80163a4:	2b00      	cmp	r3, #0
 80163a6:	d110      	bne.n	80163ca <tcp_write+0x4b6>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 80163a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80163aa:	685b      	ldr	r3, [r3, #4]
 80163ac:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80163ae:	8952      	ldrh	r2, [r2, #10]
 80163b0:	4413      	add	r3, r2
 80163b2:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 80163b4:	68b9      	ldr	r1, [r7, #8]
 80163b6:	4618      	mov	r0, r3
 80163b8:	f004 fc5f 	bl	801ac7a <memcpy>
        p->len += oversize_used;
 80163bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80163be:	895a      	ldrh	r2, [r3, #10]
 80163c0:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80163c2:	4413      	add	r3, r2
 80163c4:	b29a      	uxth	r2, r3
 80163c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80163c8:	815a      	strh	r2, [r3, #10]
    for (p = last_unsent->p; p; p = p->next) {
 80163ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80163cc:	681b      	ldr	r3, [r3, #0]
 80163ce:	62fb      	str	r3, [r7, #44]	; 0x2c
 80163d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80163d2:	2b00      	cmp	r3, #0
 80163d4:	d1dd      	bne.n	8016392 <tcp_write+0x47e>
      }
    }
    last_unsent->len += oversize_used;
 80163d6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80163d8:	891a      	ldrh	r2, [r3, #8]
 80163da:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80163dc:	4413      	add	r3, r2
 80163de:	b29a      	uxth	r2, r3
 80163e0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80163e2:	811a      	strh	r2, [r3, #8]
    LWIP_ASSERT("last_unsent->oversize_left >= oversize_used",
                last_unsent->oversize_left >= oversize_used);
    last_unsent->oversize_left -= oversize_used;
#endif /* TCP_OVERSIZE_DBGCHECK */
  }
  pcb->unsent_oversize = oversize;
 80163e4:	8a7a      	ldrh	r2, [r7, #18]
 80163e6:	68fb      	ldr	r3, [r7, #12]
 80163e8:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64

  /*
   * Phase 2: concat_p can be concatenated onto last_unsent->p, unless we
   * determined that the last ROM pbuf can be extended to include the new data.
   */
  if (concat_p != NULL) {
 80163ec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80163ee:	2b00      	cmp	r3, #0
 80163f0:	d018      	beq.n	8016424 <tcp_write+0x510>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 80163f2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80163f4:	2b00      	cmp	r3, #0
 80163f6:	d106      	bne.n	8016406 <tcp_write+0x4f2>
 80163f8:	4b2a      	ldr	r3, [pc, #168]	; (80164a4 <tcp_write+0x590>)
 80163fa:	f240 22bb 	movw	r2, #699	; 0x2bb
 80163fe:	492e      	ldr	r1, [pc, #184]	; (80164b8 <tcp_write+0x5a4>)
 8016400:	482a      	ldr	r0, [pc, #168]	; (80164ac <tcp_write+0x598>)
 8016402:	f004 fcf5 	bl	801adf0 <iprintf>
      (last_unsent != NULL));
    pbuf_cat(last_unsent->p, concat_p);
 8016406:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8016408:	685b      	ldr	r3, [r3, #4]
 801640a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 801640c:	4618      	mov	r0, r3
 801640e:	f7fb fb5d 	bl	8011acc <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 8016412:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8016414:	891a      	ldrh	r2, [r3, #8]
 8016416:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8016418:	891b      	ldrh	r3, [r3, #8]
 801641a:	4413      	add	r3, r2
 801641c:	b29a      	uxth	r2, r3
 801641e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8016420:	811a      	strh	r2, [r3, #8]
 8016422:	e037      	b.n	8016494 <tcp_write+0x580>
  } else if (extendlen > 0) {
 8016424:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8016426:	2b00      	cmp	r3, #0
 8016428:	d034      	beq.n	8016494 <tcp_write+0x580>
    struct pbuf *p;
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 801642a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801642c:	2b00      	cmp	r3, #0
 801642e:	d003      	beq.n	8016438 <tcp_write+0x524>
 8016430:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8016432:	685b      	ldr	r3, [r3, #4]
 8016434:	2b00      	cmp	r3, #0
 8016436:	d106      	bne.n	8016446 <tcp_write+0x532>
 8016438:	4b1a      	ldr	r3, [pc, #104]	; (80164a4 <tcp_write+0x590>)
 801643a:	f240 22c1 	movw	r2, #705	; 0x2c1
 801643e:	491f      	ldr	r1, [pc, #124]	; (80164bc <tcp_write+0x5a8>)
 8016440:	481a      	ldr	r0, [pc, #104]	; (80164ac <tcp_write+0x598>)
 8016442:	f004 fcd5 	bl	801adf0 <iprintf>
      last_unsent != NULL && last_unsent->p != NULL);
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 8016446:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8016448:	685b      	ldr	r3, [r3, #4]
 801644a:	62bb      	str	r3, [r7, #40]	; 0x28
 801644c:	e009      	b.n	8016462 <tcp_write+0x54e>
      p->tot_len += extendlen;
 801644e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016450:	891a      	ldrh	r2, [r3, #8]
 8016452:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8016454:	4413      	add	r3, r2
 8016456:	b29a      	uxth	r2, r3
 8016458:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801645a:	811a      	strh	r2, [r3, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 801645c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801645e:	681b      	ldr	r3, [r3, #0]
 8016460:	62bb      	str	r3, [r7, #40]	; 0x28
 8016462:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016464:	681b      	ldr	r3, [r3, #0]
 8016466:	2b00      	cmp	r3, #0
 8016468:	d1f1      	bne.n	801644e <tcp_write+0x53a>
    }
    p->tot_len += extendlen;
 801646a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801646c:	891a      	ldrh	r2, [r3, #8]
 801646e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8016470:	4413      	add	r3, r2
 8016472:	b29a      	uxth	r2, r3
 8016474:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016476:	811a      	strh	r2, [r3, #8]
    p->len += extendlen;
 8016478:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801647a:	895a      	ldrh	r2, [r3, #10]
 801647c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801647e:	4413      	add	r3, r2
 8016480:	b29a      	uxth	r2, r3
 8016482:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016484:	815a      	strh	r2, [r3, #10]
    last_unsent->len += extendlen;
 8016486:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8016488:	891a      	ldrh	r2, [r3, #8]
 801648a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801648c:	4413      	add	r3, r2
 801648e:	b29a      	uxth	r2, r3
 8016490:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8016492:	811a      	strh	r2, [r3, #8]

  /*
   * Phase 3: Append queue to pcb->unsent. Queue may be NULL, but that
   * is harmless
   */
  if (last_unsent == NULL) {
 8016494:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8016496:	2b00      	cmp	r3, #0
 8016498:	d112      	bne.n	80164c0 <tcp_write+0x5ac>
    pcb->unsent = queue;
 801649a:	68fb      	ldr	r3, [r7, #12]
 801649c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801649e:	669a      	str	r2, [r3, #104]	; 0x68
 80164a0:	e011      	b.n	80164c6 <tcp_write+0x5b2>
 80164a2:	bf00      	nop
 80164a4:	0801da98 	.word	0x0801da98
 80164a8:	0801dca8 	.word	0x0801dca8
 80164ac:	0801dafc 	.word	0x0801dafc
 80164b0:	0801dce8 	.word	0x0801dce8
 80164b4:	0801dcf8 	.word	0x0801dcf8
 80164b8:	0801dd0c 	.word	0x0801dd0c
 80164bc:	0801dd44 	.word	0x0801dd44
  } else {
    last_unsent->next = queue;
 80164c0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80164c2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80164c4:	601a      	str	r2, [r3, #0]
  }

  /*
   * Finally update the pcb state.
   */
  pcb->snd_lbb += len;
 80164c6:	68fb      	ldr	r3, [r7, #12]
 80164c8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80164ca:	88fb      	ldrh	r3, [r7, #6]
 80164cc:	441a      	add	r2, r3
 80164ce:	68fb      	ldr	r3, [r7, #12]
 80164d0:	659a      	str	r2, [r3, #88]	; 0x58
  pcb->snd_buf -= len;
 80164d2:	68fb      	ldr	r3, [r7, #12]
 80164d4:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 80164d8:	88fb      	ldrh	r3, [r7, #6]
 80164da:	1ad3      	subs	r3, r2, r3
 80164dc:	b29a      	uxth	r2, r3
 80164de:	68fb      	ldr	r3, [r7, #12]
 80164e0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  pcb->snd_queuelen = queuelen;
 80164e4:	68fb      	ldr	r3, [r7, #12]
 80164e6:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 80164ea:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: %"S16_F" (after enqueued)\n",
    pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 80164ee:	68fb      	ldr	r3, [r7, #12]
 80164f0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80164f4:	2b00      	cmp	r3, #0
 80164f6:	d00e      	beq.n	8016516 <tcp_write+0x602>
    LWIP_ASSERT("tcp_write: valid queue length",
 80164f8:	68fb      	ldr	r3, [r7, #12]
 80164fa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80164fc:	2b00      	cmp	r3, #0
 80164fe:	d10a      	bne.n	8016516 <tcp_write+0x602>
 8016500:	68fb      	ldr	r3, [r7, #12]
 8016502:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8016504:	2b00      	cmp	r3, #0
 8016506:	d106      	bne.n	8016516 <tcp_write+0x602>
 8016508:	4b2c      	ldr	r3, [pc, #176]	; (80165bc <tcp_write+0x6a8>)
 801650a:	f240 22ed 	movw	r2, #749	; 0x2ed
 801650e:	492c      	ldr	r1, [pc, #176]	; (80165c0 <tcp_write+0x6ac>)
 8016510:	482c      	ldr	r0, [pc, #176]	; (80165c4 <tcp_write+0x6b0>)
 8016512:	f004 fc6d 	bl	801adf0 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  /* Set the PSH flag in the last segment that we enqueued. */
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE)==0)) {
 8016516:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8016518:	2b00      	cmp	r3, #0
 801651a:	d016      	beq.n	801654a <tcp_write+0x636>
 801651c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801651e:	68db      	ldr	r3, [r3, #12]
 8016520:	2b00      	cmp	r3, #0
 8016522:	d012      	beq.n	801654a <tcp_write+0x636>
 8016524:	797b      	ldrb	r3, [r7, #5]
 8016526:	f003 0302 	and.w	r3, r3, #2
 801652a:	2b00      	cmp	r3, #0
 801652c:	d10d      	bne.n	801654a <tcp_write+0x636>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 801652e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8016530:	68db      	ldr	r3, [r3, #12]
 8016532:	899b      	ldrh	r3, [r3, #12]
 8016534:	b29c      	uxth	r4, r3
 8016536:	2008      	movs	r0, #8
 8016538:	f7fa f854 	bl	80105e4 <lwip_htons>
 801653c:	4603      	mov	r3, r0
 801653e:	461a      	mov	r2, r3
 8016540:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8016542:	68db      	ldr	r3, [r3, #12]
 8016544:	4322      	orrs	r2, r4
 8016546:	b292      	uxth	r2, r2
 8016548:	819a      	strh	r2, [r3, #12]
  }

  return ERR_OK;
 801654a:	2300      	movs	r3, #0
 801654c:	e031      	b.n	80165b2 <tcp_write+0x69e>
          goto memerr;
 801654e:	bf00      	nop
 8016550:	e006      	b.n	8016560 <tcp_write+0x64c>
            goto memerr;
 8016552:	bf00      	nop
 8016554:	e004      	b.n	8016560 <tcp_write+0x64c>
        goto memerr;
 8016556:	bf00      	nop
 8016558:	e002      	b.n	8016560 <tcp_write+0x64c>
        goto memerr;
 801655a:	bf00      	nop
 801655c:	e000      	b.n	8016560 <tcp_write+0x64c>
      goto memerr;
 801655e:	bf00      	nop
memerr:
  pcb->flags |= TF_NAGLEMEMERR;
 8016560:	68fb      	ldr	r3, [r7, #12]
 8016562:	7e9b      	ldrb	r3, [r3, #26]
 8016564:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8016568:	b2da      	uxtb	r2, r3
 801656a:	68fb      	ldr	r3, [r7, #12]
 801656c:	769a      	strb	r2, [r3, #26]
  TCP_STATS_INC(tcp.memerr);

  if (concat_p != NULL) {
 801656e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8016570:	2b00      	cmp	r3, #0
 8016572:	d002      	beq.n	801657a <tcp_write+0x666>
    pbuf_free(concat_p);
 8016574:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8016576:	f7fb f9cf 	bl	8011918 <pbuf_free>
  }
  if (queue != NULL) {
 801657a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801657c:	2b00      	cmp	r3, #0
 801657e:	d002      	beq.n	8016586 <tcp_write+0x672>
    tcp_segs_free(queue);
 8016580:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8016582:	f7fc fcce 	bl	8012f22 <tcp_segs_free>
  }
  if (pcb->snd_queuelen != 0) {
 8016586:	68fb      	ldr	r3, [r7, #12]
 8016588:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 801658c:	2b00      	cmp	r3, #0
 801658e:	d00e      	beq.n	80165ae <tcp_write+0x69a>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 8016590:	68fb      	ldr	r3, [r7, #12]
 8016592:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8016594:	2b00      	cmp	r3, #0
 8016596:	d10a      	bne.n	80165ae <tcp_write+0x69a>
 8016598:	68fb      	ldr	r3, [r7, #12]
 801659a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801659c:	2b00      	cmp	r3, #0
 801659e:	d106      	bne.n	80165ae <tcp_write+0x69a>
 80165a0:	4b06      	ldr	r3, [pc, #24]	; (80165bc <tcp_write+0x6a8>)
 80165a2:	f240 3202 	movw	r2, #770	; 0x302
 80165a6:	4906      	ldr	r1, [pc, #24]	; (80165c0 <tcp_write+0x6ac>)
 80165a8:	4806      	ldr	r0, [pc, #24]	; (80165c4 <tcp_write+0x6b0>)
 80165aa:	f004 fc21 	bl	801adf0 <iprintf>
      pcb->unsent != NULL);
  }
  LWIP_DEBUGF(TCP_QLEN_DEBUG | LWIP_DBG_STATE, ("tcp_write: %"S16_F" (with mem err)\n", pcb->snd_queuelen));
  return ERR_MEM;
 80165ae:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80165b2:	4618      	mov	r0, r3
 80165b4:	375c      	adds	r7, #92	; 0x5c
 80165b6:	46bd      	mov	sp, r7
 80165b8:	bd90      	pop	{r4, r7, pc}
 80165ba:	bf00      	nop
 80165bc:	0801da98 	.word	0x0801da98
 80165c0:	0801dd7c 	.word	0x0801dd7c
 80165c4:	0801dafc 	.word	0x0801dafc

080165c8 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 80165c8:	b580      	push	{r7, lr}
 80165ca:	b08a      	sub	sp, #40	; 0x28
 80165cc:	af02      	add	r7, sp, #8
 80165ce:	6078      	str	r0, [r7, #4]
 80165d0:	460b      	mov	r3, r1
 80165d2:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 80165d4:	2300      	movs	r3, #0
 80165d6:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 80165d8:	2300      	movs	r3, #0
 80165da:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 80165dc:	78fb      	ldrb	r3, [r7, #3]
 80165de:	f003 0303 	and.w	r3, r3, #3
 80165e2:	2b00      	cmp	r3, #0
 80165e4:	d106      	bne.n	80165f4 <tcp_enqueue_flags+0x2c>
 80165e6:	4b6f      	ldr	r3, [pc, #444]	; (80167a4 <tcp_enqueue_flags+0x1dc>)
 80165e8:	f240 321b 	movw	r2, #795	; 0x31b
 80165ec:	496e      	ldr	r1, [pc, #440]	; (80167a8 <tcp_enqueue_flags+0x1e0>)
 80165ee:	486f      	ldr	r0, [pc, #444]	; (80167ac <tcp_enqueue_flags+0x1e4>)
 80165f0:	f004 fbfe 	bl	801adf0 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);

  /* check for configured max queuelen and possible overflow (FIN flag should always come through!) */
  if (((pcb->snd_queuelen >= TCP_SND_QUEUELEN) || (pcb->snd_queuelen > TCP_SNDQUEUELEN_OVERFLOW)) &&
 80165f4:	687b      	ldr	r3, [r7, #4]
 80165f6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80165fa:	2b08      	cmp	r3, #8
 80165fc:	d806      	bhi.n	801660c <tcp_enqueue_flags+0x44>
 80165fe:	687b      	ldr	r3, [r7, #4]
 8016600:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8016604:	f64f 72fc 	movw	r2, #65532	; 0xfffc
 8016608:	4293      	cmp	r3, r2
 801660a:	d90e      	bls.n	801662a <tcp_enqueue_flags+0x62>
      ((flags & TCP_FIN) == 0)) {
 801660c:	78fb      	ldrb	r3, [r7, #3]
 801660e:	f003 0301 	and.w	r3, r3, #1
  if (((pcb->snd_queuelen >= TCP_SND_QUEUELEN) || (pcb->snd_queuelen > TCP_SNDQUEUELEN_OVERFLOW)) &&
 8016612:	2b00      	cmp	r3, #0
 8016614:	d109      	bne.n	801662a <tcp_enqueue_flags+0x62>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_enqueue_flags: too long queue %"U16_F" (max %"U16_F")\n",
                                       pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    pcb->flags |= TF_NAGLEMEMERR;
 8016616:	687b      	ldr	r3, [r7, #4]
 8016618:	7e9b      	ldrb	r3, [r3, #26]
 801661a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 801661e:	b2da      	uxtb	r2, r3
 8016620:	687b      	ldr	r3, [r7, #4]
 8016622:	769a      	strb	r2, [r3, #26]
    return ERR_MEM;
 8016624:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8016628:	e0b7      	b.n	801679a <tcp_enqueue_flags+0x1d2>
  }

  if (flags & TCP_SYN) {
 801662a:	78fb      	ldrb	r3, [r7, #3]
 801662c:	f003 0302 	and.w	r3, r3, #2
 8016630:	2b00      	cmp	r3, #0
 8016632:	d001      	beq.n	8016638 <tcp_enqueue_flags+0x70>
    optflags = TF_SEG_OPTS_MSS;
 8016634:	2301      	movs	r3, #1
 8016636:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host. */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 8016638:	7ffb      	ldrb	r3, [r7, #31]
 801663a:	009b      	lsls	r3, r3, #2
 801663c:	b2db      	uxtb	r3, r3
 801663e:	f003 0304 	and.w	r3, r3, #4
 8016642:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8016644:	7dfb      	ldrb	r3, [r7, #23]
 8016646:	b29b      	uxth	r3, r3
 8016648:	2200      	movs	r2, #0
 801664a:	4619      	mov	r1, r3
 801664c:	2000      	movs	r0, #0
 801664e:	f7fa fdf1 	bl	8011234 <pbuf_alloc>
 8016652:	6138      	str	r0, [r7, #16]
 8016654:	693b      	ldr	r3, [r7, #16]
 8016656:	2b00      	cmp	r3, #0
 8016658:	d109      	bne.n	801666e <tcp_enqueue_flags+0xa6>
    pcb->flags |= TF_NAGLEMEMERR;
 801665a:	687b      	ldr	r3, [r7, #4]
 801665c:	7e9b      	ldrb	r3, [r3, #26]
 801665e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8016662:	b2da      	uxtb	r2, r3
 8016664:	687b      	ldr	r3, [r7, #4]
 8016666:	769a      	strb	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8016668:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801666c:	e095      	b.n	801679a <tcp_enqueue_flags+0x1d2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 801666e:	693b      	ldr	r3, [r7, #16]
 8016670:	895a      	ldrh	r2, [r3, #10]
 8016672:	7dfb      	ldrb	r3, [r7, #23]
 8016674:	b29b      	uxth	r3, r3
 8016676:	429a      	cmp	r2, r3
 8016678:	d206      	bcs.n	8016688 <tcp_enqueue_flags+0xc0>
 801667a:	4b4a      	ldr	r3, [pc, #296]	; (80167a4 <tcp_enqueue_flags+0x1dc>)
 801667c:	f240 3241 	movw	r2, #833	; 0x341
 8016680:	494b      	ldr	r1, [pc, #300]	; (80167b0 <tcp_enqueue_flags+0x1e8>)
 8016682:	484a      	ldr	r0, [pc, #296]	; (80167ac <tcp_enqueue_flags+0x1e4>)
 8016684:	f004 fbb4 	bl	801adf0 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 8016688:	687b      	ldr	r3, [r7, #4]
 801668a:	6d99      	ldr	r1, [r3, #88]	; 0x58
 801668c:	78fa      	ldrb	r2, [r7, #3]
 801668e:	7ffb      	ldrb	r3, [r7, #31]
 8016690:	9300      	str	r3, [sp, #0]
 8016692:	460b      	mov	r3, r1
 8016694:	6939      	ldr	r1, [r7, #16]
 8016696:	6878      	ldr	r0, [r7, #4]
 8016698:	f7ff fadc 	bl	8015c54 <tcp_create_segment>
 801669c:	60f8      	str	r0, [r7, #12]
 801669e:	68fb      	ldr	r3, [r7, #12]
 80166a0:	2b00      	cmp	r3, #0
 80166a2:	d109      	bne.n	80166b8 <tcp_enqueue_flags+0xf0>
    pcb->flags |= TF_NAGLEMEMERR;
 80166a4:	687b      	ldr	r3, [r7, #4]
 80166a6:	7e9b      	ldrb	r3, [r3, #26]
 80166a8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80166ac:	b2da      	uxtb	r2, r3
 80166ae:	687b      	ldr	r3, [r7, #4]
 80166b0:	769a      	strb	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 80166b2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80166b6:	e070      	b.n	801679a <tcp_enqueue_flags+0x1d2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 80166b8:	68fb      	ldr	r3, [r7, #12]
 80166ba:	68db      	ldr	r3, [r3, #12]
 80166bc:	f003 0303 	and.w	r3, r3, #3
 80166c0:	2b00      	cmp	r3, #0
 80166c2:	d006      	beq.n	80166d2 <tcp_enqueue_flags+0x10a>
 80166c4:	4b37      	ldr	r3, [pc, #220]	; (80167a4 <tcp_enqueue_flags+0x1dc>)
 80166c6:	f240 3249 	movw	r2, #841	; 0x349
 80166ca:	493a      	ldr	r1, [pc, #232]	; (80167b4 <tcp_enqueue_flags+0x1ec>)
 80166cc:	4837      	ldr	r0, [pc, #220]	; (80167ac <tcp_enqueue_flags+0x1e4>)
 80166ce:	f004 fb8f 	bl	801adf0 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 80166d2:	68fb      	ldr	r3, [r7, #12]
 80166d4:	891b      	ldrh	r3, [r3, #8]
 80166d6:	2b00      	cmp	r3, #0
 80166d8:	d006      	beq.n	80166e8 <tcp_enqueue_flags+0x120>
 80166da:	4b32      	ldr	r3, [pc, #200]	; (80167a4 <tcp_enqueue_flags+0x1dc>)
 80166dc:	f240 324a 	movw	r2, #842	; 0x34a
 80166e0:	4935      	ldr	r1, [pc, #212]	; (80167b8 <tcp_enqueue_flags+0x1f0>)
 80166e2:	4832      	ldr	r0, [pc, #200]	; (80167ac <tcp_enqueue_flags+0x1e4>)
 80166e4:	f004 fb84 	bl	801adf0 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 80166e8:	687b      	ldr	r3, [r7, #4]
 80166ea:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80166ec:	2b00      	cmp	r3, #0
 80166ee:	d103      	bne.n	80166f8 <tcp_enqueue_flags+0x130>
    pcb->unsent = seg;
 80166f0:	687b      	ldr	r3, [r7, #4]
 80166f2:	68fa      	ldr	r2, [r7, #12]
 80166f4:	669a      	str	r2, [r3, #104]	; 0x68
 80166f6:	e00d      	b.n	8016714 <tcp_enqueue_flags+0x14c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 80166f8:	687b      	ldr	r3, [r7, #4]
 80166fa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80166fc:	61bb      	str	r3, [r7, #24]
 80166fe:	e002      	b.n	8016706 <tcp_enqueue_flags+0x13e>
 8016700:	69bb      	ldr	r3, [r7, #24]
 8016702:	681b      	ldr	r3, [r3, #0]
 8016704:	61bb      	str	r3, [r7, #24]
 8016706:	69bb      	ldr	r3, [r7, #24]
 8016708:	681b      	ldr	r3, [r3, #0]
 801670a:	2b00      	cmp	r3, #0
 801670c:	d1f8      	bne.n	8016700 <tcp_enqueue_flags+0x138>
    useg->next = seg;
 801670e:	69bb      	ldr	r3, [r7, #24]
 8016710:	68fa      	ldr	r2, [r7, #12]
 8016712:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 8016714:	687b      	ldr	r3, [r7, #4]
 8016716:	2200      	movs	r2, #0
 8016718:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 801671c:	78fb      	ldrb	r3, [r7, #3]
 801671e:	f003 0302 	and.w	r3, r3, #2
 8016722:	2b00      	cmp	r3, #0
 8016724:	d104      	bne.n	8016730 <tcp_enqueue_flags+0x168>
 8016726:	78fb      	ldrb	r3, [r7, #3]
 8016728:	f003 0301 	and.w	r3, r3, #1
 801672c:	2b00      	cmp	r3, #0
 801672e:	d004      	beq.n	801673a <tcp_enqueue_flags+0x172>
    pcb->snd_lbb++;
 8016730:	687b      	ldr	r3, [r7, #4]
 8016732:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8016734:	1c5a      	adds	r2, r3, #1
 8016736:	687b      	ldr	r3, [r7, #4]
 8016738:	659a      	str	r2, [r3, #88]	; 0x58
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 801673a:	78fb      	ldrb	r3, [r7, #3]
 801673c:	f003 0301 	and.w	r3, r3, #1
 8016740:	2b00      	cmp	r3, #0
 8016742:	d006      	beq.n	8016752 <tcp_enqueue_flags+0x18a>
    pcb->flags |= TF_FIN;
 8016744:	687b      	ldr	r3, [r7, #4]
 8016746:	7e9b      	ldrb	r3, [r3, #26]
 8016748:	f043 0320 	orr.w	r3, r3, #32
 801674c:	b2da      	uxtb	r2, r3
 801674e:	687b      	ldr	r3, [r7, #4]
 8016750:	769a      	strb	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8016752:	68fb      	ldr	r3, [r7, #12]
 8016754:	685b      	ldr	r3, [r3, #4]
 8016756:	4618      	mov	r0, r3
 8016758:	f7fb f978 	bl	8011a4c <pbuf_clen>
 801675c:	4603      	mov	r3, r0
 801675e:	461a      	mov	r2, r3
 8016760:	687b      	ldr	r3, [r7, #4]
 8016762:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8016766:	4413      	add	r3, r2
 8016768:	b29a      	uxth	r2, r3
 801676a:	687b      	ldr	r3, [r7, #4]
 801676c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 8016770:	687b      	ldr	r3, [r7, #4]
 8016772:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8016776:	2b00      	cmp	r3, #0
 8016778:	d00e      	beq.n	8016798 <tcp_enqueue_flags+0x1d0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 801677a:	687b      	ldr	r3, [r7, #4]
 801677c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801677e:	2b00      	cmp	r3, #0
 8016780:	d10a      	bne.n	8016798 <tcp_enqueue_flags+0x1d0>
 8016782:	687b      	ldr	r3, [r7, #4]
 8016784:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8016786:	2b00      	cmp	r3, #0
 8016788:	d106      	bne.n	8016798 <tcp_enqueue_flags+0x1d0>
 801678a:	4b06      	ldr	r3, [pc, #24]	; (80167a4 <tcp_enqueue_flags+0x1dc>)
 801678c:	f240 326d 	movw	r2, #877	; 0x36d
 8016790:	490a      	ldr	r1, [pc, #40]	; (80167bc <tcp_enqueue_flags+0x1f4>)
 8016792:	4806      	ldr	r0, [pc, #24]	; (80167ac <tcp_enqueue_flags+0x1e4>)
 8016794:	f004 fb2c 	bl	801adf0 <iprintf>
      pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 8016798:	2300      	movs	r3, #0
}
 801679a:	4618      	mov	r0, r3
 801679c:	3720      	adds	r7, #32
 801679e:	46bd      	mov	sp, r7
 80167a0:	bd80      	pop	{r7, pc}
 80167a2:	bf00      	nop
 80167a4:	0801da98 	.word	0x0801da98
 80167a8:	0801dd9c 	.word	0x0801dd9c
 80167ac:	0801dafc 	.word	0x0801dafc
 80167b0:	0801ddf4 	.word	0x0801ddf4
 80167b4:	0801de30 	.word	0x0801de30
 80167b8:	0801de48 	.word	0x0801de48
 80167bc:	0801de74 	.word	0x0801de74

080167c0 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 80167c0:	b590      	push	{r4, r7, lr}
 80167c2:	b08b      	sub	sp, #44	; 0x2c
 80167c4:	af04      	add	r7, sp, #16
 80167c6:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = 0;
 80167c8:	2300      	movs	r3, #0
 80167ca:	75bb      	strb	r3, [r7, #22]
  if (pcb->flags & TF_TIMESTAMP) {
    optlen = LWIP_TCP_OPT_LENGTH(TF_SEG_OPTS_TS);
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 80167cc:	7dbb      	ldrb	r3, [r7, #22]
 80167ce:	b29c      	uxth	r4, r3
 80167d0:	687b      	ldr	r3, [r7, #4]
 80167d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80167d4:	4618      	mov	r0, r3
 80167d6:	f7f9 ff13 	bl	8010600 <lwip_htonl>
 80167da:	4603      	mov	r3, r0
 80167dc:	2200      	movs	r2, #0
 80167de:	4621      	mov	r1, r4
 80167e0:	6878      	ldr	r0, [r7, #4]
 80167e2:	f7ff f97b 	bl	8015adc <tcp_output_alloc_header>
 80167e6:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 80167e8:	693b      	ldr	r3, [r7, #16]
 80167ea:	2b00      	cmp	r3, #0
 80167ec:	d109      	bne.n	8016802 <tcp_send_empty_ack+0x42>
    /* let tcp_fasttmr retry sending this ACK */
    pcb->flags |= (TF_ACK_DELAY | TF_ACK_NOW);
 80167ee:	687b      	ldr	r3, [r7, #4]
 80167f0:	7e9b      	ldrb	r3, [r3, #26]
 80167f2:	f043 0303 	orr.w	r3, r3, #3
 80167f6:	b2da      	uxtb	r2, r3
 80167f8:	687b      	ldr	r3, [r7, #4]
 80167fa:	769a      	strb	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 80167fc:	f06f 0301 	mvn.w	r3, #1
 8016800:	e036      	b.n	8016870 <tcp_send_empty_ack+0xb0>
  if (pcb->flags & TF_TIMESTAMP) {
    tcp_build_timestamp_option(pcb, (u32_t *)(tcphdr + 1));
  }
#endif

  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 8016802:	687b      	ldr	r3, [r7, #4]
 8016804:	3304      	adds	r3, #4
 8016806:	4618      	mov	r0, r3
 8016808:	f002 f9be 	bl	8018b88 <ip4_route>
 801680c:	60f8      	str	r0, [r7, #12]
  if (netif == NULL) {
 801680e:	68fb      	ldr	r3, [r7, #12]
 8016810:	2b00      	cmp	r3, #0
 8016812:	d102      	bne.n	801681a <tcp_send_empty_ack+0x5a>
    err = ERR_RTE;
 8016814:	23fc      	movs	r3, #252	; 0xfc
 8016816:	75fb      	strb	r3, [r7, #23]
 8016818:	e012      	b.n	8016840 <tcp_send_empty_ack+0x80>
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
        &pcb->local_ip, &pcb->remote_ip);
    }
#endif
    NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
    err = ip_output_if(p, &pcb->local_ip, &pcb->remote_ip,
 801681a:	6879      	ldr	r1, [r7, #4]
 801681c:	687b      	ldr	r3, [r7, #4]
 801681e:	1d18      	adds	r0, r3, #4
 8016820:	687b      	ldr	r3, [r7, #4]
 8016822:	7a9c      	ldrb	r4, [r3, #10]
 8016824:	687b      	ldr	r3, [r7, #4]
 8016826:	7a5b      	ldrb	r3, [r3, #9]
 8016828:	68fa      	ldr	r2, [r7, #12]
 801682a:	9202      	str	r2, [sp, #8]
 801682c:	2206      	movs	r2, #6
 801682e:	9201      	str	r2, [sp, #4]
 8016830:	9300      	str	r3, [sp, #0]
 8016832:	4623      	mov	r3, r4
 8016834:	4602      	mov	r2, r0
 8016836:	6938      	ldr	r0, [r7, #16]
 8016838:	f002 fb4e 	bl	8018ed8 <ip4_output_if>
 801683c:	4603      	mov	r3, r0
 801683e:	75fb      	strb	r3, [r7, #23]
      pcb->ttl, pcb->tos, IP_PROTO_TCP, netif);
    NETIF_SET_HWADDRHINT(netif, NULL);
  }
  pbuf_free(p);
 8016840:	6938      	ldr	r0, [r7, #16]
 8016842:	f7fb f869 	bl	8011918 <pbuf_free>

  if (err != ERR_OK) {
 8016846:	f997 3017 	ldrsb.w	r3, [r7, #23]
 801684a:	2b00      	cmp	r3, #0
 801684c:	d007      	beq.n	801685e <tcp_send_empty_ack+0x9e>
    /* let tcp_fasttmr retry sending this ACK */
    pcb->flags |= (TF_ACK_DELAY | TF_ACK_NOW);
 801684e:	687b      	ldr	r3, [r7, #4]
 8016850:	7e9b      	ldrb	r3, [r3, #26]
 8016852:	f043 0303 	orr.w	r3, r3, #3
 8016856:	b2da      	uxtb	r2, r3
 8016858:	687b      	ldr	r3, [r7, #4]
 801685a:	769a      	strb	r2, [r3, #26]
 801685c:	e006      	b.n	801686c <tcp_send_empty_ack+0xac>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    pcb->flags &= ~(TF_ACK_DELAY | TF_ACK_NOW);
 801685e:	687b      	ldr	r3, [r7, #4]
 8016860:	7e9b      	ldrb	r3, [r3, #26]
 8016862:	f023 0303 	bic.w	r3, r3, #3
 8016866:	b2da      	uxtb	r2, r3
 8016868:	687b      	ldr	r3, [r7, #4]
 801686a:	769a      	strb	r2, [r3, #26]
  }

  return err;
 801686c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8016870:	4618      	mov	r0, r3
 8016872:	371c      	adds	r7, #28
 8016874:	46bd      	mov	sp, r7
 8016876:	bd90      	pop	{r4, r7, pc}

08016878 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 8016878:	b5b0      	push	{r4, r5, r7, lr}
 801687a:	b08a      	sub	sp, #40	; 0x28
 801687c:	af00      	add	r7, sp, #0
 801687e:	6078      	str	r0, [r7, #4]
#if TCP_CWND_DEBUG
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 8016880:	687b      	ldr	r3, [r7, #4]
 8016882:	7d1b      	ldrb	r3, [r3, #20]
 8016884:	2b01      	cmp	r3, #1
 8016886:	d106      	bne.n	8016896 <tcp_output+0x1e>
 8016888:	4b9b      	ldr	r3, [pc, #620]	; (8016af8 <tcp_output+0x280>)
 801688a:	f240 32ed 	movw	r2, #1005	; 0x3ed
 801688e:	499b      	ldr	r1, [pc, #620]	; (8016afc <tcp_output+0x284>)
 8016890:	489b      	ldr	r0, [pc, #620]	; (8016b00 <tcp_output+0x288>)
 8016892:	f004 faad 	bl	801adf0 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 8016896:	4b9b      	ldr	r3, [pc, #620]	; (8016b04 <tcp_output+0x28c>)
 8016898:	681b      	ldr	r3, [r3, #0]
 801689a:	687a      	ldr	r2, [r7, #4]
 801689c:	429a      	cmp	r2, r3
 801689e:	d101      	bne.n	80168a4 <tcp_output+0x2c>
    return ERR_OK;
 80168a0:	2300      	movs	r3, #0
 80168a2:	e1cf      	b.n	8016c44 <tcp_output+0x3cc>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 80168a4:	687b      	ldr	r3, [r7, #4]
 80168a6:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 80168aa:	687b      	ldr	r3, [r7, #4]
 80168ac:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80168b0:	429a      	cmp	r2, r3
 80168b2:	d203      	bcs.n	80168bc <tcp_output+0x44>
 80168b4:	687b      	ldr	r3, [r7, #4]
 80168b6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80168ba:	e002      	b.n	80168c2 <tcp_output+0x4a>
 80168bc:	687b      	ldr	r3, [r7, #4]
 80168be:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80168c2:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 80168c4:	687b      	ldr	r3, [r7, #4]
 80168c6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80168c8:	627b      	str	r3, [r7, #36]	; 0x24
   * because the ->unsent queue is empty or because the window does
   * not allow it), construct an empty ACK segment and send it.
   *
   * If data is to be sent, we will just piggyback the ACK (see below).
   */
  if (pcb->flags & TF_ACK_NOW &&
 80168ca:	687b      	ldr	r3, [r7, #4]
 80168cc:	7e9b      	ldrb	r3, [r3, #26]
 80168ce:	f003 0302 	and.w	r3, r3, #2
 80168d2:	2b00      	cmp	r3, #0
 80168d4:	d017      	beq.n	8016906 <tcp_output+0x8e>
 80168d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80168d8:	2b00      	cmp	r3, #0
 80168da:	d00f      	beq.n	80168fc <tcp_output+0x84>
     (seg == NULL ||
      lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd)) {
 80168dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80168de:	68db      	ldr	r3, [r3, #12]
 80168e0:	685b      	ldr	r3, [r3, #4]
 80168e2:	4618      	mov	r0, r3
 80168e4:	f7f9 fe8c 	bl	8010600 <lwip_htonl>
 80168e8:	4602      	mov	r2, r0
 80168ea:	687b      	ldr	r3, [r7, #4]
 80168ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80168ee:	1ad3      	subs	r3, r2, r3
 80168f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80168f2:	8912      	ldrh	r2, [r2, #8]
 80168f4:	4413      	add	r3, r2
     (seg == NULL ||
 80168f6:	69ba      	ldr	r2, [r7, #24]
 80168f8:	429a      	cmp	r2, r3
 80168fa:	d204      	bcs.n	8016906 <tcp_output+0x8e>
     return tcp_send_empty_ack(pcb);
 80168fc:	6878      	ldr	r0, [r7, #4]
 80168fe:	f7ff ff5f 	bl	80167c0 <tcp_send_empty_ack>
 8016902:	4603      	mov	r3, r0
 8016904:	e19e      	b.n	8016c44 <tcp_output+0x3cc>
  }

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 8016906:	687b      	ldr	r3, [r7, #4]
 8016908:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801690a:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 801690c:	6a3b      	ldr	r3, [r7, #32]
 801690e:	2b00      	cmp	r3, #0
 8016910:	d007      	beq.n	8016922 <tcp_output+0xaa>
    for (; useg->next != NULL; useg = useg->next);
 8016912:	e002      	b.n	801691a <tcp_output+0xa2>
 8016914:	6a3b      	ldr	r3, [r7, #32]
 8016916:	681b      	ldr	r3, [r3, #0]
 8016918:	623b      	str	r3, [r7, #32]
 801691a:	6a3b      	ldr	r3, [r7, #32]
 801691c:	681b      	ldr	r3, [r3, #0]
 801691e:	2b00      	cmp	r3, #0
 8016920:	d1f8      	bne.n	8016914 <tcp_output+0x9c>
  }

  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 8016922:	687b      	ldr	r3, [r7, #4]
 8016924:	3304      	adds	r3, #4
 8016926:	4618      	mov	r0, r3
 8016928:	f002 f92e 	bl	8018b88 <ip4_route>
 801692c:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 801692e:	697b      	ldr	r3, [r7, #20]
 8016930:	2b00      	cmp	r3, #0
 8016932:	d102      	bne.n	801693a <tcp_output+0xc2>
    return ERR_RTE;
 8016934:	f06f 0303 	mvn.w	r3, #3
 8016938:	e184      	b.n	8016c44 <tcp_output+0x3cc>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 801693a:	687b      	ldr	r3, [r7, #4]
 801693c:	2b00      	cmp	r3, #0
 801693e:	d003      	beq.n	8016948 <tcp_output+0xd0>
 8016940:	687b      	ldr	r3, [r7, #4]
 8016942:	681b      	ldr	r3, [r3, #0]
 8016944:	2b00      	cmp	r3, #0
 8016946:	d111      	bne.n	801696c <tcp_output+0xf4>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 8016948:	697b      	ldr	r3, [r7, #20]
 801694a:	2b00      	cmp	r3, #0
 801694c:	d002      	beq.n	8016954 <tcp_output+0xdc>
 801694e:	697b      	ldr	r3, [r7, #20]
 8016950:	3304      	adds	r3, #4
 8016952:	e000      	b.n	8016956 <tcp_output+0xde>
 8016954:	2300      	movs	r3, #0
 8016956:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 8016958:	693b      	ldr	r3, [r7, #16]
 801695a:	2b00      	cmp	r3, #0
 801695c:	d102      	bne.n	8016964 <tcp_output+0xec>
      return ERR_RTE;
 801695e:	f06f 0303 	mvn.w	r3, #3
 8016962:	e16f      	b.n	8016c44 <tcp_output+0x3cc>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 8016964:	693b      	ldr	r3, [r7, #16]
 8016966:	681a      	ldr	r2, [r3, #0]
 8016968:	687b      	ldr	r3, [r7, #4]
 801696a:	601a      	str	r2, [r3, #0]
   * with part of the unsent segment (which will engage zero-window probing upon
   * reception of the zero window update from the receiver). This ensures the
   * subsequent window update is reliably received. With the goal of being lightweight,
   * we avoid splitting the unsent segment and treat the window as already zero.
   */
  if (seg != NULL &&
 801696c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801696e:	2b00      	cmp	r3, #0
 8016970:	f000 813e 	beq.w	8016bf0 <tcp_output+0x378>
      lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd &&
 8016974:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016976:	68db      	ldr	r3, [r3, #12]
 8016978:	685b      	ldr	r3, [r3, #4]
 801697a:	4618      	mov	r0, r3
 801697c:	f7f9 fe40 	bl	8010600 <lwip_htonl>
 8016980:	4602      	mov	r2, r0
 8016982:	687b      	ldr	r3, [r7, #4]
 8016984:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8016986:	1ad3      	subs	r3, r2, r3
 8016988:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801698a:	8912      	ldrh	r2, [r2, #8]
 801698c:	4413      	add	r3, r2
  if (seg != NULL &&
 801698e:	69ba      	ldr	r2, [r7, #24]
 8016990:	429a      	cmp	r2, r3
 8016992:	f080 812d 	bcs.w	8016bf0 <tcp_output+0x378>
      lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd &&
 8016996:	69bb      	ldr	r3, [r7, #24]
 8016998:	2b00      	cmp	r3, #0
 801699a:	f000 8129 	beq.w	8016bf0 <tcp_output+0x378>
      wnd > 0 && wnd == pcb->snd_wnd && pcb->unacked == NULL) {
 801699e:	687b      	ldr	r3, [r7, #4]
 80169a0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80169a4:	461a      	mov	r2, r3
 80169a6:	69bb      	ldr	r3, [r7, #24]
 80169a8:	4293      	cmp	r3, r2
 80169aa:	f040 8121 	bne.w	8016bf0 <tcp_output+0x378>
 80169ae:	687b      	ldr	r3, [r7, #4]
 80169b0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80169b2:	2b00      	cmp	r3, #0
 80169b4:	f040 811c 	bne.w	8016bf0 <tcp_output+0x378>
    /* Start the persist timer */
    if (pcb->persist_backoff == 0) {
 80169b8:	687b      	ldr	r3, [r7, #4]
 80169ba:	f893 3095 	ldrb.w	r3, [r3, #149]	; 0x95
 80169be:	2b00      	cmp	r3, #0
 80169c0:	f040 812b 	bne.w	8016c1a <tcp_output+0x3a2>
      pcb->persist_cnt = 0;
 80169c4:	687b      	ldr	r3, [r7, #4]
 80169c6:	2200      	movs	r2, #0
 80169c8:	f883 2094 	strb.w	r2, [r3, #148]	; 0x94
      pcb->persist_backoff = 1;
 80169cc:	687b      	ldr	r3, [r7, #4]
 80169ce:	2201      	movs	r2, #1
 80169d0:	f883 2095 	strb.w	r2, [r3, #149]	; 0x95
    }
    goto output_done;
 80169d4:	e121      	b.n	8016c1a <tcp_output+0x3a2>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 80169d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80169d8:	68db      	ldr	r3, [r3, #12]
 80169da:	899b      	ldrh	r3, [r3, #12]
 80169dc:	b29b      	uxth	r3, r3
 80169de:	4618      	mov	r0, r3
 80169e0:	f7f9 fe00 	bl	80105e4 <lwip_htons>
 80169e4:	4603      	mov	r3, r0
 80169e6:	f003 0304 	and.w	r3, r3, #4
 80169ea:	2b00      	cmp	r3, #0
 80169ec:	d006      	beq.n	80169fc <tcp_output+0x184>
 80169ee:	4b42      	ldr	r3, [pc, #264]	; (8016af8 <tcp_output+0x280>)
 80169f0:	f240 4246 	movw	r2, #1094	; 0x446
 80169f4:	4944      	ldr	r1, [pc, #272]	; (8016b08 <tcp_output+0x290>)
 80169f6:	4842      	ldr	r0, [pc, #264]	; (8016b00 <tcp_output+0x288>)
 80169f8:	f004 f9fa 	bl	801adf0 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 80169fc:	687b      	ldr	r3, [r7, #4]
 80169fe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8016a00:	2b00      	cmp	r3, #0
 8016a02:	d01f      	beq.n	8016a44 <tcp_output+0x1cc>
 8016a04:	687b      	ldr	r3, [r7, #4]
 8016a06:	7e9b      	ldrb	r3, [r3, #26]
 8016a08:	f003 0344 	and.w	r3, r3, #68	; 0x44
 8016a0c:	2b00      	cmp	r3, #0
 8016a0e:	d119      	bne.n	8016a44 <tcp_output+0x1cc>
 8016a10:	687b      	ldr	r3, [r7, #4]
 8016a12:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8016a14:	2b00      	cmp	r3, #0
 8016a16:	d00b      	beq.n	8016a30 <tcp_output+0x1b8>
 8016a18:	687b      	ldr	r3, [r7, #4]
 8016a1a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8016a1c:	681b      	ldr	r3, [r3, #0]
 8016a1e:	2b00      	cmp	r3, #0
 8016a20:	d110      	bne.n	8016a44 <tcp_output+0x1cc>
 8016a22:	687b      	ldr	r3, [r7, #4]
 8016a24:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8016a26:	891a      	ldrh	r2, [r3, #8]
 8016a28:	687b      	ldr	r3, [r7, #4]
 8016a2a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8016a2c:	429a      	cmp	r2, r3
 8016a2e:	d209      	bcs.n	8016a44 <tcp_output+0x1cc>
 8016a30:	687b      	ldr	r3, [r7, #4]
 8016a32:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8016a36:	2b00      	cmp	r3, #0
 8016a38:	d004      	beq.n	8016a44 <tcp_output+0x1cc>
 8016a3a:	687b      	ldr	r3, [r7, #4]
 8016a3c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8016a40:	2b08      	cmp	r3, #8
 8016a42:	d901      	bls.n	8016a48 <tcp_output+0x1d0>
 8016a44:	2301      	movs	r3, #1
 8016a46:	e000      	b.n	8016a4a <tcp_output+0x1d2>
 8016a48:	2300      	movs	r3, #0
 8016a4a:	2b00      	cmp	r3, #0
 8016a4c:	d106      	bne.n	8016a5c <tcp_output+0x1e4>
      ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 8016a4e:	687b      	ldr	r3, [r7, #4]
 8016a50:	7e9b      	ldrb	r3, [r3, #26]
 8016a52:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8016a56:	2b00      	cmp	r3, #0
 8016a58:	f000 80e1 	beq.w	8016c1e <tcp_output+0x3a6>
                            pcb->lastack,
                            lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 8016a5c:	687b      	ldr	r3, [r7, #4]
 8016a5e:	7d1b      	ldrb	r3, [r3, #20]
 8016a60:	2b02      	cmp	r3, #2
 8016a62:	d00d      	beq.n	8016a80 <tcp_output+0x208>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 8016a64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016a66:	68db      	ldr	r3, [r3, #12]
 8016a68:	899b      	ldrh	r3, [r3, #12]
 8016a6a:	b29c      	uxth	r4, r3
 8016a6c:	2010      	movs	r0, #16
 8016a6e:	f7f9 fdb9 	bl	80105e4 <lwip_htons>
 8016a72:	4603      	mov	r3, r0
 8016a74:	461a      	mov	r2, r3
 8016a76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016a78:	68db      	ldr	r3, [r3, #12]
 8016a7a:	4322      	orrs	r2, r4
 8016a7c:	b292      	uxth	r2, r2
 8016a7e:	819a      	strh	r2, [r3, #12]
    }

#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    err = tcp_output_segment(seg, pcb, netif);
 8016a80:	697a      	ldr	r2, [r7, #20]
 8016a82:	6879      	ldr	r1, [r7, #4]
 8016a84:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8016a86:	f000 f8e1 	bl	8016c4c <tcp_output_segment>
 8016a8a:	4603      	mov	r3, r0
 8016a8c:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 8016a8e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8016a92:	2b00      	cmp	r3, #0
 8016a94:	d009      	beq.n	8016aaa <tcp_output+0x232>
      /* segment could not be sent, for whatever reason */
      pcb->flags |= TF_NAGLEMEMERR;
 8016a96:	687b      	ldr	r3, [r7, #4]
 8016a98:	7e9b      	ldrb	r3, [r3, #26]
 8016a9a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8016a9e:	b2da      	uxtb	r2, r3
 8016aa0:	687b      	ldr	r3, [r7, #4]
 8016aa2:	769a      	strb	r2, [r3, #26]
      return err;
 8016aa4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8016aa8:	e0cc      	b.n	8016c44 <tcp_output+0x3cc>
    }
    pcb->unsent = seg->next;
 8016aaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016aac:	681a      	ldr	r2, [r3, #0]
 8016aae:	687b      	ldr	r3, [r7, #4]
 8016ab0:	669a      	str	r2, [r3, #104]	; 0x68
    if (pcb->state != SYN_SENT) {
 8016ab2:	687b      	ldr	r3, [r7, #4]
 8016ab4:	7d1b      	ldrb	r3, [r3, #20]
 8016ab6:	2b02      	cmp	r3, #2
 8016ab8:	d006      	beq.n	8016ac8 <tcp_output+0x250>
      pcb->flags &= ~(TF_ACK_DELAY | TF_ACK_NOW);
 8016aba:	687b      	ldr	r3, [r7, #4]
 8016abc:	7e9b      	ldrb	r3, [r3, #26]
 8016abe:	f023 0303 	bic.w	r3, r3, #3
 8016ac2:	b2da      	uxtb	r2, r3
 8016ac4:	687b      	ldr	r3, [r7, #4]
 8016ac6:	769a      	strb	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8016ac8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016aca:	68db      	ldr	r3, [r3, #12]
 8016acc:	685b      	ldr	r3, [r3, #4]
 8016ace:	4618      	mov	r0, r3
 8016ad0:	f7f9 fd96 	bl	8010600 <lwip_htonl>
 8016ad4:	4604      	mov	r4, r0
 8016ad6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016ad8:	891b      	ldrh	r3, [r3, #8]
 8016ada:	461d      	mov	r5, r3
 8016adc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016ade:	68db      	ldr	r3, [r3, #12]
 8016ae0:	899b      	ldrh	r3, [r3, #12]
 8016ae2:	b29b      	uxth	r3, r3
 8016ae4:	4618      	mov	r0, r3
 8016ae6:	f7f9 fd7d 	bl	80105e4 <lwip_htons>
 8016aea:	4603      	mov	r3, r0
 8016aec:	f003 0303 	and.w	r3, r3, #3
 8016af0:	2b00      	cmp	r3, #0
 8016af2:	d00b      	beq.n	8016b0c <tcp_output+0x294>
 8016af4:	2301      	movs	r3, #1
 8016af6:	e00a      	b.n	8016b0e <tcp_output+0x296>
 8016af8:	0801da98 	.word	0x0801da98
 8016afc:	0801de9c 	.word	0x0801de9c
 8016b00:	0801dafc 	.word	0x0801dafc
 8016b04:	2000ab54 	.word	0x2000ab54
 8016b08:	0801dec4 	.word	0x0801dec4
 8016b0c:	2300      	movs	r3, #0
 8016b0e:	442b      	add	r3, r5
 8016b10:	4423      	add	r3, r4
 8016b12:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8016b14:	687b      	ldr	r3, [r7, #4]
 8016b16:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8016b18:	68bb      	ldr	r3, [r7, #8]
 8016b1a:	1ad3      	subs	r3, r2, r3
 8016b1c:	2b00      	cmp	r3, #0
 8016b1e:	da02      	bge.n	8016b26 <tcp_output+0x2ae>
      pcb->snd_nxt = snd_nxt;
 8016b20:	687b      	ldr	r3, [r7, #4]
 8016b22:	68ba      	ldr	r2, [r7, #8]
 8016b24:	64da      	str	r2, [r3, #76]	; 0x4c
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 8016b26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016b28:	891b      	ldrh	r3, [r3, #8]
 8016b2a:	461c      	mov	r4, r3
 8016b2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016b2e:	68db      	ldr	r3, [r3, #12]
 8016b30:	899b      	ldrh	r3, [r3, #12]
 8016b32:	b29b      	uxth	r3, r3
 8016b34:	4618      	mov	r0, r3
 8016b36:	f7f9 fd55 	bl	80105e4 <lwip_htons>
 8016b3a:	4603      	mov	r3, r0
 8016b3c:	f003 0303 	and.w	r3, r3, #3
 8016b40:	2b00      	cmp	r3, #0
 8016b42:	d001      	beq.n	8016b48 <tcp_output+0x2d0>
 8016b44:	2301      	movs	r3, #1
 8016b46:	e000      	b.n	8016b4a <tcp_output+0x2d2>
 8016b48:	2300      	movs	r3, #0
 8016b4a:	4423      	add	r3, r4
 8016b4c:	2b00      	cmp	r3, #0
 8016b4e:	d049      	beq.n	8016be4 <tcp_output+0x36c>
      seg->next = NULL;
 8016b50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016b52:	2200      	movs	r2, #0
 8016b54:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 8016b56:	687b      	ldr	r3, [r7, #4]
 8016b58:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8016b5a:	2b00      	cmp	r3, #0
 8016b5c:	d105      	bne.n	8016b6a <tcp_output+0x2f2>
        pcb->unacked = seg;
 8016b5e:	687b      	ldr	r3, [r7, #4]
 8016b60:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8016b62:	66da      	str	r2, [r3, #108]	; 0x6c
        useg = seg;
 8016b64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016b66:	623b      	str	r3, [r7, #32]
 8016b68:	e03f      	b.n	8016bea <tcp_output+0x372>
      /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 8016b6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016b6c:	68db      	ldr	r3, [r3, #12]
 8016b6e:	685b      	ldr	r3, [r3, #4]
 8016b70:	4618      	mov	r0, r3
 8016b72:	f7f9 fd45 	bl	8010600 <lwip_htonl>
 8016b76:	4604      	mov	r4, r0
 8016b78:	6a3b      	ldr	r3, [r7, #32]
 8016b7a:	68db      	ldr	r3, [r3, #12]
 8016b7c:	685b      	ldr	r3, [r3, #4]
 8016b7e:	4618      	mov	r0, r3
 8016b80:	f7f9 fd3e 	bl	8010600 <lwip_htonl>
 8016b84:	4603      	mov	r3, r0
 8016b86:	1ae3      	subs	r3, r4, r3
 8016b88:	2b00      	cmp	r3, #0
 8016b8a:	da24      	bge.n	8016bd6 <tcp_output+0x35e>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 8016b8c:	687b      	ldr	r3, [r7, #4]
 8016b8e:	336c      	adds	r3, #108	; 0x6c
 8016b90:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8016b92:	e002      	b.n	8016b9a <tcp_output+0x322>
            TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
              cur_seg = &((*cur_seg)->next );
 8016b94:	69fb      	ldr	r3, [r7, #28]
 8016b96:	681b      	ldr	r3, [r3, #0]
 8016b98:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8016b9a:	69fb      	ldr	r3, [r7, #28]
 8016b9c:	681b      	ldr	r3, [r3, #0]
 8016b9e:	2b00      	cmp	r3, #0
 8016ba0:	d011      	beq.n	8016bc6 <tcp_output+0x34e>
            TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8016ba2:	69fb      	ldr	r3, [r7, #28]
 8016ba4:	681b      	ldr	r3, [r3, #0]
 8016ba6:	68db      	ldr	r3, [r3, #12]
 8016ba8:	685b      	ldr	r3, [r3, #4]
 8016baa:	4618      	mov	r0, r3
 8016bac:	f7f9 fd28 	bl	8010600 <lwip_htonl>
 8016bb0:	4604      	mov	r4, r0
 8016bb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016bb4:	68db      	ldr	r3, [r3, #12]
 8016bb6:	685b      	ldr	r3, [r3, #4]
 8016bb8:	4618      	mov	r0, r3
 8016bba:	f7f9 fd21 	bl	8010600 <lwip_htonl>
 8016bbe:	4603      	mov	r3, r0
 8016bc0:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 8016bc2:	2b00      	cmp	r3, #0
 8016bc4:	dbe6      	blt.n	8016b94 <tcp_output+0x31c>
          }
          seg->next = (*cur_seg);
 8016bc6:	69fb      	ldr	r3, [r7, #28]
 8016bc8:	681a      	ldr	r2, [r3, #0]
 8016bca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016bcc:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 8016bce:	69fb      	ldr	r3, [r7, #28]
 8016bd0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8016bd2:	601a      	str	r2, [r3, #0]
 8016bd4:	e009      	b.n	8016bea <tcp_output+0x372>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 8016bd6:	6a3b      	ldr	r3, [r7, #32]
 8016bd8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8016bda:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 8016bdc:	6a3b      	ldr	r3, [r7, #32]
 8016bde:	681b      	ldr	r3, [r3, #0]
 8016be0:	623b      	str	r3, [r7, #32]
 8016be2:	e002      	b.n	8016bea <tcp_output+0x372>
        }
      }
    /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 8016be4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8016be6:	f7fc f9b0 	bl	8012f4a <tcp_seg_free>
    }
    seg = pcb->unsent;
 8016bea:	687b      	ldr	r3, [r7, #4]
 8016bec:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8016bee:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 8016bf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016bf2:	2b00      	cmp	r3, #0
 8016bf4:	d015      	beq.n	8016c22 <tcp_output+0x3aa>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 8016bf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016bf8:	68db      	ldr	r3, [r3, #12]
 8016bfa:	685b      	ldr	r3, [r3, #4]
 8016bfc:	4618      	mov	r0, r3
 8016bfe:	f7f9 fcff 	bl	8010600 <lwip_htonl>
 8016c02:	4602      	mov	r2, r0
 8016c04:	687b      	ldr	r3, [r7, #4]
 8016c06:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8016c08:	1ad3      	subs	r3, r2, r3
 8016c0a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8016c0c:	8912      	ldrh	r2, [r2, #8]
 8016c0e:	4413      	add	r3, r2
  while (seg != NULL &&
 8016c10:	69ba      	ldr	r2, [r7, #24]
 8016c12:	429a      	cmp	r2, r3
 8016c14:	f4bf aedf 	bcs.w	80169d6 <tcp_output+0x15e>
  }
output_done:
 8016c18:	e003      	b.n	8016c22 <tcp_output+0x3aa>
    goto output_done;
 8016c1a:	bf00      	nop
 8016c1c:	e002      	b.n	8016c24 <tcp_output+0x3ac>
      break;
 8016c1e:	bf00      	nop
 8016c20:	e000      	b.n	8016c24 <tcp_output+0x3ac>
output_done:
 8016c22:	bf00      	nop
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 8016c24:	687b      	ldr	r3, [r7, #4]
 8016c26:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8016c28:	2b00      	cmp	r3, #0
 8016c2a:	d103      	bne.n	8016c34 <tcp_output+0x3bc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8016c2c:	687b      	ldr	r3, [r7, #4]
 8016c2e:	2200      	movs	r2, #0
 8016c30:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
  }
#endif /* TCP_OVERSIZE */

  pcb->flags &= ~TF_NAGLEMEMERR;
 8016c34:	687b      	ldr	r3, [r7, #4]
 8016c36:	7e9b      	ldrb	r3, [r3, #26]
 8016c38:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8016c3c:	b2da      	uxtb	r2, r3
 8016c3e:	687b      	ldr	r3, [r7, #4]
 8016c40:	769a      	strb	r2, [r3, #26]
  return ERR_OK;
 8016c42:	2300      	movs	r3, #0
}
 8016c44:	4618      	mov	r0, r3
 8016c46:	3728      	adds	r7, #40	; 0x28
 8016c48:	46bd      	mov	sp, r7
 8016c4a:	bdb0      	pop	{r4, r5, r7, pc}

08016c4c <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 8016c4c:	b5b0      	push	{r4, r5, r7, lr}
 8016c4e:	b08c      	sub	sp, #48	; 0x30
 8016c50:	af04      	add	r7, sp, #16
 8016c52:	60f8      	str	r0, [r7, #12]
 8016c54:	60b9      	str	r1, [r7, #8]
 8016c56:	607a      	str	r2, [r7, #4]
  err_t err;
  u16_t len;
  u32_t *opts;

  if (seg->p->ref != 1) {
 8016c58:	68fb      	ldr	r3, [r7, #12]
 8016c5a:	685b      	ldr	r3, [r3, #4]
 8016c5c:	89db      	ldrh	r3, [r3, #14]
 8016c5e:	2b01      	cmp	r3, #1
 8016c60:	d001      	beq.n	8016c66 <tcp_output_segment+0x1a>
    /* This can happen if the pbuf of this segment is still referenced by the
       netif driver due to deferred transmission. Since this function modifies
       p->len, we must not continue in this case. */
    return ERR_OK;
 8016c62:	2300      	movs	r3, #0
 8016c64:	e08b      	b.n	8016d7e <tcp_output_segment+0x132>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 8016c66:	68bb      	ldr	r3, [r7, #8]
 8016c68:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8016c6a:	68fb      	ldr	r3, [r7, #12]
 8016c6c:	68dc      	ldr	r4, [r3, #12]
 8016c6e:	4610      	mov	r0, r2
 8016c70:	f7f9 fcc6 	bl	8010600 <lwip_htonl>
 8016c74:	4603      	mov	r3, r0
 8016c76:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 8016c78:	68bb      	ldr	r3, [r7, #8]
 8016c7a:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 8016c7c:	68fb      	ldr	r3, [r7, #12]
 8016c7e:	68dc      	ldr	r4, [r3, #12]
 8016c80:	4610      	mov	r0, r2
 8016c82:	f7f9 fcaf 	bl	80105e4 <lwip_htons>
 8016c86:	4603      	mov	r3, r0
 8016c88:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8016c8a:	68bb      	ldr	r3, [r7, #8]
 8016c8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016c8e:	68ba      	ldr	r2, [r7, #8]
 8016c90:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 8016c92:	441a      	add	r2, r3
 8016c94:	68bb      	ldr	r3, [r7, #8]
 8016c96:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 8016c98:	68fb      	ldr	r3, [r7, #12]
 8016c9a:	68db      	ldr	r3, [r3, #12]
 8016c9c:	3314      	adds	r3, #20
 8016c9e:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 8016ca0:	68fb      	ldr	r3, [r7, #12]
 8016ca2:	7a9b      	ldrb	r3, [r3, #10]
 8016ca4:	f003 0301 	and.w	r3, r3, #1
 8016ca8:	2b00      	cmp	r3, #0
 8016caa:	d014      	beq.n	8016cd6 <tcp_output_segment+0x8a>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss(TCP_MSS, &pcb->local_ip, &pcb->remote_ip);
 8016cac:	68bb      	ldr	r3, [r7, #8]
 8016cae:	3304      	adds	r3, #4
 8016cb0:	4619      	mov	r1, r3
 8016cb2:	f44f 7006 	mov.w	r0, #536	; 0x218
 8016cb6:	f7fc fc73 	bl	80135a0 <tcp_eff_send_mss_impl>
 8016cba:	4603      	mov	r3, r0
 8016cbc:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 8016cbe:	8b7b      	ldrh	r3, [r7, #26]
 8016cc0:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 8016cc4:	4618      	mov	r0, r3
 8016cc6:	f7f9 fc9b 	bl	8010600 <lwip_htonl>
 8016cca:	4602      	mov	r2, r0
 8016ccc:	69fb      	ldr	r3, [r7, #28]
 8016cce:	601a      	str	r2, [r3, #0]
    opts += 1;
 8016cd0:	69fb      	ldr	r3, [r7, #28]
 8016cd2:	3304      	adds	r3, #4
 8016cd4:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 8016cd6:	68bb      	ldr	r3, [r7, #8]
 8016cd8:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8016cdc:	2b00      	cmp	r3, #0
 8016cde:	da02      	bge.n	8016ce6 <tcp_output_segment+0x9a>
    pcb->rtime = 0;
 8016ce0:	68bb      	ldr	r3, [r7, #8]
 8016ce2:	2200      	movs	r2, #0
 8016ce4:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 8016ce6:	68bb      	ldr	r3, [r7, #8]
 8016ce8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8016cea:	2b00      	cmp	r3, #0
 8016cec:	d10c      	bne.n	8016d08 <tcp_output_segment+0xbc>
    pcb->rttest = tcp_ticks;
 8016cee:	4b26      	ldr	r3, [pc, #152]	; (8016d88 <tcp_output_segment+0x13c>)
 8016cf0:	681a      	ldr	r2, [r3, #0]
 8016cf2:	68bb      	ldr	r3, [r7, #8]
 8016cf4:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 8016cf6:	68fb      	ldr	r3, [r7, #12]
 8016cf8:	68db      	ldr	r3, [r3, #12]
 8016cfa:	685b      	ldr	r3, [r3, #4]
 8016cfc:	4618      	mov	r0, r3
 8016cfe:	f7f9 fc7f 	bl	8010600 <lwip_htonl>
 8016d02:	4602      	mov	r2, r0
 8016d04:	68bb      	ldr	r3, [r7, #8]
 8016d06:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
          lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
          seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 8016d08:	68fb      	ldr	r3, [r7, #12]
 8016d0a:	68db      	ldr	r3, [r3, #12]
 8016d0c:	461a      	mov	r2, r3
 8016d0e:	68fb      	ldr	r3, [r7, #12]
 8016d10:	685b      	ldr	r3, [r3, #4]
 8016d12:	685b      	ldr	r3, [r3, #4]
 8016d14:	1ad3      	subs	r3, r2, r3
 8016d16:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 8016d18:	68fb      	ldr	r3, [r7, #12]
 8016d1a:	685b      	ldr	r3, [r3, #4]
 8016d1c:	8959      	ldrh	r1, [r3, #10]
 8016d1e:	68fb      	ldr	r3, [r7, #12]
 8016d20:	685b      	ldr	r3, [r3, #4]
 8016d22:	8b3a      	ldrh	r2, [r7, #24]
 8016d24:	1a8a      	subs	r2, r1, r2
 8016d26:	b292      	uxth	r2, r2
 8016d28:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 8016d2a:	68fb      	ldr	r3, [r7, #12]
 8016d2c:	685b      	ldr	r3, [r3, #4]
 8016d2e:	8919      	ldrh	r1, [r3, #8]
 8016d30:	68fb      	ldr	r3, [r7, #12]
 8016d32:	685b      	ldr	r3, [r3, #4]
 8016d34:	8b3a      	ldrh	r2, [r7, #24]
 8016d36:	1a8a      	subs	r2, r1, r2
 8016d38:	b292      	uxth	r2, r2
 8016d3a:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 8016d3c:	68fb      	ldr	r3, [r7, #12]
 8016d3e:	685b      	ldr	r3, [r3, #4]
 8016d40:	68fa      	ldr	r2, [r7, #12]
 8016d42:	68d2      	ldr	r2, [r2, #12]
 8016d44:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 8016d46:	68fb      	ldr	r3, [r7, #12]
 8016d48:	68db      	ldr	r3, [r3, #12]
 8016d4a:	2200      	movs	r2, #0
 8016d4c:	741a      	strb	r2, [r3, #16]
 8016d4e:	2200      	movs	r2, #0
 8016d50:	745a      	strb	r2, [r3, #17]
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 8016d52:	68fb      	ldr	r3, [r7, #12]
 8016d54:	6858      	ldr	r0, [r3, #4]
 8016d56:	68b9      	ldr	r1, [r7, #8]
 8016d58:	68bb      	ldr	r3, [r7, #8]
 8016d5a:	1d1c      	adds	r4, r3, #4
 8016d5c:	68bb      	ldr	r3, [r7, #8]
 8016d5e:	7a9d      	ldrb	r5, [r3, #10]
 8016d60:	68bb      	ldr	r3, [r7, #8]
 8016d62:	7a5b      	ldrb	r3, [r3, #9]
 8016d64:	687a      	ldr	r2, [r7, #4]
 8016d66:	9202      	str	r2, [sp, #8]
 8016d68:	2206      	movs	r2, #6
 8016d6a:	9201      	str	r2, [sp, #4]
 8016d6c:	9300      	str	r3, [sp, #0]
 8016d6e:	462b      	mov	r3, r5
 8016d70:	4622      	mov	r2, r4
 8016d72:	f002 f8b1 	bl	8018ed8 <ip4_output_if>
 8016d76:	4603      	mov	r3, r0
 8016d78:	75fb      	strb	r3, [r7, #23]
    pcb->tos, IP_PROTO_TCP, netif);
  NETIF_SET_HWADDRHINT(netif, NULL);
  return err;
 8016d7a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8016d7e:	4618      	mov	r0, r3
 8016d80:	3720      	adds	r7, #32
 8016d82:	46bd      	mov	sp, r7
 8016d84:	bdb0      	pop	{r4, r5, r7, pc}
 8016d86:	bf00      	nop
 8016d88:	2000ab44 	.word	0x2000ab44

08016d8c <tcp_rst>:
 */
void
tcp_rst(u32_t seqno, u32_t ackno,
  const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
  u16_t local_port, u16_t remote_port)
{
 8016d8c:	b580      	push	{r7, lr}
 8016d8e:	b08c      	sub	sp, #48	; 0x30
 8016d90:	af04      	add	r7, sp, #16
 8016d92:	60f8      	str	r0, [r7, #12]
 8016d94:	60b9      	str	r1, [r7, #8]
 8016d96:	607a      	str	r2, [r7, #4]
 8016d98:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  struct tcp_hdr *tcphdr;
  struct netif *netif;
  p = pbuf_alloc(PBUF_IP, TCP_HLEN, PBUF_RAM);
 8016d9a:	2200      	movs	r2, #0
 8016d9c:	2114      	movs	r1, #20
 8016d9e:	2001      	movs	r0, #1
 8016da0:	f7fa fa48 	bl	8011234 <pbuf_alloc>
 8016da4:	61f8      	str	r0, [r7, #28]
  if (p == NULL) {
 8016da6:	69fb      	ldr	r3, [r7, #28]
 8016da8:	2b00      	cmp	r3, #0
 8016daa:	d05b      	beq.n	8016e64 <tcp_rst+0xd8>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 8016dac:	69fb      	ldr	r3, [r7, #28]
 8016dae:	895b      	ldrh	r3, [r3, #10]
 8016db0:	2b13      	cmp	r3, #19
 8016db2:	d806      	bhi.n	8016dc2 <tcp_rst+0x36>
 8016db4:	4b2d      	ldr	r3, [pc, #180]	; (8016e6c <tcp_rst+0xe0>)
 8016db6:	f240 524d 	movw	r2, #1357	; 0x54d
 8016dba:	492d      	ldr	r1, [pc, #180]	; (8016e70 <tcp_rst+0xe4>)
 8016dbc:	482d      	ldr	r0, [pc, #180]	; (8016e74 <tcp_rst+0xe8>)
 8016dbe:	f004 f817 	bl	801adf0 <iprintf>
              (p->len >= sizeof(struct tcp_hdr)));

  tcphdr = (struct tcp_hdr *)p->payload;
 8016dc2:	69fb      	ldr	r3, [r7, #28]
 8016dc4:	685b      	ldr	r3, [r3, #4]
 8016dc6:	61bb      	str	r3, [r7, #24]
  tcphdr->src = lwip_htons(local_port);
 8016dc8:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8016dca:	4618      	mov	r0, r3
 8016dcc:	f7f9 fc0a 	bl	80105e4 <lwip_htons>
 8016dd0:	4603      	mov	r3, r0
 8016dd2:	461a      	mov	r2, r3
 8016dd4:	69bb      	ldr	r3, [r7, #24]
 8016dd6:	801a      	strh	r2, [r3, #0]
  tcphdr->dest = lwip_htons(remote_port);
 8016dd8:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8016dda:	4618      	mov	r0, r3
 8016ddc:	f7f9 fc02 	bl	80105e4 <lwip_htons>
 8016de0:	4603      	mov	r3, r0
 8016de2:	461a      	mov	r2, r3
 8016de4:	69bb      	ldr	r3, [r7, #24]
 8016de6:	805a      	strh	r2, [r3, #2]
  tcphdr->seqno = lwip_htonl(seqno);
 8016de8:	68f8      	ldr	r0, [r7, #12]
 8016dea:	f7f9 fc09 	bl	8010600 <lwip_htonl>
 8016dee:	4602      	mov	r2, r0
 8016df0:	69bb      	ldr	r3, [r7, #24]
 8016df2:	605a      	str	r2, [r3, #4]
  tcphdr->ackno = lwip_htonl(ackno);
 8016df4:	68b8      	ldr	r0, [r7, #8]
 8016df6:	f7f9 fc03 	bl	8010600 <lwip_htonl>
 8016dfa:	4602      	mov	r2, r0
 8016dfc:	69bb      	ldr	r3, [r7, #24]
 8016dfe:	609a      	str	r2, [r3, #8]
  TCPH_HDRLEN_FLAGS_SET(tcphdr, TCP_HLEN/4, TCP_RST | TCP_ACK);
 8016e00:	f245 0014 	movw	r0, #20500	; 0x5014
 8016e04:	f7f9 fbee 	bl	80105e4 <lwip_htons>
 8016e08:	4603      	mov	r3, r0
 8016e0a:	461a      	mov	r2, r3
 8016e0c:	69bb      	ldr	r3, [r7, #24]
 8016e0e:	819a      	strh	r2, [r3, #12]
#if LWIP_WND_SCALE
  tcphdr->wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  tcphdr->wnd = PP_HTONS(TCP_WND);
 8016e10:	69bb      	ldr	r3, [r7, #24]
 8016e12:	2200      	movs	r2, #0
 8016e14:	f042 0208 	orr.w	r2, r2, #8
 8016e18:	739a      	strb	r2, [r3, #14]
 8016e1a:	2200      	movs	r2, #0
 8016e1c:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 8016e20:	73da      	strb	r2, [r3, #15]
#endif
  tcphdr->chksum = 0;
 8016e22:	69bb      	ldr	r3, [r7, #24]
 8016e24:	2200      	movs	r2, #0
 8016e26:	741a      	strb	r2, [r3, #16]
 8016e28:	2200      	movs	r2, #0
 8016e2a:	745a      	strb	r2, [r3, #17]
  tcphdr->urgp = 0;
 8016e2c:	69bb      	ldr	r3, [r7, #24]
 8016e2e:	2200      	movs	r2, #0
 8016e30:	749a      	strb	r2, [r3, #18]
 8016e32:	2200      	movs	r2, #0
 8016e34:	74da      	strb	r2, [r3, #19]

  TCP_STATS_INC(tcp.xmit);
  MIB2_STATS_INC(mib2.tcpoutrsts);

  netif = ip_route(local_ip, remote_ip);
 8016e36:	6838      	ldr	r0, [r7, #0]
 8016e38:	f001 fea6 	bl	8018b88 <ip4_route>
 8016e3c:	6178      	str	r0, [r7, #20]
  if (netif != NULL) {
 8016e3e:	697b      	ldr	r3, [r7, #20]
 8016e40:	2b00      	cmp	r3, #0
 8016e42:	d00b      	beq.n	8016e5c <tcp_rst+0xd0>
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        local_ip, remote_ip);
    }
#endif
    /* Send output with hardcoded TTL/HL since we have no access to the pcb */
    ip_output_if(p, local_ip, remote_ip, TCP_TTL, 0, IP_PROTO_TCP, netif);
 8016e44:	697b      	ldr	r3, [r7, #20]
 8016e46:	9302      	str	r3, [sp, #8]
 8016e48:	2306      	movs	r3, #6
 8016e4a:	9301      	str	r3, [sp, #4]
 8016e4c:	2300      	movs	r3, #0
 8016e4e:	9300      	str	r3, [sp, #0]
 8016e50:	23ff      	movs	r3, #255	; 0xff
 8016e52:	683a      	ldr	r2, [r7, #0]
 8016e54:	6879      	ldr	r1, [r7, #4]
 8016e56:	69f8      	ldr	r0, [r7, #28]
 8016e58:	f002 f83e 	bl	8018ed8 <ip4_output_if>
  }
  pbuf_free(p);
 8016e5c:	69f8      	ldr	r0, [r7, #28]
 8016e5e:	f7fa fd5b 	bl	8011918 <pbuf_free>
 8016e62:	e000      	b.n	8016e66 <tcp_rst+0xda>
    return;
 8016e64:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 8016e66:	3720      	adds	r7, #32
 8016e68:	46bd      	mov	sp, r7
 8016e6a:	bd80      	pop	{r7, pc}
 8016e6c:	0801da98 	.word	0x0801da98
 8016e70:	0801dacc 	.word	0x0801dacc
 8016e74:	0801dafc 	.word	0x0801dafc

08016e78 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 8016e78:	b580      	push	{r7, lr}
 8016e7a:	b084      	sub	sp, #16
 8016e7c:	af00      	add	r7, sp, #0
 8016e7e:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  if (pcb->unacked == NULL) {
 8016e80:	687b      	ldr	r3, [r7, #4]
 8016e82:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8016e84:	2b00      	cmp	r3, #0
 8016e86:	d029      	beq.n	8016edc <tcp_rexmit_rto+0x64>
    return;
  }

  /* Move all unacked segments to the head of the unsent queue */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next);
 8016e88:	687b      	ldr	r3, [r7, #4]
 8016e8a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8016e8c:	60fb      	str	r3, [r7, #12]
 8016e8e:	e002      	b.n	8016e96 <tcp_rexmit_rto+0x1e>
 8016e90:	68fb      	ldr	r3, [r7, #12]
 8016e92:	681b      	ldr	r3, [r3, #0]
 8016e94:	60fb      	str	r3, [r7, #12]
 8016e96:	68fb      	ldr	r3, [r7, #12]
 8016e98:	681b      	ldr	r3, [r3, #0]
 8016e9a:	2b00      	cmp	r3, #0
 8016e9c:	d1f8      	bne.n	8016e90 <tcp_rexmit_rto+0x18>
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 8016e9e:	687b      	ldr	r3, [r7, #4]
 8016ea0:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8016ea2:	68fb      	ldr	r3, [r7, #12]
 8016ea4:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 8016ea6:	687b      	ldr	r3, [r7, #4]
 8016ea8:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8016eaa:	687b      	ldr	r3, [r7, #4]
 8016eac:	669a      	str	r2, [r3, #104]	; 0x68
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 8016eae:	687b      	ldr	r3, [r7, #4]
 8016eb0:	2200      	movs	r2, #0
 8016eb2:	66da      	str	r2, [r3, #108]	; 0x6c

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 8016eb4:	687b      	ldr	r3, [r7, #4]
 8016eb6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8016eba:	2bff      	cmp	r3, #255	; 0xff
 8016ebc:	d007      	beq.n	8016ece <tcp_rexmit_rto+0x56>
    ++pcb->nrtx;
 8016ebe:	687b      	ldr	r3, [r7, #4]
 8016ec0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8016ec4:	3301      	adds	r3, #1
 8016ec6:	b2da      	uxtb	r2, r3
 8016ec8:	687b      	ldr	r3, [r7, #4]
 8016eca:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 8016ece:	687b      	ldr	r3, [r7, #4]
 8016ed0:	2200      	movs	r2, #0
 8016ed2:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission */
  tcp_output(pcb);
 8016ed4:	6878      	ldr	r0, [r7, #4]
 8016ed6:	f7ff fccf 	bl	8016878 <tcp_output>
 8016eda:	e000      	b.n	8016ede <tcp_rexmit_rto+0x66>
    return;
 8016edc:	bf00      	nop
}
 8016ede:	3710      	adds	r7, #16
 8016ee0:	46bd      	mov	sp, r7
 8016ee2:	bd80      	pop	{r7, pc}

08016ee4 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit(struct tcp_pcb *pcb)
{
 8016ee4:	b590      	push	{r4, r7, lr}
 8016ee6:	b085      	sub	sp, #20
 8016ee8:	af00      	add	r7, sp, #0
 8016eea:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  if (pcb->unacked == NULL) {
 8016eec:	687b      	ldr	r3, [r7, #4]
 8016eee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8016ef0:	2b00      	cmp	r3, #0
 8016ef2:	d043      	beq.n	8016f7c <tcp_rexmit+0x98>
    return;
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  seg = pcb->unacked;
 8016ef4:	687b      	ldr	r3, [r7, #4]
 8016ef6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8016ef8:	60bb      	str	r3, [r7, #8]
  pcb->unacked = seg->next;
 8016efa:	68bb      	ldr	r3, [r7, #8]
 8016efc:	681a      	ldr	r2, [r3, #0]
 8016efe:	687b      	ldr	r3, [r7, #4]
 8016f00:	66da      	str	r2, [r3, #108]	; 0x6c

  cur_seg = &(pcb->unsent);
 8016f02:	687b      	ldr	r3, [r7, #4]
 8016f04:	3368      	adds	r3, #104	; 0x68
 8016f06:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8016f08:	e002      	b.n	8016f10 <tcp_rexmit+0x2c>
    TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
      cur_seg = &((*cur_seg)->next );
 8016f0a:	68fb      	ldr	r3, [r7, #12]
 8016f0c:	681b      	ldr	r3, [r3, #0]
 8016f0e:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8016f10:	68fb      	ldr	r3, [r7, #12]
 8016f12:	681b      	ldr	r3, [r3, #0]
 8016f14:	2b00      	cmp	r3, #0
 8016f16:	d011      	beq.n	8016f3c <tcp_rexmit+0x58>
    TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8016f18:	68fb      	ldr	r3, [r7, #12]
 8016f1a:	681b      	ldr	r3, [r3, #0]
 8016f1c:	68db      	ldr	r3, [r3, #12]
 8016f1e:	685b      	ldr	r3, [r3, #4]
 8016f20:	4618      	mov	r0, r3
 8016f22:	f7f9 fb6d 	bl	8010600 <lwip_htonl>
 8016f26:	4604      	mov	r4, r0
 8016f28:	68bb      	ldr	r3, [r7, #8]
 8016f2a:	68db      	ldr	r3, [r3, #12]
 8016f2c:	685b      	ldr	r3, [r3, #4]
 8016f2e:	4618      	mov	r0, r3
 8016f30:	f7f9 fb66 	bl	8010600 <lwip_htonl>
 8016f34:	4603      	mov	r3, r0
 8016f36:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 8016f38:	2b00      	cmp	r3, #0
 8016f3a:	dbe6      	blt.n	8016f0a <tcp_rexmit+0x26>
  }
  seg->next = *cur_seg;
 8016f3c:	68fb      	ldr	r3, [r7, #12]
 8016f3e:	681a      	ldr	r2, [r3, #0]
 8016f40:	68bb      	ldr	r3, [r7, #8]
 8016f42:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 8016f44:	68fb      	ldr	r3, [r7, #12]
 8016f46:	68ba      	ldr	r2, [r7, #8]
 8016f48:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 8016f4a:	68bb      	ldr	r3, [r7, #8]
 8016f4c:	681b      	ldr	r3, [r3, #0]
 8016f4e:	2b00      	cmp	r3, #0
 8016f50:	d103      	bne.n	8016f5a <tcp_rexmit+0x76>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8016f52:	687b      	ldr	r3, [r7, #4]
 8016f54:	2200      	movs	r2, #0
 8016f56:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 8016f5a:	687b      	ldr	r3, [r7, #4]
 8016f5c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8016f60:	2bff      	cmp	r3, #255	; 0xff
 8016f62:	d007      	beq.n	8016f74 <tcp_rexmit+0x90>
    ++pcb->nrtx;
 8016f64:	687b      	ldr	r3, [r7, #4]
 8016f66:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8016f6a:	3301      	adds	r3, #1
 8016f6c:	b2da      	uxtb	r2, r3
 8016f6e:	687b      	ldr	r3, [r7, #4]
 8016f70:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 8016f74:	687b      	ldr	r3, [r7, #4]
 8016f76:	2200      	movs	r2, #0
 8016f78:	635a      	str	r2, [r3, #52]	; 0x34
 8016f7a:	e000      	b.n	8016f7e <tcp_rexmit+0x9a>
    return;
 8016f7c:	bf00      	nop

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
}
 8016f7e:	3714      	adds	r7, #20
 8016f80:	46bd      	mov	sp, r7
 8016f82:	bd90      	pop	{r4, r7, pc}

08016f84 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 8016f84:	b580      	push	{r7, lr}
 8016f86:	b082      	sub	sp, #8
 8016f88:	af00      	add	r7, sp, #0
 8016f8a:	6078      	str	r0, [r7, #4]
  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 8016f8c:	687b      	ldr	r3, [r7, #4]
 8016f8e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8016f90:	2b00      	cmp	r3, #0
 8016f92:	d04a      	beq.n	801702a <tcp_rexmit_fast+0xa6>
 8016f94:	687b      	ldr	r3, [r7, #4]
 8016f96:	7e9b      	ldrb	r3, [r3, #26]
 8016f98:	f003 0304 	and.w	r3, r3, #4
 8016f9c:	2b00      	cmp	r3, #0
 8016f9e:	d144      	bne.n	801702a <tcp_rexmit_fast+0xa6>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    tcp_rexmit(pcb);
 8016fa0:	6878      	ldr	r0, [r7, #4]
 8016fa2:	f7ff ff9f 	bl	8016ee4 <tcp_rexmit>

    /* Set ssthresh to half of the minimum of the current
     * cwnd and the advertised window */
    pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 8016fa6:	687b      	ldr	r3, [r7, #4]
 8016fa8:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8016fac:	687b      	ldr	r3, [r7, #4]
 8016fae:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8016fb2:	429a      	cmp	r2, r3
 8016fb4:	d207      	bcs.n	8016fc6 <tcp_rexmit_fast+0x42>
 8016fb6:	687b      	ldr	r3, [r7, #4]
 8016fb8:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8016fbc:	0fda      	lsrs	r2, r3, #31
 8016fbe:	4413      	add	r3, r2
 8016fc0:	105b      	asrs	r3, r3, #1
 8016fc2:	b29b      	uxth	r3, r3
 8016fc4:	e006      	b.n	8016fd4 <tcp_rexmit_fast+0x50>
 8016fc6:	687b      	ldr	r3, [r7, #4]
 8016fc8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8016fcc:	0fda      	lsrs	r2, r3, #31
 8016fce:	4413      	add	r3, r2
 8016fd0:	105b      	asrs	r3, r3, #1
 8016fd2:	b29b      	uxth	r3, r3
 8016fd4:	687a      	ldr	r2, [r7, #4]
 8016fd6:	f8a2 304a 	strh.w	r3, [r2, #74]	; 0x4a

    /* The minimum value for ssthresh should be 2 MSS */
    if (pcb->ssthresh < (2U * pcb->mss)) {
 8016fda:	687b      	ldr	r3, [r7, #4]
 8016fdc:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8016fe0:	461a      	mov	r2, r3
 8016fe2:	687b      	ldr	r3, [r7, #4]
 8016fe4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8016fe6:	005b      	lsls	r3, r3, #1
 8016fe8:	429a      	cmp	r2, r3
 8016fea:	d206      	bcs.n	8016ffa <tcp_rexmit_fast+0x76>
      LWIP_DEBUGF(TCP_FR_DEBUG,
                  ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                   " should be min 2 mss %"U16_F"...\n",
                   pcb->ssthresh, (u16_t)(2*pcb->mss)));
      pcb->ssthresh = 2*pcb->mss;
 8016fec:	687b      	ldr	r3, [r7, #4]
 8016fee:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8016ff0:	005b      	lsls	r3, r3, #1
 8016ff2:	b29a      	uxth	r2, r3
 8016ff4:	687b      	ldr	r3, [r7, #4]
 8016ff6:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
    }

    pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 8016ffa:	687b      	ldr	r3, [r7, #4]
 8016ffc:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8017000:	687b      	ldr	r3, [r7, #4]
 8017002:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8017004:	4619      	mov	r1, r3
 8017006:	0049      	lsls	r1, r1, #1
 8017008:	440b      	add	r3, r1
 801700a:	b29b      	uxth	r3, r3
 801700c:	4413      	add	r3, r2
 801700e:	b29a      	uxth	r2, r3
 8017010:	687b      	ldr	r3, [r7, #4]
 8017012:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->flags |= TF_INFR;
 8017016:	687b      	ldr	r3, [r7, #4]
 8017018:	7e9b      	ldrb	r3, [r3, #26]
 801701a:	f043 0304 	orr.w	r3, r3, #4
 801701e:	b2da      	uxtb	r2, r3
 8017020:	687b      	ldr	r3, [r7, #4]
 8017022:	769a      	strb	r2, [r3, #26]

    /* Reset the retransmission timer to prevent immediate rto retransmissions */
    pcb->rtime = 0;
 8017024:	687b      	ldr	r3, [r7, #4]
 8017026:	2200      	movs	r2, #0
 8017028:	861a      	strh	r2, [r3, #48]	; 0x30
  }
}
 801702a:	bf00      	nop
 801702c:	3708      	adds	r7, #8
 801702e:	46bd      	mov	sp, r7
 8017030:	bd80      	pop	{r7, pc}

08017032 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 8017032:	b580      	push	{r7, lr}
 8017034:	b08a      	sub	sp, #40	; 0x28
 8017036:	af04      	add	r7, sp, #16
 8017038:	6078      	str	r0, [r7, #4]
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, 0, 0, lwip_htonl(pcb->snd_nxt - 1));
 801703a:	687b      	ldr	r3, [r7, #4]
 801703c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801703e:	3b01      	subs	r3, #1
 8017040:	4618      	mov	r0, r3
 8017042:	f7f9 fadd 	bl	8010600 <lwip_htonl>
 8017046:	4603      	mov	r3, r0
 8017048:	2200      	movs	r2, #0
 801704a:	2100      	movs	r1, #0
 801704c:	6878      	ldr	r0, [r7, #4]
 801704e:	f7fe fd45 	bl	8015adc <tcp_output_alloc_header>
 8017052:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8017054:	693b      	ldr	r3, [r7, #16]
 8017056:	2b00      	cmp	r3, #0
 8017058:	d102      	bne.n	8017060 <tcp_keepalive+0x2e>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 801705a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801705e:	e021      	b.n	80170a4 <tcp_keepalive+0x72>
  }
  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 8017060:	687b      	ldr	r3, [r7, #4]
 8017062:	3304      	adds	r3, #4
 8017064:	4618      	mov	r0, r3
 8017066:	f001 fd8f 	bl	8018b88 <ip4_route>
 801706a:	60f8      	str	r0, [r7, #12]
  if (netif == NULL) {
 801706c:	68fb      	ldr	r3, [r7, #12]
 801706e:	2b00      	cmp	r3, #0
 8017070:	d102      	bne.n	8017078 <tcp_keepalive+0x46>
    err = ERR_RTE;
 8017072:	23fc      	movs	r3, #252	; 0xfc
 8017074:	75fb      	strb	r3, [r7, #23]
 8017076:	e010      	b.n	801709a <tcp_keepalive+0x68>
#endif /* CHECKSUM_GEN_TCP */
    TCP_STATS_INC(tcp.xmit);

    /* Send output to IP */
    NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
    err = ip_output_if(p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl, 0, IP_PROTO_TCP, netif);
 8017078:	6879      	ldr	r1, [r7, #4]
 801707a:	687b      	ldr	r3, [r7, #4]
 801707c:	1d1a      	adds	r2, r3, #4
 801707e:	687b      	ldr	r3, [r7, #4]
 8017080:	7a98      	ldrb	r0, [r3, #10]
 8017082:	68fb      	ldr	r3, [r7, #12]
 8017084:	9302      	str	r3, [sp, #8]
 8017086:	2306      	movs	r3, #6
 8017088:	9301      	str	r3, [sp, #4]
 801708a:	2300      	movs	r3, #0
 801708c:	9300      	str	r3, [sp, #0]
 801708e:	4603      	mov	r3, r0
 8017090:	6938      	ldr	r0, [r7, #16]
 8017092:	f001 ff21 	bl	8018ed8 <ip4_output_if>
 8017096:	4603      	mov	r3, r0
 8017098:	75fb      	strb	r3, [r7, #23]
    NETIF_SET_HWADDRHINT(netif, NULL);
  }
  pbuf_free(p);
 801709a:	6938      	ldr	r0, [r7, #16]
 801709c:	f7fa fc3c 	bl	8011918 <pbuf_free>

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 80170a0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80170a4:	4618      	mov	r0, r3
 80170a6:	3718      	adds	r7, #24
 80170a8:	46bd      	mov	sp, r7
 80170aa:	bd80      	pop	{r7, pc}

080170ac <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 80170ac:	b590      	push	{r4, r7, lr}
 80170ae:	b08f      	sub	sp, #60	; 0x3c
 80170b0:	af04      	add	r7, sp, #16
 80170b2:	6078      	str	r0, [r7, #4]
  LWIP_DEBUGF(TCP_DEBUG,
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  seg = pcb->unacked;
 80170b4:	687b      	ldr	r3, [r7, #4]
 80170b6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80170b8:	623b      	str	r3, [r7, #32]

  if (seg == NULL) {
 80170ba:	6a3b      	ldr	r3, [r7, #32]
 80170bc:	2b00      	cmp	r3, #0
 80170be:	d102      	bne.n	80170c6 <tcp_zero_window_probe+0x1a>
    seg = pcb->unsent;
 80170c0:	687b      	ldr	r3, [r7, #4]
 80170c2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80170c4:	623b      	str	r3, [r7, #32]
  }
  if (seg == NULL) {
 80170c6:	6a3b      	ldr	r3, [r7, #32]
 80170c8:	2b00      	cmp	r3, #0
 80170ca:	d101      	bne.n	80170d0 <tcp_zero_window_probe+0x24>
    /* nothing to send, zero window probe not needed */
    return ERR_OK;
 80170cc:	2300      	movs	r3, #0
 80170ce:	e085      	b.n	80171dc <tcp_zero_window_probe+0x130>
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 80170d0:	6a3b      	ldr	r3, [r7, #32]
 80170d2:	68db      	ldr	r3, [r3, #12]
 80170d4:	899b      	ldrh	r3, [r3, #12]
 80170d6:	b29b      	uxth	r3, r3
 80170d8:	4618      	mov	r0, r3
 80170da:	f7f9 fa83 	bl	80105e4 <lwip_htons>
 80170de:	4603      	mov	r3, r0
 80170e0:	f003 0301 	and.w	r3, r3, #1
 80170e4:	2b00      	cmp	r3, #0
 80170e6:	d005      	beq.n	80170f4 <tcp_zero_window_probe+0x48>
 80170e8:	6a3b      	ldr	r3, [r7, #32]
 80170ea:	891b      	ldrh	r3, [r3, #8]
 80170ec:	2b00      	cmp	r3, #0
 80170ee:	d101      	bne.n	80170f4 <tcp_zero_window_probe+0x48>
 80170f0:	2301      	movs	r3, #1
 80170f2:	e000      	b.n	80170f6 <tcp_zero_window_probe+0x4a>
 80170f4:	2300      	movs	r3, #0
 80170f6:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 80170f8:	7ffb      	ldrb	r3, [r7, #31]
 80170fa:	2b00      	cmp	r3, #0
 80170fc:	bf0c      	ite	eq
 80170fe:	2301      	moveq	r3, #1
 8017100:	2300      	movne	r3, #0
 8017102:	b2db      	uxtb	r3, r3
 8017104:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, 0, len, seg->tcphdr->seqno);
 8017106:	6a3b      	ldr	r3, [r7, #32]
 8017108:	68db      	ldr	r3, [r3, #12]
 801710a:	685b      	ldr	r3, [r3, #4]
 801710c:	8bba      	ldrh	r2, [r7, #28]
 801710e:	2100      	movs	r1, #0
 8017110:	6878      	ldr	r0, [r7, #4]
 8017112:	f7fe fce3 	bl	8015adc <tcp_output_alloc_header>
 8017116:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 8017118:	69bb      	ldr	r3, [r7, #24]
 801711a:	2b00      	cmp	r3, #0
 801711c:	d102      	bne.n	8017124 <tcp_zero_window_probe+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 801711e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8017122:	e05b      	b.n	80171dc <tcp_zero_window_probe+0x130>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 8017124:	69bb      	ldr	r3, [r7, #24]
 8017126:	685b      	ldr	r3, [r3, #4]
 8017128:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 801712a:	7ffb      	ldrb	r3, [r7, #31]
 801712c:	2b00      	cmp	r3, #0
 801712e:	d00e      	beq.n	801714e <tcp_zero_window_probe+0xa2>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 8017130:	697b      	ldr	r3, [r7, #20]
 8017132:	899b      	ldrh	r3, [r3, #12]
 8017134:	b29b      	uxth	r3, r3
 8017136:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 801713a:	b29c      	uxth	r4, r3
 801713c:	2011      	movs	r0, #17
 801713e:	f7f9 fa51 	bl	80105e4 <lwip_htons>
 8017142:	4603      	mov	r3, r0
 8017144:	4323      	orrs	r3, r4
 8017146:	b29a      	uxth	r2, r3
 8017148:	697b      	ldr	r3, [r7, #20]
 801714a:	819a      	strh	r2, [r3, #12]
 801714c:	e010      	b.n	8017170 <tcp_zero_window_probe+0xc4>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 801714e:	69bb      	ldr	r3, [r7, #24]
 8017150:	685b      	ldr	r3, [r3, #4]
 8017152:	3314      	adds	r3, #20
 8017154:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 8017156:	6a3b      	ldr	r3, [r7, #32]
 8017158:	6858      	ldr	r0, [r3, #4]
 801715a:	6a3b      	ldr	r3, [r7, #32]
 801715c:	685b      	ldr	r3, [r3, #4]
 801715e:	891a      	ldrh	r2, [r3, #8]
 8017160:	6a3b      	ldr	r3, [r7, #32]
 8017162:	891b      	ldrh	r3, [r3, #8]
 8017164:	1ad3      	subs	r3, r2, r3
 8017166:	b29b      	uxth	r3, r3
 8017168:	2201      	movs	r2, #1
 801716a:	6939      	ldr	r1, [r7, #16]
 801716c:	f7fa fdd0 	bl	8011d10 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 8017170:	6a3b      	ldr	r3, [r7, #32]
 8017172:	68db      	ldr	r3, [r3, #12]
 8017174:	685b      	ldr	r3, [r3, #4]
 8017176:	4618      	mov	r0, r3
 8017178:	f7f9 fa42 	bl	8010600 <lwip_htonl>
 801717c:	4603      	mov	r3, r0
 801717e:	3301      	adds	r3, #1
 8017180:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8017182:	687b      	ldr	r3, [r7, #4]
 8017184:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8017186:	68fb      	ldr	r3, [r7, #12]
 8017188:	1ad3      	subs	r3, r2, r3
 801718a:	2b00      	cmp	r3, #0
 801718c:	da02      	bge.n	8017194 <tcp_zero_window_probe+0xe8>
    pcb->snd_nxt = snd_nxt;
 801718e:	687b      	ldr	r3, [r7, #4]
 8017190:	68fa      	ldr	r2, [r7, #12]
 8017192:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 8017194:	687b      	ldr	r3, [r7, #4]
 8017196:	3304      	adds	r3, #4
 8017198:	4618      	mov	r0, r3
 801719a:	f001 fcf5 	bl	8018b88 <ip4_route>
 801719e:	60b8      	str	r0, [r7, #8]
  if (netif == NULL) {
 80171a0:	68bb      	ldr	r3, [r7, #8]
 80171a2:	2b00      	cmp	r3, #0
 80171a4:	d103      	bne.n	80171ae <tcp_zero_window_probe+0x102>
    err = ERR_RTE;
 80171a6:	23fc      	movs	r3, #252	; 0xfc
 80171a8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80171ac:	e011      	b.n	80171d2 <tcp_zero_window_probe+0x126>
#endif
    TCP_STATS_INC(tcp.xmit);

    /* Send output to IP */
    NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
    err = ip_output_if(p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 80171ae:	6879      	ldr	r1, [r7, #4]
 80171b0:	687b      	ldr	r3, [r7, #4]
 80171b2:	1d1a      	adds	r2, r3, #4
 80171b4:	687b      	ldr	r3, [r7, #4]
 80171b6:	7a98      	ldrb	r0, [r3, #10]
 80171b8:	68bb      	ldr	r3, [r7, #8]
 80171ba:	9302      	str	r3, [sp, #8]
 80171bc:	2306      	movs	r3, #6
 80171be:	9301      	str	r3, [sp, #4]
 80171c0:	2300      	movs	r3, #0
 80171c2:	9300      	str	r3, [sp, #0]
 80171c4:	4603      	mov	r3, r0
 80171c6:	69b8      	ldr	r0, [r7, #24]
 80171c8:	f001 fe86 	bl	8018ed8 <ip4_output_if>
 80171cc:	4603      	mov	r3, r0
 80171ce:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      0, IP_PROTO_TCP, netif);
    NETIF_SET_HWADDRHINT(netif, NULL);
  }

  pbuf_free(p);
 80171d2:	69b8      	ldr	r0, [r7, #24]
 80171d4:	f7fa fba0 	bl	8011918 <pbuf_free>

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 80171d8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 80171dc:	4618      	mov	r0, r3
 80171de:	372c      	adds	r7, #44	; 0x2c
 80171e0:	46bd      	mov	sp, r7
 80171e2:	bd90      	pop	{r4, r7, pc}

080171e4 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 80171e4:	b580      	push	{r7, lr}
 80171e6:	b082      	sub	sp, #8
 80171e8:	af00      	add	r7, sp, #0
 80171ea:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 80171ec:	f7fa fe12 	bl	8011e14 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 80171f0:	4b0a      	ldr	r3, [pc, #40]	; (801721c <tcpip_tcp_timer+0x38>)
 80171f2:	681b      	ldr	r3, [r3, #0]
 80171f4:	2b00      	cmp	r3, #0
 80171f6:	d103      	bne.n	8017200 <tcpip_tcp_timer+0x1c>
 80171f8:	4b09      	ldr	r3, [pc, #36]	; (8017220 <tcpip_tcp_timer+0x3c>)
 80171fa:	681b      	ldr	r3, [r3, #0]
 80171fc:	2b00      	cmp	r3, #0
 80171fe:	d005      	beq.n	801720c <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8017200:	2200      	movs	r2, #0
 8017202:	4908      	ldr	r1, [pc, #32]	; (8017224 <tcpip_tcp_timer+0x40>)
 8017204:	20fa      	movs	r0, #250	; 0xfa
 8017206:	f000 f86f 	bl	80172e8 <sys_timeout>
 801720a:	e002      	b.n	8017212 <tcpip_tcp_timer+0x2e>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 801720c:	4b06      	ldr	r3, [pc, #24]	; (8017228 <tcpip_tcp_timer+0x44>)
 801720e:	2200      	movs	r2, #0
 8017210:	601a      	str	r2, [r3, #0]
  }
}
 8017212:	bf00      	nop
 8017214:	3708      	adds	r7, #8
 8017216:	46bd      	mov	sp, r7
 8017218:	bd80      	pop	{r7, pc}
 801721a:	bf00      	nop
 801721c:	2000ab40 	.word	0x2000ab40
 8017220:	2000ab50 	.word	0x2000ab50
 8017224:	080171e5 	.word	0x080171e5
 8017228:	20004244 	.word	0x20004244

0801722c <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 801722c:	b580      	push	{r7, lr}
 801722e:	af00      	add	r7, sp, #0
  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 8017230:	4b0a      	ldr	r3, [pc, #40]	; (801725c <tcp_timer_needed+0x30>)
 8017232:	681b      	ldr	r3, [r3, #0]
 8017234:	2b00      	cmp	r3, #0
 8017236:	d10f      	bne.n	8017258 <tcp_timer_needed+0x2c>
 8017238:	4b09      	ldr	r3, [pc, #36]	; (8017260 <tcp_timer_needed+0x34>)
 801723a:	681b      	ldr	r3, [r3, #0]
 801723c:	2b00      	cmp	r3, #0
 801723e:	d103      	bne.n	8017248 <tcp_timer_needed+0x1c>
 8017240:	4b08      	ldr	r3, [pc, #32]	; (8017264 <tcp_timer_needed+0x38>)
 8017242:	681b      	ldr	r3, [r3, #0]
 8017244:	2b00      	cmp	r3, #0
 8017246:	d007      	beq.n	8017258 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 8017248:	4b04      	ldr	r3, [pc, #16]	; (801725c <tcp_timer_needed+0x30>)
 801724a:	2201      	movs	r2, #1
 801724c:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 801724e:	2200      	movs	r2, #0
 8017250:	4905      	ldr	r1, [pc, #20]	; (8017268 <tcp_timer_needed+0x3c>)
 8017252:	20fa      	movs	r0, #250	; 0xfa
 8017254:	f000 f848 	bl	80172e8 <sys_timeout>
  }
}
 8017258:	bf00      	nop
 801725a:	bd80      	pop	{r7, pc}
 801725c:	20004244 	.word	0x20004244
 8017260:	2000ab40 	.word	0x2000ab40
 8017264:	2000ab50 	.word	0x2000ab50
 8017268:	080171e5 	.word	0x080171e5

0801726c <cyclic_timer>:
 *
 * @param arg unused argument
 */
static void
cyclic_timer(void *arg)
{
 801726c:	b580      	push	{r7, lr}
 801726e:	b084      	sub	sp, #16
 8017270:	af00      	add	r7, sp, #0
 8017272:	6078      	str	r0, [r7, #4]
  const struct lwip_cyclic_timer* cyclic = (const struct lwip_cyclic_timer*)arg;
 8017274:	687b      	ldr	r3, [r7, #4]
 8017276:	60fb      	str	r3, [r7, #12]
#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 8017278:	68fb      	ldr	r3, [r7, #12]
 801727a:	685b      	ldr	r3, [r3, #4]
 801727c:	4798      	blx	r3
  sys_timeout(cyclic->interval_ms, cyclic_timer, arg);
 801727e:	68fb      	ldr	r3, [r7, #12]
 8017280:	681b      	ldr	r3, [r3, #0]
 8017282:	687a      	ldr	r2, [r7, #4]
 8017284:	4903      	ldr	r1, [pc, #12]	; (8017294 <cyclic_timer+0x28>)
 8017286:	4618      	mov	r0, r3
 8017288:	f000 f82e 	bl	80172e8 <sys_timeout>
}
 801728c:	bf00      	nop
 801728e:	3710      	adds	r7, #16
 8017290:	46bd      	mov	sp, r7
 8017292:	bd80      	pop	{r7, pc}
 8017294:	0801726d 	.word	0x0801726d

08017298 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 8017298:	b580      	push	{r7, lr}
 801729a:	b082      	sub	sp, #8
 801729c:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 801729e:	2301      	movs	r3, #1
 80172a0:	607b      	str	r3, [r7, #4]
 80172a2:	e00e      	b.n	80172c2 <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, cyclic_timer, LWIP_CONST_CAST(void*, &lwip_cyclic_timers[i]));
 80172a4:	4a0d      	ldr	r2, [pc, #52]	; (80172dc <sys_timeouts_init+0x44>)
 80172a6:	687b      	ldr	r3, [r7, #4]
 80172a8:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 80172ac:	687b      	ldr	r3, [r7, #4]
 80172ae:	00db      	lsls	r3, r3, #3
 80172b0:	4a0a      	ldr	r2, [pc, #40]	; (80172dc <sys_timeouts_init+0x44>)
 80172b2:	4413      	add	r3, r2
 80172b4:	461a      	mov	r2, r3
 80172b6:	490a      	ldr	r1, [pc, #40]	; (80172e0 <sys_timeouts_init+0x48>)
 80172b8:	f000 f816 	bl	80172e8 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 80172bc:	687b      	ldr	r3, [r7, #4]
 80172be:	3301      	adds	r3, #1
 80172c0:	607b      	str	r3, [r7, #4]
 80172c2:	687b      	ldr	r3, [r7, #4]
 80172c4:	2b02      	cmp	r3, #2
 80172c6:	d9ed      	bls.n	80172a4 <sys_timeouts_init+0xc>
  }

  /* Initialise timestamp for sys_check_timeouts */
  timeouts_last_time = sys_now();
 80172c8:	f7f2 fd06 	bl	8009cd8 <sys_now>
 80172cc:	4602      	mov	r2, r0
 80172ce:	4b05      	ldr	r3, [pc, #20]	; (80172e4 <sys_timeouts_init+0x4c>)
 80172d0:	601a      	str	r2, [r3, #0]
}
 80172d2:	bf00      	nop
 80172d4:	3708      	adds	r7, #8
 80172d6:	46bd      	mov	sp, r7
 80172d8:	bd80      	pop	{r7, pc}
 80172da:	bf00      	nop
 80172dc:	0801e7e8 	.word	0x0801e7e8
 80172e0:	0801726d 	.word	0x0801726d
 80172e4:	20004240 	.word	0x20004240

080172e8 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char* handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 80172e8:	b580      	push	{r7, lr}
 80172ea:	b088      	sub	sp, #32
 80172ec:	af00      	add	r7, sp, #0
 80172ee:	60f8      	str	r0, [r7, #12]
 80172f0:	60b9      	str	r1, [r7, #8]
 80172f2:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;
  u32_t now, diff;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 80172f4:	200a      	movs	r0, #10
 80172f6:	f7f9 fd63 	bl	8010dc0 <memp_malloc>
 80172fa:	6178      	str	r0, [r7, #20]
  if (timeout == NULL) {
 80172fc:	697b      	ldr	r3, [r7, #20]
 80172fe:	2b00      	cmp	r3, #0
 8017300:	d10a      	bne.n	8017318 <sys_timeout+0x30>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 8017302:	697b      	ldr	r3, [r7, #20]
 8017304:	2b00      	cmp	r3, #0
 8017306:	f040 8084 	bne.w	8017412 <sys_timeout+0x12a>
 801730a:	4b44      	ldr	r3, [pc, #272]	; (801741c <sys_timeout+0x134>)
 801730c:	22d4      	movs	r2, #212	; 0xd4
 801730e:	4944      	ldr	r1, [pc, #272]	; (8017420 <sys_timeout+0x138>)
 8017310:	4844      	ldr	r0, [pc, #272]	; (8017424 <sys_timeout+0x13c>)
 8017312:	f003 fd6d 	bl	801adf0 <iprintf>
    return;
 8017316:	e07c      	b.n	8017412 <sys_timeout+0x12a>
  }

  now = sys_now();
 8017318:	f7f2 fcde 	bl	8009cd8 <sys_now>
 801731c:	6138      	str	r0, [r7, #16]
  if (next_timeout == NULL) {
 801731e:	4b42      	ldr	r3, [pc, #264]	; (8017428 <sys_timeout+0x140>)
 8017320:	681b      	ldr	r3, [r3, #0]
 8017322:	2b00      	cmp	r3, #0
 8017324:	d105      	bne.n	8017332 <sys_timeout+0x4a>
    diff = 0;
 8017326:	2300      	movs	r3, #0
 8017328:	61bb      	str	r3, [r7, #24]
    timeouts_last_time = now;
 801732a:	4a40      	ldr	r2, [pc, #256]	; (801742c <sys_timeout+0x144>)
 801732c:	693b      	ldr	r3, [r7, #16]
 801732e:	6013      	str	r3, [r2, #0]
 8017330:	e004      	b.n	801733c <sys_timeout+0x54>
  } else {
    diff = now - timeouts_last_time;
 8017332:	4b3e      	ldr	r3, [pc, #248]	; (801742c <sys_timeout+0x144>)
 8017334:	681b      	ldr	r3, [r3, #0]
 8017336:	693a      	ldr	r2, [r7, #16]
 8017338:	1ad3      	subs	r3, r2, r3
 801733a:	61bb      	str	r3, [r7, #24]
  }

  timeout->next = NULL;
 801733c:	697b      	ldr	r3, [r7, #20]
 801733e:	2200      	movs	r2, #0
 8017340:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 8017342:	697b      	ldr	r3, [r7, #20]
 8017344:	68ba      	ldr	r2, [r7, #8]
 8017346:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 8017348:	697b      	ldr	r3, [r7, #20]
 801734a:	687a      	ldr	r2, [r7, #4]
 801734c:	60da      	str	r2, [r3, #12]
  timeout->time = msecs + diff;
 801734e:	68fa      	ldr	r2, [r7, #12]
 8017350:	69bb      	ldr	r3, [r7, #24]
 8017352:	441a      	add	r2, r3
 8017354:	697b      	ldr	r3, [r7, #20]
 8017356:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p msecs=%"U32_F" handler=%s arg=%p\n",
    (void *)timeout, msecs, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 8017358:	4b33      	ldr	r3, [pc, #204]	; (8017428 <sys_timeout+0x140>)
 801735a:	681b      	ldr	r3, [r3, #0]
 801735c:	2b00      	cmp	r3, #0
 801735e:	d103      	bne.n	8017368 <sys_timeout+0x80>
    next_timeout = timeout;
 8017360:	4a31      	ldr	r2, [pc, #196]	; (8017428 <sys_timeout+0x140>)
 8017362:	697b      	ldr	r3, [r7, #20]
 8017364:	6013      	str	r3, [r2, #0]
    return;
 8017366:	e055      	b.n	8017414 <sys_timeout+0x12c>
  }

  if (next_timeout->time > msecs) {
 8017368:	4b2f      	ldr	r3, [pc, #188]	; (8017428 <sys_timeout+0x140>)
 801736a:	681b      	ldr	r3, [r3, #0]
 801736c:	685b      	ldr	r3, [r3, #4]
 801736e:	68fa      	ldr	r2, [r7, #12]
 8017370:	429a      	cmp	r2, r3
 8017372:	d20f      	bcs.n	8017394 <sys_timeout+0xac>
    next_timeout->time -= msecs;
 8017374:	4b2c      	ldr	r3, [pc, #176]	; (8017428 <sys_timeout+0x140>)
 8017376:	681b      	ldr	r3, [r3, #0]
 8017378:	6859      	ldr	r1, [r3, #4]
 801737a:	4b2b      	ldr	r3, [pc, #172]	; (8017428 <sys_timeout+0x140>)
 801737c:	681b      	ldr	r3, [r3, #0]
 801737e:	68fa      	ldr	r2, [r7, #12]
 8017380:	1a8a      	subs	r2, r1, r2
 8017382:	605a      	str	r2, [r3, #4]
    timeout->next = next_timeout;
 8017384:	4b28      	ldr	r3, [pc, #160]	; (8017428 <sys_timeout+0x140>)
 8017386:	681a      	ldr	r2, [r3, #0]
 8017388:	697b      	ldr	r3, [r7, #20]
 801738a:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 801738c:	4a26      	ldr	r2, [pc, #152]	; (8017428 <sys_timeout+0x140>)
 801738e:	697b      	ldr	r3, [r7, #20]
 8017390:	6013      	str	r3, [r2, #0]
 8017392:	e03f      	b.n	8017414 <sys_timeout+0x12c>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 8017394:	4b24      	ldr	r3, [pc, #144]	; (8017428 <sys_timeout+0x140>)
 8017396:	681b      	ldr	r3, [r3, #0]
 8017398:	61fb      	str	r3, [r7, #28]
 801739a:	e036      	b.n	801740a <sys_timeout+0x122>
      timeout->time -= t->time;
 801739c:	697b      	ldr	r3, [r7, #20]
 801739e:	685a      	ldr	r2, [r3, #4]
 80173a0:	69fb      	ldr	r3, [r7, #28]
 80173a2:	685b      	ldr	r3, [r3, #4]
 80173a4:	1ad2      	subs	r2, r2, r3
 80173a6:	697b      	ldr	r3, [r7, #20]
 80173a8:	605a      	str	r2, [r3, #4]
      if (t->next == NULL || t->next->time > timeout->time) {
 80173aa:	69fb      	ldr	r3, [r7, #28]
 80173ac:	681b      	ldr	r3, [r3, #0]
 80173ae:	2b00      	cmp	r3, #0
 80173b0:	d006      	beq.n	80173c0 <sys_timeout+0xd8>
 80173b2:	69fb      	ldr	r3, [r7, #28]
 80173b4:	681b      	ldr	r3, [r3, #0]
 80173b6:	685a      	ldr	r2, [r3, #4]
 80173b8:	697b      	ldr	r3, [r7, #20]
 80173ba:	685b      	ldr	r3, [r3, #4]
 80173bc:	429a      	cmp	r2, r3
 80173be:	d921      	bls.n	8017404 <sys_timeout+0x11c>
        if (t->next != NULL) {
 80173c0:	69fb      	ldr	r3, [r7, #28]
 80173c2:	681b      	ldr	r3, [r3, #0]
 80173c4:	2b00      	cmp	r3, #0
 80173c6:	d009      	beq.n	80173dc <sys_timeout+0xf4>
          t->next->time -= timeout->time;
 80173c8:	69fb      	ldr	r3, [r7, #28]
 80173ca:	681b      	ldr	r3, [r3, #0]
 80173cc:	6859      	ldr	r1, [r3, #4]
 80173ce:	697b      	ldr	r3, [r7, #20]
 80173d0:	685a      	ldr	r2, [r3, #4]
 80173d2:	69fb      	ldr	r3, [r7, #28]
 80173d4:	681b      	ldr	r3, [r3, #0]
 80173d6:	1a8a      	subs	r2, r1, r2
 80173d8:	605a      	str	r2, [r3, #4]
 80173da:	e00b      	b.n	80173f4 <sys_timeout+0x10c>
        } else if (timeout->time > msecs) {
 80173dc:	697b      	ldr	r3, [r7, #20]
 80173de:	685b      	ldr	r3, [r3, #4]
 80173e0:	68fa      	ldr	r2, [r7, #12]
 80173e2:	429a      	cmp	r2, r3
 80173e4:	d206      	bcs.n	80173f4 <sys_timeout+0x10c>
          /* If this is the case, 'timeouts_last_time' and 'now' differs too much.
             This can be due to sys_check_timeouts() not being called at the right
             times, but also when stopping in a breakpoint. Anyway, let's assume
             this is not wanted, so add the first timer's time instead of 'diff' */
          timeout->time = msecs + next_timeout->time;
 80173e6:	4b10      	ldr	r3, [pc, #64]	; (8017428 <sys_timeout+0x140>)
 80173e8:	681b      	ldr	r3, [r3, #0]
 80173ea:	685a      	ldr	r2, [r3, #4]
 80173ec:	68fb      	ldr	r3, [r7, #12]
 80173ee:	441a      	add	r2, r3
 80173f0:	697b      	ldr	r3, [r7, #20]
 80173f2:	605a      	str	r2, [r3, #4]
        }
        timeout->next = t->next;
 80173f4:	69fb      	ldr	r3, [r7, #28]
 80173f6:	681a      	ldr	r2, [r3, #0]
 80173f8:	697b      	ldr	r3, [r7, #20]
 80173fa:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 80173fc:	69fb      	ldr	r3, [r7, #28]
 80173fe:	697a      	ldr	r2, [r7, #20]
 8017400:	601a      	str	r2, [r3, #0]
        break;
 8017402:	e007      	b.n	8017414 <sys_timeout+0x12c>
    for (t = next_timeout; t != NULL; t = t->next) {
 8017404:	69fb      	ldr	r3, [r7, #28]
 8017406:	681b      	ldr	r3, [r3, #0]
 8017408:	61fb      	str	r3, [r7, #28]
 801740a:	69fb      	ldr	r3, [r7, #28]
 801740c:	2b00      	cmp	r3, #0
 801740e:	d1c5      	bne.n	801739c <sys_timeout+0xb4>
 8017410:	e000      	b.n	8017414 <sys_timeout+0x12c>
    return;
 8017412:	bf00      	nop
      }
    }
  }
}
 8017414:	3720      	adds	r7, #32
 8017416:	46bd      	mov	sp, r7
 8017418:	bd80      	pop	{r7, pc}
 801741a:	bf00      	nop
 801741c:	0801dedc 	.word	0x0801dedc
 8017420:	0801df10 	.word	0x0801df10
 8017424:	0801df50 	.word	0x0801df50
 8017428:	2000423c 	.word	0x2000423c
 801742c:	20004240 	.word	0x20004240

08017430 <sys_check_timeouts>:
#if !NO_SYS && !defined __DOXYGEN__
static
#endif /* !NO_SYS */
void
sys_check_timeouts(void)
{
 8017430:	b580      	push	{r7, lr}
 8017432:	b086      	sub	sp, #24
 8017434:	af00      	add	r7, sp, #0
  if (next_timeout) {
 8017436:	4b24      	ldr	r3, [pc, #144]	; (80174c8 <sys_check_timeouts+0x98>)
 8017438:	681b      	ldr	r3, [r3, #0]
 801743a:	2b00      	cmp	r3, #0
 801743c:	d03f      	beq.n	80174be <sys_check_timeouts+0x8e>
    sys_timeout_handler handler;
    void *arg;
    u8_t had_one;
    u32_t now;

    now = sys_now();
 801743e:	f7f2 fc4b 	bl	8009cd8 <sys_now>
 8017442:	60f8      	str	r0, [r7, #12]
    /* this cares for wraparounds */
    diff = now - timeouts_last_time;
 8017444:	4b21      	ldr	r3, [pc, #132]	; (80174cc <sys_check_timeouts+0x9c>)
 8017446:	681b      	ldr	r3, [r3, #0]
 8017448:	68fa      	ldr	r2, [r7, #12]
 801744a:	1ad3      	subs	r3, r2, r3
 801744c:	617b      	str	r3, [r7, #20]
    do {
      PBUF_CHECK_FREE_OOSEQ();
      had_one = 0;
 801744e:	2300      	movs	r3, #0
 8017450:	74fb      	strb	r3, [r7, #19]
      tmptimeout = next_timeout;
 8017452:	4b1d      	ldr	r3, [pc, #116]	; (80174c8 <sys_check_timeouts+0x98>)
 8017454:	681b      	ldr	r3, [r3, #0]
 8017456:	60bb      	str	r3, [r7, #8]
      if (tmptimeout && (tmptimeout->time <= diff)) {
 8017458:	68bb      	ldr	r3, [r7, #8]
 801745a:	2b00      	cmp	r3, #0
 801745c:	d02c      	beq.n	80174b8 <sys_check_timeouts+0x88>
 801745e:	68bb      	ldr	r3, [r7, #8]
 8017460:	685b      	ldr	r3, [r3, #4]
 8017462:	697a      	ldr	r2, [r7, #20]
 8017464:	429a      	cmp	r2, r3
 8017466:	d327      	bcc.n	80174b8 <sys_check_timeouts+0x88>
        /* timeout has expired */
        had_one = 1;
 8017468:	2301      	movs	r3, #1
 801746a:	74fb      	strb	r3, [r7, #19]
        timeouts_last_time += tmptimeout->time;
 801746c:	68bb      	ldr	r3, [r7, #8]
 801746e:	685a      	ldr	r2, [r3, #4]
 8017470:	4b16      	ldr	r3, [pc, #88]	; (80174cc <sys_check_timeouts+0x9c>)
 8017472:	681b      	ldr	r3, [r3, #0]
 8017474:	4413      	add	r3, r2
 8017476:	4a15      	ldr	r2, [pc, #84]	; (80174cc <sys_check_timeouts+0x9c>)
 8017478:	6013      	str	r3, [r2, #0]
        diff -= tmptimeout->time;
 801747a:	68bb      	ldr	r3, [r7, #8]
 801747c:	685b      	ldr	r3, [r3, #4]
 801747e:	697a      	ldr	r2, [r7, #20]
 8017480:	1ad3      	subs	r3, r2, r3
 8017482:	617b      	str	r3, [r7, #20]
        next_timeout = tmptimeout->next;
 8017484:	68bb      	ldr	r3, [r7, #8]
 8017486:	681b      	ldr	r3, [r3, #0]
 8017488:	4a0f      	ldr	r2, [pc, #60]	; (80174c8 <sys_check_timeouts+0x98>)
 801748a:	6013      	str	r3, [r2, #0]
        handler = tmptimeout->h;
 801748c:	68bb      	ldr	r3, [r7, #8]
 801748e:	689b      	ldr	r3, [r3, #8]
 8017490:	607b      	str	r3, [r7, #4]
        arg = tmptimeout->arg;
 8017492:	68bb      	ldr	r3, [r7, #8]
 8017494:	68db      	ldr	r3, [r3, #12]
 8017496:	603b      	str	r3, [r7, #0]
        if (handler != NULL) {
          LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s arg=%p\n",
            tmptimeout->handler_name, arg));
        }
#endif /* LWIP_DEBUG_TIMERNAMES */
        memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 8017498:	68b9      	ldr	r1, [r7, #8]
 801749a:	200a      	movs	r0, #10
 801749c:	f7f9 fce2 	bl	8010e64 <memp_free>
        if (handler != NULL) {
 80174a0:	687b      	ldr	r3, [r7, #4]
 80174a2:	2b00      	cmp	r3, #0
 80174a4:	d008      	beq.n	80174b8 <sys_check_timeouts+0x88>
#if !NO_SYS
          /* For LWIP_TCPIP_CORE_LOCKING, lock the core before calling the
             timeout handler function. */
          LOCK_TCPIP_CORE();
 80174a6:	480a      	ldr	r0, [pc, #40]	; (80174d0 <sys_check_timeouts+0xa0>)
 80174a8:	f002 fe6a 	bl	801a180 <sys_mutex_lock>
#endif /* !NO_SYS */
          handler(arg);
 80174ac:	687b      	ldr	r3, [r7, #4]
 80174ae:	6838      	ldr	r0, [r7, #0]
 80174b0:	4798      	blx	r3
#if !NO_SYS
          UNLOCK_TCPIP_CORE();
 80174b2:	4807      	ldr	r0, [pc, #28]	; (80174d0 <sys_check_timeouts+0xa0>)
 80174b4:	f002 fe73 	bl	801a19e <sys_mutex_unlock>
#endif /* !NO_SYS */
        }
        LWIP_TCPIP_THREAD_ALIVE();
      }
    /* repeat until all expired timers have been called */
    } while (had_one);
 80174b8:	7cfb      	ldrb	r3, [r7, #19]
 80174ba:	2b00      	cmp	r3, #0
 80174bc:	d1c7      	bne.n	801744e <sys_check_timeouts+0x1e>
  }
}
 80174be:	bf00      	nop
 80174c0:	3718      	adds	r7, #24
 80174c2:	46bd      	mov	sp, r7
 80174c4:	bd80      	pop	{r7, pc}
 80174c6:	bf00      	nop
 80174c8:	2000423c 	.word	0x2000423c
 80174cc:	20004240 	.word	0x20004240
 80174d0:	20007634 	.word	0x20007634

080174d4 <sys_timeouts_sleeptime>:
#if !NO_SYS
static
#endif /* !NO_SYS */
u32_t
sys_timeouts_sleeptime(void)
{
 80174d4:	b580      	push	{r7, lr}
 80174d6:	b082      	sub	sp, #8
 80174d8:	af00      	add	r7, sp, #0
  u32_t diff;
  if (next_timeout == NULL) {
 80174da:	4b0f      	ldr	r3, [pc, #60]	; (8017518 <sys_timeouts_sleeptime+0x44>)
 80174dc:	681b      	ldr	r3, [r3, #0]
 80174de:	2b00      	cmp	r3, #0
 80174e0:	d102      	bne.n	80174e8 <sys_timeouts_sleeptime+0x14>
    return 0xffffffff;
 80174e2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80174e6:	e013      	b.n	8017510 <sys_timeouts_sleeptime+0x3c>
  }
  diff = sys_now() - timeouts_last_time;
 80174e8:	f7f2 fbf6 	bl	8009cd8 <sys_now>
 80174ec:	4602      	mov	r2, r0
 80174ee:	4b0b      	ldr	r3, [pc, #44]	; (801751c <sys_timeouts_sleeptime+0x48>)
 80174f0:	681b      	ldr	r3, [r3, #0]
 80174f2:	1ad3      	subs	r3, r2, r3
 80174f4:	607b      	str	r3, [r7, #4]
  if (diff > next_timeout->time) {
 80174f6:	4b08      	ldr	r3, [pc, #32]	; (8017518 <sys_timeouts_sleeptime+0x44>)
 80174f8:	681b      	ldr	r3, [r3, #0]
 80174fa:	685b      	ldr	r3, [r3, #4]
 80174fc:	687a      	ldr	r2, [r7, #4]
 80174fe:	429a      	cmp	r2, r3
 8017500:	d901      	bls.n	8017506 <sys_timeouts_sleeptime+0x32>
    return 0;
 8017502:	2300      	movs	r3, #0
 8017504:	e004      	b.n	8017510 <sys_timeouts_sleeptime+0x3c>
  } else {
    return next_timeout->time - diff;
 8017506:	4b04      	ldr	r3, [pc, #16]	; (8017518 <sys_timeouts_sleeptime+0x44>)
 8017508:	681b      	ldr	r3, [r3, #0]
 801750a:	685a      	ldr	r2, [r3, #4]
 801750c:	687b      	ldr	r3, [r7, #4]
 801750e:	1ad3      	subs	r3, r2, r3
  }
}
 8017510:	4618      	mov	r0, r3
 8017512:	3708      	adds	r7, #8
 8017514:	46bd      	mov	sp, r7
 8017516:	bd80      	pop	{r7, pc}
 8017518:	2000423c 	.word	0x2000423c
 801751c:	20004240 	.word	0x20004240

08017520 <sys_timeouts_mbox_fetch>:
 * @param mbox the mbox to fetch the message from
 * @param msg the place to store the message
 */
void
sys_timeouts_mbox_fetch(sys_mbox_t *mbox, void **msg)
{
 8017520:	b580      	push	{r7, lr}
 8017522:	b084      	sub	sp, #16
 8017524:	af00      	add	r7, sp, #0
 8017526:	6078      	str	r0, [r7, #4]
 8017528:	6039      	str	r1, [r7, #0]
  u32_t sleeptime;

again:
  if (!next_timeout) {
 801752a:	4b0f      	ldr	r3, [pc, #60]	; (8017568 <sys_timeouts_mbox_fetch+0x48>)
 801752c:	681b      	ldr	r3, [r3, #0]
 801752e:	2b00      	cmp	r3, #0
 8017530:	d105      	bne.n	801753e <sys_timeouts_mbox_fetch+0x1e>
    sys_arch_mbox_fetch(mbox, msg, 0);
 8017532:	2200      	movs	r2, #0
 8017534:	6839      	ldr	r1, [r7, #0]
 8017536:	6878      	ldr	r0, [r7, #4]
 8017538:	f002 fced 	bl	8019f16 <sys_arch_mbox_fetch>
    return;
 801753c:	e011      	b.n	8017562 <sys_timeouts_mbox_fetch+0x42>
  }

  sleeptime = sys_timeouts_sleeptime();
 801753e:	f7ff ffc9 	bl	80174d4 <sys_timeouts_sleeptime>
 8017542:	60f8      	str	r0, [r7, #12]
  if (sleeptime == 0 || sys_arch_mbox_fetch(mbox, msg, sleeptime) == SYS_ARCH_TIMEOUT) {
 8017544:	68fb      	ldr	r3, [r7, #12]
 8017546:	2b00      	cmp	r3, #0
 8017548:	d008      	beq.n	801755c <sys_timeouts_mbox_fetch+0x3c>
 801754a:	68fa      	ldr	r2, [r7, #12]
 801754c:	6839      	ldr	r1, [r7, #0]
 801754e:	6878      	ldr	r0, [r7, #4]
 8017550:	f002 fce1 	bl	8019f16 <sys_arch_mbox_fetch>
 8017554:	4603      	mov	r3, r0
 8017556:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801755a:	d102      	bne.n	8017562 <sys_timeouts_mbox_fetch+0x42>
    /* If a SYS_ARCH_TIMEOUT value is returned, a timeout occurred
       before a message could be fetched. */
    sys_check_timeouts();
 801755c:	f7ff ff68 	bl	8017430 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 8017560:	e7e3      	b.n	801752a <sys_timeouts_mbox_fetch+0xa>
  }
}
 8017562:	3710      	adds	r7, #16
 8017564:	46bd      	mov	sp, r7
 8017566:	bd80      	pop	{r7, pc}
 8017568:	2000423c 	.word	0x2000423c

0801756c <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 801756c:	b480      	push	{r7}
 801756e:	af00      	add	r7, sp, #0
#if LWIP_RANDOMIZE_INITIAL_LOCAL_PORTS && defined(LWIP_RAND)
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
#endif /* LWIP_RANDOMIZE_INITIAL_LOCAL_PORTS && defined(LWIP_RAND) */
}
 8017570:	bf00      	nop
 8017572:	46bd      	mov	sp, r7
 8017574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017578:	4770      	bx	lr
	...

0801757c <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 801757c:	b480      	push	{r7}
 801757e:	b083      	sub	sp, #12
 8017580:	af00      	add	r7, sp, #0
  u16_t n = 0;
 8017582:	2300      	movs	r3, #0
 8017584:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 8017586:	4b17      	ldr	r3, [pc, #92]	; (80175e4 <udp_new_port+0x68>)
 8017588:	881b      	ldrh	r3, [r3, #0]
 801758a:	1c5a      	adds	r2, r3, #1
 801758c:	b291      	uxth	r1, r2
 801758e:	4a15      	ldr	r2, [pc, #84]	; (80175e4 <udp_new_port+0x68>)
 8017590:	8011      	strh	r1, [r2, #0]
 8017592:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8017596:	4293      	cmp	r3, r2
 8017598:	d103      	bne.n	80175a2 <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 801759a:	4b12      	ldr	r3, [pc, #72]	; (80175e4 <udp_new_port+0x68>)
 801759c:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 80175a0:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 80175a2:	4b11      	ldr	r3, [pc, #68]	; (80175e8 <udp_new_port+0x6c>)
 80175a4:	681b      	ldr	r3, [r3, #0]
 80175a6:	603b      	str	r3, [r7, #0]
 80175a8:	e011      	b.n	80175ce <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 80175aa:	683b      	ldr	r3, [r7, #0]
 80175ac:	8a5a      	ldrh	r2, [r3, #18]
 80175ae:	4b0d      	ldr	r3, [pc, #52]	; (80175e4 <udp_new_port+0x68>)
 80175b0:	881b      	ldrh	r3, [r3, #0]
 80175b2:	429a      	cmp	r2, r3
 80175b4:	d108      	bne.n	80175c8 <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 80175b6:	88fb      	ldrh	r3, [r7, #6]
 80175b8:	3301      	adds	r3, #1
 80175ba:	80fb      	strh	r3, [r7, #6]
 80175bc:	88fb      	ldrh	r3, [r7, #6]
 80175be:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80175c2:	d3e0      	bcc.n	8017586 <udp_new_port+0xa>
        return 0;
 80175c4:	2300      	movs	r3, #0
 80175c6:	e007      	b.n	80175d8 <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 80175c8:	683b      	ldr	r3, [r7, #0]
 80175ca:	68db      	ldr	r3, [r3, #12]
 80175cc:	603b      	str	r3, [r7, #0]
 80175ce:	683b      	ldr	r3, [r7, #0]
 80175d0:	2b00      	cmp	r3, #0
 80175d2:	d1ea      	bne.n	80175aa <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 80175d4:	4b03      	ldr	r3, [pc, #12]	; (80175e4 <udp_new_port+0x68>)
 80175d6:	881b      	ldrh	r3, [r3, #0]
}
 80175d8:	4618      	mov	r0, r3
 80175da:	370c      	adds	r7, #12
 80175dc:	46bd      	mov	sp, r7
 80175de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80175e2:	4770      	bx	lr
 80175e4:	20000124 	.word	0x20000124
 80175e8:	2000ab58 	.word	0x2000ab58

080175ec <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 80175ec:	b480      	push	{r7}
 80175ee:	b085      	sub	sp, #20
 80175f0:	af00      	add	r7, sp, #0
 80175f2:	60f8      	str	r0, [r7, #12]
 80175f4:	60b9      	str	r1, [r7, #8]
 80175f6:	4613      	mov	r3, r2
 80175f8:	71fb      	strb	r3, [r7, #7]
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 80175fa:	79fb      	ldrb	r3, [r7, #7]
 80175fc:	2b00      	cmp	r3, #0
 80175fe:	d018      	beq.n	8017632 <udp_input_local_match+0x46>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8017600:	68fb      	ldr	r3, [r7, #12]
 8017602:	2b00      	cmp	r3, #0
 8017604:	d013      	beq.n	801762e <udp_input_local_match+0x42>
 8017606:	68fb      	ldr	r3, [r7, #12]
 8017608:	681b      	ldr	r3, [r3, #0]
 801760a:	2b00      	cmp	r3, #0
 801760c:	d00f      	beq.n	801762e <udp_input_local_match+0x42>
          ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 801760e:	4b14      	ldr	r3, [pc, #80]	; (8017660 <udp_input_local_match+0x74>)
 8017610:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8017612:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8017616:	d00a      	beq.n	801762e <udp_input_local_match+0x42>
           ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 8017618:	68fb      	ldr	r3, [r7, #12]
 801761a:	681a      	ldr	r2, [r3, #0]
 801761c:	4b10      	ldr	r3, [pc, #64]	; (8017660 <udp_input_local_match+0x74>)
 801761e:	695b      	ldr	r3, [r3, #20]
 8017620:	405a      	eors	r2, r3
 8017622:	68bb      	ldr	r3, [r7, #8]
 8017624:	3308      	adds	r3, #8
 8017626:	681b      	ldr	r3, [r3, #0]
 8017628:	4013      	ands	r3, r2
          ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 801762a:	2b00      	cmp	r3, #0
 801762c:	d110      	bne.n	8017650 <udp_input_local_match+0x64>
          return 1;
 801762e:	2301      	movs	r3, #1
 8017630:	e00f      	b.n	8017652 <udp_input_local_match+0x66>
        }
      }
    } else
#endif /* LWIP_IPV4 */
    /* Handle IPv4 and IPv6: all or exact match */
    if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8017632:	68fb      	ldr	r3, [r7, #12]
 8017634:	2b00      	cmp	r3, #0
 8017636:	d009      	beq.n	801764c <udp_input_local_match+0x60>
 8017638:	68fb      	ldr	r3, [r7, #12]
 801763a:	681b      	ldr	r3, [r3, #0]
 801763c:	2b00      	cmp	r3, #0
 801763e:	d005      	beq.n	801764c <udp_input_local_match+0x60>
 8017640:	68fb      	ldr	r3, [r7, #12]
 8017642:	681a      	ldr	r2, [r3, #0]
 8017644:	4b06      	ldr	r3, [pc, #24]	; (8017660 <udp_input_local_match+0x74>)
 8017646:	695b      	ldr	r3, [r3, #20]
 8017648:	429a      	cmp	r2, r3
 801764a:	d101      	bne.n	8017650 <udp_input_local_match+0x64>
      return 1;
 801764c:	2301      	movs	r3, #1
 801764e:	e000      	b.n	8017652 <udp_input_local_match+0x66>
    }
  }

  return 0;
 8017650:	2300      	movs	r3, #0
}
 8017652:	4618      	mov	r0, r3
 8017654:	3714      	adds	r7, #20
 8017656:	46bd      	mov	sp, r7
 8017658:	f85d 7b04 	ldr.w	r7, [sp], #4
 801765c:	4770      	bx	lr
 801765e:	bf00      	nop
 8017660:	20007638 	.word	0x20007638

08017664 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 8017664:	b590      	push	{r4, r7, lr}
 8017666:	b08d      	sub	sp, #52	; 0x34
 8017668:	af02      	add	r7, sp, #8
 801766a:	6078      	str	r0, [r7, #4]
 801766c:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 801766e:	2300      	movs	r3, #0
 8017670:	76fb      	strb	r3, [r7, #27]
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 8017672:	687b      	ldr	r3, [r7, #4]
 8017674:	895b      	ldrh	r3, [r3, #10]
 8017676:	2b07      	cmp	r3, #7
 8017678:	d803      	bhi.n	8017682 <udp_input+0x1e>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 801767a:	6878      	ldr	r0, [r7, #4]
 801767c:	f7fa f94c 	bl	8011918 <pbuf_free>
    goto end;
 8017680:	e0c6      	b.n	8017810 <udp_input+0x1ac>
  }

  udphdr = (struct udp_hdr *)p->payload;
 8017682:	687b      	ldr	r3, [r7, #4]
 8017684:	685b      	ldr	r3, [r3, #4]
 8017686:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 8017688:	4b63      	ldr	r3, [pc, #396]	; (8017818 <udp_input+0x1b4>)
 801768a:	695a      	ldr	r2, [r3, #20]
 801768c:	4b62      	ldr	r3, [pc, #392]	; (8017818 <udp_input+0x1b4>)
 801768e:	681b      	ldr	r3, [r3, #0]
 8017690:	4619      	mov	r1, r3
 8017692:	4610      	mov	r0, r2
 8017694:	f001 fcf2 	bl	801907c <ip4_addr_isbroadcast_u32>
 8017698:	4603      	mov	r3, r0
 801769a:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 801769c:	697b      	ldr	r3, [r7, #20]
 801769e:	881b      	ldrh	r3, [r3, #0]
 80176a0:	b29b      	uxth	r3, r3
 80176a2:	4618      	mov	r0, r3
 80176a4:	f7f8 ff9e 	bl	80105e4 <lwip_htons>
 80176a8:	4603      	mov	r3, r0
 80176aa:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 80176ac:	697b      	ldr	r3, [r7, #20]
 80176ae:	885b      	ldrh	r3, [r3, #2]
 80176b0:	b29b      	uxth	r3, r3
 80176b2:	4618      	mov	r0, r3
 80176b4:	f7f8 ff96 	bl	80105e4 <lwip_htons>
 80176b8:	4603      	mov	r3, r0
 80176ba:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print(UDP_DEBUG, ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print(UDP_DEBUG, ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 80176bc:	2300      	movs	r3, #0
 80176be:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 80176c0:	2300      	movs	r3, #0
 80176c2:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 80176c4:	2300      	movs	r3, #0
 80176c6:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 80176c8:	4b54      	ldr	r3, [pc, #336]	; (801781c <udp_input+0x1b8>)
 80176ca:	681b      	ldr	r3, [r3, #0]
 80176cc:	627b      	str	r3, [r7, #36]	; 0x24
 80176ce:	e03b      	b.n	8017748 <udp_input+0xe4>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print(UDP_DEBUG, &pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 80176d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80176d2:	8a5b      	ldrh	r3, [r3, #18]
 80176d4:	89fa      	ldrh	r2, [r7, #14]
 80176d6:	429a      	cmp	r2, r3
 80176d8:	d131      	bne.n	801773e <udp_input+0xda>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 80176da:	7cfb      	ldrb	r3, [r7, #19]
 80176dc:	461a      	mov	r2, r3
 80176de:	6839      	ldr	r1, [r7, #0]
 80176e0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80176e2:	f7ff ff83 	bl	80175ec <udp_input_local_match>
 80176e6:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 80176e8:	2b00      	cmp	r3, #0
 80176ea:	d028      	beq.n	801773e <udp_input+0xda>
      if (((pcb->flags & UDP_FLAGS_CONNECTED) == 0) &&
 80176ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80176ee:	7c1b      	ldrb	r3, [r3, #16]
 80176f0:	f003 0304 	and.w	r3, r3, #4
 80176f4:	2b00      	cmp	r3, #0
 80176f6:	d104      	bne.n	8017702 <udp_input+0x9e>
 80176f8:	69fb      	ldr	r3, [r7, #28]
 80176fa:	2b00      	cmp	r3, #0
 80176fc:	d101      	bne.n	8017702 <udp_input+0x9e>
          /* prefer specific IPs over cath-all */
          || !ip_addr_isany(&pcb->local_ip)
#endif /* SO_REUSE */
          )) {
        /* the first unconnected matching PCB */
        uncon_pcb = pcb;
 80176fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017700:	61fb      	str	r3, [r7, #28]
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 8017702:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017704:	8a9b      	ldrh	r3, [r3, #20]
 8017706:	8a3a      	ldrh	r2, [r7, #16]
 8017708:	429a      	cmp	r2, r3
 801770a:	d118      	bne.n	801773e <udp_input+0xda>
          (ip_addr_isany_val(pcb->remote_ip) ||
 801770c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801770e:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 8017710:	2b00      	cmp	r3, #0
 8017712:	d005      	beq.n	8017720 <udp_input+0xbc>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 8017714:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017716:	685a      	ldr	r2, [r3, #4]
 8017718:	4b3f      	ldr	r3, [pc, #252]	; (8017818 <udp_input+0x1b4>)
 801771a:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 801771c:	429a      	cmp	r2, r3
 801771e:	d10e      	bne.n	801773e <udp_input+0xda>
        /* the first fully matching PCB */
        if (prev != NULL) {
 8017720:	6a3b      	ldr	r3, [r7, #32]
 8017722:	2b00      	cmp	r3, #0
 8017724:	d014      	beq.n	8017750 <udp_input+0xec>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 8017726:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017728:	68da      	ldr	r2, [r3, #12]
 801772a:	6a3b      	ldr	r3, [r7, #32]
 801772c:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 801772e:	4b3b      	ldr	r3, [pc, #236]	; (801781c <udp_input+0x1b8>)
 8017730:	681a      	ldr	r2, [r3, #0]
 8017732:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017734:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 8017736:	4a39      	ldr	r2, [pc, #228]	; (801781c <udp_input+0x1b8>)
 8017738:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801773a:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 801773c:	e008      	b.n	8017750 <udp_input+0xec>
      }
    }

    prev = pcb;
 801773e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017740:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8017742:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017744:	68db      	ldr	r3, [r3, #12]
 8017746:	627b      	str	r3, [r7, #36]	; 0x24
 8017748:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801774a:	2b00      	cmp	r3, #0
 801774c:	d1c0      	bne.n	80176d0 <udp_input+0x6c>
 801774e:	e000      	b.n	8017752 <udp_input+0xee>
        break;
 8017750:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 8017752:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017754:	2b00      	cmp	r3, #0
 8017756:	d101      	bne.n	801775c <udp_input+0xf8>
    pcb = uncon_pcb;
 8017758:	69fb      	ldr	r3, [r7, #28]
 801775a:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 801775c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801775e:	2b00      	cmp	r3, #0
 8017760:	d002      	beq.n	8017768 <udp_input+0x104>
    for_us = 1;
 8017762:	2301      	movs	r3, #1
 8017764:	76fb      	strb	r3, [r7, #27]
 8017766:	e00a      	b.n	801777e <udp_input+0x11a>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 8017768:	683b      	ldr	r3, [r7, #0]
 801776a:	3304      	adds	r3, #4
 801776c:	681a      	ldr	r2, [r3, #0]
 801776e:	4b2a      	ldr	r3, [pc, #168]	; (8017818 <udp_input+0x1b4>)
 8017770:	695b      	ldr	r3, [r3, #20]
 8017772:	429a      	cmp	r2, r3
 8017774:	bf0c      	ite	eq
 8017776:	2301      	moveq	r3, #1
 8017778:	2300      	movne	r3, #0
 801777a:	b2db      	uxtb	r3, r3
 801777c:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 801777e:	7efb      	ldrb	r3, [r7, #27]
 8017780:	2b00      	cmp	r3, #0
 8017782:	d042      	beq.n	801780a <udp_input+0x1a6>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_header(p, -UDP_HLEN)) {
 8017784:	f06f 0107 	mvn.w	r1, #7
 8017788:	6878      	ldr	r0, [r7, #4]
 801778a:	f7fa f8a1 	bl	80118d0 <pbuf_header>
 801778e:	4603      	mov	r3, r0
 8017790:	2b00      	cmp	r3, #0
 8017792:	d00a      	beq.n	80177aa <udp_input+0x146>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_header failed\n", 0);
 8017794:	4b22      	ldr	r3, [pc, #136]	; (8017820 <udp_input+0x1bc>)
 8017796:	f240 1255 	movw	r2, #341	; 0x155
 801779a:	4922      	ldr	r1, [pc, #136]	; (8017824 <udp_input+0x1c0>)
 801779c:	4822      	ldr	r0, [pc, #136]	; (8017828 <udp_input+0x1c4>)
 801779e:	f003 fb27 	bl	801adf0 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 80177a2:	6878      	ldr	r0, [r7, #4]
 80177a4:	f7fa f8b8 	bl	8011918 <pbuf_free>
      goto end;
 80177a8:	e032      	b.n	8017810 <udp_input+0x1ac>
    }

    if (pcb != NULL) {
 80177aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80177ac:	2b00      	cmp	r3, #0
 80177ae:	d012      	beq.n	80177d6 <udp_input+0x172>
          pbuf_header(p, -hdrs_len);
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 80177b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80177b2:	699b      	ldr	r3, [r3, #24]
 80177b4:	2b00      	cmp	r3, #0
 80177b6:	d00a      	beq.n	80177ce <udp_input+0x16a>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 80177b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80177ba:	699c      	ldr	r4, [r3, #24]
 80177bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80177be:	69d8      	ldr	r0, [r3, #28]
 80177c0:	8a3b      	ldrh	r3, [r7, #16]
 80177c2:	9300      	str	r3, [sp, #0]
 80177c4:	4b19      	ldr	r3, [pc, #100]	; (801782c <udp_input+0x1c8>)
 80177c6:	687a      	ldr	r2, [r7, #4]
 80177c8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80177ca:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 80177cc:	e021      	b.n	8017812 <udp_input+0x1ae>
        pbuf_free(p);
 80177ce:	6878      	ldr	r0, [r7, #4]
 80177d0:	f7fa f8a2 	bl	8011918 <pbuf_free>
        goto end;
 80177d4:	e01c      	b.n	8017810 <udp_input+0x1ac>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 80177d6:	7cfb      	ldrb	r3, [r7, #19]
 80177d8:	2b00      	cmp	r3, #0
 80177da:	d112      	bne.n	8017802 <udp_input+0x19e>
 80177dc:	4b0e      	ldr	r3, [pc, #56]	; (8017818 <udp_input+0x1b4>)
 80177de:	695b      	ldr	r3, [r3, #20]
 80177e0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80177e4:	2be0      	cmp	r3, #224	; 0xe0
 80177e6:	d00c      	beq.n	8017802 <udp_input+0x19e>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 80177e8:	4b0b      	ldr	r3, [pc, #44]	; (8017818 <udp_input+0x1b4>)
 80177ea:	899b      	ldrh	r3, [r3, #12]
 80177ec:	3308      	adds	r3, #8
 80177ee:	b29b      	uxth	r3, r3
 80177f0:	b21b      	sxth	r3, r3
 80177f2:	4619      	mov	r1, r3
 80177f4:	6878      	ldr	r0, [r7, #4]
 80177f6:	f7fa f87d 	bl	80118f4 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 80177fa:	2103      	movs	r1, #3
 80177fc:	6878      	ldr	r0, [r7, #4]
 80177fe:	f001 f93b 	bl	8018a78 <icmp_dest_unreach>
      pbuf_free(p);
 8017802:	6878      	ldr	r0, [r7, #4]
 8017804:	f7fa f888 	bl	8011918 <pbuf_free>
  return;
 8017808:	e003      	b.n	8017812 <udp_input+0x1ae>
    pbuf_free(p);
 801780a:	6878      	ldr	r0, [r7, #4]
 801780c:	f7fa f884 	bl	8011918 <pbuf_free>
  return;
 8017810:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 8017812:	372c      	adds	r7, #44	; 0x2c
 8017814:	46bd      	mov	sp, r7
 8017816:	bd90      	pop	{r4, r7, pc}
 8017818:	20007638 	.word	0x20007638
 801781c:	2000ab58 	.word	0x2000ab58
 8017820:	0801df78 	.word	0x0801df78
 8017824:	0801dfa8 	.word	0x0801dfa8
 8017828:	0801dfbc 	.word	0x0801dfbc
 801782c:	20007648 	.word	0x20007648

08017830 <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8017830:	b580      	push	{r7, lr}
 8017832:	b086      	sub	sp, #24
 8017834:	af00      	add	r7, sp, #0
 8017836:	60f8      	str	r0, [r7, #12]
 8017838:	60b9      	str	r1, [r7, #8]
 801783a:	4613      	mov	r3, r2
 801783c:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *ipcb;
  u8_t rebind;

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 801783e:	68bb      	ldr	r3, [r7, #8]
 8017840:	2b00      	cmp	r3, #0
 8017842:	d101      	bne.n	8017848 <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 8017844:	4b30      	ldr	r3, [pc, #192]	; (8017908 <udp_bind+0xd8>)
 8017846:	60bb      	str	r3, [r7, #8]
  }
#endif /* LWIP_IPV4 */

  /* still need to check for ipaddr == NULL in IPv6 only case */
  if ((pcb == NULL) || (ipaddr == NULL)) {
 8017848:	68fb      	ldr	r3, [r7, #12]
 801784a:	2b00      	cmp	r3, #0
 801784c:	d002      	beq.n	8017854 <udp_bind+0x24>
 801784e:	68bb      	ldr	r3, [r7, #8]
 8017850:	2b00      	cmp	r3, #0
 8017852:	d102      	bne.n	801785a <udp_bind+0x2a>
    return ERR_VAL;
 8017854:	f06f 0305 	mvn.w	r3, #5
 8017858:	e052      	b.n	8017900 <udp_bind+0xd0>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 801785a:	2300      	movs	r3, #0
 801785c:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801785e:	4b2b      	ldr	r3, [pc, #172]	; (801790c <udp_bind+0xdc>)
 8017860:	681b      	ldr	r3, [r3, #0]
 8017862:	617b      	str	r3, [r7, #20]
 8017864:	e009      	b.n	801787a <udp_bind+0x4a>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 8017866:	68fa      	ldr	r2, [r7, #12]
 8017868:	697b      	ldr	r3, [r7, #20]
 801786a:	429a      	cmp	r2, r3
 801786c:	d102      	bne.n	8017874 <udp_bind+0x44>
      rebind = 1;
 801786e:	2301      	movs	r3, #1
 8017870:	74fb      	strb	r3, [r7, #19]
      break;
 8017872:	e005      	b.n	8017880 <udp_bind+0x50>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8017874:	697b      	ldr	r3, [r7, #20]
 8017876:	68db      	ldr	r3, [r3, #12]
 8017878:	617b      	str	r3, [r7, #20]
 801787a:	697b      	ldr	r3, [r7, #20]
 801787c:	2b00      	cmp	r3, #0
 801787e:	d1f2      	bne.n	8017866 <udp_bind+0x36>
    }
  }

  /* no port specified? */
  if (port == 0) {
 8017880:	88fb      	ldrh	r3, [r7, #6]
 8017882:	2b00      	cmp	r3, #0
 8017884:	d109      	bne.n	801789a <udp_bind+0x6a>
    port = udp_new_port();
 8017886:	f7ff fe79 	bl	801757c <udp_new_port>
 801788a:	4603      	mov	r3, r0
 801788c:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 801788e:	88fb      	ldrh	r3, [r7, #6]
 8017890:	2b00      	cmp	r3, #0
 8017892:	d11e      	bne.n	80178d2 <udp_bind+0xa2>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 8017894:	f06f 0307 	mvn.w	r3, #7
 8017898:	e032      	b.n	8017900 <udp_bind+0xd0>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801789a:	4b1c      	ldr	r3, [pc, #112]	; (801790c <udp_bind+0xdc>)
 801789c:	681b      	ldr	r3, [r3, #0]
 801789e:	617b      	str	r3, [r7, #20]
 80178a0:	e014      	b.n	80178cc <udp_bind+0x9c>
      if (pcb != ipcb) {
 80178a2:	68fa      	ldr	r2, [r7, #12]
 80178a4:	697b      	ldr	r3, [r7, #20]
 80178a6:	429a      	cmp	r2, r3
 80178a8:	d00d      	beq.n	80178c6 <udp_bind+0x96>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 80178aa:	697b      	ldr	r3, [r7, #20]
 80178ac:	8a5b      	ldrh	r3, [r3, #18]
 80178ae:	88fa      	ldrh	r2, [r7, #6]
 80178b0:	429a      	cmp	r2, r3
 80178b2:	d108      	bne.n	80178c6 <udp_bind+0x96>
              /* IP address matches? */
              ip_addr_cmp(&ipcb->local_ip, ipaddr)) {
 80178b4:	697b      	ldr	r3, [r7, #20]
 80178b6:	681a      	ldr	r2, [r3, #0]
 80178b8:	68bb      	ldr	r3, [r7, #8]
 80178ba:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 80178bc:	429a      	cmp	r2, r3
 80178be:	d102      	bne.n	80178c6 <udp_bind+0x96>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 80178c0:	f06f 0307 	mvn.w	r3, #7
 80178c4:	e01c      	b.n	8017900 <udp_bind+0xd0>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 80178c6:	697b      	ldr	r3, [r7, #20]
 80178c8:	68db      	ldr	r3, [r3, #12]
 80178ca:	617b      	str	r3, [r7, #20]
 80178cc:	697b      	ldr	r3, [r7, #20]
 80178ce:	2b00      	cmp	r3, #0
 80178d0:	d1e7      	bne.n	80178a2 <udp_bind+0x72>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 80178d2:	68bb      	ldr	r3, [r7, #8]
 80178d4:	2b00      	cmp	r3, #0
 80178d6:	d002      	beq.n	80178de <udp_bind+0xae>
 80178d8:	68bb      	ldr	r3, [r7, #8]
 80178da:	681b      	ldr	r3, [r3, #0]
 80178dc:	e000      	b.n	80178e0 <udp_bind+0xb0>
 80178de:	2300      	movs	r3, #0
 80178e0:	68fa      	ldr	r2, [r7, #12]
 80178e2:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 80178e4:	68fb      	ldr	r3, [r7, #12]
 80178e6:	88fa      	ldrh	r2, [r7, #6]
 80178e8:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 80178ea:	7cfb      	ldrb	r3, [r7, #19]
 80178ec:	2b00      	cmp	r3, #0
 80178ee:	d106      	bne.n	80178fe <udp_bind+0xce>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 80178f0:	4b06      	ldr	r3, [pc, #24]	; (801790c <udp_bind+0xdc>)
 80178f2:	681a      	ldr	r2, [r3, #0]
 80178f4:	68fb      	ldr	r3, [r7, #12]
 80178f6:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 80178f8:	4a04      	ldr	r2, [pc, #16]	; (801790c <udp_bind+0xdc>)
 80178fa:	68fb      	ldr	r3, [r7, #12]
 80178fc:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, &pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 80178fe:	2300      	movs	r3, #0
}
 8017900:	4618      	mov	r0, r3
 8017902:	3718      	adds	r7, #24
 8017904:	46bd      	mov	sp, r7
 8017906:	bd80      	pop	{r7, pc}
 8017908:	0801e800 	.word	0x0801e800
 801790c:	2000ab58 	.word	0x2000ab58

08017910 <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 8017910:	b480      	push	{r7}
 8017912:	b085      	sub	sp, #20
 8017914:	af00      	add	r7, sp, #0
 8017916:	60f8      	str	r0, [r7, #12]
 8017918:	60b9      	str	r1, [r7, #8]
 801791a:	607a      	str	r2, [r7, #4]
  /* remember recv() callback and user data */
  pcb->recv = recv;
 801791c:	68fb      	ldr	r3, [r7, #12]
 801791e:	68ba      	ldr	r2, [r7, #8]
 8017920:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 8017922:	68fb      	ldr	r3, [r7, #12]
 8017924:	687a      	ldr	r2, [r7, #4]
 8017926:	61da      	str	r2, [r3, #28]
}
 8017928:	bf00      	nop
 801792a:	3714      	adds	r7, #20
 801792c:	46bd      	mov	sp, r7
 801792e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017932:	4770      	bx	lr

08017934 <udp_remove>:
 *
 * @see udp_new()
 */
void
udp_remove(struct udp_pcb *pcb)
{
 8017934:	b580      	push	{r7, lr}
 8017936:	b084      	sub	sp, #16
 8017938:	af00      	add	r7, sp, #0
 801793a:	6078      	str	r0, [r7, #4]
  struct udp_pcb *pcb2;

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 801793c:	4b15      	ldr	r3, [pc, #84]	; (8017994 <udp_remove+0x60>)
 801793e:	681b      	ldr	r3, [r3, #0]
 8017940:	687a      	ldr	r2, [r7, #4]
 8017942:	429a      	cmp	r2, r3
 8017944:	d105      	bne.n	8017952 <udp_remove+0x1e>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
 8017946:	4b13      	ldr	r3, [pc, #76]	; (8017994 <udp_remove+0x60>)
 8017948:	681b      	ldr	r3, [r3, #0]
 801794a:	68db      	ldr	r3, [r3, #12]
 801794c:	4a11      	ldr	r2, [pc, #68]	; (8017994 <udp_remove+0x60>)
 801794e:	6013      	str	r3, [r2, #0]
 8017950:	e017      	b.n	8017982 <udp_remove+0x4e>
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 8017952:	4b10      	ldr	r3, [pc, #64]	; (8017994 <udp_remove+0x60>)
 8017954:	681b      	ldr	r3, [r3, #0]
 8017956:	60fb      	str	r3, [r7, #12]
 8017958:	e010      	b.n	801797c <udp_remove+0x48>
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
 801795a:	68fb      	ldr	r3, [r7, #12]
 801795c:	68db      	ldr	r3, [r3, #12]
 801795e:	2b00      	cmp	r3, #0
 8017960:	d009      	beq.n	8017976 <udp_remove+0x42>
 8017962:	68fb      	ldr	r3, [r7, #12]
 8017964:	68db      	ldr	r3, [r3, #12]
 8017966:	687a      	ldr	r2, [r7, #4]
 8017968:	429a      	cmp	r2, r3
 801796a:	d104      	bne.n	8017976 <udp_remove+0x42>
        /* remove pcb from list */
        pcb2->next = pcb->next;
 801796c:	687b      	ldr	r3, [r7, #4]
 801796e:	68da      	ldr	r2, [r3, #12]
 8017970:	68fb      	ldr	r3, [r7, #12]
 8017972:	60da      	str	r2, [r3, #12]
        break;
 8017974:	e005      	b.n	8017982 <udp_remove+0x4e>
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 8017976:	68fb      	ldr	r3, [r7, #12]
 8017978:	68db      	ldr	r3, [r3, #12]
 801797a:	60fb      	str	r3, [r7, #12]
 801797c:	68fb      	ldr	r3, [r7, #12]
 801797e:	2b00      	cmp	r3, #0
 8017980:	d1eb      	bne.n	801795a <udp_remove+0x26>
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 8017982:	6879      	ldr	r1, [r7, #4]
 8017984:	2000      	movs	r0, #0
 8017986:	f7f9 fa6d 	bl	8010e64 <memp_free>
}
 801798a:	bf00      	nop
 801798c:	3710      	adds	r7, #16
 801798e:	46bd      	mov	sp, r7
 8017990:	bd80      	pop	{r7, pc}
 8017992:	bf00      	nop
 8017994:	2000ab58 	.word	0x2000ab58

08017998 <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 8017998:	b580      	push	{r7, lr}
 801799a:	b082      	sub	sp, #8
 801799c:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;
  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 801799e:	2000      	movs	r0, #0
 80179a0:	f7f9 fa0e 	bl	8010dc0 <memp_malloc>
 80179a4:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 80179a6:	687b      	ldr	r3, [r7, #4]
 80179a8:	2b00      	cmp	r3, #0
 80179aa:	d007      	beq.n	80179bc <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 80179ac:	2220      	movs	r2, #32
 80179ae:	2100      	movs	r1, #0
 80179b0:	6878      	ldr	r0, [r7, #4]
 80179b2:	f003 f96d 	bl	801ac90 <memset>
    pcb->ttl = UDP_TTL;
 80179b6:	687b      	ldr	r3, [r7, #4]
 80179b8:	22ff      	movs	r2, #255	; 0xff
 80179ba:	729a      	strb	r2, [r3, #10]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 80179bc:	687b      	ldr	r3, [r7, #4]
}
 80179be:	4618      	mov	r0, r3
 80179c0:	3708      	adds	r7, #8
 80179c2:	46bd      	mov	sp, r7
 80179c4:	bd80      	pop	{r7, pc}

080179c6 <udp_new_ip_type>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new_ip_type(u8_t type)
{
 80179c6:	b580      	push	{r7, lr}
 80179c8:	b084      	sub	sp, #16
 80179ca:	af00      	add	r7, sp, #0
 80179cc:	4603      	mov	r3, r0
 80179ce:	71fb      	strb	r3, [r7, #7]
  struct udp_pcb *pcb;
  pcb = udp_new();
 80179d0:	f7ff ffe2 	bl	8017998 <udp_new>
 80179d4:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 80179d6:	68fb      	ldr	r3, [r7, #12]
}
 80179d8:	4618      	mov	r0, r3
 80179da:	3710      	adds	r7, #16
 80179dc:	46bd      	mov	sp, r7
 80179de:	bd80      	pop	{r7, pc}

080179e0 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t* old_addr, const ip_addr_t* new_addr)
{
 80179e0:	b480      	push	{r7}
 80179e2:	b085      	sub	sp, #20
 80179e4:	af00      	add	r7, sp, #0
 80179e6:	6078      	str	r0, [r7, #4]
 80179e8:	6039      	str	r1, [r7, #0]
  struct udp_pcb* upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 80179ea:	687b      	ldr	r3, [r7, #4]
 80179ec:	2b00      	cmp	r3, #0
 80179ee:	d01e      	beq.n	8017a2e <udp_netif_ip_addr_changed+0x4e>
 80179f0:	687b      	ldr	r3, [r7, #4]
 80179f2:	681b      	ldr	r3, [r3, #0]
 80179f4:	2b00      	cmp	r3, #0
 80179f6:	d01a      	beq.n	8017a2e <udp_netif_ip_addr_changed+0x4e>
 80179f8:	683b      	ldr	r3, [r7, #0]
 80179fa:	2b00      	cmp	r3, #0
 80179fc:	d017      	beq.n	8017a2e <udp_netif_ip_addr_changed+0x4e>
 80179fe:	683b      	ldr	r3, [r7, #0]
 8017a00:	681b      	ldr	r3, [r3, #0]
 8017a02:	2b00      	cmp	r3, #0
 8017a04:	d013      	beq.n	8017a2e <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8017a06:	4b0d      	ldr	r3, [pc, #52]	; (8017a3c <udp_netif_ip_addr_changed+0x5c>)
 8017a08:	681b      	ldr	r3, [r3, #0]
 8017a0a:	60fb      	str	r3, [r7, #12]
 8017a0c:	e00c      	b.n	8017a28 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 8017a0e:	68fb      	ldr	r3, [r7, #12]
 8017a10:	681a      	ldr	r2, [r3, #0]
 8017a12:	687b      	ldr	r3, [r7, #4]
 8017a14:	681b      	ldr	r3, [r3, #0]
 8017a16:	429a      	cmp	r2, r3
 8017a18:	d103      	bne.n	8017a22 <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 8017a1a:	683b      	ldr	r3, [r7, #0]
 8017a1c:	681a      	ldr	r2, [r3, #0]
 8017a1e:	68fb      	ldr	r3, [r7, #12]
 8017a20:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8017a22:	68fb      	ldr	r3, [r7, #12]
 8017a24:	68db      	ldr	r3, [r3, #12]
 8017a26:	60fb      	str	r3, [r7, #12]
 8017a28:	68fb      	ldr	r3, [r7, #12]
 8017a2a:	2b00      	cmp	r3, #0
 8017a2c:	d1ef      	bne.n	8017a0e <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 8017a2e:	bf00      	nop
 8017a30:	3714      	adds	r7, #20
 8017a32:	46bd      	mov	sp, r7
 8017a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017a38:	4770      	bx	lr
 8017a3a:	bf00      	nop
 8017a3c:	2000ab58 	.word	0x2000ab58

08017a40 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 8017a40:	b580      	push	{r7, lr}
 8017a42:	b082      	sub	sp, #8
 8017a44:	af00      	add	r7, sp, #0
 8017a46:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 8017a48:	4915      	ldr	r1, [pc, #84]	; (8017aa0 <etharp_free_entry+0x60>)
 8017a4a:	687a      	ldr	r2, [r7, #4]
 8017a4c:	4613      	mov	r3, r2
 8017a4e:	005b      	lsls	r3, r3, #1
 8017a50:	4413      	add	r3, r2
 8017a52:	00db      	lsls	r3, r3, #3
 8017a54:	440b      	add	r3, r1
 8017a56:	681b      	ldr	r3, [r3, #0]
 8017a58:	2b00      	cmp	r3, #0
 8017a5a:	d013      	beq.n	8017a84 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 8017a5c:	4910      	ldr	r1, [pc, #64]	; (8017aa0 <etharp_free_entry+0x60>)
 8017a5e:	687a      	ldr	r2, [r7, #4]
 8017a60:	4613      	mov	r3, r2
 8017a62:	005b      	lsls	r3, r3, #1
 8017a64:	4413      	add	r3, r2
 8017a66:	00db      	lsls	r3, r3, #3
 8017a68:	440b      	add	r3, r1
 8017a6a:	681b      	ldr	r3, [r3, #0]
 8017a6c:	4618      	mov	r0, r3
 8017a6e:	f7f9 ff53 	bl	8011918 <pbuf_free>
    arp_table[i].q = NULL;
 8017a72:	490b      	ldr	r1, [pc, #44]	; (8017aa0 <etharp_free_entry+0x60>)
 8017a74:	687a      	ldr	r2, [r7, #4]
 8017a76:	4613      	mov	r3, r2
 8017a78:	005b      	lsls	r3, r3, #1
 8017a7a:	4413      	add	r3, r2
 8017a7c:	00db      	lsls	r3, r3, #3
 8017a7e:	440b      	add	r3, r1
 8017a80:	2200      	movs	r2, #0
 8017a82:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 8017a84:	4906      	ldr	r1, [pc, #24]	; (8017aa0 <etharp_free_entry+0x60>)
 8017a86:	687a      	ldr	r2, [r7, #4]
 8017a88:	4613      	mov	r3, r2
 8017a8a:	005b      	lsls	r3, r3, #1
 8017a8c:	4413      	add	r3, r2
 8017a8e:	00db      	lsls	r3, r3, #3
 8017a90:	440b      	add	r3, r1
 8017a92:	3314      	adds	r3, #20
 8017a94:	2200      	movs	r2, #0
 8017a96:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 8017a98:	bf00      	nop
 8017a9a:	3708      	adds	r7, #8
 8017a9c:	46bd      	mov	sp, r7
 8017a9e:	bd80      	pop	{r7, pc}
 8017aa0:	20004248 	.word	0x20004248

08017aa4 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 8017aa4:	b580      	push	{r7, lr}
 8017aa6:	b082      	sub	sp, #8
 8017aa8:	af00      	add	r7, sp, #0
  u8_t i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8017aaa:	2300      	movs	r3, #0
 8017aac:	71fb      	strb	r3, [r7, #7]
 8017aae:	e096      	b.n	8017bde <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 8017ab0:	79fa      	ldrb	r2, [r7, #7]
 8017ab2:	494f      	ldr	r1, [pc, #316]	; (8017bf0 <etharp_tmr+0x14c>)
 8017ab4:	4613      	mov	r3, r2
 8017ab6:	005b      	lsls	r3, r3, #1
 8017ab8:	4413      	add	r3, r2
 8017aba:	00db      	lsls	r3, r3, #3
 8017abc:	440b      	add	r3, r1
 8017abe:	3314      	adds	r3, #20
 8017ac0:	781b      	ldrb	r3, [r3, #0]
 8017ac2:	71bb      	strb	r3, [r7, #6]
    if (state != ETHARP_STATE_EMPTY
 8017ac4:	79bb      	ldrb	r3, [r7, #6]
 8017ac6:	2b00      	cmp	r3, #0
 8017ac8:	f000 8086 	beq.w	8017bd8 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
      && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
      ) {
      arp_table[i].ctime++;
 8017acc:	79fa      	ldrb	r2, [r7, #7]
 8017ace:	4948      	ldr	r1, [pc, #288]	; (8017bf0 <etharp_tmr+0x14c>)
 8017ad0:	4613      	mov	r3, r2
 8017ad2:	005b      	lsls	r3, r3, #1
 8017ad4:	4413      	add	r3, r2
 8017ad6:	00db      	lsls	r3, r3, #3
 8017ad8:	440b      	add	r3, r1
 8017ada:	3312      	adds	r3, #18
 8017adc:	881b      	ldrh	r3, [r3, #0]
 8017ade:	3301      	adds	r3, #1
 8017ae0:	b298      	uxth	r0, r3
 8017ae2:	4943      	ldr	r1, [pc, #268]	; (8017bf0 <etharp_tmr+0x14c>)
 8017ae4:	4613      	mov	r3, r2
 8017ae6:	005b      	lsls	r3, r3, #1
 8017ae8:	4413      	add	r3, r2
 8017aea:	00db      	lsls	r3, r3, #3
 8017aec:	440b      	add	r3, r1
 8017aee:	3312      	adds	r3, #18
 8017af0:	4602      	mov	r2, r0
 8017af2:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8017af4:	79fa      	ldrb	r2, [r7, #7]
 8017af6:	493e      	ldr	r1, [pc, #248]	; (8017bf0 <etharp_tmr+0x14c>)
 8017af8:	4613      	mov	r3, r2
 8017afa:	005b      	lsls	r3, r3, #1
 8017afc:	4413      	add	r3, r2
 8017afe:	00db      	lsls	r3, r3, #3
 8017b00:	440b      	add	r3, r1
 8017b02:	3312      	adds	r3, #18
 8017b04:	881b      	ldrh	r3, [r3, #0]
 8017b06:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8017b0a:	d215      	bcs.n	8017b38 <etharp_tmr+0x94>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8017b0c:	79fa      	ldrb	r2, [r7, #7]
 8017b0e:	4938      	ldr	r1, [pc, #224]	; (8017bf0 <etharp_tmr+0x14c>)
 8017b10:	4613      	mov	r3, r2
 8017b12:	005b      	lsls	r3, r3, #1
 8017b14:	4413      	add	r3, r2
 8017b16:	00db      	lsls	r3, r3, #3
 8017b18:	440b      	add	r3, r1
 8017b1a:	3314      	adds	r3, #20
 8017b1c:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8017b1e:	2b01      	cmp	r3, #1
 8017b20:	d10f      	bne.n	8017b42 <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 8017b22:	79fa      	ldrb	r2, [r7, #7]
 8017b24:	4932      	ldr	r1, [pc, #200]	; (8017bf0 <etharp_tmr+0x14c>)
 8017b26:	4613      	mov	r3, r2
 8017b28:	005b      	lsls	r3, r3, #1
 8017b2a:	4413      	add	r3, r2
 8017b2c:	00db      	lsls	r3, r3, #3
 8017b2e:	440b      	add	r3, r1
 8017b30:	3312      	adds	r3, #18
 8017b32:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8017b34:	2b04      	cmp	r3, #4
 8017b36:	d904      	bls.n	8017b42 <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %"U16_F".\n",
             arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", (u16_t)i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 8017b38:	79fb      	ldrb	r3, [r7, #7]
 8017b3a:	4618      	mov	r0, r3
 8017b3c:	f7ff ff80 	bl	8017a40 <etharp_free_entry>
 8017b40:	e04a      	b.n	8017bd8 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 8017b42:	79fa      	ldrb	r2, [r7, #7]
 8017b44:	492a      	ldr	r1, [pc, #168]	; (8017bf0 <etharp_tmr+0x14c>)
 8017b46:	4613      	mov	r3, r2
 8017b48:	005b      	lsls	r3, r3, #1
 8017b4a:	4413      	add	r3, r2
 8017b4c:	00db      	lsls	r3, r3, #3
 8017b4e:	440b      	add	r3, r1
 8017b50:	3314      	adds	r3, #20
 8017b52:	781b      	ldrb	r3, [r3, #0]
 8017b54:	2b03      	cmp	r3, #3
 8017b56:	d10a      	bne.n	8017b6e <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 8017b58:	79fa      	ldrb	r2, [r7, #7]
 8017b5a:	4925      	ldr	r1, [pc, #148]	; (8017bf0 <etharp_tmr+0x14c>)
 8017b5c:	4613      	mov	r3, r2
 8017b5e:	005b      	lsls	r3, r3, #1
 8017b60:	4413      	add	r3, r2
 8017b62:	00db      	lsls	r3, r3, #3
 8017b64:	440b      	add	r3, r1
 8017b66:	3314      	adds	r3, #20
 8017b68:	2204      	movs	r2, #4
 8017b6a:	701a      	strb	r2, [r3, #0]
 8017b6c:	e034      	b.n	8017bd8 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 8017b6e:	79fa      	ldrb	r2, [r7, #7]
 8017b70:	491f      	ldr	r1, [pc, #124]	; (8017bf0 <etharp_tmr+0x14c>)
 8017b72:	4613      	mov	r3, r2
 8017b74:	005b      	lsls	r3, r3, #1
 8017b76:	4413      	add	r3, r2
 8017b78:	00db      	lsls	r3, r3, #3
 8017b7a:	440b      	add	r3, r1
 8017b7c:	3314      	adds	r3, #20
 8017b7e:	781b      	ldrb	r3, [r3, #0]
 8017b80:	2b04      	cmp	r3, #4
 8017b82:	d10a      	bne.n	8017b9a <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 8017b84:	79fa      	ldrb	r2, [r7, #7]
 8017b86:	491a      	ldr	r1, [pc, #104]	; (8017bf0 <etharp_tmr+0x14c>)
 8017b88:	4613      	mov	r3, r2
 8017b8a:	005b      	lsls	r3, r3, #1
 8017b8c:	4413      	add	r3, r2
 8017b8e:	00db      	lsls	r3, r3, #3
 8017b90:	440b      	add	r3, r1
 8017b92:	3314      	adds	r3, #20
 8017b94:	2202      	movs	r2, #2
 8017b96:	701a      	strb	r2, [r3, #0]
 8017b98:	e01e      	b.n	8017bd8 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8017b9a:	79fa      	ldrb	r2, [r7, #7]
 8017b9c:	4914      	ldr	r1, [pc, #80]	; (8017bf0 <etharp_tmr+0x14c>)
 8017b9e:	4613      	mov	r3, r2
 8017ba0:	005b      	lsls	r3, r3, #1
 8017ba2:	4413      	add	r3, r2
 8017ba4:	00db      	lsls	r3, r3, #3
 8017ba6:	440b      	add	r3, r1
 8017ba8:	3314      	adds	r3, #20
 8017baa:	781b      	ldrb	r3, [r3, #0]
 8017bac:	2b01      	cmp	r3, #1
 8017bae:	d113      	bne.n	8017bd8 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 8017bb0:	79fa      	ldrb	r2, [r7, #7]
 8017bb2:	490f      	ldr	r1, [pc, #60]	; (8017bf0 <etharp_tmr+0x14c>)
 8017bb4:	4613      	mov	r3, r2
 8017bb6:	005b      	lsls	r3, r3, #1
 8017bb8:	4413      	add	r3, r2
 8017bba:	00db      	lsls	r3, r3, #3
 8017bbc:	440b      	add	r3, r1
 8017bbe:	3308      	adds	r3, #8
 8017bc0:	6818      	ldr	r0, [r3, #0]
 8017bc2:	79fa      	ldrb	r2, [r7, #7]
 8017bc4:	4613      	mov	r3, r2
 8017bc6:	005b      	lsls	r3, r3, #1
 8017bc8:	4413      	add	r3, r2
 8017bca:	00db      	lsls	r3, r3, #3
 8017bcc:	4a08      	ldr	r2, [pc, #32]	; (8017bf0 <etharp_tmr+0x14c>)
 8017bce:	4413      	add	r3, r2
 8017bd0:	3304      	adds	r3, #4
 8017bd2:	4619      	mov	r1, r3
 8017bd4:	f000 fe38 	bl	8018848 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8017bd8:	79fb      	ldrb	r3, [r7, #7]
 8017bda:	3301      	adds	r3, #1
 8017bdc:	71fb      	strb	r3, [r7, #7]
 8017bde:	79fb      	ldrb	r3, [r7, #7]
 8017be0:	2b09      	cmp	r3, #9
 8017be2:	f67f af65 	bls.w	8017ab0 <etharp_tmr+0xc>
      }
    }
  }
}
 8017be6:	bf00      	nop
 8017be8:	3708      	adds	r7, #8
 8017bea:	46bd      	mov	sp, r7
 8017bec:	bd80      	pop	{r7, pc}
 8017bee:	bf00      	nop
 8017bf0:	20004248 	.word	0x20004248

08017bf4 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s8_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif* netif)
{
 8017bf4:	b580      	push	{r7, lr}
 8017bf6:	b088      	sub	sp, #32
 8017bf8:	af00      	add	r7, sp, #0
 8017bfa:	60f8      	str	r0, [r7, #12]
 8017bfc:	460b      	mov	r3, r1
 8017bfe:	607a      	str	r2, [r7, #4]
 8017c00:	72fb      	strb	r3, [r7, #11]
  s8_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 8017c02:	230a      	movs	r3, #10
 8017c04:	77fb      	strb	r3, [r7, #31]
 8017c06:	230a      	movs	r3, #10
 8017c08:	77bb      	strb	r3, [r7, #30]
  s8_t empty = ARP_TABLE_SIZE;
 8017c0a:	230a      	movs	r3, #10
 8017c0c:	777b      	strb	r3, [r7, #29]
  u8_t i = 0;
 8017c0e:	2300      	movs	r3, #0
 8017c10:	773b      	strb	r3, [r7, #28]
  /* oldest entry with packets on queue */
  s8_t old_queue = ARP_TABLE_SIZE;
 8017c12:	230a      	movs	r3, #10
 8017c14:	76fb      	strb	r3, [r7, #27]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 8017c16:	2300      	movs	r3, #0
 8017c18:	833b      	strh	r3, [r7, #24]
 8017c1a:	2300      	movs	r3, #0
 8017c1c:	82fb      	strh	r3, [r7, #22]
 8017c1e:	2300      	movs	r3, #0
 8017c20:	82bb      	strh	r3, [r7, #20]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8017c22:	2300      	movs	r3, #0
 8017c24:	773b      	strb	r3, [r7, #28]
 8017c26:	e093      	b.n	8017d50 <etharp_find_entry+0x15c>
    u8_t state = arp_table[i].state;
 8017c28:	7f3a      	ldrb	r2, [r7, #28]
 8017c2a:	4990      	ldr	r1, [pc, #576]	; (8017e6c <etharp_find_entry+0x278>)
 8017c2c:	4613      	mov	r3, r2
 8017c2e:	005b      	lsls	r3, r3, #1
 8017c30:	4413      	add	r3, r2
 8017c32:	00db      	lsls	r3, r3, #3
 8017c34:	440b      	add	r3, r1
 8017c36:	3314      	adds	r3, #20
 8017c38:	781b      	ldrb	r3, [r3, #0]
 8017c3a:	74fb      	strb	r3, [r7, #19]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 8017c3c:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8017c40:	2b0a      	cmp	r3, #10
 8017c42:	d105      	bne.n	8017c50 <etharp_find_entry+0x5c>
 8017c44:	7cfb      	ldrb	r3, [r7, #19]
 8017c46:	2b00      	cmp	r3, #0
 8017c48:	d102      	bne.n	8017c50 <etharp_find_entry+0x5c>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %"U16_F"\n", (u16_t)i));
      /* remember first empty entry */
      empty = i;
 8017c4a:	7f3b      	ldrb	r3, [r7, #28]
 8017c4c:	777b      	strb	r3, [r7, #29]
 8017c4e:	e07c      	b.n	8017d4a <etharp_find_entry+0x156>
    } else if (state != ETHARP_STATE_EMPTY) {
 8017c50:	7cfb      	ldrb	r3, [r7, #19]
 8017c52:	2b00      	cmp	r3, #0
 8017c54:	d079      	beq.n	8017d4a <etharp_find_entry+0x156>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 8017c56:	7cfb      	ldrb	r3, [r7, #19]
 8017c58:	2b01      	cmp	r3, #1
 8017c5a:	d009      	beq.n	8017c70 <etharp_find_entry+0x7c>
 8017c5c:	7cfb      	ldrb	r3, [r7, #19]
 8017c5e:	2b01      	cmp	r3, #1
 8017c60:	d806      	bhi.n	8017c70 <etharp_find_entry+0x7c>
 8017c62:	4b83      	ldr	r3, [pc, #524]	; (8017e70 <etharp_find_entry+0x27c>)
 8017c64:	f44f 7293 	mov.w	r2, #294	; 0x126
 8017c68:	4982      	ldr	r1, [pc, #520]	; (8017e74 <etharp_find_entry+0x280>)
 8017c6a:	4883      	ldr	r0, [pc, #524]	; (8017e78 <etharp_find_entry+0x284>)
 8017c6c:	f003 f8c0 	bl	801adf0 <iprintf>
        state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 8017c70:	68fb      	ldr	r3, [r7, #12]
 8017c72:	2b00      	cmp	r3, #0
 8017c74:	d00f      	beq.n	8017c96 <etharp_find_entry+0xa2>
 8017c76:	68fb      	ldr	r3, [r7, #12]
 8017c78:	6819      	ldr	r1, [r3, #0]
 8017c7a:	7f3a      	ldrb	r2, [r7, #28]
 8017c7c:	487b      	ldr	r0, [pc, #492]	; (8017e6c <etharp_find_entry+0x278>)
 8017c7e:	4613      	mov	r3, r2
 8017c80:	005b      	lsls	r3, r3, #1
 8017c82:	4413      	add	r3, r2
 8017c84:	00db      	lsls	r3, r3, #3
 8017c86:	4403      	add	r3, r0
 8017c88:	3304      	adds	r3, #4
 8017c8a:	681b      	ldr	r3, [r3, #0]
 8017c8c:	4299      	cmp	r1, r3
 8017c8e:	d102      	bne.n	8017c96 <etharp_find_entry+0xa2>
          && ((netif == NULL) || (netif == arp_table[i].netif))
#endif /* ETHARP_TABLE_MATCH_NETIF */
        ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %"U16_F"\n", (u16_t)i));
        /* found exact IP address match, simply bail out */
        return i;
 8017c90:	f997 301c 	ldrsb.w	r3, [r7, #28]
 8017c94:	e0e5      	b.n	8017e62 <etharp_find_entry+0x26e>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 8017c96:	7cfb      	ldrb	r3, [r7, #19]
 8017c98:	2b01      	cmp	r3, #1
 8017c9a:	d13b      	bne.n	8017d14 <etharp_find_entry+0x120>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 8017c9c:	7f3a      	ldrb	r2, [r7, #28]
 8017c9e:	4973      	ldr	r1, [pc, #460]	; (8017e6c <etharp_find_entry+0x278>)
 8017ca0:	4613      	mov	r3, r2
 8017ca2:	005b      	lsls	r3, r3, #1
 8017ca4:	4413      	add	r3, r2
 8017ca6:	00db      	lsls	r3, r3, #3
 8017ca8:	440b      	add	r3, r1
 8017caa:	681b      	ldr	r3, [r3, #0]
 8017cac:	2b00      	cmp	r3, #0
 8017cae:	d018      	beq.n	8017ce2 <etharp_find_entry+0xee>
          if (arp_table[i].ctime >= age_queue) {
 8017cb0:	7f3a      	ldrb	r2, [r7, #28]
 8017cb2:	496e      	ldr	r1, [pc, #440]	; (8017e6c <etharp_find_entry+0x278>)
 8017cb4:	4613      	mov	r3, r2
 8017cb6:	005b      	lsls	r3, r3, #1
 8017cb8:	4413      	add	r3, r2
 8017cba:	00db      	lsls	r3, r3, #3
 8017cbc:	440b      	add	r3, r1
 8017cbe:	3312      	adds	r3, #18
 8017cc0:	881b      	ldrh	r3, [r3, #0]
 8017cc2:	8b3a      	ldrh	r2, [r7, #24]
 8017cc4:	429a      	cmp	r2, r3
 8017cc6:	d840      	bhi.n	8017d4a <etharp_find_entry+0x156>
            old_queue = i;
 8017cc8:	7f3b      	ldrb	r3, [r7, #28]
 8017cca:	76fb      	strb	r3, [r7, #27]
            age_queue = arp_table[i].ctime;
 8017ccc:	7f3a      	ldrb	r2, [r7, #28]
 8017cce:	4967      	ldr	r1, [pc, #412]	; (8017e6c <etharp_find_entry+0x278>)
 8017cd0:	4613      	mov	r3, r2
 8017cd2:	005b      	lsls	r3, r3, #1
 8017cd4:	4413      	add	r3, r2
 8017cd6:	00db      	lsls	r3, r3, #3
 8017cd8:	440b      	add	r3, r1
 8017cda:	3312      	adds	r3, #18
 8017cdc:	881b      	ldrh	r3, [r3, #0]
 8017cde:	833b      	strh	r3, [r7, #24]
 8017ce0:	e033      	b.n	8017d4a <etharp_find_entry+0x156>
          }
        } else
        /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 8017ce2:	7f3a      	ldrb	r2, [r7, #28]
 8017ce4:	4961      	ldr	r1, [pc, #388]	; (8017e6c <etharp_find_entry+0x278>)
 8017ce6:	4613      	mov	r3, r2
 8017ce8:	005b      	lsls	r3, r3, #1
 8017cea:	4413      	add	r3, r2
 8017cec:	00db      	lsls	r3, r3, #3
 8017cee:	440b      	add	r3, r1
 8017cf0:	3312      	adds	r3, #18
 8017cf2:	881b      	ldrh	r3, [r3, #0]
 8017cf4:	8afa      	ldrh	r2, [r7, #22]
 8017cf6:	429a      	cmp	r2, r3
 8017cf8:	d827      	bhi.n	8017d4a <etharp_find_entry+0x156>
            old_pending = i;
 8017cfa:	7f3b      	ldrb	r3, [r7, #28]
 8017cfc:	77fb      	strb	r3, [r7, #31]
            age_pending = arp_table[i].ctime;
 8017cfe:	7f3a      	ldrb	r2, [r7, #28]
 8017d00:	495a      	ldr	r1, [pc, #360]	; (8017e6c <etharp_find_entry+0x278>)
 8017d02:	4613      	mov	r3, r2
 8017d04:	005b      	lsls	r3, r3, #1
 8017d06:	4413      	add	r3, r2
 8017d08:	00db      	lsls	r3, r3, #3
 8017d0a:	440b      	add	r3, r1
 8017d0c:	3312      	adds	r3, #18
 8017d0e:	881b      	ldrh	r3, [r3, #0]
 8017d10:	82fb      	strh	r3, [r7, #22]
 8017d12:	e01a      	b.n	8017d4a <etharp_find_entry+0x156>
          }
        }
      /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 8017d14:	7cfb      	ldrb	r3, [r7, #19]
 8017d16:	2b01      	cmp	r3, #1
 8017d18:	d917      	bls.n	8017d4a <etharp_find_entry+0x156>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 8017d1a:	7f3a      	ldrb	r2, [r7, #28]
 8017d1c:	4953      	ldr	r1, [pc, #332]	; (8017e6c <etharp_find_entry+0x278>)
 8017d1e:	4613      	mov	r3, r2
 8017d20:	005b      	lsls	r3, r3, #1
 8017d22:	4413      	add	r3, r2
 8017d24:	00db      	lsls	r3, r3, #3
 8017d26:	440b      	add	r3, r1
 8017d28:	3312      	adds	r3, #18
 8017d2a:	881b      	ldrh	r3, [r3, #0]
 8017d2c:	8aba      	ldrh	r2, [r7, #20]
 8017d2e:	429a      	cmp	r2, r3
 8017d30:	d80b      	bhi.n	8017d4a <etharp_find_entry+0x156>
            old_stable = i;
 8017d32:	7f3b      	ldrb	r3, [r7, #28]
 8017d34:	77bb      	strb	r3, [r7, #30]
            age_stable = arp_table[i].ctime;
 8017d36:	7f3a      	ldrb	r2, [r7, #28]
 8017d38:	494c      	ldr	r1, [pc, #304]	; (8017e6c <etharp_find_entry+0x278>)
 8017d3a:	4613      	mov	r3, r2
 8017d3c:	005b      	lsls	r3, r3, #1
 8017d3e:	4413      	add	r3, r2
 8017d40:	00db      	lsls	r3, r3, #3
 8017d42:	440b      	add	r3, r1
 8017d44:	3312      	adds	r3, #18
 8017d46:	881b      	ldrh	r3, [r3, #0]
 8017d48:	82bb      	strh	r3, [r7, #20]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8017d4a:	7f3b      	ldrb	r3, [r7, #28]
 8017d4c:	3301      	adds	r3, #1
 8017d4e:	773b      	strb	r3, [r7, #28]
 8017d50:	7f3b      	ldrb	r3, [r7, #28]
 8017d52:	2b09      	cmp	r3, #9
 8017d54:	f67f af68 	bls.w	8017c28 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 8017d58:	7afb      	ldrb	r3, [r7, #11]
 8017d5a:	f003 0302 	and.w	r3, r3, #2
 8017d5e:	2b00      	cmp	r3, #0
 8017d60:	d108      	bne.n	8017d74 <etharp_find_entry+0x180>
 8017d62:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8017d66:	2b0a      	cmp	r3, #10
 8017d68:	d107      	bne.n	8017d7a <etharp_find_entry+0x186>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 8017d6a:	7afb      	ldrb	r3, [r7, #11]
 8017d6c:	f003 0301 	and.w	r3, r3, #1
 8017d70:	2b00      	cmp	r3, #0
 8017d72:	d102      	bne.n	8017d7a <etharp_find_entry+0x186>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s8_t)ERR_MEM;
 8017d74:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8017d78:	e073      	b.n	8017e62 <etharp_find_entry+0x26e>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 8017d7a:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8017d7e:	2b09      	cmp	r3, #9
 8017d80:	dc02      	bgt.n	8017d88 <etharp_find_entry+0x194>
    i = empty;
 8017d82:	7f7b      	ldrb	r3, [r7, #29]
 8017d84:	773b      	strb	r3, [r7, #28]
 8017d86:	e036      	b.n	8017df6 <etharp_find_entry+0x202>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %"U16_F"\n", (u16_t)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 8017d88:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8017d8c:	2b09      	cmp	r3, #9
 8017d8e:	dc13      	bgt.n	8017db8 <etharp_find_entry+0x1c4>
      /* recycle oldest stable*/
      i = old_stable;
 8017d90:	7fbb      	ldrb	r3, [r7, #30]
 8017d92:	773b      	strb	r3, [r7, #28]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %"U16_F"\n", (u16_t)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 8017d94:	7f3a      	ldrb	r2, [r7, #28]
 8017d96:	4935      	ldr	r1, [pc, #212]	; (8017e6c <etharp_find_entry+0x278>)
 8017d98:	4613      	mov	r3, r2
 8017d9a:	005b      	lsls	r3, r3, #1
 8017d9c:	4413      	add	r3, r2
 8017d9e:	00db      	lsls	r3, r3, #3
 8017da0:	440b      	add	r3, r1
 8017da2:	681b      	ldr	r3, [r3, #0]
 8017da4:	2b00      	cmp	r3, #0
 8017da6:	d018      	beq.n	8017dda <etharp_find_entry+0x1e6>
 8017da8:	4b31      	ldr	r3, [pc, #196]	; (8017e70 <etharp_find_entry+0x27c>)
 8017daa:	f240 126f 	movw	r2, #367	; 0x16f
 8017dae:	4933      	ldr	r1, [pc, #204]	; (8017e7c <etharp_find_entry+0x288>)
 8017db0:	4831      	ldr	r0, [pc, #196]	; (8017e78 <etharp_find_entry+0x284>)
 8017db2:	f003 f81d 	bl	801adf0 <iprintf>
 8017db6:	e010      	b.n	8017dda <etharp_find_entry+0x1e6>
    /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 8017db8:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8017dbc:	2b09      	cmp	r3, #9
 8017dbe:	dc02      	bgt.n	8017dc6 <etharp_find_entry+0x1d2>
      /* recycle oldest pending */
      i = old_pending;
 8017dc0:	7ffb      	ldrb	r3, [r7, #31]
 8017dc2:	773b      	strb	r3, [r7, #28]
 8017dc4:	e009      	b.n	8017dda <etharp_find_entry+0x1e6>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %"U16_F" (without queue)\n", (u16_t)i));
    /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 8017dc6:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8017dca:	2b09      	cmp	r3, #9
 8017dcc:	dc02      	bgt.n	8017dd4 <etharp_find_entry+0x1e0>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 8017dce:	7efb      	ldrb	r3, [r7, #27]
 8017dd0:	773b      	strb	r3, [r7, #28]
 8017dd2:	e002      	b.n	8017dda <etharp_find_entry+0x1e6>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %"U16_F", freeing packet queue %p\n", (u16_t)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s8_t)ERR_MEM;
 8017dd4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8017dd8:	e043      	b.n	8017e62 <etharp_find_entry+0x26e>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8017dda:	7f3b      	ldrb	r3, [r7, #28]
 8017ddc:	2b09      	cmp	r3, #9
 8017dde:	d906      	bls.n	8017dee <etharp_find_entry+0x1fa>
 8017de0:	4b23      	ldr	r3, [pc, #140]	; (8017e70 <etharp_find_entry+0x27c>)
 8017de2:	f240 1281 	movw	r2, #385	; 0x181
 8017de6:	4926      	ldr	r1, [pc, #152]	; (8017e80 <etharp_find_entry+0x28c>)
 8017de8:	4823      	ldr	r0, [pc, #140]	; (8017e78 <etharp_find_entry+0x284>)
 8017dea:	f003 f801 	bl	801adf0 <iprintf>
    etharp_free_entry(i);
 8017dee:	7f3b      	ldrb	r3, [r7, #28]
 8017df0:	4618      	mov	r0, r3
 8017df2:	f7ff fe25 	bl	8017a40 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8017df6:	7f3b      	ldrb	r3, [r7, #28]
 8017df8:	2b09      	cmp	r3, #9
 8017dfa:	d906      	bls.n	8017e0a <etharp_find_entry+0x216>
 8017dfc:	4b1c      	ldr	r3, [pc, #112]	; (8017e70 <etharp_find_entry+0x27c>)
 8017dfe:	f240 1285 	movw	r2, #389	; 0x185
 8017e02:	491f      	ldr	r1, [pc, #124]	; (8017e80 <etharp_find_entry+0x28c>)
 8017e04:	481c      	ldr	r0, [pc, #112]	; (8017e78 <etharp_find_entry+0x284>)
 8017e06:	f002 fff3 	bl	801adf0 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 8017e0a:	7f3a      	ldrb	r2, [r7, #28]
 8017e0c:	4917      	ldr	r1, [pc, #92]	; (8017e6c <etharp_find_entry+0x278>)
 8017e0e:	4613      	mov	r3, r2
 8017e10:	005b      	lsls	r3, r3, #1
 8017e12:	4413      	add	r3, r2
 8017e14:	00db      	lsls	r3, r3, #3
 8017e16:	440b      	add	r3, r1
 8017e18:	3314      	adds	r3, #20
 8017e1a:	781b      	ldrb	r3, [r3, #0]
 8017e1c:	2b00      	cmp	r3, #0
 8017e1e:	d006      	beq.n	8017e2e <etharp_find_entry+0x23a>
 8017e20:	4b13      	ldr	r3, [pc, #76]	; (8017e70 <etharp_find_entry+0x27c>)
 8017e22:	f240 1287 	movw	r2, #391	; 0x187
 8017e26:	4917      	ldr	r1, [pc, #92]	; (8017e84 <etharp_find_entry+0x290>)
 8017e28:	4813      	ldr	r0, [pc, #76]	; (8017e78 <etharp_find_entry+0x284>)
 8017e2a:	f002 ffe1 	bl	801adf0 <iprintf>
    arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 8017e2e:	68fb      	ldr	r3, [r7, #12]
 8017e30:	2b00      	cmp	r3, #0
 8017e32:	d00a      	beq.n	8017e4a <etharp_find_entry+0x256>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 8017e34:	7f3a      	ldrb	r2, [r7, #28]
 8017e36:	68fb      	ldr	r3, [r7, #12]
 8017e38:	6819      	ldr	r1, [r3, #0]
 8017e3a:	480c      	ldr	r0, [pc, #48]	; (8017e6c <etharp_find_entry+0x278>)
 8017e3c:	4613      	mov	r3, r2
 8017e3e:	005b      	lsls	r3, r3, #1
 8017e40:	4413      	add	r3, r2
 8017e42:	00db      	lsls	r3, r3, #3
 8017e44:	4403      	add	r3, r0
 8017e46:	3304      	adds	r3, #4
 8017e48:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 8017e4a:	7f3a      	ldrb	r2, [r7, #28]
 8017e4c:	4907      	ldr	r1, [pc, #28]	; (8017e6c <etharp_find_entry+0x278>)
 8017e4e:	4613      	mov	r3, r2
 8017e50:	005b      	lsls	r3, r3, #1
 8017e52:	4413      	add	r3, r2
 8017e54:	00db      	lsls	r3, r3, #3
 8017e56:	440b      	add	r3, r1
 8017e58:	3312      	adds	r3, #18
 8017e5a:	2200      	movs	r2, #0
 8017e5c:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
#endif /* ETHARP_TABLE_MATCH_NETIF*/
  return (err_t)i;
 8017e5e:	f997 301c 	ldrsb.w	r3, [r7, #28]
}
 8017e62:	4618      	mov	r0, r3
 8017e64:	3720      	adds	r7, #32
 8017e66:	46bd      	mov	sp, r7
 8017e68:	bd80      	pop	{r7, pc}
 8017e6a:	bf00      	nop
 8017e6c:	20004248 	.word	0x20004248
 8017e70:	0801e014 	.word	0x0801e014
 8017e74:	0801e04c 	.word	0x0801e04c
 8017e78:	0801e08c 	.word	0x0801e08c
 8017e7c:	0801e0b4 	.word	0x0801e0b4
 8017e80:	0801e0cc 	.word	0x0801e0cc
 8017e84:	0801e0e0 	.word	0x0801e0e0

08017e88 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 8017e88:	b580      	push	{r7, lr}
 8017e8a:	b088      	sub	sp, #32
 8017e8c:	af02      	add	r7, sp, #8
 8017e8e:	60f8      	str	r0, [r7, #12]
 8017e90:	60b9      	str	r1, [r7, #8]
 8017e92:	607a      	str	r2, [r7, #4]
 8017e94:	70fb      	strb	r3, [r7, #3]
  s8_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 8017e96:	68fb      	ldr	r3, [r7, #12]
 8017e98:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8017e9c:	2b06      	cmp	r3, #6
 8017e9e:	d006      	beq.n	8017eae <etharp_update_arp_entry+0x26>
 8017ea0:	4b48      	ldr	r3, [pc, #288]	; (8017fc4 <etharp_update_arp_entry+0x13c>)
 8017ea2:	f240 12ab 	movw	r2, #427	; 0x1ab
 8017ea6:	4948      	ldr	r1, [pc, #288]	; (8017fc8 <etharp_update_arp_entry+0x140>)
 8017ea8:	4848      	ldr	r0, [pc, #288]	; (8017fcc <etharp_update_arp_entry+0x144>)
 8017eaa:	f002 ffa1 	bl	801adf0 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
    ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
    (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
    (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 8017eae:	68bb      	ldr	r3, [r7, #8]
 8017eb0:	2b00      	cmp	r3, #0
 8017eb2:	d012      	beq.n	8017eda <etharp_update_arp_entry+0x52>
 8017eb4:	68bb      	ldr	r3, [r7, #8]
 8017eb6:	681b      	ldr	r3, [r3, #0]
 8017eb8:	2b00      	cmp	r3, #0
 8017eba:	d00e      	beq.n	8017eda <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8017ebc:	68bb      	ldr	r3, [r7, #8]
 8017ebe:	681b      	ldr	r3, [r3, #0]
 8017ec0:	68f9      	ldr	r1, [r7, #12]
 8017ec2:	4618      	mov	r0, r3
 8017ec4:	f001 f8da 	bl	801907c <ip4_addr_isbroadcast_u32>
 8017ec8:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 8017eca:	2b00      	cmp	r3, #0
 8017ecc:	d105      	bne.n	8017eda <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 8017ece:	68bb      	ldr	r3, [r7, #8]
 8017ed0:	681b      	ldr	r3, [r3, #0]
 8017ed2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8017ed6:	2be0      	cmp	r3, #224	; 0xe0
 8017ed8:	d102      	bne.n	8017ee0 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8017eda:	f06f 030f 	mvn.w	r3, #15
 8017ede:	e06c      	b.n	8017fba <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 8017ee0:	78fb      	ldrb	r3, [r7, #3]
 8017ee2:	68fa      	ldr	r2, [r7, #12]
 8017ee4:	4619      	mov	r1, r3
 8017ee6:	68b8      	ldr	r0, [r7, #8]
 8017ee8:	f7ff fe84 	bl	8017bf4 <etharp_find_entry>
 8017eec:	4603      	mov	r3, r0
 8017eee:	75fb      	strb	r3, [r7, #23]
  /* bail out if no entry could be found */
  if (i < 0) {
 8017ef0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8017ef4:	2b00      	cmp	r3, #0
 8017ef6:	da02      	bge.n	8017efe <etharp_update_arp_entry+0x76>
    return (err_t)i;
 8017ef8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8017efc:	e05d      	b.n	8017fba <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 8017efe:	f997 2017 	ldrsb.w	r2, [r7, #23]
 8017f02:	4933      	ldr	r1, [pc, #204]	; (8017fd0 <etharp_update_arp_entry+0x148>)
 8017f04:	4613      	mov	r3, r2
 8017f06:	005b      	lsls	r3, r3, #1
 8017f08:	4413      	add	r3, r2
 8017f0a:	00db      	lsls	r3, r3, #3
 8017f0c:	440b      	add	r3, r1
 8017f0e:	3314      	adds	r3, #20
 8017f10:	2202      	movs	r2, #2
 8017f12:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 8017f14:	f997 2017 	ldrsb.w	r2, [r7, #23]
 8017f18:	492d      	ldr	r1, [pc, #180]	; (8017fd0 <etharp_update_arp_entry+0x148>)
 8017f1a:	4613      	mov	r3, r2
 8017f1c:	005b      	lsls	r3, r3, #1
 8017f1e:	4413      	add	r3, r2
 8017f20:	00db      	lsls	r3, r3, #3
 8017f22:	440b      	add	r3, r1
 8017f24:	3308      	adds	r3, #8
 8017f26:	68fa      	ldr	r2, [r7, #12]
 8017f28:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", (s16_t)i));
  /* update address */
  ETHADDR32_COPY(&arp_table[i].ethaddr, ethaddr);
 8017f2a:	f997 2017 	ldrsb.w	r2, [r7, #23]
 8017f2e:	4613      	mov	r3, r2
 8017f30:	005b      	lsls	r3, r3, #1
 8017f32:	4413      	add	r3, r2
 8017f34:	00db      	lsls	r3, r3, #3
 8017f36:	3308      	adds	r3, #8
 8017f38:	4a25      	ldr	r2, [pc, #148]	; (8017fd0 <etharp_update_arp_entry+0x148>)
 8017f3a:	4413      	add	r3, r2
 8017f3c:	3304      	adds	r3, #4
 8017f3e:	2206      	movs	r2, #6
 8017f40:	6879      	ldr	r1, [r7, #4]
 8017f42:	4618      	mov	r0, r3
 8017f44:	f002 fe99 	bl	801ac7a <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 8017f48:	f997 2017 	ldrsb.w	r2, [r7, #23]
 8017f4c:	4920      	ldr	r1, [pc, #128]	; (8017fd0 <etharp_update_arp_entry+0x148>)
 8017f4e:	4613      	mov	r3, r2
 8017f50:	005b      	lsls	r3, r3, #1
 8017f52:	4413      	add	r3, r2
 8017f54:	00db      	lsls	r3, r3, #3
 8017f56:	440b      	add	r3, r1
 8017f58:	3312      	adds	r3, #18
 8017f5a:	2200      	movs	r2, #0
 8017f5c:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 8017f5e:	f997 2017 	ldrsb.w	r2, [r7, #23]
 8017f62:	491b      	ldr	r1, [pc, #108]	; (8017fd0 <etharp_update_arp_entry+0x148>)
 8017f64:	4613      	mov	r3, r2
 8017f66:	005b      	lsls	r3, r3, #1
 8017f68:	4413      	add	r3, r2
 8017f6a:	00db      	lsls	r3, r3, #3
 8017f6c:	440b      	add	r3, r1
 8017f6e:	681b      	ldr	r3, [r3, #0]
 8017f70:	2b00      	cmp	r3, #0
 8017f72:	d021      	beq.n	8017fb8 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 8017f74:	f997 2017 	ldrsb.w	r2, [r7, #23]
 8017f78:	4915      	ldr	r1, [pc, #84]	; (8017fd0 <etharp_update_arp_entry+0x148>)
 8017f7a:	4613      	mov	r3, r2
 8017f7c:	005b      	lsls	r3, r3, #1
 8017f7e:	4413      	add	r3, r2
 8017f80:	00db      	lsls	r3, r3, #3
 8017f82:	440b      	add	r3, r1
 8017f84:	681b      	ldr	r3, [r3, #0]
 8017f86:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 8017f88:	f997 2017 	ldrsb.w	r2, [r7, #23]
 8017f8c:	4910      	ldr	r1, [pc, #64]	; (8017fd0 <etharp_update_arp_entry+0x148>)
 8017f8e:	4613      	mov	r3, r2
 8017f90:	005b      	lsls	r3, r3, #1
 8017f92:	4413      	add	r3, r2
 8017f94:	00db      	lsls	r3, r3, #3
 8017f96:	440b      	add	r3, r1
 8017f98:	2200      	movs	r2, #0
 8017f9a:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr*)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 8017f9c:	68fb      	ldr	r3, [r7, #12]
 8017f9e:	f103 022b 	add.w	r2, r3, #43	; 0x2b
 8017fa2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8017fa6:	9300      	str	r3, [sp, #0]
 8017fa8:	687b      	ldr	r3, [r7, #4]
 8017faa:	6939      	ldr	r1, [r7, #16]
 8017fac:	68f8      	ldr	r0, [r7, #12]
 8017fae:	f001 ff07 	bl	8019dc0 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 8017fb2:	6938      	ldr	r0, [r7, #16]
 8017fb4:	f7f9 fcb0 	bl	8011918 <pbuf_free>
  }
  return ERR_OK;
 8017fb8:	2300      	movs	r3, #0
}
 8017fba:	4618      	mov	r0, r3
 8017fbc:	3718      	adds	r7, #24
 8017fbe:	46bd      	mov	sp, r7
 8017fc0:	bd80      	pop	{r7, pc}
 8017fc2:	bf00      	nop
 8017fc4:	0801e014 	.word	0x0801e014
 8017fc8:	0801e10c 	.word	0x0801e10c
 8017fcc:	0801e08c 	.word	0x0801e08c
 8017fd0:	20004248 	.word	0x20004248

08017fd4 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 8017fd4:	b580      	push	{r7, lr}
 8017fd6:	b084      	sub	sp, #16
 8017fd8:	af00      	add	r7, sp, #0
 8017fda:	6078      	str	r0, [r7, #4]
  u8_t i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8017fdc:	2300      	movs	r3, #0
 8017fde:	73fb      	strb	r3, [r7, #15]
 8017fe0:	e01f      	b.n	8018022 <etharp_cleanup_netif+0x4e>
    u8_t state = arp_table[i].state;
 8017fe2:	7bfa      	ldrb	r2, [r7, #15]
 8017fe4:	4912      	ldr	r1, [pc, #72]	; (8018030 <etharp_cleanup_netif+0x5c>)
 8017fe6:	4613      	mov	r3, r2
 8017fe8:	005b      	lsls	r3, r3, #1
 8017fea:	4413      	add	r3, r2
 8017fec:	00db      	lsls	r3, r3, #3
 8017fee:	440b      	add	r3, r1
 8017ff0:	3314      	adds	r3, #20
 8017ff2:	781b      	ldrb	r3, [r3, #0]
 8017ff4:	73bb      	strb	r3, [r7, #14]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 8017ff6:	7bbb      	ldrb	r3, [r7, #14]
 8017ff8:	2b00      	cmp	r3, #0
 8017ffa:	d00f      	beq.n	801801c <etharp_cleanup_netif+0x48>
 8017ffc:	7bfa      	ldrb	r2, [r7, #15]
 8017ffe:	490c      	ldr	r1, [pc, #48]	; (8018030 <etharp_cleanup_netif+0x5c>)
 8018000:	4613      	mov	r3, r2
 8018002:	005b      	lsls	r3, r3, #1
 8018004:	4413      	add	r3, r2
 8018006:	00db      	lsls	r3, r3, #3
 8018008:	440b      	add	r3, r1
 801800a:	3308      	adds	r3, #8
 801800c:	681b      	ldr	r3, [r3, #0]
 801800e:	687a      	ldr	r2, [r7, #4]
 8018010:	429a      	cmp	r2, r3
 8018012:	d103      	bne.n	801801c <etharp_cleanup_netif+0x48>
      etharp_free_entry(i);
 8018014:	7bfb      	ldrb	r3, [r7, #15]
 8018016:	4618      	mov	r0, r3
 8018018:	f7ff fd12 	bl	8017a40 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801801c:	7bfb      	ldrb	r3, [r7, #15]
 801801e:	3301      	adds	r3, #1
 8018020:	73fb      	strb	r3, [r7, #15]
 8018022:	7bfb      	ldrb	r3, [r7, #15]
 8018024:	2b09      	cmp	r3, #9
 8018026:	d9dc      	bls.n	8017fe2 <etharp_cleanup_netif+0xe>
    }
  }
}
 8018028:	bf00      	nop
 801802a:	3710      	adds	r7, #16
 801802c:	46bd      	mov	sp, r7
 801802e:	bd80      	pop	{r7, pc}
 8018030:	20004248 	.word	0x20004248

08018034 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 8018034:	b5b0      	push	{r4, r5, r7, lr}
 8018036:	b08a      	sub	sp, #40	; 0x28
 8018038:	af04      	add	r7, sp, #16
 801803a:	6078      	str	r0, [r7, #4]
 801803c:	6039      	str	r1, [r7, #0]
  struct etharp_hdr *hdr;
  /* these are aligned properly, whereas the ARP header fields might not be */
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 801803e:	683b      	ldr	r3, [r7, #0]
 8018040:	2b00      	cmp	r3, #0
 8018042:	d107      	bne.n	8018054 <etharp_input+0x20>
 8018044:	4b3d      	ldr	r3, [pc, #244]	; (801813c <etharp_input+0x108>)
 8018046:	f44f 7222 	mov.w	r2, #648	; 0x288
 801804a:	493d      	ldr	r1, [pc, #244]	; (8018140 <etharp_input+0x10c>)
 801804c:	483d      	ldr	r0, [pc, #244]	; (8018144 <etharp_input+0x110>)
 801804e:	f002 fecf 	bl	801adf0 <iprintf>
 8018052:	e06f      	b.n	8018134 <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 8018054:	687b      	ldr	r3, [r7, #4]
 8018056:	685b      	ldr	r3, [r3, #4]
 8018058:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(HWTYPE_ETHERNET)) ||
 801805a:	693b      	ldr	r3, [r7, #16]
 801805c:	881b      	ldrh	r3, [r3, #0]
 801805e:	b29b      	uxth	r3, r3
 8018060:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8018064:	d10c      	bne.n	8018080 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8018066:	693b      	ldr	r3, [r7, #16]
 8018068:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(HWTYPE_ETHERNET)) ||
 801806a:	2b06      	cmp	r3, #6
 801806c:	d108      	bne.n	8018080 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 801806e:	693b      	ldr	r3, [r7, #16]
 8018070:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8018072:	2b04      	cmp	r3, #4
 8018074:	d104      	bne.n	8018080 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 8018076:	693b      	ldr	r3, [r7, #16]
 8018078:	885b      	ldrh	r3, [r3, #2]
 801807a:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 801807c:	2b08      	cmp	r3, #8
 801807e:	d003      	beq.n	8018088 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
      ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
      hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 8018080:	6878      	ldr	r0, [r7, #4]
 8018082:	f7f9 fc49 	bl	8011918 <pbuf_free>
    return;
 8018086:	e055      	b.n	8018134 <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr2 to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR2_COPY(&sipaddr, &hdr->sipaddr);
 8018088:	693b      	ldr	r3, [r7, #16]
 801808a:	330e      	adds	r3, #14
 801808c:	681b      	ldr	r3, [r3, #0]
 801808e:	60fb      	str	r3, [r7, #12]
  IPADDR2_COPY(&dipaddr, &hdr->dipaddr);
 8018090:	693b      	ldr	r3, [r7, #16]
 8018092:	3318      	adds	r3, #24
 8018094:	681b      	ldr	r3, [r3, #0]
 8018096:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8018098:	683b      	ldr	r3, [r7, #0]
 801809a:	3304      	adds	r3, #4
 801809c:	681b      	ldr	r3, [r3, #0]
 801809e:	2b00      	cmp	r3, #0
 80180a0:	d102      	bne.n	80180a8 <etharp_input+0x74>
    for_us = 0;
 80180a2:	2300      	movs	r3, #0
 80180a4:	75fb      	strb	r3, [r7, #23]
 80180a6:	e009      	b.n	80180bc <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 80180a8:	68ba      	ldr	r2, [r7, #8]
 80180aa:	683b      	ldr	r3, [r7, #0]
 80180ac:	3304      	adds	r3, #4
 80180ae:	681b      	ldr	r3, [r3, #0]
 80180b0:	429a      	cmp	r2, r3
 80180b2:	bf0c      	ite	eq
 80180b4:	2301      	moveq	r3, #1
 80180b6:	2300      	movne	r3, #0
 80180b8:	b2db      	uxtb	r3, r3
 80180ba:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 80180bc:	693b      	ldr	r3, [r7, #16]
 80180be:	f103 0208 	add.w	r2, r3, #8
 80180c2:	7dfb      	ldrb	r3, [r7, #23]
 80180c4:	2b00      	cmp	r3, #0
 80180c6:	d001      	beq.n	80180cc <etharp_input+0x98>
 80180c8:	2301      	movs	r3, #1
 80180ca:	e000      	b.n	80180ce <etharp_input+0x9a>
 80180cc:	2302      	movs	r3, #2
 80180ce:	f107 010c 	add.w	r1, r7, #12
 80180d2:	6838      	ldr	r0, [r7, #0]
 80180d4:	f7ff fed8 	bl	8017e88 <etharp_update_arp_entry>
                   for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 80180d8:	693b      	ldr	r3, [r7, #16]
 80180da:	88db      	ldrh	r3, [r3, #6]
 80180dc:	b29b      	uxth	r3, r3
 80180de:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80180e2:	d003      	beq.n	80180ec <etharp_input+0xb8>
 80180e4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80180e8:	d01e      	beq.n	8018128 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
    break;
  default:
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
    ETHARP_STATS_INC(etharp.err);
    break;
 80180ea:	e020      	b.n	801812e <etharp_input+0xfa>
    if (for_us) {
 80180ec:	7dfb      	ldrb	r3, [r7, #23]
 80180ee:	2b00      	cmp	r3, #0
 80180f0:	d01c      	beq.n	801812c <etharp_input+0xf8>
                 (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 80180f2:	683b      	ldr	r3, [r7, #0]
 80180f4:	f103 002b 	add.w	r0, r3, #43	; 0x2b
 80180f8:	693b      	ldr	r3, [r7, #16]
 80180fa:	f103 0408 	add.w	r4, r3, #8
                 (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 80180fe:	683b      	ldr	r3, [r7, #0]
 8018100:	f103 052b 	add.w	r5, r3, #43	; 0x2b
 8018104:	683b      	ldr	r3, [r7, #0]
 8018106:	3304      	adds	r3, #4
                 &hdr->shwaddr, &sipaddr,
 8018108:	693a      	ldr	r2, [r7, #16]
 801810a:	3208      	adds	r2, #8
      etharp_raw(netif,
 801810c:	2102      	movs	r1, #2
 801810e:	9103      	str	r1, [sp, #12]
 8018110:	f107 010c 	add.w	r1, r7, #12
 8018114:	9102      	str	r1, [sp, #8]
 8018116:	9201      	str	r2, [sp, #4]
 8018118:	9300      	str	r3, [sp, #0]
 801811a:	462b      	mov	r3, r5
 801811c:	4622      	mov	r2, r4
 801811e:	4601      	mov	r1, r0
 8018120:	6838      	ldr	r0, [r7, #0]
 8018122:	f000 fae3 	bl	80186ec <etharp_raw>
    break;
 8018126:	e001      	b.n	801812c <etharp_input+0xf8>
    break;
 8018128:	bf00      	nop
 801812a:	e000      	b.n	801812e <etharp_input+0xfa>
    break;
 801812c:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 801812e:	6878      	ldr	r0, [r7, #4]
 8018130:	f7f9 fbf2 	bl	8011918 <pbuf_free>
}
 8018134:	3718      	adds	r7, #24
 8018136:	46bd      	mov	sp, r7
 8018138:	bdb0      	pop	{r4, r5, r7, pc}
 801813a:	bf00      	nop
 801813c:	0801e014 	.word	0x0801e014
 8018140:	0801e164 	.word	0x0801e164
 8018144:	0801e08c 	.word	0x0801e08c

08018148 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, u8_t arp_idx)
{
 8018148:	b580      	push	{r7, lr}
 801814a:	b086      	sub	sp, #24
 801814c:	af02      	add	r7, sp, #8
 801814e:	60f8      	str	r0, [r7, #12]
 8018150:	60b9      	str	r1, [r7, #8]
 8018152:	4613      	mov	r3, r2
 8018154:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 8018156:	79fa      	ldrb	r2, [r7, #7]
 8018158:	4944      	ldr	r1, [pc, #272]	; (801826c <etharp_output_to_arp_index+0x124>)
 801815a:	4613      	mov	r3, r2
 801815c:	005b      	lsls	r3, r3, #1
 801815e:	4413      	add	r3, r2
 8018160:	00db      	lsls	r3, r3, #3
 8018162:	440b      	add	r3, r1
 8018164:	3314      	adds	r3, #20
 8018166:	781b      	ldrb	r3, [r3, #0]
 8018168:	2b01      	cmp	r3, #1
 801816a:	d806      	bhi.n	801817a <etharp_output_to_arp_index+0x32>
 801816c:	4b40      	ldr	r3, [pc, #256]	; (8018270 <etharp_output_to_arp_index+0x128>)
 801816e:	f240 22ed 	movw	r2, #749	; 0x2ed
 8018172:	4940      	ldr	r1, [pc, #256]	; (8018274 <etharp_output_to_arp_index+0x12c>)
 8018174:	4840      	ldr	r0, [pc, #256]	; (8018278 <etharp_output_to_arp_index+0x130>)
 8018176:	f002 fe3b 	bl	801adf0 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 801817a:	79fa      	ldrb	r2, [r7, #7]
 801817c:	493b      	ldr	r1, [pc, #236]	; (801826c <etharp_output_to_arp_index+0x124>)
 801817e:	4613      	mov	r3, r2
 8018180:	005b      	lsls	r3, r3, #1
 8018182:	4413      	add	r3, r2
 8018184:	00db      	lsls	r3, r3, #3
 8018186:	440b      	add	r3, r1
 8018188:	3314      	adds	r3, #20
 801818a:	781b      	ldrb	r3, [r3, #0]
 801818c:	2b02      	cmp	r3, #2
 801818e:	d153      	bne.n	8018238 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 8018190:	79fa      	ldrb	r2, [r7, #7]
 8018192:	4936      	ldr	r1, [pc, #216]	; (801826c <etharp_output_to_arp_index+0x124>)
 8018194:	4613      	mov	r3, r2
 8018196:	005b      	lsls	r3, r3, #1
 8018198:	4413      	add	r3, r2
 801819a:	00db      	lsls	r3, r3, #3
 801819c:	440b      	add	r3, r1
 801819e:	3312      	adds	r3, #18
 80181a0:	881b      	ldrh	r3, [r3, #0]
 80181a2:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 80181a6:	d919      	bls.n	80181dc <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 80181a8:	79fa      	ldrb	r2, [r7, #7]
 80181aa:	4613      	mov	r3, r2
 80181ac:	005b      	lsls	r3, r3, #1
 80181ae:	4413      	add	r3, r2
 80181b0:	00db      	lsls	r3, r3, #3
 80181b2:	4a2e      	ldr	r2, [pc, #184]	; (801826c <etharp_output_to_arp_index+0x124>)
 80181b4:	4413      	add	r3, r2
 80181b6:	3304      	adds	r3, #4
 80181b8:	4619      	mov	r1, r3
 80181ba:	68f8      	ldr	r0, [r7, #12]
 80181bc:	f000 fb44 	bl	8018848 <etharp_request>
 80181c0:	4603      	mov	r3, r0
 80181c2:	2b00      	cmp	r3, #0
 80181c4:	d138      	bne.n	8018238 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 80181c6:	79fa      	ldrb	r2, [r7, #7]
 80181c8:	4928      	ldr	r1, [pc, #160]	; (801826c <etharp_output_to_arp_index+0x124>)
 80181ca:	4613      	mov	r3, r2
 80181cc:	005b      	lsls	r3, r3, #1
 80181ce:	4413      	add	r3, r2
 80181d0:	00db      	lsls	r3, r3, #3
 80181d2:	440b      	add	r3, r1
 80181d4:	3314      	adds	r3, #20
 80181d6:	2203      	movs	r2, #3
 80181d8:	701a      	strb	r2, [r3, #0]
 80181da:	e02d      	b.n	8018238 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 80181dc:	79fa      	ldrb	r2, [r7, #7]
 80181de:	4923      	ldr	r1, [pc, #140]	; (801826c <etharp_output_to_arp_index+0x124>)
 80181e0:	4613      	mov	r3, r2
 80181e2:	005b      	lsls	r3, r3, #1
 80181e4:	4413      	add	r3, r2
 80181e6:	00db      	lsls	r3, r3, #3
 80181e8:	440b      	add	r3, r1
 80181ea:	3312      	adds	r3, #18
 80181ec:	881b      	ldrh	r3, [r3, #0]
 80181ee:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 80181f2:	d321      	bcc.n	8018238 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 80181f4:	79fa      	ldrb	r2, [r7, #7]
 80181f6:	4613      	mov	r3, r2
 80181f8:	005b      	lsls	r3, r3, #1
 80181fa:	4413      	add	r3, r2
 80181fc:	00db      	lsls	r3, r3, #3
 80181fe:	4a1b      	ldr	r2, [pc, #108]	; (801826c <etharp_output_to_arp_index+0x124>)
 8018200:	4413      	add	r3, r2
 8018202:	1d19      	adds	r1, r3, #4
 8018204:	79fa      	ldrb	r2, [r7, #7]
 8018206:	4613      	mov	r3, r2
 8018208:	005b      	lsls	r3, r3, #1
 801820a:	4413      	add	r3, r2
 801820c:	00db      	lsls	r3, r3, #3
 801820e:	3308      	adds	r3, #8
 8018210:	4a16      	ldr	r2, [pc, #88]	; (801826c <etharp_output_to_arp_index+0x124>)
 8018212:	4413      	add	r3, r2
 8018214:	3304      	adds	r3, #4
 8018216:	461a      	mov	r2, r3
 8018218:	68f8      	ldr	r0, [r7, #12]
 801821a:	f000 faf3 	bl	8018804 <etharp_request_dst>
 801821e:	4603      	mov	r3, r0
 8018220:	2b00      	cmp	r3, #0
 8018222:	d109      	bne.n	8018238 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8018224:	79fa      	ldrb	r2, [r7, #7]
 8018226:	4911      	ldr	r1, [pc, #68]	; (801826c <etharp_output_to_arp_index+0x124>)
 8018228:	4613      	mov	r3, r2
 801822a:	005b      	lsls	r3, r3, #1
 801822c:	4413      	add	r3, r2
 801822e:	00db      	lsls	r3, r3, #3
 8018230:	440b      	add	r3, r1
 8018232:	3314      	adds	r3, #20
 8018234:	2203      	movs	r2, #3
 8018236:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr*)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 8018238:	68fb      	ldr	r3, [r7, #12]
 801823a:	f103 012b 	add.w	r1, r3, #43	; 0x2b
 801823e:	79fa      	ldrb	r2, [r7, #7]
 8018240:	4613      	mov	r3, r2
 8018242:	005b      	lsls	r3, r3, #1
 8018244:	4413      	add	r3, r2
 8018246:	00db      	lsls	r3, r3, #3
 8018248:	3308      	adds	r3, #8
 801824a:	4a08      	ldr	r2, [pc, #32]	; (801826c <etharp_output_to_arp_index+0x124>)
 801824c:	4413      	add	r3, r2
 801824e:	1d1a      	adds	r2, r3, #4
 8018250:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8018254:	9300      	str	r3, [sp, #0]
 8018256:	4613      	mov	r3, r2
 8018258:	460a      	mov	r2, r1
 801825a:	68b9      	ldr	r1, [r7, #8]
 801825c:	68f8      	ldr	r0, [r7, #12]
 801825e:	f001 fdaf 	bl	8019dc0 <ethernet_output>
 8018262:	4603      	mov	r3, r0
}
 8018264:	4618      	mov	r0, r3
 8018266:	3710      	adds	r7, #16
 8018268:	46bd      	mov	sp, r7
 801826a:	bd80      	pop	{r7, pc}
 801826c:	20004248 	.word	0x20004248
 8018270:	0801e014 	.word	0x0801e014
 8018274:	0801e184 	.word	0x0801e184
 8018278:	0801e08c 	.word	0x0801e08c

0801827c <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 801827c:	b580      	push	{r7, lr}
 801827e:	b08a      	sub	sp, #40	; 0x28
 8018280:	af02      	add	r7, sp, #8
 8018282:	60f8      	str	r0, [r7, #12]
 8018284:	60b9      	str	r1, [r7, #8]
 8018286:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 8018288:	687b      	ldr	r3, [r7, #4]
 801828a:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT("netif != NULL", netif != NULL);
 801828c:	68fb      	ldr	r3, [r7, #12]
 801828e:	2b00      	cmp	r3, #0
 8018290:	d106      	bne.n	80182a0 <etharp_output+0x24>
 8018292:	4b69      	ldr	r3, [pc, #420]	; (8018438 <etharp_output+0x1bc>)
 8018294:	f240 321b 	movw	r2, #795	; 0x31b
 8018298:	4968      	ldr	r1, [pc, #416]	; (801843c <etharp_output+0x1c0>)
 801829a:	4869      	ldr	r0, [pc, #420]	; (8018440 <etharp_output+0x1c4>)
 801829c:	f002 fda8 	bl	801adf0 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 80182a0:	68bb      	ldr	r3, [r7, #8]
 80182a2:	2b00      	cmp	r3, #0
 80182a4:	d106      	bne.n	80182b4 <etharp_output+0x38>
 80182a6:	4b64      	ldr	r3, [pc, #400]	; (8018438 <etharp_output+0x1bc>)
 80182a8:	f44f 7247 	mov.w	r2, #796	; 0x31c
 80182ac:	4965      	ldr	r1, [pc, #404]	; (8018444 <etharp_output+0x1c8>)
 80182ae:	4864      	ldr	r0, [pc, #400]	; (8018440 <etharp_output+0x1c4>)
 80182b0:	f002 fd9e 	bl	801adf0 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 80182b4:	687b      	ldr	r3, [r7, #4]
 80182b6:	2b00      	cmp	r3, #0
 80182b8:	d106      	bne.n	80182c8 <etharp_output+0x4c>
 80182ba:	4b5f      	ldr	r3, [pc, #380]	; (8018438 <etharp_output+0x1bc>)
 80182bc:	f240 321d 	movw	r2, #797	; 0x31d
 80182c0:	4961      	ldr	r1, [pc, #388]	; (8018448 <etharp_output+0x1cc>)
 80182c2:	485f      	ldr	r0, [pc, #380]	; (8018440 <etharp_output+0x1c4>)
 80182c4:	f002 fd94 	bl	801adf0 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 80182c8:	687b      	ldr	r3, [r7, #4]
 80182ca:	681b      	ldr	r3, [r3, #0]
 80182cc:	68f9      	ldr	r1, [r7, #12]
 80182ce:	4618      	mov	r0, r3
 80182d0:	f000 fed4 	bl	801907c <ip4_addr_isbroadcast_u32>
 80182d4:	4603      	mov	r3, r0
 80182d6:	2b00      	cmp	r3, #0
 80182d8:	d002      	beq.n	80182e0 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 80182da:	4b5c      	ldr	r3, [pc, #368]	; (801844c <etharp_output+0x1d0>)
 80182dc:	61fb      	str	r3, [r7, #28]
 80182de:	e09b      	b.n	8018418 <etharp_output+0x19c>
  /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 80182e0:	687b      	ldr	r3, [r7, #4]
 80182e2:	681b      	ldr	r3, [r3, #0]
 80182e4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80182e8:	2be0      	cmp	r3, #224	; 0xe0
 80182ea:	d118      	bne.n	801831e <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 80182ec:	2301      	movs	r3, #1
 80182ee:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 80182f0:	2300      	movs	r3, #0
 80182f2:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 80182f4:	235e      	movs	r3, #94	; 0x5e
 80182f6:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 80182f8:	687b      	ldr	r3, [r7, #4]
 80182fa:	3301      	adds	r3, #1
 80182fc:	781b      	ldrb	r3, [r3, #0]
 80182fe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8018302:	b2db      	uxtb	r3, r3
 8018304:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 8018306:	687b      	ldr	r3, [r7, #4]
 8018308:	3302      	adds	r3, #2
 801830a:	781b      	ldrb	r3, [r3, #0]
 801830c:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 801830e:	687b      	ldr	r3, [r7, #4]
 8018310:	3303      	adds	r3, #3
 8018312:	781b      	ldrb	r3, [r3, #0]
 8018314:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 8018316:	f107 0310 	add.w	r3, r7, #16
 801831a:	61fb      	str	r3, [r7, #28]
 801831c:	e07c      	b.n	8018418 <etharp_output+0x19c>
  /* unicast destination IP address? */
  } else {
    s8_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 801831e:	687b      	ldr	r3, [r7, #4]
 8018320:	681a      	ldr	r2, [r3, #0]
 8018322:	68fb      	ldr	r3, [r7, #12]
 8018324:	3304      	adds	r3, #4
 8018326:	681b      	ldr	r3, [r3, #0]
 8018328:	405a      	eors	r2, r3
 801832a:	68fb      	ldr	r3, [r7, #12]
 801832c:	3308      	adds	r3, #8
 801832e:	681b      	ldr	r3, [r3, #0]
 8018330:	4013      	ands	r3, r2
 8018332:	2b00      	cmp	r3, #0
 8018334:	d012      	beq.n	801835c <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 8018336:	687b      	ldr	r3, [r7, #4]
 8018338:	681b      	ldr	r3, [r3, #0]
 801833a:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 801833c:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 8018340:	4293      	cmp	r3, r2
 8018342:	d00b      	beq.n	801835c <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 8018344:	68fb      	ldr	r3, [r7, #12]
 8018346:	330c      	adds	r3, #12
 8018348:	681b      	ldr	r3, [r3, #0]
 801834a:	2b00      	cmp	r3, #0
 801834c:	d003      	beq.n	8018356 <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 801834e:	68fb      	ldr	r3, [r7, #12]
 8018350:	330c      	adds	r3, #12
 8018352:	61bb      	str	r3, [r7, #24]
 8018354:	e002      	b.n	801835c <etharp_output+0xe0>
          /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 8018356:	f06f 0303 	mvn.w	r3, #3
 801835a:	e069      	b.n	8018430 <etharp_output+0x1b4>
    if (netif->addr_hint != NULL) {
      /* per-pcb cached entry was given */
      u8_t etharp_cached_entry = *(netif->addr_hint);
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 801835c:	4b3c      	ldr	r3, [pc, #240]	; (8018450 <etharp_output+0x1d4>)
 801835e:	781b      	ldrb	r3, [r3, #0]
 8018360:	4619      	mov	r1, r3
 8018362:	4a3c      	ldr	r2, [pc, #240]	; (8018454 <etharp_output+0x1d8>)
 8018364:	460b      	mov	r3, r1
 8018366:	005b      	lsls	r3, r3, #1
 8018368:	440b      	add	r3, r1
 801836a:	00db      	lsls	r3, r3, #3
 801836c:	4413      	add	r3, r2
 801836e:	3314      	adds	r3, #20
 8018370:	781b      	ldrb	r3, [r3, #0]
 8018372:	2b01      	cmp	r3, #1
 8018374:	d917      	bls.n	80183a6 <etharp_output+0x12a>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 8018376:	69bb      	ldr	r3, [r7, #24]
 8018378:	681a      	ldr	r2, [r3, #0]
 801837a:	4b35      	ldr	r3, [pc, #212]	; (8018450 <etharp_output+0x1d4>)
 801837c:	781b      	ldrb	r3, [r3, #0]
 801837e:	4618      	mov	r0, r3
 8018380:	4934      	ldr	r1, [pc, #208]	; (8018454 <etharp_output+0x1d8>)
 8018382:	4603      	mov	r3, r0
 8018384:	005b      	lsls	r3, r3, #1
 8018386:	4403      	add	r3, r0
 8018388:	00db      	lsls	r3, r3, #3
 801838a:	440b      	add	r3, r1
 801838c:	3304      	adds	r3, #4
 801838e:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8018390:	429a      	cmp	r2, r3
 8018392:	d108      	bne.n	80183a6 <etharp_output+0x12a>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 8018394:	4b2e      	ldr	r3, [pc, #184]	; (8018450 <etharp_output+0x1d4>)
 8018396:	781b      	ldrb	r3, [r3, #0]
 8018398:	461a      	mov	r2, r3
 801839a:	68b9      	ldr	r1, [r7, #8]
 801839c:	68f8      	ldr	r0, [r7, #12]
 801839e:	f7ff fed3 	bl	8018148 <etharp_output_to_arp_index>
 80183a2:	4603      	mov	r3, r0
 80183a4:	e044      	b.n	8018430 <etharp_output+0x1b4>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 80183a6:	2300      	movs	r3, #0
 80183a8:	75fb      	strb	r3, [r7, #23]
 80183aa:	e02a      	b.n	8018402 <etharp_output+0x186>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 80183ac:	f997 2017 	ldrsb.w	r2, [r7, #23]
 80183b0:	4928      	ldr	r1, [pc, #160]	; (8018454 <etharp_output+0x1d8>)
 80183b2:	4613      	mov	r3, r2
 80183b4:	005b      	lsls	r3, r3, #1
 80183b6:	4413      	add	r3, r2
 80183b8:	00db      	lsls	r3, r3, #3
 80183ba:	440b      	add	r3, r1
 80183bc:	3314      	adds	r3, #20
 80183be:	781b      	ldrb	r3, [r3, #0]
 80183c0:	2b01      	cmp	r3, #1
 80183c2:	d918      	bls.n	80183f6 <etharp_output+0x17a>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 80183c4:	69bb      	ldr	r3, [r7, #24]
 80183c6:	6819      	ldr	r1, [r3, #0]
 80183c8:	f997 2017 	ldrsb.w	r2, [r7, #23]
 80183cc:	4821      	ldr	r0, [pc, #132]	; (8018454 <etharp_output+0x1d8>)
 80183ce:	4613      	mov	r3, r2
 80183d0:	005b      	lsls	r3, r3, #1
 80183d2:	4413      	add	r3, r2
 80183d4:	00db      	lsls	r3, r3, #3
 80183d6:	4403      	add	r3, r0
 80183d8:	3304      	adds	r3, #4
 80183da:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 80183dc:	4299      	cmp	r1, r3
 80183de:	d10a      	bne.n	80183f6 <etharp_output+0x17a>
        /* found an existing, stable entry */
        ETHARP_SET_HINT(netif, i);
 80183e0:	7dfa      	ldrb	r2, [r7, #23]
 80183e2:	4b1b      	ldr	r3, [pc, #108]	; (8018450 <etharp_output+0x1d4>)
 80183e4:	701a      	strb	r2, [r3, #0]
        return etharp_output_to_arp_index(netif, q, i);
 80183e6:	7dfb      	ldrb	r3, [r7, #23]
 80183e8:	461a      	mov	r2, r3
 80183ea:	68b9      	ldr	r1, [r7, #8]
 80183ec:	68f8      	ldr	r0, [r7, #12]
 80183ee:	f7ff feab 	bl	8018148 <etharp_output_to_arp_index>
 80183f2:	4603      	mov	r3, r0
 80183f4:	e01c      	b.n	8018430 <etharp_output+0x1b4>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 80183f6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80183fa:	b2db      	uxtb	r3, r3
 80183fc:	3301      	adds	r3, #1
 80183fe:	b2db      	uxtb	r3, r3
 8018400:	75fb      	strb	r3, [r7, #23]
 8018402:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8018406:	2b09      	cmp	r3, #9
 8018408:	ddd0      	ble.n	80183ac <etharp_output+0x130>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 801840a:	68ba      	ldr	r2, [r7, #8]
 801840c:	69b9      	ldr	r1, [r7, #24]
 801840e:	68f8      	ldr	r0, [r7, #12]
 8018410:	f000 f822 	bl	8018458 <etharp_query>
 8018414:	4603      	mov	r3, r0
 8018416:	e00b      	b.n	8018430 <etharp_output+0x1b4>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr*)(netif->hwaddr), dest, ETHTYPE_IP);
 8018418:	68fb      	ldr	r3, [r7, #12]
 801841a:	f103 022b 	add.w	r2, r3, #43	; 0x2b
 801841e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8018422:	9300      	str	r3, [sp, #0]
 8018424:	69fb      	ldr	r3, [r7, #28]
 8018426:	68b9      	ldr	r1, [r7, #8]
 8018428:	68f8      	ldr	r0, [r7, #12]
 801842a:	f001 fcc9 	bl	8019dc0 <ethernet_output>
 801842e:	4603      	mov	r3, r0
}
 8018430:	4618      	mov	r0, r3
 8018432:	3720      	adds	r7, #32
 8018434:	46bd      	mov	sp, r7
 8018436:	bd80      	pop	{r7, pc}
 8018438:	0801e014 	.word	0x0801e014
 801843c:	0801e164 	.word	0x0801e164
 8018440:	0801e08c 	.word	0x0801e08c
 8018444:	0801e1b4 	.word	0x0801e1b4
 8018448:	0801e154 	.word	0x0801e154
 801844c:	0801e804 	.word	0x0801e804
 8018450:	20004338 	.word	0x20004338
 8018454:	20004248 	.word	0x20004248

08018458 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 8018458:	b580      	push	{r7, lr}
 801845a:	b08c      	sub	sp, #48	; 0x30
 801845c:	af02      	add	r7, sp, #8
 801845e:	60f8      	str	r0, [r7, #12]
 8018460:	60b9      	str	r1, [r7, #8]
 8018462:	607a      	str	r2, [r7, #4]
  struct eth_addr * srcaddr = (struct eth_addr *)netif->hwaddr;
 8018464:	68fb      	ldr	r3, [r7, #12]
 8018466:	332b      	adds	r3, #43	; 0x2b
 8018468:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 801846a:	23ff      	movs	r3, #255	; 0xff
 801846c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 8018470:	2300      	movs	r3, #0
 8018472:	623b      	str	r3, [r7, #32]
  s8_t i; /* ARP entry index */

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8018474:	68bb      	ldr	r3, [r7, #8]
 8018476:	681b      	ldr	r3, [r3, #0]
 8018478:	68f9      	ldr	r1, [r7, #12]
 801847a:	4618      	mov	r0, r3
 801847c:	f000 fdfe 	bl	801907c <ip4_addr_isbroadcast_u32>
 8018480:	4603      	mov	r3, r0
 8018482:	2b00      	cmp	r3, #0
 8018484:	d10c      	bne.n	80184a0 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8018486:	68bb      	ldr	r3, [r7, #8]
 8018488:	681b      	ldr	r3, [r3, #0]
 801848a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 801848e:	2be0      	cmp	r3, #224	; 0xe0
 8018490:	d006      	beq.n	80184a0 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8018492:	68bb      	ldr	r3, [r7, #8]
 8018494:	2b00      	cmp	r3, #0
 8018496:	d003      	beq.n	80184a0 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 8018498:	68bb      	ldr	r3, [r7, #8]
 801849a:	681b      	ldr	r3, [r3, #0]
 801849c:	2b00      	cmp	r3, #0
 801849e:	d102      	bne.n	80184a6 <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 80184a0:	f06f 030f 	mvn.w	r3, #15
 80184a4:	e10f      	b.n	80186c6 <etharp_query+0x26e>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 80184a6:	68fa      	ldr	r2, [r7, #12]
 80184a8:	2101      	movs	r1, #1
 80184aa:	68b8      	ldr	r0, [r7, #8]
 80184ac:	f7ff fba2 	bl	8017bf4 <etharp_find_entry>
 80184b0:	4603      	mov	r3, r0
 80184b2:	74fb      	strb	r3, [r7, #19]

  /* could not find or create entry? */
  if (i < 0) {
 80184b4:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80184b8:	2b00      	cmp	r3, #0
 80184ba:	da02      	bge.n	80184c2 <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i;
 80184bc:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80184c0:	e101      	b.n	80186c6 <etharp_query+0x26e>
  }

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 80184c2:	f997 2013 	ldrsb.w	r2, [r7, #19]
 80184c6:	4982      	ldr	r1, [pc, #520]	; (80186d0 <etharp_query+0x278>)
 80184c8:	4613      	mov	r3, r2
 80184ca:	005b      	lsls	r3, r3, #1
 80184cc:	4413      	add	r3, r2
 80184ce:	00db      	lsls	r3, r3, #3
 80184d0:	440b      	add	r3, r1
 80184d2:	3314      	adds	r3, #20
 80184d4:	781b      	ldrb	r3, [r3, #0]
 80184d6:	2b00      	cmp	r3, #0
 80184d8:	d117      	bne.n	801850a <etharp_query+0xb2>
    is_new_entry = 1;
 80184da:	2301      	movs	r3, #1
 80184dc:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 80184de:	f997 2013 	ldrsb.w	r2, [r7, #19]
 80184e2:	497b      	ldr	r1, [pc, #492]	; (80186d0 <etharp_query+0x278>)
 80184e4:	4613      	mov	r3, r2
 80184e6:	005b      	lsls	r3, r3, #1
 80184e8:	4413      	add	r3, r2
 80184ea:	00db      	lsls	r3, r3, #3
 80184ec:	440b      	add	r3, r1
 80184ee:	3314      	adds	r3, #20
 80184f0:	2201      	movs	r2, #1
 80184f2:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 80184f4:	f997 2013 	ldrsb.w	r2, [r7, #19]
 80184f8:	4975      	ldr	r1, [pc, #468]	; (80186d0 <etharp_query+0x278>)
 80184fa:	4613      	mov	r3, r2
 80184fc:	005b      	lsls	r3, r3, #1
 80184fe:	4413      	add	r3, r2
 8018500:	00db      	lsls	r3, r3, #3
 8018502:	440b      	add	r3, r1
 8018504:	3308      	adds	r3, #8
 8018506:	68fa      	ldr	r2, [r7, #12]
 8018508:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 801850a:	f997 2013 	ldrsb.w	r2, [r7, #19]
 801850e:	4970      	ldr	r1, [pc, #448]	; (80186d0 <etharp_query+0x278>)
 8018510:	4613      	mov	r3, r2
 8018512:	005b      	lsls	r3, r3, #1
 8018514:	4413      	add	r3, r2
 8018516:	00db      	lsls	r3, r3, #3
 8018518:	440b      	add	r3, r1
 801851a:	3314      	adds	r3, #20
 801851c:	781b      	ldrb	r3, [r3, #0]
 801851e:	2b01      	cmp	r3, #1
 8018520:	d012      	beq.n	8018548 <etharp_query+0xf0>
 8018522:	f997 2013 	ldrsb.w	r2, [r7, #19]
 8018526:	496a      	ldr	r1, [pc, #424]	; (80186d0 <etharp_query+0x278>)
 8018528:	4613      	mov	r3, r2
 801852a:	005b      	lsls	r3, r3, #1
 801852c:	4413      	add	r3, r2
 801852e:	00db      	lsls	r3, r3, #3
 8018530:	440b      	add	r3, r1
 8018532:	3314      	adds	r3, #20
 8018534:	781b      	ldrb	r3, [r3, #0]
 8018536:	2b01      	cmp	r3, #1
 8018538:	d806      	bhi.n	8018548 <etharp_query+0xf0>
 801853a:	4b66      	ldr	r3, [pc, #408]	; (80186d4 <etharp_query+0x27c>)
 801853c:	f240 32c9 	movw	r2, #969	; 0x3c9
 8018540:	4965      	ldr	r1, [pc, #404]	; (80186d8 <etharp_query+0x280>)
 8018542:	4866      	ldr	r0, [pc, #408]	; (80186dc <etharp_query+0x284>)
 8018544:	f002 fc54 	bl	801adf0 <iprintf>
  ((arp_table[i].state == ETHARP_STATE_PENDING) ||
   (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 8018548:	6a3b      	ldr	r3, [r7, #32]
 801854a:	2b00      	cmp	r3, #0
 801854c:	d102      	bne.n	8018554 <etharp_query+0xfc>
 801854e:	687b      	ldr	r3, [r7, #4]
 8018550:	2b00      	cmp	r3, #0
 8018552:	d10c      	bne.n	801856e <etharp_query+0x116>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 8018554:	68b9      	ldr	r1, [r7, #8]
 8018556:	68f8      	ldr	r0, [r7, #12]
 8018558:	f000 f976 	bl	8018848 <etharp_request>
 801855c:	4603      	mov	r3, r0
 801855e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 8018562:	687b      	ldr	r3, [r7, #4]
 8018564:	2b00      	cmp	r3, #0
 8018566:	d102      	bne.n	801856e <etharp_query+0x116>
      return result;
 8018568:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 801856c:	e0ab      	b.n	80186c6 <etharp_query+0x26e>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 801856e:	687b      	ldr	r3, [r7, #4]
 8018570:	2b00      	cmp	r3, #0
 8018572:	d106      	bne.n	8018582 <etharp_query+0x12a>
 8018574:	4b57      	ldr	r3, [pc, #348]	; (80186d4 <etharp_query+0x27c>)
 8018576:	f240 32db 	movw	r2, #987	; 0x3db
 801857a:	4959      	ldr	r1, [pc, #356]	; (80186e0 <etharp_query+0x288>)
 801857c:	4857      	ldr	r0, [pc, #348]	; (80186dc <etharp_query+0x284>)
 801857e:	f002 fc37 	bl	801adf0 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 8018582:	f997 2013 	ldrsb.w	r2, [r7, #19]
 8018586:	4952      	ldr	r1, [pc, #328]	; (80186d0 <etharp_query+0x278>)
 8018588:	4613      	mov	r3, r2
 801858a:	005b      	lsls	r3, r3, #1
 801858c:	4413      	add	r3, r2
 801858e:	00db      	lsls	r3, r3, #3
 8018590:	440b      	add	r3, r1
 8018592:	3314      	adds	r3, #20
 8018594:	781b      	ldrb	r3, [r3, #0]
 8018596:	2b01      	cmp	r3, #1
 8018598:	d919      	bls.n	80185ce <etharp_query+0x176>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_HINT(netif, i);
 801859a:	7cfa      	ldrb	r2, [r7, #19]
 801859c:	4b51      	ldr	r3, [pc, #324]	; (80186e4 <etharp_query+0x28c>)
 801859e:	701a      	strb	r2, [r3, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 80185a0:	f997 2013 	ldrsb.w	r2, [r7, #19]
 80185a4:	4613      	mov	r3, r2
 80185a6:	005b      	lsls	r3, r3, #1
 80185a8:	4413      	add	r3, r2
 80185aa:	00db      	lsls	r3, r3, #3
 80185ac:	3308      	adds	r3, #8
 80185ae:	4a48      	ldr	r2, [pc, #288]	; (80186d0 <etharp_query+0x278>)
 80185b0:	4413      	add	r3, r2
 80185b2:	1d1a      	adds	r2, r3, #4
 80185b4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80185b8:	9300      	str	r3, [sp, #0]
 80185ba:	4613      	mov	r3, r2
 80185bc:	697a      	ldr	r2, [r7, #20]
 80185be:	6879      	ldr	r1, [r7, #4]
 80185c0:	68f8      	ldr	r0, [r7, #12]
 80185c2:	f001 fbfd 	bl	8019dc0 <ethernet_output>
 80185c6:	4603      	mov	r3, r0
 80185c8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80185cc:	e079      	b.n	80186c2 <etharp_query+0x26a>
  /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 80185ce:	f997 2013 	ldrsb.w	r2, [r7, #19]
 80185d2:	493f      	ldr	r1, [pc, #252]	; (80186d0 <etharp_query+0x278>)
 80185d4:	4613      	mov	r3, r2
 80185d6:	005b      	lsls	r3, r3, #1
 80185d8:	4413      	add	r3, r2
 80185da:	00db      	lsls	r3, r3, #3
 80185dc:	440b      	add	r3, r1
 80185de:	3314      	adds	r3, #20
 80185e0:	781b      	ldrb	r3, [r3, #0]
 80185e2:	2b01      	cmp	r3, #1
 80185e4:	d16d      	bne.n	80186c2 <etharp_query+0x26a>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 80185e6:	2300      	movs	r3, #0
 80185e8:	61bb      	str	r3, [r7, #24]
    /* IF q includes a PBUF_REF, PBUF_POOL or PBUF_RAM, we have no choice but
     * to copy the whole queue into a new PBUF_RAM (see bug #11400)
     * PBUF_ROMs can be left as they are, since ROM must not get changed. */
    p = q;
 80185ea:	687b      	ldr	r3, [r7, #4]
 80185ec:	61fb      	str	r3, [r7, #28]
    while (p) {
 80185ee:	e01a      	b.n	8018626 <etharp_query+0x1ce>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 80185f0:	69fb      	ldr	r3, [r7, #28]
 80185f2:	895a      	ldrh	r2, [r3, #10]
 80185f4:	69fb      	ldr	r3, [r7, #28]
 80185f6:	891b      	ldrh	r3, [r3, #8]
 80185f8:	429a      	cmp	r2, r3
 80185fa:	d10a      	bne.n	8018612 <etharp_query+0x1ba>
 80185fc:	69fb      	ldr	r3, [r7, #28]
 80185fe:	681b      	ldr	r3, [r3, #0]
 8018600:	2b00      	cmp	r3, #0
 8018602:	d006      	beq.n	8018612 <etharp_query+0x1ba>
 8018604:	4b33      	ldr	r3, [pc, #204]	; (80186d4 <etharp_query+0x27c>)
 8018606:	f44f 727b 	mov.w	r2, #1004	; 0x3ec
 801860a:	4937      	ldr	r1, [pc, #220]	; (80186e8 <etharp_query+0x290>)
 801860c:	4833      	ldr	r0, [pc, #204]	; (80186dc <etharp_query+0x284>)
 801860e:	f002 fbef 	bl	801adf0 <iprintf>
      if (p->type != PBUF_ROM) {
 8018612:	69fb      	ldr	r3, [r7, #28]
 8018614:	7b1b      	ldrb	r3, [r3, #12]
 8018616:	2b01      	cmp	r3, #1
 8018618:	d002      	beq.n	8018620 <etharp_query+0x1c8>
        copy_needed = 1;
 801861a:	2301      	movs	r3, #1
 801861c:	61bb      	str	r3, [r7, #24]
        break;
 801861e:	e005      	b.n	801862c <etharp_query+0x1d4>
      }
      p = p->next;
 8018620:	69fb      	ldr	r3, [r7, #28]
 8018622:	681b      	ldr	r3, [r3, #0]
 8018624:	61fb      	str	r3, [r7, #28]
    while (p) {
 8018626:	69fb      	ldr	r3, [r7, #28]
 8018628:	2b00      	cmp	r3, #0
 801862a:	d1e1      	bne.n	80185f0 <etharp_query+0x198>
    }
    if (copy_needed) {
 801862c:	69bb      	ldr	r3, [r7, #24]
 801862e:	2b00      	cmp	r3, #0
 8018630:	d017      	beq.n	8018662 <etharp_query+0x20a>
      /* copy the whole packet into new pbufs */
      p = pbuf_alloc(PBUF_LINK, p->tot_len, PBUF_RAM);
 8018632:	69fb      	ldr	r3, [r7, #28]
 8018634:	891b      	ldrh	r3, [r3, #8]
 8018636:	2200      	movs	r2, #0
 8018638:	4619      	mov	r1, r3
 801863a:	2002      	movs	r0, #2
 801863c:	f7f8 fdfa 	bl	8011234 <pbuf_alloc>
 8018640:	61f8      	str	r0, [r7, #28]
      if (p != NULL) {
 8018642:	69fb      	ldr	r3, [r7, #28]
 8018644:	2b00      	cmp	r3, #0
 8018646:	d011      	beq.n	801866c <etharp_query+0x214>
        if (pbuf_copy(p, q) != ERR_OK) {
 8018648:	6879      	ldr	r1, [r7, #4]
 801864a:	69f8      	ldr	r0, [r7, #28]
 801864c:	f7f9 fa94 	bl	8011b78 <pbuf_copy>
 8018650:	4603      	mov	r3, r0
 8018652:	2b00      	cmp	r3, #0
 8018654:	d00a      	beq.n	801866c <etharp_query+0x214>
          pbuf_free(p);
 8018656:	69f8      	ldr	r0, [r7, #28]
 8018658:	f7f9 f95e 	bl	8011918 <pbuf_free>
          p = NULL;
 801865c:	2300      	movs	r3, #0
 801865e:	61fb      	str	r3, [r7, #28]
 8018660:	e004      	b.n	801866c <etharp_query+0x214>
        }
      }
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 8018662:	687b      	ldr	r3, [r7, #4]
 8018664:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 8018666:	69f8      	ldr	r0, [r7, #28]
 8018668:	f7f9 fa08 	bl	8011a7c <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 801866c:	69fb      	ldr	r3, [r7, #28]
 801866e:	2b00      	cmp	r3, #0
 8018670:	d024      	beq.n	80186bc <etharp_query+0x264>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 8018672:	f997 2013 	ldrsb.w	r2, [r7, #19]
 8018676:	4916      	ldr	r1, [pc, #88]	; (80186d0 <etharp_query+0x278>)
 8018678:	4613      	mov	r3, r2
 801867a:	005b      	lsls	r3, r3, #1
 801867c:	4413      	add	r3, r2
 801867e:	00db      	lsls	r3, r3, #3
 8018680:	440b      	add	r3, r1
 8018682:	681b      	ldr	r3, [r3, #0]
 8018684:	2b00      	cmp	r3, #0
 8018686:	d00b      	beq.n	80186a0 <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"S16_F"\n", (void *)q, (s16_t)i));
        pbuf_free(arp_table[i].q);
 8018688:	f997 2013 	ldrsb.w	r2, [r7, #19]
 801868c:	4910      	ldr	r1, [pc, #64]	; (80186d0 <etharp_query+0x278>)
 801868e:	4613      	mov	r3, r2
 8018690:	005b      	lsls	r3, r3, #1
 8018692:	4413      	add	r3, r2
 8018694:	00db      	lsls	r3, r3, #3
 8018696:	440b      	add	r3, r1
 8018698:	681b      	ldr	r3, [r3, #0]
 801869a:	4618      	mov	r0, r3
 801869c:	f7f9 f93c 	bl	8011918 <pbuf_free>
      }
      arp_table[i].q = p;
 80186a0:	f997 2013 	ldrsb.w	r2, [r7, #19]
 80186a4:	490a      	ldr	r1, [pc, #40]	; (80186d0 <etharp_query+0x278>)
 80186a6:	4613      	mov	r3, r2
 80186a8:	005b      	lsls	r3, r3, #1
 80186aa:	4413      	add	r3, r2
 80186ac:	00db      	lsls	r3, r3, #3
 80186ae:	440b      	add	r3, r1
 80186b0:	69fa      	ldr	r2, [r7, #28]
 80186b2:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 80186b4:	2300      	movs	r3, #0
 80186b6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80186ba:	e002      	b.n	80186c2 <etharp_query+0x26a>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"S16_F"\n", (void *)q, (s16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 80186bc:	23ff      	movs	r3, #255	; 0xff
 80186be:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 80186c2:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 80186c6:	4618      	mov	r0, r3
 80186c8:	3728      	adds	r7, #40	; 0x28
 80186ca:	46bd      	mov	sp, r7
 80186cc:	bd80      	pop	{r7, pc}
 80186ce:	bf00      	nop
 80186d0:	20004248 	.word	0x20004248
 80186d4:	0801e014 	.word	0x0801e014
 80186d8:	0801e1c0 	.word	0x0801e1c0
 80186dc:	0801e08c 	.word	0x0801e08c
 80186e0:	0801e1b4 	.word	0x0801e1b4
 80186e4:	20004338 	.word	0x20004338
 80186e8:	0801e1e8 	.word	0x0801e1e8

080186ec <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 80186ec:	b580      	push	{r7, lr}
 80186ee:	b08a      	sub	sp, #40	; 0x28
 80186f0:	af02      	add	r7, sp, #8
 80186f2:	60f8      	str	r0, [r7, #12]
 80186f4:	60b9      	str	r1, [r7, #8]
 80186f6:	607a      	str	r2, [r7, #4]
 80186f8:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 80186fa:	2300      	movs	r3, #0
 80186fc:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 80186fe:	68fb      	ldr	r3, [r7, #12]
 8018700:	2b00      	cmp	r3, #0
 8018702:	d106      	bne.n	8018712 <etharp_raw+0x26>
 8018704:	4b3a      	ldr	r3, [pc, #232]	; (80187f0 <etharp_raw+0x104>)
 8018706:	f44f 628b 	mov.w	r2, #1112	; 0x458
 801870a:	493a      	ldr	r1, [pc, #232]	; (80187f4 <etharp_raw+0x108>)
 801870c:	483a      	ldr	r0, [pc, #232]	; (80187f8 <etharp_raw+0x10c>)
 801870e:	f002 fb6f 	bl	801adf0 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 8018712:	2200      	movs	r2, #0
 8018714:	211c      	movs	r1, #28
 8018716:	2002      	movs	r0, #2
 8018718:	f7f8 fd8c 	bl	8011234 <pbuf_alloc>
 801871c:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 801871e:	69bb      	ldr	r3, [r7, #24]
 8018720:	2b00      	cmp	r3, #0
 8018722:	d102      	bne.n	801872a <etharp_raw+0x3e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
      ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 8018724:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8018728:	e05d      	b.n	80187e6 <etharp_raw+0xfa>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 801872a:	69bb      	ldr	r3, [r7, #24]
 801872c:	895b      	ldrh	r3, [r3, #10]
 801872e:	2b1b      	cmp	r3, #27
 8018730:	d806      	bhi.n	8018740 <etharp_raw+0x54>
 8018732:	4b2f      	ldr	r3, [pc, #188]	; (80187f0 <etharp_raw+0x104>)
 8018734:	f240 4264 	movw	r2, #1124	; 0x464
 8018738:	4930      	ldr	r1, [pc, #192]	; (80187fc <etharp_raw+0x110>)
 801873a:	482f      	ldr	r0, [pc, #188]	; (80187f8 <etharp_raw+0x10c>)
 801873c:	f002 fb58 	bl	801adf0 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 8018740:	69bb      	ldr	r3, [r7, #24]
 8018742:	685b      	ldr	r3, [r3, #4]
 8018744:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 8018746:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8018748:	4618      	mov	r0, r3
 801874a:	f7f7 ff4b 	bl	80105e4 <lwip_htons>
 801874e:	4603      	mov	r3, r0
 8018750:	461a      	mov	r2, r3
 8018752:	697b      	ldr	r3, [r7, #20]
 8018754:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 8018756:	68fb      	ldr	r3, [r7, #12]
 8018758:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 801875c:	2b06      	cmp	r3, #6
 801875e:	d006      	beq.n	801876e <etharp_raw+0x82>
 8018760:	4b23      	ldr	r3, [pc, #140]	; (80187f0 <etharp_raw+0x104>)
 8018762:	f240 426b 	movw	r2, #1131	; 0x46b
 8018766:	4926      	ldr	r1, [pc, #152]	; (8018800 <etharp_raw+0x114>)
 8018768:	4823      	ldr	r0, [pc, #140]	; (80187f8 <etharp_raw+0x10c>)
 801876a:	f002 fb41 	bl	801adf0 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  ETHADDR16_COPY(&hdr->shwaddr, hwsrc_addr);
 801876e:	697b      	ldr	r3, [r7, #20]
 8018770:	3308      	adds	r3, #8
 8018772:	2206      	movs	r2, #6
 8018774:	6839      	ldr	r1, [r7, #0]
 8018776:	4618      	mov	r0, r3
 8018778:	f002 fa7f 	bl	801ac7a <memcpy>
  ETHADDR16_COPY(&hdr->dhwaddr, hwdst_addr);
 801877c:	697b      	ldr	r3, [r7, #20]
 801877e:	3312      	adds	r3, #18
 8018780:	2206      	movs	r2, #6
 8018782:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8018784:	4618      	mov	r0, r3
 8018786:	f002 fa78 	bl	801ac7a <memcpy>
  /* Copy struct ip4_addr2 to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR2_COPY(&hdr->sipaddr, ipsrc_addr);
 801878a:	697b      	ldr	r3, [r7, #20]
 801878c:	330e      	adds	r3, #14
 801878e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8018790:	6812      	ldr	r2, [r2, #0]
 8018792:	601a      	str	r2, [r3, #0]
  IPADDR2_COPY(&hdr->dipaddr, ipdst_addr);
 8018794:	697b      	ldr	r3, [r7, #20]
 8018796:	3318      	adds	r3, #24
 8018798:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801879a:	6812      	ldr	r2, [r2, #0]
 801879c:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(HWTYPE_ETHERNET);
 801879e:	697b      	ldr	r3, [r7, #20]
 80187a0:	2200      	movs	r2, #0
 80187a2:	701a      	strb	r2, [r3, #0]
 80187a4:	2200      	movs	r2, #0
 80187a6:	f042 0201 	orr.w	r2, r2, #1
 80187aa:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 80187ac:	697b      	ldr	r3, [r7, #20]
 80187ae:	2200      	movs	r2, #0
 80187b0:	f042 0208 	orr.w	r2, r2, #8
 80187b4:	709a      	strb	r2, [r3, #2]
 80187b6:	2200      	movs	r2, #0
 80187b8:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 80187ba:	697b      	ldr	r3, [r7, #20]
 80187bc:	2206      	movs	r2, #6
 80187be:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 80187c0:	697b      	ldr	r3, [r7, #20]
 80187c2:	2204      	movs	r2, #4
 80187c4:	715a      	strb	r2, [r3, #5]
  if(ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 80187c6:	f640 0306 	movw	r3, #2054	; 0x806
 80187ca:	9300      	str	r3, [sp, #0]
 80187cc:	687b      	ldr	r3, [r7, #4]
 80187ce:	68ba      	ldr	r2, [r7, #8]
 80187d0:	69b9      	ldr	r1, [r7, #24]
 80187d2:	68f8      	ldr	r0, [r7, #12]
 80187d4:	f001 faf4 	bl	8019dc0 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 80187d8:	69b8      	ldr	r0, [r7, #24]
 80187da:	f7f9 f89d 	bl	8011918 <pbuf_free>
  p = NULL;
 80187de:	2300      	movs	r3, #0
 80187e0:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 80187e2:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 80187e6:	4618      	mov	r0, r3
 80187e8:	3720      	adds	r7, #32
 80187ea:	46bd      	mov	sp, r7
 80187ec:	bd80      	pop	{r7, pc}
 80187ee:	bf00      	nop
 80187f0:	0801e014 	.word	0x0801e014
 80187f4:	0801e164 	.word	0x0801e164
 80187f8:	0801e08c 	.word	0x0801e08c
 80187fc:	0801e204 	.word	0x0801e204
 8018800:	0801e238 	.word	0x0801e238

08018804 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr* hw_dst_addr)
{
 8018804:	b580      	push	{r7, lr}
 8018806:	b088      	sub	sp, #32
 8018808:	af04      	add	r7, sp, #16
 801880a:	60f8      	str	r0, [r7, #12]
 801880c:	60b9      	str	r1, [r7, #8]
 801880e:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8018810:	68fb      	ldr	r3, [r7, #12]
 8018812:	f103 012b 	add.w	r1, r3, #43	; 0x2b
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 8018816:	68fb      	ldr	r3, [r7, #12]
 8018818:	f103 002b 	add.w	r0, r3, #43	; 0x2b
 801881c:	68fb      	ldr	r3, [r7, #12]
 801881e:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8018820:	2201      	movs	r2, #1
 8018822:	9203      	str	r2, [sp, #12]
 8018824:	68ba      	ldr	r2, [r7, #8]
 8018826:	9202      	str	r2, [sp, #8]
 8018828:	4a06      	ldr	r2, [pc, #24]	; (8018844 <etharp_request_dst+0x40>)
 801882a:	9201      	str	r2, [sp, #4]
 801882c:	9300      	str	r3, [sp, #0]
 801882e:	4603      	mov	r3, r0
 8018830:	687a      	ldr	r2, [r7, #4]
 8018832:	68f8      	ldr	r0, [r7, #12]
 8018834:	f7ff ff5a 	bl	80186ec <etharp_raw>
 8018838:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 801883a:	4618      	mov	r0, r3
 801883c:	3710      	adds	r7, #16
 801883e:	46bd      	mov	sp, r7
 8018840:	bd80      	pop	{r7, pc}
 8018842:	bf00      	nop
 8018844:	0801e80c 	.word	0x0801e80c

08018848 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 8018848:	b580      	push	{r7, lr}
 801884a:	b082      	sub	sp, #8
 801884c:	af00      	add	r7, sp, #0
 801884e:	6078      	str	r0, [r7, #4]
 8018850:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 8018852:	4a05      	ldr	r2, [pc, #20]	; (8018868 <etharp_request+0x20>)
 8018854:	6839      	ldr	r1, [r7, #0]
 8018856:	6878      	ldr	r0, [r7, #4]
 8018858:	f7ff ffd4 	bl	8018804 <etharp_request_dst>
 801885c:	4603      	mov	r3, r0
}
 801885e:	4618      	mov	r0, r3
 8018860:	3708      	adds	r7, #8
 8018862:	46bd      	mov	sp, r7
 8018864:	bd80      	pop	{r7, pc}
 8018866:	bf00      	nop
 8018868:	0801e804 	.word	0x0801e804

0801886c <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 801886c:	b580      	push	{r7, lr}
 801886e:	b08e      	sub	sp, #56	; 0x38
 8018870:	af04      	add	r7, sp, #16
 8018872:	6078      	str	r0, [r7, #4]
 8018874:	6039      	str	r1, [r7, #0]
  const ip4_addr_t* src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 8018876:	4b7a      	ldr	r3, [pc, #488]	; (8018a60 <icmp_input+0x1f4>)
 8018878:	689b      	ldr	r3, [r3, #8]
 801887a:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL(iphdr_in) * 4;
 801887c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801887e:	781b      	ldrb	r3, [r3, #0]
 8018880:	b29b      	uxth	r3, r3
 8018882:	f003 030f 	and.w	r3, r3, #15
 8018886:	b29b      	uxth	r3, r3
 8018888:	009b      	lsls	r3, r3, #2
 801888a:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 801888c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801888e:	2b13      	cmp	r3, #19
 8018890:	f240 80d1 	bls.w	8018a36 <icmp_input+0x1ca>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t)*2) {
 8018894:	687b      	ldr	r3, [r7, #4]
 8018896:	895b      	ldrh	r3, [r3, #10]
 8018898:	2b03      	cmp	r3, #3
 801889a:	f240 80ce 	bls.w	8018a3a <icmp_input+0x1ce>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 801889e:	687b      	ldr	r3, [r7, #4]
 80188a0:	685b      	ldr	r3, [r3, #4]
 80188a2:	781b      	ldrb	r3, [r3, #0]
 80188a4:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload)+1);
#endif /* LWIP_DEBUG */
  switch (type) {
 80188a8:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 80188ac:	2b00      	cmp	r3, #0
 80188ae:	f000 80bb 	beq.w	8018a28 <icmp_input+0x1bc>
 80188b2:	2b08      	cmp	r3, #8
 80188b4:	f040 80bb 	bne.w	8018a2e <icmp_input+0x1c2>
       (as obviously, an echo request has been sent, too). */
    MIB2_STATS_INC(mib2.icmpinechoreps);
    break;
  case ICMP_ECHO:
    MIB2_STATS_INC(mib2.icmpinechos);
    src = ip4_current_dest_addr();
 80188b8:	4b6a      	ldr	r3, [pc, #424]	; (8018a64 <icmp_input+0x1f8>)
 80188ba:	61fb      	str	r3, [r7, #28]
    /* multicast destination address? */
    if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 80188bc:	4b68      	ldr	r3, [pc, #416]	; (8018a60 <icmp_input+0x1f4>)
 80188be:	695b      	ldr	r3, [r3, #20]
 80188c0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80188c4:	2be0      	cmp	r3, #224	; 0xe0
 80188c6:	f000 80bf 	beq.w	8018a48 <icmp_input+0x1dc>
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
      goto icmperr;
#endif /* LWIP_MULTICAST_PING */
    }
    /* broadcast destination address? */
    if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 80188ca:	4b65      	ldr	r3, [pc, #404]	; (8018a60 <icmp_input+0x1f4>)
 80188cc:	695a      	ldr	r2, [r3, #20]
 80188ce:	4b64      	ldr	r3, [pc, #400]	; (8018a60 <icmp_input+0x1f4>)
 80188d0:	681b      	ldr	r3, [r3, #0]
 80188d2:	4619      	mov	r1, r3
 80188d4:	4610      	mov	r0, r2
 80188d6:	f000 fbd1 	bl	801907c <ip4_addr_isbroadcast_u32>
 80188da:	4603      	mov	r3, r0
 80188dc:	2b00      	cmp	r3, #0
 80188de:	f040 80b5 	bne.w	8018a4c <icmp_input+0x1e0>
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
      goto icmperr;
#endif /* LWIP_BROADCAST_PING */
    }
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
    if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 80188e2:	687b      	ldr	r3, [r7, #4]
 80188e4:	891b      	ldrh	r3, [r3, #8]
 80188e6:	2b07      	cmp	r3, #7
 80188e8:	f240 80a9 	bls.w	8018a3e <icmp_input+0x1d2>
        return;
      }
    }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
    if (pbuf_header(p, (s16_t)(hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN))) {
 80188ec:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80188ee:	330e      	adds	r3, #14
 80188f0:	b29b      	uxth	r3, r3
 80188f2:	b21b      	sxth	r3, r3
 80188f4:	4619      	mov	r1, r3
 80188f6:	6878      	ldr	r0, [r7, #4]
 80188f8:	f7f8 ffea 	bl	80118d0 <pbuf_header>
 80188fc:	4603      	mov	r3, r0
 80188fe:	2b00      	cmp	r3, #0
 8018900:	d046      	beq.n	8018990 <icmp_input+0x124>
      /* p is not big enough to contain link headers
       * allocate a new one and copy p into it
       */
      struct pbuf *r;
      /* allocate new packet buffer with space for link headers */
      r = pbuf_alloc(PBUF_LINK, p->tot_len + hlen, PBUF_RAM);
 8018902:	687b      	ldr	r3, [r7, #4]
 8018904:	891a      	ldrh	r2, [r3, #8]
 8018906:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8018908:	4413      	add	r3, r2
 801890a:	b29b      	uxth	r3, r3
 801890c:	2200      	movs	r2, #0
 801890e:	4619      	mov	r1, r3
 8018910:	2002      	movs	r0, #2
 8018912:	f7f8 fc8f 	bl	8011234 <pbuf_alloc>
 8018916:	61b8      	str	r0, [r7, #24]
      if (r == NULL) {
 8018918:	69bb      	ldr	r3, [r7, #24]
 801891a:	2b00      	cmp	r3, #0
 801891c:	f000 8098 	beq.w	8018a50 <icmp_input+0x1e4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
        goto icmperr;
      }
      if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 8018920:	69bb      	ldr	r3, [r7, #24]
 8018922:	895b      	ldrh	r3, [r3, #10]
 8018924:	461a      	mov	r2, r3
 8018926:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8018928:	3308      	adds	r3, #8
 801892a:	429a      	cmp	r2, r3
 801892c:	d203      	bcs.n	8018936 <icmp_input+0xca>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
        pbuf_free(r);
 801892e:	69b8      	ldr	r0, [r7, #24]
 8018930:	f7f8 fff2 	bl	8011918 <pbuf_free>
        goto icmperr;
 8018934:	e08d      	b.n	8018a52 <icmp_input+0x1e6>
      }
      /* copy the ip header */
      MEMCPY(r->payload, iphdr_in, hlen);
 8018936:	69bb      	ldr	r3, [r7, #24]
 8018938:	685b      	ldr	r3, [r3, #4]
 801893a:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 801893c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801893e:	4618      	mov	r0, r3
 8018940:	f002 f99b 	bl	801ac7a <memcpy>
      /* switch r->payload back to icmp header (cannot fail) */
      if (pbuf_header(r, (s16_t)-hlen)) {
 8018944:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8018946:	425b      	negs	r3, r3
 8018948:	b29b      	uxth	r3, r3
 801894a:	b21b      	sxth	r3, r3
 801894c:	4619      	mov	r1, r3
 801894e:	69b8      	ldr	r0, [r7, #24]
 8018950:	f7f8 ffbe 	bl	80118d0 <pbuf_header>
 8018954:	4603      	mov	r3, r0
 8018956:	2b00      	cmp	r3, #0
 8018958:	d009      	beq.n	801896e <icmp_input+0x102>
        LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 801895a:	4b43      	ldr	r3, [pc, #268]	; (8018a68 <icmp_input+0x1fc>)
 801895c:	22af      	movs	r2, #175	; 0xaf
 801895e:	4943      	ldr	r1, [pc, #268]	; (8018a6c <icmp_input+0x200>)
 8018960:	4843      	ldr	r0, [pc, #268]	; (8018a70 <icmp_input+0x204>)
 8018962:	f002 fa45 	bl	801adf0 <iprintf>
        pbuf_free(r);
 8018966:	69b8      	ldr	r0, [r7, #24]
 8018968:	f7f8 ffd6 	bl	8011918 <pbuf_free>
        goto icmperr;
 801896c:	e071      	b.n	8018a52 <icmp_input+0x1e6>
      }
      /* copy the rest of the packet without ip header */
      if (pbuf_copy(r, p) != ERR_OK) {
 801896e:	6879      	ldr	r1, [r7, #4]
 8018970:	69b8      	ldr	r0, [r7, #24]
 8018972:	f7f9 f901 	bl	8011b78 <pbuf_copy>
 8018976:	4603      	mov	r3, r0
 8018978:	2b00      	cmp	r3, #0
 801897a:	d003      	beq.n	8018984 <icmp_input+0x118>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
        pbuf_free(r);
 801897c:	69b8      	ldr	r0, [r7, #24]
 801897e:	f7f8 ffcb 	bl	8011918 <pbuf_free>
        goto icmperr;
 8018982:	e066      	b.n	8018a52 <icmp_input+0x1e6>
      }
      /* free the original p */
      pbuf_free(p);
 8018984:	6878      	ldr	r0, [r7, #4]
 8018986:	f7f8 ffc7 	bl	8011918 <pbuf_free>
      /* we now have an identical copy of p that has room for link headers */
      p = r;
 801898a:	69bb      	ldr	r3, [r7, #24]
 801898c:	607b      	str	r3, [r7, #4]
 801898e:	e015      	b.n	80189bc <icmp_input+0x150>
    } else {
      /* restore p->payload to point to icmp header (cannot fail) */
      if (pbuf_header(p, -(s16_t)(hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN))) {
 8018990:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8018992:	f1c3 23ff 	rsb	r3, r3, #4278255360	; 0xff00ff00
 8018996:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
 801899a:	33f2      	adds	r3, #242	; 0xf2
 801899c:	b29b      	uxth	r3, r3
 801899e:	b21b      	sxth	r3, r3
 80189a0:	4619      	mov	r1, r3
 80189a2:	6878      	ldr	r0, [r7, #4]
 80189a4:	f7f8 ff94 	bl	80118d0 <pbuf_header>
 80189a8:	4603      	mov	r3, r0
 80189aa:	2b00      	cmp	r3, #0
 80189ac:	d006      	beq.n	80189bc <icmp_input+0x150>
        LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 80189ae:	4b2e      	ldr	r3, [pc, #184]	; (8018a68 <icmp_input+0x1fc>)
 80189b0:	22c0      	movs	r2, #192	; 0xc0
 80189b2:	4930      	ldr	r1, [pc, #192]	; (8018a74 <icmp_input+0x208>)
 80189b4:	482e      	ldr	r0, [pc, #184]	; (8018a70 <icmp_input+0x204>)
 80189b6:	f002 fa1b 	bl	801adf0 <iprintf>
        goto icmperr;
 80189ba:	e04a      	b.n	8018a52 <icmp_input+0x1e6>
    }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
    /* At this point, all checks are OK. */
    /* We generate an answer by switching the dest and src ip addresses,
     * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
    iecho = (struct icmp_echo_hdr *)p->payload;
 80189bc:	687b      	ldr	r3, [r7, #4]
 80189be:	685b      	ldr	r3, [r3, #4]
 80189c0:	617b      	str	r3, [r7, #20]
    if (pbuf_header(p, (s16_t)hlen)) {
 80189c2:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 80189c6:	4619      	mov	r1, r3
 80189c8:	6878      	ldr	r0, [r7, #4]
 80189ca:	f7f8 ff81 	bl	80118d0 <pbuf_header>
 80189ce:	4603      	mov	r3, r0
 80189d0:	2b00      	cmp	r3, #0
 80189d2:	d12b      	bne.n	8018a2c <icmp_input+0x1c0>
      LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
    } else {
      err_t ret;
      struct ip_hdr *iphdr = (struct ip_hdr*)p->payload;
 80189d4:	687b      	ldr	r3, [r7, #4]
 80189d6:	685b      	ldr	r3, [r3, #4]
 80189d8:	613b      	str	r3, [r7, #16]
      ip4_addr_copy(iphdr->src, *src);
 80189da:	69fb      	ldr	r3, [r7, #28]
 80189dc:	681a      	ldr	r2, [r3, #0]
 80189de:	693b      	ldr	r3, [r7, #16]
 80189e0:	60da      	str	r2, [r3, #12]
      ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 80189e2:	4b1f      	ldr	r3, [pc, #124]	; (8018a60 <icmp_input+0x1f4>)
 80189e4:	691a      	ldr	r2, [r3, #16]
 80189e6:	693b      	ldr	r3, [r7, #16]
 80189e8:	611a      	str	r2, [r3, #16]
      ICMPH_TYPE_SET(iecho, ICMP_ER);
 80189ea:	697b      	ldr	r3, [r7, #20]
 80189ec:	2200      	movs	r2, #0
 80189ee:	701a      	strb	r2, [r3, #0]
      else {
        iecho->chksum = 0;
      }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
      iecho->chksum = 0;
 80189f0:	697b      	ldr	r3, [r7, #20]
 80189f2:	2200      	movs	r2, #0
 80189f4:	709a      	strb	r2, [r3, #2]
 80189f6:	2200      	movs	r2, #0
 80189f8:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

      /* Set the correct TTL and recalculate the header checksum. */
      IPH_TTL_SET(iphdr, ICMP_TTL);
 80189fa:	693b      	ldr	r3, [r7, #16]
 80189fc:	22ff      	movs	r2, #255	; 0xff
 80189fe:	721a      	strb	r2, [r3, #8]
      IPH_CHKSUM_SET(iphdr, 0);
 8018a00:	693b      	ldr	r3, [r7, #16]
 8018a02:	2200      	movs	r2, #0
 8018a04:	729a      	strb	r2, [r3, #10]
 8018a06:	2200      	movs	r2, #0
 8018a08:	72da      	strb	r2, [r3, #11]
      MIB2_STATS_INC(mib2.icmpoutmsgs);
      /* increase number of echo replies attempted to send */
      MIB2_STATS_INC(mib2.icmpoutechoreps);

      /* send an ICMP packet */
      ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 8018a0a:	683b      	ldr	r3, [r7, #0]
 8018a0c:	9302      	str	r3, [sp, #8]
 8018a0e:	2301      	movs	r3, #1
 8018a10:	9301      	str	r3, [sp, #4]
 8018a12:	2300      	movs	r3, #0
 8018a14:	9300      	str	r3, [sp, #0]
 8018a16:	23ff      	movs	r3, #255	; 0xff
 8018a18:	2200      	movs	r2, #0
 8018a1a:	69f9      	ldr	r1, [r7, #28]
 8018a1c:	6878      	ldr	r0, [r7, #4]
 8018a1e:	f000 fa5b 	bl	8018ed8 <ip4_output_if>
 8018a22:	4603      	mov	r3, r0
 8018a24:	73fb      	strb	r3, [r7, #15]
                   ICMP_TTL, 0, IP_PROTO_ICMP, inp);
      if (ret != ERR_OK) {
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
      }
    }
    break;
 8018a26:	e001      	b.n	8018a2c <icmp_input+0x1c0>
    break;
 8018a28:	bf00      	nop
 8018a2a:	e000      	b.n	8018a2e <icmp_input+0x1c2>
    break;
 8018a2c:	bf00      	nop
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                (s16_t)type, (s16_t)code));
    ICMP_STATS_INC(icmp.proterr);
    ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 8018a2e:	6878      	ldr	r0, [r7, #4]
 8018a30:	f7f8 ff72 	bl	8011918 <pbuf_free>
  return;
 8018a34:	e011      	b.n	8018a5a <icmp_input+0x1ee>
    goto lenerr;
 8018a36:	bf00      	nop
 8018a38:	e002      	b.n	8018a40 <icmp_input+0x1d4>
    goto lenerr;
 8018a3a:	bf00      	nop
 8018a3c:	e000      	b.n	8018a40 <icmp_input+0x1d4>
      goto lenerr;
 8018a3e:	bf00      	nop
lenerr:
  pbuf_free(p);
 8018a40:	6878      	ldr	r0, [r7, #4]
 8018a42:	f7f8 ff69 	bl	8011918 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8018a46:	e008      	b.n	8018a5a <icmp_input+0x1ee>
      goto icmperr;
 8018a48:	bf00      	nop
 8018a4a:	e002      	b.n	8018a52 <icmp_input+0x1e6>
      goto icmperr;
 8018a4c:	bf00      	nop
 8018a4e:	e000      	b.n	8018a52 <icmp_input+0x1e6>
        goto icmperr;
 8018a50:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 8018a52:	6878      	ldr	r0, [r7, #4]
 8018a54:	f7f8 ff60 	bl	8011918 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8018a58:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 8018a5a:	3728      	adds	r7, #40	; 0x28
 8018a5c:	46bd      	mov	sp, r7
 8018a5e:	bd80      	pop	{r7, pc}
 8018a60:	20007638 	.word	0x20007638
 8018a64:	2000764c 	.word	0x2000764c
 8018a68:	0801e27c 	.word	0x0801e27c
 8018a6c:	0801e2b4 	.word	0x0801e2b4
 8018a70:	0801e2ec 	.word	0x0801e2ec
 8018a74:	0801e314 	.word	0x0801e314

08018a78 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 8018a78:	b580      	push	{r7, lr}
 8018a7a:	b082      	sub	sp, #8
 8018a7c:	af00      	add	r7, sp, #0
 8018a7e:	6078      	str	r0, [r7, #4]
 8018a80:	460b      	mov	r3, r1
 8018a82:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 8018a84:	78fb      	ldrb	r3, [r7, #3]
 8018a86:	461a      	mov	r2, r3
 8018a88:	2103      	movs	r1, #3
 8018a8a:	6878      	ldr	r0, [r7, #4]
 8018a8c:	f000 f814 	bl	8018ab8 <icmp_send_response>
}
 8018a90:	bf00      	nop
 8018a92:	3708      	adds	r7, #8
 8018a94:	46bd      	mov	sp, r7
 8018a96:	bd80      	pop	{r7, pc}

08018a98 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 8018a98:	b580      	push	{r7, lr}
 8018a9a:	b082      	sub	sp, #8
 8018a9c:	af00      	add	r7, sp, #0
 8018a9e:	6078      	str	r0, [r7, #4]
 8018aa0:	460b      	mov	r3, r1
 8018aa2:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 8018aa4:	78fb      	ldrb	r3, [r7, #3]
 8018aa6:	461a      	mov	r2, r3
 8018aa8:	210b      	movs	r1, #11
 8018aaa:	6878      	ldr	r0, [r7, #4]
 8018aac:	f000 f804 	bl	8018ab8 <icmp_send_response>
}
 8018ab0:	bf00      	nop
 8018ab2:	3708      	adds	r7, #8
 8018ab4:	46bd      	mov	sp, r7
 8018ab6:	bd80      	pop	{r7, pc}

08018ab8 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 8018ab8:	b580      	push	{r7, lr}
 8018aba:	b08c      	sub	sp, #48	; 0x30
 8018abc:	af04      	add	r7, sp, #16
 8018abe:	6078      	str	r0, [r7, #4]
 8018ac0:	460b      	mov	r3, r1
 8018ac2:	70fb      	strb	r3, [r7, #3]
 8018ac4:	4613      	mov	r3, r2
 8018ac6:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 8018ac8:	2200      	movs	r2, #0
 8018aca:	2124      	movs	r1, #36	; 0x24
 8018acc:	2001      	movs	r0, #1
 8018ace:	f7f8 fbb1 	bl	8011234 <pbuf_alloc>
 8018ad2:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 8018ad4:	69fb      	ldr	r3, [r7, #28]
 8018ad6:	2b00      	cmp	r3, #0
 8018ad8:	d04c      	beq.n	8018b74 <icmp_send_response+0xbc>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 8018ada:	69fb      	ldr	r3, [r7, #28]
 8018adc:	895b      	ldrh	r3, [r3, #10]
 8018ade:	2b23      	cmp	r3, #35	; 0x23
 8018ae0:	d806      	bhi.n	8018af0 <icmp_send_response+0x38>
 8018ae2:	4b26      	ldr	r3, [pc, #152]	; (8018b7c <icmp_send_response+0xc4>)
 8018ae4:	f44f 72b1 	mov.w	r2, #354	; 0x162
 8018ae8:	4925      	ldr	r1, [pc, #148]	; (8018b80 <icmp_send_response+0xc8>)
 8018aea:	4826      	ldr	r0, [pc, #152]	; (8018b84 <icmp_send_response+0xcc>)
 8018aec:	f002 f980 	bl	801adf0 <iprintf>
             (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 8018af0:	687b      	ldr	r3, [r7, #4]
 8018af2:	685b      	ldr	r3, [r3, #4]
 8018af4:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 8018af6:	69fb      	ldr	r3, [r7, #28]
 8018af8:	685b      	ldr	r3, [r3, #4]
 8018afa:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 8018afc:	697b      	ldr	r3, [r7, #20]
 8018afe:	78fa      	ldrb	r2, [r7, #3]
 8018b00:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 8018b02:	697b      	ldr	r3, [r7, #20]
 8018b04:	78ba      	ldrb	r2, [r7, #2]
 8018b06:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 8018b08:	697b      	ldr	r3, [r7, #20]
 8018b0a:	2200      	movs	r2, #0
 8018b0c:	711a      	strb	r2, [r3, #4]
 8018b0e:	2200      	movs	r2, #0
 8018b10:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 8018b12:	697b      	ldr	r3, [r7, #20]
 8018b14:	2200      	movs	r2, #0
 8018b16:	719a      	strb	r2, [r3, #6]
 8018b18:	2200      	movs	r2, #0
 8018b1a:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 8018b1c:	69fb      	ldr	r3, [r7, #28]
 8018b1e:	685b      	ldr	r3, [r3, #4]
 8018b20:	f103 0008 	add.w	r0, r3, #8
 8018b24:	687b      	ldr	r3, [r7, #4]
 8018b26:	685b      	ldr	r3, [r3, #4]
 8018b28:	221c      	movs	r2, #28
 8018b2a:	4619      	mov	r1, r3
 8018b2c:	f002 f8a5 	bl	801ac7a <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 8018b30:	69bb      	ldr	r3, [r7, #24]
 8018b32:	68db      	ldr	r3, [r3, #12]
 8018b34:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_src, &iphdr_dst);
  }
#else
  netif = ip4_route(&iphdr_src);
 8018b36:	f107 030c 	add.w	r3, r7, #12
 8018b3a:	4618      	mov	r0, r3
 8018b3c:	f000 f824 	bl	8018b88 <ip4_route>
 8018b40:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 8018b42:	693b      	ldr	r3, [r7, #16]
 8018b44:	2b00      	cmp	r3, #0
 8018b46:	d011      	beq.n	8018b6c <icmp_send_response+0xb4>
    /* calculate checksum */
    icmphdr->chksum = 0;
 8018b48:	697b      	ldr	r3, [r7, #20]
 8018b4a:	2200      	movs	r2, #0
 8018b4c:	709a      	strb	r2, [r3, #2]
 8018b4e:	2200      	movs	r2, #0
 8018b50:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 8018b52:	f107 020c 	add.w	r2, r7, #12
 8018b56:	693b      	ldr	r3, [r7, #16]
 8018b58:	9302      	str	r3, [sp, #8]
 8018b5a:	2301      	movs	r3, #1
 8018b5c:	9301      	str	r3, [sp, #4]
 8018b5e:	2300      	movs	r3, #0
 8018b60:	9300      	str	r3, [sp, #0]
 8018b62:	23ff      	movs	r3, #255	; 0xff
 8018b64:	2100      	movs	r1, #0
 8018b66:	69f8      	ldr	r0, [r7, #28]
 8018b68:	f000 f9b6 	bl	8018ed8 <ip4_output_if>
  }
  pbuf_free(q);
 8018b6c:	69f8      	ldr	r0, [r7, #28]
 8018b6e:	f7f8 fed3 	bl	8011918 <pbuf_free>
 8018b72:	e000      	b.n	8018b76 <icmp_send_response+0xbe>
    return;
 8018b74:	bf00      	nop
}
 8018b76:	3720      	adds	r7, #32
 8018b78:	46bd      	mov	sp, r7
 8018b7a:	bd80      	pop	{r7, pc}
 8018b7c:	0801e27c 	.word	0x0801e27c
 8018b80:	0801e348 	.word	0x0801e348
 8018b84:	0801e2ec 	.word	0x0801e2ec

08018b88 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 8018b88:	b480      	push	{r7}
 8018b8a:	b085      	sub	sp, #20
 8018b8c:	af00      	add	r7, sp, #0
 8018b8e:	6078      	str	r0, [r7, #4]
    return ip4_default_multicast_netif;
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */

  /* iterate through netifs */
  for (netif = netif_list; netif != NULL; netif = netif->next) {
 8018b90:	4b30      	ldr	r3, [pc, #192]	; (8018c54 <ip4_route+0xcc>)
 8018b92:	681b      	ldr	r3, [r3, #0]
 8018b94:	60fb      	str	r3, [r7, #12]
 8018b96:	e036      	b.n	8018c06 <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8018b98:	68fb      	ldr	r3, [r7, #12]
 8018b9a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8018b9e:	f003 0301 	and.w	r3, r3, #1
 8018ba2:	b2db      	uxtb	r3, r3
 8018ba4:	2b00      	cmp	r3, #0
 8018ba6:	d02b      	beq.n	8018c00 <ip4_route+0x78>
 8018ba8:	68fb      	ldr	r3, [r7, #12]
 8018baa:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8018bae:	089b      	lsrs	r3, r3, #2
 8018bb0:	f003 0301 	and.w	r3, r3, #1
 8018bb4:	b2db      	uxtb	r3, r3
 8018bb6:	2b00      	cmp	r3, #0
 8018bb8:	d022      	beq.n	8018c00 <ip4_route+0x78>
 8018bba:	68fb      	ldr	r3, [r7, #12]
 8018bbc:	3304      	adds	r3, #4
 8018bbe:	681b      	ldr	r3, [r3, #0]
 8018bc0:	2b00      	cmp	r3, #0
 8018bc2:	d01d      	beq.n	8018c00 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 8018bc4:	687b      	ldr	r3, [r7, #4]
 8018bc6:	681a      	ldr	r2, [r3, #0]
 8018bc8:	68fb      	ldr	r3, [r7, #12]
 8018bca:	3304      	adds	r3, #4
 8018bcc:	681b      	ldr	r3, [r3, #0]
 8018bce:	405a      	eors	r2, r3
 8018bd0:	68fb      	ldr	r3, [r7, #12]
 8018bd2:	3308      	adds	r3, #8
 8018bd4:	681b      	ldr	r3, [r3, #0]
 8018bd6:	4013      	ands	r3, r2
 8018bd8:	2b00      	cmp	r3, #0
 8018bda:	d101      	bne.n	8018be0 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 8018bdc:	68fb      	ldr	r3, [r7, #12]
 8018bde:	e033      	b.n	8018c48 <ip4_route+0xc0>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 8018be0:	68fb      	ldr	r3, [r7, #12]
 8018be2:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8018be6:	f003 0302 	and.w	r3, r3, #2
 8018bea:	2b00      	cmp	r3, #0
 8018bec:	d108      	bne.n	8018c00 <ip4_route+0x78>
 8018bee:	687b      	ldr	r3, [r7, #4]
 8018bf0:	681a      	ldr	r2, [r3, #0]
 8018bf2:	68fb      	ldr	r3, [r7, #12]
 8018bf4:	330c      	adds	r3, #12
 8018bf6:	681b      	ldr	r3, [r3, #0]
 8018bf8:	429a      	cmp	r2, r3
 8018bfa:	d101      	bne.n	8018c00 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 8018bfc:	68fb      	ldr	r3, [r7, #12]
 8018bfe:	e023      	b.n	8018c48 <ip4_route+0xc0>
  for (netif = netif_list; netif != NULL; netif = netif->next) {
 8018c00:	68fb      	ldr	r3, [r7, #12]
 8018c02:	681b      	ldr	r3, [r3, #0]
 8018c04:	60fb      	str	r3, [r7, #12]
 8018c06:	68fb      	ldr	r3, [r7, #12]
 8018c08:	2b00      	cmp	r3, #0
 8018c0a:	d1c5      	bne.n	8018b98 <ip4_route+0x10>
  if (netif != NULL) {
    return netif;
  }
#endif

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8018c0c:	4b12      	ldr	r3, [pc, #72]	; (8018c58 <ip4_route+0xd0>)
 8018c0e:	681b      	ldr	r3, [r3, #0]
 8018c10:	2b00      	cmp	r3, #0
 8018c12:	d015      	beq.n	8018c40 <ip4_route+0xb8>
 8018c14:	4b10      	ldr	r3, [pc, #64]	; (8018c58 <ip4_route+0xd0>)
 8018c16:	681b      	ldr	r3, [r3, #0]
 8018c18:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8018c1c:	f003 0301 	and.w	r3, r3, #1
 8018c20:	2b00      	cmp	r3, #0
 8018c22:	d00d      	beq.n	8018c40 <ip4_route+0xb8>
 8018c24:	4b0c      	ldr	r3, [pc, #48]	; (8018c58 <ip4_route+0xd0>)
 8018c26:	681b      	ldr	r3, [r3, #0]
 8018c28:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8018c2c:	f003 0304 	and.w	r3, r3, #4
 8018c30:	2b00      	cmp	r3, #0
 8018c32:	d005      	beq.n	8018c40 <ip4_route+0xb8>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default))) {
 8018c34:	4b08      	ldr	r3, [pc, #32]	; (8018c58 <ip4_route+0xd0>)
 8018c36:	681b      	ldr	r3, [r3, #0]
 8018c38:	3304      	adds	r3, #4
 8018c3a:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8018c3c:	2b00      	cmp	r3, #0
 8018c3e:	d101      	bne.n	8018c44 <ip4_route+0xbc>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
      ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 8018c40:	2300      	movs	r3, #0
 8018c42:	e001      	b.n	8018c48 <ip4_route+0xc0>
  }

  return netif_default;
 8018c44:	4b04      	ldr	r3, [pc, #16]	; (8018c58 <ip4_route+0xd0>)
 8018c46:	681b      	ldr	r3, [r3, #0]
}
 8018c48:	4618      	mov	r0, r3
 8018c4a:	3714      	adds	r7, #20
 8018c4c:	46bd      	mov	sp, r7
 8018c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018c52:	4770      	bx	lr
 8018c54:	2000ab30 	.word	0x2000ab30
 8018c58:	2000ab34 	.word	0x2000ab34

08018c5c <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 8018c5c:	b580      	push	{r7, lr}
 8018c5e:	b086      	sub	sp, #24
 8018c60:	af00      	add	r7, sp, #0
 8018c62:	6078      	str	r0, [r7, #4]
 8018c64:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 8018c66:	687b      	ldr	r3, [r7, #4]
 8018c68:	685b      	ldr	r3, [r3, #4]
 8018c6a:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 8018c6c:	697b      	ldr	r3, [r7, #20]
 8018c6e:	781b      	ldrb	r3, [r3, #0]
 8018c70:	091b      	lsrs	r3, r3, #4
 8018c72:	b2db      	uxtb	r3, r3
 8018c74:	2b04      	cmp	r3, #4
 8018c76:	d004      	beq.n	8018c82 <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 8018c78:	6878      	ldr	r0, [r7, #4]
 8018c7a:	f7f8 fe4d 	bl	8011918 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 8018c7e:	2300      	movs	r3, #0
 8018c80:	e122      	b.n	8018ec8 <ip4_input+0x26c>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in number of 32-bit words */
  iphdr_hlen = IPH_HL(iphdr);
 8018c82:	697b      	ldr	r3, [r7, #20]
 8018c84:	781b      	ldrb	r3, [r3, #0]
 8018c86:	b29b      	uxth	r3, r3
 8018c88:	f003 030f 	and.w	r3, r3, #15
 8018c8c:	817b      	strh	r3, [r7, #10]
  /* calculate IP header length in bytes */
  iphdr_hlen *= 4;
 8018c8e:	897b      	ldrh	r3, [r7, #10]
 8018c90:	009b      	lsls	r3, r3, #2
 8018c92:	817b      	strh	r3, [r7, #10]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 8018c94:	697b      	ldr	r3, [r7, #20]
 8018c96:	885b      	ldrh	r3, [r3, #2]
 8018c98:	b29b      	uxth	r3, r3
 8018c9a:	4618      	mov	r0, r3
 8018c9c:	f7f7 fca2 	bl	80105e4 <lwip_htons>
 8018ca0:	4603      	mov	r3, r0
 8018ca2:	813b      	strh	r3, [r7, #8]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 8018ca4:	687b      	ldr	r3, [r7, #4]
 8018ca6:	891b      	ldrh	r3, [r3, #8]
 8018ca8:	893a      	ldrh	r2, [r7, #8]
 8018caa:	429a      	cmp	r2, r3
 8018cac:	d204      	bcs.n	8018cb8 <ip4_input+0x5c>
    pbuf_realloc(p, iphdr_len);
 8018cae:	893b      	ldrh	r3, [r7, #8]
 8018cb0:	4619      	mov	r1, r3
 8018cb2:	6878      	ldr	r0, [r7, #4]
 8018cb4:	f7f8 fcbc 	bl	8011630 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 8018cb8:	687b      	ldr	r3, [r7, #4]
 8018cba:	895b      	ldrh	r3, [r3, #10]
 8018cbc:	897a      	ldrh	r2, [r7, #10]
 8018cbe:	429a      	cmp	r2, r3
 8018cc0:	d807      	bhi.n	8018cd2 <ip4_input+0x76>
 8018cc2:	687b      	ldr	r3, [r7, #4]
 8018cc4:	891b      	ldrh	r3, [r3, #8]
 8018cc6:	893a      	ldrh	r2, [r7, #8]
 8018cc8:	429a      	cmp	r2, r3
 8018cca:	d802      	bhi.n	8018cd2 <ip4_input+0x76>
 8018ccc:	897b      	ldrh	r3, [r7, #10]
 8018cce:	2b13      	cmp	r3, #19
 8018cd0:	d804      	bhi.n	8018cdc <ip4_input+0x80>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
        ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
        iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 8018cd2:	6878      	ldr	r0, [r7, #4]
 8018cd4:	f7f8 fe20 	bl	8011918 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 8018cd8:	2300      	movs	r3, #0
 8018cda:	e0f5      	b.n	8018ec8 <ip4_input+0x26c>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 8018cdc:	697b      	ldr	r3, [r7, #20]
 8018cde:	691b      	ldr	r3, [r3, #16]
 8018ce0:	4a7b      	ldr	r2, [pc, #492]	; (8018ed0 <ip4_input+0x274>)
 8018ce2:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 8018ce4:	697b      	ldr	r3, [r7, #20]
 8018ce6:	68db      	ldr	r3, [r3, #12]
 8018ce8:	4a79      	ldr	r2, [pc, #484]	; (8018ed0 <ip4_input+0x274>)
 8018cea:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8018cec:	4b78      	ldr	r3, [pc, #480]	; (8018ed0 <ip4_input+0x274>)
 8018cee:	695b      	ldr	r3, [r3, #20]
 8018cf0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8018cf4:	2be0      	cmp	r3, #224	; 0xe0
 8018cf6:	d112      	bne.n	8018d1e <ip4_input+0xc2>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 8018cf8:	683b      	ldr	r3, [r7, #0]
 8018cfa:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8018cfe:	f003 0301 	and.w	r3, r3, #1
 8018d02:	b2db      	uxtb	r3, r3
 8018d04:	2b00      	cmp	r3, #0
 8018d06:	d007      	beq.n	8018d18 <ip4_input+0xbc>
 8018d08:	683b      	ldr	r3, [r7, #0]
 8018d0a:	3304      	adds	r3, #4
 8018d0c:	681b      	ldr	r3, [r3, #0]
 8018d0e:	2b00      	cmp	r3, #0
 8018d10:	d002      	beq.n	8018d18 <ip4_input+0xbc>
      netif = inp;
 8018d12:	683b      	ldr	r3, [r7, #0]
 8018d14:	613b      	str	r3, [r7, #16]
 8018d16:	e041      	b.n	8018d9c <ip4_input+0x140>
    } else {
      netif = NULL;
 8018d18:	2300      	movs	r3, #0
 8018d1a:	613b      	str	r3, [r7, #16]
 8018d1c:	e03e      	b.n	8018d9c <ip4_input+0x140>
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs.
       'first' is used as a boolean to mark whether we started walking the list */
    int first = 1;
 8018d1e:	2301      	movs	r3, #1
 8018d20:	60fb      	str	r3, [r7, #12]
    netif = inp;
 8018d22:	683b      	ldr	r3, [r7, #0]
 8018d24:	613b      	str	r3, [r7, #16]
          ip4_addr_get_u32(&iphdr->dest) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
          ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
          ip4_addr_get_u32(&iphdr->dest) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

      /* interface is up and configured? */
      if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 8018d26:	693b      	ldr	r3, [r7, #16]
 8018d28:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8018d2c:	f003 0301 	and.w	r3, r3, #1
 8018d30:	b2db      	uxtb	r3, r3
 8018d32:	2b00      	cmp	r3, #0
 8018d34:	d014      	beq.n	8018d60 <ip4_input+0x104>
 8018d36:	693b      	ldr	r3, [r7, #16]
 8018d38:	3304      	adds	r3, #4
 8018d3a:	681b      	ldr	r3, [r3, #0]
 8018d3c:	2b00      	cmp	r3, #0
 8018d3e:	d00f      	beq.n	8018d60 <ip4_input+0x104>
        /* unicast to this interface address? */
        if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8018d40:	4b63      	ldr	r3, [pc, #396]	; (8018ed0 <ip4_input+0x274>)
 8018d42:	695a      	ldr	r2, [r3, #20]
 8018d44:	693b      	ldr	r3, [r7, #16]
 8018d46:	3304      	adds	r3, #4
 8018d48:	681b      	ldr	r3, [r3, #0]
 8018d4a:	429a      	cmp	r2, r3
 8018d4c:	d026      	beq.n	8018d9c <ip4_input+0x140>
            /* or broadcast on this interface network address? */
            ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 8018d4e:	4b60      	ldr	r3, [pc, #384]	; (8018ed0 <ip4_input+0x274>)
 8018d50:	695b      	ldr	r3, [r3, #20]
 8018d52:	6939      	ldr	r1, [r7, #16]
 8018d54:	4618      	mov	r0, r3
 8018d56:	f000 f991 	bl	801907c <ip4_addr_isbroadcast_u32>
 8018d5a:	4603      	mov	r3, r0
        if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8018d5c:	2b00      	cmp	r3, #0
 8018d5e:	d11d      	bne.n	8018d9c <ip4_input+0x140>
          /* break out of for loop */
          break;
        }
#endif /* LWIP_AUTOIP */
      }
      if (first) {
 8018d60:	68fb      	ldr	r3, [r7, #12]
 8018d62:	2b00      	cmp	r3, #0
 8018d64:	d00d      	beq.n	8018d82 <ip4_input+0x126>
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
        /* Packets sent to the loopback address must not be accepted on an
         * interface that does not have the loopback address assigned to it,
         * unless a non-loopback interface is used for loopback traffic. */
        if (ip4_addr_isloopback(ip4_current_dest_addr())) {
 8018d66:	4b5a      	ldr	r3, [pc, #360]	; (8018ed0 <ip4_input+0x274>)
 8018d68:	695b      	ldr	r3, [r3, #20]
 8018d6a:	b2db      	uxtb	r3, r3
 8018d6c:	2b7f      	cmp	r3, #127	; 0x7f
 8018d6e:	d102      	bne.n	8018d76 <ip4_input+0x11a>
          netif = NULL;
 8018d70:	2300      	movs	r3, #0
 8018d72:	613b      	str	r3, [r7, #16]
          break;
 8018d74:	e012      	b.n	8018d9c <ip4_input+0x140>
        }
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
        first = 0;
 8018d76:	2300      	movs	r3, #0
 8018d78:	60fb      	str	r3, [r7, #12]
        netif = netif_list;
 8018d7a:	4b56      	ldr	r3, [pc, #344]	; (8018ed4 <ip4_input+0x278>)
 8018d7c:	681b      	ldr	r3, [r3, #0]
 8018d7e:	613b      	str	r3, [r7, #16]
 8018d80:	e002      	b.n	8018d88 <ip4_input+0x12c>
      } else {
        netif = netif->next;
 8018d82:	693b      	ldr	r3, [r7, #16]
 8018d84:	681b      	ldr	r3, [r3, #0]
 8018d86:	613b      	str	r3, [r7, #16]
      }
      if (netif == inp) {
 8018d88:	693a      	ldr	r2, [r7, #16]
 8018d8a:	683b      	ldr	r3, [r7, #0]
 8018d8c:	429a      	cmp	r2, r3
 8018d8e:	d102      	bne.n	8018d96 <ip4_input+0x13a>
        netif = netif->next;
 8018d90:	693b      	ldr	r3, [r7, #16]
 8018d92:	681b      	ldr	r3, [r3, #0]
 8018d94:	613b      	str	r3, [r7, #16]
      }
    } while (netif != NULL);
 8018d96:	693b      	ldr	r3, [r7, #16]
 8018d98:	2b00      	cmp	r3, #0
 8018d9a:	d1c4      	bne.n	8018d26 <ip4_input+0xca>
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8018d9c:	4b4c      	ldr	r3, [pc, #304]	; (8018ed0 <ip4_input+0x274>)
 8018d9e:	691b      	ldr	r3, [r3, #16]
 8018da0:	6839      	ldr	r1, [r7, #0]
 8018da2:	4618      	mov	r0, r3
 8018da4:	f000 f96a 	bl	801907c <ip4_addr_isbroadcast_u32>
 8018da8:	4603      	mov	r3, r0
 8018daa:	2b00      	cmp	r3, #0
 8018dac:	d105      	bne.n	8018dba <ip4_input+0x15e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 8018dae:	4b48      	ldr	r3, [pc, #288]	; (8018ed0 <ip4_input+0x274>)
 8018db0:	691b      	ldr	r3, [r3, #16]
 8018db2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8018db6:	2be0      	cmp	r3, #224	; 0xe0
 8018db8:	d104      	bne.n	8018dc4 <ip4_input+0x168>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 8018dba:	6878      	ldr	r0, [r7, #4]
 8018dbc:	f7f8 fdac 	bl	8011918 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 8018dc0:	2300      	movs	r3, #0
 8018dc2:	e081      	b.n	8018ec8 <ip4_input+0x26c>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 8018dc4:	693b      	ldr	r3, [r7, #16]
 8018dc6:	2b00      	cmp	r3, #0
 8018dc8:	d104      	bne.n	8018dd4 <ip4_input+0x178>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 8018dca:	6878      	ldr	r0, [r7, #4]
 8018dcc:	f7f8 fda4 	bl	8011918 <pbuf_free>
    return ERR_OK;
 8018dd0:	2300      	movs	r3, #0
 8018dd2:	e079      	b.n	8018ec8 <ip4_input+0x26c>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 8018dd4:	697b      	ldr	r3, [r7, #20]
 8018dd6:	88db      	ldrh	r3, [r3, #6]
 8018dd8:	b29b      	uxth	r3, r3
 8018dda:	461a      	mov	r2, r3
 8018ddc:	f64f 733f 	movw	r3, #65343	; 0xff3f
 8018de0:	4013      	ands	r3, r2
 8018de2:	2b00      	cmp	r3, #0
 8018de4:	d00b      	beq.n	8018dfe <ip4_input+0x1a2>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
      lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK)*8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 8018de6:	6878      	ldr	r0, [r7, #4]
 8018de8:	f000 fc8e 	bl	8019708 <ip4_reass>
 8018dec:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 8018dee:	687b      	ldr	r3, [r7, #4]
 8018df0:	2b00      	cmp	r3, #0
 8018df2:	d101      	bne.n	8018df8 <ip4_input+0x19c>
      return ERR_OK;
 8018df4:	2300      	movs	r3, #0
 8018df6:	e067      	b.n	8018ec8 <ip4_input+0x26c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 8018df8:	687b      	ldr	r3, [r7, #4]
 8018dfa:	685b      	ldr	r3, [r3, #4]
 8018dfc:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 8018dfe:	4a34      	ldr	r2, [pc, #208]	; (8018ed0 <ip4_input+0x274>)
 8018e00:	693b      	ldr	r3, [r7, #16]
 8018e02:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 8018e04:	4a32      	ldr	r2, [pc, #200]	; (8018ed0 <ip4_input+0x274>)
 8018e06:	683b      	ldr	r3, [r7, #0]
 8018e08:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 8018e0a:	4a31      	ldr	r2, [pc, #196]	; (8018ed0 <ip4_input+0x274>)
 8018e0c:	697b      	ldr	r3, [r7, #20]
 8018e0e:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL(iphdr) * 4;
 8018e10:	697b      	ldr	r3, [r7, #20]
 8018e12:	781b      	ldrb	r3, [r3, #0]
 8018e14:	b29b      	uxth	r3, r3
 8018e16:	f003 030f 	and.w	r3, r3, #15
 8018e1a:	b29b      	uxth	r3, r3
 8018e1c:	009b      	lsls	r3, r3, #2
 8018e1e:	b29a      	uxth	r2, r3
 8018e20:	4b2b      	ldr	r3, [pc, #172]	; (8018ed0 <ip4_input+0x274>)
 8018e22:	819a      	strh	r2, [r3, #12]
#if LWIP_RAW
  /* raw input did not eat the packet? */
  if (raw_input(p, inp) == 0)
#endif /* LWIP_RAW */
  {
    pbuf_header(p, -(s16_t)iphdr_hlen); /* Move to payload, no check necessary. */
 8018e24:	897b      	ldrh	r3, [r7, #10]
 8018e26:	425b      	negs	r3, r3
 8018e28:	b29b      	uxth	r3, r3
 8018e2a:	b21b      	sxth	r3, r3
 8018e2c:	4619      	mov	r1, r3
 8018e2e:	6878      	ldr	r0, [r7, #4]
 8018e30:	f7f8 fd4e 	bl	80118d0 <pbuf_header>

    switch (IPH_PROTO(iphdr)) {
 8018e34:	697b      	ldr	r3, [r7, #20]
 8018e36:	7a5b      	ldrb	r3, [r3, #9]
 8018e38:	2b06      	cmp	r3, #6
 8018e3a:	d009      	beq.n	8018e50 <ip4_input+0x1f4>
 8018e3c:	2b11      	cmp	r3, #17
 8018e3e:	d002      	beq.n	8018e46 <ip4_input+0x1ea>
 8018e40:	2b01      	cmp	r3, #1
 8018e42:	d00a      	beq.n	8018e5a <ip4_input+0x1fe>
 8018e44:	e00e      	b.n	8018e64 <ip4_input+0x208>
    case IP_PROTO_UDP:
#if LWIP_UDPLITE
    case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
      MIB2_STATS_INC(mib2.ipindelivers);
      udp_input(p, inp);
 8018e46:	6839      	ldr	r1, [r7, #0]
 8018e48:	6878      	ldr	r0, [r7, #4]
 8018e4a:	f7fe fc0b 	bl	8017664 <udp_input>
      break;
 8018e4e:	e028      	b.n	8018ea2 <ip4_input+0x246>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case IP_PROTO_TCP:
      MIB2_STATS_INC(mib2.ipindelivers);
      tcp_input(p, inp);
 8018e50:	6839      	ldr	r1, [r7, #0]
 8018e52:	6878      	ldr	r0, [r7, #4]
 8018e54:	f7fa fc2a 	bl	80136ac <tcp_input>
      break;
 8018e58:	e023      	b.n	8018ea2 <ip4_input+0x246>
#endif /* LWIP_TCP */
#if LWIP_ICMP
    case IP_PROTO_ICMP:
      MIB2_STATS_INC(mib2.ipindelivers);
      icmp_input(p, inp);
 8018e5a:	6839      	ldr	r1, [r7, #0]
 8018e5c:	6878      	ldr	r0, [r7, #4]
 8018e5e:	f7ff fd05 	bl	801886c <icmp_input>
      break;
 8018e62:	e01e      	b.n	8018ea2 <ip4_input+0x246>
      break;
#endif /* LWIP_IGMP */
    default:
#if LWIP_ICMP
      /* send ICMP destination protocol unreachable unless is was a broadcast */
      if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8018e64:	4b1a      	ldr	r3, [pc, #104]	; (8018ed0 <ip4_input+0x274>)
 8018e66:	695b      	ldr	r3, [r3, #20]
 8018e68:	6939      	ldr	r1, [r7, #16]
 8018e6a:	4618      	mov	r0, r3
 8018e6c:	f000 f906 	bl	801907c <ip4_addr_isbroadcast_u32>
 8018e70:	4603      	mov	r3, r0
 8018e72:	2b00      	cmp	r3, #0
 8018e74:	d112      	bne.n	8018e9c <ip4_input+0x240>
          !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8018e76:	4b16      	ldr	r3, [pc, #88]	; (8018ed0 <ip4_input+0x274>)
 8018e78:	695b      	ldr	r3, [r3, #20]
 8018e7a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8018e7e:	2be0      	cmp	r3, #224	; 0xe0
 8018e80:	d00c      	beq.n	8018e9c <ip4_input+0x240>
        pbuf_header_force(p, iphdr_hlen); /* Move to ip header, no check necessary. */
 8018e82:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8018e86:	4619      	mov	r1, r3
 8018e88:	6878      	ldr	r0, [r7, #4]
 8018e8a:	f7f8 fd33 	bl	80118f4 <pbuf_header_force>
        p->payload = iphdr;
 8018e8e:	687b      	ldr	r3, [r7, #4]
 8018e90:	697a      	ldr	r2, [r7, #20]
 8018e92:	605a      	str	r2, [r3, #4]
        icmp_dest_unreach(p, ICMP_DUR_PROTO);
 8018e94:	2102      	movs	r1, #2
 8018e96:	6878      	ldr	r0, [r7, #4]
 8018e98:	f7ff fdee 	bl	8018a78 <icmp_dest_unreach>
      }
#endif /* LWIP_ICMP */
      pbuf_free(p);
 8018e9c:	6878      	ldr	r0, [r7, #4]
 8018e9e:	f7f8 fd3b 	bl	8011918 <pbuf_free>
      MIB2_STATS_INC(mib2.ipinunknownprotos);
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 8018ea2:	4b0b      	ldr	r3, [pc, #44]	; (8018ed0 <ip4_input+0x274>)
 8018ea4:	2200      	movs	r2, #0
 8018ea6:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 8018ea8:	4b09      	ldr	r3, [pc, #36]	; (8018ed0 <ip4_input+0x274>)
 8018eaa:	2200      	movs	r2, #0
 8018eac:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 8018eae:	4b08      	ldr	r3, [pc, #32]	; (8018ed0 <ip4_input+0x274>)
 8018eb0:	2200      	movs	r2, #0
 8018eb2:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 8018eb4:	4b06      	ldr	r3, [pc, #24]	; (8018ed0 <ip4_input+0x274>)
 8018eb6:	2200      	movs	r2, #0
 8018eb8:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 8018eba:	4b05      	ldr	r3, [pc, #20]	; (8018ed0 <ip4_input+0x274>)
 8018ebc:	2200      	movs	r2, #0
 8018ebe:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 8018ec0:	4b03      	ldr	r3, [pc, #12]	; (8018ed0 <ip4_input+0x274>)
 8018ec2:	2200      	movs	r2, #0
 8018ec4:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 8018ec6:	2300      	movs	r3, #0
}
 8018ec8:	4618      	mov	r0, r3
 8018eca:	3718      	adds	r7, #24
 8018ecc:	46bd      	mov	sp, r7
 8018ece:	bd80      	pop	{r7, pc}
 8018ed0:	20007638 	.word	0x20007638
 8018ed4:	2000ab30 	.word	0x2000ab30

08018ed8 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
             u8_t ttl, u8_t tos,
             u8_t proto, struct netif *netif)
{
 8018ed8:	b580      	push	{r7, lr}
 8018eda:	b08a      	sub	sp, #40	; 0x28
 8018edc:	af04      	add	r7, sp, #16
 8018ede:	60f8      	str	r0, [r7, #12]
 8018ee0:	60b9      	str	r1, [r7, #8]
 8018ee2:	607a      	str	r2, [r7, #4]
 8018ee4:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
       u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
       u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 8018ee6:	68bb      	ldr	r3, [r7, #8]
 8018ee8:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 8018eea:	687b      	ldr	r3, [r7, #4]
 8018eec:	2b00      	cmp	r3, #0
 8018eee:	d009      	beq.n	8018f04 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 8018ef0:	68bb      	ldr	r3, [r7, #8]
 8018ef2:	2b00      	cmp	r3, #0
 8018ef4:	d003      	beq.n	8018efe <ip4_output_if+0x26>
 8018ef6:	68bb      	ldr	r3, [r7, #8]
 8018ef8:	681b      	ldr	r3, [r3, #0]
 8018efa:	2b00      	cmp	r3, #0
 8018efc:	d102      	bne.n	8018f04 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 8018efe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018f00:	3304      	adds	r3, #4
 8018f02:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
    ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 8018f04:	78fa      	ldrb	r2, [r7, #3]
 8018f06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018f08:	9302      	str	r3, [sp, #8]
 8018f0a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8018f0e:	9301      	str	r3, [sp, #4]
 8018f10:	f897 3020 	ldrb.w	r3, [r7, #32]
 8018f14:	9300      	str	r3, [sp, #0]
 8018f16:	4613      	mov	r3, r2
 8018f18:	687a      	ldr	r2, [r7, #4]
 8018f1a:	6979      	ldr	r1, [r7, #20]
 8018f1c:	68f8      	ldr	r0, [r7, #12]
 8018f1e:	f000 f805 	bl	8018f2c <ip4_output_if_src>
 8018f22:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 8018f24:	4618      	mov	r0, r3
 8018f26:	3718      	adds	r7, #24
 8018f28:	46bd      	mov	sp, r7
 8018f2a:	bd80      	pop	{r7, pc}

08018f2c <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
             u8_t ttl, u8_t tos,
             u8_t proto, struct netif *netif)
{
 8018f2c:	b580      	push	{r7, lr}
 8018f2e:	b088      	sub	sp, #32
 8018f30:	af00      	add	r7, sp, #0
 8018f32:	60f8      	str	r0, [r7, #12]
 8018f34:	60b9      	str	r1, [r7, #8]
 8018f36:	607a      	str	r2, [r7, #4]
 8018f38:	70fb      	strb	r3, [r7, #3]
  ip4_addr_t dest_addr;
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 8018f3a:	68fb      	ldr	r3, [r7, #12]
 8018f3c:	89db      	ldrh	r3, [r3, #14]
 8018f3e:	2b01      	cmp	r3, #1
 8018f40:	d006      	beq.n	8018f50 <ip4_output_if_src+0x24>
 8018f42:	4b48      	ldr	r3, [pc, #288]	; (8019064 <ip4_output_if_src+0x138>)
 8018f44:	f240 3233 	movw	r2, #819	; 0x333
 8018f48:	4947      	ldr	r1, [pc, #284]	; (8019068 <ip4_output_if_src+0x13c>)
 8018f4a:	4848      	ldr	r0, [pc, #288]	; (801906c <ip4_output_if_src+0x140>)
 8018f4c:	f001 ff50 	bl	801adf0 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 8018f50:	687b      	ldr	r3, [r7, #4]
 8018f52:	2b00      	cmp	r3, #0
 8018f54:	d060      	beq.n	8019018 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 8018f56:	2314      	movs	r3, #20
 8018f58:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_header(p, IP_HLEN)) {
 8018f5a:	2114      	movs	r1, #20
 8018f5c:	68f8      	ldr	r0, [r7, #12]
 8018f5e:	f7f8 fcb7 	bl	80118d0 <pbuf_header>
 8018f62:	4603      	mov	r3, r0
 8018f64:	2b00      	cmp	r3, #0
 8018f66:	d002      	beq.n	8018f6e <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8018f68:	f06f 0301 	mvn.w	r3, #1
 8018f6c:	e075      	b.n	801905a <ip4_output_if_src+0x12e>
    }

    iphdr = (struct ip_hdr *)p->payload;
 8018f6e:	68fb      	ldr	r3, [r7, #12]
 8018f70:	685b      	ldr	r3, [r3, #4]
 8018f72:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 8018f74:	68fb      	ldr	r3, [r7, #12]
 8018f76:	895b      	ldrh	r3, [r3, #10]
 8018f78:	2b13      	cmp	r3, #19
 8018f7a:	d806      	bhi.n	8018f8a <ip4_output_if_src+0x5e>
 8018f7c:	4b39      	ldr	r3, [pc, #228]	; (8019064 <ip4_output_if_src+0x138>)
 8018f7e:	f240 3261 	movw	r2, #865	; 0x361
 8018f82:	493b      	ldr	r1, [pc, #236]	; (8019070 <ip4_output_if_src+0x144>)
 8018f84:	4839      	ldr	r0, [pc, #228]	; (801906c <ip4_output_if_src+0x140>)
 8018f86:	f001 ff33 	bl	801adf0 <iprintf>
               (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 8018f8a:	69fb      	ldr	r3, [r7, #28]
 8018f8c:	78fa      	ldrb	r2, [r7, #3]
 8018f8e:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 8018f90:	69fb      	ldr	r3, [r7, #28]
 8018f92:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8018f96:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 8018f98:	687b      	ldr	r3, [r7, #4]
 8018f9a:	681a      	ldr	r2, [r3, #0]
 8018f9c:	69fb      	ldr	r3, [r7, #28]
 8018f9e:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 8018fa0:	8b7b      	ldrh	r3, [r7, #26]
 8018fa2:	089b      	lsrs	r3, r3, #2
 8018fa4:	b29b      	uxth	r3, r3
 8018fa6:	b2db      	uxtb	r3, r3
 8018fa8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8018fac:	b2da      	uxtb	r2, r3
 8018fae:	69fb      	ldr	r3, [r7, #28]
 8018fb0:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 8018fb2:	69fb      	ldr	r3, [r7, #28]
 8018fb4:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8018fb8:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 8018fba:	68fb      	ldr	r3, [r7, #12]
 8018fbc:	891b      	ldrh	r3, [r3, #8]
 8018fbe:	4618      	mov	r0, r3
 8018fc0:	f7f7 fb10 	bl	80105e4 <lwip_htons>
 8018fc4:	4603      	mov	r3, r0
 8018fc6:	461a      	mov	r2, r3
 8018fc8:	69fb      	ldr	r3, [r7, #28]
 8018fca:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 8018fcc:	69fb      	ldr	r3, [r7, #28]
 8018fce:	2200      	movs	r2, #0
 8018fd0:	719a      	strb	r2, [r3, #6]
 8018fd2:	2200      	movs	r2, #0
 8018fd4:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 8018fd6:	4b27      	ldr	r3, [pc, #156]	; (8019074 <ip4_output_if_src+0x148>)
 8018fd8:	881b      	ldrh	r3, [r3, #0]
 8018fda:	4618      	mov	r0, r3
 8018fdc:	f7f7 fb02 	bl	80105e4 <lwip_htons>
 8018fe0:	4603      	mov	r3, r0
 8018fe2:	461a      	mov	r2, r3
 8018fe4:	69fb      	ldr	r3, [r7, #28]
 8018fe6:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 8018fe8:	4b22      	ldr	r3, [pc, #136]	; (8019074 <ip4_output_if_src+0x148>)
 8018fea:	881b      	ldrh	r3, [r3, #0]
 8018fec:	3301      	adds	r3, #1
 8018fee:	b29a      	uxth	r2, r3
 8018ff0:	4b20      	ldr	r3, [pc, #128]	; (8019074 <ip4_output_if_src+0x148>)
 8018ff2:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 8018ff4:	68bb      	ldr	r3, [r7, #8]
 8018ff6:	2b00      	cmp	r3, #0
 8018ff8:	d104      	bne.n	8019004 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 8018ffa:	4b1f      	ldr	r3, [pc, #124]	; (8019078 <ip4_output_if_src+0x14c>)
 8018ffc:	681a      	ldr	r2, [r3, #0]
 8018ffe:	69fb      	ldr	r3, [r7, #28]
 8019000:	60da      	str	r2, [r3, #12]
 8019002:	e003      	b.n	801900c <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 8019004:	68bb      	ldr	r3, [r7, #8]
 8019006:	681a      	ldr	r2, [r3, #0]
 8019008:	69fb      	ldr	r3, [r7, #28]
 801900a:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 801900c:	69fb      	ldr	r3, [r7, #28]
 801900e:	2200      	movs	r2, #0
 8019010:	729a      	strb	r2, [r3, #10]
 8019012:	2200      	movs	r2, #0
 8019014:	72da      	strb	r2, [r3, #11]
 8019016:	e008      	b.n	801902a <ip4_output_if_src+0xfe>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    iphdr = (struct ip_hdr *)p->payload;
 8019018:	68fb      	ldr	r3, [r7, #12]
 801901a:	685b      	ldr	r3, [r3, #4]
 801901c:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 801901e:	69fb      	ldr	r3, [r7, #28]
 8019020:	691b      	ldr	r3, [r3, #16]
 8019022:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 8019024:	f107 0314 	add.w	r3, r7, #20
 8019028:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 801902a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801902c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801902e:	2b00      	cmp	r3, #0
 8019030:	d00c      	beq.n	801904c <ip4_output_if_src+0x120>
 8019032:	68fb      	ldr	r3, [r7, #12]
 8019034:	891a      	ldrh	r2, [r3, #8]
 8019036:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019038:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801903a:	429a      	cmp	r2, r3
 801903c:	d906      	bls.n	801904c <ip4_output_if_src+0x120>
    return ip4_frag(p, netif, dest);
 801903e:	687a      	ldr	r2, [r7, #4]
 8019040:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8019042:	68f8      	ldr	r0, [r7, #12]
 8019044:	f000 fd0a 	bl	8019a5c <ip4_frag>
 8019048:	4603      	mov	r3, r0
 801904a:	e006      	b.n	801905a <ip4_output_if_src+0x12e>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 801904c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801904e:	695b      	ldr	r3, [r3, #20]
 8019050:	687a      	ldr	r2, [r7, #4]
 8019052:	68f9      	ldr	r1, [r7, #12]
 8019054:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8019056:	4798      	blx	r3
 8019058:	4603      	mov	r3, r0
}
 801905a:	4618      	mov	r0, r3
 801905c:	3720      	adds	r7, #32
 801905e:	46bd      	mov	sp, r7
 8019060:	bd80      	pop	{r7, pc}
 8019062:	bf00      	nop
 8019064:	0801e374 	.word	0x0801e374
 8019068:	0801e3a8 	.word	0x0801e3a8
 801906c:	0801e3b4 	.word	0x0801e3b4
 8019070:	0801e3dc 	.word	0x0801e3dc
 8019074:	2000433a 	.word	0x2000433a
 8019078:	0801e800 	.word	0x0801e800

0801907c <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 801907c:	b480      	push	{r7}
 801907e:	b085      	sub	sp, #20
 8019080:	af00      	add	r7, sp, #0
 8019082:	6078      	str	r0, [r7, #4]
 8019084:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 8019086:	687b      	ldr	r3, [r7, #4]
 8019088:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 801908a:	687b      	ldr	r3, [r7, #4]
 801908c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8019090:	d002      	beq.n	8019098 <ip4_addr_isbroadcast_u32+0x1c>
 8019092:	687b      	ldr	r3, [r7, #4]
 8019094:	2b00      	cmp	r3, #0
 8019096:	d101      	bne.n	801909c <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 8019098:	2301      	movs	r3, #1
 801909a:	e02a      	b.n	80190f2 <ip4_addr_isbroadcast_u32+0x76>
  /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 801909c:	683b      	ldr	r3, [r7, #0]
 801909e:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80190a2:	f003 0302 	and.w	r3, r3, #2
 80190a6:	2b00      	cmp	r3, #0
 80190a8:	d101      	bne.n	80190ae <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 80190aa:	2300      	movs	r3, #0
 80190ac:	e021      	b.n	80190f2 <ip4_addr_isbroadcast_u32+0x76>
  /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 80190ae:	683b      	ldr	r3, [r7, #0]
 80190b0:	3304      	adds	r3, #4
 80190b2:	681b      	ldr	r3, [r3, #0]
 80190b4:	687a      	ldr	r2, [r7, #4]
 80190b6:	429a      	cmp	r2, r3
 80190b8:	d101      	bne.n	80190be <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 80190ba:	2300      	movs	r3, #0
 80190bc:	e019      	b.n	80190f2 <ip4_addr_isbroadcast_u32+0x76>
  /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 80190be:	68fa      	ldr	r2, [r7, #12]
 80190c0:	683b      	ldr	r3, [r7, #0]
 80190c2:	3304      	adds	r3, #4
 80190c4:	681b      	ldr	r3, [r3, #0]
 80190c6:	405a      	eors	r2, r3
 80190c8:	683b      	ldr	r3, [r7, #0]
 80190ca:	3308      	adds	r3, #8
 80190cc:	681b      	ldr	r3, [r3, #0]
 80190ce:	4013      	ands	r3, r2
 80190d0:	2b00      	cmp	r3, #0
 80190d2:	d10d      	bne.n	80190f0 <ip4_addr_isbroadcast_u32+0x74>
         /* ...and host identifier bits are all ones? =>... */
          && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 80190d4:	683b      	ldr	r3, [r7, #0]
 80190d6:	3308      	adds	r3, #8
 80190d8:	681b      	ldr	r3, [r3, #0]
 80190da:	43da      	mvns	r2, r3
 80190dc:	687b      	ldr	r3, [r7, #4]
 80190de:	401a      	ands	r2, r3
           (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 80190e0:	683b      	ldr	r3, [r7, #0]
 80190e2:	3308      	adds	r3, #8
 80190e4:	681b      	ldr	r3, [r3, #0]
 80190e6:	43db      	mvns	r3, r3
          && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 80190e8:	429a      	cmp	r2, r3
 80190ea:	d101      	bne.n	80190f0 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 80190ec:	2301      	movs	r3, #1
 80190ee:	e000      	b.n	80190f2 <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 80190f0:	2300      	movs	r3, #0
  }
}
 80190f2:	4618      	mov	r0, r3
 80190f4:	3714      	adds	r7, #20
 80190f6:	46bd      	mov	sp, r7
 80190f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80190fc:	4770      	bx	lr
	...

08019100 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 8019100:	b580      	push	{r7, lr}
 8019102:	b084      	sub	sp, #16
 8019104:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 8019106:	2300      	movs	r3, #0
 8019108:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 801910a:	4b12      	ldr	r3, [pc, #72]	; (8019154 <ip_reass_tmr+0x54>)
 801910c:	681b      	ldr	r3, [r3, #0]
 801910e:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 8019110:	e018      	b.n	8019144 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 8019112:	68fb      	ldr	r3, [r7, #12]
 8019114:	7fdb      	ldrb	r3, [r3, #31]
 8019116:	2b00      	cmp	r3, #0
 8019118:	d00b      	beq.n	8019132 <ip_reass_tmr+0x32>
      r->timer--;
 801911a:	68fb      	ldr	r3, [r7, #12]
 801911c:	7fdb      	ldrb	r3, [r3, #31]
 801911e:	3b01      	subs	r3, #1
 8019120:	b2da      	uxtb	r2, r3
 8019122:	68fb      	ldr	r3, [r7, #12]
 8019124:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n",(u16_t)r->timer));
      prev = r;
 8019126:	68fb      	ldr	r3, [r7, #12]
 8019128:	60bb      	str	r3, [r7, #8]
      r = r->next;
 801912a:	68fb      	ldr	r3, [r7, #12]
 801912c:	681b      	ldr	r3, [r3, #0]
 801912e:	60fb      	str	r3, [r7, #12]
 8019130:	e008      	b.n	8019144 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 8019132:	68fb      	ldr	r3, [r7, #12]
 8019134:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 8019136:	68fb      	ldr	r3, [r7, #12]
 8019138:	681b      	ldr	r3, [r3, #0]
 801913a:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 801913c:	68b9      	ldr	r1, [r7, #8]
 801913e:	6878      	ldr	r0, [r7, #4]
 8019140:	f000 f80a 	bl	8019158 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 8019144:	68fb      	ldr	r3, [r7, #12]
 8019146:	2b00      	cmp	r3, #0
 8019148:	d1e3      	bne.n	8019112 <ip_reass_tmr+0x12>
     }
   }
}
 801914a:	bf00      	nop
 801914c:	3710      	adds	r7, #16
 801914e:	46bd      	mov	sp, r7
 8019150:	bd80      	pop	{r7, pc}
 8019152:	bf00      	nop
 8019154:	2000433c 	.word	0x2000433c

08019158 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8019158:	b580      	push	{r7, lr}
 801915a:	b088      	sub	sp, #32
 801915c:	af00      	add	r7, sp, #0
 801915e:	6078      	str	r0, [r7, #4]
 8019160:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 8019162:	2300      	movs	r3, #0
 8019164:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 8019166:	683a      	ldr	r2, [r7, #0]
 8019168:	687b      	ldr	r3, [r7, #4]
 801916a:	429a      	cmp	r2, r3
 801916c:	d105      	bne.n	801917a <ip_reass_free_complete_datagram+0x22>
 801916e:	4b45      	ldr	r3, [pc, #276]	; (8019284 <ip_reass_free_complete_datagram+0x12c>)
 8019170:	22ab      	movs	r2, #171	; 0xab
 8019172:	4945      	ldr	r1, [pc, #276]	; (8019288 <ip_reass_free_complete_datagram+0x130>)
 8019174:	4845      	ldr	r0, [pc, #276]	; (801928c <ip_reass_free_complete_datagram+0x134>)
 8019176:	f001 fe3b 	bl	801adf0 <iprintf>
  if (prev != NULL) {
 801917a:	683b      	ldr	r3, [r7, #0]
 801917c:	2b00      	cmp	r3, #0
 801917e:	d00a      	beq.n	8019196 <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 8019180:	683b      	ldr	r3, [r7, #0]
 8019182:	681b      	ldr	r3, [r3, #0]
 8019184:	687a      	ldr	r2, [r7, #4]
 8019186:	429a      	cmp	r2, r3
 8019188:	d005      	beq.n	8019196 <ip_reass_free_complete_datagram+0x3e>
 801918a:	4b3e      	ldr	r3, [pc, #248]	; (8019284 <ip_reass_free_complete_datagram+0x12c>)
 801918c:	22ad      	movs	r2, #173	; 0xad
 801918e:	4940      	ldr	r1, [pc, #256]	; (8019290 <ip_reass_free_complete_datagram+0x138>)
 8019190:	483e      	ldr	r0, [pc, #248]	; (801928c <ip_reass_free_complete_datagram+0x134>)
 8019192:	f001 fe2d 	bl	801adf0 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 8019196:	687b      	ldr	r3, [r7, #4]
 8019198:	685b      	ldr	r3, [r3, #4]
 801919a:	685b      	ldr	r3, [r3, #4]
 801919c:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 801919e:	697b      	ldr	r3, [r7, #20]
 80191a0:	889b      	ldrh	r3, [r3, #4]
 80191a2:	b29b      	uxth	r3, r3
 80191a4:	2b00      	cmp	r3, #0
 80191a6:	d12a      	bne.n	80191fe <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 80191a8:	687b      	ldr	r3, [r7, #4]
 80191aa:	685b      	ldr	r3, [r3, #4]
 80191ac:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 80191ae:	697b      	ldr	r3, [r7, #20]
 80191b0:	681a      	ldr	r2, [r3, #0]
 80191b2:	687b      	ldr	r3, [r7, #4]
 80191b4:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 80191b6:	69bb      	ldr	r3, [r7, #24]
 80191b8:	6858      	ldr	r0, [r3, #4]
 80191ba:	687b      	ldr	r3, [r7, #4]
 80191bc:	3308      	adds	r3, #8
 80191be:	2214      	movs	r2, #20
 80191c0:	4619      	mov	r1, r3
 80191c2:	f001 fd5a 	bl	801ac7a <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 80191c6:	2101      	movs	r1, #1
 80191c8:	69b8      	ldr	r0, [r7, #24]
 80191ca:	f7ff fc65 	bl	8018a98 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 80191ce:	69b8      	ldr	r0, [r7, #24]
 80191d0:	f7f8 fc3c 	bl	8011a4c <pbuf_clen>
 80191d4:	4603      	mov	r3, r0
 80191d6:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 80191d8:	8bfa      	ldrh	r2, [r7, #30]
 80191da:	8a7b      	ldrh	r3, [r7, #18]
 80191dc:	4413      	add	r3, r2
 80191de:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80191e2:	db05      	blt.n	80191f0 <ip_reass_free_complete_datagram+0x98>
 80191e4:	4b27      	ldr	r3, [pc, #156]	; (8019284 <ip_reass_free_complete_datagram+0x12c>)
 80191e6:	22bc      	movs	r2, #188	; 0xbc
 80191e8:	492a      	ldr	r1, [pc, #168]	; (8019294 <ip_reass_free_complete_datagram+0x13c>)
 80191ea:	4828      	ldr	r0, [pc, #160]	; (801928c <ip_reass_free_complete_datagram+0x134>)
 80191ec:	f001 fe00 	bl	801adf0 <iprintf>
    pbufs_freed += clen;
 80191f0:	8bfa      	ldrh	r2, [r7, #30]
 80191f2:	8a7b      	ldrh	r3, [r7, #18]
 80191f4:	4413      	add	r3, r2
 80191f6:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 80191f8:	69b8      	ldr	r0, [r7, #24]
 80191fa:	f7f8 fb8d 	bl	8011918 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 80191fe:	687b      	ldr	r3, [r7, #4]
 8019200:	685b      	ldr	r3, [r3, #4]
 8019202:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 8019204:	e01f      	b.n	8019246 <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 8019206:	69bb      	ldr	r3, [r7, #24]
 8019208:	685b      	ldr	r3, [r3, #4]
 801920a:	617b      	str	r3, [r7, #20]
    pcur = p;
 801920c:	69bb      	ldr	r3, [r7, #24]
 801920e:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 8019210:	697b      	ldr	r3, [r7, #20]
 8019212:	681b      	ldr	r3, [r3, #0]
 8019214:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 8019216:	68f8      	ldr	r0, [r7, #12]
 8019218:	f7f8 fc18 	bl	8011a4c <pbuf_clen>
 801921c:	4603      	mov	r3, r0
 801921e:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8019220:	8bfa      	ldrh	r2, [r7, #30]
 8019222:	8a7b      	ldrh	r3, [r7, #18]
 8019224:	4413      	add	r3, r2
 8019226:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801922a:	db05      	blt.n	8019238 <ip_reass_free_complete_datagram+0xe0>
 801922c:	4b15      	ldr	r3, [pc, #84]	; (8019284 <ip_reass_free_complete_datagram+0x12c>)
 801922e:	22cc      	movs	r2, #204	; 0xcc
 8019230:	4918      	ldr	r1, [pc, #96]	; (8019294 <ip_reass_free_complete_datagram+0x13c>)
 8019232:	4816      	ldr	r0, [pc, #88]	; (801928c <ip_reass_free_complete_datagram+0x134>)
 8019234:	f001 fddc 	bl	801adf0 <iprintf>
    pbufs_freed += clen;
 8019238:	8bfa      	ldrh	r2, [r7, #30]
 801923a:	8a7b      	ldrh	r3, [r7, #18]
 801923c:	4413      	add	r3, r2
 801923e:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 8019240:	68f8      	ldr	r0, [r7, #12]
 8019242:	f7f8 fb69 	bl	8011918 <pbuf_free>
  while (p != NULL) {
 8019246:	69bb      	ldr	r3, [r7, #24]
 8019248:	2b00      	cmp	r3, #0
 801924a:	d1dc      	bne.n	8019206 <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 801924c:	6839      	ldr	r1, [r7, #0]
 801924e:	6878      	ldr	r0, [r7, #4]
 8019250:	f000 f8c2 	bl	80193d8 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= pbufs_freed);
 8019254:	4b10      	ldr	r3, [pc, #64]	; (8019298 <ip_reass_free_complete_datagram+0x140>)
 8019256:	881b      	ldrh	r3, [r3, #0]
 8019258:	8bfa      	ldrh	r2, [r7, #30]
 801925a:	429a      	cmp	r2, r3
 801925c:	d905      	bls.n	801926a <ip_reass_free_complete_datagram+0x112>
 801925e:	4b09      	ldr	r3, [pc, #36]	; (8019284 <ip_reass_free_complete_datagram+0x12c>)
 8019260:	22d2      	movs	r2, #210	; 0xd2
 8019262:	490e      	ldr	r1, [pc, #56]	; (801929c <ip_reass_free_complete_datagram+0x144>)
 8019264:	4809      	ldr	r0, [pc, #36]	; (801928c <ip_reass_free_complete_datagram+0x134>)
 8019266:	f001 fdc3 	bl	801adf0 <iprintf>
  ip_reass_pbufcount -= pbufs_freed;
 801926a:	4b0b      	ldr	r3, [pc, #44]	; (8019298 <ip_reass_free_complete_datagram+0x140>)
 801926c:	881a      	ldrh	r2, [r3, #0]
 801926e:	8bfb      	ldrh	r3, [r7, #30]
 8019270:	1ad3      	subs	r3, r2, r3
 8019272:	b29a      	uxth	r2, r3
 8019274:	4b08      	ldr	r3, [pc, #32]	; (8019298 <ip_reass_free_complete_datagram+0x140>)
 8019276:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 8019278:	8bfb      	ldrh	r3, [r7, #30]
}
 801927a:	4618      	mov	r0, r3
 801927c:	3720      	adds	r7, #32
 801927e:	46bd      	mov	sp, r7
 8019280:	bd80      	pop	{r7, pc}
 8019282:	bf00      	nop
 8019284:	0801e40c 	.word	0x0801e40c
 8019288:	0801e448 	.word	0x0801e448
 801928c:	0801e454 	.word	0x0801e454
 8019290:	0801e47c 	.word	0x0801e47c
 8019294:	0801e490 	.word	0x0801e490
 8019298:	20004340 	.word	0x20004340
 801929c:	0801e4b0 	.word	0x0801e4b0

080192a0 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 80192a0:	b580      	push	{r7, lr}
 80192a2:	b08a      	sub	sp, #40	; 0x28
 80192a4:	af00      	add	r7, sp, #0
 80192a6:	6078      	str	r0, [r7, #4]
 80192a8:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 80192aa:	2300      	movs	r3, #0
 80192ac:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 80192ae:	2300      	movs	r3, #0
 80192b0:	623b      	str	r3, [r7, #32]
    prev = NULL;
 80192b2:	2300      	movs	r3, #0
 80192b4:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 80192b6:	2300      	movs	r3, #0
 80192b8:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 80192ba:	2300      	movs	r3, #0
 80192bc:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 80192be:	4b28      	ldr	r3, [pc, #160]	; (8019360 <ip_reass_remove_oldest_datagram+0xc0>)
 80192c0:	681b      	ldr	r3, [r3, #0]
 80192c2:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 80192c4:	e030      	b.n	8019328 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 80192c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80192c8:	695a      	ldr	r2, [r3, #20]
 80192ca:	687b      	ldr	r3, [r7, #4]
 80192cc:	68db      	ldr	r3, [r3, #12]
 80192ce:	429a      	cmp	r2, r3
 80192d0:	d10c      	bne.n	80192ec <ip_reass_remove_oldest_datagram+0x4c>
 80192d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80192d4:	699a      	ldr	r2, [r3, #24]
 80192d6:	687b      	ldr	r3, [r7, #4]
 80192d8:	691b      	ldr	r3, [r3, #16]
 80192da:	429a      	cmp	r2, r3
 80192dc:	d106      	bne.n	80192ec <ip_reass_remove_oldest_datagram+0x4c>
 80192de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80192e0:	899a      	ldrh	r2, [r3, #12]
 80192e2:	687b      	ldr	r3, [r7, #4]
 80192e4:	889b      	ldrh	r3, [r3, #4]
 80192e6:	b29b      	uxth	r3, r3
 80192e8:	429a      	cmp	r2, r3
 80192ea:	d014      	beq.n	8019316 <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 80192ec:	693b      	ldr	r3, [r7, #16]
 80192ee:	3301      	adds	r3, #1
 80192f0:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 80192f2:	6a3b      	ldr	r3, [r7, #32]
 80192f4:	2b00      	cmp	r3, #0
 80192f6:	d104      	bne.n	8019302 <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 80192f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80192fa:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 80192fc:	69fb      	ldr	r3, [r7, #28]
 80192fe:	61bb      	str	r3, [r7, #24]
 8019300:	e009      	b.n	8019316 <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 8019302:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019304:	7fda      	ldrb	r2, [r3, #31]
 8019306:	6a3b      	ldr	r3, [r7, #32]
 8019308:	7fdb      	ldrb	r3, [r3, #31]
 801930a:	429a      	cmp	r2, r3
 801930c:	d803      	bhi.n	8019316 <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 801930e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019310:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8019312:	69fb      	ldr	r3, [r7, #28]
 8019314:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 8019316:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019318:	681b      	ldr	r3, [r3, #0]
 801931a:	2b00      	cmp	r3, #0
 801931c:	d001      	beq.n	8019322 <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 801931e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019320:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 8019322:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019324:	681b      	ldr	r3, [r3, #0]
 8019326:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8019328:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801932a:	2b00      	cmp	r3, #0
 801932c:	d1cb      	bne.n	80192c6 <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 801932e:	6a3b      	ldr	r3, [r7, #32]
 8019330:	2b00      	cmp	r3, #0
 8019332:	d008      	beq.n	8019346 <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 8019334:	69b9      	ldr	r1, [r7, #24]
 8019336:	6a38      	ldr	r0, [r7, #32]
 8019338:	f7ff ff0e 	bl	8019158 <ip_reass_free_complete_datagram>
 801933c:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 801933e:	697a      	ldr	r2, [r7, #20]
 8019340:	68fb      	ldr	r3, [r7, #12]
 8019342:	4413      	add	r3, r2
 8019344:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 8019346:	697a      	ldr	r2, [r7, #20]
 8019348:	683b      	ldr	r3, [r7, #0]
 801934a:	429a      	cmp	r2, r3
 801934c:	da02      	bge.n	8019354 <ip_reass_remove_oldest_datagram+0xb4>
 801934e:	693b      	ldr	r3, [r7, #16]
 8019350:	2b01      	cmp	r3, #1
 8019352:	dcac      	bgt.n	80192ae <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 8019354:	697b      	ldr	r3, [r7, #20]
}
 8019356:	4618      	mov	r0, r3
 8019358:	3728      	adds	r7, #40	; 0x28
 801935a:	46bd      	mov	sp, r7
 801935c:	bd80      	pop	{r7, pc}
 801935e:	bf00      	nop
 8019360:	2000433c 	.word	0x2000433c

08019364 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata*
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 8019364:	b580      	push	{r7, lr}
 8019366:	b084      	sub	sp, #16
 8019368:	af00      	add	r7, sp, #0
 801936a:	6078      	str	r0, [r7, #4]
 801936c:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 801936e:	2004      	movs	r0, #4
 8019370:	f7f7 fd26 	bl	8010dc0 <memp_malloc>
 8019374:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 8019376:	68fb      	ldr	r3, [r7, #12]
 8019378:	2b00      	cmp	r3, #0
 801937a:	d110      	bne.n	801939e <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 801937c:	6839      	ldr	r1, [r7, #0]
 801937e:	6878      	ldr	r0, [r7, #4]
 8019380:	f7ff ff8e 	bl	80192a0 <ip_reass_remove_oldest_datagram>
 8019384:	4602      	mov	r2, r0
 8019386:	683b      	ldr	r3, [r7, #0]
 8019388:	4293      	cmp	r3, r2
 801938a:	dc03      	bgt.n	8019394 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 801938c:	2004      	movs	r0, #4
 801938e:	f7f7 fd17 	bl	8010dc0 <memp_malloc>
 8019392:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 8019394:	68fb      	ldr	r3, [r7, #12]
 8019396:	2b00      	cmp	r3, #0
 8019398:	d101      	bne.n	801939e <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG,("Failed to alloc reassdata struct\n"));
      return NULL;
 801939a:	2300      	movs	r3, #0
 801939c:	e016      	b.n	80193cc <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 801939e:	2220      	movs	r2, #32
 80193a0:	2100      	movs	r1, #0
 80193a2:	68f8      	ldr	r0, [r7, #12]
 80193a4:	f001 fc74 	bl	801ac90 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 80193a8:	68fb      	ldr	r3, [r7, #12]
 80193aa:	2203      	movs	r2, #3
 80193ac:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 80193ae:	4b09      	ldr	r3, [pc, #36]	; (80193d4 <ip_reass_enqueue_new_datagram+0x70>)
 80193b0:	681a      	ldr	r2, [r3, #0]
 80193b2:	68fb      	ldr	r3, [r7, #12]
 80193b4:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 80193b6:	4a07      	ldr	r2, [pc, #28]	; (80193d4 <ip_reass_enqueue_new_datagram+0x70>)
 80193b8:	68fb      	ldr	r3, [r7, #12]
 80193ba:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 80193bc:	68fb      	ldr	r3, [r7, #12]
 80193be:	3308      	adds	r3, #8
 80193c0:	2214      	movs	r2, #20
 80193c2:	6879      	ldr	r1, [r7, #4]
 80193c4:	4618      	mov	r0, r3
 80193c6:	f001 fc58 	bl	801ac7a <memcpy>
  return ipr;
 80193ca:	68fb      	ldr	r3, [r7, #12]
}
 80193cc:	4618      	mov	r0, r3
 80193ce:	3710      	adds	r7, #16
 80193d0:	46bd      	mov	sp, r7
 80193d2:	bd80      	pop	{r7, pc}
 80193d4:	2000433c 	.word	0x2000433c

080193d8 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 80193d8:	b580      	push	{r7, lr}
 80193da:	b082      	sub	sp, #8
 80193dc:	af00      	add	r7, sp, #0
 80193de:	6078      	str	r0, [r7, #4]
 80193e0:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 80193e2:	4b10      	ldr	r3, [pc, #64]	; (8019424 <ip_reass_dequeue_datagram+0x4c>)
 80193e4:	681b      	ldr	r3, [r3, #0]
 80193e6:	687a      	ldr	r2, [r7, #4]
 80193e8:	429a      	cmp	r2, r3
 80193ea:	d104      	bne.n	80193f6 <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 80193ec:	687b      	ldr	r3, [r7, #4]
 80193ee:	681b      	ldr	r3, [r3, #0]
 80193f0:	4a0c      	ldr	r2, [pc, #48]	; (8019424 <ip_reass_dequeue_datagram+0x4c>)
 80193f2:	6013      	str	r3, [r2, #0]
 80193f4:	e00d      	b.n	8019412 <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 80193f6:	683b      	ldr	r3, [r7, #0]
 80193f8:	2b00      	cmp	r3, #0
 80193fa:	d106      	bne.n	801940a <ip_reass_dequeue_datagram+0x32>
 80193fc:	4b0a      	ldr	r3, [pc, #40]	; (8019428 <ip_reass_dequeue_datagram+0x50>)
 80193fe:	f240 1245 	movw	r2, #325	; 0x145
 8019402:	490a      	ldr	r1, [pc, #40]	; (801942c <ip_reass_dequeue_datagram+0x54>)
 8019404:	480a      	ldr	r0, [pc, #40]	; (8019430 <ip_reass_dequeue_datagram+0x58>)
 8019406:	f001 fcf3 	bl	801adf0 <iprintf>
    prev->next = ipr->next;
 801940a:	687b      	ldr	r3, [r7, #4]
 801940c:	681a      	ldr	r2, [r3, #0]
 801940e:	683b      	ldr	r3, [r7, #0]
 8019410:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 8019412:	6879      	ldr	r1, [r7, #4]
 8019414:	2004      	movs	r0, #4
 8019416:	f7f7 fd25 	bl	8010e64 <memp_free>
}
 801941a:	bf00      	nop
 801941c:	3708      	adds	r7, #8
 801941e:	46bd      	mov	sp, r7
 8019420:	bd80      	pop	{r7, pc}
 8019422:	bf00      	nop
 8019424:	2000433c 	.word	0x2000433c
 8019428:	0801e40c 	.word	0x0801e40c
 801942c:	0801e4cc 	.word	0x0801e4cc
 8019430:	0801e454 	.word	0x0801e454

08019434 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 8019434:	b580      	push	{r7, lr}
 8019436:	b08c      	sub	sp, #48	; 0x30
 8019438:	af00      	add	r7, sp, #0
 801943a:	60f8      	str	r0, [r7, #12]
 801943c:	60b9      	str	r1, [r7, #8]
 801943e:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev=NULL;
 8019440:	2300      	movs	r3, #0
 8019442:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  struct ip_hdr *fraghdr;
  int valid = 1;
 8019444:	2301      	movs	r3, #1
 8019446:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr*)new_p->payload;
 8019448:	68bb      	ldr	r3, [r7, #8]
 801944a:	685b      	ldr	r3, [r3, #4]
 801944c:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr)) - IPH_HL(fraghdr) * 4;
 801944e:	69fb      	ldr	r3, [r7, #28]
 8019450:	885b      	ldrh	r3, [r3, #2]
 8019452:	b29b      	uxth	r3, r3
 8019454:	4618      	mov	r0, r3
 8019456:	f7f7 f8c5 	bl	80105e4 <lwip_htons>
 801945a:	4603      	mov	r3, r0
 801945c:	461a      	mov	r2, r3
 801945e:	69fb      	ldr	r3, [r7, #28]
 8019460:	781b      	ldrb	r3, [r3, #0]
 8019462:	b29b      	uxth	r3, r3
 8019464:	f003 030f 	and.w	r3, r3, #15
 8019468:	b29b      	uxth	r3, r3
 801946a:	009b      	lsls	r3, r3, #2
 801946c:	b29b      	uxth	r3, r3
 801946e:	1ad3      	subs	r3, r2, r3
 8019470:	837b      	strh	r3, [r7, #26]
  offset = (lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) * 8;
 8019472:	69fb      	ldr	r3, [r7, #28]
 8019474:	88db      	ldrh	r3, [r3, #6]
 8019476:	b29b      	uxth	r3, r3
 8019478:	4618      	mov	r0, r3
 801947a:	f7f7 f8b3 	bl	80105e4 <lwip_htons>
 801947e:	4603      	mov	r3, r0
 8019480:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8019484:	b29b      	uxth	r3, r3
 8019486:	00db      	lsls	r3, r3, #3
 8019488:	833b      	strh	r3, [r7, #24]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper*)new_p->payload;
 801948a:	68bb      	ldr	r3, [r7, #8]
 801948c:	685b      	ldr	r3, [r3, #4]
 801948e:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 8019490:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019492:	2200      	movs	r2, #0
 8019494:	701a      	strb	r2, [r3, #0]
 8019496:	2200      	movs	r2, #0
 8019498:	705a      	strb	r2, [r3, #1]
 801949a:	2200      	movs	r2, #0
 801949c:	709a      	strb	r2, [r3, #2]
 801949e:	2200      	movs	r2, #0
 80194a0:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 80194a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80194a4:	8b3a      	ldrh	r2, [r7, #24]
 80194a6:	809a      	strh	r2, [r3, #4]
  iprh->end = offset + len;
 80194a8:	8b3a      	ldrh	r2, [r7, #24]
 80194aa:	8b7b      	ldrh	r3, [r7, #26]
 80194ac:	4413      	add	r3, r2
 80194ae:	b29a      	uxth	r2, r3
 80194b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80194b2:	80da      	strh	r2, [r3, #6]

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 80194b4:	68fb      	ldr	r3, [r7, #12]
 80194b6:	685b      	ldr	r3, [r3, #4]
 80194b8:	627b      	str	r3, [r7, #36]	; 0x24
 80194ba:	e061      	b.n	8019580 <ip_reass_chain_frag_into_datagram_and_validate+0x14c>
    iprh_tmp = (struct ip_reass_helper*)q->payload;
 80194bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80194be:	685b      	ldr	r3, [r3, #4]
 80194c0:	617b      	str	r3, [r7, #20]
    if (iprh->start < iprh_tmp->start) {
 80194c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80194c4:	889b      	ldrh	r3, [r3, #4]
 80194c6:	b29a      	uxth	r2, r3
 80194c8:	697b      	ldr	r3, [r7, #20]
 80194ca:	889b      	ldrh	r3, [r3, #4]
 80194cc:	b29b      	uxth	r3, r3
 80194ce:	429a      	cmp	r2, r3
 80194d0:	d232      	bcs.n	8019538 <ip_reass_chain_frag_into_datagram_and_validate+0x104>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 80194d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80194d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80194d6:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 80194d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80194da:	2b00      	cmp	r3, #0
 80194dc:	d01f      	beq.n	801951e <ip_reass_chain_frag_into_datagram_and_validate+0xea>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 80194de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80194e0:	889b      	ldrh	r3, [r3, #4]
 80194e2:	b29a      	uxth	r2, r3
 80194e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80194e6:	88db      	ldrh	r3, [r3, #6]
 80194e8:	b29b      	uxth	r3, r3
 80194ea:	429a      	cmp	r2, r3
 80194ec:	f0c0 80e3 	bcc.w	80196b6 <ip_reass_chain_frag_into_datagram_and_validate+0x282>
 80194f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80194f2:	88db      	ldrh	r3, [r3, #6]
 80194f4:	b29a      	uxth	r2, r3
 80194f6:	697b      	ldr	r3, [r7, #20]
 80194f8:	889b      	ldrh	r3, [r3, #4]
 80194fa:	b29b      	uxth	r3, r3
 80194fc:	429a      	cmp	r2, r3
 80194fe:	f200 80da 	bhi.w	80196b6 <ip_reass_chain_frag_into_datagram_and_validate+0x282>
          /* fragment overlaps with previous or following, throw away */
          goto freepbuf;
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 8019502:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019504:	68ba      	ldr	r2, [r7, #8]
 8019506:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 8019508:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801950a:	88db      	ldrh	r3, [r3, #6]
 801950c:	b29a      	uxth	r2, r3
 801950e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019510:	889b      	ldrh	r3, [r3, #4]
 8019512:	b29b      	uxth	r3, r3
 8019514:	429a      	cmp	r2, r3
 8019516:	d037      	beq.n	8019588 <ip_reass_chain_frag_into_datagram_and_validate+0x154>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8019518:	2300      	movs	r3, #0
 801951a:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 801951c:	e034      	b.n	8019588 <ip_reass_chain_frag_into_datagram_and_validate+0x154>
        if (iprh->end > iprh_tmp->start) {
 801951e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019520:	88db      	ldrh	r3, [r3, #6]
 8019522:	b29a      	uxth	r2, r3
 8019524:	697b      	ldr	r3, [r7, #20]
 8019526:	889b      	ldrh	r3, [r3, #4]
 8019528:	b29b      	uxth	r3, r3
 801952a:	429a      	cmp	r2, r3
 801952c:	f200 80c5 	bhi.w	80196ba <ip_reass_chain_frag_into_datagram_and_validate+0x286>
        ipr->p = new_p;
 8019530:	68fb      	ldr	r3, [r7, #12]
 8019532:	68ba      	ldr	r2, [r7, #8]
 8019534:	605a      	str	r2, [r3, #4]
      break;
 8019536:	e027      	b.n	8019588 <ip_reass_chain_frag_into_datagram_and_validate+0x154>
    } else if (iprh->start == iprh_tmp->start) {
 8019538:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801953a:	889b      	ldrh	r3, [r3, #4]
 801953c:	b29a      	uxth	r2, r3
 801953e:	697b      	ldr	r3, [r7, #20]
 8019540:	889b      	ldrh	r3, [r3, #4]
 8019542:	b29b      	uxth	r3, r3
 8019544:	429a      	cmp	r2, r3
 8019546:	f000 80ba 	beq.w	80196be <ip_reass_chain_frag_into_datagram_and_validate+0x28a>
      /* received the same datagram twice: no need to keep the datagram */
      goto freepbuf;
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 801954a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801954c:	889b      	ldrh	r3, [r3, #4]
 801954e:	b29a      	uxth	r2, r3
 8019550:	697b      	ldr	r3, [r7, #20]
 8019552:	88db      	ldrh	r3, [r3, #6]
 8019554:	b29b      	uxth	r3, r3
 8019556:	429a      	cmp	r2, r3
 8019558:	f0c0 80b3 	bcc.w	80196c2 <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
      /* overlap: no need to keep the new datagram */
      goto freepbuf;
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 801955c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801955e:	2b00      	cmp	r3, #0
 8019560:	d009      	beq.n	8019576 <ip_reass_chain_frag_into_datagram_and_validate+0x142>
        if (iprh_prev->end != iprh_tmp->start) {
 8019562:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019564:	88db      	ldrh	r3, [r3, #6]
 8019566:	b29a      	uxth	r2, r3
 8019568:	697b      	ldr	r3, [r7, #20]
 801956a:	889b      	ldrh	r3, [r3, #4]
 801956c:	b29b      	uxth	r3, r3
 801956e:	429a      	cmp	r2, r3
 8019570:	d001      	beq.n	8019576 <ip_reass_chain_frag_into_datagram_and_validate+0x142>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8019572:	2300      	movs	r3, #0
 8019574:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 8019576:	697b      	ldr	r3, [r7, #20]
 8019578:	681b      	ldr	r3, [r3, #0]
 801957a:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 801957c:	697b      	ldr	r3, [r7, #20]
 801957e:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 8019580:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019582:	2b00      	cmp	r3, #0
 8019584:	d19a      	bne.n	80194bc <ip_reass_chain_frag_into_datagram_and_validate+0x88>
 8019586:	e000      	b.n	801958a <ip_reass_chain_frag_into_datagram_and_validate+0x156>
      break;
 8019588:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 801958a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801958c:	2b00      	cmp	r3, #0
 801958e:	d12d      	bne.n	80195ec <ip_reass_chain_frag_into_datagram_and_validate+0x1b8>
    if (iprh_prev != NULL) {
 8019590:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019592:	2b00      	cmp	r3, #0
 8019594:	d01c      	beq.n	80195d0 <ip_reass_chain_frag_into_datagram_and_validate+0x19c>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 8019596:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019598:	88db      	ldrh	r3, [r3, #6]
 801959a:	b29a      	uxth	r2, r3
 801959c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801959e:	889b      	ldrh	r3, [r3, #4]
 80195a0:	b29b      	uxth	r3, r3
 80195a2:	429a      	cmp	r2, r3
 80195a4:	d906      	bls.n	80195b4 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
 80195a6:	4b51      	ldr	r3, [pc, #324]	; (80196ec <ip_reass_chain_frag_into_datagram_and_validate+0x2b8>)
 80195a8:	f240 12ab 	movw	r2, #427	; 0x1ab
 80195ac:	4950      	ldr	r1, [pc, #320]	; (80196f0 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80195ae:	4851      	ldr	r0, [pc, #324]	; (80196f4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 80195b0:	f001 fc1e 	bl	801adf0 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 80195b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80195b6:	68ba      	ldr	r2, [r7, #8]
 80195b8:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 80195ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80195bc:	88db      	ldrh	r3, [r3, #6]
 80195be:	b29a      	uxth	r2, r3
 80195c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80195c2:	889b      	ldrh	r3, [r3, #4]
 80195c4:	b29b      	uxth	r3, r3
 80195c6:	429a      	cmp	r2, r3
 80195c8:	d010      	beq.n	80195ec <ip_reass_chain_frag_into_datagram_and_validate+0x1b8>
        valid = 0;
 80195ca:	2300      	movs	r3, #0
 80195cc:	623b      	str	r3, [r7, #32]
 80195ce:	e00d      	b.n	80195ec <ip_reass_chain_frag_into_datagram_and_validate+0x1b8>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 80195d0:	68fb      	ldr	r3, [r7, #12]
 80195d2:	685b      	ldr	r3, [r3, #4]
 80195d4:	2b00      	cmp	r3, #0
 80195d6:	d006      	beq.n	80195e6 <ip_reass_chain_frag_into_datagram_and_validate+0x1b2>
 80195d8:	4b44      	ldr	r3, [pc, #272]	; (80196ec <ip_reass_chain_frag_into_datagram_and_validate+0x2b8>)
 80195da:	f44f 72da 	mov.w	r2, #436	; 0x1b4
 80195de:	4946      	ldr	r1, [pc, #280]	; (80196f8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80195e0:	4844      	ldr	r0, [pc, #272]	; (80196f4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 80195e2:	f001 fc05 	bl	801adf0 <iprintf>
        ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 80195e6:	68fb      	ldr	r3, [r7, #12]
 80195e8:	68ba      	ldr	r2, [r7, #8]
 80195ea:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 80195ec:	687b      	ldr	r3, [r7, #4]
 80195ee:	2b00      	cmp	r3, #0
 80195f0:	d105      	bne.n	80195fe <ip_reass_chain_frag_into_datagram_and_validate+0x1ca>
 80195f2:	68fb      	ldr	r3, [r7, #12]
 80195f4:	7f9b      	ldrb	r3, [r3, #30]
 80195f6:	f003 0301 	and.w	r3, r3, #1
 80195fa:	2b00      	cmp	r3, #0
 80195fc:	d059      	beq.n	80196b2 <ip_reass_chain_frag_into_datagram_and_validate+0x27e>
    /* and had no holes so far */
    if (valid) {
 80195fe:	6a3b      	ldr	r3, [r7, #32]
 8019600:	2b00      	cmp	r3, #0
 8019602:	d04f      	beq.n	80196a4 <ip_reass_chain_frag_into_datagram_and_validate+0x270>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper*)ipr->p->payload)->start != 0)) {
 8019604:	68fb      	ldr	r3, [r7, #12]
 8019606:	685b      	ldr	r3, [r3, #4]
 8019608:	2b00      	cmp	r3, #0
 801960a:	d006      	beq.n	801961a <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 801960c:	68fb      	ldr	r3, [r7, #12]
 801960e:	685b      	ldr	r3, [r3, #4]
 8019610:	685b      	ldr	r3, [r3, #4]
 8019612:	889b      	ldrh	r3, [r3, #4]
 8019614:	b29b      	uxth	r3, r3
 8019616:	2b00      	cmp	r3, #0
 8019618:	d002      	beq.n	8019620 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 801961a:	2300      	movs	r3, #0
 801961c:	623b      	str	r3, [r7, #32]
 801961e:	e041      	b.n	80196a4 <ip_reass_chain_frag_into_datagram_and_validate+0x270>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 8019620:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019622:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 8019624:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019626:	681b      	ldr	r3, [r3, #0]
 8019628:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 801962a:	e012      	b.n	8019652 <ip_reass_chain_frag_into_datagram_and_validate+0x21e>
          iprh = (struct ip_reass_helper*)q->payload;
 801962c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801962e:	685b      	ldr	r3, [r3, #4]
 8019630:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 8019632:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019634:	88db      	ldrh	r3, [r3, #6]
 8019636:	b29a      	uxth	r2, r3
 8019638:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801963a:	889b      	ldrh	r3, [r3, #4]
 801963c:	b29b      	uxth	r3, r3
 801963e:	429a      	cmp	r2, r3
 8019640:	d002      	beq.n	8019648 <ip_reass_chain_frag_into_datagram_and_validate+0x214>
            valid = 0;
 8019642:	2300      	movs	r3, #0
 8019644:	623b      	str	r3, [r7, #32]
            break;
 8019646:	e007      	b.n	8019658 <ip_reass_chain_frag_into_datagram_and_validate+0x224>
          }
          iprh_prev = iprh;
 8019648:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801964a:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 801964c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801964e:	681b      	ldr	r3, [r3, #0]
 8019650:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 8019652:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019654:	2b00      	cmp	r3, #0
 8019656:	d1e9      	bne.n	801962c <ip_reass_chain_frag_into_datagram_and_validate+0x1f8>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 8019658:	6a3b      	ldr	r3, [r7, #32]
 801965a:	2b00      	cmp	r3, #0
 801965c:	d022      	beq.n	80196a4 <ip_reass_chain_frag_into_datagram_and_validate+0x270>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 801965e:	68fb      	ldr	r3, [r7, #12]
 8019660:	685b      	ldr	r3, [r3, #4]
 8019662:	2b00      	cmp	r3, #0
 8019664:	d106      	bne.n	8019674 <ip_reass_chain_frag_into_datagram_and_validate+0x240>
 8019666:	4b21      	ldr	r3, [pc, #132]	; (80196ec <ip_reass_chain_frag_into_datagram_and_validate+0x2b8>)
 8019668:	f44f 72ea 	mov.w	r2, #468	; 0x1d4
 801966c:	4923      	ldr	r1, [pc, #140]	; (80196fc <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 801966e:	4821      	ldr	r0, [pc, #132]	; (80196f4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 8019670:	f001 fbbe 	bl	801adf0 <iprintf>
          LWIP_ASSERT("sanity check",
 8019674:	68fb      	ldr	r3, [r7, #12]
 8019676:	685b      	ldr	r3, [r3, #4]
 8019678:	685b      	ldr	r3, [r3, #4]
 801967a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801967c:	429a      	cmp	r2, r3
 801967e:	d106      	bne.n	801968e <ip_reass_chain_frag_into_datagram_and_validate+0x25a>
 8019680:	4b1a      	ldr	r3, [pc, #104]	; (80196ec <ip_reass_chain_frag_into_datagram_and_validate+0x2b8>)
 8019682:	f44f 72eb 	mov.w	r2, #470	; 0x1d6
 8019686:	491d      	ldr	r1, [pc, #116]	; (80196fc <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 8019688:	481a      	ldr	r0, [pc, #104]	; (80196f4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 801968a:	f001 fbb1 	bl	801adf0 <iprintf>
            ((struct ip_reass_helper*)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 801968e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019690:	681b      	ldr	r3, [r3, #0]
 8019692:	2b00      	cmp	r3, #0
 8019694:	d006      	beq.n	80196a4 <ip_reass_chain_frag_into_datagram_and_validate+0x270>
 8019696:	4b15      	ldr	r3, [pc, #84]	; (80196ec <ip_reass_chain_frag_into_datagram_and_validate+0x2b8>)
 8019698:	f44f 72ec 	mov.w	r2, #472	; 0x1d8
 801969c:	4918      	ldr	r1, [pc, #96]	; (8019700 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 801969e:	4815      	ldr	r0, [pc, #84]	; (80196f4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 80196a0:	f001 fba6 	bl	801adf0 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 80196a4:	6a3b      	ldr	r3, [r7, #32]
 80196a6:	2b00      	cmp	r3, #0
 80196a8:	bf14      	ite	ne
 80196aa:	2301      	movne	r3, #1
 80196ac:	2300      	moveq	r3, #0
 80196ae:	b2db      	uxtb	r3, r3
 80196b0:	e018      	b.n	80196e4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b0>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 80196b2:	2300      	movs	r3, #0
 80196b4:	e016      	b.n	80196e4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b0>
#if IP_REASS_CHECK_OVERLAP
freepbuf:
 80196b6:	bf00      	nop
 80196b8:	e004      	b.n	80196c4 <ip_reass_chain_frag_into_datagram_and_validate+0x290>
          goto freepbuf;
 80196ba:	bf00      	nop
 80196bc:	e002      	b.n	80196c4 <ip_reass_chain_frag_into_datagram_and_validate+0x290>
      goto freepbuf;
 80196be:	bf00      	nop
 80196c0:	e000      	b.n	80196c4 <ip_reass_chain_frag_into_datagram_and_validate+0x290>
      goto freepbuf;
 80196c2:	bf00      	nop
  ip_reass_pbufcount -= pbuf_clen(new_p);
 80196c4:	68b8      	ldr	r0, [r7, #8]
 80196c6:	f7f8 f9c1 	bl	8011a4c <pbuf_clen>
 80196ca:	4603      	mov	r3, r0
 80196cc:	461a      	mov	r2, r3
 80196ce:	4b0d      	ldr	r3, [pc, #52]	; (8019704 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 80196d0:	881b      	ldrh	r3, [r3, #0]
 80196d2:	1a9b      	subs	r3, r3, r2
 80196d4:	b29a      	uxth	r2, r3
 80196d6:	4b0b      	ldr	r3, [pc, #44]	; (8019704 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 80196d8:	801a      	strh	r2, [r3, #0]
  pbuf_free(new_p);
 80196da:	68b8      	ldr	r0, [r7, #8]
 80196dc:	f7f8 f91c 	bl	8011918 <pbuf_free>
  return IP_REASS_VALIDATE_PBUF_DROPPED;
 80196e0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
#endif /* IP_REASS_CHECK_OVERLAP */
}
 80196e4:	4618      	mov	r0, r3
 80196e6:	3730      	adds	r7, #48	; 0x30
 80196e8:	46bd      	mov	sp, r7
 80196ea:	bd80      	pop	{r7, pc}
 80196ec:	0801e40c 	.word	0x0801e40c
 80196f0:	0801e4e8 	.word	0x0801e4e8
 80196f4:	0801e454 	.word	0x0801e454
 80196f8:	0801e508 	.word	0x0801e508
 80196fc:	0801e540 	.word	0x0801e540
 8019700:	0801e550 	.word	0x0801e550
 8019704:	20004340 	.word	0x20004340

08019708 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 8019708:	b580      	push	{r7, lr}
 801970a:	b08e      	sub	sp, #56	; 0x38
 801970c:	af00      	add	r7, sp, #0
 801970e:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr*)p->payload;
 8019710:	687b      	ldr	r3, [r7, #4]
 8019712:	685b      	ldr	r3, [r3, #4]
 8019714:	62bb      	str	r3, [r7, #40]	; 0x28

  if ((IPH_HL(fraghdr) * 4) != IP_HLEN) {
 8019716:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019718:	781b      	ldrb	r3, [r3, #0]
 801971a:	f003 030f 	and.w	r3, r3, #15
 801971e:	009b      	lsls	r3, r3, #2
 8019720:	2b14      	cmp	r3, #20
 8019722:	f040 8131 	bne.w	8019988 <ip4_reass+0x280>
    LWIP_DEBUGF(IP_REASS_DEBUG,("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = (lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) * 8;
 8019726:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019728:	88db      	ldrh	r3, [r3, #6]
 801972a:	b29b      	uxth	r3, r3
 801972c:	4618      	mov	r0, r3
 801972e:	f7f6 ff59 	bl	80105e4 <lwip_htons>
 8019732:	4603      	mov	r3, r0
 8019734:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8019738:	b29b      	uxth	r3, r3
 801973a:	00db      	lsls	r3, r3, #3
 801973c:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr)) - IPH_HL(fraghdr) * 4;
 801973e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019740:	885b      	ldrh	r3, [r3, #2]
 8019742:	b29b      	uxth	r3, r3
 8019744:	4618      	mov	r0, r3
 8019746:	f7f6 ff4d 	bl	80105e4 <lwip_htons>
 801974a:	4603      	mov	r3, r0
 801974c:	461a      	mov	r2, r3
 801974e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019750:	781b      	ldrb	r3, [r3, #0]
 8019752:	b29b      	uxth	r3, r3
 8019754:	f003 030f 	and.w	r3, r3, #15
 8019758:	b29b      	uxth	r3, r3
 801975a:	009b      	lsls	r3, r3, #2
 801975c:	b29b      	uxth	r3, r3
 801975e:	1ad3      	subs	r3, r2, r3
 8019760:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 8019762:	6878      	ldr	r0, [r7, #4]
 8019764:	f7f8 f972 	bl	8011a4c <pbuf_clen>
 8019768:	4603      	mov	r3, r0
 801976a:	847b      	strh	r3, [r7, #34]	; 0x22
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 801976c:	4b8d      	ldr	r3, [pc, #564]	; (80199a4 <ip4_reass+0x29c>)
 801976e:	881b      	ldrh	r3, [r3, #0]
 8019770:	461a      	mov	r2, r3
 8019772:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8019774:	4413      	add	r3, r2
 8019776:	2b0a      	cmp	r3, #10
 8019778:	dd10      	ble.n	801979c <ip4_reass+0x94>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 801977a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801977c:	4619      	mov	r1, r3
 801977e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8019780:	f7ff fd8e 	bl	80192a0 <ip_reass_remove_oldest_datagram>
 8019784:	4603      	mov	r3, r0
 8019786:	2b00      	cmp	r3, #0
 8019788:	f000 8100 	beq.w	801998c <ip4_reass+0x284>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 801978c:	4b85      	ldr	r3, [pc, #532]	; (80199a4 <ip4_reass+0x29c>)
 801978e:	881b      	ldrh	r3, [r3, #0]
 8019790:	461a      	mov	r2, r3
 8019792:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8019794:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8019796:	2b0a      	cmp	r3, #10
 8019798:	f300 80f8 	bgt.w	801998c <ip4_reass+0x284>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 801979c:	4b82      	ldr	r3, [pc, #520]	; (80199a8 <ip4_reass+0x2a0>)
 801979e:	681b      	ldr	r3, [r3, #0]
 80197a0:	633b      	str	r3, [r7, #48]	; 0x30
 80197a2:	e015      	b.n	80197d0 <ip4_reass+0xc8>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 80197a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80197a6:	695a      	ldr	r2, [r3, #20]
 80197a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80197aa:	68db      	ldr	r3, [r3, #12]
 80197ac:	429a      	cmp	r2, r3
 80197ae:	d10c      	bne.n	80197ca <ip4_reass+0xc2>
 80197b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80197b2:	699a      	ldr	r2, [r3, #24]
 80197b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80197b6:	691b      	ldr	r3, [r3, #16]
 80197b8:	429a      	cmp	r2, r3
 80197ba:	d106      	bne.n	80197ca <ip4_reass+0xc2>
 80197bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80197be:	899a      	ldrh	r2, [r3, #12]
 80197c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80197c2:	889b      	ldrh	r3, [r3, #4]
 80197c4:	b29b      	uxth	r3, r3
 80197c6:	429a      	cmp	r2, r3
 80197c8:	d006      	beq.n	80197d8 <ip4_reass+0xd0>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 80197ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80197cc:	681b      	ldr	r3, [r3, #0]
 80197ce:	633b      	str	r3, [r7, #48]	; 0x30
 80197d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80197d2:	2b00      	cmp	r3, #0
 80197d4:	d1e6      	bne.n	80197a4 <ip4_reass+0x9c>
 80197d6:	e000      	b.n	80197da <ip4_reass+0xd2>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
        lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 80197d8:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 80197da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80197dc:	2b00      	cmp	r3, #0
 80197de:	d109      	bne.n	80197f4 <ip4_reass+0xec>
  /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 80197e0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80197e2:	4619      	mov	r1, r3
 80197e4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80197e6:	f7ff fdbd 	bl	8019364 <ip_reass_enqueue_new_datagram>
 80197ea:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 80197ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80197ee:	2b00      	cmp	r3, #0
 80197f0:	d11c      	bne.n	801982c <ip4_reass+0x124>
      goto nullreturn;
 80197f2:	e0ce      	b.n	8019992 <ip4_reass+0x28a>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 80197f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80197f6:	88db      	ldrh	r3, [r3, #6]
 80197f8:	b29b      	uxth	r3, r3
 80197fa:	4618      	mov	r0, r3
 80197fc:	f7f6 fef2 	bl	80105e4 <lwip_htons>
 8019800:	4603      	mov	r3, r0
 8019802:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8019806:	2b00      	cmp	r3, #0
 8019808:	d110      	bne.n	801982c <ip4_reass+0x124>
      ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 801980a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801980c:	89db      	ldrh	r3, [r3, #14]
 801980e:	4618      	mov	r0, r3
 8019810:	f7f6 fee8 	bl	80105e4 <lwip_htons>
 8019814:	4603      	mov	r3, r0
 8019816:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 801981a:	2b00      	cmp	r3, #0
 801981c:	d006      	beq.n	801982c <ip4_reass+0x124>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 801981e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019820:	3308      	adds	r3, #8
 8019822:	2214      	movs	r2, #20
 8019824:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8019826:	4618      	mov	r0, r3
 8019828:	f001 fa27 	bl	801ac7a <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 801982c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801982e:	88db      	ldrh	r3, [r3, #6]
 8019830:	b29b      	uxth	r3, r3
 8019832:	f003 0320 	and.w	r3, r3, #32
 8019836:	2b00      	cmp	r3, #0
 8019838:	bf0c      	ite	eq
 801983a:	2301      	moveq	r3, #1
 801983c:	2300      	movne	r3, #0
 801983e:	b2db      	uxtb	r3, r3
 8019840:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 8019842:	69fb      	ldr	r3, [r7, #28]
 8019844:	2b00      	cmp	r3, #0
 8019846:	d00e      	beq.n	8019866 <ip4_reass+0x15e>
    u16_t datagram_len = (u16_t)(offset + len);
 8019848:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 801984a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801984c:	4413      	add	r3, r2
 801984e:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 8019850:	8b7a      	ldrh	r2, [r7, #26]
 8019852:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8019854:	429a      	cmp	r2, r3
 8019856:	f0c0 8099 	bcc.w	801998c <ip4_reass+0x284>
 801985a:	8b7b      	ldrh	r3, [r7, #26]
 801985c:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 8019860:	4293      	cmp	r3, r2
 8019862:	f200 8093 	bhi.w	801998c <ip4_reass+0x284>
      goto nullreturn;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 8019866:	69fa      	ldr	r2, [r7, #28]
 8019868:	6879      	ldr	r1, [r7, #4]
 801986a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801986c:	f7ff fde2 	bl	8019434 <ip_reass_chain_frag_into_datagram_and_validate>
 8019870:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 8019872:	697b      	ldr	r3, [r7, #20]
 8019874:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8019878:	f000 808a 	beq.w	8019990 <ip4_reass+0x288>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 801987c:	4b49      	ldr	r3, [pc, #292]	; (80199a4 <ip4_reass+0x29c>)
 801987e:	881a      	ldrh	r2, [r3, #0]
 8019880:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8019882:	4413      	add	r3, r2
 8019884:	b29a      	uxth	r2, r3
 8019886:	4b47      	ldr	r3, [pc, #284]	; (80199a4 <ip4_reass+0x29c>)
 8019888:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 801988a:	69fb      	ldr	r3, [r7, #28]
 801988c:	2b00      	cmp	r3, #0
 801988e:	d00d      	beq.n	80198ac <ip4_reass+0x1a4>
    u16_t datagram_len = (u16_t)(offset + len);
 8019890:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8019892:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8019894:	4413      	add	r3, r2
 8019896:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 8019898:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801989a:	8a7a      	ldrh	r2, [r7, #18]
 801989c:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 801989e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80198a0:	7f9b      	ldrb	r3, [r3, #30]
 80198a2:	f043 0301 	orr.w	r3, r3, #1
 80198a6:	b2da      	uxtb	r2, r3
 80198a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80198aa:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
     ("ip4_reass: last fragment seen, total len %"S16_F"\n",
      ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 80198ac:	697b      	ldr	r3, [r7, #20]
 80198ae:	2b01      	cmp	r3, #1
 80198b0:	d168      	bne.n	8019984 <ip4_reass+0x27c>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    ipr->datagram_len += IP_HLEN;
 80198b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80198b4:	8b9b      	ldrh	r3, [r3, #28]
 80198b6:	3314      	adds	r3, #20
 80198b8:	b29a      	uxth	r2, r3
 80198ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80198bc:	839a      	strh	r2, [r3, #28]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper*)ipr->p->payload)->next_pbuf;
 80198be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80198c0:	685b      	ldr	r3, [r3, #4]
 80198c2:	685b      	ldr	r3, [r3, #4]
 80198c4:	681b      	ldr	r3, [r3, #0]
 80198c6:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr*)(ipr->p->payload);
 80198c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80198ca:	685b      	ldr	r3, [r3, #4]
 80198cc:	685b      	ldr	r3, [r3, #4]
 80198ce:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 80198d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80198d2:	3308      	adds	r3, #8
 80198d4:	2214      	movs	r2, #20
 80198d6:	4619      	mov	r1, r3
 80198d8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80198da:	f001 f9ce 	bl	801ac7a <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(ipr->datagram_len));
 80198de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80198e0:	8b9b      	ldrh	r3, [r3, #28]
 80198e2:	4618      	mov	r0, r3
 80198e4:	f7f6 fe7e 	bl	80105e4 <lwip_htons>
 80198e8:	4603      	mov	r3, r0
 80198ea:	461a      	mov	r2, r3
 80198ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80198ee:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 80198f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80198f2:	2200      	movs	r2, #0
 80198f4:	719a      	strb	r2, [r3, #6]
 80198f6:	2200      	movs	r2, #0
 80198f8:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 80198fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80198fc:	2200      	movs	r2, #0
 80198fe:	729a      	strb	r2, [r3, #10]
 8019900:	2200      	movs	r2, #0
 8019902:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 8019904:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019906:	685b      	ldr	r3, [r3, #4]
 8019908:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 801990a:	e00e      	b.n	801992a <ip4_reass+0x222>
      iprh = (struct ip_reass_helper*)r->payload;
 801990c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801990e:	685b      	ldr	r3, [r3, #4]
 8019910:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_header(r, -IP_HLEN);
 8019912:	f06f 0113 	mvn.w	r1, #19
 8019916:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8019918:	f7f7 ffda 	bl	80118d0 <pbuf_header>
      pbuf_cat(p, r);
 801991c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 801991e:	6878      	ldr	r0, [r7, #4]
 8019920:	f7f8 f8d4 	bl	8011acc <pbuf_cat>
      r = iprh->next_pbuf;
 8019924:	68fb      	ldr	r3, [r7, #12]
 8019926:	681b      	ldr	r3, [r3, #0]
 8019928:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 801992a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801992c:	2b00      	cmp	r3, #0
 801992e:	d1ed      	bne.n	801990c <ip4_reass+0x204>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 8019930:	4b1d      	ldr	r3, [pc, #116]	; (80199a8 <ip4_reass+0x2a0>)
 8019932:	681b      	ldr	r3, [r3, #0]
 8019934:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8019936:	429a      	cmp	r2, r3
 8019938:	d102      	bne.n	8019940 <ip4_reass+0x238>
      ipr_prev = NULL;
 801993a:	2300      	movs	r3, #0
 801993c:	62fb      	str	r3, [r7, #44]	; 0x2c
 801993e:	e010      	b.n	8019962 <ip4_reass+0x25a>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8019940:	4b19      	ldr	r3, [pc, #100]	; (80199a8 <ip4_reass+0x2a0>)
 8019942:	681b      	ldr	r3, [r3, #0]
 8019944:	62fb      	str	r3, [r7, #44]	; 0x2c
 8019946:	e007      	b.n	8019958 <ip4_reass+0x250>
        if (ipr_prev->next == ipr) {
 8019948:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801994a:	681b      	ldr	r3, [r3, #0]
 801994c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801994e:	429a      	cmp	r2, r3
 8019950:	d006      	beq.n	8019960 <ip4_reass+0x258>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8019952:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019954:	681b      	ldr	r3, [r3, #0]
 8019956:	62fb      	str	r3, [r7, #44]	; 0x2c
 8019958:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801995a:	2b00      	cmp	r3, #0
 801995c:	d1f4      	bne.n	8019948 <ip4_reass+0x240>
 801995e:	e000      	b.n	8019962 <ip4_reass+0x25a>
          break;
 8019960:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 8019962:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8019964:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8019966:	f7ff fd37 	bl	80193d8 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    ip_reass_pbufcount -= pbuf_clen(p);
 801996a:	6878      	ldr	r0, [r7, #4]
 801996c:	f7f8 f86e 	bl	8011a4c <pbuf_clen>
 8019970:	4603      	mov	r3, r0
 8019972:	461a      	mov	r2, r3
 8019974:	4b0b      	ldr	r3, [pc, #44]	; (80199a4 <ip4_reass+0x29c>)
 8019976:	881b      	ldrh	r3, [r3, #0]
 8019978:	1a9b      	subs	r3, r3, r2
 801997a:	b29a      	uxth	r2, r3
 801997c:	4b09      	ldr	r3, [pc, #36]	; (80199a4 <ip4_reass+0x29c>)
 801997e:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 8019980:	687b      	ldr	r3, [r7, #4]
 8019982:	e00a      	b.n	801999a <ip4_reass+0x292>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG,("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 8019984:	2300      	movs	r3, #0
 8019986:	e008      	b.n	801999a <ip4_reass+0x292>
    goto nullreturn;
 8019988:	bf00      	nop
 801998a:	e002      	b.n	8019992 <ip4_reass+0x28a>

nullreturn:
 801998c:	bf00      	nop
 801998e:	e000      	b.n	8019992 <ip4_reass+0x28a>
    goto nullreturn;
 8019990:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG,("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 8019992:	6878      	ldr	r0, [r7, #4]
 8019994:	f7f7 ffc0 	bl	8011918 <pbuf_free>
  return NULL;
 8019998:	2300      	movs	r3, #0
}
 801999a:	4618      	mov	r0, r3
 801999c:	3738      	adds	r7, #56	; 0x38
 801999e:	46bd      	mov	sp, r7
 80199a0:	bd80      	pop	{r7, pc}
 80199a2:	bf00      	nop
 80199a4:	20004340 	.word	0x20004340
 80199a8:	2000433c 	.word	0x2000433c

080199ac <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref*
ip_frag_alloc_pbuf_custom_ref(void)
{
 80199ac:	b580      	push	{r7, lr}
 80199ae:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref*)memp_malloc(MEMP_FRAG_PBUF);
 80199b0:	2005      	movs	r0, #5
 80199b2:	f7f7 fa05 	bl	8010dc0 <memp_malloc>
 80199b6:	4603      	mov	r3, r0
}
 80199b8:	4618      	mov	r0, r3
 80199ba:	bd80      	pop	{r7, pc}

080199bc <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref* p)
{
 80199bc:	b580      	push	{r7, lr}
 80199be:	b082      	sub	sp, #8
 80199c0:	af00      	add	r7, sp, #0
 80199c2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 80199c4:	687b      	ldr	r3, [r7, #4]
 80199c6:	2b00      	cmp	r3, #0
 80199c8:	d106      	bne.n	80199d8 <ip_frag_free_pbuf_custom_ref+0x1c>
 80199ca:	4b07      	ldr	r3, [pc, #28]	; (80199e8 <ip_frag_free_pbuf_custom_ref+0x2c>)
 80199cc:	f240 22ae 	movw	r2, #686	; 0x2ae
 80199d0:	4906      	ldr	r1, [pc, #24]	; (80199ec <ip_frag_free_pbuf_custom_ref+0x30>)
 80199d2:	4807      	ldr	r0, [pc, #28]	; (80199f0 <ip_frag_free_pbuf_custom_ref+0x34>)
 80199d4:	f001 fa0c 	bl	801adf0 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 80199d8:	6879      	ldr	r1, [r7, #4]
 80199da:	2005      	movs	r0, #5
 80199dc:	f7f7 fa42 	bl	8010e64 <memp_free>
}
 80199e0:	bf00      	nop
 80199e2:	3708      	adds	r7, #8
 80199e4:	46bd      	mov	sp, r7
 80199e6:	bd80      	pop	{r7, pc}
 80199e8:	0801e40c 	.word	0x0801e40c
 80199ec:	0801e574 	.word	0x0801e574
 80199f0:	0801e454 	.word	0x0801e454

080199f4 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 80199f4:	b580      	push	{r7, lr}
 80199f6:	b084      	sub	sp, #16
 80199f8:	af00      	add	r7, sp, #0
 80199fa:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref*)p;
 80199fc:	687b      	ldr	r3, [r7, #4]
 80199fe:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 8019a00:	68fb      	ldr	r3, [r7, #12]
 8019a02:	2b00      	cmp	r3, #0
 8019a04:	d106      	bne.n	8019a14 <ipfrag_free_pbuf_custom+0x20>
 8019a06:	4b11      	ldr	r3, [pc, #68]	; (8019a4c <ipfrag_free_pbuf_custom+0x58>)
 8019a08:	f44f 722e 	mov.w	r2, #696	; 0x2b8
 8019a0c:	4910      	ldr	r1, [pc, #64]	; (8019a50 <ipfrag_free_pbuf_custom+0x5c>)
 8019a0e:	4811      	ldr	r0, [pc, #68]	; (8019a54 <ipfrag_free_pbuf_custom+0x60>)
 8019a10:	f001 f9ee 	bl	801adf0 <iprintf>
  LWIP_ASSERT("pcr == p", (void*)pcr == (void*)p);
 8019a14:	68fa      	ldr	r2, [r7, #12]
 8019a16:	687b      	ldr	r3, [r7, #4]
 8019a18:	429a      	cmp	r2, r3
 8019a1a:	d006      	beq.n	8019a2a <ipfrag_free_pbuf_custom+0x36>
 8019a1c:	4b0b      	ldr	r3, [pc, #44]	; (8019a4c <ipfrag_free_pbuf_custom+0x58>)
 8019a1e:	f240 22b9 	movw	r2, #697	; 0x2b9
 8019a22:	490d      	ldr	r1, [pc, #52]	; (8019a58 <ipfrag_free_pbuf_custom+0x64>)
 8019a24:	480b      	ldr	r0, [pc, #44]	; (8019a54 <ipfrag_free_pbuf_custom+0x60>)
 8019a26:	f001 f9e3 	bl	801adf0 <iprintf>
  if (pcr->original != NULL) {
 8019a2a:	68fb      	ldr	r3, [r7, #12]
 8019a2c:	695b      	ldr	r3, [r3, #20]
 8019a2e:	2b00      	cmp	r3, #0
 8019a30:	d004      	beq.n	8019a3c <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 8019a32:	68fb      	ldr	r3, [r7, #12]
 8019a34:	695b      	ldr	r3, [r3, #20]
 8019a36:	4618      	mov	r0, r3
 8019a38:	f7f7 ff6e 	bl	8011918 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 8019a3c:	68f8      	ldr	r0, [r7, #12]
 8019a3e:	f7ff ffbd 	bl	80199bc <ip_frag_free_pbuf_custom_ref>
}
 8019a42:	bf00      	nop
 8019a44:	3710      	adds	r7, #16
 8019a46:	46bd      	mov	sp, r7
 8019a48:	bd80      	pop	{r7, pc}
 8019a4a:	bf00      	nop
 8019a4c:	0801e40c 	.word	0x0801e40c
 8019a50:	0801e580 	.word	0x0801e580
 8019a54:	0801e454 	.word	0x0801e454
 8019a58:	0801e58c 	.word	0x0801e58c

08019a5c <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 8019a5c:	b580      	push	{r7, lr}
 8019a5e:	b092      	sub	sp, #72	; 0x48
 8019a60:	af02      	add	r7, sp, #8
 8019a62:	60f8      	str	r0, [r7, #12]
 8019a64:	60b9      	str	r1, [r7, #8]
 8019a66:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 8019a68:	2300      	movs	r3, #0
 8019a6a:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (netif->mtu - IP_HLEN) / 8;
 8019a6c:	68bb      	ldr	r3, [r7, #8]
 8019a6e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8019a70:	3b14      	subs	r3, #20
 8019a72:	2b00      	cmp	r3, #0
 8019a74:	da00      	bge.n	8019a78 <ip4_frag+0x1c>
 8019a76:	3307      	adds	r3, #7
 8019a78:	10db      	asrs	r3, r3, #3
 8019a7a:	867b      	strh	r3, [r7, #50]	; 0x32
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 8019a7c:	2314      	movs	r3, #20
 8019a7e:	86fb      	strh	r3, [r7, #54]	; 0x36
  u16_t tmp;

  original_iphdr = (struct ip_hdr *)p->payload;
 8019a80:	68fb      	ldr	r3, [r7, #12]
 8019a82:	685b      	ldr	r3, [r3, #4]
 8019a84:	62fb      	str	r3, [r7, #44]	; 0x2c
  iphdr = original_iphdr;
 8019a86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019a88:	62bb      	str	r3, [r7, #40]	; 0x28
  LWIP_ERROR("ip4_frag() does not support IP options", IPH_HL(iphdr) * 4 == IP_HLEN, return ERR_VAL);
 8019a8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019a8c:	781b      	ldrb	r3, [r3, #0]
 8019a8e:	f003 030f 	and.w	r3, r3, #15
 8019a92:	009b      	lsls	r3, r3, #2
 8019a94:	2b14      	cmp	r3, #20
 8019a96:	d009      	beq.n	8019aac <ip4_frag+0x50>
 8019a98:	4b79      	ldr	r3, [pc, #484]	; (8019c80 <ip4_frag+0x224>)
 8019a9a:	f240 22e1 	movw	r2, #737	; 0x2e1
 8019a9e:	4979      	ldr	r1, [pc, #484]	; (8019c84 <ip4_frag+0x228>)
 8019aa0:	4879      	ldr	r0, [pc, #484]	; (8019c88 <ip4_frag+0x22c>)
 8019aa2:	f001 f9a5 	bl	801adf0 <iprintf>
 8019aa6:	f06f 0305 	mvn.w	r3, #5
 8019aaa:	e0e5      	b.n	8019c78 <ip4_frag+0x21c>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 8019aac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019aae:	88db      	ldrh	r3, [r3, #6]
 8019ab0:	b29b      	uxth	r3, r3
 8019ab2:	4618      	mov	r0, r3
 8019ab4:	f7f6 fd96 	bl	80105e4 <lwip_htons>
 8019ab8:	4603      	mov	r3, r0
 8019aba:	86bb      	strh	r3, [r7, #52]	; 0x34
  ofo = tmp & IP_OFFMASK;
 8019abc:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8019abe:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8019ac2:	873b      	strh	r3, [r7, #56]	; 0x38
  LWIP_ERROR("ip_frag(): MF already set", (tmp & IP_MF) == 0, return ERR_VAL);
 8019ac4:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8019ac6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8019aca:	2b00      	cmp	r3, #0
 8019acc:	d009      	beq.n	8019ae2 <ip4_frag+0x86>
 8019ace:	4b6c      	ldr	r3, [pc, #432]	; (8019c80 <ip4_frag+0x224>)
 8019ad0:	f240 22e6 	movw	r2, #742	; 0x2e6
 8019ad4:	496d      	ldr	r1, [pc, #436]	; (8019c8c <ip4_frag+0x230>)
 8019ad6:	486c      	ldr	r0, [pc, #432]	; (8019c88 <ip4_frag+0x22c>)
 8019ad8:	f001 f98a 	bl	801adf0 <iprintf>
 8019adc:	f06f 0305 	mvn.w	r3, #5
 8019ae0:	e0ca      	b.n	8019c78 <ip4_frag+0x21c>

  left = p->tot_len - IP_HLEN;
 8019ae2:	68fb      	ldr	r3, [r7, #12]
 8019ae4:	891b      	ldrh	r3, [r3, #8]
 8019ae6:	3b14      	subs	r3, #20
 8019ae8:	877b      	strh	r3, [r7, #58]	; 0x3a

  while (left) {
 8019aea:	e0bc      	b.n	8019c66 <ip4_frag+0x20a>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, nfb * 8);
 8019aec:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8019aee:	00da      	lsls	r2, r3, #3
 8019af0:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8019af2:	4293      	cmp	r3, r2
 8019af4:	bfa8      	it	ge
 8019af6:	4613      	movge	r3, r2
 8019af8:	84fb      	strh	r3, [r7, #38]	; 0x26
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 8019afa:	2200      	movs	r2, #0
 8019afc:	2114      	movs	r1, #20
 8019afe:	2002      	movs	r0, #2
 8019b00:	f7f7 fb98 	bl	8011234 <pbuf_alloc>
 8019b04:	6238      	str	r0, [r7, #32]
    if (rambuf == NULL) {
 8019b06:	6a3b      	ldr	r3, [r7, #32]
 8019b08:	2b00      	cmp	r3, #0
 8019b0a:	f000 80b2 	beq.w	8019c72 <ip4_frag+0x216>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 8019b0e:	68fb      	ldr	r3, [r7, #12]
 8019b10:	895b      	ldrh	r3, [r3, #10]
 8019b12:	2b13      	cmp	r3, #19
 8019b14:	d806      	bhi.n	8019b24 <ip4_frag+0xc8>
 8019b16:	4b5a      	ldr	r3, [pc, #360]	; (8019c80 <ip4_frag+0x224>)
 8019b18:	f240 3209 	movw	r2, #777	; 0x309
 8019b1c:	495c      	ldr	r1, [pc, #368]	; (8019c90 <ip4_frag+0x234>)
 8019b1e:	485a      	ldr	r0, [pc, #360]	; (8019c88 <ip4_frag+0x22c>)
 8019b20:	f001 f966 	bl	801adf0 <iprintf>
                (p->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 8019b24:	6a3b      	ldr	r3, [r7, #32]
 8019b26:	685b      	ldr	r3, [r3, #4]
 8019b28:	2214      	movs	r2, #20
 8019b2a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8019b2c:	4618      	mov	r0, r3
 8019b2e:	f001 f8a4 	bl	801ac7a <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 8019b32:	6a3b      	ldr	r3, [r7, #32]
 8019b34:	685b      	ldr	r3, [r3, #4]
 8019b36:	62bb      	str	r3, [r7, #40]	; 0x28

    left_to_copy = fragsize;
 8019b38:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8019b3a:	87bb      	strh	r3, [r7, #60]	; 0x3c
    while (left_to_copy) {
 8019b3c:	e04f      	b.n	8019bde <ip4_frag+0x182>
      struct pbuf_custom_ref *pcr;
      u16_t plen = p->len - poff;
 8019b3e:	68fb      	ldr	r3, [r7, #12]
 8019b40:	895a      	ldrh	r2, [r3, #10]
 8019b42:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8019b44:	1ad3      	subs	r3, r2, r3
 8019b46:	837b      	strh	r3, [r7, #26]
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 8019b48:	8b7a      	ldrh	r2, [r7, #26]
 8019b4a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8019b4c:	4293      	cmp	r3, r2
 8019b4e:	bf28      	it	cs
 8019b50:	4613      	movcs	r3, r2
 8019b52:	87fb      	strh	r3, [r7, #62]	; 0x3e
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 8019b54:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8019b56:	2b00      	cmp	r3, #0
 8019b58:	d105      	bne.n	8019b66 <ip4_frag+0x10a>
        poff = 0;
 8019b5a:	2300      	movs	r3, #0
 8019b5c:	86fb      	strh	r3, [r7, #54]	; 0x36
        p = p->next;
 8019b5e:	68fb      	ldr	r3, [r7, #12]
 8019b60:	681b      	ldr	r3, [r3, #0]
 8019b62:	60fb      	str	r3, [r7, #12]
        continue;
 8019b64:	e03b      	b.n	8019bde <ip4_frag+0x182>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 8019b66:	f7ff ff21 	bl	80199ac <ip_frag_alloc_pbuf_custom_ref>
 8019b6a:	6178      	str	r0, [r7, #20]
      if (pcr == NULL) {
 8019b6c:	697b      	ldr	r3, [r7, #20]
 8019b6e:	2b00      	cmp	r3, #0
 8019b70:	d103      	bne.n	8019b7a <ip4_frag+0x11e>
        pbuf_free(rambuf);
 8019b72:	6a38      	ldr	r0, [r7, #32]
 8019b74:	f7f7 fed0 	bl	8011918 <pbuf_free>
        goto memerr;
 8019b78:	e07c      	b.n	8019c74 <ip4_frag+0x218>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8019b7a:	6978      	ldr	r0, [r7, #20]
        (u8_t*)p->payload + poff, newpbuflen);
 8019b7c:	68fb      	ldr	r3, [r7, #12]
 8019b7e:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8019b80:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8019b82:	4413      	add	r3, r2
 8019b84:	8ff9      	ldrh	r1, [r7, #62]	; 0x3e
 8019b86:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8019b88:	9201      	str	r2, [sp, #4]
 8019b8a:	9300      	str	r3, [sp, #0]
 8019b8c:	4603      	mov	r3, r0
 8019b8e:	2202      	movs	r2, #2
 8019b90:	2004      	movs	r0, #4
 8019b92:	f7f7 fce3 	bl	801155c <pbuf_alloced_custom>
 8019b96:	6138      	str	r0, [r7, #16]
      if (newpbuf == NULL) {
 8019b98:	693b      	ldr	r3, [r7, #16]
 8019b9a:	2b00      	cmp	r3, #0
 8019b9c:	d106      	bne.n	8019bac <ip4_frag+0x150>
        ip_frag_free_pbuf_custom_ref(pcr);
 8019b9e:	6978      	ldr	r0, [r7, #20]
 8019ba0:	f7ff ff0c 	bl	80199bc <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 8019ba4:	6a38      	ldr	r0, [r7, #32]
 8019ba6:	f7f7 feb7 	bl	8011918 <pbuf_free>
        goto memerr;
 8019baa:	e063      	b.n	8019c74 <ip4_frag+0x218>
      }
      pbuf_ref(p);
 8019bac:	68f8      	ldr	r0, [r7, #12]
 8019bae:	f7f7 ff65 	bl	8011a7c <pbuf_ref>
      pcr->original = p;
 8019bb2:	697b      	ldr	r3, [r7, #20]
 8019bb4:	68fa      	ldr	r2, [r7, #12]
 8019bb6:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 8019bb8:	697b      	ldr	r3, [r7, #20]
 8019bba:	4a36      	ldr	r2, [pc, #216]	; (8019c94 <ip4_frag+0x238>)
 8019bbc:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 8019bbe:	6939      	ldr	r1, [r7, #16]
 8019bc0:	6a38      	ldr	r0, [r7, #32]
 8019bc2:	f7f7 ff83 	bl	8011acc <pbuf_cat>
      left_to_copy -= newpbuflen;
 8019bc6:	8fba      	ldrh	r2, [r7, #60]	; 0x3c
 8019bc8:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8019bca:	1ad3      	subs	r3, r2, r3
 8019bcc:	87bb      	strh	r3, [r7, #60]	; 0x3c
      if (left_to_copy) {
 8019bce:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8019bd0:	2b00      	cmp	r3, #0
 8019bd2:	d004      	beq.n	8019bde <ip4_frag+0x182>
        poff = 0;
 8019bd4:	2300      	movs	r3, #0
 8019bd6:	86fb      	strh	r3, [r7, #54]	; 0x36
        p = p->next;
 8019bd8:	68fb      	ldr	r3, [r7, #12]
 8019bda:	681b      	ldr	r3, [r3, #0]
 8019bdc:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 8019bde:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8019be0:	2b00      	cmp	r3, #0
 8019be2:	d1ac      	bne.n	8019b3e <ip4_frag+0xe2>
      }
    }
    poff += newpbuflen;
 8019be4:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8019be6:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8019be8:	4413      	add	r3, r2
 8019bea:	86fb      	strh	r3, [r7, #54]	; 0x36
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 8019bec:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8019bee:	68bb      	ldr	r3, [r7, #8]
 8019bf0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8019bf2:	3b14      	subs	r3, #20
 8019bf4:	429a      	cmp	r2, r3
 8019bf6:	bfd4      	ite	le
 8019bf8:	2301      	movle	r3, #1
 8019bfa:	2300      	movgt	r3, #0
 8019bfc:	b2db      	uxtb	r3, r3
 8019bfe:	61fb      	str	r3, [r7, #28]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 8019c00:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8019c02:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8019c06:	86bb      	strh	r3, [r7, #52]	; 0x34
    if (!last) {
 8019c08:	69fb      	ldr	r3, [r7, #28]
 8019c0a:	2b00      	cmp	r3, #0
 8019c0c:	d103      	bne.n	8019c16 <ip4_frag+0x1ba>
      tmp = tmp | IP_MF;
 8019c0e:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8019c10:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8019c14:	86bb      	strh	r3, [r7, #52]	; 0x34
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 8019c16:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8019c18:	4618      	mov	r0, r3
 8019c1a:	f7f6 fce3 	bl	80105e4 <lwip_htons>
 8019c1e:	4603      	mov	r3, r0
 8019c20:	461a      	mov	r2, r3
 8019c22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019c24:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons(fragsize + IP_HLEN));
 8019c26:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8019c28:	3314      	adds	r3, #20
 8019c2a:	b29b      	uxth	r3, r3
 8019c2c:	4618      	mov	r0, r3
 8019c2e:	f7f6 fcd9 	bl	80105e4 <lwip_htons>
 8019c32:	4603      	mov	r3, r0
 8019c34:	461a      	mov	r2, r3
 8019c36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019c38:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 8019c3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019c3c:	2200      	movs	r2, #0
 8019c3e:	729a      	strb	r2, [r3, #10]
 8019c40:	2200      	movs	r2, #0
 8019c42:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 8019c44:	68bb      	ldr	r3, [r7, #8]
 8019c46:	695b      	ldr	r3, [r3, #20]
 8019c48:	687a      	ldr	r2, [r7, #4]
 8019c4a:	6a39      	ldr	r1, [r7, #32]
 8019c4c:	68b8      	ldr	r0, [r7, #8]
 8019c4e:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 8019c50:	6a38      	ldr	r0, [r7, #32]
 8019c52:	f7f7 fe61 	bl	8011918 <pbuf_free>
    left -= fragsize;
 8019c56:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8019c58:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8019c5a:	1ad3      	subs	r3, r2, r3
 8019c5c:	877b      	strh	r3, [r7, #58]	; 0x3a
    ofo += nfb;
 8019c5e:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 8019c60:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8019c62:	4413      	add	r3, r2
 8019c64:	873b      	strh	r3, [r7, #56]	; 0x38
  while (left) {
 8019c66:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8019c68:	2b00      	cmp	r3, #0
 8019c6a:	f47f af3f 	bne.w	8019aec <ip4_frag+0x90>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 8019c6e:	2300      	movs	r3, #0
 8019c70:	e002      	b.n	8019c78 <ip4_frag+0x21c>
      goto memerr;
 8019c72:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 8019c74:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8019c78:	4618      	mov	r0, r3
 8019c7a:	3740      	adds	r7, #64	; 0x40
 8019c7c:	46bd      	mov	sp, r7
 8019c7e:	bd80      	pop	{r7, pc}
 8019c80:	0801e40c 	.word	0x0801e40c
 8019c84:	0801e598 	.word	0x0801e598
 8019c88:	0801e454 	.word	0x0801e454
 8019c8c:	0801e5c0 	.word	0x0801e5c0
 8019c90:	0801e5dc 	.word	0x0801e5dc
 8019c94:	080199f5 	.word	0x080199f5

08019c98 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 8019c98:	b580      	push	{r7, lr}
 8019c9a:	b086      	sub	sp, #24
 8019c9c:	af00      	add	r7, sp, #0
 8019c9e:	6078      	str	r0, [r7, #4]
 8019ca0:	6039      	str	r1, [r7, #0]
  struct eth_hdr* ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  s16_t ip_hdr_offset = SIZEOF_ETH_HDR;
 8019ca2:	230e      	movs	r3, #14
 8019ca4:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  if (p->len <= SIZEOF_ETH_HDR) {
 8019ca6:	687b      	ldr	r3, [r7, #4]
 8019ca8:	895b      	ldrh	r3, [r3, #10]
 8019caa:	2b0e      	cmp	r3, #14
 8019cac:	d977      	bls.n	8019d9e <ethernet_input+0x106>
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 8019cae:	687b      	ldr	r3, [r7, #4]
 8019cb0:	685b      	ldr	r3, [r3, #4]
 8019cb2:	613b      	str	r3, [r7, #16]
     (unsigned)ethhdr->dest.addr[3], (unsigned)ethhdr->dest.addr[4], (unsigned)ethhdr->dest.addr[5],
     (unsigned)ethhdr->src.addr[0],  (unsigned)ethhdr->src.addr[1],  (unsigned)ethhdr->src.addr[2],
     (unsigned)ethhdr->src.addr[3],  (unsigned)ethhdr->src.addr[4],  (unsigned)ethhdr->src.addr[5],
     lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 8019cb4:	693b      	ldr	r3, [r7, #16]
 8019cb6:	7b1a      	ldrb	r2, [r3, #12]
 8019cb8:	7b5b      	ldrb	r3, [r3, #13]
 8019cba:	021b      	lsls	r3, r3, #8
 8019cbc:	4313      	orrs	r3, r2
 8019cbe:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 8019cc0:	693b      	ldr	r3, [r7, #16]
 8019cc2:	781b      	ldrb	r3, [r3, #0]
 8019cc4:	f003 0301 	and.w	r3, r3, #1
 8019cc8:	2b00      	cmp	r3, #0
 8019cca:	d023      	beq.n	8019d14 <ethernet_input+0x7c>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 8019ccc:	693b      	ldr	r3, [r7, #16]
 8019cce:	781b      	ldrb	r3, [r3, #0]
 8019cd0:	2b01      	cmp	r3, #1
 8019cd2:	d10f      	bne.n	8019cf4 <ethernet_input+0x5c>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8019cd4:	693b      	ldr	r3, [r7, #16]
 8019cd6:	785b      	ldrb	r3, [r3, #1]
 8019cd8:	2b00      	cmp	r3, #0
 8019cda:	d11b      	bne.n	8019d14 <ethernet_input+0x7c>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 8019cdc:	693b      	ldr	r3, [r7, #16]
 8019cde:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8019ce0:	2b5e      	cmp	r3, #94	; 0x5e
 8019ce2:	d117      	bne.n	8019d14 <ethernet_input+0x7c>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 8019ce4:	687b      	ldr	r3, [r7, #4]
 8019ce6:	7b5b      	ldrb	r3, [r3, #13]
 8019ce8:	f043 0310 	orr.w	r3, r3, #16
 8019cec:	b2da      	uxtb	r2, r3
 8019cee:	687b      	ldr	r3, [r7, #4]
 8019cf0:	735a      	strb	r2, [r3, #13]
 8019cf2:	e00f      	b.n	8019d14 <ethernet_input+0x7c>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 8019cf4:	693b      	ldr	r3, [r7, #16]
 8019cf6:	2206      	movs	r2, #6
 8019cf8:	4930      	ldr	r1, [pc, #192]	; (8019dbc <ethernet_input+0x124>)
 8019cfa:	4618      	mov	r0, r3
 8019cfc:	f000 ffae 	bl	801ac5c <memcmp>
 8019d00:	4603      	mov	r3, r0
 8019d02:	2b00      	cmp	r3, #0
 8019d04:	d106      	bne.n	8019d14 <ethernet_input+0x7c>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 8019d06:	687b      	ldr	r3, [r7, #4]
 8019d08:	7b5b      	ldrb	r3, [r3, #13]
 8019d0a:	f043 0308 	orr.w	r3, r3, #8
 8019d0e:	b2da      	uxtb	r2, r3
 8019d10:	687b      	ldr	r3, [r7, #4]
 8019d12:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 8019d14:	89fb      	ldrh	r3, [r7, #14]
 8019d16:	2b08      	cmp	r3, #8
 8019d18:	d003      	beq.n	8019d22 <ethernet_input+0x8a>
 8019d1a:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 8019d1e:	d01e      	beq.n	8019d5e <ethernet_input+0xc6>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 8019d20:	e044      	b.n	8019dac <ethernet_input+0x114>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8019d22:	683b      	ldr	r3, [r7, #0]
 8019d24:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8019d28:	f003 0308 	and.w	r3, r3, #8
 8019d2c:	2b00      	cmp	r3, #0
 8019d2e:	d038      	beq.n	8019da2 <ethernet_input+0x10a>
      if ((p->len < ip_hdr_offset) || pbuf_header(p, (s16_t)-ip_hdr_offset)) {
 8019d30:	687b      	ldr	r3, [r7, #4]
 8019d32:	895b      	ldrh	r3, [r3, #10]
 8019d34:	461a      	mov	r2, r3
 8019d36:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8019d3a:	429a      	cmp	r2, r3
 8019d3c:	db33      	blt.n	8019da6 <ethernet_input+0x10e>
 8019d3e:	8afb      	ldrh	r3, [r7, #22]
 8019d40:	425b      	negs	r3, r3
 8019d42:	b29b      	uxth	r3, r3
 8019d44:	b21b      	sxth	r3, r3
 8019d46:	4619      	mov	r1, r3
 8019d48:	6878      	ldr	r0, [r7, #4]
 8019d4a:	f7f7 fdc1 	bl	80118d0 <pbuf_header>
 8019d4e:	4603      	mov	r3, r0
 8019d50:	2b00      	cmp	r3, #0
 8019d52:	d128      	bne.n	8019da6 <ethernet_input+0x10e>
        ip4_input(p, netif);
 8019d54:	6839      	ldr	r1, [r7, #0]
 8019d56:	6878      	ldr	r0, [r7, #4]
 8019d58:	f7fe ff80 	bl	8018c5c <ip4_input>
      break;
 8019d5c:	e01d      	b.n	8019d9a <ethernet_input+0x102>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8019d5e:	683b      	ldr	r3, [r7, #0]
 8019d60:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8019d64:	f003 0308 	and.w	r3, r3, #8
 8019d68:	2b00      	cmp	r3, #0
 8019d6a:	d01e      	beq.n	8019daa <ethernet_input+0x112>
      if ((p->len < ip_hdr_offset) || pbuf_header(p, (s16_t)-ip_hdr_offset)) {
 8019d6c:	687b      	ldr	r3, [r7, #4]
 8019d6e:	895b      	ldrh	r3, [r3, #10]
 8019d70:	461a      	mov	r2, r3
 8019d72:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8019d76:	429a      	cmp	r2, r3
 8019d78:	db15      	blt.n	8019da6 <ethernet_input+0x10e>
 8019d7a:	8afb      	ldrh	r3, [r7, #22]
 8019d7c:	425b      	negs	r3, r3
 8019d7e:	b29b      	uxth	r3, r3
 8019d80:	b21b      	sxth	r3, r3
 8019d82:	4619      	mov	r1, r3
 8019d84:	6878      	ldr	r0, [r7, #4]
 8019d86:	f7f7 fda3 	bl	80118d0 <pbuf_header>
 8019d8a:	4603      	mov	r3, r0
 8019d8c:	2b00      	cmp	r3, #0
 8019d8e:	d10a      	bne.n	8019da6 <ethernet_input+0x10e>
        etharp_input(p, netif);
 8019d90:	6839      	ldr	r1, [r7, #0]
 8019d92:	6878      	ldr	r0, [r7, #4]
 8019d94:	f7fe f94e 	bl	8018034 <etharp_input>
      break;
 8019d98:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 8019d9a:	2300      	movs	r3, #0
 8019d9c:	e00a      	b.n	8019db4 <ethernet_input+0x11c>
    goto free_and_return;
 8019d9e:	bf00      	nop
 8019da0:	e004      	b.n	8019dac <ethernet_input+0x114>
        goto free_and_return;
 8019da2:	bf00      	nop
 8019da4:	e002      	b.n	8019dac <ethernet_input+0x114>

free_and_return:
 8019da6:	bf00      	nop
 8019da8:	e000      	b.n	8019dac <ethernet_input+0x114>
        goto free_and_return;
 8019daa:	bf00      	nop
  pbuf_free(p);
 8019dac:	6878      	ldr	r0, [r7, #4]
 8019dae:	f7f7 fdb3 	bl	8011918 <pbuf_free>
  return ERR_OK;
 8019db2:	2300      	movs	r3, #0
}
 8019db4:	4618      	mov	r0, r3
 8019db6:	3718      	adds	r7, #24
 8019db8:	46bd      	mov	sp, r7
 8019dba:	bd80      	pop	{r7, pc}
 8019dbc:	0801e804 	.word	0x0801e804

08019dc0 <ethernet_output>:
 */
err_t
ethernet_output(struct netif* netif, struct pbuf* p,
                const struct eth_addr* src, const struct eth_addr* dst,
                u16_t eth_type)
{
 8019dc0:	b580      	push	{r7, lr}
 8019dc2:	b086      	sub	sp, #24
 8019dc4:	af00      	add	r7, sp, #0
 8019dc6:	60f8      	str	r0, [r7, #12]
 8019dc8:	60b9      	str	r1, [r7, #8]
 8019dca:	607a      	str	r2, [r7, #4]
 8019dcc:	603b      	str	r3, [r7, #0]
  struct eth_hdr* ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 8019dce:	8c3b      	ldrh	r3, [r7, #32]
 8019dd0:	4618      	mov	r0, r3
 8019dd2:	f7f6 fc07 	bl	80105e4 <lwip_htons>
 8019dd6:	4603      	mov	r3, r0
 8019dd8:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_header(p, SIZEOF_ETH_HDR) != 0) {
 8019dda:	210e      	movs	r1, #14
 8019ddc:	68b8      	ldr	r0, [r7, #8]
 8019dde:	f7f7 fd77 	bl	80118d0 <pbuf_header>
 8019de2:	4603      	mov	r3, r0
 8019de4:	2b00      	cmp	r3, #0
 8019de6:	d125      	bne.n	8019e34 <ethernet_output+0x74>
      goto pbuf_header_failed;
    }
  }

  ethhdr = (struct eth_hdr*)p->payload;
 8019de8:	68bb      	ldr	r3, [r7, #8]
 8019dea:	685b      	ldr	r3, [r3, #4]
 8019dec:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 8019dee:	693b      	ldr	r3, [r7, #16]
 8019df0:	8afa      	ldrh	r2, [r7, #22]
 8019df2:	819a      	strh	r2, [r3, #12]
  ETHADDR32_COPY(&ethhdr->dest, dst);
 8019df4:	693b      	ldr	r3, [r7, #16]
 8019df6:	2206      	movs	r2, #6
 8019df8:	6839      	ldr	r1, [r7, #0]
 8019dfa:	4618      	mov	r0, r3
 8019dfc:	f000 ff3d 	bl	801ac7a <memcpy>
  ETHADDR16_COPY(&ethhdr->src,  src);
 8019e00:	693b      	ldr	r3, [r7, #16]
 8019e02:	3306      	adds	r3, #6
 8019e04:	2206      	movs	r2, #6
 8019e06:	6879      	ldr	r1, [r7, #4]
 8019e08:	4618      	mov	r0, r3
 8019e0a:	f000 ff36 	bl	801ac7a <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 8019e0e:	68fb      	ldr	r3, [r7, #12]
 8019e10:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
 8019e14:	2b06      	cmp	r3, #6
 8019e16:	d006      	beq.n	8019e26 <ethernet_output+0x66>
 8019e18:	4b0a      	ldr	r3, [pc, #40]	; (8019e44 <ethernet_output+0x84>)
 8019e1a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8019e1e:	490a      	ldr	r1, [pc, #40]	; (8019e48 <ethernet_output+0x88>)
 8019e20:	480a      	ldr	r0, [pc, #40]	; (8019e4c <ethernet_output+0x8c>)
 8019e22:	f000 ffe5 	bl	801adf0 <iprintf>
    (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
    ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 8019e26:	68fb      	ldr	r3, [r7, #12]
 8019e28:	699b      	ldr	r3, [r3, #24]
 8019e2a:	68b9      	ldr	r1, [r7, #8]
 8019e2c:	68f8      	ldr	r0, [r7, #12]
 8019e2e:	4798      	blx	r3
 8019e30:	4603      	mov	r3, r0
 8019e32:	e002      	b.n	8019e3a <ethernet_output+0x7a>
      goto pbuf_header_failed;
 8019e34:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
    ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 8019e36:	f06f 0301 	mvn.w	r3, #1
}
 8019e3a:	4618      	mov	r0, r3
 8019e3c:	3718      	adds	r7, #24
 8019e3e:	46bd      	mov	sp, r7
 8019e40:	bd80      	pop	{r7, pc}
 8019e42:	bf00      	nop
 8019e44:	0801e5fc 	.word	0x0801e5fc
 8019e48:	0801e634 	.word	0x0801e634
 8019e4c:	0801e668 	.word	0x0801e668

08019e50 <sys_mbox_new>:
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 8019e50:	b580      	push	{r7, lr}
 8019e52:	b086      	sub	sp, #24
 8019e54:	af00      	add	r7, sp, #0
 8019e56:	6078      	str	r0, [r7, #4]
 8019e58:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osMessageQDef(QUEUE, size, void *);
 8019e5a:	683b      	ldr	r3, [r7, #0]
 8019e5c:	60bb      	str	r3, [r7, #8]
 8019e5e:	2304      	movs	r3, #4
 8019e60:	60fb      	str	r3, [r7, #12]
 8019e62:	2300      	movs	r3, #0
 8019e64:	613b      	str	r3, [r7, #16]
 8019e66:	2300      	movs	r3, #0
 8019e68:	617b      	str	r3, [r7, #20]
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
 8019e6a:	f107 0308 	add.w	r3, r7, #8
 8019e6e:	2100      	movs	r1, #0
 8019e70:	4618      	mov	r0, r3
 8019e72:	f7f1 fc44 	bl	800b6fe <osMessageCreate>
 8019e76:	4602      	mov	r2, r0
 8019e78:	687b      	ldr	r3, [r7, #4]
 8019e7a:	601a      	str	r2, [r3, #0]
  if(lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used)
  {
    lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
  }
#endif /* SYS_STATS */
  if(*mbox == NULL)
 8019e7c:	687b      	ldr	r3, [r7, #4]
 8019e7e:	681b      	ldr	r3, [r3, #0]
 8019e80:	2b00      	cmp	r3, #0
 8019e82:	d102      	bne.n	8019e8a <sys_mbox_new+0x3a>
    return ERR_MEM;
 8019e84:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8019e88:	e000      	b.n	8019e8c <sys_mbox_new+0x3c>

  return ERR_OK;
 8019e8a:	2300      	movs	r3, #0
}
 8019e8c:	4618      	mov	r0, r3
 8019e8e:	3718      	adds	r7, #24
 8019e90:	46bd      	mov	sp, r7
 8019e92:	bd80      	pop	{r7, pc}

08019e94 <sys_mbox_free>:
  Deallocates a mailbox. If there are messages still present in the
  mailbox when the mailbox is deallocated, it is an indication of a
  programming error in lwIP and the developer should be notified.
*/
void sys_mbox_free(sys_mbox_t *mbox)
{
 8019e94:	b580      	push	{r7, lr}
 8019e96:	b082      	sub	sp, #8
 8019e98:	af00      	add	r7, sp, #0
 8019e9a:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  if(osMessageWaiting(*mbox))
 8019e9c:	687b      	ldr	r3, [r7, #4]
 8019e9e:	681b      	ldr	r3, [r3, #0]
 8019ea0:	4618      	mov	r0, r3
 8019ea2:	f7f1 fd09 	bl	800b8b8 <osMessageWaiting>
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */

  }
#if (osCMSIS < 0x20000U)
  osMessageDelete(*mbox);
 8019ea6:	687b      	ldr	r3, [r7, #4]
 8019ea8:	681b      	ldr	r3, [r3, #0]
 8019eaa:	4618      	mov	r0, r3
 8019eac:	f7f1 fd1a 	bl	800b8e4 <osMessageDelete>
  osMessageQueueDelete(*mbox);
#endif
#if SYS_STATS
  --lwip_stats.sys.mbox.used;
#endif /* SYS_STATS */
}
 8019eb0:	bf00      	nop
 8019eb2:	3708      	adds	r7, #8
 8019eb4:	46bd      	mov	sp, r7
 8019eb6:	bd80      	pop	{r7, pc}

08019eb8 <sys_mbox_post>:

/*-----------------------------------------------------------------------------------*/
//   Posts the "msg" to the mailbox.
void sys_mbox_post(sys_mbox_t *mbox, void *data)
{
 8019eb8:	b580      	push	{r7, lr}
 8019eba:	b082      	sub	sp, #8
 8019ebc:	af00      	add	r7, sp, #0
 8019ebe:	6078      	str	r0, [r7, #4]
 8019ec0:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  while(osMessagePut(*mbox, (uint32_t)data, osWaitForever) != osOK);
 8019ec2:	bf00      	nop
 8019ec4:	687b      	ldr	r3, [r7, #4]
 8019ec6:	681b      	ldr	r3, [r3, #0]
 8019ec8:	6839      	ldr	r1, [r7, #0]
 8019eca:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8019ece:	4618      	mov	r0, r3
 8019ed0:	f7f1 fc3e 	bl	800b750 <osMessagePut>
 8019ed4:	4603      	mov	r3, r0
 8019ed6:	2b00      	cmp	r3, #0
 8019ed8:	d1f4      	bne.n	8019ec4 <sys_mbox_post+0xc>
#else
  while(osMessageQueuePut(*mbox, &data, 0, osWaitForever) != osOK);
#endif
}
 8019eda:	bf00      	nop
 8019edc:	3708      	adds	r7, #8
 8019ede:	46bd      	mov	sp, r7
 8019ee0:	bd80      	pop	{r7, pc}

08019ee2 <sys_mbox_trypost>:


/*-----------------------------------------------------------------------------------*/
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
 8019ee2:	b580      	push	{r7, lr}
 8019ee4:	b084      	sub	sp, #16
 8019ee6:	af00      	add	r7, sp, #0
 8019ee8:	6078      	str	r0, [r7, #4]
 8019eea:	6039      	str	r1, [r7, #0]
  err_t result;
#if (osCMSIS < 0x20000U)
  if(osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
 8019eec:	687b      	ldr	r3, [r7, #4]
 8019eee:	681b      	ldr	r3, [r3, #0]
 8019ef0:	6839      	ldr	r1, [r7, #0]
 8019ef2:	2200      	movs	r2, #0
 8019ef4:	4618      	mov	r0, r3
 8019ef6:	f7f1 fc2b 	bl	800b750 <osMessagePut>
 8019efa:	4603      	mov	r3, r0
 8019efc:	2b00      	cmp	r3, #0
 8019efe:	d102      	bne.n	8019f06 <sys_mbox_trypost+0x24>
#else
  if(osMessageQueuePut(*mbox, &msg, 0, 0) == osOK)
#endif
  {
    result = ERR_OK;
 8019f00:	2300      	movs	r3, #0
 8019f02:	73fb      	strb	r3, [r7, #15]
 8019f04:	e001      	b.n	8019f0a <sys_mbox_trypost+0x28>
  }
  else
  {
    // could not post, queue must be full
    result = ERR_MEM;
 8019f06:	23ff      	movs	r3, #255	; 0xff
 8019f08:	73fb      	strb	r3, [r7, #15]
#if SYS_STATS
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */
  }

  return result;
 8019f0a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8019f0e:	4618      	mov	r0, r3
 8019f10:	3710      	adds	r7, #16
 8019f12:	46bd      	mov	sp, r7
 8019f14:	bd80      	pop	{r7, pc}

08019f16 <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 8019f16:	b580      	push	{r7, lr}
 8019f18:	b08c      	sub	sp, #48	; 0x30
 8019f1a:	af00      	add	r7, sp, #0
 8019f1c:	61f8      	str	r0, [r7, #28]
 8019f1e:	61b9      	str	r1, [r7, #24]
 8019f20:	617a      	str	r2, [r7, #20]
#if (osCMSIS < 0x20000U)
  osEvent event;
  uint32_t starttime = osKernelSysTick();
 8019f22:	f7f1 fa14 	bl	800b34e <osKernelSysTick>
 8019f26:	62f8      	str	r0, [r7, #44]	; 0x2c
#else
  osStatus_t status;
  uint32_t starttime = osKernelGetTickCount();
#endif
  if(timeout != 0)
 8019f28:	697b      	ldr	r3, [r7, #20]
 8019f2a:	2b00      	cmp	r3, #0
 8019f2c:	d017      	beq.n	8019f5e <sys_arch_mbox_fetch+0x48>
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, timeout);
 8019f2e:	69fb      	ldr	r3, [r7, #28]
 8019f30:	6819      	ldr	r1, [r3, #0]
 8019f32:	f107 0320 	add.w	r3, r7, #32
 8019f36:	697a      	ldr	r2, [r7, #20]
 8019f38:	4618      	mov	r0, r3
 8019f3a:	f7f1 fc49 	bl	800b7d0 <osMessageGet>

    if(event.status == osEventMessage)
 8019f3e:	6a3b      	ldr	r3, [r7, #32]
 8019f40:	2b10      	cmp	r3, #16
 8019f42:	d109      	bne.n	8019f58 <sys_arch_mbox_fetch+0x42>
    {
      *msg = (void *)event.value.v;
 8019f44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019f46:	461a      	mov	r2, r3
 8019f48:	69bb      	ldr	r3, [r7, #24]
 8019f4a:	601a      	str	r2, [r3, #0]
      return (osKernelSysTick() - starttime);
 8019f4c:	f7f1 f9ff 	bl	800b34e <osKernelSysTick>
 8019f50:	4602      	mov	r2, r0
 8019f52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019f54:	1ad3      	subs	r3, r2, r3
 8019f56:	e019      	b.n	8019f8c <sys_arch_mbox_fetch+0x76>
      return (osKernelGetTickCount() - starttime);
    }
#endif
    else
    {
      return SYS_ARCH_TIMEOUT;
 8019f58:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8019f5c:	e016      	b.n	8019f8c <sys_arch_mbox_fetch+0x76>
    }
  }
  else
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, osWaitForever);
 8019f5e:	69fb      	ldr	r3, [r7, #28]
 8019f60:	6819      	ldr	r1, [r3, #0]
 8019f62:	463b      	mov	r3, r7
 8019f64:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8019f68:	4618      	mov	r0, r3
 8019f6a:	f7f1 fc31 	bl	800b7d0 <osMessageGet>
 8019f6e:	f107 0320 	add.w	r3, r7, #32
 8019f72:	463a      	mov	r2, r7
 8019f74:	ca07      	ldmia	r2, {r0, r1, r2}
 8019f76:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    *msg = (void *)event.value.v;
 8019f7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019f7c:	461a      	mov	r2, r3
 8019f7e:	69bb      	ldr	r3, [r7, #24]
 8019f80:	601a      	str	r2, [r3, #0]
    return (osKernelSysTick() - starttime);
 8019f82:	f7f1 f9e4 	bl	800b34e <osKernelSysTick>
 8019f86:	4602      	mov	r2, r0
 8019f88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019f8a:	1ad3      	subs	r3, r2, r3
#else
    osMessageQueueGet(*mbox, msg, 0, osWaitForever );
    return (osKernelGetTickCount() - starttime);
#endif
  }
}
 8019f8c:	4618      	mov	r0, r3
 8019f8e:	3730      	adds	r7, #48	; 0x30
 8019f90:	46bd      	mov	sp, r7
 8019f92:	bd80      	pop	{r7, pc}

08019f94 <sys_arch_mbox_tryfetch>:
/*
  Similar to sys_arch_mbox_fetch, but if message is not ready immediately, we'll
  return with SYS_MBOX_EMPTY.  On success, 0 is returned.
*/
u32_t sys_arch_mbox_tryfetch(sys_mbox_t *mbox, void **msg)
{
 8019f94:	b580      	push	{r7, lr}
 8019f96:	b086      	sub	sp, #24
 8019f98:	af00      	add	r7, sp, #0
 8019f9a:	6078      	str	r0, [r7, #4]
 8019f9c:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osEvent event;

  event = osMessageGet (*mbox, 0);
 8019f9e:	687b      	ldr	r3, [r7, #4]
 8019fa0:	6819      	ldr	r1, [r3, #0]
 8019fa2:	f107 030c 	add.w	r3, r7, #12
 8019fa6:	2200      	movs	r2, #0
 8019fa8:	4618      	mov	r0, r3
 8019faa:	f7f1 fc11 	bl	800b7d0 <osMessageGet>

  if(event.status == osEventMessage)
 8019fae:	68fb      	ldr	r3, [r7, #12]
 8019fb0:	2b10      	cmp	r3, #16
 8019fb2:	d105      	bne.n	8019fc0 <sys_arch_mbox_tryfetch+0x2c>
  {
    *msg = (void *)event.value.v;
 8019fb4:	693b      	ldr	r3, [r7, #16]
 8019fb6:	461a      	mov	r2, r3
 8019fb8:	683b      	ldr	r3, [r7, #0]
 8019fba:	601a      	str	r2, [r3, #0]
#else
  if (osMessageQueueGet(*mbox, msg, 0, 0) == osOK)
  {
#endif
    return ERR_OK;
 8019fbc:	2300      	movs	r3, #0
 8019fbe:	e001      	b.n	8019fc4 <sys_arch_mbox_tryfetch+0x30>
  }
  else
  {
    return SYS_MBOX_EMPTY;
 8019fc0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
  }
}
 8019fc4:	4618      	mov	r0, r3
 8019fc6:	3718      	adds	r7, #24
 8019fc8:	46bd      	mov	sp, r7
 8019fca:	bd80      	pop	{r7, pc}

08019fcc <sys_mbox_valid>:
/*----------------------------------------------------------------------------------*/
int sys_mbox_valid(sys_mbox_t *mbox)
{
 8019fcc:	b480      	push	{r7}
 8019fce:	b083      	sub	sp, #12
 8019fd0:	af00      	add	r7, sp, #0
 8019fd2:	6078      	str	r0, [r7, #4]
  if (*mbox == SYS_MBOX_NULL)
 8019fd4:	687b      	ldr	r3, [r7, #4]
 8019fd6:	681b      	ldr	r3, [r3, #0]
 8019fd8:	2b00      	cmp	r3, #0
 8019fda:	d101      	bne.n	8019fe0 <sys_mbox_valid+0x14>
    return 0;
 8019fdc:	2300      	movs	r3, #0
 8019fde:	e000      	b.n	8019fe2 <sys_mbox_valid+0x16>
  else
    return 1;
 8019fe0:	2301      	movs	r3, #1
}
 8019fe2:	4618      	mov	r0, r3
 8019fe4:	370c      	adds	r7, #12
 8019fe6:	46bd      	mov	sp, r7
 8019fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019fec:	4770      	bx	lr

08019fee <sys_mbox_set_invalid>:
/*-----------------------------------------------------------------------------------*/
void sys_mbox_set_invalid(sys_mbox_t *mbox)
{
 8019fee:	b480      	push	{r7}
 8019ff0:	b083      	sub	sp, #12
 8019ff2:	af00      	add	r7, sp, #0
 8019ff4:	6078      	str	r0, [r7, #4]
  *mbox = SYS_MBOX_NULL;
 8019ff6:	687b      	ldr	r3, [r7, #4]
 8019ff8:	2200      	movs	r2, #0
 8019ffa:	601a      	str	r2, [r3, #0]
}
 8019ffc:	bf00      	nop
 8019ffe:	370c      	adds	r7, #12
 801a000:	46bd      	mov	sp, r7
 801a002:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a006:	4770      	bx	lr

0801a008 <sys_sem_new>:

/*-----------------------------------------------------------------------------------*/
//  Creates a new semaphore. The "count" argument specifies
//  the initial state of the semaphore.
err_t sys_sem_new(sys_sem_t *sem, u8_t count)
{
 801a008:	b580      	push	{r7, lr}
 801a00a:	b084      	sub	sp, #16
 801a00c:	af00      	add	r7, sp, #0
 801a00e:	6078      	str	r0, [r7, #4]
 801a010:	460b      	mov	r3, r1
 801a012:	70fb      	strb	r3, [r7, #3]
#if (osCMSIS < 0x20000U)
  osSemaphoreDef(SEM);
 801a014:	2300      	movs	r3, #0
 801a016:	60bb      	str	r3, [r7, #8]
 801a018:	2300      	movs	r3, #0
 801a01a:	60fb      	str	r3, [r7, #12]
  *sem = osSemaphoreCreate (osSemaphore(SEM), 1);
 801a01c:	f107 0308 	add.w	r3, r7, #8
 801a020:	2101      	movs	r1, #1
 801a022:	4618      	mov	r0, r3
 801a024:	f7f1 faa0 	bl	800b568 <osSemaphoreCreate>
 801a028:	4602      	mov	r2, r0
 801a02a:	687b      	ldr	r3, [r7, #4]
 801a02c:	601a      	str	r2, [r3, #0]
#else
  *sem = osSemaphoreNew(UINT16_MAX, count, NULL);
#endif

  if(*sem == NULL)
 801a02e:	687b      	ldr	r3, [r7, #4]
 801a030:	681b      	ldr	r3, [r3, #0]
 801a032:	2b00      	cmp	r3, #0
 801a034:	d102      	bne.n	801a03c <sys_sem_new+0x34>
  {
#if SYS_STATS
    ++lwip_stats.sys.sem.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 801a036:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801a03a:	e009      	b.n	801a050 <sys_sem_new+0x48>
  }

  if(count == 0)	// Means it can't be taken
 801a03c:	78fb      	ldrb	r3, [r7, #3]
 801a03e:	2b00      	cmp	r3, #0
 801a040:	d105      	bne.n	801a04e <sys_sem_new+0x46>
  {
#if (osCMSIS < 0x20000U)
    osSemaphoreWait(*sem, 0);
 801a042:	687b      	ldr	r3, [r7, #4]
 801a044:	681b      	ldr	r3, [r3, #0]
 801a046:	2100      	movs	r1, #0
 801a048:	4618      	mov	r0, r3
 801a04a:	f7f1 fac1 	bl	800b5d0 <osSemaphoreWait>
  if (lwip_stats.sys.sem.max < lwip_stats.sys.sem.used) {
    lwip_stats.sys.sem.max = lwip_stats.sys.sem.used;
  }
#endif /* SYS_STATS */

  return ERR_OK;
 801a04e:	2300      	movs	r3, #0
}
 801a050:	4618      	mov	r0, r3
 801a052:	3710      	adds	r7, #16
 801a054:	46bd      	mov	sp, r7
 801a056:	bd80      	pop	{r7, pc}

0801a058 <sys_arch_sem_wait>:

  Notice that lwIP implements a function with a similar name,
  sys_sem_wait(), that uses the sys_arch_sem_wait() function.
*/
u32_t sys_arch_sem_wait(sys_sem_t *sem, u32_t timeout)
{
 801a058:	b580      	push	{r7, lr}
 801a05a:	b084      	sub	sp, #16
 801a05c:	af00      	add	r7, sp, #0
 801a05e:	6078      	str	r0, [r7, #4]
 801a060:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  uint32_t starttime = osKernelSysTick();
 801a062:	f7f1 f974 	bl	800b34e <osKernelSysTick>
 801a066:	60f8      	str	r0, [r7, #12]
#else
  uint32_t starttime = osKernelGetTickCount();
#endif
  if(timeout != 0)
 801a068:	683b      	ldr	r3, [r7, #0]
 801a06a:	2b00      	cmp	r3, #0
 801a06c:	d011      	beq.n	801a092 <sys_arch_sem_wait+0x3a>
  {
#if (osCMSIS < 0x20000U)
    if(osSemaphoreWait (*sem, timeout) == osOK)
 801a06e:	687b      	ldr	r3, [r7, #4]
 801a070:	681b      	ldr	r3, [r3, #0]
 801a072:	6839      	ldr	r1, [r7, #0]
 801a074:	4618      	mov	r0, r3
 801a076:	f7f1 faab 	bl	800b5d0 <osSemaphoreWait>
 801a07a:	4603      	mov	r3, r0
 801a07c:	2b00      	cmp	r3, #0
 801a07e:	d105      	bne.n	801a08c <sys_arch_sem_wait+0x34>
    {
      return (osKernelSysTick() - starttime);
 801a080:	f7f1 f965 	bl	800b34e <osKernelSysTick>
 801a084:	4602      	mov	r2, r0
 801a086:	68fb      	ldr	r3, [r7, #12]
 801a088:	1ad3      	subs	r3, r2, r3
 801a08a:	e012      	b.n	801a0b2 <sys_arch_sem_wait+0x5a>
        return (osKernelGetTickCount() - starttime);
#endif
    }
    else
    {
      return SYS_ARCH_TIMEOUT;
 801a08c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801a090:	e00f      	b.n	801a0b2 <sys_arch_sem_wait+0x5a>
    }
  }
  else
  {
#if (osCMSIS < 0x20000U)
    while(osSemaphoreWait (*sem, osWaitForever) != osOK);
 801a092:	bf00      	nop
 801a094:	687b      	ldr	r3, [r7, #4]
 801a096:	681b      	ldr	r3, [r3, #0]
 801a098:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 801a09c:	4618      	mov	r0, r3
 801a09e:	f7f1 fa97 	bl	800b5d0 <osSemaphoreWait>
 801a0a2:	4603      	mov	r3, r0
 801a0a4:	2b00      	cmp	r3, #0
 801a0a6:	d1f5      	bne.n	801a094 <sys_arch_sem_wait+0x3c>
    return (osKernelSysTick() - starttime);
 801a0a8:	f7f1 f951 	bl	800b34e <osKernelSysTick>
 801a0ac:	4602      	mov	r2, r0
 801a0ae:	68fb      	ldr	r3, [r7, #12]
 801a0b0:	1ad3      	subs	r3, r2, r3
#else
    while(osSemaphoreAcquire(*sem, osWaitForever) != osOK);
    return (osKernelGetTickCount() - starttime);
#endif
  }
}
 801a0b2:	4618      	mov	r0, r3
 801a0b4:	3710      	adds	r7, #16
 801a0b6:	46bd      	mov	sp, r7
 801a0b8:	bd80      	pop	{r7, pc}

0801a0ba <sys_sem_signal>:

/*-----------------------------------------------------------------------------------*/
// Signals a semaphore
void sys_sem_signal(sys_sem_t *sem)
{
 801a0ba:	b580      	push	{r7, lr}
 801a0bc:	b082      	sub	sp, #8
 801a0be:	af00      	add	r7, sp, #0
 801a0c0:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(*sem);
 801a0c2:	687b      	ldr	r3, [r7, #4]
 801a0c4:	681b      	ldr	r3, [r3, #0]
 801a0c6:	4618      	mov	r0, r3
 801a0c8:	f7f1 fad0 	bl	800b66c <osSemaphoreRelease>
}
 801a0cc:	bf00      	nop
 801a0ce:	3708      	adds	r7, #8
 801a0d0:	46bd      	mov	sp, r7
 801a0d2:	bd80      	pop	{r7, pc}

0801a0d4 <sys_sem_free>:

/*-----------------------------------------------------------------------------------*/
// Deallocates a semaphore
void sys_sem_free(sys_sem_t *sem)
{
 801a0d4:	b580      	push	{r7, lr}
 801a0d6:	b082      	sub	sp, #8
 801a0d8:	af00      	add	r7, sp, #0
 801a0da:	6078      	str	r0, [r7, #4]
#if SYS_STATS
  --lwip_stats.sys.sem.used;
#endif /* SYS_STATS */

  osSemaphoreDelete(*sem);
 801a0dc:	687b      	ldr	r3, [r7, #4]
 801a0de:	681b      	ldr	r3, [r3, #0]
 801a0e0:	4618      	mov	r0, r3
 801a0e2:	f7f1 faf9 	bl	800b6d8 <osSemaphoreDelete>
}
 801a0e6:	bf00      	nop
 801a0e8:	3708      	adds	r7, #8
 801a0ea:	46bd      	mov	sp, r7
 801a0ec:	bd80      	pop	{r7, pc}

0801a0ee <sys_sem_valid>:
/*-----------------------------------------------------------------------------------*/
int sys_sem_valid(sys_sem_t *sem)
{
 801a0ee:	b480      	push	{r7}
 801a0f0:	b083      	sub	sp, #12
 801a0f2:	af00      	add	r7, sp, #0
 801a0f4:	6078      	str	r0, [r7, #4]
  if (*sem == SYS_SEM_NULL)
 801a0f6:	687b      	ldr	r3, [r7, #4]
 801a0f8:	681b      	ldr	r3, [r3, #0]
 801a0fa:	2b00      	cmp	r3, #0
 801a0fc:	d101      	bne.n	801a102 <sys_sem_valid+0x14>
    return 0;
 801a0fe:	2300      	movs	r3, #0
 801a100:	e000      	b.n	801a104 <sys_sem_valid+0x16>
  else
    return 1;
 801a102:	2301      	movs	r3, #1
}
 801a104:	4618      	mov	r0, r3
 801a106:	370c      	adds	r7, #12
 801a108:	46bd      	mov	sp, r7
 801a10a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a10e:	4770      	bx	lr

0801a110 <sys_sem_set_invalid>:

/*-----------------------------------------------------------------------------------*/
void sys_sem_set_invalid(sys_sem_t *sem)
{
 801a110:	b480      	push	{r7}
 801a112:	b083      	sub	sp, #12
 801a114:	af00      	add	r7, sp, #0
 801a116:	6078      	str	r0, [r7, #4]
  *sem = SYS_SEM_NULL;
 801a118:	687b      	ldr	r3, [r7, #4]
 801a11a:	2200      	movs	r2, #0
 801a11c:	601a      	str	r2, [r3, #0]
}
 801a11e:	bf00      	nop
 801a120:	370c      	adds	r7, #12
 801a122:	46bd      	mov	sp, r7
 801a124:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a128:	4770      	bx	lr
	...

0801a12c <sys_init>:
#else
osMutexId_t lwip_sys_mutex;
#endif
// Initialize sys arch
void sys_init(void)
{
 801a12c:	b580      	push	{r7, lr}
 801a12e:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
 801a130:	4803      	ldr	r0, [pc, #12]	; (801a140 <sys_init+0x14>)
 801a132:	f7f1 f97c 	bl	800b42e <osMutexCreate>
 801a136:	4602      	mov	r2, r0
 801a138:	4b02      	ldr	r3, [pc, #8]	; (801a144 <sys_init+0x18>)
 801a13a:	601a      	str	r2, [r3, #0]
#else
  lwip_sys_mutex = osMutexNew(NULL);
#endif
}
 801a13c:	bf00      	nop
 801a13e:	bd80      	pop	{r7, pc}
 801a140:	0801e814 	.word	0x0801e814
 801a144:	2000ab60 	.word	0x2000ab60

0801a148 <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
 801a148:	b580      	push	{r7, lr}
 801a14a:	b084      	sub	sp, #16
 801a14c:	af00      	add	r7, sp, #0
 801a14e:	6078      	str	r0, [r7, #4]

#if (osCMSIS < 0x20000U)
  osMutexDef(MUTEX);
 801a150:	2300      	movs	r3, #0
 801a152:	60bb      	str	r3, [r7, #8]
 801a154:	2300      	movs	r3, #0
 801a156:	60fb      	str	r3, [r7, #12]
  *mutex = osMutexCreate(osMutex(MUTEX));
 801a158:	f107 0308 	add.w	r3, r7, #8
 801a15c:	4618      	mov	r0, r3
 801a15e:	f7f1 f966 	bl	800b42e <osMutexCreate>
 801a162:	4602      	mov	r2, r0
 801a164:	687b      	ldr	r3, [r7, #4]
 801a166:	601a      	str	r2, [r3, #0]
#else
  *mutex = osMutexNew(NULL);
#endif

  if(*mutex == NULL)
 801a168:	687b      	ldr	r3, [r7, #4]
 801a16a:	681b      	ldr	r3, [r3, #0]
 801a16c:	2b00      	cmp	r3, #0
 801a16e:	d102      	bne.n	801a176 <sys_mutex_new+0x2e>
  {
#if SYS_STATS
    ++lwip_stats.sys.mutex.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 801a170:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801a174:	e000      	b.n	801a178 <sys_mutex_new+0x30>
  ++lwip_stats.sys.mutex.used;
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
  }
#endif /* SYS_STATS */
  return ERR_OK;
 801a176:	2300      	movs	r3, #0
}
 801a178:	4618      	mov	r0, r3
 801a17a:	3710      	adds	r7, #16
 801a17c:	46bd      	mov	sp, r7
 801a17e:	bd80      	pop	{r7, pc}

0801a180 <sys_mutex_lock>:
  osMutexDelete(*mutex);
}
/*-----------------------------------------------------------------------------------*/
/* Lock a mutex*/
void sys_mutex_lock(sys_mutex_t *mutex)
{
 801a180:	b580      	push	{r7, lr}
 801a182:	b082      	sub	sp, #8
 801a184:	af00      	add	r7, sp, #0
 801a186:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  osMutexWait(*mutex, osWaitForever);
 801a188:	687b      	ldr	r3, [r7, #4]
 801a18a:	681b      	ldr	r3, [r3, #0]
 801a18c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 801a190:	4618      	mov	r0, r3
 801a192:	f7f1 f965 	bl	800b460 <osMutexWait>
#else
  osMutexAcquire(*mutex, osWaitForever);
#endif
}
 801a196:	bf00      	nop
 801a198:	3708      	adds	r7, #8
 801a19a:	46bd      	mov	sp, r7
 801a19c:	bd80      	pop	{r7, pc}

0801a19e <sys_mutex_unlock>:

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
 801a19e:	b580      	push	{r7, lr}
 801a1a0:	b082      	sub	sp, #8
 801a1a2:	af00      	add	r7, sp, #0
 801a1a4:	6078      	str	r0, [r7, #4]
  osMutexRelease(*mutex);
 801a1a6:	687b      	ldr	r3, [r7, #4]
 801a1a8:	681b      	ldr	r3, [r3, #0]
 801a1aa:	4618      	mov	r0, r3
 801a1ac:	f7f1 f9a6 	bl	800b4fc <osMutexRelease>
}
 801a1b0:	bf00      	nop
 801a1b2:	3708      	adds	r7, #8
 801a1b4:	46bd      	mov	sp, r7
 801a1b6:	bd80      	pop	{r7, pc}

0801a1b8 <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 801a1b8:	b580      	push	{r7, lr}
 801a1ba:	b08c      	sub	sp, #48	; 0x30
 801a1bc:	af00      	add	r7, sp, #0
 801a1be:	60f8      	str	r0, [r7, #12]
 801a1c0:	60b9      	str	r1, [r7, #8]
 801a1c2:	607a      	str	r2, [r7, #4]
 801a1c4:	603b      	str	r3, [r7, #0]
#if (osCMSIS < 0x20000U)
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
 801a1c6:	f107 0314 	add.w	r3, r7, #20
 801a1ca:	2200      	movs	r2, #0
 801a1cc:	601a      	str	r2, [r3, #0]
 801a1ce:	605a      	str	r2, [r3, #4]
 801a1d0:	609a      	str	r2, [r3, #8]
 801a1d2:	60da      	str	r2, [r3, #12]
 801a1d4:	611a      	str	r2, [r3, #16]
 801a1d6:	615a      	str	r2, [r3, #20]
 801a1d8:	619a      	str	r2, [r3, #24]
 801a1da:	68fb      	ldr	r3, [r7, #12]
 801a1dc:	617b      	str	r3, [r7, #20]
 801a1de:	68bb      	ldr	r3, [r7, #8]
 801a1e0:	61bb      	str	r3, [r7, #24]
 801a1e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801a1e4:	b21b      	sxth	r3, r3
 801a1e6:	83bb      	strh	r3, [r7, #28]
 801a1e8:	683b      	ldr	r3, [r7, #0]
 801a1ea:	627b      	str	r3, [r7, #36]	; 0x24
  return osThreadCreate(&os_thread_def, arg);
 801a1ec:	f107 0314 	add.w	r3, r7, #20
 801a1f0:	6879      	ldr	r1, [r7, #4]
 801a1f2:	4618      	mov	r0, r3
 801a1f4:	f7f1 f8bb 	bl	800b36e <osThreadCreate>
 801a1f8:	4603      	mov	r3, r0
                        .stack_size = stacksize,
                        .priority = (osPriority_t)prio,
                      };
  return osThreadNew(thread, arg, &attributes);
#endif
}
 801a1fa:	4618      	mov	r0, r3
 801a1fc:	3730      	adds	r7, #48	; 0x30
 801a1fe:	46bd      	mov	sp, r7
 801a200:	bd80      	pop	{r7, pc}
	...

0801a204 <sys_arch_protect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
sys_prot_t sys_arch_protect(void)
{
 801a204:	b580      	push	{r7, lr}
 801a206:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  osMutexWait(lwip_sys_mutex, osWaitForever);
 801a208:	4b04      	ldr	r3, [pc, #16]	; (801a21c <sys_arch_protect+0x18>)
 801a20a:	681b      	ldr	r3, [r3, #0]
 801a20c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 801a210:	4618      	mov	r0, r3
 801a212:	f7f1 f925 	bl	800b460 <osMutexWait>
#else
  osMutexAcquire(lwip_sys_mutex, osWaitForever);
#endif
  return (sys_prot_t)1;
 801a216:	2301      	movs	r3, #1
}
 801a218:	4618      	mov	r0, r3
 801a21a:	bd80      	pop	{r7, pc}
 801a21c:	2000ab60 	.word	0x2000ab60

0801a220 <sys_arch_unprotect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
void sys_arch_unprotect(sys_prot_t pval)
{
 801a220:	b580      	push	{r7, lr}
 801a222:	b082      	sub	sp, #8
 801a224:	af00      	add	r7, sp, #0
 801a226:	6078      	str	r0, [r7, #4]
  ( void ) pval;
  osMutexRelease(lwip_sys_mutex);
 801a228:	4b04      	ldr	r3, [pc, #16]	; (801a23c <sys_arch_unprotect+0x1c>)
 801a22a:	681b      	ldr	r3, [r3, #0]
 801a22c:	4618      	mov	r0, r3
 801a22e:	f7f1 f965 	bl	800b4fc <osMutexRelease>
}
 801a232:	bf00      	nop
 801a234:	3708      	adds	r7, #8
 801a236:	46bd      	mov	sp, r7
 801a238:	bd80      	pop	{r7, pc}
 801a23a:	bf00      	nop
 801a23c:	2000ab60 	.word	0x2000ab60

0801a240 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 801a240:	b580      	push	{r7, lr}
 801a242:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PreTreatment */
  
  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 801a244:	2200      	movs	r2, #0
 801a246:	4912      	ldr	r1, [pc, #72]	; (801a290 <MX_USB_DEVICE_Init+0x50>)
 801a248:	4812      	ldr	r0, [pc, #72]	; (801a294 <MX_USB_DEVICE_Init+0x54>)
 801a24a:	f7ef fff4 	bl	800a236 <USBD_Init>
 801a24e:	4603      	mov	r3, r0
 801a250:	2b00      	cmp	r3, #0
 801a252:	d001      	beq.n	801a258 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 801a254:	f7e7 fd1c 	bl	8001c90 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 801a258:	490f      	ldr	r1, [pc, #60]	; (801a298 <MX_USB_DEVICE_Init+0x58>)
 801a25a:	480e      	ldr	r0, [pc, #56]	; (801a294 <MX_USB_DEVICE_Init+0x54>)
 801a25c:	f7f0 f816 	bl	800a28c <USBD_RegisterClass>
 801a260:	4603      	mov	r3, r0
 801a262:	2b00      	cmp	r3, #0
 801a264:	d001      	beq.n	801a26a <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 801a266:	f7e7 fd13 	bl	8001c90 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 801a26a:	490c      	ldr	r1, [pc, #48]	; (801a29c <MX_USB_DEVICE_Init+0x5c>)
 801a26c:	4809      	ldr	r0, [pc, #36]	; (801a294 <MX_USB_DEVICE_Init+0x54>)
 801a26e:	f7ef ff73 	bl	800a158 <USBD_CDC_RegisterInterface>
 801a272:	4603      	mov	r3, r0
 801a274:	2b00      	cmp	r3, #0
 801a276:	d001      	beq.n	801a27c <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 801a278:	f7e7 fd0a 	bl	8001c90 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 801a27c:	4805      	ldr	r0, [pc, #20]	; (801a294 <MX_USB_DEVICE_Init+0x54>)
 801a27e:	f7f0 f81f 	bl	800a2c0 <USBD_Start>
 801a282:	4603      	mov	r3, r0
 801a284:	2b00      	cmp	r3, #0
 801a286:	d001      	beq.n	801a28c <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 801a288:	f7e7 fd02 	bl	8001c90 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 801a28c:	bf00      	nop
 801a28e:	bd80      	pop	{r7, pc}
 801a290:	20000138 	.word	0x20000138
 801a294:	2000ab64 	.word	0x2000ab64
 801a298:	20000014 	.word	0x20000014
 801a29c:	20000128 	.word	0x20000128

0801a2a0 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 801a2a0:	b580      	push	{r7, lr}
 801a2a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 801a2a4:	2200      	movs	r2, #0
 801a2a6:	4905      	ldr	r1, [pc, #20]	; (801a2bc <CDC_Init_FS+0x1c>)
 801a2a8:	4805      	ldr	r0, [pc, #20]	; (801a2c0 <CDC_Init_FS+0x20>)
 801a2aa:	f7ef ff6c 	bl	800a186 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 801a2ae:	4905      	ldr	r1, [pc, #20]	; (801a2c4 <CDC_Init_FS+0x24>)
 801a2b0:	4803      	ldr	r0, [pc, #12]	; (801a2c0 <CDC_Init_FS+0x20>)
 801a2b2:	f7ef ff82 	bl	800a1ba <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 801a2b6:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 801a2b8:	4618      	mov	r0, r3
 801a2ba:	bd80      	pop	{r7, pc}
 801a2bc:	2000b600 	.word	0x2000b600
 801a2c0:	2000ab64 	.word	0x2000ab64
 801a2c4:	2000ae00 	.word	0x2000ae00

0801a2c8 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 801a2c8:	b480      	push	{r7}
 801a2ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 801a2cc:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 801a2ce:	4618      	mov	r0, r3
 801a2d0:	46bd      	mov	sp, r7
 801a2d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a2d6:	4770      	bx	lr

0801a2d8 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 801a2d8:	b480      	push	{r7}
 801a2da:	b083      	sub	sp, #12
 801a2dc:	af00      	add	r7, sp, #0
 801a2de:	4603      	mov	r3, r0
 801a2e0:	6039      	str	r1, [r7, #0]
 801a2e2:	71fb      	strb	r3, [r7, #7]
 801a2e4:	4613      	mov	r3, r2
 801a2e6:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 801a2e8:	79fb      	ldrb	r3, [r7, #7]
 801a2ea:	2b23      	cmp	r3, #35	; 0x23
 801a2ec:	d84a      	bhi.n	801a384 <CDC_Control_FS+0xac>
 801a2ee:	a201      	add	r2, pc, #4	; (adr r2, 801a2f4 <CDC_Control_FS+0x1c>)
 801a2f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801a2f4:	0801a385 	.word	0x0801a385
 801a2f8:	0801a385 	.word	0x0801a385
 801a2fc:	0801a385 	.word	0x0801a385
 801a300:	0801a385 	.word	0x0801a385
 801a304:	0801a385 	.word	0x0801a385
 801a308:	0801a385 	.word	0x0801a385
 801a30c:	0801a385 	.word	0x0801a385
 801a310:	0801a385 	.word	0x0801a385
 801a314:	0801a385 	.word	0x0801a385
 801a318:	0801a385 	.word	0x0801a385
 801a31c:	0801a385 	.word	0x0801a385
 801a320:	0801a385 	.word	0x0801a385
 801a324:	0801a385 	.word	0x0801a385
 801a328:	0801a385 	.word	0x0801a385
 801a32c:	0801a385 	.word	0x0801a385
 801a330:	0801a385 	.word	0x0801a385
 801a334:	0801a385 	.word	0x0801a385
 801a338:	0801a385 	.word	0x0801a385
 801a33c:	0801a385 	.word	0x0801a385
 801a340:	0801a385 	.word	0x0801a385
 801a344:	0801a385 	.word	0x0801a385
 801a348:	0801a385 	.word	0x0801a385
 801a34c:	0801a385 	.word	0x0801a385
 801a350:	0801a385 	.word	0x0801a385
 801a354:	0801a385 	.word	0x0801a385
 801a358:	0801a385 	.word	0x0801a385
 801a35c:	0801a385 	.word	0x0801a385
 801a360:	0801a385 	.word	0x0801a385
 801a364:	0801a385 	.word	0x0801a385
 801a368:	0801a385 	.word	0x0801a385
 801a36c:	0801a385 	.word	0x0801a385
 801a370:	0801a385 	.word	0x0801a385
 801a374:	0801a385 	.word	0x0801a385
 801a378:	0801a385 	.word	0x0801a385
 801a37c:	0801a385 	.word	0x0801a385
 801a380:	0801a385 	.word	0x0801a385
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 801a384:	bf00      	nop
  }

  return (USBD_OK);
 801a386:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 801a388:	4618      	mov	r0, r3
 801a38a:	370c      	adds	r7, #12
 801a38c:	46bd      	mov	sp, r7
 801a38e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a392:	4770      	bx	lr

0801a394 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 801a394:	b580      	push	{r7, lr}
 801a396:	b082      	sub	sp, #8
 801a398:	af00      	add	r7, sp, #0
 801a39a:	6078      	str	r0, [r7, #4]
 801a39c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 801a39e:	6879      	ldr	r1, [r7, #4]
 801a3a0:	4805      	ldr	r0, [pc, #20]	; (801a3b8 <CDC_Receive_FS+0x24>)
 801a3a2:	f7ef ff0a 	bl	800a1ba <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 801a3a6:	4804      	ldr	r0, [pc, #16]	; (801a3b8 <CDC_Receive_FS+0x24>)
 801a3a8:	f7ef ff1b 	bl	800a1e2 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 801a3ac:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 801a3ae:	4618      	mov	r0, r3
 801a3b0:	3708      	adds	r7, #8
 801a3b2:	46bd      	mov	sp, r7
 801a3b4:	bd80      	pop	{r7, pc}
 801a3b6:	bf00      	nop
 801a3b8:	2000ab64 	.word	0x2000ab64

0801a3bc <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801a3bc:	b480      	push	{r7}
 801a3be:	b083      	sub	sp, #12
 801a3c0:	af00      	add	r7, sp, #0
 801a3c2:	4603      	mov	r3, r0
 801a3c4:	6039      	str	r1, [r7, #0]
 801a3c6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 801a3c8:	683b      	ldr	r3, [r7, #0]
 801a3ca:	2212      	movs	r2, #18
 801a3cc:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 801a3ce:	4b03      	ldr	r3, [pc, #12]	; (801a3dc <USBD_FS_DeviceDescriptor+0x20>)
}
 801a3d0:	4618      	mov	r0, r3
 801a3d2:	370c      	adds	r7, #12
 801a3d4:	46bd      	mov	sp, r7
 801a3d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a3da:	4770      	bx	lr
 801a3dc:	20000154 	.word	0x20000154

0801a3e0 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801a3e0:	b480      	push	{r7}
 801a3e2:	b083      	sub	sp, #12
 801a3e4:	af00      	add	r7, sp, #0
 801a3e6:	4603      	mov	r3, r0
 801a3e8:	6039      	str	r1, [r7, #0]
 801a3ea:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 801a3ec:	683b      	ldr	r3, [r7, #0]
 801a3ee:	2204      	movs	r2, #4
 801a3f0:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 801a3f2:	4b03      	ldr	r3, [pc, #12]	; (801a400 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 801a3f4:	4618      	mov	r0, r3
 801a3f6:	370c      	adds	r7, #12
 801a3f8:	46bd      	mov	sp, r7
 801a3fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a3fe:	4770      	bx	lr
 801a400:	20000168 	.word	0x20000168

0801a404 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801a404:	b580      	push	{r7, lr}
 801a406:	b082      	sub	sp, #8
 801a408:	af00      	add	r7, sp, #0
 801a40a:	4603      	mov	r3, r0
 801a40c:	6039      	str	r1, [r7, #0]
 801a40e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 801a410:	79fb      	ldrb	r3, [r7, #7]
 801a412:	2b00      	cmp	r3, #0
 801a414:	d105      	bne.n	801a422 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 801a416:	683a      	ldr	r2, [r7, #0]
 801a418:	4907      	ldr	r1, [pc, #28]	; (801a438 <USBD_FS_ProductStrDescriptor+0x34>)
 801a41a:	4808      	ldr	r0, [pc, #32]	; (801a43c <USBD_FS_ProductStrDescriptor+0x38>)
 801a41c:	f7f0 fe88 	bl	800b130 <USBD_GetString>
 801a420:	e004      	b.n	801a42c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 801a422:	683a      	ldr	r2, [r7, #0]
 801a424:	4904      	ldr	r1, [pc, #16]	; (801a438 <USBD_FS_ProductStrDescriptor+0x34>)
 801a426:	4805      	ldr	r0, [pc, #20]	; (801a43c <USBD_FS_ProductStrDescriptor+0x38>)
 801a428:	f7f0 fe82 	bl	800b130 <USBD_GetString>
  }
  return USBD_StrDesc;
 801a42c:	4b02      	ldr	r3, [pc, #8]	; (801a438 <USBD_FS_ProductStrDescriptor+0x34>)
}
 801a42e:	4618      	mov	r0, r3
 801a430:	3708      	adds	r7, #8
 801a432:	46bd      	mov	sp, r7
 801a434:	bd80      	pop	{r7, pc}
 801a436:	bf00      	nop
 801a438:	2000be00 	.word	0x2000be00
 801a43c:	0801e690 	.word	0x0801e690

0801a440 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801a440:	b580      	push	{r7, lr}
 801a442:	b082      	sub	sp, #8
 801a444:	af00      	add	r7, sp, #0
 801a446:	4603      	mov	r3, r0
 801a448:	6039      	str	r1, [r7, #0]
 801a44a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 801a44c:	683a      	ldr	r2, [r7, #0]
 801a44e:	4904      	ldr	r1, [pc, #16]	; (801a460 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 801a450:	4804      	ldr	r0, [pc, #16]	; (801a464 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 801a452:	f7f0 fe6d 	bl	800b130 <USBD_GetString>
  return USBD_StrDesc;
 801a456:	4b02      	ldr	r3, [pc, #8]	; (801a460 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 801a458:	4618      	mov	r0, r3
 801a45a:	3708      	adds	r7, #8
 801a45c:	46bd      	mov	sp, r7
 801a45e:	bd80      	pop	{r7, pc}
 801a460:	2000be00 	.word	0x2000be00
 801a464:	0801e6a8 	.word	0x0801e6a8

0801a468 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801a468:	b580      	push	{r7, lr}
 801a46a:	b082      	sub	sp, #8
 801a46c:	af00      	add	r7, sp, #0
 801a46e:	4603      	mov	r3, r0
 801a470:	6039      	str	r1, [r7, #0]
 801a472:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 801a474:	683b      	ldr	r3, [r7, #0]
 801a476:	221a      	movs	r2, #26
 801a478:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 801a47a:	f000 f843 	bl	801a504 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */
  
  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 801a47e:	4b02      	ldr	r3, [pc, #8]	; (801a488 <USBD_FS_SerialStrDescriptor+0x20>)
}
 801a480:	4618      	mov	r0, r3
 801a482:	3708      	adds	r7, #8
 801a484:	46bd      	mov	sp, r7
 801a486:	bd80      	pop	{r7, pc}
 801a488:	2000016c 	.word	0x2000016c

0801a48c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801a48c:	b580      	push	{r7, lr}
 801a48e:	b082      	sub	sp, #8
 801a490:	af00      	add	r7, sp, #0
 801a492:	4603      	mov	r3, r0
 801a494:	6039      	str	r1, [r7, #0]
 801a496:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 801a498:	79fb      	ldrb	r3, [r7, #7]
 801a49a:	2b00      	cmp	r3, #0
 801a49c:	d105      	bne.n	801a4aa <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 801a49e:	683a      	ldr	r2, [r7, #0]
 801a4a0:	4907      	ldr	r1, [pc, #28]	; (801a4c0 <USBD_FS_ConfigStrDescriptor+0x34>)
 801a4a2:	4808      	ldr	r0, [pc, #32]	; (801a4c4 <USBD_FS_ConfigStrDescriptor+0x38>)
 801a4a4:	f7f0 fe44 	bl	800b130 <USBD_GetString>
 801a4a8:	e004      	b.n	801a4b4 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 801a4aa:	683a      	ldr	r2, [r7, #0]
 801a4ac:	4904      	ldr	r1, [pc, #16]	; (801a4c0 <USBD_FS_ConfigStrDescriptor+0x34>)
 801a4ae:	4805      	ldr	r0, [pc, #20]	; (801a4c4 <USBD_FS_ConfigStrDescriptor+0x38>)
 801a4b0:	f7f0 fe3e 	bl	800b130 <USBD_GetString>
  }
  return USBD_StrDesc;
 801a4b4:	4b02      	ldr	r3, [pc, #8]	; (801a4c0 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 801a4b6:	4618      	mov	r0, r3
 801a4b8:	3708      	adds	r7, #8
 801a4ba:	46bd      	mov	sp, r7
 801a4bc:	bd80      	pop	{r7, pc}
 801a4be:	bf00      	nop
 801a4c0:	2000be00 	.word	0x2000be00
 801a4c4:	0801e6bc 	.word	0x0801e6bc

0801a4c8 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801a4c8:	b580      	push	{r7, lr}
 801a4ca:	b082      	sub	sp, #8
 801a4cc:	af00      	add	r7, sp, #0
 801a4ce:	4603      	mov	r3, r0
 801a4d0:	6039      	str	r1, [r7, #0]
 801a4d2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 801a4d4:	79fb      	ldrb	r3, [r7, #7]
 801a4d6:	2b00      	cmp	r3, #0
 801a4d8:	d105      	bne.n	801a4e6 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 801a4da:	683a      	ldr	r2, [r7, #0]
 801a4dc:	4907      	ldr	r1, [pc, #28]	; (801a4fc <USBD_FS_InterfaceStrDescriptor+0x34>)
 801a4de:	4808      	ldr	r0, [pc, #32]	; (801a500 <USBD_FS_InterfaceStrDescriptor+0x38>)
 801a4e0:	f7f0 fe26 	bl	800b130 <USBD_GetString>
 801a4e4:	e004      	b.n	801a4f0 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 801a4e6:	683a      	ldr	r2, [r7, #0]
 801a4e8:	4904      	ldr	r1, [pc, #16]	; (801a4fc <USBD_FS_InterfaceStrDescriptor+0x34>)
 801a4ea:	4805      	ldr	r0, [pc, #20]	; (801a500 <USBD_FS_InterfaceStrDescriptor+0x38>)
 801a4ec:	f7f0 fe20 	bl	800b130 <USBD_GetString>
  }
  return USBD_StrDesc;
 801a4f0:	4b02      	ldr	r3, [pc, #8]	; (801a4fc <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 801a4f2:	4618      	mov	r0, r3
 801a4f4:	3708      	adds	r7, #8
 801a4f6:	46bd      	mov	sp, r7
 801a4f8:	bd80      	pop	{r7, pc}
 801a4fa:	bf00      	nop
 801a4fc:	2000be00 	.word	0x2000be00
 801a500:	0801e6c8 	.word	0x0801e6c8

0801a504 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor 
  * @param  None 
  * @retval None
  */
static void Get_SerialNum(void)
{
 801a504:	b580      	push	{r7, lr}
 801a506:	b084      	sub	sp, #16
 801a508:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 801a50a:	4b0f      	ldr	r3, [pc, #60]	; (801a548 <Get_SerialNum+0x44>)
 801a50c:	681b      	ldr	r3, [r3, #0]
 801a50e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 801a510:	4b0e      	ldr	r3, [pc, #56]	; (801a54c <Get_SerialNum+0x48>)
 801a512:	681b      	ldr	r3, [r3, #0]
 801a514:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 801a516:	4b0e      	ldr	r3, [pc, #56]	; (801a550 <Get_SerialNum+0x4c>)
 801a518:	681b      	ldr	r3, [r3, #0]
 801a51a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 801a51c:	68fa      	ldr	r2, [r7, #12]
 801a51e:	687b      	ldr	r3, [r7, #4]
 801a520:	4413      	add	r3, r2
 801a522:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 801a524:	68fb      	ldr	r3, [r7, #12]
 801a526:	2b00      	cmp	r3, #0
 801a528:	d009      	beq.n	801a53e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 801a52a:	2208      	movs	r2, #8
 801a52c:	4909      	ldr	r1, [pc, #36]	; (801a554 <Get_SerialNum+0x50>)
 801a52e:	68f8      	ldr	r0, [r7, #12]
 801a530:	f000 f814 	bl	801a55c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 801a534:	2204      	movs	r2, #4
 801a536:	4908      	ldr	r1, [pc, #32]	; (801a558 <Get_SerialNum+0x54>)
 801a538:	68b8      	ldr	r0, [r7, #8]
 801a53a:	f000 f80f 	bl	801a55c <IntToUnicode>
  }
}
 801a53e:	bf00      	nop
 801a540:	3710      	adds	r7, #16
 801a542:	46bd      	mov	sp, r7
 801a544:	bd80      	pop	{r7, pc}
 801a546:	bf00      	nop
 801a548:	1fff7a10 	.word	0x1fff7a10
 801a54c:	1fff7a14 	.word	0x1fff7a14
 801a550:	1fff7a18 	.word	0x1fff7a18
 801a554:	2000016e 	.word	0x2000016e
 801a558:	2000017e 	.word	0x2000017e

0801a55c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer 
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 801a55c:	b480      	push	{r7}
 801a55e:	b087      	sub	sp, #28
 801a560:	af00      	add	r7, sp, #0
 801a562:	60f8      	str	r0, [r7, #12]
 801a564:	60b9      	str	r1, [r7, #8]
 801a566:	4613      	mov	r3, r2
 801a568:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 801a56a:	2300      	movs	r3, #0
 801a56c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 801a56e:	2300      	movs	r3, #0
 801a570:	75fb      	strb	r3, [r7, #23]
 801a572:	e027      	b.n	801a5c4 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 801a574:	68fb      	ldr	r3, [r7, #12]
 801a576:	0f1b      	lsrs	r3, r3, #28
 801a578:	2b09      	cmp	r3, #9
 801a57a:	d80b      	bhi.n	801a594 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 801a57c:	68fb      	ldr	r3, [r7, #12]
 801a57e:	0f1b      	lsrs	r3, r3, #28
 801a580:	b2da      	uxtb	r2, r3
 801a582:	7dfb      	ldrb	r3, [r7, #23]
 801a584:	005b      	lsls	r3, r3, #1
 801a586:	4619      	mov	r1, r3
 801a588:	68bb      	ldr	r3, [r7, #8]
 801a58a:	440b      	add	r3, r1
 801a58c:	3230      	adds	r2, #48	; 0x30
 801a58e:	b2d2      	uxtb	r2, r2
 801a590:	701a      	strb	r2, [r3, #0]
 801a592:	e00a      	b.n	801a5aa <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 801a594:	68fb      	ldr	r3, [r7, #12]
 801a596:	0f1b      	lsrs	r3, r3, #28
 801a598:	b2da      	uxtb	r2, r3
 801a59a:	7dfb      	ldrb	r3, [r7, #23]
 801a59c:	005b      	lsls	r3, r3, #1
 801a59e:	4619      	mov	r1, r3
 801a5a0:	68bb      	ldr	r3, [r7, #8]
 801a5a2:	440b      	add	r3, r1
 801a5a4:	3237      	adds	r2, #55	; 0x37
 801a5a6:	b2d2      	uxtb	r2, r2
 801a5a8:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 801a5aa:	68fb      	ldr	r3, [r7, #12]
 801a5ac:	011b      	lsls	r3, r3, #4
 801a5ae:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 801a5b0:	7dfb      	ldrb	r3, [r7, #23]
 801a5b2:	005b      	lsls	r3, r3, #1
 801a5b4:	3301      	adds	r3, #1
 801a5b6:	68ba      	ldr	r2, [r7, #8]
 801a5b8:	4413      	add	r3, r2
 801a5ba:	2200      	movs	r2, #0
 801a5bc:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 801a5be:	7dfb      	ldrb	r3, [r7, #23]
 801a5c0:	3301      	adds	r3, #1
 801a5c2:	75fb      	strb	r3, [r7, #23]
 801a5c4:	7dfa      	ldrb	r2, [r7, #23]
 801a5c6:	79fb      	ldrb	r3, [r7, #7]
 801a5c8:	429a      	cmp	r2, r3
 801a5ca:	d3d3      	bcc.n	801a574 <IntToUnicode+0x18>
  }
}
 801a5cc:	bf00      	nop
 801a5ce:	371c      	adds	r7, #28
 801a5d0:	46bd      	mov	sp, r7
 801a5d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a5d6:	4770      	bx	lr

0801a5d8 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 801a5d8:	b580      	push	{r7, lr}
 801a5da:	b08a      	sub	sp, #40	; 0x28
 801a5dc:	af00      	add	r7, sp, #0
 801a5de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 801a5e0:	f107 0314 	add.w	r3, r7, #20
 801a5e4:	2200      	movs	r2, #0
 801a5e6:	601a      	str	r2, [r3, #0]
 801a5e8:	605a      	str	r2, [r3, #4]
 801a5ea:	609a      	str	r2, [r3, #8]
 801a5ec:	60da      	str	r2, [r3, #12]
 801a5ee:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 801a5f0:	687b      	ldr	r3, [r7, #4]
 801a5f2:	681b      	ldr	r3, [r3, #0]
 801a5f4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 801a5f8:	d147      	bne.n	801a68a <HAL_PCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 801a5fa:	2300      	movs	r3, #0
 801a5fc:	613b      	str	r3, [r7, #16]
 801a5fe:	4b25      	ldr	r3, [pc, #148]	; (801a694 <HAL_PCD_MspInit+0xbc>)
 801a600:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801a602:	4a24      	ldr	r2, [pc, #144]	; (801a694 <HAL_PCD_MspInit+0xbc>)
 801a604:	f043 0301 	orr.w	r3, r3, #1
 801a608:	6313      	str	r3, [r2, #48]	; 0x30
 801a60a:	4b22      	ldr	r3, [pc, #136]	; (801a694 <HAL_PCD_MspInit+0xbc>)
 801a60c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801a60e:	f003 0301 	and.w	r3, r3, #1
 801a612:	613b      	str	r3, [r7, #16]
 801a614:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 801a616:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 801a61a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801a61c:	2302      	movs	r3, #2
 801a61e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801a620:	2300      	movs	r3, #0
 801a622:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801a624:	2303      	movs	r3, #3
 801a626:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 801a628:	230a      	movs	r3, #10
 801a62a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 801a62c:	f107 0314 	add.w	r3, r7, #20
 801a630:	4619      	mov	r1, r3
 801a632:	4819      	ldr	r0, [pc, #100]	; (801a698 <HAL_PCD_MspInit+0xc0>)
 801a634:	f7e9 fa84 	bl	8003b40 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 801a638:	f44f 7300 	mov.w	r3, #512	; 0x200
 801a63c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 801a63e:	2300      	movs	r3, #0
 801a640:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801a642:	2300      	movs	r3, #0
 801a644:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 801a646:	f107 0314 	add.w	r3, r7, #20
 801a64a:	4619      	mov	r1, r3
 801a64c:	4812      	ldr	r0, [pc, #72]	; (801a698 <HAL_PCD_MspInit+0xc0>)
 801a64e:	f7e9 fa77 	bl	8003b40 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 801a652:	4b10      	ldr	r3, [pc, #64]	; (801a694 <HAL_PCD_MspInit+0xbc>)
 801a654:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801a656:	4a0f      	ldr	r2, [pc, #60]	; (801a694 <HAL_PCD_MspInit+0xbc>)
 801a658:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801a65c:	6353      	str	r3, [r2, #52]	; 0x34
 801a65e:	2300      	movs	r3, #0
 801a660:	60fb      	str	r3, [r7, #12]
 801a662:	4b0c      	ldr	r3, [pc, #48]	; (801a694 <HAL_PCD_MspInit+0xbc>)
 801a664:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801a666:	4a0b      	ldr	r2, [pc, #44]	; (801a694 <HAL_PCD_MspInit+0xbc>)
 801a668:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 801a66c:	6453      	str	r3, [r2, #68]	; 0x44
 801a66e:	4b09      	ldr	r3, [pc, #36]	; (801a694 <HAL_PCD_MspInit+0xbc>)
 801a670:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801a672:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 801a676:	60fb      	str	r3, [r7, #12]
 801a678:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 801a67a:	2200      	movs	r2, #0
 801a67c:	2105      	movs	r1, #5
 801a67e:	2043      	movs	r0, #67	; 0x43
 801a680:	f7e8 fa00 	bl	8002a84 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 801a684:	2043      	movs	r0, #67	; 0x43
 801a686:	f7e8 fa19 	bl	8002abc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 801a68a:	bf00      	nop
 801a68c:	3728      	adds	r7, #40	; 0x28
 801a68e:	46bd      	mov	sp, r7
 801a690:	bd80      	pop	{r7, pc}
 801a692:	bf00      	nop
 801a694:	40023800 	.word	0x40023800
 801a698:	40020000 	.word	0x40020000

0801a69c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801a69c:	b580      	push	{r7, lr}
 801a69e:	b082      	sub	sp, #8
 801a6a0:	af00      	add	r7, sp, #0
 801a6a2:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 801a6a4:	687b      	ldr	r3, [r7, #4]
 801a6a6:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 801a6aa:	687b      	ldr	r3, [r7, #4]
 801a6ac:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 801a6b0:	4619      	mov	r1, r3
 801a6b2:	4610      	mov	r0, r2
 801a6b4:	f7ef fe4d 	bl	800a352 <USBD_LL_SetupStage>
}
 801a6b8:	bf00      	nop
 801a6ba:	3708      	adds	r7, #8
 801a6bc:	46bd      	mov	sp, r7
 801a6be:	bd80      	pop	{r7, pc}

0801a6c0 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801a6c0:	b580      	push	{r7, lr}
 801a6c2:	b082      	sub	sp, #8
 801a6c4:	af00      	add	r7, sp, #0
 801a6c6:	6078      	str	r0, [r7, #4]
 801a6c8:	460b      	mov	r3, r1
 801a6ca:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 801a6cc:	687b      	ldr	r3, [r7, #4]
 801a6ce:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 801a6d2:	78fa      	ldrb	r2, [r7, #3]
 801a6d4:	6879      	ldr	r1, [r7, #4]
 801a6d6:	4613      	mov	r3, r2
 801a6d8:	00db      	lsls	r3, r3, #3
 801a6da:	1a9b      	subs	r3, r3, r2
 801a6dc:	009b      	lsls	r3, r3, #2
 801a6de:	440b      	add	r3, r1
 801a6e0:	f503 7302 	add.w	r3, r3, #520	; 0x208
 801a6e4:	681a      	ldr	r2, [r3, #0]
 801a6e6:	78fb      	ldrb	r3, [r7, #3]
 801a6e8:	4619      	mov	r1, r3
 801a6ea:	f7ef fe7d 	bl	800a3e8 <USBD_LL_DataOutStage>
}
 801a6ee:	bf00      	nop
 801a6f0:	3708      	adds	r7, #8
 801a6f2:	46bd      	mov	sp, r7
 801a6f4:	bd80      	pop	{r7, pc}

0801a6f6 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801a6f6:	b580      	push	{r7, lr}
 801a6f8:	b082      	sub	sp, #8
 801a6fa:	af00      	add	r7, sp, #0
 801a6fc:	6078      	str	r0, [r7, #4]
 801a6fe:	460b      	mov	r3, r1
 801a700:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 801a702:	687b      	ldr	r3, [r7, #4]
 801a704:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 801a708:	78fa      	ldrb	r2, [r7, #3]
 801a70a:	6879      	ldr	r1, [r7, #4]
 801a70c:	4613      	mov	r3, r2
 801a70e:	00db      	lsls	r3, r3, #3
 801a710:	1a9b      	subs	r3, r3, r2
 801a712:	009b      	lsls	r3, r3, #2
 801a714:	440b      	add	r3, r1
 801a716:	3348      	adds	r3, #72	; 0x48
 801a718:	681a      	ldr	r2, [r3, #0]
 801a71a:	78fb      	ldrb	r3, [r7, #3]
 801a71c:	4619      	mov	r1, r3
 801a71e:	f7ef fed4 	bl	800a4ca <USBD_LL_DataInStage>
}
 801a722:	bf00      	nop
 801a724:	3708      	adds	r7, #8
 801a726:	46bd      	mov	sp, r7
 801a728:	bd80      	pop	{r7, pc}

0801a72a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801a72a:	b580      	push	{r7, lr}
 801a72c:	b082      	sub	sp, #8
 801a72e:	af00      	add	r7, sp, #0
 801a730:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 801a732:	687b      	ldr	r3, [r7, #4]
 801a734:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801a738:	4618      	mov	r0, r3
 801a73a:	f7ef ffe2 	bl	800a702 <USBD_LL_SOF>
}
 801a73e:	bf00      	nop
 801a740:	3708      	adds	r7, #8
 801a742:	46bd      	mov	sp, r7
 801a744:	bd80      	pop	{r7, pc}

0801a746 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{ 
 801a746:	b580      	push	{r7, lr}
 801a748:	b084      	sub	sp, #16
 801a74a:	af00      	add	r7, sp, #0
 801a74c:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 801a74e:	2301      	movs	r3, #1
 801a750:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 801a752:	687b      	ldr	r3, [r7, #4]
 801a754:	68db      	ldr	r3, [r3, #12]
 801a756:	2b00      	cmp	r3, #0
 801a758:	d102      	bne.n	801a760 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 801a75a:	2300      	movs	r3, #0
 801a75c:	73fb      	strb	r3, [r7, #15]
 801a75e:	e008      	b.n	801a772 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 801a760:	687b      	ldr	r3, [r7, #4]
 801a762:	68db      	ldr	r3, [r3, #12]
 801a764:	2b02      	cmp	r3, #2
 801a766:	d102      	bne.n	801a76e <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 801a768:	2301      	movs	r3, #1
 801a76a:	73fb      	strb	r3, [r7, #15]
 801a76c:	e001      	b.n	801a772 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 801a76e:	f7e7 fa8f 	bl	8001c90 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 801a772:	687b      	ldr	r3, [r7, #4]
 801a774:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801a778:	7bfa      	ldrb	r2, [r7, #15]
 801a77a:	4611      	mov	r1, r2
 801a77c:	4618      	mov	r0, r3
 801a77e:	f7ef ff8a 	bl	800a696 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 801a782:	687b      	ldr	r3, [r7, #4]
 801a784:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801a788:	4618      	mov	r0, r3
 801a78a:	f7ef ff43 	bl	800a614 <USBD_LL_Reset>
}
 801a78e:	bf00      	nop
 801a790:	3710      	adds	r7, #16
 801a792:	46bd      	mov	sp, r7
 801a794:	bd80      	pop	{r7, pc}
	...

0801a798 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801a798:	b580      	push	{r7, lr}
 801a79a:	b082      	sub	sp, #8
 801a79c:	af00      	add	r7, sp, #0
 801a79e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 801a7a0:	687b      	ldr	r3, [r7, #4]
 801a7a2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801a7a6:	4618      	mov	r0, r3
 801a7a8:	f7ef ff85 	bl	800a6b6 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 801a7ac:	687b      	ldr	r3, [r7, #4]
 801a7ae:	681b      	ldr	r3, [r3, #0]
 801a7b0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 801a7b4:	681b      	ldr	r3, [r3, #0]
 801a7b6:	687a      	ldr	r2, [r7, #4]
 801a7b8:	6812      	ldr	r2, [r2, #0]
 801a7ba:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 801a7be:	f043 0301 	orr.w	r3, r3, #1
 801a7c2:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 801a7c4:	687b      	ldr	r3, [r7, #4]
 801a7c6:	6a1b      	ldr	r3, [r3, #32]
 801a7c8:	2b00      	cmp	r3, #0
 801a7ca:	d005      	beq.n	801a7d8 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 801a7cc:	4b04      	ldr	r3, [pc, #16]	; (801a7e0 <HAL_PCD_SuspendCallback+0x48>)
 801a7ce:	691b      	ldr	r3, [r3, #16]
 801a7d0:	4a03      	ldr	r2, [pc, #12]	; (801a7e0 <HAL_PCD_SuspendCallback+0x48>)
 801a7d2:	f043 0306 	orr.w	r3, r3, #6
 801a7d6:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 801a7d8:	bf00      	nop
 801a7da:	3708      	adds	r7, #8
 801a7dc:	46bd      	mov	sp, r7
 801a7de:	bd80      	pop	{r7, pc}
 801a7e0:	e000ed00 	.word	0xe000ed00

0801a7e4 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801a7e4:	b580      	push	{r7, lr}
 801a7e6:	b082      	sub	sp, #8
 801a7e8:	af00      	add	r7, sp, #0
 801a7ea:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 801a7ec:	687b      	ldr	r3, [r7, #4]
 801a7ee:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801a7f2:	4618      	mov	r0, r3
 801a7f4:	f7ef ff74 	bl	800a6e0 <USBD_LL_Resume>
}
 801a7f8:	bf00      	nop
 801a7fa:	3708      	adds	r7, #8
 801a7fc:	46bd      	mov	sp, r7
 801a7fe:	bd80      	pop	{r7, pc}

0801a800 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801a800:	b580      	push	{r7, lr}
 801a802:	b082      	sub	sp, #8
 801a804:	af00      	add	r7, sp, #0
 801a806:	6078      	str	r0, [r7, #4]
 801a808:	460b      	mov	r3, r1
 801a80a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 801a80c:	687b      	ldr	r3, [r7, #4]
 801a80e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801a812:	78fa      	ldrb	r2, [r7, #3]
 801a814:	4611      	mov	r1, r2
 801a816:	4618      	mov	r0, r3
 801a818:	f7ef ff9a 	bl	800a750 <USBD_LL_IsoOUTIncomplete>
}
 801a81c:	bf00      	nop
 801a81e:	3708      	adds	r7, #8
 801a820:	46bd      	mov	sp, r7
 801a822:	bd80      	pop	{r7, pc}

0801a824 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801a824:	b580      	push	{r7, lr}
 801a826:	b082      	sub	sp, #8
 801a828:	af00      	add	r7, sp, #0
 801a82a:	6078      	str	r0, [r7, #4]
 801a82c:	460b      	mov	r3, r1
 801a82e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 801a830:	687b      	ldr	r3, [r7, #4]
 801a832:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801a836:	78fa      	ldrb	r2, [r7, #3]
 801a838:	4611      	mov	r1, r2
 801a83a:	4618      	mov	r0, r3
 801a83c:	f7ef ff7b 	bl	800a736 <USBD_LL_IsoINIncomplete>
}
 801a840:	bf00      	nop
 801a842:	3708      	adds	r7, #8
 801a844:	46bd      	mov	sp, r7
 801a846:	bd80      	pop	{r7, pc}

0801a848 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801a848:	b580      	push	{r7, lr}
 801a84a:	b082      	sub	sp, #8
 801a84c:	af00      	add	r7, sp, #0
 801a84e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 801a850:	687b      	ldr	r3, [r7, #4]
 801a852:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801a856:	4618      	mov	r0, r3
 801a858:	f7ef ff87 	bl	800a76a <USBD_LL_DevConnected>
}
 801a85c:	bf00      	nop
 801a85e:	3708      	adds	r7, #8
 801a860:	46bd      	mov	sp, r7
 801a862:	bd80      	pop	{r7, pc}

0801a864 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801a864:	b580      	push	{r7, lr}
 801a866:	b082      	sub	sp, #8
 801a868:	af00      	add	r7, sp, #0
 801a86a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 801a86c:	687b      	ldr	r3, [r7, #4]
 801a86e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801a872:	4618      	mov	r0, r3
 801a874:	f7ef ff84 	bl	800a780 <USBD_LL_DevDisconnected>
}
 801a878:	bf00      	nop
 801a87a:	3708      	adds	r7, #8
 801a87c:	46bd      	mov	sp, r7
 801a87e:	bd80      	pop	{r7, pc}

0801a880 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 801a880:	b580      	push	{r7, lr}
 801a882:	b082      	sub	sp, #8
 801a884:	af00      	add	r7, sp, #0
 801a886:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 801a888:	687b      	ldr	r3, [r7, #4]
 801a88a:	781b      	ldrb	r3, [r3, #0]
 801a88c:	2b00      	cmp	r3, #0
 801a88e:	d13c      	bne.n	801a90a <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 801a890:	4a20      	ldr	r2, [pc, #128]	; (801a914 <USBD_LL_Init+0x94>)
 801a892:	687b      	ldr	r3, [r7, #4]
 801a894:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 801a898:	687b      	ldr	r3, [r7, #4]
 801a89a:	4a1e      	ldr	r2, [pc, #120]	; (801a914 <USBD_LL_Init+0x94>)
 801a89c:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298
  
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 801a8a0:	4b1c      	ldr	r3, [pc, #112]	; (801a914 <USBD_LL_Init+0x94>)
 801a8a2:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 801a8a6:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 801a8a8:	4b1a      	ldr	r3, [pc, #104]	; (801a914 <USBD_LL_Init+0x94>)
 801a8aa:	2204      	movs	r2, #4
 801a8ac:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 801a8ae:	4b19      	ldr	r3, [pc, #100]	; (801a914 <USBD_LL_Init+0x94>)
 801a8b0:	2202      	movs	r2, #2
 801a8b2:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 801a8b4:	4b17      	ldr	r3, [pc, #92]	; (801a914 <USBD_LL_Init+0x94>)
 801a8b6:	2200      	movs	r2, #0
 801a8b8:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 801a8ba:	4b16      	ldr	r3, [pc, #88]	; (801a914 <USBD_LL_Init+0x94>)
 801a8bc:	2202      	movs	r2, #2
 801a8be:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 801a8c0:	4b14      	ldr	r3, [pc, #80]	; (801a914 <USBD_LL_Init+0x94>)
 801a8c2:	2201      	movs	r2, #1
 801a8c4:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 801a8c6:	4b13      	ldr	r3, [pc, #76]	; (801a914 <USBD_LL_Init+0x94>)
 801a8c8:	2200      	movs	r2, #0
 801a8ca:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 801a8cc:	4b11      	ldr	r3, [pc, #68]	; (801a914 <USBD_LL_Init+0x94>)
 801a8ce:	2200      	movs	r2, #0
 801a8d0:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 801a8d2:	4b10      	ldr	r3, [pc, #64]	; (801a914 <USBD_LL_Init+0x94>)
 801a8d4:	2201      	movs	r2, #1
 801a8d6:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 801a8d8:	4b0e      	ldr	r3, [pc, #56]	; (801a914 <USBD_LL_Init+0x94>)
 801a8da:	2200      	movs	r2, #0
 801a8dc:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 801a8de:	480d      	ldr	r0, [pc, #52]	; (801a914 <USBD_LL_Init+0x94>)
 801a8e0:	f7e9 faf1 	bl	8003ec6 <HAL_PCD_Init>
 801a8e4:	4603      	mov	r3, r0
 801a8e6:	2b00      	cmp	r3, #0
 801a8e8:	d001      	beq.n	801a8ee <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 801a8ea:	f7e7 f9d1 	bl	8001c90 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 801a8ee:	2180      	movs	r1, #128	; 0x80
 801a8f0:	4808      	ldr	r0, [pc, #32]	; (801a914 <USBD_LL_Init+0x94>)
 801a8f2:	f7ea fc56 	bl	80051a2 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 801a8f6:	2240      	movs	r2, #64	; 0x40
 801a8f8:	2100      	movs	r1, #0
 801a8fa:	4806      	ldr	r0, [pc, #24]	; (801a914 <USBD_LL_Init+0x94>)
 801a8fc:	f7ea fc0a 	bl	8005114 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 801a900:	2280      	movs	r2, #128	; 0x80
 801a902:	2101      	movs	r1, #1
 801a904:	4803      	ldr	r0, [pc, #12]	; (801a914 <USBD_LL_Init+0x94>)
 801a906:	f7ea fc05 	bl	8005114 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 801a90a:	2300      	movs	r3, #0
}
 801a90c:	4618      	mov	r0, r3
 801a90e:	3708      	adds	r7, #8
 801a910:	46bd      	mov	sp, r7
 801a912:	bd80      	pop	{r7, pc}
 801a914:	2000c000 	.word	0x2000c000

0801a918 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver. 
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 801a918:	b580      	push	{r7, lr}
 801a91a:	b084      	sub	sp, #16
 801a91c:	af00      	add	r7, sp, #0
 801a91e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801a920:	2300      	movs	r3, #0
 801a922:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801a924:	2300      	movs	r3, #0
 801a926:	73bb      	strb	r3, [r7, #14]
 
  hal_status = HAL_PCD_Start(pdev->pData);
 801a928:	687b      	ldr	r3, [r7, #4]
 801a92a:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 801a92e:	4618      	mov	r0, r3
 801a930:	f7e9 fbe6 	bl	8004100 <HAL_PCD_Start>
 801a934:	4603      	mov	r3, r0
 801a936:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);     
 801a938:	7bfb      	ldrb	r3, [r7, #15]
 801a93a:	4618      	mov	r0, r3
 801a93c:	f000 f92e 	bl	801ab9c <USBD_Get_USB_Status>
 801a940:	4603      	mov	r3, r0
 801a942:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 801a944:	7bbb      	ldrb	r3, [r7, #14]
}
 801a946:	4618      	mov	r0, r3
 801a948:	3710      	adds	r7, #16
 801a94a:	46bd      	mov	sp, r7
 801a94c:	bd80      	pop	{r7, pc}

0801a94e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 801a94e:	b580      	push	{r7, lr}
 801a950:	b084      	sub	sp, #16
 801a952:	af00      	add	r7, sp, #0
 801a954:	6078      	str	r0, [r7, #4]
 801a956:	4608      	mov	r0, r1
 801a958:	4611      	mov	r1, r2
 801a95a:	461a      	mov	r2, r3
 801a95c:	4603      	mov	r3, r0
 801a95e:	70fb      	strb	r3, [r7, #3]
 801a960:	460b      	mov	r3, r1
 801a962:	70bb      	strb	r3, [r7, #2]
 801a964:	4613      	mov	r3, r2
 801a966:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801a968:	2300      	movs	r3, #0
 801a96a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801a96c:	2300      	movs	r3, #0
 801a96e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 801a970:	687b      	ldr	r3, [r7, #4]
 801a972:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 801a976:	78bb      	ldrb	r3, [r7, #2]
 801a978:	883a      	ldrh	r2, [r7, #0]
 801a97a:	78f9      	ldrb	r1, [r7, #3]
 801a97c:	f7e9 ffbb 	bl	80048f6 <HAL_PCD_EP_Open>
 801a980:	4603      	mov	r3, r0
 801a982:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801a984:	7bfb      	ldrb	r3, [r7, #15]
 801a986:	4618      	mov	r0, r3
 801a988:	f000 f908 	bl	801ab9c <USBD_Get_USB_Status>
 801a98c:	4603      	mov	r3, r0
 801a98e:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 801a990:	7bbb      	ldrb	r3, [r7, #14]
}
 801a992:	4618      	mov	r0, r3
 801a994:	3710      	adds	r7, #16
 801a996:	46bd      	mov	sp, r7
 801a998:	bd80      	pop	{r7, pc}

0801a99a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801a99a:	b580      	push	{r7, lr}
 801a99c:	b084      	sub	sp, #16
 801a99e:	af00      	add	r7, sp, #0
 801a9a0:	6078      	str	r0, [r7, #4]
 801a9a2:	460b      	mov	r3, r1
 801a9a4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801a9a6:	2300      	movs	r3, #0
 801a9a8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801a9aa:	2300      	movs	r3, #0
 801a9ac:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 801a9ae:	687b      	ldr	r3, [r7, #4]
 801a9b0:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 801a9b4:	78fa      	ldrb	r2, [r7, #3]
 801a9b6:	4611      	mov	r1, r2
 801a9b8:	4618      	mov	r0, r3
 801a9ba:	f7ea f804 	bl	80049c6 <HAL_PCD_EP_Close>
 801a9be:	4603      	mov	r3, r0
 801a9c0:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);    
 801a9c2:	7bfb      	ldrb	r3, [r7, #15]
 801a9c4:	4618      	mov	r0, r3
 801a9c6:	f000 f8e9 	bl	801ab9c <USBD_Get_USB_Status>
 801a9ca:	4603      	mov	r3, r0
 801a9cc:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;  
 801a9ce:	7bbb      	ldrb	r3, [r7, #14]
}
 801a9d0:	4618      	mov	r0, r3
 801a9d2:	3710      	adds	r7, #16
 801a9d4:	46bd      	mov	sp, r7
 801a9d6:	bd80      	pop	{r7, pc}

0801a9d8 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801a9d8:	b580      	push	{r7, lr}
 801a9da:	b084      	sub	sp, #16
 801a9dc:	af00      	add	r7, sp, #0
 801a9de:	6078      	str	r0, [r7, #4]
 801a9e0:	460b      	mov	r3, r1
 801a9e2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801a9e4:	2300      	movs	r3, #0
 801a9e6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801a9e8:	2300      	movs	r3, #0
 801a9ea:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 801a9ec:	687b      	ldr	r3, [r7, #4]
 801a9ee:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 801a9f2:	78fa      	ldrb	r2, [r7, #3]
 801a9f4:	4611      	mov	r1, r2
 801a9f6:	4618      	mov	r0, r3
 801a9f8:	f7ea f8dc 	bl	8004bb4 <HAL_PCD_EP_SetStall>
 801a9fc:	4603      	mov	r3, r0
 801a9fe:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801aa00:	7bfb      	ldrb	r3, [r7, #15]
 801aa02:	4618      	mov	r0, r3
 801aa04:	f000 f8ca 	bl	801ab9c <USBD_Get_USB_Status>
 801aa08:	4603      	mov	r3, r0
 801aa0a:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;  
 801aa0c:	7bbb      	ldrb	r3, [r7, #14]
}
 801aa0e:	4618      	mov	r0, r3
 801aa10:	3710      	adds	r7, #16
 801aa12:	46bd      	mov	sp, r7
 801aa14:	bd80      	pop	{r7, pc}

0801aa16 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801aa16:	b580      	push	{r7, lr}
 801aa18:	b084      	sub	sp, #16
 801aa1a:	af00      	add	r7, sp, #0
 801aa1c:	6078      	str	r0, [r7, #4]
 801aa1e:	460b      	mov	r3, r1
 801aa20:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801aa22:	2300      	movs	r3, #0
 801aa24:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801aa26:	2300      	movs	r3, #0
 801aa28:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 801aa2a:	687b      	ldr	r3, [r7, #4]
 801aa2c:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 801aa30:	78fa      	ldrb	r2, [r7, #3]
 801aa32:	4611      	mov	r1, r2
 801aa34:	4618      	mov	r0, r3
 801aa36:	f7ea f921 	bl	8004c7c <HAL_PCD_EP_ClrStall>
 801aa3a:	4603      	mov	r3, r0
 801aa3c:	73fb      	strb	r3, [r7, #15]
    
  usb_status =  USBD_Get_USB_Status(hal_status);  
 801aa3e:	7bfb      	ldrb	r3, [r7, #15]
 801aa40:	4618      	mov	r0, r3
 801aa42:	f000 f8ab 	bl	801ab9c <USBD_Get_USB_Status>
 801aa46:	4603      	mov	r3, r0
 801aa48:	73bb      	strb	r3, [r7, #14]
  
  return usb_status; 
 801aa4a:	7bbb      	ldrb	r3, [r7, #14]
}
 801aa4c:	4618      	mov	r0, r3
 801aa4e:	3710      	adds	r7, #16
 801aa50:	46bd      	mov	sp, r7
 801aa52:	bd80      	pop	{r7, pc}

0801aa54 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801aa54:	b480      	push	{r7}
 801aa56:	b085      	sub	sp, #20
 801aa58:	af00      	add	r7, sp, #0
 801aa5a:	6078      	str	r0, [r7, #4]
 801aa5c:	460b      	mov	r3, r1
 801aa5e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 801aa60:	687b      	ldr	r3, [r7, #4]
 801aa62:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 801aa66:	60fb      	str	r3, [r7, #12]
  
  if((ep_addr & 0x80) == 0x80)
 801aa68:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801aa6c:	2b00      	cmp	r3, #0
 801aa6e:	da0b      	bge.n	801aa88 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 801aa70:	78fb      	ldrb	r3, [r7, #3]
 801aa72:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 801aa76:	68f9      	ldr	r1, [r7, #12]
 801aa78:	4613      	mov	r3, r2
 801aa7a:	00db      	lsls	r3, r3, #3
 801aa7c:	1a9b      	subs	r3, r3, r2
 801aa7e:	009b      	lsls	r3, r3, #2
 801aa80:	440b      	add	r3, r1
 801aa82:	333e      	adds	r3, #62	; 0x3e
 801aa84:	781b      	ldrb	r3, [r3, #0]
 801aa86:	e00b      	b.n	801aaa0 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 801aa88:	78fb      	ldrb	r3, [r7, #3]
 801aa8a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 801aa8e:	68f9      	ldr	r1, [r7, #12]
 801aa90:	4613      	mov	r3, r2
 801aa92:	00db      	lsls	r3, r3, #3
 801aa94:	1a9b      	subs	r3, r3, r2
 801aa96:	009b      	lsls	r3, r3, #2
 801aa98:	440b      	add	r3, r1
 801aa9a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 801aa9e:	781b      	ldrb	r3, [r3, #0]
  }
}
 801aaa0:	4618      	mov	r0, r3
 801aaa2:	3714      	adds	r7, #20
 801aaa4:	46bd      	mov	sp, r7
 801aaa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801aaaa:	4770      	bx	lr

0801aaac <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 801aaac:	b580      	push	{r7, lr}
 801aaae:	b084      	sub	sp, #16
 801aab0:	af00      	add	r7, sp, #0
 801aab2:	6078      	str	r0, [r7, #4]
 801aab4:	460b      	mov	r3, r1
 801aab6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801aab8:	2300      	movs	r3, #0
 801aaba:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801aabc:	2300      	movs	r3, #0
 801aabe:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 801aac0:	687b      	ldr	r3, [r7, #4]
 801aac2:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 801aac6:	78fa      	ldrb	r2, [r7, #3]
 801aac8:	4611      	mov	r1, r2
 801aaca:	4618      	mov	r0, r3
 801aacc:	f7e9 feee 	bl	80048ac <HAL_PCD_SetAddress>
 801aad0:	4603      	mov	r3, r0
 801aad2:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);
 801aad4:	7bfb      	ldrb	r3, [r7, #15]
 801aad6:	4618      	mov	r0, r3
 801aad8:	f000 f860 	bl	801ab9c <USBD_Get_USB_Status>
 801aadc:	4603      	mov	r3, r0
 801aade:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;  
 801aae0:	7bbb      	ldrb	r3, [r7, #14]
}
 801aae2:	4618      	mov	r0, r3
 801aae4:	3710      	adds	r7, #16
 801aae6:	46bd      	mov	sp, r7
 801aae8:	bd80      	pop	{r7, pc}

0801aaea <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size    
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 801aaea:	b580      	push	{r7, lr}
 801aaec:	b086      	sub	sp, #24
 801aaee:	af00      	add	r7, sp, #0
 801aaf0:	60f8      	str	r0, [r7, #12]
 801aaf2:	607a      	str	r2, [r7, #4]
 801aaf4:	461a      	mov	r2, r3
 801aaf6:	460b      	mov	r3, r1
 801aaf8:	72fb      	strb	r3, [r7, #11]
 801aafa:	4613      	mov	r3, r2
 801aafc:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801aafe:	2300      	movs	r3, #0
 801ab00:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801ab02:	2300      	movs	r3, #0
 801ab04:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 801ab06:	68fb      	ldr	r3, [r7, #12]
 801ab08:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 801ab0c:	893b      	ldrh	r3, [r7, #8]
 801ab0e:	7af9      	ldrb	r1, [r7, #11]
 801ab10:	687a      	ldr	r2, [r7, #4]
 801ab12:	f7ea f805 	bl	8004b20 <HAL_PCD_EP_Transmit>
 801ab16:	4603      	mov	r3, r0
 801ab18:	75fb      	strb	r3, [r7, #23]
  
  usb_status =  USBD_Get_USB_Status(hal_status); 
 801ab1a:	7dfb      	ldrb	r3, [r7, #23]
 801ab1c:	4618      	mov	r0, r3
 801ab1e:	f000 f83d 	bl	801ab9c <USBD_Get_USB_Status>
 801ab22:	4603      	mov	r3, r0
 801ab24:	75bb      	strb	r3, [r7, #22]
  
  return usb_status;    
 801ab26:	7dbb      	ldrb	r3, [r7, #22]
}
 801ab28:	4618      	mov	r0, r3
 801ab2a:	3718      	adds	r7, #24
 801ab2c:	46bd      	mov	sp, r7
 801ab2e:	bd80      	pop	{r7, pc}

0801ab30 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 801ab30:	b580      	push	{r7, lr}
 801ab32:	b086      	sub	sp, #24
 801ab34:	af00      	add	r7, sp, #0
 801ab36:	60f8      	str	r0, [r7, #12]
 801ab38:	607a      	str	r2, [r7, #4]
 801ab3a:	461a      	mov	r2, r3
 801ab3c:	460b      	mov	r3, r1
 801ab3e:	72fb      	strb	r3, [r7, #11]
 801ab40:	4613      	mov	r3, r2
 801ab42:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801ab44:	2300      	movs	r3, #0
 801ab46:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801ab48:	2300      	movs	r3, #0
 801ab4a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 801ab4c:	68fb      	ldr	r3, [r7, #12]
 801ab4e:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 801ab52:	893b      	ldrh	r3, [r7, #8]
 801ab54:	7af9      	ldrb	r1, [r7, #11]
 801ab56:	687a      	ldr	r2, [r7, #4]
 801ab58:	f7e9 ff7f 	bl	8004a5a <HAL_PCD_EP_Receive>
 801ab5c:	4603      	mov	r3, r0
 801ab5e:	75fb      	strb	r3, [r7, #23]
  
  usb_status =  USBD_Get_USB_Status(hal_status);   
 801ab60:	7dfb      	ldrb	r3, [r7, #23]
 801ab62:	4618      	mov	r0, r3
 801ab64:	f000 f81a 	bl	801ab9c <USBD_Get_USB_Status>
 801ab68:	4603      	mov	r3, r0
 801ab6a:	75bb      	strb	r3, [r7, #22]
  
  return usb_status; 
 801ab6c:	7dbb      	ldrb	r3, [r7, #22]
}
 801ab6e:	4618      	mov	r0, r3
 801ab70:	3718      	adds	r7, #24
 801ab72:	46bd      	mov	sp, r7
 801ab74:	bd80      	pop	{r7, pc}

0801ab76 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801ab76:	b580      	push	{r7, lr}
 801ab78:	b082      	sub	sp, #8
 801ab7a:	af00      	add	r7, sp, #0
 801ab7c:	6078      	str	r0, [r7, #4]
 801ab7e:	460b      	mov	r3, r1
 801ab80:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 801ab82:	687b      	ldr	r3, [r7, #4]
 801ab84:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 801ab88:	78fa      	ldrb	r2, [r7, #3]
 801ab8a:	4611      	mov	r1, r2
 801ab8c:	4618      	mov	r0, r3
 801ab8e:	f7e9 ffaf 	bl	8004af0 <HAL_PCD_EP_GetRxCount>
 801ab92:	4603      	mov	r3, r0
}
 801ab94:	4618      	mov	r0, r3
 801ab96:	3708      	adds	r7, #8
 801ab98:	46bd      	mov	sp, r7
 801ab9a:	bd80      	pop	{r7, pc}

0801ab9c <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 801ab9c:	b480      	push	{r7}
 801ab9e:	b085      	sub	sp, #20
 801aba0:	af00      	add	r7, sp, #0
 801aba2:	4603      	mov	r3, r0
 801aba4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801aba6:	2300      	movs	r3, #0
 801aba8:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 801abaa:	79fb      	ldrb	r3, [r7, #7]
 801abac:	2b03      	cmp	r3, #3
 801abae:	d817      	bhi.n	801abe0 <USBD_Get_USB_Status+0x44>
 801abb0:	a201      	add	r2, pc, #4	; (adr r2, 801abb8 <USBD_Get_USB_Status+0x1c>)
 801abb2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801abb6:	bf00      	nop
 801abb8:	0801abc9 	.word	0x0801abc9
 801abbc:	0801abcf 	.word	0x0801abcf
 801abc0:	0801abd5 	.word	0x0801abd5
 801abc4:	0801abdb 	.word	0x0801abdb
  {
    case HAL_OK :
      usb_status = USBD_OK;
 801abc8:	2300      	movs	r3, #0
 801abca:	73fb      	strb	r3, [r7, #15]
    break;
 801abcc:	e00b      	b.n	801abe6 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 801abce:	2302      	movs	r3, #2
 801abd0:	73fb      	strb	r3, [r7, #15]
    break;
 801abd2:	e008      	b.n	801abe6 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 801abd4:	2301      	movs	r3, #1
 801abd6:	73fb      	strb	r3, [r7, #15]
    break;
 801abd8:	e005      	b.n	801abe6 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 801abda:	2302      	movs	r3, #2
 801abdc:	73fb      	strb	r3, [r7, #15]
    break;
 801abde:	e002      	b.n	801abe6 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 801abe0:	2302      	movs	r3, #2
 801abe2:	73fb      	strb	r3, [r7, #15]
    break;
 801abe4:	bf00      	nop
  }
  return usb_status;
 801abe6:	7bfb      	ldrb	r3, [r7, #15]
}
 801abe8:	4618      	mov	r0, r3
 801abea:	3714      	adds	r7, #20
 801abec:	46bd      	mov	sp, r7
 801abee:	f85d 7b04 	ldr.w	r7, [sp], #4
 801abf2:	4770      	bx	lr

0801abf4 <__libc_init_array>:
 801abf4:	b570      	push	{r4, r5, r6, lr}
 801abf6:	4e0d      	ldr	r6, [pc, #52]	; (801ac2c <__libc_init_array+0x38>)
 801abf8:	4c0d      	ldr	r4, [pc, #52]	; (801ac30 <__libc_init_array+0x3c>)
 801abfa:	1ba4      	subs	r4, r4, r6
 801abfc:	10a4      	asrs	r4, r4, #2
 801abfe:	2500      	movs	r5, #0
 801ac00:	42a5      	cmp	r5, r4
 801ac02:	d109      	bne.n	801ac18 <__libc_init_array+0x24>
 801ac04:	4e0b      	ldr	r6, [pc, #44]	; (801ac34 <__libc_init_array+0x40>)
 801ac06:	4c0c      	ldr	r4, [pc, #48]	; (801ac38 <__libc_init_array+0x44>)
 801ac08:	f001 f8e8 	bl	801bddc <_init>
 801ac0c:	1ba4      	subs	r4, r4, r6
 801ac0e:	10a4      	asrs	r4, r4, #2
 801ac10:	2500      	movs	r5, #0
 801ac12:	42a5      	cmp	r5, r4
 801ac14:	d105      	bne.n	801ac22 <__libc_init_array+0x2e>
 801ac16:	bd70      	pop	{r4, r5, r6, pc}
 801ac18:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 801ac1c:	4798      	blx	r3
 801ac1e:	3501      	adds	r5, #1
 801ac20:	e7ee      	b.n	801ac00 <__libc_init_array+0xc>
 801ac22:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 801ac26:	4798      	blx	r3
 801ac28:	3501      	adds	r5, #1
 801ac2a:	e7f2      	b.n	801ac12 <__libc_init_array+0x1e>
 801ac2c:	0801e8bc 	.word	0x0801e8bc
 801ac30:	0801e8bc 	.word	0x0801e8bc
 801ac34:	0801e8bc 	.word	0x0801e8bc
 801ac38:	0801e8c0 	.word	0x0801e8c0

0801ac3c <malloc>:
 801ac3c:	4b02      	ldr	r3, [pc, #8]	; (801ac48 <malloc+0xc>)
 801ac3e:	4601      	mov	r1, r0
 801ac40:	6818      	ldr	r0, [r3, #0]
 801ac42:	f000 b87b 	b.w	801ad3c <_malloc_r>
 801ac46:	bf00      	nop
 801ac48:	20000188 	.word	0x20000188

0801ac4c <free>:
 801ac4c:	4b02      	ldr	r3, [pc, #8]	; (801ac58 <free+0xc>)
 801ac4e:	4601      	mov	r1, r0
 801ac50:	6818      	ldr	r0, [r3, #0]
 801ac52:	f000 b825 	b.w	801aca0 <_free_r>
 801ac56:	bf00      	nop
 801ac58:	20000188 	.word	0x20000188

0801ac5c <memcmp>:
 801ac5c:	b530      	push	{r4, r5, lr}
 801ac5e:	2400      	movs	r4, #0
 801ac60:	42a2      	cmp	r2, r4
 801ac62:	d101      	bne.n	801ac68 <memcmp+0xc>
 801ac64:	2000      	movs	r0, #0
 801ac66:	e007      	b.n	801ac78 <memcmp+0x1c>
 801ac68:	5d03      	ldrb	r3, [r0, r4]
 801ac6a:	3401      	adds	r4, #1
 801ac6c:	190d      	adds	r5, r1, r4
 801ac6e:	f815 5c01 	ldrb.w	r5, [r5, #-1]
 801ac72:	42ab      	cmp	r3, r5
 801ac74:	d0f4      	beq.n	801ac60 <memcmp+0x4>
 801ac76:	1b58      	subs	r0, r3, r5
 801ac78:	bd30      	pop	{r4, r5, pc}

0801ac7a <memcpy>:
 801ac7a:	b510      	push	{r4, lr}
 801ac7c:	1e43      	subs	r3, r0, #1
 801ac7e:	440a      	add	r2, r1
 801ac80:	4291      	cmp	r1, r2
 801ac82:	d100      	bne.n	801ac86 <memcpy+0xc>
 801ac84:	bd10      	pop	{r4, pc}
 801ac86:	f811 4b01 	ldrb.w	r4, [r1], #1
 801ac8a:	f803 4f01 	strb.w	r4, [r3, #1]!
 801ac8e:	e7f7      	b.n	801ac80 <memcpy+0x6>

0801ac90 <memset>:
 801ac90:	4402      	add	r2, r0
 801ac92:	4603      	mov	r3, r0
 801ac94:	4293      	cmp	r3, r2
 801ac96:	d100      	bne.n	801ac9a <memset+0xa>
 801ac98:	4770      	bx	lr
 801ac9a:	f803 1b01 	strb.w	r1, [r3], #1
 801ac9e:	e7f9      	b.n	801ac94 <memset+0x4>

0801aca0 <_free_r>:
 801aca0:	b538      	push	{r3, r4, r5, lr}
 801aca2:	4605      	mov	r5, r0
 801aca4:	2900      	cmp	r1, #0
 801aca6:	d045      	beq.n	801ad34 <_free_r+0x94>
 801aca8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801acac:	1f0c      	subs	r4, r1, #4
 801acae:	2b00      	cmp	r3, #0
 801acb0:	bfb8      	it	lt
 801acb2:	18e4      	addlt	r4, r4, r3
 801acb4:	f000 f9ae 	bl	801b014 <__malloc_lock>
 801acb8:	4a1f      	ldr	r2, [pc, #124]	; (801ad38 <_free_r+0x98>)
 801acba:	6813      	ldr	r3, [r2, #0]
 801acbc:	4610      	mov	r0, r2
 801acbe:	b933      	cbnz	r3, 801acce <_free_r+0x2e>
 801acc0:	6063      	str	r3, [r4, #4]
 801acc2:	6014      	str	r4, [r2, #0]
 801acc4:	4628      	mov	r0, r5
 801acc6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801acca:	f000 b9a4 	b.w	801b016 <__malloc_unlock>
 801acce:	42a3      	cmp	r3, r4
 801acd0:	d90c      	bls.n	801acec <_free_r+0x4c>
 801acd2:	6821      	ldr	r1, [r4, #0]
 801acd4:	1862      	adds	r2, r4, r1
 801acd6:	4293      	cmp	r3, r2
 801acd8:	bf04      	itt	eq
 801acda:	681a      	ldreq	r2, [r3, #0]
 801acdc:	685b      	ldreq	r3, [r3, #4]
 801acde:	6063      	str	r3, [r4, #4]
 801ace0:	bf04      	itt	eq
 801ace2:	1852      	addeq	r2, r2, r1
 801ace4:	6022      	streq	r2, [r4, #0]
 801ace6:	6004      	str	r4, [r0, #0]
 801ace8:	e7ec      	b.n	801acc4 <_free_r+0x24>
 801acea:	4613      	mov	r3, r2
 801acec:	685a      	ldr	r2, [r3, #4]
 801acee:	b10a      	cbz	r2, 801acf4 <_free_r+0x54>
 801acf0:	42a2      	cmp	r2, r4
 801acf2:	d9fa      	bls.n	801acea <_free_r+0x4a>
 801acf4:	6819      	ldr	r1, [r3, #0]
 801acf6:	1858      	adds	r0, r3, r1
 801acf8:	42a0      	cmp	r0, r4
 801acfa:	d10b      	bne.n	801ad14 <_free_r+0x74>
 801acfc:	6820      	ldr	r0, [r4, #0]
 801acfe:	4401      	add	r1, r0
 801ad00:	1858      	adds	r0, r3, r1
 801ad02:	4282      	cmp	r2, r0
 801ad04:	6019      	str	r1, [r3, #0]
 801ad06:	d1dd      	bne.n	801acc4 <_free_r+0x24>
 801ad08:	6810      	ldr	r0, [r2, #0]
 801ad0a:	6852      	ldr	r2, [r2, #4]
 801ad0c:	605a      	str	r2, [r3, #4]
 801ad0e:	4401      	add	r1, r0
 801ad10:	6019      	str	r1, [r3, #0]
 801ad12:	e7d7      	b.n	801acc4 <_free_r+0x24>
 801ad14:	d902      	bls.n	801ad1c <_free_r+0x7c>
 801ad16:	230c      	movs	r3, #12
 801ad18:	602b      	str	r3, [r5, #0]
 801ad1a:	e7d3      	b.n	801acc4 <_free_r+0x24>
 801ad1c:	6820      	ldr	r0, [r4, #0]
 801ad1e:	1821      	adds	r1, r4, r0
 801ad20:	428a      	cmp	r2, r1
 801ad22:	bf04      	itt	eq
 801ad24:	6811      	ldreq	r1, [r2, #0]
 801ad26:	6852      	ldreq	r2, [r2, #4]
 801ad28:	6062      	str	r2, [r4, #4]
 801ad2a:	bf04      	itt	eq
 801ad2c:	1809      	addeq	r1, r1, r0
 801ad2e:	6021      	streq	r1, [r4, #0]
 801ad30:	605c      	str	r4, [r3, #4]
 801ad32:	e7c7      	b.n	801acc4 <_free_r+0x24>
 801ad34:	bd38      	pop	{r3, r4, r5, pc}
 801ad36:	bf00      	nop
 801ad38:	20004344 	.word	0x20004344

0801ad3c <_malloc_r>:
 801ad3c:	b570      	push	{r4, r5, r6, lr}
 801ad3e:	1ccd      	adds	r5, r1, #3
 801ad40:	f025 0503 	bic.w	r5, r5, #3
 801ad44:	3508      	adds	r5, #8
 801ad46:	2d0c      	cmp	r5, #12
 801ad48:	bf38      	it	cc
 801ad4a:	250c      	movcc	r5, #12
 801ad4c:	2d00      	cmp	r5, #0
 801ad4e:	4606      	mov	r6, r0
 801ad50:	db01      	blt.n	801ad56 <_malloc_r+0x1a>
 801ad52:	42a9      	cmp	r1, r5
 801ad54:	d903      	bls.n	801ad5e <_malloc_r+0x22>
 801ad56:	230c      	movs	r3, #12
 801ad58:	6033      	str	r3, [r6, #0]
 801ad5a:	2000      	movs	r0, #0
 801ad5c:	bd70      	pop	{r4, r5, r6, pc}
 801ad5e:	f000 f959 	bl	801b014 <__malloc_lock>
 801ad62:	4a21      	ldr	r2, [pc, #132]	; (801ade8 <_malloc_r+0xac>)
 801ad64:	6814      	ldr	r4, [r2, #0]
 801ad66:	4621      	mov	r1, r4
 801ad68:	b991      	cbnz	r1, 801ad90 <_malloc_r+0x54>
 801ad6a:	4c20      	ldr	r4, [pc, #128]	; (801adec <_malloc_r+0xb0>)
 801ad6c:	6823      	ldr	r3, [r4, #0]
 801ad6e:	b91b      	cbnz	r3, 801ad78 <_malloc_r+0x3c>
 801ad70:	4630      	mov	r0, r6
 801ad72:	f000 f855 	bl	801ae20 <_sbrk_r>
 801ad76:	6020      	str	r0, [r4, #0]
 801ad78:	4629      	mov	r1, r5
 801ad7a:	4630      	mov	r0, r6
 801ad7c:	f000 f850 	bl	801ae20 <_sbrk_r>
 801ad80:	1c43      	adds	r3, r0, #1
 801ad82:	d124      	bne.n	801adce <_malloc_r+0x92>
 801ad84:	230c      	movs	r3, #12
 801ad86:	6033      	str	r3, [r6, #0]
 801ad88:	4630      	mov	r0, r6
 801ad8a:	f000 f944 	bl	801b016 <__malloc_unlock>
 801ad8e:	e7e4      	b.n	801ad5a <_malloc_r+0x1e>
 801ad90:	680b      	ldr	r3, [r1, #0]
 801ad92:	1b5b      	subs	r3, r3, r5
 801ad94:	d418      	bmi.n	801adc8 <_malloc_r+0x8c>
 801ad96:	2b0b      	cmp	r3, #11
 801ad98:	d90f      	bls.n	801adba <_malloc_r+0x7e>
 801ad9a:	600b      	str	r3, [r1, #0]
 801ad9c:	50cd      	str	r5, [r1, r3]
 801ad9e:	18cc      	adds	r4, r1, r3
 801ada0:	4630      	mov	r0, r6
 801ada2:	f000 f938 	bl	801b016 <__malloc_unlock>
 801ada6:	f104 000b 	add.w	r0, r4, #11
 801adaa:	1d23      	adds	r3, r4, #4
 801adac:	f020 0007 	bic.w	r0, r0, #7
 801adb0:	1ac3      	subs	r3, r0, r3
 801adb2:	d0d3      	beq.n	801ad5c <_malloc_r+0x20>
 801adb4:	425a      	negs	r2, r3
 801adb6:	50e2      	str	r2, [r4, r3]
 801adb8:	e7d0      	b.n	801ad5c <_malloc_r+0x20>
 801adba:	428c      	cmp	r4, r1
 801adbc:	684b      	ldr	r3, [r1, #4]
 801adbe:	bf16      	itet	ne
 801adc0:	6063      	strne	r3, [r4, #4]
 801adc2:	6013      	streq	r3, [r2, #0]
 801adc4:	460c      	movne	r4, r1
 801adc6:	e7eb      	b.n	801ada0 <_malloc_r+0x64>
 801adc8:	460c      	mov	r4, r1
 801adca:	6849      	ldr	r1, [r1, #4]
 801adcc:	e7cc      	b.n	801ad68 <_malloc_r+0x2c>
 801adce:	1cc4      	adds	r4, r0, #3
 801add0:	f024 0403 	bic.w	r4, r4, #3
 801add4:	42a0      	cmp	r0, r4
 801add6:	d005      	beq.n	801ade4 <_malloc_r+0xa8>
 801add8:	1a21      	subs	r1, r4, r0
 801adda:	4630      	mov	r0, r6
 801addc:	f000 f820 	bl	801ae20 <_sbrk_r>
 801ade0:	3001      	adds	r0, #1
 801ade2:	d0cf      	beq.n	801ad84 <_malloc_r+0x48>
 801ade4:	6025      	str	r5, [r4, #0]
 801ade6:	e7db      	b.n	801ada0 <_malloc_r+0x64>
 801ade8:	20004344 	.word	0x20004344
 801adec:	20004348 	.word	0x20004348

0801adf0 <iprintf>:
 801adf0:	b40f      	push	{r0, r1, r2, r3}
 801adf2:	4b0a      	ldr	r3, [pc, #40]	; (801ae1c <iprintf+0x2c>)
 801adf4:	b513      	push	{r0, r1, r4, lr}
 801adf6:	681c      	ldr	r4, [r3, #0]
 801adf8:	b124      	cbz	r4, 801ae04 <iprintf+0x14>
 801adfa:	69a3      	ldr	r3, [r4, #24]
 801adfc:	b913      	cbnz	r3, 801ae04 <iprintf+0x14>
 801adfe:	4620      	mov	r0, r4
 801ae00:	f000 f87e 	bl	801af00 <__sinit>
 801ae04:	ab05      	add	r3, sp, #20
 801ae06:	9a04      	ldr	r2, [sp, #16]
 801ae08:	68a1      	ldr	r1, [r4, #8]
 801ae0a:	9301      	str	r3, [sp, #4]
 801ae0c:	4620      	mov	r0, r4
 801ae0e:	f000 fa7f 	bl	801b310 <_vfiprintf_r>
 801ae12:	b002      	add	sp, #8
 801ae14:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801ae18:	b004      	add	sp, #16
 801ae1a:	4770      	bx	lr
 801ae1c:	20000188 	.word	0x20000188

0801ae20 <_sbrk_r>:
 801ae20:	b538      	push	{r3, r4, r5, lr}
 801ae22:	4c06      	ldr	r4, [pc, #24]	; (801ae3c <_sbrk_r+0x1c>)
 801ae24:	2300      	movs	r3, #0
 801ae26:	4605      	mov	r5, r0
 801ae28:	4608      	mov	r0, r1
 801ae2a:	6023      	str	r3, [r4, #0]
 801ae2c:	f7e7 f89a 	bl	8001f64 <_sbrk>
 801ae30:	1c43      	adds	r3, r0, #1
 801ae32:	d102      	bne.n	801ae3a <_sbrk_r+0x1a>
 801ae34:	6823      	ldr	r3, [r4, #0]
 801ae36:	b103      	cbz	r3, 801ae3a <_sbrk_r+0x1a>
 801ae38:	602b      	str	r3, [r5, #0]
 801ae3a:	bd38      	pop	{r3, r4, r5, pc}
 801ae3c:	2000ab5c 	.word	0x2000ab5c

0801ae40 <siprintf>:
 801ae40:	b40e      	push	{r1, r2, r3}
 801ae42:	b500      	push	{lr}
 801ae44:	b09c      	sub	sp, #112	; 0x70
 801ae46:	ab1d      	add	r3, sp, #116	; 0x74
 801ae48:	9002      	str	r0, [sp, #8]
 801ae4a:	9006      	str	r0, [sp, #24]
 801ae4c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 801ae50:	4809      	ldr	r0, [pc, #36]	; (801ae78 <siprintf+0x38>)
 801ae52:	9107      	str	r1, [sp, #28]
 801ae54:	9104      	str	r1, [sp, #16]
 801ae56:	4909      	ldr	r1, [pc, #36]	; (801ae7c <siprintf+0x3c>)
 801ae58:	f853 2b04 	ldr.w	r2, [r3], #4
 801ae5c:	9105      	str	r1, [sp, #20]
 801ae5e:	6800      	ldr	r0, [r0, #0]
 801ae60:	9301      	str	r3, [sp, #4]
 801ae62:	a902      	add	r1, sp, #8
 801ae64:	f000 f932 	bl	801b0cc <_svfiprintf_r>
 801ae68:	9b02      	ldr	r3, [sp, #8]
 801ae6a:	2200      	movs	r2, #0
 801ae6c:	701a      	strb	r2, [r3, #0]
 801ae6e:	b01c      	add	sp, #112	; 0x70
 801ae70:	f85d eb04 	ldr.w	lr, [sp], #4
 801ae74:	b003      	add	sp, #12
 801ae76:	4770      	bx	lr
 801ae78:	20000188 	.word	0x20000188
 801ae7c:	ffff0208 	.word	0xffff0208

0801ae80 <std>:
 801ae80:	2300      	movs	r3, #0
 801ae82:	b510      	push	{r4, lr}
 801ae84:	4604      	mov	r4, r0
 801ae86:	e9c0 3300 	strd	r3, r3, [r0]
 801ae8a:	6083      	str	r3, [r0, #8]
 801ae8c:	8181      	strh	r1, [r0, #12]
 801ae8e:	6643      	str	r3, [r0, #100]	; 0x64
 801ae90:	81c2      	strh	r2, [r0, #14]
 801ae92:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801ae96:	6183      	str	r3, [r0, #24]
 801ae98:	4619      	mov	r1, r3
 801ae9a:	2208      	movs	r2, #8
 801ae9c:	305c      	adds	r0, #92	; 0x5c
 801ae9e:	f7ff fef7 	bl	801ac90 <memset>
 801aea2:	4b05      	ldr	r3, [pc, #20]	; (801aeb8 <std+0x38>)
 801aea4:	6263      	str	r3, [r4, #36]	; 0x24
 801aea6:	4b05      	ldr	r3, [pc, #20]	; (801aebc <std+0x3c>)
 801aea8:	62a3      	str	r3, [r4, #40]	; 0x28
 801aeaa:	4b05      	ldr	r3, [pc, #20]	; (801aec0 <std+0x40>)
 801aeac:	62e3      	str	r3, [r4, #44]	; 0x2c
 801aeae:	4b05      	ldr	r3, [pc, #20]	; (801aec4 <std+0x44>)
 801aeb0:	6224      	str	r4, [r4, #32]
 801aeb2:	6323      	str	r3, [r4, #48]	; 0x30
 801aeb4:	bd10      	pop	{r4, pc}
 801aeb6:	bf00      	nop
 801aeb8:	0801b84d 	.word	0x0801b84d
 801aebc:	0801b86f 	.word	0x0801b86f
 801aec0:	0801b8a7 	.word	0x0801b8a7
 801aec4:	0801b8cb 	.word	0x0801b8cb

0801aec8 <_cleanup_r>:
 801aec8:	4901      	ldr	r1, [pc, #4]	; (801aed0 <_cleanup_r+0x8>)
 801aeca:	f000 b885 	b.w	801afd8 <_fwalk_reent>
 801aece:	bf00      	nop
 801aed0:	0801bba5 	.word	0x0801bba5

0801aed4 <__sfmoreglue>:
 801aed4:	b570      	push	{r4, r5, r6, lr}
 801aed6:	1e4a      	subs	r2, r1, #1
 801aed8:	2568      	movs	r5, #104	; 0x68
 801aeda:	4355      	muls	r5, r2
 801aedc:	460e      	mov	r6, r1
 801aede:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801aee2:	f7ff ff2b 	bl	801ad3c <_malloc_r>
 801aee6:	4604      	mov	r4, r0
 801aee8:	b140      	cbz	r0, 801aefc <__sfmoreglue+0x28>
 801aeea:	2100      	movs	r1, #0
 801aeec:	e9c0 1600 	strd	r1, r6, [r0]
 801aef0:	300c      	adds	r0, #12
 801aef2:	60a0      	str	r0, [r4, #8]
 801aef4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 801aef8:	f7ff feca 	bl	801ac90 <memset>
 801aefc:	4620      	mov	r0, r4
 801aefe:	bd70      	pop	{r4, r5, r6, pc}

0801af00 <__sinit>:
 801af00:	6983      	ldr	r3, [r0, #24]
 801af02:	b510      	push	{r4, lr}
 801af04:	4604      	mov	r4, r0
 801af06:	bb33      	cbnz	r3, 801af56 <__sinit+0x56>
 801af08:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 801af0c:	6503      	str	r3, [r0, #80]	; 0x50
 801af0e:	4b12      	ldr	r3, [pc, #72]	; (801af58 <__sinit+0x58>)
 801af10:	4a12      	ldr	r2, [pc, #72]	; (801af5c <__sinit+0x5c>)
 801af12:	681b      	ldr	r3, [r3, #0]
 801af14:	6282      	str	r2, [r0, #40]	; 0x28
 801af16:	4298      	cmp	r0, r3
 801af18:	bf04      	itt	eq
 801af1a:	2301      	moveq	r3, #1
 801af1c:	6183      	streq	r3, [r0, #24]
 801af1e:	f000 f81f 	bl	801af60 <__sfp>
 801af22:	6060      	str	r0, [r4, #4]
 801af24:	4620      	mov	r0, r4
 801af26:	f000 f81b 	bl	801af60 <__sfp>
 801af2a:	60a0      	str	r0, [r4, #8]
 801af2c:	4620      	mov	r0, r4
 801af2e:	f000 f817 	bl	801af60 <__sfp>
 801af32:	2200      	movs	r2, #0
 801af34:	60e0      	str	r0, [r4, #12]
 801af36:	2104      	movs	r1, #4
 801af38:	6860      	ldr	r0, [r4, #4]
 801af3a:	f7ff ffa1 	bl	801ae80 <std>
 801af3e:	2201      	movs	r2, #1
 801af40:	2109      	movs	r1, #9
 801af42:	68a0      	ldr	r0, [r4, #8]
 801af44:	f7ff ff9c 	bl	801ae80 <std>
 801af48:	2202      	movs	r2, #2
 801af4a:	2112      	movs	r1, #18
 801af4c:	68e0      	ldr	r0, [r4, #12]
 801af4e:	f7ff ff97 	bl	801ae80 <std>
 801af52:	2301      	movs	r3, #1
 801af54:	61a3      	str	r3, [r4, #24]
 801af56:	bd10      	pop	{r4, pc}
 801af58:	0801e81c 	.word	0x0801e81c
 801af5c:	0801aec9 	.word	0x0801aec9

0801af60 <__sfp>:
 801af60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801af62:	4b1b      	ldr	r3, [pc, #108]	; (801afd0 <__sfp+0x70>)
 801af64:	681e      	ldr	r6, [r3, #0]
 801af66:	69b3      	ldr	r3, [r6, #24]
 801af68:	4607      	mov	r7, r0
 801af6a:	b913      	cbnz	r3, 801af72 <__sfp+0x12>
 801af6c:	4630      	mov	r0, r6
 801af6e:	f7ff ffc7 	bl	801af00 <__sinit>
 801af72:	3648      	adds	r6, #72	; 0x48
 801af74:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 801af78:	3b01      	subs	r3, #1
 801af7a:	d503      	bpl.n	801af84 <__sfp+0x24>
 801af7c:	6833      	ldr	r3, [r6, #0]
 801af7e:	b133      	cbz	r3, 801af8e <__sfp+0x2e>
 801af80:	6836      	ldr	r6, [r6, #0]
 801af82:	e7f7      	b.n	801af74 <__sfp+0x14>
 801af84:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 801af88:	b16d      	cbz	r5, 801afa6 <__sfp+0x46>
 801af8a:	3468      	adds	r4, #104	; 0x68
 801af8c:	e7f4      	b.n	801af78 <__sfp+0x18>
 801af8e:	2104      	movs	r1, #4
 801af90:	4638      	mov	r0, r7
 801af92:	f7ff ff9f 	bl	801aed4 <__sfmoreglue>
 801af96:	6030      	str	r0, [r6, #0]
 801af98:	2800      	cmp	r0, #0
 801af9a:	d1f1      	bne.n	801af80 <__sfp+0x20>
 801af9c:	230c      	movs	r3, #12
 801af9e:	603b      	str	r3, [r7, #0]
 801afa0:	4604      	mov	r4, r0
 801afa2:	4620      	mov	r0, r4
 801afa4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801afa6:	4b0b      	ldr	r3, [pc, #44]	; (801afd4 <__sfp+0x74>)
 801afa8:	6665      	str	r5, [r4, #100]	; 0x64
 801afaa:	e9c4 5500 	strd	r5, r5, [r4]
 801afae:	60a5      	str	r5, [r4, #8]
 801afb0:	e9c4 3503 	strd	r3, r5, [r4, #12]
 801afb4:	e9c4 5505 	strd	r5, r5, [r4, #20]
 801afb8:	2208      	movs	r2, #8
 801afba:	4629      	mov	r1, r5
 801afbc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 801afc0:	f7ff fe66 	bl	801ac90 <memset>
 801afc4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 801afc8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 801afcc:	e7e9      	b.n	801afa2 <__sfp+0x42>
 801afce:	bf00      	nop
 801afd0:	0801e81c 	.word	0x0801e81c
 801afd4:	ffff0001 	.word	0xffff0001

0801afd8 <_fwalk_reent>:
 801afd8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801afdc:	4680      	mov	r8, r0
 801afde:	4689      	mov	r9, r1
 801afe0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 801afe4:	2600      	movs	r6, #0
 801afe6:	b914      	cbnz	r4, 801afee <_fwalk_reent+0x16>
 801afe8:	4630      	mov	r0, r6
 801afea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801afee:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 801aff2:	3f01      	subs	r7, #1
 801aff4:	d501      	bpl.n	801affa <_fwalk_reent+0x22>
 801aff6:	6824      	ldr	r4, [r4, #0]
 801aff8:	e7f5      	b.n	801afe6 <_fwalk_reent+0xe>
 801affa:	89ab      	ldrh	r3, [r5, #12]
 801affc:	2b01      	cmp	r3, #1
 801affe:	d907      	bls.n	801b010 <_fwalk_reent+0x38>
 801b000:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801b004:	3301      	adds	r3, #1
 801b006:	d003      	beq.n	801b010 <_fwalk_reent+0x38>
 801b008:	4629      	mov	r1, r5
 801b00a:	4640      	mov	r0, r8
 801b00c:	47c8      	blx	r9
 801b00e:	4306      	orrs	r6, r0
 801b010:	3568      	adds	r5, #104	; 0x68
 801b012:	e7ee      	b.n	801aff2 <_fwalk_reent+0x1a>

0801b014 <__malloc_lock>:
 801b014:	4770      	bx	lr

0801b016 <__malloc_unlock>:
 801b016:	4770      	bx	lr

0801b018 <__ssputs_r>:
 801b018:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801b01c:	688e      	ldr	r6, [r1, #8]
 801b01e:	429e      	cmp	r6, r3
 801b020:	4682      	mov	sl, r0
 801b022:	460c      	mov	r4, r1
 801b024:	4690      	mov	r8, r2
 801b026:	4699      	mov	r9, r3
 801b028:	d837      	bhi.n	801b09a <__ssputs_r+0x82>
 801b02a:	898a      	ldrh	r2, [r1, #12]
 801b02c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 801b030:	d031      	beq.n	801b096 <__ssputs_r+0x7e>
 801b032:	6825      	ldr	r5, [r4, #0]
 801b034:	6909      	ldr	r1, [r1, #16]
 801b036:	1a6f      	subs	r7, r5, r1
 801b038:	6965      	ldr	r5, [r4, #20]
 801b03a:	2302      	movs	r3, #2
 801b03c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801b040:	fb95 f5f3 	sdiv	r5, r5, r3
 801b044:	f109 0301 	add.w	r3, r9, #1
 801b048:	443b      	add	r3, r7
 801b04a:	429d      	cmp	r5, r3
 801b04c:	bf38      	it	cc
 801b04e:	461d      	movcc	r5, r3
 801b050:	0553      	lsls	r3, r2, #21
 801b052:	d530      	bpl.n	801b0b6 <__ssputs_r+0x9e>
 801b054:	4629      	mov	r1, r5
 801b056:	f7ff fe71 	bl	801ad3c <_malloc_r>
 801b05a:	4606      	mov	r6, r0
 801b05c:	b950      	cbnz	r0, 801b074 <__ssputs_r+0x5c>
 801b05e:	230c      	movs	r3, #12
 801b060:	f8ca 3000 	str.w	r3, [sl]
 801b064:	89a3      	ldrh	r3, [r4, #12]
 801b066:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801b06a:	81a3      	strh	r3, [r4, #12]
 801b06c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801b070:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801b074:	463a      	mov	r2, r7
 801b076:	6921      	ldr	r1, [r4, #16]
 801b078:	f7ff fdff 	bl	801ac7a <memcpy>
 801b07c:	89a3      	ldrh	r3, [r4, #12]
 801b07e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 801b082:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801b086:	81a3      	strh	r3, [r4, #12]
 801b088:	6126      	str	r6, [r4, #16]
 801b08a:	6165      	str	r5, [r4, #20]
 801b08c:	443e      	add	r6, r7
 801b08e:	1bed      	subs	r5, r5, r7
 801b090:	6026      	str	r6, [r4, #0]
 801b092:	60a5      	str	r5, [r4, #8]
 801b094:	464e      	mov	r6, r9
 801b096:	454e      	cmp	r6, r9
 801b098:	d900      	bls.n	801b09c <__ssputs_r+0x84>
 801b09a:	464e      	mov	r6, r9
 801b09c:	4632      	mov	r2, r6
 801b09e:	4641      	mov	r1, r8
 801b0a0:	6820      	ldr	r0, [r4, #0]
 801b0a2:	f000 fe1f 	bl	801bce4 <memmove>
 801b0a6:	68a3      	ldr	r3, [r4, #8]
 801b0a8:	1b9b      	subs	r3, r3, r6
 801b0aa:	60a3      	str	r3, [r4, #8]
 801b0ac:	6823      	ldr	r3, [r4, #0]
 801b0ae:	441e      	add	r6, r3
 801b0b0:	6026      	str	r6, [r4, #0]
 801b0b2:	2000      	movs	r0, #0
 801b0b4:	e7dc      	b.n	801b070 <__ssputs_r+0x58>
 801b0b6:	462a      	mov	r2, r5
 801b0b8:	f000 fe2d 	bl	801bd16 <_realloc_r>
 801b0bc:	4606      	mov	r6, r0
 801b0be:	2800      	cmp	r0, #0
 801b0c0:	d1e2      	bne.n	801b088 <__ssputs_r+0x70>
 801b0c2:	6921      	ldr	r1, [r4, #16]
 801b0c4:	4650      	mov	r0, sl
 801b0c6:	f7ff fdeb 	bl	801aca0 <_free_r>
 801b0ca:	e7c8      	b.n	801b05e <__ssputs_r+0x46>

0801b0cc <_svfiprintf_r>:
 801b0cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b0d0:	461d      	mov	r5, r3
 801b0d2:	898b      	ldrh	r3, [r1, #12]
 801b0d4:	061f      	lsls	r7, r3, #24
 801b0d6:	b09d      	sub	sp, #116	; 0x74
 801b0d8:	4680      	mov	r8, r0
 801b0da:	460c      	mov	r4, r1
 801b0dc:	4616      	mov	r6, r2
 801b0de:	d50f      	bpl.n	801b100 <_svfiprintf_r+0x34>
 801b0e0:	690b      	ldr	r3, [r1, #16]
 801b0e2:	b96b      	cbnz	r3, 801b100 <_svfiprintf_r+0x34>
 801b0e4:	2140      	movs	r1, #64	; 0x40
 801b0e6:	f7ff fe29 	bl	801ad3c <_malloc_r>
 801b0ea:	6020      	str	r0, [r4, #0]
 801b0ec:	6120      	str	r0, [r4, #16]
 801b0ee:	b928      	cbnz	r0, 801b0fc <_svfiprintf_r+0x30>
 801b0f0:	230c      	movs	r3, #12
 801b0f2:	f8c8 3000 	str.w	r3, [r8]
 801b0f6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801b0fa:	e0c8      	b.n	801b28e <_svfiprintf_r+0x1c2>
 801b0fc:	2340      	movs	r3, #64	; 0x40
 801b0fe:	6163      	str	r3, [r4, #20]
 801b100:	2300      	movs	r3, #0
 801b102:	9309      	str	r3, [sp, #36]	; 0x24
 801b104:	2320      	movs	r3, #32
 801b106:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801b10a:	2330      	movs	r3, #48	; 0x30
 801b10c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801b110:	9503      	str	r5, [sp, #12]
 801b112:	f04f 0b01 	mov.w	fp, #1
 801b116:	4637      	mov	r7, r6
 801b118:	463d      	mov	r5, r7
 801b11a:	f815 3b01 	ldrb.w	r3, [r5], #1
 801b11e:	b10b      	cbz	r3, 801b124 <_svfiprintf_r+0x58>
 801b120:	2b25      	cmp	r3, #37	; 0x25
 801b122:	d13e      	bne.n	801b1a2 <_svfiprintf_r+0xd6>
 801b124:	ebb7 0a06 	subs.w	sl, r7, r6
 801b128:	d00b      	beq.n	801b142 <_svfiprintf_r+0x76>
 801b12a:	4653      	mov	r3, sl
 801b12c:	4632      	mov	r2, r6
 801b12e:	4621      	mov	r1, r4
 801b130:	4640      	mov	r0, r8
 801b132:	f7ff ff71 	bl	801b018 <__ssputs_r>
 801b136:	3001      	adds	r0, #1
 801b138:	f000 80a4 	beq.w	801b284 <_svfiprintf_r+0x1b8>
 801b13c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801b13e:	4453      	add	r3, sl
 801b140:	9309      	str	r3, [sp, #36]	; 0x24
 801b142:	783b      	ldrb	r3, [r7, #0]
 801b144:	2b00      	cmp	r3, #0
 801b146:	f000 809d 	beq.w	801b284 <_svfiprintf_r+0x1b8>
 801b14a:	2300      	movs	r3, #0
 801b14c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801b150:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801b154:	9304      	str	r3, [sp, #16]
 801b156:	9307      	str	r3, [sp, #28]
 801b158:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801b15c:	931a      	str	r3, [sp, #104]	; 0x68
 801b15e:	462f      	mov	r7, r5
 801b160:	2205      	movs	r2, #5
 801b162:	f817 1b01 	ldrb.w	r1, [r7], #1
 801b166:	4850      	ldr	r0, [pc, #320]	; (801b2a8 <_svfiprintf_r+0x1dc>)
 801b168:	f7e5 f842 	bl	80001f0 <memchr>
 801b16c:	9b04      	ldr	r3, [sp, #16]
 801b16e:	b9d0      	cbnz	r0, 801b1a6 <_svfiprintf_r+0xda>
 801b170:	06d9      	lsls	r1, r3, #27
 801b172:	bf44      	itt	mi
 801b174:	2220      	movmi	r2, #32
 801b176:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 801b17a:	071a      	lsls	r2, r3, #28
 801b17c:	bf44      	itt	mi
 801b17e:	222b      	movmi	r2, #43	; 0x2b
 801b180:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 801b184:	782a      	ldrb	r2, [r5, #0]
 801b186:	2a2a      	cmp	r2, #42	; 0x2a
 801b188:	d015      	beq.n	801b1b6 <_svfiprintf_r+0xea>
 801b18a:	9a07      	ldr	r2, [sp, #28]
 801b18c:	462f      	mov	r7, r5
 801b18e:	2000      	movs	r0, #0
 801b190:	250a      	movs	r5, #10
 801b192:	4639      	mov	r1, r7
 801b194:	f811 3b01 	ldrb.w	r3, [r1], #1
 801b198:	3b30      	subs	r3, #48	; 0x30
 801b19a:	2b09      	cmp	r3, #9
 801b19c:	d94d      	bls.n	801b23a <_svfiprintf_r+0x16e>
 801b19e:	b1b8      	cbz	r0, 801b1d0 <_svfiprintf_r+0x104>
 801b1a0:	e00f      	b.n	801b1c2 <_svfiprintf_r+0xf6>
 801b1a2:	462f      	mov	r7, r5
 801b1a4:	e7b8      	b.n	801b118 <_svfiprintf_r+0x4c>
 801b1a6:	4a40      	ldr	r2, [pc, #256]	; (801b2a8 <_svfiprintf_r+0x1dc>)
 801b1a8:	1a80      	subs	r0, r0, r2
 801b1aa:	fa0b f000 	lsl.w	r0, fp, r0
 801b1ae:	4318      	orrs	r0, r3
 801b1b0:	9004      	str	r0, [sp, #16]
 801b1b2:	463d      	mov	r5, r7
 801b1b4:	e7d3      	b.n	801b15e <_svfiprintf_r+0x92>
 801b1b6:	9a03      	ldr	r2, [sp, #12]
 801b1b8:	1d11      	adds	r1, r2, #4
 801b1ba:	6812      	ldr	r2, [r2, #0]
 801b1bc:	9103      	str	r1, [sp, #12]
 801b1be:	2a00      	cmp	r2, #0
 801b1c0:	db01      	blt.n	801b1c6 <_svfiprintf_r+0xfa>
 801b1c2:	9207      	str	r2, [sp, #28]
 801b1c4:	e004      	b.n	801b1d0 <_svfiprintf_r+0x104>
 801b1c6:	4252      	negs	r2, r2
 801b1c8:	f043 0302 	orr.w	r3, r3, #2
 801b1cc:	9207      	str	r2, [sp, #28]
 801b1ce:	9304      	str	r3, [sp, #16]
 801b1d0:	783b      	ldrb	r3, [r7, #0]
 801b1d2:	2b2e      	cmp	r3, #46	; 0x2e
 801b1d4:	d10c      	bne.n	801b1f0 <_svfiprintf_r+0x124>
 801b1d6:	787b      	ldrb	r3, [r7, #1]
 801b1d8:	2b2a      	cmp	r3, #42	; 0x2a
 801b1da:	d133      	bne.n	801b244 <_svfiprintf_r+0x178>
 801b1dc:	9b03      	ldr	r3, [sp, #12]
 801b1de:	1d1a      	adds	r2, r3, #4
 801b1e0:	681b      	ldr	r3, [r3, #0]
 801b1e2:	9203      	str	r2, [sp, #12]
 801b1e4:	2b00      	cmp	r3, #0
 801b1e6:	bfb8      	it	lt
 801b1e8:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 801b1ec:	3702      	adds	r7, #2
 801b1ee:	9305      	str	r3, [sp, #20]
 801b1f0:	4d2e      	ldr	r5, [pc, #184]	; (801b2ac <_svfiprintf_r+0x1e0>)
 801b1f2:	7839      	ldrb	r1, [r7, #0]
 801b1f4:	2203      	movs	r2, #3
 801b1f6:	4628      	mov	r0, r5
 801b1f8:	f7e4 fffa 	bl	80001f0 <memchr>
 801b1fc:	b138      	cbz	r0, 801b20e <_svfiprintf_r+0x142>
 801b1fe:	2340      	movs	r3, #64	; 0x40
 801b200:	1b40      	subs	r0, r0, r5
 801b202:	fa03 f000 	lsl.w	r0, r3, r0
 801b206:	9b04      	ldr	r3, [sp, #16]
 801b208:	4303      	orrs	r3, r0
 801b20a:	3701      	adds	r7, #1
 801b20c:	9304      	str	r3, [sp, #16]
 801b20e:	7839      	ldrb	r1, [r7, #0]
 801b210:	4827      	ldr	r0, [pc, #156]	; (801b2b0 <_svfiprintf_r+0x1e4>)
 801b212:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801b216:	2206      	movs	r2, #6
 801b218:	1c7e      	adds	r6, r7, #1
 801b21a:	f7e4 ffe9 	bl	80001f0 <memchr>
 801b21e:	2800      	cmp	r0, #0
 801b220:	d038      	beq.n	801b294 <_svfiprintf_r+0x1c8>
 801b222:	4b24      	ldr	r3, [pc, #144]	; (801b2b4 <_svfiprintf_r+0x1e8>)
 801b224:	bb13      	cbnz	r3, 801b26c <_svfiprintf_r+0x1a0>
 801b226:	9b03      	ldr	r3, [sp, #12]
 801b228:	3307      	adds	r3, #7
 801b22a:	f023 0307 	bic.w	r3, r3, #7
 801b22e:	3308      	adds	r3, #8
 801b230:	9303      	str	r3, [sp, #12]
 801b232:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801b234:	444b      	add	r3, r9
 801b236:	9309      	str	r3, [sp, #36]	; 0x24
 801b238:	e76d      	b.n	801b116 <_svfiprintf_r+0x4a>
 801b23a:	fb05 3202 	mla	r2, r5, r2, r3
 801b23e:	2001      	movs	r0, #1
 801b240:	460f      	mov	r7, r1
 801b242:	e7a6      	b.n	801b192 <_svfiprintf_r+0xc6>
 801b244:	2300      	movs	r3, #0
 801b246:	3701      	adds	r7, #1
 801b248:	9305      	str	r3, [sp, #20]
 801b24a:	4619      	mov	r1, r3
 801b24c:	250a      	movs	r5, #10
 801b24e:	4638      	mov	r0, r7
 801b250:	f810 2b01 	ldrb.w	r2, [r0], #1
 801b254:	3a30      	subs	r2, #48	; 0x30
 801b256:	2a09      	cmp	r2, #9
 801b258:	d903      	bls.n	801b262 <_svfiprintf_r+0x196>
 801b25a:	2b00      	cmp	r3, #0
 801b25c:	d0c8      	beq.n	801b1f0 <_svfiprintf_r+0x124>
 801b25e:	9105      	str	r1, [sp, #20]
 801b260:	e7c6      	b.n	801b1f0 <_svfiprintf_r+0x124>
 801b262:	fb05 2101 	mla	r1, r5, r1, r2
 801b266:	2301      	movs	r3, #1
 801b268:	4607      	mov	r7, r0
 801b26a:	e7f0      	b.n	801b24e <_svfiprintf_r+0x182>
 801b26c:	ab03      	add	r3, sp, #12
 801b26e:	9300      	str	r3, [sp, #0]
 801b270:	4622      	mov	r2, r4
 801b272:	4b11      	ldr	r3, [pc, #68]	; (801b2b8 <_svfiprintf_r+0x1ec>)
 801b274:	a904      	add	r1, sp, #16
 801b276:	4640      	mov	r0, r8
 801b278:	f3af 8000 	nop.w
 801b27c:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 801b280:	4681      	mov	r9, r0
 801b282:	d1d6      	bne.n	801b232 <_svfiprintf_r+0x166>
 801b284:	89a3      	ldrh	r3, [r4, #12]
 801b286:	065b      	lsls	r3, r3, #25
 801b288:	f53f af35 	bmi.w	801b0f6 <_svfiprintf_r+0x2a>
 801b28c:	9809      	ldr	r0, [sp, #36]	; 0x24
 801b28e:	b01d      	add	sp, #116	; 0x74
 801b290:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b294:	ab03      	add	r3, sp, #12
 801b296:	9300      	str	r3, [sp, #0]
 801b298:	4622      	mov	r2, r4
 801b29a:	4b07      	ldr	r3, [pc, #28]	; (801b2b8 <_svfiprintf_r+0x1ec>)
 801b29c:	a904      	add	r1, sp, #16
 801b29e:	4640      	mov	r0, r8
 801b2a0:	f000 f9c2 	bl	801b628 <_printf_i>
 801b2a4:	e7ea      	b.n	801b27c <_svfiprintf_r+0x1b0>
 801b2a6:	bf00      	nop
 801b2a8:	0801e880 	.word	0x0801e880
 801b2ac:	0801e886 	.word	0x0801e886
 801b2b0:	0801e88a 	.word	0x0801e88a
 801b2b4:	00000000 	.word	0x00000000
 801b2b8:	0801b019 	.word	0x0801b019

0801b2bc <__sfputc_r>:
 801b2bc:	6893      	ldr	r3, [r2, #8]
 801b2be:	3b01      	subs	r3, #1
 801b2c0:	2b00      	cmp	r3, #0
 801b2c2:	b410      	push	{r4}
 801b2c4:	6093      	str	r3, [r2, #8]
 801b2c6:	da08      	bge.n	801b2da <__sfputc_r+0x1e>
 801b2c8:	6994      	ldr	r4, [r2, #24]
 801b2ca:	42a3      	cmp	r3, r4
 801b2cc:	db01      	blt.n	801b2d2 <__sfputc_r+0x16>
 801b2ce:	290a      	cmp	r1, #10
 801b2d0:	d103      	bne.n	801b2da <__sfputc_r+0x1e>
 801b2d2:	f85d 4b04 	ldr.w	r4, [sp], #4
 801b2d6:	f000 bafd 	b.w	801b8d4 <__swbuf_r>
 801b2da:	6813      	ldr	r3, [r2, #0]
 801b2dc:	1c58      	adds	r0, r3, #1
 801b2de:	6010      	str	r0, [r2, #0]
 801b2e0:	7019      	strb	r1, [r3, #0]
 801b2e2:	4608      	mov	r0, r1
 801b2e4:	f85d 4b04 	ldr.w	r4, [sp], #4
 801b2e8:	4770      	bx	lr

0801b2ea <__sfputs_r>:
 801b2ea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b2ec:	4606      	mov	r6, r0
 801b2ee:	460f      	mov	r7, r1
 801b2f0:	4614      	mov	r4, r2
 801b2f2:	18d5      	adds	r5, r2, r3
 801b2f4:	42ac      	cmp	r4, r5
 801b2f6:	d101      	bne.n	801b2fc <__sfputs_r+0x12>
 801b2f8:	2000      	movs	r0, #0
 801b2fa:	e007      	b.n	801b30c <__sfputs_r+0x22>
 801b2fc:	463a      	mov	r2, r7
 801b2fe:	f814 1b01 	ldrb.w	r1, [r4], #1
 801b302:	4630      	mov	r0, r6
 801b304:	f7ff ffda 	bl	801b2bc <__sfputc_r>
 801b308:	1c43      	adds	r3, r0, #1
 801b30a:	d1f3      	bne.n	801b2f4 <__sfputs_r+0xa>
 801b30c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801b310 <_vfiprintf_r>:
 801b310:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b314:	460c      	mov	r4, r1
 801b316:	b09d      	sub	sp, #116	; 0x74
 801b318:	4617      	mov	r7, r2
 801b31a:	461d      	mov	r5, r3
 801b31c:	4606      	mov	r6, r0
 801b31e:	b118      	cbz	r0, 801b328 <_vfiprintf_r+0x18>
 801b320:	6983      	ldr	r3, [r0, #24]
 801b322:	b90b      	cbnz	r3, 801b328 <_vfiprintf_r+0x18>
 801b324:	f7ff fdec 	bl	801af00 <__sinit>
 801b328:	4b7c      	ldr	r3, [pc, #496]	; (801b51c <_vfiprintf_r+0x20c>)
 801b32a:	429c      	cmp	r4, r3
 801b32c:	d158      	bne.n	801b3e0 <_vfiprintf_r+0xd0>
 801b32e:	6874      	ldr	r4, [r6, #4]
 801b330:	89a3      	ldrh	r3, [r4, #12]
 801b332:	0718      	lsls	r0, r3, #28
 801b334:	d55e      	bpl.n	801b3f4 <_vfiprintf_r+0xe4>
 801b336:	6923      	ldr	r3, [r4, #16]
 801b338:	2b00      	cmp	r3, #0
 801b33a:	d05b      	beq.n	801b3f4 <_vfiprintf_r+0xe4>
 801b33c:	2300      	movs	r3, #0
 801b33e:	9309      	str	r3, [sp, #36]	; 0x24
 801b340:	2320      	movs	r3, #32
 801b342:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801b346:	2330      	movs	r3, #48	; 0x30
 801b348:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801b34c:	9503      	str	r5, [sp, #12]
 801b34e:	f04f 0b01 	mov.w	fp, #1
 801b352:	46b8      	mov	r8, r7
 801b354:	4645      	mov	r5, r8
 801b356:	f815 3b01 	ldrb.w	r3, [r5], #1
 801b35a:	b10b      	cbz	r3, 801b360 <_vfiprintf_r+0x50>
 801b35c:	2b25      	cmp	r3, #37	; 0x25
 801b35e:	d154      	bne.n	801b40a <_vfiprintf_r+0xfa>
 801b360:	ebb8 0a07 	subs.w	sl, r8, r7
 801b364:	d00b      	beq.n	801b37e <_vfiprintf_r+0x6e>
 801b366:	4653      	mov	r3, sl
 801b368:	463a      	mov	r2, r7
 801b36a:	4621      	mov	r1, r4
 801b36c:	4630      	mov	r0, r6
 801b36e:	f7ff ffbc 	bl	801b2ea <__sfputs_r>
 801b372:	3001      	adds	r0, #1
 801b374:	f000 80c2 	beq.w	801b4fc <_vfiprintf_r+0x1ec>
 801b378:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801b37a:	4453      	add	r3, sl
 801b37c:	9309      	str	r3, [sp, #36]	; 0x24
 801b37e:	f898 3000 	ldrb.w	r3, [r8]
 801b382:	2b00      	cmp	r3, #0
 801b384:	f000 80ba 	beq.w	801b4fc <_vfiprintf_r+0x1ec>
 801b388:	2300      	movs	r3, #0
 801b38a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801b38e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801b392:	9304      	str	r3, [sp, #16]
 801b394:	9307      	str	r3, [sp, #28]
 801b396:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801b39a:	931a      	str	r3, [sp, #104]	; 0x68
 801b39c:	46a8      	mov	r8, r5
 801b39e:	2205      	movs	r2, #5
 801b3a0:	f818 1b01 	ldrb.w	r1, [r8], #1
 801b3a4:	485e      	ldr	r0, [pc, #376]	; (801b520 <_vfiprintf_r+0x210>)
 801b3a6:	f7e4 ff23 	bl	80001f0 <memchr>
 801b3aa:	9b04      	ldr	r3, [sp, #16]
 801b3ac:	bb78      	cbnz	r0, 801b40e <_vfiprintf_r+0xfe>
 801b3ae:	06d9      	lsls	r1, r3, #27
 801b3b0:	bf44      	itt	mi
 801b3b2:	2220      	movmi	r2, #32
 801b3b4:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 801b3b8:	071a      	lsls	r2, r3, #28
 801b3ba:	bf44      	itt	mi
 801b3bc:	222b      	movmi	r2, #43	; 0x2b
 801b3be:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 801b3c2:	782a      	ldrb	r2, [r5, #0]
 801b3c4:	2a2a      	cmp	r2, #42	; 0x2a
 801b3c6:	d02a      	beq.n	801b41e <_vfiprintf_r+0x10e>
 801b3c8:	9a07      	ldr	r2, [sp, #28]
 801b3ca:	46a8      	mov	r8, r5
 801b3cc:	2000      	movs	r0, #0
 801b3ce:	250a      	movs	r5, #10
 801b3d0:	4641      	mov	r1, r8
 801b3d2:	f811 3b01 	ldrb.w	r3, [r1], #1
 801b3d6:	3b30      	subs	r3, #48	; 0x30
 801b3d8:	2b09      	cmp	r3, #9
 801b3da:	d969      	bls.n	801b4b0 <_vfiprintf_r+0x1a0>
 801b3dc:	b360      	cbz	r0, 801b438 <_vfiprintf_r+0x128>
 801b3de:	e024      	b.n	801b42a <_vfiprintf_r+0x11a>
 801b3e0:	4b50      	ldr	r3, [pc, #320]	; (801b524 <_vfiprintf_r+0x214>)
 801b3e2:	429c      	cmp	r4, r3
 801b3e4:	d101      	bne.n	801b3ea <_vfiprintf_r+0xda>
 801b3e6:	68b4      	ldr	r4, [r6, #8]
 801b3e8:	e7a2      	b.n	801b330 <_vfiprintf_r+0x20>
 801b3ea:	4b4f      	ldr	r3, [pc, #316]	; (801b528 <_vfiprintf_r+0x218>)
 801b3ec:	429c      	cmp	r4, r3
 801b3ee:	bf08      	it	eq
 801b3f0:	68f4      	ldreq	r4, [r6, #12]
 801b3f2:	e79d      	b.n	801b330 <_vfiprintf_r+0x20>
 801b3f4:	4621      	mov	r1, r4
 801b3f6:	4630      	mov	r0, r6
 801b3f8:	f000 fad0 	bl	801b99c <__swsetup_r>
 801b3fc:	2800      	cmp	r0, #0
 801b3fe:	d09d      	beq.n	801b33c <_vfiprintf_r+0x2c>
 801b400:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801b404:	b01d      	add	sp, #116	; 0x74
 801b406:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b40a:	46a8      	mov	r8, r5
 801b40c:	e7a2      	b.n	801b354 <_vfiprintf_r+0x44>
 801b40e:	4a44      	ldr	r2, [pc, #272]	; (801b520 <_vfiprintf_r+0x210>)
 801b410:	1a80      	subs	r0, r0, r2
 801b412:	fa0b f000 	lsl.w	r0, fp, r0
 801b416:	4318      	orrs	r0, r3
 801b418:	9004      	str	r0, [sp, #16]
 801b41a:	4645      	mov	r5, r8
 801b41c:	e7be      	b.n	801b39c <_vfiprintf_r+0x8c>
 801b41e:	9a03      	ldr	r2, [sp, #12]
 801b420:	1d11      	adds	r1, r2, #4
 801b422:	6812      	ldr	r2, [r2, #0]
 801b424:	9103      	str	r1, [sp, #12]
 801b426:	2a00      	cmp	r2, #0
 801b428:	db01      	blt.n	801b42e <_vfiprintf_r+0x11e>
 801b42a:	9207      	str	r2, [sp, #28]
 801b42c:	e004      	b.n	801b438 <_vfiprintf_r+0x128>
 801b42e:	4252      	negs	r2, r2
 801b430:	f043 0302 	orr.w	r3, r3, #2
 801b434:	9207      	str	r2, [sp, #28]
 801b436:	9304      	str	r3, [sp, #16]
 801b438:	f898 3000 	ldrb.w	r3, [r8]
 801b43c:	2b2e      	cmp	r3, #46	; 0x2e
 801b43e:	d10e      	bne.n	801b45e <_vfiprintf_r+0x14e>
 801b440:	f898 3001 	ldrb.w	r3, [r8, #1]
 801b444:	2b2a      	cmp	r3, #42	; 0x2a
 801b446:	d138      	bne.n	801b4ba <_vfiprintf_r+0x1aa>
 801b448:	9b03      	ldr	r3, [sp, #12]
 801b44a:	1d1a      	adds	r2, r3, #4
 801b44c:	681b      	ldr	r3, [r3, #0]
 801b44e:	9203      	str	r2, [sp, #12]
 801b450:	2b00      	cmp	r3, #0
 801b452:	bfb8      	it	lt
 801b454:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 801b458:	f108 0802 	add.w	r8, r8, #2
 801b45c:	9305      	str	r3, [sp, #20]
 801b45e:	4d33      	ldr	r5, [pc, #204]	; (801b52c <_vfiprintf_r+0x21c>)
 801b460:	f898 1000 	ldrb.w	r1, [r8]
 801b464:	2203      	movs	r2, #3
 801b466:	4628      	mov	r0, r5
 801b468:	f7e4 fec2 	bl	80001f0 <memchr>
 801b46c:	b140      	cbz	r0, 801b480 <_vfiprintf_r+0x170>
 801b46e:	2340      	movs	r3, #64	; 0x40
 801b470:	1b40      	subs	r0, r0, r5
 801b472:	fa03 f000 	lsl.w	r0, r3, r0
 801b476:	9b04      	ldr	r3, [sp, #16]
 801b478:	4303      	orrs	r3, r0
 801b47a:	f108 0801 	add.w	r8, r8, #1
 801b47e:	9304      	str	r3, [sp, #16]
 801b480:	f898 1000 	ldrb.w	r1, [r8]
 801b484:	482a      	ldr	r0, [pc, #168]	; (801b530 <_vfiprintf_r+0x220>)
 801b486:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801b48a:	2206      	movs	r2, #6
 801b48c:	f108 0701 	add.w	r7, r8, #1
 801b490:	f7e4 feae 	bl	80001f0 <memchr>
 801b494:	2800      	cmp	r0, #0
 801b496:	d037      	beq.n	801b508 <_vfiprintf_r+0x1f8>
 801b498:	4b26      	ldr	r3, [pc, #152]	; (801b534 <_vfiprintf_r+0x224>)
 801b49a:	bb1b      	cbnz	r3, 801b4e4 <_vfiprintf_r+0x1d4>
 801b49c:	9b03      	ldr	r3, [sp, #12]
 801b49e:	3307      	adds	r3, #7
 801b4a0:	f023 0307 	bic.w	r3, r3, #7
 801b4a4:	3308      	adds	r3, #8
 801b4a6:	9303      	str	r3, [sp, #12]
 801b4a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801b4aa:	444b      	add	r3, r9
 801b4ac:	9309      	str	r3, [sp, #36]	; 0x24
 801b4ae:	e750      	b.n	801b352 <_vfiprintf_r+0x42>
 801b4b0:	fb05 3202 	mla	r2, r5, r2, r3
 801b4b4:	2001      	movs	r0, #1
 801b4b6:	4688      	mov	r8, r1
 801b4b8:	e78a      	b.n	801b3d0 <_vfiprintf_r+0xc0>
 801b4ba:	2300      	movs	r3, #0
 801b4bc:	f108 0801 	add.w	r8, r8, #1
 801b4c0:	9305      	str	r3, [sp, #20]
 801b4c2:	4619      	mov	r1, r3
 801b4c4:	250a      	movs	r5, #10
 801b4c6:	4640      	mov	r0, r8
 801b4c8:	f810 2b01 	ldrb.w	r2, [r0], #1
 801b4cc:	3a30      	subs	r2, #48	; 0x30
 801b4ce:	2a09      	cmp	r2, #9
 801b4d0:	d903      	bls.n	801b4da <_vfiprintf_r+0x1ca>
 801b4d2:	2b00      	cmp	r3, #0
 801b4d4:	d0c3      	beq.n	801b45e <_vfiprintf_r+0x14e>
 801b4d6:	9105      	str	r1, [sp, #20]
 801b4d8:	e7c1      	b.n	801b45e <_vfiprintf_r+0x14e>
 801b4da:	fb05 2101 	mla	r1, r5, r1, r2
 801b4de:	2301      	movs	r3, #1
 801b4e0:	4680      	mov	r8, r0
 801b4e2:	e7f0      	b.n	801b4c6 <_vfiprintf_r+0x1b6>
 801b4e4:	ab03      	add	r3, sp, #12
 801b4e6:	9300      	str	r3, [sp, #0]
 801b4e8:	4622      	mov	r2, r4
 801b4ea:	4b13      	ldr	r3, [pc, #76]	; (801b538 <_vfiprintf_r+0x228>)
 801b4ec:	a904      	add	r1, sp, #16
 801b4ee:	4630      	mov	r0, r6
 801b4f0:	f3af 8000 	nop.w
 801b4f4:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 801b4f8:	4681      	mov	r9, r0
 801b4fa:	d1d5      	bne.n	801b4a8 <_vfiprintf_r+0x198>
 801b4fc:	89a3      	ldrh	r3, [r4, #12]
 801b4fe:	065b      	lsls	r3, r3, #25
 801b500:	f53f af7e 	bmi.w	801b400 <_vfiprintf_r+0xf0>
 801b504:	9809      	ldr	r0, [sp, #36]	; 0x24
 801b506:	e77d      	b.n	801b404 <_vfiprintf_r+0xf4>
 801b508:	ab03      	add	r3, sp, #12
 801b50a:	9300      	str	r3, [sp, #0]
 801b50c:	4622      	mov	r2, r4
 801b50e:	4b0a      	ldr	r3, [pc, #40]	; (801b538 <_vfiprintf_r+0x228>)
 801b510:	a904      	add	r1, sp, #16
 801b512:	4630      	mov	r0, r6
 801b514:	f000 f888 	bl	801b628 <_printf_i>
 801b518:	e7ec      	b.n	801b4f4 <_vfiprintf_r+0x1e4>
 801b51a:	bf00      	nop
 801b51c:	0801e840 	.word	0x0801e840
 801b520:	0801e880 	.word	0x0801e880
 801b524:	0801e860 	.word	0x0801e860
 801b528:	0801e820 	.word	0x0801e820
 801b52c:	0801e886 	.word	0x0801e886
 801b530:	0801e88a 	.word	0x0801e88a
 801b534:	00000000 	.word	0x00000000
 801b538:	0801b2eb 	.word	0x0801b2eb

0801b53c <_printf_common>:
 801b53c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801b540:	4691      	mov	r9, r2
 801b542:	461f      	mov	r7, r3
 801b544:	688a      	ldr	r2, [r1, #8]
 801b546:	690b      	ldr	r3, [r1, #16]
 801b548:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801b54c:	4293      	cmp	r3, r2
 801b54e:	bfb8      	it	lt
 801b550:	4613      	movlt	r3, r2
 801b552:	f8c9 3000 	str.w	r3, [r9]
 801b556:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801b55a:	4606      	mov	r6, r0
 801b55c:	460c      	mov	r4, r1
 801b55e:	b112      	cbz	r2, 801b566 <_printf_common+0x2a>
 801b560:	3301      	adds	r3, #1
 801b562:	f8c9 3000 	str.w	r3, [r9]
 801b566:	6823      	ldr	r3, [r4, #0]
 801b568:	0699      	lsls	r1, r3, #26
 801b56a:	bf42      	ittt	mi
 801b56c:	f8d9 3000 	ldrmi.w	r3, [r9]
 801b570:	3302      	addmi	r3, #2
 801b572:	f8c9 3000 	strmi.w	r3, [r9]
 801b576:	6825      	ldr	r5, [r4, #0]
 801b578:	f015 0506 	ands.w	r5, r5, #6
 801b57c:	d107      	bne.n	801b58e <_printf_common+0x52>
 801b57e:	f104 0a19 	add.w	sl, r4, #25
 801b582:	68e3      	ldr	r3, [r4, #12]
 801b584:	f8d9 2000 	ldr.w	r2, [r9]
 801b588:	1a9b      	subs	r3, r3, r2
 801b58a:	42ab      	cmp	r3, r5
 801b58c:	dc28      	bgt.n	801b5e0 <_printf_common+0xa4>
 801b58e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 801b592:	6822      	ldr	r2, [r4, #0]
 801b594:	3300      	adds	r3, #0
 801b596:	bf18      	it	ne
 801b598:	2301      	movne	r3, #1
 801b59a:	0692      	lsls	r2, r2, #26
 801b59c:	d42d      	bmi.n	801b5fa <_printf_common+0xbe>
 801b59e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801b5a2:	4639      	mov	r1, r7
 801b5a4:	4630      	mov	r0, r6
 801b5a6:	47c0      	blx	r8
 801b5a8:	3001      	adds	r0, #1
 801b5aa:	d020      	beq.n	801b5ee <_printf_common+0xb2>
 801b5ac:	6823      	ldr	r3, [r4, #0]
 801b5ae:	68e5      	ldr	r5, [r4, #12]
 801b5b0:	f8d9 2000 	ldr.w	r2, [r9]
 801b5b4:	f003 0306 	and.w	r3, r3, #6
 801b5b8:	2b04      	cmp	r3, #4
 801b5ba:	bf08      	it	eq
 801b5bc:	1aad      	subeq	r5, r5, r2
 801b5be:	68a3      	ldr	r3, [r4, #8]
 801b5c0:	6922      	ldr	r2, [r4, #16]
 801b5c2:	bf0c      	ite	eq
 801b5c4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801b5c8:	2500      	movne	r5, #0
 801b5ca:	4293      	cmp	r3, r2
 801b5cc:	bfc4      	itt	gt
 801b5ce:	1a9b      	subgt	r3, r3, r2
 801b5d0:	18ed      	addgt	r5, r5, r3
 801b5d2:	f04f 0900 	mov.w	r9, #0
 801b5d6:	341a      	adds	r4, #26
 801b5d8:	454d      	cmp	r5, r9
 801b5da:	d11a      	bne.n	801b612 <_printf_common+0xd6>
 801b5dc:	2000      	movs	r0, #0
 801b5de:	e008      	b.n	801b5f2 <_printf_common+0xb6>
 801b5e0:	2301      	movs	r3, #1
 801b5e2:	4652      	mov	r2, sl
 801b5e4:	4639      	mov	r1, r7
 801b5e6:	4630      	mov	r0, r6
 801b5e8:	47c0      	blx	r8
 801b5ea:	3001      	adds	r0, #1
 801b5ec:	d103      	bne.n	801b5f6 <_printf_common+0xba>
 801b5ee:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801b5f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801b5f6:	3501      	adds	r5, #1
 801b5f8:	e7c3      	b.n	801b582 <_printf_common+0x46>
 801b5fa:	18e1      	adds	r1, r4, r3
 801b5fc:	1c5a      	adds	r2, r3, #1
 801b5fe:	2030      	movs	r0, #48	; 0x30
 801b600:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801b604:	4422      	add	r2, r4
 801b606:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801b60a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801b60e:	3302      	adds	r3, #2
 801b610:	e7c5      	b.n	801b59e <_printf_common+0x62>
 801b612:	2301      	movs	r3, #1
 801b614:	4622      	mov	r2, r4
 801b616:	4639      	mov	r1, r7
 801b618:	4630      	mov	r0, r6
 801b61a:	47c0      	blx	r8
 801b61c:	3001      	adds	r0, #1
 801b61e:	d0e6      	beq.n	801b5ee <_printf_common+0xb2>
 801b620:	f109 0901 	add.w	r9, r9, #1
 801b624:	e7d8      	b.n	801b5d8 <_printf_common+0x9c>
	...

0801b628 <_printf_i>:
 801b628:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801b62c:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 801b630:	460c      	mov	r4, r1
 801b632:	7e09      	ldrb	r1, [r1, #24]
 801b634:	b085      	sub	sp, #20
 801b636:	296e      	cmp	r1, #110	; 0x6e
 801b638:	4617      	mov	r7, r2
 801b63a:	4606      	mov	r6, r0
 801b63c:	4698      	mov	r8, r3
 801b63e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801b640:	f000 80b3 	beq.w	801b7aa <_printf_i+0x182>
 801b644:	d822      	bhi.n	801b68c <_printf_i+0x64>
 801b646:	2963      	cmp	r1, #99	; 0x63
 801b648:	d036      	beq.n	801b6b8 <_printf_i+0x90>
 801b64a:	d80a      	bhi.n	801b662 <_printf_i+0x3a>
 801b64c:	2900      	cmp	r1, #0
 801b64e:	f000 80b9 	beq.w	801b7c4 <_printf_i+0x19c>
 801b652:	2958      	cmp	r1, #88	; 0x58
 801b654:	f000 8083 	beq.w	801b75e <_printf_i+0x136>
 801b658:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801b65c:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 801b660:	e032      	b.n	801b6c8 <_printf_i+0xa0>
 801b662:	2964      	cmp	r1, #100	; 0x64
 801b664:	d001      	beq.n	801b66a <_printf_i+0x42>
 801b666:	2969      	cmp	r1, #105	; 0x69
 801b668:	d1f6      	bne.n	801b658 <_printf_i+0x30>
 801b66a:	6820      	ldr	r0, [r4, #0]
 801b66c:	6813      	ldr	r3, [r2, #0]
 801b66e:	0605      	lsls	r5, r0, #24
 801b670:	f103 0104 	add.w	r1, r3, #4
 801b674:	d52a      	bpl.n	801b6cc <_printf_i+0xa4>
 801b676:	681b      	ldr	r3, [r3, #0]
 801b678:	6011      	str	r1, [r2, #0]
 801b67a:	2b00      	cmp	r3, #0
 801b67c:	da03      	bge.n	801b686 <_printf_i+0x5e>
 801b67e:	222d      	movs	r2, #45	; 0x2d
 801b680:	425b      	negs	r3, r3
 801b682:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 801b686:	486f      	ldr	r0, [pc, #444]	; (801b844 <_printf_i+0x21c>)
 801b688:	220a      	movs	r2, #10
 801b68a:	e039      	b.n	801b700 <_printf_i+0xd8>
 801b68c:	2973      	cmp	r1, #115	; 0x73
 801b68e:	f000 809d 	beq.w	801b7cc <_printf_i+0x1a4>
 801b692:	d808      	bhi.n	801b6a6 <_printf_i+0x7e>
 801b694:	296f      	cmp	r1, #111	; 0x6f
 801b696:	d020      	beq.n	801b6da <_printf_i+0xb2>
 801b698:	2970      	cmp	r1, #112	; 0x70
 801b69a:	d1dd      	bne.n	801b658 <_printf_i+0x30>
 801b69c:	6823      	ldr	r3, [r4, #0]
 801b69e:	f043 0320 	orr.w	r3, r3, #32
 801b6a2:	6023      	str	r3, [r4, #0]
 801b6a4:	e003      	b.n	801b6ae <_printf_i+0x86>
 801b6a6:	2975      	cmp	r1, #117	; 0x75
 801b6a8:	d017      	beq.n	801b6da <_printf_i+0xb2>
 801b6aa:	2978      	cmp	r1, #120	; 0x78
 801b6ac:	d1d4      	bne.n	801b658 <_printf_i+0x30>
 801b6ae:	2378      	movs	r3, #120	; 0x78
 801b6b0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801b6b4:	4864      	ldr	r0, [pc, #400]	; (801b848 <_printf_i+0x220>)
 801b6b6:	e055      	b.n	801b764 <_printf_i+0x13c>
 801b6b8:	6813      	ldr	r3, [r2, #0]
 801b6ba:	1d19      	adds	r1, r3, #4
 801b6bc:	681b      	ldr	r3, [r3, #0]
 801b6be:	6011      	str	r1, [r2, #0]
 801b6c0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801b6c4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801b6c8:	2301      	movs	r3, #1
 801b6ca:	e08c      	b.n	801b7e6 <_printf_i+0x1be>
 801b6cc:	681b      	ldr	r3, [r3, #0]
 801b6ce:	6011      	str	r1, [r2, #0]
 801b6d0:	f010 0f40 	tst.w	r0, #64	; 0x40
 801b6d4:	bf18      	it	ne
 801b6d6:	b21b      	sxthne	r3, r3
 801b6d8:	e7cf      	b.n	801b67a <_printf_i+0x52>
 801b6da:	6813      	ldr	r3, [r2, #0]
 801b6dc:	6825      	ldr	r5, [r4, #0]
 801b6de:	1d18      	adds	r0, r3, #4
 801b6e0:	6010      	str	r0, [r2, #0]
 801b6e2:	0628      	lsls	r0, r5, #24
 801b6e4:	d501      	bpl.n	801b6ea <_printf_i+0xc2>
 801b6e6:	681b      	ldr	r3, [r3, #0]
 801b6e8:	e002      	b.n	801b6f0 <_printf_i+0xc8>
 801b6ea:	0668      	lsls	r0, r5, #25
 801b6ec:	d5fb      	bpl.n	801b6e6 <_printf_i+0xbe>
 801b6ee:	881b      	ldrh	r3, [r3, #0]
 801b6f0:	4854      	ldr	r0, [pc, #336]	; (801b844 <_printf_i+0x21c>)
 801b6f2:	296f      	cmp	r1, #111	; 0x6f
 801b6f4:	bf14      	ite	ne
 801b6f6:	220a      	movne	r2, #10
 801b6f8:	2208      	moveq	r2, #8
 801b6fa:	2100      	movs	r1, #0
 801b6fc:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801b700:	6865      	ldr	r5, [r4, #4]
 801b702:	60a5      	str	r5, [r4, #8]
 801b704:	2d00      	cmp	r5, #0
 801b706:	f2c0 8095 	blt.w	801b834 <_printf_i+0x20c>
 801b70a:	6821      	ldr	r1, [r4, #0]
 801b70c:	f021 0104 	bic.w	r1, r1, #4
 801b710:	6021      	str	r1, [r4, #0]
 801b712:	2b00      	cmp	r3, #0
 801b714:	d13d      	bne.n	801b792 <_printf_i+0x16a>
 801b716:	2d00      	cmp	r5, #0
 801b718:	f040 808e 	bne.w	801b838 <_printf_i+0x210>
 801b71c:	4665      	mov	r5, ip
 801b71e:	2a08      	cmp	r2, #8
 801b720:	d10b      	bne.n	801b73a <_printf_i+0x112>
 801b722:	6823      	ldr	r3, [r4, #0]
 801b724:	07db      	lsls	r3, r3, #31
 801b726:	d508      	bpl.n	801b73a <_printf_i+0x112>
 801b728:	6923      	ldr	r3, [r4, #16]
 801b72a:	6862      	ldr	r2, [r4, #4]
 801b72c:	429a      	cmp	r2, r3
 801b72e:	bfde      	ittt	le
 801b730:	2330      	movle	r3, #48	; 0x30
 801b732:	f805 3c01 	strble.w	r3, [r5, #-1]
 801b736:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 801b73a:	ebac 0305 	sub.w	r3, ip, r5
 801b73e:	6123      	str	r3, [r4, #16]
 801b740:	f8cd 8000 	str.w	r8, [sp]
 801b744:	463b      	mov	r3, r7
 801b746:	aa03      	add	r2, sp, #12
 801b748:	4621      	mov	r1, r4
 801b74a:	4630      	mov	r0, r6
 801b74c:	f7ff fef6 	bl	801b53c <_printf_common>
 801b750:	3001      	adds	r0, #1
 801b752:	d14d      	bne.n	801b7f0 <_printf_i+0x1c8>
 801b754:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801b758:	b005      	add	sp, #20
 801b75a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801b75e:	4839      	ldr	r0, [pc, #228]	; (801b844 <_printf_i+0x21c>)
 801b760:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 801b764:	6813      	ldr	r3, [r2, #0]
 801b766:	6821      	ldr	r1, [r4, #0]
 801b768:	1d1d      	adds	r5, r3, #4
 801b76a:	681b      	ldr	r3, [r3, #0]
 801b76c:	6015      	str	r5, [r2, #0]
 801b76e:	060a      	lsls	r2, r1, #24
 801b770:	d50b      	bpl.n	801b78a <_printf_i+0x162>
 801b772:	07ca      	lsls	r2, r1, #31
 801b774:	bf44      	itt	mi
 801b776:	f041 0120 	orrmi.w	r1, r1, #32
 801b77a:	6021      	strmi	r1, [r4, #0]
 801b77c:	b91b      	cbnz	r3, 801b786 <_printf_i+0x15e>
 801b77e:	6822      	ldr	r2, [r4, #0]
 801b780:	f022 0220 	bic.w	r2, r2, #32
 801b784:	6022      	str	r2, [r4, #0]
 801b786:	2210      	movs	r2, #16
 801b788:	e7b7      	b.n	801b6fa <_printf_i+0xd2>
 801b78a:	064d      	lsls	r5, r1, #25
 801b78c:	bf48      	it	mi
 801b78e:	b29b      	uxthmi	r3, r3
 801b790:	e7ef      	b.n	801b772 <_printf_i+0x14a>
 801b792:	4665      	mov	r5, ip
 801b794:	fbb3 f1f2 	udiv	r1, r3, r2
 801b798:	fb02 3311 	mls	r3, r2, r1, r3
 801b79c:	5cc3      	ldrb	r3, [r0, r3]
 801b79e:	f805 3d01 	strb.w	r3, [r5, #-1]!
 801b7a2:	460b      	mov	r3, r1
 801b7a4:	2900      	cmp	r1, #0
 801b7a6:	d1f5      	bne.n	801b794 <_printf_i+0x16c>
 801b7a8:	e7b9      	b.n	801b71e <_printf_i+0xf6>
 801b7aa:	6813      	ldr	r3, [r2, #0]
 801b7ac:	6825      	ldr	r5, [r4, #0]
 801b7ae:	6961      	ldr	r1, [r4, #20]
 801b7b0:	1d18      	adds	r0, r3, #4
 801b7b2:	6010      	str	r0, [r2, #0]
 801b7b4:	0628      	lsls	r0, r5, #24
 801b7b6:	681b      	ldr	r3, [r3, #0]
 801b7b8:	d501      	bpl.n	801b7be <_printf_i+0x196>
 801b7ba:	6019      	str	r1, [r3, #0]
 801b7bc:	e002      	b.n	801b7c4 <_printf_i+0x19c>
 801b7be:	066a      	lsls	r2, r5, #25
 801b7c0:	d5fb      	bpl.n	801b7ba <_printf_i+0x192>
 801b7c2:	8019      	strh	r1, [r3, #0]
 801b7c4:	2300      	movs	r3, #0
 801b7c6:	6123      	str	r3, [r4, #16]
 801b7c8:	4665      	mov	r5, ip
 801b7ca:	e7b9      	b.n	801b740 <_printf_i+0x118>
 801b7cc:	6813      	ldr	r3, [r2, #0]
 801b7ce:	1d19      	adds	r1, r3, #4
 801b7d0:	6011      	str	r1, [r2, #0]
 801b7d2:	681d      	ldr	r5, [r3, #0]
 801b7d4:	6862      	ldr	r2, [r4, #4]
 801b7d6:	2100      	movs	r1, #0
 801b7d8:	4628      	mov	r0, r5
 801b7da:	f7e4 fd09 	bl	80001f0 <memchr>
 801b7de:	b108      	cbz	r0, 801b7e4 <_printf_i+0x1bc>
 801b7e0:	1b40      	subs	r0, r0, r5
 801b7e2:	6060      	str	r0, [r4, #4]
 801b7e4:	6863      	ldr	r3, [r4, #4]
 801b7e6:	6123      	str	r3, [r4, #16]
 801b7e8:	2300      	movs	r3, #0
 801b7ea:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801b7ee:	e7a7      	b.n	801b740 <_printf_i+0x118>
 801b7f0:	6923      	ldr	r3, [r4, #16]
 801b7f2:	462a      	mov	r2, r5
 801b7f4:	4639      	mov	r1, r7
 801b7f6:	4630      	mov	r0, r6
 801b7f8:	47c0      	blx	r8
 801b7fa:	3001      	adds	r0, #1
 801b7fc:	d0aa      	beq.n	801b754 <_printf_i+0x12c>
 801b7fe:	6823      	ldr	r3, [r4, #0]
 801b800:	079b      	lsls	r3, r3, #30
 801b802:	d413      	bmi.n	801b82c <_printf_i+0x204>
 801b804:	68e0      	ldr	r0, [r4, #12]
 801b806:	9b03      	ldr	r3, [sp, #12]
 801b808:	4298      	cmp	r0, r3
 801b80a:	bfb8      	it	lt
 801b80c:	4618      	movlt	r0, r3
 801b80e:	e7a3      	b.n	801b758 <_printf_i+0x130>
 801b810:	2301      	movs	r3, #1
 801b812:	464a      	mov	r2, r9
 801b814:	4639      	mov	r1, r7
 801b816:	4630      	mov	r0, r6
 801b818:	47c0      	blx	r8
 801b81a:	3001      	adds	r0, #1
 801b81c:	d09a      	beq.n	801b754 <_printf_i+0x12c>
 801b81e:	3501      	adds	r5, #1
 801b820:	68e3      	ldr	r3, [r4, #12]
 801b822:	9a03      	ldr	r2, [sp, #12]
 801b824:	1a9b      	subs	r3, r3, r2
 801b826:	42ab      	cmp	r3, r5
 801b828:	dcf2      	bgt.n	801b810 <_printf_i+0x1e8>
 801b82a:	e7eb      	b.n	801b804 <_printf_i+0x1dc>
 801b82c:	2500      	movs	r5, #0
 801b82e:	f104 0919 	add.w	r9, r4, #25
 801b832:	e7f5      	b.n	801b820 <_printf_i+0x1f8>
 801b834:	2b00      	cmp	r3, #0
 801b836:	d1ac      	bne.n	801b792 <_printf_i+0x16a>
 801b838:	7803      	ldrb	r3, [r0, #0]
 801b83a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801b83e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801b842:	e76c      	b.n	801b71e <_printf_i+0xf6>
 801b844:	0801e891 	.word	0x0801e891
 801b848:	0801e8a2 	.word	0x0801e8a2

0801b84c <__sread>:
 801b84c:	b510      	push	{r4, lr}
 801b84e:	460c      	mov	r4, r1
 801b850:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801b854:	f000 fa86 	bl	801bd64 <_read_r>
 801b858:	2800      	cmp	r0, #0
 801b85a:	bfab      	itete	ge
 801b85c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801b85e:	89a3      	ldrhlt	r3, [r4, #12]
 801b860:	181b      	addge	r3, r3, r0
 801b862:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801b866:	bfac      	ite	ge
 801b868:	6563      	strge	r3, [r4, #84]	; 0x54
 801b86a:	81a3      	strhlt	r3, [r4, #12]
 801b86c:	bd10      	pop	{r4, pc}

0801b86e <__swrite>:
 801b86e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b872:	461f      	mov	r7, r3
 801b874:	898b      	ldrh	r3, [r1, #12]
 801b876:	05db      	lsls	r3, r3, #23
 801b878:	4605      	mov	r5, r0
 801b87a:	460c      	mov	r4, r1
 801b87c:	4616      	mov	r6, r2
 801b87e:	d505      	bpl.n	801b88c <__swrite+0x1e>
 801b880:	2302      	movs	r3, #2
 801b882:	2200      	movs	r2, #0
 801b884:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801b888:	f000 f9b6 	bl	801bbf8 <_lseek_r>
 801b88c:	89a3      	ldrh	r3, [r4, #12]
 801b88e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801b892:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801b896:	81a3      	strh	r3, [r4, #12]
 801b898:	4632      	mov	r2, r6
 801b89a:	463b      	mov	r3, r7
 801b89c:	4628      	mov	r0, r5
 801b89e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801b8a2:	f000 b869 	b.w	801b978 <_write_r>

0801b8a6 <__sseek>:
 801b8a6:	b510      	push	{r4, lr}
 801b8a8:	460c      	mov	r4, r1
 801b8aa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801b8ae:	f000 f9a3 	bl	801bbf8 <_lseek_r>
 801b8b2:	1c43      	adds	r3, r0, #1
 801b8b4:	89a3      	ldrh	r3, [r4, #12]
 801b8b6:	bf15      	itete	ne
 801b8b8:	6560      	strne	r0, [r4, #84]	; 0x54
 801b8ba:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801b8be:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801b8c2:	81a3      	strheq	r3, [r4, #12]
 801b8c4:	bf18      	it	ne
 801b8c6:	81a3      	strhne	r3, [r4, #12]
 801b8c8:	bd10      	pop	{r4, pc}

0801b8ca <__sclose>:
 801b8ca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801b8ce:	f000 b8d3 	b.w	801ba78 <_close_r>
	...

0801b8d4 <__swbuf_r>:
 801b8d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b8d6:	460e      	mov	r6, r1
 801b8d8:	4614      	mov	r4, r2
 801b8da:	4605      	mov	r5, r0
 801b8dc:	b118      	cbz	r0, 801b8e6 <__swbuf_r+0x12>
 801b8de:	6983      	ldr	r3, [r0, #24]
 801b8e0:	b90b      	cbnz	r3, 801b8e6 <__swbuf_r+0x12>
 801b8e2:	f7ff fb0d 	bl	801af00 <__sinit>
 801b8e6:	4b21      	ldr	r3, [pc, #132]	; (801b96c <__swbuf_r+0x98>)
 801b8e8:	429c      	cmp	r4, r3
 801b8ea:	d12a      	bne.n	801b942 <__swbuf_r+0x6e>
 801b8ec:	686c      	ldr	r4, [r5, #4]
 801b8ee:	69a3      	ldr	r3, [r4, #24]
 801b8f0:	60a3      	str	r3, [r4, #8]
 801b8f2:	89a3      	ldrh	r3, [r4, #12]
 801b8f4:	071a      	lsls	r2, r3, #28
 801b8f6:	d52e      	bpl.n	801b956 <__swbuf_r+0x82>
 801b8f8:	6923      	ldr	r3, [r4, #16]
 801b8fa:	b363      	cbz	r3, 801b956 <__swbuf_r+0x82>
 801b8fc:	6923      	ldr	r3, [r4, #16]
 801b8fe:	6820      	ldr	r0, [r4, #0]
 801b900:	1ac0      	subs	r0, r0, r3
 801b902:	6963      	ldr	r3, [r4, #20]
 801b904:	b2f6      	uxtb	r6, r6
 801b906:	4283      	cmp	r3, r0
 801b908:	4637      	mov	r7, r6
 801b90a:	dc04      	bgt.n	801b916 <__swbuf_r+0x42>
 801b90c:	4621      	mov	r1, r4
 801b90e:	4628      	mov	r0, r5
 801b910:	f000 f948 	bl	801bba4 <_fflush_r>
 801b914:	bb28      	cbnz	r0, 801b962 <__swbuf_r+0x8e>
 801b916:	68a3      	ldr	r3, [r4, #8]
 801b918:	3b01      	subs	r3, #1
 801b91a:	60a3      	str	r3, [r4, #8]
 801b91c:	6823      	ldr	r3, [r4, #0]
 801b91e:	1c5a      	adds	r2, r3, #1
 801b920:	6022      	str	r2, [r4, #0]
 801b922:	701e      	strb	r6, [r3, #0]
 801b924:	6963      	ldr	r3, [r4, #20]
 801b926:	3001      	adds	r0, #1
 801b928:	4283      	cmp	r3, r0
 801b92a:	d004      	beq.n	801b936 <__swbuf_r+0x62>
 801b92c:	89a3      	ldrh	r3, [r4, #12]
 801b92e:	07db      	lsls	r3, r3, #31
 801b930:	d519      	bpl.n	801b966 <__swbuf_r+0x92>
 801b932:	2e0a      	cmp	r6, #10
 801b934:	d117      	bne.n	801b966 <__swbuf_r+0x92>
 801b936:	4621      	mov	r1, r4
 801b938:	4628      	mov	r0, r5
 801b93a:	f000 f933 	bl	801bba4 <_fflush_r>
 801b93e:	b190      	cbz	r0, 801b966 <__swbuf_r+0x92>
 801b940:	e00f      	b.n	801b962 <__swbuf_r+0x8e>
 801b942:	4b0b      	ldr	r3, [pc, #44]	; (801b970 <__swbuf_r+0x9c>)
 801b944:	429c      	cmp	r4, r3
 801b946:	d101      	bne.n	801b94c <__swbuf_r+0x78>
 801b948:	68ac      	ldr	r4, [r5, #8]
 801b94a:	e7d0      	b.n	801b8ee <__swbuf_r+0x1a>
 801b94c:	4b09      	ldr	r3, [pc, #36]	; (801b974 <__swbuf_r+0xa0>)
 801b94e:	429c      	cmp	r4, r3
 801b950:	bf08      	it	eq
 801b952:	68ec      	ldreq	r4, [r5, #12]
 801b954:	e7cb      	b.n	801b8ee <__swbuf_r+0x1a>
 801b956:	4621      	mov	r1, r4
 801b958:	4628      	mov	r0, r5
 801b95a:	f000 f81f 	bl	801b99c <__swsetup_r>
 801b95e:	2800      	cmp	r0, #0
 801b960:	d0cc      	beq.n	801b8fc <__swbuf_r+0x28>
 801b962:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 801b966:	4638      	mov	r0, r7
 801b968:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801b96a:	bf00      	nop
 801b96c:	0801e840 	.word	0x0801e840
 801b970:	0801e860 	.word	0x0801e860
 801b974:	0801e820 	.word	0x0801e820

0801b978 <_write_r>:
 801b978:	b538      	push	{r3, r4, r5, lr}
 801b97a:	4c07      	ldr	r4, [pc, #28]	; (801b998 <_write_r+0x20>)
 801b97c:	4605      	mov	r5, r0
 801b97e:	4608      	mov	r0, r1
 801b980:	4611      	mov	r1, r2
 801b982:	2200      	movs	r2, #0
 801b984:	6022      	str	r2, [r4, #0]
 801b986:	461a      	mov	r2, r3
 801b988:	f7e6 fa9b 	bl	8001ec2 <_write>
 801b98c:	1c43      	adds	r3, r0, #1
 801b98e:	d102      	bne.n	801b996 <_write_r+0x1e>
 801b990:	6823      	ldr	r3, [r4, #0]
 801b992:	b103      	cbz	r3, 801b996 <_write_r+0x1e>
 801b994:	602b      	str	r3, [r5, #0]
 801b996:	bd38      	pop	{r3, r4, r5, pc}
 801b998:	2000ab5c 	.word	0x2000ab5c

0801b99c <__swsetup_r>:
 801b99c:	4b32      	ldr	r3, [pc, #200]	; (801ba68 <__swsetup_r+0xcc>)
 801b99e:	b570      	push	{r4, r5, r6, lr}
 801b9a0:	681d      	ldr	r5, [r3, #0]
 801b9a2:	4606      	mov	r6, r0
 801b9a4:	460c      	mov	r4, r1
 801b9a6:	b125      	cbz	r5, 801b9b2 <__swsetup_r+0x16>
 801b9a8:	69ab      	ldr	r3, [r5, #24]
 801b9aa:	b913      	cbnz	r3, 801b9b2 <__swsetup_r+0x16>
 801b9ac:	4628      	mov	r0, r5
 801b9ae:	f7ff faa7 	bl	801af00 <__sinit>
 801b9b2:	4b2e      	ldr	r3, [pc, #184]	; (801ba6c <__swsetup_r+0xd0>)
 801b9b4:	429c      	cmp	r4, r3
 801b9b6:	d10f      	bne.n	801b9d8 <__swsetup_r+0x3c>
 801b9b8:	686c      	ldr	r4, [r5, #4]
 801b9ba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801b9be:	b29a      	uxth	r2, r3
 801b9c0:	0715      	lsls	r5, r2, #28
 801b9c2:	d42c      	bmi.n	801ba1e <__swsetup_r+0x82>
 801b9c4:	06d0      	lsls	r0, r2, #27
 801b9c6:	d411      	bmi.n	801b9ec <__swsetup_r+0x50>
 801b9c8:	2209      	movs	r2, #9
 801b9ca:	6032      	str	r2, [r6, #0]
 801b9cc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801b9d0:	81a3      	strh	r3, [r4, #12]
 801b9d2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801b9d6:	e03e      	b.n	801ba56 <__swsetup_r+0xba>
 801b9d8:	4b25      	ldr	r3, [pc, #148]	; (801ba70 <__swsetup_r+0xd4>)
 801b9da:	429c      	cmp	r4, r3
 801b9dc:	d101      	bne.n	801b9e2 <__swsetup_r+0x46>
 801b9de:	68ac      	ldr	r4, [r5, #8]
 801b9e0:	e7eb      	b.n	801b9ba <__swsetup_r+0x1e>
 801b9e2:	4b24      	ldr	r3, [pc, #144]	; (801ba74 <__swsetup_r+0xd8>)
 801b9e4:	429c      	cmp	r4, r3
 801b9e6:	bf08      	it	eq
 801b9e8:	68ec      	ldreq	r4, [r5, #12]
 801b9ea:	e7e6      	b.n	801b9ba <__swsetup_r+0x1e>
 801b9ec:	0751      	lsls	r1, r2, #29
 801b9ee:	d512      	bpl.n	801ba16 <__swsetup_r+0x7a>
 801b9f0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801b9f2:	b141      	cbz	r1, 801ba06 <__swsetup_r+0x6a>
 801b9f4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801b9f8:	4299      	cmp	r1, r3
 801b9fa:	d002      	beq.n	801ba02 <__swsetup_r+0x66>
 801b9fc:	4630      	mov	r0, r6
 801b9fe:	f7ff f94f 	bl	801aca0 <_free_r>
 801ba02:	2300      	movs	r3, #0
 801ba04:	6363      	str	r3, [r4, #52]	; 0x34
 801ba06:	89a3      	ldrh	r3, [r4, #12]
 801ba08:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801ba0c:	81a3      	strh	r3, [r4, #12]
 801ba0e:	2300      	movs	r3, #0
 801ba10:	6063      	str	r3, [r4, #4]
 801ba12:	6923      	ldr	r3, [r4, #16]
 801ba14:	6023      	str	r3, [r4, #0]
 801ba16:	89a3      	ldrh	r3, [r4, #12]
 801ba18:	f043 0308 	orr.w	r3, r3, #8
 801ba1c:	81a3      	strh	r3, [r4, #12]
 801ba1e:	6923      	ldr	r3, [r4, #16]
 801ba20:	b94b      	cbnz	r3, 801ba36 <__swsetup_r+0x9a>
 801ba22:	89a3      	ldrh	r3, [r4, #12]
 801ba24:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801ba28:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801ba2c:	d003      	beq.n	801ba36 <__swsetup_r+0x9a>
 801ba2e:	4621      	mov	r1, r4
 801ba30:	4630      	mov	r0, r6
 801ba32:	f000 f917 	bl	801bc64 <__smakebuf_r>
 801ba36:	89a2      	ldrh	r2, [r4, #12]
 801ba38:	f012 0301 	ands.w	r3, r2, #1
 801ba3c:	d00c      	beq.n	801ba58 <__swsetup_r+0xbc>
 801ba3e:	2300      	movs	r3, #0
 801ba40:	60a3      	str	r3, [r4, #8]
 801ba42:	6963      	ldr	r3, [r4, #20]
 801ba44:	425b      	negs	r3, r3
 801ba46:	61a3      	str	r3, [r4, #24]
 801ba48:	6923      	ldr	r3, [r4, #16]
 801ba4a:	b953      	cbnz	r3, 801ba62 <__swsetup_r+0xc6>
 801ba4c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801ba50:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 801ba54:	d1ba      	bne.n	801b9cc <__swsetup_r+0x30>
 801ba56:	bd70      	pop	{r4, r5, r6, pc}
 801ba58:	0792      	lsls	r2, r2, #30
 801ba5a:	bf58      	it	pl
 801ba5c:	6963      	ldrpl	r3, [r4, #20]
 801ba5e:	60a3      	str	r3, [r4, #8]
 801ba60:	e7f2      	b.n	801ba48 <__swsetup_r+0xac>
 801ba62:	2000      	movs	r0, #0
 801ba64:	e7f7      	b.n	801ba56 <__swsetup_r+0xba>
 801ba66:	bf00      	nop
 801ba68:	20000188 	.word	0x20000188
 801ba6c:	0801e840 	.word	0x0801e840
 801ba70:	0801e860 	.word	0x0801e860
 801ba74:	0801e820 	.word	0x0801e820

0801ba78 <_close_r>:
 801ba78:	b538      	push	{r3, r4, r5, lr}
 801ba7a:	4c06      	ldr	r4, [pc, #24]	; (801ba94 <_close_r+0x1c>)
 801ba7c:	2300      	movs	r3, #0
 801ba7e:	4605      	mov	r5, r0
 801ba80:	4608      	mov	r0, r1
 801ba82:	6023      	str	r3, [r4, #0]
 801ba84:	f7e6 fa39 	bl	8001efa <_close>
 801ba88:	1c43      	adds	r3, r0, #1
 801ba8a:	d102      	bne.n	801ba92 <_close_r+0x1a>
 801ba8c:	6823      	ldr	r3, [r4, #0]
 801ba8e:	b103      	cbz	r3, 801ba92 <_close_r+0x1a>
 801ba90:	602b      	str	r3, [r5, #0]
 801ba92:	bd38      	pop	{r3, r4, r5, pc}
 801ba94:	2000ab5c 	.word	0x2000ab5c

0801ba98 <__sflush_r>:
 801ba98:	898a      	ldrh	r2, [r1, #12]
 801ba9a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801ba9e:	4605      	mov	r5, r0
 801baa0:	0710      	lsls	r0, r2, #28
 801baa2:	460c      	mov	r4, r1
 801baa4:	d458      	bmi.n	801bb58 <__sflush_r+0xc0>
 801baa6:	684b      	ldr	r3, [r1, #4]
 801baa8:	2b00      	cmp	r3, #0
 801baaa:	dc05      	bgt.n	801bab8 <__sflush_r+0x20>
 801baac:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801baae:	2b00      	cmp	r3, #0
 801bab0:	dc02      	bgt.n	801bab8 <__sflush_r+0x20>
 801bab2:	2000      	movs	r0, #0
 801bab4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801bab8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801baba:	2e00      	cmp	r6, #0
 801babc:	d0f9      	beq.n	801bab2 <__sflush_r+0x1a>
 801babe:	2300      	movs	r3, #0
 801bac0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801bac4:	682f      	ldr	r7, [r5, #0]
 801bac6:	6a21      	ldr	r1, [r4, #32]
 801bac8:	602b      	str	r3, [r5, #0]
 801baca:	d032      	beq.n	801bb32 <__sflush_r+0x9a>
 801bacc:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801bace:	89a3      	ldrh	r3, [r4, #12]
 801bad0:	075a      	lsls	r2, r3, #29
 801bad2:	d505      	bpl.n	801bae0 <__sflush_r+0x48>
 801bad4:	6863      	ldr	r3, [r4, #4]
 801bad6:	1ac0      	subs	r0, r0, r3
 801bad8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801bada:	b10b      	cbz	r3, 801bae0 <__sflush_r+0x48>
 801badc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801bade:	1ac0      	subs	r0, r0, r3
 801bae0:	2300      	movs	r3, #0
 801bae2:	4602      	mov	r2, r0
 801bae4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801bae6:	6a21      	ldr	r1, [r4, #32]
 801bae8:	4628      	mov	r0, r5
 801baea:	47b0      	blx	r6
 801baec:	1c43      	adds	r3, r0, #1
 801baee:	89a3      	ldrh	r3, [r4, #12]
 801baf0:	d106      	bne.n	801bb00 <__sflush_r+0x68>
 801baf2:	6829      	ldr	r1, [r5, #0]
 801baf4:	291d      	cmp	r1, #29
 801baf6:	d848      	bhi.n	801bb8a <__sflush_r+0xf2>
 801baf8:	4a29      	ldr	r2, [pc, #164]	; (801bba0 <__sflush_r+0x108>)
 801bafa:	40ca      	lsrs	r2, r1
 801bafc:	07d6      	lsls	r6, r2, #31
 801bafe:	d544      	bpl.n	801bb8a <__sflush_r+0xf2>
 801bb00:	2200      	movs	r2, #0
 801bb02:	6062      	str	r2, [r4, #4]
 801bb04:	04d9      	lsls	r1, r3, #19
 801bb06:	6922      	ldr	r2, [r4, #16]
 801bb08:	6022      	str	r2, [r4, #0]
 801bb0a:	d504      	bpl.n	801bb16 <__sflush_r+0x7e>
 801bb0c:	1c42      	adds	r2, r0, #1
 801bb0e:	d101      	bne.n	801bb14 <__sflush_r+0x7c>
 801bb10:	682b      	ldr	r3, [r5, #0]
 801bb12:	b903      	cbnz	r3, 801bb16 <__sflush_r+0x7e>
 801bb14:	6560      	str	r0, [r4, #84]	; 0x54
 801bb16:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801bb18:	602f      	str	r7, [r5, #0]
 801bb1a:	2900      	cmp	r1, #0
 801bb1c:	d0c9      	beq.n	801bab2 <__sflush_r+0x1a>
 801bb1e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801bb22:	4299      	cmp	r1, r3
 801bb24:	d002      	beq.n	801bb2c <__sflush_r+0x94>
 801bb26:	4628      	mov	r0, r5
 801bb28:	f7ff f8ba 	bl	801aca0 <_free_r>
 801bb2c:	2000      	movs	r0, #0
 801bb2e:	6360      	str	r0, [r4, #52]	; 0x34
 801bb30:	e7c0      	b.n	801bab4 <__sflush_r+0x1c>
 801bb32:	2301      	movs	r3, #1
 801bb34:	4628      	mov	r0, r5
 801bb36:	47b0      	blx	r6
 801bb38:	1c41      	adds	r1, r0, #1
 801bb3a:	d1c8      	bne.n	801bace <__sflush_r+0x36>
 801bb3c:	682b      	ldr	r3, [r5, #0]
 801bb3e:	2b00      	cmp	r3, #0
 801bb40:	d0c5      	beq.n	801bace <__sflush_r+0x36>
 801bb42:	2b1d      	cmp	r3, #29
 801bb44:	d001      	beq.n	801bb4a <__sflush_r+0xb2>
 801bb46:	2b16      	cmp	r3, #22
 801bb48:	d101      	bne.n	801bb4e <__sflush_r+0xb6>
 801bb4a:	602f      	str	r7, [r5, #0]
 801bb4c:	e7b1      	b.n	801bab2 <__sflush_r+0x1a>
 801bb4e:	89a3      	ldrh	r3, [r4, #12]
 801bb50:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801bb54:	81a3      	strh	r3, [r4, #12]
 801bb56:	e7ad      	b.n	801bab4 <__sflush_r+0x1c>
 801bb58:	690f      	ldr	r7, [r1, #16]
 801bb5a:	2f00      	cmp	r7, #0
 801bb5c:	d0a9      	beq.n	801bab2 <__sflush_r+0x1a>
 801bb5e:	0793      	lsls	r3, r2, #30
 801bb60:	680e      	ldr	r6, [r1, #0]
 801bb62:	bf08      	it	eq
 801bb64:	694b      	ldreq	r3, [r1, #20]
 801bb66:	600f      	str	r7, [r1, #0]
 801bb68:	bf18      	it	ne
 801bb6a:	2300      	movne	r3, #0
 801bb6c:	eba6 0807 	sub.w	r8, r6, r7
 801bb70:	608b      	str	r3, [r1, #8]
 801bb72:	f1b8 0f00 	cmp.w	r8, #0
 801bb76:	dd9c      	ble.n	801bab2 <__sflush_r+0x1a>
 801bb78:	4643      	mov	r3, r8
 801bb7a:	463a      	mov	r2, r7
 801bb7c:	6a21      	ldr	r1, [r4, #32]
 801bb7e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801bb80:	4628      	mov	r0, r5
 801bb82:	47b0      	blx	r6
 801bb84:	2800      	cmp	r0, #0
 801bb86:	dc06      	bgt.n	801bb96 <__sflush_r+0xfe>
 801bb88:	89a3      	ldrh	r3, [r4, #12]
 801bb8a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801bb8e:	81a3      	strh	r3, [r4, #12]
 801bb90:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801bb94:	e78e      	b.n	801bab4 <__sflush_r+0x1c>
 801bb96:	4407      	add	r7, r0
 801bb98:	eba8 0800 	sub.w	r8, r8, r0
 801bb9c:	e7e9      	b.n	801bb72 <__sflush_r+0xda>
 801bb9e:	bf00      	nop
 801bba0:	20400001 	.word	0x20400001

0801bba4 <_fflush_r>:
 801bba4:	b538      	push	{r3, r4, r5, lr}
 801bba6:	690b      	ldr	r3, [r1, #16]
 801bba8:	4605      	mov	r5, r0
 801bbaa:	460c      	mov	r4, r1
 801bbac:	b1db      	cbz	r3, 801bbe6 <_fflush_r+0x42>
 801bbae:	b118      	cbz	r0, 801bbb8 <_fflush_r+0x14>
 801bbb0:	6983      	ldr	r3, [r0, #24]
 801bbb2:	b90b      	cbnz	r3, 801bbb8 <_fflush_r+0x14>
 801bbb4:	f7ff f9a4 	bl	801af00 <__sinit>
 801bbb8:	4b0c      	ldr	r3, [pc, #48]	; (801bbec <_fflush_r+0x48>)
 801bbba:	429c      	cmp	r4, r3
 801bbbc:	d109      	bne.n	801bbd2 <_fflush_r+0x2e>
 801bbbe:	686c      	ldr	r4, [r5, #4]
 801bbc0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801bbc4:	b17b      	cbz	r3, 801bbe6 <_fflush_r+0x42>
 801bbc6:	4621      	mov	r1, r4
 801bbc8:	4628      	mov	r0, r5
 801bbca:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801bbce:	f7ff bf63 	b.w	801ba98 <__sflush_r>
 801bbd2:	4b07      	ldr	r3, [pc, #28]	; (801bbf0 <_fflush_r+0x4c>)
 801bbd4:	429c      	cmp	r4, r3
 801bbd6:	d101      	bne.n	801bbdc <_fflush_r+0x38>
 801bbd8:	68ac      	ldr	r4, [r5, #8]
 801bbda:	e7f1      	b.n	801bbc0 <_fflush_r+0x1c>
 801bbdc:	4b05      	ldr	r3, [pc, #20]	; (801bbf4 <_fflush_r+0x50>)
 801bbde:	429c      	cmp	r4, r3
 801bbe0:	bf08      	it	eq
 801bbe2:	68ec      	ldreq	r4, [r5, #12]
 801bbe4:	e7ec      	b.n	801bbc0 <_fflush_r+0x1c>
 801bbe6:	2000      	movs	r0, #0
 801bbe8:	bd38      	pop	{r3, r4, r5, pc}
 801bbea:	bf00      	nop
 801bbec:	0801e840 	.word	0x0801e840
 801bbf0:	0801e860 	.word	0x0801e860
 801bbf4:	0801e820 	.word	0x0801e820

0801bbf8 <_lseek_r>:
 801bbf8:	b538      	push	{r3, r4, r5, lr}
 801bbfa:	4c07      	ldr	r4, [pc, #28]	; (801bc18 <_lseek_r+0x20>)
 801bbfc:	4605      	mov	r5, r0
 801bbfe:	4608      	mov	r0, r1
 801bc00:	4611      	mov	r1, r2
 801bc02:	2200      	movs	r2, #0
 801bc04:	6022      	str	r2, [r4, #0]
 801bc06:	461a      	mov	r2, r3
 801bc08:	f7e6 f99e 	bl	8001f48 <_lseek>
 801bc0c:	1c43      	adds	r3, r0, #1
 801bc0e:	d102      	bne.n	801bc16 <_lseek_r+0x1e>
 801bc10:	6823      	ldr	r3, [r4, #0]
 801bc12:	b103      	cbz	r3, 801bc16 <_lseek_r+0x1e>
 801bc14:	602b      	str	r3, [r5, #0]
 801bc16:	bd38      	pop	{r3, r4, r5, pc}
 801bc18:	2000ab5c 	.word	0x2000ab5c

0801bc1c <__swhatbuf_r>:
 801bc1c:	b570      	push	{r4, r5, r6, lr}
 801bc1e:	460e      	mov	r6, r1
 801bc20:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801bc24:	2900      	cmp	r1, #0
 801bc26:	b096      	sub	sp, #88	; 0x58
 801bc28:	4614      	mov	r4, r2
 801bc2a:	461d      	mov	r5, r3
 801bc2c:	da07      	bge.n	801bc3e <__swhatbuf_r+0x22>
 801bc2e:	2300      	movs	r3, #0
 801bc30:	602b      	str	r3, [r5, #0]
 801bc32:	89b3      	ldrh	r3, [r6, #12]
 801bc34:	061a      	lsls	r2, r3, #24
 801bc36:	d410      	bmi.n	801bc5a <__swhatbuf_r+0x3e>
 801bc38:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801bc3c:	e00e      	b.n	801bc5c <__swhatbuf_r+0x40>
 801bc3e:	466a      	mov	r2, sp
 801bc40:	f000 f8a2 	bl	801bd88 <_fstat_r>
 801bc44:	2800      	cmp	r0, #0
 801bc46:	dbf2      	blt.n	801bc2e <__swhatbuf_r+0x12>
 801bc48:	9a01      	ldr	r2, [sp, #4]
 801bc4a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801bc4e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801bc52:	425a      	negs	r2, r3
 801bc54:	415a      	adcs	r2, r3
 801bc56:	602a      	str	r2, [r5, #0]
 801bc58:	e7ee      	b.n	801bc38 <__swhatbuf_r+0x1c>
 801bc5a:	2340      	movs	r3, #64	; 0x40
 801bc5c:	2000      	movs	r0, #0
 801bc5e:	6023      	str	r3, [r4, #0]
 801bc60:	b016      	add	sp, #88	; 0x58
 801bc62:	bd70      	pop	{r4, r5, r6, pc}

0801bc64 <__smakebuf_r>:
 801bc64:	898b      	ldrh	r3, [r1, #12]
 801bc66:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801bc68:	079d      	lsls	r5, r3, #30
 801bc6a:	4606      	mov	r6, r0
 801bc6c:	460c      	mov	r4, r1
 801bc6e:	d507      	bpl.n	801bc80 <__smakebuf_r+0x1c>
 801bc70:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801bc74:	6023      	str	r3, [r4, #0]
 801bc76:	6123      	str	r3, [r4, #16]
 801bc78:	2301      	movs	r3, #1
 801bc7a:	6163      	str	r3, [r4, #20]
 801bc7c:	b002      	add	sp, #8
 801bc7e:	bd70      	pop	{r4, r5, r6, pc}
 801bc80:	ab01      	add	r3, sp, #4
 801bc82:	466a      	mov	r2, sp
 801bc84:	f7ff ffca 	bl	801bc1c <__swhatbuf_r>
 801bc88:	9900      	ldr	r1, [sp, #0]
 801bc8a:	4605      	mov	r5, r0
 801bc8c:	4630      	mov	r0, r6
 801bc8e:	f7ff f855 	bl	801ad3c <_malloc_r>
 801bc92:	b948      	cbnz	r0, 801bca8 <__smakebuf_r+0x44>
 801bc94:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801bc98:	059a      	lsls	r2, r3, #22
 801bc9a:	d4ef      	bmi.n	801bc7c <__smakebuf_r+0x18>
 801bc9c:	f023 0303 	bic.w	r3, r3, #3
 801bca0:	f043 0302 	orr.w	r3, r3, #2
 801bca4:	81a3      	strh	r3, [r4, #12]
 801bca6:	e7e3      	b.n	801bc70 <__smakebuf_r+0xc>
 801bca8:	4b0d      	ldr	r3, [pc, #52]	; (801bce0 <__smakebuf_r+0x7c>)
 801bcaa:	62b3      	str	r3, [r6, #40]	; 0x28
 801bcac:	89a3      	ldrh	r3, [r4, #12]
 801bcae:	6020      	str	r0, [r4, #0]
 801bcb0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801bcb4:	81a3      	strh	r3, [r4, #12]
 801bcb6:	9b00      	ldr	r3, [sp, #0]
 801bcb8:	6163      	str	r3, [r4, #20]
 801bcba:	9b01      	ldr	r3, [sp, #4]
 801bcbc:	6120      	str	r0, [r4, #16]
 801bcbe:	b15b      	cbz	r3, 801bcd8 <__smakebuf_r+0x74>
 801bcc0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801bcc4:	4630      	mov	r0, r6
 801bcc6:	f000 f871 	bl	801bdac <_isatty_r>
 801bcca:	b128      	cbz	r0, 801bcd8 <__smakebuf_r+0x74>
 801bccc:	89a3      	ldrh	r3, [r4, #12]
 801bcce:	f023 0303 	bic.w	r3, r3, #3
 801bcd2:	f043 0301 	orr.w	r3, r3, #1
 801bcd6:	81a3      	strh	r3, [r4, #12]
 801bcd8:	89a3      	ldrh	r3, [r4, #12]
 801bcda:	431d      	orrs	r5, r3
 801bcdc:	81a5      	strh	r5, [r4, #12]
 801bcde:	e7cd      	b.n	801bc7c <__smakebuf_r+0x18>
 801bce0:	0801aec9 	.word	0x0801aec9

0801bce4 <memmove>:
 801bce4:	4288      	cmp	r0, r1
 801bce6:	b510      	push	{r4, lr}
 801bce8:	eb01 0302 	add.w	r3, r1, r2
 801bcec:	d807      	bhi.n	801bcfe <memmove+0x1a>
 801bcee:	1e42      	subs	r2, r0, #1
 801bcf0:	4299      	cmp	r1, r3
 801bcf2:	d00a      	beq.n	801bd0a <memmove+0x26>
 801bcf4:	f811 4b01 	ldrb.w	r4, [r1], #1
 801bcf8:	f802 4f01 	strb.w	r4, [r2, #1]!
 801bcfc:	e7f8      	b.n	801bcf0 <memmove+0xc>
 801bcfe:	4283      	cmp	r3, r0
 801bd00:	d9f5      	bls.n	801bcee <memmove+0xa>
 801bd02:	1881      	adds	r1, r0, r2
 801bd04:	1ad2      	subs	r2, r2, r3
 801bd06:	42d3      	cmn	r3, r2
 801bd08:	d100      	bne.n	801bd0c <memmove+0x28>
 801bd0a:	bd10      	pop	{r4, pc}
 801bd0c:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801bd10:	f801 4d01 	strb.w	r4, [r1, #-1]!
 801bd14:	e7f7      	b.n	801bd06 <memmove+0x22>

0801bd16 <_realloc_r>:
 801bd16:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801bd18:	4607      	mov	r7, r0
 801bd1a:	4614      	mov	r4, r2
 801bd1c:	460e      	mov	r6, r1
 801bd1e:	b921      	cbnz	r1, 801bd2a <_realloc_r+0x14>
 801bd20:	4611      	mov	r1, r2
 801bd22:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 801bd26:	f7ff b809 	b.w	801ad3c <_malloc_r>
 801bd2a:	b922      	cbnz	r2, 801bd36 <_realloc_r+0x20>
 801bd2c:	f7fe ffb8 	bl	801aca0 <_free_r>
 801bd30:	4625      	mov	r5, r4
 801bd32:	4628      	mov	r0, r5
 801bd34:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801bd36:	f000 f849 	bl	801bdcc <_malloc_usable_size_r>
 801bd3a:	42a0      	cmp	r0, r4
 801bd3c:	d20f      	bcs.n	801bd5e <_realloc_r+0x48>
 801bd3e:	4621      	mov	r1, r4
 801bd40:	4638      	mov	r0, r7
 801bd42:	f7fe fffb 	bl	801ad3c <_malloc_r>
 801bd46:	4605      	mov	r5, r0
 801bd48:	2800      	cmp	r0, #0
 801bd4a:	d0f2      	beq.n	801bd32 <_realloc_r+0x1c>
 801bd4c:	4631      	mov	r1, r6
 801bd4e:	4622      	mov	r2, r4
 801bd50:	f7fe ff93 	bl	801ac7a <memcpy>
 801bd54:	4631      	mov	r1, r6
 801bd56:	4638      	mov	r0, r7
 801bd58:	f7fe ffa2 	bl	801aca0 <_free_r>
 801bd5c:	e7e9      	b.n	801bd32 <_realloc_r+0x1c>
 801bd5e:	4635      	mov	r5, r6
 801bd60:	e7e7      	b.n	801bd32 <_realloc_r+0x1c>
	...

0801bd64 <_read_r>:
 801bd64:	b538      	push	{r3, r4, r5, lr}
 801bd66:	4c07      	ldr	r4, [pc, #28]	; (801bd84 <_read_r+0x20>)
 801bd68:	4605      	mov	r5, r0
 801bd6a:	4608      	mov	r0, r1
 801bd6c:	4611      	mov	r1, r2
 801bd6e:	2200      	movs	r2, #0
 801bd70:	6022      	str	r2, [r4, #0]
 801bd72:	461a      	mov	r2, r3
 801bd74:	f7e6 f888 	bl	8001e88 <_read>
 801bd78:	1c43      	adds	r3, r0, #1
 801bd7a:	d102      	bne.n	801bd82 <_read_r+0x1e>
 801bd7c:	6823      	ldr	r3, [r4, #0]
 801bd7e:	b103      	cbz	r3, 801bd82 <_read_r+0x1e>
 801bd80:	602b      	str	r3, [r5, #0]
 801bd82:	bd38      	pop	{r3, r4, r5, pc}
 801bd84:	2000ab5c 	.word	0x2000ab5c

0801bd88 <_fstat_r>:
 801bd88:	b538      	push	{r3, r4, r5, lr}
 801bd8a:	4c07      	ldr	r4, [pc, #28]	; (801bda8 <_fstat_r+0x20>)
 801bd8c:	2300      	movs	r3, #0
 801bd8e:	4605      	mov	r5, r0
 801bd90:	4608      	mov	r0, r1
 801bd92:	4611      	mov	r1, r2
 801bd94:	6023      	str	r3, [r4, #0]
 801bd96:	f7e6 f8bc 	bl	8001f12 <_fstat>
 801bd9a:	1c43      	adds	r3, r0, #1
 801bd9c:	d102      	bne.n	801bda4 <_fstat_r+0x1c>
 801bd9e:	6823      	ldr	r3, [r4, #0]
 801bda0:	b103      	cbz	r3, 801bda4 <_fstat_r+0x1c>
 801bda2:	602b      	str	r3, [r5, #0]
 801bda4:	bd38      	pop	{r3, r4, r5, pc}
 801bda6:	bf00      	nop
 801bda8:	2000ab5c 	.word	0x2000ab5c

0801bdac <_isatty_r>:
 801bdac:	b538      	push	{r3, r4, r5, lr}
 801bdae:	4c06      	ldr	r4, [pc, #24]	; (801bdc8 <_isatty_r+0x1c>)
 801bdb0:	2300      	movs	r3, #0
 801bdb2:	4605      	mov	r5, r0
 801bdb4:	4608      	mov	r0, r1
 801bdb6:	6023      	str	r3, [r4, #0]
 801bdb8:	f7e6 f8bb 	bl	8001f32 <_isatty>
 801bdbc:	1c43      	adds	r3, r0, #1
 801bdbe:	d102      	bne.n	801bdc6 <_isatty_r+0x1a>
 801bdc0:	6823      	ldr	r3, [r4, #0]
 801bdc2:	b103      	cbz	r3, 801bdc6 <_isatty_r+0x1a>
 801bdc4:	602b      	str	r3, [r5, #0]
 801bdc6:	bd38      	pop	{r3, r4, r5, pc}
 801bdc8:	2000ab5c 	.word	0x2000ab5c

0801bdcc <_malloc_usable_size_r>:
 801bdcc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801bdd0:	1f18      	subs	r0, r3, #4
 801bdd2:	2b00      	cmp	r3, #0
 801bdd4:	bfbc      	itt	lt
 801bdd6:	580b      	ldrlt	r3, [r1, r0]
 801bdd8:	18c0      	addlt	r0, r0, r3
 801bdda:	4770      	bx	lr

0801bddc <_init>:
 801bddc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801bdde:	bf00      	nop
 801bde0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801bde2:	bc08      	pop	{r3}
 801bde4:	469e      	mov	lr, r3
 801bde6:	4770      	bx	lr

0801bde8 <_fini>:
 801bde8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801bdea:	bf00      	nop
 801bdec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801bdee:	bc08      	pop	{r3}
 801bdf0:	469e      	mov	lr, r3
 801bdf2:	4770      	bx	lr
