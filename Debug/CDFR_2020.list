
CDFR_2020.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008a2c  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000006c  08008bdc  08008bdc  00018bdc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008c48  08008c48  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08008c48  08008c48  00018c48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008c50  08008c50  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008c50  08008c50  00018c50  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008c54  08008c54  00018c54  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08008c58  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00007eb0  2000000c  08008c64  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20007ebc  08008c64  00027ebc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00025552  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00004abe  00000000  00000000  0004558e  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001ba0  00000000  00000000  0004a050  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001968  00000000  00000000  0004bbf0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002e001  00000000  00000000  0004d558  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00019611  00000000  00000000  0007b559  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00102adc  00000000  00000000  00094b6a  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00197646  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007278  00000000  00000000  001976c4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	2000000c 	.word	0x2000000c
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08008bc4 	.word	0x08008bc4

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000010 	.word	0x20000010
 80001ec:	08008bc4 	.word	0x08008bc4

080001f0 <__aeabi_uldivmod>:
 80001f0:	b953      	cbnz	r3, 8000208 <__aeabi_uldivmod+0x18>
 80001f2:	b94a      	cbnz	r2, 8000208 <__aeabi_uldivmod+0x18>
 80001f4:	2900      	cmp	r1, #0
 80001f6:	bf08      	it	eq
 80001f8:	2800      	cmpeq	r0, #0
 80001fa:	bf1c      	itt	ne
 80001fc:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000200:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000204:	f000 b972 	b.w	80004ec <__aeabi_idiv0>
 8000208:	f1ad 0c08 	sub.w	ip, sp, #8
 800020c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000210:	f000 f806 	bl	8000220 <__udivmoddi4>
 8000214:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000218:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800021c:	b004      	add	sp, #16
 800021e:	4770      	bx	lr

08000220 <__udivmoddi4>:
 8000220:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000224:	9e08      	ldr	r6, [sp, #32]
 8000226:	4604      	mov	r4, r0
 8000228:	4688      	mov	r8, r1
 800022a:	2b00      	cmp	r3, #0
 800022c:	d14b      	bne.n	80002c6 <__udivmoddi4+0xa6>
 800022e:	428a      	cmp	r2, r1
 8000230:	4615      	mov	r5, r2
 8000232:	d967      	bls.n	8000304 <__udivmoddi4+0xe4>
 8000234:	fab2 f282 	clz	r2, r2
 8000238:	b14a      	cbz	r2, 800024e <__udivmoddi4+0x2e>
 800023a:	f1c2 0720 	rsb	r7, r2, #32
 800023e:	fa01 f302 	lsl.w	r3, r1, r2
 8000242:	fa20 f707 	lsr.w	r7, r0, r7
 8000246:	4095      	lsls	r5, r2
 8000248:	ea47 0803 	orr.w	r8, r7, r3
 800024c:	4094      	lsls	r4, r2
 800024e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000252:	0c23      	lsrs	r3, r4, #16
 8000254:	fbb8 f7fe 	udiv	r7, r8, lr
 8000258:	fa1f fc85 	uxth.w	ip, r5
 800025c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000260:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000264:	fb07 f10c 	mul.w	r1, r7, ip
 8000268:	4299      	cmp	r1, r3
 800026a:	d909      	bls.n	8000280 <__udivmoddi4+0x60>
 800026c:	18eb      	adds	r3, r5, r3
 800026e:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 8000272:	f080 811b 	bcs.w	80004ac <__udivmoddi4+0x28c>
 8000276:	4299      	cmp	r1, r3
 8000278:	f240 8118 	bls.w	80004ac <__udivmoddi4+0x28c>
 800027c:	3f02      	subs	r7, #2
 800027e:	442b      	add	r3, r5
 8000280:	1a5b      	subs	r3, r3, r1
 8000282:	b2a4      	uxth	r4, r4
 8000284:	fbb3 f0fe 	udiv	r0, r3, lr
 8000288:	fb0e 3310 	mls	r3, lr, r0, r3
 800028c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000290:	fb00 fc0c 	mul.w	ip, r0, ip
 8000294:	45a4      	cmp	ip, r4
 8000296:	d909      	bls.n	80002ac <__udivmoddi4+0x8c>
 8000298:	192c      	adds	r4, r5, r4
 800029a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800029e:	f080 8107 	bcs.w	80004b0 <__udivmoddi4+0x290>
 80002a2:	45a4      	cmp	ip, r4
 80002a4:	f240 8104 	bls.w	80004b0 <__udivmoddi4+0x290>
 80002a8:	3802      	subs	r0, #2
 80002aa:	442c      	add	r4, r5
 80002ac:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002b0:	eba4 040c 	sub.w	r4, r4, ip
 80002b4:	2700      	movs	r7, #0
 80002b6:	b11e      	cbz	r6, 80002c0 <__udivmoddi4+0xa0>
 80002b8:	40d4      	lsrs	r4, r2
 80002ba:	2300      	movs	r3, #0
 80002bc:	e9c6 4300 	strd	r4, r3, [r6]
 80002c0:	4639      	mov	r1, r7
 80002c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d909      	bls.n	80002de <__udivmoddi4+0xbe>
 80002ca:	2e00      	cmp	r6, #0
 80002cc:	f000 80eb 	beq.w	80004a6 <__udivmoddi4+0x286>
 80002d0:	2700      	movs	r7, #0
 80002d2:	e9c6 0100 	strd	r0, r1, [r6]
 80002d6:	4638      	mov	r0, r7
 80002d8:	4639      	mov	r1, r7
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	fab3 f783 	clz	r7, r3
 80002e2:	2f00      	cmp	r7, #0
 80002e4:	d147      	bne.n	8000376 <__udivmoddi4+0x156>
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d302      	bcc.n	80002f0 <__udivmoddi4+0xd0>
 80002ea:	4282      	cmp	r2, r0
 80002ec:	f200 80fa 	bhi.w	80004e4 <__udivmoddi4+0x2c4>
 80002f0:	1a84      	subs	r4, r0, r2
 80002f2:	eb61 0303 	sbc.w	r3, r1, r3
 80002f6:	2001      	movs	r0, #1
 80002f8:	4698      	mov	r8, r3
 80002fa:	2e00      	cmp	r6, #0
 80002fc:	d0e0      	beq.n	80002c0 <__udivmoddi4+0xa0>
 80002fe:	e9c6 4800 	strd	r4, r8, [r6]
 8000302:	e7dd      	b.n	80002c0 <__udivmoddi4+0xa0>
 8000304:	b902      	cbnz	r2, 8000308 <__udivmoddi4+0xe8>
 8000306:	deff      	udf	#255	; 0xff
 8000308:	fab2 f282 	clz	r2, r2
 800030c:	2a00      	cmp	r2, #0
 800030e:	f040 808f 	bne.w	8000430 <__udivmoddi4+0x210>
 8000312:	1b49      	subs	r1, r1, r5
 8000314:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000318:	fa1f f885 	uxth.w	r8, r5
 800031c:	2701      	movs	r7, #1
 800031e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000322:	0c23      	lsrs	r3, r4, #16
 8000324:	fb0e 111c 	mls	r1, lr, ip, r1
 8000328:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800032c:	fb08 f10c 	mul.w	r1, r8, ip
 8000330:	4299      	cmp	r1, r3
 8000332:	d907      	bls.n	8000344 <__udivmoddi4+0x124>
 8000334:	18eb      	adds	r3, r5, r3
 8000336:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 800033a:	d202      	bcs.n	8000342 <__udivmoddi4+0x122>
 800033c:	4299      	cmp	r1, r3
 800033e:	f200 80cd 	bhi.w	80004dc <__udivmoddi4+0x2bc>
 8000342:	4684      	mov	ip, r0
 8000344:	1a59      	subs	r1, r3, r1
 8000346:	b2a3      	uxth	r3, r4
 8000348:	fbb1 f0fe 	udiv	r0, r1, lr
 800034c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000350:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000354:	fb08 f800 	mul.w	r8, r8, r0
 8000358:	45a0      	cmp	r8, r4
 800035a:	d907      	bls.n	800036c <__udivmoddi4+0x14c>
 800035c:	192c      	adds	r4, r5, r4
 800035e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000362:	d202      	bcs.n	800036a <__udivmoddi4+0x14a>
 8000364:	45a0      	cmp	r8, r4
 8000366:	f200 80b6 	bhi.w	80004d6 <__udivmoddi4+0x2b6>
 800036a:	4618      	mov	r0, r3
 800036c:	eba4 0408 	sub.w	r4, r4, r8
 8000370:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000374:	e79f      	b.n	80002b6 <__udivmoddi4+0x96>
 8000376:	f1c7 0c20 	rsb	ip, r7, #32
 800037a:	40bb      	lsls	r3, r7
 800037c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000380:	ea4e 0e03 	orr.w	lr, lr, r3
 8000384:	fa01 f407 	lsl.w	r4, r1, r7
 8000388:	fa20 f50c 	lsr.w	r5, r0, ip
 800038c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000390:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000394:	4325      	orrs	r5, r4
 8000396:	fbb3 f9f8 	udiv	r9, r3, r8
 800039a:	0c2c      	lsrs	r4, r5, #16
 800039c:	fb08 3319 	mls	r3, r8, r9, r3
 80003a0:	fa1f fa8e 	uxth.w	sl, lr
 80003a4:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80003a8:	fb09 f40a 	mul.w	r4, r9, sl
 80003ac:	429c      	cmp	r4, r3
 80003ae:	fa02 f207 	lsl.w	r2, r2, r7
 80003b2:	fa00 f107 	lsl.w	r1, r0, r7
 80003b6:	d90b      	bls.n	80003d0 <__udivmoddi4+0x1b0>
 80003b8:	eb1e 0303 	adds.w	r3, lr, r3
 80003bc:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 80003c0:	f080 8087 	bcs.w	80004d2 <__udivmoddi4+0x2b2>
 80003c4:	429c      	cmp	r4, r3
 80003c6:	f240 8084 	bls.w	80004d2 <__udivmoddi4+0x2b2>
 80003ca:	f1a9 0902 	sub.w	r9, r9, #2
 80003ce:	4473      	add	r3, lr
 80003d0:	1b1b      	subs	r3, r3, r4
 80003d2:	b2ad      	uxth	r5, r5
 80003d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80003d8:	fb08 3310 	mls	r3, r8, r0, r3
 80003dc:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003e0:	fb00 fa0a 	mul.w	sl, r0, sl
 80003e4:	45a2      	cmp	sl, r4
 80003e6:	d908      	bls.n	80003fa <__udivmoddi4+0x1da>
 80003e8:	eb1e 0404 	adds.w	r4, lr, r4
 80003ec:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003f0:	d26b      	bcs.n	80004ca <__udivmoddi4+0x2aa>
 80003f2:	45a2      	cmp	sl, r4
 80003f4:	d969      	bls.n	80004ca <__udivmoddi4+0x2aa>
 80003f6:	3802      	subs	r0, #2
 80003f8:	4474      	add	r4, lr
 80003fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003fe:	fba0 8902 	umull	r8, r9, r0, r2
 8000402:	eba4 040a 	sub.w	r4, r4, sl
 8000406:	454c      	cmp	r4, r9
 8000408:	46c2      	mov	sl, r8
 800040a:	464b      	mov	r3, r9
 800040c:	d354      	bcc.n	80004b8 <__udivmoddi4+0x298>
 800040e:	d051      	beq.n	80004b4 <__udivmoddi4+0x294>
 8000410:	2e00      	cmp	r6, #0
 8000412:	d069      	beq.n	80004e8 <__udivmoddi4+0x2c8>
 8000414:	ebb1 050a 	subs.w	r5, r1, sl
 8000418:	eb64 0403 	sbc.w	r4, r4, r3
 800041c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000420:	40fd      	lsrs	r5, r7
 8000422:	40fc      	lsrs	r4, r7
 8000424:	ea4c 0505 	orr.w	r5, ip, r5
 8000428:	e9c6 5400 	strd	r5, r4, [r6]
 800042c:	2700      	movs	r7, #0
 800042e:	e747      	b.n	80002c0 <__udivmoddi4+0xa0>
 8000430:	f1c2 0320 	rsb	r3, r2, #32
 8000434:	fa20 f703 	lsr.w	r7, r0, r3
 8000438:	4095      	lsls	r5, r2
 800043a:	fa01 f002 	lsl.w	r0, r1, r2
 800043e:	fa21 f303 	lsr.w	r3, r1, r3
 8000442:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000446:	4338      	orrs	r0, r7
 8000448:	0c01      	lsrs	r1, r0, #16
 800044a:	fbb3 f7fe 	udiv	r7, r3, lr
 800044e:	fa1f f885 	uxth.w	r8, r5
 8000452:	fb0e 3317 	mls	r3, lr, r7, r3
 8000456:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045a:	fb07 f308 	mul.w	r3, r7, r8
 800045e:	428b      	cmp	r3, r1
 8000460:	fa04 f402 	lsl.w	r4, r4, r2
 8000464:	d907      	bls.n	8000476 <__udivmoddi4+0x256>
 8000466:	1869      	adds	r1, r5, r1
 8000468:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 800046c:	d22f      	bcs.n	80004ce <__udivmoddi4+0x2ae>
 800046e:	428b      	cmp	r3, r1
 8000470:	d92d      	bls.n	80004ce <__udivmoddi4+0x2ae>
 8000472:	3f02      	subs	r7, #2
 8000474:	4429      	add	r1, r5
 8000476:	1acb      	subs	r3, r1, r3
 8000478:	b281      	uxth	r1, r0
 800047a:	fbb3 f0fe 	udiv	r0, r3, lr
 800047e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000482:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000486:	fb00 f308 	mul.w	r3, r0, r8
 800048a:	428b      	cmp	r3, r1
 800048c:	d907      	bls.n	800049e <__udivmoddi4+0x27e>
 800048e:	1869      	adds	r1, r5, r1
 8000490:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000494:	d217      	bcs.n	80004c6 <__udivmoddi4+0x2a6>
 8000496:	428b      	cmp	r3, r1
 8000498:	d915      	bls.n	80004c6 <__udivmoddi4+0x2a6>
 800049a:	3802      	subs	r0, #2
 800049c:	4429      	add	r1, r5
 800049e:	1ac9      	subs	r1, r1, r3
 80004a0:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004a4:	e73b      	b.n	800031e <__udivmoddi4+0xfe>
 80004a6:	4637      	mov	r7, r6
 80004a8:	4630      	mov	r0, r6
 80004aa:	e709      	b.n	80002c0 <__udivmoddi4+0xa0>
 80004ac:	4607      	mov	r7, r0
 80004ae:	e6e7      	b.n	8000280 <__udivmoddi4+0x60>
 80004b0:	4618      	mov	r0, r3
 80004b2:	e6fb      	b.n	80002ac <__udivmoddi4+0x8c>
 80004b4:	4541      	cmp	r1, r8
 80004b6:	d2ab      	bcs.n	8000410 <__udivmoddi4+0x1f0>
 80004b8:	ebb8 0a02 	subs.w	sl, r8, r2
 80004bc:	eb69 020e 	sbc.w	r2, r9, lr
 80004c0:	3801      	subs	r0, #1
 80004c2:	4613      	mov	r3, r2
 80004c4:	e7a4      	b.n	8000410 <__udivmoddi4+0x1f0>
 80004c6:	4660      	mov	r0, ip
 80004c8:	e7e9      	b.n	800049e <__udivmoddi4+0x27e>
 80004ca:	4618      	mov	r0, r3
 80004cc:	e795      	b.n	80003fa <__udivmoddi4+0x1da>
 80004ce:	4667      	mov	r7, ip
 80004d0:	e7d1      	b.n	8000476 <__udivmoddi4+0x256>
 80004d2:	4681      	mov	r9, r0
 80004d4:	e77c      	b.n	80003d0 <__udivmoddi4+0x1b0>
 80004d6:	3802      	subs	r0, #2
 80004d8:	442c      	add	r4, r5
 80004da:	e747      	b.n	800036c <__udivmoddi4+0x14c>
 80004dc:	f1ac 0c02 	sub.w	ip, ip, #2
 80004e0:	442b      	add	r3, r5
 80004e2:	e72f      	b.n	8000344 <__udivmoddi4+0x124>
 80004e4:	4638      	mov	r0, r7
 80004e6:	e708      	b.n	80002fa <__udivmoddi4+0xda>
 80004e8:	4637      	mov	r7, r6
 80004ea:	e6e9      	b.n	80002c0 <__udivmoddi4+0xa0>

080004ec <__aeabi_idiv0>:
 80004ec:	4770      	bx	lr
 80004ee:	bf00      	nop

080004f0 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80004f0:	b580      	push	{r7, lr}
 80004f2:	b0a4      	sub	sp, #144	; 0x90
 80004f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Init */
       
  /* USER CODE END Init */
osKernelInitialize();
 80004f6:	f005 fb35 	bl	8005b64 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  const osThreadAttr_t defaultTask_attributes = {
 80004fa:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80004fe:	2224      	movs	r2, #36	; 0x24
 8000500:	2100      	movs	r1, #0
 8000502:	4618      	mov	r0, r3
 8000504:	f008 fb55 	bl	8008bb2 <memset>
 8000508:	4b2c      	ldr	r3, [pc, #176]	; (80005bc <MX_FREERTOS_Init+0xcc>)
 800050a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800050c:	2380      	movs	r3, #128	; 0x80
 800050e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8000512:	2318      	movs	r3, #24
 8000514:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    .name = "defaultTask",
    .priority = (osPriority_t) osPriorityNormal,
    .stack_size = 128
  };
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000518:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800051c:	461a      	mov	r2, r3
 800051e:	2100      	movs	r1, #0
 8000520:	4827      	ldr	r0, [pc, #156]	; (80005c0 <MX_FREERTOS_Init+0xd0>)
 8000522:	f005 fb87 	bl	8005c34 <osThreadNew>
 8000526:	4602      	mov	r2, r0
 8000528:	4b26      	ldr	r3, [pc, #152]	; (80005c4 <MX_FREERTOS_Init+0xd4>)
 800052a:	601a      	str	r2, [r3, #0]

  /* definition and creation of SpeedRegTask */
  const osThreadAttr_t SpeedRegTask_attributes = {
 800052c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000530:	2224      	movs	r2, #36	; 0x24
 8000532:	2100      	movs	r1, #0
 8000534:	4618      	mov	r0, r3
 8000536:	f008 fb3c 	bl	8008bb2 <memset>
 800053a:	4b23      	ldr	r3, [pc, #140]	; (80005c8 <MX_FREERTOS_Init+0xd8>)
 800053c:	64bb      	str	r3, [r7, #72]	; 0x48
 800053e:	2380      	movs	r3, #128	; 0x80
 8000540:	65fb      	str	r3, [r7, #92]	; 0x5c
 8000542:	2330      	movs	r3, #48	; 0x30
 8000544:	663b      	str	r3, [r7, #96]	; 0x60
    .name = "SpeedRegTask",
    .priority = (osPriority_t) osPriorityRealtime,
    .stack_size = 128
  };
  SpeedRegTaskHandle = osThreadNew(StartSpeedRegTask, NULL, &SpeedRegTask_attributes);
 8000546:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800054a:	461a      	mov	r2, r3
 800054c:	2100      	movs	r1, #0
 800054e:	481f      	ldr	r0, [pc, #124]	; (80005cc <MX_FREERTOS_Init+0xdc>)
 8000550:	f005 fb70 	bl	8005c34 <osThreadNew>
 8000554:	4602      	mov	r2, r0
 8000556:	4b1e      	ldr	r3, [pc, #120]	; (80005d0 <MX_FREERTOS_Init+0xe0>)
 8000558:	601a      	str	r2, [r3, #0]

  /* definition and creation of PositionRegTask */
  const osThreadAttr_t PositionRegTask_attributes = {
 800055a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800055e:	2224      	movs	r2, #36	; 0x24
 8000560:	2100      	movs	r1, #0
 8000562:	4618      	mov	r0, r3
 8000564:	f008 fb25 	bl	8008bb2 <memset>
 8000568:	4b1a      	ldr	r3, [pc, #104]	; (80005d4 <MX_FREERTOS_Init+0xe4>)
 800056a:	627b      	str	r3, [r7, #36]	; 0x24
 800056c:	2380      	movs	r3, #128	; 0x80
 800056e:	63bb      	str	r3, [r7, #56]	; 0x38
 8000570:	2331      	movs	r3, #49	; 0x31
 8000572:	63fb      	str	r3, [r7, #60]	; 0x3c
    .name = "PositionRegTask",
    .priority = (osPriority_t) osPriorityRealtime1,
    .stack_size = 128
  };
  PositionRegTaskHandle = osThreadNew(StartPositionRegTask, NULL, &PositionRegTask_attributes);
 8000574:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000578:	461a      	mov	r2, r3
 800057a:	2100      	movs	r1, #0
 800057c:	4816      	ldr	r0, [pc, #88]	; (80005d8 <MX_FREERTOS_Init+0xe8>)
 800057e:	f005 fb59 	bl	8005c34 <osThreadNew>
 8000582:	4602      	mov	r2, r0
 8000584:	4b15      	ldr	r3, [pc, #84]	; (80005dc <MX_FREERTOS_Init+0xec>)
 8000586:	601a      	str	r2, [r3, #0]

  /* definition and creation of TimerGameTask */
  const osThreadAttr_t TimerGameTask_attributes = {
 8000588:	463b      	mov	r3, r7
 800058a:	2224      	movs	r2, #36	; 0x24
 800058c:	2100      	movs	r1, #0
 800058e:	4618      	mov	r0, r3
 8000590:	f008 fb0f 	bl	8008bb2 <memset>
 8000594:	4b12      	ldr	r3, [pc, #72]	; (80005e0 <MX_FREERTOS_Init+0xf0>)
 8000596:	603b      	str	r3, [r7, #0]
 8000598:	2380      	movs	r3, #128	; 0x80
 800059a:	617b      	str	r3, [r7, #20]
 800059c:	2318      	movs	r3, #24
 800059e:	61bb      	str	r3, [r7, #24]
    .name = "TimerGameTask",
    .priority = (osPriority_t) osPriorityNormal,
    .stack_size = 128
  };
  TimerGameTaskHandle = osThreadNew(StartTimerGameTask, NULL, &TimerGameTask_attributes);
 80005a0:	463b      	mov	r3, r7
 80005a2:	461a      	mov	r2, r3
 80005a4:	2100      	movs	r1, #0
 80005a6:	480f      	ldr	r0, [pc, #60]	; (80005e4 <MX_FREERTOS_Init+0xf4>)
 80005a8:	f005 fb44 	bl	8005c34 <osThreadNew>
 80005ac:	4602      	mov	r2, r0
 80005ae:	4b0e      	ldr	r3, [pc, #56]	; (80005e8 <MX_FREERTOS_Init+0xf8>)
 80005b0:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 80005b2:	bf00      	nop
 80005b4:	3790      	adds	r7, #144	; 0x90
 80005b6:	46bd      	mov	sp, r7
 80005b8:	bd80      	pop	{r7, pc}
 80005ba:	bf00      	nop
 80005bc:	08008bdc 	.word	0x08008bdc
 80005c0:	080005ed 	.word	0x080005ed
 80005c4:	20004938 	.word	0x20004938
 80005c8:	08008be8 	.word	0x08008be8
 80005cc:	080005fd 	.word	0x080005fd
 80005d0:	2000493c 	.word	0x2000493c
 80005d4:	08008bf8 	.word	0x08008bf8
 80005d8:	08000613 	.word	0x08000613
 80005dc:	20004944 	.word	0x20004944
 80005e0:	08008c08 	.word	0x08008c08
 80005e4:	08000623 	.word	0x08000623
 80005e8:	20004940 	.word	0x20004940

080005ec <StartDefaultTask>:
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	b082      	sub	sp, #8
 80005f0:	af00      	add	r7, sp, #0
 80005f2:	6078      	str	r0, [r7, #4]
  //MX_USB_DEVICE_Init();
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80005f4:	2001      	movs	r0, #1
 80005f6:	f005 fbc7 	bl	8005d88 <osDelay>
 80005fa:	e7fb      	b.n	80005f4 <StartDefaultTask+0x8>

080005fc <StartSpeedRegTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartSpeedRegTask */
void StartSpeedRegTask(void *argument)
{
 80005fc:	b580      	push	{r7, lr}
 80005fe:	b082      	sub	sp, #8
 8000600:	af00      	add	r7, sp, #0
 8000602:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartSpeedRegTask */
  /* Infinite loop */
  for(;;)
  {
	F_GPIO_ToogleLedRed();
 8000604:	f000 f8e8 	bl	80007d8 <F_GPIO_ToogleLedRed>
    osDelay(1000);
 8000608:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800060c:	f005 fbbc 	bl	8005d88 <osDelay>
	F_GPIO_ToogleLedRed();
 8000610:	e7f8      	b.n	8000604 <StartSpeedRegTask+0x8>

08000612 <StartPositionRegTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartPositionRegTask */
void StartPositionRegTask(void *argument)
{
 8000612:	b580      	push	{r7, lr}
 8000614:	b082      	sub	sp, #8
 8000616:	af00      	add	r7, sp, #0
 8000618:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartPositionRegTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(20);
 800061a:	2014      	movs	r0, #20
 800061c:	f005 fbb4 	bl	8005d88 <osDelay>
 8000620:	e7fb      	b.n	800061a <StartPositionRegTask+0x8>

08000622 <StartTimerGameTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTimerGameTask */
void StartTimerGameTask(void *argument)
{
 8000622:	b580      	push	{r7, lr}
 8000624:	b082      	sub	sp, #8
 8000626:	af00      	add	r7, sp, #0
 8000628:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTimerGameTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(500);
 800062a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800062e:	f005 fbab 	bl	8005d88 <osDelay>
 8000632:	e7fa      	b.n	800062a <StartTimerGameTask+0x8>

08000634 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000634:	b580      	push	{r7, lr}
 8000636:	b08c      	sub	sp, #48	; 0x30
 8000638:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800063a:	f107 031c 	add.w	r3, r7, #28
 800063e:	2200      	movs	r2, #0
 8000640:	601a      	str	r2, [r3, #0]
 8000642:	605a      	str	r2, [r3, #4]
 8000644:	609a      	str	r2, [r3, #8]
 8000646:	60da      	str	r2, [r3, #12]
 8000648:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800064a:	2300      	movs	r3, #0
 800064c:	61bb      	str	r3, [r7, #24]
 800064e:	4b5c      	ldr	r3, [pc, #368]	; (80007c0 <MX_GPIO_Init+0x18c>)
 8000650:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000652:	4a5b      	ldr	r2, [pc, #364]	; (80007c0 <MX_GPIO_Init+0x18c>)
 8000654:	f043 0304 	orr.w	r3, r3, #4
 8000658:	6313      	str	r3, [r2, #48]	; 0x30
 800065a:	4b59      	ldr	r3, [pc, #356]	; (80007c0 <MX_GPIO_Init+0x18c>)
 800065c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800065e:	f003 0304 	and.w	r3, r3, #4
 8000662:	61bb      	str	r3, [r7, #24]
 8000664:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000666:	2300      	movs	r3, #0
 8000668:	617b      	str	r3, [r7, #20]
 800066a:	4b55      	ldr	r3, [pc, #340]	; (80007c0 <MX_GPIO_Init+0x18c>)
 800066c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800066e:	4a54      	ldr	r2, [pc, #336]	; (80007c0 <MX_GPIO_Init+0x18c>)
 8000670:	f043 0320 	orr.w	r3, r3, #32
 8000674:	6313      	str	r3, [r2, #48]	; 0x30
 8000676:	4b52      	ldr	r3, [pc, #328]	; (80007c0 <MX_GPIO_Init+0x18c>)
 8000678:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800067a:	f003 0320 	and.w	r3, r3, #32
 800067e:	617b      	str	r3, [r7, #20]
 8000680:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000682:	2300      	movs	r3, #0
 8000684:	613b      	str	r3, [r7, #16]
 8000686:	4b4e      	ldr	r3, [pc, #312]	; (80007c0 <MX_GPIO_Init+0x18c>)
 8000688:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800068a:	4a4d      	ldr	r2, [pc, #308]	; (80007c0 <MX_GPIO_Init+0x18c>)
 800068c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000690:	6313      	str	r3, [r2, #48]	; 0x30
 8000692:	4b4b      	ldr	r3, [pc, #300]	; (80007c0 <MX_GPIO_Init+0x18c>)
 8000694:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000696:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800069a:	613b      	str	r3, [r7, #16]
 800069c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800069e:	2300      	movs	r3, #0
 80006a0:	60fb      	str	r3, [r7, #12]
 80006a2:	4b47      	ldr	r3, [pc, #284]	; (80007c0 <MX_GPIO_Init+0x18c>)
 80006a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006a6:	4a46      	ldr	r2, [pc, #280]	; (80007c0 <MX_GPIO_Init+0x18c>)
 80006a8:	f043 0301 	orr.w	r3, r3, #1
 80006ac:	6313      	str	r3, [r2, #48]	; 0x30
 80006ae:	4b44      	ldr	r3, [pc, #272]	; (80007c0 <MX_GPIO_Init+0x18c>)
 80006b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006b2:	f003 0301 	and.w	r3, r3, #1
 80006b6:	60fb      	str	r3, [r7, #12]
 80006b8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006ba:	2300      	movs	r3, #0
 80006bc:	60bb      	str	r3, [r7, #8]
 80006be:	4b40      	ldr	r3, [pc, #256]	; (80007c0 <MX_GPIO_Init+0x18c>)
 80006c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006c2:	4a3f      	ldr	r2, [pc, #252]	; (80007c0 <MX_GPIO_Init+0x18c>)
 80006c4:	f043 0302 	orr.w	r3, r3, #2
 80006c8:	6313      	str	r3, [r2, #48]	; 0x30
 80006ca:	4b3d      	ldr	r3, [pc, #244]	; (80007c0 <MX_GPIO_Init+0x18c>)
 80006cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ce:	f003 0302 	and.w	r3, r3, #2
 80006d2:	60bb      	str	r3, [r7, #8]
 80006d4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80006d6:	2300      	movs	r3, #0
 80006d8:	607b      	str	r3, [r7, #4]
 80006da:	4b39      	ldr	r3, [pc, #228]	; (80007c0 <MX_GPIO_Init+0x18c>)
 80006dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006de:	4a38      	ldr	r2, [pc, #224]	; (80007c0 <MX_GPIO_Init+0x18c>)
 80006e0:	f043 0308 	orr.w	r3, r3, #8
 80006e4:	6313      	str	r3, [r2, #48]	; 0x30
 80006e6:	4b36      	ldr	r3, [pc, #216]	; (80007c0 <MX_GPIO_Init+0x18c>)
 80006e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ea:	f003 0308 	and.w	r3, r3, #8
 80006ee:	607b      	str	r3, [r7, #4]
 80006f0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80006f2:	2300      	movs	r3, #0
 80006f4:	603b      	str	r3, [r7, #0]
 80006f6:	4b32      	ldr	r3, [pc, #200]	; (80007c0 <MX_GPIO_Init+0x18c>)
 80006f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006fa:	4a31      	ldr	r2, [pc, #196]	; (80007c0 <MX_GPIO_Init+0x18c>)
 80006fc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000700:	6313      	str	r3, [r2, #48]	; 0x30
 8000702:	4b2f      	ldr	r3, [pc, #188]	; (80007c0 <MX_GPIO_Init+0x18c>)
 8000704:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000706:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800070a:	603b      	str	r3, [r7, #0]
 800070c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, XSHUNT_DISTANCE_1_Pin|XSHUNT_DISTANCE_2_Pin|XSHUNT_DISTANCE_3_Pin|XSHUNT_DISTANCE_4_Pin, GPIO_PIN_RESET);
 800070e:	2200      	movs	r2, #0
 8000710:	213c      	movs	r1, #60	; 0x3c
 8000712:	482c      	ldr	r0, [pc, #176]	; (80007c4 <MX_GPIO_Init+0x190>)
 8000714:	f000 ff4c 	bl	80015b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000718:	2200      	movs	r2, #0
 800071a:	f244 0181 	movw	r1, #16513	; 0x4081
 800071e:	482a      	ldr	r0, [pc, #168]	; (80007c8 <MX_GPIO_Init+0x194>)
 8000720:	f000 ff46 	bl	80015b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000724:	2200      	movs	r2, #0
 8000726:	2140      	movs	r1, #64	; 0x40
 8000728:	4828      	ldr	r0, [pc, #160]	; (80007cc <MX_GPIO_Init+0x198>)
 800072a:	f000 ff41 	bl	80015b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 800072e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000732:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000734:	4b26      	ldr	r3, [pc, #152]	; (80007d0 <MX_GPIO_Init+0x19c>)
 8000736:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000738:	2300      	movs	r3, #0
 800073a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 800073c:	f107 031c 	add.w	r3, r7, #28
 8000740:	4619      	mov	r1, r3
 8000742:	4824      	ldr	r0, [pc, #144]	; (80007d4 <MX_GPIO_Init+0x1a0>)
 8000744:	f000 fd8a 	bl	800125c <HAL_GPIO_Init>

  /*Configure GPIO pins : PFPin PFPin PFPin PFPin */
  GPIO_InitStruct.Pin = XSHUNT_DISTANCE_1_Pin|XSHUNT_DISTANCE_2_Pin|XSHUNT_DISTANCE_3_Pin|XSHUNT_DISTANCE_4_Pin;
 8000748:	233c      	movs	r3, #60	; 0x3c
 800074a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800074c:	2301      	movs	r3, #1
 800074e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000750:	2300      	movs	r3, #0
 8000752:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000754:	2300      	movs	r3, #0
 8000756:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000758:	f107 031c 	add.w	r3, r7, #28
 800075c:	4619      	mov	r1, r3
 800075e:	4819      	ldr	r0, [pc, #100]	; (80007c4 <MX_GPIO_Init+0x190>)
 8000760:	f000 fd7c 	bl	800125c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000764:	f244 0381 	movw	r3, #16513	; 0x4081
 8000768:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800076a:	2301      	movs	r3, #1
 800076c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800076e:	2300      	movs	r3, #0
 8000770:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000772:	2300      	movs	r3, #0
 8000774:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000776:	f107 031c 	add.w	r3, r7, #28
 800077a:	4619      	mov	r1, r3
 800077c:	4812      	ldr	r0, [pc, #72]	; (80007c8 <MX_GPIO_Init+0x194>)
 800077e:	f000 fd6d 	bl	800125c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000782:	2340      	movs	r3, #64	; 0x40
 8000784:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000786:	2301      	movs	r3, #1
 8000788:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800078a:	2300      	movs	r3, #0
 800078c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800078e:	2300      	movs	r3, #0
 8000790:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000792:	f107 031c 	add.w	r3, r7, #28
 8000796:	4619      	mov	r1, r3
 8000798:	480c      	ldr	r0, [pc, #48]	; (80007cc <MX_GPIO_Init+0x198>)
 800079a:	f000 fd5f 	bl	800125c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 800079e:	2380      	movs	r3, #128	; 0x80
 80007a0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007a2:	2300      	movs	r3, #0
 80007a4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007a6:	2300      	movs	r3, #0
 80007a8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80007aa:	f107 031c 	add.w	r3, r7, #28
 80007ae:	4619      	mov	r1, r3
 80007b0:	4806      	ldr	r0, [pc, #24]	; (80007cc <MX_GPIO_Init+0x198>)
 80007b2:	f000 fd53 	bl	800125c <HAL_GPIO_Init>

}
 80007b6:	bf00      	nop
 80007b8:	3730      	adds	r7, #48	; 0x30
 80007ba:	46bd      	mov	sp, r7
 80007bc:	bd80      	pop	{r7, pc}
 80007be:	bf00      	nop
 80007c0:	40023800 	.word	0x40023800
 80007c4:	40021400 	.word	0x40021400
 80007c8:	40020400 	.word	0x40020400
 80007cc:	40021800 	.word	0x40021800
 80007d0:	10110000 	.word	0x10110000
 80007d4:	40020800 	.word	0x40020800

080007d8 <F_GPIO_ToogleLedRed>:

/* USER CODE BEGIN 2 */
void F_GPIO_ToogleLedRed(void){
 80007d8:	b480      	push	{r7}
 80007da:	af00      	add	r7, sp, #0
	if((GPIOB->ODR & LED_Red) > 0){
 80007dc:	4b0b      	ldr	r3, [pc, #44]	; (800080c <F_GPIO_ToogleLedRed+0x34>)
 80007de:	695b      	ldr	r3, [r3, #20]
 80007e0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80007e4:	2b00      	cmp	r3, #0
 80007e6:	d006      	beq.n	80007f6 <F_GPIO_ToogleLedRed+0x1e>
		GPIOB->ODR &= ~LED_Red;
 80007e8:	4b08      	ldr	r3, [pc, #32]	; (800080c <F_GPIO_ToogleLedRed+0x34>)
 80007ea:	695b      	ldr	r3, [r3, #20]
 80007ec:	4a07      	ldr	r2, [pc, #28]	; (800080c <F_GPIO_ToogleLedRed+0x34>)
 80007ee:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80007f2:	6153      	str	r3, [r2, #20]
	}else{
		GPIOB->ODR |= LED_Red;
	}
}
 80007f4:	e005      	b.n	8000802 <F_GPIO_ToogleLedRed+0x2a>
		GPIOB->ODR |= LED_Red;
 80007f6:	4b05      	ldr	r3, [pc, #20]	; (800080c <F_GPIO_ToogleLedRed+0x34>)
 80007f8:	695b      	ldr	r3, [r3, #20]
 80007fa:	4a04      	ldr	r2, [pc, #16]	; (800080c <F_GPIO_ToogleLedRed+0x34>)
 80007fc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000800:	6153      	str	r3, [r2, #20]
}
 8000802:	bf00      	nop
 8000804:	46bd      	mov	sp, r7
 8000806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800080a:	4770      	bx	lr
 800080c:	40020400 	.word	0x40020400

08000810 <LL_I2C_EnableClockStretching>:
  * @rmtoll CR1          NOSTRETCH     LL_I2C_EnableClockStretching
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_EnableClockStretching(I2C_TypeDef *I2Cx)
{
 8000810:	b480      	push	{r7}
 8000812:	b083      	sub	sp, #12
 8000814:	af00      	add	r7, sp, #0
 8000816:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_NOSTRETCH);
 8000818:	687b      	ldr	r3, [r7, #4]
 800081a:	681b      	ldr	r3, [r3, #0]
 800081c:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8000820:	687b      	ldr	r3, [r7, #4]
 8000822:	601a      	str	r2, [r3, #0]
}
 8000824:	bf00      	nop
 8000826:	370c      	adds	r7, #12
 8000828:	46bd      	mov	sp, r7
 800082a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800082e:	4770      	bx	lr

08000830 <LL_I2C_DisableGeneralCall>:
  * @rmtoll CR1          ENGC          LL_I2C_DisableGeneralCall
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_DisableGeneralCall(I2C_TypeDef *I2Cx)
{
 8000830:	b480      	push	{r7}
 8000832:	b083      	sub	sp, #12
 8000834:	af00      	add	r7, sp, #0
 8000836:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_ENGC);
 8000838:	687b      	ldr	r3, [r7, #4]
 800083a:	681b      	ldr	r3, [r3, #0]
 800083c:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8000840:	687b      	ldr	r3, [r7, #4]
 8000842:	601a      	str	r2, [r3, #0]
}
 8000844:	bf00      	nop
 8000846:	370c      	adds	r7, #12
 8000848:	46bd      	mov	sp, r7
 800084a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800084e:	4770      	bx	lr

08000850 <LL_I2C_SetOwnAddress2>:
  * @param  I2Cx I2C Instance.
  * @param  OwnAddress2 This parameter must be a value between Min_Data=0 and Max_Data=0x7F.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_SetOwnAddress2(I2C_TypeDef *I2Cx, uint32_t OwnAddress2)
{
 8000850:	b480      	push	{r7}
 8000852:	b083      	sub	sp, #12
 8000854:	af00      	add	r7, sp, #0
 8000856:	6078      	str	r0, [r7, #4]
 8000858:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->OAR2, I2C_OAR2_ADD2, OwnAddress2);
 800085a:	687b      	ldr	r3, [r7, #4]
 800085c:	68db      	ldr	r3, [r3, #12]
 800085e:	f023 02fe 	bic.w	r2, r3, #254	; 0xfe
 8000862:	683b      	ldr	r3, [r7, #0]
 8000864:	431a      	orrs	r2, r3
 8000866:	687b      	ldr	r3, [r7, #4]
 8000868:	60da      	str	r2, [r3, #12]
}
 800086a:	bf00      	nop
 800086c:	370c      	adds	r7, #12
 800086e:	46bd      	mov	sp, r7
 8000870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000874:	4770      	bx	lr

08000876 <LL_I2C_DisableOwnAddress2>:
  * @rmtoll OAR2         ENDUAL        LL_I2C_DisableOwnAddress2
  * @param  I2Cx I2C Instance.
  * @retval None
  */
__STATIC_INLINE void LL_I2C_DisableOwnAddress2(I2C_TypeDef *I2Cx)
{
 8000876:	b480      	push	{r7}
 8000878:	b083      	sub	sp, #12
 800087a:	af00      	add	r7, sp, #0
 800087c:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->OAR2, I2C_OAR2_ENDUAL);
 800087e:	687b      	ldr	r3, [r7, #4]
 8000880:	68db      	ldr	r3, [r3, #12]
 8000882:	f023 0201 	bic.w	r2, r3, #1
 8000886:	687b      	ldr	r3, [r7, #4]
 8000888:	60da      	str	r2, [r3, #12]
}
 800088a:	bf00      	nop
 800088c:	370c      	adds	r7, #12
 800088e:	46bd      	mov	sp, r7
 8000890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000894:	4770      	bx	lr
	...

08000898 <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000898:	b480      	push	{r7}
 800089a:	b085      	sub	sp, #20
 800089c:	af00      	add	r7, sp, #0
 800089e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 80008a0:	4b08      	ldr	r3, [pc, #32]	; (80008c4 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80008a2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80008a4:	4907      	ldr	r1, [pc, #28]	; (80008c4 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80008a6:	687b      	ldr	r3, [r7, #4]
 80008a8:	4313      	orrs	r3, r2
 80008aa:	630b      	str	r3, [r1, #48]	; 0x30
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 80008ac:	4b05      	ldr	r3, [pc, #20]	; (80008c4 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80008ae:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80008b0:	687b      	ldr	r3, [r7, #4]
 80008b2:	4013      	ands	r3, r2
 80008b4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80008b6:	68fb      	ldr	r3, [r7, #12]
}
 80008b8:	bf00      	nop
 80008ba:	3714      	adds	r7, #20
 80008bc:	46bd      	mov	sp, r7
 80008be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c2:	4770      	bx	lr
 80008c4:	40023800 	.word	0x40023800

080008c8 <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 80008c8:	b480      	push	{r7}
 80008ca:	b085      	sub	sp, #20
 80008cc:	af00      	add	r7, sp, #0
 80008ce:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 80008d0:	4b08      	ldr	r3, [pc, #32]	; (80008f4 <LL_APB1_GRP1_EnableClock+0x2c>)
 80008d2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80008d4:	4907      	ldr	r1, [pc, #28]	; (80008f4 <LL_APB1_GRP1_EnableClock+0x2c>)
 80008d6:	687b      	ldr	r3, [r7, #4]
 80008d8:	4313      	orrs	r3, r2
 80008da:	640b      	str	r3, [r1, #64]	; 0x40
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 80008dc:	4b05      	ldr	r3, [pc, #20]	; (80008f4 <LL_APB1_GRP1_EnableClock+0x2c>)
 80008de:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	4013      	ands	r3, r2
 80008e4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80008e6:	68fb      	ldr	r3, [r7, #12]
}
 80008e8:	bf00      	nop
 80008ea:	3714      	adds	r7, #20
 80008ec:	46bd      	mov	sp, r7
 80008ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008f2:	4770      	bx	lr
 80008f4:	40023800 	.word	0x40023800

080008f8 <MX_I2C1_Init>:

/* USER CODE END 0 */

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80008f8:	b580      	push	{r7, lr}
 80008fa:	b08e      	sub	sp, #56	; 0x38
 80008fc:	af00      	add	r7, sp, #0
  LL_I2C_InitTypeDef I2C_InitStruct = {0};
 80008fe:	f107 0318 	add.w	r3, r7, #24
 8000902:	2220      	movs	r2, #32
 8000904:	2100      	movs	r1, #0
 8000906:	4618      	mov	r0, r3
 8000908:	f008 f953 	bl	8008bb2 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800090c:	463b      	mov	r3, r7
 800090e:	2200      	movs	r2, #0
 8000910:	601a      	str	r2, [r3, #0]
 8000912:	605a      	str	r2, [r3, #4]
 8000914:	609a      	str	r2, [r3, #8]
 8000916:	60da      	str	r2, [r3, #12]
 8000918:	611a      	str	r2, [r3, #16]
 800091a:	615a      	str	r2, [r3, #20]

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 800091c:	2002      	movs	r0, #2
 800091e:	f7ff ffbb 	bl	8000898 <LL_AHB1_GRP1_EnableClock>
  /**I2C1 GPIO Configuration  
  PB8   ------> I2C1_SCL
  PB9   ------> I2C1_SDA 
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_8|LL_GPIO_PIN_9;
 8000922:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000926:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8000928:	2302      	movs	r3, #2
 800092a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 800092c:	2303      	movs	r3, #3
 800092e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_OPENDRAIN;
 8000930:	2301      	movs	r3, #1
 8000932:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8000934:	2301      	movs	r3, #1
 8000936:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_4;
 8000938:	2304      	movs	r3, #4
 800093a:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800093c:	463b      	mov	r3, r7
 800093e:	4619      	mov	r1, r3
 8000940:	4817      	ldr	r0, [pc, #92]	; (80009a0 <MX_I2C1_Init+0xa8>)
 8000942:	f002 fd60 	bl	8003406 <LL_GPIO_Init>

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_I2C1);
 8000946:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 800094a:	f7ff ffbd 	bl	80008c8 <LL_APB1_GRP1_EnableClock>

  /** I2C Initialization 
  */
  LL_I2C_DisableOwnAddress2(I2C1);
 800094e:	4815      	ldr	r0, [pc, #84]	; (80009a4 <MX_I2C1_Init+0xac>)
 8000950:	f7ff ff91 	bl	8000876 <LL_I2C_DisableOwnAddress2>
  LL_I2C_DisableGeneralCall(I2C1);
 8000954:	4813      	ldr	r0, [pc, #76]	; (80009a4 <MX_I2C1_Init+0xac>)
 8000956:	f7ff ff6b 	bl	8000830 <LL_I2C_DisableGeneralCall>
  LL_I2C_EnableClockStretching(I2C1);
 800095a:	4812      	ldr	r0, [pc, #72]	; (80009a4 <MX_I2C1_Init+0xac>)
 800095c:	f7ff ff58 	bl	8000810 <LL_I2C_EnableClockStretching>
  I2C_InitStruct.PeripheralMode = LL_I2C_MODE_I2C;
 8000960:	2300      	movs	r3, #0
 8000962:	61bb      	str	r3, [r7, #24]
  I2C_InitStruct.ClockSpeed = 100000;
 8000964:	4b10      	ldr	r3, [pc, #64]	; (80009a8 <MX_I2C1_Init+0xb0>)
 8000966:	61fb      	str	r3, [r7, #28]
  I2C_InitStruct.DutyCycle = LL_I2C_DUTYCYCLE_2;
 8000968:	2300      	movs	r3, #0
 800096a:	623b      	str	r3, [r7, #32]
  I2C_InitStruct.AnalogFilter = LL_I2C_ANALOGFILTER_ENABLE;
 800096c:	2300      	movs	r3, #0
 800096e:	627b      	str	r3, [r7, #36]	; 0x24
  I2C_InitStruct.DigitalFilter = 0;
 8000970:	2300      	movs	r3, #0
 8000972:	62bb      	str	r3, [r7, #40]	; 0x28
  I2C_InitStruct.OwnAddress1 = 0;
 8000974:	2300      	movs	r3, #0
 8000976:	62fb      	str	r3, [r7, #44]	; 0x2c
  I2C_InitStruct.TypeAcknowledge = LL_I2C_ACK;
 8000978:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800097c:	633b      	str	r3, [r7, #48]	; 0x30
  I2C_InitStruct.OwnAddrSize = LL_I2C_OWNADDRESS1_7BIT;
 800097e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000982:	637b      	str	r3, [r7, #52]	; 0x34
  LL_I2C_Init(I2C1, &I2C_InitStruct);
 8000984:	f107 0318 	add.w	r3, r7, #24
 8000988:	4619      	mov	r1, r3
 800098a:	4806      	ldr	r0, [pc, #24]	; (80009a4 <MX_I2C1_Init+0xac>)
 800098c:	f002 febc 	bl	8003708 <LL_I2C_Init>
  LL_I2C_SetOwnAddress2(I2C1, 0);
 8000990:	2100      	movs	r1, #0
 8000992:	4804      	ldr	r0, [pc, #16]	; (80009a4 <MX_I2C1_Init+0xac>)
 8000994:	f7ff ff5c 	bl	8000850 <LL_I2C_SetOwnAddress2>

}
 8000998:	bf00      	nop
 800099a:	3738      	adds	r7, #56	; 0x38
 800099c:	46bd      	mov	sp, r7
 800099e:	bd80      	pop	{r7, pc}
 80009a0:	40020400 	.word	0x40020400
 80009a4:	40005400 	.word	0x40005400
 80009a8:	000186a0 	.word	0x000186a0

080009ac <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 80009ac:	b580      	push	{r7, lr}
 80009ae:	b08e      	sub	sp, #56	; 0x38
 80009b0:	af00      	add	r7, sp, #0
  LL_I2C_InitTypeDef I2C_InitStruct = {0};
 80009b2:	f107 0318 	add.w	r3, r7, #24
 80009b6:	2220      	movs	r2, #32
 80009b8:	2100      	movs	r1, #0
 80009ba:	4618      	mov	r0, r3
 80009bc:	f008 f8f9 	bl	8008bb2 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009c0:	463b      	mov	r3, r7
 80009c2:	2200      	movs	r2, #0
 80009c4:	601a      	str	r2, [r3, #0]
 80009c6:	605a      	str	r2, [r3, #4]
 80009c8:	609a      	str	r2, [r3, #8]
 80009ca:	60da      	str	r2, [r3, #12]
 80009cc:	611a      	str	r2, [r3, #16]
 80009ce:	615a      	str	r2, [r3, #20]

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOF);
 80009d0:	2020      	movs	r0, #32
 80009d2:	f7ff ff61 	bl	8000898 <LL_AHB1_GRP1_EnableClock>
  /**I2C2 GPIO Configuration  
  PF0   ------> I2C2_SDA
  PF1   ------> I2C2_SCL 
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_0|LL_GPIO_PIN_1;
 80009d6:	2303      	movs	r3, #3
 80009d8:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80009da:	2302      	movs	r3, #2
 80009dc:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 80009de:	2303      	movs	r3, #3
 80009e0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_OPENDRAIN;
 80009e2:	2301      	movs	r3, #1
 80009e4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 80009e6:	2301      	movs	r3, #1
 80009e8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_4;
 80009ea:	2304      	movs	r3, #4
 80009ec:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80009ee:	463b      	mov	r3, r7
 80009f0:	4619      	mov	r1, r3
 80009f2:	4818      	ldr	r0, [pc, #96]	; (8000a54 <MX_I2C2_Init+0xa8>)
 80009f4:	f002 fd07 	bl	8003406 <LL_GPIO_Init>

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_I2C2);
 80009f8:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 80009fc:	f7ff ff64 	bl	80008c8 <LL_APB1_GRP1_EnableClock>

  /** I2C Initialization 
  */
  LL_I2C_DisableOwnAddress2(I2C2);
 8000a00:	4815      	ldr	r0, [pc, #84]	; (8000a58 <MX_I2C2_Init+0xac>)
 8000a02:	f7ff ff38 	bl	8000876 <LL_I2C_DisableOwnAddress2>
  LL_I2C_DisableGeneralCall(I2C2);
 8000a06:	4814      	ldr	r0, [pc, #80]	; (8000a58 <MX_I2C2_Init+0xac>)
 8000a08:	f7ff ff12 	bl	8000830 <LL_I2C_DisableGeneralCall>
  LL_I2C_EnableClockStretching(I2C2);
 8000a0c:	4812      	ldr	r0, [pc, #72]	; (8000a58 <MX_I2C2_Init+0xac>)
 8000a0e:	f7ff feff 	bl	8000810 <LL_I2C_EnableClockStretching>
  I2C_InitStruct.PeripheralMode = LL_I2C_MODE_I2C;
 8000a12:	2300      	movs	r3, #0
 8000a14:	61bb      	str	r3, [r7, #24]
  I2C_InitStruct.ClockSpeed = 100000;
 8000a16:	4b11      	ldr	r3, [pc, #68]	; (8000a5c <MX_I2C2_Init+0xb0>)
 8000a18:	61fb      	str	r3, [r7, #28]
  I2C_InitStruct.DutyCycle = LL_I2C_DUTYCYCLE_2;
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	623b      	str	r3, [r7, #32]
  I2C_InitStruct.AnalogFilter = LL_I2C_ANALOGFILTER_ENABLE;
 8000a1e:	2300      	movs	r3, #0
 8000a20:	627b      	str	r3, [r7, #36]	; 0x24
  I2C_InitStruct.DigitalFilter = 0;
 8000a22:	2300      	movs	r3, #0
 8000a24:	62bb      	str	r3, [r7, #40]	; 0x28
  I2C_InitStruct.OwnAddress1 = 0;
 8000a26:	2300      	movs	r3, #0
 8000a28:	62fb      	str	r3, [r7, #44]	; 0x2c
  I2C_InitStruct.TypeAcknowledge = LL_I2C_ACK;
 8000a2a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000a2e:	633b      	str	r3, [r7, #48]	; 0x30
  I2C_InitStruct.OwnAddrSize = LL_I2C_OWNADDRESS1_7BIT;
 8000a30:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000a34:	637b      	str	r3, [r7, #52]	; 0x34
  LL_I2C_Init(I2C2, &I2C_InitStruct);
 8000a36:	f107 0318 	add.w	r3, r7, #24
 8000a3a:	4619      	mov	r1, r3
 8000a3c:	4806      	ldr	r0, [pc, #24]	; (8000a58 <MX_I2C2_Init+0xac>)
 8000a3e:	f002 fe63 	bl	8003708 <LL_I2C_Init>
  LL_I2C_SetOwnAddress2(I2C2, 0);
 8000a42:	2100      	movs	r1, #0
 8000a44:	4804      	ldr	r0, [pc, #16]	; (8000a58 <MX_I2C2_Init+0xac>)
 8000a46:	f7ff ff03 	bl	8000850 <LL_I2C_SetOwnAddress2>

}
 8000a4a:	bf00      	nop
 8000a4c:	3738      	adds	r7, #56	; 0x38
 8000a4e:	46bd      	mov	sp, r7
 8000a50:	bd80      	pop	{r7, pc}
 8000a52:	bf00      	nop
 8000a54:	40021400 	.word	0x40021400
 8000a58:	40005800 	.word	0x40005800
 8000a5c:	000186a0 	.word	0x000186a0

08000a60 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a60:	b580      	push	{r7, lr}
 8000a62:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a64:	f000 fa5a 	bl	8000f1c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a68:	f000 f80e 	bl	8000a88 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a6c:	f7ff fde2 	bl	8000634 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000a70:	f000 f9d8 	bl	8000e24 <MX_USART3_UART_Init>
  MX_I2C1_Init();
 8000a74:	f7ff ff40 	bl	80008f8 <MX_I2C1_Init>
  MX_I2C2_Init();
 8000a78:	f7ff ff98 	bl	80009ac <MX_I2C2_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init(); 
 8000a7c:	f7ff fd38 	bl	80004f0 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8000a80:	f005 f8a4 	bl	8005bcc <osKernelStart>
  
  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000a84:	e7fe      	b.n	8000a84 <main+0x24>
	...

08000a88 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	b094      	sub	sp, #80	; 0x50
 8000a8c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a8e:	f107 0320 	add.w	r3, r7, #32
 8000a92:	2230      	movs	r2, #48	; 0x30
 8000a94:	2100      	movs	r1, #0
 8000a96:	4618      	mov	r0, r3
 8000a98:	f008 f88b 	bl	8008bb2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a9c:	f107 030c 	add.w	r3, r7, #12
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	601a      	str	r2, [r3, #0]
 8000aa4:	605a      	str	r2, [r3, #4]
 8000aa6:	609a      	str	r2, [r3, #8]
 8000aa8:	60da      	str	r2, [r3, #12]
 8000aaa:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000aac:	2300      	movs	r3, #0
 8000aae:	60bb      	str	r3, [r7, #8]
 8000ab0:	4b28      	ldr	r3, [pc, #160]	; (8000b54 <SystemClock_Config+0xcc>)
 8000ab2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ab4:	4a27      	ldr	r2, [pc, #156]	; (8000b54 <SystemClock_Config+0xcc>)
 8000ab6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000aba:	6413      	str	r3, [r2, #64]	; 0x40
 8000abc:	4b25      	ldr	r3, [pc, #148]	; (8000b54 <SystemClock_Config+0xcc>)
 8000abe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ac0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ac4:	60bb      	str	r3, [r7, #8]
 8000ac6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000ac8:	2300      	movs	r3, #0
 8000aca:	607b      	str	r3, [r7, #4]
 8000acc:	4b22      	ldr	r3, [pc, #136]	; (8000b58 <SystemClock_Config+0xd0>)
 8000ace:	681b      	ldr	r3, [r3, #0]
 8000ad0:	4a21      	ldr	r2, [pc, #132]	; (8000b58 <SystemClock_Config+0xd0>)
 8000ad2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000ad6:	6013      	str	r3, [r2, #0]
 8000ad8:	4b1f      	ldr	r3, [pc, #124]	; (8000b58 <SystemClock_Config+0xd0>)
 8000ada:	681b      	ldr	r3, [r3, #0]
 8000adc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000ae0:	607b      	str	r3, [r7, #4]
 8000ae2:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000ae4:	2301      	movs	r3, #1
 8000ae6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000ae8:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000aec:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000aee:	2302      	movs	r3, #2
 8000af0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000af2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000af6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000af8:	2304      	movs	r3, #4
 8000afa:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000afc:	23a8      	movs	r3, #168	; 0xa8
 8000afe:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000b00:	2302      	movs	r3, #2
 8000b02:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000b04:	2307      	movs	r3, #7
 8000b06:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b08:	f107 0320 	add.w	r3, r7, #32
 8000b0c:	4618      	mov	r0, r3
 8000b0e:	f001 fce9 	bl	80024e4 <HAL_RCC_OscConfig>
 8000b12:	4603      	mov	r3, r0
 8000b14:	2b00      	cmp	r3, #0
 8000b16:	d001      	beq.n	8000b1c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000b18:	f000 f832 	bl	8000b80 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b1c:	230f      	movs	r3, #15
 8000b1e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b20:	2302      	movs	r3, #2
 8000b22:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b24:	2300      	movs	r3, #0
 8000b26:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000b28:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000b2c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000b2e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b32:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000b34:	f107 030c 	add.w	r3, r7, #12
 8000b38:	2105      	movs	r1, #5
 8000b3a:	4618      	mov	r0, r3
 8000b3c:	f001 ff14 	bl	8002968 <HAL_RCC_ClockConfig>
 8000b40:	4603      	mov	r3, r0
 8000b42:	2b00      	cmp	r3, #0
 8000b44:	d001      	beq.n	8000b4a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000b46:	f000 f81b 	bl	8000b80 <Error_Handler>
  }
}
 8000b4a:	bf00      	nop
 8000b4c:	3750      	adds	r7, #80	; 0x50
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	bd80      	pop	{r7, pc}
 8000b52:	bf00      	nop
 8000b54:	40023800 	.word	0x40023800
 8000b58:	40007000 	.word	0x40007000

08000b5c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	b082      	sub	sp, #8
 8000b60:	af00      	add	r7, sp, #0
 8000b62:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM10) {
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	681b      	ldr	r3, [r3, #0]
 8000b68:	4a04      	ldr	r2, [pc, #16]	; (8000b7c <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000b6a:	4293      	cmp	r3, r2
 8000b6c:	d101      	bne.n	8000b72 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000b6e:	f000 f9f7 	bl	8000f60 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000b72:	bf00      	nop
 8000b74:	3708      	adds	r7, #8
 8000b76:	46bd      	mov	sp, r7
 8000b78:	bd80      	pop	{r7, pc}
 8000b7a:	bf00      	nop
 8000b7c:	40014400 	.word	0x40014400

08000b80 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b80:	b480      	push	{r7}
 8000b82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000b84:	bf00      	nop
 8000b86:	46bd      	mov	sp, r7
 8000b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b8c:	4770      	bx	lr
	...

08000b90 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b90:	b580      	push	{r7, lr}
 8000b92:	b082      	sub	sp, #8
 8000b94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b96:	2300      	movs	r3, #0
 8000b98:	607b      	str	r3, [r7, #4]
 8000b9a:	4b12      	ldr	r3, [pc, #72]	; (8000be4 <HAL_MspInit+0x54>)
 8000b9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b9e:	4a11      	ldr	r2, [pc, #68]	; (8000be4 <HAL_MspInit+0x54>)
 8000ba0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ba4:	6453      	str	r3, [r2, #68]	; 0x44
 8000ba6:	4b0f      	ldr	r3, [pc, #60]	; (8000be4 <HAL_MspInit+0x54>)
 8000ba8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000baa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000bae:	607b      	str	r3, [r7, #4]
 8000bb0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	603b      	str	r3, [r7, #0]
 8000bb6:	4b0b      	ldr	r3, [pc, #44]	; (8000be4 <HAL_MspInit+0x54>)
 8000bb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bba:	4a0a      	ldr	r2, [pc, #40]	; (8000be4 <HAL_MspInit+0x54>)
 8000bbc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000bc0:	6413      	str	r3, [r2, #64]	; 0x40
 8000bc2:	4b08      	ldr	r3, [pc, #32]	; (8000be4 <HAL_MspInit+0x54>)
 8000bc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bc6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000bca:	603b      	str	r3, [r7, #0]
 8000bcc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000bce:	2200      	movs	r2, #0
 8000bd0:	210f      	movs	r1, #15
 8000bd2:	f06f 0001 	mvn.w	r0, #1
 8000bd6:	f000 fa9b 	bl	8001110 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000bda:	bf00      	nop
 8000bdc:	3708      	adds	r7, #8
 8000bde:	46bd      	mov	sp, r7
 8000be0:	bd80      	pop	{r7, pc}
 8000be2:	bf00      	nop
 8000be4:	40023800 	.word	0x40023800

08000be8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000be8:	b580      	push	{r7, lr}
 8000bea:	b08c      	sub	sp, #48	; 0x30
 8000bec:	af00      	add	r7, sp, #0
 8000bee:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000bf0:	2300      	movs	r3, #0
 8000bf2:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000bf4:	2300      	movs	r3, #0
 8000bf6:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM10 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0); 
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	6879      	ldr	r1, [r7, #4]
 8000bfc:	2019      	movs	r0, #25
 8000bfe:	f000 fa87 	bl	8001110 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM10 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn); 
 8000c02:	2019      	movs	r0, #25
 8000c04:	f000 faa0 	bl	8001148 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM10 clock */
  __HAL_RCC_TIM10_CLK_ENABLE();
 8000c08:	2300      	movs	r3, #0
 8000c0a:	60fb      	str	r3, [r7, #12]
 8000c0c:	4b1f      	ldr	r3, [pc, #124]	; (8000c8c <HAL_InitTick+0xa4>)
 8000c0e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c10:	4a1e      	ldr	r2, [pc, #120]	; (8000c8c <HAL_InitTick+0xa4>)
 8000c12:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c16:	6453      	str	r3, [r2, #68]	; 0x44
 8000c18:	4b1c      	ldr	r3, [pc, #112]	; (8000c8c <HAL_InitTick+0xa4>)
 8000c1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c1c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c20:	60fb      	str	r3, [r7, #12]
 8000c22:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000c24:	f107 0210 	add.w	r2, r7, #16
 8000c28:	f107 0314 	add.w	r3, r7, #20
 8000c2c:	4611      	mov	r1, r2
 8000c2e:	4618      	mov	r0, r3
 8000c30:	f002 f874 	bl	8002d1c <HAL_RCC_GetClockConfig>
  
  /* Compute TIM10 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8000c34:	f002 f85e 	bl	8002cf4 <HAL_RCC_GetPCLK2Freq>
 8000c38:	4603      	mov	r3, r0
 8000c3a:	005b      	lsls	r3, r3, #1
 8000c3c:	62fb      	str	r3, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM10 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8000c3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000c40:	4a13      	ldr	r2, [pc, #76]	; (8000c90 <HAL_InitTick+0xa8>)
 8000c42:	fba2 2303 	umull	r2, r3, r2, r3
 8000c46:	0c9b      	lsrs	r3, r3, #18
 8000c48:	3b01      	subs	r3, #1
 8000c4a:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM10 */
  htim10.Instance = TIM10;
 8000c4c:	4b11      	ldr	r3, [pc, #68]	; (8000c94 <HAL_InitTick+0xac>)
 8000c4e:	4a12      	ldr	r2, [pc, #72]	; (8000c98 <HAL_InitTick+0xb0>)
 8000c50:	601a      	str	r2, [r3, #0]
  + Period = [(TIM10CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim10.Init.Period = (1000000 / 1000) - 1;
 8000c52:	4b10      	ldr	r3, [pc, #64]	; (8000c94 <HAL_InitTick+0xac>)
 8000c54:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000c58:	60da      	str	r2, [r3, #12]
  htim10.Init.Prescaler = uwPrescalerValue;
 8000c5a:	4a0e      	ldr	r2, [pc, #56]	; (8000c94 <HAL_InitTick+0xac>)
 8000c5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000c5e:	6053      	str	r3, [r2, #4]
  htim10.Init.ClockDivision = 0;
 8000c60:	4b0c      	ldr	r3, [pc, #48]	; (8000c94 <HAL_InitTick+0xac>)
 8000c62:	2200      	movs	r2, #0
 8000c64:	611a      	str	r2, [r3, #16]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c66:	4b0b      	ldr	r3, [pc, #44]	; (8000c94 <HAL_InitTick+0xac>)
 8000c68:	2200      	movs	r2, #0
 8000c6a:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim10) == HAL_OK)
 8000c6c:	4809      	ldr	r0, [pc, #36]	; (8000c94 <HAL_InitTick+0xac>)
 8000c6e:	f002 f887 	bl	8002d80 <HAL_TIM_Base_Init>
 8000c72:	4603      	mov	r3, r0
 8000c74:	2b00      	cmp	r3, #0
 8000c76:	d104      	bne.n	8000c82 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim10);
 8000c78:	4806      	ldr	r0, [pc, #24]	; (8000c94 <HAL_InitTick+0xac>)
 8000c7a:	f002 f8b6 	bl	8002dea <HAL_TIM_Base_Start_IT>
 8000c7e:	4603      	mov	r3, r0
 8000c80:	e000      	b.n	8000c84 <HAL_InitTick+0x9c>
  }
  
  /* Return function status */
  return HAL_ERROR;
 8000c82:	2301      	movs	r3, #1
}
 8000c84:	4618      	mov	r0, r3
 8000c86:	3730      	adds	r7, #48	; 0x30
 8000c88:	46bd      	mov	sp, r7
 8000c8a:	bd80      	pop	{r7, pc}
 8000c8c:	40023800 	.word	0x40023800
 8000c90:	431bde83 	.word	0x431bde83
 8000c94:	20004948 	.word	0x20004948
 8000c98:	40014400 	.word	0x40014400

08000c9c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c9c:	b480      	push	{r7}
 8000c9e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000ca0:	bf00      	nop
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca8:	4770      	bx	lr

08000caa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000caa:	b480      	push	{r7}
 8000cac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000cae:	e7fe      	b.n	8000cae <HardFault_Handler+0x4>

08000cb0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000cb0:	b480      	push	{r7}
 8000cb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000cb4:	e7fe      	b.n	8000cb4 <MemManage_Handler+0x4>

08000cb6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000cb6:	b480      	push	{r7}
 8000cb8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000cba:	e7fe      	b.n	8000cba <BusFault_Handler+0x4>

08000cbc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000cbc:	b480      	push	{r7}
 8000cbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000cc0:	e7fe      	b.n	8000cc0 <UsageFault_Handler+0x4>

08000cc2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000cc2:	b480      	push	{r7}
 8000cc4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000cc6:	bf00      	nop
 8000cc8:	46bd      	mov	sp, r7
 8000cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cce:	4770      	bx	lr

08000cd0 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 8000cd4:	4802      	ldr	r0, [pc, #8]	; (8000ce0 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8000cd6:	f002 f8ac 	bl	8002e32 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8000cda:	bf00      	nop
 8000cdc:	bd80      	pop	{r7, pc}
 8000cde:	bf00      	nop
 8000ce0:	20004948 	.word	0x20004948

08000ce4 <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 8000ce8:	4802      	ldr	r0, [pc, #8]	; (8000cf4 <ETH_IRQHandler+0x10>)
 8000cea:	f000 fa3b 	bl	8001164 <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 8000cee:	bf00      	nop
 8000cf0:	bd80      	pop	{r7, pc}
 8000cf2:	bf00      	nop
 8000cf4:	2000625c 	.word	0x2000625c

08000cf8 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000cfc:	4802      	ldr	r0, [pc, #8]	; (8000d08 <OTG_FS_IRQHandler+0x10>)
 8000cfe:	f000 fc70 	bl	80015e2 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000d02:	bf00      	nop
 8000d04:	bd80      	pop	{r7, pc}
 8000d06:	bf00      	nop
 8000d08:	20007ab4 	.word	0x20007ab4

08000d0c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d0c:	b480      	push	{r7}
 8000d0e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d10:	4b16      	ldr	r3, [pc, #88]	; (8000d6c <SystemInit+0x60>)
 8000d12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d16:	4a15      	ldr	r2, [pc, #84]	; (8000d6c <SystemInit+0x60>)
 8000d18:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d1c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8000d20:	4b13      	ldr	r3, [pc, #76]	; (8000d70 <SystemInit+0x64>)
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	4a12      	ldr	r2, [pc, #72]	; (8000d70 <SystemInit+0x64>)
 8000d26:	f043 0301 	orr.w	r3, r3, #1
 8000d2a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000d2c:	4b10      	ldr	r3, [pc, #64]	; (8000d70 <SystemInit+0x64>)
 8000d2e:	2200      	movs	r2, #0
 8000d30:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8000d32:	4b0f      	ldr	r3, [pc, #60]	; (8000d70 <SystemInit+0x64>)
 8000d34:	681b      	ldr	r3, [r3, #0]
 8000d36:	4a0e      	ldr	r2, [pc, #56]	; (8000d70 <SystemInit+0x64>)
 8000d38:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8000d3c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000d40:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8000d42:	4b0b      	ldr	r3, [pc, #44]	; (8000d70 <SystemInit+0x64>)
 8000d44:	4a0b      	ldr	r2, [pc, #44]	; (8000d74 <SystemInit+0x68>)
 8000d46:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8000d48:	4b09      	ldr	r3, [pc, #36]	; (8000d70 <SystemInit+0x64>)
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	4a08      	ldr	r2, [pc, #32]	; (8000d70 <SystemInit+0x64>)
 8000d4e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000d52:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8000d54:	4b06      	ldr	r3, [pc, #24]	; (8000d70 <SystemInit+0x64>)
 8000d56:	2200      	movs	r2, #0
 8000d58:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000d5a:	4b04      	ldr	r3, [pc, #16]	; (8000d6c <SystemInit+0x60>)
 8000d5c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000d60:	609a      	str	r2, [r3, #8]
#endif
}
 8000d62:	bf00      	nop
 8000d64:	46bd      	mov	sp, r7
 8000d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d6a:	4770      	bx	lr
 8000d6c:	e000ed00 	.word	0xe000ed00
 8000d70:	40023800 	.word	0x40023800
 8000d74:	24003010 	.word	0x24003010

08000d78 <LL_USART_Enable>:
  * @rmtoll CR1          UE            LL_USART_Enable
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_Enable(USART_TypeDef *USARTx)
{
 8000d78:	b480      	push	{r7}
 8000d7a:	b083      	sub	sp, #12
 8000d7c:	af00      	add	r7, sp, #0
 8000d7e:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	68db      	ldr	r3, [r3, #12]
 8000d84:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	60da      	str	r2, [r3, #12]
}
 8000d8c:	bf00      	nop
 8000d8e:	370c      	adds	r7, #12
 8000d90:	46bd      	mov	sp, r7
 8000d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d96:	4770      	bx	lr

08000d98 <LL_USART_ConfigAsyncMode>:
  *         CR3          HDSEL         LL_USART_ConfigAsyncMode
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ConfigAsyncMode(USART_TypeDef *USARTx)
{
 8000d98:	b480      	push	{r7}
 8000d9a:	b083      	sub	sp, #12
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	6078      	str	r0, [r7, #4]
  /* In Asynchronous mode, the following bits must be kept cleared:
  - LINEN, CLKEN bits in the USART_CR2 register,
  - SCEN, IREN and HDSEL bits in the USART_CR3 register.*/
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	691b      	ldr	r3, [r3, #16]
 8000da4:	f423 4290 	bic.w	r2, r3, #18432	; 0x4800
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	695b      	ldr	r3, [r3, #20]
 8000db0:	f023 022a 	bic.w	r2, r3, #42	; 0x2a
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	615a      	str	r2, [r3, #20]
}
 8000db8:	bf00      	nop
 8000dba:	370c      	adds	r7, #12
 8000dbc:	46bd      	mov	sp, r7
 8000dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc2:	4770      	bx	lr

08000dc4 <LL_AHB1_GRP1_EnableClock>:
{
 8000dc4:	b480      	push	{r7}
 8000dc6:	b085      	sub	sp, #20
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8000dcc:	4b08      	ldr	r3, [pc, #32]	; (8000df0 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000dce:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000dd0:	4907      	ldr	r1, [pc, #28]	; (8000df0 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	4313      	orrs	r3, r2
 8000dd6:	630b      	str	r3, [r1, #48]	; 0x30
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8000dd8:	4b05      	ldr	r3, [pc, #20]	; (8000df0 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000dda:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	4013      	ands	r3, r2
 8000de0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000de2:	68fb      	ldr	r3, [r7, #12]
}
 8000de4:	bf00      	nop
 8000de6:	3714      	adds	r7, #20
 8000de8:	46bd      	mov	sp, r7
 8000dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dee:	4770      	bx	lr
 8000df0:	40023800 	.word	0x40023800

08000df4 <LL_APB1_GRP1_EnableClock>:
{
 8000df4:	b480      	push	{r7}
 8000df6:	b085      	sub	sp, #20
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR, Periphs);
 8000dfc:	4b08      	ldr	r3, [pc, #32]	; (8000e20 <LL_APB1_GRP1_EnableClock+0x2c>)
 8000dfe:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000e00:	4907      	ldr	r1, [pc, #28]	; (8000e20 <LL_APB1_GRP1_EnableClock+0x2c>)
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	4313      	orrs	r3, r2
 8000e06:	640b      	str	r3, [r1, #64]	; 0x40
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8000e08:	4b05      	ldr	r3, [pc, #20]	; (8000e20 <LL_APB1_GRP1_EnableClock+0x2c>)
 8000e0a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	4013      	ands	r3, r2
 8000e10:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000e12:	68fb      	ldr	r3, [r7, #12]
}
 8000e14:	bf00      	nop
 8000e16:	3714      	adds	r7, #20
 8000e18:	46bd      	mov	sp, r7
 8000e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e1e:	4770      	bx	lr
 8000e20:	40023800 	.word	0x40023800

08000e24 <MX_USART3_UART_Init>:
/* USER CODE END 0 */

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8000e24:	b580      	push	{r7, lr}
 8000e26:	b08e      	sub	sp, #56	; 0x38
 8000e28:	af00      	add	r7, sp, #0
  LL_USART_InitTypeDef USART_InitStruct = {0};
 8000e2a:	f107 031c 	add.w	r3, r7, #28
 8000e2e:	2200      	movs	r2, #0
 8000e30:	601a      	str	r2, [r3, #0]
 8000e32:	605a      	str	r2, [r3, #4]
 8000e34:	609a      	str	r2, [r3, #8]
 8000e36:	60da      	str	r2, [r3, #12]
 8000e38:	611a      	str	r2, [r3, #16]
 8000e3a:	615a      	str	r2, [r3, #20]
 8000e3c:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e3e:	1d3b      	adds	r3, r7, #4
 8000e40:	2200      	movs	r2, #0
 8000e42:	601a      	str	r2, [r3, #0]
 8000e44:	605a      	str	r2, [r3, #4]
 8000e46:	609a      	str	r2, [r3, #8]
 8000e48:	60da      	str	r2, [r3, #12]
 8000e4a:	611a      	str	r2, [r3, #16]
 8000e4c:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_USART3);
 8000e4e:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8000e52:	f7ff ffcf 	bl	8000df4 <LL_APB1_GRP1_EnableClock>
  
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOD);
 8000e56:	2008      	movs	r0, #8
 8000e58:	f7ff ffb4 	bl	8000dc4 <LL_AHB1_GRP1_EnableClock>
  /**USART3 GPIO Configuration  
  PD8   ------> USART3_TX
  PD9   ------> USART3_RX 
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_8|LL_GPIO_PIN_9;
 8000e5c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000e60:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8000e62:	2302      	movs	r3, #2
 8000e64:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8000e66:	2303      	movs	r3, #3
 8000e68:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_UP;
 8000e6e:	2301      	movs	r3, #1
 8000e70:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 8000e72:	2307      	movs	r3, #7
 8000e74:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000e76:	1d3b      	adds	r3, r7, #4
 8000e78:	4619      	mov	r1, r3
 8000e7a:	4811      	ldr	r0, [pc, #68]	; (8000ec0 <MX_USART3_UART_Init+0x9c>)
 8000e7c:	f002 fac3 	bl	8003406 <LL_GPIO_Init>

  USART_InitStruct.BaudRate = 115200;
 8000e80:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8000e84:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8000e86:	2300      	movs	r3, #0
 8000e88:	623b      	str	r3, [r7, #32]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	627b      	str	r3, [r7, #36]	; 0x24
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8000e8e:	2300      	movs	r3, #0
 8000e90:	62bb      	str	r3, [r7, #40]	; 0x28
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8000e92:	230c      	movs	r3, #12
 8000e94:	62fb      	str	r3, [r7, #44]	; 0x2c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8000e96:	2300      	movs	r3, #0
 8000e98:	633b      	str	r3, [r7, #48]	; 0x30
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	637b      	str	r3, [r7, #52]	; 0x34
  LL_USART_Init(USART3, &USART_InitStruct);
 8000e9e:	f107 031c 	add.w	r3, r7, #28
 8000ea2:	4619      	mov	r1, r3
 8000ea4:	4807      	ldr	r0, [pc, #28]	; (8000ec4 <MX_USART3_UART_Init+0xa0>)
 8000ea6:	f002 fe91 	bl	8003bcc <LL_USART_Init>
  LL_USART_ConfigAsyncMode(USART3);
 8000eaa:	4806      	ldr	r0, [pc, #24]	; (8000ec4 <MX_USART3_UART_Init+0xa0>)
 8000eac:	f7ff ff74 	bl	8000d98 <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART3);
 8000eb0:	4804      	ldr	r0, [pc, #16]	; (8000ec4 <MX_USART3_UART_Init+0xa0>)
 8000eb2:	f7ff ff61 	bl	8000d78 <LL_USART_Enable>

}
 8000eb6:	bf00      	nop
 8000eb8:	3738      	adds	r7, #56	; 0x38
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	bd80      	pop	{r7, pc}
 8000ebe:	bf00      	nop
 8000ec0:	40020c00 	.word	0x40020c00
 8000ec4:	40004800 	.word	0x40004800

08000ec8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8000ec8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000f00 <LoopFillZerobss+0x14>
 
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000ecc:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000ece:	e003      	b.n	8000ed8 <LoopCopyDataInit>

08000ed0 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000ed0:	4b0c      	ldr	r3, [pc, #48]	; (8000f04 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000ed2:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000ed4:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000ed6:	3104      	adds	r1, #4

08000ed8 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000ed8:	480b      	ldr	r0, [pc, #44]	; (8000f08 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000eda:	4b0c      	ldr	r3, [pc, #48]	; (8000f0c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000edc:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000ede:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000ee0:	d3f6      	bcc.n	8000ed0 <CopyDataInit>
  ldr  r2, =_sbss
 8000ee2:	4a0b      	ldr	r2, [pc, #44]	; (8000f10 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000ee4:	e002      	b.n	8000eec <LoopFillZerobss>

08000ee6 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000ee6:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000ee8:	f842 3b04 	str.w	r3, [r2], #4

08000eec <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000eec:	4b09      	ldr	r3, [pc, #36]	; (8000f14 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000eee:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000ef0:	d3f9      	bcc.n	8000ee6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000ef2:	f7ff ff0b 	bl	8000d0c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000ef6:	f007 fe2d 	bl	8008b54 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000efa:	f7ff fdb1 	bl	8000a60 <main>
  bx  lr    
 8000efe:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8000f00:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 8000f04:	08008c58 	.word	0x08008c58
  ldr  r0, =_sdata
 8000f08:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000f0c:	2000000c 	.word	0x2000000c
  ldr  r2, =_sbss
 8000f10:	2000000c 	.word	0x2000000c
  ldr  r3, = _ebss
 8000f14:	20007ebc 	.word	0x20007ebc

08000f18 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000f18:	e7fe      	b.n	8000f18 <ADC_IRQHandler>
	...

08000f1c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000f20:	4b0e      	ldr	r3, [pc, #56]	; (8000f5c <HAL_Init+0x40>)
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	4a0d      	ldr	r2, [pc, #52]	; (8000f5c <HAL_Init+0x40>)
 8000f26:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000f2a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000f2c:	4b0b      	ldr	r3, [pc, #44]	; (8000f5c <HAL_Init+0x40>)
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	4a0a      	ldr	r2, [pc, #40]	; (8000f5c <HAL_Init+0x40>)
 8000f32:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000f36:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f38:	4b08      	ldr	r3, [pc, #32]	; (8000f5c <HAL_Init+0x40>)
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	4a07      	ldr	r2, [pc, #28]	; (8000f5c <HAL_Init+0x40>)
 8000f3e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f42:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f44:	2003      	movs	r0, #3
 8000f46:	f000 f8d8 	bl	80010fa <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f4a:	2000      	movs	r0, #0
 8000f4c:	f7ff fe4c 	bl	8000be8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f50:	f7ff fe1e 	bl	8000b90 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f54:	2300      	movs	r3, #0
}
 8000f56:	4618      	mov	r0, r3
 8000f58:	bd80      	pop	{r7, pc}
 8000f5a:	bf00      	nop
 8000f5c:	40023c00 	.word	0x40023c00

08000f60 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f60:	b480      	push	{r7}
 8000f62:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f64:	4b06      	ldr	r3, [pc, #24]	; (8000f80 <HAL_IncTick+0x20>)
 8000f66:	781b      	ldrb	r3, [r3, #0]
 8000f68:	461a      	mov	r2, r3
 8000f6a:	4b06      	ldr	r3, [pc, #24]	; (8000f84 <HAL_IncTick+0x24>)
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	4413      	add	r3, r2
 8000f70:	4a04      	ldr	r2, [pc, #16]	; (8000f84 <HAL_IncTick+0x24>)
 8000f72:	6013      	str	r3, [r2, #0]
}
 8000f74:	bf00      	nop
 8000f76:	46bd      	mov	sp, r7
 8000f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f7c:	4770      	bx	lr
 8000f7e:	bf00      	nop
 8000f80:	20000004 	.word	0x20000004
 8000f84:	20004988 	.word	0x20004988

08000f88 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f88:	b480      	push	{r7}
 8000f8a:	af00      	add	r7, sp, #0
  return uwTick;
 8000f8c:	4b03      	ldr	r3, [pc, #12]	; (8000f9c <HAL_GetTick+0x14>)
 8000f8e:	681b      	ldr	r3, [r3, #0]
}
 8000f90:	4618      	mov	r0, r3
 8000f92:	46bd      	mov	sp, r7
 8000f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f98:	4770      	bx	lr
 8000f9a:	bf00      	nop
 8000f9c:	20004988 	.word	0x20004988

08000fa0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fa0:	b480      	push	{r7}
 8000fa2:	b085      	sub	sp, #20
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	f003 0307 	and.w	r3, r3, #7
 8000fae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000fb0:	4b0c      	ldr	r3, [pc, #48]	; (8000fe4 <__NVIC_SetPriorityGrouping+0x44>)
 8000fb2:	68db      	ldr	r3, [r3, #12]
 8000fb4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000fb6:	68ba      	ldr	r2, [r7, #8]
 8000fb8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000fbc:	4013      	ands	r3, r2
 8000fbe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000fc0:	68fb      	ldr	r3, [r7, #12]
 8000fc2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000fc4:	68bb      	ldr	r3, [r7, #8]
 8000fc6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000fc8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000fcc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000fd0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000fd2:	4a04      	ldr	r2, [pc, #16]	; (8000fe4 <__NVIC_SetPriorityGrouping+0x44>)
 8000fd4:	68bb      	ldr	r3, [r7, #8]
 8000fd6:	60d3      	str	r3, [r2, #12]
}
 8000fd8:	bf00      	nop
 8000fda:	3714      	adds	r7, #20
 8000fdc:	46bd      	mov	sp, r7
 8000fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe2:	4770      	bx	lr
 8000fe4:	e000ed00 	.word	0xe000ed00

08000fe8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000fe8:	b480      	push	{r7}
 8000fea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000fec:	4b04      	ldr	r3, [pc, #16]	; (8001000 <__NVIC_GetPriorityGrouping+0x18>)
 8000fee:	68db      	ldr	r3, [r3, #12]
 8000ff0:	0a1b      	lsrs	r3, r3, #8
 8000ff2:	f003 0307 	and.w	r3, r3, #7
}
 8000ff6:	4618      	mov	r0, r3
 8000ff8:	46bd      	mov	sp, r7
 8000ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ffe:	4770      	bx	lr
 8001000:	e000ed00 	.word	0xe000ed00

08001004 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001004:	b480      	push	{r7}
 8001006:	b083      	sub	sp, #12
 8001008:	af00      	add	r7, sp, #0
 800100a:	4603      	mov	r3, r0
 800100c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800100e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001012:	2b00      	cmp	r3, #0
 8001014:	db0b      	blt.n	800102e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001016:	79fb      	ldrb	r3, [r7, #7]
 8001018:	f003 021f 	and.w	r2, r3, #31
 800101c:	4907      	ldr	r1, [pc, #28]	; (800103c <__NVIC_EnableIRQ+0x38>)
 800101e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001022:	095b      	lsrs	r3, r3, #5
 8001024:	2001      	movs	r0, #1
 8001026:	fa00 f202 	lsl.w	r2, r0, r2
 800102a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800102e:	bf00      	nop
 8001030:	370c      	adds	r7, #12
 8001032:	46bd      	mov	sp, r7
 8001034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001038:	4770      	bx	lr
 800103a:	bf00      	nop
 800103c:	e000e100 	.word	0xe000e100

08001040 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001040:	b480      	push	{r7}
 8001042:	b083      	sub	sp, #12
 8001044:	af00      	add	r7, sp, #0
 8001046:	4603      	mov	r3, r0
 8001048:	6039      	str	r1, [r7, #0]
 800104a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800104c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001050:	2b00      	cmp	r3, #0
 8001052:	db0a      	blt.n	800106a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001054:	683b      	ldr	r3, [r7, #0]
 8001056:	b2da      	uxtb	r2, r3
 8001058:	490c      	ldr	r1, [pc, #48]	; (800108c <__NVIC_SetPriority+0x4c>)
 800105a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800105e:	0112      	lsls	r2, r2, #4
 8001060:	b2d2      	uxtb	r2, r2
 8001062:	440b      	add	r3, r1
 8001064:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001068:	e00a      	b.n	8001080 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800106a:	683b      	ldr	r3, [r7, #0]
 800106c:	b2da      	uxtb	r2, r3
 800106e:	4908      	ldr	r1, [pc, #32]	; (8001090 <__NVIC_SetPriority+0x50>)
 8001070:	79fb      	ldrb	r3, [r7, #7]
 8001072:	f003 030f 	and.w	r3, r3, #15
 8001076:	3b04      	subs	r3, #4
 8001078:	0112      	lsls	r2, r2, #4
 800107a:	b2d2      	uxtb	r2, r2
 800107c:	440b      	add	r3, r1
 800107e:	761a      	strb	r2, [r3, #24]
}
 8001080:	bf00      	nop
 8001082:	370c      	adds	r7, #12
 8001084:	46bd      	mov	sp, r7
 8001086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108a:	4770      	bx	lr
 800108c:	e000e100 	.word	0xe000e100
 8001090:	e000ed00 	.word	0xe000ed00

08001094 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001094:	b480      	push	{r7}
 8001096:	b089      	sub	sp, #36	; 0x24
 8001098:	af00      	add	r7, sp, #0
 800109a:	60f8      	str	r0, [r7, #12]
 800109c:	60b9      	str	r1, [r7, #8]
 800109e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80010a0:	68fb      	ldr	r3, [r7, #12]
 80010a2:	f003 0307 	and.w	r3, r3, #7
 80010a6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80010a8:	69fb      	ldr	r3, [r7, #28]
 80010aa:	f1c3 0307 	rsb	r3, r3, #7
 80010ae:	2b04      	cmp	r3, #4
 80010b0:	bf28      	it	cs
 80010b2:	2304      	movcs	r3, #4
 80010b4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80010b6:	69fb      	ldr	r3, [r7, #28]
 80010b8:	3304      	adds	r3, #4
 80010ba:	2b06      	cmp	r3, #6
 80010bc:	d902      	bls.n	80010c4 <NVIC_EncodePriority+0x30>
 80010be:	69fb      	ldr	r3, [r7, #28]
 80010c0:	3b03      	subs	r3, #3
 80010c2:	e000      	b.n	80010c6 <NVIC_EncodePriority+0x32>
 80010c4:	2300      	movs	r3, #0
 80010c6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010c8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80010cc:	69bb      	ldr	r3, [r7, #24]
 80010ce:	fa02 f303 	lsl.w	r3, r2, r3
 80010d2:	43da      	mvns	r2, r3
 80010d4:	68bb      	ldr	r3, [r7, #8]
 80010d6:	401a      	ands	r2, r3
 80010d8:	697b      	ldr	r3, [r7, #20]
 80010da:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80010dc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80010e0:	697b      	ldr	r3, [r7, #20]
 80010e2:	fa01 f303 	lsl.w	r3, r1, r3
 80010e6:	43d9      	mvns	r1, r3
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010ec:	4313      	orrs	r3, r2
         );
}
 80010ee:	4618      	mov	r0, r3
 80010f0:	3724      	adds	r7, #36	; 0x24
 80010f2:	46bd      	mov	sp, r7
 80010f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f8:	4770      	bx	lr

080010fa <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010fa:	b580      	push	{r7, lr}
 80010fc:	b082      	sub	sp, #8
 80010fe:	af00      	add	r7, sp, #0
 8001100:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001102:	6878      	ldr	r0, [r7, #4]
 8001104:	f7ff ff4c 	bl	8000fa0 <__NVIC_SetPriorityGrouping>
}
 8001108:	bf00      	nop
 800110a:	3708      	adds	r7, #8
 800110c:	46bd      	mov	sp, r7
 800110e:	bd80      	pop	{r7, pc}

08001110 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001110:	b580      	push	{r7, lr}
 8001112:	b086      	sub	sp, #24
 8001114:	af00      	add	r7, sp, #0
 8001116:	4603      	mov	r3, r0
 8001118:	60b9      	str	r1, [r7, #8]
 800111a:	607a      	str	r2, [r7, #4]
 800111c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800111e:	2300      	movs	r3, #0
 8001120:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001122:	f7ff ff61 	bl	8000fe8 <__NVIC_GetPriorityGrouping>
 8001126:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001128:	687a      	ldr	r2, [r7, #4]
 800112a:	68b9      	ldr	r1, [r7, #8]
 800112c:	6978      	ldr	r0, [r7, #20]
 800112e:	f7ff ffb1 	bl	8001094 <NVIC_EncodePriority>
 8001132:	4602      	mov	r2, r0
 8001134:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001138:	4611      	mov	r1, r2
 800113a:	4618      	mov	r0, r3
 800113c:	f7ff ff80 	bl	8001040 <__NVIC_SetPriority>
}
 8001140:	bf00      	nop
 8001142:	3718      	adds	r7, #24
 8001144:	46bd      	mov	sp, r7
 8001146:	bd80      	pop	{r7, pc}

08001148 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	b082      	sub	sp, #8
 800114c:	af00      	add	r7, sp, #0
 800114e:	4603      	mov	r3, r0
 8001150:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001152:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001156:	4618      	mov	r0, r3
 8001158:	f7ff ff54 	bl	8001004 <__NVIC_EnableIRQ>
}
 800115c:	bf00      	nop
 800115e:	3708      	adds	r7, #8
 8001160:	46bd      	mov	sp, r7
 8001162:	bd80      	pop	{r7, pc}

08001164 <HAL_ETH_IRQHandler>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	b082      	sub	sp, #8
 8001168:	af00      	add	r7, sp, #0
 800116a:	6078      	str	r0, [r7, #4]
  /* Frame received */
  if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_R)) 
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001174:	3314      	adds	r3, #20
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800117c:	2b40      	cmp	r3, #64	; 0x40
 800117e:	d112      	bne.n	80011a6 <HAL_ETH_IRQHandler+0x42>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*Call registered Receive complete callback*/
    heth->RxCpltCallback(heth);
#else
    /* Receive complete callback */
    HAL_ETH_RxCpltCallback(heth);
 8001180:	6878      	ldr	r0, [r7, #4]
 8001182:	f003 fd4d 	bl	8004c20 <HAL_ETH_RxCpltCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */

     /* Clear the Eth DMA Rx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_R);
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800118e:	3314      	adds	r3, #20
 8001190:	2240      	movs	r2, #64	; 0x40
 8001192:	601a      	str	r2, [r3, #0]

    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	2201      	movs	r2, #1
 8001198:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	2200      	movs	r2, #0
 80011a0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80011a4:	e01b      	b.n	80011de <HAL_ETH_IRQHandler+0x7a>

  }
  /* Frame transmitted */
  else if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_T)) 
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80011ae:	3314      	adds	r3, #20
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	f003 0301 	and.w	r3, r3, #1
 80011b6:	2b01      	cmp	r3, #1
 80011b8:	d111      	bne.n	80011de <HAL_ETH_IRQHandler+0x7a>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*  Call resgistered Transfer complete callback*/
    heth->TxCpltCallback(heth);
#else
    /* Transfer complete callback */
    HAL_ETH_TxCpltCallback(heth);
 80011ba:	6878      	ldr	r0, [r7, #4]
 80011bc:	f000 f839 	bl	8001232 <HAL_ETH_TxCpltCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */

    /* Clear the Eth DMA Tx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_T);
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80011c8:	3314      	adds	r3, #20
 80011ca:	2201      	movs	r2, #1
 80011cc:	601a      	str	r2, [r3, #0]

    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	2201      	movs	r2, #1
 80011d2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	2200      	movs	r2, #0
 80011da:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }
  
  /* Clear the interrupt flags */
  __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_NIS);
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80011e6:	3314      	adds	r3, #20
 80011e8:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80011ec:	601a      	str	r2, [r3, #0]
  
  /* ETH DMA Error */
  if(__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_AIS))
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80011f6:	3314      	adds	r3, #20
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80011fe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001202:	d112      	bne.n	800122a <HAL_ETH_IRQHandler+0xc6>
  {
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    heth->DMAErrorCallback(heth);
#else
    /* Ethernet Error callback */
    HAL_ETH_ErrorCallback(heth);
 8001204:	6878      	ldr	r0, [r7, #4]
 8001206:	f000 f81e 	bl	8001246 <HAL_ETH_ErrorCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */

    /* Clear the interrupt flags */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_FLAG_AIS);
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001212:	3314      	adds	r3, #20
 8001214:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001218:	601a      	str	r2, [r3, #0]
  
    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	2201      	movs	r2, #1
 800121e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	2200      	movs	r2, #0
 8001226:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }
}
 800122a:	bf00      	nop
 800122c:	3708      	adds	r7, #8
 800122e:	46bd      	mov	sp, r7
 8001230:	bd80      	pop	{r7, pc}

08001232 <HAL_ETH_TxCpltCallback>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *heth)
{
 8001232:	b480      	push	{r7}
 8001234:	b083      	sub	sp, #12
 8001236:	af00      	add	r7, sp, #0
 8001238:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_TxCpltCallback could be implemented in the user file
  */ 
}
 800123a:	bf00      	nop
 800123c:	370c      	adds	r7, #12
 800123e:	46bd      	mov	sp, r7
 8001240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001244:	4770      	bx	lr

08001246 <HAL_ETH_ErrorCallback>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *heth)
{
 8001246:	b480      	push	{r7}
 8001248:	b083      	sub	sp, #12
 800124a:	af00      	add	r7, sp, #0
 800124c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_TxCpltCallback could be implemented in the user file
  */ 
}
 800124e:	bf00      	nop
 8001250:	370c      	adds	r7, #12
 8001252:	46bd      	mov	sp, r7
 8001254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001258:	4770      	bx	lr
	...

0800125c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800125c:	b480      	push	{r7}
 800125e:	b089      	sub	sp, #36	; 0x24
 8001260:	af00      	add	r7, sp, #0
 8001262:	6078      	str	r0, [r7, #4]
 8001264:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001266:	2300      	movs	r3, #0
 8001268:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800126a:	2300      	movs	r3, #0
 800126c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800126e:	2300      	movs	r3, #0
 8001270:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001272:	2300      	movs	r3, #0
 8001274:	61fb      	str	r3, [r7, #28]
 8001276:	e177      	b.n	8001568 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001278:	2201      	movs	r2, #1
 800127a:	69fb      	ldr	r3, [r7, #28]
 800127c:	fa02 f303 	lsl.w	r3, r2, r3
 8001280:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001282:	683b      	ldr	r3, [r7, #0]
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	697a      	ldr	r2, [r7, #20]
 8001288:	4013      	ands	r3, r2
 800128a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800128c:	693a      	ldr	r2, [r7, #16]
 800128e:	697b      	ldr	r3, [r7, #20]
 8001290:	429a      	cmp	r2, r3
 8001292:	f040 8166 	bne.w	8001562 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001296:	683b      	ldr	r3, [r7, #0]
 8001298:	685b      	ldr	r3, [r3, #4]
 800129a:	2b02      	cmp	r3, #2
 800129c:	d003      	beq.n	80012a6 <HAL_GPIO_Init+0x4a>
 800129e:	683b      	ldr	r3, [r7, #0]
 80012a0:	685b      	ldr	r3, [r3, #4]
 80012a2:	2b12      	cmp	r3, #18
 80012a4:	d123      	bne.n	80012ee <HAL_GPIO_Init+0x92>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80012a6:	69fb      	ldr	r3, [r7, #28]
 80012a8:	08da      	lsrs	r2, r3, #3
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	3208      	adds	r2, #8
 80012ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80012b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80012b4:	69fb      	ldr	r3, [r7, #28]
 80012b6:	f003 0307 	and.w	r3, r3, #7
 80012ba:	009b      	lsls	r3, r3, #2
 80012bc:	220f      	movs	r2, #15
 80012be:	fa02 f303 	lsl.w	r3, r2, r3
 80012c2:	43db      	mvns	r3, r3
 80012c4:	69ba      	ldr	r2, [r7, #24]
 80012c6:	4013      	ands	r3, r2
 80012c8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80012ca:	683b      	ldr	r3, [r7, #0]
 80012cc:	691a      	ldr	r2, [r3, #16]
 80012ce:	69fb      	ldr	r3, [r7, #28]
 80012d0:	f003 0307 	and.w	r3, r3, #7
 80012d4:	009b      	lsls	r3, r3, #2
 80012d6:	fa02 f303 	lsl.w	r3, r2, r3
 80012da:	69ba      	ldr	r2, [r7, #24]
 80012dc:	4313      	orrs	r3, r2
 80012de:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80012e0:	69fb      	ldr	r3, [r7, #28]
 80012e2:	08da      	lsrs	r2, r3, #3
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	3208      	adds	r2, #8
 80012e8:	69b9      	ldr	r1, [r7, #24]
 80012ea:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80012f4:	69fb      	ldr	r3, [r7, #28]
 80012f6:	005b      	lsls	r3, r3, #1
 80012f8:	2203      	movs	r2, #3
 80012fa:	fa02 f303 	lsl.w	r3, r2, r3
 80012fe:	43db      	mvns	r3, r3
 8001300:	69ba      	ldr	r2, [r7, #24]
 8001302:	4013      	ands	r3, r2
 8001304:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001306:	683b      	ldr	r3, [r7, #0]
 8001308:	685b      	ldr	r3, [r3, #4]
 800130a:	f003 0203 	and.w	r2, r3, #3
 800130e:	69fb      	ldr	r3, [r7, #28]
 8001310:	005b      	lsls	r3, r3, #1
 8001312:	fa02 f303 	lsl.w	r3, r2, r3
 8001316:	69ba      	ldr	r2, [r7, #24]
 8001318:	4313      	orrs	r3, r2
 800131a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	69ba      	ldr	r2, [r7, #24]
 8001320:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001322:	683b      	ldr	r3, [r7, #0]
 8001324:	685b      	ldr	r3, [r3, #4]
 8001326:	2b01      	cmp	r3, #1
 8001328:	d00b      	beq.n	8001342 <HAL_GPIO_Init+0xe6>
 800132a:	683b      	ldr	r3, [r7, #0]
 800132c:	685b      	ldr	r3, [r3, #4]
 800132e:	2b02      	cmp	r3, #2
 8001330:	d007      	beq.n	8001342 <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001332:	683b      	ldr	r3, [r7, #0]
 8001334:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001336:	2b11      	cmp	r3, #17
 8001338:	d003      	beq.n	8001342 <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800133a:	683b      	ldr	r3, [r7, #0]
 800133c:	685b      	ldr	r3, [r3, #4]
 800133e:	2b12      	cmp	r3, #18
 8001340:	d130      	bne.n	80013a4 <HAL_GPIO_Init+0x148>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	689b      	ldr	r3, [r3, #8]
 8001346:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001348:	69fb      	ldr	r3, [r7, #28]
 800134a:	005b      	lsls	r3, r3, #1
 800134c:	2203      	movs	r2, #3
 800134e:	fa02 f303 	lsl.w	r3, r2, r3
 8001352:	43db      	mvns	r3, r3
 8001354:	69ba      	ldr	r2, [r7, #24]
 8001356:	4013      	ands	r3, r2
 8001358:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800135a:	683b      	ldr	r3, [r7, #0]
 800135c:	68da      	ldr	r2, [r3, #12]
 800135e:	69fb      	ldr	r3, [r7, #28]
 8001360:	005b      	lsls	r3, r3, #1
 8001362:	fa02 f303 	lsl.w	r3, r2, r3
 8001366:	69ba      	ldr	r2, [r7, #24]
 8001368:	4313      	orrs	r3, r2
 800136a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	69ba      	ldr	r2, [r7, #24]
 8001370:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	685b      	ldr	r3, [r3, #4]
 8001376:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001378:	2201      	movs	r2, #1
 800137a:	69fb      	ldr	r3, [r7, #28]
 800137c:	fa02 f303 	lsl.w	r3, r2, r3
 8001380:	43db      	mvns	r3, r3
 8001382:	69ba      	ldr	r2, [r7, #24]
 8001384:	4013      	ands	r3, r2
 8001386:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001388:	683b      	ldr	r3, [r7, #0]
 800138a:	685b      	ldr	r3, [r3, #4]
 800138c:	091b      	lsrs	r3, r3, #4
 800138e:	f003 0201 	and.w	r2, r3, #1
 8001392:	69fb      	ldr	r3, [r7, #28]
 8001394:	fa02 f303 	lsl.w	r3, r2, r3
 8001398:	69ba      	ldr	r2, [r7, #24]
 800139a:	4313      	orrs	r3, r2
 800139c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	69ba      	ldr	r2, [r7, #24]
 80013a2:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	68db      	ldr	r3, [r3, #12]
 80013a8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80013aa:	69fb      	ldr	r3, [r7, #28]
 80013ac:	005b      	lsls	r3, r3, #1
 80013ae:	2203      	movs	r2, #3
 80013b0:	fa02 f303 	lsl.w	r3, r2, r3
 80013b4:	43db      	mvns	r3, r3
 80013b6:	69ba      	ldr	r2, [r7, #24]
 80013b8:	4013      	ands	r3, r2
 80013ba:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80013bc:	683b      	ldr	r3, [r7, #0]
 80013be:	689a      	ldr	r2, [r3, #8]
 80013c0:	69fb      	ldr	r3, [r7, #28]
 80013c2:	005b      	lsls	r3, r3, #1
 80013c4:	fa02 f303 	lsl.w	r3, r2, r3
 80013c8:	69ba      	ldr	r2, [r7, #24]
 80013ca:	4313      	orrs	r3, r2
 80013cc:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	69ba      	ldr	r2, [r7, #24]
 80013d2:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80013d4:	683b      	ldr	r3, [r7, #0]
 80013d6:	685b      	ldr	r3, [r3, #4]
 80013d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013dc:	2b00      	cmp	r3, #0
 80013de:	f000 80c0 	beq.w	8001562 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013e2:	2300      	movs	r3, #0
 80013e4:	60fb      	str	r3, [r7, #12]
 80013e6:	4b65      	ldr	r3, [pc, #404]	; (800157c <HAL_GPIO_Init+0x320>)
 80013e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013ea:	4a64      	ldr	r2, [pc, #400]	; (800157c <HAL_GPIO_Init+0x320>)
 80013ec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80013f0:	6453      	str	r3, [r2, #68]	; 0x44
 80013f2:	4b62      	ldr	r3, [pc, #392]	; (800157c <HAL_GPIO_Init+0x320>)
 80013f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013f6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80013fa:	60fb      	str	r3, [r7, #12]
 80013fc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80013fe:	4a60      	ldr	r2, [pc, #384]	; (8001580 <HAL_GPIO_Init+0x324>)
 8001400:	69fb      	ldr	r3, [r7, #28]
 8001402:	089b      	lsrs	r3, r3, #2
 8001404:	3302      	adds	r3, #2
 8001406:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800140a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800140c:	69fb      	ldr	r3, [r7, #28]
 800140e:	f003 0303 	and.w	r3, r3, #3
 8001412:	009b      	lsls	r3, r3, #2
 8001414:	220f      	movs	r2, #15
 8001416:	fa02 f303 	lsl.w	r3, r2, r3
 800141a:	43db      	mvns	r3, r3
 800141c:	69ba      	ldr	r2, [r7, #24]
 800141e:	4013      	ands	r3, r2
 8001420:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	4a57      	ldr	r2, [pc, #348]	; (8001584 <HAL_GPIO_Init+0x328>)
 8001426:	4293      	cmp	r3, r2
 8001428:	d037      	beq.n	800149a <HAL_GPIO_Init+0x23e>
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	4a56      	ldr	r2, [pc, #344]	; (8001588 <HAL_GPIO_Init+0x32c>)
 800142e:	4293      	cmp	r3, r2
 8001430:	d031      	beq.n	8001496 <HAL_GPIO_Init+0x23a>
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	4a55      	ldr	r2, [pc, #340]	; (800158c <HAL_GPIO_Init+0x330>)
 8001436:	4293      	cmp	r3, r2
 8001438:	d02b      	beq.n	8001492 <HAL_GPIO_Init+0x236>
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	4a54      	ldr	r2, [pc, #336]	; (8001590 <HAL_GPIO_Init+0x334>)
 800143e:	4293      	cmp	r3, r2
 8001440:	d025      	beq.n	800148e <HAL_GPIO_Init+0x232>
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	4a53      	ldr	r2, [pc, #332]	; (8001594 <HAL_GPIO_Init+0x338>)
 8001446:	4293      	cmp	r3, r2
 8001448:	d01f      	beq.n	800148a <HAL_GPIO_Init+0x22e>
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	4a52      	ldr	r2, [pc, #328]	; (8001598 <HAL_GPIO_Init+0x33c>)
 800144e:	4293      	cmp	r3, r2
 8001450:	d019      	beq.n	8001486 <HAL_GPIO_Init+0x22a>
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	4a51      	ldr	r2, [pc, #324]	; (800159c <HAL_GPIO_Init+0x340>)
 8001456:	4293      	cmp	r3, r2
 8001458:	d013      	beq.n	8001482 <HAL_GPIO_Init+0x226>
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	4a50      	ldr	r2, [pc, #320]	; (80015a0 <HAL_GPIO_Init+0x344>)
 800145e:	4293      	cmp	r3, r2
 8001460:	d00d      	beq.n	800147e <HAL_GPIO_Init+0x222>
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	4a4f      	ldr	r2, [pc, #316]	; (80015a4 <HAL_GPIO_Init+0x348>)
 8001466:	4293      	cmp	r3, r2
 8001468:	d007      	beq.n	800147a <HAL_GPIO_Init+0x21e>
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	4a4e      	ldr	r2, [pc, #312]	; (80015a8 <HAL_GPIO_Init+0x34c>)
 800146e:	4293      	cmp	r3, r2
 8001470:	d101      	bne.n	8001476 <HAL_GPIO_Init+0x21a>
 8001472:	2309      	movs	r3, #9
 8001474:	e012      	b.n	800149c <HAL_GPIO_Init+0x240>
 8001476:	230a      	movs	r3, #10
 8001478:	e010      	b.n	800149c <HAL_GPIO_Init+0x240>
 800147a:	2308      	movs	r3, #8
 800147c:	e00e      	b.n	800149c <HAL_GPIO_Init+0x240>
 800147e:	2307      	movs	r3, #7
 8001480:	e00c      	b.n	800149c <HAL_GPIO_Init+0x240>
 8001482:	2306      	movs	r3, #6
 8001484:	e00a      	b.n	800149c <HAL_GPIO_Init+0x240>
 8001486:	2305      	movs	r3, #5
 8001488:	e008      	b.n	800149c <HAL_GPIO_Init+0x240>
 800148a:	2304      	movs	r3, #4
 800148c:	e006      	b.n	800149c <HAL_GPIO_Init+0x240>
 800148e:	2303      	movs	r3, #3
 8001490:	e004      	b.n	800149c <HAL_GPIO_Init+0x240>
 8001492:	2302      	movs	r3, #2
 8001494:	e002      	b.n	800149c <HAL_GPIO_Init+0x240>
 8001496:	2301      	movs	r3, #1
 8001498:	e000      	b.n	800149c <HAL_GPIO_Init+0x240>
 800149a:	2300      	movs	r3, #0
 800149c:	69fa      	ldr	r2, [r7, #28]
 800149e:	f002 0203 	and.w	r2, r2, #3
 80014a2:	0092      	lsls	r2, r2, #2
 80014a4:	4093      	lsls	r3, r2
 80014a6:	69ba      	ldr	r2, [r7, #24]
 80014a8:	4313      	orrs	r3, r2
 80014aa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80014ac:	4934      	ldr	r1, [pc, #208]	; (8001580 <HAL_GPIO_Init+0x324>)
 80014ae:	69fb      	ldr	r3, [r7, #28]
 80014b0:	089b      	lsrs	r3, r3, #2
 80014b2:	3302      	adds	r3, #2
 80014b4:	69ba      	ldr	r2, [r7, #24]
 80014b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80014ba:	4b3c      	ldr	r3, [pc, #240]	; (80015ac <HAL_GPIO_Init+0x350>)
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014c0:	693b      	ldr	r3, [r7, #16]
 80014c2:	43db      	mvns	r3, r3
 80014c4:	69ba      	ldr	r2, [r7, #24]
 80014c6:	4013      	ands	r3, r2
 80014c8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80014ca:	683b      	ldr	r3, [r7, #0]
 80014cc:	685b      	ldr	r3, [r3, #4]
 80014ce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d003      	beq.n	80014de <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80014d6:	69ba      	ldr	r2, [r7, #24]
 80014d8:	693b      	ldr	r3, [r7, #16]
 80014da:	4313      	orrs	r3, r2
 80014dc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80014de:	4a33      	ldr	r2, [pc, #204]	; (80015ac <HAL_GPIO_Init+0x350>)
 80014e0:	69bb      	ldr	r3, [r7, #24]
 80014e2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80014e4:	4b31      	ldr	r3, [pc, #196]	; (80015ac <HAL_GPIO_Init+0x350>)
 80014e6:	685b      	ldr	r3, [r3, #4]
 80014e8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014ea:	693b      	ldr	r3, [r7, #16]
 80014ec:	43db      	mvns	r3, r3
 80014ee:	69ba      	ldr	r2, [r7, #24]
 80014f0:	4013      	ands	r3, r2
 80014f2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80014f4:	683b      	ldr	r3, [r7, #0]
 80014f6:	685b      	ldr	r3, [r3, #4]
 80014f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d003      	beq.n	8001508 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001500:	69ba      	ldr	r2, [r7, #24]
 8001502:	693b      	ldr	r3, [r7, #16]
 8001504:	4313      	orrs	r3, r2
 8001506:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001508:	4a28      	ldr	r2, [pc, #160]	; (80015ac <HAL_GPIO_Init+0x350>)
 800150a:	69bb      	ldr	r3, [r7, #24]
 800150c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800150e:	4b27      	ldr	r3, [pc, #156]	; (80015ac <HAL_GPIO_Init+0x350>)
 8001510:	689b      	ldr	r3, [r3, #8]
 8001512:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001514:	693b      	ldr	r3, [r7, #16]
 8001516:	43db      	mvns	r3, r3
 8001518:	69ba      	ldr	r2, [r7, #24]
 800151a:	4013      	ands	r3, r2
 800151c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800151e:	683b      	ldr	r3, [r7, #0]
 8001520:	685b      	ldr	r3, [r3, #4]
 8001522:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001526:	2b00      	cmp	r3, #0
 8001528:	d003      	beq.n	8001532 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800152a:	69ba      	ldr	r2, [r7, #24]
 800152c:	693b      	ldr	r3, [r7, #16]
 800152e:	4313      	orrs	r3, r2
 8001530:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001532:	4a1e      	ldr	r2, [pc, #120]	; (80015ac <HAL_GPIO_Init+0x350>)
 8001534:	69bb      	ldr	r3, [r7, #24]
 8001536:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001538:	4b1c      	ldr	r3, [pc, #112]	; (80015ac <HAL_GPIO_Init+0x350>)
 800153a:	68db      	ldr	r3, [r3, #12]
 800153c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800153e:	693b      	ldr	r3, [r7, #16]
 8001540:	43db      	mvns	r3, r3
 8001542:	69ba      	ldr	r2, [r7, #24]
 8001544:	4013      	ands	r3, r2
 8001546:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001548:	683b      	ldr	r3, [r7, #0]
 800154a:	685b      	ldr	r3, [r3, #4]
 800154c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001550:	2b00      	cmp	r3, #0
 8001552:	d003      	beq.n	800155c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001554:	69ba      	ldr	r2, [r7, #24]
 8001556:	693b      	ldr	r3, [r7, #16]
 8001558:	4313      	orrs	r3, r2
 800155a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800155c:	4a13      	ldr	r2, [pc, #76]	; (80015ac <HAL_GPIO_Init+0x350>)
 800155e:	69bb      	ldr	r3, [r7, #24]
 8001560:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001562:	69fb      	ldr	r3, [r7, #28]
 8001564:	3301      	adds	r3, #1
 8001566:	61fb      	str	r3, [r7, #28]
 8001568:	69fb      	ldr	r3, [r7, #28]
 800156a:	2b0f      	cmp	r3, #15
 800156c:	f67f ae84 	bls.w	8001278 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001570:	bf00      	nop
 8001572:	3724      	adds	r7, #36	; 0x24
 8001574:	46bd      	mov	sp, r7
 8001576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800157a:	4770      	bx	lr
 800157c:	40023800 	.word	0x40023800
 8001580:	40013800 	.word	0x40013800
 8001584:	40020000 	.word	0x40020000
 8001588:	40020400 	.word	0x40020400
 800158c:	40020800 	.word	0x40020800
 8001590:	40020c00 	.word	0x40020c00
 8001594:	40021000 	.word	0x40021000
 8001598:	40021400 	.word	0x40021400
 800159c:	40021800 	.word	0x40021800
 80015a0:	40021c00 	.word	0x40021c00
 80015a4:	40022000 	.word	0x40022000
 80015a8:	40022400 	.word	0x40022400
 80015ac:	40013c00 	.word	0x40013c00

080015b0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80015b0:	b480      	push	{r7}
 80015b2:	b083      	sub	sp, #12
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	6078      	str	r0, [r7, #4]
 80015b8:	460b      	mov	r3, r1
 80015ba:	807b      	strh	r3, [r7, #2]
 80015bc:	4613      	mov	r3, r2
 80015be:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80015c0:	787b      	ldrb	r3, [r7, #1]
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d003      	beq.n	80015ce <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80015c6:	887a      	ldrh	r2, [r7, #2]
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80015cc:	e003      	b.n	80015d6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80015ce:	887b      	ldrh	r3, [r7, #2]
 80015d0:	041a      	lsls	r2, r3, #16
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	619a      	str	r2, [r3, #24]
}
 80015d6:	bf00      	nop
 80015d8:	370c      	adds	r7, #12
 80015da:	46bd      	mov	sp, r7
 80015dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e0:	4770      	bx	lr

080015e2 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80015e2:	b590      	push	{r4, r7, lr}
 80015e4:	b08d      	sub	sp, #52	; 0x34
 80015e6:	af00      	add	r7, sp, #0
 80015e8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80015f0:	6a3b      	ldr	r3, [r7, #32]
 80015f2:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	4618      	mov	r0, r3
 80015fa:	f003 fa6f 	bl	8004adc <USB_GetMode>
 80015fe:	4603      	mov	r3, r0
 8001600:	2b00      	cmp	r3, #0
 8001602:	f040 838e 	bne.w	8001d22 <HAL_PCD_IRQHandler+0x740>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	4618      	mov	r0, r3
 800160c:	f003 f9d3 	bl	80049b6 <USB_ReadInterrupts>
 8001610:	4603      	mov	r3, r0
 8001612:	2b00      	cmp	r3, #0
 8001614:	f000 8384 	beq.w	8001d20 <HAL_PCD_IRQHandler+0x73e>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	4618      	mov	r0, r3
 800161e:	f003 f9ca 	bl	80049b6 <USB_ReadInterrupts>
 8001622:	4603      	mov	r3, r0
 8001624:	f003 0302 	and.w	r3, r3, #2
 8001628:	2b02      	cmp	r3, #2
 800162a:	d107      	bne.n	800163c <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	695a      	ldr	r2, [r3, #20]
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	f002 0202 	and.w	r2, r2, #2
 800163a:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	4618      	mov	r0, r3
 8001642:	f003 f9b8 	bl	80049b6 <USB_ReadInterrupts>
 8001646:	4603      	mov	r3, r0
 8001648:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800164c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8001650:	d17b      	bne.n	800174a <HAL_PCD_IRQHandler+0x168>
    {
      epnum = 0U;
 8001652:	2300      	movs	r3, #0
 8001654:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	4618      	mov	r0, r3
 800165c:	f003 f9be 	bl	80049dc <USB_ReadDevAllOutEpInterrupt>
 8001660:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8001662:	e06f      	b.n	8001744 <HAL_PCD_IRQHandler+0x162>
      {
        if ((ep_intr & 0x1U) != 0U)
 8001664:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001666:	f003 0301 	and.w	r3, r3, #1
 800166a:	2b00      	cmp	r3, #0
 800166c:	d064      	beq.n	8001738 <HAL_PCD_IRQHandler+0x156>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001674:	b2d2      	uxtb	r2, r2
 8001676:	4611      	mov	r1, r2
 8001678:	4618      	mov	r0, r3
 800167a:	f003 f9e3 	bl	8004a44 <USB_ReadDevOutEPInterrupt>
 800167e:	61b8      	str	r0, [r7, #24]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8001680:	69bb      	ldr	r3, [r7, #24]
 8001682:	f003 0301 	and.w	r3, r3, #1
 8001686:	2b00      	cmp	r3, #0
 8001688:	d00c      	beq.n	80016a4 <HAL_PCD_IRQHandler+0xc2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800168a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800168c:	015a      	lsls	r2, r3, #5
 800168e:	69fb      	ldr	r3, [r7, #28]
 8001690:	4413      	add	r3, r2
 8001692:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001696:	461a      	mov	r2, r3
 8001698:	2301      	movs	r3, #1
 800169a:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800169c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800169e:	6878      	ldr	r0, [r7, #4]
 80016a0:	f000 fdac 	bl	80021fc <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80016a4:	69bb      	ldr	r3, [r7, #24]
 80016a6:	f003 0308 	and.w	r3, r3, #8
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d00c      	beq.n	80016c8 <HAL_PCD_IRQHandler+0xe6>
          {
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80016ae:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80016b0:	6878      	ldr	r0, [r7, #4]
 80016b2:	f000 feab 	bl	800240c <PCD_EP_OutSetupPacket_int>
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80016b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016b8:	015a      	lsls	r2, r3, #5
 80016ba:	69fb      	ldr	r3, [r7, #28]
 80016bc:	4413      	add	r3, r2
 80016be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80016c2:	461a      	mov	r2, r3
 80016c4:	2308      	movs	r3, #8
 80016c6:	6093      	str	r3, [r2, #8]
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80016c8:	69bb      	ldr	r3, [r7, #24]
 80016ca:	f003 0310 	and.w	r3, r3, #16
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d008      	beq.n	80016e4 <HAL_PCD_IRQHandler+0x102>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80016d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016d4:	015a      	lsls	r2, r3, #5
 80016d6:	69fb      	ldr	r3, [r7, #28]
 80016d8:	4413      	add	r3, r2
 80016da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80016de:	461a      	mov	r2, r3
 80016e0:	2310      	movs	r3, #16
 80016e2:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80016e4:	69bb      	ldr	r3, [r7, #24]
 80016e6:	f003 0320 	and.w	r3, r3, #32
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d015      	beq.n	800171a <HAL_PCD_IRQHandler+0x138>
          {
            if (hpcd->Init.dma_enable == 1U)
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	691b      	ldr	r3, [r3, #16]
 80016f2:	2b01      	cmp	r3, #1
 80016f4:	d108      	bne.n	8001708 <HAL_PCD_IRQHandler+0x126>
            {
              (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	6818      	ldr	r0, [r3, #0]
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8001700:	461a      	mov	r2, r3
 8001702:	2101      	movs	r1, #1
 8001704:	f003 fa2e 	bl	8004b64 <USB_EP0_OutStart>
            }
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8001708:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800170a:	015a      	lsls	r2, r3, #5
 800170c:	69fb      	ldr	r3, [r7, #28]
 800170e:	4413      	add	r3, r2
 8001710:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001714:	461a      	mov	r2, r3
 8001716:	2320      	movs	r3, #32
 8001718:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800171a:	69bb      	ldr	r3, [r7, #24]
 800171c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001720:	2b00      	cmp	r3, #0
 8001722:	d009      	beq.n	8001738 <HAL_PCD_IRQHandler+0x156>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8001724:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001726:	015a      	lsls	r2, r3, #5
 8001728:	69fb      	ldr	r3, [r7, #28]
 800172a:	4413      	add	r3, r2
 800172c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001730:	461a      	mov	r2, r3
 8001732:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001736:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8001738:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800173a:	3301      	adds	r3, #1
 800173c:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800173e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001740:	085b      	lsrs	r3, r3, #1
 8001742:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8001744:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001746:	2b00      	cmp	r3, #0
 8001748:	d18c      	bne.n	8001664 <HAL_PCD_IRQHandler+0x82>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	4618      	mov	r0, r3
 8001750:	f003 f931 	bl	80049b6 <USB_ReadInterrupts>
 8001754:	4603      	mov	r3, r0
 8001756:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800175a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800175e:	f040 80c4 	bne.w	80018ea <HAL_PCD_IRQHandler+0x308>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	4618      	mov	r0, r3
 8001768:	f003 f952 	bl	8004a10 <USB_ReadDevAllInEpInterrupt>
 800176c:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 800176e:	2300      	movs	r3, #0
 8001770:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8001772:	e0b6      	b.n	80018e2 <HAL_PCD_IRQHandler+0x300>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8001774:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001776:	f003 0301 	and.w	r3, r3, #1
 800177a:	2b00      	cmp	r3, #0
 800177c:	f000 80ab 	beq.w	80018d6 <HAL_PCD_IRQHandler+0x2f4>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001786:	b2d2      	uxtb	r2, r2
 8001788:	4611      	mov	r1, r2
 800178a:	4618      	mov	r0, r3
 800178c:	f003 f978 	bl	8004a80 <USB_ReadDevInEPInterrupt>
 8001790:	61b8      	str	r0, [r7, #24]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8001792:	69bb      	ldr	r3, [r7, #24]
 8001794:	f003 0301 	and.w	r3, r3, #1
 8001798:	2b00      	cmp	r3, #0
 800179a:	d05b      	beq.n	8001854 <HAL_PCD_IRQHandler+0x272>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800179c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800179e:	f003 030f 	and.w	r3, r3, #15
 80017a2:	2201      	movs	r2, #1
 80017a4:	fa02 f303 	lsl.w	r3, r2, r3
 80017a8:	617b      	str	r3, [r7, #20]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80017aa:	69fb      	ldr	r3, [r7, #28]
 80017ac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80017b0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80017b2:	697b      	ldr	r3, [r7, #20]
 80017b4:	43db      	mvns	r3, r3
 80017b6:	69f9      	ldr	r1, [r7, #28]
 80017b8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80017bc:	4013      	ands	r3, r2
 80017be:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80017c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017c2:	015a      	lsls	r2, r3, #5
 80017c4:	69fb      	ldr	r3, [r7, #28]
 80017c6:	4413      	add	r3, r2
 80017c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80017cc:	461a      	mov	r2, r3
 80017ce:	2301      	movs	r3, #1
 80017d0:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	691b      	ldr	r3, [r3, #16]
 80017d6:	2b01      	cmp	r3, #1
 80017d8:	d11b      	bne.n	8001812 <HAL_PCD_IRQHandler+0x230>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80017da:	6879      	ldr	r1, [r7, #4]
 80017dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80017de:	4613      	mov	r3, r2
 80017e0:	00db      	lsls	r3, r3, #3
 80017e2:	1a9b      	subs	r3, r3, r2
 80017e4:	009b      	lsls	r3, r3, #2
 80017e6:	440b      	add	r3, r1
 80017e8:	3348      	adds	r3, #72	; 0x48
 80017ea:	6819      	ldr	r1, [r3, #0]
 80017ec:	6878      	ldr	r0, [r7, #4]
 80017ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80017f0:	4613      	mov	r3, r2
 80017f2:	00db      	lsls	r3, r3, #3
 80017f4:	1a9b      	subs	r3, r3, r2
 80017f6:	009b      	lsls	r3, r3, #2
 80017f8:	4403      	add	r3, r0
 80017fa:	3344      	adds	r3, #68	; 0x44
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	4419      	add	r1, r3
 8001800:	6878      	ldr	r0, [r7, #4]
 8001802:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001804:	4613      	mov	r3, r2
 8001806:	00db      	lsls	r3, r3, #3
 8001808:	1a9b      	subs	r3, r3, r2
 800180a:	009b      	lsls	r3, r3, #2
 800180c:	4403      	add	r3, r0
 800180e:	3348      	adds	r3, #72	; 0x48
 8001810:	6019      	str	r1, [r3, #0]
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8001812:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001814:	b2db      	uxtb	r3, r3
 8001816:	4619      	mov	r1, r3
 8001818:	6878      	ldr	r0, [r7, #4]
 800181a:	f006 ffb4 	bl	8008786 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

            if (hpcd->Init.dma_enable == 1U)
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	691b      	ldr	r3, [r3, #16]
 8001822:	2b01      	cmp	r3, #1
 8001824:	d116      	bne.n	8001854 <HAL_PCD_IRQHandler+0x272>
            {
              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8001826:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001828:	2b00      	cmp	r3, #0
 800182a:	d113      	bne.n	8001854 <HAL_PCD_IRQHandler+0x272>
 800182c:	6879      	ldr	r1, [r7, #4]
 800182e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001830:	4613      	mov	r3, r2
 8001832:	00db      	lsls	r3, r3, #3
 8001834:	1a9b      	subs	r3, r3, r2
 8001836:	009b      	lsls	r3, r3, #2
 8001838:	440b      	add	r3, r1
 800183a:	3350      	adds	r3, #80	; 0x50
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	2b00      	cmp	r3, #0
 8001840:	d108      	bne.n	8001854 <HAL_PCD_IRQHandler+0x272>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	6818      	ldr	r0, [r3, #0]
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800184c:	461a      	mov	r2, r3
 800184e:	2101      	movs	r1, #1
 8001850:	f003 f988 	bl	8004b64 <USB_EP0_OutStart>
              }
            }
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8001854:	69bb      	ldr	r3, [r7, #24]
 8001856:	f003 0308 	and.w	r3, r3, #8
 800185a:	2b00      	cmp	r3, #0
 800185c:	d008      	beq.n	8001870 <HAL_PCD_IRQHandler+0x28e>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800185e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001860:	015a      	lsls	r2, r3, #5
 8001862:	69fb      	ldr	r3, [r7, #28]
 8001864:	4413      	add	r3, r2
 8001866:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800186a:	461a      	mov	r2, r3
 800186c:	2308      	movs	r3, #8
 800186e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8001870:	69bb      	ldr	r3, [r7, #24]
 8001872:	f003 0310 	and.w	r3, r3, #16
 8001876:	2b00      	cmp	r3, #0
 8001878:	d008      	beq.n	800188c <HAL_PCD_IRQHandler+0x2aa>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800187a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800187c:	015a      	lsls	r2, r3, #5
 800187e:	69fb      	ldr	r3, [r7, #28]
 8001880:	4413      	add	r3, r2
 8001882:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001886:	461a      	mov	r2, r3
 8001888:	2310      	movs	r3, #16
 800188a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800188c:	69bb      	ldr	r3, [r7, #24]
 800188e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001892:	2b00      	cmp	r3, #0
 8001894:	d008      	beq.n	80018a8 <HAL_PCD_IRQHandler+0x2c6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8001896:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001898:	015a      	lsls	r2, r3, #5
 800189a:	69fb      	ldr	r3, [r7, #28]
 800189c:	4413      	add	r3, r2
 800189e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80018a2:	461a      	mov	r2, r3
 80018a4:	2340      	movs	r3, #64	; 0x40
 80018a6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80018a8:	69bb      	ldr	r3, [r7, #24]
 80018aa:	f003 0302 	and.w	r3, r3, #2
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d008      	beq.n	80018c4 <HAL_PCD_IRQHandler+0x2e2>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80018b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018b4:	015a      	lsls	r2, r3, #5
 80018b6:	69fb      	ldr	r3, [r7, #28]
 80018b8:	4413      	add	r3, r2
 80018ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80018be:	461a      	mov	r2, r3
 80018c0:	2302      	movs	r3, #2
 80018c2:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80018c4:	69bb      	ldr	r3, [r7, #24]
 80018c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d003      	beq.n	80018d6 <HAL_PCD_IRQHandler+0x2f4>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80018ce:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80018d0:	6878      	ldr	r0, [r7, #4]
 80018d2:	f000 fc05 	bl	80020e0 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80018d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018d8:	3301      	adds	r3, #1
 80018da:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80018dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80018de:	085b      	lsrs	r3, r3, #1
 80018e0:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80018e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	f47f af45 	bne.w	8001774 <HAL_PCD_IRQHandler+0x192>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	4618      	mov	r0, r3
 80018f0:	f003 f861 	bl	80049b6 <USB_ReadInterrupts>
 80018f4:	4603      	mov	r3, r0
 80018f6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80018fa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80018fe:	d122      	bne.n	8001946 <HAL_PCD_IRQHandler+0x364>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001900:	69fb      	ldr	r3, [r7, #28]
 8001902:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001906:	685b      	ldr	r3, [r3, #4]
 8001908:	69fa      	ldr	r2, [r7, #28]
 800190a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800190e:	f023 0301 	bic.w	r3, r3, #1
 8001912:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 800191a:	2b01      	cmp	r3, #1
 800191c:	d108      	bne.n	8001930 <HAL_PCD_IRQHandler+0x34e>
      {
        hpcd->LPM_State = LPM_L0;
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	2200      	movs	r2, #0
 8001922:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8001926:	2100      	movs	r1, #0
 8001928:	6878      	ldr	r0, [r7, #4]
 800192a:	f000 fdcf 	bl	80024cc <HAL_PCDEx_LPM_Callback>
 800192e:	e002      	b.n	8001936 <HAL_PCD_IRQHandler+0x354>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8001930:	6878      	ldr	r0, [r7, #4]
 8001932:	f006 ff9f 	bl	8008874 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	695a      	ldr	r2, [r3, #20]
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8001944:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	4618      	mov	r0, r3
 800194c:	f003 f833 	bl	80049b6 <USB_ReadInterrupts>
 8001950:	4603      	mov	r3, r0
 8001952:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001956:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800195a:	d112      	bne.n	8001982 <HAL_PCD_IRQHandler+0x3a0>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800195c:	69fb      	ldr	r3, [r7, #28]
 800195e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001962:	689b      	ldr	r3, [r3, #8]
 8001964:	f003 0301 	and.w	r3, r3, #1
 8001968:	2b01      	cmp	r3, #1
 800196a:	d102      	bne.n	8001972 <HAL_PCD_IRQHandler+0x390>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800196c:	6878      	ldr	r0, [r7, #4]
 800196e:	f006 ff5b 	bl	8008828 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	695a      	ldr	r2, [r3, #20]
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8001980:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    #endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	4618      	mov	r0, r3
 8001988:	f003 f815 	bl	80049b6 <USB_ReadInterrupts>
 800198c:	4603      	mov	r3, r0
 800198e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001992:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001996:	f040 80a7 	bne.w	8001ae8 <HAL_PCD_IRQHandler+0x506>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800199a:	69fb      	ldr	r3, [r7, #28]
 800199c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80019a0:	685b      	ldr	r3, [r3, #4]
 80019a2:	69fa      	ldr	r2, [r7, #28]
 80019a4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80019a8:	f023 0301 	bic.w	r3, r3, #1
 80019ac:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	2110      	movs	r1, #16
 80019b4:	4618      	mov	r0, r3
 80019b6:	f002 fa3d 	bl	8003e34 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80019ba:	2300      	movs	r3, #0
 80019bc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80019be:	e036      	b.n	8001a2e <HAL_PCD_IRQHandler+0x44c>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80019c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80019c2:	015a      	lsls	r2, r3, #5
 80019c4:	69fb      	ldr	r3, [r7, #28]
 80019c6:	4413      	add	r3, r2
 80019c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80019cc:	461a      	mov	r2, r3
 80019ce:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80019d2:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80019d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80019d6:	015a      	lsls	r2, r3, #5
 80019d8:	69fb      	ldr	r3, [r7, #28]
 80019da:	4413      	add	r3, r2
 80019dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80019e4:	0151      	lsls	r1, r2, #5
 80019e6:	69fa      	ldr	r2, [r7, #28]
 80019e8:	440a      	add	r2, r1
 80019ea:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80019ee:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80019f2:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80019f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80019f6:	015a      	lsls	r2, r3, #5
 80019f8:	69fb      	ldr	r3, [r7, #28]
 80019fa:	4413      	add	r3, r2
 80019fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001a00:	461a      	mov	r2, r3
 8001a02:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8001a06:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8001a08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a0a:	015a      	lsls	r2, r3, #5
 8001a0c:	69fb      	ldr	r3, [r7, #28]
 8001a0e:	4413      	add	r3, r2
 8001a10:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001a18:	0151      	lsls	r1, r2, #5
 8001a1a:	69fa      	ldr	r2, [r7, #28]
 8001a1c:	440a      	add	r2, r1
 8001a1e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8001a22:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001a26:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001a28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a2a:	3301      	adds	r3, #1
 8001a2c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	685b      	ldr	r3, [r3, #4]
 8001a32:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001a34:	429a      	cmp	r2, r3
 8001a36:	d3c3      	bcc.n	80019c0 <HAL_PCD_IRQHandler+0x3de>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8001a38:	69fb      	ldr	r3, [r7, #28]
 8001a3a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001a3e:	69db      	ldr	r3, [r3, #28]
 8001a40:	69fa      	ldr	r2, [r7, #28]
 8001a42:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001a46:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8001a4a:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d016      	beq.n	8001a82 <HAL_PCD_IRQHandler+0x4a0>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8001a54:	69fb      	ldr	r3, [r7, #28]
 8001a56:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001a5a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001a5e:	69fa      	ldr	r2, [r7, #28]
 8001a60:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001a64:	f043 030b 	orr.w	r3, r3, #11
 8001a68:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8001a6c:	69fb      	ldr	r3, [r7, #28]
 8001a6e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001a72:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a74:	69fa      	ldr	r2, [r7, #28]
 8001a76:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001a7a:	f043 030b 	orr.w	r3, r3, #11
 8001a7e:	6453      	str	r3, [r2, #68]	; 0x44
 8001a80:	e015      	b.n	8001aae <HAL_PCD_IRQHandler+0x4cc>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8001a82:	69fb      	ldr	r3, [r7, #28]
 8001a84:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001a88:	695b      	ldr	r3, [r3, #20]
 8001a8a:	69fa      	ldr	r2, [r7, #28]
 8001a8c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001a90:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001a94:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8001a98:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8001a9a:	69fb      	ldr	r3, [r7, #28]
 8001a9c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001aa0:	691b      	ldr	r3, [r3, #16]
 8001aa2:	69fa      	ldr	r2, [r7, #28]
 8001aa4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001aa8:	f043 030b 	orr.w	r3, r3, #11
 8001aac:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8001aae:	69fb      	ldr	r3, [r7, #28]
 8001ab0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	69fa      	ldr	r2, [r7, #28]
 8001ab8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001abc:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8001ac0:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	6818      	ldr	r0, [r3, #0]
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	691b      	ldr	r3, [r3, #16]
 8001aca:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8001ad2:	461a      	mov	r2, r3
 8001ad4:	f003 f846 	bl	8004b64 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	695a      	ldr	r2, [r3, #20]
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8001ae6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	4618      	mov	r0, r3
 8001aee:	f002 ff62 	bl	80049b6 <USB_ReadInterrupts>
 8001af2:	4603      	mov	r3, r0
 8001af4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001af8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001afc:	d124      	bne.n	8001b48 <HAL_PCD_IRQHandler+0x566>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	4618      	mov	r0, r3
 8001b04:	f002 fff8 	bl	8004af8 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	4618      	mov	r0, r3
 8001b0e:	f002 f9b7 	bl	8003e80 <USB_GetDevSpeed>
 8001b12:	4603      	mov	r3, r0
 8001b14:	461a      	mov	r2, r3
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681c      	ldr	r4, [r3, #0]
 8001b1e:	f001 f8dd 	bl	8002cdc <HAL_RCC_GetHCLKFreq>
 8001b22:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001b28:	b2db      	uxtb	r3, r3
 8001b2a:	461a      	mov	r2, r3
 8001b2c:	4620      	mov	r0, r4
 8001b2e:	f002 f8df 	bl	8003cf0 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8001b32:	6878      	ldr	r0, [r7, #4]
 8001b34:	f006 fe4f 	bl	80087d6 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	695a      	ldr	r2, [r3, #20]
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8001b46:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	4618      	mov	r0, r3
 8001b4e:	f002 ff32 	bl	80049b6 <USB_ReadInterrupts>
 8001b52:	4603      	mov	r3, r0
 8001b54:	f003 0310 	and.w	r3, r3, #16
 8001b58:	2b10      	cmp	r3, #16
 8001b5a:	d161      	bne.n	8001c20 <HAL_PCD_IRQHandler+0x63e>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	699a      	ldr	r2, [r3, #24]
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	f022 0210 	bic.w	r2, r2, #16
 8001b6a:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8001b6c:	6a3b      	ldr	r3, [r7, #32]
 8001b6e:	6a1b      	ldr	r3, [r3, #32]
 8001b70:	613b      	str	r3, [r7, #16]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8001b72:	693b      	ldr	r3, [r7, #16]
 8001b74:	f003 020f 	and.w	r2, r3, #15
 8001b78:	4613      	mov	r3, r2
 8001b7a:	00db      	lsls	r3, r3, #3
 8001b7c:	1a9b      	subs	r3, r3, r2
 8001b7e:	009b      	lsls	r3, r3, #2
 8001b80:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001b84:	687a      	ldr	r2, [r7, #4]
 8001b86:	4413      	add	r3, r2
 8001b88:	3304      	adds	r3, #4
 8001b8a:	60fb      	str	r3, [r7, #12]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8001b8c:	693b      	ldr	r3, [r7, #16]
 8001b8e:	0c5b      	lsrs	r3, r3, #17
 8001b90:	f003 030f 	and.w	r3, r3, #15
 8001b94:	2b02      	cmp	r3, #2
 8001b96:	d124      	bne.n	8001be2 <HAL_PCD_IRQHandler+0x600>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8001b98:	693a      	ldr	r2, [r7, #16]
 8001b9a:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8001b9e:	4013      	ands	r3, r2
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d035      	beq.n	8001c10 <HAL_PCD_IRQHandler+0x62e>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8001ba8:	693b      	ldr	r3, [r7, #16]
 8001baa:	091b      	lsrs	r3, r3, #4
 8001bac:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001bae:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001bb2:	b29b      	uxth	r3, r3
 8001bb4:	461a      	mov	r2, r3
 8001bb6:	6a38      	ldr	r0, [r7, #32]
 8001bb8:	f002 fdda 	bl	8004770 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	68da      	ldr	r2, [r3, #12]
 8001bc0:	693b      	ldr	r3, [r7, #16]
 8001bc2:	091b      	lsrs	r3, r3, #4
 8001bc4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001bc8:	441a      	add	r2, r3
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	699a      	ldr	r2, [r3, #24]
 8001bd2:	693b      	ldr	r3, [r7, #16]
 8001bd4:	091b      	lsrs	r3, r3, #4
 8001bd6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001bda:	441a      	add	r2, r3
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	619a      	str	r2, [r3, #24]
 8001be0:	e016      	b.n	8001c10 <HAL_PCD_IRQHandler+0x62e>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8001be2:	693b      	ldr	r3, [r7, #16]
 8001be4:	0c5b      	lsrs	r3, r3, #17
 8001be6:	f003 030f 	and.w	r3, r3, #15
 8001bea:	2b06      	cmp	r3, #6
 8001bec:	d110      	bne.n	8001c10 <HAL_PCD_IRQHandler+0x62e>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8001bf4:	2208      	movs	r2, #8
 8001bf6:	4619      	mov	r1, r3
 8001bf8:	6a38      	ldr	r0, [r7, #32]
 8001bfa:	f002 fdb9 	bl	8004770 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	699a      	ldr	r2, [r3, #24]
 8001c02:	693b      	ldr	r3, [r7, #16]
 8001c04:	091b      	lsrs	r3, r3, #4
 8001c06:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001c0a:	441a      	add	r2, r3
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	699a      	ldr	r2, [r3, #24]
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	f042 0210 	orr.w	r2, r2, #16
 8001c1e:	619a      	str	r2, [r3, #24]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	4618      	mov	r0, r3
 8001c26:	f002 fec6 	bl	80049b6 <USB_ReadInterrupts>
 8001c2a:	4603      	mov	r3, r0
 8001c2c:	f003 0308 	and.w	r3, r3, #8
 8001c30:	2b08      	cmp	r3, #8
 8001c32:	d10a      	bne.n	8001c4a <HAL_PCD_IRQHandler+0x668>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8001c34:	6878      	ldr	r0, [r7, #4]
 8001c36:	f006 fdc0 	bl	80087ba <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	695a      	ldr	r2, [r3, #20]
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	f002 0208 	and.w	r2, r2, #8
 8001c48:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	4618      	mov	r0, r3
 8001c50:	f002 feb1 	bl	80049b6 <USB_ReadInterrupts>
 8001c54:	4603      	mov	r3, r0
 8001c56:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001c5a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001c5e:	d10f      	bne.n	8001c80 <HAL_PCD_IRQHandler+0x69e>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8001c60:	2300      	movs	r3, #0
 8001c62:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8001c64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c66:	b2db      	uxtb	r3, r3
 8001c68:	4619      	mov	r1, r3
 8001c6a:	6878      	ldr	r0, [r7, #4]
 8001c6c:	f006 fe22 	bl	80088b4 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	695a      	ldr	r2, [r3, #20]
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8001c7e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	4618      	mov	r0, r3
 8001c86:	f002 fe96 	bl	80049b6 <USB_ReadInterrupts>
 8001c8a:	4603      	mov	r3, r0
 8001c8c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c90:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001c94:	d10f      	bne.n	8001cb6 <HAL_PCD_IRQHandler+0x6d4>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8001c96:	2300      	movs	r3, #0
 8001c98:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8001c9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c9c:	b2db      	uxtb	r3, r3
 8001c9e:	4619      	mov	r1, r3
 8001ca0:	6878      	ldr	r0, [r7, #4]
 8001ca2:	f006 fdf5 	bl	8008890 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	695a      	ldr	r2, [r3, #20]
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8001cb4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	4618      	mov	r0, r3
 8001cbc:	f002 fe7b 	bl	80049b6 <USB_ReadInterrupts>
 8001cc0:	4603      	mov	r3, r0
 8001cc2:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8001cc6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001cca:	d10a      	bne.n	8001ce2 <HAL_PCD_IRQHandler+0x700>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8001ccc:	6878      	ldr	r0, [r7, #4]
 8001cce:	f006 fe03 	bl	80088d8 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	695a      	ldr	r2, [r3, #20]
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8001ce0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	4618      	mov	r0, r3
 8001ce8:	f002 fe65 	bl	80049b6 <USB_ReadInterrupts>
 8001cec:	4603      	mov	r3, r0
 8001cee:	f003 0304 	and.w	r3, r3, #4
 8001cf2:	2b04      	cmp	r3, #4
 8001cf4:	d115      	bne.n	8001d22 <HAL_PCD_IRQHandler+0x740>
    {
      temp = hpcd->Instance->GOTGINT;
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	685b      	ldr	r3, [r3, #4]
 8001cfc:	613b      	str	r3, [r7, #16]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8001cfe:	693b      	ldr	r3, [r7, #16]
 8001d00:	f003 0304 	and.w	r3, r3, #4
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d002      	beq.n	8001d0e <HAL_PCD_IRQHandler+0x72c>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8001d08:	6878      	ldr	r0, [r7, #4]
 8001d0a:	f006 fdf3 	bl	80088f4 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	6859      	ldr	r1, [r3, #4]
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	693a      	ldr	r2, [r7, #16]
 8001d1a:	430a      	orrs	r2, r1
 8001d1c:	605a      	str	r2, [r3, #4]
 8001d1e:	e000      	b.n	8001d22 <HAL_PCD_IRQHandler+0x740>
      return;
 8001d20:	bf00      	nop
    }
  }
}
 8001d22:	3734      	adds	r7, #52	; 0x34
 8001d24:	46bd      	mov	sp, r7
 8001d26:	bd90      	pop	{r4, r7, pc}

08001d28 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001d28:	b580      	push	{r7, lr}
 8001d2a:	b082      	sub	sp, #8
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	6078      	str	r0, [r7, #4]
 8001d30:	460b      	mov	r3, r1
 8001d32:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001d3a:	2b01      	cmp	r3, #1
 8001d3c:	d101      	bne.n	8001d42 <HAL_PCD_SetAddress+0x1a>
 8001d3e:	2302      	movs	r3, #2
 8001d40:	e013      	b.n	8001d6a <HAL_PCD_SetAddress+0x42>
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	2201      	movs	r2, #1
 8001d46:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	78fa      	ldrb	r2, [r7, #3]
 8001d4e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	78fa      	ldrb	r2, [r7, #3]
 8001d58:	4611      	mov	r1, r2
 8001d5a:	4618      	mov	r0, r3
 8001d5c:	f002 fe05 	bl	800496a <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	2200      	movs	r2, #0
 8001d64:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8001d68:	2300      	movs	r3, #0
}
 8001d6a:	4618      	mov	r0, r3
 8001d6c:	3708      	adds	r7, #8
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	bd80      	pop	{r7, pc}

08001d72 <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 8001d72:	b580      	push	{r7, lr}
 8001d74:	b084      	sub	sp, #16
 8001d76:	af00      	add	r7, sp, #0
 8001d78:	6078      	str	r0, [r7, #4]
 8001d7a:	4608      	mov	r0, r1
 8001d7c:	4611      	mov	r1, r2
 8001d7e:	461a      	mov	r2, r3
 8001d80:	4603      	mov	r3, r0
 8001d82:	70fb      	strb	r3, [r7, #3]
 8001d84:	460b      	mov	r3, r1
 8001d86:	803b      	strh	r3, [r7, #0]
 8001d88:	4613      	mov	r3, r2
 8001d8a:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001d8c:	2300      	movs	r3, #0
 8001d8e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001d90:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	da0f      	bge.n	8001db8 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001d98:	78fb      	ldrb	r3, [r7, #3]
 8001d9a:	f003 020f 	and.w	r2, r3, #15
 8001d9e:	4613      	mov	r3, r2
 8001da0:	00db      	lsls	r3, r3, #3
 8001da2:	1a9b      	subs	r3, r3, r2
 8001da4:	009b      	lsls	r3, r3, #2
 8001da6:	3338      	adds	r3, #56	; 0x38
 8001da8:	687a      	ldr	r2, [r7, #4]
 8001daa:	4413      	add	r3, r2
 8001dac:	3304      	adds	r3, #4
 8001dae:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	2201      	movs	r2, #1
 8001db4:	705a      	strb	r2, [r3, #1]
 8001db6:	e00f      	b.n	8001dd8 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001db8:	78fb      	ldrb	r3, [r7, #3]
 8001dba:	f003 020f 	and.w	r2, r3, #15
 8001dbe:	4613      	mov	r3, r2
 8001dc0:	00db      	lsls	r3, r3, #3
 8001dc2:	1a9b      	subs	r3, r3, r2
 8001dc4:	009b      	lsls	r3, r3, #2
 8001dc6:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001dca:	687a      	ldr	r2, [r7, #4]
 8001dcc:	4413      	add	r3, r2
 8001dce:	3304      	adds	r3, #4
 8001dd0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	2200      	movs	r2, #0
 8001dd6:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001dd8:	78fb      	ldrb	r3, [r7, #3]
 8001dda:	f003 030f 	and.w	r3, r3, #15
 8001dde:	b2da      	uxtb	r2, r3
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8001de4:	883a      	ldrh	r2, [r7, #0]
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	78ba      	ldrb	r2, [r7, #2]
 8001dee:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	785b      	ldrb	r3, [r3, #1]
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d004      	beq.n	8001e02 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	781b      	ldrb	r3, [r3, #0]
 8001dfc:	b29a      	uxth	r2, r3
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001e02:	78bb      	ldrb	r3, [r7, #2]
 8001e04:	2b02      	cmp	r3, #2
 8001e06:	d102      	bne.n	8001e0e <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	2200      	movs	r2, #0
 8001e0c:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001e14:	2b01      	cmp	r3, #1
 8001e16:	d101      	bne.n	8001e1c <HAL_PCD_EP_Open+0xaa>
 8001e18:	2302      	movs	r3, #2
 8001e1a:	e00e      	b.n	8001e3a <HAL_PCD_EP_Open+0xc8>
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	2201      	movs	r2, #1
 8001e20:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	68f9      	ldr	r1, [r7, #12]
 8001e2a:	4618      	mov	r0, r3
 8001e2c:	f002 f84d 	bl	8003eca <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	2200      	movs	r2, #0
 8001e34:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8001e38:	7afb      	ldrb	r3, [r7, #11]
}
 8001e3a:	4618      	mov	r0, r3
 8001e3c:	3710      	adds	r7, #16
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	bd80      	pop	{r7, pc}

08001e42 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001e42:	b580      	push	{r7, lr}
 8001e44:	b086      	sub	sp, #24
 8001e46:	af00      	add	r7, sp, #0
 8001e48:	60f8      	str	r0, [r7, #12]
 8001e4a:	607a      	str	r2, [r7, #4]
 8001e4c:	603b      	str	r3, [r7, #0]
 8001e4e:	460b      	mov	r3, r1
 8001e50:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001e52:	7afb      	ldrb	r3, [r7, #11]
 8001e54:	f003 020f 	and.w	r2, r3, #15
 8001e58:	4613      	mov	r3, r2
 8001e5a:	00db      	lsls	r3, r3, #3
 8001e5c:	1a9b      	subs	r3, r3, r2
 8001e5e:	009b      	lsls	r3, r3, #2
 8001e60:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001e64:	68fa      	ldr	r2, [r7, #12]
 8001e66:	4413      	add	r3, r2
 8001e68:	3304      	adds	r3, #4
 8001e6a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001e6c:	697b      	ldr	r3, [r7, #20]
 8001e6e:	687a      	ldr	r2, [r7, #4]
 8001e70:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8001e72:	697b      	ldr	r3, [r7, #20]
 8001e74:	683a      	ldr	r2, [r7, #0]
 8001e76:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8001e78:	697b      	ldr	r3, [r7, #20]
 8001e7a:	2200      	movs	r2, #0
 8001e7c:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8001e7e:	697b      	ldr	r3, [r7, #20]
 8001e80:	2200      	movs	r2, #0
 8001e82:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001e84:	7afb      	ldrb	r3, [r7, #11]
 8001e86:	f003 030f 	and.w	r3, r3, #15
 8001e8a:	b2da      	uxtb	r2, r3
 8001e8c:	697b      	ldr	r3, [r7, #20]
 8001e8e:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	691b      	ldr	r3, [r3, #16]
 8001e94:	2b01      	cmp	r3, #1
 8001e96:	d102      	bne.n	8001e9e <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8001e98:	687a      	ldr	r2, [r7, #4]
 8001e9a:	697b      	ldr	r3, [r7, #20]
 8001e9c:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001e9e:	7afb      	ldrb	r3, [r7, #11]
 8001ea0:	f003 030f 	and.w	r3, r3, #15
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d109      	bne.n	8001ebc <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	6818      	ldr	r0, [r3, #0]
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	691b      	ldr	r3, [r3, #16]
 8001eb0:	b2db      	uxtb	r3, r3
 8001eb2:	461a      	mov	r2, r3
 8001eb4:	6979      	ldr	r1, [r7, #20]
 8001eb6:	f002 fad3 	bl	8004460 <USB_EP0StartXfer>
 8001eba:	e008      	b.n	8001ece <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	6818      	ldr	r0, [r3, #0]
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	691b      	ldr	r3, [r3, #16]
 8001ec4:	b2db      	uxtb	r3, r3
 8001ec6:	461a      	mov	r2, r3
 8001ec8:	6979      	ldr	r1, [r7, #20]
 8001eca:	f002 f885 	bl	8003fd8 <USB_EPStartXfer>
  }

  return HAL_OK;
 8001ece:	2300      	movs	r3, #0
}
 8001ed0:	4618      	mov	r0, r3
 8001ed2:	3718      	adds	r7, #24
 8001ed4:	46bd      	mov	sp, r7
 8001ed6:	bd80      	pop	{r7, pc}

08001ed8 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001ed8:	b580      	push	{r7, lr}
 8001eda:	b086      	sub	sp, #24
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	60f8      	str	r0, [r7, #12]
 8001ee0:	607a      	str	r2, [r7, #4]
 8001ee2:	603b      	str	r3, [r7, #0]
 8001ee4:	460b      	mov	r3, r1
 8001ee6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001ee8:	7afb      	ldrb	r3, [r7, #11]
 8001eea:	f003 020f 	and.w	r2, r3, #15
 8001eee:	4613      	mov	r3, r2
 8001ef0:	00db      	lsls	r3, r3, #3
 8001ef2:	1a9b      	subs	r3, r3, r2
 8001ef4:	009b      	lsls	r3, r3, #2
 8001ef6:	3338      	adds	r3, #56	; 0x38
 8001ef8:	68fa      	ldr	r2, [r7, #12]
 8001efa:	4413      	add	r3, r2
 8001efc:	3304      	adds	r3, #4
 8001efe:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001f00:	697b      	ldr	r3, [r7, #20]
 8001f02:	687a      	ldr	r2, [r7, #4]
 8001f04:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8001f06:	697b      	ldr	r3, [r7, #20]
 8001f08:	683a      	ldr	r2, [r7, #0]
 8001f0a:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8001f0c:	697b      	ldr	r3, [r7, #20]
 8001f0e:	2200      	movs	r2, #0
 8001f10:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8001f12:	697b      	ldr	r3, [r7, #20]
 8001f14:	2201      	movs	r2, #1
 8001f16:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001f18:	7afb      	ldrb	r3, [r7, #11]
 8001f1a:	f003 030f 	and.w	r3, r3, #15
 8001f1e:	b2da      	uxtb	r2, r3
 8001f20:	697b      	ldr	r3, [r7, #20]
 8001f22:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	691b      	ldr	r3, [r3, #16]
 8001f28:	2b01      	cmp	r3, #1
 8001f2a:	d102      	bne.n	8001f32 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8001f2c:	687a      	ldr	r2, [r7, #4]
 8001f2e:	697b      	ldr	r3, [r7, #20]
 8001f30:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001f32:	7afb      	ldrb	r3, [r7, #11]
 8001f34:	f003 030f 	and.w	r3, r3, #15
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d109      	bne.n	8001f50 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	6818      	ldr	r0, [r3, #0]
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	691b      	ldr	r3, [r3, #16]
 8001f44:	b2db      	uxtb	r3, r3
 8001f46:	461a      	mov	r2, r3
 8001f48:	6979      	ldr	r1, [r7, #20]
 8001f4a:	f002 fa89 	bl	8004460 <USB_EP0StartXfer>
 8001f4e:	e008      	b.n	8001f62 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	6818      	ldr	r0, [r3, #0]
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	691b      	ldr	r3, [r3, #16]
 8001f58:	b2db      	uxtb	r3, r3
 8001f5a:	461a      	mov	r2, r3
 8001f5c:	6979      	ldr	r1, [r7, #20]
 8001f5e:	f002 f83b 	bl	8003fd8 <USB_EPStartXfer>
  }

  return HAL_OK;
 8001f62:	2300      	movs	r3, #0
}
 8001f64:	4618      	mov	r0, r3
 8001f66:	3718      	adds	r7, #24
 8001f68:	46bd      	mov	sp, r7
 8001f6a:	bd80      	pop	{r7, pc}

08001f6c <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001f6c:	b580      	push	{r7, lr}
 8001f6e:	b084      	sub	sp, #16
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	6078      	str	r0, [r7, #4]
 8001f74:	460b      	mov	r3, r1
 8001f76:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001f78:	78fb      	ldrb	r3, [r7, #3]
 8001f7a:	f003 020f 	and.w	r2, r3, #15
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	685b      	ldr	r3, [r3, #4]
 8001f82:	429a      	cmp	r2, r3
 8001f84:	d901      	bls.n	8001f8a <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8001f86:	2301      	movs	r3, #1
 8001f88:	e050      	b.n	800202c <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001f8a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	da0f      	bge.n	8001fb2 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001f92:	78fb      	ldrb	r3, [r7, #3]
 8001f94:	f003 020f 	and.w	r2, r3, #15
 8001f98:	4613      	mov	r3, r2
 8001f9a:	00db      	lsls	r3, r3, #3
 8001f9c:	1a9b      	subs	r3, r3, r2
 8001f9e:	009b      	lsls	r3, r3, #2
 8001fa0:	3338      	adds	r3, #56	; 0x38
 8001fa2:	687a      	ldr	r2, [r7, #4]
 8001fa4:	4413      	add	r3, r2
 8001fa6:	3304      	adds	r3, #4
 8001fa8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	2201      	movs	r2, #1
 8001fae:	705a      	strb	r2, [r3, #1]
 8001fb0:	e00d      	b.n	8001fce <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001fb2:	78fa      	ldrb	r2, [r7, #3]
 8001fb4:	4613      	mov	r3, r2
 8001fb6:	00db      	lsls	r3, r3, #3
 8001fb8:	1a9b      	subs	r3, r3, r2
 8001fba:	009b      	lsls	r3, r3, #2
 8001fbc:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001fc0:	687a      	ldr	r2, [r7, #4]
 8001fc2:	4413      	add	r3, r2
 8001fc4:	3304      	adds	r3, #4
 8001fc6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	2200      	movs	r2, #0
 8001fcc:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	2201      	movs	r2, #1
 8001fd2:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001fd4:	78fb      	ldrb	r3, [r7, #3]
 8001fd6:	f003 030f 	and.w	r3, r3, #15
 8001fda:	b2da      	uxtb	r2, r3
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001fe6:	2b01      	cmp	r3, #1
 8001fe8:	d101      	bne.n	8001fee <HAL_PCD_EP_SetStall+0x82>
 8001fea:	2302      	movs	r3, #2
 8001fec:	e01e      	b.n	800202c <HAL_PCD_EP_SetStall+0xc0>
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	2201      	movs	r2, #1
 8001ff2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	68f9      	ldr	r1, [r7, #12]
 8001ffc:	4618      	mov	r0, r3
 8001ffe:	f002 fbe0 	bl	80047c2 <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002002:	78fb      	ldrb	r3, [r7, #3]
 8002004:	f003 030f 	and.w	r3, r3, #15
 8002008:	2b00      	cmp	r3, #0
 800200a:	d10a      	bne.n	8002022 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	6818      	ldr	r0, [r3, #0]
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	691b      	ldr	r3, [r3, #16]
 8002014:	b2d9      	uxtb	r1, r3
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800201c:	461a      	mov	r2, r3
 800201e:	f002 fda1 	bl	8004b64 <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd);
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	2200      	movs	r2, #0
 8002026:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800202a:	2300      	movs	r3, #0
}
 800202c:	4618      	mov	r0, r3
 800202e:	3710      	adds	r7, #16
 8002030:	46bd      	mov	sp, r7
 8002032:	bd80      	pop	{r7, pc}

08002034 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002034:	b580      	push	{r7, lr}
 8002036:	b084      	sub	sp, #16
 8002038:	af00      	add	r7, sp, #0
 800203a:	6078      	str	r0, [r7, #4]
 800203c:	460b      	mov	r3, r1
 800203e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002040:	78fb      	ldrb	r3, [r7, #3]
 8002042:	f003 020f 	and.w	r2, r3, #15
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	685b      	ldr	r3, [r3, #4]
 800204a:	429a      	cmp	r2, r3
 800204c:	d901      	bls.n	8002052 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800204e:	2301      	movs	r3, #1
 8002050:	e042      	b.n	80020d8 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002052:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002056:	2b00      	cmp	r3, #0
 8002058:	da0f      	bge.n	800207a <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800205a:	78fb      	ldrb	r3, [r7, #3]
 800205c:	f003 020f 	and.w	r2, r3, #15
 8002060:	4613      	mov	r3, r2
 8002062:	00db      	lsls	r3, r3, #3
 8002064:	1a9b      	subs	r3, r3, r2
 8002066:	009b      	lsls	r3, r3, #2
 8002068:	3338      	adds	r3, #56	; 0x38
 800206a:	687a      	ldr	r2, [r7, #4]
 800206c:	4413      	add	r3, r2
 800206e:	3304      	adds	r3, #4
 8002070:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	2201      	movs	r2, #1
 8002076:	705a      	strb	r2, [r3, #1]
 8002078:	e00f      	b.n	800209a <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800207a:	78fb      	ldrb	r3, [r7, #3]
 800207c:	f003 020f 	and.w	r2, r3, #15
 8002080:	4613      	mov	r3, r2
 8002082:	00db      	lsls	r3, r3, #3
 8002084:	1a9b      	subs	r3, r3, r2
 8002086:	009b      	lsls	r3, r3, #2
 8002088:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800208c:	687a      	ldr	r2, [r7, #4]
 800208e:	4413      	add	r3, r2
 8002090:	3304      	adds	r3, #4
 8002092:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	2200      	movs	r2, #0
 8002098:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	2200      	movs	r2, #0
 800209e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80020a0:	78fb      	ldrb	r3, [r7, #3]
 80020a2:	f003 030f 	and.w	r3, r3, #15
 80020a6:	b2da      	uxtb	r2, r3
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80020b2:	2b01      	cmp	r3, #1
 80020b4:	d101      	bne.n	80020ba <HAL_PCD_EP_ClrStall+0x86>
 80020b6:	2302      	movs	r3, #2
 80020b8:	e00e      	b.n	80020d8 <HAL_PCD_EP_ClrStall+0xa4>
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	2201      	movs	r2, #1
 80020be:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	68f9      	ldr	r1, [r7, #12]
 80020c8:	4618      	mov	r0, r3
 80020ca:	f002 fbe8 	bl	800489e <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	2200      	movs	r2, #0
 80020d2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80020d6:	2300      	movs	r3, #0
}
 80020d8:	4618      	mov	r0, r3
 80020da:	3710      	adds	r7, #16
 80020dc:	46bd      	mov	sp, r7
 80020de:	bd80      	pop	{r7, pc}

080020e0 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80020e0:	b580      	push	{r7, lr}
 80020e2:	b08a      	sub	sp, #40	; 0x28
 80020e4:	af02      	add	r7, sp, #8
 80020e6:	6078      	str	r0, [r7, #4]
 80020e8:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80020f0:	697b      	ldr	r3, [r7, #20]
 80020f2:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80020f4:	683a      	ldr	r2, [r7, #0]
 80020f6:	4613      	mov	r3, r2
 80020f8:	00db      	lsls	r3, r3, #3
 80020fa:	1a9b      	subs	r3, r3, r2
 80020fc:	009b      	lsls	r3, r3, #2
 80020fe:	3338      	adds	r3, #56	; 0x38
 8002100:	687a      	ldr	r2, [r7, #4]
 8002102:	4413      	add	r3, r2
 8002104:	3304      	adds	r3, #4
 8002106:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	699a      	ldr	r2, [r3, #24]
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	695b      	ldr	r3, [r3, #20]
 8002110:	429a      	cmp	r2, r3
 8002112:	d901      	bls.n	8002118 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8002114:	2301      	movs	r3, #1
 8002116:	e06c      	b.n	80021f2 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	695a      	ldr	r2, [r3, #20]
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	699b      	ldr	r3, [r3, #24]
 8002120:	1ad3      	subs	r3, r2, r3
 8002122:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	689b      	ldr	r3, [r3, #8]
 8002128:	69fa      	ldr	r2, [r7, #28]
 800212a:	429a      	cmp	r2, r3
 800212c:	d902      	bls.n	8002134 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	689b      	ldr	r3, [r3, #8]
 8002132:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8002134:	69fb      	ldr	r3, [r7, #28]
 8002136:	3303      	adds	r3, #3
 8002138:	089b      	lsrs	r3, r3, #2
 800213a:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800213c:	e02b      	b.n	8002196 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	695a      	ldr	r2, [r3, #20]
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	699b      	ldr	r3, [r3, #24]
 8002146:	1ad3      	subs	r3, r2, r3
 8002148:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	689b      	ldr	r3, [r3, #8]
 800214e:	69fa      	ldr	r2, [r7, #28]
 8002150:	429a      	cmp	r2, r3
 8002152:	d902      	bls.n	800215a <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	689b      	ldr	r3, [r3, #8]
 8002158:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800215a:	69fb      	ldr	r3, [r7, #28]
 800215c:	3303      	adds	r3, #3
 800215e:	089b      	lsrs	r3, r3, #2
 8002160:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	68d9      	ldr	r1, [r3, #12]
 8002166:	683b      	ldr	r3, [r7, #0]
 8002168:	b2da      	uxtb	r2, r3
 800216a:	69fb      	ldr	r3, [r7, #28]
 800216c:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002172:	b2db      	uxtb	r3, r3
 8002174:	9300      	str	r3, [sp, #0]
 8002176:	4603      	mov	r3, r0
 8002178:	6978      	ldr	r0, [r7, #20]
 800217a:	f002 fac4 	bl	8004706 <USB_WritePacket>

    ep->xfer_buff  += len;
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	68da      	ldr	r2, [r3, #12]
 8002182:	69fb      	ldr	r3, [r7, #28]
 8002184:	441a      	add	r2, r3
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	699a      	ldr	r2, [r3, #24]
 800218e:	69fb      	ldr	r3, [r7, #28]
 8002190:	441a      	add	r2, r3
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002196:	683b      	ldr	r3, [r7, #0]
 8002198:	015a      	lsls	r2, r3, #5
 800219a:	693b      	ldr	r3, [r7, #16]
 800219c:	4413      	add	r3, r2
 800219e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80021a2:	699b      	ldr	r3, [r3, #24]
 80021a4:	b29b      	uxth	r3, r3
 80021a6:	69ba      	ldr	r2, [r7, #24]
 80021a8:	429a      	cmp	r2, r3
 80021aa:	d809      	bhi.n	80021c0 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	699a      	ldr	r2, [r3, #24]
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80021b4:	429a      	cmp	r2, r3
 80021b6:	d203      	bcs.n	80021c0 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	695b      	ldr	r3, [r3, #20]
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d1be      	bne.n	800213e <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	695a      	ldr	r2, [r3, #20]
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	699b      	ldr	r3, [r3, #24]
 80021c8:	429a      	cmp	r2, r3
 80021ca:	d811      	bhi.n	80021f0 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80021cc:	683b      	ldr	r3, [r7, #0]
 80021ce:	f003 030f 	and.w	r3, r3, #15
 80021d2:	2201      	movs	r2, #1
 80021d4:	fa02 f303 	lsl.w	r3, r2, r3
 80021d8:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80021da:	693b      	ldr	r3, [r7, #16]
 80021dc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80021e0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80021e2:	68bb      	ldr	r3, [r7, #8]
 80021e4:	43db      	mvns	r3, r3
 80021e6:	6939      	ldr	r1, [r7, #16]
 80021e8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80021ec:	4013      	ands	r3, r2
 80021ee:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 80021f0:	2300      	movs	r3, #0
}
 80021f2:	4618      	mov	r0, r3
 80021f4:	3720      	adds	r7, #32
 80021f6:	46bd      	mov	sp, r7
 80021f8:	bd80      	pop	{r7, pc}
	...

080021fc <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80021fc:	b580      	push	{r7, lr}
 80021fe:	b086      	sub	sp, #24
 8002200:	af00      	add	r7, sp, #0
 8002202:	6078      	str	r0, [r7, #4]
 8002204:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800220c:	697b      	ldr	r3, [r7, #20]
 800220e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002210:	697b      	ldr	r3, [r7, #20]
 8002212:	333c      	adds	r3, #60	; 0x3c
 8002214:	3304      	adds	r3, #4
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800221a:	683b      	ldr	r3, [r7, #0]
 800221c:	015a      	lsls	r2, r3, #5
 800221e:	693b      	ldr	r3, [r7, #16]
 8002220:	4413      	add	r3, r2
 8002222:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002226:	689b      	ldr	r3, [r3, #8]
 8002228:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	691b      	ldr	r3, [r3, #16]
 800222e:	2b01      	cmp	r3, #1
 8002230:	f040 80b3 	bne.w	800239a <PCD_EP_OutXfrComplete_int+0x19e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8002234:	68bb      	ldr	r3, [r7, #8]
 8002236:	f003 0308 	and.w	r3, r3, #8
 800223a:	2b00      	cmp	r3, #0
 800223c:	d028      	beq.n	8002290 <PCD_EP_OutXfrComplete_int+0x94>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	4a70      	ldr	r2, [pc, #448]	; (8002404 <PCD_EP_OutXfrComplete_int+0x208>)
 8002242:	4293      	cmp	r3, r2
 8002244:	d90e      	bls.n	8002264 <PCD_EP_OutXfrComplete_int+0x68>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002246:	68bb      	ldr	r3, [r7, #8]
 8002248:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800224c:	2b00      	cmp	r3, #0
 800224e:	d009      	beq.n	8002264 <PCD_EP_OutXfrComplete_int+0x68>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002250:	683b      	ldr	r3, [r7, #0]
 8002252:	015a      	lsls	r2, r3, #5
 8002254:	693b      	ldr	r3, [r7, #16]
 8002256:	4413      	add	r3, r2
 8002258:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800225c:	461a      	mov	r2, r3
 800225e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002262:	6093      	str	r3, [r2, #8]

      /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SetupStageCallback(hpcd);
#else
      HAL_PCD_SetupStageCallback(hpcd);
 8002264:	6878      	ldr	r0, [r7, #4]
 8002266:	f006 fa61 	bl	800872c <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	6818      	ldr	r0, [r3, #0]
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002274:	461a      	mov	r2, r3
 8002276:	2101      	movs	r1, #1
 8002278:	f002 fc74 	bl	8004b64 <USB_EP0_OutStart>
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800227c:	683b      	ldr	r3, [r7, #0]
 800227e:	015a      	lsls	r2, r3, #5
 8002280:	693b      	ldr	r3, [r7, #16]
 8002282:	4413      	add	r3, r2
 8002284:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002288:	461a      	mov	r2, r3
 800228a:	2308      	movs	r3, #8
 800228c:	6093      	str	r3, [r2, #8]
 800228e:	e0b3      	b.n	80023f8 <PCD_EP_OutXfrComplete_int+0x1fc>
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8002290:	68bb      	ldr	r3, [r7, #8]
 8002292:	f003 0320 	and.w	r3, r3, #32
 8002296:	2b00      	cmp	r3, #0
 8002298:	d009      	beq.n	80022ae <PCD_EP_OutXfrComplete_int+0xb2>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800229a:	683b      	ldr	r3, [r7, #0]
 800229c:	015a      	lsls	r2, r3, #5
 800229e:	693b      	ldr	r3, [r7, #16]
 80022a0:	4413      	add	r3, r2
 80022a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80022a6:	461a      	mov	r2, r3
 80022a8:	2320      	movs	r3, #32
 80022aa:	6093      	str	r3, [r2, #8]
 80022ac:	e0a4      	b.n	80023f8 <PCD_EP_OutXfrComplete_int+0x1fc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80022ae:	68bb      	ldr	r3, [r7, #8]
 80022b0:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	f040 809f 	bne.w	80023f8 <PCD_EP_OutXfrComplete_int+0x1fc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	4a51      	ldr	r2, [pc, #324]	; (8002404 <PCD_EP_OutXfrComplete_int+0x208>)
 80022be:	4293      	cmp	r3, r2
 80022c0:	d90f      	bls.n	80022e2 <PCD_EP_OutXfrComplete_int+0xe6>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80022c2:	68bb      	ldr	r3, [r7, #8]
 80022c4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d00a      	beq.n	80022e2 <PCD_EP_OutXfrComplete_int+0xe6>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80022cc:	683b      	ldr	r3, [r7, #0]
 80022ce:	015a      	lsls	r2, r3, #5
 80022d0:	693b      	ldr	r3, [r7, #16]
 80022d2:	4413      	add	r3, r2
 80022d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80022d8:	461a      	mov	r2, r3
 80022da:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80022de:	6093      	str	r3, [r2, #8]
 80022e0:	e08a      	b.n	80023f8 <PCD_EP_OutXfrComplete_int+0x1fc>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 80022e2:	6879      	ldr	r1, [r7, #4]
 80022e4:	683a      	ldr	r2, [r7, #0]
 80022e6:	4613      	mov	r3, r2
 80022e8:	00db      	lsls	r3, r3, #3
 80022ea:	1a9b      	subs	r3, r3, r2
 80022ec:	009b      	lsls	r3, r3, #2
 80022ee:	440b      	add	r3, r1
 80022f0:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80022f4:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80022f6:	683b      	ldr	r3, [r7, #0]
 80022f8:	0159      	lsls	r1, r3, #5
 80022fa:	693b      	ldr	r3, [r7, #16]
 80022fc:	440b      	add	r3, r1
 80022fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002302:	691b      	ldr	r3, [r3, #16]
 8002304:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 8002308:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 800230a:	6878      	ldr	r0, [r7, #4]
 800230c:	683a      	ldr	r2, [r7, #0]
 800230e:	4613      	mov	r3, r2
 8002310:	00db      	lsls	r3, r3, #3
 8002312:	1a9b      	subs	r3, r3, r2
 8002314:	009b      	lsls	r3, r3, #2
 8002316:	4403      	add	r3, r0
 8002318:	f503 7305 	add.w	r3, r3, #532	; 0x214
 800231c:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 800231e:	6879      	ldr	r1, [r7, #4]
 8002320:	683a      	ldr	r2, [r7, #0]
 8002322:	4613      	mov	r3, r2
 8002324:	00db      	lsls	r3, r3, #3
 8002326:	1a9b      	subs	r3, r3, r2
 8002328:	009b      	lsls	r3, r3, #2
 800232a:	440b      	add	r3, r1
 800232c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002330:	6819      	ldr	r1, [r3, #0]
 8002332:	6878      	ldr	r0, [r7, #4]
 8002334:	683a      	ldr	r2, [r7, #0]
 8002336:	4613      	mov	r3, r2
 8002338:	00db      	lsls	r3, r3, #3
 800233a:	1a9b      	subs	r3, r3, r2
 800233c:	009b      	lsls	r3, r3, #2
 800233e:	4403      	add	r3, r0
 8002340:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	4419      	add	r1, r3
 8002348:	6878      	ldr	r0, [r7, #4]
 800234a:	683a      	ldr	r2, [r7, #0]
 800234c:	4613      	mov	r3, r2
 800234e:	00db      	lsls	r3, r3, #3
 8002350:	1a9b      	subs	r3, r3, r2
 8002352:	009b      	lsls	r3, r3, #2
 8002354:	4403      	add	r3, r0
 8002356:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800235a:	6019      	str	r1, [r3, #0]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800235c:	683b      	ldr	r3, [r7, #0]
 800235e:	b2db      	uxtb	r3, r3
 8002360:	4619      	mov	r1, r3
 8002362:	6878      	ldr	r0, [r7, #4]
 8002364:	f006 f9f4 	bl	8008750 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8002368:	683b      	ldr	r3, [r7, #0]
 800236a:	2b00      	cmp	r3, #0
 800236c:	d144      	bne.n	80023f8 <PCD_EP_OutXfrComplete_int+0x1fc>
 800236e:	6879      	ldr	r1, [r7, #4]
 8002370:	683a      	ldr	r2, [r7, #0]
 8002372:	4613      	mov	r3, r2
 8002374:	00db      	lsls	r3, r3, #3
 8002376:	1a9b      	subs	r3, r3, r2
 8002378:	009b      	lsls	r3, r3, #2
 800237a:	440b      	add	r3, r1
 800237c:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	2b00      	cmp	r3, #0
 8002384:	d138      	bne.n	80023f8 <PCD_EP_OutXfrComplete_int+0x1fc>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	6818      	ldr	r0, [r3, #0]
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002390:	461a      	mov	r2, r3
 8002392:	2101      	movs	r1, #1
 8002394:	f002 fbe6 	bl	8004b64 <USB_EP0_OutStart>
 8002398:	e02e      	b.n	80023f8 <PCD_EP_OutXfrComplete_int+0x1fc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	4a1a      	ldr	r2, [pc, #104]	; (8002408 <PCD_EP_OutXfrComplete_int+0x20c>)
 800239e:	4293      	cmp	r3, r2
 80023a0:	d124      	bne.n	80023ec <PCD_EP_OutXfrComplete_int+0x1f0>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80023a2:	68bb      	ldr	r3, [r7, #8]
 80023a4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d00a      	beq.n	80023c2 <PCD_EP_OutXfrComplete_int+0x1c6>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80023ac:	683b      	ldr	r3, [r7, #0]
 80023ae:	015a      	lsls	r2, r3, #5
 80023b0:	693b      	ldr	r3, [r7, #16]
 80023b2:	4413      	add	r3, r2
 80023b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80023b8:	461a      	mov	r2, r3
 80023ba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80023be:	6093      	str	r3, [r2, #8]
 80023c0:	e01a      	b.n	80023f8 <PCD_EP_OutXfrComplete_int+0x1fc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80023c2:	68bb      	ldr	r3, [r7, #8]
 80023c4:	f003 0320 	and.w	r3, r3, #32
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d008      	beq.n	80023de <PCD_EP_OutXfrComplete_int+0x1e2>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80023cc:	683b      	ldr	r3, [r7, #0]
 80023ce:	015a      	lsls	r2, r3, #5
 80023d0:	693b      	ldr	r3, [r7, #16]
 80023d2:	4413      	add	r3, r2
 80023d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80023d8:	461a      	mov	r2, r3
 80023da:	2320      	movs	r3, #32
 80023dc:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80023de:	683b      	ldr	r3, [r7, #0]
 80023e0:	b2db      	uxtb	r3, r3
 80023e2:	4619      	mov	r1, r3
 80023e4:	6878      	ldr	r0, [r7, #4]
 80023e6:	f006 f9b3 	bl	8008750 <HAL_PCD_DataOutStageCallback>
 80023ea:	e005      	b.n	80023f8 <PCD_EP_OutXfrComplete_int+0x1fc>
    else
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80023ec:	683b      	ldr	r3, [r7, #0]
 80023ee:	b2db      	uxtb	r3, r3
 80023f0:	4619      	mov	r1, r3
 80023f2:	6878      	ldr	r0, [r7, #4]
 80023f4:	f006 f9ac 	bl	8008750 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80023f8:	2300      	movs	r3, #0
}
 80023fa:	4618      	mov	r0, r3
 80023fc:	3718      	adds	r7, #24
 80023fe:	46bd      	mov	sp, r7
 8002400:	bd80      	pop	{r7, pc}
 8002402:	bf00      	nop
 8002404:	4f54300a 	.word	0x4f54300a
 8002408:	4f54310a 	.word	0x4f54310a

0800240c <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800240c:	b580      	push	{r7, lr}
 800240e:	b086      	sub	sp, #24
 8002410:	af00      	add	r7, sp, #0
 8002412:	6078      	str	r0, [r7, #4]
 8002414:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800241c:	697b      	ldr	r3, [r7, #20]
 800241e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002420:	697b      	ldr	r3, [r7, #20]
 8002422:	333c      	adds	r3, #60	; 0x3c
 8002424:	3304      	adds	r3, #4
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800242a:	683b      	ldr	r3, [r7, #0]
 800242c:	015a      	lsls	r2, r3, #5
 800242e:	693b      	ldr	r3, [r7, #16]
 8002430:	4413      	add	r3, r2
 8002432:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002436:	689b      	ldr	r3, [r3, #8]
 8002438:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	691b      	ldr	r3, [r3, #16]
 800243e:	2b01      	cmp	r3, #1
 8002440:	d113      	bne.n	800246a <PCD_EP_OutSetupPacket_int+0x5e>
  {
    /* StupPktRcvd = 1 pending setup packet int */
    if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	4a1f      	ldr	r2, [pc, #124]	; (80024c4 <PCD_EP_OutSetupPacket_int+0xb8>)
 8002446:	4293      	cmp	r3, r2
 8002448:	d922      	bls.n	8002490 <PCD_EP_OutSetupPacket_int+0x84>
        ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800244a:	68bb      	ldr	r3, [r7, #8]
 800244c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
    if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002450:	2b00      	cmp	r3, #0
 8002452:	d01d      	beq.n	8002490 <PCD_EP_OutSetupPacket_int+0x84>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002454:	683b      	ldr	r3, [r7, #0]
 8002456:	015a      	lsls	r2, r3, #5
 8002458:	693b      	ldr	r3, [r7, #16]
 800245a:	4413      	add	r3, r2
 800245c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002460:	461a      	mov	r2, r3
 8002462:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002466:	6093      	str	r3, [r2, #8]
 8002468:	e012      	b.n	8002490 <PCD_EP_OutSetupPacket_int+0x84>
    }
  }
  else
  {
    if ((gSNPSiD == USB_OTG_CORE_ID_310A) &&
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	4a16      	ldr	r2, [pc, #88]	; (80024c8 <PCD_EP_OutSetupPacket_int+0xbc>)
 800246e:	4293      	cmp	r3, r2
 8002470:	d10e      	bne.n	8002490 <PCD_EP_OutSetupPacket_int+0x84>
        ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002472:	68bb      	ldr	r3, [r7, #8]
 8002474:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
    if ((gSNPSiD == USB_OTG_CORE_ID_310A) &&
 8002478:	2b00      	cmp	r3, #0
 800247a:	d009      	beq.n	8002490 <PCD_EP_OutSetupPacket_int+0x84>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800247c:	683b      	ldr	r3, [r7, #0]
 800247e:	015a      	lsls	r2, r3, #5
 8002480:	693b      	ldr	r3, [r7, #16]
 8002482:	4413      	add	r3, r2
 8002484:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002488:	461a      	mov	r2, r3
 800248a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800248e:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8002490:	6878      	ldr	r0, [r7, #4]
 8002492:	f006 f94b 	bl	800872c <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	4a0a      	ldr	r2, [pc, #40]	; (80024c4 <PCD_EP_OutSetupPacket_int+0xb8>)
 800249a:	4293      	cmp	r3, r2
 800249c:	d90c      	bls.n	80024b8 <PCD_EP_OutSetupPacket_int+0xac>
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	691b      	ldr	r3, [r3, #16]
 80024a2:	2b01      	cmp	r3, #1
 80024a4:	d108      	bne.n	80024b8 <PCD_EP_OutSetupPacket_int+0xac>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	6818      	ldr	r0, [r3, #0]
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80024b0:	461a      	mov	r2, r3
 80024b2:	2101      	movs	r1, #1
 80024b4:	f002 fb56 	bl	8004b64 <USB_EP0_OutStart>
  }

  return HAL_OK;
 80024b8:	2300      	movs	r3, #0
}
 80024ba:	4618      	mov	r0, r3
 80024bc:	3718      	adds	r7, #24
 80024be:	46bd      	mov	sp, r7
 80024c0:	bd80      	pop	{r7, pc}
 80024c2:	bf00      	nop
 80024c4:	4f54300a 	.word	0x4f54300a
 80024c8:	4f54310a 	.word	0x4f54310a

080024cc <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80024cc:	b480      	push	{r7}
 80024ce:	b083      	sub	sp, #12
 80024d0:	af00      	add	r7, sp, #0
 80024d2:	6078      	str	r0, [r7, #4]
 80024d4:	460b      	mov	r3, r1
 80024d6:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80024d8:	bf00      	nop
 80024da:	370c      	adds	r7, #12
 80024dc:	46bd      	mov	sp, r7
 80024de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e2:	4770      	bx	lr

080024e4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80024e4:	b580      	push	{r7, lr}
 80024e6:	b086      	sub	sp, #24
 80024e8:	af00      	add	r7, sp, #0
 80024ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d101      	bne.n	80024f6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80024f2:	2301      	movs	r3, #1
 80024f4:	e22d      	b.n	8002952 <HAL_RCC_OscConfig+0x46e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	f003 0301 	and.w	r3, r3, #1
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d075      	beq.n	80025ee <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002502:	4ba3      	ldr	r3, [pc, #652]	; (8002790 <HAL_RCC_OscConfig+0x2ac>)
 8002504:	689b      	ldr	r3, [r3, #8]
 8002506:	f003 030c 	and.w	r3, r3, #12
 800250a:	2b04      	cmp	r3, #4
 800250c:	d00c      	beq.n	8002528 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800250e:	4ba0      	ldr	r3, [pc, #640]	; (8002790 <HAL_RCC_OscConfig+0x2ac>)
 8002510:	689b      	ldr	r3, [r3, #8]
 8002512:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002516:	2b08      	cmp	r3, #8
 8002518:	d112      	bne.n	8002540 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800251a:	4b9d      	ldr	r3, [pc, #628]	; (8002790 <HAL_RCC_OscConfig+0x2ac>)
 800251c:	685b      	ldr	r3, [r3, #4]
 800251e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002522:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002526:	d10b      	bne.n	8002540 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002528:	4b99      	ldr	r3, [pc, #612]	; (8002790 <HAL_RCC_OscConfig+0x2ac>)
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002530:	2b00      	cmp	r3, #0
 8002532:	d05b      	beq.n	80025ec <HAL_RCC_OscConfig+0x108>
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	685b      	ldr	r3, [r3, #4]
 8002538:	2b00      	cmp	r3, #0
 800253a:	d157      	bne.n	80025ec <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800253c:	2301      	movs	r3, #1
 800253e:	e208      	b.n	8002952 <HAL_RCC_OscConfig+0x46e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	685b      	ldr	r3, [r3, #4]
 8002544:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002548:	d106      	bne.n	8002558 <HAL_RCC_OscConfig+0x74>
 800254a:	4b91      	ldr	r3, [pc, #580]	; (8002790 <HAL_RCC_OscConfig+0x2ac>)
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	4a90      	ldr	r2, [pc, #576]	; (8002790 <HAL_RCC_OscConfig+0x2ac>)
 8002550:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002554:	6013      	str	r3, [r2, #0]
 8002556:	e01d      	b.n	8002594 <HAL_RCC_OscConfig+0xb0>
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	685b      	ldr	r3, [r3, #4]
 800255c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002560:	d10c      	bne.n	800257c <HAL_RCC_OscConfig+0x98>
 8002562:	4b8b      	ldr	r3, [pc, #556]	; (8002790 <HAL_RCC_OscConfig+0x2ac>)
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	4a8a      	ldr	r2, [pc, #552]	; (8002790 <HAL_RCC_OscConfig+0x2ac>)
 8002568:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800256c:	6013      	str	r3, [r2, #0]
 800256e:	4b88      	ldr	r3, [pc, #544]	; (8002790 <HAL_RCC_OscConfig+0x2ac>)
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	4a87      	ldr	r2, [pc, #540]	; (8002790 <HAL_RCC_OscConfig+0x2ac>)
 8002574:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002578:	6013      	str	r3, [r2, #0]
 800257a:	e00b      	b.n	8002594 <HAL_RCC_OscConfig+0xb0>
 800257c:	4b84      	ldr	r3, [pc, #528]	; (8002790 <HAL_RCC_OscConfig+0x2ac>)
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	4a83      	ldr	r2, [pc, #524]	; (8002790 <HAL_RCC_OscConfig+0x2ac>)
 8002582:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002586:	6013      	str	r3, [r2, #0]
 8002588:	4b81      	ldr	r3, [pc, #516]	; (8002790 <HAL_RCC_OscConfig+0x2ac>)
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	4a80      	ldr	r2, [pc, #512]	; (8002790 <HAL_RCC_OscConfig+0x2ac>)
 800258e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002592:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	685b      	ldr	r3, [r3, #4]
 8002598:	2b00      	cmp	r3, #0
 800259a:	d013      	beq.n	80025c4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800259c:	f7fe fcf4 	bl	8000f88 <HAL_GetTick>
 80025a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025a2:	e008      	b.n	80025b6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80025a4:	f7fe fcf0 	bl	8000f88 <HAL_GetTick>
 80025a8:	4602      	mov	r2, r0
 80025aa:	693b      	ldr	r3, [r7, #16]
 80025ac:	1ad3      	subs	r3, r2, r3
 80025ae:	2b64      	cmp	r3, #100	; 0x64
 80025b0:	d901      	bls.n	80025b6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80025b2:	2303      	movs	r3, #3
 80025b4:	e1cd      	b.n	8002952 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025b6:	4b76      	ldr	r3, [pc, #472]	; (8002790 <HAL_RCC_OscConfig+0x2ac>)
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d0f0      	beq.n	80025a4 <HAL_RCC_OscConfig+0xc0>
 80025c2:	e014      	b.n	80025ee <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025c4:	f7fe fce0 	bl	8000f88 <HAL_GetTick>
 80025c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80025ca:	e008      	b.n	80025de <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80025cc:	f7fe fcdc 	bl	8000f88 <HAL_GetTick>
 80025d0:	4602      	mov	r2, r0
 80025d2:	693b      	ldr	r3, [r7, #16]
 80025d4:	1ad3      	subs	r3, r2, r3
 80025d6:	2b64      	cmp	r3, #100	; 0x64
 80025d8:	d901      	bls.n	80025de <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80025da:	2303      	movs	r3, #3
 80025dc:	e1b9      	b.n	8002952 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80025de:	4b6c      	ldr	r3, [pc, #432]	; (8002790 <HAL_RCC_OscConfig+0x2ac>)
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d1f0      	bne.n	80025cc <HAL_RCC_OscConfig+0xe8>
 80025ea:	e000      	b.n	80025ee <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80025ec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	f003 0302 	and.w	r3, r3, #2
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d063      	beq.n	80026c2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80025fa:	4b65      	ldr	r3, [pc, #404]	; (8002790 <HAL_RCC_OscConfig+0x2ac>)
 80025fc:	689b      	ldr	r3, [r3, #8]
 80025fe:	f003 030c 	and.w	r3, r3, #12
 8002602:	2b00      	cmp	r3, #0
 8002604:	d00b      	beq.n	800261e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002606:	4b62      	ldr	r3, [pc, #392]	; (8002790 <HAL_RCC_OscConfig+0x2ac>)
 8002608:	689b      	ldr	r3, [r3, #8]
 800260a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800260e:	2b08      	cmp	r3, #8
 8002610:	d11c      	bne.n	800264c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002612:	4b5f      	ldr	r3, [pc, #380]	; (8002790 <HAL_RCC_OscConfig+0x2ac>)
 8002614:	685b      	ldr	r3, [r3, #4]
 8002616:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800261a:	2b00      	cmp	r3, #0
 800261c:	d116      	bne.n	800264c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800261e:	4b5c      	ldr	r3, [pc, #368]	; (8002790 <HAL_RCC_OscConfig+0x2ac>)
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	f003 0302 	and.w	r3, r3, #2
 8002626:	2b00      	cmp	r3, #0
 8002628:	d005      	beq.n	8002636 <HAL_RCC_OscConfig+0x152>
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	68db      	ldr	r3, [r3, #12]
 800262e:	2b01      	cmp	r3, #1
 8002630:	d001      	beq.n	8002636 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002632:	2301      	movs	r3, #1
 8002634:	e18d      	b.n	8002952 <HAL_RCC_OscConfig+0x46e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002636:	4b56      	ldr	r3, [pc, #344]	; (8002790 <HAL_RCC_OscConfig+0x2ac>)
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	691b      	ldr	r3, [r3, #16]
 8002642:	00db      	lsls	r3, r3, #3
 8002644:	4952      	ldr	r1, [pc, #328]	; (8002790 <HAL_RCC_OscConfig+0x2ac>)
 8002646:	4313      	orrs	r3, r2
 8002648:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800264a:	e03a      	b.n	80026c2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	68db      	ldr	r3, [r3, #12]
 8002650:	2b00      	cmp	r3, #0
 8002652:	d020      	beq.n	8002696 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002654:	4b4f      	ldr	r3, [pc, #316]	; (8002794 <HAL_RCC_OscConfig+0x2b0>)
 8002656:	2201      	movs	r2, #1
 8002658:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800265a:	f7fe fc95 	bl	8000f88 <HAL_GetTick>
 800265e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002660:	e008      	b.n	8002674 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002662:	f7fe fc91 	bl	8000f88 <HAL_GetTick>
 8002666:	4602      	mov	r2, r0
 8002668:	693b      	ldr	r3, [r7, #16]
 800266a:	1ad3      	subs	r3, r2, r3
 800266c:	2b02      	cmp	r3, #2
 800266e:	d901      	bls.n	8002674 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002670:	2303      	movs	r3, #3
 8002672:	e16e      	b.n	8002952 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002674:	4b46      	ldr	r3, [pc, #280]	; (8002790 <HAL_RCC_OscConfig+0x2ac>)
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	f003 0302 	and.w	r3, r3, #2
 800267c:	2b00      	cmp	r3, #0
 800267e:	d0f0      	beq.n	8002662 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002680:	4b43      	ldr	r3, [pc, #268]	; (8002790 <HAL_RCC_OscConfig+0x2ac>)
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	691b      	ldr	r3, [r3, #16]
 800268c:	00db      	lsls	r3, r3, #3
 800268e:	4940      	ldr	r1, [pc, #256]	; (8002790 <HAL_RCC_OscConfig+0x2ac>)
 8002690:	4313      	orrs	r3, r2
 8002692:	600b      	str	r3, [r1, #0]
 8002694:	e015      	b.n	80026c2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002696:	4b3f      	ldr	r3, [pc, #252]	; (8002794 <HAL_RCC_OscConfig+0x2b0>)
 8002698:	2200      	movs	r2, #0
 800269a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800269c:	f7fe fc74 	bl	8000f88 <HAL_GetTick>
 80026a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80026a2:	e008      	b.n	80026b6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80026a4:	f7fe fc70 	bl	8000f88 <HAL_GetTick>
 80026a8:	4602      	mov	r2, r0
 80026aa:	693b      	ldr	r3, [r7, #16]
 80026ac:	1ad3      	subs	r3, r2, r3
 80026ae:	2b02      	cmp	r3, #2
 80026b0:	d901      	bls.n	80026b6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80026b2:	2303      	movs	r3, #3
 80026b4:	e14d      	b.n	8002952 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80026b6:	4b36      	ldr	r3, [pc, #216]	; (8002790 <HAL_RCC_OscConfig+0x2ac>)
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	f003 0302 	and.w	r3, r3, #2
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d1f0      	bne.n	80026a4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	f003 0308 	and.w	r3, r3, #8
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d030      	beq.n	8002730 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	695b      	ldr	r3, [r3, #20]
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d016      	beq.n	8002704 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80026d6:	4b30      	ldr	r3, [pc, #192]	; (8002798 <HAL_RCC_OscConfig+0x2b4>)
 80026d8:	2201      	movs	r2, #1
 80026da:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026dc:	f7fe fc54 	bl	8000f88 <HAL_GetTick>
 80026e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80026e2:	e008      	b.n	80026f6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80026e4:	f7fe fc50 	bl	8000f88 <HAL_GetTick>
 80026e8:	4602      	mov	r2, r0
 80026ea:	693b      	ldr	r3, [r7, #16]
 80026ec:	1ad3      	subs	r3, r2, r3
 80026ee:	2b02      	cmp	r3, #2
 80026f0:	d901      	bls.n	80026f6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80026f2:	2303      	movs	r3, #3
 80026f4:	e12d      	b.n	8002952 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80026f6:	4b26      	ldr	r3, [pc, #152]	; (8002790 <HAL_RCC_OscConfig+0x2ac>)
 80026f8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80026fa:	f003 0302 	and.w	r3, r3, #2
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d0f0      	beq.n	80026e4 <HAL_RCC_OscConfig+0x200>
 8002702:	e015      	b.n	8002730 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002704:	4b24      	ldr	r3, [pc, #144]	; (8002798 <HAL_RCC_OscConfig+0x2b4>)
 8002706:	2200      	movs	r2, #0
 8002708:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800270a:	f7fe fc3d 	bl	8000f88 <HAL_GetTick>
 800270e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002710:	e008      	b.n	8002724 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002712:	f7fe fc39 	bl	8000f88 <HAL_GetTick>
 8002716:	4602      	mov	r2, r0
 8002718:	693b      	ldr	r3, [r7, #16]
 800271a:	1ad3      	subs	r3, r2, r3
 800271c:	2b02      	cmp	r3, #2
 800271e:	d901      	bls.n	8002724 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002720:	2303      	movs	r3, #3
 8002722:	e116      	b.n	8002952 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002724:	4b1a      	ldr	r3, [pc, #104]	; (8002790 <HAL_RCC_OscConfig+0x2ac>)
 8002726:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002728:	f003 0302 	and.w	r3, r3, #2
 800272c:	2b00      	cmp	r3, #0
 800272e:	d1f0      	bne.n	8002712 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	f003 0304 	and.w	r3, r3, #4
 8002738:	2b00      	cmp	r3, #0
 800273a:	f000 80a0 	beq.w	800287e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800273e:	2300      	movs	r3, #0
 8002740:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002742:	4b13      	ldr	r3, [pc, #76]	; (8002790 <HAL_RCC_OscConfig+0x2ac>)
 8002744:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002746:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800274a:	2b00      	cmp	r3, #0
 800274c:	d10f      	bne.n	800276e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800274e:	2300      	movs	r3, #0
 8002750:	60fb      	str	r3, [r7, #12]
 8002752:	4b0f      	ldr	r3, [pc, #60]	; (8002790 <HAL_RCC_OscConfig+0x2ac>)
 8002754:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002756:	4a0e      	ldr	r2, [pc, #56]	; (8002790 <HAL_RCC_OscConfig+0x2ac>)
 8002758:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800275c:	6413      	str	r3, [r2, #64]	; 0x40
 800275e:	4b0c      	ldr	r3, [pc, #48]	; (8002790 <HAL_RCC_OscConfig+0x2ac>)
 8002760:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002762:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002766:	60fb      	str	r3, [r7, #12]
 8002768:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800276a:	2301      	movs	r3, #1
 800276c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800276e:	4b0b      	ldr	r3, [pc, #44]	; (800279c <HAL_RCC_OscConfig+0x2b8>)
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002776:	2b00      	cmp	r3, #0
 8002778:	d121      	bne.n	80027be <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800277a:	4b08      	ldr	r3, [pc, #32]	; (800279c <HAL_RCC_OscConfig+0x2b8>)
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	4a07      	ldr	r2, [pc, #28]	; (800279c <HAL_RCC_OscConfig+0x2b8>)
 8002780:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002784:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002786:	f7fe fbff 	bl	8000f88 <HAL_GetTick>
 800278a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800278c:	e011      	b.n	80027b2 <HAL_RCC_OscConfig+0x2ce>
 800278e:	bf00      	nop
 8002790:	40023800 	.word	0x40023800
 8002794:	42470000 	.word	0x42470000
 8002798:	42470e80 	.word	0x42470e80
 800279c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80027a0:	f7fe fbf2 	bl	8000f88 <HAL_GetTick>
 80027a4:	4602      	mov	r2, r0
 80027a6:	693b      	ldr	r3, [r7, #16]
 80027a8:	1ad3      	subs	r3, r2, r3
 80027aa:	2b02      	cmp	r3, #2
 80027ac:	d901      	bls.n	80027b2 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80027ae:	2303      	movs	r3, #3
 80027b0:	e0cf      	b.n	8002952 <HAL_RCC_OscConfig+0x46e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027b2:	4b6a      	ldr	r3, [pc, #424]	; (800295c <HAL_RCC_OscConfig+0x478>)
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d0f0      	beq.n	80027a0 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	689b      	ldr	r3, [r3, #8]
 80027c2:	2b01      	cmp	r3, #1
 80027c4:	d106      	bne.n	80027d4 <HAL_RCC_OscConfig+0x2f0>
 80027c6:	4b66      	ldr	r3, [pc, #408]	; (8002960 <HAL_RCC_OscConfig+0x47c>)
 80027c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027ca:	4a65      	ldr	r2, [pc, #404]	; (8002960 <HAL_RCC_OscConfig+0x47c>)
 80027cc:	f043 0301 	orr.w	r3, r3, #1
 80027d0:	6713      	str	r3, [r2, #112]	; 0x70
 80027d2:	e01c      	b.n	800280e <HAL_RCC_OscConfig+0x32a>
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	689b      	ldr	r3, [r3, #8]
 80027d8:	2b05      	cmp	r3, #5
 80027da:	d10c      	bne.n	80027f6 <HAL_RCC_OscConfig+0x312>
 80027dc:	4b60      	ldr	r3, [pc, #384]	; (8002960 <HAL_RCC_OscConfig+0x47c>)
 80027de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027e0:	4a5f      	ldr	r2, [pc, #380]	; (8002960 <HAL_RCC_OscConfig+0x47c>)
 80027e2:	f043 0304 	orr.w	r3, r3, #4
 80027e6:	6713      	str	r3, [r2, #112]	; 0x70
 80027e8:	4b5d      	ldr	r3, [pc, #372]	; (8002960 <HAL_RCC_OscConfig+0x47c>)
 80027ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027ec:	4a5c      	ldr	r2, [pc, #368]	; (8002960 <HAL_RCC_OscConfig+0x47c>)
 80027ee:	f043 0301 	orr.w	r3, r3, #1
 80027f2:	6713      	str	r3, [r2, #112]	; 0x70
 80027f4:	e00b      	b.n	800280e <HAL_RCC_OscConfig+0x32a>
 80027f6:	4b5a      	ldr	r3, [pc, #360]	; (8002960 <HAL_RCC_OscConfig+0x47c>)
 80027f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027fa:	4a59      	ldr	r2, [pc, #356]	; (8002960 <HAL_RCC_OscConfig+0x47c>)
 80027fc:	f023 0301 	bic.w	r3, r3, #1
 8002800:	6713      	str	r3, [r2, #112]	; 0x70
 8002802:	4b57      	ldr	r3, [pc, #348]	; (8002960 <HAL_RCC_OscConfig+0x47c>)
 8002804:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002806:	4a56      	ldr	r2, [pc, #344]	; (8002960 <HAL_RCC_OscConfig+0x47c>)
 8002808:	f023 0304 	bic.w	r3, r3, #4
 800280c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	689b      	ldr	r3, [r3, #8]
 8002812:	2b00      	cmp	r3, #0
 8002814:	d015      	beq.n	8002842 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002816:	f7fe fbb7 	bl	8000f88 <HAL_GetTick>
 800281a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800281c:	e00a      	b.n	8002834 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800281e:	f7fe fbb3 	bl	8000f88 <HAL_GetTick>
 8002822:	4602      	mov	r2, r0
 8002824:	693b      	ldr	r3, [r7, #16]
 8002826:	1ad3      	subs	r3, r2, r3
 8002828:	f241 3288 	movw	r2, #5000	; 0x1388
 800282c:	4293      	cmp	r3, r2
 800282e:	d901      	bls.n	8002834 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002830:	2303      	movs	r3, #3
 8002832:	e08e      	b.n	8002952 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002834:	4b4a      	ldr	r3, [pc, #296]	; (8002960 <HAL_RCC_OscConfig+0x47c>)
 8002836:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002838:	f003 0302 	and.w	r3, r3, #2
 800283c:	2b00      	cmp	r3, #0
 800283e:	d0ee      	beq.n	800281e <HAL_RCC_OscConfig+0x33a>
 8002840:	e014      	b.n	800286c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002842:	f7fe fba1 	bl	8000f88 <HAL_GetTick>
 8002846:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002848:	e00a      	b.n	8002860 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800284a:	f7fe fb9d 	bl	8000f88 <HAL_GetTick>
 800284e:	4602      	mov	r2, r0
 8002850:	693b      	ldr	r3, [r7, #16]
 8002852:	1ad3      	subs	r3, r2, r3
 8002854:	f241 3288 	movw	r2, #5000	; 0x1388
 8002858:	4293      	cmp	r3, r2
 800285a:	d901      	bls.n	8002860 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 800285c:	2303      	movs	r3, #3
 800285e:	e078      	b.n	8002952 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002860:	4b3f      	ldr	r3, [pc, #252]	; (8002960 <HAL_RCC_OscConfig+0x47c>)
 8002862:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002864:	f003 0302 	and.w	r3, r3, #2
 8002868:	2b00      	cmp	r3, #0
 800286a:	d1ee      	bne.n	800284a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800286c:	7dfb      	ldrb	r3, [r7, #23]
 800286e:	2b01      	cmp	r3, #1
 8002870:	d105      	bne.n	800287e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002872:	4b3b      	ldr	r3, [pc, #236]	; (8002960 <HAL_RCC_OscConfig+0x47c>)
 8002874:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002876:	4a3a      	ldr	r2, [pc, #232]	; (8002960 <HAL_RCC_OscConfig+0x47c>)
 8002878:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800287c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	699b      	ldr	r3, [r3, #24]
 8002882:	2b00      	cmp	r3, #0
 8002884:	d064      	beq.n	8002950 <HAL_RCC_OscConfig+0x46c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002886:	4b36      	ldr	r3, [pc, #216]	; (8002960 <HAL_RCC_OscConfig+0x47c>)
 8002888:	689b      	ldr	r3, [r3, #8]
 800288a:	f003 030c 	and.w	r3, r3, #12
 800288e:	2b08      	cmp	r3, #8
 8002890:	d05c      	beq.n	800294c <HAL_RCC_OscConfig+0x468>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	699b      	ldr	r3, [r3, #24]
 8002896:	2b02      	cmp	r3, #2
 8002898:	d141      	bne.n	800291e <HAL_RCC_OscConfig+0x43a>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800289a:	4b32      	ldr	r3, [pc, #200]	; (8002964 <HAL_RCC_OscConfig+0x480>)
 800289c:	2200      	movs	r2, #0
 800289e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028a0:	f7fe fb72 	bl	8000f88 <HAL_GetTick>
 80028a4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80028a6:	e008      	b.n	80028ba <HAL_RCC_OscConfig+0x3d6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80028a8:	f7fe fb6e 	bl	8000f88 <HAL_GetTick>
 80028ac:	4602      	mov	r2, r0
 80028ae:	693b      	ldr	r3, [r7, #16]
 80028b0:	1ad3      	subs	r3, r2, r3
 80028b2:	2b02      	cmp	r3, #2
 80028b4:	d901      	bls.n	80028ba <HAL_RCC_OscConfig+0x3d6>
          {
            return HAL_TIMEOUT;
 80028b6:	2303      	movs	r3, #3
 80028b8:	e04b      	b.n	8002952 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80028ba:	4b29      	ldr	r3, [pc, #164]	; (8002960 <HAL_RCC_OscConfig+0x47c>)
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d1f0      	bne.n	80028a8 <HAL_RCC_OscConfig+0x3c4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	69da      	ldr	r2, [r3, #28]
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	6a1b      	ldr	r3, [r3, #32]
 80028ce:	431a      	orrs	r2, r3
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028d4:	019b      	lsls	r3, r3, #6
 80028d6:	431a      	orrs	r2, r3
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028dc:	085b      	lsrs	r3, r3, #1
 80028de:	3b01      	subs	r3, #1
 80028e0:	041b      	lsls	r3, r3, #16
 80028e2:	431a      	orrs	r2, r3
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028e8:	061b      	lsls	r3, r3, #24
 80028ea:	491d      	ldr	r1, [pc, #116]	; (8002960 <HAL_RCC_OscConfig+0x47c>)
 80028ec:	4313      	orrs	r3, r2
 80028ee:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80028f0:	4b1c      	ldr	r3, [pc, #112]	; (8002964 <HAL_RCC_OscConfig+0x480>)
 80028f2:	2201      	movs	r2, #1
 80028f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028f6:	f7fe fb47 	bl	8000f88 <HAL_GetTick>
 80028fa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80028fc:	e008      	b.n	8002910 <HAL_RCC_OscConfig+0x42c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80028fe:	f7fe fb43 	bl	8000f88 <HAL_GetTick>
 8002902:	4602      	mov	r2, r0
 8002904:	693b      	ldr	r3, [r7, #16]
 8002906:	1ad3      	subs	r3, r2, r3
 8002908:	2b02      	cmp	r3, #2
 800290a:	d901      	bls.n	8002910 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 800290c:	2303      	movs	r3, #3
 800290e:	e020      	b.n	8002952 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002910:	4b13      	ldr	r3, [pc, #76]	; (8002960 <HAL_RCC_OscConfig+0x47c>)
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002918:	2b00      	cmp	r3, #0
 800291a:	d0f0      	beq.n	80028fe <HAL_RCC_OscConfig+0x41a>
 800291c:	e018      	b.n	8002950 <HAL_RCC_OscConfig+0x46c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800291e:	4b11      	ldr	r3, [pc, #68]	; (8002964 <HAL_RCC_OscConfig+0x480>)
 8002920:	2200      	movs	r2, #0
 8002922:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002924:	f7fe fb30 	bl	8000f88 <HAL_GetTick>
 8002928:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800292a:	e008      	b.n	800293e <HAL_RCC_OscConfig+0x45a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800292c:	f7fe fb2c 	bl	8000f88 <HAL_GetTick>
 8002930:	4602      	mov	r2, r0
 8002932:	693b      	ldr	r3, [r7, #16]
 8002934:	1ad3      	subs	r3, r2, r3
 8002936:	2b02      	cmp	r3, #2
 8002938:	d901      	bls.n	800293e <HAL_RCC_OscConfig+0x45a>
          {
            return HAL_TIMEOUT;
 800293a:	2303      	movs	r3, #3
 800293c:	e009      	b.n	8002952 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800293e:	4b08      	ldr	r3, [pc, #32]	; (8002960 <HAL_RCC_OscConfig+0x47c>)
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002946:	2b00      	cmp	r3, #0
 8002948:	d1f0      	bne.n	800292c <HAL_RCC_OscConfig+0x448>
 800294a:	e001      	b.n	8002950 <HAL_RCC_OscConfig+0x46c>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 800294c:	2301      	movs	r3, #1
 800294e:	e000      	b.n	8002952 <HAL_RCC_OscConfig+0x46e>
    }
  }
  return HAL_OK;
 8002950:	2300      	movs	r3, #0
}
 8002952:	4618      	mov	r0, r3
 8002954:	3718      	adds	r7, #24
 8002956:	46bd      	mov	sp, r7
 8002958:	bd80      	pop	{r7, pc}
 800295a:	bf00      	nop
 800295c:	40007000 	.word	0x40007000
 8002960:	40023800 	.word	0x40023800
 8002964:	42470060 	.word	0x42470060

08002968 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002968:	b580      	push	{r7, lr}
 800296a:	b084      	sub	sp, #16
 800296c:	af00      	add	r7, sp, #0
 800296e:	6078      	str	r0, [r7, #4]
 8002970:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	2b00      	cmp	r3, #0
 8002976:	d101      	bne.n	800297c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002978:	2301      	movs	r3, #1
 800297a:	e0ca      	b.n	8002b12 <HAL_RCC_ClockConfig+0x1aa>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800297c:	4b67      	ldr	r3, [pc, #412]	; (8002b1c <HAL_RCC_ClockConfig+0x1b4>)
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	f003 030f 	and.w	r3, r3, #15
 8002984:	683a      	ldr	r2, [r7, #0]
 8002986:	429a      	cmp	r2, r3
 8002988:	d90c      	bls.n	80029a4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800298a:	4b64      	ldr	r3, [pc, #400]	; (8002b1c <HAL_RCC_ClockConfig+0x1b4>)
 800298c:	683a      	ldr	r2, [r7, #0]
 800298e:	b2d2      	uxtb	r2, r2
 8002990:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002992:	4b62      	ldr	r3, [pc, #392]	; (8002b1c <HAL_RCC_ClockConfig+0x1b4>)
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	f003 030f 	and.w	r3, r3, #15
 800299a:	683a      	ldr	r2, [r7, #0]
 800299c:	429a      	cmp	r2, r3
 800299e:	d001      	beq.n	80029a4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80029a0:	2301      	movs	r3, #1
 80029a2:	e0b6      	b.n	8002b12 <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	f003 0302 	and.w	r3, r3, #2
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d020      	beq.n	80029f2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	f003 0304 	and.w	r3, r3, #4
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d005      	beq.n	80029c8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80029bc:	4b58      	ldr	r3, [pc, #352]	; (8002b20 <HAL_RCC_ClockConfig+0x1b8>)
 80029be:	689b      	ldr	r3, [r3, #8]
 80029c0:	4a57      	ldr	r2, [pc, #348]	; (8002b20 <HAL_RCC_ClockConfig+0x1b8>)
 80029c2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80029c6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	f003 0308 	and.w	r3, r3, #8
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d005      	beq.n	80029e0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80029d4:	4b52      	ldr	r3, [pc, #328]	; (8002b20 <HAL_RCC_ClockConfig+0x1b8>)
 80029d6:	689b      	ldr	r3, [r3, #8]
 80029d8:	4a51      	ldr	r2, [pc, #324]	; (8002b20 <HAL_RCC_ClockConfig+0x1b8>)
 80029da:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80029de:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80029e0:	4b4f      	ldr	r3, [pc, #316]	; (8002b20 <HAL_RCC_ClockConfig+0x1b8>)
 80029e2:	689b      	ldr	r3, [r3, #8]
 80029e4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	689b      	ldr	r3, [r3, #8]
 80029ec:	494c      	ldr	r1, [pc, #304]	; (8002b20 <HAL_RCC_ClockConfig+0x1b8>)
 80029ee:	4313      	orrs	r3, r2
 80029f0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	f003 0301 	and.w	r3, r3, #1
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d044      	beq.n	8002a88 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	685b      	ldr	r3, [r3, #4]
 8002a02:	2b01      	cmp	r3, #1
 8002a04:	d107      	bne.n	8002a16 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a06:	4b46      	ldr	r3, [pc, #280]	; (8002b20 <HAL_RCC_ClockConfig+0x1b8>)
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d119      	bne.n	8002a46 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a12:	2301      	movs	r3, #1
 8002a14:	e07d      	b.n	8002b12 <HAL_RCC_ClockConfig+0x1aa>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	685b      	ldr	r3, [r3, #4]
 8002a1a:	2b02      	cmp	r3, #2
 8002a1c:	d003      	beq.n	8002a26 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002a22:	2b03      	cmp	r3, #3
 8002a24:	d107      	bne.n	8002a36 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a26:	4b3e      	ldr	r3, [pc, #248]	; (8002b20 <HAL_RCC_ClockConfig+0x1b8>)
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d109      	bne.n	8002a46 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a32:	2301      	movs	r3, #1
 8002a34:	e06d      	b.n	8002b12 <HAL_RCC_ClockConfig+0x1aa>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a36:	4b3a      	ldr	r3, [pc, #232]	; (8002b20 <HAL_RCC_ClockConfig+0x1b8>)
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	f003 0302 	and.w	r3, r3, #2
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d101      	bne.n	8002a46 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a42:	2301      	movs	r3, #1
 8002a44:	e065      	b.n	8002b12 <HAL_RCC_ClockConfig+0x1aa>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002a46:	4b36      	ldr	r3, [pc, #216]	; (8002b20 <HAL_RCC_ClockConfig+0x1b8>)
 8002a48:	689b      	ldr	r3, [r3, #8]
 8002a4a:	f023 0203 	bic.w	r2, r3, #3
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	685b      	ldr	r3, [r3, #4]
 8002a52:	4933      	ldr	r1, [pc, #204]	; (8002b20 <HAL_RCC_ClockConfig+0x1b8>)
 8002a54:	4313      	orrs	r3, r2
 8002a56:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002a58:	f7fe fa96 	bl	8000f88 <HAL_GetTick>
 8002a5c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a5e:	e00a      	b.n	8002a76 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a60:	f7fe fa92 	bl	8000f88 <HAL_GetTick>
 8002a64:	4602      	mov	r2, r0
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	1ad3      	subs	r3, r2, r3
 8002a6a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a6e:	4293      	cmp	r3, r2
 8002a70:	d901      	bls.n	8002a76 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002a72:	2303      	movs	r3, #3
 8002a74:	e04d      	b.n	8002b12 <HAL_RCC_ClockConfig+0x1aa>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a76:	4b2a      	ldr	r3, [pc, #168]	; (8002b20 <HAL_RCC_ClockConfig+0x1b8>)
 8002a78:	689b      	ldr	r3, [r3, #8]
 8002a7a:	f003 020c 	and.w	r2, r3, #12
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	685b      	ldr	r3, [r3, #4]
 8002a82:	009b      	lsls	r3, r3, #2
 8002a84:	429a      	cmp	r2, r3
 8002a86:	d1eb      	bne.n	8002a60 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002a88:	4b24      	ldr	r3, [pc, #144]	; (8002b1c <HAL_RCC_ClockConfig+0x1b4>)
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	f003 030f 	and.w	r3, r3, #15
 8002a90:	683a      	ldr	r2, [r7, #0]
 8002a92:	429a      	cmp	r2, r3
 8002a94:	d20c      	bcs.n	8002ab0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a96:	4b21      	ldr	r3, [pc, #132]	; (8002b1c <HAL_RCC_ClockConfig+0x1b4>)
 8002a98:	683a      	ldr	r2, [r7, #0]
 8002a9a:	b2d2      	uxtb	r2, r2
 8002a9c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a9e:	4b1f      	ldr	r3, [pc, #124]	; (8002b1c <HAL_RCC_ClockConfig+0x1b4>)
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	f003 030f 	and.w	r3, r3, #15
 8002aa6:	683a      	ldr	r2, [r7, #0]
 8002aa8:	429a      	cmp	r2, r3
 8002aaa:	d001      	beq.n	8002ab0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002aac:	2301      	movs	r3, #1
 8002aae:	e030      	b.n	8002b12 <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	f003 0304 	and.w	r3, r3, #4
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d008      	beq.n	8002ace <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002abc:	4b18      	ldr	r3, [pc, #96]	; (8002b20 <HAL_RCC_ClockConfig+0x1b8>)
 8002abe:	689b      	ldr	r3, [r3, #8]
 8002ac0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	68db      	ldr	r3, [r3, #12]
 8002ac8:	4915      	ldr	r1, [pc, #84]	; (8002b20 <HAL_RCC_ClockConfig+0x1b8>)
 8002aca:	4313      	orrs	r3, r2
 8002acc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	f003 0308 	and.w	r3, r3, #8
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d009      	beq.n	8002aee <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002ada:	4b11      	ldr	r3, [pc, #68]	; (8002b20 <HAL_RCC_ClockConfig+0x1b8>)
 8002adc:	689b      	ldr	r3, [r3, #8]
 8002ade:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	691b      	ldr	r3, [r3, #16]
 8002ae6:	00db      	lsls	r3, r3, #3
 8002ae8:	490d      	ldr	r1, [pc, #52]	; (8002b20 <HAL_RCC_ClockConfig+0x1b8>)
 8002aea:	4313      	orrs	r3, r2
 8002aec:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002aee:	f000 f81d 	bl	8002b2c <HAL_RCC_GetSysClockFreq>
 8002af2:	4601      	mov	r1, r0
 8002af4:	4b0a      	ldr	r3, [pc, #40]	; (8002b20 <HAL_RCC_ClockConfig+0x1b8>)
 8002af6:	689b      	ldr	r3, [r3, #8]
 8002af8:	091b      	lsrs	r3, r3, #4
 8002afa:	f003 030f 	and.w	r3, r3, #15
 8002afe:	4a09      	ldr	r2, [pc, #36]	; (8002b24 <HAL_RCC_ClockConfig+0x1bc>)
 8002b00:	5cd3      	ldrb	r3, [r2, r3]
 8002b02:	fa21 f303 	lsr.w	r3, r1, r3
 8002b06:	4a08      	ldr	r2, [pc, #32]	; (8002b28 <HAL_RCC_ClockConfig+0x1c0>)
 8002b08:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (TICK_INT_PRIORITY);
 8002b0a:	2000      	movs	r0, #0
 8002b0c:	f7fe f86c 	bl	8000be8 <HAL_InitTick>

  return HAL_OK;
 8002b10:	2300      	movs	r3, #0
}
 8002b12:	4618      	mov	r0, r3
 8002b14:	3710      	adds	r7, #16
 8002b16:	46bd      	mov	sp, r7
 8002b18:	bd80      	pop	{r7, pc}
 8002b1a:	bf00      	nop
 8002b1c:	40023c00 	.word	0x40023c00
 8002b20:	40023800 	.word	0x40023800
 8002b24:	08008c30 	.word	0x08008c30
 8002b28:	20000000 	.word	0x20000000

08002b2c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002b2c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002b2e:	b085      	sub	sp, #20
 8002b30:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002b32:	2300      	movs	r3, #0
 8002b34:	607b      	str	r3, [r7, #4]
 8002b36:	2300      	movs	r3, #0
 8002b38:	60fb      	str	r3, [r7, #12]
 8002b3a:	2300      	movs	r3, #0
 8002b3c:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8002b3e:	2300      	movs	r3, #0
 8002b40:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002b42:	4b63      	ldr	r3, [pc, #396]	; (8002cd0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002b44:	689b      	ldr	r3, [r3, #8]
 8002b46:	f003 030c 	and.w	r3, r3, #12
 8002b4a:	2b04      	cmp	r3, #4
 8002b4c:	d007      	beq.n	8002b5e <HAL_RCC_GetSysClockFreq+0x32>
 8002b4e:	2b08      	cmp	r3, #8
 8002b50:	d008      	beq.n	8002b64 <HAL_RCC_GetSysClockFreq+0x38>
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	f040 80b4 	bne.w	8002cc0 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002b58:	4b5e      	ldr	r3, [pc, #376]	; (8002cd4 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8002b5a:	60bb      	str	r3, [r7, #8]
       break;
 8002b5c:	e0b3      	b.n	8002cc6 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002b5e:	4b5e      	ldr	r3, [pc, #376]	; (8002cd8 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8002b60:	60bb      	str	r3, [r7, #8]
      break;
 8002b62:	e0b0      	b.n	8002cc6 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002b64:	4b5a      	ldr	r3, [pc, #360]	; (8002cd0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002b66:	685b      	ldr	r3, [r3, #4]
 8002b68:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002b6c:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002b6e:	4b58      	ldr	r3, [pc, #352]	; (8002cd0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002b70:	685b      	ldr	r3, [r3, #4]
 8002b72:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d04a      	beq.n	8002c10 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002b7a:	4b55      	ldr	r3, [pc, #340]	; (8002cd0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002b7c:	685b      	ldr	r3, [r3, #4]
 8002b7e:	099b      	lsrs	r3, r3, #6
 8002b80:	f04f 0400 	mov.w	r4, #0
 8002b84:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002b88:	f04f 0200 	mov.w	r2, #0
 8002b8c:	ea03 0501 	and.w	r5, r3, r1
 8002b90:	ea04 0602 	and.w	r6, r4, r2
 8002b94:	4629      	mov	r1, r5
 8002b96:	4632      	mov	r2, r6
 8002b98:	f04f 0300 	mov.w	r3, #0
 8002b9c:	f04f 0400 	mov.w	r4, #0
 8002ba0:	0154      	lsls	r4, r2, #5
 8002ba2:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002ba6:	014b      	lsls	r3, r1, #5
 8002ba8:	4619      	mov	r1, r3
 8002baa:	4622      	mov	r2, r4
 8002bac:	1b49      	subs	r1, r1, r5
 8002bae:	eb62 0206 	sbc.w	r2, r2, r6
 8002bb2:	f04f 0300 	mov.w	r3, #0
 8002bb6:	f04f 0400 	mov.w	r4, #0
 8002bba:	0194      	lsls	r4, r2, #6
 8002bbc:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002bc0:	018b      	lsls	r3, r1, #6
 8002bc2:	1a5b      	subs	r3, r3, r1
 8002bc4:	eb64 0402 	sbc.w	r4, r4, r2
 8002bc8:	f04f 0100 	mov.w	r1, #0
 8002bcc:	f04f 0200 	mov.w	r2, #0
 8002bd0:	00e2      	lsls	r2, r4, #3
 8002bd2:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002bd6:	00d9      	lsls	r1, r3, #3
 8002bd8:	460b      	mov	r3, r1
 8002bda:	4614      	mov	r4, r2
 8002bdc:	195b      	adds	r3, r3, r5
 8002bde:	eb44 0406 	adc.w	r4, r4, r6
 8002be2:	f04f 0100 	mov.w	r1, #0
 8002be6:	f04f 0200 	mov.w	r2, #0
 8002bea:	0262      	lsls	r2, r4, #9
 8002bec:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8002bf0:	0259      	lsls	r1, r3, #9
 8002bf2:	460b      	mov	r3, r1
 8002bf4:	4614      	mov	r4, r2
 8002bf6:	4618      	mov	r0, r3
 8002bf8:	4621      	mov	r1, r4
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	f04f 0400 	mov.w	r4, #0
 8002c00:	461a      	mov	r2, r3
 8002c02:	4623      	mov	r3, r4
 8002c04:	f7fd faf4 	bl	80001f0 <__aeabi_uldivmod>
 8002c08:	4603      	mov	r3, r0
 8002c0a:	460c      	mov	r4, r1
 8002c0c:	60fb      	str	r3, [r7, #12]
 8002c0e:	e049      	b.n	8002ca4 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002c10:	4b2f      	ldr	r3, [pc, #188]	; (8002cd0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002c12:	685b      	ldr	r3, [r3, #4]
 8002c14:	099b      	lsrs	r3, r3, #6
 8002c16:	f04f 0400 	mov.w	r4, #0
 8002c1a:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002c1e:	f04f 0200 	mov.w	r2, #0
 8002c22:	ea03 0501 	and.w	r5, r3, r1
 8002c26:	ea04 0602 	and.w	r6, r4, r2
 8002c2a:	4629      	mov	r1, r5
 8002c2c:	4632      	mov	r2, r6
 8002c2e:	f04f 0300 	mov.w	r3, #0
 8002c32:	f04f 0400 	mov.w	r4, #0
 8002c36:	0154      	lsls	r4, r2, #5
 8002c38:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002c3c:	014b      	lsls	r3, r1, #5
 8002c3e:	4619      	mov	r1, r3
 8002c40:	4622      	mov	r2, r4
 8002c42:	1b49      	subs	r1, r1, r5
 8002c44:	eb62 0206 	sbc.w	r2, r2, r6
 8002c48:	f04f 0300 	mov.w	r3, #0
 8002c4c:	f04f 0400 	mov.w	r4, #0
 8002c50:	0194      	lsls	r4, r2, #6
 8002c52:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002c56:	018b      	lsls	r3, r1, #6
 8002c58:	1a5b      	subs	r3, r3, r1
 8002c5a:	eb64 0402 	sbc.w	r4, r4, r2
 8002c5e:	f04f 0100 	mov.w	r1, #0
 8002c62:	f04f 0200 	mov.w	r2, #0
 8002c66:	00e2      	lsls	r2, r4, #3
 8002c68:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002c6c:	00d9      	lsls	r1, r3, #3
 8002c6e:	460b      	mov	r3, r1
 8002c70:	4614      	mov	r4, r2
 8002c72:	195b      	adds	r3, r3, r5
 8002c74:	eb44 0406 	adc.w	r4, r4, r6
 8002c78:	f04f 0100 	mov.w	r1, #0
 8002c7c:	f04f 0200 	mov.w	r2, #0
 8002c80:	02a2      	lsls	r2, r4, #10
 8002c82:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8002c86:	0299      	lsls	r1, r3, #10
 8002c88:	460b      	mov	r3, r1
 8002c8a:	4614      	mov	r4, r2
 8002c8c:	4618      	mov	r0, r3
 8002c8e:	4621      	mov	r1, r4
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	f04f 0400 	mov.w	r4, #0
 8002c96:	461a      	mov	r2, r3
 8002c98:	4623      	mov	r3, r4
 8002c9a:	f7fd faa9 	bl	80001f0 <__aeabi_uldivmod>
 8002c9e:	4603      	mov	r3, r0
 8002ca0:	460c      	mov	r4, r1
 8002ca2:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002ca4:	4b0a      	ldr	r3, [pc, #40]	; (8002cd0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002ca6:	685b      	ldr	r3, [r3, #4]
 8002ca8:	0c1b      	lsrs	r3, r3, #16
 8002caa:	f003 0303 	and.w	r3, r3, #3
 8002cae:	3301      	adds	r3, #1
 8002cb0:	005b      	lsls	r3, r3, #1
 8002cb2:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002cb4:	68fa      	ldr	r2, [r7, #12]
 8002cb6:	683b      	ldr	r3, [r7, #0]
 8002cb8:	fbb2 f3f3 	udiv	r3, r2, r3
 8002cbc:	60bb      	str	r3, [r7, #8]
      break;
 8002cbe:	e002      	b.n	8002cc6 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002cc0:	4b04      	ldr	r3, [pc, #16]	; (8002cd4 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8002cc2:	60bb      	str	r3, [r7, #8]
      break;
 8002cc4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002cc6:	68bb      	ldr	r3, [r7, #8]
}
 8002cc8:	4618      	mov	r0, r3
 8002cca:	3714      	adds	r7, #20
 8002ccc:	46bd      	mov	sp, r7
 8002cce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002cd0:	40023800 	.word	0x40023800
 8002cd4:	00f42400 	.word	0x00f42400
 8002cd8:	007a1200 	.word	0x007a1200

08002cdc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002cdc:	b480      	push	{r7}
 8002cde:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002ce0:	4b03      	ldr	r3, [pc, #12]	; (8002cf0 <HAL_RCC_GetHCLKFreq+0x14>)
 8002ce2:	681b      	ldr	r3, [r3, #0]
}
 8002ce4:	4618      	mov	r0, r3
 8002ce6:	46bd      	mov	sp, r7
 8002ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cec:	4770      	bx	lr
 8002cee:	bf00      	nop
 8002cf0:	20000000 	.word	0x20000000

08002cf4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002cf4:	b580      	push	{r7, lr}
 8002cf6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002cf8:	f7ff fff0 	bl	8002cdc <HAL_RCC_GetHCLKFreq>
 8002cfc:	4601      	mov	r1, r0
 8002cfe:	4b05      	ldr	r3, [pc, #20]	; (8002d14 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002d00:	689b      	ldr	r3, [r3, #8]
 8002d02:	0b5b      	lsrs	r3, r3, #13
 8002d04:	f003 0307 	and.w	r3, r3, #7
 8002d08:	4a03      	ldr	r2, [pc, #12]	; (8002d18 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002d0a:	5cd3      	ldrb	r3, [r2, r3]
 8002d0c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002d10:	4618      	mov	r0, r3
 8002d12:	bd80      	pop	{r7, pc}
 8002d14:	40023800 	.word	0x40023800
 8002d18:	08008c40 	.word	0x08008c40

08002d1c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002d1c:	b480      	push	{r7}
 8002d1e:	b083      	sub	sp, #12
 8002d20:	af00      	add	r7, sp, #0
 8002d22:	6078      	str	r0, [r7, #4]
 8002d24:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	220f      	movs	r2, #15
 8002d2a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002d2c:	4b12      	ldr	r3, [pc, #72]	; (8002d78 <HAL_RCC_GetClockConfig+0x5c>)
 8002d2e:	689b      	ldr	r3, [r3, #8]
 8002d30:	f003 0203 	and.w	r2, r3, #3
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002d38:	4b0f      	ldr	r3, [pc, #60]	; (8002d78 <HAL_RCC_GetClockConfig+0x5c>)
 8002d3a:	689b      	ldr	r3, [r3, #8]
 8002d3c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002d44:	4b0c      	ldr	r3, [pc, #48]	; (8002d78 <HAL_RCC_GetClockConfig+0x5c>)
 8002d46:	689b      	ldr	r3, [r3, #8]
 8002d48:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8002d50:	4b09      	ldr	r3, [pc, #36]	; (8002d78 <HAL_RCC_GetClockConfig+0x5c>)
 8002d52:	689b      	ldr	r3, [r3, #8]
 8002d54:	08db      	lsrs	r3, r3, #3
 8002d56:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002d5e:	4b07      	ldr	r3, [pc, #28]	; (8002d7c <HAL_RCC_GetClockConfig+0x60>)
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	f003 020f 	and.w	r2, r3, #15
 8002d66:	683b      	ldr	r3, [r7, #0]
 8002d68:	601a      	str	r2, [r3, #0]
}
 8002d6a:	bf00      	nop
 8002d6c:	370c      	adds	r7, #12
 8002d6e:	46bd      	mov	sp, r7
 8002d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d74:	4770      	bx	lr
 8002d76:	bf00      	nop
 8002d78:	40023800 	.word	0x40023800
 8002d7c:	40023c00 	.word	0x40023c00

08002d80 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002d80:	b580      	push	{r7, lr}
 8002d82:	b082      	sub	sp, #8
 8002d84:	af00      	add	r7, sp, #0
 8002d86:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d101      	bne.n	8002d92 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002d8e:	2301      	movs	r3, #1
 8002d90:	e01d      	b.n	8002dce <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d98:	b2db      	uxtb	r3, r3
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d106      	bne.n	8002dac <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	2200      	movs	r2, #0
 8002da2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002da6:	6878      	ldr	r0, [r7, #4]
 8002da8:	f000 f815 	bl	8002dd6 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	2202      	movs	r2, #2
 8002db0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681a      	ldr	r2, [r3, #0]
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	3304      	adds	r3, #4
 8002dbc:	4619      	mov	r1, r3
 8002dbe:	4610      	mov	r0, r2
 8002dc0:	f000 f968 	bl	8003094 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	2201      	movs	r2, #1
 8002dc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002dcc:	2300      	movs	r3, #0
}
 8002dce:	4618      	mov	r0, r3
 8002dd0:	3708      	adds	r7, #8
 8002dd2:	46bd      	mov	sp, r7
 8002dd4:	bd80      	pop	{r7, pc}

08002dd6 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8002dd6:	b480      	push	{r7}
 8002dd8:	b083      	sub	sp, #12
 8002dda:	af00      	add	r7, sp, #0
 8002ddc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8002dde:	bf00      	nop
 8002de0:	370c      	adds	r7, #12
 8002de2:	46bd      	mov	sp, r7
 8002de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de8:	4770      	bx	lr

08002dea <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002dea:	b480      	push	{r7}
 8002dec:	b085      	sub	sp, #20
 8002dee:	af00      	add	r7, sp, #0
 8002df0:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	68da      	ldr	r2, [r3, #12]
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	f042 0201 	orr.w	r2, r2, #1
 8002e00:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	689b      	ldr	r3, [r3, #8]
 8002e08:	f003 0307 	and.w	r3, r3, #7
 8002e0c:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	2b06      	cmp	r3, #6
 8002e12:	d007      	beq.n	8002e24 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	681a      	ldr	r2, [r3, #0]
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	f042 0201 	orr.w	r2, r2, #1
 8002e22:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002e24:	2300      	movs	r3, #0
}
 8002e26:	4618      	mov	r0, r3
 8002e28:	3714      	adds	r7, #20
 8002e2a:	46bd      	mov	sp, r7
 8002e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e30:	4770      	bx	lr

08002e32 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002e32:	b580      	push	{r7, lr}
 8002e34:	b082      	sub	sp, #8
 8002e36:	af00      	add	r7, sp, #0
 8002e38:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	691b      	ldr	r3, [r3, #16]
 8002e40:	f003 0302 	and.w	r3, r3, #2
 8002e44:	2b02      	cmp	r3, #2
 8002e46:	d122      	bne.n	8002e8e <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	68db      	ldr	r3, [r3, #12]
 8002e4e:	f003 0302 	and.w	r3, r3, #2
 8002e52:	2b02      	cmp	r3, #2
 8002e54:	d11b      	bne.n	8002e8e <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	f06f 0202 	mvn.w	r2, #2
 8002e5e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	2201      	movs	r2, #1
 8002e64:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	699b      	ldr	r3, [r3, #24]
 8002e6c:	f003 0303 	and.w	r3, r3, #3
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d003      	beq.n	8002e7c <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002e74:	6878      	ldr	r0, [r7, #4]
 8002e76:	f000 f8ee 	bl	8003056 <HAL_TIM_IC_CaptureCallback>
 8002e7a:	e005      	b.n	8002e88 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002e7c:	6878      	ldr	r0, [r7, #4]
 8002e7e:	f000 f8e0 	bl	8003042 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002e82:	6878      	ldr	r0, [r7, #4]
 8002e84:	f000 f8f1 	bl	800306a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	2200      	movs	r2, #0
 8002e8c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	691b      	ldr	r3, [r3, #16]
 8002e94:	f003 0304 	and.w	r3, r3, #4
 8002e98:	2b04      	cmp	r3, #4
 8002e9a:	d122      	bne.n	8002ee2 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	68db      	ldr	r3, [r3, #12]
 8002ea2:	f003 0304 	and.w	r3, r3, #4
 8002ea6:	2b04      	cmp	r3, #4
 8002ea8:	d11b      	bne.n	8002ee2 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	f06f 0204 	mvn.w	r2, #4
 8002eb2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	2202      	movs	r2, #2
 8002eb8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	699b      	ldr	r3, [r3, #24]
 8002ec0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d003      	beq.n	8002ed0 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002ec8:	6878      	ldr	r0, [r7, #4]
 8002eca:	f000 f8c4 	bl	8003056 <HAL_TIM_IC_CaptureCallback>
 8002ece:	e005      	b.n	8002edc <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002ed0:	6878      	ldr	r0, [r7, #4]
 8002ed2:	f000 f8b6 	bl	8003042 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ed6:	6878      	ldr	r0, [r7, #4]
 8002ed8:	f000 f8c7 	bl	800306a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	2200      	movs	r2, #0
 8002ee0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	691b      	ldr	r3, [r3, #16]
 8002ee8:	f003 0308 	and.w	r3, r3, #8
 8002eec:	2b08      	cmp	r3, #8
 8002eee:	d122      	bne.n	8002f36 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	68db      	ldr	r3, [r3, #12]
 8002ef6:	f003 0308 	and.w	r3, r3, #8
 8002efa:	2b08      	cmp	r3, #8
 8002efc:	d11b      	bne.n	8002f36 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	f06f 0208 	mvn.w	r2, #8
 8002f06:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	2204      	movs	r2, #4
 8002f0c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	69db      	ldr	r3, [r3, #28]
 8002f14:	f003 0303 	and.w	r3, r3, #3
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d003      	beq.n	8002f24 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002f1c:	6878      	ldr	r0, [r7, #4]
 8002f1e:	f000 f89a 	bl	8003056 <HAL_TIM_IC_CaptureCallback>
 8002f22:	e005      	b.n	8002f30 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f24:	6878      	ldr	r0, [r7, #4]
 8002f26:	f000 f88c 	bl	8003042 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f2a:	6878      	ldr	r0, [r7, #4]
 8002f2c:	f000 f89d 	bl	800306a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	2200      	movs	r2, #0
 8002f34:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	691b      	ldr	r3, [r3, #16]
 8002f3c:	f003 0310 	and.w	r3, r3, #16
 8002f40:	2b10      	cmp	r3, #16
 8002f42:	d122      	bne.n	8002f8a <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	68db      	ldr	r3, [r3, #12]
 8002f4a:	f003 0310 	and.w	r3, r3, #16
 8002f4e:	2b10      	cmp	r3, #16
 8002f50:	d11b      	bne.n	8002f8a <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	f06f 0210 	mvn.w	r2, #16
 8002f5a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	2208      	movs	r2, #8
 8002f60:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	69db      	ldr	r3, [r3, #28]
 8002f68:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d003      	beq.n	8002f78 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002f70:	6878      	ldr	r0, [r7, #4]
 8002f72:	f000 f870 	bl	8003056 <HAL_TIM_IC_CaptureCallback>
 8002f76:	e005      	b.n	8002f84 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f78:	6878      	ldr	r0, [r7, #4]
 8002f7a:	f000 f862 	bl	8003042 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f7e:	6878      	ldr	r0, [r7, #4]
 8002f80:	f000 f873 	bl	800306a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	2200      	movs	r2, #0
 8002f88:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	691b      	ldr	r3, [r3, #16]
 8002f90:	f003 0301 	and.w	r3, r3, #1
 8002f94:	2b01      	cmp	r3, #1
 8002f96:	d10e      	bne.n	8002fb6 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	68db      	ldr	r3, [r3, #12]
 8002f9e:	f003 0301 	and.w	r3, r3, #1
 8002fa2:	2b01      	cmp	r3, #1
 8002fa4:	d107      	bne.n	8002fb6 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	f06f 0201 	mvn.w	r2, #1
 8002fae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002fb0:	6878      	ldr	r0, [r7, #4]
 8002fb2:	f7fd fdd3 	bl	8000b5c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	691b      	ldr	r3, [r3, #16]
 8002fbc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002fc0:	2b80      	cmp	r3, #128	; 0x80
 8002fc2:	d10e      	bne.n	8002fe2 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	68db      	ldr	r3, [r3, #12]
 8002fca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002fce:	2b80      	cmp	r3, #128	; 0x80
 8002fd0:	d107      	bne.n	8002fe2 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002fda:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002fdc:	6878      	ldr	r0, [r7, #4]
 8002fde:	f000 f903 	bl	80031e8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	691b      	ldr	r3, [r3, #16]
 8002fe8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002fec:	2b40      	cmp	r3, #64	; 0x40
 8002fee:	d10e      	bne.n	800300e <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	68db      	ldr	r3, [r3, #12]
 8002ff6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ffa:	2b40      	cmp	r3, #64	; 0x40
 8002ffc:	d107      	bne.n	800300e <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003006:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003008:	6878      	ldr	r0, [r7, #4]
 800300a:	f000 f838 	bl	800307e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	691b      	ldr	r3, [r3, #16]
 8003014:	f003 0320 	and.w	r3, r3, #32
 8003018:	2b20      	cmp	r3, #32
 800301a:	d10e      	bne.n	800303a <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	68db      	ldr	r3, [r3, #12]
 8003022:	f003 0320 	and.w	r3, r3, #32
 8003026:	2b20      	cmp	r3, #32
 8003028:	d107      	bne.n	800303a <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	f06f 0220 	mvn.w	r2, #32
 8003032:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003034:	6878      	ldr	r0, [r7, #4]
 8003036:	f000 f8cd 	bl	80031d4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800303a:	bf00      	nop
 800303c:	3708      	adds	r7, #8
 800303e:	46bd      	mov	sp, r7
 8003040:	bd80      	pop	{r7, pc}

08003042 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003042:	b480      	push	{r7}
 8003044:	b083      	sub	sp, #12
 8003046:	af00      	add	r7, sp, #0
 8003048:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800304a:	bf00      	nop
 800304c:	370c      	adds	r7, #12
 800304e:	46bd      	mov	sp, r7
 8003050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003054:	4770      	bx	lr

08003056 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003056:	b480      	push	{r7}
 8003058:	b083      	sub	sp, #12
 800305a:	af00      	add	r7, sp, #0
 800305c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800305e:	bf00      	nop
 8003060:	370c      	adds	r7, #12
 8003062:	46bd      	mov	sp, r7
 8003064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003068:	4770      	bx	lr

0800306a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800306a:	b480      	push	{r7}
 800306c:	b083      	sub	sp, #12
 800306e:	af00      	add	r7, sp, #0
 8003070:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003072:	bf00      	nop
 8003074:	370c      	adds	r7, #12
 8003076:	46bd      	mov	sp, r7
 8003078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800307c:	4770      	bx	lr

0800307e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800307e:	b480      	push	{r7}
 8003080:	b083      	sub	sp, #12
 8003082:	af00      	add	r7, sp, #0
 8003084:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003086:	bf00      	nop
 8003088:	370c      	adds	r7, #12
 800308a:	46bd      	mov	sp, r7
 800308c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003090:	4770      	bx	lr
	...

08003094 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003094:	b480      	push	{r7}
 8003096:	b085      	sub	sp, #20
 8003098:	af00      	add	r7, sp, #0
 800309a:	6078      	str	r0, [r7, #4]
 800309c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	4a40      	ldr	r2, [pc, #256]	; (80031a8 <TIM_Base_SetConfig+0x114>)
 80030a8:	4293      	cmp	r3, r2
 80030aa:	d013      	beq.n	80030d4 <TIM_Base_SetConfig+0x40>
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80030b2:	d00f      	beq.n	80030d4 <TIM_Base_SetConfig+0x40>
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	4a3d      	ldr	r2, [pc, #244]	; (80031ac <TIM_Base_SetConfig+0x118>)
 80030b8:	4293      	cmp	r3, r2
 80030ba:	d00b      	beq.n	80030d4 <TIM_Base_SetConfig+0x40>
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	4a3c      	ldr	r2, [pc, #240]	; (80031b0 <TIM_Base_SetConfig+0x11c>)
 80030c0:	4293      	cmp	r3, r2
 80030c2:	d007      	beq.n	80030d4 <TIM_Base_SetConfig+0x40>
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	4a3b      	ldr	r2, [pc, #236]	; (80031b4 <TIM_Base_SetConfig+0x120>)
 80030c8:	4293      	cmp	r3, r2
 80030ca:	d003      	beq.n	80030d4 <TIM_Base_SetConfig+0x40>
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	4a3a      	ldr	r2, [pc, #232]	; (80031b8 <TIM_Base_SetConfig+0x124>)
 80030d0:	4293      	cmp	r3, r2
 80030d2:	d108      	bne.n	80030e6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80030da:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80030dc:	683b      	ldr	r3, [r7, #0]
 80030de:	685b      	ldr	r3, [r3, #4]
 80030e0:	68fa      	ldr	r2, [r7, #12]
 80030e2:	4313      	orrs	r3, r2
 80030e4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	4a2f      	ldr	r2, [pc, #188]	; (80031a8 <TIM_Base_SetConfig+0x114>)
 80030ea:	4293      	cmp	r3, r2
 80030ec:	d02b      	beq.n	8003146 <TIM_Base_SetConfig+0xb2>
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80030f4:	d027      	beq.n	8003146 <TIM_Base_SetConfig+0xb2>
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	4a2c      	ldr	r2, [pc, #176]	; (80031ac <TIM_Base_SetConfig+0x118>)
 80030fa:	4293      	cmp	r3, r2
 80030fc:	d023      	beq.n	8003146 <TIM_Base_SetConfig+0xb2>
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	4a2b      	ldr	r2, [pc, #172]	; (80031b0 <TIM_Base_SetConfig+0x11c>)
 8003102:	4293      	cmp	r3, r2
 8003104:	d01f      	beq.n	8003146 <TIM_Base_SetConfig+0xb2>
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	4a2a      	ldr	r2, [pc, #168]	; (80031b4 <TIM_Base_SetConfig+0x120>)
 800310a:	4293      	cmp	r3, r2
 800310c:	d01b      	beq.n	8003146 <TIM_Base_SetConfig+0xb2>
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	4a29      	ldr	r2, [pc, #164]	; (80031b8 <TIM_Base_SetConfig+0x124>)
 8003112:	4293      	cmp	r3, r2
 8003114:	d017      	beq.n	8003146 <TIM_Base_SetConfig+0xb2>
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	4a28      	ldr	r2, [pc, #160]	; (80031bc <TIM_Base_SetConfig+0x128>)
 800311a:	4293      	cmp	r3, r2
 800311c:	d013      	beq.n	8003146 <TIM_Base_SetConfig+0xb2>
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	4a27      	ldr	r2, [pc, #156]	; (80031c0 <TIM_Base_SetConfig+0x12c>)
 8003122:	4293      	cmp	r3, r2
 8003124:	d00f      	beq.n	8003146 <TIM_Base_SetConfig+0xb2>
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	4a26      	ldr	r2, [pc, #152]	; (80031c4 <TIM_Base_SetConfig+0x130>)
 800312a:	4293      	cmp	r3, r2
 800312c:	d00b      	beq.n	8003146 <TIM_Base_SetConfig+0xb2>
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	4a25      	ldr	r2, [pc, #148]	; (80031c8 <TIM_Base_SetConfig+0x134>)
 8003132:	4293      	cmp	r3, r2
 8003134:	d007      	beq.n	8003146 <TIM_Base_SetConfig+0xb2>
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	4a24      	ldr	r2, [pc, #144]	; (80031cc <TIM_Base_SetConfig+0x138>)
 800313a:	4293      	cmp	r3, r2
 800313c:	d003      	beq.n	8003146 <TIM_Base_SetConfig+0xb2>
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	4a23      	ldr	r2, [pc, #140]	; (80031d0 <TIM_Base_SetConfig+0x13c>)
 8003142:	4293      	cmp	r3, r2
 8003144:	d108      	bne.n	8003158 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800314c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800314e:	683b      	ldr	r3, [r7, #0]
 8003150:	68db      	ldr	r3, [r3, #12]
 8003152:	68fa      	ldr	r2, [r7, #12]
 8003154:	4313      	orrs	r3, r2
 8003156:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800315e:	683b      	ldr	r3, [r7, #0]
 8003160:	695b      	ldr	r3, [r3, #20]
 8003162:	4313      	orrs	r3, r2
 8003164:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	68fa      	ldr	r2, [r7, #12]
 800316a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800316c:	683b      	ldr	r3, [r7, #0]
 800316e:	689a      	ldr	r2, [r3, #8]
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003174:	683b      	ldr	r3, [r7, #0]
 8003176:	681a      	ldr	r2, [r3, #0]
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	4a0a      	ldr	r2, [pc, #40]	; (80031a8 <TIM_Base_SetConfig+0x114>)
 8003180:	4293      	cmp	r3, r2
 8003182:	d003      	beq.n	800318c <TIM_Base_SetConfig+0xf8>
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	4a0c      	ldr	r2, [pc, #48]	; (80031b8 <TIM_Base_SetConfig+0x124>)
 8003188:	4293      	cmp	r3, r2
 800318a:	d103      	bne.n	8003194 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800318c:	683b      	ldr	r3, [r7, #0]
 800318e:	691a      	ldr	r2, [r3, #16]
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	2201      	movs	r2, #1
 8003198:	615a      	str	r2, [r3, #20]
}
 800319a:	bf00      	nop
 800319c:	3714      	adds	r7, #20
 800319e:	46bd      	mov	sp, r7
 80031a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a4:	4770      	bx	lr
 80031a6:	bf00      	nop
 80031a8:	40010000 	.word	0x40010000
 80031ac:	40000400 	.word	0x40000400
 80031b0:	40000800 	.word	0x40000800
 80031b4:	40000c00 	.word	0x40000c00
 80031b8:	40010400 	.word	0x40010400
 80031bc:	40014000 	.word	0x40014000
 80031c0:	40014400 	.word	0x40014400
 80031c4:	40014800 	.word	0x40014800
 80031c8:	40001800 	.word	0x40001800
 80031cc:	40001c00 	.word	0x40001c00
 80031d0:	40002000 	.word	0x40002000

080031d4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80031d4:	b480      	push	{r7}
 80031d6:	b083      	sub	sp, #12
 80031d8:	af00      	add	r7, sp, #0
 80031da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80031dc:	bf00      	nop
 80031de:	370c      	adds	r7, #12
 80031e0:	46bd      	mov	sp, r7
 80031e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e6:	4770      	bx	lr

080031e8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80031e8:	b480      	push	{r7}
 80031ea:	b083      	sub	sp, #12
 80031ec:	af00      	add	r7, sp, #0
 80031ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80031f0:	bf00      	nop
 80031f2:	370c      	adds	r7, #12
 80031f4:	46bd      	mov	sp, r7
 80031f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031fa:	4770      	bx	lr

080031fc <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 80031fc:	b480      	push	{r7}
 80031fe:	b089      	sub	sp, #36	; 0x24
 8003200:	af00      	add	r7, sp, #0
 8003202:	60f8      	str	r0, [r7, #12]
 8003204:	60b9      	str	r1, [r7, #8]
 8003206:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	681a      	ldr	r2, [r3, #0]
 800320c:	68bb      	ldr	r3, [r7, #8]
 800320e:	617b      	str	r3, [r7, #20]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003210:	697b      	ldr	r3, [r7, #20]
 8003212:	fa93 f3a3 	rbit	r3, r3
 8003216:	613b      	str	r3, [r7, #16]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003218:	693b      	ldr	r3, [r7, #16]
 800321a:	fab3 f383 	clz	r3, r3
 800321e:	b2db      	uxtb	r3, r3
 8003220:	005b      	lsls	r3, r3, #1
 8003222:	2103      	movs	r1, #3
 8003224:	fa01 f303 	lsl.w	r3, r1, r3
 8003228:	43db      	mvns	r3, r3
 800322a:	401a      	ands	r2, r3
 800322c:	68bb      	ldr	r3, [r7, #8]
 800322e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003230:	69fb      	ldr	r3, [r7, #28]
 8003232:	fa93 f3a3 	rbit	r3, r3
 8003236:	61bb      	str	r3, [r7, #24]
  return result;
 8003238:	69bb      	ldr	r3, [r7, #24]
 800323a:	fab3 f383 	clz	r3, r3
 800323e:	b2db      	uxtb	r3, r3
 8003240:	005b      	lsls	r3, r3, #1
 8003242:	6879      	ldr	r1, [r7, #4]
 8003244:	fa01 f303 	lsl.w	r3, r1, r3
 8003248:	431a      	orrs	r2, r3
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	601a      	str	r2, [r3, #0]
}
 800324e:	bf00      	nop
 8003250:	3724      	adds	r7, #36	; 0x24
 8003252:	46bd      	mov	sp, r7
 8003254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003258:	4770      	bx	lr

0800325a <LL_GPIO_SetPinOutputType>:
  *         @arg @ref LL_GPIO_OUTPUT_PUSHPULL
  *         @arg @ref LL_GPIO_OUTPUT_OPENDRAIN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinOutputType(GPIO_TypeDef *GPIOx, uint32_t PinMask, uint32_t OutputType)
{
 800325a:	b480      	push	{r7}
 800325c:	b085      	sub	sp, #20
 800325e:	af00      	add	r7, sp, #0
 8003260:	60f8      	str	r0, [r7, #12]
 8003262:	60b9      	str	r1, [r7, #8]
 8003264:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	685a      	ldr	r2, [r3, #4]
 800326a:	68bb      	ldr	r3, [r7, #8]
 800326c:	43db      	mvns	r3, r3
 800326e:	401a      	ands	r2, r3
 8003270:	68bb      	ldr	r3, [r7, #8]
 8003272:	6879      	ldr	r1, [r7, #4]
 8003274:	fb01 f303 	mul.w	r3, r1, r3
 8003278:	431a      	orrs	r2, r3
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	605a      	str	r2, [r3, #4]
}
 800327e:	bf00      	nop
 8003280:	3714      	adds	r7, #20
 8003282:	46bd      	mov	sp, r7
 8003284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003288:	4770      	bx	lr

0800328a <LL_GPIO_SetPinSpeed>:
  *         @arg @ref LL_GPIO_SPEED_FREQ_HIGH
  *         @arg @ref LL_GPIO_SPEED_FREQ_VERY_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
{
 800328a:	b480      	push	{r7}
 800328c:	b089      	sub	sp, #36	; 0x24
 800328e:	af00      	add	r7, sp, #0
 8003290:	60f8      	str	r0, [r7, #12]
 8003292:	60b9      	str	r1, [r7, #8]
 8003294:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	689a      	ldr	r2, [r3, #8]
 800329a:	68bb      	ldr	r3, [r7, #8]
 800329c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800329e:	697b      	ldr	r3, [r7, #20]
 80032a0:	fa93 f3a3 	rbit	r3, r3
 80032a4:	613b      	str	r3, [r7, #16]
  return result;
 80032a6:	693b      	ldr	r3, [r7, #16]
 80032a8:	fab3 f383 	clz	r3, r3
 80032ac:	b2db      	uxtb	r3, r3
 80032ae:	005b      	lsls	r3, r3, #1
 80032b0:	2103      	movs	r1, #3
 80032b2:	fa01 f303 	lsl.w	r3, r1, r3
 80032b6:	43db      	mvns	r3, r3
 80032b8:	401a      	ands	r2, r3
 80032ba:	68bb      	ldr	r3, [r7, #8]
 80032bc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032be:	69fb      	ldr	r3, [r7, #28]
 80032c0:	fa93 f3a3 	rbit	r3, r3
 80032c4:	61bb      	str	r3, [r7, #24]
  return result;
 80032c6:	69bb      	ldr	r3, [r7, #24]
 80032c8:	fab3 f383 	clz	r3, r3
 80032cc:	b2db      	uxtb	r3, r3
 80032ce:	005b      	lsls	r3, r3, #1
 80032d0:	6879      	ldr	r1, [r7, #4]
 80032d2:	fa01 f303 	lsl.w	r3, r1, r3
 80032d6:	431a      	orrs	r2, r3
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	609a      	str	r2, [r3, #8]
             (Speed << (POSITION_VAL(Pin) * 2U)));
}
 80032dc:	bf00      	nop
 80032de:	3724      	adds	r7, #36	; 0x24
 80032e0:	46bd      	mov	sp, r7
 80032e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e6:	4770      	bx	lr

080032e8 <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 80032e8:	b480      	push	{r7}
 80032ea:	b089      	sub	sp, #36	; 0x24
 80032ec:	af00      	add	r7, sp, #0
 80032ee:	60f8      	str	r0, [r7, #12]
 80032f0:	60b9      	str	r1, [r7, #8]
 80032f2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	68da      	ldr	r2, [r3, #12]
 80032f8:	68bb      	ldr	r3, [r7, #8]
 80032fa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032fc:	697b      	ldr	r3, [r7, #20]
 80032fe:	fa93 f3a3 	rbit	r3, r3
 8003302:	613b      	str	r3, [r7, #16]
  return result;
 8003304:	693b      	ldr	r3, [r7, #16]
 8003306:	fab3 f383 	clz	r3, r3
 800330a:	b2db      	uxtb	r3, r3
 800330c:	005b      	lsls	r3, r3, #1
 800330e:	2103      	movs	r1, #3
 8003310:	fa01 f303 	lsl.w	r3, r1, r3
 8003314:	43db      	mvns	r3, r3
 8003316:	401a      	ands	r2, r3
 8003318:	68bb      	ldr	r3, [r7, #8]
 800331a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800331c:	69fb      	ldr	r3, [r7, #28]
 800331e:	fa93 f3a3 	rbit	r3, r3
 8003322:	61bb      	str	r3, [r7, #24]
  return result;
 8003324:	69bb      	ldr	r3, [r7, #24]
 8003326:	fab3 f383 	clz	r3, r3
 800332a:	b2db      	uxtb	r3, r3
 800332c:	005b      	lsls	r3, r3, #1
 800332e:	6879      	ldr	r1, [r7, #4]
 8003330:	fa01 f303 	lsl.w	r3, r1, r3
 8003334:	431a      	orrs	r2, r3
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	60da      	str	r2, [r3, #12]
}
 800333a:	bf00      	nop
 800333c:	3724      	adds	r7, #36	; 0x24
 800333e:	46bd      	mov	sp, r7
 8003340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003344:	4770      	bx	lr

08003346 <LL_GPIO_SetAFPin_0_7>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_0_7(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 8003346:	b480      	push	{r7}
 8003348:	b089      	sub	sp, #36	; 0x24
 800334a:	af00      	add	r7, sp, #0
 800334c:	60f8      	str	r0, [r7, #12]
 800334e:	60b9      	str	r1, [r7, #8]
 8003350:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	6a1a      	ldr	r2, [r3, #32]
 8003356:	68bb      	ldr	r3, [r7, #8]
 8003358:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800335a:	697b      	ldr	r3, [r7, #20]
 800335c:	fa93 f3a3 	rbit	r3, r3
 8003360:	613b      	str	r3, [r7, #16]
  return result;
 8003362:	693b      	ldr	r3, [r7, #16]
 8003364:	fab3 f383 	clz	r3, r3
 8003368:	b2db      	uxtb	r3, r3
 800336a:	009b      	lsls	r3, r3, #2
 800336c:	210f      	movs	r1, #15
 800336e:	fa01 f303 	lsl.w	r3, r1, r3
 8003372:	43db      	mvns	r3, r3
 8003374:	401a      	ands	r2, r3
 8003376:	68bb      	ldr	r3, [r7, #8]
 8003378:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800337a:	69fb      	ldr	r3, [r7, #28]
 800337c:	fa93 f3a3 	rbit	r3, r3
 8003380:	61bb      	str	r3, [r7, #24]
  return result;
 8003382:	69bb      	ldr	r3, [r7, #24]
 8003384:	fab3 f383 	clz	r3, r3
 8003388:	b2db      	uxtb	r3, r3
 800338a:	009b      	lsls	r3, r3, #2
 800338c:	6879      	ldr	r1, [r7, #4]
 800338e:	fa01 f303 	lsl.w	r3, r1, r3
 8003392:	431a      	orrs	r2, r3
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	621a      	str	r2, [r3, #32]
             (Alternate << (POSITION_VAL(Pin) * 4U)));
}
 8003398:	bf00      	nop
 800339a:	3724      	adds	r7, #36	; 0x24
 800339c:	46bd      	mov	sp, r7
 800339e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a2:	4770      	bx	lr

080033a4 <LL_GPIO_SetAFPin_8_15>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_8_15(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 80033a4:	b480      	push	{r7}
 80033a6:	b089      	sub	sp, #36	; 0x24
 80033a8:	af00      	add	r7, sp, #0
 80033aa:	60f8      	str	r0, [r7, #12]
 80033ac:	60b9      	str	r1, [r7, #8]
 80033ae:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80033b4:	68bb      	ldr	r3, [r7, #8]
 80033b6:	0a1b      	lsrs	r3, r3, #8
 80033b8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033ba:	697b      	ldr	r3, [r7, #20]
 80033bc:	fa93 f3a3 	rbit	r3, r3
 80033c0:	613b      	str	r3, [r7, #16]
  return result;
 80033c2:	693b      	ldr	r3, [r7, #16]
 80033c4:	fab3 f383 	clz	r3, r3
 80033c8:	b2db      	uxtb	r3, r3
 80033ca:	009b      	lsls	r3, r3, #2
 80033cc:	210f      	movs	r1, #15
 80033ce:	fa01 f303 	lsl.w	r3, r1, r3
 80033d2:	43db      	mvns	r3, r3
 80033d4:	401a      	ands	r2, r3
 80033d6:	68bb      	ldr	r3, [r7, #8]
 80033d8:	0a1b      	lsrs	r3, r3, #8
 80033da:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033dc:	69fb      	ldr	r3, [r7, #28]
 80033de:	fa93 f3a3 	rbit	r3, r3
 80033e2:	61bb      	str	r3, [r7, #24]
  return result;
 80033e4:	69bb      	ldr	r3, [r7, #24]
 80033e6:	fab3 f383 	clz	r3, r3
 80033ea:	b2db      	uxtb	r3, r3
 80033ec:	009b      	lsls	r3, r3, #2
 80033ee:	6879      	ldr	r1, [r7, #4]
 80033f0:	fa01 f303 	lsl.w	r3, r1, r3
 80033f4:	431a      	orrs	r2, r3
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	625a      	str	r2, [r3, #36]	; 0x24
             (Alternate << (POSITION_VAL(Pin >> 8U) * 4U)));
}
 80033fa:	bf00      	nop
 80033fc:	3724      	adds	r7, #36	; 0x24
 80033fe:	46bd      	mov	sp, r7
 8003400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003404:	4770      	bx	lr

08003406 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8003406:	b580      	push	{r7, lr}
 8003408:	b088      	sub	sp, #32
 800340a:	af00      	add	r7, sp, #0
 800340c:	6078      	str	r0, [r7, #4]
 800340e:	6039      	str	r1, [r7, #0]
  uint32_t pinpos     = 0x00000000U;
 8003410:	2300      	movs	r3, #0
 8003412:	61fb      	str	r3, [r7, #28]
  uint32_t currentpin = 0x00000000U;
 8003414:	2300      	movs	r3, #0
 8003416:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8003418:	683b      	ldr	r3, [r7, #0]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800341e:	697b      	ldr	r3, [r7, #20]
 8003420:	fa93 f3a3 	rbit	r3, r3
 8003424:	613b      	str	r3, [r7, #16]
  return result;
 8003426:	693b      	ldr	r3, [r7, #16]
 8003428:	fab3 f383 	clz	r3, r3
 800342c:	b2db      	uxtb	r3, r3
 800342e:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8003430:	e049      	b.n	80034c6 <LL_GPIO_Init+0xc0>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001U << pinpos);
 8003432:	683b      	ldr	r3, [r7, #0]
 8003434:	681a      	ldr	r2, [r3, #0]
 8003436:	2101      	movs	r1, #1
 8003438:	69fb      	ldr	r3, [r7, #28]
 800343a:	fa01 f303 	lsl.w	r3, r1, r3
 800343e:	4013      	ands	r3, r2
 8003440:	61bb      	str	r3, [r7, #24]

    if (currentpin)
 8003442:	69bb      	ldr	r3, [r7, #24]
 8003444:	2b00      	cmp	r3, #0
 8003446:	d03b      	beq.n	80034c0 <LL_GPIO_Init+0xba>
    {
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8003448:	683b      	ldr	r3, [r7, #0]
 800344a:	685b      	ldr	r3, [r3, #4]
 800344c:	461a      	mov	r2, r3
 800344e:	69b9      	ldr	r1, [r7, #24]
 8003450:	6878      	ldr	r0, [r7, #4]
 8003452:	f7ff fed3 	bl	80031fc <LL_GPIO_SetPinMode>

      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8003456:	683b      	ldr	r3, [r7, #0]
 8003458:	685b      	ldr	r3, [r3, #4]
 800345a:	2b01      	cmp	r3, #1
 800345c:	d003      	beq.n	8003466 <LL_GPIO_Init+0x60>
 800345e:	683b      	ldr	r3, [r7, #0]
 8003460:	685b      	ldr	r3, [r3, #4]
 8003462:	2b02      	cmp	r3, #2
 8003464:	d106      	bne.n	8003474 <LL_GPIO_Init+0x6e>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8003466:	683b      	ldr	r3, [r7, #0]
 8003468:	689b      	ldr	r3, [r3, #8]
 800346a:	461a      	mov	r2, r3
 800346c:	69b9      	ldr	r1, [r7, #24]
 800346e:	6878      	ldr	r0, [r7, #4]
 8003470:	f7ff ff0b 	bl	800328a <LL_GPIO_SetPinSpeed>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8003474:	683b      	ldr	r3, [r7, #0]
 8003476:	691b      	ldr	r3, [r3, #16]
 8003478:	461a      	mov	r2, r3
 800347a:	69b9      	ldr	r1, [r7, #24]
 800347c:	6878      	ldr	r0, [r7, #4]
 800347e:	f7ff ff33 	bl	80032e8 <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8003482:	683b      	ldr	r3, [r7, #0]
 8003484:	685b      	ldr	r3, [r3, #4]
 8003486:	2b02      	cmp	r3, #2
 8003488:	d11a      	bne.n	80034c0 <LL_GPIO_Init+0xba>
 800348a:	69bb      	ldr	r3, [r7, #24]
 800348c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	fa93 f3a3 	rbit	r3, r3
 8003494:	60bb      	str	r3, [r7, #8]
  return result;
 8003496:	68bb      	ldr	r3, [r7, #8]
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 0x00000008U)
 8003498:	fab3 f383 	clz	r3, r3
 800349c:	b2db      	uxtb	r3, r3
 800349e:	2b07      	cmp	r3, #7
 80034a0:	d807      	bhi.n	80034b2 <LL_GPIO_Init+0xac>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 80034a2:	683b      	ldr	r3, [r7, #0]
 80034a4:	695b      	ldr	r3, [r3, #20]
 80034a6:	461a      	mov	r2, r3
 80034a8:	69b9      	ldr	r1, [r7, #24]
 80034aa:	6878      	ldr	r0, [r7, #4]
 80034ac:	f7ff ff4b 	bl	8003346 <LL_GPIO_SetAFPin_0_7>
 80034b0:	e006      	b.n	80034c0 <LL_GPIO_Init+0xba>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 80034b2:	683b      	ldr	r3, [r7, #0]
 80034b4:	695b      	ldr	r3, [r3, #20]
 80034b6:	461a      	mov	r2, r3
 80034b8:	69b9      	ldr	r1, [r7, #24]
 80034ba:	6878      	ldr	r0, [r7, #4]
 80034bc:	f7ff ff72 	bl	80033a4 <LL_GPIO_SetAFPin_8_15>
        }
      }
    }
    pinpos++;
 80034c0:	69fb      	ldr	r3, [r7, #28]
 80034c2:	3301      	adds	r3, #1
 80034c4:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 80034c6:	683b      	ldr	r3, [r7, #0]
 80034c8:	681a      	ldr	r2, [r3, #0]
 80034ca:	69fb      	ldr	r3, [r7, #28]
 80034cc:	fa22 f303 	lsr.w	r3, r2, r3
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d1ae      	bne.n	8003432 <LL_GPIO_Init+0x2c>
  }

  if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 80034d4:	683b      	ldr	r3, [r7, #0]
 80034d6:	685b      	ldr	r3, [r3, #4]
 80034d8:	2b01      	cmp	r3, #1
 80034da:	d003      	beq.n	80034e4 <LL_GPIO_Init+0xde>
 80034dc:	683b      	ldr	r3, [r7, #0]
 80034de:	685b      	ldr	r3, [r3, #4]
 80034e0:	2b02      	cmp	r3, #2
 80034e2:	d107      	bne.n	80034f4 <LL_GPIO_Init+0xee>
  {
    /* Check Output mode parameters */
    assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

    /* Output mode configuration*/
    LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 80034e4:	683b      	ldr	r3, [r7, #0]
 80034e6:	6819      	ldr	r1, [r3, #0]
 80034e8:	683b      	ldr	r3, [r7, #0]
 80034ea:	68db      	ldr	r3, [r3, #12]
 80034ec:	461a      	mov	r2, r3
 80034ee:	6878      	ldr	r0, [r7, #4]
 80034f0:	f7ff feb3 	bl	800325a <LL_GPIO_SetPinOutputType>

  }
  return (SUCCESS);
 80034f4:	2300      	movs	r3, #0
}
 80034f6:	4618      	mov	r0, r3
 80034f8:	3720      	adds	r7, #32
 80034fa:	46bd      	mov	sp, r7
 80034fc:	bd80      	pop	{r7, pc}

080034fe <LL_I2C_Enable>:
{
 80034fe:	b480      	push	{r7}
 8003500:	b083      	sub	sp, #12
 8003502:	af00      	add	r7, sp, #0
 8003504:	6078      	str	r0, [r7, #4]
  SET_BIT(I2Cx->CR1, I2C_CR1_PE);
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	f043 0201 	orr.w	r2, r3, #1
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	601a      	str	r2, [r3, #0]
}
 8003512:	bf00      	nop
 8003514:	370c      	adds	r7, #12
 8003516:	46bd      	mov	sp, r7
 8003518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800351c:	4770      	bx	lr

0800351e <LL_I2C_Disable>:
{
 800351e:	b480      	push	{r7}
 8003520:	b083      	sub	sp, #12
 8003522:	af00      	add	r7, sp, #0
 8003524:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(I2Cx->CR1, I2C_CR1_PE);
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	f023 0201 	bic.w	r2, r3, #1
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	601a      	str	r2, [r3, #0]
}
 8003532:	bf00      	nop
 8003534:	370c      	adds	r7, #12
 8003536:	46bd      	mov	sp, r7
 8003538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800353c:	4770      	bx	lr

0800353e <LL_I2C_ConfigFilters>:
{
 800353e:	b480      	push	{r7}
 8003540:	b085      	sub	sp, #20
 8003542:	af00      	add	r7, sp, #0
 8003544:	60f8      	str	r0, [r7, #12]
 8003546:	60b9      	str	r1, [r7, #8]
 8003548:	607a      	str	r2, [r7, #4]
  MODIFY_REG(I2Cx->FLTR, I2C_FLTR_ANOFF | I2C_FLTR_DNF, AnalogFilter | DigitalFilter);
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800354e:	f023 021f 	bic.w	r2, r3, #31
 8003552:	68b9      	ldr	r1, [r7, #8]
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	430b      	orrs	r3, r1
 8003558:	431a      	orrs	r2, r3
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	625a      	str	r2, [r3, #36]	; 0x24
}
 800355e:	bf00      	nop
 8003560:	3714      	adds	r7, #20
 8003562:	46bd      	mov	sp, r7
 8003564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003568:	4770      	bx	lr

0800356a <LL_I2C_SetOwnAddress1>:
{
 800356a:	b480      	push	{r7}
 800356c:	b085      	sub	sp, #20
 800356e:	af00      	add	r7, sp, #0
 8003570:	60f8      	str	r0, [r7, #12]
 8003572:	60b9      	str	r1, [r7, #8]
 8003574:	607a      	str	r2, [r7, #4]
  MODIFY_REG(I2Cx->OAR1, I2C_OAR1_ADD0 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD8_9 | I2C_OAR1_ADDMODE, OwnAddress1 | OwnAddrSize);
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	689b      	ldr	r3, [r3, #8]
 800357a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800357e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003582:	68b9      	ldr	r1, [r7, #8]
 8003584:	687a      	ldr	r2, [r7, #4]
 8003586:	430a      	orrs	r2, r1
 8003588:	431a      	orrs	r2, r3
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	609a      	str	r2, [r3, #8]
}
 800358e:	bf00      	nop
 8003590:	3714      	adds	r7, #20
 8003592:	46bd      	mov	sp, r7
 8003594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003598:	4770      	bx	lr
	...

0800359c <LL_I2C_ConfigSpeed>:
  *         @arg @ref LL_I2C_DUTYCYCLE_16_9
  * @retval None
  */
__STATIC_INLINE void LL_I2C_ConfigSpeed(I2C_TypeDef *I2Cx, uint32_t PeriphClock, uint32_t ClockSpeed,
                                        uint32_t DutyCycle)
{
 800359c:	b490      	push	{r4, r7}
 800359e:	b084      	sub	sp, #16
 80035a0:	af00      	add	r7, sp, #0
 80035a2:	60f8      	str	r0, [r7, #12]
 80035a4:	60b9      	str	r1, [r7, #8]
 80035a6:	607a      	str	r2, [r7, #4]
 80035a8:	603b      	str	r3, [r7, #0]
  register uint32_t freqrange = 0x0U;
 80035aa:	2400      	movs	r4, #0
  register uint32_t clockconfig = 0x0U;
 80035ac:	2400      	movs	r4, #0

  /* Compute frequency range */
  freqrange = __LL_I2C_FREQ_HZ_TO_MHZ(PeriphClock);
 80035ae:	68bb      	ldr	r3, [r7, #8]
 80035b0:	4a3f      	ldr	r2, [pc, #252]	; (80036b0 <LL_I2C_ConfigSpeed+0x114>)
 80035b2:	fba2 2303 	umull	r2, r3, r2, r3
 80035b6:	0c9c      	lsrs	r4, r3, #18

  /* Configure I2Cx: Frequency range register */
  MODIFY_REG(I2Cx->CR2, I2C_CR2_FREQ, freqrange);
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	685b      	ldr	r3, [r3, #4]
 80035bc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80035c0:	ea44 0203 	orr.w	r2, r4, r3
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	605a      	str	r2, [r3, #4]

  /* Configure I2Cx: Rise Time register */
  MODIFY_REG(I2Cx->TRISE, I2C_TRISE_TRISE, __LL_I2C_RISE_TIME(freqrange, ClockSpeed));
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	6a1b      	ldr	r3, [r3, #32]
 80035cc:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	4938      	ldr	r1, [pc, #224]	; (80036b4 <LL_I2C_ConfigSpeed+0x118>)
 80035d4:	428b      	cmp	r3, r1
 80035d6:	d801      	bhi.n	80035dc <LL_I2C_ConfigSpeed+0x40>
 80035d8:	1c63      	adds	r3, r4, #1
 80035da:	e008      	b.n	80035ee <LL_I2C_ConfigSpeed+0x52>
 80035dc:	f44f 7396 	mov.w	r3, #300	; 0x12c
 80035e0:	fb03 f304 	mul.w	r3, r3, r4
 80035e4:	4934      	ldr	r1, [pc, #208]	; (80036b8 <LL_I2C_ConfigSpeed+0x11c>)
 80035e6:	fba1 1303 	umull	r1, r3, r1, r3
 80035ea:	099b      	lsrs	r3, r3, #6
 80035ec:	3301      	adds	r3, #1
 80035ee:	431a      	orrs	r2, r3
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	621a      	str	r2, [r3, #32]

  /* Configure Speed mode, Duty Cycle and Clock control register value */
  if (ClockSpeed > LL_I2C_MAX_SPEED_STANDARD)
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	4a2f      	ldr	r2, [pc, #188]	; (80036b4 <LL_I2C_ConfigSpeed+0x118>)
 80035f8:	4293      	cmp	r3, r2
 80035fa:	d939      	bls.n	8003670 <LL_I2C_ConfigSpeed+0xd4>
  {
    /* Set Speed mode at fast and duty cycle for Clock Speed request in fast clock range */
    clockconfig = LL_I2C_CLOCK_SPEED_FAST_MODE                                          | \
 80035fc:	683b      	ldr	r3, [r7, #0]
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d117      	bne.n	8003632 <LL_I2C_ConfigSpeed+0x96>
                  __LL_I2C_SPEED_FAST_TO_CCR(PeriphClock, ClockSpeed, DutyCycle)        | \
 8003602:	687a      	ldr	r2, [r7, #4]
 8003604:	4613      	mov	r3, r2
 8003606:	005b      	lsls	r3, r3, #1
 8003608:	4413      	add	r3, r2
 800360a:	68ba      	ldr	r2, [r7, #8]
 800360c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003610:	f3c3 030b 	ubfx	r3, r3, #0, #12
    clockconfig = LL_I2C_CLOCK_SPEED_FAST_MODE                                          | \
 8003614:	2b00      	cmp	r3, #0
 8003616:	d009      	beq.n	800362c <LL_I2C_ConfigSpeed+0x90>
                  __LL_I2C_SPEED_FAST_TO_CCR(PeriphClock, ClockSpeed, DutyCycle)        | \
 8003618:	687a      	ldr	r2, [r7, #4]
 800361a:	4613      	mov	r3, r2
 800361c:	005b      	lsls	r3, r3, #1
 800361e:	4413      	add	r3, r2
 8003620:	68ba      	ldr	r2, [r7, #8]
 8003622:	fbb2 f3f3 	udiv	r3, r2, r3
    clockconfig = LL_I2C_CLOCK_SPEED_FAST_MODE                                          | \
 8003626:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800362a:	e01d      	b.n	8003668 <LL_I2C_ConfigSpeed+0xcc>
 800362c:	f248 0301 	movw	r3, #32769	; 0x8001
 8003630:	e01a      	b.n	8003668 <LL_I2C_ConfigSpeed+0xcc>
                  __LL_I2C_SPEED_FAST_TO_CCR(PeriphClock, ClockSpeed, DutyCycle)        | \
 8003632:	687a      	ldr	r2, [r7, #4]
 8003634:	4613      	mov	r3, r2
 8003636:	009b      	lsls	r3, r3, #2
 8003638:	4413      	add	r3, r2
 800363a:	009a      	lsls	r2, r3, #2
 800363c:	4413      	add	r3, r2
 800363e:	68ba      	ldr	r2, [r7, #8]
 8003640:	fbb2 f3f3 	udiv	r3, r2, r3
 8003644:	f3c3 030b 	ubfx	r3, r3, #0, #12
    clockconfig = LL_I2C_CLOCK_SPEED_FAST_MODE                                          | \
 8003648:	2b00      	cmp	r3, #0
 800364a:	d00b      	beq.n	8003664 <LL_I2C_ConfigSpeed+0xc8>
                  __LL_I2C_SPEED_FAST_TO_CCR(PeriphClock, ClockSpeed, DutyCycle)        | \
 800364c:	687a      	ldr	r2, [r7, #4]
 800364e:	4613      	mov	r3, r2
 8003650:	009b      	lsls	r3, r3, #2
 8003652:	4413      	add	r3, r2
 8003654:	009a      	lsls	r2, r3, #2
 8003656:	4413      	add	r3, r2
 8003658:	68ba      	ldr	r2, [r7, #8]
 800365a:	fbb2 f3f3 	udiv	r3, r2, r3
    clockconfig = LL_I2C_CLOCK_SPEED_FAST_MODE                                          | \
 800365e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003662:	e001      	b.n	8003668 <LL_I2C_ConfigSpeed+0xcc>
 8003664:	f248 0301 	movw	r3, #32769	; 0x8001
 8003668:	683a      	ldr	r2, [r7, #0]
 800366a:	ea43 0402 	orr.w	r4, r3, r2
 800366e:	e010      	b.n	8003692 <LL_I2C_ConfigSpeed+0xf6>
  }
  else
  {
    /* Set Speed mode at standard for Clock Speed request in standard clock range */
    clockconfig = LL_I2C_CLOCK_SPEED_STANDARD_MODE                                      | \
                  __LL_I2C_SPEED_STANDARD_TO_CCR(PeriphClock, ClockSpeed);
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	005b      	lsls	r3, r3, #1
 8003674:	68ba      	ldr	r2, [r7, #8]
 8003676:	fbb2 f3f3 	udiv	r3, r2, r3
 800367a:	f3c3 030b 	ubfx	r3, r3, #0, #12
    clockconfig = LL_I2C_CLOCK_SPEED_STANDARD_MODE                                      | \
 800367e:	2b03      	cmp	r3, #3
 8003680:	d905      	bls.n	800368e <LL_I2C_ConfigSpeed+0xf2>
                  __LL_I2C_SPEED_STANDARD_TO_CCR(PeriphClock, ClockSpeed);
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	005b      	lsls	r3, r3, #1
    clockconfig = LL_I2C_CLOCK_SPEED_STANDARD_MODE                                      | \
 8003686:	68ba      	ldr	r2, [r7, #8]
 8003688:	fbb2 f3f3 	udiv	r3, r2, r3
 800368c:	e000      	b.n	8003690 <LL_I2C_ConfigSpeed+0xf4>
 800368e:	2304      	movs	r3, #4
 8003690:	461c      	mov	r4, r3
  }

  /* Configure I2Cx: Clock control register */
  MODIFY_REG(I2Cx->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), clockconfig);
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	69db      	ldr	r3, [r3, #28]
 8003696:	f423 434f 	bic.w	r3, r3, #52992	; 0xcf00
 800369a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800369e:	ea44 0203 	orr.w	r2, r4, r3
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	61da      	str	r2, [r3, #28]
}
 80036a6:	bf00      	nop
 80036a8:	3710      	adds	r7, #16
 80036aa:	46bd      	mov	sp, r7
 80036ac:	bc90      	pop	{r4, r7}
 80036ae:	4770      	bx	lr
 80036b0:	431bde83 	.word	0x431bde83
 80036b4:	000186a0 	.word	0x000186a0
 80036b8:	10624dd3 	.word	0x10624dd3

080036bc <LL_I2C_SetMode>:
  *         @arg @ref LL_I2C_MODE_SMBUS_DEVICE
  *         @arg @ref LL_I2C_MODE_SMBUS_DEVICE_ARP
  * @retval None
  */
__STATIC_INLINE void LL_I2C_SetMode(I2C_TypeDef *I2Cx, uint32_t PeripheralMode)
{
 80036bc:	b480      	push	{r7}
 80036be:	b083      	sub	sp, #12
 80036c0:	af00      	add	r7, sp, #0
 80036c2:	6078      	str	r0, [r7, #4]
 80036c4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->CR1, I2C_CR1_SMBUS | I2C_CR1_SMBTYPE | I2C_CR1_ENARP, PeripheralMode);
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	f023 021a 	bic.w	r2, r3, #26
 80036ce:	683b      	ldr	r3, [r7, #0]
 80036d0:	431a      	orrs	r2, r3
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	601a      	str	r2, [r3, #0]
}
 80036d6:	bf00      	nop
 80036d8:	370c      	adds	r7, #12
 80036da:	46bd      	mov	sp, r7
 80036dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e0:	4770      	bx	lr

080036e2 <LL_I2C_AcknowledgeNextData>:
  *         @arg @ref LL_I2C_ACK
  *         @arg @ref LL_I2C_NACK
  * @retval None
  */
__STATIC_INLINE void LL_I2C_AcknowledgeNextData(I2C_TypeDef *I2Cx, uint32_t TypeAcknowledge)
{
 80036e2:	b480      	push	{r7}
 80036e4:	b083      	sub	sp, #12
 80036e6:	af00      	add	r7, sp, #0
 80036e8:	6078      	str	r0, [r7, #4]
 80036ea:	6039      	str	r1, [r7, #0]
  MODIFY_REG(I2Cx->CR1, I2C_CR1_ACK, TypeAcknowledge);
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80036f4:	683b      	ldr	r3, [r7, #0]
 80036f6:	431a      	orrs	r2, r3
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	601a      	str	r2, [r3, #0]
}
 80036fc:	bf00      	nop
 80036fe:	370c      	adds	r7, #12
 8003700:	46bd      	mov	sp, r7
 8003702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003706:	4770      	bx	lr

08003708 <LL_I2C_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS  I2C registers are initialized
  *          - ERROR  Not applicable
  */
uint32_t LL_I2C_Init(I2C_TypeDef *I2Cx, LL_I2C_InitTypeDef *I2C_InitStruct)
{
 8003708:	b580      	push	{r7, lr}
 800370a:	b086      	sub	sp, #24
 800370c:	af00      	add	r7, sp, #0
 800370e:	6078      	str	r0, [r7, #4]
 8003710:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_I2C_OWN_ADDRESS1(I2C_InitStruct->OwnAddress1));
  assert_param(IS_LL_I2C_TYPE_ACKNOWLEDGE(I2C_InitStruct->TypeAcknowledge));
  assert_param(IS_LL_I2C_OWN_ADDRSIZE(I2C_InitStruct->OwnAddrSize));

  /* Disable the selected I2Cx Peripheral */
  LL_I2C_Disable(I2Cx);
 8003712:	6878      	ldr	r0, [r7, #4]
 8003714:	f7ff ff03 	bl	800351e <LL_I2C_Disable>

  /* Retrieve Clock frequencies */
  LL_RCC_GetSystemClocksFreq(&rcc_clocks);
 8003718:	f107 0308 	add.w	r3, r7, #8
 800371c:	4618      	mov	r0, r3
 800371e:	f000 f89d 	bl	800385c <LL_RCC_GetSystemClocksFreq>
  /*---------------------------- I2Cx FLTR Configuration -----------------------
   * Configure the analog and digital noise filters with parameters :
   * - AnalogFilter: I2C_FLTR_ANFOFF bit
   * - DigitalFilter: I2C_FLTR_DNF[3:0] bits
   */
  LL_I2C_ConfigFilters(I2Cx, I2C_InitStruct->AnalogFilter, I2C_InitStruct->DigitalFilter);
 8003722:	683b      	ldr	r3, [r7, #0]
 8003724:	68d9      	ldr	r1, [r3, #12]
 8003726:	683b      	ldr	r3, [r7, #0]
 8003728:	691b      	ldr	r3, [r3, #16]
 800372a:	461a      	mov	r2, r3
 800372c:	6878      	ldr	r0, [r7, #4]
 800372e:	f7ff ff06 	bl	800353e <LL_I2C_ConfigFilters>
   * Configure the SCL speed :
   * - ClockSpeed: I2C_CR2_FREQ[5:0], I2C_TRISE_TRISE[5:0], I2C_CCR_FS,
   *           and I2C_CCR_CCR[11:0] bits
   * - DutyCycle: I2C_CCR_DUTY[7:0] bits
   */
  LL_I2C_ConfigSpeed(I2Cx, rcc_clocks.PCLK1_Frequency, I2C_InitStruct->ClockSpeed, I2C_InitStruct->DutyCycle);
 8003732:	6939      	ldr	r1, [r7, #16]
 8003734:	683b      	ldr	r3, [r7, #0]
 8003736:	685a      	ldr	r2, [r3, #4]
 8003738:	683b      	ldr	r3, [r7, #0]
 800373a:	689b      	ldr	r3, [r3, #8]
 800373c:	6878      	ldr	r0, [r7, #4]
 800373e:	f7ff ff2d 	bl	800359c <LL_I2C_ConfigSpeed>
  /*---------------------------- I2Cx OAR1 Configuration -----------------------
   * Disable, Configure and Enable I2Cx device own address 1 with parameters :
   * - OwnAddress1:  I2C_OAR1_ADD[9:8], I2C_OAR1_ADD[7:1] and I2C_OAR1_ADD0 bits
   * - OwnAddrSize:  I2C_OAR1_ADDMODE bit
   */
  LL_I2C_SetOwnAddress1(I2Cx, I2C_InitStruct->OwnAddress1, I2C_InitStruct->OwnAddrSize);
 8003742:	683b      	ldr	r3, [r7, #0]
 8003744:	6959      	ldr	r1, [r3, #20]
 8003746:	683b      	ldr	r3, [r7, #0]
 8003748:	69db      	ldr	r3, [r3, #28]
 800374a:	461a      	mov	r2, r3
 800374c:	6878      	ldr	r0, [r7, #4]
 800374e:	f7ff ff0c 	bl	800356a <LL_I2C_SetOwnAddress1>

  /*---------------------------- I2Cx MODE Configuration -----------------------
  * Configure I2Cx peripheral mode with parameter :
   * - PeripheralMode: I2C_CR1_SMBUS, I2C_CR1_SMBTYPE and I2C_CR1_ENARP bits
   */
  LL_I2C_SetMode(I2Cx, I2C_InitStruct->PeripheralMode);
 8003752:	683b      	ldr	r3, [r7, #0]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	4619      	mov	r1, r3
 8003758:	6878      	ldr	r0, [r7, #4]
 800375a:	f7ff ffaf 	bl	80036bc <LL_I2C_SetMode>

  /* Enable the selected I2Cx Peripheral */
  LL_I2C_Enable(I2Cx);
 800375e:	6878      	ldr	r0, [r7, #4]
 8003760:	f7ff fecd 	bl	80034fe <LL_I2C_Enable>
  /*---------------------------- I2Cx CR2 Configuration ------------------------
   * Configure the ACKnowledge or Non ACKnowledge condition
   * after the address receive match code or next received byte with parameter :
   * - TypeAcknowledge: I2C_CR2_NACK bit
   */
  LL_I2C_AcknowledgeNextData(I2Cx, I2C_InitStruct->TypeAcknowledge);
 8003764:	683b      	ldr	r3, [r7, #0]
 8003766:	699b      	ldr	r3, [r3, #24]
 8003768:	4619      	mov	r1, r3
 800376a:	6878      	ldr	r0, [r7, #4]
 800376c:	f7ff ffb9 	bl	80036e2 <LL_I2C_AcknowledgeNextData>

  return SUCCESS;
 8003770:	2300      	movs	r3, #0
}
 8003772:	4618      	mov	r0, r3
 8003774:	3718      	adds	r7, #24
 8003776:	46bd      	mov	sp, r7
 8003778:	bd80      	pop	{r7, pc}
	...

0800377c <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLLR (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 800377c:	b480      	push	{r7}
 800377e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8003780:	4b04      	ldr	r3, [pc, #16]	; (8003794 <LL_RCC_GetSysClkSource+0x18>)
 8003782:	689b      	ldr	r3, [r3, #8]
 8003784:	f003 030c 	and.w	r3, r3, #12
}
 8003788:	4618      	mov	r0, r3
 800378a:	46bd      	mov	sp, r7
 800378c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003790:	4770      	bx	lr
 8003792:	bf00      	nop
 8003794:	40023800 	.word	0x40023800

08003798 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 8003798:	b480      	push	{r7}
 800379a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 800379c:	4b04      	ldr	r3, [pc, #16]	; (80037b0 <LL_RCC_GetAHBPrescaler+0x18>)
 800379e:	689b      	ldr	r3, [r3, #8]
 80037a0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 80037a4:	4618      	mov	r0, r3
 80037a6:	46bd      	mov	sp, r7
 80037a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ac:	4770      	bx	lr
 80037ae:	bf00      	nop
 80037b0:	40023800 	.word	0x40023800

080037b4 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 80037b4:	b480      	push	{r7}
 80037b6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 80037b8:	4b04      	ldr	r3, [pc, #16]	; (80037cc <LL_RCC_GetAPB1Prescaler+0x18>)
 80037ba:	689b      	ldr	r3, [r3, #8]
 80037bc:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
}
 80037c0:	4618      	mov	r0, r3
 80037c2:	46bd      	mov	sp, r7
 80037c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c8:	4770      	bx	lr
 80037ca:	bf00      	nop
 80037cc:	40023800 	.word	0x40023800

080037d0 <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 80037d0:	b480      	push	{r7}
 80037d2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 80037d4:	4b04      	ldr	r3, [pc, #16]	; (80037e8 <LL_RCC_GetAPB2Prescaler+0x18>)
 80037d6:	689b      	ldr	r3, [r3, #8]
 80037d8:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 80037dc:	4618      	mov	r0, r3
 80037de:	46bd      	mov	sp, r7
 80037e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e4:	4770      	bx	lr
 80037e6:	bf00      	nop
 80037e8:	40023800 	.word	0x40023800

080037ec <LL_RCC_PLL_GetMainSource>:
  * @retval Returned value can be one of the following values:
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 80037ec:	b480      	push	{r7}
 80037ee:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 80037f0:	4b04      	ldr	r3, [pc, #16]	; (8003804 <LL_RCC_PLL_GetMainSource+0x18>)
 80037f2:	685b      	ldr	r3, [r3, #4]
 80037f4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
}
 80037f8:	4618      	mov	r0, r3
 80037fa:	46bd      	mov	sp, r7
 80037fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003800:	4770      	bx	lr
 8003802:	bf00      	nop
 8003804:	40023800 	.word	0x40023800

08003808 <LL_RCC_PLL_GetN>:
  * @retval Between 50/192(*) and 432
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8003808:	b480      	push	{r7}
 800380a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 800380c:	4b04      	ldr	r3, [pc, #16]	; (8003820 <LL_RCC_PLL_GetN+0x18>)
 800380e:	685b      	ldr	r3, [r3, #4]
 8003810:	099b      	lsrs	r3, r3, #6
 8003812:	f3c3 0308 	ubfx	r3, r3, #0, #9
}
 8003816:	4618      	mov	r0, r3
 8003818:	46bd      	mov	sp, r7
 800381a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800381e:	4770      	bx	lr
 8003820:	40023800 	.word	0x40023800

08003824 <LL_RCC_PLL_GetP>:
  *         @arg @ref LL_RCC_PLLP_DIV_4
  *         @arg @ref LL_RCC_PLLP_DIV_6
  *         @arg @ref LL_RCC_PLLP_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetP(void)
{
 8003824:	b480      	push	{r7}
 8003826:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP));
 8003828:	4b04      	ldr	r3, [pc, #16]	; (800383c <LL_RCC_PLL_GetP+0x18>)
 800382a:	685b      	ldr	r3, [r3, #4]
 800382c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
}
 8003830:	4618      	mov	r0, r3
 8003832:	46bd      	mov	sp, r7
 8003834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003838:	4770      	bx	lr
 800383a:	bf00      	nop
 800383c:	40023800 	.word	0x40023800

08003840 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_61
  *         @arg @ref LL_RCC_PLLM_DIV_62
  *         @arg @ref LL_RCC_PLLM_DIV_63
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8003840:	b480      	push	{r7}
 8003842:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8003844:	4b04      	ldr	r3, [pc, #16]	; (8003858 <LL_RCC_PLL_GetDivider+0x18>)
 8003846:	685b      	ldr	r3, [r3, #4]
 8003848:	f003 033f 	and.w	r3, r3, #63	; 0x3f
}
 800384c:	4618      	mov	r0, r3
 800384e:	46bd      	mov	sp, r7
 8003850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003854:	4770      	bx	lr
 8003856:	bf00      	nop
 8003858:	40023800 	.word	0x40023800

0800385c <LL_RCC_GetSystemClocksFreq>:
  *         configuration based on this function will be incorrect.
  * @param  RCC_Clocks pointer to a @ref LL_RCC_ClocksTypeDef structure which will hold the clocks frequencies
  * @retval None
  */
void LL_RCC_GetSystemClocksFreq(LL_RCC_ClocksTypeDef *RCC_Clocks)
{
 800385c:	b580      	push	{r7, lr}
 800385e:	b082      	sub	sp, #8
 8003860:	af00      	add	r7, sp, #0
 8003862:	6078      	str	r0, [r7, #4]
  /* Get SYSCLK frequency */
  RCC_Clocks->SYSCLK_Frequency = RCC_GetSystemClockFreq();
 8003864:	f000 f820 	bl	80038a8 <RCC_GetSystemClockFreq>
 8003868:	4602      	mov	r2, r0
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	601a      	str	r2, [r3, #0]

  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency   = RCC_GetHCLKClockFreq(RCC_Clocks->SYSCLK_Frequency);
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	4618      	mov	r0, r3
 8003874:	f000 f83e 	bl	80038f4 <RCC_GetHCLKClockFreq>
 8003878:	4602      	mov	r2, r0
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	605a      	str	r2, [r3, #4]

  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency  = RCC_GetPCLK1ClockFreq(RCC_Clocks->HCLK_Frequency);
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	685b      	ldr	r3, [r3, #4]
 8003882:	4618      	mov	r0, r3
 8003884:	f000 f84c 	bl	8003920 <RCC_GetPCLK1ClockFreq>
 8003888:	4602      	mov	r2, r0
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	609a      	str	r2, [r3, #8]

  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency  = RCC_GetPCLK2ClockFreq(RCC_Clocks->HCLK_Frequency);
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	685b      	ldr	r3, [r3, #4]
 8003892:	4618      	mov	r0, r3
 8003894:	f000 f858 	bl	8003948 <RCC_GetPCLK2ClockFreq>
 8003898:	4602      	mov	r2, r0
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	60da      	str	r2, [r3, #12]
}
 800389e:	bf00      	nop
 80038a0:	3708      	adds	r7, #8
 80038a2:	46bd      	mov	sp, r7
 80038a4:	bd80      	pop	{r7, pc}
	...

080038a8 <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
uint32_t RCC_GetSystemClockFreq(void)
{
 80038a8:	b580      	push	{r7, lr}
 80038aa:	b082      	sub	sp, #8
 80038ac:	af00      	add	r7, sp, #0
  uint32_t frequency = 0U;
 80038ae:	2300      	movs	r3, #0
 80038b0:	607b      	str	r3, [r7, #4]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 80038b2:	f7ff ff63 	bl	800377c <LL_RCC_GetSysClkSource>
 80038b6:	4603      	mov	r3, r0
 80038b8:	2b04      	cmp	r3, #4
 80038ba:	d006      	beq.n	80038ca <RCC_GetSystemClockFreq+0x22>
 80038bc:	2b08      	cmp	r3, #8
 80038be:	d007      	beq.n	80038d0 <RCC_GetSystemClockFreq+0x28>
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d10a      	bne.n	80038da <RCC_GetSystemClockFreq+0x32>
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 80038c4:	4b09      	ldr	r3, [pc, #36]	; (80038ec <RCC_GetSystemClockFreq+0x44>)
 80038c6:	607b      	str	r3, [r7, #4]
      break;
 80038c8:	e00a      	b.n	80038e0 <RCC_GetSystemClockFreq+0x38>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 80038ca:	4b09      	ldr	r3, [pc, #36]	; (80038f0 <RCC_GetSystemClockFreq+0x48>)
 80038cc:	607b      	str	r3, [r7, #4]
      break;
 80038ce:	e007      	b.n	80038e0 <RCC_GetSystemClockFreq+0x38>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS(LL_RCC_SYS_CLKSOURCE_STATUS_PLL);
 80038d0:	2008      	movs	r0, #8
 80038d2:	f000 f84d 	bl	8003970 <RCC_PLL_GetFreqDomain_SYS>
 80038d6:	6078      	str	r0, [r7, #4]
      break;
 80038d8:	e002      	b.n	80038e0 <RCC_GetSystemClockFreq+0x38>
      frequency = RCC_PLL_GetFreqDomain_SYS(LL_RCC_SYS_CLKSOURCE_STATUS_PLLR);
      break;
#endif /* RCC_PLLR_SYSCLK_SUPPORT */

    default:
      frequency = HSI_VALUE;
 80038da:	4b04      	ldr	r3, [pc, #16]	; (80038ec <RCC_GetSystemClockFreq+0x44>)
 80038dc:	607b      	str	r3, [r7, #4]
      break;
 80038de:	bf00      	nop
  }

  return frequency;
 80038e0:	687b      	ldr	r3, [r7, #4]
}
 80038e2:	4618      	mov	r0, r3
 80038e4:	3708      	adds	r7, #8
 80038e6:	46bd      	mov	sp, r7
 80038e8:	bd80      	pop	{r7, pc}
 80038ea:	bf00      	nop
 80038ec:	00f42400 	.word	0x00f42400
 80038f0:	007a1200 	.word	0x007a1200

080038f4 <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 80038f4:	b580      	push	{r7, lr}
 80038f6:	b082      	sub	sp, #8
 80038f8:	af00      	add	r7, sp, #0
 80038fa:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 80038fc:	f7ff ff4c 	bl	8003798 <LL_RCC_GetAHBPrescaler>
 8003900:	4603      	mov	r3, r0
 8003902:	091b      	lsrs	r3, r3, #4
 8003904:	f003 030f 	and.w	r3, r3, #15
 8003908:	4a04      	ldr	r2, [pc, #16]	; (800391c <RCC_GetHCLKClockFreq+0x28>)
 800390a:	5cd3      	ldrb	r3, [r2, r3]
 800390c:	461a      	mov	r2, r3
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	40d3      	lsrs	r3, r2
}
 8003912:	4618      	mov	r0, r3
 8003914:	3708      	adds	r7, #8
 8003916:	46bd      	mov	sp, r7
 8003918:	bd80      	pop	{r7, pc}
 800391a:	bf00      	nop
 800391c:	08008c30 	.word	0x08008c30

08003920 <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 8003920:	b580      	push	{r7, lr}
 8003922:	b082      	sub	sp, #8
 8003924:	af00      	add	r7, sp, #0
 8003926:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 8003928:	f7ff ff44 	bl	80037b4 <LL_RCC_GetAPB1Prescaler>
 800392c:	4603      	mov	r3, r0
 800392e:	0a9b      	lsrs	r3, r3, #10
 8003930:	4a04      	ldr	r2, [pc, #16]	; (8003944 <RCC_GetPCLK1ClockFreq+0x24>)
 8003932:	5cd3      	ldrb	r3, [r2, r3]
 8003934:	461a      	mov	r2, r3
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	40d3      	lsrs	r3, r2
}
 800393a:	4618      	mov	r0, r3
 800393c:	3708      	adds	r7, #8
 800393e:	46bd      	mov	sp, r7
 8003940:	bd80      	pop	{r7, pc}
 8003942:	bf00      	nop
 8003944:	08008c40 	.word	0x08008c40

08003948 <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 8003948:	b580      	push	{r7, lr}
 800394a:	b082      	sub	sp, #8
 800394c:	af00      	add	r7, sp, #0
 800394e:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 8003950:	f7ff ff3e 	bl	80037d0 <LL_RCC_GetAPB2Prescaler>
 8003954:	4603      	mov	r3, r0
 8003956:	0b5b      	lsrs	r3, r3, #13
 8003958:	4a04      	ldr	r2, [pc, #16]	; (800396c <RCC_GetPCLK2ClockFreq+0x24>)
 800395a:	5cd3      	ldrb	r3, [r2, r3]
 800395c:	461a      	mov	r2, r3
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	40d3      	lsrs	r3, r2
}
 8003962:	4618      	mov	r0, r3
 8003964:	3708      	adds	r7, #8
 8003966:	46bd      	mov	sp, r7
 8003968:	bd80      	pop	{r7, pc}
 800396a:	bf00      	nop
 800396c:	08008c40 	.word	0x08008c40

08003970 <RCC_PLL_GetFreqDomain_SYS>:
  * @brief  Return PLL clock frequency used for system domain
  * @param  SYSCLK_Source System clock source
  * @retval PLL clock frequency (in Hz)
  */
uint32_t RCC_PLL_GetFreqDomain_SYS(uint32_t SYSCLK_Source)
{
 8003970:	b590      	push	{r4, r7, lr}
 8003972:	b087      	sub	sp, #28
 8003974:	af00      	add	r7, sp, #0
 8003976:	6078      	str	r0, [r7, #4]
  uint32_t pllinputfreq = 0U, pllsource = 0U, plloutputfreq = 0U;
 8003978:	2300      	movs	r3, #0
 800397a:	617b      	str	r3, [r7, #20]
 800397c:	2300      	movs	r3, #0
 800397e:	60fb      	str	r3, [r7, #12]
 8003980:	2300      	movs	r3, #0
 8003982:	613b      	str	r3, [r7, #16]

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
     SYSCLK = PLL_VCO / (PLLP or PLLR)
  */
  pllsource = LL_RCC_PLL_GetMainSource();
 8003984:	f7ff ff32 	bl	80037ec <LL_RCC_PLL_GetMainSource>
 8003988:	60f8      	str	r0, [r7, #12]

  switch (pllsource)
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	2b00      	cmp	r3, #0
 800398e:	d003      	beq.n	8003998 <RCC_PLL_GetFreqDomain_SYS+0x28>
 8003990:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003994:	d003      	beq.n	800399e <RCC_PLL_GetFreqDomain_SYS+0x2e>
 8003996:	e005      	b.n	80039a4 <RCC_PLL_GetFreqDomain_SYS+0x34>
  {
    case LL_RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
 8003998:	4b12      	ldr	r3, [pc, #72]	; (80039e4 <RCC_PLL_GetFreqDomain_SYS+0x74>)
 800399a:	617b      	str	r3, [r7, #20]
      break;
 800399c:	e005      	b.n	80039aa <RCC_PLL_GetFreqDomain_SYS+0x3a>

    case LL_RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 800399e:	4b12      	ldr	r3, [pc, #72]	; (80039e8 <RCC_PLL_GetFreqDomain_SYS+0x78>)
 80039a0:	617b      	str	r3, [r7, #20]
      break;
 80039a2:	e002      	b.n	80039aa <RCC_PLL_GetFreqDomain_SYS+0x3a>

    default:
      pllinputfreq = HSI_VALUE;
 80039a4:	4b0f      	ldr	r3, [pc, #60]	; (80039e4 <RCC_PLL_GetFreqDomain_SYS+0x74>)
 80039a6:	617b      	str	r3, [r7, #20]
      break;
 80039a8:	bf00      	nop
  }

  if (SYSCLK_Source == LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	2b08      	cmp	r3, #8
 80039ae:	d113      	bne.n	80039d8 <RCC_PLL_GetFreqDomain_SYS+0x68>
  {
    plloutputfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 80039b0:	f7ff ff46 	bl	8003840 <LL_RCC_PLL_GetDivider>
 80039b4:	4602      	mov	r2, r0
 80039b6:	697b      	ldr	r3, [r7, #20]
 80039b8:	fbb3 f4f2 	udiv	r4, r3, r2
 80039bc:	f7ff ff24 	bl	8003808 <LL_RCC_PLL_GetN>
 80039c0:	4603      	mov	r3, r0
 80039c2:	fb03 f404 	mul.w	r4, r3, r4
 80039c6:	f7ff ff2d 	bl	8003824 <LL_RCC_PLL_GetP>
 80039ca:	4603      	mov	r3, r0
 80039cc:	0c1b      	lsrs	r3, r3, #16
 80039ce:	3301      	adds	r3, #1
 80039d0:	005b      	lsls	r3, r3, #1
 80039d2:	fbb4 f3f3 	udiv	r3, r4, r3
 80039d6:	613b      	str	r3, [r7, #16]
    plloutputfreq = __LL_RCC_CALC_PLLRCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
                                        LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }
#endif /* RCC_PLLR_SYSCLK_SUPPORT */

  return plloutputfreq;
 80039d8:	693b      	ldr	r3, [r7, #16]
}
 80039da:	4618      	mov	r0, r3
 80039dc:	371c      	adds	r7, #28
 80039de:	46bd      	mov	sp, r7
 80039e0:	bd90      	pop	{r4, r7, pc}
 80039e2:	bf00      	nop
 80039e4:	00f42400 	.word	0x00f42400
 80039e8:	007a1200 	.word	0x007a1200

080039ec <LL_USART_IsEnabled>:
{
 80039ec:	b480      	push	{r7}
 80039ee:	b083      	sub	sp, #12
 80039f0:	af00      	add	r7, sp, #0
 80039f2:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE));
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	68db      	ldr	r3, [r3, #12]
 80039f8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80039fc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003a00:	bf0c      	ite	eq
 8003a02:	2301      	moveq	r3, #1
 8003a04:	2300      	movne	r3, #0
 8003a06:	b2db      	uxtb	r3, r3
}
 8003a08:	4618      	mov	r0, r3
 8003a0a:	370c      	adds	r7, #12
 8003a0c:	46bd      	mov	sp, r7
 8003a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a12:	4770      	bx	lr

08003a14 <LL_USART_SetStopBitsLength>:
{
 8003a14:	b480      	push	{r7}
 8003a16:	b083      	sub	sp, #12
 8003a18:	af00      	add	r7, sp, #0
 8003a1a:	6078      	str	r0, [r7, #4]
 8003a1c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	691b      	ldr	r3, [r3, #16]
 8003a22:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003a26:	683b      	ldr	r3, [r7, #0]
 8003a28:	431a      	orrs	r2, r3
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	611a      	str	r2, [r3, #16]
}
 8003a2e:	bf00      	nop
 8003a30:	370c      	adds	r7, #12
 8003a32:	46bd      	mov	sp, r7
 8003a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a38:	4770      	bx	lr

08003a3a <LL_USART_SetHWFlowCtrl>:
{
 8003a3a:	b480      	push	{r7}
 8003a3c:	b083      	sub	sp, #12
 8003a3e:	af00      	add	r7, sp, #0
 8003a40:	6078      	str	r0, [r7, #4]
 8003a42:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	695b      	ldr	r3, [r3, #20]
 8003a48:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003a4c:	683b      	ldr	r3, [r7, #0]
 8003a4e:	431a      	orrs	r2, r3
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	615a      	str	r2, [r3, #20]
}
 8003a54:	bf00      	nop
 8003a56:	370c      	adds	r7, #12
 8003a58:	46bd      	mov	sp, r7
 8003a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a5e:	4770      	bx	lr

08003a60 <LL_USART_SetBaudRate>:
{
 8003a60:	b480      	push	{r7}
 8003a62:	b085      	sub	sp, #20
 8003a64:	af00      	add	r7, sp, #0
 8003a66:	60f8      	str	r0, [r7, #12]
 8003a68:	60b9      	str	r1, [r7, #8]
 8003a6a:	607a      	str	r2, [r7, #4]
 8003a6c:	603b      	str	r3, [r7, #0]
  if (OverSampling == LL_USART_OVERSAMPLING_8)
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003a74:	d152      	bne.n	8003b1c <LL_USART_SetBaudRate+0xbc>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
 8003a76:	68ba      	ldr	r2, [r7, #8]
 8003a78:	4613      	mov	r3, r2
 8003a7a:	009b      	lsls	r3, r3, #2
 8003a7c:	4413      	add	r3, r2
 8003a7e:	009a      	lsls	r2, r3, #2
 8003a80:	441a      	add	r2, r3
 8003a82:	683b      	ldr	r3, [r7, #0]
 8003a84:	005b      	lsls	r3, r3, #1
 8003a86:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a8a:	4a4f      	ldr	r2, [pc, #316]	; (8003bc8 <LL_USART_SetBaudRate+0x168>)
 8003a8c:	fba2 2303 	umull	r2, r3, r2, r3
 8003a90:	095b      	lsrs	r3, r3, #5
 8003a92:	b29b      	uxth	r3, r3
 8003a94:	011b      	lsls	r3, r3, #4
 8003a96:	b299      	uxth	r1, r3
 8003a98:	68ba      	ldr	r2, [r7, #8]
 8003a9a:	4613      	mov	r3, r2
 8003a9c:	009b      	lsls	r3, r3, #2
 8003a9e:	4413      	add	r3, r2
 8003aa0:	009a      	lsls	r2, r3, #2
 8003aa2:	441a      	add	r2, r3
 8003aa4:	683b      	ldr	r3, [r7, #0]
 8003aa6:	005b      	lsls	r3, r3, #1
 8003aa8:	fbb2 f2f3 	udiv	r2, r2, r3
 8003aac:	4b46      	ldr	r3, [pc, #280]	; (8003bc8 <LL_USART_SetBaudRate+0x168>)
 8003aae:	fba3 0302 	umull	r0, r3, r3, r2
 8003ab2:	095b      	lsrs	r3, r3, #5
 8003ab4:	2064      	movs	r0, #100	; 0x64
 8003ab6:	fb00 f303 	mul.w	r3, r0, r3
 8003aba:	1ad3      	subs	r3, r2, r3
 8003abc:	00db      	lsls	r3, r3, #3
 8003abe:	3332      	adds	r3, #50	; 0x32
 8003ac0:	4a41      	ldr	r2, [pc, #260]	; (8003bc8 <LL_USART_SetBaudRate+0x168>)
 8003ac2:	fba2 2303 	umull	r2, r3, r2, r3
 8003ac6:	095b      	lsrs	r3, r3, #5
 8003ac8:	b29b      	uxth	r3, r3
 8003aca:	005b      	lsls	r3, r3, #1
 8003acc:	b29b      	uxth	r3, r3
 8003ace:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003ad2:	b29b      	uxth	r3, r3
 8003ad4:	440b      	add	r3, r1
 8003ad6:	b299      	uxth	r1, r3
 8003ad8:	68ba      	ldr	r2, [r7, #8]
 8003ada:	4613      	mov	r3, r2
 8003adc:	009b      	lsls	r3, r3, #2
 8003ade:	4413      	add	r3, r2
 8003ae0:	009a      	lsls	r2, r3, #2
 8003ae2:	441a      	add	r2, r3
 8003ae4:	683b      	ldr	r3, [r7, #0]
 8003ae6:	005b      	lsls	r3, r3, #1
 8003ae8:	fbb2 f2f3 	udiv	r2, r2, r3
 8003aec:	4b36      	ldr	r3, [pc, #216]	; (8003bc8 <LL_USART_SetBaudRate+0x168>)
 8003aee:	fba3 0302 	umull	r0, r3, r3, r2
 8003af2:	095b      	lsrs	r3, r3, #5
 8003af4:	2064      	movs	r0, #100	; 0x64
 8003af6:	fb00 f303 	mul.w	r3, r0, r3
 8003afa:	1ad3      	subs	r3, r2, r3
 8003afc:	00db      	lsls	r3, r3, #3
 8003afe:	3332      	adds	r3, #50	; 0x32
 8003b00:	4a31      	ldr	r2, [pc, #196]	; (8003bc8 <LL_USART_SetBaudRate+0x168>)
 8003b02:	fba2 2303 	umull	r2, r3, r2, r3
 8003b06:	095b      	lsrs	r3, r3, #5
 8003b08:	b29b      	uxth	r3, r3
 8003b0a:	f003 0307 	and.w	r3, r3, #7
 8003b0e:	b29b      	uxth	r3, r3
 8003b10:	440b      	add	r3, r1
 8003b12:	b29b      	uxth	r3, r3
 8003b14:	461a      	mov	r2, r3
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	609a      	str	r2, [r3, #8]
}
 8003b1a:	e04f      	b.n	8003bbc <LL_USART_SetBaudRate+0x15c>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 8003b1c:	68ba      	ldr	r2, [r7, #8]
 8003b1e:	4613      	mov	r3, r2
 8003b20:	009b      	lsls	r3, r3, #2
 8003b22:	4413      	add	r3, r2
 8003b24:	009a      	lsls	r2, r3, #2
 8003b26:	441a      	add	r2, r3
 8003b28:	683b      	ldr	r3, [r7, #0]
 8003b2a:	009b      	lsls	r3, r3, #2
 8003b2c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b30:	4a25      	ldr	r2, [pc, #148]	; (8003bc8 <LL_USART_SetBaudRate+0x168>)
 8003b32:	fba2 2303 	umull	r2, r3, r2, r3
 8003b36:	095b      	lsrs	r3, r3, #5
 8003b38:	b29b      	uxth	r3, r3
 8003b3a:	011b      	lsls	r3, r3, #4
 8003b3c:	b299      	uxth	r1, r3
 8003b3e:	68ba      	ldr	r2, [r7, #8]
 8003b40:	4613      	mov	r3, r2
 8003b42:	009b      	lsls	r3, r3, #2
 8003b44:	4413      	add	r3, r2
 8003b46:	009a      	lsls	r2, r3, #2
 8003b48:	441a      	add	r2, r3
 8003b4a:	683b      	ldr	r3, [r7, #0]
 8003b4c:	009b      	lsls	r3, r3, #2
 8003b4e:	fbb2 f2f3 	udiv	r2, r2, r3
 8003b52:	4b1d      	ldr	r3, [pc, #116]	; (8003bc8 <LL_USART_SetBaudRate+0x168>)
 8003b54:	fba3 0302 	umull	r0, r3, r3, r2
 8003b58:	095b      	lsrs	r3, r3, #5
 8003b5a:	2064      	movs	r0, #100	; 0x64
 8003b5c:	fb00 f303 	mul.w	r3, r0, r3
 8003b60:	1ad3      	subs	r3, r2, r3
 8003b62:	011b      	lsls	r3, r3, #4
 8003b64:	3332      	adds	r3, #50	; 0x32
 8003b66:	4a18      	ldr	r2, [pc, #96]	; (8003bc8 <LL_USART_SetBaudRate+0x168>)
 8003b68:	fba2 2303 	umull	r2, r3, r2, r3
 8003b6c:	095b      	lsrs	r3, r3, #5
 8003b6e:	b29b      	uxth	r3, r3
 8003b70:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003b74:	b29b      	uxth	r3, r3
 8003b76:	440b      	add	r3, r1
 8003b78:	b299      	uxth	r1, r3
 8003b7a:	68ba      	ldr	r2, [r7, #8]
 8003b7c:	4613      	mov	r3, r2
 8003b7e:	009b      	lsls	r3, r3, #2
 8003b80:	4413      	add	r3, r2
 8003b82:	009a      	lsls	r2, r3, #2
 8003b84:	441a      	add	r2, r3
 8003b86:	683b      	ldr	r3, [r7, #0]
 8003b88:	009b      	lsls	r3, r3, #2
 8003b8a:	fbb2 f2f3 	udiv	r2, r2, r3
 8003b8e:	4b0e      	ldr	r3, [pc, #56]	; (8003bc8 <LL_USART_SetBaudRate+0x168>)
 8003b90:	fba3 0302 	umull	r0, r3, r3, r2
 8003b94:	095b      	lsrs	r3, r3, #5
 8003b96:	2064      	movs	r0, #100	; 0x64
 8003b98:	fb00 f303 	mul.w	r3, r0, r3
 8003b9c:	1ad3      	subs	r3, r2, r3
 8003b9e:	011b      	lsls	r3, r3, #4
 8003ba0:	3332      	adds	r3, #50	; 0x32
 8003ba2:	4a09      	ldr	r2, [pc, #36]	; (8003bc8 <LL_USART_SetBaudRate+0x168>)
 8003ba4:	fba2 2303 	umull	r2, r3, r2, r3
 8003ba8:	095b      	lsrs	r3, r3, #5
 8003baa:	b29b      	uxth	r3, r3
 8003bac:	f003 030f 	and.w	r3, r3, #15
 8003bb0:	b29b      	uxth	r3, r3
 8003bb2:	440b      	add	r3, r1
 8003bb4:	b29b      	uxth	r3, r3
 8003bb6:	461a      	mov	r2, r3
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	609a      	str	r2, [r3, #8]
}
 8003bbc:	bf00      	nop
 8003bbe:	3714      	adds	r7, #20
 8003bc0:	46bd      	mov	sp, r7
 8003bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc6:	4770      	bx	lr
 8003bc8:	51eb851f 	.word	0x51eb851f

08003bcc <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, LL_USART_InitTypeDef *USART_InitStruct)
{
 8003bcc:	b580      	push	{r7, lr}
 8003bce:	b088      	sub	sp, #32
 8003bd0:	af00      	add	r7, sp, #0
 8003bd2:	6078      	str	r0, [r7, #4]
 8003bd4:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 8003bd6:	2301      	movs	r3, #1
 8003bd8:	77fb      	strb	r3, [r7, #31]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 8003bda:	2300      	movs	r3, #0
 8003bdc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 8003bde:	6878      	ldr	r0, [r7, #4]
 8003be0:	f7ff ff04 	bl	80039ec <LL_USART_IsEnabled>
 8003be4:	4603      	mov	r3, r0
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d16c      	bne.n	8003cc4 <LL_USART_Init+0xf8>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	68db      	ldr	r3, [r3, #12]
 8003bee:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8003bf2:	f023 030c 	bic.w	r3, r3, #12
 8003bf6:	683a      	ldr	r2, [r7, #0]
 8003bf8:	6851      	ldr	r1, [r2, #4]
 8003bfa:	683a      	ldr	r2, [r7, #0]
 8003bfc:	68d2      	ldr	r2, [r2, #12]
 8003bfe:	4311      	orrs	r1, r2
 8003c00:	683a      	ldr	r2, [r7, #0]
 8003c02:	6912      	ldr	r2, [r2, #16]
 8003c04:	4311      	orrs	r1, r2
 8003c06:	683a      	ldr	r2, [r7, #0]
 8003c08:	6992      	ldr	r2, [r2, #24]
 8003c0a:	430a      	orrs	r2, r1
 8003c0c:	431a      	orrs	r2, r3
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	60da      	str	r2, [r3, #12]
    /*---------------------------- USART CR2 Configuration -----------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 8003c12:	683b      	ldr	r3, [r7, #0]
 8003c14:	689b      	ldr	r3, [r3, #8]
 8003c16:	4619      	mov	r1, r3
 8003c18:	6878      	ldr	r0, [r7, #4]
 8003c1a:	f7ff fefb 	bl	8003a14 <LL_USART_SetStopBitsLength>

    /*---------------------------- USART CR3 Configuration -----------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 8003c1e:	683b      	ldr	r3, [r7, #0]
 8003c20:	695b      	ldr	r3, [r3, #20]
 8003c22:	4619      	mov	r1, r3
 8003c24:	6878      	ldr	r0, [r7, #4]
 8003c26:	f7ff ff08 	bl	8003a3a <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration -----------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    LL_RCC_GetSystemClocksFreq(&rcc_clocks);
 8003c2a:	f107 0308 	add.w	r3, r7, #8
 8003c2e:	4618      	mov	r0, r3
 8003c30:	f7ff fe14 	bl	800385c <LL_RCC_GetSystemClocksFreq>
    if (USARTx == USART1)
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	4a26      	ldr	r2, [pc, #152]	; (8003cd0 <LL_USART_Init+0x104>)
 8003c38:	4293      	cmp	r3, r2
 8003c3a:	d102      	bne.n	8003c42 <LL_USART_Init+0x76>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 8003c3c:	697b      	ldr	r3, [r7, #20]
 8003c3e:	61bb      	str	r3, [r7, #24]
 8003c40:	e02f      	b.n	8003ca2 <LL_USART_Init+0xd6>
    }
    else if (USARTx == USART2)
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	4a23      	ldr	r2, [pc, #140]	; (8003cd4 <LL_USART_Init+0x108>)
 8003c46:	4293      	cmp	r3, r2
 8003c48:	d102      	bne.n	8003c50 <LL_USART_Init+0x84>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8003c4a:	693b      	ldr	r3, [r7, #16]
 8003c4c:	61bb      	str	r3, [r7, #24]
 8003c4e:	e028      	b.n	8003ca2 <LL_USART_Init+0xd6>
    }
#if defined(USART3)
    else if (USARTx == USART3)
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	4a21      	ldr	r2, [pc, #132]	; (8003cd8 <LL_USART_Init+0x10c>)
 8003c54:	4293      	cmp	r3, r2
 8003c56:	d102      	bne.n	8003c5e <LL_USART_Init+0x92>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8003c58:	693b      	ldr	r3, [r7, #16]
 8003c5a:	61bb      	str	r3, [r7, #24]
 8003c5c:	e021      	b.n	8003ca2 <LL_USART_Init+0xd6>
    }
#endif /* USART3 */
#if defined(USART6)
    else if (USARTx == USART6)
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	4a1e      	ldr	r2, [pc, #120]	; (8003cdc <LL_USART_Init+0x110>)
 8003c62:	4293      	cmp	r3, r2
 8003c64:	d102      	bne.n	8003c6c <LL_USART_Init+0xa0>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 8003c66:	697b      	ldr	r3, [r7, #20]
 8003c68:	61bb      	str	r3, [r7, #24]
 8003c6a:	e01a      	b.n	8003ca2 <LL_USART_Init+0xd6>
    }
#endif /* USART6 */
#if defined(UART4)
    else if (USARTx == UART4)
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	4a1c      	ldr	r2, [pc, #112]	; (8003ce0 <LL_USART_Init+0x114>)
 8003c70:	4293      	cmp	r3, r2
 8003c72:	d102      	bne.n	8003c7a <LL_USART_Init+0xae>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8003c74:	693b      	ldr	r3, [r7, #16]
 8003c76:	61bb      	str	r3, [r7, #24]
 8003c78:	e013      	b.n	8003ca2 <LL_USART_Init+0xd6>
    }
#endif /* UART4 */
#if defined(UART5)
    else if (USARTx == UART5)
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	4a19      	ldr	r2, [pc, #100]	; (8003ce4 <LL_USART_Init+0x118>)
 8003c7e:	4293      	cmp	r3, r2
 8003c80:	d102      	bne.n	8003c88 <LL_USART_Init+0xbc>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8003c82:	693b      	ldr	r3, [r7, #16]
 8003c84:	61bb      	str	r3, [r7, #24]
 8003c86:	e00c      	b.n	8003ca2 <LL_USART_Init+0xd6>
    }
#endif /* UART5 */
#if defined(UART7)
    else if (USARTx == UART7)
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	4a17      	ldr	r2, [pc, #92]	; (8003ce8 <LL_USART_Init+0x11c>)
 8003c8c:	4293      	cmp	r3, r2
 8003c8e:	d102      	bne.n	8003c96 <LL_USART_Init+0xca>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8003c90:	693b      	ldr	r3, [r7, #16]
 8003c92:	61bb      	str	r3, [r7, #24]
 8003c94:	e005      	b.n	8003ca2 <LL_USART_Init+0xd6>
    }
#endif /* UART7 */
#if defined(UART8)
    else if (USARTx == UART8)
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	4a14      	ldr	r2, [pc, #80]	; (8003cec <LL_USART_Init+0x120>)
 8003c9a:	4293      	cmp	r3, r2
 8003c9c:	d101      	bne.n	8003ca2 <LL_USART_Init+0xd6>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8003c9e:	693b      	ldr	r3, [r7, #16]
 8003ca0:	61bb      	str	r3, [r7, #24]

    /* Configure the USART Baud Rate :
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 8003ca2:	69bb      	ldr	r3, [r7, #24]
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d00d      	beq.n	8003cc4 <LL_USART_Init+0xf8>
        && (USART_InitStruct->BaudRate != 0U))
 8003ca8:	683b      	ldr	r3, [r7, #0]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d009      	beq.n	8003cc4 <LL_USART_Init+0xf8>
    {
      status = SUCCESS;
 8003cb0:	2300      	movs	r3, #0
 8003cb2:	77fb      	strb	r3, [r7, #31]
      LL_USART_SetBaudRate(USARTx,
 8003cb4:	683b      	ldr	r3, [r7, #0]
 8003cb6:	699a      	ldr	r2, [r3, #24]
 8003cb8:	683b      	ldr	r3, [r7, #0]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	69b9      	ldr	r1, [r7, #24]
 8003cbe:	6878      	ldr	r0, [r7, #4]
 8003cc0:	f7ff fece 	bl	8003a60 <LL_USART_SetBaudRate>
      assert_param(IS_LL_USART_BRR_MAX(USARTx->BRR));
    }
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 8003cc4:	7ffb      	ldrb	r3, [r7, #31]
}
 8003cc6:	4618      	mov	r0, r3
 8003cc8:	3720      	adds	r7, #32
 8003cca:	46bd      	mov	sp, r7
 8003ccc:	bd80      	pop	{r7, pc}
 8003cce:	bf00      	nop
 8003cd0:	40011000 	.word	0x40011000
 8003cd4:	40004400 	.word	0x40004400
 8003cd8:	40004800 	.word	0x40004800
 8003cdc:	40011400 	.word	0x40011400
 8003ce0:	40004c00 	.word	0x40004c00
 8003ce4:	40005000 	.word	0x40005000
 8003ce8:	40007800 	.word	0x40007800
 8003cec:	40007c00 	.word	0x40007c00

08003cf0 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8003cf0:	b480      	push	{r7}
 8003cf2:	b087      	sub	sp, #28
 8003cf4:	af00      	add	r7, sp, #0
 8003cf6:	60f8      	str	r0, [r7, #12]
 8003cf8:	60b9      	str	r1, [r7, #8]
 8003cfa:	4613      	mov	r3, r2
 8003cfc:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8003cfe:	79fb      	ldrb	r3, [r7, #7]
 8003d00:	2b02      	cmp	r3, #2
 8003d02:	d165      	bne.n	8003dd0 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8003d04:	68bb      	ldr	r3, [r7, #8]
 8003d06:	4a41      	ldr	r2, [pc, #260]	; (8003e0c <USB_SetTurnaroundTime+0x11c>)
 8003d08:	4293      	cmp	r3, r2
 8003d0a:	d906      	bls.n	8003d1a <USB_SetTurnaroundTime+0x2a>
 8003d0c:	68bb      	ldr	r3, [r7, #8]
 8003d0e:	4a40      	ldr	r2, [pc, #256]	; (8003e10 <USB_SetTurnaroundTime+0x120>)
 8003d10:	4293      	cmp	r3, r2
 8003d12:	d802      	bhi.n	8003d1a <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8003d14:	230f      	movs	r3, #15
 8003d16:	617b      	str	r3, [r7, #20]
 8003d18:	e062      	b.n	8003de0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8003d1a:	68bb      	ldr	r3, [r7, #8]
 8003d1c:	4a3c      	ldr	r2, [pc, #240]	; (8003e10 <USB_SetTurnaroundTime+0x120>)
 8003d1e:	4293      	cmp	r3, r2
 8003d20:	d906      	bls.n	8003d30 <USB_SetTurnaroundTime+0x40>
 8003d22:	68bb      	ldr	r3, [r7, #8]
 8003d24:	4a3b      	ldr	r2, [pc, #236]	; (8003e14 <USB_SetTurnaroundTime+0x124>)
 8003d26:	4293      	cmp	r3, r2
 8003d28:	d802      	bhi.n	8003d30 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8003d2a:	230e      	movs	r3, #14
 8003d2c:	617b      	str	r3, [r7, #20]
 8003d2e:	e057      	b.n	8003de0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8003d30:	68bb      	ldr	r3, [r7, #8]
 8003d32:	4a38      	ldr	r2, [pc, #224]	; (8003e14 <USB_SetTurnaroundTime+0x124>)
 8003d34:	4293      	cmp	r3, r2
 8003d36:	d906      	bls.n	8003d46 <USB_SetTurnaroundTime+0x56>
 8003d38:	68bb      	ldr	r3, [r7, #8]
 8003d3a:	4a37      	ldr	r2, [pc, #220]	; (8003e18 <USB_SetTurnaroundTime+0x128>)
 8003d3c:	4293      	cmp	r3, r2
 8003d3e:	d802      	bhi.n	8003d46 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8003d40:	230d      	movs	r3, #13
 8003d42:	617b      	str	r3, [r7, #20]
 8003d44:	e04c      	b.n	8003de0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8003d46:	68bb      	ldr	r3, [r7, #8]
 8003d48:	4a33      	ldr	r2, [pc, #204]	; (8003e18 <USB_SetTurnaroundTime+0x128>)
 8003d4a:	4293      	cmp	r3, r2
 8003d4c:	d906      	bls.n	8003d5c <USB_SetTurnaroundTime+0x6c>
 8003d4e:	68bb      	ldr	r3, [r7, #8]
 8003d50:	4a32      	ldr	r2, [pc, #200]	; (8003e1c <USB_SetTurnaroundTime+0x12c>)
 8003d52:	4293      	cmp	r3, r2
 8003d54:	d802      	bhi.n	8003d5c <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8003d56:	230c      	movs	r3, #12
 8003d58:	617b      	str	r3, [r7, #20]
 8003d5a:	e041      	b.n	8003de0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8003d5c:	68bb      	ldr	r3, [r7, #8]
 8003d5e:	4a2f      	ldr	r2, [pc, #188]	; (8003e1c <USB_SetTurnaroundTime+0x12c>)
 8003d60:	4293      	cmp	r3, r2
 8003d62:	d906      	bls.n	8003d72 <USB_SetTurnaroundTime+0x82>
 8003d64:	68bb      	ldr	r3, [r7, #8]
 8003d66:	4a2e      	ldr	r2, [pc, #184]	; (8003e20 <USB_SetTurnaroundTime+0x130>)
 8003d68:	4293      	cmp	r3, r2
 8003d6a:	d802      	bhi.n	8003d72 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8003d6c:	230b      	movs	r3, #11
 8003d6e:	617b      	str	r3, [r7, #20]
 8003d70:	e036      	b.n	8003de0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8003d72:	68bb      	ldr	r3, [r7, #8]
 8003d74:	4a2a      	ldr	r2, [pc, #168]	; (8003e20 <USB_SetTurnaroundTime+0x130>)
 8003d76:	4293      	cmp	r3, r2
 8003d78:	d906      	bls.n	8003d88 <USB_SetTurnaroundTime+0x98>
 8003d7a:	68bb      	ldr	r3, [r7, #8]
 8003d7c:	4a29      	ldr	r2, [pc, #164]	; (8003e24 <USB_SetTurnaroundTime+0x134>)
 8003d7e:	4293      	cmp	r3, r2
 8003d80:	d802      	bhi.n	8003d88 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8003d82:	230a      	movs	r3, #10
 8003d84:	617b      	str	r3, [r7, #20]
 8003d86:	e02b      	b.n	8003de0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8003d88:	68bb      	ldr	r3, [r7, #8]
 8003d8a:	4a26      	ldr	r2, [pc, #152]	; (8003e24 <USB_SetTurnaroundTime+0x134>)
 8003d8c:	4293      	cmp	r3, r2
 8003d8e:	d906      	bls.n	8003d9e <USB_SetTurnaroundTime+0xae>
 8003d90:	68bb      	ldr	r3, [r7, #8]
 8003d92:	4a25      	ldr	r2, [pc, #148]	; (8003e28 <USB_SetTurnaroundTime+0x138>)
 8003d94:	4293      	cmp	r3, r2
 8003d96:	d802      	bhi.n	8003d9e <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8003d98:	2309      	movs	r3, #9
 8003d9a:	617b      	str	r3, [r7, #20]
 8003d9c:	e020      	b.n	8003de0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8003d9e:	68bb      	ldr	r3, [r7, #8]
 8003da0:	4a21      	ldr	r2, [pc, #132]	; (8003e28 <USB_SetTurnaroundTime+0x138>)
 8003da2:	4293      	cmp	r3, r2
 8003da4:	d906      	bls.n	8003db4 <USB_SetTurnaroundTime+0xc4>
 8003da6:	68bb      	ldr	r3, [r7, #8]
 8003da8:	4a20      	ldr	r2, [pc, #128]	; (8003e2c <USB_SetTurnaroundTime+0x13c>)
 8003daa:	4293      	cmp	r3, r2
 8003dac:	d802      	bhi.n	8003db4 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8003dae:	2308      	movs	r3, #8
 8003db0:	617b      	str	r3, [r7, #20]
 8003db2:	e015      	b.n	8003de0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8003db4:	68bb      	ldr	r3, [r7, #8]
 8003db6:	4a1d      	ldr	r2, [pc, #116]	; (8003e2c <USB_SetTurnaroundTime+0x13c>)
 8003db8:	4293      	cmp	r3, r2
 8003dba:	d906      	bls.n	8003dca <USB_SetTurnaroundTime+0xda>
 8003dbc:	68bb      	ldr	r3, [r7, #8]
 8003dbe:	4a1c      	ldr	r2, [pc, #112]	; (8003e30 <USB_SetTurnaroundTime+0x140>)
 8003dc0:	4293      	cmp	r3, r2
 8003dc2:	d802      	bhi.n	8003dca <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8003dc4:	2307      	movs	r3, #7
 8003dc6:	617b      	str	r3, [r7, #20]
 8003dc8:	e00a      	b.n	8003de0 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8003dca:	2306      	movs	r3, #6
 8003dcc:	617b      	str	r3, [r7, #20]
 8003dce:	e007      	b.n	8003de0 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8003dd0:	79fb      	ldrb	r3, [r7, #7]
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d102      	bne.n	8003ddc <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8003dd6:	2309      	movs	r3, #9
 8003dd8:	617b      	str	r3, [r7, #20]
 8003dda:	e001      	b.n	8003de0 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8003ddc:	2309      	movs	r3, #9
 8003dde:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	68db      	ldr	r3, [r3, #12]
 8003de4:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	68da      	ldr	r2, [r3, #12]
 8003df0:	697b      	ldr	r3, [r7, #20]
 8003df2:	029b      	lsls	r3, r3, #10
 8003df4:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8003df8:	431a      	orrs	r2, r3
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8003dfe:	2300      	movs	r3, #0
}
 8003e00:	4618      	mov	r0, r3
 8003e02:	371c      	adds	r7, #28
 8003e04:	46bd      	mov	sp, r7
 8003e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e0a:	4770      	bx	lr
 8003e0c:	00d8acbf 	.word	0x00d8acbf
 8003e10:	00e4e1bf 	.word	0x00e4e1bf
 8003e14:	00f423ff 	.word	0x00f423ff
 8003e18:	0106737f 	.word	0x0106737f
 8003e1c:	011a499f 	.word	0x011a499f
 8003e20:	01312cff 	.word	0x01312cff
 8003e24:	014ca43f 	.word	0x014ca43f
 8003e28:	016e35ff 	.word	0x016e35ff
 8003e2c:	01a6ab1f 	.word	0x01a6ab1f
 8003e30:	01e847ff 	.word	0x01e847ff

08003e34 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8003e34:	b480      	push	{r7}
 8003e36:	b085      	sub	sp, #20
 8003e38:	af00      	add	r7, sp, #0
 8003e3a:	6078      	str	r0, [r7, #4]
 8003e3c:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8003e3e:	2300      	movs	r3, #0
 8003e40:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8003e42:	683b      	ldr	r3, [r7, #0]
 8003e44:	019b      	lsls	r3, r3, #6
 8003e46:	f043 0220 	orr.w	r2, r3, #32
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	3301      	adds	r3, #1
 8003e52:	60fb      	str	r3, [r7, #12]
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	4a09      	ldr	r2, [pc, #36]	; (8003e7c <USB_FlushTxFifo+0x48>)
 8003e58:	4293      	cmp	r3, r2
 8003e5a:	d901      	bls.n	8003e60 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8003e5c:	2303      	movs	r3, #3
 8003e5e:	e006      	b.n	8003e6e <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	691b      	ldr	r3, [r3, #16]
 8003e64:	f003 0320 	and.w	r3, r3, #32
 8003e68:	2b20      	cmp	r3, #32
 8003e6a:	d0f0      	beq.n	8003e4e <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8003e6c:	2300      	movs	r3, #0
}
 8003e6e:	4618      	mov	r0, r3
 8003e70:	3714      	adds	r7, #20
 8003e72:	46bd      	mov	sp, r7
 8003e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e78:	4770      	bx	lr
 8003e7a:	bf00      	nop
 8003e7c:	00030d40 	.word	0x00030d40

08003e80 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg PCD_SPEED_HIGH: High speed mode
  *            @arg PCD_SPEED_FULL: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8003e80:	b480      	push	{r7}
 8003e82:	b087      	sub	sp, #28
 8003e84:	af00      	add	r7, sp, #0
 8003e86:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8003e8c:	693b      	ldr	r3, [r7, #16]
 8003e8e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003e92:	689b      	ldr	r3, [r3, #8]
 8003e94:	f003 0306 	and.w	r3, r3, #6
 8003e98:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d102      	bne.n	8003ea6 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8003ea0:	2300      	movs	r3, #0
 8003ea2:	75fb      	strb	r3, [r7, #23]
 8003ea4:	e00a      	b.n	8003ebc <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	2b02      	cmp	r3, #2
 8003eaa:	d002      	beq.n	8003eb2 <USB_GetDevSpeed+0x32>
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	2b06      	cmp	r3, #6
 8003eb0:	d102      	bne.n	8003eb8 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8003eb2:	2302      	movs	r3, #2
 8003eb4:	75fb      	strb	r3, [r7, #23]
 8003eb6:	e001      	b.n	8003ebc <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8003eb8:	230f      	movs	r3, #15
 8003eba:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8003ebc:	7dfb      	ldrb	r3, [r7, #23]
}
 8003ebe:	4618      	mov	r0, r3
 8003ec0:	371c      	adds	r7, #28
 8003ec2:	46bd      	mov	sp, r7
 8003ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec8:	4770      	bx	lr

08003eca <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8003eca:	b480      	push	{r7}
 8003ecc:	b085      	sub	sp, #20
 8003ece:	af00      	add	r7, sp, #0
 8003ed0:	6078      	str	r0, [r7, #4]
 8003ed2:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8003ed8:	683b      	ldr	r3, [r7, #0]
 8003eda:	781b      	ldrb	r3, [r3, #0]
 8003edc:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8003ede:	683b      	ldr	r3, [r7, #0]
 8003ee0:	785b      	ldrb	r3, [r3, #1]
 8003ee2:	2b01      	cmp	r3, #1
 8003ee4:	d13a      	bne.n	8003f5c <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003eec:	69da      	ldr	r2, [r3, #28]
 8003eee:	683b      	ldr	r3, [r7, #0]
 8003ef0:	781b      	ldrb	r3, [r3, #0]
 8003ef2:	f003 030f 	and.w	r3, r3, #15
 8003ef6:	2101      	movs	r1, #1
 8003ef8:	fa01 f303 	lsl.w	r3, r1, r3
 8003efc:	b29b      	uxth	r3, r3
 8003efe:	68f9      	ldr	r1, [r7, #12]
 8003f00:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003f04:	4313      	orrs	r3, r2
 8003f06:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8003f08:	68bb      	ldr	r3, [r7, #8]
 8003f0a:	015a      	lsls	r2, r3, #5
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	4413      	add	r3, r2
 8003f10:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d155      	bne.n	8003fca <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003f1e:	68bb      	ldr	r3, [r7, #8]
 8003f20:	015a      	lsls	r2, r3, #5
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	4413      	add	r3, r2
 8003f26:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f2a:	681a      	ldr	r2, [r3, #0]
 8003f2c:	683b      	ldr	r3, [r7, #0]
 8003f2e:	689b      	ldr	r3, [r3, #8]
 8003f30:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8003f34:	683b      	ldr	r3, [r7, #0]
 8003f36:	78db      	ldrb	r3, [r3, #3]
 8003f38:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003f3a:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8003f3c:	68bb      	ldr	r3, [r7, #8]
 8003f3e:	059b      	lsls	r3, r3, #22
 8003f40:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003f42:	4313      	orrs	r3, r2
 8003f44:	68ba      	ldr	r2, [r7, #8]
 8003f46:	0151      	lsls	r1, r2, #5
 8003f48:	68fa      	ldr	r2, [r7, #12]
 8003f4a:	440a      	add	r2, r1
 8003f4c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003f50:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003f54:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003f58:	6013      	str	r3, [r2, #0]
 8003f5a:	e036      	b.n	8003fca <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003f62:	69da      	ldr	r2, [r3, #28]
 8003f64:	683b      	ldr	r3, [r7, #0]
 8003f66:	781b      	ldrb	r3, [r3, #0]
 8003f68:	f003 030f 	and.w	r3, r3, #15
 8003f6c:	2101      	movs	r1, #1
 8003f6e:	fa01 f303 	lsl.w	r3, r1, r3
 8003f72:	041b      	lsls	r3, r3, #16
 8003f74:	68f9      	ldr	r1, [r7, #12]
 8003f76:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003f7a:	4313      	orrs	r3, r2
 8003f7c:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8003f7e:	68bb      	ldr	r3, [r7, #8]
 8003f80:	015a      	lsls	r2, r3, #5
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	4413      	add	r3, r2
 8003f86:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d11a      	bne.n	8003fca <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8003f94:	68bb      	ldr	r3, [r7, #8]
 8003f96:	015a      	lsls	r2, r3, #5
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	4413      	add	r3, r2
 8003f9c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003fa0:	681a      	ldr	r2, [r3, #0]
 8003fa2:	683b      	ldr	r3, [r7, #0]
 8003fa4:	689b      	ldr	r3, [r3, #8]
 8003fa6:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8003faa:	683b      	ldr	r3, [r7, #0]
 8003fac:	78db      	ldrb	r3, [r3, #3]
 8003fae:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8003fb0:	430b      	orrs	r3, r1
 8003fb2:	4313      	orrs	r3, r2
 8003fb4:	68ba      	ldr	r2, [r7, #8]
 8003fb6:	0151      	lsls	r1, r2, #5
 8003fb8:	68fa      	ldr	r2, [r7, #12]
 8003fba:	440a      	add	r2, r1
 8003fbc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003fc0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003fc4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003fc8:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8003fca:	2300      	movs	r3, #0
}
 8003fcc:	4618      	mov	r0, r3
 8003fce:	3714      	adds	r7, #20
 8003fd0:	46bd      	mov	sp, r7
 8003fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd6:	4770      	bx	lr

08003fd8 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8003fd8:	b580      	push	{r7, lr}
 8003fda:	b08a      	sub	sp, #40	; 0x28
 8003fdc:	af02      	add	r7, sp, #8
 8003fde:	60f8      	str	r0, [r7, #12]
 8003fe0:	60b9      	str	r1, [r7, #8]
 8003fe2:	4613      	mov	r3, r2
 8003fe4:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8003fea:	68bb      	ldr	r3, [r7, #8]
 8003fec:	781b      	ldrb	r3, [r3, #0]
 8003fee:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8003ff0:	68bb      	ldr	r3, [r7, #8]
 8003ff2:	785b      	ldrb	r3, [r3, #1]
 8003ff4:	2b01      	cmp	r3, #1
 8003ff6:	f040 815c 	bne.w	80042b2 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8003ffa:	68bb      	ldr	r3, [r7, #8]
 8003ffc:	695b      	ldr	r3, [r3, #20]
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d132      	bne.n	8004068 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004002:	69bb      	ldr	r3, [r7, #24]
 8004004:	015a      	lsls	r2, r3, #5
 8004006:	69fb      	ldr	r3, [r7, #28]
 8004008:	4413      	add	r3, r2
 800400a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800400e:	691b      	ldr	r3, [r3, #16]
 8004010:	69ba      	ldr	r2, [r7, #24]
 8004012:	0151      	lsls	r1, r2, #5
 8004014:	69fa      	ldr	r2, [r7, #28]
 8004016:	440a      	add	r2, r1
 8004018:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800401c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004020:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004024:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004026:	69bb      	ldr	r3, [r7, #24]
 8004028:	015a      	lsls	r2, r3, #5
 800402a:	69fb      	ldr	r3, [r7, #28]
 800402c:	4413      	add	r3, r2
 800402e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004032:	691b      	ldr	r3, [r3, #16]
 8004034:	69ba      	ldr	r2, [r7, #24]
 8004036:	0151      	lsls	r1, r2, #5
 8004038:	69fa      	ldr	r2, [r7, #28]
 800403a:	440a      	add	r2, r1
 800403c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004040:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004044:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004046:	69bb      	ldr	r3, [r7, #24]
 8004048:	015a      	lsls	r2, r3, #5
 800404a:	69fb      	ldr	r3, [r7, #28]
 800404c:	4413      	add	r3, r2
 800404e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004052:	691b      	ldr	r3, [r3, #16]
 8004054:	69ba      	ldr	r2, [r7, #24]
 8004056:	0151      	lsls	r1, r2, #5
 8004058:	69fa      	ldr	r2, [r7, #28]
 800405a:	440a      	add	r2, r1
 800405c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004060:	0cdb      	lsrs	r3, r3, #19
 8004062:	04db      	lsls	r3, r3, #19
 8004064:	6113      	str	r3, [r2, #16]
 8004066:	e074      	b.n	8004152 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004068:	69bb      	ldr	r3, [r7, #24]
 800406a:	015a      	lsls	r2, r3, #5
 800406c:	69fb      	ldr	r3, [r7, #28]
 800406e:	4413      	add	r3, r2
 8004070:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004074:	691b      	ldr	r3, [r3, #16]
 8004076:	69ba      	ldr	r2, [r7, #24]
 8004078:	0151      	lsls	r1, r2, #5
 800407a:	69fa      	ldr	r2, [r7, #28]
 800407c:	440a      	add	r2, r1
 800407e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004082:	0cdb      	lsrs	r3, r3, #19
 8004084:	04db      	lsls	r3, r3, #19
 8004086:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004088:	69bb      	ldr	r3, [r7, #24]
 800408a:	015a      	lsls	r2, r3, #5
 800408c:	69fb      	ldr	r3, [r7, #28]
 800408e:	4413      	add	r3, r2
 8004090:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004094:	691b      	ldr	r3, [r3, #16]
 8004096:	69ba      	ldr	r2, [r7, #24]
 8004098:	0151      	lsls	r1, r2, #5
 800409a:	69fa      	ldr	r2, [r7, #28]
 800409c:	440a      	add	r2, r1
 800409e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80040a2:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80040a6:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80040aa:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 80040ac:	69bb      	ldr	r3, [r7, #24]
 80040ae:	015a      	lsls	r2, r3, #5
 80040b0:	69fb      	ldr	r3, [r7, #28]
 80040b2:	4413      	add	r3, r2
 80040b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80040b8:	691a      	ldr	r2, [r3, #16]
 80040ba:	68bb      	ldr	r3, [r7, #8]
 80040bc:	6959      	ldr	r1, [r3, #20]
 80040be:	68bb      	ldr	r3, [r7, #8]
 80040c0:	689b      	ldr	r3, [r3, #8]
 80040c2:	440b      	add	r3, r1
 80040c4:	1e59      	subs	r1, r3, #1
 80040c6:	68bb      	ldr	r3, [r7, #8]
 80040c8:	689b      	ldr	r3, [r3, #8]
 80040ca:	fbb1 f3f3 	udiv	r3, r1, r3
 80040ce:	04d9      	lsls	r1, r3, #19
 80040d0:	4b9d      	ldr	r3, [pc, #628]	; (8004348 <USB_EPStartXfer+0x370>)
 80040d2:	400b      	ands	r3, r1
 80040d4:	69b9      	ldr	r1, [r7, #24]
 80040d6:	0148      	lsls	r0, r1, #5
 80040d8:	69f9      	ldr	r1, [r7, #28]
 80040da:	4401      	add	r1, r0
 80040dc:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80040e0:	4313      	orrs	r3, r2
 80040e2:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80040e4:	69bb      	ldr	r3, [r7, #24]
 80040e6:	015a      	lsls	r2, r3, #5
 80040e8:	69fb      	ldr	r3, [r7, #28]
 80040ea:	4413      	add	r3, r2
 80040ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80040f0:	691a      	ldr	r2, [r3, #16]
 80040f2:	68bb      	ldr	r3, [r7, #8]
 80040f4:	695b      	ldr	r3, [r3, #20]
 80040f6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80040fa:	69b9      	ldr	r1, [r7, #24]
 80040fc:	0148      	lsls	r0, r1, #5
 80040fe:	69f9      	ldr	r1, [r7, #28]
 8004100:	4401      	add	r1, r0
 8004102:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004106:	4313      	orrs	r3, r2
 8004108:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800410a:	68bb      	ldr	r3, [r7, #8]
 800410c:	78db      	ldrb	r3, [r3, #3]
 800410e:	2b01      	cmp	r3, #1
 8004110:	d11f      	bne.n	8004152 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8004112:	69bb      	ldr	r3, [r7, #24]
 8004114:	015a      	lsls	r2, r3, #5
 8004116:	69fb      	ldr	r3, [r7, #28]
 8004118:	4413      	add	r3, r2
 800411a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800411e:	691b      	ldr	r3, [r3, #16]
 8004120:	69ba      	ldr	r2, [r7, #24]
 8004122:	0151      	lsls	r1, r2, #5
 8004124:	69fa      	ldr	r2, [r7, #28]
 8004126:	440a      	add	r2, r1
 8004128:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800412c:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8004130:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8004132:	69bb      	ldr	r3, [r7, #24]
 8004134:	015a      	lsls	r2, r3, #5
 8004136:	69fb      	ldr	r3, [r7, #28]
 8004138:	4413      	add	r3, r2
 800413a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800413e:	691b      	ldr	r3, [r3, #16]
 8004140:	69ba      	ldr	r2, [r7, #24]
 8004142:	0151      	lsls	r1, r2, #5
 8004144:	69fa      	ldr	r2, [r7, #28]
 8004146:	440a      	add	r2, r1
 8004148:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800414c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004150:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8004152:	79fb      	ldrb	r3, [r7, #7]
 8004154:	2b01      	cmp	r3, #1
 8004156:	d14b      	bne.n	80041f0 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8004158:	68bb      	ldr	r3, [r7, #8]
 800415a:	691b      	ldr	r3, [r3, #16]
 800415c:	2b00      	cmp	r3, #0
 800415e:	d009      	beq.n	8004174 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8004160:	69bb      	ldr	r3, [r7, #24]
 8004162:	015a      	lsls	r2, r3, #5
 8004164:	69fb      	ldr	r3, [r7, #28]
 8004166:	4413      	add	r3, r2
 8004168:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800416c:	461a      	mov	r2, r3
 800416e:	68bb      	ldr	r3, [r7, #8]
 8004170:	691b      	ldr	r3, [r3, #16]
 8004172:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8004174:	68bb      	ldr	r3, [r7, #8]
 8004176:	78db      	ldrb	r3, [r3, #3]
 8004178:	2b01      	cmp	r3, #1
 800417a:	d128      	bne.n	80041ce <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800417c:	69fb      	ldr	r3, [r7, #28]
 800417e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004182:	689b      	ldr	r3, [r3, #8]
 8004184:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004188:	2b00      	cmp	r3, #0
 800418a:	d110      	bne.n	80041ae <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800418c:	69bb      	ldr	r3, [r7, #24]
 800418e:	015a      	lsls	r2, r3, #5
 8004190:	69fb      	ldr	r3, [r7, #28]
 8004192:	4413      	add	r3, r2
 8004194:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	69ba      	ldr	r2, [r7, #24]
 800419c:	0151      	lsls	r1, r2, #5
 800419e:	69fa      	ldr	r2, [r7, #28]
 80041a0:	440a      	add	r2, r1
 80041a2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80041a6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80041aa:	6013      	str	r3, [r2, #0]
 80041ac:	e00f      	b.n	80041ce <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80041ae:	69bb      	ldr	r3, [r7, #24]
 80041b0:	015a      	lsls	r2, r3, #5
 80041b2:	69fb      	ldr	r3, [r7, #28]
 80041b4:	4413      	add	r3, r2
 80041b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	69ba      	ldr	r2, [r7, #24]
 80041be:	0151      	lsls	r1, r2, #5
 80041c0:	69fa      	ldr	r2, [r7, #28]
 80041c2:	440a      	add	r2, r1
 80041c4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80041c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80041cc:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80041ce:	69bb      	ldr	r3, [r7, #24]
 80041d0:	015a      	lsls	r2, r3, #5
 80041d2:	69fb      	ldr	r3, [r7, #28]
 80041d4:	4413      	add	r3, r2
 80041d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	69ba      	ldr	r2, [r7, #24]
 80041de:	0151      	lsls	r1, r2, #5
 80041e0:	69fa      	ldr	r2, [r7, #28]
 80041e2:	440a      	add	r2, r1
 80041e4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80041e8:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80041ec:	6013      	str	r3, [r2, #0]
 80041ee:	e12f      	b.n	8004450 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80041f0:	69bb      	ldr	r3, [r7, #24]
 80041f2:	015a      	lsls	r2, r3, #5
 80041f4:	69fb      	ldr	r3, [r7, #28]
 80041f6:	4413      	add	r3, r2
 80041f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	69ba      	ldr	r2, [r7, #24]
 8004200:	0151      	lsls	r1, r2, #5
 8004202:	69fa      	ldr	r2, [r7, #28]
 8004204:	440a      	add	r2, r1
 8004206:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800420a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800420e:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004210:	68bb      	ldr	r3, [r7, #8]
 8004212:	78db      	ldrb	r3, [r3, #3]
 8004214:	2b01      	cmp	r3, #1
 8004216:	d015      	beq.n	8004244 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8004218:	68bb      	ldr	r3, [r7, #8]
 800421a:	695b      	ldr	r3, [r3, #20]
 800421c:	2b00      	cmp	r3, #0
 800421e:	f000 8117 	beq.w	8004450 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8004222:	69fb      	ldr	r3, [r7, #28]
 8004224:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004228:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800422a:	68bb      	ldr	r3, [r7, #8]
 800422c:	781b      	ldrb	r3, [r3, #0]
 800422e:	f003 030f 	and.w	r3, r3, #15
 8004232:	2101      	movs	r1, #1
 8004234:	fa01 f303 	lsl.w	r3, r1, r3
 8004238:	69f9      	ldr	r1, [r7, #28]
 800423a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800423e:	4313      	orrs	r3, r2
 8004240:	634b      	str	r3, [r1, #52]	; 0x34
 8004242:	e105      	b.n	8004450 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004244:	69fb      	ldr	r3, [r7, #28]
 8004246:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800424a:	689b      	ldr	r3, [r3, #8]
 800424c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004250:	2b00      	cmp	r3, #0
 8004252:	d110      	bne.n	8004276 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004254:	69bb      	ldr	r3, [r7, #24]
 8004256:	015a      	lsls	r2, r3, #5
 8004258:	69fb      	ldr	r3, [r7, #28]
 800425a:	4413      	add	r3, r2
 800425c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	69ba      	ldr	r2, [r7, #24]
 8004264:	0151      	lsls	r1, r2, #5
 8004266:	69fa      	ldr	r2, [r7, #28]
 8004268:	440a      	add	r2, r1
 800426a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800426e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004272:	6013      	str	r3, [r2, #0]
 8004274:	e00f      	b.n	8004296 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8004276:	69bb      	ldr	r3, [r7, #24]
 8004278:	015a      	lsls	r2, r3, #5
 800427a:	69fb      	ldr	r3, [r7, #28]
 800427c:	4413      	add	r3, r2
 800427e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	69ba      	ldr	r2, [r7, #24]
 8004286:	0151      	lsls	r1, r2, #5
 8004288:	69fa      	ldr	r2, [r7, #28]
 800428a:	440a      	add	r2, r1
 800428c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004290:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004294:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8004296:	68bb      	ldr	r3, [r7, #8]
 8004298:	68d9      	ldr	r1, [r3, #12]
 800429a:	68bb      	ldr	r3, [r7, #8]
 800429c:	781a      	ldrb	r2, [r3, #0]
 800429e:	68bb      	ldr	r3, [r7, #8]
 80042a0:	695b      	ldr	r3, [r3, #20]
 80042a2:	b298      	uxth	r0, r3
 80042a4:	79fb      	ldrb	r3, [r7, #7]
 80042a6:	9300      	str	r3, [sp, #0]
 80042a8:	4603      	mov	r3, r0
 80042aa:	68f8      	ldr	r0, [r7, #12]
 80042ac:	f000 fa2b 	bl	8004706 <USB_WritePacket>
 80042b0:	e0ce      	b.n	8004450 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80042b2:	69bb      	ldr	r3, [r7, #24]
 80042b4:	015a      	lsls	r2, r3, #5
 80042b6:	69fb      	ldr	r3, [r7, #28]
 80042b8:	4413      	add	r3, r2
 80042ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80042be:	691b      	ldr	r3, [r3, #16]
 80042c0:	69ba      	ldr	r2, [r7, #24]
 80042c2:	0151      	lsls	r1, r2, #5
 80042c4:	69fa      	ldr	r2, [r7, #28]
 80042c6:	440a      	add	r2, r1
 80042c8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80042cc:	0cdb      	lsrs	r3, r3, #19
 80042ce:	04db      	lsls	r3, r3, #19
 80042d0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80042d2:	69bb      	ldr	r3, [r7, #24]
 80042d4:	015a      	lsls	r2, r3, #5
 80042d6:	69fb      	ldr	r3, [r7, #28]
 80042d8:	4413      	add	r3, r2
 80042da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80042de:	691b      	ldr	r3, [r3, #16]
 80042e0:	69ba      	ldr	r2, [r7, #24]
 80042e2:	0151      	lsls	r1, r2, #5
 80042e4:	69fa      	ldr	r2, [r7, #28]
 80042e6:	440a      	add	r2, r1
 80042e8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80042ec:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80042f0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80042f4:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 80042f6:	68bb      	ldr	r3, [r7, #8]
 80042f8:	695b      	ldr	r3, [r3, #20]
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d126      	bne.n	800434c <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80042fe:	69bb      	ldr	r3, [r7, #24]
 8004300:	015a      	lsls	r2, r3, #5
 8004302:	69fb      	ldr	r3, [r7, #28]
 8004304:	4413      	add	r3, r2
 8004306:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800430a:	691a      	ldr	r2, [r3, #16]
 800430c:	68bb      	ldr	r3, [r7, #8]
 800430e:	689b      	ldr	r3, [r3, #8]
 8004310:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004314:	69b9      	ldr	r1, [r7, #24]
 8004316:	0148      	lsls	r0, r1, #5
 8004318:	69f9      	ldr	r1, [r7, #28]
 800431a:	4401      	add	r1, r0
 800431c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004320:	4313      	orrs	r3, r2
 8004322:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004324:	69bb      	ldr	r3, [r7, #24]
 8004326:	015a      	lsls	r2, r3, #5
 8004328:	69fb      	ldr	r3, [r7, #28]
 800432a:	4413      	add	r3, r2
 800432c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004330:	691b      	ldr	r3, [r3, #16]
 8004332:	69ba      	ldr	r2, [r7, #24]
 8004334:	0151      	lsls	r1, r2, #5
 8004336:	69fa      	ldr	r2, [r7, #28]
 8004338:	440a      	add	r2, r1
 800433a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800433e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004342:	6113      	str	r3, [r2, #16]
 8004344:	e036      	b.n	80043b4 <USB_EPStartXfer+0x3dc>
 8004346:	bf00      	nop
 8004348:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800434c:	68bb      	ldr	r3, [r7, #8]
 800434e:	695a      	ldr	r2, [r3, #20]
 8004350:	68bb      	ldr	r3, [r7, #8]
 8004352:	689b      	ldr	r3, [r3, #8]
 8004354:	4413      	add	r3, r2
 8004356:	1e5a      	subs	r2, r3, #1
 8004358:	68bb      	ldr	r3, [r7, #8]
 800435a:	689b      	ldr	r3, [r3, #8]
 800435c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004360:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8004362:	69bb      	ldr	r3, [r7, #24]
 8004364:	015a      	lsls	r2, r3, #5
 8004366:	69fb      	ldr	r3, [r7, #28]
 8004368:	4413      	add	r3, r2
 800436a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800436e:	691a      	ldr	r2, [r3, #16]
 8004370:	8afb      	ldrh	r3, [r7, #22]
 8004372:	04d9      	lsls	r1, r3, #19
 8004374:	4b39      	ldr	r3, [pc, #228]	; (800445c <USB_EPStartXfer+0x484>)
 8004376:	400b      	ands	r3, r1
 8004378:	69b9      	ldr	r1, [r7, #24]
 800437a:	0148      	lsls	r0, r1, #5
 800437c:	69f9      	ldr	r1, [r7, #28]
 800437e:	4401      	add	r1, r0
 8004380:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004384:	4313      	orrs	r3, r2
 8004386:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8004388:	69bb      	ldr	r3, [r7, #24]
 800438a:	015a      	lsls	r2, r3, #5
 800438c:	69fb      	ldr	r3, [r7, #28]
 800438e:	4413      	add	r3, r2
 8004390:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004394:	691a      	ldr	r2, [r3, #16]
 8004396:	68bb      	ldr	r3, [r7, #8]
 8004398:	689b      	ldr	r3, [r3, #8]
 800439a:	8af9      	ldrh	r1, [r7, #22]
 800439c:	fb01 f303 	mul.w	r3, r1, r3
 80043a0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80043a4:	69b9      	ldr	r1, [r7, #24]
 80043a6:	0148      	lsls	r0, r1, #5
 80043a8:	69f9      	ldr	r1, [r7, #28]
 80043aa:	4401      	add	r1, r0
 80043ac:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80043b0:	4313      	orrs	r3, r2
 80043b2:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80043b4:	79fb      	ldrb	r3, [r7, #7]
 80043b6:	2b01      	cmp	r3, #1
 80043b8:	d10d      	bne.n	80043d6 <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80043ba:	68bb      	ldr	r3, [r7, #8]
 80043bc:	68db      	ldr	r3, [r3, #12]
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d009      	beq.n	80043d6 <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80043c2:	68bb      	ldr	r3, [r7, #8]
 80043c4:	68d9      	ldr	r1, [r3, #12]
 80043c6:	69bb      	ldr	r3, [r7, #24]
 80043c8:	015a      	lsls	r2, r3, #5
 80043ca:	69fb      	ldr	r3, [r7, #28]
 80043cc:	4413      	add	r3, r2
 80043ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80043d2:	460a      	mov	r2, r1
 80043d4:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80043d6:	68bb      	ldr	r3, [r7, #8]
 80043d8:	78db      	ldrb	r3, [r3, #3]
 80043da:	2b01      	cmp	r3, #1
 80043dc:	d128      	bne.n	8004430 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80043de:	69fb      	ldr	r3, [r7, #28]
 80043e0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80043e4:	689b      	ldr	r3, [r3, #8]
 80043e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d110      	bne.n	8004410 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80043ee:	69bb      	ldr	r3, [r7, #24]
 80043f0:	015a      	lsls	r2, r3, #5
 80043f2:	69fb      	ldr	r3, [r7, #28]
 80043f4:	4413      	add	r3, r2
 80043f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	69ba      	ldr	r2, [r7, #24]
 80043fe:	0151      	lsls	r1, r2, #5
 8004400:	69fa      	ldr	r2, [r7, #28]
 8004402:	440a      	add	r2, r1
 8004404:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004408:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800440c:	6013      	str	r3, [r2, #0]
 800440e:	e00f      	b.n	8004430 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8004410:	69bb      	ldr	r3, [r7, #24]
 8004412:	015a      	lsls	r2, r3, #5
 8004414:	69fb      	ldr	r3, [r7, #28]
 8004416:	4413      	add	r3, r2
 8004418:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	69ba      	ldr	r2, [r7, #24]
 8004420:	0151      	lsls	r1, r2, #5
 8004422:	69fa      	ldr	r2, [r7, #28]
 8004424:	440a      	add	r2, r1
 8004426:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800442a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800442e:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8004430:	69bb      	ldr	r3, [r7, #24]
 8004432:	015a      	lsls	r2, r3, #5
 8004434:	69fb      	ldr	r3, [r7, #28]
 8004436:	4413      	add	r3, r2
 8004438:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	69ba      	ldr	r2, [r7, #24]
 8004440:	0151      	lsls	r1, r2, #5
 8004442:	69fa      	ldr	r2, [r7, #28]
 8004444:	440a      	add	r2, r1
 8004446:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800444a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800444e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004450:	2300      	movs	r3, #0
}
 8004452:	4618      	mov	r0, r3
 8004454:	3720      	adds	r7, #32
 8004456:	46bd      	mov	sp, r7
 8004458:	bd80      	pop	{r7, pc}
 800445a:	bf00      	nop
 800445c:	1ff80000 	.word	0x1ff80000

08004460 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8004460:	b480      	push	{r7}
 8004462:	b087      	sub	sp, #28
 8004464:	af00      	add	r7, sp, #0
 8004466:	60f8      	str	r0, [r7, #12]
 8004468:	60b9      	str	r1, [r7, #8]
 800446a:	4613      	mov	r3, r2
 800446c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8004472:	68bb      	ldr	r3, [r7, #8]
 8004474:	781b      	ldrb	r3, [r3, #0]
 8004476:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004478:	68bb      	ldr	r3, [r7, #8]
 800447a:	785b      	ldrb	r3, [r3, #1]
 800447c:	2b01      	cmp	r3, #1
 800447e:	f040 80cd 	bne.w	800461c <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8004482:	68bb      	ldr	r3, [r7, #8]
 8004484:	695b      	ldr	r3, [r3, #20]
 8004486:	2b00      	cmp	r3, #0
 8004488:	d132      	bne.n	80044f0 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800448a:	693b      	ldr	r3, [r7, #16]
 800448c:	015a      	lsls	r2, r3, #5
 800448e:	697b      	ldr	r3, [r7, #20]
 8004490:	4413      	add	r3, r2
 8004492:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004496:	691b      	ldr	r3, [r3, #16]
 8004498:	693a      	ldr	r2, [r7, #16]
 800449a:	0151      	lsls	r1, r2, #5
 800449c:	697a      	ldr	r2, [r7, #20]
 800449e:	440a      	add	r2, r1
 80044a0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80044a4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80044a8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80044ac:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80044ae:	693b      	ldr	r3, [r7, #16]
 80044b0:	015a      	lsls	r2, r3, #5
 80044b2:	697b      	ldr	r3, [r7, #20]
 80044b4:	4413      	add	r3, r2
 80044b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80044ba:	691b      	ldr	r3, [r3, #16]
 80044bc:	693a      	ldr	r2, [r7, #16]
 80044be:	0151      	lsls	r1, r2, #5
 80044c0:	697a      	ldr	r2, [r7, #20]
 80044c2:	440a      	add	r2, r1
 80044c4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80044c8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80044cc:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80044ce:	693b      	ldr	r3, [r7, #16]
 80044d0:	015a      	lsls	r2, r3, #5
 80044d2:	697b      	ldr	r3, [r7, #20]
 80044d4:	4413      	add	r3, r2
 80044d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80044da:	691b      	ldr	r3, [r3, #16]
 80044dc:	693a      	ldr	r2, [r7, #16]
 80044de:	0151      	lsls	r1, r2, #5
 80044e0:	697a      	ldr	r2, [r7, #20]
 80044e2:	440a      	add	r2, r1
 80044e4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80044e8:	0cdb      	lsrs	r3, r3, #19
 80044ea:	04db      	lsls	r3, r3, #19
 80044ec:	6113      	str	r3, [r2, #16]
 80044ee:	e04e      	b.n	800458e <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80044f0:	693b      	ldr	r3, [r7, #16]
 80044f2:	015a      	lsls	r2, r3, #5
 80044f4:	697b      	ldr	r3, [r7, #20]
 80044f6:	4413      	add	r3, r2
 80044f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80044fc:	691b      	ldr	r3, [r3, #16]
 80044fe:	693a      	ldr	r2, [r7, #16]
 8004500:	0151      	lsls	r1, r2, #5
 8004502:	697a      	ldr	r2, [r7, #20]
 8004504:	440a      	add	r2, r1
 8004506:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800450a:	0cdb      	lsrs	r3, r3, #19
 800450c:	04db      	lsls	r3, r3, #19
 800450e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004510:	693b      	ldr	r3, [r7, #16]
 8004512:	015a      	lsls	r2, r3, #5
 8004514:	697b      	ldr	r3, [r7, #20]
 8004516:	4413      	add	r3, r2
 8004518:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800451c:	691b      	ldr	r3, [r3, #16]
 800451e:	693a      	ldr	r2, [r7, #16]
 8004520:	0151      	lsls	r1, r2, #5
 8004522:	697a      	ldr	r2, [r7, #20]
 8004524:	440a      	add	r2, r1
 8004526:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800452a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800452e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004532:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8004534:	68bb      	ldr	r3, [r7, #8]
 8004536:	695a      	ldr	r2, [r3, #20]
 8004538:	68bb      	ldr	r3, [r7, #8]
 800453a:	689b      	ldr	r3, [r3, #8]
 800453c:	429a      	cmp	r2, r3
 800453e:	d903      	bls.n	8004548 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8004540:	68bb      	ldr	r3, [r7, #8]
 8004542:	689a      	ldr	r2, [r3, #8]
 8004544:	68bb      	ldr	r3, [r7, #8]
 8004546:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004548:	693b      	ldr	r3, [r7, #16]
 800454a:	015a      	lsls	r2, r3, #5
 800454c:	697b      	ldr	r3, [r7, #20]
 800454e:	4413      	add	r3, r2
 8004550:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004554:	691b      	ldr	r3, [r3, #16]
 8004556:	693a      	ldr	r2, [r7, #16]
 8004558:	0151      	lsls	r1, r2, #5
 800455a:	697a      	ldr	r2, [r7, #20]
 800455c:	440a      	add	r2, r1
 800455e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004562:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004566:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8004568:	693b      	ldr	r3, [r7, #16]
 800456a:	015a      	lsls	r2, r3, #5
 800456c:	697b      	ldr	r3, [r7, #20]
 800456e:	4413      	add	r3, r2
 8004570:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004574:	691a      	ldr	r2, [r3, #16]
 8004576:	68bb      	ldr	r3, [r7, #8]
 8004578:	695b      	ldr	r3, [r3, #20]
 800457a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800457e:	6939      	ldr	r1, [r7, #16]
 8004580:	0148      	lsls	r0, r1, #5
 8004582:	6979      	ldr	r1, [r7, #20]
 8004584:	4401      	add	r1, r0
 8004586:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800458a:	4313      	orrs	r3, r2
 800458c:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800458e:	79fb      	ldrb	r3, [r7, #7]
 8004590:	2b01      	cmp	r3, #1
 8004592:	d11e      	bne.n	80045d2 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8004594:	68bb      	ldr	r3, [r7, #8]
 8004596:	691b      	ldr	r3, [r3, #16]
 8004598:	2b00      	cmp	r3, #0
 800459a:	d009      	beq.n	80045b0 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800459c:	693b      	ldr	r3, [r7, #16]
 800459e:	015a      	lsls	r2, r3, #5
 80045a0:	697b      	ldr	r3, [r7, #20]
 80045a2:	4413      	add	r3, r2
 80045a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80045a8:	461a      	mov	r2, r3
 80045aa:	68bb      	ldr	r3, [r7, #8]
 80045ac:	691b      	ldr	r3, [r3, #16]
 80045ae:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80045b0:	693b      	ldr	r3, [r7, #16]
 80045b2:	015a      	lsls	r2, r3, #5
 80045b4:	697b      	ldr	r3, [r7, #20]
 80045b6:	4413      	add	r3, r2
 80045b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	693a      	ldr	r2, [r7, #16]
 80045c0:	0151      	lsls	r1, r2, #5
 80045c2:	697a      	ldr	r2, [r7, #20]
 80045c4:	440a      	add	r2, r1
 80045c6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80045ca:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80045ce:	6013      	str	r3, [r2, #0]
 80045d0:	e092      	b.n	80046f8 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80045d2:	693b      	ldr	r3, [r7, #16]
 80045d4:	015a      	lsls	r2, r3, #5
 80045d6:	697b      	ldr	r3, [r7, #20]
 80045d8:	4413      	add	r3, r2
 80045da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	693a      	ldr	r2, [r7, #16]
 80045e2:	0151      	lsls	r1, r2, #5
 80045e4:	697a      	ldr	r2, [r7, #20]
 80045e6:	440a      	add	r2, r1
 80045e8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80045ec:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80045f0:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 80045f2:	68bb      	ldr	r3, [r7, #8]
 80045f4:	695b      	ldr	r3, [r3, #20]
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d07e      	beq.n	80046f8 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80045fa:	697b      	ldr	r3, [r7, #20]
 80045fc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004600:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004602:	68bb      	ldr	r3, [r7, #8]
 8004604:	781b      	ldrb	r3, [r3, #0]
 8004606:	f003 030f 	and.w	r3, r3, #15
 800460a:	2101      	movs	r1, #1
 800460c:	fa01 f303 	lsl.w	r3, r1, r3
 8004610:	6979      	ldr	r1, [r7, #20]
 8004612:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004616:	4313      	orrs	r3, r2
 8004618:	634b      	str	r3, [r1, #52]	; 0x34
 800461a:	e06d      	b.n	80046f8 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800461c:	693b      	ldr	r3, [r7, #16]
 800461e:	015a      	lsls	r2, r3, #5
 8004620:	697b      	ldr	r3, [r7, #20]
 8004622:	4413      	add	r3, r2
 8004624:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004628:	691b      	ldr	r3, [r3, #16]
 800462a:	693a      	ldr	r2, [r7, #16]
 800462c:	0151      	lsls	r1, r2, #5
 800462e:	697a      	ldr	r2, [r7, #20]
 8004630:	440a      	add	r2, r1
 8004632:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004636:	0cdb      	lsrs	r3, r3, #19
 8004638:	04db      	lsls	r3, r3, #19
 800463a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800463c:	693b      	ldr	r3, [r7, #16]
 800463e:	015a      	lsls	r2, r3, #5
 8004640:	697b      	ldr	r3, [r7, #20]
 8004642:	4413      	add	r3, r2
 8004644:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004648:	691b      	ldr	r3, [r3, #16]
 800464a:	693a      	ldr	r2, [r7, #16]
 800464c:	0151      	lsls	r1, r2, #5
 800464e:	697a      	ldr	r2, [r7, #20]
 8004650:	440a      	add	r2, r1
 8004652:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004656:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800465a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800465e:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8004660:	68bb      	ldr	r3, [r7, #8]
 8004662:	695b      	ldr	r3, [r3, #20]
 8004664:	2b00      	cmp	r3, #0
 8004666:	d003      	beq.n	8004670 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 8004668:	68bb      	ldr	r3, [r7, #8]
 800466a:	689a      	ldr	r2, [r3, #8]
 800466c:	68bb      	ldr	r3, [r7, #8]
 800466e:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004670:	693b      	ldr	r3, [r7, #16]
 8004672:	015a      	lsls	r2, r3, #5
 8004674:	697b      	ldr	r3, [r7, #20]
 8004676:	4413      	add	r3, r2
 8004678:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800467c:	691b      	ldr	r3, [r3, #16]
 800467e:	693a      	ldr	r2, [r7, #16]
 8004680:	0151      	lsls	r1, r2, #5
 8004682:	697a      	ldr	r2, [r7, #20]
 8004684:	440a      	add	r2, r1
 8004686:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800468a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800468e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8004690:	693b      	ldr	r3, [r7, #16]
 8004692:	015a      	lsls	r2, r3, #5
 8004694:	697b      	ldr	r3, [r7, #20]
 8004696:	4413      	add	r3, r2
 8004698:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800469c:	691a      	ldr	r2, [r3, #16]
 800469e:	68bb      	ldr	r3, [r7, #8]
 80046a0:	689b      	ldr	r3, [r3, #8]
 80046a2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80046a6:	6939      	ldr	r1, [r7, #16]
 80046a8:	0148      	lsls	r0, r1, #5
 80046aa:	6979      	ldr	r1, [r7, #20]
 80046ac:	4401      	add	r1, r0
 80046ae:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80046b2:	4313      	orrs	r3, r2
 80046b4:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 80046b6:	79fb      	ldrb	r3, [r7, #7]
 80046b8:	2b01      	cmp	r3, #1
 80046ba:	d10d      	bne.n	80046d8 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80046bc:	68bb      	ldr	r3, [r7, #8]
 80046be:	68db      	ldr	r3, [r3, #12]
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d009      	beq.n	80046d8 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80046c4:	68bb      	ldr	r3, [r7, #8]
 80046c6:	68d9      	ldr	r1, [r3, #12]
 80046c8:	693b      	ldr	r3, [r7, #16]
 80046ca:	015a      	lsls	r2, r3, #5
 80046cc:	697b      	ldr	r3, [r7, #20]
 80046ce:	4413      	add	r3, r2
 80046d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80046d4:	460a      	mov	r2, r1
 80046d6:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80046d8:	693b      	ldr	r3, [r7, #16]
 80046da:	015a      	lsls	r2, r3, #5
 80046dc:	697b      	ldr	r3, [r7, #20]
 80046de:	4413      	add	r3, r2
 80046e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	693a      	ldr	r2, [r7, #16]
 80046e8:	0151      	lsls	r1, r2, #5
 80046ea:	697a      	ldr	r2, [r7, #20]
 80046ec:	440a      	add	r2, r1
 80046ee:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80046f2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80046f6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80046f8:	2300      	movs	r3, #0
}
 80046fa:	4618      	mov	r0, r3
 80046fc:	371c      	adds	r7, #28
 80046fe:	46bd      	mov	sp, r7
 8004700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004704:	4770      	bx	lr

08004706 <USB_WritePacket>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src, uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8004706:	b480      	push	{r7}
 8004708:	b089      	sub	sp, #36	; 0x24
 800470a:	af00      	add	r7, sp, #0
 800470c:	60f8      	str	r0, [r7, #12]
 800470e:	60b9      	str	r1, [r7, #8]
 8004710:	4611      	mov	r1, r2
 8004712:	461a      	mov	r2, r3
 8004714:	460b      	mov	r3, r1
 8004716:	71fb      	strb	r3, [r7, #7]
 8004718:	4613      	mov	r3, r2
 800471a:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 8004720:	68bb      	ldr	r3, [r7, #8]
 8004722:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 8004724:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004728:	2b00      	cmp	r3, #0
 800472a:	d11a      	bne.n	8004762 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800472c:	88bb      	ldrh	r3, [r7, #4]
 800472e:	3303      	adds	r3, #3
 8004730:	089b      	lsrs	r3, r3, #2
 8004732:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8004734:	2300      	movs	r3, #0
 8004736:	61bb      	str	r3, [r7, #24]
 8004738:	e00f      	b.n	800475a <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800473a:	79fb      	ldrb	r3, [r7, #7]
 800473c:	031a      	lsls	r2, r3, #12
 800473e:	697b      	ldr	r3, [r7, #20]
 8004740:	4413      	add	r3, r2
 8004742:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004746:	461a      	mov	r2, r3
 8004748:	69fb      	ldr	r3, [r7, #28]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	6013      	str	r3, [r2, #0]
      pSrc++;
 800474e:	69fb      	ldr	r3, [r7, #28]
 8004750:	3304      	adds	r3, #4
 8004752:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8004754:	69bb      	ldr	r3, [r7, #24]
 8004756:	3301      	adds	r3, #1
 8004758:	61bb      	str	r3, [r7, #24]
 800475a:	69ba      	ldr	r2, [r7, #24]
 800475c:	693b      	ldr	r3, [r7, #16]
 800475e:	429a      	cmp	r2, r3
 8004760:	d3eb      	bcc.n	800473a <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8004762:	2300      	movs	r3, #0
}
 8004764:	4618      	mov	r0, r3
 8004766:	3724      	adds	r7, #36	; 0x24
 8004768:	46bd      	mov	sp, r7
 800476a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800476e:	4770      	bx	lr

08004770 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8004770:	b480      	push	{r7}
 8004772:	b089      	sub	sp, #36	; 0x24
 8004774:	af00      	add	r7, sp, #0
 8004776:	60f8      	str	r0, [r7, #12]
 8004778:	60b9      	str	r1, [r7, #8]
 800477a:	4613      	mov	r3, r2
 800477c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 8004782:	68bb      	ldr	r3, [r7, #8]
 8004784:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8004786:	88fb      	ldrh	r3, [r7, #6]
 8004788:	3303      	adds	r3, #3
 800478a:	089b      	lsrs	r3, r3, #2
 800478c:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 800478e:	2300      	movs	r3, #0
 8004790:	61bb      	str	r3, [r7, #24]
 8004792:	e00b      	b.n	80047ac <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8004794:	697b      	ldr	r3, [r7, #20]
 8004796:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800479a:	681a      	ldr	r2, [r3, #0]
 800479c:	69fb      	ldr	r3, [r7, #28]
 800479e:	601a      	str	r2, [r3, #0]
    pDest++;
 80047a0:	69fb      	ldr	r3, [r7, #28]
 80047a2:	3304      	adds	r3, #4
 80047a4:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 80047a6:	69bb      	ldr	r3, [r7, #24]
 80047a8:	3301      	adds	r3, #1
 80047aa:	61bb      	str	r3, [r7, #24]
 80047ac:	69ba      	ldr	r2, [r7, #24]
 80047ae:	693b      	ldr	r3, [r7, #16]
 80047b0:	429a      	cmp	r2, r3
 80047b2:	d3ef      	bcc.n	8004794 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 80047b4:	69fb      	ldr	r3, [r7, #28]
}
 80047b6:	4618      	mov	r0, r3
 80047b8:	3724      	adds	r7, #36	; 0x24
 80047ba:	46bd      	mov	sp, r7
 80047bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c0:	4770      	bx	lr

080047c2 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80047c2:	b480      	push	{r7}
 80047c4:	b085      	sub	sp, #20
 80047c6:	af00      	add	r7, sp, #0
 80047c8:	6078      	str	r0, [r7, #4]
 80047ca:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80047d0:	683b      	ldr	r3, [r7, #0]
 80047d2:	781b      	ldrb	r3, [r3, #0]
 80047d4:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80047d6:	683b      	ldr	r3, [r7, #0]
 80047d8:	785b      	ldrb	r3, [r3, #1]
 80047da:	2b01      	cmp	r3, #1
 80047dc:	d12c      	bne.n	8004838 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80047de:	68bb      	ldr	r3, [r7, #8]
 80047e0:	015a      	lsls	r2, r3, #5
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	4413      	add	r3, r2
 80047e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	db12      	blt.n	8004816 <USB_EPSetStall+0x54>
 80047f0:	68bb      	ldr	r3, [r7, #8]
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d00f      	beq.n	8004816 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80047f6:	68bb      	ldr	r3, [r7, #8]
 80047f8:	015a      	lsls	r2, r3, #5
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	4413      	add	r3, r2
 80047fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	68ba      	ldr	r2, [r7, #8]
 8004806:	0151      	lsls	r1, r2, #5
 8004808:	68fa      	ldr	r2, [r7, #12]
 800480a:	440a      	add	r2, r1
 800480c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004810:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004814:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8004816:	68bb      	ldr	r3, [r7, #8]
 8004818:	015a      	lsls	r2, r3, #5
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	4413      	add	r3, r2
 800481e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	68ba      	ldr	r2, [r7, #8]
 8004826:	0151      	lsls	r1, r2, #5
 8004828:	68fa      	ldr	r2, [r7, #12]
 800482a:	440a      	add	r2, r1
 800482c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004830:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004834:	6013      	str	r3, [r2, #0]
 8004836:	e02b      	b.n	8004890 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8004838:	68bb      	ldr	r3, [r7, #8]
 800483a:	015a      	lsls	r2, r3, #5
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	4413      	add	r3, r2
 8004840:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	2b00      	cmp	r3, #0
 8004848:	db12      	blt.n	8004870 <USB_EPSetStall+0xae>
 800484a:	68bb      	ldr	r3, [r7, #8]
 800484c:	2b00      	cmp	r3, #0
 800484e:	d00f      	beq.n	8004870 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8004850:	68bb      	ldr	r3, [r7, #8]
 8004852:	015a      	lsls	r2, r3, #5
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	4413      	add	r3, r2
 8004858:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	68ba      	ldr	r2, [r7, #8]
 8004860:	0151      	lsls	r1, r2, #5
 8004862:	68fa      	ldr	r2, [r7, #12]
 8004864:	440a      	add	r2, r1
 8004866:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800486a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800486e:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8004870:	68bb      	ldr	r3, [r7, #8]
 8004872:	015a      	lsls	r2, r3, #5
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	4413      	add	r3, r2
 8004878:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	68ba      	ldr	r2, [r7, #8]
 8004880:	0151      	lsls	r1, r2, #5
 8004882:	68fa      	ldr	r2, [r7, #12]
 8004884:	440a      	add	r2, r1
 8004886:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800488a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800488e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004890:	2300      	movs	r3, #0
}
 8004892:	4618      	mov	r0, r3
 8004894:	3714      	adds	r7, #20
 8004896:	46bd      	mov	sp, r7
 8004898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800489c:	4770      	bx	lr

0800489e <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800489e:	b480      	push	{r7}
 80048a0:	b085      	sub	sp, #20
 80048a2:	af00      	add	r7, sp, #0
 80048a4:	6078      	str	r0, [r7, #4]
 80048a6:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80048ac:	683b      	ldr	r3, [r7, #0]
 80048ae:	781b      	ldrb	r3, [r3, #0]
 80048b0:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80048b2:	683b      	ldr	r3, [r7, #0]
 80048b4:	785b      	ldrb	r3, [r3, #1]
 80048b6:	2b01      	cmp	r3, #1
 80048b8:	d128      	bne.n	800490c <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80048ba:	68bb      	ldr	r3, [r7, #8]
 80048bc:	015a      	lsls	r2, r3, #5
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	4413      	add	r3, r2
 80048c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	68ba      	ldr	r2, [r7, #8]
 80048ca:	0151      	lsls	r1, r2, #5
 80048cc:	68fa      	ldr	r2, [r7, #12]
 80048ce:	440a      	add	r2, r1
 80048d0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80048d4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80048d8:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80048da:	683b      	ldr	r3, [r7, #0]
 80048dc:	78db      	ldrb	r3, [r3, #3]
 80048de:	2b03      	cmp	r3, #3
 80048e0:	d003      	beq.n	80048ea <USB_EPClearStall+0x4c>
 80048e2:	683b      	ldr	r3, [r7, #0]
 80048e4:	78db      	ldrb	r3, [r3, #3]
 80048e6:	2b02      	cmp	r3, #2
 80048e8:	d138      	bne.n	800495c <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80048ea:	68bb      	ldr	r3, [r7, #8]
 80048ec:	015a      	lsls	r2, r3, #5
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	4413      	add	r3, r2
 80048f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	68ba      	ldr	r2, [r7, #8]
 80048fa:	0151      	lsls	r1, r2, #5
 80048fc:	68fa      	ldr	r2, [r7, #12]
 80048fe:	440a      	add	r2, r1
 8004900:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004904:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004908:	6013      	str	r3, [r2, #0]
 800490a:	e027      	b.n	800495c <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800490c:	68bb      	ldr	r3, [r7, #8]
 800490e:	015a      	lsls	r2, r3, #5
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	4413      	add	r3, r2
 8004914:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	68ba      	ldr	r2, [r7, #8]
 800491c:	0151      	lsls	r1, r2, #5
 800491e:	68fa      	ldr	r2, [r7, #12]
 8004920:	440a      	add	r2, r1
 8004922:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004926:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800492a:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800492c:	683b      	ldr	r3, [r7, #0]
 800492e:	78db      	ldrb	r3, [r3, #3]
 8004930:	2b03      	cmp	r3, #3
 8004932:	d003      	beq.n	800493c <USB_EPClearStall+0x9e>
 8004934:	683b      	ldr	r3, [r7, #0]
 8004936:	78db      	ldrb	r3, [r3, #3]
 8004938:	2b02      	cmp	r3, #2
 800493a:	d10f      	bne.n	800495c <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800493c:	68bb      	ldr	r3, [r7, #8]
 800493e:	015a      	lsls	r2, r3, #5
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	4413      	add	r3, r2
 8004944:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	68ba      	ldr	r2, [r7, #8]
 800494c:	0151      	lsls	r1, r2, #5
 800494e:	68fa      	ldr	r2, [r7, #12]
 8004950:	440a      	add	r2, r1
 8004952:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004956:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800495a:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800495c:	2300      	movs	r3, #0
}
 800495e:	4618      	mov	r0, r3
 8004960:	3714      	adds	r7, #20
 8004962:	46bd      	mov	sp, r7
 8004964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004968:	4770      	bx	lr

0800496a <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800496a:	b480      	push	{r7}
 800496c:	b085      	sub	sp, #20
 800496e:	af00      	add	r7, sp, #0
 8004970:	6078      	str	r0, [r7, #4]
 8004972:	460b      	mov	r3, r1
 8004974:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	68fa      	ldr	r2, [r7, #12]
 8004984:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004988:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800498c:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004994:	681a      	ldr	r2, [r3, #0]
 8004996:	78fb      	ldrb	r3, [r7, #3]
 8004998:	011b      	lsls	r3, r3, #4
 800499a:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800499e:	68f9      	ldr	r1, [r7, #12]
 80049a0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80049a4:	4313      	orrs	r3, r2
 80049a6:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 80049a8:	2300      	movs	r3, #0
}
 80049aa:	4618      	mov	r0, r3
 80049ac:	3714      	adds	r7, #20
 80049ae:	46bd      	mov	sp, r7
 80049b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049b4:	4770      	bx	lr

080049b6 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80049b6:	b480      	push	{r7}
 80049b8:	b085      	sub	sp, #20
 80049ba:	af00      	add	r7, sp, #0
 80049bc:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	695b      	ldr	r3, [r3, #20]
 80049c2:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	699b      	ldr	r3, [r3, #24]
 80049c8:	68fa      	ldr	r2, [r7, #12]
 80049ca:	4013      	ands	r3, r2
 80049cc:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80049ce:	68fb      	ldr	r3, [r7, #12]
}
 80049d0:	4618      	mov	r0, r3
 80049d2:	3714      	adds	r7, #20
 80049d4:	46bd      	mov	sp, r7
 80049d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049da:	4770      	bx	lr

080049dc <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80049dc:	b480      	push	{r7}
 80049de:	b085      	sub	sp, #20
 80049e0:	af00      	add	r7, sp, #0
 80049e2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80049ee:	699b      	ldr	r3, [r3, #24]
 80049f0:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80049f8:	69db      	ldr	r3, [r3, #28]
 80049fa:	68ba      	ldr	r2, [r7, #8]
 80049fc:	4013      	ands	r3, r2
 80049fe:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8004a00:	68bb      	ldr	r3, [r7, #8]
 8004a02:	0c1b      	lsrs	r3, r3, #16
}
 8004a04:	4618      	mov	r0, r3
 8004a06:	3714      	adds	r7, #20
 8004a08:	46bd      	mov	sp, r7
 8004a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a0e:	4770      	bx	lr

08004a10 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8004a10:	b480      	push	{r7}
 8004a12:	b085      	sub	sp, #20
 8004a14:	af00      	add	r7, sp, #0
 8004a16:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a22:	699b      	ldr	r3, [r3, #24]
 8004a24:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a2c:	69db      	ldr	r3, [r3, #28]
 8004a2e:	68ba      	ldr	r2, [r7, #8]
 8004a30:	4013      	ands	r3, r2
 8004a32:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8004a34:	68bb      	ldr	r3, [r7, #8]
 8004a36:	b29b      	uxth	r3, r3
}
 8004a38:	4618      	mov	r0, r3
 8004a3a:	3714      	adds	r7, #20
 8004a3c:	46bd      	mov	sp, r7
 8004a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a42:	4770      	bx	lr

08004a44 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8004a44:	b480      	push	{r7}
 8004a46:	b085      	sub	sp, #20
 8004a48:	af00      	add	r7, sp, #0
 8004a4a:	6078      	str	r0, [r7, #4]
 8004a4c:	460b      	mov	r3, r1
 8004a4e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8004a54:	78fb      	ldrb	r3, [r7, #3]
 8004a56:	015a      	lsls	r2, r3, #5
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	4413      	add	r3, r2
 8004a5c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a60:	689b      	ldr	r3, [r3, #8]
 8004a62:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a6a:	695b      	ldr	r3, [r3, #20]
 8004a6c:	68ba      	ldr	r2, [r7, #8]
 8004a6e:	4013      	ands	r3, r2
 8004a70:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8004a72:	68bb      	ldr	r3, [r7, #8]
}
 8004a74:	4618      	mov	r0, r3
 8004a76:	3714      	adds	r7, #20
 8004a78:	46bd      	mov	sp, r7
 8004a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a7e:	4770      	bx	lr

08004a80 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8004a80:	b480      	push	{r7}
 8004a82:	b087      	sub	sp, #28
 8004a84:	af00      	add	r7, sp, #0
 8004a86:	6078      	str	r0, [r7, #4]
 8004a88:	460b      	mov	r3, r1
 8004a8a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 8004a90:	697b      	ldr	r3, [r7, #20]
 8004a92:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a96:	691b      	ldr	r3, [r3, #16]
 8004a98:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8004a9a:	697b      	ldr	r3, [r7, #20]
 8004a9c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004aa0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004aa2:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8004aa4:	78fb      	ldrb	r3, [r7, #3]
 8004aa6:	f003 030f 	and.w	r3, r3, #15
 8004aaa:	68fa      	ldr	r2, [r7, #12]
 8004aac:	fa22 f303 	lsr.w	r3, r2, r3
 8004ab0:	01db      	lsls	r3, r3, #7
 8004ab2:	b2db      	uxtb	r3, r3
 8004ab4:	693a      	ldr	r2, [r7, #16]
 8004ab6:	4313      	orrs	r3, r2
 8004ab8:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8004aba:	78fb      	ldrb	r3, [r7, #3]
 8004abc:	015a      	lsls	r2, r3, #5
 8004abe:	697b      	ldr	r3, [r7, #20]
 8004ac0:	4413      	add	r3, r2
 8004ac2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ac6:	689b      	ldr	r3, [r3, #8]
 8004ac8:	693a      	ldr	r2, [r7, #16]
 8004aca:	4013      	ands	r3, r2
 8004acc:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8004ace:	68bb      	ldr	r3, [r7, #8]
}
 8004ad0:	4618      	mov	r0, r3
 8004ad2:	371c      	adds	r7, #28
 8004ad4:	46bd      	mov	sp, r7
 8004ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ada:	4770      	bx	lr

08004adc <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8004adc:	b480      	push	{r7}
 8004ade:	b083      	sub	sp, #12
 8004ae0:	af00      	add	r7, sp, #0
 8004ae2:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	695b      	ldr	r3, [r3, #20]
 8004ae8:	f003 0301 	and.w	r3, r3, #1
}
 8004aec:	4618      	mov	r0, r3
 8004aee:	370c      	adds	r7, #12
 8004af0:	46bd      	mov	sp, r7
 8004af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004af6:	4770      	bx	lr

08004af8 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8004af8:	b480      	push	{r7}
 8004afa:	b085      	sub	sp, #20
 8004afc:	af00      	add	r7, sp, #0
 8004afe:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP based on the enumeration speed */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	68fa      	ldr	r2, [r7, #12]
 8004b0e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004b12:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8004b16:	f023 0307 	bic.w	r3, r3, #7
 8004b1a:	6013      	str	r3, [r2, #0]

  if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD) == DSTS_ENUMSPD_LS_PHY_6MHZ)
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b22:	689b      	ldr	r3, [r3, #8]
 8004b24:	f003 0306 	and.w	r3, r3, #6
 8004b28:	2b04      	cmp	r3, #4
 8004b2a:	d109      	bne.n	8004b40 <USB_ActivateSetup+0x48>
  {
    USBx_INEP(0U)->DIEPCTL |= 3U;
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	68fa      	ldr	r2, [r7, #12]
 8004b36:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004b3a:	f043 0303 	orr.w	r3, r3, #3
 8004b3e:	6013      	str	r3, [r2, #0]
  }
  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b46:	685b      	ldr	r3, [r3, #4]
 8004b48:	68fa      	ldr	r2, [r7, #12]
 8004b4a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004b4e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004b52:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004b54:	2300      	movs	r3, #0
}
 8004b56:	4618      	mov	r0, r3
 8004b58:	3714      	adds	r7, #20
 8004b5a:	46bd      	mov	sp, r7
 8004b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b60:	4770      	bx	lr
	...

08004b64 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8004b64:	b480      	push	{r7}
 8004b66:	b087      	sub	sp, #28
 8004b68:	af00      	add	r7, sp, #0
 8004b6a:	60f8      	str	r0, [r7, #12]
 8004b6c:	460b      	mov	r3, r1
 8004b6e:	607a      	str	r2, [r7, #4]
 8004b70:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	333c      	adds	r3, #60	; 0x3c
 8004b7a:	3304      	adds	r3, #4
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8004b80:	693b      	ldr	r3, [r7, #16]
 8004b82:	4a26      	ldr	r2, [pc, #152]	; (8004c1c <USB_EP0_OutStart+0xb8>)
 8004b84:	4293      	cmp	r3, r2
 8004b86:	d90a      	bls.n	8004b9e <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004b88:	697b      	ldr	r3, [r7, #20]
 8004b8a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004b94:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004b98:	d101      	bne.n	8004b9e <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8004b9a:	2300      	movs	r3, #0
 8004b9c:	e037      	b.n	8004c0e <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8004b9e:	697b      	ldr	r3, [r7, #20]
 8004ba0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ba4:	461a      	mov	r2, r3
 8004ba6:	2300      	movs	r3, #0
 8004ba8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004baa:	697b      	ldr	r3, [r7, #20]
 8004bac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004bb0:	691b      	ldr	r3, [r3, #16]
 8004bb2:	697a      	ldr	r2, [r7, #20]
 8004bb4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004bb8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004bbc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8004bbe:	697b      	ldr	r3, [r7, #20]
 8004bc0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004bc4:	691b      	ldr	r3, [r3, #16]
 8004bc6:	697a      	ldr	r2, [r7, #20]
 8004bc8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004bcc:	f043 0318 	orr.w	r3, r3, #24
 8004bd0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8004bd2:	697b      	ldr	r3, [r7, #20]
 8004bd4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004bd8:	691b      	ldr	r3, [r3, #16]
 8004bda:	697a      	ldr	r2, [r7, #20]
 8004bdc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004be0:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8004be4:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8004be6:	7afb      	ldrb	r3, [r7, #11]
 8004be8:	2b01      	cmp	r3, #1
 8004bea:	d10f      	bne.n	8004c0c <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8004bec:	697b      	ldr	r3, [r7, #20]
 8004bee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004bf2:	461a      	mov	r2, r3
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8004bf8:	697b      	ldr	r3, [r7, #20]
 8004bfa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	697a      	ldr	r2, [r7, #20]
 8004c02:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004c06:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8004c0a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004c0c:	2300      	movs	r3, #0
}
 8004c0e:	4618      	mov	r0, r3
 8004c10:	371c      	adds	r7, #28
 8004c12:	46bd      	mov	sp, r7
 8004c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c18:	4770      	bx	lr
 8004c1a:	bf00      	nop
 8004c1c:	4f54300a 	.word	0x4f54300a

08004c20 <HAL_ETH_RxCpltCallback>:
  * @brief  Ethernet Rx Transfer completed callback
  * @param  heth: ETH handle
  * @retval None
  */
void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *heth)
{
 8004c20:	b580      	push	{r7, lr}
 8004c22:	b082      	sub	sp, #8
 8004c24:	af00      	add	r7, sp, #0
 8004c26:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(s_xSemaphore);
 8004c28:	4b04      	ldr	r3, [pc, #16]	; (8004c3c <HAL_ETH_RxCpltCallback+0x1c>)
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	4618      	mov	r0, r3
 8004c2e:	f001 f8d9 	bl	8005de4 <osSemaphoreRelease>
}
 8004c32:	bf00      	nop
 8004c34:	3708      	adds	r7, #8
 8004c36:	46bd      	mov	sp, r7
 8004c38:	bd80      	pop	{r7, pc}
 8004c3a:	bf00      	nop
 8004c3c:	20000028 	.word	0x20000028

08004c40 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode (USBD_HandleTypeDef  *pdev)
{
 8004c40:	b480      	push	{r7}
 8004c42:	b083      	sub	sp, #12
 8004c44:	af00      	add	r7, sp, #0
 8004c46:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8004c48:	2300      	movs	r3, #0
}
 8004c4a:	4618      	mov	r0, r3
 8004c4c:	370c      	adds	r7, #12
 8004c4e:	46bd      	mov	sp, r7
 8004c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c54:	4770      	bx	lr

08004c56 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8004c56:	b580      	push	{r7, lr}
 8004c58:	b084      	sub	sp, #16
 8004c5a:	af00      	add	r7, sp, #0
 8004c5c:	6078      	str	r0, [r7, #4]
 8004c5e:	460b      	mov	r3, r1
 8004c60:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef   ret = USBD_FAIL;
 8004c62:	2302      	movs	r3, #2
 8004c64:	73fb      	strb	r3, [r7, #15]

  if(pdev->pClass != NULL)
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d00c      	beq.n	8004c8a <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if(pdev->pClass->Init(pdev, cfgidx) == 0U)
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	78fa      	ldrb	r2, [r7, #3]
 8004c7a:	4611      	mov	r1, r2
 8004c7c:	6878      	ldr	r0, [r7, #4]
 8004c7e:	4798      	blx	r3
 8004c80:	4603      	mov	r3, r0
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d101      	bne.n	8004c8a <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8004c86:	2300      	movs	r3, #0
 8004c88:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8004c8a:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c8c:	4618      	mov	r0, r3
 8004c8e:	3710      	adds	r7, #16
 8004c90:	46bd      	mov	sp, r7
 8004c92:	bd80      	pop	{r7, pc}

08004c94 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8004c94:	b580      	push	{r7, lr}
 8004c96:	b082      	sub	sp, #8
 8004c98:	af00      	add	r7, sp, #0
 8004c9a:	6078      	str	r0, [r7, #4]
 8004c9c:	460b      	mov	r3, r1
 8004c9e:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8004ca6:	685b      	ldr	r3, [r3, #4]
 8004ca8:	78fa      	ldrb	r2, [r7, #3]
 8004caa:	4611      	mov	r1, r2
 8004cac:	6878      	ldr	r0, [r7, #4]
 8004cae:	4798      	blx	r3
  return USBD_OK;
 8004cb0:	2300      	movs	r3, #0
}
 8004cb2:	4618      	mov	r0, r3
 8004cb4:	3708      	adds	r7, #8
 8004cb6:	46bd      	mov	sp, r7
 8004cb8:	bd80      	pop	{r7, pc}

08004cba <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8004cba:	b580      	push	{r7, lr}
 8004cbc:	b082      	sub	sp, #8
 8004cbe:	af00      	add	r7, sp, #0
 8004cc0:	6078      	str	r0, [r7, #4]
 8004cc2:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8004cca:	6839      	ldr	r1, [r7, #0]
 8004ccc:	4618      	mov	r0, r3
 8004cce:	f000 fe95 	bl	80059fc <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	2201      	movs	r2, #1
 8004cd6:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

  pdev->ep0_data_len = pdev->request.wLength;
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	f8b3 3286 	ldrh.w	r3, [r3, #646]	; 0x286
 8004ce0:	461a      	mov	r2, r3
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

  switch (pdev->request.bmRequest & 0x1FU)
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	f893 3280 	ldrb.w	r3, [r3, #640]	; 0x280
 8004cee:	f003 031f 	and.w	r3, r3, #31
 8004cf2:	2b01      	cmp	r3, #1
 8004cf4:	d00c      	beq.n	8004d10 <USBD_LL_SetupStage+0x56>
 8004cf6:	2b01      	cmp	r3, #1
 8004cf8:	d302      	bcc.n	8004d00 <USBD_LL_SetupStage+0x46>
 8004cfa:	2b02      	cmp	r3, #2
 8004cfc:	d010      	beq.n	8004d20 <USBD_LL_SetupStage+0x66>
 8004cfe:	e017      	b.n	8004d30 <USBD_LL_SetupStage+0x76>
  {
  case USB_REQ_RECIPIENT_DEVICE:
    USBD_StdDevReq (pdev, &pdev->request);
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8004d06:	4619      	mov	r1, r3
 8004d08:	6878      	ldr	r0, [r7, #4]
 8004d0a:	f000 fa05 	bl	8005118 <USBD_StdDevReq>
    break;
 8004d0e:	e01a      	b.n	8004d46 <USBD_LL_SetupStage+0x8c>

  case USB_REQ_RECIPIENT_INTERFACE:
    USBD_StdItfReq(pdev, &pdev->request);
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8004d16:	4619      	mov	r1, r3
 8004d18:	6878      	ldr	r0, [r7, #4]
 8004d1a:	f000 fa67 	bl	80051ec <USBD_StdItfReq>
    break;
 8004d1e:	e012      	b.n	8004d46 <USBD_LL_SetupStage+0x8c>

  case USB_REQ_RECIPIENT_ENDPOINT:
    USBD_StdEPReq(pdev, &pdev->request);
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8004d26:	4619      	mov	r1, r3
 8004d28:	6878      	ldr	r0, [r7, #4]
 8004d2a:	f000 faa5 	bl	8005278 <USBD_StdEPReq>
    break;
 8004d2e:	e00a      	b.n	8004d46 <USBD_LL_SetupStage+0x8c>

  default:
    USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	f893 3280 	ldrb.w	r3, [r3, #640]	; 0x280
 8004d36:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8004d3a:	b2db      	uxtb	r3, r3
 8004d3c:	4619      	mov	r1, r3
 8004d3e:	6878      	ldr	r0, [r7, #4]
 8004d40:	f003 fe0c 	bl	800895c <USBD_LL_StallEP>
    break;
 8004d44:	bf00      	nop
  }

  return USBD_OK;
 8004d46:	2300      	movs	r3, #0
}
 8004d48:	4618      	mov	r0, r3
 8004d4a:	3708      	adds	r7, #8
 8004d4c:	46bd      	mov	sp, r7
 8004d4e:	bd80      	pop	{r7, pc}

08004d50 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8004d50:	b580      	push	{r7, lr}
 8004d52:	b086      	sub	sp, #24
 8004d54:	af00      	add	r7, sp, #0
 8004d56:	60f8      	str	r0, [r7, #12]
 8004d58:	460b      	mov	r3, r1
 8004d5a:	607a      	str	r2, [r7, #4]
 8004d5c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef    *pep;

  if(epnum == 0U)
 8004d5e:	7afb      	ldrb	r3, [r7, #11]
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d14b      	bne.n	8004dfc <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8004d6a:	617b      	str	r3, [r7, #20]

    if ( pdev->ep0_state == USBD_EP0_DATA_OUT)
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 8004d72:	2b03      	cmp	r3, #3
 8004d74:	d134      	bne.n	8004de0 <USBD_LL_DataOutStage+0x90>
    {
      if(pep->rem_length > pep->maxpacket)
 8004d76:	697b      	ldr	r3, [r7, #20]
 8004d78:	68da      	ldr	r2, [r3, #12]
 8004d7a:	697b      	ldr	r3, [r7, #20]
 8004d7c:	691b      	ldr	r3, [r3, #16]
 8004d7e:	429a      	cmp	r2, r3
 8004d80:	d919      	bls.n	8004db6 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -=  pep->maxpacket;
 8004d82:	697b      	ldr	r3, [r7, #20]
 8004d84:	68da      	ldr	r2, [r3, #12]
 8004d86:	697b      	ldr	r3, [r7, #20]
 8004d88:	691b      	ldr	r3, [r3, #16]
 8004d8a:	1ad2      	subs	r2, r2, r3
 8004d8c:	697b      	ldr	r3, [r7, #20]
 8004d8e:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx (pdev,
                            pdata,
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8004d90:	697b      	ldr	r3, [r7, #20]
 8004d92:	68da      	ldr	r2, [r3, #12]
 8004d94:	697b      	ldr	r3, [r7, #20]
 8004d96:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx (pdev,
 8004d98:	429a      	cmp	r2, r3
 8004d9a:	d203      	bcs.n	8004da4 <USBD_LL_DataOutStage+0x54>
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8004d9c:	697b      	ldr	r3, [r7, #20]
 8004d9e:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx (pdev,
 8004da0:	b29b      	uxth	r3, r3
 8004da2:	e002      	b.n	8004daa <USBD_LL_DataOutStage+0x5a>
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8004da4:	697b      	ldr	r3, [r7, #20]
 8004da6:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx (pdev,
 8004da8:	b29b      	uxth	r3, r3
 8004daa:	461a      	mov	r2, r3
 8004dac:	6879      	ldr	r1, [r7, #4]
 8004dae:	68f8      	ldr	r0, [r7, #12]
 8004db0:	f000 fea0 	bl	8005af4 <USBD_CtlContinueRx>
 8004db4:	e038      	b.n	8004e28 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if((pdev->pClass->EP0_RxReady != NULL)&&
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8004dbc:	691b      	ldr	r3, [r3, #16]
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d00a      	beq.n	8004dd8 <USBD_LL_DataOutStage+0x88>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
        if((pdev->pClass->EP0_RxReady != NULL)&&
 8004dc8:	2b03      	cmp	r3, #3
 8004dca:	d105      	bne.n	8004dd8 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8004dd2:	691b      	ldr	r3, [r3, #16]
 8004dd4:	68f8      	ldr	r0, [r7, #12]
 8004dd6:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8004dd8:	68f8      	ldr	r0, [r7, #12]
 8004dda:	f000 fe9d 	bl	8005b18 <USBD_CtlSendStatus>
 8004dde:	e023      	b.n	8004e28 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 8004de6:	2b05      	cmp	r3, #5
 8004de8:	d11e      	bne.n	8004e28 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	2200      	movs	r2, #0
 8004dee:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
        USBD_LL_StallEP(pdev, 0U);
 8004df2:	2100      	movs	r1, #0
 8004df4:	68f8      	ldr	r0, [r7, #12]
 8004df6:	f003 fdb1 	bl	800895c <USBD_LL_StallEP>
 8004dfa:	e015      	b.n	8004e28 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if((pdev->pClass->DataOut != NULL) &&
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8004e02:	699b      	ldr	r3, [r3, #24]
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d00d      	beq.n	8004e24 <USBD_LL_DataOutStage+0xd4>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
  else if((pdev->pClass->DataOut != NULL) &&
 8004e0e:	2b03      	cmp	r3, #3
 8004e10:	d108      	bne.n	8004e24 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8004e18:	699b      	ldr	r3, [r3, #24]
 8004e1a:	7afa      	ldrb	r2, [r7, #11]
 8004e1c:	4611      	mov	r1, r2
 8004e1e:	68f8      	ldr	r0, [r7, #12]
 8004e20:	4798      	blx	r3
 8004e22:	e001      	b.n	8004e28 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8004e24:	2302      	movs	r3, #2
 8004e26:	e000      	b.n	8004e2a <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8004e28:	2300      	movs	r3, #0
}
 8004e2a:	4618      	mov	r0, r3
 8004e2c:	3718      	adds	r7, #24
 8004e2e:	46bd      	mov	sp, r7
 8004e30:	bd80      	pop	{r7, pc}

08004e32 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev, uint8_t epnum,
                                       uint8_t *pdata)
{
 8004e32:	b580      	push	{r7, lr}
 8004e34:	b086      	sub	sp, #24
 8004e36:	af00      	add	r7, sp, #0
 8004e38:	60f8      	str	r0, [r7, #12]
 8004e3a:	460b      	mov	r3, r1
 8004e3c:	607a      	str	r2, [r7, #4]
 8004e3e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if(epnum == 0U)
 8004e40:	7afb      	ldrb	r3, [r7, #11]
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d17f      	bne.n	8004f46 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	3314      	adds	r3, #20
 8004e4a:	617b      	str	r3, [r7, #20]

    if ( pdev->ep0_state == USBD_EP0_DATA_IN)
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 8004e52:	2b02      	cmp	r3, #2
 8004e54:	d15c      	bne.n	8004f10 <USBD_LL_DataInStage+0xde>
    {
      if(pep->rem_length > pep->maxpacket)
 8004e56:	697b      	ldr	r3, [r7, #20]
 8004e58:	68da      	ldr	r2, [r3, #12]
 8004e5a:	697b      	ldr	r3, [r7, #20]
 8004e5c:	691b      	ldr	r3, [r3, #16]
 8004e5e:	429a      	cmp	r2, r3
 8004e60:	d915      	bls.n	8004e8e <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8004e62:	697b      	ldr	r3, [r7, #20]
 8004e64:	68da      	ldr	r2, [r3, #12]
 8004e66:	697b      	ldr	r3, [r7, #20]
 8004e68:	691b      	ldr	r3, [r3, #16]
 8004e6a:	1ad2      	subs	r2, r2, r3
 8004e6c:	697b      	ldr	r3, [r7, #20]
 8004e6e:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData (pdev, pdata, (uint16_t)pep->rem_length);
 8004e70:	697b      	ldr	r3, [r7, #20]
 8004e72:	68db      	ldr	r3, [r3, #12]
 8004e74:	b29b      	uxth	r3, r3
 8004e76:	461a      	mov	r2, r3
 8004e78:	6879      	ldr	r1, [r7, #4]
 8004e7a:	68f8      	ldr	r0, [r7, #12]
 8004e7c:	f000 fe28 	bl	8005ad0 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 8004e80:	2300      	movs	r3, #0
 8004e82:	2200      	movs	r2, #0
 8004e84:	2100      	movs	r1, #0
 8004e86:	68f8      	ldr	r0, [r7, #12]
 8004e88:	f003 fe14 	bl	8008ab4 <USBD_LL_PrepareReceive>
 8004e8c:	e04e      	b.n	8004f2c <USBD_LL_DataInStage+0xfa>
      }
      else
      { /* last packet is MPS multiple, so send ZLP packet */
        if((pep->total_length % pep->maxpacket == 0U) &&
 8004e8e:	697b      	ldr	r3, [r7, #20]
 8004e90:	689b      	ldr	r3, [r3, #8]
 8004e92:	697a      	ldr	r2, [r7, #20]
 8004e94:	6912      	ldr	r2, [r2, #16]
 8004e96:	fbb3 f1f2 	udiv	r1, r3, r2
 8004e9a:	fb02 f201 	mul.w	r2, r2, r1
 8004e9e:	1a9b      	subs	r3, r3, r2
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d11c      	bne.n	8004ede <USBD_LL_DataInStage+0xac>
           (pep->total_length >= pep->maxpacket) &&
 8004ea4:	697b      	ldr	r3, [r7, #20]
 8004ea6:	689a      	ldr	r2, [r3, #8]
 8004ea8:	697b      	ldr	r3, [r7, #20]
 8004eaa:	691b      	ldr	r3, [r3, #16]
        if((pep->total_length % pep->maxpacket == 0U) &&
 8004eac:	429a      	cmp	r2, r3
 8004eae:	d316      	bcc.n	8004ede <USBD_LL_DataInStage+0xac>
           (pep->total_length < pdev->ep0_data_len))
 8004eb0:	697b      	ldr	r3, [r7, #20]
 8004eb2:	689a      	ldr	r2, [r3, #8]
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
           (pep->total_length >= pep->maxpacket) &&
 8004eba:	429a      	cmp	r2, r3
 8004ebc:	d20f      	bcs.n	8004ede <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8004ebe:	2200      	movs	r2, #0
 8004ec0:	2100      	movs	r1, #0
 8004ec2:	68f8      	ldr	r0, [r7, #12]
 8004ec4:	f000 fe04 	bl	8005ad0 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	2200      	movs	r2, #0
 8004ecc:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 8004ed0:	2300      	movs	r3, #0
 8004ed2:	2200      	movs	r2, #0
 8004ed4:	2100      	movs	r1, #0
 8004ed6:	68f8      	ldr	r0, [r7, #12]
 8004ed8:	f003 fdec 	bl	8008ab4 <USBD_LL_PrepareReceive>
 8004edc:	e026      	b.n	8004f2c <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if((pdev->pClass->EP0_TxSent != NULL)&&
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8004ee4:	68db      	ldr	r3, [r3, #12]
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d00a      	beq.n	8004f00 <USBD_LL_DataInStage+0xce>
             (pdev->dev_state == USBD_STATE_CONFIGURED))
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
          if((pdev->pClass->EP0_TxSent != NULL)&&
 8004ef0:	2b03      	cmp	r3, #3
 8004ef2:	d105      	bne.n	8004f00 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8004efa:	68db      	ldr	r3, [r3, #12]
 8004efc:	68f8      	ldr	r0, [r7, #12]
 8004efe:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8004f00:	2180      	movs	r1, #128	; 0x80
 8004f02:	68f8      	ldr	r0, [r7, #12]
 8004f04:	f003 fd2a 	bl	800895c <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8004f08:	68f8      	ldr	r0, [r7, #12]
 8004f0a:	f000 fe18 	bl	8005b3e <USBD_CtlReceiveStatus>
 8004f0e:	e00d      	b.n	8004f2c <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 8004f16:	2b04      	cmp	r3, #4
 8004f18:	d004      	beq.n	8004f24 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d103      	bne.n	8004f2c <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8004f24:	2180      	movs	r1, #128	; 0x80
 8004f26:	68f8      	ldr	r0, [r7, #12]
 8004f28:	f003 fd18 	bl	800895c <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	f893 3278 	ldrb.w	r3, [r3, #632]	; 0x278
 8004f32:	2b01      	cmp	r3, #1
 8004f34:	d11d      	bne.n	8004f72 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8004f36:	68f8      	ldr	r0, [r7, #12]
 8004f38:	f7ff fe82 	bl	8004c40 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	2200      	movs	r2, #0
 8004f40:	f883 2278 	strb.w	r2, [r3, #632]	; 0x278
 8004f44:	e015      	b.n	8004f72 <USBD_LL_DataInStage+0x140>
    }
  }
  else if((pdev->pClass->DataIn != NULL) &&
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8004f4c:	695b      	ldr	r3, [r3, #20]
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d00d      	beq.n	8004f6e <USBD_LL_DataInStage+0x13c>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
  else if((pdev->pClass->DataIn != NULL) &&
 8004f58:	2b03      	cmp	r3, #3
 8004f5a:	d108      	bne.n	8004f6e <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8004f62:	695b      	ldr	r3, [r3, #20]
 8004f64:	7afa      	ldrb	r2, [r7, #11]
 8004f66:	4611      	mov	r1, r2
 8004f68:	68f8      	ldr	r0, [r7, #12]
 8004f6a:	4798      	blx	r3
 8004f6c:	e001      	b.n	8004f72 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8004f6e:	2302      	movs	r3, #2
 8004f70:	e000      	b.n	8004f74 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8004f72:	2300      	movs	r3, #0
}
 8004f74:	4618      	mov	r0, r3
 8004f76:	3718      	adds	r7, #24
 8004f78:	46bd      	mov	sp, r7
 8004f7a:	bd80      	pop	{r7, pc}

08004f7c <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef  *pdev)
{
 8004f7c:	b580      	push	{r7, lr}
 8004f7e:	b082      	sub	sp, #8
 8004f80:	af00      	add	r7, sp, #0
 8004f82:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8004f84:	2340      	movs	r3, #64	; 0x40
 8004f86:	2200      	movs	r2, #0
 8004f88:	2100      	movs	r1, #0
 8004f8a:	6878      	ldr	r0, [r7, #4]
 8004f8c:	f003 fcc0 	bl	8008910 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	2201      	movs	r2, #1
 8004f94:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	2240      	movs	r2, #64	; 0x40
 8004f9c:	f8c3 2150 	str.w	r2, [r3, #336]	; 0x150

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8004fa0:	2340      	movs	r3, #64	; 0x40
 8004fa2:	2200      	movs	r2, #0
 8004fa4:	2180      	movs	r1, #128	; 0x80
 8004fa6:	6878      	ldr	r0, [r7, #4]
 8004fa8:	f003 fcb2 	bl	8008910 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	2201      	movs	r2, #1
 8004fb0:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	2240      	movs	r2, #64	; 0x40
 8004fb6:	625a      	str	r2, [r3, #36]	; 0x24
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	2201      	movs	r2, #1
 8004fbc:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  pdev->ep0_state = USBD_EP0_IDLE;
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	2200      	movs	r2, #0
 8004fc4:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  pdev->dev_config= 0U;
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	2200      	movs	r2, #0
 8004fcc:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	2200      	movs	r2, #0
 8004fd2:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c

  if (pdev->pClassData)
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d009      	beq.n	8004ff4 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8004fe6:	685b      	ldr	r3, [r3, #4]
 8004fe8:	687a      	ldr	r2, [r7, #4]
 8004fea:	6852      	ldr	r2, [r2, #4]
 8004fec:	b2d2      	uxtb	r2, r2
 8004fee:	4611      	mov	r1, r2
 8004ff0:	6878      	ldr	r0, [r7, #4]
 8004ff2:	4798      	blx	r3
  }

  return USBD_OK;
 8004ff4:	2300      	movs	r3, #0
}
 8004ff6:	4618      	mov	r0, r3
 8004ff8:	3708      	adds	r7, #8
 8004ffa:	46bd      	mov	sp, r7
 8004ffc:	bd80      	pop	{r7, pc}

08004ffe <USBD_LL_SetSpeed>:
*         Handle Reset event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef  *pdev, USBD_SpeedTypeDef speed)
{
 8004ffe:	b480      	push	{r7}
 8005000:	b083      	sub	sp, #12
 8005002:	af00      	add	r7, sp, #0
 8005004:	6078      	str	r0, [r7, #4]
 8005006:	460b      	mov	r3, r1
 8005008:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	78fa      	ldrb	r2, [r7, #3]
 800500e:	741a      	strb	r2, [r3, #16]
  return USBD_OK;
 8005010:	2300      	movs	r3, #0
}
 8005012:	4618      	mov	r0, r3
 8005014:	370c      	adds	r7, #12
 8005016:	46bd      	mov	sp, r7
 8005018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800501c:	4770      	bx	lr

0800501e <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef  *pdev)
{
 800501e:	b480      	push	{r7}
 8005020:	b083      	sub	sp, #12
 8005022:	af00      	add	r7, sp, #0
 8005024:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	f893 2274 	ldrb.w	r2, [r3, #628]	; 0x274
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	f883 2275 	strb.w	r2, [r3, #629]	; 0x275
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	2204      	movs	r2, #4
 8005036:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  return USBD_OK;
 800503a:	2300      	movs	r3, #0
}
 800503c:	4618      	mov	r0, r3
 800503e:	370c      	adds	r7, #12
 8005040:	46bd      	mov	sp, r7
 8005042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005046:	4770      	bx	lr

08005048 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef  *pdev)
{
 8005048:	b480      	push	{r7}
 800504a:	b083      	sub	sp, #12
 800504c:	af00      	add	r7, sp, #0
 800504e:	6078      	str	r0, [r7, #4]
  pdev->dev_state = pdev->dev_old_state;
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	f893 2275 	ldrb.w	r2, [r3, #629]	; 0x275
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  return USBD_OK;
 800505c:	2300      	movs	r3, #0
}
 800505e:	4618      	mov	r0, r3
 8005060:	370c      	adds	r7, #12
 8005062:	46bd      	mov	sp, r7
 8005064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005068:	4770      	bx	lr

0800506a <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef  *pdev)
{
 800506a:	b580      	push	{r7, lr}
 800506c:	b082      	sub	sp, #8
 800506e:	af00      	add	r7, sp, #0
 8005070:	6078      	str	r0, [r7, #4]
  if(pdev->dev_state == USBD_STATE_CONFIGURED)
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8005078:	2b03      	cmp	r3, #3
 800507a:	d10b      	bne.n	8005094 <USBD_LL_SOF+0x2a>
  {
    if(pdev->pClass->SOF != NULL)
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8005082:	69db      	ldr	r3, [r3, #28]
 8005084:	2b00      	cmp	r3, #0
 8005086:	d005      	beq.n	8005094 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800508e:	69db      	ldr	r3, [r3, #28]
 8005090:	6878      	ldr	r0, [r7, #4]
 8005092:	4798      	blx	r3
    }
  }
  return USBD_OK;
 8005094:	2300      	movs	r3, #0
}
 8005096:	4618      	mov	r0, r3
 8005098:	3708      	adds	r7, #8
 800509a:	46bd      	mov	sp, r7
 800509c:	bd80      	pop	{r7, pc}

0800509e <USBD_LL_IsoINIncomplete>:
*         Handle iso in incomplete event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef  *pdev, uint8_t epnum)
{
 800509e:	b480      	push	{r7}
 80050a0:	b083      	sub	sp, #12
 80050a2:	af00      	add	r7, sp, #0
 80050a4:	6078      	str	r0, [r7, #4]
 80050a6:	460b      	mov	r3, r1
 80050a8:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 80050aa:	2300      	movs	r3, #0
}
 80050ac:	4618      	mov	r0, r3
 80050ae:	370c      	adds	r7, #12
 80050b0:	46bd      	mov	sp, r7
 80050b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050b6:	4770      	bx	lr

080050b8 <USBD_LL_IsoOUTIncomplete>:
*         Handle iso out incomplete event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef  *pdev, uint8_t epnum)
{
 80050b8:	b480      	push	{r7}
 80050ba:	b083      	sub	sp, #12
 80050bc:	af00      	add	r7, sp, #0
 80050be:	6078      	str	r0, [r7, #4]
 80050c0:	460b      	mov	r3, r1
 80050c2:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 80050c4:	2300      	movs	r3, #0
}
 80050c6:	4618      	mov	r0, r3
 80050c8:	370c      	adds	r7, #12
 80050ca:	46bd      	mov	sp, r7
 80050cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050d0:	4770      	bx	lr

080050d2 <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef  *pdev)
{
 80050d2:	b480      	push	{r7}
 80050d4:	b083      	sub	sp, #12
 80050d6:	af00      	add	r7, sp, #0
 80050d8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80050da:	2300      	movs	r3, #0
}
 80050dc:	4618      	mov	r0, r3
 80050de:	370c      	adds	r7, #12
 80050e0:	46bd      	mov	sp, r7
 80050e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050e6:	4770      	bx	lr

080050e8 <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef  *pdev)
{
 80050e8:	b580      	push	{r7, lr}
 80050ea:	b082      	sub	sp, #8
 80050ec:	af00      	add	r7, sp, #0
 80050ee:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	2201      	movs	r2, #1
 80050f4:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80050fe:	685b      	ldr	r3, [r3, #4]
 8005100:	687a      	ldr	r2, [r7, #4]
 8005102:	6852      	ldr	r2, [r2, #4]
 8005104:	b2d2      	uxtb	r2, r2
 8005106:	4611      	mov	r1, r2
 8005108:	6878      	ldr	r0, [r7, #4]
 800510a:	4798      	blx	r3

  return USBD_OK;
 800510c:	2300      	movs	r3, #0
}
 800510e:	4618      	mov	r0, r3
 8005110:	3708      	adds	r7, #8
 8005112:	46bd      	mov	sp, r7
 8005114:	bd80      	pop	{r7, pc}
	...

08005118 <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 8005118:	b580      	push	{r7, lr}
 800511a:	b084      	sub	sp, #16
 800511c:	af00      	add	r7, sp, #0
 800511e:	6078      	str	r0, [r7, #4]
 8005120:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8005122:	2300      	movs	r3, #0
 8005124:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005126:	683b      	ldr	r3, [r7, #0]
 8005128:	781b      	ldrb	r3, [r3, #0]
 800512a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800512e:	2b20      	cmp	r3, #32
 8005130:	d004      	beq.n	800513c <USBD_StdDevReq+0x24>
 8005132:	2b40      	cmp	r3, #64	; 0x40
 8005134:	d002      	beq.n	800513c <USBD_StdDevReq+0x24>
 8005136:	2b00      	cmp	r3, #0
 8005138:	d008      	beq.n	800514c <USBD_StdDevReq+0x34>
 800513a:	e04c      	b.n	80051d6 <USBD_StdDevReq+0xbe>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    pdev->pClass->Setup(pdev, req);
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8005142:	689b      	ldr	r3, [r3, #8]
 8005144:	6839      	ldr	r1, [r7, #0]
 8005146:	6878      	ldr	r0, [r7, #4]
 8005148:	4798      	blx	r3
    break;
 800514a:	e049      	b.n	80051e0 <USBD_StdDevReq+0xc8>

  case USB_REQ_TYPE_STANDARD:

    switch (req->bRequest)
 800514c:	683b      	ldr	r3, [r7, #0]
 800514e:	785b      	ldrb	r3, [r3, #1]
 8005150:	2b09      	cmp	r3, #9
 8005152:	d83a      	bhi.n	80051ca <USBD_StdDevReq+0xb2>
 8005154:	a201      	add	r2, pc, #4	; (adr r2, 800515c <USBD_StdDevReq+0x44>)
 8005156:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800515a:	bf00      	nop
 800515c:	080051ad 	.word	0x080051ad
 8005160:	080051c1 	.word	0x080051c1
 8005164:	080051cb 	.word	0x080051cb
 8005168:	080051b7 	.word	0x080051b7
 800516c:	080051cb 	.word	0x080051cb
 8005170:	0800518f 	.word	0x0800518f
 8005174:	08005185 	.word	0x08005185
 8005178:	080051cb 	.word	0x080051cb
 800517c:	080051a3 	.word	0x080051a3
 8005180:	08005199 	.word	0x08005199
    {
    case USB_REQ_GET_DESCRIPTOR:

      USBD_GetDescriptor (pdev, req);
 8005184:	6839      	ldr	r1, [r7, #0]
 8005186:	6878      	ldr	r0, [r7, #4]
 8005188:	f000 f9d2 	bl	8005530 <USBD_GetDescriptor>
      break;
 800518c:	e022      	b.n	80051d4 <USBD_StdDevReq+0xbc>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress (pdev, req);
 800518e:	6839      	ldr	r1, [r7, #0]
 8005190:	6878      	ldr	r0, [r7, #4]
 8005192:	f000 fac7 	bl	8005724 <USBD_SetAddress>
      break;
 8005196:	e01d      	b.n	80051d4 <USBD_StdDevReq+0xbc>

    case USB_REQ_SET_CONFIGURATION:
      USBD_SetConfig (pdev, req);
 8005198:	6839      	ldr	r1, [r7, #0]
 800519a:	6878      	ldr	r0, [r7, #4]
 800519c:	f000 fb04 	bl	80057a8 <USBD_SetConfig>
      break;
 80051a0:	e018      	b.n	80051d4 <USBD_StdDevReq+0xbc>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig (pdev, req);
 80051a2:	6839      	ldr	r1, [r7, #0]
 80051a4:	6878      	ldr	r0, [r7, #4]
 80051a6:	f000 fb8d 	bl	80058c4 <USBD_GetConfig>
      break;
 80051aa:	e013      	b.n	80051d4 <USBD_StdDevReq+0xbc>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus (pdev, req);
 80051ac:	6839      	ldr	r1, [r7, #0]
 80051ae:	6878      	ldr	r0, [r7, #4]
 80051b0:	f000 fbbc 	bl	800592c <USBD_GetStatus>
      break;
 80051b4:	e00e      	b.n	80051d4 <USBD_StdDevReq+0xbc>


    case USB_REQ_SET_FEATURE:
      USBD_SetFeature (pdev, req);
 80051b6:	6839      	ldr	r1, [r7, #0]
 80051b8:	6878      	ldr	r0, [r7, #4]
 80051ba:	f000 fbea 	bl	8005992 <USBD_SetFeature>
      break;
 80051be:	e009      	b.n	80051d4 <USBD_StdDevReq+0xbc>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature (pdev, req);
 80051c0:	6839      	ldr	r1, [r7, #0]
 80051c2:	6878      	ldr	r0, [r7, #4]
 80051c4:	f000 fbf9 	bl	80059ba <USBD_ClrFeature>
      break;
 80051c8:	e004      	b.n	80051d4 <USBD_StdDevReq+0xbc>

    default:
      USBD_CtlError(pdev, req);
 80051ca:	6839      	ldr	r1, [r7, #0]
 80051cc:	6878      	ldr	r0, [r7, #4]
 80051ce:	f000 fc52 	bl	8005a76 <USBD_CtlError>
      break;
 80051d2:	bf00      	nop
    }
    break;
 80051d4:	e004      	b.n	80051e0 <USBD_StdDevReq+0xc8>

  default:
    USBD_CtlError(pdev, req);
 80051d6:	6839      	ldr	r1, [r7, #0]
 80051d8:	6878      	ldr	r0, [r7, #4]
 80051da:	f000 fc4c 	bl	8005a76 <USBD_CtlError>
    break;
 80051de:	bf00      	nop
  }

  return ret;
 80051e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80051e2:	4618      	mov	r0, r3
 80051e4:	3710      	adds	r7, #16
 80051e6:	46bd      	mov	sp, r7
 80051e8:	bd80      	pop	{r7, pc}
 80051ea:	bf00      	nop

080051ec <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 80051ec:	b580      	push	{r7, lr}
 80051ee:	b084      	sub	sp, #16
 80051f0:	af00      	add	r7, sp, #0
 80051f2:	6078      	str	r0, [r7, #4]
 80051f4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80051f6:	2300      	movs	r3, #0
 80051f8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80051fa:	683b      	ldr	r3, [r7, #0]
 80051fc:	781b      	ldrb	r3, [r3, #0]
 80051fe:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005202:	2b20      	cmp	r3, #32
 8005204:	d003      	beq.n	800520e <USBD_StdItfReq+0x22>
 8005206:	2b40      	cmp	r3, #64	; 0x40
 8005208:	d001      	beq.n	800520e <USBD_StdItfReq+0x22>
 800520a:	2b00      	cmp	r3, #0
 800520c:	d12a      	bne.n	8005264 <USBD_StdItfReq+0x78>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8005214:	3b01      	subs	r3, #1
 8005216:	2b02      	cmp	r3, #2
 8005218:	d81d      	bhi.n	8005256 <USBD_StdItfReq+0x6a>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800521a:	683b      	ldr	r3, [r7, #0]
 800521c:	889b      	ldrh	r3, [r3, #4]
 800521e:	b2db      	uxtb	r3, r3
 8005220:	2b01      	cmp	r3, #1
 8005222:	d813      	bhi.n	800524c <USBD_StdItfReq+0x60>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup (pdev, req);
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800522a:	689b      	ldr	r3, [r3, #8]
 800522c:	6839      	ldr	r1, [r7, #0]
 800522e:	6878      	ldr	r0, [r7, #4]
 8005230:	4798      	blx	r3
 8005232:	4603      	mov	r3, r0
 8005234:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 8005236:	683b      	ldr	r3, [r7, #0]
 8005238:	88db      	ldrh	r3, [r3, #6]
 800523a:	2b00      	cmp	r3, #0
 800523c:	d110      	bne.n	8005260 <USBD_StdItfReq+0x74>
 800523e:	7bfb      	ldrb	r3, [r7, #15]
 8005240:	2b00      	cmp	r3, #0
 8005242:	d10d      	bne.n	8005260 <USBD_StdItfReq+0x74>
        {
          USBD_CtlSendStatus(pdev);
 8005244:	6878      	ldr	r0, [r7, #4]
 8005246:	f000 fc67 	bl	8005b18 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 800524a:	e009      	b.n	8005260 <USBD_StdItfReq+0x74>
        USBD_CtlError(pdev, req);
 800524c:	6839      	ldr	r1, [r7, #0]
 800524e:	6878      	ldr	r0, [r7, #4]
 8005250:	f000 fc11 	bl	8005a76 <USBD_CtlError>
      break;
 8005254:	e004      	b.n	8005260 <USBD_StdItfReq+0x74>

    default:
      USBD_CtlError(pdev, req);
 8005256:	6839      	ldr	r1, [r7, #0]
 8005258:	6878      	ldr	r0, [r7, #4]
 800525a:	f000 fc0c 	bl	8005a76 <USBD_CtlError>
      break;
 800525e:	e000      	b.n	8005262 <USBD_StdItfReq+0x76>
      break;
 8005260:	bf00      	nop
    }
    break;
 8005262:	e004      	b.n	800526e <USBD_StdItfReq+0x82>

  default:
    USBD_CtlError(pdev, req);
 8005264:	6839      	ldr	r1, [r7, #0]
 8005266:	6878      	ldr	r0, [r7, #4]
 8005268:	f000 fc05 	bl	8005a76 <USBD_CtlError>
    break;
 800526c:	bf00      	nop
  }

  return USBD_OK;
 800526e:	2300      	movs	r3, #0
}
 8005270:	4618      	mov	r0, r3
 8005272:	3710      	adds	r7, #16
 8005274:	46bd      	mov	sp, r7
 8005276:	bd80      	pop	{r7, pc}

08005278 <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 8005278:	b580      	push	{r7, lr}
 800527a:	b084      	sub	sp, #16
 800527c:	af00      	add	r7, sp, #0
 800527e:	6078      	str	r0, [r7, #4]
 8005280:	6039      	str	r1, [r7, #0]

  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8005282:	2300      	movs	r3, #0
 8005284:	73fb      	strb	r3, [r7, #15]
  USBD_EndpointTypeDef   *pep;
  ep_addr  = LOBYTE(req->wIndex);
 8005286:	683b      	ldr	r3, [r7, #0]
 8005288:	889b      	ldrh	r3, [r3, #4]
 800528a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800528c:	683b      	ldr	r3, [r7, #0]
 800528e:	781b      	ldrb	r3, [r3, #0]
 8005290:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005294:	2b20      	cmp	r3, #32
 8005296:	d004      	beq.n	80052a2 <USBD_StdEPReq+0x2a>
 8005298:	2b40      	cmp	r3, #64	; 0x40
 800529a:	d002      	beq.n	80052a2 <USBD_StdEPReq+0x2a>
 800529c:	2b00      	cmp	r3, #0
 800529e:	d008      	beq.n	80052b2 <USBD_StdEPReq+0x3a>
 80052a0:	e13b      	b.n	800551a <USBD_StdEPReq+0x2a2>
  {

  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    pdev->pClass->Setup (pdev, req);
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80052a8:	689b      	ldr	r3, [r3, #8]
 80052aa:	6839      	ldr	r1, [r7, #0]
 80052ac:	6878      	ldr	r0, [r7, #4]
 80052ae:	4798      	blx	r3
    break;
 80052b0:	e138      	b.n	8005524 <USBD_StdEPReq+0x2ac>

  case USB_REQ_TYPE_STANDARD:
    /* Check if it is a class request */
    if ((req->bmRequest & 0x60U) == 0x20U)
 80052b2:	683b      	ldr	r3, [r7, #0]
 80052b4:	781b      	ldrb	r3, [r3, #0]
 80052b6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80052ba:	2b20      	cmp	r3, #32
 80052bc:	d10a      	bne.n	80052d4 <USBD_StdEPReq+0x5c>
    {
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup (pdev, req);
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80052c4:	689b      	ldr	r3, [r3, #8]
 80052c6:	6839      	ldr	r1, [r7, #0]
 80052c8:	6878      	ldr	r0, [r7, #4]
 80052ca:	4798      	blx	r3
 80052cc:	4603      	mov	r3, r0
 80052ce:	73fb      	strb	r3, [r7, #15]

      return ret;
 80052d0:	7bfb      	ldrb	r3, [r7, #15]
 80052d2:	e128      	b.n	8005526 <USBD_StdEPReq+0x2ae>
    }

    switch (req->bRequest)
 80052d4:	683b      	ldr	r3, [r7, #0]
 80052d6:	785b      	ldrb	r3, [r3, #1]
 80052d8:	2b01      	cmp	r3, #1
 80052da:	d03e      	beq.n	800535a <USBD_StdEPReq+0xe2>
 80052dc:	2b03      	cmp	r3, #3
 80052de:	d002      	beq.n	80052e6 <USBD_StdEPReq+0x6e>
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d070      	beq.n	80053c6 <USBD_StdEPReq+0x14e>
 80052e4:	e113      	b.n	800550e <USBD_StdEPReq+0x296>
    {

    case USB_REQ_SET_FEATURE :

      switch (pdev->dev_state)
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 80052ec:	2b02      	cmp	r3, #2
 80052ee:	d002      	beq.n	80052f6 <USBD_StdEPReq+0x7e>
 80052f0:	2b03      	cmp	r3, #3
 80052f2:	d015      	beq.n	8005320 <USBD_StdEPReq+0xa8>
 80052f4:	e02b      	b.n	800534e <USBD_StdEPReq+0xd6>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80052f6:	7bbb      	ldrb	r3, [r7, #14]
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d00c      	beq.n	8005316 <USBD_StdEPReq+0x9e>
 80052fc:	7bbb      	ldrb	r3, [r7, #14]
 80052fe:	2b80      	cmp	r3, #128	; 0x80
 8005300:	d009      	beq.n	8005316 <USBD_StdEPReq+0x9e>
        {
          USBD_LL_StallEP(pdev, ep_addr);
 8005302:	7bbb      	ldrb	r3, [r7, #14]
 8005304:	4619      	mov	r1, r3
 8005306:	6878      	ldr	r0, [r7, #4]
 8005308:	f003 fb28 	bl	800895c <USBD_LL_StallEP>
          USBD_LL_StallEP(pdev, 0x80U);
 800530c:	2180      	movs	r1, #128	; 0x80
 800530e:	6878      	ldr	r0, [r7, #4]
 8005310:	f003 fb24 	bl	800895c <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 8005314:	e020      	b.n	8005358 <USBD_StdEPReq+0xe0>
          USBD_CtlError(pdev, req);
 8005316:	6839      	ldr	r1, [r7, #0]
 8005318:	6878      	ldr	r0, [r7, #4]
 800531a:	f000 fbac 	bl	8005a76 <USBD_CtlError>
        break;
 800531e:	e01b      	b.n	8005358 <USBD_StdEPReq+0xe0>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 8005320:	683b      	ldr	r3, [r7, #0]
 8005322:	885b      	ldrh	r3, [r3, #2]
 8005324:	2b00      	cmp	r3, #0
 8005326:	d10e      	bne.n	8005346 <USBD_StdEPReq+0xce>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8005328:	7bbb      	ldrb	r3, [r7, #14]
 800532a:	2b00      	cmp	r3, #0
 800532c:	d00b      	beq.n	8005346 <USBD_StdEPReq+0xce>
 800532e:	7bbb      	ldrb	r3, [r7, #14]
 8005330:	2b80      	cmp	r3, #128	; 0x80
 8005332:	d008      	beq.n	8005346 <USBD_StdEPReq+0xce>
 8005334:	683b      	ldr	r3, [r7, #0]
 8005336:	88db      	ldrh	r3, [r3, #6]
 8005338:	2b00      	cmp	r3, #0
 800533a:	d104      	bne.n	8005346 <USBD_StdEPReq+0xce>
          {
            USBD_LL_StallEP(pdev, ep_addr);
 800533c:	7bbb      	ldrb	r3, [r7, #14]
 800533e:	4619      	mov	r1, r3
 8005340:	6878      	ldr	r0, [r7, #4]
 8005342:	f003 fb0b 	bl	800895c <USBD_LL_StallEP>
          }
        }
        USBD_CtlSendStatus(pdev);
 8005346:	6878      	ldr	r0, [r7, #4]
 8005348:	f000 fbe6 	bl	8005b18 <USBD_CtlSendStatus>

        break;
 800534c:	e004      	b.n	8005358 <USBD_StdEPReq+0xe0>

      default:
        USBD_CtlError(pdev, req);
 800534e:	6839      	ldr	r1, [r7, #0]
 8005350:	6878      	ldr	r0, [r7, #4]
 8005352:	f000 fb90 	bl	8005a76 <USBD_CtlError>
        break;
 8005356:	bf00      	nop
      }
      break;
 8005358:	e0de      	b.n	8005518 <USBD_StdEPReq+0x2a0>

    case USB_REQ_CLEAR_FEATURE :

      switch (pdev->dev_state)
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8005360:	2b02      	cmp	r3, #2
 8005362:	d002      	beq.n	800536a <USBD_StdEPReq+0xf2>
 8005364:	2b03      	cmp	r3, #3
 8005366:	d015      	beq.n	8005394 <USBD_StdEPReq+0x11c>
 8005368:	e026      	b.n	80053b8 <USBD_StdEPReq+0x140>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800536a:	7bbb      	ldrb	r3, [r7, #14]
 800536c:	2b00      	cmp	r3, #0
 800536e:	d00c      	beq.n	800538a <USBD_StdEPReq+0x112>
 8005370:	7bbb      	ldrb	r3, [r7, #14]
 8005372:	2b80      	cmp	r3, #128	; 0x80
 8005374:	d009      	beq.n	800538a <USBD_StdEPReq+0x112>
        {
          USBD_LL_StallEP(pdev, ep_addr);
 8005376:	7bbb      	ldrb	r3, [r7, #14]
 8005378:	4619      	mov	r1, r3
 800537a:	6878      	ldr	r0, [r7, #4]
 800537c:	f003 faee 	bl	800895c <USBD_LL_StallEP>
          USBD_LL_StallEP(pdev, 0x80U);
 8005380:	2180      	movs	r1, #128	; 0x80
 8005382:	6878      	ldr	r0, [r7, #4]
 8005384:	f003 faea 	bl	800895c <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 8005388:	e01c      	b.n	80053c4 <USBD_StdEPReq+0x14c>
          USBD_CtlError(pdev, req);
 800538a:	6839      	ldr	r1, [r7, #0]
 800538c:	6878      	ldr	r0, [r7, #4]
 800538e:	f000 fb72 	bl	8005a76 <USBD_CtlError>
        break;
 8005392:	e017      	b.n	80053c4 <USBD_StdEPReq+0x14c>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 8005394:	683b      	ldr	r3, [r7, #0]
 8005396:	885b      	ldrh	r3, [r3, #2]
 8005398:	2b00      	cmp	r3, #0
 800539a:	d112      	bne.n	80053c2 <USBD_StdEPReq+0x14a>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 800539c:	7bbb      	ldrb	r3, [r7, #14]
 800539e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d004      	beq.n	80053b0 <USBD_StdEPReq+0x138>
          {
            USBD_LL_ClearStallEP(pdev, ep_addr);
 80053a6:	7bbb      	ldrb	r3, [r7, #14]
 80053a8:	4619      	mov	r1, r3
 80053aa:	6878      	ldr	r0, [r7, #4]
 80053ac:	f003 faf5 	bl	800899a <USBD_LL_ClearStallEP>
          }
          USBD_CtlSendStatus(pdev);
 80053b0:	6878      	ldr	r0, [r7, #4]
 80053b2:	f000 fbb1 	bl	8005b18 <USBD_CtlSendStatus>
        }
        break;
 80053b6:	e004      	b.n	80053c2 <USBD_StdEPReq+0x14a>

      default:
        USBD_CtlError(pdev, req);
 80053b8:	6839      	ldr	r1, [r7, #0]
 80053ba:	6878      	ldr	r0, [r7, #4]
 80053bc:	f000 fb5b 	bl	8005a76 <USBD_CtlError>
        break;
 80053c0:	e000      	b.n	80053c4 <USBD_StdEPReq+0x14c>
        break;
 80053c2:	bf00      	nop
      }
      break;
 80053c4:	e0a8      	b.n	8005518 <USBD_StdEPReq+0x2a0>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 80053cc:	2b02      	cmp	r3, #2
 80053ce:	d002      	beq.n	80053d6 <USBD_StdEPReq+0x15e>
 80053d0:	2b03      	cmp	r3, #3
 80053d2:	d031      	beq.n	8005438 <USBD_StdEPReq+0x1c0>
 80053d4:	e095      	b.n	8005502 <USBD_StdEPReq+0x28a>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80053d6:	7bbb      	ldrb	r3, [r7, #14]
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d007      	beq.n	80053ec <USBD_StdEPReq+0x174>
 80053dc:	7bbb      	ldrb	r3, [r7, #14]
 80053de:	2b80      	cmp	r3, #128	; 0x80
 80053e0:	d004      	beq.n	80053ec <USBD_StdEPReq+0x174>
        {
          USBD_CtlError(pdev, req);
 80053e2:	6839      	ldr	r1, [r7, #0]
 80053e4:	6878      	ldr	r0, [r7, #4]
 80053e6:	f000 fb46 	bl	8005a76 <USBD_CtlError>
          break;
 80053ea:	e08f      	b.n	800550c <USBD_StdEPReq+0x294>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 80053ec:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	da0b      	bge.n	800540c <USBD_StdEPReq+0x194>
 80053f4:	7bbb      	ldrb	r3, [r7, #14]
 80053f6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80053fa:	4613      	mov	r3, r2
 80053fc:	009b      	lsls	r3, r3, #2
 80053fe:	4413      	add	r3, r2
 8005400:	009b      	lsls	r3, r3, #2
 8005402:	3310      	adds	r3, #16
 8005404:	687a      	ldr	r2, [r7, #4]
 8005406:	4413      	add	r3, r2
 8005408:	3304      	adds	r3, #4
 800540a:	e00a      	b.n	8005422 <USBD_StdEPReq+0x1aa>
          &pdev->ep_out[ep_addr & 0x7FU];
 800540c:	7bbb      	ldrb	r3, [r7, #14]
 800540e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 8005412:	4613      	mov	r3, r2
 8005414:	009b      	lsls	r3, r3, #2
 8005416:	4413      	add	r3, r2
 8005418:	009b      	lsls	r3, r3, #2
 800541a:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 800541e:	687a      	ldr	r2, [r7, #4]
 8005420:	4413      	add	r3, r2
 8005422:	60bb      	str	r3, [r7, #8]

          pep->status = 0x0000U;
 8005424:	68bb      	ldr	r3, [r7, #8]
 8005426:	2200      	movs	r2, #0
 8005428:	601a      	str	r2, [r3, #0]

          USBD_CtlSendData (pdev, (uint8_t *)(void *)&pep->status, 2U);
 800542a:	68bb      	ldr	r3, [r7, #8]
 800542c:	2202      	movs	r2, #2
 800542e:	4619      	mov	r1, r3
 8005430:	6878      	ldr	r0, [r7, #4]
 8005432:	f000 fb31 	bl	8005a98 <USBD_CtlSendData>
          break;
 8005436:	e069      	b.n	800550c <USBD_StdEPReq+0x294>

      case USBD_STATE_CONFIGURED:
        if((ep_addr & 0x80U) == 0x80U)
 8005438:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800543c:	2b00      	cmp	r3, #0
 800543e:	da11      	bge.n	8005464 <USBD_StdEPReq+0x1ec>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8005440:	7bbb      	ldrb	r3, [r7, #14]
 8005442:	f003 020f 	and.w	r2, r3, #15
 8005446:	6879      	ldr	r1, [r7, #4]
 8005448:	4613      	mov	r3, r2
 800544a:	009b      	lsls	r3, r3, #2
 800544c:	4413      	add	r3, r2
 800544e:	009b      	lsls	r3, r3, #2
 8005450:	440b      	add	r3, r1
 8005452:	3318      	adds	r3, #24
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	2b00      	cmp	r3, #0
 8005458:	d117      	bne.n	800548a <USBD_StdEPReq+0x212>
          {
            USBD_CtlError(pdev, req);
 800545a:	6839      	ldr	r1, [r7, #0]
 800545c:	6878      	ldr	r0, [r7, #4]
 800545e:	f000 fb0a 	bl	8005a76 <USBD_CtlError>
            break;
 8005462:	e053      	b.n	800550c <USBD_StdEPReq+0x294>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8005464:	7bbb      	ldrb	r3, [r7, #14]
 8005466:	f003 020f 	and.w	r2, r3, #15
 800546a:	6879      	ldr	r1, [r7, #4]
 800546c:	4613      	mov	r3, r2
 800546e:	009b      	lsls	r3, r3, #2
 8005470:	4413      	add	r3, r2
 8005472:	009b      	lsls	r3, r3, #2
 8005474:	440b      	add	r3, r1
 8005476:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	2b00      	cmp	r3, #0
 800547e:	d104      	bne.n	800548a <USBD_StdEPReq+0x212>
          {
            USBD_CtlError(pdev, req);
 8005480:	6839      	ldr	r1, [r7, #0]
 8005482:	6878      	ldr	r0, [r7, #4]
 8005484:	f000 faf7 	bl	8005a76 <USBD_CtlError>
            break;
 8005488:	e040      	b.n	800550c <USBD_StdEPReq+0x294>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 800548a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800548e:	2b00      	cmp	r3, #0
 8005490:	da0b      	bge.n	80054aa <USBD_StdEPReq+0x232>
 8005492:	7bbb      	ldrb	r3, [r7, #14]
 8005494:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005498:	4613      	mov	r3, r2
 800549a:	009b      	lsls	r3, r3, #2
 800549c:	4413      	add	r3, r2
 800549e:	009b      	lsls	r3, r3, #2
 80054a0:	3310      	adds	r3, #16
 80054a2:	687a      	ldr	r2, [r7, #4]
 80054a4:	4413      	add	r3, r2
 80054a6:	3304      	adds	r3, #4
 80054a8:	e00a      	b.n	80054c0 <USBD_StdEPReq+0x248>
          &pdev->ep_out[ep_addr & 0x7FU];
 80054aa:	7bbb      	ldrb	r3, [r7, #14]
 80054ac:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 80054b0:	4613      	mov	r3, r2
 80054b2:	009b      	lsls	r3, r3, #2
 80054b4:	4413      	add	r3, r2
 80054b6:	009b      	lsls	r3, r3, #2
 80054b8:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 80054bc:	687a      	ldr	r2, [r7, #4]
 80054be:	4413      	add	r3, r2
 80054c0:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80054c2:	7bbb      	ldrb	r3, [r7, #14]
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d002      	beq.n	80054ce <USBD_StdEPReq+0x256>
 80054c8:	7bbb      	ldrb	r3, [r7, #14]
 80054ca:	2b80      	cmp	r3, #128	; 0x80
 80054cc:	d103      	bne.n	80054d6 <USBD_StdEPReq+0x25e>
          {
            pep->status = 0x0000U;
 80054ce:	68bb      	ldr	r3, [r7, #8]
 80054d0:	2200      	movs	r2, #0
 80054d2:	601a      	str	r2, [r3, #0]
 80054d4:	e00e      	b.n	80054f4 <USBD_StdEPReq+0x27c>
          }
          else if(USBD_LL_IsStallEP(pdev, ep_addr))
 80054d6:	7bbb      	ldrb	r3, [r7, #14]
 80054d8:	4619      	mov	r1, r3
 80054da:	6878      	ldr	r0, [r7, #4]
 80054dc:	f003 fa7c 	bl	80089d8 <USBD_LL_IsStallEP>
 80054e0:	4603      	mov	r3, r0
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d003      	beq.n	80054ee <USBD_StdEPReq+0x276>
          {
            pep->status = 0x0001U;
 80054e6:	68bb      	ldr	r3, [r7, #8]
 80054e8:	2201      	movs	r2, #1
 80054ea:	601a      	str	r2, [r3, #0]
 80054ec:	e002      	b.n	80054f4 <USBD_StdEPReq+0x27c>
          }
          else
          {
            pep->status = 0x0000U;
 80054ee:	68bb      	ldr	r3, [r7, #8]
 80054f0:	2200      	movs	r2, #0
 80054f2:	601a      	str	r2, [r3, #0]
          }

          USBD_CtlSendData (pdev, (uint8_t *)(void *)&pep->status, 2U);
 80054f4:	68bb      	ldr	r3, [r7, #8]
 80054f6:	2202      	movs	r2, #2
 80054f8:	4619      	mov	r1, r3
 80054fa:	6878      	ldr	r0, [r7, #4]
 80054fc:	f000 facc 	bl	8005a98 <USBD_CtlSendData>
          break;
 8005500:	e004      	b.n	800550c <USBD_StdEPReq+0x294>

      default:
        USBD_CtlError(pdev, req);
 8005502:	6839      	ldr	r1, [r7, #0]
 8005504:	6878      	ldr	r0, [r7, #4]
 8005506:	f000 fab6 	bl	8005a76 <USBD_CtlError>
        break;
 800550a:	bf00      	nop
      }
      break;
 800550c:	e004      	b.n	8005518 <USBD_StdEPReq+0x2a0>

    default:
      USBD_CtlError(pdev, req);
 800550e:	6839      	ldr	r1, [r7, #0]
 8005510:	6878      	ldr	r0, [r7, #4]
 8005512:	f000 fab0 	bl	8005a76 <USBD_CtlError>
      break;
 8005516:	bf00      	nop
    }
    break;
 8005518:	e004      	b.n	8005524 <USBD_StdEPReq+0x2ac>

  default:
    USBD_CtlError(pdev, req);
 800551a:	6839      	ldr	r1, [r7, #0]
 800551c:	6878      	ldr	r0, [r7, #4]
 800551e:	f000 faaa 	bl	8005a76 <USBD_CtlError>
    break;
 8005522:	bf00      	nop
  }

  return ret;
 8005524:	7bfb      	ldrb	r3, [r7, #15]
}
 8005526:	4618      	mov	r0, r3
 8005528:	3710      	adds	r7, #16
 800552a:	46bd      	mov	sp, r7
 800552c:	bd80      	pop	{r7, pc}
	...

08005530 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev ,
                               USBD_SetupReqTypedef *req)
{
 8005530:	b580      	push	{r7, lr}
 8005532:	b084      	sub	sp, #16
 8005534:	af00      	add	r7, sp, #0
 8005536:	6078      	str	r0, [r7, #4]
 8005538:	6039      	str	r1, [r7, #0]
  uint16_t len;
  uint8_t *pbuf;


  switch (req->wValue >> 8)
 800553a:	683b      	ldr	r3, [r7, #0]
 800553c:	885b      	ldrh	r3, [r3, #2]
 800553e:	0a1b      	lsrs	r3, r3, #8
 8005540:	b29b      	uxth	r3, r3
 8005542:	3b01      	subs	r3, #1
 8005544:	2b06      	cmp	r3, #6
 8005546:	f200 80c9 	bhi.w	80056dc <USBD_GetDescriptor+0x1ac>
 800554a:	a201      	add	r2, pc, #4	; (adr r2, 8005550 <USBD_GetDescriptor+0x20>)
 800554c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005550:	0800556d 	.word	0x0800556d
 8005554:	08005585 	.word	0x08005585
 8005558:	080055c5 	.word	0x080055c5
 800555c:	080056dd 	.word	0x080056dd
 8005560:	080056dd 	.word	0x080056dd
 8005564:	08005689 	.word	0x08005689
 8005568:	080056af 	.word	0x080056af
  case USB_DESC_TYPE_BOS:
    pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
    break;
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	687a      	ldr	r2, [r7, #4]
 8005576:	7c12      	ldrb	r2, [r2, #16]
 8005578:	f107 010a 	add.w	r1, r7, #10
 800557c:	4610      	mov	r0, r2
 800557e:	4798      	blx	r3
 8005580:	60f8      	str	r0, [r7, #12]
    break;
 8005582:	e0b0      	b.n	80056e6 <USBD_GetDescriptor+0x1b6>

  case USB_DESC_TYPE_CONFIGURATION:
    if(pdev->dev_speed == USBD_SPEED_HIGH )
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	7c1b      	ldrb	r3, [r3, #16]
 8005588:	2b00      	cmp	r3, #0
 800558a:	d10d      	bne.n	80055a8 <USBD_GetDescriptor+0x78>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetHSConfigDescriptor(&len);
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8005592:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005594:	f107 020a 	add.w	r2, r7, #10
 8005598:	4610      	mov	r0, r2
 800559a:	4798      	blx	r3
 800559c:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	3301      	adds	r3, #1
 80055a2:	2202      	movs	r2, #2
 80055a4:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 80055a6:	e09e      	b.n	80056e6 <USBD_GetDescriptor+0x1b6>
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80055ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055b0:	f107 020a 	add.w	r2, r7, #10
 80055b4:	4610      	mov	r0, r2
 80055b6:	4798      	blx	r3
 80055b8:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	3301      	adds	r3, #1
 80055be:	2202      	movs	r2, #2
 80055c0:	701a      	strb	r2, [r3, #0]
    break;
 80055c2:	e090      	b.n	80056e6 <USBD_GetDescriptor+0x1b6>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 80055c4:	683b      	ldr	r3, [r7, #0]
 80055c6:	885b      	ldrh	r3, [r3, #2]
 80055c8:	b2db      	uxtb	r3, r3
 80055ca:	2b05      	cmp	r3, #5
 80055cc:	d856      	bhi.n	800567c <USBD_GetDescriptor+0x14c>
 80055ce:	a201      	add	r2, pc, #4	; (adr r2, 80055d4 <USBD_GetDescriptor+0xa4>)
 80055d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055d4:	080055ed 	.word	0x080055ed
 80055d8:	08005605 	.word	0x08005605
 80055dc:	0800561d 	.word	0x0800561d
 80055e0:	08005635 	.word	0x08005635
 80055e4:	0800564d 	.word	0x0800564d
 80055e8:	08005665 	.word	0x08005665
    {
    case USBD_IDX_LANGID_STR:
     pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 80055f2:	685b      	ldr	r3, [r3, #4]
 80055f4:	687a      	ldr	r2, [r7, #4]
 80055f6:	7c12      	ldrb	r2, [r2, #16]
 80055f8:	f107 010a 	add.w	r1, r7, #10
 80055fc:	4610      	mov	r0, r2
 80055fe:	4798      	blx	r3
 8005600:	60f8      	str	r0, [r7, #12]
      break;
 8005602:	e040      	b.n	8005686 <USBD_GetDescriptor+0x156>

    case USBD_IDX_MFC_STR:
      pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 800560a:	689b      	ldr	r3, [r3, #8]
 800560c:	687a      	ldr	r2, [r7, #4]
 800560e:	7c12      	ldrb	r2, [r2, #16]
 8005610:	f107 010a 	add.w	r1, r7, #10
 8005614:	4610      	mov	r0, r2
 8005616:	4798      	blx	r3
 8005618:	60f8      	str	r0, [r7, #12]
      break;
 800561a:	e034      	b.n	8005686 <USBD_GetDescriptor+0x156>

    case USBD_IDX_PRODUCT_STR:
      pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 8005622:	68db      	ldr	r3, [r3, #12]
 8005624:	687a      	ldr	r2, [r7, #4]
 8005626:	7c12      	ldrb	r2, [r2, #16]
 8005628:	f107 010a 	add.w	r1, r7, #10
 800562c:	4610      	mov	r0, r2
 800562e:	4798      	blx	r3
 8005630:	60f8      	str	r0, [r7, #12]
      break;
 8005632:	e028      	b.n	8005686 <USBD_GetDescriptor+0x156>

    case USBD_IDX_SERIAL_STR:
      pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 800563a:	691b      	ldr	r3, [r3, #16]
 800563c:	687a      	ldr	r2, [r7, #4]
 800563e:	7c12      	ldrb	r2, [r2, #16]
 8005640:	f107 010a 	add.w	r1, r7, #10
 8005644:	4610      	mov	r0, r2
 8005646:	4798      	blx	r3
 8005648:	60f8      	str	r0, [r7, #12]
      break;
 800564a:	e01c      	b.n	8005686 <USBD_GetDescriptor+0x156>

    case USBD_IDX_CONFIG_STR:
      pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 8005652:	695b      	ldr	r3, [r3, #20]
 8005654:	687a      	ldr	r2, [r7, #4]
 8005656:	7c12      	ldrb	r2, [r2, #16]
 8005658:	f107 010a 	add.w	r1, r7, #10
 800565c:	4610      	mov	r0, r2
 800565e:	4798      	blx	r3
 8005660:	60f8      	str	r0, [r7, #12]
      break;
 8005662:	e010      	b.n	8005686 <USBD_GetDescriptor+0x156>

    case USBD_IDX_INTERFACE_STR:
      pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 800566a:	699b      	ldr	r3, [r3, #24]
 800566c:	687a      	ldr	r2, [r7, #4]
 800566e:	7c12      	ldrb	r2, [r2, #16]
 8005670:	f107 010a 	add.w	r1, r7, #10
 8005674:	4610      	mov	r0, r2
 8005676:	4798      	blx	r3
 8005678:	60f8      	str	r0, [r7, #12]
      break;
 800567a:	e004      	b.n	8005686 <USBD_GetDescriptor+0x156>
    default:
#if (USBD_SUPPORT_USER_STRING == 1U)
      pbuf = pdev->pClass->GetUsrStrDescriptor(pdev, (req->wValue) , &len);
      break;
#else
       USBD_CtlError(pdev , req);
 800567c:	6839      	ldr	r1, [r7, #0]
 800567e:	6878      	ldr	r0, [r7, #4]
 8005680:	f000 f9f9 	bl	8005a76 <USBD_CtlError>
      return;
 8005684:	e04b      	b.n	800571e <USBD_GetDescriptor+0x1ee>
#endif
    }
    break;
 8005686:	e02e      	b.n	80056e6 <USBD_GetDescriptor+0x1b6>
  case USB_DESC_TYPE_DEVICE_QUALIFIER:

    if(pdev->dev_speed == USBD_SPEED_HIGH)
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	7c1b      	ldrb	r3, [r3, #16]
 800568c:	2b00      	cmp	r3, #0
 800568e:	d109      	bne.n	80056a4 <USBD_GetDescriptor+0x174>
    {
      pbuf = (uint8_t *)pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8005696:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005698:	f107 020a 	add.w	r2, r7, #10
 800569c:	4610      	mov	r0, r2
 800569e:	4798      	blx	r3
 80056a0:	60f8      	str	r0, [r7, #12]
      break;
 80056a2:	e020      	b.n	80056e6 <USBD_GetDescriptor+0x1b6>
    }
    else
    {
      USBD_CtlError(pdev , req);
 80056a4:	6839      	ldr	r1, [r7, #0]
 80056a6:	6878      	ldr	r0, [r7, #4]
 80056a8:	f000 f9e5 	bl	8005a76 <USBD_CtlError>
      return;
 80056ac:	e037      	b.n	800571e <USBD_GetDescriptor+0x1ee>
    }

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if(pdev->dev_speed == USBD_SPEED_HIGH  )
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	7c1b      	ldrb	r3, [r3, #16]
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d10d      	bne.n	80056d2 <USBD_GetDescriptor+0x1a2>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 80056bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056be:	f107 020a 	add.w	r2, r7, #10
 80056c2:	4610      	mov	r0, r2
 80056c4:	4798      	blx	r3
 80056c6:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	3301      	adds	r3, #1
 80056cc:	2207      	movs	r2, #7
 80056ce:	701a      	strb	r2, [r3, #0]
      break;
 80056d0:	e009      	b.n	80056e6 <USBD_GetDescriptor+0x1b6>
    }
    else
    {
      USBD_CtlError(pdev , req);
 80056d2:	6839      	ldr	r1, [r7, #0]
 80056d4:	6878      	ldr	r0, [r7, #4]
 80056d6:	f000 f9ce 	bl	8005a76 <USBD_CtlError>
      return;
 80056da:	e020      	b.n	800571e <USBD_GetDescriptor+0x1ee>
    }

  default:
     USBD_CtlError(pdev , req);
 80056dc:	6839      	ldr	r1, [r7, #0]
 80056de:	6878      	ldr	r0, [r7, #4]
 80056e0:	f000 f9c9 	bl	8005a76 <USBD_CtlError>
    return;
 80056e4:	e01b      	b.n	800571e <USBD_GetDescriptor+0x1ee>
  }

  if((len != 0U) && (req->wLength != 0U))
 80056e6:	897b      	ldrh	r3, [r7, #10]
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d011      	beq.n	8005710 <USBD_GetDescriptor+0x1e0>
 80056ec:	683b      	ldr	r3, [r7, #0]
 80056ee:	88db      	ldrh	r3, [r3, #6]
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d00d      	beq.n	8005710 <USBD_GetDescriptor+0x1e0>
  {

    len = MIN(len, req->wLength);
 80056f4:	683b      	ldr	r3, [r7, #0]
 80056f6:	88da      	ldrh	r2, [r3, #6]
 80056f8:	897b      	ldrh	r3, [r7, #10]
 80056fa:	4293      	cmp	r3, r2
 80056fc:	bf28      	it	cs
 80056fe:	4613      	movcs	r3, r2
 8005700:	b29b      	uxth	r3, r3
 8005702:	817b      	strh	r3, [r7, #10]

    USBD_CtlSendData (pdev, pbuf, len);
 8005704:	897b      	ldrh	r3, [r7, #10]
 8005706:	461a      	mov	r2, r3
 8005708:	68f9      	ldr	r1, [r7, #12]
 800570a:	6878      	ldr	r0, [r7, #4]
 800570c:	f000 f9c4 	bl	8005a98 <USBD_CtlSendData>
  }

  if(req->wLength == 0U)
 8005710:	683b      	ldr	r3, [r7, #0]
 8005712:	88db      	ldrh	r3, [r3, #6]
 8005714:	2b00      	cmp	r3, #0
 8005716:	d102      	bne.n	800571e <USBD_GetDescriptor+0x1ee>
  {
   USBD_CtlSendStatus(pdev);
 8005718:	6878      	ldr	r0, [r7, #4]
 800571a:	f000 f9fd 	bl	8005b18 <USBD_CtlSendStatus>
  }
}
 800571e:	3710      	adds	r7, #16
 8005720:	46bd      	mov	sp, r7
 8005722:	bd80      	pop	{r7, pc}

08005724 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 8005724:	b580      	push	{r7, lr}
 8005726:	b084      	sub	sp, #16
 8005728:	af00      	add	r7, sp, #0
 800572a:	6078      	str	r0, [r7, #4]
 800572c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800572e:	683b      	ldr	r3, [r7, #0]
 8005730:	889b      	ldrh	r3, [r3, #4]
 8005732:	2b00      	cmp	r3, #0
 8005734:	d130      	bne.n	8005798 <USBD_SetAddress+0x74>
 8005736:	683b      	ldr	r3, [r7, #0]
 8005738:	88db      	ldrh	r3, [r3, #6]
 800573a:	2b00      	cmp	r3, #0
 800573c:	d12c      	bne.n	8005798 <USBD_SetAddress+0x74>
 800573e:	683b      	ldr	r3, [r7, #0]
 8005740:	885b      	ldrh	r3, [r3, #2]
 8005742:	2b7f      	cmp	r3, #127	; 0x7f
 8005744:	d828      	bhi.n	8005798 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8005746:	683b      	ldr	r3, [r7, #0]
 8005748:	885b      	ldrh	r3, [r3, #2]
 800574a:	b2db      	uxtb	r3, r3
 800574c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005750:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 8005758:	2b03      	cmp	r3, #3
 800575a:	d104      	bne.n	8005766 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev , req);
 800575c:	6839      	ldr	r1, [r7, #0]
 800575e:	6878      	ldr	r0, [r7, #4]
 8005760:	f000 f989 	bl	8005a76 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005764:	e01c      	b.n	80057a0 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	7bfa      	ldrb	r2, [r7, #15]
 800576a:	f883 2276 	strb.w	r2, [r3, #630]	; 0x276
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 800576e:	7bfb      	ldrb	r3, [r7, #15]
 8005770:	4619      	mov	r1, r3
 8005772:	6878      	ldr	r0, [r7, #4]
 8005774:	f003 f95c 	bl	8008a30 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8005778:	6878      	ldr	r0, [r7, #4]
 800577a:	f000 f9cd 	bl	8005b18 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800577e:	7bfb      	ldrb	r3, [r7, #15]
 8005780:	2b00      	cmp	r3, #0
 8005782:	d004      	beq.n	800578e <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	2202      	movs	r2, #2
 8005788:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800578c:	e008      	b.n	80057a0 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	2201      	movs	r2, #1
 8005792:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005796:	e003      	b.n	80057a0 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8005798:	6839      	ldr	r1, [r7, #0]
 800579a:	6878      	ldr	r0, [r7, #4]
 800579c:	f000 f96b 	bl	8005a76 <USBD_CtlError>
  }
}
 80057a0:	bf00      	nop
 80057a2:	3710      	adds	r7, #16
 80057a4:	46bd      	mov	sp, r7
 80057a6:	bd80      	pop	{r7, pc}

080057a8 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80057a8:	b580      	push	{r7, lr}
 80057aa:	b082      	sub	sp, #8
 80057ac:	af00      	add	r7, sp, #0
 80057ae:	6078      	str	r0, [r7, #4]
 80057b0:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80057b2:	683b      	ldr	r3, [r7, #0]
 80057b4:	885b      	ldrh	r3, [r3, #2]
 80057b6:	b2da      	uxtb	r2, r3
 80057b8:	4b41      	ldr	r3, [pc, #260]	; (80058c0 <USBD_SetConfig+0x118>)
 80057ba:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80057bc:	4b40      	ldr	r3, [pc, #256]	; (80058c0 <USBD_SetConfig+0x118>)
 80057be:	781b      	ldrb	r3, [r3, #0]
 80057c0:	2b01      	cmp	r3, #1
 80057c2:	d904      	bls.n	80057ce <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 80057c4:	6839      	ldr	r1, [r7, #0]
 80057c6:	6878      	ldr	r0, [r7, #4]
 80057c8:	f000 f955 	bl	8005a76 <USBD_CtlError>
 80057cc:	e075      	b.n	80058ba <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 80057d4:	2b02      	cmp	r3, #2
 80057d6:	d002      	beq.n	80057de <USBD_SetConfig+0x36>
 80057d8:	2b03      	cmp	r3, #3
 80057da:	d023      	beq.n	8005824 <USBD_SetConfig+0x7c>
 80057dc:	e062      	b.n	80058a4 <USBD_SetConfig+0xfc>
    {
    case USBD_STATE_ADDRESSED:
      if (cfgidx)
 80057de:	4b38      	ldr	r3, [pc, #224]	; (80058c0 <USBD_SetConfig+0x118>)
 80057e0:	781b      	ldrb	r3, [r3, #0]
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d01a      	beq.n	800581c <USBD_SetConfig+0x74>
      {
        pdev->dev_config = cfgidx;
 80057e6:	4b36      	ldr	r3, [pc, #216]	; (80058c0 <USBD_SetConfig+0x118>)
 80057e8:	781b      	ldrb	r3, [r3, #0]
 80057ea:	461a      	mov	r2, r3
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	605a      	str	r2, [r3, #4]
        pdev->dev_state = USBD_STATE_CONFIGURED;
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	2203      	movs	r2, #3
 80057f4:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
        if(USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 80057f8:	4b31      	ldr	r3, [pc, #196]	; (80058c0 <USBD_SetConfig+0x118>)
 80057fa:	781b      	ldrb	r3, [r3, #0]
 80057fc:	4619      	mov	r1, r3
 80057fe:	6878      	ldr	r0, [r7, #4]
 8005800:	f7ff fa29 	bl	8004c56 <USBD_SetClassConfig>
 8005804:	4603      	mov	r3, r0
 8005806:	2b02      	cmp	r3, #2
 8005808:	d104      	bne.n	8005814 <USBD_SetConfig+0x6c>
        {
          USBD_CtlError(pdev, req);
 800580a:	6839      	ldr	r1, [r7, #0]
 800580c:	6878      	ldr	r0, [r7, #4]
 800580e:	f000 f932 	bl	8005a76 <USBD_CtlError>
          return;
 8005812:	e052      	b.n	80058ba <USBD_SetConfig+0x112>
        }
        USBD_CtlSendStatus(pdev);
 8005814:	6878      	ldr	r0, [r7, #4]
 8005816:	f000 f97f 	bl	8005b18 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlSendStatus(pdev);
      }
      break;
 800581a:	e04e      	b.n	80058ba <USBD_SetConfig+0x112>
        USBD_CtlSendStatus(pdev);
 800581c:	6878      	ldr	r0, [r7, #4]
 800581e:	f000 f97b 	bl	8005b18 <USBD_CtlSendStatus>
      break;
 8005822:	e04a      	b.n	80058ba <USBD_SetConfig+0x112>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8005824:	4b26      	ldr	r3, [pc, #152]	; (80058c0 <USBD_SetConfig+0x118>)
 8005826:	781b      	ldrb	r3, [r3, #0]
 8005828:	2b00      	cmp	r3, #0
 800582a:	d112      	bne.n	8005852 <USBD_SetConfig+0xaa>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	2202      	movs	r2, #2
 8005830:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
        pdev->dev_config = cfgidx;
 8005834:	4b22      	ldr	r3, [pc, #136]	; (80058c0 <USBD_SetConfig+0x118>)
 8005836:	781b      	ldrb	r3, [r3, #0]
 8005838:	461a      	mov	r2, r3
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	605a      	str	r2, [r3, #4]
        USBD_ClrClassConfig(pdev, cfgidx);
 800583e:	4b20      	ldr	r3, [pc, #128]	; (80058c0 <USBD_SetConfig+0x118>)
 8005840:	781b      	ldrb	r3, [r3, #0]
 8005842:	4619      	mov	r1, r3
 8005844:	6878      	ldr	r0, [r7, #4]
 8005846:	f7ff fa25 	bl	8004c94 <USBD_ClrClassConfig>
        USBD_CtlSendStatus(pdev);
 800584a:	6878      	ldr	r0, [r7, #4]
 800584c:	f000 f964 	bl	8005b18 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlSendStatus(pdev);
      }
      break;
 8005850:	e033      	b.n	80058ba <USBD_SetConfig+0x112>
      else if (cfgidx != pdev->dev_config)
 8005852:	4b1b      	ldr	r3, [pc, #108]	; (80058c0 <USBD_SetConfig+0x118>)
 8005854:	781b      	ldrb	r3, [r3, #0]
 8005856:	461a      	mov	r2, r3
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	685b      	ldr	r3, [r3, #4]
 800585c:	429a      	cmp	r2, r3
 800585e:	d01d      	beq.n	800589c <USBD_SetConfig+0xf4>
        USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	685b      	ldr	r3, [r3, #4]
 8005864:	b2db      	uxtb	r3, r3
 8005866:	4619      	mov	r1, r3
 8005868:	6878      	ldr	r0, [r7, #4]
 800586a:	f7ff fa13 	bl	8004c94 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800586e:	4b14      	ldr	r3, [pc, #80]	; (80058c0 <USBD_SetConfig+0x118>)
 8005870:	781b      	ldrb	r3, [r3, #0]
 8005872:	461a      	mov	r2, r3
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	605a      	str	r2, [r3, #4]
        if(USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8005878:	4b11      	ldr	r3, [pc, #68]	; (80058c0 <USBD_SetConfig+0x118>)
 800587a:	781b      	ldrb	r3, [r3, #0]
 800587c:	4619      	mov	r1, r3
 800587e:	6878      	ldr	r0, [r7, #4]
 8005880:	f7ff f9e9 	bl	8004c56 <USBD_SetClassConfig>
 8005884:	4603      	mov	r3, r0
 8005886:	2b02      	cmp	r3, #2
 8005888:	d104      	bne.n	8005894 <USBD_SetConfig+0xec>
          USBD_CtlError(pdev, req);
 800588a:	6839      	ldr	r1, [r7, #0]
 800588c:	6878      	ldr	r0, [r7, #4]
 800588e:	f000 f8f2 	bl	8005a76 <USBD_CtlError>
          return;
 8005892:	e012      	b.n	80058ba <USBD_SetConfig+0x112>
        USBD_CtlSendStatus(pdev);
 8005894:	6878      	ldr	r0, [r7, #4]
 8005896:	f000 f93f 	bl	8005b18 <USBD_CtlSendStatus>
      break;
 800589a:	e00e      	b.n	80058ba <USBD_SetConfig+0x112>
        USBD_CtlSendStatus(pdev);
 800589c:	6878      	ldr	r0, [r7, #4]
 800589e:	f000 f93b 	bl	8005b18 <USBD_CtlSendStatus>
      break;
 80058a2:	e00a      	b.n	80058ba <USBD_SetConfig+0x112>

    default:
      USBD_CtlError(pdev, req);
 80058a4:	6839      	ldr	r1, [r7, #0]
 80058a6:	6878      	ldr	r0, [r7, #4]
 80058a8:	f000 f8e5 	bl	8005a76 <USBD_CtlError>
      USBD_ClrClassConfig(pdev, cfgidx);
 80058ac:	4b04      	ldr	r3, [pc, #16]	; (80058c0 <USBD_SetConfig+0x118>)
 80058ae:	781b      	ldrb	r3, [r3, #0]
 80058b0:	4619      	mov	r1, r3
 80058b2:	6878      	ldr	r0, [r7, #4]
 80058b4:	f7ff f9ee 	bl	8004c94 <USBD_ClrClassConfig>
      break;
 80058b8:	bf00      	nop
    }
  }
}
 80058ba:	3708      	adds	r7, #8
 80058bc:	46bd      	mov	sp, r7
 80058be:	bd80      	pop	{r7, pc}
 80058c0:	2000002c 	.word	0x2000002c

080058c4 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80058c4:	b580      	push	{r7, lr}
 80058c6:	b082      	sub	sp, #8
 80058c8:	af00      	add	r7, sp, #0
 80058ca:	6078      	str	r0, [r7, #4]
 80058cc:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80058ce:	683b      	ldr	r3, [r7, #0]
 80058d0:	88db      	ldrh	r3, [r3, #6]
 80058d2:	2b01      	cmp	r3, #1
 80058d4:	d004      	beq.n	80058e0 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev , req);
 80058d6:	6839      	ldr	r1, [r7, #0]
 80058d8:	6878      	ldr	r0, [r7, #4]
 80058da:	f000 f8cc 	bl	8005a76 <USBD_CtlError>
    default:
      USBD_CtlError(pdev , req);
      break;
    }
  }
}
 80058de:	e021      	b.n	8005924 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 80058e6:	2b01      	cmp	r3, #1
 80058e8:	db17      	blt.n	800591a <USBD_GetConfig+0x56>
 80058ea:	2b02      	cmp	r3, #2
 80058ec:	dd02      	ble.n	80058f4 <USBD_GetConfig+0x30>
 80058ee:	2b03      	cmp	r3, #3
 80058f0:	d00b      	beq.n	800590a <USBD_GetConfig+0x46>
 80058f2:	e012      	b.n	800591a <USBD_GetConfig+0x56>
      pdev->dev_default_config = 0U;
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	2200      	movs	r2, #0
 80058f8:	609a      	str	r2, [r3, #8]
      USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	3308      	adds	r3, #8
 80058fe:	2201      	movs	r2, #1
 8005900:	4619      	mov	r1, r3
 8005902:	6878      	ldr	r0, [r7, #4]
 8005904:	f000 f8c8 	bl	8005a98 <USBD_CtlSendData>
      break;
 8005908:	e00c      	b.n	8005924 <USBD_GetConfig+0x60>
      USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	3304      	adds	r3, #4
 800590e:	2201      	movs	r2, #1
 8005910:	4619      	mov	r1, r3
 8005912:	6878      	ldr	r0, [r7, #4]
 8005914:	f000 f8c0 	bl	8005a98 <USBD_CtlSendData>
      break;
 8005918:	e004      	b.n	8005924 <USBD_GetConfig+0x60>
      USBD_CtlError(pdev , req);
 800591a:	6839      	ldr	r1, [r7, #0]
 800591c:	6878      	ldr	r0, [r7, #4]
 800591e:	f000 f8aa 	bl	8005a76 <USBD_CtlError>
      break;
 8005922:	bf00      	nop
}
 8005924:	bf00      	nop
 8005926:	3708      	adds	r7, #8
 8005928:	46bd      	mov	sp, r7
 800592a:	bd80      	pop	{r7, pc}

0800592c <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800592c:	b580      	push	{r7, lr}
 800592e:	b082      	sub	sp, #8
 8005930:	af00      	add	r7, sp, #0
 8005932:	6078      	str	r0, [r7, #4]
 8005934:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800593c:	3b01      	subs	r3, #1
 800593e:	2b02      	cmp	r3, #2
 8005940:	d81e      	bhi.n	8005980 <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if(req->wLength != 0x2U)
 8005942:	683b      	ldr	r3, [r7, #0]
 8005944:	88db      	ldrh	r3, [r3, #6]
 8005946:	2b02      	cmp	r3, #2
 8005948:	d004      	beq.n	8005954 <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 800594a:	6839      	ldr	r1, [r7, #0]
 800594c:	6878      	ldr	r0, [r7, #4]
 800594e:	f000 f892 	bl	8005a76 <USBD_CtlError>
      break;
 8005952:	e01a      	b.n	800598a <USBD_GetStatus+0x5e>
    }

#if ( USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	2201      	movs	r2, #1
 8005958:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup)
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	f8d3 327c 	ldr.w	r3, [r3, #636]	; 0x27c
 8005960:	2b00      	cmp	r3, #0
 8005962:	d005      	beq.n	8005970 <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	68db      	ldr	r3, [r3, #12]
 8005968:	f043 0202 	orr.w	r2, r3, #2
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	60da      	str	r2, [r3, #12]
    }

    USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	330c      	adds	r3, #12
 8005974:	2202      	movs	r2, #2
 8005976:	4619      	mov	r1, r3
 8005978:	6878      	ldr	r0, [r7, #4]
 800597a:	f000 f88d 	bl	8005a98 <USBD_CtlSendData>
    break;
 800597e:	e004      	b.n	800598a <USBD_GetStatus+0x5e>

  default :
    USBD_CtlError(pdev , req);
 8005980:	6839      	ldr	r1, [r7, #0]
 8005982:	6878      	ldr	r0, [r7, #4]
 8005984:	f000 f877 	bl	8005a76 <USBD_CtlError>
    break;
 8005988:	bf00      	nop
  }
}
 800598a:	bf00      	nop
 800598c:	3708      	adds	r7, #8
 800598e:	46bd      	mov	sp, r7
 8005990:	bd80      	pop	{r7, pc}

08005992 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 8005992:	b580      	push	{r7, lr}
 8005994:	b082      	sub	sp, #8
 8005996:	af00      	add	r7, sp, #0
 8005998:	6078      	str	r0, [r7, #4]
 800599a:	6039      	str	r1, [r7, #0]

  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800599c:	683b      	ldr	r3, [r7, #0]
 800599e:	885b      	ldrh	r3, [r3, #2]
 80059a0:	2b01      	cmp	r3, #1
 80059a2:	d106      	bne.n	80059b2 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	2201      	movs	r2, #1
 80059a8:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c
    USBD_CtlSendStatus(pdev);
 80059ac:	6878      	ldr	r0, [r7, #4]
 80059ae:	f000 f8b3 	bl	8005b18 <USBD_CtlSendStatus>
  }

}
 80059b2:	bf00      	nop
 80059b4:	3708      	adds	r7, #8
 80059b6:	46bd      	mov	sp, r7
 80059b8:	bd80      	pop	{r7, pc}

080059ba <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 80059ba:	b580      	push	{r7, lr}
 80059bc:	b082      	sub	sp, #8
 80059be:	af00      	add	r7, sp, #0
 80059c0:	6078      	str	r0, [r7, #4]
 80059c2:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 80059ca:	3b01      	subs	r3, #1
 80059cc:	2b02      	cmp	r3, #2
 80059ce:	d80b      	bhi.n	80059e8 <USBD_ClrFeature+0x2e>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80059d0:	683b      	ldr	r3, [r7, #0]
 80059d2:	885b      	ldrh	r3, [r3, #2]
 80059d4:	2b01      	cmp	r3, #1
 80059d6:	d10c      	bne.n	80059f2 <USBD_ClrFeature+0x38>
    {
      pdev->dev_remote_wakeup = 0U;
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	2200      	movs	r2, #0
 80059dc:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c
      USBD_CtlSendStatus(pdev);
 80059e0:	6878      	ldr	r0, [r7, #4]
 80059e2:	f000 f899 	bl	8005b18 <USBD_CtlSendStatus>
    }
    break;
 80059e6:	e004      	b.n	80059f2 <USBD_ClrFeature+0x38>

  default :
     USBD_CtlError(pdev , req);
 80059e8:	6839      	ldr	r1, [r7, #0]
 80059ea:	6878      	ldr	r0, [r7, #4]
 80059ec:	f000 f843 	bl	8005a76 <USBD_CtlError>
    break;
 80059f0:	e000      	b.n	80059f4 <USBD_ClrFeature+0x3a>
    break;
 80059f2:	bf00      	nop
  }
}
 80059f4:	bf00      	nop
 80059f6:	3708      	adds	r7, #8
 80059f8:	46bd      	mov	sp, r7
 80059fa:	bd80      	pop	{r7, pc}

080059fc <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80059fc:	b480      	push	{r7}
 80059fe:	b083      	sub	sp, #12
 8005a00:	af00      	add	r7, sp, #0
 8005a02:	6078      	str	r0, [r7, #4]
 8005a04:	6039      	str	r1, [r7, #0]
  req->bmRequest     = *(uint8_t *)  (pdata);
 8005a06:	683b      	ldr	r3, [r7, #0]
 8005a08:	781a      	ldrb	r2, [r3, #0]
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	701a      	strb	r2, [r3, #0]
  req->bRequest      = *(uint8_t *)  (pdata +  1);
 8005a0e:	683b      	ldr	r3, [r7, #0]
 8005a10:	785a      	ldrb	r2, [r3, #1]
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	705a      	strb	r2, [r3, #1]
  req->wValue        = SWAPBYTE      (pdata +  2);
 8005a16:	683b      	ldr	r3, [r7, #0]
 8005a18:	3302      	adds	r3, #2
 8005a1a:	781b      	ldrb	r3, [r3, #0]
 8005a1c:	b29a      	uxth	r2, r3
 8005a1e:	683b      	ldr	r3, [r7, #0]
 8005a20:	3303      	adds	r3, #3
 8005a22:	781b      	ldrb	r3, [r3, #0]
 8005a24:	b29b      	uxth	r3, r3
 8005a26:	021b      	lsls	r3, r3, #8
 8005a28:	b29b      	uxth	r3, r3
 8005a2a:	4413      	add	r3, r2
 8005a2c:	b29a      	uxth	r2, r3
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	805a      	strh	r2, [r3, #2]
  req->wIndex        = SWAPBYTE      (pdata +  4);
 8005a32:	683b      	ldr	r3, [r7, #0]
 8005a34:	3304      	adds	r3, #4
 8005a36:	781b      	ldrb	r3, [r3, #0]
 8005a38:	b29a      	uxth	r2, r3
 8005a3a:	683b      	ldr	r3, [r7, #0]
 8005a3c:	3305      	adds	r3, #5
 8005a3e:	781b      	ldrb	r3, [r3, #0]
 8005a40:	b29b      	uxth	r3, r3
 8005a42:	021b      	lsls	r3, r3, #8
 8005a44:	b29b      	uxth	r3, r3
 8005a46:	4413      	add	r3, r2
 8005a48:	b29a      	uxth	r2, r3
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	809a      	strh	r2, [r3, #4]
  req->wLength       = SWAPBYTE      (pdata +  6);
 8005a4e:	683b      	ldr	r3, [r7, #0]
 8005a50:	3306      	adds	r3, #6
 8005a52:	781b      	ldrb	r3, [r3, #0]
 8005a54:	b29a      	uxth	r2, r3
 8005a56:	683b      	ldr	r3, [r7, #0]
 8005a58:	3307      	adds	r3, #7
 8005a5a:	781b      	ldrb	r3, [r3, #0]
 8005a5c:	b29b      	uxth	r3, r3
 8005a5e:	021b      	lsls	r3, r3, #8
 8005a60:	b29b      	uxth	r3, r3
 8005a62:	4413      	add	r3, r2
 8005a64:	b29a      	uxth	r2, r3
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	80da      	strh	r2, [r3, #6]

}
 8005a6a:	bf00      	nop
 8005a6c:	370c      	adds	r7, #12
 8005a6e:	46bd      	mov	sp, r7
 8005a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a74:	4770      	bx	lr

08005a76 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError( USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 8005a76:	b580      	push	{r7, lr}
 8005a78:	b082      	sub	sp, #8
 8005a7a:	af00      	add	r7, sp, #0
 8005a7c:	6078      	str	r0, [r7, #4]
 8005a7e:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev , 0x80U);
 8005a80:	2180      	movs	r1, #128	; 0x80
 8005a82:	6878      	ldr	r0, [r7, #4]
 8005a84:	f002 ff6a 	bl	800895c <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev , 0U);
 8005a88:	2100      	movs	r1, #0
 8005a8a:	6878      	ldr	r0, [r7, #4]
 8005a8c:	f002 ff66 	bl	800895c <USBD_LL_StallEP>
}
 8005a90:	bf00      	nop
 8005a92:	3708      	adds	r7, #8
 8005a94:	46bd      	mov	sp, r7
 8005a96:	bd80      	pop	{r7, pc}

08005a98 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                     uint16_t len)
{
 8005a98:	b580      	push	{r7, lr}
 8005a9a:	b084      	sub	sp, #16
 8005a9c:	af00      	add	r7, sp, #0
 8005a9e:	60f8      	str	r0, [r7, #12]
 8005aa0:	60b9      	str	r1, [r7, #8]
 8005aa2:	4613      	mov	r3, r2
 8005aa4:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	2202      	movs	r2, #2
 8005aaa:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  pdev->ep_in[0].total_length = len;
 8005aae:	88fa      	ldrh	r2, [r7, #6]
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8005ab4:	88fa      	ldrh	r2, [r7, #6]
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	621a      	str	r2, [r3, #32]

 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00U, pbuf, len);
 8005aba:	88fb      	ldrh	r3, [r7, #6]
 8005abc:	68ba      	ldr	r2, [r7, #8]
 8005abe:	2100      	movs	r1, #0
 8005ac0:	68f8      	ldr	r0, [r7, #12]
 8005ac2:	f002 ffd4 	bl	8008a6e <USBD_LL_Transmit>

  return USBD_OK;
 8005ac6:	2300      	movs	r3, #0
}
 8005ac8:	4618      	mov	r0, r3
 8005aca:	3710      	adds	r7, #16
 8005acc:	46bd      	mov	sp, r7
 8005ace:	bd80      	pop	{r7, pc}

08005ad0 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData (USBD_HandleTypeDef *pdev,
                                             uint8_t *pbuf, uint16_t len)
{
 8005ad0:	b580      	push	{r7, lr}
 8005ad2:	b084      	sub	sp, #16
 8005ad4:	af00      	add	r7, sp, #0
 8005ad6:	60f8      	str	r0, [r7, #12]
 8005ad8:	60b9      	str	r1, [r7, #8]
 8005ada:	4613      	mov	r3, r2
 8005adc:	80fb      	strh	r3, [r7, #6]
 /* Start the next transfer */
  USBD_LL_Transmit (pdev, 0x00U, pbuf, len);
 8005ade:	88fb      	ldrh	r3, [r7, #6]
 8005ae0:	68ba      	ldr	r2, [r7, #8]
 8005ae2:	2100      	movs	r1, #0
 8005ae4:	68f8      	ldr	r0, [r7, #12]
 8005ae6:	f002 ffc2 	bl	8008a6e <USBD_LL_Transmit>

  return USBD_OK;
 8005aea:	2300      	movs	r3, #0
}
 8005aec:	4618      	mov	r0, r3
 8005aee:	3710      	adds	r7, #16
 8005af0:	46bd      	mov	sp, r7
 8005af2:	bd80      	pop	{r7, pc}

08005af4 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                       uint16_t len)
{
 8005af4:	b580      	push	{r7, lr}
 8005af6:	b084      	sub	sp, #16
 8005af8:	af00      	add	r7, sp, #0
 8005afa:	60f8      	str	r0, [r7, #12]
 8005afc:	60b9      	str	r1, [r7, #8]
 8005afe:	4613      	mov	r3, r2
 8005b00:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8005b02:	88fb      	ldrh	r3, [r7, #6]
 8005b04:	68ba      	ldr	r2, [r7, #8]
 8005b06:	2100      	movs	r1, #0
 8005b08:	68f8      	ldr	r0, [r7, #12]
 8005b0a:	f002 ffd3 	bl	8008ab4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8005b0e:	2300      	movs	r3, #0
}
 8005b10:	4618      	mov	r0, r3
 8005b12:	3710      	adds	r7, #16
 8005b14:	46bd      	mov	sp, r7
 8005b16:	bd80      	pop	{r7, pc}

08005b18 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus (USBD_HandleTypeDef *pdev)
{
 8005b18:	b580      	push	{r7, lr}
 8005b1a:	b082      	sub	sp, #8
 8005b1c:	af00      	add	r7, sp, #0
 8005b1e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	2204      	movs	r2, #4
 8005b24:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8005b28:	2300      	movs	r3, #0
 8005b2a:	2200      	movs	r2, #0
 8005b2c:	2100      	movs	r1, #0
 8005b2e:	6878      	ldr	r0, [r7, #4]
 8005b30:	f002 ff9d 	bl	8008a6e <USBD_LL_Transmit>

  return USBD_OK;
 8005b34:	2300      	movs	r3, #0
}
 8005b36:	4618      	mov	r0, r3
 8005b38:	3708      	adds	r7, #8
 8005b3a:	46bd      	mov	sp, r7
 8005b3c:	bd80      	pop	{r7, pc}

08005b3e <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus (USBD_HandleTypeDef *pdev)
{
 8005b3e:	b580      	push	{r7, lr}
 8005b40:	b082      	sub	sp, #8
 8005b42:	af00      	add	r7, sp, #0
 8005b44:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	2205      	movs	r2, #5
 8005b4a:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

 /* Start the transfer */
  USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 8005b4e:	2300      	movs	r3, #0
 8005b50:	2200      	movs	r2, #0
 8005b52:	2100      	movs	r1, #0
 8005b54:	6878      	ldr	r0, [r7, #4]
 8005b56:	f002 ffad 	bl	8008ab4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8005b5a:	2300      	movs	r3, #0
}
 8005b5c:	4618      	mov	r0, r3
 8005b5e:	3708      	adds	r7, #8
 8005b60:	46bd      	mov	sp, r7
 8005b62:	bd80      	pop	{r7, pc}

08005b64 <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8005b64:	b480      	push	{r7}
 8005b66:	b085      	sub	sp, #20
 8005b68:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005b6a:	f3ef 8305 	mrs	r3, IPSR
 8005b6e:	60bb      	str	r3, [r7, #8]
  return(result);
 8005b70:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d10f      	bne.n	8005b96 <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005b76:	f3ef 8310 	mrs	r3, PRIMASK
 8005b7a:	607b      	str	r3, [r7, #4]
  return(result);
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d109      	bne.n	8005b96 <osKernelInitialize+0x32>
 8005b82:	4b11      	ldr	r3, [pc, #68]	; (8005bc8 <osKernelInitialize+0x64>)
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	2b02      	cmp	r3, #2
 8005b88:	d109      	bne.n	8005b9e <osKernelInitialize+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005b8a:	f3ef 8311 	mrs	r3, BASEPRI
 8005b8e:	603b      	str	r3, [r7, #0]
  return(result);
 8005b90:	683b      	ldr	r3, [r7, #0]
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d003      	beq.n	8005b9e <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8005b96:	f06f 0305 	mvn.w	r3, #5
 8005b9a:	60fb      	str	r3, [r7, #12]
 8005b9c:	e00c      	b.n	8005bb8 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8005b9e:	4b0a      	ldr	r3, [pc, #40]	; (8005bc8 <osKernelInitialize+0x64>)
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d105      	bne.n	8005bb2 <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 8005ba6:	4b08      	ldr	r3, [pc, #32]	; (8005bc8 <osKernelInitialize+0x64>)
 8005ba8:	2201      	movs	r2, #1
 8005baa:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8005bac:	2300      	movs	r3, #0
 8005bae:	60fb      	str	r3, [r7, #12]
 8005bb0:	e002      	b.n	8005bb8 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8005bb2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005bb6:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8005bb8:	68fb      	ldr	r3, [r7, #12]
}
 8005bba:	4618      	mov	r0, r3
 8005bbc:	3714      	adds	r7, #20
 8005bbe:	46bd      	mov	sp, r7
 8005bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bc4:	4770      	bx	lr
 8005bc6:	bf00      	nop
 8005bc8:	20000030 	.word	0x20000030

08005bcc <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8005bcc:	b580      	push	{r7, lr}
 8005bce:	b084      	sub	sp, #16
 8005bd0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005bd2:	f3ef 8305 	mrs	r3, IPSR
 8005bd6:	60bb      	str	r3, [r7, #8]
  return(result);
 8005bd8:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d10f      	bne.n	8005bfe <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005bde:	f3ef 8310 	mrs	r3, PRIMASK
 8005be2:	607b      	str	r3, [r7, #4]
  return(result);
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d109      	bne.n	8005bfe <osKernelStart+0x32>
 8005bea:	4b11      	ldr	r3, [pc, #68]	; (8005c30 <osKernelStart+0x64>)
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	2b02      	cmp	r3, #2
 8005bf0:	d109      	bne.n	8005c06 <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005bf2:	f3ef 8311 	mrs	r3, BASEPRI
 8005bf6:	603b      	str	r3, [r7, #0]
  return(result);
 8005bf8:	683b      	ldr	r3, [r7, #0]
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d003      	beq.n	8005c06 <osKernelStart+0x3a>
    stat = osErrorISR;
 8005bfe:	f06f 0305 	mvn.w	r3, #5
 8005c02:	60fb      	str	r3, [r7, #12]
 8005c04:	e00e      	b.n	8005c24 <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 8005c06:	4b0a      	ldr	r3, [pc, #40]	; (8005c30 <osKernelStart+0x64>)
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	2b01      	cmp	r3, #1
 8005c0c:	d107      	bne.n	8005c1e <osKernelStart+0x52>
      KernelState = osKernelRunning;
 8005c0e:	4b08      	ldr	r3, [pc, #32]	; (8005c30 <osKernelStart+0x64>)
 8005c10:	2202      	movs	r2, #2
 8005c12:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 8005c14:	f001 f94c 	bl	8006eb0 <vTaskStartScheduler>
      stat = osOK;
 8005c18:	2300      	movs	r3, #0
 8005c1a:	60fb      	str	r3, [r7, #12]
 8005c1c:	e002      	b.n	8005c24 <osKernelStart+0x58>
    } else {
      stat = osError;
 8005c1e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005c22:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8005c24:	68fb      	ldr	r3, [r7, #12]
}
 8005c26:	4618      	mov	r0, r3
 8005c28:	3710      	adds	r7, #16
 8005c2a:	46bd      	mov	sp, r7
 8005c2c:	bd80      	pop	{r7, pc}
 8005c2e:	bf00      	nop
 8005c30:	20000030 	.word	0x20000030

08005c34 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8005c34:	b580      	push	{r7, lr}
 8005c36:	b092      	sub	sp, #72	; 0x48
 8005c38:	af04      	add	r7, sp, #16
 8005c3a:	60f8      	str	r0, [r7, #12]
 8005c3c:	60b9      	str	r1, [r7, #8]
 8005c3e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8005c40:	2300      	movs	r3, #0
 8005c42:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005c44:	f3ef 8305 	mrs	r3, IPSR
 8005c48:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8005c4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  if (!IS_IRQ() && (func != NULL)) {
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	f040 8094 	bne.w	8005d7a <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005c52:	f3ef 8310 	mrs	r3, PRIMASK
 8005c56:	623b      	str	r3, [r7, #32]
  return(result);
 8005c58:	6a3b      	ldr	r3, [r7, #32]
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	f040 808d 	bne.w	8005d7a <osThreadNew+0x146>
 8005c60:	4b48      	ldr	r3, [pc, #288]	; (8005d84 <osThreadNew+0x150>)
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	2b02      	cmp	r3, #2
 8005c66:	d106      	bne.n	8005c76 <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005c68:	f3ef 8311 	mrs	r3, BASEPRI
 8005c6c:	61fb      	str	r3, [r7, #28]
  return(result);
 8005c6e:	69fb      	ldr	r3, [r7, #28]
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	f040 8082 	bne.w	8005d7a <osThreadNew+0x146>
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d07e      	beq.n	8005d7a <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 8005c7c:	2380      	movs	r3, #128	; 0x80
 8005c7e:	633b      	str	r3, [r7, #48]	; 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 8005c80:	2318      	movs	r3, #24
 8005c82:	62fb      	str	r3, [r7, #44]	; 0x2c

    empty = '\0';
 8005c84:	2300      	movs	r3, #0
 8005c86:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 8005c88:	f107 031b 	add.w	r3, r7, #27
 8005c8c:	637b      	str	r3, [r7, #52]	; 0x34
    mem   = -1;
 8005c8e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005c92:	62bb      	str	r3, [r7, #40]	; 0x28

    if (attr != NULL) {
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d045      	beq.n	8005d26 <osThreadNew+0xf2>
      if (attr->name != NULL) {
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d002      	beq.n	8005ca8 <osThreadNew+0x74>
        name = attr->name;
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	637b      	str	r3, [r7, #52]	; 0x34
      }
      if (attr->priority != osPriorityNone) {
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	699b      	ldr	r3, [r3, #24]
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	d002      	beq.n	8005cb6 <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	699b      	ldr	r3, [r3, #24]
 8005cb4:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8005cb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d008      	beq.n	8005cce <osThreadNew+0x9a>
 8005cbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005cbe:	2b38      	cmp	r3, #56	; 0x38
 8005cc0:	d805      	bhi.n	8005cce <osThreadNew+0x9a>
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	685b      	ldr	r3, [r3, #4]
 8005cc6:	f003 0301 	and.w	r3, r3, #1
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d001      	beq.n	8005cd2 <osThreadNew+0x9e>
        return (NULL);
 8005cce:	2300      	movs	r3, #0
 8005cd0:	e054      	b.n	8005d7c <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	695b      	ldr	r3, [r3, #20]
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d003      	beq.n	8005ce2 <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	695b      	ldr	r3, [r3, #20]
 8005cde:	089b      	lsrs	r3, r3, #2
 8005ce0:	633b      	str	r3, [r7, #48]	; 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	689b      	ldr	r3, [r3, #8]
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d00e      	beq.n	8005d08 <osThreadNew+0xd4>
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	68db      	ldr	r3, [r3, #12]
 8005cee:	2b5b      	cmp	r3, #91	; 0x5b
 8005cf0:	d90a      	bls.n	8005d08 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d006      	beq.n	8005d08 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	695b      	ldr	r3, [r3, #20]
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d002      	beq.n	8005d08 <osThreadNew+0xd4>
        mem = 1;
 8005d02:	2301      	movs	r3, #1
 8005d04:	62bb      	str	r3, [r7, #40]	; 0x28
 8005d06:	e010      	b.n	8005d2a <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	689b      	ldr	r3, [r3, #8]
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d10c      	bne.n	8005d2a <osThreadNew+0xf6>
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	68db      	ldr	r3, [r3, #12]
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	d108      	bne.n	8005d2a <osThreadNew+0xf6>
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	691b      	ldr	r3, [r3, #16]
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	d104      	bne.n	8005d2a <osThreadNew+0xf6>
          mem = 0;
 8005d20:	2300      	movs	r3, #0
 8005d22:	62bb      	str	r3, [r7, #40]	; 0x28
 8005d24:	e001      	b.n	8005d2a <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 8005d26:	2300      	movs	r3, #0
 8005d28:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if (mem == 1) {
 8005d2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d2c:	2b01      	cmp	r3, #1
 8005d2e:	d110      	bne.n	8005d52 <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8005d34:	687a      	ldr	r2, [r7, #4]
 8005d36:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005d38:	9202      	str	r2, [sp, #8]
 8005d3a:	9301      	str	r3, [sp, #4]
 8005d3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d3e:	9300      	str	r3, [sp, #0]
 8005d40:	68bb      	ldr	r3, [r7, #8]
 8005d42:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005d44:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8005d46:	68f8      	ldr	r0, [r7, #12]
 8005d48:	f000 feea 	bl	8006b20 <xTaskCreateStatic>
 8005d4c:	4603      	mov	r3, r0
 8005d4e:	617b      	str	r3, [r7, #20]
 8005d50:	e013      	b.n	8005d7a <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 8005d52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	d110      	bne.n	8005d7a <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8005d58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d5a:	b29a      	uxth	r2, r3
 8005d5c:	f107 0314 	add.w	r3, r7, #20
 8005d60:	9301      	str	r3, [sp, #4]
 8005d62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d64:	9300      	str	r3, [sp, #0]
 8005d66:	68bb      	ldr	r3, [r7, #8]
 8005d68:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8005d6a:	68f8      	ldr	r0, [r7, #12]
 8005d6c:	f000 ff31 	bl	8006bd2 <xTaskCreate>
 8005d70:	4603      	mov	r3, r0
 8005d72:	2b01      	cmp	r3, #1
 8005d74:	d001      	beq.n	8005d7a <osThreadNew+0x146>
          hTask = NULL;
 8005d76:	2300      	movs	r3, #0
 8005d78:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8005d7a:	697b      	ldr	r3, [r7, #20]
}
 8005d7c:	4618      	mov	r0, r3
 8005d7e:	3738      	adds	r7, #56	; 0x38
 8005d80:	46bd      	mov	sp, r7
 8005d82:	bd80      	pop	{r7, pc}
 8005d84:	20000030 	.word	0x20000030

08005d88 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8005d88:	b580      	push	{r7, lr}
 8005d8a:	b086      	sub	sp, #24
 8005d8c:	af00      	add	r7, sp, #0
 8005d8e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005d90:	f3ef 8305 	mrs	r3, IPSR
 8005d94:	613b      	str	r3, [r7, #16]
  return(result);
 8005d96:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d10f      	bne.n	8005dbc <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005d9c:	f3ef 8310 	mrs	r3, PRIMASK
 8005da0:	60fb      	str	r3, [r7, #12]
  return(result);
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	d109      	bne.n	8005dbc <osDelay+0x34>
 8005da8:	4b0d      	ldr	r3, [pc, #52]	; (8005de0 <osDelay+0x58>)
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	2b02      	cmp	r3, #2
 8005dae:	d109      	bne.n	8005dc4 <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005db0:	f3ef 8311 	mrs	r3, BASEPRI
 8005db4:	60bb      	str	r3, [r7, #8]
  return(result);
 8005db6:	68bb      	ldr	r3, [r7, #8]
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	d003      	beq.n	8005dc4 <osDelay+0x3c>
    stat = osErrorISR;
 8005dbc:	f06f 0305 	mvn.w	r3, #5
 8005dc0:	617b      	str	r3, [r7, #20]
 8005dc2:	e007      	b.n	8005dd4 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8005dc4:	2300      	movs	r3, #0
 8005dc6:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d002      	beq.n	8005dd4 <osDelay+0x4c>
      vTaskDelay(ticks);
 8005dce:	6878      	ldr	r0, [r7, #4]
 8005dd0:	f001 f83a 	bl	8006e48 <vTaskDelay>
    }
  }

  return (stat);
 8005dd4:	697b      	ldr	r3, [r7, #20]
}
 8005dd6:	4618      	mov	r0, r3
 8005dd8:	3718      	adds	r7, #24
 8005dda:	46bd      	mov	sp, r7
 8005ddc:	bd80      	pop	{r7, pc}
 8005dde:	bf00      	nop
 8005de0:	20000030 	.word	0x20000030

08005de4 <osSemaphoreRelease>:
  }

  return (stat);
}

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 8005de4:	b580      	push	{r7, lr}
 8005de6:	b088      	sub	sp, #32
 8005de8:	af00      	add	r7, sp, #0
 8005dea:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8005df0:	2300      	movs	r3, #0
 8005df2:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 8005df4:	69bb      	ldr	r3, [r7, #24]
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d103      	bne.n	8005e02 <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 8005dfa:	f06f 0303 	mvn.w	r3, #3
 8005dfe:	61fb      	str	r3, [r7, #28]
 8005e00:	e03e      	b.n	8005e80 <osSemaphoreRelease+0x9c>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005e02:	f3ef 8305 	mrs	r3, IPSR
 8005e06:	617b      	str	r3, [r7, #20]
  return(result);
 8005e08:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d10f      	bne.n	8005e2e <osSemaphoreRelease+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005e0e:	f3ef 8310 	mrs	r3, PRIMASK
 8005e12:	613b      	str	r3, [r7, #16]
  return(result);
 8005e14:	693b      	ldr	r3, [r7, #16]
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d109      	bne.n	8005e2e <osSemaphoreRelease+0x4a>
 8005e1a:	4b1c      	ldr	r3, [pc, #112]	; (8005e8c <osSemaphoreRelease+0xa8>)
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	2b02      	cmp	r3, #2
 8005e20:	d120      	bne.n	8005e64 <osSemaphoreRelease+0x80>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8005e22:	f3ef 8311 	mrs	r3, BASEPRI
 8005e26:	60fb      	str	r3, [r7, #12]
  return(result);
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d01a      	beq.n	8005e64 <osSemaphoreRelease+0x80>
    yield = pdFALSE;
 8005e2e:	2300      	movs	r3, #0
 8005e30:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8005e32:	f107 0308 	add.w	r3, r7, #8
 8005e36:	4619      	mov	r1, r3
 8005e38:	69b8      	ldr	r0, [r7, #24]
 8005e3a:	f000 fb9f 	bl	800657c <xQueueGiveFromISR>
 8005e3e:	4603      	mov	r3, r0
 8005e40:	2b01      	cmp	r3, #1
 8005e42:	d003      	beq.n	8005e4c <osSemaphoreRelease+0x68>
      stat = osErrorResource;
 8005e44:	f06f 0302 	mvn.w	r3, #2
 8005e48:	61fb      	str	r3, [r7, #28]
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8005e4a:	e018      	b.n	8005e7e <osSemaphoreRelease+0x9a>
    } else {
      portYIELD_FROM_ISR (yield);
 8005e4c:	68bb      	ldr	r3, [r7, #8]
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	d015      	beq.n	8005e7e <osSemaphoreRelease+0x9a>
 8005e52:	4b0f      	ldr	r3, [pc, #60]	; (8005e90 <osSemaphoreRelease+0xac>)
 8005e54:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005e58:	601a      	str	r2, [r3, #0]
 8005e5a:	f3bf 8f4f 	dsb	sy
 8005e5e:	f3bf 8f6f 	isb	sy
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8005e62:	e00c      	b.n	8005e7e <osSemaphoreRelease+0x9a>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8005e64:	2300      	movs	r3, #0
 8005e66:	2200      	movs	r2, #0
 8005e68:	2100      	movs	r1, #0
 8005e6a:	69b8      	ldr	r0, [r7, #24]
 8005e6c:	f000 f9f8 	bl	8006260 <xQueueGenericSend>
 8005e70:	4603      	mov	r3, r0
 8005e72:	2b01      	cmp	r3, #1
 8005e74:	d004      	beq.n	8005e80 <osSemaphoreRelease+0x9c>
      stat = osErrorResource;
 8005e76:	f06f 0302 	mvn.w	r3, #2
 8005e7a:	61fb      	str	r3, [r7, #28]
 8005e7c:	e000      	b.n	8005e80 <osSemaphoreRelease+0x9c>
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8005e7e:	bf00      	nop
    }
  }

  return (stat);
 8005e80:	69fb      	ldr	r3, [r7, #28]
}
 8005e82:	4618      	mov	r0, r3
 8005e84:	3720      	adds	r7, #32
 8005e86:	46bd      	mov	sp, r7
 8005e88:	bd80      	pop	{r7, pc}
 8005e8a:	bf00      	nop
 8005e8c:	20000030 	.word	0x20000030
 8005e90:	e000ed04 	.word	0xe000ed04

08005e94 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8005e94:	b480      	push	{r7}
 8005e96:	b085      	sub	sp, #20
 8005e98:	af00      	add	r7, sp, #0
 8005e9a:	60f8      	str	r0, [r7, #12]
 8005e9c:	60b9      	str	r1, [r7, #8]
 8005e9e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	4a07      	ldr	r2, [pc, #28]	; (8005ec0 <vApplicationGetIdleTaskMemory+0x2c>)
 8005ea4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8005ea6:	68bb      	ldr	r3, [r7, #8]
 8005ea8:	4a06      	ldr	r2, [pc, #24]	; (8005ec4 <vApplicationGetIdleTaskMemory+0x30>)
 8005eaa:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	2280      	movs	r2, #128	; 0x80
 8005eb0:	601a      	str	r2, [r3, #0]
}
 8005eb2:	bf00      	nop
 8005eb4:	3714      	adds	r7, #20
 8005eb6:	46bd      	mov	sp, r7
 8005eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ebc:	4770      	bx	lr
 8005ebe:	bf00      	nop
 8005ec0:	20000034 	.word	0x20000034
 8005ec4:	20000090 	.word	0x20000090

08005ec8 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8005ec8:	b480      	push	{r7}
 8005eca:	b085      	sub	sp, #20
 8005ecc:	af00      	add	r7, sp, #0
 8005ece:	60f8      	str	r0, [r7, #12]
 8005ed0:	60b9      	str	r1, [r7, #8]
 8005ed2:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	4a07      	ldr	r2, [pc, #28]	; (8005ef4 <vApplicationGetTimerTaskMemory+0x2c>)
 8005ed8:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8005eda:	68bb      	ldr	r3, [r7, #8]
 8005edc:	4a06      	ldr	r2, [pc, #24]	; (8005ef8 <vApplicationGetTimerTaskMemory+0x30>)
 8005ede:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005ee6:	601a      	str	r2, [r3, #0]
}
 8005ee8:	bf00      	nop
 8005eea:	3714      	adds	r7, #20
 8005eec:	46bd      	mov	sp, r7
 8005eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ef2:	4770      	bx	lr
 8005ef4:	20000290 	.word	0x20000290
 8005ef8:	200002ec 	.word	0x200002ec

08005efc <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005efc:	b480      	push	{r7}
 8005efe:	b083      	sub	sp, #12
 8005f00:	af00      	add	r7, sp, #0
 8005f02:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	f103 0208 	add.w	r2, r3, #8
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005f14:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	f103 0208 	add.w	r2, r3, #8
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	f103 0208 	add.w	r2, r3, #8
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	2200      	movs	r2, #0
 8005f2e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005f30:	bf00      	nop
 8005f32:	370c      	adds	r7, #12
 8005f34:	46bd      	mov	sp, r7
 8005f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f3a:	4770      	bx	lr

08005f3c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005f3c:	b480      	push	{r7}
 8005f3e:	b083      	sub	sp, #12
 8005f40:	af00      	add	r7, sp, #0
 8005f42:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	2200      	movs	r2, #0
 8005f48:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005f4a:	bf00      	nop
 8005f4c:	370c      	adds	r7, #12
 8005f4e:	46bd      	mov	sp, r7
 8005f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f54:	4770      	bx	lr

08005f56 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005f56:	b480      	push	{r7}
 8005f58:	b085      	sub	sp, #20
 8005f5a:	af00      	add	r7, sp, #0
 8005f5c:	6078      	str	r0, [r7, #4]
 8005f5e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	685b      	ldr	r3, [r3, #4]
 8005f64:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005f66:	683b      	ldr	r3, [r7, #0]
 8005f68:	68fa      	ldr	r2, [r7, #12]
 8005f6a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	689a      	ldr	r2, [r3, #8]
 8005f70:	683b      	ldr	r3, [r7, #0]
 8005f72:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	689b      	ldr	r3, [r3, #8]
 8005f78:	683a      	ldr	r2, [r7, #0]
 8005f7a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	683a      	ldr	r2, [r7, #0]
 8005f80:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8005f82:	683b      	ldr	r3, [r7, #0]
 8005f84:	687a      	ldr	r2, [r7, #4]
 8005f86:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	1c5a      	adds	r2, r3, #1
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	601a      	str	r2, [r3, #0]
}
 8005f92:	bf00      	nop
 8005f94:	3714      	adds	r7, #20
 8005f96:	46bd      	mov	sp, r7
 8005f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f9c:	4770      	bx	lr

08005f9e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005f9e:	b480      	push	{r7}
 8005fa0:	b085      	sub	sp, #20
 8005fa2:	af00      	add	r7, sp, #0
 8005fa4:	6078      	str	r0, [r7, #4]
 8005fa6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005fa8:	683b      	ldr	r3, [r7, #0]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005fae:	68bb      	ldr	r3, [r7, #8]
 8005fb0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005fb4:	d103      	bne.n	8005fbe <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	691b      	ldr	r3, [r3, #16]
 8005fba:	60fb      	str	r3, [r7, #12]
 8005fbc:	e00c      	b.n	8005fd8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	3308      	adds	r3, #8
 8005fc2:	60fb      	str	r3, [r7, #12]
 8005fc4:	e002      	b.n	8005fcc <vListInsert+0x2e>
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	685b      	ldr	r3, [r3, #4]
 8005fca:	60fb      	str	r3, [r7, #12]
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	685b      	ldr	r3, [r3, #4]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	68ba      	ldr	r2, [r7, #8]
 8005fd4:	429a      	cmp	r2, r3
 8005fd6:	d2f6      	bcs.n	8005fc6 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	685a      	ldr	r2, [r3, #4]
 8005fdc:	683b      	ldr	r3, [r7, #0]
 8005fde:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005fe0:	683b      	ldr	r3, [r7, #0]
 8005fe2:	685b      	ldr	r3, [r3, #4]
 8005fe4:	683a      	ldr	r2, [r7, #0]
 8005fe6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005fe8:	683b      	ldr	r3, [r7, #0]
 8005fea:	68fa      	ldr	r2, [r7, #12]
 8005fec:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	683a      	ldr	r2, [r7, #0]
 8005ff2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8005ff4:	683b      	ldr	r3, [r7, #0]
 8005ff6:	687a      	ldr	r2, [r7, #4]
 8005ff8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	1c5a      	adds	r2, r3, #1
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	601a      	str	r2, [r3, #0]
}
 8006004:	bf00      	nop
 8006006:	3714      	adds	r7, #20
 8006008:	46bd      	mov	sp, r7
 800600a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800600e:	4770      	bx	lr

08006010 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8006010:	b480      	push	{r7}
 8006012:	b085      	sub	sp, #20
 8006014:	af00      	add	r7, sp, #0
 8006016:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	691b      	ldr	r3, [r3, #16]
 800601c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	685b      	ldr	r3, [r3, #4]
 8006022:	687a      	ldr	r2, [r7, #4]
 8006024:	6892      	ldr	r2, [r2, #8]
 8006026:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	689b      	ldr	r3, [r3, #8]
 800602c:	687a      	ldr	r2, [r7, #4]
 800602e:	6852      	ldr	r2, [r2, #4]
 8006030:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	685b      	ldr	r3, [r3, #4]
 8006036:	687a      	ldr	r2, [r7, #4]
 8006038:	429a      	cmp	r2, r3
 800603a:	d103      	bne.n	8006044 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	689a      	ldr	r2, [r3, #8]
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	2200      	movs	r2, #0
 8006048:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	1e5a      	subs	r2, r3, #1
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	681b      	ldr	r3, [r3, #0]
}
 8006058:	4618      	mov	r0, r3
 800605a:	3714      	adds	r7, #20
 800605c:	46bd      	mov	sp, r7
 800605e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006062:	4770      	bx	lr

08006064 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8006064:	b580      	push	{r7, lr}
 8006066:	b084      	sub	sp, #16
 8006068:	af00      	add	r7, sp, #0
 800606a:	6078      	str	r0, [r7, #4]
 800606c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	2b00      	cmp	r3, #0
 8006076:	d109      	bne.n	800608c <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8006078:	f04f 0350 	mov.w	r3, #80	; 0x50
 800607c:	f383 8811 	msr	BASEPRI, r3
 8006080:	f3bf 8f6f 	isb	sy
 8006084:	f3bf 8f4f 	dsb	sy
 8006088:	60bb      	str	r3, [r7, #8]
 800608a:	e7fe      	b.n	800608a <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 800608c:	f002 f85e 	bl	800814c <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	681a      	ldr	r2, [r3, #0]
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006098:	68f9      	ldr	r1, [r7, #12]
 800609a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800609c:	fb01 f303 	mul.w	r3, r1, r3
 80060a0:	441a      	add	r2, r3
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	2200      	movs	r2, #0
 80060aa:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	681a      	ldr	r2, [r3, #0]
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	681a      	ldr	r2, [r3, #0]
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80060bc:	3b01      	subs	r3, #1
 80060be:	68f9      	ldr	r1, [r7, #12]
 80060c0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80060c2:	fb01 f303 	mul.w	r3, r1, r3
 80060c6:	441a      	add	r2, r3
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	22ff      	movs	r2, #255	; 0xff
 80060d0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	22ff      	movs	r2, #255	; 0xff
 80060d8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80060dc:	683b      	ldr	r3, [r7, #0]
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d114      	bne.n	800610c <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	691b      	ldr	r3, [r3, #16]
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	d01a      	beq.n	8006120 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	3310      	adds	r3, #16
 80060ee:	4618      	mov	r0, r3
 80060f0:	f001 f964 	bl	80073bc <xTaskRemoveFromEventList>
 80060f4:	4603      	mov	r3, r0
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d012      	beq.n	8006120 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80060fa:	4b0d      	ldr	r3, [pc, #52]	; (8006130 <xQueueGenericReset+0xcc>)
 80060fc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006100:	601a      	str	r2, [r3, #0]
 8006102:	f3bf 8f4f 	dsb	sy
 8006106:	f3bf 8f6f 	isb	sy
 800610a:	e009      	b.n	8006120 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	3310      	adds	r3, #16
 8006110:	4618      	mov	r0, r3
 8006112:	f7ff fef3 	bl	8005efc <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	3324      	adds	r3, #36	; 0x24
 800611a:	4618      	mov	r0, r3
 800611c:	f7ff feee 	bl	8005efc <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8006120:	f002 f842 	bl	80081a8 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8006124:	2301      	movs	r3, #1
}
 8006126:	4618      	mov	r0, r3
 8006128:	3710      	adds	r7, #16
 800612a:	46bd      	mov	sp, r7
 800612c:	bd80      	pop	{r7, pc}
 800612e:	bf00      	nop
 8006130:	e000ed04 	.word	0xe000ed04

08006134 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8006134:	b580      	push	{r7, lr}
 8006136:	b08e      	sub	sp, #56	; 0x38
 8006138:	af02      	add	r7, sp, #8
 800613a:	60f8      	str	r0, [r7, #12]
 800613c:	60b9      	str	r1, [r7, #8]
 800613e:	607a      	str	r2, [r7, #4]
 8006140:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	2b00      	cmp	r3, #0
 8006146:	d109      	bne.n	800615c <xQueueGenericCreateStatic+0x28>
 8006148:	f04f 0350 	mov.w	r3, #80	; 0x50
 800614c:	f383 8811 	msr	BASEPRI, r3
 8006150:	f3bf 8f6f 	isb	sy
 8006154:	f3bf 8f4f 	dsb	sy
 8006158:	62bb      	str	r3, [r7, #40]	; 0x28
 800615a:	e7fe      	b.n	800615a <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800615c:	683b      	ldr	r3, [r7, #0]
 800615e:	2b00      	cmp	r3, #0
 8006160:	d109      	bne.n	8006176 <xQueueGenericCreateStatic+0x42>
 8006162:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006166:	f383 8811 	msr	BASEPRI, r3
 800616a:	f3bf 8f6f 	isb	sy
 800616e:	f3bf 8f4f 	dsb	sy
 8006172:	627b      	str	r3, [r7, #36]	; 0x24
 8006174:	e7fe      	b.n	8006174 <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	2b00      	cmp	r3, #0
 800617a:	d002      	beq.n	8006182 <xQueueGenericCreateStatic+0x4e>
 800617c:	68bb      	ldr	r3, [r7, #8]
 800617e:	2b00      	cmp	r3, #0
 8006180:	d001      	beq.n	8006186 <xQueueGenericCreateStatic+0x52>
 8006182:	2301      	movs	r3, #1
 8006184:	e000      	b.n	8006188 <xQueueGenericCreateStatic+0x54>
 8006186:	2300      	movs	r3, #0
 8006188:	2b00      	cmp	r3, #0
 800618a:	d109      	bne.n	80061a0 <xQueueGenericCreateStatic+0x6c>
 800618c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006190:	f383 8811 	msr	BASEPRI, r3
 8006194:	f3bf 8f6f 	isb	sy
 8006198:	f3bf 8f4f 	dsb	sy
 800619c:	623b      	str	r3, [r7, #32]
 800619e:	e7fe      	b.n	800619e <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	d102      	bne.n	80061ac <xQueueGenericCreateStatic+0x78>
 80061a6:	68bb      	ldr	r3, [r7, #8]
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	d101      	bne.n	80061b0 <xQueueGenericCreateStatic+0x7c>
 80061ac:	2301      	movs	r3, #1
 80061ae:	e000      	b.n	80061b2 <xQueueGenericCreateStatic+0x7e>
 80061b0:	2300      	movs	r3, #0
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	d109      	bne.n	80061ca <xQueueGenericCreateStatic+0x96>
 80061b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061ba:	f383 8811 	msr	BASEPRI, r3
 80061be:	f3bf 8f6f 	isb	sy
 80061c2:	f3bf 8f4f 	dsb	sy
 80061c6:	61fb      	str	r3, [r7, #28]
 80061c8:	e7fe      	b.n	80061c8 <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80061ca:	2350      	movs	r3, #80	; 0x50
 80061cc:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80061ce:	697b      	ldr	r3, [r7, #20]
 80061d0:	2b50      	cmp	r3, #80	; 0x50
 80061d2:	d009      	beq.n	80061e8 <xQueueGenericCreateStatic+0xb4>
 80061d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061d8:	f383 8811 	msr	BASEPRI, r3
 80061dc:	f3bf 8f6f 	isb	sy
 80061e0:	f3bf 8f4f 	dsb	sy
 80061e4:	61bb      	str	r3, [r7, #24]
 80061e6:	e7fe      	b.n	80061e6 <xQueueGenericCreateStatic+0xb2>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80061e8:	683b      	ldr	r3, [r7, #0]
 80061ea:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80061ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d00d      	beq.n	800620e <xQueueGenericCreateStatic+0xda>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80061f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80061f4:	2201      	movs	r2, #1
 80061f6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80061fa:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80061fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006200:	9300      	str	r3, [sp, #0]
 8006202:	4613      	mov	r3, r2
 8006204:	687a      	ldr	r2, [r7, #4]
 8006206:	68b9      	ldr	r1, [r7, #8]
 8006208:	68f8      	ldr	r0, [r7, #12]
 800620a:	f000 f805 	bl	8006218 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 800620e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8006210:	4618      	mov	r0, r3
 8006212:	3730      	adds	r7, #48	; 0x30
 8006214:	46bd      	mov	sp, r7
 8006216:	bd80      	pop	{r7, pc}

08006218 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8006218:	b580      	push	{r7, lr}
 800621a:	b084      	sub	sp, #16
 800621c:	af00      	add	r7, sp, #0
 800621e:	60f8      	str	r0, [r7, #12]
 8006220:	60b9      	str	r1, [r7, #8]
 8006222:	607a      	str	r2, [r7, #4]
 8006224:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8006226:	68bb      	ldr	r3, [r7, #8]
 8006228:	2b00      	cmp	r3, #0
 800622a:	d103      	bne.n	8006234 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800622c:	69bb      	ldr	r3, [r7, #24]
 800622e:	69ba      	ldr	r2, [r7, #24]
 8006230:	601a      	str	r2, [r3, #0]
 8006232:	e002      	b.n	800623a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8006234:	69bb      	ldr	r3, [r7, #24]
 8006236:	687a      	ldr	r2, [r7, #4]
 8006238:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800623a:	69bb      	ldr	r3, [r7, #24]
 800623c:	68fa      	ldr	r2, [r7, #12]
 800623e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8006240:	69bb      	ldr	r3, [r7, #24]
 8006242:	68ba      	ldr	r2, [r7, #8]
 8006244:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8006246:	2101      	movs	r1, #1
 8006248:	69b8      	ldr	r0, [r7, #24]
 800624a:	f7ff ff0b 	bl	8006064 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800624e:	69bb      	ldr	r3, [r7, #24]
 8006250:	78fa      	ldrb	r2, [r7, #3]
 8006252:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8006256:	bf00      	nop
 8006258:	3710      	adds	r7, #16
 800625a:	46bd      	mov	sp, r7
 800625c:	bd80      	pop	{r7, pc}
	...

08006260 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8006260:	b580      	push	{r7, lr}
 8006262:	b08e      	sub	sp, #56	; 0x38
 8006264:	af00      	add	r7, sp, #0
 8006266:	60f8      	str	r0, [r7, #12]
 8006268:	60b9      	str	r1, [r7, #8]
 800626a:	607a      	str	r2, [r7, #4]
 800626c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800626e:	2300      	movs	r3, #0
 8006270:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8006276:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006278:	2b00      	cmp	r3, #0
 800627a:	d109      	bne.n	8006290 <xQueueGenericSend+0x30>
 800627c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006280:	f383 8811 	msr	BASEPRI, r3
 8006284:	f3bf 8f6f 	isb	sy
 8006288:	f3bf 8f4f 	dsb	sy
 800628c:	62bb      	str	r3, [r7, #40]	; 0x28
 800628e:	e7fe      	b.n	800628e <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006290:	68bb      	ldr	r3, [r7, #8]
 8006292:	2b00      	cmp	r3, #0
 8006294:	d103      	bne.n	800629e <xQueueGenericSend+0x3e>
 8006296:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006298:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800629a:	2b00      	cmp	r3, #0
 800629c:	d101      	bne.n	80062a2 <xQueueGenericSend+0x42>
 800629e:	2301      	movs	r3, #1
 80062a0:	e000      	b.n	80062a4 <xQueueGenericSend+0x44>
 80062a2:	2300      	movs	r3, #0
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	d109      	bne.n	80062bc <xQueueGenericSend+0x5c>
 80062a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062ac:	f383 8811 	msr	BASEPRI, r3
 80062b0:	f3bf 8f6f 	isb	sy
 80062b4:	f3bf 8f4f 	dsb	sy
 80062b8:	627b      	str	r3, [r7, #36]	; 0x24
 80062ba:	e7fe      	b.n	80062ba <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80062bc:	683b      	ldr	r3, [r7, #0]
 80062be:	2b02      	cmp	r3, #2
 80062c0:	d103      	bne.n	80062ca <xQueueGenericSend+0x6a>
 80062c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80062c6:	2b01      	cmp	r3, #1
 80062c8:	d101      	bne.n	80062ce <xQueueGenericSend+0x6e>
 80062ca:	2301      	movs	r3, #1
 80062cc:	e000      	b.n	80062d0 <xQueueGenericSend+0x70>
 80062ce:	2300      	movs	r3, #0
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	d109      	bne.n	80062e8 <xQueueGenericSend+0x88>
 80062d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062d8:	f383 8811 	msr	BASEPRI, r3
 80062dc:	f3bf 8f6f 	isb	sy
 80062e0:	f3bf 8f4f 	dsb	sy
 80062e4:	623b      	str	r3, [r7, #32]
 80062e6:	e7fe      	b.n	80062e6 <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80062e8:	f001 fa24 	bl	8007734 <xTaskGetSchedulerState>
 80062ec:	4603      	mov	r3, r0
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d102      	bne.n	80062f8 <xQueueGenericSend+0x98>
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	d101      	bne.n	80062fc <xQueueGenericSend+0x9c>
 80062f8:	2301      	movs	r3, #1
 80062fa:	e000      	b.n	80062fe <xQueueGenericSend+0x9e>
 80062fc:	2300      	movs	r3, #0
 80062fe:	2b00      	cmp	r3, #0
 8006300:	d109      	bne.n	8006316 <xQueueGenericSend+0xb6>
 8006302:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006306:	f383 8811 	msr	BASEPRI, r3
 800630a:	f3bf 8f6f 	isb	sy
 800630e:	f3bf 8f4f 	dsb	sy
 8006312:	61fb      	str	r3, [r7, #28]
 8006314:	e7fe      	b.n	8006314 <xQueueGenericSend+0xb4>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006316:	f001 ff19 	bl	800814c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800631a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800631c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800631e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006320:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006322:	429a      	cmp	r2, r3
 8006324:	d302      	bcc.n	800632c <xQueueGenericSend+0xcc>
 8006326:	683b      	ldr	r3, [r7, #0]
 8006328:	2b02      	cmp	r3, #2
 800632a:	d129      	bne.n	8006380 <xQueueGenericSend+0x120>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800632c:	683a      	ldr	r2, [r7, #0]
 800632e:	68b9      	ldr	r1, [r7, #8]
 8006330:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006332:	f000 fa89 	bl	8006848 <prvCopyDataToQueue>
 8006336:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006338:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800633a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800633c:	2b00      	cmp	r3, #0
 800633e:	d010      	beq.n	8006362 <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006340:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006342:	3324      	adds	r3, #36	; 0x24
 8006344:	4618      	mov	r0, r3
 8006346:	f001 f839 	bl	80073bc <xTaskRemoveFromEventList>
 800634a:	4603      	mov	r3, r0
 800634c:	2b00      	cmp	r3, #0
 800634e:	d013      	beq.n	8006378 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8006350:	4b3f      	ldr	r3, [pc, #252]	; (8006450 <xQueueGenericSend+0x1f0>)
 8006352:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006356:	601a      	str	r2, [r3, #0]
 8006358:	f3bf 8f4f 	dsb	sy
 800635c:	f3bf 8f6f 	isb	sy
 8006360:	e00a      	b.n	8006378 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8006362:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006364:	2b00      	cmp	r3, #0
 8006366:	d007      	beq.n	8006378 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8006368:	4b39      	ldr	r3, [pc, #228]	; (8006450 <xQueueGenericSend+0x1f0>)
 800636a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800636e:	601a      	str	r2, [r3, #0]
 8006370:	f3bf 8f4f 	dsb	sy
 8006374:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8006378:	f001 ff16 	bl	80081a8 <vPortExitCritical>
				return pdPASS;
 800637c:	2301      	movs	r3, #1
 800637e:	e063      	b.n	8006448 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	2b00      	cmp	r3, #0
 8006384:	d103      	bne.n	800638e <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006386:	f001 ff0f 	bl	80081a8 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800638a:	2300      	movs	r3, #0
 800638c:	e05c      	b.n	8006448 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800638e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006390:	2b00      	cmp	r3, #0
 8006392:	d106      	bne.n	80063a2 <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006394:	f107 0314 	add.w	r3, r7, #20
 8006398:	4618      	mov	r0, r3
 800639a:	f001 f871 	bl	8007480 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800639e:	2301      	movs	r3, #1
 80063a0:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80063a2:	f001 ff01 	bl	80081a8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80063a6:	f000 fde7 	bl	8006f78 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80063aa:	f001 fecf 	bl	800814c <vPortEnterCritical>
 80063ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063b0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80063b4:	b25b      	sxtb	r3, r3
 80063b6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80063ba:	d103      	bne.n	80063c4 <xQueueGenericSend+0x164>
 80063bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063be:	2200      	movs	r2, #0
 80063c0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80063c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063c6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80063ca:	b25b      	sxtb	r3, r3
 80063cc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80063d0:	d103      	bne.n	80063da <xQueueGenericSend+0x17a>
 80063d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063d4:	2200      	movs	r2, #0
 80063d6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80063da:	f001 fee5 	bl	80081a8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80063de:	1d3a      	adds	r2, r7, #4
 80063e0:	f107 0314 	add.w	r3, r7, #20
 80063e4:	4611      	mov	r1, r2
 80063e6:	4618      	mov	r0, r3
 80063e8:	f001 f860 	bl	80074ac <xTaskCheckForTimeOut>
 80063ec:	4603      	mov	r3, r0
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d124      	bne.n	800643c <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80063f2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80063f4:	f000 fb20 	bl	8006a38 <prvIsQueueFull>
 80063f8:	4603      	mov	r3, r0
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	d018      	beq.n	8006430 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80063fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006400:	3310      	adds	r3, #16
 8006402:	687a      	ldr	r2, [r7, #4]
 8006404:	4611      	mov	r1, r2
 8006406:	4618      	mov	r0, r3
 8006408:	f000 ff8a 	bl	8007320 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800640c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800640e:	f000 faab 	bl	8006968 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8006412:	f000 fdbf 	bl	8006f94 <xTaskResumeAll>
 8006416:	4603      	mov	r3, r0
 8006418:	2b00      	cmp	r3, #0
 800641a:	f47f af7c 	bne.w	8006316 <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 800641e:	4b0c      	ldr	r3, [pc, #48]	; (8006450 <xQueueGenericSend+0x1f0>)
 8006420:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006424:	601a      	str	r2, [r3, #0]
 8006426:	f3bf 8f4f 	dsb	sy
 800642a:	f3bf 8f6f 	isb	sy
 800642e:	e772      	b.n	8006316 <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8006430:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006432:	f000 fa99 	bl	8006968 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006436:	f000 fdad 	bl	8006f94 <xTaskResumeAll>
 800643a:	e76c      	b.n	8006316 <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800643c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800643e:	f000 fa93 	bl	8006968 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006442:	f000 fda7 	bl	8006f94 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8006446:	2300      	movs	r3, #0
		}
	}
}
 8006448:	4618      	mov	r0, r3
 800644a:	3738      	adds	r7, #56	; 0x38
 800644c:	46bd      	mov	sp, r7
 800644e:	bd80      	pop	{r7, pc}
 8006450:	e000ed04 	.word	0xe000ed04

08006454 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8006454:	b580      	push	{r7, lr}
 8006456:	b08e      	sub	sp, #56	; 0x38
 8006458:	af00      	add	r7, sp, #0
 800645a:	60f8      	str	r0, [r7, #12]
 800645c:	60b9      	str	r1, [r7, #8]
 800645e:	607a      	str	r2, [r7, #4]
 8006460:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8006466:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006468:	2b00      	cmp	r3, #0
 800646a:	d109      	bne.n	8006480 <xQueueGenericSendFromISR+0x2c>
 800646c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006470:	f383 8811 	msr	BASEPRI, r3
 8006474:	f3bf 8f6f 	isb	sy
 8006478:	f3bf 8f4f 	dsb	sy
 800647c:	627b      	str	r3, [r7, #36]	; 0x24
 800647e:	e7fe      	b.n	800647e <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006480:	68bb      	ldr	r3, [r7, #8]
 8006482:	2b00      	cmp	r3, #0
 8006484:	d103      	bne.n	800648e <xQueueGenericSendFromISR+0x3a>
 8006486:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006488:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800648a:	2b00      	cmp	r3, #0
 800648c:	d101      	bne.n	8006492 <xQueueGenericSendFromISR+0x3e>
 800648e:	2301      	movs	r3, #1
 8006490:	e000      	b.n	8006494 <xQueueGenericSendFromISR+0x40>
 8006492:	2300      	movs	r3, #0
 8006494:	2b00      	cmp	r3, #0
 8006496:	d109      	bne.n	80064ac <xQueueGenericSendFromISR+0x58>
 8006498:	f04f 0350 	mov.w	r3, #80	; 0x50
 800649c:	f383 8811 	msr	BASEPRI, r3
 80064a0:	f3bf 8f6f 	isb	sy
 80064a4:	f3bf 8f4f 	dsb	sy
 80064a8:	623b      	str	r3, [r7, #32]
 80064aa:	e7fe      	b.n	80064aa <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80064ac:	683b      	ldr	r3, [r7, #0]
 80064ae:	2b02      	cmp	r3, #2
 80064b0:	d103      	bne.n	80064ba <xQueueGenericSendFromISR+0x66>
 80064b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80064b6:	2b01      	cmp	r3, #1
 80064b8:	d101      	bne.n	80064be <xQueueGenericSendFromISR+0x6a>
 80064ba:	2301      	movs	r3, #1
 80064bc:	e000      	b.n	80064c0 <xQueueGenericSendFromISR+0x6c>
 80064be:	2300      	movs	r3, #0
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	d109      	bne.n	80064d8 <xQueueGenericSendFromISR+0x84>
 80064c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064c8:	f383 8811 	msr	BASEPRI, r3
 80064cc:	f3bf 8f6f 	isb	sy
 80064d0:	f3bf 8f4f 	dsb	sy
 80064d4:	61fb      	str	r3, [r7, #28]
 80064d6:	e7fe      	b.n	80064d6 <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80064d8:	f001 ff14 	bl	8008304 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80064dc:	f3ef 8211 	mrs	r2, BASEPRI
 80064e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064e4:	f383 8811 	msr	BASEPRI, r3
 80064e8:	f3bf 8f6f 	isb	sy
 80064ec:	f3bf 8f4f 	dsb	sy
 80064f0:	61ba      	str	r2, [r7, #24]
 80064f2:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80064f4:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80064f6:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80064f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064fa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80064fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006500:	429a      	cmp	r2, r3
 8006502:	d302      	bcc.n	800650a <xQueueGenericSendFromISR+0xb6>
 8006504:	683b      	ldr	r3, [r7, #0]
 8006506:	2b02      	cmp	r3, #2
 8006508:	d12c      	bne.n	8006564 <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800650a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800650c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006510:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006514:	683a      	ldr	r2, [r7, #0]
 8006516:	68b9      	ldr	r1, [r7, #8]
 8006518:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800651a:	f000 f995 	bl	8006848 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800651e:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8006522:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006526:	d112      	bne.n	800654e <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006528:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800652a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800652c:	2b00      	cmp	r3, #0
 800652e:	d016      	beq.n	800655e <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006530:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006532:	3324      	adds	r3, #36	; 0x24
 8006534:	4618      	mov	r0, r3
 8006536:	f000 ff41 	bl	80073bc <xTaskRemoveFromEventList>
 800653a:	4603      	mov	r3, r0
 800653c:	2b00      	cmp	r3, #0
 800653e:	d00e      	beq.n	800655e <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	2b00      	cmp	r3, #0
 8006544:	d00b      	beq.n	800655e <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	2201      	movs	r2, #1
 800654a:	601a      	str	r2, [r3, #0]
 800654c:	e007      	b.n	800655e <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800654e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006552:	3301      	adds	r3, #1
 8006554:	b2db      	uxtb	r3, r3
 8006556:	b25a      	sxtb	r2, r3
 8006558:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800655a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800655e:	2301      	movs	r3, #1
 8006560:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8006562:	e001      	b.n	8006568 <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8006564:	2300      	movs	r3, #0
 8006566:	637b      	str	r3, [r7, #52]	; 0x34
 8006568:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800656a:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800656c:	693b      	ldr	r3, [r7, #16]
 800656e:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006572:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8006574:	4618      	mov	r0, r3
 8006576:	3738      	adds	r7, #56	; 0x38
 8006578:	46bd      	mov	sp, r7
 800657a:	bd80      	pop	{r7, pc}

0800657c <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800657c:	b580      	push	{r7, lr}
 800657e:	b08e      	sub	sp, #56	; 0x38
 8006580:	af00      	add	r7, sp, #0
 8006582:	6078      	str	r0, [r7, #4]
 8006584:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800658a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800658c:	2b00      	cmp	r3, #0
 800658e:	d109      	bne.n	80065a4 <xQueueGiveFromISR+0x28>
	__asm volatile
 8006590:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006594:	f383 8811 	msr	BASEPRI, r3
 8006598:	f3bf 8f6f 	isb	sy
 800659c:	f3bf 8f4f 	dsb	sy
 80065a0:	623b      	str	r3, [r7, #32]
 80065a2:	e7fe      	b.n	80065a2 <xQueueGiveFromISR+0x26>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80065a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	d009      	beq.n	80065c0 <xQueueGiveFromISR+0x44>
 80065ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065b0:	f383 8811 	msr	BASEPRI, r3
 80065b4:	f3bf 8f6f 	isb	sy
 80065b8:	f3bf 8f4f 	dsb	sy
 80065bc:	61fb      	str	r3, [r7, #28]
 80065be:	e7fe      	b.n	80065be <xQueueGiveFromISR+0x42>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
 80065c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	d103      	bne.n	80065d0 <xQueueGiveFromISR+0x54>
 80065c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065ca:	685b      	ldr	r3, [r3, #4]
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	d101      	bne.n	80065d4 <xQueueGiveFromISR+0x58>
 80065d0:	2301      	movs	r3, #1
 80065d2:	e000      	b.n	80065d6 <xQueueGiveFromISR+0x5a>
 80065d4:	2300      	movs	r3, #0
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	d109      	bne.n	80065ee <xQueueGiveFromISR+0x72>
 80065da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065de:	f383 8811 	msr	BASEPRI, r3
 80065e2:	f3bf 8f6f 	isb	sy
 80065e6:	f3bf 8f4f 	dsb	sy
 80065ea:	61bb      	str	r3, [r7, #24]
 80065ec:	e7fe      	b.n	80065ec <xQueueGiveFromISR+0x70>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80065ee:	f001 fe89 	bl	8008304 <vPortValidateInterruptPriority>
	__asm volatile
 80065f2:	f3ef 8211 	mrs	r2, BASEPRI
 80065f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065fa:	f383 8811 	msr	BASEPRI, r3
 80065fe:	f3bf 8f6f 	isb	sy
 8006602:	f3bf 8f4f 	dsb	sy
 8006606:	617a      	str	r2, [r7, #20]
 8006608:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800660a:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800660c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800660e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006610:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006612:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8006614:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006616:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006618:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800661a:	429a      	cmp	r2, r3
 800661c:	d22b      	bcs.n	8006676 <xQueueGiveFromISR+0xfa>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800661e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006620:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006624:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006628:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800662a:	1c5a      	adds	r2, r3, #1
 800662c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800662e:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8006630:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8006634:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006638:	d112      	bne.n	8006660 <xQueueGiveFromISR+0xe4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800663a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800663c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800663e:	2b00      	cmp	r3, #0
 8006640:	d016      	beq.n	8006670 <xQueueGiveFromISR+0xf4>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006642:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006644:	3324      	adds	r3, #36	; 0x24
 8006646:	4618      	mov	r0, r3
 8006648:	f000 feb8 	bl	80073bc <xTaskRemoveFromEventList>
 800664c:	4603      	mov	r3, r0
 800664e:	2b00      	cmp	r3, #0
 8006650:	d00e      	beq.n	8006670 <xQueueGiveFromISR+0xf4>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8006652:	683b      	ldr	r3, [r7, #0]
 8006654:	2b00      	cmp	r3, #0
 8006656:	d00b      	beq.n	8006670 <xQueueGiveFromISR+0xf4>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8006658:	683b      	ldr	r3, [r7, #0]
 800665a:	2201      	movs	r2, #1
 800665c:	601a      	str	r2, [r3, #0]
 800665e:	e007      	b.n	8006670 <xQueueGiveFromISR+0xf4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8006660:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006664:	3301      	adds	r3, #1
 8006666:	b2db      	uxtb	r3, r3
 8006668:	b25a      	sxtb	r2, r3
 800666a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800666c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8006670:	2301      	movs	r3, #1
 8006672:	637b      	str	r3, [r7, #52]	; 0x34
 8006674:	e001      	b.n	800667a <xQueueGiveFromISR+0xfe>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8006676:	2300      	movs	r3, #0
 8006678:	637b      	str	r3, [r7, #52]	; 0x34
 800667a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800667c:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006684:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8006686:	4618      	mov	r0, r3
 8006688:	3738      	adds	r7, #56	; 0x38
 800668a:	46bd      	mov	sp, r7
 800668c:	bd80      	pop	{r7, pc}
	...

08006690 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8006690:	b580      	push	{r7, lr}
 8006692:	b08c      	sub	sp, #48	; 0x30
 8006694:	af00      	add	r7, sp, #0
 8006696:	60f8      	str	r0, [r7, #12]
 8006698:	60b9      	str	r1, [r7, #8]
 800669a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800669c:	2300      	movs	r3, #0
 800669e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80066a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	d109      	bne.n	80066be <xQueueReceive+0x2e>
	__asm volatile
 80066aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066ae:	f383 8811 	msr	BASEPRI, r3
 80066b2:	f3bf 8f6f 	isb	sy
 80066b6:	f3bf 8f4f 	dsb	sy
 80066ba:	623b      	str	r3, [r7, #32]
 80066bc:	e7fe      	b.n	80066bc <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80066be:	68bb      	ldr	r3, [r7, #8]
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	d103      	bne.n	80066cc <xQueueReceive+0x3c>
 80066c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	d101      	bne.n	80066d0 <xQueueReceive+0x40>
 80066cc:	2301      	movs	r3, #1
 80066ce:	e000      	b.n	80066d2 <xQueueReceive+0x42>
 80066d0:	2300      	movs	r3, #0
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	d109      	bne.n	80066ea <xQueueReceive+0x5a>
 80066d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066da:	f383 8811 	msr	BASEPRI, r3
 80066de:	f3bf 8f6f 	isb	sy
 80066e2:	f3bf 8f4f 	dsb	sy
 80066e6:	61fb      	str	r3, [r7, #28]
 80066e8:	e7fe      	b.n	80066e8 <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80066ea:	f001 f823 	bl	8007734 <xTaskGetSchedulerState>
 80066ee:	4603      	mov	r3, r0
 80066f0:	2b00      	cmp	r3, #0
 80066f2:	d102      	bne.n	80066fa <xQueueReceive+0x6a>
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	d101      	bne.n	80066fe <xQueueReceive+0x6e>
 80066fa:	2301      	movs	r3, #1
 80066fc:	e000      	b.n	8006700 <xQueueReceive+0x70>
 80066fe:	2300      	movs	r3, #0
 8006700:	2b00      	cmp	r3, #0
 8006702:	d109      	bne.n	8006718 <xQueueReceive+0x88>
 8006704:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006708:	f383 8811 	msr	BASEPRI, r3
 800670c:	f3bf 8f6f 	isb	sy
 8006710:	f3bf 8f4f 	dsb	sy
 8006714:	61bb      	str	r3, [r7, #24]
 8006716:	e7fe      	b.n	8006716 <xQueueReceive+0x86>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8006718:	f001 fd18 	bl	800814c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800671c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800671e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006720:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006722:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006724:	2b00      	cmp	r3, #0
 8006726:	d01f      	beq.n	8006768 <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006728:	68b9      	ldr	r1, [r7, #8]
 800672a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800672c:	f000 f8f6 	bl	800691c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006730:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006732:	1e5a      	subs	r2, r3, #1
 8006734:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006736:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006738:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800673a:	691b      	ldr	r3, [r3, #16]
 800673c:	2b00      	cmp	r3, #0
 800673e:	d00f      	beq.n	8006760 <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006740:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006742:	3310      	adds	r3, #16
 8006744:	4618      	mov	r0, r3
 8006746:	f000 fe39 	bl	80073bc <xTaskRemoveFromEventList>
 800674a:	4603      	mov	r3, r0
 800674c:	2b00      	cmp	r3, #0
 800674e:	d007      	beq.n	8006760 <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006750:	4b3c      	ldr	r3, [pc, #240]	; (8006844 <xQueueReceive+0x1b4>)
 8006752:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006756:	601a      	str	r2, [r3, #0]
 8006758:	f3bf 8f4f 	dsb	sy
 800675c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006760:	f001 fd22 	bl	80081a8 <vPortExitCritical>
				return pdPASS;
 8006764:	2301      	movs	r3, #1
 8006766:	e069      	b.n	800683c <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	2b00      	cmp	r3, #0
 800676c:	d103      	bne.n	8006776 <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800676e:	f001 fd1b 	bl	80081a8 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006772:	2300      	movs	r3, #0
 8006774:	e062      	b.n	800683c <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006776:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006778:	2b00      	cmp	r3, #0
 800677a:	d106      	bne.n	800678a <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800677c:	f107 0310 	add.w	r3, r7, #16
 8006780:	4618      	mov	r0, r3
 8006782:	f000 fe7d 	bl	8007480 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006786:	2301      	movs	r3, #1
 8006788:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800678a:	f001 fd0d 	bl	80081a8 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800678e:	f000 fbf3 	bl	8006f78 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006792:	f001 fcdb 	bl	800814c <vPortEnterCritical>
 8006796:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006798:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800679c:	b25b      	sxtb	r3, r3
 800679e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80067a2:	d103      	bne.n	80067ac <xQueueReceive+0x11c>
 80067a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067a6:	2200      	movs	r2, #0
 80067a8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80067ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067ae:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80067b2:	b25b      	sxtb	r3, r3
 80067b4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80067b8:	d103      	bne.n	80067c2 <xQueueReceive+0x132>
 80067ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067bc:	2200      	movs	r2, #0
 80067be:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80067c2:	f001 fcf1 	bl	80081a8 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80067c6:	1d3a      	adds	r2, r7, #4
 80067c8:	f107 0310 	add.w	r3, r7, #16
 80067cc:	4611      	mov	r1, r2
 80067ce:	4618      	mov	r0, r3
 80067d0:	f000 fe6c 	bl	80074ac <xTaskCheckForTimeOut>
 80067d4:	4603      	mov	r3, r0
 80067d6:	2b00      	cmp	r3, #0
 80067d8:	d123      	bne.n	8006822 <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80067da:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80067dc:	f000 f916 	bl	8006a0c <prvIsQueueEmpty>
 80067e0:	4603      	mov	r3, r0
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	d017      	beq.n	8006816 <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80067e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067e8:	3324      	adds	r3, #36	; 0x24
 80067ea:	687a      	ldr	r2, [r7, #4]
 80067ec:	4611      	mov	r1, r2
 80067ee:	4618      	mov	r0, r3
 80067f0:	f000 fd96 	bl	8007320 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80067f4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80067f6:	f000 f8b7 	bl	8006968 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80067fa:	f000 fbcb 	bl	8006f94 <xTaskResumeAll>
 80067fe:	4603      	mov	r3, r0
 8006800:	2b00      	cmp	r3, #0
 8006802:	d189      	bne.n	8006718 <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 8006804:	4b0f      	ldr	r3, [pc, #60]	; (8006844 <xQueueReceive+0x1b4>)
 8006806:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800680a:	601a      	str	r2, [r3, #0]
 800680c:	f3bf 8f4f 	dsb	sy
 8006810:	f3bf 8f6f 	isb	sy
 8006814:	e780      	b.n	8006718 <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8006816:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006818:	f000 f8a6 	bl	8006968 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800681c:	f000 fbba 	bl	8006f94 <xTaskResumeAll>
 8006820:	e77a      	b.n	8006718 <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8006822:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006824:	f000 f8a0 	bl	8006968 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006828:	f000 fbb4 	bl	8006f94 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800682c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800682e:	f000 f8ed 	bl	8006a0c <prvIsQueueEmpty>
 8006832:	4603      	mov	r3, r0
 8006834:	2b00      	cmp	r3, #0
 8006836:	f43f af6f 	beq.w	8006718 <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800683a:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 800683c:	4618      	mov	r0, r3
 800683e:	3730      	adds	r7, #48	; 0x30
 8006840:	46bd      	mov	sp, r7
 8006842:	bd80      	pop	{r7, pc}
 8006844:	e000ed04 	.word	0xe000ed04

08006848 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8006848:	b580      	push	{r7, lr}
 800684a:	b086      	sub	sp, #24
 800684c:	af00      	add	r7, sp, #0
 800684e:	60f8      	str	r0, [r7, #12]
 8006850:	60b9      	str	r1, [r7, #8]
 8006852:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8006854:	2300      	movs	r3, #0
 8006856:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800685c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006862:	2b00      	cmp	r3, #0
 8006864:	d10d      	bne.n	8006882 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	2b00      	cmp	r3, #0
 800686c:	d14d      	bne.n	800690a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	685b      	ldr	r3, [r3, #4]
 8006872:	4618      	mov	r0, r3
 8006874:	f000 ff7c 	bl	8007770 <xTaskPriorityDisinherit>
 8006878:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	2200      	movs	r2, #0
 800687e:	605a      	str	r2, [r3, #4]
 8006880:	e043      	b.n	800690a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	2b00      	cmp	r3, #0
 8006886:	d119      	bne.n	80068bc <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	6898      	ldr	r0, [r3, #8]
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006890:	461a      	mov	r2, r3
 8006892:	68b9      	ldr	r1, [r7, #8]
 8006894:	f002 f982 	bl	8008b9c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	689a      	ldr	r2, [r3, #8]
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068a0:	441a      	add	r2, r3
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80068a6:	68fb      	ldr	r3, [r7, #12]
 80068a8:	689a      	ldr	r2, [r3, #8]
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	685b      	ldr	r3, [r3, #4]
 80068ae:	429a      	cmp	r2, r3
 80068b0:	d32b      	bcc.n	800690a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	681a      	ldr	r2, [r3, #0]
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	609a      	str	r2, [r3, #8]
 80068ba:	e026      	b.n	800690a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	68d8      	ldr	r0, [r3, #12]
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068c4:	461a      	mov	r2, r3
 80068c6:	68b9      	ldr	r1, [r7, #8]
 80068c8:	f002 f968 	bl	8008b9c <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	68da      	ldr	r2, [r3, #12]
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068d4:	425b      	negs	r3, r3
 80068d6:	441a      	add	r2, r3
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	68da      	ldr	r2, [r3, #12]
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	429a      	cmp	r2, r3
 80068e6:	d207      	bcs.n	80068f8 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	685a      	ldr	r2, [r3, #4]
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068f0:	425b      	negs	r3, r3
 80068f2:	441a      	add	r2, r3
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	2b02      	cmp	r3, #2
 80068fc:	d105      	bne.n	800690a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80068fe:	693b      	ldr	r3, [r7, #16]
 8006900:	2b00      	cmp	r3, #0
 8006902:	d002      	beq.n	800690a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8006904:	693b      	ldr	r3, [r7, #16]
 8006906:	3b01      	subs	r3, #1
 8006908:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800690a:	693b      	ldr	r3, [r7, #16]
 800690c:	1c5a      	adds	r2, r3, #1
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8006912:	697b      	ldr	r3, [r7, #20]
}
 8006914:	4618      	mov	r0, r3
 8006916:	3718      	adds	r7, #24
 8006918:	46bd      	mov	sp, r7
 800691a:	bd80      	pop	{r7, pc}

0800691c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800691c:	b580      	push	{r7, lr}
 800691e:	b082      	sub	sp, #8
 8006920:	af00      	add	r7, sp, #0
 8006922:	6078      	str	r0, [r7, #4]
 8006924:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800692a:	2b00      	cmp	r3, #0
 800692c:	d018      	beq.n	8006960 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	68da      	ldr	r2, [r3, #12]
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006936:	441a      	add	r2, r3
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	68da      	ldr	r2, [r3, #12]
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	685b      	ldr	r3, [r3, #4]
 8006944:	429a      	cmp	r2, r3
 8006946:	d303      	bcc.n	8006950 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	681a      	ldr	r2, [r3, #0]
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	68d9      	ldr	r1, [r3, #12]
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006958:	461a      	mov	r2, r3
 800695a:	6838      	ldr	r0, [r7, #0]
 800695c:	f002 f91e 	bl	8008b9c <memcpy>
	}
}
 8006960:	bf00      	nop
 8006962:	3708      	adds	r7, #8
 8006964:	46bd      	mov	sp, r7
 8006966:	bd80      	pop	{r7, pc}

08006968 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8006968:	b580      	push	{r7, lr}
 800696a:	b084      	sub	sp, #16
 800696c:	af00      	add	r7, sp, #0
 800696e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8006970:	f001 fbec 	bl	800814c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800697a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800697c:	e011      	b.n	80069a2 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006982:	2b00      	cmp	r3, #0
 8006984:	d012      	beq.n	80069ac <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	3324      	adds	r3, #36	; 0x24
 800698a:	4618      	mov	r0, r3
 800698c:	f000 fd16 	bl	80073bc <xTaskRemoveFromEventList>
 8006990:	4603      	mov	r3, r0
 8006992:	2b00      	cmp	r3, #0
 8006994:	d001      	beq.n	800699a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8006996:	f000 fde9 	bl	800756c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800699a:	7bfb      	ldrb	r3, [r7, #15]
 800699c:	3b01      	subs	r3, #1
 800699e:	b2db      	uxtb	r3, r3
 80069a0:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80069a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	dce9      	bgt.n	800697e <prvUnlockQueue+0x16>
 80069aa:	e000      	b.n	80069ae <prvUnlockQueue+0x46>
					break;
 80069ac:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	22ff      	movs	r2, #255	; 0xff
 80069b2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80069b6:	f001 fbf7 	bl	80081a8 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80069ba:	f001 fbc7 	bl	800814c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80069c4:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80069c6:	e011      	b.n	80069ec <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	691b      	ldr	r3, [r3, #16]
 80069cc:	2b00      	cmp	r3, #0
 80069ce:	d012      	beq.n	80069f6 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	3310      	adds	r3, #16
 80069d4:	4618      	mov	r0, r3
 80069d6:	f000 fcf1 	bl	80073bc <xTaskRemoveFromEventList>
 80069da:	4603      	mov	r3, r0
 80069dc:	2b00      	cmp	r3, #0
 80069de:	d001      	beq.n	80069e4 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80069e0:	f000 fdc4 	bl	800756c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80069e4:	7bbb      	ldrb	r3, [r7, #14]
 80069e6:	3b01      	subs	r3, #1
 80069e8:	b2db      	uxtb	r3, r3
 80069ea:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80069ec:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80069f0:	2b00      	cmp	r3, #0
 80069f2:	dce9      	bgt.n	80069c8 <prvUnlockQueue+0x60>
 80069f4:	e000      	b.n	80069f8 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80069f6:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	22ff      	movs	r2, #255	; 0xff
 80069fc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8006a00:	f001 fbd2 	bl	80081a8 <vPortExitCritical>
}
 8006a04:	bf00      	nop
 8006a06:	3710      	adds	r7, #16
 8006a08:	46bd      	mov	sp, r7
 8006a0a:	bd80      	pop	{r7, pc}

08006a0c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8006a0c:	b580      	push	{r7, lr}
 8006a0e:	b084      	sub	sp, #16
 8006a10:	af00      	add	r7, sp, #0
 8006a12:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006a14:	f001 fb9a 	bl	800814c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a1c:	2b00      	cmp	r3, #0
 8006a1e:	d102      	bne.n	8006a26 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8006a20:	2301      	movs	r3, #1
 8006a22:	60fb      	str	r3, [r7, #12]
 8006a24:	e001      	b.n	8006a2a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8006a26:	2300      	movs	r3, #0
 8006a28:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006a2a:	f001 fbbd 	bl	80081a8 <vPortExitCritical>

	return xReturn;
 8006a2e:	68fb      	ldr	r3, [r7, #12]
}
 8006a30:	4618      	mov	r0, r3
 8006a32:	3710      	adds	r7, #16
 8006a34:	46bd      	mov	sp, r7
 8006a36:	bd80      	pop	{r7, pc}

08006a38 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8006a38:	b580      	push	{r7, lr}
 8006a3a:	b084      	sub	sp, #16
 8006a3c:	af00      	add	r7, sp, #0
 8006a3e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006a40:	f001 fb84 	bl	800814c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a4c:	429a      	cmp	r2, r3
 8006a4e:	d102      	bne.n	8006a56 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8006a50:	2301      	movs	r3, #1
 8006a52:	60fb      	str	r3, [r7, #12]
 8006a54:	e001      	b.n	8006a5a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8006a56:	2300      	movs	r3, #0
 8006a58:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006a5a:	f001 fba5 	bl	80081a8 <vPortExitCritical>

	return xReturn;
 8006a5e:	68fb      	ldr	r3, [r7, #12]
}
 8006a60:	4618      	mov	r0, r3
 8006a62:	3710      	adds	r7, #16
 8006a64:	46bd      	mov	sp, r7
 8006a66:	bd80      	pop	{r7, pc}

08006a68 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8006a68:	b480      	push	{r7}
 8006a6a:	b085      	sub	sp, #20
 8006a6c:	af00      	add	r7, sp, #0
 8006a6e:	6078      	str	r0, [r7, #4]
 8006a70:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006a72:	2300      	movs	r3, #0
 8006a74:	60fb      	str	r3, [r7, #12]
 8006a76:	e014      	b.n	8006aa2 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8006a78:	4a0e      	ldr	r2, [pc, #56]	; (8006ab4 <vQueueAddToRegistry+0x4c>)
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8006a80:	2b00      	cmp	r3, #0
 8006a82:	d10b      	bne.n	8006a9c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8006a84:	490b      	ldr	r1, [pc, #44]	; (8006ab4 <vQueueAddToRegistry+0x4c>)
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	683a      	ldr	r2, [r7, #0]
 8006a8a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8006a8e:	4a09      	ldr	r2, [pc, #36]	; (8006ab4 <vQueueAddToRegistry+0x4c>)
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	00db      	lsls	r3, r3, #3
 8006a94:	4413      	add	r3, r2
 8006a96:	687a      	ldr	r2, [r7, #4]
 8006a98:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8006a9a:	e005      	b.n	8006aa8 <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	3301      	adds	r3, #1
 8006aa0:	60fb      	str	r3, [r7, #12]
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	2b07      	cmp	r3, #7
 8006aa6:	d9e7      	bls.n	8006a78 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8006aa8:	bf00      	nop
 8006aaa:	3714      	adds	r7, #20
 8006aac:	46bd      	mov	sp, r7
 8006aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ab2:	4770      	bx	lr
 8006ab4:	20007a74 	.word	0x20007a74

08006ab8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006ab8:	b580      	push	{r7, lr}
 8006aba:	b086      	sub	sp, #24
 8006abc:	af00      	add	r7, sp, #0
 8006abe:	60f8      	str	r0, [r7, #12]
 8006ac0:	60b9      	str	r1, [r7, #8]
 8006ac2:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8006ac8:	f001 fb40 	bl	800814c <vPortEnterCritical>
 8006acc:	697b      	ldr	r3, [r7, #20]
 8006ace:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006ad2:	b25b      	sxtb	r3, r3
 8006ad4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006ad8:	d103      	bne.n	8006ae2 <vQueueWaitForMessageRestricted+0x2a>
 8006ada:	697b      	ldr	r3, [r7, #20]
 8006adc:	2200      	movs	r2, #0
 8006ade:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006ae2:	697b      	ldr	r3, [r7, #20]
 8006ae4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006ae8:	b25b      	sxtb	r3, r3
 8006aea:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006aee:	d103      	bne.n	8006af8 <vQueueWaitForMessageRestricted+0x40>
 8006af0:	697b      	ldr	r3, [r7, #20]
 8006af2:	2200      	movs	r2, #0
 8006af4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006af8:	f001 fb56 	bl	80081a8 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8006afc:	697b      	ldr	r3, [r7, #20]
 8006afe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b00:	2b00      	cmp	r3, #0
 8006b02:	d106      	bne.n	8006b12 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8006b04:	697b      	ldr	r3, [r7, #20]
 8006b06:	3324      	adds	r3, #36	; 0x24
 8006b08:	687a      	ldr	r2, [r7, #4]
 8006b0a:	68b9      	ldr	r1, [r7, #8]
 8006b0c:	4618      	mov	r0, r3
 8006b0e:	f000 fc2b 	bl	8007368 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8006b12:	6978      	ldr	r0, [r7, #20]
 8006b14:	f7ff ff28 	bl	8006968 <prvUnlockQueue>
	}
 8006b18:	bf00      	nop
 8006b1a:	3718      	adds	r7, #24
 8006b1c:	46bd      	mov	sp, r7
 8006b1e:	bd80      	pop	{r7, pc}

08006b20 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8006b20:	b580      	push	{r7, lr}
 8006b22:	b08e      	sub	sp, #56	; 0x38
 8006b24:	af04      	add	r7, sp, #16
 8006b26:	60f8      	str	r0, [r7, #12]
 8006b28:	60b9      	str	r1, [r7, #8]
 8006b2a:	607a      	str	r2, [r7, #4]
 8006b2c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8006b2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006b30:	2b00      	cmp	r3, #0
 8006b32:	d109      	bne.n	8006b48 <xTaskCreateStatic+0x28>
 8006b34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b38:	f383 8811 	msr	BASEPRI, r3
 8006b3c:	f3bf 8f6f 	isb	sy
 8006b40:	f3bf 8f4f 	dsb	sy
 8006b44:	623b      	str	r3, [r7, #32]
 8006b46:	e7fe      	b.n	8006b46 <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 8006b48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	d109      	bne.n	8006b62 <xTaskCreateStatic+0x42>
 8006b4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b52:	f383 8811 	msr	BASEPRI, r3
 8006b56:	f3bf 8f6f 	isb	sy
 8006b5a:	f3bf 8f4f 	dsb	sy
 8006b5e:	61fb      	str	r3, [r7, #28]
 8006b60:	e7fe      	b.n	8006b60 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8006b62:	235c      	movs	r3, #92	; 0x5c
 8006b64:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8006b66:	693b      	ldr	r3, [r7, #16]
 8006b68:	2b5c      	cmp	r3, #92	; 0x5c
 8006b6a:	d009      	beq.n	8006b80 <xTaskCreateStatic+0x60>
 8006b6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b70:	f383 8811 	msr	BASEPRI, r3
 8006b74:	f3bf 8f6f 	isb	sy
 8006b78:	f3bf 8f4f 	dsb	sy
 8006b7c:	61bb      	str	r3, [r7, #24]
 8006b7e:	e7fe      	b.n	8006b7e <xTaskCreateStatic+0x5e>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8006b80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	d01e      	beq.n	8006bc4 <xTaskCreateStatic+0xa4>
 8006b86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	d01b      	beq.n	8006bc4 <xTaskCreateStatic+0xa4>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006b8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b8e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8006b90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b92:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006b94:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8006b96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b98:	2202      	movs	r2, #2
 8006b9a:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8006b9e:	2300      	movs	r3, #0
 8006ba0:	9303      	str	r3, [sp, #12]
 8006ba2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ba4:	9302      	str	r3, [sp, #8]
 8006ba6:	f107 0314 	add.w	r3, r7, #20
 8006baa:	9301      	str	r3, [sp, #4]
 8006bac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bae:	9300      	str	r3, [sp, #0]
 8006bb0:	683b      	ldr	r3, [r7, #0]
 8006bb2:	687a      	ldr	r2, [r7, #4]
 8006bb4:	68b9      	ldr	r1, [r7, #8]
 8006bb6:	68f8      	ldr	r0, [r7, #12]
 8006bb8:	f000 f850 	bl	8006c5c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006bbc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006bbe:	f000 f8d3 	bl	8006d68 <prvAddNewTaskToReadyList>
 8006bc2:	e001      	b.n	8006bc8 <xTaskCreateStatic+0xa8>
		}
		else
		{
			xReturn = NULL;
 8006bc4:	2300      	movs	r3, #0
 8006bc6:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8006bc8:	697b      	ldr	r3, [r7, #20]
	}
 8006bca:	4618      	mov	r0, r3
 8006bcc:	3728      	adds	r7, #40	; 0x28
 8006bce:	46bd      	mov	sp, r7
 8006bd0:	bd80      	pop	{r7, pc}

08006bd2 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8006bd2:	b580      	push	{r7, lr}
 8006bd4:	b08c      	sub	sp, #48	; 0x30
 8006bd6:	af04      	add	r7, sp, #16
 8006bd8:	60f8      	str	r0, [r7, #12]
 8006bda:	60b9      	str	r1, [r7, #8]
 8006bdc:	603b      	str	r3, [r7, #0]
 8006bde:	4613      	mov	r3, r2
 8006be0:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006be2:	88fb      	ldrh	r3, [r7, #6]
 8006be4:	009b      	lsls	r3, r3, #2
 8006be6:	4618      	mov	r0, r3
 8006be8:	f001 fbca 	bl	8008380 <pvPortMalloc>
 8006bec:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8006bee:	697b      	ldr	r3, [r7, #20]
 8006bf0:	2b00      	cmp	r3, #0
 8006bf2:	d00e      	beq.n	8006c12 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8006bf4:	205c      	movs	r0, #92	; 0x5c
 8006bf6:	f001 fbc3 	bl	8008380 <pvPortMalloc>
 8006bfa:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8006bfc:	69fb      	ldr	r3, [r7, #28]
 8006bfe:	2b00      	cmp	r3, #0
 8006c00:	d003      	beq.n	8006c0a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8006c02:	69fb      	ldr	r3, [r7, #28]
 8006c04:	697a      	ldr	r2, [r7, #20]
 8006c06:	631a      	str	r2, [r3, #48]	; 0x30
 8006c08:	e005      	b.n	8006c16 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8006c0a:	6978      	ldr	r0, [r7, #20]
 8006c0c:	f001 fc7a 	bl	8008504 <vPortFree>
 8006c10:	e001      	b.n	8006c16 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8006c12:	2300      	movs	r3, #0
 8006c14:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8006c16:	69fb      	ldr	r3, [r7, #28]
 8006c18:	2b00      	cmp	r3, #0
 8006c1a:	d017      	beq.n	8006c4c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8006c1c:	69fb      	ldr	r3, [r7, #28]
 8006c1e:	2200      	movs	r2, #0
 8006c20:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8006c24:	88fa      	ldrh	r2, [r7, #6]
 8006c26:	2300      	movs	r3, #0
 8006c28:	9303      	str	r3, [sp, #12]
 8006c2a:	69fb      	ldr	r3, [r7, #28]
 8006c2c:	9302      	str	r3, [sp, #8]
 8006c2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c30:	9301      	str	r3, [sp, #4]
 8006c32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c34:	9300      	str	r3, [sp, #0]
 8006c36:	683b      	ldr	r3, [r7, #0]
 8006c38:	68b9      	ldr	r1, [r7, #8]
 8006c3a:	68f8      	ldr	r0, [r7, #12]
 8006c3c:	f000 f80e 	bl	8006c5c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006c40:	69f8      	ldr	r0, [r7, #28]
 8006c42:	f000 f891 	bl	8006d68 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8006c46:	2301      	movs	r3, #1
 8006c48:	61bb      	str	r3, [r7, #24]
 8006c4a:	e002      	b.n	8006c52 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8006c4c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006c50:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8006c52:	69bb      	ldr	r3, [r7, #24]
	}
 8006c54:	4618      	mov	r0, r3
 8006c56:	3720      	adds	r7, #32
 8006c58:	46bd      	mov	sp, r7
 8006c5a:	bd80      	pop	{r7, pc}

08006c5c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8006c5c:	b580      	push	{r7, lr}
 8006c5e:	b088      	sub	sp, #32
 8006c60:	af00      	add	r7, sp, #0
 8006c62:	60f8      	str	r0, [r7, #12]
 8006c64:	60b9      	str	r1, [r7, #8]
 8006c66:	607a      	str	r2, [r7, #4]
 8006c68:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8006c6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c6c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	009b      	lsls	r3, r3, #2
 8006c72:	461a      	mov	r2, r3
 8006c74:	21a5      	movs	r1, #165	; 0xa5
 8006c76:	f001 ff9c 	bl	8008bb2 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8006c7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c7c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8006c84:	3b01      	subs	r3, #1
 8006c86:	009b      	lsls	r3, r3, #2
 8006c88:	4413      	add	r3, r2
 8006c8a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8006c8c:	69bb      	ldr	r3, [r7, #24]
 8006c8e:	f023 0307 	bic.w	r3, r3, #7
 8006c92:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8006c94:	69bb      	ldr	r3, [r7, #24]
 8006c96:	f003 0307 	and.w	r3, r3, #7
 8006c9a:	2b00      	cmp	r3, #0
 8006c9c:	d009      	beq.n	8006cb2 <prvInitialiseNewTask+0x56>
 8006c9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ca2:	f383 8811 	msr	BASEPRI, r3
 8006ca6:	f3bf 8f6f 	isb	sy
 8006caa:	f3bf 8f4f 	dsb	sy
 8006cae:	617b      	str	r3, [r7, #20]
 8006cb0:	e7fe      	b.n	8006cb0 <prvInitialiseNewTask+0x54>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006cb2:	2300      	movs	r3, #0
 8006cb4:	61fb      	str	r3, [r7, #28]
 8006cb6:	e012      	b.n	8006cde <prvInitialiseNewTask+0x82>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006cb8:	68ba      	ldr	r2, [r7, #8]
 8006cba:	69fb      	ldr	r3, [r7, #28]
 8006cbc:	4413      	add	r3, r2
 8006cbe:	7819      	ldrb	r1, [r3, #0]
 8006cc0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006cc2:	69fb      	ldr	r3, [r7, #28]
 8006cc4:	4413      	add	r3, r2
 8006cc6:	3334      	adds	r3, #52	; 0x34
 8006cc8:	460a      	mov	r2, r1
 8006cca:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8006ccc:	68ba      	ldr	r2, [r7, #8]
 8006cce:	69fb      	ldr	r3, [r7, #28]
 8006cd0:	4413      	add	r3, r2
 8006cd2:	781b      	ldrb	r3, [r3, #0]
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	d006      	beq.n	8006ce6 <prvInitialiseNewTask+0x8a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006cd8:	69fb      	ldr	r3, [r7, #28]
 8006cda:	3301      	adds	r3, #1
 8006cdc:	61fb      	str	r3, [r7, #28]
 8006cde:	69fb      	ldr	r3, [r7, #28]
 8006ce0:	2b0f      	cmp	r3, #15
 8006ce2:	d9e9      	bls.n	8006cb8 <prvInitialiseNewTask+0x5c>
 8006ce4:	e000      	b.n	8006ce8 <prvInitialiseNewTask+0x8c>
		{
			break;
 8006ce6:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006ce8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cea:	2200      	movs	r2, #0
 8006cec:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8006cf0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cf2:	2b37      	cmp	r3, #55	; 0x37
 8006cf4:	d901      	bls.n	8006cfa <prvInitialiseNewTask+0x9e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8006cf6:	2337      	movs	r3, #55	; 0x37
 8006cf8:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8006cfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cfc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006cfe:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8006d00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d02:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006d04:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8006d06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d08:	2200      	movs	r2, #0
 8006d0a:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006d0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d0e:	3304      	adds	r3, #4
 8006d10:	4618      	mov	r0, r3
 8006d12:	f7ff f913 	bl	8005f3c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006d16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d18:	3318      	adds	r3, #24
 8006d1a:	4618      	mov	r0, r3
 8006d1c:	f7ff f90e 	bl	8005f3c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8006d20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d22:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006d24:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006d26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d28:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8006d2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d2e:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8006d30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d32:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006d34:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8006d36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d38:	2200      	movs	r2, #0
 8006d3a:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006d3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d3e:	2200      	movs	r2, #0
 8006d40:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006d44:	683a      	ldr	r2, [r7, #0]
 8006d46:	68f9      	ldr	r1, [r7, #12]
 8006d48:	69b8      	ldr	r0, [r7, #24]
 8006d4a:	f001 f8db 	bl	8007f04 <pxPortInitialiseStack>
 8006d4e:	4602      	mov	r2, r0
 8006d50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d52:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8006d54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	d002      	beq.n	8006d60 <prvInitialiseNewTask+0x104>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006d5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d5c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006d5e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006d60:	bf00      	nop
 8006d62:	3720      	adds	r7, #32
 8006d64:	46bd      	mov	sp, r7
 8006d66:	bd80      	pop	{r7, pc}

08006d68 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8006d68:	b580      	push	{r7, lr}
 8006d6a:	b082      	sub	sp, #8
 8006d6c:	af00      	add	r7, sp, #0
 8006d6e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8006d70:	f001 f9ec 	bl	800814c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8006d74:	4b2d      	ldr	r3, [pc, #180]	; (8006e2c <prvAddNewTaskToReadyList+0xc4>)
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	3301      	adds	r3, #1
 8006d7a:	4a2c      	ldr	r2, [pc, #176]	; (8006e2c <prvAddNewTaskToReadyList+0xc4>)
 8006d7c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8006d7e:	4b2c      	ldr	r3, [pc, #176]	; (8006e30 <prvAddNewTaskToReadyList+0xc8>)
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	d109      	bne.n	8006d9a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8006d86:	4a2a      	ldr	r2, [pc, #168]	; (8006e30 <prvAddNewTaskToReadyList+0xc8>)
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006d8c:	4b27      	ldr	r3, [pc, #156]	; (8006e2c <prvAddNewTaskToReadyList+0xc4>)
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	2b01      	cmp	r3, #1
 8006d92:	d110      	bne.n	8006db6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8006d94:	f000 fc0e 	bl	80075b4 <prvInitialiseTaskLists>
 8006d98:	e00d      	b.n	8006db6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8006d9a:	4b26      	ldr	r3, [pc, #152]	; (8006e34 <prvAddNewTaskToReadyList+0xcc>)
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	d109      	bne.n	8006db6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8006da2:	4b23      	ldr	r3, [pc, #140]	; (8006e30 <prvAddNewTaskToReadyList+0xc8>)
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006dac:	429a      	cmp	r2, r3
 8006dae:	d802      	bhi.n	8006db6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8006db0:	4a1f      	ldr	r2, [pc, #124]	; (8006e30 <prvAddNewTaskToReadyList+0xc8>)
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8006db6:	4b20      	ldr	r3, [pc, #128]	; (8006e38 <prvAddNewTaskToReadyList+0xd0>)
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	3301      	adds	r3, #1
 8006dbc:	4a1e      	ldr	r2, [pc, #120]	; (8006e38 <prvAddNewTaskToReadyList+0xd0>)
 8006dbe:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8006dc0:	4b1d      	ldr	r3, [pc, #116]	; (8006e38 <prvAddNewTaskToReadyList+0xd0>)
 8006dc2:	681a      	ldr	r2, [r3, #0]
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006dcc:	4b1b      	ldr	r3, [pc, #108]	; (8006e3c <prvAddNewTaskToReadyList+0xd4>)
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	429a      	cmp	r2, r3
 8006dd2:	d903      	bls.n	8006ddc <prvAddNewTaskToReadyList+0x74>
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006dd8:	4a18      	ldr	r2, [pc, #96]	; (8006e3c <prvAddNewTaskToReadyList+0xd4>)
 8006dda:	6013      	str	r3, [r2, #0]
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006de0:	4613      	mov	r3, r2
 8006de2:	009b      	lsls	r3, r3, #2
 8006de4:	4413      	add	r3, r2
 8006de6:	009b      	lsls	r3, r3, #2
 8006de8:	4a15      	ldr	r2, [pc, #84]	; (8006e40 <prvAddNewTaskToReadyList+0xd8>)
 8006dea:	441a      	add	r2, r3
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	3304      	adds	r3, #4
 8006df0:	4619      	mov	r1, r3
 8006df2:	4610      	mov	r0, r2
 8006df4:	f7ff f8af 	bl	8005f56 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8006df8:	f001 f9d6 	bl	80081a8 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8006dfc:	4b0d      	ldr	r3, [pc, #52]	; (8006e34 <prvAddNewTaskToReadyList+0xcc>)
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	d00e      	beq.n	8006e22 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006e04:	4b0a      	ldr	r3, [pc, #40]	; (8006e30 <prvAddNewTaskToReadyList+0xc8>)
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e0e:	429a      	cmp	r2, r3
 8006e10:	d207      	bcs.n	8006e22 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8006e12:	4b0c      	ldr	r3, [pc, #48]	; (8006e44 <prvAddNewTaskToReadyList+0xdc>)
 8006e14:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006e18:	601a      	str	r2, [r3, #0]
 8006e1a:	f3bf 8f4f 	dsb	sy
 8006e1e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006e22:	bf00      	nop
 8006e24:	3708      	adds	r7, #8
 8006e26:	46bd      	mov	sp, r7
 8006e28:	bd80      	pop	{r7, pc}
 8006e2a:	bf00      	nop
 8006e2c:	20000bc0 	.word	0x20000bc0
 8006e30:	200006ec 	.word	0x200006ec
 8006e34:	20000bcc 	.word	0x20000bcc
 8006e38:	20000bdc 	.word	0x20000bdc
 8006e3c:	20000bc8 	.word	0x20000bc8
 8006e40:	200006f0 	.word	0x200006f0
 8006e44:	e000ed04 	.word	0xe000ed04

08006e48 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8006e48:	b580      	push	{r7, lr}
 8006e4a:	b084      	sub	sp, #16
 8006e4c:	af00      	add	r7, sp, #0
 8006e4e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8006e50:	2300      	movs	r3, #0
 8006e52:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	d016      	beq.n	8006e88 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8006e5a:	4b13      	ldr	r3, [pc, #76]	; (8006ea8 <vTaskDelay+0x60>)
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	2b00      	cmp	r3, #0
 8006e60:	d009      	beq.n	8006e76 <vTaskDelay+0x2e>
 8006e62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e66:	f383 8811 	msr	BASEPRI, r3
 8006e6a:	f3bf 8f6f 	isb	sy
 8006e6e:	f3bf 8f4f 	dsb	sy
 8006e72:	60bb      	str	r3, [r7, #8]
 8006e74:	e7fe      	b.n	8006e74 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 8006e76:	f000 f87f 	bl	8006f78 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8006e7a:	2100      	movs	r1, #0
 8006e7c:	6878      	ldr	r0, [r7, #4]
 8006e7e:	f000 fce3 	bl	8007848 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8006e82:	f000 f887 	bl	8006f94 <xTaskResumeAll>
 8006e86:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	d107      	bne.n	8006e9e <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 8006e8e:	4b07      	ldr	r3, [pc, #28]	; (8006eac <vTaskDelay+0x64>)
 8006e90:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006e94:	601a      	str	r2, [r3, #0]
 8006e96:	f3bf 8f4f 	dsb	sy
 8006e9a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006e9e:	bf00      	nop
 8006ea0:	3710      	adds	r7, #16
 8006ea2:	46bd      	mov	sp, r7
 8006ea4:	bd80      	pop	{r7, pc}
 8006ea6:	bf00      	nop
 8006ea8:	20000be8 	.word	0x20000be8
 8006eac:	e000ed04 	.word	0xe000ed04

08006eb0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006eb0:	b580      	push	{r7, lr}
 8006eb2:	b08a      	sub	sp, #40	; 0x28
 8006eb4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8006eb6:	2300      	movs	r3, #0
 8006eb8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8006eba:	2300      	movs	r3, #0
 8006ebc:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8006ebe:	463a      	mov	r2, r7
 8006ec0:	1d39      	adds	r1, r7, #4
 8006ec2:	f107 0308 	add.w	r3, r7, #8
 8006ec6:	4618      	mov	r0, r3
 8006ec8:	f7fe ffe4 	bl	8005e94 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006ecc:	6839      	ldr	r1, [r7, #0]
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	68ba      	ldr	r2, [r7, #8]
 8006ed2:	9202      	str	r2, [sp, #8]
 8006ed4:	9301      	str	r3, [sp, #4]
 8006ed6:	2300      	movs	r3, #0
 8006ed8:	9300      	str	r3, [sp, #0]
 8006eda:	2300      	movs	r3, #0
 8006edc:	460a      	mov	r2, r1
 8006ede:	4920      	ldr	r1, [pc, #128]	; (8006f60 <vTaskStartScheduler+0xb0>)
 8006ee0:	4820      	ldr	r0, [pc, #128]	; (8006f64 <vTaskStartScheduler+0xb4>)
 8006ee2:	f7ff fe1d 	bl	8006b20 <xTaskCreateStatic>
 8006ee6:	4602      	mov	r2, r0
 8006ee8:	4b1f      	ldr	r3, [pc, #124]	; (8006f68 <vTaskStartScheduler+0xb8>)
 8006eea:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8006eec:	4b1e      	ldr	r3, [pc, #120]	; (8006f68 <vTaskStartScheduler+0xb8>)
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	2b00      	cmp	r3, #0
 8006ef2:	d002      	beq.n	8006efa <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8006ef4:	2301      	movs	r3, #1
 8006ef6:	617b      	str	r3, [r7, #20]
 8006ef8:	e001      	b.n	8006efe <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8006efa:	2300      	movs	r3, #0
 8006efc:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8006efe:	697b      	ldr	r3, [r7, #20]
 8006f00:	2b01      	cmp	r3, #1
 8006f02:	d102      	bne.n	8006f0a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8006f04:	f000 fcf4 	bl	80078f0 <xTimerCreateTimerTask>
 8006f08:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8006f0a:	697b      	ldr	r3, [r7, #20]
 8006f0c:	2b01      	cmp	r3, #1
 8006f0e:	d115      	bne.n	8006f3c <vTaskStartScheduler+0x8c>
 8006f10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f14:	f383 8811 	msr	BASEPRI, r3
 8006f18:	f3bf 8f6f 	isb	sy
 8006f1c:	f3bf 8f4f 	dsb	sy
 8006f20:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8006f22:	4b12      	ldr	r3, [pc, #72]	; (8006f6c <vTaskStartScheduler+0xbc>)
 8006f24:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006f28:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006f2a:	4b11      	ldr	r3, [pc, #68]	; (8006f70 <vTaskStartScheduler+0xc0>)
 8006f2c:	2201      	movs	r2, #1
 8006f2e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8006f30:	4b10      	ldr	r3, [pc, #64]	; (8006f74 <vTaskStartScheduler+0xc4>)
 8006f32:	2200      	movs	r2, #0
 8006f34:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8006f36:	f001 f86b 	bl	8008010 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8006f3a:	e00d      	b.n	8006f58 <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006f3c:	697b      	ldr	r3, [r7, #20]
 8006f3e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006f42:	d109      	bne.n	8006f58 <vTaskStartScheduler+0xa8>
 8006f44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f48:	f383 8811 	msr	BASEPRI, r3
 8006f4c:	f3bf 8f6f 	isb	sy
 8006f50:	f3bf 8f4f 	dsb	sy
 8006f54:	60fb      	str	r3, [r7, #12]
 8006f56:	e7fe      	b.n	8006f56 <vTaskStartScheduler+0xa6>
}
 8006f58:	bf00      	nop
 8006f5a:	3718      	adds	r7, #24
 8006f5c:	46bd      	mov	sp, r7
 8006f5e:	bd80      	pop	{r7, pc}
 8006f60:	08008c18 	.word	0x08008c18
 8006f64:	08007585 	.word	0x08007585
 8006f68:	20000be4 	.word	0x20000be4
 8006f6c:	20000be0 	.word	0x20000be0
 8006f70:	20000bcc 	.word	0x20000bcc
 8006f74:	20000bc4 	.word	0x20000bc4

08006f78 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006f78:	b480      	push	{r7}
 8006f7a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8006f7c:	4b04      	ldr	r3, [pc, #16]	; (8006f90 <vTaskSuspendAll+0x18>)
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	3301      	adds	r3, #1
 8006f82:	4a03      	ldr	r2, [pc, #12]	; (8006f90 <vTaskSuspendAll+0x18>)
 8006f84:	6013      	str	r3, [r2, #0]
}
 8006f86:	bf00      	nop
 8006f88:	46bd      	mov	sp, r7
 8006f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f8e:	4770      	bx	lr
 8006f90:	20000be8 	.word	0x20000be8

08006f94 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006f94:	b580      	push	{r7, lr}
 8006f96:	b084      	sub	sp, #16
 8006f98:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8006f9a:	2300      	movs	r3, #0
 8006f9c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8006f9e:	2300      	movs	r3, #0
 8006fa0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8006fa2:	4b41      	ldr	r3, [pc, #260]	; (80070a8 <xTaskResumeAll+0x114>)
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	d109      	bne.n	8006fbe <xTaskResumeAll+0x2a>
 8006faa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fae:	f383 8811 	msr	BASEPRI, r3
 8006fb2:	f3bf 8f6f 	isb	sy
 8006fb6:	f3bf 8f4f 	dsb	sy
 8006fba:	603b      	str	r3, [r7, #0]
 8006fbc:	e7fe      	b.n	8006fbc <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8006fbe:	f001 f8c5 	bl	800814c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8006fc2:	4b39      	ldr	r3, [pc, #228]	; (80070a8 <xTaskResumeAll+0x114>)
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	3b01      	subs	r3, #1
 8006fc8:	4a37      	ldr	r2, [pc, #220]	; (80070a8 <xTaskResumeAll+0x114>)
 8006fca:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006fcc:	4b36      	ldr	r3, [pc, #216]	; (80070a8 <xTaskResumeAll+0x114>)
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	2b00      	cmp	r3, #0
 8006fd2:	d162      	bne.n	800709a <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006fd4:	4b35      	ldr	r3, [pc, #212]	; (80070ac <xTaskResumeAll+0x118>)
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	2b00      	cmp	r3, #0
 8006fda:	d05e      	beq.n	800709a <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006fdc:	e02f      	b.n	800703e <xTaskResumeAll+0xaa>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8006fde:	4b34      	ldr	r3, [pc, #208]	; (80070b0 <xTaskResumeAll+0x11c>)
 8006fe0:	68db      	ldr	r3, [r3, #12]
 8006fe2:	68db      	ldr	r3, [r3, #12]
 8006fe4:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006fe6:	68fb      	ldr	r3, [r7, #12]
 8006fe8:	3318      	adds	r3, #24
 8006fea:	4618      	mov	r0, r3
 8006fec:	f7ff f810 	bl	8006010 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	3304      	adds	r3, #4
 8006ff4:	4618      	mov	r0, r3
 8006ff6:	f7ff f80b 	bl	8006010 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006ffa:	68fb      	ldr	r3, [r7, #12]
 8006ffc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006ffe:	4b2d      	ldr	r3, [pc, #180]	; (80070b4 <xTaskResumeAll+0x120>)
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	429a      	cmp	r2, r3
 8007004:	d903      	bls.n	800700e <xTaskResumeAll+0x7a>
 8007006:	68fb      	ldr	r3, [r7, #12]
 8007008:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800700a:	4a2a      	ldr	r2, [pc, #168]	; (80070b4 <xTaskResumeAll+0x120>)
 800700c:	6013      	str	r3, [r2, #0]
 800700e:	68fb      	ldr	r3, [r7, #12]
 8007010:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007012:	4613      	mov	r3, r2
 8007014:	009b      	lsls	r3, r3, #2
 8007016:	4413      	add	r3, r2
 8007018:	009b      	lsls	r3, r3, #2
 800701a:	4a27      	ldr	r2, [pc, #156]	; (80070b8 <xTaskResumeAll+0x124>)
 800701c:	441a      	add	r2, r3
 800701e:	68fb      	ldr	r3, [r7, #12]
 8007020:	3304      	adds	r3, #4
 8007022:	4619      	mov	r1, r3
 8007024:	4610      	mov	r0, r2
 8007026:	f7fe ff96 	bl	8005f56 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800702a:	68fb      	ldr	r3, [r7, #12]
 800702c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800702e:	4b23      	ldr	r3, [pc, #140]	; (80070bc <xTaskResumeAll+0x128>)
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007034:	429a      	cmp	r2, r3
 8007036:	d302      	bcc.n	800703e <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8007038:	4b21      	ldr	r3, [pc, #132]	; (80070c0 <xTaskResumeAll+0x12c>)
 800703a:	2201      	movs	r2, #1
 800703c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800703e:	4b1c      	ldr	r3, [pc, #112]	; (80070b0 <xTaskResumeAll+0x11c>)
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	2b00      	cmp	r3, #0
 8007044:	d1cb      	bne.n	8006fde <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8007046:	68fb      	ldr	r3, [r7, #12]
 8007048:	2b00      	cmp	r3, #0
 800704a:	d001      	beq.n	8007050 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800704c:	f000 fb4c 	bl	80076e8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8007050:	4b1c      	ldr	r3, [pc, #112]	; (80070c4 <xTaskResumeAll+0x130>)
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	2b00      	cmp	r3, #0
 800705a:	d010      	beq.n	800707e <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800705c:	f000 f846 	bl	80070ec <xTaskIncrementTick>
 8007060:	4603      	mov	r3, r0
 8007062:	2b00      	cmp	r3, #0
 8007064:	d002      	beq.n	800706c <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8007066:	4b16      	ldr	r3, [pc, #88]	; (80070c0 <xTaskResumeAll+0x12c>)
 8007068:	2201      	movs	r2, #1
 800706a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	3b01      	subs	r3, #1
 8007070:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	2b00      	cmp	r3, #0
 8007076:	d1f1      	bne.n	800705c <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 8007078:	4b12      	ldr	r3, [pc, #72]	; (80070c4 <xTaskResumeAll+0x130>)
 800707a:	2200      	movs	r2, #0
 800707c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800707e:	4b10      	ldr	r3, [pc, #64]	; (80070c0 <xTaskResumeAll+0x12c>)
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	2b00      	cmp	r3, #0
 8007084:	d009      	beq.n	800709a <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8007086:	2301      	movs	r3, #1
 8007088:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800708a:	4b0f      	ldr	r3, [pc, #60]	; (80070c8 <xTaskResumeAll+0x134>)
 800708c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007090:	601a      	str	r2, [r3, #0]
 8007092:	f3bf 8f4f 	dsb	sy
 8007096:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800709a:	f001 f885 	bl	80081a8 <vPortExitCritical>

	return xAlreadyYielded;
 800709e:	68bb      	ldr	r3, [r7, #8]
}
 80070a0:	4618      	mov	r0, r3
 80070a2:	3710      	adds	r7, #16
 80070a4:	46bd      	mov	sp, r7
 80070a6:	bd80      	pop	{r7, pc}
 80070a8:	20000be8 	.word	0x20000be8
 80070ac:	20000bc0 	.word	0x20000bc0
 80070b0:	20000b80 	.word	0x20000b80
 80070b4:	20000bc8 	.word	0x20000bc8
 80070b8:	200006f0 	.word	0x200006f0
 80070bc:	200006ec 	.word	0x200006ec
 80070c0:	20000bd4 	.word	0x20000bd4
 80070c4:	20000bd0 	.word	0x20000bd0
 80070c8:	e000ed04 	.word	0xe000ed04

080070cc <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80070cc:	b480      	push	{r7}
 80070ce:	b083      	sub	sp, #12
 80070d0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80070d2:	4b05      	ldr	r3, [pc, #20]	; (80070e8 <xTaskGetTickCount+0x1c>)
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80070d8:	687b      	ldr	r3, [r7, #4]
}
 80070da:	4618      	mov	r0, r3
 80070dc:	370c      	adds	r7, #12
 80070de:	46bd      	mov	sp, r7
 80070e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070e4:	4770      	bx	lr
 80070e6:	bf00      	nop
 80070e8:	20000bc4 	.word	0x20000bc4

080070ec <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80070ec:	b580      	push	{r7, lr}
 80070ee:	b086      	sub	sp, #24
 80070f0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80070f2:	2300      	movs	r3, #0
 80070f4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80070f6:	4b51      	ldr	r3, [pc, #324]	; (800723c <xTaskIncrementTick+0x150>)
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	2b00      	cmp	r3, #0
 80070fc:	f040 808d 	bne.w	800721a <xTaskIncrementTick+0x12e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8007100:	4b4f      	ldr	r3, [pc, #316]	; (8007240 <xTaskIncrementTick+0x154>)
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	3301      	adds	r3, #1
 8007106:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8007108:	4a4d      	ldr	r2, [pc, #308]	; (8007240 <xTaskIncrementTick+0x154>)
 800710a:	693b      	ldr	r3, [r7, #16]
 800710c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800710e:	693b      	ldr	r3, [r7, #16]
 8007110:	2b00      	cmp	r3, #0
 8007112:	d11f      	bne.n	8007154 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8007114:	4b4b      	ldr	r3, [pc, #300]	; (8007244 <xTaskIncrementTick+0x158>)
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	2b00      	cmp	r3, #0
 800711c:	d009      	beq.n	8007132 <xTaskIncrementTick+0x46>
 800711e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007122:	f383 8811 	msr	BASEPRI, r3
 8007126:	f3bf 8f6f 	isb	sy
 800712a:	f3bf 8f4f 	dsb	sy
 800712e:	603b      	str	r3, [r7, #0]
 8007130:	e7fe      	b.n	8007130 <xTaskIncrementTick+0x44>
 8007132:	4b44      	ldr	r3, [pc, #272]	; (8007244 <xTaskIncrementTick+0x158>)
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	60fb      	str	r3, [r7, #12]
 8007138:	4b43      	ldr	r3, [pc, #268]	; (8007248 <xTaskIncrementTick+0x15c>)
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	4a41      	ldr	r2, [pc, #260]	; (8007244 <xTaskIncrementTick+0x158>)
 800713e:	6013      	str	r3, [r2, #0]
 8007140:	4a41      	ldr	r2, [pc, #260]	; (8007248 <xTaskIncrementTick+0x15c>)
 8007142:	68fb      	ldr	r3, [r7, #12]
 8007144:	6013      	str	r3, [r2, #0]
 8007146:	4b41      	ldr	r3, [pc, #260]	; (800724c <xTaskIncrementTick+0x160>)
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	3301      	adds	r3, #1
 800714c:	4a3f      	ldr	r2, [pc, #252]	; (800724c <xTaskIncrementTick+0x160>)
 800714e:	6013      	str	r3, [r2, #0]
 8007150:	f000 faca 	bl	80076e8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8007154:	4b3e      	ldr	r3, [pc, #248]	; (8007250 <xTaskIncrementTick+0x164>)
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	693a      	ldr	r2, [r7, #16]
 800715a:	429a      	cmp	r2, r3
 800715c:	d34e      	bcc.n	80071fc <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800715e:	4b39      	ldr	r3, [pc, #228]	; (8007244 <xTaskIncrementTick+0x158>)
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	2b00      	cmp	r3, #0
 8007166:	d101      	bne.n	800716c <xTaskIncrementTick+0x80>
 8007168:	2301      	movs	r3, #1
 800716a:	e000      	b.n	800716e <xTaskIncrementTick+0x82>
 800716c:	2300      	movs	r3, #0
 800716e:	2b00      	cmp	r3, #0
 8007170:	d004      	beq.n	800717c <xTaskIncrementTick+0x90>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007172:	4b37      	ldr	r3, [pc, #220]	; (8007250 <xTaskIncrementTick+0x164>)
 8007174:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007178:	601a      	str	r2, [r3, #0]
					break;
 800717a:	e03f      	b.n	80071fc <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800717c:	4b31      	ldr	r3, [pc, #196]	; (8007244 <xTaskIncrementTick+0x158>)
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	68db      	ldr	r3, [r3, #12]
 8007182:	68db      	ldr	r3, [r3, #12]
 8007184:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8007186:	68bb      	ldr	r3, [r7, #8]
 8007188:	685b      	ldr	r3, [r3, #4]
 800718a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800718c:	693a      	ldr	r2, [r7, #16]
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	429a      	cmp	r2, r3
 8007192:	d203      	bcs.n	800719c <xTaskIncrementTick+0xb0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8007194:	4a2e      	ldr	r2, [pc, #184]	; (8007250 <xTaskIncrementTick+0x164>)
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	6013      	str	r3, [r2, #0]
						break;
 800719a:	e02f      	b.n	80071fc <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800719c:	68bb      	ldr	r3, [r7, #8]
 800719e:	3304      	adds	r3, #4
 80071a0:	4618      	mov	r0, r3
 80071a2:	f7fe ff35 	bl	8006010 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80071a6:	68bb      	ldr	r3, [r7, #8]
 80071a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80071aa:	2b00      	cmp	r3, #0
 80071ac:	d004      	beq.n	80071b8 <xTaskIncrementTick+0xcc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80071ae:	68bb      	ldr	r3, [r7, #8]
 80071b0:	3318      	adds	r3, #24
 80071b2:	4618      	mov	r0, r3
 80071b4:	f7fe ff2c 	bl	8006010 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80071b8:	68bb      	ldr	r3, [r7, #8]
 80071ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80071bc:	4b25      	ldr	r3, [pc, #148]	; (8007254 <xTaskIncrementTick+0x168>)
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	429a      	cmp	r2, r3
 80071c2:	d903      	bls.n	80071cc <xTaskIncrementTick+0xe0>
 80071c4:	68bb      	ldr	r3, [r7, #8]
 80071c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071c8:	4a22      	ldr	r2, [pc, #136]	; (8007254 <xTaskIncrementTick+0x168>)
 80071ca:	6013      	str	r3, [r2, #0]
 80071cc:	68bb      	ldr	r3, [r7, #8]
 80071ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80071d0:	4613      	mov	r3, r2
 80071d2:	009b      	lsls	r3, r3, #2
 80071d4:	4413      	add	r3, r2
 80071d6:	009b      	lsls	r3, r3, #2
 80071d8:	4a1f      	ldr	r2, [pc, #124]	; (8007258 <xTaskIncrementTick+0x16c>)
 80071da:	441a      	add	r2, r3
 80071dc:	68bb      	ldr	r3, [r7, #8]
 80071de:	3304      	adds	r3, #4
 80071e0:	4619      	mov	r1, r3
 80071e2:	4610      	mov	r0, r2
 80071e4:	f7fe feb7 	bl	8005f56 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80071e8:	68bb      	ldr	r3, [r7, #8]
 80071ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80071ec:	4b1b      	ldr	r3, [pc, #108]	; (800725c <xTaskIncrementTick+0x170>)
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071f2:	429a      	cmp	r2, r3
 80071f4:	d3b3      	bcc.n	800715e <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 80071f6:	2301      	movs	r3, #1
 80071f8:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80071fa:	e7b0      	b.n	800715e <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80071fc:	4b17      	ldr	r3, [pc, #92]	; (800725c <xTaskIncrementTick+0x170>)
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007202:	4915      	ldr	r1, [pc, #84]	; (8007258 <xTaskIncrementTick+0x16c>)
 8007204:	4613      	mov	r3, r2
 8007206:	009b      	lsls	r3, r3, #2
 8007208:	4413      	add	r3, r2
 800720a:	009b      	lsls	r3, r3, #2
 800720c:	440b      	add	r3, r1
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	2b01      	cmp	r3, #1
 8007212:	d907      	bls.n	8007224 <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 8007214:	2301      	movs	r3, #1
 8007216:	617b      	str	r3, [r7, #20]
 8007218:	e004      	b.n	8007224 <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800721a:	4b11      	ldr	r3, [pc, #68]	; (8007260 <xTaskIncrementTick+0x174>)
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	3301      	adds	r3, #1
 8007220:	4a0f      	ldr	r2, [pc, #60]	; (8007260 <xTaskIncrementTick+0x174>)
 8007222:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8007224:	4b0f      	ldr	r3, [pc, #60]	; (8007264 <xTaskIncrementTick+0x178>)
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	2b00      	cmp	r3, #0
 800722a:	d001      	beq.n	8007230 <xTaskIncrementTick+0x144>
		{
			xSwitchRequired = pdTRUE;
 800722c:	2301      	movs	r3, #1
 800722e:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8007230:	697b      	ldr	r3, [r7, #20]
}
 8007232:	4618      	mov	r0, r3
 8007234:	3718      	adds	r7, #24
 8007236:	46bd      	mov	sp, r7
 8007238:	bd80      	pop	{r7, pc}
 800723a:	bf00      	nop
 800723c:	20000be8 	.word	0x20000be8
 8007240:	20000bc4 	.word	0x20000bc4
 8007244:	20000b78 	.word	0x20000b78
 8007248:	20000b7c 	.word	0x20000b7c
 800724c:	20000bd8 	.word	0x20000bd8
 8007250:	20000be0 	.word	0x20000be0
 8007254:	20000bc8 	.word	0x20000bc8
 8007258:	200006f0 	.word	0x200006f0
 800725c:	200006ec 	.word	0x200006ec
 8007260:	20000bd0 	.word	0x20000bd0
 8007264:	20000bd4 	.word	0x20000bd4

08007268 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8007268:	b480      	push	{r7}
 800726a:	b085      	sub	sp, #20
 800726c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800726e:	4b27      	ldr	r3, [pc, #156]	; (800730c <vTaskSwitchContext+0xa4>)
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	2b00      	cmp	r3, #0
 8007274:	d003      	beq.n	800727e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8007276:	4b26      	ldr	r3, [pc, #152]	; (8007310 <vTaskSwitchContext+0xa8>)
 8007278:	2201      	movs	r2, #1
 800727a:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800727c:	e040      	b.n	8007300 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 800727e:	4b24      	ldr	r3, [pc, #144]	; (8007310 <vTaskSwitchContext+0xa8>)
 8007280:	2200      	movs	r2, #0
 8007282:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8007284:	4b23      	ldr	r3, [pc, #140]	; (8007314 <vTaskSwitchContext+0xac>)
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	60fb      	str	r3, [r7, #12]
 800728a:	e00f      	b.n	80072ac <vTaskSwitchContext+0x44>
 800728c:	68fb      	ldr	r3, [r7, #12]
 800728e:	2b00      	cmp	r3, #0
 8007290:	d109      	bne.n	80072a6 <vTaskSwitchContext+0x3e>
 8007292:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007296:	f383 8811 	msr	BASEPRI, r3
 800729a:	f3bf 8f6f 	isb	sy
 800729e:	f3bf 8f4f 	dsb	sy
 80072a2:	607b      	str	r3, [r7, #4]
 80072a4:	e7fe      	b.n	80072a4 <vTaskSwitchContext+0x3c>
 80072a6:	68fb      	ldr	r3, [r7, #12]
 80072a8:	3b01      	subs	r3, #1
 80072aa:	60fb      	str	r3, [r7, #12]
 80072ac:	491a      	ldr	r1, [pc, #104]	; (8007318 <vTaskSwitchContext+0xb0>)
 80072ae:	68fa      	ldr	r2, [r7, #12]
 80072b0:	4613      	mov	r3, r2
 80072b2:	009b      	lsls	r3, r3, #2
 80072b4:	4413      	add	r3, r2
 80072b6:	009b      	lsls	r3, r3, #2
 80072b8:	440b      	add	r3, r1
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	2b00      	cmp	r3, #0
 80072be:	d0e5      	beq.n	800728c <vTaskSwitchContext+0x24>
 80072c0:	68fa      	ldr	r2, [r7, #12]
 80072c2:	4613      	mov	r3, r2
 80072c4:	009b      	lsls	r3, r3, #2
 80072c6:	4413      	add	r3, r2
 80072c8:	009b      	lsls	r3, r3, #2
 80072ca:	4a13      	ldr	r2, [pc, #76]	; (8007318 <vTaskSwitchContext+0xb0>)
 80072cc:	4413      	add	r3, r2
 80072ce:	60bb      	str	r3, [r7, #8]
 80072d0:	68bb      	ldr	r3, [r7, #8]
 80072d2:	685b      	ldr	r3, [r3, #4]
 80072d4:	685a      	ldr	r2, [r3, #4]
 80072d6:	68bb      	ldr	r3, [r7, #8]
 80072d8:	605a      	str	r2, [r3, #4]
 80072da:	68bb      	ldr	r3, [r7, #8]
 80072dc:	685a      	ldr	r2, [r3, #4]
 80072de:	68bb      	ldr	r3, [r7, #8]
 80072e0:	3308      	adds	r3, #8
 80072e2:	429a      	cmp	r2, r3
 80072e4:	d104      	bne.n	80072f0 <vTaskSwitchContext+0x88>
 80072e6:	68bb      	ldr	r3, [r7, #8]
 80072e8:	685b      	ldr	r3, [r3, #4]
 80072ea:	685a      	ldr	r2, [r3, #4]
 80072ec:	68bb      	ldr	r3, [r7, #8]
 80072ee:	605a      	str	r2, [r3, #4]
 80072f0:	68bb      	ldr	r3, [r7, #8]
 80072f2:	685b      	ldr	r3, [r3, #4]
 80072f4:	68db      	ldr	r3, [r3, #12]
 80072f6:	4a09      	ldr	r2, [pc, #36]	; (800731c <vTaskSwitchContext+0xb4>)
 80072f8:	6013      	str	r3, [r2, #0]
 80072fa:	4a06      	ldr	r2, [pc, #24]	; (8007314 <vTaskSwitchContext+0xac>)
 80072fc:	68fb      	ldr	r3, [r7, #12]
 80072fe:	6013      	str	r3, [r2, #0]
}
 8007300:	bf00      	nop
 8007302:	3714      	adds	r7, #20
 8007304:	46bd      	mov	sp, r7
 8007306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800730a:	4770      	bx	lr
 800730c:	20000be8 	.word	0x20000be8
 8007310:	20000bd4 	.word	0x20000bd4
 8007314:	20000bc8 	.word	0x20000bc8
 8007318:	200006f0 	.word	0x200006f0
 800731c:	200006ec 	.word	0x200006ec

08007320 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8007320:	b580      	push	{r7, lr}
 8007322:	b084      	sub	sp, #16
 8007324:	af00      	add	r7, sp, #0
 8007326:	6078      	str	r0, [r7, #4]
 8007328:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	2b00      	cmp	r3, #0
 800732e:	d109      	bne.n	8007344 <vTaskPlaceOnEventList+0x24>
 8007330:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007334:	f383 8811 	msr	BASEPRI, r3
 8007338:	f3bf 8f6f 	isb	sy
 800733c:	f3bf 8f4f 	dsb	sy
 8007340:	60fb      	str	r3, [r7, #12]
 8007342:	e7fe      	b.n	8007342 <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007344:	4b07      	ldr	r3, [pc, #28]	; (8007364 <vTaskPlaceOnEventList+0x44>)
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	3318      	adds	r3, #24
 800734a:	4619      	mov	r1, r3
 800734c:	6878      	ldr	r0, [r7, #4]
 800734e:	f7fe fe26 	bl	8005f9e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8007352:	2101      	movs	r1, #1
 8007354:	6838      	ldr	r0, [r7, #0]
 8007356:	f000 fa77 	bl	8007848 <prvAddCurrentTaskToDelayedList>
}
 800735a:	bf00      	nop
 800735c:	3710      	adds	r7, #16
 800735e:	46bd      	mov	sp, r7
 8007360:	bd80      	pop	{r7, pc}
 8007362:	bf00      	nop
 8007364:	200006ec 	.word	0x200006ec

08007368 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007368:	b580      	push	{r7, lr}
 800736a:	b086      	sub	sp, #24
 800736c:	af00      	add	r7, sp, #0
 800736e:	60f8      	str	r0, [r7, #12]
 8007370:	60b9      	str	r1, [r7, #8]
 8007372:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8007374:	68fb      	ldr	r3, [r7, #12]
 8007376:	2b00      	cmp	r3, #0
 8007378:	d109      	bne.n	800738e <vTaskPlaceOnEventListRestricted+0x26>
 800737a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800737e:	f383 8811 	msr	BASEPRI, r3
 8007382:	f3bf 8f6f 	isb	sy
 8007386:	f3bf 8f4f 	dsb	sy
 800738a:	617b      	str	r3, [r7, #20]
 800738c:	e7fe      	b.n	800738c <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800738e:	4b0a      	ldr	r3, [pc, #40]	; (80073b8 <vTaskPlaceOnEventListRestricted+0x50>)
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	3318      	adds	r3, #24
 8007394:	4619      	mov	r1, r3
 8007396:	68f8      	ldr	r0, [r7, #12]
 8007398:	f7fe fddd 	bl	8005f56 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	2b00      	cmp	r3, #0
 80073a0:	d002      	beq.n	80073a8 <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 80073a2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80073a6:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80073a8:	6879      	ldr	r1, [r7, #4]
 80073aa:	68b8      	ldr	r0, [r7, #8]
 80073ac:	f000 fa4c 	bl	8007848 <prvAddCurrentTaskToDelayedList>
	}
 80073b0:	bf00      	nop
 80073b2:	3718      	adds	r7, #24
 80073b4:	46bd      	mov	sp, r7
 80073b6:	bd80      	pop	{r7, pc}
 80073b8:	200006ec 	.word	0x200006ec

080073bc <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80073bc:	b580      	push	{r7, lr}
 80073be:	b086      	sub	sp, #24
 80073c0:	af00      	add	r7, sp, #0
 80073c2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	68db      	ldr	r3, [r3, #12]
 80073c8:	68db      	ldr	r3, [r3, #12]
 80073ca:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80073cc:	693b      	ldr	r3, [r7, #16]
 80073ce:	2b00      	cmp	r3, #0
 80073d0:	d109      	bne.n	80073e6 <xTaskRemoveFromEventList+0x2a>
 80073d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073d6:	f383 8811 	msr	BASEPRI, r3
 80073da:	f3bf 8f6f 	isb	sy
 80073de:	f3bf 8f4f 	dsb	sy
 80073e2:	60fb      	str	r3, [r7, #12]
 80073e4:	e7fe      	b.n	80073e4 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80073e6:	693b      	ldr	r3, [r7, #16]
 80073e8:	3318      	adds	r3, #24
 80073ea:	4618      	mov	r0, r3
 80073ec:	f7fe fe10 	bl	8006010 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80073f0:	4b1d      	ldr	r3, [pc, #116]	; (8007468 <xTaskRemoveFromEventList+0xac>)
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	2b00      	cmp	r3, #0
 80073f6:	d11d      	bne.n	8007434 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80073f8:	693b      	ldr	r3, [r7, #16]
 80073fa:	3304      	adds	r3, #4
 80073fc:	4618      	mov	r0, r3
 80073fe:	f7fe fe07 	bl	8006010 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8007402:	693b      	ldr	r3, [r7, #16]
 8007404:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007406:	4b19      	ldr	r3, [pc, #100]	; (800746c <xTaskRemoveFromEventList+0xb0>)
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	429a      	cmp	r2, r3
 800740c:	d903      	bls.n	8007416 <xTaskRemoveFromEventList+0x5a>
 800740e:	693b      	ldr	r3, [r7, #16]
 8007410:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007412:	4a16      	ldr	r2, [pc, #88]	; (800746c <xTaskRemoveFromEventList+0xb0>)
 8007414:	6013      	str	r3, [r2, #0]
 8007416:	693b      	ldr	r3, [r7, #16]
 8007418:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800741a:	4613      	mov	r3, r2
 800741c:	009b      	lsls	r3, r3, #2
 800741e:	4413      	add	r3, r2
 8007420:	009b      	lsls	r3, r3, #2
 8007422:	4a13      	ldr	r2, [pc, #76]	; (8007470 <xTaskRemoveFromEventList+0xb4>)
 8007424:	441a      	add	r2, r3
 8007426:	693b      	ldr	r3, [r7, #16]
 8007428:	3304      	adds	r3, #4
 800742a:	4619      	mov	r1, r3
 800742c:	4610      	mov	r0, r2
 800742e:	f7fe fd92 	bl	8005f56 <vListInsertEnd>
 8007432:	e005      	b.n	8007440 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8007434:	693b      	ldr	r3, [r7, #16]
 8007436:	3318      	adds	r3, #24
 8007438:	4619      	mov	r1, r3
 800743a:	480e      	ldr	r0, [pc, #56]	; (8007474 <xTaskRemoveFromEventList+0xb8>)
 800743c:	f7fe fd8b 	bl	8005f56 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007440:	693b      	ldr	r3, [r7, #16]
 8007442:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007444:	4b0c      	ldr	r3, [pc, #48]	; (8007478 <xTaskRemoveFromEventList+0xbc>)
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800744a:	429a      	cmp	r2, r3
 800744c:	d905      	bls.n	800745a <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800744e:	2301      	movs	r3, #1
 8007450:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8007452:	4b0a      	ldr	r3, [pc, #40]	; (800747c <xTaskRemoveFromEventList+0xc0>)
 8007454:	2201      	movs	r2, #1
 8007456:	601a      	str	r2, [r3, #0]
 8007458:	e001      	b.n	800745e <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 800745a:	2300      	movs	r3, #0
 800745c:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 800745e:	697b      	ldr	r3, [r7, #20]
}
 8007460:	4618      	mov	r0, r3
 8007462:	3718      	adds	r7, #24
 8007464:	46bd      	mov	sp, r7
 8007466:	bd80      	pop	{r7, pc}
 8007468:	20000be8 	.word	0x20000be8
 800746c:	20000bc8 	.word	0x20000bc8
 8007470:	200006f0 	.word	0x200006f0
 8007474:	20000b80 	.word	0x20000b80
 8007478:	200006ec 	.word	0x200006ec
 800747c:	20000bd4 	.word	0x20000bd4

08007480 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8007480:	b480      	push	{r7}
 8007482:	b083      	sub	sp, #12
 8007484:	af00      	add	r7, sp, #0
 8007486:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8007488:	4b06      	ldr	r3, [pc, #24]	; (80074a4 <vTaskInternalSetTimeOutState+0x24>)
 800748a:	681a      	ldr	r2, [r3, #0]
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8007490:	4b05      	ldr	r3, [pc, #20]	; (80074a8 <vTaskInternalSetTimeOutState+0x28>)
 8007492:	681a      	ldr	r2, [r3, #0]
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	605a      	str	r2, [r3, #4]
}
 8007498:	bf00      	nop
 800749a:	370c      	adds	r7, #12
 800749c:	46bd      	mov	sp, r7
 800749e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074a2:	4770      	bx	lr
 80074a4:	20000bd8 	.word	0x20000bd8
 80074a8:	20000bc4 	.word	0x20000bc4

080074ac <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80074ac:	b580      	push	{r7, lr}
 80074ae:	b088      	sub	sp, #32
 80074b0:	af00      	add	r7, sp, #0
 80074b2:	6078      	str	r0, [r7, #4]
 80074b4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	2b00      	cmp	r3, #0
 80074ba:	d109      	bne.n	80074d0 <xTaskCheckForTimeOut+0x24>
 80074bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074c0:	f383 8811 	msr	BASEPRI, r3
 80074c4:	f3bf 8f6f 	isb	sy
 80074c8:	f3bf 8f4f 	dsb	sy
 80074cc:	613b      	str	r3, [r7, #16]
 80074ce:	e7fe      	b.n	80074ce <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 80074d0:	683b      	ldr	r3, [r7, #0]
 80074d2:	2b00      	cmp	r3, #0
 80074d4:	d109      	bne.n	80074ea <xTaskCheckForTimeOut+0x3e>
 80074d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074da:	f383 8811 	msr	BASEPRI, r3
 80074de:	f3bf 8f6f 	isb	sy
 80074e2:	f3bf 8f4f 	dsb	sy
 80074e6:	60fb      	str	r3, [r7, #12]
 80074e8:	e7fe      	b.n	80074e8 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 80074ea:	f000 fe2f 	bl	800814c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80074ee:	4b1d      	ldr	r3, [pc, #116]	; (8007564 <xTaskCheckForTimeOut+0xb8>)
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	685b      	ldr	r3, [r3, #4]
 80074f8:	69ba      	ldr	r2, [r7, #24]
 80074fa:	1ad3      	subs	r3, r2, r3
 80074fc:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80074fe:	683b      	ldr	r3, [r7, #0]
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007506:	d102      	bne.n	800750e <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8007508:	2300      	movs	r3, #0
 800750a:	61fb      	str	r3, [r7, #28]
 800750c:	e023      	b.n	8007556 <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	681a      	ldr	r2, [r3, #0]
 8007512:	4b15      	ldr	r3, [pc, #84]	; (8007568 <xTaskCheckForTimeOut+0xbc>)
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	429a      	cmp	r2, r3
 8007518:	d007      	beq.n	800752a <xTaskCheckForTimeOut+0x7e>
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	685b      	ldr	r3, [r3, #4]
 800751e:	69ba      	ldr	r2, [r7, #24]
 8007520:	429a      	cmp	r2, r3
 8007522:	d302      	bcc.n	800752a <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8007524:	2301      	movs	r3, #1
 8007526:	61fb      	str	r3, [r7, #28]
 8007528:	e015      	b.n	8007556 <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800752a:	683b      	ldr	r3, [r7, #0]
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	697a      	ldr	r2, [r7, #20]
 8007530:	429a      	cmp	r2, r3
 8007532:	d20b      	bcs.n	800754c <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8007534:	683b      	ldr	r3, [r7, #0]
 8007536:	681a      	ldr	r2, [r3, #0]
 8007538:	697b      	ldr	r3, [r7, #20]
 800753a:	1ad2      	subs	r2, r2, r3
 800753c:	683b      	ldr	r3, [r7, #0]
 800753e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8007540:	6878      	ldr	r0, [r7, #4]
 8007542:	f7ff ff9d 	bl	8007480 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8007546:	2300      	movs	r3, #0
 8007548:	61fb      	str	r3, [r7, #28]
 800754a:	e004      	b.n	8007556 <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 800754c:	683b      	ldr	r3, [r7, #0]
 800754e:	2200      	movs	r2, #0
 8007550:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8007552:	2301      	movs	r3, #1
 8007554:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8007556:	f000 fe27 	bl	80081a8 <vPortExitCritical>

	return xReturn;
 800755a:	69fb      	ldr	r3, [r7, #28]
}
 800755c:	4618      	mov	r0, r3
 800755e:	3720      	adds	r7, #32
 8007560:	46bd      	mov	sp, r7
 8007562:	bd80      	pop	{r7, pc}
 8007564:	20000bc4 	.word	0x20000bc4
 8007568:	20000bd8 	.word	0x20000bd8

0800756c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800756c:	b480      	push	{r7}
 800756e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8007570:	4b03      	ldr	r3, [pc, #12]	; (8007580 <vTaskMissedYield+0x14>)
 8007572:	2201      	movs	r2, #1
 8007574:	601a      	str	r2, [r3, #0]
}
 8007576:	bf00      	nop
 8007578:	46bd      	mov	sp, r7
 800757a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800757e:	4770      	bx	lr
 8007580:	20000bd4 	.word	0x20000bd4

08007584 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8007584:	b580      	push	{r7, lr}
 8007586:	b082      	sub	sp, #8
 8007588:	af00      	add	r7, sp, #0
 800758a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800758c:	f000 f852 	bl	8007634 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007590:	4b06      	ldr	r3, [pc, #24]	; (80075ac <prvIdleTask+0x28>)
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	2b01      	cmp	r3, #1
 8007596:	d9f9      	bls.n	800758c <prvIdleTask+0x8>
			{
				taskYIELD();
 8007598:	4b05      	ldr	r3, [pc, #20]	; (80075b0 <prvIdleTask+0x2c>)
 800759a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800759e:	601a      	str	r2, [r3, #0]
 80075a0:	f3bf 8f4f 	dsb	sy
 80075a4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80075a8:	e7f0      	b.n	800758c <prvIdleTask+0x8>
 80075aa:	bf00      	nop
 80075ac:	200006f0 	.word	0x200006f0
 80075b0:	e000ed04 	.word	0xe000ed04

080075b4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80075b4:	b580      	push	{r7, lr}
 80075b6:	b082      	sub	sp, #8
 80075b8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80075ba:	2300      	movs	r3, #0
 80075bc:	607b      	str	r3, [r7, #4]
 80075be:	e00c      	b.n	80075da <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80075c0:	687a      	ldr	r2, [r7, #4]
 80075c2:	4613      	mov	r3, r2
 80075c4:	009b      	lsls	r3, r3, #2
 80075c6:	4413      	add	r3, r2
 80075c8:	009b      	lsls	r3, r3, #2
 80075ca:	4a12      	ldr	r2, [pc, #72]	; (8007614 <prvInitialiseTaskLists+0x60>)
 80075cc:	4413      	add	r3, r2
 80075ce:	4618      	mov	r0, r3
 80075d0:	f7fe fc94 	bl	8005efc <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	3301      	adds	r3, #1
 80075d8:	607b      	str	r3, [r7, #4]
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	2b37      	cmp	r3, #55	; 0x37
 80075de:	d9ef      	bls.n	80075c0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80075e0:	480d      	ldr	r0, [pc, #52]	; (8007618 <prvInitialiseTaskLists+0x64>)
 80075e2:	f7fe fc8b 	bl	8005efc <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80075e6:	480d      	ldr	r0, [pc, #52]	; (800761c <prvInitialiseTaskLists+0x68>)
 80075e8:	f7fe fc88 	bl	8005efc <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80075ec:	480c      	ldr	r0, [pc, #48]	; (8007620 <prvInitialiseTaskLists+0x6c>)
 80075ee:	f7fe fc85 	bl	8005efc <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80075f2:	480c      	ldr	r0, [pc, #48]	; (8007624 <prvInitialiseTaskLists+0x70>)
 80075f4:	f7fe fc82 	bl	8005efc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80075f8:	480b      	ldr	r0, [pc, #44]	; (8007628 <prvInitialiseTaskLists+0x74>)
 80075fa:	f7fe fc7f 	bl	8005efc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80075fe:	4b0b      	ldr	r3, [pc, #44]	; (800762c <prvInitialiseTaskLists+0x78>)
 8007600:	4a05      	ldr	r2, [pc, #20]	; (8007618 <prvInitialiseTaskLists+0x64>)
 8007602:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007604:	4b0a      	ldr	r3, [pc, #40]	; (8007630 <prvInitialiseTaskLists+0x7c>)
 8007606:	4a05      	ldr	r2, [pc, #20]	; (800761c <prvInitialiseTaskLists+0x68>)
 8007608:	601a      	str	r2, [r3, #0]
}
 800760a:	bf00      	nop
 800760c:	3708      	adds	r7, #8
 800760e:	46bd      	mov	sp, r7
 8007610:	bd80      	pop	{r7, pc}
 8007612:	bf00      	nop
 8007614:	200006f0 	.word	0x200006f0
 8007618:	20000b50 	.word	0x20000b50
 800761c:	20000b64 	.word	0x20000b64
 8007620:	20000b80 	.word	0x20000b80
 8007624:	20000b94 	.word	0x20000b94
 8007628:	20000bac 	.word	0x20000bac
 800762c:	20000b78 	.word	0x20000b78
 8007630:	20000b7c 	.word	0x20000b7c

08007634 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8007634:	b580      	push	{r7, lr}
 8007636:	b082      	sub	sp, #8
 8007638:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800763a:	e019      	b.n	8007670 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800763c:	f000 fd86 	bl	800814c <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8007640:	4b0f      	ldr	r3, [pc, #60]	; (8007680 <prvCheckTasksWaitingTermination+0x4c>)
 8007642:	68db      	ldr	r3, [r3, #12]
 8007644:	68db      	ldr	r3, [r3, #12]
 8007646:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	3304      	adds	r3, #4
 800764c:	4618      	mov	r0, r3
 800764e:	f7fe fcdf 	bl	8006010 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8007652:	4b0c      	ldr	r3, [pc, #48]	; (8007684 <prvCheckTasksWaitingTermination+0x50>)
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	3b01      	subs	r3, #1
 8007658:	4a0a      	ldr	r2, [pc, #40]	; (8007684 <prvCheckTasksWaitingTermination+0x50>)
 800765a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800765c:	4b0a      	ldr	r3, [pc, #40]	; (8007688 <prvCheckTasksWaitingTermination+0x54>)
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	3b01      	subs	r3, #1
 8007662:	4a09      	ldr	r2, [pc, #36]	; (8007688 <prvCheckTasksWaitingTermination+0x54>)
 8007664:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8007666:	f000 fd9f 	bl	80081a8 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800766a:	6878      	ldr	r0, [r7, #4]
 800766c:	f000 f80e 	bl	800768c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007670:	4b05      	ldr	r3, [pc, #20]	; (8007688 <prvCheckTasksWaitingTermination+0x54>)
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	2b00      	cmp	r3, #0
 8007676:	d1e1      	bne.n	800763c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8007678:	bf00      	nop
 800767a:	3708      	adds	r7, #8
 800767c:	46bd      	mov	sp, r7
 800767e:	bd80      	pop	{r7, pc}
 8007680:	20000b94 	.word	0x20000b94
 8007684:	20000bc0 	.word	0x20000bc0
 8007688:	20000ba8 	.word	0x20000ba8

0800768c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800768c:	b580      	push	{r7, lr}
 800768e:	b084      	sub	sp, #16
 8007690:	af00      	add	r7, sp, #0
 8007692:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800769a:	2b00      	cmp	r3, #0
 800769c:	d108      	bne.n	80076b0 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80076a2:	4618      	mov	r0, r3
 80076a4:	f000 ff2e 	bl	8008504 <vPortFree>
				vPortFree( pxTCB );
 80076a8:	6878      	ldr	r0, [r7, #4]
 80076aa:	f000 ff2b 	bl	8008504 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80076ae:	e017      	b.n	80076e0 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80076b6:	2b01      	cmp	r3, #1
 80076b8:	d103      	bne.n	80076c2 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80076ba:	6878      	ldr	r0, [r7, #4]
 80076bc:	f000 ff22 	bl	8008504 <vPortFree>
	}
 80076c0:	e00e      	b.n	80076e0 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80076c8:	2b02      	cmp	r3, #2
 80076ca:	d009      	beq.n	80076e0 <prvDeleteTCB+0x54>
 80076cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076d0:	f383 8811 	msr	BASEPRI, r3
 80076d4:	f3bf 8f6f 	isb	sy
 80076d8:	f3bf 8f4f 	dsb	sy
 80076dc:	60fb      	str	r3, [r7, #12]
 80076de:	e7fe      	b.n	80076de <prvDeleteTCB+0x52>
	}
 80076e0:	bf00      	nop
 80076e2:	3710      	adds	r7, #16
 80076e4:	46bd      	mov	sp, r7
 80076e6:	bd80      	pop	{r7, pc}

080076e8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80076e8:	b480      	push	{r7}
 80076ea:	b083      	sub	sp, #12
 80076ec:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80076ee:	4b0f      	ldr	r3, [pc, #60]	; (800772c <prvResetNextTaskUnblockTime+0x44>)
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	2b00      	cmp	r3, #0
 80076f6:	d101      	bne.n	80076fc <prvResetNextTaskUnblockTime+0x14>
 80076f8:	2301      	movs	r3, #1
 80076fa:	e000      	b.n	80076fe <prvResetNextTaskUnblockTime+0x16>
 80076fc:	2300      	movs	r3, #0
 80076fe:	2b00      	cmp	r3, #0
 8007700:	d004      	beq.n	800770c <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8007702:	4b0b      	ldr	r3, [pc, #44]	; (8007730 <prvResetNextTaskUnblockTime+0x48>)
 8007704:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007708:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800770a:	e008      	b.n	800771e <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800770c:	4b07      	ldr	r3, [pc, #28]	; (800772c <prvResetNextTaskUnblockTime+0x44>)
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	68db      	ldr	r3, [r3, #12]
 8007712:	68db      	ldr	r3, [r3, #12]
 8007714:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	685b      	ldr	r3, [r3, #4]
 800771a:	4a05      	ldr	r2, [pc, #20]	; (8007730 <prvResetNextTaskUnblockTime+0x48>)
 800771c:	6013      	str	r3, [r2, #0]
}
 800771e:	bf00      	nop
 8007720:	370c      	adds	r7, #12
 8007722:	46bd      	mov	sp, r7
 8007724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007728:	4770      	bx	lr
 800772a:	bf00      	nop
 800772c:	20000b78 	.word	0x20000b78
 8007730:	20000be0 	.word	0x20000be0

08007734 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8007734:	b480      	push	{r7}
 8007736:	b083      	sub	sp, #12
 8007738:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800773a:	4b0b      	ldr	r3, [pc, #44]	; (8007768 <xTaskGetSchedulerState+0x34>)
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	2b00      	cmp	r3, #0
 8007740:	d102      	bne.n	8007748 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8007742:	2301      	movs	r3, #1
 8007744:	607b      	str	r3, [r7, #4]
 8007746:	e008      	b.n	800775a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007748:	4b08      	ldr	r3, [pc, #32]	; (800776c <xTaskGetSchedulerState+0x38>)
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	2b00      	cmp	r3, #0
 800774e:	d102      	bne.n	8007756 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8007750:	2302      	movs	r3, #2
 8007752:	607b      	str	r3, [r7, #4]
 8007754:	e001      	b.n	800775a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8007756:	2300      	movs	r3, #0
 8007758:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800775a:	687b      	ldr	r3, [r7, #4]
	}
 800775c:	4618      	mov	r0, r3
 800775e:	370c      	adds	r7, #12
 8007760:	46bd      	mov	sp, r7
 8007762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007766:	4770      	bx	lr
 8007768:	20000bcc 	.word	0x20000bcc
 800776c:	20000be8 	.word	0x20000be8

08007770 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8007770:	b580      	push	{r7, lr}
 8007772:	b086      	sub	sp, #24
 8007774:	af00      	add	r7, sp, #0
 8007776:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800777c:	2300      	movs	r3, #0
 800777e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	2b00      	cmp	r3, #0
 8007784:	d054      	beq.n	8007830 <xTaskPriorityDisinherit+0xc0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8007786:	4b2d      	ldr	r3, [pc, #180]	; (800783c <xTaskPriorityDisinherit+0xcc>)
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	693a      	ldr	r2, [r7, #16]
 800778c:	429a      	cmp	r2, r3
 800778e:	d009      	beq.n	80077a4 <xTaskPriorityDisinherit+0x34>
 8007790:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007794:	f383 8811 	msr	BASEPRI, r3
 8007798:	f3bf 8f6f 	isb	sy
 800779c:	f3bf 8f4f 	dsb	sy
 80077a0:	60fb      	str	r3, [r7, #12]
 80077a2:	e7fe      	b.n	80077a2 <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 80077a4:	693b      	ldr	r3, [r7, #16]
 80077a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80077a8:	2b00      	cmp	r3, #0
 80077aa:	d109      	bne.n	80077c0 <xTaskPriorityDisinherit+0x50>
 80077ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077b0:	f383 8811 	msr	BASEPRI, r3
 80077b4:	f3bf 8f6f 	isb	sy
 80077b8:	f3bf 8f4f 	dsb	sy
 80077bc:	60bb      	str	r3, [r7, #8]
 80077be:	e7fe      	b.n	80077be <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 80077c0:	693b      	ldr	r3, [r7, #16]
 80077c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80077c4:	1e5a      	subs	r2, r3, #1
 80077c6:	693b      	ldr	r3, [r7, #16]
 80077c8:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80077ca:	693b      	ldr	r3, [r7, #16]
 80077cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80077ce:	693b      	ldr	r3, [r7, #16]
 80077d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80077d2:	429a      	cmp	r2, r3
 80077d4:	d02c      	beq.n	8007830 <xTaskPriorityDisinherit+0xc0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80077d6:	693b      	ldr	r3, [r7, #16]
 80077d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80077da:	2b00      	cmp	r3, #0
 80077dc:	d128      	bne.n	8007830 <xTaskPriorityDisinherit+0xc0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80077de:	693b      	ldr	r3, [r7, #16]
 80077e0:	3304      	adds	r3, #4
 80077e2:	4618      	mov	r0, r3
 80077e4:	f7fe fc14 	bl	8006010 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80077e8:	693b      	ldr	r3, [r7, #16]
 80077ea:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80077ec:	693b      	ldr	r3, [r7, #16]
 80077ee:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80077f0:	693b      	ldr	r3, [r7, #16]
 80077f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077f4:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80077f8:	693b      	ldr	r3, [r7, #16]
 80077fa:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80077fc:	693b      	ldr	r3, [r7, #16]
 80077fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007800:	4b0f      	ldr	r3, [pc, #60]	; (8007840 <xTaskPriorityDisinherit+0xd0>)
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	429a      	cmp	r2, r3
 8007806:	d903      	bls.n	8007810 <xTaskPriorityDisinherit+0xa0>
 8007808:	693b      	ldr	r3, [r7, #16]
 800780a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800780c:	4a0c      	ldr	r2, [pc, #48]	; (8007840 <xTaskPriorityDisinherit+0xd0>)
 800780e:	6013      	str	r3, [r2, #0]
 8007810:	693b      	ldr	r3, [r7, #16]
 8007812:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007814:	4613      	mov	r3, r2
 8007816:	009b      	lsls	r3, r3, #2
 8007818:	4413      	add	r3, r2
 800781a:	009b      	lsls	r3, r3, #2
 800781c:	4a09      	ldr	r2, [pc, #36]	; (8007844 <xTaskPriorityDisinherit+0xd4>)
 800781e:	441a      	add	r2, r3
 8007820:	693b      	ldr	r3, [r7, #16]
 8007822:	3304      	adds	r3, #4
 8007824:	4619      	mov	r1, r3
 8007826:	4610      	mov	r0, r2
 8007828:	f7fe fb95 	bl	8005f56 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800782c:	2301      	movs	r3, #1
 800782e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007830:	697b      	ldr	r3, [r7, #20]
	}
 8007832:	4618      	mov	r0, r3
 8007834:	3718      	adds	r7, #24
 8007836:	46bd      	mov	sp, r7
 8007838:	bd80      	pop	{r7, pc}
 800783a:	bf00      	nop
 800783c:	200006ec 	.word	0x200006ec
 8007840:	20000bc8 	.word	0x20000bc8
 8007844:	200006f0 	.word	0x200006f0

08007848 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8007848:	b580      	push	{r7, lr}
 800784a:	b084      	sub	sp, #16
 800784c:	af00      	add	r7, sp, #0
 800784e:	6078      	str	r0, [r7, #4]
 8007850:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8007852:	4b21      	ldr	r3, [pc, #132]	; (80078d8 <prvAddCurrentTaskToDelayedList+0x90>)
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007858:	4b20      	ldr	r3, [pc, #128]	; (80078dc <prvAddCurrentTaskToDelayedList+0x94>)
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	3304      	adds	r3, #4
 800785e:	4618      	mov	r0, r3
 8007860:	f7fe fbd6 	bl	8006010 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800786a:	d10a      	bne.n	8007882 <prvAddCurrentTaskToDelayedList+0x3a>
 800786c:	683b      	ldr	r3, [r7, #0]
 800786e:	2b00      	cmp	r3, #0
 8007870:	d007      	beq.n	8007882 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007872:	4b1a      	ldr	r3, [pc, #104]	; (80078dc <prvAddCurrentTaskToDelayedList+0x94>)
 8007874:	681b      	ldr	r3, [r3, #0]
 8007876:	3304      	adds	r3, #4
 8007878:	4619      	mov	r1, r3
 800787a:	4819      	ldr	r0, [pc, #100]	; (80078e0 <prvAddCurrentTaskToDelayedList+0x98>)
 800787c:	f7fe fb6b 	bl	8005f56 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8007880:	e026      	b.n	80078d0 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8007882:	68fa      	ldr	r2, [r7, #12]
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	4413      	add	r3, r2
 8007888:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800788a:	4b14      	ldr	r3, [pc, #80]	; (80078dc <prvAddCurrentTaskToDelayedList+0x94>)
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	68ba      	ldr	r2, [r7, #8]
 8007890:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8007892:	68ba      	ldr	r2, [r7, #8]
 8007894:	68fb      	ldr	r3, [r7, #12]
 8007896:	429a      	cmp	r2, r3
 8007898:	d209      	bcs.n	80078ae <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800789a:	4b12      	ldr	r3, [pc, #72]	; (80078e4 <prvAddCurrentTaskToDelayedList+0x9c>)
 800789c:	681a      	ldr	r2, [r3, #0]
 800789e:	4b0f      	ldr	r3, [pc, #60]	; (80078dc <prvAddCurrentTaskToDelayedList+0x94>)
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	3304      	adds	r3, #4
 80078a4:	4619      	mov	r1, r3
 80078a6:	4610      	mov	r0, r2
 80078a8:	f7fe fb79 	bl	8005f9e <vListInsert>
}
 80078ac:	e010      	b.n	80078d0 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80078ae:	4b0e      	ldr	r3, [pc, #56]	; (80078e8 <prvAddCurrentTaskToDelayedList+0xa0>)
 80078b0:	681a      	ldr	r2, [r3, #0]
 80078b2:	4b0a      	ldr	r3, [pc, #40]	; (80078dc <prvAddCurrentTaskToDelayedList+0x94>)
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	3304      	adds	r3, #4
 80078b8:	4619      	mov	r1, r3
 80078ba:	4610      	mov	r0, r2
 80078bc:	f7fe fb6f 	bl	8005f9e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80078c0:	4b0a      	ldr	r3, [pc, #40]	; (80078ec <prvAddCurrentTaskToDelayedList+0xa4>)
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	68ba      	ldr	r2, [r7, #8]
 80078c6:	429a      	cmp	r2, r3
 80078c8:	d202      	bcs.n	80078d0 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80078ca:	4a08      	ldr	r2, [pc, #32]	; (80078ec <prvAddCurrentTaskToDelayedList+0xa4>)
 80078cc:	68bb      	ldr	r3, [r7, #8]
 80078ce:	6013      	str	r3, [r2, #0]
}
 80078d0:	bf00      	nop
 80078d2:	3710      	adds	r7, #16
 80078d4:	46bd      	mov	sp, r7
 80078d6:	bd80      	pop	{r7, pc}
 80078d8:	20000bc4 	.word	0x20000bc4
 80078dc:	200006ec 	.word	0x200006ec
 80078e0:	20000bac 	.word	0x20000bac
 80078e4:	20000b7c 	.word	0x20000b7c
 80078e8:	20000b78 	.word	0x20000b78
 80078ec:	20000be0 	.word	0x20000be0

080078f0 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80078f0:	b580      	push	{r7, lr}
 80078f2:	b08a      	sub	sp, #40	; 0x28
 80078f4:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80078f6:	2300      	movs	r3, #0
 80078f8:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80078fa:	f000 fac3 	bl	8007e84 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80078fe:	4b1c      	ldr	r3, [pc, #112]	; (8007970 <xTimerCreateTimerTask+0x80>)
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	2b00      	cmp	r3, #0
 8007904:	d021      	beq.n	800794a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8007906:	2300      	movs	r3, #0
 8007908:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800790a:	2300      	movs	r3, #0
 800790c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800790e:	1d3a      	adds	r2, r7, #4
 8007910:	f107 0108 	add.w	r1, r7, #8
 8007914:	f107 030c 	add.w	r3, r7, #12
 8007918:	4618      	mov	r0, r3
 800791a:	f7fe fad5 	bl	8005ec8 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800791e:	6879      	ldr	r1, [r7, #4]
 8007920:	68bb      	ldr	r3, [r7, #8]
 8007922:	68fa      	ldr	r2, [r7, #12]
 8007924:	9202      	str	r2, [sp, #8]
 8007926:	9301      	str	r3, [sp, #4]
 8007928:	2302      	movs	r3, #2
 800792a:	9300      	str	r3, [sp, #0]
 800792c:	2300      	movs	r3, #0
 800792e:	460a      	mov	r2, r1
 8007930:	4910      	ldr	r1, [pc, #64]	; (8007974 <xTimerCreateTimerTask+0x84>)
 8007932:	4811      	ldr	r0, [pc, #68]	; (8007978 <xTimerCreateTimerTask+0x88>)
 8007934:	f7ff f8f4 	bl	8006b20 <xTaskCreateStatic>
 8007938:	4602      	mov	r2, r0
 800793a:	4b10      	ldr	r3, [pc, #64]	; (800797c <xTimerCreateTimerTask+0x8c>)
 800793c:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800793e:	4b0f      	ldr	r3, [pc, #60]	; (800797c <xTimerCreateTimerTask+0x8c>)
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	2b00      	cmp	r3, #0
 8007944:	d001      	beq.n	800794a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8007946:	2301      	movs	r3, #1
 8007948:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800794a:	697b      	ldr	r3, [r7, #20]
 800794c:	2b00      	cmp	r3, #0
 800794e:	d109      	bne.n	8007964 <xTimerCreateTimerTask+0x74>
 8007950:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007954:	f383 8811 	msr	BASEPRI, r3
 8007958:	f3bf 8f6f 	isb	sy
 800795c:	f3bf 8f4f 	dsb	sy
 8007960:	613b      	str	r3, [r7, #16]
 8007962:	e7fe      	b.n	8007962 <xTimerCreateTimerTask+0x72>
	return xReturn;
 8007964:	697b      	ldr	r3, [r7, #20]
}
 8007966:	4618      	mov	r0, r3
 8007968:	3718      	adds	r7, #24
 800796a:	46bd      	mov	sp, r7
 800796c:	bd80      	pop	{r7, pc}
 800796e:	bf00      	nop
 8007970:	20000c1c 	.word	0x20000c1c
 8007974:	08008c20 	.word	0x08008c20
 8007978:	08007a99 	.word	0x08007a99
 800797c:	20000c20 	.word	0x20000c20

08007980 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8007980:	b580      	push	{r7, lr}
 8007982:	b08a      	sub	sp, #40	; 0x28
 8007984:	af00      	add	r7, sp, #0
 8007986:	60f8      	str	r0, [r7, #12]
 8007988:	60b9      	str	r1, [r7, #8]
 800798a:	607a      	str	r2, [r7, #4]
 800798c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800798e:	2300      	movs	r3, #0
 8007990:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8007992:	68fb      	ldr	r3, [r7, #12]
 8007994:	2b00      	cmp	r3, #0
 8007996:	d109      	bne.n	80079ac <xTimerGenericCommand+0x2c>
 8007998:	f04f 0350 	mov.w	r3, #80	; 0x50
 800799c:	f383 8811 	msr	BASEPRI, r3
 80079a0:	f3bf 8f6f 	isb	sy
 80079a4:	f3bf 8f4f 	dsb	sy
 80079a8:	623b      	str	r3, [r7, #32]
 80079aa:	e7fe      	b.n	80079aa <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80079ac:	4b19      	ldr	r3, [pc, #100]	; (8007a14 <xTimerGenericCommand+0x94>)
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	2b00      	cmp	r3, #0
 80079b2:	d02a      	beq.n	8007a0a <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80079b4:	68bb      	ldr	r3, [r7, #8]
 80079b6:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 80079bc:	68fb      	ldr	r3, [r7, #12]
 80079be:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80079c0:	68bb      	ldr	r3, [r7, #8]
 80079c2:	2b05      	cmp	r3, #5
 80079c4:	dc18      	bgt.n	80079f8 <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80079c6:	f7ff feb5 	bl	8007734 <xTaskGetSchedulerState>
 80079ca:	4603      	mov	r3, r0
 80079cc:	2b02      	cmp	r3, #2
 80079ce:	d109      	bne.n	80079e4 <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80079d0:	4b10      	ldr	r3, [pc, #64]	; (8007a14 <xTimerGenericCommand+0x94>)
 80079d2:	6818      	ldr	r0, [r3, #0]
 80079d4:	f107 0110 	add.w	r1, r7, #16
 80079d8:	2300      	movs	r3, #0
 80079da:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80079dc:	f7fe fc40 	bl	8006260 <xQueueGenericSend>
 80079e0:	6278      	str	r0, [r7, #36]	; 0x24
 80079e2:	e012      	b.n	8007a0a <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80079e4:	4b0b      	ldr	r3, [pc, #44]	; (8007a14 <xTimerGenericCommand+0x94>)
 80079e6:	6818      	ldr	r0, [r3, #0]
 80079e8:	f107 0110 	add.w	r1, r7, #16
 80079ec:	2300      	movs	r3, #0
 80079ee:	2200      	movs	r2, #0
 80079f0:	f7fe fc36 	bl	8006260 <xQueueGenericSend>
 80079f4:	6278      	str	r0, [r7, #36]	; 0x24
 80079f6:	e008      	b.n	8007a0a <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80079f8:	4b06      	ldr	r3, [pc, #24]	; (8007a14 <xTimerGenericCommand+0x94>)
 80079fa:	6818      	ldr	r0, [r3, #0]
 80079fc:	f107 0110 	add.w	r1, r7, #16
 8007a00:	2300      	movs	r3, #0
 8007a02:	683a      	ldr	r2, [r7, #0]
 8007a04:	f7fe fd26 	bl	8006454 <xQueueGenericSendFromISR>
 8007a08:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8007a0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007a0c:	4618      	mov	r0, r3
 8007a0e:	3728      	adds	r7, #40	; 0x28
 8007a10:	46bd      	mov	sp, r7
 8007a12:	bd80      	pop	{r7, pc}
 8007a14:	20000c1c 	.word	0x20000c1c

08007a18 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8007a18:	b580      	push	{r7, lr}
 8007a1a:	b088      	sub	sp, #32
 8007a1c:	af02      	add	r7, sp, #8
 8007a1e:	6078      	str	r0, [r7, #4]
 8007a20:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007a22:	4b1c      	ldr	r3, [pc, #112]	; (8007a94 <prvProcessExpiredTimer+0x7c>)
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	68db      	ldr	r3, [r3, #12]
 8007a28:	68db      	ldr	r3, [r3, #12]
 8007a2a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007a2c:	697b      	ldr	r3, [r7, #20]
 8007a2e:	3304      	adds	r3, #4
 8007a30:	4618      	mov	r0, r3
 8007a32:	f7fe faed 	bl	8006010 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8007a36:	697b      	ldr	r3, [r7, #20]
 8007a38:	69db      	ldr	r3, [r3, #28]
 8007a3a:	2b01      	cmp	r3, #1
 8007a3c:	d121      	bne.n	8007a82 <prvProcessExpiredTimer+0x6a>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8007a3e:	697b      	ldr	r3, [r7, #20]
 8007a40:	699a      	ldr	r2, [r3, #24]
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	18d1      	adds	r1, r2, r3
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	683a      	ldr	r2, [r7, #0]
 8007a4a:	6978      	ldr	r0, [r7, #20]
 8007a4c:	f000 f8c8 	bl	8007be0 <prvInsertTimerInActiveList>
 8007a50:	4603      	mov	r3, r0
 8007a52:	2b00      	cmp	r3, #0
 8007a54:	d015      	beq.n	8007a82 <prvProcessExpiredTimer+0x6a>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007a56:	2300      	movs	r3, #0
 8007a58:	9300      	str	r3, [sp, #0]
 8007a5a:	2300      	movs	r3, #0
 8007a5c:	687a      	ldr	r2, [r7, #4]
 8007a5e:	2100      	movs	r1, #0
 8007a60:	6978      	ldr	r0, [r7, #20]
 8007a62:	f7ff ff8d 	bl	8007980 <xTimerGenericCommand>
 8007a66:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8007a68:	693b      	ldr	r3, [r7, #16]
 8007a6a:	2b00      	cmp	r3, #0
 8007a6c:	d109      	bne.n	8007a82 <prvProcessExpiredTimer+0x6a>
 8007a6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a72:	f383 8811 	msr	BASEPRI, r3
 8007a76:	f3bf 8f6f 	isb	sy
 8007a7a:	f3bf 8f4f 	dsb	sy
 8007a7e:	60fb      	str	r3, [r7, #12]
 8007a80:	e7fe      	b.n	8007a80 <prvProcessExpiredTimer+0x68>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007a82:	697b      	ldr	r3, [r7, #20]
 8007a84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a86:	6978      	ldr	r0, [r7, #20]
 8007a88:	4798      	blx	r3
}
 8007a8a:	bf00      	nop
 8007a8c:	3718      	adds	r7, #24
 8007a8e:	46bd      	mov	sp, r7
 8007a90:	bd80      	pop	{r7, pc}
 8007a92:	bf00      	nop
 8007a94:	20000c14 	.word	0x20000c14

08007a98 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 8007a98:	b580      	push	{r7, lr}
 8007a9a:	b084      	sub	sp, #16
 8007a9c:	af00      	add	r7, sp, #0
 8007a9e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007aa0:	f107 0308 	add.w	r3, r7, #8
 8007aa4:	4618      	mov	r0, r3
 8007aa6:	f000 f857 	bl	8007b58 <prvGetNextExpireTime>
 8007aaa:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8007aac:	68bb      	ldr	r3, [r7, #8]
 8007aae:	4619      	mov	r1, r3
 8007ab0:	68f8      	ldr	r0, [r7, #12]
 8007ab2:	f000 f803 	bl	8007abc <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8007ab6:	f000 f8d5 	bl	8007c64 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007aba:	e7f1      	b.n	8007aa0 <prvTimerTask+0x8>

08007abc <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8007abc:	b580      	push	{r7, lr}
 8007abe:	b084      	sub	sp, #16
 8007ac0:	af00      	add	r7, sp, #0
 8007ac2:	6078      	str	r0, [r7, #4]
 8007ac4:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8007ac6:	f7ff fa57 	bl	8006f78 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007aca:	f107 0308 	add.w	r3, r7, #8
 8007ace:	4618      	mov	r0, r3
 8007ad0:	f000 f866 	bl	8007ba0 <prvSampleTimeNow>
 8007ad4:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8007ad6:	68bb      	ldr	r3, [r7, #8]
 8007ad8:	2b00      	cmp	r3, #0
 8007ada:	d130      	bne.n	8007b3e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8007adc:	683b      	ldr	r3, [r7, #0]
 8007ade:	2b00      	cmp	r3, #0
 8007ae0:	d10a      	bne.n	8007af8 <prvProcessTimerOrBlockTask+0x3c>
 8007ae2:	687a      	ldr	r2, [r7, #4]
 8007ae4:	68fb      	ldr	r3, [r7, #12]
 8007ae6:	429a      	cmp	r2, r3
 8007ae8:	d806      	bhi.n	8007af8 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8007aea:	f7ff fa53 	bl	8006f94 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8007aee:	68f9      	ldr	r1, [r7, #12]
 8007af0:	6878      	ldr	r0, [r7, #4]
 8007af2:	f7ff ff91 	bl	8007a18 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8007af6:	e024      	b.n	8007b42 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8007af8:	683b      	ldr	r3, [r7, #0]
 8007afa:	2b00      	cmp	r3, #0
 8007afc:	d008      	beq.n	8007b10 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8007afe:	4b13      	ldr	r3, [pc, #76]	; (8007b4c <prvProcessTimerOrBlockTask+0x90>)
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	681b      	ldr	r3, [r3, #0]
 8007b04:	2b00      	cmp	r3, #0
 8007b06:	bf0c      	ite	eq
 8007b08:	2301      	moveq	r3, #1
 8007b0a:	2300      	movne	r3, #0
 8007b0c:	b2db      	uxtb	r3, r3
 8007b0e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8007b10:	4b0f      	ldr	r3, [pc, #60]	; (8007b50 <prvProcessTimerOrBlockTask+0x94>)
 8007b12:	6818      	ldr	r0, [r3, #0]
 8007b14:	687a      	ldr	r2, [r7, #4]
 8007b16:	68fb      	ldr	r3, [r7, #12]
 8007b18:	1ad3      	subs	r3, r2, r3
 8007b1a:	683a      	ldr	r2, [r7, #0]
 8007b1c:	4619      	mov	r1, r3
 8007b1e:	f7fe ffcb 	bl	8006ab8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8007b22:	f7ff fa37 	bl	8006f94 <xTaskResumeAll>
 8007b26:	4603      	mov	r3, r0
 8007b28:	2b00      	cmp	r3, #0
 8007b2a:	d10a      	bne.n	8007b42 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8007b2c:	4b09      	ldr	r3, [pc, #36]	; (8007b54 <prvProcessTimerOrBlockTask+0x98>)
 8007b2e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007b32:	601a      	str	r2, [r3, #0]
 8007b34:	f3bf 8f4f 	dsb	sy
 8007b38:	f3bf 8f6f 	isb	sy
}
 8007b3c:	e001      	b.n	8007b42 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8007b3e:	f7ff fa29 	bl	8006f94 <xTaskResumeAll>
}
 8007b42:	bf00      	nop
 8007b44:	3710      	adds	r7, #16
 8007b46:	46bd      	mov	sp, r7
 8007b48:	bd80      	pop	{r7, pc}
 8007b4a:	bf00      	nop
 8007b4c:	20000c18 	.word	0x20000c18
 8007b50:	20000c1c 	.word	0x20000c1c
 8007b54:	e000ed04 	.word	0xe000ed04

08007b58 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8007b58:	b480      	push	{r7}
 8007b5a:	b085      	sub	sp, #20
 8007b5c:	af00      	add	r7, sp, #0
 8007b5e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8007b60:	4b0e      	ldr	r3, [pc, #56]	; (8007b9c <prvGetNextExpireTime+0x44>)
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	2b00      	cmp	r3, #0
 8007b68:	bf0c      	ite	eq
 8007b6a:	2301      	moveq	r3, #1
 8007b6c:	2300      	movne	r3, #0
 8007b6e:	b2db      	uxtb	r3, r3
 8007b70:	461a      	mov	r2, r3
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	2b00      	cmp	r3, #0
 8007b7c:	d105      	bne.n	8007b8a <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007b7e:	4b07      	ldr	r3, [pc, #28]	; (8007b9c <prvGetNextExpireTime+0x44>)
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	68db      	ldr	r3, [r3, #12]
 8007b84:	681b      	ldr	r3, [r3, #0]
 8007b86:	60fb      	str	r3, [r7, #12]
 8007b88:	e001      	b.n	8007b8e <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8007b8a:	2300      	movs	r3, #0
 8007b8c:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8007b8e:	68fb      	ldr	r3, [r7, #12]
}
 8007b90:	4618      	mov	r0, r3
 8007b92:	3714      	adds	r7, #20
 8007b94:	46bd      	mov	sp, r7
 8007b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b9a:	4770      	bx	lr
 8007b9c:	20000c14 	.word	0x20000c14

08007ba0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8007ba0:	b580      	push	{r7, lr}
 8007ba2:	b084      	sub	sp, #16
 8007ba4:	af00      	add	r7, sp, #0
 8007ba6:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8007ba8:	f7ff fa90 	bl	80070cc <xTaskGetTickCount>
 8007bac:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8007bae:	4b0b      	ldr	r3, [pc, #44]	; (8007bdc <prvSampleTimeNow+0x3c>)
 8007bb0:	681b      	ldr	r3, [r3, #0]
 8007bb2:	68fa      	ldr	r2, [r7, #12]
 8007bb4:	429a      	cmp	r2, r3
 8007bb6:	d205      	bcs.n	8007bc4 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8007bb8:	f000 f904 	bl	8007dc4 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	2201      	movs	r2, #1
 8007bc0:	601a      	str	r2, [r3, #0]
 8007bc2:	e002      	b.n	8007bca <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	2200      	movs	r2, #0
 8007bc8:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8007bca:	4a04      	ldr	r2, [pc, #16]	; (8007bdc <prvSampleTimeNow+0x3c>)
 8007bcc:	68fb      	ldr	r3, [r7, #12]
 8007bce:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8007bd0:	68fb      	ldr	r3, [r7, #12]
}
 8007bd2:	4618      	mov	r0, r3
 8007bd4:	3710      	adds	r7, #16
 8007bd6:	46bd      	mov	sp, r7
 8007bd8:	bd80      	pop	{r7, pc}
 8007bda:	bf00      	nop
 8007bdc:	20000c24 	.word	0x20000c24

08007be0 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8007be0:	b580      	push	{r7, lr}
 8007be2:	b086      	sub	sp, #24
 8007be4:	af00      	add	r7, sp, #0
 8007be6:	60f8      	str	r0, [r7, #12]
 8007be8:	60b9      	str	r1, [r7, #8]
 8007bea:	607a      	str	r2, [r7, #4]
 8007bec:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8007bee:	2300      	movs	r3, #0
 8007bf0:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8007bf2:	68fb      	ldr	r3, [r7, #12]
 8007bf4:	68ba      	ldr	r2, [r7, #8]
 8007bf6:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007bf8:	68fb      	ldr	r3, [r7, #12]
 8007bfa:	68fa      	ldr	r2, [r7, #12]
 8007bfc:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8007bfe:	68ba      	ldr	r2, [r7, #8]
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	429a      	cmp	r2, r3
 8007c04:	d812      	bhi.n	8007c2c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007c06:	687a      	ldr	r2, [r7, #4]
 8007c08:	683b      	ldr	r3, [r7, #0]
 8007c0a:	1ad2      	subs	r2, r2, r3
 8007c0c:	68fb      	ldr	r3, [r7, #12]
 8007c0e:	699b      	ldr	r3, [r3, #24]
 8007c10:	429a      	cmp	r2, r3
 8007c12:	d302      	bcc.n	8007c1a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8007c14:	2301      	movs	r3, #1
 8007c16:	617b      	str	r3, [r7, #20]
 8007c18:	e01b      	b.n	8007c52 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8007c1a:	4b10      	ldr	r3, [pc, #64]	; (8007c5c <prvInsertTimerInActiveList+0x7c>)
 8007c1c:	681a      	ldr	r2, [r3, #0]
 8007c1e:	68fb      	ldr	r3, [r7, #12]
 8007c20:	3304      	adds	r3, #4
 8007c22:	4619      	mov	r1, r3
 8007c24:	4610      	mov	r0, r2
 8007c26:	f7fe f9ba 	bl	8005f9e <vListInsert>
 8007c2a:	e012      	b.n	8007c52 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8007c2c:	687a      	ldr	r2, [r7, #4]
 8007c2e:	683b      	ldr	r3, [r7, #0]
 8007c30:	429a      	cmp	r2, r3
 8007c32:	d206      	bcs.n	8007c42 <prvInsertTimerInActiveList+0x62>
 8007c34:	68ba      	ldr	r2, [r7, #8]
 8007c36:	683b      	ldr	r3, [r7, #0]
 8007c38:	429a      	cmp	r2, r3
 8007c3a:	d302      	bcc.n	8007c42 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8007c3c:	2301      	movs	r3, #1
 8007c3e:	617b      	str	r3, [r7, #20]
 8007c40:	e007      	b.n	8007c52 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007c42:	4b07      	ldr	r3, [pc, #28]	; (8007c60 <prvInsertTimerInActiveList+0x80>)
 8007c44:	681a      	ldr	r2, [r3, #0]
 8007c46:	68fb      	ldr	r3, [r7, #12]
 8007c48:	3304      	adds	r3, #4
 8007c4a:	4619      	mov	r1, r3
 8007c4c:	4610      	mov	r0, r2
 8007c4e:	f7fe f9a6 	bl	8005f9e <vListInsert>
		}
	}

	return xProcessTimerNow;
 8007c52:	697b      	ldr	r3, [r7, #20]
}
 8007c54:	4618      	mov	r0, r3
 8007c56:	3718      	adds	r7, #24
 8007c58:	46bd      	mov	sp, r7
 8007c5a:	bd80      	pop	{r7, pc}
 8007c5c:	20000c18 	.word	0x20000c18
 8007c60:	20000c14 	.word	0x20000c14

08007c64 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8007c64:	b580      	push	{r7, lr}
 8007c66:	b08e      	sub	sp, #56	; 0x38
 8007c68:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007c6a:	e099      	b.n	8007da0 <prvProcessReceivedCommands+0x13c>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	2b00      	cmp	r3, #0
 8007c70:	da17      	bge.n	8007ca2 <prvProcessReceivedCommands+0x3e>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8007c72:	1d3b      	adds	r3, r7, #4
 8007c74:	3304      	adds	r3, #4
 8007c76:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8007c78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c7a:	2b00      	cmp	r3, #0
 8007c7c:	d109      	bne.n	8007c92 <prvProcessReceivedCommands+0x2e>
 8007c7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c82:	f383 8811 	msr	BASEPRI, r3
 8007c86:	f3bf 8f6f 	isb	sy
 8007c8a:	f3bf 8f4f 	dsb	sy
 8007c8e:	61fb      	str	r3, [r7, #28]
 8007c90:	e7fe      	b.n	8007c90 <prvProcessReceivedCommands+0x2c>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8007c92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c94:	681b      	ldr	r3, [r3, #0]
 8007c96:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007c98:	6850      	ldr	r0, [r2, #4]
 8007c9a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007c9c:	6892      	ldr	r2, [r2, #8]
 8007c9e:	4611      	mov	r1, r2
 8007ca0:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	2b00      	cmp	r3, #0
 8007ca6:	db7a      	blt.n	8007d9e <prvProcessReceivedCommands+0x13a>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8007ca8:	68fb      	ldr	r3, [r7, #12]
 8007caa:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8007cac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007cae:	695b      	ldr	r3, [r3, #20]
 8007cb0:	2b00      	cmp	r3, #0
 8007cb2:	d004      	beq.n	8007cbe <prvProcessReceivedCommands+0x5a>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007cb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007cb6:	3304      	adds	r3, #4
 8007cb8:	4618      	mov	r0, r3
 8007cba:	f7fe f9a9 	bl	8006010 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007cbe:	463b      	mov	r3, r7
 8007cc0:	4618      	mov	r0, r3
 8007cc2:	f7ff ff6d 	bl	8007ba0 <prvSampleTimeNow>
 8007cc6:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	2b09      	cmp	r3, #9
 8007ccc:	d868      	bhi.n	8007da0 <prvProcessReceivedCommands+0x13c>
 8007cce:	a201      	add	r2, pc, #4	; (adr r2, 8007cd4 <prvProcessReceivedCommands+0x70>)
 8007cd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007cd4:	08007cfd 	.word	0x08007cfd
 8007cd8:	08007cfd 	.word	0x08007cfd
 8007cdc:	08007cfd 	.word	0x08007cfd
 8007ce0:	08007da1 	.word	0x08007da1
 8007ce4:	08007d57 	.word	0x08007d57
 8007ce8:	08007d8d 	.word	0x08007d8d
 8007cec:	08007cfd 	.word	0x08007cfd
 8007cf0:	08007cfd 	.word	0x08007cfd
 8007cf4:	08007da1 	.word	0x08007da1
 8007cf8:	08007d57 	.word	0x08007d57
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8007cfc:	68ba      	ldr	r2, [r7, #8]
 8007cfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d00:	699b      	ldr	r3, [r3, #24]
 8007d02:	18d1      	adds	r1, r2, r3
 8007d04:	68bb      	ldr	r3, [r7, #8]
 8007d06:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007d08:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007d0a:	f7ff ff69 	bl	8007be0 <prvInsertTimerInActiveList>
 8007d0e:	4603      	mov	r3, r0
 8007d10:	2b00      	cmp	r3, #0
 8007d12:	d045      	beq.n	8007da0 <prvProcessReceivedCommands+0x13c>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007d14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d18:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007d1a:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8007d1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d1e:	69db      	ldr	r3, [r3, #28]
 8007d20:	2b01      	cmp	r3, #1
 8007d22:	d13d      	bne.n	8007da0 <prvProcessReceivedCommands+0x13c>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8007d24:	68ba      	ldr	r2, [r7, #8]
 8007d26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d28:	699b      	ldr	r3, [r3, #24]
 8007d2a:	441a      	add	r2, r3
 8007d2c:	2300      	movs	r3, #0
 8007d2e:	9300      	str	r3, [sp, #0]
 8007d30:	2300      	movs	r3, #0
 8007d32:	2100      	movs	r1, #0
 8007d34:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007d36:	f7ff fe23 	bl	8007980 <xTimerGenericCommand>
 8007d3a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8007d3c:	6a3b      	ldr	r3, [r7, #32]
 8007d3e:	2b00      	cmp	r3, #0
 8007d40:	d12e      	bne.n	8007da0 <prvProcessReceivedCommands+0x13c>
 8007d42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d46:	f383 8811 	msr	BASEPRI, r3
 8007d4a:	f3bf 8f6f 	isb	sy
 8007d4e:	f3bf 8f4f 	dsb	sy
 8007d52:	61bb      	str	r3, [r7, #24]
 8007d54:	e7fe      	b.n	8007d54 <prvProcessReceivedCommands+0xf0>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8007d56:	68ba      	ldr	r2, [r7, #8]
 8007d58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d5a:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8007d5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d5e:	699b      	ldr	r3, [r3, #24]
 8007d60:	2b00      	cmp	r3, #0
 8007d62:	d109      	bne.n	8007d78 <prvProcessReceivedCommands+0x114>
 8007d64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d68:	f383 8811 	msr	BASEPRI, r3
 8007d6c:	f3bf 8f6f 	isb	sy
 8007d70:	f3bf 8f4f 	dsb	sy
 8007d74:	617b      	str	r3, [r7, #20]
 8007d76:	e7fe      	b.n	8007d76 <prvProcessReceivedCommands+0x112>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8007d78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d7a:	699a      	ldr	r2, [r3, #24]
 8007d7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d7e:	18d1      	adds	r1, r2, r3
 8007d80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d82:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007d84:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007d86:	f7ff ff2b 	bl	8007be0 <prvInsertTimerInActiveList>
					break;
 8007d8a:	e009      	b.n	8007da0 <prvProcessReceivedCommands+0x13c>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8007d8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d8e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8007d92:	2b00      	cmp	r3, #0
 8007d94:	d104      	bne.n	8007da0 <prvProcessReceivedCommands+0x13c>
						{
							vPortFree( pxTimer );
 8007d96:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007d98:	f000 fbb4 	bl	8008504 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8007d9c:	e000      	b.n	8007da0 <prvProcessReceivedCommands+0x13c>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8007d9e:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007da0:	4b07      	ldr	r3, [pc, #28]	; (8007dc0 <prvProcessReceivedCommands+0x15c>)
 8007da2:	681b      	ldr	r3, [r3, #0]
 8007da4:	1d39      	adds	r1, r7, #4
 8007da6:	2200      	movs	r2, #0
 8007da8:	4618      	mov	r0, r3
 8007daa:	f7fe fc71 	bl	8006690 <xQueueReceive>
 8007dae:	4603      	mov	r3, r0
 8007db0:	2b00      	cmp	r3, #0
 8007db2:	f47f af5b 	bne.w	8007c6c <prvProcessReceivedCommands+0x8>
	}
}
 8007db6:	bf00      	nop
 8007db8:	3730      	adds	r7, #48	; 0x30
 8007dba:	46bd      	mov	sp, r7
 8007dbc:	bd80      	pop	{r7, pc}
 8007dbe:	bf00      	nop
 8007dc0:	20000c1c 	.word	0x20000c1c

08007dc4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8007dc4:	b580      	push	{r7, lr}
 8007dc6:	b088      	sub	sp, #32
 8007dc8:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007dca:	e044      	b.n	8007e56 <prvSwitchTimerLists+0x92>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007dcc:	4b2b      	ldr	r3, [pc, #172]	; (8007e7c <prvSwitchTimerLists+0xb8>)
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	68db      	ldr	r3, [r3, #12]
 8007dd2:	681b      	ldr	r3, [r3, #0]
 8007dd4:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007dd6:	4b29      	ldr	r3, [pc, #164]	; (8007e7c <prvSwitchTimerLists+0xb8>)
 8007dd8:	681b      	ldr	r3, [r3, #0]
 8007dda:	68db      	ldr	r3, [r3, #12]
 8007ddc:	68db      	ldr	r3, [r3, #12]
 8007dde:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007de0:	68fb      	ldr	r3, [r7, #12]
 8007de2:	3304      	adds	r3, #4
 8007de4:	4618      	mov	r0, r3
 8007de6:	f7fe f913 	bl	8006010 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007dea:	68fb      	ldr	r3, [r7, #12]
 8007dec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007dee:	68f8      	ldr	r0, [r7, #12]
 8007df0:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8007df2:	68fb      	ldr	r3, [r7, #12]
 8007df4:	69db      	ldr	r3, [r3, #28]
 8007df6:	2b01      	cmp	r3, #1
 8007df8:	d12d      	bne.n	8007e56 <prvSwitchTimerLists+0x92>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8007dfa:	68fb      	ldr	r3, [r7, #12]
 8007dfc:	699b      	ldr	r3, [r3, #24]
 8007dfe:	693a      	ldr	r2, [r7, #16]
 8007e00:	4413      	add	r3, r2
 8007e02:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8007e04:	68ba      	ldr	r2, [r7, #8]
 8007e06:	693b      	ldr	r3, [r7, #16]
 8007e08:	429a      	cmp	r2, r3
 8007e0a:	d90e      	bls.n	8007e2a <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8007e0c:	68fb      	ldr	r3, [r7, #12]
 8007e0e:	68ba      	ldr	r2, [r7, #8]
 8007e10:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007e12:	68fb      	ldr	r3, [r7, #12]
 8007e14:	68fa      	ldr	r2, [r7, #12]
 8007e16:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007e18:	4b18      	ldr	r3, [pc, #96]	; (8007e7c <prvSwitchTimerLists+0xb8>)
 8007e1a:	681a      	ldr	r2, [r3, #0]
 8007e1c:	68fb      	ldr	r3, [r7, #12]
 8007e1e:	3304      	adds	r3, #4
 8007e20:	4619      	mov	r1, r3
 8007e22:	4610      	mov	r0, r2
 8007e24:	f7fe f8bb 	bl	8005f9e <vListInsert>
 8007e28:	e015      	b.n	8007e56 <prvSwitchTimerLists+0x92>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007e2a:	2300      	movs	r3, #0
 8007e2c:	9300      	str	r3, [sp, #0]
 8007e2e:	2300      	movs	r3, #0
 8007e30:	693a      	ldr	r2, [r7, #16]
 8007e32:	2100      	movs	r1, #0
 8007e34:	68f8      	ldr	r0, [r7, #12]
 8007e36:	f7ff fda3 	bl	8007980 <xTimerGenericCommand>
 8007e3a:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	2b00      	cmp	r3, #0
 8007e40:	d109      	bne.n	8007e56 <prvSwitchTimerLists+0x92>
 8007e42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e46:	f383 8811 	msr	BASEPRI, r3
 8007e4a:	f3bf 8f6f 	isb	sy
 8007e4e:	f3bf 8f4f 	dsb	sy
 8007e52:	603b      	str	r3, [r7, #0]
 8007e54:	e7fe      	b.n	8007e54 <prvSwitchTimerLists+0x90>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007e56:	4b09      	ldr	r3, [pc, #36]	; (8007e7c <prvSwitchTimerLists+0xb8>)
 8007e58:	681b      	ldr	r3, [r3, #0]
 8007e5a:	681b      	ldr	r3, [r3, #0]
 8007e5c:	2b00      	cmp	r3, #0
 8007e5e:	d1b5      	bne.n	8007dcc <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8007e60:	4b06      	ldr	r3, [pc, #24]	; (8007e7c <prvSwitchTimerLists+0xb8>)
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8007e66:	4b06      	ldr	r3, [pc, #24]	; (8007e80 <prvSwitchTimerLists+0xbc>)
 8007e68:	681b      	ldr	r3, [r3, #0]
 8007e6a:	4a04      	ldr	r2, [pc, #16]	; (8007e7c <prvSwitchTimerLists+0xb8>)
 8007e6c:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8007e6e:	4a04      	ldr	r2, [pc, #16]	; (8007e80 <prvSwitchTimerLists+0xbc>)
 8007e70:	697b      	ldr	r3, [r7, #20]
 8007e72:	6013      	str	r3, [r2, #0]
}
 8007e74:	bf00      	nop
 8007e76:	3718      	adds	r7, #24
 8007e78:	46bd      	mov	sp, r7
 8007e7a:	bd80      	pop	{r7, pc}
 8007e7c:	20000c14 	.word	0x20000c14
 8007e80:	20000c18 	.word	0x20000c18

08007e84 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8007e84:	b580      	push	{r7, lr}
 8007e86:	b082      	sub	sp, #8
 8007e88:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8007e8a:	f000 f95f 	bl	800814c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8007e8e:	4b15      	ldr	r3, [pc, #84]	; (8007ee4 <prvCheckForValidListAndQueue+0x60>)
 8007e90:	681b      	ldr	r3, [r3, #0]
 8007e92:	2b00      	cmp	r3, #0
 8007e94:	d120      	bne.n	8007ed8 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8007e96:	4814      	ldr	r0, [pc, #80]	; (8007ee8 <prvCheckForValidListAndQueue+0x64>)
 8007e98:	f7fe f830 	bl	8005efc <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8007e9c:	4813      	ldr	r0, [pc, #76]	; (8007eec <prvCheckForValidListAndQueue+0x68>)
 8007e9e:	f7fe f82d 	bl	8005efc <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8007ea2:	4b13      	ldr	r3, [pc, #76]	; (8007ef0 <prvCheckForValidListAndQueue+0x6c>)
 8007ea4:	4a10      	ldr	r2, [pc, #64]	; (8007ee8 <prvCheckForValidListAndQueue+0x64>)
 8007ea6:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8007ea8:	4b12      	ldr	r3, [pc, #72]	; (8007ef4 <prvCheckForValidListAndQueue+0x70>)
 8007eaa:	4a10      	ldr	r2, [pc, #64]	; (8007eec <prvCheckForValidListAndQueue+0x68>)
 8007eac:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8007eae:	2300      	movs	r3, #0
 8007eb0:	9300      	str	r3, [sp, #0]
 8007eb2:	4b11      	ldr	r3, [pc, #68]	; (8007ef8 <prvCheckForValidListAndQueue+0x74>)
 8007eb4:	4a11      	ldr	r2, [pc, #68]	; (8007efc <prvCheckForValidListAndQueue+0x78>)
 8007eb6:	2110      	movs	r1, #16
 8007eb8:	200a      	movs	r0, #10
 8007eba:	f7fe f93b 	bl	8006134 <xQueueGenericCreateStatic>
 8007ebe:	4602      	mov	r2, r0
 8007ec0:	4b08      	ldr	r3, [pc, #32]	; (8007ee4 <prvCheckForValidListAndQueue+0x60>)
 8007ec2:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8007ec4:	4b07      	ldr	r3, [pc, #28]	; (8007ee4 <prvCheckForValidListAndQueue+0x60>)
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	2b00      	cmp	r3, #0
 8007eca:	d005      	beq.n	8007ed8 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8007ecc:	4b05      	ldr	r3, [pc, #20]	; (8007ee4 <prvCheckForValidListAndQueue+0x60>)
 8007ece:	681b      	ldr	r3, [r3, #0]
 8007ed0:	490b      	ldr	r1, [pc, #44]	; (8007f00 <prvCheckForValidListAndQueue+0x7c>)
 8007ed2:	4618      	mov	r0, r3
 8007ed4:	f7fe fdc8 	bl	8006a68 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007ed8:	f000 f966 	bl	80081a8 <vPortExitCritical>
}
 8007edc:	bf00      	nop
 8007ede:	46bd      	mov	sp, r7
 8007ee0:	bd80      	pop	{r7, pc}
 8007ee2:	bf00      	nop
 8007ee4:	20000c1c 	.word	0x20000c1c
 8007ee8:	20000bec 	.word	0x20000bec
 8007eec:	20000c00 	.word	0x20000c00
 8007ef0:	20000c14 	.word	0x20000c14
 8007ef4:	20000c18 	.word	0x20000c18
 8007ef8:	20000cc8 	.word	0x20000cc8
 8007efc:	20000c28 	.word	0x20000c28
 8007f00:	08008c28 	.word	0x08008c28

08007f04 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8007f04:	b480      	push	{r7}
 8007f06:	b085      	sub	sp, #20
 8007f08:	af00      	add	r7, sp, #0
 8007f0a:	60f8      	str	r0, [r7, #12]
 8007f0c:	60b9      	str	r1, [r7, #8]
 8007f0e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8007f10:	68fb      	ldr	r3, [r7, #12]
 8007f12:	3b04      	subs	r3, #4
 8007f14:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8007f16:	68fb      	ldr	r3, [r7, #12]
 8007f18:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8007f1c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007f1e:	68fb      	ldr	r3, [r7, #12]
 8007f20:	3b04      	subs	r3, #4
 8007f22:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8007f24:	68bb      	ldr	r3, [r7, #8]
 8007f26:	f023 0201 	bic.w	r2, r3, #1
 8007f2a:	68fb      	ldr	r3, [r7, #12]
 8007f2c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007f2e:	68fb      	ldr	r3, [r7, #12]
 8007f30:	3b04      	subs	r3, #4
 8007f32:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007f34:	4a0c      	ldr	r2, [pc, #48]	; (8007f68 <pxPortInitialiseStack+0x64>)
 8007f36:	68fb      	ldr	r3, [r7, #12]
 8007f38:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8007f3a:	68fb      	ldr	r3, [r7, #12]
 8007f3c:	3b14      	subs	r3, #20
 8007f3e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007f40:	687a      	ldr	r2, [r7, #4]
 8007f42:	68fb      	ldr	r3, [r7, #12]
 8007f44:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8007f46:	68fb      	ldr	r3, [r7, #12]
 8007f48:	3b04      	subs	r3, #4
 8007f4a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8007f4c:	68fb      	ldr	r3, [r7, #12]
 8007f4e:	f06f 0202 	mvn.w	r2, #2
 8007f52:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8007f54:	68fb      	ldr	r3, [r7, #12]
 8007f56:	3b20      	subs	r3, #32
 8007f58:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8007f5a:	68fb      	ldr	r3, [r7, #12]
}
 8007f5c:	4618      	mov	r0, r3
 8007f5e:	3714      	adds	r7, #20
 8007f60:	46bd      	mov	sp, r7
 8007f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f66:	4770      	bx	lr
 8007f68:	08007f6d 	.word	0x08007f6d

08007f6c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007f6c:	b480      	push	{r7}
 8007f6e:	b085      	sub	sp, #20
 8007f70:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8007f72:	2300      	movs	r3, #0
 8007f74:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8007f76:	4b11      	ldr	r3, [pc, #68]	; (8007fbc <prvTaskExitError+0x50>)
 8007f78:	681b      	ldr	r3, [r3, #0]
 8007f7a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007f7e:	d009      	beq.n	8007f94 <prvTaskExitError+0x28>
 8007f80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f84:	f383 8811 	msr	BASEPRI, r3
 8007f88:	f3bf 8f6f 	isb	sy
 8007f8c:	f3bf 8f4f 	dsb	sy
 8007f90:	60fb      	str	r3, [r7, #12]
 8007f92:	e7fe      	b.n	8007f92 <prvTaskExitError+0x26>
 8007f94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f98:	f383 8811 	msr	BASEPRI, r3
 8007f9c:	f3bf 8f6f 	isb	sy
 8007fa0:	f3bf 8f4f 	dsb	sy
 8007fa4:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8007fa6:	bf00      	nop
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	2b00      	cmp	r3, #0
 8007fac:	d0fc      	beq.n	8007fa8 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8007fae:	bf00      	nop
 8007fb0:	3714      	adds	r7, #20
 8007fb2:	46bd      	mov	sp, r7
 8007fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fb8:	4770      	bx	lr
 8007fba:	bf00      	nop
 8007fbc:	20000008 	.word	0x20000008

08007fc0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007fc0:	4b07      	ldr	r3, [pc, #28]	; (8007fe0 <pxCurrentTCBConst2>)
 8007fc2:	6819      	ldr	r1, [r3, #0]
 8007fc4:	6808      	ldr	r0, [r1, #0]
 8007fc6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007fca:	f380 8809 	msr	PSP, r0
 8007fce:	f3bf 8f6f 	isb	sy
 8007fd2:	f04f 0000 	mov.w	r0, #0
 8007fd6:	f380 8811 	msr	BASEPRI, r0
 8007fda:	4770      	bx	lr
 8007fdc:	f3af 8000 	nop.w

08007fe0 <pxCurrentTCBConst2>:
 8007fe0:	200006ec 	.word	0x200006ec
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007fe4:	bf00      	nop
 8007fe6:	bf00      	nop

08007fe8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8007fe8:	4808      	ldr	r0, [pc, #32]	; (800800c <prvPortStartFirstTask+0x24>)
 8007fea:	6800      	ldr	r0, [r0, #0]
 8007fec:	6800      	ldr	r0, [r0, #0]
 8007fee:	f380 8808 	msr	MSP, r0
 8007ff2:	f04f 0000 	mov.w	r0, #0
 8007ff6:	f380 8814 	msr	CONTROL, r0
 8007ffa:	b662      	cpsie	i
 8007ffc:	b661      	cpsie	f
 8007ffe:	f3bf 8f4f 	dsb	sy
 8008002:	f3bf 8f6f 	isb	sy
 8008006:	df00      	svc	0
 8008008:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800800a:	bf00      	nop
 800800c:	e000ed08 	.word	0xe000ed08

08008010 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008010:	b580      	push	{r7, lr}
 8008012:	b086      	sub	sp, #24
 8008014:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8008016:	4b44      	ldr	r3, [pc, #272]	; (8008128 <xPortStartScheduler+0x118>)
 8008018:	681b      	ldr	r3, [r3, #0]
 800801a:	4a44      	ldr	r2, [pc, #272]	; (800812c <xPortStartScheduler+0x11c>)
 800801c:	4293      	cmp	r3, r2
 800801e:	d109      	bne.n	8008034 <xPortStartScheduler+0x24>
 8008020:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008024:	f383 8811 	msr	BASEPRI, r3
 8008028:	f3bf 8f6f 	isb	sy
 800802c:	f3bf 8f4f 	dsb	sy
 8008030:	613b      	str	r3, [r7, #16]
 8008032:	e7fe      	b.n	8008032 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8008034:	4b3c      	ldr	r3, [pc, #240]	; (8008128 <xPortStartScheduler+0x118>)
 8008036:	681b      	ldr	r3, [r3, #0]
 8008038:	4a3d      	ldr	r2, [pc, #244]	; (8008130 <xPortStartScheduler+0x120>)
 800803a:	4293      	cmp	r3, r2
 800803c:	d109      	bne.n	8008052 <xPortStartScheduler+0x42>
 800803e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008042:	f383 8811 	msr	BASEPRI, r3
 8008046:	f3bf 8f6f 	isb	sy
 800804a:	f3bf 8f4f 	dsb	sy
 800804e:	60fb      	str	r3, [r7, #12]
 8008050:	e7fe      	b.n	8008050 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8008052:	4b38      	ldr	r3, [pc, #224]	; (8008134 <xPortStartScheduler+0x124>)
 8008054:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8008056:	697b      	ldr	r3, [r7, #20]
 8008058:	781b      	ldrb	r3, [r3, #0]
 800805a:	b2db      	uxtb	r3, r3
 800805c:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800805e:	697b      	ldr	r3, [r7, #20]
 8008060:	22ff      	movs	r2, #255	; 0xff
 8008062:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8008064:	697b      	ldr	r3, [r7, #20]
 8008066:	781b      	ldrb	r3, [r3, #0]
 8008068:	b2db      	uxtb	r3, r3
 800806a:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800806c:	78fb      	ldrb	r3, [r7, #3]
 800806e:	b2db      	uxtb	r3, r3
 8008070:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8008074:	b2da      	uxtb	r2, r3
 8008076:	4b30      	ldr	r3, [pc, #192]	; (8008138 <xPortStartScheduler+0x128>)
 8008078:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800807a:	4b30      	ldr	r3, [pc, #192]	; (800813c <xPortStartScheduler+0x12c>)
 800807c:	2207      	movs	r2, #7
 800807e:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008080:	e009      	b.n	8008096 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 8008082:	4b2e      	ldr	r3, [pc, #184]	; (800813c <xPortStartScheduler+0x12c>)
 8008084:	681b      	ldr	r3, [r3, #0]
 8008086:	3b01      	subs	r3, #1
 8008088:	4a2c      	ldr	r2, [pc, #176]	; (800813c <xPortStartScheduler+0x12c>)
 800808a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800808c:	78fb      	ldrb	r3, [r7, #3]
 800808e:	b2db      	uxtb	r3, r3
 8008090:	005b      	lsls	r3, r3, #1
 8008092:	b2db      	uxtb	r3, r3
 8008094:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008096:	78fb      	ldrb	r3, [r7, #3]
 8008098:	b2db      	uxtb	r3, r3
 800809a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800809e:	2b80      	cmp	r3, #128	; 0x80
 80080a0:	d0ef      	beq.n	8008082 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80080a2:	4b26      	ldr	r3, [pc, #152]	; (800813c <xPortStartScheduler+0x12c>)
 80080a4:	681b      	ldr	r3, [r3, #0]
 80080a6:	f1c3 0307 	rsb	r3, r3, #7
 80080aa:	2b04      	cmp	r3, #4
 80080ac:	d009      	beq.n	80080c2 <xPortStartScheduler+0xb2>
 80080ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080b2:	f383 8811 	msr	BASEPRI, r3
 80080b6:	f3bf 8f6f 	isb	sy
 80080ba:	f3bf 8f4f 	dsb	sy
 80080be:	60bb      	str	r3, [r7, #8]
 80080c0:	e7fe      	b.n	80080c0 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80080c2:	4b1e      	ldr	r3, [pc, #120]	; (800813c <xPortStartScheduler+0x12c>)
 80080c4:	681b      	ldr	r3, [r3, #0]
 80080c6:	021b      	lsls	r3, r3, #8
 80080c8:	4a1c      	ldr	r2, [pc, #112]	; (800813c <xPortStartScheduler+0x12c>)
 80080ca:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80080cc:	4b1b      	ldr	r3, [pc, #108]	; (800813c <xPortStartScheduler+0x12c>)
 80080ce:	681b      	ldr	r3, [r3, #0]
 80080d0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80080d4:	4a19      	ldr	r2, [pc, #100]	; (800813c <xPortStartScheduler+0x12c>)
 80080d6:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	b2da      	uxtb	r2, r3
 80080dc:	697b      	ldr	r3, [r7, #20]
 80080de:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80080e0:	4b17      	ldr	r3, [pc, #92]	; (8008140 <xPortStartScheduler+0x130>)
 80080e2:	681b      	ldr	r3, [r3, #0]
 80080e4:	4a16      	ldr	r2, [pc, #88]	; (8008140 <xPortStartScheduler+0x130>)
 80080e6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80080ea:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80080ec:	4b14      	ldr	r3, [pc, #80]	; (8008140 <xPortStartScheduler+0x130>)
 80080ee:	681b      	ldr	r3, [r3, #0]
 80080f0:	4a13      	ldr	r2, [pc, #76]	; (8008140 <xPortStartScheduler+0x130>)
 80080f2:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80080f6:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80080f8:	f000 f8d6 	bl	80082a8 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80080fc:	4b11      	ldr	r3, [pc, #68]	; (8008144 <xPortStartScheduler+0x134>)
 80080fe:	2200      	movs	r2, #0
 8008100:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8008102:	f000 f8f5 	bl	80082f0 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8008106:	4b10      	ldr	r3, [pc, #64]	; (8008148 <xPortStartScheduler+0x138>)
 8008108:	681b      	ldr	r3, [r3, #0]
 800810a:	4a0f      	ldr	r2, [pc, #60]	; (8008148 <xPortStartScheduler+0x138>)
 800810c:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8008110:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8008112:	f7ff ff69 	bl	8007fe8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8008116:	f7ff f8a7 	bl	8007268 <vTaskSwitchContext>
	prvTaskExitError();
 800811a:	f7ff ff27 	bl	8007f6c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800811e:	2300      	movs	r3, #0
}
 8008120:	4618      	mov	r0, r3
 8008122:	3718      	adds	r7, #24
 8008124:	46bd      	mov	sp, r7
 8008126:	bd80      	pop	{r7, pc}
 8008128:	e000ed00 	.word	0xe000ed00
 800812c:	410fc271 	.word	0x410fc271
 8008130:	410fc270 	.word	0x410fc270
 8008134:	e000e400 	.word	0xe000e400
 8008138:	20000d18 	.word	0x20000d18
 800813c:	20000d1c 	.word	0x20000d1c
 8008140:	e000ed20 	.word	0xe000ed20
 8008144:	20000008 	.word	0x20000008
 8008148:	e000ef34 	.word	0xe000ef34

0800814c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800814c:	b480      	push	{r7}
 800814e:	b083      	sub	sp, #12
 8008150:	af00      	add	r7, sp, #0
 8008152:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008156:	f383 8811 	msr	BASEPRI, r3
 800815a:	f3bf 8f6f 	isb	sy
 800815e:	f3bf 8f4f 	dsb	sy
 8008162:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8008164:	4b0e      	ldr	r3, [pc, #56]	; (80081a0 <vPortEnterCritical+0x54>)
 8008166:	681b      	ldr	r3, [r3, #0]
 8008168:	3301      	adds	r3, #1
 800816a:	4a0d      	ldr	r2, [pc, #52]	; (80081a0 <vPortEnterCritical+0x54>)
 800816c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800816e:	4b0c      	ldr	r3, [pc, #48]	; (80081a0 <vPortEnterCritical+0x54>)
 8008170:	681b      	ldr	r3, [r3, #0]
 8008172:	2b01      	cmp	r3, #1
 8008174:	d10e      	bne.n	8008194 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008176:	4b0b      	ldr	r3, [pc, #44]	; (80081a4 <vPortEnterCritical+0x58>)
 8008178:	681b      	ldr	r3, [r3, #0]
 800817a:	b2db      	uxtb	r3, r3
 800817c:	2b00      	cmp	r3, #0
 800817e:	d009      	beq.n	8008194 <vPortEnterCritical+0x48>
 8008180:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008184:	f383 8811 	msr	BASEPRI, r3
 8008188:	f3bf 8f6f 	isb	sy
 800818c:	f3bf 8f4f 	dsb	sy
 8008190:	603b      	str	r3, [r7, #0]
 8008192:	e7fe      	b.n	8008192 <vPortEnterCritical+0x46>
	}
}
 8008194:	bf00      	nop
 8008196:	370c      	adds	r7, #12
 8008198:	46bd      	mov	sp, r7
 800819a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800819e:	4770      	bx	lr
 80081a0:	20000008 	.word	0x20000008
 80081a4:	e000ed04 	.word	0xe000ed04

080081a8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80081a8:	b480      	push	{r7}
 80081aa:	b083      	sub	sp, #12
 80081ac:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80081ae:	4b11      	ldr	r3, [pc, #68]	; (80081f4 <vPortExitCritical+0x4c>)
 80081b0:	681b      	ldr	r3, [r3, #0]
 80081b2:	2b00      	cmp	r3, #0
 80081b4:	d109      	bne.n	80081ca <vPortExitCritical+0x22>
 80081b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081ba:	f383 8811 	msr	BASEPRI, r3
 80081be:	f3bf 8f6f 	isb	sy
 80081c2:	f3bf 8f4f 	dsb	sy
 80081c6:	607b      	str	r3, [r7, #4]
 80081c8:	e7fe      	b.n	80081c8 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 80081ca:	4b0a      	ldr	r3, [pc, #40]	; (80081f4 <vPortExitCritical+0x4c>)
 80081cc:	681b      	ldr	r3, [r3, #0]
 80081ce:	3b01      	subs	r3, #1
 80081d0:	4a08      	ldr	r2, [pc, #32]	; (80081f4 <vPortExitCritical+0x4c>)
 80081d2:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80081d4:	4b07      	ldr	r3, [pc, #28]	; (80081f4 <vPortExitCritical+0x4c>)
 80081d6:	681b      	ldr	r3, [r3, #0]
 80081d8:	2b00      	cmp	r3, #0
 80081da:	d104      	bne.n	80081e6 <vPortExitCritical+0x3e>
 80081dc:	2300      	movs	r3, #0
 80081de:	603b      	str	r3, [r7, #0]
	__asm volatile
 80081e0:	683b      	ldr	r3, [r7, #0]
 80081e2:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 80081e6:	bf00      	nop
 80081e8:	370c      	adds	r7, #12
 80081ea:	46bd      	mov	sp, r7
 80081ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081f0:	4770      	bx	lr
 80081f2:	bf00      	nop
 80081f4:	20000008 	.word	0x20000008
	...

08008200 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008200:	f3ef 8009 	mrs	r0, PSP
 8008204:	f3bf 8f6f 	isb	sy
 8008208:	4b15      	ldr	r3, [pc, #84]	; (8008260 <pxCurrentTCBConst>)
 800820a:	681a      	ldr	r2, [r3, #0]
 800820c:	f01e 0f10 	tst.w	lr, #16
 8008210:	bf08      	it	eq
 8008212:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8008216:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800821a:	6010      	str	r0, [r2, #0]
 800821c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8008220:	f04f 0050 	mov.w	r0, #80	; 0x50
 8008224:	f380 8811 	msr	BASEPRI, r0
 8008228:	f3bf 8f4f 	dsb	sy
 800822c:	f3bf 8f6f 	isb	sy
 8008230:	f7ff f81a 	bl	8007268 <vTaskSwitchContext>
 8008234:	f04f 0000 	mov.w	r0, #0
 8008238:	f380 8811 	msr	BASEPRI, r0
 800823c:	bc09      	pop	{r0, r3}
 800823e:	6819      	ldr	r1, [r3, #0]
 8008240:	6808      	ldr	r0, [r1, #0]
 8008242:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008246:	f01e 0f10 	tst.w	lr, #16
 800824a:	bf08      	it	eq
 800824c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8008250:	f380 8809 	msr	PSP, r0
 8008254:	f3bf 8f6f 	isb	sy
 8008258:	4770      	bx	lr
 800825a:	bf00      	nop
 800825c:	f3af 8000 	nop.w

08008260 <pxCurrentTCBConst>:
 8008260:	200006ec 	.word	0x200006ec
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008264:	bf00      	nop
 8008266:	bf00      	nop

08008268 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008268:	b580      	push	{r7, lr}
 800826a:	b082      	sub	sp, #8
 800826c:	af00      	add	r7, sp, #0
	__asm volatile
 800826e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008272:	f383 8811 	msr	BASEPRI, r3
 8008276:	f3bf 8f6f 	isb	sy
 800827a:	f3bf 8f4f 	dsb	sy
 800827e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008280:	f7fe ff34 	bl	80070ec <xTaskIncrementTick>
 8008284:	4603      	mov	r3, r0
 8008286:	2b00      	cmp	r3, #0
 8008288:	d003      	beq.n	8008292 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800828a:	4b06      	ldr	r3, [pc, #24]	; (80082a4 <SysTick_Handler+0x3c>)
 800828c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008290:	601a      	str	r2, [r3, #0]
 8008292:	2300      	movs	r3, #0
 8008294:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008296:	683b      	ldr	r3, [r7, #0]
 8008298:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800829c:	bf00      	nop
 800829e:	3708      	adds	r7, #8
 80082a0:	46bd      	mov	sp, r7
 80082a2:	bd80      	pop	{r7, pc}
 80082a4:	e000ed04 	.word	0xe000ed04

080082a8 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80082a8:	b480      	push	{r7}
 80082aa:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80082ac:	4b0b      	ldr	r3, [pc, #44]	; (80082dc <vPortSetupTimerInterrupt+0x34>)
 80082ae:	2200      	movs	r2, #0
 80082b0:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80082b2:	4b0b      	ldr	r3, [pc, #44]	; (80082e0 <vPortSetupTimerInterrupt+0x38>)
 80082b4:	2200      	movs	r2, #0
 80082b6:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80082b8:	4b0a      	ldr	r3, [pc, #40]	; (80082e4 <vPortSetupTimerInterrupt+0x3c>)
 80082ba:	681b      	ldr	r3, [r3, #0]
 80082bc:	4a0a      	ldr	r2, [pc, #40]	; (80082e8 <vPortSetupTimerInterrupt+0x40>)
 80082be:	fba2 2303 	umull	r2, r3, r2, r3
 80082c2:	099b      	lsrs	r3, r3, #6
 80082c4:	4a09      	ldr	r2, [pc, #36]	; (80082ec <vPortSetupTimerInterrupt+0x44>)
 80082c6:	3b01      	subs	r3, #1
 80082c8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80082ca:	4b04      	ldr	r3, [pc, #16]	; (80082dc <vPortSetupTimerInterrupt+0x34>)
 80082cc:	2207      	movs	r2, #7
 80082ce:	601a      	str	r2, [r3, #0]
}
 80082d0:	bf00      	nop
 80082d2:	46bd      	mov	sp, r7
 80082d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082d8:	4770      	bx	lr
 80082da:	bf00      	nop
 80082dc:	e000e010 	.word	0xe000e010
 80082e0:	e000e018 	.word	0xe000e018
 80082e4:	20000000 	.word	0x20000000
 80082e8:	10624dd3 	.word	0x10624dd3
 80082ec:	e000e014 	.word	0xe000e014

080082f0 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80082f0:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8008300 <vPortEnableVFP+0x10>
 80082f4:	6801      	ldr	r1, [r0, #0]
 80082f6:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80082fa:	6001      	str	r1, [r0, #0]
 80082fc:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80082fe:	bf00      	nop
 8008300:	e000ed88 	.word	0xe000ed88

08008304 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8008304:	b480      	push	{r7}
 8008306:	b085      	sub	sp, #20
 8008308:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800830a:	f3ef 8305 	mrs	r3, IPSR
 800830e:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8008310:	68fb      	ldr	r3, [r7, #12]
 8008312:	2b0f      	cmp	r3, #15
 8008314:	d913      	bls.n	800833e <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8008316:	4a16      	ldr	r2, [pc, #88]	; (8008370 <vPortValidateInterruptPriority+0x6c>)
 8008318:	68fb      	ldr	r3, [r7, #12]
 800831a:	4413      	add	r3, r2
 800831c:	781b      	ldrb	r3, [r3, #0]
 800831e:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8008320:	4b14      	ldr	r3, [pc, #80]	; (8008374 <vPortValidateInterruptPriority+0x70>)
 8008322:	781b      	ldrb	r3, [r3, #0]
 8008324:	7afa      	ldrb	r2, [r7, #11]
 8008326:	429a      	cmp	r2, r3
 8008328:	d209      	bcs.n	800833e <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 800832a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800832e:	f383 8811 	msr	BASEPRI, r3
 8008332:	f3bf 8f6f 	isb	sy
 8008336:	f3bf 8f4f 	dsb	sy
 800833a:	607b      	str	r3, [r7, #4]
 800833c:	e7fe      	b.n	800833c <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800833e:	4b0e      	ldr	r3, [pc, #56]	; (8008378 <vPortValidateInterruptPriority+0x74>)
 8008340:	681b      	ldr	r3, [r3, #0]
 8008342:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8008346:	4b0d      	ldr	r3, [pc, #52]	; (800837c <vPortValidateInterruptPriority+0x78>)
 8008348:	681b      	ldr	r3, [r3, #0]
 800834a:	429a      	cmp	r2, r3
 800834c:	d909      	bls.n	8008362 <vPortValidateInterruptPriority+0x5e>
 800834e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008352:	f383 8811 	msr	BASEPRI, r3
 8008356:	f3bf 8f6f 	isb	sy
 800835a:	f3bf 8f4f 	dsb	sy
 800835e:	603b      	str	r3, [r7, #0]
 8008360:	e7fe      	b.n	8008360 <vPortValidateInterruptPriority+0x5c>
	}
 8008362:	bf00      	nop
 8008364:	3714      	adds	r7, #20
 8008366:	46bd      	mov	sp, r7
 8008368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800836c:	4770      	bx	lr
 800836e:	bf00      	nop
 8008370:	e000e3f0 	.word	0xe000e3f0
 8008374:	20000d18 	.word	0x20000d18
 8008378:	e000ed0c 	.word	0xe000ed0c
 800837c:	20000d1c 	.word	0x20000d1c

08008380 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8008380:	b580      	push	{r7, lr}
 8008382:	b08a      	sub	sp, #40	; 0x28
 8008384:	af00      	add	r7, sp, #0
 8008386:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8008388:	2300      	movs	r3, #0
 800838a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800838c:	f7fe fdf4 	bl	8006f78 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8008390:	4b57      	ldr	r3, [pc, #348]	; (80084f0 <pvPortMalloc+0x170>)
 8008392:	681b      	ldr	r3, [r3, #0]
 8008394:	2b00      	cmp	r3, #0
 8008396:	d101      	bne.n	800839c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8008398:	f000 f90c 	bl	80085b4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800839c:	4b55      	ldr	r3, [pc, #340]	; (80084f4 <pvPortMalloc+0x174>)
 800839e:	681a      	ldr	r2, [r3, #0]
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	4013      	ands	r3, r2
 80083a4:	2b00      	cmp	r3, #0
 80083a6:	f040 808c 	bne.w	80084c2 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	2b00      	cmp	r3, #0
 80083ae:	d01c      	beq.n	80083ea <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 80083b0:	2208      	movs	r2, #8
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	4413      	add	r3, r2
 80083b6:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	f003 0307 	and.w	r3, r3, #7
 80083be:	2b00      	cmp	r3, #0
 80083c0:	d013      	beq.n	80083ea <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	f023 0307 	bic.w	r3, r3, #7
 80083c8:	3308      	adds	r3, #8
 80083ca:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	f003 0307 	and.w	r3, r3, #7
 80083d2:	2b00      	cmp	r3, #0
 80083d4:	d009      	beq.n	80083ea <pvPortMalloc+0x6a>
 80083d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083da:	f383 8811 	msr	BASEPRI, r3
 80083de:	f3bf 8f6f 	isb	sy
 80083e2:	f3bf 8f4f 	dsb	sy
 80083e6:	617b      	str	r3, [r7, #20]
 80083e8:	e7fe      	b.n	80083e8 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	2b00      	cmp	r3, #0
 80083ee:	d068      	beq.n	80084c2 <pvPortMalloc+0x142>
 80083f0:	4b41      	ldr	r3, [pc, #260]	; (80084f8 <pvPortMalloc+0x178>)
 80083f2:	681b      	ldr	r3, [r3, #0]
 80083f4:	687a      	ldr	r2, [r7, #4]
 80083f6:	429a      	cmp	r2, r3
 80083f8:	d863      	bhi.n	80084c2 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80083fa:	4b40      	ldr	r3, [pc, #256]	; (80084fc <pvPortMalloc+0x17c>)
 80083fc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80083fe:	4b3f      	ldr	r3, [pc, #252]	; (80084fc <pvPortMalloc+0x17c>)
 8008400:	681b      	ldr	r3, [r3, #0]
 8008402:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008404:	e004      	b.n	8008410 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 8008406:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008408:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800840a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800840c:	681b      	ldr	r3, [r3, #0]
 800840e:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008410:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008412:	685b      	ldr	r3, [r3, #4]
 8008414:	687a      	ldr	r2, [r7, #4]
 8008416:	429a      	cmp	r2, r3
 8008418:	d903      	bls.n	8008422 <pvPortMalloc+0xa2>
 800841a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800841c:	681b      	ldr	r3, [r3, #0]
 800841e:	2b00      	cmp	r3, #0
 8008420:	d1f1      	bne.n	8008406 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8008422:	4b33      	ldr	r3, [pc, #204]	; (80084f0 <pvPortMalloc+0x170>)
 8008424:	681b      	ldr	r3, [r3, #0]
 8008426:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008428:	429a      	cmp	r2, r3
 800842a:	d04a      	beq.n	80084c2 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800842c:	6a3b      	ldr	r3, [r7, #32]
 800842e:	681b      	ldr	r3, [r3, #0]
 8008430:	2208      	movs	r2, #8
 8008432:	4413      	add	r3, r2
 8008434:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008436:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008438:	681a      	ldr	r2, [r3, #0]
 800843a:	6a3b      	ldr	r3, [r7, #32]
 800843c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800843e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008440:	685a      	ldr	r2, [r3, #4]
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	1ad2      	subs	r2, r2, r3
 8008446:	2308      	movs	r3, #8
 8008448:	005b      	lsls	r3, r3, #1
 800844a:	429a      	cmp	r2, r3
 800844c:	d91e      	bls.n	800848c <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800844e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	4413      	add	r3, r2
 8008454:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008456:	69bb      	ldr	r3, [r7, #24]
 8008458:	f003 0307 	and.w	r3, r3, #7
 800845c:	2b00      	cmp	r3, #0
 800845e:	d009      	beq.n	8008474 <pvPortMalloc+0xf4>
 8008460:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008464:	f383 8811 	msr	BASEPRI, r3
 8008468:	f3bf 8f6f 	isb	sy
 800846c:	f3bf 8f4f 	dsb	sy
 8008470:	613b      	str	r3, [r7, #16]
 8008472:	e7fe      	b.n	8008472 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008474:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008476:	685a      	ldr	r2, [r3, #4]
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	1ad2      	subs	r2, r2, r3
 800847c:	69bb      	ldr	r3, [r7, #24]
 800847e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8008480:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008482:	687a      	ldr	r2, [r7, #4]
 8008484:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8008486:	69b8      	ldr	r0, [r7, #24]
 8008488:	f000 f8f6 	bl	8008678 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800848c:	4b1a      	ldr	r3, [pc, #104]	; (80084f8 <pvPortMalloc+0x178>)
 800848e:	681a      	ldr	r2, [r3, #0]
 8008490:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008492:	685b      	ldr	r3, [r3, #4]
 8008494:	1ad3      	subs	r3, r2, r3
 8008496:	4a18      	ldr	r2, [pc, #96]	; (80084f8 <pvPortMalloc+0x178>)
 8008498:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800849a:	4b17      	ldr	r3, [pc, #92]	; (80084f8 <pvPortMalloc+0x178>)
 800849c:	681a      	ldr	r2, [r3, #0]
 800849e:	4b18      	ldr	r3, [pc, #96]	; (8008500 <pvPortMalloc+0x180>)
 80084a0:	681b      	ldr	r3, [r3, #0]
 80084a2:	429a      	cmp	r2, r3
 80084a4:	d203      	bcs.n	80084ae <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80084a6:	4b14      	ldr	r3, [pc, #80]	; (80084f8 <pvPortMalloc+0x178>)
 80084a8:	681b      	ldr	r3, [r3, #0]
 80084aa:	4a15      	ldr	r2, [pc, #84]	; (8008500 <pvPortMalloc+0x180>)
 80084ac:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80084ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084b0:	685a      	ldr	r2, [r3, #4]
 80084b2:	4b10      	ldr	r3, [pc, #64]	; (80084f4 <pvPortMalloc+0x174>)
 80084b4:	681b      	ldr	r3, [r3, #0]
 80084b6:	431a      	orrs	r2, r3
 80084b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084ba:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80084bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084be:	2200      	movs	r2, #0
 80084c0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80084c2:	f7fe fd67 	bl	8006f94 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80084c6:	69fb      	ldr	r3, [r7, #28]
 80084c8:	f003 0307 	and.w	r3, r3, #7
 80084cc:	2b00      	cmp	r3, #0
 80084ce:	d009      	beq.n	80084e4 <pvPortMalloc+0x164>
 80084d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084d4:	f383 8811 	msr	BASEPRI, r3
 80084d8:	f3bf 8f6f 	isb	sy
 80084dc:	f3bf 8f4f 	dsb	sy
 80084e0:	60fb      	str	r3, [r7, #12]
 80084e2:	e7fe      	b.n	80084e2 <pvPortMalloc+0x162>
	return pvReturn;
 80084e4:	69fb      	ldr	r3, [r7, #28]
}
 80084e6:	4618      	mov	r0, r3
 80084e8:	3728      	adds	r7, #40	; 0x28
 80084ea:	46bd      	mov	sp, r7
 80084ec:	bd80      	pop	{r7, pc}
 80084ee:	bf00      	nop
 80084f0:	20004928 	.word	0x20004928
 80084f4:	20004934 	.word	0x20004934
 80084f8:	2000492c 	.word	0x2000492c
 80084fc:	20004920 	.word	0x20004920
 8008500:	20004930 	.word	0x20004930

08008504 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008504:	b580      	push	{r7, lr}
 8008506:	b086      	sub	sp, #24
 8008508:	af00      	add	r7, sp, #0
 800850a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	2b00      	cmp	r3, #0
 8008514:	d046      	beq.n	80085a4 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8008516:	2308      	movs	r3, #8
 8008518:	425b      	negs	r3, r3
 800851a:	697a      	ldr	r2, [r7, #20]
 800851c:	4413      	add	r3, r2
 800851e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8008520:	697b      	ldr	r3, [r7, #20]
 8008522:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008524:	693b      	ldr	r3, [r7, #16]
 8008526:	685a      	ldr	r2, [r3, #4]
 8008528:	4b20      	ldr	r3, [pc, #128]	; (80085ac <vPortFree+0xa8>)
 800852a:	681b      	ldr	r3, [r3, #0]
 800852c:	4013      	ands	r3, r2
 800852e:	2b00      	cmp	r3, #0
 8008530:	d109      	bne.n	8008546 <vPortFree+0x42>
 8008532:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008536:	f383 8811 	msr	BASEPRI, r3
 800853a:	f3bf 8f6f 	isb	sy
 800853e:	f3bf 8f4f 	dsb	sy
 8008542:	60fb      	str	r3, [r7, #12]
 8008544:	e7fe      	b.n	8008544 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8008546:	693b      	ldr	r3, [r7, #16]
 8008548:	681b      	ldr	r3, [r3, #0]
 800854a:	2b00      	cmp	r3, #0
 800854c:	d009      	beq.n	8008562 <vPortFree+0x5e>
 800854e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008552:	f383 8811 	msr	BASEPRI, r3
 8008556:	f3bf 8f6f 	isb	sy
 800855a:	f3bf 8f4f 	dsb	sy
 800855e:	60bb      	str	r3, [r7, #8]
 8008560:	e7fe      	b.n	8008560 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8008562:	693b      	ldr	r3, [r7, #16]
 8008564:	685a      	ldr	r2, [r3, #4]
 8008566:	4b11      	ldr	r3, [pc, #68]	; (80085ac <vPortFree+0xa8>)
 8008568:	681b      	ldr	r3, [r3, #0]
 800856a:	4013      	ands	r3, r2
 800856c:	2b00      	cmp	r3, #0
 800856e:	d019      	beq.n	80085a4 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8008570:	693b      	ldr	r3, [r7, #16]
 8008572:	681b      	ldr	r3, [r3, #0]
 8008574:	2b00      	cmp	r3, #0
 8008576:	d115      	bne.n	80085a4 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008578:	693b      	ldr	r3, [r7, #16]
 800857a:	685a      	ldr	r2, [r3, #4]
 800857c:	4b0b      	ldr	r3, [pc, #44]	; (80085ac <vPortFree+0xa8>)
 800857e:	681b      	ldr	r3, [r3, #0]
 8008580:	43db      	mvns	r3, r3
 8008582:	401a      	ands	r2, r3
 8008584:	693b      	ldr	r3, [r7, #16]
 8008586:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8008588:	f7fe fcf6 	bl	8006f78 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800858c:	693b      	ldr	r3, [r7, #16]
 800858e:	685a      	ldr	r2, [r3, #4]
 8008590:	4b07      	ldr	r3, [pc, #28]	; (80085b0 <vPortFree+0xac>)
 8008592:	681b      	ldr	r3, [r3, #0]
 8008594:	4413      	add	r3, r2
 8008596:	4a06      	ldr	r2, [pc, #24]	; (80085b0 <vPortFree+0xac>)
 8008598:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800859a:	6938      	ldr	r0, [r7, #16]
 800859c:	f000 f86c 	bl	8008678 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80085a0:	f7fe fcf8 	bl	8006f94 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80085a4:	bf00      	nop
 80085a6:	3718      	adds	r7, #24
 80085a8:	46bd      	mov	sp, r7
 80085aa:	bd80      	pop	{r7, pc}
 80085ac:	20004934 	.word	0x20004934
 80085b0:	2000492c 	.word	0x2000492c

080085b4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80085b4:	b480      	push	{r7}
 80085b6:	b085      	sub	sp, #20
 80085b8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80085ba:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80085be:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80085c0:	4b27      	ldr	r3, [pc, #156]	; (8008660 <prvHeapInit+0xac>)
 80085c2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80085c4:	68fb      	ldr	r3, [r7, #12]
 80085c6:	f003 0307 	and.w	r3, r3, #7
 80085ca:	2b00      	cmp	r3, #0
 80085cc:	d00c      	beq.n	80085e8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80085ce:	68fb      	ldr	r3, [r7, #12]
 80085d0:	3307      	adds	r3, #7
 80085d2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80085d4:	68fb      	ldr	r3, [r7, #12]
 80085d6:	f023 0307 	bic.w	r3, r3, #7
 80085da:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80085dc:	68ba      	ldr	r2, [r7, #8]
 80085de:	68fb      	ldr	r3, [r7, #12]
 80085e0:	1ad3      	subs	r3, r2, r3
 80085e2:	4a1f      	ldr	r2, [pc, #124]	; (8008660 <prvHeapInit+0xac>)
 80085e4:	4413      	add	r3, r2
 80085e6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80085e8:	68fb      	ldr	r3, [r7, #12]
 80085ea:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80085ec:	4a1d      	ldr	r2, [pc, #116]	; (8008664 <prvHeapInit+0xb0>)
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80085f2:	4b1c      	ldr	r3, [pc, #112]	; (8008664 <prvHeapInit+0xb0>)
 80085f4:	2200      	movs	r2, #0
 80085f6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	68ba      	ldr	r2, [r7, #8]
 80085fc:	4413      	add	r3, r2
 80085fe:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8008600:	2208      	movs	r2, #8
 8008602:	68fb      	ldr	r3, [r7, #12]
 8008604:	1a9b      	subs	r3, r3, r2
 8008606:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008608:	68fb      	ldr	r3, [r7, #12]
 800860a:	f023 0307 	bic.w	r3, r3, #7
 800860e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8008610:	68fb      	ldr	r3, [r7, #12]
 8008612:	4a15      	ldr	r2, [pc, #84]	; (8008668 <prvHeapInit+0xb4>)
 8008614:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8008616:	4b14      	ldr	r3, [pc, #80]	; (8008668 <prvHeapInit+0xb4>)
 8008618:	681b      	ldr	r3, [r3, #0]
 800861a:	2200      	movs	r2, #0
 800861c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800861e:	4b12      	ldr	r3, [pc, #72]	; (8008668 <prvHeapInit+0xb4>)
 8008620:	681b      	ldr	r3, [r3, #0]
 8008622:	2200      	movs	r2, #0
 8008624:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800862a:	683b      	ldr	r3, [r7, #0]
 800862c:	68fa      	ldr	r2, [r7, #12]
 800862e:	1ad2      	subs	r2, r2, r3
 8008630:	683b      	ldr	r3, [r7, #0]
 8008632:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008634:	4b0c      	ldr	r3, [pc, #48]	; (8008668 <prvHeapInit+0xb4>)
 8008636:	681a      	ldr	r2, [r3, #0]
 8008638:	683b      	ldr	r3, [r7, #0]
 800863a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800863c:	683b      	ldr	r3, [r7, #0]
 800863e:	685b      	ldr	r3, [r3, #4]
 8008640:	4a0a      	ldr	r2, [pc, #40]	; (800866c <prvHeapInit+0xb8>)
 8008642:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008644:	683b      	ldr	r3, [r7, #0]
 8008646:	685b      	ldr	r3, [r3, #4]
 8008648:	4a09      	ldr	r2, [pc, #36]	; (8008670 <prvHeapInit+0xbc>)
 800864a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800864c:	4b09      	ldr	r3, [pc, #36]	; (8008674 <prvHeapInit+0xc0>)
 800864e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8008652:	601a      	str	r2, [r3, #0]
}
 8008654:	bf00      	nop
 8008656:	3714      	adds	r7, #20
 8008658:	46bd      	mov	sp, r7
 800865a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800865e:	4770      	bx	lr
 8008660:	20000d20 	.word	0x20000d20
 8008664:	20004920 	.word	0x20004920
 8008668:	20004928 	.word	0x20004928
 800866c:	20004930 	.word	0x20004930
 8008670:	2000492c 	.word	0x2000492c
 8008674:	20004934 	.word	0x20004934

08008678 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8008678:	b480      	push	{r7}
 800867a:	b085      	sub	sp, #20
 800867c:	af00      	add	r7, sp, #0
 800867e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8008680:	4b28      	ldr	r3, [pc, #160]	; (8008724 <prvInsertBlockIntoFreeList+0xac>)
 8008682:	60fb      	str	r3, [r7, #12]
 8008684:	e002      	b.n	800868c <prvInsertBlockIntoFreeList+0x14>
 8008686:	68fb      	ldr	r3, [r7, #12]
 8008688:	681b      	ldr	r3, [r3, #0]
 800868a:	60fb      	str	r3, [r7, #12]
 800868c:	68fb      	ldr	r3, [r7, #12]
 800868e:	681b      	ldr	r3, [r3, #0]
 8008690:	687a      	ldr	r2, [r7, #4]
 8008692:	429a      	cmp	r2, r3
 8008694:	d8f7      	bhi.n	8008686 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8008696:	68fb      	ldr	r3, [r7, #12]
 8008698:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800869a:	68fb      	ldr	r3, [r7, #12]
 800869c:	685b      	ldr	r3, [r3, #4]
 800869e:	68ba      	ldr	r2, [r7, #8]
 80086a0:	4413      	add	r3, r2
 80086a2:	687a      	ldr	r2, [r7, #4]
 80086a4:	429a      	cmp	r2, r3
 80086a6:	d108      	bne.n	80086ba <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80086a8:	68fb      	ldr	r3, [r7, #12]
 80086aa:	685a      	ldr	r2, [r3, #4]
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	685b      	ldr	r3, [r3, #4]
 80086b0:	441a      	add	r2, r3
 80086b2:	68fb      	ldr	r3, [r7, #12]
 80086b4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80086b6:	68fb      	ldr	r3, [r7, #12]
 80086b8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	685b      	ldr	r3, [r3, #4]
 80086c2:	68ba      	ldr	r2, [r7, #8]
 80086c4:	441a      	add	r2, r3
 80086c6:	68fb      	ldr	r3, [r7, #12]
 80086c8:	681b      	ldr	r3, [r3, #0]
 80086ca:	429a      	cmp	r2, r3
 80086cc:	d118      	bne.n	8008700 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80086ce:	68fb      	ldr	r3, [r7, #12]
 80086d0:	681a      	ldr	r2, [r3, #0]
 80086d2:	4b15      	ldr	r3, [pc, #84]	; (8008728 <prvInsertBlockIntoFreeList+0xb0>)
 80086d4:	681b      	ldr	r3, [r3, #0]
 80086d6:	429a      	cmp	r2, r3
 80086d8:	d00d      	beq.n	80086f6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	685a      	ldr	r2, [r3, #4]
 80086de:	68fb      	ldr	r3, [r7, #12]
 80086e0:	681b      	ldr	r3, [r3, #0]
 80086e2:	685b      	ldr	r3, [r3, #4]
 80086e4:	441a      	add	r2, r3
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80086ea:	68fb      	ldr	r3, [r7, #12]
 80086ec:	681b      	ldr	r3, [r3, #0]
 80086ee:	681a      	ldr	r2, [r3, #0]
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	601a      	str	r2, [r3, #0]
 80086f4:	e008      	b.n	8008708 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80086f6:	4b0c      	ldr	r3, [pc, #48]	; (8008728 <prvInsertBlockIntoFreeList+0xb0>)
 80086f8:	681a      	ldr	r2, [r3, #0]
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	601a      	str	r2, [r3, #0]
 80086fe:	e003      	b.n	8008708 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8008700:	68fb      	ldr	r3, [r7, #12]
 8008702:	681a      	ldr	r2, [r3, #0]
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008708:	68fa      	ldr	r2, [r7, #12]
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	429a      	cmp	r2, r3
 800870e:	d002      	beq.n	8008716 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8008710:	68fb      	ldr	r3, [r7, #12]
 8008712:	687a      	ldr	r2, [r7, #4]
 8008714:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008716:	bf00      	nop
 8008718:	3714      	adds	r7, #20
 800871a:	46bd      	mov	sp, r7
 800871c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008720:	4770      	bx	lr
 8008722:	bf00      	nop
 8008724:	20004920 	.word	0x20004920
 8008728:	20004928 	.word	0x20004928

0800872c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800872c:	b580      	push	{r7, lr}
 800872e:	b082      	sub	sp, #8
 8008730:	af00      	add	r7, sp, #0
 8008732:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8008740:	4619      	mov	r1, r3
 8008742:	4610      	mov	r0, r2
 8008744:	f7fc fab9 	bl	8004cba <USBD_LL_SetupStage>
}
 8008748:	bf00      	nop
 800874a:	3708      	adds	r7, #8
 800874c:	46bd      	mov	sp, r7
 800874e:	bd80      	pop	{r7, pc}

08008750 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008750:	b580      	push	{r7, lr}
 8008752:	b082      	sub	sp, #8
 8008754:	af00      	add	r7, sp, #0
 8008756:	6078      	str	r0, [r7, #4]
 8008758:	460b      	mov	r3, r1
 800875a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8008762:	78fa      	ldrb	r2, [r7, #3]
 8008764:	6879      	ldr	r1, [r7, #4]
 8008766:	4613      	mov	r3, r2
 8008768:	00db      	lsls	r3, r3, #3
 800876a:	1a9b      	subs	r3, r3, r2
 800876c:	009b      	lsls	r3, r3, #2
 800876e:	440b      	add	r3, r1
 8008770:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8008774:	681a      	ldr	r2, [r3, #0]
 8008776:	78fb      	ldrb	r3, [r7, #3]
 8008778:	4619      	mov	r1, r3
 800877a:	f7fc fae9 	bl	8004d50 <USBD_LL_DataOutStage>
}
 800877e:	bf00      	nop
 8008780:	3708      	adds	r7, #8
 8008782:	46bd      	mov	sp, r7
 8008784:	bd80      	pop	{r7, pc}

08008786 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008786:	b580      	push	{r7, lr}
 8008788:	b082      	sub	sp, #8
 800878a:	af00      	add	r7, sp, #0
 800878c:	6078      	str	r0, [r7, #4]
 800878e:	460b      	mov	r3, r1
 8008790:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8008798:	78fa      	ldrb	r2, [r7, #3]
 800879a:	6879      	ldr	r1, [r7, #4]
 800879c:	4613      	mov	r3, r2
 800879e:	00db      	lsls	r3, r3, #3
 80087a0:	1a9b      	subs	r3, r3, r2
 80087a2:	009b      	lsls	r3, r3, #2
 80087a4:	440b      	add	r3, r1
 80087a6:	3348      	adds	r3, #72	; 0x48
 80087a8:	681a      	ldr	r2, [r3, #0]
 80087aa:	78fb      	ldrb	r3, [r7, #3]
 80087ac:	4619      	mov	r1, r3
 80087ae:	f7fc fb40 	bl	8004e32 <USBD_LL_DataInStage>
}
 80087b2:	bf00      	nop
 80087b4:	3708      	adds	r7, #8
 80087b6:	46bd      	mov	sp, r7
 80087b8:	bd80      	pop	{r7, pc}

080087ba <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80087ba:	b580      	push	{r7, lr}
 80087bc:	b082      	sub	sp, #8
 80087be:	af00      	add	r7, sp, #0
 80087c0:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80087c8:	4618      	mov	r0, r3
 80087ca:	f7fc fc4e 	bl	800506a <USBD_LL_SOF>
}
 80087ce:	bf00      	nop
 80087d0:	3708      	adds	r7, #8
 80087d2:	46bd      	mov	sp, r7
 80087d4:	bd80      	pop	{r7, pc}

080087d6 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{ 
 80087d6:	b580      	push	{r7, lr}
 80087d8:	b084      	sub	sp, #16
 80087da:	af00      	add	r7, sp, #0
 80087dc:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80087de:	2301      	movs	r3, #1
 80087e0:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	68db      	ldr	r3, [r3, #12]
 80087e6:	2b00      	cmp	r3, #0
 80087e8:	d102      	bne.n	80087f0 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 80087ea:	2300      	movs	r3, #0
 80087ec:	73fb      	strb	r3, [r7, #15]
 80087ee:	e008      	b.n	8008802 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	68db      	ldr	r3, [r3, #12]
 80087f4:	2b02      	cmp	r3, #2
 80087f6:	d102      	bne.n	80087fe <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 80087f8:	2301      	movs	r3, #1
 80087fa:	73fb      	strb	r3, [r7, #15]
 80087fc:	e001      	b.n	8008802 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 80087fe:	f7f8 f9bf 	bl	8000b80 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008808:	7bfa      	ldrb	r2, [r7, #15]
 800880a:	4611      	mov	r1, r2
 800880c:	4618      	mov	r0, r3
 800880e:	f7fc fbf6 	bl	8004ffe <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008818:	4618      	mov	r0, r3
 800881a:	f7fc fbaf 	bl	8004f7c <USBD_LL_Reset>
}
 800881e:	bf00      	nop
 8008820:	3710      	adds	r7, #16
 8008822:	46bd      	mov	sp, r7
 8008824:	bd80      	pop	{r7, pc}
	...

08008828 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008828:	b580      	push	{r7, lr}
 800882a:	b082      	sub	sp, #8
 800882c:	af00      	add	r7, sp, #0
 800882e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008836:	4618      	mov	r0, r3
 8008838:	f7fc fbf1 	bl	800501e <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	681b      	ldr	r3, [r3, #0]
 8008840:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008844:	681b      	ldr	r3, [r3, #0]
 8008846:	687a      	ldr	r2, [r7, #4]
 8008848:	6812      	ldr	r2, [r2, #0]
 800884a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800884e:	f043 0301 	orr.w	r3, r3, #1
 8008852:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	6a1b      	ldr	r3, [r3, #32]
 8008858:	2b00      	cmp	r3, #0
 800885a:	d005      	beq.n	8008868 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800885c:	4b04      	ldr	r3, [pc, #16]	; (8008870 <HAL_PCD_SuspendCallback+0x48>)
 800885e:	691b      	ldr	r3, [r3, #16]
 8008860:	4a03      	ldr	r2, [pc, #12]	; (8008870 <HAL_PCD_SuspendCallback+0x48>)
 8008862:	f043 0306 	orr.w	r3, r3, #6
 8008866:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8008868:	bf00      	nop
 800886a:	3708      	adds	r7, #8
 800886c:	46bd      	mov	sp, r7
 800886e:	bd80      	pop	{r7, pc}
 8008870:	e000ed00 	.word	0xe000ed00

08008874 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008874:	b580      	push	{r7, lr}
 8008876:	b082      	sub	sp, #8
 8008878:	af00      	add	r7, sp, #0
 800887a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008882:	4618      	mov	r0, r3
 8008884:	f7fc fbe0 	bl	8005048 <USBD_LL_Resume>
}
 8008888:	bf00      	nop
 800888a:	3708      	adds	r7, #8
 800888c:	46bd      	mov	sp, r7
 800888e:	bd80      	pop	{r7, pc}

08008890 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008890:	b580      	push	{r7, lr}
 8008892:	b082      	sub	sp, #8
 8008894:	af00      	add	r7, sp, #0
 8008896:	6078      	str	r0, [r7, #4]
 8008898:	460b      	mov	r3, r1
 800889a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80088a2:	78fa      	ldrb	r2, [r7, #3]
 80088a4:	4611      	mov	r1, r2
 80088a6:	4618      	mov	r0, r3
 80088a8:	f7fc fc06 	bl	80050b8 <USBD_LL_IsoOUTIncomplete>
}
 80088ac:	bf00      	nop
 80088ae:	3708      	adds	r7, #8
 80088b0:	46bd      	mov	sp, r7
 80088b2:	bd80      	pop	{r7, pc}

080088b4 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80088b4:	b580      	push	{r7, lr}
 80088b6:	b082      	sub	sp, #8
 80088b8:	af00      	add	r7, sp, #0
 80088ba:	6078      	str	r0, [r7, #4]
 80088bc:	460b      	mov	r3, r1
 80088be:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80088c6:	78fa      	ldrb	r2, [r7, #3]
 80088c8:	4611      	mov	r1, r2
 80088ca:	4618      	mov	r0, r3
 80088cc:	f7fc fbe7 	bl	800509e <USBD_LL_IsoINIncomplete>
}
 80088d0:	bf00      	nop
 80088d2:	3708      	adds	r7, #8
 80088d4:	46bd      	mov	sp, r7
 80088d6:	bd80      	pop	{r7, pc}

080088d8 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80088d8:	b580      	push	{r7, lr}
 80088da:	b082      	sub	sp, #8
 80088dc:	af00      	add	r7, sp, #0
 80088de:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80088e6:	4618      	mov	r0, r3
 80088e8:	f7fc fbf3 	bl	80050d2 <USBD_LL_DevConnected>
}
 80088ec:	bf00      	nop
 80088ee:	3708      	adds	r7, #8
 80088f0:	46bd      	mov	sp, r7
 80088f2:	bd80      	pop	{r7, pc}

080088f4 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80088f4:	b580      	push	{r7, lr}
 80088f6:	b082      	sub	sp, #8
 80088f8:	af00      	add	r7, sp, #0
 80088fa:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008902:	4618      	mov	r0, r3
 8008904:	f7fc fbf0 	bl	80050e8 <USBD_LL_DevDisconnected>
}
 8008908:	bf00      	nop
 800890a:	3708      	adds	r7, #8
 800890c:	46bd      	mov	sp, r7
 800890e:	bd80      	pop	{r7, pc}

08008910 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8008910:	b580      	push	{r7, lr}
 8008912:	b084      	sub	sp, #16
 8008914:	af00      	add	r7, sp, #0
 8008916:	6078      	str	r0, [r7, #4]
 8008918:	4608      	mov	r0, r1
 800891a:	4611      	mov	r1, r2
 800891c:	461a      	mov	r2, r3
 800891e:	4603      	mov	r3, r0
 8008920:	70fb      	strb	r3, [r7, #3]
 8008922:	460b      	mov	r3, r1
 8008924:	70bb      	strb	r3, [r7, #2]
 8008926:	4613      	mov	r3, r2
 8008928:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800892a:	2300      	movs	r3, #0
 800892c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800892e:	2300      	movs	r3, #0
 8008930:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 8008938:	78bb      	ldrb	r3, [r7, #2]
 800893a:	883a      	ldrh	r2, [r7, #0]
 800893c:	78f9      	ldrb	r1, [r7, #3]
 800893e:	f7f9 fa18 	bl	8001d72 <HAL_PCD_EP_Open>
 8008942:	4603      	mov	r3, r0
 8008944:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008946:	7bfb      	ldrb	r3, [r7, #15]
 8008948:	4618      	mov	r0, r3
 800894a:	f000 f8d7 	bl	8008afc <USBD_Get_USB_Status>
 800894e:	4603      	mov	r3, r0
 8008950:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 8008952:	7bbb      	ldrb	r3, [r7, #14]
}
 8008954:	4618      	mov	r0, r3
 8008956:	3710      	adds	r7, #16
 8008958:	46bd      	mov	sp, r7
 800895a:	bd80      	pop	{r7, pc}

0800895c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800895c:	b580      	push	{r7, lr}
 800895e:	b084      	sub	sp, #16
 8008960:	af00      	add	r7, sp, #0
 8008962:	6078      	str	r0, [r7, #4]
 8008964:	460b      	mov	r3, r1
 8008966:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008968:	2300      	movs	r3, #0
 800896a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800896c:	2300      	movs	r3, #0
 800896e:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8008976:	78fa      	ldrb	r2, [r7, #3]
 8008978:	4611      	mov	r1, r2
 800897a:	4618      	mov	r0, r3
 800897c:	f7f9 faf6 	bl	8001f6c <HAL_PCD_EP_SetStall>
 8008980:	4603      	mov	r3, r0
 8008982:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008984:	7bfb      	ldrb	r3, [r7, #15]
 8008986:	4618      	mov	r0, r3
 8008988:	f000 f8b8 	bl	8008afc <USBD_Get_USB_Status>
 800898c:	4603      	mov	r3, r0
 800898e:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;  
 8008990:	7bbb      	ldrb	r3, [r7, #14]
}
 8008992:	4618      	mov	r0, r3
 8008994:	3710      	adds	r7, #16
 8008996:	46bd      	mov	sp, r7
 8008998:	bd80      	pop	{r7, pc}

0800899a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800899a:	b580      	push	{r7, lr}
 800899c:	b084      	sub	sp, #16
 800899e:	af00      	add	r7, sp, #0
 80089a0:	6078      	str	r0, [r7, #4]
 80089a2:	460b      	mov	r3, r1
 80089a4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80089a6:	2300      	movs	r3, #0
 80089a8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80089aa:	2300      	movs	r3, #0
 80089ac:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 80089b4:	78fa      	ldrb	r2, [r7, #3]
 80089b6:	4611      	mov	r1, r2
 80089b8:	4618      	mov	r0, r3
 80089ba:	f7f9 fb3b 	bl	8002034 <HAL_PCD_EP_ClrStall>
 80089be:	4603      	mov	r3, r0
 80089c0:	73fb      	strb	r3, [r7, #15]
    
  usb_status =  USBD_Get_USB_Status(hal_status);  
 80089c2:	7bfb      	ldrb	r3, [r7, #15]
 80089c4:	4618      	mov	r0, r3
 80089c6:	f000 f899 	bl	8008afc <USBD_Get_USB_Status>
 80089ca:	4603      	mov	r3, r0
 80089cc:	73bb      	strb	r3, [r7, #14]
  
  return usb_status; 
 80089ce:	7bbb      	ldrb	r3, [r7, #14]
}
 80089d0:	4618      	mov	r0, r3
 80089d2:	3710      	adds	r7, #16
 80089d4:	46bd      	mov	sp, r7
 80089d6:	bd80      	pop	{r7, pc}

080089d8 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80089d8:	b480      	push	{r7}
 80089da:	b085      	sub	sp, #20
 80089dc:	af00      	add	r7, sp, #0
 80089de:	6078      	str	r0, [r7, #4]
 80089e0:	460b      	mov	r3, r1
 80089e2:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 80089ea:	60fb      	str	r3, [r7, #12]
  
  if((ep_addr & 0x80) == 0x80)
 80089ec:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80089f0:	2b00      	cmp	r3, #0
 80089f2:	da0b      	bge.n	8008a0c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 80089f4:	78fb      	ldrb	r3, [r7, #3]
 80089f6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80089fa:	68f9      	ldr	r1, [r7, #12]
 80089fc:	4613      	mov	r3, r2
 80089fe:	00db      	lsls	r3, r3, #3
 8008a00:	1a9b      	subs	r3, r3, r2
 8008a02:	009b      	lsls	r3, r3, #2
 8008a04:	440b      	add	r3, r1
 8008a06:	333e      	adds	r3, #62	; 0x3e
 8008a08:	781b      	ldrb	r3, [r3, #0]
 8008a0a:	e00b      	b.n	8008a24 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 8008a0c:	78fb      	ldrb	r3, [r7, #3]
 8008a0e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008a12:	68f9      	ldr	r1, [r7, #12]
 8008a14:	4613      	mov	r3, r2
 8008a16:	00db      	lsls	r3, r3, #3
 8008a18:	1a9b      	subs	r3, r3, r2
 8008a1a:	009b      	lsls	r3, r3, #2
 8008a1c:	440b      	add	r3, r1
 8008a1e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8008a22:	781b      	ldrb	r3, [r3, #0]
  }
}
 8008a24:	4618      	mov	r0, r3
 8008a26:	3714      	adds	r7, #20
 8008a28:	46bd      	mov	sp, r7
 8008a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a2e:	4770      	bx	lr

08008a30 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8008a30:	b580      	push	{r7, lr}
 8008a32:	b084      	sub	sp, #16
 8008a34:	af00      	add	r7, sp, #0
 8008a36:	6078      	str	r0, [r7, #4]
 8008a38:	460b      	mov	r3, r1
 8008a3a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008a3c:	2300      	movs	r3, #0
 8008a3e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008a40:	2300      	movs	r3, #0
 8008a42:	73bb      	strb	r3, [r7, #14]
  
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8008a4a:	78fa      	ldrb	r2, [r7, #3]
 8008a4c:	4611      	mov	r1, r2
 8008a4e:	4618      	mov	r0, r3
 8008a50:	f7f9 f96a 	bl	8001d28 <HAL_PCD_SetAddress>
 8008a54:	4603      	mov	r3, r0
 8008a56:	73fb      	strb	r3, [r7, #15]
  
  usb_status =  USBD_Get_USB_Status(hal_status);
 8008a58:	7bfb      	ldrb	r3, [r7, #15]
 8008a5a:	4618      	mov	r0, r3
 8008a5c:	f000 f84e 	bl	8008afc <USBD_Get_USB_Status>
 8008a60:	4603      	mov	r3, r0
 8008a62:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;  
 8008a64:	7bbb      	ldrb	r3, [r7, #14]
}
 8008a66:	4618      	mov	r0, r3
 8008a68:	3710      	adds	r7, #16
 8008a6a:	46bd      	mov	sp, r7
 8008a6c:	bd80      	pop	{r7, pc}

08008a6e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size    
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8008a6e:	b580      	push	{r7, lr}
 8008a70:	b086      	sub	sp, #24
 8008a72:	af00      	add	r7, sp, #0
 8008a74:	60f8      	str	r0, [r7, #12]
 8008a76:	607a      	str	r2, [r7, #4]
 8008a78:	461a      	mov	r2, r3
 8008a7a:	460b      	mov	r3, r1
 8008a7c:	72fb      	strb	r3, [r7, #11]
 8008a7e:	4613      	mov	r3, r2
 8008a80:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008a82:	2300      	movs	r3, #0
 8008a84:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008a86:	2300      	movs	r3, #0
 8008a88:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8008a8a:	68fb      	ldr	r3, [r7, #12]
 8008a8c:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 8008a90:	893b      	ldrh	r3, [r7, #8]
 8008a92:	7af9      	ldrb	r1, [r7, #11]
 8008a94:	687a      	ldr	r2, [r7, #4]
 8008a96:	f7f9 fa1f 	bl	8001ed8 <HAL_PCD_EP_Transmit>
 8008a9a:	4603      	mov	r3, r0
 8008a9c:	75fb      	strb	r3, [r7, #23]
  
  usb_status =  USBD_Get_USB_Status(hal_status); 
 8008a9e:	7dfb      	ldrb	r3, [r7, #23]
 8008aa0:	4618      	mov	r0, r3
 8008aa2:	f000 f82b 	bl	8008afc <USBD_Get_USB_Status>
 8008aa6:	4603      	mov	r3, r0
 8008aa8:	75bb      	strb	r3, [r7, #22]
  
  return usb_status;    
 8008aaa:	7dbb      	ldrb	r3, [r7, #22]
}
 8008aac:	4618      	mov	r0, r3
 8008aae:	3718      	adds	r7, #24
 8008ab0:	46bd      	mov	sp, r7
 8008ab2:	bd80      	pop	{r7, pc}

08008ab4 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8008ab4:	b580      	push	{r7, lr}
 8008ab6:	b086      	sub	sp, #24
 8008ab8:	af00      	add	r7, sp, #0
 8008aba:	60f8      	str	r0, [r7, #12]
 8008abc:	607a      	str	r2, [r7, #4]
 8008abe:	461a      	mov	r2, r3
 8008ac0:	460b      	mov	r3, r1
 8008ac2:	72fb      	strb	r3, [r7, #11]
 8008ac4:	4613      	mov	r3, r2
 8008ac6:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008ac8:	2300      	movs	r3, #0
 8008aca:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008acc:	2300      	movs	r3, #0
 8008ace:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8008ad0:	68fb      	ldr	r3, [r7, #12]
 8008ad2:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 8008ad6:	893b      	ldrh	r3, [r7, #8]
 8008ad8:	7af9      	ldrb	r1, [r7, #11]
 8008ada:	687a      	ldr	r2, [r7, #4]
 8008adc:	f7f9 f9b1 	bl	8001e42 <HAL_PCD_EP_Receive>
 8008ae0:	4603      	mov	r3, r0
 8008ae2:	75fb      	strb	r3, [r7, #23]
  
  usb_status =  USBD_Get_USB_Status(hal_status);   
 8008ae4:	7dfb      	ldrb	r3, [r7, #23]
 8008ae6:	4618      	mov	r0, r3
 8008ae8:	f000 f808 	bl	8008afc <USBD_Get_USB_Status>
 8008aec:	4603      	mov	r3, r0
 8008aee:	75bb      	strb	r3, [r7, #22]
  
  return usb_status; 
 8008af0:	7dbb      	ldrb	r3, [r7, #22]
}
 8008af2:	4618      	mov	r0, r3
 8008af4:	3718      	adds	r7, #24
 8008af6:	46bd      	mov	sp, r7
 8008af8:	bd80      	pop	{r7, pc}
	...

08008afc <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008afc:	b480      	push	{r7}
 8008afe:	b085      	sub	sp, #20
 8008b00:	af00      	add	r7, sp, #0
 8008b02:	4603      	mov	r3, r0
 8008b04:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008b06:	2300      	movs	r3, #0
 8008b08:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8008b0a:	79fb      	ldrb	r3, [r7, #7]
 8008b0c:	2b03      	cmp	r3, #3
 8008b0e:	d817      	bhi.n	8008b40 <USBD_Get_USB_Status+0x44>
 8008b10:	a201      	add	r2, pc, #4	; (adr r2, 8008b18 <USBD_Get_USB_Status+0x1c>)
 8008b12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b16:	bf00      	nop
 8008b18:	08008b29 	.word	0x08008b29
 8008b1c:	08008b2f 	.word	0x08008b2f
 8008b20:	08008b35 	.word	0x08008b35
 8008b24:	08008b3b 	.word	0x08008b3b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8008b28:	2300      	movs	r3, #0
 8008b2a:	73fb      	strb	r3, [r7, #15]
    break;
 8008b2c:	e00b      	b.n	8008b46 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008b2e:	2302      	movs	r3, #2
 8008b30:	73fb      	strb	r3, [r7, #15]
    break;
 8008b32:	e008      	b.n	8008b46 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008b34:	2301      	movs	r3, #1
 8008b36:	73fb      	strb	r3, [r7, #15]
    break;
 8008b38:	e005      	b.n	8008b46 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008b3a:	2302      	movs	r3, #2
 8008b3c:	73fb      	strb	r3, [r7, #15]
    break;
 8008b3e:	e002      	b.n	8008b46 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8008b40:	2302      	movs	r3, #2
 8008b42:	73fb      	strb	r3, [r7, #15]
    break;
 8008b44:	bf00      	nop
  }
  return usb_status;
 8008b46:	7bfb      	ldrb	r3, [r7, #15]
}
 8008b48:	4618      	mov	r0, r3
 8008b4a:	3714      	adds	r7, #20
 8008b4c:	46bd      	mov	sp, r7
 8008b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b52:	4770      	bx	lr

08008b54 <__libc_init_array>:
 8008b54:	b570      	push	{r4, r5, r6, lr}
 8008b56:	4e0d      	ldr	r6, [pc, #52]	; (8008b8c <__libc_init_array+0x38>)
 8008b58:	4c0d      	ldr	r4, [pc, #52]	; (8008b90 <__libc_init_array+0x3c>)
 8008b5a:	1ba4      	subs	r4, r4, r6
 8008b5c:	10a4      	asrs	r4, r4, #2
 8008b5e:	2500      	movs	r5, #0
 8008b60:	42a5      	cmp	r5, r4
 8008b62:	d109      	bne.n	8008b78 <__libc_init_array+0x24>
 8008b64:	4e0b      	ldr	r6, [pc, #44]	; (8008b94 <__libc_init_array+0x40>)
 8008b66:	4c0c      	ldr	r4, [pc, #48]	; (8008b98 <__libc_init_array+0x44>)
 8008b68:	f000 f82c 	bl	8008bc4 <_init>
 8008b6c:	1ba4      	subs	r4, r4, r6
 8008b6e:	10a4      	asrs	r4, r4, #2
 8008b70:	2500      	movs	r5, #0
 8008b72:	42a5      	cmp	r5, r4
 8008b74:	d105      	bne.n	8008b82 <__libc_init_array+0x2e>
 8008b76:	bd70      	pop	{r4, r5, r6, pc}
 8008b78:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8008b7c:	4798      	blx	r3
 8008b7e:	3501      	adds	r5, #1
 8008b80:	e7ee      	b.n	8008b60 <__libc_init_array+0xc>
 8008b82:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8008b86:	4798      	blx	r3
 8008b88:	3501      	adds	r5, #1
 8008b8a:	e7f2      	b.n	8008b72 <__libc_init_array+0x1e>
 8008b8c:	08008c50 	.word	0x08008c50
 8008b90:	08008c50 	.word	0x08008c50
 8008b94:	08008c50 	.word	0x08008c50
 8008b98:	08008c54 	.word	0x08008c54

08008b9c <memcpy>:
 8008b9c:	b510      	push	{r4, lr}
 8008b9e:	1e43      	subs	r3, r0, #1
 8008ba0:	440a      	add	r2, r1
 8008ba2:	4291      	cmp	r1, r2
 8008ba4:	d100      	bne.n	8008ba8 <memcpy+0xc>
 8008ba6:	bd10      	pop	{r4, pc}
 8008ba8:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008bac:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008bb0:	e7f7      	b.n	8008ba2 <memcpy+0x6>

08008bb2 <memset>:
 8008bb2:	4402      	add	r2, r0
 8008bb4:	4603      	mov	r3, r0
 8008bb6:	4293      	cmp	r3, r2
 8008bb8:	d100      	bne.n	8008bbc <memset+0xa>
 8008bba:	4770      	bx	lr
 8008bbc:	f803 1b01 	strb.w	r1, [r3], #1
 8008bc0:	e7f9      	b.n	8008bb6 <memset+0x4>
	...

08008bc4 <_init>:
 8008bc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008bc6:	bf00      	nop
 8008bc8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008bca:	bc08      	pop	{r3}
 8008bcc:	469e      	mov	lr, r3
 8008bce:	4770      	bx	lr

08008bd0 <_fini>:
 8008bd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008bd2:	bf00      	nop
 8008bd4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008bd6:	bc08      	pop	{r3}
 8008bd8:	469e      	mov	lr, r3
 8008bda:	4770      	bx	lr
